
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000708e  00007142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000708e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e2d  00800208  00800208  0000714a  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  0000714a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000814a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000817c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a78  00000000  00000000  000081c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000d837  00000000  00000000  00008c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025bb  00000000  00000000  0001646f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000080cd  00000000  00000000  00018a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001910  00000000  00000000  00020af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000030e2  00000000  00000000  00022408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000087b0  00000000  00000000  000254ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000da0  00000000  00000000  0002dc9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__ctors_end>
       4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
       8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
       c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      10:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      14:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      18:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      1c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      20:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      24:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      28:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      2c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      30:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      34:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      38:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      3c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      40:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      44:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      48:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      4c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      50:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      54:	0c 94 1a 0f 	jmp	0x1e34	; 0x1e34 <__vector_21>
      58:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      5c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      60:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      64:	0c 94 79 33 	jmp	0x66f2	; 0x66f2 <__vector_25>
      68:	0c 94 a4 33 	jmp	0x6748	; 0x6748 <__vector_26>
      6c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      70:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      74:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      78:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      7c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      80:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      84:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      88:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      8c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      90:	0c 94 85 32 	jmp	0x650a	; 0x650a <__vector_36>
      94:	0c 94 c5 32 	jmp	0x658a	; 0x658a <__vector_37>
      98:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      9c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      a0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      a4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      a8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      ac:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      b0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      b4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      b8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      bc:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      c0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      c4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      c8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      cc:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      d0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      d4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      d8:	0c 94 50 34 	jmp	0x68a0	; 0x68a0 <__vector_54>
      dc:	0c 94 96 34 	jmp	0x692c	; 0x692c <__vector_55>
      e0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      e4:	c2 1c       	adc	r12, r2
      e6:	cd 1c       	adc	r12, r13
      e8:	d9 1c       	adc	r13, r9
      ea:	f5 1c       	adc	r15, r5
      ec:	12 1d       	adc	r17, r2
      ee:	33 1d       	adc	r19, r3
      f0:	3e 1d       	adc	r19, r14
      f2:	49 1d       	adc	r20, r9
      f4:	5e 1d       	adc	r21, r14
      f6:	74 1d       	adc	r23, r4
      f8:	7c 1d       	adc	r23, r12
      fa:	8a 1d       	adc	r24, r10
      fc:	5e 1d       	adc	r21, r14
      fe:	b7 1d       	adc	r27, r7
     100:	c7 1d       	adc	r28, r7
     102:	eb 1d       	adc	r30, r11
     104:	3d 1e       	adc	r3, r29
     106:	56 1e       	adc	r5, r22
     108:	6b 1e       	adc	r6, r27
     10a:	84 1e       	adc	r8, r20
     10c:	8c 1e       	adc	r8, r28
     10e:	b1 1e       	adc	r11, r17
     110:	b1 1e       	adc	r11, r17
     112:	ca 1e       	adc	r12, r26
     114:	d7 1e       	adc	r13, r23
     116:	c6 1e       	adc	r12, r22
     118:	32 1f       	adc	r19, r18
     11a:	3a 1f       	adc	r19, r26
     11c:	85 1f       	adc	r24, r21
     11e:	e7 1f       	adc	r30, r23
     120:	11 20       	and	r1, r1
     122:	3d 20       	and	r3, r13
     124:	6c 20       	and	r6, r12
     126:	74 20       	and	r7, r4
     128:	7a 20       	and	r7, r10
     12a:	32 1f       	adc	r19, r18
     12c:	82 20       	and	r8, r2
     12e:	96 20       	and	r9, r6
     130:	7a 20       	and	r7, r10
     132:	d4 20       	and	r13, r4
     134:	e1 20       	and	r14, r1
     136:	ed 20       	and	r14, r13
     138:	02 21       	and	r16, r2
     13a:	1b 21       	and	r17, r11
     13c:	3e 21       	and	r19, r14
     13e:	49 21       	and	r20, r9
     140:	4f 21       	and	r20, r15
     142:	54 21       	and	r21, r4
     144:	67 21       	and	r22, r7
     146:	88 21       	and	r24, r8
     148:	9b 21       	and	r25, r11
     14a:	54 21       	and	r21, r4
     14c:	ad 36       	cpi	r26, 0x6D	; 109
     14e:	c2 36       	cpi	r28, 0x62	; 98
     150:	b0 36       	cpi	r27, 0x60	; 96
     152:	a1 36       	cpi	r26, 0x61	; 97
     154:	b3 36       	cpi	r27, 0x63	; 99
     156:	b6 36       	cpi	r27, 0x66	; 102
     158:	a4 36       	cpi	r26, 0x64	; 100
     15a:	b9 36       	cpi	r27, 0x69	; 105
     15c:	a7 36       	cpi	r26, 0x67	; 103
     15e:	bc 36       	cpi	r27, 0x6C	; 108
     160:	aa 36       	cpi	r26, 0x6A	; 106
     162:	bf 36       	cpi	r27, 0x6F	; 111

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWmidichanSW>:
     2b4:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2c4:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2d4:	20 00                                                .

000002d6 <usbHWBits>:
     2d6:	2c 20 42 69 74 73 3a 00                             , Bits:.

000002de <usbHWmodule>:
     2de:	4d 6f 64 75 6c 65 3a 00                             Module:.

000002e6 <usbHWempty>:
     2e6:	65 6d 70 74 79 00                                   empty.

000002ec <usbHWRegister>:
     2ec:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

000002f8 <usbHWRange>:
     2f8:	52 61 6e 67 65 20 00                                Range .

000002ff <usbHWManual>:
     2ff:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

00000308 <usbHWmodulCheck>:
     308:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     318:	20 00                                                .

0000031a <usbHWmodulInst>:
     31a:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     32a:	3a 20 00                                            : .

0000032d <usbHWtitel>:
     32d:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     33d:	72 61 74 69 6f 6e 0d 0a 00                          ration...

00000346 <HelloMsg>:
     346:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     356:	65 72 66 61 63 65 0d 0a 00                          erface...

0000035f <usbLog>:
     35f:	4c 6f 67 0d 0a 00                                   Log...

00000365 <usbEmpty>:
     365:	65 6d 70 74 79 0d 0a 00                             empty...

0000036d <msg_programming1>:
     36d:	73 61 76 65 2e 2e 2e 00                             save....

00000375 <logNone>:
     375:	3c 6e 6f 6e 65 3e 00                                <none>.

0000037c <stringNotAssigen>:
     37c:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

00000387 <menuMessageE>:
     387:	45 3a 00                                            E:.

0000038a <menuMessageOK>:
     38a:	6f 6b 00                                            ok.

0000038d <menuMessageAbort>:
     38d:	61 62 6f 72 74 00                                   abort.

00000393 <menuMessageMIDIpanic>:
     393:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003a2 <messageRegisterMan>:
     3a2:	2b 00                                               +.

000003a4 <messageLoaded>:
     3a4:	20 52 65 67 2e 67 65 73 65 74 7a 74 00               Reg.gesetzt.

000003b1 <messageSaved>:
     3b1:	20 52 65 67 2e 69 6e 20 4b 6f 6d 62 2e 67 65 73      Reg.in Komb.ges
     3c1:	70 2e 00                                            p..

000003c4 <MenuMIDIOutText>:
     3c4:	4f 75 74 3a 00                                      Out:.

000003c9 <MenuMIDIInText>:
     3c9:	49 6e 3a 00                                         In:.

000003cd <initMenuText>:
     3cd:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003d7 <nibbleInfo>:
	...
     3df:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     3ef:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     3ff:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     40f:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     41f:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     42f:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     43f:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     44f:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

0000045e <menu_selFunc>:
     45e:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 e8 06     ..<none>........
     46e:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     47e:	f2 06 de 06 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     48e:	6e 00 00 00 2e 0c d4 06 00 00 00 00 01 10 4b 6f     n.............Ko
     49e:	70 70 65 6c 32 3c 33 00 00 00 b6 06 21 1c 00 00     ppel2<3.....!...
     4ae:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 ac 06     ..Koppel1<3.....
     4be:	24 1c 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     $.....KoppelP<3.
     4ce:	00 00 a2 06 27 1c 00 00 01 10 4b 6f 70 70 65 6c     ....'.....Koppel
     4de:	31 3c 32 00 00 00 98 06 2a 1c 00 00 01 10 4b 6f     1<2.....*.....Ko
     4ee:	70 70 65 6c 50 3c 32 00 00 00 8e 06 2d 1c 00 00     ppelP<2.....-...
     4fe:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 84 06     ..KoppelP<1.....
     50e:	30 1c 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     0.....Koppel3<2.
     51e:	00 00 7a 06 33 1c 00 00 01 10 4b 6f 70 70 65 6c     ..z.3.....Koppel
     52e:	33 3c 31 00 00 00 70 06 36 1c 00 00 01 10 4b 6f     3<1...p.6.....Ko
     53e:	70 70 65 6c 33 3c 50 00 00 00 66 06 39 1c 00 00     ppel3<P...f.9...
     54e:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 5c 06     ..Koppel2<1...\.
     55e:	3c 1c 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     <.....Koppel2<P.
     56e:	00 00 52 06 3f 1c 00 00 01 10 4b 6f 70 70 65 6c     ..R.?.....Koppel
     57e:	31 3c 50 00 00 00 48 06 42 1c 00 00 01 10 4b 6f     1<P...H.B.....Ko
     58e:	6d 62 69 6e 20 31 41 00 00 00 3e 06 88 28 00 00     mbin 1A...>..(..
     59e:	01 10 4b 6f 6d 62 69 6e 20 32 41 00 00 00 34 06     ..Kombin 2A...4.
     5ae:	8b 28 00 00 01 10 4b 6f 6d 62 69 6e 20 33 41 00     .(....Kombin 3A.
     5be:	00 00 2a 06 8e 28 00 00 01 10 4b 6f 6d 62 69 6e     ..*..(....Kombin
     5ce:	20 34 41 00 00 00 20 06 91 28 00 00 01 10 52 65      4A... ..(....Re
     5de:	67 2e 61 75 73 00 00 00 00 00 16 06 28 18 00 00     g.aus.......(...
     5ee:	01 10 4d 49 44 49 20 4f 66 66 00 00 00 00 c0 06     ..MIDI Off......
     5fe:	91 26 00 00 c1 10 53 65 74 75 70 00 00 00 00 00     .&....Setup.....
     60e:	1e 0d ca 06 00 00 00 00                             ........

00000616 <shortKeyTextRegOff>:
     616:	52 65 67 09 00 00 00 00 00 00                       Reg.......

00000620 <shortKeyTextK4A>:
     620:	4b 62 34 41 80 00 00 00 00 00                       Kb4A......

0000062a <shortKeyTextK3A>:
     62a:	4b 62 33 41 80 00 00 00 00 00                       Kb3A......

00000634 <shortKeyTextK2A>:
     634:	4b 62 32 41 80 00 00 00 00 00                       Kb2A......

0000063e <shortKeyTextK1A>:
     63e:	4b 62 31 41 80 00 00 00 00 00                       Kb1A......

00000648 <shortKeyTextCpl1P>:
     648:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000652 <shortKeyTextCpl2P>:
     652:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

0000065c <shortKeyTextCpl21>:
     65c:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

00000666 <shortKeyTextCpl3P>:
     666:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000670 <shortKeyTextCpl31>:
     670:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000067a <shortKeyTextCpl32>:
     67a:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000684 <shortKeyTextCplP1>:
     684:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

0000068e <shortKeyTextCplP2>:
     68e:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

00000698 <shortKeyTextCpl12>:
     698:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000006a2 <shortKeyTextCplP3>:
     6a2:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000006ac <shortKeyTextCpl13>:
     6ac:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000006b6 <shortKeyTextCpl23>:
     6b6:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000006c0 <shortKeyTextMIDIoff>:
     6c0:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000006ca <shortKeyTextSetup>:
     6ca:	53 65 74 75 00 00 00 00 00 00                       Setu......

000006d4 <shortKeyTextStim>:
     6d4:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000006de <shortKeyTextMenu>:
     6de:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000006e8 <shortKeyTextNone>:
	...

000006f2 <menu_main>:
     6f2:	81 00 4d 61 6e 75 61 6c 00 00 00 00 6a 07 00 00     ..Manual....j...
     702:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     712:	92 07 00 00 dd 1b 00 00 01 00 4d 49 44 49 00 00     ..........MIDI..
     722:	00 00 00 00 5e 09 00 00 00 00 00 00 01 00 54 61     ....^.........Ta
     732:	73 74 65 6e 00 00 00 00 de 0b 00 00 00 00 4b 18     sten..........K.
     742:	01 00 53 74 61 74 75 73 00 00 00 00 42 11 00 00     ..Status....B...
     752:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     762:	1e 0d 00 00 00 00 00 00                             ........

0000076a <menu_manual>:
     76a:	81 00 4b 6f 70 70 65 6c 00 00 00 00 6e 08 00 00     ..Koppel....n...
     77a:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     78a:	2e 0c 00 00 00 00 00 00                             ........

00000792 <menu_register>:
     792:	8c 00 4b 6f 6d 62 2e 6c 61 64 2e 00 00 00 a8 05     ..Komb.lad......
     7a2:	00 00 ea 1b 0c 00 4b 6f 6d 62 2e 73 70 2e 00 00     ......Komb.sp...
     7b2:	00 00 a8 05 00 00 40 18 01 00 61 75 73 00 00 00     ......@...aus...
	...
     7ca:	e4 1b 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     7da:	00 00 6d 05 00 00 00 18 0e 00 52 65 67 2e 39 2d     ..m.......Reg.9-
     7ea:	31 36 00 00 00 00 6e 05 00 00 00 18 0e 00 52 65     16....n.......Re
     7fa:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 00 18     g.17-24...o.....
     80a:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     81a:	00 00 00 18 0e 00 52 65 67 2e 33 33 2d 34 30 00     ......Reg.33-40.
     82a:	00 00 71 05 00 00 00 18 0e 00 52 65 67 2e 34 31     ..q.......Reg.41
     83a:	2d 34 38 00 00 00 72 05 00 00 00 18 0e 00 52 65     -48...r.......Re
     84a:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 00 18     g.49-54...s.....
     85a:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     86a:	00 00 00 18                                         ....

0000086e <menu_coupler>:
     86e:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 0f 08     ..2<3...........
     87e:	00 00 2d 18 09 00 31 3c 33 00 00 00 00 00 00 00     ..-...1<3.......
     88e:	00 00 10 08 00 00 2d 18 09 00 31 3c 32 00 00 00     ......-...1<2...
     89e:	00 00 00 00 00 00 11 08 00 00 2d 18 09 00 50 3c     ..........-...P<
     8ae:	33 00 00 00 00 00 00 00 00 00 12 08 00 00 2d 18     3.............-.
     8be:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 13 08     ..P<2...........
     8ce:	00 00 2d 18 09 00 50 3c 31 00 00 00 00 00 00 00     ..-...P<1.......
     8de:	00 00 14 08 00 00 2d 18 09 00 33 3c 32 00 00 00     ......-...3<2...
     8ee:	00 00 00 00 00 00 15 08 00 00 2d 18 09 00 33 3c     ..........-...3<
     8fe:	31 00 00 00 00 00 00 00 00 00 16 08 00 00 2d 18     1.............-.
     90e:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 17 08     ..3<P...........
     91e:	00 00 2d 18 09 00 32 3c 31 00 00 00 00 00 00 00     ..-...2<1.......
     92e:	00 00 18 08 00 00 2d 18 09 00 32 3c 50 00 00 00     ......-...2<P...
     93e:	00 00 00 00 00 00 19 08 00 00 2d 18 c9 00 31 3c     ..........-...1<
     94e:	50 00 00 00 00 00 00 00 00 00 1a 08 00 00 2d 18     P.............-.

0000095e <menu_midi>:
     95e:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     96e:	91 26 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .&....MIDIin....
     97e:	fe 09 00 00 00 00 b9 19 01 00 4d 49 44 49 6f 75     ..........MIDIou
     98e:	74 00 00 00 7e 0c 00 00 00 00 b5 19 03 10 54 68     t...~.........Th
     99e:	72 75 2d 49 6e 00 00 00 00 00 24 08 00 00 fc 17     ru-In.....$.....
     9ae:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 25 08     ..Thru-Out....%.
     9be:	00 00 fc 17 09 00 41 63 63 65 70 74 20 50 43 00     ......Accept PC.
     9ce:	00 00 30 09 00 00 b1 19 09 00 41 63 74 2e 53 65     ..0.......Act.Se
     9de:	6e 73 65 00 00 00 2e 09 00 00 b1 19 c9 00 56 65     nse...........Ve
     9ee:	6c 30 34 4f 66 66 00 00 00 00 2f 09 00 00 b1 19     l04Off..../.....

000009fe <menu_midiIn>:
     9fe:	81 00 43 68 2e 31 00 00 00 00 00 00 3e 0b 00 00     ..Ch.1......>...
     a0e:	76 17 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     v.....Ch.2......
     a1e:	3e 0b 01 00 76 17 00 00 01 00 43 68 2e 33 00 00     >...v.....Ch.3..
     a2e:	00 00 00 00 3e 0b 02 00 76 17 00 00 01 00 43 68     ....>...v.....Ch
     a3e:	2e 34 00 00 00 00 00 00 3e 0b 03 00 76 17 00 00     .4......>...v...
     a4e:	01 00 43 68 2e 35 00 00 00 00 00 00 3e 0b 04 00     ..Ch.5......>...
     a5e:	76 17 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     v.....Ch.6......
     a6e:	3e 0b 05 00 76 17 00 00 01 00 43 68 2e 37 00 00     >...v.....Ch.7..
     a7e:	00 00 00 00 3e 0b 06 00 76 17 00 00 01 00 43 68     ....>...v.....Ch
     a8e:	2e 38 00 00 00 00 00 00 3e 0b 07 00 76 17 00 00     .8......>...v...
     a9e:	01 00 43 68 2e 39 00 00 00 00 00 00 3e 0b 08 00     ..Ch.9......>...
     aae:	76 17 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     v.....Ch.10.....
     abe:	3e 0b 09 00 76 17 00 00 01 00 43 68 2e 31 31 00     >...v.....Ch.11.
     ace:	00 00 00 00 3e 0b 0a 00 76 17 00 00 01 00 43 68     ....>...v.....Ch
     ade:	2e 31 32 00 00 00 00 00 3e 0b 0b 00 76 17 00 00     .12.....>...v...
     aee:	01 00 43 68 2e 31 33 00 00 00 00 00 3e 0b 0c 00     ..Ch.13.....>...
     afe:	76 17 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     v.....Ch.14.....
     b0e:	3e 0b 0d 00 76 17 00 00 01 00 43 68 2e 31 35 00     >...v.....Ch.15.
     b1e:	00 00 00 00 3e 0b 0e 00 76 17 00 00 c1 00 43 68     ....>...v.....Ch
     b2e:	2e 31 36 00 00 00 00 00 3e 0b 0f 00 76 17 00 00     .16.....>...v...

00000b3e <menu_midiInSec>:
     b3e:	81 00 53 65 63 74 2e 31 00 00 00 00 8e 0b 00 00     ..Sect.1........
     b4e:	81 17 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     b5e:	8e 0b 01 00 81 17 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     b6e:	00 00 00 00 8e 0b 02 00 81 17 00 00 c1 00 53 65     ..............Se
     b7e:	63 74 2e 34 00 00 00 00 8e 0b 03 00 81 17 00 00     ct.4............

00000b8e <menu_midiInVar>:
     b8e:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 26 08     ..Manual......&.
     b9e:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     bae:	00 00 27 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..'.......Range.
     bbe:	00 00 00 00 00 00 28 08 00 00 00 00 c4 90 4d 61     ......(.......Ma
     bce:	6e 4e 6f 74 65 00 00 00 00 00 29 08 00 00 00 00     nNote.....).....

00000bde <menu_key>:
     bde:	81 08 54 61 73 74 65 31 00 00 00 00 5e 04 00 00     ..Taste1....^...
     bee:	e5 17 1b 29 01 08 54 61 73 74 65 32 00 00 00 00     ...)..Taste2....
     bfe:	5e 04 01 00 e5 17 1b 29 01 08 54 61 73 74 65 33     ^......)..Taste3
     c0e:	00 00 00 00 5e 04 02 00 e5 17 1b 29 c1 08 54 61     ....^......)..Ta
     c1e:	73 74 65 34 00 00 00 00 5e 04 03 00 e5 17 1b 29     ste4....^......)

00000c2e <menu_tune>:
     c2e:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     c3e:	95 18 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     c4e:	00 00 01 00 95 18 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     c5e:	00 00 00 00 00 00 02 00 95 18 00 00 c1 20 50 65     ............. Pe
     c6e:	64 61 6c 00 00 00 00 00 00 00 03 00 95 18 00 00     dal.............

00000c7e <menu_midiOut>:
     c7e:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 26 09     ..III.........&.
     c8e:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     c9e:	00 00 28 09 00 00 00 00 03 10 49 00 00 00 00 00     ..(.......I.....
     cae:	00 00 00 00 00 00 2a 09 00 00 00 00 03 10 50 00     ......*.......P.
	...
     cc6:	00 00 2c 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..,.......III(in
     cd6:	74 29 00 00 00 00 27 09 00 00 00 00 03 10 49 49     t)....'.......II
     ce6:	28 69 6e 74 29 00 00 00 00 00 29 09 00 00 00 00     (int).....).....
     cf6:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2b 09     ..I(int)......+.
     d06:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     d16:	00 00 2d 09 00 00 00 00                             ..-.....

00000d1e <menu_setup>:
     d1e:	81 00 4d 6f 64 75 6c 65 00 00 00 00 e6 0d 00 00     ..Module........
     d2e:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     d3e:	3a 0f 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     :.........Power.
     d4e:	00 00 00 00 aa 0d 00 00 00 00 00 00 c1 00 45 45     ..............EE
     d5e:	70 72 6f 6d 00 00 00 00 6e 0d 00 00 00 00 00 00     prom....n.......

00000d6e <menu_eeprom>:
     d6e:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     d7e:	a4 27 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     .'....EEBackup..
     d8e:	00 00 00 00 8c 27 00 00 c1 00 45 45 52 65 73 74     .....'....EERest
     d9e:	6f 72 65 00 00 00 00 00 98 27 00 00                 ore......'..

00000daa <menu_Power>:
     daa:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     dba:	df 29 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .)....PowerOff..
     dca:	00 00 00 00 e8 29 00 00 c1 00 50 2e 52 65 73 74     .....)....P.Rest
     dda:	61 72 74 00 00 00 00 00 f0 29 00 00                 art......)..

00000de6 <menu_module>:
     de6:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 50 03     ..ModRead.....P.
     df6:	00 00 c7 19 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     e06:	00 00 4f 03 00 00 c7 19 0a 08 4d 6f 64 4f 4b 00     ..O.......ModOK.
     e16:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     e26:	64 54 65 73 74 00 00 00 4a 0e 00 00 00 00 00 00     dTest...J.......
     e36:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 76 0f 00 00     ..ModAssign.v...
     e46:	00 00 bd 19                                         ....

00000e4a <menu_ModeSel>:
     e4a:	81 00 4d 6f 64 2e 30 00 00 00 00 00 ea 0e 00 00     ..Mod.0.........
     e5a:	6b 17 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     k.....Mod.1.....
     e6a:	ea 0e 01 00 6b 17 00 00 01 00 4d 6f 64 2e 32 00     ....k.....Mod.2.
     e7a:	00 00 00 00 ea 0e 02 00 6b 17 00 00 01 00 4d 6f     ........k.....Mo
     e8a:	64 2e 33 00 00 00 00 00 ea 0e 03 00 6b 17 00 00     d.3.........k...
     e9a:	01 00 4d 6f 64 2e 34 00 00 00 00 00 ea 0e 04 00     ..Mod.4.........
     eaa:	6b 17 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     k.....Mod.5.....
     eba:	ea 0e 05 00 6b 17 00 00 01 00 4d 6f 64 2e 36 00     ....k.....Mod.6.
     eca:	00 00 00 00 ea 0e 06 00 6b 17 00 00 c1 00 4d 6f     ........k.....Mo
     eda:	64 2e 37 00 00 00 00 00 ea 0e 07 00 6b 17 00 00     d.7.........k...

00000eea <menu_ModTestSelcted>:
     eea:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     efa:	4f 18 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     O.....Write.....
     f0a:	00 00 ad 05 02 17 3e 17 01 00 54 65 73 74 50 74     ......>...TestPt
     f1a:	72 6e 00 00 00 00 00 00 6f 27 00 00 c1 00 4c 6f     rn......o'....Lo
     f2a:	6f 70 54 73 74 00 00 00 00 00 00 00 83 18 00 00     opTst...........

00000f3a <menu_USBser>:
     f3a:	89 00 41 63 74 69 76 65 00 00 00 00 00 00 3a 0c     ..Active......:.
     f4a:	00 00 f1 19 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
     f5a:	00 00 00 00 cb 19 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
     f6a:	66 67 00 00 00 00 00 00 05 1a 00 00                 fg..........

00000f76 <menu_modAssign>:
     f76:	81 00 4d 61 6e 2e 33 00 00 00 00 00 7a 10 00 00     ..Man.3.....z...
     f86:	9f 17 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
     f96:	7a 10 01 00 9f 17 00 00 01 00 4d 61 6e 2e 31 00     z.........Man.1.
     fa6:	00 00 00 00 7a 10 02 00 9f 17 00 00 01 00 50 65     ....z.........Pe
     fb6:	64 61 6c 00 00 00 00 00 7a 10 03 00 9f 17 00 00     dal.....z.......
     fc6:	c1 00 52 65 67 69 73 74 65 72 00 00 da 0f 04 00     ..Register......
     fd6:	00 00 00 00                                         ....

00000fda <menu_modSection8>:
     fda:	81 00 53 65 63 74 2e 31 00 00 00 00 ca 10 00 00     ..Sect.1........
     fea:	cf 17 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     ffa:	ca 10 01 00 cf 17 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    100a:	00 00 00 00 ca 10 02 00 cf 17 00 00 01 00 53 65     ..............Se
    101a:	63 74 2e 34 00 00 00 00 ca 10 03 00 cf 17 00 00     ct.4............
    102a:	01 00 53 65 63 74 2e 35 00 00 00 00 ca 10 04 00     ..Sect.5........
    103a:	cf 17 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    104a:	ca 10 05 00 cf 17 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
    105a:	00 00 00 00 ca 10 06 00 cf 17 00 00 c1 00 53 65     ..............Se
    106a:	63 74 2e 38 00 00 00 00 ca 10 07 00 cf 17 00 00     ct.8............

0000107a <menu_modSection>:
    107a:	81 00 53 65 63 74 2e 31 00 00 00 00 06 11 00 00     ..Sect.1........
    108a:	aa 17 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    109a:	06 11 01 00 aa 17 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    10aa:	00 00 00 00 06 11 02 00 aa 17 00 00 c1 00 53 65     ..............Se
    10ba:	63 74 2e 34 00 00 00 00 06 11 03 00 aa 17 00 00     ct.4............

000010ca <menu_modDefineReg>:
    10ca:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f6 07     ..RegBeg........
    10da:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    10ea:	00 00 f7 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    10fa:	2f 42 69 74 00 00 f8 07 00 00 00 00                 /Bit........

00001106 <menu_modDefine>:
    1106:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 32 09     ..NoteBeg.....2.
    1116:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    1126:	00 00 33 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..3.......Module
    1136:	2f 42 69 74 00 00 34 09 00 00 00 00                 /Bit..4.....

00001142 <menu_status>:
    1142:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1152:	98 22 00 00 02 40 4d 49 44 49 2d 49 6e 00 00 00     ."...@MIDI-In...
    1162:	00 00 00 00 1c 22 00 00 c2 40 4d 49 44 49 2d 4f     ....."...@MIDI-O
    1172:	75 74 00 00 00 00 00 00 5a 22 00 00                 ut......Z"..

0000117e <sw_version>:
    117e:	56 30 2e 36 31 00                                   V0.61.

00001184 <cplInfo>:
    1184:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    1194:	01 02 00 03 01 03 02 03                             ........

0000119c <keylabel_1>:
    119c:	31 00                                               1.

0000119e <keylabel_0>:
    119e:	30 00                                               0.

000011a0 <keylabel_text>:
    11a0:	54 65 78 74 80 00                                   Text..

000011a6 <keylabel_exit>:
    11a6:	45 78 69 74 00                                      Exit.

000011ab <keylabel_off>:
    11ab:	7e 61 75 73 00                                      ~aus.

000011b0 <keylabel_on>:
    11b0:	7e 65 69 6e 00                                      ~ein.

000011b5 <keylabel_onoff>:
    11b5:	45 69 6e 80 00                                      Ein..

000011ba <keylabel_minus>:
    11ba:	2d 00                                               -.

000011bc <keylabel_plus>:
    11bc:	2b 00                                               +.

000011be <keylabel_left>:
    11be:	7f 00                                               ..

000011c0 <keylabel_right>:
    11c0:	7e 00                                               ~.

000011c2 <keylabel_down>:
    11c2:	09 00                                               ..

000011c4 <keylabel_up>:
    11c4:	08 00                                               ..

000011c6 <cgPattern_Block>:
    11c6:	00 00 0e 0e 0e 0e 00 00                             ........

000011ce <cgPattern_Down>:
    11ce:	04 04 04 04 15 0e 04 00                             ........

000011d6 <cgPattern_Up>:
    11d6:	04 0e 15 04 04 04 04 00                             ........

000011de <cr_lf>:
    11de:	0d 0a 00 00                                         ....

000011e2 <__ctors_end>:
    11e2:	11 24       	eor	r1, r1
    11e4:	1f be       	out	0x3f, r1	; 63
    11e6:	cf ef       	ldi	r28, 0xFF	; 255
    11e8:	d1 e2       	ldi	r29, 0x21	; 33
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	00 e0       	ldi	r16, 0x00	; 0
    11f0:	0c bf       	out	0x3c, r16	; 60

000011f2 <__do_copy_data>:
    11f2:	12 e0       	ldi	r17, 0x02	; 2
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b2 e0       	ldi	r27, 0x02	; 2
    11f8:	ee e8       	ldi	r30, 0x8E	; 142
    11fa:	f0 e7       	ldi	r31, 0x70	; 112
    11fc:	00 e0       	ldi	r16, 0x00	; 0
    11fe:	0b bf       	out	0x3b, r16	; 59
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <__do_copy_data+0x14>
    1202:	07 90       	elpm	r0, Z+
    1204:	0d 92       	st	X+, r0
    1206:	a8 30       	cpi	r26, 0x08	; 8
    1208:	b1 07       	cpc	r27, r17
    120a:	d9 f7       	brne	.-10     	; 0x1202 <__do_copy_data+0x10>

0000120c <__do_clear_bss>:
    120c:	20 e1       	ldi	r18, 0x10	; 16
    120e:	a8 e0       	ldi	r26, 0x08	; 8
    1210:	b2 e0       	ldi	r27, 0x02	; 2
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <.do_clear_bss_start>

00001214 <.do_clear_bss_loop>:
    1214:	1d 92       	st	X+, r1

00001216 <.do_clear_bss_start>:
    1216:	a5 33       	cpi	r26, 0x35	; 53
    1218:	b2 07       	cpc	r27, r18
    121a:	e1 f7       	brne	.-8      	; 0x1214 <.do_clear_bss_loop>
    121c:	0e 94 86 14 	call	0x290c	; 0x290c <main>
    1220:	0c 94 45 38 	jmp	0x708a	; 0x708a <_exit>

00001224 <__bad_interrupt>:
    1224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001228 <crc16_ram>:

uint8_t ee_initError = EE_ERROR_NONE;

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
    1228:	fc 01       	movw	r30, r24
	uint16_t result = CRC_START;
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	9f ef       	ldi	r25, 0xFF	; 255
	while (count-- > 0){
    122e:	1c c0       	rjmp	.+56     	; 0x1268 <crc16_ram+0x40>
		result =  _crc16_update(result, *pRam++);
    1230:	df 01       	movw	r26, r30
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	20 81       	ld	r18, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    1236:	82 27       	eor	r24, r18
    1238:	28 2f       	mov	r18, r24
    123a:	22 95       	swap	r18
    123c:	28 27       	eor	r18, r24
    123e:	02 2e       	mov	r0, r18
    1240:	26 95       	lsr	r18
    1242:	26 95       	lsr	r18
    1244:	20 25       	eor	r18, r0
    1246:	02 2e       	mov	r0, r18
    1248:	26 95       	lsr	r18
    124a:	20 25       	eor	r18, r0
    124c:	27 70       	andi	r18, 0x07	; 7
    124e:	08 2e       	mov	r0, r24
    1250:	89 2f       	mov	r24, r25
    1252:	26 95       	lsr	r18
    1254:	07 94       	ror	r0
    1256:	27 95       	ror	r18
    1258:	90 2d       	mov	r25, r0
    125a:	82 27       	eor	r24, r18
    125c:	06 94       	lsr	r0
    125e:	27 95       	ror	r18
    1260:	90 25       	eor	r25, r0
    1262:	82 27       	eor	r24, r18

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    1264:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    1266:	fd 01       	movw	r30, r26

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    1268:	ab 01       	movw	r20, r22
    126a:	41 50       	subi	r20, 0x01	; 1
    126c:	51 09       	sbc	r21, r1
    126e:	67 2b       	or	r22, r23
    1270:	f9 f6       	brne	.-66     	; 0x1230 <crc16_ram+0x8>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    1272:	08 95       	ret

00001274 <crc16_eeprom>:

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
	uint16_t result = CRC_START;
    1280:	cf ef       	ldi	r28, 0xFF	; 255
    1282:	df ef       	ldi	r29, 0xFF	; 255
	while (count-- > 0){
    1284:	21 c0       	rjmp	.+66     	; 0x12c8 <crc16_eeprom+0x54>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    1286:	7c 01       	movw	r14, r24
    1288:	2f ef       	ldi	r18, 0xFF	; 255
    128a:	e2 1a       	sub	r14, r18
    128c:	f2 0a       	sbc	r15, r18
    128e:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    1292:	9e 01       	movw	r18, r28
    1294:	28 27       	eor	r18, r24
    1296:	82 2f       	mov	r24, r18
    1298:	82 95       	swap	r24
    129a:	82 27       	eor	r24, r18
    129c:	08 2e       	mov	r0, r24
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	80 25       	eor	r24, r0
    12a4:	08 2e       	mov	r0, r24
    12a6:	86 95       	lsr	r24
    12a8:	80 25       	eor	r24, r0
    12aa:	87 70       	andi	r24, 0x07	; 7
    12ac:	02 2e       	mov	r0, r18
    12ae:	23 2f       	mov	r18, r19
    12b0:	86 95       	lsr	r24
    12b2:	07 94       	ror	r0
    12b4:	87 95       	ror	r24
    12b6:	30 2d       	mov	r19, r0
    12b8:	28 27       	eor	r18, r24
    12ba:	06 94       	lsr	r0
    12bc:	87 95       	ror	r24
    12be:	30 25       	eor	r19, r0
    12c0:	28 27       	eor	r18, r24
    12c2:	e9 01       	movw	r28, r18
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    12c4:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    12c6:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    12c8:	8b 01       	movw	r16, r22
    12ca:	01 50       	subi	r16, 0x01	; 1
    12cc:	11 09       	sbc	r17, r1
    12ce:	67 2b       	or	r22, r23
    12d0:	d1 f6       	brne	.-76     	; 0x1286 <crc16_eeprom+0x12>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    12d2:	ce 01       	movw	r24, r28
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	08 95       	ret

000012e2 <crc16_ram_startVal>:

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
    12e2:	fc 01       	movw	r30, r24
    12e4:	ca 01       	movw	r24, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    12e6:	1c c0       	rjmp	.+56     	; 0x1320 <crc16_ram_startVal+0x3e>
		result =  _crc16_update(result, *pRam++);
    12e8:	df 01       	movw	r26, r30
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	20 81       	ld	r18, Z
    12ee:	82 27       	eor	r24, r18
    12f0:	28 2f       	mov	r18, r24
    12f2:	22 95       	swap	r18
    12f4:	28 27       	eor	r18, r24
    12f6:	02 2e       	mov	r0, r18
    12f8:	26 95       	lsr	r18
    12fa:	26 95       	lsr	r18
    12fc:	20 25       	eor	r18, r0
    12fe:	02 2e       	mov	r0, r18
    1300:	26 95       	lsr	r18
    1302:	20 25       	eor	r18, r0
    1304:	27 70       	andi	r18, 0x07	; 7
    1306:	08 2e       	mov	r0, r24
    1308:	89 2f       	mov	r24, r25
    130a:	26 95       	lsr	r18
    130c:	07 94       	ror	r0
    130e:	27 95       	ror	r18
    1310:	90 2d       	mov	r25, r0
    1312:	82 27       	eor	r24, r18
    1314:	06 94       	lsr	r0
    1316:	27 95       	ror	r18
    1318:	90 25       	eor	r25, r0
    131a:	82 27       	eor	r24, r18
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    131c:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    131e:	fd 01       	movw	r30, r26
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1320:	ab 01       	movw	r20, r22
    1322:	41 50       	subi	r20, 0x01	; 1
    1324:	51 09       	sbc	r21, r1
    1326:	67 2b       	or	r22, r23
    1328:	f9 f6       	brne	.-66     	; 0x12e8 <crc16_ram_startVal+0x6>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    132a:	08 95       	ret

0000132c <crc16_eeprom_startVal>:

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ea 01       	movw	r28, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    133a:	21 c0       	rjmp	.+66     	; 0x137e <crc16_eeprom_startVal+0x52>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    133c:	7c 01       	movw	r14, r24
    133e:	2f ef       	ldi	r18, 0xFF	; 255
    1340:	e2 1a       	sub	r14, r18
    1342:	f2 0a       	sbc	r15, r18
    1344:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    1348:	ae 01       	movw	r20, r28
    134a:	48 27       	eor	r20, r24
    134c:	84 2f       	mov	r24, r20
    134e:	82 95       	swap	r24
    1350:	84 27       	eor	r24, r20
    1352:	08 2e       	mov	r0, r24
    1354:	86 95       	lsr	r24
    1356:	86 95       	lsr	r24
    1358:	80 25       	eor	r24, r0
    135a:	08 2e       	mov	r0, r24
    135c:	86 95       	lsr	r24
    135e:	80 25       	eor	r24, r0
    1360:	87 70       	andi	r24, 0x07	; 7
    1362:	04 2e       	mov	r0, r20
    1364:	45 2f       	mov	r20, r21
    1366:	86 95       	lsr	r24
    1368:	07 94       	ror	r0
    136a:	87 95       	ror	r24
    136c:	50 2d       	mov	r21, r0
    136e:	48 27       	eor	r20, r24
    1370:	06 94       	lsr	r0
    1372:	87 95       	ror	r24
    1374:	50 25       	eor	r21, r0
    1376:	48 27       	eor	r20, r24
    1378:	ea 01       	movw	r28, r20
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    137a:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    137c:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    137e:	8b 01       	movw	r16, r22
    1380:	01 50       	subi	r16, 0x01	; 1
    1382:	11 09       	sbc	r17, r1
    1384:	67 2b       	or	r22, r23
    1386:	d1 f6       	brne	.-76     	; 0x133c <crc16_eeprom_startVal+0x10>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    1388:	ce 01       	movw	r24, r28
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	08 95       	ret

00001398 <eeprom_ReadManualMap>:


uint8_t eeprom_ReadManualMap(){
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    139c:	82 e3       	ldi	r24, 0x32	; 50
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    13a4:	ec 01       	movw	r28, r24
    13a6:	60 e3       	ldi	r22, 0x30	; 48
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	62 df       	rcall	.-316    	; 0x1274 <crc16_eeprom>
    13b0:	c8 17       	cp	r28, r24
    13b2:	d9 07       	cpc	r29, r25
    13b4:	81 f4       	brne	.+32     	; 0x13d6 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    13be:	8d 34       	cpi	r24, 0x4D	; 77
    13c0:	51 f4       	brne	.+20     	; 0x13d6 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    13c2:	40 e3       	ldi	r20, 0x30	; 48
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	82 e3       	ldi	r24, 0x32	; 50
    13cc:	99 e0       	ldi	r25, 0x09	; 9
    13ce:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		return (EE_LOAD_OK);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    13d6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap)) 
    13ec:	85 e3       	ldi	r24, 0x35	; 53
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    13f4:	ec 01       	movw	r28, r24
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	71 e0       	ldi	r23, 0x01	; 1
    13fa:	85 e3       	ldi	r24, 0x35	; 53
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	3a df       	rcall	.-396    	; 0x1274 <crc16_eeprom>
    1400:	c8 17       	cp	r28, r24
    1402:	d9 07       	cpc	r29, r25
    1404:	81 f4       	brne	.+32     	; 0x1426 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1406:	84 e3       	ldi	r24, 0x34	; 52
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    140e:	89 34       	cpi	r24, 0x49	; 73
    1410:	51 f4       	brne	.+20     	; 0x1426 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	51 e0       	ldi	r21, 0x01	; 1
    1416:	65 e3       	ldi	r22, 0x35	; 53
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	86 e2       	ldi	r24, 0x26	; 38
    141c:	98 e0       	ldi	r25, 0x08	; 8
    141e:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		return (EE_LOAD_OK);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1426:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    142a:	82 60       	ori	r24, 0x02	; 2
    142c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1430:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))  
    143c:	83 e4       	ldi	r24, 0x43	; 67
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    1444:	ec 01       	movw	r28, r24
    1446:	6b e0       	ldi	r22, 0x0B	; 11
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	88 e3       	ldi	r24, 0x38	; 56
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	12 df       	rcall	.-476    	; 0x1274 <crc16_eeprom>
    1450:	c8 17       	cp	r28, r24
    1452:	d9 07       	cpc	r29, r25
    1454:	c1 f4       	brne	.+48     	; 0x1486 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    1456:	87 e3       	ldi	r24, 0x37	; 55
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    145e:	8f 34       	cpi	r24, 0x4F	; 79
    1460:	91 f4       	brne	.+36     	; 0x1486 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1462:	48 e0       	ldi	r20, 0x08	; 8
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	68 e3       	ldi	r22, 0x38	; 56
    1468:	71 e0       	ldi	r23, 0x01	; 1
    146a:	86 e2       	ldi	r24, 0x26	; 38
    146c:	99 e0       	ldi	r25, 0x09	; 9
    146e:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1472:	43 e0       	ldi	r20, 0x03	; 3
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e4       	ldi	r22, 0x40	; 64
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	8e e2       	ldi	r24, 0x2E	; 46
    147c:	99 e0       	ldi	r25, 0x09	; 9
    147e:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		return (EE_LOAD_OK);
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    1486:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1490:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))  
    149c:	88 e4       	ldi	r24, 0x48	; 72
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    14a4:	ec 01       	movw	r28, r24
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	86 e4       	ldi	r24, 0x46	; 70
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	e2 de       	rcall	.-572    	; 0x1274 <crc16_eeprom>
    14b0:	c8 17       	cp	r28, r24
    14b2:	d9 07       	cpc	r29, r25
    14b4:	a1 f4       	brne	.+40     	; 0x14de <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    14b6:	85 e4       	ldi	r24, 0x45	; 69
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    14be:	89 36       	cpi	r24, 0x69	; 105
    14c0:	71 f4       	brne	.+28     	; 0x14de <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_ModuleAssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    14c2:	86 e4       	ldi	r24, 0x46	; 70
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    14ca:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <pipe_ModuleAssnRead>
		pipe_ModuleAssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    14ce:	87 e4       	ldi	r24, 0x47	; 71
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    14d6:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <pipe_ModuleAssnWrite>
		return (EE_LOAD_OK);
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    14de:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14e2:	88 60       	ori	r24, 0x08	; 8
    14e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    14f4:	87 ef       	ldi	r24, 0xF7	; 247
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    14fc:	ec 01       	movw	r28, r24
    14fe:	62 e0       	ldi	r22, 0x02	; 2
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	85 ef       	ldi	r24, 0xF5	; 245
    1504:	93 e0       	ldi	r25, 0x03	; 3
    1506:	b6 de       	rcall	.-660    	; 0x1274 <crc16_eeprom>
    1508:	c8 17       	cp	r28, r24
    150a:	d9 07       	cpc	r29, r25
    150c:	81 f4       	brne	.+32     	; 0x152e <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    150e:	84 ef       	ldi	r24, 0xF4	; 244
    1510:	93 e0       	ldi	r25, 0x03	; 3
    1512:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    1516:	84 35       	cpi	r24, 0x54	; 84
    1518:	51 f4       	brne	.+20     	; 0x152e <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    151a:	42 e0       	ldi	r20, 0x02	; 2
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	65 ef       	ldi	r22, 0xF5	; 245
    1520:	73 e0       	ldi	r23, 0x03	; 3
    1522:	84 e2       	ldi	r24, 0x24	; 36
    1524:	98 e0       	ldi	r25, 0x08	; 8
    1526:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		return (EE_LOAD_OK);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	06 c0       	rjmp	.+12     	; 0x153a <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    152e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1538:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1544:	8c e4       	ldi	r24, 0x4C	; 76
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    154c:	ec 01       	movw	r28, r24
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	8b e4       	ldi	r24, 0x4B	; 75
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	8e de       	rcall	.-740    	; 0x1274 <crc16_eeprom>
    1558:	c8 17       	cp	r28, r24
    155a:	d9 07       	cpc	r29, r25
    155c:	71 f4       	brne	.+28     	; 0x157a <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    155e:	8a e4       	ldi	r24, 0x4A	; 74
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    1566:	85 35       	cpi	r24, 0x55	; 85
    1568:	41 f4       	brne	.+16     	; 0x157a <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serusb_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    156a:	8b e4       	ldi	r24, 0x4B	; 75
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    1572:	80 93 3a 0c 	sts	0x0C3A, r24	; 0x800c3a <serusb_Active>
		return (EE_LOAD_OK);
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    157a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    157e:	88 60       	ori	r24, 0x08	; 8
    1580:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1584:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	8f e4       	ldi	r24, 0x4F	; 79
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	6d de       	rcall	.-806    	; 0x1274 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    159a:	ac 01       	movw	r20, r24
    159c:	68 e1       	ldi	r22, 0x18	; 24
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	80 e5       	ldi	r24, 0x50	; 80
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	c3 de       	rcall	.-634    	; 0x132c <crc16_eeprom_startVal>
    15a6:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    15a8:	88 e6       	ldi	r24, 0x68	; 104
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    15b0:	c8 17       	cp	r28, r24
    15b2:	d9 07       	cpc	r29, r25
    15b4:	b1 f4       	brne	.+44     	; 0x15e2 <eeprom_ReadReg+0x56>
    15b6:	8e e4       	ldi	r24, 0x4E	; 78
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    15be:	82 35       	cpi	r24, 0x52	; 82
    15c0:	81 f4       	brne	.+32     	; 0x15e2 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount);
    15c2:	8f e4       	ldi	r24, 0x4F	; 79
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    15ca:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    15ce:	48 e1       	ldi	r20, 0x18	; 24
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	60 e5       	ldi	r22, 0x50	; 80
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	86 ef       	ldi	r24, 0xF6	; 246
    15d8:	97 e0       	ldi	r25, 0x07	; 7
    15da:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		return(EE_LOAD_OK);
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    15e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15e6:	80 62       	ori	r24, 0x20	; 32
    15e8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    15f8:	8b ee       	ldi	r24, 0xEB	; 235
    15fa:	93 e0       	ldi	r25, 0x03	; 3
    15fc:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    1600:	ec 01       	movw	r28, r24
    1602:	60 e8       	ldi	r22, 0x80	; 128
    1604:	72 e0       	ldi	r23, 0x02	; 2
    1606:	8b e6       	ldi	r24, 0x6B	; 107
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	34 de       	rcall	.-920    	; 0x1274 <crc16_eeprom>
    160c:	c8 17       	cp	r28, r24
    160e:	d9 07       	cpc	r29, r25
    1610:	81 f4       	brne	.+32     	; 0x1632 <eeprom_ReadProg+0x3e>
    1612:	8a e6       	ldi	r24, 0x6A	; 106
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    161a:	80 35       	cpi	r24, 0x50	; 80
    161c:	51 f4       	brne	.+20     	; 0x1632 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	52 e0       	ldi	r21, 0x02	; 2
    1622:	6b e6       	ldi	r22, 0x6B	; 107
    1624:	71 e0       	ldi	r23, 0x01	; 1
    1626:	82 e6       	ldi	r24, 0x62	; 98
    1628:	99 e0       	ldi	r25, 0x09	; 9
    162a:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		return(EE_LOAD_OK);
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	06 c0       	rjmp	.+12     	; 0x163e <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1632:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1636:	80 64       	ori	r24, 0x40	; 64
    1638:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    163c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    1648:	82 ef       	ldi	r24, 0xF2	; 242
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 1b 38 	call	0x7036	; 0x7036 <eeprom_read_word>
    1650:	ec 01       	movw	r28, r24
    1652:	64 e0       	ldi	r22, 0x04	; 4
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	8e ee       	ldi	r24, 0xEE	; 238
    1658:	93 e0       	ldi	r25, 0x03	; 3
    165a:	0c de       	rcall	.-1000   	; 0x1274 <crc16_eeprom>
    165c:	c8 17       	cp	r28, r24
    165e:	d9 07       	cpc	r29, r25
    1660:	51 f4       	brne	.+20     	; 0x1676 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1662:	44 e0       	ldi	r20, 0x04	; 4
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	6e ee       	ldi	r22, 0xEE	; 238
    1668:	73 e0       	ldi	r23, 0x03	; 3
    166a:	83 eb       	ldi	r24, 0xB3	; 179
    166c:	95 e0       	ldi	r25, 0x05	; 5
    166e:	0e 94 03 38 	call	0x7006	; 0x7006 <eeprom_read_block>
		return(EE_LOAD_OK);
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    1676:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    167a:	80 68       	ori	r24, 0x80	; 128
    167c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1680:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1692:	65 e6       	ldi	r22, 0x65	; 101
    1694:	89 ef       	ldi	r24, 0xF9	; 249
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	0c 94 2f 38 	jmp	0x705e	; 0x705e <eeprom_update_byte>
    169c:	08 95       	ret

0000169e <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    16a2:	60 e3       	ldi	r22, 0x30	; 48
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	82 e3       	ldi	r24, 0x32	; 50
    16a8:	99 e0       	ldi	r25, 0x09	; 9
    16aa:	be dd       	rcall	.-1156   	; 0x1228 <crc16_ram>
    16ac:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    16ae:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    16b2:	6d e4       	ldi	r22, 0x4D	; 77
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    16bc:	40 e3       	ldi	r20, 0x30	; 48
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	62 e0       	ldi	r22, 0x02	; 2
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	82 e3       	ldi	r24, 0x32	; 50
    16c6:	99 e0       	ldi	r25, 0x09	; 9
    16c8:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    16cc:	be 01       	movw	r22, r28
    16ce:	82 e3       	ldi	r24, 0x32	; 50
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    16d6:	d8 df       	rcall	.-80     	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    16d8:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	71 e0       	ldi	r23, 0x01	; 1
    16ea:	86 e2       	ldi	r24, 0x26	; 38
    16ec:	98 e0       	ldi	r25, 0x08	; 8
    16ee:	9c dd       	rcall	.-1224   	; 0x1228 <crc16_ram>
    16f0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    16f2:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    16f6:	69 e4       	ldi	r22, 0x49	; 73
    16f8:	84 e3       	ldi	r24, 0x34	; 52
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	51 e0       	ldi	r21, 0x01	; 1
    1704:	65 e3       	ldi	r22, 0x35	; 53
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	86 e2       	ldi	r24, 0x26	; 38
    170a:	98 e0       	ldi	r25, 0x08	; 8
    170c:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1710:	be 01       	movw	r22, r28
    1712:	85 e3       	ldi	r24, 0x35	; 53
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    171a:	b6 df       	rcall	.-148    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    171c:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    172a:	68 e0       	ldi	r22, 0x08	; 8
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	86 e2       	ldi	r24, 0x26	; 38
    1730:	99 e0       	ldi	r25, 0x09	; 9
    1732:	7a dd       	rcall	.-1292   	; 0x1228 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1734:	ac 01       	movw	r20, r24
    1736:	63 e0       	ldi	r22, 0x03	; 3
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	8e e2       	ldi	r24, 0x2E	; 46
    173c:	99 e0       	ldi	r25, 0x09	; 9
    173e:	d1 dd       	rcall	.-1118   	; 0x12e2 <crc16_ram_startVal>
    1740:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1742:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    1746:	6f e4       	ldi	r22, 0x4F	; 79
    1748:	87 e3       	ldi	r24, 0x37	; 55
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1750:	48 e0       	ldi	r20, 0x08	; 8
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	68 e3       	ldi	r22, 0x38	; 56
    1756:	71 e0       	ldi	r23, 0x01	; 1
    1758:	86 e2       	ldi	r24, 0x26	; 38
    175a:	99 e0       	ldi	r25, 0x09	; 9
    175c:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1760:	43 e0       	ldi	r20, 0x03	; 3
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	60 e4       	ldi	r22, 0x40	; 64
    1766:	71 e0       	ldi	r23, 0x01	; 1
    1768:	8e e2       	ldi	r24, 0x2E	; 46
    176a:	99 e0       	ldi	r25, 0x09	; 9
    176c:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1770:	be 01       	movw	r22, r28
    1772:	83 e4       	ldi	r24, 0x43	; 67
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    177a:	86 df       	rcall	.-244    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    177c:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_ModuleAssnRead, sizeof(pipe_ModuleAssnRead));
    178a:	61 e0       	ldi	r22, 0x01	; 1
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e5       	ldi	r24, 0x50	; 80
    1790:	93 e0       	ldi	r25, 0x03	; 3
    1792:	4a dd       	rcall	.-1388   	; 0x1228 <crc16_ram>
    1794:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1796:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    179a:	69 e6       	ldi	r22, 0x69	; 105
    179c:	85 e4       	ldi	r24, 0x45	; 69
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_ModuleAssnRead);
    17a4:	60 91 50 03 	lds	r22, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
    17a8:	86 e4       	ldi	r24, 0x46	; 70
    17aa:	91 e0       	ldi	r25, 0x01	; 1
    17ac:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_ModuleAssnWrite);
    17b0:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    17b4:	87 e4       	ldi	r24, 0x47	; 71
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    17bc:	be 01       	movw	r22, r28
    17be:	88 e4       	ldi	r24, 0x48	; 72
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    17c6:	60 df       	rcall	.-320    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    17c8:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serusb_Active, sizeof(serusb_Active));
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	70 e0       	ldi	r23, 0x00	; 0
    17da:	8a e3       	ldi	r24, 0x3A	; 58
    17dc:	9c e0       	ldi	r25, 0x0C	; 12
    17de:	24 dd       	rcall	.-1464   	; 0x1228 <crc16_ram>
    17e0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17e2:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    17e6:	65 e5       	ldi	r22, 0x55	; 85
    17e8:	8a e4       	ldi	r24, 0x4A	; 74
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serusb_Active);
    17f0:	60 91 3a 0c 	lds	r22, 0x0C3A	; 0x800c3a <serusb_Active>
    17f4:	8b e4       	ldi	r24, 0x4B	; 75
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    17fc:	be 01       	movw	r22, r28
    17fe:	8c e4       	ldi	r24, 0x4C	; 76
    1800:	91 e0       	ldi	r25, 0x01	; 1
    1802:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    1806:	40 df       	rcall	.-384    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1808:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1816:	62 e0       	ldi	r22, 0x02	; 2
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	84 e2       	ldi	r24, 0x24	; 36
    181c:	98 e0       	ldi	r25, 0x08	; 8
    181e:	04 dd       	rcall	.-1528   	; 0x1228 <crc16_ram>
    1820:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1822:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1826:	64 e5       	ldi	r22, 0x54	; 84
    1828:	84 ef       	ldi	r24, 0xF4	; 244
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1830:	42 e0       	ldi	r20, 0x02	; 2
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	65 ef       	ldi	r22, 0xF5	; 245
    1836:	73 e0       	ldi	r23, 0x03	; 3
    1838:	84 e2       	ldi	r24, 0x24	; 36
    183a:	98 e0       	ldi	r25, 0x08	; 8
    183c:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1840:	be 01       	movw	r22, r28
    1842:	87 ef       	ldi	r24, 0xF7	; 247
    1844:	93 e0       	ldi	r25, 0x03	; 3
    1846:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    184a:	1e df       	rcall	.-452    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    184c:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	8e e0       	ldi	r24, 0x0E	; 14
    1860:	98 e0       	ldi	r25, 0x08	; 8
    1862:	e2 dc       	rcall	.-1596   	; 0x1228 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1864:	ac 01       	movw	r20, r24
    1866:	68 e1       	ldi	r22, 0x18	; 24
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	86 ef       	ldi	r24, 0xF6	; 246
    186c:	97 e0       	ldi	r25, 0x07	; 7
    186e:	39 dd       	rcall	.-1422   	; 0x12e2 <crc16_ram_startVal>
    1870:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1872:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1876:	62 e5       	ldi	r22, 0x52	; 82
    1878:	8e e4       	ldi	r24, 0x4E	; 78
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1880:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <registerCount>
    1884:	8f e4       	ldi	r24, 0x4F	; 79
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    188c:	48 e1       	ldi	r20, 0x18	; 24
    188e:	50 e0       	ldi	r21, 0x00	; 0
    1890:	60 e5       	ldi	r22, 0x50	; 80
    1892:	71 e0       	ldi	r23, 0x01	; 1
    1894:	86 ef       	ldi	r24, 0xF6	; 246
    1896:	97 e0       	ldi	r25, 0x07	; 7
    1898:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    189c:	be 01       	movw	r22, r28
    189e:	88 e6       	ldi	r24, 0x68	; 104
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    18a6:	f0 de       	rcall	.-544    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18a8:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	08 95       	ret

000018b2 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    18b6:	60 e8       	ldi	r22, 0x80	; 128
    18b8:	72 e0       	ldi	r23, 0x02	; 2
    18ba:	82 e6       	ldi	r24, 0x62	; 98
    18bc:	99 e0       	ldi	r25, 0x09	; 9
    18be:	b4 dc       	rcall	.-1688   	; 0x1228 <crc16_ram>
    18c0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    18c2:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    18c6:	60 e5       	ldi	r22, 0x50	; 80
    18c8:	8a e6       	ldi	r24, 0x6A	; 106
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    18d0:	40 e8       	ldi	r20, 0x80	; 128
    18d2:	52 e0       	ldi	r21, 0x02	; 2
    18d4:	6b e6       	ldi	r22, 0x6B	; 107
    18d6:	71 e0       	ldi	r23, 0x01	; 1
    18d8:	82 e6       	ldi	r24, 0x62	; 98
    18da:	99 e0       	ldi	r25, 0x09	; 9
    18dc:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    18e0:	be 01       	movw	r22, r28
    18e2:	8b ee       	ldi	r24, 0xEB	; 235
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    18ea:	ce de       	rcall	.-612    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18ec:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    18fa:	64 e0       	ldi	r22, 0x04	; 4
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	83 eb       	ldi	r24, 0xB3	; 179
    1900:	95 e0       	ldi	r25, 0x05	; 5
    1902:	92 dc       	rcall	.-1756   	; 0x1228 <crc16_ram>
    1904:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1906:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    190a:	6b e4       	ldi	r22, 0x4B	; 75
    190c:	8d ee       	ldi	r24, 0xED	; 237
    190e:	93 e0       	ldi	r25, 0x03	; 3
    1910:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1914:	44 e0       	ldi	r20, 0x04	; 4
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	6e ee       	ldi	r22, 0xEE	; 238
    191a:	73 e0       	ldi	r23, 0x03	; 3
    191c:	83 eb       	ldi	r24, 0xB3	; 179
    191e:	95 e0       	ldi	r25, 0x05	; 5
    1920:	0e 94 20 38 	call	0x7040	; 0x7040 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1924:	be 01       	movw	r22, r28
    1926:	82 ef       	ldi	r24, 0xF2	; 242
    1928:	93 e0       	ldi	r25, 0x03	; 3
    192a:	0e 94 41 38 	call	0x7082	; 0x7082 <eeprom_update_word>
	eepromWriteSignature();
    192e:	ac de       	rcall	.-680    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1930:	0e 94 3b 37 	call	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    193a:	b1 de       	rcall	.-670    	; 0x169e <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    193c:	d2 de       	rcall	.-604    	; 0x16e2 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    193e:	f3 de       	rcall	.-538    	; 0x1726 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1940:	22 df       	rcall	.-444    	; 0x1786 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1942:	47 df       	rcall	.-370    	; 0x17d2 <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1944:	88 df       	rcall	.-240    	; 0x1856 <eeprom_UpdateReg>
    1946:	b5 df       	rcall	.-150    	; 0x18b2 <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1948:	d6 df       	rcall	.-84     	; 0x18f6 <eeprom_UpdateSoftkeys>
    194a:	63 cf       	rjmp	.-314    	; 0x1812 <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    194c:	08 95       	ret

0000194e <eepromCopy>:
    194e:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1960:	11 c0       	rjmp	.+34     	; 0x1984 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1962:	7c 01       	movw	r14, r24
    1964:	2f ef       	ldi	r18, 0xFF	; 255
    1966:	e2 1a       	sub	r14, r18
    1968:	f2 0a       	sbc	r15, r18
    196a:	0e 94 13 38 	call	0x7026	; 0x7026 <eeprom_read_byte>
    196e:	6e 01       	movw	r12, r28
    1970:	9f ef       	ldi	r25, 0xFF	; 255
    1972:	c9 1a       	sub	r12, r25
    1974:	d9 0a       	sbc	r13, r25
    1976:	68 2f       	mov	r22, r24
    1978:	ce 01       	movw	r24, r28
    197a:	0e 94 2f 38 	call	0x705e	; 0x705e <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    197e:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1980:	e6 01       	movw	r28, r12
    1982:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1984:	8a 01       	movw	r16, r20
    1986:	01 50       	subi	r16, 0x01	; 1
    1988:	11 09       	sbc	r17, r1
    198a:	45 2b       	or	r20, r21
    198c:	51 f7       	brne	.-44     	; 0x1962 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	df 90       	pop	r13
    199c:	cf 90       	pop	r12
    199e:	08 95       	ret

000019a0 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    19a0:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	58 e0       	ldi	r21, 0x08	; 8
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	78 e0       	ldi	r23, 0x08	; 8
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	ce df       	rcall	.-100    	; 0x194e <eepromCopy>
	lcd_waitSymbolOff();
    19b2:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
    19b6:	08 95       	ret

000019b8 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    19b8:	0e 94 2d 37 	call	0x6e5a	; 0x6e5a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	58 e0       	ldi	r21, 0x08	; 8
    19c0:	60 e0       	ldi	r22, 0x00	; 0
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	98 e0       	ldi	r25, 0x08	; 8
    19c8:	c2 df       	rcall	.-124    	; 0x194e <eepromCopy>
	lcd_waitSymbolOff();
    19ca:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <lcd_waitSymbolOff>
    19ce:	08 95       	ret

000019d0 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	0a c0       	rjmp	.+20     	; 0x19e8 <init_Timers+0x18>
    19d4:	e8 2f       	mov	r30, r24
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	ee 0f       	add	r30, r30
    19da:	ff 1f       	adc	r31, r31
    19dc:	e1 5d       	subi	r30, 0xD1	; 209
    19de:	fd 4f       	sbci	r31, 0xFD	; 253
    19e0:	9f ef       	ldi	r25, 0xFF	; 255
    19e2:	90 83       	st	Z, r25
    19e4:	11 82       	std	Z+1, r1	; 0x01
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	89 30       	cpi	r24, 0x09	; 9
    19ea:	a0 f3       	brcs	.-24     	; 0x19d4 <init_Timers+0x4>
    19ec:	e1 e4       	ldi	r30, 0x41	; 65
    19ee:	f2 e0       	ldi	r31, 0x02	; 2
    19f0:	10 82       	st	Z, r1
    19f2:	11 82       	std	Z+1, r1	; 0x01
    19f4:	12 82       	std	Z+2, r1	; 0x02
    19f6:	13 82       	std	Z+3, r1	; 0x03
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    19fe:	08 95       	ret

00001a00 <init_HwTimer>:
    1a00:	82 e0       	ldi	r24, 0x02	; 2
    1a02:	84 bd       	out	0x24, r24	; 36
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	95 bd       	out	0x25, r25	; 37
    1a08:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1a0c:	89 ef       	ldi	r24, 0xF9	; 249
    1a0e:	87 bd       	out	0x27, r24	; 39
    1a10:	85 b1       	in	r24, 0x05	; 5
    1a12:	8f 77       	andi	r24, 0x7F	; 127
    1a14:	85 b9       	out	0x05, r24	; 5
    1a16:	84 b1       	in	r24, 0x04	; 4
    1a18:	80 68       	ori	r24, 0x80	; 128
    1a1a:	84 b9       	out	0x04, r24	; 4
    1a1c:	08 95       	ret

00001a1e <init_ADC>:
    1a1e:	87 e8       	ldi	r24, 0x87	; 135
    1a20:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1a24:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1a28:	8f e7       	ldi	r24, 0x7F	; 127
    1a2a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1a34:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1a38:	e9 e4       	ldi	r30, 0x49	; 73
    1a3a:	f3 e0       	ldi	r31, 0x03	; 3
    1a3c:	10 82       	st	Z, r1
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	81 83       	std	Z+1, r24	; 0x01
    1a42:	82 83       	std	Z+2, r24	; 0x02
    1a44:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	10 c0       	rjmp	.+32     	; 0x1a6c <init_ADC+0x4e>
    1a4c:	85 30       	cpi	r24, 0x05	; 5
    1a4e:	39 f4       	brne	.+14     	; 0x1a5e <init_ADC+0x40>
    1a50:	e8 2f       	mov	r30, r24
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	ef 5a       	subi	r30, 0xAF	; 175
    1a56:	fc 4f       	sbci	r31, 0xFC	; 252
    1a58:	96 e0       	ldi	r25, 0x06	; 6
    1a5a:	90 83       	st	Z, r25
    1a5c:	06 c0       	rjmp	.+12     	; 0x1a6a <init_ADC+0x4c>
    1a5e:	e8 2f       	mov	r30, r24
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	ef 5a       	subi	r30, 0xAF	; 175
    1a64:	fc 4f       	sbci	r31, 0xFC	; 252
    1a66:	9a e0       	ldi	r25, 0x0A	; 10
    1a68:	90 83       	st	Z, r25
    1a6a:	8f 5f       	subi	r24, 0xFF	; 255
    1a6c:	86 30       	cpi	r24, 0x06	; 6
    1a6e:	70 f3       	brcs	.-36     	; 0x1a4c <init_ADC+0x2e>
    1a70:	08 95       	ret

00001a72 <init_Pipe>:
    1a72:	8f ef       	ldi	r24, 0xFF	; 255
    1a74:	88 b9       	out	0x08, r24	; 8
    1a76:	87 b9       	out	0x07, r24	; 7
    1a78:	82 b9       	out	0x02, r24	; 2
    1a7a:	11 b8       	out	0x01, r1	; 1
    1a7c:	84 b3       	in	r24, 0x14	; 20
    1a7e:	87 60       	ori	r24, 0x07	; 7
    1a80:	84 bb       	out	0x14, r24	; 20
    1a82:	83 b3       	in	r24, 0x13	; 19
    1a84:	87 60       	ori	r24, 0x07	; 7
    1a86:	83 bb       	out	0x13, r24	; 19
    1a88:	8b b1       	in	r24, 0x0b	; 11
    1a8a:	8f 77       	andi	r24, 0x7F	; 127
    1a8c:	8b b9       	out	0x0b, r24	; 11
    1a8e:	8a b1       	in	r24, 0x0a	; 10
    1a90:	80 68       	ori	r24, 0x80	; 128
    1a92:	8a b9       	out	0x0a, r24	; 10
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	0e c0       	rjmp	.+28     	; 0x1ab4 <init_Pipe+0x42>
    1a98:	e8 2f       	mov	r30, r24
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ee 0f       	add	r30, r30
    1aa2:	ff 1f       	adc	r31, r31
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	e7 5b       	subi	r30, 0xB7	; 183
    1aaa:	fd 4f       	sbci	r31, 0xFD	; 253
    1aac:	9f ef       	ldi	r25, 0xFF	; 255
    1aae:	91 83       	std	Z+1, r25	; 0x01
    1ab0:	90 83       	st	Z, r25
    1ab2:	8f 5f       	subi	r24, 0xFF	; 255
    1ab4:	80 32       	cpi	r24, 0x20	; 32
    1ab6:	80 f3       	brcs	.-32     	; 0x1a98 <init_Pipe+0x26>
    1ab8:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1abc:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1ac0:	08 95       	ret

00001ac2 <init_PipeModules>:
    1ac2:	ea dc       	rcall	.-1580   	; 0x1498 <eeprom_ReadModules>
    1ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac6:	51 f4       	brne	.+20     	; 0x1adc <init_PipeModules+0x1a>
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	07 d7       	rcall	.+3598   	; 0x28e0 <log_putError>
    1ad2:	8f ef       	ldi	r24, 0xFF	; 255
    1ad4:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <pipe_ModuleAssnRead>
    1ad8:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <pipe_ModuleAssnWrite>
    1adc:	8b b1       	in	r24, 0x0b	; 11
    1ade:	8f 77       	andi	r24, 0x7F	; 127
    1ae0:	8b b9       	out	0x0b, r24	; 11
    1ae2:	84 b3       	in	r24, 0x14	; 20
    1ae4:	87 60       	ori	r24, 0x07	; 7
    1ae6:	84 bb       	out	0x14, r24	; 20
    1ae8:	84 b3       	in	r24, 0x14	; 20
    1aea:	8b 7f       	andi	r24, 0xFB	; 251
    1aec:	84 bb       	out	0x14, r24	; 20
    1aee:	85 e0       	ldi	r24, 0x05	; 5
    1af0:	8a 95       	dec	r24
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <init_PipeModules+0x2e>
    1af4:	00 00       	nop
    1af6:	84 b3       	in	r24, 0x14	; 20
    1af8:	84 60       	ori	r24, 0x04	; 4
    1afa:	84 bb       	out	0x14, r24	; 20
    1afc:	90 e2       	ldi	r25, 0x20	; 32
    1afe:	84 b3       	in	r24, 0x14	; 20
    1b00:	81 60       	ori	r24, 0x01	; 1
    1b02:	84 bb       	out	0x14, r24	; 20
    1b04:	90 fd       	sbrc	r25, 0
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <init_PipeModules+0x4a>
    1b08:	85 e5       	ldi	r24, 0x55	; 85
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <init_PipeModules+0x4c>
    1b0c:	8a ea       	ldi	r24, 0xAA	; 170
    1b0e:	88 b9       	out	0x08, r24	; 8
    1b10:	80 b1       	in	r24, 0x00	; 0
    1b12:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1b16:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1b1a:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1b1e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1b22:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1b26:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1b2a:	84 b3       	in	r24, 0x14	; 20
    1b2c:	8e 7f       	andi	r24, 0xFE	; 254
    1b2e:	84 bb       	out	0x14, r24	; 20
    1b30:	85 e0       	ldi	r24, 0x05	; 5
    1b32:	8a 95       	dec	r24
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <init_PipeModules+0x70>
    1b36:	00 00       	nop
    1b38:	91 50       	subi	r25, 0x01	; 1
    1b3a:	09 f7       	brne	.-62     	; 0x1afe <init_PipeModules+0x3c>
    1b3c:	90 e2       	ldi	r25, 0x20	; 32
    1b3e:	0f c0       	rjmp	.+30     	; 0x1b5e <init_PipeModules+0x9c>
    1b40:	84 b3       	in	r24, 0x14	; 20
    1b42:	81 60       	ori	r24, 0x01	; 1
    1b44:	84 bb       	out	0x14, r24	; 20
    1b46:	82 e0       	ldi	r24, 0x02	; 2
    1b48:	8a 95       	dec	r24
    1b4a:	f1 f7       	brne	.-4      	; 0x1b48 <init_PipeModules+0x86>
    1b4c:	00 c0       	rjmp	.+0      	; 0x1b4e <init_PipeModules+0x8c>
    1b4e:	84 b3       	in	r24, 0x14	; 20
    1b50:	8e 7f       	andi	r24, 0xFE	; 254
    1b52:	84 bb       	out	0x14, r24	; 20
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	8a 95       	dec	r24
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <init_PipeModules+0x94>
    1b5a:	00 c0       	rjmp	.+0      	; 0x1b5c <init_PipeModules+0x9a>
    1b5c:	91 50       	subi	r25, 0x01	; 1
    1b5e:	91 11       	cpse	r25, r1
    1b60:	ef cf       	rjmp	.-34     	; 0x1b40 <init_PipeModules+0x7e>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1b68:	90 e2       	ldi	r25, 0x20	; 32
    1b6a:	84 b3       	in	r24, 0x14	; 20
    1b6c:	81 60       	ori	r24, 0x01	; 1
    1b6e:	84 bb       	out	0x14, r24	; 20
    1b70:	8f ef       	ldi	r24, 0xFF	; 255
    1b72:	88 b9       	out	0x08, r24	; 8
    1b74:	20 b1       	in	r18, 0x00	; 0
    1b76:	90 fd       	sbrc	r25, 0
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <init_PipeModules+0xbc>
    1b7a:	8a ea       	ldi	r24, 0xAA	; 170
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <init_PipeModules+0xbe>
    1b7e:	85 e5       	ldi	r24, 0x55	; 85
    1b80:	82 27       	eor	r24, r18
    1b82:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1b86:	82 23       	and	r24, r18
    1b88:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1b8c:	84 b3       	in	r24, 0x14	; 20
    1b8e:	8e 7f       	andi	r24, 0xFE	; 254
    1b90:	84 bb       	out	0x14, r24	; 20
    1b92:	85 e0       	ldi	r24, 0x05	; 5
    1b94:	8a 95       	dec	r24
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <init_PipeModules+0xd2>
    1b98:	00 00       	nop
    1b9a:	91 50       	subi	r25, 0x01	; 1
    1b9c:	31 f7       	brne	.-52     	; 0x1b6a <init_PipeModules+0xa8>
    1b9e:	00 00       	nop
    1ba0:	00 00       	nop
    1ba2:	84 b3       	in	r24, 0x14	; 20
    1ba4:	81 60       	ori	r24, 0x01	; 1
    1ba6:	84 bb       	out	0x14, r24	; 20
    1ba8:	84 b3       	in	r24, 0x14	; 20
    1baa:	87 60       	ori	r24, 0x07	; 7
    1bac:	84 bb       	out	0x14, r24	; 20
    1bae:	84 b3       	in	r24, 0x14	; 20
    1bb0:	8b 7f       	andi	r24, 0xFB	; 251
    1bb2:	84 bb       	out	0x14, r24	; 20
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	8a 95       	dec	r24
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <init_PipeModules+0xf4>
    1bba:	00 c0       	rjmp	.+0      	; 0x1bbc <init_PipeModules+0xfa>
    1bbc:	84 b3       	in	r24, 0x14	; 20
    1bbe:	84 60       	ori	r24, 0x04	; 4
    1bc0:	84 bb       	out	0x14, r24	; 20
    1bc2:	90 e2       	ldi	r25, 0x20	; 32
    1bc4:	e1 e4       	ldi	r30, 0x41	; 65
    1bc6:	f3 e0       	ldi	r31, 0x03	; 3
    1bc8:	83 81       	ldd	r24, Z+3	; 0x03
    1bca:	82 83       	std	Z+2, r24	; 0x02
    1bcc:	84 81       	ldd	r24, Z+4	; 0x04
    1bce:	83 83       	std	Z+3, r24	; 0x03
    1bd0:	84 b3       	in	r24, 0x14	; 20
    1bd2:	81 60       	ori	r24, 0x01	; 1
    1bd4:	84 bb       	out	0x14, r24	; 20
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	81 83       	std	Z+1, r24	; 0x01
    1bda:	88 b9       	out	0x08, r24	; 8
    1bdc:	85 81       	ldd	r24, Z+5	; 0x05
    1bde:	84 83       	std	Z+4, r24	; 0x04
    1be0:	86 81       	ldd	r24, Z+6	; 0x06
    1be2:	85 83       	std	Z+5, r24	; 0x05
    1be4:	80 b1       	in	r24, 0x00	; 0
    1be6:	86 83       	std	Z+6, r24	; 0x06
    1be8:	82 83       	std	Z+2, r24	; 0x02
    1bea:	83 83       	std	Z+3, r24	; 0x03
    1bec:	84 83       	std	Z+4, r24	; 0x04
    1bee:	85 83       	std	Z+5, r24	; 0x05
    1bf0:	87 83       	std	Z+7, r24	; 0x07
    1bf2:	84 b3       	in	r24, 0x14	; 20
    1bf4:	8e 7f       	andi	r24, 0xFE	; 254
    1bf6:	84 bb       	out	0x14, r24	; 20
    1bf8:	38 97       	sbiw	r30, 0x08	; 8
    1bfa:	91 50       	subi	r25, 0x01	; 1
    1bfc:	29 f7       	brne	.-54     	; 0x1bc8 <init_PipeModules+0x106>
    1bfe:	00 00       	nop
    1c00:	00 00       	nop
    1c02:	84 b3       	in	r24, 0x14	; 20
    1c04:	81 60       	ori	r24, 0x01	; 1
    1c06:	84 bb       	out	0x14, r24	; 20
    1c08:	84 b3       	in	r24, 0x14	; 20
    1c0a:	8d 7f       	andi	r24, 0xFD	; 253
    1c0c:	84 bb       	out	0x14, r24	; 20
    1c0e:	18 b8       	out	0x08, r1	; 8
    1c10:	85 e0       	ldi	r24, 0x05	; 5
    1c12:	8a 95       	dec	r24
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <init_PipeModules+0x150>
    1c16:	00 00       	nop
    1c18:	84 b3       	in	r24, 0x14	; 20
    1c1a:	82 60       	ori	r24, 0x02	; 2
    1c1c:	84 bb       	out	0x14, r24	; 20
    1c1e:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
    1c22:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    1c26:	84 2b       	or	r24, r20
    1c28:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
    1c2c:	89 17       	cp	r24, r25
    1c2e:	39 f0       	breq	.+14     	; 0x1c3e <init_PipeModules+0x17c>
    1c30:	50 e0       	ldi	r21, 0x00	; 0
    1c32:	54 2f       	mov	r21, r20
    1c34:	44 27       	eor	r20, r20
    1c36:	49 2b       	or	r20, r25
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	51 c6       	rjmp	.+3234   	; 0x28e0 <log_putError>
    1c3e:	08 95       	ret

00001c40 <test_PipeModule>:
    1c40:	88 30       	cpi	r24, 0x08	; 8
    1c42:	08 f0       	brcs	.+2      	; 0x1c46 <test_PipeModule+0x6>
    1c44:	6a c0       	rjmp	.+212    	; 0x1d1a <test_PipeModule+0xda>
    1c46:	31 e0       	ldi	r19, 0x01	; 1
    1c48:	01 c0       	rjmp	.+2      	; 0x1c4c <test_PipeModule+0xc>
    1c4a:	33 0f       	add	r19, r19
    1c4c:	8a 95       	dec	r24
    1c4e:	ea f7       	brpl	.-6      	; 0x1c4a <test_PipeModule+0xa>
    1c50:	80 e8       	ldi	r24, 0x80	; 128
    1c52:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1c56:	8b b1       	in	r24, 0x0b	; 11
    1c58:	8f 77       	andi	r24, 0x7F	; 127
    1c5a:	8b b9       	out	0x0b, r24	; 11
    1c5c:	84 b3       	in	r24, 0x14	; 20
    1c5e:	87 60       	ori	r24, 0x07	; 7
    1c60:	84 bb       	out	0x14, r24	; 20
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	1d c0       	rjmp	.+58     	; 0x1ca0 <test_PipeModule+0x60>
    1c66:	20 fd       	sbrc	r18, 0
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <test_PipeModule+0x30>
    1c6a:	83 2f       	mov	r24, r19
    1c6c:	80 95       	com	r24
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <test_PipeModule+0x32>
    1c70:	8f ef       	ldi	r24, 0xFF	; 255
    1c72:	88 b9       	out	0x08, r24	; 8
    1c74:	26 95       	lsr	r18
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	8a 95       	dec	r24
    1c7a:	f1 f7       	brne	.-4      	; 0x1c78 <test_PipeModule+0x38>
    1c7c:	00 c0       	rjmp	.+0      	; 0x1c7e <test_PipeModule+0x3e>
    1c7e:	84 b3       	in	r24, 0x14	; 20
    1c80:	8e 7f       	andi	r24, 0xFE	; 254
    1c82:	84 bb       	out	0x14, r24	; 20
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	8a 95       	dec	r24
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <test_PipeModule+0x46>
    1c8a:	00 c0       	rjmp	.+0      	; 0x1c8c <test_PipeModule+0x4c>
    1c8c:	84 b3       	in	r24, 0x14	; 20
    1c8e:	81 60       	ori	r24, 0x01	; 1
    1c90:	84 bb       	out	0x14, r24	; 20
    1c92:	9f 5f       	subi	r25, 0xFF	; 255
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <test_PipeModule+0x5a>
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	25 ea       	ldi	r18, 0xA5	; 165
    1c9a:	98 30       	cpi	r25, 0x08	; 8
    1c9c:	20 f3       	brcs	.-56     	; 0x1c66 <test_PipeModule+0x26>
    1c9e:	4f 5f       	subi	r20, 0xFF	; 255
    1ca0:	44 30       	cpi	r20, 0x04	; 4
    1ca2:	c8 f3       	brcs	.-14     	; 0x1c96 <test_PipeModule+0x56>
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <test_PipeModule+0x86>
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	8a 95       	dec	r24
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <test_PipeModule+0x6a>
    1cae:	00 c0       	rjmp	.+0      	; 0x1cb0 <test_PipeModule+0x70>
    1cb0:	84 b3       	in	r24, 0x14	; 20
    1cb2:	8e 7f       	andi	r24, 0xFE	; 254
    1cb4:	84 bb       	out	0x14, r24	; 20
    1cb6:	82 e0       	ldi	r24, 0x02	; 2
    1cb8:	8a 95       	dec	r24
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <test_PipeModule+0x78>
    1cbc:	00 c0       	rjmp	.+0      	; 0x1cbe <test_PipeModule+0x7e>
    1cbe:	84 b3       	in	r24, 0x14	; 20
    1cc0:	81 60       	ori	r24, 0x01	; 1
    1cc2:	84 bb       	out	0x14, r24	; 20
    1cc4:	9f 5f       	subi	r25, 0xFF	; 255
    1cc6:	90 32       	cpi	r25, 0x20	; 32
    1cc8:	78 f3       	brcs	.-34     	; 0x1ca8 <test_PipeModule+0x68>
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	40 e0       	ldi	r20, 0x00	; 0
    1cce:	50 e0       	ldi	r21, 0x00	; 0
    1cd0:	ba 01       	movw	r22, r20
    1cd2:	17 c0       	rjmp	.+46     	; 0x1d02 <test_PipeModule+0xc2>
    1cd4:	44 0f       	add	r20, r20
    1cd6:	55 1f       	adc	r21, r21
    1cd8:	66 1f       	adc	r22, r22
    1cda:	77 1f       	adc	r23, r23
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	8a 95       	dec	r24
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <test_PipeModule+0x9e>
    1ce2:	00 c0       	rjmp	.+0      	; 0x1ce4 <test_PipeModule+0xa4>
    1ce4:	84 b3       	in	r24, 0x14	; 20
    1ce6:	8e 7f       	andi	r24, 0xFE	; 254
    1ce8:	84 bb       	out	0x14, r24	; 20
    1cea:	80 b1       	in	r24, 0x00	; 0
    1cec:	83 23       	and	r24, r19
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <test_PipeModule+0xb2>
    1cf0:	41 60       	ori	r20, 0x01	; 1
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	8a 95       	dec	r24
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <test_PipeModule+0xb4>
    1cf8:	00 c0       	rjmp	.+0      	; 0x1cfa <test_PipeModule+0xba>
    1cfa:	84 b3       	in	r24, 0x14	; 20
    1cfc:	81 60       	ori	r24, 0x01	; 1
    1cfe:	84 bb       	out	0x14, r24	; 20
    1d00:	9f 5f       	subi	r25, 0xFF	; 255
    1d02:	90 32       	cpi	r25, 0x20	; 32
    1d04:	38 f3       	brcs	.-50     	; 0x1cd4 <test_PipeModule+0x94>
    1d06:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1d0a:	8b b1       	in	r24, 0x0b	; 11
    1d0c:	80 68       	ori	r24, 0x80	; 128
    1d0e:	8b b9       	out	0x0b, r24	; 11
    1d10:	34 2f       	mov	r19, r20
    1d12:	25 2f       	mov	r18, r21
    1d14:	86 2f       	mov	r24, r22
    1d16:	97 2f       	mov	r25, r23
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <test_PipeModule+0xe2>
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	63 2f       	mov	r22, r19
    1d24:	72 2f       	mov	r23, r18
    1d26:	08 95       	ret

00001d28 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d28:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1d2a:	e9 e4       	ldi	r30, 0x49	; 73
    1d2c:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d30:	06 c0       	rjmp	.+12     	; 0x1d3e <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1d32:	2f ef       	ldi	r18, 0xFF	; 255
    1d34:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1d36:	26 81       	ldd	r18, Z+6	; 0x06
    1d38:	82 2b       	or	r24, r18
		pPipe++;
    1d3a:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d3c:	9f 5f       	subi	r25, 0xFF	; 255
    1d3e:	90 32       	cpi	r25, 0x20	; 32
    1d40:	c0 f3       	brcs	.-16     	; 0x1d32 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	return result & pipe_ModuleAssnRead; // modules unassgined to read will be ignored (return bit=0)
    1d42:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
}
    1d46:	89 23       	and	r24, r25
    1d48:	08 95       	ret

00001d4a <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1d4a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d4e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d52:	81 ff       	sbrs	r24, 1
    1d54:	fc cf       	rjmp	.-8      	; 0x1d4e <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1d56:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d5a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d5e:	81 ff       	sbrs	r24, 1
    1d60:	fc cf       	rjmp	.-8      	; 0x1d5a <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1d62:	08 95       	ret

00001d64 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1d6a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d6c:	f8 94       	cli
    1d6e:	06 c0       	rjmp	.+12     	; 0x1d7c <module_StartPowerOn+0x18>
    1d70:	ef e2       	ldi	r30, 0x2F	; 47
    1d72:	f2 e0       	ldi	r31, 0x02	; 2
    1d74:	88 e2       	ldi	r24, 0x28	; 40
    1d76:	82 83       	std	Z+2, r24	; 0x02
    1d78:	13 82       	std	Z+3, r1	; 0x03
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	81 11       	cpse	r24, r1
    1d7e:	f8 cf       	rjmp	.-16     	; 0x1d70 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d80:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1d82:	08 95       	ret

00001d84 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1d84:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	31 f5       	brne	.+76     	; 0x1dd8 <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1d8c:	cd df       	rcall	.-102    	; 0x1d28 <module_TestAllInputs>
    1d8e:	81 11       	cpse	r24, r1
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1d92:	85 b1       	in	r24, 0x05	; 5
    1d94:	80 64       	ori	r24, 0x40	; 64
    1d96:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1d98:	82 e1       	ldi	r24, 0x12	; 18
    1d9a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1d9e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1da0:	f8 94       	cli
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <module_PowerControl+0x2e>
    1da6:	ef e2       	ldi	r30, 0x2F	; 47
    1da8:	f2 e0       	ldi	r31, 0x02	; 2
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	82 83       	std	Z+2, r24	; 0x02
    1dae:	13 82       	std	Z+3, r1	; 0x03
    1db0:	80 e0       	ldi	r24, 0x00	; 0
    1db2:	81 11       	cpse	r24, r1
    1db4:	f8 cf       	rjmp	.-16     	; 0x1da6 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1db6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1db8:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1dba:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1dbc:	f8 94       	cli
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	07 c0       	rjmp	.+14     	; 0x1dd0 <module_PowerControl+0x4c>
    1dc2:	ef e2       	ldi	r30, 0x2F	; 47
    1dc4:	f2 e0       	ldi	r31, 0x02	; 2
    1dc6:	8c e0       	ldi	r24, 0x0C	; 12
    1dc8:	82 83       	std	Z+2, r24	; 0x02
    1dca:	82 e0       	ldi	r24, 0x02	; 2
    1dcc:	83 83       	std	Z+3, r24	; 0x03
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	81 11       	cpse	r24, r1
    1dd2:	f7 cf       	rjmp	.-18     	; 0x1dc2 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1dd4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1dd6:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1dd8:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1dda:	b1 f4       	brne	.+44     	; 0x1e08 <module_PowerControl+0x84>
    1ddc:	a5 df       	rcall	.-182    	; 0x1d28 <module_TestAllInputs>
		if (testResult == 0){
    1dde:	81 11       	cpse	r24, r1
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1de2:	84 e1       	ldi	r24, 0x14	; 20
    1de4:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1de8:	0b c0       	rjmp	.+22     	; 0x1e00 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1dea:	48 2f       	mov	r20, r24
    1dec:	50 e0       	ldi	r21, 0x00	; 0
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	85 e0       	ldi	r24, 0x05	; 5
    1df2:	76 d5       	rcall	.+2796   	; 0x28e0 <log_putError>
			POWER_OFF
    1df4:	85 b1       	in	r24, 0x05	; 5
    1df6:	8f 7b       	andi	r24, 0xBF	; 191
    1df8:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1dfa:	80 e8       	ldi	r24, 0x80	; 128
    1dfc:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e06:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e0e:	08 95       	ret

00001e10 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	0d c0       	rjmp	.+26     	; 0x1e2e <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1e14:	94 30       	cpi	r25, 0x04	; 4
    1e16:	50 f4       	brcc	.+20     	; 0x1e2c <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1e18:	e9 2f       	mov	r30, r25
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	81 11       	cpse	r24, r1
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <softKey_WantLong+0x14>
    1e20:	2a e0       	ldi	r18, 0x0A	; 10
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <softKey_WantLong+0x16>
    1e24:	26 e0       	ldi	r18, 0x06	; 6
    1e26:	ef 5a       	subi	r30, 0xAF	; 175
    1e28:	fc 4f       	sbci	r31, 0xFC	; 252
    1e2a:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e2c:	9f 5f       	subi	r25, 0xFF	; 255
    1e2e:	96 30       	cpi	r25, 0x06	; 6
    1e30:	88 f3       	brcs	.-30     	; 0x1e14 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1e32:	08 95       	ret

00001e34 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1e34:	1f 92       	push	r1
    1e36:	0f 92       	push	r0
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	0f 92       	push	r0
    1e3c:	11 24       	eor	r1, r1
    1e3e:	0b b6       	in	r0, 0x3b	; 59
    1e40:	0f 92       	push	r0
    1e42:	ef 92       	push	r14
    1e44:	ff 92       	push	r15
    1e46:	0f 93       	push	r16
    1e48:	1f 93       	push	r17
    1e4a:	2f 93       	push	r18
    1e4c:	3f 93       	push	r19
    1e4e:	4f 93       	push	r20
    1e50:	5f 93       	push	r21
    1e52:	6f 93       	push	r22
    1e54:	7f 93       	push	r23
    1e56:	8f 93       	push	r24
    1e58:	9f 93       	push	r25
    1e5a:	af 93       	push	r26
    1e5c:	bf 93       	push	r27
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	ef 93       	push	r30
    1e64:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1e66:	85 b1       	in	r24, 0x05	; 5
    1e68:	80 68       	ori	r24, 0x80	; 128
    1e6a:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1e6c:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1e70:	8f 5f       	subi	r24, 0xFF	; 255
    1e72:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1e76:	83 70       	andi	r24, 0x03	; 3
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <__vector_21+0x4a>
    1e7c:	58 c1       	rjmp	.+688    	; 0x212e <__vector_21+0x2fa>
    1e7e:	38 f0       	brcs	.+14     	; 0x1e8e <__vector_21+0x5a>
    1e80:	82 30       	cpi	r24, 0x02	; 2
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__vector_21+0x52>
    1e84:	a5 c1       	rjmp	.+842    	; 0x21d0 <__vector_21+0x39c>
    1e86:	83 30       	cpi	r24, 0x03	; 3
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <__vector_21+0x58>
    1e8a:	c9 c1       	rjmp	.+914    	; 0x221e <__stack+0x1f>
    1e8c:	01 c2       	rjmp	.+1026   	; 0x2290 <__stack+0x91>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1e8e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1e92:	81 11       	cpse	r24, r1
    1e94:	1a c1       	rjmp	.+564    	; 0x20ca <__vector_21+0x296>
    1e96:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1e9a:	96 fd       	sbrc	r25, 6
    1e9c:	16 c1       	rjmp	.+556    	; 0x20ca <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	ee 0f       	add	r30, r30
    1ea6:	ff 1f       	adc	r31, r31
    1ea8:	e2 0f       	add	r30, r18
    1eaa:	f3 1f       	adc	r31, r19
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	e7 5b       	subi	r30, 0xB7	; 183
    1eb2:	fc 4f       	sbci	r31, 0xFC	; 252
    1eb4:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1eb6:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1eba:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1ebc:	49 17       	cp	r20, r25
    1ebe:	10 f4       	brcc	.+4      	; 0x1ec4 <__vector_21+0x90>
		return data1-data2;
    1ec0:	94 1b       	sub	r25, r20
    1ec2:	03 c0       	rjmp	.+6      	; 0x1eca <__vector_21+0x96>
	} else {
		return data2-data1;
    1ec4:	54 2f       	mov	r21, r20
    1ec6:	59 1b       	sub	r21, r25
    1ec8:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1eca:	94 30       	cpi	r25, 0x04	; 4
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <__vector_21+0x9c>
    1ece:	fd c0       	rjmp	.+506    	; 0x20ca <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	0e c0       	rjmp	.+28     	; 0x1ef0 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1ed4:	42 32       	cpi	r20, 0x22	; 34
    1ed6:	70 f0       	brcs	.+28     	; 0x1ef4 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1ed8:	4f 33       	cpi	r20, 0x3F	; 63
    1eda:	70 f0       	brcs	.+28     	; 0x1ef8 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1edc:	48 36       	cpi	r20, 0x68	; 104
    1ede:	70 f0       	brcs	.+28     	; 0x1efc <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1ee0:	46 39       	cpi	r20, 0x96	; 150
    1ee2:	70 f0       	brcs	.+28     	; 0x1f00 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1ee4:	4f 3b       	cpi	r20, 0xBF	; 191
    1ee6:	70 f0       	brcs	.+28     	; 0x1f04 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1ee8:	48 3e       	cpi	r20, 0xE8	; 232
    1eea:	70 f4       	brcc	.+28     	; 0x1f08 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1eec:	c6 e0       	ldi	r28, 0x06	; 6
    1eee:	0d c0       	rjmp	.+26     	; 0x1f0a <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1ef0:	cf ef       	ldi	r28, 0xFF	; 255
    1ef2:	0b c0       	rjmp	.+22     	; 0x1f0a <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1ef4:	c4 e0       	ldi	r28, 0x04	; 4
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1ef8:	c3 e0       	ldi	r28, 0x03	; 3
    1efa:	07 c0       	rjmp	.+14     	; 0x1f0a <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1efc:	c5 e0       	ldi	r28, 0x05	; 5
    1efe:	05 c0       	rjmp	.+10     	; 0x1f0a <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1f00:	c1 e0       	ldi	r28, 0x01	; 1
    1f02:	03 c0       	rjmp	.+6      	; 0x1f0a <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1f04:	c2 e0       	ldi	r28, 0x02	; 2
    1f06:	01 c0       	rjmp	.+2      	; 0x1f0a <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1f08:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	ee 0f       	add	r30, r30
    1f0e:	ff 1f       	adc	r31, r31
    1f10:	e2 0f       	add	r30, r18
    1f12:	f3 1f       	adc	r31, r19
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	e7 5b       	subi	r30, 0xB7	; 183
    1f1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f1c:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1f1e:	dc 17       	cp	r29, r28
    1f20:	09 f4       	brne	.+2      	; 0x1f24 <__vector_21+0xf0>
    1f22:	48 c0       	rjmp	.+144    	; 0x1fb4 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1f24:	df 3f       	cpi	r29, 0xFF	; 255
    1f26:	19 f0       	breq	.+6      	; 0x1f2e <__vector_21+0xfa>
    1f28:	cf 3f       	cpi	r28, 0xFF	; 255
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1f2c:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1f2e:	f9 01       	movw	r30, r18
    1f30:	ee 0f       	add	r30, r30
    1f32:	ff 1f       	adc	r31, r31
    1f34:	e2 0f       	add	r30, r18
    1f36:	f3 1f       	adc	r31, r19
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	e7 5b       	subi	r30, 0xB7	; 183
    1f3e:	fc 4f       	sbci	r31, 0xFC	; 252
    1f40:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1f42:	df 3f       	cpi	r29, 0xFF	; 255
    1f44:	f9 f4       	brne	.+62     	; 0x1f84 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    1f46:	c9 01       	movw	r24, r18
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	fc 01       	movw	r30, r24
    1f4e:	e2 0f       	add	r30, r18
    1f50:	f3 1f       	adc	r31, r19
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	e7 5b       	subi	r30, 0xB7	; 183
    1f58:	fc 4f       	sbci	r31, 0xFC	; 252
    1f5a:	15 82       	std	Z+5, r1	; 0x05
    1f5c:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1f5e:	fc 01       	movw	r30, r24
    1f60:	e2 0f       	add	r30, r18
    1f62:	f3 1f       	adc	r31, r19
    1f64:	ee 0f       	add	r30, r30
    1f66:	ff 1f       	adc	r31, r31
    1f68:	e7 5b       	subi	r30, 0xB7	; 183
    1f6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f6c:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1f6e:	ec 2f       	mov	r30, r28
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	e0 5b       	subi	r30, 0xB0	; 176
    1f74:	fc 4f       	sbci	r31, 0xFC	; 252
    1f76:	80 81       	ld	r24, Z
    1f78:	80 ff       	sbrs	r24, 0
    1f7a:	a7 c0       	rjmp	.+334    	; 0x20ca <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    1f7c:	8c 2f       	mov	r24, r28
    1f7e:	0e 94 0c 2a 	call	0x5418	; 0x5418 <message_push>
    1f82:	a3 c0       	rjmp	.+326    	; 0x20ca <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    1f84:	ed 2f       	mov	r30, r29
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	e0 5b       	subi	r30, 0xB0	; 176
    1f8a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f8c:	80 81       	ld	r24, Z
    1f8e:	81 ff       	sbrs	r24, 1
    1f90:	9c c0       	rjmp	.+312    	; 0x20ca <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    1f92:	f9 01       	movw	r30, r18
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	e2 0f       	add	r30, r18
    1f9a:	f3 1f       	adc	r31, r19
    1f9c:	ee 0f       	add	r30, r30
    1f9e:	ff 1f       	adc	r31, r31
    1fa0:	e7 5b       	subi	r30, 0xB7	; 183
    1fa2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa4:	83 81       	ldd	r24, Z+3	; 0x03
    1fa6:	83 70       	andi	r24, 0x03	; 3
    1fa8:	09 f0       	breq	.+2      	; 0x1fac <__vector_21+0x178>
    1faa:	8f c0       	rjmp	.+286    	; 0x20ca <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    1fac:	8d 2f       	mov	r24, r29
    1fae:	0e 94 0c 2a 	call	0x5418	; 0x5418 <message_push>
    1fb2:	8b c0       	rjmp	.+278    	; 0x20ca <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    1fb4:	cf 3f       	cpi	r28, 0xFF	; 255
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <__vector_21+0x186>
    1fb8:	88 c0       	rjmp	.+272    	; 0x20ca <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    1fba:	f9 01       	movw	r30, r18
    1fbc:	ee 0f       	add	r30, r30
    1fbe:	ff 1f       	adc	r31, r31
    1fc0:	df 01       	movw	r26, r30
    1fc2:	a2 0f       	add	r26, r18
    1fc4:	b3 1f       	adc	r27, r19
    1fc6:	aa 0f       	add	r26, r26
    1fc8:	bb 1f       	adc	r27, r27
    1fca:	a7 5b       	subi	r26, 0xB7	; 183
    1fcc:	bc 4f       	sbci	r27, 0xFC	; 252
    1fce:	14 96       	adiw	r26, 0x04	; 4
    1fd0:	8d 91       	ld	r24, X+
    1fd2:	9c 91       	ld	r25, X
    1fd4:	15 97       	sbiw	r26, 0x05	; 5
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	15 96       	adiw	r26, 0x05	; 5
    1fda:	9c 93       	st	X, r25
    1fdc:	8e 93       	st	-X, r24
    1fde:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    1fe0:	fd 01       	movw	r30, r26
    1fe2:	84 81       	ldd	r24, Z+4	; 0x04
    1fe4:	95 81       	ldd	r25, Z+5	; 0x05
    1fe6:	8b 34       	cpi	r24, 0x4B	; 75
    1fe8:	91 05       	cpc	r25, r1
    1fea:	a9 f4       	brne	.+42     	; 0x2016 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    1fec:	ed 2f       	mov	r30, r29
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	e0 5b       	subi	r30, 0xB0	; 176
    1ff2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ff4:	80 81       	ld	r24, Z
    1ff6:	82 ff       	sbrs	r24, 2
    1ff8:	0e c0       	rjmp	.+28     	; 0x2016 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    1ffa:	8c 2f       	mov	r24, r28
    1ffc:	80 68       	ori	r24, 0x80	; 128
    1ffe:	0e 94 0c 2a 	call	0x5418	; 0x5418 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    2002:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    2006:	86 e0       	ldi	r24, 0x06	; 6
    2008:	e8 9f       	mul	r30, r24
    200a:	f0 01       	movw	r30, r0
    200c:	11 24       	eor	r1, r1
    200e:	e7 5b       	subi	r30, 0xB7	; 183
    2010:	fc 4f       	sbci	r31, 0xFC	; 252
    2012:	82 e0       	ldi	r24, 0x02	; 2
    2014:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    2016:	ed 2f       	mov	r30, r29
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	e0 5b       	subi	r30, 0xB0	; 176
    201c:	fc 4f       	sbci	r31, 0xFC	; 252
    201e:	80 81       	ld	r24, Z
    2020:	83 ff       	sbrs	r24, 3
    2022:	53 c0       	rjmp	.+166    	; 0x20ca <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    2024:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	fc 01       	movw	r30, r24
    202c:	ee 0f       	add	r30, r30
    202e:	ff 1f       	adc	r31, r31
    2030:	e8 0f       	add	r30, r24
    2032:	f9 1f       	adc	r31, r25
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	e7 5b       	subi	r30, 0xB7	; 183
    203a:	fc 4f       	sbci	r31, 0xFC	; 252
    203c:	23 81       	ldd	r18, Z+3	; 0x03
    203e:	21 11       	cpse	r18, r1
    2040:	1e c0       	rjmp	.+60     	; 0x207e <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2042:	fc 01       	movw	r30, r24
    2044:	ee 0f       	add	r30, r30
    2046:	ff 1f       	adc	r31, r31
    2048:	e8 0f       	add	r30, r24
    204a:	f9 1f       	adc	r31, r25
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	e7 5b       	subi	r30, 0xB7	; 183
    2052:	fc 4f       	sbci	r31, 0xFC	; 252
    2054:	24 81       	ldd	r18, Z+4	; 0x04
    2056:	35 81       	ldd	r19, Z+5	; 0x05
    2058:	22 33       	cpi	r18, 0x32	; 50
    205a:	31 05       	cpc	r19, r1
    205c:	b1 f5       	brne	.+108    	; 0x20ca <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    205e:	26 e0       	ldi	r18, 0x06	; 6
    2060:	28 9f       	mul	r18, r24
    2062:	f0 01       	movw	r30, r0
    2064:	29 9f       	mul	r18, r25
    2066:	f0 0d       	add	r31, r0
    2068:	11 24       	eor	r1, r1
    206a:	e7 5b       	subi	r30, 0xB7	; 183
    206c:	fc 4f       	sbci	r31, 0xFC	; 252
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2072:	15 82       	std	Z+5, r1	; 0x05
    2074:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2076:	8c 2f       	mov	r24, r28
    2078:	0e 94 0c 2a 	call	0x5418	; 0x5418 <message_push>
    207c:	26 c0       	rjmp	.+76     	; 0x20ca <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    207e:	fc 01       	movw	r30, r24
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	e8 0f       	add	r30, r24
    2086:	f9 1f       	adc	r31, r25
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	e7 5b       	subi	r30, 0xB7	; 183
    208e:	fc 4f       	sbci	r31, 0xFC	; 252
    2090:	23 81       	ldd	r18, Z+3	; 0x03
    2092:	21 30       	cpi	r18, 0x01	; 1
    2094:	d1 f4       	brne	.+52     	; 0x20ca <__vector_21+0x296>
    2096:	26 e0       	ldi	r18, 0x06	; 6
    2098:	28 9f       	mul	r18, r24
    209a:	f0 01       	movw	r30, r0
    209c:	29 9f       	mul	r18, r25
    209e:	f0 0d       	add	r31, r0
    20a0:	11 24       	eor	r1, r1
    20a2:	e7 5b       	subi	r30, 0xB7	; 183
    20a4:	fc 4f       	sbci	r31, 0xFC	; 252
    20a6:	24 81       	ldd	r18, Z+4	; 0x04
    20a8:	35 81       	ldd	r19, Z+5	; 0x05
    20aa:	2c 30       	cpi	r18, 0x0C	; 12
    20ac:	31 05       	cpc	r19, r1
    20ae:	69 f4       	brne	.+26     	; 0x20ca <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    20b0:	26 e0       	ldi	r18, 0x06	; 6
    20b2:	28 9f       	mul	r18, r24
    20b4:	f0 01       	movw	r30, r0
    20b6:	29 9f       	mul	r18, r25
    20b8:	f0 0d       	add	r31, r0
    20ba:	11 24       	eor	r1, r1
    20bc:	e7 5b       	subi	r30, 0xB7	; 183
    20be:	fc 4f       	sbci	r31, 0xFC	; 252
    20c0:	15 82       	std	Z+5, r1	; 0x05
    20c2:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    20c4:	8c 2f       	mov	r24, r28
    20c6:	0e 94 0c 2a 	call	0x5418	; 0x5418 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    20ca:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20ce:	8f 5f       	subi	r24, 0xFF	; 255
    20d0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    20d4:	84 30       	cpi	r24, 0x04	; 4
    20d6:	10 f0       	brcs	.+4      	; 0x20dc <__vector_21+0x2a8>
		adcNr = 0;
    20d8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    20dc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20e0:	81 11       	cpse	r24, r1
    20e2:	0c c0       	rjmp	.+24     	; 0x20fc <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	fc 01       	movw	r30, r24
    20e8:	ee 0f       	add	r30, r30
    20ea:	ff 1f       	adc	r31, r31
    20ec:	e8 0f       	add	r30, r24
    20ee:	f9 1f       	adc	r31, r25
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	e7 5b       	subi	r30, 0xB7	; 183
    20f6:	fc 4f       	sbci	r31, 0xFC	; 252
    20f8:	80 81       	ld	r24, Z
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    20fc:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    20fe:	98 2f       	mov	r25, r24
    2100:	9f 71       	andi	r25, 0x1F	; 31
    2102:	90 66       	ori	r25, 0x60	; 96
    2104:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2108:	eb e7       	ldi	r30, 0x7B	; 123
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	20 81       	ld	r18, Z
    210e:	80 72       	andi	r24, 0x20	; 32
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	95 95       	asr	r25
    2114:	87 95       	ror	r24
    2116:	95 95       	asr	r25
    2118:	87 95       	ror	r24
    211a:	92 2f       	mov	r25, r18
    211c:	9f 7d       	andi	r25, 0xDF	; 223
    211e:	89 2b       	or	r24, r25
    2120:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    2122:	ea e7       	ldi	r30, 0x7A	; 122
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	80 64       	ori	r24, 0x40	; 64
    212a:	80 83       	st	Z, r24
    212c:	b1 c0       	rjmp	.+354    	; 0x2290 <__stack+0x91>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    212e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2132:	80 38       	cpi	r24, 0x80	; 128
    2134:	09 f4       	brne	.+2      	; 0x2138 <__vector_21+0x304>
    2136:	ac c0       	rjmp	.+344    	; 0x2290 <__stack+0x91>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    2138:	84 b3       	in	r24, 0x14	; 20
    213a:	87 60       	ori	r24, 0x07	; 7
    213c:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    213e:	84 b3       	in	r24, 0x14	; 20
    2140:	8b 7f       	andi	r24, 0xFB	; 251
    2142:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
    2144:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    2148:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    214a:	e2 e0       	ldi	r30, 0x02	; 2
    214c:	ea 95       	dec	r30
    214e:	f1 f7       	brne	.-4      	; 0x214c <__vector_21+0x318>
    2150:	00 c0       	rjmp	.+0      	; 0x2152 <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2152:	84 b3       	in	r24, 0x14	; 20
    2154:	84 60       	ori	r24, 0x04	; 4
    2156:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    2158:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    215a:	e1 e4       	ldi	r30, 0x41	; 65
    215c:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    215e:	83 81       	ldd	r24, Z+3	; 0x03
    2160:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2162:	84 81       	ldd	r24, Z+4	; 0x04
    2164:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    2166:	84 b3       	in	r24, 0x14	; 20
    2168:	81 60       	ori	r24, 0x01	; 1
    216a:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    216c:	81 81       	ldd	r24, Z+1	; 0x01
    216e:	82 2b       	or	r24, r18
    2170:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2172:	85 81       	ldd	r24, Z+5	; 0x05
    2174:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    2176:	86 81       	ldd	r24, Z+6	; 0x06
    2178:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    217a:	80 b1       	in	r24, 0x00	; 0
    217c:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    217e:	84 b3       	in	r24, 0x14	; 20
    2180:	8e 7f       	andi	r24, 0xFE	; 254
    2182:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    2184:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    2186:	91 50       	subi	r25, 0x01	; 1
    2188:	51 f7       	brne	.-44     	; 0x215e <__vector_21+0x32a>
	asm("nop");
    218a:	00 00       	nop
	asm("nop");
    218c:	00 00       	nop
	PIPE_CLOCK_H
    218e:	84 b3       	in	r24, 0x14	; 20
    2190:	81 60       	ori	r24, 0x01	; 1
    2192:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    2194:	84 b3       	in	r24, 0x14	; 20
    2196:	8d 7f       	andi	r24, 0xFD	; 253
    2198:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    219a:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    219e:	82 60       	ori	r24, 0x02	; 2
    21a0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    21a4:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    21a6:	8b b1       	in	r24, 0x0b	; 11
    21a8:	80 68       	ori	r24, 0x80	; 128
    21aa:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    21ac:	84 b3       	in	r24, 0x14	; 20
    21ae:	82 60       	ori	r24, 0x02	; 2
    21b0:	84 bb       	out	0x14, r24	; 20
    21b2:	6e c0       	rjmp	.+220    	; 0x2290 <__stack+0x91>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    21b4:	80 81       	ld	r24, Z
    21b6:	81 50       	subi	r24, 0x01	; 1
    21b8:	8e 3f       	cpi	r24, 0xFE	; 254
    21ba:	38 f4       	brcc	.+14     	; 0x21ca <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    21bc:	21 81       	ldd	r18, Z+1	; 0x01
    21be:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    21c0:	25 30       	cpi	r18, 0x05	; 5
    21c2:	10 f0       	brcs	.+4      	; 0x21c8 <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    21c4:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    21c6:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    21c8:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    21ca:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21cc:	9f 5f       	subi	r25, 0xFF	; 255
    21ce:	03 c0       	rjmp	.+6      	; 0x21d6 <__vector_21+0x3a2>
    21d0:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    21d2:	ef e2       	ldi	r30, 0x2F	; 47
    21d4:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21d6:	99 30       	cpi	r25, 0x09	; 9
    21d8:	68 f3       	brcs	.-38     	; 0x21b4 <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    21da:	e1 e4       	ldi	r30, 0x41	; 65
    21dc:	f2 e0       	ldi	r31, 0x02	; 2
    21de:	80 81       	ld	r24, Z
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	80 83       	st	Z, r24
    21e4:	8a 3f       	cpi	r24, 0xFA	; 250
    21e6:	09 f0       	breq	.+2      	; 0x21ea <__vector_21+0x3b6>
    21e8:	53 c0       	rjmp	.+166    	; 0x2290 <__stack+0x91>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    21ea:	8f ef       	ldi	r24, 0xFF	; 255
    21ec:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    21f0:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    21f2:	81 81       	ldd	r24, Z+1	; 0x01
    21f4:	8f 5f       	subi	r24, 0xFF	; 255
    21f6:	81 83       	std	Z+1, r24	; 0x01
    21f8:	8c 33       	cpi	r24, 0x3C	; 60
    21fa:	08 f4       	brcc	.+2      	; 0x21fe <__vector_21+0x3ca>
    21fc:	49 c0       	rjmp	.+146    	; 0x2290 <__stack+0x91>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    21fe:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	8f 5f       	subi	r24, 0xFF	; 255
    2204:	82 83       	std	Z+2, r24	; 0x02
    2206:	8c 33       	cpi	r24, 0x3C	; 60
    2208:	08 f4       	brcc	.+2      	; 0x220c <__stack+0xd>
    220a:	42 c0       	rjmp	.+132    	; 0x2290 <__stack+0x91>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    220c:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    220e:	83 81       	ldd	r24, Z+3	; 0x03
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	83 83       	std	Z+3, r24	; 0x03
    2214:	84 36       	cpi	r24, 0x64	; 100
    2216:	e0 f1       	brcs	.+120    	; 0x2290 <__stack+0x91>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2218:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    221c:	39 c0       	rjmp	.+114    	; 0x2290 <__stack+0x91>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    221e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2222:	80 38       	cpi	r24, 0x80	; 128
    2224:	a9 f1       	breq	.+106    	; 0x2290 <__stack+0x91>
//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
    2226:	e0 90 50 03 	lds	r14, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    222a:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    222c:	09 e4       	ldi	r16, 0x49	; 73
    222e:	12 e0       	ldi	r17, 0x02	; 2
    2230:	2c c0       	rjmp	.+88     	; 0x228a <__stack+0x8b>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2232:	f8 01       	movw	r30, r16
    2234:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2236:	83 81       	ldd	r24, Z+3	; 0x03
    2238:	9c 2f       	mov	r25, r28
    223a:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    223c:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    223e:	84 81       	ldd	r24, Z+4	; 0x04
    2240:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2242:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    2244:	25 81       	ldd	r18, Z+5	; 0x05
    2246:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2248:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    224a:	86 81       	ldd	r24, Z+6	; 0x06
    224c:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    224e:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    2250:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2252:	cd 23       	and	r28, r29
    2254:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2256:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2258:	8d 2f       	mov	r24, r29
    225a:	80 95       	com	r24
    225c:	8c 23       	and	r24, r28
    225e:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2260:	21 f0       	breq	.+8      	; 0x226a <__stack+0x6b>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2262:	9f 2d       	mov	r25, r15
    2264:	90 62       	ori	r25, 0x20	; 32
    2266:	0e 94 4c 2a 	call	0x5498	; 0x5498 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    226a:	c0 95       	com	r28
    226c:	cd 23       	and	r28, r29
    226e:	8c 2f       	mov	r24, r28
    2270:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2272:	19 f0       	breq	.+6      	; 0x227a <__stack+0x7b>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2274:	9f 2d       	mov	r25, r15
    2276:	0e 94 4c 2a 	call	0x5498	; 0x5498 <pipeMsgPush>
		}
		curPipe++;
    227a:	08 5f       	subi	r16, 0xF8	; 248
    227c:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    227e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2282:	81 60       	ori	r24, 0x01	; 1
    2284:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2288:	f3 94       	inc	r15
    228a:	ff e1       	ldi	r31, 0x1F	; 31
    228c:	ff 15       	cp	r31, r15
    228e:	88 f6       	brcc	.-94     	; 0x2232 <__stack+0x33>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    2290:	85 b1       	in	r24, 0x05	; 5
    2292:	8f 77       	andi	r24, 0x7F	; 127
    2294:	85 b9       	out	0x05, r24	; 5

}
    2296:	ff 91       	pop	r31
    2298:	ef 91       	pop	r30
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	bf 91       	pop	r27
    22a0:	af 91       	pop	r26
    22a2:	9f 91       	pop	r25
    22a4:	8f 91       	pop	r24
    22a6:	7f 91       	pop	r23
    22a8:	6f 91       	pop	r22
    22aa:	5f 91       	pop	r21
    22ac:	4f 91       	pop	r20
    22ae:	3f 91       	pop	r19
    22b0:	2f 91       	pop	r18
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	0f 90       	pop	r0
    22bc:	0b be       	out	0x3b, r0	; 59
    22be:	0f 90       	pop	r0
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	0f 90       	pop	r0
    22c4:	1f 90       	pop	r1
    22c6:	18 95       	reti

000022c8 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    22c8:	8f ef       	ldi	r24, 0xFF	; 255
    22ca:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    22cc:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    22ce:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    22d0:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    22d2:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    22d4:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    22d6:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    22d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    22dc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    22e0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    22e4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    22e8:	8a b1       	in	r24, 0x0a	; 10
    22ea:	80 68       	ori	r24, 0x80	; 128
    22ec:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    22ee:	8b b1       	in	r24, 0x0b	; 11
    22f0:	8f 77       	andi	r24, 0x7F	; 127
    22f2:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    22f4:	84 b1       	in	r24, 0x04	; 4
    22f6:	80 64       	ori	r24, 0x40	; 64
    22f8:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    22fa:	85 b1       	in	r24, 0x05	; 5
    22fc:	8f 7b       	andi	r24, 0xBF	; 191
    22fe:	85 b9       	out	0x05, r24	; 5
    2300:	08 95       	ret

00002302 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2302:	88 23       	and	r24, r24
    2304:	34 f4       	brge	.+12     	; 0x2312 <lcd_write_nibble+0x10>
    2306:	e2 e0       	ldi	r30, 0x02	; 2
    2308:	f1 e0       	ldi	r31, 0x01	; 1
    230a:	90 81       	ld	r25, Z
    230c:	90 61       	ori	r25, 0x10	; 16
    230e:	90 83       	st	Z, r25
    2310:	05 c0       	rjmp	.+10     	; 0x231c <lcd_write_nibble+0x1a>
    2312:	e2 e0       	ldi	r30, 0x02	; 2
    2314:	f1 e0       	ldi	r31, 0x01	; 1
    2316:	90 81       	ld	r25, Z
    2318:	9f 7e       	andi	r25, 0xEF	; 239
    231a:	90 83       	st	Z, r25
    231c:	86 ff       	sbrs	r24, 6
    231e:	06 c0       	rjmp	.+12     	; 0x232c <lcd_write_nibble+0x2a>
    2320:	e2 e0       	ldi	r30, 0x02	; 2
    2322:	f1 e0       	ldi	r31, 0x01	; 1
    2324:	90 81       	ld	r25, Z
    2326:	98 60       	ori	r25, 0x08	; 8
    2328:	90 83       	st	Z, r25
    232a:	05 c0       	rjmp	.+10     	; 0x2336 <lcd_write_nibble+0x34>
    232c:	e2 e0       	ldi	r30, 0x02	; 2
    232e:	f1 e0       	ldi	r31, 0x01	; 1
    2330:	90 81       	ld	r25, Z
    2332:	97 7f       	andi	r25, 0xF7	; 247
    2334:	90 83       	st	Z, r25
    2336:	85 ff       	sbrs	r24, 5
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <lcd_write_nibble+0x40>
    233a:	9e b1       	in	r25, 0x0e	; 14
    233c:	98 60       	ori	r25, 0x08	; 8
    233e:	9e b9       	out	0x0e, r25	; 14
    2340:	03 c0       	rjmp	.+6      	; 0x2348 <lcd_write_nibble+0x46>
    2342:	9e b1       	in	r25, 0x0e	; 14
    2344:	97 7f       	andi	r25, 0xF7	; 247
    2346:	9e b9       	out	0x0e, r25	; 14
    2348:	84 ff       	sbrs	r24, 4
    234a:	04 c0       	rjmp	.+8      	; 0x2354 <lcd_write_nibble+0x52>
    234c:	84 b3       	in	r24, 0x14	; 20
    234e:	80 62       	ori	r24, 0x20	; 32
    2350:	84 bb       	out	0x14, r24	; 20
    2352:	03 c0       	rjmp	.+6      	; 0x235a <lcd_write_nibble+0x58>
    2354:	84 b3       	in	r24, 0x14	; 20
    2356:	8f 7d       	andi	r24, 0xDF	; 223
    2358:	84 bb       	out	0x14, r24	; 20
    235a:	e2 e0       	ldi	r30, 0x02	; 2
    235c:	f1 e0       	ldi	r31, 0x01	; 1
    235e:	80 81       	ld	r24, Z
    2360:	80 64       	ori	r24, 0x40	; 64
    2362:	80 83       	st	Z, r24
    2364:	85 e0       	ldi	r24, 0x05	; 5
    2366:	8a 95       	dec	r24
    2368:	f1 f7       	brne	.-4      	; 0x2366 <lcd_write_nibble+0x64>
    236a:	00 00       	nop
    236c:	80 81       	ld	r24, Z
    236e:	8f 7b       	andi	r24, 0xBF	; 191
    2370:	80 83       	st	Z, r24
    2372:	85 e0       	ldi	r24, 0x05	; 5
    2374:	8a 95       	dec	r24
    2376:	f1 f7       	brne	.-4      	; 0x2374 <lcd_write_nibble+0x72>
    2378:	00 00       	nop
    237a:	08 95       	ret

0000237c <lcd_write_character>:
    237c:	cf 93       	push	r28
    237e:	c8 2f       	mov	r28, r24
    2380:	e2 e0       	ldi	r30, 0x02	; 2
    2382:	f1 e0       	ldi	r31, 0x01	; 1
    2384:	80 81       	ld	r24, Z
    2386:	80 62       	ori	r24, 0x20	; 32
    2388:	80 83       	st	Z, r24
    238a:	80 81       	ld	r24, Z
    238c:	8f 7b       	andi	r24, 0xBF	; 191
    238e:	80 83       	st	Z, r24
    2390:	8c 2f       	mov	r24, r28
    2392:	b7 df       	rcall	.-146    	; 0x2302 <lcd_write_nibble>
    2394:	8c 2f       	mov	r24, r28
    2396:	82 95       	swap	r24
    2398:	80 7f       	andi	r24, 0xF0	; 240
    239a:	b3 df       	rcall	.-154    	; 0x2302 <lcd_write_nibble>
    239c:	8f ef       	ldi	r24, 0xFF	; 255
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <lcd_write_character+0x24>
    23a4:	00 c0       	rjmp	.+0      	; 0x23a6 <lcd_write_character+0x2a>
    23a6:	00 00       	nop
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <lcd_write_command>:
    23ac:	cf 93       	push	r28
    23ae:	c8 2f       	mov	r28, r24
    23b0:	e2 e0       	ldi	r30, 0x02	; 2
    23b2:	f1 e0       	ldi	r31, 0x01	; 1
    23b4:	80 81       	ld	r24, Z
    23b6:	8f 7d       	andi	r24, 0xDF	; 223
    23b8:	80 83       	st	Z, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 7b       	andi	r24, 0xBF	; 191
    23be:	80 83       	st	Z, r24
    23c0:	8c 2f       	mov	r24, r28
    23c2:	9f df       	rcall	.-194    	; 0x2302 <lcd_write_nibble>
    23c4:	8c 2f       	mov	r24, r28
    23c6:	82 95       	swap	r24
    23c8:	80 7f       	andi	r24, 0xF0	; 240
    23ca:	9b df       	rcall	.-202    	; 0x2302 <lcd_write_nibble>
    23cc:	c1 50       	subi	r28, 0x01	; 1
    23ce:	c2 30       	cpi	r28, 0x02	; 2
    23d0:	38 f4       	brcc	.+14     	; 0x23e0 <lcd_write_command+0x34>
    23d2:	8f e0       	ldi	r24, 0x0F	; 15
    23d4:	97 e2       	ldi	r25, 0x27	; 39
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <lcd_write_command+0x2a>
    23da:	00 c0       	rjmp	.+0      	; 0x23dc <lcd_write_command+0x30>
    23dc:	00 00       	nop
    23de:	06 c0       	rjmp	.+12     	; 0x23ec <lcd_write_command+0x40>
    23e0:	8f ef       	ldi	r24, 0xFF	; 255
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <lcd_write_command+0x38>
    23e8:	00 c0       	rjmp	.+0      	; 0x23ea <lcd_write_command+0x3e>
    23ea:	00 00       	nop
    23ec:	cf 91       	pop	r28
    23ee:	08 95       	ret

000023f0 <lcd_init>:
    23f0:	e1 e0       	ldi	r30, 0x01	; 1
    23f2:	f1 e0       	ldi	r31, 0x01	; 1
    23f4:	80 81       	ld	r24, Z
    23f6:	80 61       	ori	r24, 0x10	; 16
    23f8:	80 83       	st	Z, r24
    23fa:	80 81       	ld	r24, Z
    23fc:	88 60       	ori	r24, 0x08	; 8
    23fe:	80 83       	st	Z, r24
    2400:	8d b1       	in	r24, 0x0d	; 13
    2402:	88 60       	ori	r24, 0x08	; 8
    2404:	8d b9       	out	0x0d, r24	; 13
    2406:	83 b3       	in	r24, 0x13	; 19
    2408:	80 62       	ori	r24, 0x20	; 32
    240a:	83 bb       	out	0x13, r24	; 19
    240c:	80 81       	ld	r24, Z
    240e:	80 64       	ori	r24, 0x40	; 64
    2410:	80 83       	st	Z, r24
    2412:	80 81       	ld	r24, Z
    2414:	80 62       	ori	r24, 0x20	; 32
    2416:	80 83       	st	Z, r24
    2418:	2f ef       	ldi	r18, 0xFF	; 255
    241a:	81 ee       	ldi	r24, 0xE1	; 225
    241c:	94 e0       	ldi	r25, 0x04	; 4
    241e:	21 50       	subi	r18, 0x01	; 1
    2420:	80 40       	sbci	r24, 0x00	; 0
    2422:	90 40       	sbci	r25, 0x00	; 0
    2424:	e1 f7       	brne	.-8      	; 0x241e <lcd_init+0x2e>
    2426:	00 c0       	rjmp	.+0      	; 0x2428 <lcd_init+0x38>
    2428:	00 00       	nop
    242a:	e2 e0       	ldi	r30, 0x02	; 2
    242c:	f1 e0       	ldi	r31, 0x01	; 1
    242e:	80 81       	ld	r24, Z
    2430:	8f 7d       	andi	r24, 0xDF	; 223
    2432:	80 83       	st	Z, r24
    2434:	80 81       	ld	r24, Z
    2436:	8f 7b       	andi	r24, 0xBF	; 191
    2438:	80 83       	st	Z, r24
    243a:	80 e3       	ldi	r24, 0x30	; 48
    243c:	62 df       	rcall	.-316    	; 0x2302 <lcd_write_nibble>
    243e:	8f e1       	ldi	r24, 0x1F	; 31
    2440:	9e e4       	ldi	r25, 0x4E	; 78
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <lcd_init+0x52>
    2446:	00 c0       	rjmp	.+0      	; 0x2448 <lcd_init+0x58>
    2448:	00 00       	nop
    244a:	80 e3       	ldi	r24, 0x30	; 48
    244c:	5a df       	rcall	.-332    	; 0x2302 <lcd_write_nibble>
    244e:	8f e1       	ldi	r24, 0x1F	; 31
    2450:	9e e4       	ldi	r25, 0x4E	; 78
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <lcd_init+0x62>
    2456:	00 c0       	rjmp	.+0      	; 0x2458 <lcd_init+0x68>
    2458:	00 00       	nop
    245a:	80 e3       	ldi	r24, 0x30	; 48
    245c:	52 df       	rcall	.-348    	; 0x2302 <lcd_write_nibble>
    245e:	8f e1       	ldi	r24, 0x1F	; 31
    2460:	9e e4       	ldi	r25, 0x4E	; 78
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <lcd_init+0x72>
    2466:	00 c0       	rjmp	.+0      	; 0x2468 <lcd_init+0x78>
    2468:	00 00       	nop
    246a:	88 e2       	ldi	r24, 0x28	; 40
    246c:	4a df       	rcall	.-364    	; 0x2302 <lcd_write_nibble>
    246e:	8f ef       	ldi	r24, 0xFF	; 255
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <lcd_init+0x82>
    2476:	00 c0       	rjmp	.+0      	; 0x2478 <lcd_init+0x88>
    2478:	00 00       	nop
    247a:	88 e2       	ldi	r24, 0x28	; 40
    247c:	97 df       	rcall	.-210    	; 0x23ac <lcd_write_command>
    247e:	88 e0       	ldi	r24, 0x08	; 8
    2480:	95 df       	rcall	.-214    	; 0x23ac <lcd_write_command>
    2482:	81 e0       	ldi	r24, 0x01	; 1
    2484:	93 df       	rcall	.-218    	; 0x23ac <lcd_write_command>
    2486:	86 e0       	ldi	r24, 0x06	; 6
    2488:	91 df       	rcall	.-222    	; 0x23ac <lcd_write_command>
    248a:	8c e0       	ldi	r24, 0x0C	; 12
    248c:	8f cf       	rjmp	.-226    	; 0x23ac <lcd_write_command>
    248e:	08 95       	ret

00002490 <lcd_goto>:
    2490:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    2494:	80 58       	subi	r24, 0x80	; 128
    2496:	8a cf       	rjmp	.-236    	; 0x23ac <lcd_write_command>
    2498:	08 95       	ret

0000249a <lcd_clrscr>:
    249a:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	85 df       	rcall	.-246    	; 0x23ac <lcd_write_command>
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	e8 e5       	ldi	r30, 0x58	; 88
    24a6:	f3 e0       	ldi	r31, 0x03	; 3
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <lcd_clrscr+0x18>
    24aa:	90 e2       	ldi	r25, 0x20	; 32
    24ac:	90 83       	st	Z, r25
    24ae:	8f 5f       	subi	r24, 0xFF	; 255
    24b0:	31 96       	adiw	r30, 0x01	; 1
    24b2:	80 35       	cpi	r24, 0x50	; 80
    24b4:	d0 f3       	brcs	.-12     	; 0x24aa <lcd_clrscr+0x10>
    24b6:	08 95       	ret

000024b8 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    24b8:	84 31       	cpi	r24, 0x14	; 20
    24ba:	98 f0       	brcs	.+38     	; 0x24e2 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    24bc:	90 ec       	ldi	r25, 0xC0	; 192
    24be:	98 0f       	add	r25, r24
    24c0:	94 31       	cpi	r25, 0x14	; 20
    24c2:	10 f4       	brcc	.+4      	; 0x24c8 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    24c4:	8c 52       	subi	r24, 0x2C	; 44
    24c6:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    24c8:	9c ee       	ldi	r25, 0xEC	; 236
    24ca:	98 0f       	add	r25, r24
    24cc:	94 31       	cpi	r25, 0x14	; 20
    24ce:	10 f4       	brcc	.+4      	; 0x24d4 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    24d0:	8c 5e       	subi	r24, 0xEC	; 236
    24d2:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    24d4:	9c ea       	ldi	r25, 0xAC	; 172
    24d6:	98 0f       	add	r25, r24
    24d8:	94 31       	cpi	r25, 0x14	; 20
    24da:	10 f4       	brcc	.+4      	; 0x24e0 <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    24dc:	88 51       	subi	r24, 0x18	; 24
    24de:	08 95       	ret
	}
	return 0xFF;
    24e0:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    24e2:	08 95       	ret

000024e4 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    24e4:	cf 93       	push	r28
    24e6:	df 93       	push	r29
    24e8:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    24ea:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    24ee:	8c 2f       	mov	r24, r28
    24f0:	e3 df       	rcall	.-58     	; 0x24b8 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    24f2:	8f 3f       	cpi	r24, 0xFF	; 255
    24f4:	31 f1       	breq	.+76     	; 0x2542 <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    24f6:	d1 3a       	cpi	r29, 0xA1	; 161
    24f8:	81 f0       	breq	.+32     	; 0x251a <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    24fa:	d0 38       	cpi	r29, 0x80	; 128
    24fc:	81 f0       	breq	.+32     	; 0x251e <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    24fe:	d5 3a       	cpi	r29, 0xA5	; 165
    2500:	81 f0       	breq	.+32     	; 0x2522 <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    2502:	da 30       	cpi	r29, 0x0A	; 10
    2504:	81 f0       	breq	.+32     	; 0x2526 <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    2506:	d2 3e       	cpi	r29, 0xE2	; 226
    2508:	81 f0       	breq	.+32     	; 0x252a <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    250a:	d5 3f       	cpi	r29, 0xF5	; 245
    250c:	81 f0       	breq	.+32     	; 0x252e <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    250e:	df 3e       	cpi	r29, 0xEF	; 239
    2510:	81 f0       	breq	.+32     	; 0x2532 <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    2512:	d1 3e       	cpi	r29, 0xE1	; 225
    2514:	81 f0       	breq	.+32     	; 0x2536 <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    2516:	9d 2f       	mov	r25, r29
    2518:	0f c0       	rjmp	.+30     	; 0x2538 <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    251a:	90 e2       	ldi	r25, 0x20	; 32
    251c:	0d c0       	rjmp	.+26     	; 0x2538 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    251e:	90 e2       	ldi	r25, 0x20	; 32
    2520:	0b c0       	rjmp	.+22     	; 0x2538 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    2522:	94 e1       	ldi	r25, 0x14	; 20
    2524:	09 c0       	rjmp	.+18     	; 0x2538 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    2526:	95 e1       	ldi	r25, 0x15	; 21
    2528:	07 c0       	rjmp	.+14     	; 0x2538 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    252a:	93 e1       	ldi	r25, 0x13	; 19
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    252e:	92 e1       	ldi	r25, 0x12	; 18
    2530:	03 c0       	rjmp	.+6      	; 0x2538 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    2532:	91 e1       	ldi	r25, 0x11	; 17
    2534:	01 c0       	rjmp	.+2      	; 0x2538 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    2536:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    2538:	e8 2f       	mov	r30, r24
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	e8 5a       	subi	r30, 0xA8	; 168
    253e:	fc 4f       	sbci	r31, 0xFC	; 252
    2540:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    2542:	cf 5f       	subi	r28, 0xFF	; 255
    2544:	cf 77       	andi	r28, 0x7F	; 127
    2546:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    254a:	8d 2f       	mov	r24, r29
    254c:	17 df       	rcall	.-466    	; 0x237c <lcd_write_character>
}
    254e:	df 91       	pop	r29
    2550:	cf 91       	pop	r28
    2552:	08 95       	ret

00002554 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    2554:	cf 93       	push	r28
    2556:	df 93       	push	r29
    2558:	fc 01       	movw	r30, r24
	if (s != NULL){
    255a:	89 2b       	or	r24, r25
    255c:	19 f4       	brne	.+6      	; 0x2564 <lcd_puts+0x10>
    255e:	07 c0       	rjmp	.+14     	; 0x256e <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    2560:	c1 df       	rcall	.-126    	; 0x24e4 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    2562:	fe 01       	movw	r30, r28
    2564:	ef 01       	movw	r28, r30
    2566:	21 96       	adiw	r28, 0x01	; 1
    2568:	80 81       	ld	r24, Z
    256a:	81 11       	cpse	r24, r1
    256c:	f9 cf       	rjmp	.-14     	; 0x2560 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	08 95       	ret

00002574 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    2574:	cf 93       	push	r28
    2576:	df 93       	push	r29
    2578:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    257a:	89 2b       	or	r24, r25
    257c:	19 f4       	brne	.+6      	; 0x2584 <lcd_puts_P+0x10>
    257e:	07 c0       	rjmp	.+14     	; 0x258e <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    2580:	b1 df       	rcall	.-158    	; 0x24e4 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2582:	fe 01       	movw	r30, r28
    2584:	ef 01       	movw	r28, r30
    2586:	21 96       	adiw	r28, 0x01	; 1
    2588:	84 91       	lpm	r24, Z
    258a:	81 11       	cpse	r24, r1
    258c:	f9 cf       	rjmp	.-14     	; 0x2580 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    258e:	df 91       	pop	r29
    2590:	cf 91       	pop	r28
    2592:	08 95       	ret

00002594 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2594:	82 ed       	ldi	r24, 0xD2	; 210
    2596:	93 e0       	ldi	r25, 0x03	; 3
    2598:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    259c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    25a0:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    25a4:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    25a8:	08 95       	ret

000025aa <log_count>:
    25aa:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    25ae:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    25b2:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    25b6:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	48 f0       	brcs	.+18     	; 0x25d2 <log_count+0x28>
    25c0:	82 1b       	sub	r24, r18
    25c2:	93 0b       	sbc	r25, r19
    25c4:	95 95       	asr	r25
    25c6:	87 95       	ror	r24
    25c8:	9d ec       	ldi	r25, 0xCD	; 205
    25ca:	89 9f       	mul	r24, r25
    25cc:	80 2d       	mov	r24, r0
    25ce:	11 24       	eor	r1, r1
    25d0:	08 95       	ret
    25d2:	80 57       	subi	r24, 0x70	; 112
    25d4:	9e 4f       	sbci	r25, 0xFE	; 254
    25d6:	82 1b       	sub	r24, r18
    25d8:	93 0b       	sbc	r25, r19
    25da:	95 95       	asr	r25
    25dc:	87 95       	ror	r24
    25de:	9d ec       	ldi	r25, 0xCD	; 205
    25e0:	89 9f       	mul	r24, r25
    25e2:	80 2d       	mov	r24, r0
    25e4:	11 24       	eor	r1, r1
    25e6:	08 95       	ret

000025e8 <log_getLog>:
    25e8:	cf 93       	push	r28
    25ea:	c8 2f       	mov	r28, r24
    25ec:	de df       	rcall	.-68     	; 0x25aa <log_count>
    25ee:	c8 17       	cp	r28, r24
    25f0:	f8 f4       	brcc	.+62     	; 0x2630 <log_getLog+0x48>
    25f2:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    25f6:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    25fa:	8c 2f       	mov	r24, r28
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	9c 01       	movw	r18, r24
    2600:	22 0f       	add	r18, r18
    2602:	33 1f       	adc	r19, r19
    2604:	88 0f       	add	r24, r24
    2606:	99 1f       	adc	r25, r25
    2608:	88 0f       	add	r24, r24
    260a:	99 1f       	adc	r25, r25
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	28 0f       	add	r18, r24
    2612:	39 1f       	adc	r19, r25
    2614:	ca 01       	movw	r24, r20
    2616:	82 0f       	add	r24, r18
    2618:	93 1f       	adc	r25, r19
    261a:	65 e0       	ldi	r22, 0x05	; 5
    261c:	88 35       	cpi	r24, 0x58	; 88
    261e:	96 07       	cpc	r25, r22
    2620:	49 f0       	breq	.+18     	; 0x2634 <log_getLog+0x4c>
    2622:	40 f0       	brcs	.+16     	; 0x2634 <log_getLog+0x4c>
    2624:	20 59       	subi	r18, 0x90	; 144
    2626:	31 40       	sbci	r19, 0x01	; 1
    2628:	ca 01       	movw	r24, r20
    262a:	82 0f       	add	r24, r18
    262c:	93 1f       	adc	r25, r19
    262e:	02 c0       	rjmp	.+4      	; 0x2634 <log_getLog+0x4c>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	cf 91       	pop	r28
    2636:	08 95       	ret

00002638 <log_getErrorText>:
    2638:	d7 df       	rcall	.-82     	; 0x25e8 <log_getLog>
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	f1 f1       	breq	.+124    	; 0x26ba <log_getErrorText+0x82>
    263e:	fc 01       	movw	r30, r24
    2640:	36 81       	ldd	r19, Z+6	; 0x06
    2642:	67 81       	ldd	r22, Z+7	; 0x07
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	34 c0       	rjmp	.+104    	; 0x26b0 <log_getErrorText+0x78>
    2648:	42 2f       	mov	r20, r18
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	fa 01       	movw	r30, r20
    264e:	ee 0f       	add	r30, r30
    2650:	ff 1f       	adc	r31, r31
    2652:	cf 01       	movw	r24, r30
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	88 0f       	add	r24, r24
    265a:	99 1f       	adc	r25, r25
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	e8 0f       	add	r30, r24
    2662:	f9 1f       	adc	r31, r25
    2664:	e6 59       	subi	r30, 0x96	; 150
    2666:	fe 4f       	sbci	r31, 0xFE	; 254
    2668:	84 91       	lpm	r24, Z
    266a:	38 13       	cpse	r19, r24
    266c:	20 c0       	rjmp	.+64     	; 0x26ae <log_getErrorText+0x76>
    266e:	fa 01       	movw	r30, r20
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	cf 01       	movw	r24, r30
    2676:	88 0f       	add	r24, r24
    2678:	99 1f       	adc	r25, r25
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	e8 0f       	add	r30, r24
    2684:	f9 1f       	adc	r31, r25
    2686:	e5 59       	subi	r30, 0x95	; 149
    2688:	fe 4f       	sbci	r31, 0xFE	; 254
    268a:	84 91       	lpm	r24, Z
    268c:	68 13       	cpse	r22, r24
    268e:	0f c0       	rjmp	.+30     	; 0x26ae <log_getErrorText+0x76>
    2690:	44 0f       	add	r20, r20
    2692:	55 1f       	adc	r21, r21
    2694:	ca 01       	movw	r24, r20
    2696:	88 0f       	add	r24, r24
    2698:	99 1f       	adc	r25, r25
    269a:	88 0f       	add	r24, r24
    269c:	99 1f       	adc	r25, r25
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	48 0f       	add	r20, r24
    26a4:	59 1f       	adc	r21, r25
    26a6:	ca 01       	movw	r24, r20
    26a8:	84 59       	subi	r24, 0x94	; 148
    26aa:	9e 4f       	sbci	r25, 0xFE	; 254
    26ac:	08 95       	ret
    26ae:	2f 5f       	subi	r18, 0xFF	; 255
    26b0:	20 31       	cpi	r18, 0x10	; 16
    26b2:	50 f2       	brcs	.-108    	; 0x2648 <log_getErrorText+0x10>
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	08 95       	ret
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	08 95       	ret

000026c0 <logCheckUnreadErrorLogs>:
    26c0:	cf 93       	push	r28
    26c2:	73 df       	rcall	.-282    	; 0x25aa <log_count>
    26c4:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    26c8:	81 11       	cpse	r24, r1
    26ca:	14 c0       	rjmp	.+40     	; 0x26f4 <logCheckUnreadErrorLogs+0x34>
    26cc:	17 c0       	rjmp	.+46     	; 0x26fc <logCheckUnreadErrorLogs+0x3c>
    26ce:	8c 2f       	mov	r24, r28
    26d0:	8b df       	rcall	.-234    	; 0x25e8 <log_getLog>
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	61 f0       	breq	.+24     	; 0x26ee <logCheckUnreadErrorLogs+0x2e>
    26d6:	fc 01       	movw	r30, r24
    26d8:	24 81       	ldd	r18, Z+4	; 0x04
    26da:	20 32       	cpi	r18, 0x20	; 32
    26dc:	51 f0       	breq	.+20     	; 0x26f2 <logCheckUnreadErrorLogs+0x32>
    26de:	95 81       	ldd	r25, Z+5	; 0x05
    26e0:	8c 2f       	mov	r24, r28
    26e2:	95 34       	cpi	r25, 0x45	; 69
    26e4:	39 f4       	brne	.+14     	; 0x26f4 <logCheckUnreadErrorLogs+0x34>
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <logCheckUnreadErrorLogs+0x3c>
    26ee:	8c 2f       	mov	r24, r28
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <logCheckUnreadErrorLogs+0x34>
    26f2:	8c 2f       	mov	r24, r28
    26f4:	cf ef       	ldi	r28, 0xFF	; 255
    26f6:	c8 0f       	add	r28, r24
    26f8:	81 11       	cpse	r24, r1
    26fa:	e9 cf       	rjmp	.-46     	; 0x26ce <logCheckUnreadErrorLogs+0xe>
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <log_getShortTextFromPtr>:
    2700:	1f 93       	push	r17
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	09 f4       	brne	.+2      	; 0x270c <log_getShortTextFromPtr+0xc>
    270a:	7b c0       	rjmp	.+246    	; 0x2802 <log_getShortTextFromPtr+0x102>
    270c:	16 2f       	mov	r17, r22
    270e:	ec 01       	movw	r28, r24
    2710:	8b 81       	ldd	r24, Y+3	; 0x03
    2712:	88 23       	and	r24, r24
    2714:	79 f0       	breq	.+30     	; 0x2734 <log_getShortTextFromPtr+0x34>
    2716:	6a ea       	ldi	r22, 0xAA	; 170
    2718:	73 e0       	ldi	r23, 0x03	; 3
    271a:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    271e:	bc 01       	movw	r22, r24
    2720:	6f 5f       	subi	r22, 0xFF	; 255
    2722:	7f 4f       	sbci	r23, 0xFF	; 255
    2724:	28 e6       	ldi	r18, 0x68	; 104
    2726:	fc 01       	movw	r30, r24
    2728:	20 83       	st	Z, r18
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    2730:	dc 01       	movw	r26, r24
    2732:	2f c0       	rjmp	.+94     	; 0x2792 <log_getShortTextFromPtr+0x92>
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	88 23       	and	r24, r24
    2738:	79 f0       	breq	.+30     	; 0x2758 <log_getShortTextFromPtr+0x58>
    273a:	6a ea       	ldi	r22, 0xAA	; 170
    273c:	73 e0       	ldi	r23, 0x03	; 3
    273e:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    2742:	bc 01       	movw	r22, r24
    2744:	6f 5f       	subi	r22, 0xFF	; 255
    2746:	7f 4f       	sbci	r23, 0xFF	; 255
    2748:	2d e6       	ldi	r18, 0x6D	; 109
    274a:	fc 01       	movw	r30, r24
    274c:	20 83       	st	Z, r18
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    2754:	dc 01       	movw	r26, r24
    2756:	1d c0       	rjmp	.+58     	; 0x2792 <log_getShortTextFromPtr+0x92>
    2758:	6a ea       	ldi	r22, 0xAA	; 170
    275a:	73 e0       	ldi	r23, 0x03	; 3
    275c:	89 81       	ldd	r24, Y+1	; 0x01
    275e:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    2762:	fc 01       	movw	r30, r24
    2764:	83 e7       	ldi	r24, 0x73	; 115
    2766:	80 83       	st	Z, r24
    2768:	98 81       	ld	r25, Y
    276a:	99 0f       	add	r25, r25
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <log_getShortTextFromPtr+0x74>
    2770:	99 51       	subi	r25, 0x19	; 25
    2772:	2f 5f       	subi	r18, 0xFF	; 255
    2774:	99 31       	cpi	r25, 0x19	; 25
    2776:	e0 f7       	brcc	.-8      	; 0x2770 <log_getShortTextFromPtr+0x70>
    2778:	20 5d       	subi	r18, 0xD0	; 208
    277a:	21 83       	std	Z+1, r18	; 0x01
    277c:	99 0f       	add	r25, r25
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <log_getShortTextFromPtr+0x86>
    2782:	95 50       	subi	r25, 0x05	; 5
    2784:	2f 5f       	subi	r18, 0xFF	; 255
    2786:	95 30       	cpi	r25, 0x05	; 5
    2788:	e0 f7       	brcc	.-8      	; 0x2782 <log_getShortTextFromPtr+0x82>
    278a:	df 01       	movw	r26, r30
    278c:	13 96       	adiw	r26, 0x03	; 3
    278e:	20 5d       	subi	r18, 0xD0	; 208
    2790:	22 83       	std	Z+2, r18	; 0x02
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	90 34       	cpi	r25, 0x40	; 64
    2796:	51 f0       	breq	.+20     	; 0x27ac <log_getShortTextFromPtr+0xac>
    2798:	90 38       	cpi	r25, 0x80	; 128
    279a:	19 f0       	breq	.+6      	; 0x27a2 <log_getShortTextFromPtr+0xa2>
    279c:	90 32       	cpi	r25, 0x20	; 32
    279e:	81 f4       	brne	.+32     	; 0x27c0 <log_getShortTextFromPtr+0xc0>
    27a0:	0a c0       	rjmp	.+20     	; 0x27b6 <log_getShortTextFromPtr+0xb6>
    27a2:	fd 01       	movw	r30, r26
    27a4:	31 96       	adiw	r30, 0x01	; 1
    27a6:	8a e2       	ldi	r24, 0x2A	; 42
    27a8:	8c 93       	st	X, r24
    27aa:	0e c0       	rjmp	.+28     	; 0x27c8 <log_getShortTextFromPtr+0xc8>
    27ac:	fd 01       	movw	r30, r26
    27ae:	31 96       	adiw	r30, 0x01	; 1
    27b0:	85 ea       	ldi	r24, 0xA5	; 165
    27b2:	8c 93       	st	X, r24
    27b4:	09 c0       	rjmp	.+18     	; 0x27c8 <log_getShortTextFromPtr+0xc8>
    27b6:	fd 01       	movw	r30, r26
    27b8:	31 96       	adiw	r30, 0x01	; 1
    27ba:	80 e2       	ldi	r24, 0x20	; 32
    27bc:	8c 93       	st	X, r24
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <log_getShortTextFromPtr+0xc8>
    27c0:	fd 01       	movw	r30, r26
    27c2:	31 96       	adiw	r30, 0x01	; 1
    27c4:	8f e3       	ldi	r24, 0x3F	; 63
    27c6:	8c 93       	st	X, r24
    27c8:	bf 01       	movw	r22, r30
    27ca:	6f 5f       	subi	r22, 0xFF	; 255
    27cc:	7f 4f       	sbci	r23, 0xFF	; 255
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	80 83       	st	Z, r24
    27d2:	8e 81       	ldd	r24, Y+6	; 0x06
    27d4:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    27d8:	bc 01       	movw	r22, r24
    27da:	8f 81       	ldd	r24, Y+7	; 0x07
    27dc:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    27e0:	bc 01       	movw	r22, r24
    27e2:	6f 5f       	subi	r22, 0xFF	; 255
    27e4:	7f 4f       	sbci	r23, 0xFF	; 255
    27e6:	2d e2       	ldi	r18, 0x2D	; 45
    27e8:	fc 01       	movw	r30, r24
    27ea:	20 83       	st	Z, r18
    27ec:	88 85       	ldd	r24, Y+8	; 0x08
    27ee:	99 85       	ldd	r25, Y+9	; 0x09
    27f0:	0e 94 d9 35 	call	0x6bb2	; 0x6bb2 <putChar_long>
    27f4:	fc 01       	movw	r30, r24
    27f6:	10 82       	st	Z, r1
    27f8:	1f 3f       	cpi	r17, 0xFF	; 255
    27fa:	41 f0       	breq	.+16     	; 0x280c <log_getShortTextFromPtr+0x10c>
    27fc:	1c 83       	std	Y+4, r17	; 0x04
    27fe:	60 df       	rcall	.-320    	; 0x26c0 <logCheckUnreadErrorLogs>
    2800:	05 c0       	rjmp	.+10     	; 0x280c <log_getShortTextFromPtr+0x10c>
    2802:	ea ea       	ldi	r30, 0xAA	; 170
    2804:	f3 e0       	ldi	r31, 0x03	; 3
    2806:	8d e2       	ldi	r24, 0x2D	; 45
    2808:	80 83       	st	Z, r24
    280a:	11 82       	std	Z+1, r1	; 0x01
    280c:	8a ea       	ldi	r24, 0xAA	; 170
    280e:	93 e0       	ldi	r25, 0x03	; 3
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	08 95       	ret

00002818 <log_put>:
    2818:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    281c:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2820:	a1 e4       	ldi	r26, 0x41	; 65
    2822:	b2 e0       	ldi	r27, 0x02	; 2
    2824:	9c 91       	ld	r25, X
    2826:	90 83       	st	Z, r25
    2828:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    282c:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2830:	11 96       	adiw	r26, 0x01	; 1
    2832:	9c 91       	ld	r25, X
    2834:	11 97       	sbiw	r26, 0x01	; 1
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    283c:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2840:	12 96       	adiw	r26, 0x02	; 2
    2842:	9c 91       	ld	r25, X
    2844:	12 97       	sbiw	r26, 0x02	; 2
    2846:	92 83       	std	Z+2, r25	; 0x02
    2848:	13 96       	adiw	r26, 0x03	; 3
    284a:	9c 91       	ld	r25, X
    284c:	93 83       	std	Z+3, r25	; 0x03
    284e:	25 83       	std	Z+5, r18	; 0x05
    2850:	86 83       	std	Z+6, r24	; 0x06
    2852:	67 83       	std	Z+7, r22	; 0x07
    2854:	51 87       	std	Z+9, r21	; 0x09
    2856:	40 87       	std	Z+8, r20	; 0x08
    2858:	80 e8       	ldi	r24, 0x80	; 128
    285a:	84 83       	std	Z+4, r24	; 0x04
    285c:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <serusb_Active>
    2860:	8f 3f       	cpi	r24, 0xFF	; 255
    2862:	81 f4       	brne	.+32     	; 0x2884 <log_put+0x6c>
    2864:	84 e6       	ldi	r24, 0x64	; 100
    2866:	91 e0       	ldi	r25, 0x01	; 1
    2868:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    286c:	6f ef       	ldi	r22, 0xFF	; 255
    286e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2872:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2876:	44 df       	rcall	.-376    	; 0x2700 <log_getShortTextFromPtr>
    2878:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    287c:	8e ed       	ldi	r24, 0xDE	; 222
    287e:	91 e1       	ldi	r25, 0x11	; 17
    2880:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    2884:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2888:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    288c:	0a 96       	adiw	r24, 0x0a	; 10
    288e:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2892:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2896:	88 55       	subi	r24, 0x58	; 88
    2898:	95 40       	sbci	r25, 0x05	; 5
    289a:	39 f0       	breq	.+14     	; 0x28aa <log_put+0x92>
    289c:	30 f0       	brcs	.+12     	; 0x28aa <log_put+0x92>
    289e:	82 ed       	ldi	r24, 0xD2	; 210
    28a0:	93 e0       	ldi	r25, 0x03	; 3
    28a2:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    28a6:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    28aa:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    28ae:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    28b2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    28b6:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    28ba:	28 17       	cp	r18, r24
    28bc:	39 07       	cpc	r19, r25
    28be:	79 f4       	brne	.+30     	; 0x28de <log_put+0xc6>
    28c0:	0a 96       	adiw	r24, 0x0a	; 10
    28c2:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    28c6:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    28ca:	88 55       	subi	r24, 0x58	; 88
    28cc:	95 40       	sbci	r25, 0x05	; 5
    28ce:	39 f0       	breq	.+14     	; 0x28de <log_put+0xc6>
    28d0:	30 f0       	brcs	.+12     	; 0x28de <log_put+0xc6>
    28d2:	82 ed       	ldi	r24, 0xD2	; 210
    28d4:	93 e0       	ldi	r25, 0x03	; 3
    28d6:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    28da:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    28de:	08 95       	ret

000028e0 <log_putError>:
    28e0:	25 e4       	ldi	r18, 0x45	; 69
    28e2:	9a df       	rcall	.-204    	; 0x2818 <log_put>
    28e4:	8f ef       	ldi	r24, 0xFF	; 255
    28e6:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    28ea:	08 95       	ret

000028ec <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    28ec:	cf 93       	push	r28
    28ee:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    28f0:	7b de       	rcall	.-778    	; 0x25e8 <log_getLog>
	if (pLogEntry != NULL){
    28f2:	00 97       	sbiw	r24, 0x00	; 0
    28f4:	19 f0       	breq	.+6      	; 0x28fc <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    28f6:	6c 2f       	mov	r22, r28
    28f8:	03 df       	rcall	.-506    	; 0x2700 <log_getShortTextFromPtr>
    28fa:	06 c0       	rjmp	.+12     	; 0x2908 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    28fc:	ea ea       	ldi	r30, 0xAA	; 170
    28fe:	f3 e0       	ldi	r31, 0x03	; 3
    2900:	8d e2       	ldi	r24, 0x2D	; 45
    2902:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2904:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2906:	cf 01       	movw	r24, r30
	}
    2908:	cf 91       	pop	r28
    290a:	08 95       	ret

0000290c <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    290c:	dd dc       	rcall	.-1606   	; 0x22c8 <init_iopins>
	init_log();
    290e:	42 de       	rcall	.-892    	; 0x2594 <init_log>
    2910:	0e 94 31 33 	call	0x6662	; 0x6662 <init_Serial0SerUSB>
	init_Serial0SerUSB();
    2914:	0e 94 05 2a 	call	0x540a	; 0x540a <init_message>
	init_message();
	init_HwTimer();
    2918:	73 d8       	rcall	.-3866   	; 0x1a00 <init_HwTimer>
	init_Timers();
    291a:	5a d8       	rcall	.-3916   	; 0x19d0 <init_Timers>
    291c:	80 d8       	rcall	.-3840   	; 0x1a1e <init_ADC>
	init_ADC();
    291e:	a9 d8       	rcall	.-3758   	; 0x1a72 <init_Pipe>
	init_Pipe();
    2920:	0e 94 26 32 	call	0x644c	; 0x644c <init_Serial1MIDI>
	init_Serial1MIDI();
    2924:	ce d8       	rcall	.-3684   	; 0x1ac2 <init_PipeModules>
    2926:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <init_Midi2Manual>
	init_PipeModules();
    292a:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <init_Manual2Midi>
	init_Midi2Manual();
    292e:	0e 94 97 2a 	call	0x552e	; 0x552e <init_Midi>
	init_Manual2Midi();
    2932:	0e 94 0b 2b 	call	0x5616	; 0x5616 <init_Registers>
	init_Midi();
    2936:	0e 94 93 2e 	call	0x5d26	; 0x5d26 <init_Manual2Module>
	init_Registers();
    293a:	0e 94 a6 28 	call	0x514c	; 0x514c <init_SoftKeys>
	init_Manual2Module();
    293e:	0e 94 9d 0c 	call	0x193a	; 0x193a <eeprom_UpdateALL>
	init_SoftKeys();
    2942:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2946:	54 dd       	rcall	.-1368   	; 0x23f0 <lcd_init>
	INIT_MENU
    2948:	0e 94 f9 34 	call	0x69f2	; 0x69f2 <lcd_initCG>


	// BOOT MESSAGE

	lcd_init ();
	lcd_initCG();
    294c:	a6 dd       	rcall	.-1204   	; 0x249a <lcd_clrscr>
	lcd_clrscr ();
    294e:	83 e4       	ldi	r24, 0x43	; 67
    2950:	9f dd       	rcall	.-1218   	; 0x2490 <lcd_goto>
	lcd_goto(LCD_LINE1+3);
    2952:	85 ea       	ldi	r24, 0xA5	; 165
    2954:	92 e0       	ldi	r25, 0x02	; 2
	lcd_puts_P(prog_name);
    2956:	0e de       	rcall	.-996    	; 0x2574 <lcd_puts_P>
    2958:	8b e1       	ldi	r24, 0x1B	; 27
    295a:	9a dd       	rcall	.-1228   	; 0x2490 <lcd_goto>
	lcd_goto(LCD_LINE2+7);
    295c:	8e e7       	ldi	r24, 0x7E	; 126
    295e:	91 e1       	ldi	r25, 0x11	; 17
    2960:	09 de       	rcall	.-1006   	; 0x2574 <lcd_puts_P>
	lcd_puts_P(sw_version);
    2962:	78 94       	sei
    2964:	2f ef       	ldi	r18, 0xFF	; 255
    2966:	87 e9       	ldi	r24, 0x97	; 151
    2968:	9a e3       	ldi	r25, 0x3A	; 58
	sei();
    296a:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    296c:	80 40       	sbci	r24, 0x00	; 0
    296e:	90 40       	sbci	r25, 0x00	; 0
    2970:	e1 f7       	brne	.-8      	; 0x296a <main+0x5e>
    2972:	00 c0       	rjmp	.+0      	; 0x2974 <main+0x68>
    2974:	00 00       	nop
    2976:	0e 94 d4 33 	call	0x67a8	; 0x67a8 <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    297a:	8f dd       	rcall	.-1250   	; 0x249a <lcd_clrscr>
    297c:	f3 d9       	rcall	.-3098   	; 0x1d64 <module_StartPowerOn>
	lcd_clrscr ();
    297e:	8f ef       	ldi	r24, 0xFF	; 255
    2980:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>

	// TURN ON POWER

	module_StartPowerOn();
    2984:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
	MESSAGE_PIPE_HANDLING_ON
    2988:	8e ef       	ldi	r24, 0xFE	; 254
    298a:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>

	menuNotActive = TRUE;
    298e:	df ef       	ldi	r29, 0xFF	; 255
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2990:	20 91 f2 0b 	lds	r18, 0x0BF2	; 0x800bf2 <serESPRxInIndex>
    2994:	30 91 f3 0b 	lds	r19, 0x0BF3	; 0x800bf3 <serESPRxInIndex+0x1>
    while (1)
    {
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2998:	80 91 ed 0b 	lds	r24, 0x0BED	; 0x800bed <serESPRxOutIndex>
    299c:	90 91 ee 0b 	lds	r25, 0x0BEE	; 0x800bee <serESPRxOutIndex+0x1>
    29a0:	28 17       	cp	r18, r24
    29a2:	39 07       	cpc	r19, r25
    29a4:	79 f0       	breq	.+30     	; 0x29c4 <main+0xb8>
    29a6:	0e 94 33 34 	call	0x6866	; 0x6866 <serial3SER_ESPReadRx>
    29aa:	c8 2f       	mov	r28, r24
    29ac:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
			uint8_t esp_message = serial3SER_ESPReadRx();
    29b0:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    29b4:	8f e7       	ldi	r24, 0x7F	; 127
    29b6:	8c 0f       	add	r24, r28
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    29b8:	86 30       	cpi	r24, 0x06	; 6
    29ba:	20 f4       	brcc	.+8      	; 0x29c4 <main+0xb8>
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    29bc:	80 e8       	ldi	r24, 0x80	; 128
    29be:	8c 0f       	add	r24, r28
    29c0:	0e 94 0c 2a 	call	0x5418	; 0x5418 <message_push>
				// push message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    29c4:	0e 94 39 2a 	call	0x5472	; 0x5472 <message_status>
    29c8:	88 23       	and	r24, r24
    29ca:	09 f4       	brne	.+2      	; 0x29ce <main+0xc2>
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    29cc:	42 c0       	rjmp	.+132    	; 0x2a52 <main+0x146>
    29ce:	0e 94 20 2a 	call	0x5440	; 0x5440 <message_get>
    29d2:	c8 2f       	mov	r28, r24
    29d4:	86 38       	cpi	r24, 0x86	; 134
			uint8_t keyMessage = message_get();
    29d6:	61 f4       	brne	.+24     	; 0x29f0 <main+0xe4>
    29d8:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    29dc:	0e 94 f4 2f 	call	0x5fe8	; 0x5fe8 <midi_AllManualsOff>
				// PANIC BUTTON
				midiSendAllNotesOff();
    29e0:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <midi_resetRegisters>
				midi_AllManualsOff();
    29e4:	0e 94 8d 2a 	call	0x551a	; 0x551a <midi_CouplerReset>
				midi_resetRegisters();
    29e8:	8a e8       	ldi	r24, 0x8A	; 138
    29ea:	92 e0       	ldi	r25, 0x02	; 2
				midi_CouplerReset();
    29ec:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    29f0:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    29f4:	8f 3f       	cpi	r24, 0xFF	; 255
    29f6:	f1 f4       	brne	.+60     	; 0x2a34 <main+0x128>
			}
			if (menuNotActive == TRUE) {
    29f8:	8c 2f       	mov	r24, r28
    29fa:	8f 73       	andi	r24, 0x3F	; 63
    29fc:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    29fe:	61 f4       	brne	.+24     	; 0x2a18 <main+0x10c>
    2a00:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2a02:	70 e0       	ldi	r23, 0x00	; 0
    2a04:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	40 d7       	rcall	.+3712   	; 0x388a <menu_Init>
    2a0a:	0e 94 0a 24 	call	0x4814	; 0x4814 <menu_InitLCD>
    2a0e:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menu_InitLCD(); //display menu
    2a12:	80 e0       	ldi	r24, 0x00	; 0
					menuNotActive = FALSE; // notify that menu is displayed
    2a14:	fd d9       	rcall	.-3078   	; 0x1e10 <softKey_WantLong>
    2a16:	1d c0       	rjmp	.+58     	; 0x2a52 <main+0x146>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2a18:	9f ef       	ldi	r25, 0xFF	; 255
    2a1a:	98 0f       	add	r25, r24
    2a1c:	94 30       	cpi	r25, 0x04	; 4
    2a1e:	c8 f4       	brcc	.+50     	; 0x2a52 <main+0x146>
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2a20:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <softKey_MessageKey_ToSoftKeyNr>
    2a24:	6c 2f       	mov	r22, r28
    2a26:	0e 94 7f 29 	call	0x52fe	; 0x52fe <softKey_Execute>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2a2a:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2a2e:	0e 94 2b 29 	call	0x5256	; 0x5256 <softKeys_toLCD>
    2a32:	0f c0       	rjmp	.+30     	; 0x2a52 <main+0x146>
    2a34:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
					softKeys_toLCD();
    2a38:	81 11       	cpse	r24, r1
    2a3a:	06 c0       	rjmp	.+12     	; 0x2a48 <main+0x13c>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2a3c:	8c 2f       	mov	r24, r28
    2a3e:	0e 94 11 24 	call	0x4822	; 0x4822 <menu_ProcessMessage>
    2a42:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <main+0x146>
    2a48:	8d ef       	ldi	r24, 0xFD	; 253
    2a4a:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    2a4e:	0e 94 99 26 	call	0x4d32	; 0x4d32 <menu_ModuleTestExecute>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2a52:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2a56:	8f 3f       	cpi	r24, 0xFF	; 255
				}
			}
		}
		if (menuNotActive == TRUE) {
    2a58:	51 f4       	brne	.+20     	; 0x2a6e <main+0x162>
    2a5a:	df 3f       	cpi	r29, 0xFF	; 255
    2a5c:	49 f4       	brne	.+18     	; 0x2a70 <main+0x164>
    2a5e:	0e 94 58 23 	call	0x46b0	; 0x46b0 <menu_ClearAllDisp>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2a62:	0e 94 2b 29 	call	0x5256	; 0x5256 <softKeys_toLCD>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2a66:	8f ef       	ldi	r24, 0xFF	; 255
				softKeys_toLCD();
    2a68:	d3 d9       	rcall	.-3162   	; 0x1e10 <softKey_WantLong>
    2a6a:	d0 e0       	ldi	r29, 0x00	; 0
				softKey_WantLong(TRUE);
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <main+0x164>
    2a6e:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2a70:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2a74:	81 11       	cpse	r24, r1
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2a76:	09 c0       	rjmp	.+18     	; 0x2a8a <main+0x17e>
    2a78:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2a7c:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <menu_deleteMessage>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2a80:	8c 2f       	mov	r24, r28
				menu_deleteMessage();
    2a82:	06 dd       	rcall	.-1524   	; 0x2490 <lcd_goto>
    2a84:	8f ef       	ldi	r24, 0xFF	; 255
				lcd_goto(saveCursor);
    2a86:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    2a8a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2a8e:	81 11       	cpse	r24, r1
    2a90:	0a c0       	rjmp	.+20     	; 0x2aa6 <main+0x19a>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2a92:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2a96:	88 23       	and	r24, r24
    2a98:	19 f0       	breq	.+6      	; 0x2aa0 <main+0x194>
			if (menu_TestModulePattern != 0){
    2a9a:	0e 94 99 26 	call	0x4d32	; 0x4d32 <menu_ModuleTestExecute>
    2a9e:	03 c0       	rjmp	.+6      	; 0x2aa6 <main+0x19a>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2aa6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
    2aaa:	81 11       	cpse	r24, r1
			}
		}

		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    2aac:	1a c0       	rjmp	.+52     	; 0x2ae2 <main+0x1d6>
    2aae:	6a d9       	rcall	.-3372   	; 0x1d84 <module_PowerControl>
    2ab0:	0e 94 cb 29 	call	0x5396	; 0x5396 <menu_showPowerState>
			module_PowerControl();
    2ab4:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			menu_showPowerState();
			if (menuNotActive == TRUE) {
    2ab8:	8f 3f       	cpi	r24, 0xFF	; 255
    2aba:	99 f4       	brne	.+38     	; 0x2ae2 <main+0x1d6>
    2abc:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2ac0:	84 e1       	ldi	r24, 0x14	; 20
    2ac2:	e6 dc       	rcall	.-1588   	; 0x2490 <lcd_goto>
				lcd_goto(LCD_LINE2);
    2ac4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	21 f4       	brne	.+8      	; 0x2ad4 <main+0x1c8>
    2acc:	83 e9       	ldi	r24, 0x93	; 147
    2ace:	92 e0       	ldi	r25, 0x02	; 2
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2ad0:	51 dd       	rcall	.-1374   	; 0x2574 <lcd_puts_P>
    2ad2:	05 c0       	rjmp	.+10     	; 0x2ade <main+0x1d2>
    2ad4:	82 31       	cpi	r24, 0x12	; 18
    2ad6:	19 f4       	brne	.+6      	; 0x2ade <main+0x1d2>
    2ad8:	84 e1       	ldi	r24, 0x14	; 20
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2ada:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2ade:	8c 2f       	mov	r24, r28
    2ae0:	d7 dc       	rcall	.-1618   	; 0x2490 <lcd_goto>
				}
				lcd_goto(saveCursor);
    2ae2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
    2ae6:	9f e7       	ldi	r25, 0x7F	; 127
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2ae8:	98 0f       	add	r25, r24
    2aea:	96 30       	cpi	r25, 0x06	; 6
    2aec:	10 f0       	brcs	.+4      	; 0x2af2 <main+0x1e6>
    2aee:	8e 3f       	cpi	r24, 0xFE	; 254
    2af0:	09 f5       	brne	.+66     	; 0x2b34 <main+0x228>
    2af2:	80 91 07 10 	lds	r24, 0x1007	; 0x801007 <lcd_cursorIsOn>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2af6:	8f 3f       	cpi	r24, 0xFF	; 255
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2af8:	31 f4       	brne	.+12     	; 0x2b06 <main+0x1fa>
    2afa:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2afe:	dc dc       	rcall	.-1608   	; 0x24b8 <getCursorFromLCDRAMcursor>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2b00:	0e 94 fd 33 	call	0x67fa	; 0x67fa <serial3SER_ESPSend>
    2b04:	03 c0       	rjmp	.+6      	; 0x2b0c <main+0x200>
    2b06:	8f e7       	ldi	r24, 0x7F	; 127
    2b08:	0e 94 fd 33 	call	0x67fa	; 0x67fa <serial3SER_ESPSend>
    2b0c:	81 e8       	ldi	r24, 0x81	; 129
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2b0e:	0e 94 fd 33 	call	0x67fa	; 0x67fa <serial3SER_ESPSend>
    2b12:	c0 e0       	ldi	r28, 0x00	; 0
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2b14:	e8 e5       	ldi	r30, 0x58	; 88
    2b16:	f3 e0       	ldi	r31, 0x03	; 3
    2b18:	08 c0       	rjmp	.+16     	; 0x2b2a <main+0x21e>
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2b1a:	8f 01       	movw	r16, r30
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2b1c:	0f 5f       	subi	r16, 0xFF	; 255
    2b1e:	1f 4f       	sbci	r17, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2b20:	80 81       	ld	r24, Z
				serial3SER_ESPSend(*pChar++);
    2b22:	0e 94 fd 33 	call	0x67fa	; 0x67fa <serial3SER_ESPSend>
    2b26:	cf 5f       	subi	r28, 0xFF	; 255
    2b28:	f8 01       	movw	r30, r16
    2b2a:	c0 35       	cpi	r28, 0x50	; 80
    2b2c:	b0 f3       	brcs	.-20     	; 0x2b1a <main+0x20e>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2b2e:	80 e8       	ldi	r24, 0x80	; 128
				serial3SER_ESPSend(*pChar++);
    2b30:	0e 94 fd 33 	call	0x67fa	; 0x67fa <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2b3a:	0e 94 0b 32 	call	0x6416	; 0x6416 <midi_CheckTxActiveSense>
    2b3e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2b42:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense

		// ------------------------ TOP STATUS LINE --------------------------
		uint8_t oldcursor = lcd_cursorPos;
    2b46:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
		if (midiLastInNote != MIDI_NOTE_NONE){
    2b4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2b4c:	91 f1       	breq	.+100    	; 0x2bb2 <main+0x2a6>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2b50:	9f dc       	rcall	.-1730   	; 0x2490 <lcd_goto>
    2b52:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
			if (midiLastInManual == MANUAL_NONE) {
    2b56:	8f 3f       	cpi	r24, 0xFF	; 255
    2b58:	69 f4       	brne	.+26     	; 0x2b74 <main+0x268>
    2b5a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
				// there was no manual assigned to midi in note
				// cc?nnn
				lcd_ChannelOut(midiLastInChannel);
    2b5e:	0e 94 da 36 	call	0x6db4	; 0x6db4 <lcd_ChannelOut>
    2b62:	8f e3       	ldi	r24, 0x3F	; 63
				lcd_putc('?');
    2b64:	bf dc       	rcall	.-1666   	; 0x24e4 <lcd_putc>
    2b66:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				lcd_noteOut(midiLastInNote);
    2b6a:	0e 94 89 36 	call	0x6d12	; 0x6d12 <lcd_noteOut>
    2b6e:	80 e2       	ldi	r24, 0x20	; 32
				lcd_putc(' ');
    2b70:	b9 dc       	rcall	.-1678   	; 0x24e4 <lcd_putc>
    2b72:	0c c0       	rjmp	.+24     	; 0x2b8c <main+0x280>
    2b74:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
			} else {
				// midi input to assigned manual
				// nnn>m
				lcd_noteOut(midiLastInNote);
    2b78:	0e 94 89 36 	call	0x6d12	; 0x6d12 <lcd_noteOut>
    2b7c:	8e e7       	ldi	r24, 0x7E	; 126
    2b7e:	b2 dc       	rcall	.-1692   	; 0x24e4 <lcd_putc>
				lcd_putc(MENU_MIDI_IO_SIGN);
    2b80:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
    2b84:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <lcd_ManualOutDec>
				lcd_ManualOutDec(midiLastInManual);
    2b88:	80 e2       	ldi	r24, 0x20	; 32
    2b8a:	ac dc       	rcall	.-1704   	; 0x24e4 <lcd_putc>
    2b8c:	8c 2f       	mov	r24, r28
				lcd_putc(' ');
    2b8e:	80 dc       	rcall	.-1792   	; 0x2490 <lcd_goto>
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
			}
			lcd_goto(oldcursor);
    2b96:	9f b7       	in	r25, 0x3f	; 63
			midiLastInNote = MIDI_NOTE_NONE;
    2b98:	f8 94       	cli
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	06 c0       	rjmp	.+12     	; 0x2baa <main+0x29e>
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2b9e:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ba0:	f2 e0       	ldi	r31, 0x02	; 2
    2ba2:	82 e3       	ldi	r24, 0x32	; 50
    2ba4:	80 87       	std	Z+8, r24	; 0x08
    2ba6:	11 86       	std	Z+9, r1	; 0x09
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	81 11       	cpse	r24, r1
    2bac:	f8 cf       	rjmp	.-16     	; 0x2b9e <main+0x292>
    2bae:	9f bf       	out	0x3f, r25	; 63
    2bb0:	2c c0       	rjmp	.+88     	; 0x2c0a <main+0x2fe>
    2bb2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    2bb6:	8f 3f       	cpi	r24, 0xFF	; 255
		} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2bb8:	d9 f0       	breq	.+54     	; 0x2bf0 <main+0x2e4>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	69 dc       	rcall	.-1838   	; 0x2490 <lcd_goto>
    2bbe:	80 e7       	ldi	r24, 0x70	; 112
			// no midi not but a program change
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2bc0:	91 dc       	rcall	.-1758   	; 0x24e4 <lcd_putc>
    2bc2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			lcd_putc('p');
    2bc6:	0e 94 42 35 	call	0x6a84	; 0x6a84 <lcd_dec2out>
    2bca:	8e e7       	ldi	r24, 0x7E	; 126
			lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2bcc:	8b dc       	rcall	.-1770   	; 0x24e4 <lcd_putc>
    2bce:	8f ef       	ldi	r24, 0xFF	; 255
    2bd0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2bd4:	9f b7       	in	r25, 0x3f	; 63
			midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2bd6:	f8 94       	cli
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	06 c0       	rjmp	.+12     	; 0x2be8 <main+0x2dc>
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2bdc:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bde:	f2 e0       	ldi	r31, 0x02	; 2
    2be0:	82 e3       	ldi	r24, 0x32	; 50
    2be2:	80 87       	std	Z+8, r24	; 0x08
    2be4:	11 86       	std	Z+9, r1	; 0x09
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	81 11       	cpse	r24, r1
    2bea:	f8 cf       	rjmp	.-16     	; 0x2bdc <main+0x2d0>
    2bec:	9f bf       	out	0x3f, r25	; 63
    2bee:	0d c0       	rjmp	.+26     	; 0x2c0a <main+0x2fe>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bf0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
		} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	09 c0       	rjmp	.+18     	; 0x2c0a <main+0x2fe>
    2bf8:	4b dc       	rcall	.-1898   	; 0x2490 <lcd_goto>
			// timer for showing note has elapsed
			// removed or about every 2.5 second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2bfa:	86 e0       	ldi	r24, 0x06	; 6
    2bfc:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
			lcd_blank(6);
    2c00:	8c 2f       	mov	r24, r28
    2c02:	46 dc       	rcall	.-1908   	; 0x2490 <lcd_goto>
			lcd_goto(oldcursor);
    2c04:	8f ef       	ldi	r24, 0xFF	; 255
    2c06:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2c0a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
    2c0e:	8f 3f       	cpi	r24, 0xFF	; 255
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
    2c10:	f9 f0       	breq	.+62     	; 0x2c50 <main+0x344>
    2c12:	8f e0       	ldi	r24, 0x0F	; 15
    2c14:	3d dc       	rcall	.-1926   	; 0x2490 <lcd_goto>
    2c16:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
			// there is a midi in note to be displayed in status
			// m>nnn
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2c1a:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <lcd_ManualOutDec>
			lcd_ManualOutDec(midiLastOutManual);
    2c1e:	8e e7       	ldi	r24, 0x7E	; 126
    2c20:	61 dc       	rcall	.-1854   	; 0x24e4 <lcd_putc>
    2c22:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
			lcd_putc(MENU_MIDI_IO_SIGN);
    2c26:	0e 94 89 36 	call	0x6d12	; 0x6d12 <lcd_noteOut>
			lcd_noteOut(midiLastOutNote);
    2c2a:	8c 2f       	mov	r24, r28
    2c2c:	31 dc       	rcall	.-1950   	; 0x2490 <lcd_goto>
    2c2e:	8f ef       	ldi	r24, 0xFF	; 255
			lcd_goto(oldcursor);
    2c30:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
    2c34:	9f b7       	in	r25, 0x3f	; 63
			midiLastOutNote = MIDI_NOTE_NONE;
    2c36:	f8 94       	cli
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	06 c0       	rjmp	.+12     	; 0x2c48 <main+0x33c>
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2c3c:	ef e2       	ldi	r30, 0x2F	; 47
    2c3e:	f2 e0       	ldi	r31, 0x02	; 2
    2c40:	82 e3       	ldi	r24, 0x32	; 50
    2c42:	82 87       	std	Z+10, r24	; 0x0a
    2c44:	13 86       	std	Z+11, r1	; 0x0b
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	81 11       	cpse	r24, r1
    2c4a:	f8 cf       	rjmp	.-16     	; 0x2c3c <main+0x330>
    2c4c:	9f bf       	out	0x3f, r25	; 63
    2c4e:	38 c0       	rjmp	.+112    	; 0x2cc0 <main+0x3b4>
    __asm__ volatile ("" ::: "memory");
    2c50:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
		} else if (midi_RegisterChanged != REGISTER_NONE) {
    2c54:	8f 3f       	cpi	r24, 0xFF	; 255
    2c56:	31 f1       	breq	.+76     	; 0x2ca4 <main+0x398>
    2c58:	8f e0       	ldi	r24, 0x0F	; 15
			// register change has top priority in display so it is processed later (!) and will overwrite previos note display
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2c5a:	1a dc       	rcall	.-1996   	; 0x2490 <lcd_goto>
    2c5c:	82 e5       	ldi	r24, 0x52	; 82
    2c5e:	42 dc       	rcall	.-1916   	; 0x24e4 <lcd_putc>
			lcd_putc('R');
    2c60:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
    2c64:	8f 77       	andi	r24, 0x7F	; 127
			lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2c66:	0e 94 42 35 	call	0x6a84	; 0x6a84 <lcd_dec2out>
    2c6a:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
			// V 0.60 changed: down = Register ON!
			lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2c6e:	88 23       	and	r24, r24
    2c70:	14 f0       	brlt	.+4      	; 0x2c76 <main+0x36a>
    2c72:	88 e0       	ldi	r24, 0x08	; 8
    2c74:	01 c0       	rjmp	.+2      	; 0x2c78 <main+0x36c>
    2c76:	89 e0       	ldi	r24, 0x09	; 9
    2c78:	35 dc       	rcall	.-1942   	; 0x24e4 <lcd_putc>
    2c7a:	80 e2       	ldi	r24, 0x20	; 32
    2c7c:	33 dc       	rcall	.-1946   	; 0x24e4 <lcd_putc>
			lcd_putc(' ');
    2c7e:	8c 2f       	mov	r24, r28
    2c80:	07 dc       	rcall	.-2034   	; 0x2490 <lcd_goto>
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
			lcd_goto(oldcursor);
    2c84:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
    2c88:	9f b7       	in	r25, 0x3f	; 63
			midi_RegisterChanged = REGISTER_NONE;
    2c8a:	f8 94       	cli
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	06 c0       	rjmp	.+12     	; 0x2c9c <main+0x390>
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2c90:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c92:	f2 e0       	ldi	r31, 0x02	; 2
    2c94:	82 e3       	ldi	r24, 0x32	; 50
    2c96:	82 87       	std	Z+10, r24	; 0x0a
    2c98:	13 86       	std	Z+11, r1	; 0x0b
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	81 11       	cpse	r24, r1
    2c9e:	f8 cf       	rjmp	.-16     	; 0x2c90 <main+0x384>
    2ca0:	9f bf       	out	0x3f, r25	; 63
    2ca2:	0e c0       	rjmp	.+28     	; 0x2cc0 <main+0x3b4>
    2ca4:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ca8:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    2caa:	0a c0       	rjmp	.+20     	; 0x2cc0 <main+0x3b4>
		} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2cac:	8f e0       	ldi	r24, 0x0F	; 15
    2cae:	f0 db       	rcall	.-2080   	; 0x2490 <lcd_goto>
    2cb0:	85 e0       	ldi	r24, 0x05	; 5
    2cb2:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
			// timer for showing note has elapsed
			// removed V0.59: or about every second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2cb6:	8c 2f       	mov	r24, r28
    2cb8:	eb db       	rcall	.-2090   	; 0x2490 <lcd_goto>
			lcd_blank(5);
    2cba:	8f ef       	ldi	r24, 0xFF	; 255
    2cbc:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
			lcd_goto(oldcursor);
    2cc0:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
    2cc4:	8f 3f       	cpi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2cc6:	09 f0       	breq	.+2      	; 0x2cca <main+0x3be>
    2cc8:	7e c0       	rjmp	.+252    	; 0x2dc6 <main+0x4ba>
    2cca:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2cce:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2cd2:	c0 91 07 10 	lds	r28, 0x1007	; 0x801007 <lcd_cursorIsOn>
			time_UpTimeUpdated = FALSE;
    2cd6:	cf 3f       	cpi	r28, 0xFF	; 255
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2cd8:	11 f4       	brne	.+4      	; 0x2cde <main+0x3d2>
    2cda:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <lcd_cursoroff>
			uint8_t oldBlink = lcd_cursorIsOn;
			if (oldBlink == TRUE) {
    2cde:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
				lcd_cursoroff();
    2ce2:	88 23       	and	r24, r24
    2ce4:	59 f0       	breq	.+22     	; 0x2cfc <main+0x3f0>
			}
			char separator;
			if (*pTime == 0) {
    2ce6:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
    2cea:	80 fd       	sbrc	r24, 0
    2cec:	0e c0       	rjmp	.+28     	; 0x2d0a <main+0x3fe>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2cee:	0f 2e       	mov	r0, r31
    2cf0:	fa e3       	ldi	r31, 0x3A	; 58
    2cf2:	ef 2e       	mov	r14, r31
				// when displaying hr:min blink ":"
				separator = ':';
    2cf4:	f0 2d       	mov	r31, r0
    2cf6:	04 e4       	ldi	r16, 0x44	; 68
    2cf8:	12 e0       	ldi	r17, 0x02	; 2
    2cfa:	0c c0       	rjmp	.+24     	; 0x2d14 <main+0x408>

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2cfc:	0f 2e       	mov	r0, r31
    2cfe:	fa e3       	ldi	r31, 0x3A	; 58
    2d00:	ef 2e       	mov	r14, r31
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2d02:	f0 2d       	mov	r31, r0
    2d04:	03 e4       	ldi	r16, 0x43	; 67
    2d06:	12 e0       	ldi	r17, 0x02	; 2
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2d08:	05 c0       	rjmp	.+10     	; 0x2d14 <main+0x408>
    2d0a:	68 94       	set
    2d0c:	ee 24       	eor	r14, r14
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2d0e:	e5 f8       	bld	r14, 5
    2d10:	04 e4       	ldi	r16, 0x44	; 68
    2d12:	12 e0       	ldi	r17, 0x02	; 2

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2d14:	87 e0       	ldi	r24, 0x07	; 7
    2d16:	bc db       	rcall	.-2184   	; 0x2490 <lcd_goto>
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2d18:	f8 01       	movw	r30, r16
    2d1a:	80 81       	ld	r24, Z
			lcd_dec2out(*(pTime--));
    2d1c:	0e 94 42 35 	call	0x6a84	; 0x6a84 <lcd_dec2out>
    2d20:	8e 2d       	mov	r24, r14
    2d22:	e0 db       	rcall	.-2112   	; 0x24e4 <lcd_putc>
			lcd_putc(separator);
    2d24:	f8 01       	movw	r30, r16
    2d26:	31 97       	sbiw	r30, 0x01	; 1
			lcd_dec2out(*pTime);
    2d28:	80 81       	ld	r24, Z
    2d2a:	0e 94 42 35 	call	0x6a84	; 0x6a84 <lcd_dec2out>
    2d2e:	40 91 7e 0c 	lds	r20, 0x0C7E	; 0x800c7e <midiRxOvflCount>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2d32:	44 23       	and	r20, r20
			if (ovflCount > 0){
    2d34:	31 f0       	breq	.+12     	; 0x2d42 <main+0x436>
    2d36:	50 e0       	ldi	r21, 0x00	; 0
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	d1 dd       	rcall	.-1118   	; 0x28e0 <log_putError>
    2d3e:	10 92 7e 0c 	sts	0x0C7E, r1	; 0x800c7e <midiRxOvflCount>
				midiRxOvflCount = 0;
    2d42:	40 91 83 0d 	lds	r20, 0x0D83	; 0x800d83 <midiTxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2d46:	44 23       	and	r20, r20
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <main+0x44a>
			if (ovflCount > 0){
    2d4a:	50 e0       	ldi	r21, 0x00	; 0
    2d4c:	61 e0       	ldi	r22, 0x01	; 1
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	c7 dd       	rcall	.-1138   	; 0x28e0 <log_putError>
    2d52:	10 92 83 0d 	sts	0x0D83, r1	; 0x800d83 <midiTxOvflCount>
    2d56:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				midiTxOvflCount = 0;
    2d5a:	84 ff       	sbrs	r24, 4
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2d5c:	02 c0       	rjmp	.+4      	; 0x2d62 <main+0x456>
    2d5e:	80 e2       	ldi	r24, 0x20	; 32
    2d60:	01 c0       	rjmp	.+2      	; 0x2d64 <main+0x458>
    2d62:	89 e0       	ldi	r24, 0x09	; 9
    2d64:	bf db       	rcall	.-2178   	; 0x24e4 <lcd_putc>
    2d66:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
    2d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d6c:	11 f4       	brne	.+4      	; 0x2d72 <main+0x466>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2d6e:	85 e4       	ldi	r24, 0x45	; 69
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <main+0x468>
    2d72:	80 e2       	ldi	r24, 0x20	; 32
    2d74:	b7 db       	rcall	.-2194   	; 0x24e4 <lcd_putc>
    2d76:	8f 2d       	mov	r24, r15
    2d78:	8b db       	rcall	.-2282   	; 0x2490 <lcd_goto>
    2d7a:	cf 3f       	cpi	r28, 0xFF	; 255
    2d7c:	11 f4       	brne	.+4      	; 0x2d82 <main+0x476>
    2d7e:	0e 94 20 37 	call	0x6e40	; 0x6e40 <lcd_cursosblink>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    2d82:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			if (oldBlink == TRUE) {
    2d86:	8f 3f       	cpi	r24, 0xFF	; 255
				lcd_cursosblink();
    2d88:	69 f4       	brne	.+26     	; 0x2da4 <main+0x498>
    2d8a:	9f b7       	in	r25, 0x3f	; 63
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    2d8c:	f8 94       	cli
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	06 c0       	rjmp	.+12     	; 0x2d9e <main+0x492>
    2d92:	ef e2       	ldi	r30, 0x2F	; 47
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2d94:	f2 e0       	ldi	r31, 0x02	; 2
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d96:	8d e7       	ldi	r24, 0x7D	; 125
    2d98:	80 87       	std	Z+8, r24	; 0x08
    2d9a:	11 86       	std	Z+9, r1	; 0x09
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	81 11       	cpse	r24, r1
    2da0:	f8 cf       	rjmp	.-16     	; 0x2d92 <main+0x486>
    2da2:	9f bf       	out	0x3f, r25	; 63
    2da4:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2da8:	8f 3f       	cpi	r24, 0xFF	; 255
    2daa:	69 f4       	brne	.+26     	; 0x2dc6 <main+0x4ba>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dac:	9f b7       	in	r25, 0x3f	; 63
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    2dae:	f8 94       	cli
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	06 c0       	rjmp	.+12     	; 0x2dc0 <main+0x4b4>
    2db4:	ef e2       	ldi	r30, 0x2F	; 47
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2db6:	f2 e0       	ldi	r31, 0x02	; 2
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2db8:	8d e7       	ldi	r24, 0x7D	; 125
    2dba:	82 87       	std	Z+10, r24	; 0x0a
    2dbc:	13 86       	std	Z+11, r1	; 0x0b
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	81 11       	cpse	r24, r1
    2dc2:	f8 cf       	rjmp	.-16     	; 0x2db4 <main+0x4a8>
    2dc4:	9f bf       	out	0x3f, r25	; 63
    2dc6:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    2dca:	8f 3f       	cpi	r24, 0xFF	; 255
    2dcc:	39 f4       	brne	.+14     	; 0x2ddc <main+0x4d0>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dce:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	50 e0       	ldi	r21, 0x00	; 0
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    2dd8:	84 e0       	ldi	r24, 0x04	; 4
    2dda:	82 dd       	rcall	.-1276   	; 0x28e0 <log_putError>
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    2ddc:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <midiRxInIndex>
    2de0:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <midiRxOutIndex>
    2de4:	98 17       	cp	r25, r24
    2de6:	21 f0       	breq	.+8      	; 0x2df0 <main+0x4e4>
		}

		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    2de8:	0e 94 70 32 	call	0x64e0	; 0x64e0 <serial1MIDIReadRx>
    2dec:	0e 94 87 30 	call	0x610e	; 0x610e <midiIn_Process>
    2df0:	0e 94 83 2a 	call	0x5506	; 0x5506 <pipeMsgStatus>
			midiIn_Process(serial1MIDIReadRx());
    2df4:	8f 3f       	cpi	r24, 0xFF	; 255
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <main+0x4ee>
    2df8:	cb cd       	rjmp	.-1130   	; 0x2990 <main+0x84>
    2dfa:	0e 94 6e 2a 	call	0x54dc	; 0x54dc <pipeMsgGet>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    2dfe:	0e 94 1b 31 	call	0x6236	; 0x6236 <midiKeyPress_Process>
    2e02:	c6 cd       	rjmp	.-1140   	; 0x2990 <main+0x84>

00002e04 <menu_enterWriteModule>:
    2e04:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
			midiKeyPress_Process(pipeMsgGet());
    2e08:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
    2e0c:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    2e10:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    2e1c:	02 c0       	rjmp	.+4      	; 0x2e22 <menu_enterWriteModule+0x1e>
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	0a 94       	dec	r0
    2e24:	e2 f7       	brpl	.-8      	; 0x2e1e <menu_enterWriteModule+0x1a>
    2e26:	48 2f       	mov	r20, r24
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	e1 e4       	ldi	r30, 0x41	; 65
    2e2c:	f3 e0       	ldi	r31, 0x03	; 3
    2e2e:	22 c0       	rjmp	.+68     	; 0x2e74 <menu_enterWriteModule+0x70>
    2e30:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    2e34:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    2e38:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    2e3c:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    2e40:	88 0f       	add	r24, r24
    2e42:	99 1f       	adc	r25, r25
    2e44:	aa 1f       	adc	r26, r26
    2e46:	bb 1f       	adc	r27, r27
    2e48:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    2e4c:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    2e50:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    2e54:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    2e58:	21 81       	ldd	r18, Z+1	; 0x01
    2e5a:	24 23       	and	r18, r20
    2e5c:	49 f0       	breq	.+18     	; 0x2e70 <menu_enterWriteModule+0x6c>
    2e5e:	81 60       	ori	r24, 0x01	; 1
    2e60:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    2e64:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    2e68:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    2e6c:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    2e70:	38 97       	sbiw	r30, 0x08	; 8
    2e72:	3f 5f       	subi	r19, 0xFF	; 255
    2e74:	30 32       	cpi	r19, 0x20	; 32
    2e76:	e0 f2       	brcs	.-72     	; 0x2e30 <menu_enterWriteModule+0x2c>
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	08 95       	ret

00002e7c <menu_exitWriteModule>:
    2e7c:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    2e80:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    2e84:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    2e88:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    2e8c:	85 30       	cpi	r24, 0x05	; 5
    2e8e:	09 f5       	brne	.+66     	; 0x2ed2 <menu_exitWriteModule+0x56>
    2e90:	a1 e0       	ldi	r26, 0x01	; 1
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <menu_exitWriteModule+0x22>
    2e9a:	aa 0f       	add	r26, r26
    2e9c:	bb 1f       	adc	r27, r27
    2e9e:	0a 94       	dec	r0
    2ea0:	e2 f7       	brpl	.-8      	; 0x2e9a <menu_exitWriteModule+0x1e>
    2ea2:	3a 2f       	mov	r19, r26
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	e1 e4       	ldi	r30, 0x41	; 65
    2ea8:	f3 e0       	ldi	r31, 0x03	; 3
    2eaa:	11 c0       	rjmp	.+34     	; 0x2ece <menu_exitWriteModule+0x52>
    2eac:	77 23       	and	r23, r23
    2eae:	24 f4       	brge	.+8      	; 0x2eb8 <menu_exitWriteModule+0x3c>
    2eb0:	81 81       	ldd	r24, Z+1	; 0x01
    2eb2:	83 2b       	or	r24, r19
    2eb4:	81 83       	std	Z+1, r24	; 0x01
    2eb6:	05 c0       	rjmp	.+10     	; 0x2ec2 <menu_exitWriteModule+0x46>
    2eb8:	21 81       	ldd	r18, Z+1	; 0x01
    2eba:	8a 2f       	mov	r24, r26
    2ebc:	80 95       	com	r24
    2ebe:	82 23       	and	r24, r18
    2ec0:	81 83       	std	Z+1, r24	; 0x01
    2ec2:	44 0f       	add	r20, r20
    2ec4:	55 1f       	adc	r21, r21
    2ec6:	66 1f       	adc	r22, r22
    2ec8:	77 1f       	adc	r23, r23
    2eca:	38 97       	sbiw	r30, 0x08	; 8
    2ecc:	9f 5f       	subi	r25, 0xFF	; 255
    2ece:	90 32       	cpi	r25, 0x20	; 32
    2ed0:	68 f3       	brcs	.-38     	; 0x2eac <menu_exitWriteModule+0x30>
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	08 95       	ret

00002ed6 <menuOnEnterModSel>:
    2ed6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2eda:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2ede:	3e 96       	adiw	r30, 0x0e	; 14
    2ee0:	85 91       	lpm	r24, Z+
    2ee2:	95 91       	lpm	r25, Z+
    2ee4:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	08 95       	ret

00002eec <menuOnEnterMidiInCh>:
    2eec:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2ef0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2ef4:	3e 96       	adiw	r30, 0x0e	; 14
    2ef6:	85 91       	lpm	r24, Z+
    2ef8:	95 91       	lpm	r25, Z+
    2efa:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	08 95       	ret

00002f02 <menuOnEnterMidiInSec>:
    2f02:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2f06:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2f0a:	3e 96       	adiw	r30, 0x0e	; 14
    2f0c:	25 91       	lpm	r18, Z+
    2f0e:	35 91       	lpm	r19, Z+
    2f10:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    2f14:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    2f18:	8f 70       	andi	r24, 0x0F	; 15
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	23 70       	andi	r18, 0x03	; 3
    2f1e:	88 0f       	add	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	82 0f       	add	r24, r18
    2f28:	91 1d       	adc	r25, r1
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    2f36:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	08 95       	ret

00002f3e <menuOnEnterModManual>:
    2f3e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2f42:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2f46:	3e 96       	adiw	r30, 0x0e	; 14
    2f48:	85 91       	lpm	r24, Z+
    2f4a:	95 91       	lpm	r25, Z+
    2f4c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	08 95       	ret

00002f54 <menuOnEnterModSec>:
    2f54:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2f58:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2f5c:	3e 96       	adiw	r30, 0x0e	; 14
    2f5e:	85 91       	lpm	r24, Z+
    2f60:	95 91       	lpm	r25, Z+
    2f62:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    2f66:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    2f6a:	2f 70       	andi	r18, 0x0F	; 15
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	83 70       	andi	r24, 0x03	; 3
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	a9 01       	movw	r20, r18
    2f74:	44 0f       	add	r20, r20
    2f76:	55 1f       	adc	r21, r21
    2f78:	24 0f       	add	r18, r20
    2f7a:	35 1f       	adc	r19, r21
    2f7c:	22 0f       	add	r18, r18
    2f7e:	33 1f       	adc	r19, r19
    2f80:	22 0f       	add	r18, r18
    2f82:	33 1f       	adc	r19, r19
    2f84:	ac 01       	movw	r20, r24
    2f86:	44 0f       	add	r20, r20
    2f88:	55 1f       	adc	r21, r21
    2f8a:	84 0f       	add	r24, r20
    2f8c:	95 1f       	adc	r25, r21
    2f8e:	82 0f       	add	r24, r18
    2f90:	93 1f       	adc	r25, r19
    2f92:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    2f96:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	08 95       	ret

00002f9e <menuOnEnterModSecReg>:
    2f9e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2fa2:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2fa6:	3e 96       	adiw	r30, 0x0e	; 14
    2fa8:	85 91       	lpm	r24, Z+
    2faa:	95 91       	lpm	r25, Z+
    2fac:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    2fb0:	87 70       	andi	r24, 0x07	; 7
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	9c 01       	movw	r18, r24
    2fb6:	22 0f       	add	r18, r18
    2fb8:	33 1f       	adc	r19, r19
    2fba:	82 0f       	add	r24, r18
    2fbc:	93 1f       	adc	r25, r19
    2fbe:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    2fc2:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	08 95       	ret

00002fca <menuOnEnterKey>:
    2fca:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2fce:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2fd2:	3e 96       	adiw	r30, 0x0e	; 14
    2fd4:	85 91       	lpm	r24, Z+
    2fd6:	95 91       	lpm	r25, Z+
    2fd8:	84 30       	cpi	r24, 0x04	; 4
    2fda:	60 f4       	brcc	.+24     	; 0x2ff4 <menuOnEnterKey+0x2a>
    2fdc:	fc 01       	movw	r30, r24
    2fde:	ff 27       	eor	r31, r31
    2fe0:	ee 0f       	add	r30, r30
    2fe2:	ff 1f       	adc	r31, r31
    2fe4:	e6 54       	subi	r30, 0x46	; 70
    2fe6:	fa 4f       	sbci	r31, 0xFA	; 250
    2fe8:	80 81       	ld	r24, Z
    2fea:	91 81       	ldd	r25, Z+1	; 0x01
    2fec:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    2ff0:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	08 95       	ret

00002ff8 <menuOnExitMidiThrough>:
    2ff8:	0e 94 09 0c 	call	0x1812	; 0x1812 <eeprom_UpdateMidiThrough>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	08 95       	ret

00003000 <menuOnExitRegisterEdit>:
    3000:	1f 93       	push	r17
    3002:	cf 93       	push	r28
    3004:	df 93       	push	r29
    3006:	86 30       	cpi	r24, 0x06	; 6
    3008:	f1 f0       	breq	.+60     	; 0x3046 <menuOnExitRegisterEdit+0x46>
    300a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    300e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3012:	3e 96       	adiw	r30, 0x0e	; 14
    3014:	05 90       	lpm	r0, Z+
    3016:	f4 91       	lpm	r31, Z
    3018:	e0 2d       	mov	r30, r0
    301a:	cf 01       	movw	r24, r30
    301c:	8d 56       	subi	r24, 0x6D	; 109
    301e:	95 40       	sbci	r25, 0x05	; 5
    3020:	88 0f       	add	r24, r24
    3022:	88 0f       	add	r24, r24
    3024:	88 0f       	add	r24, r24
    3026:	d0 81       	ld	r29, Z
    3028:	c0 e0       	ldi	r28, 0x00	; 0
    302a:	0b c0       	rjmp	.+22     	; 0x3042 <menuOnExitRegisterEdit+0x42>
    302c:	11 e0       	ldi	r17, 0x01	; 1
    302e:	18 0f       	add	r17, r24
    3030:	6d 2f       	mov	r22, r29
    3032:	66 1f       	adc	r22, r22
    3034:	66 27       	eor	r22, r22
    3036:	66 1f       	adc	r22, r22
    3038:	0e 94 58 2c 	call	0x58b0	; 0x58b0 <register_onOff>
    303c:	dd 0f       	add	r29, r29
    303e:	cf 5f       	subi	r28, 0xFF	; 255
    3040:	81 2f       	mov	r24, r17
    3042:	c8 30       	cpi	r28, 0x08	; 8
    3044:	98 f3       	brcs	.-26     	; 0x302c <menuOnExitRegisterEdit+0x2c>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	08 95       	ret

00003050 <softKeyRegOff>:
    3050:	81 11       	cpse	r24, r1
    3052:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <midi_resetRegisters>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	08 95       	ret

0000305a <menuOnExitCoupler>:
    305a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    305e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3062:	3e 96       	adiw	r30, 0x0e	; 14
    3064:	85 91       	lpm	r24, Z+
    3066:	95 91       	lpm	r25, Z+
    3068:	8f 50       	subi	r24, 0x0F	; 15
    306a:	98 40       	sbci	r25, 0x08	; 8
    306c:	fc 01       	movw	r30, r24
    306e:	ff 27       	eor	r31, r31
    3070:	e1 5f       	subi	r30, 0xF1	; 241
    3072:	f7 4f       	sbci	r31, 0xF7	; 247
    3074:	20 81       	ld	r18, Z
    3076:	21 11       	cpse	r18, r1
    3078:	0e 94 99 2a 	call	0x5532	; 0x5532 <set_Coupler>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	08 95       	ret

00003080 <menuOnExitSaveProgram>:
    3080:	86 30       	cpi	r24, 0x06	; 6
    3082:	39 f0       	breq	.+14     	; 0x3092 <menuOnExitSaveProgram+0x12>
    3084:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3088:	80 34       	cpi	r24, 0x40	; 64
    308a:	18 f4       	brcc	.+6      	; 0x3092 <menuOnExitSaveProgram+0x12>
    308c:	6f ef       	ldi	r22, 0xFF	; 255
    308e:	0e 94 32 2d 	call	0x5a64	; 0x5a64 <register_toProgram>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	08 95       	ret

00003096 <menuOnExitKeys>:
    3096:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <eeprom_UpdateSoftkeys>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	08 95       	ret

0000309e <menu_readModule>:
    309e:	cf 92       	push	r12
    30a0:	df 92       	push	r13
    30a2:	ef 92       	push	r14
    30a4:	ff 92       	push	r15
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <menu_readModule+0x16>
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	0a 94       	dec	r0
    30b6:	e2 f7       	brpl	.-8      	; 0x30b0 <menu_readModule+0x12>
    30b8:	28 2f       	mov	r18, r24
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	e1 e4       	ldi	r30, 0x41	; 65
    30be:	f3 e0       	ldi	r31, 0x03	; 3
    30c0:	c1 2c       	mov	r12, r1
    30c2:	d1 2c       	mov	r13, r1
    30c4:	76 01       	movw	r14, r12
    30c6:	0b c0       	rjmp	.+22     	; 0x30de <menu_readModule+0x40>
    30c8:	cc 0c       	add	r12, r12
    30ca:	dd 1c       	adc	r13, r13
    30cc:	ee 1c       	adc	r14, r14
    30ce:	ff 1c       	adc	r15, r15
    30d0:	86 81       	ldd	r24, Z+6	; 0x06
    30d2:	82 23       	and	r24, r18
    30d4:	11 f0       	breq	.+4      	; 0x30da <menu_readModule+0x3c>
    30d6:	68 94       	set
    30d8:	c0 f8       	bld	r12, 0
    30da:	38 97       	sbiw	r30, 0x08	; 8
    30dc:	9f 5f       	subi	r25, 0xFF	; 255
    30de:	90 32       	cpi	r25, 0x20	; 32
    30e0:	98 f3       	brcs	.-26     	; 0x30c8 <menu_readModule+0x2a>
    30e2:	8e e1       	ldi	r24, 0x1E	; 30
    30e4:	d5 d9       	rcall	.-3158   	; 0x2490 <lcd_goto>
    30e6:	c0 92 09 10 	sts	0x1009, r12	; 0x801009 <editLong>
    30ea:	d0 92 0a 10 	sts	0x100A, r13	; 0x80100a <editLong+0x1>
    30ee:	e0 92 0b 10 	sts	0x100B, r14	; 0x80100b <editLong+0x2>
    30f2:	f0 92 0c 10 	sts	0x100C, r15	; 0x80100c <editLong+0x3>
    30f6:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <lcd_longout>
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	df 90       	pop	r13
    3102:	cf 90       	pop	r12
    3104:	08 95       	ret

00003106 <menu_testModule>:
    3106:	8e e1       	ldi	r24, 0x1E	; 30
    3108:	c3 d9       	rcall	.-3194   	; 0x2490 <lcd_goto>
    310a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    310e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <test_PipeModule>
    3112:	60 93 09 10 	sts	0x1009, r22	; 0x801009 <editLong>
    3116:	70 93 0a 10 	sts	0x100A, r23	; 0x80100a <editLong+0x1>
    311a:	80 93 0b 10 	sts	0x100B, r24	; 0x80100b <editLong+0x2>
    311e:	90 93 0c 10 	sts	0x100C, r25	; 0x80100c <editLong+0x3>
    3122:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <lcd_longout>
    3126:	80 e0       	ldi	r24, 0x00	; 0
    3128:	08 95       	ret

0000312a <menuOnEnterTune>:
    312a:	cf 93       	push	r28
    312c:	8f 3f       	cpi	r24, 0xFF	; 255
    312e:	09 f0       	breq	.+2      	; 0x3132 <menuOnEnterTune+0x8>
    3130:	77 c0       	rjmp	.+238    	; 0x3220 <menuOnEnterTune+0xf6>
    3132:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.2911>
    3136:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.2912>
    313a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    313e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3142:	3e 96       	adiw	r30, 0x0e	; 14
    3144:	85 91       	lpm	r24, Z+
    3146:	95 91       	lpm	r25, Z+
    3148:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    314c:	84 30       	cpi	r24, 0x04	; 4
    314e:	10 f0       	brcs	.+4      	; 0x3154 <menuOnEnterTune+0x2a>
    3150:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	39 c0       	rjmp	.+114    	; 0x31ca <menuOnEnterTune+0xa0>
    3158:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	e2 2f       	mov	r30, r18
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	df 01       	movw	r26, r30
    3164:	aa 0f       	add	r26, r26
    3166:	bb 1f       	adc	r27, r27
    3168:	ad 01       	movw	r20, r26
    316a:	4e 0f       	add	r20, r30
    316c:	5f 1f       	adc	r21, r31
    316e:	dc 01       	movw	r26, r24
    3170:	aa 0f       	add	r26, r26
    3172:	bb 1f       	adc	r27, r27
    3174:	a8 0f       	add	r26, r24
    3176:	b9 1f       	adc	r27, r25
    3178:	aa 0f       	add	r26, r26
    317a:	bb 1f       	adc	r27, r27
    317c:	aa 0f       	add	r26, r26
    317e:	bb 1f       	adc	r27, r27
    3180:	a4 0f       	add	r26, r20
    3182:	b5 1f       	adc	r27, r21
    3184:	ae 5c       	subi	r26, 0xCE	; 206
    3186:	b6 4f       	sbci	r27, 0xF6	; 246
    3188:	3c 91       	ld	r19, X
    318a:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.2911>
    318e:	34 17       	cp	r19, r20
    3190:	10 f4       	brcc	.+4      	; 0x3196 <menuOnEnterTune+0x6c>
    3192:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.2911>
    3196:	af 01       	movw	r20, r30
    3198:	44 0f       	add	r20, r20
    319a:	55 1f       	adc	r21, r21
    319c:	e4 0f       	add	r30, r20
    319e:	f5 1f       	adc	r31, r21
    31a0:	ac 01       	movw	r20, r24
    31a2:	44 0f       	add	r20, r20
    31a4:	55 1f       	adc	r21, r21
    31a6:	84 0f       	add	r24, r20
    31a8:	95 1f       	adc	r25, r21
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	88 0f       	add	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	e8 0f       	add	r30, r24
    31b4:	f9 1f       	adc	r31, r25
    31b6:	ee 5c       	subi	r30, 0xCE	; 206
    31b8:	f6 4f       	sbci	r31, 0xF6	; 246
    31ba:	81 81       	ldd	r24, Z+1	; 0x01
    31bc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.2912>
    31c0:	98 17       	cp	r25, r24
    31c2:	10 f4       	brcc	.+4      	; 0x31c8 <menuOnEnterTune+0x9e>
    31c4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.2912>
    31c8:	2f 5f       	subi	r18, 0xFF	; 255
    31ca:	24 30       	cpi	r18, 0x04	; 4
    31cc:	28 f2       	brcs	.-118    	; 0x3158 <menuOnEnterTune+0x2e>
    31ce:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2911>
    31d2:	88 23       	and	r24, r24
    31d4:	4c f4       	brge	.+18     	; 0x31e8 <menuOnEnterTune+0xbe>
    31d6:	8e e1       	ldi	r24, 0x1E	; 30
    31d8:	5b d9       	rcall	.-3402   	; 0x2490 <lcd_goto>
    31da:	8c e7       	ldi	r24, 0x7C	; 124
    31dc:	93 e0       	ldi	r25, 0x03	; 3
    31de:	ca d9       	rcall	.-3180   	; 0x2574 <lcd_puts_P>
    31e0:	8f ef       	ldi	r24, 0xFF	; 255
    31e2:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    31e6:	04 c0       	rjmp	.+8      	; 0x31f0 <menuOnEnterTune+0xc6>
    31e8:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    31ec:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2913>
    31f0:	66 ea       	ldi	r22, 0xA6	; 166
    31f2:	71 e1       	ldi	r23, 0x11	; 17
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    31fa:	65 eb       	ldi	r22, 0xB5	; 181
    31fc:	71 e1       	ldi	r23, 0x11	; 17
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    3204:	6a eb       	ldi	r22, 0xBA	; 186
    3206:	71 e1       	ldi	r23, 0x11	; 17
    3208:	82 e0       	ldi	r24, 0x02	; 2
    320a:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    320e:	6c eb       	ldi	r22, 0xBC	; 188
    3210:	71 e1       	ldi	r23, 0x11	; 17
    3212:	83 e0       	ldi	r24, 0x03	; 3
    3214:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    3218:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
    321c:	cf ef       	ldi	r28, 0xFF	; 255
    321e:	71 c0       	rjmp	.+226    	; 0x3302 <menuOnEnterTune+0x1d8>
    3220:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3224:	6f 3f       	cpi	r22, 0xFF	; 255
    3226:	09 f4       	brne	.+2      	; 0x322a <menuOnEnterTune+0x100>
    3228:	61 c0       	rjmp	.+194    	; 0x32ec <menuOnEnterTune+0x1c2>
    322a:	81 30       	cpi	r24, 0x01	; 1
    322c:	d9 f4       	brne	.+54     	; 0x3264 <menuOnEnterTune+0x13a>
    322e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.2912>
    3232:	68 17       	cp	r22, r24
    3234:	08 f0       	brcs	.+2      	; 0x3238 <menuOnEnterTune+0x10e>
    3236:	5c c0       	rjmp	.+184    	; 0x32f0 <menuOnEnterTune+0x1c6>
    3238:	40 e0       	ldi	r20, 0x00	; 0
    323a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    323e:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <manual_NoteOnOff>
    3242:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3246:	6f 5f       	subi	r22, 0xFF	; 255
    3248:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    324c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2913>
    3250:	81 30       	cpi	r24, 0x01	; 1
    3252:	09 f0       	breq	.+2      	; 0x3256 <menuOnEnterTune+0x12c>
    3254:	4f c0       	rjmp	.+158    	; 0x32f4 <menuOnEnterTune+0x1ca>
    3256:	41 e0       	ldi	r20, 0x01	; 1
    3258:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    325c:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <manual_NoteOnOff>
    3260:	cf ef       	ldi	r28, 0xFF	; 255
    3262:	4f c0       	rjmp	.+158    	; 0x3302 <menuOnEnterTune+0x1d8>
    3264:	84 30       	cpi	r24, 0x04	; 4
    3266:	d1 f4       	brne	.+52     	; 0x329c <menuOnEnterTune+0x172>
    3268:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2911>
    326c:	86 17       	cp	r24, r22
    326e:	08 f0       	brcs	.+2      	; 0x3272 <menuOnEnterTune+0x148>
    3270:	43 c0       	rjmp	.+134    	; 0x32f8 <menuOnEnterTune+0x1ce>
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3278:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <manual_NoteOnOff>
    327c:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3280:	61 50       	subi	r22, 0x01	; 1
    3282:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3286:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2913>
    328a:	81 30       	cpi	r24, 0x01	; 1
    328c:	b9 f5       	brne	.+110    	; 0x32fc <menuOnEnterTune+0x1d2>
    328e:	41 e0       	ldi	r20, 0x01	; 1
    3290:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3294:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <manual_NoteOnOff>
    3298:	cf ef       	ldi	r28, 0xFF	; 255
    329a:	33 c0       	rjmp	.+102    	; 0x3302 <menuOnEnterTune+0x1d8>
    329c:	83 30       	cpi	r24, 0x03	; 3
    329e:	91 f4       	brne	.+36     	; 0x32c4 <menuOnEnterTune+0x19a>
    32a0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2913>
    32a4:	81 11       	cpse	r24, r1
    32a6:	04 c0       	rjmp	.+8      	; 0x32b0 <menuOnEnterTune+0x186>
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.2913>
    32ae:	02 c0       	rjmp	.+4      	; 0x32b4 <menuOnEnterTune+0x18a>
    32b0:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2913>
    32b4:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.2913>
    32b8:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    32bc:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <manual_NoteOnOff>
    32c0:	cf ef       	ldi	r28, 0xFF	; 255
    32c2:	1f c0       	rjmp	.+62     	; 0x3302 <menuOnEnterTune+0x1d8>
    32c4:	82 30       	cpi	r24, 0x02	; 2
    32c6:	11 f0       	breq	.+4      	; 0x32cc <menuOnEnterTune+0x1a2>
    32c8:	86 30       	cpi	r24, 0x06	; 6
    32ca:	39 f4       	brne	.+14     	; 0x32da <menuOnEnterTune+0x1b0>
    32cc:	40 e0       	ldi	r20, 0x00	; 0
    32ce:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    32d2:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <manual_NoteOnOff>
    32d6:	c0 e0       	ldi	r28, 0x00	; 0
    32d8:	14 c0       	rjmp	.+40     	; 0x3302 <menuOnEnterTune+0x1d8>
    32da:	85 30       	cpi	r24, 0x05	; 5
    32dc:	89 f4       	brne	.+34     	; 0x3300 <menuOnEnterTune+0x1d6>
    32de:	40 e0       	ldi	r20, 0x00	; 0
    32e0:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    32e4:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <manual_NoteOnOff>
    32e8:	c0 e0       	ldi	r28, 0x00	; 0
    32ea:	0b c0       	rjmp	.+22     	; 0x3302 <menuOnEnterTune+0x1d8>
    32ec:	c0 e0       	ldi	r28, 0x00	; 0
    32ee:	09 c0       	rjmp	.+18     	; 0x3302 <menuOnEnterTune+0x1d8>
    32f0:	cf ef       	ldi	r28, 0xFF	; 255
    32f2:	07 c0       	rjmp	.+14     	; 0x3302 <menuOnEnterTune+0x1d8>
    32f4:	cf ef       	ldi	r28, 0xFF	; 255
    32f6:	05 c0       	rjmp	.+10     	; 0x3302 <menuOnEnterTune+0x1d8>
    32f8:	cf ef       	ldi	r28, 0xFF	; 255
    32fa:	03 c0       	rjmp	.+6      	; 0x3302 <menuOnEnterTune+0x1d8>
    32fc:	cf ef       	ldi	r28, 0xFF	; 255
    32fe:	01 c0       	rjmp	.+2      	; 0x3302 <menuOnEnterTune+0x1d8>
    3300:	cf ef       	ldi	r28, 0xFF	; 255
    3302:	cf 3f       	cpi	r28, 0xFF	; 255
    3304:	59 f5       	brne	.+86     	; 0x335c <menuOnEnterTune+0x232>
    3306:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    330a:	8f 3f       	cpi	r24, 0xFF	; 255
    330c:	29 f1       	breq	.+74     	; 0x3358 <menuOnEnterTune+0x22e>
    330e:	8e e1       	ldi	r24, 0x1E	; 30
    3310:	bf d8       	rcall	.-3714   	; 0x2490 <lcd_goto>
    3312:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    3316:	0e 94 89 36 	call	0x6d12	; 0x6d12 <lcd_noteOut>
    331a:	80 e2       	ldi	r24, 0x20	; 32
    331c:	e3 d8       	rcall	.-3642   	; 0x24e4 <lcd_putc>
    331e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2913>
    3322:	81 11       	cpse	r24, r1
    3324:	07 c0       	rjmp	.+14     	; 0x3334 <menuOnEnterTune+0x20a>
    3326:	81 e6       	ldi	r24, 0x61	; 97
    3328:	dd d8       	rcall	.-3654   	; 0x24e4 <lcd_putc>
    332a:	85 e7       	ldi	r24, 0x75	; 117
    332c:	db d8       	rcall	.-3658   	; 0x24e4 <lcd_putc>
    332e:	83 e7       	ldi	r24, 0x73	; 115
    3330:	d9 d8       	rcall	.-3662   	; 0x24e4 <lcd_putc>
    3332:	06 c0       	rjmp	.+12     	; 0x3340 <menuOnEnterTune+0x216>
    3334:	85 e6       	ldi	r24, 0x65	; 101
    3336:	d6 d8       	rcall	.-3668   	; 0x24e4 <lcd_putc>
    3338:	89 e6       	ldi	r24, 0x69	; 105
    333a:	d4 d8       	rcall	.-3672   	; 0x24e4 <lcd_putc>
    333c:	8e e6       	ldi	r24, 0x6E	; 110
    333e:	d2 d8       	rcall	.-3676   	; 0x24e4 <lcd_putc>
    3340:	61 e0       	ldi	r22, 0x01	; 1
    3342:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2913>
    3346:	81 11       	cpse	r24, r1
    3348:	01 c0       	rjmp	.+2      	; 0x334c <menuOnEnterTune+0x222>
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <keylabel_statcheck>
    3352:	81 11       	cpse	r24, r1
    3354:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
    3358:	8e e1       	ldi	r24, 0x1E	; 30
    335a:	9a d8       	rcall	.-3788   	; 0x2490 <lcd_goto>
    335c:	8c 2f       	mov	r24, r28
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <menuOnExitMidiActiveSense>:
    3362:	0e 94 93 0b 	call	0x1726	; 0x1726 <eeprom_UpdateMidiOutMap>
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	08 95       	ret

0000336a <menuOnExitMidiOut>:
    336a:	0e 94 93 0b 	call	0x1726	; 0x1726 <eeprom_UpdateMidiOutMap>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	08 95       	ret

00003372 <menuOnExitMidiIn>:
    3372:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <eeprom_UpdateMidiInMap>
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	08 95       	ret

0000337a <menuOnExitManual>:
    337a:	0e 94 4f 0b 	call	0x169e	; 0x169e <eeprom_UpdateManualMap>
    337e:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <registers_CalcCount>
    3382:	0e 94 2b 0c 	call	0x1856	; 0x1856 <eeprom_UpdateReg>
    3386:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <Midi_updateManualRange>
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	08 95       	ret

0000338e <menuOnExitModules>:
    338e:	0e 94 c3 0b 	call	0x1786	; 0x1786 <eeprom_UpdateModules>
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	08 95       	ret

00003396 <menuOnEnterUSBprotokoll>:
    3396:	cf 93       	push	r28
    3398:	8f e5       	ldi	r24, 0x5F	; 95
    339a:	93 e0       	ldi	r25, 0x03	; 3
    339c:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    33a0:	04 d9       	rcall	.-3576   	; 0x25aa <log_count>
    33a2:	81 11       	cpse	r24, r1
    33a4:	17 c0       	rjmp	.+46     	; 0x33d4 <menuOnEnterUSBprotokoll+0x3e>
    33a6:	85 e6       	ldi	r24, 0x65	; 101
    33a8:	93 e0       	ldi	r25, 0x03	; 3
    33aa:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    33ae:	16 c0       	rjmp	.+44     	; 0x33dc <menuOnEnterUSBprotokoll+0x46>
    33b0:	6f ef       	ldi	r22, 0xFF	; 255
    33b2:	8c 2f       	mov	r24, r28
    33b4:	9b da       	rcall	.-2762   	; 0x28ec <log_getShortTextFromIndex>
    33b6:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    33ba:	8e ed       	ldi	r24, 0xDE	; 222
    33bc:	91 e1       	ldi	r25, 0x11	; 17
    33be:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    33c2:	8c 2f       	mov	r24, r28
    33c4:	39 d9       	rcall	.-3470   	; 0x2638 <log_getErrorText>
    33c6:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    33ca:	8e ed       	ldi	r24, 0xDE	; 222
    33cc:	91 e1       	ldi	r25, 0x11	; 17
    33ce:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    33d2:	8c 2f       	mov	r24, r28
    33d4:	cf ef       	ldi	r28, 0xFF	; 255
    33d6:	c8 0f       	add	r28, r24
    33d8:	81 11       	cpse	r24, r1
    33da:	ea cf       	rjmp	.-44     	; 0x33b0 <menuOnEnterUSBprotokoll+0x1a>
    33dc:	80 e0       	ldi	r24, 0x00	; 0
    33de:	cf 91       	pop	r28
    33e0:	08 95       	ret

000033e2 <menuOnExitUSBactive>:
    33e2:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <eeprom_UpdateUSB>
    33e6:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <serusb_Active>
    33ea:	8f 3f       	cpi	r24, 0xFF	; 255
    33ec:	61 f4       	brne	.+24     	; 0x3406 <menuOnExitUSBactive+0x24>
    33ee:	86 e4       	ldi	r24, 0x46	; 70
    33f0:	93 e0       	ldi	r25, 0x03	; 3
    33f2:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    33f6:	8e e7       	ldi	r24, 0x7E	; 126
    33f8:	91 e1       	ldi	r25, 0x11	; 17
    33fa:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    33fe:	8e ed       	ldi	r24, 0xDE	; 222
    3400:	91 e1       	ldi	r25, 0x11	; 17
    3402:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3406:	80 e0       	ldi	r24, 0x00	; 0
    3408:	08 95       	ret

0000340a <menuOnEnterUSBsendHW>:
    340a:	9f 92       	push	r9
    340c:	af 92       	push	r10
    340e:	bf 92       	push	r11
    3410:	cf 92       	push	r12
    3412:	df 92       	push	r13
    3414:	ef 92       	push	r14
    3416:	ff 92       	push	r15
    3418:	0f 93       	push	r16
    341a:	1f 93       	push	r17
    341c:	cf 93       	push	r28
    341e:	df 93       	push	r29
    3420:	8d e2       	ldi	r24, 0x2D	; 45
    3422:	93 e0       	ldi	r25, 0x03	; 3
    3424:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3428:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    342c:	8a e1       	ldi	r24, 0x1A	; 26
    342e:	93 e0       	ldi	r25, 0x03	; 3
    3430:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3434:	6d e0       	ldi	r22, 0x0D	; 13
    3436:	70 e1       	ldi	r23, 0x10	; 16
    3438:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
    343c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    3440:	22 e7       	ldi	r18, 0x72	; 114
    3442:	fc 01       	movw	r30, r24
    3444:	20 83       	st	Z, r18
    3446:	bc 01       	movw	r22, r24
    3448:	6e 5f       	subi	r22, 0xFE	; 254
    344a:	7f 4f       	sbci	r23, 0xFF	; 255
    344c:	20 e2       	ldi	r18, 0x20	; 32
    344e:	21 83       	std	Z+1, r18	; 0x01
    3450:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    3454:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    3458:	27 e7       	ldi	r18, 0x77	; 119
    345a:	fc 01       	movw	r30, r24
    345c:	20 83       	st	Z, r18
    345e:	8d e0       	ldi	r24, 0x0D	; 13
    3460:	90 e1       	ldi	r25, 0x10	; 16
    3462:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    3466:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    346a:	88 e0       	ldi	r24, 0x08	; 8
    346c:	93 e0       	ldi	r25, 0x03	; 3
    346e:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3472:	6d e0       	ldi	r22, 0x0D	; 13
    3474:	70 e1       	ldi	r23, 0x10	; 16
    3476:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    347a:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    347e:	8d e0       	ldi	r24, 0x0D	; 13
    3480:	90 e1       	ldi	r25, 0x10	; 16
    3482:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    3486:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    348a:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    348e:	e1 2c       	mov	r14, r1
    3490:	d1 c0       	rjmp	.+418    	; 0x3634 <menuOnEnterUSBsendHW+0x22a>
    3492:	8f ef       	ldi	r24, 0xFF	; 255
    3494:	92 e0       	ldi	r25, 0x02	; 2
    3496:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    349a:	6d e0       	ldi	r22, 0x0D	; 13
    349c:	70 e1       	ldi	r23, 0x10	; 16
    349e:	8e 2d       	mov	r24, r14
    34a0:	0e 94 52 36 	call	0x6ca4	; 0x6ca4 <putChar_Manual>
    34a4:	8d e0       	ldi	r24, 0x0D	; 13
    34a6:	90 e1       	ldi	r25, 0x10	; 16
    34a8:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    34ac:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    34b0:	f1 2c       	mov	r15, r1
    34b2:	a4 c0       	rjmp	.+328    	; 0x35fc <menuOnEnterUSBsendHW+0x1f2>
    34b4:	88 ef       	ldi	r24, 0xF8	; 248
    34b6:	92 e0       	ldi	r25, 0x02	; 2
    34b8:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    34bc:	80 e3       	ldi	r24, 0x30	; 48
    34be:	8f 0d       	add	r24, r15
    34c0:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    34c4:	8a e3       	ldi	r24, 0x3A	; 58
    34c6:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    34ca:	80 e2       	ldi	r24, 0x20	; 32
    34cc:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    34d0:	0e 2d       	mov	r16, r14
    34d2:	10 e0       	ldi	r17, 0x00	; 0
    34d4:	cf 2c       	mov	r12, r15
    34d6:	d1 2c       	mov	r13, r1
    34d8:	e6 01       	movw	r28, r12
    34da:	cc 0f       	add	r28, r28
    34dc:	dd 1f       	adc	r29, r29
    34de:	ce 01       	movw	r24, r28
    34e0:	8c 0d       	add	r24, r12
    34e2:	9d 1d       	adc	r25, r13
    34e4:	e8 01       	movw	r28, r16
    34e6:	cc 0f       	add	r28, r28
    34e8:	dd 1f       	adc	r29, r29
    34ea:	c0 0f       	add	r28, r16
    34ec:	d1 1f       	adc	r29, r17
    34ee:	cc 0f       	add	r28, r28
    34f0:	dd 1f       	adc	r29, r29
    34f2:	cc 0f       	add	r28, r28
    34f4:	dd 1f       	adc	r29, r29
    34f6:	c8 0f       	add	r28, r24
    34f8:	d9 1f       	adc	r29, r25
    34fa:	ce 5c       	subi	r28, 0xCE	; 206
    34fc:	d6 4f       	sbci	r29, 0xF6	; 246
    34fe:	6d e0       	ldi	r22, 0x0D	; 13
    3500:	70 e1       	ldi	r23, 0x10	; 16
    3502:	88 81       	ld	r24, Y
    3504:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    3508:	bc 01       	movw	r22, r24
    350a:	6f 5f       	subi	r22, 0xFF	; 255
    350c:	7f 4f       	sbci	r23, 0xFF	; 255
    350e:	0f 2e       	mov	r0, r31
    3510:	fe e2       	ldi	r31, 0x2E	; 46
    3512:	bf 2e       	mov	r11, r31
    3514:	f0 2d       	mov	r31, r0
    3516:	fc 01       	movw	r30, r24
    3518:	b0 82       	st	Z, r11
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    3520:	bc 01       	movw	r22, r24
    3522:	6f 5f       	subi	r22, 0xFF	; 255
    3524:	7f 4f       	sbci	r23, 0xFF	; 255
    3526:	fc 01       	movw	r30, r24
    3528:	b0 82       	st	Z, r11
    352a:	8a 81       	ldd	r24, Y+2	; 0x02
    352c:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    3530:	fc 01       	movw	r30, r24
    3532:	80 e2       	ldi	r24, 0x20	; 32
    3534:	80 83       	st	Z, r24
    3536:	9d e3       	ldi	r25, 0x3D	; 61
    3538:	91 83       	std	Z+1, r25	; 0x01
    353a:	82 83       	std	Z+2, r24	; 0x02
    353c:	8d e0       	ldi	r24, 0x0D	; 13
    353e:	90 e1       	ldi	r25, 0x10	; 16
    3540:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    3544:	88 81       	ld	r24, Y
    3546:	88 23       	and	r24, r24
    3548:	2c f4       	brge	.+10     	; 0x3554 <menuOnEnterUSBsendHW+0x14a>
    354a:	86 ee       	ldi	r24, 0xE6	; 230
    354c:	92 e0       	ldi	r25, 0x02	; 2
    354e:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3552:	51 c0       	rjmp	.+162    	; 0x35f6 <menuOnEnterUSBsendHW+0x1ec>
    3554:	6d e0       	ldi	r22, 0x0D	; 13
    3556:	70 e1       	ldi	r23, 0x10	; 16
    3558:	0e 94 f6 35 	call	0x6bec	; 0x6bec <putChar_Note>
    355c:	bc 01       	movw	r22, r24
    355e:	6f 5f       	subi	r22, 0xFF	; 255
    3560:	7f 4f       	sbci	r23, 0xFF	; 255
    3562:	0f 2e       	mov	r0, r31
    3564:	fd e2       	ldi	r31, 0x2D	; 45
    3566:	9f 2e       	mov	r9, r31
    3568:	f0 2d       	mov	r31, r0
    356a:	fc 01       	movw	r30, r24
    356c:	90 82       	st	Z, r9
    356e:	f6 01       	movw	r30, r12
    3570:	ee 0f       	add	r30, r30
    3572:	ff 1f       	adc	r31, r31
    3574:	ce 0e       	add	r12, r30
    3576:	df 1e       	adc	r13, r31
    3578:	58 01       	movw	r10, r16
    357a:	aa 0c       	add	r10, r10
    357c:	bb 1c       	adc	r11, r11
    357e:	e5 01       	movw	r28, r10
    3580:	c0 0f       	add	r28, r16
    3582:	d1 1f       	adc	r29, r17
    3584:	cc 0f       	add	r28, r28
    3586:	dd 1f       	adc	r29, r29
    3588:	cc 0f       	add	r28, r28
    358a:	dd 1f       	adc	r29, r29
    358c:	cc 0d       	add	r28, r12
    358e:	dd 1d       	adc	r29, r13
    3590:	ce 5c       	subi	r28, 0xCE	; 206
    3592:	d6 4f       	sbci	r29, 0xF6	; 246
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	0e 94 f6 35 	call	0x6bec	; 0x6bec <putChar_Note>
    359a:	20 e2       	ldi	r18, 0x20	; 32
    359c:	fc 01       	movw	r30, r24
    359e:	20 83       	st	Z, r18
    35a0:	11 82       	std	Z+1, r1	; 0x01
    35a2:	8d e0       	ldi	r24, 0x0D	; 13
    35a4:	90 e1       	ldi	r25, 0x10	; 16
    35a6:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    35aa:	8e ed       	ldi	r24, 0xDE	; 222
    35ac:	92 e0       	ldi	r25, 0x02	; 2
    35ae:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    35b2:	8a 81       	ldd	r24, Y+2	; 0x02
    35b4:	82 95       	swap	r24
    35b6:	86 95       	lsr	r24
    35b8:	87 70       	andi	r24, 0x07	; 7
    35ba:	80 5d       	subi	r24, 0xD0	; 208
    35bc:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    35c0:	86 ed       	ldi	r24, 0xD6	; 214
    35c2:	92 e0       	ldi	r25, 0x02	; 2
    35c4:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    35c8:	8a 81       	ldd	r24, Y+2	; 0x02
    35ca:	6d e0       	ldi	r22, 0x0D	; 13
    35cc:	70 e1       	ldi	r23, 0x10	; 16
    35ce:	8f 71       	andi	r24, 0x1F	; 31
    35d0:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    35d4:	bc 01       	movw	r22, r24
    35d6:	6f 5f       	subi	r22, 0xFF	; 255
    35d8:	7f 4f       	sbci	r23, 0xFF	; 255
    35da:	fc 01       	movw	r30, r24
    35dc:	90 82       	st	Z, r9
    35de:	8a 81       	ldd	r24, Y+2	; 0x02
    35e0:	99 81       	ldd	r25, Y+1	; 0x01
    35e2:	28 81       	ld	r18, Y
    35e4:	8f 71       	andi	r24, 0x1F	; 31
    35e6:	89 0f       	add	r24, r25
    35e8:	82 1b       	sub	r24, r18
    35ea:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    35ee:	8d e0       	ldi	r24, 0x0D	; 13
    35f0:	90 e1       	ldi	r25, 0x10	; 16
    35f2:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    35f6:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    35fa:	f3 94       	inc	r15
    35fc:	f3 e0       	ldi	r31, 0x03	; 3
    35fe:	ff 15       	cp	r31, r15
    3600:	08 f0       	brcs	.+2      	; 0x3604 <menuOnEnterUSBsendHW+0x1fa>
    3602:	58 cf       	rjmp	.-336    	; 0x34b4 <menuOnEnterUSBsendHW+0xaa>
    3604:	84 eb       	ldi	r24, 0xB4	; 180
    3606:	92 e0       	ldi	r25, 0x02	; 2
    3608:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    360c:	ee 2d       	mov	r30, r14
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	ee 0f       	add	r30, r30
    3612:	ff 1f       	adc	r31, r31
    3614:	ea 5d       	subi	r30, 0xDA	; 218
    3616:	f6 4f       	sbci	r31, 0xF6	; 246
    3618:	6d e0       	ldi	r22, 0x0D	; 13
    361a:	70 e1       	ldi	r23, 0x10	; 16
    361c:	81 81       	ldd	r24, Z+1	; 0x01
    361e:	0e 94 b7 35 	call	0x6b6e	; 0x6b6e <putChar_MidiChan>
    3622:	8d e0       	ldi	r24, 0x0D	; 13
    3624:	90 e1       	ldi	r25, 0x10	; 16
    3626:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    362a:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    362e:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    3632:	e3 94       	inc	r14
    3634:	83 e0       	ldi	r24, 0x03	; 3
    3636:	8e 15       	cp	r24, r14
    3638:	08 f0       	brcs	.+2      	; 0x363c <menuOnEnterUSBsendHW+0x232>
    363a:	2b cf       	rjmp	.-426    	; 0x3492 <menuOnEnterUSBsendHW+0x88>
    363c:	8c ee       	ldi	r24, 0xEC	; 236
    363e:	92 e0       	ldi	r25, 0x02	; 2
    3640:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3644:	f1 2c       	mov	r15, r1
    3646:	94 c0       	rjmp	.+296    	; 0x3770 <menuOnEnterUSBsendHW+0x366>
    3648:	88 ef       	ldi	r24, 0xF8	; 248
    364a:	92 e0       	ldi	r25, 0x02	; 2
    364c:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3650:	80 e3       	ldi	r24, 0x30	; 48
    3652:	8f 0d       	add	r24, r15
    3654:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    3658:	8a e3       	ldi	r24, 0x3A	; 58
    365a:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    365e:	80 e2       	ldi	r24, 0x20	; 32
    3660:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    3664:	cf 2d       	mov	r28, r15
    3666:	d0 e0       	ldi	r29, 0x00	; 0
    3668:	8e 01       	movw	r16, r28
    366a:	00 0f       	add	r16, r16
    366c:	11 1f       	adc	r17, r17
    366e:	0c 0f       	add	r16, r28
    3670:	1d 1f       	adc	r17, r29
    3672:	0a 50       	subi	r16, 0x0A	; 10
    3674:	18 4f       	sbci	r17, 0xF8	; 248
    3676:	6d e0       	ldi	r22, 0x0D	; 13
    3678:	70 e1       	ldi	r23, 0x10	; 16
    367a:	f8 01       	movw	r30, r16
    367c:	80 81       	ld	r24, Z
    367e:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    3682:	bc 01       	movw	r22, r24
    3684:	6f 5f       	subi	r22, 0xFF	; 255
    3686:	7f 4f       	sbci	r23, 0xFF	; 255
    3688:	0f 2e       	mov	r0, r31
    368a:	fe e2       	ldi	r31, 0x2E	; 46
    368c:	ef 2e       	mov	r14, r31
    368e:	f0 2d       	mov	r31, r0
    3690:	fc 01       	movw	r30, r24
    3692:	e0 82       	st	Z, r14
    3694:	f8 01       	movw	r30, r16
    3696:	81 81       	ldd	r24, Z+1	; 0x01
    3698:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    369c:	bc 01       	movw	r22, r24
    369e:	6f 5f       	subi	r22, 0xFF	; 255
    36a0:	7f 4f       	sbci	r23, 0xFF	; 255
    36a2:	fc 01       	movw	r30, r24
    36a4:	e0 82       	st	Z, r14
    36a6:	f8 01       	movw	r30, r16
    36a8:	82 81       	ldd	r24, Z+2	; 0x02
    36aa:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <putChar_hex>
    36ae:	fc 01       	movw	r30, r24
    36b0:	80 e2       	ldi	r24, 0x20	; 32
    36b2:	80 83       	st	Z, r24
    36b4:	9d e3       	ldi	r25, 0x3D	; 61
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	82 83       	std	Z+2, r24	; 0x02
    36ba:	13 82       	std	Z+3, r1	; 0x03
    36bc:	8d e0       	ldi	r24, 0x0D	; 13
    36be:	90 e1       	ldi	r25, 0x10	; 16
    36c0:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    36c4:	f8 01       	movw	r30, r16
    36c6:	80 81       	ld	r24, Z
    36c8:	8f 3f       	cpi	r24, 0xFF	; 255
    36ca:	29 f4       	brne	.+10     	; 0x36d6 <menuOnEnterUSBsendHW+0x2cc>
    36cc:	86 ee       	ldi	r24, 0xE6	; 230
    36ce:	92 e0       	ldi	r25, 0x02	; 2
    36d0:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    36d4:	4a c0       	rjmp	.+148    	; 0x376a <menuOnEnterUSBsendHW+0x360>
    36d6:	ed e0       	ldi	r30, 0x0D	; 13
    36d8:	f0 e1       	ldi	r31, 0x10	; 16
    36da:	92 e5       	ldi	r25, 0x52	; 82
    36dc:	90 83       	st	Z, r25
    36de:	9e e2       	ldi	r25, 0x2E	; 46
    36e0:	91 83       	std	Z+1, r25	; 0x01
    36e2:	6f e0       	ldi	r22, 0x0F	; 15
    36e4:	70 e1       	ldi	r23, 0x10	; 16
    36e6:	8f 5f       	subi	r24, 0xFF	; 255
    36e8:	0e 94 78 35 	call	0x6af0	; 0x6af0 <putChar_Dec>
    36ec:	bc 01       	movw	r22, r24
    36ee:	6f 5f       	subi	r22, 0xFF	; 255
    36f0:	7f 4f       	sbci	r23, 0xFF	; 255
    36f2:	1d e2       	ldi	r17, 0x2D	; 45
    36f4:	fc 01       	movw	r30, r24
    36f6:	10 83       	st	Z, r17
    36f8:	ce 01       	movw	r24, r28
    36fa:	88 0f       	add	r24, r24
    36fc:	99 1f       	adc	r25, r25
    36fe:	c8 0f       	add	r28, r24
    3700:	d9 1f       	adc	r29, r25
    3702:	ca 50       	subi	r28, 0x0A	; 10
    3704:	d8 4f       	sbci	r29, 0xF8	; 248
    3706:	89 81       	ldd	r24, Y+1	; 0x01
    3708:	8f 5f       	subi	r24, 0xFF	; 255
    370a:	0e 94 78 35 	call	0x6af0	; 0x6af0 <putChar_Dec>
    370e:	20 e2       	ldi	r18, 0x20	; 32
    3710:	fc 01       	movw	r30, r24
    3712:	20 83       	st	Z, r18
    3714:	11 82       	std	Z+1, r1	; 0x01
    3716:	8d e0       	ldi	r24, 0x0D	; 13
    3718:	90 e1       	ldi	r25, 0x10	; 16
    371a:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    371e:	8e ed       	ldi	r24, 0xDE	; 222
    3720:	92 e0       	ldi	r25, 0x02	; 2
    3722:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    3726:	8a 81       	ldd	r24, Y+2	; 0x02
    3728:	82 95       	swap	r24
    372a:	86 95       	lsr	r24
    372c:	87 70       	andi	r24, 0x07	; 7
    372e:	80 5d       	subi	r24, 0xD0	; 208
    3730:	0e 94 fe 32 	call	0x65fc	; 0x65fc <serial0SER_USBSend>
    3734:	86 ed       	ldi	r24, 0xD6	; 214
    3736:	92 e0       	ldi	r25, 0x02	; 2
    3738:	0e 94 1b 33 	call	0x6636	; 0x6636 <serial0SER_USB_sendStringP>
    373c:	8a 81       	ldd	r24, Y+2	; 0x02
    373e:	6d e0       	ldi	r22, 0x0D	; 13
    3740:	70 e1       	ldi	r23, 0x10	; 16
    3742:	8f 71       	andi	r24, 0x1F	; 31
    3744:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    3748:	bc 01       	movw	r22, r24
    374a:	6f 5f       	subi	r22, 0xFF	; 255
    374c:	7f 4f       	sbci	r23, 0xFF	; 255
    374e:	fc 01       	movw	r30, r24
    3750:	10 83       	st	Z, r17
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	99 81       	ldd	r25, Y+1	; 0x01
    3756:	28 81       	ld	r18, Y
    3758:	8f 71       	andi	r24, 0x1F	; 31
    375a:	89 0f       	add	r24, r25
    375c:	82 1b       	sub	r24, r18
    375e:	0e 94 5c 35 	call	0x6ab8	; 0x6ab8 <putChar_Dec2>
    3762:	8d e0       	ldi	r24, 0x0D	; 13
    3764:	90 e1       	ldi	r25, 0x10	; 16
    3766:	0e 94 63 33 	call	0x66c6	; 0x66c6 <serial0SER_USB_sendString>
    376a:	0e 94 2d 33 	call	0x665a	; 0x665a <serial0SER_USB_sendCRLF>
    376e:	f3 94       	inc	r15
    3770:	f7 e0       	ldi	r31, 0x07	; 7
    3772:	ff 15       	cp	r31, r15
    3774:	08 f0       	brcs	.+2      	; 0x3778 <menuOnEnterUSBsendHW+0x36e>
    3776:	68 cf       	rjmp	.-304    	; 0x3648 <menuOnEnterUSBsendHW+0x23e>
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	df 91       	pop	r29
    377c:	cf 91       	pop	r28
    377e:	1f 91       	pop	r17
    3780:	0f 91       	pop	r16
    3782:	ff 90       	pop	r15
    3784:	ef 90       	pop	r14
    3786:	df 90       	pop	r13
    3788:	cf 90       	pop	r12
    378a:	bf 90       	pop	r11
    378c:	af 90       	pop	r10
    378e:	9f 90       	pop	r9
    3790:	08 95       	ret

00003792 <reverseRegisterBits>:
    3792:	1f 93       	push	r17
    3794:	cf 93       	push	r28
    3796:	df 93       	push	r29
    3798:	10 e0       	ldi	r17, 0x00	; 0
    379a:	09 c0       	rjmp	.+18     	; 0x37ae <reverseRegisterBits+0x1c>
    379c:	c1 2f       	mov	r28, r17
    379e:	d0 e0       	ldi	r29, 0x00	; 0
    37a0:	c3 59       	subi	r28, 0x93	; 147
    37a2:	da 4f       	sbci	r29, 0xFA	; 250
    37a4:	88 81       	ld	r24, Y
    37a6:	0e 94 ee 37 	call	0x6fdc	; 0x6fdc <reverse_Bits>
    37aa:	88 83       	st	Y, r24
    37ac:	1f 5f       	subi	r17, 0xFF	; 255
    37ae:	18 30       	cpi	r17, 0x08	; 8
    37b0:	a8 f3       	brcs	.-22     	; 0x379c <reverseRegisterBits+0xa>
    37b2:	df 91       	pop	r29
    37b4:	cf 91       	pop	r28
    37b6:	1f 91       	pop	r17
    37b8:	08 95       	ret

000037ba <menuOnUpdateRegister>:
    37ba:	8d e6       	ldi	r24, 0x6D	; 109
    37bc:	95 e0       	ldi	r25, 0x05	; 5
    37be:	0e 94 2c 2c 	call	0x5858	; 0x5858 <read_allRegister>
    37c2:	e7 df       	rcall	.-50     	; 0x3792 <reverseRegisterBits>
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	08 95       	ret

000037c8 <menuOnEnterResetReg>:
    37c8:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <midi_resetRegisters>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	f5 df       	rcall	.-22     	; 0x37ba <menuOnUpdateRegister>
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	08 95       	ret

000037d4 <menuOnExitLoadProgran>:
    37d4:	86 30       	cpi	r24, 0x06	; 6
    37d6:	31 f0       	breq	.+12     	; 0x37e4 <menuOnExitLoadProgran+0x10>
    37d8:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    37dc:	80 34       	cpi	r24, 0x40	; 64
    37de:	10 f4       	brcc	.+4      	; 0x37e4 <menuOnExitLoadProgran+0x10>
    37e0:	0e 94 96 2c 	call	0x592c	; 0x592c <program_toRegister>
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	e9 df       	rcall	.-46     	; 0x37ba <menuOnUpdateRegister>
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	08 95       	ret

000037ec <softkeyCoupler>:
    37ec:	cf 93       	push	r28
    37ee:	c6 2f       	mov	r28, r22
    37f0:	88 23       	and	r24, r24
    37f2:	d9 f0       	breq	.+54     	; 0x382a <softkeyCoupler+0x3e>
    37f4:	e6 2f       	mov	r30, r22
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	df 01       	movw	r26, r30
    37fa:	a1 5f       	subi	r26, 0xF1	; 241
    37fc:	b7 4f       	sbci	r27, 0xF7	; 247
    37fe:	8c 91       	ld	r24, X
    3800:	81 11       	cpse	r24, r1
    3802:	08 c0       	rjmp	.+16     	; 0x3814 <softkeyCoupler+0x28>
    3804:	86 2f       	mov	r24, r22
    3806:	0e 94 99 2a 	call	0x5532	; 0x5532 <set_Coupler>
    380a:	88 23       	and	r24, r24
    380c:	71 f0       	breq	.+28     	; 0x382a <softkeyCoupler+0x3e>
    380e:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <midi_ManualOff>
    3812:	0b c0       	rjmp	.+22     	; 0x382a <softkeyCoupler+0x3e>
    3814:	df 01       	movw	r26, r30
    3816:	a1 5f       	subi	r26, 0xF1	; 241
    3818:	b7 4f       	sbci	r27, 0xF7	; 247
    381a:	1c 92       	st	X, r1
    381c:	ee 0f       	add	r30, r30
    381e:	ff 1f       	adc	r31, r31
    3820:	ec 57       	subi	r30, 0x7C	; 124
    3822:	fe 4e       	sbci	r31, 0xEE	; 238
    3824:	84 91       	lpm	r24, Z
    3826:	0e 94 c8 2f 	call	0x5f90	; 0x5f90 <midi_ManualOff>
    382a:	ec 2f       	mov	r30, r28
    382c:	f0 e0       	ldi	r31, 0x00	; 0
    382e:	e1 5f       	subi	r30, 0xF1	; 241
    3830:	f7 4f       	sbci	r31, 0xF7	; 247
    3832:	80 81       	ld	r24, Z
    3834:	81 11       	cpse	r24, r1
    3836:	02 c0       	rjmp	.+4      	; 0x383c <softkeyCoupler+0x50>
    3838:	82 e8       	ldi	r24, 0x82	; 130
    383a:	01 c0       	rjmp	.+2      	; 0x383e <softkeyCoupler+0x52>
    383c:	81 e8       	ldi	r24, 0x81	; 129
    383e:	cf 91       	pop	r28
    3840:	08 95       	ret

00003842 <softKeyCoupler2from3>:
    3842:	60 e0       	ldi	r22, 0x00	; 0
    3844:	d3 cf       	rjmp	.-90     	; 0x37ec <softkeyCoupler>
    3846:	08 95       	ret

00003848 <softKeyCoupler1from3>:
    3848:	61 e0       	ldi	r22, 0x01	; 1
    384a:	d0 cf       	rjmp	.-96     	; 0x37ec <softkeyCoupler>
    384c:	08 95       	ret

0000384e <softKeyCouplerPfrom3>:
    384e:	63 e0       	ldi	r22, 0x03	; 3
    3850:	cd cf       	rjmp	.-102    	; 0x37ec <softkeyCoupler>
    3852:	08 95       	ret

00003854 <softKeyCoupler1from2>:
    3854:	62 e0       	ldi	r22, 0x02	; 2
    3856:	ca cf       	rjmp	.-108    	; 0x37ec <softkeyCoupler>
    3858:	08 95       	ret

0000385a <softKeyCouplerPfrom2>:
    385a:	64 e0       	ldi	r22, 0x04	; 4
    385c:	c7 cf       	rjmp	.-114    	; 0x37ec <softkeyCoupler>
    385e:	08 95       	ret

00003860 <softKeyCouplerPfrom1>:
    3860:	65 e0       	ldi	r22, 0x05	; 5
    3862:	c4 cf       	rjmp	.-120    	; 0x37ec <softkeyCoupler>
    3864:	08 95       	ret

00003866 <softKeyCoupler3from2>:
    3866:	66 e0       	ldi	r22, 0x06	; 6
    3868:	c1 cf       	rjmp	.-126    	; 0x37ec <softkeyCoupler>
    386a:	08 95       	ret

0000386c <softKeyCoupler3from1>:
    386c:	67 e0       	ldi	r22, 0x07	; 7
    386e:	be cf       	rjmp	.-132    	; 0x37ec <softkeyCoupler>
    3870:	08 95       	ret

00003872 <softKeyCoupler3fromP>:
    3872:	69 e0       	ldi	r22, 0x09	; 9
    3874:	bb cf       	rjmp	.-138    	; 0x37ec <softkeyCoupler>
    3876:	08 95       	ret

00003878 <softKeyCoupler2from1>:
    3878:	68 e0       	ldi	r22, 0x08	; 8
    387a:	b8 cf       	rjmp	.-144    	; 0x37ec <softkeyCoupler>
    387c:	08 95       	ret

0000387e <softKeyCoupler2fromP>:
    387e:	6a e0       	ldi	r22, 0x0A	; 10
    3880:	b5 cf       	rjmp	.-150    	; 0x37ec <softkeyCoupler>
    3882:	08 95       	ret

00003884 <softKeyCoupler1fromP>:
    3884:	6b e0       	ldi	r22, 0x0B	; 11
    3886:	b2 cf       	rjmp	.-156    	; 0x37ec <softkeyCoupler>
    3888:	08 95       	ret

0000388a <menu_Init>:
    388a:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    388e:	00 97       	sbiw	r24, 0x00	; 0
    3890:	69 f4       	brne	.+26     	; 0x38ac <menu_Init+0x22>
    3892:	82 ef       	ldi	r24, 0xF2	; 242
    3894:	96 e0       	ldi	r25, 0x06	; 6
    3896:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    389a:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    389e:	8d ec       	ldi	r24, 0xCD	; 205
    38a0:	93 e0       	ldi	r25, 0x03	; 3
    38a2:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    38a6:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    38aa:	08 c0       	rjmp	.+16     	; 0x38bc <menu_Init+0x32>
    38ac:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    38b0:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    38b4:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    38b8:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    38bc:	8f ef       	ldi	r24, 0xFF	; 255
    38be:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    38c2:	87 ed       	ldi	r24, 0xD7	; 215
    38c4:	93 e0       	ldi	r25, 0x03	; 3
    38c6:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    38ca:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    38ce:	08 95       	ret

000038d0 <softkeyLeft>:
    38d0:	6e eb       	ldi	r22, 0xBE	; 190
    38d2:	71 e1       	ldi	r23, 0x11	; 17
    38d4:	82 e0       	ldi	r24, 0x02	; 2
    38d6:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    38da:	08 95       	ret

000038dc <softkeyRight>:
    38dc:	60 ec       	ldi	r22, 0xC0	; 192
    38de:	71 e1       	ldi	r23, 0x11	; 17
    38e0:	83 e0       	ldi	r24, 0x03	; 3
    38e2:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    38e6:	08 95       	ret

000038e8 <softkeyDown>:
    38e8:	62 ec       	ldi	r22, 0xC2	; 194
    38ea:	71 e1       	ldi	r23, 0x11	; 17
    38ec:	81 e0       	ldi	r24, 0x01	; 1
    38ee:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    38f2:	08 95       	ret

000038f4 <softkeyOn>:
    38f4:	60 eb       	ldi	r22, 0xB0	; 176
    38f6:	71 e1       	ldi	r23, 0x11	; 17
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    38fe:	08 95       	ret

00003900 <softkeyOff>:
    3900:	6b ea       	ldi	r22, 0xAB	; 171
    3902:	71 e1       	ldi	r23, 0x11	; 17
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    390a:	08 95       	ret

0000390c <softkeyUp>:
    390c:	64 ec       	ldi	r22, 0xC4	; 196
    390e:	71 e1       	ldi	r23, 0x11	; 17
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    3916:	08 95       	ret

00003918 <softkeyPlus>:
    3918:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    391c:	8a 30       	cpi	r24, 0x0A	; 10
    391e:	11 f0       	breq	.+4      	; 0x3924 <softkeyPlus+0xc>
    3920:	8e 30       	cpi	r24, 0x0E	; 14
    3922:	31 f4       	brne	.+12     	; 0x3930 <softkeyPlus+0x18>
    3924:	6c e9       	ldi	r22, 0x9C	; 156
    3926:	71 e1       	ldi	r23, 0x11	; 17
    3928:	80 e0       	ldi	r24, 0x00	; 0
    392a:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    392e:	08 95       	ret
    3930:	6c eb       	ldi	r22, 0xBC	; 188
    3932:	71 e1       	ldi	r23, 0x11	; 17
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    393a:	08 95       	ret

0000393c <softkeyMinus>:
    393c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3940:	8a 30       	cpi	r24, 0x0A	; 10
    3942:	11 f0       	breq	.+4      	; 0x3948 <softkeyMinus+0xc>
    3944:	8e 30       	cpi	r24, 0x0E	; 14
    3946:	31 f4       	brne	.+12     	; 0x3954 <softkeyMinus+0x18>
    3948:	6e e9       	ldi	r22, 0x9E	; 158
    394a:	71 e1       	ldi	r23, 0x11	; 17
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    3952:	08 95       	ret
    3954:	6a eb       	ldi	r22, 0xBA	; 186
    3956:	71 e1       	ldi	r23, 0x11	; 17
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	0c 94 49 37 	jmp	0x6e92	; 0x6e92 <keylabel_set>
    395e:	08 95       	ret

00003960 <dataToNibbles>:
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3968:	8e 2f       	mov	r24, r30
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	fc 01       	movw	r30, r24
    396e:	32 97       	sbiw	r30, 0x02	; 2
    3970:	ed 30       	cpi	r30, 0x0D	; 13
    3972:	f1 05       	cpc	r31, r1
    3974:	08 f0       	brcs	.+2      	; 0x3978 <dataToNibbles+0x18>
    3976:	e4 c0       	rjmp	.+456    	; 0x3b40 <dataToNibbles+0x1e0>
    3978:	88 27       	eor	r24, r24
    397a:	ee 58       	subi	r30, 0x8E	; 142
    397c:	ff 4f       	sbci	r31, 0xFF	; 255
    397e:	8f 4f       	sbci	r24, 0xFF	; 255
    3980:	0c 94 fb 37 	jmp	0x6ff6	; 0x6ff6 <__tablejump2__>
    3984:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3988:	e4 ec       	ldi	r30, 0xC4	; 196
    398a:	f5 e0       	ldi	r31, 0x05	; 5
    398c:	98 2f       	mov	r25, r24
    398e:	92 95       	swap	r25
    3990:	9f 70       	andi	r25, 0x0F	; 15
    3992:	90 83       	st	Z, r25
    3994:	8f 70       	andi	r24, 0x0F	; 15
    3996:	81 83       	std	Z+1, r24	; 0x01
    3998:	d3 c0       	rjmp	.+422    	; 0x3b40 <dataToNibbles+0x1e0>
    399a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    399e:	80 31       	cpi	r24, 0x10	; 16
    39a0:	20 f0       	brcs	.+8      	; 0x39aa <dataToNibbles+0x4a>
    39a2:	8f ef       	ldi	r24, 0xFF	; 255
    39a4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    39a8:	cb c0       	rjmp	.+406    	; 0x3b40 <dataToNibbles+0x1e0>
    39aa:	8f 5f       	subi	r24, 0xFF	; 255
    39ac:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    39b0:	c7 c0       	rjmp	.+398    	; 0x3b40 <dataToNibbles+0x1e0>
    39b2:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    39b6:	88 23       	and	r24, r24
    39b8:	34 f4       	brge	.+12     	; 0x39c6 <dataToNibbles+0x66>
    39ba:	e4 ec       	ldi	r30, 0xC4	; 196
    39bc:	f5 e0       	ldi	r31, 0x05	; 5
    39be:	10 82       	st	Z, r1
    39c0:	8f ef       	ldi	r24, 0xFF	; 255
    39c2:	81 83       	std	Z+1, r24	; 0x01
    39c4:	bd c0       	rjmp	.+378    	; 0x3b40 <dataToNibbles+0x1e0>
    39c6:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    39ca:	08 c0       	rjmp	.+16     	; 0x39dc <dataToNibbles+0x7c>
    39cc:	e4 ec       	ldi	r30, 0xC4	; 196
    39ce:	f5 e0       	ldi	r31, 0x05	; 5
    39d0:	91 81       	ldd	r25, Z+1	; 0x01
    39d2:	9f 5f       	subi	r25, 0xFF	; 255
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	8c 50       	subi	r24, 0x0C	; 12
    39d8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    39dc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    39e0:	8c 30       	cpi	r24, 0x0C	; 12
    39e2:	a0 f7       	brcc	.-24     	; 0x39cc <dataToNibbles+0x6c>
    39e4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    39e8:	ab c0       	rjmp	.+342    	; 0x3b40 <dataToNibbles+0x1e0>
    39ea:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    39ee:	e4 ec       	ldi	r30, 0xC4	; 196
    39f0:	f5 e0       	ldi	r31, 0x05	; 5
    39f2:	98 2f       	mov	r25, r24
    39f4:	92 95       	swap	r25
    39f6:	96 95       	lsr	r25
    39f8:	97 70       	andi	r25, 0x07	; 7
    39fa:	90 83       	st	Z, r25
    39fc:	8f 71       	andi	r24, 0x1F	; 31
    39fe:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a02:	11 82       	std	Z+1, r1	; 0x01
    3a04:	08 c0       	rjmp	.+16     	; 0x3a16 <dataToNibbles+0xb6>
    3a06:	e4 ec       	ldi	r30, 0xC4	; 196
    3a08:	f5 e0       	ldi	r31, 0x05	; 5
    3a0a:	91 81       	ldd	r25, Z+1	; 0x01
    3a0c:	9f 5f       	subi	r25, 0xFF	; 255
    3a0e:	91 83       	std	Z+1, r25	; 0x01
    3a10:	8a 50       	subi	r24, 0x0A	; 10
    3a12:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a16:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a1a:	8a 30       	cpi	r24, 0x0A	; 10
    3a1c:	a0 f7       	brcc	.-24     	; 0x3a06 <dataToNibbles+0xa6>
    3a1e:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3a22:	8e c0       	rjmp	.+284    	; 0x3b40 <dataToNibbles+0x1e0>
    3a24:	e4 ec       	ldi	r30, 0xC4	; 196
    3a26:	f5 e0       	ldi	r31, 0x05	; 5
    3a28:	10 82       	st	Z, r1
    3a2a:	11 82       	std	Z+1, r1	; 0x01
    3a2c:	08 c0       	rjmp	.+16     	; 0x3a3e <dataToNibbles+0xde>
    3a2e:	e4 ec       	ldi	r30, 0xC4	; 196
    3a30:	f5 e0       	ldi	r31, 0x05	; 5
    3a32:	90 81       	ld	r25, Z
    3a34:	9f 5f       	subi	r25, 0xFF	; 255
    3a36:	90 83       	st	Z, r25
    3a38:	84 56       	subi	r24, 0x64	; 100
    3a3a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a3e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a42:	84 36       	cpi	r24, 0x64	; 100
    3a44:	a0 f7       	brcc	.-24     	; 0x3a2e <dataToNibbles+0xce>
    3a46:	08 c0       	rjmp	.+16     	; 0x3a58 <dataToNibbles+0xf8>
    3a48:	e4 ec       	ldi	r30, 0xC4	; 196
    3a4a:	f5 e0       	ldi	r31, 0x05	; 5
    3a4c:	91 81       	ldd	r25, Z+1	; 0x01
    3a4e:	9f 5f       	subi	r25, 0xFF	; 255
    3a50:	91 83       	std	Z+1, r25	; 0x01
    3a52:	8a 50       	subi	r24, 0x0A	; 10
    3a54:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a58:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a5c:	8a 30       	cpi	r24, 0x0A	; 10
    3a5e:	a0 f7       	brcc	.-24     	; 0x3a48 <dataToNibbles+0xe8>
    3a60:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3a64:	6d c0       	rjmp	.+218    	; 0x3b40 <dataToNibbles+0x1e0>
    3a66:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a6a:	84 30       	cpi	r24, 0x04	; 4
    3a6c:	20 f0       	brcs	.+8      	; 0x3a76 <dataToNibbles+0x116>
    3a6e:	8f ef       	ldi	r24, 0xFF	; 255
    3a70:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a74:	65 c0       	rjmp	.+202    	; 0x3b40 <dataToNibbles+0x1e0>
    3a76:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a7a:	62 c0       	rjmp	.+196    	; 0x3b40 <dataToNibbles+0x1e0>
    3a7c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a80:	84 30       	cpi	r24, 0x04	; 4
    3a82:	20 f0       	brcs	.+8      	; 0x3a8c <dataToNibbles+0x12c>
    3a84:	83 e0       	ldi	r24, 0x03	; 3
    3a86:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a8a:	5a c0       	rjmp	.+180    	; 0x3b40 <dataToNibbles+0x1e0>
    3a8c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a90:	57 c0       	rjmp	.+174    	; 0x3b40 <dataToNibbles+0x1e0>
    3a92:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a96:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a9a:	52 c0       	rjmp	.+164    	; 0x3b40 <dataToNibbles+0x1e0>
    3a9c:	e9 2f       	mov	r30, r25
    3a9e:	f0 e0       	ldi	r31, 0x00	; 0
    3aa0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3aa4:	28 2f       	mov	r18, r24
    3aa6:	22 1f       	adc	r18, r18
    3aa8:	22 27       	eor	r18, r18
    3aaa:	22 1f       	adc	r18, r18
    3aac:	ec 53       	subi	r30, 0x3C	; 60
    3aae:	fa 4f       	sbci	r31, 0xFA	; 250
    3ab0:	20 83       	st	Z, r18
    3ab2:	88 0f       	add	r24, r24
    3ab4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3ab8:	9f 5f       	subi	r25, 0xFF	; 255
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <dataToNibbles+0x15e>
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	98 30       	cpi	r25, 0x08	; 8
    3ac0:	68 f3       	brcs	.-38     	; 0x3a9c <dataToNibbles+0x13c>
    3ac2:	3e c0       	rjmp	.+124    	; 0x3b40 <dataToNibbles+0x1e0>
    3ac4:	82 50       	subi	r24, 0x02	; 2
    3ac6:	f0 e0       	ldi	r31, 0x00	; 0
    3ac8:	de 01       	movw	r26, r28
    3aca:	9d 91       	ld	r25, X+
    3acc:	ec 53       	subi	r30, 0x3C	; 60
    3ace:	fa 4f       	sbci	r31, 0xFA	; 250
    3ad0:	9f 70       	andi	r25, 0x0F	; 15
    3ad2:	90 83       	st	Z, r25
    3ad4:	e8 2f       	mov	r30, r24
    3ad6:	f0 e0       	ldi	r31, 0x00	; 0
    3ad8:	98 81       	ld	r25, Y
    3ada:	ec 53       	subi	r30, 0x3C	; 60
    3adc:	fa 4f       	sbci	r31, 0xFA	; 250
    3ade:	92 95       	swap	r25
    3ae0:	9f 70       	andi	r25, 0x0F	; 15
    3ae2:	90 83       	st	Z, r25
    3ae4:	ed 01       	movw	r28, r26
    3ae6:	03 c0       	rjmp	.+6      	; 0x3aee <dataToNibbles+0x18e>
    3ae8:	c2 ea       	ldi	r28, 0xA2	; 162
    3aea:	d5 e0       	ldi	r29, 0x05	; 5
    3aec:	88 e0       	ldi	r24, 0x08	; 8
    3aee:	ef ef       	ldi	r30, 0xFF	; 255
    3af0:	e8 0f       	add	r30, r24
    3af2:	81 11       	cpse	r24, r1
    3af4:	e7 cf       	rjmp	.-50     	; 0x3ac4 <dataToNibbles+0x164>
    3af6:	24 c0       	rjmp	.+72     	; 0x3b40 <dataToNibbles+0x1e0>
    3af8:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3afc:	e4 ec       	ldi	r30, 0xC4	; 196
    3afe:	f5 e0       	ldi	r31, 0x05	; 5
    3b00:	98 2f       	mov	r25, r24
    3b02:	97 70       	andi	r25, 0x07	; 7
    3b04:	9f 5f       	subi	r25, 0xFF	; 255
    3b06:	90 83       	st	Z, r25
    3b08:	86 95       	lsr	r24
    3b0a:	86 95       	lsr	r24
    3b0c:	86 95       	lsr	r24
    3b0e:	8f 5f       	subi	r24, 0xFF	; 255
    3b10:	81 83       	std	Z+1, r24	; 0x01
    3b12:	16 c0       	rjmp	.+44     	; 0x3b40 <dataToNibbles+0x1e0>
    3b14:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b18:	8f 5f       	subi	r24, 0xFF	; 255
    3b1a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b1e:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    3b22:	08 c0       	rjmp	.+16     	; 0x3b34 <dataToNibbles+0x1d4>
    3b24:	e4 ec       	ldi	r30, 0xC4	; 196
    3b26:	f5 e0       	ldi	r31, 0x05	; 5
    3b28:	90 81       	ld	r25, Z
    3b2a:	9f 5f       	subi	r25, 0xFF	; 255
    3b2c:	90 83       	st	Z, r25
    3b2e:	8a 50       	subi	r24, 0x0A	; 10
    3b30:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b34:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b38:	8a 30       	cpi	r24, 0x0A	; 10
    3b3a:	a0 f7       	brcc	.-24     	; 0x3b24 <dataToNibbles+0x1c4>
    3b3c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	08 95       	ret

00003b46 <nibbleToLCDstring>:
    3b46:	0f 93       	push	r16
    3b48:	1f 93       	push	r17
    3b4a:	cf 93       	push	r28
    3b4c:	df 93       	push	r29
    3b4e:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3b52:	8e 2f       	mov	r24, r30
    3b54:	90 e0       	ldi	r25, 0x00	; 0
    3b56:	fc 01       	movw	r30, r24
    3b58:	32 97       	sbiw	r30, 0x02	; 2
    3b5a:	ed 30       	cpi	r30, 0x0D	; 13
    3b5c:	f1 05       	cpc	r31, r1
    3b5e:	08 f0       	brcs	.+2      	; 0x3b62 <nibbleToLCDstring+0x1c>
    3b60:	3b c1       	rjmp	.+630    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3b62:	88 27       	eor	r24, r24
    3b64:	e1 58       	subi	r30, 0x81	; 129
    3b66:	ff 4f       	sbci	r31, 0xFF	; 255
    3b68:	8f 4f       	sbci	r24, 0xFF	; 255
    3b6a:	0c 94 fb 37 	jmp	0x6ff6	; 0x6ff6 <__tablejump2__>
    3b6e:	04 ec       	ldi	r16, 0xC4	; 196
    3b70:	15 e0       	ldi	r17, 0x05	; 5
    3b72:	f8 01       	movw	r30, r16
    3b74:	80 81       	ld	r24, Z
    3b76:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3b7a:	c5 e2       	ldi	r28, 0x25	; 37
    3b7c:	d2 e0       	ldi	r29, 0x02	; 2
    3b7e:	88 83       	st	Y, r24
    3b80:	f8 01       	movw	r30, r16
    3b82:	81 81       	ldd	r24, Z+1	; 0x01
    3b84:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3b88:	89 83       	std	Y+1, r24	; 0x01
    3b8a:	1a 82       	std	Y+2, r1	; 0x02
    3b8c:	25 c1       	rjmp	.+586    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3b8e:	e5 e2       	ldi	r30, 0x25	; 37
    3b90:	f2 e0       	ldi	r31, 0x02	; 2
    3b92:	83 e4       	ldi	r24, 0x43	; 67
    3b94:	80 83       	st	Z, r24
    3b96:	88 e6       	ldi	r24, 0x68	; 104
    3b98:	81 83       	std	Z+1, r24	; 0x01
    3b9a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba0:	29 f4       	brne	.+10     	; 0x3bac <nibbleToLCDstring+0x66>
    3ba2:	80 e2       	ldi	r24, 0x20	; 32
    3ba4:	82 83       	std	Z+2, r24	; 0x02
    3ba6:	8d e2       	ldi	r24, 0x2D	; 45
    3ba8:	83 83       	std	Z+3, r24	; 0x03
    3baa:	12 c0       	rjmp	.+36     	; 0x3bd0 <nibbleToLCDstring+0x8a>
    3bac:	8a 30       	cpi	r24, 0x0A	; 10
    3bae:	48 f0       	brcs	.+18     	; 0x3bc2 <nibbleToLCDstring+0x7c>
    3bb0:	c5 e2       	ldi	r28, 0x25	; 37
    3bb2:	d2 e0       	ldi	r29, 0x02	; 2
    3bb4:	91 e3       	ldi	r25, 0x31	; 49
    3bb6:	9a 83       	std	Y+2, r25	; 0x02
    3bb8:	8a 50       	subi	r24, 0x0A	; 10
    3bba:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
    3bc0:	07 c0       	rjmp	.+14     	; 0x3bd0 <nibbleToLCDstring+0x8a>
    3bc2:	c5 e2       	ldi	r28, 0x25	; 37
    3bc4:	d2 e0       	ldi	r29, 0x02	; 2
    3bc6:	90 e2       	ldi	r25, 0x20	; 32
    3bc8:	9a 83       	std	Y+2, r25	; 0x02
    3bca:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3bce:	8b 83       	std	Y+3, r24	; 0x03
    3bd0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    3bd4:	01 c1       	rjmp	.+514    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3bd6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3bda:	8f 3f       	cpi	r24, 0xFF	; 255
    3bdc:	21 f0       	breq	.+8      	; 0x3be6 <nibbleToLCDstring+0xa0>
    3bde:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    3be2:	9f 3f       	cpi	r25, 0xFF	; 255
    3be4:	59 f4       	brne	.+22     	; 0x3bfc <nibbleToLCDstring+0xb6>
    3be6:	e5 e2       	ldi	r30, 0x25	; 37
    3be8:	f2 e0       	ldi	r31, 0x02	; 2
    3bea:	8e e6       	ldi	r24, 0x6E	; 110
    3bec:	80 83       	st	Z, r24
    3bee:	9f e6       	ldi	r25, 0x6F	; 111
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	82 83       	std	Z+2, r24	; 0x02
    3bf4:	85 e6       	ldi	r24, 0x65	; 101
    3bf6:	83 83       	std	Z+3, r24	; 0x03
    3bf8:	14 82       	std	Z+4, r1	; 0x04
    3bfa:	ee c0       	rjmp	.+476    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3bfc:	9f e5       	ldi	r25, 0x5F	; 95
    3bfe:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    3c02:	8b 30       	cpi	r24, 0x0B	; 11
    3c04:	21 f4       	brne	.+8      	; 0x3c0e <nibbleToLCDstring+0xc8>
    3c06:	88 e4       	ldi	r24, 0x48	; 72
    3c08:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3c0c:	20 c0       	rjmp	.+64     	; 0x3c4e <nibbleToLCDstring+0x108>
    3c0e:	85 30       	cpi	r24, 0x05	; 5
    3c10:	58 f4       	brcc	.+22     	; 0x3c28 <nibbleToLCDstring+0xe2>
    3c12:	98 2f       	mov	r25, r24
    3c14:	96 95       	lsr	r25
    3c16:	9d 5b       	subi	r25, 0xBD	; 189
    3c18:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    3c1c:	80 ff       	sbrs	r24, 0
    3c1e:	17 c0       	rjmp	.+46     	; 0x3c4e <nibbleToLCDstring+0x108>
    3c20:	83 e2       	ldi	r24, 0x23	; 35
    3c22:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3c26:	13 c0       	rjmp	.+38     	; 0x3c4e <nibbleToLCDstring+0x108>
    3c28:	28 2f       	mov	r18, r24
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	25 50       	subi	r18, 0x05	; 5
    3c2e:	31 09       	sbc	r19, r1
    3c30:	35 95       	asr	r19
    3c32:	27 95       	ror	r18
    3c34:	2a 5b       	subi	r18, 0xBA	; 186
    3c36:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    3c3a:	80 fd       	sbrc	r24, 0
    3c3c:	03 c0       	rjmp	.+6      	; 0x3c44 <nibbleToLCDstring+0xfe>
    3c3e:	83 e2       	ldi	r24, 0x23	; 35
    3c40:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3c44:	28 34       	cpi	r18, 0x48	; 72
    3c46:	19 f4       	brne	.+6      	; 0x3c4e <nibbleToLCDstring+0x108>
    3c48:	81 e4       	ldi	r24, 0x41	; 65
    3c4a:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3c4e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3c52:	81 11       	cpse	r24, r1
    3c54:	04 c0       	rjmp	.+8      	; 0x3c5e <nibbleToLCDstring+0x118>
    3c56:	8d e6       	ldi	r24, 0x6D	; 109
    3c58:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3c5c:	0b c0       	rjmp	.+22     	; 0x3c74 <nibbleToLCDstring+0x12e>
    3c5e:	8c 30       	cpi	r24, 0x0C	; 12
    3c60:	30 f4       	brcc	.+12     	; 0x3c6e <nibbleToLCDstring+0x128>
    3c62:	81 50       	subi	r24, 0x01	; 1
    3c64:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3c68:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3c6c:	03 c0       	rjmp	.+6      	; 0x3c74 <nibbleToLCDstring+0x12e>
    3c6e:	8d e2       	ldi	r24, 0x2D	; 45
    3c70:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3c74:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3c78:	af c0       	rjmp	.+350    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3c7a:	c5 e2       	ldi	r28, 0x25	; 37
    3c7c:	d2 e0       	ldi	r29, 0x02	; 2
    3c7e:	8d e4       	ldi	r24, 0x4D	; 77
    3c80:	88 83       	st	Y, r24
    3c82:	04 ec       	ldi	r16, 0xC4	; 196
    3c84:	15 e0       	ldi	r17, 0x05	; 5
    3c86:	f8 01       	movw	r30, r16
    3c88:	80 81       	ld	r24, Z
    3c8a:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3c8e:	89 83       	std	Y+1, r24	; 0x01
    3c90:	82 e4       	ldi	r24, 0x42	; 66
    3c92:	8a 83       	std	Y+2, r24	; 0x02
    3c94:	f8 01       	movw	r30, r16
    3c96:	81 81       	ldd	r24, Z+1	; 0x01
    3c98:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3c9c:	8b 83       	std	Y+3, r24	; 0x03
    3c9e:	f8 01       	movw	r30, r16
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3ca6:	8c 83       	std	Y+4, r24	; 0x04
    3ca8:	1d 82       	std	Y+5, r1	; 0x05
    3caa:	96 c0       	rjmp	.+300    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3cac:	04 ec       	ldi	r16, 0xC4	; 196
    3cae:	15 e0       	ldi	r17, 0x05	; 5
    3cb0:	f8 01       	movw	r30, r16
    3cb2:	80 81       	ld	r24, Z
    3cb4:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3cb8:	c5 e2       	ldi	r28, 0x25	; 37
    3cba:	d2 e0       	ldi	r29, 0x02	; 2
    3cbc:	88 83       	st	Y, r24
    3cbe:	f8 01       	movw	r30, r16
    3cc0:	81 81       	ldd	r24, Z+1	; 0x01
    3cc2:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3cc6:	89 83       	std	Y+1, r24	; 0x01
    3cc8:	f8 01       	movw	r30, r16
    3cca:	82 81       	ldd	r24, Z+2	; 0x02
    3ccc:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3cd0:	8a 83       	std	Y+2, r24	; 0x02
    3cd2:	1b 82       	std	Y+3, r1	; 0x03
    3cd4:	81 c0       	rjmp	.+258    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3cd6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3cda:	83 30       	cpi	r24, 0x03	; 3
    3cdc:	38 f4       	brcc	.+14     	; 0x3cec <nibbleToLCDstring+0x1a6>
    3cde:	e5 e2       	ldi	r30, 0x25	; 37
    3ce0:	f2 e0       	ldi	r31, 0x02	; 2
    3ce2:	93 e3       	ldi	r25, 0x33	; 51
    3ce4:	98 1b       	sub	r25, r24
    3ce6:	90 83       	st	Z, r25
    3ce8:	11 82       	std	Z+1, r1	; 0x01
    3cea:	76 c0       	rjmp	.+236    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3cec:	83 30       	cpi	r24, 0x03	; 3
    3cee:	31 f4       	brne	.+12     	; 0x3cfc <nibbleToLCDstring+0x1b6>
    3cf0:	e5 e2       	ldi	r30, 0x25	; 37
    3cf2:	f2 e0       	ldi	r31, 0x02	; 2
    3cf4:	80 e5       	ldi	r24, 0x50	; 80
    3cf6:	80 83       	st	Z, r24
    3cf8:	11 82       	std	Z+1, r1	; 0x01
    3cfa:	6e c0       	rjmp	.+220    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3cfc:	e5 e2       	ldi	r30, 0x25	; 37
    3cfe:	f2 e0       	ldi	r31, 0x02	; 2
    3d00:	8d e2       	ldi	r24, 0x2D	; 45
    3d02:	80 83       	st	Z, r24
    3d04:	11 82       	std	Z+1, r1	; 0x01
    3d06:	68 c0       	rjmp	.+208    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3d08:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3d0c:	e5 e2       	ldi	r30, 0x25	; 37
    3d0e:	f2 e0       	ldi	r31, 0x02	; 2
    3d10:	80 5d       	subi	r24, 0xD0	; 208
    3d12:	80 83       	st	Z, r24
    3d14:	11 82       	std	Z+1, r1	; 0x01
    3d16:	60 c0       	rjmp	.+192    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3d18:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3d1c:	81 11       	cpse	r24, r1
    3d1e:	09 c0       	rjmp	.+18     	; 0x3d32 <nibbleToLCDstring+0x1ec>
    3d20:	e5 e2       	ldi	r30, 0x25	; 37
    3d22:	f2 e0       	ldi	r31, 0x02	; 2
    3d24:	81 e4       	ldi	r24, 0x41	; 65
    3d26:	80 83       	st	Z, r24
    3d28:	85 e7       	ldi	r24, 0x75	; 117
    3d2a:	81 83       	std	Z+1, r24	; 0x01
    3d2c:	83 e7       	ldi	r24, 0x73	; 115
    3d2e:	82 83       	std	Z+2, r24	; 0x02
    3d30:	08 c0       	rjmp	.+16     	; 0x3d42 <nibbleToLCDstring+0x1fc>
    3d32:	e5 e2       	ldi	r30, 0x25	; 37
    3d34:	f2 e0       	ldi	r31, 0x02	; 2
    3d36:	85 e4       	ldi	r24, 0x45	; 69
    3d38:	80 83       	st	Z, r24
    3d3a:	89 e6       	ldi	r24, 0x69	; 105
    3d3c:	81 83       	std	Z+1, r24	; 0x01
    3d3e:	8e e6       	ldi	r24, 0x6E	; 110
    3d40:	82 83       	std	Z+2, r24	; 0x02
    3d42:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3d46:	48 c0       	rjmp	.+144    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3d48:	c1 2f       	mov	r28, r17
    3d4a:	d0 e0       	ldi	r29, 0x00	; 0
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	ec 53       	subi	r30, 0x3C	; 60
    3d50:	fa 4f       	sbci	r31, 0xFA	; 250
    3d52:	80 81       	ld	r24, Z
    3d54:	0e 94 cf 34 	call	0x699e	; 0x699e <nibbleToChr>
    3d58:	cb 5d       	subi	r28, 0xDB	; 219
    3d5a:	dd 4f       	sbci	r29, 0xFD	; 253
    3d5c:	88 83       	st	Y, r24
    3d5e:	1f 5f       	subi	r17, 0xFF	; 255
    3d60:	01 c0       	rjmp	.+2      	; 0x3d64 <nibbleToLCDstring+0x21e>
    3d62:	10 e0       	ldi	r17, 0x00	; 0
    3d64:	18 30       	cpi	r17, 0x08	; 8
    3d66:	80 f3       	brcs	.-32     	; 0x3d48 <nibbleToLCDstring+0x202>
    3d68:	37 c0       	rjmp	.+110    	; 0x3dd8 <nibbleToLCDstring+0x292>
    3d6a:	82 2f       	mov	r24, r18
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	fc 01       	movw	r30, r24
    3d70:	ec 53       	subi	r30, 0x3C	; 60
    3d72:	fa 4f       	sbci	r31, 0xFA	; 250
    3d74:	30 81       	ld	r19, Z
    3d76:	31 11       	cpse	r19, r1
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <nibbleToLCDstring+0x238>
    3d7a:	3f e6       	ldi	r19, 0x6F	; 111
    3d7c:	01 c0       	rjmp	.+2      	; 0x3d80 <nibbleToLCDstring+0x23a>
    3d7e:	39 e4       	ldi	r19, 0x49	; 73
    3d80:	fc 01       	movw	r30, r24
    3d82:	eb 5d       	subi	r30, 0xDB	; 219
    3d84:	fd 4f       	sbci	r31, 0xFD	; 253
    3d86:	30 83       	st	Z, r19
    3d88:	2f 5f       	subi	r18, 0xFF	; 255
    3d8a:	01 c0       	rjmp	.+2      	; 0x3d8e <nibbleToLCDstring+0x248>
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	28 30       	cpi	r18, 0x08	; 8
    3d90:	60 f3       	brcs	.-40     	; 0x3d6a <nibbleToLCDstring+0x224>
    3d92:	22 c0       	rjmp	.+68     	; 0x3dd8 <nibbleToLCDstring+0x292>
    3d94:	a4 ec       	ldi	r26, 0xC4	; 196
    3d96:	b5 e0       	ldi	r27, 0x05	; 5
    3d98:	8c 91       	ld	r24, X
    3d9a:	e5 e2       	ldi	r30, 0x25	; 37
    3d9c:	f2 e0       	ldi	r31, 0x02	; 2
    3d9e:	80 5d       	subi	r24, 0xD0	; 208
    3da0:	80 83       	st	Z, r24
    3da2:	11 96       	adiw	r26, 0x01	; 1
    3da4:	8c 91       	ld	r24, X
    3da6:	80 5c       	subi	r24, 0xC0	; 192
    3da8:	81 83       	std	Z+1, r24	; 0x01
    3daa:	12 82       	std	Z+2, r1	; 0x02
    3dac:	15 c0       	rjmp	.+42     	; 0x3dd8 <nibbleToLCDstring+0x292>
    3dae:	e4 ec       	ldi	r30, 0xC4	; 196
    3db0:	f5 e0       	ldi	r31, 0x05	; 5
    3db2:	90 81       	ld	r25, Z
    3db4:	81 81       	ldd	r24, Z+1	; 0x01
    3db6:	29 2f       	mov	r18, r25
    3db8:	28 2b       	or	r18, r24
    3dba:	31 f4       	brne	.+12     	; 0x3dc8 <nibbleToLCDstring+0x282>
    3dbc:	e5 e2       	ldi	r30, 0x25	; 37
    3dbe:	f2 e0       	ldi	r31, 0x02	; 2
    3dc0:	8d e2       	ldi	r24, 0x2D	; 45
    3dc2:	80 83       	st	Z, r24
    3dc4:	81 83       	std	Z+1, r24	; 0x01
    3dc6:	06 c0       	rjmp	.+12     	; 0x3dd4 <nibbleToLCDstring+0x28e>
    3dc8:	e5 e2       	ldi	r30, 0x25	; 37
    3dca:	f2 e0       	ldi	r31, 0x02	; 2
    3dcc:	90 5d       	subi	r25, 0xD0	; 208
    3dce:	90 83       	st	Z, r25
    3dd0:	80 5d       	subi	r24, 0xD0	; 208
    3dd2:	81 83       	std	Z+1, r24	; 0x01
    3dd4:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	1f 91       	pop	r17
    3dde:	0f 91       	pop	r16
    3de0:	08 95       	ret

00003de2 <LCDStringOut>:
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	8e e1       	ldi	r24, 0x1E	; 30
    3dea:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    3dee:	c0 e0       	ldi	r28, 0x00	; 0
    3df0:	05 e2       	ldi	r16, 0x25	; 37
    3df2:	12 e0       	ldi	r17, 0x02	; 2
    3df4:	0b c0       	rjmp	.+22     	; 0x3e0c <LCDStringOut+0x2a>
    3df6:	f8 01       	movw	r30, r16
    3df8:	80 81       	ld	r24, Z
    3dfa:	88 23       	and	r24, r24
    3dfc:	19 f0       	breq	.+6      	; 0x3e04 <LCDStringOut+0x22>
    3dfe:	0f 5f       	subi	r16, 0xFF	; 255
    3e00:	1f 4f       	sbci	r17, 0xFF	; 255
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <LCDStringOut+0x24>
    3e04:	80 e2       	ldi	r24, 0x20	; 32
    3e06:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    3e0a:	cf 5f       	subi	r28, 0xFF	; 255
    3e0c:	ca 30       	cpi	r28, 0x0A	; 10
    3e0e:	98 f3       	brcs	.-26     	; 0x3df6 <LCDStringOut+0x14>
    3e10:	cf 91       	pop	r28
    3e12:	1f 91       	pop	r17
    3e14:	0f 91       	pop	r16
    3e16:	08 95       	ret

00003e18 <nibbleCheckOvfl>:
    3e18:	8a 30       	cpi	r24, 0x0A	; 10
    3e1a:	1c f4       	brge	.+6      	; 0x3e22 <nibbleCheckOvfl+0xa>
    3e1c:	88 23       	and	r24, r24
    3e1e:	1c f0       	brlt	.+6      	; 0x3e26 <nibbleCheckOvfl+0xe>
    3e20:	08 95       	ret
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	08 95       	ret
    3e26:	89 e0       	ldi	r24, 0x09	; 9
    3e28:	08 95       	ret

00003e2a <nibbleChange>:
    3e2a:	0f 93       	push	r16
    3e2c:	1f 93       	push	r17
    3e2e:	cf 93       	push	r28
    3e30:	df 93       	push	r29
    3e32:	c8 2f       	mov	r28, r24
    3e34:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3e38:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3e3c:	31 96       	adiw	r30, 0x01	; 1
    3e3e:	84 91       	lpm	r24, Z
    3e40:	28 2f       	mov	r18, r24
    3e42:	20 71       	andi	r18, 0x10	; 16
    3e44:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3e48:	8e 2f       	mov	r24, r30
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	32 97       	sbiw	r30, 0x02	; 2
    3e50:	ed 30       	cpi	r30, 0x0D	; 13
    3e52:	f1 05       	cpc	r31, r1
    3e54:	08 f0       	brcs	.+2      	; 0x3e58 <nibbleChange+0x2e>
    3e56:	93 c1       	rjmp	.+806    	; 0x417e <nibbleChange+0x354>
    3e58:	88 27       	eor	r24, r24
    3e5a:	e4 57       	subi	r30, 0x74	; 116
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e60:	0c 94 fb 37 	jmp	0x6ff6	; 0x6ff6 <__tablejump2__>
    3e64:	d0 e0       	ldi	r29, 0x00	; 0
    3e66:	cc 53       	subi	r28, 0x3C	; 60
    3e68:	da 4f       	sbci	r29, 0xFA	; 250
    3e6a:	88 81       	ld	r24, Y
    3e6c:	68 0f       	add	r22, r24
    3e6e:	6f 70       	andi	r22, 0x0F	; 15
    3e70:	68 83       	st	Y, r22
    3e72:	85 c1       	rjmp	.+778    	; 0x417e <nibbleChange+0x354>
    3e74:	21 11       	cpse	r18, r1
    3e76:	1b c0       	rjmp	.+54     	; 0x3eae <nibbleChange+0x84>
    3e78:	61 30       	cpi	r22, 0x01	; 1
    3e7a:	41 f4       	brne	.+16     	; 0x3e8c <nibbleChange+0x62>
    3e7c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3e80:	80 31       	cpi	r24, 0x10	; 16
    3e82:	20 f0       	brcs	.+8      	; 0x3e8c <nibbleChange+0x62>
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3e8a:	79 c1       	rjmp	.+754    	; 0x417e <nibbleChange+0x354>
    3e8c:	6f 3f       	cpi	r22, 0xFF	; 255
    3e8e:	49 f4       	brne	.+18     	; 0x3ea2 <nibbleChange+0x78>
    3e90:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3e94:	82 50       	subi	r24, 0x02	; 2
    3e96:	8f 30       	cpi	r24, 0x0F	; 15
    3e98:	20 f0       	brcs	.+8      	; 0x3ea2 <nibbleChange+0x78>
    3e9a:	80 e1       	ldi	r24, 0x10	; 16
    3e9c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ea0:	6e c1       	rjmp	.+732    	; 0x417e <nibbleChange+0x354>
    3ea2:	e4 ec       	ldi	r30, 0xC4	; 196
    3ea4:	f5 e0       	ldi	r31, 0x05	; 5
    3ea6:	80 81       	ld	r24, Z
    3ea8:	68 0f       	add	r22, r24
    3eaa:	60 83       	st	Z, r22
    3eac:	68 c1       	rjmp	.+720    	; 0x417e <nibbleChange+0x354>
    3eae:	61 30       	cpi	r22, 0x01	; 1
    3eb0:	41 f4       	brne	.+16     	; 0x3ec2 <nibbleChange+0x98>
    3eb2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3eb6:	80 31       	cpi	r24, 0x10	; 16
    3eb8:	21 f4       	brne	.+8      	; 0x3ec2 <nibbleChange+0x98>
    3eba:	8f ef       	ldi	r24, 0xFF	; 255
    3ebc:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ec0:	5e c1       	rjmp	.+700    	; 0x417e <nibbleChange+0x354>
    3ec2:	61 30       	cpi	r22, 0x01	; 1
    3ec4:	41 f4       	brne	.+16     	; 0x3ed6 <nibbleChange+0xac>
    3ec6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3eca:	8f 3f       	cpi	r24, 0xFF	; 255
    3ecc:	21 f4       	brne	.+8      	; 0x3ed6 <nibbleChange+0xac>
    3ece:	81 e0       	ldi	r24, 0x01	; 1
    3ed0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ed4:	54 c1       	rjmp	.+680    	; 0x417e <nibbleChange+0x354>
    3ed6:	6f 3f       	cpi	r22, 0xFF	; 255
    3ed8:	41 f4       	brne	.+16     	; 0x3eea <nibbleChange+0xc0>
    3eda:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ede:	8f 3f       	cpi	r24, 0xFF	; 255
    3ee0:	21 f4       	brne	.+8      	; 0x3eea <nibbleChange+0xc0>
    3ee2:	80 e1       	ldi	r24, 0x10	; 16
    3ee4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ee8:	4a c1       	rjmp	.+660    	; 0x417e <nibbleChange+0x354>
    3eea:	6f 3f       	cpi	r22, 0xFF	; 255
    3eec:	41 f4       	brne	.+16     	; 0x3efe <nibbleChange+0xd4>
    3eee:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ef2:	81 30       	cpi	r24, 0x01	; 1
    3ef4:	21 f4       	brne	.+8      	; 0x3efe <nibbleChange+0xd4>
    3ef6:	8f ef       	ldi	r24, 0xFF	; 255
    3ef8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3efc:	40 c1       	rjmp	.+640    	; 0x417e <nibbleChange+0x354>
    3efe:	e4 ec       	ldi	r30, 0xC4	; 196
    3f00:	f5 e0       	ldi	r31, 0x05	; 5
    3f02:	80 81       	ld	r24, Z
    3f04:	68 0f       	add	r22, r24
    3f06:	60 83       	st	Z, r22
    3f08:	3a c1       	rjmp	.+628    	; 0x417e <nibbleChange+0x354>
    3f0a:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3f0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <nibbleChange+0xea>
    3f12:	c1 e0       	ldi	r28, 0x01	; 1
    3f14:	c1 11       	cpse	r28, r1
    3f16:	16 c0       	rjmp	.+44     	; 0x3f44 <nibbleChange+0x11a>
    3f18:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3f1c:	8c 30       	cpi	r24, 0x0C	; 12
    3f1e:	50 f4       	brcc	.+20     	; 0x3f34 <nibbleChange+0x10a>
    3f20:	8b 30       	cpi	r24, 0x0B	; 11
    3f22:	11 f4       	brne	.+4      	; 0x3f28 <nibbleChange+0xfe>
    3f24:	61 30       	cpi	r22, 0x01	; 1
    3f26:	41 f0       	breq	.+16     	; 0x3f38 <nibbleChange+0x10e>
    3f28:	81 11       	cpse	r24, r1
    3f2a:	02 c0       	rjmp	.+4      	; 0x3f30 <nibbleChange+0x106>
    3f2c:	6f 3f       	cpi	r22, 0xFF	; 255
    3f2e:	31 f0       	breq	.+12     	; 0x3f3c <nibbleChange+0x112>
    3f30:	68 0f       	add	r22, r24
    3f32:	05 c0       	rjmp	.+10     	; 0x3f3e <nibbleChange+0x114>
    3f34:	60 e0       	ldi	r22, 0x00	; 0
    3f36:	03 c0       	rjmp	.+6      	; 0x3f3e <nibbleChange+0x114>
    3f38:	60 e0       	ldi	r22, 0x00	; 0
    3f3a:	01 c0       	rjmp	.+2      	; 0x3f3e <nibbleChange+0x114>
    3f3c:	6b e0       	ldi	r22, 0x0B	; 11
    3f3e:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    3f42:	2b c0       	rjmp	.+86     	; 0x3f9a <nibbleChange+0x170>
    3f44:	21 11       	cpse	r18, r1
    3f46:	0a c0       	rjmp	.+20     	; 0x3f5c <nibbleChange+0x132>
    3f48:	81 11       	cpse	r24, r1
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <nibbleChange+0x126>
    3f4c:	6f 3f       	cpi	r22, 0xFF	; 255
    3f4e:	c1 f0       	breq	.+48     	; 0x3f80 <nibbleChange+0x156>
    3f50:	8a 30       	cpi	r24, 0x0A	; 10
    3f52:	11 f4       	brne	.+4      	; 0x3f58 <nibbleChange+0x12e>
    3f54:	61 30       	cpi	r22, 0x01	; 1
    3f56:	b1 f0       	breq	.+44     	; 0x3f84 <nibbleChange+0x15a>
    3f58:	68 0f       	add	r22, r24
    3f5a:	1d c0       	rjmp	.+58     	; 0x3f96 <nibbleChange+0x16c>
    3f5c:	81 11       	cpse	r24, r1
    3f5e:	02 c0       	rjmp	.+4      	; 0x3f64 <nibbleChange+0x13a>
    3f60:	6f 3f       	cpi	r22, 0xFF	; 255
    3f62:	91 f0       	breq	.+36     	; 0x3f88 <nibbleChange+0x15e>
    3f64:	8a 30       	cpi	r24, 0x0A	; 10
    3f66:	11 f4       	brne	.+4      	; 0x3f6c <nibbleChange+0x142>
    3f68:	61 30       	cpi	r22, 0x01	; 1
    3f6a:	81 f0       	breq	.+32     	; 0x3f8c <nibbleChange+0x162>
    3f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f6e:	11 f4       	brne	.+4      	; 0x3f74 <nibbleChange+0x14a>
    3f70:	61 30       	cpi	r22, 0x01	; 1
    3f72:	71 f0       	breq	.+28     	; 0x3f90 <nibbleChange+0x166>
    3f74:	8f 3f       	cpi	r24, 0xFF	; 255
    3f76:	11 f4       	brne	.+4      	; 0x3f7c <nibbleChange+0x152>
    3f78:	6f 3f       	cpi	r22, 0xFF	; 255
    3f7a:	61 f0       	breq	.+24     	; 0x3f94 <nibbleChange+0x16a>
    3f7c:	68 0f       	add	r22, r24
    3f7e:	0b c0       	rjmp	.+22     	; 0x3f96 <nibbleChange+0x16c>
    3f80:	6a e0       	ldi	r22, 0x0A	; 10
    3f82:	09 c0       	rjmp	.+18     	; 0x3f96 <nibbleChange+0x16c>
    3f84:	60 e0       	ldi	r22, 0x00	; 0
    3f86:	07 c0       	rjmp	.+14     	; 0x3f96 <nibbleChange+0x16c>
    3f88:	6f ef       	ldi	r22, 0xFF	; 255
    3f8a:	05 c0       	rjmp	.+10     	; 0x3f96 <nibbleChange+0x16c>
    3f8c:	6f ef       	ldi	r22, 0xFF	; 255
    3f8e:	03 c0       	rjmp	.+6      	; 0x3f96 <nibbleChange+0x16c>
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	01 c0       	rjmp	.+2      	; 0x3f96 <nibbleChange+0x16c>
    3f94:	6a e0       	ldi	r22, 0x0A	; 10
    3f96:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    3f9a:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    3f9e:	9f 3f       	cpi	r25, 0xFF	; 255
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <nibbleChange+0x17a>
    3fa2:	ed c0       	rjmp	.+474    	; 0x417e <nibbleChange+0x354>
    3fa4:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3fa8:	8f 3f       	cpi	r24, 0xFF	; 255
    3faa:	09 f4       	brne	.+2      	; 0x3fae <nibbleChange+0x184>
    3fac:	e8 c0       	rjmp	.+464    	; 0x417e <nibbleChange+0x354>
    3fae:	28 2f       	mov	r18, r24
    3fb0:	22 0f       	add	r18, r18
    3fb2:	82 0f       	add	r24, r18
    3fb4:	28 2f       	mov	r18, r24
    3fb6:	22 0f       	add	r18, r18
    3fb8:	22 0f       	add	r18, r18
    3fba:	92 0f       	add	r25, r18
    3fbc:	0a f0       	brmi	.+2      	; 0x3fc0 <nibbleChange+0x196>
    3fbe:	df c0       	rjmp	.+446    	; 0x417e <nibbleChange+0x354>
    3fc0:	e4 ec       	ldi	r30, 0xC4	; 196
    3fc2:	f5 e0       	ldi	r31, 0x05	; 5
    3fc4:	87 e0       	ldi	r24, 0x07	; 7
    3fc6:	80 83       	st	Z, r24
    3fc8:	8a e0       	ldi	r24, 0x0A	; 10
    3fca:	81 83       	std	Z+1, r24	; 0x01
    3fcc:	d8 c0       	rjmp	.+432    	; 0x417e <nibbleChange+0x354>
    3fce:	c1 11       	cpse	r28, r1
    3fd0:	07 c0       	rjmp	.+14     	; 0x3fe0 <nibbleChange+0x1b6>
    3fd2:	e4 ec       	ldi	r30, 0xC4	; 196
    3fd4:	f5 e0       	ldi	r31, 0x05	; 5
    3fd6:	80 81       	ld	r24, Z
    3fd8:	68 0f       	add	r22, r24
    3fda:	67 70       	andi	r22, 0x07	; 7
    3fdc:	60 83       	st	Z, r22
    3fde:	cf c0       	rjmp	.+414    	; 0x417e <nibbleChange+0x354>
    3fe0:	d0 e0       	ldi	r29, 0x00	; 0
    3fe2:	04 ec       	ldi	r16, 0xC4	; 196
    3fe4:	15 e0       	ldi	r17, 0x05	; 5
    3fe6:	cc 53       	subi	r28, 0x3C	; 60
    3fe8:	da 4f       	sbci	r29, 0xFA	; 250
    3fea:	88 81       	ld	r24, Y
    3fec:	86 0f       	add	r24, r22
    3fee:	14 df       	rcall	.-472    	; 0x3e18 <nibbleCheckOvfl>
    3ff0:	88 83       	st	Y, r24
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	81 81       	ldd	r24, Z+1	; 0x01
    3ff6:	92 81       	ldd	r25, Z+2	; 0x02
    3ff8:	88 0f       	add	r24, r24
    3ffa:	28 2f       	mov	r18, r24
    3ffc:	22 0f       	add	r18, r18
    3ffe:	22 0f       	add	r18, r18
    4000:	82 0f       	add	r24, r18
    4002:	89 0f       	add	r24, r25
    4004:	80 32       	cpi	r24, 0x20	; 32
    4006:	2c f0       	brlt	.+10     	; 0x4012 <nibbleChange+0x1e8>
    4008:	83 e0       	ldi	r24, 0x03	; 3
    400a:	81 83       	std	Z+1, r24	; 0x01
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	82 83       	std	Z+2, r24	; 0x02
    4010:	b6 c0       	rjmp	.+364    	; 0x417e <nibbleChange+0x354>
    4012:	88 23       	and	r24, r24
    4014:	0c f0       	brlt	.+2      	; 0x4018 <nibbleChange+0x1ee>
    4016:	b3 c0       	rjmp	.+358    	; 0x417e <nibbleChange+0x354>
    4018:	e4 ec       	ldi	r30, 0xC4	; 196
    401a:	f5 e0       	ldi	r31, 0x05	; 5
    401c:	11 82       	std	Z+1, r1	; 0x01
    401e:	12 82       	std	Z+2, r1	; 0x02
    4020:	ae c0       	rjmp	.+348    	; 0x417e <nibbleChange+0x354>
    4022:	d0 e0       	ldi	r29, 0x00	; 0
    4024:	04 ec       	ldi	r16, 0xC4	; 196
    4026:	15 e0       	ldi	r17, 0x05	; 5
    4028:	cc 53       	subi	r28, 0x3C	; 60
    402a:	da 4f       	sbci	r29, 0xFA	; 250
    402c:	88 81       	ld	r24, Y
    402e:	86 0f       	add	r24, r22
    4030:	f3 de       	rcall	.-538    	; 0x3e18 <nibbleCheckOvfl>
    4032:	88 83       	st	Y, r24
    4034:	f8 01       	movw	r30, r16
    4036:	20 81       	ld	r18, Z
    4038:	81 81       	ldd	r24, Z+1	; 0x01
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	ac 01       	movw	r20, r24
    403e:	44 0f       	add	r20, r20
    4040:	55 1f       	adc	r21, r21
    4042:	88 0f       	add	r24, r24
    4044:	99 1f       	adc	r25, r25
    4046:	88 0f       	add	r24, r24
    4048:	99 1f       	adc	r25, r25
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	84 0f       	add	r24, r20
    4050:	95 1f       	adc	r25, r21
    4052:	f4 e6       	ldi	r31, 0x64	; 100
    4054:	2f 9f       	mul	r18, r31
    4056:	80 0d       	add	r24, r0
    4058:	91 1d       	adc	r25, r1
    405a:	11 24       	eor	r1, r1
    405c:	f8 01       	movw	r30, r16
    405e:	22 81       	ldd	r18, Z+2	; 0x02
    4060:	82 0f       	add	r24, r18
    4062:	91 1d       	adc	r25, r1
    4064:	8f 3f       	cpi	r24, 0xFF	; 255
    4066:	91 05       	cpc	r25, r1
    4068:	09 f0       	breq	.+2      	; 0x406c <nibbleChange+0x242>
    406a:	0c f4       	brge	.+2      	; 0x406e <nibbleChange+0x244>
    406c:	88 c0       	rjmp	.+272    	; 0x417e <nibbleChange+0x354>
    406e:	82 e0       	ldi	r24, 0x02	; 2
    4070:	80 83       	st	Z, r24
    4072:	85 e0       	ldi	r24, 0x05	; 5
    4074:	81 83       	std	Z+1, r24	; 0x01
    4076:	82 83       	std	Z+2, r24	; 0x02
    4078:	82 c0       	rjmp	.+260    	; 0x417e <nibbleChange+0x354>
    407a:	22 23       	and	r18, r18
    407c:	a1 f0       	breq	.+40     	; 0x40a6 <nibbleChange+0x27c>
    407e:	d0 e0       	ldi	r29, 0x00	; 0
    4080:	fe 01       	movw	r30, r28
    4082:	ec 53       	subi	r30, 0x3C	; 60
    4084:	fa 4f       	sbci	r31, 0xFA	; 250
    4086:	80 81       	ld	r24, Z
    4088:	68 0f       	add	r22, r24
    408a:	60 83       	st	Z, r22
    408c:	64 30       	cpi	r22, 0x04	; 4
    408e:	19 f4       	brne	.+6      	; 0x4096 <nibbleChange+0x26c>
    4090:	8f ef       	ldi	r24, 0xFF	; 255
    4092:	80 83       	st	Z, r24
    4094:	74 c0       	rjmp	.+232    	; 0x417e <nibbleChange+0x354>
    4096:	6e 3f       	cpi	r22, 0xFE	; 254
    4098:	09 f0       	breq	.+2      	; 0x409c <nibbleChange+0x272>
    409a:	71 c0       	rjmp	.+226    	; 0x417e <nibbleChange+0x354>
    409c:	cc 53       	subi	r28, 0x3C	; 60
    409e:	da 4f       	sbci	r29, 0xFA	; 250
    40a0:	83 e0       	ldi	r24, 0x03	; 3
    40a2:	88 83       	st	Y, r24
    40a4:	6c c0       	rjmp	.+216    	; 0x417e <nibbleChange+0x354>
    40a6:	d0 e0       	ldi	r29, 0x00	; 0
    40a8:	fe 01       	movw	r30, r28
    40aa:	ec 53       	subi	r30, 0x3C	; 60
    40ac:	fa 4f       	sbci	r31, 0xFA	; 250
    40ae:	80 81       	ld	r24, Z
    40b0:	81 11       	cpse	r24, r1
    40b2:	05 c0       	rjmp	.+10     	; 0x40be <nibbleChange+0x294>
    40b4:	6f 3f       	cpi	r22, 0xFF	; 255
    40b6:	19 f4       	brne	.+6      	; 0x40be <nibbleChange+0x294>
    40b8:	83 e0       	ldi	r24, 0x03	; 3
    40ba:	80 83       	st	Z, r24
    40bc:	60 c0       	rjmp	.+192    	; 0x417e <nibbleChange+0x354>
    40be:	83 30       	cpi	r24, 0x03	; 3
    40c0:	31 f4       	brne	.+12     	; 0x40ce <nibbleChange+0x2a4>
    40c2:	61 30       	cpi	r22, 0x01	; 1
    40c4:	21 f4       	brne	.+8      	; 0x40ce <nibbleChange+0x2a4>
    40c6:	cc 53       	subi	r28, 0x3C	; 60
    40c8:	da 4f       	sbci	r29, 0xFA	; 250
    40ca:	18 82       	st	Y, r1
    40cc:	58 c0       	rjmp	.+176    	; 0x417e <nibbleChange+0x354>
    40ce:	cc 53       	subi	r28, 0x3C	; 60
    40d0:	da 4f       	sbci	r29, 0xFA	; 250
    40d2:	68 0f       	add	r22, r24
    40d4:	68 83       	st	Y, r22
    40d6:	53 c0       	rjmp	.+166    	; 0x417e <nibbleChange+0x354>
    40d8:	d0 e0       	ldi	r29, 0x00	; 0
    40da:	cc 53       	subi	r28, 0x3C	; 60
    40dc:	da 4f       	sbci	r29, 0xFA	; 250
    40de:	88 81       	ld	r24, Y
    40e0:	68 0f       	add	r22, r24
    40e2:	63 70       	andi	r22, 0x03	; 3
    40e4:	68 83       	st	Y, r22
    40e6:	4b c0       	rjmp	.+150    	; 0x417e <nibbleChange+0x354>
    40e8:	e4 ec       	ldi	r30, 0xC4	; 196
    40ea:	f5 e0       	ldi	r31, 0x05	; 5
    40ec:	80 81       	ld	r24, Z
    40ee:	80 95       	com	r24
    40f0:	80 83       	st	Z, r24
    40f2:	45 c0       	rjmp	.+138    	; 0x417e <nibbleChange+0x354>
    40f4:	d0 e0       	ldi	r29, 0x00	; 0
    40f6:	81 e0       	ldi	r24, 0x01	; 1
    40f8:	61 fd       	sbrc	r22, 1
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	cc 53       	subi	r28, 0x3C	; 60
    40fe:	da 4f       	sbci	r29, 0xFA	; 250
    4100:	88 83       	st	Y, r24
    4102:	3d c0       	rjmp	.+122    	; 0x417e <nibbleChange+0x354>
    4104:	61 30       	cpi	r22, 0x01	; 1
    4106:	41 f4       	brne	.+16     	; 0x4118 <nibbleChange+0x2ee>
    4108:	d0 e0       	ldi	r29, 0x00	; 0
    410a:	cc 53       	subi	r28, 0x3C	; 60
    410c:	da 4f       	sbci	r29, 0xFA	; 250
    410e:	88 81       	ld	r24, Y
    4110:	87 70       	andi	r24, 0x07	; 7
    4112:	8f 5f       	subi	r24, 0xFF	; 255
    4114:	88 83       	st	Y, r24
    4116:	33 c0       	rjmp	.+102    	; 0x417e <nibbleChange+0x354>
    4118:	ec 2f       	mov	r30, r28
    411a:	f0 e0       	ldi	r31, 0x00	; 0
    411c:	ec 53       	subi	r30, 0x3C	; 60
    411e:	fa 4f       	sbci	r31, 0xFA	; 250
    4120:	80 81       	ld	r24, Z
    4122:	82 50       	subi	r24, 0x02	; 2
    4124:	87 70       	andi	r24, 0x07	; 7
    4126:	8f 5f       	subi	r24, 0xFF	; 255
    4128:	80 83       	st	Z, r24
    412a:	29 c0       	rjmp	.+82     	; 0x417e <nibbleChange+0x354>
    412c:	e4 ec       	ldi	r30, 0xC4	; 196
    412e:	f5 e0       	ldi	r31, 0x05	; 5
    4130:	90 81       	ld	r25, Z
    4132:	81 81       	ldd	r24, Z+1	; 0x01
    4134:	99 0f       	add	r25, r25
    4136:	29 2f       	mov	r18, r25
    4138:	22 0f       	add	r18, r18
    413a:	22 0f       	add	r18, r18
    413c:	92 0f       	add	r25, r18
    413e:	89 0f       	add	r24, r25
    4140:	c1 11       	cpse	r28, r1
    4142:	07 c0       	rjmp	.+14     	; 0x4152 <nibbleChange+0x328>
    4144:	66 0f       	add	r22, r22
    4146:	96 2f       	mov	r25, r22
    4148:	99 0f       	add	r25, r25
    414a:	99 0f       	add	r25, r25
    414c:	69 0f       	add	r22, r25
    414e:	68 0f       	add	r22, r24
    4150:	01 c0       	rjmp	.+2      	; 0x4154 <nibbleChange+0x32a>
    4152:	68 0f       	add	r22, r24
    4154:	66 23       	and	r22, r22
    4156:	1c f0       	brlt	.+6      	; 0x415e <nibbleChange+0x334>
    4158:	61 34       	cpi	r22, 0x41	; 65
    415a:	1c f4       	brge	.+6      	; 0x4162 <nibbleChange+0x338>
    415c:	03 c0       	rjmp	.+6      	; 0x4164 <nibbleChange+0x33a>
    415e:	60 e0       	ldi	r22, 0x00	; 0
    4160:	01 c0       	rjmp	.+2      	; 0x4164 <nibbleChange+0x33a>
    4162:	60 e0       	ldi	r22, 0x00	; 0
    4164:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    4168:	06 c0       	rjmp	.+12     	; 0x4176 <nibbleChange+0x34c>
    416a:	e4 ec       	ldi	r30, 0xC4	; 196
    416c:	f5 e0       	ldi	r31, 0x05	; 5
    416e:	80 81       	ld	r24, Z
    4170:	8f 5f       	subi	r24, 0xFF	; 255
    4172:	80 83       	st	Z, r24
    4174:	6a 50       	subi	r22, 0x0A	; 10
    4176:	6a 30       	cpi	r22, 0x0A	; 10
    4178:	c4 f7       	brge	.-16     	; 0x416a <nibbleChange+0x340>
    417a:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    417e:	df 91       	pop	r29
    4180:	cf 91       	pop	r28
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	08 95       	ret

00004188 <nibbleToData>:
    4188:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    418c:	8e 2f       	mov	r24, r30
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	fc 01       	movw	r30, r24
    4192:	32 97       	sbiw	r30, 0x02	; 2
    4194:	ed 30       	cpi	r30, 0x0D	; 13
    4196:	f1 05       	cpc	r31, r1
    4198:	08 f0       	brcs	.+2      	; 0x419c <nibbleToData+0x14>
    419a:	da c0       	rjmp	.+436    	; 0x4350 <nibbleToData+0x1c8>
    419c:	88 27       	eor	r24, r24
    419e:	e7 56       	subi	r30, 0x67	; 103
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	8f 4f       	sbci	r24, 0xFF	; 255
    41a4:	0c 94 fb 37 	jmp	0x6ff6	; 0x6ff6 <__tablejump2__>
    41a8:	e4 ec       	ldi	r30, 0xC4	; 196
    41aa:	f5 e0       	ldi	r31, 0x05	; 5
    41ac:	80 81       	ld	r24, Z
    41ae:	20 e1       	ldi	r18, 0x10	; 16
    41b0:	82 9f       	mul	r24, r18
    41b2:	c0 01       	movw	r24, r0
    41b4:	11 24       	eor	r1, r1
    41b6:	91 81       	ldd	r25, Z+1	; 0x01
    41b8:	9f 70       	andi	r25, 0x0F	; 15
    41ba:	89 2b       	or	r24, r25
    41bc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    41c0:	08 95       	ret
    41c2:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    41c6:	8f ef       	ldi	r24, 0xFF	; 255
    41c8:	89 0f       	add	r24, r25
    41ca:	80 31       	cpi	r24, 0x10	; 16
    41cc:	18 f0       	brcs	.+6      	; 0x41d4 <nibbleToData+0x4c>
    41ce:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    41d2:	08 95       	ret
    41d4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    41d8:	08 95       	ret
    41da:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    41de:	9f 3f       	cpi	r25, 0xFF	; 255
    41e0:	21 f0       	breq	.+8      	; 0x41ea <nibbleToData+0x62>
    41e2:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    41e6:	8f 3f       	cpi	r24, 0xFF	; 255
    41e8:	21 f4       	brne	.+8      	; 0x41f2 <nibbleToData+0x6a>
    41ea:	8f ef       	ldi	r24, 0xFF	; 255
    41ec:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    41f0:	08 95       	ret
    41f2:	28 2f       	mov	r18, r24
    41f4:	22 0f       	add	r18, r18
    41f6:	82 0f       	add	r24, r18
    41f8:	88 0f       	add	r24, r24
    41fa:	88 0f       	add	r24, r24
    41fc:	89 0f       	add	r24, r25
    41fe:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4202:	08 95       	ret
    4204:	e4 ec       	ldi	r30, 0xC4	; 196
    4206:	f5 e0       	ldi	r31, 0x05	; 5
    4208:	80 81       	ld	r24, Z
    420a:	30 e2       	ldi	r19, 0x20	; 32
    420c:	83 9f       	mul	r24, r19
    420e:	c0 01       	movw	r24, r0
    4210:	11 24       	eor	r1, r1
    4212:	21 81       	ldd	r18, Z+1	; 0x01
    4214:	32 81       	ldd	r19, Z+2	; 0x02
    4216:	22 0f       	add	r18, r18
    4218:	42 2f       	mov	r20, r18
    421a:	44 0f       	add	r20, r20
    421c:	44 0f       	add	r20, r20
    421e:	24 0f       	add	r18, r20
    4220:	23 0f       	add	r18, r19
    4222:	20 32       	cpi	r18, 0x20	; 32
    4224:	20 f0       	brcs	.+8      	; 0x422e <nibbleToData+0xa6>
    4226:	8f 61       	ori	r24, 0x1F	; 31
    4228:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    422c:	08 95       	ret
    422e:	82 2b       	or	r24, r18
    4230:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4234:	08 95       	ret
    4236:	e4 ec       	ldi	r30, 0xC4	; 196
    4238:	f5 e0       	ldi	r31, 0x05	; 5
    423a:	20 81       	ld	r18, Z
    423c:	81 81       	ldd	r24, Z+1	; 0x01
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	ac 01       	movw	r20, r24
    4242:	44 0f       	add	r20, r20
    4244:	55 1f       	adc	r21, r21
    4246:	88 0f       	add	r24, r24
    4248:	99 1f       	adc	r25, r25
    424a:	88 0f       	add	r24, r24
    424c:	99 1f       	adc	r25, r25
    424e:	88 0f       	add	r24, r24
    4250:	99 1f       	adc	r25, r25
    4252:	84 0f       	add	r24, r20
    4254:	95 1f       	adc	r25, r21
    4256:	34 e6       	ldi	r19, 0x64	; 100
    4258:	23 9f       	mul	r18, r19
    425a:	80 0d       	add	r24, r0
    425c:	91 1d       	adc	r25, r1
    425e:	11 24       	eor	r1, r1
    4260:	22 81       	ldd	r18, Z+2	; 0x02
    4262:	82 0f       	add	r24, r18
    4264:	91 1d       	adc	r25, r1
    4266:	8f 3f       	cpi	r24, 0xFF	; 255
    4268:	91 05       	cpc	r25, r1
    426a:	29 f0       	breq	.+10     	; 0x4276 <nibbleToData+0xee>
    426c:	20 f0       	brcs	.+8      	; 0x4276 <nibbleToData+0xee>
    426e:	8f ef       	ldi	r24, 0xFF	; 255
    4270:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4274:	08 95       	ret
    4276:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    427a:	08 95       	ret
    427c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4280:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4284:	84 30       	cpi	r24, 0x04	; 4
    4286:	08 f4       	brcc	.+2      	; 0x428a <nibbleToData+0x102>
    4288:	63 c0       	rjmp	.+198    	; 0x4350 <nibbleToData+0x1c8>
    428a:	8f ef       	ldi	r24, 0xFF	; 255
    428c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4290:	08 95       	ret
    4292:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4296:	83 70       	andi	r24, 0x03	; 3
    4298:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    429c:	08 95       	ret
    429e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42a2:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    42a6:	08 95       	ret
    42a8:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    42ac:	80 e0       	ldi	r24, 0x00	; 0
    42ae:	0c c0       	rjmp	.+24     	; 0x42c8 <nibbleToData+0x140>
    42b0:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    42b4:	99 0f       	add	r25, r25
    42b6:	e8 2f       	mov	r30, r24
    42b8:	f0 e0       	ldi	r31, 0x00	; 0
    42ba:	ec 53       	subi	r30, 0x3C	; 60
    42bc:	fa 4f       	sbci	r31, 0xFA	; 250
    42be:	20 81       	ld	r18, Z
    42c0:	92 0f       	add	r25, r18
    42c2:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    42c6:	8f 5f       	subi	r24, 0xFF	; 255
    42c8:	88 30       	cpi	r24, 0x08	; 8
    42ca:	90 f3       	brcs	.-28     	; 0x42b0 <nibbleToData+0x128>
    42cc:	08 95       	ret
    42ce:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    42d2:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    42d6:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    42da:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    42de:	a2 ea       	ldi	r26, 0xA2	; 162
    42e0:	b5 e0       	ldi	r27, 0x05	; 5
    42e2:	88 e0       	ldi	r24, 0x08	; 8
    42e4:	10 c0       	rjmp	.+32     	; 0x4306 <nibbleToData+0x17e>
    42e6:	82 50       	subi	r24, 0x02	; 2
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	ec 53       	subi	r30, 0x3C	; 60
    42ec:	fa 4f       	sbci	r31, 0xFA	; 250
    42ee:	90 81       	ld	r25, Z
    42f0:	e8 2f       	mov	r30, r24
    42f2:	f0 e0       	ldi	r31, 0x00	; 0
    42f4:	ec 53       	subi	r30, 0x3C	; 60
    42f6:	fa 4f       	sbci	r31, 0xFA	; 250
    42f8:	20 81       	ld	r18, Z
    42fa:	30 e1       	ldi	r19, 0x10	; 16
    42fc:	23 9f       	mul	r18, r19
    42fe:	90 0d       	add	r25, r0
    4300:	11 24       	eor	r1, r1
    4302:	9c 93       	st	X, r25
    4304:	11 96       	adiw	r26, 0x01	; 1
    4306:	ef ef       	ldi	r30, 0xFF	; 255
    4308:	e8 0f       	add	r30, r24
    430a:	81 11       	cpse	r24, r1
    430c:	ec cf       	rjmp	.-40     	; 0x42e6 <nibbleToData+0x15e>
    430e:	08 95       	ret
    4310:	e4 ec       	ldi	r30, 0xC4	; 196
    4312:	f5 e0       	ldi	r31, 0x05	; 5
    4314:	20 81       	ld	r18, Z
    4316:	91 81       	ldd	r25, Z+1	; 0x01
    4318:	89 2f       	mov	r24, r25
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	01 97       	sbiw	r24, 0x01	; 1
    431e:	88 0f       	add	r24, r24
    4320:	99 1f       	adc	r25, r25
    4322:	88 0f       	add	r24, r24
    4324:	99 1f       	adc	r25, r25
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	9f ef       	ldi	r25, 0xFF	; 255
    432c:	92 0f       	add	r25, r18
    432e:	89 2b       	or	r24, r25
    4330:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4334:	08 95       	ret
    4336:	e4 ec       	ldi	r30, 0xC4	; 196
    4338:	f5 e0       	ldi	r31, 0x05	; 5
    433a:	80 81       	ld	r24, Z
    433c:	91 81       	ldd	r25, Z+1	; 0x01
    433e:	88 0f       	add	r24, r24
    4340:	28 2f       	mov	r18, r24
    4342:	22 0f       	add	r18, r18
    4344:	22 0f       	add	r18, r18
    4346:	82 0f       	add	r24, r18
    4348:	89 0f       	add	r24, r25
    434a:	81 50       	subi	r24, 0x01	; 1
    434c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4350:	08 95       	ret

00004352 <menuTextOut>:
    4352:	0f 93       	push	r16
    4354:	1f 93       	push	r17
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	8c 01       	movw	r16, r24
    435c:	d6 2f       	mov	r29, r22
    435e:	c0 e0       	ldi	r28, 0x00	; 0
    4360:	0c c0       	rjmp	.+24     	; 0x437a <menuTextOut+0x28>
    4362:	f8 01       	movw	r30, r16
    4364:	84 91       	lpm	r24, Z
    4366:	88 23       	and	r24, r24
    4368:	19 f0       	breq	.+6      	; 0x4370 <menuTextOut+0x1e>
    436a:	0f 5f       	subi	r16, 0xFF	; 255
    436c:	1f 4f       	sbci	r17, 0xFF	; 255
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <menuTextOut+0x22>
    4370:	8d 2f       	mov	r24, r29
    4372:	d0 e2       	ldi	r29, 0x20	; 32
    4374:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    4378:	cf 5f       	subi	r28, 0xFF	; 255
    437a:	ca 30       	cpi	r28, 0x0A	; 10
    437c:	90 f3       	brcs	.-28     	; 0x4362 <menuTextOut+0x10>
    437e:	df 91       	pop	r29
    4380:	cf 91       	pop	r28
    4382:	1f 91       	pop	r17
    4384:	0f 91       	pop	r16
    4386:	08 95       	ret

00004388 <menuParentMenuToLCD>:
    4388:	80 e4       	ldi	r24, 0x40	; 64
    438a:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    438e:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4392:	e1 11       	cpse	r30, r1
    4394:	07 c0       	rjmp	.+14     	; 0x43a4 <menuParentMenuToLCD+0x1c>
    4396:	6a e3       	ldi	r22, 0x3A	; 58
    4398:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    439c:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    43a0:	d8 cf       	rjmp	.-80     	; 0x4352 <menuTextOut>
    43a2:	08 95       	ret
    43a4:	f0 e0       	ldi	r31, 0x00	; 0
    43a6:	31 97       	sbiw	r30, 0x01	; 1
    43a8:	ee 0f       	add	r30, r30
    43aa:	ff 1f       	adc	r31, r31
    43ac:	e5 58       	subi	r30, 0x85	; 133
    43ae:	fa 4f       	sbci	r31, 0xFA	; 250
    43b0:	80 81       	ld	r24, Z
    43b2:	91 81       	ldd	r25, Z+1	; 0x01
    43b4:	6a e3       	ldi	r22, 0x3A	; 58
    43b6:	02 96       	adiw	r24, 0x02	; 2
    43b8:	cc cf       	rjmp	.-104    	; 0x4352 <menuTextOut>
    43ba:	08 95       	ret

000043bc <menuDisplayValue>:
    43bc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    43c0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    43c4:	84 91       	lpm	r24, Z
    43c6:	8f 73       	andi	r24, 0x3F	; 63
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	02 97       	sbiw	r24, 0x02	; 2
    43cc:	1c f0       	brlt	.+6      	; 0x43d4 <menuDisplayValue+0x18>
    43ce:	c8 da       	rcall	.-2672   	; 0x3960 <dataToNibbles>
    43d0:	ba db       	rcall	.-2188   	; 0x3b46 <nibbleToLCDstring>
    43d2:	07 cd       	rjmp	.-1522   	; 0x3de2 <LCDStringOut>
    43d4:	08 95       	ret

000043d6 <menuCursorSetDataNibble>:
    43d6:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    43da:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    43de:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    43e2:	e8 0f       	add	r30, r24
    43e4:	f1 1d       	adc	r31, r1
    43e6:	31 96       	adiw	r30, 0x01	; 1
    43e8:	84 91       	lpm	r24, Z
    43ea:	82 5e       	subi	r24, 0xE2	; 226
    43ec:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    43f0:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    43f4:	30 e0       	ldi	r19, 0x00	; 0
    43f6:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    43fa:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    43fe:	84 91       	lpm	r24, Z
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	28 17       	cp	r18, r24
    4406:	39 07       	cpc	r19, r25
    4408:	14 f4       	brge	.+4      	; 0x440e <menuCursorSetDataNibble+0x38>
    440a:	68 da       	rcall	.-2864   	; 0x38dc <softkeyRight>
    440c:	03 c0       	rjmp	.+6      	; 0x4414 <menuCursorSetDataNibble+0x3e>
    440e:	83 e0       	ldi	r24, 0x03	; 3
    4410:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    4414:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4418:	88 23       	and	r24, r24
    441a:	11 f0       	breq	.+4      	; 0x4420 <menuCursorSetDataNibble+0x4a>
    441c:	59 da       	rcall	.-2894   	; 0x38d0 <softkeyLeft>
    441e:	03 c0       	rjmp	.+6      	; 0x4426 <menuCursorSetDataNibble+0x50>
    4420:	82 e0       	ldi	r24, 0x02	; 2
    4422:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    4426:	78 da       	rcall	.-2832   	; 0x3918 <softkeyPlus>
    4428:	89 da       	rcall	.-2798   	; 0x393c <softkeyMinus>
    442a:	0c 94 98 37 	jmp	0x6f30	; 0x6f30 <keylabel_toLCD>
    442e:	08 95       	ret

00004430 <menuCursorSetExtra>:
    4430:	84 e1       	ldi	r24, 0x14	; 20
    4432:	0c 94 48 12 	jmp	0x2490	; 0x2490 <lcd_goto>
    4436:	08 95       	ret

00004438 <menuOnEnterStatusMidiIn>:
    4438:	0f 93       	push	r16
    443a:	1f 93       	push	r17
    443c:	cf 93       	push	r28
    443e:	f8 df       	rcall	.-16     	; 0x4430 <menuCursorSetExtra>
    4440:	89 ec       	ldi	r24, 0xC9	; 201
    4442:	93 e0       	ldi	r25, 0x03	; 3
    4444:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    4448:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <midiRxBytesCount>
    444c:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <midiRxBytesCount+0x1>
    4450:	0e 94 81 36 	call	0x6d02	; 0x6d02 <lcd_wordout>
    4454:	8d e2       	ldi	r24, 0x2D	; 45
    4456:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    445a:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <midiRxBytesCount>
    445e:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <midiRxBytesCount+0x1>
    4462:	04 97       	sbiw	r24, 0x04	; 4
    4464:	30 f4       	brcc	.+12     	; 0x4472 <menuOnEnterStatusMidiIn+0x3a>
    4466:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <midiRxBytesCount>
    446a:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <midiRxBytesCount+0x1>
    446e:	c8 2f       	mov	r28, r24
    4470:	01 c0       	rjmp	.+2      	; 0x4474 <menuOnEnterStatusMidiIn+0x3c>
    4472:	c4 e0       	ldi	r28, 0x04	; 4
    4474:	00 91 37 0c 	lds	r16, 0x0C37	; 0x800c37 <midiRxInIndex>
    4478:	10 e0       	ldi	r17, 0x00	; 0
    447a:	0c 50       	subi	r16, 0x0C	; 12
    447c:	14 4f       	sbci	r17, 0xF4	; 244
    447e:	13 c0       	rjmp	.+38     	; 0x44a6 <menuOnEnterStatusMidiIn+0x6e>
    4480:	8b e0       	ldi	r24, 0x0B	; 11
    4482:	05 3f       	cpi	r16, 0xF5	; 245
    4484:	18 07       	cpc	r17, r24
    4486:	10 f0       	brcs	.+4      	; 0x448c <menuOnEnterStatusMidiIn+0x54>
    4488:	f8 01       	movw	r30, r16
    448a:	02 c0       	rjmp	.+4      	; 0x4490 <menuOnEnterStatusMidiIn+0x58>
    448c:	e4 e1       	ldi	r30, 0x14	; 20
    448e:	fc e0       	ldi	r31, 0x0C	; 12
    4490:	8f 01       	movw	r16, r30
    4492:	01 50       	subi	r16, 0x01	; 1
    4494:	11 09       	sbc	r17, r1
    4496:	80 81       	ld	r24, Z
    4498:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <lcd_hexout>
    449c:	c1 50       	subi	r28, 0x01	; 1
    449e:	19 f0       	breq	.+6      	; 0x44a6 <menuOnEnterStatusMidiIn+0x6e>
    44a0:	80 e2       	ldi	r24, 0x20	; 32
    44a2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    44a6:	c1 11       	cpse	r28, r1
    44a8:	eb cf       	rjmp	.-42     	; 0x4480 <menuOnEnterStatusMidiIn+0x48>
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	cf 91       	pop	r28
    44ae:	1f 91       	pop	r17
    44b0:	0f 91       	pop	r16
    44b2:	08 95       	ret

000044b4 <menuOnEnterStatusMidiOut>:
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
    44ba:	ba df       	rcall	.-140    	; 0x4430 <menuCursorSetExtra>
    44bc:	84 ec       	ldi	r24, 0xC4	; 196
    44be:	93 e0       	ldi	r25, 0x03	; 3
    44c0:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    44c4:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <midiTxBytesCount>
    44c8:	90 91 80 0c 	lds	r25, 0x0C80	; 0x800c80 <midiTxBytesCount+0x1>
    44cc:	0e 94 81 36 	call	0x6d02	; 0x6d02 <lcd_wordout>
    44d0:	8d e2       	ldi	r24, 0x2D	; 45
    44d2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    44d6:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <midiTxBytesCount>
    44da:	90 91 80 0c 	lds	r25, 0x0C80	; 0x800c80 <midiTxBytesCount+0x1>
    44de:	04 97       	sbiw	r24, 0x04	; 4
    44e0:	30 f4       	brcc	.+12     	; 0x44ee <menuOnEnterStatusMidiOut+0x3a>
    44e2:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <midiTxBytesCount>
    44e6:	90 91 80 0c 	lds	r25, 0x0C80	; 0x800c80 <midiTxBytesCount+0x1>
    44ea:	c8 2f       	mov	r28, r24
    44ec:	01 c0       	rjmp	.+2      	; 0x44f0 <menuOnEnterStatusMidiOut+0x3c>
    44ee:	c4 e0       	ldi	r28, 0x04	; 4
    44f0:	00 91 eb 0b 	lds	r16, 0x0BEB	; 0x800beb <midiTxInIndex>
    44f4:	10 e0       	ldi	r17, 0x00	; 0
    44f6:	0c 5e       	subi	r16, 0xEC	; 236
    44f8:	13 4f       	sbci	r17, 0xF3	; 243
    44fa:	13 c0       	rjmp	.+38     	; 0x4522 <menuOnEnterStatusMidiOut+0x6e>
    44fc:	8c e0       	ldi	r24, 0x0C	; 12
    44fe:	05 31       	cpi	r16, 0x15	; 21
    4500:	18 07       	cpc	r17, r24
    4502:	10 f0       	brcs	.+4      	; 0x4508 <menuOnEnterStatusMidiOut+0x54>
    4504:	f8 01       	movw	r30, r16
    4506:	02 c0       	rjmp	.+4      	; 0x450c <menuOnEnterStatusMidiOut+0x58>
    4508:	e4 e3       	ldi	r30, 0x34	; 52
    450a:	fc e0       	ldi	r31, 0x0C	; 12
    450c:	8f 01       	movw	r16, r30
    450e:	01 50       	subi	r16, 0x01	; 1
    4510:	11 09       	sbc	r17, r1
    4512:	80 81       	ld	r24, Z
    4514:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <lcd_hexout>
    4518:	c1 50       	subi	r28, 0x01	; 1
    451a:	19 f0       	breq	.+6      	; 0x4522 <menuOnEnterStatusMidiOut+0x6e>
    451c:	80 e2       	ldi	r24, 0x20	; 32
    451e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    4522:	c1 11       	cpse	r28, r1
    4524:	eb cf       	rjmp	.-42     	; 0x44fc <menuOnEnterStatusMidiOut+0x48>
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	cf 91       	pop	r28
    452a:	1f 91       	pop	r17
    452c:	0f 91       	pop	r16
    452e:	08 95       	ret

00004530 <menuOnEnterLogDisp>:
    4530:	0f 93       	push	r16
    4532:	1f 93       	push	r17
    4534:	cf 93       	push	r28
    4536:	8f 3f       	cpi	r24, 0xFF	; 255
    4538:	a9 f4       	brne	.+42     	; 0x4564 <menuOnEnterLogDisp+0x34>
    453a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <log_count>
    453e:	81 50       	subi	r24, 0x01	; 1
    4540:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2954>
    4544:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.2955>
    4548:	66 ea       	ldi	r22, 0xA6	; 166
    454a:	71 e1       	ldi	r23, 0x11	; 17
    454c:	80 e0       	ldi	r24, 0x00	; 0
    454e:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    4552:	60 ea       	ldi	r22, 0xA0	; 160
    4554:	71 e1       	ldi	r23, 0x11	; 17
    4556:	81 e0       	ldi	r24, 0x01	; 1
    4558:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    455c:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
    4560:	cf ef       	ldi	r28, 0xFF	; 255
    4562:	2f c0       	rjmp	.+94     	; 0x45c2 <menuOnEnterLogDisp+0x92>
    4564:	84 30       	cpi	r24, 0x04	; 4
    4566:	49 f4       	brne	.+18     	; 0x457a <menuOnEnterLogDisp+0x4a>
    4568:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2954>
    456c:	88 23       	and	r24, r24
    456e:	21 f1       	breq	.+72     	; 0x45b8 <menuOnEnterLogDisp+0x88>
    4570:	81 50       	subi	r24, 0x01	; 1
    4572:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2954>
    4576:	cf ef       	ldi	r28, 0xFF	; 255
    4578:	24 c0       	rjmp	.+72     	; 0x45c2 <menuOnEnterLogDisp+0x92>
    457a:	81 30       	cpi	r24, 0x01	; 1
    457c:	91 f4       	brne	.+36     	; 0x45a2 <menuOnEnterLogDisp+0x72>
    457e:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2954>
    4582:	10 e0       	ldi	r17, 0x00	; 0
    4584:	0f 5f       	subi	r16, 0xFF	; 255
    4586:	1f 4f       	sbci	r17, 0xFF	; 255
    4588:	0e 94 d5 12 	call	0x25aa	; 0x25aa <log_count>
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	08 17       	cp	r16, r24
    4590:	19 07       	cpc	r17, r25
    4592:	a4 f4       	brge	.+40     	; 0x45bc <menuOnEnterLogDisp+0x8c>
    4594:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2954>
    4598:	8f 5f       	subi	r24, 0xFF	; 255
    459a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2954>
    459e:	cf ef       	ldi	r28, 0xFF	; 255
    45a0:	10 c0       	rjmp	.+32     	; 0x45c2 <menuOnEnterLogDisp+0x92>
    45a2:	83 30       	cpi	r24, 0x03	; 3
    45a4:	11 f0       	breq	.+4      	; 0x45aa <menuOnEnterLogDisp+0x7a>
    45a6:	85 30       	cpi	r24, 0x05	; 5
    45a8:	59 f4       	brne	.+22     	; 0x45c0 <menuOnEnterLogDisp+0x90>
    45aa:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2955>
    45ae:	80 95       	com	r24
    45b0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.2955>
    45b4:	cf ef       	ldi	r28, 0xFF	; 255
    45b6:	05 c0       	rjmp	.+10     	; 0x45c2 <menuOnEnterLogDisp+0x92>
    45b8:	cf ef       	ldi	r28, 0xFF	; 255
    45ba:	03 c0       	rjmp	.+6      	; 0x45c2 <menuOnEnterLogDisp+0x92>
    45bc:	cf ef       	ldi	r28, 0xFF	; 255
    45be:	01 c0       	rjmp	.+2      	; 0x45c2 <menuOnEnterLogDisp+0x92>
    45c0:	c0 e0       	ldi	r28, 0x00	; 0
    45c2:	cf 3f       	cpi	r28, 0xFF	; 255
    45c4:	09 f0       	breq	.+2      	; 0x45c8 <menuOnEnterLogDisp+0x98>
    45c6:	54 c0       	rjmp	.+168    	; 0x4670 <menuOnEnterLogDisp+0x140>
    45c8:	33 df       	rcall	.-410    	; 0x4430 <menuCursorSetExtra>
    45ca:	0e 94 d5 12 	call	0x25aa	; 0x25aa <log_count>
    45ce:	81 11       	cpse	r24, r1
    45d0:	06 c0       	rjmp	.+12     	; 0x45de <menuOnEnterLogDisp+0xae>
    45d2:	85 e7       	ldi	r24, 0x75	; 117
    45d4:	93 e0       	ldi	r25, 0x03	; 3
    45d6:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    45da:	c0 e0       	ldi	r28, 0x00	; 0
    45dc:	1d c0       	rjmp	.+58     	; 0x4618 <menuOnEnterLogDisp+0xe8>
    45de:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2954>
    45e2:	8f 5f       	subi	r24, 0xFF	; 255
    45e4:	0e 94 42 35 	call	0x6a84	; 0x6a84 <lcd_dec2out>
    45e8:	8a e3       	ldi	r24, 0x3A	; 58
    45ea:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    45ee:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2955>
    45f2:	81 11       	cpse	r24, r1
    45f4:	08 c0       	rjmp	.+16     	; 0x4606 <menuOnEnterLogDisp+0xd6>
    45f6:	60 e2       	ldi	r22, 0x20	; 32
    45f8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2954>
    45fc:	0e 94 76 14 	call	0x28ec	; 0x28ec <log_getShortTextFromIndex>
    4600:	0e 94 aa 12 	call	0x2554	; 0x2554 <lcd_puts>
    4604:	06 c0       	rjmp	.+12     	; 0x4612 <menuOnEnterLogDisp+0xe2>
    4606:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2954>
    460a:	0e 94 1c 13 	call	0x2638	; 0x2638 <log_getErrorText>
    460e:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    4612:	0e 94 09 37 	call	0x6e12	; 0x6e12 <lcd_clrEol>
    4616:	0c df       	rcall	.-488    	; 0x4430 <menuCursorSetExtra>
    4618:	61 e0       	ldi	r22, 0x01	; 1
    461a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2955>
    461e:	8f 3f       	cpi	r24, 0xFF	; 255
    4620:	09 f0       	breq	.+2      	; 0x4624 <menuOnEnterLogDisp+0xf4>
    4622:	60 e0       	ldi	r22, 0x00	; 0
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <keylabel_statcheck>
    462a:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2954>
    462e:	10 e0       	ldi	r17, 0x00	; 0
    4630:	0f 5f       	subi	r16, 0xFF	; 255
    4632:	1f 4f       	sbci	r17, 0xFF	; 255
    4634:	0e 94 d5 12 	call	0x25aa	; 0x25aa <log_count>
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	08 17       	cp	r16, r24
    463c:	19 07       	cpc	r17, r25
    463e:	34 f4       	brge	.+12     	; 0x464c <menuOnEnterLogDisp+0x11c>
    4640:	60 ec       	ldi	r22, 0xC0	; 192
    4642:	71 e1       	ldi	r23, 0x11	; 17
    4644:	83 e0       	ldi	r24, 0x03	; 3
    4646:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    464a:	03 c0       	rjmp	.+6      	; 0x4652 <menuOnEnterLogDisp+0x122>
    464c:	83 e0       	ldi	r24, 0x03	; 3
    464e:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    4652:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2954>
    4656:	88 23       	and	r24, r24
    4658:	31 f0       	breq	.+12     	; 0x4666 <menuOnEnterLogDisp+0x136>
    465a:	6e eb       	ldi	r22, 0xBE	; 190
    465c:	71 e1       	ldi	r23, 0x11	; 17
    465e:	82 e0       	ldi	r24, 0x02	; 2
    4660:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
    4664:	03 c0       	rjmp	.+6      	; 0x466c <menuOnEnterLogDisp+0x13c>
    4666:	82 e0       	ldi	r24, 0x02	; 2
    4668:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    466c:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
    4670:	8c 2f       	mov	r24, r28
    4672:	cf 91       	pop	r28
    4674:	1f 91       	pop	r17
    4676:	0f 91       	pop	r16
    4678:	08 95       	ret

0000467a <menuCursorSetMenu>:
    467a:	8a e4       	ldi	r24, 0x4A	; 74
    467c:	0c 94 48 12 	jmp	0x2490	; 0x2490 <lcd_goto>
    4680:	08 95       	ret

00004682 <menuClearExtraDisp>:
    4682:	d6 de       	rcall	.-596    	; 0x4430 <menuCursorSetExtra>
    4684:	8a e0       	ldi	r24, 0x0A	; 10
    4686:	0c 94 fd 36 	jmp	0x6dfa	; 0x6dfa <lcd_blank>
    468a:	08 95       	ret

0000468c <menu_ClearDataDisp>:
    468c:	8e e1       	ldi	r24, 0x1E	; 30
    468e:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4692:	8a e0       	ldi	r24, 0x0A	; 10
    4694:	0c 94 fd 36 	jmp	0x6dfa	; 0x6dfa <lcd_blank>
    4698:	08 95       	ret

0000469a <menuClearMenuDisp>:
    469a:	80 e4       	ldi	r24, 0x40	; 64
    469c:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    46a0:	8a e0       	ldi	r24, 0x0A	; 10
    46a2:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
    46a6:	e9 df       	rcall	.-46     	; 0x467a <menuCursorSetMenu>
    46a8:	8a e0       	ldi	r24, 0x0A	; 10
    46aa:	0c 94 fd 36 	jmp	0x6dfa	; 0x6dfa <lcd_blank>
    46ae:	08 95       	ret

000046b0 <menu_ClearAllDisp>:
    46b0:	f4 df       	rcall	.-24     	; 0x469a <menuClearMenuDisp>
    46b2:	ec df       	rcall	.-40     	; 0x468c <menu_ClearDataDisp>
    46b4:	e6 cf       	rjmp	.-52     	; 0x4682 <menuClearExtraDisp>
    46b6:	08 95       	ret

000046b8 <menuCheckArrowDown>:
    46b8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    46bc:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    46c0:	84 91       	lpm	r24, Z
    46c2:	8f 73       	andi	r24, 0x3F	; 63
    46c4:	81 30       	cpi	r24, 0x01	; 1
    46c6:	11 f4       	brne	.+4      	; 0x46cc <menuCheckArrowDown+0x14>
    46c8:	0f c9       	rjmp	.-3554   	; 0x38e8 <softkeyDown>
    46ca:	08 95       	ret
    46cc:	3e 96       	adiw	r30, 0x0e	; 14
    46ce:	05 90       	lpm	r0, Z+
    46d0:	f4 91       	lpm	r31, Z
    46d2:	e0 2d       	mov	r30, r0
    46d4:	30 97       	sbiw	r30, 0x00	; 0
    46d6:	59 f0       	breq	.+22     	; 0x46ee <menuCheckArrowDown+0x36>
    46d8:	89 30       	cpi	r24, 0x09	; 9
    46da:	39 f4       	brne	.+14     	; 0x46ea <menuCheckArrowDown+0x32>
    46dc:	80 81       	ld	r24, Z
    46de:	81 11       	cpse	r24, r1
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <menuCheckArrowDown+0x2e>
    46e2:	08 c9       	rjmp	.-3568   	; 0x38f4 <softkeyOn>
    46e4:	08 95       	ret
    46e6:	0c c9       	rjmp	.-3560   	; 0x3900 <softkeyOff>
    46e8:	08 95       	ret
    46ea:	fe c8       	rjmp	.-3588   	; 0x38e8 <softkeyDown>
    46ec:	08 95       	ret
    46ee:	81 e0       	ldi	r24, 0x01	; 1
    46f0:	0c 94 84 37 	jmp	0x6f08	; 0x6f08 <keylabel_clr>
    46f4:	08 95       	ret

000046f6 <menuCurrMenuToLCD>:
    46f6:	cf 93       	push	r28
    46f8:	89 e4       	ldi	r24, 0x49	; 73
    46fa:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    46fe:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4702:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4706:	c4 91       	lpm	r28, Z
    4708:	c0 7c       	andi	r28, 0xC0	; 192
    470a:	c0 38       	cpi	r28, 0x80	; 128
    470c:	39 f4       	brne	.+14     	; 0x471c <menuCurrMenuToLCD+0x26>
    470e:	80 e2       	ldi	r24, 0x20	; 32
    4710:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    4714:	82 e0       	ldi	r24, 0x02	; 2
    4716:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    471a:	04 c0       	rjmp	.+8      	; 0x4724 <menuCurrMenuToLCD+0x2e>
    471c:	8f e7       	ldi	r24, 0x7F	; 127
    471e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    4722:	d6 d8       	rcall	.-3668   	; 0x38d0 <softkeyLeft>
    4724:	c0 3c       	cpi	r28, 0xC0	; 192
    4726:	29 f4       	brne	.+10     	; 0x4732 <menuCurrMenuToLCD+0x3c>
    4728:	83 e0       	ldi	r24, 0x03	; 3
    472a:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    472e:	c0 e2       	ldi	r28, 0x20	; 32
    4730:	02 c0       	rjmp	.+4      	; 0x4736 <menuCurrMenuToLCD+0x40>
    4732:	d4 d8       	rcall	.-3672   	; 0x38dc <softkeyRight>
    4734:	ce e7       	ldi	r28, 0x7E	; 126
    4736:	ea d8       	rcall	.-3628   	; 0x390c <softkeyUp>
    4738:	bf df       	rcall	.-130    	; 0x46b8 <menuCheckArrowDown>
    473a:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    473e:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4742:	6c 2f       	mov	r22, r28
    4744:	02 96       	adiw	r24, 0x02	; 2
    4746:	05 de       	rcall	.-1014   	; 0x4352 <menuTextOut>
    4748:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
    474c:	96 df       	rcall	.-212    	; 0x467a <menuCursorSetMenu>
    474e:	cf 91       	pop	r28
    4750:	08 95       	ret

00004752 <menuItemChanged>:
    4752:	8f ef       	ldi	r24, 0xFF	; 255
    4754:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4758:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    475c:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4760:	fc 01       	movw	r30, r24
    4762:	24 91       	lpm	r18, Z
    4764:	62 2f       	mov	r22, r18
    4766:	6f 73       	andi	r22, 0x3F	; 63
    4768:	62 30       	cpi	r22, 0x02	; 2
    476a:	08 f4       	brcc	.+2      	; 0x476e <menuItemChanged+0x1c>
    476c:	49 c0       	rjmp	.+146    	; 0x4800 <menuItemChanged+0xae>
    476e:	9c 01       	movw	r18, r24
    4770:	22 5f       	subi	r18, 0xF2	; 242
    4772:	3f 4f       	sbci	r19, 0xFF	; 255
    4774:	f9 01       	movw	r30, r18
    4776:	45 91       	lpm	r20, Z+
    4778:	55 91       	lpm	r21, Z+
    477a:	41 15       	cp	r20, r1
    477c:	51 05       	cpc	r21, r1
    477e:	09 f4       	brne	.+2      	; 0x4782 <menuItemChanged+0x30>
    4780:	3f c0       	rjmp	.+126    	; 0x4800 <menuItemChanged+0xae>
    4782:	e6 2f       	mov	r30, r22
    4784:	f0 e0       	ldi	r31, 0x00	; 0
    4786:	31 97       	sbiw	r30, 0x01	; 1
    4788:	9f 01       	movw	r18, r30
    478a:	22 0f       	add	r18, r18
    478c:	33 1f       	adc	r19, r19
    478e:	22 0f       	add	r18, r18
    4790:	33 1f       	adc	r19, r19
    4792:	22 0f       	add	r18, r18
    4794:	33 1f       	adc	r19, r19
    4796:	e2 0f       	add	r30, r18
    4798:	f3 1f       	adc	r31, r19
    479a:	e9 52       	subi	r30, 0x29	; 41
    479c:	fc 4f       	sbci	r31, 0xFC	; 252
    479e:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    47a2:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    47a6:	24 91       	lpm	r18, Z
    47a8:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    47ac:	fc 01       	movw	r30, r24
    47ae:	25 91       	lpm	r18, Z+
    47b0:	2f 73       	andi	r18, 0x3F	; 63
    47b2:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    47b6:	24 91       	lpm	r18, Z
    47b8:	22 23       	and	r18, r18
    47ba:	2c f4       	brge	.+10     	; 0x47c6 <menuItemChanged+0x74>
    47bc:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    47c0:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    47c4:	02 c0       	rjmp	.+4      	; 0x47ca <menuItemChanged+0x78>
    47c6:	20 e0       	ldi	r18, 0x00	; 0
    47c8:	30 e0       	ldi	r19, 0x00	; 0
    47ca:	24 0f       	add	r18, r20
    47cc:	35 1f       	adc	r19, r21
    47ce:	fc 01       	movw	r30, r24
    47d0:	84 91       	lpm	r24, Z
    47d2:	8f 73       	andi	r24, 0x3F	; 63
    47d4:	8b 30       	cpi	r24, 0x0B	; 11
    47d6:	71 f4       	brne	.+28     	; 0x47f4 <menuItemChanged+0xa2>
    47d8:	f9 01       	movw	r30, r18
    47da:	80 81       	ld	r24, Z
    47dc:	91 81       	ldd	r25, Z+1	; 0x01
    47de:	a2 81       	ldd	r26, Z+2	; 0x02
    47e0:	b3 81       	ldd	r27, Z+3	; 0x03
    47e2:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    47e6:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    47ea:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    47ee:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    47f2:	04 c0       	rjmp	.+8      	; 0x47fc <menuItemChanged+0xaa>
    47f4:	f9 01       	movw	r30, r18
    47f6:	80 81       	ld	r24, Z
    47f8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47fc:	df dd       	rcall	.-1090   	; 0x43bc <menuDisplayValue>
    47fe:	07 c0       	rjmp	.+14     	; 0x480e <menuItemChanged+0xbc>
    4800:	45 df       	rcall	.-374    	; 0x468c <menu_ClearDataDisp>
    4802:	87 ed       	ldi	r24, 0xD7	; 215
    4804:	93 e0       	ldi	r25, 0x03	; 3
    4806:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    480a:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    480e:	54 df       	rcall	.-344    	; 0x46b8 <menuCheckArrowDown>
    4810:	34 cf       	rjmp	.-408    	; 0x467a <menuCursorSetMenu>
    4812:	08 95       	ret

00004814 <menu_InitLCD>:
    4814:	36 df       	rcall	.-404    	; 0x4682 <menuClearExtraDisp>
    4816:	9d df       	rcall	.-198    	; 0x4752 <menuItemChanged>
    4818:	b7 dd       	rcall	.-1170   	; 0x4388 <menuParentMenuToLCD>
    481a:	6d df       	rcall	.-294    	; 0x46f6 <menuCurrMenuToLCD>
    481c:	0c 94 20 37 	jmp	0x6e40	; 0x6e40 <lcd_cursosblink>
    4820:	08 95       	ret

00004822 <menu_ProcessMessage>:
    4822:	cf 93       	push	r28
    4824:	c8 2f       	mov	r28, r24
    4826:	0e 94 20 37 	call	0x6e40	; 0x6e40 <lcd_cursosblink>
    482a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    482e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4832:	84 91       	lpm	r24, Z
    4834:	8f 73       	andi	r24, 0x3F	; 63
    4836:	81 30       	cpi	r24, 0x01	; 1
    4838:	29 f0       	breq	.+10     	; 0x4844 <menu_ProcessMessage+0x22>
    483a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    483e:	8f 3f       	cpi	r24, 0xFF	; 255
    4840:	09 f0       	breq	.+2      	; 0x4844 <menu_ProcessMessage+0x22>
    4842:	68 c1       	rjmp	.+720    	; 0x4b14 <menu_ProcessMessage+0x2f2>
    4844:	31 96       	adiw	r30, 0x01	; 1
    4846:	84 91       	lpm	r24, Z
    4848:	86 ff       	sbrs	r24, 6
    484a:	02 c0       	rjmp	.+4      	; 0x4850 <menu_ProcessMessage+0x2e>
    484c:	1a df       	rcall	.-460    	; 0x4682 <menuClearExtraDisp>
    484e:	15 df       	rcall	.-470    	; 0x467a <menuCursorSetMenu>
    4850:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4854:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4858:	cb 01       	movw	r24, r22
    485a:	01 96       	adiw	r24, 0x01	; 1
    485c:	fc 01       	movw	r30, r24
    485e:	84 91       	lpm	r24, Z
    4860:	98 2f       	mov	r25, r24
    4862:	90 72       	andi	r25, 0x20	; 32
    4864:	85 ff       	sbrs	r24, 5
    4866:	1f c0       	rjmp	.+62     	; 0x48a6 <menu_ProcessMessage+0x84>
    4868:	9b 01       	movw	r18, r22
    486a:	20 5f       	subi	r18, 0xF0	; 240
    486c:	3f 4f       	sbci	r19, 0xFF	; 255
    486e:	f9 01       	movw	r30, r18
    4870:	25 91       	lpm	r18, Z+
    4872:	35 91       	lpm	r19, Z+
    4874:	21 15       	cp	r18, r1
    4876:	31 05       	cpc	r19, r1
    4878:	b1 f0       	breq	.+44     	; 0x48a6 <menu_ProcessMessage+0x84>
    487a:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    487e:	4f 3f       	cpi	r20, 0xFF	; 255
    4880:	91 f0       	breq	.+36     	; 0x48a6 <menu_ProcessMessage+0x84>
    4882:	8c 2f       	mov	r24, r28
    4884:	f9 01       	movw	r30, r18
    4886:	19 95       	eicall
    4888:	8f 3f       	cpi	r24, 0xFF	; 255
    488a:	21 f4       	brne	.+8      	; 0x4894 <menu_ProcessMessage+0x72>
    488c:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	04 c2       	rjmp	.+1032   	; 0x4c9c <menu_ProcessMessage+0x47a>
    4894:	f6 de       	rcall	.-532    	; 0x4682 <menuClearExtraDisp>
    4896:	fa de       	rcall	.-524    	; 0x468c <menu_ClearDataDisp>
    4898:	f0 de       	rcall	.-544    	; 0x467a <menuCursorSetMenu>
    489a:	8f ef       	ldi	r24, 0xFF	; 255
    489c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    48a0:	2a df       	rcall	.-428    	; 0x46f6 <menuCurrMenuToLCD>
    48a2:	80 e0       	ldi	r24, 0x00	; 0
    48a4:	fb c1       	rjmp	.+1014   	; 0x4c9c <menu_ProcessMessage+0x47a>
    48a6:	c3 30       	cpi	r28, 0x03	; 3
    48a8:	09 f4       	brne	.+2      	; 0x48ac <menu_ProcessMessage+0x8a>
    48aa:	64 c0       	rjmp	.+200    	; 0x4974 <menu_ProcessMessage+0x152>
    48ac:	28 f4       	brcc	.+10     	; 0x48b8 <menu_ProcessMessage+0x96>
    48ae:	c1 30       	cpi	r28, 0x01	; 1
    48b0:	51 f0       	breq	.+20     	; 0x48c6 <menu_ProcessMessage+0xa4>
    48b2:	c2 30       	cpi	r28, 0x02	; 2
    48b4:	31 f1       	breq	.+76     	; 0x4902 <menu_ProcessMessage+0xe0>
    48b6:	db c1       	rjmp	.+950    	; 0x4c6e <menu_ProcessMessage+0x44c>
    48b8:	c5 30       	cpi	r28, 0x05	; 5
    48ba:	09 f4       	brne	.+2      	; 0x48be <menu_ProcessMessage+0x9c>
    48bc:	5b c0       	rjmp	.+182    	; 0x4974 <menu_ProcessMessage+0x152>
    48be:	90 f0       	brcs	.+36     	; 0x48e4 <menu_ProcessMessage+0xc2>
    48c0:	c6 30       	cpi	r28, 0x06	; 6
    48c2:	f9 f0       	breq	.+62     	; 0x4902 <menu_ProcessMessage+0xe0>
    48c4:	d4 c1       	rjmp	.+936    	; 0x4c6e <menu_ProcessMessage+0x44c>
    48c6:	fb 01       	movw	r30, r22
    48c8:	84 91       	lpm	r24, Z
    48ca:	80 7c       	andi	r24, 0xC0	; 192
    48cc:	80 3c       	cpi	r24, 0xC0	; 192
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <menu_ProcessMessage+0xb0>
    48d0:	d0 c1       	rjmp	.+928    	; 0x4c72 <menu_ProcessMessage+0x450>
    48d2:	74 96       	adiw	r30, 0x14	; 20
    48d4:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    48d8:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    48dc:	3a df       	rcall	.-396    	; 0x4752 <menuItemChanged>
    48de:	0b df       	rcall	.-490    	; 0x46f6 <menuCurrMenuToLCD>
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	dc c1       	rjmp	.+952    	; 0x4c9c <menu_ProcessMessage+0x47a>
    48e4:	fb 01       	movw	r30, r22
    48e6:	84 91       	lpm	r24, Z
    48e8:	80 7c       	andi	r24, 0xC0	; 192
    48ea:	80 38       	cpi	r24, 0x80	; 128
    48ec:	09 f4       	brne	.+2      	; 0x48f0 <menu_ProcessMessage+0xce>
    48ee:	c3 c1       	rjmp	.+902    	; 0x4c76 <menu_ProcessMessage+0x454>
    48f0:	74 97       	sbiw	r30, 0x14	; 20
    48f2:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    48f6:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    48fa:	2b df       	rcall	.-426    	; 0x4752 <menuItemChanged>
    48fc:	fc de       	rcall	.-520    	; 0x46f6 <menuCurrMenuToLCD>
    48fe:	80 e0       	ldi	r24, 0x00	; 0
    4900:	cd c1       	rjmp	.+922    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4902:	84 ff       	sbrs	r24, 4
    4904:	04 c0       	rjmp	.+8      	; 0x490e <menu_ProcessMessage+0xec>
    4906:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    490a:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    490e:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4912:	ee 23       	and	r30, r30
    4914:	e9 f0       	breq	.+58     	; 0x4950 <menu_ProcessMessage+0x12e>
    4916:	e1 50       	subi	r30, 0x01	; 1
    4918:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    491c:	f0 e0       	ldi	r31, 0x00	; 0
    491e:	ee 0f       	add	r30, r30
    4920:	ff 1f       	adc	r31, r31
    4922:	e5 58       	subi	r30, 0x85	; 133
    4924:	fa 4f       	sbci	r31, 0xFA	; 250
    4926:	01 90       	ld	r0, Z+
    4928:	f0 81       	ld	r31, Z
    492a:	e0 2d       	mov	r30, r0
    492c:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4930:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4934:	72 96       	adiw	r30, 0x12	; 18
    4936:	05 90       	lpm	r0, Z+
    4938:	f4 91       	lpm	r31, Z
    493a:	e0 2d       	mov	r30, r0
    493c:	30 97       	sbiw	r30, 0x00	; 0
    493e:	11 f0       	breq	.+4      	; 0x4944 <menu_ProcessMessage+0x122>
    4940:	80 e0       	ldi	r24, 0x00	; 0
    4942:	19 95       	eicall
    4944:	9e de       	rcall	.-708    	; 0x4682 <menuClearExtraDisp>
    4946:	20 dd       	rcall	.-1472   	; 0x4388 <menuParentMenuToLCD>
    4948:	d6 de       	rcall	.-596    	; 0x46f6 <menuCurrMenuToLCD>
    494a:	03 df       	rcall	.-506    	; 0x4752 <menuItemChanged>
    494c:	80 e0       	ldi	r24, 0x00	; 0
    494e:	a6 c1       	rjmp	.+844    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    495c:	82 e0       	ldi	r24, 0x02	; 2
    495e:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    4962:	83 e0       	ldi	r24, 0x03	; 3
    4964:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    4968:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
    496c:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <lcd_cursoroff>
    4970:	8f ef       	ldi	r24, 0xFF	; 255
    4972:	94 c1       	rjmp	.+808    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4974:	fb 01       	movw	r30, r22
    4976:	24 91       	lpm	r18, Z
    4978:	2f 73       	andi	r18, 0x3F	; 63
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	22 30       	cpi	r18, 0x02	; 2
    497e:	31 05       	cpc	r19, r1
    4980:	0c f4       	brge	.+2      	; 0x4984 <menu_ProcessMessage+0x162>
    4982:	48 c0       	rjmp	.+144    	; 0x4a14 <menu_ProcessMessage+0x1f2>
    4984:	70 96       	adiw	r30, 0x10	; 16
    4986:	05 90       	lpm	r0, Z+
    4988:	f4 91       	lpm	r31, Z
    498a:	e0 2d       	mov	r30, r0
    498c:	30 97       	sbiw	r30, 0x00	; 0
    498e:	19 f0       	breq	.+6      	; 0x4996 <menu_ProcessMessage+0x174>
    4990:	8c 2f       	mov	r24, r28
    4992:	19 95       	eicall
    4994:	de de       	rcall	.-580    	; 0x4752 <menuItemChanged>
    4996:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    499a:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    499e:	c9 01       	movw	r24, r18
    49a0:	01 96       	adiw	r24, 0x01	; 1
    49a2:	fc 01       	movw	r30, r24
    49a4:	84 91       	lpm	r24, Z
    49a6:	83 fd       	sbrc	r24, 3
    49a8:	68 c1       	rjmp	.+720    	; 0x4c7a <menu_ProcessMessage+0x458>
    49aa:	c9 01       	movw	r24, r18
    49ac:	0e 96       	adiw	r24, 0x0e	; 14
    49ae:	fc 01       	movw	r30, r24
    49b0:	85 91       	lpm	r24, Z+
    49b2:	95 91       	lpm	r25, Z+
    49b4:	89 2b       	or	r24, r25
    49b6:	09 f4       	brne	.+2      	; 0x49ba <menu_ProcessMessage+0x198>
    49b8:	62 c1       	rjmp	.+708    	; 0x4c7e <menu_ProcessMessage+0x45c>
    49ba:	f9 01       	movw	r30, r18
    49bc:	84 91       	lpm	r24, Z
    49be:	8f 73       	andi	r24, 0x3F	; 63
    49c0:	89 30       	cpi	r24, 0x09	; 9
    49c2:	19 f5       	brne	.+70     	; 0x4a0a <menu_ProcessMessage+0x1e8>
    49c4:	61 e0       	ldi	r22, 0x01	; 1
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	30 da       	rcall	.-2976   	; 0x3e2a <nibbleChange>
    49ca:	de db       	rcall	.-2116   	; 0x4188 <nibbleToData>
    49cc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    49d0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    49d4:	3e 96       	adiw	r30, 0x0e	; 14
    49d6:	05 90       	lpm	r0, Z+
    49d8:	f4 91       	lpm	r31, Z
    49da:	e0 2d       	mov	r30, r0
    49dc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    49e0:	80 83       	st	Z, r24
    49e2:	ec dc       	rcall	.-1576   	; 0x43bc <menuDisplayValue>
    49e4:	69 de       	rcall	.-814    	; 0x46b8 <menuCheckArrowDown>
    49e6:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
    49ea:	47 de       	rcall	.-882    	; 0x467a <menuCursorSetMenu>
    49ec:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    49f0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    49f4:	72 96       	adiw	r30, 0x12	; 18
    49f6:	05 90       	lpm	r0, Z+
    49f8:	f4 91       	lpm	r31, Z
    49fa:	e0 2d       	mov	r30, r0
    49fc:	30 97       	sbiw	r30, 0x00	; 0
    49fe:	09 f4       	brne	.+2      	; 0x4a02 <menu_ProcessMessage+0x1e0>
    4a00:	40 c1       	rjmp	.+640    	; 0x4c82 <menu_ProcessMessage+0x460>
    4a02:	80 e0       	ldi	r24, 0x00	; 0
    4a04:	19 95       	eicall
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	49 c1       	rjmp	.+658    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4a0a:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4a0e:	e3 dc       	rcall	.-1594   	; 0x43d6 <menuCursorSetDataNibble>
    4a10:	80 e0       	ldi	r24, 0x00	; 0
    4a12:	44 c1       	rjmp	.+648    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4a14:	2f ef       	ldi	r18, 0xFF	; 255
    4a16:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4a1a:	84 ff       	sbrs	r24, 4
    4a1c:	26 c0       	rjmp	.+76     	; 0x4a6a <menu_ProcessMessage+0x248>
    4a1e:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4a22:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4a26:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4a2a:	ee 23       	and	r30, r30
    4a2c:	09 f4       	brne	.+2      	; 0x4a30 <menu_ProcessMessage+0x20e>
    4a2e:	2b c1       	rjmp	.+598    	; 0x4c86 <menu_ProcessMessage+0x464>
    4a30:	e1 50       	subi	r30, 0x01	; 1
    4a32:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4a36:	f0 e0       	ldi	r31, 0x00	; 0
    4a38:	ee 0f       	add	r30, r30
    4a3a:	ff 1f       	adc	r31, r31
    4a3c:	e5 58       	subi	r30, 0x85	; 133
    4a3e:	fa 4f       	sbci	r31, 0xFA	; 250
    4a40:	01 90       	ld	r0, Z+
    4a42:	f0 81       	ld	r31, Z
    4a44:	e0 2d       	mov	r30, r0
    4a46:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4a4a:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4a4e:	72 96       	adiw	r30, 0x12	; 18
    4a50:	05 90       	lpm	r0, Z+
    4a52:	f4 91       	lpm	r31, Z
    4a54:	e0 2d       	mov	r30, r0
    4a56:	30 97       	sbiw	r30, 0x00	; 0
    4a58:	11 f0       	breq	.+4      	; 0x4a5e <menu_ProcessMessage+0x23c>
    4a5a:	80 e0       	ldi	r24, 0x00	; 0
    4a5c:	19 95       	eicall
    4a5e:	11 de       	rcall	.-990    	; 0x4682 <menuClearExtraDisp>
    4a60:	93 dc       	rcall	.-1754   	; 0x4388 <menuParentMenuToLCD>
    4a62:	49 de       	rcall	.-878    	; 0x46f6 <menuCurrMenuToLCD>
    4a64:	76 de       	rcall	.-788    	; 0x4752 <menuItemChanged>
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	19 c1       	rjmp	.+562    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4a6a:	fb 01       	movw	r30, r22
    4a6c:	70 96       	adiw	r30, 0x10	; 16
    4a6e:	05 90       	lpm	r0, Z+
    4a70:	f4 91       	lpm	r31, Z
    4a72:	e0 2d       	mov	r30, r0
    4a74:	30 97       	sbiw	r30, 0x00	; 0
    4a76:	99 f0       	breq	.+38     	; 0x4a9e <menu_ProcessMessage+0x27c>
    4a78:	99 23       	and	r25, r25
    4a7a:	71 f0       	breq	.+28     	; 0x4a98 <menu_ProcessMessage+0x276>
    4a7c:	8f ef       	ldi	r24, 0xFF	; 255
    4a7e:	19 95       	eicall
    4a80:	8f 3f       	cpi	r24, 0xFF	; 255
    4a82:	19 f4       	brne	.+6      	; 0x4a8a <menu_ProcessMessage+0x268>
    4a84:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4a88:	0a c0       	rjmp	.+20     	; 0x4a9e <menu_ProcessMessage+0x27c>
    4a8a:	fb dd       	rcall	.-1034   	; 0x4682 <menuClearExtraDisp>
    4a8c:	ff dd       	rcall	.-1026   	; 0x468c <menu_ClearDataDisp>
    4a8e:	f5 dd       	rcall	.-1046   	; 0x467a <menuCursorSetMenu>
    4a90:	8f ef       	ldi	r24, 0xFF	; 255
    4a92:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4a96:	03 c0       	rjmp	.+6      	; 0x4a9e <menu_ProcessMessage+0x27c>
    4a98:	85 e0       	ldi	r24, 0x05	; 5
    4a9a:	19 95       	eicall
    4a9c:	ee dd       	rcall	.-1060   	; 0x467a <menuCursorSetMenu>
    4a9e:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4aa2:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4aa6:	c9 01       	movw	r24, r18
    4aa8:	0c 96       	adiw	r24, 0x0c	; 12
    4aaa:	fc 01       	movw	r30, r24
    4aac:	85 91       	lpm	r24, Z+
    4aae:	95 91       	lpm	r25, Z+
    4ab0:	89 2b       	or	r24, r25
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <menu_ProcessMessage+0x294>
    4ab4:	ea c0       	rjmp	.+468    	; 0x4c8a <menu_ProcessMessage+0x468>
    4ab6:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    4aba:	a0 31       	cpi	r26, 0x10	; 16
    4abc:	08 f0       	brcs	.+2      	; 0x4ac0 <menu_ProcessMessage+0x29e>
    4abe:	e7 c0       	rjmp	.+462    	; 0x4c8e <menu_ProcessMessage+0x46c>
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	8a 0f       	add	r24, r26
    4ac4:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    4ac8:	b0 e0       	ldi	r27, 0x00	; 0
    4aca:	aa 0f       	add	r26, r26
    4acc:	bb 1f       	adc	r27, r27
    4ace:	a5 58       	subi	r26, 0x85	; 133
    4ad0:	ba 4f       	sbci	r27, 0xFA	; 250
    4ad2:	2d 93       	st	X+, r18
    4ad4:	3c 93       	st	X, r19
    4ad6:	c9 01       	movw	r24, r18
    4ad8:	01 96       	adiw	r24, 0x01	; 1
    4ada:	fc 01       	movw	r30, r24
    4adc:	84 91       	lpm	r24, Z
    4ade:	83 ff       	sbrs	r24, 3
    4ae0:	0b c0       	rjmp	.+22     	; 0x4af8 <menu_ProcessMessage+0x2d6>
    4ae2:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    4ae6:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    4aea:	00 97       	sbiw	r24, 0x00	; 0
    4aec:	29 f0       	breq	.+10     	; 0x4af8 <menu_ProcessMessage+0x2d6>
    4aee:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4af2:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4af6:	08 c0       	rjmp	.+16     	; 0x4b08 <menu_ProcessMessage+0x2e6>
    4af8:	f9 01       	movw	r30, r18
    4afa:	3c 96       	adiw	r30, 0x0c	; 12
    4afc:	85 91       	lpm	r24, Z+
    4afe:	95 91       	lpm	r25, Z+
    4b00:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4b04:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4b08:	bc dd       	rcall	.-1160   	; 0x4682 <menuClearExtraDisp>
    4b0a:	3e dc       	rcall	.-1924   	; 0x4388 <menuParentMenuToLCD>
    4b0c:	f4 dd       	rcall	.-1048   	; 0x46f6 <menuCurrMenuToLCD>
    4b0e:	21 de       	rcall	.-958    	; 0x4752 <menuItemChanged>
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	c4 c0       	rjmp	.+392    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4b14:	c3 30       	cpi	r28, 0x03	; 3
    4b16:	09 f4       	brne	.+2      	; 0x4b1a <menu_ProcessMessage+0x2f8>
    4b18:	49 c0       	rjmp	.+146    	; 0x4bac <menu_ProcessMessage+0x38a>
    4b1a:	28 f4       	brcc	.+10     	; 0x4b26 <menu_ProcessMessage+0x304>
    4b1c:	c1 30       	cpi	r28, 0x01	; 1
    4b1e:	59 f0       	breq	.+22     	; 0x4b36 <menu_ProcessMessage+0x314>
    4b20:	c2 30       	cpi	r28, 0x02	; 2
    4b22:	31 f1       	breq	.+76     	; 0x4b70 <menu_ProcessMessage+0x34e>
    4b24:	b6 c0       	rjmp	.+364    	; 0x4c92 <menu_ProcessMessage+0x470>
    4b26:	c5 30       	cpi	r28, 0x05	; 5
    4b28:	09 f4       	brne	.+2      	; 0x4b2c <menu_ProcessMessage+0x30a>
    4b2a:	5e c0       	rjmp	.+188    	; 0x4be8 <menu_ProcessMessage+0x3c6>
    4b2c:	c0 f0       	brcs	.+48     	; 0x4b5e <menu_ProcessMessage+0x33c>
    4b2e:	c6 30       	cpi	r28, 0x06	; 6
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <menu_ProcessMessage+0x312>
    4b32:	8a c0       	rjmp	.+276    	; 0x4c48 <menu_ProcessMessage+0x426>
    4b34:	ae c0       	rjmp	.+348    	; 0x4c92 <menu_ProcessMessage+0x470>
    4b36:	48 2f       	mov	r20, r24
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4b3e:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4b42:	24 91       	lpm	r18, Z
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	21 50       	subi	r18, 0x01	; 1
    4b48:	31 09       	sbc	r19, r1
    4b4a:	42 17       	cp	r20, r18
    4b4c:	53 07       	cpc	r21, r19
    4b4e:	0c f0       	brlt	.+2      	; 0x4b52 <menu_ProcessMessage+0x330>
    4b50:	a2 c0       	rjmp	.+324    	; 0x4c96 <menu_ProcessMessage+0x474>
    4b52:	8f 5f       	subi	r24, 0xFF	; 255
    4b54:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4b58:	3e dc       	rcall	.-1924   	; 0x43d6 <menuCursorSetDataNibble>
    4b5a:	80 e0       	ldi	r24, 0x00	; 0
    4b5c:	9f c0       	rjmp	.+318    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4b5e:	88 23       	and	r24, r24
    4b60:	09 f4       	brne	.+2      	; 0x4b64 <menu_ProcessMessage+0x342>
    4b62:	9b c0       	rjmp	.+310    	; 0x4c9a <menu_ProcessMessage+0x478>
    4b64:	81 50       	subi	r24, 0x01	; 1
    4b66:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4b6a:	35 dc       	rcall	.-1942   	; 0x43d6 <menuCursorSetDataNibble>
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	96 c0       	rjmp	.+300    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4b70:	61 e0       	ldi	r22, 0x01	; 1
    4b72:	5b d9       	rcall	.-3402   	; 0x3e2a <nibbleChange>
    4b74:	09 db       	rcall	.-2542   	; 0x4188 <nibbleToData>
    4b76:	22 dc       	rcall	.-1980   	; 0x43bc <menuDisplayValue>
    4b78:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4b7c:	8a 30       	cpi	r24, 0x0A	; 10
    4b7e:	11 f0       	breq	.+4      	; 0x4b84 <menu_ProcessMessage+0x362>
    4b80:	8e 30       	cpi	r24, 0x0E	; 14
    4b82:	89 f4       	brne	.+34     	; 0x4ba6 <menu_ProcessMessage+0x384>
    4b84:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4b88:	42 2f       	mov	r20, r18
    4b8a:	50 e0       	ldi	r21, 0x00	; 0
    4b8c:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4b90:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4b94:	84 91       	lpm	r24, Z
    4b96:	90 e0       	ldi	r25, 0x00	; 0
    4b98:	01 97       	sbiw	r24, 0x01	; 1
    4b9a:	48 17       	cp	r20, r24
    4b9c:	59 07       	cpc	r21, r25
    4b9e:	1c f4       	brge	.+6      	; 0x4ba6 <menu_ProcessMessage+0x384>
    4ba0:	2f 5f       	subi	r18, 0xFF	; 255
    4ba2:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4ba6:	17 dc       	rcall	.-2002   	; 0x43d6 <menuCursorSetDataNibble>
    4ba8:	80 e0       	ldi	r24, 0x00	; 0
    4baa:	78 c0       	rjmp	.+240    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4bac:	6f ef       	ldi	r22, 0xFF	; 255
    4bae:	3d d9       	rcall	.-3462   	; 0x3e2a <nibbleChange>
    4bb0:	eb da       	rcall	.-2602   	; 0x4188 <nibbleToData>
    4bb2:	04 dc       	rcall	.-2040   	; 0x43bc <menuDisplayValue>
    4bb4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4bb8:	8a 30       	cpi	r24, 0x0A	; 10
    4bba:	11 f0       	breq	.+4      	; 0x4bc0 <menu_ProcessMessage+0x39e>
    4bbc:	8e 30       	cpi	r24, 0x0E	; 14
    4bbe:	89 f4       	brne	.+34     	; 0x4be2 <menu_ProcessMessage+0x3c0>
    4bc0:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4bc4:	42 2f       	mov	r20, r18
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4bcc:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4bd0:	84 91       	lpm	r24, Z
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	48 17       	cp	r20, r24
    4bd8:	59 07       	cpc	r21, r25
    4bda:	1c f4       	brge	.+6      	; 0x4be2 <menu_ProcessMessage+0x3c0>
    4bdc:	2f 5f       	subi	r18, 0xFF	; 255
    4bde:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4be2:	f9 db       	rcall	.-2062   	; 0x43d6 <menuCursorSetDataNibble>
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	5a c0       	rjmp	.+180    	; 0x4c9c <menu_ProcessMessage+0x47a>
    4be8:	cf da       	rcall	.-2658   	; 0x4188 <nibbleToData>
    4bea:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4bee:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4bf2:	c9 01       	movw	r24, r18
    4bf4:	0e 96       	adiw	r24, 0x0e	; 14
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	a5 91       	lpm	r26, Z+
    4bfa:	b5 91       	lpm	r27, Z+
    4bfc:	10 97       	sbiw	r26, 0x00	; 0
    4bfe:	21 f1       	breq	.+72     	; 0x4c48 <menu_ProcessMessage+0x426>
    4c00:	0d 97       	sbiw	r24, 0x0d	; 13
    4c02:	fc 01       	movw	r30, r24
    4c04:	84 91       	lpm	r24, Z
    4c06:	88 23       	and	r24, r24
    4c08:	2c f4       	brge	.+10     	; 0x4c14 <menu_ProcessMessage+0x3f2>
    4c0a:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4c0e:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4c12:	02 c0       	rjmp	.+4      	; 0x4c18 <menu_ProcessMessage+0x3f6>
    4c14:	80 e0       	ldi	r24, 0x00	; 0
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	a8 0f       	add	r26, r24
    4c1a:	b9 1f       	adc	r27, r25
    4c1c:	f9 01       	movw	r30, r18
    4c1e:	84 91       	lpm	r24, Z
    4c20:	8f 73       	andi	r24, 0x3F	; 63
    4c22:	8b 30       	cpi	r24, 0x0B	; 11
    4c24:	71 f4       	brne	.+28     	; 0x4c42 <menu_ProcessMessage+0x420>
    4c26:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    4c2a:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    4c2e:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    4c32:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    4c36:	4d 93       	st	X+, r20
    4c38:	5d 93       	st	X+, r21
    4c3a:	6d 93       	st	X+, r22
    4c3c:	7c 93       	st	X, r23
    4c3e:	13 97       	sbiw	r26, 0x03	; 3
    4c40:	03 c0       	rjmp	.+6      	; 0x4c48 <menu_ProcessMessage+0x426>
    4c42:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4c46:	8c 93       	st	X, r24
    4c48:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c4c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c50:	72 96       	adiw	r30, 0x12	; 18
    4c52:	05 90       	lpm	r0, Z+
    4c54:	f4 91       	lpm	r31, Z
    4c56:	e0 2d       	mov	r30, r0
    4c58:	30 97       	sbiw	r30, 0x00	; 0
    4c5a:	11 f0       	breq	.+4      	; 0x4c60 <menu_ProcessMessage+0x43e>
    4c5c:	8c 2f       	mov	r24, r28
    4c5e:	19 95       	eicall
    4c60:	8f ef       	ldi	r24, 0xFF	; 255
    4c62:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4c66:	47 dd       	rcall	.-1394   	; 0x46f6 <menuCurrMenuToLCD>
    4c68:	74 dd       	rcall	.-1304   	; 0x4752 <menuItemChanged>
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	17 c0       	rjmp	.+46     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	15 c0       	rjmp	.+42     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	13 c0       	rjmp	.+38     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c76:	80 e0       	ldi	r24, 0x00	; 0
    4c78:	11 c0       	rjmp	.+34     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	0f c0       	rjmp	.+30     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
    4c80:	0d c0       	rjmp	.+26     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	0b c0       	rjmp	.+22     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	09 c0       	rjmp	.+18     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	07 c0       	rjmp	.+14     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	05 c0       	rjmp	.+10     	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	03 c0       	rjmp	.+6      	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	01 c0       	rjmp	.+2      	; 0x4c9c <menu_ProcessMessage+0x47a>
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	cf 91       	pop	r28
    4c9e:	08 95       	ret

00004ca0 <displayMenuMessage_P>:
    4ca0:	0f 93       	push	r16
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	ec 01       	movw	r28, r24
    4caa:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4cae:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4cb2:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cb6:	84 91       	lpm	r24, Z
    4cb8:	8f 73       	andi	r24, 0x3F	; 63
    4cba:	81 30       	cpi	r24, 0x01	; 1
    4cbc:	91 f4       	brne	.+36     	; 0x4ce2 <displayMenuMessage_P+0x42>
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <get_StrLenP>
    4cc4:	24 e1       	ldi	r18, 0x14	; 20
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	a9 01       	movw	r20, r18
    4cca:	48 1b       	sub	r20, r24
    4ccc:	51 09       	sbc	r21, r1
    4cce:	ca 01       	movw	r24, r20
    4cd0:	95 95       	asr	r25
    4cd2:	87 95       	ror	r24
    4cd4:	8c 5e       	subi	r24, 0xEC	; 236
    4cd6:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4cda:	83 e0       	ldi	r24, 0x03	; 3
    4cdc:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    4ce0:	05 c0       	rjmp	.+10     	; 0x4cec <displayMenuMessage_P+0x4c>
    4ce2:	84 e1       	ldi	r24, 0x14	; 20
    4ce4:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4ce8:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    4cec:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4cf0:	ce 01       	movw	r24, r28
    4cf2:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    4cf6:	80 2f       	mov	r24, r16
    4cf8:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4cfc:	9f b7       	in	r25, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	81 e0       	ldi	r24, 0x01	; 1
    4d02:	06 c0       	rjmp	.+12     	; 0x4d10 <displayMenuMessage_P+0x70>
    4d04:	ef e2       	ldi	r30, 0x2F	; 47
    4d06:	f2 e0       	ldi	r31, 0x02	; 2
    4d08:	84 e6       	ldi	r24, 0x64	; 100
    4d0a:	86 87       	std	Z+14, r24	; 0x0e
    4d0c:	17 86       	std	Z+15, r1	; 0x0f
    4d0e:	80 e0       	ldi	r24, 0x00	; 0
    4d10:	81 11       	cpse	r24, r1
    4d12:	f8 cf       	rjmp	.-16     	; 0x4d04 <displayMenuMessage_P+0x64>
    4d14:	9f bf       	out	0x3f, r25	; 63
    4d16:	81 2f       	mov	r24, r17
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	1f 91       	pop	r17
    4d1e:	0f 91       	pop	r16
    4d20:	08 95       	ret

00004d22 <menu_OnEnterMidiPanic>:
    4d22:	83 e9       	ldi	r24, 0x93	; 147
    4d24:	93 e0       	ldi	r25, 0x03	; 3
    4d26:	bc df       	rcall	.-136    	; 0x4ca0 <displayMenuMessage_P>
    4d28:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <midiSendAllNotesOff>
    4d2c:	a6 dc       	rcall	.-1716   	; 0x467a <menuCursorSetMenu>
    4d2e:	80 e0       	ldi	r24, 0x00	; 0
    4d30:	08 95       	ret

00004d32 <menu_ModuleTestExecute>:
    4d32:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4d36:	8f 3f       	cpi	r24, 0xFF	; 255
    4d38:	11 f0       	breq	.+4      	; 0x4d3e <menu_ModuleTestExecute+0xc>
    4d3a:	8d 3f       	cpi	r24, 0xFD	; 253
    4d3c:	71 f5       	brne	.+92     	; 0x4d9a <menu_ModuleTestExecute+0x68>
    4d3e:	0e 94 27 37 	call	0x6e4e	; 0x6e4e <lcd_cursoroff>
    4d42:	a4 dc       	rcall	.-1720   	; 0x468c <menu_ClearDataDisp>
    4d44:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	e9 e4       	ldi	r30, 0x49	; 73
    4d4c:	f2 e0       	ldi	r31, 0x02	; 2
    4d4e:	07 c0       	rjmp	.+14     	; 0x4d5e <menu_ModuleTestExecute+0x2c>
    4d50:	21 81       	ldd	r18, Z+1	; 0x01
    4d52:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4d56:	82 2b       	or	r24, r18
    4d58:	81 83       	std	Z+1, r24	; 0x01
    4d5a:	38 96       	adiw	r30, 0x08	; 8
    4d5c:	9f 5f       	subi	r25, 0xFF	; 255
    4d5e:	90 32       	cpi	r25, 0x20	; 32
    4d60:	b8 f3       	brcs	.-18     	; 0x4d50 <menu_ModuleTestExecute+0x1e>
    4d62:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4d66:	8f 3f       	cpi	r24, 0xFF	; 255
    4d68:	19 f4       	brne	.+6      	; 0x4d70 <menu_ModuleTestExecute+0x3e>
    4d6a:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    4d6e:	5b c0       	rjmp	.+182    	; 0x4e26 <menu_ModuleTestExecute+0xf4>
    4d70:	8d e8       	ldi	r24, 0x8D	; 141
    4d72:	93 e0       	ldi	r25, 0x03	; 3
    4d74:	95 df       	rcall	.-214    	; 0x4ca0 <displayMenuMessage_P>
    4d76:	8e ef       	ldi	r24, 0xFE	; 254
    4d78:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4d7c:	9f b7       	in	r25, 0x3f	; 63
    4d7e:	f8 94       	cli
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	06 c0       	rjmp	.+12     	; 0x4d90 <menu_ModuleTestExecute+0x5e>
    4d84:	ef e2       	ldi	r30, 0x2F	; 47
    4d86:	f2 e0       	ldi	r31, 0x02	; 2
    4d88:	82 e0       	ldi	r24, 0x02	; 2
    4d8a:	84 87       	std	Z+12, r24	; 0x0c
    4d8c:	85 87       	std	Z+13, r24	; 0x0d
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	81 11       	cpse	r24, r1
    4d92:	f8 cf       	rjmp	.-16     	; 0x4d84 <menu_ModuleTestExecute+0x52>
    4d94:	9f bf       	out	0x3f, r25	; 63
    4d96:	71 dc       	rcall	.-1822   	; 0x467a <menuCursorSetMenu>
    4d98:	46 c0       	rjmp	.+140    	; 0x4e26 <menu_ModuleTestExecute+0xf4>
    4d9a:	8e 3f       	cpi	r24, 0xFE	; 254
    4d9c:	41 f4       	brne	.+16     	; 0x4dae <menu_ModuleTestExecute+0x7c>
    4d9e:	8f ef       	ldi	r24, 0xFF	; 255
    4da0:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    4da4:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    4da8:	0e 94 20 37 	call	0x6e40	; 0x6e40 <lcd_cursosblink>
    4dac:	3c c0       	rjmp	.+120    	; 0x4e26 <menu_ModuleTestExecute+0xf4>
    4dae:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    4db2:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    4db6:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    4dba:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    4dbe:	76 95       	lsr	r23
    4dc0:	67 95       	ror	r22
    4dc2:	57 95       	ror	r21
    4dc4:	47 95       	ror	r20
    4dc6:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    4dca:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    4dce:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    4dd2:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    4dd6:	e8 2f       	mov	r30, r24
    4dd8:	f0 e0       	ldi	r31, 0x00	; 0
    4dda:	df 01       	movw	r26, r30
    4ddc:	aa 0f       	add	r26, r26
    4dde:	bb 1f       	adc	r27, r27
    4de0:	aa 0f       	add	r26, r26
    4de2:	bb 1f       	adc	r27, r27
    4de4:	aa 0f       	add	r26, r26
    4de6:	bb 1f       	adc	r27, r27
    4de8:	a7 5b       	subi	r26, 0xB7	; 183
    4dea:	bd 4f       	sbci	r27, 0xFD	; 253
    4dec:	16 96       	adiw	r26, 0x06	; 6
    4dee:	2c 91       	ld	r18, X
    4df0:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4df4:	29 23       	and	r18, r25
    4df6:	49 f4       	brne	.+18     	; 0x4e0a <menu_ModuleTestExecute+0xd8>
    4df8:	70 68       	ori	r23, 0x80	; 128
    4dfa:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    4dfe:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    4e02:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    4e06:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    4e0a:	ee 0f       	add	r30, r30
    4e0c:	ff 1f       	adc	r31, r31
    4e0e:	ee 0f       	add	r30, r30
    4e10:	ff 1f       	adc	r31, r31
    4e12:	ee 0f       	add	r30, r30
    4e14:	ff 1f       	adc	r31, r31
    4e16:	e7 5b       	subi	r30, 0xB7	; 183
    4e18:	fd 4f       	sbci	r31, 0xFD	; 253
    4e1a:	21 81       	ldd	r18, Z+1	; 0x01
    4e1c:	92 2b       	or	r25, r18
    4e1e:	91 83       	std	Z+1, r25	; 0x01
    4e20:	8f 5f       	subi	r24, 0xFF	; 255
    4e22:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4e26:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4e2a:	e0 32       	cpi	r30, 0x20	; 32
    4e2c:	28 f5       	brcc	.+74     	; 0x4e78 <menu_ModuleTestExecute+0x146>
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	ee 0f       	add	r30, r30
    4e32:	ff 1f       	adc	r31, r31
    4e34:	ee 0f       	add	r30, r30
    4e36:	ff 1f       	adc	r31, r31
    4e38:	ee 0f       	add	r30, r30
    4e3a:	ff 1f       	adc	r31, r31
    4e3c:	e7 5b       	subi	r30, 0xB7	; 183
    4e3e:	fd 4f       	sbci	r31, 0xFD	; 253
    4e40:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4e44:	98 2f       	mov	r25, r24
    4e46:	90 95       	com	r25
    4e48:	81 81       	ldd	r24, Z+1	; 0x01
    4e4a:	89 23       	and	r24, r25
    4e4c:	81 83       	std	Z+1, r24	; 0x01
    4e4e:	8e e1       	ldi	r24, 0x1E	; 30
    4e50:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4e54:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4e58:	0e 94 42 35 	call	0x6a84	; 0x6a84 <lcd_dec2out>
    4e5c:	9f b7       	in	r25, 0x3f	; 63
    4e5e:	f8 94       	cli
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	06 c0       	rjmp	.+12     	; 0x4e70 <menu_ModuleTestExecute+0x13e>
    4e64:	ef e2       	ldi	r30, 0x2F	; 47
    4e66:	f2 e0       	ldi	r31, 0x02	; 2
    4e68:	88 e0       	ldi	r24, 0x08	; 8
    4e6a:	84 87       	std	Z+12, r24	; 0x0c
    4e6c:	15 86       	std	Z+13, r1	; 0x0d
    4e6e:	80 e0       	ldi	r24, 0x00	; 0
    4e70:	81 11       	cpse	r24, r1
    4e72:	f8 cf       	rjmp	.-16     	; 0x4e64 <menu_ModuleTestExecute+0x132>
    4e74:	9f bf       	out	0x3f, r25	; 63
    4e76:	08 95       	ret
    4e78:	e0 32       	cpi	r30, 0x20	; 32
    4e7a:	81 f5       	brne	.+96     	; 0x4edc <menu_ModuleTestExecute+0x1aa>
    4e7c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    4e80:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    4e84:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    4e88:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    4e8c:	00 97       	sbiw	r24, 0x00	; 0
    4e8e:	a1 05       	cpc	r26, r1
    4e90:	b1 05       	cpc	r27, r1
    4e92:	21 f4       	brne	.+8      	; 0x4e9c <menu_ModuleTestExecute+0x16a>
    4e94:	8a e8       	ldi	r24, 0x8A	; 138
    4e96:	93 e0       	ldi	r25, 0x03	; 3
    4e98:	03 df       	rcall	.-506    	; 0x4ca0 <displayMenuMessage_P>
    4e9a:	0f c0       	rjmp	.+30     	; 0x4eba <menu_ModuleTestExecute+0x188>
    4e9c:	80 93 09 10 	sts	0x1009, r24	; 0x801009 <editLong>
    4ea0:	90 93 0a 10 	sts	0x100A, r25	; 0x80100a <editLong+0x1>
    4ea4:	a0 93 0b 10 	sts	0x100B, r26	; 0x80100b <editLong+0x2>
    4ea8:	b0 93 0c 10 	sts	0x100C, r27	; 0x80100c <editLong+0x3>
    4eac:	87 e8       	ldi	r24, 0x87	; 135
    4eae:	93 e0       	ldi	r25, 0x03	; 3
    4eb0:	f7 de       	rcall	.-530    	; 0x4ca0 <displayMenuMessage_P>
    4eb2:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4eb6:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <lcd_longout>
    4eba:	8e ef       	ldi	r24, 0xFE	; 254
    4ebc:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4ec0:	9f b7       	in	r25, 0x3f	; 63
    4ec2:	f8 94       	cli
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	06 c0       	rjmp	.+12     	; 0x4ed4 <menu_ModuleTestExecute+0x1a2>
    4ec8:	ef e2       	ldi	r30, 0x2F	; 47
    4eca:	f2 e0       	ldi	r31, 0x02	; 2
    4ecc:	82 e0       	ldi	r24, 0x02	; 2
    4ece:	84 87       	std	Z+12, r24	; 0x0c
    4ed0:	85 87       	std	Z+13, r24	; 0x0d
    4ed2:	80 e0       	ldi	r24, 0x00	; 0
    4ed4:	81 11       	cpse	r24, r1
    4ed6:	f8 cf       	rjmp	.-16     	; 0x4ec8 <menu_ModuleTestExecute+0x196>
    4ed8:	9f bf       	out	0x3f, r25	; 63
    4eda:	cf cb       	rjmp	.-2146   	; 0x467a <menuCursorSetMenu>
    4edc:	08 95       	ret

00004ede <menu_ModuleTestPattern>:
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	90 e0       	ldi	r25, 0x00	; 0
    4ee2:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    4ee6:	02 c0       	rjmp	.+4      	; 0x4eec <menu_ModuleTestPattern+0xe>
    4ee8:	88 0f       	add	r24, r24
    4eea:	99 1f       	adc	r25, r25
    4eec:	0a 94       	dec	r0
    4eee:	e2 f7       	brpl	.-8      	; 0x4ee8 <menu_ModuleTestPattern+0xa>
    4ef0:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    4ef4:	8f ef       	ldi	r24, 0xFF	; 255
    4ef6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4efa:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    4efe:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    4f02:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    4f06:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    4f0a:	13 df       	rcall	.-474    	; 0x4d32 <menu_ModuleTestExecute>
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	08 95       	ret

00004f10 <menuLCDwriteOK>:
    4f10:	8a e8       	ldi	r24, 0x8A	; 138
    4f12:	93 e0       	ldi	r25, 0x03	; 3
    4f14:	c5 ce       	rjmp	.-630    	; 0x4ca0 <displayMenuMessage_P>
    4f16:	08 95       	ret

00004f18 <menuOnEnterEEBackup>:
    4f18:	8e e1       	ldi	r24, 0x1E	; 30
    4f1a:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4f1e:	8d e6       	ldi	r24, 0x6D	; 109
    4f20:	93 e0       	ldi	r25, 0x03	; 3
    4f22:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    4f26:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_Backup>
    4f2a:	f2 df       	rcall	.-28     	; 0x4f10 <menuLCDwriteOK>
    4f2c:	80 e0       	ldi	r24, 0x00	; 0
    4f2e:	08 95       	ret

00004f30 <menuOnEnterEERestore>:
    4f30:	8e e1       	ldi	r24, 0x1E	; 30
    4f32:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4f36:	8d e6       	ldi	r24, 0x6D	; 109
    4f38:	93 e0       	ldi	r25, 0x03	; 3
    4f3a:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    4f3e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <eeprom_Restore>
    4f42:	e6 df       	rcall	.-52     	; 0x4f10 <menuLCDwriteOK>
    4f44:	80 e0       	ldi	r24, 0x00	; 0
    4f46:	08 95       	ret

00004f48 <menuOnEnterEEUpdate>:
    4f48:	8d e6       	ldi	r24, 0x6D	; 109
    4f4a:	93 e0       	ldi	r25, 0x03	; 3
    4f4c:	a9 de       	rcall	.-686    	; 0x4ca0 <displayMenuMessage_P>
    4f4e:	8e e1       	ldi	r24, 0x1E	; 30
    4f50:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4f54:	0e 94 9d 0c 	call	0x193a	; 0x193a <eeprom_UpdateALL>
    4f58:	db df       	rcall	.-74     	; 0x4f10 <menuLCDwriteOK>
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	08 95       	ret

00004f5e <menudeleteMainMessage>:
    4f5e:	cf 93       	push	r28
    4f60:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4f64:	80 e4       	ldi	r24, 0x40	; 64
    4f66:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4f6a:	84 e1       	ldi	r24, 0x14	; 20
    4f6c:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
    4f70:	8c 2f       	mov	r24, r28
    4f72:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4f76:	cf 91       	pop	r28
    4f78:	08 95       	ret

00004f7a <menu_deleteMessage>:
    4f7a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    4f7e:	83 30       	cpi	r24, 0x03	; 3
    4f80:	19 f4       	brne	.+6      	; 0x4f88 <menu_deleteMessage+0xe>
    4f82:	7f db       	rcall	.-2306   	; 0x4682 <menuClearExtraDisp>
    4f84:	83 cb       	rjmp	.-2298   	; 0x468c <menu_ClearDataDisp>
    4f86:	08 95       	ret
    4f88:	81 11       	cpse	r24, r1
    4f8a:	02 c0       	rjmp	.+4      	; 0x4f90 <menu_deleteMessage+0x16>
    4f8c:	7a cb       	rjmp	.-2316   	; 0x4682 <menuClearExtraDisp>
    4f8e:	08 95       	ret
    4f90:	81 30       	cpi	r24, 0x01	; 1
    4f92:	11 f4       	brne	.+4      	; 0x4f98 <menu_deleteMessage+0x1e>
    4f94:	7b cb       	rjmp	.-2314   	; 0x468c <menu_ClearDataDisp>
    4f96:	08 95       	ret
    4f98:	e2 cf       	rjmp	.-60     	; 0x4f5e <menudeleteMainMessage>
    4f9a:	08 95       	ret

00004f9c <menu_DisplayMainMessage_P>:
    4f9c:	0f 93       	push	r16
    4f9e:	1f 93       	push	r17
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	ec 01       	movw	r28, r24
    4fa6:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4faa:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <get_StrLenP>
    4fae:	08 2f       	mov	r16, r24
    4fb0:	80 e4       	ldi	r24, 0x40	; 64
    4fb2:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4fb6:	84 e1       	ldi	r24, 0x14	; 20
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	80 1b       	sub	r24, r16
    4fbc:	91 09       	sbc	r25, r1
    4fbe:	95 95       	asr	r25
    4fc0:	87 95       	ror	r24
    4fc2:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
    4fc6:	ce 01       	movw	r24, r28
    4fc8:	0e 94 ba 12 	call	0x2574	; 0x2574 <lcd_puts_P>
    4fcc:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4fd0:	84 e5       	ldi	r24, 0x54	; 84
    4fd2:	89 1b       	sub	r24, r25
    4fd4:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
    4fd8:	81 2f       	mov	r24, r17
    4fda:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    4fde:	9f b7       	in	r25, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	81 e0       	ldi	r24, 0x01	; 1
    4fe4:	06 c0       	rjmp	.+12     	; 0x4ff2 <menu_DisplayMainMessage_P+0x56>
    4fe6:	ef e2       	ldi	r30, 0x2F	; 47
    4fe8:	f2 e0       	ldi	r31, 0x02	; 2
    4fea:	84 e6       	ldi	r24, 0x64	; 100
    4fec:	86 87       	std	Z+14, r24	; 0x0e
    4fee:	17 86       	std	Z+15, r1	; 0x0f
    4ff0:	80 e0       	ldi	r24, 0x00	; 0
    4ff2:	81 11       	cpse	r24, r1
    4ff4:	f8 cf       	rjmp	.-16     	; 0x4fe6 <menu_DisplayMainMessage_P+0x4a>
    4ff6:	9f bf       	out	0x3f, r25	; 63
    4ff8:	82 e0       	ldi	r24, 0x02	; 2
    4ffa:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    4ffe:	df 91       	pop	r29
    5000:	cf 91       	pop	r28
    5002:	1f 91       	pop	r17
    5004:	0f 91       	pop	r16
    5006:	08 95       	ret

00005008 <menu_DisplayMainMessage>:
    5008:	0f 93       	push	r16
    500a:	1f 93       	push	r17
    500c:	cf 93       	push	r28
    500e:	df 93       	push	r29
    5010:	ec 01       	movw	r28, r24
    5012:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5016:	0e 94 e4 37 	call	0x6fc8	; 0x6fc8 <get_StrLen>
    501a:	08 2f       	mov	r16, r24
    501c:	80 e4       	ldi	r24, 0x40	; 64
    501e:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    5022:	84 e1       	ldi	r24, 0x14	; 20
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	80 1b       	sub	r24, r16
    5028:	91 09       	sbc	r25, r1
    502a:	95 95       	asr	r25
    502c:	87 95       	ror	r24
    502e:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
    5032:	ce 01       	movw	r24, r28
    5034:	0e 94 aa 12 	call	0x2554	; 0x2554 <lcd_puts>
    5038:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    503c:	84 e5       	ldi	r24, 0x54	; 84
    503e:	89 1b       	sub	r24, r25
    5040:	0e 94 fd 36 	call	0x6dfa	; 0x6dfa <lcd_blank>
    5044:	81 2f       	mov	r24, r17
    5046:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    504a:	9f b7       	in	r25, 0x3f	; 63
    504c:	f8 94       	cli
    504e:	81 e0       	ldi	r24, 0x01	; 1
    5050:	06 c0       	rjmp	.+12     	; 0x505e <menu_DisplayMainMessage+0x56>
    5052:	ef e2       	ldi	r30, 0x2F	; 47
    5054:	f2 e0       	ldi	r31, 0x02	; 2
    5056:	84 e6       	ldi	r24, 0x64	; 100
    5058:	86 87       	std	Z+14, r24	; 0x0e
    505a:	17 86       	std	Z+15, r1	; 0x0f
    505c:	80 e0       	ldi	r24, 0x00	; 0
    505e:	81 11       	cpse	r24, r1
    5060:	f8 cf       	rjmp	.-16     	; 0x5052 <menu_DisplayMainMessage+0x4a>
    5062:	9f bf       	out	0x3f, r25	; 63
    5064:	82 e0       	ldi	r24, 0x02	; 2
    5066:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	08 95       	ret

00005074 <menuDisplaySaveMessage>:
    5074:	6d e0       	ldi	r22, 0x0D	; 13
    5076:	70 e1       	ldi	r23, 0x10	; 16
    5078:	0e 94 78 35 	call	0x6af0	; 0x6af0 <putChar_Dec>
    507c:	bc 01       	movw	r22, r24
    507e:	81 eb       	ldi	r24, 0xB1	; 177
    5080:	93 e0       	ldi	r25, 0x03	; 3
    5082:	0e 94 6b 36 	call	0x6cd6	; 0x6cd6 <putString_P>
    5086:	8d e0       	ldi	r24, 0x0D	; 13
    5088:	90 e1       	ldi	r25, 0x10	; 16
    508a:	be cf       	rjmp	.-132    	; 0x5008 <menu_DisplayMainMessage>
    508c:	08 95       	ret

0000508e <menuDisplayLoadMessage>:
    508e:	0f 93       	push	r16
    5090:	1f 93       	push	r17
    5092:	cf 93       	push	r28
    5094:	6d e0       	ldi	r22, 0x0D	; 13
    5096:	70 e1       	ldi	r23, 0x10	; 16
    5098:	0e 94 78 35 	call	0x6af0	; 0x6af0 <putChar_Dec>
    509c:	bc 01       	movw	r22, r24
    509e:	84 ea       	ldi	r24, 0xA4	; 164
    50a0:	93 e0       	ldi	r25, 0x03	; 3
    50a2:	0e 94 6b 36 	call	0x6cd6	; 0x6cd6 <putString_P>
    50a6:	8c 01       	movw	r16, r24
    50a8:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <module_WaitOutputInput2Cycles>
    50ac:	84 e0       	ldi	r24, 0x04	; 4
    50ae:	c0 d3       	rcall	.+1920   	; 0x5830 <count_Registers>
    50b0:	c8 2f       	mov	r28, r24
    50b2:	88 23       	and	r24, r24
    50b4:	49 f0       	breq	.+18     	; 0x50c8 <menuDisplayLoadMessage+0x3a>
    50b6:	b8 01       	movw	r22, r16
    50b8:	82 ea       	ldi	r24, 0xA2	; 162
    50ba:	93 e0       	ldi	r25, 0x03	; 3
    50bc:	0e 94 6b 36 	call	0x6cd6	; 0x6cd6 <putString_P>
    50c0:	bc 01       	movw	r22, r24
    50c2:	8c 2f       	mov	r24, r28
    50c4:	0e 94 78 35 	call	0x6af0	; 0x6af0 <putChar_Dec>
    50c8:	8d e0       	ldi	r24, 0x0D	; 13
    50ca:	90 e1       	ldi	r25, 0x10	; 16
    50cc:	9d df       	rcall	.-198    	; 0x5008 <menu_DisplayMainMessage>
    50ce:	cf 91       	pop	r28
    50d0:	1f 91       	pop	r17
    50d2:	0f 91       	pop	r16
    50d4:	08 95       	ret

000050d6 <handle_programKey>:
    50d6:	cf 93       	push	r28
    50d8:	c6 2f       	mov	r28, r22
    50da:	88 23       	and	r24, r24
    50dc:	2c f4       	brge	.+10     	; 0x50e8 <handle_programKey+0x12>
    50de:	6f ef       	ldi	r22, 0xFF	; 255
    50e0:	8c 2f       	mov	r24, r28
    50e2:	c0 d4       	rcall	.+2432   	; 0x5a64 <register_toProgram>
    50e4:	c7 df       	rcall	.-114    	; 0x5074 <menuDisplaySaveMessage>
    50e6:	05 c0       	rjmp	.+10     	; 0x50f2 <handle_programKey+0x1c>
    50e8:	88 23       	and	r24, r24
    50ea:	19 f0       	breq	.+6      	; 0x50f2 <handle_programKey+0x1c>
    50ec:	86 2f       	mov	r24, r22
    50ee:	1e d4       	rcall	.+2108   	; 0x592c <program_toRegister>
    50f0:	ce df       	rcall	.-100    	; 0x508e <menuDisplayLoadMessage>
    50f2:	8c 2f       	mov	r24, r28
    50f4:	27 d5       	rcall	.+2638   	; 0x5b44 <midi_CountRegisterInProgram>
    50f6:	88 23       	and	r24, r24
    50f8:	31 f0       	breq	.+12     	; 0x5106 <handle_programKey+0x30>
    50fa:	8c 2f       	mov	r24, r28
    50fc:	e8 d4       	rcall	.+2512   	; 0x5ace <midi_RegisterMatchProgram>
    50fe:	81 11       	cpse	r24, r1
    5100:	04 c0       	rjmp	.+8      	; 0x510a <handle_programKey+0x34>
    5102:	81 e8       	ldi	r24, 0x81	; 129
    5104:	03 c0       	rjmp	.+6      	; 0x510c <handle_programKey+0x36>
    5106:	82 e8       	ldi	r24, 0x82	; 130
    5108:	01 c0       	rjmp	.+2      	; 0x510c <handle_programKey+0x36>
    510a:	82 e8       	ldi	r24, 0x82	; 130
    510c:	cf 91       	pop	r28
    510e:	08 95       	ret

00005110 <softKeyK1A>:
    5110:	60 e0       	ldi	r22, 0x00	; 0
    5112:	e1 cf       	rjmp	.-62     	; 0x50d6 <handle_programKey>
    5114:	08 95       	ret

00005116 <softKeyK2A>:
    5116:	61 e0       	ldi	r22, 0x01	; 1
    5118:	de cf       	rjmp	.-68     	; 0x50d6 <handle_programKey>
    511a:	08 95       	ret

0000511c <softKeyK3A>:
    511c:	62 e0       	ldi	r22, 0x02	; 2
    511e:	db cf       	rjmp	.-74     	; 0x50d6 <handle_programKey>
    5120:	08 95       	ret

00005122 <softKeyK4A>:
    5122:	63 e0       	ldi	r22, 0x03	; 3
    5124:	d8 cf       	rjmp	.-80     	; 0x50d6 <handle_programKey>
    5126:	08 95       	ret

00005128 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5128:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    512a:	34 e0       	ldi	r19, 0x04	; 4
    512c:	8e 35       	cpi	r24, 0x5E	; 94
    512e:	93 07       	cpc	r25, r19
    5130:	49 f0       	breq	.+18     	; 0x5144 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5132:	34 e0       	ldi	r19, 0x04	; 4
    5134:	8e 35       	cpi	r24, 0x5E	; 94
    5136:	93 07       	cpc	r25, r19
    5138:	38 f0       	brcs	.+14     	; 0x5148 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    513a:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    513c:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    513e:	a9 f7       	brne	.-22     	; 0x512a <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5140:	80 e0       	ldi	r24, 0x00	; 0
    5142:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5144:	82 2f       	mov	r24, r18
    5146:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5148:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    514a:	08 95       	ret

0000514c <init_SoftKeys>:

void init_SoftKeys(){
    514c:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    514e:	0e 94 22 0b 	call	0x1644	; 0x1644 <eeprom_ReadSoftkeys>
    5152:	8f 3f       	cpi	r24, 0xFF	; 255
    5154:	c9 f4       	brne	.+50     	; 0x5188 <init_SoftKeys+0x3c>
    5156:	0f c0       	rjmp	.+30     	; 0x5176 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5158:	82 2f       	mov	r24, r18
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	fc 01       	movw	r30, r24
    515e:	ed 54       	subi	r30, 0x4D	; 77
    5160:	fa 4f       	sbci	r31, 0xFA	; 250
    5162:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5164:	88 0f       	add	r24, r24
    5166:	99 1f       	adc	r25, r25
    5168:	fc 01       	movw	r30, r24
    516a:	e6 54       	subi	r30, 0x46	; 70
    516c:	fa 4f       	sbci	r31, 0xFA	; 250
    516e:	11 82       	std	Z+1, r1	; 0x01
    5170:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5172:	2f 5f       	subi	r18, 0xFF	; 255
    5174:	01 c0       	rjmp	.+2      	; 0x5178 <init_SoftKeys+0x2c>
    5176:	20 e0       	ldi	r18, 0x00	; 0
    5178:	24 30       	cpi	r18, 0x04	; 4
    517a:	70 f3       	brcs	.-36     	; 0x5158 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    517c:	40 e0       	ldi	r20, 0x00	; 0
    517e:	50 e0       	ldi	r21, 0x00	; 0
    5180:	67 e0       	ldi	r22, 0x07	; 7
    5182:	81 e0       	ldi	r24, 0x01	; 1
    5184:	0e 94 70 14 	call	0x28e0	; 0x28e0 <log_putError>
    5188:	c0 e0       	ldi	r28, 0x00	; 0
    518a:	25 c0       	rjmp	.+74     	; 0x51d6 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    518c:	4c 2f       	mov	r20, r28
    518e:	50 e0       	ldi	r21, 0x00	; 0
    5190:	fa 01       	movw	r30, r20
    5192:	ed 54       	subi	r30, 0x4D	; 77
    5194:	fa 4f       	sbci	r31, 0xFA	; 250
    5196:	80 81       	ld	r24, Z
    5198:	86 31       	cpi	r24, 0x16	; 22
    519a:	70 f4       	brcc	.+28     	; 0x51b8 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    519c:	24 e1       	ldi	r18, 0x14	; 20
    519e:	82 9f       	mul	r24, r18
    51a0:	c0 01       	movw	r24, r0
    51a2:	11 24       	eor	r1, r1
    51a4:	82 5a       	subi	r24, 0xA2	; 162
    51a6:	9b 4f       	sbci	r25, 0xFB	; 251
    51a8:	44 0f       	add	r20, r20
    51aa:	55 1f       	adc	r21, r21
    51ac:	fa 01       	movw	r30, r20
    51ae:	e6 54       	subi	r30, 0x46	; 70
    51b0:	fa 4f       	sbci	r31, 0xFA	; 250
    51b2:	91 83       	std	Z+1, r25	; 0x01
    51b4:	80 83       	st	Z, r24
    51b6:	0e c0       	rjmp	.+28     	; 0x51d4 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    51b8:	fa 01       	movw	r30, r20
    51ba:	ee 0f       	add	r30, r30
    51bc:	ff 1f       	adc	r31, r31
    51be:	e6 54       	subi	r30, 0x46	; 70
    51c0:	fa 4f       	sbci	r31, 0xFA	; 250
    51c2:	11 82       	std	Z+1, r1	; 0x01
    51c4:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    51c6:	4f 5f       	subi	r20, 0xFF	; 255
    51c8:	5f 4f       	sbci	r21, 0xFF	; 255
    51ca:	40 61       	ori	r20, 0x10	; 16
    51cc:	67 e0       	ldi	r22, 0x07	; 7
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	0e 94 70 14 	call	0x28e0	; 0x28e0 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    51d4:	cf 5f       	subi	r28, 0xFF	; 255
    51d6:	c4 30       	cpi	r28, 0x04	; 4
    51d8:	c8 f2       	brcs	.-78     	; 0x518c <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    51da:	cf 91       	pop	r28
    51dc:	08 95       	ret

000051de <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    51de:	cf 93       	push	r28
    51e0:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    51e2:	64 30       	cpi	r22, 0x04	; 4
    51e4:	28 f5       	brcc	.+74     	; 0x5230 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    51e6:	00 97       	sbiw	r24, 0x00	; 0
    51e8:	b9 f0       	breq	.+46     	; 0x5218 <softKey_Set+0x3a>
    51ea:	fc 01       	movw	r30, r24
    51ec:	24 91       	lpm	r18, Z
    51ee:	2f 73       	andi	r18, 0x3F	; 63
    51f0:	21 30       	cpi	r18, 0x01	; 1
    51f2:	91 f4       	brne	.+36     	; 0x5218 <softKey_Set+0x3a>
    51f4:	31 96       	adiw	r30, 0x01	; 1
    51f6:	24 91       	lpm	r18, Z
    51f8:	24 ff       	sbrs	r18, 4
    51fa:	0e c0       	rjmp	.+28     	; 0x5218 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    51fc:	c6 2f       	mov	r28, r22
    51fe:	d0 e0       	ldi	r29, 0x00	; 0
    5200:	fe 01       	movw	r30, r28
    5202:	ee 0f       	add	r30, r30
    5204:	ff 1f       	adc	r31, r31
    5206:	e6 54       	subi	r30, 0x46	; 70
    5208:	fa 4f       	sbci	r31, 0xFA	; 250
    520a:	91 83       	std	Z+1, r25	; 0x01
    520c:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    520e:	8c df       	rcall	.-232    	; 0x5128 <getSoftKeyIndex>
    5210:	cd 54       	subi	r28, 0x4D	; 77
    5212:	da 4f       	sbci	r29, 0xFA	; 250
    5214:	88 83       	st	Y, r24
    5216:	0c c0       	rjmp	.+24     	; 0x5230 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5218:	70 e0       	ldi	r23, 0x00	; 0
    521a:	fb 01       	movw	r30, r22
    521c:	ee 0f       	add	r30, r30
    521e:	ff 1f       	adc	r31, r31
    5220:	e6 54       	subi	r30, 0x46	; 70
    5222:	fa 4f       	sbci	r31, 0xFA	; 250
    5224:	11 82       	std	Z+1, r1	; 0x01
    5226:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5228:	fb 01       	movw	r30, r22
    522a:	ed 54       	subi	r30, 0x4D	; 77
    522c:	fa 4f       	sbci	r31, 0xFA	; 250
    522e:	10 82       	st	Z, r1
		}
	}
}
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	08 95       	ret

00005236 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5236:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    523a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    523e:	3e 96       	adiw	r30, 0x0e	; 14
    5240:	65 91       	lpm	r22, Z+
    5242:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5244:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5248:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    524c:	c8 df       	rcall	.-112    	; 0x51de <softKey_Set>
	eeprom_UpdateSoftkeys();
    524e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <eeprom_UpdateSoftkeys>
	return 0;
}
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	08 95       	ret

00005256 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5256:	0f 93       	push	r16
    5258:	1f 93       	push	r17
    525a:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    525c:	c0 e0       	ldi	r28, 0x00	; 0
    525e:	32 c0       	rjmp	.+100    	; 0x52c4 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5260:	0c 2f       	mov	r16, r28
    5262:	10 e0       	ldi	r17, 0x00	; 0
    5264:	f8 01       	movw	r30, r16
    5266:	ee 0f       	add	r30, r30
    5268:	ff 1f       	adc	r31, r31
    526a:	e6 54       	subi	r30, 0x46	; 70
    526c:	fa 4f       	sbci	r31, 0xFA	; 250
    526e:	01 90       	ld	r0, Z+
    5270:	f0 81       	ld	r31, Z
    5272:	e0 2d       	mov	r30, r0
    5274:	30 97       	sbiw	r30, 0x00	; 0
    5276:	31 f0       	breq	.+12     	; 0x5284 <softKeys_toLCD+0x2e>
    5278:	3e 96       	adiw	r30, 0x0e	; 14
    527a:	65 91       	lpm	r22, Z+
    527c:	75 91       	lpm	r23, Z+
    527e:	61 15       	cp	r22, r1
    5280:	71 05       	cpc	r23, r1
    5282:	21 f4       	brne	.+8      	; 0x528c <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5284:	8c 2f       	mov	r24, r28
    5286:	0e 94 84 37 	call	0x6f08	; 0x6f08 <keylabel_clr>
    528a:	1b c0       	rjmp	.+54     	; 0x52c2 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    528c:	8c 2f       	mov	r24, r28
    528e:	0e 94 49 37 	call	0x6e92	; 0x6e92 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    5292:	00 0f       	add	r16, r16
    5294:	11 1f       	adc	r17, r17
    5296:	f8 01       	movw	r30, r16
    5298:	e6 54       	subi	r30, 0x46	; 70
    529a:	fa 4f       	sbci	r31, 0xFA	; 250
    529c:	01 90       	ld	r0, Z+
    529e:	f0 81       	ld	r31, Z
    52a0:	e0 2d       	mov	r30, r0
    52a2:	70 96       	adiw	r30, 0x10	; 16
    52a4:	05 90       	lpm	r0, Z+
    52a6:	f4 91       	lpm	r31, Z
    52a8:	e0 2d       	mov	r30, r0
    52aa:	30 97       	sbiw	r30, 0x00	; 0
    52ac:	51 f0       	breq	.+20     	; 0x52c2 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	19 95       	eicall
    52b2:	81 38       	cpi	r24, 0x81	; 129
    52b4:	11 f4       	brne	.+4      	; 0x52ba <softKeys_toLCD+0x64>
    52b6:	6f ef       	ldi	r22, 0xFF	; 255
    52b8:	01 c0       	rjmp	.+2      	; 0x52bc <softKeys_toLCD+0x66>
    52ba:	60 e0       	ldi	r22, 0x00	; 0
    52bc:	8c 2f       	mov	r24, r28
    52be:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    52c2:	cf 5f       	subi	r28, 0xFF	; 255
    52c4:	c4 30       	cpi	r28, 0x04	; 4
    52c6:	60 f2       	brcs	.-104    	; 0x5260 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    52c8:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
}
    52cc:	cf 91       	pop	r28
    52ce:	1f 91       	pop	r17
    52d0:	0f 91       	pop	r16
    52d2:	08 95       	ret

000052d4 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    52d4:	82 30       	cpi	r24, 0x02	; 2
    52d6:	49 f0       	breq	.+18     	; 0x52ea <softKey_MessageKey_ToSoftKeyNr+0x16>
    52d8:	18 f4       	brcc	.+6      	; 0x52e0 <softKey_MessageKey_ToSoftKeyNr+0xc>
    52da:	81 30       	cpi	r24, 0x01	; 1
    52dc:	51 f0       	breq	.+20     	; 0x52f2 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    52de:	0b c0       	rjmp	.+22     	; 0x52f6 <softKey_MessageKey_ToSoftKeyNr+0x22>
    52e0:	83 30       	cpi	r24, 0x03	; 3
    52e2:	59 f0       	breq	.+22     	; 0x52fa <softKey_MessageKey_ToSoftKeyNr+0x26>
    52e4:	84 30       	cpi	r24, 0x04	; 4
    52e6:	19 f0       	breq	.+6      	; 0x52ee <softKey_MessageKey_ToSoftKeyNr+0x1a>
    52e8:	06 c0       	rjmp	.+12     	; 0x52f6 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    52ea:	80 e0       	ldi	r24, 0x00	; 0
    52ec:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    52ee:	82 e0       	ldi	r24, 0x02	; 2
    52f0:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    52f2:	83 e0       	ldi	r24, 0x03	; 3
    52f4:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    52f6:	8f ef       	ldi	r24, 0xFF	; 255
    52f8:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    52fa:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    52fc:	08 95       	ret

000052fe <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    52fe:	0f 93       	push	r16
    5300:	1f 93       	push	r17
    5302:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5304:	84 30       	cpi	r24, 0x04	; 4
    5306:	d0 f5       	brcc	.+116    	; 0x537c <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5308:	e8 2f       	mov	r30, r24
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	ee 0f       	add	r30, r30
    530e:	ff 1f       	adc	r31, r31
    5310:	e6 54       	subi	r30, 0x46	; 70
    5312:	fa 4f       	sbci	r31, 0xFA	; 250
    5314:	00 81       	ld	r16, Z
    5316:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5318:	01 15       	cp	r16, r1
    531a:	11 05       	cpc	r17, r1
    531c:	89 f1       	breq	.+98     	; 0x5380 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    531e:	f8 01       	movw	r30, r16
    5320:	94 91       	lpm	r25, Z
    5322:	9f 73       	andi	r25, 0x3F	; 63
    5324:	91 30       	cpi	r25, 0x01	; 1
    5326:	71 f5       	brne	.+92     	; 0x5384 <softKey_Execute+0x86>
    5328:	31 96       	adiw	r30, 0x01	; 1
    532a:	94 91       	lpm	r25, Z
    532c:	94 ff       	sbrs	r25, 4
    532e:	2c c0       	rjmp	.+88     	; 0x5388 <softKey_Execute+0x8a>
    5330:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5332:	3f 96       	adiw	r30, 0x0f	; 15
    5334:	05 90       	lpm	r0, Z+
    5336:	f4 91       	lpm	r31, Z
    5338:	e0 2d       	mov	r30, r0
    533a:	30 97       	sbiw	r30, 0x00	; 0
    533c:	89 f0       	breq	.+34     	; 0x5360 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    533e:	86 2f       	mov	r24, r22
    5340:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5342:	82 38       	cpi	r24, 0x82	; 130
    5344:	29 f4       	brne	.+10     	; 0x5350 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5346:	60 e0       	ldi	r22, 0x00	; 0
    5348:	8c 2f       	mov	r24, r28
    534a:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <keylabel_statcheck>
    534e:	06 c0       	rjmp	.+12     	; 0x535c <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5350:	81 38       	cpi	r24, 0x81	; 129
    5352:	21 f4       	brne	.+8      	; 0x535c <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5354:	6f ef       	ldi	r22, 0xFF	; 255
    5356:	8c 2f       	mov	r24, r28
    5358:	0e 94 b7 37 	call	0x6f6e	; 0x6f6e <keylabel_statcheck>
					}
					keylabel_toLCD();
    535c:	0e 94 98 37 	call	0x6f30	; 0x6f30 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5360:	f8 01       	movw	r30, r16
    5362:	3c 96       	adiw	r30, 0x0c	; 12
    5364:	85 91       	lpm	r24, Z+
    5366:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5368:	00 97       	sbiw	r24, 0x00	; 0
    536a:	81 f0       	breq	.+32     	; 0x538c <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    536c:	b8 01       	movw	r22, r16
    536e:	6e 5f       	subi	r22, 0xFE	; 254
    5370:	7f 4f       	sbci	r23, 0xFF	; 255
    5372:	0e 94 45 1c 	call	0x388a	; 0x388a <menu_Init>
					menu_InitLCD(); //display menu
    5376:	4e da       	rcall	.-2916   	; 0x4814 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5378:	80 e0       	ldi	r24, 0x00	; 0
    537a:	09 c0       	rjmp	.+18     	; 0x538e <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    537c:	8f ef       	ldi	r24, 0xFF	; 255
    537e:	07 c0       	rjmp	.+14     	; 0x538e <softKey_Execute+0x90>
    5380:	8f ef       	ldi	r24, 0xFF	; 255
    5382:	05 c0       	rjmp	.+10     	; 0x538e <softKey_Execute+0x90>
    5384:	8f ef       	ldi	r24, 0xFF	; 255
    5386:	03 c0       	rjmp	.+6      	; 0x538e <softKey_Execute+0x90>
    5388:	8f ef       	ldi	r24, 0xFF	; 255
    538a:	01 c0       	rjmp	.+2      	; 0x538e <softKey_Execute+0x90>
    538c:	8f ef       	ldi	r24, 0xFF	; 255
}
    538e:	cf 91       	pop	r28
    5390:	1f 91       	pop	r17
    5392:	0f 91       	pop	r16
    5394:	08 95       	ret

00005396 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5396:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5398:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    539c:	8c e0       	ldi	r24, 0x0C	; 12
    539e:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    53a2:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    53a6:	84 ff       	sbrs	r24, 4
    53a8:	02 c0       	rjmp	.+4      	; 0x53ae <menu_showPowerState+0x18>
    53aa:	80 e2       	ldi	r24, 0x20	; 32
    53ac:	01 c0       	rjmp	.+2      	; 0x53b0 <menu_showPowerState+0x1a>
    53ae:	89 e0       	ldi	r24, 0x09	; 9
    53b0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
	lcd_goto(saveCursor);
    53b4:	8c 2f       	mov	r24, r28
    53b6:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>

    53ba:	cf 91       	pop	r28
    53bc:	08 95       	ret

000053be <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    53be:	85 b1       	in	r24, 0x05	; 5
    53c0:	80 64       	ori	r24, 0x40	; 64
    53c2:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    53c4:	83 e1       	ldi	r24, 0x13	; 19
    53c6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    53ca:	e5 df       	rcall	.-54     	; 0x5396 <menu_showPowerState>
	return 0;
}
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	08 95       	ret

000053d0 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    53d0:	85 b1       	in	r24, 0x05	; 5
    53d2:	8f 7b       	andi	r24, 0xBF	; 191
    53d4:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    53d6:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    53da:	dd df       	rcall	.-70     	; 0x5396 <menu_showPowerState>
	return 0;
}
    53dc:	80 e0       	ldi	r24, 0x00	; 0
    53de:	08 95       	ret

000053e0 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    53e0:	85 b1       	in	r24, 0x05	; 5
    53e2:	8f 7b       	andi	r24, 0xBF	; 191
    53e4:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    53ec:	d4 df       	rcall	.-88     	; 0x5396 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    53ee:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    53f0:	f8 94       	cli
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	06 c0       	rjmp	.+12     	; 0x5402 <menuOnEnterPwrRest+0x22>
    53f6:	ef e2       	ldi	r30, 0x2F	; 47
    53f8:	f2 e0       	ldi	r31, 0x02	; 2
    53fa:	88 e2       	ldi	r24, 0x28	; 40
    53fc:	82 83       	std	Z+2, r24	; 0x02
    53fe:	13 82       	std	Z+3, r1	; 0x03
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	81 11       	cpse	r24, r1
    5404:	f8 cf       	rjmp	.-16     	; 0x53f6 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5406:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5408:	08 95       	ret

0000540a <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    540a:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    540e:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    5412:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    5416:	08 95       	ret

00005418 <message_push>:
    5418:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    541c:	e9 2f       	mov	r30, r25
    541e:	f0 e0       	ldi	r31, 0x00	; 0
    5420:	ed 52       	subi	r30, 0x2D	; 45
    5422:	f8 4f       	sbci	r31, 0xF8	; 248
    5424:	80 83       	st	Z, r24
    5426:	9f 5f       	subi	r25, 0xFF	; 255
    5428:	9f 71       	andi	r25, 0x1F	; 31
    542a:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    542e:	98 13       	cpse	r25, r24
    5430:	04 c0       	rjmp	.+8      	; 0x543a <message_push+0x22>
    5432:	8f ef       	ldi	r24, 0xFF	; 255
    5434:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    5438:	08 95       	ret
    543a:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    543e:	08 95       	ret

00005440 <message_get>:
    5440:	4f b7       	in	r20, 0x3f	; 63
    5442:	f8 94       	cli
    5444:	21 e0       	ldi	r18, 0x01	; 1
    5446:	11 c0       	rjmp	.+34     	; 0x546a <message_get+0x2a>
    5448:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    544c:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    5450:	8f ef       	ldi	r24, 0xFF	; 255
    5452:	20 e0       	ldi	r18, 0x00	; 0
    5454:	93 17       	cp	r25, r19
    5456:	49 f0       	breq	.+18     	; 0x546a <message_get+0x2a>
    5458:	e9 2f       	mov	r30, r25
    545a:	f0 e0       	ldi	r31, 0x00	; 0
    545c:	ed 52       	subi	r30, 0x2D	; 45
    545e:	f8 4f       	sbci	r31, 0xF8	; 248
    5460:	80 81       	ld	r24, Z
    5462:	9f 5f       	subi	r25, 0xFF	; 255
    5464:	9f 71       	andi	r25, 0x1F	; 31
    5466:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    546a:	21 11       	cpse	r18, r1
    546c:	ed cf       	rjmp	.-38     	; 0x5448 <message_get+0x8>
    546e:	4f bf       	out	0x3f, r20	; 63
    5470:	08 95       	ret

00005472 <message_status>:
    5472:	4f b7       	in	r20, 0x3f	; 63
    5474:	f8 94       	cli
    5476:	91 e0       	ldi	r25, 0x01	; 1
    5478:	08 c0       	rjmp	.+16     	; 0x548a <message_status+0x18>
    547a:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    547e:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	80 e0       	ldi	r24, 0x00	; 0
    5486:	32 17       	cp	r19, r18
    5488:	11 f0       	breq	.+4      	; 0x548e <message_status+0x1c>
    548a:	8f ef       	ldi	r24, 0xFF	; 255
    548c:	01 c0       	rjmp	.+2      	; 0x5490 <message_status+0x1e>
    548e:	90 e0       	ldi	r25, 0x00	; 0
    5490:	91 11       	cpse	r25, r1
    5492:	f3 cf       	rjmp	.-26     	; 0x547a <message_status+0x8>
    5494:	4f bf       	out	0x3f, r20	; 63
    5496:	08 95       	ret

00005498 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5498:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    549a:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    549e:	99 23       	and	r25, r25
    54a0:	e1 f0       	breq	.+56     	; 0x54da <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    54a2:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    54a6:	21 e0       	ldi	r18, 0x01	; 1
    54a8:	29 0f       	add	r18, r25
    54aa:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    54ae:	e9 2f       	mov	r30, r25
    54b0:	f0 e0       	ldi	r31, 0x00	; 0
    54b2:	ee 0f       	add	r30, r30
    54b4:	ff 1f       	adc	r31, r31
    54b6:	e0 53       	subi	r30, 0x30	; 48
    54b8:	fa 4f       	sbci	r31, 0xFA	; 250
    54ba:	51 83       	std	Z+1, r21	; 0x01
    54bc:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    54be:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    54c2:	28 13       	cpse	r18, r24
    54c4:	0a c0       	rjmp	.+20     	; 0x54da <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    54c6:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    54ca:	9f 3f       	cpi	r25, 0xFF	; 255
    54cc:	19 f4       	brne	.+6      	; 0x54d4 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    54ce:	8f ef       	ldi	r24, 0xFF	; 255
    54d0:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    54d4:	8f ef       	ldi	r24, 0xFF	; 255
    54d6:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    54da:	08 95       	ret

000054dc <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    54dc:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    54e0:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    54e4:	e8 13       	cpse	r30, r24
    54e6:	03 c0       	rjmp	.+6      	; 0x54ee <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    54e8:	8f ef       	ldi	r24, 0xFF	; 255
    54ea:	9f ef       	ldi	r25, 0xFF	; 255
    54ec:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	8e 0f       	add	r24, r30
    54f2:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    54f6:	f0 e0       	ldi	r31, 0x00	; 0
    54f8:	ee 0f       	add	r30, r30
    54fa:	ff 1f       	adc	r31, r31
    54fc:	e0 53       	subi	r30, 0x30	; 48
    54fe:	fa 4f       	sbci	r31, 0xFA	; 250
    5500:	80 81       	ld	r24, Z
    5502:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5504:	08 95       	ret

00005506 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5506:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    550a:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    550e:	98 13       	cpse	r25, r24
    5510:	02 c0       	rjmp	.+4      	; 0x5516 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5512:	80 e0       	ldi	r24, 0x00	; 0
    5514:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5516:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5518:	08 95       	ret

0000551a <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	ef e0       	ldi	r30, 0x0F	; 15
    551e:	f8 e0       	ldi	r31, 0x08	; 8
    5520:	03 c0       	rjmp	.+6      	; 0x5528 <midi_CouplerReset+0xe>
    5522:	10 82       	st	Z, r1
    5524:	8f 5f       	subi	r24, 0xFF	; 255
    5526:	31 96       	adiw	r30, 0x01	; 1
    5528:	8c 30       	cpi	r24, 0x0C	; 12
    552a:	d8 f3       	brcs	.-10     	; 0x5522 <midi_CouplerReset+0x8>
    552c:	08 95       	ret

0000552e <init_Midi>:
    552e:	f5 cf       	rjmp	.-22     	; 0x551a <midi_CouplerReset>
    5530:	08 95       	ret

00005532 <set_Coupler>:
    5532:	8c 30       	cpi	r24, 0x0C	; 12
    5534:	e8 f4       	brcc	.+58     	; 0x5570 <set_Coupler+0x3e>
    5536:	e8 2f       	mov	r30, r24
    5538:	f0 e0       	ldi	r31, 0x00	; 0
    553a:	e1 5f       	subi	r30, 0xF1	; 241
    553c:	f7 4f       	sbci	r31, 0xF7	; 247
    553e:	9f ef       	ldi	r25, 0xFF	; 255
    5540:	90 83       	st	Z, r25
    5542:	86 30       	cpi	r24, 0x06	; 6
    5544:	10 f0       	brcs	.+4      	; 0x554a <set_Coupler+0x18>
    5546:	86 50       	subi	r24, 0x06	; 6
    5548:	01 c0       	rjmp	.+2      	; 0x554c <set_Coupler+0x1a>
    554a:	8a 5f       	subi	r24, 0xFA	; 250
    554c:	e8 2f       	mov	r30, r24
    554e:	f0 e0       	ldi	r31, 0x00	; 0
    5550:	df 01       	movw	r26, r30
    5552:	a1 5f       	subi	r26, 0xF1	; 241
    5554:	b7 4f       	sbci	r27, 0xF7	; 247
    5556:	8c 91       	ld	r24, X
    5558:	88 23       	and	r24, r24
    555a:	59 f0       	breq	.+22     	; 0x5572 <set_Coupler+0x40>
    555c:	df 01       	movw	r26, r30
    555e:	a1 5f       	subi	r26, 0xF1	; 241
    5560:	b7 4f       	sbci	r27, 0xF7	; 247
    5562:	1c 92       	st	X, r1
    5564:	ee 0f       	add	r30, r30
    5566:	ff 1f       	adc	r31, r31
    5568:	ec 57       	subi	r30, 0x7C	; 124
    556a:	fe 4e       	sbci	r31, 0xEE	; 238
    556c:	84 91       	lpm	r24, Z
    556e:	08 95       	ret
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	08 95       	ret

00005574 <getAllCouplers>:
    5574:	80 e0       	ldi	r24, 0x00	; 0
    5576:	90 e0       	ldi	r25, 0x00	; 0
    5578:	4b e0       	ldi	r20, 0x0B	; 11
    557a:	01 c0       	rjmp	.+2      	; 0x557e <getAllCouplers+0xa>
    557c:	42 2f       	mov	r20, r18
    557e:	28 2f       	mov	r18, r24
    5580:	39 2f       	mov	r19, r25
    5582:	22 0f       	add	r18, r18
    5584:	33 1f       	adc	r19, r19
    5586:	82 2f       	mov	r24, r18
    5588:	93 2f       	mov	r25, r19
    558a:	e4 2f       	mov	r30, r20
    558c:	f0 e0       	ldi	r31, 0x00	; 0
    558e:	e1 5f       	subi	r30, 0xF1	; 241
    5590:	f7 4f       	sbci	r31, 0xF7	; 247
    5592:	50 81       	ld	r21, Z
    5594:	5f 3f       	cpi	r21, 0xFF	; 255
    5596:	09 f4       	brne	.+2      	; 0x559a <getAllCouplers+0x26>
    5598:	81 60       	ori	r24, 0x01	; 1
    559a:	2f ef       	ldi	r18, 0xFF	; 255
    559c:	24 0f       	add	r18, r20
    559e:	41 11       	cpse	r20, r1
    55a0:	ed cf       	rjmp	.-38     	; 0x557c <getAllCouplers+0x8>
    55a2:	08 95       	ret

000055a4 <setAllCouplers>:
    55a4:	40 e0       	ldi	r20, 0x00	; 0
    55a6:	80 ff       	sbrs	r24, 0
    55a8:	07 c0       	rjmp	.+14     	; 0x55b8 <setAllCouplers+0x14>
    55aa:	e4 2f       	mov	r30, r20
    55ac:	f0 e0       	ldi	r31, 0x00	; 0
    55ae:	e1 5f       	subi	r30, 0xF1	; 241
    55b0:	f7 4f       	sbci	r31, 0xF7	; 247
    55b2:	2f ef       	ldi	r18, 0xFF	; 255
    55b4:	20 83       	st	Z, r18
    55b6:	05 c0       	rjmp	.+10     	; 0x55c2 <setAllCouplers+0x1e>
    55b8:	e4 2f       	mov	r30, r20
    55ba:	f0 e0       	ldi	r31, 0x00	; 0
    55bc:	e1 5f       	subi	r30, 0xF1	; 241
    55be:	f7 4f       	sbci	r31, 0xF7	; 247
    55c0:	10 82       	st	Z, r1
    55c2:	28 2f       	mov	r18, r24
    55c4:	39 2f       	mov	r19, r25
    55c6:	36 95       	lsr	r19
    55c8:	27 95       	ror	r18
    55ca:	82 2f       	mov	r24, r18
    55cc:	93 2f       	mov	r25, r19
    55ce:	4f 5f       	subi	r20, 0xFF	; 255
    55d0:	4c 30       	cpi	r20, 0x0C	; 12
    55d2:	48 f3       	brcs	.-46     	; 0x55a6 <setAllCouplers+0x2>
    55d4:	08 95       	ret

000055d6 <midiAllReset>:
    55d6:	80 e8       	ldi	r24, 0x80	; 128
    55d8:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    55dc:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <init_Pipe>
    55e0:	08 95       	ret

000055e2 <registers_CalcCount>:
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	12 c0       	rjmp	.+36     	; 0x560c <registers_CalcCount+0x2a>
    55e8:	82 2f       	mov	r24, r18
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	fc 01       	movw	r30, r24
    55ee:	ee 0f       	add	r30, r30
    55f0:	ff 1f       	adc	r31, r31
    55f2:	8e 0f       	add	r24, r30
    55f4:	9f 1f       	adc	r25, r31
    55f6:	fc 01       	movw	r30, r24
    55f8:	ea 50       	subi	r30, 0x0A	; 10
    55fa:	f8 4f       	sbci	r31, 0xF8	; 248
    55fc:	81 81       	ldd	r24, Z+1	; 0x01
    55fe:	8f 3f       	cpi	r24, 0xFF	; 255
    5600:	21 f0       	breq	.+8      	; 0x560a <registers_CalcCount+0x28>
    5602:	83 17       	cp	r24, r19
    5604:	10 f0       	brcs	.+4      	; 0x560a <registers_CalcCount+0x28>
    5606:	31 e0       	ldi	r19, 0x01	; 1
    5608:	38 0f       	add	r19, r24
    560a:	2f 5f       	subi	r18, 0xFF	; 255
    560c:	28 30       	cpi	r18, 0x08	; 8
    560e:	60 f3       	brcs	.-40     	; 0x55e8 <registers_CalcCount+0x6>
    5610:	30 93 0e 08 	sts	0x080E, r19	; 0x80080e <registerCount>
    5614:	08 95       	ret

00005616 <init_Registers>:
    5616:	8f ef       	ldi	r24, 0xFF	; 255
    5618:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	0e c0       	rjmp	.+28     	; 0x563c <init_Registers+0x26>
    5620:	82 2f       	mov	r24, r18
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	fc 01       	movw	r30, r24
    5626:	ee 0f       	add	r30, r30
    5628:	ff 1f       	adc	r31, r31
    562a:	e8 0f       	add	r30, r24
    562c:	f9 1f       	adc	r31, r25
    562e:	ea 50       	subi	r30, 0x0A	; 10
    5630:	f8 4f       	sbci	r31, 0xF8	; 248
    5632:	8f ef       	ldi	r24, 0xFF	; 255
    5634:	80 83       	st	Z, r24
    5636:	81 83       	std	Z+1, r24	; 0x01
    5638:	12 82       	std	Z+2, r1	; 0x02
    563a:	2f 5f       	subi	r18, 0xFF	; 255
    563c:	28 30       	cpi	r18, 0x08	; 8
    563e:	80 f3       	brcs	.-32     	; 0x5620 <init_Registers+0xa>
    5640:	0e 94 c6 0a 	call	0x158c	; 0x158c <eeprom_ReadReg>
    5644:	8f 3f       	cpi	r24, 0xFF	; 255
    5646:	49 f4       	brne	.+18     	; 0x565a <init_Registers+0x44>
    5648:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <registerCount>
    564c:	40 e0       	ldi	r20, 0x00	; 0
    564e:	50 e0       	ldi	r21, 0x00	; 0
    5650:	65 e0       	ldi	r22, 0x05	; 5
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	0e 94 70 14 	call	0x28e0	; 0x28e0 <log_putError>
    5658:	01 c0       	rjmp	.+2      	; 0x565c <init_Registers+0x46>
    565a:	c3 df       	rcall	.-122    	; 0x55e2 <registers_CalcCount>
    565c:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <eeprom_ReadProg>
    5660:	8f 3f       	cpi	r24, 0xFF	; 255
    5662:	a1 f5       	brne	.+104    	; 0x56cc <init_Registers+0xb6>
    5664:	2a c0       	rjmp	.+84     	; 0x56ba <init_Registers+0xa4>
    5666:	83 2f       	mov	r24, r19
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	fc 01       	movw	r30, r24
    566c:	ee 0f       	add	r30, r30
    566e:	ff 1f       	adc	r31, r31
    5670:	88 0f       	add	r24, r24
    5672:	99 1f       	adc	r25, r25
    5674:	88 0f       	add	r24, r24
    5676:	99 1f       	adc	r25, r25
    5678:	88 0f       	add	r24, r24
    567a:	99 1f       	adc	r25, r25
    567c:	e8 0f       	add	r30, r24
    567e:	f9 1f       	adc	r31, r25
    5680:	ee 59       	subi	r30, 0x9E	; 158
    5682:	f6 4f       	sbci	r31, 0xF6	; 246
    5684:	e2 0f       	add	r30, r18
    5686:	f1 1d       	adc	r31, r1
    5688:	10 82       	st	Z, r1
    568a:	2f 5f       	subi	r18, 0xFF	; 255
    568c:	01 c0       	rjmp	.+2      	; 0x5690 <init_Registers+0x7a>
    568e:	20 e0       	ldi	r18, 0x00	; 0
    5690:	28 30       	cpi	r18, 0x08	; 8
    5692:	48 f3       	brcs	.-46     	; 0x5666 <init_Registers+0x50>
    5694:	83 2f       	mov	r24, r19
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	fc 01       	movw	r30, r24
    569a:	ee 0f       	add	r30, r30
    569c:	ff 1f       	adc	r31, r31
    569e:	88 0f       	add	r24, r24
    56a0:	99 1f       	adc	r25, r25
    56a2:	88 0f       	add	r24, r24
    56a4:	99 1f       	adc	r25, r25
    56a6:	88 0f       	add	r24, r24
    56a8:	99 1f       	adc	r25, r25
    56aa:	e8 0f       	add	r30, r24
    56ac:	f9 1f       	adc	r31, r25
    56ae:	ee 59       	subi	r30, 0x9E	; 158
    56b0:	f6 4f       	sbci	r31, 0xF6	; 246
    56b2:	11 86       	std	Z+9, r1	; 0x09
    56b4:	10 86       	std	Z+8, r1	; 0x08
    56b6:	3f 5f       	subi	r19, 0xFF	; 255
    56b8:	01 c0       	rjmp	.+2      	; 0x56bc <init_Registers+0xa6>
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	30 34       	cpi	r19, 0x40	; 64
    56be:	38 f3       	brcs	.-50     	; 0x568e <init_Registers+0x78>
    56c0:	40 e0       	ldi	r20, 0x00	; 0
    56c2:	50 e0       	ldi	r21, 0x00	; 0
    56c4:	66 e0       	ldi	r22, 0x06	; 6
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <log_putError>
    56cc:	08 95       	ret

000056ce <regNr_to_moduleBit>:
    56ce:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    56d2:	89 17       	cp	r24, r25
    56d4:	a0 f4       	brcc	.+40     	; 0x56fe <regNr_to_moduleBit+0x30>
    56d6:	80 34       	cpi	r24, 0x40	; 64
    56d8:	90 f4       	brcc	.+36     	; 0x56fe <regNr_to_moduleBit+0x30>
    56da:	28 e0       	ldi	r18, 0x08	; 8
    56dc:	e6 ef       	ldi	r30, 0xF6	; 246
    56de:	f7 e0       	ldi	r31, 0x07	; 7
    56e0:	30 81       	ld	r19, Z
    56e2:	83 17       	cp	r24, r19
    56e4:	48 f0       	brcs	.+18     	; 0x56f8 <regNr_to_moduleBit+0x2a>
    56e6:	91 81       	ldd	r25, Z+1	; 0x01
    56e8:	98 17       	cp	r25, r24
    56ea:	30 f0       	brcs	.+12     	; 0x56f8 <regNr_to_moduleBit+0x2a>
    56ec:	22 81       	ldd	r18, Z+2	; 0x02
    56ee:	98 2f       	mov	r25, r24
    56f0:	93 1b       	sub	r25, r19
    56f2:	80 e0       	ldi	r24, 0x00	; 0
    56f4:	92 0f       	add	r25, r18
    56f6:	08 95       	ret
    56f8:	33 96       	adiw	r30, 0x03	; 3
    56fa:	21 50       	subi	r18, 0x01	; 1
    56fc:	89 f7       	brne	.-30     	; 0x56e0 <regNr_to_moduleBit+0x12>
    56fe:	8f ef       	ldi	r24, 0xFF	; 255
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	08 95       	ret

00005704 <moduleBit_to_registerNr>:
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	16 c0       	rjmp	.+44     	; 0x5734 <moduleBit_to_registerNr+0x30>
    5708:	40 91 f8 07 	lds	r20, 0x07F8	; 0x8007f8 <registerMap+0x2>
    570c:	84 17       	cp	r24, r20
    570e:	88 f0       	brcs	.+34     	; 0x5732 <moduleBit_to_registerNr+0x2e>
    5710:	68 2f       	mov	r22, r24
    5712:	70 e0       	ldi	r23, 0x00	; 0
    5714:	e6 ef       	ldi	r30, 0xF6	; 246
    5716:	f7 e0       	ldi	r31, 0x07	; 7
    5718:	21 81       	ldd	r18, Z+1	; 0x01
    571a:	30 e0       	ldi	r19, 0x00	; 0
    571c:	24 0f       	add	r18, r20
    571e:	31 1d       	adc	r19, r1
    5720:	50 81       	ld	r21, Z
    5722:	25 1b       	sub	r18, r21
    5724:	31 09       	sbc	r19, r1
    5726:	26 17       	cp	r18, r22
    5728:	37 07       	cpc	r19, r23
    572a:	1c f0       	brlt	.+6      	; 0x5732 <moduleBit_to_registerNr+0x2e>
    572c:	84 1b       	sub	r24, r20
    572e:	85 0f       	add	r24, r21
    5730:	08 95       	ret
    5732:	9f 5f       	subi	r25, 0xFF	; 255
    5734:	98 30       	cpi	r25, 0x08	; 8
    5736:	40 f3       	brcs	.-48     	; 0x5708 <moduleBit_to_registerNr+0x4>
    5738:	8f ef       	ldi	r24, 0xFF	; 255
    573a:	08 95       	ret

0000573c <read_Register>:
    573c:	cf 93       	push	r28
    573e:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5742:	89 17       	cp	r24, r25
    5744:	08 f0       	brcs	.+2      	; 0x5748 <read_Register+0xc>
    5746:	3c c0       	rjmp	.+120    	; 0x57c0 <read_Register+0x84>
    5748:	c6 2f       	mov	r28, r22
    574a:	c1 df       	rcall	.-126    	; 0x56ce <regNr_to_moduleBit>
    574c:	81 11       	cpse	r24, r1
    574e:	30 c0       	rjmp	.+96     	; 0x57b0 <read_Register+0x74>
    5750:	29 2f       	mov	r18, r25
    5752:	2f 71       	andi	r18, 0x1F	; 31
    5754:	92 95       	swap	r25
    5756:	96 95       	lsr	r25
    5758:	97 70       	andi	r25, 0x07	; 7
    575a:	41 e0       	ldi	r20, 0x01	; 1
    575c:	50 e0       	ldi	r21, 0x00	; 0
    575e:	02 c0       	rjmp	.+4      	; 0x5764 <read_Register+0x28>
    5760:	44 0f       	add	r20, r20
    5762:	55 1f       	adc	r21, r21
    5764:	9a 95       	dec	r25
    5766:	e2 f7       	brpl	.-8      	; 0x5760 <read_Register+0x24>
    5768:	30 e0       	ldi	r19, 0x00	; 0
    576a:	f9 01       	movw	r30, r18
    576c:	ee 0f       	add	r30, r30
    576e:	ff 1f       	adc	r31, r31
    5770:	ee 0f       	add	r30, r30
    5772:	ff 1f       	adc	r31, r31
    5774:	ee 0f       	add	r30, r30
    5776:	ff 1f       	adc	r31, r31
    5778:	e7 5b       	subi	r30, 0xB7	; 183
    577a:	fd 4f       	sbci	r31, 0xFD	; 253
    577c:	91 81       	ldd	r25, Z+1	; 0x01
    577e:	94 23       	and	r25, r20
    5780:	11 f4       	brne	.+4      	; 0x5786 <read_Register+0x4a>
    5782:	c1 fd       	sbrc	r28, 1
    5784:	17 c0       	rjmp	.+46     	; 0x57b4 <read_Register+0x78>
    5786:	22 0f       	add	r18, r18
    5788:	33 1f       	adc	r19, r19
    578a:	22 0f       	add	r18, r18
    578c:	33 1f       	adc	r19, r19
    578e:	22 0f       	add	r18, r18
    5790:	33 1f       	adc	r19, r19
    5792:	f9 01       	movw	r30, r18
    5794:	e7 5b       	subi	r30, 0xB7	; 183
    5796:	fd 4f       	sbci	r31, 0xFD	; 253
    5798:	26 81       	ldd	r18, Z+6	; 0x06
    579a:	42 23       	and	r20, r18
    579c:	11 f0       	breq	.+4      	; 0x57a2 <read_Register+0x66>
    579e:	c0 fd       	sbrc	r28, 0
    57a0:	0b c0       	rjmp	.+22     	; 0x57b8 <read_Register+0x7c>
    57a2:	99 23       	and	r25, r25
    57a4:	71 f0       	breq	.+28     	; 0x57c2 <read_Register+0x86>
    57a6:	44 23       	and	r20, r20
    57a8:	61 f0       	breq	.+24     	; 0x57c2 <read_Register+0x86>
    57aa:	c4 30       	cpi	r28, 0x04	; 4
    57ac:	51 f4       	brne	.+20     	; 0x57c2 <read_Register+0x86>
    57ae:	06 c0       	rjmp	.+12     	; 0x57bc <read_Register+0x80>
    57b0:	80 e0       	ldi	r24, 0x00	; 0
    57b2:	07 c0       	rjmp	.+14     	; 0x57c2 <read_Register+0x86>
    57b4:	81 e0       	ldi	r24, 0x01	; 1
    57b6:	05 c0       	rjmp	.+10     	; 0x57c2 <read_Register+0x86>
    57b8:	81 e0       	ldi	r24, 0x01	; 1
    57ba:	03 c0       	rjmp	.+6      	; 0x57c2 <read_Register+0x86>
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	01 c0       	rjmp	.+2      	; 0x57c2 <read_Register+0x86>
    57c0:	80 e0       	ldi	r24, 0x00	; 0
    57c2:	cf 91       	pop	r28
    57c4:	08 95       	ret

000057c6 <get_RegisterStatus>:
    57c6:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    57ca:	89 17       	cp	r24, r25
    57cc:	78 f5       	brcc	.+94     	; 0x582c <get_RegisterStatus+0x66>
    57ce:	7f df       	rcall	.-258    	; 0x56ce <regNr_to_moduleBit>
    57d0:	81 11       	cpse	r24, r1
    57d2:	28 c0       	rjmp	.+80     	; 0x5824 <get_RegisterStatus+0x5e>
    57d4:	29 2f       	mov	r18, r25
    57d6:	2f 71       	andi	r18, 0x1F	; 31
    57d8:	39 2f       	mov	r19, r25
    57da:	32 95       	swap	r19
    57dc:	36 95       	lsr	r19
    57de:	37 70       	andi	r19, 0x07	; 7
    57e0:	81 e0       	ldi	r24, 0x01	; 1
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	02 c0       	rjmp	.+4      	; 0x57ea <get_RegisterStatus+0x24>
    57e6:	88 0f       	add	r24, r24
    57e8:	99 1f       	adc	r25, r25
    57ea:	3a 95       	dec	r19
    57ec:	e2 f7       	brpl	.-8      	; 0x57e6 <get_RegisterStatus+0x20>
    57ee:	30 e0       	ldi	r19, 0x00	; 0
    57f0:	f9 01       	movw	r30, r18
    57f2:	ee 0f       	add	r30, r30
    57f4:	ff 1f       	adc	r31, r31
    57f6:	ee 0f       	add	r30, r30
    57f8:	ff 1f       	adc	r31, r31
    57fa:	ee 0f       	add	r30, r30
    57fc:	ff 1f       	adc	r31, r31
    57fe:	e7 5b       	subi	r30, 0xB7	; 183
    5800:	fd 4f       	sbci	r31, 0xFD	; 253
    5802:	41 81       	ldd	r20, Z+1	; 0x01
    5804:	48 23       	and	r20, r24
    5806:	81 f0       	breq	.+32     	; 0x5828 <get_RegisterStatus+0x62>
    5808:	22 0f       	add	r18, r18
    580a:	33 1f       	adc	r19, r19
    580c:	22 0f       	add	r18, r18
    580e:	33 1f       	adc	r19, r19
    5810:	22 0f       	add	r18, r18
    5812:	33 1f       	adc	r19, r19
    5814:	f9 01       	movw	r30, r18
    5816:	e7 5b       	subi	r30, 0xB7	; 183
    5818:	fd 4f       	sbci	r31, 0xFD	; 253
    581a:	96 81       	ldd	r25, Z+6	; 0x06
    581c:	89 23       	and	r24, r25
    581e:	39 f0       	breq	.+14     	; 0x582e <get_RegisterStatus+0x68>
    5820:	81 e0       	ldi	r24, 0x01	; 1
    5822:	08 95       	ret
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	08 95       	ret
    5828:	82 e0       	ldi	r24, 0x02	; 2
    582a:	08 95       	ret
    582c:	80 e0       	ldi	r24, 0x00	; 0
    582e:	08 95       	ret

00005830 <count_Registers>:
    5830:	1f 93       	push	r17
    5832:	cf 93       	push	r28
    5834:	df 93       	push	r29
    5836:	18 2f       	mov	r17, r24
    5838:	c0 e0       	ldi	r28, 0x00	; 0
    583a:	d0 e0       	ldi	r29, 0x00	; 0
    583c:	06 c0       	rjmp	.+12     	; 0x584a <count_Registers+0x1a>
    583e:	61 2f       	mov	r22, r17
    5840:	8c 2f       	mov	r24, r28
    5842:	7c df       	rcall	.-264    	; 0x573c <read_Register>
    5844:	81 11       	cpse	r24, r1
    5846:	df 5f       	subi	r29, 0xFF	; 255
    5848:	cf 5f       	subi	r28, 0xFF	; 255
    584a:	c0 34       	cpi	r28, 0x40	; 64
    584c:	c0 f3       	brcs	.-16     	; 0x583e <count_Registers+0xe>
    584e:	8d 2f       	mov	r24, r29
    5850:	df 91       	pop	r29
    5852:	cf 91       	pop	r28
    5854:	1f 91       	pop	r17
    5856:	08 95       	ret

00005858 <read_allRegister>:
    5858:	ef 92       	push	r14
    585a:	ff 92       	push	r15
    585c:	0f 93       	push	r16
    585e:	1f 93       	push	r17
    5860:	cf 93       	push	r28
    5862:	df 93       	push	r29
    5864:	7c 01       	movw	r14, r24
    5866:	c0 e0       	ldi	r28, 0x00	; 0
    5868:	d0 e0       	ldi	r29, 0x00	; 0
    586a:	00 e0       	ldi	r16, 0x00	; 0
    586c:	17 c0       	rjmp	.+46     	; 0x589c <read_allRegister+0x44>
    586e:	1c 2f       	mov	r17, r28
    5870:	17 70       	andi	r17, 0x07	; 7
    5872:	09 f4       	brne	.+2      	; 0x5876 <read_allRegister+0x1e>
    5874:	d0 e0       	ldi	r29, 0x00	; 0
    5876:	d6 95       	lsr	r29
    5878:	63 e0       	ldi	r22, 0x03	; 3
    587a:	8c 2f       	mov	r24, r28
    587c:	5f df       	rcall	.-322    	; 0x573c <read_Register>
    587e:	88 23       	and	r24, r24
    5880:	11 f0       	breq	.+4      	; 0x5886 <read_allRegister+0x2e>
    5882:	d0 68       	ori	r29, 0x80	; 128
    5884:	0f 5f       	subi	r16, 0xFF	; 255
    5886:	17 30       	cpi	r17, 0x07	; 7
    5888:	41 f4       	brne	.+16     	; 0x589a <read_allRegister+0x42>
    588a:	e1 14       	cp	r14, r1
    588c:	f1 04       	cpc	r15, r1
    588e:	29 f0       	breq	.+10     	; 0x589a <read_allRegister+0x42>
    5890:	f7 01       	movw	r30, r14
    5892:	d0 83       	st	Z, r29
    5894:	c7 01       	movw	r24, r14
    5896:	01 96       	adiw	r24, 0x01	; 1
    5898:	7c 01       	movw	r14, r24
    589a:	cf 5f       	subi	r28, 0xFF	; 255
    589c:	c0 34       	cpi	r28, 0x40	; 64
    589e:	38 f3       	brcs	.-50     	; 0x586e <read_allRegister+0x16>
    58a0:	80 2f       	mov	r24, r16
    58a2:	df 91       	pop	r29
    58a4:	cf 91       	pop	r28
    58a6:	1f 91       	pop	r17
    58a8:	0f 91       	pop	r16
    58aa:	ff 90       	pop	r15
    58ac:	ef 90       	pop	r14
    58ae:	08 95       	ret

000058b0 <register_onOff>:
    58b0:	cf 93       	push	r28
    58b2:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    58b6:	89 17       	cp	r24, r25
    58b8:	b8 f5       	brcc	.+110    	; 0x5928 <register_onOff+0x78>
    58ba:	c6 2f       	mov	r28, r22
    58bc:	08 df       	rcall	.-496    	; 0x56ce <regNr_to_moduleBit>
    58be:	81 11       	cpse	r24, r1
    58c0:	33 c0       	rjmp	.+102    	; 0x5928 <register_onOff+0x78>
    58c2:	e9 2f       	mov	r30, r25
    58c4:	ef 71       	andi	r30, 0x1F	; 31
    58c6:	92 95       	swap	r25
    58c8:	96 95       	lsr	r25
    58ca:	97 70       	andi	r25, 0x07	; 7
    58cc:	c0 ff       	sbrs	r28, 0
    58ce:	17 c0       	rjmp	.+46     	; 0x58fe <register_onOff+0x4e>
    58d0:	f0 e0       	ldi	r31, 0x00	; 0
    58d2:	21 e0       	ldi	r18, 0x01	; 1
    58d4:	30 e0       	ldi	r19, 0x00	; 0
    58d6:	a9 01       	movw	r20, r18
    58d8:	02 c0       	rjmp	.+4      	; 0x58de <register_onOff+0x2e>
    58da:	44 0f       	add	r20, r20
    58dc:	55 1f       	adc	r21, r21
    58de:	9a 95       	dec	r25
    58e0:	e2 f7       	brpl	.-8      	; 0x58da <register_onOff+0x2a>
    58e2:	ca 01       	movw	r24, r20
    58e4:	ee 0f       	add	r30, r30
    58e6:	ff 1f       	adc	r31, r31
    58e8:	ee 0f       	add	r30, r30
    58ea:	ff 1f       	adc	r31, r31
    58ec:	ee 0f       	add	r30, r30
    58ee:	ff 1f       	adc	r31, r31
    58f0:	e7 5b       	subi	r30, 0xB7	; 183
    58f2:	fd 4f       	sbci	r31, 0xFD	; 253
    58f4:	80 95       	com	r24
    58f6:	91 81       	ldd	r25, Z+1	; 0x01
    58f8:	89 23       	and	r24, r25
    58fa:	81 83       	std	Z+1, r24	; 0x01
    58fc:	15 c0       	rjmp	.+42     	; 0x5928 <register_onOff+0x78>
    58fe:	f0 e0       	ldi	r31, 0x00	; 0
    5900:	21 e0       	ldi	r18, 0x01	; 1
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	a9 01       	movw	r20, r18
    5906:	02 c0       	rjmp	.+4      	; 0x590c <register_onOff+0x5c>
    5908:	44 0f       	add	r20, r20
    590a:	55 1f       	adc	r21, r21
    590c:	9a 95       	dec	r25
    590e:	e2 f7       	brpl	.-8      	; 0x5908 <register_onOff+0x58>
    5910:	ca 01       	movw	r24, r20
    5912:	ee 0f       	add	r30, r30
    5914:	ff 1f       	adc	r31, r31
    5916:	ee 0f       	add	r30, r30
    5918:	ff 1f       	adc	r31, r31
    591a:	ee 0f       	add	r30, r30
    591c:	ff 1f       	adc	r31, r31
    591e:	e7 5b       	subi	r30, 0xB7	; 183
    5920:	fd 4f       	sbci	r31, 0xFD	; 253
    5922:	91 81       	ldd	r25, Z+1	; 0x01
    5924:	89 2b       	or	r24, r25
    5926:	81 83       	std	Z+1, r24	; 0x01
    5928:	cf 91       	pop	r28
    592a:	08 95       	ret

0000592c <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    592c:	bf 92       	push	r11
    592e:	cf 92       	push	r12
    5930:	df 92       	push	r13
    5932:	ef 92       	push	r14
    5934:	ff 92       	push	r15
    5936:	0f 93       	push	r16
    5938:	1f 93       	push	r17
    593a:	cf 93       	push	r28
    593c:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    593e:	80 34       	cpi	r24, 0x40	; 64
    5940:	08 f0       	brcs	.+2      	; 0x5944 <program_toRegister+0x18>
    5942:	40 c0       	rjmp	.+128    	; 0x59c4 <program_toRegister+0x98>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5944:	e8 2e       	mov	r14, r24
    5946:	f1 2c       	mov	r15, r1
    5948:	f7 01       	movw	r30, r14
    594a:	ee 0f       	add	r30, r30
    594c:	ff 1f       	adc	r31, r31
    594e:	c7 01       	movw	r24, r14
    5950:	88 0f       	add	r24, r24
    5952:	99 1f       	adc	r25, r25
    5954:	88 0f       	add	r24, r24
    5956:	99 1f       	adc	r25, r25
    5958:	88 0f       	add	r24, r24
    595a:	99 1f       	adc	r25, r25
    595c:	e8 0f       	add	r30, r24
    595e:	f9 1f       	adc	r31, r25
    5960:	ee 59       	subi	r30, 0x9E	; 158
    5962:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5964:	b1 2c       	mov	r11, r1
uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
    5966:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5968:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    596a:	18 c0       	rjmp	.+48     	; 0x599c <program_toRegister+0x70>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    596c:	6f 01       	movw	r12, r30
    596e:	8f ef       	ldi	r24, 0xFF	; 255
    5970:	c8 1a       	sub	r12, r24
    5972:	d8 0a       	sbc	r13, r24
    5974:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5976:	d0 e0       	ldi	r29, 0x00	; 0
    5978:	0d c0       	rjmp	.+26     	; 0x5994 <program_toRegister+0x68>
				if ((regBits & 0x01) != 0) {
    597a:	8c 2f       	mov	r24, r28
    597c:	81 70       	andi	r24, 0x01	; 1
    597e:	c0 fd       	sbrc	r28, 0
					result++;
    5980:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    5982:	61 e0       	ldi	r22, 0x01	; 1
    5984:	81 11       	cpse	r24, r1
    5986:	01 c0       	rjmp	.+2      	; 0x598a <program_toRegister+0x5e>
    5988:	60 e0       	ldi	r22, 0x00	; 0
    598a:	81 2f       	mov	r24, r17
    598c:	91 df       	rcall	.-222    	; 0x58b0 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    598e:	c6 95       	lsr	r28
				regNr++;
    5990:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5992:	df 5f       	subi	r29, 0xFF	; 255
    5994:	d8 30       	cpi	r29, 0x08	; 8
    5996:	88 f3       	brcs	.-30     	; 0x597a <program_toRegister+0x4e>
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5998:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    599a:	f6 01       	movw	r30, r12
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    599c:	87 e0       	ldi	r24, 0x07	; 7
    599e:	8b 15       	cp	r24, r11
    59a0:	28 f7       	brcc	.-54     	; 0x596c <program_toRegister+0x40>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    59a2:	f7 01       	movw	r30, r14
    59a4:	ee 0f       	add	r30, r30
    59a6:	ff 1f       	adc	r31, r31
    59a8:	ee 0c       	add	r14, r14
    59aa:	ff 1c       	adc	r15, r15
    59ac:	ee 0c       	add	r14, r14
    59ae:	ff 1c       	adc	r15, r15
    59b0:	ee 0c       	add	r14, r14
    59b2:	ff 1c       	adc	r15, r15
    59b4:	ee 0d       	add	r30, r14
    59b6:	ff 1d       	adc	r31, r15
    59b8:	ee 59       	subi	r30, 0x9E	; 158
    59ba:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    59bc:	80 85       	ldd	r24, Z+8	; 0x08
    59be:	91 85       	ldd	r25, Z+9	; 0x09
    59c0:	f1 dd       	rcall	.-1054   	; 0x55a4 <setAllCouplers>
    59c2:	01 c0       	rjmp	.+2      	; 0x59c6 <program_toRegister+0x9a>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    59c4:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    59c6:	80 2f       	mov	r24, r16
    59c8:	df 91       	pop	r29
    59ca:	cf 91       	pop	r28
    59cc:	1f 91       	pop	r17
    59ce:	0f 91       	pop	r16
    59d0:	ff 90       	pop	r15
    59d2:	ef 90       	pop	r14
    59d4:	df 90       	pop	r13
    59d6:	cf 90       	pop	r12
    59d8:	bf 90       	pop	r11
    59da:	08 95       	ret

000059dc <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    59dc:	cf 93       	push	r28
    59de:	df 93       	push	r29
    59e0:	c8 2f       	mov	r28, r24
    59e2:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    59e4:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting+0x2>
    59e8:	81 11       	cpse	r24, r1
    59ea:	14 c0       	rjmp	.+40     	; 0x5a14 <midi_ProgramChange+0x38>
    59ec:	1f c0       	rjmp	.+62     	; 0x5a2c <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    59ee:	ec 2f       	mov	r30, r28
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	ee 0f       	add	r30, r30
    59f4:	ff 1f       	adc	r31, r31
    59f6:	ee 0f       	add	r30, r30
    59f8:	ff 1f       	adc	r31, r31
    59fa:	e8 0f       	add	r30, r24
    59fc:	f1 1d       	adc	r31, r1
    59fe:	ee 0f       	add	r30, r30
    5a00:	ff 1f       	adc	r31, r31
    5a02:	ee 0f       	add	r30, r30
    5a04:	ff 1f       	adc	r31, r31
    5a06:	ea 5d       	subi	r30, 0xDA	; 218
    5a08:	f7 4f       	sbci	r31, 0xF7	; 247
    5a0a:	90 81       	ld	r25, Z
    5a0c:	9f 3f       	cpi	r25, 0xFF	; 255
    5a0e:	39 f4       	brne	.+14     	; 0x5a1e <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    5a10:	8f 5f       	subi	r24, 0xFF	; 255
    5a12:	01 c0       	rjmp	.+2      	; 0x5a16 <midi_ProgramChange+0x3a>
    5a14:	80 e0       	ldi	r24, 0x00	; 0
    5a16:	84 30       	cpi	r24, 0x04	; 4
    5a18:	50 f3       	brcs	.-44     	; 0x59ee <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    5a1a:	80 e0       	ldi	r24, 0x00	; 0
    5a1c:	01 c0       	rjmp	.+2      	; 0x5a20 <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    5a1e:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    5a20:	8f 3f       	cpi	r24, 0xFF	; 255
    5a22:	21 f4       	brne	.+8      	; 0x5a2c <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    5a24:	8d 2f       	mov	r24, r29
    5a26:	82 df       	rcall	.-252    	; 0x592c <program_toRegister>
			midiLastProgram = program;
    5a28:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    5a2c:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    5a30:	c8 13       	cpse	r28, r24
    5a32:	08 c0       	rjmp	.+16     	; 0x5a44 <midi_ProgramChange+0x68>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    5a34:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    5a38:	8f 3f       	cpi	r24, 0xFF	; 255
    5a3a:	21 f0       	breq	.+8      	; 0x5a44 <midi_ProgramChange+0x68>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    5a3c:	80 6c       	ori	r24, 0xC0	; 192
    5a3e:	26 d5       	rcall	.+2636   	; 0x648c <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    5a40:	8d 2f       	mov	r24, r29
    5a42:	24 d5       	rcall	.+2632   	; 0x648c <serial1MIDISend>
    5a44:	df 91       	pop	r29
		}
	}
}
    5a46:	cf 91       	pop	r28
    5a48:	08 95       	ret

00005a4a <midi_resetRegisters>:
    5a4a:	cf 93       	push	r28


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5a4c:	c0 e0       	ldi	r28, 0x00	; 0
    5a4e:	04 c0       	rjmp	.+8      	; 0x5a58 <midi_resetRegisters+0xe>
		register_onOff(i,REGISTER_OFF);
    5a50:	60 e0       	ldi	r22, 0x00	; 0
    5a52:	8c 2f       	mov	r24, r28
    5a54:	2d df       	rcall	.-422    	; 0x58b0 <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5a56:	cf 5f       	subi	r28, 0xFF	; 255
    5a58:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <registerCount>
    5a5c:	c8 17       	cp	r28, r24
    5a5e:	c0 f3       	brcs	.-16     	; 0x5a50 <midi_resetRegisters+0x6>
		register_onOff(i,REGISTER_OFF);
	}
}
    5a60:	cf 91       	pop	r28
    5a62:	08 95       	ret

00005a64 <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5a64:	0f 93       	push	r16
    5a66:	1f 93       	push	r17
    5a68:	cf 93       	push	r28
    5a6a:	df 93       	push	r29
    5a6c:	c8 2f       	mov	r28, r24
    5a6e:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5a70:	80 34       	cpi	r24, 0x40	; 64
    5a72:	90 f4       	brcc	.+36     	; 0x5a98 <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5a74:	28 2f       	mov	r18, r24
    5a76:	30 e0       	ldi	r19, 0x00	; 0
    5a78:	c9 01       	movw	r24, r18
    5a7a:	88 0f       	add	r24, r24
    5a7c:	99 1f       	adc	r25, r25
    5a7e:	22 0f       	add	r18, r18
    5a80:	33 1f       	adc	r19, r19
    5a82:	22 0f       	add	r18, r18
    5a84:	33 1f       	adc	r19, r19
    5a86:	22 0f       	add	r18, r18
    5a88:	33 1f       	adc	r19, r19
    5a8a:	82 0f       	add	r24, r18
    5a8c:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5a8e:	8e 59       	subi	r24, 0x9E	; 158
    5a90:	96 4f       	sbci	r25, 0xF6	; 246
    5a92:	e2 de       	rcall	.-572    	; 0x5858 <read_allRegister>
    5a94:	18 2f       	mov	r17, r24
    5a96:	01 c0       	rjmp	.+2      	; 0x5a9a <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5a98:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5a9a:	d0 e0       	ldi	r29, 0x00	; 0
    5a9c:	6b dd       	rcall	.-1322   	; 0x5574 <getAllCouplers>
    5a9e:	9e 01       	movw	r18, r28
    5aa0:	22 0f       	add	r18, r18
    5aa2:	33 1f       	adc	r19, r19
    5aa4:	cc 0f       	add	r28, r28
    5aa6:	dd 1f       	adc	r29, r29
    5aa8:	cc 0f       	add	r28, r28
    5aaa:	dd 1f       	adc	r29, r29
    5aac:	cc 0f       	add	r28, r28
    5aae:	dd 1f       	adc	r29, r29
    5ab0:	c2 0f       	add	r28, r18
    5ab2:	d3 1f       	adc	r29, r19
    5ab4:	ce 59       	subi	r28, 0x9E	; 158
    5ab6:	d6 4f       	sbci	r29, 0xF6	; 246
    5ab8:	99 87       	std	Y+9, r25	; 0x09
    5aba:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5abc:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5abe:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <eeprom_UpdateProg>
	}
	return result;
}
    5ac2:	81 2f       	mov	r24, r17
    5ac4:	df 91       	pop	r29
    5ac6:	cf 91       	pop	r28
    5ac8:	1f 91       	pop	r17
    5aca:	0f 91       	pop	r16
    5acc:	08 95       	ret

00005ace <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5ace:	ff 92       	push	r15
    5ad0:	0f 93       	push	r16
    5ad2:	1f 93       	push	r17
    5ad4:	cf 93       	push	r28
    5ad6:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	8c 01       	movw	r16, r24
    5adc:	00 0f       	add	r16, r16
    5ade:	11 1f       	adc	r17, r17
    5ae0:	88 0f       	add	r24, r24
    5ae2:	99 1f       	adc	r25, r25
    5ae4:	88 0f       	add	r24, r24
    5ae6:	99 1f       	adc	r25, r25
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	08 0f       	add	r16, r24
    5aee:	19 1f       	adc	r17, r25
    5af0:	0e 59       	subi	r16, 0x9E	; 158
    5af2:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5af4:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5af6:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5af8:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5afa:	15 c0       	rjmp	.+42     	; 0x5b26 <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5afc:	9c 2f       	mov	r25, r28
    5afe:	97 70       	andi	r25, 0x07	; 7
    5b00:	21 f4       	brne	.+8      	; 0x5b0a <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5b02:	f8 01       	movw	r30, r16
    5b04:	d0 81       	ld	r29, Z
    5b06:	0f 5f       	subi	r16, 0xFF	; 255
    5b08:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5b0a:	8c 2f       	mov	r24, r28
    5b0c:	5c de       	rcall	.-840    	; 0x57c6 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5b0e:	d0 ff       	sbrs	r29, 0
    5b10:	03 c0       	rjmp	.+6      	; 0x5b18 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5b12:	82 30       	cpi	r24, 0x02	; 2
    5b14:	31 f0       	breq	.+12     	; 0x5b22 <midi_RegisterMatchProgram+0x54>
    5b16:	0d c0       	rjmp	.+26     	; 0x5b32 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5b18:	82 30       	cpi	r24, 0x02	; 2
    5b1a:	69 f0       	breq	.+26     	; 0x5b36 <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5b1c:	81 30       	cpi	r24, 0x01	; 1
    5b1e:	09 f4       	brne	.+2      	; 0x5b22 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5b20:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5b22:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5b24:	cf 5f       	subi	r28, 0xFF	; 255
    5b26:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5b2a:	c9 17       	cp	r28, r25
    5b2c:	38 f3       	brcs	.-50     	; 0x5afc <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5b2e:	8f 2d       	mov	r24, r15
    5b30:	03 c0       	rjmp	.+6      	; 0x5b38 <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5b32:	8f ef       	ldi	r24, 0xFF	; 255
    5b34:	01 c0       	rjmp	.+2      	; 0x5b38 <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5b36:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5b38:	df 91       	pop	r29
    5b3a:	cf 91       	pop	r28
    5b3c:	1f 91       	pop	r17
    5b3e:	0f 91       	pop	r16
    5b40:	ff 90       	pop	r15
    5b42:	08 95       	ret

00005b44 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5b44:	90 e0       	ldi	r25, 0x00	; 0
    5b46:	fc 01       	movw	r30, r24
    5b48:	ee 0f       	add	r30, r30
    5b4a:	ff 1f       	adc	r31, r31
    5b4c:	88 0f       	add	r24, r24
    5b4e:	99 1f       	adc	r25, r25
    5b50:	88 0f       	add	r24, r24
    5b52:	99 1f       	adc	r25, r25
    5b54:	88 0f       	add	r24, r24
    5b56:	99 1f       	adc	r25, r25
    5b58:	e8 0f       	add	r30, r24
    5b5a:	f9 1f       	adc	r31, r25
    5b5c:	ee 59       	subi	r30, 0x9E	; 158
    5b5e:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5b60:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5b62:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    5b64:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5b66:	09 c0       	rjmp	.+18     	; 0x5b7a <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    5b68:	39 2f       	mov	r19, r25
    5b6a:	37 70       	andi	r19, 0x07	; 7
    5b6c:	11 f4       	brne	.+4      	; 0x5b72 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    5b6e:	20 81       	ld	r18, Z
    5b70:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    5b72:	20 fd       	sbrc	r18, 0
			result++;
    5b74:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    5b76:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5b78:	9f 5f       	subi	r25, 0xFF	; 255
    5b7a:	30 91 0e 08 	lds	r19, 0x080E	; 0x80080e <registerCount>
    5b7e:	93 17       	cp	r25, r19
    5b80:	98 f3       	brcs	.-26     	; 0x5b68 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;
	
}
    5b82:	08 95       	ret

00005b84 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5b84:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    5b86:	e6 e2       	ldi	r30, 0x26	; 38
    5b88:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5b8a:	07 c0       	rjmp	.+14     	; 0x5b9a <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    5b8c:	8f ef       	ldi	r24, 0xFF	; 255
    5b8e:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    5b90:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    5b92:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    5b94:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    5b96:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5b98:	91 50       	subi	r25, 0x01	; 1
    5b9a:	91 11       	cpse	r25, r1
    5b9c:	f7 cf       	rjmp	.-18     	; 0x5b8c <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    5b9e:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <eeprom_ReadMidiInMap>
    5ba2:	8f 3f       	cpi	r24, 0xFF	; 255
    5ba4:	01 f5       	brne	.+64     	; 0x5be6 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5ba6:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    5baa:	e6 e2       	ldi	r30, 0x26	; 38
    5bac:	f8 e0       	ldi	r31, 0x08	; 8
    5bae:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    5bb0:	84 e2       	ldi	r24, 0x24	; 36
    5bb2:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    5bb4:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5bb6:	98 e3       	ldi	r25, 0x38	; 56
    5bb8:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    5bba:	21 e0       	ldi	r18, 0x01	; 1
    5bbc:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    5bbe:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    5bc0:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5bc2:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    5bc4:	22 e0       	ldi	r18, 0x02	; 2
    5bc6:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    5bc8:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    5bca:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5bcc:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    5bce:	93 e0       	ldi	r25, 0x03	; 3
    5bd0:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    5bd2:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    5bd4:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    5bd6:	8e e1       	ldi	r24, 0x1E	; 30
    5bd8:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5bda:	40 e0       	ldi	r20, 0x00	; 0
    5bdc:	50 e0       	ldi	r21, 0x00	; 0
    5bde:	61 e0       	ldi	r22, 0x01	; 1
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	0e 94 70 14 	call	0x28e0	; 0x28e0 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    5be6:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <eeprom_ReadMidiThrough>
    5bea:	8f 3f       	cpi	r24, 0xFF	; 255
    5bec:	51 f4       	brne	.+20     	; 0x5c02 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    5bee:	e4 e2       	ldi	r30, 0x24	; 36
    5bf0:	f8 e0       	ldi	r31, 0x08	; 8
    5bf2:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    5bf4:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5bf6:	40 e0       	ldi	r20, 0x00	; 0
    5bf8:	50 e0       	ldi	r21, 0x00	; 0
    5bfa:	61 e0       	ldi	r22, 0x01	; 1
    5bfc:	81 e0       	ldi	r24, 0x01	; 1
    5bfe:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <log_putError>
    5c02:	08 95       	ret

00005c04 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5c04:	20 e0       	ldi	r18, 0x00	; 0
    5c06:	09 c0       	rjmp	.+18     	; 0x5c1a <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    5c08:	88 0f       	add	r24, r24
    5c0a:	99 1f       	adc	r25, r25
    5c0c:	fc 01       	movw	r30, r24
    5c0e:	ea 5d       	subi	r30, 0xDA	; 218
    5c10:	f6 4f       	sbci	r31, 0xF6	; 246
    5c12:	8f ef       	ldi	r24, 0xFF	; 255
    5c14:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    5c16:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5c18:	2f 5f       	subi	r18, 0xFF	; 255
    5c1a:	82 2f       	mov	r24, r18
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	00 97       	sbiw	r24, 0x00	; 0
    5c20:	99 f7       	brne	.-26     	; 0x5c08 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    5c22:	0e 94 1c 0a 	call	0x1438	; 0x1438 <eeprom_ReadMidiOutMap>
    5c26:	8f 3f       	cpi	r24, 0xFF	; 255
    5c28:	b1 f4       	brne	.+44     	; 0x5c56 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5c2a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    5c2e:	e6 e2       	ldi	r30, 0x26	; 38
    5c30:	f9 e0       	ldi	r31, 0x09	; 9
    5c32:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    5c34:	91 e0       	ldi	r25, 0x01	; 1
    5c36:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    5c38:	92 e0       	ldi	r25, 0x02	; 2
    5c3a:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    5c3c:	93 e0       	ldi	r25, 0x03	; 3
    5c3e:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    5c40:	ee e2       	ldi	r30, 0x2E	; 46
    5c42:	f9 e0       	ldi	r31, 0x09	; 9
    5c44:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    5c46:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    5c48:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    5c4a:	40 e0       	ldi	r20, 0x00	; 0
    5c4c:	50 e0       	ldi	r21, 0x00	; 0
    5c4e:	62 e0       	ldi	r22, 0x02	; 2
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <log_putError>
    5c56:	08 95       	ret

00005c58 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    5c58:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    5c5a:	8f ef       	ldi	r24, 0xFF	; 255
    5c5c:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    5c5e:	e4 30       	cpi	r30, 0x04	; 4
    5c60:	50 f4       	brcc	.+20     	; 0x5c76 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    5c62:	f0 e0       	ldi	r31, 0x00	; 0
    5c64:	ee 0f       	add	r30, r30
    5c66:	ff 1f       	adc	r31, r31
    5c68:	ea 5d       	subi	r30, 0xDA	; 218
    5c6a:	f6 4f       	sbci	r31, 0xF6	; 246
    5c6c:	20 81       	ld	r18, Z
    5c6e:	2f 3f       	cpi	r18, 0xFF	; 255
    5c70:	11 f0       	breq	.+4      	; 0x5c76 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    5c72:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    5c74:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    5c76:	08 95       	ret

00005c78 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    5c78:	70 e0       	ldi	r23, 0x00	; 0
    5c7a:	52 c0       	rjmp	.+164    	; 0x5d20 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    5c7c:	87 2f       	mov	r24, r23
    5c7e:	90 e0       	ldi	r25, 0x00	; 0
    5c80:	24 2f       	mov	r18, r20
    5c82:	30 e0       	ldi	r19, 0x00	; 0
    5c84:	f9 01       	movw	r30, r18
    5c86:	ee 0f       	add	r30, r30
    5c88:	ff 1f       	adc	r31, r31
    5c8a:	df 01       	movw	r26, r30
    5c8c:	a2 0f       	add	r26, r18
    5c8e:	b3 1f       	adc	r27, r19
    5c90:	fc 01       	movw	r30, r24
    5c92:	ee 0f       	add	r30, r30
    5c94:	ff 1f       	adc	r31, r31
    5c96:	e8 0f       	add	r30, r24
    5c98:	f9 1f       	adc	r31, r25
    5c9a:	ee 0f       	add	r30, r30
    5c9c:	ff 1f       	adc	r31, r31
    5c9e:	ee 0f       	add	r30, r30
    5ca0:	ff 1f       	adc	r31, r31
    5ca2:	ea 0f       	add	r30, r26
    5ca4:	fb 1f       	adc	r31, r27
    5ca6:	ee 5c       	subi	r30, 0xCE	; 206
    5ca8:	f6 4f       	sbci	r31, 0xF6	; 246
    5caa:	a0 81       	ld	r26, Z
    5cac:	af 3f       	cpi	r26, 0xFF	; 255
    5cae:	d9 f0       	breq	.+54     	; 0x5ce6 <Midi_updateManualRange+0x6e>
    5cb0:	f9 01       	movw	r30, r18
    5cb2:	ee 0f       	add	r30, r30
    5cb4:	ff 1f       	adc	r31, r31
    5cb6:	e2 0f       	add	r30, r18
    5cb8:	f3 1f       	adc	r31, r19
    5cba:	9c 01       	movw	r18, r24
    5cbc:	22 0f       	add	r18, r18
    5cbe:	33 1f       	adc	r19, r19
    5cc0:	28 0f       	add	r18, r24
    5cc2:	39 1f       	adc	r19, r25
    5cc4:	22 0f       	add	r18, r18
    5cc6:	33 1f       	adc	r19, r19
    5cc8:	22 0f       	add	r18, r18
    5cca:	33 1f       	adc	r19, r19
    5ccc:	e2 0f       	add	r30, r18
    5cce:	f3 1f       	adc	r31, r19
    5cd0:	ee 5c       	subi	r30, 0xCE	; 206
    5cd2:	f6 4f       	sbci	r31, 0xF6	; 246
    5cd4:	21 81       	ldd	r18, Z+1	; 0x01
    5cd6:	2f 3f       	cpi	r18, 0xFF	; 255
    5cd8:	31 f0       	breq	.+12     	; 0x5ce6 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    5cda:	a6 17       	cp	r26, r22
    5cdc:	08 f4       	brcc	.+2      	; 0x5ce0 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    5cde:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    5ce0:	52 17       	cp	r21, r18
    5ce2:	08 f4       	brcc	.+2      	; 0x5ce6 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    5ce4:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    5ce6:	55 23       	and	r21, r21
    5ce8:	11 f0       	breq	.+4      	; 0x5cee <Midi_updateManualRange+0x76>
    5cea:	6f 3f       	cpi	r22, 0xFF	; 255
    5cec:	49 f4       	brne	.+18     	; 0x5d00 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    5cee:	88 0f       	add	r24, r24
    5cf0:	99 1f       	adc	r25, r25
    5cf2:	fc 01       	movw	r30, r24
    5cf4:	e4 5e       	subi	r30, 0xE4	; 228
    5cf6:	f7 4f       	sbci	r31, 0xF7	; 247
    5cf8:	8f ef       	ldi	r24, 0xFF	; 255
    5cfa:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    5cfc:	81 83       	std	Z+1, r24	; 0x01
    5cfe:	07 c0       	rjmp	.+14     	; 0x5d0e <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    5d00:	88 0f       	add	r24, r24
    5d02:	99 1f       	adc	r25, r25
    5d04:	fc 01       	movw	r30, r24
    5d06:	e4 5e       	subi	r30, 0xE4	; 228
    5d08:	f7 4f       	sbci	r31, 0xF7	; 247
    5d0a:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    5d0c:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    5d0e:	4f 5f       	subi	r20, 0xFF	; 255
    5d10:	03 c0       	rjmp	.+6      	; 0x5d18 <Midi_updateManualRange+0xa0>
    5d12:	40 e0       	ldi	r20, 0x00	; 0
    5d14:	6f ef       	ldi	r22, 0xFF	; 255
    5d16:	50 e0       	ldi	r21, 0x00	; 0
    5d18:	44 30       	cpi	r20, 0x04	; 4
    5d1a:	08 f4       	brcc	.+2      	; 0x5d1e <Midi_updateManualRange+0xa6>
    5d1c:	af cf       	rjmp	.-162    	; 0x5c7c <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    5d1e:	7f 5f       	subi	r23, 0xFF	; 255
    5d20:	74 30       	cpi	r23, 0x04	; 4
    5d22:	b8 f3       	brcs	.-18     	; 0x5d12 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    5d24:	08 95       	ret

00005d26 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    5d26:	63 e0       	ldi	r22, 0x03	; 3
    5d28:	28 c0       	rjmp	.+80     	; 0x5d7a <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    5d2a:	86 2f       	mov	r24, r22
    5d2c:	06 2e       	mov	r0, r22
    5d2e:	00 0c       	add	r0, r0
    5d30:	99 0b       	sbc	r25, r25
    5d32:	42 2f       	mov	r20, r18
    5d34:	02 2e       	mov	r0, r18
    5d36:	00 0c       	add	r0, r0
    5d38:	55 0b       	sbc	r21, r21
    5d3a:	fa 01       	movw	r30, r20
    5d3c:	ee 0f       	add	r30, r30
    5d3e:	ff 1f       	adc	r31, r31
    5d40:	e4 0f       	add	r30, r20
    5d42:	f5 1f       	adc	r31, r21
    5d44:	ac 01       	movw	r20, r24
    5d46:	44 0f       	add	r20, r20
    5d48:	55 1f       	adc	r21, r21
    5d4a:	da 01       	movw	r26, r20
    5d4c:	a8 0f       	add	r26, r24
    5d4e:	b9 1f       	adc	r27, r25
    5d50:	aa 0f       	add	r26, r26
    5d52:	bb 1f       	adc	r27, r27
    5d54:	aa 0f       	add	r26, r26
    5d56:	bb 1f       	adc	r27, r27
    5d58:	ae 0f       	add	r26, r30
    5d5a:	bf 1f       	adc	r27, r31
    5d5c:	ae 5c       	subi	r26, 0xCE	; 206
    5d5e:	b6 4f       	sbci	r27, 0xF6	; 246
    5d60:	3f ef       	ldi	r19, 0xFF	; 255
    5d62:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    5d64:	11 96       	adiw	r26, 0x01	; 1
    5d66:	3c 93       	st	X, r19
    5d68:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    5d6a:	fd 01       	movw	r30, r26
    5d6c:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    5d6e:	21 50       	subi	r18, 0x01	; 1
    5d70:	01 c0       	rjmp	.+2      	; 0x5d74 <init_Manual2Module+0x4e>
    5d72:	23 e0       	ldi	r18, 0x03	; 3
    5d74:	22 23       	and	r18, r18
    5d76:	cc f6       	brge	.-78     	; 0x5d2a <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    5d78:	61 50       	subi	r22, 0x01	; 1
    5d7a:	66 23       	and	r22, r22
    5d7c:	d4 f7       	brge	.-12     	; 0x5d72 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    5d7e:	0e 94 cc 09 	call	0x1398	; 0x1398 <eeprom_ReadManualMap>
    5d82:	8f 3f       	cpi	r24, 0xFF	; 255
    5d84:	41 f4       	brne	.+16     	; 0x5d96 <init_Manual2Module+0x70>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    5d86:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    5d8a:	40 e0       	ldi	r20, 0x00	; 0
    5d8c:	50 e0       	ldi	r21, 0x00	; 0
    5d8e:	63 e0       	ldi	r22, 0x03	; 3
    5d90:	81 e0       	ldi	r24, 0x01	; 1
    5d92:	0e 94 70 14 	call	0x28e0	; 0x28e0 <log_putError>
	}
	Midi_updateManualRange();
    5d96:	70 cf       	rjmp	.-288    	; 0x5c78 <Midi_updateManualRange>
    5d98:	08 95       	ret

00005d9a <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    5d9a:	84 30       	cpi	r24, 0x04	; 4
    5d9c:	d8 f4       	brcc	.+54     	; 0x5dd4 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    5d9e:	90 e0       	ldi	r25, 0x00	; 0
    5da0:	fc 01       	movw	r30, r24
    5da2:	ee 0f       	add	r30, r30
    5da4:	ff 1f       	adc	r31, r31
    5da6:	e8 0f       	add	r30, r24
    5da8:	f9 1f       	adc	r31, r25
    5daa:	ee 0f       	add	r30, r30
    5dac:	ff 1f       	adc	r31, r31
    5dae:	ee 0f       	add	r30, r30
    5db0:	ff 1f       	adc	r31, r31
    5db2:	ee 5c       	subi	r30, 0xCE	; 206
    5db4:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    5db6:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    5db8:	20 81       	ld	r18, Z
    5dba:	62 17       	cp	r22, r18
    5dbc:	40 f0       	brcs	.+16     	; 0x5dce <manualNote_to_moduleBit+0x34>
    5dbe:	91 81       	ldd	r25, Z+1	; 0x01
    5dc0:	96 17       	cp	r25, r22
    5dc2:	28 f0       	brcs	.+10     	; 0x5dce <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    5dc4:	92 81       	ldd	r25, Z+2	; 0x02
    5dc6:	62 1b       	sub	r22, r18
				return (result);
    5dc8:	80 e0       	ldi	r24, 0x00	; 0
    5dca:	96 0f       	add	r25, r22
    5dcc:	08 95       	ret
			}
			pRange++;
    5dce:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    5dd0:	81 50       	subi	r24, 0x01	; 1
    5dd2:	91 f7       	brne	.-28     	; 0x5db8 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    5dd4:	8f ef       	ldi	r24, 0xFF	; 255
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
}
    5dd8:	08 95       	ret

00005dda <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    5dda:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    5ddc:	e2 e3       	ldi	r30, 0x32	; 50
    5dde:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5de0:	44 e0       	ldi	r20, 0x04	; 4
    5de2:	16 c0       	rjmp	.+44     	; 0x5e10 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    5de4:	52 81       	ldd	r21, Z+2	; 0x02
    5de6:	85 17       	cp	r24, r21
    5de8:	88 f0       	brcs	.+34     	; 0x5e0c <moduleBit_to_manualNote+0x32>
    5dea:	68 2f       	mov	r22, r24
    5dec:	70 e0       	ldi	r23, 0x00	; 0
    5dee:	21 81       	ldd	r18, Z+1	; 0x01
    5df0:	a0 81       	ld	r26, Z
    5df2:	30 e0       	ldi	r19, 0x00	; 0
    5df4:	2a 1b       	sub	r18, r26
    5df6:	31 09       	sbc	r19, r1
    5df8:	25 0f       	add	r18, r21
    5dfa:	31 1d       	adc	r19, r1
    5dfc:	26 17       	cp	r18, r22
    5dfe:	37 07       	cpc	r19, r23
    5e00:	2c f0       	brlt	.+10     	; 0x5e0c <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    5e02:	98 2f       	mov	r25, r24
    5e04:	95 1b       	sub	r25, r21
				return(result);
    5e06:	8b 2f       	mov	r24, r27
    5e08:	9a 0f       	add	r25, r26
    5e0a:	08 95       	ret
			}
			pRange++;
    5e0c:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5e0e:	41 50       	subi	r20, 0x01	; 1
    5e10:	41 11       	cpse	r20, r1
    5e12:	e8 cf       	rjmp	.-48     	; 0x5de4 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    5e14:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    5e16:	b5 30       	cpi	r27, 0x05	; 5
    5e18:	18 f3       	brcs	.-58     	; 0x5de0 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    5e1a:	8f ef       	ldi	r24, 0xFF	; 255
    5e1c:	90 e0       	ldi	r25, 0x00	; 0
}
    5e1e:	08 95       	ret

00005e20 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    5e20:	1f 93       	push	r17
    5e22:	cf 93       	push	r28
    5e24:	df 93       	push	r29
    5e26:	c8 2f       	mov	r28, r24
    5e28:	16 2f       	mov	r17, r22
    5e2a:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    5e2c:	b6 df       	rcall	.-148    	; 0x5d9a <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
    5e2e:	81 11       	cpse	r24, r1
    5e30:	33 c0       	rjmp	.+102    	; 0x5e98 <manual_NoteOnOff+0x78>
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    5e32:	e9 2f       	mov	r30, r25
    5e34:	ef 71       	andi	r30, 0x1F	; 31
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    5e36:	92 95       	swap	r25
    5e38:	96 95       	lsr	r25
    5e3a:	97 70       	andi	r25, 0x07	; 7
		if (onOff == NOTE_OFF) {
    5e3c:	d1 11       	cpse	r29, r1
    5e3e:	16 c0       	rjmp	.+44     	; 0x5e6c <manual_NoteOnOff+0x4c>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    5e40:	f0 e0       	ldi	r31, 0x00	; 0
    5e42:	21 e0       	ldi	r18, 0x01	; 1
    5e44:	30 e0       	ldi	r19, 0x00	; 0
    5e46:	a9 01       	movw	r20, r18
    5e48:	02 c0       	rjmp	.+4      	; 0x5e4e <manual_NoteOnOff+0x2e>
    5e4a:	44 0f       	add	r20, r20
    5e4c:	55 1f       	adc	r21, r21
    5e4e:	9a 95       	dec	r25
    5e50:	e2 f7       	brpl	.-8      	; 0x5e4a <manual_NoteOnOff+0x2a>
    5e52:	ca 01       	movw	r24, r20
    5e54:	ee 0f       	add	r30, r30
    5e56:	ff 1f       	adc	r31, r31
    5e58:	ee 0f       	add	r30, r30
    5e5a:	ff 1f       	adc	r31, r31
    5e5c:	ee 0f       	add	r30, r30
    5e5e:	ff 1f       	adc	r31, r31
    5e60:	e7 5b       	subi	r30, 0xB7	; 183
    5e62:	fd 4f       	sbci	r31, 0xFD	; 253
    5e64:	91 81       	ldd	r25, Z+1	; 0x01
    5e66:	89 2b       	or	r24, r25
    5e68:	81 83       	std	Z+1, r24	; 0x01
    5e6a:	16 c0       	rjmp	.+44     	; 0x5e98 <manual_NoteOnOff+0x78>
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    5e6c:	f0 e0       	ldi	r31, 0x00	; 0
    5e6e:	21 e0       	ldi	r18, 0x01	; 1
    5e70:	30 e0       	ldi	r19, 0x00	; 0
    5e72:	a9 01       	movw	r20, r18
    5e74:	02 c0       	rjmp	.+4      	; 0x5e7a <manual_NoteOnOff+0x5a>
    5e76:	44 0f       	add	r20, r20
    5e78:	55 1f       	adc	r21, r21
    5e7a:	9a 95       	dec	r25
    5e7c:	e2 f7       	brpl	.-8      	; 0x5e76 <manual_NoteOnOff+0x56>
    5e7e:	ca 01       	movw	r24, r20
    5e80:	ee 0f       	add	r30, r30
    5e82:	ff 1f       	adc	r31, r31
    5e84:	ee 0f       	add	r30, r30
    5e86:	ff 1f       	adc	r31, r31
    5e88:	ee 0f       	add	r30, r30
    5e8a:	ff 1f       	adc	r31, r31
    5e8c:	e7 5b       	subi	r30, 0xB7	; 183
    5e8e:	fd 4f       	sbci	r31, 0xFD	; 253
    5e90:	80 95       	com	r24
    5e92:	91 81       	ldd	r25, Z+1	; 0x01
    5e94:	89 23       	and	r24, r25
    5e96:	81 83       	std	Z+1, r24	; 0x01
		}
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    5e98:	ec 2f       	mov	r30, r28
    5e9a:	f0 e0       	ldi	r31, 0x00	; 0
    5e9c:	ee 0f       	add	r30, r30
    5e9e:	ff 1f       	adc	r31, r31
    5ea0:	ea 5d       	subi	r30, 0xDA	; 218
    5ea2:	f6 4f       	sbci	r31, 0xF6	; 246
    5ea4:	81 81       	ldd	r24, Z+1	; 0x01
    5ea6:	8f 3f       	cpi	r24, 0xFF	; 255
    5ea8:	d9 f0       	breq	.+54     	; 0x5ee0 <manual_NoteOnOff+0xc0>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    5eaa:	d1 30       	cpi	r29, 0x01	; 1
    5eac:	31 f0       	breq	.+12     	; 0x5eba <manual_NoteOnOff+0x9a>
    5eae:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    5eb2:	99 23       	and	r25, r25
    5eb4:	21 f0       	breq	.+8      	; 0x5ebe <manual_NoteOnOff+0x9e>
    5eb6:	90 e9       	ldi	r25, 0x90	; 144
    5eb8:	03 c0       	rjmp	.+6      	; 0x5ec0 <manual_NoteOnOff+0xa0>
    5eba:	90 e9       	ldi	r25, 0x90	; 144
    5ebc:	01 c0       	rjmp	.+2      	; 0x5ec0 <manual_NoteOnOff+0xa0>
    5ebe:	90 e8       	ldi	r25, 0x80	; 128
    5ec0:	89 2b       	or	r24, r25
    5ec2:	e4 d2       	rcall	.+1480   	; 0x648c <serial1MIDISend>
		serial1MIDISend(note);
    5ec4:	81 2f       	mov	r24, r17
    5ec6:	e2 d2       	rcall	.+1476   	; 0x648c <serial1MIDISend>
    5ec8:	d1 11       	cpse	r29, r1
		serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    5eca:	06 c0       	rjmp	.+12     	; 0x5ed8 <manual_NoteOnOff+0xb8>
    5ecc:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    5ed0:	81 11       	cpse	r24, r1
    5ed2:	04 c0       	rjmp	.+8      	; 0x5edc <manual_NoteOnOff+0xbc>
    5ed4:	80 e4       	ldi	r24, 0x40	; 64
    5ed6:	03 c0       	rjmp	.+6      	; 0x5ede <manual_NoteOnOff+0xbe>
    5ed8:	80 e4       	ldi	r24, 0x40	; 64
    5eda:	01 c0       	rjmp	.+2      	; 0x5ede <manual_NoteOnOff+0xbe>
    5edc:	80 e0       	ldi	r24, 0x00	; 0
    5ede:	d6 d2       	rcall	.+1452   	; 0x648c <serial1MIDISend>
    5ee0:	df 91       	pop	r29
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual 
	}
}
    5ee2:	cf 91       	pop	r28
    5ee4:	1f 91       	pop	r17
    5ee6:	08 95       	ret

00005ee8 <midiAllNotesOff>:
    5ee8:	cf 92       	push	r12
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    5eea:	df 92       	push	r13
    5eec:	ef 92       	push	r14
    5eee:	ff 92       	push	r15
    5ef0:	0f 93       	push	r16
    5ef2:	1f 93       	push	r17
    5ef4:	cf 93       	push	r28
    5ef6:	df 93       	push	r29
    5ef8:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    5efa:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    5efc:	3c c0       	rjmp	.+120    	; 0x5f76 <midiAllNotesOff+0x8e>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
    5efe:	0c 2d       	mov	r16, r12
    5f00:	10 e0       	ldi	r17, 0x00	; 0
    5f02:	cd 2d       	mov	r28, r13
    5f04:	d0 e0       	ldi	r29, 0x00	; 0
    5f06:	f8 01       	movw	r30, r16
    5f08:	ee 0f       	add	r30, r30
    5f0a:	ff 1f       	adc	r31, r31
    5f0c:	ee 0f       	add	r30, r30
    5f0e:	ff 1f       	adc	r31, r31
    5f10:	ec 0f       	add	r30, r28
    5f12:	fd 1f       	adc	r31, r29
    5f14:	ee 0f       	add	r30, r30
    5f16:	ff 1f       	adc	r31, r31
    5f18:	ee 0f       	add	r30, r30
    5f1a:	ff 1f       	adc	r31, r31
    5f1c:	ea 5d       	subi	r30, 0xDA	; 218
    5f1e:	f7 4f       	sbci	r31, 0xF7	; 247
    5f20:	80 81       	ld	r24, Z
    5f22:	84 30       	cpi	r24, 0x04	; 4
    5f24:	38 f5       	brcc	.+78     	; 0x5f74 <midiAllNotesOff+0x8c>
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    5f26:	f8 01       	movw	r30, r16
    5f28:	ee 0f       	add	r30, r30
    5f2a:	ff 1f       	adc	r31, r31
    5f2c:	ee 0f       	add	r30, r30
    5f2e:	ff 1f       	adc	r31, r31
    5f30:	ec 0f       	add	r30, r28
    5f32:	fd 1f       	adc	r31, r29
    5f34:	ee 0f       	add	r30, r30
    5f36:	ff 1f       	adc	r31, r31
    5f38:	ee 0f       	add	r30, r30
    5f3a:	ff 1f       	adc	r31, r31
    5f3c:	ea 5d       	subi	r30, 0xDA	; 218
    5f3e:	f7 4f       	sbci	r31, 0xF7	; 247
    5f40:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5f42:	f2 80       	ldd	r15, Z+2	; 0x02
    5f44:	15 c0       	rjmp	.+42     	; 0x5f70 <midiAllNotesOff+0x88>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    5f46:	ee 24       	eor	r14, r14
    5f48:	e3 94       	inc	r14
    5f4a:	e6 0e       	add	r14, r22
    5f4c:	f8 01       	movw	r30, r16
    5f4e:	ee 0f       	add	r30, r30
    5f50:	ff 1f       	adc	r31, r31
    5f52:	ee 0f       	add	r30, r30
    5f54:	ff 1f       	adc	r31, r31
    5f56:	ec 0f       	add	r30, r28
    5f58:	fd 1f       	adc	r31, r29
    5f5a:	ee 0f       	add	r30, r30
    5f5c:	ff 1f       	adc	r31, r31
    5f5e:	ee 0f       	add	r30, r30
    5f60:	ff 1f       	adc	r31, r31
    5f62:	ea 5d       	subi	r30, 0xDA	; 218
    5f64:	f7 4f       	sbci	r31, 0xF7	; 247
    5f66:	40 e0       	ldi	r20, 0x00	; 0
    5f68:	80 81       	ld	r24, Z
    5f6a:	5a df       	rcall	.-332    	; 0x5e20 <manual_NoteOnOff>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5f6c:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    5f6e:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5f70:	f1 10       	cpse	r15, r1
    5f72:	e9 cf       	rjmp	.-46     	; 0x5f46 <midiAllNotesOff+0x5e>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
    5f74:	d3 94       	inc	r13
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    5f76:	83 e0       	ldi	r24, 0x03	; 3
    5f78:	8d 15       	cp	r24, r13
    5f7a:	08 f0       	brcs	.+2      	; 0x5f7e <midiAllNotesOff+0x96>
    5f7c:	c0 cf       	rjmp	.-128    	; 0x5efe <midiAllNotesOff+0x16>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
	}
}
    5f7e:	df 91       	pop	r29
    5f80:	cf 91       	pop	r28
    5f82:	1f 91       	pop	r17
    5f84:	0f 91       	pop	r16
    5f86:	ff 90       	pop	r15
    5f88:	ef 90       	pop	r14
    5f8a:	df 90       	pop	r13
    5f8c:	cf 90       	pop	r12
    5f8e:	08 95       	ret

00005f90 <midi_ManualOff>:

void midi_ManualOff(uint8_t manual){
    5f90:	0f 93       	push	r16
    5f92:	1f 93       	push	r17
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    5f98:	84 30       	cpi	r24, 0x04	; 4
    5f9a:	08 f5       	brcc	.+66     	; 0x5fde <midi_ManualOff+0x4e>
    5f9c:	08 2f       	mov	r16, r24
    5f9e:	10 e0       	ldi	r17, 0x00	; 0
    5fa0:	f8 01       	movw	r30, r16
    5fa2:	ee 0f       	add	r30, r30
    5fa4:	ff 1f       	adc	r31, r31
    5fa6:	e4 5e       	subi	r30, 0xE4	; 228
    5fa8:	f7 4f       	sbci	r31, 0xF7	; 247
    5faa:	c0 81       	ld	r28, Z
    5fac:	cf 3f       	cpi	r28, 0xFF	; 255
    5fae:	b9 f0       	breq	.+46     	; 0x5fde <midi_ManualOff+0x4e>
    5fb0:	d8 2f       	mov	r29, r24
    5fb2:	f8 01       	movw	r30, r16
    5fb4:	ee 0f       	add	r30, r30
    5fb6:	ff 1f       	adc	r31, r31
    5fb8:	e4 5e       	subi	r30, 0xE4	; 228
    5fba:	f7 4f       	sbci	r31, 0xF7	; 247
    5fbc:	81 81       	ldd	r24, Z+1	; 0x01
    5fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    5fc0:	31 f4       	brne	.+12     	; 0x5fce <midi_ManualOff+0x3e>
    5fc2:	0d c0       	rjmp	.+26     	; 0x5fde <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF);
    5fc4:	40 e0       	ldi	r20, 0x00	; 0
    5fc6:	6c 2f       	mov	r22, r28
    5fc8:	8d 2f       	mov	r24, r29
    5fca:	2a df       	rcall	.-428    	; 0x5e20 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    5fcc:	cf 5f       	subi	r28, 0xFF	; 255
    5fce:	f8 01       	movw	r30, r16
    5fd0:	ee 0f       	add	r30, r30
    5fd2:	ff 1f       	adc	r31, r31
    5fd4:	e4 5e       	subi	r30, 0xE4	; 228
    5fd6:	f7 4f       	sbci	r31, 0xF7	; 247
    5fd8:	91 81       	ldd	r25, Z+1	; 0x01
    5fda:	9c 17       	cp	r25, r28
    5fdc:	98 f7       	brcc	.-26     	; 0x5fc4 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF);
		}
	}
}
    5fde:	df 91       	pop	r29
    5fe0:	cf 91       	pop	r28
    5fe2:	1f 91       	pop	r17
    5fe4:	0f 91       	pop	r16
    5fe6:	08 95       	ret

00005fe8 <midi_AllManualsOff>:

void midi_AllManualsOff(){
    5fe8:	cf 93       	push	r28
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    5fea:	c0 e0       	ldi	r28, 0x00	; 0
    5fec:	03 c0       	rjmp	.+6      	; 0x5ff4 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    5fee:	8c 2f       	mov	r24, r28
    5ff0:	cf df       	rcall	.-98     	; 0x5f90 <midi_ManualOff>
		}
	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    5ff2:	cf 5f       	subi	r28, 0xFF	; 255
    5ff4:	c4 30       	cpi	r28, 0x04	; 4
    5ff6:	d8 f3       	brcs	.-10     	; 0x5fee <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    5ff8:	cf 91       	pop	r28
    5ffa:	08 95       	ret

00005ffc <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    5ffc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    6000:	88 23       	and	r24, r24
    6002:	39 f0       	breq	.+14     	; 0x6012 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6004:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    6008:	81 11       	cpse	r24, r1
    600a:	03 c0       	rjmp	.+6      	; 0x6012 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    600c:	ed df       	rcall	.-38     	; 0x5fe8 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    600e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    6012:	08 95       	ret

00006014 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6014:	0f 93       	push	r16
    6016:	1f 93       	push	r17
    6018:	cf 93       	push	r28
    601a:	df 93       	push	r29
    601c:	06 2f       	mov	r16, r22
    601e:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6020:	d8 2f       	mov	r29, r24
    6022:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6024:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6026:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6028:	3c c0       	rjmp	.+120    	; 0x60a2 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    602a:	4d 2f       	mov	r20, r29
    602c:	50 e0       	ldi	r21, 0x00	; 0
    602e:	2c 2f       	mov	r18, r28
    6030:	30 e0       	ldi	r19, 0x00	; 0
    6032:	fa 01       	movw	r30, r20
    6034:	ee 0f       	add	r30, r30
    6036:	ff 1f       	adc	r31, r31
    6038:	ee 0f       	add	r30, r30
    603a:	ff 1f       	adc	r31, r31
    603c:	e2 0f       	add	r30, r18
    603e:	f3 1f       	adc	r31, r19
    6040:	ee 0f       	add	r30, r30
    6042:	ff 1f       	adc	r31, r31
    6044:	ee 0f       	add	r30, r30
    6046:	ff 1f       	adc	r31, r31
    6048:	ea 5d       	subi	r30, 0xDA	; 218
    604a:	f7 4f       	sbci	r31, 0xF7	; 247
    604c:	80 81       	ld	r24, Z
    604e:	84 30       	cpi	r24, 0x04	; 4
    6050:	38 f5       	brcc	.+78     	; 0x60a0 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6052:	df 01       	movw	r26, r30
    6054:	61 81       	ldd	r22, Z+1	; 0x01
    6056:	70 2f       	mov	r23, r16
    6058:	76 1b       	sub	r23, r22
    605a:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    605c:	0a f1       	brmi	.+66     	; 0x60a0 <midiNote_to_Manual+0x8c>
    605e:	fd 01       	movw	r30, r26
    6060:	e2 81       	ldd	r30, Z+2	; 0x02
    6062:	f0 e0       	ldi	r31, 0x00	; 0
    6064:	a7 2f       	mov	r26, r23
    6066:	77 0f       	add	r23, r23
    6068:	bb 0b       	sbc	r27, r27
    606a:	ae 17       	cp	r26, r30
    606c:	bf 07       	cpc	r27, r31
    606e:	c4 f4       	brge	.+48     	; 0x60a0 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6070:	fa 01       	movw	r30, r20
    6072:	ee 0f       	add	r30, r30
    6074:	ff 1f       	adc	r31, r31
    6076:	ee 0f       	add	r30, r30
    6078:	ff 1f       	adc	r31, r31
    607a:	e2 0f       	add	r30, r18
    607c:	f3 1f       	adc	r31, r19
    607e:	ee 0f       	add	r30, r30
    6080:	ff 1f       	adc	r31, r31
    6082:	ee 0f       	add	r30, r30
    6084:	ff 1f       	adc	r31, r31
    6086:	ea 5d       	subi	r30, 0xDA	; 218
    6088:	f7 4f       	sbci	r31, 0xF7	; 247
    608a:	93 81       	ldd	r25, Z+3	; 0x03
    608c:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    608e:	11 30       	cpi	r17, 0x01	; 1
    6090:	21 f4       	brne	.+8      	; 0x609a <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6092:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6096:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    609a:	41 2f       	mov	r20, r17
    609c:	c1 de       	rcall	.-638    	; 0x5e20 <manual_NoteOnOff>
				found |= 0xFF;
    609e:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    60a0:	cf 5f       	subi	r28, 0xFF	; 255
    60a2:	c4 30       	cpi	r28, 0x04	; 4
    60a4:	08 f4       	brcc	.+2      	; 0x60a8 <midiNote_to_Manual+0x94>
    60a6:	c1 cf       	rjmp	.-126    	; 0x602a <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    60a8:	11 30       	cpi	r17, 0x01	; 1
    60aa:	49 f4       	brne	.+18     	; 0x60be <midiNote_to_Manual+0xaa>
    60ac:	91 11       	cpse	r25, r1
    60ae:	07 c0       	rjmp	.+14     	; 0x60be <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    60b0:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    60b4:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    60b8:	8f ef       	ldi	r24, 0xFF	; 255
    60ba:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    60be:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    60c2:	d8 13       	cpse	r29, r24
    60c4:	1f c0       	rjmp	.+62     	; 0x6104 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    60c6:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    60ca:	8f 3f       	cpi	r24, 0xFF	; 255
    60cc:	d9 f0       	breq	.+54     	; 0x6104 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    60ce:	11 30       	cpi	r17, 0x01	; 1
    60d0:	31 f0       	breq	.+12     	; 0x60de <midiNote_to_Manual+0xca>
    60d2:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    60d6:	99 23       	and	r25, r25
    60d8:	21 f0       	breq	.+8      	; 0x60e2 <midiNote_to_Manual+0xce>
    60da:	90 e9       	ldi	r25, 0x90	; 144
    60dc:	03 c0       	rjmp	.+6      	; 0x60e4 <midiNote_to_Manual+0xd0>
    60de:	90 e9       	ldi	r25, 0x90	; 144
    60e0:	01 c0       	rjmp	.+2      	; 0x60e4 <midiNote_to_Manual+0xd0>
    60e2:	90 e8       	ldi	r25, 0x80	; 128
    60e4:	89 2b       	or	r24, r25
    60e6:	d2 d1       	rcall	.+932    	; 0x648c <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    60e8:	80 2f       	mov	r24, r16
    60ea:	d0 d1       	rcall	.+928    	; 0x648c <serial1MIDISend>
    60ec:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    60ee:	06 c0       	rjmp	.+12     	; 0x60fc <midiNote_to_Manual+0xe8>
    60f0:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    60f4:	81 11       	cpse	r24, r1
    60f6:	04 c0       	rjmp	.+8      	; 0x6100 <midiNote_to_Manual+0xec>
    60f8:	80 e4       	ldi	r24, 0x40	; 64
    60fa:	03 c0       	rjmp	.+6      	; 0x6102 <midiNote_to_Manual+0xee>
    60fc:	80 e4       	ldi	r24, 0x40	; 64
    60fe:	01 c0       	rjmp	.+2      	; 0x6102 <midiNote_to_Manual+0xee>
    6100:	80 e0       	ldi	r24, 0x00	; 0
    6102:	c4 d1       	rcall	.+904    	; 0x648c <serial1MIDISend>
    6104:	df 91       	pop	r29
		}
	}
}
    6106:	cf 91       	pop	r28
    6108:	1f 91       	pop	r17
    610a:	0f 91       	pop	r16
    610c:	08 95       	ret

0000610e <midiIn_Process>:
    610e:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6110:	0c f0       	brlt	.+2      	; 0x6114 <midiIn_Process+0x6>
    6112:	4f c0       	rjmp	.+158    	; 0x61b2 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6114:	88 3f       	cpi	r24, 0xF8	; 248
    6116:	b8 f0       	brcs	.+46     	; 0x6146 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    6118:	8e 3f       	cpi	r24, 0xFE	; 254
    611a:	81 f4       	brne	.+32     	; 0x613c <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    611c:	81 e0       	ldi	r24, 0x01	; 1
    611e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6122:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6124:	f8 94       	cli
    6126:	06 c0       	rjmp	.+12     	; 0x6134 <midiIn_Process+0x26>
    6128:	ef e2       	ldi	r30, 0x2F	; 47
    612a:	f2 e0       	ldi	r31, 0x02	; 2
    612c:	89 e1       	ldi	r24, 0x19	; 25
    612e:	86 83       	std	Z+6, r24	; 0x06
    6130:	17 82       	std	Z+7, r1	; 0x07
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	81 11       	cpse	r24, r1
    6136:	f8 cf       	rjmp	.-16     	; 0x6128 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6138:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    613a:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    613c:	8f 3f       	cpi	r24, 0xFF	; 255
    613e:	09 f0       	breq	.+2      	; 0x6142 <midiIn_Process+0x34>
    6140:	79 c0       	rjmp	.+242    	; 0x6234 <midiIn_Process+0x126>
				midiAllReset();
    6142:	49 ca       	rjmp	.-2926   	; 0x55d6 <midiAllReset>
    6144:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6146:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    614a:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    614e:	90 e8       	ldi	r25, 0x80	; 128
    6150:	98 0f       	add	r25, r24
    6152:	90 34       	cpi	r25, 0x40	; 64
    6154:	20 f4       	brcc	.+8      	; 0x615e <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6156:	82 e0       	ldi	r24, 0x02	; 2
    6158:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    615c:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    615e:	90 e2       	ldi	r25, 0x20	; 32
    6160:	98 0f       	add	r25, r24
    6162:	90 31       	cpi	r25, 0x10	; 16
    6164:	20 f4       	brcc	.+8      	; 0x616e <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6166:	82 e0       	ldi	r24, 0x02	; 2
    6168:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    616c:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    616e:	82 3f       	cpi	r24, 0xF2	; 242
    6170:	21 f4       	brne	.+8      	; 0x617a <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6172:	82 e0       	ldi	r24, 0x02	; 2
    6174:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6178:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    617a:	80 3f       	cpi	r24, 0xF0	; 240
    617c:	21 f4       	brne	.+8      	; 0x6186 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    617e:	8f ef       	ldi	r24, 0xFF	; 255
    6180:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6184:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6186:	90 e4       	ldi	r25, 0x40	; 64
    6188:	98 0f       	add	r25, r24
    618a:	90 32       	cpi	r25, 0x20	; 32
    618c:	20 f4       	brcc	.+8      	; 0x6196 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    618e:	81 e0       	ldi	r24, 0x01	; 1
    6190:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6194:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6196:	81 3f       	cpi	r24, 0xF1	; 241
    6198:	11 f0       	breq	.+4      	; 0x619e <midiIn_Process+0x90>
    619a:	83 3f       	cpi	r24, 0xF3	; 243
    619c:	21 f4       	brne	.+8      	; 0x61a6 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    619e:	81 e0       	ldi	r24, 0x01	; 1
    61a0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    61a4:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    61a6:	87 3f       	cpi	r24, 0xF7	; 247
    61a8:	09 f4       	brne	.+2      	; 0x61ac <midiIn_Process+0x9e>
    61aa:	44 c0       	rjmp	.+136    	; 0x6234 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    61ac:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    61b0:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    61b2:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <midiDataByteCount>
    61b6:	e8 30       	cpi	r30, 0x08	; 8
    61b8:	40 f4       	brcc	.+16     	; 0x61ca <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    61ba:	91 e0       	ldi	r25, 0x01	; 1
    61bc:	9e 0f       	add	r25, r30
    61be:	90 93 1b 08 	sts	0x081B, r25	; 0x80081b <midiDataByteCount>
    61c2:	f0 e0       	ldi	r31, 0x00	; 0
    61c4:	ee 51       	subi	r30, 0x1E	; 30
    61c6:	f4 4f       	sbci	r31, 0xF4	; 244
    61c8:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    61ca:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    61ce:	8f 3f       	cpi	r24, 0xFF	; 255
    61d0:	89 f1       	breq	.+98     	; 0x6234 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    61d2:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <midiDataByteCount>
    61d6:	98 17       	cp	r25, r24
    61d8:	68 f1       	brcs	.+90     	; 0x6234 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    61da:	90 91 ea 0b 	lds	r25, 0x0BEA	; 0x800bea <midiLastCommand>
    61de:	90 3f       	cpi	r25, 0xF0	; 240
    61e0:	38 f5       	brcc	.+78     	; 0x6230 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    61e2:	89 2f       	mov	r24, r25
    61e4:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    61e6:	90 7f       	andi	r25, 0xF0	; 240
    61e8:	90 39       	cpi	r25, 0x90	; 144
    61ea:	71 f0       	breq	.+28     	; 0x6208 <midiIn_Process+0xfa>
    61ec:	18 f4       	brcc	.+6      	; 0x61f4 <midiIn_Process+0xe6>
    61ee:	90 38       	cpi	r25, 0x80	; 128
    61f0:	31 f0       	breq	.+12     	; 0x61fe <midiIn_Process+0xf0>
    61f2:	1e c0       	rjmp	.+60     	; 0x6230 <midiIn_Process+0x122>
    61f4:	90 3b       	cpi	r25, 0xB0	; 176
    61f6:	99 f0       	breq	.+38     	; 0x621e <midiIn_Process+0x110>
    61f8:	90 3c       	cpi	r25, 0xC0	; 192
    61fa:	b9 f0       	breq	.+46     	; 0x622a <midiIn_Process+0x11c>
    61fc:	19 c0       	rjmp	.+50     	; 0x6230 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    61fe:	40 e0       	ldi	r20, 0x00	; 0
    6200:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    6204:	07 df       	rcall	.-498    	; 0x6014 <midiNote_to_Manual>
						break;
    6206:	14 c0       	rjmp	.+40     	; 0x6230 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    6208:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <midiDataByte+0x1>
    620c:	91 11       	cpse	r25, r1
    620e:	02 c0       	rjmp	.+4      	; 0x6214 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6210:	40 e0       	ldi	r20, 0x00	; 0
    6212:	01 c0       	rjmp	.+2      	; 0x6216 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6214:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6216:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    621a:	fc de       	rcall	.-520    	; 0x6014 <midiNote_to_Manual>
						break;
    621c:	09 c0       	rjmp	.+18     	; 0x6230 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    621e:	90 91 e2 0b 	lds	r25, 0x0BE2	; 0x800be2 <midiDataByte>
    6222:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6224:	29 f4       	brne	.+10     	; 0x6230 <midiIn_Process+0x122>
    6226:	60 de       	rcall	.-832    	; 0x5ee8 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    6228:	03 c0       	rjmp	.+6      	; 0x6230 <midiIn_Process+0x122>
    622a:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    622e:	d6 db       	rcall	.-2132   	; 0x59dc <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6230:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
    6234:	08 95       	ret

00006236 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    6236:	bf 92       	push	r11
    6238:	cf 92       	push	r12
    623a:	df 92       	push	r13
    623c:	ef 92       	push	r14
    623e:	ff 92       	push	r15
    6240:	0f 93       	push	r16
    6242:	1f 93       	push	r17
    6244:	cf 93       	push	r28
    6246:	df 93       	push	r29
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6248:	09 2f       	mov	r16, r25
    624a:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    624c:	9f 71       	andi	r25, 0x1F	; 31
    624e:	d9 2e       	mov	r13, r25
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
    6250:	d8 2f       	mov	r29, r24
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6252:	00 32       	cpi	r16, 0x20	; 32
    6254:	09 f4       	brne	.+2      	; 0x6258 <midiKeyPress_Process+0x22>
    6256:	b5 c0       	rjmp	.+362    	; 0x63c2 <midiKeyPress_Process+0x18c>
    6258:	00 23       	and	r16, r16
    625a:	09 f4       	brne	.+2      	; 0x625e <midiKeyPress_Process+0x28>
    625c:	b4 c0       	rjmp	.+360    	; 0x63c6 <midiKeyPress_Process+0x190>
    625e:	b7 c0       	rjmp	.+366    	; 0x63ce <midiKeyPress_Process+0x198>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6260:	d0 ff       	sbrs	r29, 0
    6262:	ac c0       	rjmp	.+344    	; 0x63bc <midiKeyPress_Process+0x186>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6264:	20 e2       	ldi	r18, 0x20	; 32
    6266:	c2 9f       	mul	r28, r18
    6268:	c0 01       	movw	r24, r0
    626a:	11 24       	eor	r1, r1
    626c:	fd 2c       	mov	r15, r13
    626e:	f8 2a       	or	r15, r24
    6270:	8f 2d       	mov	r24, r15
    6272:	b3 dd       	rcall	.-1178   	; 0x5dda <moduleBit_to_manualNote>
    6274:	e8 2e       	mov	r14, r24
    6276:	c9 2e       	mov	r12, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6278:	18 2f       	mov	r17, r24
    627a:	8f 3f       	cpi	r24, 0xFF	; 255
    627c:	09 f4       	brne	.+2      	; 0x6280 <midiKeyPress_Process+0x4a>
    627e:	94 c0       	rjmp	.+296    	; 0x63a8 <midiKeyPress_Process+0x172>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6280:	69 2f       	mov	r22, r25
    6282:	ea dc       	rcall	.-1580   	; 0x5c58 <Manual_to_MidiNote>
    6284:	b9 2e       	mov	r11, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    6286:	8f 3f       	cpi	r24, 0xFF	; 255
    6288:	09 f1       	breq	.+66     	; 0x62cc <midiKeyPress_Process+0x96>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    628a:	00 32       	cpi	r16, 0x20	; 32
    628c:	31 f0       	breq	.+12     	; 0x629a <midiKeyPress_Process+0x64>
    628e:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    6292:	99 23       	and	r25, r25
    6294:	21 f0       	breq	.+8      	; 0x629e <midiKeyPress_Process+0x68>
    6296:	90 e9       	ldi	r25, 0x90	; 144
    6298:	03 c0       	rjmp	.+6      	; 0x62a0 <midiKeyPress_Process+0x6a>
    629a:	90 e9       	ldi	r25, 0x90	; 144
    629c:	01 c0       	rjmp	.+2      	; 0x62a0 <midiKeyPress_Process+0x6a>
    629e:	90 e8       	ldi	r25, 0x80	; 128
    62a0:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    62a2:	f4 d0       	rcall	.+488    	; 0x648c <serial1MIDISend>
    62a4:	8b 2d       	mov	r24, r11
    62a6:	f2 d0       	rcall	.+484    	; 0x648c <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    62a8:	01 11       	cpse	r16, r1
    62aa:	06 c0       	rjmp	.+12     	; 0x62b8 <midiKeyPress_Process+0x82>
    62ac:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    62b0:	81 11       	cpse	r24, r1
    62b2:	04 c0       	rjmp	.+8      	; 0x62bc <midiKeyPress_Process+0x86>
    62b4:	80 e4       	ldi	r24, 0x40	; 64
    62b6:	03 c0       	rjmp	.+6      	; 0x62be <midiKeyPress_Process+0x88>
    62b8:	80 e4       	ldi	r24, 0x40	; 64
    62ba:	01 c0       	rjmp	.+2      	; 0x62be <midiKeyPress_Process+0x88>
    62bc:	80 e0       	ldi	r24, 0x00	; 0
    62be:	e6 d0       	rcall	.+460    	; 0x648c <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    62c0:	00 32       	cpi	r16, 0x20	; 32
    62c2:	21 f4       	brne	.+8      	; 0x62cc <midiKeyPress_Process+0x96>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    62c4:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    62c8:	c0 92 05 02 	sts	0x0205, r12	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    62cc:	41 e0       	ldi	r20, 0x01	; 1
    62ce:	00 32       	cpi	r16, 0x20	; 32
    62d0:	09 f0       	breq	.+2      	; 0x62d4 <midiKeyPress_Process+0x9e>
    62d2:	40 e0       	ldi	r20, 0x00	; 0
    62d4:	e4 2e       	mov	r14, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    62d6:	11 11       	cpse	r17, r1
    62d8:	19 c0       	rjmp	.+50     	; 0x630c <midiKeyPress_Process+0xd6>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    62da:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <midi_Couplers>
    62de:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    62e0:	19 f4       	brne	.+6      	; 0x62e8 <midiKeyPress_Process+0xb2>
    62e2:	6c 2d       	mov	r22, r12
    62e4:	81 e0       	ldi	r24, 0x01	; 1
    62e6:	9c dd       	rcall	.-1224   	; 0x5e20 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    62e8:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <midi_Couplers+0x1>
    62ec:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    62ee:	21 f4       	brne	.+8      	; 0x62f8 <midiKeyPress_Process+0xc2>
    62f0:	4e 2d       	mov	r20, r14
    62f2:	6c 2d       	mov	r22, r12
    62f4:	82 e0       	ldi	r24, 0x02	; 2
    62f6:	94 dd       	rcall	.-1240   	; 0x5e20 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    62f8:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x3>
    62fc:	8f 3f       	cpi	r24, 0xFF	; 255
    62fe:	09 f0       	breq	.+2      	; 0x6302 <midiKeyPress_Process+0xcc>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6300:	53 c0       	rjmp	.+166    	; 0x63a8 <midiKeyPress_Process+0x172>
    6302:	4e 2d       	mov	r20, r14
    6304:	6c 2d       	mov	r22, r12
    6306:	83 e0       	ldi	r24, 0x03	; 3
    6308:	8b dd       	rcall	.-1258   	; 0x5e20 <manual_NoteOnOff>
    630a:	4e c0       	rjmp	.+156    	; 0x63a8 <midiKeyPress_Process+0x172>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    630c:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    630e:	c9 f4       	brne	.+50     	; 0x6342 <midiKeyPress_Process+0x10c>
    6310:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers+0x2>
    6314:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6316:	19 f4       	brne	.+6      	; 0x631e <midiKeyPress_Process+0xe8>
    6318:	6c 2d       	mov	r22, r12
    631a:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    631c:	81 dd       	rcall	.-1278   	; 0x5e20 <manual_NoteOnOff>
    631e:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x4>
    6322:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6324:	21 f4       	brne	.+8      	; 0x632e <midiKeyPress_Process+0xf8>
    6326:	4e 2d       	mov	r20, r14
    6328:	6c 2d       	mov	r22, r12
    632a:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    632c:	79 dd       	rcall	.-1294   	; 0x5e20 <manual_NoteOnOff>
    632e:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x6>
    6332:	8f 3f       	cpi	r24, 0xFF	; 255
    6334:	09 f0       	breq	.+2      	; 0x6338 <midiKeyPress_Process+0x102>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6336:	38 c0       	rjmp	.+112    	; 0x63a8 <midiKeyPress_Process+0x172>
    6338:	4e 2d       	mov	r20, r14
    633a:	6c 2d       	mov	r22, r12
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	70 dd       	rcall	.-1312   	; 0x5e20 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6340:	33 c0       	rjmp	.+102    	; 0x63a8 <midiKeyPress_Process+0x172>
    6342:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    6344:	c1 f4       	brne	.+48     	; 0x6376 <midiKeyPress_Process+0x140>
    6346:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    634a:	8f 3f       	cpi	r24, 0xFF	; 255
    634c:	19 f4       	brne	.+6      	; 0x6354 <midiKeyPress_Process+0x11e>
    634e:	6c 2d       	mov	r22, r12
    6350:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6352:	66 dd       	rcall	.-1332   	; 0x5e20 <manual_NoteOnOff>
    6354:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6358:	8f 3f       	cpi	r24, 0xFF	; 255
    635a:	21 f4       	brne	.+8      	; 0x6364 <midiKeyPress_Process+0x12e>
    635c:	4e 2d       	mov	r20, r14
    635e:	6c 2d       	mov	r22, r12
    6360:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6362:	5e dd       	rcall	.-1348   	; 0x5e20 <manual_NoteOnOff>
    6364:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x8>
    6368:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    636a:	f1 f4       	brne	.+60     	; 0x63a8 <midiKeyPress_Process+0x172>
    636c:	4e 2d       	mov	r20, r14
    636e:	6c 2d       	mov	r22, r12
    6370:	81 e0       	ldi	r24, 0x01	; 1
    6372:	56 dd       	rcall	.-1364   	; 0x5e20 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6374:	19 c0       	rjmp	.+50     	; 0x63a8 <midiKeyPress_Process+0x172>
    6376:	13 30       	cpi	r17, 0x03	; 3
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    6378:	b9 f4       	brne	.+46     	; 0x63a8 <midiKeyPress_Process+0x172>
    637a:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    637e:	8f 3f       	cpi	r24, 0xFF	; 255
    6380:	19 f4       	brne	.+6      	; 0x6388 <midiKeyPress_Process+0x152>
    6382:	6c 2d       	mov	r22, r12
    6384:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    6386:	4c dd       	rcall	.-1384   	; 0x5e20 <manual_NoteOnOff>
    6388:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    638c:	8f 3f       	cpi	r24, 0xFF	; 255
    638e:	21 f4       	brne	.+8      	; 0x6398 <midiKeyPress_Process+0x162>
    6390:	4e 2d       	mov	r20, r14
    6392:	6c 2d       	mov	r22, r12
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    6394:	81 e0       	ldi	r24, 0x01	; 1
    6396:	44 dd       	rcall	.-1400   	; 0x5e20 <manual_NoteOnOff>
    6398:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    639c:	8f 3f       	cpi	r24, 0xFF	; 255
    639e:	21 f4       	brne	.+8      	; 0x63a8 <midiKeyPress_Process+0x172>
    63a0:	4e 2d       	mov	r20, r14
    63a2:	6c 2d       	mov	r22, r12
    63a4:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    63a6:	3c dd       	rcall	.-1416   	; 0x5e20 <manual_NoteOnOff>
    63a8:	8f 2d       	mov	r24, r15
    63aa:	ac d9       	rcall	.-3240   	; 0x5704 <moduleBit_to_registerNr>
    63ac:	00 32       	cpi	r16, 0x20	; 32
    63ae:	11 f4       	brne	.+4      	; 0x63b4 <midiKeyPress_Process+0x17e>
    63b0:	20 e8       	ldi	r18, 0x80	; 128
    63b2:	01 c0       	rjmp	.+2      	; 0x63b6 <midiKeyPress_Process+0x180>
    63b4:	20 e0       	ldi	r18, 0x00	; 0
    63b6:	82 2b       	or	r24, r18
    63b8:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    63bc:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    63be:	cf 5f       	subi	r28, 0xFF	; 255
    63c0:	03 c0       	rjmp	.+6      	; 0x63c8 <midiKeyPress_Process+0x192>
    63c2:	c0 e0       	ldi	r28, 0x00	; 0
    63c4:	01 c0       	rjmp	.+2      	; 0x63c8 <midiKeyPress_Process+0x192>
    63c6:	c0 e0       	ldi	r28, 0x00	; 0
    63c8:	c8 30       	cpi	r28, 0x08	; 8
    63ca:	08 f4       	brcc	.+2      	; 0x63ce <midiKeyPress_Process+0x198>
    63cc:	49 cf       	rjmp	.-366    	; 0x6260 <midiKeyPress_Process+0x2a>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    63ce:	df 91       	pop	r29
    63d0:	cf 91       	pop	r28
    63d2:	1f 91       	pop	r17
    63d4:	0f 91       	pop	r16
    63d6:	ff 90       	pop	r15
    63d8:	ef 90       	pop	r14
    63da:	df 90       	pop	r13
    63dc:	cf 90       	pop	r12
    63de:	bf 90       	pop	r11
    63e0:	08 95       	ret

000063e2 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    63e2:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    63e4:	c0 e0       	ldi	r28, 0x00	; 0
    63e6:	10 c0       	rjmp	.+32     	; 0x6408 <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    63e8:	ec 2f       	mov	r30, r28
    63ea:	f0 e0       	ldi	r31, 0x00	; 0
    63ec:	ee 0f       	add	r30, r30
    63ee:	ff 1f       	adc	r31, r31
    63f0:	ea 5d       	subi	r30, 0xDA	; 218
    63f2:	f6 4f       	sbci	r31, 0xF6	; 246
    63f4:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    63f6:	80 31       	cpi	r24, 0x10	; 16
    63f8:	30 f4       	brcc	.+12     	; 0x6406 <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    63fa:	80 6b       	ori	r24, 0xB0	; 176
    63fc:	47 d0       	rcall	.+142    	; 0x648c <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    63fe:	8b e7       	ldi	r24, 0x7B	; 123
    6400:	45 d0       	rcall	.+138    	; 0x648c <serial1MIDISend>
			serial1MIDISend(0);
    6402:	80 e0       	ldi	r24, 0x00	; 0
    6404:	43 d0       	rcall	.+134    	; 0x648c <serial1MIDISend>
    6406:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6408:	c4 30       	cpi	r28, 0x04	; 4
    640a:	70 f3       	brcs	.-36     	; 0x63e8 <midiSendAllNotesOff+0x6>
    640c:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    640e:	08 95       	ret

00006410 <midi_SendActiveSense>:
    6410:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6412:	3c c0       	rjmp	.+120    	; 0x648c <serial1MIDISend>
    6414:	08 95       	ret

00006416 <midi_CheckTxActiveSense>:
		}
	}
}

void midi_CheckTxActiveSense(){
	if (midi_Setting.TxActivceSense) {
    6416:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <midi_Setting>
    641a:	88 23       	and	r24, r24
    641c:	b1 f0       	breq	.+44     	; 0x644a <midi_CheckTxActiveSense+0x34>
		if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    641e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6422:	88 23       	and	r24, r24
    6424:	21 f0       	breq	.+8      	; 0x642e <midi_CheckTxActiveSense+0x18>
    6426:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    642a:	8f 3f       	cpi	r24, 0xFF	; 255
    642c:	71 f4       	brne	.+28     	; 0x644a <midi_CheckTxActiveSense+0x34>
			// timer ended or not yet running
			TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    642e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6430:	f8 94       	cli
    6432:	81 e0       	ldi	r24, 0x01	; 1
    6434:	06 c0       	rjmp	.+12     	; 0x6442 <midi_CheckTxActiveSense+0x2c>
    6436:	ef e2       	ldi	r30, 0x2F	; 47
    6438:	f2 e0       	ldi	r31, 0x02	; 2
    643a:	8a e0       	ldi	r24, 0x0A	; 10
    643c:	80 8b       	std	Z+16, r24	; 0x10
    643e:	11 8a       	std	Z+17, r1	; 0x11
    6440:	80 e0       	ldi	r24, 0x00	; 0
    6442:	81 11       	cpse	r24, r1
    6444:	f8 cf       	rjmp	.-16     	; 0x6436 <midi_CheckTxActiveSense+0x20>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6446:	9f bf       	out	0x3f, r25	; 63
			midi_SendActiveSense();
    6448:	e3 cf       	rjmp	.-58     	; 0x6410 <midi_SendActiveSense>
    644a:	08 95       	ret

0000644c <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    644c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6450:	8f e1       	ldi	r24, 0x1F	; 31
    6452:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6456:	e9 ec       	ldi	r30, 0xC9	; 201
    6458:	f0 e0       	ldi	r31, 0x00	; 0
    645a:	80 81       	ld	r24, Z
    645c:	88 69       	ori	r24, 0x98	; 152
    645e:	80 83       	st	Z, r24
    6460:	ea ec       	ldi	r30, 0xCA	; 202
    6462:	f0 e0       	ldi	r31, 0x00	; 0
    6464:	80 81       	ld	r24, Z
    6466:	86 60       	ori	r24, 0x06	; 6
    6468:	80 83       	st	Z, r24
    646a:	10 92 37 0c 	sts	0x0C37, r1	; 0x800c37 <midiRxInIndex>
    646e:	10 92 82 0d 	sts	0x0D82, r1	; 0x800d82 <midiRxOutIndex>
    6472:	10 92 eb 0b 	sts	0x0BEB, r1	; 0x800beb <midiTxInIndex>
    6476:	10 92 f0 0b 	sts	0x0BF0, r1	; 0x800bf0 <midiTxOutIndex>
    647a:	10 92 ef 0b 	sts	0x0BEF, r1	; 0x800bef <midiRxOvfl>
    647e:	10 92 f4 0b 	sts	0x0BF4, r1	; 0x800bf4 <midiTxOvfl>
    6482:	10 92 7e 0c 	sts	0x0C7E, r1	; 0x800c7e <midiRxOvflCount>
    6486:	10 92 83 0d 	sts	0x0D83, r1	; 0x800d83 <midiTxOvflCount>
    648a:	08 95       	ret

0000648c <serial1MIDISend>:
    648c:	e9 ec       	ldi	r30, 0xC9	; 201
    648e:	f0 e0       	ldi	r31, 0x00	; 0
    6490:	90 81       	ld	r25, Z
    6492:	9f 7d       	andi	r25, 0xDF	; 223
    6494:	90 83       	st	Z, r25
    6496:	e0 91 eb 0b 	lds	r30, 0x0BEB	; 0x800beb <midiTxInIndex>
    649a:	f0 e0       	ldi	r31, 0x00	; 0
    649c:	eb 5e       	subi	r30, 0xEB	; 235
    649e:	f3 4f       	sbci	r31, 0xF3	; 243
    64a0:	80 83       	st	Z, r24
    64a2:	80 91 eb 0b 	lds	r24, 0x0BEB	; 0x800beb <midiTxInIndex>
    64a6:	8f 5f       	subi	r24, 0xFF	; 255
    64a8:	8f 71       	andi	r24, 0x1F	; 31
    64aa:	80 93 eb 0b 	sts	0x0BEB, r24	; 0x800beb <midiTxInIndex>
    64ae:	90 91 eb 0b 	lds	r25, 0x0BEB	; 0x800beb <midiTxInIndex>
    64b2:	80 91 f0 0b 	lds	r24, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    64b6:	98 13       	cpse	r25, r24
    64b8:	0d c0       	rjmp	.+26     	; 0x64d4 <serial1MIDISend+0x48>
    64ba:	80 91 83 0d 	lds	r24, 0x0D83	; 0x800d83 <midiTxOvflCount>
    64be:	88 23       	and	r24, r24
    64c0:	31 f0       	breq	.+12     	; 0x64ce <serial1MIDISend+0x42>
    64c2:	8f 3f       	cpi	r24, 0xFF	; 255
    64c4:	39 f0       	breq	.+14     	; 0x64d4 <serial1MIDISend+0x48>
    64c6:	8f 5f       	subi	r24, 0xFF	; 255
    64c8:	80 93 83 0d 	sts	0x0D83, r24	; 0x800d83 <midiTxOvflCount>
    64cc:	03 c0       	rjmp	.+6      	; 0x64d4 <serial1MIDISend+0x48>
    64ce:	81 e0       	ldi	r24, 0x01	; 1
    64d0:	80 93 83 0d 	sts	0x0D83, r24	; 0x800d83 <midiTxOvflCount>
    64d4:	e9 ec       	ldi	r30, 0xC9	; 201
    64d6:	f0 e0       	ldi	r31, 0x00	; 0
    64d8:	80 81       	ld	r24, Z
    64da:	80 62       	ori	r24, 0x20	; 32
    64dc:	80 83       	st	Z, r24
    64de:	08 95       	ret

000064e0 <serial1MIDIReadRx>:
    64e0:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <midiRxInIndex>
    64e4:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <midiRxOutIndex>
    64e8:	98 17       	cp	r25, r24
    64ea:	69 f0       	breq	.+26     	; 0x6506 <serial1MIDIReadRx+0x26>
    64ec:	e0 91 82 0d 	lds	r30, 0x0D82	; 0x800d82 <midiRxOutIndex>
    64f0:	f0 e0       	ldi	r31, 0x00	; 0
    64f2:	eb 50       	subi	r30, 0x0B	; 11
    64f4:	f4 4f       	sbci	r31, 0xF4	; 244
    64f6:	80 81       	ld	r24, Z
    64f8:	90 91 82 0d 	lds	r25, 0x0D82	; 0x800d82 <midiRxOutIndex>
    64fc:	9f 5f       	subi	r25, 0xFF	; 255
    64fe:	9f 71       	andi	r25, 0x1F	; 31
    6500:	90 93 82 0d 	sts	0x0D82, r25	; 0x800d82 <midiRxOutIndex>
    6504:	08 95       	ret
    6506:	8d ef       	ldi	r24, 0xFD	; 253
    6508:	08 95       	ret

0000650a <__vector_36>:
    650a:	1f 92       	push	r1
    650c:	0f 92       	push	r0
    650e:	0f b6       	in	r0, 0x3f	; 63
    6510:	0f 92       	push	r0
    6512:	11 24       	eor	r1, r1
    6514:	0b b6       	in	r0, 0x3b	; 59
    6516:	0f 92       	push	r0
    6518:	8f 93       	push	r24
    651a:	9f 93       	push	r25
    651c:	ef 93       	push	r30
    651e:	ff 93       	push	r31
    6520:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6524:	e0 91 37 0c 	lds	r30, 0x0C37	; 0x800c37 <midiRxInIndex>
    6528:	f0 e0       	ldi	r31, 0x00	; 0
    652a:	eb 50       	subi	r30, 0x0B	; 11
    652c:	f4 4f       	sbci	r31, 0xF4	; 244
    652e:	80 83       	st	Z, r24
    6530:	80 91 37 0c 	lds	r24, 0x0C37	; 0x800c37 <midiRxInIndex>
    6534:	8f 5f       	subi	r24, 0xFF	; 255
    6536:	8f 71       	andi	r24, 0x1F	; 31
    6538:	80 93 37 0c 	sts	0x0C37, r24	; 0x800c37 <midiRxInIndex>
    653c:	90 91 37 0c 	lds	r25, 0x0C37	; 0x800c37 <midiRxInIndex>
    6540:	80 91 82 0d 	lds	r24, 0x0D82	; 0x800d82 <midiRxOutIndex>
    6544:	98 13       	cpse	r25, r24
    6546:	0d c0       	rjmp	.+26     	; 0x6562 <__vector_36+0x58>
    6548:	80 91 7e 0c 	lds	r24, 0x0C7E	; 0x800c7e <midiRxOvflCount>
    654c:	88 23       	and	r24, r24
    654e:	31 f0       	breq	.+12     	; 0x655c <__vector_36+0x52>
    6550:	8f 3f       	cpi	r24, 0xFF	; 255
    6552:	39 f0       	breq	.+14     	; 0x6562 <__vector_36+0x58>
    6554:	8f 5f       	subi	r24, 0xFF	; 255
    6556:	80 93 7e 0c 	sts	0x0C7E, r24	; 0x800c7e <midiRxOvflCount>
    655a:	03 c0       	rjmp	.+6      	; 0x6562 <__vector_36+0x58>
    655c:	81 e0       	ldi	r24, 0x01	; 1
    655e:	80 93 7e 0c 	sts	0x0C7E, r24	; 0x800c7e <midiRxOvflCount>
    6562:	80 91 04 10 	lds	r24, 0x1004	; 0x801004 <midiRxBytesCount>
    6566:	90 91 05 10 	lds	r25, 0x1005	; 0x801005 <midiRxBytesCount+0x1>
    656a:	01 96       	adiw	r24, 0x01	; 1
    656c:	90 93 05 10 	sts	0x1005, r25	; 0x801005 <midiRxBytesCount+0x1>
    6570:	80 93 04 10 	sts	0x1004, r24	; 0x801004 <midiRxBytesCount>
    6574:	ff 91       	pop	r31
    6576:	ef 91       	pop	r30
    6578:	9f 91       	pop	r25
    657a:	8f 91       	pop	r24
    657c:	0f 90       	pop	r0
    657e:	0b be       	out	0x3b, r0	; 59
    6580:	0f 90       	pop	r0
    6582:	0f be       	out	0x3f, r0	; 63
    6584:	0f 90       	pop	r0
    6586:	1f 90       	pop	r1
    6588:	18 95       	reti

0000658a <__vector_37>:
    658a:	1f 92       	push	r1
    658c:	0f 92       	push	r0
    658e:	0f b6       	in	r0, 0x3f	; 63
    6590:	0f 92       	push	r0
    6592:	11 24       	eor	r1, r1
    6594:	0b b6       	in	r0, 0x3b	; 59
    6596:	0f 92       	push	r0
    6598:	8f 93       	push	r24
    659a:	9f 93       	push	r25
    659c:	ef 93       	push	r30
    659e:	ff 93       	push	r31
    65a0:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    65a4:	80 91 eb 0b 	lds	r24, 0x0BEB	; 0x800beb <midiTxInIndex>
    65a8:	98 17       	cp	r25, r24
    65aa:	c1 f0       	breq	.+48     	; 0x65dc <__vector_37+0x52>
    65ac:	e0 91 f0 0b 	lds	r30, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    65b0:	f0 e0       	ldi	r31, 0x00	; 0
    65b2:	eb 5e       	subi	r30, 0xEB	; 235
    65b4:	f3 4f       	sbci	r31, 0xF3	; 243
    65b6:	80 81       	ld	r24, Z
    65b8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    65bc:	80 91 f0 0b 	lds	r24, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    65c0:	8f 5f       	subi	r24, 0xFF	; 255
    65c2:	8f 71       	andi	r24, 0x1F	; 31
    65c4:	80 93 f0 0b 	sts	0x0BF0, r24	; 0x800bf0 <midiTxOutIndex>
    65c8:	80 91 7f 0c 	lds	r24, 0x0C7F	; 0x800c7f <midiTxBytesCount>
    65cc:	90 91 80 0c 	lds	r25, 0x0C80	; 0x800c80 <midiTxBytesCount+0x1>
    65d0:	01 96       	adiw	r24, 0x01	; 1
    65d2:	90 93 80 0c 	sts	0x0C80, r25	; 0x800c80 <midiTxBytesCount+0x1>
    65d6:	80 93 7f 0c 	sts	0x0C7F, r24	; 0x800c7f <midiTxBytesCount>
    65da:	05 c0       	rjmp	.+10     	; 0x65e6 <__vector_37+0x5c>
    65dc:	e9 ec       	ldi	r30, 0xC9	; 201
    65de:	f0 e0       	ldi	r31, 0x00	; 0
    65e0:	80 81       	ld	r24, Z
    65e2:	8f 7d       	andi	r24, 0xDF	; 223
    65e4:	80 83       	st	Z, r24
    65e6:	ff 91       	pop	r31
    65e8:	ef 91       	pop	r30
    65ea:	9f 91       	pop	r25
    65ec:	8f 91       	pop	r24
    65ee:	0f 90       	pop	r0
    65f0:	0b be       	out	0x3b, r0	; 59
    65f2:	0f 90       	pop	r0
    65f4:	0f be       	out	0x3f, r0	; 63
    65f6:	0f 90       	pop	r0
    65f8:	1f 90       	pop	r1
    65fa:	18 95       	reti

000065fc <serial0SER_USBSend>:
    65fc:	90 91 3b 0c 	lds	r25, 0x0C3B	; 0x800c3b <serusbTxInIndex>
    6600:	e1 ec       	ldi	r30, 0xC1	; 193
    6602:	f0 e0       	ldi	r31, 0x00	; 0
    6604:	20 81       	ld	r18, Z
    6606:	2f 7d       	andi	r18, 0xDF	; 223
    6608:	20 83       	st	Z, r18
    660a:	e9 2f       	mov	r30, r25
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	ef 57       	subi	r30, 0x7F	; 127
    6610:	f3 4f       	sbci	r31, 0xF3	; 243
    6612:	80 83       	st	Z, r24
    6614:	9f 5f       	subi	r25, 0xFF	; 255
    6616:	80 91 f1 0b 	lds	r24, 0x0BF1	; 0x800bf1 <serusbTxOutIndex>
    661a:	98 13       	cpse	r25, r24
    661c:	04 c0       	rjmp	.+8      	; 0x6626 <serial0SER_USBSend+0x2a>
    661e:	8f ef       	ldi	r24, 0xFF	; 255
    6620:	80 93 81 0d 	sts	0x0D81, r24	; 0x800d81 <serusbOvflFlag>
    6624:	08 95       	ret
    6626:	90 93 3b 0c 	sts	0x0C3B, r25	; 0x800c3b <serusbTxInIndex>
    662a:	e1 ec       	ldi	r30, 0xC1	; 193
    662c:	f0 e0       	ldi	r31, 0x00	; 0
    662e:	80 81       	ld	r24, Z
    6630:	80 62       	ori	r24, 0x20	; 32
    6632:	80 83       	st	Z, r24
    6634:	08 95       	ret

00006636 <serial0SER_USB_sendStringP>:
    6636:	cf 93       	push	r28
    6638:	df 93       	push	r29
    663a:	fc 01       	movw	r30, r24
    663c:	02 c0       	rjmp	.+4      	; 0x6642 <serial0SER_USB_sendStringP+0xc>
    663e:	de df       	rcall	.-68     	; 0x65fc <serial0SER_USBSend>
    6640:	fe 01       	movw	r30, r28
    6642:	ef 01       	movw	r28, r30
    6644:	21 96       	adiw	r28, 0x01	; 1
    6646:	84 91       	lpm	r24, Z
    6648:	88 23       	and	r24, r24
    664a:	21 f0       	breq	.+8      	; 0x6654 <serial0SER_USB_sendStringP+0x1e>
    664c:	90 91 81 0d 	lds	r25, 0x0D81	; 0x800d81 <serusbOvflFlag>
    6650:	9f 3f       	cpi	r25, 0xFF	; 255
    6652:	a9 f7       	brne	.-22     	; 0x663e <serial0SER_USB_sendStringP+0x8>
    6654:	df 91       	pop	r29
    6656:	cf 91       	pop	r28
    6658:	08 95       	ret

0000665a <serial0SER_USB_sendCRLF>:
    665a:	8e ed       	ldi	r24, 0xDE	; 222
    665c:	91 e1       	ldi	r25, 0x11	; 17
    665e:	eb cf       	rjmp	.-42     	; 0x6636 <serial0SER_USB_sendStringP>
    6660:	08 95       	ret

00006662 <init_Serial0SerUSB>:
    6662:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6666:	88 e0       	ldi	r24, 0x08	; 8
    6668:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    666c:	e1 ec       	ldi	r30, 0xC1	; 193
    666e:	f0 e0       	ldi	r31, 0x00	; 0
    6670:	80 81       	ld	r24, Z
    6672:	88 69       	ori	r24, 0x98	; 152
    6674:	80 83       	st	Z, r24
    6676:	e2 ec       	ldi	r30, 0xC2	; 194
    6678:	f0 e0       	ldi	r31, 0x00	; 0
    667a:	80 81       	ld	r24, Z
    667c:	86 60       	ori	r24, 0x06	; 6
    667e:	80 83       	st	Z, r24
    6680:	10 92 37 0c 	sts	0x0C37, r1	; 0x800c37 <midiRxInIndex>
    6684:	10 92 82 0d 	sts	0x0D82, r1	; 0x800d82 <midiRxOutIndex>
    6688:	10 92 eb 0b 	sts	0x0BEB, r1	; 0x800beb <midiTxInIndex>
    668c:	10 92 f0 0b 	sts	0x0BF0, r1	; 0x800bf0 <midiTxOutIndex>
    6690:	10 92 81 0d 	sts	0x0D81, r1	; 0x800d81 <serusbOvflFlag>
    6694:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_ReadUSB>
    6698:	8f 3f       	cpi	r24, 0xFF	; 255
    669a:	41 f4       	brne	.+16     	; 0x66ac <init_Serial0SerUSB+0x4a>
    669c:	10 92 3a 0c 	sts	0x0C3A, r1	; 0x800c3a <serusb_Active>
    66a0:	40 e0       	ldi	r20, 0x00	; 0
    66a2:	50 e0       	ldi	r21, 0x00	; 0
    66a4:	64 e0       	ldi	r22, 0x04	; 4
    66a6:	81 e0       	ldi	r24, 0x01	; 1
    66a8:	0e 94 70 14 	call	0x28e0	; 0x28e0 <log_putError>
    66ac:	80 91 3a 0c 	lds	r24, 0x0C3A	; 0x800c3a <serusb_Active>
    66b0:	8f 3f       	cpi	r24, 0xFF	; 255
    66b2:	41 f4       	brne	.+16     	; 0x66c4 <init_Serial0SerUSB+0x62>
    66b4:	86 e4       	ldi	r24, 0x46	; 70
    66b6:	93 e0       	ldi	r25, 0x03	; 3
    66b8:	be df       	rcall	.-132    	; 0x6636 <serial0SER_USB_sendStringP>
    66ba:	8e e7       	ldi	r24, 0x7E	; 126
    66bc:	91 e1       	ldi	r25, 0x11	; 17
    66be:	bb df       	rcall	.-138    	; 0x6636 <serial0SER_USB_sendStringP>
    66c0:	cc df       	rcall	.-104    	; 0x665a <serial0SER_USB_sendCRLF>
    66c2:	cb cf       	rjmp	.-106    	; 0x665a <serial0SER_USB_sendCRLF>
    66c4:	08 95       	ret

000066c6 <serial0SER_USB_sendString>:
    66c6:	1f 93       	push	r17
    66c8:	cf 93       	push	r28
    66ca:	df 93       	push	r29
    66cc:	ec 01       	movw	r28, r24
    66ce:	10 e5       	ldi	r17, 0x50	; 80
    66d0:	03 c0       	rjmp	.+6      	; 0x66d8 <serial0SER_USB_sendString+0x12>
    66d2:	21 96       	adiw	r28, 0x01	; 1
    66d4:	93 df       	rcall	.-218    	; 0x65fc <serial0SER_USBSend>
    66d6:	11 50       	subi	r17, 0x01	; 1
    66d8:	88 81       	ld	r24, Y
    66da:	88 23       	and	r24, r24
    66dc:	31 f0       	breq	.+12     	; 0x66ea <serial0SER_USB_sendString+0x24>
    66de:	90 91 81 0d 	lds	r25, 0x0D81	; 0x800d81 <serusbOvflFlag>
    66e2:	9f 3f       	cpi	r25, 0xFF	; 255
    66e4:	11 f0       	breq	.+4      	; 0x66ea <serial0SER_USB_sendString+0x24>
    66e6:	11 11       	cpse	r17, r1
    66e8:	f4 cf       	rjmp	.-24     	; 0x66d2 <serial0SER_USB_sendString+0xc>
    66ea:	df 91       	pop	r29
    66ec:	cf 91       	pop	r28
    66ee:	1f 91       	pop	r17
    66f0:	08 95       	ret

000066f2 <__vector_25>:
    66f2:	1f 92       	push	r1
    66f4:	0f 92       	push	r0
    66f6:	0f b6       	in	r0, 0x3f	; 63
    66f8:	0f 92       	push	r0
    66fa:	11 24       	eor	r1, r1
    66fc:	0b b6       	in	r0, 0x3b	; 59
    66fe:	0f 92       	push	r0
    6700:	8f 93       	push	r24
    6702:	9f 93       	push	r25
    6704:	ef 93       	push	r30
    6706:	ff 93       	push	r31
    6708:	e0 91 06 10 	lds	r30, 0x1006	; 0x801006 <serusbRxInIndex>
    670c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	8e 0f       	add	r24, r30
    6714:	f0 e0       	ldi	r31, 0x00	; 0
    6716:	e3 5c       	subi	r30, 0xC3	; 195
    6718:	f3 4f       	sbci	r31, 0xF3	; 243
    671a:	90 83       	st	Z, r25
    671c:	8f 73       	andi	r24, 0x3F	; 63
    671e:	90 91 3c 0c 	lds	r25, 0x0C3C	; 0x800c3c <serusbRxOutIndex>
    6722:	89 13       	cpse	r24, r25
    6724:	04 c0       	rjmp	.+8      	; 0x672e <__vector_25+0x3c>
    6726:	8f ef       	ldi	r24, 0xFF	; 255
    6728:	80 93 81 0d 	sts	0x0D81, r24	; 0x800d81 <serusbOvflFlag>
    672c:	02 c0       	rjmp	.+4      	; 0x6732 <__vector_25+0x40>
    672e:	80 93 06 10 	sts	0x1006, r24	; 0x801006 <serusbRxInIndex>
    6732:	ff 91       	pop	r31
    6734:	ef 91       	pop	r30
    6736:	9f 91       	pop	r25
    6738:	8f 91       	pop	r24
    673a:	0f 90       	pop	r0
    673c:	0b be       	out	0x3b, r0	; 59
    673e:	0f 90       	pop	r0
    6740:	0f be       	out	0x3f, r0	; 63
    6742:	0f 90       	pop	r0
    6744:	1f 90       	pop	r1
    6746:	18 95       	reti

00006748 <__vector_26>:
    6748:	1f 92       	push	r1
    674a:	0f 92       	push	r0
    674c:	0f b6       	in	r0, 0x3f	; 63
    674e:	0f 92       	push	r0
    6750:	11 24       	eor	r1, r1
    6752:	0b b6       	in	r0, 0x3b	; 59
    6754:	0f 92       	push	r0
    6756:	2f 93       	push	r18
    6758:	8f 93       	push	r24
    675a:	9f 93       	push	r25
    675c:	ef 93       	push	r30
    675e:	ff 93       	push	r31
    6760:	80 91 f1 0b 	lds	r24, 0x0BF1	; 0x800bf1 <serusbTxOutIndex>
    6764:	20 91 3b 0c 	lds	r18, 0x0C3B	; 0x800c3b <serusbTxInIndex>
    6768:	90 91 f1 0b 	lds	r25, 0x0BF1	; 0x800bf1 <serusbTxOutIndex>
    676c:	29 17       	cp	r18, r25
    676e:	59 f0       	breq	.+22     	; 0x6786 <__vector_26+0x3e>
    6770:	e8 2f       	mov	r30, r24
    6772:	f0 e0       	ldi	r31, 0x00	; 0
    6774:	ef 57       	subi	r30, 0x7F	; 127
    6776:	f3 4f       	sbci	r31, 0xF3	; 243
    6778:	90 81       	ld	r25, Z
    677a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    677e:	8f 5f       	subi	r24, 0xFF	; 255
    6780:	80 93 f1 0b 	sts	0x0BF1, r24	; 0x800bf1 <serusbTxOutIndex>
    6784:	05 c0       	rjmp	.+10     	; 0x6790 <__vector_26+0x48>
    6786:	e1 ec       	ldi	r30, 0xC1	; 193
    6788:	f0 e0       	ldi	r31, 0x00	; 0
    678a:	80 81       	ld	r24, Z
    678c:	8f 7d       	andi	r24, 0xDF	; 223
    678e:	80 83       	st	Z, r24
    6790:	ff 91       	pop	r31
    6792:	ef 91       	pop	r30
    6794:	9f 91       	pop	r25
    6796:	8f 91       	pop	r24
    6798:	2f 91       	pop	r18
    679a:	0f 90       	pop	r0
    679c:	0b be       	out	0x3b, r0	; 59
    679e:	0f 90       	pop	r0
    67a0:	0f be       	out	0x3f, r0	; 63
    67a2:	0f 90       	pop	r0
    67a4:	1f 90       	pop	r1
    67a6:	18 95       	reti

000067a8 <init_Serial3SerESP>:
    67a8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    67ac:	88 e0       	ldi	r24, 0x08	; 8
    67ae:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    67b2:	e1 e3       	ldi	r30, 0x31	; 49
    67b4:	f1 e0       	ldi	r31, 0x01	; 1
    67b6:	80 81       	ld	r24, Z
    67b8:	88 69       	ori	r24, 0x98	; 152
    67ba:	80 83       	st	Z, r24
    67bc:	e2 e3       	ldi	r30, 0x32	; 50
    67be:	f1 e0       	ldi	r31, 0x01	; 1
    67c0:	80 81       	ld	r24, Z
    67c2:	86 60       	ori	r24, 0x06	; 6
    67c4:	80 83       	st	Z, r24
    67c6:	84 e8       	ldi	r24, 0x84	; 132
    67c8:	9d e0       	ldi	r25, 0x0D	; 13
    67ca:	90 93 f3 0b 	sts	0x0BF3, r25	; 0x800bf3 <serESPRxInIndex+0x1>
    67ce:	80 93 f2 0b 	sts	0x0BF2, r24	; 0x800bf2 <serESPRxInIndex>
    67d2:	90 93 ee 0b 	sts	0x0BEE, r25	; 0x800bee <serESPRxOutIndex+0x1>
    67d6:	80 93 ed 0b 	sts	0x0BED, r24	; 0x800bed <serESPRxOutIndex>
    67da:	84 e0       	ldi	r24, 0x04	; 4
    67dc:	9e e0       	ldi	r25, 0x0E	; 14
    67de:	90 93 36 0c 	sts	0x0C36, r25	; 0x800c36 <serESPTxOutIndex+0x1>
    67e2:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <serESPTxOutIndex>
    67e6:	90 93 39 0c 	sts	0x0C39, r25	; 0x800c39 <serESPTxInIndex+0x1>
    67ea:	80 93 38 0c 	sts	0x0C38, r24	; 0x800c38 <serESPTxInIndex>
    67ee:	10 92 ec 0b 	sts	0x0BEC, r1	; 0x800bec <serESPOvflFlag>
    67f2:	8f ef       	ldi	r24, 0xFF	; 255
    67f4:	80 93 7d 0c 	sts	0x0C7D, r24	; 0x800c7d <serESP_Active>
    67f8:	08 95       	ret

000067fa <serial3SER_ESPSend>:
    67fa:	e0 91 38 0c 	lds	r30, 0x0C38	; 0x800c38 <serESPTxInIndex>
    67fe:	f0 91 39 0c 	lds	r31, 0x0C39	; 0x800c39 <serESPTxInIndex+0x1>
    6802:	a1 e3       	ldi	r26, 0x31	; 49
    6804:	b1 e0       	ldi	r27, 0x01	; 1
    6806:	9c 91       	ld	r25, X
    6808:	9f 7d       	andi	r25, 0xDF	; 223
    680a:	9c 93       	st	X, r25
    680c:	af 01       	movw	r20, r30
    680e:	4f 5f       	subi	r20, 0xFF	; 255
    6810:	5f 4f       	sbci	r21, 0xFF	; 255
    6812:	80 83       	st	Z, r24
    6814:	80 e1       	ldi	r24, 0x10	; 16
    6816:	43 30       	cpi	r20, 0x03	; 3
    6818:	58 07       	cpc	r21, r24
    681a:	19 f0       	breq	.+6      	; 0x6822 <serial3SER_ESPSend+0x28>
    681c:	10 f0       	brcs	.+4      	; 0x6822 <serial3SER_ESPSend+0x28>
    681e:	44 e0       	ldi	r20, 0x04	; 4
    6820:	5e e0       	ldi	r21, 0x0E	; 14
    6822:	9f b7       	in	r25, 0x3f	; 63
    6824:	f8 94       	cli
    6826:	81 e0       	ldi	r24, 0x01	; 1
    6828:	05 c0       	rjmp	.+10     	; 0x6834 <serial3SER_ESPSend+0x3a>
    682a:	20 91 35 0c 	lds	r18, 0x0C35	; 0x800c35 <serESPTxOutIndex>
    682e:	30 91 36 0c 	lds	r19, 0x0C36	; 0x800c36 <serESPTxOutIndex+0x1>
    6832:	80 e0       	ldi	r24, 0x00	; 0
    6834:	81 11       	cpse	r24, r1
    6836:	f9 cf       	rjmp	.-14     	; 0x682a <serial3SER_ESPSend+0x30>
    6838:	9f bf       	out	0x3f, r25	; 63
    683a:	42 17       	cp	r20, r18
    683c:	53 07       	cpc	r21, r19
    683e:	49 f4       	brne	.+18     	; 0x6852 <serial3SER_ESPSend+0x58>
    6840:	8f ef       	ldi	r24, 0xFF	; 255
    6842:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <serESPOvflFlag>
    6846:	e1 e3       	ldi	r30, 0x31	; 49
    6848:	f1 e0       	ldi	r31, 0x01	; 1
    684a:	80 81       	ld	r24, Z
    684c:	80 62       	ori	r24, 0x20	; 32
    684e:	80 83       	st	Z, r24
    6850:	08 95       	ret
    6852:	50 93 39 0c 	sts	0x0C39, r21	; 0x800c39 <serESPTxInIndex+0x1>
    6856:	40 93 38 0c 	sts	0x0C38, r20	; 0x800c38 <serESPTxInIndex>
    685a:	e1 e3       	ldi	r30, 0x31	; 49
    685c:	f1 e0       	ldi	r31, 0x01	; 1
    685e:	80 81       	ld	r24, Z
    6860:	80 62       	ori	r24, 0x20	; 32
    6862:	80 83       	st	Z, r24
    6864:	08 95       	ret

00006866 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    6866:	e0 91 ed 0b 	lds	r30, 0x0BED	; 0x800bed <serESPRxOutIndex>
    686a:	f0 91 ee 0b 	lds	r31, 0x0BEE	; 0x800bee <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    686e:	80 91 f2 0b 	lds	r24, 0x0BF2	; 0x800bf2 <serESPRxInIndex>
    6872:	90 91 f3 0b 	lds	r25, 0x0BF3	; 0x800bf3 <serESPRxInIndex+0x1>
    6876:	e8 17       	cp	r30, r24
    6878:	f9 07       	cpc	r31, r25
    687a:	81 f0       	breq	.+32     	; 0x689c <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    687c:	9f 01       	movw	r18, r30
    687e:	2f 5f       	subi	r18, 0xFF	; 255
    6880:	3f 4f       	sbci	r19, 0xFF	; 255
    6882:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    6884:	9e e0       	ldi	r25, 0x0E	; 14
    6886:	23 30       	cpi	r18, 0x03	; 3
    6888:	39 07       	cpc	r19, r25
    688a:	19 f0       	breq	.+6      	; 0x6892 <serial3SER_ESPReadRx+0x2c>
    688c:	10 f0       	brcs	.+4      	; 0x6892 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    688e:	24 e8       	ldi	r18, 0x84	; 132
    6890:	3d e0       	ldi	r19, 0x0D	; 13
		}
		serESPRxOutIndex = index;
    6892:	30 93 ee 0b 	sts	0x0BEE, r19	; 0x800bee <serESPRxOutIndex+0x1>
    6896:	20 93 ed 0b 	sts	0x0BED, r18	; 0x800bed <serESPRxOutIndex>
    689a:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    689c:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    689e:	08 95       	ret

000068a0 <__vector_54>:

ISR(USART3_RX_vect) {
    68a0:	1f 92       	push	r1
    68a2:	0f 92       	push	r0
    68a4:	0f b6       	in	r0, 0x3f	; 63
    68a6:	0f 92       	push	r0
    68a8:	11 24       	eor	r1, r1
    68aa:	0b b6       	in	r0, 0x3b	; 59
    68ac:	0f 92       	push	r0
    68ae:	2f 93       	push	r18
    68b0:	3f 93       	push	r19
    68b2:	4f 93       	push	r20
    68b4:	5f 93       	push	r21
    68b6:	8f 93       	push	r24
    68b8:	9f 93       	push	r25
    68ba:	ef 93       	push	r30
    68bc:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    68be:	e0 91 f2 0b 	lds	r30, 0x0BF2	; 0x800bf2 <serESPRxInIndex>
    68c2:	f0 91 f3 0b 	lds	r31, 0x0BF3	; 0x800bf3 <serESPRxInIndex+0x1>
	*index++ = UDR3; // store in receive buffer
    68c6:	af 01       	movw	r20, r30
    68c8:	4f 5f       	subi	r20, 0xFF	; 255
    68ca:	5f 4f       	sbci	r21, 0xFF	; 255
    68cc:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    68d0:	80 83       	st	Z, r24
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    68d2:	8e e0       	ldi	r24, 0x0E	; 14
    68d4:	43 30       	cpi	r20, 0x03	; 3
    68d6:	58 07       	cpc	r21, r24
    68d8:	19 f0       	breq	.+6      	; 0x68e0 <__vector_54+0x40>
    68da:	10 f0       	brcs	.+4      	; 0x68e0 <__vector_54+0x40>
		// wrap around
		index = serESPRxBuffer;
    68dc:	44 e8       	ldi	r20, 0x84	; 132
    68de:	5d e0       	ldi	r21, 0x0D	; 13
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    68e0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    68e2:	f8 94       	cli
    68e4:	81 e0       	ldi	r24, 0x01	; 1
    68e6:	05 c0       	rjmp	.+10     	; 0x68f2 <__vector_54+0x52>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    68e8:	20 91 ed 0b 	lds	r18, 0x0BED	; 0x800bed <serESPRxOutIndex>
    68ec:	30 91 ee 0b 	lds	r19, 0x0BEE	; 0x800bee <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    68f0:	80 e0       	ldi	r24, 0x00	; 0
    68f2:	81 11       	cpse	r24, r1
    68f4:	f9 cf       	rjmp	.-14     	; 0x68e8 <__vector_54+0x48>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    68f6:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    68f8:	42 17       	cp	r20, r18
    68fa:	53 07       	cpc	r21, r19
    68fc:	21 f4       	brne	.+8      	; 0x6906 <__vector_54+0x66>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    68fe:	8f ef       	ldi	r24, 0xFF	; 255
    6900:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <serESPOvflFlag>
    6904:	04 c0       	rjmp	.+8      	; 0x690e <__vector_54+0x6e>
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    6906:	50 93 f3 0b 	sts	0x0BF3, r21	; 0x800bf3 <serESPRxInIndex+0x1>
    690a:	40 93 f2 0b 	sts	0x0BF2, r20	; 0x800bf2 <serESPRxInIndex>
	}
}
    690e:	ff 91       	pop	r31
    6910:	ef 91       	pop	r30
    6912:	9f 91       	pop	r25
    6914:	8f 91       	pop	r24
    6916:	5f 91       	pop	r21
    6918:	4f 91       	pop	r20
    691a:	3f 91       	pop	r19
    691c:	2f 91       	pop	r18
    691e:	0f 90       	pop	r0
    6920:	0b be       	out	0x3b, r0	; 59
    6922:	0f 90       	pop	r0
    6924:	0f be       	out	0x3f, r0	; 63
    6926:	0f 90       	pop	r0
    6928:	1f 90       	pop	r1
    692a:	18 95       	reti

0000692c <__vector_55>:

ISR(USART3_UDRE_vect) {
    692c:	1f 92       	push	r1
    692e:	0f 92       	push	r0
    6930:	0f b6       	in	r0, 0x3f	; 63
    6932:	0f 92       	push	r0
    6934:	11 24       	eor	r1, r1
    6936:	0b b6       	in	r0, 0x3b	; 59
    6938:	0f 92       	push	r0
    693a:	2f 93       	push	r18
    693c:	8f 93       	push	r24
    693e:	9f 93       	push	r25
    6940:	ef 93       	push	r30
    6942:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    6944:	e0 91 35 0c 	lds	r30, 0x0C35	; 0x800c35 <serESPTxOutIndex>
    6948:	f0 91 36 0c 	lds	r31, 0x0C36	; 0x800c36 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    694c:	80 91 38 0c 	lds	r24, 0x0C38	; 0x800c38 <serESPTxInIndex>
    6950:	90 91 39 0c 	lds	r25, 0x0C39	; 0x800c39 <serESPTxInIndex+0x1>
    6954:	e8 17       	cp	r30, r24
    6956:	f9 07       	cpc	r31, r25
    6958:	89 f0       	breq	.+34     	; 0x697c <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    695a:	cf 01       	movw	r24, r30
    695c:	01 96       	adiw	r24, 0x01	; 1
    695e:	20 81       	ld	r18, Z
    6960:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    6964:	20 e1       	ldi	r18, 0x10	; 16
    6966:	83 30       	cpi	r24, 0x03	; 3
    6968:	92 07       	cpc	r25, r18
    696a:	19 f0       	breq	.+6      	; 0x6972 <__vector_55+0x46>
    696c:	10 f0       	brcs	.+4      	; 0x6972 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    696e:	84 e0       	ldi	r24, 0x04	; 4
    6970:	9e e0       	ldi	r25, 0x0E	; 14
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    6972:	90 93 36 0c 	sts	0x0C36, r25	; 0x800c36 <serESPTxOutIndex+0x1>
    6976:	80 93 35 0c 	sts	0x0C35, r24	; 0x800c35 <serESPTxOutIndex>
    697a:	05 c0       	rjmp	.+10     	; 0x6986 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    697c:	e1 e3       	ldi	r30, 0x31	; 49
    697e:	f1 e0       	ldi	r31, 0x01	; 1
    6980:	80 81       	ld	r24, Z
    6982:	8f 7d       	andi	r24, 0xDF	; 223
    6984:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    6986:	ff 91       	pop	r31
    6988:	ef 91       	pop	r30
    698a:	9f 91       	pop	r25
    698c:	8f 91       	pop	r24
    698e:	2f 91       	pop	r18
    6990:	0f 90       	pop	r0
    6992:	0b be       	out	0x3b, r0	; 59
    6994:	0f 90       	pop	r0
    6996:	0f be       	out	0x3f, r0	; 63
    6998:	0f 90       	pop	r0
    699a:	1f 90       	pop	r1
    699c:	18 95       	reti

0000699e <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    699e:	8a 30       	cpi	r24, 0x0A	; 10
    69a0:	10 f0       	brcs	.+4      	; 0x69a6 <nibbleToChr+0x8>
    69a2:	89 5c       	subi	r24, 0xC9	; 201
    69a4:	08 95       	ret
    69a6:	80 5d       	subi	r24, 0xD0	; 208
    69a8:	08 95       	ret

000069aa <lcd_setCG>:
    69aa:	ef 92       	push	r14
    69ac:	ff 92       	push	r15
    69ae:	1f 93       	push	r17
    69b0:	cf 93       	push	r28
    69b2:	df 93       	push	r29
    69b4:	eb 01       	movw	r28, r22
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	88 0f       	add	r24, r24
    69ba:	99 1f       	adc	r25, r25
    69bc:	88 0f       	add	r24, r24
    69be:	99 1f       	adc	r25, r25
    69c0:	88 0f       	add	r24, r24
    69c2:	99 1f       	adc	r25, r25
    69c4:	80 64       	ori	r24, 0x40	; 64
    69c6:	0e 94 d6 11 	call	0x23ac	; 0x23ac <lcd_write_command>
    69ca:	10 e0       	ldi	r17, 0x00	; 0
    69cc:	0a c0       	rjmp	.+20     	; 0x69e2 <lcd_setCG+0x38>
    69ce:	7e 01       	movw	r14, r28
    69d0:	8f ef       	ldi	r24, 0xFF	; 255
    69d2:	e8 1a       	sub	r14, r24
    69d4:	f8 0a       	sbc	r15, r24
    69d6:	fe 01       	movw	r30, r28
    69d8:	84 91       	lpm	r24, Z
    69da:	0e 94 be 11 	call	0x237c	; 0x237c <lcd_write_character>
    69de:	1f 5f       	subi	r17, 0xFF	; 255
    69e0:	e7 01       	movw	r28, r14
    69e2:	18 30       	cpi	r17, 0x08	; 8
    69e4:	a0 f3       	brcs	.-24     	; 0x69ce <lcd_setCG+0x24>
    69e6:	df 91       	pop	r29
    69e8:	cf 91       	pop	r28
    69ea:	1f 91       	pop	r17
    69ec:	ff 90       	pop	r15
    69ee:	ef 90       	pop	r14
    69f0:	08 95       	ret

000069f2 <lcd_initCG>:
    69f2:	66 ed       	ldi	r22, 0xD6	; 214
    69f4:	71 e1       	ldi	r23, 0x11	; 17
    69f6:	80 e0       	ldi	r24, 0x00	; 0
    69f8:	d8 df       	rcall	.-80     	; 0x69aa <lcd_setCG>
    69fa:	6e ec       	ldi	r22, 0xCE	; 206
    69fc:	71 e1       	ldi	r23, 0x11	; 17
    69fe:	81 e0       	ldi	r24, 0x01	; 1
    6a00:	d4 df       	rcall	.-88     	; 0x69aa <lcd_setCG>
    6a02:	66 ec       	ldi	r22, 0xC6	; 198
    6a04:	71 e1       	ldi	r23, 0x11	; 17
    6a06:	82 e0       	ldi	r24, 0x02	; 2
    6a08:	d0 cf       	rjmp	.-96     	; 0x69aa <lcd_setCG>
    6a0a:	08 95       	ret

00006a0c <lcd_hexout>:
    6a0c:	cf 93       	push	r28
    6a0e:	c8 2f       	mov	r28, r24
    6a10:	82 95       	swap	r24
    6a12:	8f 70       	andi	r24, 0x0F	; 15
    6a14:	8a 30       	cpi	r24, 0x0A	; 10
    6a16:	10 f0       	brcs	.+4      	; 0x6a1c <lcd_hexout+0x10>
    6a18:	89 5c       	subi	r24, 0xC9	; 201
    6a1a:	01 c0       	rjmp	.+2      	; 0x6a1e <lcd_hexout+0x12>
    6a1c:	80 5d       	subi	r24, 0xD0	; 208
    6a1e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6a22:	cf 70       	andi	r28, 0x0F	; 15
    6a24:	ca 30       	cpi	r28, 0x0A	; 10
    6a26:	18 f0       	brcs	.+6      	; 0x6a2e <lcd_hexout+0x22>
    6a28:	87 e3       	ldi	r24, 0x37	; 55
    6a2a:	8c 0f       	add	r24, r28
    6a2c:	02 c0       	rjmp	.+4      	; 0x6a32 <lcd_hexout+0x26>
    6a2e:	80 e3       	ldi	r24, 0x30	; 48
    6a30:	8c 0f       	add	r24, r28
    6a32:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6a36:	cf 91       	pop	r28
    6a38:	08 95       	ret

00006a3a <lcd_longout>:
    6a3a:	cf 93       	push	r28
    6a3c:	df 93       	push	r29
    6a3e:	d3 e0       	ldi	r29, 0x03	; 3
    6a40:	1c c0       	rjmp	.+56     	; 0x6a7a <lcd_longout+0x40>
    6a42:	ed 2f       	mov	r30, r29
    6a44:	0d 2e       	mov	r0, r29
    6a46:	00 0c       	add	r0, r0
    6a48:	ff 0b       	sbc	r31, r31
    6a4a:	e7 5f       	subi	r30, 0xF7	; 247
    6a4c:	ff 4e       	sbci	r31, 0xEF	; 239
    6a4e:	c0 81       	ld	r28, Z
    6a50:	8c 2f       	mov	r24, r28
    6a52:	82 95       	swap	r24
    6a54:	8f 70       	andi	r24, 0x0F	; 15
    6a56:	8a 30       	cpi	r24, 0x0A	; 10
    6a58:	10 f0       	brcs	.+4      	; 0x6a5e <lcd_longout+0x24>
    6a5a:	89 5c       	subi	r24, 0xC9	; 201
    6a5c:	01 c0       	rjmp	.+2      	; 0x6a60 <lcd_longout+0x26>
    6a5e:	80 5d       	subi	r24, 0xD0	; 208
    6a60:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6a64:	cf 70       	andi	r28, 0x0F	; 15
    6a66:	ca 30       	cpi	r28, 0x0A	; 10
    6a68:	18 f0       	brcs	.+6      	; 0x6a70 <lcd_longout+0x36>
    6a6a:	87 e3       	ldi	r24, 0x37	; 55
    6a6c:	8c 0f       	add	r24, r28
    6a6e:	02 c0       	rjmp	.+4      	; 0x6a74 <lcd_longout+0x3a>
    6a70:	80 e3       	ldi	r24, 0x30	; 48
    6a72:	8c 0f       	add	r24, r28
    6a74:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6a78:	d1 50       	subi	r29, 0x01	; 1
    6a7a:	dd 23       	and	r29, r29
    6a7c:	14 f7       	brge	.-60     	; 0x6a42 <lcd_longout+0x8>
    6a7e:	df 91       	pop	r29
    6a80:	cf 91       	pop	r28
    6a82:	08 95       	ret

00006a84 <lcd_dec2out>:
    6a84:	cf 93       	push	r28
    6a86:	c8 2f       	mov	r28, r24
    6a88:	84 36       	cpi	r24, 0x64	; 100
    6a8a:	50 f0       	brcs	.+20     	; 0x6aa0 <lcd_dec2out+0x1c>
    6a8c:	8d e2       	ldi	r24, 0x2D	; 45
    6a8e:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6a92:	8d e2       	ldi	r24, 0x2D	; 45
    6a94:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6a98:	0d c0       	rjmp	.+26     	; 0x6ab4 <lcd_dec2out+0x30>
    6a9a:	ca 50       	subi	r28, 0x0A	; 10
    6a9c:	8f 5f       	subi	r24, 0xFF	; 255
    6a9e:	01 c0       	rjmp	.+2      	; 0x6aa2 <lcd_dec2out+0x1e>
    6aa0:	80 e0       	ldi	r24, 0x00	; 0
    6aa2:	ca 30       	cpi	r28, 0x0A	; 10
    6aa4:	d0 f7       	brcc	.-12     	; 0x6a9a <lcd_dec2out+0x16>
    6aa6:	80 5d       	subi	r24, 0xD0	; 208
    6aa8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6aac:	80 e3       	ldi	r24, 0x30	; 48
    6aae:	8c 0f       	add	r24, r28
    6ab0:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6ab4:	cf 91       	pop	r28
    6ab6:	08 95       	ret

00006ab8 <putChar_Dec2>:
    6ab8:	84 36       	cpi	r24, 0x64	; 100
    6aba:	58 f0       	brcs	.+22     	; 0x6ad2 <putChar_Dec2+0x1a>
    6abc:	8d e2       	ldi	r24, 0x2D	; 45
    6abe:	db 01       	movw	r26, r22
    6ac0:	8c 93       	st	X, r24
    6ac2:	fb 01       	movw	r30, r22
    6ac4:	32 96       	adiw	r30, 0x02	; 2
    6ac6:	11 96       	adiw	r26, 0x01	; 1
    6ac8:	8c 93       	st	X, r24
    6aca:	0f c0       	rjmp	.+30     	; 0x6aea <putChar_Dec2+0x32>
    6acc:	8a 50       	subi	r24, 0x0A	; 10
    6ace:	9f 5f       	subi	r25, 0xFF	; 255
    6ad0:	01 c0       	rjmp	.+2      	; 0x6ad4 <putChar_Dec2+0x1c>
    6ad2:	90 e0       	ldi	r25, 0x00	; 0
    6ad4:	8a 30       	cpi	r24, 0x0A	; 10
    6ad6:	d0 f7       	brcc	.-12     	; 0x6acc <putChar_Dec2+0x14>
    6ad8:	90 5d       	subi	r25, 0xD0	; 208
    6ada:	fb 01       	movw	r30, r22
    6adc:	90 83       	st	Z, r25
    6ade:	32 96       	adiw	r30, 0x02	; 2
    6ae0:	90 e3       	ldi	r25, 0x30	; 48
    6ae2:	98 0f       	add	r25, r24
    6ae4:	db 01       	movw	r26, r22
    6ae6:	11 96       	adiw	r26, 0x01	; 1
    6ae8:	9c 93       	st	X, r25
    6aea:	10 82       	st	Z, r1
    6aec:	cf 01       	movw	r24, r30
    6aee:	08 95       	ret

00006af0 <putChar_Dec>:
    6af0:	90 e0       	ldi	r25, 0x00	; 0
    6af2:	02 c0       	rjmp	.+4      	; 0x6af8 <putChar_Dec+0x8>
    6af4:	84 56       	subi	r24, 0x64	; 100
    6af6:	9f 5f       	subi	r25, 0xFF	; 255
    6af8:	84 36       	cpi	r24, 0x64	; 100
    6afa:	e0 f7       	brcc	.-8      	; 0x6af4 <putChar_Dec+0x4>
    6afc:	99 23       	and	r25, r25
    6afe:	39 f0       	breq	.+14     	; 0x6b0e <putChar_Dec+0x1e>
    6b00:	90 5d       	subi	r25, 0xD0	; 208
    6b02:	db 01       	movw	r26, r22
    6b04:	9c 93       	st	X, r25
    6b06:	6f 5f       	subi	r22, 0xFF	; 255
    6b08:	7f 4f       	sbci	r23, 0xFF	; 255
    6b0a:	2f ef       	ldi	r18, 0xFF	; 255
    6b0c:	01 c0       	rjmp	.+2      	; 0x6b10 <putChar_Dec+0x20>
    6b0e:	20 e0       	ldi	r18, 0x00	; 0
    6b10:	90 e0       	ldi	r25, 0x00	; 0
    6b12:	02 c0       	rjmp	.+4      	; 0x6b18 <putChar_Dec+0x28>
    6b14:	8a 50       	subi	r24, 0x0A	; 10
    6b16:	9f 5f       	subi	r25, 0xFF	; 255
    6b18:	8a 30       	cpi	r24, 0x0A	; 10
    6b1a:	e0 f7       	brcc	.-8      	; 0x6b14 <putChar_Dec+0x24>
    6b1c:	91 11       	cpse	r25, r1
    6b1e:	02 c0       	rjmp	.+4      	; 0x6b24 <putChar_Dec+0x34>
    6b20:	2f 3f       	cpi	r18, 0xFF	; 255
    6b22:	31 f4       	brne	.+12     	; 0x6b30 <putChar_Dec+0x40>
    6b24:	fb 01       	movw	r30, r22
    6b26:	31 96       	adiw	r30, 0x01	; 1
    6b28:	90 5d       	subi	r25, 0xD0	; 208
    6b2a:	db 01       	movw	r26, r22
    6b2c:	9c 93       	st	X, r25
    6b2e:	01 c0       	rjmp	.+2      	; 0x6b32 <putChar_Dec+0x42>
    6b30:	fb 01       	movw	r30, r22
    6b32:	80 5d       	subi	r24, 0xD0	; 208
    6b34:	80 83       	st	Z, r24
    6b36:	11 82       	std	Z+1, r1	; 0x01
    6b38:	cf 01       	movw	r24, r30
    6b3a:	01 96       	adiw	r24, 0x01	; 1
    6b3c:	08 95       	ret

00006b3e <putChar_hex>:
    6b3e:	fb 01       	movw	r30, r22
    6b40:	98 2f       	mov	r25, r24
    6b42:	92 95       	swap	r25
    6b44:	9f 70       	andi	r25, 0x0F	; 15
    6b46:	9a 30       	cpi	r25, 0x0A	; 10
    6b48:	10 f0       	brcs	.+4      	; 0x6b4e <putChar_hex+0x10>
    6b4a:	99 5c       	subi	r25, 0xC9	; 201
    6b4c:	01 c0       	rjmp	.+2      	; 0x6b50 <putChar_hex+0x12>
    6b4e:	90 5d       	subi	r25, 0xD0	; 208
    6b50:	90 83       	st	Z, r25
    6b52:	98 2f       	mov	r25, r24
    6b54:	9f 70       	andi	r25, 0x0F	; 15
    6b56:	9f 01       	movw	r18, r30
    6b58:	2e 5f       	subi	r18, 0xFE	; 254
    6b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    6b5c:	9a 30       	cpi	r25, 0x0A	; 10
    6b5e:	10 f0       	brcs	.+4      	; 0x6b64 <putChar_hex+0x26>
    6b60:	99 5c       	subi	r25, 0xC9	; 201
    6b62:	01 c0       	rjmp	.+2      	; 0x6b66 <putChar_hex+0x28>
    6b64:	90 5d       	subi	r25, 0xD0	; 208
    6b66:	91 83       	std	Z+1, r25	; 0x01
    6b68:	12 82       	std	Z+2, r1	; 0x02
    6b6a:	c9 01       	movw	r24, r18
    6b6c:	08 95       	ret

00006b6e <putChar_MidiChan>:
    6b6e:	80 31       	cpi	r24, 0x10	; 16
    6b70:	48 f0       	brcs	.+18     	; 0x6b84 <putChar_MidiChan+0x16>
    6b72:	8e e6       	ldi	r24, 0x6E	; 110
    6b74:	db 01       	movw	r26, r22
    6b76:	8c 93       	st	X, r24
    6b78:	fb 01       	movw	r30, r22
    6b7a:	32 96       	adiw	r30, 0x02	; 2
    6b7c:	8f e6       	ldi	r24, 0x6F	; 111
    6b7e:	11 96       	adiw	r26, 0x01	; 1
    6b80:	8c 93       	st	X, r24
    6b82:	14 c0       	rjmp	.+40     	; 0x6bac <putChar_MidiChan+0x3e>
    6b84:	91 e0       	ldi	r25, 0x01	; 1
    6b86:	98 0f       	add	r25, r24
    6b88:	9a 30       	cpi	r25, 0x0A	; 10
    6b8a:	38 f0       	brcs	.+14     	; 0x6b9a <putChar_MidiChan+0x2c>
    6b8c:	db 01       	movw	r26, r22
    6b8e:	11 96       	adiw	r26, 0x01	; 1
    6b90:	81 e3       	ldi	r24, 0x31	; 49
    6b92:	fb 01       	movw	r30, r22
    6b94:	80 83       	st	Z, r24
    6b96:	96 ef       	ldi	r25, 0xF6	; 246
    6b98:	05 c0       	rjmp	.+10     	; 0x6ba4 <putChar_MidiChan+0x36>
    6b9a:	db 01       	movw	r26, r22
    6b9c:	11 96       	adiw	r26, 0x01	; 1
    6b9e:	80 e2       	ldi	r24, 0x20	; 32
    6ba0:	fb 01       	movw	r30, r22
    6ba2:	80 83       	st	Z, r24
    6ba4:	fd 01       	movw	r30, r26
    6ba6:	31 96       	adiw	r30, 0x01	; 1
    6ba8:	90 5d       	subi	r25, 0xD0	; 208
    6baa:	9c 93       	st	X, r25
    6bac:	10 82       	st	Z, r1
    6bae:	cf 01       	movw	r24, r30
    6bb0:	08 95       	ret

00006bb2 <putChar_long>:
    6bb2:	ac 01       	movw	r20, r24
    6bb4:	fb 01       	movw	r30, r22
    6bb6:	34 96       	adiw	r30, 0x04	; 4
    6bb8:	db 01       	movw	r26, r22
    6bba:	14 96       	adiw	r26, 0x04	; 4
    6bbc:	1c 92       	st	X, r1
    6bbe:	20 e0       	ldi	r18, 0x00	; 0
    6bc0:	10 c0       	rjmp	.+32     	; 0x6be2 <putChar_long+0x30>
    6bc2:	94 2f       	mov	r25, r20
    6bc4:	9f 70       	andi	r25, 0x0F	; 15
    6bc6:	31 97       	sbiw	r30, 0x01	; 1
    6bc8:	9a 30       	cpi	r25, 0x0A	; 10
    6bca:	10 f0       	brcs	.+4      	; 0x6bd0 <putChar_long+0x1e>
    6bcc:	99 5c       	subi	r25, 0xC9	; 201
    6bce:	01 c0       	rjmp	.+2      	; 0x6bd2 <putChar_long+0x20>
    6bd0:	90 5d       	subi	r25, 0xD0	; 208
    6bd2:	90 83       	st	Z, r25
    6bd4:	52 95       	swap	r21
    6bd6:	42 95       	swap	r20
    6bd8:	4f 70       	andi	r20, 0x0F	; 15
    6bda:	45 27       	eor	r20, r21
    6bdc:	5f 70       	andi	r21, 0x0F	; 15
    6bde:	45 27       	eor	r20, r21
    6be0:	2f 5f       	subi	r18, 0xFF	; 255
    6be2:	24 30       	cpi	r18, 0x04	; 4
    6be4:	70 f3       	brcs	.-36     	; 0x6bc2 <putChar_long+0x10>
    6be6:	cf 01       	movw	r24, r30
    6be8:	04 96       	adiw	r24, 0x04	; 4
    6bea:	08 95       	ret

00006bec <putChar_Note>:
    6bec:	88 23       	and	r24, r24
    6bee:	8c f4       	brge	.+34     	; 0x6c12 <putChar_Note+0x26>
    6bf0:	8d e2       	ldi	r24, 0x2D	; 45
    6bf2:	db 01       	movw	r26, r22
    6bf4:	8c 93       	st	X, r24
    6bf6:	9e e6       	ldi	r25, 0x6E	; 110
    6bf8:	11 96       	adiw	r26, 0x01	; 1
    6bfa:	9c 93       	st	X, r25
    6bfc:	11 97       	sbiw	r26, 0x01	; 1
    6bfe:	12 96       	adiw	r26, 0x02	; 2
    6c00:	8c 93       	st	X, r24
    6c02:	12 97       	sbiw	r26, 0x02	; 2
    6c04:	14 96       	adiw	r26, 0x04	; 4
    6c06:	fb 01       	movw	r30, r22
    6c08:	13 82       	std	Z+3, r1	; 0x03
    6c0a:	49 c0       	rjmp	.+146    	; 0x6c9e <putChar_Note+0xb2>
    6c0c:	8c 50       	subi	r24, 0x0C	; 12
    6c0e:	9f 5f       	subi	r25, 0xFF	; 255
    6c10:	01 c0       	rjmp	.+2      	; 0x6c14 <putChar_Note+0x28>
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	8c 30       	cpi	r24, 0x0C	; 12
    6c16:	d0 f7       	brcc	.-12     	; 0x6c0c <putChar_Note+0x20>
    6c18:	8b 30       	cpi	r24, 0x0B	; 11
    6c1a:	39 f4       	brne	.+14     	; 0x6c2a <putChar_Note+0x3e>
    6c1c:	fb 01       	movw	r30, r22
    6c1e:	31 96       	adiw	r30, 0x01	; 1
    6c20:	88 e4       	ldi	r24, 0x48	; 72
    6c22:	db 01       	movw	r26, r22
    6c24:	8c 93       	st	X, r24
    6c26:	8f e5       	ldi	r24, 0x5F	; 95
    6c28:	27 c0       	rjmp	.+78     	; 0x6c78 <putChar_Note+0x8c>
    6c2a:	85 30       	cpi	r24, 0x05	; 5
    6c2c:	58 f4       	brcc	.+22     	; 0x6c44 <putChar_Note+0x58>
    6c2e:	fb 01       	movw	r30, r22
    6c30:	31 96       	adiw	r30, 0x01	; 1
    6c32:	28 2f       	mov	r18, r24
    6c34:	26 95       	lsr	r18
    6c36:	2d 5b       	subi	r18, 0xBD	; 189
    6c38:	db 01       	movw	r26, r22
    6c3a:	2c 93       	st	X, r18
    6c3c:	80 fd       	sbrc	r24, 0
    6c3e:	19 c0       	rjmp	.+50     	; 0x6c72 <putChar_Note+0x86>
    6c40:	8f e5       	ldi	r24, 0x5F	; 95
    6c42:	1a c0       	rjmp	.+52     	; 0x6c78 <putChar_Note+0x8c>
    6c44:	89 30       	cpi	r24, 0x09	; 9
    6c46:	30 f0       	brcs	.+12     	; 0x6c54 <putChar_Note+0x68>
    6c48:	fb 01       	movw	r30, r22
    6c4a:	31 96       	adiw	r30, 0x01	; 1
    6c4c:	21 e4       	ldi	r18, 0x41	; 65
    6c4e:	db 01       	movw	r26, r22
    6c50:	2c 93       	st	X, r18
    6c52:	0b c0       	rjmp	.+22     	; 0x6c6a <putChar_Note+0x7e>
    6c54:	fb 01       	movw	r30, r22
    6c56:	31 96       	adiw	r30, 0x01	; 1
    6c58:	28 2f       	mov	r18, r24
    6c5a:	30 e0       	ldi	r19, 0x00	; 0
    6c5c:	25 50       	subi	r18, 0x05	; 5
    6c5e:	31 09       	sbc	r19, r1
    6c60:	35 95       	asr	r19
    6c62:	27 95       	ror	r18
    6c64:	2a 5b       	subi	r18, 0xBA	; 186
    6c66:	db 01       	movw	r26, r22
    6c68:	2c 93       	st	X, r18
    6c6a:	80 ff       	sbrs	r24, 0
    6c6c:	04 c0       	rjmp	.+8      	; 0x6c76 <putChar_Note+0x8a>
    6c6e:	8f e5       	ldi	r24, 0x5F	; 95
    6c70:	03 c0       	rjmp	.+6      	; 0x6c78 <putChar_Note+0x8c>
    6c72:	83 e2       	ldi	r24, 0x23	; 35
    6c74:	01 c0       	rjmp	.+2      	; 0x6c78 <putChar_Note+0x8c>
    6c76:	83 e2       	ldi	r24, 0x23	; 35
    6c78:	80 83       	st	Z, r24
    6c7a:	91 11       	cpse	r25, r1
    6c7c:	05 c0       	rjmp	.+10     	; 0x6c88 <putChar_Note+0x9c>
    6c7e:	df 01       	movw	r26, r30
    6c80:	12 96       	adiw	r26, 0x02	; 2
    6c82:	8d e6       	ldi	r24, 0x6D	; 109
    6c84:	81 83       	std	Z+1, r24	; 0x01
    6c86:	0b c0       	rjmp	.+22     	; 0x6c9e <putChar_Note+0xb2>
    6c88:	9c 30       	cpi	r25, 0x0C	; 12
    6c8a:	28 f4       	brcc	.+10     	; 0x6c96 <putChar_Note+0xaa>
    6c8c:	df 01       	movw	r26, r30
    6c8e:	12 96       	adiw	r26, 0x02	; 2
    6c90:	91 5d       	subi	r25, 0xD1	; 209
    6c92:	91 83       	std	Z+1, r25	; 0x01
    6c94:	04 c0       	rjmp	.+8      	; 0x6c9e <putChar_Note+0xb2>
    6c96:	df 01       	movw	r26, r30
    6c98:	12 96       	adiw	r26, 0x02	; 2
    6c9a:	8d e2       	ldi	r24, 0x2D	; 45
    6c9c:	81 83       	std	Z+1, r24	; 0x01
    6c9e:	1c 92       	st	X, r1
    6ca0:	cd 01       	movw	r24, r26
    6ca2:	08 95       	ret

00006ca4 <putChar_Manual>:
    6ca4:	83 30       	cpi	r24, 0x03	; 3
    6ca6:	38 f4       	brcc	.+14     	; 0x6cb6 <putChar_Manual+0x12>
    6ca8:	fb 01       	movw	r30, r22
    6caa:	31 96       	adiw	r30, 0x01	; 1
    6cac:	93 e3       	ldi	r25, 0x33	; 51
    6cae:	98 1b       	sub	r25, r24
    6cb0:	db 01       	movw	r26, r22
    6cb2:	9c 93       	st	X, r25
    6cb4:	0d c0       	rjmp	.+26     	; 0x6cd0 <putChar_Manual+0x2c>
    6cb6:	83 30       	cpi	r24, 0x03	; 3
    6cb8:	31 f4       	brne	.+12     	; 0x6cc6 <putChar_Manual+0x22>
    6cba:	fb 01       	movw	r30, r22
    6cbc:	31 96       	adiw	r30, 0x01	; 1
    6cbe:	80 e5       	ldi	r24, 0x50	; 80
    6cc0:	db 01       	movw	r26, r22
    6cc2:	8c 93       	st	X, r24
    6cc4:	05 c0       	rjmp	.+10     	; 0x6cd0 <putChar_Manual+0x2c>
    6cc6:	fb 01       	movw	r30, r22
    6cc8:	31 96       	adiw	r30, 0x01	; 1
    6cca:	8d e2       	ldi	r24, 0x2D	; 45
    6ccc:	db 01       	movw	r26, r22
    6cce:	8c 93       	st	X, r24
    6cd0:	10 82       	st	Z, r1
    6cd2:	cf 01       	movw	r24, r30
    6cd4:	08 95       	ret

00006cd6 <putString_P>:
    6cd6:	fc 01       	movw	r30, r24
    6cd8:	db 01       	movw	r26, r22
    6cda:	20 e0       	ldi	r18, 0x00	; 0
    6cdc:	02 c0       	rjmp	.+4      	; 0x6ce2 <putString_P+0xc>
    6cde:	28 2f       	mov	r18, r24
    6ce0:	da 01       	movw	r26, r20
    6ce2:	94 91       	lpm	r25, Z
    6ce4:	99 23       	and	r25, r25
    6ce6:	51 f0       	breq	.+20     	; 0x6cfc <putString_P+0x26>
    6ce8:	ad 01       	movw	r20, r26
    6cea:	4f 5f       	subi	r20, 0xFF	; 255
    6cec:	5f 4f       	sbci	r21, 0xFF	; 255
    6cee:	31 96       	adiw	r30, 0x01	; 1
    6cf0:	9c 93       	st	X, r25
    6cf2:	81 e0       	ldi	r24, 0x01	; 1
    6cf4:	82 0f       	add	r24, r18
    6cf6:	24 31       	cpi	r18, 0x14	; 20
    6cf8:	90 f3       	brcs	.-28     	; 0x6cde <putString_P+0x8>
    6cfa:	01 c0       	rjmp	.+2      	; 0x6cfe <putString_P+0x28>
    6cfc:	ad 01       	movw	r20, r26
    6cfe:	ca 01       	movw	r24, r20
    6d00:	08 95       	ret

00006d02 <lcd_wordout>:
    6d02:	cf 93       	push	r28
    6d04:	c8 2f       	mov	r28, r24
    6d06:	89 2f       	mov	r24, r25
    6d08:	81 de       	rcall	.-766    	; 0x6a0c <lcd_hexout>
    6d0a:	8c 2f       	mov	r24, r28
    6d0c:	7f de       	rcall	.-770    	; 0x6a0c <lcd_hexout>
    6d0e:	cf 91       	pop	r28
    6d10:	08 95       	ret

00006d12 <lcd_noteOut>:
    6d12:	cf 93       	push	r28
    6d14:	df 93       	push	r29
    6d16:	88 23       	and	r24, r24
    6d18:	e4 f1       	brlt	.+120    	; 0x6d92 <lcd_noteOut+0x80>
    6d1a:	90 e0       	ldi	r25, 0x00	; 0
    6d1c:	02 c0       	rjmp	.+4      	; 0x6d22 <lcd_noteOut+0x10>
    6d1e:	9f 5f       	subi	r25, 0xFF	; 255
    6d20:	8c 50       	subi	r24, 0x0C	; 12
    6d22:	8c 30       	cpi	r24, 0x0C	; 12
    6d24:	e0 f7       	brcc	.-8      	; 0x6d1e <lcd_noteOut+0xc>
    6d26:	48 2f       	mov	r20, r24
    6d28:	50 e0       	ldi	r21, 0x00	; 0
    6d2a:	4c 30       	cpi	r20, 0x0C	; 12
    6d2c:	51 05       	cpc	r21, r1
    6d2e:	30 f4       	brcc	.+12     	; 0x6d3c <lcd_noteOut+0x2a>
    6d30:	fa 01       	movw	r30, r20
    6d32:	88 27       	eor	r24, r24
    6d34:	ea 55       	subi	r30, 0x5A	; 90
    6d36:	ff 4f       	sbci	r31, 0xFF	; 255
    6d38:	8f 4f       	sbci	r24, 0xFF	; 255
    6d3a:	5d c1       	rjmp	.+698    	; 0x6ff6 <__tablejump2__>
    6d3c:	d3 e2       	ldi	r29, 0x23	; 35
    6d3e:	80 e2       	ldi	r24, 0x20	; 32
    6d40:	23 c0       	rjmp	.+70     	; 0x6d88 <lcd_noteOut+0x76>
    6d42:	d3 e2       	ldi	r29, 0x23	; 35
    6d44:	84 e4       	ldi	r24, 0x44	; 68
    6d46:	20 c0       	rjmp	.+64     	; 0x6d88 <lcd_noteOut+0x76>
    6d48:	d3 e2       	ldi	r29, 0x23	; 35
    6d4a:	86 e4       	ldi	r24, 0x46	; 70
    6d4c:	1d c0       	rjmp	.+58     	; 0x6d88 <lcd_noteOut+0x76>
    6d4e:	d3 e2       	ldi	r29, 0x23	; 35
    6d50:	87 e4       	ldi	r24, 0x47	; 71
    6d52:	1a c0       	rjmp	.+52     	; 0x6d88 <lcd_noteOut+0x76>
    6d54:	d3 e2       	ldi	r29, 0x23	; 35
    6d56:	81 e4       	ldi	r24, 0x41	; 65
    6d58:	17 c0       	rjmp	.+46     	; 0x6d88 <lcd_noteOut+0x76>
    6d5a:	d5 ea       	ldi	r29, 0xA5	; 165
    6d5c:	83 e4       	ldi	r24, 0x43	; 67
    6d5e:	14 c0       	rjmp	.+40     	; 0x6d88 <lcd_noteOut+0x76>
    6d60:	d5 ea       	ldi	r29, 0xA5	; 165
    6d62:	84 e4       	ldi	r24, 0x44	; 68
    6d64:	11 c0       	rjmp	.+34     	; 0x6d88 <lcd_noteOut+0x76>
    6d66:	d5 ea       	ldi	r29, 0xA5	; 165
    6d68:	85 e4       	ldi	r24, 0x45	; 69
    6d6a:	0e c0       	rjmp	.+28     	; 0x6d88 <lcd_noteOut+0x76>
    6d6c:	d5 ea       	ldi	r29, 0xA5	; 165
    6d6e:	86 e4       	ldi	r24, 0x46	; 70
    6d70:	0b c0       	rjmp	.+22     	; 0x6d88 <lcd_noteOut+0x76>
    6d72:	d5 ea       	ldi	r29, 0xA5	; 165
    6d74:	87 e4       	ldi	r24, 0x47	; 71
    6d76:	08 c0       	rjmp	.+16     	; 0x6d88 <lcd_noteOut+0x76>
    6d78:	d5 ea       	ldi	r29, 0xA5	; 165
    6d7a:	81 e4       	ldi	r24, 0x41	; 65
    6d7c:	05 c0       	rjmp	.+10     	; 0x6d88 <lcd_noteOut+0x76>
    6d7e:	d5 ea       	ldi	r29, 0xA5	; 165
    6d80:	88 e4       	ldi	r24, 0x48	; 72
    6d82:	02 c0       	rjmp	.+4      	; 0x6d88 <lcd_noteOut+0x76>
    6d84:	d3 e2       	ldi	r29, 0x23	; 35
    6d86:	83 e4       	ldi	r24, 0x43	; 67
    6d88:	99 23       	and	r25, r25
    6d8a:	39 f0       	breq	.+14     	; 0x6d9a <lcd_noteOut+0x88>
    6d8c:	cf e2       	ldi	r28, 0x2F	; 47
    6d8e:	c9 0f       	add	r28, r25
    6d90:	05 c0       	rjmp	.+10     	; 0x6d9c <lcd_noteOut+0x8a>
    6d92:	cd e2       	ldi	r28, 0x2D	; 45
    6d94:	dd e2       	ldi	r29, 0x2D	; 45
    6d96:	8d e2       	ldi	r24, 0x2D	; 45
    6d98:	01 c0       	rjmp	.+2      	; 0x6d9c <lcd_noteOut+0x8a>
    6d9a:	cd e2       	ldi	r28, 0x2D	; 45
    6d9c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6da0:	8d 2f       	mov	r24, r29
    6da2:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6da6:	8c 2f       	mov	r24, r28
    6da8:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6dac:	83 e0       	ldi	r24, 0x03	; 3
    6dae:	df 91       	pop	r29
    6db0:	cf 91       	pop	r28
    6db2:	08 95       	ret

00006db4 <lcd_ChannelOut>:
    6db4:	cf 93       	push	r28
    6db6:	c8 2f       	mov	r28, r24
    6db8:	cf 70       	andi	r28, 0x0F	; 15
    6dba:	81 e0       	ldi	r24, 0x01	; 1
    6dbc:	8c 0f       	add	r24, r28
    6dbe:	8a 30       	cpi	r24, 0x0A	; 10
    6dc0:	28 f0       	brcs	.+10     	; 0x6dcc <lcd_ChannelOut+0x18>
    6dc2:	81 e3       	ldi	r24, 0x31	; 49
    6dc4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6dc8:	87 ef       	ldi	r24, 0xF7	; 247
    6dca:	8c 0f       	add	r24, r28
    6dcc:	80 5d       	subi	r24, 0xD0	; 208
    6dce:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6dd2:	cf 91       	pop	r28
    6dd4:	08 95       	ret

00006dd6 <lcd_ManualOutDec>:
    6dd6:	84 30       	cpi	r24, 0x04	; 4
    6dd8:	20 f0       	brcs	.+8      	; 0x6de2 <lcd_ManualOutDec+0xc>
    6dda:	8d e2       	ldi	r24, 0x2D	; 45
    6ddc:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <lcd_putc>
    6de0:	08 95       	ret
    6de2:	83 30       	cpi	r24, 0x03	; 3
    6de4:	21 f4       	brne	.+8      	; 0x6dee <lcd_ManualOutDec+0x18>
    6de6:	80 e5       	ldi	r24, 0x50	; 80
    6de8:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <lcd_putc>
    6dec:	08 95       	ret
    6dee:	93 e3       	ldi	r25, 0x33	; 51
    6df0:	98 1b       	sub	r25, r24
    6df2:	89 2f       	mov	r24, r25
    6df4:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <lcd_putc>
    6df8:	08 95       	ret

00006dfa <lcd_blank>:
    6dfa:	cf 93       	push	r28
    6dfc:	04 c0       	rjmp	.+8      	; 0x6e06 <lcd_blank+0xc>
    6dfe:	80 e2       	ldi	r24, 0x20	; 32
    6e00:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6e04:	8c 2f       	mov	r24, r28
    6e06:	cf ef       	ldi	r28, 0xFF	; 255
    6e08:	c8 0f       	add	r28, r24
    6e0a:	81 11       	cpse	r24, r1
    6e0c:	f8 cf       	rjmp	.-16     	; 0x6dfe <lcd_blank+0x4>
    6e0e:	cf 91       	pop	r28
    6e10:	08 95       	ret

00006e12 <lcd_clrEol>:
    6e12:	cf 93       	push	r28
    6e14:	90 e0       	ldi	r25, 0x00	; 0
    6e16:	04 c0       	rjmp	.+8      	; 0x6e20 <lcd_clrEol+0xe>
    6e18:	80 e2       	ldi	r24, 0x20	; 32
    6e1a:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6e1e:	9c 2f       	mov	r25, r28
    6e20:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    6e24:	84 31       	cpi	r24, 0x14	; 20
    6e26:	51 f0       	breq	.+20     	; 0x6e3c <lcd_clrEol+0x2a>
    6e28:	84 35       	cpi	r24, 0x54	; 84
    6e2a:	41 f0       	breq	.+16     	; 0x6e3c <lcd_clrEol+0x2a>
    6e2c:	88 32       	cpi	r24, 0x28	; 40
    6e2e:	31 f0       	breq	.+12     	; 0x6e3c <lcd_clrEol+0x2a>
    6e30:	88 36       	cpi	r24, 0x68	; 104
    6e32:	21 f0       	breq	.+8      	; 0x6e3c <lcd_clrEol+0x2a>
    6e34:	c1 e0       	ldi	r28, 0x01	; 1
    6e36:	c9 0f       	add	r28, r25
    6e38:	94 31       	cpi	r25, 0x14	; 20
    6e3a:	70 f3       	brcs	.-36     	; 0x6e18 <lcd_clrEol+0x6>
    6e3c:	cf 91       	pop	r28
    6e3e:	08 95       	ret

00006e40 <lcd_cursosblink>:
    6e40:	8d e0       	ldi	r24, 0x0D	; 13
    6e42:	0e 94 d6 11 	call	0x23ac	; 0x23ac <lcd_write_command>
    6e46:	8f ef       	ldi	r24, 0xFF	; 255
    6e48:	80 93 07 10 	sts	0x1007, r24	; 0x801007 <lcd_cursorIsOn>
    6e4c:	08 95       	ret

00006e4e <lcd_cursoroff>:
    6e4e:	8c e0       	ldi	r24, 0x0C	; 12
    6e50:	0e 94 d6 11 	call	0x23ac	; 0x23ac <lcd_write_command>
    6e54:	10 92 07 10 	sts	0x1007, r1	; 0x801007 <lcd_cursorIsOn>
    6e58:	08 95       	ret

00006e5a <lcd_waitSymbolOn>:
    6e5a:	cf 93       	push	r28
    6e5c:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    6e60:	8c e0       	ldi	r24, 0x0C	; 12
    6e62:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    6e66:	81 ea       	ldi	r24, 0xA1	; 161
    6e68:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6e6c:	8c 2f       	mov	r24, r28
    6e6e:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    6e72:	cf 91       	pop	r28
    6e74:	08 95       	ret

00006e76 <lcd_waitSymbolOff>:
    6e76:	cf 93       	push	r28
    6e78:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    6e7c:	8c e0       	ldi	r24, 0x0C	; 12
    6e7e:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    6e82:	80 e2       	ldi	r24, 0x20	; 32
    6e84:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>
    6e88:	8c 2f       	mov	r24, r28
    6e8a:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
    6e8e:	cf 91       	pop	r28
    6e90:	08 95       	ret

00006e92 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    6e92:	84 30       	cpi	r24, 0x04	; 4
    6e94:	28 f0       	brcs	.+10     	; 0x6ea0 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    6e96:	20 e0       	ldi	r18, 0x00	; 0
    6e98:	0d c0       	rjmp	.+26     	; 0x6eb4 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    6e9a:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    6e9c:	fa 01       	movw	r30, r20
    6e9e:	02 c0       	rjmp	.+4      	; 0x6ea4 <keylabel_set+0x12>
    6ea0:	fb 01       	movw	r30, r22
    6ea2:	20 e0       	ldi	r18, 0x00	; 0
    6ea4:	af 01       	movw	r20, r30
    6ea6:	4f 5f       	subi	r20, 0xFF	; 255
    6ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    6eaa:	94 91       	lpm	r25, Z
    6eac:	99 23       	and	r25, r25
    6eae:	11 f0       	breq	.+4      	; 0x6eb4 <keylabel_set+0x22>
    6eb0:	25 30       	cpi	r18, 0x05	; 5
    6eb2:	98 f3       	brcs	.-26     	; 0x6e9a <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	dc 01       	movw	r26, r24
    6eb8:	aa 0f       	add	r26, r26
    6eba:	bb 1f       	adc	r27, r27
    6ebc:	aa 0f       	add	r26, r26
    6ebe:	bb 1f       	adc	r27, r27
    6ec0:	8a 0f       	add	r24, r26
    6ec2:	9b 1f       	adc	r25, r27
    6ec4:	dc 01       	movw	r26, r24
    6ec6:	af 5e       	subi	r26, 0xEF	; 239
    6ec8:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    6eca:	45 e0       	ldi	r20, 0x05	; 5
    6ecc:	50 e0       	ldi	r21, 0x00	; 0
    6ece:	42 1b       	sub	r20, r18
    6ed0:	51 09       	sbc	r21, r1
    6ed2:	ca 01       	movw	r24, r20
    6ed4:	99 23       	and	r25, r25
    6ed6:	0c f4       	brge	.+2      	; 0x6eda <keylabel_set+0x48>
    6ed8:	01 96       	adiw	r24, 0x01	; 1
    6eda:	95 95       	asr	r25
    6edc:	87 95       	ror	r24
    6ede:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    6ee0:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    6ee4:	0e c0       	rjmp	.+28     	; 0x6f02 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    6ee6:	93 17       	cp	r25, r19
    6ee8:	10 f0       	brcs	.+4      	; 0x6eee <keylabel_set+0x5c>
    6eea:	98 17       	cp	r25, r24
    6eec:	18 f0       	brcs	.+6      	; 0x6ef4 <keylabel_set+0x62>
			*charBufPtr = ' ';
    6eee:	20 e2       	ldi	r18, 0x20	; 32
    6ef0:	2c 93       	st	X, r18
    6ef2:	05 c0       	rjmp	.+10     	; 0x6efe <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    6ef4:	fb 01       	movw	r30, r22
    6ef6:	24 91       	lpm	r18, Z
    6ef8:	2c 93       	st	X, r18
    6efa:	6f 5f       	subi	r22, 0xFF	; 255
    6efc:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    6efe:	11 96       	adiw	r26, 0x01	; 1
		i++;
    6f00:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    6f02:	95 30       	cpi	r25, 0x05	; 5
    6f04:	80 f3       	brcs	.-32     	; 0x6ee6 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    6f06:	08 95       	ret

00006f08 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    6f08:	90 e0       	ldi	r25, 0x00	; 0
    6f0a:	fc 01       	movw	r30, r24
    6f0c:	ee 0f       	add	r30, r30
    6f0e:	ff 1f       	adc	r31, r31
    6f10:	ee 0f       	add	r30, r30
    6f12:	ff 1f       	adc	r31, r31
    6f14:	8e 0f       	add	r24, r30
    6f16:	9f 1f       	adc	r25, r31
    6f18:	fc 01       	movw	r30, r24
    6f1a:	ef 5e       	subi	r30, 0xEF	; 239
    6f1c:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f1e:	80 e0       	ldi	r24, 0x00	; 0
    6f20:	04 c0       	rjmp	.+8      	; 0x6f2a <keylabel_clr+0x22>
		*charPtr++ = ' ';
    6f22:	90 e2       	ldi	r25, 0x20	; 32
    6f24:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f26:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    6f28:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f2a:	85 30       	cpi	r24, 0x05	; 5
    6f2c:	d0 f3       	brcs	.-12     	; 0x6f22 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    6f2e:	08 95       	ret

00006f30 <keylabel_toLCD>:

void keylabel_toLCD(){
    6f30:	0f 93       	push	r16
    6f32:	1f 93       	push	r17
    6f34:	cf 93       	push	r28
    6f36:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    6f38:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    6f3c:	84 e5       	ldi	r24, 0x54	; 84
    6f3e:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f42:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    6f44:	e1 e1       	ldi	r30, 0x11	; 17
    6f46:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f48:	08 c0       	rjmp	.+16     	; 0x6f5a <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    6f4a:	8f 01       	movw	r16, r30
    6f4c:	0f 5f       	subi	r16, 0xFF	; 255
    6f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    6f50:	80 81       	ld	r24, Z
    6f52:	0e 94 72 12 	call	0x24e4	; 0x24e4 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f56:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    6f58:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f5a:	c4 31       	cpi	r28, 0x14	; 20
    6f5c:	b0 f3       	brcs	.-20     	; 0x6f4a <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    6f5e:	8d 2f       	mov	r24, r29
    6f60:	0e 94 48 12 	call	0x2490	; 0x2490 <lcd_goto>
}
    6f64:	df 91       	pop	r29
    6f66:	cf 91       	pop	r28
    6f68:	1f 91       	pop	r17
    6f6a:	0f 91       	pop	r16
    6f6c:	08 95       	ret

00006f6e <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	fc 01       	movw	r30, r24
    6f72:	ee 0f       	add	r30, r30
    6f74:	ff 1f       	adc	r31, r31
    6f76:	ee 0f       	add	r30, r30
    6f78:	ff 1f       	adc	r31, r31
    6f7a:	8e 0f       	add	r24, r30
    6f7c:	9f 1f       	adc	r25, r31
    6f7e:	fc 01       	movw	r30, r24
    6f80:	ef 5e       	subi	r30, 0xEF	; 239
    6f82:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f84:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    6f86:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f88:	12 c0       	rjmp	.+36     	; 0x6fae <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    6f8a:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    6f8c:	61 11       	cpse	r22, r1
    6f8e:	06 c0       	rjmp	.+12     	; 0x6f9c <keylabel_statcheck+0x2e>
    6f90:	2a 30       	cpi	r18, 0x0A	; 10
    6f92:	21 f4       	brne	.+8      	; 0x6f9c <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    6f94:	80 e8       	ldi	r24, 0x80	; 128
    6f96:	80 83       	st	Z, r24
			result = 0xFF;
    6f98:	8f ef       	ldi	r24, 0xFF	; 255
    6f9a:	07 c0       	rjmp	.+14     	; 0x6faa <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    6f9c:	66 23       	and	r22, r22
    6f9e:	29 f0       	breq	.+10     	; 0x6faa <keylabel_statcheck+0x3c>
    6fa0:	20 38       	cpi	r18, 0x80	; 128
    6fa2:	19 f4       	brne	.+6      	; 0x6faa <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    6fa4:	8a e0       	ldi	r24, 0x0A	; 10
    6fa6:	80 83       	st	Z, r24
			result = 0xFF;
    6fa8:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    6faa:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6fac:	9f 5f       	subi	r25, 0xFF	; 255
    6fae:	95 30       	cpi	r25, 0x05	; 5
    6fb0:	60 f3       	brcs	.-40     	; 0x6f8a <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    6fb2:	08 95       	ret

00006fb4 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    6fb4:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    6fb6:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    6fb8:	94 91       	lpm	r25, Z
    6fba:	99 23       	and	r25, r25
    6fbc:	21 f0       	breq	.+8      	; 0x6fc6 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    6fbe:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    6fc0:	8f 5f       	subi	r24, 0xFF	; 255
    6fc2:	80 32       	cpi	r24, 0x20	; 32
    6fc4:	c8 f3       	brcs	.-14     	; 0x6fb8 <get_StrLenP+0x4>
	return result;
}
    6fc6:	08 95       	ret

00006fc8 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    6fc8:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    6fca:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    6fcc:	90 81       	ld	r25, Z
    6fce:	99 23       	and	r25, r25
    6fd0:	21 f0       	breq	.+8      	; 0x6fda <get_StrLen+0x12>
			return result;
		}
		pString++;
    6fd2:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    6fd4:	8f 5f       	subi	r24, 0xFF	; 255
    6fd6:	80 32       	cpi	r24, 0x20	; 32
    6fd8:	c8 f3       	brcs	.-14     	; 0x6fcc <get_StrLen+0x4>
	return result;
}
    6fda:	08 95       	ret

00006fdc <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    6fdc:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    6fde:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    6fe0:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    6fe2:	06 c0       	rjmp	.+12     	; 0x6ff0 <reverse_Bits+0x14>
		result = result << 1;
    6fe4:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    6fe6:	32 2f       	mov	r19, r18
    6fe8:	31 70       	andi	r19, 0x01	; 1
    6fea:	83 2b       	or	r24, r19
		val = val >> 1;
    6fec:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    6fee:	9f 5f       	subi	r25, 0xFF	; 255
    6ff0:	98 30       	cpi	r25, 0x08	; 8
    6ff2:	c0 f3       	brcs	.-16     	; 0x6fe4 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    6ff4:	08 95       	ret

00006ff6 <__tablejump2__>:
    6ff6:	ee 0f       	add	r30, r30
    6ff8:	ff 1f       	adc	r31, r31
    6ffa:	88 1f       	adc	r24, r24
    6ffc:	8b bf       	out	0x3b, r24	; 59
    6ffe:	07 90       	elpm	r0, Z+
    7000:	f6 91       	elpm	r31, Z
    7002:	e0 2d       	mov	r30, r0
    7004:	19 94       	eijmp

00007006 <eeprom_read_block>:
    7006:	dc 01       	movw	r26, r24
    7008:	cb 01       	movw	r24, r22

0000700a <eeprom_read_blraw>:
    700a:	fc 01       	movw	r30, r24
    700c:	f9 99       	sbic	0x1f, 1	; 31
    700e:	fe cf       	rjmp	.-4      	; 0x700c <eeprom_read_blraw+0x2>
    7010:	06 c0       	rjmp	.+12     	; 0x701e <eeprom_read_blraw+0x14>
    7012:	f2 bd       	out	0x22, r31	; 34
    7014:	e1 bd       	out	0x21, r30	; 33
    7016:	f8 9a       	sbi	0x1f, 0	; 31
    7018:	31 96       	adiw	r30, 0x01	; 1
    701a:	00 b4       	in	r0, 0x20	; 32
    701c:	0d 92       	st	X+, r0
    701e:	41 50       	subi	r20, 0x01	; 1
    7020:	50 40       	sbci	r21, 0x00	; 0
    7022:	b8 f7       	brcc	.-18     	; 0x7012 <eeprom_read_blraw+0x8>
    7024:	08 95       	ret

00007026 <eeprom_read_byte>:
    7026:	f9 99       	sbic	0x1f, 1	; 31
    7028:	fe cf       	rjmp	.-4      	; 0x7026 <eeprom_read_byte>
    702a:	92 bd       	out	0x22, r25	; 34
    702c:	81 bd       	out	0x21, r24	; 33
    702e:	f8 9a       	sbi	0x1f, 0	; 31
    7030:	99 27       	eor	r25, r25
    7032:	80 b5       	in	r24, 0x20	; 32
    7034:	08 95       	ret

00007036 <eeprom_read_word>:
    7036:	a8 e1       	ldi	r26, 0x18	; 24
    7038:	b0 e0       	ldi	r27, 0x00	; 0
    703a:	42 e0       	ldi	r20, 0x02	; 2
    703c:	50 e0       	ldi	r21, 0x00	; 0
    703e:	e5 cf       	rjmp	.-54     	; 0x700a <eeprom_read_blraw>

00007040 <eeprom_update_block>:
    7040:	dc 01       	movw	r26, r24
    7042:	a4 0f       	add	r26, r20
    7044:	b5 1f       	adc	r27, r21
    7046:	41 50       	subi	r20, 0x01	; 1
    7048:	50 40       	sbci	r21, 0x00	; 0
    704a:	40 f0       	brcs	.+16     	; 0x705c <eeprom_update_block+0x1c>
    704c:	cb 01       	movw	r24, r22
    704e:	84 0f       	add	r24, r20
    7050:	95 1f       	adc	r25, r21
    7052:	2e 91       	ld	r18, -X
    7054:	05 d0       	rcall	.+10     	; 0x7060 <eeprom_update_r18>
    7056:	41 50       	subi	r20, 0x01	; 1
    7058:	50 40       	sbci	r21, 0x00	; 0
    705a:	d8 f7       	brcc	.-10     	; 0x7052 <eeprom_update_block+0x12>
    705c:	08 95       	ret

0000705e <eeprom_update_byte>:
    705e:	26 2f       	mov	r18, r22

00007060 <eeprom_update_r18>:
    7060:	f9 99       	sbic	0x1f, 1	; 31
    7062:	fe cf       	rjmp	.-4      	; 0x7060 <eeprom_update_r18>
    7064:	92 bd       	out	0x22, r25	; 34
    7066:	81 bd       	out	0x21, r24	; 33
    7068:	f8 9a       	sbi	0x1f, 0	; 31
    706a:	01 97       	sbiw	r24, 0x01	; 1
    706c:	00 b4       	in	r0, 0x20	; 32
    706e:	02 16       	cp	r0, r18
    7070:	39 f0       	breq	.+14     	; 0x7080 <eeprom_update_r18+0x20>
    7072:	1f ba       	out	0x1f, r1	; 31
    7074:	20 bd       	out	0x20, r18	; 32
    7076:	0f b6       	in	r0, 0x3f	; 63
    7078:	f8 94       	cli
    707a:	fa 9a       	sbi	0x1f, 2	; 31
    707c:	f9 9a       	sbi	0x1f, 1	; 31
    707e:	0f be       	out	0x3f, r0	; 63
    7080:	08 95       	ret

00007082 <eeprom_update_word>:
    7082:	01 96       	adiw	r24, 0x01	; 1
    7084:	27 2f       	mov	r18, r23
    7086:	ec df       	rcall	.-40     	; 0x7060 <eeprom_update_r18>
    7088:	ea cf       	rjmp	.-44     	; 0x705e <eeprom_update_byte>

0000708a <_exit>:
    708a:	f8 94       	cli

0000708c <__stop_program>:
    708c:	ff cf       	rjmp	.-2      	; 0x708c <__stop_program>
