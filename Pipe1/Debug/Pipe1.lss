
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00007e76  00007f2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007e76  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000171e  00800228  00800228  00007f52  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008f52  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008f84  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b88  00000000  00000000  00008fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f8d7  00000000  00000000  00009b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026eb  00000000  00000000  00019427  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000918c  00000000  00000000  0001bb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001ce4  00000000  00000000  00024ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003603  00000000  00000000  00026984  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009fae  00000000  00000000  00029f87  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f70  00000000  00000000  00033f35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__ctors_end>
       4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
       8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
       c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      10:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      14:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      18:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      1c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      20:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      24:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      28:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      2c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      30:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      34:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      38:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      3c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      40:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      44:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      48:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      4c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      50:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      54:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__vector_21>
      58:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      5c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      60:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      64:	0c 94 35 3a 	jmp	0x746a	; 0x746a <__vector_25>
      68:	0c 94 7b 3a 	jmp	0x74f6	; 0x74f6 <__vector_26>
      6c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      70:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      74:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      78:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      7c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      80:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      84:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      88:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      8c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      90:	0c 94 48 38 	jmp	0x7090	; 0x7090 <__vector_36>
      94:	0c 94 9d 38 	jmp	0x713a	; 0x713a <__vector_37>
      98:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      9c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      a0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      a4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      a8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      ac:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      b0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      b4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      b8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      bc:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      c0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      c4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      c8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      cc:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      d0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      d4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      d8:	0c 94 3b 3b 	jmp	0x7676	; 0x7676 <__vector_54>
      dc:	0c 94 93 3b 	jmp	0x7726	; 0x7726 <__vector_55>
      e0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      e4:	c3 22       	and	r12, r19
      e6:	ce 22       	and	r12, r30
      e8:	da 22       	and	r13, r26
      ea:	f6 22       	and	r15, r22
      ec:	13 23       	and	r17, r19
      ee:	34 23       	and	r19, r20
      f0:	3f 23       	and	r19, r31
      f2:	4a 23       	and	r20, r26
      f4:	5f 23       	and	r21, r31
      f6:	75 23       	and	r23, r21
      f8:	7d 23       	and	r23, r29
      fa:	8b 23       	and	r24, r27
      fc:	5f 23       	and	r21, r31
      fe:	b8 23       	and	r27, r24
     100:	c8 23       	and	r28, r24
     102:	ec 23       	and	r30, r28
     104:	3e 24       	eor	r3, r14
     106:	57 24       	eor	r5, r7
     108:	6c 24       	eor	r6, r12
     10a:	85 24       	eor	r8, r5
     10c:	8d 24       	eor	r8, r13
     10e:	b2 24       	eor	r11, r2
     110:	b2 24       	eor	r11, r2
     112:	cb 24       	eor	r12, r11
     114:	d8 24       	eor	r13, r8
     116:	c7 24       	eor	r12, r7
     118:	33 25       	eor	r19, r3
     11a:	3b 25       	eor	r19, r11
     11c:	86 25       	eor	r24, r6
     11e:	e8 25       	eor	r30, r8
     120:	12 26       	eor	r1, r18
     122:	3e 26       	eor	r3, r30
     124:	6d 26       	eor	r6, r29
     126:	75 26       	eor	r7, r21
     128:	7b 26       	eor	r7, r27
     12a:	33 25       	eor	r19, r3
     12c:	83 26       	eor	r8, r19
     12e:	97 26       	eor	r9, r23
     130:	7b 26       	eor	r7, r27
     132:	d5 26       	eor	r13, r21
     134:	e2 26       	eor	r14, r18
     136:	ee 26       	eor	r14, r30
     138:	03 27       	eor	r16, r19
     13a:	1c 27       	eor	r17, r28
     13c:	3f 27       	eor	r19, r31
     13e:	4a 27       	eor	r20, r26
     140:	50 27       	eor	r21, r16
     142:	55 27       	eor	r21, r21
     144:	68 27       	eor	r22, r24
     146:	89 27       	eor	r24, r25
     148:	9c 27       	eor	r25, r28
     14a:	55 27       	eor	r21, r21
     14c:	ae 3d       	cpi	r26, 0xDE	; 222
     14e:	c3 3d       	cpi	r28, 0xD3	; 211
     150:	b1 3d       	cpi	r27, 0xD1	; 209
     152:	a2 3d       	cpi	r26, 0xD2	; 210
     154:	b4 3d       	cpi	r27, 0xD4	; 212
     156:	b7 3d       	cpi	r27, 0xD7	; 215
     158:	a5 3d       	cpi	r26, 0xD5	; 213
     15a:	ba 3d       	cpi	r27, 0xDA	; 218
     15c:	a8 3d       	cpi	r26, 0xD8	; 216
     15e:	bd 3d       	cpi	r27, 0xDD	; 221
     160:	ab 3d       	cpi	r26, 0xDB	; 219
     162:	c0 3d       	cpi	r28, 0xD0	; 208

00000164 <__trampolines_end>:
     164:	1b 1b       	sub	r17, r27
     166:	1b 1b       	sub	r17, r27
     168:	1b 1b       	sub	r17, r27
     16a:	1b 00       	.word	0x001b	; ????

0000016c <cgPattern_RegOnOff>:
     16c:	1b 1b 18 18 18 18 18 00                             ........

00000174 <cgPattern_RegOffOn>:
     174:	1b 1b 03 03 03 03 03 00                             ........

0000017c <cgPattern_RegOffOff>:
     17c:	1b 1b 00 00 00 00 00 00                             ........

00000184 <cgPattern_RegOn>:
     184:	18 18 18 18 18 18 18 00                             ........

0000018c <cgPattern_RegOff>:
     18c:	18 18 00 00 00 00 00 00                             ........

00000194 <cgPattern_Down>:
     194:	04 04 04 04 15 0e 04 00                             ........

0000019c <cgPattern_Up>:
     19c:	04 0e 15 04 04 04 04 00                             ........

000001a4 <stringLog>:
     1a4:	4c 6f 67 3a 20 00                                   Log: .

000001aa <ErrorText>:
     1aa:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     1ba:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     1ca:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     1da:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1ea:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1fa:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     20a:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     21a:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     22a:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     23a:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     24a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     25a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     26a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     27a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     28a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     29a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     2aa:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     2ba:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

000002ca <panicString>:
     2ca:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

000002d3 <releaseKeyString>:
     2d3:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2e3:	6e 00                                               n.

000002e5 <prog_name>:
     2e5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002f4 <usbHWnone>:
     2f4:	6e 6f 6e 65 00                                      none.

000002f9 <usbHWmidiThru>:
     2f9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

00000305 <usbHWmidiOut>:
     305:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

0000030f <usbHWmidiIn>:
     30f:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

00000318 <usbHWmidichanSW>:
     318:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     328:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     338:	20 00                                                .

0000033a <usbHWBits>:
     33a:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000342 <usbHWmodule>:
     342:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000034a <usbHWempty>:
     34a:	65 6d 70 74 79 00                                   empty.

00000350 <usbHWRegister>:
     350:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000035c <usbHWRange>:
     35c:	52 61 6e 67 65 20 00                                Range .

00000363 <usbHWManual>:
     363:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000036c <usbHWmodulCheck>:
     36c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     37c:	20 00                                                .

0000037e <usbHWmodulInst>:
     37e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     38e:	3a 20 00                                            : .

00000391 <usbHWtitel>:
     391:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     3a1:	72 61 74 69 6f 6e 0d 0a 00                          ration...

000003aa <HelloMsg>:
     3aa:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     3ba:	65 72 66 61 63 65 0d 0a 00                          erface...

000003c3 <usbLog>:
     3c3:	4c 6f 67 0d 0a 00                                   Log...

000003c9 <usbEmpty>:
     3c9:	65 6d 70 74 79 0d 0a 00                             empty...

000003d1 <msg_programming1>:
     3d1:	73 61 76 65 2e 2e 2e 00                             save....

000003d9 <logNone>:
     3d9:	3c 6e 6f 6e 65 3e 00                                <none>.

000003e0 <stringNotAssigen>:
     3e0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003eb <menuMessageE>:
     3eb:	45 3a 00                                            E:.

000003ee <menuMessageOK>:
     3ee:	6f 6b 20 00                                         ok .

000003f2 <menuMessageAbort>:
     3f2:	61 62 6f 72 74 00                                   abort.

000003f8 <menuMessageMIDIpanic>:
     3f8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

00000407 <messageRegisterMan>:
     407:	2b 00                                               +.

00000409 <messageLoaded>:
     409:	20 52 65 67 00                                       Reg.

0000040e <messageSaved>:
     40e:	20 52 65 67 20 7e 20 00                              Reg ~ .

00000416 <MenuMIDIOutText>:
     416:	4f 75 74 3a 00                                      Out:.

0000041b <MenuMIDIInText>:
     41b:	49 6e 3a 00                                         In:.

0000041f <initMenuText>:
     41f:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

00000429 <nibbleInfo>:
	...
     431:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     441:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     451:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     461:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     471:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     481:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     491:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     4a1:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

000004b0 <menu_selFunc>:
     4b0:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 0c 08     ..<none>........
     4c0:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     4d0:	16 08 02 08 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     4e0:	6e 00 00 00 7a 0d f8 07 00 00 00 00 01 10 4b 6f     n...z.........Ko
     4f0:	70 70 65 6c 32 3c 33 00 00 00 da 07 bc 20 00 00     ppel2<3...... ..
     500:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 d0 07     ..Koppel1<3.....
     510:	bf 20 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     . ....KoppelP<3.
     520:	00 00 c6 07 c2 20 00 00 01 10 4b 6f 70 70 65 6c     ..... ....Koppel
     530:	31 3c 32 00 00 00 bc 07 c5 20 00 00 01 10 4b 6f     1<2...... ....Ko
     540:	70 70 65 6c 50 3c 32 00 00 00 b2 07 c8 20 00 00     ppelP<2...... ..
     550:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 a8 07     ..KoppelP<1.....
     560:	cb 20 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     . ....Koppel3<2.
     570:	00 00 9e 07 ce 20 00 00 01 10 4b 6f 70 70 65 6c     ..... ....Koppel
     580:	33 3c 31 00 00 00 94 07 d1 20 00 00 01 10 4b 6f     3<1...... ....Ko
     590:	70 70 65 6c 33 3c 50 00 00 00 8a 07 d4 20 00 00     ppel3<P...... ..
     5a0:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 80 07     ..Koppel2<1.....
     5b0:	d7 20 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     . ....Koppel2<P.
     5c0:	00 00 76 07 da 20 00 00 01 10 4b 6f 70 70 65 6c     ..v.. ....Koppel
     5d0:	31 3c 50 00 00 00 6c 07 dd 20 00 00 01 10 50 72     1<P...l.. ....Pr
     5e0:	2e 2b 2f 73 65 74 00 00 00 00 3a 07 f0 21 00 00     .+/set....:..!..
     5f0:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 30 07     ..Pr.-/clr....0.
     600:	b5 21 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     .!....Prog. 1A..
     610:	00 00 62 07 71 21 00 00 01 10 50 72 6f 67 2e 20     ..b.q!....Prog. 
     620:	32 41 00 00 00 00 58 07 74 21 00 00 01 10 50 72     2A....X.t!....Pr
     630:	6f 67 2e 20 33 41 00 00 00 00 4e 07 77 21 00 00     og. 3A....N.w!..
     640:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 44 07     ..Prog. 4A....D.
     650:	7a 21 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     z!....Prog.clr..
     660:	00 00 f4 06 ed 1b 00 00 01 10 50 72 6f 67 2e 73     ..........Prog.s
     670:	65 74 00 00 00 00 fe 06 f4 20 00 00 01 10 50 72     et....... ....Pr
     680:	6f 67 2e 2b 00 00 00 00 00 00 26 07 0c 22 00 00     og.+......&.."..
     690:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 1c 07     ..Prog.-........
     6a0:	c8 21 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     .!....PrBank+...
     6b0:	00 00 12 07 8d 21 00 00 01 10 50 72 42 61 6e 6b     .....!....PrBank
     6c0:	2e 2d 00 00 00 00 08 07 98 21 00 00 01 10 4d 49     .-.......!....MI
     6d0:	44 49 20 4f 66 66 00 00 00 00 e4 07 42 29 00 00     DI Off......B)..
     6e0:	c1 10 53 65 74 75 70 00 00 00 00 00 6a 0e ee 07     ..Setup.....j...
     6f0:	00 00 00 00                                         ....

000006f4 <shortKeyTextRegOff>:
     6f4:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

000006fe <shortKeyTextPRS>:
     6fe:	50 73 65 74 00 00 00 00 00 00                       Pset......

00000708 <shortKeyTextPBD>:
     708:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

00000712 <shortKeyTextPBI>:
     712:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

0000071c <shortKeyTextPRD>:
     71c:	50 2d 00 00 00 00 00 00 00 00                       P-........

00000726 <shortKeyTextPRI>:
     726:	50 2b 00 00 00 00 00 00 00 00                       P+........

00000730 <shortKeyTextPRM>:
     730:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

0000073a <shortKeyTextPRP>:
     73a:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000744 <shortKeyTextK4A>:
     744:	50 41 34 00 00 00 00 00 00 00                       PA4.......

0000074e <shortKeyTextK3A>:
     74e:	50 41 33 00 00 00 00 00 00 00                       PA3.......

00000758 <shortKeyTextK2A>:
     758:	50 41 32 00 00 00 00 00 00 00                       PA2.......

00000762 <shortKeyTextK1A>:
     762:	50 41 31 00 00 00 00 00 00 00                       PA1.......

0000076c <shortKeyTextCpl1P>:
     76c:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000776 <shortKeyTextCpl2P>:
     776:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000780 <shortKeyTextCpl21>:
     780:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000078a <shortKeyTextCpl3P>:
     78a:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000794 <shortKeyTextCpl31>:
     794:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000079e <shortKeyTextCpl32>:
     79e:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

000007a8 <shortKeyTextCplP1>:
     7a8:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

000007b2 <shortKeyTextCplP2>:
     7b2:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

000007bc <shortKeyTextCpl12>:
     7bc:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000007c6 <shortKeyTextCplP3>:
     7c6:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000007d0 <shortKeyTextCpl13>:
     7d0:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000007da <shortKeyTextCpl23>:
     7da:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000007e4 <shortKeyTextMIDIoff>:
     7e4:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000007ee <shortKeyTextSetup>:
     7ee:	53 65 74 75 00 00 00 00 00 00                       Setu......

000007f8 <shortKeyTextStim>:
     7f8:	53 74 69 6d 00 00 00 00 00 00                       Stim......

00000802 <shortKeyTextMenu>:
     802:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

0000080c <shortKeyTextNone>:
	...

00000816 <menu_main>:
     816:	81 00 4d 61 6e 75 61 6c 00 00 00 00 8e 08 00 00     ..Manual........
     826:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     836:	b6 08 00 00 78 20 00 00 01 00 4d 49 44 49 00 00     ....x ....MIDI..
     846:	00 00 00 00 82 0a 00 00 00 00 00 00 01 00 54 61     ..............Ta
     856:	73 74 65 6e 00 00 00 00 2a 0d 00 00 00 00 10 1c     sten....*.......
     866:	01 00 53 74 61 74 75 73 00 00 00 00 56 13 00 00     ..Status....V...
     876:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     886:	6a 0e 00 00 00 00 00 00                             j.......

0000088e <menu_manual>:
     88e:	81 00 4b 6f 70 70 65 6c 00 00 00 00 92 09 00 00     ..Koppel........
     89e:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     8ae:	7a 0d 00 00 00 00 00 00                             z.......

000008b6 <menu_register>:
     8b6:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 ce 05     ..Prog.lad......
     8c6:	00 00 85 20 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ... ..Prog.sp...
     8d6:	00 00 ce 05 00 00 05 1c 01 00 61 75 73 00 00 00     ..........aus...
	...
     8ee:	7f 20 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     . ....Reg.1-8...
     8fe:	00 00 93 05 00 00 c5 1b 0e 00 52 65 67 2e 39 2d     ..........Reg.9-
     90e:	31 36 00 00 00 00 94 05 00 00 c5 1b 0e 00 52 65     16............Re
     91e:	67 2e 31 37 2d 32 34 00 00 00 95 05 00 00 c5 1b     g.17-24.........
     92e:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 96 05     ..Reg.25-32.....
     93e:	00 00 c5 1b 0e 00 52 65 67 2e 33 33 2d 34 30 00     ......Reg.33-40.
     94e:	00 00 97 05 00 00 c5 1b 0e 00 52 65 67 2e 34 31     ..........Reg.41
     95e:	2d 34 38 00 00 00 98 05 00 00 c5 1b 0e 00 52 65     -48...........Re
     96e:	67 2e 34 39 2d 35 34 00 00 00 99 05 00 00 c5 1b     g.49-54.........
     97e:	ce 00 52 65 67 2e 35 35 2d 36 34 00 00 00 9a 05     ..Reg.55-64.....
     98e:	00 00 c5 1b                                         ....

00000992 <menu_coupler>:
     992:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 37 08     ..2<3.........7.
     9a2:	00 00 f2 1b 09 00 31 3c 33 00 00 00 00 00 00 00     ......1<3.......
     9b2:	00 00 38 08 00 00 f2 1b 09 00 31 3c 32 00 00 00     ..8.......1<2...
     9c2:	00 00 00 00 00 00 39 08 00 00 f2 1b 09 00 50 3c     ......9.......P<
     9d2:	33 00 00 00 00 00 00 00 00 00 3a 08 00 00 f2 1b     3.........:.....
     9e2:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 3b 08     ..P<2.........;.
     9f2:	00 00 f2 1b 09 00 50 3c 31 00 00 00 00 00 00 00     ......P<1.......
     a02:	00 00 3c 08 00 00 f2 1b 09 00 33 3c 32 00 00 00     ..<.......3<2...
     a12:	00 00 00 00 00 00 3d 08 00 00 f2 1b 09 00 33 3c     ......=.......3<
     a22:	31 00 00 00 00 00 00 00 00 00 3e 08 00 00 f2 1b     1.........>.....
     a32:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 3f 08     ..3<P.........?.
     a42:	00 00 f2 1b 09 00 32 3c 31 00 00 00 00 00 00 00     ......2<1.......
     a52:	00 00 40 08 00 00 f2 1b 09 00 32 3c 50 00 00 00     ..@.......2<P...
     a62:	00 00 00 00 00 00 41 08 00 00 f2 1b c9 00 31 3c     ......A.......1<
     a72:	50 00 00 00 00 00 00 00 00 00 42 08 00 00 f2 1b     P.........B.....

00000a82 <menu_midi>:
     a82:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     a92:	42 29 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     B)....MIDIin....
     aa2:	4a 0b 00 00 00 00 8b 1d 01 00 4d 49 44 49 6f 75     J.........MIDIou
     ab2:	74 00 00 00 ca 0d 00 00 00 00 87 1d 03 10 54 68     t.............Th
     ac2:	72 75 2d 49 6e 00 00 00 00 00 4c 08 00 00 c1 1b     ru-In.....L.....
     ad2:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 4d 08     ..Thru-Out....M.
     ae2:	00 00 c1 1b 09 00 41 63 63 65 70 74 20 50 43 00     ......Accept PC.
     af2:	00 00 58 09 00 00 83 1d 09 00 41 63 74 2e 53 65     ..X.......Act.Se
     b02:	6e 73 65 00 00 00 56 09 00 00 83 1d 09 00 56 65     nse...V.......Ve
     b12:	6c 5a 34 4f 66 66 00 00 00 00 57 09 00 00 83 1d     lZ4Off....W.....
     b22:	06 08 52 78 42 75 66 55 73 65 00 00 00 00 67 15     ..RxBufUse....g.
     b32:	00 00 00 00 c6 08 54 78 42 75 66 55 73 65 00 00     ......TxBufUse..
     b42:	00 00 70 16 00 00 00 00                             ..p.....

00000b4a <menu_midiIn>:
     b4a:	81 00 43 68 2e 31 00 00 00 00 00 00 8a 0c 00 00     ..Ch.1..........
     b5a:	22 1b 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ".....Ch.2......
     b6a:	8a 0c 01 00 22 1b 00 00 01 00 43 68 2e 33 00 00     ....".....Ch.3..
     b7a:	00 00 00 00 8a 0c 02 00 22 1b 00 00 01 00 43 68     ........".....Ch
     b8a:	2e 34 00 00 00 00 00 00 8a 0c 03 00 22 1b 00 00     .4.........."...
     b9a:	01 00 43 68 2e 35 00 00 00 00 00 00 8a 0c 04 00     ..Ch.5..........
     baa:	22 1b 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ".....Ch.6......
     bba:	8a 0c 05 00 22 1b 00 00 01 00 43 68 2e 37 00 00     ....".....Ch.7..
     bca:	00 00 00 00 8a 0c 06 00 22 1b 00 00 01 00 43 68     ........".....Ch
     bda:	2e 38 00 00 00 00 00 00 8a 0c 07 00 22 1b 00 00     .8.........."...
     bea:	01 00 43 68 2e 39 00 00 00 00 00 00 8a 0c 08 00     ..Ch.9..........
     bfa:	22 1b 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ".....Ch.10.....
     c0a:	8a 0c 09 00 22 1b 00 00 01 00 43 68 2e 31 31 00     ....".....Ch.11.
     c1a:	00 00 00 00 8a 0c 0a 00 22 1b 00 00 01 00 43 68     ........".....Ch
     c2a:	2e 31 32 00 00 00 00 00 8a 0c 0b 00 22 1b 00 00     .12........."...
     c3a:	01 00 43 68 2e 31 33 00 00 00 00 00 8a 0c 0c 00     ..Ch.13.........
     c4a:	22 1b 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ".....Ch.14.....
     c5a:	8a 0c 0d 00 22 1b 00 00 01 00 43 68 2e 31 35 00     ....".....Ch.15.
     c6a:	00 00 00 00 8a 0c 0e 00 22 1b 00 00 c1 00 43 68     ........".....Ch
     c7a:	2e 31 36 00 00 00 00 00 8a 0c 0f 00 22 1b 00 00     .16........."...

00000c8a <menu_midiInSec>:
     c8a:	81 00 53 65 63 74 2e 31 00 00 00 00 da 0c 00 00     ..Sect.1........
     c9a:	2d 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     -.....Sect.2....
     caa:	da 0c 01 00 2d 1b 00 00 01 00 53 65 63 74 2e 33     ....-.....Sect.3
     cba:	00 00 00 00 da 0c 02 00 2d 1b 00 00 c1 00 53 65     ........-.....Se
     cca:	63 74 2e 34 00 00 00 00 da 0c 03 00 2d 1b 00 00     ct.4........-...

00000cda <menu_midiInVar>:
     cda:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 4e 08     ..Manual......N.
     cea:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     cfa:	00 00 4f 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..O.......Range.
     d0a:	00 00 00 00 00 00 50 08 00 00 00 00 c4 90 4d 61     ......P.......Ma
     d1a:	6e 4e 6f 74 65 00 00 00 00 00 51 08 00 00 00 00     nNote.....Q.....

00000d2a <menu_key>:
     d2a:	81 08 54 61 73 74 65 31 00 00 00 00 b0 04 00 00     ..Taste1........
     d3a:	a6 1b e5 2d 01 08 54 61 73 74 65 32 00 00 00 00     ...-..Taste2....
     d4a:	b0 04 01 00 a6 1b e5 2d 01 08 54 61 73 74 65 33     .......-..Taste3
     d5a:	00 00 00 00 b0 04 02 00 a6 1b e5 2d c1 08 54 61     ...........-..Ta
     d6a:	73 74 65 34 00 00 00 00 b0 04 03 00 a6 1b e5 2d     ste4...........-

00000d7a <menu_tune>:
     d7a:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     d8a:	5c 1c 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     \.... Man.2.....
     d9a:	00 00 01 00 5c 1c 00 00 01 20 4d 61 6e 2e 31 00     ....\.... Man.1.
     daa:	00 00 00 00 00 00 02 00 5c 1c 00 00 c1 20 50 65     ........\.... Pe
     dba:	64 61 6c 00 00 00 00 00 00 00 03 00 5c 1c 00 00     dal.........\...

00000dca <menu_midiOut>:
     dca:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 4e 09     ..III.........N.
     dda:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     dea:	00 00 50 09 00 00 00 00 03 10 49 00 00 00 00 00     ..P.......I.....
     dfa:	00 00 00 00 00 00 52 09 00 00 00 00 03 10 50 00     ......R.......P.
	...
     e12:	00 00 54 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..T.......III(in
     e22:	74 29 00 00 00 00 4f 09 00 00 00 00 03 10 49 49     t)....O.......II
     e32:	28 69 6e 74 29 00 00 00 00 00 51 09 00 00 00 00     (int).....Q.....
     e42:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 53 09     ..I(int)......S.
     e52:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     e62:	00 00 55 09 00 00 00 00                             ..U.....

00000e6a <menu_setup>:
     e6a:	81 00 4d 6f 64 75 6c 65 00 00 00 00 36 10 00 00     ..Module....6...
     e7a:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     e8a:	ce 0e 00 00 00 00 bd 1b 01 00 55 53 42 00 00 00     ..........USB...
     e9a:	00 00 00 00 a6 13 00 00 00 00 00 00 01 00 50 6f     ..............Po
     eaa:	77 65 72 00 00 00 00 00 fa 0f 00 00 00 00 00 00     wer.............
     eba:	c1 00 45 45 70 72 6f 6d 00 00 00 00 be 0f 00 00     ..EEprom........
     eca:	00 00 00 00                                         ....

00000ece <menu_regout>:
     ece:	81 00 53 65 63 74 2e 31 00 00 00 00 6e 0f 00 00     ..Sect.1....n...
     ede:	91 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     eee:	6e 0f 01 00 91 1b 00 00 01 00 53 65 63 74 2e 33     n.........Sect.3
     efe:	00 00 00 00 6e 0f 02 00 91 1b 00 00 01 00 53 65     ....n.........Se
     f0e:	63 74 2e 34 00 00 00 00 6e 0f 03 00 91 1b 00 00     ct.4....n.......
     f1e:	01 00 53 65 63 74 2e 35 00 00 00 00 6e 0f 04 00     ..Sect.5....n...
     f2e:	91 1b 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
     f3e:	6e 0f 05 00 91 1b 00 00 01 00 53 65 63 74 2e 37     n.........Sect.7
     f4e:	00 00 00 00 6e 0f 06 00 91 1b 00 00 c1 00 53 65     ....n.........Se
     f5e:	63 74 2e 38 00 00 00 00 6e 0f 07 00 91 1b 00 00     ct.8....n.......

00000f6e <menu_regoutSec>:
     f6e:	82 80 43 75 72 73 6f 72 00 00 00 00 00 00 00 02     ..Cursor........
     f7e:	00 00 00 00 02 80 43 68 61 72 00 00 00 00 00 00     ......Char......
     f8e:	00 00 01 02 00 00 00 00 0d 80 52 65 67 42 65 67     ..........RegBeg
     f9e:	00 00 00 00 00 00 02 02 00 00 00 00 cd 80 52 65     ..............Re
     fae:	67 45 6e 64 00 00 00 00 00 00 03 02 00 00 00 00     gEnd............

00000fbe <menu_eeprom>:
     fbe:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     fce:	3a 22 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     :"....EEBackup..
     fde:	00 00 00 00 22 22 00 00 c1 00 45 45 52 65 73 74     ....""....EERest
     fee:	6f 72 65 00 00 00 00 00 2e 22 00 00                 ore......"..

00000ffa <menu_Power>:
     ffa:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
    100a:	a9 2e 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     ......PowerOff..
    101a:	00 00 00 00 b2 2e 00 00 c1 00 50 2e 52 65 73 74     ..........P.Rest
    102a:	61 72 74 00 00 00 00 00 ba 2e 00 00                 art.........

00001036 <menu_module>:
    1036:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 78 03     ..ModRead.....x.
    1046:	00 00 99 1d 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
    1056:	00 00 79 03 00 00 99 1d 0a 08 4d 6f 64 4f 4b 00     ..y.......ModOK.
    1066:	00 00 00 00 00 00 6b 02 00 00 00 00 01 00 4d 6f     ......k.......Mo
    1076:	64 54 65 73 74 00 00 00 9a 10 00 00 00 00 00 00     dTest...........
    1086:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 8a 11 00 00     ..ModAssign.....
    1096:	00 00 8f 1d                                         ....

0000109a <menu_ModeSel>:
    109a:	81 00 4d 6f 64 2e 30 00 00 00 00 00 3a 11 00 00     ..Mod.0.....:...
    10aa:	17 1b 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
    10ba:	3a 11 01 00 17 1b 00 00 01 00 4d 6f 64 2e 32 00     :.........Mod.2.
    10ca:	00 00 00 00 3a 11 02 00 17 1b 00 00 01 00 4d 6f     ....:.........Mo
    10da:	64 2e 33 00 00 00 00 00 3a 11 03 00 17 1b 00 00     d.3.....:.......
    10ea:	01 00 4d 6f 64 2e 34 00 00 00 00 00 3a 11 04 00     ..Mod.4.....:...
    10fa:	17 1b 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
    110a:	3a 11 05 00 17 1b 00 00 01 00 4d 6f 64 2e 36 00     :.........Mod.6.
    111a:	00 00 00 00 3a 11 06 00 17 1b 00 00 c1 00 4d 6f     ....:.........Mo
    112a:	64 2e 37 00 00 00 00 00 3a 11 07 00 17 1b 00 00     d.7.....:.......

0000113a <menu_ModTestSelcted>:
    113a:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    114a:	14 1c 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
    115a:	00 00 d3 05 ae 1a ea 1a 01 00 54 65 73 74 50 74     ..........TestPt
    116a:	72 6e 00 00 00 00 00 00 40 2a 00 00 c1 00 4c 6f     rn......@*....Lo
    117a:	6f 70 54 73 74 00 00 00 00 00 00 00 49 1c 00 00     opTst.......I...

0000118a <menu_modAssign>:
    118a:	81 00 4d 61 6e 2e 33 00 00 00 00 00 8e 12 00 00     ..Man.3.........
    119a:	4b 1b 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     K.....Man.2.....
    11aa:	8e 12 01 00 4b 1b 00 00 01 00 4d 61 6e 2e 31 00     ....K.....Man.1.
    11ba:	00 00 00 00 8e 12 02 00 4b 1b 00 00 01 00 50 65     ........K.....Pe
    11ca:	64 61 6c 00 00 00 00 00 8e 12 03 00 4b 1b 00 00     dal.........K...
    11da:	c1 00 52 65 67 69 73 74 65 72 00 00 ee 11 04 00     ..Register......
    11ea:	00 00 00 00                                         ....

000011ee <menu_modSection8>:
    11ee:	81 00 53 65 63 74 2e 31 00 00 00 00 de 12 00 00     ..Sect.1........
    11fe:	7b 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     {.....Sect.2....
    120e:	de 12 01 00 7b 1b 00 00 01 00 53 65 63 74 2e 33     ....{.....Sect.3
    121e:	00 00 00 00 de 12 02 00 7b 1b 00 00 01 00 53 65     ........{.....Se
    122e:	63 74 2e 34 00 00 00 00 de 12 03 00 7b 1b 00 00     ct.4........{...
    123e:	01 00 53 65 63 74 2e 35 00 00 00 00 de 12 04 00     ..Sect.5........
    124e:	7b 1b 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     {.....Sect.6....
    125e:	de 12 05 00 7b 1b 00 00 01 00 53 65 63 74 2e 37     ....{.....Sect.7
    126e:	00 00 00 00 de 12 06 00 7b 1b 00 00 c1 00 53 65     ........{.....Se
    127e:	63 74 2e 38 00 00 00 00 de 12 07 00 7b 1b 00 00     ct.8........{...

0000128e <menu_modSection>:
    128e:	81 00 53 65 63 74 2e 31 00 00 00 00 1a 13 00 00     ..Sect.1........
    129e:	56 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     V.....Sect.2....
    12ae:	1a 13 01 00 56 1b 00 00 01 00 53 65 63 74 2e 33     ....V.....Sect.3
    12be:	00 00 00 00 1a 13 02 00 56 1b 00 00 c1 00 53 65     ........V.....Se
    12ce:	63 74 2e 34 00 00 00 00 1a 13 03 00 56 1b 00 00     ct.4........V...

000012de <menu_modDefineReg>:
    12de:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 1d 08     ..RegBeg........
    12ee:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    12fe:	00 00 1e 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    130e:	2f 42 69 74 00 00 1f 08 00 00 00 00                 /Bit........

0000131a <menu_modDefine>:
    131a:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 5a 09     ..NoteBeg.....Z.
    132a:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    133a:	00 00 5b 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..[.......Module
    134a:	2f 42 69 74 00 00 5c 09 00 00 00 00                 /Bit..\.....

00001356 <menu_status>:
    1356:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1366:	99 28 00 00 01 00 55 53 42 00 00 00 00 00 00 00     .(....USB.......
    1376:	a6 13 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     .........@MIDI-I
    1386:	6e 00 00 00 00 00 00 00 1d 28 00 00 c2 40 4d 49     n........(...@MI
    1396:	44 49 2d 4f 75 74 00 00 00 00 00 00 5b 28 00 00     DI-Out......[(..

000013a6 <menu_USBser>:
    13a6:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 78 16     ..EventLog....x.
    13b6:	00 00 c3 1d 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
    13c6:	00 00 00 00 9d 1d 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
    13d6:	66 67 00 00 00 00 00 00 d7 1d 00 00                 fg..........

000013e2 <sw_version>:
    13e2:	56 30 2e 38 31 00                                   V0.81.

000013e8 <cplInfo>:
    13e8:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    13f8:	01 02 00 03 01 03 02 03                             ........

00001400 <keylabel_1>:
    1400:	31 00                                               1.

00001402 <keylabel_0>:
    1402:	30 00                                               0.

00001404 <keylabel_text>:
    1404:	54 65 78 74 80 00                                   Text..

0000140a <keylabel_exit>:
    140a:	45 78 69 74 00                                      Exit.

0000140f <keylabel_off>:
    140f:	7e 61 75 73 00                                      ~aus.

00001414 <keylabel_on>:
    1414:	7e 65 69 6e 00                                      ~ein.

00001419 <keylabel_onoff>:
    1419:	45 69 6e 80 00                                      Ein..

0000141e <keylabel_minus>:
    141e:	2d 00                                               -.

00001420 <keylabel_plus>:
    1420:	2b 00                                               +.

00001422 <keylabel_left>:
    1422:	7f 00                                               ..

00001424 <keylabel_right>:
    1424:	7e 00                                               ~.

00001426 <keylabel_down>:
    1426:	09 00                                               ..

00001428 <keylabel_up>:
    1428:	08 00                                               ..

0000142a <cr_lf>:
    142a:	0d 0a 00 00                                         ....

0000142e <__ctors_end>:
    142e:	11 24       	eor	r1, r1
    1430:	1f be       	out	0x3f, r1	; 63
    1432:	cf ef       	ldi	r28, 0xFF	; 255
    1434:	d1 e2       	ldi	r29, 0x21	; 33
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	00 e0       	ldi	r16, 0x00	; 0
    143c:	0c bf       	out	0x3c, r16	; 60

0000143e <__do_copy_data>:
    143e:	12 e0       	ldi	r17, 0x02	; 2
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b2 e0       	ldi	r27, 0x02	; 2
    1444:	e6 e7       	ldi	r30, 0x76	; 118
    1446:	fe e7       	ldi	r31, 0x7E	; 126
    1448:	00 e0       	ldi	r16, 0x00	; 0
    144a:	0b bf       	out	0x3b, r16	; 59
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <__do_copy_data+0x14>
    144e:	07 90       	elpm	r0, Z+
    1450:	0d 92       	st	X+, r0
    1452:	a8 32       	cpi	r26, 0x28	; 40
    1454:	b1 07       	cpc	r27, r17
    1456:	d9 f7       	brne	.-10     	; 0x144e <__do_copy_data+0x10>

00001458 <__do_clear_bss>:
    1458:	29 e1       	ldi	r18, 0x19	; 25
    145a:	a8 e2       	ldi	r26, 0x28	; 40
    145c:	b2 e0       	ldi	r27, 0x02	; 2
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <.do_clear_bss_start>

00001460 <.do_clear_bss_loop>:
    1460:	1d 92       	st	X+, r1

00001462 <.do_clear_bss_start>:
    1462:	a6 34       	cpi	r26, 0x46	; 70
    1464:	b2 07       	cpc	r27, r18
    1466:	e1 f7       	brne	.-8      	; 0x1460 <.do_clear_bss_loop>
    1468:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <main>
    146c:	0c 94 39 3f 	jmp	0x7e72	; 0x7e72 <_exit>

00001470 <__bad_interrupt>:
    1470:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001474 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    1474:	fc 01       	movw	r30, r24
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	1c c0       	rjmp	.+56     	; 0x14b4 <crc16_ram+0x40>
    147c:	df 01       	movw	r26, r30
    147e:	11 96       	adiw	r26, 0x01	; 1
    1480:	20 81       	ld	r18, Z
    1482:	82 27       	eor	r24, r18
    1484:	28 2f       	mov	r18, r24
    1486:	22 95       	swap	r18
    1488:	28 27       	eor	r18, r24
    148a:	02 2e       	mov	r0, r18
    148c:	26 95       	lsr	r18
    148e:	26 95       	lsr	r18
    1490:	20 25       	eor	r18, r0
    1492:	02 2e       	mov	r0, r18
    1494:	26 95       	lsr	r18
    1496:	20 25       	eor	r18, r0
    1498:	27 70       	andi	r18, 0x07	; 7
    149a:	08 2e       	mov	r0, r24
    149c:	89 2f       	mov	r24, r25
    149e:	26 95       	lsr	r18
    14a0:	07 94       	ror	r0
    14a2:	27 95       	ror	r18
    14a4:	90 2d       	mov	r25, r0
    14a6:	82 27       	eor	r24, r18
    14a8:	06 94       	lsr	r0
    14aa:	27 95       	ror	r18
    14ac:	90 25       	eor	r25, r0
    14ae:	82 27       	eor	r24, r18
    14b0:	ba 01       	movw	r22, r20
    14b2:	fd 01       	movw	r30, r26
    14b4:	ab 01       	movw	r20, r22
    14b6:	41 50       	subi	r20, 0x01	; 1
    14b8:	51 09       	sbc	r21, r1
    14ba:	67 2b       	or	r22, r23
    14bc:	f9 f6       	brne	.-66     	; 0x147c <crc16_ram+0x8>
    14be:	08 95       	ret

000014c0 <crc16_eeprom>:
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cf ef       	ldi	r28, 0xFF	; 255
    14ce:	df ef       	ldi	r29, 0xFF	; 255
    14d0:	21 c0       	rjmp	.+66     	; 0x1514 <crc16_eeprom+0x54>
    14d2:	7c 01       	movw	r14, r24
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	e2 1a       	sub	r14, r18
    14d8:	f2 0a       	sbc	r15, r18
    14da:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    14de:	9e 01       	movw	r18, r28
    14e0:	28 27       	eor	r18, r24
    14e2:	82 2f       	mov	r24, r18
    14e4:	82 95       	swap	r24
    14e6:	82 27       	eor	r24, r18
    14e8:	08 2e       	mov	r0, r24
    14ea:	86 95       	lsr	r24
    14ec:	86 95       	lsr	r24
    14ee:	80 25       	eor	r24, r0
    14f0:	08 2e       	mov	r0, r24
    14f2:	86 95       	lsr	r24
    14f4:	80 25       	eor	r24, r0
    14f6:	87 70       	andi	r24, 0x07	; 7
    14f8:	02 2e       	mov	r0, r18
    14fa:	23 2f       	mov	r18, r19
    14fc:	86 95       	lsr	r24
    14fe:	07 94       	ror	r0
    1500:	87 95       	ror	r24
    1502:	30 2d       	mov	r19, r0
    1504:	28 27       	eor	r18, r24
    1506:	06 94       	lsr	r0
    1508:	87 95       	ror	r24
    150a:	30 25       	eor	r19, r0
    150c:	28 27       	eor	r18, r24
    150e:	e9 01       	movw	r28, r18
    1510:	b8 01       	movw	r22, r16
    1512:	c7 01       	movw	r24, r14
    1514:	8b 01       	movw	r16, r22
    1516:	01 50       	subi	r16, 0x01	; 1
    1518:	11 09       	sbc	r17, r1
    151a:	67 2b       	or	r22, r23
    151c:	d1 f6       	brne	.-76     	; 0x14d2 <crc16_eeprom+0x12>
    151e:	ce 01       	movw	r24, r28
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	08 95       	ret

0000152e <crc16_ram_startVal>:
    152e:	fc 01       	movw	r30, r24
    1530:	ca 01       	movw	r24, r20
    1532:	1c c0       	rjmp	.+56     	; 0x156c <crc16_ram_startVal+0x3e>
    1534:	df 01       	movw	r26, r30
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	20 81       	ld	r18, Z
    153a:	82 27       	eor	r24, r18
    153c:	28 2f       	mov	r18, r24
    153e:	22 95       	swap	r18
    1540:	28 27       	eor	r18, r24
    1542:	02 2e       	mov	r0, r18
    1544:	26 95       	lsr	r18
    1546:	26 95       	lsr	r18
    1548:	20 25       	eor	r18, r0
    154a:	02 2e       	mov	r0, r18
    154c:	26 95       	lsr	r18
    154e:	20 25       	eor	r18, r0
    1550:	27 70       	andi	r18, 0x07	; 7
    1552:	08 2e       	mov	r0, r24
    1554:	89 2f       	mov	r24, r25
    1556:	26 95       	lsr	r18
    1558:	07 94       	ror	r0
    155a:	27 95       	ror	r18
    155c:	90 2d       	mov	r25, r0
    155e:	82 27       	eor	r24, r18
    1560:	06 94       	lsr	r0
    1562:	27 95       	ror	r18
    1564:	90 25       	eor	r25, r0
    1566:	82 27       	eor	r24, r18
    1568:	ba 01       	movw	r22, r20
    156a:	fd 01       	movw	r30, r26
    156c:	ab 01       	movw	r20, r22
    156e:	41 50       	subi	r20, 0x01	; 1
    1570:	51 09       	sbc	r21, r1
    1572:	67 2b       	or	r22, r23
    1574:	f9 f6       	brne	.-66     	; 0x1534 <crc16_ram_startVal+0x6>
    1576:	08 95       	ret

00001578 <crc16_eeprom_startVal>:
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ea 01       	movw	r28, r20
    1586:	21 c0       	rjmp	.+66     	; 0x15ca <crc16_eeprom_startVal+0x52>
    1588:	7c 01       	movw	r14, r24
    158a:	2f ef       	ldi	r18, 0xFF	; 255
    158c:	e2 1a       	sub	r14, r18
    158e:	f2 0a       	sbc	r15, r18
    1590:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    1594:	ae 01       	movw	r20, r28
    1596:	48 27       	eor	r20, r24
    1598:	84 2f       	mov	r24, r20
    159a:	82 95       	swap	r24
    159c:	84 27       	eor	r24, r20
    159e:	08 2e       	mov	r0, r24
    15a0:	86 95       	lsr	r24
    15a2:	86 95       	lsr	r24
    15a4:	80 25       	eor	r24, r0
    15a6:	08 2e       	mov	r0, r24
    15a8:	86 95       	lsr	r24
    15aa:	80 25       	eor	r24, r0
    15ac:	87 70       	andi	r24, 0x07	; 7
    15ae:	04 2e       	mov	r0, r20
    15b0:	45 2f       	mov	r20, r21
    15b2:	86 95       	lsr	r24
    15b4:	07 94       	ror	r0
    15b6:	87 95       	ror	r24
    15b8:	50 2d       	mov	r21, r0
    15ba:	48 27       	eor	r20, r24
    15bc:	06 94       	lsr	r0
    15be:	87 95       	ror	r24
    15c0:	50 25       	eor	r21, r0
    15c2:	48 27       	eor	r20, r24
    15c4:	ea 01       	movw	r28, r20
    15c6:	b8 01       	movw	r22, r16
    15c8:	c7 01       	movw	r24, r14
    15ca:	8b 01       	movw	r16, r22
    15cc:	01 50       	subi	r16, 0x01	; 1
    15ce:	11 09       	sbc	r17, r1
    15d0:	67 2b       	or	r22, r23
    15d2:	d1 f6       	brne	.-76     	; 0x1588 <crc16_eeprom_startVal+0x10>
    15d4:	ce 01       	movw	r24, r28
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	08 95       	ret

000015e4 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    15e8:	82 e3       	ldi	r24, 0x32	; 50
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    15f0:	ec 01       	movw	r28, r24
    15f2:	60 e3       	ldi	r22, 0x30	; 48
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	62 df       	rcall	.-316    	; 0x14c0 <crc16_eeprom>
    15fc:	c8 17       	cp	r28, r24
    15fe:	d9 07       	cpc	r29, r25
    1600:	81 f4       	brne	.+32     	; 0x1622 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    160a:	8d 34       	cpi	r24, 0x4D	; 77
    160c:	51 f4       	brne	.+20     	; 0x1622 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    160e:	40 e3       	ldi	r20, 0x30	; 48
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	8a e5       	ldi	r24, 0x5A	; 90
    1618:	99 e0       	ldi	r25, 0x09	; 9
    161a:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return (EE_LOAD_OK);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	06 c0       	rjmp	.+12     	; 0x162e <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    1622:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    162c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    1638:	85 e3       	ldi	r24, 0x35	; 53
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    1640:	ec 01       	movw	r28, r24
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	71 e0       	ldi	r23, 0x01	; 1
    1646:	85 e3       	ldi	r24, 0x35	; 53
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	3a df       	rcall	.-396    	; 0x14c0 <crc16_eeprom>
    164c:	c8 17       	cp	r28, r24
    164e:	d9 07       	cpc	r29, r25
    1650:	81 f4       	brne	.+32     	; 0x1672 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1652:	84 e3       	ldi	r24, 0x34	; 52
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    165a:	89 34       	cpi	r24, 0x49	; 73
    165c:	51 f4       	brne	.+20     	; 0x1672 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	51 e0       	ldi	r21, 0x01	; 1
    1662:	65 e3       	ldi	r22, 0x35	; 53
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	8e e4       	ldi	r24, 0x4E	; 78
    1668:	98 e0       	ldi	r25, 0x08	; 8
    166a:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return (EE_LOAD_OK);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	06 c0       	rjmp	.+12     	; 0x167e <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1672:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    167c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    1688:	83 e4       	ldi	r24, 0x43	; 67
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    1690:	ec 01       	movw	r28, r24
    1692:	6b e0       	ldi	r22, 0x0B	; 11
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	88 e3       	ldi	r24, 0x38	; 56
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	12 df       	rcall	.-476    	; 0x14c0 <crc16_eeprom>
    169c:	c8 17       	cp	r28, r24
    169e:	d9 07       	cpc	r29, r25
    16a0:	c1 f4       	brne	.+48     	; 0x16d2 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    16a2:	87 e3       	ldi	r24, 0x37	; 55
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    16aa:	8f 34       	cpi	r24, 0x4F	; 79
    16ac:	91 f4       	brne	.+36     	; 0x16d2 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    16ae:	48 e0       	ldi	r20, 0x08	; 8
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	68 e3       	ldi	r22, 0x38	; 56
    16b4:	71 e0       	ldi	r23, 0x01	; 1
    16b6:	8e e4       	ldi	r24, 0x4E	; 78
    16b8:	99 e0       	ldi	r25, 0x09	; 9
    16ba:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    16be:	43 e0       	ldi	r20, 0x03	; 3
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	60 e4       	ldi	r22, 0x40	; 64
    16c4:	71 e0       	ldi	r23, 0x01	; 1
    16c6:	86 e5       	ldi	r24, 0x56	; 86
    16c8:	99 e0       	ldi	r25, 0x09	; 9
    16ca:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return (EE_LOAD_OK);
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    16d2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    16d6:	84 60       	ori	r24, 0x04	; 4
    16d8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    16e8:	88 e4       	ldi	r24, 0x48	; 72
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    16f0:	ec 01       	movw	r28, r24
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	86 e4       	ldi	r24, 0x46	; 70
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	e2 de       	rcall	.-572    	; 0x14c0 <crc16_eeprom>
    16fc:	c8 17       	cp	r28, r24
    16fe:	d9 07       	cpc	r29, r25
    1700:	a1 f4       	brne	.+40     	; 0x172a <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    1702:	85 e4       	ldi	r24, 0x45	; 69
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    170a:	89 36       	cpi	r24, 0x69	; 105
    170c:	71 f4       	brne	.+28     	; 0x172a <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    170e:	86 e4       	ldi	r24, 0x46	; 70
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    1716:	c8 e7       	ldi	r28, 0x78	; 120
    1718:	d3 e0       	ldi	r29, 0x03	; 3
    171a:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    171c:	87 e4       	ldi	r24, 0x47	; 71
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    1724:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    172a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    172e:	88 60       	ori	r24, 0x08	; 8
    1730:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1734:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1740:	87 ef       	ldi	r24, 0xF7	; 247
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    1748:	ec 01       	movw	r28, r24
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	85 ef       	ldi	r24, 0xF5	; 245
    1750:	93 e0       	ldi	r25, 0x03	; 3
    1752:	b6 de       	rcall	.-660    	; 0x14c0 <crc16_eeprom>
    1754:	c8 17       	cp	r28, r24
    1756:	d9 07       	cpc	r29, r25
    1758:	81 f4       	brne	.+32     	; 0x177a <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    175a:	84 ef       	ldi	r24, 0xF4	; 244
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    1762:	84 35       	cpi	r24, 0x54	; 84
    1764:	51 f4       	brne	.+20     	; 0x177a <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    1766:	42 e0       	ldi	r20, 0x02	; 2
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	65 ef       	ldi	r22, 0xF5	; 245
    176c:	73 e0       	ldi	r23, 0x03	; 3
    176e:	8c e4       	ldi	r24, 0x4C	; 76
    1770:	98 e0       	ldi	r25, 0x08	; 8
    1772:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return (EE_LOAD_OK);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    177a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    177e:	82 60       	ori	r24, 0x02	; 2
    1780:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1784:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1790:	8c e4       	ldi	r24, 0x4C	; 76
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    1798:	ec 01       	movw	r28, r24
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	8b e4       	ldi	r24, 0x4B	; 75
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	8e de       	rcall	.-740    	; 0x14c0 <crc16_eeprom>
    17a4:	c8 17       	cp	r28, r24
    17a6:	d9 07       	cpc	r29, r25
    17a8:	71 f4       	brne	.+28     	; 0x17c6 <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    17aa:	8a e4       	ldi	r24, 0x4A	; 74
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    17b2:	85 35       	cpi	r24, 0x55	; 85
    17b4:	41 f4       	brne	.+16     	; 0x17c6 <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    17b6:	8b e4       	ldi	r24, 0x4B	; 75
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    17be:	80 93 78 16 	sts	0x1678, r24	; 0x801678 <serUSB_Active>
		return (EE_LOAD_OK);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    17c6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    17ca:	88 60       	ori	r24, 0x08	; 8
    17cc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	08 95       	ret

000017d8 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	8f e4       	ldi	r24, 0x4F	; 79
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	6d de       	rcall	.-806    	; 0x14c0 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    17e6:	ac 01       	movw	r20, r24
    17e8:	68 e1       	ldi	r22, 0x18	; 24
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	80 e5       	ldi	r24, 0x50	; 80
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	c3 de       	rcall	.-634    	; 0x1578 <crc16_eeprom_startVal>
    17f2:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    17f4:	88 e6       	ldi	r24, 0x68	; 104
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    17fc:	c8 17       	cp	r28, r24
    17fe:	d9 07       	cpc	r29, r25
    1800:	b1 f4       	brne	.+44     	; 0x182e <eeprom_ReadReg+0x56>
    1802:	8e e4       	ldi	r24, 0x4E	; 78
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    180a:	82 35       	cpi	r24, 0x52	; 82
    180c:	81 f4       	brne	.+32     	; 0x182e <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    180e:	8f e4       	ldi	r24, 0x4F	; 79
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    1816:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    181a:	48 e1       	ldi	r20, 0x18	; 24
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	60 e5       	ldi	r22, 0x50	; 80
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	8d e1       	ldi	r24, 0x1D	; 29
    1824:	98 e0       	ldi	r25, 0x08	; 8
    1826:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return(EE_LOAD_OK);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	06 c0       	rjmp	.+12     	; 0x183a <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    182e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1832:	80 62       	ori	r24, 0x20	; 32
    1834:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1838:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    1844:	8b ee       	ldi	r24, 0xEB	; 235
    1846:	93 e0       	ldi	r25, 0x03	; 3
    1848:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    184c:	ec 01       	movw	r28, r24
    184e:	60 e8       	ldi	r22, 0x80	; 128
    1850:	72 e0       	ldi	r23, 0x02	; 2
    1852:	8b e6       	ldi	r24, 0x6B	; 107
    1854:	91 e0       	ldi	r25, 0x01	; 1
    1856:	34 de       	rcall	.-920    	; 0x14c0 <crc16_eeprom>
    1858:	c8 17       	cp	r28, r24
    185a:	d9 07       	cpc	r29, r25
    185c:	81 f4       	brne	.+32     	; 0x187e <eeprom_ReadProg+0x3e>
    185e:	8a e6       	ldi	r24, 0x6A	; 106
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    1866:	80 35       	cpi	r24, 0x50	; 80
    1868:	51 f4       	brne	.+20     	; 0x187e <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	52 e0       	ldi	r21, 0x02	; 2
    186e:	6b e6       	ldi	r22, 0x6B	; 107
    1870:	71 e0       	ldi	r23, 0x01	; 1
    1872:	8a e8       	ldi	r24, 0x8A	; 138
    1874:	99 e0       	ldi	r25, 0x09	; 9
    1876:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return(EE_LOAD_OK);
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	06 c0       	rjmp	.+12     	; 0x188a <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    187e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1882:	80 64       	ori	r24, 0x40	; 64
    1884:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1888:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    1894:	82 ef       	ldi	r24, 0xF2	; 242
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    189c:	ec 01       	movw	r28, r24
    189e:	64 e0       	ldi	r22, 0x04	; 4
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	8e ee       	ldi	r24, 0xEE	; 238
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	0c de       	rcall	.-1000   	; 0x14c0 <crc16_eeprom>
    18a8:	c8 17       	cp	r28, r24
    18aa:	d9 07       	cpc	r29, r25
    18ac:	51 f4       	brne	.+20     	; 0x18c2 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    18ae:	44 e0       	ldi	r20, 0x04	; 4
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	6e ee       	ldi	r22, 0xEE	; 238
    18b4:	73 e0       	ldi	r23, 0x03	; 3
    18b6:	89 ed       	ldi	r24, 0xD9	; 217
    18b8:	95 e0       	ldi	r25, 0x05	; 5
    18ba:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return(EE_LOAD_OK);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    18c2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    18c6:	80 68       	ori	r24, 0x80	; 128
    18c8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <eeprom_ReadRegOut>:

uint8_t eeprom_ReadRegOut(){
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.regOut_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.reg_Out, sizeof (reg_Out)))){
    18d8:	8a e1       	ldi	r24, 0x1A	; 26
    18da:	94 e0       	ldi	r25, 0x04	; 4
    18dc:	0e 94 0f 3f 	call	0x7e1e	; 0x7e1e <eeprom_read_word>
    18e0:	ec 01       	movw	r28, r24
    18e2:	60 e2       	ldi	r22, 0x20	; 32
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	8a ef       	ldi	r24, 0xFA	; 250
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	ea dd       	rcall	.-1068   	; 0x14c0 <crc16_eeprom>
    18ec:	c8 17       	cp	r28, r24
    18ee:	d9 07       	cpc	r29, r25
    18f0:	51 f4       	brne	.+20     	; 0x1906 <eeprom_ReadRegOut+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof (ee.eeData.ee.reg_Out));
    18f2:	40 e2       	ldi	r20, 0x20	; 32
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	6a ef       	ldi	r22, 0xFA	; 250
    18f8:	73 e0       	ldi	r23, 0x03	; 3
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	0e 94 f7 3e 	call	0x7dee	; 0x7dee <eeprom_read_block>
		return(EE_LOAD_OK);
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	06 c0       	rjmp	.+12     	; 0x1912 <eeprom_ReadRegOut+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    1906:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    190a:	80 62       	ori	r24, 0x20	; 32
    190c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1910:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1922:	65 e6       	ldi	r22, 0x65	; 101
    1924:	8c e1       	ldi	r24, 0x1C	; 28
    1926:	94 e0       	ldi	r25, 0x04	; 4
    1928:	0c 94 23 3f 	jmp	0x7e46	; 0x7e46 <eeprom_update_byte>
    192c:	08 95       	ret

0000192e <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1932:	60 e3       	ldi	r22, 0x30	; 48
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	8a e5       	ldi	r24, 0x5A	; 90
    1938:	99 e0       	ldi	r25, 0x09	; 9
    193a:	9c dd       	rcall	.-1224   	; 0x1474 <crc16_ram>
    193c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    193e:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1942:	6d e4       	ldi	r22, 0x4D	; 77
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    194c:	40 e3       	ldi	r20, 0x30	; 48
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	8a e5       	ldi	r24, 0x5A	; 90
    1956:	99 e0       	ldi	r25, 0x09	; 9
    1958:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    195c:	be 01       	movw	r22, r28
    195e:	82 e3       	ldi	r24, 0x32	; 50
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1966:	d8 df       	rcall	.-80     	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1968:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	71 e0       	ldi	r23, 0x01	; 1
    197a:	8e e4       	ldi	r24, 0x4E	; 78
    197c:	98 e0       	ldi	r25, 0x08	; 8
    197e:	7a dd       	rcall	.-1292   	; 0x1474 <crc16_ram>
    1980:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1982:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1986:	69 e4       	ldi	r22, 0x49	; 73
    1988:	84 e3       	ldi	r24, 0x34	; 52
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	51 e0       	ldi	r21, 0x01	; 1
    1994:	65 e3       	ldi	r22, 0x35	; 53
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	8e e4       	ldi	r24, 0x4E	; 78
    199a:	98 e0       	ldi	r25, 0x08	; 8
    199c:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    19a0:	be 01       	movw	r22, r28
    19a2:	85 e3       	ldi	r24, 0x35	; 53
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    19aa:	b6 df       	rcall	.-148    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    19ac:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    19ba:	68 e0       	ldi	r22, 0x08	; 8
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	8e e4       	ldi	r24, 0x4E	; 78
    19c0:	99 e0       	ldi	r25, 0x09	; 9
    19c2:	58 dd       	rcall	.-1360   	; 0x1474 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    19c4:	ac 01       	movw	r20, r24
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	86 e5       	ldi	r24, 0x56	; 86
    19cc:	99 e0       	ldi	r25, 0x09	; 9
    19ce:	af dd       	rcall	.-1186   	; 0x152e <crc16_ram_startVal>
    19d0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19d2:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    19d6:	6f e4       	ldi	r22, 0x4F	; 79
    19d8:	87 e3       	ldi	r24, 0x37	; 55
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    19e0:	48 e0       	ldi	r20, 0x08	; 8
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	68 e3       	ldi	r22, 0x38	; 56
    19e6:	71 e0       	ldi	r23, 0x01	; 1
    19e8:	8e e4       	ldi	r24, 0x4E	; 78
    19ea:	99 e0       	ldi	r25, 0x09	; 9
    19ec:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    19f0:	43 e0       	ldi	r20, 0x03	; 3
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	60 e4       	ldi	r22, 0x40	; 64
    19f6:	71 e0       	ldi	r23, 0x01	; 1
    19f8:	86 e5       	ldi	r24, 0x56	; 86
    19fa:	99 e0       	ldi	r25, 0x09	; 9
    19fc:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1a00:	be 01       	movw	r22, r28
    1a02:	83 e4       	ldi	r24, 0x43	; 67
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1a0a:	86 df       	rcall	.-244    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a0c:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	88 e7       	ldi	r24, 0x78	; 120
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	26 dd       	rcall	.-1460   	; 0x1474 <crc16_ram>
    1a28:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    1a2a:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    1a2e:	69 e6       	ldi	r22, 0x69	; 105
    1a30:	85 e4       	ldi	r24, 0x45	; 69
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    1a38:	c8 e7       	ldi	r28, 0x78	; 120
    1a3a:	d3 e0       	ldi	r29, 0x03	; 3
    1a3c:	68 81       	ld	r22, Y
    1a3e:	86 e4       	ldi	r24, 0x46	; 70
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    1a46:	69 81       	ldd	r22, Y+1	; 0x01
    1a48:	87 e4       	ldi	r24, 0x47	; 71
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1a50:	b8 01       	movw	r22, r16
    1a52:	88 e4       	ldi	r24, 0x48	; 72
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1a5a:	5e df       	rcall	.-324    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a5c:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	88 e7       	ldi	r24, 0x78	; 120
    1a74:	96 e1       	ldi	r25, 0x16	; 22
    1a76:	fe dc       	rcall	.-1540   	; 0x1474 <crc16_ram>
    1a78:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a7a:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1a7e:	65 e5       	ldi	r22, 0x55	; 85
    1a80:	8a e4       	ldi	r24, 0x4A	; 74
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1a88:	60 91 78 16 	lds	r22, 0x1678	; 0x801678 <serUSB_Active>
    1a8c:	8b e4       	ldi	r24, 0x4B	; 75
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1a94:	be 01       	movw	r22, r28
    1a96:	8c e4       	ldi	r24, 0x4C	; 76
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1a9e:	3c df       	rcall	.-392    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1aa0:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	8c e4       	ldi	r24, 0x4C	; 76
    1ab4:	98 e0       	ldi	r25, 0x08	; 8
    1ab6:	de dc       	rcall	.-1604   	; 0x1474 <crc16_ram>
    1ab8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1aba:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1abe:	64 e5       	ldi	r22, 0x54	; 84
    1ac0:	84 ef       	ldi	r24, 0xF4	; 244
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1ac8:	42 e0       	ldi	r20, 0x02	; 2
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	65 ef       	ldi	r22, 0xF5	; 245
    1ace:	73 e0       	ldi	r23, 0x03	; 3
    1ad0:	8c e4       	ldi	r24, 0x4C	; 76
    1ad2:	98 e0       	ldi	r25, 0x08	; 8
    1ad4:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1ad8:	be 01       	movw	r22, r28
    1ada:	87 ef       	ldi	r24, 0xF7	; 247
    1adc:	93 e0       	ldi	r25, 0x03	; 3
    1ade:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1ae2:	1a df       	rcall	.-460    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1ae4:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	86 e3       	ldi	r24, 0x36	; 54
    1af8:	98 e0       	ldi	r25, 0x08	; 8
    1afa:	bc dc       	rcall	.-1672   	; 0x1474 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1afc:	ac 01       	movw	r20, r24
    1afe:	68 e1       	ldi	r22, 0x18	; 24
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	8d e1       	ldi	r24, 0x1D	; 29
    1b04:	98 e0       	ldi	r25, 0x08	; 8
    1b06:	13 dd       	rcall	.-1498   	; 0x152e <crc16_ram_startVal>
    1b08:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b0a:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1b0e:	62 e5       	ldi	r22, 0x52	; 82
    1b10:	8e e4       	ldi	r24, 0x4E	; 78
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1b18:	60 91 36 08 	lds	r22, 0x0836	; 0x800836 <registerCount>
    1b1c:	8f e4       	ldi	r24, 0x4F	; 79
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1b24:	48 e1       	ldi	r20, 0x18	; 24
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	60 e5       	ldi	r22, 0x50	; 80
    1b2a:	71 e0       	ldi	r23, 0x01	; 1
    1b2c:	8d e1       	ldi	r24, 0x1D	; 29
    1b2e:	98 e0       	ldi	r25, 0x08	; 8
    1b30:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1b34:	be 01       	movw	r22, r28
    1b36:	88 e6       	ldi	r24, 0x68	; 104
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1b3e:	ec de       	rcall	.-552    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b40:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1b4e:	60 e8       	ldi	r22, 0x80	; 128
    1b50:	72 e0       	ldi	r23, 0x02	; 2
    1b52:	8a e8       	ldi	r24, 0x8A	; 138
    1b54:	99 e0       	ldi	r25, 0x09	; 9
    1b56:	8e dc       	rcall	.-1764   	; 0x1474 <crc16_ram>
    1b58:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b5a:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1b5e:	60 e5       	ldi	r22, 0x50	; 80
    1b60:	8a e6       	ldi	r24, 0x6A	; 106
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	52 e0       	ldi	r21, 0x02	; 2
    1b6c:	6b e6       	ldi	r22, 0x6B	; 107
    1b6e:	71 e0       	ldi	r23, 0x01	; 1
    1b70:	8a e8       	ldi	r24, 0x8A	; 138
    1b72:	99 e0       	ldi	r25, 0x09	; 9
    1b74:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1b78:	be 01       	movw	r22, r28
    1b7a:	8b ee       	ldi	r24, 0xEB	; 235
    1b7c:	93 e0       	ldi	r25, 0x03	; 3
    1b7e:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1b82:	ca de       	rcall	.-620    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b84:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1b92:	64 e0       	ldi	r22, 0x04	; 4
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	89 ed       	ldi	r24, 0xD9	; 217
    1b98:	95 e0       	ldi	r25, 0x05	; 5
    1b9a:	6c dc       	rcall	.-1832   	; 0x1474 <crc16_ram>
    1b9c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b9e:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1ba2:	6b e4       	ldi	r22, 0x4B	; 75
    1ba4:	8d ee       	ldi	r24, 0xED	; 237
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1bac:	44 e0       	ldi	r20, 0x04	; 4
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	6e ee       	ldi	r22, 0xEE	; 238
    1bb2:	73 e0       	ldi	r23, 0x03	; 3
    1bb4:	89 ed       	ldi	r24, 0xD9	; 217
    1bb6:	95 e0       	ldi	r25, 0x05	; 5
    1bb8:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1bbc:	be 01       	movw	r22, r28
    1bbe:	82 ef       	ldi	r24, 0xF2	; 242
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1bc6:	a8 de       	rcall	.-688    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1bc8:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <eeprom_UpdateRegOut>:

void eeprom_UpdateRegOut(){
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) reg_Out, sizeof(reg_Out));
    1bd6:	60 e2       	ldi	r22, 0x20	; 32
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	4a dc       	rcall	.-1900   	; 0x1474 <crc16_ram>
    1be0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1be2:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charRegOut), EE_CHAR_REGOUT);
    1be6:	62 e7       	ldi	r22, 0x72	; 114
    1be8:	89 ef       	ldi	r24, 0xF9	; 249
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof(reg_Out));
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	6a ef       	ldi	r22, 0xFA	; 250
    1bf6:	73 e0       	ldi	r23, 0x03	; 3
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.regOut_crc), crc);
    1c00:	be 01       	movw	r22, r28
    1c02:	8a e1       	ldi	r24, 0x1A	; 26
    1c04:	94 e0       	ldi	r25, 0x04	; 4
    1c06:	0e 94 35 3f 	call	0x7e6a	; 0x7e6a <eeprom_update_word>
	eepromWriteSignature();
    1c0a:	86 de       	rcall	.-756    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c0c:	0e 94 2f 3e 	call	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1c16:	8b de       	rcall	.-746    	; 0x192e <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1c18:	ac de       	rcall	.-680    	; 0x1972 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1c1a:	cd de       	rcall	.-614    	; 0x19b6 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1c1c:	fc de       	rcall	.-520    	; 0x1a16 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1c1e:	25 df       	rcall	.-438    	; 0x1a6a <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1c20:	66 df       	rcall	.-308    	; 0x1aee <eeprom_UpdateReg>
    1c22:	93 df       	rcall	.-218    	; 0x1b4a <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1c24:	b4 df       	rcall	.-152    	; 0x1b8e <eeprom_UpdateSoftkeys>
    1c26:	41 df       	rcall	.-382    	; 0x1aaa <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1c28:	d4 cf       	rjmp	.-88     	; 0x1bd2 <eeprom_UpdateRegOut>
    1c2a:	08 95       	ret

00001c2c <eepromCopy>:
	eeprom_UpdateMidiThrough();
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
	eeprom_UpdateRegOut();
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1c3e:	11 c0       	rjmp	.+34     	; 0x1c62 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1c40:	7c 01       	movw	r14, r24
    1c42:	2f ef       	ldi	r18, 0xFF	; 255
    1c44:	e2 1a       	sub	r14, r18
    1c46:	f2 0a       	sbc	r15, r18
    1c48:	0e 94 07 3f 	call	0x7e0e	; 0x7e0e <eeprom_read_byte>
    1c4c:	6e 01       	movw	r12, r28
    1c4e:	9f ef       	ldi	r25, 0xFF	; 255
    1c50:	c9 1a       	sub	r12, r25
    1c52:	d9 0a       	sbc	r13, r25
    1c54:	68 2f       	mov	r22, r24
    1c56:	ce 01       	movw	r24, r28
    1c58:	0e 94 23 3f 	call	0x7e46	; 0x7e46 <eeprom_update_byte>
	eeprom_UpdateRegOut();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1c5c:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1c5e:	e6 01       	movw	r28, r12
    1c60:	c7 01       	movw	r24, r14
	eeprom_UpdateRegOut();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1c62:	8a 01       	movw	r16, r20
    1c64:	01 50       	subi	r16, 0x01	; 1
    1c66:	11 09       	sbc	r17, r1
    1c68:	45 2b       	or	r20, r21
    1c6a:	51 f7       	brne	.-44     	; 0x1c40 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	08 95       	ret

00001c7e <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1c7e:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	58 e0       	ldi	r21, 0x08	; 8
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	78 e0       	ldi	r23, 0x08	; 8
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	ce df       	rcall	.-100    	; 0x1c2c <eepromCopy>
	lcd_waitSymbolOff();
    1c90:	0c 94 2f 3e 	jmp	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
    1c94:	08 95       	ret

00001c96 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1c96:	0e 94 21 3e 	call	0x7c42	; 0x7c42 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	58 e0       	ldi	r21, 0x08	; 8
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	98 e0       	ldi	r25, 0x08	; 8
    1ca6:	c2 df       	rcall	.-124    	; 0x1c2c <eepromCopy>
	lcd_waitSymbolOff();
    1ca8:	0c 94 2f 3e 	jmp	0x7c5e	; 0x7c5e <lcd_waitSymbolOff>
    1cac:	08 95       	ret

00001cae <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	0a c0       	rjmp	.+20     	; 0x1cc6 <init_Timers+0x18>
    1cb2:	e8 2f       	mov	r30, r24
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	e0 5b       	subi	r30, 0xB0	; 176
    1cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cbe:	9f ef       	ldi	r25, 0xFF	; 255
    1cc0:	90 83       	st	Z, r25
    1cc2:	11 82       	std	Z+1, r1	; 0x01
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	8a 30       	cpi	r24, 0x0A	; 10
    1cc8:	a0 f3       	brcs	.-24     	; 0x1cb2 <init_Timers+0x4>
    1cca:	e4 e6       	ldi	r30, 0x64	; 100
    1ccc:	f2 e0       	ldi	r31, 0x02	; 2
    1cce:	10 82       	st	Z, r1
    1cd0:	11 82       	std	Z+1, r1	; 0x01
    1cd2:	12 82       	std	Z+2, r1	; 0x02
    1cd4:	13 82       	std	Z+3, r1	; 0x03
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_UpTimeUpdated>
    1cdc:	08 95       	ret

00001cde <init_HwTimer>:
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	84 bd       	out	0x24, r24	; 36
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	95 bd       	out	0x25, r25	; 37
    1ce6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1cea:	89 ef       	ldi	r24, 0xF9	; 249
    1cec:	87 bd       	out	0x27, r24	; 39
    1cee:	85 b1       	in	r24, 0x05	; 5
    1cf0:	8f 77       	andi	r24, 0x7F	; 127
    1cf2:	85 b9       	out	0x05, r24	; 5
    1cf4:	84 b1       	in	r24, 0x04	; 4
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	84 b9       	out	0x04, r24	; 4
    1cfa:	08 95       	ret

00001cfc <init_ADC>:
    1cfc:	87 e8       	ldi	r24, 0x87	; 135
    1cfe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1d02:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1d06:	8f e7       	ldi	r24, 0x7F	; 127
    1d08:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1d12:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1d16:	ec e6       	ldi	r30, 0x6C	; 108
    1d18:	f3 e0       	ldi	r31, 0x03	; 3
    1d1a:	10 82       	st	Z, r1
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	81 83       	std	Z+1, r24	; 0x01
    1d20:	82 83       	std	Z+2, r24	; 0x02
    1d22:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	10 c0       	rjmp	.+32     	; 0x1d4a <init_ADC+0x4e>
    1d2a:	85 30       	cpi	r24, 0x05	; 5
    1d2c:	39 f4       	brne	.+14     	; 0x1d3c <init_ADC+0x40>
    1d2e:	e8 2f       	mov	r30, r24
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	ee 58       	subi	r30, 0x8E	; 142
    1d34:	fc 4f       	sbci	r31, 0xFC	; 252
    1d36:	96 e0       	ldi	r25, 0x06	; 6
    1d38:	90 83       	st	Z, r25
    1d3a:	06 c0       	rjmp	.+12     	; 0x1d48 <init_ADC+0x4c>
    1d3c:	e8 2f       	mov	r30, r24
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	ee 58       	subi	r30, 0x8E	; 142
    1d42:	fc 4f       	sbci	r31, 0xFC	; 252
    1d44:	9a e0       	ldi	r25, 0x0A	; 10
    1d46:	90 83       	st	Z, r25
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	86 30       	cpi	r24, 0x06	; 6
    1d4c:	70 f3       	brcs	.-36     	; 0x1d2a <init_ADC+0x2e>
    1d4e:	08 95       	ret

00001d50 <init_Pipe>:
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	88 b9       	out	0x08, r24	; 8
    1d54:	87 b9       	out	0x07, r24	; 7
    1d56:	82 b9       	out	0x02, r24	; 2
    1d58:	11 b8       	out	0x01, r1	; 1
    1d5a:	84 b3       	in	r24, 0x14	; 20
    1d5c:	87 60       	ori	r24, 0x07	; 7
    1d5e:	84 bb       	out	0x14, r24	; 20
    1d60:	83 b3       	in	r24, 0x13	; 19
    1d62:	87 60       	ori	r24, 0x07	; 7
    1d64:	83 bb       	out	0x13, r24	; 19
    1d66:	8b b1       	in	r24, 0x0b	; 11
    1d68:	8f 77       	andi	r24, 0x7F	; 127
    1d6a:	8b b9       	out	0x0b, r24	; 11
    1d6c:	8a b1       	in	r24, 0x0a	; 10
    1d6e:	80 68       	ori	r24, 0x80	; 128
    1d70:	8a b9       	out	0x0a, r24	; 10
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <init_Pipe+0x42>
    1d76:	e8 2f       	mov	r30, r24
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	e4 59       	subi	r30, 0x94	; 148
    1d88:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8a:	9f ef       	ldi	r25, 0xFF	; 255
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	90 83       	st	Z, r25
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	80 32       	cpi	r24, 0x20	; 32
    1d94:	80 f3       	brcs	.-32     	; 0x1d76 <init_Pipe+0x26>
    1d96:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
    1d9a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pipe_PowerStatus>
    1d9e:	08 95       	ret

00001da0 <init_PipeModules>:
    1da0:	a1 dc       	rcall	.-1726   	; 0x16e4 <eeprom_ReadModules>
    1da2:	8f 3f       	cpi	r24, 0xFF	; 255
    1da4:	59 f4       	brne	.+22     	; 0x1dbc <init_PipeModules+0x1c>
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <log_putError>
    1db2:	e8 e7       	ldi	r30, 0x78	; 120
    1db4:	f3 e0       	ldi	r31, 0x03	; 3
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	80 83       	st	Z, r24
    1dba:	81 83       	std	Z+1, r24	; 0x01
    1dbc:	8b b1       	in	r24, 0x0b	; 11
    1dbe:	8f 77       	andi	r24, 0x7F	; 127
    1dc0:	8b b9       	out	0x0b, r24	; 11
    1dc2:	84 b3       	in	r24, 0x14	; 20
    1dc4:	87 60       	ori	r24, 0x07	; 7
    1dc6:	84 bb       	out	0x14, r24	; 20
    1dc8:	84 b3       	in	r24, 0x14	; 20
    1dca:	8b 7f       	andi	r24, 0xFB	; 251
    1dcc:	84 bb       	out	0x14, r24	; 20
    1dce:	85 e0       	ldi	r24, 0x05	; 5
    1dd0:	8a 95       	dec	r24
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <init_PipeModules+0x30>
    1dd4:	00 00       	nop
    1dd6:	84 b3       	in	r24, 0x14	; 20
    1dd8:	84 60       	ori	r24, 0x04	; 4
    1dda:	84 bb       	out	0x14, r24	; 20
    1ddc:	90 e2       	ldi	r25, 0x20	; 32
    1dde:	84 b3       	in	r24, 0x14	; 20
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	84 bb       	out	0x14, r24	; 20
    1de4:	90 fd       	sbrc	r25, 0
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <init_PipeModules+0x4c>
    1de8:	85 e5       	ldi	r24, 0x55	; 85
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <init_PipeModules+0x4e>
    1dec:	8a ea       	ldi	r24, 0xAA	; 170
    1dee:	88 b9       	out	0x08, r24	; 8
    1df0:	80 b1       	in	r24, 0x00	; 0
    1df2:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <pipe+0xff>
    1df6:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <pipe+0xfe>
    1dfa:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <pipe+0xfd>
    1dfe:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <pipe+0xfc>
    1e02:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <pipe+0xfb>
    1e06:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <pipe+0xfa>
    1e0a:	84 b3       	in	r24, 0x14	; 20
    1e0c:	8e 7f       	andi	r24, 0xFE	; 254
    1e0e:	84 bb       	out	0x14, r24	; 20
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	8a 95       	dec	r24
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <init_PipeModules+0x72>
    1e16:	00 00       	nop
    1e18:	91 50       	subi	r25, 0x01	; 1
    1e1a:	09 f7       	brne	.-62     	; 0x1dde <init_PipeModules+0x3e>
    1e1c:	90 e2       	ldi	r25, 0x20	; 32
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <init_PipeModules+0x9e>
    1e20:	84 b3       	in	r24, 0x14	; 20
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	84 bb       	out	0x14, r24	; 20
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	8a 95       	dec	r24
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <init_PipeModules+0x88>
    1e2c:	00 c0       	rjmp	.+0      	; 0x1e2e <init_PipeModules+0x8e>
    1e2e:	84 b3       	in	r24, 0x14	; 20
    1e30:	8e 7f       	andi	r24, 0xFE	; 254
    1e32:	84 bb       	out	0x14, r24	; 20
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	8a 95       	dec	r24
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <init_PipeModules+0x96>
    1e3a:	00 c0       	rjmp	.+0      	; 0x1e3c <init_PipeModules+0x9c>
    1e3c:	91 50       	subi	r25, 0x01	; 1
    1e3e:	91 11       	cpse	r25, r1
    1e40:	ef cf       	rjmp	.-34     	; 0x1e20 <init_PipeModules+0x80>
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipe_ModuleTested>
    1e48:	90 e2       	ldi	r25, 0x20	; 32
    1e4a:	84 b3       	in	r24, 0x14	; 20
    1e4c:	81 60       	ori	r24, 0x01	; 1
    1e4e:	84 bb       	out	0x14, r24	; 20
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	88 b9       	out	0x08, r24	; 8
    1e54:	20 b1       	in	r18, 0x00	; 0
    1e56:	90 fd       	sbrc	r25, 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <init_PipeModules+0xbe>
    1e5a:	8a ea       	ldi	r24, 0xAA	; 170
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <init_PipeModules+0xc0>
    1e5e:	85 e5       	ldi	r24, 0x55	; 85
    1e60:	82 27       	eor	r24, r18
    1e62:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <pipe_ModuleTested>
    1e66:	82 23       	and	r24, r18
    1e68:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipe_ModuleTested>
    1e6c:	84 b3       	in	r24, 0x14	; 20
    1e6e:	8e 7f       	andi	r24, 0xFE	; 254
    1e70:	84 bb       	out	0x14, r24	; 20
    1e72:	85 e0       	ldi	r24, 0x05	; 5
    1e74:	8a 95       	dec	r24
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <init_PipeModules+0xd4>
    1e78:	00 00       	nop
    1e7a:	91 50       	subi	r25, 0x01	; 1
    1e7c:	31 f7       	brne	.-52     	; 0x1e4a <init_PipeModules+0xaa>
    1e7e:	00 00       	nop
    1e80:	00 00       	nop
    1e82:	84 b3       	in	r24, 0x14	; 20
    1e84:	81 60       	ori	r24, 0x01	; 1
    1e86:	84 bb       	out	0x14, r24	; 20
    1e88:	84 b3       	in	r24, 0x14	; 20
    1e8a:	87 60       	ori	r24, 0x07	; 7
    1e8c:	84 bb       	out	0x14, r24	; 20
    1e8e:	84 b3       	in	r24, 0x14	; 20
    1e90:	8b 7f       	andi	r24, 0xFB	; 251
    1e92:	84 bb       	out	0x14, r24	; 20
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	8a 95       	dec	r24
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <init_PipeModules+0xf6>
    1e9a:	00 c0       	rjmp	.+0      	; 0x1e9c <init_PipeModules+0xfc>
    1e9c:	84 b3       	in	r24, 0x14	; 20
    1e9e:	84 60       	ori	r24, 0x04	; 4
    1ea0:	84 bb       	out	0x14, r24	; 20
    1ea2:	90 e2       	ldi	r25, 0x20	; 32
    1ea4:	e4 e6       	ldi	r30, 0x64	; 100
    1ea6:	f3 e0       	ldi	r31, 0x03	; 3
    1ea8:	83 81       	ldd	r24, Z+3	; 0x03
    1eaa:	82 83       	std	Z+2, r24	; 0x02
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	83 83       	std	Z+3, r24	; 0x03
    1eb0:	84 b3       	in	r24, 0x14	; 20
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	84 bb       	out	0x14, r24	; 20
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	81 83       	std	Z+1, r24	; 0x01
    1eba:	88 b9       	out	0x08, r24	; 8
    1ebc:	85 81       	ldd	r24, Z+5	; 0x05
    1ebe:	84 83       	std	Z+4, r24	; 0x04
    1ec0:	86 81       	ldd	r24, Z+6	; 0x06
    1ec2:	85 83       	std	Z+5, r24	; 0x05
    1ec4:	80 b1       	in	r24, 0x00	; 0
    1ec6:	86 83       	std	Z+6, r24	; 0x06
    1ec8:	82 83       	std	Z+2, r24	; 0x02
    1eca:	83 83       	std	Z+3, r24	; 0x03
    1ecc:	84 83       	std	Z+4, r24	; 0x04
    1ece:	85 83       	std	Z+5, r24	; 0x05
    1ed0:	87 83       	std	Z+7, r24	; 0x07
    1ed2:	84 b3       	in	r24, 0x14	; 20
    1ed4:	8e 7f       	andi	r24, 0xFE	; 254
    1ed6:	84 bb       	out	0x14, r24	; 20
    1ed8:	38 97       	sbiw	r30, 0x08	; 8
    1eda:	91 50       	subi	r25, 0x01	; 1
    1edc:	29 f7       	brne	.-54     	; 0x1ea8 <init_PipeModules+0x108>
    1ede:	00 00       	nop
    1ee0:	00 00       	nop
    1ee2:	84 b3       	in	r24, 0x14	; 20
    1ee4:	81 60       	ori	r24, 0x01	; 1
    1ee6:	84 bb       	out	0x14, r24	; 20
    1ee8:	84 b3       	in	r24, 0x14	; 20
    1eea:	8d 7f       	andi	r24, 0xFD	; 253
    1eec:	84 bb       	out	0x14, r24	; 20
    1eee:	18 b8       	out	0x08, r1	; 8
    1ef0:	85 e0       	ldi	r24, 0x05	; 5
    1ef2:	8a 95       	dec	r24
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <init_PipeModules+0x152>
    1ef6:	00 00       	nop
    1ef8:	84 b3       	in	r24, 0x14	; 20
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	84 bb       	out	0x14, r24	; 20
    1efe:	08 95       	ret

00001f00 <test_PipeModule>:
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <test_PipeModule+0x6>
    1f04:	6a c0       	rjmp	.+212    	; 0x1fda <test_PipeModule+0xda>
    1f06:	31 e0       	ldi	r19, 0x01	; 1
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <test_PipeModule+0xc>
    1f0a:	33 0f       	add	r19, r19
    1f0c:	8a 95       	dec	r24
    1f0e:	ea f7       	brpl	.-6      	; 0x1f0a <test_PipeModule+0xa>
    1f10:	80 e8       	ldi	r24, 0x80	; 128
    1f12:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
    1f16:	8b b1       	in	r24, 0x0b	; 11
    1f18:	8f 77       	andi	r24, 0x7F	; 127
    1f1a:	8b b9       	out	0x0b, r24	; 11
    1f1c:	84 b3       	in	r24, 0x14	; 20
    1f1e:	87 60       	ori	r24, 0x07	; 7
    1f20:	84 bb       	out	0x14, r24	; 20
    1f22:	40 e0       	ldi	r20, 0x00	; 0
    1f24:	1d c0       	rjmp	.+58     	; 0x1f60 <test_PipeModule+0x60>
    1f26:	20 fd       	sbrc	r18, 0
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <test_PipeModule+0x30>
    1f2a:	83 2f       	mov	r24, r19
    1f2c:	80 95       	com	r24
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <test_PipeModule+0x32>
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	88 b9       	out	0x08, r24	; 8
    1f34:	26 95       	lsr	r18
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	8a 95       	dec	r24
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <test_PipeModule+0x38>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <test_PipeModule+0x3e>
    1f3e:	84 b3       	in	r24, 0x14	; 20
    1f40:	8e 7f       	andi	r24, 0xFE	; 254
    1f42:	84 bb       	out	0x14, r24	; 20
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	8a 95       	dec	r24
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <test_PipeModule+0x46>
    1f4a:	00 c0       	rjmp	.+0      	; 0x1f4c <test_PipeModule+0x4c>
    1f4c:	84 b3       	in	r24, 0x14	; 20
    1f4e:	81 60       	ori	r24, 0x01	; 1
    1f50:	84 bb       	out	0x14, r24	; 20
    1f52:	9f 5f       	subi	r25, 0xFF	; 255
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <test_PipeModule+0x5a>
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	25 ea       	ldi	r18, 0xA5	; 165
    1f5a:	98 30       	cpi	r25, 0x08	; 8
    1f5c:	20 f3       	brcs	.-56     	; 0x1f26 <test_PipeModule+0x26>
    1f5e:	4f 5f       	subi	r20, 0xFF	; 255
    1f60:	44 30       	cpi	r20, 0x04	; 4
    1f62:	c8 f3       	brcs	.-14     	; 0x1f56 <test_PipeModule+0x56>
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <test_PipeModule+0x86>
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	8a 95       	dec	r24
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <test_PipeModule+0x6a>
    1f6e:	00 c0       	rjmp	.+0      	; 0x1f70 <test_PipeModule+0x70>
    1f70:	84 b3       	in	r24, 0x14	; 20
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	84 bb       	out	0x14, r24	; 20
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	8a 95       	dec	r24
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <test_PipeModule+0x78>
    1f7c:	00 c0       	rjmp	.+0      	; 0x1f7e <test_PipeModule+0x7e>
    1f7e:	84 b3       	in	r24, 0x14	; 20
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	84 bb       	out	0x14, r24	; 20
    1f84:	9f 5f       	subi	r25, 0xFF	; 255
    1f86:	90 32       	cpi	r25, 0x20	; 32
    1f88:	78 f3       	brcs	.-34     	; 0x1f68 <test_PipeModule+0x68>
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	ba 01       	movw	r22, r20
    1f92:	17 c0       	rjmp	.+46     	; 0x1fc2 <test_PipeModule+0xc2>
    1f94:	44 0f       	add	r20, r20
    1f96:	55 1f       	adc	r21, r21
    1f98:	66 1f       	adc	r22, r22
    1f9a:	77 1f       	adc	r23, r23
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	8a 95       	dec	r24
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <test_PipeModule+0x9e>
    1fa2:	00 c0       	rjmp	.+0      	; 0x1fa4 <test_PipeModule+0xa4>
    1fa4:	84 b3       	in	r24, 0x14	; 20
    1fa6:	8e 7f       	andi	r24, 0xFE	; 254
    1fa8:	84 bb       	out	0x14, r24	; 20
    1faa:	80 b1       	in	r24, 0x00	; 0
    1fac:	83 23       	and	r24, r19
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <test_PipeModule+0xb2>
    1fb0:	41 60       	ori	r20, 0x01	; 1
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	8a 95       	dec	r24
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <test_PipeModule+0xb4>
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <test_PipeModule+0xba>
    1fba:	84 b3       	in	r24, 0x14	; 20
    1fbc:	81 60       	ori	r24, 0x01	; 1
    1fbe:	84 bb       	out	0x14, r24	; 20
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
    1fc2:	90 32       	cpi	r25, 0x20	; 32
    1fc4:	38 f3       	brcs	.-50     	; 0x1f94 <test_PipeModule+0x94>
    1fc6:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
    1fca:	8b b1       	in	r24, 0x0b	; 11
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	8b b9       	out	0x0b, r24	; 11
    1fd0:	34 2f       	mov	r19, r20
    1fd2:	25 2f       	mov	r18, r21
    1fd4:	86 2f       	mov	r24, r22
    1fd6:	97 2f       	mov	r25, r23
    1fd8:	04 c0       	rjmp	.+8      	; 0x1fe2 <test_PipeModule+0xe2>
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	63 2f       	mov	r22, r19
    1fe4:	72 2f       	mov	r23, r18
    1fe6:	08 95       	ret

00001fe8 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1fea:	ec e6       	ldi	r30, 0x6C	; 108
    1fec:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1fee:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1ff2:	2f ef       	ldi	r18, 0xFF	; 255
    1ff4:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1ff6:	26 81       	ldd	r18, Z+6	; 0x06
    1ff8:	82 2b       	or	r24, r18
		pPipe++;
    1ffa:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1ffc:	9f 5f       	subi	r25, 0xFF	; 255
    1ffe:	90 32       	cpi	r25, 0x20	; 32
    2000:	c0 f3       	brcs	.-16     	; 0x1ff2 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    2002:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pipe_Module>
    2006:	89 23       	and	r24, r25
    2008:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <pipe_ModuleTested>
}
    200c:	89 23       	and	r24, r25
    200e:	08 95       	ret

00002010 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    2010:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2014:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2018:	81 ff       	sbrs	r24, 1
    201a:	fc cf       	rjmp	.-8      	; 0x2014 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    201c:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2020:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2024:	81 ff       	sbrs	r24, 1
    2026:	fc cf       	rjmp	.-8      	; 0x2020 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    2028:	08 95       	ret

0000202a <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    2030:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2032:	f8 94       	cli
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <module_StartPowerOn+0x18>
    2036:	e0 e5       	ldi	r30, 0x50	; 80
    2038:	f2 e0       	ldi	r31, 0x02	; 2
    203a:	88 e2       	ldi	r24, 0x28	; 40
    203c:	82 83       	std	Z+2, r24	; 0x02
    203e:	13 82       	std	Z+3, r1	; 0x03
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	81 11       	cpse	r24, r1
    2044:	f8 cf       	rjmp	.-16     	; 0x2036 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2046:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2048:	08 95       	ret

0000204a <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    204a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	31 f5       	brne	.+76     	; 0x209e <module_PowerControl+0x54>
		// part1: now check inputs
		if (module_TestAllInputs() == 0){
    2052:	ca df       	rcall	.-108    	; 0x1fe8 <module_TestAllInputs>
    2054:	81 11       	cpse	r24, r1
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <module_PowerControl+0x36>
			// all inputs are low, no key is pressed, no register active, start power on and wait a little bit
			POWER_ON
    2058:	85 b1       	in	r24, 0x05	; 5
    205a:	80 64       	ori	r24, 0x40	; 64
    205c:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    205e:	82 e1       	ldi	r24, 0x12	; 18
    2060:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    2064:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2066:	f8 94       	cli
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <module_PowerControl+0x2e>
    206c:	e0 e5       	ldi	r30, 0x50	; 80
    206e:	f2 e0       	ldi	r31, 0x02	; 2
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	82 83       	std	Z+2, r24	; 0x02
    2074:	13 82       	std	Z+3, r1	; 0x03
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	81 11       	cpse	r24, r1
    207a:	f8 cf       	rjmp	.-16     	; 0x206c <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    207c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    207e:	08 95       	ret
		} else {
			// keys are not released: wait some time and then test again
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    2080:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2082:	f8 94       	cli
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <module_PowerControl+0x4c>
    2088:	e0 e5       	ldi	r30, 0x50	; 80
    208a:	f2 e0       	ldi	r31, 0x02	; 2
    208c:	8c e0       	ldi	r24, 0x0C	; 12
    208e:	82 83       	std	Z+2, r24	; 0x02
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	83 83       	std	Z+3, r24	; 0x03
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	81 11       	cpse	r24, r1
    2098:	f7 cf       	rjmp	.-18     	; 0x2088 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    209a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    209c:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    209e:	82 31       	cpi	r24, 0x12	; 18
		// part2: power is on for some time, test if every input is still inactive
		uint8_t testResult = module_TestAllInputs();
    20a0:	b1 f4       	brne	.+44     	; 0x20ce <module_PowerControl+0x84>
    20a2:	a2 df       	rcall	.-188    	; 0x1fe8 <module_TestAllInputs>
		if (testResult == 0){
    20a4:	81 11       	cpse	r24, r1
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    20a8:	84 e1       	ldi	r24, 0x14	; 20
    20aa:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
    20ae:	0b c0       	rjmp	.+22     	; 0x20c6 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    20b0:	48 2f       	mov	r20, r24
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	85 e0       	ldi	r24, 0x05	; 5
    20b8:	f1 d6       	rcall	.+3554   	; 0x2e9c <log_putError>
			POWER_OFF
    20ba:	85 b1       	in	r24, 0x05	; 5
    20bc:	8f 7b       	andi	r24, 0xBF	; 191
    20be:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    20cc:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
    20d0:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    20d4:	08 95       	ret

000020d6 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0d c0       	rjmp	.+26     	; 0x20f4 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    20da:	94 30       	cpi	r25, 0x04	; 4
    20dc:	50 f4       	brcc	.+20     	; 0x20f2 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    20de:	e9 2f       	mov	r30, r25
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	81 11       	cpse	r24, r1
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <softKey_WantLong+0x14>
    20e6:	2a e0       	ldi	r18, 0x0A	; 10
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <softKey_WantLong+0x16>
    20ea:	26 e0       	ldi	r18, 0x06	; 6
    20ec:	ee 58       	subi	r30, 0x8E	; 142
    20ee:	fc 4f       	sbci	r31, 0xFC	; 252
    20f0:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    20f2:	9f 5f       	subi	r25, 0xFF	; 255
    20f4:	96 30       	cpi	r25, 0x06	; 6
    20f6:	88 f3       	brcs	.-30     	; 0x20da <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    20f8:	08 95       	ret

000020fa <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    20fa:	1f 92       	push	r1
    20fc:	0f 92       	push	r0
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	0f 92       	push	r0
    2102:	11 24       	eor	r1, r1
    2104:	0b b6       	in	r0, 0x3b	; 59
    2106:	0f 92       	push	r0
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	2f 93       	push	r18
    2112:	3f 93       	push	r19
    2114:	4f 93       	push	r20
    2116:	5f 93       	push	r21
    2118:	6f 93       	push	r22
    211a:	7f 93       	push	r23
    211c:	8f 93       	push	r24
    211e:	9f 93       	push	r25
    2120:	af 93       	push	r26
    2122:	bf 93       	push	r27
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	ef 93       	push	r30
    212a:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    212c:	85 b1       	in	r24, 0x05	; 5
    212e:	80 68       	ori	r24, 0x80	; 128
    2130:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    2132:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <msecCtr>
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <msecCtr>
    213c:	83 70       	andi	r24, 0x03	; 3
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	09 f4       	brne	.+2      	; 0x2144 <__vector_21+0x4a>
    2142:	58 c1       	rjmp	.+688    	; 0x23f4 <__stack+0x1f5>
    2144:	38 f0       	brcs	.+14     	; 0x2154 <__vector_21+0x5a>
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	09 f4       	brne	.+2      	; 0x214c <__vector_21+0x52>
    214a:	a5 c1       	rjmp	.+842    	; 0x2496 <__stack+0x297>
    214c:	83 30       	cpi	r24, 0x03	; 3
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_21+0x58>
    2150:	ca c1       	rjmp	.+916    	; 0x24e6 <__stack+0x2e7>
    2152:	05 c2       	rjmp	.+1034   	; 0x255e <__stack+0x35f>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    2154:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2158:	81 11       	cpse	r24, r1
    215a:	1a c1       	rjmp	.+564    	; 0x2390 <__stack+0x191>
    215c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    2160:	96 fd       	sbrc	r25, 6
    2162:	16 c1       	rjmp	.+556    	; 0x2390 <__stack+0x191>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	f9 01       	movw	r30, r18
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	e2 0f       	add	r30, r18
    2170:	f3 1f       	adc	r31, r19
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e4 59       	subi	r30, 0x94	; 148
    2178:	fc 4f       	sbci	r31, 0xFC	; 252
    217a:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    217c:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    2180:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    2182:	49 17       	cp	r20, r25
    2184:	10 f4       	brcc	.+4      	; 0x218a <__vector_21+0x90>
		return data1-data2;
    2186:	94 1b       	sub	r25, r20
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <__vector_21+0x96>
	} else {
		return data2-data1;
    218a:	54 2f       	mov	r21, r20
    218c:	59 1b       	sub	r21, r25
    218e:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    2190:	94 30       	cpi	r25, 0x04	; 4
    2192:	08 f0       	brcs	.+2      	; 0x2196 <__vector_21+0x9c>
    2194:	fd c0       	rjmp	.+506    	; 0x2390 <__stack+0x191>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    2196:	81 11       	cpse	r24, r1
    2198:	0e c0       	rjmp	.+28     	; 0x21b6 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    219a:	42 32       	cpi	r20, 0x22	; 34
    219c:	70 f0       	brcs	.+28     	; 0x21ba <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    219e:	4f 33       	cpi	r20, 0x3F	; 63
    21a0:	70 f0       	brcs	.+28     	; 0x21be <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    21a2:	48 36       	cpi	r20, 0x68	; 104
    21a4:	70 f0       	brcs	.+28     	; 0x21c2 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    21a6:	46 39       	cpi	r20, 0x96	; 150
    21a8:	70 f0       	brcs	.+28     	; 0x21c6 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    21aa:	4f 3b       	cpi	r20, 0xBF	; 191
    21ac:	70 f0       	brcs	.+28     	; 0x21ca <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    21ae:	48 3e       	cpi	r20, 0xE8	; 232
    21b0:	70 f4       	brcc	.+28     	; 0x21ce <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    21b2:	c6 e0       	ldi	r28, 0x06	; 6
    21b4:	0d c0       	rjmp	.+26     	; 0x21d0 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    21b6:	cf ef       	ldi	r28, 0xFF	; 255
    21b8:	0b c0       	rjmp	.+22     	; 0x21d0 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    21ba:	c4 e0       	ldi	r28, 0x04	; 4
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    21be:	c3 e0       	ldi	r28, 0x03	; 3
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    21c2:	c5 e0       	ldi	r28, 0x05	; 5
    21c4:	05 c0       	rjmp	.+10     	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    21c6:	c1 e0       	ldi	r28, 0x01	; 1
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    21ca:	c2 e0       	ldi	r28, 0x02	; 2
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    21ce:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    21d0:	f9 01       	movw	r30, r18
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	e2 0f       	add	r30, r18
    21d8:	f3 1f       	adc	r31, r19
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	e4 59       	subi	r30, 0x94	; 148
    21e0:	fc 4f       	sbci	r31, 0xFC	; 252
    21e2:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    21e4:	dc 17       	cp	r29, r28
    21e6:	09 f4       	brne	.+2      	; 0x21ea <__vector_21+0xf0>
    21e8:	48 c0       	rjmp	.+144    	; 0x227a <__stack+0x7b>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    21ea:	df 3f       	cpi	r29, 0xFF	; 255
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <__vector_21+0xfa>
    21ee:	cf 3f       	cpi	r28, 0xFF	; 255
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    21f2:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    21f4:	f9 01       	movw	r30, r18
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	e2 0f       	add	r30, r18
    21fc:	f3 1f       	adc	r31, r19
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	e4 59       	subi	r30, 0x94	; 148
    2204:	fc 4f       	sbci	r31, 0xFC	; 252
    2206:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    2208:	df 3f       	cpi	r29, 0xFF	; 255
    220a:	f9 f4       	brne	.+62     	; 0x224a <__stack+0x4b>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    220c:	c9 01       	movw	r24, r18
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	fc 01       	movw	r30, r24
    2214:	e2 0f       	add	r30, r18
    2216:	f3 1f       	adc	r31, r19
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	e4 59       	subi	r30, 0x94	; 148
    221e:	fc 4f       	sbci	r31, 0xFC	; 252
    2220:	15 82       	std	Z+5, r1	; 0x05
    2222:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    2224:	fc 01       	movw	r30, r24
    2226:	e2 0f       	add	r30, r18
    2228:	f3 1f       	adc	r31, r19
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	e4 59       	subi	r30, 0x94	; 148
    2230:	fc 4f       	sbci	r31, 0xFC	; 252
    2232:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    2234:	ec 2f       	mov	r30, r28
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	ef 58       	subi	r30, 0x8F	; 143
    223a:	fc 4f       	sbci	r31, 0xFC	; 252
    223c:	80 81       	ld	r24, Z
    223e:	80 ff       	sbrs	r24, 0
    2240:	a7 c0       	rjmp	.+334    	; 0x2390 <__stack+0x191>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    2242:	8c 2f       	mov	r24, r28
    2244:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <message_push>
    2248:	a3 c0       	rjmp	.+326    	; 0x2390 <__stack+0x191>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    224a:	ed 2f       	mov	r30, r29
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	ef 58       	subi	r30, 0x8F	; 143
    2250:	fc 4f       	sbci	r31, 0xFC	; 252
    2252:	80 81       	ld	r24, Z
    2254:	81 ff       	sbrs	r24, 1
    2256:	9c c0       	rjmp	.+312    	; 0x2390 <__stack+0x191>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    2258:	f9 01       	movw	r30, r18
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	e4 59       	subi	r30, 0x94	; 148
    2268:	fc 4f       	sbci	r31, 0xFC	; 252
    226a:	83 81       	ldd	r24, Z+3	; 0x03
    226c:	83 70       	andi	r24, 0x03	; 3
    226e:	09 f0       	breq	.+2      	; 0x2272 <__stack+0x73>
    2270:	8f c0       	rjmp	.+286    	; 0x2390 <__stack+0x191>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    2272:	8d 2f       	mov	r24, r29
    2274:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <message_push>
    2278:	8b c0       	rjmp	.+278    	; 0x2390 <__stack+0x191>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    227a:	cf 3f       	cpi	r28, 0xFF	; 255
    227c:	09 f4       	brne	.+2      	; 0x2280 <__stack+0x81>
    227e:	88 c0       	rjmp	.+272    	; 0x2390 <__stack+0x191>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    2280:	f9 01       	movw	r30, r18
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	df 01       	movw	r26, r30
    2288:	a2 0f       	add	r26, r18
    228a:	b3 1f       	adc	r27, r19
    228c:	aa 0f       	add	r26, r26
    228e:	bb 1f       	adc	r27, r27
    2290:	a4 59       	subi	r26, 0x94	; 148
    2292:	bc 4f       	sbci	r27, 0xFC	; 252
    2294:	14 96       	adiw	r26, 0x04	; 4
    2296:	8d 91       	ld	r24, X+
    2298:	9c 91       	ld	r25, X
    229a:	15 97       	sbiw	r26, 0x05	; 5
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	15 96       	adiw	r26, 0x05	; 5
    22a0:	9c 93       	st	X, r25
    22a2:	8e 93       	st	-X, r24
    22a4:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    22a6:	fd 01       	movw	r30, r26
    22a8:	84 81       	ldd	r24, Z+4	; 0x04
    22aa:	95 81       	ldd	r25, Z+5	; 0x05
    22ac:	8b 34       	cpi	r24, 0x4B	; 75
    22ae:	91 05       	cpc	r25, r1
    22b0:	a9 f4       	brne	.+42     	; 0x22dc <__stack+0xdd>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    22b2:	ed 2f       	mov	r30, r29
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	ef 58       	subi	r30, 0x8F	; 143
    22b8:	fc 4f       	sbci	r31, 0xFC	; 252
    22ba:	80 81       	ld	r24, Z
    22bc:	82 ff       	sbrs	r24, 2
    22be:	0e c0       	rjmp	.+28     	; 0x22dc <__stack+0xdd>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    22c0:	8c 2f       	mov	r24, r28
    22c2:	80 68       	ori	r24, 0x80	; 128
    22c4:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    22c8:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <adcNr>
    22cc:	86 e0       	ldi	r24, 0x06	; 6
    22ce:	e8 9f       	mul	r30, r24
    22d0:	f0 01       	movw	r30, r0
    22d2:	11 24       	eor	r1, r1
    22d4:	e4 59       	subi	r30, 0x94	; 148
    22d6:	fc 4f       	sbci	r31, 0xFC	; 252
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    22dc:	ed 2f       	mov	r30, r29
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	ef 58       	subi	r30, 0x8F	; 143
    22e2:	fc 4f       	sbci	r31, 0xFC	; 252
    22e4:	80 81       	ld	r24, Z
    22e6:	83 ff       	sbrs	r24, 3
    22e8:	53 c0       	rjmp	.+166    	; 0x2390 <__stack+0x191>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    22ea:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	fc 01       	movw	r30, r24
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	e8 0f       	add	r30, r24
    22f8:	f9 1f       	adc	r31, r25
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	e4 59       	subi	r30, 0x94	; 148
    2300:	fc 4f       	sbci	r31, 0xFC	; 252
    2302:	23 81       	ldd	r18, Z+3	; 0x03
    2304:	21 11       	cpse	r18, r1
    2306:	1e c0       	rjmp	.+60     	; 0x2344 <__stack+0x145>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2308:	fc 01       	movw	r30, r24
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	e8 0f       	add	r30, r24
    2310:	f9 1f       	adc	r31, r25
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	e4 59       	subi	r30, 0x94	; 148
    2318:	fc 4f       	sbci	r31, 0xFC	; 252
    231a:	24 81       	ldd	r18, Z+4	; 0x04
    231c:	35 81       	ldd	r19, Z+5	; 0x05
    231e:	22 33       	cpi	r18, 0x32	; 50
    2320:	31 05       	cpc	r19, r1
    2322:	b1 f5       	brne	.+108    	; 0x2390 <__stack+0x191>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2324:	26 e0       	ldi	r18, 0x06	; 6
    2326:	28 9f       	mul	r18, r24
    2328:	f0 01       	movw	r30, r0
    232a:	29 9f       	mul	r18, r25
    232c:	f0 0d       	add	r31, r0
    232e:	11 24       	eor	r1, r1
    2330:	e4 59       	subi	r30, 0x94	; 148
    2332:	fc 4f       	sbci	r31, 0xFC	; 252
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2338:	15 82       	std	Z+5, r1	; 0x05
    233a:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    233c:	8c 2f       	mov	r24, r28
    233e:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <message_push>
    2342:	26 c0       	rjmp	.+76     	; 0x2390 <__stack+0x191>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2344:	fc 01       	movw	r30, r24
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e8 0f       	add	r30, r24
    234c:	f9 1f       	adc	r31, r25
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e4 59       	subi	r30, 0x94	; 148
    2354:	fc 4f       	sbci	r31, 0xFC	; 252
    2356:	23 81       	ldd	r18, Z+3	; 0x03
    2358:	21 30       	cpi	r18, 0x01	; 1
    235a:	d1 f4       	brne	.+52     	; 0x2390 <__stack+0x191>
    235c:	26 e0       	ldi	r18, 0x06	; 6
    235e:	28 9f       	mul	r18, r24
    2360:	f0 01       	movw	r30, r0
    2362:	29 9f       	mul	r18, r25
    2364:	f0 0d       	add	r31, r0
    2366:	11 24       	eor	r1, r1
    2368:	e4 59       	subi	r30, 0x94	; 148
    236a:	fc 4f       	sbci	r31, 0xFC	; 252
    236c:	24 81       	ldd	r18, Z+4	; 0x04
    236e:	35 81       	ldd	r19, Z+5	; 0x05
    2370:	2c 30       	cpi	r18, 0x0C	; 12
    2372:	31 05       	cpc	r19, r1
    2374:	69 f4       	brne	.+26     	; 0x2390 <__stack+0x191>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    2376:	26 e0       	ldi	r18, 0x06	; 6
    2378:	28 9f       	mul	r18, r24
    237a:	f0 01       	movw	r30, r0
    237c:	29 9f       	mul	r18, r25
    237e:	f0 0d       	add	r31, r0
    2380:	11 24       	eor	r1, r1
    2382:	e4 59       	subi	r30, 0x94	; 148
    2384:	fc 4f       	sbci	r31, 0xFC	; 252
    2386:	15 82       	std	Z+5, r1	; 0x05
    2388:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    238a:	8c 2f       	mov	r24, r28
    238c:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    2390:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	10 f0       	brcs	.+4      	; 0x23a2 <__stack+0x1a3>
		adcNr = 0;
    239e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    23a2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    23a6:	81 11       	cpse	r24, r1
    23a8:	0c c0       	rjmp	.+24     	; 0x23c2 <__stack+0x1c3>
		newMux = adcKeys[adcNr].mux;
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	fc 01       	movw	r30, r24
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e8 0f       	add	r30, r24
    23b4:	f9 1f       	adc	r31, r25
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	e4 59       	subi	r30, 0x94	; 148
    23bc:	fc 4f       	sbci	r31, 0xFC	; 252
    23be:	80 81       	ld	r24, Z
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <__stack+0x1c5>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    23c2:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    23c4:	98 2f       	mov	r25, r24
    23c6:	9f 71       	andi	r25, 0x1F	; 31
    23c8:	90 66       	ori	r25, 0x60	; 96
    23ca:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    23ce:	eb e7       	ldi	r30, 0x7B	; 123
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	20 81       	ld	r18, Z
    23d4:	80 72       	andi	r24, 0x20	; 32
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	95 95       	asr	r25
    23da:	87 95       	ror	r24
    23dc:	95 95       	asr	r25
    23de:	87 95       	ror	r24
    23e0:	92 2f       	mov	r25, r18
    23e2:	9f 7d       	andi	r25, 0xDF	; 223
    23e4:	89 2b       	or	r24, r25
    23e6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    23e8:	ea e7       	ldi	r30, 0x7A	; 122
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 64       	ori	r24, 0x40	; 64
    23f0:	80 83       	st	Z, r24
    23f2:	b5 c0       	rjmp	.+362    	; 0x255e <__stack+0x35f>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    23f4:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    23f8:	80 38       	cpi	r24, 0x80	; 128
    23fa:	09 f4       	brne	.+2      	; 0x23fe <__stack+0x1ff>
    23fc:	b0 c0       	rjmp	.+352    	; 0x255e <__stack+0x35f>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    23fe:	84 b3       	in	r24, 0x14	; 20
    2400:	87 60       	ori	r24, 0x07	; 7
    2402:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2404:	84 b3       	in	r24, 0x14	; 20
    2406:	8b 7f       	andi	r24, 0xFB	; 251
    2408:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    240a:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <pipe_Module+0x1>
    240e:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2410:	e2 e0       	ldi	r30, 0x02	; 2
    2412:	ea 95       	dec	r30
    2414:	f1 f7       	brne	.-4      	; 0x2412 <__stack+0x213>
    2416:	00 c0       	rjmp	.+0      	; 0x2418 <__stack+0x219>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2418:	84 b3       	in	r24, 0x14	; 20
    241a:	84 60       	ori	r24, 0x04	; 4
    241c:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    241e:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2420:	e4 e6       	ldi	r30, 0x64	; 100
    2422:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2424:	83 81       	ldd	r24, Z+3	; 0x03
    2426:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2428:	84 81       	ldd	r24, Z+4	; 0x04
    242a:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    242c:	84 b3       	in	r24, 0x14	; 20
    242e:	81 60       	ori	r24, 0x01	; 1
    2430:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    2432:	81 81       	ldd	r24, Z+1	; 0x01
    2434:	82 2b       	or	r24, r18
    2436:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2438:	85 81       	ldd	r24, Z+5	; 0x05
    243a:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    243c:	86 81       	ldd	r24, Z+6	; 0x06
    243e:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2440:	80 b1       	in	r24, 0x00	; 0
    2442:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2444:	84 b3       	in	r24, 0x14	; 20
    2446:	8e 7f       	andi	r24, 0xFE	; 254
    2448:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    244a:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    244c:	91 50       	subi	r25, 0x01	; 1
    244e:	51 f7       	brne	.-44     	; 0x2424 <__stack+0x225>
	asm("nop");
    2450:	00 00       	nop
	asm("nop");
    2452:	00 00       	nop
	PIPE_CLOCK_H
    2454:	84 b3       	in	r24, 0x14	; 20
    2456:	81 60       	ori	r24, 0x01	; 1
    2458:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    245a:	84 b3       	in	r24, 0x14	; 20
    245c:	8d 7f       	andi	r24, 0xFD	; 253
    245e:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    2460:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2464:	82 60       	ori	r24, 0x02	; 2
    2466:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    246a:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    246c:	8b b1       	in	r24, 0x0b	; 11
    246e:	80 68       	ori	r24, 0x80	; 128
    2470:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    2472:	84 b3       	in	r24, 0x14	; 20
    2474:	82 60       	ori	r24, 0x02	; 2
    2476:	84 bb       	out	0x14, r24	; 20
    2478:	72 c0       	rjmp	.+228    	; 0x255e <__stack+0x35f>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    247a:	80 81       	ld	r24, Z
    247c:	81 50       	subi	r24, 0x01	; 1
    247e:	8e 3f       	cpi	r24, 0xFE	; 254
    2480:	38 f4       	brcc	.+14     	; 0x2490 <__stack+0x291>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    2482:	21 81       	ldd	r18, Z+1	; 0x01
    2484:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    2486:	25 30       	cpi	r18, 0x05	; 5
    2488:	10 f0       	brcs	.+4      	; 0x248e <__stack+0x28f>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    248a:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    248c:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    248e:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    2490:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2492:	9f 5f       	subi	r25, 0xFF	; 255
    2494:	03 c0       	rjmp	.+6      	; 0x249c <__stack+0x29d>
    2496:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    2498:	e0 e5       	ldi	r30, 0x50	; 80
    249a:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    249c:	9a 30       	cpi	r25, 0x0A	; 10
    249e:	68 f3       	brcs	.-38     	; 0x247a <__stack+0x27b>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    24a0:	e4 e6       	ldi	r30, 0x64	; 100
    24a2:	f2 e0       	ldi	r31, 0x02	; 2
    24a4:	80 81       	ld	r24, Z
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	80 83       	st	Z, r24
    24aa:	8a 3f       	cpi	r24, 0xFA	; 250
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <__stack+0x2b1>
    24ae:	57 c0       	rjmp	.+174    	; 0x255e <__stack+0x35f>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    24b6:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    24b8:	81 81       	ldd	r24, Z+1	; 0x01
    24ba:	8f 5f       	subi	r24, 0xFF	; 255
    24bc:	81 83       	std	Z+1, r24	; 0x01
    24be:	8c 33       	cpi	r24, 0x3C	; 60
    24c0:	08 f4       	brcc	.+2      	; 0x24c4 <__stack+0x2c5>
    24c2:	4d c0       	rjmp	.+154    	; 0x255e <__stack+0x35f>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    24c4:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	8f 5f       	subi	r24, 0xFF	; 255
    24ca:	82 83       	std	Z+2, r24	; 0x02
    24cc:	8c 33       	cpi	r24, 0x3C	; 60
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <__stack+0x2d3>
    24d0:	46 c0       	rjmp	.+140    	; 0x255e <__stack+0x35f>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    24d2:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    24d4:	83 81       	ldd	r24, Z+3	; 0x03
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	83 83       	std	Z+3, r24	; 0x03
    24da:	84 36       	cpi	r24, 0x64	; 100
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <__stack+0x2e1>
    24de:	3f c0       	rjmp	.+126    	; 0x255e <__stack+0x35f>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    24e0:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <time_Uptime+0x3>
    24e4:	3c c0       	rjmp	.+120    	; 0x255e <__stack+0x35f>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    24e6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    24ea:	80 38       	cpi	r24, 0x80	; 128
    24ec:	c1 f1       	breq	.+112    	; 0x255e <__stack+0x35f>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    24ee:	e0 90 78 03 	lds	r14, 0x0378	; 0x800378 <pipe_Module>
    24f2:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipe_ModuleTested>
    24f6:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    24f8:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    24fa:	0c e6       	ldi	r16, 0x6C	; 108
    24fc:	12 e0       	ldi	r17, 0x02	; 2
    24fe:	2c c0       	rjmp	.+88     	; 0x2558 <__stack+0x359>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2500:	f8 01       	movw	r30, r16
    2502:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2504:	83 81       	ldd	r24, Z+3	; 0x03
    2506:	9c 2f       	mov	r25, r28
    2508:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    250a:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    250c:	84 81       	ldd	r24, Z+4	; 0x04
    250e:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2510:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    2512:	25 81       	ldd	r18, Z+5	; 0x05
    2514:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2516:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2518:	86 81       	ldd	r24, Z+6	; 0x06
    251a:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    251c:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    251e:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2520:	cd 23       	and	r28, r29
    2522:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2524:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2526:	8d 2f       	mov	r24, r29
    2528:	80 95       	com	r24
    252a:	8c 23       	and	r24, r28
    252c:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    252e:	21 f0       	breq	.+8      	; 0x2538 <__stack+0x339>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2530:	9f 2d       	mov	r25, r15
    2532:	90 62       	ori	r25, 0x20	; 32
    2534:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2538:	c0 95       	com	r28
    253a:	cd 23       	and	r28, r29
    253c:	8c 2f       	mov	r24, r28
    253e:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2540:	19 f0       	breq	.+6      	; 0x2548 <__stack+0x349>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2542:	9f 2d       	mov	r25, r15
    2544:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <pipeMsgPush>
		}
		curPipe++;
    2548:	08 5f       	subi	r16, 0xF8	; 248
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    254c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2550:	81 60       	ori	r24, 0x01	; 1
    2552:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2556:	f3 94       	inc	r15
    2558:	ff e1       	ldi	r31, 0x1F	; 31
    255a:	ff 15       	cp	r31, r15
    255c:	88 f6       	brcc	.-94     	; 0x2500 <__stack+0x301>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    255e:	85 b1       	in	r24, 0x05	; 5
    2560:	8f 77       	andi	r24, 0x7F	; 127
    2562:	85 b9       	out	0x05, r24	; 5

}
    2564:	ff 91       	pop	r31
    2566:	ef 91       	pop	r30
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	bf 91       	pop	r27
    256e:	af 91       	pop	r26
    2570:	9f 91       	pop	r25
    2572:	8f 91       	pop	r24
    2574:	7f 91       	pop	r23
    2576:	6f 91       	pop	r22
    2578:	5f 91       	pop	r21
    257a:	4f 91       	pop	r20
    257c:	3f 91       	pop	r19
    257e:	2f 91       	pop	r18
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	0f 90       	pop	r0
    258a:	0b be       	out	0x3b, r0	; 59
    258c:	0f 90       	pop	r0
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	0f 90       	pop	r0
    2592:	1f 90       	pop	r1
    2594:	18 95       	reti

00002596 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    2596:	e8 2f       	mov	r30, r24
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	e4 59       	subi	r30, 0x94	; 148
    25a8:	fd 4f       	sbci	r31, 0xFD	; 253
    25aa:	60 95       	com	r22
    25ac:	81 81       	ldd	r24, Z+1	; 0x01
    25ae:	68 23       	and	r22, r24
    25b0:	61 83       	std	Z+1, r22	; 0x01
    25b2:	08 95       	ret

000025b4 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    25b4:	e8 2f       	mov	r30, r24
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	ee 0f       	add	r30, r30
    25ba:	ff 1f       	adc	r31, r31
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	e4 59       	subi	r30, 0x94	; 148
    25c6:	fd 4f       	sbci	r31, 0xFD	; 253
    25c8:	81 81       	ldd	r24, Z+1	; 0x01
    25ca:	68 2b       	or	r22, r24
    25cc:	61 83       	std	Z+1, r22	; 0x01
    25ce:	08 95       	ret

000025d0 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    25d4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    25d6:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    25d8:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    25da:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    25dc:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    25de:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    25e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    25e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    25e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    25ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    25f0:	8a b1       	in	r24, 0x0a	; 10
    25f2:	80 68       	ori	r24, 0x80	; 128
    25f4:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    25f6:	8b b1       	in	r24, 0x0b	; 11
    25f8:	8f 77       	andi	r24, 0x7F	; 127
    25fa:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    25fc:	84 b1       	in	r24, 0x04	; 4
    25fe:	80 64       	ori	r24, 0x40	; 64
    2600:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    2602:	85 b1       	in	r24, 0x05	; 5
    2604:	8f 7b       	andi	r24, 0xBF	; 191
    2606:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2608:	84 b1       	in	r24, 0x04	; 4
    260a:	80 63       	ori	r24, 0x30	; 48
    260c:	84 b9       	out	0x04, r24	; 4
    260e:	08 95       	ret

00002610 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2610:	88 23       	and	r24, r24
    2612:	34 f4       	brge	.+12     	; 0x2620 <lcd_write_nibble+0x10>
    2614:	e2 e0       	ldi	r30, 0x02	; 2
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	90 81       	ld	r25, Z
    261a:	90 61       	ori	r25, 0x10	; 16
    261c:	90 83       	st	Z, r25
    261e:	05 c0       	rjmp	.+10     	; 0x262a <lcd_write_nibble+0x1a>
    2620:	e2 e0       	ldi	r30, 0x02	; 2
    2622:	f1 e0       	ldi	r31, 0x01	; 1
    2624:	90 81       	ld	r25, Z
    2626:	9f 7e       	andi	r25, 0xEF	; 239
    2628:	90 83       	st	Z, r25
    262a:	86 ff       	sbrs	r24, 6
    262c:	06 c0       	rjmp	.+12     	; 0x263a <lcd_write_nibble+0x2a>
    262e:	e2 e0       	ldi	r30, 0x02	; 2
    2630:	f1 e0       	ldi	r31, 0x01	; 1
    2632:	90 81       	ld	r25, Z
    2634:	98 60       	ori	r25, 0x08	; 8
    2636:	90 83       	st	Z, r25
    2638:	05 c0       	rjmp	.+10     	; 0x2644 <lcd_write_nibble+0x34>
    263a:	e2 e0       	ldi	r30, 0x02	; 2
    263c:	f1 e0       	ldi	r31, 0x01	; 1
    263e:	90 81       	ld	r25, Z
    2640:	97 7f       	andi	r25, 0xF7	; 247
    2642:	90 83       	st	Z, r25
    2644:	85 ff       	sbrs	r24, 5
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <lcd_write_nibble+0x40>
    2648:	9e b1       	in	r25, 0x0e	; 14
    264a:	98 60       	ori	r25, 0x08	; 8
    264c:	9e b9       	out	0x0e, r25	; 14
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <lcd_write_nibble+0x46>
    2650:	9e b1       	in	r25, 0x0e	; 14
    2652:	97 7f       	andi	r25, 0xF7	; 247
    2654:	9e b9       	out	0x0e, r25	; 14
    2656:	84 ff       	sbrs	r24, 4
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <lcd_write_nibble+0x52>
    265a:	84 b3       	in	r24, 0x14	; 20
    265c:	80 62       	ori	r24, 0x20	; 32
    265e:	84 bb       	out	0x14, r24	; 20
    2660:	03 c0       	rjmp	.+6      	; 0x2668 <lcd_write_nibble+0x58>
    2662:	84 b3       	in	r24, 0x14	; 20
    2664:	8f 7d       	andi	r24, 0xDF	; 223
    2666:	84 bb       	out	0x14, r24	; 20
    2668:	e2 e0       	ldi	r30, 0x02	; 2
    266a:	f1 e0       	ldi	r31, 0x01	; 1
    266c:	80 81       	ld	r24, Z
    266e:	80 64       	ori	r24, 0x40	; 64
    2670:	80 83       	st	Z, r24
    2672:	85 e0       	ldi	r24, 0x05	; 5
    2674:	8a 95       	dec	r24
    2676:	f1 f7       	brne	.-4      	; 0x2674 <lcd_write_nibble+0x64>
    2678:	00 00       	nop
    267a:	80 81       	ld	r24, Z
    267c:	8f 7b       	andi	r24, 0xBF	; 191
    267e:	80 83       	st	Z, r24
    2680:	85 e0       	ldi	r24, 0x05	; 5
    2682:	8a 95       	dec	r24
    2684:	f1 f7       	brne	.-4      	; 0x2682 <lcd_write_nibble+0x72>
    2686:	00 00       	nop
    2688:	08 95       	ret

0000268a <lcd_write_character>:
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	d8 2f       	mov	r29, r24
    2690:	c5 b1       	in	r28, 0x05	; 5
    2692:	c0 73       	andi	r28, 0x30	; 48
    2694:	85 b1       	in	r24, 0x05	; 5
    2696:	8f 7c       	andi	r24, 0xCF	; 207
    2698:	80 61       	ori	r24, 0x10	; 16
    269a:	85 b9       	out	0x05, r24	; 5
    269c:	e2 e0       	ldi	r30, 0x02	; 2
    269e:	f1 e0       	ldi	r31, 0x01	; 1
    26a0:	80 81       	ld	r24, Z
    26a2:	80 62       	ori	r24, 0x20	; 32
    26a4:	80 83       	st	Z, r24
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7b       	andi	r24, 0xBF	; 191
    26aa:	80 83       	st	Z, r24
    26ac:	8d 2f       	mov	r24, r29
    26ae:	b0 df       	rcall	.-160    	; 0x2610 <lcd_write_nibble>
    26b0:	8d 2f       	mov	r24, r29
    26b2:	82 95       	swap	r24
    26b4:	80 7f       	andi	r24, 0xF0	; 240
    26b6:	ac df       	rcall	.-168    	; 0x2610 <lcd_write_nibble>
    26b8:	8f ef       	ldi	r24, 0xFF	; 255
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <lcd_write_character+0x32>
    26c0:	00 c0       	rjmp	.+0      	; 0x26c2 <lcd_write_character+0x38>
    26c2:	00 00       	nop
    26c4:	85 b1       	in	r24, 0x05	; 5
    26c6:	8f 7c       	andi	r24, 0xCF	; 207
    26c8:	c8 2b       	or	r28, r24
    26ca:	c5 b9       	out	0x05, r28	; 5
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	08 95       	ret

000026d2 <lcd_write_command>:
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	d8 2f       	mov	r29, r24
    26d8:	c5 b1       	in	r28, 0x05	; 5
    26da:	c0 73       	andi	r28, 0x30	; 48
    26dc:	85 b1       	in	r24, 0x05	; 5
    26de:	8f 7c       	andi	r24, 0xCF	; 207
    26e0:	80 61       	ori	r24, 0x10	; 16
    26e2:	85 b9       	out	0x05, r24	; 5
    26e4:	e2 e0       	ldi	r30, 0x02	; 2
    26e6:	f1 e0       	ldi	r31, 0x01	; 1
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 7d       	andi	r24, 0xDF	; 223
    26ec:	80 83       	st	Z, r24
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 7b       	andi	r24, 0xBF	; 191
    26f2:	80 83       	st	Z, r24
    26f4:	8d 2f       	mov	r24, r29
    26f6:	8c df       	rcall	.-232    	; 0x2610 <lcd_write_nibble>
    26f8:	8d 2f       	mov	r24, r29
    26fa:	82 95       	swap	r24
    26fc:	80 7f       	andi	r24, 0xF0	; 240
    26fe:	88 df       	rcall	.-240    	; 0x2610 <lcd_write_nibble>
    2700:	d1 50       	subi	r29, 0x01	; 1
    2702:	d2 30       	cpi	r29, 0x02	; 2
    2704:	38 f4       	brcc	.+14     	; 0x2714 <lcd_write_command+0x42>
    2706:	8f e0       	ldi	r24, 0x0F	; 15
    2708:	97 e2       	ldi	r25, 0x27	; 39
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <lcd_write_command+0x38>
    270e:	00 c0       	rjmp	.+0      	; 0x2710 <lcd_write_command+0x3e>
    2710:	00 00       	nop
    2712:	06 c0       	rjmp	.+12     	; 0x2720 <lcd_write_command+0x4e>
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <lcd_write_command+0x46>
    271c:	00 c0       	rjmp	.+0      	; 0x271e <lcd_write_command+0x4c>
    271e:	00 00       	nop
    2720:	85 b1       	in	r24, 0x05	; 5
    2722:	8f 7c       	andi	r24, 0xCF	; 207
    2724:	c8 2b       	or	r28, r24
    2726:	c5 b9       	out	0x05, r28	; 5
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	08 95       	ret

0000272e <lcd_init>:
    272e:	cf 93       	push	r28
    2730:	c5 b1       	in	r28, 0x05	; 5
    2732:	c0 73       	andi	r28, 0x30	; 48
    2734:	85 b1       	in	r24, 0x05	; 5
    2736:	8f 7c       	andi	r24, 0xCF	; 207
    2738:	80 61       	ori	r24, 0x10	; 16
    273a:	85 b9       	out	0x05, r24	; 5
    273c:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <lcd_displayingMessage>
    2740:	e1 e0       	ldi	r30, 0x01	; 1
    2742:	f1 e0       	ldi	r31, 0x01	; 1
    2744:	80 81       	ld	r24, Z
    2746:	80 61       	ori	r24, 0x10	; 16
    2748:	80 83       	st	Z, r24
    274a:	80 81       	ld	r24, Z
    274c:	88 60       	ori	r24, 0x08	; 8
    274e:	80 83       	st	Z, r24
    2750:	8d b1       	in	r24, 0x0d	; 13
    2752:	88 60       	ori	r24, 0x08	; 8
    2754:	8d b9       	out	0x0d, r24	; 13
    2756:	83 b3       	in	r24, 0x13	; 19
    2758:	80 62       	ori	r24, 0x20	; 32
    275a:	83 bb       	out	0x13, r24	; 19
    275c:	80 81       	ld	r24, Z
    275e:	80 64       	ori	r24, 0x40	; 64
    2760:	80 83       	st	Z, r24
    2762:	80 81       	ld	r24, Z
    2764:	80 62       	ori	r24, 0x20	; 32
    2766:	80 83       	st	Z, r24
    2768:	2f ef       	ldi	r18, 0xFF	; 255
    276a:	81 ee       	ldi	r24, 0xE1	; 225
    276c:	94 e0       	ldi	r25, 0x04	; 4
    276e:	21 50       	subi	r18, 0x01	; 1
    2770:	80 40       	sbci	r24, 0x00	; 0
    2772:	90 40       	sbci	r25, 0x00	; 0
    2774:	e1 f7       	brne	.-8      	; 0x276e <lcd_init+0x40>
    2776:	00 c0       	rjmp	.+0      	; 0x2778 <lcd_init+0x4a>
    2778:	00 00       	nop
    277a:	e2 e0       	ldi	r30, 0x02	; 2
    277c:	f1 e0       	ldi	r31, 0x01	; 1
    277e:	80 81       	ld	r24, Z
    2780:	8f 7d       	andi	r24, 0xDF	; 223
    2782:	80 83       	st	Z, r24
    2784:	80 81       	ld	r24, Z
    2786:	8f 7b       	andi	r24, 0xBF	; 191
    2788:	80 83       	st	Z, r24
    278a:	80 e3       	ldi	r24, 0x30	; 48
    278c:	41 df       	rcall	.-382    	; 0x2610 <lcd_write_nibble>
    278e:	8f e1       	ldi	r24, 0x1F	; 31
    2790:	9e e4       	ldi	r25, 0x4E	; 78
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <lcd_init+0x64>
    2796:	00 c0       	rjmp	.+0      	; 0x2798 <lcd_init+0x6a>
    2798:	00 00       	nop
    279a:	80 e3       	ldi	r24, 0x30	; 48
    279c:	39 df       	rcall	.-398    	; 0x2610 <lcd_write_nibble>
    279e:	8f e1       	ldi	r24, 0x1F	; 31
    27a0:	9e e4       	ldi	r25, 0x4E	; 78
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <lcd_init+0x74>
    27a6:	00 c0       	rjmp	.+0      	; 0x27a8 <lcd_init+0x7a>
    27a8:	00 00       	nop
    27aa:	80 e3       	ldi	r24, 0x30	; 48
    27ac:	31 df       	rcall	.-414    	; 0x2610 <lcd_write_nibble>
    27ae:	8f e1       	ldi	r24, 0x1F	; 31
    27b0:	9e e4       	ldi	r25, 0x4E	; 78
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <lcd_init+0x84>
    27b6:	00 c0       	rjmp	.+0      	; 0x27b8 <lcd_init+0x8a>
    27b8:	00 00       	nop
    27ba:	88 e2       	ldi	r24, 0x28	; 40
    27bc:	29 df       	rcall	.-430    	; 0x2610 <lcd_write_nibble>
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <lcd_init+0x94>
    27c6:	00 c0       	rjmp	.+0      	; 0x27c8 <lcd_init+0x9a>
    27c8:	00 00       	nop
    27ca:	88 e2       	ldi	r24, 0x28	; 40
    27cc:	82 df       	rcall	.-252    	; 0x26d2 <lcd_write_command>
    27ce:	88 e0       	ldi	r24, 0x08	; 8
    27d0:	80 df       	rcall	.-256    	; 0x26d2 <lcd_write_command>
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	7e df       	rcall	.-260    	; 0x26d2 <lcd_write_command>
    27d6:	86 e0       	ldi	r24, 0x06	; 6
    27d8:	7c df       	rcall	.-264    	; 0x26d2 <lcd_write_command>
    27da:	8c e0       	ldi	r24, 0x0C	; 12
    27dc:	7a df       	rcall	.-268    	; 0x26d2 <lcd_write_command>
    27de:	85 b1       	in	r24, 0x05	; 5
    27e0:	8f 7c       	andi	r24, 0xCF	; 207
    27e2:	c8 2b       	or	r28, r24
    27e4:	c5 b9       	out	0x05, r28	; 5
    27e6:	cf 91       	pop	r28
    27e8:	08 95       	ret

000027ea <lcd_goto>:
    27ea:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <lcd_cursorPos>
    27ee:	80 58       	subi	r24, 0x80	; 128
    27f0:	70 cf       	rjmp	.-288    	; 0x26d2 <lcd_write_command>
    27f2:	08 95       	ret

000027f4 <lcd_clrscr>:
    27f4:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <lcd_cursorPos>
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	6b df       	rcall	.-298    	; 0x26d2 <lcd_write_command>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	ec e7       	ldi	r30, 0x7C	; 124
    2800:	f3 e0       	ldi	r31, 0x03	; 3
    2802:	04 c0       	rjmp	.+8      	; 0x280c <lcd_clrscr+0x18>
    2804:	90 e2       	ldi	r25, 0x20	; 32
    2806:	90 83       	st	Z, r25
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	31 96       	adiw	r30, 0x01	; 1
    280c:	80 35       	cpi	r24, 0x50	; 80
    280e:	d0 f3       	brcs	.-12     	; 0x2804 <lcd_clrscr+0x10>
    2810:	08 95       	ret

00002812 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	// convert non linear LCD-Cursor to linear Cursor 0..19 = line 0, 20..39 = line 1... for buffer
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    2812:	84 31       	cpi	r24, 0x14	; 20
    2814:	98 f0       	brcs	.+38     	; 0x283c <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    2816:	90 ec       	ldi	r25, 0xC0	; 192
    2818:	98 0f       	add	r25, r24
    281a:	94 31       	cpi	r25, 0x14	; 20
    281c:	10 f4       	brcc	.+4      	; 0x2822 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    281e:	8c 52       	subi	r24, 0x2C	; 44
    2820:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    2822:	9c ee       	ldi	r25, 0xEC	; 236
    2824:	98 0f       	add	r25, r24
    2826:	94 31       	cpi	r25, 0x14	; 20
    2828:	10 f4       	brcc	.+4      	; 0x282e <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    282a:	8c 5e       	subi	r24, 0xEC	; 236
    282c:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    282e:	9c ea       	ldi	r25, 0xAC	; 172
    2830:	98 0f       	add	r25, r24
    2832:	94 31       	cpi	r25, 0x14	; 20
    2834:	10 f4       	brcc	.+4      	; 0x283a <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    2836:	88 51       	subi	r24, 0x18	; 24
    2838:	08 95       	ret
	}
	return 0xFF; // default should not occure
    283a:	8f ef       	ldi	r24, 0xFF	; 255

}
    283c:	08 95       	ret

0000283e <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	d8 2f       	mov	r29, r24
	// V 0.76 no output if displaying message
	if ((lcd_displayingMessage == FALSE) || (lcd_cursorPos < MENU_LCD_CURSOR_MAINMESSAGE)
    2844:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd_displayingMessage>
    2848:	88 23       	and	r24, r24
    284a:	31 f0       	breq	.+12     	; 0x2858 <lcd_putc+0x1a>
    284c:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    2850:	80 34       	cpi	r24, 0x40	; 64
    2852:	10 f0       	brcs	.+4      	; 0x2858 <lcd_putc+0x1a>
		|| (lcd_cursorPos >= MENU_LCD_CURSOR_MAINMESSAGE+MENU_LCD_LEN_MAINMESSAGE)) {
    2854:	84 35       	cpi	r24, 0x54	; 84
    2856:	10 f0       	brcs	.+4      	; 0x285c <lcd_putc+0x1e>
		lcd_write_character(c);
    2858:	8d 2f       	mov	r24, r29
    285a:	17 df       	rcall	.-466    	; 0x268a <lcd_write_character>
	}
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    285c:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    2860:	8c 2f       	mov	r24, r28
    2862:	d7 df       	rcall	.-82     	; 0x2812 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2864:	8f 3f       	cpi	r24, 0xFF	; 255
    2866:	29 f1       	breq	.+74     	; 0x28b2 <lcd_putc+0x74>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    2868:	d1 3a       	cpi	r29, 0xA1	; 161
    286a:	79 f0       	breq	.+30     	; 0x288a <lcd_putc+0x4c>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    286c:	d0 38       	cpi	r29, 0x80	; 128
    286e:	79 f0       	breq	.+30     	; 0x288e <lcd_putc+0x50>
			stored_char = LCD_CHARREPL_STATEONOFF;
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2870:	d5 3a       	cpi	r29, 0xA5	; 165
    2872:	79 f0       	breq	.+30     	; 0x2892 <lcd_putc+0x54>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHAR_STATEON){
    2874:	da 32       	cpi	r29, 0x2A	; 42
    2876:	79 f0       	breq	.+30     	; 0x2896 <lcd_putc+0x58>
			stored_char = LCD_CHARREPL_STATEON;
		} else if (stored_char == LCD_CHAR_SZ){
    2878:	d2 3e       	cpi	r29, 0xE2	; 226
    287a:	79 f0       	breq	.+30     	; 0x289a <lcd_putc+0x5c>
			stored_char = LCD_CHARREPL_SZ;
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    287c:	d5 3f       	cpi	r29, 0xF5	; 245
    287e:	79 f0       	breq	.+30     	; 0x289e <lcd_putc+0x60>
			stored_char = LCD_CHARREPL_UMLAUTU;
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2880:	df 3e       	cpi	r29, 0xEF	; 239
    2882:	79 f0       	breq	.+30     	; 0x28a2 <lcd_putc+0x64>
			stored_char = LCD_CHARREPL_UMLAUTO;
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    2884:	d1 3e       	cpi	r29, 0xE1	; 225
    2886:	81 f4       	brne	.+32     	; 0x28a8 <lcd_putc+0x6a>
    2888:	0e c0       	rjmp	.+28     	; 0x28a6 <lcd_putc+0x68>
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
    288a:	d0 e2       	ldi	r29, 0x20	; 32
    288c:	0d c0       	rjmp	.+26     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF;
    288e:	d0 e2       	ldi	r29, 0x20	; 32
    2890:	0b c0       	rjmp	.+22     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
    2892:	d4 e1       	ldi	r29, 0x14	; 20
    2894:	09 c0       	rjmp	.+18     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON;
    2896:	d5 e1       	ldi	r29, 0x15	; 21
    2898:	07 c0       	rjmp	.+14     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ;
    289a:	d3 e1       	ldi	r29, 0x13	; 19
    289c:	05 c0       	rjmp	.+10     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU;
    289e:	d2 e1       	ldi	r29, 0x12	; 18
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO;
    28a2:	d1 e1       	ldi	r29, 0x11	; 17
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA;
    28a6:	d0 e1       	ldi	r29, 0x10	; 16
		}
		lcd_buffer[cursor] = stored_char;
    28a8:	e8 2f       	mov	r30, r24
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	e4 58       	subi	r30, 0x84	; 132
    28ae:	fc 4f       	sbci	r31, 0xFC	; 252
    28b0:	d0 83       	st	Z, r29
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    28b2:	cf 5f       	subi	r28, 0xFF	; 255
    28b4:	cf 77       	andi	r28, 0x7F	; 127
    28b6:	c0 93 cd 03 	sts	0x03CD, r28	; 0x8003cd <lcd_cursorPos>
}
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	08 95       	ret

000028c0 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	fc 01       	movw	r30, r24
	if (s != NULL){
    28c6:	89 2b       	or	r24, r25
    28c8:	19 f4       	brne	.+6      	; 0x28d0 <lcd_puts+0x10>
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    28cc:	b8 df       	rcall	.-144    	; 0x283e <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    28ce:	fe 01       	movw	r30, r28
    28d0:	ef 01       	movw	r28, r30
    28d2:	21 96       	adiw	r28, 0x01	; 1
    28d4:	80 81       	ld	r24, Z
    28d6:	81 11       	cpse	r24, r1
    28d8:	f9 cf       	rjmp	.-14     	; 0x28cc <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	08 95       	ret

000028e0 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    28e6:	89 2b       	or	r24, r25
    28e8:	19 f4       	brne	.+6      	; 0x28f0 <lcd_puts_P+0x10>
    28ea:	07 c0       	rjmp	.+14     	; 0x28fa <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    28ec:	a8 df       	rcall	.-176    	; 0x283e <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    28ee:	fe 01       	movw	r30, r28
    28f0:	ef 01       	movw	r28, r30
    28f2:	21 96       	adiw	r28, 0x01	; 1
    28f4:	84 91       	lpm	r24, Z
    28f6:	81 11       	cpse	r24, r1
    28f8:	f9 cf       	rjmp	.-14     	; 0x28ec <lcd_puts_P+0xc>
		lcd_putc(c);
	}
}
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	08 95       	ret

00002900 <lcd_message>:
//------------------------------ MESSAGE ------------------------------

uint8_t lcd_displayingMessage; // TRUE when a message is beeing displayed. Then all lcd outputs are wirten to buffer only
uint8_t lcd_saveCursorIsOn;

void lcd_message(const char *pMessage){
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	8c 01       	movw	r16, r24
	// clear message area and display message, start timer
	uint8_t saveCursor = lcd_cursorPos;
    290c:	f0 90 cd 03 	lds	r15, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    2910:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    2914:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLen(pMessage);
    2918:	c8 01       	movw	r24, r16
    291a:	0e 94 d8 3e 	call	0x7db0	; 0x7db0 <get_StrLen>
    291e:	d8 2f       	mov	r29, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2920:	80 e4       	ldi	r24, 0x40	; 64
    2922:	63 df       	rcall	.-314    	; 0x27ea <lcd_goto>
	uint8_t pos = 0;
    2924:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2926:	03 c0       	rjmp	.+6      	; 0x292e <lcd_message+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    2928:	80 e2       	ldi	r24, 0x20	; 32
    292a:	af de       	rcall	.-674    	; 0x268a <lcd_write_character>
		pos++;
    292c:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLen(pMessage);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    292e:	2c 2f       	mov	r18, r28
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	84 e1       	ldi	r24, 0x14	; 20
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	8d 1b       	sub	r24, r29
    2938:	91 09       	sbc	r25, r1
    293a:	95 95       	asr	r25
    293c:	87 95       	ror	r24
    293e:	28 17       	cp	r18, r24
    2940:	39 07       	cpc	r19, r25
    2942:	94 f3       	brlt	.-28     	; 0x2928 <lcd_message+0x28>
    2944:	04 c0       	rjmp	.+8      	; 0x294e <lcd_message+0x4e>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
    2946:	0f 5f       	subi	r16, 0xFF	; 255
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	9f de       	rcall	.-706    	; 0x268a <lcd_write_character>
		pos++;
    294c:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
    294e:	f8 01       	movw	r30, r16
    2950:	80 81       	ld	r24, Z
    2952:	81 11       	cpse	r24, r1
    2954:	f8 cf       	rjmp	.-16     	; 0x2946 <lcd_message+0x46>
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    2956:	03 c0       	rjmp	.+6      	; 0x295e <lcd_message+0x5e>
    2958:	80 e2       	ldi	r24, 0x20	; 32
    295a:	97 de       	rcall	.-722    	; 0x268a <lcd_write_character>
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    295c:	c1 2f       	mov	r28, r17
    295e:	11 e0       	ldi	r17, 0x01	; 1
    2960:	1c 0f       	add	r17, r28
    2962:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2964:	c8 f3       	brcs	.-14     	; 0x2958 <lcd_message+0x58>
    2966:	8f 2d       	mov	r24, r15
    2968:	40 df       	rcall	.-384    	; 0x27ea <lcd_goto>
	lcd_displayingMessage = TRUE;
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2970:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2972:	f8 94       	cli
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	06 c0       	rjmp	.+12     	; 0x2984 <lcd_message+0x84>
    2978:	e0 e5       	ldi	r30, 0x50	; 80
    297a:	f2 e0       	ldi	r31, 0x02	; 2
    297c:	84 e6       	ldi	r24, 0x64	; 100
    297e:	86 87       	std	Z+14, r24	; 0x0e
    2980:	17 86       	std	Z+15, r1	; 0x0f
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	81 11       	cpse	r24, r1
    2986:	f8 cf       	rjmp	.-16     	; 0x2978 <lcd_message+0x78>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2988:	9f bf       	out	0x3f, r25	; 63
}
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	1f 91       	pop	r17
    2990:	0f 91       	pop	r16
    2992:	ff 90       	pop	r15
    2994:	08 95       	ret

00002996 <lcd_message_P>:

void lcd_message_P(const char *pMessage_P){
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	8c 01       	movw	r16, r24
	uint8_t saveCursor = lcd_cursorPos;
    29a2:	d0 91 cd 03 	lds	r29, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    29a6:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    29aa:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLenP(pMessage_P);
    29ae:	c8 01       	movw	r24, r16
    29b0:	0e 94 ce 3e 	call	0x7d9c	; 0x7d9c <get_StrLenP>
    29b4:	f8 2e       	mov	r15, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    29b6:	80 e4       	ldi	r24, 0x40	; 64
    29b8:	18 df       	rcall	.-464    	; 0x27ea <lcd_goto>
	uint8_t pos = 0;
    29ba:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    29bc:	03 c0       	rjmp	.+6      	; 0x29c4 <lcd_message_P+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    29be:	80 e2       	ldi	r24, 0x20	; 32
    29c0:	64 de       	rcall	.-824    	; 0x268a <lcd_write_character>
		pos++;
    29c2:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLenP(pMessage_P);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    29c4:	2c 2f       	mov	r18, r28
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	84 e1       	ldi	r24, 0x14	; 20
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	8f 19       	sub	r24, r15
    29ce:	91 09       	sbc	r25, r1
    29d0:	95 95       	asr	r25
    29d2:	87 95       	ror	r24
    29d4:	28 17       	cp	r18, r24
    29d6:	39 07       	cpc	r19, r25
    29d8:	94 f3       	brlt	.-28     	; 0x29be <lcd_message_P+0x28>
    29da:	06 c0       	rjmp	.+12     	; 0x29e8 <lcd_message_P+0x52>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
    29dc:	0f 5f       	subi	r16, 0xFF	; 255
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	fc 01       	movw	r30, r24
    29e2:	84 91       	lpm	r24, Z
    29e4:	52 de       	rcall	.-860    	; 0x268a <lcd_write_character>
		pos++;
    29e6:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
    29e8:	c8 01       	movw	r24, r16
    29ea:	f8 01       	movw	r30, r16
    29ec:	24 91       	lpm	r18, Z
    29ee:	21 11       	cpse	r18, r1
    29f0:	f5 cf       	rjmp	.-22     	; 0x29dc <lcd_message_P+0x46>
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    29f2:	03 c0       	rjmp	.+6      	; 0x29fa <lcd_message_P+0x64>
    29f4:	80 e2       	ldi	r24, 0x20	; 32
    29f6:	49 de       	rcall	.-878    	; 0x268a <lcd_write_character>
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    29f8:	c1 2f       	mov	r28, r17
    29fa:	11 e0       	ldi	r17, 0x01	; 1
    29fc:	1c 0f       	add	r17, r28
    29fe:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2a00:	c8 f3       	brcs	.-14     	; 0x29f4 <lcd_message_P+0x5e>
    2a02:	8d 2f       	mov	r24, r29
    2a04:	f2 de       	rcall	.-540    	; 0x27ea <lcd_goto>
	lcd_displayingMessage = TRUE;
    2a06:	8f ef       	ldi	r24, 0xFF	; 255
    2a08:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2a0c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a0e:	f8 94       	cli
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	06 c0       	rjmp	.+12     	; 0x2a20 <lcd_message_P+0x8a>
    2a14:	e0 e5       	ldi	r30, 0x50	; 80
    2a16:	f2 e0       	ldi	r31, 0x02	; 2
    2a18:	84 e6       	ldi	r24, 0x64	; 100
    2a1a:	86 87       	std	Z+14, r24	; 0x0e
    2a1c:	17 86       	std	Z+15, r1	; 0x0f
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	81 11       	cpse	r24, r1
    2a22:	f8 cf       	rjmp	.-16     	; 0x2a14 <lcd_message_P+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a24:	9f bf       	out	0x3f, r25	; 63
}
    2a26:	df 91       	pop	r29
    2a28:	cf 91       	pop	r28
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	ff 90       	pop	r15
    2a30:	08 95       	ret

00002a32 <lcd_setCG>:
	0b00011011,
	0b00011011,
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
    2a32:	ef 92       	push	r14
    2a34:	ff 92       	push	r15
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	eb 01       	movw	r28, r22
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
    2a3e:	90 e0       	ldi	r25, 0x00	; 0
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	80 64       	ori	r24, 0x40	; 64
    2a4e:	41 de       	rcall	.-894    	; 0x26d2 <lcd_write_command>
	for (uint8_t i = 0; i < 8; i++){
    2a50:	10 e0       	ldi	r17, 0x00	; 0
    2a52:	09 c0       	rjmp	.+18     	; 0x2a66 <lcd_setCG+0x34>
		lcd_write_character(pgm_read_byte(patternPtr++));
    2a54:	7e 01       	movw	r14, r28
    2a56:	8f ef       	ldi	r24, 0xFF	; 255
    2a58:	e8 1a       	sub	r14, r24
    2a5a:	f8 0a       	sbc	r15, r24
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	84 91       	lpm	r24, Z
    2a60:	14 de       	rcall	.-984    	; 0x268a <lcd_write_character>
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2a62:	1f 5f       	subi	r17, 0xFF	; 255
		lcd_write_character(pgm_read_byte(patternPtr++));
    2a64:	e7 01       	movw	r28, r14
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2a66:	18 30       	cpi	r17, 0x08	; 8
    2a68:	a8 f3       	brcs	.-22     	; 0x2a54 <lcd_setCG+0x22>
		lcd_write_character(pgm_read_byte(patternPtr++));
	}
}
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	08 95       	ret

00002a76 <lcd_initCG>:

void lcd_initCG(){
	lcd_setCG(0,cgPattern_Up); // 0x08 = Arrow Up
    2a76:	6c e9       	ldi	r22, 0x9C	; 156
    2a78:	71 e0       	ldi	r23, 0x01	; 1
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	da df       	rcall	.-76     	; 0x2a32 <lcd_setCG>
	lcd_setCG(1,cgPattern_Down); // 0x09 = Arrow Down
    2a7e:	64 e9       	ldi	r22, 0x94	; 148
    2a80:	71 e0       	ldi	r23, 0x01	; 1
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	d6 df       	rcall	.-84     	; 0x2a32 <lcd_setCG>
	// old: 0x0A = Block = State On
	lcd_setCG(2,cgPattern_RegOff); // 0x0A = Single Reg Off
    2a86:	6c e8       	ldi	r22, 0x8C	; 140
    2a88:	71 e0       	ldi	r23, 0x01	; 1
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	d2 df       	rcall	.-92     	; 0x2a32 <lcd_setCG>
	lcd_setCG(3,cgPattern_RegOn); // 0x0B = Single Reg Off
    2a8e:	64 e8       	ldi	r22, 0x84	; 132
    2a90:	71 e0       	ldi	r23, 0x01	; 1
    2a92:	83 e0       	ldi	r24, 0x03	; 3
    2a94:	ce df       	rcall	.-100    	; 0x2a32 <lcd_setCG>
	lcd_setCG(4,cgPattern_RegOffOff); // 0x0C = 2 Reg Off Off
    2a96:	6c e7       	ldi	r22, 0x7C	; 124
    2a98:	71 e0       	ldi	r23, 0x01	; 1
    2a9a:	84 e0       	ldi	r24, 0x04	; 4
    2a9c:	ca df       	rcall	.-108    	; 0x2a32 <lcd_setCG>
	lcd_setCG(5,cgPattern_RegOffOn); // 0x0D = 2 Reg Off On
    2a9e:	64 e7       	ldi	r22, 0x74	; 116
    2aa0:	71 e0       	ldi	r23, 0x01	; 1
    2aa2:	85 e0       	ldi	r24, 0x05	; 5
    2aa4:	c6 df       	rcall	.-116    	; 0x2a32 <lcd_setCG>
	lcd_setCG(6,cgPattern_RegOnOff); // 0x0E = 2 Reg On Off
    2aa6:	6c e6       	ldi	r22, 0x6C	; 108
    2aa8:	71 e0       	ldi	r23, 0x01	; 1
    2aaa:	86 e0       	ldi	r24, 0x06	; 6
    2aac:	c2 df       	rcall	.-124    	; 0x2a32 <lcd_setCG>
	lcd_setCG(7,cgPattern_RegOnOn); // 0x0F = 2 Reg On On
    2aae:	64 e6       	ldi	r22, 0x64	; 100
    2ab0:	71 e0       	ldi	r23, 0x01	; 1
    2ab2:	87 e0       	ldi	r24, 0x07	; 7
    2ab4:	be cf       	rjmp	.-132    	; 0x2a32 <lcd_setCG>
    2ab6:	08 95       	ret

00002ab8 <lcd_cursosblink>:
    2ab8:	8d e0       	ldi	r24, 0x0D	; 13
}

//----------------------------------- CURSOR -------------------------#

void lcd_cursosblink(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON) | (1 << LCD_DISPLAYMODE_BLINK));
    2aba:	0b de       	rcall	.-1002   	; 0x26d2 <lcd_write_command>
	lcd_cursorIsOn = TRUE;
    2abc:	8f ef       	ldi	r24, 0xFF	; 255
    2abe:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <lcd_cursorIsOn>
    2ac2:	08 95       	ret

00002ac4 <lcd_cursoroff>:
}

void lcd_cursoroff(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON));
    2ac4:	8c e0       	ldi	r24, 0x0C	; 12
    2ac6:	05 de       	rcall	.-1014   	; 0x26d2 <lcd_write_command>
	lcd_cursorIsOn = FALSE;
    2ac8:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <lcd_cursorIsOn>
    2acc:	08 95       	ret

00002ace <lcd_message_clear>:
	lcd_displayingMessage = TRUE;
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
}


void lcd_message_clear(){
    2ace:	0f 93       	push	r16
    2ad0:	1f 93       	push	r17
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
    2ad6:	00 91 cd 03 	lds	r16, 0x03CD	; 0x8003cd <lcd_cursorPos>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
    2ada:	80 e4       	ldi	r24, 0x40	; 64
    2adc:	9a de       	rcall	.-716    	; 0x2812 <getCursorFromLCDRAMcursor>
    2ade:	c8 2f       	mov	r28, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2ae0:	80 e4       	ldi	r24, 0x40	; 64
    2ae2:	83 de       	rcall	.-762    	; 0x27ea <lcd_goto>
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2ae4:	d0 e0       	ldi	r29, 0x00	; 0
    2ae6:	22 c0       	rjmp	.+68     	; 0x2b2c <lcd_message_clear+0x5e>
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2ae8:	11 e0       	ldi	r17, 0x01	; 1
    2aea:	1c 0f       	add	r17, r28
    2aec:	ec 2f       	mov	r30, r28
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	e4 58       	subi	r30, 0x84	; 132
    2af2:	fc 4f       	sbci	r31, 0xFC	; 252
    2af4:	80 81       	ld	r24, Z
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
    2af6:	84 31       	cpi	r24, 0x14	; 20
    2af8:	59 f0       	breq	.+22     	; 0x2b10 <lcd_message_clear+0x42>
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHARREPL_STATEON){
    2afa:	85 31       	cpi	r24, 0x15	; 21
    2afc:	59 f0       	breq	.+22     	; 0x2b14 <lcd_message_clear+0x46>
			stored_char = LCD_CHAR_STATEON;
		} else if (stored_char == LCD_CHARREPL_SZ){
    2afe:	83 31       	cpi	r24, 0x13	; 19
    2b00:	59 f0       	breq	.+22     	; 0x2b18 <lcd_message_clear+0x4a>
			stored_char = LCD_CHAR_SZ;
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
    2b02:	82 31       	cpi	r24, 0x12	; 18
    2b04:	59 f0       	breq	.+22     	; 0x2b1c <lcd_message_clear+0x4e>
			stored_char = LCD_CHAR_UMLAUTU;
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
    2b06:	81 31       	cpi	r24, 0x11	; 17
    2b08:	59 f0       	breq	.+22     	; 0x2b20 <lcd_message_clear+0x52>
			stored_char = LCD_CHAR_UMLAUTO;
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
    2b0a:	80 31       	cpi	r24, 0x10	; 16
    2b0c:	61 f4       	brne	.+24     	; 0x2b26 <lcd_message_clear+0x58>
    2b0e:	0a c0       	rjmp	.+20     	; 0x2b24 <lcd_message_clear+0x56>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
    2b10:	85 ea       	ldi	r24, 0xA5	; 165
    2b12:	09 c0       	rjmp	.+18     	; 0x2b26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_STATEON){
			stored_char = LCD_CHAR_STATEON;
    2b14:	8a e2       	ldi	r24, 0x2A	; 42
    2b16:	07 c0       	rjmp	.+14     	; 0x2b26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_SZ){
			stored_char = LCD_CHAR_SZ;
    2b18:	82 ee       	ldi	r24, 0xE2	; 226
    2b1a:	05 c0       	rjmp	.+10     	; 0x2b26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
			stored_char = LCD_CHAR_UMLAUTU;
    2b1c:	85 ef       	ldi	r24, 0xF5	; 245
    2b1e:	03 c0       	rjmp	.+6      	; 0x2b26 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
			stored_char = LCD_CHAR_UMLAUTO;
    2b20:	8f ee       	ldi	r24, 0xEF	; 239
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <lcd_message_clear+0x58>
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
    2b24:	81 ee       	ldi	r24, 0xE1	; 225
    2b26:	b1 dd       	rcall	.-1182   	; 0x268a <lcd_write_character>
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2b28:	df 5f       	subi	r29, 0xFF	; 255
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2b2a:	c1 2f       	mov	r28, r17
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2b2c:	d4 31       	cpi	r29, 0x14	; 20
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
	}
	lcd_goto(saveCursor);
    2b2e:	e0 f2       	brcs	.-72     	; 0x2ae8 <lcd_message_clear+0x1a>
    2b30:	80 2f       	mov	r24, r16
    2b32:	5b de       	rcall	.-842    	; 0x27ea <lcd_goto>
	if 	(lcd_saveCursorIsOn == TRUE){
    2b34:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <lcd_saveCursorIsOn>
		lcd_cursosblink();
    2b38:	8f 3f       	cpi	r24, 0xFF	; 255
    2b3a:	11 f4       	brne	.+4      	; 0x2b40 <lcd_message_clear+0x72>
    2b3c:	bd df       	rcall	.-134    	; 0x2ab8 <lcd_cursosblink>
	} else {
		lcd_cursoroff();
    2b3e:	01 c0       	rjmp	.+2      	; 0x2b42 <lcd_message_clear+0x74>
    2b40:	c1 df       	rcall	.-126    	; 0x2ac4 <lcd_cursoroff>
	}
	lcd_displayingMessage = FALSE;
    2b42:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <lcd_displayingMessage>
}
    2b46:	df 91       	pop	r29
    2b48:	cf 91       	pop	r28
    2b4a:	1f 91       	pop	r17
    2b4c:	0f 91       	pop	r16
    2b4e:	08 95       	ret

00002b50 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2b50:	88 ef       	ldi	r24, 0xF8	; 248
    2b52:	93 e0       	ldi	r25, 0x03	; 3
    2b54:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2b58:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2b5c:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2b60:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2b64:	08 95       	ret

00002b66 <log_count>:
    2b66:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2b6a:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2b6e:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <pLogStart>
    2b72:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <pLogStart+0x1>
    2b76:	82 17       	cp	r24, r18
    2b78:	93 07       	cpc	r25, r19
    2b7a:	48 f0       	brcs	.+18     	; 0x2b8e <log_count+0x28>
    2b7c:	82 1b       	sub	r24, r18
    2b7e:	93 0b       	sbc	r25, r19
    2b80:	95 95       	asr	r25
    2b82:	87 95       	ror	r24
    2b84:	9d ec       	ldi	r25, 0xCD	; 205
    2b86:	89 9f       	mul	r24, r25
    2b88:	80 2d       	mov	r24, r0
    2b8a:	11 24       	eor	r1, r1
    2b8c:	08 95       	ret
    2b8e:	80 57       	subi	r24, 0x70	; 112
    2b90:	9e 4f       	sbci	r25, 0xFE	; 254
    2b92:	82 1b       	sub	r24, r18
    2b94:	93 0b       	sbc	r25, r19
    2b96:	95 95       	asr	r25
    2b98:	87 95       	ror	r24
    2b9a:	9d ec       	ldi	r25, 0xCD	; 205
    2b9c:	89 9f       	mul	r24, r25
    2b9e:	80 2d       	mov	r24, r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	08 95       	ret

00002ba4 <log_getLog>:
    2ba4:	cf 93       	push	r28
    2ba6:	c8 2f       	mov	r28, r24
    2ba8:	de df       	rcall	.-68     	; 0x2b66 <log_count>
    2baa:	c8 17       	cp	r28, r24
    2bac:	f8 f4       	brcc	.+62     	; 0x2bec <log_getLog+0x48>
    2bae:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <pLogStart>
    2bb2:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <pLogStart+0x1>
    2bb6:	8c 2f       	mov	r24, r28
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	9c 01       	movw	r18, r24
    2bbc:	22 0f       	add	r18, r18
    2bbe:	33 1f       	adc	r19, r19
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	28 0f       	add	r18, r24
    2bce:	39 1f       	adc	r19, r25
    2bd0:	ca 01       	movw	r24, r20
    2bd2:	82 0f       	add	r24, r18
    2bd4:	93 1f       	adc	r25, r19
    2bd6:	65 e0       	ldi	r22, 0x05	; 5
    2bd8:	8e 37       	cpi	r24, 0x7E	; 126
    2bda:	96 07       	cpc	r25, r22
    2bdc:	49 f0       	breq	.+18     	; 0x2bf0 <log_getLog+0x4c>
    2bde:	40 f0       	brcs	.+16     	; 0x2bf0 <log_getLog+0x4c>
    2be0:	20 59       	subi	r18, 0x90	; 144
    2be2:	31 40       	sbci	r19, 0x01	; 1
    2be4:	ca 01       	movw	r24, r20
    2be6:	82 0f       	add	r24, r18
    2be8:	93 1f       	adc	r25, r19
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <log_getLog+0x4c>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	cf 91       	pop	r28
    2bf2:	08 95       	ret

00002bf4 <log_getErrorText>:
    2bf4:	d7 df       	rcall	.-82     	; 0x2ba4 <log_getLog>
    2bf6:	00 97       	sbiw	r24, 0x00	; 0
    2bf8:	f1 f1       	breq	.+124    	; 0x2c76 <log_getErrorText+0x82>
    2bfa:	fc 01       	movw	r30, r24
    2bfc:	36 81       	ldd	r19, Z+6	; 0x06
    2bfe:	67 81       	ldd	r22, Z+7	; 0x07
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	34 c0       	rjmp	.+104    	; 0x2c6c <log_getErrorText+0x78>
    2c04:	42 2f       	mov	r20, r18
    2c06:	50 e0       	ldi	r21, 0x00	; 0
    2c08:	fa 01       	movw	r30, r20
    2c0a:	ee 0f       	add	r30, r30
    2c0c:	ff 1f       	adc	r31, r31
    2c0e:	cf 01       	movw	r24, r30
    2c10:	88 0f       	add	r24, r24
    2c12:	99 1f       	adc	r25, r25
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	e8 0f       	add	r30, r24
    2c1e:	f9 1f       	adc	r31, r25
    2c20:	e6 55       	subi	r30, 0x56	; 86
    2c22:	fe 4f       	sbci	r31, 0xFE	; 254
    2c24:	84 91       	lpm	r24, Z
    2c26:	38 13       	cpse	r19, r24
    2c28:	20 c0       	rjmp	.+64     	; 0x2c6a <log_getErrorText+0x76>
    2c2a:	fa 01       	movw	r30, r20
    2c2c:	ee 0f       	add	r30, r30
    2c2e:	ff 1f       	adc	r31, r31
    2c30:	cf 01       	movw	r24, r30
    2c32:	88 0f       	add	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	88 0f       	add	r24, r24
    2c3c:	99 1f       	adc	r25, r25
    2c3e:	e8 0f       	add	r30, r24
    2c40:	f9 1f       	adc	r31, r25
    2c42:	e5 55       	subi	r30, 0x55	; 85
    2c44:	fe 4f       	sbci	r31, 0xFE	; 254
    2c46:	84 91       	lpm	r24, Z
    2c48:	68 13       	cpse	r22, r24
    2c4a:	0f c0       	rjmp	.+30     	; 0x2c6a <log_getErrorText+0x76>
    2c4c:	44 0f       	add	r20, r20
    2c4e:	55 1f       	adc	r21, r21
    2c50:	ca 01       	movw	r24, r20
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	88 0f       	add	r24, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	88 0f       	add	r24, r24
    2c5c:	99 1f       	adc	r25, r25
    2c5e:	48 0f       	add	r20, r24
    2c60:	59 1f       	adc	r21, r25
    2c62:	ca 01       	movw	r24, r20
    2c64:	84 55       	subi	r24, 0x54	; 84
    2c66:	9e 4f       	sbci	r25, 0xFE	; 254
    2c68:	08 95       	ret
    2c6a:	2f 5f       	subi	r18, 0xFF	; 255
    2c6c:	20 31       	cpi	r18, 0x10	; 16
    2c6e:	50 f2       	brcs	.-108    	; 0x2c04 <log_getErrorText+0x10>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	08 95       	ret
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	08 95       	ret

00002c7c <logCheckUnreadErrorLogs>:
    2c7c:	cf 93       	push	r28
    2c7e:	73 df       	rcall	.-282    	; 0x2b66 <log_count>
    2c80:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <log_unreadErrors>
    2c84:	81 11       	cpse	r24, r1
    2c86:	14 c0       	rjmp	.+40     	; 0x2cb0 <logCheckUnreadErrorLogs+0x34>
    2c88:	17 c0       	rjmp	.+46     	; 0x2cb8 <logCheckUnreadErrorLogs+0x3c>
    2c8a:	8c 2f       	mov	r24, r28
    2c8c:	8b df       	rcall	.-234    	; 0x2ba4 <log_getLog>
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	61 f0       	breq	.+24     	; 0x2caa <logCheckUnreadErrorLogs+0x2e>
    2c92:	fc 01       	movw	r30, r24
    2c94:	24 81       	ldd	r18, Z+4	; 0x04
    2c96:	20 32       	cpi	r18, 0x20	; 32
    2c98:	51 f0       	breq	.+20     	; 0x2cae <logCheckUnreadErrorLogs+0x32>
    2c9a:	95 81       	ldd	r25, Z+5	; 0x05
    2c9c:	8c 2f       	mov	r24, r28
    2c9e:	95 34       	cpi	r25, 0x45	; 69
    2ca0:	39 f4       	brne	.+14     	; 0x2cb0 <logCheckUnreadErrorLogs+0x34>
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
    2ca4:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <log_unreadErrors>
    2ca8:	07 c0       	rjmp	.+14     	; 0x2cb8 <logCheckUnreadErrorLogs+0x3c>
    2caa:	8c 2f       	mov	r24, r28
    2cac:	01 c0       	rjmp	.+2      	; 0x2cb0 <logCheckUnreadErrorLogs+0x34>
    2cae:	8c 2f       	mov	r24, r28
    2cb0:	cf ef       	ldi	r28, 0xFF	; 255
    2cb2:	c8 0f       	add	r28, r24
    2cb4:	81 11       	cpse	r24, r1
    2cb6:	e9 cf       	rjmp	.-46     	; 0x2c8a <logCheckUnreadErrorLogs+0xe>
    2cb8:	cf 91       	pop	r28
    2cba:	08 95       	ret

00002cbc <log_getShortTextFromPtr>:
    2cbc:	1f 93       	push	r17
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <log_getShortTextFromPtr+0xc>
    2cc6:	7b c0       	rjmp	.+246    	; 0x2dbe <log_getShortTextFromPtr+0x102>
    2cc8:	16 2f       	mov	r17, r22
    2cca:	ec 01       	movw	r28, r24
    2ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    2cce:	88 23       	and	r24, r24
    2cd0:	79 f0       	breq	.+30     	; 0x2cf0 <log_getShortTextFromPtr+0x34>
    2cd2:	60 ed       	ldi	r22, 0xD0	; 208
    2cd4:	73 e0       	ldi	r23, 0x03	; 3
    2cd6:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    2cda:	bc 01       	movw	r22, r24
    2cdc:	6f 5f       	subi	r22, 0xFF	; 255
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	28 e6       	ldi	r18, 0x68	; 104
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	20 83       	st	Z, r18
    2ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce8:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    2cec:	dc 01       	movw	r26, r24
    2cee:	2f c0       	rjmp	.+94     	; 0x2d4e <log_getShortTextFromPtr+0x92>
    2cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf2:	88 23       	and	r24, r24
    2cf4:	79 f0       	breq	.+30     	; 0x2d14 <log_getShortTextFromPtr+0x58>
    2cf6:	60 ed       	ldi	r22, 0xD0	; 208
    2cf8:	73 e0       	ldi	r23, 0x03	; 3
    2cfa:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    2cfe:	bc 01       	movw	r22, r24
    2d00:	6f 5f       	subi	r22, 0xFF	; 255
    2d02:	7f 4f       	sbci	r23, 0xFF	; 255
    2d04:	2d e6       	ldi	r18, 0x6D	; 109
    2d06:	fc 01       	movw	r30, r24
    2d08:	20 83       	st	Z, r18
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    2d10:	dc 01       	movw	r26, r24
    2d12:	1d c0       	rjmp	.+58     	; 0x2d4e <log_getShortTextFromPtr+0x92>
    2d14:	60 ed       	ldi	r22, 0xD0	; 208
    2d16:	73 e0       	ldi	r23, 0x03	; 3
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    2d1e:	fc 01       	movw	r30, r24
    2d20:	83 e7       	ldi	r24, 0x73	; 115
    2d22:	80 83       	st	Z, r24
    2d24:	98 81       	ld	r25, Y
    2d26:	99 0f       	add	r25, r25
    2d28:	20 e0       	ldi	r18, 0x00	; 0
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <log_getShortTextFromPtr+0x74>
    2d2c:	99 51       	subi	r25, 0x19	; 25
    2d2e:	2f 5f       	subi	r18, 0xFF	; 255
    2d30:	99 31       	cpi	r25, 0x19	; 25
    2d32:	e0 f7       	brcc	.-8      	; 0x2d2c <log_getShortTextFromPtr+0x70>
    2d34:	20 5d       	subi	r18, 0xD0	; 208
    2d36:	21 83       	std	Z+1, r18	; 0x01
    2d38:	99 0f       	add	r25, r25
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <log_getShortTextFromPtr+0x86>
    2d3e:	95 50       	subi	r25, 0x05	; 5
    2d40:	2f 5f       	subi	r18, 0xFF	; 255
    2d42:	95 30       	cpi	r25, 0x05	; 5
    2d44:	e0 f7       	brcc	.-8      	; 0x2d3e <log_getShortTextFromPtr+0x82>
    2d46:	df 01       	movw	r26, r30
    2d48:	13 96       	adiw	r26, 0x03	; 3
    2d4a:	20 5d       	subi	r18, 0xD0	; 208
    2d4c:	22 83       	std	Z+2, r18	; 0x02
    2d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d50:	90 34       	cpi	r25, 0x40	; 64
    2d52:	51 f0       	breq	.+20     	; 0x2d68 <log_getShortTextFromPtr+0xac>
    2d54:	90 38       	cpi	r25, 0x80	; 128
    2d56:	19 f0       	breq	.+6      	; 0x2d5e <log_getShortTextFromPtr+0xa2>
    2d58:	90 32       	cpi	r25, 0x20	; 32
    2d5a:	81 f4       	brne	.+32     	; 0x2d7c <log_getShortTextFromPtr+0xc0>
    2d5c:	0a c0       	rjmp	.+20     	; 0x2d72 <log_getShortTextFromPtr+0xb6>
    2d5e:	fd 01       	movw	r30, r26
    2d60:	31 96       	adiw	r30, 0x01	; 1
    2d62:	8a e2       	ldi	r24, 0x2A	; 42
    2d64:	8c 93       	st	X, r24
    2d66:	0e c0       	rjmp	.+28     	; 0x2d84 <log_getShortTextFromPtr+0xc8>
    2d68:	fd 01       	movw	r30, r26
    2d6a:	31 96       	adiw	r30, 0x01	; 1
    2d6c:	85 ea       	ldi	r24, 0xA5	; 165
    2d6e:	8c 93       	st	X, r24
    2d70:	09 c0       	rjmp	.+18     	; 0x2d84 <log_getShortTextFromPtr+0xc8>
    2d72:	fd 01       	movw	r30, r26
    2d74:	31 96       	adiw	r30, 0x01	; 1
    2d76:	80 e2       	ldi	r24, 0x20	; 32
    2d78:	8c 93       	st	X, r24
    2d7a:	04 c0       	rjmp	.+8      	; 0x2d84 <log_getShortTextFromPtr+0xc8>
    2d7c:	fd 01       	movw	r30, r26
    2d7e:	31 96       	adiw	r30, 0x01	; 1
    2d80:	8f e3       	ldi	r24, 0x3F	; 63
    2d82:	8c 93       	st	X, r24
    2d84:	bf 01       	movw	r22, r30
    2d86:	6f 5f       	subi	r22, 0xFF	; 255
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	80 83       	st	Z, r24
    2d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2d90:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    2d94:	bc 01       	movw	r22, r24
    2d96:	8f 81       	ldd	r24, Y+7	; 0x07
    2d98:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	6f 5f       	subi	r22, 0xFF	; 255
    2da0:	7f 4f       	sbci	r23, 0xFF	; 255
    2da2:	2d e2       	ldi	r18, 0x2D	; 45
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 83       	st	Z, r18
    2da8:	88 85       	ldd	r24, Y+8	; 0x08
    2daa:	99 85       	ldd	r25, Y+9	; 0x09
    2dac:	0e 94 a6 3c 	call	0x794c	; 0x794c <putChar_word>
    2db0:	fc 01       	movw	r30, r24
    2db2:	10 82       	st	Z, r1
    2db4:	1f 3f       	cpi	r17, 0xFF	; 255
    2db6:	41 f0       	breq	.+16     	; 0x2dc8 <log_getShortTextFromPtr+0x10c>
    2db8:	1c 83       	std	Y+4, r17	; 0x04
    2dba:	60 df       	rcall	.-320    	; 0x2c7c <logCheckUnreadErrorLogs>
    2dbc:	05 c0       	rjmp	.+10     	; 0x2dc8 <log_getShortTextFromPtr+0x10c>
    2dbe:	e0 ed       	ldi	r30, 0xD0	; 208
    2dc0:	f3 e0       	ldi	r31, 0x03	; 3
    2dc2:	8d e2       	ldi	r24, 0x2D	; 45
    2dc4:	80 83       	st	Z, r24
    2dc6:	11 82       	std	Z+1, r1	; 0x01
    2dc8:	80 ed       	ldi	r24, 0xD0	; 208
    2dca:	93 e0       	ldi	r25, 0x03	; 3
    2dcc:	df 91       	pop	r29
    2dce:	cf 91       	pop	r28
    2dd0:	1f 91       	pop	r17
    2dd2:	08 95       	ret

00002dd4 <log_put>:
    2dd4:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2dd8:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2ddc:	a4 e6       	ldi	r26, 0x64	; 100
    2dde:	b2 e0       	ldi	r27, 0x02	; 2
    2de0:	9c 91       	ld	r25, X
    2de2:	90 83       	st	Z, r25
    2de4:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2de8:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2dec:	11 96       	adiw	r26, 0x01	; 1
    2dee:	9c 91       	ld	r25, X
    2df0:	11 97       	sbiw	r26, 0x01	; 1
    2df2:	91 83       	std	Z+1, r25	; 0x01
    2df4:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2df8:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2dfc:	12 96       	adiw	r26, 0x02	; 2
    2dfe:	9c 91       	ld	r25, X
    2e00:	12 97       	sbiw	r26, 0x02	; 2
    2e02:	92 83       	std	Z+2, r25	; 0x02
    2e04:	13 96       	adiw	r26, 0x03	; 3
    2e06:	9c 91       	ld	r25, X
    2e08:	93 83       	std	Z+3, r25	; 0x03
    2e0a:	25 83       	std	Z+5, r18	; 0x05
    2e0c:	86 83       	std	Z+6, r24	; 0x06
    2e0e:	67 83       	std	Z+7, r22	; 0x07
    2e10:	51 87       	std	Z+9, r21	; 0x09
    2e12:	40 87       	std	Z+8, r20	; 0x08
    2e14:	80 e8       	ldi	r24, 0x80	; 128
    2e16:	84 83       	std	Z+4, r24	; 0x04
    2e18:	80 91 78 16 	lds	r24, 0x1678	; 0x801678 <serUSB_Active>
    2e1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e1e:	81 f4       	brne	.+32     	; 0x2e40 <log_put+0x6c>
    2e20:	84 ea       	ldi	r24, 0xA4	; 164
    2e22:	91 e0       	ldi	r25, 0x01	; 1
    2e24:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    2e28:	6f ef       	ldi	r22, 0xFF	; 255
    2e2a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2e2e:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2e32:	44 df       	rcall	.-376    	; 0x2cbc <log_getShortTextFromPtr>
    2e34:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    2e38:	8a e2       	ldi	r24, 0x2A	; 42
    2e3a:	94 e1       	ldi	r25, 0x14	; 20
    2e3c:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    2e40:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2e44:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2e48:	0a 96       	adiw	r24, 0x0a	; 10
    2e4a:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2e4e:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2e52:	8e 57       	subi	r24, 0x7E	; 126
    2e54:	95 40       	sbci	r25, 0x05	; 5
    2e56:	39 f0       	breq	.+14     	; 0x2e66 <log_put+0x92>
    2e58:	30 f0       	brcs	.+12     	; 0x2e66 <log_put+0x92>
    2e5a:	88 ef       	ldi	r24, 0xF8	; 248
    2e5c:	93 e0       	ldi	r25, 0x03	; 3
    2e5e:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2e62:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2e66:	20 91 88 05 	lds	r18, 0x0588	; 0x800588 <pLogEnd>
    2e6a:	30 91 89 05 	lds	r19, 0x0589	; 0x800589 <pLogEnd+0x1>
    2e6e:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pLogStart>
    2e72:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <pLogStart+0x1>
    2e76:	28 17       	cp	r18, r24
    2e78:	39 07       	cpc	r19, r25
    2e7a:	79 f4       	brne	.+30     	; 0x2e9a <log_put+0xc6>
    2e7c:	0a 96       	adiw	r24, 0x0a	; 10
    2e7e:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2e82:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2e86:	8e 57       	subi	r24, 0x7E	; 126
    2e88:	95 40       	sbci	r25, 0x05	; 5
    2e8a:	39 f0       	breq	.+14     	; 0x2e9a <log_put+0xc6>
    2e8c:	30 f0       	brcs	.+12     	; 0x2e9a <log_put+0xc6>
    2e8e:	88 ef       	ldi	r24, 0xF8	; 248
    2e90:	93 e0       	ldi	r25, 0x03	; 3
    2e92:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2e96:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2e9a:	08 95       	ret

00002e9c <log_putError>:
    2e9c:	25 e4       	ldi	r18, 0x45	; 69
    2e9e:	9a df       	rcall	.-204    	; 0x2dd4 <log_put>
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
    2ea2:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <log_unreadErrors>
    2ea6:	08 95       	ret

00002ea8 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2ea8:	cf 93       	push	r28
    2eaa:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2eac:	7b de       	rcall	.-778    	; 0x2ba4 <log_getLog>
	if (pLogEntry != NULL){
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	19 f0       	breq	.+6      	; 0x2eb8 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2eb2:	6c 2f       	mov	r22, r28
    2eb4:	03 df       	rcall	.-506    	; 0x2cbc <log_getShortTextFromPtr>
    2eb6:	06 c0       	rjmp	.+12     	; 0x2ec4 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2eb8:	e0 ed       	ldi	r30, 0xD0	; 208
    2eba:	f3 e0       	ldi	r31, 0x03	; 3
    2ebc:	8d e2       	ldi	r24, 0x2D	; 45
    2ebe:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2ec0:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2ec2:	cf 01       	movw	r24, r30
	}
    2ec4:	cf 91       	pop	r28
    2ec6:	08 95       	ret

00002ec8 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2ec8:	83 db       	rcall	.-2298   	; 0x25d0 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2eca:	85 b1       	in	r24, 0x05	; 5
    2ecc:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();	// init error and event log
    2ece:	85 b9       	out	0x05, r24	; 5
    2ed0:	3f de       	rcall	.-898    	; 0x2b50 <init_log>
	init_Serial0SerUSB(); // serial port to PC
    2ed2:	0e 94 e1 39 	call	0x73c2	; 0x73c2 <init_Serial0SerUSB>
	init_message(); // init keyboard message handling
    2ed6:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <init_message>
	init_HwTimer(); // init timer interrupts and ports for module IO
    2eda:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <init_HwTimer>
	init_Timers(); // init timers
    2ede:	0e 94 57 0e 	call	0x1cae	; 0x1cae <init_Timers>
	init_ADC(); // init ADC variable and ports (for keyboard polling)
    2ee2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <init_ADC>
	init_Pipe(); // init ports and vars for module IO
    2ee6:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <init_Pipe>
	init_Serial1MIDI(); // init serial IO for MIDI
    2eea:	0e 94 22 38 	call	0x7044	; 0x7044 <init_Serial1MIDI>
	init_PipeModules(); // find out which modules are working
    2eee:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <init_PipeModules>
	init_Midi2Manual(); // init mapping midi in -> manuals
    2ef2:	0e 94 59 33 	call	0x66b2	; 0x66b2 <init_Midi2Manual>
	init_Manual2Midi(); // init mapping manuals -> midi out
    2ef6:	0e 94 99 33 	call	0x6732	; 0x6732 <init_Manual2Midi>
	init_Midi(); //  init midi handling
    2efa:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <init_Midi>
	init_Registers(); // init mapping registers - modules
    2efe:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <init_Registers>
	init_RegOut(); // init mapping registers - display of registers
    2f02:	0e 94 a9 32 	call	0x6552	; 0x6552 <init_RegOut>
	init_Manual2Module(); // init mapping manuals - modules
    2f06:	0e 94 2a 34 	call	0x6854	; 0x6854 <init_Manual2Module>
	init_SoftKeys(); // init softkeys
    2f0a:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <init_SoftKeys>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2f0e:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <eeprom_UpdateALL>
	INIT_MENU // reset menu
    2f12:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <menu_TestModulePattern>


	// BOOT MESSAGE

	lcd_init (); // init lcd
	lcd_initCG(); // init Character generator RAM in LCD
    2f16:	0b dc       	rcall	.-2026   	; 0x272e <lcd_init>
	lcd_clrscr (); // display boot message
    2f18:	ae dd       	rcall	.-1188   	; 0x2a76 <lcd_initCG>
	lcd_goto(LCD_LINE1+3);
    2f1a:	6c dc       	rcall	.-1832   	; 0x27f4 <lcd_clrscr>
    2f1c:	83 e4       	ldi	r24, 0x43	; 67
	lcd_puts_P(prog_name);
    2f1e:	65 dc       	rcall	.-1846   	; 0x27ea <lcd_goto>
    2f20:	85 ee       	ldi	r24, 0xE5	; 229
    2f22:	92 e0       	ldi	r25, 0x02	; 2
	lcd_goto(LCD_LINE2+7);
    2f24:	dd dc       	rcall	.-1606   	; 0x28e0 <lcd_puts_P>
    2f26:	8b e1       	ldi	r24, 0x1B	; 27
    2f28:	60 dc       	rcall	.-1856   	; 0x27ea <lcd_goto>
	lcd_puts_P(sw_version);
    2f2a:	82 ee       	ldi	r24, 0xE2	; 226
    2f2c:	93 e1       	ldi	r25, 0x13	; 19
    2f2e:	d8 dc       	rcall	.-1616   	; 0x28e0 <lcd_puts_P>
    2f30:	78 94       	sei
	sei(); // start timer, module handling, keyboard polling
    2f32:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f34:	47 e9       	ldi	r20, 0x97	; 151
    2f36:	8a e3       	ldi	r24, 0x3A	; 58
    2f38:	21 50       	subi	r18, 0x01	; 1
    2f3a:	40 40       	sbci	r20, 0x00	; 0
    2f3c:	80 40       	sbci	r24, 0x00	; 0
    2f3e:	e1 f7       	brne	.-8      	; 0x2f38 <main+0x70>
    2f40:	00 c0       	rjmp	.+0      	; 0x2f42 <main+0x7a>
	_delay_ms(1200); // time to show booot message
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2f42:	00 00       	nop
    2f44:	0e 94 b4 3a 	call	0x7568	; 0x7568 <init_Serial3SerESP>
	lcd_clrscr ();
    2f48:	55 dc       	rcall	.-1878   	; 0x27f4 <lcd_clrscr>

	// TURN ON POWER

	module_StartPowerOn(); // does not turn power on, but start power on cycle
    2f4a:	6f d8       	rcall	.-3874   	; 0x202a <module_StartPowerOn>
    2f4c:	8f ef       	ldi	r24, 0xFF	; 255
	MESSAGE_PIPE_HANDLING_ON // from now handle events of modules (key press etc)
    2f4e:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <msgPipe_Handling>
    2f52:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>

	menuNotActive = TRUE; // showing main screen
    2f56:	8e ef       	ldi	r24, 0xFE	; 254
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2f58:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
    2f5c:	df ef       	ldi	r29, 0xFF	; 255

	module_StartPowerOn(); // does not turn power on, but start power on cycle
	MESSAGE_PIPE_HANDLING_ON // from now handle events of modules (key press etc)

	menuNotActive = TRUE; // showing main screen
	uint8_t updateStatus = TRUE;
    2f5e:	85 b1       	in	r24, 0x05	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		#ifdef DEBUG_ON_PINS
		DEBUG_OUT_MAIN
    2f60:	8f 7c       	andi	r24, 0xCF	; 207
    2f62:	85 b9       	out	0x05, r24	; 5
    2f64:	20 91 24 14 	lds	r18, 0x1424	; 0x801424 <serESPRxInIndex>
		#endif
		// V0.60 read message from usart3 (esp)
		// --------------------------- ESP MESSAGE HANDLING --------------------------------------
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2f68:	30 91 25 14 	lds	r19, 0x1425	; 0x801425 <serESPRxInIndex+0x1>
    2f6c:	80 91 1f 14 	lds	r24, 0x141F	; 0x80141f <serESPRxOutIndex>
    2f70:	90 91 20 14 	lds	r25, 0x1420	; 0x801420 <serESPRxOutIndex+0x1>
    2f74:	28 17       	cp	r18, r24
    2f76:	39 07       	cpc	r19, r25
    2f78:	09 f4       	brne	.+2      	; 0x2f7c <main+0xb4>
    2f7a:	66 c0       	rjmp	.+204    	; 0x3048 <main+0x180>
    2f7c:	0e 94 1e 3b 	call	0x763c	; 0x763c <serial3SER_ESPReadRx>
			uint8_t esp_message = serial3SER_ESPReadRx();
    2f80:	c8 2f       	mov	r28, r24
    2f82:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
			messageFromESP = esp_message; // save for later transfer of LCD
    2f86:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2f8a:	8f e7       	ldi	r24, 0x7F	; 127
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2f8c:	8c 0f       	add	r24, r28
    2f8e:	86 30       	cpi	r24, 0x06	; 6
    2f90:	28 f4       	brcc	.+10     	; 0x2f9c <main+0xd4>
    2f92:	80 e8       	ldi	r24, 0x80	; 128
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2f94:	8c 0f       	add	r24, r28
    2f96:	0e 94 d6 2e 	call	0x5dac	; 0x5dac <message_push>
    2f9a:	56 c0       	rjmp	.+172    	; 0x3048 <main+0x180>
    2f9c:	c0 39       	cpi	r28, 0x90	; 144
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <main+0xda>
    2fa0:	53 c0       	rjmp	.+166    	; 0x3048 <main+0x180>
    2fa2:	80 91 17 14 	lds	r24, 0x1417	; 0x801417 <serESPInBuffer>
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2fa6:	80 39       	cpi	r24, 0x90	; 144
    2fa8:	09 f0       	breq	.+2      	; 0x2fac <main+0xe4>
    2faa:	4e c0       	rjmp	.+156    	; 0x3048 <main+0x180>
    2fac:	91 e0       	ldi	r25, 0x01	; 1
    2fae:	e9 2f       	mov	r30, r25
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2fb0:	09 2e       	mov	r0, r25
    2fb2:	00 0c       	add	r0, r0
    2fb4:	ff 0b       	sbc	r31, r31
    2fb6:	e9 5e       	subi	r30, 0xE9	; 233
    2fb8:	fb 4e       	sbci	r31, 0xEB	; 235
    2fba:	80 81       	ld	r24, Z
    2fbc:	8d 33       	cpi	r24, 0x3D	; 61
    2fbe:	19 f0       	breq	.+6      	; 0x2fc6 <main+0xfe>
    2fc0:	9f 5f       	subi	r25, 0xFF	; 255
							break;
						}
						i++;
    2fc2:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2fc4:	a4 f3       	brlt	.-24     	; 0x2fae <main+0xe6>
    2fc6:	98 30       	cpi	r25, 0x08	; 8
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2fc8:	0c f0       	brlt	.+2      	; 0x2fcc <main+0x104>
    2fca:	3e c0       	rjmp	.+124    	; 0x3048 <main+0x180>
    2fcc:	89 2f       	mov	r24, r25
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2fce:	85 95       	asr	r24
    2fd0:	20 e0       	ldi	r18, 0x00	; 0
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2fd2:	06 c0       	rjmp	.+12     	; 0x2fe0 <main+0x118>
    2fd4:	e2 2f       	mov	r30, r18
							serESPMidiTmp[j] = 0;
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	ef 58       	subi	r30, 0x8F	; 143
    2fda:	f9 4e       	sbci	r31, 0xE9	; 233
    2fdc:	10 82       	st	Z, r1
    2fde:	2f 5f       	subi	r18, 0xFF	; 255
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2fe0:	23 30       	cpi	r18, 0x03	; 3
    2fe2:	c0 f3       	brcs	.-16     	; 0x2fd4 <main+0x10c>
    2fe4:	2c c0       	rjmp	.+88     	; 0x303e <main+0x176>
    2fe6:	e9 2f       	mov	r30, r25
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2fe8:	09 2e       	mov	r0, r25
    2fea:	00 0c       	add	r0, r0
    2fec:	ff 0b       	sbc	r31, r31
    2fee:	e9 5e       	subi	r30, 0xE9	; 233
    2ff0:	fb 4e       	sbci	r31, 0xEB	; 235
    2ff2:	30 81       	ld	r19, Z
    2ff4:	20 ed       	ldi	r18, 0xD0	; 208
    2ff6:	23 0f       	add	r18, r19
    2ff8:	2a 30       	cpi	r18, 0x0A	; 10
							if (asciiData > 9){
    2ffa:	10 f0       	brcs	.+4      	; 0x3000 <main+0x138>
    2ffc:	27 ed       	ldi	r18, 0xD7	; 215
								asciiData = asciiData - (0x0A - 'A' + '0');
    2ffe:	23 0f       	add	r18, r19
    3000:	a2 2f       	mov	r26, r18
							}
							asciiData &= 0x0F;
    3002:	af 70       	andi	r26, 0x0F	; 15
    3004:	e1 e7       	ldi	r30, 0x71	; 113
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    3006:	f6 e1       	ldi	r31, 0x16	; 22
    3008:	62 81       	ldd	r22, Z+2	; 0x02
    300a:	20 e1       	ldi	r18, 0x10	; 16
    300c:	62 9f       	mul	r22, r18
    300e:	b0 01       	movw	r22, r0
    3010:	11 24       	eor	r1, r1
    3012:	41 81       	ldd	r20, Z+1	; 0x01
    3014:	24 2f       	mov	r18, r20
    3016:	22 95       	swap	r18
    3018:	2f 70       	andi	r18, 0x0F	; 15
    301a:	62 2b       	or	r22, r18
    301c:	62 83       	std	Z+2, r22	; 0x02
    301e:	20 e1       	ldi	r18, 0x10	; 16
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    3020:	42 9f       	mul	r20, r18
    3022:	a0 01       	movw	r20, r0
    3024:	11 24       	eor	r1, r1
    3026:	20 81       	ld	r18, Z
    3028:	32 2f       	mov	r19, r18
    302a:	32 95       	swap	r19
    302c:	3f 70       	andi	r19, 0x0F	; 15
    302e:	43 2b       	or	r20, r19
    3030:	41 83       	std	Z+1, r20	; 0x01
    3032:	40 e1       	ldi	r20, 0x10	; 16
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    3034:	24 9f       	mul	r18, r20
    3036:	90 01       	movw	r18, r0
    3038:	11 24       	eor	r1, r1
    303a:	2a 2b       	or	r18, r26
    303c:	20 83       	st	Z, r18
    303e:	91 50       	subi	r25, 0x01	; 1
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    3040:	19 16       	cp	r1, r25
    3042:	8c f2       	brlt	.-94     	; 0x2fe6 <main+0x11e>
    3044:	0e 94 ef 36 	call	0x6dde	; 0x6dde <proc_ESPmidi>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    3048:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <message_status>
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU HANDLING ----------------------
		if MESSAGE_PENDING {
    304c:	88 23       	and	r24, r24
    304e:	09 f4       	brne	.+2      	; 0x3052 <main+0x18a>
    3050:	55 c0       	rjmp	.+170    	; 0x30fc <main+0x234>
			// key press has to be processed
			DEBUG_OUT_MENU
    3052:	85 b1       	in	r24, 0x05	; 5
    3054:	80 63       	ori	r24, 0x30	; 48
    3056:	85 b9       	out	0x05, r24	; 5
			if (lcd_displayingMessage == TRUE) {
    3058:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd_displayingMessage>
    305c:	8f 3f       	cpi	r24, 0xFF	; 255
    305e:	09 f4       	brne	.+2      	; 0x3062 <main+0x19a>
				// if message is beeing displayed: first clear message
				lcd_message_clear();
    3060:	36 dd       	rcall	.-1428   	; 0x2ace <lcd_message_clear>
    3062:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <message_get>
			}
			uint8_t keyMessage = message_get();
    3066:	c8 2f       	mov	r28, r24
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    3068:	86 38       	cpi	r24, 0x86	; 134
    306a:	b1 f4       	brne	.+44     	; 0x3098 <main+0x1d0>
				// PANIC BUTTON
				midiSendAllNotesOff();
    306c:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <midiSendAllNotesOff>
				midi_AllManualsOff();
    3070:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <midi_AllManualsOff>
				midi_resetRegisters();
    3074:	0e 94 41 32 	call	0x6482	; 0x6482 <midi_resetRegisters>
				midi_CouplerReset();
    3078:	0e 94 57 2f 	call	0x5eae	; 0x5eae <midi_CouplerReset>
				init_log(); // clear log V 0.70
    307c:	69 dd       	rcall	.-1326   	; 0x2b50 <init_log>
    307e:	10 92 67 15 	sts	0x1567, r1	; 0x801567 <midiRxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    3082:	10 92 70 16 	sts	0x1670, r1	; 0x801670 <midiTxBuffUsage>
				POWER_ON
    3086:	85 b1       	in	r24, 0x05	; 5
    3088:	80 64       	ori	r24, 0x40	; 64
    308a:	85 b9       	out	0x05, r24	; 5
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    308c:	83 e1       	ldi	r24, 0x13	; 19
    308e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
				lcd_message_P(panicString);
    3092:	8a ec       	ldi	r24, 0xCA	; 202
    3094:	92 e0       	ldi	r25, 0x02	; 2
    3096:	7f dc       	rcall	.-1794   	; 0x2996 <lcd_message_P>
    3098:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
			}
			if (menuNotActive == TRUE) {
    309c:	8f 3f       	cpi	r24, 0xFF	; 255
    309e:	f9 f4       	brne	.+62     	; 0x30de <main+0x216>
    30a0:	8c 2f       	mov	r24, r28
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    30a2:	8f 73       	andi	r24, 0x3F	; 63
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    30a4:	c5 30       	cpi	r28, 0x05	; 5
    30a6:	69 f4       	brne	.+26     	; 0x30c2 <main+0x1fa>
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	70 e0       	ldi	r23, 0x00	; 0
    30ac:	80 e0       	ldi	r24, 0x00	; 0
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	0e 94 46 22 	call	0x448c	; 0x448c <menu_Init>
					menu_InitLCD(); //display menu
    30b4:	0e 94 18 2b 	call	0x5630	; 0x5630 <menu_InitLCD>
					menuNotActive = FALSE; // notify that menu is displayed
    30b8:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <menuNotActive>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	0b d8       	rcall	.-4074   	; 0x20d6 <softKey_WantLong>
    30c0:	1d c0       	rjmp	.+58     	; 0x30fc <main+0x234>
    30c2:	9f ef       	ldi	r25, 0xFF	; 255
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    30c4:	98 0f       	add	r25, r24
    30c6:	94 30       	cpi	r25, 0x04	; 4
    30c8:	c8 f4       	brcc	.+50     	; 0x30fc <main+0x234>
    30ca:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <softKey_MessageKey_ToSoftKeyNr>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    30ce:	6c 2f       	mov	r22, r28
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    30d0:	0e 94 49 2e 	call	0x5c92	; 0x5c92 <softKey_Execute>
    30d4:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>
    30d8:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <softKeys_toLCD>
					softKeys_toLCD();
    30dc:	0f c0       	rjmp	.+30     	; 0x30fc <main+0x234>
    30de:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    30e2:	81 11       	cpse	r24, r1
    30e4:	06 c0       	rjmp	.+12     	; 0x30f2 <main+0x22a>
    30e6:	8c 2f       	mov	r24, r28
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    30e8:	0e 94 1f 2b 	call	0x563e	; 0x563e <menu_ProcessMessage>
    30ec:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>
    30f0:	05 c0       	rjmp	.+10     	; 0x30fc <main+0x234>
    30f2:	8d ef       	ldi	r24, 0xFD	; 253
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    30f4:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    30f8:	0e 94 57 29 	call	0x52ae	; 0x52ae <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    30fc:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    3100:	8f 3f       	cpi	r24, 0xFF	; 255
    3102:	71 f4       	brne	.+28     	; 0x3120 <main+0x258>
    3104:	df 3f       	cpi	r29, 0xFF	; 255
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    3106:	69 f4       	brne	.+26     	; 0x3122 <main+0x25a>
    3108:	0e 94 64 2a 	call	0x54c8	; 0x54c8 <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    310c:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <softKeys_toLCD>
				softKeys_toLCD();
    3110:	8f ef       	ldi	r24, 0xFF	; 255
				softKey_WantLong(TRUE);
    3112:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <softKey_WantLong>
    3116:	8f ef       	ldi	r24, 0xFF	; 255
				prog_UpdDisplay = TRUE; // update program display
    3118:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    311c:	d0 e0       	ldi	r29, 0x00	; 0
    311e:	01 c0       	rjmp	.+2      	; 0x3122 <main+0x25a>
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventually after next menu exit
    3120:	df ef       	ldi	r29, 0xFF	; 255
		}
		#ifdef DEBUG_ON_PINS
		DEBUG_OUT_MAIN
    3122:	85 b1       	in	r24, 0x05	; 5
    3124:	8f 7c       	andi	r24, 0xCF	; 207
    3126:	85 b9       	out	0x05, r24	; 5
		#endif
		// ------------------------- TIMER_MESSAGE_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MESSAGE_LCDCLEAR) {
    3128:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <swTimer+0xe>
    312c:	81 11       	cpse	r24, r1
    312e:	04 c0       	rjmp	.+8      	; 0x3138 <main+0x270>
			lcd_message_clear();
    3130:	ce dc       	rcall	.-1636   	; 0x2ace <lcd_message_clear>
    3132:	8f ef       	ldi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MESSAGE_LCDCLEAR)
    3134:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <swTimer+0xe>
    3138:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    313c:	81 11       	cpse	r24, r1
    313e:	0a c0       	rjmp	.+20     	; 0x3154 <main+0x28c>
    3140:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    3144:	88 23       	and	r24, r24
    3146:	19 f0       	breq	.+6      	; 0x314e <main+0x286>
    3148:	0e 94 57 29 	call	0x52ae	; 0x52ae <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    314c:	03 c0       	rjmp	.+6      	; 0x3154 <main+0x28c>
    314e:	8f ef       	ldi	r24, 0xFF	; 255
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    3150:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <swTimer+0xc>
    3154:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    3158:	81 11       	cpse	r24, r1
    315a:	1b c0       	rjmp	.+54     	; 0x3192 <main+0x2ca>
			module_PowerControl(); //
    315c:	0e 94 25 10 	call	0x204a	; 0x204a <module_PowerControl>
			menu_showPowerState();
    3160:	0e 94 95 2e 	call	0x5d2a	; 0x5d2a <menu_showPowerState>
			if (menuNotActive == TRUE) {
    3164:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
    3168:	8f 3f       	cpi	r24, 0xFF	; 255
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    316a:	99 f4       	brne	.+38     	; 0x3192 <main+0x2ca>
    316c:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
				lcd_goto(LCD_LINE2);
    3170:	84 e1       	ldi	r24, 0x14	; 20
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    3172:	3b db       	rcall	.-2442   	; 0x27ea <lcd_goto>
    3174:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    3178:	81 30       	cpi	r24, 0x01	; 1
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    317a:	21 f4       	brne	.+8      	; 0x3184 <main+0x2bc>
    317c:	83 ed       	ldi	r24, 0xD3	; 211
    317e:	92 e0       	ldi	r25, 0x02	; 2
    3180:	af db       	rcall	.-2210   	; 0x28e0 <lcd_puts_P>
    3182:	05 c0       	rjmp	.+10     	; 0x318e <main+0x2c6>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    3184:	82 31       	cpi	r24, 0x12	; 18
    3186:	19 f4       	brne	.+6      	; 0x318e <main+0x2c6>
					lcd_blank(LCD_LINELEN);
    3188:	84 e1       	ldi	r24, 0x14	; 20
    318a:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <lcd_blank>
				}
				lcd_goto(saveCursor);
    318e:	8c 2f       	mov	r24, r28
    3190:	2c db       	rcall	.-2472   	; 0x27ea <lcd_goto>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    3192:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <messageFromESP>
    3196:	9f e7       	ldi	r25, 0x7F	; 127
    3198:	98 0f       	add	r25, r24
    319a:	96 30       	cpi	r25, 0x06	; 6
    319c:	10 f0       	brcs	.+4      	; 0x31a2 <main+0x2da>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    319e:	8e 3f       	cpi	r24, 0xFE	; 254
    31a0:	09 f5       	brne	.+66     	; 0x31e4 <main+0x31c>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    31a2:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    31a6:	8f 3f       	cpi	r24, 0xFF	; 255
    31a8:	31 f4       	brne	.+12     	; 0x31b6 <main+0x2ee>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    31aa:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    31ae:	31 db       	rcall	.-2462   	; 0x2812 <getCursorFromLCDRAMcursor>
    31b0:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <serial3SER_ESPSend>
    31b4:	03 c0       	rjmp	.+6      	; 0x31bc <main+0x2f4>
    31b6:	8f e7       	ldi	r24, 0x7F	; 127
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    31b8:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <serial3SER_ESPSend>
    31bc:	81 e8       	ldi	r24, 0x81	; 129
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    31be:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <serial3SER_ESPSend>
    31c2:	c0 e0       	ldi	r28, 0x00	; 0
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    31c4:	ec e7       	ldi	r30, 0x7C	; 124
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    31c6:	f3 e0       	ldi	r31, 0x03	; 3
    31c8:	08 c0       	rjmp	.+16     	; 0x31da <main+0x312>
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    31ca:	8f 01       	movw	r16, r30
				serial3SER_ESPSend(*pChar++);
    31cc:	0f 5f       	subi	r16, 0xFF	; 255
    31ce:	1f 4f       	sbci	r17, 0xFF	; 255
    31d0:	80 81       	ld	r24, Z
    31d2:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <serial3SER_ESPSend>
    31d6:	cf 5f       	subi	r28, 0xFF	; 255
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    31d8:	f8 01       	movw	r30, r16
				serial3SER_ESPSend(*pChar++);
    31da:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    31dc:	b0 f3       	brcs	.-20     	; 0x31ca <main+0x302>
    31de:	80 e8       	ldi	r24, 0x80	; 128
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    31e0:	0e 94 e8 3a 	call	0x75d0	; 0x75d0 <serial3SER_ESPSend>
    31e4:	8f ef       	ldi	r24, 0xFF	; 255
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    31e6:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
    31ea:	0e 94 06 38 	call	0x700c	; 0x700c <midi_CheckTxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // must we send active Sense if midi out was inactive for some time?
    31ee:	0e 94 d2 35 	call	0x6ba4	; 0x6ba4 <midi_CheckRxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of missing incoming Active Sense
    31f2:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    31f6:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
		// status line lin0 left corner: midi in display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)){
    31fa:	88 23       	and	r24, r24
    31fc:	29 f0       	breq	.+10     	; 0x3208 <main+0x340>
    31fe:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
    3202:	8f 3f       	cpi	r24, 0xFF	; 255
    3204:	09 f0       	breq	.+2      	; 0x3208 <main+0x340>
    3206:	70 c0       	rjmp	.+224    	; 0x32e8 <main+0x420>
			if (prog_Display > PROGR_MAX) {
    3208:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    320c:	80 34       	cpi	r24, 0x40	; 64
    320e:	08 f4       	brcc	.+2      	; 0x3212 <main+0x34a>
				// only if timer for midi in is not running at all (or just has elapsed)
				if (midiLastInNote != MIDI_NOTE_NONE) {
    3210:	6b c0       	rjmp	.+214    	; 0x32e8 <main+0x420>
    3212:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    3216:	8f 3f       	cpi	r24, 0xFF	; 255
    3218:	91 f1       	breq	.+100    	; 0x327e <main+0x3b6>
    321a:	80 e0       	ldi	r24, 0x00	; 0
					if (midiLastInManual == MANUAL_NONE) {
    321c:	e6 da       	rcall	.-2612   	; 0x27ea <lcd_goto>
    321e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    3222:	8f 3f       	cpi	r24, 0xFF	; 255
    3224:	69 f4       	brne	.+26     	; 0x3240 <main+0x378>
    3226:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <midiLastInChannel>
						lcd_putc('?');
    322a:	0e 94 db 3d 	call	0x7bb6	; 0x7bb6 <lcd_ChannelOut>
						lcd_noteOut(midiLastInNote);
    322e:	8f e3       	ldi	r24, 0x3F	; 63
    3230:	06 db       	rcall	.-2548   	; 0x283e <lcd_putc>
    3232:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(' ');
    3236:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <lcd_noteOut>
    323a:	80 e2       	ldi	r24, 0x20	; 32
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    323c:	00 db       	rcall	.-2560   	; 0x283e <lcd_putc>
    323e:	0c c0       	rjmp	.+24     	; 0x3258 <main+0x390>
    3240:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(MENU_MIDI_IO_SIGN);
    3244:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <lcd_noteOut>
    3248:	8e e7       	ldi	r24, 0x7E	; 126
						lcd_ManualOutDec(midiLastInManual);
    324a:	f9 da       	rcall	.-2574   	; 0x283e <lcd_putc>
    324c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    3250:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <lcd_ManualOutDec>
						lcd_putc(' ');
    3254:	80 e2       	ldi	r24, 0x20	; 32
    3256:	f3 da       	rcall	.-2586   	; 0x283e <lcd_putc>
					}
					lcd_goto(oldcursor);
    3258:	8c 2f       	mov	r24, r28
    325a:	c7 da       	rcall	.-2674   	; 0x27ea <lcd_goto>
					midiLastInNote = MIDI_NOTE_NONE;
    325c:	8f ef       	ldi	r24, 0xFF	; 255
    325e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <midiLastInNote>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3262:	9f b7       	in	r25, 0x3f	; 63
					// now start timer
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    3264:	f8 94       	cli
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	06 c0       	rjmp	.+12     	; 0x3276 <main+0x3ae>
    326a:	e0 e5       	ldi	r30, 0x50	; 80
    326c:	f2 e0       	ldi	r31, 0x02	; 2
    326e:	83 e2       	ldi	r24, 0x23	; 35
    3270:	80 87       	std	Z+8, r24	; 0x08
    3272:	11 86       	std	Z+9, r1	; 0x09
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    3274:	80 e0       	ldi	r24, 0x00	; 0
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    3276:	81 11       	cpse	r24, r1
    3278:	f8 cf       	rjmp	.-16     	; 0x326a <main+0x3a2>
    327a:	9f bf       	out	0x3f, r25	; 63
    327c:	35 c0       	rjmp	.+106    	; 0x32e8 <main+0x420>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    327e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    3282:	8f 3f       	cpi	r24, 0xFF	; 255
					lcd_putc('p');
    3284:	21 f1       	breq	.+72     	; 0x32ce <main+0x406>
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	b0 da       	rcall	.-2720   	; 0x27ea <lcd_goto>
					lcd_putc('A'+((midiLastProgram >> 3) & 0x07));
    328a:	80 e7       	ldi	r24, 0x70	; 112
    328c:	d8 da       	rcall	.-2640   	; 0x283e <lcd_putc>
    328e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    3292:	86 95       	lsr	r24
    3294:	86 95       	lsr	r24
    3296:	86 95       	lsr	r24
    3298:	87 70       	andi	r24, 0x07	; 7
    329a:	8f 5b       	subi	r24, 0xBF	; 191
					lcd_putc('1'+(midiLastProgram & 0x07)); // V 0.81 show Prog Nr and Bank
    329c:	d0 da       	rcall	.-2656   	; 0x283e <lcd_putc>
    329e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    32a2:	87 70       	andi	r24, 0x07	; 7
    32a4:	8f 5c       	subi	r24, 0xCF	; 207
					//lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    32a6:	cb da       	rcall	.-2666   	; 0x283e <lcd_putc>
    32a8:	8e e7       	ldi	r24, 0x7E	; 126
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    32aa:	c9 da       	rcall	.-2670   	; 0x283e <lcd_putc>
    32ac:	8f ef       	ldi	r24, 0xFF	; 255
    32ae:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <midiLastProgram>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    32b2:	9f b7       	in	r25, 0x3f	; 63
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    32b4:	f8 94       	cli
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	06 c0       	rjmp	.+12     	; 0x32c6 <main+0x3fe>
    32ba:	e0 e5       	ldi	r30, 0x50	; 80
    32bc:	f2 e0       	ldi	r31, 0x02	; 2
    32be:	83 e2       	ldi	r24, 0x23	; 35
    32c0:	80 87       	std	Z+8, r24	; 0x08
    32c2:	11 86       	std	Z+9, r1	; 0x09
    32c4:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    32c6:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    32c8:	f8 cf       	rjmp	.-16     	; 0x32ba <main+0x3f2>
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    32ca:	9f bf       	out	0x3f, r25	; 63
    32cc:	0d c0       	rjmp	.+26     	; 0x32e8 <main+0x420>
    32ce:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    32d2:	81 11       	cpse	r24, r1
					lcd_blank(6);
    32d4:	09 c0       	rjmp	.+18     	; 0x32e8 <main+0x420>
    32d6:	89 da       	rcall	.-2798   	; 0x27ea <lcd_goto>
    32d8:	86 e0       	ldi	r24, 0x06	; 6
					lcd_goto(oldcursor);
    32da:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <lcd_blank>
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    32de:	8c 2f       	mov	r24, r28
    32e0:	84 da       	rcall	.-2808   	; 0x27ea <lcd_goto>
    32e2:	8f ef       	ldi	r24, 0xFF	; 255
				}
			}
		}
		// status line lin0 right corner: midi out display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    32e4:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <swTimer+0x8>
    32e8:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    32ec:	8f 3f       	cpi	r24, 0xFF	; 255
    32ee:	21 f0       	breq	.+8      	; 0x32f8 <main+0x430>
    32f0:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    32f4:	81 11       	cpse	r24, r1
    32f6:	5c c0       	rjmp	.+184    	; 0x33b0 <main+0x4e8>
    32f8:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    32fc:	8f 3f       	cpi	r24, 0xFF	; 255
    32fe:	f9 f0       	breq	.+62     	; 0x333e <main+0x476>
    3300:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_ManualOutDec(midiLastOutManual);
    3302:	73 da       	rcall	.-2842   	; 0x27ea <lcd_goto>
    3304:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <midiLastOutManual>
				lcd_putc(MENU_MIDI_IO_SIGN);
    3308:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <lcd_ManualOutDec>
				lcd_noteOut(midiLastOutNote);
    330c:	8e e7       	ldi	r24, 0x7E	; 126
    330e:	97 da       	rcall	.-2770   	; 0x283e <lcd_putc>
    3310:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
				lcd_goto(oldcursor);
    3314:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <lcd_noteOut>
    3318:	8c 2f       	mov	r24, r28
				midiLastOutNote = MIDI_NOTE_NONE;
    331a:	67 da       	rcall	.-2866   	; 0x27ea <lcd_goto>
    331c:	8f ef       	ldi	r24, 0xFF	; 255
    331e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <midiLastOutNote>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    3322:	9f b7       	in	r25, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	06 c0       	rjmp	.+12     	; 0x3336 <main+0x46e>
    332a:	e0 e5       	ldi	r30, 0x50	; 80
    332c:	f2 e0       	ldi	r31, 0x02	; 2
    332e:	88 e2       	ldi	r24, 0x28	; 40
    3330:	82 87       	std	Z+10, r24	; 0x0a
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3332:	13 86       	std	Z+11, r1	; 0x0b
    __asm__ volatile ("" ::: "memory");
    3334:	80 e0       	ldi	r24, 0x00	; 0
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    3336:	81 11       	cpse	r24, r1
    3338:	f8 cf       	rjmp	.-16     	; 0x332a <main+0x462>
    333a:	9f bf       	out	0x3f, r25	; 63
    333c:	39 c0       	rjmp	.+114    	; 0x33b0 <main+0x4e8>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    333e:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    3342:	8f 3f       	cpi	r24, 0xFF	; 255
				lcd_putc('R');
    3344:	39 f1       	breq	.+78     	; 0x3394 <main+0x4cc>
    3346:	8f e0       	ldi	r24, 0x0F	; 15
    3348:	50 da       	rcall	.-2912   	; 0x27ea <lcd_goto>
				lcd_dec2out((midi_RegisterChanged & ~REGISTER_WAS_SET)+1); // remove MSB, add 1 for user register numbers
    334a:	82 e5       	ldi	r24, 0x52	; 82
    334c:	78 da       	rcall	.-2832   	; 0x283e <lcd_putc>
    334e:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    3352:	8f 77       	andi	r24, 0x7F	; 127
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_REG_OFF : LCD_CHAR_REG_ON); // MSB = register was set
    3354:	8f 5f       	subi	r24, 0xFF	; 255
    3356:	0e 94 0e 3c 	call	0x781c	; 0x781c <lcd_dec2out>
    335a:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    335e:	88 23       	and	r24, r24
    3360:	14 f0       	brlt	.+4      	; 0x3366 <main+0x49e>
    3362:	8a e0       	ldi	r24, 0x0A	; 10
				lcd_putc(' ');
    3364:	01 c0       	rjmp	.+2      	; 0x3368 <main+0x4a0>
    3366:	8b e0       	ldi	r24, 0x0B	; 11
    3368:	6a da       	rcall	.-2860   	; 0x283e <lcd_putc>
				lcd_goto(oldcursor);
    336a:	80 e2       	ldi	r24, 0x20	; 32
    336c:	68 da       	rcall	.-2864   	; 0x283e <lcd_putc>
    336e:	8c 2f       	mov	r24, r28
				midi_RegisterChanged = REGISTER_NONE;
    3370:	3c da       	rcall	.-2952   	; 0x27ea <lcd_goto>
    3372:	8f ef       	ldi	r24, 0xFF	; 255
    3374:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3378:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    337a:	f8 94       	cli
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	06 c0       	rjmp	.+12     	; 0x338c <main+0x4c4>
    3380:	e0 e5       	ldi	r30, 0x50	; 80
    3382:	f2 e0       	ldi	r31, 0x02	; 2
    3384:	88 e2       	ldi	r24, 0x28	; 40
    3386:	82 87       	std	Z+10, r24	; 0x0a
    3388:	13 86       	std	Z+11, r1	; 0x0b
    338a:	80 e0       	ldi	r24, 0x00	; 0
    338c:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    338e:	f8 cf       	rjmp	.-16     	; 0x3380 <main+0x4b8>
    __asm__ volatile ("" ::: "memory");
    3390:	9f bf       	out	0x3f, r25	; 63
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    3392:	0e c0       	rjmp	.+28     	; 0x33b0 <main+0x4e8>
    3394:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3398:	81 11       	cpse	r24, r1
    339a:	0a c0       	rjmp	.+20     	; 0x33b0 <main+0x4e8>
    339c:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_blank(5);
    339e:	25 da       	rcall	.-2998   	; 0x27ea <lcd_goto>
    33a0:	85 e0       	ldi	r24, 0x05	; 5
    33a2:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <lcd_blank>
				lcd_goto(oldcursor);
    33a6:	8c 2f       	mov	r24, r28
    33a8:	20 da       	rcall	.-3008   	; 0x27ea <lcd_goto>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    33aa:	8f ef       	ldi	r24, 0xFF	; 255
    33ac:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <swTimer+0xa>
			}
		}
		#endif
		//----------------------- program display line0 left corner------------------------
		if ((menuNotActive == TRUE) &&((prog_UpdDisplay == TRUE) || (TIMER_ELAPSED(TIMER_REGDISPLAY)))) {
    33b0:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
    33b4:	8f 3f       	cpi	r24, 0xFF	; 255
    33b6:	71 f5       	brne	.+92     	; 0x3414 <main+0x54c>
    33b8:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <prog_UpdDisplay>
    33bc:	8f 3f       	cpi	r24, 0xFF	; 255
    33be:	21 f0       	breq	.+8      	; 0x33c8 <main+0x500>
    33c0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <swTimer+0x12>
    33c4:	81 11       	cpse	r24, r1
    33c6:	26 c0       	rjmp	.+76     	; 0x3414 <main+0x54c>
			// 0.77: only if menu is not active!
			prog_UpdDisplay = FALSE;
    33c8:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <prog_UpdDisplay>
			TIMER_SET(TIMER_REGDISPLAY,TIMER_REGDISPLAY_MS)
    33cc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    33ce:	f8 94       	cli
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <main+0x518>
    33d4:	e0 e5       	ldi	r30, 0x50	; 80
    33d6:	f2 e0       	ldi	r31, 0x02	; 2
    33d8:	84 e1       	ldi	r24, 0x14	; 20
    33da:	82 8b       	std	Z+18, r24	; 0x12
    33dc:	13 8a       	std	Z+19, r1	; 0x13
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    33e2:	f8 cf       	rjmp	.-16     	; 0x33d4 <main+0x50c>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    33e4:	9f bf       	out	0x3f, r25	; 63
    33e6:	01 da       	rcall	.-3070   	; 0x27ea <lcd_goto>
			prog_toLcd();
    33e8:	0e 94 88 32 	call	0x6510	; 0x6510 <prog_toLcd>
			if (pipe_PowerStatus != POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    33ec:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    33f0:	81 30       	cpi	r24, 0x01	; 1
    33f2:	81 f0       	breq	.+32     	; 0x3414 <main+0x54c>
				// only if not displaying message to release keys
				if (prog_Display <= PROGR_MAX) {
    33f4:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    33f8:	80 34       	cpi	r24, 0x40	; 64
    33fa:	50 f4       	brcc	.+20     	; 0x3410 <main+0x548>
					// show register settings
					reg_toLCD(regShowHW);
    33fc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
    3400:	0e 94 ac 32 	call	0x6558	; 0x6558 <reg_toLCD>
					regShowHW = ~regShowHW; // alternate between SW output and HW read registers
    3404:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
    3408:	80 95       	com	r24
    340a:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <regShowHW>
    340e:	02 c0       	rjmp	.+4      	; 0x3414 <main+0x54c>
				} else {
					reg_ClearOnLCD();
    3410:	0e 94 30 33 	call	0x6660	; 0x6660 <reg_ClearOnLCD>
				}
			}
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    3414:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_UpTimeUpdated>
    3418:	8f 3f       	cpi	r24, 0xFF	; 255
    341a:	09 f0       	breq	.+2      	; 0x341e <main+0x556>
			time_UpTimeUpdated = FALSE;
    341c:	7c c0       	rjmp	.+248    	; 0x3516 <main+0x64e>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    341e:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <time_UpTimeUpdated>
			uint8_t oldBlink = lcd_cursorIsOn;
    3422:	f0 90 cd 03 	lds	r15, 0x03CD	; 0x8003cd <lcd_cursorPos>
			if (oldBlink == TRUE) {
    3426:	c0 91 7b 03 	lds	r28, 0x037B	; 0x80037b <lcd_cursorIsOn>
				lcd_cursoroff();
    342a:	cf 3f       	cpi	r28, 0xFF	; 255
    342c:	09 f4       	brne	.+2      	; 0x3430 <main+0x568>
			}
			char separator;
			if (*pTime == 0) {
    342e:	4a db       	rcall	.-2412   	; 0x2ac4 <lcd_cursoroff>
    3430:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <time_Uptime+0x3>
    3434:	88 23       	and	r24, r24
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    3436:	59 f0       	breq	.+22     	; 0x344e <main+0x586>
    3438:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <time_Uptime+0x1>
				// when displaying hr:min blink ":"
				separator = ':';
    343c:	80 fd       	sbrc	r24, 0
    343e:	0e c0       	rjmp	.+28     	; 0x345c <main+0x594>
    3440:	0f 2e       	mov	r0, r31
    3442:	fa e3       	ldi	r31, 0x3A	; 58
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3444:	ef 2e       	mov	r14, r31
    3446:	f0 2d       	mov	r31, r0
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    3448:	07 e6       	ldi	r16, 0x67	; 103
    344a:	12 e0       	ldi	r17, 0x02	; 2
    344c:	0c c0       	rjmp	.+24     	; 0x3466 <main+0x59e>
    344e:	0f 2e       	mov	r0, r31
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    3450:	fa e3       	ldi	r31, 0x3A	; 58
    3452:	ef 2e       	mov	r14, r31
    3454:	f0 2d       	mov	r31, r0
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    3456:	06 e6       	ldi	r16, 0x66	; 102
    3458:	12 e0       	ldi	r17, 0x02	; 2
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    345a:	05 c0       	rjmp	.+10     	; 0x3466 <main+0x59e>
    345c:	68 94       	set
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    345e:	ee 24       	eor	r14, r14
    3460:	e5 f8       	bld	r14, 5
    3462:	07 e6       	ldi	r16, 0x67	; 103
			lcd_dec2out(*(pTime--));
    3464:	12 e0       	ldi	r17, 0x02	; 2
    3466:	87 e0       	ldi	r24, 0x07	; 7
    3468:	c0 d9       	rcall	.-3200   	; 0x27ea <lcd_goto>
			lcd_putc(separator);
    346a:	f8 01       	movw	r30, r16
    346c:	80 81       	ld	r24, Z
			lcd_dec2out(*pTime);
    346e:	0e 94 0e 3c 	call	0x781c	; 0x781c <lcd_dec2out>
    3472:	8e 2d       	mov	r24, r14
    3474:	e4 d9       	rcall	.-3128   	; 0x283e <lcd_putc>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    3476:	f8 01       	movw	r30, r16
    3478:	31 97       	sbiw	r30, 0x01	; 1
			if (ovflCount > 0){
    347a:	80 81       	ld	r24, Z
    347c:	0e 94 0e 3c 	call	0x781c	; 0x781c <lcd_dec2out>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    3480:	40 91 75 16 	lds	r20, 0x1675	; 0x801675 <midiRxOvflCount>
    3484:	44 23       	and	r20, r20
    3486:	31 f0       	breq	.+12     	; 0x3494 <main+0x5cc>
				midiRxOvflCount = 0;
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	60 e0       	ldi	r22, 0x00	; 0
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	06 dd       	rcall	.-1524   	; 0x2e9c <log_putError>
			if (ovflCount > 0){
    3490:	10 92 75 16 	sts	0x1675, r1	; 0x801675 <midiRxOvflCount>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    3494:	40 91 7c 16 	lds	r20, 0x167C	; 0x80167c <midiTxOvflCount>
    3498:	44 23       	and	r20, r20
    349a:	31 f0       	breq	.+12     	; 0x34a8 <main+0x5e0>
    349c:	50 e0       	ldi	r21, 0x00	; 0
				midiTxOvflCount = 0;
    349e:	61 e0       	ldi	r22, 0x01	; 1
    34a0:	83 e0       	ldi	r24, 0x03	; 3
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    34a2:	fc dc       	rcall	.-1544   	; 0x2e9c <log_putError>
    34a4:	10 92 7c 16 	sts	0x167C, r1	; 0x80167c <midiTxOvflCount>
    34a8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    34ac:	84 ff       	sbrs	r24, 4
    34ae:	02 c0       	rjmp	.+4      	; 0x34b4 <main+0x5ec>
    34b0:	80 e2       	ldi	r24, 0x20	; 32
    34b2:	01 c0       	rjmp	.+2      	; 0x34b6 <main+0x5ee>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    34b4:	89 e0       	ldi	r24, 0x09	; 9
    34b6:	c3 d9       	rcall	.-3194   	; 0x283e <lcd_putc>
    34b8:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <log_unreadErrors>
    34bc:	8f 3f       	cpi	r24, 0xFF	; 255
    34be:	11 f4       	brne	.+4      	; 0x34c4 <main+0x5fc>
    34c0:	85 e4       	ldi	r24, 0x45	; 69
    34c2:	01 c0       	rjmp	.+2      	; 0x34c6 <main+0x5fe>
    34c4:	80 e2       	ldi	r24, 0x20	; 32
			// --- restore cursor ---
			lcd_goto(oldCursor);
    34c6:	bb d9       	rcall	.-3210   	; 0x283e <lcd_putc>
    34c8:	8f 2d       	mov	r24, r15
			if (oldBlink == TRUE) {
    34ca:	8f d9       	rcall	.-3298   	; 0x27ea <lcd_goto>
    34cc:	cf 3f       	cpi	r28, 0xFF	; 255
				lcd_cursosblink();
    34ce:	09 f4       	brne	.+2      	; 0x34d2 <main+0x60a>
    34d0:	f3 da       	rcall	.-2586   	; 0x2ab8 <lcd_cursosblink>
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    34d2:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
    34d6:	8f 3f       	cpi	r24, 0xFF	; 255
    34d8:	69 f4       	brne	.+26     	; 0x34f4 <main+0x62c>
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    34da:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    34dc:	f8 94       	cli
    34de:	81 e0       	ldi	r24, 0x01	; 1
    34e0:	06 c0       	rjmp	.+12     	; 0x34ee <main+0x626>
    34e2:	e0 e5       	ldi	r30, 0x50	; 80
    34e4:	f2 e0       	ldi	r31, 0x02	; 2
    34e6:	8d e7       	ldi	r24, 0x7D	; 125
    34e8:	80 87       	std	Z+8, r24	; 0x08
    34ea:	11 86       	std	Z+9, r1	; 0x09
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	81 11       	cpse	r24, r1
    34f0:	f8 cf       	rjmp	.-16     	; 0x34e2 <main+0x61a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    34f2:	9f bf       	out	0x3f, r25	; 63
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    34f4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    34f8:	8f 3f       	cpi	r24, 0xFF	; 255
    34fa:	69 f4       	brne	.+26     	; 0x3516 <main+0x64e>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    34fc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    34fe:	f8 94       	cli
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	06 c0       	rjmp	.+12     	; 0x3510 <main+0x648>
    3504:	e0 e5       	ldi	r30, 0x50	; 80
    3506:	f2 e0       	ldi	r31, 0x02	; 2
    3508:	8d e7       	ldi	r24, 0x7D	; 125
    350a:	82 87       	std	Z+10, r24	; 0x0a
    350c:	13 86       	std	Z+11, r1	; 0x0b
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	81 11       	cpse	r24, r1
    3512:	f8 cf       	rjmp	.-16     	; 0x3504 <main+0x63c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3514:	9f bf       	out	0x3f, r25	; 63
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    3516:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <msgPipeOverflow>
    351a:	8f 3f       	cpi	r24, 0xFF	; 255
    351c:	39 f4       	brne	.+14     	; 0x352c <main+0x664>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    351e:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <msgPipeOverflow>
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    3522:	40 e0       	ldi	r20, 0x00	; 0
    3524:	50 e0       	ldi	r21, 0x00	; 0
    3526:	60 e0       	ldi	r22, 0x00	; 0
    3528:	84 e0       	ldi	r24, 0x04	; 4
    352a:	b8 dc       	rcall	.-1680   	; 0x2e9c <log_putError>
    352c:	85 b1       	in	r24, 0x05	; 5
		}
		DEBUG_OUT_MIDI
    352e:	8f 7c       	andi	r24, 0xCF	; 207
    3530:	80 62       	ori	r24, 0x20	; 32
    3532:	85 b9       	out	0x05, r24	; 5
    3534:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <midiRxInIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    3538:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <midiRxOutIndex>
    353c:	98 17       	cp	r25, r24
    353e:	21 f0       	breq	.+8      	; 0x3548 <main+0x680>
    3540:	0e 94 1e 39 	call	0x723c	; 0x723c <serial1MIDIReadRx>
			midiIn_Process(serial1MIDIReadRx());
    3544:	0e 94 5b 36 	call	0x6cb6	; 0x6cb6 <midiIn_Process>
    3548:	0e 94 4d 2f 	call	0x5e9a	; 0x5e9a <pipeMsgStatus>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    354c:	8f 3f       	cpi	r24, 0xFF	; 255
    354e:	09 f0       	breq	.+2      	; 0x3552 <main+0x68a>
    3550:	06 cd       	rjmp	.-1524   	; 0x2f5e <main+0x96>
    3552:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <pipeMsgGet>
			midiKeyPress_Process(pipeMsgGet()); // events from module read (->midi out, couplers)
    3556:	0e 94 20 37 	call	0x6e40	; 0x6e40 <midiKeyPress_Process>
    355a:	01 cd       	rjmp	.-1534   	; 0x2f5e <main+0x96>

0000355c <menu_enterWriteModule>:
    355c:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <menuModVal>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    3560:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <menuModVal+0x1>
    3564:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <menuModVal+0x2>
    3568:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <menuModVal+0x3>
    356c:	81 e0       	ldi	r24, 0x01	; 1
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    3574:	02 c0       	rjmp	.+4      	; 0x357a <menu_enterWriteModule+0x1e>
    3576:	88 0f       	add	r24, r24
    3578:	99 1f       	adc	r25, r25
    357a:	0a 94       	dec	r0
    357c:	e2 f7       	brpl	.-8      	; 0x3576 <menu_enterWriteModule+0x1a>
    357e:	48 2f       	mov	r20, r24
    3580:	30 e0       	ldi	r19, 0x00	; 0
    3582:	e4 e6       	ldi	r30, 0x64	; 100
    3584:	f3 e0       	ldi	r31, 0x03	; 3
    3586:	22 c0       	rjmp	.+68     	; 0x35cc <menu_enterWriteModule+0x70>
    3588:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <menuModVal>
    358c:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <menuModVal+0x1>
    3590:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <menuModVal+0x2>
    3594:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <menuModVal+0x3>
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	aa 1f       	adc	r26, r26
    359e:	bb 1f       	adc	r27, r27
    35a0:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <menuModVal>
    35a4:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <menuModVal+0x1>
    35a8:	a0 93 d5 05 	sts	0x05D5, r26	; 0x8005d5 <menuModVal+0x2>
    35ac:	b0 93 d6 05 	sts	0x05D6, r27	; 0x8005d6 <menuModVal+0x3>
    35b0:	21 81       	ldd	r18, Z+1	; 0x01
    35b2:	24 23       	and	r18, r20
    35b4:	49 f0       	breq	.+18     	; 0x35c8 <menu_enterWriteModule+0x6c>
    35b6:	81 60       	ori	r24, 0x01	; 1
    35b8:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <menuModVal>
    35bc:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <menuModVal+0x1>
    35c0:	a0 93 d5 05 	sts	0x05D5, r26	; 0x8005d5 <menuModVal+0x2>
    35c4:	b0 93 d6 05 	sts	0x05D6, r27	; 0x8005d6 <menuModVal+0x3>
    35c8:	38 97       	sbiw	r30, 0x08	; 8
    35ca:	3f 5f       	subi	r19, 0xFF	; 255
    35cc:	30 32       	cpi	r19, 0x20	; 32
    35ce:	e0 f2       	brcs	.-72     	; 0x3588 <menu_enterWriteModule+0x2c>
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	08 95       	ret

000035d4 <menu_exitWriteModule>:
    35d4:	40 91 d3 05 	lds	r20, 0x05D3	; 0x8005d3 <menuModVal>
    35d8:	50 91 d4 05 	lds	r21, 0x05D4	; 0x8005d4 <menuModVal+0x1>
    35dc:	60 91 d5 05 	lds	r22, 0x05D5	; 0x8005d5 <menuModVal+0x2>
    35e0:	70 91 d6 05 	lds	r23, 0x05D6	; 0x8005d6 <menuModVal+0x3>
    35e4:	85 30       	cpi	r24, 0x05	; 5
    35e6:	09 f5       	brne	.+66     	; 0x362a <menu_exitWriteModule+0x56>
    35e8:	a1 e0       	ldi	r26, 0x01	; 1
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    35f0:	02 c0       	rjmp	.+4      	; 0x35f6 <menu_exitWriteModule+0x22>
    35f2:	aa 0f       	add	r26, r26
    35f4:	bb 1f       	adc	r27, r27
    35f6:	0a 94       	dec	r0
    35f8:	e2 f7       	brpl	.-8      	; 0x35f2 <menu_exitWriteModule+0x1e>
    35fa:	3a 2f       	mov	r19, r26
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	e4 e6       	ldi	r30, 0x64	; 100
    3600:	f3 e0       	ldi	r31, 0x03	; 3
    3602:	11 c0       	rjmp	.+34     	; 0x3626 <menu_exitWriteModule+0x52>
    3604:	77 23       	and	r23, r23
    3606:	24 f4       	brge	.+8      	; 0x3610 <menu_exitWriteModule+0x3c>
    3608:	81 81       	ldd	r24, Z+1	; 0x01
    360a:	83 2b       	or	r24, r19
    360c:	81 83       	std	Z+1, r24	; 0x01
    360e:	05 c0       	rjmp	.+10     	; 0x361a <menu_exitWriteModule+0x46>
    3610:	21 81       	ldd	r18, Z+1	; 0x01
    3612:	8a 2f       	mov	r24, r26
    3614:	80 95       	com	r24
    3616:	82 23       	and	r24, r18
    3618:	81 83       	std	Z+1, r24	; 0x01
    361a:	44 0f       	add	r20, r20
    361c:	55 1f       	adc	r21, r21
    361e:	66 1f       	adc	r22, r22
    3620:	77 1f       	adc	r23, r23
    3622:	38 97       	sbiw	r30, 0x08	; 8
    3624:	9f 5f       	subi	r25, 0xFF	; 255
    3626:	90 32       	cpi	r25, 0x20	; 32
    3628:	68 f3       	brcs	.-38     	; 0x3604 <menu_exitWriteModule+0x30>
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	08 95       	ret

0000362e <menuOnEnterModSel>:
    362e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3632:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3636:	3e 96       	adiw	r30, 0x0e	; 14
    3638:	85 91       	lpm	r24, Z+
    363a:	95 91       	lpm	r25, Z+
    363c:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <menuVmodule>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	08 95       	ret

00003644 <menuOnEnterMidiInCh>:
    3644:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3648:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    364c:	3e 96       	adiw	r30, 0x0e	; 14
    364e:	85 91       	lpm	r24, Z+
    3650:	95 91       	lpm	r25, Z+
    3652:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVmidiChan>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	08 95       	ret

0000365a <menuOnEnterMidiInSec>:
    365a:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    365e:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3662:	3e 96       	adiw	r30, 0x0e	; 14
    3664:	25 91       	lpm	r18, Z+
    3666:	35 91       	lpm	r19, Z+
    3668:	20 93 dd 05 	sts	0x05DD, r18	; 0x8005dd <menuVsection>
    366c:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVmidiChan>
    3670:	8f 70       	andi	r24, 0x0F	; 15
    3672:	90 e0       	ldi	r25, 0x00	; 0
    3674:	23 70       	andi	r18, 0x03	; 3
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	82 0f       	add	r24, r18
    3680:	91 1d       	adc	r25, r1
    3682:	88 0f       	add	r24, r24
    3684:	99 1f       	adc	r25, r25
    3686:	88 0f       	add	r24, r24
    3688:	99 1f       	adc	r25, r25
    368a:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    368e:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	08 95       	ret

00003696 <menuOnEnterModManual>:
    3696:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    369a:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    369e:	3e 96       	adiw	r30, 0x0e	; 14
    36a0:	85 91       	lpm	r24, Z+
    36a2:	95 91       	lpm	r25, Z+
    36a4:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <menuVmanual>
    36a8:	80 e0       	ldi	r24, 0x00	; 0
    36aa:	08 95       	ret

000036ac <menuOnEnterModSec>:
    36ac:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    36b0:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    36b4:	3e 96       	adiw	r30, 0x0e	; 14
    36b6:	85 91       	lpm	r24, Z+
    36b8:	95 91       	lpm	r25, Z+
    36ba:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    36be:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <menuVmanual>
    36c2:	2f 70       	andi	r18, 0x0F	; 15
    36c4:	30 e0       	ldi	r19, 0x00	; 0
    36c6:	83 70       	andi	r24, 0x03	; 3
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	a9 01       	movw	r20, r18
    36cc:	44 0f       	add	r20, r20
    36ce:	55 1f       	adc	r21, r21
    36d0:	24 0f       	add	r18, r20
    36d2:	35 1f       	adc	r19, r21
    36d4:	22 0f       	add	r18, r18
    36d6:	33 1f       	adc	r19, r19
    36d8:	22 0f       	add	r18, r18
    36da:	33 1f       	adc	r19, r19
    36dc:	ac 01       	movw	r20, r24
    36de:	44 0f       	add	r20, r20
    36e0:	55 1f       	adc	r21, r21
    36e2:	84 0f       	add	r24, r20
    36e4:	95 1f       	adc	r25, r21
    36e6:	82 0f       	add	r24, r18
    36e8:	93 1f       	adc	r25, r19
    36ea:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    36ee:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	08 95       	ret

000036f6 <menuOnEnterModSecReg>:
    36f6:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    36fa:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    36fe:	3e 96       	adiw	r30, 0x0e	; 14
    3700:	85 91       	lpm	r24, Z+
    3702:	95 91       	lpm	r25, Z+
    3704:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    3708:	87 70       	andi	r24, 0x07	; 7
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	9c 01       	movw	r18, r24
    370e:	22 0f       	add	r18, r18
    3710:	33 1f       	adc	r19, r19
    3712:	82 0f       	add	r24, r18
    3714:	93 1f       	adc	r25, r19
    3716:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    371a:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	08 95       	ret

00003722 <menuOnEnterRegOut>:
    3722:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3726:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    372a:	3e 96       	adiw	r30, 0x0e	; 14
    372c:	85 91       	lpm	r24, Z+
    372e:	95 91       	lpm	r25, Z+
    3730:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    3734:	87 70       	andi	r24, 0x07	; 7
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	88 0f       	add	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    3744:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    3748:	80 e0       	ldi	r24, 0x00	; 0
    374a:	08 95       	ret

0000374c <menuOnEnterKey>:
    374c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3750:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3754:	3e 96       	adiw	r30, 0x0e	; 14
    3756:	85 91       	lpm	r24, Z+
    3758:	95 91       	lpm	r25, Z+
    375a:	84 30       	cpi	r24, 0x04	; 4
    375c:	60 f4       	brcc	.+24     	; 0x3776 <menuOnEnterKey+0x2a>
    375e:	fc 01       	movw	r30, r24
    3760:	ff 27       	eor	r31, r31
    3762:	ee 0f       	add	r30, r30
    3764:	ff 1f       	adc	r31, r31
    3766:	e0 52       	subi	r30, 0x20	; 32
    3768:	fa 4f       	sbci	r31, 0xFA	; 250
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <menuVMenuSoftKey+0x1>
    3772:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <menuVMenuSoftKey>
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	08 95       	ret

0000377a <menuOnExitRegisterOut>:
    377a:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <eeprom_UpdateRegOut>
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	08 95       	ret

00003782 <menuOnExitMidiThrough>:
    3782:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_UpdateMidiThrough>
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	08 95       	ret

0000378a <menuOnExitRegisterEdit>:
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	86 30       	cpi	r24, 0x06	; 6
    3792:	f1 f0       	breq	.+60     	; 0x37d0 <menuOnExitRegisterEdit+0x46>
    3794:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3798:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    379c:	3e 96       	adiw	r30, 0x0e	; 14
    379e:	05 90       	lpm	r0, Z+
    37a0:	f4 91       	lpm	r31, Z
    37a2:	e0 2d       	mov	r30, r0
    37a4:	cf 01       	movw	r24, r30
    37a6:	83 59       	subi	r24, 0x93	; 147
    37a8:	95 40       	sbci	r25, 0x05	; 5
    37aa:	88 0f       	add	r24, r24
    37ac:	88 0f       	add	r24, r24
    37ae:	88 0f       	add	r24, r24
    37b0:	d0 81       	ld	r29, Z
    37b2:	c0 e0       	ldi	r28, 0x00	; 0
    37b4:	0b c0       	rjmp	.+22     	; 0x37cc <menuOnExitRegisterEdit+0x42>
    37b6:	11 e0       	ldi	r17, 0x01	; 1
    37b8:	18 0f       	add	r17, r24
    37ba:	6d 2f       	mov	r22, r29
    37bc:	66 1f       	adc	r22, r22
    37be:	66 27       	eor	r22, r22
    37c0:	66 1f       	adc	r22, r22
    37c2:	0e 94 2d 31 	call	0x625a	; 0x625a <register_onOff>
    37c6:	dd 0f       	add	r29, r29
    37c8:	cf 5f       	subi	r28, 0xFF	; 255
    37ca:	81 2f       	mov	r24, r17
    37cc:	c8 30       	cpi	r28, 0x08	; 8
    37ce:	98 f3       	brcs	.-26     	; 0x37b6 <menuOnExitRegisterEdit+0x2c>
    37d0:	80 e0       	ldi	r24, 0x00	; 0
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	08 95       	ret

000037da <softKeyRegOff>:
    37da:	81 11       	cpse	r24, r1
    37dc:	0e 94 41 32 	call	0x6482	; 0x6482 <midi_resetRegisters>
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	08 95       	ret

000037e4 <menuOnExitCoupler>:
    37e4:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    37e8:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    37ec:	3e 96       	adiw	r30, 0x0e	; 14
    37ee:	85 91       	lpm	r24, Z+
    37f0:	95 91       	lpm	r25, Z+
    37f2:	87 53       	subi	r24, 0x37	; 55
    37f4:	98 40       	sbci	r25, 0x08	; 8
    37f6:	fc 01       	movw	r30, r24
    37f8:	ff 27       	eor	r31, r31
    37fa:	e9 5c       	subi	r30, 0xC9	; 201
    37fc:	f7 4f       	sbci	r31, 0xF7	; 247
    37fe:	20 81       	ld	r18, Z
    3800:	21 11       	cpse	r18, r1
    3802:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <set_Coupler>
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	08 95       	ret

0000380a <menuOnExitSaveProgram>:
    380a:	86 30       	cpi	r24, 0x06	; 6
    380c:	39 f0       	breq	.+14     	; 0x381c <menuOnExitSaveProgram+0x12>
    380e:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menuVKombination>
    3812:	80 34       	cpi	r24, 0x40	; 64
    3814:	18 f4       	brcc	.+6      	; 0x381c <menuOnExitSaveProgram+0x12>
    3816:	6f ef       	ldi	r22, 0xFF	; 255
    3818:	0e 94 50 32 	call	0x64a0	; 0x64a0 <register_toProgram>
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	08 95       	ret

00003820 <menuOnExitKeys>:
    3820:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <eeprom_UpdateSoftkeys>
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	08 95       	ret

00003828 <menu_readModule>:
    3828:	cf 92       	push	r12
    382a:	df 92       	push	r13
    382c:	ef 92       	push	r14
    382e:	ff 92       	push	r15
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    3838:	02 c0       	rjmp	.+4      	; 0x383e <menu_readModule+0x16>
    383a:	88 0f       	add	r24, r24
    383c:	99 1f       	adc	r25, r25
    383e:	0a 94       	dec	r0
    3840:	e2 f7       	brpl	.-8      	; 0x383a <menu_readModule+0x12>
    3842:	28 2f       	mov	r18, r24
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	e4 e6       	ldi	r30, 0x64	; 100
    3848:	f3 e0       	ldi	r31, 0x03	; 3
    384a:	c1 2c       	mov	r12, r1
    384c:	d1 2c       	mov	r13, r1
    384e:	76 01       	movw	r14, r12
    3850:	0b c0       	rjmp	.+22     	; 0x3868 <menu_readModule+0x40>
    3852:	cc 0c       	add	r12, r12
    3854:	dd 1c       	adc	r13, r13
    3856:	ee 1c       	adc	r14, r14
    3858:	ff 1c       	adc	r15, r15
    385a:	86 81       	ldd	r24, Z+6	; 0x06
    385c:	82 23       	and	r24, r18
    385e:	11 f0       	breq	.+4      	; 0x3864 <menu_readModule+0x3c>
    3860:	68 94       	set
    3862:	c0 f8       	bld	r12, 0
    3864:	38 97       	sbiw	r30, 0x08	; 8
    3866:	9f 5f       	subi	r25, 0xFF	; 255
    3868:	90 32       	cpi	r25, 0x20	; 32
    386a:	98 f3       	brcs	.-26     	; 0x3852 <menu_readModule+0x2a>
    386c:	8e e1       	ldi	r24, 0x1E	; 30
    386e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    3872:	c0 92 02 19 	sts	0x1902, r12	; 0x801902 <editLong>
    3876:	d0 92 03 19 	sts	0x1903, r13	; 0x801903 <editLong+0x1>
    387a:	e0 92 04 19 	sts	0x1904, r14	; 0x801904 <editLong+0x2>
    387e:	f0 92 05 19 	sts	0x1905, r15	; 0x801905 <editLong+0x3>
    3882:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <lcd_longout>
    3886:	80 e0       	ldi	r24, 0x00	; 0
    3888:	ff 90       	pop	r15
    388a:	ef 90       	pop	r14
    388c:	df 90       	pop	r13
    388e:	cf 90       	pop	r12
    3890:	08 95       	ret

00003892 <menu_testModule>:
    3892:	8e e1       	ldi	r24, 0x1E	; 30
    3894:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    3898:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <menuVmodule>
    389c:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <test_PipeModule>
    38a0:	60 93 02 19 	sts	0x1902, r22	; 0x801902 <editLong>
    38a4:	70 93 03 19 	sts	0x1903, r23	; 0x801903 <editLong+0x1>
    38a8:	80 93 04 19 	sts	0x1904, r24	; 0x801904 <editLong+0x2>
    38ac:	90 93 05 19 	sts	0x1905, r25	; 0x801905 <editLong+0x3>
    38b0:	0e 94 e9 3b 	call	0x77d2	; 0x77d2 <lcd_longout>
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	08 95       	ret

000038b8 <menuOnEnterTune>:
    38b8:	cf 93       	push	r28
    38ba:	8f 3f       	cpi	r24, 0xFF	; 255
    38bc:	09 f0       	breq	.+2      	; 0x38c0 <menuOnEnterTune+0x8>
    38be:	79 c0       	rjmp	.+242    	; 0x39b2 <menuOnEnterTune+0xfa>
    38c0:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <minManNote.3056>
    38c4:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <maxManNote.3057>
    38c8:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    38cc:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    38d0:	3e 96       	adiw	r30, 0x0e	; 14
    38d2:	85 91       	lpm	r24, Z+
    38d4:	95 91       	lpm	r25, Z+
    38d6:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <menuVmanual>
    38da:	84 30       	cpi	r24, 0x04	; 4
    38dc:	10 f0       	brcs	.+4      	; 0x38e2 <menuOnEnterTune+0x2a>
    38de:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <menuVmanual>
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	39 c0       	rjmp	.+114    	; 0x3958 <menuOnEnterTune+0xa0>
    38e6:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	e2 2f       	mov	r30, r18
    38ee:	f0 e0       	ldi	r31, 0x00	; 0
    38f0:	df 01       	movw	r26, r30
    38f2:	aa 0f       	add	r26, r26
    38f4:	bb 1f       	adc	r27, r27
    38f6:	ad 01       	movw	r20, r26
    38f8:	4e 0f       	add	r20, r30
    38fa:	5f 1f       	adc	r21, r31
    38fc:	dc 01       	movw	r26, r24
    38fe:	aa 0f       	add	r26, r26
    3900:	bb 1f       	adc	r27, r27
    3902:	a8 0f       	add	r26, r24
    3904:	b9 1f       	adc	r27, r25
    3906:	aa 0f       	add	r26, r26
    3908:	bb 1f       	adc	r27, r27
    390a:	aa 0f       	add	r26, r26
    390c:	bb 1f       	adc	r27, r27
    390e:	a4 0f       	add	r26, r20
    3910:	b5 1f       	adc	r27, r21
    3912:	a6 5a       	subi	r26, 0xA6	; 166
    3914:	b6 4f       	sbci	r27, 0xF6	; 246
    3916:	3c 91       	ld	r19, X
    3918:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <minManNote.3056>
    391c:	34 17       	cp	r19, r20
    391e:	10 f4       	brcc	.+4      	; 0x3924 <menuOnEnterTune+0x6c>
    3920:	30 93 2f 02 	sts	0x022F, r19	; 0x80022f <minManNote.3056>
    3924:	af 01       	movw	r20, r30
    3926:	44 0f       	add	r20, r20
    3928:	55 1f       	adc	r21, r21
    392a:	e4 0f       	add	r30, r20
    392c:	f5 1f       	adc	r31, r21
    392e:	ac 01       	movw	r20, r24
    3930:	44 0f       	add	r20, r20
    3932:	55 1f       	adc	r21, r21
    3934:	84 0f       	add	r24, r20
    3936:	95 1f       	adc	r25, r21
    3938:	88 0f       	add	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	e8 0f       	add	r30, r24
    3942:	f9 1f       	adc	r31, r25
    3944:	e6 5a       	subi	r30, 0xA6	; 166
    3946:	f6 4f       	sbci	r31, 0xF6	; 246
    3948:	81 81       	ldd	r24, Z+1	; 0x01
    394a:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <maxManNote.3057>
    394e:	98 17       	cp	r25, r24
    3950:	10 f4       	brcc	.+4      	; 0x3956 <menuOnEnterTune+0x9e>
    3952:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <maxManNote.3057>
    3956:	2f 5f       	subi	r18, 0xFF	; 255
    3958:	24 30       	cpi	r18, 0x04	; 4
    395a:	28 f2       	brcs	.-118    	; 0x38e6 <menuOnEnterTune+0x2e>
    395c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3056>
    3960:	88 23       	and	r24, r24
    3962:	5c f4       	brge	.+22     	; 0x397a <menuOnEnterTune+0xc2>
    3964:	8e e1       	ldi	r24, 0x1E	; 30
    3966:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    396a:	80 ee       	ldi	r24, 0xE0	; 224
    396c:	93 e0       	ldi	r25, 0x03	; 3
    396e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    3972:	8f ef       	ldi	r24, 0xFF	; 255
    3974:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <menuNote>
    3978:	04 c0       	rjmp	.+8      	; 0x3982 <menuOnEnterTune+0xca>
    397a:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <menuNote>
    397e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3058>
    3982:	6a e0       	ldi	r22, 0x0A	; 10
    3984:	74 e1       	ldi	r23, 0x14	; 20
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    398c:	69 e1       	ldi	r22, 0x19	; 25
    398e:	74 e1       	ldi	r23, 0x14	; 20
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    3996:	6e e1       	ldi	r22, 0x1E	; 30
    3998:	74 e1       	ldi	r23, 0x14	; 20
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    39a0:	60 e2       	ldi	r22, 0x20	; 32
    39a2:	74 e1       	ldi	r23, 0x14	; 20
    39a4:	83 e0       	ldi	r24, 0x03	; 3
    39a6:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    39aa:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
    39ae:	cf ef       	ldi	r28, 0xFF	; 255
    39b0:	71 c0       	rjmp	.+226    	; 0x3a94 <menuOnEnterTune+0x1dc>
    39b2:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    39b6:	6f 3f       	cpi	r22, 0xFF	; 255
    39b8:	09 f4       	brne	.+2      	; 0x39bc <menuOnEnterTune+0x104>
    39ba:	61 c0       	rjmp	.+194    	; 0x3a7e <menuOnEnterTune+0x1c6>
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	d9 f4       	brne	.+54     	; 0x39f6 <menuOnEnterTune+0x13e>
    39c0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <maxManNote.3057>
    39c4:	68 17       	cp	r22, r24
    39c6:	08 f0       	brcs	.+2      	; 0x39ca <menuOnEnterTune+0x112>
    39c8:	5c c0       	rjmp	.+184    	; 0x3a82 <menuOnEnterTune+0x1ca>
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    39d0:	0e 94 ce 34 	call	0x699c	; 0x699c <manual_NoteOnOff>
    39d4:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    39d8:	6f 5f       	subi	r22, 0xFF	; 255
    39da:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <menuNote>
    39de:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3058>
    39e2:	81 30       	cpi	r24, 0x01	; 1
    39e4:	09 f0       	breq	.+2      	; 0x39e8 <menuOnEnterTune+0x130>
    39e6:	4f c0       	rjmp	.+158    	; 0x3a86 <menuOnEnterTune+0x1ce>
    39e8:	41 e0       	ldi	r20, 0x01	; 1
    39ea:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    39ee:	0e 94 ce 34 	call	0x699c	; 0x699c <manual_NoteOnOff>
    39f2:	cf ef       	ldi	r28, 0xFF	; 255
    39f4:	4f c0       	rjmp	.+158    	; 0x3a94 <menuOnEnterTune+0x1dc>
    39f6:	84 30       	cpi	r24, 0x04	; 4
    39f8:	d1 f4       	brne	.+52     	; 0x3a2e <menuOnEnterTune+0x176>
    39fa:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3056>
    39fe:	86 17       	cp	r24, r22
    3a00:	08 f0       	brcs	.+2      	; 0x3a04 <menuOnEnterTune+0x14c>
    3a02:	43 c0       	rjmp	.+134    	; 0x3a8a <menuOnEnterTune+0x1d2>
    3a04:	40 e0       	ldi	r20, 0x00	; 0
    3a06:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3a0a:	0e 94 ce 34 	call	0x699c	; 0x699c <manual_NoteOnOff>
    3a0e:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    3a12:	61 50       	subi	r22, 0x01	; 1
    3a14:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <menuNote>
    3a18:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3058>
    3a1c:	81 30       	cpi	r24, 0x01	; 1
    3a1e:	b9 f5       	brne	.+110    	; 0x3a8e <menuOnEnterTune+0x1d6>
    3a20:	41 e0       	ldi	r20, 0x01	; 1
    3a22:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3a26:	0e 94 ce 34 	call	0x699c	; 0x699c <manual_NoteOnOff>
    3a2a:	cf ef       	ldi	r28, 0xFF	; 255
    3a2c:	33 c0       	rjmp	.+102    	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a2e:	83 30       	cpi	r24, 0x03	; 3
    3a30:	91 f4       	brne	.+36     	; 0x3a56 <menuOnEnterTune+0x19e>
    3a32:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3058>
    3a36:	81 11       	cpse	r24, r1
    3a38:	04 c0       	rjmp	.+8      	; 0x3a42 <menuOnEnterTune+0x18a>
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <notOnOff.3058>
    3a40:	02 c0       	rjmp	.+4      	; 0x3a46 <menuOnEnterTune+0x18e>
    3a42:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3058>
    3a46:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <notOnOff.3058>
    3a4a:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3a4e:	0e 94 ce 34 	call	0x699c	; 0x699c <manual_NoteOnOff>
    3a52:	cf ef       	ldi	r28, 0xFF	; 255
    3a54:	1f c0       	rjmp	.+62     	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a56:	82 30       	cpi	r24, 0x02	; 2
    3a58:	11 f0       	breq	.+4      	; 0x3a5e <menuOnEnterTune+0x1a6>
    3a5a:	86 30       	cpi	r24, 0x06	; 6
    3a5c:	39 f4       	brne	.+14     	; 0x3a6c <menuOnEnterTune+0x1b4>
    3a5e:	40 e0       	ldi	r20, 0x00	; 0
    3a60:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3a64:	0e 94 ce 34 	call	0x699c	; 0x699c <manual_NoteOnOff>
    3a68:	c0 e0       	ldi	r28, 0x00	; 0
    3a6a:	14 c0       	rjmp	.+40     	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a6c:	85 30       	cpi	r24, 0x05	; 5
    3a6e:	89 f4       	brne	.+34     	; 0x3a92 <menuOnEnterTune+0x1da>
    3a70:	40 e0       	ldi	r20, 0x00	; 0
    3a72:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3a76:	0e 94 ce 34 	call	0x699c	; 0x699c <manual_NoteOnOff>
    3a7a:	c0 e0       	ldi	r28, 0x00	; 0
    3a7c:	0b c0       	rjmp	.+22     	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a7e:	c0 e0       	ldi	r28, 0x00	; 0
    3a80:	09 c0       	rjmp	.+18     	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a82:	cf ef       	ldi	r28, 0xFF	; 255
    3a84:	07 c0       	rjmp	.+14     	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a86:	cf ef       	ldi	r28, 0xFF	; 255
    3a88:	05 c0       	rjmp	.+10     	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a8a:	cf ef       	ldi	r28, 0xFF	; 255
    3a8c:	03 c0       	rjmp	.+6      	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a8e:	cf ef       	ldi	r28, 0xFF	; 255
    3a90:	01 c0       	rjmp	.+2      	; 0x3a94 <menuOnEnterTune+0x1dc>
    3a92:	cf ef       	ldi	r28, 0xFF	; 255
    3a94:	cf 3f       	cpi	r28, 0xFF	; 255
    3a96:	a1 f5       	brne	.+104    	; 0x3b00 <menuOnEnterTune+0x248>
    3a98:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <menuNote>
    3a9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a9e:	69 f1       	breq	.+90     	; 0x3afa <menuOnEnterTune+0x242>
    3aa0:	8e e1       	ldi	r24, 0x1E	; 30
    3aa2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    3aa6:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <menuNote>
    3aaa:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <lcd_noteOut>
    3aae:	80 e2       	ldi	r24, 0x20	; 32
    3ab0:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3ab4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3058>
    3ab8:	81 11       	cpse	r24, r1
    3aba:	0a c0       	rjmp	.+20     	; 0x3ad0 <menuOnEnterTune+0x218>
    3abc:	81 e6       	ldi	r24, 0x61	; 97
    3abe:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3ac2:	85 e7       	ldi	r24, 0x75	; 117
    3ac4:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3ac8:	83 e7       	ldi	r24, 0x73	; 115
    3aca:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3ace:	09 c0       	rjmp	.+18     	; 0x3ae2 <menuOnEnterTune+0x22a>
    3ad0:	85 e6       	ldi	r24, 0x65	; 101
    3ad2:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3ad6:	89 e6       	ldi	r24, 0x69	; 105
    3ad8:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3adc:	8e e6       	ldi	r24, 0x6E	; 110
    3ade:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3ae2:	61 e0       	ldi	r22, 0x01	; 1
    3ae4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3058>
    3ae8:	81 11       	cpse	r24, r1
    3aea:	01 c0       	rjmp	.+2      	; 0x3aee <menuOnEnterTune+0x236>
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <keylabel_statcheck>
    3af4:	81 11       	cpse	r24, r1
    3af6:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
    3afa:	8e e1       	ldi	r24, 0x1E	; 30
    3afc:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    3b00:	8c 2f       	mov	r24, r28
    3b02:	cf 91       	pop	r28
    3b04:	08 95       	ret

00003b06 <menuOnExitMidiActiveSense>:
    3b06:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_UpdateMidiOutMap>
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	08 95       	ret

00003b0e <menuOnExitMidiOut>:
    3b0e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_UpdateMidiOutMap>
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	08 95       	ret

00003b16 <menuOnExitMidiIn>:
    3b16:	0e 94 b9 0c 	call	0x1972	; 0x1972 <eeprom_UpdateMidiInMap>
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	08 95       	ret

00003b1e <menuOnExitManual>:
    3b1e:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_UpdateManualMap>
    3b22:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <registers_CalcCount>
    3b26:	0e 94 77 0d 	call	0x1aee	; 0x1aee <eeprom_UpdateReg>
    3b2a:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <Midi_updateManualRange>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	08 95       	ret

00003b32 <menuOnExitModules>:
    3b32:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <eeprom_UpdateModules>
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	08 95       	ret

00003b3a <menuOnEnterUSBprotokoll>:
    3b3a:	cf 93       	push	r28
    3b3c:	83 ec       	ldi	r24, 0xC3	; 195
    3b3e:	93 e0       	ldi	r25, 0x03	; 3
    3b40:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3b44:	10 d8       	rcall	.-4064   	; 0x2b66 <log_count>
    3b46:	81 11       	cpse	r24, r1
    3b48:	17 c0       	rjmp	.+46     	; 0x3b78 <menuOnEnterUSBprotokoll+0x3e>
    3b4a:	89 ec       	ldi	r24, 0xC9	; 201
    3b4c:	93 e0       	ldi	r25, 0x03	; 3
    3b4e:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3b52:	16 c0       	rjmp	.+44     	; 0x3b80 <menuOnEnterUSBprotokoll+0x46>
    3b54:	6f ef       	ldi	r22, 0xFF	; 255
    3b56:	8c 2f       	mov	r24, r28
    3b58:	a7 d9       	rcall	.-3250   	; 0x2ea8 <log_getShortTextFromIndex>
    3b5a:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3b5e:	8a e2       	ldi	r24, 0x2A	; 42
    3b60:	94 e1       	ldi	r25, 0x14	; 20
    3b62:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3b66:	8c 2f       	mov	r24, r28
    3b68:	45 d8       	rcall	.-3958   	; 0x2bf4 <log_getErrorText>
    3b6a:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3b6e:	8a e2       	ldi	r24, 0x2A	; 42
    3b70:	94 e1       	ldi	r25, 0x14	; 20
    3b72:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3b76:	8c 2f       	mov	r24, r28
    3b78:	cf ef       	ldi	r28, 0xFF	; 255
    3b7a:	c8 0f       	add	r28, r24
    3b7c:	81 11       	cpse	r24, r1
    3b7e:	ea cf       	rjmp	.-44     	; 0x3b54 <menuOnEnterUSBprotokoll+0x1a>
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	cf 91       	pop	r28
    3b84:	08 95       	ret

00003b86 <menuOnExitUSBactive>:
    3b86:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <eeprom_UpdateUSB>
    3b8a:	80 91 78 16 	lds	r24, 0x1678	; 0x801678 <serUSB_Active>
    3b8e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b90:	61 f4       	brne	.+24     	; 0x3baa <menuOnExitUSBactive+0x24>
    3b92:	8a ea       	ldi	r24, 0xAA	; 170
    3b94:	93 e0       	ldi	r25, 0x03	; 3
    3b96:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3b9a:	82 ee       	ldi	r24, 0xE2	; 226
    3b9c:	93 e1       	ldi	r25, 0x13	; 19
    3b9e:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3ba2:	8a e2       	ldi	r24, 0x2A	; 42
    3ba4:	94 e1       	ldi	r25, 0x14	; 20
    3ba6:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	08 95       	ret

00003bae <menuOnEnterUSBsendHW>:
    3bae:	9f 92       	push	r9
    3bb0:	af 92       	push	r10
    3bb2:	bf 92       	push	r11
    3bb4:	cf 92       	push	r12
    3bb6:	df 92       	push	r13
    3bb8:	ef 92       	push	r14
    3bba:	ff 92       	push	r15
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	81 e9       	ldi	r24, 0x91	; 145
    3bc6:	93 e0       	ldi	r25, 0x03	; 3
    3bc8:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3bcc:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3bd0:	8e e7       	ldi	r24, 0x7E	; 126
    3bd2:	93 e0       	ldi	r25, 0x03	; 3
    3bd4:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3bd8:	c8 e7       	ldi	r28, 0x78	; 120
    3bda:	d3 e0       	ldi	r29, 0x03	; 3
    3bdc:	66 e0       	ldi	r22, 0x06	; 6
    3bde:	79 e1       	ldi	r23, 0x19	; 25
    3be0:	88 81       	ld	r24, Y
    3be2:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3be6:	22 e7       	ldi	r18, 0x72	; 114
    3be8:	fc 01       	movw	r30, r24
    3bea:	20 83       	st	Z, r18
    3bec:	bc 01       	movw	r22, r24
    3bee:	6e 5f       	subi	r22, 0xFE	; 254
    3bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf2:	20 e2       	ldi	r18, 0x20	; 32
    3bf4:	21 83       	std	Z+1, r18	; 0x01
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3bfc:	27 e7       	ldi	r18, 0x77	; 119
    3bfe:	fc 01       	movw	r30, r24
    3c00:	20 83       	st	Z, r18
    3c02:	86 e0       	ldi	r24, 0x06	; 6
    3c04:	99 e1       	ldi	r25, 0x19	; 25
    3c06:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3c0a:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3c0e:	8c e6       	ldi	r24, 0x6C	; 108
    3c10:	93 e0       	ldi	r25, 0x03	; 3
    3c12:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3c16:	66 e0       	ldi	r22, 0x06	; 6
    3c18:	79 e1       	ldi	r23, 0x19	; 25
    3c1a:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipe_ModuleTested>
    3c1e:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3c22:	86 e0       	ldi	r24, 0x06	; 6
    3c24:	99 e1       	ldi	r25, 0x19	; 25
    3c26:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3c2a:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3c2e:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3c32:	e1 2c       	mov	r14, r1
    3c34:	d1 c0       	rjmp	.+418    	; 0x3dd8 <menuOnEnterUSBsendHW+0x22a>
    3c36:	83 e6       	ldi	r24, 0x63	; 99
    3c38:	93 e0       	ldi	r25, 0x03	; 3
    3c3a:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3c3e:	66 e0       	ldi	r22, 0x06	; 6
    3c40:	79 e1       	ldi	r23, 0x19	; 25
    3c42:	8e 2d       	mov	r24, r14
    3c44:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <putChar_Manual>
    3c48:	86 e0       	ldi	r24, 0x06	; 6
    3c4a:	99 e1       	ldi	r25, 0x19	; 25
    3c4c:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3c50:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3c54:	f1 2c       	mov	r15, r1
    3c56:	a4 c0       	rjmp	.+328    	; 0x3da0 <menuOnEnterUSBsendHW+0x1f2>
    3c58:	8c e5       	ldi	r24, 0x5C	; 92
    3c5a:	93 e0       	ldi	r25, 0x03	; 3
    3c5c:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3c60:	80 e3       	ldi	r24, 0x30	; 48
    3c62:	8f 0d       	add	r24, r15
    3c64:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3c68:	8a e3       	ldi	r24, 0x3A	; 58
    3c6a:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3c6e:	80 e2       	ldi	r24, 0x20	; 32
    3c70:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3c74:	0e 2d       	mov	r16, r14
    3c76:	10 e0       	ldi	r17, 0x00	; 0
    3c78:	cf 2c       	mov	r12, r15
    3c7a:	d1 2c       	mov	r13, r1
    3c7c:	e6 01       	movw	r28, r12
    3c7e:	cc 0f       	add	r28, r28
    3c80:	dd 1f       	adc	r29, r29
    3c82:	ce 01       	movw	r24, r28
    3c84:	8c 0d       	add	r24, r12
    3c86:	9d 1d       	adc	r25, r13
    3c88:	e8 01       	movw	r28, r16
    3c8a:	cc 0f       	add	r28, r28
    3c8c:	dd 1f       	adc	r29, r29
    3c8e:	c0 0f       	add	r28, r16
    3c90:	d1 1f       	adc	r29, r17
    3c92:	cc 0f       	add	r28, r28
    3c94:	dd 1f       	adc	r29, r29
    3c96:	cc 0f       	add	r28, r28
    3c98:	dd 1f       	adc	r29, r29
    3c9a:	c8 0f       	add	r28, r24
    3c9c:	d9 1f       	adc	r29, r25
    3c9e:	c6 5a       	subi	r28, 0xA6	; 166
    3ca0:	d6 4f       	sbci	r29, 0xF6	; 246
    3ca2:	66 e0       	ldi	r22, 0x06	; 6
    3ca4:	79 e1       	ldi	r23, 0x19	; 25
    3ca6:	88 81       	ld	r24, Y
    3ca8:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3cac:	bc 01       	movw	r22, r24
    3cae:	6f 5f       	subi	r22, 0xFF	; 255
    3cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb2:	0f 2e       	mov	r0, r31
    3cb4:	fe e2       	ldi	r31, 0x2E	; 46
    3cb6:	bf 2e       	mov	r11, r31
    3cb8:	f0 2d       	mov	r31, r0
    3cba:	fc 01       	movw	r30, r24
    3cbc:	b0 82       	st	Z, r11
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3cc4:	bc 01       	movw	r22, r24
    3cc6:	6f 5f       	subi	r22, 0xFF	; 255
    3cc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cca:	fc 01       	movw	r30, r24
    3ccc:	b0 82       	st	Z, r11
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3cd4:	fc 01       	movw	r30, r24
    3cd6:	80 e2       	ldi	r24, 0x20	; 32
    3cd8:	80 83       	st	Z, r24
    3cda:	9d e3       	ldi	r25, 0x3D	; 61
    3cdc:	91 83       	std	Z+1, r25	; 0x01
    3cde:	82 83       	std	Z+2, r24	; 0x02
    3ce0:	86 e0       	ldi	r24, 0x06	; 6
    3ce2:	99 e1       	ldi	r25, 0x19	; 25
    3ce4:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3ce8:	88 81       	ld	r24, Y
    3cea:	88 23       	and	r24, r24
    3cec:	2c f4       	brge	.+10     	; 0x3cf8 <menuOnEnterUSBsendHW+0x14a>
    3cee:	8a e4       	ldi	r24, 0x4A	; 74
    3cf0:	93 e0       	ldi	r25, 0x03	; 3
    3cf2:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3cf6:	51 c0       	rjmp	.+162    	; 0x3d9a <menuOnEnterUSBsendHW+0x1ec>
    3cf8:	66 e0       	ldi	r22, 0x06	; 6
    3cfa:	79 e1       	ldi	r23, 0x19	; 25
    3cfc:	0e 94 e7 3c 	call	0x79ce	; 0x79ce <putChar_Note>
    3d00:	bc 01       	movw	r22, r24
    3d02:	6f 5f       	subi	r22, 0xFF	; 255
    3d04:	7f 4f       	sbci	r23, 0xFF	; 255
    3d06:	0f 2e       	mov	r0, r31
    3d08:	fd e2       	ldi	r31, 0x2D	; 45
    3d0a:	9f 2e       	mov	r9, r31
    3d0c:	f0 2d       	mov	r31, r0
    3d0e:	fc 01       	movw	r30, r24
    3d10:	90 82       	st	Z, r9
    3d12:	f6 01       	movw	r30, r12
    3d14:	ee 0f       	add	r30, r30
    3d16:	ff 1f       	adc	r31, r31
    3d18:	ce 0e       	add	r12, r30
    3d1a:	df 1e       	adc	r13, r31
    3d1c:	58 01       	movw	r10, r16
    3d1e:	aa 0c       	add	r10, r10
    3d20:	bb 1c       	adc	r11, r11
    3d22:	e5 01       	movw	r28, r10
    3d24:	c0 0f       	add	r28, r16
    3d26:	d1 1f       	adc	r29, r17
    3d28:	cc 0f       	add	r28, r28
    3d2a:	dd 1f       	adc	r29, r29
    3d2c:	cc 0f       	add	r28, r28
    3d2e:	dd 1f       	adc	r29, r29
    3d30:	cc 0d       	add	r28, r12
    3d32:	dd 1d       	adc	r29, r13
    3d34:	c6 5a       	subi	r28, 0xA6	; 166
    3d36:	d6 4f       	sbci	r29, 0xF6	; 246
    3d38:	89 81       	ldd	r24, Y+1	; 0x01
    3d3a:	0e 94 e7 3c 	call	0x79ce	; 0x79ce <putChar_Note>
    3d3e:	20 e2       	ldi	r18, 0x20	; 32
    3d40:	fc 01       	movw	r30, r24
    3d42:	20 83       	st	Z, r18
    3d44:	11 82       	std	Z+1, r1	; 0x01
    3d46:	86 e0       	ldi	r24, 0x06	; 6
    3d48:	99 e1       	ldi	r25, 0x19	; 25
    3d4a:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3d4e:	82 e4       	ldi	r24, 0x42	; 66
    3d50:	93 e0       	ldi	r25, 0x03	; 3
    3d52:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3d56:	8a 81       	ldd	r24, Y+2	; 0x02
    3d58:	82 95       	swap	r24
    3d5a:	86 95       	lsr	r24
    3d5c:	87 70       	andi	r24, 0x07	; 7
    3d5e:	80 5d       	subi	r24, 0xD0	; 208
    3d60:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3d64:	8a e3       	ldi	r24, 0x3A	; 58
    3d66:	93 e0       	ldi	r25, 0x03	; 3
    3d68:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6e:	66 e0       	ldi	r22, 0x06	; 6
    3d70:	79 e1       	ldi	r23, 0x19	; 25
    3d72:	8f 71       	andi	r24, 0x1F	; 31
    3d74:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    3d78:	bc 01       	movw	r22, r24
    3d7a:	6f 5f       	subi	r22, 0xFF	; 255
    3d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7e:	fc 01       	movw	r30, r24
    3d80:	90 82       	st	Z, r9
    3d82:	8a 81       	ldd	r24, Y+2	; 0x02
    3d84:	99 81       	ldd	r25, Y+1	; 0x01
    3d86:	28 81       	ld	r18, Y
    3d88:	8f 71       	andi	r24, 0x1F	; 31
    3d8a:	89 0f       	add	r24, r25
    3d8c:	82 1b       	sub	r24, r18
    3d8e:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    3d92:	86 e0       	ldi	r24, 0x06	; 6
    3d94:	99 e1       	ldi	r25, 0x19	; 25
    3d96:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3d9a:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3d9e:	f3 94       	inc	r15
    3da0:	f3 e0       	ldi	r31, 0x03	; 3
    3da2:	ff 15       	cp	r31, r15
    3da4:	08 f0       	brcs	.+2      	; 0x3da8 <menuOnEnterUSBsendHW+0x1fa>
    3da6:	58 cf       	rjmp	.-336    	; 0x3c58 <menuOnEnterUSBsendHW+0xaa>
    3da8:	88 e1       	ldi	r24, 0x18	; 24
    3daa:	93 e0       	ldi	r25, 0x03	; 3
    3dac:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3db0:	ee 2d       	mov	r30, r14
    3db2:	f0 e0       	ldi	r31, 0x00	; 0
    3db4:	ee 0f       	add	r30, r30
    3db6:	ff 1f       	adc	r31, r31
    3db8:	e2 5b       	subi	r30, 0xB2	; 178
    3dba:	f6 4f       	sbci	r31, 0xF6	; 246
    3dbc:	66 e0       	ldi	r22, 0x06	; 6
    3dbe:	79 e1       	ldi	r23, 0x19	; 25
    3dc0:	81 81       	ldd	r24, Z+1	; 0x01
    3dc2:	0e 94 83 3c 	call	0x7906	; 0x7906 <putChar_MidiChan>
    3dc6:	86 e0       	ldi	r24, 0x06	; 6
    3dc8:	99 e1       	ldi	r25, 0x19	; 25
    3dca:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3dce:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3dd2:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3dd6:	e3 94       	inc	r14
    3dd8:	83 e0       	ldi	r24, 0x03	; 3
    3dda:	8e 15       	cp	r24, r14
    3ddc:	08 f0       	brcs	.+2      	; 0x3de0 <menuOnEnterUSBsendHW+0x232>
    3dde:	2b cf       	rjmp	.-426    	; 0x3c36 <menuOnEnterUSBsendHW+0x88>
    3de0:	80 e5       	ldi	r24, 0x50	; 80
    3de2:	93 e0       	ldi	r25, 0x03	; 3
    3de4:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3de8:	f1 2c       	mov	r15, r1
    3dea:	94 c0       	rjmp	.+296    	; 0x3f14 <menuOnEnterUSBsendHW+0x366>
    3dec:	8c e5       	ldi	r24, 0x5C	; 92
    3dee:	93 e0       	ldi	r25, 0x03	; 3
    3df0:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3df4:	80 e3       	ldi	r24, 0x30	; 48
    3df6:	8f 0d       	add	r24, r15
    3df8:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3dfc:	8a e3       	ldi	r24, 0x3A	; 58
    3dfe:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3e02:	80 e2       	ldi	r24, 0x20	; 32
    3e04:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3e08:	cf 2d       	mov	r28, r15
    3e0a:	d0 e0       	ldi	r29, 0x00	; 0
    3e0c:	8e 01       	movw	r16, r28
    3e0e:	00 0f       	add	r16, r16
    3e10:	11 1f       	adc	r17, r17
    3e12:	0c 0f       	add	r16, r28
    3e14:	1d 1f       	adc	r17, r29
    3e16:	03 5e       	subi	r16, 0xE3	; 227
    3e18:	17 4f       	sbci	r17, 0xF7	; 247
    3e1a:	66 e0       	ldi	r22, 0x06	; 6
    3e1c:	79 e1       	ldi	r23, 0x19	; 25
    3e1e:	f8 01       	movw	r30, r16
    3e20:	80 81       	ld	r24, Z
    3e22:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3e26:	bc 01       	movw	r22, r24
    3e28:	6f 5f       	subi	r22, 0xFF	; 255
    3e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e2c:	0f 2e       	mov	r0, r31
    3e2e:	fe e2       	ldi	r31, 0x2E	; 46
    3e30:	ef 2e       	mov	r14, r31
    3e32:	f0 2d       	mov	r31, r0
    3e34:	fc 01       	movw	r30, r24
    3e36:	e0 82       	st	Z, r14
    3e38:	f8 01       	movw	r30, r16
    3e3a:	81 81       	ldd	r24, Z+1	; 0x01
    3e3c:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3e40:	bc 01       	movw	r22, r24
    3e42:	6f 5f       	subi	r22, 0xFF	; 255
    3e44:	7f 4f       	sbci	r23, 0xFF	; 255
    3e46:	fc 01       	movw	r30, r24
    3e48:	e0 82       	st	Z, r14
    3e4a:	f8 01       	movw	r30, r16
    3e4c:	82 81       	ldd	r24, Z+2	; 0x02
    3e4e:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <putChar_hex>
    3e52:	fc 01       	movw	r30, r24
    3e54:	80 e2       	ldi	r24, 0x20	; 32
    3e56:	80 83       	st	Z, r24
    3e58:	9d e3       	ldi	r25, 0x3D	; 61
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	82 83       	std	Z+2, r24	; 0x02
    3e5e:	13 82       	std	Z+3, r1	; 0x03
    3e60:	86 e0       	ldi	r24, 0x06	; 6
    3e62:	99 e1       	ldi	r25, 0x19	; 25
    3e64:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3e68:	f8 01       	movw	r30, r16
    3e6a:	80 81       	ld	r24, Z
    3e6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3e6e:	29 f4       	brne	.+10     	; 0x3e7a <menuOnEnterUSBsendHW+0x2cc>
    3e70:	8a e4       	ldi	r24, 0x4A	; 74
    3e72:	93 e0       	ldi	r25, 0x03	; 3
    3e74:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3e78:	4a c0       	rjmp	.+148    	; 0x3f0e <menuOnEnterUSBsendHW+0x360>
    3e7a:	e6 e0       	ldi	r30, 0x06	; 6
    3e7c:	f9 e1       	ldi	r31, 0x19	; 25
    3e7e:	92 e5       	ldi	r25, 0x52	; 82
    3e80:	90 83       	st	Z, r25
    3e82:	9e e2       	ldi	r25, 0x2E	; 46
    3e84:	91 83       	std	Z+1, r25	; 0x01
    3e86:	68 e0       	ldi	r22, 0x08	; 8
    3e88:	79 e1       	ldi	r23, 0x19	; 25
    3e8a:	8f 5f       	subi	r24, 0xFF	; 255
    3e8c:	0e 94 44 3c 	call	0x7888	; 0x7888 <putChar_Dec>
    3e90:	bc 01       	movw	r22, r24
    3e92:	6f 5f       	subi	r22, 0xFF	; 255
    3e94:	7f 4f       	sbci	r23, 0xFF	; 255
    3e96:	1d e2       	ldi	r17, 0x2D	; 45
    3e98:	fc 01       	movw	r30, r24
    3e9a:	10 83       	st	Z, r17
    3e9c:	ce 01       	movw	r24, r28
    3e9e:	88 0f       	add	r24, r24
    3ea0:	99 1f       	adc	r25, r25
    3ea2:	c8 0f       	add	r28, r24
    3ea4:	d9 1f       	adc	r29, r25
    3ea6:	c3 5e       	subi	r28, 0xE3	; 227
    3ea8:	d7 4f       	sbci	r29, 0xF7	; 247
    3eaa:	89 81       	ldd	r24, Y+1	; 0x01
    3eac:	8f 5f       	subi	r24, 0xFF	; 255
    3eae:	0e 94 44 3c 	call	0x7888	; 0x7888 <putChar_Dec>
    3eb2:	20 e2       	ldi	r18, 0x20	; 32
    3eb4:	fc 01       	movw	r30, r24
    3eb6:	20 83       	st	Z, r18
    3eb8:	11 82       	std	Z+1, r1	; 0x01
    3eba:	86 e0       	ldi	r24, 0x06	; 6
    3ebc:	99 e1       	ldi	r25, 0x19	; 25
    3ebe:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3ec2:	82 e4       	ldi	r24, 0x42	; 66
    3ec4:	93 e0       	ldi	r25, 0x03	; 3
    3ec6:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3eca:	8a 81       	ldd	r24, Y+2	; 0x02
    3ecc:	82 95       	swap	r24
    3ece:	86 95       	lsr	r24
    3ed0:	87 70       	andi	r24, 0x07	; 7
    3ed2:	80 5d       	subi	r24, 0xD0	; 208
    3ed4:	0e 94 d5 38 	call	0x71aa	; 0x71aa <serial0SER_USBSend>
    3ed8:	8a e3       	ldi	r24, 0x3A	; 58
    3eda:	93 e0       	ldi	r25, 0x03	; 3
    3edc:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee2:	66 e0       	ldi	r22, 0x06	; 6
    3ee4:	79 e1       	ldi	r23, 0x19	; 25
    3ee6:	8f 71       	andi	r24, 0x1F	; 31
    3ee8:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    3eec:	bc 01       	movw	r22, r24
    3eee:	6f 5f       	subi	r22, 0xFF	; 255
    3ef0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	10 83       	st	Z, r17
    3ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef8:	99 81       	ldd	r25, Y+1	; 0x01
    3efa:	28 81       	ld	r18, Y
    3efc:	8f 71       	andi	r24, 0x1F	; 31
    3efe:	89 0f       	add	r24, r25
    3f00:	82 1b       	sub	r24, r18
    3f02:	0e 94 28 3c 	call	0x7850	; 0x7850 <putChar_Dec2>
    3f06:	86 e0       	ldi	r24, 0x06	; 6
    3f08:	99 e1       	ldi	r25, 0x19	; 25
    3f0a:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3f0e:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3f12:	f3 94       	inc	r15
    3f14:	f7 e0       	ldi	r31, 0x07	; 7
    3f16:	ff 15       	cp	r31, r15
    3f18:	08 f0       	brcs	.+2      	; 0x3f1c <menuOnEnterUSBsendHW+0x36e>
    3f1a:	68 cf       	rjmp	.-304    	; 0x3dec <menuOnEnterUSBsendHW+0x23e>
    3f1c:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3f20:	8f e0       	ldi	r24, 0x0F	; 15
    3f22:	93 e0       	ldi	r25, 0x03	; 3
    3f24:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    3f28:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3f2c:	e1 2c       	mov	r14, r1
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	64 c0       	rjmp	.+200    	; 0x3ffa <menuOnEnterUSBsendHW+0x44c>
    3f32:	ce 2d       	mov	r28, r14
    3f34:	d0 e0       	ldi	r29, 0x00	; 0
    3f36:	0f 2d       	mov	r16, r15
    3f38:	10 e0       	ldi	r17, 0x00	; 0
    3f3a:	fe 01       	movw	r30, r28
    3f3c:	ee 0f       	add	r30, r30
    3f3e:	ff 1f       	adc	r31, r31
    3f40:	ee 0f       	add	r30, r30
    3f42:	ff 1f       	adc	r31, r31
    3f44:	e0 0f       	add	r30, r16
    3f46:	f1 1f       	adc	r31, r17
    3f48:	ee 0f       	add	r30, r30
    3f4a:	ff 1f       	adc	r31, r31
    3f4c:	ee 0f       	add	r30, r30
    3f4e:	ff 1f       	adc	r31, r31
    3f50:	e2 5b       	subi	r30, 0xB2	; 178
    3f52:	f7 4f       	sbci	r31, 0xF7	; 247
    3f54:	80 81       	ld	r24, Z
    3f56:	8f 3f       	cpi	r24, 0xFF	; 255
    3f58:	09 f4       	brne	.+2      	; 0x3f5c <menuOnEnterUSBsendHW+0x3ae>
    3f5a:	47 c0       	rjmp	.+142    	; 0x3fea <menuOnEnterUSBsendHW+0x43c>
    3f5c:	66 e0       	ldi	r22, 0x06	; 6
    3f5e:	79 e1       	ldi	r23, 0x19	; 25
    3f60:	8e 2d       	mov	r24, r14
    3f62:	0e 94 83 3c 	call	0x7906	; 0x7906 <putChar_MidiChan>
    3f66:	bc 01       	movw	r22, r24
    3f68:	6f 5f       	subi	r22, 0xFF	; 255
    3f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f6c:	0f 2e       	mov	r0, r31
    3f6e:	f8 e2       	ldi	r31, 0x28	; 40
    3f70:	df 2e       	mov	r13, r31
    3f72:	f0 2d       	mov	r31, r0
    3f74:	fc 01       	movw	r30, r24
    3f76:	d0 82       	st	Z, r13
    3f78:	cc 0f       	add	r28, r28
    3f7a:	dd 1f       	adc	r29, r29
    3f7c:	cc 0f       	add	r28, r28
    3f7e:	dd 1f       	adc	r29, r29
    3f80:	c0 0f       	add	r28, r16
    3f82:	d1 1f       	adc	r29, r17
    3f84:	cc 0f       	add	r28, r28
    3f86:	dd 1f       	adc	r29, r29
    3f88:	cc 0f       	add	r28, r28
    3f8a:	dd 1f       	adc	r29, r29
    3f8c:	c2 5b       	subi	r28, 0xB2	; 178
    3f8e:	d7 4f       	sbci	r29, 0xF7	; 247
    3f90:	89 81       	ldd	r24, Y+1	; 0x01
    3f92:	0e 94 e7 3c 	call	0x79ce	; 0x79ce <putChar_Note>
    3f96:	bc 01       	movw	r22, r24
    3f98:	6f 5f       	subi	r22, 0xFF	; 255
    3f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f9c:	2d e2       	ldi	r18, 0x2D	; 45
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	20 83       	st	Z, r18
    3fa2:	99 81       	ldd	r25, Y+1	; 0x01
    3fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa6:	89 0f       	add	r24, r25
    3fa8:	0e 94 e7 3c 	call	0x79ce	; 0x79ce <putChar_Note>
    3fac:	fc 01       	movw	r30, r24
    3fae:	19 e2       	ldi	r17, 0x29	; 41
    3fb0:	10 83       	st	Z, r17
    3fb2:	80 e2       	ldi	r24, 0x20	; 32
    3fb4:	81 83       	std	Z+1, r24	; 0x01
    3fb6:	bf 01       	movw	r22, r30
    3fb8:	6d 5f       	subi	r22, 0xFD	; 253
    3fba:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbc:	8e e3       	ldi	r24, 0x3E	; 62
    3fbe:	82 83       	std	Z+2, r24	; 0x02
    3fc0:	88 81       	ld	r24, Y
    3fc2:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <putChar_Manual>
    3fc6:	bc 01       	movw	r22, r24
    3fc8:	6f 5f       	subi	r22, 0xFF	; 255
    3fca:	7f 4f       	sbci	r23, 0xFF	; 255
    3fcc:	fc 01       	movw	r30, r24
    3fce:	d0 82       	st	Z, r13
    3fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd2:	0e 94 e7 3c 	call	0x79ce	; 0x79ce <putChar_Note>
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	10 83       	st	Z, r17
    3fda:	11 82       	std	Z+1, r1	; 0x01
    3fdc:	86 e0       	ldi	r24, 0x06	; 6
    3fde:	99 e1       	ldi	r25, 0x19	; 25
    3fe0:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    3fe4:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    3fe8:	9f ef       	ldi	r25, 0xFF	; 255
    3fea:	f3 94       	inc	r15
    3fec:	01 c0       	rjmp	.+2      	; 0x3ff0 <menuOnEnterUSBsendHW+0x442>
    3fee:	f1 2c       	mov	r15, r1
    3ff0:	f3 e0       	ldi	r31, 0x03	; 3
    3ff2:	ff 15       	cp	r31, r15
    3ff4:	08 f0       	brcs	.+2      	; 0x3ff8 <menuOnEnterUSBsendHW+0x44a>
    3ff6:	9d cf       	rjmp	.-198    	; 0x3f32 <menuOnEnterUSBsendHW+0x384>
    3ff8:	e3 94       	inc	r14
    3ffa:	8f e0       	ldi	r24, 0x0F	; 15
    3ffc:	8e 15       	cp	r24, r14
    3ffe:	b8 f7       	brcc	.-18     	; 0x3fee <menuOnEnterUSBsendHW+0x440>
    4000:	91 11       	cpse	r25, r1
    4002:	06 c0       	rjmp	.+12     	; 0x4010 <menuOnEnterUSBsendHW+0x462>
    4004:	84 ef       	ldi	r24, 0xF4	; 244
    4006:	92 e0       	ldi	r25, 0x02	; 2
    4008:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    400c:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    4010:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    4014:	85 e0       	ldi	r24, 0x05	; 5
    4016:	93 e0       	ldi	r25, 0x03	; 3
    4018:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    401c:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    4020:	c0 e0       	ldi	r28, 0x00	; 0
    4022:	25 c0       	rjmp	.+74     	; 0x406e <menuOnEnterUSBsendHW+0x4c0>
    4024:	66 e0       	ldi	r22, 0x06	; 6
    4026:	79 e1       	ldi	r23, 0x19	; 25
    4028:	8c 2f       	mov	r24, r28
    402a:	0e 94 43 3d 	call	0x7a86	; 0x7a86 <putChar_Manual>
    402e:	dc 01       	movw	r26, r24
    4030:	bc 01       	movw	r22, r24
    4032:	6f 5f       	subi	r22, 0xFF	; 255
    4034:	7f 4f       	sbci	r23, 0xFF	; 255
    4036:	8a e3       	ldi	r24, 0x3A	; 58
    4038:	8c 93       	st	X, r24
    403a:	ec 2f       	mov	r30, r28
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	ee 0f       	add	r30, r30
    4040:	ff 1f       	adc	r31, r31
    4042:	e2 5b       	subi	r30, 0xB2	; 178
    4044:	f6 4f       	sbci	r31, 0xF6	; 246
    4046:	80 81       	ld	r24, Z
    4048:	8f 3f       	cpi	r24, 0xFF	; 255
    404a:	19 f0       	breq	.+6      	; 0x4052 <menuOnEnterUSBsendHW+0x4a4>
    404c:	0e 94 83 3c 	call	0x7906	; 0x7906 <putChar_MidiChan>
    4050:	05 c0       	rjmp	.+10     	; 0x405c <menuOnEnterUSBsendHW+0x4ae>
    4052:	cd 01       	movw	r24, r26
    4054:	02 96       	adiw	r24, 0x02	; 2
    4056:	2d e2       	ldi	r18, 0x2D	; 45
    4058:	11 96       	adiw	r26, 0x01	; 1
    405a:	2c 93       	st	X, r18
    405c:	fc 01       	movw	r30, r24
    405e:	10 82       	st	Z, r1
    4060:	86 e0       	ldi	r24, 0x06	; 6
    4062:	99 e1       	ldi	r25, 0x19	; 25
    4064:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    4068:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    406c:	cf 5f       	subi	r28, 0xFF	; 255
    406e:	c4 30       	cpi	r28, 0x04	; 4
    4070:	c8 f2       	brcs	.-78     	; 0x4024 <menuOnEnterUSBsendHW+0x476>
    4072:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    4076:	89 ef       	ldi	r24, 0xF9	; 249
    4078:	92 e0       	ldi	r25, 0x02	; 2
    407a:	0e 94 cb 39 	call	0x7396	; 0x7396 <serial0SER_USB_sendStringP>
    407e:	cc e4       	ldi	r28, 0x4C	; 76
    4080:	d8 e0       	ldi	r29, 0x08	; 8
    4082:	66 e0       	ldi	r22, 0x06	; 6
    4084:	79 e1       	ldi	r23, 0x19	; 25
    4086:	88 81       	ld	r24, Y
    4088:	0e 94 83 3c 	call	0x7906	; 0x7906 <putChar_MidiChan>
    408c:	bc 01       	movw	r22, r24
    408e:	6f 5f       	subi	r22, 0xFF	; 255
    4090:	7f 4f       	sbci	r23, 0xFF	; 255
    4092:	2e e3       	ldi	r18, 0x3E	; 62
    4094:	fc 01       	movw	r30, r24
    4096:	20 83       	st	Z, r18
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	0e 94 83 3c 	call	0x7906	; 0x7906 <putChar_MidiChan>
    409e:	fc 01       	movw	r30, r24
    40a0:	10 82       	st	Z, r1
    40a2:	86 e0       	ldi	r24, 0x06	; 6
    40a4:	99 e1       	ldi	r25, 0x19	; 25
    40a6:	0e 94 1f 3a 	call	0x743e	; 0x743e <serial0SER_USB_sendString>
    40aa:	0e 94 dd 39 	call	0x73ba	; 0x73ba <serial0SER_USB_sendCRLF>
    40ae:	80 e0       	ldi	r24, 0x00	; 0
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	df 90       	pop	r13
    40be:	cf 90       	pop	r12
    40c0:	bf 90       	pop	r11
    40c2:	af 90       	pop	r10
    40c4:	9f 90       	pop	r9
    40c6:	08 95       	ret

000040c8 <reverseRegisterBits>:
    40c8:	1f 93       	push	r17
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	10 e0       	ldi	r17, 0x00	; 0
    40d0:	09 c0       	rjmp	.+18     	; 0x40e4 <reverseRegisterBits+0x1c>
    40d2:	c1 2f       	mov	r28, r17
    40d4:	d0 e0       	ldi	r29, 0x00	; 0
    40d6:	cd 56       	subi	r28, 0x6D	; 109
    40d8:	da 4f       	sbci	r29, 0xFA	; 250
    40da:	88 81       	ld	r24, Y
    40dc:	0e 94 e2 3e 	call	0x7dc4	; 0x7dc4 <reverse_Bits>
    40e0:	88 83       	st	Y, r24
    40e2:	1f 5f       	subi	r17, 0xFF	; 255
    40e4:	18 30       	cpi	r17, 0x08	; 8
    40e6:	a8 f3       	brcs	.-22     	; 0x40d2 <reverseRegisterBits+0xa>
    40e8:	df 91       	pop	r29
    40ea:	cf 91       	pop	r28
    40ec:	1f 91       	pop	r17
    40ee:	08 95       	ret

000040f0 <menuOnUpdateRegister>:
    40f0:	83 e9       	ldi	r24, 0x93	; 147
    40f2:	95 e0       	ldi	r25, 0x05	; 5
    40f4:	0e 94 01 31 	call	0x6202	; 0x6202 <read_allRegister>
    40f8:	e7 df       	rcall	.-50     	; 0x40c8 <reverseRegisterBits>
    40fa:	80 e0       	ldi	r24, 0x00	; 0
    40fc:	08 95       	ret

000040fe <menuOnEnterResetReg>:
    40fe:	0e 94 41 32 	call	0x6482	; 0x6482 <midi_resetRegisters>
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	f5 df       	rcall	.-22     	; 0x40f0 <menuOnUpdateRegister>
    4106:	80 e0       	ldi	r24, 0x00	; 0
    4108:	08 95       	ret

0000410a <menuOnExitLoadProgran>:
    410a:	86 30       	cpi	r24, 0x06	; 6
    410c:	31 f0       	breq	.+12     	; 0x411a <menuOnExitLoadProgran+0x10>
    410e:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menuVKombination>
    4112:	80 34       	cpi	r24, 0x40	; 64
    4114:	10 f4       	brcc	.+4      	; 0x411a <menuOnExitLoadProgran+0x10>
    4116:	0e 94 b6 31 	call	0x636c	; 0x636c <program_toRegister>
    411a:	80 e0       	ldi	r24, 0x00	; 0
    411c:	e9 df       	rcall	.-46     	; 0x40f0 <menuOnUpdateRegister>
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	08 95       	ret

00004122 <softkeyCoupler>:
    4122:	cf 93       	push	r28
    4124:	c6 2f       	mov	r28, r22
    4126:	88 23       	and	r24, r24
    4128:	d9 f0       	breq	.+54     	; 0x4160 <softkeyCoupler+0x3e>
    412a:	e6 2f       	mov	r30, r22
    412c:	f0 e0       	ldi	r31, 0x00	; 0
    412e:	df 01       	movw	r26, r30
    4130:	a9 5c       	subi	r26, 0xC9	; 201
    4132:	b7 4f       	sbci	r27, 0xF7	; 247
    4134:	8c 91       	ld	r24, X
    4136:	81 11       	cpse	r24, r1
    4138:	08 c0       	rjmp	.+16     	; 0x414a <softkeyCoupler+0x28>
    413a:	86 2f       	mov	r24, r22
    413c:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <set_Coupler>
    4140:	88 23       	and	r24, r24
    4142:	71 f0       	breq	.+28     	; 0x4160 <softkeyCoupler+0x3e>
    4144:	0e 94 8d 35 	call	0x6b1a	; 0x6b1a <midi_ManualOff>
    4148:	0b c0       	rjmp	.+22     	; 0x4160 <softkeyCoupler+0x3e>
    414a:	df 01       	movw	r26, r30
    414c:	a9 5c       	subi	r26, 0xC9	; 201
    414e:	b7 4f       	sbci	r27, 0xF7	; 247
    4150:	1c 92       	st	X, r1
    4152:	ee 0f       	add	r30, r30
    4154:	ff 1f       	adc	r31, r31
    4156:	e8 51       	subi	r30, 0x18	; 24
    4158:	fc 4e       	sbci	r31, 0xEC	; 236
    415a:	84 91       	lpm	r24, Z
    415c:	0e 94 8d 35 	call	0x6b1a	; 0x6b1a <midi_ManualOff>
    4160:	ec 2f       	mov	r30, r28
    4162:	f0 e0       	ldi	r31, 0x00	; 0
    4164:	e9 5c       	subi	r30, 0xC9	; 201
    4166:	f7 4f       	sbci	r31, 0xF7	; 247
    4168:	80 81       	ld	r24, Z
    416a:	81 11       	cpse	r24, r1
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <softkeyCoupler+0x50>
    416e:	82 e8       	ldi	r24, 0x82	; 130
    4170:	01 c0       	rjmp	.+2      	; 0x4174 <softkeyCoupler+0x52>
    4172:	81 e8       	ldi	r24, 0x81	; 129
    4174:	cf 91       	pop	r28
    4176:	08 95       	ret

00004178 <softKeyCoupler2from3>:
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	d3 cf       	rjmp	.-90     	; 0x4122 <softkeyCoupler>
    417c:	08 95       	ret

0000417e <softKeyCoupler1from3>:
    417e:	61 e0       	ldi	r22, 0x01	; 1
    4180:	d0 cf       	rjmp	.-96     	; 0x4122 <softkeyCoupler>
    4182:	08 95       	ret

00004184 <softKeyCouplerPfrom3>:
    4184:	63 e0       	ldi	r22, 0x03	; 3
    4186:	cd cf       	rjmp	.-102    	; 0x4122 <softkeyCoupler>
    4188:	08 95       	ret

0000418a <softKeyCoupler1from2>:
    418a:	62 e0       	ldi	r22, 0x02	; 2
    418c:	ca cf       	rjmp	.-108    	; 0x4122 <softkeyCoupler>
    418e:	08 95       	ret

00004190 <softKeyCouplerPfrom2>:
    4190:	64 e0       	ldi	r22, 0x04	; 4
    4192:	c7 cf       	rjmp	.-114    	; 0x4122 <softkeyCoupler>
    4194:	08 95       	ret

00004196 <softKeyCouplerPfrom1>:
    4196:	65 e0       	ldi	r22, 0x05	; 5
    4198:	c4 cf       	rjmp	.-120    	; 0x4122 <softkeyCoupler>
    419a:	08 95       	ret

0000419c <softKeyCoupler3from2>:
    419c:	66 e0       	ldi	r22, 0x06	; 6
    419e:	c1 cf       	rjmp	.-126    	; 0x4122 <softkeyCoupler>
    41a0:	08 95       	ret

000041a2 <softKeyCoupler3from1>:
    41a2:	67 e0       	ldi	r22, 0x07	; 7
    41a4:	be cf       	rjmp	.-132    	; 0x4122 <softkeyCoupler>
    41a6:	08 95       	ret

000041a8 <softKeyCoupler3fromP>:
    41a8:	69 e0       	ldi	r22, 0x09	; 9
    41aa:	bb cf       	rjmp	.-138    	; 0x4122 <softkeyCoupler>
    41ac:	08 95       	ret

000041ae <softKeyCoupler2from1>:
    41ae:	68 e0       	ldi	r22, 0x08	; 8
    41b0:	b8 cf       	rjmp	.-144    	; 0x4122 <softkeyCoupler>
    41b2:	08 95       	ret

000041b4 <softKeyCoupler2fromP>:
    41b4:	6a e0       	ldi	r22, 0x0A	; 10
    41b6:	b5 cf       	rjmp	.-150    	; 0x4122 <softkeyCoupler>
    41b8:	08 95       	ret

000041ba <softKeyCoupler1fromP>:
    41ba:	6b e0       	ldi	r22, 0x0B	; 11
    41bc:	b2 cf       	rjmp	.-156    	; 0x4122 <softkeyCoupler>
    41be:	08 95       	ret

000041c0 <menuDisplaySaveMessage>:
    41c0:	cf 93       	push	r28
    41c2:	c6 2f       	mov	r28, r22
    41c4:	66 e0       	ldi	r22, 0x06	; 6
    41c6:	79 e1       	ldi	r23, 0x19	; 25
    41c8:	0e 94 44 3c 	call	0x7888	; 0x7888 <putChar_Dec>
    41cc:	bc 01       	movw	r22, r24
    41ce:	8e e0       	ldi	r24, 0x0E	; 14
    41d0:	94 e0       	ldi	r25, 0x04	; 4
    41d2:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <putString_P>
    41d6:	6c 2f       	mov	r22, r28
    41d8:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <putString_Prog>
    41dc:	86 e0       	ldi	r24, 0x06	; 6
    41de:	99 e1       	ldi	r25, 0x19	; 25
    41e0:	0e 94 80 14 	call	0x2900	; 0x2900 <lcd_message>
    41e4:	cf 91       	pop	r28
    41e6:	08 95       	ret

000041e8 <softKeyPrSet>:
    41e8:	cf 93       	push	r28
    41ea:	df 93       	push	r29
    41ec:	88 23       	and	r24, r24
    41ee:	79 f0       	breq	.+30     	; 0x420e <softKeyPrSet+0x26>
    41f0:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    41f4:	c0 34       	cpi	r28, 0x40	; 64
    41f6:	58 f4       	brcc	.+22     	; 0x420e <softKeyPrSet+0x26>
    41f8:	dc 2f       	mov	r29, r28
    41fa:	d0 68       	ori	r29, 0x80	; 128
    41fc:	6f ef       	ldi	r22, 0xFF	; 255
    41fe:	8c 2f       	mov	r24, r28
    4200:	0e 94 50 32 	call	0x64a0	; 0x64a0 <register_toProgram>
    4204:	6c 2f       	mov	r22, r28
    4206:	dc df       	rcall	.-72     	; 0x41c0 <menuDisplaySaveMessage>
    4208:	8d 2f       	mov	r24, r29
    420a:	0e 94 ac 31 	call	0x6358	; 0x6358 <prog_set>
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	df 91       	pop	r29
    4212:	cf 91       	pop	r28
    4214:	08 95       	ret

00004216 <menuDisplayLoadMessage>:
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	c8 2f       	mov	r28, r24
    421e:	86 e0       	ldi	r24, 0x06	; 6
    4220:	99 e1       	ldi	r25, 0x19	; 25
    4222:	0e 94 72 3d 	call	0x7ae4	; 0x7ae4 <putString_Prog>
    4226:	bc 01       	movw	r22, r24
    4228:	6f 5f       	subi	r22, 0xFF	; 255
    422a:	7f 4f       	sbci	r23, 0xFF	; 255
    422c:	2e e7       	ldi	r18, 0x7E	; 126
    422e:	fc 01       	movw	r30, r24
    4230:	20 83       	st	Z, r18
    4232:	8c 2f       	mov	r24, r28
    4234:	0e 94 44 3c 	call	0x7888	; 0x7888 <putChar_Dec>
    4238:	bc 01       	movw	r22, r24
    423a:	89 e0       	ldi	r24, 0x09	; 9
    423c:	94 e0       	ldi	r25, 0x04	; 4
    423e:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <putString_P>
    4242:	8c 01       	movw	r16, r24
    4244:	0e 94 08 10 	call	0x2010	; 0x2010 <module_WaitOutputInput2Cycles>
    4248:	84 e0       	ldi	r24, 0x04	; 4
    424a:	0e 94 ed 30 	call	0x61da	; 0x61da <count_Registers>
    424e:	c8 2f       	mov	r28, r24
    4250:	88 23       	and	r24, r24
    4252:	49 f0       	breq	.+18     	; 0x4266 <menuDisplayLoadMessage+0x50>
    4254:	b8 01       	movw	r22, r16
    4256:	87 e0       	ldi	r24, 0x07	; 7
    4258:	94 e0       	ldi	r25, 0x04	; 4
    425a:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <putString_P>
    425e:	bc 01       	movw	r22, r24
    4260:	8c 2f       	mov	r24, r28
    4262:	0e 94 44 3c 	call	0x7888	; 0x7888 <putChar_Dec>
    4266:	86 e0       	ldi	r24, 0x06	; 6
    4268:	99 e1       	ldi	r25, 0x19	; 25
    426a:	0e 94 80 14 	call	0x2900	; 0x2900 <lcd_message>
    426e:	cf 91       	pop	r28
    4270:	1f 91       	pop	r17
    4272:	0f 91       	pop	r16
    4274:	08 95       	ret

00004276 <send_progrChange_toMidiThru>:
    4276:	cf 93       	push	r28
    4278:	80 34       	cpi	r24, 0x40	; 64
    427a:	60 f4       	brcc	.+24     	; 0x4294 <send_progrChange_toMidiThru+0x1e>
    427c:	90 91 4d 08 	lds	r25, 0x084D	; 0x80084d <midiThrough+0x1>
    4280:	9f 3f       	cpi	r25, 0xFF	; 255
    4282:	41 f0       	breq	.+16     	; 0x4294 <send_progrChange_toMidiThru+0x1e>
    4284:	c8 2f       	mov	r28, r24
    4286:	89 2f       	mov	r24, r25
    4288:	80 6c       	ori	r24, 0xC0	; 192
    428a:	0e 94 4a 39 	call	0x7294	; 0x7294 <serial1MIDISend>
    428e:	8c 2f       	mov	r24, r28
    4290:	0e 94 4a 39 	call	0x7294	; 0x7294 <serial1MIDISend>
    4294:	cf 91       	pop	r28
    4296:	08 95       	ret

00004298 <handle_programKey>:
    4298:	cf 93       	push	r28
    429a:	c6 2f       	mov	r28, r22
    429c:	88 23       	and	r24, r24
    429e:	3c f4       	brge	.+14     	; 0x42ae <handle_programKey+0x16>
    42a0:	6f ef       	ldi	r22, 0xFF	; 255
    42a2:	8c 2f       	mov	r24, r28
    42a4:	0e 94 50 32 	call	0x64a0	; 0x64a0 <register_toProgram>
    42a8:	6c 2f       	mov	r22, r28
    42aa:	8a df       	rcall	.-236    	; 0x41c0 <menuDisplaySaveMessage>
    42ac:	09 c0       	rjmp	.+18     	; 0x42c0 <handle_programKey+0x28>
    42ae:	88 23       	and	r24, r24
    42b0:	39 f0       	breq	.+14     	; 0x42c0 <handle_programKey+0x28>
    42b2:	86 2f       	mov	r24, r22
    42b4:	0e 94 b6 31 	call	0x636c	; 0x636c <program_toRegister>
    42b8:	6c 2f       	mov	r22, r28
    42ba:	ad df       	rcall	.-166    	; 0x4216 <menuDisplayLoadMessage>
    42bc:	8c 2f       	mov	r24, r28
    42be:	db df       	rcall	.-74     	; 0x4276 <send_progrChange_toMidiThru>
    42c0:	8c 2f       	mov	r24, r28
    42c2:	0e 94 8c 31 	call	0x6318	; 0x6318 <midi_CountRegisterInProgram>
    42c6:	88 23       	and	r24, r24
    42c8:	39 f0       	breq	.+14     	; 0x42d8 <handle_programKey+0x40>
    42ca:	8c 2f       	mov	r24, r28
    42cc:	0e 94 52 31 	call	0x62a4	; 0x62a4 <midi_RegisterMatchProgram>
    42d0:	81 11       	cpse	r24, r1
    42d2:	04 c0       	rjmp	.+8      	; 0x42dc <handle_programKey+0x44>
    42d4:	81 e8       	ldi	r24, 0x81	; 129
    42d6:	03 c0       	rjmp	.+6      	; 0x42de <handle_programKey+0x46>
    42d8:	82 e8       	ldi	r24, 0x82	; 130
    42da:	01 c0       	rjmp	.+2      	; 0x42de <handle_programKey+0x46>
    42dc:	82 e8       	ldi	r24, 0x82	; 130
    42de:	cf 91       	pop	r28
    42e0:	08 95       	ret

000042e2 <softKeyK1A>:
    42e2:	60 e0       	ldi	r22, 0x00	; 0
    42e4:	d9 cf       	rjmp	.-78     	; 0x4298 <handle_programKey>
    42e6:	08 95       	ret

000042e8 <softKeyK2A>:
    42e8:	61 e0       	ldi	r22, 0x01	; 1
    42ea:	d6 cf       	rjmp	.-84     	; 0x4298 <handle_programKey>
    42ec:	08 95       	ret

000042ee <softKeyK3A>:
    42ee:	62 e0       	ldi	r22, 0x02	; 2
    42f0:	d3 cf       	rjmp	.-90     	; 0x4298 <handle_programKey>
    42f2:	08 95       	ret

000042f4 <softKeyK4A>:
    42f4:	63 e0       	ldi	r22, 0x03	; 3
    42f6:	d0 cf       	rjmp	.-96     	; 0x4298 <handle_programKey>
    42f8:	08 95       	ret

000042fa <softKeyUpdateProg>:
    42fa:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    42fe:	80 34       	cpi	r24, 0x40	; 64
    4300:	30 f4       	brcc	.+12     	; 0x430e <softKeyUpdateProg+0x14>
    4302:	b9 df       	rcall	.-142    	; 0x4276 <send_progrChange_toMidiThru>
    4304:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4308:	0e 94 b6 31 	call	0x636c	; 0x636c <program_toRegister>
    430c:	02 c0       	rjmp	.+4      	; 0x4312 <softKeyUpdateProg+0x18>
    430e:	0e 94 41 32 	call	0x6482	; 0x6482 <midi_resetRegisters>
    4312:	8f ef       	ldi	r24, 0xFF	; 255
    4314:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
    4318:	08 95       	ret

0000431a <softKeyPBInc>:
    431a:	88 23       	and	r24, r24
    431c:	39 f0       	breq	.+14     	; 0x432c <softKeyPBInc+0x12>
    431e:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4322:	88 5f       	subi	r24, 0xF8	; 248
    4324:	88 73       	andi	r24, 0x38	; 56
    4326:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    432a:	e7 df       	rcall	.-50     	; 0x42fa <softKeyUpdateProg>
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	08 95       	ret

00004330 <softKeyPBDec>:
    4330:	88 23       	and	r24, r24
    4332:	39 f0       	breq	.+14     	; 0x4342 <softKeyPBDec+0x12>
    4334:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4338:	88 50       	subi	r24, 0x08	; 8
    433a:	88 73       	andi	r24, 0x38	; 56
    433c:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4340:	dc df       	rcall	.-72     	; 0x42fa <softKeyUpdateProg>
    4342:	80 e0       	ldi	r24, 0x00	; 0
    4344:	08 95       	ret

00004346 <progDec>:
    4346:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    434a:	8f 3f       	cpi	r24, 0xFF	; 255
    434c:	21 f4       	brne	.+8      	; 0x4356 <progDec+0x10>
    434e:	8f e3       	ldi	r24, 0x3F	; 63
    4350:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4354:	08 95       	ret
    4356:	80 34       	cpi	r24, 0x40	; 64
    4358:	20 f4       	brcc	.+8      	; 0x4362 <progDec+0x1c>
    435a:	81 50       	subi	r24, 0x01	; 1
    435c:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4360:	08 95       	ret
    4362:	8f 77       	andi	r24, 0x7F	; 127
    4364:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4368:	08 95       	ret

0000436a <softKeyPrM>:
    436a:	cf 93       	push	r28
    436c:	88 23       	and	r24, r24
    436e:	4c f4       	brge	.+18     	; 0x4382 <softKeyPrM+0x18>
    4370:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    4374:	c0 68       	ori	r28, 0x80	; 128
    4376:	0e 94 41 32 	call	0x6482	; 0x6482 <midi_resetRegisters>
    437a:	8c 2f       	mov	r24, r28
    437c:	0e 94 ac 31 	call	0x6358	; 0x6358 <prog_set>
    4380:	04 c0       	rjmp	.+8      	; 0x438a <softKeyPrM+0x20>
    4382:	88 23       	and	r24, r24
    4384:	11 f0       	breq	.+4      	; 0x438a <softKeyPrM+0x20>
    4386:	df df       	rcall	.-66     	; 0x4346 <progDec>
    4388:	b8 df       	rcall	.-144    	; 0x42fa <softKeyUpdateProg>
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	cf 91       	pop	r28
    438e:	08 95       	ret

00004390 <softKeyPrDec>:
    4390:	88 23       	and	r24, r24
    4392:	69 f0       	breq	.+26     	; 0x43ae <softKeyPrDec+0x1e>
    4394:	4c f4       	brge	.+18     	; 0x43a8 <softKeyPrDec+0x18>
    4396:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    439a:	80 34       	cpi	r24, 0x40	; 64
    439c:	38 f4       	brcc	.+14     	; 0x43ac <softKeyPrDec+0x1c>
    439e:	88 50       	subi	r24, 0x08	; 8
    43a0:	88 73       	andi	r24, 0x38	; 56
    43a2:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    43a6:	02 c0       	rjmp	.+4      	; 0x43ac <softKeyPrDec+0x1c>
    43a8:	81 11       	cpse	r24, r1
    43aa:	cd df       	rcall	.-102    	; 0x4346 <progDec>
    43ac:	a6 df       	rcall	.-180    	; 0x42fa <softKeyUpdateProg>
    43ae:	80 e0       	ldi	r24, 0x00	; 0
    43b0:	08 95       	ret

000043b2 <progInc>:
    43b2:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    43b6:	8f 33       	cpi	r24, 0x3F	; 63
    43b8:	21 f4       	brne	.+8      	; 0x43c2 <progInc+0x10>
    43ba:	8f ef       	ldi	r24, 0xFF	; 255
    43bc:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    43c0:	08 95       	ret
    43c2:	8f 33       	cpi	r24, 0x3F	; 63
    43c4:	20 f4       	brcc	.+8      	; 0x43ce <progInc+0x1c>
    43c6:	8f 5f       	subi	r24, 0xFF	; 255
    43c8:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    43cc:	08 95       	ret
    43ce:	8f 3f       	cpi	r24, 0xFF	; 255
    43d0:	19 f4       	brne	.+6      	; 0x43d8 <progInc+0x26>
    43d2:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <prog_Display>
    43d6:	08 95       	ret
    43d8:	8f 77       	andi	r24, 0x7F	; 127
    43da:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    43de:	08 95       	ret

000043e0 <softKeyPrP>:
    43e0:	cf 93       	push	r28
    43e2:	df 93       	push	r29
    43e4:	88 23       	and	r24, r24
    43e6:	84 f4       	brge	.+32     	; 0x4408 <softKeyPrP+0x28>
    43e8:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    43ec:	c0 34       	cpi	r28, 0x40	; 64
    43ee:	80 f4       	brcc	.+32     	; 0x4410 <softKeyPrP+0x30>
    43f0:	dc 2f       	mov	r29, r28
    43f2:	d0 68       	ori	r29, 0x80	; 128
    43f4:	6f ef       	ldi	r22, 0xFF	; 255
    43f6:	8c 2f       	mov	r24, r28
    43f8:	0e 94 50 32 	call	0x64a0	; 0x64a0 <register_toProgram>
    43fc:	6c 2f       	mov	r22, r28
    43fe:	e0 de       	rcall	.-576    	; 0x41c0 <menuDisplaySaveMessage>
    4400:	8d 2f       	mov	r24, r29
    4402:	0e 94 ac 31 	call	0x6358	; 0x6358 <prog_set>
    4406:	04 c0       	rjmp	.+8      	; 0x4410 <softKeyPrP+0x30>
    4408:	88 23       	and	r24, r24
    440a:	11 f0       	breq	.+4      	; 0x4410 <softKeyPrP+0x30>
    440c:	d2 df       	rcall	.-92     	; 0x43b2 <progInc>
    440e:	75 df       	rcall	.-278    	; 0x42fa <softKeyUpdateProg>
    4410:	80 e0       	ldi	r24, 0x00	; 0
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	08 95       	ret

00004418 <softKeyPrInc>:
    4418:	88 23       	and	r24, r24
    441a:	69 f0       	breq	.+26     	; 0x4436 <softKeyPrInc+0x1e>
    441c:	4c f4       	brge	.+18     	; 0x4430 <softKeyPrInc+0x18>
    441e:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4422:	80 34       	cpi	r24, 0x40	; 64
    4424:	38 f4       	brcc	.+14     	; 0x4434 <softKeyPrInc+0x1c>
    4426:	88 5f       	subi	r24, 0xF8	; 248
    4428:	88 73       	andi	r24, 0x38	; 56
    442a:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <softKeyPrInc+0x1c>
    4430:	81 11       	cpse	r24, r1
    4432:	bf df       	rcall	.-130    	; 0x43b2 <progInc>
    4434:	62 df       	rcall	.-316    	; 0x42fa <softKeyUpdateProg>
    4436:	80 e0       	ldi	r24, 0x00	; 0
    4438:	08 95       	ret

0000443a <menuLCDwriteOK>:
    443a:	8e ee       	ldi	r24, 0xEE	; 238
    443c:	93 e0       	ldi	r25, 0x03	; 3
    443e:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <lcd_message_P>
    4442:	08 95       	ret

00004444 <menuOnEnterEEBackup>:
    4444:	8e e1       	ldi	r24, 0x1E	; 30
    4446:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    444a:	81 ed       	ldi	r24, 0xD1	; 209
    444c:	93 e0       	ldi	r25, 0x03	; 3
    444e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    4452:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <eeprom_Backup>
    4456:	f1 df       	rcall	.-30     	; 0x443a <menuLCDwriteOK>
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	08 95       	ret

0000445c <menuOnEnterEERestore>:
    445c:	8e e1       	ldi	r24, 0x1E	; 30
    445e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4462:	81 ed       	ldi	r24, 0xD1	; 209
    4464:	93 e0       	ldi	r25, 0x03	; 3
    4466:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    446a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <eeprom_Restore>
    446e:	e5 df       	rcall	.-54     	; 0x443a <menuLCDwriteOK>
    4470:	80 e0       	ldi	r24, 0x00	; 0
    4472:	08 95       	ret

00004474 <menuOnEnterEEUpdate>:
    4474:	81 ed       	ldi	r24, 0xD1	; 209
    4476:	93 e0       	ldi	r25, 0x03	; 3
    4478:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    447c:	8e e1       	ldi	r24, 0x1E	; 30
    447e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4482:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <eeprom_UpdateALL>
    4486:	d9 df       	rcall	.-78     	; 0x443a <menuLCDwriteOK>
    4488:	80 e0       	ldi	r24, 0x00	; 0
    448a:	08 95       	ret

0000448c <menu_Init>:
    448c:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <menuStackIndex>
    4490:	00 97       	sbiw	r24, 0x00	; 0
    4492:	69 f4       	brne	.+26     	; 0x44ae <menu_Init+0x22>
    4494:	86 e1       	ldi	r24, 0x16	; 22
    4496:	98 e0       	ldi	r25, 0x08	; 8
    4498:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    449c:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    44a0:	8f e1       	ldi	r24, 0x1F	; 31
    44a2:	94 e0       	ldi	r25, 0x04	; 4
    44a4:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <pMenuTopTitle+0x1>
    44a8:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <pMenuTopTitle>
    44ac:	08 c0       	rjmp	.+16     	; 0x44be <menu_Init+0x32>
    44ae:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    44b2:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    44b6:	70 93 c3 05 	sts	0x05C3, r23	; 0x8005c3 <pMenuTopTitle+0x1>
    44ba:	60 93 c2 05 	sts	0x05C2, r22	; 0x8005c2 <pMenuTopTitle>
    44be:	8f ef       	ldi	r24, 0xFF	; 255
    44c0:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    44c4:	89 e2       	ldi	r24, 0x29	; 41
    44c6:	94 e0       	ldi	r25, 0x04	; 4
    44c8:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <pNibbleInfo+0x1>
    44cc:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <pNibbleInfo>
    44d0:	08 95       	ret

000044d2 <softkeyLeft>:
    44d2:	62 e2       	ldi	r22, 0x22	; 34
    44d4:	74 e1       	ldi	r23, 0x14	; 20
    44d6:	82 e0       	ldi	r24, 0x02	; 2
    44d8:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    44dc:	08 95       	ret

000044de <softkeyRight>:
    44de:	64 e2       	ldi	r22, 0x24	; 36
    44e0:	74 e1       	ldi	r23, 0x14	; 20
    44e2:	83 e0       	ldi	r24, 0x03	; 3
    44e4:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    44e8:	08 95       	ret

000044ea <softkeyDown>:
    44ea:	66 e2       	ldi	r22, 0x26	; 38
    44ec:	74 e1       	ldi	r23, 0x14	; 20
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    44f4:	08 95       	ret

000044f6 <softkeyOn>:
    44f6:	64 e1       	ldi	r22, 0x14	; 20
    44f8:	74 e1       	ldi	r23, 0x14	; 20
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    4500:	08 95       	ret

00004502 <softkeyOff>:
    4502:	6f e0       	ldi	r22, 0x0F	; 15
    4504:	74 e1       	ldi	r23, 0x14	; 20
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    450c:	08 95       	ret

0000450e <softkeyUp>:
    450e:	68 e2       	ldi	r22, 0x28	; 40
    4510:	74 e1       	ldi	r23, 0x14	; 20
    4512:	80 e0       	ldi	r24, 0x00	; 0
    4514:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    4518:	08 95       	ret

0000451a <softkeyPlus>:
    451a:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    451e:	8a 30       	cpi	r24, 0x0A	; 10
    4520:	11 f0       	breq	.+4      	; 0x4526 <softkeyPlus+0xc>
    4522:	8e 30       	cpi	r24, 0x0E	; 14
    4524:	31 f4       	brne	.+12     	; 0x4532 <softkeyPlus+0x18>
    4526:	60 e0       	ldi	r22, 0x00	; 0
    4528:	74 e1       	ldi	r23, 0x14	; 20
    452a:	80 e0       	ldi	r24, 0x00	; 0
    452c:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    4530:	08 95       	ret
    4532:	60 e2       	ldi	r22, 0x20	; 32
    4534:	74 e1       	ldi	r23, 0x14	; 20
    4536:	80 e0       	ldi	r24, 0x00	; 0
    4538:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    453c:	08 95       	ret

0000453e <softkeyMinus>:
    453e:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    4542:	8a 30       	cpi	r24, 0x0A	; 10
    4544:	11 f0       	breq	.+4      	; 0x454a <softkeyMinus+0xc>
    4546:	8e 30       	cpi	r24, 0x0E	; 14
    4548:	31 f4       	brne	.+12     	; 0x4556 <softkeyMinus+0x18>
    454a:	62 e0       	ldi	r22, 0x02	; 2
    454c:	74 e1       	ldi	r23, 0x14	; 20
    454e:	81 e0       	ldi	r24, 0x01	; 1
    4550:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    4554:	08 95       	ret
    4556:	6e e1       	ldi	r22, 0x1E	; 30
    4558:	74 e1       	ldi	r23, 0x14	; 20
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	0c 94 3d 3e 	jmp	0x7c7a	; 0x7c7a <keylabel_set>
    4560:	08 95       	ret

00004562 <dataToNibbles>:
    4562:	cf 93       	push	r28
    4564:	df 93       	push	r29
    4566:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    456a:	8e 2f       	mov	r24, r30
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	fc 01       	movw	r30, r24
    4570:	32 97       	sbiw	r30, 0x02	; 2
    4572:	ed 30       	cpi	r30, 0x0D	; 13
    4574:	f1 05       	cpc	r31, r1
    4576:	08 f0       	brcs	.+2      	; 0x457a <dataToNibbles+0x18>
    4578:	e4 c0       	rjmp	.+456    	; 0x4742 <dataToNibbles+0x1e0>
    457a:	88 27       	eor	r24, r24
    457c:	ee 58       	subi	r30, 0x8E	; 142
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	8f 4f       	sbci	r24, 0xFF	; 255
    4582:	0c 94 ef 3e 	jmp	0x7dde	; 0x7dde <__tablejump2__>
    4586:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    458a:	ea ee       	ldi	r30, 0xEA	; 234
    458c:	f5 e0       	ldi	r31, 0x05	; 5
    458e:	98 2f       	mov	r25, r24
    4590:	92 95       	swap	r25
    4592:	9f 70       	andi	r25, 0x0F	; 15
    4594:	90 83       	st	Z, r25
    4596:	8f 70       	andi	r24, 0x0F	; 15
    4598:	81 83       	std	Z+1, r24	; 0x01
    459a:	d3 c0       	rjmp	.+422    	; 0x4742 <dataToNibbles+0x1e0>
    459c:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    45a0:	80 31       	cpi	r24, 0x10	; 16
    45a2:	20 f0       	brcs	.+8      	; 0x45ac <dataToNibbles+0x4a>
    45a4:	8f ef       	ldi	r24, 0xFF	; 255
    45a6:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    45aa:	cb c0       	rjmp	.+406    	; 0x4742 <dataToNibbles+0x1e0>
    45ac:	8f 5f       	subi	r24, 0xFF	; 255
    45ae:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    45b2:	c7 c0       	rjmp	.+398    	; 0x4742 <dataToNibbles+0x1e0>
    45b4:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    45b8:	88 23       	and	r24, r24
    45ba:	34 f4       	brge	.+12     	; 0x45c8 <dataToNibbles+0x66>
    45bc:	ea ee       	ldi	r30, 0xEA	; 234
    45be:	f5 e0       	ldi	r31, 0x05	; 5
    45c0:	10 82       	st	Z, r1
    45c2:	8f ef       	ldi	r24, 0xFF	; 255
    45c4:	81 83       	std	Z+1, r24	; 0x01
    45c6:	bd c0       	rjmp	.+378    	; 0x4742 <dataToNibbles+0x1e0>
    45c8:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <nibble+0x1>
    45cc:	08 c0       	rjmp	.+16     	; 0x45de <dataToNibbles+0x7c>
    45ce:	ea ee       	ldi	r30, 0xEA	; 234
    45d0:	f5 e0       	ldi	r31, 0x05	; 5
    45d2:	91 81       	ldd	r25, Z+1	; 0x01
    45d4:	9f 5f       	subi	r25, 0xFF	; 255
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	8c 50       	subi	r24, 0x0C	; 12
    45da:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    45de:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    45e2:	8c 30       	cpi	r24, 0x0C	; 12
    45e4:	a0 f7       	brcc	.-24     	; 0x45ce <dataToNibbles+0x6c>
    45e6:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    45ea:	ab c0       	rjmp	.+342    	; 0x4742 <dataToNibbles+0x1e0>
    45ec:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    45f0:	ea ee       	ldi	r30, 0xEA	; 234
    45f2:	f5 e0       	ldi	r31, 0x05	; 5
    45f4:	98 2f       	mov	r25, r24
    45f6:	92 95       	swap	r25
    45f8:	96 95       	lsr	r25
    45fa:	97 70       	andi	r25, 0x07	; 7
    45fc:	90 83       	st	Z, r25
    45fe:	8f 71       	andi	r24, 0x1F	; 31
    4600:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4604:	11 82       	std	Z+1, r1	; 0x01
    4606:	08 c0       	rjmp	.+16     	; 0x4618 <dataToNibbles+0xb6>
    4608:	ea ee       	ldi	r30, 0xEA	; 234
    460a:	f5 e0       	ldi	r31, 0x05	; 5
    460c:	91 81       	ldd	r25, Z+1	; 0x01
    460e:	9f 5f       	subi	r25, 0xFF	; 255
    4610:	91 83       	std	Z+1, r25	; 0x01
    4612:	8a 50       	subi	r24, 0x0A	; 10
    4614:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4618:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    461c:	8a 30       	cpi	r24, 0x0A	; 10
    461e:	a0 f7       	brcc	.-24     	; 0x4608 <dataToNibbles+0xa6>
    4620:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble+0x2>
    4624:	8e c0       	rjmp	.+284    	; 0x4742 <dataToNibbles+0x1e0>
    4626:	ea ee       	ldi	r30, 0xEA	; 234
    4628:	f5 e0       	ldi	r31, 0x05	; 5
    462a:	10 82       	st	Z, r1
    462c:	11 82       	std	Z+1, r1	; 0x01
    462e:	08 c0       	rjmp	.+16     	; 0x4640 <dataToNibbles+0xde>
    4630:	ea ee       	ldi	r30, 0xEA	; 234
    4632:	f5 e0       	ldi	r31, 0x05	; 5
    4634:	90 81       	ld	r25, Z
    4636:	9f 5f       	subi	r25, 0xFF	; 255
    4638:	90 83       	st	Z, r25
    463a:	84 56       	subi	r24, 0x64	; 100
    463c:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4640:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4644:	84 36       	cpi	r24, 0x64	; 100
    4646:	a0 f7       	brcc	.-24     	; 0x4630 <dataToNibbles+0xce>
    4648:	08 c0       	rjmp	.+16     	; 0x465a <dataToNibbles+0xf8>
    464a:	ea ee       	ldi	r30, 0xEA	; 234
    464c:	f5 e0       	ldi	r31, 0x05	; 5
    464e:	91 81       	ldd	r25, Z+1	; 0x01
    4650:	9f 5f       	subi	r25, 0xFF	; 255
    4652:	91 83       	std	Z+1, r25	; 0x01
    4654:	8a 50       	subi	r24, 0x0A	; 10
    4656:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    465a:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    465e:	8a 30       	cpi	r24, 0x0A	; 10
    4660:	a0 f7       	brcc	.-24     	; 0x464a <dataToNibbles+0xe8>
    4662:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble+0x2>
    4666:	6d c0       	rjmp	.+218    	; 0x4742 <dataToNibbles+0x1e0>
    4668:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    466c:	84 30       	cpi	r24, 0x04	; 4
    466e:	20 f0       	brcs	.+8      	; 0x4678 <dataToNibbles+0x116>
    4670:	8f ef       	ldi	r24, 0xFF	; 255
    4672:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4676:	65 c0       	rjmp	.+202    	; 0x4742 <dataToNibbles+0x1e0>
    4678:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    467c:	62 c0       	rjmp	.+196    	; 0x4742 <dataToNibbles+0x1e0>
    467e:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4682:	84 30       	cpi	r24, 0x04	; 4
    4684:	20 f0       	brcs	.+8      	; 0x468e <dataToNibbles+0x12c>
    4686:	83 e0       	ldi	r24, 0x03	; 3
    4688:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    468c:	5a c0       	rjmp	.+180    	; 0x4742 <dataToNibbles+0x1e0>
    468e:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4692:	57 c0       	rjmp	.+174    	; 0x4742 <dataToNibbles+0x1e0>
    4694:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4698:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    469c:	52 c0       	rjmp	.+164    	; 0x4742 <dataToNibbles+0x1e0>
    469e:	e9 2f       	mov	r30, r25
    46a0:	f0 e0       	ldi	r31, 0x00	; 0
    46a2:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46a6:	28 2f       	mov	r18, r24
    46a8:	22 1f       	adc	r18, r18
    46aa:	22 27       	eor	r18, r18
    46ac:	22 1f       	adc	r18, r18
    46ae:	e6 51       	subi	r30, 0x16	; 22
    46b0:	fa 4f       	sbci	r31, 0xFA	; 250
    46b2:	20 83       	st	Z, r18
    46b4:	88 0f       	add	r24, r24
    46b6:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    46ba:	9f 5f       	subi	r25, 0xFF	; 255
    46bc:	01 c0       	rjmp	.+2      	; 0x46c0 <dataToNibbles+0x15e>
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	98 30       	cpi	r25, 0x08	; 8
    46c2:	68 f3       	brcs	.-38     	; 0x469e <dataToNibbles+0x13c>
    46c4:	3e c0       	rjmp	.+124    	; 0x4742 <dataToNibbles+0x1e0>
    46c6:	82 50       	subi	r24, 0x02	; 2
    46c8:	f0 e0       	ldi	r31, 0x00	; 0
    46ca:	de 01       	movw	r26, r28
    46cc:	9d 91       	ld	r25, X+
    46ce:	e6 51       	subi	r30, 0x16	; 22
    46d0:	fa 4f       	sbci	r31, 0xFA	; 250
    46d2:	9f 70       	andi	r25, 0x0F	; 15
    46d4:	90 83       	st	Z, r25
    46d6:	e8 2f       	mov	r30, r24
    46d8:	f0 e0       	ldi	r31, 0x00	; 0
    46da:	98 81       	ld	r25, Y
    46dc:	e6 51       	subi	r30, 0x16	; 22
    46de:	fa 4f       	sbci	r31, 0xFA	; 250
    46e0:	92 95       	swap	r25
    46e2:	9f 70       	andi	r25, 0x0F	; 15
    46e4:	90 83       	st	Z, r25
    46e6:	ed 01       	movw	r28, r26
    46e8:	03 c0       	rjmp	.+6      	; 0x46f0 <dataToNibbles+0x18e>
    46ea:	c8 ec       	ldi	r28, 0xC8	; 200
    46ec:	d5 e0       	ldi	r29, 0x05	; 5
    46ee:	88 e0       	ldi	r24, 0x08	; 8
    46f0:	ef ef       	ldi	r30, 0xFF	; 255
    46f2:	e8 0f       	add	r30, r24
    46f4:	81 11       	cpse	r24, r1
    46f6:	e7 cf       	rjmp	.-50     	; 0x46c6 <dataToNibbles+0x164>
    46f8:	24 c0       	rjmp	.+72     	; 0x4742 <dataToNibbles+0x1e0>
    46fa:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46fe:	ea ee       	ldi	r30, 0xEA	; 234
    4700:	f5 e0       	ldi	r31, 0x05	; 5
    4702:	98 2f       	mov	r25, r24
    4704:	96 95       	lsr	r25
    4706:	96 95       	lsr	r25
    4708:	96 95       	lsr	r25
    470a:	9f 5f       	subi	r25, 0xFF	; 255
    470c:	90 83       	st	Z, r25
    470e:	87 70       	andi	r24, 0x07	; 7
    4710:	8f 5f       	subi	r24, 0xFF	; 255
    4712:	81 83       	std	Z+1, r24	; 0x01
    4714:	16 c0       	rjmp	.+44     	; 0x4742 <dataToNibbles+0x1e0>
    4716:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    471a:	8f 5f       	subi	r24, 0xFF	; 255
    471c:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4720:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <nibble>
    4724:	08 c0       	rjmp	.+16     	; 0x4736 <dataToNibbles+0x1d4>
    4726:	ea ee       	ldi	r30, 0xEA	; 234
    4728:	f5 e0       	ldi	r31, 0x05	; 5
    472a:	90 81       	ld	r25, Z
    472c:	9f 5f       	subi	r25, 0xFF	; 255
    472e:	90 83       	st	Z, r25
    4730:	8a 50       	subi	r24, 0x0A	; 10
    4732:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4736:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    473a:	8a 30       	cpi	r24, 0x0A	; 10
    473c:	a0 f7       	brcc	.-24     	; 0x4726 <dataToNibbles+0x1c4>
    473e:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <nibble+0x1>
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	08 95       	ret

00004748 <nibbleToLCDstring>:
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4754:	8e 2f       	mov	r24, r30
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	fc 01       	movw	r30, r24
    475a:	32 97       	sbiw	r30, 0x02	; 2
    475c:	ed 30       	cpi	r30, 0x0D	; 13
    475e:	f1 05       	cpc	r31, r1
    4760:	08 f0       	brcs	.+2      	; 0x4764 <nibbleToLCDstring+0x1c>
    4762:	3b c1       	rjmp	.+630    	; 0x49da <nibbleToLCDstring+0x292>
    4764:	88 27       	eor	r24, r24
    4766:	e1 58       	subi	r30, 0x81	; 129
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	8f 4f       	sbci	r24, 0xFF	; 255
    476c:	0c 94 ef 3e 	jmp	0x7dde	; 0x7dde <__tablejump2__>
    4770:	0a ee       	ldi	r16, 0xEA	; 234
    4772:	15 e0       	ldi	r17, 0x05	; 5
    4774:	f8 01       	movw	r30, r16
    4776:	80 81       	ld	r24, Z
    4778:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    477c:	c6 e4       	ldi	r28, 0x46	; 70
    477e:	d2 e0       	ldi	r29, 0x02	; 2
    4780:	88 83       	st	Y, r24
    4782:	f8 01       	movw	r30, r16
    4784:	81 81       	ldd	r24, Z+1	; 0x01
    4786:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    478a:	89 83       	std	Y+1, r24	; 0x01
    478c:	1a 82       	std	Y+2, r1	; 0x02
    478e:	25 c1       	rjmp	.+586    	; 0x49da <nibbleToLCDstring+0x292>
    4790:	e6 e4       	ldi	r30, 0x46	; 70
    4792:	f2 e0       	ldi	r31, 0x02	; 2
    4794:	83 e4       	ldi	r24, 0x43	; 67
    4796:	80 83       	st	Z, r24
    4798:	88 e6       	ldi	r24, 0x68	; 104
    479a:	81 83       	std	Z+1, r24	; 0x01
    479c:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    47a0:	8f 3f       	cpi	r24, 0xFF	; 255
    47a2:	29 f4       	brne	.+10     	; 0x47ae <nibbleToLCDstring+0x66>
    47a4:	80 e2       	ldi	r24, 0x20	; 32
    47a6:	82 83       	std	Z+2, r24	; 0x02
    47a8:	8d e2       	ldi	r24, 0x2D	; 45
    47aa:	83 83       	std	Z+3, r24	; 0x03
    47ac:	12 c0       	rjmp	.+36     	; 0x47d2 <nibbleToLCDstring+0x8a>
    47ae:	8a 30       	cpi	r24, 0x0A	; 10
    47b0:	48 f0       	brcs	.+18     	; 0x47c4 <nibbleToLCDstring+0x7c>
    47b2:	c6 e4       	ldi	r28, 0x46	; 70
    47b4:	d2 e0       	ldi	r29, 0x02	; 2
    47b6:	91 e3       	ldi	r25, 0x31	; 49
    47b8:	9a 83       	std	Y+2, r25	; 0x02
    47ba:	8a 50       	subi	r24, 0x0A	; 10
    47bc:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    47c0:	8b 83       	std	Y+3, r24	; 0x03
    47c2:	07 c0       	rjmp	.+14     	; 0x47d2 <nibbleToLCDstring+0x8a>
    47c4:	c6 e4       	ldi	r28, 0x46	; 70
    47c6:	d2 e0       	ldi	r29, 0x02	; 2
    47c8:	90 e2       	ldi	r25, 0x20	; 32
    47ca:	9a 83       	std	Y+2, r25	; 0x02
    47cc:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    47d0:	8b 83       	std	Y+3, r24	; 0x03
    47d2:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <lcdData+0x4>
    47d6:	01 c1       	rjmp	.+514    	; 0x49da <nibbleToLCDstring+0x292>
    47d8:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    47dc:	8f 3f       	cpi	r24, 0xFF	; 255
    47de:	21 f0       	breq	.+8      	; 0x47e8 <nibbleToLCDstring+0xa0>
    47e0:	90 91 eb 05 	lds	r25, 0x05EB	; 0x8005eb <nibble+0x1>
    47e4:	9f 3f       	cpi	r25, 0xFF	; 255
    47e6:	59 f4       	brne	.+22     	; 0x47fe <nibbleToLCDstring+0xb6>
    47e8:	e6 e4       	ldi	r30, 0x46	; 70
    47ea:	f2 e0       	ldi	r31, 0x02	; 2
    47ec:	8e e6       	ldi	r24, 0x6E	; 110
    47ee:	80 83       	st	Z, r24
    47f0:	9f e6       	ldi	r25, 0x6F	; 111
    47f2:	91 83       	std	Z+1, r25	; 0x01
    47f4:	82 83       	std	Z+2, r24	; 0x02
    47f6:	85 e6       	ldi	r24, 0x65	; 101
    47f8:	83 83       	std	Z+3, r24	; 0x03
    47fa:	14 82       	std	Z+4, r1	; 0x04
    47fc:	ee c0       	rjmp	.+476    	; 0x49da <nibbleToLCDstring+0x292>
    47fe:	9f e5       	ldi	r25, 0x5F	; 95
    4800:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <lcdData+0x1>
    4804:	8b 30       	cpi	r24, 0x0B	; 11
    4806:	21 f4       	brne	.+8      	; 0x4810 <nibbleToLCDstring+0xc8>
    4808:	88 e4       	ldi	r24, 0x48	; 72
    480a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    480e:	20 c0       	rjmp	.+64     	; 0x4850 <nibbleToLCDstring+0x108>
    4810:	85 30       	cpi	r24, 0x05	; 5
    4812:	58 f4       	brcc	.+22     	; 0x482a <nibbleToLCDstring+0xe2>
    4814:	98 2f       	mov	r25, r24
    4816:	96 95       	lsr	r25
    4818:	9d 5b       	subi	r25, 0xBD	; 189
    481a:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <lcdData>
    481e:	80 ff       	sbrs	r24, 0
    4820:	17 c0       	rjmp	.+46     	; 0x4850 <nibbleToLCDstring+0x108>
    4822:	83 e2       	ldi	r24, 0x23	; 35
    4824:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    4828:	13 c0       	rjmp	.+38     	; 0x4850 <nibbleToLCDstring+0x108>
    482a:	28 2f       	mov	r18, r24
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	25 50       	subi	r18, 0x05	; 5
    4830:	31 09       	sbc	r19, r1
    4832:	35 95       	asr	r19
    4834:	27 95       	ror	r18
    4836:	2a 5b       	subi	r18, 0xBA	; 186
    4838:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <lcdData>
    483c:	80 fd       	sbrc	r24, 0
    483e:	03 c0       	rjmp	.+6      	; 0x4846 <nibbleToLCDstring+0xfe>
    4840:	83 e2       	ldi	r24, 0x23	; 35
    4842:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    4846:	28 34       	cpi	r18, 0x48	; 72
    4848:	19 f4       	brne	.+6      	; 0x4850 <nibbleToLCDstring+0x108>
    484a:	81 e4       	ldi	r24, 0x41	; 65
    484c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    4850:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4854:	81 11       	cpse	r24, r1
    4856:	04 c0       	rjmp	.+8      	; 0x4860 <nibbleToLCDstring+0x118>
    4858:	8d e6       	ldi	r24, 0x6D	; 109
    485a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    485e:	0b c0       	rjmp	.+22     	; 0x4876 <nibbleToLCDstring+0x12e>
    4860:	8c 30       	cpi	r24, 0x0C	; 12
    4862:	30 f4       	brcc	.+12     	; 0x4870 <nibbleToLCDstring+0x128>
    4864:	81 50       	subi	r24, 0x01	; 1
    4866:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    486a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    486e:	03 c0       	rjmp	.+6      	; 0x4876 <nibbleToLCDstring+0x12e>
    4870:	8d e2       	ldi	r24, 0x2D	; 45
    4872:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4876:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    487a:	af c0       	rjmp	.+350    	; 0x49da <nibbleToLCDstring+0x292>
    487c:	c6 e4       	ldi	r28, 0x46	; 70
    487e:	d2 e0       	ldi	r29, 0x02	; 2
    4880:	8d e4       	ldi	r24, 0x4D	; 77
    4882:	88 83       	st	Y, r24
    4884:	0a ee       	ldi	r16, 0xEA	; 234
    4886:	15 e0       	ldi	r17, 0x05	; 5
    4888:	f8 01       	movw	r30, r16
    488a:	80 81       	ld	r24, Z
    488c:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    4890:	89 83       	std	Y+1, r24	; 0x01
    4892:	82 e4       	ldi	r24, 0x42	; 66
    4894:	8a 83       	std	Y+2, r24	; 0x02
    4896:	f8 01       	movw	r30, r16
    4898:	81 81       	ldd	r24, Z+1	; 0x01
    489a:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    489e:	8b 83       	std	Y+3, r24	; 0x03
    48a0:	f8 01       	movw	r30, r16
    48a2:	82 81       	ldd	r24, Z+2	; 0x02
    48a4:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    48a8:	8c 83       	std	Y+4, r24	; 0x04
    48aa:	1d 82       	std	Y+5, r1	; 0x05
    48ac:	96 c0       	rjmp	.+300    	; 0x49da <nibbleToLCDstring+0x292>
    48ae:	0a ee       	ldi	r16, 0xEA	; 234
    48b0:	15 e0       	ldi	r17, 0x05	; 5
    48b2:	f8 01       	movw	r30, r16
    48b4:	80 81       	ld	r24, Z
    48b6:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    48ba:	c6 e4       	ldi	r28, 0x46	; 70
    48bc:	d2 e0       	ldi	r29, 0x02	; 2
    48be:	88 83       	st	Y, r24
    48c0:	f8 01       	movw	r30, r16
    48c2:	81 81       	ldd	r24, Z+1	; 0x01
    48c4:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    48c8:	89 83       	std	Y+1, r24	; 0x01
    48ca:	f8 01       	movw	r30, r16
    48cc:	82 81       	ldd	r24, Z+2	; 0x02
    48ce:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    48d2:	8a 83       	std	Y+2, r24	; 0x02
    48d4:	1b 82       	std	Y+3, r1	; 0x03
    48d6:	81 c0       	rjmp	.+258    	; 0x49da <nibbleToLCDstring+0x292>
    48d8:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    48dc:	83 30       	cpi	r24, 0x03	; 3
    48de:	38 f4       	brcc	.+14     	; 0x48ee <nibbleToLCDstring+0x1a6>
    48e0:	e6 e4       	ldi	r30, 0x46	; 70
    48e2:	f2 e0       	ldi	r31, 0x02	; 2
    48e4:	93 e3       	ldi	r25, 0x33	; 51
    48e6:	98 1b       	sub	r25, r24
    48e8:	90 83       	st	Z, r25
    48ea:	11 82       	std	Z+1, r1	; 0x01
    48ec:	76 c0       	rjmp	.+236    	; 0x49da <nibbleToLCDstring+0x292>
    48ee:	83 30       	cpi	r24, 0x03	; 3
    48f0:	31 f4       	brne	.+12     	; 0x48fe <nibbleToLCDstring+0x1b6>
    48f2:	e6 e4       	ldi	r30, 0x46	; 70
    48f4:	f2 e0       	ldi	r31, 0x02	; 2
    48f6:	80 e5       	ldi	r24, 0x50	; 80
    48f8:	80 83       	st	Z, r24
    48fa:	11 82       	std	Z+1, r1	; 0x01
    48fc:	6e c0       	rjmp	.+220    	; 0x49da <nibbleToLCDstring+0x292>
    48fe:	e6 e4       	ldi	r30, 0x46	; 70
    4900:	f2 e0       	ldi	r31, 0x02	; 2
    4902:	8d e2       	ldi	r24, 0x2D	; 45
    4904:	80 83       	st	Z, r24
    4906:	11 82       	std	Z+1, r1	; 0x01
    4908:	68 c0       	rjmp	.+208    	; 0x49da <nibbleToLCDstring+0x292>
    490a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    490e:	e6 e4       	ldi	r30, 0x46	; 70
    4910:	f2 e0       	ldi	r31, 0x02	; 2
    4912:	80 5d       	subi	r24, 0xD0	; 208
    4914:	80 83       	st	Z, r24
    4916:	11 82       	std	Z+1, r1	; 0x01
    4918:	60 c0       	rjmp	.+192    	; 0x49da <nibbleToLCDstring+0x292>
    491a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    491e:	81 11       	cpse	r24, r1
    4920:	09 c0       	rjmp	.+18     	; 0x4934 <nibbleToLCDstring+0x1ec>
    4922:	e6 e4       	ldi	r30, 0x46	; 70
    4924:	f2 e0       	ldi	r31, 0x02	; 2
    4926:	81 e4       	ldi	r24, 0x41	; 65
    4928:	80 83       	st	Z, r24
    492a:	85 e7       	ldi	r24, 0x75	; 117
    492c:	81 83       	std	Z+1, r24	; 0x01
    492e:	83 e7       	ldi	r24, 0x73	; 115
    4930:	82 83       	std	Z+2, r24	; 0x02
    4932:	08 c0       	rjmp	.+16     	; 0x4944 <nibbleToLCDstring+0x1fc>
    4934:	e6 e4       	ldi	r30, 0x46	; 70
    4936:	f2 e0       	ldi	r31, 0x02	; 2
    4938:	85 e4       	ldi	r24, 0x45	; 69
    493a:	80 83       	st	Z, r24
    493c:	89 e6       	ldi	r24, 0x69	; 105
    493e:	81 83       	std	Z+1, r24	; 0x01
    4940:	8e e6       	ldi	r24, 0x6E	; 110
    4942:	82 83       	std	Z+2, r24	; 0x02
    4944:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    4948:	48 c0       	rjmp	.+144    	; 0x49da <nibbleToLCDstring+0x292>
    494a:	c1 2f       	mov	r28, r17
    494c:	d0 e0       	ldi	r29, 0x00	; 0
    494e:	fe 01       	movw	r30, r28
    4950:	e6 51       	subi	r30, 0x16	; 22
    4952:	fa 4f       	sbci	r31, 0xFA	; 250
    4954:	80 81       	ld	r24, Z
    4956:	0e 94 cc 3b 	call	0x7798	; 0x7798 <nibbleToChr>
    495a:	ca 5b       	subi	r28, 0xBA	; 186
    495c:	dd 4f       	sbci	r29, 0xFD	; 253
    495e:	88 83       	st	Y, r24
    4960:	1f 5f       	subi	r17, 0xFF	; 255
    4962:	01 c0       	rjmp	.+2      	; 0x4966 <nibbleToLCDstring+0x21e>
    4964:	10 e0       	ldi	r17, 0x00	; 0
    4966:	18 30       	cpi	r17, 0x08	; 8
    4968:	80 f3       	brcs	.-32     	; 0x494a <nibbleToLCDstring+0x202>
    496a:	37 c0       	rjmp	.+110    	; 0x49da <nibbleToLCDstring+0x292>
    496c:	82 2f       	mov	r24, r18
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	fc 01       	movw	r30, r24
    4972:	e6 51       	subi	r30, 0x16	; 22
    4974:	fa 4f       	sbci	r31, 0xFA	; 250
    4976:	30 81       	ld	r19, Z
    4978:	31 11       	cpse	r19, r1
    497a:	02 c0       	rjmp	.+4      	; 0x4980 <nibbleToLCDstring+0x238>
    497c:	3f e6       	ldi	r19, 0x6F	; 111
    497e:	01 c0       	rjmp	.+2      	; 0x4982 <nibbleToLCDstring+0x23a>
    4980:	39 e4       	ldi	r19, 0x49	; 73
    4982:	fc 01       	movw	r30, r24
    4984:	ea 5b       	subi	r30, 0xBA	; 186
    4986:	fd 4f       	sbci	r31, 0xFD	; 253
    4988:	30 83       	st	Z, r19
    498a:	2f 5f       	subi	r18, 0xFF	; 255
    498c:	01 c0       	rjmp	.+2      	; 0x4990 <nibbleToLCDstring+0x248>
    498e:	20 e0       	ldi	r18, 0x00	; 0
    4990:	28 30       	cpi	r18, 0x08	; 8
    4992:	60 f3       	brcs	.-40     	; 0x496c <nibbleToLCDstring+0x224>
    4994:	22 c0       	rjmp	.+68     	; 0x49da <nibbleToLCDstring+0x292>
    4996:	aa ee       	ldi	r26, 0xEA	; 234
    4998:	b5 e0       	ldi	r27, 0x05	; 5
    499a:	8c 91       	ld	r24, X
    499c:	e6 e4       	ldi	r30, 0x46	; 70
    499e:	f2 e0       	ldi	r31, 0x02	; 2
    49a0:	80 5c       	subi	r24, 0xC0	; 192
    49a2:	80 83       	st	Z, r24
    49a4:	11 96       	adiw	r26, 0x01	; 1
    49a6:	8c 91       	ld	r24, X
    49a8:	80 5d       	subi	r24, 0xD0	; 208
    49aa:	81 83       	std	Z+1, r24	; 0x01
    49ac:	12 82       	std	Z+2, r1	; 0x02
    49ae:	15 c0       	rjmp	.+42     	; 0x49da <nibbleToLCDstring+0x292>
    49b0:	ea ee       	ldi	r30, 0xEA	; 234
    49b2:	f5 e0       	ldi	r31, 0x05	; 5
    49b4:	90 81       	ld	r25, Z
    49b6:	81 81       	ldd	r24, Z+1	; 0x01
    49b8:	29 2f       	mov	r18, r25
    49ba:	28 2b       	or	r18, r24
    49bc:	31 f4       	brne	.+12     	; 0x49ca <nibbleToLCDstring+0x282>
    49be:	e6 e4       	ldi	r30, 0x46	; 70
    49c0:	f2 e0       	ldi	r31, 0x02	; 2
    49c2:	8d e2       	ldi	r24, 0x2D	; 45
    49c4:	80 83       	st	Z, r24
    49c6:	81 83       	std	Z+1, r24	; 0x01
    49c8:	06 c0       	rjmp	.+12     	; 0x49d6 <nibbleToLCDstring+0x28e>
    49ca:	e6 e4       	ldi	r30, 0x46	; 70
    49cc:	f2 e0       	ldi	r31, 0x02	; 2
    49ce:	90 5d       	subi	r25, 0xD0	; 208
    49d0:	90 83       	st	Z, r25
    49d2:	80 5d       	subi	r24, 0xD0	; 208
    49d4:	81 83       	std	Z+1, r24	; 0x01
    49d6:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <lcdData+0x2>
    49da:	df 91       	pop	r29
    49dc:	cf 91       	pop	r28
    49de:	1f 91       	pop	r17
    49e0:	0f 91       	pop	r16
    49e2:	08 95       	ret

000049e4 <LCDStringOut>:
    49e4:	0f 93       	push	r16
    49e6:	1f 93       	push	r17
    49e8:	cf 93       	push	r28
    49ea:	8e e1       	ldi	r24, 0x1E	; 30
    49ec:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    49f0:	c0 e0       	ldi	r28, 0x00	; 0
    49f2:	06 e4       	ldi	r16, 0x46	; 70
    49f4:	12 e0       	ldi	r17, 0x02	; 2
    49f6:	0b c0       	rjmp	.+22     	; 0x4a0e <LCDStringOut+0x2a>
    49f8:	f8 01       	movw	r30, r16
    49fa:	80 81       	ld	r24, Z
    49fc:	88 23       	and	r24, r24
    49fe:	19 f0       	breq	.+6      	; 0x4a06 <LCDStringOut+0x22>
    4a00:	0f 5f       	subi	r16, 0xFF	; 255
    4a02:	1f 4f       	sbci	r17, 0xFF	; 255
    4a04:	01 c0       	rjmp	.+2      	; 0x4a08 <LCDStringOut+0x24>
    4a06:	80 e2       	ldi	r24, 0x20	; 32
    4a08:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    4a0c:	cf 5f       	subi	r28, 0xFF	; 255
    4a0e:	ca 30       	cpi	r28, 0x0A	; 10
    4a10:	98 f3       	brcs	.-26     	; 0x49f8 <LCDStringOut+0x14>
    4a12:	cf 91       	pop	r28
    4a14:	1f 91       	pop	r17
    4a16:	0f 91       	pop	r16
    4a18:	08 95       	ret

00004a1a <nibbleCheckOvfl>:
    4a1a:	8a 30       	cpi	r24, 0x0A	; 10
    4a1c:	1c f4       	brge	.+6      	; 0x4a24 <nibbleCheckOvfl+0xa>
    4a1e:	88 23       	and	r24, r24
    4a20:	1c f0       	brlt	.+6      	; 0x4a28 <nibbleCheckOvfl+0xe>
    4a22:	08 95       	ret
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	08 95       	ret
    4a28:	89 e0       	ldi	r24, 0x09	; 9
    4a2a:	08 95       	ret

00004a2c <nibbleChange>:
    4a2c:	0f 93       	push	r16
    4a2e:	1f 93       	push	r17
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	c8 2f       	mov	r28, r24
    4a36:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    4a3a:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    4a3e:	31 96       	adiw	r30, 0x01	; 1
    4a40:	84 91       	lpm	r24, Z
    4a42:	28 2f       	mov	r18, r24
    4a44:	20 71       	andi	r18, 0x10	; 16
    4a46:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4a4a:	8e 2f       	mov	r24, r30
    4a4c:	90 e0       	ldi	r25, 0x00	; 0
    4a4e:	fc 01       	movw	r30, r24
    4a50:	32 97       	sbiw	r30, 0x02	; 2
    4a52:	ed 30       	cpi	r30, 0x0D	; 13
    4a54:	f1 05       	cpc	r31, r1
    4a56:	08 f0       	brcs	.+2      	; 0x4a5a <nibbleChange+0x2e>
    4a58:	93 c1       	rjmp	.+806    	; 0x4d80 <nibbleChange+0x354>
    4a5a:	88 27       	eor	r24, r24
    4a5c:	e4 57       	subi	r30, 0x74	; 116
    4a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a60:	8f 4f       	sbci	r24, 0xFF	; 255
    4a62:	0c 94 ef 3e 	jmp	0x7dde	; 0x7dde <__tablejump2__>
    4a66:	d0 e0       	ldi	r29, 0x00	; 0
    4a68:	c6 51       	subi	r28, 0x16	; 22
    4a6a:	da 4f       	sbci	r29, 0xFA	; 250
    4a6c:	88 81       	ld	r24, Y
    4a6e:	68 0f       	add	r22, r24
    4a70:	6f 70       	andi	r22, 0x0F	; 15
    4a72:	68 83       	st	Y, r22
    4a74:	85 c1       	rjmp	.+778    	; 0x4d80 <nibbleChange+0x354>
    4a76:	21 11       	cpse	r18, r1
    4a78:	1b c0       	rjmp	.+54     	; 0x4ab0 <nibbleChange+0x84>
    4a7a:	61 30       	cpi	r22, 0x01	; 1
    4a7c:	41 f4       	brne	.+16     	; 0x4a8e <nibbleChange+0x62>
    4a7e:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4a82:	80 31       	cpi	r24, 0x10	; 16
    4a84:	20 f0       	brcs	.+8      	; 0x4a8e <nibbleChange+0x62>
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4a8c:	79 c1       	rjmp	.+754    	; 0x4d80 <nibbleChange+0x354>
    4a8e:	6f 3f       	cpi	r22, 0xFF	; 255
    4a90:	49 f4       	brne	.+18     	; 0x4aa4 <nibbleChange+0x78>
    4a92:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4a96:	82 50       	subi	r24, 0x02	; 2
    4a98:	8f 30       	cpi	r24, 0x0F	; 15
    4a9a:	20 f0       	brcs	.+8      	; 0x4aa4 <nibbleChange+0x78>
    4a9c:	80 e1       	ldi	r24, 0x10	; 16
    4a9e:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4aa2:	6e c1       	rjmp	.+732    	; 0x4d80 <nibbleChange+0x354>
    4aa4:	ea ee       	ldi	r30, 0xEA	; 234
    4aa6:	f5 e0       	ldi	r31, 0x05	; 5
    4aa8:	80 81       	ld	r24, Z
    4aaa:	68 0f       	add	r22, r24
    4aac:	60 83       	st	Z, r22
    4aae:	68 c1       	rjmp	.+720    	; 0x4d80 <nibbleChange+0x354>
    4ab0:	61 30       	cpi	r22, 0x01	; 1
    4ab2:	41 f4       	brne	.+16     	; 0x4ac4 <nibbleChange+0x98>
    4ab4:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4ab8:	80 31       	cpi	r24, 0x10	; 16
    4aba:	21 f4       	brne	.+8      	; 0x4ac4 <nibbleChange+0x98>
    4abc:	8f ef       	ldi	r24, 0xFF	; 255
    4abe:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4ac2:	5e c1       	rjmp	.+700    	; 0x4d80 <nibbleChange+0x354>
    4ac4:	61 30       	cpi	r22, 0x01	; 1
    4ac6:	41 f4       	brne	.+16     	; 0x4ad8 <nibbleChange+0xac>
    4ac8:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4acc:	8f 3f       	cpi	r24, 0xFF	; 255
    4ace:	21 f4       	brne	.+8      	; 0x4ad8 <nibbleChange+0xac>
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4ad6:	54 c1       	rjmp	.+680    	; 0x4d80 <nibbleChange+0x354>
    4ad8:	6f 3f       	cpi	r22, 0xFF	; 255
    4ada:	41 f4       	brne	.+16     	; 0x4aec <nibbleChange+0xc0>
    4adc:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4ae0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ae2:	21 f4       	brne	.+8      	; 0x4aec <nibbleChange+0xc0>
    4ae4:	80 e1       	ldi	r24, 0x10	; 16
    4ae6:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4aea:	4a c1       	rjmp	.+660    	; 0x4d80 <nibbleChange+0x354>
    4aec:	6f 3f       	cpi	r22, 0xFF	; 255
    4aee:	41 f4       	brne	.+16     	; 0x4b00 <nibbleChange+0xd4>
    4af0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4af4:	81 30       	cpi	r24, 0x01	; 1
    4af6:	21 f4       	brne	.+8      	; 0x4b00 <nibbleChange+0xd4>
    4af8:	8f ef       	ldi	r24, 0xFF	; 255
    4afa:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4afe:	40 c1       	rjmp	.+640    	; 0x4d80 <nibbleChange+0x354>
    4b00:	ea ee       	ldi	r30, 0xEA	; 234
    4b02:	f5 e0       	ldi	r31, 0x05	; 5
    4b04:	80 81       	ld	r24, Z
    4b06:	68 0f       	add	r22, r24
    4b08:	60 83       	st	Z, r22
    4b0a:	3a c1       	rjmp	.+628    	; 0x4d80 <nibbleChange+0x354>
    4b0c:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4b10:	8f 3f       	cpi	r24, 0xFF	; 255
    4b12:	09 f4       	brne	.+2      	; 0x4b16 <nibbleChange+0xea>
    4b14:	c1 e0       	ldi	r28, 0x01	; 1
    4b16:	c1 11       	cpse	r28, r1
    4b18:	16 c0       	rjmp	.+44     	; 0x4b46 <nibbleChange+0x11a>
    4b1a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4b1e:	8c 30       	cpi	r24, 0x0C	; 12
    4b20:	50 f4       	brcc	.+20     	; 0x4b36 <nibbleChange+0x10a>
    4b22:	8b 30       	cpi	r24, 0x0B	; 11
    4b24:	11 f4       	brne	.+4      	; 0x4b2a <nibbleChange+0xfe>
    4b26:	61 30       	cpi	r22, 0x01	; 1
    4b28:	41 f0       	breq	.+16     	; 0x4b3a <nibbleChange+0x10e>
    4b2a:	81 11       	cpse	r24, r1
    4b2c:	02 c0       	rjmp	.+4      	; 0x4b32 <nibbleChange+0x106>
    4b2e:	6f 3f       	cpi	r22, 0xFF	; 255
    4b30:	31 f0       	breq	.+12     	; 0x4b3e <nibbleChange+0x112>
    4b32:	68 0f       	add	r22, r24
    4b34:	05 c0       	rjmp	.+10     	; 0x4b40 <nibbleChange+0x114>
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	03 c0       	rjmp	.+6      	; 0x4b40 <nibbleChange+0x114>
    4b3a:	60 e0       	ldi	r22, 0x00	; 0
    4b3c:	01 c0       	rjmp	.+2      	; 0x4b40 <nibbleChange+0x114>
    4b3e:	6b e0       	ldi	r22, 0x0B	; 11
    4b40:	60 93 ea 05 	sts	0x05EA, r22	; 0x8005ea <nibble>
    4b44:	2b c0       	rjmp	.+86     	; 0x4b9c <nibbleChange+0x170>
    4b46:	21 11       	cpse	r18, r1
    4b48:	0a c0       	rjmp	.+20     	; 0x4b5e <nibbleChange+0x132>
    4b4a:	81 11       	cpse	r24, r1
    4b4c:	02 c0       	rjmp	.+4      	; 0x4b52 <nibbleChange+0x126>
    4b4e:	6f 3f       	cpi	r22, 0xFF	; 255
    4b50:	c1 f0       	breq	.+48     	; 0x4b82 <nibbleChange+0x156>
    4b52:	8a 30       	cpi	r24, 0x0A	; 10
    4b54:	11 f4       	brne	.+4      	; 0x4b5a <nibbleChange+0x12e>
    4b56:	61 30       	cpi	r22, 0x01	; 1
    4b58:	b1 f0       	breq	.+44     	; 0x4b86 <nibbleChange+0x15a>
    4b5a:	68 0f       	add	r22, r24
    4b5c:	1d c0       	rjmp	.+58     	; 0x4b98 <nibbleChange+0x16c>
    4b5e:	81 11       	cpse	r24, r1
    4b60:	02 c0       	rjmp	.+4      	; 0x4b66 <nibbleChange+0x13a>
    4b62:	6f 3f       	cpi	r22, 0xFF	; 255
    4b64:	91 f0       	breq	.+36     	; 0x4b8a <nibbleChange+0x15e>
    4b66:	8a 30       	cpi	r24, 0x0A	; 10
    4b68:	11 f4       	brne	.+4      	; 0x4b6e <nibbleChange+0x142>
    4b6a:	61 30       	cpi	r22, 0x01	; 1
    4b6c:	81 f0       	breq	.+32     	; 0x4b8e <nibbleChange+0x162>
    4b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4b70:	11 f4       	brne	.+4      	; 0x4b76 <nibbleChange+0x14a>
    4b72:	61 30       	cpi	r22, 0x01	; 1
    4b74:	71 f0       	breq	.+28     	; 0x4b92 <nibbleChange+0x166>
    4b76:	8f 3f       	cpi	r24, 0xFF	; 255
    4b78:	11 f4       	brne	.+4      	; 0x4b7e <nibbleChange+0x152>
    4b7a:	6f 3f       	cpi	r22, 0xFF	; 255
    4b7c:	61 f0       	breq	.+24     	; 0x4b96 <nibbleChange+0x16a>
    4b7e:	68 0f       	add	r22, r24
    4b80:	0b c0       	rjmp	.+22     	; 0x4b98 <nibbleChange+0x16c>
    4b82:	6a e0       	ldi	r22, 0x0A	; 10
    4b84:	09 c0       	rjmp	.+18     	; 0x4b98 <nibbleChange+0x16c>
    4b86:	60 e0       	ldi	r22, 0x00	; 0
    4b88:	07 c0       	rjmp	.+14     	; 0x4b98 <nibbleChange+0x16c>
    4b8a:	6f ef       	ldi	r22, 0xFF	; 255
    4b8c:	05 c0       	rjmp	.+10     	; 0x4b98 <nibbleChange+0x16c>
    4b8e:	6f ef       	ldi	r22, 0xFF	; 255
    4b90:	03 c0       	rjmp	.+6      	; 0x4b98 <nibbleChange+0x16c>
    4b92:	60 e0       	ldi	r22, 0x00	; 0
    4b94:	01 c0       	rjmp	.+2      	; 0x4b98 <nibbleChange+0x16c>
    4b96:	6a e0       	ldi	r22, 0x0A	; 10
    4b98:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <nibble+0x1>
    4b9c:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4ba0:	9f 3f       	cpi	r25, 0xFF	; 255
    4ba2:	09 f4       	brne	.+2      	; 0x4ba6 <nibbleChange+0x17a>
    4ba4:	ed c0       	rjmp	.+474    	; 0x4d80 <nibbleChange+0x354>
    4ba6:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4baa:	8f 3f       	cpi	r24, 0xFF	; 255
    4bac:	09 f4       	brne	.+2      	; 0x4bb0 <nibbleChange+0x184>
    4bae:	e8 c0       	rjmp	.+464    	; 0x4d80 <nibbleChange+0x354>
    4bb0:	28 2f       	mov	r18, r24
    4bb2:	22 0f       	add	r18, r18
    4bb4:	82 0f       	add	r24, r18
    4bb6:	28 2f       	mov	r18, r24
    4bb8:	22 0f       	add	r18, r18
    4bba:	22 0f       	add	r18, r18
    4bbc:	92 0f       	add	r25, r18
    4bbe:	0a f0       	brmi	.+2      	; 0x4bc2 <nibbleChange+0x196>
    4bc0:	df c0       	rjmp	.+446    	; 0x4d80 <nibbleChange+0x354>
    4bc2:	ea ee       	ldi	r30, 0xEA	; 234
    4bc4:	f5 e0       	ldi	r31, 0x05	; 5
    4bc6:	87 e0       	ldi	r24, 0x07	; 7
    4bc8:	80 83       	st	Z, r24
    4bca:	8a e0       	ldi	r24, 0x0A	; 10
    4bcc:	81 83       	std	Z+1, r24	; 0x01
    4bce:	d8 c0       	rjmp	.+432    	; 0x4d80 <nibbleChange+0x354>
    4bd0:	c1 11       	cpse	r28, r1
    4bd2:	07 c0       	rjmp	.+14     	; 0x4be2 <nibbleChange+0x1b6>
    4bd4:	ea ee       	ldi	r30, 0xEA	; 234
    4bd6:	f5 e0       	ldi	r31, 0x05	; 5
    4bd8:	80 81       	ld	r24, Z
    4bda:	68 0f       	add	r22, r24
    4bdc:	67 70       	andi	r22, 0x07	; 7
    4bde:	60 83       	st	Z, r22
    4be0:	cf c0       	rjmp	.+414    	; 0x4d80 <nibbleChange+0x354>
    4be2:	d0 e0       	ldi	r29, 0x00	; 0
    4be4:	0a ee       	ldi	r16, 0xEA	; 234
    4be6:	15 e0       	ldi	r17, 0x05	; 5
    4be8:	c6 51       	subi	r28, 0x16	; 22
    4bea:	da 4f       	sbci	r29, 0xFA	; 250
    4bec:	88 81       	ld	r24, Y
    4bee:	86 0f       	add	r24, r22
    4bf0:	14 df       	rcall	.-472    	; 0x4a1a <nibbleCheckOvfl>
    4bf2:	88 83       	st	Y, r24
    4bf4:	f8 01       	movw	r30, r16
    4bf6:	81 81       	ldd	r24, Z+1	; 0x01
    4bf8:	92 81       	ldd	r25, Z+2	; 0x02
    4bfa:	88 0f       	add	r24, r24
    4bfc:	28 2f       	mov	r18, r24
    4bfe:	22 0f       	add	r18, r18
    4c00:	22 0f       	add	r18, r18
    4c02:	82 0f       	add	r24, r18
    4c04:	89 0f       	add	r24, r25
    4c06:	80 32       	cpi	r24, 0x20	; 32
    4c08:	2c f0       	brlt	.+10     	; 0x4c14 <nibbleChange+0x1e8>
    4c0a:	83 e0       	ldi	r24, 0x03	; 3
    4c0c:	81 83       	std	Z+1, r24	; 0x01
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	82 83       	std	Z+2, r24	; 0x02
    4c12:	b6 c0       	rjmp	.+364    	; 0x4d80 <nibbleChange+0x354>
    4c14:	88 23       	and	r24, r24
    4c16:	0c f0       	brlt	.+2      	; 0x4c1a <nibbleChange+0x1ee>
    4c18:	b3 c0       	rjmp	.+358    	; 0x4d80 <nibbleChange+0x354>
    4c1a:	ea ee       	ldi	r30, 0xEA	; 234
    4c1c:	f5 e0       	ldi	r31, 0x05	; 5
    4c1e:	11 82       	std	Z+1, r1	; 0x01
    4c20:	12 82       	std	Z+2, r1	; 0x02
    4c22:	ae c0       	rjmp	.+348    	; 0x4d80 <nibbleChange+0x354>
    4c24:	d0 e0       	ldi	r29, 0x00	; 0
    4c26:	0a ee       	ldi	r16, 0xEA	; 234
    4c28:	15 e0       	ldi	r17, 0x05	; 5
    4c2a:	c6 51       	subi	r28, 0x16	; 22
    4c2c:	da 4f       	sbci	r29, 0xFA	; 250
    4c2e:	88 81       	ld	r24, Y
    4c30:	86 0f       	add	r24, r22
    4c32:	f3 de       	rcall	.-538    	; 0x4a1a <nibbleCheckOvfl>
    4c34:	88 83       	st	Y, r24
    4c36:	f8 01       	movw	r30, r16
    4c38:	20 81       	ld	r18, Z
    4c3a:	81 81       	ldd	r24, Z+1	; 0x01
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	ac 01       	movw	r20, r24
    4c40:	44 0f       	add	r20, r20
    4c42:	55 1f       	adc	r21, r21
    4c44:	88 0f       	add	r24, r24
    4c46:	99 1f       	adc	r25, r25
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	88 0f       	add	r24, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	84 0f       	add	r24, r20
    4c52:	95 1f       	adc	r25, r21
    4c54:	f4 e6       	ldi	r31, 0x64	; 100
    4c56:	2f 9f       	mul	r18, r31
    4c58:	80 0d       	add	r24, r0
    4c5a:	91 1d       	adc	r25, r1
    4c5c:	11 24       	eor	r1, r1
    4c5e:	f8 01       	movw	r30, r16
    4c60:	22 81       	ldd	r18, Z+2	; 0x02
    4c62:	82 0f       	add	r24, r18
    4c64:	91 1d       	adc	r25, r1
    4c66:	8f 3f       	cpi	r24, 0xFF	; 255
    4c68:	91 05       	cpc	r25, r1
    4c6a:	09 f0       	breq	.+2      	; 0x4c6e <nibbleChange+0x242>
    4c6c:	0c f4       	brge	.+2      	; 0x4c70 <nibbleChange+0x244>
    4c6e:	88 c0       	rjmp	.+272    	; 0x4d80 <nibbleChange+0x354>
    4c70:	82 e0       	ldi	r24, 0x02	; 2
    4c72:	80 83       	st	Z, r24
    4c74:	85 e0       	ldi	r24, 0x05	; 5
    4c76:	81 83       	std	Z+1, r24	; 0x01
    4c78:	82 83       	std	Z+2, r24	; 0x02
    4c7a:	82 c0       	rjmp	.+260    	; 0x4d80 <nibbleChange+0x354>
    4c7c:	22 23       	and	r18, r18
    4c7e:	a1 f0       	breq	.+40     	; 0x4ca8 <nibbleChange+0x27c>
    4c80:	d0 e0       	ldi	r29, 0x00	; 0
    4c82:	fe 01       	movw	r30, r28
    4c84:	e6 51       	subi	r30, 0x16	; 22
    4c86:	fa 4f       	sbci	r31, 0xFA	; 250
    4c88:	80 81       	ld	r24, Z
    4c8a:	68 0f       	add	r22, r24
    4c8c:	60 83       	st	Z, r22
    4c8e:	64 30       	cpi	r22, 0x04	; 4
    4c90:	19 f4       	brne	.+6      	; 0x4c98 <nibbleChange+0x26c>
    4c92:	8f ef       	ldi	r24, 0xFF	; 255
    4c94:	80 83       	st	Z, r24
    4c96:	74 c0       	rjmp	.+232    	; 0x4d80 <nibbleChange+0x354>
    4c98:	6e 3f       	cpi	r22, 0xFE	; 254
    4c9a:	09 f0       	breq	.+2      	; 0x4c9e <nibbleChange+0x272>
    4c9c:	71 c0       	rjmp	.+226    	; 0x4d80 <nibbleChange+0x354>
    4c9e:	c6 51       	subi	r28, 0x16	; 22
    4ca0:	da 4f       	sbci	r29, 0xFA	; 250
    4ca2:	83 e0       	ldi	r24, 0x03	; 3
    4ca4:	88 83       	st	Y, r24
    4ca6:	6c c0       	rjmp	.+216    	; 0x4d80 <nibbleChange+0x354>
    4ca8:	d0 e0       	ldi	r29, 0x00	; 0
    4caa:	fe 01       	movw	r30, r28
    4cac:	e6 51       	subi	r30, 0x16	; 22
    4cae:	fa 4f       	sbci	r31, 0xFA	; 250
    4cb0:	80 81       	ld	r24, Z
    4cb2:	81 11       	cpse	r24, r1
    4cb4:	05 c0       	rjmp	.+10     	; 0x4cc0 <nibbleChange+0x294>
    4cb6:	6f 3f       	cpi	r22, 0xFF	; 255
    4cb8:	19 f4       	brne	.+6      	; 0x4cc0 <nibbleChange+0x294>
    4cba:	83 e0       	ldi	r24, 0x03	; 3
    4cbc:	80 83       	st	Z, r24
    4cbe:	60 c0       	rjmp	.+192    	; 0x4d80 <nibbleChange+0x354>
    4cc0:	83 30       	cpi	r24, 0x03	; 3
    4cc2:	31 f4       	brne	.+12     	; 0x4cd0 <nibbleChange+0x2a4>
    4cc4:	61 30       	cpi	r22, 0x01	; 1
    4cc6:	21 f4       	brne	.+8      	; 0x4cd0 <nibbleChange+0x2a4>
    4cc8:	c6 51       	subi	r28, 0x16	; 22
    4cca:	da 4f       	sbci	r29, 0xFA	; 250
    4ccc:	18 82       	st	Y, r1
    4cce:	58 c0       	rjmp	.+176    	; 0x4d80 <nibbleChange+0x354>
    4cd0:	c6 51       	subi	r28, 0x16	; 22
    4cd2:	da 4f       	sbci	r29, 0xFA	; 250
    4cd4:	68 0f       	add	r22, r24
    4cd6:	68 83       	st	Y, r22
    4cd8:	53 c0       	rjmp	.+166    	; 0x4d80 <nibbleChange+0x354>
    4cda:	d0 e0       	ldi	r29, 0x00	; 0
    4cdc:	c6 51       	subi	r28, 0x16	; 22
    4cde:	da 4f       	sbci	r29, 0xFA	; 250
    4ce0:	88 81       	ld	r24, Y
    4ce2:	68 0f       	add	r22, r24
    4ce4:	63 70       	andi	r22, 0x03	; 3
    4ce6:	68 83       	st	Y, r22
    4ce8:	4b c0       	rjmp	.+150    	; 0x4d80 <nibbleChange+0x354>
    4cea:	ea ee       	ldi	r30, 0xEA	; 234
    4cec:	f5 e0       	ldi	r31, 0x05	; 5
    4cee:	80 81       	ld	r24, Z
    4cf0:	80 95       	com	r24
    4cf2:	80 83       	st	Z, r24
    4cf4:	45 c0       	rjmp	.+138    	; 0x4d80 <nibbleChange+0x354>
    4cf6:	d0 e0       	ldi	r29, 0x00	; 0
    4cf8:	81 e0       	ldi	r24, 0x01	; 1
    4cfa:	61 fd       	sbrc	r22, 1
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	c6 51       	subi	r28, 0x16	; 22
    4d00:	da 4f       	sbci	r29, 0xFA	; 250
    4d02:	88 83       	st	Y, r24
    4d04:	3d c0       	rjmp	.+122    	; 0x4d80 <nibbleChange+0x354>
    4d06:	61 30       	cpi	r22, 0x01	; 1
    4d08:	41 f4       	brne	.+16     	; 0x4d1a <nibbleChange+0x2ee>
    4d0a:	d0 e0       	ldi	r29, 0x00	; 0
    4d0c:	c6 51       	subi	r28, 0x16	; 22
    4d0e:	da 4f       	sbci	r29, 0xFA	; 250
    4d10:	88 81       	ld	r24, Y
    4d12:	87 70       	andi	r24, 0x07	; 7
    4d14:	8f 5f       	subi	r24, 0xFF	; 255
    4d16:	88 83       	st	Y, r24
    4d18:	33 c0       	rjmp	.+102    	; 0x4d80 <nibbleChange+0x354>
    4d1a:	ec 2f       	mov	r30, r28
    4d1c:	f0 e0       	ldi	r31, 0x00	; 0
    4d1e:	e6 51       	subi	r30, 0x16	; 22
    4d20:	fa 4f       	sbci	r31, 0xFA	; 250
    4d22:	80 81       	ld	r24, Z
    4d24:	82 50       	subi	r24, 0x02	; 2
    4d26:	87 70       	andi	r24, 0x07	; 7
    4d28:	8f 5f       	subi	r24, 0xFF	; 255
    4d2a:	80 83       	st	Z, r24
    4d2c:	29 c0       	rjmp	.+82     	; 0x4d80 <nibbleChange+0x354>
    4d2e:	ea ee       	ldi	r30, 0xEA	; 234
    4d30:	f5 e0       	ldi	r31, 0x05	; 5
    4d32:	90 81       	ld	r25, Z
    4d34:	81 81       	ldd	r24, Z+1	; 0x01
    4d36:	99 0f       	add	r25, r25
    4d38:	29 2f       	mov	r18, r25
    4d3a:	22 0f       	add	r18, r18
    4d3c:	22 0f       	add	r18, r18
    4d3e:	92 0f       	add	r25, r18
    4d40:	89 0f       	add	r24, r25
    4d42:	c1 11       	cpse	r28, r1
    4d44:	07 c0       	rjmp	.+14     	; 0x4d54 <nibbleChange+0x328>
    4d46:	66 0f       	add	r22, r22
    4d48:	96 2f       	mov	r25, r22
    4d4a:	99 0f       	add	r25, r25
    4d4c:	99 0f       	add	r25, r25
    4d4e:	69 0f       	add	r22, r25
    4d50:	68 0f       	add	r22, r24
    4d52:	01 c0       	rjmp	.+2      	; 0x4d56 <nibbleChange+0x32a>
    4d54:	68 0f       	add	r22, r24
    4d56:	66 23       	and	r22, r22
    4d58:	1c f0       	brlt	.+6      	; 0x4d60 <nibbleChange+0x334>
    4d5a:	61 34       	cpi	r22, 0x41	; 65
    4d5c:	1c f4       	brge	.+6      	; 0x4d64 <nibbleChange+0x338>
    4d5e:	03 c0       	rjmp	.+6      	; 0x4d66 <nibbleChange+0x33a>
    4d60:	60 e0       	ldi	r22, 0x00	; 0
    4d62:	01 c0       	rjmp	.+2      	; 0x4d66 <nibbleChange+0x33a>
    4d64:	60 e0       	ldi	r22, 0x00	; 0
    4d66:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <nibble>
    4d6a:	06 c0       	rjmp	.+12     	; 0x4d78 <nibbleChange+0x34c>
    4d6c:	ea ee       	ldi	r30, 0xEA	; 234
    4d6e:	f5 e0       	ldi	r31, 0x05	; 5
    4d70:	80 81       	ld	r24, Z
    4d72:	8f 5f       	subi	r24, 0xFF	; 255
    4d74:	80 83       	st	Z, r24
    4d76:	6a 50       	subi	r22, 0x0A	; 10
    4d78:	6a 30       	cpi	r22, 0x0A	; 10
    4d7a:	c4 f7       	brge	.-16     	; 0x4d6c <nibbleChange+0x340>
    4d7c:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <nibble+0x1>
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	1f 91       	pop	r17
    4d86:	0f 91       	pop	r16
    4d88:	08 95       	ret

00004d8a <nibbleToData>:
    4d8a:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4d8e:	8e 2f       	mov	r24, r30
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	fc 01       	movw	r30, r24
    4d94:	32 97       	sbiw	r30, 0x02	; 2
    4d96:	ed 30       	cpi	r30, 0x0D	; 13
    4d98:	f1 05       	cpc	r31, r1
    4d9a:	08 f0       	brcs	.+2      	; 0x4d9e <nibbleToData+0x14>
    4d9c:	da c0       	rjmp	.+436    	; 0x4f52 <nibbleToData+0x1c8>
    4d9e:	88 27       	eor	r24, r24
    4da0:	e7 56       	subi	r30, 0x67	; 103
    4da2:	ff 4f       	sbci	r31, 0xFF	; 255
    4da4:	8f 4f       	sbci	r24, 0xFF	; 255
    4da6:	0c 94 ef 3e 	jmp	0x7dde	; 0x7dde <__tablejump2__>
    4daa:	ea ee       	ldi	r30, 0xEA	; 234
    4dac:	f5 e0       	ldi	r31, 0x05	; 5
    4dae:	80 81       	ld	r24, Z
    4db0:	20 e1       	ldi	r18, 0x10	; 16
    4db2:	82 9f       	mul	r24, r18
    4db4:	c0 01       	movw	r24, r0
    4db6:	11 24       	eor	r1, r1
    4db8:	91 81       	ldd	r25, Z+1	; 0x01
    4dba:	9f 70       	andi	r25, 0x0F	; 15
    4dbc:	89 2b       	or	r24, r25
    4dbe:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4dc2:	08 95       	ret
    4dc4:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4dc8:	8f ef       	ldi	r24, 0xFF	; 255
    4dca:	89 0f       	add	r24, r25
    4dcc:	80 31       	cpi	r24, 0x10	; 16
    4dce:	18 f0       	brcs	.+6      	; 0x4dd6 <nibbleToData+0x4c>
    4dd0:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <dataEntry>
    4dd4:	08 95       	ret
    4dd6:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4dda:	08 95       	ret
    4ddc:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4de0:	9f 3f       	cpi	r25, 0xFF	; 255
    4de2:	21 f0       	breq	.+8      	; 0x4dec <nibbleToData+0x62>
    4de4:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4de8:	8f 3f       	cpi	r24, 0xFF	; 255
    4dea:	21 f4       	brne	.+8      	; 0x4df4 <nibbleToData+0x6a>
    4dec:	8f ef       	ldi	r24, 0xFF	; 255
    4dee:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4df2:	08 95       	ret
    4df4:	28 2f       	mov	r18, r24
    4df6:	22 0f       	add	r18, r18
    4df8:	82 0f       	add	r24, r18
    4dfa:	88 0f       	add	r24, r24
    4dfc:	88 0f       	add	r24, r24
    4dfe:	89 0f       	add	r24, r25
    4e00:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e04:	08 95       	ret
    4e06:	ea ee       	ldi	r30, 0xEA	; 234
    4e08:	f5 e0       	ldi	r31, 0x05	; 5
    4e0a:	80 81       	ld	r24, Z
    4e0c:	30 e2       	ldi	r19, 0x20	; 32
    4e0e:	83 9f       	mul	r24, r19
    4e10:	c0 01       	movw	r24, r0
    4e12:	11 24       	eor	r1, r1
    4e14:	21 81       	ldd	r18, Z+1	; 0x01
    4e16:	32 81       	ldd	r19, Z+2	; 0x02
    4e18:	22 0f       	add	r18, r18
    4e1a:	42 2f       	mov	r20, r18
    4e1c:	44 0f       	add	r20, r20
    4e1e:	44 0f       	add	r20, r20
    4e20:	24 0f       	add	r18, r20
    4e22:	23 0f       	add	r18, r19
    4e24:	20 32       	cpi	r18, 0x20	; 32
    4e26:	20 f0       	brcs	.+8      	; 0x4e30 <nibbleToData+0xa6>
    4e28:	8f 61       	ori	r24, 0x1F	; 31
    4e2a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e2e:	08 95       	ret
    4e30:	82 2b       	or	r24, r18
    4e32:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e36:	08 95       	ret
    4e38:	ea ee       	ldi	r30, 0xEA	; 234
    4e3a:	f5 e0       	ldi	r31, 0x05	; 5
    4e3c:	20 81       	ld	r18, Z
    4e3e:	81 81       	ldd	r24, Z+1	; 0x01
    4e40:	90 e0       	ldi	r25, 0x00	; 0
    4e42:	ac 01       	movw	r20, r24
    4e44:	44 0f       	add	r20, r20
    4e46:	55 1f       	adc	r21, r21
    4e48:	88 0f       	add	r24, r24
    4e4a:	99 1f       	adc	r25, r25
    4e4c:	88 0f       	add	r24, r24
    4e4e:	99 1f       	adc	r25, r25
    4e50:	88 0f       	add	r24, r24
    4e52:	99 1f       	adc	r25, r25
    4e54:	84 0f       	add	r24, r20
    4e56:	95 1f       	adc	r25, r21
    4e58:	34 e6       	ldi	r19, 0x64	; 100
    4e5a:	23 9f       	mul	r18, r19
    4e5c:	80 0d       	add	r24, r0
    4e5e:	91 1d       	adc	r25, r1
    4e60:	11 24       	eor	r1, r1
    4e62:	22 81       	ldd	r18, Z+2	; 0x02
    4e64:	82 0f       	add	r24, r18
    4e66:	91 1d       	adc	r25, r1
    4e68:	8f 3f       	cpi	r24, 0xFF	; 255
    4e6a:	91 05       	cpc	r25, r1
    4e6c:	29 f0       	breq	.+10     	; 0x4e78 <nibbleToData+0xee>
    4e6e:	20 f0       	brcs	.+8      	; 0x4e78 <nibbleToData+0xee>
    4e70:	8f ef       	ldi	r24, 0xFF	; 255
    4e72:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e76:	08 95       	ret
    4e78:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e7c:	08 95       	ret
    4e7e:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4e82:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e86:	84 30       	cpi	r24, 0x04	; 4
    4e88:	08 f4       	brcc	.+2      	; 0x4e8c <nibbleToData+0x102>
    4e8a:	63 c0       	rjmp	.+198    	; 0x4f52 <nibbleToData+0x1c8>
    4e8c:	8f ef       	ldi	r24, 0xFF	; 255
    4e8e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e92:	08 95       	ret
    4e94:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4e98:	83 70       	andi	r24, 0x03	; 3
    4e9a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e9e:	08 95       	ret
    4ea0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4ea4:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4ea8:	08 95       	ret
    4eaa:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <dataEntry>
    4eae:	80 e0       	ldi	r24, 0x00	; 0
    4eb0:	0c c0       	rjmp	.+24     	; 0x4eca <nibbleToData+0x140>
    4eb2:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <dataEntry>
    4eb6:	99 0f       	add	r25, r25
    4eb8:	e8 2f       	mov	r30, r24
    4eba:	f0 e0       	ldi	r31, 0x00	; 0
    4ebc:	e6 51       	subi	r30, 0x16	; 22
    4ebe:	fa 4f       	sbci	r31, 0xFA	; 250
    4ec0:	20 81       	ld	r18, Z
    4ec2:	92 0f       	add	r25, r18
    4ec4:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <dataEntry>
    4ec8:	8f 5f       	subi	r24, 0xFF	; 255
    4eca:	88 30       	cpi	r24, 0x08	; 8
    4ecc:	90 f3       	brcs	.-28     	; 0x4eb2 <nibbleToData+0x128>
    4ece:	08 95       	ret
    4ed0:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <dataEntry32>
    4ed4:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <dataEntry32+0x1>
    4ed8:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <dataEntry32+0x2>
    4edc:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <dataEntry32+0x3>
    4ee0:	a8 ec       	ldi	r26, 0xC8	; 200
    4ee2:	b5 e0       	ldi	r27, 0x05	; 5
    4ee4:	88 e0       	ldi	r24, 0x08	; 8
    4ee6:	10 c0       	rjmp	.+32     	; 0x4f08 <nibbleToData+0x17e>
    4ee8:	82 50       	subi	r24, 0x02	; 2
    4eea:	f0 e0       	ldi	r31, 0x00	; 0
    4eec:	e6 51       	subi	r30, 0x16	; 22
    4eee:	fa 4f       	sbci	r31, 0xFA	; 250
    4ef0:	90 81       	ld	r25, Z
    4ef2:	e8 2f       	mov	r30, r24
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	e6 51       	subi	r30, 0x16	; 22
    4ef8:	fa 4f       	sbci	r31, 0xFA	; 250
    4efa:	20 81       	ld	r18, Z
    4efc:	30 e1       	ldi	r19, 0x10	; 16
    4efe:	23 9f       	mul	r18, r19
    4f00:	90 0d       	add	r25, r0
    4f02:	11 24       	eor	r1, r1
    4f04:	9c 93       	st	X, r25
    4f06:	11 96       	adiw	r26, 0x01	; 1
    4f08:	ef ef       	ldi	r30, 0xFF	; 255
    4f0a:	e8 0f       	add	r30, r24
    4f0c:	81 11       	cpse	r24, r1
    4f0e:	ec cf       	rjmp	.-40     	; 0x4ee8 <nibbleToData+0x15e>
    4f10:	08 95       	ret
    4f12:	ea ee       	ldi	r30, 0xEA	; 234
    4f14:	f5 e0       	ldi	r31, 0x05	; 5
    4f16:	21 81       	ldd	r18, Z+1	; 0x01
    4f18:	90 81       	ld	r25, Z
    4f1a:	89 2f       	mov	r24, r25
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	01 97       	sbiw	r24, 0x01	; 1
    4f20:	88 0f       	add	r24, r24
    4f22:	99 1f       	adc	r25, r25
    4f24:	88 0f       	add	r24, r24
    4f26:	99 1f       	adc	r25, r25
    4f28:	88 0f       	add	r24, r24
    4f2a:	99 1f       	adc	r25, r25
    4f2c:	9f ef       	ldi	r25, 0xFF	; 255
    4f2e:	92 0f       	add	r25, r18
    4f30:	89 2b       	or	r24, r25
    4f32:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f36:	08 95       	ret
    4f38:	ea ee       	ldi	r30, 0xEA	; 234
    4f3a:	f5 e0       	ldi	r31, 0x05	; 5
    4f3c:	80 81       	ld	r24, Z
    4f3e:	91 81       	ldd	r25, Z+1	; 0x01
    4f40:	88 0f       	add	r24, r24
    4f42:	28 2f       	mov	r18, r24
    4f44:	22 0f       	add	r18, r18
    4f46:	22 0f       	add	r18, r18
    4f48:	82 0f       	add	r24, r18
    4f4a:	89 0f       	add	r24, r25
    4f4c:	81 50       	subi	r24, 0x01	; 1
    4f4e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f52:	08 95       	ret

00004f54 <menuTextOut>:
    4f54:	0f 93       	push	r16
    4f56:	1f 93       	push	r17
    4f58:	cf 93       	push	r28
    4f5a:	df 93       	push	r29
    4f5c:	8c 01       	movw	r16, r24
    4f5e:	d6 2f       	mov	r29, r22
    4f60:	c0 e0       	ldi	r28, 0x00	; 0
    4f62:	0c c0       	rjmp	.+24     	; 0x4f7c <menuTextOut+0x28>
    4f64:	f8 01       	movw	r30, r16
    4f66:	84 91       	lpm	r24, Z
    4f68:	88 23       	and	r24, r24
    4f6a:	19 f0       	breq	.+6      	; 0x4f72 <menuTextOut+0x1e>
    4f6c:	0f 5f       	subi	r16, 0xFF	; 255
    4f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f70:	02 c0       	rjmp	.+4      	; 0x4f76 <menuTextOut+0x22>
    4f72:	8d 2f       	mov	r24, r29
    4f74:	d0 e2       	ldi	r29, 0x20	; 32
    4f76:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    4f7a:	cf 5f       	subi	r28, 0xFF	; 255
    4f7c:	ca 30       	cpi	r28, 0x0A	; 10
    4f7e:	90 f3       	brcs	.-28     	; 0x4f64 <menuTextOut+0x10>
    4f80:	df 91       	pop	r29
    4f82:	cf 91       	pop	r28
    4f84:	1f 91       	pop	r17
    4f86:	0f 91       	pop	r16
    4f88:	08 95       	ret

00004f8a <menuParentMenuToLCD>:
    4f8a:	80 e4       	ldi	r24, 0x40	; 64
    4f8c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4f90:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    4f94:	e1 11       	cpse	r30, r1
    4f96:	07 c0       	rjmp	.+14     	; 0x4fa6 <menuParentMenuToLCD+0x1c>
    4f98:	6a e3       	ldi	r22, 0x3A	; 58
    4f9a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <pMenuTopTitle>
    4f9e:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <pMenuTopTitle+0x1>
    4fa2:	d8 cf       	rjmp	.-80     	; 0x4f54 <menuTextOut>
    4fa4:	08 95       	ret
    4fa6:	f0 e0       	ldi	r31, 0x00	; 0
    4fa8:	31 97       	sbiw	r30, 0x01	; 1
    4faa:	ee 0f       	add	r30, r30
    4fac:	ff 1f       	adc	r31, r31
    4fae:	ef 55       	subi	r30, 0x5F	; 95
    4fb0:	fa 4f       	sbci	r31, 0xFA	; 250
    4fb2:	80 81       	ld	r24, Z
    4fb4:	91 81       	ldd	r25, Z+1	; 0x01
    4fb6:	6a e3       	ldi	r22, 0x3A	; 58
    4fb8:	02 96       	adiw	r24, 0x02	; 2
    4fba:	cc cf       	rjmp	.-104    	; 0x4f54 <menuTextOut>
    4fbc:	08 95       	ret

00004fbe <menuDisplayValue>:
    4fbe:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    4fc2:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    4fc6:	84 91       	lpm	r24, Z
    4fc8:	8f 73       	andi	r24, 0x3F	; 63
    4fca:	90 e0       	ldi	r25, 0x00	; 0
    4fcc:	02 97       	sbiw	r24, 0x02	; 2
    4fce:	1c f0       	brlt	.+6      	; 0x4fd6 <menuDisplayValue+0x18>
    4fd0:	c8 da       	rcall	.-2672   	; 0x4562 <dataToNibbles>
    4fd2:	ba db       	rcall	.-2188   	; 0x4748 <nibbleToLCDstring>
    4fd4:	07 cd       	rjmp	.-1522   	; 0x49e4 <LCDStringOut>
    4fd6:	08 95       	ret

00004fd8 <menuCursorSetDataNibble>:
    4fd8:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    4fdc:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    4fe0:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    4fe4:	e8 0f       	add	r30, r24
    4fe6:	f1 1d       	adc	r31, r1
    4fe8:	31 96       	adiw	r30, 0x01	; 1
    4fea:	84 91       	lpm	r24, Z
    4fec:	82 5e       	subi	r24, 0xE2	; 226
    4fee:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4ff2:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    4ffc:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5000:	84 91       	lpm	r24, Z
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	01 97       	sbiw	r24, 0x01	; 1
    5006:	28 17       	cp	r18, r24
    5008:	39 07       	cpc	r19, r25
    500a:	14 f4       	brge	.+4      	; 0x5010 <menuCursorSetDataNibble+0x38>
    500c:	68 da       	rcall	.-2864   	; 0x44de <softkeyRight>
    500e:	03 c0       	rjmp	.+6      	; 0x5016 <menuCursorSetDataNibble+0x3e>
    5010:	83 e0       	ldi	r24, 0x03	; 3
    5012:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5016:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    501a:	88 23       	and	r24, r24
    501c:	11 f0       	breq	.+4      	; 0x5022 <menuCursorSetDataNibble+0x4a>
    501e:	59 da       	rcall	.-2894   	; 0x44d2 <softkeyLeft>
    5020:	03 c0       	rjmp	.+6      	; 0x5028 <menuCursorSetDataNibble+0x50>
    5022:	82 e0       	ldi	r24, 0x02	; 2
    5024:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5028:	78 da       	rcall	.-2832   	; 0x451a <softkeyPlus>
    502a:	89 da       	rcall	.-2798   	; 0x453e <softkeyMinus>
    502c:	0c 94 8c 3e 	jmp	0x7d18	; 0x7d18 <keylabel_toLCD>
    5030:	08 95       	ret

00005032 <menuCursorSetExtra>:
    5032:	84 e1       	ldi	r24, 0x14	; 20
    5034:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <lcd_goto>
    5038:	08 95       	ret

0000503a <menuOnEnterStatusMidiIn>:
    503a:	0f 93       	push	r16
    503c:	1f 93       	push	r17
    503e:	cf 93       	push	r28
    5040:	f8 df       	rcall	.-16     	; 0x5032 <menuCursorSetExtra>
    5042:	8b e1       	ldi	r24, 0x1B	; 27
    5044:	94 e0       	ldi	r25, 0x04	; 4
    5046:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    504a:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <midiRxBytesCount>
    504e:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <midiRxBytesCount+0x1>
    5052:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <lcd_wordout>
    5056:	8d e2       	ldi	r24, 0x2D	; 45
    5058:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    505c:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <midiRxBytesCount>
    5060:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <midiRxBytesCount+0x1>
    5064:	04 97       	sbiw	r24, 0x04	; 4
    5066:	30 f4       	brcc	.+12     	; 0x5074 <menuOnEnterStatusMidiIn+0x3a>
    5068:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <midiRxBytesCount>
    506c:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <midiRxBytesCount+0x1>
    5070:	c8 2f       	mov	r28, r24
    5072:	01 c0       	rjmp	.+2      	; 0x5076 <menuOnEnterStatusMidiIn+0x3c>
    5074:	c4 e0       	ldi	r28, 0x04	; 4
    5076:	00 91 6a 16 	lds	r16, 0x166A	; 0x80166a <midiRxInIndex>
    507a:	10 e0       	ldi	r17, 0x00	; 0
    507c:	0a 59       	subi	r16, 0x9A	; 154
    507e:	1b 4e       	sbci	r17, 0xEB	; 235
    5080:	13 c0       	rjmp	.+38     	; 0x50a8 <menuOnEnterStatusMidiIn+0x6e>
    5082:	84 e1       	ldi	r24, 0x14	; 20
    5084:	07 36       	cpi	r16, 0x67	; 103
    5086:	18 07       	cpc	r17, r24
    5088:	10 f0       	brcs	.+4      	; 0x508e <menuOnEnterStatusMidiIn+0x54>
    508a:	f8 01       	movw	r30, r16
    508c:	02 c0       	rjmp	.+4      	; 0x5092 <menuOnEnterStatusMidiIn+0x58>
    508e:	e6 e6       	ldi	r30, 0x66	; 102
    5090:	f5 e1       	ldi	r31, 0x15	; 21
    5092:	8f 01       	movw	r16, r30
    5094:	01 50       	subi	r16, 0x01	; 1
    5096:	11 09       	sbc	r17, r1
    5098:	80 81       	ld	r24, Z
    509a:	0e 94 d2 3b 	call	0x77a4	; 0x77a4 <lcd_hexout>
    509e:	c1 50       	subi	r28, 0x01	; 1
    50a0:	19 f0       	breq	.+6      	; 0x50a8 <menuOnEnterStatusMidiIn+0x6e>
    50a2:	80 e2       	ldi	r24, 0x20	; 32
    50a4:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    50a8:	c1 11       	cpse	r28, r1
    50aa:	eb cf       	rjmp	.-42     	; 0x5082 <menuOnEnterStatusMidiIn+0x48>
    50ac:	80 e0       	ldi	r24, 0x00	; 0
    50ae:	cf 91       	pop	r28
    50b0:	1f 91       	pop	r17
    50b2:	0f 91       	pop	r16
    50b4:	08 95       	ret

000050b6 <menuOnEnterStatusMidiOut>:
    50b6:	0f 93       	push	r16
    50b8:	1f 93       	push	r17
    50ba:	cf 93       	push	r28
    50bc:	ba df       	rcall	.-140    	; 0x5032 <menuCursorSetExtra>
    50be:	86 e1       	ldi	r24, 0x16	; 22
    50c0:	94 e0       	ldi	r25, 0x04	; 4
    50c2:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    50c6:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <midiTxBytesCount>
    50ca:	90 91 77 16 	lds	r25, 0x1677	; 0x801677 <midiTxBytesCount+0x1>
    50ce:	0e 94 82 3d 	call	0x7b04	; 0x7b04 <lcd_wordout>
    50d2:	8d e2       	ldi	r24, 0x2D	; 45
    50d4:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    50d8:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <midiTxBytesCount>
    50dc:	90 91 77 16 	lds	r25, 0x1677	; 0x801677 <midiTxBytesCount+0x1>
    50e0:	04 97       	sbiw	r24, 0x04	; 4
    50e2:	30 f4       	brcc	.+12     	; 0x50f0 <menuOnEnterStatusMidiOut+0x3a>
    50e4:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <midiTxBytesCount>
    50e8:	90 91 77 16 	lds	r25, 0x1677	; 0x801677 <midiTxBytesCount+0x1>
    50ec:	c8 2f       	mov	r28, r24
    50ee:	01 c0       	rjmp	.+2      	; 0x50f2 <menuOnEnterStatusMidiOut+0x3c>
    50f0:	c4 e0       	ldi	r28, 0x04	; 4
    50f2:	00 91 15 14 	lds	r16, 0x1415	; 0x801415 <midiTxInIndex>
    50f6:	10 e0       	ldi	r17, 0x00	; 0
    50f8:	09 59       	subi	r16, 0x99	; 153
    50fa:	1a 4e       	sbci	r17, 0xEA	; 234
    50fc:	13 c0       	rjmp	.+38     	; 0x5124 <menuOnEnterStatusMidiOut+0x6e>
    50fe:	85 e1       	ldi	r24, 0x15	; 21
    5100:	08 36       	cpi	r16, 0x68	; 104
    5102:	18 07       	cpc	r17, r24
    5104:	10 f0       	brcs	.+4      	; 0x510a <menuOnEnterStatusMidiOut+0x54>
    5106:	f8 01       	movw	r30, r16
    5108:	02 c0       	rjmp	.+4      	; 0x510e <menuOnEnterStatusMidiOut+0x58>
    510a:	e7 e6       	ldi	r30, 0x67	; 103
    510c:	f6 e1       	ldi	r31, 0x16	; 22
    510e:	8f 01       	movw	r16, r30
    5110:	01 50       	subi	r16, 0x01	; 1
    5112:	11 09       	sbc	r17, r1
    5114:	80 81       	ld	r24, Z
    5116:	0e 94 d2 3b 	call	0x77a4	; 0x77a4 <lcd_hexout>
    511a:	c1 50       	subi	r28, 0x01	; 1
    511c:	19 f0       	breq	.+6      	; 0x5124 <menuOnEnterStatusMidiOut+0x6e>
    511e:	80 e2       	ldi	r24, 0x20	; 32
    5120:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    5124:	c1 11       	cpse	r28, r1
    5126:	eb cf       	rjmp	.-42     	; 0x50fe <menuOnEnterStatusMidiOut+0x48>
    5128:	80 e0       	ldi	r24, 0x00	; 0
    512a:	cf 91       	pop	r28
    512c:	1f 91       	pop	r17
    512e:	0f 91       	pop	r16
    5130:	08 95       	ret

00005132 <menuOnEnterLogDisp>:
    5132:	0f 93       	push	r16
    5134:	1f 93       	push	r17
    5136:	cf 93       	push	r28
    5138:	8f 3f       	cpi	r24, 0xFF	; 255
    513a:	a9 f4       	brne	.+42     	; 0x5166 <menuOnEnterLogDisp+0x34>
    513c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <log_count>
    5140:	81 50       	subi	r24, 0x01	; 1
    5142:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3099>
    5146:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <showText.3100>
    514a:	6a e0       	ldi	r22, 0x0A	; 10
    514c:	74 e1       	ldi	r23, 0x14	; 20
    514e:	80 e0       	ldi	r24, 0x00	; 0
    5150:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    5154:	64 e0       	ldi	r22, 0x04	; 4
    5156:	74 e1       	ldi	r23, 0x14	; 20
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    515e:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
    5162:	cf ef       	ldi	r28, 0xFF	; 255
    5164:	2f c0       	rjmp	.+94     	; 0x51c4 <menuOnEnterLogDisp+0x92>
    5166:	84 30       	cpi	r24, 0x04	; 4
    5168:	49 f4       	brne	.+18     	; 0x517c <menuOnEnterLogDisp+0x4a>
    516a:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3099>
    516e:	88 23       	and	r24, r24
    5170:	21 f1       	breq	.+72     	; 0x51ba <menuOnEnterLogDisp+0x88>
    5172:	81 50       	subi	r24, 0x01	; 1
    5174:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3099>
    5178:	cf ef       	ldi	r28, 0xFF	; 255
    517a:	24 c0       	rjmp	.+72     	; 0x51c4 <menuOnEnterLogDisp+0x92>
    517c:	81 30       	cpi	r24, 0x01	; 1
    517e:	91 f4       	brne	.+36     	; 0x51a4 <menuOnEnterLogDisp+0x72>
    5180:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3099>
    5184:	10 e0       	ldi	r17, 0x00	; 0
    5186:	0f 5f       	subi	r16, 0xFF	; 255
    5188:	1f 4f       	sbci	r17, 0xFF	; 255
    518a:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <log_count>
    518e:	90 e0       	ldi	r25, 0x00	; 0
    5190:	08 17       	cp	r16, r24
    5192:	19 07       	cpc	r17, r25
    5194:	a4 f4       	brge	.+40     	; 0x51be <menuOnEnterLogDisp+0x8c>
    5196:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3099>
    519a:	8f 5f       	subi	r24, 0xFF	; 255
    519c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3099>
    51a0:	cf ef       	ldi	r28, 0xFF	; 255
    51a2:	10 c0       	rjmp	.+32     	; 0x51c4 <menuOnEnterLogDisp+0x92>
    51a4:	83 30       	cpi	r24, 0x03	; 3
    51a6:	11 f0       	breq	.+4      	; 0x51ac <menuOnEnterLogDisp+0x7a>
    51a8:	85 30       	cpi	r24, 0x05	; 5
    51aa:	59 f4       	brne	.+22     	; 0x51c2 <menuOnEnterLogDisp+0x90>
    51ac:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3100>
    51b0:	80 95       	com	r24
    51b2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <showText.3100>
    51b6:	cf ef       	ldi	r28, 0xFF	; 255
    51b8:	05 c0       	rjmp	.+10     	; 0x51c4 <menuOnEnterLogDisp+0x92>
    51ba:	cf ef       	ldi	r28, 0xFF	; 255
    51bc:	03 c0       	rjmp	.+6      	; 0x51c4 <menuOnEnterLogDisp+0x92>
    51be:	cf ef       	ldi	r28, 0xFF	; 255
    51c0:	01 c0       	rjmp	.+2      	; 0x51c4 <menuOnEnterLogDisp+0x92>
    51c2:	c0 e0       	ldi	r28, 0x00	; 0
    51c4:	cf 3f       	cpi	r28, 0xFF	; 255
    51c6:	09 f0       	breq	.+2      	; 0x51ca <menuOnEnterLogDisp+0x98>
    51c8:	54 c0       	rjmp	.+168    	; 0x5272 <menuOnEnterLogDisp+0x140>
    51ca:	33 df       	rcall	.-410    	; 0x5032 <menuCursorSetExtra>
    51cc:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <log_count>
    51d0:	81 11       	cpse	r24, r1
    51d2:	06 c0       	rjmp	.+12     	; 0x51e0 <menuOnEnterLogDisp+0xae>
    51d4:	89 ed       	ldi	r24, 0xD9	; 217
    51d6:	93 e0       	ldi	r25, 0x03	; 3
    51d8:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    51dc:	c0 e0       	ldi	r28, 0x00	; 0
    51de:	1d c0       	rjmp	.+58     	; 0x521a <menuOnEnterLogDisp+0xe8>
    51e0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3099>
    51e4:	8f 5f       	subi	r24, 0xFF	; 255
    51e6:	0e 94 0e 3c 	call	0x781c	; 0x781c <lcd_dec2out>
    51ea:	8a e3       	ldi	r24, 0x3A	; 58
    51ec:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    51f0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3100>
    51f4:	81 11       	cpse	r24, r1
    51f6:	08 c0       	rjmp	.+16     	; 0x5208 <menuOnEnterLogDisp+0xd6>
    51f8:	60 e2       	ldi	r22, 0x20	; 32
    51fa:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3099>
    51fe:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <log_getShortTextFromIndex>
    5202:	0e 94 60 14 	call	0x28c0	; 0x28c0 <lcd_puts>
    5206:	06 c0       	rjmp	.+12     	; 0x5214 <menuOnEnterLogDisp+0xe2>
    5208:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3099>
    520c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <log_getErrorText>
    5210:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    5214:	0e 94 0a 3e 	call	0x7c14	; 0x7c14 <lcd_clrEol>
    5218:	0c df       	rcall	.-488    	; 0x5032 <menuCursorSetExtra>
    521a:	61 e0       	ldi	r22, 0x01	; 1
    521c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3100>
    5220:	8f 3f       	cpi	r24, 0xFF	; 255
    5222:	09 f0       	breq	.+2      	; 0x5226 <menuOnEnterLogDisp+0xf4>
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	81 e0       	ldi	r24, 0x01	; 1
    5228:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <keylabel_statcheck>
    522c:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3099>
    5230:	10 e0       	ldi	r17, 0x00	; 0
    5232:	0f 5f       	subi	r16, 0xFF	; 255
    5234:	1f 4f       	sbci	r17, 0xFF	; 255
    5236:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <log_count>
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	08 17       	cp	r16, r24
    523e:	19 07       	cpc	r17, r25
    5240:	34 f4       	brge	.+12     	; 0x524e <menuOnEnterLogDisp+0x11c>
    5242:	64 e2       	ldi	r22, 0x24	; 36
    5244:	74 e1       	ldi	r23, 0x14	; 20
    5246:	83 e0       	ldi	r24, 0x03	; 3
    5248:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    524c:	03 c0       	rjmp	.+6      	; 0x5254 <menuOnEnterLogDisp+0x122>
    524e:	83 e0       	ldi	r24, 0x03	; 3
    5250:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5254:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3099>
    5258:	88 23       	and	r24, r24
    525a:	31 f0       	breq	.+12     	; 0x5268 <menuOnEnterLogDisp+0x136>
    525c:	62 e2       	ldi	r22, 0x22	; 34
    525e:	74 e1       	ldi	r23, 0x14	; 20
    5260:	82 e0       	ldi	r24, 0x02	; 2
    5262:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
    5266:	03 c0       	rjmp	.+6      	; 0x526e <menuOnEnterLogDisp+0x13c>
    5268:	82 e0       	ldi	r24, 0x02	; 2
    526a:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    526e:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
    5272:	8c 2f       	mov	r24, r28
    5274:	cf 91       	pop	r28
    5276:	1f 91       	pop	r17
    5278:	0f 91       	pop	r16
    527a:	08 95       	ret

0000527c <menuCursorSetMenu>:
    527c:	8a e4       	ldi	r24, 0x4A	; 74
    527e:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <lcd_goto>
    5282:	08 95       	ret

00005284 <menu_OnEnterMidiPanic>:
    5284:	88 ef       	ldi	r24, 0xF8	; 248
    5286:	93 e0       	ldi	r25, 0x03	; 3
    5288:	0e 94 cb 14 	call	0x2996	; 0x2996 <lcd_message_P>
    528c:	0e 94 f8 37 	call	0x6ff0	; 0x6ff0 <midiSendAllNotesOff>
    5290:	f5 df       	rcall	.-22     	; 0x527c <menuCursorSetMenu>
    5292:	80 e0       	ldi	r24, 0x00	; 0
    5294:	08 95       	ret

00005296 <menuClearExtraDisp>:
    5296:	cd de       	rcall	.-614    	; 0x5032 <menuCursorSetExtra>
    5298:	8a e0       	ldi	r24, 0x0A	; 10
    529a:	0c 94 fe 3d 	jmp	0x7bfc	; 0x7bfc <lcd_blank>
    529e:	08 95       	ret

000052a0 <menu_ClearDataDisp>:
    52a0:	8e e1       	ldi	r24, 0x1E	; 30
    52a2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    52a6:	8a e0       	ldi	r24, 0x0A	; 10
    52a8:	0c 94 fe 3d 	jmp	0x7bfc	; 0x7bfc <lcd_blank>
    52ac:	08 95       	ret

000052ae <menu_ModuleTestExecute>:
    52ae:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    52b2:	8f 3f       	cpi	r24, 0xFF	; 255
    52b4:	11 f0       	breq	.+4      	; 0x52ba <menu_ModuleTestExecute+0xc>
    52b6:	8d 3f       	cpi	r24, 0xFD	; 253
    52b8:	79 f5       	brne	.+94     	; 0x5318 <menu_ModuleTestExecute+0x6a>
    52ba:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <lcd_cursoroff>
    52be:	f0 df       	rcall	.-32     	; 0x52a0 <menu_ClearDataDisp>
    52c0:	10 92 19 08 	sts	0x0819, r1	; 0x800819 <msgPipe_Handling>
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	ec e6       	ldi	r30, 0x6C	; 108
    52c8:	f2 e0       	ldi	r31, 0x02	; 2
    52ca:	07 c0       	rjmp	.+14     	; 0x52da <menu_ModuleTestExecute+0x2c>
    52cc:	21 81       	ldd	r18, Z+1	; 0x01
    52ce:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    52d2:	82 2b       	or	r24, r18
    52d4:	81 83       	std	Z+1, r24	; 0x01
    52d6:	38 96       	adiw	r30, 0x08	; 8
    52d8:	9f 5f       	subi	r25, 0xFF	; 255
    52da:	90 32       	cpi	r25, 0x20	; 32
    52dc:	b8 f3       	brcs	.-18     	; 0x52cc <menu_ModuleTestExecute+0x1e>
    52de:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    52e2:	8f 3f       	cpi	r24, 0xFF	; 255
    52e4:	19 f4       	brne	.+6      	; 0x52ec <menu_ModuleTestExecute+0x3e>
    52e6:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <menu_TestModuleBitCounter>
    52ea:	5c c0       	rjmp	.+184    	; 0x53a4 <menu_ModuleTestExecute+0xf6>
    52ec:	82 ef       	ldi	r24, 0xF2	; 242
    52ee:	93 e0       	ldi	r25, 0x03	; 3
    52f0:	0e 94 cb 14 	call	0x2996	; 0x2996 <lcd_message_P>
    52f4:	8e ef       	ldi	r24, 0xFE	; 254
    52f6:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    52fa:	9f b7       	in	r25, 0x3f	; 63
    52fc:	f8 94       	cli
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	06 c0       	rjmp	.+12     	; 0x530e <menu_ModuleTestExecute+0x60>
    5302:	e0 e5       	ldi	r30, 0x50	; 80
    5304:	f2 e0       	ldi	r31, 0x02	; 2
    5306:	82 e0       	ldi	r24, 0x02	; 2
    5308:	84 87       	std	Z+12, r24	; 0x0c
    530a:	85 87       	std	Z+13, r24	; 0x0d
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	81 11       	cpse	r24, r1
    5310:	f8 cf       	rjmp	.-16     	; 0x5302 <menu_ModuleTestExecute+0x54>
    5312:	9f bf       	out	0x3f, r25	; 63
    5314:	b3 df       	rcall	.-154    	; 0x527c <menuCursorSetMenu>
    5316:	46 c0       	rjmp	.+140    	; 0x53a4 <menu_ModuleTestExecute+0xf6>
    5318:	8e 3f       	cpi	r24, 0xFE	; 254
    531a:	41 f4       	brne	.+16     	; 0x532c <menu_ModuleTestExecute+0x7e>
    531c:	8f ef       	ldi	r24, 0xFF	; 255
    531e:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <msgPipe_Handling>
    5322:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <menu_TestModulePattern>
    5326:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <lcd_cursosblink>
    532a:	3c c0       	rjmp	.+120    	; 0x53a4 <menu_ModuleTestExecute+0xf6>
    532c:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    5330:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    5334:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5338:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    533c:	76 95       	lsr	r23
    533e:	67 95       	ror	r22
    5340:	57 95       	ror	r21
    5342:	47 95       	ror	r20
    5344:	40 93 8f 05 	sts	0x058F, r20	; 0x80058f <menu_TestModuleErrorList>
    5348:	50 93 90 05 	sts	0x0590, r21	; 0x800590 <menu_TestModuleErrorList+0x1>
    534c:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <menu_TestModuleErrorList+0x2>
    5350:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <menu_TestModuleErrorList+0x3>
    5354:	e8 2f       	mov	r30, r24
    5356:	f0 e0       	ldi	r31, 0x00	; 0
    5358:	df 01       	movw	r26, r30
    535a:	aa 0f       	add	r26, r26
    535c:	bb 1f       	adc	r27, r27
    535e:	aa 0f       	add	r26, r26
    5360:	bb 1f       	adc	r27, r27
    5362:	aa 0f       	add	r26, r26
    5364:	bb 1f       	adc	r27, r27
    5366:	a4 59       	subi	r26, 0x94	; 148
    5368:	bd 4f       	sbci	r27, 0xFD	; 253
    536a:	16 96       	adiw	r26, 0x06	; 6
    536c:	2c 91       	ld	r18, X
    536e:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    5372:	29 23       	and	r18, r25
    5374:	49 f4       	brne	.+18     	; 0x5388 <menu_ModuleTestExecute+0xda>
    5376:	70 68       	ori	r23, 0x80	; 128
    5378:	40 93 8f 05 	sts	0x058F, r20	; 0x80058f <menu_TestModuleErrorList>
    537c:	50 93 90 05 	sts	0x0590, r21	; 0x800590 <menu_TestModuleErrorList+0x1>
    5380:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <menu_TestModuleErrorList+0x2>
    5384:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <menu_TestModuleErrorList+0x3>
    5388:	ee 0f       	add	r30, r30
    538a:	ff 1f       	adc	r31, r31
    538c:	ee 0f       	add	r30, r30
    538e:	ff 1f       	adc	r31, r31
    5390:	ee 0f       	add	r30, r30
    5392:	ff 1f       	adc	r31, r31
    5394:	e4 59       	subi	r30, 0x94	; 148
    5396:	fd 4f       	sbci	r31, 0xFD	; 253
    5398:	21 81       	ldd	r18, Z+1	; 0x01
    539a:	92 2b       	or	r25, r18
    539c:	91 83       	std	Z+1, r25	; 0x01
    539e:	8f 5f       	subi	r24, 0xFF	; 255
    53a0:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    53a4:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    53a8:	e0 32       	cpi	r30, 0x20	; 32
    53aa:	28 f5       	brcc	.+74     	; 0x53f6 <menu_ModuleTestExecute+0x148>
    53ac:	f0 e0       	ldi	r31, 0x00	; 0
    53ae:	ee 0f       	add	r30, r30
    53b0:	ff 1f       	adc	r31, r31
    53b2:	ee 0f       	add	r30, r30
    53b4:	ff 1f       	adc	r31, r31
    53b6:	ee 0f       	add	r30, r30
    53b8:	ff 1f       	adc	r31, r31
    53ba:	e4 59       	subi	r30, 0x94	; 148
    53bc:	fd 4f       	sbci	r31, 0xFD	; 253
    53be:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    53c2:	98 2f       	mov	r25, r24
    53c4:	90 95       	com	r25
    53c6:	81 81       	ldd	r24, Z+1	; 0x01
    53c8:	89 23       	and	r24, r25
    53ca:	81 83       	std	Z+1, r24	; 0x01
    53cc:	8e e1       	ldi	r24, 0x1E	; 30
    53ce:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    53d2:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    53d6:	0e 94 0e 3c 	call	0x781c	; 0x781c <lcd_dec2out>
    53da:	9f b7       	in	r25, 0x3f	; 63
    53dc:	f8 94       	cli
    53de:	81 e0       	ldi	r24, 0x01	; 1
    53e0:	06 c0       	rjmp	.+12     	; 0x53ee <menu_ModuleTestExecute+0x140>
    53e2:	e0 e5       	ldi	r30, 0x50	; 80
    53e4:	f2 e0       	ldi	r31, 0x02	; 2
    53e6:	88 e0       	ldi	r24, 0x08	; 8
    53e8:	84 87       	std	Z+12, r24	; 0x0c
    53ea:	15 86       	std	Z+13, r1	; 0x0d
    53ec:	80 e0       	ldi	r24, 0x00	; 0
    53ee:	81 11       	cpse	r24, r1
    53f0:	f8 cf       	rjmp	.-16     	; 0x53e2 <menu_ModuleTestExecute+0x134>
    53f2:	9f bf       	out	0x3f, r25	; 63
    53f4:	08 95       	ret
    53f6:	e0 32       	cpi	r30, 0x20	; 32
    53f8:	09 f0       	breq	.+2      	; 0x53fc <menu_ModuleTestExecute+0x14e>
    53fa:	41 c0       	rjmp	.+130    	; 0x547e <menu_ModuleTestExecute+0x1d0>
    53fc:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    5400:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    5404:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5408:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    540c:	00 97       	sbiw	r24, 0x00	; 0
    540e:	a1 05       	cpc	r26, r1
    5410:	b1 05       	cpc	r27, r1
    5412:	29 f4       	brne	.+10     	; 0x541e <menu_ModuleTestExecute+0x170>
    5414:	8e ee       	ldi	r24, 0xEE	; 238
    5416:	93 e0       	ldi	r25, 0x03	; 3
    5418:	0e 94 cb 14 	call	0x2996	; 0x2996 <lcd_message_P>
    541c:	1f c0       	rjmp	.+62     	; 0x545c <menu_ModuleTestExecute+0x1ae>
    541e:	80 93 02 19 	sts	0x1902, r24	; 0x801902 <editLong>
    5422:	90 93 03 19 	sts	0x1903, r25	; 0x801903 <editLong+0x1>
    5426:	a0 93 04 19 	sts	0x1904, r26	; 0x801904 <editLong+0x2>
    542a:	b0 93 05 19 	sts	0x1905, r27	; 0x801905 <editLong+0x3>
    542e:	66 e0       	ldi	r22, 0x06	; 6
    5430:	79 e1       	ldi	r23, 0x19	; 25
    5432:	8b ee       	ldi	r24, 0xEB	; 235
    5434:	93 e0       	ldi	r25, 0x03	; 3
    5436:	0e 94 5c 3d 	call	0x7ab8	; 0x7ab8 <putString_P>
    543a:	ac 01       	movw	r20, r24
    543c:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    5440:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    5444:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5448:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    544c:	0e 94 c3 3c 	call	0x7986	; 0x7986 <putChar_long>
    5450:	fc 01       	movw	r30, r24
    5452:	10 82       	st	Z, r1
    5454:	86 e0       	ldi	r24, 0x06	; 6
    5456:	99 e1       	ldi	r25, 0x19	; 25
    5458:	0e 94 80 14 	call	0x2900	; 0x2900 <lcd_message>
    545c:	8e ef       	ldi	r24, 0xFE	; 254
    545e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    5462:	9f b7       	in	r25, 0x3f	; 63
    5464:	f8 94       	cli
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	06 c0       	rjmp	.+12     	; 0x5476 <menu_ModuleTestExecute+0x1c8>
    546a:	e0 e5       	ldi	r30, 0x50	; 80
    546c:	f2 e0       	ldi	r31, 0x02	; 2
    546e:	82 e0       	ldi	r24, 0x02	; 2
    5470:	84 87       	std	Z+12, r24	; 0x0c
    5472:	85 87       	std	Z+13, r24	; 0x0d
    5474:	80 e0       	ldi	r24, 0x00	; 0
    5476:	81 11       	cpse	r24, r1
    5478:	f8 cf       	rjmp	.-16     	; 0x546a <menu_ModuleTestExecute+0x1bc>
    547a:	9f bf       	out	0x3f, r25	; 63
    547c:	ff ce       	rjmp	.-514    	; 0x527c <menuCursorSetMenu>
    547e:	08 95       	ret

00005480 <menu_ModuleTestPattern>:
    5480:	81 e0       	ldi	r24, 0x01	; 1
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    5488:	02 c0       	rjmp	.+4      	; 0x548e <menu_ModuleTestPattern+0xe>
    548a:	88 0f       	add	r24, r24
    548c:	99 1f       	adc	r25, r25
    548e:	0a 94       	dec	r0
    5490:	e2 f7       	brpl	.-8      	; 0x548a <menu_ModuleTestPattern+0xa>
    5492:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <menu_TestModulePattern>
    5496:	8f ef       	ldi	r24, 0xFF	; 255
    5498:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    549c:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <menu_TestModuleErrorList>
    54a0:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <menu_TestModuleErrorList+0x1>
    54a4:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <menu_TestModuleErrorList+0x2>
    54a8:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <menu_TestModuleErrorList+0x3>
    54ac:	00 df       	rcall	.-512    	; 0x52ae <menu_ModuleTestExecute>
    54ae:	80 e0       	ldi	r24, 0x00	; 0
    54b0:	08 95       	ret

000054b2 <menuClearMenuDisp>:
    54b2:	80 e4       	ldi	r24, 0x40	; 64
    54b4:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    54b8:	8a e0       	ldi	r24, 0x0A	; 10
    54ba:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <lcd_blank>
    54be:	de de       	rcall	.-580    	; 0x527c <menuCursorSetMenu>
    54c0:	8a e0       	ldi	r24, 0x0A	; 10
    54c2:	0c 94 fe 3d 	jmp	0x7bfc	; 0x7bfc <lcd_blank>
    54c6:	08 95       	ret

000054c8 <menu_ClearAllDisp>:
    54c8:	f4 df       	rcall	.-24     	; 0x54b2 <menuClearMenuDisp>
    54ca:	ea de       	rcall	.-556    	; 0x52a0 <menu_ClearDataDisp>
    54cc:	e4 ce       	rjmp	.-568    	; 0x5296 <menuClearExtraDisp>
    54ce:	08 95       	ret

000054d0 <menuCheckArrowDown>:
    54d0:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    54d4:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    54d8:	84 91       	lpm	r24, Z
    54da:	8f 73       	andi	r24, 0x3F	; 63
    54dc:	81 30       	cpi	r24, 0x01	; 1
    54de:	11 f4       	brne	.+4      	; 0x54e4 <menuCheckArrowDown+0x14>
    54e0:	04 c8       	rjmp	.-4088   	; 0x44ea <softkeyDown>
    54e2:	08 95       	ret
    54e4:	3e 96       	adiw	r30, 0x0e	; 14
    54e6:	05 90       	lpm	r0, Z+
    54e8:	f4 91       	lpm	r31, Z
    54ea:	e0 2d       	mov	r30, r0
    54ec:	30 97       	sbiw	r30, 0x00	; 0
    54ee:	69 f0       	breq	.+26     	; 0x550a <menuCheckArrowDown+0x3a>
    54f0:	89 30       	cpi	r24, 0x09	; 9
    54f2:	41 f4       	brne	.+16     	; 0x5504 <menuCheckArrowDown+0x34>
    54f4:	80 81       	ld	r24, Z
    54f6:	81 11       	cpse	r24, r1
    54f8:	03 c0       	rjmp	.+6      	; 0x5500 <menuCheckArrowDown+0x30>
    54fa:	0c 94 7b 22 	jmp	0x44f6	; 0x44f6 <softkeyOn>
    54fe:	08 95       	ret
    5500:	00 c8       	rjmp	.-4096   	; 0x4502 <softkeyOff>
    5502:	08 95       	ret
    5504:	0c 94 75 22 	jmp	0x44ea	; 0x44ea <softkeyDown>
    5508:	08 95       	ret
    550a:	81 e0       	ldi	r24, 0x01	; 1
    550c:	0c 94 78 3e 	jmp	0x7cf0	; 0x7cf0 <keylabel_clr>
    5510:	08 95       	ret

00005512 <menuCurrMenuToLCD>:
    5512:	cf 93       	push	r28
    5514:	89 e4       	ldi	r24, 0x49	; 73
    5516:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    551a:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    551e:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5522:	c4 91       	lpm	r28, Z
    5524:	c0 7c       	andi	r28, 0xC0	; 192
    5526:	c0 38       	cpi	r28, 0x80	; 128
    5528:	39 f4       	brne	.+14     	; 0x5538 <menuCurrMenuToLCD+0x26>
    552a:	80 e2       	ldi	r24, 0x20	; 32
    552c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    5530:	82 e0       	ldi	r24, 0x02	; 2
    5532:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5536:	05 c0       	rjmp	.+10     	; 0x5542 <menuCurrMenuToLCD+0x30>
    5538:	8f e7       	ldi	r24, 0x7F	; 127
    553a:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    553e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <softkeyLeft>
    5542:	c0 3c       	cpi	r28, 0xC0	; 192
    5544:	29 f4       	brne	.+10     	; 0x5550 <menuCurrMenuToLCD+0x3e>
    5546:	83 e0       	ldi	r24, 0x03	; 3
    5548:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    554c:	c0 e2       	ldi	r28, 0x20	; 32
    554e:	03 c0       	rjmp	.+6      	; 0x5556 <menuCurrMenuToLCD+0x44>
    5550:	0e 94 6f 22 	call	0x44de	; 0x44de <softkeyRight>
    5554:	ce e7       	ldi	r28, 0x7E	; 126
    5556:	0e 94 87 22 	call	0x450e	; 0x450e <softkeyUp>
    555a:	ba df       	rcall	.-140    	; 0x54d0 <menuCheckArrowDown>
    555c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <currentMenu>
    5560:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5564:	6c 2f       	mov	r22, r28
    5566:	02 96       	adiw	r24, 0x02	; 2
    5568:	f5 dc       	rcall	.-1558   	; 0x4f54 <menuTextOut>
    556a:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
    556e:	86 de       	rcall	.-756    	; 0x527c <menuCursorSetMenu>
    5570:	cf 91       	pop	r28
    5572:	08 95       	ret

00005574 <menuItemChanged>:
    5574:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <currentMenu>
    5578:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    557c:	fc 01       	movw	r30, r24
    557e:	24 91       	lpm	r18, Z
    5580:	62 2f       	mov	r22, r18
    5582:	6f 73       	andi	r22, 0x3F	; 63
    5584:	62 30       	cpi	r22, 0x02	; 2
    5586:	08 f4       	brcc	.+2      	; 0x558a <menuItemChanged+0x16>
    5588:	49 c0       	rjmp	.+146    	; 0x561c <menuItemChanged+0xa8>
    558a:	9c 01       	movw	r18, r24
    558c:	22 5f       	subi	r18, 0xF2	; 242
    558e:	3f 4f       	sbci	r19, 0xFF	; 255
    5590:	f9 01       	movw	r30, r18
    5592:	45 91       	lpm	r20, Z+
    5594:	55 91       	lpm	r21, Z+
    5596:	41 15       	cp	r20, r1
    5598:	51 05       	cpc	r21, r1
    559a:	09 f4       	brne	.+2      	; 0x559e <menuItemChanged+0x2a>
    559c:	3f c0       	rjmp	.+126    	; 0x561c <menuItemChanged+0xa8>
    559e:	e6 2f       	mov	r30, r22
    55a0:	f0 e0       	ldi	r31, 0x00	; 0
    55a2:	31 97       	sbiw	r30, 0x01	; 1
    55a4:	9f 01       	movw	r18, r30
    55a6:	22 0f       	add	r18, r18
    55a8:	33 1f       	adc	r19, r19
    55aa:	22 0f       	add	r18, r18
    55ac:	33 1f       	adc	r19, r19
    55ae:	22 0f       	add	r18, r18
    55b0:	33 1f       	adc	r19, r19
    55b2:	e2 0f       	add	r30, r18
    55b4:	f3 1f       	adc	r31, r19
    55b6:	e7 5d       	subi	r30, 0xD7	; 215
    55b8:	fb 4f       	sbci	r31, 0xFB	; 251
    55ba:	f0 93 a0 05 	sts	0x05A0, r31	; 0x8005a0 <pNibbleInfo+0x1>
    55be:	e0 93 9f 05 	sts	0x059F, r30	; 0x80059f <pNibbleInfo>
    55c2:	24 91       	lpm	r18, Z
    55c4:	20 93 c6 05 	sts	0x05C6, r18	; 0x8005c6 <nibbleCount>
    55c8:	fc 01       	movw	r30, r24
    55ca:	25 91       	lpm	r18, Z+
    55cc:	2f 73       	andi	r18, 0x3F	; 63
    55ce:	20 93 9b 05 	sts	0x059B, r18	; 0x80059b <dataType>
    55d2:	24 91       	lpm	r18, Z
    55d4:	22 23       	and	r18, r18
    55d6:	2c f4       	brge	.+10     	; 0x55e2 <menuItemChanged+0x6e>
    55d8:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <DataAdressOffset>
    55dc:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <DataAdressOffset+0x1>
    55e0:	02 c0       	rjmp	.+4      	; 0x55e6 <menuItemChanged+0x72>
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	24 0f       	add	r18, r20
    55e8:	35 1f       	adc	r19, r21
    55ea:	fc 01       	movw	r30, r24
    55ec:	84 91       	lpm	r24, Z
    55ee:	8f 73       	andi	r24, 0x3F	; 63
    55f0:	8b 30       	cpi	r24, 0x0B	; 11
    55f2:	71 f4       	brne	.+28     	; 0x5610 <menuItemChanged+0x9c>
    55f4:	f9 01       	movw	r30, r18
    55f6:	80 81       	ld	r24, Z
    55f8:	91 81       	ldd	r25, Z+1	; 0x01
    55fa:	a2 81       	ldd	r26, Z+2	; 0x02
    55fc:	b3 81       	ldd	r27, Z+3	; 0x03
    55fe:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <dataEntry32>
    5602:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <dataEntry32+0x1>
    5606:	a0 93 ca 05 	sts	0x05CA, r26	; 0x8005ca <dataEntry32+0x2>
    560a:	b0 93 cb 05 	sts	0x05CB, r27	; 0x8005cb <dataEntry32+0x3>
    560e:	04 c0       	rjmp	.+8      	; 0x5618 <menuItemChanged+0xa4>
    5610:	f9 01       	movw	r30, r18
    5612:	80 81       	ld	r24, Z
    5614:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    5618:	d2 dc       	rcall	.-1628   	; 0x4fbe <menuDisplayValue>
    561a:	07 c0       	rjmp	.+14     	; 0x562a <menuItemChanged+0xb6>
    561c:	41 de       	rcall	.-894    	; 0x52a0 <menu_ClearDataDisp>
    561e:	89 e2       	ldi	r24, 0x29	; 41
    5620:	94 e0       	ldi	r25, 0x04	; 4
    5622:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <pNibbleInfo+0x1>
    5626:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <pNibbleInfo>
    562a:	52 df       	rcall	.-348    	; 0x54d0 <menuCheckArrowDown>
    562c:	27 ce       	rjmp	.-946    	; 0x527c <menuCursorSetMenu>
    562e:	08 95       	ret

00005630 <menu_InitLCD>:
    5630:	32 de       	rcall	.-924    	; 0x5296 <menuClearExtraDisp>
    5632:	a0 df       	rcall	.-192    	; 0x5574 <menuItemChanged>
    5634:	aa dc       	rcall	.-1708   	; 0x4f8a <menuParentMenuToLCD>
    5636:	6d df       	rcall	.-294    	; 0x5512 <menuCurrMenuToLCD>
    5638:	0c 94 5c 15 	jmp	0x2ab8	; 0x2ab8 <lcd_cursosblink>
    563c:	08 95       	ret

0000563e <menu_ProcessMessage>:
    563e:	cf 93       	push	r28
    5640:	c8 2f       	mov	r28, r24
    5642:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <lcd_cursosblink>
    5646:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    564a:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    564e:	84 91       	lpm	r24, Z
    5650:	8f 73       	andi	r24, 0x3F	; 63
    5652:	81 30       	cpi	r24, 0x01	; 1
    5654:	29 f0       	breq	.+10     	; 0x5660 <menu_ProcessMessage+0x22>
    5656:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    565a:	8f 3f       	cpi	r24, 0xFF	; 255
    565c:	09 f0       	breq	.+2      	; 0x5660 <menu_ProcessMessage+0x22>
    565e:	68 c1       	rjmp	.+720    	; 0x5930 <menu_ProcessMessage+0x2f2>
    5660:	31 96       	adiw	r30, 0x01	; 1
    5662:	84 91       	lpm	r24, Z
    5664:	86 ff       	sbrs	r24, 6
    5666:	02 c0       	rjmp	.+4      	; 0x566c <menu_ProcessMessage+0x2e>
    5668:	16 de       	rcall	.-980    	; 0x5296 <menuClearExtraDisp>
    566a:	08 de       	rcall	.-1008   	; 0x527c <menuCursorSetMenu>
    566c:	60 91 cf 05 	lds	r22, 0x05CF	; 0x8005cf <currentMenu>
    5670:	70 91 d0 05 	lds	r23, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5674:	cb 01       	movw	r24, r22
    5676:	01 96       	adiw	r24, 0x01	; 1
    5678:	fc 01       	movw	r30, r24
    567a:	84 91       	lpm	r24, Z
    567c:	98 2f       	mov	r25, r24
    567e:	90 72       	andi	r25, 0x20	; 32
    5680:	85 ff       	sbrs	r24, 5
    5682:	1f c0       	rjmp	.+62     	; 0x56c2 <menu_ProcessMessage+0x84>
    5684:	9b 01       	movw	r18, r22
    5686:	20 5f       	subi	r18, 0xF0	; 240
    5688:	3f 4f       	sbci	r19, 0xFF	; 255
    568a:	f9 01       	movw	r30, r18
    568c:	25 91       	lpm	r18, Z+
    568e:	35 91       	lpm	r19, Z+
    5690:	21 15       	cp	r18, r1
    5692:	31 05       	cpc	r19, r1
    5694:	b1 f0       	breq	.+44     	; 0x56c2 <menu_ProcessMessage+0x84>
    5696:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <nibbleIndex>
    569a:	4f 3f       	cpi	r20, 0xFF	; 255
    569c:	91 f0       	breq	.+36     	; 0x56c2 <menu_ProcessMessage+0x84>
    569e:	8c 2f       	mov	r24, r28
    56a0:	f9 01       	movw	r30, r18
    56a2:	19 95       	eicall
    56a4:	8f 3f       	cpi	r24, 0xFF	; 255
    56a6:	21 f4       	brne	.+8      	; 0x56b0 <menu_ProcessMessage+0x72>
    56a8:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    56ac:	80 e0       	ldi	r24, 0x00	; 0
    56ae:	04 c2       	rjmp	.+1032   	; 0x5ab8 <menu_ProcessMessage+0x47a>
    56b0:	f2 dd       	rcall	.-1052   	; 0x5296 <menuClearExtraDisp>
    56b2:	f6 dd       	rcall	.-1044   	; 0x52a0 <menu_ClearDataDisp>
    56b4:	e3 dd       	rcall	.-1082   	; 0x527c <menuCursorSetMenu>
    56b6:	8f ef       	ldi	r24, 0xFF	; 255
    56b8:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    56bc:	2a df       	rcall	.-428    	; 0x5512 <menuCurrMenuToLCD>
    56be:	80 e0       	ldi	r24, 0x00	; 0
    56c0:	fb c1       	rjmp	.+1014   	; 0x5ab8 <menu_ProcessMessage+0x47a>
    56c2:	c3 30       	cpi	r28, 0x03	; 3
    56c4:	09 f4       	brne	.+2      	; 0x56c8 <menu_ProcessMessage+0x8a>
    56c6:	64 c0       	rjmp	.+200    	; 0x5790 <menu_ProcessMessage+0x152>
    56c8:	28 f4       	brcc	.+10     	; 0x56d4 <menu_ProcessMessage+0x96>
    56ca:	c1 30       	cpi	r28, 0x01	; 1
    56cc:	51 f0       	breq	.+20     	; 0x56e2 <menu_ProcessMessage+0xa4>
    56ce:	c2 30       	cpi	r28, 0x02	; 2
    56d0:	31 f1       	breq	.+76     	; 0x571e <menu_ProcessMessage+0xe0>
    56d2:	db c1       	rjmp	.+950    	; 0x5a8a <menu_ProcessMessage+0x44c>
    56d4:	c5 30       	cpi	r28, 0x05	; 5
    56d6:	09 f4       	brne	.+2      	; 0x56da <menu_ProcessMessage+0x9c>
    56d8:	5b c0       	rjmp	.+182    	; 0x5790 <menu_ProcessMessage+0x152>
    56da:	90 f0       	brcs	.+36     	; 0x5700 <menu_ProcessMessage+0xc2>
    56dc:	c6 30       	cpi	r28, 0x06	; 6
    56de:	f9 f0       	breq	.+62     	; 0x571e <menu_ProcessMessage+0xe0>
    56e0:	d4 c1       	rjmp	.+936    	; 0x5a8a <menu_ProcessMessage+0x44c>
    56e2:	fb 01       	movw	r30, r22
    56e4:	84 91       	lpm	r24, Z
    56e6:	80 7c       	andi	r24, 0xC0	; 192
    56e8:	80 3c       	cpi	r24, 0xC0	; 192
    56ea:	09 f4       	brne	.+2      	; 0x56ee <menu_ProcessMessage+0xb0>
    56ec:	d0 c1       	rjmp	.+928    	; 0x5a8e <menu_ProcessMessage+0x450>
    56ee:	74 96       	adiw	r30, 0x14	; 20
    56f0:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    56f4:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    56f8:	3d df       	rcall	.-390    	; 0x5574 <menuItemChanged>
    56fa:	0b df       	rcall	.-490    	; 0x5512 <menuCurrMenuToLCD>
    56fc:	80 e0       	ldi	r24, 0x00	; 0
    56fe:	dc c1       	rjmp	.+952    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5700:	fb 01       	movw	r30, r22
    5702:	84 91       	lpm	r24, Z
    5704:	80 7c       	andi	r24, 0xC0	; 192
    5706:	80 38       	cpi	r24, 0x80	; 128
    5708:	09 f4       	brne	.+2      	; 0x570c <menu_ProcessMessage+0xce>
    570a:	c3 c1       	rjmp	.+902    	; 0x5a92 <menu_ProcessMessage+0x454>
    570c:	74 97       	sbiw	r30, 0x14	; 20
    570e:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    5712:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    5716:	2e df       	rcall	.-420    	; 0x5574 <menuItemChanged>
    5718:	fc de       	rcall	.-520    	; 0x5512 <menuCurrMenuToLCD>
    571a:	80 e0       	ldi	r24, 0x00	; 0
    571c:	cd c1       	rjmp	.+922    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    571e:	84 ff       	sbrs	r24, 4
    5720:	04 c0       	rjmp	.+8      	; 0x572a <menu_ProcessMessage+0xec>
    5722:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5726:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <menuVMenuSoftKey>
    572a:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    572e:	ee 23       	and	r30, r30
    5730:	e9 f0       	breq	.+58     	; 0x576c <menu_ProcessMessage+0x12e>
    5732:	e1 50       	subi	r30, 0x01	; 1
    5734:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <menuStackIndex>
    5738:	f0 e0       	ldi	r31, 0x00	; 0
    573a:	ee 0f       	add	r30, r30
    573c:	ff 1f       	adc	r31, r31
    573e:	ef 55       	subi	r30, 0x5F	; 95
    5740:	fa 4f       	sbci	r31, 0xFA	; 250
    5742:	01 90       	ld	r0, Z+
    5744:	f0 81       	ld	r31, Z
    5746:	e0 2d       	mov	r30, r0
    5748:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    574c:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    5750:	72 96       	adiw	r30, 0x12	; 18
    5752:	05 90       	lpm	r0, Z+
    5754:	f4 91       	lpm	r31, Z
    5756:	e0 2d       	mov	r30, r0
    5758:	30 97       	sbiw	r30, 0x00	; 0
    575a:	11 f0       	breq	.+4      	; 0x5760 <menu_ProcessMessage+0x122>
    575c:	80 e0       	ldi	r24, 0x00	; 0
    575e:	19 95       	eicall
    5760:	9a dd       	rcall	.-1228   	; 0x5296 <menuClearExtraDisp>
    5762:	13 dc       	rcall	.-2010   	; 0x4f8a <menuParentMenuToLCD>
    5764:	d6 de       	rcall	.-596    	; 0x5512 <menuCurrMenuToLCD>
    5766:	06 df       	rcall	.-500    	; 0x5574 <menuItemChanged>
    5768:	80 e0       	ldi	r24, 0x00	; 0
    576a:	a6 c1       	rjmp	.+844    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    576c:	80 e0       	ldi	r24, 0x00	; 0
    576e:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5772:	81 e0       	ldi	r24, 0x01	; 1
    5774:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5778:	82 e0       	ldi	r24, 0x02	; 2
    577a:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    577e:	83 e0       	ldi	r24, 0x03	; 3
    5780:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5784:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
    5788:	0e 94 62 15 	call	0x2ac4	; 0x2ac4 <lcd_cursoroff>
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	94 c1       	rjmp	.+808    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5790:	fb 01       	movw	r30, r22
    5792:	24 91       	lpm	r18, Z
    5794:	2f 73       	andi	r18, 0x3F	; 63
    5796:	30 e0       	ldi	r19, 0x00	; 0
    5798:	22 30       	cpi	r18, 0x02	; 2
    579a:	31 05       	cpc	r19, r1
    579c:	0c f4       	brge	.+2      	; 0x57a0 <menu_ProcessMessage+0x162>
    579e:	48 c0       	rjmp	.+144    	; 0x5830 <menu_ProcessMessage+0x1f2>
    57a0:	70 96       	adiw	r30, 0x10	; 16
    57a2:	05 90       	lpm	r0, Z+
    57a4:	f4 91       	lpm	r31, Z
    57a6:	e0 2d       	mov	r30, r0
    57a8:	30 97       	sbiw	r30, 0x00	; 0
    57aa:	19 f0       	breq	.+6      	; 0x57b2 <menu_ProcessMessage+0x174>
    57ac:	8c 2f       	mov	r24, r28
    57ae:	19 95       	eicall
    57b0:	e1 de       	rcall	.-574    	; 0x5574 <menuItemChanged>
    57b2:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    57b6:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    57ba:	c9 01       	movw	r24, r18
    57bc:	01 96       	adiw	r24, 0x01	; 1
    57be:	fc 01       	movw	r30, r24
    57c0:	84 91       	lpm	r24, Z
    57c2:	83 fd       	sbrc	r24, 3
    57c4:	68 c1       	rjmp	.+720    	; 0x5a96 <menu_ProcessMessage+0x458>
    57c6:	c9 01       	movw	r24, r18
    57c8:	0e 96       	adiw	r24, 0x0e	; 14
    57ca:	fc 01       	movw	r30, r24
    57cc:	85 91       	lpm	r24, Z+
    57ce:	95 91       	lpm	r25, Z+
    57d0:	89 2b       	or	r24, r25
    57d2:	09 f4       	brne	.+2      	; 0x57d6 <menu_ProcessMessage+0x198>
    57d4:	62 c1       	rjmp	.+708    	; 0x5a9a <menu_ProcessMessage+0x45c>
    57d6:	f9 01       	movw	r30, r18
    57d8:	84 91       	lpm	r24, Z
    57da:	8f 73       	andi	r24, 0x3F	; 63
    57dc:	89 30       	cpi	r24, 0x09	; 9
    57de:	19 f5       	brne	.+70     	; 0x5826 <menu_ProcessMessage+0x1e8>
    57e0:	61 e0       	ldi	r22, 0x01	; 1
    57e2:	80 e0       	ldi	r24, 0x00	; 0
    57e4:	23 d9       	rcall	.-3514   	; 0x4a2c <nibbleChange>
    57e6:	d1 da       	rcall	.-2654   	; 0x4d8a <nibbleToData>
    57e8:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    57ec:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    57f0:	3e 96       	adiw	r30, 0x0e	; 14
    57f2:	05 90       	lpm	r0, Z+
    57f4:	f4 91       	lpm	r31, Z
    57f6:	e0 2d       	mov	r30, r0
    57f8:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    57fc:	80 83       	st	Z, r24
    57fe:	df db       	rcall	.-2114   	; 0x4fbe <menuDisplayValue>
    5800:	67 de       	rcall	.-818    	; 0x54d0 <menuCheckArrowDown>
    5802:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
    5806:	3a dd       	rcall	.-1420   	; 0x527c <menuCursorSetMenu>
    5808:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    580c:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5810:	72 96       	adiw	r30, 0x12	; 18
    5812:	05 90       	lpm	r0, Z+
    5814:	f4 91       	lpm	r31, Z
    5816:	e0 2d       	mov	r30, r0
    5818:	30 97       	sbiw	r30, 0x00	; 0
    581a:	09 f4       	brne	.+2      	; 0x581e <menu_ProcessMessage+0x1e0>
    581c:	40 c1       	rjmp	.+640    	; 0x5a9e <menu_ProcessMessage+0x460>
    581e:	80 e0       	ldi	r24, 0x00	; 0
    5820:	19 95       	eicall
    5822:	80 e0       	ldi	r24, 0x00	; 0
    5824:	49 c1       	rjmp	.+658    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5826:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    582a:	d6 db       	rcall	.-2132   	; 0x4fd8 <menuCursorSetDataNibble>
    582c:	80 e0       	ldi	r24, 0x00	; 0
    582e:	44 c1       	rjmp	.+648    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5830:	2f ef       	ldi	r18, 0xFF	; 255
    5832:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    5836:	84 ff       	sbrs	r24, 4
    5838:	26 c0       	rjmp	.+76     	; 0x5886 <menu_ProcessMessage+0x248>
    583a:	70 93 f4 05 	sts	0x05F4, r23	; 0x8005f4 <menuVMenuSoftKey+0x1>
    583e:	60 93 f3 05 	sts	0x05F3, r22	; 0x8005f3 <menuVMenuSoftKey>
    5842:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    5846:	ee 23       	and	r30, r30
    5848:	09 f4       	brne	.+2      	; 0x584c <menu_ProcessMessage+0x20e>
    584a:	2b c1       	rjmp	.+598    	; 0x5aa2 <menu_ProcessMessage+0x464>
    584c:	e1 50       	subi	r30, 0x01	; 1
    584e:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <menuStackIndex>
    5852:	f0 e0       	ldi	r31, 0x00	; 0
    5854:	ee 0f       	add	r30, r30
    5856:	ff 1f       	adc	r31, r31
    5858:	ef 55       	subi	r30, 0x5F	; 95
    585a:	fa 4f       	sbci	r31, 0xFA	; 250
    585c:	01 90       	ld	r0, Z+
    585e:	f0 81       	ld	r31, Z
    5860:	e0 2d       	mov	r30, r0
    5862:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    5866:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    586a:	72 96       	adiw	r30, 0x12	; 18
    586c:	05 90       	lpm	r0, Z+
    586e:	f4 91       	lpm	r31, Z
    5870:	e0 2d       	mov	r30, r0
    5872:	30 97       	sbiw	r30, 0x00	; 0
    5874:	11 f0       	breq	.+4      	; 0x587a <menu_ProcessMessage+0x23c>
    5876:	80 e0       	ldi	r24, 0x00	; 0
    5878:	19 95       	eicall
    587a:	0d dd       	rcall	.-1510   	; 0x5296 <menuClearExtraDisp>
    587c:	86 db       	rcall	.-2292   	; 0x4f8a <menuParentMenuToLCD>
    587e:	49 de       	rcall	.-878    	; 0x5512 <menuCurrMenuToLCD>
    5880:	79 de       	rcall	.-782    	; 0x5574 <menuItemChanged>
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	19 c1       	rjmp	.+562    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5886:	fb 01       	movw	r30, r22
    5888:	70 96       	adiw	r30, 0x10	; 16
    588a:	05 90       	lpm	r0, Z+
    588c:	f4 91       	lpm	r31, Z
    588e:	e0 2d       	mov	r30, r0
    5890:	30 97       	sbiw	r30, 0x00	; 0
    5892:	99 f0       	breq	.+38     	; 0x58ba <menu_ProcessMessage+0x27c>
    5894:	99 23       	and	r25, r25
    5896:	71 f0       	breq	.+28     	; 0x58b4 <menu_ProcessMessage+0x276>
    5898:	8f ef       	ldi	r24, 0xFF	; 255
    589a:	19 95       	eicall
    589c:	8f 3f       	cpi	r24, 0xFF	; 255
    589e:	19 f4       	brne	.+6      	; 0x58a6 <menu_ProcessMessage+0x268>
    58a0:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    58a4:	0a c0       	rjmp	.+20     	; 0x58ba <menu_ProcessMessage+0x27c>
    58a6:	f7 dc       	rcall	.-1554   	; 0x5296 <menuClearExtraDisp>
    58a8:	fb dc       	rcall	.-1546   	; 0x52a0 <menu_ClearDataDisp>
    58aa:	e8 dc       	rcall	.-1584   	; 0x527c <menuCursorSetMenu>
    58ac:	8f ef       	ldi	r24, 0xFF	; 255
    58ae:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    58b2:	03 c0       	rjmp	.+6      	; 0x58ba <menu_ProcessMessage+0x27c>
    58b4:	85 e0       	ldi	r24, 0x05	; 5
    58b6:	19 95       	eicall
    58b8:	e1 dc       	rcall	.-1598   	; 0x527c <menuCursorSetMenu>
    58ba:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    58be:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    58c2:	c9 01       	movw	r24, r18
    58c4:	0c 96       	adiw	r24, 0x0c	; 12
    58c6:	fc 01       	movw	r30, r24
    58c8:	85 91       	lpm	r24, Z+
    58ca:	95 91       	lpm	r25, Z+
    58cc:	89 2b       	or	r24, r25
    58ce:	09 f4       	brne	.+2      	; 0x58d2 <menu_ProcessMessage+0x294>
    58d0:	ea c0       	rjmp	.+468    	; 0x5aa6 <menu_ProcessMessage+0x468>
    58d2:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <menuStackIndex>
    58d6:	a0 31       	cpi	r26, 0x10	; 16
    58d8:	08 f0       	brcs	.+2      	; 0x58dc <menu_ProcessMessage+0x29e>
    58da:	e7 c0       	rjmp	.+462    	; 0x5aaa <menu_ProcessMessage+0x46c>
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	8a 0f       	add	r24, r26
    58e0:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <menuStackIndex>
    58e4:	b0 e0       	ldi	r27, 0x00	; 0
    58e6:	aa 0f       	add	r26, r26
    58e8:	bb 1f       	adc	r27, r27
    58ea:	af 55       	subi	r26, 0x5F	; 95
    58ec:	ba 4f       	sbci	r27, 0xFA	; 250
    58ee:	2d 93       	st	X+, r18
    58f0:	3c 93       	st	X, r19
    58f2:	c9 01       	movw	r24, r18
    58f4:	01 96       	adiw	r24, 0x01	; 1
    58f6:	fc 01       	movw	r30, r24
    58f8:	84 91       	lpm	r24, Z
    58fa:	83 ff       	sbrs	r24, 3
    58fc:	0b c0       	rjmp	.+22     	; 0x5914 <menu_ProcessMessage+0x2d6>
    58fe:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <menuVMenuSoftKey>
    5902:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5906:	00 97       	sbiw	r24, 0x00	; 0
    5908:	29 f0       	breq	.+10     	; 0x5914 <menu_ProcessMessage+0x2d6>
    590a:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    590e:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    5912:	08 c0       	rjmp	.+16     	; 0x5924 <menu_ProcessMessage+0x2e6>
    5914:	f9 01       	movw	r30, r18
    5916:	3c 96       	adiw	r30, 0x0c	; 12
    5918:	85 91       	lpm	r24, Z+
    591a:	95 91       	lpm	r25, Z+
    591c:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    5920:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    5924:	b8 dc       	rcall	.-1680   	; 0x5296 <menuClearExtraDisp>
    5926:	31 db       	rcall	.-2462   	; 0x4f8a <menuParentMenuToLCD>
    5928:	f4 dd       	rcall	.-1048   	; 0x5512 <menuCurrMenuToLCD>
    592a:	24 de       	rcall	.-952    	; 0x5574 <menuItemChanged>
    592c:	80 e0       	ldi	r24, 0x00	; 0
    592e:	c4 c0       	rjmp	.+392    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5930:	c3 30       	cpi	r28, 0x03	; 3
    5932:	09 f4       	brne	.+2      	; 0x5936 <menu_ProcessMessage+0x2f8>
    5934:	49 c0       	rjmp	.+146    	; 0x59c8 <menu_ProcessMessage+0x38a>
    5936:	28 f4       	brcc	.+10     	; 0x5942 <menu_ProcessMessage+0x304>
    5938:	c1 30       	cpi	r28, 0x01	; 1
    593a:	59 f0       	breq	.+22     	; 0x5952 <menu_ProcessMessage+0x314>
    593c:	c2 30       	cpi	r28, 0x02	; 2
    593e:	31 f1       	breq	.+76     	; 0x598c <menu_ProcessMessage+0x34e>
    5940:	b6 c0       	rjmp	.+364    	; 0x5aae <menu_ProcessMessage+0x470>
    5942:	c5 30       	cpi	r28, 0x05	; 5
    5944:	09 f4       	brne	.+2      	; 0x5948 <menu_ProcessMessage+0x30a>
    5946:	5e c0       	rjmp	.+188    	; 0x5a04 <menu_ProcessMessage+0x3c6>
    5948:	c0 f0       	brcs	.+48     	; 0x597a <menu_ProcessMessage+0x33c>
    594a:	c6 30       	cpi	r28, 0x06	; 6
    594c:	09 f4       	brne	.+2      	; 0x5950 <menu_ProcessMessage+0x312>
    594e:	8a c0       	rjmp	.+276    	; 0x5a64 <menu_ProcessMessage+0x426>
    5950:	ae c0       	rjmp	.+348    	; 0x5aae <menu_ProcessMessage+0x470>
    5952:	48 2f       	mov	r20, r24
    5954:	50 e0       	ldi	r21, 0x00	; 0
    5956:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    595a:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    595e:	24 91       	lpm	r18, Z
    5960:	30 e0       	ldi	r19, 0x00	; 0
    5962:	21 50       	subi	r18, 0x01	; 1
    5964:	31 09       	sbc	r19, r1
    5966:	42 17       	cp	r20, r18
    5968:	53 07       	cpc	r21, r19
    596a:	0c f0       	brlt	.+2      	; 0x596e <menu_ProcessMessage+0x330>
    596c:	a2 c0       	rjmp	.+324    	; 0x5ab2 <menu_ProcessMessage+0x474>
    596e:	8f 5f       	subi	r24, 0xFF	; 255
    5970:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5974:	31 db       	rcall	.-2462   	; 0x4fd8 <menuCursorSetDataNibble>
    5976:	80 e0       	ldi	r24, 0x00	; 0
    5978:	9f c0       	rjmp	.+318    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    597a:	88 23       	and	r24, r24
    597c:	09 f4       	brne	.+2      	; 0x5980 <menu_ProcessMessage+0x342>
    597e:	9b c0       	rjmp	.+310    	; 0x5ab6 <menu_ProcessMessage+0x478>
    5980:	81 50       	subi	r24, 0x01	; 1
    5982:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5986:	28 db       	rcall	.-2480   	; 0x4fd8 <menuCursorSetDataNibble>
    5988:	80 e0       	ldi	r24, 0x00	; 0
    598a:	96 c0       	rjmp	.+300    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    598c:	61 e0       	ldi	r22, 0x01	; 1
    598e:	4e d8       	rcall	.-3940   	; 0x4a2c <nibbleChange>
    5990:	fc d9       	rcall	.-3080   	; 0x4d8a <nibbleToData>
    5992:	15 db       	rcall	.-2518   	; 0x4fbe <menuDisplayValue>
    5994:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    5998:	8a 30       	cpi	r24, 0x0A	; 10
    599a:	11 f0       	breq	.+4      	; 0x59a0 <menu_ProcessMessage+0x362>
    599c:	8e 30       	cpi	r24, 0x0E	; 14
    599e:	89 f4       	brne	.+34     	; 0x59c2 <menu_ProcessMessage+0x384>
    59a0:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    59a4:	42 2f       	mov	r20, r18
    59a6:	50 e0       	ldi	r21, 0x00	; 0
    59a8:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    59ac:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    59b0:	84 91       	lpm	r24, Z
    59b2:	90 e0       	ldi	r25, 0x00	; 0
    59b4:	01 97       	sbiw	r24, 0x01	; 1
    59b6:	48 17       	cp	r20, r24
    59b8:	59 07       	cpc	r21, r25
    59ba:	1c f4       	brge	.+6      	; 0x59c2 <menu_ProcessMessage+0x384>
    59bc:	2f 5f       	subi	r18, 0xFF	; 255
    59be:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    59c2:	0a db       	rcall	.-2540   	; 0x4fd8 <menuCursorSetDataNibble>
    59c4:	80 e0       	ldi	r24, 0x00	; 0
    59c6:	78 c0       	rjmp	.+240    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    59c8:	6f ef       	ldi	r22, 0xFF	; 255
    59ca:	30 d8       	rcall	.-4000   	; 0x4a2c <nibbleChange>
    59cc:	de d9       	rcall	.-3140   	; 0x4d8a <nibbleToData>
    59ce:	f7 da       	rcall	.-2578   	; 0x4fbe <menuDisplayValue>
    59d0:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    59d4:	8a 30       	cpi	r24, 0x0A	; 10
    59d6:	11 f0       	breq	.+4      	; 0x59dc <menu_ProcessMessage+0x39e>
    59d8:	8e 30       	cpi	r24, 0x0E	; 14
    59da:	89 f4       	brne	.+34     	; 0x59fe <menu_ProcessMessage+0x3c0>
    59dc:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    59e0:	42 2f       	mov	r20, r18
    59e2:	50 e0       	ldi	r21, 0x00	; 0
    59e4:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    59e8:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    59ec:	84 91       	lpm	r24, Z
    59ee:	90 e0       	ldi	r25, 0x00	; 0
    59f0:	01 97       	sbiw	r24, 0x01	; 1
    59f2:	48 17       	cp	r20, r24
    59f4:	59 07       	cpc	r21, r25
    59f6:	1c f4       	brge	.+6      	; 0x59fe <menu_ProcessMessage+0x3c0>
    59f8:	2f 5f       	subi	r18, 0xFF	; 255
    59fa:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    59fe:	ec da       	rcall	.-2600   	; 0x4fd8 <menuCursorSetDataNibble>
    5a00:	80 e0       	ldi	r24, 0x00	; 0
    5a02:	5a c0       	rjmp	.+180    	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5a04:	c2 d9       	rcall	.-3196   	; 0x4d8a <nibbleToData>
    5a06:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    5a0a:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5a0e:	c9 01       	movw	r24, r18
    5a10:	0e 96       	adiw	r24, 0x0e	; 14
    5a12:	fc 01       	movw	r30, r24
    5a14:	a5 91       	lpm	r26, Z+
    5a16:	b5 91       	lpm	r27, Z+
    5a18:	10 97       	sbiw	r26, 0x00	; 0
    5a1a:	21 f1       	breq	.+72     	; 0x5a64 <menu_ProcessMessage+0x426>
    5a1c:	0d 97       	sbiw	r24, 0x0d	; 13
    5a1e:	fc 01       	movw	r30, r24
    5a20:	84 91       	lpm	r24, Z
    5a22:	88 23       	and	r24, r24
    5a24:	2c f4       	brge	.+10     	; 0x5a30 <menu_ProcessMessage+0x3f2>
    5a26:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <DataAdressOffset>
    5a2a:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <DataAdressOffset+0x1>
    5a2e:	02 c0       	rjmp	.+4      	; 0x5a34 <menu_ProcessMessage+0x3f6>
    5a30:	80 e0       	ldi	r24, 0x00	; 0
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	a8 0f       	add	r26, r24
    5a36:	b9 1f       	adc	r27, r25
    5a38:	f9 01       	movw	r30, r18
    5a3a:	84 91       	lpm	r24, Z
    5a3c:	8f 73       	andi	r24, 0x3F	; 63
    5a3e:	8b 30       	cpi	r24, 0x0B	; 11
    5a40:	71 f4       	brne	.+28     	; 0x5a5e <menu_ProcessMessage+0x420>
    5a42:	40 91 c8 05 	lds	r20, 0x05C8	; 0x8005c8 <dataEntry32>
    5a46:	50 91 c9 05 	lds	r21, 0x05C9	; 0x8005c9 <dataEntry32+0x1>
    5a4a:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <dataEntry32+0x2>
    5a4e:	70 91 cb 05 	lds	r23, 0x05CB	; 0x8005cb <dataEntry32+0x3>
    5a52:	4d 93       	st	X+, r20
    5a54:	5d 93       	st	X+, r21
    5a56:	6d 93       	st	X+, r22
    5a58:	7c 93       	st	X, r23
    5a5a:	13 97       	sbiw	r26, 0x03	; 3
    5a5c:	03 c0       	rjmp	.+6      	; 0x5a64 <menu_ProcessMessage+0x426>
    5a5e:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    5a62:	8c 93       	st	X, r24
    5a64:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5a68:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5a6c:	72 96       	adiw	r30, 0x12	; 18
    5a6e:	05 90       	lpm	r0, Z+
    5a70:	f4 91       	lpm	r31, Z
    5a72:	e0 2d       	mov	r30, r0
    5a74:	30 97       	sbiw	r30, 0x00	; 0
    5a76:	11 f0       	breq	.+4      	; 0x5a7c <menu_ProcessMessage+0x43e>
    5a78:	8c 2f       	mov	r24, r28
    5a7a:	19 95       	eicall
    5a7c:	8f ef       	ldi	r24, 0xFF	; 255
    5a7e:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5a82:	47 dd       	rcall	.-1394   	; 0x5512 <menuCurrMenuToLCD>
    5a84:	77 dd       	rcall	.-1298   	; 0x5574 <menuItemChanged>
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	17 c0       	rjmp	.+46     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	15 c0       	rjmp	.+42     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	13 c0       	rjmp	.+38     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5a92:	80 e0       	ldi	r24, 0x00	; 0
    5a94:	11 c0       	rjmp	.+34     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5a96:	80 e0       	ldi	r24, 0x00	; 0
    5a98:	0f c0       	rjmp	.+30     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5a9a:	80 e0       	ldi	r24, 0x00	; 0
    5a9c:	0d c0       	rjmp	.+26     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5a9e:	80 e0       	ldi	r24, 0x00	; 0
    5aa0:	0b c0       	rjmp	.+22     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5aa2:	80 e0       	ldi	r24, 0x00	; 0
    5aa4:	09 c0       	rjmp	.+18     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	07 c0       	rjmp	.+14     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
    5aac:	05 c0       	rjmp	.+10     	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5aae:	80 e0       	ldi	r24, 0x00	; 0
    5ab0:	03 c0       	rjmp	.+6      	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5ab2:	80 e0       	ldi	r24, 0x00	; 0
    5ab4:	01 c0       	rjmp	.+2      	; 0x5ab8 <menu_ProcessMessage+0x47a>
    5ab6:	80 e0       	ldi	r24, 0x00	; 0
    5ab8:	cf 91       	pop	r28
    5aba:	08 95       	ret

00005abc <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5abc:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5abe:	34 e0       	ldi	r19, 0x04	; 4
    5ac0:	80 3b       	cpi	r24, 0xB0	; 176
    5ac2:	93 07       	cpc	r25, r19
    5ac4:	49 f0       	breq	.+18     	; 0x5ad8 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5ac6:	34 e0       	ldi	r19, 0x04	; 4
    5ac8:	80 3b       	cpi	r24, 0xB0	; 176
    5aca:	93 07       	cpc	r25, r19
    5acc:	38 f0       	brcs	.+14     	; 0x5adc <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5ace:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5ad0:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5ad2:	a9 f7       	brne	.-22     	; 0x5abe <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5ad4:	80 e0       	ldi	r24, 0x00	; 0
    5ad6:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5ad8:	82 2f       	mov	r24, r18
    5ada:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5adc:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5ade:	08 95       	ret

00005ae0 <init_SoftKeys>:

void init_SoftKeys(){
    5ae0:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5ae2:	0e 94 48 0c 	call	0x1890	; 0x1890 <eeprom_ReadSoftkeys>
    5ae6:	8f 3f       	cpi	r24, 0xFF	; 255
    5ae8:	c9 f4       	brne	.+50     	; 0x5b1c <init_SoftKeys+0x3c>
    5aea:	0f c0       	rjmp	.+30     	; 0x5b0a <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5aec:	82 2f       	mov	r24, r18
    5aee:	90 e0       	ldi	r25, 0x00	; 0
    5af0:	fc 01       	movw	r30, r24
    5af2:	e7 52       	subi	r30, 0x27	; 39
    5af4:	fa 4f       	sbci	r31, 0xFA	; 250
    5af6:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5af8:	88 0f       	add	r24, r24
    5afa:	99 1f       	adc	r25, r25
    5afc:	fc 01       	movw	r30, r24
    5afe:	e0 52       	subi	r30, 0x20	; 32
    5b00:	fa 4f       	sbci	r31, 0xFA	; 250
    5b02:	11 82       	std	Z+1, r1	; 0x01
    5b04:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5b06:	2f 5f       	subi	r18, 0xFF	; 255
    5b08:	01 c0       	rjmp	.+2      	; 0x5b0c <init_SoftKeys+0x2c>
    5b0a:	20 e0       	ldi	r18, 0x00	; 0
    5b0c:	24 30       	cpi	r18, 0x04	; 4
    5b0e:	70 f3       	brcs	.-36     	; 0x5aec <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    5b10:	40 e0       	ldi	r20, 0x00	; 0
    5b12:	50 e0       	ldi	r21, 0x00	; 0
    5b14:	67 e0       	ldi	r22, 0x07	; 7
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <log_putError>
    5b1c:	c0 e0       	ldi	r28, 0x00	; 0
    5b1e:	25 c0       	rjmp	.+74     	; 0x5b6a <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    5b20:	4c 2f       	mov	r20, r28
    5b22:	50 e0       	ldi	r21, 0x00	; 0
    5b24:	fa 01       	movw	r30, r20
    5b26:	e7 52       	subi	r30, 0x27	; 39
    5b28:	fa 4f       	sbci	r31, 0xFA	; 250
    5b2a:	80 81       	ld	r24, Z
    5b2c:	8d 31       	cpi	r24, 0x1D	; 29
    5b2e:	70 f4       	brcc	.+28     	; 0x5b4c <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    5b30:	24 e1       	ldi	r18, 0x14	; 20
    5b32:	82 9f       	mul	r24, r18
    5b34:	c0 01       	movw	r24, r0
    5b36:	11 24       	eor	r1, r1
    5b38:	80 55       	subi	r24, 0x50	; 80
    5b3a:	9b 4f       	sbci	r25, 0xFB	; 251
    5b3c:	44 0f       	add	r20, r20
    5b3e:	55 1f       	adc	r21, r21
    5b40:	fa 01       	movw	r30, r20
    5b42:	e0 52       	subi	r30, 0x20	; 32
    5b44:	fa 4f       	sbci	r31, 0xFA	; 250
    5b46:	91 83       	std	Z+1, r25	; 0x01
    5b48:	80 83       	st	Z, r24
    5b4a:	0e c0       	rjmp	.+28     	; 0x5b68 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    5b4c:	fa 01       	movw	r30, r20
    5b4e:	ee 0f       	add	r30, r30
    5b50:	ff 1f       	adc	r31, r31
    5b52:	e0 52       	subi	r30, 0x20	; 32
    5b54:	fa 4f       	sbci	r31, 0xFA	; 250
    5b56:	11 82       	std	Z+1, r1	; 0x01
    5b58:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5b5a:	4f 5f       	subi	r20, 0xFF	; 255
    5b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b5e:	40 61       	ori	r20, 0x10	; 16
    5b60:	67 e0       	ldi	r22, 0x07	; 7
    5b62:	81 e0       	ldi	r24, 0x01	; 1
    5b64:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5b68:	cf 5f       	subi	r28, 0xFF	; 255
    5b6a:	c4 30       	cpi	r28, 0x04	; 4
    5b6c:	c8 f2       	brcs	.-78     	; 0x5b20 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5b6e:	cf 91       	pop	r28
    5b70:	08 95       	ret

00005b72 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5b72:	cf 93       	push	r28
    5b74:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5b76:	64 30       	cpi	r22, 0x04	; 4
    5b78:	28 f5       	brcc	.+74     	; 0x5bc4 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5b7a:	00 97       	sbiw	r24, 0x00	; 0
    5b7c:	b9 f0       	breq	.+46     	; 0x5bac <softKey_Set+0x3a>
    5b7e:	fc 01       	movw	r30, r24
    5b80:	24 91       	lpm	r18, Z
    5b82:	2f 73       	andi	r18, 0x3F	; 63
    5b84:	21 30       	cpi	r18, 0x01	; 1
    5b86:	91 f4       	brne	.+36     	; 0x5bac <softKey_Set+0x3a>
    5b88:	31 96       	adiw	r30, 0x01	; 1
    5b8a:	24 91       	lpm	r18, Z
    5b8c:	24 ff       	sbrs	r18, 4
    5b8e:	0e c0       	rjmp	.+28     	; 0x5bac <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5b90:	c6 2f       	mov	r28, r22
    5b92:	d0 e0       	ldi	r29, 0x00	; 0
    5b94:	fe 01       	movw	r30, r28
    5b96:	ee 0f       	add	r30, r30
    5b98:	ff 1f       	adc	r31, r31
    5b9a:	e0 52       	subi	r30, 0x20	; 32
    5b9c:	fa 4f       	sbci	r31, 0xFA	; 250
    5b9e:	91 83       	std	Z+1, r25	; 0x01
    5ba0:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5ba2:	8c df       	rcall	.-232    	; 0x5abc <getSoftKeyIndex>
    5ba4:	c7 52       	subi	r28, 0x27	; 39
    5ba6:	da 4f       	sbci	r29, 0xFA	; 250
    5ba8:	88 83       	st	Y, r24
    5baa:	0c c0       	rjmp	.+24     	; 0x5bc4 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5bac:	70 e0       	ldi	r23, 0x00	; 0
    5bae:	fb 01       	movw	r30, r22
    5bb0:	ee 0f       	add	r30, r30
    5bb2:	ff 1f       	adc	r31, r31
    5bb4:	e0 52       	subi	r30, 0x20	; 32
    5bb6:	fa 4f       	sbci	r31, 0xFA	; 250
    5bb8:	11 82       	std	Z+1, r1	; 0x01
    5bba:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5bbc:	fb 01       	movw	r30, r22
    5bbe:	e7 52       	subi	r30, 0x27	; 39
    5bc0:	fa 4f       	sbci	r31, 0xFA	; 250
    5bc2:	10 82       	st	Z, r1
		}
	}
}
    5bc4:	df 91       	pop	r29
    5bc6:	cf 91       	pop	r28
    5bc8:	08 95       	ret

00005bca <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5bca:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5bce:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5bd2:	3e 96       	adiw	r30, 0x0e	; 14
    5bd4:	65 91       	lpm	r22, Z+
    5bd6:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5bd8:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <menuVMenuSoftKey>
    5bdc:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5be0:	c8 df       	rcall	.-112    	; 0x5b72 <softKey_Set>
	eeprom_UpdateSoftkeys();
    5be2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <eeprom_UpdateSoftkeys>
	return 0;
}
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	08 95       	ret

00005bea <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5bea:	0f 93       	push	r16
    5bec:	1f 93       	push	r17
    5bee:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5bf0:	c0 e0       	ldi	r28, 0x00	; 0
    5bf2:	32 c0       	rjmp	.+100    	; 0x5c58 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5bf4:	0c 2f       	mov	r16, r28
    5bf6:	10 e0       	ldi	r17, 0x00	; 0
    5bf8:	f8 01       	movw	r30, r16
    5bfa:	ee 0f       	add	r30, r30
    5bfc:	ff 1f       	adc	r31, r31
    5bfe:	e0 52       	subi	r30, 0x20	; 32
    5c00:	fa 4f       	sbci	r31, 0xFA	; 250
    5c02:	01 90       	ld	r0, Z+
    5c04:	f0 81       	ld	r31, Z
    5c06:	e0 2d       	mov	r30, r0
    5c08:	30 97       	sbiw	r30, 0x00	; 0
    5c0a:	31 f0       	breq	.+12     	; 0x5c18 <softKeys_toLCD+0x2e>
    5c0c:	3e 96       	adiw	r30, 0x0e	; 14
    5c0e:	65 91       	lpm	r22, Z+
    5c10:	75 91       	lpm	r23, Z+
    5c12:	61 15       	cp	r22, r1
    5c14:	71 05       	cpc	r23, r1
    5c16:	21 f4       	brne	.+8      	; 0x5c20 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5c18:	8c 2f       	mov	r24, r28
    5c1a:	0e 94 78 3e 	call	0x7cf0	; 0x7cf0 <keylabel_clr>
    5c1e:	1b c0       	rjmp	.+54     	; 0x5c56 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    5c20:	8c 2f       	mov	r24, r28
    5c22:	0e 94 3d 3e 	call	0x7c7a	; 0x7c7a <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    5c26:	00 0f       	add	r16, r16
    5c28:	11 1f       	adc	r17, r17
    5c2a:	f8 01       	movw	r30, r16
    5c2c:	e0 52       	subi	r30, 0x20	; 32
    5c2e:	fa 4f       	sbci	r31, 0xFA	; 250
    5c30:	01 90       	ld	r0, Z+
    5c32:	f0 81       	ld	r31, Z
    5c34:	e0 2d       	mov	r30, r0
    5c36:	70 96       	adiw	r30, 0x10	; 16
    5c38:	05 90       	lpm	r0, Z+
    5c3a:	f4 91       	lpm	r31, Z
    5c3c:	e0 2d       	mov	r30, r0
    5c3e:	30 97       	sbiw	r30, 0x00	; 0
    5c40:	51 f0       	breq	.+20     	; 0x5c56 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    5c42:	80 e0       	ldi	r24, 0x00	; 0
    5c44:	19 95       	eicall
    5c46:	81 38       	cpi	r24, 0x81	; 129
    5c48:	11 f4       	brne	.+4      	; 0x5c4e <softKeys_toLCD+0x64>
    5c4a:	6f ef       	ldi	r22, 0xFF	; 255
    5c4c:	01 c0       	rjmp	.+2      	; 0x5c50 <softKeys_toLCD+0x66>
    5c4e:	60 e0       	ldi	r22, 0x00	; 0
    5c50:	8c 2f       	mov	r24, r28
    5c52:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5c56:	cf 5f       	subi	r28, 0xFF	; 255
    5c58:	c4 30       	cpi	r28, 0x04	; 4
    5c5a:	60 f2       	brcs	.-104    	; 0x5bf4 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5c5c:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
}
    5c60:	cf 91       	pop	r28
    5c62:	1f 91       	pop	r17
    5c64:	0f 91       	pop	r16
    5c66:	08 95       	ret

00005c68 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    5c68:	82 30       	cpi	r24, 0x02	; 2
    5c6a:	49 f0       	breq	.+18     	; 0x5c7e <softKey_MessageKey_ToSoftKeyNr+0x16>
    5c6c:	18 f4       	brcc	.+6      	; 0x5c74 <softKey_MessageKey_ToSoftKeyNr+0xc>
    5c6e:	81 30       	cpi	r24, 0x01	; 1
    5c70:	51 f0       	breq	.+20     	; 0x5c86 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5c72:	0b c0       	rjmp	.+22     	; 0x5c8a <softKey_MessageKey_ToSoftKeyNr+0x22>
    5c74:	83 30       	cpi	r24, 0x03	; 3
    5c76:	59 f0       	breq	.+22     	; 0x5c8e <softKey_MessageKey_ToSoftKeyNr+0x26>
    5c78:	84 30       	cpi	r24, 0x04	; 4
    5c7a:	19 f0       	breq	.+6      	; 0x5c82 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5c7c:	06 c0       	rjmp	.+12     	; 0x5c8a <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5c7e:	80 e0       	ldi	r24, 0x00	; 0
    5c80:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5c82:	82 e0       	ldi	r24, 0x02	; 2
    5c84:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5c86:	83 e0       	ldi	r24, 0x03	; 3
    5c88:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5c8a:	8f ef       	ldi	r24, 0xFF	; 255
    5c8c:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5c90:	08 95       	ret

00005c92 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5c92:	0f 93       	push	r16
    5c94:	1f 93       	push	r17
    5c96:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5c98:	84 30       	cpi	r24, 0x04	; 4
    5c9a:	d0 f5       	brcc	.+116    	; 0x5d10 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5c9c:	e8 2f       	mov	r30, r24
    5c9e:	f0 e0       	ldi	r31, 0x00	; 0
    5ca0:	ee 0f       	add	r30, r30
    5ca2:	ff 1f       	adc	r31, r31
    5ca4:	e0 52       	subi	r30, 0x20	; 32
    5ca6:	fa 4f       	sbci	r31, 0xFA	; 250
    5ca8:	00 81       	ld	r16, Z
    5caa:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5cac:	01 15       	cp	r16, r1
    5cae:	11 05       	cpc	r17, r1
    5cb0:	89 f1       	breq	.+98     	; 0x5d14 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5cb2:	f8 01       	movw	r30, r16
    5cb4:	94 91       	lpm	r25, Z
    5cb6:	9f 73       	andi	r25, 0x3F	; 63
    5cb8:	91 30       	cpi	r25, 0x01	; 1
    5cba:	71 f5       	brne	.+92     	; 0x5d18 <softKey_Execute+0x86>
    5cbc:	31 96       	adiw	r30, 0x01	; 1
    5cbe:	94 91       	lpm	r25, Z
    5cc0:	94 ff       	sbrs	r25, 4
    5cc2:	2c c0       	rjmp	.+88     	; 0x5d1c <softKey_Execute+0x8a>
    5cc4:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5cc6:	3f 96       	adiw	r30, 0x0f	; 15
    5cc8:	05 90       	lpm	r0, Z+
    5cca:	f4 91       	lpm	r31, Z
    5ccc:	e0 2d       	mov	r30, r0
    5cce:	30 97       	sbiw	r30, 0x00	; 0
    5cd0:	89 f0       	breq	.+34     	; 0x5cf4 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5cd2:	86 2f       	mov	r24, r22
    5cd4:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5cd6:	82 38       	cpi	r24, 0x82	; 130
    5cd8:	29 f4       	brne	.+10     	; 0x5ce4 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5cda:	60 e0       	ldi	r22, 0x00	; 0
    5cdc:	8c 2f       	mov	r24, r28
    5cde:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <keylabel_statcheck>
    5ce2:	06 c0       	rjmp	.+12     	; 0x5cf0 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5ce4:	81 38       	cpi	r24, 0x81	; 129
    5ce6:	21 f4       	brne	.+8      	; 0x5cf0 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5ce8:	6f ef       	ldi	r22, 0xFF	; 255
    5cea:	8c 2f       	mov	r24, r28
    5cec:	0e 94 ab 3e 	call	0x7d56	; 0x7d56 <keylabel_statcheck>
					}
					keylabel_toLCD();
    5cf0:	0e 94 8c 3e 	call	0x7d18	; 0x7d18 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5cf4:	f8 01       	movw	r30, r16
    5cf6:	3c 96       	adiw	r30, 0x0c	; 12
    5cf8:	85 91       	lpm	r24, Z+
    5cfa:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5cfc:	00 97       	sbiw	r24, 0x00	; 0
    5cfe:	81 f0       	breq	.+32     	; 0x5d20 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5d00:	b8 01       	movw	r22, r16
    5d02:	6e 5f       	subi	r22, 0xFE	; 254
    5d04:	7f 4f       	sbci	r23, 0xFF	; 255
    5d06:	0e 94 46 22 	call	0x448c	; 0x448c <menu_Init>
					menu_InitLCD(); //display menu
    5d0a:	92 dc       	rcall	.-1756   	; 0x5630 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5d0c:	80 e0       	ldi	r24, 0x00	; 0
    5d0e:	09 c0       	rjmp	.+18     	; 0x5d22 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5d10:	8f ef       	ldi	r24, 0xFF	; 255
    5d12:	07 c0       	rjmp	.+14     	; 0x5d22 <softKey_Execute+0x90>
    5d14:	8f ef       	ldi	r24, 0xFF	; 255
    5d16:	05 c0       	rjmp	.+10     	; 0x5d22 <softKey_Execute+0x90>
    5d18:	8f ef       	ldi	r24, 0xFF	; 255
    5d1a:	03 c0       	rjmp	.+6      	; 0x5d22 <softKey_Execute+0x90>
    5d1c:	8f ef       	ldi	r24, 0xFF	; 255
    5d1e:	01 c0       	rjmp	.+2      	; 0x5d22 <softKey_Execute+0x90>
    5d20:	8f ef       	ldi	r24, 0xFF	; 255
}
    5d22:	cf 91       	pop	r28
    5d24:	1f 91       	pop	r17
    5d26:	0f 91       	pop	r16
    5d28:	08 95       	ret

00005d2a <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5d2a:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5d2c:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    5d30:	8c e0       	ldi	r24, 0x0C	; 12
    5d32:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5d36:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    5d3a:	84 ff       	sbrs	r24, 4
    5d3c:	02 c0       	rjmp	.+4      	; 0x5d42 <menu_showPowerState+0x18>
    5d3e:	80 e2       	ldi	r24, 0x20	; 32
    5d40:	01 c0       	rjmp	.+2      	; 0x5d44 <menu_showPowerState+0x1a>
    5d42:	89 e0       	ldi	r24, 0x09	; 9
    5d44:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
	lcd_goto(saveCursor);
    5d48:	8c 2f       	mov	r24, r28
    5d4a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>

    5d4e:	cf 91       	pop	r28
    5d50:	08 95       	ret

00005d52 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    5d52:	85 b1       	in	r24, 0x05	; 5
    5d54:	80 64       	ori	r24, 0x40	; 64
    5d56:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5d58:	83 e1       	ldi	r24, 0x13	; 19
    5d5a:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5d5e:	e5 df       	rcall	.-54     	; 0x5d2a <menu_showPowerState>
	return 0;
}
    5d60:	80 e0       	ldi	r24, 0x00	; 0
    5d62:	08 95       	ret

00005d64 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    5d64:	85 b1       	in	r24, 0x05	; 5
    5d66:	8f 7b       	andi	r24, 0xBF	; 191
    5d68:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5d6a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5d6e:	dd df       	rcall	.-70     	; 0x5d2a <menu_showPowerState>
	return 0;
}
    5d70:	80 e0       	ldi	r24, 0x00	; 0
    5d72:	08 95       	ret

00005d74 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    5d74:	85 b1       	in	r24, 0x05	; 5
    5d76:	8f 7b       	andi	r24, 0xBF	; 191
    5d78:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5d7a:	81 e0       	ldi	r24, 0x01	; 1
    5d7c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5d80:	d4 df       	rcall	.-88     	; 0x5d2a <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5d82:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d84:	f8 94       	cli
    5d86:	81 e0       	ldi	r24, 0x01	; 1
    5d88:	06 c0       	rjmp	.+12     	; 0x5d96 <menuOnEnterPwrRest+0x22>
    5d8a:	e0 e5       	ldi	r30, 0x50	; 80
    5d8c:	f2 e0       	ldi	r31, 0x02	; 2
    5d8e:	88 e2       	ldi	r24, 0x28	; 40
    5d90:	82 83       	std	Z+2, r24	; 0x02
    5d92:	13 82       	std	Z+3, r1	; 0x03
    5d94:	80 e0       	ldi	r24, 0x00	; 0
    5d96:	81 11       	cpse	r24, r1
    5d98:	f8 cf       	rjmp	.-16     	; 0x5d8a <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5d9a:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5d9c:	08 95       	ret

00005d9e <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5d9e:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <msgInIndex>
    5da2:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <msgOutIndex>
    5da6:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <msgOverflow>
    5daa:	08 95       	ret

00005dac <message_push>:
    5dac:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <msgInIndex>
    5db0:	e9 2f       	mov	r30, r25
    5db2:	f0 e0       	ldi	r31, 0x00	; 0
    5db4:	e7 50       	subi	r30, 0x07	; 7
    5db6:	f8 4f       	sbci	r31, 0xF8	; 248
    5db8:	80 83       	st	Z, r24
    5dba:	9f 5f       	subi	r25, 0xFF	; 255
    5dbc:	9f 71       	andi	r25, 0x1F	; 31
    5dbe:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <msgOutIndex>
    5dc2:	98 13       	cpse	r25, r24
    5dc4:	04 c0       	rjmp	.+8      	; 0x5dce <message_push+0x22>
    5dc6:	8f ef       	ldi	r24, 0xFF	; 255
    5dc8:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <msgOverflow>
    5dcc:	08 95       	ret
    5dce:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <msgInIndex>
    5dd2:	08 95       	ret

00005dd4 <message_get>:
    5dd4:	4f b7       	in	r20, 0x3f	; 63
    5dd6:	f8 94       	cli
    5dd8:	21 e0       	ldi	r18, 0x01	; 1
    5dda:	11 c0       	rjmp	.+34     	; 0x5dfe <message_get+0x2a>
    5ddc:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <msgOutIndex>
    5de0:	30 91 f8 07 	lds	r19, 0x07F8	; 0x8007f8 <msgInIndex>
    5de4:	8f ef       	ldi	r24, 0xFF	; 255
    5de6:	20 e0       	ldi	r18, 0x00	; 0
    5de8:	93 17       	cp	r25, r19
    5dea:	49 f0       	breq	.+18     	; 0x5dfe <message_get+0x2a>
    5dec:	e9 2f       	mov	r30, r25
    5dee:	f0 e0       	ldi	r31, 0x00	; 0
    5df0:	e7 50       	subi	r30, 0x07	; 7
    5df2:	f8 4f       	sbci	r31, 0xF8	; 248
    5df4:	80 81       	ld	r24, Z
    5df6:	9f 5f       	subi	r25, 0xFF	; 255
    5df8:	9f 71       	andi	r25, 0x1F	; 31
    5dfa:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <msgOutIndex>
    5dfe:	21 11       	cpse	r18, r1
    5e00:	ed cf       	rjmp	.-38     	; 0x5ddc <message_get+0x8>
    5e02:	4f bf       	out	0x3f, r20	; 63
    5e04:	08 95       	ret

00005e06 <message_status>:
    5e06:	4f b7       	in	r20, 0x3f	; 63
    5e08:	f8 94       	cli
    5e0a:	91 e0       	ldi	r25, 0x01	; 1
    5e0c:	08 c0       	rjmp	.+16     	; 0x5e1e <message_status+0x18>
    5e0e:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <msgOutIndex>
    5e12:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <msgInIndex>
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	80 e0       	ldi	r24, 0x00	; 0
    5e1a:	32 17       	cp	r19, r18
    5e1c:	11 f0       	breq	.+4      	; 0x5e22 <message_status+0x1c>
    5e1e:	8f ef       	ldi	r24, 0xFF	; 255
    5e20:	01 c0       	rjmp	.+2      	; 0x5e24 <message_status+0x1e>
    5e22:	90 e0       	ldi	r25, 0x00	; 0
    5e24:	91 11       	cpse	r25, r1
    5e26:	f3 cf       	rjmp	.-26     	; 0x5e0e <message_status+0x8>
    5e28:	4f bf       	out	0x3f, r20	; 63
    5e2a:	08 95       	ret

00005e2c <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5e2c:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5e2e:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <msgPipe_Handling>
    5e32:	99 23       	and	r25, r25
    5e34:	e1 f0       	breq	.+56     	; 0x5e6e <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5e36:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5e3a:	21 e0       	ldi	r18, 0x01	; 1
    5e3c:	29 0f       	add	r18, r25
    5e3e:	20 93 f6 07 	sts	0x07F6, r18	; 0x8007f6 <pipeMsgInIndex>
    5e42:	e9 2f       	mov	r30, r25
    5e44:	f0 e0       	ldi	r31, 0x00	; 0
    5e46:	ee 0f       	add	r30, r30
    5e48:	ff 1f       	adc	r31, r31
    5e4a:	ea 50       	subi	r30, 0x0A	; 10
    5e4c:	fa 4f       	sbci	r31, 0xFA	; 250
    5e4e:	51 83       	std	Z+1, r21	; 0x01
    5e50:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5e52:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5e56:	28 13       	cpse	r18, r24
    5e58:	0a c0       	rjmp	.+20     	; 0x5e6e <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5e5a:	90 93 f6 07 	sts	0x07F6, r25	; 0x8007f6 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5e5e:	9f 3f       	cpi	r25, 0xFF	; 255
    5e60:	19 f4       	brne	.+6      	; 0x5e68 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5e62:	8f ef       	ldi	r24, 0xFF	; 255
    5e64:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5e68:	8f ef       	ldi	r24, 0xFF	; 255
    5e6a:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <msgPipeOverflow>
    5e6e:	08 95       	ret

00005e70 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5e70:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5e74:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5e78:	e8 13       	cpse	r30, r24
    5e7a:	03 c0       	rjmp	.+6      	; 0x5e82 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5e7c:	8f ef       	ldi	r24, 0xFF	; 255
    5e7e:	9f ef       	ldi	r25, 0xFF	; 255
    5e80:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	8e 0f       	add	r24, r30
    5e86:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <pipeMsgOutIndex>
    5e8a:	f0 e0       	ldi	r31, 0x00	; 0
    5e8c:	ee 0f       	add	r30, r30
    5e8e:	ff 1f       	adc	r31, r31
    5e90:	ea 50       	subi	r30, 0x0A	; 10
    5e92:	fa 4f       	sbci	r31, 0xFA	; 250
    5e94:	80 81       	ld	r24, Z
    5e96:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5e98:	08 95       	ret

00005e9a <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5e9a:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5e9e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5ea2:	98 13       	cpse	r25, r24
    5ea4:	02 c0       	rjmp	.+4      	; 0x5eaa <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5ea6:	80 e0       	ldi	r24, 0x00	; 0
    5ea8:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5eaa:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5eac:	08 95       	ret

00005eae <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5eae:	80 e0       	ldi	r24, 0x00	; 0
    5eb0:	e7 e3       	ldi	r30, 0x37	; 55
    5eb2:	f8 e0       	ldi	r31, 0x08	; 8
    5eb4:	03 c0       	rjmp	.+6      	; 0x5ebc <midi_CouplerReset+0xe>
    5eb6:	10 82       	st	Z, r1
    5eb8:	8f 5f       	subi	r24, 0xFF	; 255
    5eba:	31 96       	adiw	r30, 0x01	; 1
    5ebc:	8c 30       	cpi	r24, 0x0C	; 12
    5ebe:	d8 f3       	brcs	.-10     	; 0x5eb6 <midi_CouplerReset+0x8>
    5ec0:	08 95       	ret

00005ec2 <init_Midi>:
    5ec2:	f5 df       	rcall	.-22     	; 0x5eae <midi_CouplerReset>
    5ec4:	8f ef       	ldi	r24, 0xFF	; 255
    5ec6:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    5eca:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <prog_UpdDisplay>
    5ece:	08 95       	ret

00005ed0 <set_Coupler>:
    5ed0:	8c 30       	cpi	r24, 0x0C	; 12
    5ed2:	e8 f4       	brcc	.+58     	; 0x5f0e <set_Coupler+0x3e>
    5ed4:	e8 2f       	mov	r30, r24
    5ed6:	f0 e0       	ldi	r31, 0x00	; 0
    5ed8:	e9 5c       	subi	r30, 0xC9	; 201
    5eda:	f7 4f       	sbci	r31, 0xF7	; 247
    5edc:	9f ef       	ldi	r25, 0xFF	; 255
    5ede:	90 83       	st	Z, r25
    5ee0:	86 30       	cpi	r24, 0x06	; 6
    5ee2:	10 f0       	brcs	.+4      	; 0x5ee8 <set_Coupler+0x18>
    5ee4:	86 50       	subi	r24, 0x06	; 6
    5ee6:	01 c0       	rjmp	.+2      	; 0x5eea <set_Coupler+0x1a>
    5ee8:	8a 5f       	subi	r24, 0xFA	; 250
    5eea:	e8 2f       	mov	r30, r24
    5eec:	f0 e0       	ldi	r31, 0x00	; 0
    5eee:	df 01       	movw	r26, r30
    5ef0:	a9 5c       	subi	r26, 0xC9	; 201
    5ef2:	b7 4f       	sbci	r27, 0xF7	; 247
    5ef4:	8c 91       	ld	r24, X
    5ef6:	88 23       	and	r24, r24
    5ef8:	59 f0       	breq	.+22     	; 0x5f10 <set_Coupler+0x40>
    5efa:	df 01       	movw	r26, r30
    5efc:	a9 5c       	subi	r26, 0xC9	; 201
    5efe:	b7 4f       	sbci	r27, 0xF7	; 247
    5f00:	1c 92       	st	X, r1
    5f02:	ee 0f       	add	r30, r30
    5f04:	ff 1f       	adc	r31, r31
    5f06:	e8 51       	subi	r30, 0x18	; 24
    5f08:	fc 4e       	sbci	r31, 0xEC	; 236
    5f0a:	84 91       	lpm	r24, Z
    5f0c:	08 95       	ret
    5f0e:	80 e0       	ldi	r24, 0x00	; 0
    5f10:	08 95       	ret

00005f12 <getAllCouplers>:
    5f12:	80 e0       	ldi	r24, 0x00	; 0
    5f14:	90 e0       	ldi	r25, 0x00	; 0
    5f16:	4b e0       	ldi	r20, 0x0B	; 11
    5f18:	01 c0       	rjmp	.+2      	; 0x5f1c <getAllCouplers+0xa>
    5f1a:	42 2f       	mov	r20, r18
    5f1c:	28 2f       	mov	r18, r24
    5f1e:	39 2f       	mov	r19, r25
    5f20:	22 0f       	add	r18, r18
    5f22:	33 1f       	adc	r19, r19
    5f24:	82 2f       	mov	r24, r18
    5f26:	93 2f       	mov	r25, r19
    5f28:	e4 2f       	mov	r30, r20
    5f2a:	f0 e0       	ldi	r31, 0x00	; 0
    5f2c:	e9 5c       	subi	r30, 0xC9	; 201
    5f2e:	f7 4f       	sbci	r31, 0xF7	; 247
    5f30:	50 81       	ld	r21, Z
    5f32:	5f 3f       	cpi	r21, 0xFF	; 255
    5f34:	09 f4       	brne	.+2      	; 0x5f38 <getAllCouplers+0x26>
    5f36:	81 60       	ori	r24, 0x01	; 1
    5f38:	2f ef       	ldi	r18, 0xFF	; 255
    5f3a:	24 0f       	add	r18, r20
    5f3c:	41 11       	cpse	r20, r1
    5f3e:	ed cf       	rjmp	.-38     	; 0x5f1a <getAllCouplers+0x8>
    5f40:	08 95       	ret

00005f42 <setAllCouplers>:
    5f42:	40 e0       	ldi	r20, 0x00	; 0
    5f44:	80 ff       	sbrs	r24, 0
    5f46:	07 c0       	rjmp	.+14     	; 0x5f56 <setAllCouplers+0x14>
    5f48:	e4 2f       	mov	r30, r20
    5f4a:	f0 e0       	ldi	r31, 0x00	; 0
    5f4c:	e9 5c       	subi	r30, 0xC9	; 201
    5f4e:	f7 4f       	sbci	r31, 0xF7	; 247
    5f50:	2f ef       	ldi	r18, 0xFF	; 255
    5f52:	20 83       	st	Z, r18
    5f54:	05 c0       	rjmp	.+10     	; 0x5f60 <setAllCouplers+0x1e>
    5f56:	e4 2f       	mov	r30, r20
    5f58:	f0 e0       	ldi	r31, 0x00	; 0
    5f5a:	e9 5c       	subi	r30, 0xC9	; 201
    5f5c:	f7 4f       	sbci	r31, 0xF7	; 247
    5f5e:	10 82       	st	Z, r1
    5f60:	28 2f       	mov	r18, r24
    5f62:	39 2f       	mov	r19, r25
    5f64:	36 95       	lsr	r19
    5f66:	27 95       	ror	r18
    5f68:	82 2f       	mov	r24, r18
    5f6a:	93 2f       	mov	r25, r19
    5f6c:	4f 5f       	subi	r20, 0xFF	; 255
    5f6e:	4c 30       	cpi	r20, 0x0C	; 12
    5f70:	48 f3       	brcs	.-46     	; 0x5f44 <setAllCouplers+0x2>
    5f72:	08 95       	ret

00005f74 <midiAllReset>:
    5f74:	80 e8       	ldi	r24, 0x80	; 128
    5f76:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
    5f7a:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <init_Pipe>
    5f7e:	08 95       	ret

00005f80 <registers_CalcCount>:
    5f80:	20 e0       	ldi	r18, 0x00	; 0
    5f82:	30 e0       	ldi	r19, 0x00	; 0
    5f84:	12 c0       	rjmp	.+36     	; 0x5faa <registers_CalcCount+0x2a>
    5f86:	82 2f       	mov	r24, r18
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	fc 01       	movw	r30, r24
    5f8c:	ee 0f       	add	r30, r30
    5f8e:	ff 1f       	adc	r31, r31
    5f90:	8e 0f       	add	r24, r30
    5f92:	9f 1f       	adc	r25, r31
    5f94:	fc 01       	movw	r30, r24
    5f96:	e3 5e       	subi	r30, 0xE3	; 227
    5f98:	f7 4f       	sbci	r31, 0xF7	; 247
    5f9a:	81 81       	ldd	r24, Z+1	; 0x01
    5f9c:	8f 3f       	cpi	r24, 0xFF	; 255
    5f9e:	21 f0       	breq	.+8      	; 0x5fa8 <registers_CalcCount+0x28>
    5fa0:	83 17       	cp	r24, r19
    5fa2:	10 f0       	brcs	.+4      	; 0x5fa8 <registers_CalcCount+0x28>
    5fa4:	31 e0       	ldi	r19, 0x01	; 1
    5fa6:	38 0f       	add	r19, r24
    5fa8:	2f 5f       	subi	r18, 0xFF	; 255
    5faa:	28 30       	cpi	r18, 0x08	; 8
    5fac:	60 f3       	brcs	.-40     	; 0x5f86 <registers_CalcCount+0x6>
    5fae:	30 93 36 08 	sts	0x0836, r19	; 0x800836 <registerCount>
    5fb2:	08 95       	ret

00005fb4 <init_Registers>:
    5fb4:	8f ef       	ldi	r24, 0xFF	; 255
    5fb6:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
    5fba:	20 e0       	ldi	r18, 0x00	; 0
    5fbc:	0e c0       	rjmp	.+28     	; 0x5fda <init_Registers+0x26>
    5fbe:	82 2f       	mov	r24, r18
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	fc 01       	movw	r30, r24
    5fc4:	ee 0f       	add	r30, r30
    5fc6:	ff 1f       	adc	r31, r31
    5fc8:	e8 0f       	add	r30, r24
    5fca:	f9 1f       	adc	r31, r25
    5fcc:	e3 5e       	subi	r30, 0xE3	; 227
    5fce:	f7 4f       	sbci	r31, 0xF7	; 247
    5fd0:	8f ef       	ldi	r24, 0xFF	; 255
    5fd2:	80 83       	st	Z, r24
    5fd4:	81 83       	std	Z+1, r24	; 0x01
    5fd6:	12 82       	std	Z+2, r1	; 0x02
    5fd8:	2f 5f       	subi	r18, 0xFF	; 255
    5fda:	28 30       	cpi	r18, 0x08	; 8
    5fdc:	80 f3       	brcs	.-32     	; 0x5fbe <init_Registers+0xa>
    5fde:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_ReadReg>
    5fe2:	8f 3f       	cpi	r24, 0xFF	; 255
    5fe4:	49 f4       	brne	.+18     	; 0x5ff8 <init_Registers+0x44>
    5fe6:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <registerCount>
    5fea:	40 e0       	ldi	r20, 0x00	; 0
    5fec:	50 e0       	ldi	r21, 0x00	; 0
    5fee:	65 e0       	ldi	r22, 0x05	; 5
    5ff0:	81 e0       	ldi	r24, 0x01	; 1
    5ff2:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <log_putError>
    5ff6:	01 c0       	rjmp	.+2      	; 0x5ffa <init_Registers+0x46>
    5ff8:	c3 df       	rcall	.-122    	; 0x5f80 <registers_CalcCount>
    5ffa:	0e 94 20 0c 	call	0x1840	; 0x1840 <eeprom_ReadProg>
    5ffe:	8f 3f       	cpi	r24, 0xFF	; 255
    6000:	a1 f5       	brne	.+104    	; 0x606a <init_Registers+0xb6>
    6002:	2a c0       	rjmp	.+84     	; 0x6058 <init_Registers+0xa4>
    6004:	83 2f       	mov	r24, r19
    6006:	90 e0       	ldi	r25, 0x00	; 0
    6008:	fc 01       	movw	r30, r24
    600a:	ee 0f       	add	r30, r30
    600c:	ff 1f       	adc	r31, r31
    600e:	88 0f       	add	r24, r24
    6010:	99 1f       	adc	r25, r25
    6012:	88 0f       	add	r24, r24
    6014:	99 1f       	adc	r25, r25
    6016:	88 0f       	add	r24, r24
    6018:	99 1f       	adc	r25, r25
    601a:	e8 0f       	add	r30, r24
    601c:	f9 1f       	adc	r31, r25
    601e:	e6 57       	subi	r30, 0x76	; 118
    6020:	f6 4f       	sbci	r31, 0xF6	; 246
    6022:	e2 0f       	add	r30, r18
    6024:	f1 1d       	adc	r31, r1
    6026:	10 82       	st	Z, r1
    6028:	2f 5f       	subi	r18, 0xFF	; 255
    602a:	01 c0       	rjmp	.+2      	; 0x602e <init_Registers+0x7a>
    602c:	20 e0       	ldi	r18, 0x00	; 0
    602e:	28 30       	cpi	r18, 0x08	; 8
    6030:	48 f3       	brcs	.-46     	; 0x6004 <init_Registers+0x50>
    6032:	83 2f       	mov	r24, r19
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	fc 01       	movw	r30, r24
    6038:	ee 0f       	add	r30, r30
    603a:	ff 1f       	adc	r31, r31
    603c:	88 0f       	add	r24, r24
    603e:	99 1f       	adc	r25, r25
    6040:	88 0f       	add	r24, r24
    6042:	99 1f       	adc	r25, r25
    6044:	88 0f       	add	r24, r24
    6046:	99 1f       	adc	r25, r25
    6048:	e8 0f       	add	r30, r24
    604a:	f9 1f       	adc	r31, r25
    604c:	e6 57       	subi	r30, 0x76	; 118
    604e:	f6 4f       	sbci	r31, 0xF6	; 246
    6050:	11 86       	std	Z+9, r1	; 0x09
    6052:	10 86       	std	Z+8, r1	; 0x08
    6054:	3f 5f       	subi	r19, 0xFF	; 255
    6056:	01 c0       	rjmp	.+2      	; 0x605a <init_Registers+0xa6>
    6058:	30 e0       	ldi	r19, 0x00	; 0
    605a:	30 34       	cpi	r19, 0x40	; 64
    605c:	38 f3       	brcs	.-50     	; 0x602c <init_Registers+0x78>
    605e:	40 e0       	ldi	r20, 0x00	; 0
    6060:	50 e0       	ldi	r21, 0x00	; 0
    6062:	66 e0       	ldi	r22, 0x06	; 6
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <log_putError>
    606a:	08 95       	ret

0000606c <regNr_to_moduleBit>:
    606c:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6070:	89 17       	cp	r24, r25
    6072:	a0 f4       	brcc	.+40     	; 0x609c <regNr_to_moduleBit+0x30>
    6074:	80 34       	cpi	r24, 0x40	; 64
    6076:	90 f4       	brcc	.+36     	; 0x609c <regNr_to_moduleBit+0x30>
    6078:	28 e0       	ldi	r18, 0x08	; 8
    607a:	ed e1       	ldi	r30, 0x1D	; 29
    607c:	f8 e0       	ldi	r31, 0x08	; 8
    607e:	30 81       	ld	r19, Z
    6080:	83 17       	cp	r24, r19
    6082:	48 f0       	brcs	.+18     	; 0x6096 <regNr_to_moduleBit+0x2a>
    6084:	91 81       	ldd	r25, Z+1	; 0x01
    6086:	98 17       	cp	r25, r24
    6088:	30 f0       	brcs	.+12     	; 0x6096 <regNr_to_moduleBit+0x2a>
    608a:	22 81       	ldd	r18, Z+2	; 0x02
    608c:	98 2f       	mov	r25, r24
    608e:	93 1b       	sub	r25, r19
    6090:	80 e0       	ldi	r24, 0x00	; 0
    6092:	92 0f       	add	r25, r18
    6094:	08 95       	ret
    6096:	33 96       	adiw	r30, 0x03	; 3
    6098:	21 50       	subi	r18, 0x01	; 1
    609a:	89 f7       	brne	.-30     	; 0x607e <regNr_to_moduleBit+0x12>
    609c:	8f ef       	ldi	r24, 0xFF	; 255
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	08 95       	ret

000060a2 <moduleBit_to_registerNr>:
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	16 c0       	rjmp	.+44     	; 0x60d2 <moduleBit_to_registerNr+0x30>
    60a6:	40 91 1f 08 	lds	r20, 0x081F	; 0x80081f <registerMap+0x2>
    60aa:	84 17       	cp	r24, r20
    60ac:	88 f0       	brcs	.+34     	; 0x60d0 <moduleBit_to_registerNr+0x2e>
    60ae:	68 2f       	mov	r22, r24
    60b0:	70 e0       	ldi	r23, 0x00	; 0
    60b2:	ed e1       	ldi	r30, 0x1D	; 29
    60b4:	f8 e0       	ldi	r31, 0x08	; 8
    60b6:	21 81       	ldd	r18, Z+1	; 0x01
    60b8:	30 e0       	ldi	r19, 0x00	; 0
    60ba:	24 0f       	add	r18, r20
    60bc:	31 1d       	adc	r19, r1
    60be:	50 81       	ld	r21, Z
    60c0:	25 1b       	sub	r18, r21
    60c2:	31 09       	sbc	r19, r1
    60c4:	26 17       	cp	r18, r22
    60c6:	37 07       	cpc	r19, r23
    60c8:	1c f0       	brlt	.+6      	; 0x60d0 <moduleBit_to_registerNr+0x2e>
    60ca:	84 1b       	sub	r24, r20
    60cc:	85 0f       	add	r24, r21
    60ce:	08 95       	ret
    60d0:	9f 5f       	subi	r25, 0xFF	; 255
    60d2:	98 30       	cpi	r25, 0x08	; 8
    60d4:	40 f3       	brcs	.-48     	; 0x60a6 <moduleBit_to_registerNr+0x4>
    60d6:	8f ef       	ldi	r24, 0xFF	; 255
    60d8:	08 95       	ret

000060da <read_Register>:
    60da:	cf 93       	push	r28
    60dc:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    60e0:	89 17       	cp	r24, r25
    60e2:	08 f0       	brcs	.+2      	; 0x60e6 <read_Register+0xc>
    60e4:	3f c0       	rjmp	.+126    	; 0x6164 <read_Register+0x8a>
    60e6:	c6 2f       	mov	r28, r22
    60e8:	c1 df       	rcall	.-126    	; 0x606c <regNr_to_moduleBit>
    60ea:	81 11       	cpse	r24, r1
    60ec:	33 c0       	rjmp	.+102    	; 0x6154 <read_Register+0x7a>
    60ee:	29 2f       	mov	r18, r25
    60f0:	2f 71       	andi	r18, 0x1F	; 31
    60f2:	92 95       	swap	r25
    60f4:	96 95       	lsr	r25
    60f6:	97 70       	andi	r25, 0x07	; 7
    60f8:	41 e0       	ldi	r20, 0x01	; 1
    60fa:	50 e0       	ldi	r21, 0x00	; 0
    60fc:	02 c0       	rjmp	.+4      	; 0x6102 <read_Register+0x28>
    60fe:	44 0f       	add	r20, r20
    6100:	55 1f       	adc	r21, r21
    6102:	9a 95       	dec	r25
    6104:	e2 f7       	brpl	.-8      	; 0x60fe <read_Register+0x24>
    6106:	30 e0       	ldi	r19, 0x00	; 0
    6108:	f9 01       	movw	r30, r18
    610a:	ee 0f       	add	r30, r30
    610c:	ff 1f       	adc	r31, r31
    610e:	ee 0f       	add	r30, r30
    6110:	ff 1f       	adc	r31, r31
    6112:	ee 0f       	add	r30, r30
    6114:	ff 1f       	adc	r31, r31
    6116:	e4 59       	subi	r30, 0x94	; 148
    6118:	fd 4f       	sbci	r31, 0xFD	; 253
    611a:	91 81       	ldd	r25, Z+1	; 0x01
    611c:	94 23       	and	r25, r20
    611e:	11 f4       	brne	.+4      	; 0x6124 <read_Register+0x4a>
    6120:	c1 fd       	sbrc	r28, 1
    6122:	1a c0       	rjmp	.+52     	; 0x6158 <read_Register+0x7e>
    6124:	22 0f       	add	r18, r18
    6126:	33 1f       	adc	r19, r19
    6128:	22 0f       	add	r18, r18
    612a:	33 1f       	adc	r19, r19
    612c:	22 0f       	add	r18, r18
    612e:	33 1f       	adc	r19, r19
    6130:	f9 01       	movw	r30, r18
    6132:	e4 59       	subi	r30, 0x94	; 148
    6134:	fd 4f       	sbci	r31, 0xFD	; 253
    6136:	36 81       	ldd	r19, Z+6	; 0x06
    6138:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <pipe_Module>
    613c:	43 23       	and	r20, r19
    613e:	42 23       	and	r20, r18
    6140:	11 f0       	breq	.+4      	; 0x6146 <read_Register+0x6c>
    6142:	c0 fd       	sbrc	r28, 0
    6144:	0b c0       	rjmp	.+22     	; 0x615c <read_Register+0x82>
    6146:	99 23       	and	r25, r25
    6148:	71 f0       	breq	.+28     	; 0x6166 <read_Register+0x8c>
    614a:	44 23       	and	r20, r20
    614c:	61 f0       	breq	.+24     	; 0x6166 <read_Register+0x8c>
    614e:	c4 30       	cpi	r28, 0x04	; 4
    6150:	51 f4       	brne	.+20     	; 0x6166 <read_Register+0x8c>
    6152:	06 c0       	rjmp	.+12     	; 0x6160 <read_Register+0x86>
    6154:	80 e0       	ldi	r24, 0x00	; 0
    6156:	07 c0       	rjmp	.+14     	; 0x6166 <read_Register+0x8c>
    6158:	81 e0       	ldi	r24, 0x01	; 1
    615a:	05 c0       	rjmp	.+10     	; 0x6166 <read_Register+0x8c>
    615c:	81 e0       	ldi	r24, 0x01	; 1
    615e:	03 c0       	rjmp	.+6      	; 0x6166 <read_Register+0x8c>
    6160:	81 e0       	ldi	r24, 0x01	; 1
    6162:	01 c0       	rjmp	.+2      	; 0x6166 <read_Register+0x8c>
    6164:	80 e0       	ldi	r24, 0x00	; 0
    6166:	cf 91       	pop	r28
    6168:	08 95       	ret

0000616a <get_RegisterStatus>:
    616a:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    616e:	89 17       	cp	r24, r25
    6170:	90 f5       	brcc	.+100    	; 0x61d6 <get_RegisterStatus+0x6c>
    6172:	7c df       	rcall	.-264    	; 0x606c <regNr_to_moduleBit>
    6174:	81 11       	cpse	r24, r1
    6176:	2d c0       	rjmp	.+90     	; 0x61d2 <get_RegisterStatus+0x68>
    6178:	29 2f       	mov	r18, r25
    617a:	2f 71       	andi	r18, 0x1F	; 31
    617c:	92 95       	swap	r25
    617e:	96 95       	lsr	r25
    6180:	97 70       	andi	r25, 0x07	; 7
    6182:	41 e0       	ldi	r20, 0x01	; 1
    6184:	50 e0       	ldi	r21, 0x00	; 0
    6186:	02 c0       	rjmp	.+4      	; 0x618c <get_RegisterStatus+0x22>
    6188:	44 0f       	add	r20, r20
    618a:	55 1f       	adc	r21, r21
    618c:	9a 95       	dec	r25
    618e:	e2 f7       	brpl	.-8      	; 0x6188 <get_RegisterStatus+0x1e>
    6190:	30 e0       	ldi	r19, 0x00	; 0
    6192:	f9 01       	movw	r30, r18
    6194:	ee 0f       	add	r30, r30
    6196:	ff 1f       	adc	r31, r31
    6198:	ee 0f       	add	r30, r30
    619a:	ff 1f       	adc	r31, r31
    619c:	ee 0f       	add	r30, r30
    619e:	ff 1f       	adc	r31, r31
    61a0:	e4 59       	subi	r30, 0x94	; 148
    61a2:	fd 4f       	sbci	r31, 0xFD	; 253
    61a4:	81 81       	ldd	r24, Z+1	; 0x01
    61a6:	84 23       	and	r24, r20
    61a8:	11 f0       	breq	.+4      	; 0x61ae <get_RegisterStatus+0x44>
    61aa:	80 e0       	ldi	r24, 0x00	; 0
    61ac:	01 c0       	rjmp	.+2      	; 0x61b0 <get_RegisterStatus+0x46>
    61ae:	82 e0       	ldi	r24, 0x02	; 2
    61b0:	22 0f       	add	r18, r18
    61b2:	33 1f       	adc	r19, r19
    61b4:	22 0f       	add	r18, r18
    61b6:	33 1f       	adc	r19, r19
    61b8:	22 0f       	add	r18, r18
    61ba:	33 1f       	adc	r19, r19
    61bc:	f9 01       	movw	r30, r18
    61be:	e4 59       	subi	r30, 0x94	; 148
    61c0:	fd 4f       	sbci	r31, 0xFD	; 253
    61c2:	26 81       	ldd	r18, Z+6	; 0x06
    61c4:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pipe_Module>
    61c8:	42 23       	and	r20, r18
    61ca:	49 23       	and	r20, r25
    61cc:	29 f0       	breq	.+10     	; 0x61d8 <get_RegisterStatus+0x6e>
    61ce:	81 60       	ori	r24, 0x01	; 1
    61d0:	08 95       	ret
    61d2:	80 e0       	ldi	r24, 0x00	; 0
    61d4:	08 95       	ret
    61d6:	80 e0       	ldi	r24, 0x00	; 0
    61d8:	08 95       	ret

000061da <count_Registers>:
    61da:	1f 93       	push	r17
    61dc:	cf 93       	push	r28
    61de:	df 93       	push	r29
    61e0:	18 2f       	mov	r17, r24
    61e2:	c0 e0       	ldi	r28, 0x00	; 0
    61e4:	d0 e0       	ldi	r29, 0x00	; 0
    61e6:	06 c0       	rjmp	.+12     	; 0x61f4 <count_Registers+0x1a>
    61e8:	61 2f       	mov	r22, r17
    61ea:	8c 2f       	mov	r24, r28
    61ec:	76 df       	rcall	.-276    	; 0x60da <read_Register>
    61ee:	81 11       	cpse	r24, r1
    61f0:	df 5f       	subi	r29, 0xFF	; 255
    61f2:	cf 5f       	subi	r28, 0xFF	; 255
    61f4:	c0 34       	cpi	r28, 0x40	; 64
    61f6:	c0 f3       	brcs	.-16     	; 0x61e8 <count_Registers+0xe>
    61f8:	8d 2f       	mov	r24, r29
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	1f 91       	pop	r17
    6200:	08 95       	ret

00006202 <read_allRegister>:
    6202:	ef 92       	push	r14
    6204:	ff 92       	push	r15
    6206:	0f 93       	push	r16
    6208:	1f 93       	push	r17
    620a:	cf 93       	push	r28
    620c:	df 93       	push	r29
    620e:	7c 01       	movw	r14, r24
    6210:	c0 e0       	ldi	r28, 0x00	; 0
    6212:	d0 e0       	ldi	r29, 0x00	; 0
    6214:	00 e0       	ldi	r16, 0x00	; 0
    6216:	17 c0       	rjmp	.+46     	; 0x6246 <read_allRegister+0x44>
    6218:	1c 2f       	mov	r17, r28
    621a:	17 70       	andi	r17, 0x07	; 7
    621c:	09 f4       	brne	.+2      	; 0x6220 <read_allRegister+0x1e>
    621e:	d0 e0       	ldi	r29, 0x00	; 0
    6220:	d6 95       	lsr	r29
    6222:	63 e0       	ldi	r22, 0x03	; 3
    6224:	8c 2f       	mov	r24, r28
    6226:	59 df       	rcall	.-334    	; 0x60da <read_Register>
    6228:	88 23       	and	r24, r24
    622a:	11 f0       	breq	.+4      	; 0x6230 <read_allRegister+0x2e>
    622c:	d0 68       	ori	r29, 0x80	; 128
    622e:	0f 5f       	subi	r16, 0xFF	; 255
    6230:	17 30       	cpi	r17, 0x07	; 7
    6232:	41 f4       	brne	.+16     	; 0x6244 <read_allRegister+0x42>
    6234:	e1 14       	cp	r14, r1
    6236:	f1 04       	cpc	r15, r1
    6238:	29 f0       	breq	.+10     	; 0x6244 <read_allRegister+0x42>
    623a:	f7 01       	movw	r30, r14
    623c:	d0 83       	st	Z, r29
    623e:	c7 01       	movw	r24, r14
    6240:	01 96       	adiw	r24, 0x01	; 1
    6242:	7c 01       	movw	r14, r24
    6244:	cf 5f       	subi	r28, 0xFF	; 255
    6246:	c0 34       	cpi	r28, 0x40	; 64
    6248:	38 f3       	brcs	.-50     	; 0x6218 <read_allRegister+0x16>
    624a:	80 2f       	mov	r24, r16
    624c:	df 91       	pop	r29
    624e:	cf 91       	pop	r28
    6250:	1f 91       	pop	r17
    6252:	0f 91       	pop	r16
    6254:	ff 90       	pop	r15
    6256:	ef 90       	pop	r14
    6258:	08 95       	ret

0000625a <register_onOff>:
    625a:	cf 93       	push	r28
    625c:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6260:	89 17       	cp	r24, r25
    6262:	f0 f4       	brcc	.+60     	; 0x62a0 <register_onOff+0x46>
    6264:	c6 2f       	mov	r28, r22
    6266:	02 df       	rcall	.-508    	; 0x606c <regNr_to_moduleBit>
    6268:	81 11       	cpse	r24, r1
    626a:	1a c0       	rjmp	.+52     	; 0x62a0 <register_onOff+0x46>
    626c:	89 2f       	mov	r24, r25
    626e:	8f 71       	andi	r24, 0x1F	; 31
    6270:	92 95       	swap	r25
    6272:	96 95       	lsr	r25
    6274:	97 70       	andi	r25, 0x07	; 7
    6276:	c0 ff       	sbrs	r28, 0
    6278:	0a c0       	rjmp	.+20     	; 0x628e <register_onOff+0x34>
    627a:	61 e0       	ldi	r22, 0x01	; 1
    627c:	70 e0       	ldi	r23, 0x00	; 0
    627e:	02 c0       	rjmp	.+4      	; 0x6284 <register_onOff+0x2a>
    6280:	66 0f       	add	r22, r22
    6282:	77 1f       	adc	r23, r23
    6284:	9a 95       	dec	r25
    6286:	e2 f7       	brpl	.-8      	; 0x6280 <register_onOff+0x26>
    6288:	0e 94 cb 12 	call	0x2596	; 0x2596 <pipe_on>
    628c:	09 c0       	rjmp	.+18     	; 0x62a0 <register_onOff+0x46>
    628e:	61 e0       	ldi	r22, 0x01	; 1
    6290:	70 e0       	ldi	r23, 0x00	; 0
    6292:	02 c0       	rjmp	.+4      	; 0x6298 <register_onOff+0x3e>
    6294:	66 0f       	add	r22, r22
    6296:	77 1f       	adc	r23, r23
    6298:	9a 95       	dec	r25
    629a:	e2 f7       	brpl	.-8      	; 0x6294 <register_onOff+0x3a>
    629c:	0e 94 da 12 	call	0x25b4	; 0x25b4 <pipe_off>
    62a0:	cf 91       	pop	r28
    62a2:	08 95       	ret

000062a4 <midi_RegisterMatchProgram>:
		eeprom_UpdateProg();
	}
	return result;
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
    62a4:	ff 92       	push	r15
    62a6:	0f 93       	push	r16
    62a8:	1f 93       	push	r17
    62aa:	cf 93       	push	r28
    62ac:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	8c 01       	movw	r16, r24
    62b2:	00 0f       	add	r16, r16
    62b4:	11 1f       	adc	r17, r17
    62b6:	88 0f       	add	r24, r24
    62b8:	99 1f       	adc	r25, r25
    62ba:	88 0f       	add	r24, r24
    62bc:	99 1f       	adc	r25, r25
    62be:	88 0f       	add	r24, r24
    62c0:	99 1f       	adc	r25, r25
    62c2:	08 0f       	add	r16, r24
    62c4:	19 1f       	adc	r17, r25
    62c6:	06 57       	subi	r16, 0x76	; 118
    62c8:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    62ca:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    62cc:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    62ce:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    62d0:	14 c0       	rjmp	.+40     	; 0x62fa <midi_RegisterMatchProgram+0x56>
		if ((i & 0x07) == 0) {
    62d2:	9c 2f       	mov	r25, r28
    62d4:	97 70       	andi	r25, 0x07	; 7
    62d6:	21 f4       	brne	.+8      	; 0x62e0 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    62d8:	f8 01       	movw	r30, r16
    62da:	d0 81       	ld	r29, Z
    62dc:	0f 5f       	subi	r16, 0xFF	; 255
    62de:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    62e0:	8c 2f       	mov	r24, r28
    62e2:	43 df       	rcall	.-378    	; 0x616a <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    62e4:	d0 ff       	sbrs	r29, 0
    62e6:	03 c0       	rjmp	.+6      	; 0x62ee <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
    62e8:	81 fd       	sbrc	r24, 1
    62ea:	05 c0       	rjmp	.+10     	; 0x62f6 <midi_RegisterMatchProgram+0x52>
    62ec:	0c c0       	rjmp	.+24     	; 0x6306 <midi_RegisterMatchProgram+0x62>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
    62ee:	81 fd       	sbrc	r24, 1
    62f0:	0c c0       	rjmp	.+24     	; 0x630a <midi_RegisterMatchProgram+0x66>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg & REGISTER_READ_HWIN) {
    62f2:	80 fd       	sbrc	r24, 0
				// is set by HW
				result++; // inc return val
    62f4:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    62f6:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    62f8:	cf 5f       	subi	r28, 0xFF	; 255
    62fa:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    62fe:	c9 17       	cp	r28, r25
    6300:	40 f3       	brcs	.-48     	; 0x62d2 <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    6302:	8f 2d       	mov	r24, r15
    6304:	03 c0       	rjmp	.+6      	; 0x630c <midi_RegisterMatchProgram+0x68>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    6306:	8f ef       	ldi	r24, 0xFF	; 255
    6308:	01 c0       	rjmp	.+2      	; 0x630c <midi_RegisterMatchProgram+0x68>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    630a:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    630c:	df 91       	pop	r29
    630e:	cf 91       	pop	r28
    6310:	1f 91       	pop	r17
    6312:	0f 91       	pop	r16
    6314:	ff 90       	pop	r15
    6316:	08 95       	ret

00006318 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	fc 01       	movw	r30, r24
    631c:	ee 0f       	add	r30, r30
    631e:	ff 1f       	adc	r31, r31
    6320:	88 0f       	add	r24, r24
    6322:	99 1f       	adc	r25, r25
    6324:	88 0f       	add	r24, r24
    6326:	99 1f       	adc	r25, r25
    6328:	88 0f       	add	r24, r24
    632a:	99 1f       	adc	r25, r25
    632c:	e8 0f       	add	r30, r24
    632e:	f9 1f       	adc	r31, r25
    6330:	e6 57       	subi	r30, 0x76	; 118
    6332:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6334:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    6336:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    6338:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    633a:	09 c0       	rjmp	.+18     	; 0x634e <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    633c:	39 2f       	mov	r19, r25
    633e:	37 70       	andi	r19, 0x07	; 7
    6340:	11 f4       	brne	.+4      	; 0x6346 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    6342:	20 81       	ld	r18, Z
    6344:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    6346:	20 fd       	sbrc	r18, 0
			result++;
    6348:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    634a:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    634c:	9f 5f       	subi	r25, 0xFF	; 255
    634e:	30 91 36 08 	lds	r19, 0x0836	; 0x800836 <registerCount>
    6352:	93 17       	cp	r25, r19
    6354:	98 f3       	brcs	.-26     	; 0x633c <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    6356:	08 95       	ret

00006358 <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    6358:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <prog_Display>
    635c:	98 17       	cp	r25, r24
    635e:	29 f0       	breq	.+10     	; 0x636a <prog_set+0x12>
		prog_Display = prog;
    6360:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
		prog_UpdDisplay = TRUE;
    6364:	8f ef       	ldi	r24, 0xFF	; 255
    6366:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
    636a:	08 95       	ret

0000636c <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    636c:	bf 92       	push	r11
    636e:	cf 92       	push	r12
    6370:	df 92       	push	r13
    6372:	ef 92       	push	r14
    6374:	ff 92       	push	r15
    6376:	0f 93       	push	r16
    6378:	1f 93       	push	r17
    637a:	cf 93       	push	r28
    637c:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    637e:	80 34       	cpi	r24, 0x40	; 64
    6380:	08 f0       	brcs	.+2      	; 0x6384 <program_toRegister+0x18>
    6382:	41 c0       	rjmp	.+130    	; 0x6406 <program_toRegister+0x9a>
    6384:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    6386:	e8 df       	rcall	.-48     	; 0x6358 <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    6388:	f1 2c       	mov	r15, r1
    638a:	f7 01       	movw	r30, r14
    638c:	ee 0f       	add	r30, r30
    638e:	ff 1f       	adc	r31, r31
    6390:	c7 01       	movw	r24, r14
    6392:	88 0f       	add	r24, r24
    6394:	99 1f       	adc	r25, r25
    6396:	88 0f       	add	r24, r24
    6398:	99 1f       	adc	r25, r25
    639a:	88 0f       	add	r24, r24
    639c:	99 1f       	adc	r25, r25
    639e:	e8 0f       	add	r30, r24
    63a0:	f9 1f       	adc	r31, r25
    63a2:	e6 57       	subi	r30, 0x76	; 118
    63a4:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    63a6:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    63a8:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    63aa:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    63ac:	18 c0       	rjmp	.+48     	; 0x63de <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    63ae:	6f 01       	movw	r12, r30
    63b0:	8f ef       	ldi	r24, 0xFF	; 255
    63b2:	c8 1a       	sub	r12, r24
    63b4:	d8 0a       	sbc	r13, r24
    63b6:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    63b8:	d0 e0       	ldi	r29, 0x00	; 0
    63ba:	0d c0       	rjmp	.+26     	; 0x63d6 <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    63bc:	8c 2f       	mov	r24, r28
    63be:	81 70       	andi	r24, 0x01	; 1
    63c0:	c0 fd       	sbrc	r28, 0
					result++;
    63c2:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    63c4:	61 e0       	ldi	r22, 0x01	; 1
    63c6:	81 11       	cpse	r24, r1
    63c8:	01 c0       	rjmp	.+2      	; 0x63cc <program_toRegister+0x60>
    63ca:	60 e0       	ldi	r22, 0x00	; 0
    63cc:	81 2f       	mov	r24, r17
    63ce:	45 df       	rcall	.-374    	; 0x625a <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    63d0:	c6 95       	lsr	r28
				regNr++;
    63d2:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    63d4:	df 5f       	subi	r29, 0xFF	; 255
    63d6:	d8 30       	cpi	r29, 0x08	; 8
    63d8:	88 f3       	brcs	.-30     	; 0x63bc <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    63da:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    63dc:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    63de:	87 e0       	ldi	r24, 0x07	; 7
    63e0:	8b 15       	cp	r24, r11
    63e2:	28 f7       	brcc	.-54     	; 0x63ae <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    63e4:	f7 01       	movw	r30, r14
    63e6:	ee 0f       	add	r30, r30
    63e8:	ff 1f       	adc	r31, r31
    63ea:	ee 0c       	add	r14, r14
    63ec:	ff 1c       	adc	r15, r15
    63ee:	ee 0c       	add	r14, r14
    63f0:	ff 1c       	adc	r15, r15
    63f2:	ee 0c       	add	r14, r14
    63f4:	ff 1c       	adc	r15, r15
    63f6:	ee 0d       	add	r30, r14
    63f8:	ff 1d       	adc	r31, r15
    63fa:	e6 57       	subi	r30, 0x76	; 118
    63fc:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    63fe:	80 85       	ldd	r24, Z+8	; 0x08
    6400:	91 85       	ldd	r25, Z+9	; 0x09
    6402:	9f dd       	rcall	.-1218   	; 0x5f42 <setAllCouplers>
    6404:	01 c0       	rjmp	.+2      	; 0x6408 <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    6406:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    6408:	80 2f       	mov	r24, r16
    640a:	df 91       	pop	r29
    640c:	cf 91       	pop	r28
    640e:	1f 91       	pop	r17
    6410:	0f 91       	pop	r16
    6412:	ff 90       	pop	r15
    6414:	ef 90       	pop	r14
    6416:	df 90       	pop	r13
    6418:	cf 90       	pop	r12
    641a:	bf 90       	pop	r11
    641c:	08 95       	ret

0000641e <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    641e:	cf 93       	push	r28
    6420:	c6 2f       	mov	r28, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6422:	90 91 58 09 	lds	r25, 0x0958	; 0x800958 <midi_Setting+0x2>
    6426:	91 11       	cpse	r25, r1
    6428:	14 c0       	rjmp	.+40     	; 0x6452 <midi_ProgramChange+0x34>
    642a:	21 c0       	rjmp	.+66     	; 0x646e <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    642c:	e8 2f       	mov	r30, r24
    642e:	f0 e0       	ldi	r31, 0x00	; 0
    6430:	ee 0f       	add	r30, r30
    6432:	ff 1f       	adc	r31, r31
    6434:	ee 0f       	add	r30, r30
    6436:	ff 1f       	adc	r31, r31
    6438:	e9 0f       	add	r30, r25
    643a:	f1 1d       	adc	r31, r1
    643c:	ee 0f       	add	r30, r30
    643e:	ff 1f       	adc	r31, r31
    6440:	ee 0f       	add	r30, r30
    6442:	ff 1f       	adc	r31, r31
    6444:	e2 5b       	subi	r30, 0xB2	; 178
    6446:	f7 4f       	sbci	r31, 0xF7	; 247
    6448:	20 81       	ld	r18, Z
    644a:	2f 3f       	cpi	r18, 0xFF	; 255
    644c:	39 f4       	brne	.+14     	; 0x645c <midi_ProgramChange+0x3e>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    644e:	9f 5f       	subi	r25, 0xFF	; 255
    6450:	01 c0       	rjmp	.+2      	; 0x6454 <midi_ProgramChange+0x36>
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	94 30       	cpi	r25, 0x04	; 4
    6456:	50 f3       	brcs	.-44     	; 0x642c <midi_ProgramChange+0xe>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    6458:	80 e0       	ldi	r24, 0x00	; 0
    645a:	01 c0       	rjmp	.+2      	; 0x645e <midi_ProgramChange+0x40>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    645c:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    645e:	8f 3f       	cpi	r24, 0xFF	; 255
    6460:	31 f4       	brne	.+12     	; 0x646e <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    6462:	8c 2f       	mov	r24, r28
    6464:	83 df       	rcall	.-250    	; 0x636c <program_toRegister>
			prog_set(program);
    6466:	8c 2f       	mov	r24, r28
    6468:	77 df       	rcall	.-274    	; 0x6358 <prog_set>
			midiLastProgram = program;
    646a:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <midiLastProgram>
		}
	}
	// V 0.58 SW MIDI Through
	//if (channel == midiThrough.InChannel){
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    646e:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <midiThrough+0x1>
    6472:	8f 3f       	cpi	r24, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    6474:	21 f0       	breq	.+8      	; 0x647e <midi_ProgramChange+0x60>
    6476:	80 6c       	ori	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    6478:	0d d7       	rcall	.+3610   	; 0x7294 <serial1MIDISend>
    647a:	8c 2f       	mov	r24, r28
    647c:	0b d7       	rcall	.+3606   	; 0x7294 <serial1MIDISend>
		}
	//} V 0.73 send program change to "thru" out always
}
    647e:	cf 91       	pop	r28
    6480:	08 95       	ret

00006482 <midi_resetRegisters>:


void midi_resetRegisters(){
    6482:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    6484:	c0 e0       	ldi	r28, 0x00	; 0
    6486:	06 c0       	rjmp	.+12     	; 0x6494 <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    6488:	8f ef       	ldi	r24, 0xFF	; 255
    648a:	66 df       	rcall	.-308    	; 0x6358 <prog_set>
		register_onOff(i,REGISTER_OFF);
    648c:	60 e0       	ldi	r22, 0x00	; 0
    648e:	8c 2f       	mov	r24, r28
    6490:	e4 de       	rcall	.-568    	; 0x625a <register_onOff>
	//} V 0.73 send program change to "thru" out always
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    6492:	cf 5f       	subi	r28, 0xFF	; 255
    6494:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <registerCount>
    6498:	c8 17       	cp	r28, r24
    649a:	b0 f3       	brcs	.-20     	; 0x6488 <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    649c:	cf 91       	pop	r28
    649e:	08 95       	ret

000064a0 <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    64a0:	0f 93       	push	r16
    64a2:	1f 93       	push	r17
    64a4:	cf 93       	push	r28
    64a6:	df 93       	push	r29
    64a8:	c8 2f       	mov	r28, r24
    64aa:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	// V0.76 reset register ouptu first
	midi_resetRegisters();
    64ac:	ea df       	rcall	.-44     	; 0x6482 <midi_resetRegisters>
	module_WaitOutputInput2Cycles(); // now register read input is HW register only
    64ae:	0e 94 08 10 	call	0x2010	; 0x2010 <module_WaitOutputInput2Cycles>
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    64b2:	c0 34       	cpi	r28, 0x40	; 64
    64b4:	90 f4       	brcc	.+36     	; 0x64da <register_toProgram+0x3a>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    64b6:	2c 2f       	mov	r18, r28
    64b8:	30 e0       	ldi	r19, 0x00	; 0
    64ba:	c9 01       	movw	r24, r18
    64bc:	88 0f       	add	r24, r24
    64be:	99 1f       	adc	r25, r25
    64c0:	22 0f       	add	r18, r18
    64c2:	33 1f       	adc	r19, r19
    64c4:	22 0f       	add	r18, r18
    64c6:	33 1f       	adc	r19, r19
    64c8:	22 0f       	add	r18, r18
    64ca:	33 1f       	adc	r19, r19
    64cc:	82 0f       	add	r24, r18
    64ce:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    64d0:	86 57       	subi	r24, 0x76	; 118
    64d2:	96 4f       	sbci	r25, 0xF6	; 246
    64d4:	96 de       	rcall	.-724    	; 0x6202 <read_allRegister>
    64d6:	18 2f       	mov	r17, r24
    64d8:	01 c0       	rjmp	.+2      	; 0x64dc <register_toProgram+0x3c>
	}
	programMap[program].couplers = getAllCouplers().wordval;
    64da:	10 e0       	ldi	r17, 0x00	; 0
    64dc:	d0 e0       	ldi	r29, 0x00	; 0
    64de:	19 dd       	rcall	.-1486   	; 0x5f12 <getAllCouplers>
    64e0:	9e 01       	movw	r18, r28
    64e2:	22 0f       	add	r18, r18
    64e4:	33 1f       	adc	r19, r19
    64e6:	cc 0f       	add	r28, r28
    64e8:	dd 1f       	adc	r29, r29
    64ea:	cc 0f       	add	r28, r28
    64ec:	dd 1f       	adc	r29, r29
    64ee:	cc 0f       	add	r28, r28
    64f0:	dd 1f       	adc	r29, r29
    64f2:	c2 0f       	add	r28, r18
    64f4:	d3 1f       	adc	r29, r19
    64f6:	c6 57       	subi	r28, 0x76	; 118
    64f8:	d6 4f       	sbci	r29, 0xF6	; 246
    64fa:	99 87       	std	Y+9, r25	; 0x09
    64fc:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    64fe:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    6500:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <eeprom_UpdateProg>
	}
	return result;
}
    6504:	81 2f       	mov	r24, r17
    6506:	df 91       	pop	r29
    6508:	cf 91       	pop	r28
    650a:	1f 91       	pop	r17
    650c:	0f 91       	pop	r16
    650e:	08 95       	ret

00006510 <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display <= PROGR_MAX) {
    6510:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    6514:	80 34       	cpi	r24, 0x40	; 64
    6516:	c8 f4       	brcc	.+50     	; 0x654a <prog_toLcd+0x3a>
		lcd_putc('P');
    6518:	80 e5       	ldi	r24, 0x50	; 80
    651a:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc('-');
    651e:	8d e2       	ldi	r24, 0x2D	; 45
    6520:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    6524:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    6528:	86 95       	lsr	r24
    652a:	86 95       	lsr	r24
    652c:	86 95       	lsr	r24
    652e:	87 70       	andi	r24, 0x07	; 7
    6530:	8f 5b       	subi	r24, 0xBF	; 191
    6532:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    6536:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    653a:	87 70       	andi	r24, 0x07	; 7
    653c:	8f 5c       	subi	r24, 0xCF	; 207
    653e:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc(' ');
    6542:	80 e2       	ldi	r24, 0x20	; 32
    6544:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    6548:	08 95       	ret
	} else {
		lcd_blank(5);
    654a:	85 e0       	ldi	r24, 0x05	; 5
    654c:	0c 94 fe 3d 	jmp	0x7bfc	; 0x7bfc <lcd_blank>
    6550:	08 95       	ret

00006552 <init_RegOut>:
RegOut_t reg_Out[REGOUT_LEN] = {{LCD_LINE1+1,'1',10,14},{LCD_LINE1+6,' ',15,18},
{LCD_LINE1+10,'2',20,24},{LCD_LINE1+15,' ',25,29},{LCD_LINE2+1,'P',0,4},{LCD_LINE2+6,' ',5,9},
{0,' ',REGISTER_NONE,REGISTER_NONE},{0,' ',REGISTER_NONE,REGISTER_NONE}};

void init_RegOut(){
	if (eeprom_ReadRegOut() == EE_LOAD_ERROR) {
    6552:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <eeprom_ReadRegOut>
    6556:	08 95       	ret

00006558 <reg_toLCD>:
		// load some default values for my organ -> alredy done in array declaration
	}
}

void reg_toLCD(uint8_t readHWonly){
    6558:	ef 92       	push	r14
    655a:	ff 92       	push	r15
    655c:	0f 93       	push	r16
    655e:	1f 93       	push	r17
    6560:	cf 93       	push	r28
    6562:	df 93       	push	r29
    6564:	f8 2e       	mov	r15, r24
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6566:	e1 2c       	mov	r14, r1
    6568:	70 c0       	rjmp	.+224    	; 0x664a <reg_toLCD+0xf2>
		lcd_goto(reg_Out[i].cursor);
    656a:	0e 2d       	mov	r16, r14
    656c:	10 e0       	ldi	r17, 0x00	; 0
    656e:	e8 01       	movw	r28, r16
    6570:	cc 0f       	add	r28, r28
    6572:	dd 1f       	adc	r29, r29
    6574:	cc 0f       	add	r28, r28
    6576:	dd 1f       	adc	r29, r29
    6578:	c0 50       	subi	r28, 0x00	; 0
    657a:	de 4f       	sbci	r29, 0xFE	; 254
    657c:	88 81       	ld	r24, Y
    657e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    6582:	89 81       	ldd	r24, Y+1	; 0x01
		if ((myChar > ' ') && (myChar <= 0x7F)) {
    6584:	9f ed       	ldi	r25, 0xDF	; 223
    6586:	98 0f       	add	r25, r24
    6588:	9f 35       	cpi	r25, 0x5F	; 95
    658a:	28 f4       	brcc	.+10     	; 0x6596 <reg_toLCD+0x3e>
			// only if valid char
			lcd_putc(myChar);
    658c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
			lcd_putc(' ');
    6590:	80 e2       	ldi	r24, 0x20	; 32
    6592:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		}
		uint8_t reg = reg_Out[i].regStart;
    6596:	f8 01       	movw	r30, r16
    6598:	ee 0f       	add	r30, r30
    659a:	ff 1f       	adc	r31, r31
    659c:	ee 0f       	add	r30, r30
    659e:	ff 1f       	adc	r31, r31
    65a0:	e0 50       	subi	r30, 0x00	; 0
    65a2:	fe 4f       	sbci	r31, 0xFE	; 254
    65a4:	c2 81       	ldd	r28, Z+2	; 0x02
		if (reg == REGISTER_NONE) {
    65a6:	cf 3f       	cpi	r28, 0xFF	; 255
    65a8:	09 f0       	breq	.+2      	; 0x65ac <reg_toLCD+0x54>
    65aa:	40 c0       	rjmp	.+128    	; 0x662c <reg_toLCD+0xd4>
    65ac:	52 c0       	rjmp	.+164    	; 0x6652 <reg_toLCD+0xfa>
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
			if (reg == reg_Out[i].regEnd) {
    65ae:	c8 13       	cpse	r28, r24
    65b0:	19 c0       	rjmp	.+50     	; 0x65e4 <reg_toLCD+0x8c>
				// only one register left for out
				if (readHWonly == TRUE) {
    65b2:	8f ef       	ldi	r24, 0xFF	; 255
    65b4:	f8 12       	cpse	r15, r24
    65b6:	0b c0       	rjmp	.+22     	; 0x65ce <reg_toLCD+0x76>
					lcd_putc(LCD_CHAR_REG_OFF+ ((get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0));
    65b8:	8c 2f       	mov	r24, r28
    65ba:	d7 dd       	rcall	.-1106   	; 0x616a <get_RegisterStatus>
    65bc:	80 ff       	sbrs	r24, 0
    65be:	02 c0       	rjmp	.+4      	; 0x65c4 <reg_toLCD+0x6c>
    65c0:	8b e0       	ldi	r24, 0x0B	; 11
    65c2:	01 c0       	rjmp	.+2      	; 0x65c6 <reg_toLCD+0x6e>
    65c4:	8a e0       	ldi	r24, 0x0A	; 10
    65c6:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    65ca:	dc 2f       	mov	r29, r28
    65cc:	2d c0       	rjmp	.+90     	; 0x6628 <reg_toLCD+0xd0>
				} else {
					lcd_putc(LCD_CHAR_REG_OFF+  ((get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0));
    65ce:	8c 2f       	mov	r24, r28
    65d0:	cc dd       	rcall	.-1128   	; 0x616a <get_RegisterStatus>
    65d2:	81 ff       	sbrs	r24, 1
    65d4:	02 c0       	rjmp	.+4      	; 0x65da <reg_toLCD+0x82>
    65d6:	8b e0       	ldi	r24, 0x0B	; 11
    65d8:	01 c0       	rjmp	.+2      	; 0x65dc <reg_toLCD+0x84>
    65da:	8a e0       	ldi	r24, 0x0A	; 10
    65dc:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    65e0:	dc 2f       	mov	r29, r28
    65e2:	22 c0       	rjmp	.+68     	; 0x6628 <reg_toLCD+0xd0>
				}
			} else {
				// at least 2 register left
				if (readHWonly == TRUE) {
    65e4:	8f ef       	ldi	r24, 0xFF	; 255
    65e6:	f8 12       	cpse	r15, r24
    65e8:	11 c0       	rjmp	.+34     	; 0x660c <reg_toLCD+0xb4>
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_HWIN) ? 2 : 0;
    65ea:	d1 e0       	ldi	r29, 0x01	; 1
    65ec:	dc 0f       	add	r29, r28
    65ee:	8c 2f       	mov	r24, r28
    65f0:	bc dd       	rcall	.-1160   	; 0x616a <get_RegisterStatus>
    65f2:	80 ff       	sbrs	r24, 0
    65f4:	02 c0       	rjmp	.+4      	; 0x65fa <reg_toLCD+0xa2>
    65f6:	c2 e0       	ldi	r28, 0x02	; 2
    65f8:	01 c0       	rjmp	.+2      	; 0x65fc <reg_toLCD+0xa4>
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0;
    65fa:	c0 e0       	ldi	r28, 0x00	; 0
    65fc:	8d 2f       	mov	r24, r29
    65fe:	b5 dd       	rcall	.-1174   	; 0x616a <get_RegisterStatus>
    6600:	81 70       	andi	r24, 0x01	; 1
    6602:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    6604:	84 5f       	subi	r24, 0xF4	; 244
    6606:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
				} else {
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_SWOUT) ? 2 : 0;
    660a:	0e c0       	rjmp	.+28     	; 0x6628 <reg_toLCD+0xd0>
    660c:	d1 e0       	ldi	r29, 0x01	; 1
    660e:	dc 0f       	add	r29, r28
    6610:	8c 2f       	mov	r24, r28
    6612:	ab dd       	rcall	.-1194   	; 0x616a <get_RegisterStatus>
    6614:	c8 2f       	mov	r28, r24
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0;
    6616:	c2 70       	andi	r28, 0x02	; 2
    6618:	8d 2f       	mov	r24, r29
    661a:	a7 dd       	rcall	.-1202   	; 0x616a <get_RegisterStatus>
    661c:	86 95       	lsr	r24
    661e:	81 70       	andi	r24, 0x01	; 1
    6620:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    6622:	84 5f       	subi	r24, 0xF4	; 244
    6624:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
				}
			}
			reg++;
    6628:	c1 e0       	ldi	r28, 0x01	; 1
    662a:	cd 0f       	add	r28, r29
		}
		uint8_t reg = reg_Out[i].regStart;
		if (reg == REGISTER_NONE) {
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
    662c:	f8 01       	movw	r30, r16
    662e:	ee 0f       	add	r30, r30
    6630:	ff 1f       	adc	r31, r31
    6632:	ee 0f       	add	r30, r30
    6634:	ff 1f       	adc	r31, r31
    6636:	e0 50       	subi	r30, 0x00	; 0
    6638:	fe 4f       	sbci	r31, 0xFE	; 254
    663a:	83 81       	ldd	r24, Z+3	; 0x03
    663c:	8c 17       	cp	r24, r28
    663e:	08 f0       	brcs	.+2      	; 0x6642 <reg_toLCD+0xea>
    6640:	b6 cf       	rjmp	.-148    	; 0x65ae <reg_toLCD+0x56>
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
				}
			}
			reg++;
		}
		lcd_putc(' ');
    6642:	80 e2       	ldi	r24, 0x20	; 32
    6644:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
	}
}

void reg_toLCD(uint8_t readHWonly){
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6648:	e3 94       	inc	r14
    664a:	87 e0       	ldi	r24, 0x07	; 7
    664c:	8e 15       	cp	r24, r14
    664e:	08 f0       	brcs	.+2      	; 0x6652 <reg_toLCD+0xfa>
    6650:	8c cf       	rjmp	.-232    	; 0x656a <reg_toLCD+0x12>
			}
			reg++;
		}
		lcd_putc(' ');
	}
}
    6652:	df 91       	pop	r29
    6654:	cf 91       	pop	r28
    6656:	1f 91       	pop	r17
    6658:	0f 91       	pop	r16
    665a:	ff 90       	pop	r15
    665c:	ef 90       	pop	r14
    665e:	08 95       	ret

00006660 <reg_ClearOnLCD>:

void reg_ClearOnLCD(){
    6660:	1f 93       	push	r17
    6662:	cf 93       	push	r28
    6664:	df 93       	push	r29
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6666:	10 e0       	ldi	r17, 0x00	; 0
    6668:	1e c0       	rjmp	.+60     	; 0x66a6 <reg_ClearOnLCD+0x46>
		lcd_goto(reg_Out[i].cursor);
    666a:	c1 2f       	mov	r28, r17
    666c:	d0 e0       	ldi	r29, 0x00	; 0
    666e:	cc 0f       	add	r28, r28
    6670:	dd 1f       	adc	r29, r29
    6672:	cc 0f       	add	r28, r28
    6674:	dd 1f       	adc	r29, r29
    6676:	c0 50       	subi	r28, 0x00	; 0
    6678:	de 4f       	sbci	r29, 0xFE	; 254
    667a:	88 81       	ld	r24, Y
    667c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    6680:	29 81       	ldd	r18, Y+1	; 0x01
		uint8_t spaceCount;
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
    6682:	8b 81       	ldd	r24, Y+3	; 0x03
    6684:	9a 81       	ldd	r25, Y+2	; 0x02
    6686:	89 1b       	sub	r24, r25
    6688:	8f 5f       	subi	r24, 0xFF	; 255
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	01 96       	adiw	r24, 0x01	; 1
    668e:	95 95       	asr	r25
    6690:	87 95       	ror	r24
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
    6692:	21 52       	subi	r18, 0x21	; 33
    6694:	2f 35       	cpi	r18, 0x5F	; 95
    6696:	10 f4       	brcc	.+4      	; 0x669c <reg_ClearOnLCD+0x3c>
    6698:	22 e0       	ldi	r18, 0x02	; 2
    669a:	01 c0       	rjmp	.+2      	; 0x669e <reg_ClearOnLCD+0x3e>
    669c:	20 e0       	ldi	r18, 0x00	; 0
		lcd_blank(spaceCount);
    669e:	82 0f       	add	r24, r18
    66a0:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <lcd_blank>
		lcd_putc(' ');
	}
}

void reg_ClearOnLCD(){
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    66a4:	1f 5f       	subi	r17, 0xFF	; 255
    66a6:	18 30       	cpi	r17, 0x08	; 8
    66a8:	00 f3       	brcs	.-64     	; 0x666a <reg_ClearOnLCD+0xa>
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
		lcd_blank(spaceCount);
	}
}
    66aa:	df 91       	pop	r29
    66ac:	cf 91       	pop	r28
    66ae:	1f 91       	pop	r17
    66b0:	08 95       	ret

000066b2 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    66b2:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    66b4:	ee e4       	ldi	r30, 0x4E	; 78
    66b6:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    66b8:	07 c0       	rjmp	.+14     	; 0x66c8 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    66ba:	8f ef       	ldi	r24, 0xFF	; 255
    66bc:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    66be:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    66c0:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    66c2:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    66c4:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    66c6:	91 50       	subi	r25, 0x01	; 1
    66c8:	91 11       	cpse	r25, r1
    66ca:	f7 cf       	rjmp	.-18     	; 0x66ba <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    66cc:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_ReadMidiInMap>
    66d0:	8f 3f       	cpi	r24, 0xFF	; 255
    66d2:	01 f5       	brne	.+64     	; 0x6714 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    66d4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    66d8:	ee e4       	ldi	r30, 0x4E	; 78
    66da:	f8 e0       	ldi	r31, 0x08	; 8
    66dc:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    66de:	84 e2       	ldi	r24, 0x24	; 36
    66e0:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    66e2:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    66e4:	98 e3       	ldi	r25, 0x38	; 56
    66e6:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    66e8:	21 e0       	ldi	r18, 0x01	; 1
    66ea:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    66ec:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    66ee:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    66f0:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    66f2:	22 e0       	ldi	r18, 0x02	; 2
    66f4:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    66f6:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    66f8:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    66fa:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    66fc:	93 e0       	ldi	r25, 0x03	; 3
    66fe:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    6700:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    6702:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    6704:	8e e1       	ldi	r24, 0x1E	; 30
    6706:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6708:	40 e0       	ldi	r20, 0x00	; 0
    670a:	50 e0       	ldi	r21, 0x00	; 0
    670c:	61 e0       	ldi	r22, 0x01	; 1
    670e:	81 e0       	ldi	r24, 0x01	; 1
    6710:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    6714:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_ReadMidiThrough>
    6718:	8f 3f       	cpi	r24, 0xFF	; 255
    671a:	51 f4       	brne	.+20     	; 0x6730 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    671c:	ec e4       	ldi	r30, 0x4C	; 76
    671e:	f8 e0       	ldi	r31, 0x08	; 8
    6720:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    6722:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6724:	40 e0       	ldi	r20, 0x00	; 0
    6726:	50 e0       	ldi	r21, 0x00	; 0
    6728:	61 e0       	ldi	r22, 0x01	; 1
    672a:	81 e0       	ldi	r24, 0x01	; 1
    672c:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <log_putError>
    6730:	08 95       	ret

00006732 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6732:	20 e0       	ldi	r18, 0x00	; 0
    6734:	09 c0       	rjmp	.+18     	; 0x6748 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    6736:	88 0f       	add	r24, r24
    6738:	99 1f       	adc	r25, r25
    673a:	fc 01       	movw	r30, r24
    673c:	e2 5b       	subi	r30, 0xB2	; 178
    673e:	f6 4f       	sbci	r31, 0xF6	; 246
    6740:	8f ef       	ldi	r24, 0xFF	; 255
    6742:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    6744:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6746:	2f 5f       	subi	r18, 0xFF	; 255
    6748:	82 2f       	mov	r24, r18
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	00 97       	sbiw	r24, 0x00	; 0
    674e:	99 f7       	brne	.-26     	; 0x6736 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    6750:	0e 94 42 0b 	call	0x1684	; 0x1684 <eeprom_ReadMidiOutMap>
    6754:	8f 3f       	cpi	r24, 0xFF	; 255
    6756:	b1 f4       	brne	.+44     	; 0x6784 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6758:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    675c:	ee e4       	ldi	r30, 0x4E	; 78
    675e:	f9 e0       	ldi	r31, 0x09	; 9
    6760:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    6762:	91 e0       	ldi	r25, 0x01	; 1
    6764:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    6766:	92 e0       	ldi	r25, 0x02	; 2
    6768:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    676a:	93 e0       	ldi	r25, 0x03	; 3
    676c:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    676e:	e6 e5       	ldi	r30, 0x56	; 86
    6770:	f9 e0       	ldi	r31, 0x09	; 9
    6772:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    6774:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    6776:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    6778:	40 e0       	ldi	r20, 0x00	; 0
    677a:	50 e0       	ldi	r21, 0x00	; 0
    677c:	62 e0       	ldi	r22, 0x02	; 2
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	0c 94 4e 17 	jmp	0x2e9c	; 0x2e9c <log_putError>
    6784:	08 95       	ret

00006786 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    6786:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    6788:	8f ef       	ldi	r24, 0xFF	; 255
    678a:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    678c:	e4 30       	cpi	r30, 0x04	; 4
    678e:	50 f4       	brcc	.+20     	; 0x67a4 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    6790:	f0 e0       	ldi	r31, 0x00	; 0
    6792:	ee 0f       	add	r30, r30
    6794:	ff 1f       	adc	r31, r31
    6796:	e2 5b       	subi	r30, 0xB2	; 178
    6798:	f6 4f       	sbci	r31, 0xF6	; 246
    679a:	20 81       	ld	r18, Z
    679c:	2f 3f       	cpi	r18, 0xFF	; 255
    679e:	11 f0       	breq	.+4      	; 0x67a4 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    67a0:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    67a2:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    67a4:	08 95       	ret

000067a6 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    67a6:	70 e0       	ldi	r23, 0x00	; 0
    67a8:	52 c0       	rjmp	.+164    	; 0x684e <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    67aa:	87 2f       	mov	r24, r23
    67ac:	90 e0       	ldi	r25, 0x00	; 0
    67ae:	24 2f       	mov	r18, r20
    67b0:	30 e0       	ldi	r19, 0x00	; 0
    67b2:	f9 01       	movw	r30, r18
    67b4:	ee 0f       	add	r30, r30
    67b6:	ff 1f       	adc	r31, r31
    67b8:	df 01       	movw	r26, r30
    67ba:	a2 0f       	add	r26, r18
    67bc:	b3 1f       	adc	r27, r19
    67be:	fc 01       	movw	r30, r24
    67c0:	ee 0f       	add	r30, r30
    67c2:	ff 1f       	adc	r31, r31
    67c4:	e8 0f       	add	r30, r24
    67c6:	f9 1f       	adc	r31, r25
    67c8:	ee 0f       	add	r30, r30
    67ca:	ff 1f       	adc	r31, r31
    67cc:	ee 0f       	add	r30, r30
    67ce:	ff 1f       	adc	r31, r31
    67d0:	ea 0f       	add	r30, r26
    67d2:	fb 1f       	adc	r31, r27
    67d4:	e6 5a       	subi	r30, 0xA6	; 166
    67d6:	f6 4f       	sbci	r31, 0xF6	; 246
    67d8:	a0 81       	ld	r26, Z
    67da:	af 3f       	cpi	r26, 0xFF	; 255
    67dc:	d9 f0       	breq	.+54     	; 0x6814 <Midi_updateManualRange+0x6e>
    67de:	f9 01       	movw	r30, r18
    67e0:	ee 0f       	add	r30, r30
    67e2:	ff 1f       	adc	r31, r31
    67e4:	e2 0f       	add	r30, r18
    67e6:	f3 1f       	adc	r31, r19
    67e8:	9c 01       	movw	r18, r24
    67ea:	22 0f       	add	r18, r18
    67ec:	33 1f       	adc	r19, r19
    67ee:	28 0f       	add	r18, r24
    67f0:	39 1f       	adc	r19, r25
    67f2:	22 0f       	add	r18, r18
    67f4:	33 1f       	adc	r19, r19
    67f6:	22 0f       	add	r18, r18
    67f8:	33 1f       	adc	r19, r19
    67fa:	e2 0f       	add	r30, r18
    67fc:	f3 1f       	adc	r31, r19
    67fe:	e6 5a       	subi	r30, 0xA6	; 166
    6800:	f6 4f       	sbci	r31, 0xF6	; 246
    6802:	21 81       	ldd	r18, Z+1	; 0x01
    6804:	2f 3f       	cpi	r18, 0xFF	; 255
    6806:	31 f0       	breq	.+12     	; 0x6814 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6808:	a6 17       	cp	r26, r22
    680a:	08 f4       	brcc	.+2      	; 0x680e <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    680c:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    680e:	52 17       	cp	r21, r18
    6810:	08 f4       	brcc	.+2      	; 0x6814 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    6812:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    6814:	55 23       	and	r21, r21
    6816:	11 f0       	breq	.+4      	; 0x681c <Midi_updateManualRange+0x76>
    6818:	6f 3f       	cpi	r22, 0xFF	; 255
    681a:	49 f4       	brne	.+18     	; 0x682e <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    681c:	88 0f       	add	r24, r24
    681e:	99 1f       	adc	r25, r25
    6820:	fc 01       	movw	r30, r24
    6822:	ec 5b       	subi	r30, 0xBC	; 188
    6824:	f7 4f       	sbci	r31, 0xF7	; 247
    6826:	8f ef       	ldi	r24, 0xFF	; 255
    6828:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    682a:	81 83       	std	Z+1, r24	; 0x01
    682c:	07 c0       	rjmp	.+14     	; 0x683c <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    682e:	88 0f       	add	r24, r24
    6830:	99 1f       	adc	r25, r25
    6832:	fc 01       	movw	r30, r24
    6834:	ec 5b       	subi	r30, 0xBC	; 188
    6836:	f7 4f       	sbci	r31, 0xF7	; 247
    6838:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    683a:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    683c:	4f 5f       	subi	r20, 0xFF	; 255
    683e:	03 c0       	rjmp	.+6      	; 0x6846 <Midi_updateManualRange+0xa0>
    6840:	40 e0       	ldi	r20, 0x00	; 0
    6842:	6f ef       	ldi	r22, 0xFF	; 255
    6844:	50 e0       	ldi	r21, 0x00	; 0
    6846:	44 30       	cpi	r20, 0x04	; 4
    6848:	08 f4       	brcc	.+2      	; 0x684c <Midi_updateManualRange+0xa6>
    684a:	af cf       	rjmp	.-162    	; 0x67aa <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    684c:	7f 5f       	subi	r23, 0xFF	; 255
    684e:	74 30       	cpi	r23, 0x04	; 4
    6850:	b8 f3       	brcs	.-18     	; 0x6840 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    6852:	08 95       	ret

00006854 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    6854:	63 e0       	ldi	r22, 0x03	; 3
    6856:	28 c0       	rjmp	.+80     	; 0x68a8 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    6858:	86 2f       	mov	r24, r22
    685a:	06 2e       	mov	r0, r22
    685c:	00 0c       	add	r0, r0
    685e:	99 0b       	sbc	r25, r25
    6860:	42 2f       	mov	r20, r18
    6862:	02 2e       	mov	r0, r18
    6864:	00 0c       	add	r0, r0
    6866:	55 0b       	sbc	r21, r21
    6868:	fa 01       	movw	r30, r20
    686a:	ee 0f       	add	r30, r30
    686c:	ff 1f       	adc	r31, r31
    686e:	e4 0f       	add	r30, r20
    6870:	f5 1f       	adc	r31, r21
    6872:	ac 01       	movw	r20, r24
    6874:	44 0f       	add	r20, r20
    6876:	55 1f       	adc	r21, r21
    6878:	da 01       	movw	r26, r20
    687a:	a8 0f       	add	r26, r24
    687c:	b9 1f       	adc	r27, r25
    687e:	aa 0f       	add	r26, r26
    6880:	bb 1f       	adc	r27, r27
    6882:	aa 0f       	add	r26, r26
    6884:	bb 1f       	adc	r27, r27
    6886:	ae 0f       	add	r26, r30
    6888:	bf 1f       	adc	r27, r31
    688a:	a6 5a       	subi	r26, 0xA6	; 166
    688c:	b6 4f       	sbci	r27, 0xF6	; 246
    688e:	3f ef       	ldi	r19, 0xFF	; 255
    6890:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    6892:	11 96       	adiw	r26, 0x01	; 1
    6894:	3c 93       	st	X, r19
    6896:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    6898:	fd 01       	movw	r30, r26
    689a:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    689c:	21 50       	subi	r18, 0x01	; 1
    689e:	01 c0       	rjmp	.+2      	; 0x68a2 <init_Manual2Module+0x4e>
    68a0:	23 e0       	ldi	r18, 0x03	; 3
    68a2:	22 23       	and	r18, r18
    68a4:	cc f6       	brge	.-78     	; 0x6858 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    68a6:	61 50       	subi	r22, 0x01	; 1
    68a8:	66 23       	and	r22, r22
    68aa:	d4 f7       	brge	.-12     	; 0x68a0 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    68ac:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <eeprom_ReadManualMap>
    68b0:	8f 3f       	cpi	r24, 0xFF	; 255
    68b2:	79 f5       	brne	.+94     	; 0x6912 <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    68b4:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    68b8:	40 e0       	ldi	r20, 0x00	; 0
    68ba:	50 e0       	ldi	r21, 0x00	; 0
    68bc:	63 e0       	ldi	r22, 0x03	; 3
    68be:	81 e0       	ldi	r24, 0x01	; 1
    68c0:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    68c4:	ea e5       	ldi	r30, 0x5A	; 90
    68c6:	f9 e0       	ldi	r31, 0x09	; 9
    68c8:	84 e2       	ldi	r24, 0x24	; 36
    68ca:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    68cc:	33 e4       	ldi	r19, 0x43	; 67
    68ce:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    68d0:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    68d2:	24 e4       	ldi	r18, 0x44	; 68
    68d4:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    68d6:	9b e5       	ldi	r25, 0x5B	; 91
    68d8:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    68da:	40 e2       	ldi	r20, 0x20	; 32
    68dc:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    68de:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    68e0:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    68e2:	40 e4       	ldi	r20, 0x40	; 64
    68e4:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    68e6:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    68e8:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    68ea:	40 e6       	ldi	r20, 0x60	; 96
    68ec:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    68ee:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    68f0:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    68f2:	30 e8       	ldi	r19, 0x80	; 128
    68f4:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    68f6:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    68f8:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    68fa:	90 ea       	ldi	r25, 0xA0	; 160
    68fc:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    68fe:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    6900:	81 e4       	ldi	r24, 0x41	; 65
    6902:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    6904:	80 ec       	ldi	r24, 0xC0	; 192
    6906:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6908:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    690a:	8d e1       	ldi	r24, 0x1D	; 29
    690c:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    690e:	80 ee       	ldi	r24, 0xE0	; 224
    6910:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    6912:	49 cf       	rjmp	.-366    	; 0x67a6 <Midi_updateManualRange>
    6914:	08 95       	ret

00006916 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    6916:	84 30       	cpi	r24, 0x04	; 4
    6918:	d8 f4       	brcc	.+54     	; 0x6950 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    691a:	90 e0       	ldi	r25, 0x00	; 0
    691c:	fc 01       	movw	r30, r24
    691e:	ee 0f       	add	r30, r30
    6920:	ff 1f       	adc	r31, r31
    6922:	e8 0f       	add	r30, r24
    6924:	f9 1f       	adc	r31, r25
    6926:	ee 0f       	add	r30, r30
    6928:	ff 1f       	adc	r31, r31
    692a:	ee 0f       	add	r30, r30
    692c:	ff 1f       	adc	r31, r31
    692e:	e6 5a       	subi	r30, 0xA6	; 166
    6930:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    6932:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6934:	20 81       	ld	r18, Z
    6936:	62 17       	cp	r22, r18
    6938:	40 f0       	brcs	.+16     	; 0x694a <manualNote_to_moduleBit+0x34>
    693a:	91 81       	ldd	r25, Z+1	; 0x01
    693c:	96 17       	cp	r25, r22
    693e:	28 f0       	brcs	.+10     	; 0x694a <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6940:	92 81       	ldd	r25, Z+2	; 0x02
    6942:	62 1b       	sub	r22, r18
				return (result);
    6944:	80 e0       	ldi	r24, 0x00	; 0
    6946:	96 0f       	add	r25, r22
    6948:	08 95       	ret
			}
			pRange++;
    694a:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    694c:	81 50       	subi	r24, 0x01	; 1
    694e:	91 f7       	brne	.-28     	; 0x6934 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    6950:	8f ef       	ldi	r24, 0xFF	; 255
    6952:	90 e0       	ldi	r25, 0x00	; 0
}
    6954:	08 95       	ret

00006956 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    6956:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6958:	ea e5       	ldi	r30, 0x5A	; 90
    695a:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    695c:	44 e0       	ldi	r20, 0x04	; 4
    695e:	16 c0       	rjmp	.+44     	; 0x698c <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    6960:	52 81       	ldd	r21, Z+2	; 0x02
    6962:	85 17       	cp	r24, r21
    6964:	88 f0       	brcs	.+34     	; 0x6988 <moduleBit_to_manualNote+0x32>
    6966:	68 2f       	mov	r22, r24
    6968:	70 e0       	ldi	r23, 0x00	; 0
    696a:	21 81       	ldd	r18, Z+1	; 0x01
    696c:	a0 81       	ld	r26, Z
    696e:	30 e0       	ldi	r19, 0x00	; 0
    6970:	2a 1b       	sub	r18, r26
    6972:	31 09       	sbc	r19, r1
    6974:	25 0f       	add	r18, r21
    6976:	31 1d       	adc	r19, r1
    6978:	26 17       	cp	r18, r22
    697a:	37 07       	cpc	r19, r23
    697c:	2c f0       	brlt	.+10     	; 0x6988 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    697e:	98 2f       	mov	r25, r24
    6980:	95 1b       	sub	r25, r21
				return(result);
    6982:	8b 2f       	mov	r24, r27
    6984:	9a 0f       	add	r25, r26
    6986:	08 95       	ret
			}
			pRange++;
    6988:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    698a:	41 50       	subi	r20, 0x01	; 1
    698c:	41 11       	cpse	r20, r1
    698e:	e8 cf       	rjmp	.-48     	; 0x6960 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    6990:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    6992:	b5 30       	cpi	r27, 0x05	; 5
    6994:	18 f3       	brcs	.-58     	; 0x695c <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    6996:	8f ef       	ldi	r24, 0xFF	; 255
    6998:	90 e0       	ldi	r25, 0x00	; 0
}
    699a:	08 95       	ret

0000699c <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    699c:	ef 92       	push	r14
    699e:	ff 92       	push	r15
    69a0:	0f 93       	push	r16
    69a2:	1f 93       	push	r17
    69a4:	cf 93       	push	r28
    69a6:	df 93       	push	r29
    69a8:	c8 2f       	mov	r28, r24
    69aa:	06 2f       	mov	r16, r22
    69ac:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    69ae:	b3 df       	rcall	.-154    	; 0x6916 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    69b0:	49 2f       	mov	r20, r25
    69b2:	42 95       	swap	r20
    69b4:	46 95       	lsr	r20
    69b6:	47 70       	andi	r20, 0x07	; 7
    69b8:	21 e0       	ldi	r18, 0x01	; 1
    69ba:	30 e0       	ldi	r19, 0x00	; 0
    69bc:	79 01       	movw	r14, r18
    69be:	02 c0       	rjmp	.+4      	; 0x69c4 <manual_NoteOnOff+0x28>
    69c0:	ee 0c       	add	r14, r14
    69c2:	ff 1c       	adc	r15, r15
    69c4:	4a 95       	dec	r20
    69c6:	e2 f7       	brpl	.-8      	; 0x69c0 <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    69c8:	19 2f       	mov	r17, r25
    69ca:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    69cc:	81 11       	cpse	r24, r1
    69ce:	1a c0       	rjmp	.+52     	; 0x6a04 <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    69d0:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <pipe_Module+0x1>
    69d4:	8e 21       	and	r24, r14
    69d6:	59 f4       	brne	.+22     	; 0x69ee <manual_NoteOnOff+0x52>
    69d8:	dd 23       	and	r29, r29
    69da:	4c f0       	brlt	.+18     	; 0x69ee <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    69dc:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    69de:	d1 30       	cpi	r29, 0x01	; 1
    69e0:	11 f4       	brne	.+4      	; 0x69e6 <manual_NoteOnOff+0x4a>
    69e2:	90 e2       	ldi	r25, 0x20	; 32
    69e4:	01 c0       	rjmp	.+2      	; 0x69e8 <manual_NoteOnOff+0x4c>
    69e6:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    69e8:	8e 2d       	mov	r24, r14
    69ea:	91 2b       	or	r25, r17
    69ec:	1f da       	rcall	.-3010   	; 0x5e2c <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    69ee:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    69f0:	29 f4       	brne	.+10     	; 0x69fc <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    69f2:	6e 2d       	mov	r22, r14
    69f4:	81 2f       	mov	r24, r17
    69f6:	0e 94 da 12 	call	0x25b4	; 0x25b4 <pipe_off>
    69fa:	04 c0       	rjmp	.+8      	; 0x6a04 <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    69fc:	6e 2d       	mov	r22, r14
    69fe:	81 2f       	mov	r24, r17
    6a00:	0e 94 cb 12 	call	0x2596	; 0x2596 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    6a04:	ec 2f       	mov	r30, r28
    6a06:	f0 e0       	ldi	r31, 0x00	; 0
    6a08:	ee 0f       	add	r30, r30
    6a0a:	ff 1f       	adc	r31, r31
    6a0c:	e2 5b       	subi	r30, 0xB2	; 178
    6a0e:	f6 4f       	sbci	r31, 0xF6	; 246
    6a10:	81 81       	ldd	r24, Z+1	; 0x01
    6a12:	8f 3f       	cpi	r24, 0xFF	; 255
    6a14:	a9 f0       	breq	.+42     	; 0x6a40 <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    6a16:	d1 30       	cpi	r29, 0x01	; 1
    6a18:	31 f0       	breq	.+12     	; 0x6a26 <manual_NoteOnOff+0x8a>
    6a1a:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    6a1e:	99 23       	and	r25, r25
    6a20:	21 f0       	breq	.+8      	; 0x6a2a <manual_NoteOnOff+0x8e>
    6a22:	90 e9       	ldi	r25, 0x90	; 144
    6a24:	03 c0       	rjmp	.+6      	; 0x6a2c <manual_NoteOnOff+0x90>
    6a26:	90 e9       	ldi	r25, 0x90	; 144
    6a28:	01 c0       	rjmp	.+2      	; 0x6a2c <manual_NoteOnOff+0x90>
    6a2a:	90 e8       	ldi	r25, 0x80	; 128
    6a2c:	89 2b       	or	r24, r25
    6a2e:	32 d4       	rcall	.+2148   	; 0x7294 <serial1MIDISend>
		serial1MIDISend(note);
    6a30:	80 2f       	mov	r24, r16
    6a32:	30 d4       	rcall	.+2144   	; 0x7294 <serial1MIDISend>
    6a34:	d1 11       	cpse	r29, r1
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6a36:	02 c0       	rjmp	.+4      	; 0x6a3c <manual_NoteOnOff+0xa0>
    6a38:	80 e0       	ldi	r24, 0x00	; 0
    6a3a:	01 c0       	rjmp	.+2      	; 0x6a3e <manual_NoteOnOff+0xa2>
    6a3c:	80 e4       	ldi	r24, 0x40	; 64
    6a3e:	2a d4       	rcall	.+2132   	; 0x7294 <serial1MIDISend>
    6a40:	df 91       	pop	r29
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    6a42:	cf 91       	pop	r28
    6a44:	1f 91       	pop	r17
    6a46:	0f 91       	pop	r16
    6a48:	ff 90       	pop	r15
    6a4a:	ef 90       	pop	r14
    6a4c:	08 95       	ret

00006a4e <midiAllNotesOff>:
    6a4e:	bf 92       	push	r11
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    6a50:	cf 92       	push	r12
    6a52:	df 92       	push	r13
    6a54:	ef 92       	push	r14
    6a56:	ff 92       	push	r15
    6a58:	0f 93       	push	r16
    6a5a:	1f 93       	push	r17
    6a5c:	cf 93       	push	r28
    6a5e:	df 93       	push	r29
    6a60:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    6a62:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    6a64:	4c c0       	rjmp	.+152    	; 0x6afe <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6a66:	0c 2d       	mov	r16, r12
    6a68:	10 e0       	ldi	r17, 0x00	; 0
    6a6a:	cd 2d       	mov	r28, r13
    6a6c:	d0 e0       	ldi	r29, 0x00	; 0
    6a6e:	f8 01       	movw	r30, r16
    6a70:	ee 0f       	add	r30, r30
    6a72:	ff 1f       	adc	r31, r31
    6a74:	ee 0f       	add	r30, r30
    6a76:	ff 1f       	adc	r31, r31
    6a78:	ec 0f       	add	r30, r28
    6a7a:	fd 1f       	adc	r31, r29
    6a7c:	ee 0f       	add	r30, r30
    6a7e:	ff 1f       	adc	r31, r31
    6a80:	ee 0f       	add	r30, r30
    6a82:	ff 1f       	adc	r31, r31
    6a84:	e2 5b       	subi	r30, 0xB2	; 178
    6a86:	f7 4f       	sbci	r31, 0xF7	; 247
    6a88:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    6a8a:	83 e0       	ldi	r24, 0x03	; 3
    6a8c:	8b 15       	cp	r24, r11
    6a8e:	b0 f1       	brcs	.+108    	; 0x6afc <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    6a90:	f8 01       	movw	r30, r16
    6a92:	ee 0f       	add	r30, r30
    6a94:	ff 1f       	adc	r31, r31
    6a96:	ee 0f       	add	r30, r30
    6a98:	ff 1f       	adc	r31, r31
    6a9a:	ec 0f       	add	r30, r28
    6a9c:	fd 1f       	adc	r31, r29
    6a9e:	ee 0f       	add	r30, r30
    6aa0:	ff 1f       	adc	r31, r31
    6aa2:	ee 0f       	add	r30, r30
    6aa4:	ff 1f       	adc	r31, r31
    6aa6:	e2 5b       	subi	r30, 0xB2	; 178
    6aa8:	f7 4f       	sbci	r31, 0xF7	; 247
    6aaa:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6aac:	f2 80       	ldd	r15, Z+2	; 0x02
    6aae:	15 c0       	rjmp	.+42     	; 0x6ada <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6ab0:	ee 24       	eor	r14, r14
    6ab2:	e3 94       	inc	r14
    6ab4:	e6 0e       	add	r14, r22
    6ab6:	f8 01       	movw	r30, r16
    6ab8:	ee 0f       	add	r30, r30
    6aba:	ff 1f       	adc	r31, r31
    6abc:	ee 0f       	add	r30, r30
    6abe:	ff 1f       	adc	r31, r31
    6ac0:	ec 0f       	add	r30, r28
    6ac2:	fd 1f       	adc	r31, r29
    6ac4:	ee 0f       	add	r30, r30
    6ac6:	ff 1f       	adc	r31, r31
    6ac8:	ee 0f       	add	r30, r30
    6aca:	ff 1f       	adc	r31, r31
    6acc:	e2 5b       	subi	r30, 0xB2	; 178
    6ace:	f7 4f       	sbci	r31, 0xF7	; 247
    6ad0:	40 e8       	ldi	r20, 0x80	; 128
    6ad2:	80 81       	ld	r24, Z
    6ad4:	63 df       	rcall	.-314    	; 0x699c <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6ad6:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6ad8:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6ada:	f1 10       	cpse	r15, r1
    6adc:	e9 cf       	rjmp	.-46     	; 0x6ab0 <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6ade:	eb 2d       	mov	r30, r11
    6ae0:	f0 e0       	ldi	r31, 0x00	; 0
    6ae2:	ee 0f       	add	r30, r30
    6ae4:	ff 1f       	adc	r31, r31
    6ae6:	e2 5b       	subi	r30, 0xB2	; 178
    6ae8:	f6 4f       	sbci	r31, 0xF6	; 246
    6aea:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6aec:	80 31       	cpi	r24, 0x10	; 16
    6aee:	30 f4       	brcc	.+12     	; 0x6afc <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6af0:	80 6b       	ori	r24, 0xB0	; 176
    6af2:	d0 d3       	rcall	.+1952   	; 0x7294 <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6af4:	8b e7       	ldi	r24, 0x7B	; 123
    6af6:	ce d3       	rcall	.+1948   	; 0x7294 <serial1MIDISend>
				serial1MIDISend(0);
    6af8:	80 e0       	ldi	r24, 0x00	; 0
    6afa:	cc d3       	rcall	.+1944   	; 0x7294 <serial1MIDISend>
    6afc:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    6afe:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    6b00:	8d 15       	cp	r24, r13
    6b02:	08 f0       	brcs	.+2      	; 0x6b06 <midiAllNotesOff+0xb8>
    6b04:	b0 cf       	rjmp	.-160    	; 0x6a66 <midiAllNotesOff+0x18>
    6b06:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6b08:	cf 91       	pop	r28
    6b0a:	1f 91       	pop	r17
    6b0c:	0f 91       	pop	r16
    6b0e:	ff 90       	pop	r15
    6b10:	ef 90       	pop	r14
    6b12:	df 90       	pop	r13
    6b14:	cf 90       	pop	r12
    6b16:	bf 90       	pop	r11
    6b18:	08 95       	ret

00006b1a <midi_ManualOff>:
    6b1a:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6b1c:	1f 93       	push	r17
    6b1e:	cf 93       	push	r28
    6b20:	df 93       	push	r29
    6b22:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    6b24:	84 30       	cpi	r24, 0x04	; 4
    6b26:	00 f5       	brcc	.+64     	; 0x6b68 <midi_ManualOff+0x4e>
    6b28:	08 2f       	mov	r16, r24
    6b2a:	10 e0       	ldi	r17, 0x00	; 0
    6b2c:	f8 01       	movw	r30, r16
    6b2e:	ee 0f       	add	r30, r30
    6b30:	ff 1f       	adc	r31, r31
    6b32:	ec 5b       	subi	r30, 0xBC	; 188
    6b34:	f7 4f       	sbci	r31, 0xF7	; 247
    6b36:	d0 81       	ld	r29, Z
    6b38:	df 3f       	cpi	r29, 0xFF	; 255
    6b3a:	b1 f0       	breq	.+44     	; 0x6b68 <midi_ManualOff+0x4e>
    6b3c:	f8 01       	movw	r30, r16
    6b3e:	ee 0f       	add	r30, r30
    6b40:	ff 1f       	adc	r31, r31
    6b42:	ec 5b       	subi	r30, 0xBC	; 188
    6b44:	f7 4f       	sbci	r31, 0xF7	; 247
    6b46:	81 81       	ldd	r24, Z+1	; 0x01
    6b48:	8f 3f       	cpi	r24, 0xFF	; 255
    6b4a:	31 f4       	brne	.+12     	; 0x6b58 <midi_ManualOff+0x3e>
    6b4c:	0d c0       	rjmp	.+26     	; 0x6b68 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    6b4e:	40 e8       	ldi	r20, 0x80	; 128
    6b50:	6d 2f       	mov	r22, r29
    6b52:	8c 2f       	mov	r24, r28
    6b54:	23 df       	rcall	.-442    	; 0x699c <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    6b56:	df 5f       	subi	r29, 0xFF	; 255
    6b58:	f8 01       	movw	r30, r16
    6b5a:	ee 0f       	add	r30, r30
    6b5c:	ff 1f       	adc	r31, r31
    6b5e:	ec 5b       	subi	r30, 0xBC	; 188
    6b60:	f7 4f       	sbci	r31, 0xF7	; 247
    6b62:	81 81       	ldd	r24, Z+1	; 0x01
    6b64:	8d 17       	cp	r24, r29
    6b66:	98 f7       	brcc	.-26     	; 0x6b4e <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6b68:	ec 2f       	mov	r30, r28
    6b6a:	f0 e0       	ldi	r31, 0x00	; 0
    6b6c:	ee 0f       	add	r30, r30
    6b6e:	ff 1f       	adc	r31, r31
    6b70:	e2 5b       	subi	r30, 0xB2	; 178
    6b72:	f6 4f       	sbci	r31, 0xF6	; 246
    6b74:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6b76:	80 31       	cpi	r24, 0x10	; 16
    6b78:	30 f4       	brcc	.+12     	; 0x6b86 <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6b7a:	80 6b       	ori	r24, 0xB0	; 176
    6b7c:	8b d3       	rcall	.+1814   	; 0x7294 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6b7e:	8b e7       	ldi	r24, 0x7B	; 123
    6b80:	89 d3       	rcall	.+1810   	; 0x7294 <serial1MIDISend>
		serial1MIDISend(0);
    6b82:	80 e0       	ldi	r24, 0x00	; 0
    6b84:	87 d3       	rcall	.+1806   	; 0x7294 <serial1MIDISend>
    6b86:	df 91       	pop	r29

	}
}
    6b88:	cf 91       	pop	r28
    6b8a:	1f 91       	pop	r17
    6b8c:	0f 91       	pop	r16
    6b8e:	08 95       	ret

00006b90 <midi_AllManualsOff>:
    6b90:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6b92:	c0 e0       	ldi	r28, 0x00	; 0
    6b94:	03 c0       	rjmp	.+6      	; 0x6b9c <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6b96:	8c 2f       	mov	r24, r28
    6b98:	c0 df       	rcall	.-128    	; 0x6b1a <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6b9a:	cf 5f       	subi	r28, 0xFF	; 255
    6b9c:	c4 30       	cpi	r28, 0x04	; 4
    6b9e:	d8 f3       	brcs	.-10     	; 0x6b96 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    6ba0:	cf 91       	pop	r28
    6ba2:	08 95       	ret

00006ba4 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6ba4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <midiRxActivceSensing>
    6ba8:	88 23       	and	r24, r24
    6baa:	39 f0       	breq	.+14     	; 0x6bba <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6bac:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <swTimer+0x6>
    6bb0:	81 11       	cpse	r24, r1
    6bb2:	03 c0       	rjmp	.+6      	; 0x6bba <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6bb4:	ed df       	rcall	.-38     	; 0x6b90 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6bb6:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <midiRxActivceSensing>
    6bba:	08 95       	ret

00006bbc <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6bbc:	0f 93       	push	r16
    6bbe:	1f 93       	push	r17
    6bc0:	cf 93       	push	r28
    6bc2:	df 93       	push	r29
    6bc4:	06 2f       	mov	r16, r22
    6bc6:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6bc8:	d8 2f       	mov	r29, r24
    6bca:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6bcc:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6bce:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6bd0:	3c c0       	rjmp	.+120    	; 0x6c4a <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    6bd2:	4d 2f       	mov	r20, r29
    6bd4:	50 e0       	ldi	r21, 0x00	; 0
    6bd6:	2c 2f       	mov	r18, r28
    6bd8:	30 e0       	ldi	r19, 0x00	; 0
    6bda:	fa 01       	movw	r30, r20
    6bdc:	ee 0f       	add	r30, r30
    6bde:	ff 1f       	adc	r31, r31
    6be0:	ee 0f       	add	r30, r30
    6be2:	ff 1f       	adc	r31, r31
    6be4:	e2 0f       	add	r30, r18
    6be6:	f3 1f       	adc	r31, r19
    6be8:	ee 0f       	add	r30, r30
    6bea:	ff 1f       	adc	r31, r31
    6bec:	ee 0f       	add	r30, r30
    6bee:	ff 1f       	adc	r31, r31
    6bf0:	e2 5b       	subi	r30, 0xB2	; 178
    6bf2:	f7 4f       	sbci	r31, 0xF7	; 247
    6bf4:	80 81       	ld	r24, Z
    6bf6:	84 30       	cpi	r24, 0x04	; 4
    6bf8:	38 f5       	brcc	.+78     	; 0x6c48 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6bfa:	df 01       	movw	r26, r30
    6bfc:	61 81       	ldd	r22, Z+1	; 0x01
    6bfe:	70 2f       	mov	r23, r16
    6c00:	76 1b       	sub	r23, r22
    6c02:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6c04:	0a f1       	brmi	.+66     	; 0x6c48 <midiNote_to_Manual+0x8c>
    6c06:	fd 01       	movw	r30, r26
    6c08:	e2 81       	ldd	r30, Z+2	; 0x02
    6c0a:	f0 e0       	ldi	r31, 0x00	; 0
    6c0c:	a7 2f       	mov	r26, r23
    6c0e:	77 0f       	add	r23, r23
    6c10:	bb 0b       	sbc	r27, r27
    6c12:	ae 17       	cp	r26, r30
    6c14:	bf 07       	cpc	r27, r31
    6c16:	c4 f4       	brge	.+48     	; 0x6c48 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6c18:	fa 01       	movw	r30, r20
    6c1a:	ee 0f       	add	r30, r30
    6c1c:	ff 1f       	adc	r31, r31
    6c1e:	ee 0f       	add	r30, r30
    6c20:	ff 1f       	adc	r31, r31
    6c22:	e2 0f       	add	r30, r18
    6c24:	f3 1f       	adc	r31, r19
    6c26:	ee 0f       	add	r30, r30
    6c28:	ff 1f       	adc	r31, r31
    6c2a:	ee 0f       	add	r30, r30
    6c2c:	ff 1f       	adc	r31, r31
    6c2e:	e2 5b       	subi	r30, 0xB2	; 178
    6c30:	f7 4f       	sbci	r31, 0xF7	; 247
    6c32:	93 81       	ldd	r25, Z+3	; 0x03
    6c34:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6c36:	11 30       	cpi	r17, 0x01	; 1
    6c38:	21 f4       	brne	.+8      	; 0x6c42 <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6c3a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6c3e:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    6c42:	41 2f       	mov	r20, r17
    6c44:	ab de       	rcall	.-682    	; 0x699c <manual_NoteOnOff>
				found |= 0xFF;
    6c46:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6c48:	cf 5f       	subi	r28, 0xFF	; 255
    6c4a:	c4 30       	cpi	r28, 0x04	; 4
    6c4c:	08 f4       	brcc	.+2      	; 0x6c50 <midiNote_to_Manual+0x94>
    6c4e:	c1 cf       	rjmp	.-126    	; 0x6bd2 <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    6c50:	11 30       	cpi	r17, 0x01	; 1
    6c52:	49 f4       	brne	.+18     	; 0x6c66 <midiNote_to_Manual+0xaa>
    6c54:	91 11       	cpse	r25, r1
    6c56:	07 c0       	rjmp	.+14     	; 0x6c66 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6c58:	00 93 23 02 	sts	0x0223, r16	; 0x800223 <midiLastInNote>
		midiLastInChannel = channel;
    6c5c:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    6c60:	8f ef       	ldi	r24, 0xFF	; 255
    6c62:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6c66:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <midiThrough>
    6c6a:	d8 13       	cpse	r29, r24
    6c6c:	1f c0       	rjmp	.+62     	; 0x6cac <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6c6e:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <midiThrough+0x1>
    6c72:	8f 3f       	cpi	r24, 0xFF	; 255
    6c74:	d9 f0       	breq	.+54     	; 0x6cac <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    6c76:	11 30       	cpi	r17, 0x01	; 1
    6c78:	31 f0       	breq	.+12     	; 0x6c86 <midiNote_to_Manual+0xca>
    6c7a:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    6c7e:	99 23       	and	r25, r25
    6c80:	21 f0       	breq	.+8      	; 0x6c8a <midiNote_to_Manual+0xce>
    6c82:	90 e9       	ldi	r25, 0x90	; 144
    6c84:	03 c0       	rjmp	.+6      	; 0x6c8c <midiNote_to_Manual+0xd0>
    6c86:	90 e9       	ldi	r25, 0x90	; 144
    6c88:	01 c0       	rjmp	.+2      	; 0x6c8c <midiNote_to_Manual+0xd0>
    6c8a:	90 e8       	ldi	r25, 0x80	; 128
    6c8c:	89 2b       	or	r24, r25
    6c8e:	02 d3       	rcall	.+1540   	; 0x7294 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    6c90:	80 2f       	mov	r24, r16
    6c92:	00 d3       	rcall	.+1536   	; 0x7294 <serial1MIDISend>
    6c94:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6c96:	06 c0       	rjmp	.+12     	; 0x6ca4 <midiNote_to_Manual+0xe8>
    6c98:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <midi_Setting+0x1>
    6c9c:	81 11       	cpse	r24, r1
    6c9e:	04 c0       	rjmp	.+8      	; 0x6ca8 <midiNote_to_Manual+0xec>
    6ca0:	80 e4       	ldi	r24, 0x40	; 64
    6ca2:	03 c0       	rjmp	.+6      	; 0x6caa <midiNote_to_Manual+0xee>
    6ca4:	80 e4       	ldi	r24, 0x40	; 64
    6ca6:	01 c0       	rjmp	.+2      	; 0x6caa <midiNote_to_Manual+0xee>
    6ca8:	80 e0       	ldi	r24, 0x00	; 0
    6caa:	f4 d2       	rcall	.+1512   	; 0x7294 <serial1MIDISend>
    6cac:	df 91       	pop	r29
		}
	}
}
    6cae:	cf 91       	pop	r28
    6cb0:	1f 91       	pop	r17
    6cb2:	0f 91       	pop	r16
    6cb4:	08 95       	ret

00006cb6 <midiIn_Process>:
    6cb6:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6cb8:	0c f0       	brlt	.+2      	; 0x6cbc <midiIn_Process+0x6>
    6cba:	4f c0       	rjmp	.+158    	; 0x6d5a <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6cbc:	88 3f       	cpi	r24, 0xF8	; 248
    6cbe:	b8 f0       	brcs	.+46     	; 0x6cee <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    6cc0:	8e 3f       	cpi	r24, 0xFE	; 254
    6cc2:	81 f4       	brne	.+32     	; 0x6ce4 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6cc4:	81 e0       	ldi	r24, 0x01	; 1
    6cc6:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6cca:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6ccc:	f8 94       	cli
    6cce:	06 c0       	rjmp	.+12     	; 0x6cdc <midiIn_Process+0x26>
    6cd0:	e0 e5       	ldi	r30, 0x50	; 80
    6cd2:	f2 e0       	ldi	r31, 0x02	; 2
    6cd4:	89 e1       	ldi	r24, 0x19	; 25
    6cd6:	86 83       	std	Z+6, r24	; 0x06
    6cd8:	17 82       	std	Z+7, r1	; 0x07
    6cda:	80 e0       	ldi	r24, 0x00	; 0
    6cdc:	81 11       	cpse	r24, r1
    6cde:	f8 cf       	rjmp	.-16     	; 0x6cd0 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6ce0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6ce2:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    6ce6:	09 f0       	breq	.+2      	; 0x6cea <midiIn_Process+0x34>
    6ce8:	79 c0       	rjmp	.+242    	; 0x6ddc <midiIn_Process+0x126>
				midiAllReset();
    6cea:	44 c9       	rjmp	.-3448   	; 0x5f74 <midiAllReset>
    6cec:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6cee:	80 93 12 0c 	sts	0x0C12, r24	; 0x800c12 <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    6cf2:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6cf6:	90 e8       	ldi	r25, 0x80	; 128
    6cf8:	98 0f       	add	r25, r24
    6cfa:	90 34       	cpi	r25, 0x40	; 64
    6cfc:	20 f4       	brcc	.+8      	; 0x6d06 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6cfe:	82 e0       	ldi	r24, 0x02	; 2
    6d00:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6d04:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6d06:	90 e2       	ldi	r25, 0x20	; 32
    6d08:	98 0f       	add	r25, r24
    6d0a:	90 31       	cpi	r25, 0x10	; 16
    6d0c:	20 f4       	brcc	.+8      	; 0x6d16 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6d0e:	82 e0       	ldi	r24, 0x02	; 2
    6d10:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6d14:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6d16:	82 3f       	cpi	r24, 0xF2	; 242
    6d18:	21 f4       	brne	.+8      	; 0x6d22 <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6d1a:	82 e0       	ldi	r24, 0x02	; 2
    6d1c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6d20:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    6d22:	80 3f       	cpi	r24, 0xF0	; 240
    6d24:	21 f4       	brne	.+8      	; 0x6d2e <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6d26:	8f ef       	ldi	r24, 0xFF	; 255
    6d28:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6d2c:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6d2e:	90 e4       	ldi	r25, 0x40	; 64
    6d30:	98 0f       	add	r25, r24
    6d32:	90 32       	cpi	r25, 0x20	; 32
    6d34:	20 f4       	brcc	.+8      	; 0x6d3e <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    6d36:	81 e0       	ldi	r24, 0x01	; 1
    6d38:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6d3c:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6d3e:	81 3f       	cpi	r24, 0xF1	; 241
    6d40:	11 f0       	breq	.+4      	; 0x6d46 <midiIn_Process+0x90>
    6d42:	83 3f       	cpi	r24, 0xF3	; 243
    6d44:	21 f4       	brne	.+8      	; 0x6d4e <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    6d46:	81 e0       	ldi	r24, 0x01	; 1
    6d48:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6d4c:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    6d4e:	87 3f       	cpi	r24, 0xF7	; 247
    6d50:	09 f4       	brne	.+2      	; 0x6d54 <midiIn_Process+0x9e>
    6d52:	44 c0       	rjmp	.+136    	; 0x6ddc <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    6d54:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <midiDataByteExpected>
    6d58:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6d5a:	e0 91 43 08 	lds	r30, 0x0843	; 0x800843 <midiDataByteCount>
    6d5e:	e8 30       	cpi	r30, 0x08	; 8
    6d60:	40 f4       	brcc	.+16     	; 0x6d72 <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    6d62:	91 e0       	ldi	r25, 0x01	; 1
    6d64:	9e 0f       	add	r25, r30
    6d66:	90 93 43 08 	sts	0x0843, r25	; 0x800843 <midiDataByteCount>
    6d6a:	f0 e0       	ldi	r31, 0x00	; 0
    6d6c:	e6 5f       	subi	r30, 0xF6	; 246
    6d6e:	f3 4f       	sbci	r31, 0xF3	; 243
    6d70:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    6d72:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <midiDataByteExpected>
    6d76:	8f 3f       	cpi	r24, 0xFF	; 255
    6d78:	89 f1       	breq	.+98     	; 0x6ddc <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6d7a:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <midiDataByteCount>
    6d7e:	98 17       	cp	r25, r24
    6d80:	68 f1       	brcs	.+90     	; 0x6ddc <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    6d82:	90 91 12 0c 	lds	r25, 0x0C12	; 0x800c12 <midiLastCommand>
    6d86:	90 3f       	cpi	r25, 0xF0	; 240
    6d88:	38 f5       	brcc	.+78     	; 0x6dd8 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6d8a:	89 2f       	mov	r24, r25
    6d8c:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    6d8e:	90 7f       	andi	r25, 0xF0	; 240
    6d90:	90 39       	cpi	r25, 0x90	; 144
    6d92:	71 f0       	breq	.+28     	; 0x6db0 <midiIn_Process+0xfa>
    6d94:	18 f4       	brcc	.+6      	; 0x6d9c <midiIn_Process+0xe6>
    6d96:	90 38       	cpi	r25, 0x80	; 128
    6d98:	31 f0       	breq	.+12     	; 0x6da6 <midiIn_Process+0xf0>
    6d9a:	1e c0       	rjmp	.+60     	; 0x6dd8 <midiIn_Process+0x122>
    6d9c:	90 3b       	cpi	r25, 0xB0	; 176
    6d9e:	99 f0       	breq	.+38     	; 0x6dc6 <midiIn_Process+0x110>
    6da0:	90 3c       	cpi	r25, 0xC0	; 192
    6da2:	b9 f0       	breq	.+46     	; 0x6dd2 <midiIn_Process+0x11c>
    6da4:	19 c0       	rjmp	.+50     	; 0x6dd8 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6da6:	40 e0       	ldi	r20, 0x00	; 0
    6da8:	60 91 0a 0c 	lds	r22, 0x0C0A	; 0x800c0a <midiDataByte>
    6dac:	07 df       	rcall	.-498    	; 0x6bbc <midiNote_to_Manual>
						break;
    6dae:	14 c0       	rjmp	.+40     	; 0x6dd8 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    6db0:	90 91 0b 0c 	lds	r25, 0x0C0B	; 0x800c0b <midiDataByte+0x1>
    6db4:	91 11       	cpse	r25, r1
    6db6:	02 c0       	rjmp	.+4      	; 0x6dbc <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6db8:	40 e0       	ldi	r20, 0x00	; 0
    6dba:	01 c0       	rjmp	.+2      	; 0x6dbe <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6dbc:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6dbe:	60 91 0a 0c 	lds	r22, 0x0C0A	; 0x800c0a <midiDataByte>
    6dc2:	fc de       	rcall	.-520    	; 0x6bbc <midiNote_to_Manual>
						break;
    6dc4:	09 c0       	rjmp	.+18     	; 0x6dd8 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6dc6:	90 91 0a 0c 	lds	r25, 0x0C0A	; 0x800c0a <midiDataByte>
    6dca:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6dcc:	29 f4       	brne	.+10     	; 0x6dd8 <midiIn_Process+0x122>
    6dce:	3f de       	rcall	.-898    	; 0x6a4e <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    6dd0:	03 c0       	rjmp	.+6      	; 0x6dd8 <midiIn_Process+0x122>
    6dd2:	60 91 0a 0c 	lds	r22, 0x0C0A	; 0x800c0a <midiDataByte>
    6dd6:	23 db       	rcall	.-2490   	; 0x641e <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6dd8:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <midiDataByteCount>
    6ddc:	08 95       	ret

00006dde <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    6dde:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <serESPMidiTmp+0x2>
    6de2:	89 2f       	mov	r24, r25
    6de4:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6de6:	90 7f       	andi	r25, 0xF0	; 240
    6de8:	90 38       	cpi	r25, 0x80	; 128
    6dea:	49 f0       	breq	.+18     	; 0x6dfe <proc_ESPmidi+0x20>
    6dec:	18 f4       	brcc	.+6      	; 0x6df4 <proc_ESPmidi+0x16>
    6dee:	99 23       	and	r25, r25
    6df0:	e1 f0       	breq	.+56     	; 0x6e2a <proc_ESPmidi+0x4c>
    6df2:	08 95       	ret
    6df4:	90 39       	cpi	r25, 0x90	; 144
    6df6:	41 f0       	breq	.+16     	; 0x6e08 <proc_ESPmidi+0x2a>
    6df8:	90 3b       	cpi	r25, 0xB0	; 176
    6dfa:	89 f0       	breq	.+34     	; 0x6e1e <proc_ESPmidi+0x40>
    6dfc:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6dfe:	40 e0       	ldi	r20, 0x00	; 0
    6e00:	60 91 72 16 	lds	r22, 0x1672	; 0x801672 <serESPMidiTmp+0x1>
    6e04:	db ce       	rjmp	.-586    	; 0x6bbc <midiNote_to_Manual>
		break;
    6e06:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6e08:	90 91 71 16 	lds	r25, 0x1671	; 0x801671 <serESPMidiTmp>
    6e0c:	91 11       	cpse	r25, r1
    6e0e:	02 c0       	rjmp	.+4      	; 0x6e14 <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    6e10:	40 e0       	ldi	r20, 0x00	; 0
    6e12:	01 c0       	rjmp	.+2      	; 0x6e16 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    6e14:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6e16:	60 91 72 16 	lds	r22, 0x1672	; 0x801672 <serESPMidiTmp+0x1>
    6e1a:	d0 ce       	rjmp	.-608    	; 0x6bbc <midiNote_to_Manual>
		break;
    6e1c:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6e1e:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <serESPMidiTmp+0x1>
    6e22:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    6e24:	61 f4       	brne	.+24     	; 0x6e3e <proc_ESPmidi+0x60>
    6e26:	13 ce       	rjmp	.-986    	; 0x6a4e <midiAllNotesOff>
    6e28:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6e2a:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <serESPMidiTmp+0x1>
    6e2e:	89 2f       	mov	r24, r25
    6e30:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    6e32:	90 7f       	andi	r25, 0xF0	; 240
    6e34:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6e36:	19 f4       	brne	.+6      	; 0x6e3e <proc_ESPmidi+0x60>
    6e38:	60 91 71 16 	lds	r22, 0x1671	; 0x801671 <serESPMidiTmp>
    6e3c:	f0 ca       	rjmp	.-2592   	; 0x641e <midi_ProgramChange>
    6e3e:	08 95       	ret

00006e40 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    6e40:	bf 92       	push	r11
    6e42:	cf 92       	push	r12
    6e44:	df 92       	push	r13
    6e46:	ef 92       	push	r14
    6e48:	ff 92       	push	r15
    6e4a:	0f 93       	push	r16
    6e4c:	1f 93       	push	r17
    6e4e:	cf 93       	push	r28
    6e50:	df 93       	push	r29
    6e52:	d8 2f       	mov	r29, r24
    6e54:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6e56:	81 d2       	rcall	.+1282   	; 0x735a <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6e58:	0c 2f       	mov	r16, r28
    6e5a:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6e5c:	cf 71       	andi	r28, 0x1F	; 31
    6e5e:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6e60:	00 32       	cpi	r16, 0x20	; 32
    6e62:	09 f4       	brne	.+2      	; 0x6e66 <midiKeyPress_Process+0x26>
    6e64:	b5 c0       	rjmp	.+362    	; 0x6fd0 <midiKeyPress_Process+0x190>
    6e66:	00 23       	and	r16, r16
    6e68:	09 f4       	brne	.+2      	; 0x6e6c <midiKeyPress_Process+0x2c>
    6e6a:	b4 c0       	rjmp	.+360    	; 0x6fd4 <midiKeyPress_Process+0x194>
    6e6c:	b7 c0       	rjmp	.+366    	; 0x6fdc <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6e6e:	d0 ff       	sbrs	r29, 0
    6e70:	ac c0       	rjmp	.+344    	; 0x6fca <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6e72:	20 e2       	ldi	r18, 0x20	; 32
    6e74:	c2 9f       	mul	r28, r18
    6e76:	c0 01       	movw	r24, r0
    6e78:	11 24       	eor	r1, r1
    6e7a:	fb 2c       	mov	r15, r11
    6e7c:	f8 2a       	or	r15, r24
    6e7e:	8f 2d       	mov	r24, r15
    6e80:	6a dd       	rcall	.-1324   	; 0x6956 <moduleBit_to_manualNote>
    6e82:	c8 2e       	mov	r12, r24
    6e84:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6e86:	18 2f       	mov	r17, r24
    6e88:	8f 3f       	cpi	r24, 0xFF	; 255
    6e8a:	09 f4       	brne	.+2      	; 0x6e8e <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6e8c:	94 c0       	rjmp	.+296    	; 0x6fb6 <midiKeyPress_Process+0x176>
    6e8e:	69 2f       	mov	r22, r25
    6e90:	7a dc       	rcall	.-1804   	; 0x6786 <Manual_to_MidiNote>
    6e92:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    6e94:	8f 3f       	cpi	r24, 0xFF	; 255
    6e96:	09 f1       	breq	.+66     	; 0x6eda <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    6e98:	00 32       	cpi	r16, 0x20	; 32
    6e9a:	31 f0       	breq	.+12     	; 0x6ea8 <midiKeyPress_Process+0x68>
    6e9c:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    6ea0:	99 23       	and	r25, r25
    6ea2:	21 f0       	breq	.+8      	; 0x6eac <midiKeyPress_Process+0x6c>
    6ea4:	90 e9       	ldi	r25, 0x90	; 144
    6ea6:	03 c0       	rjmp	.+6      	; 0x6eae <midiKeyPress_Process+0x6e>
    6ea8:	90 e9       	ldi	r25, 0x90	; 144
    6eaa:	01 c0       	rjmp	.+2      	; 0x6eae <midiKeyPress_Process+0x6e>
    6eac:	90 e8       	ldi	r25, 0x80	; 128
    6eae:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    6eb0:	f1 d1       	rcall	.+994    	; 0x7294 <serial1MIDISend>
    6eb2:	8d 2d       	mov	r24, r13
    6eb4:	ef d1       	rcall	.+990    	; 0x7294 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6eb6:	01 11       	cpse	r16, r1
    6eb8:	06 c0       	rjmp	.+12     	; 0x6ec6 <midiKeyPress_Process+0x86>
    6eba:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <midi_Setting+0x1>
    6ebe:	81 11       	cpse	r24, r1
    6ec0:	04 c0       	rjmp	.+8      	; 0x6eca <midiKeyPress_Process+0x8a>
    6ec2:	80 e4       	ldi	r24, 0x40	; 64
    6ec4:	03 c0       	rjmp	.+6      	; 0x6ecc <midiKeyPress_Process+0x8c>
    6ec6:	80 e4       	ldi	r24, 0x40	; 64
    6ec8:	01 c0       	rjmp	.+2      	; 0x6ecc <midiKeyPress_Process+0x8c>
    6eca:	80 e0       	ldi	r24, 0x00	; 0
    6ecc:	e3 d1       	rcall	.+966    	; 0x7294 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    6ece:	00 32       	cpi	r16, 0x20	; 32
    6ed0:	21 f4       	brne	.+8      	; 0x6eda <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    6ed2:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    6ed6:	e0 92 25 02 	sts	0x0225, r14	; 0x800225 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    6eda:	41 e0       	ldi	r20, 0x01	; 1
    6edc:	00 32       	cpi	r16, 0x20	; 32
    6ede:	09 f0       	breq	.+2      	; 0x6ee2 <midiKeyPress_Process+0xa2>
    6ee0:	40 e0       	ldi	r20, 0x00	; 0
    6ee2:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    6ee4:	11 11       	cpse	r17, r1
    6ee6:	19 c0       	rjmp	.+50     	; 0x6f1a <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6ee8:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <midi_Couplers>
    6eec:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6eee:	19 f4       	brne	.+6      	; 0x6ef6 <midiKeyPress_Process+0xb6>
    6ef0:	6e 2d       	mov	r22, r14
    6ef2:	81 e0       	ldi	r24, 0x01	; 1
    6ef4:	53 dd       	rcall	.-1370   	; 0x699c <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    6ef6:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <midi_Couplers+0x1>
    6efa:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6efc:	21 f4       	brne	.+8      	; 0x6f06 <midiKeyPress_Process+0xc6>
    6efe:	4d 2d       	mov	r20, r13
    6f00:	6e 2d       	mov	r22, r14
    6f02:	82 e0       	ldi	r24, 0x02	; 2
    6f04:	4b dd       	rcall	.-1386   	; 0x699c <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    6f06:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <midi_Couplers+0x3>
    6f0a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f0c:	09 f0       	breq	.+2      	; 0x6f10 <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6f0e:	53 c0       	rjmp	.+166    	; 0x6fb6 <midiKeyPress_Process+0x176>
    6f10:	4d 2d       	mov	r20, r13
    6f12:	6e 2d       	mov	r22, r14
    6f14:	83 e0       	ldi	r24, 0x03	; 3
    6f16:	42 dd       	rcall	.-1404   	; 0x699c <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6f18:	4e c0       	rjmp	.+156    	; 0x6fb6 <midiKeyPress_Process+0x176>
    6f1a:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6f1c:	c9 f4       	brne	.+50     	; 0x6f50 <midiKeyPress_Process+0x110>
    6f1e:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <midi_Couplers+0x2>
    6f22:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6f24:	19 f4       	brne	.+6      	; 0x6f2c <midiKeyPress_Process+0xec>
    6f26:	6e 2d       	mov	r22, r14
    6f28:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6f2a:	38 dd       	rcall	.-1424   	; 0x699c <manual_NoteOnOff>
    6f2c:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <midi_Couplers+0x4>
    6f30:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6f32:	21 f4       	brne	.+8      	; 0x6f3c <midiKeyPress_Process+0xfc>
    6f34:	4d 2d       	mov	r20, r13
    6f36:	6e 2d       	mov	r22, r14
    6f38:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6f3a:	30 dd       	rcall	.-1440   	; 0x699c <manual_NoteOnOff>
    6f3c:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <midi_Couplers+0x6>
    6f40:	8f 3f       	cpi	r24, 0xFF	; 255
    6f42:	09 f0       	breq	.+2      	; 0x6f46 <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6f44:	38 c0       	rjmp	.+112    	; 0x6fb6 <midiKeyPress_Process+0x176>
    6f46:	4d 2d       	mov	r20, r13
    6f48:	6e 2d       	mov	r22, r14
    6f4a:	80 e0       	ldi	r24, 0x00	; 0
    6f4c:	27 dd       	rcall	.-1458   	; 0x699c <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6f4e:	33 c0       	rjmp	.+102    	; 0x6fb6 <midiKeyPress_Process+0x176>
    6f50:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    6f52:	c1 f4       	brne	.+48     	; 0x6f84 <midiKeyPress_Process+0x144>
    6f54:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6f58:	8f 3f       	cpi	r24, 0xFF	; 255
    6f5a:	19 f4       	brne	.+6      	; 0x6f62 <midiKeyPress_Process+0x122>
    6f5c:	6e 2d       	mov	r22, r14
    6f5e:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6f60:	1d dd       	rcall	.-1478   	; 0x699c <manual_NoteOnOff>
    6f62:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6f66:	8f 3f       	cpi	r24, 0xFF	; 255
    6f68:	21 f4       	brne	.+8      	; 0x6f72 <midiKeyPress_Process+0x132>
    6f6a:	4d 2d       	mov	r20, r13
    6f6c:	6e 2d       	mov	r22, r14
    6f6e:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6f70:	15 dd       	rcall	.-1494   	; 0x699c <manual_NoteOnOff>
    6f72:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6f76:	8f 3f       	cpi	r24, 0xFF	; 255
    6f78:	f1 f4       	brne	.+60     	; 0x6fb6 <midiKeyPress_Process+0x176>
    6f7a:	4d 2d       	mov	r20, r13
    6f7c:	6e 2d       	mov	r22, r14
    6f7e:	81 e0       	ldi	r24, 0x01	; 1
    6f80:	0d dd       	rcall	.-1510   	; 0x699c <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6f82:	19 c0       	rjmp	.+50     	; 0x6fb6 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    6f84:	13 30       	cpi	r17, 0x03	; 3
    6f86:	b9 f4       	brne	.+46     	; 0x6fb6 <midiKeyPress_Process+0x176>
    6f88:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6f8c:	8f 3f       	cpi	r24, 0xFF	; 255
    6f8e:	19 f4       	brne	.+6      	; 0x6f96 <midiKeyPress_Process+0x156>
    6f90:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    6f92:	80 e0       	ldi	r24, 0x00	; 0
    6f94:	03 dd       	rcall	.-1530   	; 0x699c <manual_NoteOnOff>
    6f96:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f9c:	21 f4       	brne	.+8      	; 0x6fa6 <midiKeyPress_Process+0x166>
    6f9e:	4d 2d       	mov	r20, r13
    6fa0:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    6fa2:	81 e0       	ldi	r24, 0x01	; 1
    6fa4:	fb dc       	rcall	.-1546   	; 0x699c <manual_NoteOnOff>
    6fa6:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6faa:	8f 3f       	cpi	r24, 0xFF	; 255
    6fac:	21 f4       	brne	.+8      	; 0x6fb6 <midiKeyPress_Process+0x176>
    6fae:	4d 2d       	mov	r20, r13
    6fb0:	6e 2d       	mov	r22, r14
    6fb2:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    6fb4:	f3 dc       	rcall	.-1562   	; 0x699c <manual_NoteOnOff>
    6fb6:	8f 2d       	mov	r24, r15
    6fb8:	74 d8       	rcall	.-3864   	; 0x60a2 <moduleBit_to_registerNr>
    6fba:	00 32       	cpi	r16, 0x20	; 32
    6fbc:	11 f4       	brne	.+4      	; 0x6fc2 <midiKeyPress_Process+0x182>
    6fbe:	20 e8       	ldi	r18, 0x80	; 128
    6fc0:	01 c0       	rjmp	.+2      	; 0x6fc4 <midiKeyPress_Process+0x184>
    6fc2:	20 e0       	ldi	r18, 0x00	; 0
    6fc4:	82 2b       	or	r24, r18
    6fc6:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6fca:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6fcc:	cf 5f       	subi	r28, 0xFF	; 255
    6fce:	03 c0       	rjmp	.+6      	; 0x6fd6 <midiKeyPress_Process+0x196>
    6fd0:	c0 e0       	ldi	r28, 0x00	; 0
    6fd2:	01 c0       	rjmp	.+2      	; 0x6fd6 <midiKeyPress_Process+0x196>
    6fd4:	c0 e0       	ldi	r28, 0x00	; 0
    6fd6:	c8 30       	cpi	r28, 0x08	; 8
    6fd8:	08 f4       	brcc	.+2      	; 0x6fdc <midiKeyPress_Process+0x19c>
    6fda:	49 cf       	rjmp	.-366    	; 0x6e6e <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6fdc:	df 91       	pop	r29
    6fde:	cf 91       	pop	r28
    6fe0:	1f 91       	pop	r17
    6fe2:	0f 91       	pop	r16
    6fe4:	ff 90       	pop	r15
    6fe6:	ef 90       	pop	r14
    6fe8:	df 90       	pop	r13
    6fea:	cf 90       	pop	r12
    6fec:	bf 90       	pop	r11
    6fee:	08 95       	ret

00006ff0 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	if (midiThrough.OutChannel <= MIDI_CHANNEL_16) {
    6ff0:	80 91 4d 08 	lds	r24, 0x084D	; 0x80084d <midiThrough+0x1>
    6ff4:	80 31       	cpi	r24, 0x10	; 16
    6ff6:	30 f4       	brcc	.+12     	; 0x7004 <midiSendAllNotesOff+0x14>
		serial1MIDISend(MIDI_CTRLCHG | (midiThrough.OutChannel));
    6ff8:	80 6b       	ori	r24, 0xB0	; 176
    6ffa:	4c d1       	rcall	.+664    	; 0x7294 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6ffc:	8b e7       	ldi	r24, 0x7B	; 123
    6ffe:	4a d1       	rcall	.+660    	; 0x7294 <serial1MIDISend>
		serial1MIDISend(0);
    7000:	80 e0       	ldi	r24, 0x00	; 0
    7002:	48 c1       	rjmp	.+656    	; 0x7294 <serial1MIDISend>
    7004:	08 95       	ret

00007006 <midi_SendActiveSense>:
    7006:	8e ef       	ldi	r24, 0xFE	; 254
// 		}
// 	}
}

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    7008:	45 c1       	rjmp	.+650    	; 0x7294 <serial1MIDISend>
    700a:	08 95       	ret

0000700c <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    700c:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    7010:	88 23       	and	r24, r24
    7012:	21 f0       	breq	.+8      	; 0x701c <midi_CheckTxActiveSense+0x10>
    7014:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    7018:	8f 3f       	cpi	r24, 0xFF	; 255
    701a:	99 f4       	brne	.+38     	; 0x7042 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    701c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    701e:	f8 94       	cli
    7020:	81 e0       	ldi	r24, 0x01	; 1
    7022:	06 c0       	rjmp	.+12     	; 0x7030 <midi_CheckTxActiveSense+0x24>
    7024:	e0 e5       	ldi	r30, 0x50	; 80
    7026:	f2 e0       	ldi	r31, 0x02	; 2
    7028:	8a e0       	ldi	r24, 0x0A	; 10
    702a:	80 8b       	std	Z+16, r24	; 0x10
    702c:	11 8a       	std	Z+17, r1	; 0x11
    702e:	80 e0       	ldi	r24, 0x00	; 0
    7030:	81 11       	cpse	r24, r1
    7032:	f8 cf       	rjmp	.-16     	; 0x7024 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7034:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    7036:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <midi_Setting>
    703a:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    703c:	e4 df       	rcall	.-56     	; 0x7006 <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    703e:	10 92 23 14 	sts	0x1423, r1	; 0x801423 <midiTxLastCmd>
    7042:	08 95       	ret

00007044 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    7044:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    7048:	8f e1       	ldi	r24, 0x1F	; 31
    704a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    704e:	e9 ec       	ldi	r30, 0xC9	; 201
    7050:	f0 e0       	ldi	r31, 0x00	; 0
    7052:	80 81       	ld	r24, Z
    7054:	88 69       	ori	r24, 0x98	; 152
    7056:	80 83       	st	Z, r24
    7058:	ea ec       	ldi	r30, 0xCA	; 202
    705a:	f0 e0       	ldi	r31, 0x00	; 0
    705c:	80 81       	ld	r24, Z
    705e:	86 60       	ori	r24, 0x06	; 6
    7060:	80 83       	st	Z, r24
    7062:	10 92 6a 16 	sts	0x166A, r1	; 0x80166a <midiRxInIndex>
    7066:	10 92 79 16 	sts	0x1679, r1	; 0x801679 <midiRxOutIndex>
    706a:	10 92 15 14 	sts	0x1415, r1	; 0x801415 <midiTxInIndex>
    706e:	10 92 22 14 	sts	0x1422, r1	; 0x801422 <midiTxOutIndex>
    7072:	10 92 21 14 	sts	0x1421, r1	; 0x801421 <midiRxOvfl>
    7076:	10 92 26 14 	sts	0x1426, r1	; 0x801426 <midiTxOvfl>
    707a:	10 92 75 16 	sts	0x1675, r1	; 0x801675 <midiRxOvflCount>
    707e:	10 92 7c 16 	sts	0x167C, r1	; 0x80167c <midiTxOvflCount>
    7082:	10 92 67 15 	sts	0x1567, r1	; 0x801567 <midiRxBuffUsage>
    7086:	10 92 70 16 	sts	0x1670, r1	; 0x801670 <midiTxBuffUsage>
    708a:	10 92 23 14 	sts	0x1423, r1	; 0x801423 <midiTxLastCmd>
    708e:	08 95       	ret

00007090 <__vector_36>:
    7090:	1f 92       	push	r1
    7092:	0f 92       	push	r0
    7094:	0f b6       	in	r0, 0x3f	; 63
    7096:	0f 92       	push	r0
    7098:	11 24       	eor	r1, r1
    709a:	0b b6       	in	r0, 0x3b	; 59
    709c:	0f 92       	push	r0
    709e:	8f 93       	push	r24
    70a0:	9f 93       	push	r25
    70a2:	ef 93       	push	r30
    70a4:	ff 93       	push	r31
    70a6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    70aa:	e0 91 6a 16 	lds	r30, 0x166A	; 0x80166a <midiRxInIndex>
    70ae:	f0 e0       	ldi	r31, 0x00	; 0
    70b0:	e9 59       	subi	r30, 0x99	; 153
    70b2:	fb 4e       	sbci	r31, 0xEB	; 235
    70b4:	80 83       	st	Z, r24
    70b6:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <midiRxInIndex>
    70ba:	8f 5f       	subi	r24, 0xFF	; 255
    70bc:	90 91 79 16 	lds	r25, 0x1679	; 0x801679 <midiRxOutIndex>
    70c0:	89 13       	cpse	r24, r25
    70c2:	0e c0       	rjmp	.+28     	; 0x70e0 <__vector_36+0x50>
    70c4:	80 91 75 16 	lds	r24, 0x1675	; 0x801675 <midiRxOvflCount>
    70c8:	88 23       	and	r24, r24
    70ca:	31 f0       	breq	.+12     	; 0x70d8 <__vector_36+0x48>
    70cc:	8f 3f       	cpi	r24, 0xFF	; 255
    70ce:	51 f0       	breq	.+20     	; 0x70e4 <__vector_36+0x54>
    70d0:	8f 5f       	subi	r24, 0xFF	; 255
    70d2:	80 93 75 16 	sts	0x1675, r24	; 0x801675 <midiRxOvflCount>
    70d6:	06 c0       	rjmp	.+12     	; 0x70e4 <__vector_36+0x54>
    70d8:	81 e0       	ldi	r24, 0x01	; 1
    70da:	80 93 75 16 	sts	0x1675, r24	; 0x801675 <midiRxOvflCount>
    70de:	02 c0       	rjmp	.+4      	; 0x70e4 <__vector_36+0x54>
    70e0:	80 93 6a 16 	sts	0x166A, r24	; 0x80166a <midiRxInIndex>
    70e4:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <midiRxInIndex>
    70e8:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <midiRxOutIndex>
    70ec:	89 17       	cp	r24, r25
    70ee:	30 f4       	brcc	.+12     	; 0x70fc <__vector_36+0x6c>
    70f0:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <midiRxInIndex>
    70f4:	90 91 79 16 	lds	r25, 0x1679	; 0x801679 <midiRxOutIndex>
    70f8:	89 1b       	sub	r24, r25
    70fa:	05 c0       	rjmp	.+10     	; 0x7106 <__vector_36+0x76>
    70fc:	80 91 6a 16 	lds	r24, 0x166A	; 0x80166a <midiRxInIndex>
    7100:	90 91 79 16 	lds	r25, 0x1679	; 0x801679 <midiRxOutIndex>
    7104:	89 1b       	sub	r24, r25
    7106:	90 91 67 15 	lds	r25, 0x1567	; 0x801567 <midiRxBuffUsage>
    710a:	98 17       	cp	r25, r24
    710c:	10 f4       	brcc	.+4      	; 0x7112 <__vector_36+0x82>
    710e:	80 93 67 15 	sts	0x1567, r24	; 0x801567 <midiRxBuffUsage>
    7112:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <midiRxBytesCount>
    7116:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <midiRxBytesCount+0x1>
    711a:	01 96       	adiw	r24, 0x01	; 1
    711c:	90 93 00 19 	sts	0x1900, r25	; 0x801900 <midiRxBytesCount+0x1>
    7120:	80 93 ff 18 	sts	0x18FF, r24	; 0x8018ff <midiRxBytesCount>
    7124:	ff 91       	pop	r31
    7126:	ef 91       	pop	r30
    7128:	9f 91       	pop	r25
    712a:	8f 91       	pop	r24
    712c:	0f 90       	pop	r0
    712e:	0b be       	out	0x3b, r0	; 59
    7130:	0f 90       	pop	r0
    7132:	0f be       	out	0x3f, r0	; 63
    7134:	0f 90       	pop	r0
    7136:	1f 90       	pop	r1
    7138:	18 95       	reti

0000713a <__vector_37>:
    713a:	1f 92       	push	r1
    713c:	0f 92       	push	r0
    713e:	0f b6       	in	r0, 0x3f	; 63
    7140:	0f 92       	push	r0
    7142:	11 24       	eor	r1, r1
    7144:	0b b6       	in	r0, 0x3b	; 59
    7146:	0f 92       	push	r0
    7148:	8f 93       	push	r24
    714a:	9f 93       	push	r25
    714c:	ef 93       	push	r30
    714e:	ff 93       	push	r31
    7150:	90 91 22 14 	lds	r25, 0x1422	; 0x801422 <midiTxOutIndex>
    7154:	80 91 15 14 	lds	r24, 0x1415	; 0x801415 <midiTxInIndex>
    7158:	98 17       	cp	r25, r24
    715a:	b9 f0       	breq	.+46     	; 0x718a <__vector_37+0x50>
    715c:	e0 91 22 14 	lds	r30, 0x1422	; 0x801422 <midiTxOutIndex>
    7160:	f0 e0       	ldi	r31, 0x00	; 0
    7162:	e8 59       	subi	r30, 0x98	; 152
    7164:	fa 4e       	sbci	r31, 0xEA	; 234
    7166:	80 81       	ld	r24, Z
    7168:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    716c:	80 91 22 14 	lds	r24, 0x1422	; 0x801422 <midiTxOutIndex>
    7170:	8f 5f       	subi	r24, 0xFF	; 255
    7172:	80 93 22 14 	sts	0x1422, r24	; 0x801422 <midiTxOutIndex>
    7176:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <midiTxBytesCount>
    717a:	90 91 77 16 	lds	r25, 0x1677	; 0x801677 <midiTxBytesCount+0x1>
    717e:	01 96       	adiw	r24, 0x01	; 1
    7180:	90 93 77 16 	sts	0x1677, r25	; 0x801677 <midiTxBytesCount+0x1>
    7184:	80 93 76 16 	sts	0x1676, r24	; 0x801676 <midiTxBytesCount>
    7188:	05 c0       	rjmp	.+10     	; 0x7194 <__vector_37+0x5a>
    718a:	e9 ec       	ldi	r30, 0xC9	; 201
    718c:	f0 e0       	ldi	r31, 0x00	; 0
    718e:	80 81       	ld	r24, Z
    7190:	8f 7d       	andi	r24, 0xDF	; 223
    7192:	80 83       	st	Z, r24
    7194:	ff 91       	pop	r31
    7196:	ef 91       	pop	r30
    7198:	9f 91       	pop	r25
    719a:	8f 91       	pop	r24
    719c:	0f 90       	pop	r0
    719e:	0b be       	out	0x3b, r0	; 59
    71a0:	0f 90       	pop	r0
    71a2:	0f be       	out	0x3f, r0	; 63
    71a4:	0f 90       	pop	r0
    71a6:	1f 90       	pop	r1
    71a8:	18 95       	reti

000071aa <serial0SER_USBSend>:
    71aa:	e0 91 fd 18 	lds	r30, 0x18FD	; 0x8018fd <serUSBTxInIndex>
    71ae:	f0 91 fe 18 	lds	r31, 0x18FE	; 0x8018fe <serUSBTxInIndex+0x1>
    71b2:	a1 ec       	ldi	r26, 0xC1	; 193
    71b4:	b0 e0       	ldi	r27, 0x00	; 0
    71b6:	9c 91       	ld	r25, X
    71b8:	9f 7d       	andi	r25, 0xDF	; 223
    71ba:	9c 93       	st	X, r25
    71bc:	af 01       	movw	r20, r30
    71be:	4f 5f       	subi	r20, 0xFF	; 255
    71c0:	5f 4f       	sbci	r21, 0xFF	; 255
    71c2:	80 83       	st	Z, r24
    71c4:	84 e1       	ldi	r24, 0x14	; 20
    71c6:	42 31       	cpi	r20, 0x12	; 18
    71c8:	58 07       	cpc	r21, r24
    71ca:	19 f0       	breq	.+6      	; 0x71d2 <serial0SER_USBSend+0x28>
    71cc:	10 f0       	brcs	.+4      	; 0x71d2 <serial0SER_USBSend+0x28>
    71ce:	43 e1       	ldi	r20, 0x13	; 19
    71d0:	5c e0       	ldi	r21, 0x0C	; 12
    71d2:	9f b7       	in	r25, 0x3f	; 63
    71d4:	f8 94       	cli
    71d6:	81 e0       	ldi	r24, 0x01	; 1
    71d8:	05 c0       	rjmp	.+10     	; 0x71e4 <serial0SER_USBSend+0x3a>
    71da:	20 91 13 14 	lds	r18, 0x1413	; 0x801413 <serUSBTxOutIndex>
    71de:	30 91 14 14 	lds	r19, 0x1414	; 0x801414 <serUSBTxOutIndex+0x1>
    71e2:	80 e0       	ldi	r24, 0x00	; 0
    71e4:	81 11       	cpse	r24, r1
    71e6:	f9 cf       	rjmp	.-14     	; 0x71da <serial0SER_USBSend+0x30>
    71e8:	9f bf       	out	0x3f, r25	; 63
    71ea:	42 17       	cp	r20, r18
    71ec:	53 07       	cpc	r21, r19
    71ee:	49 f4       	brne	.+18     	; 0x7202 <serial0SER_USBSend+0x58>
    71f0:	8f ef       	ldi	r24, 0xFF	; 255
    71f2:	80 93 6f 16 	sts	0x166F, r24	; 0x80166f <serUSBOvflFlag>
    71f6:	e1 ec       	ldi	r30, 0xC1	; 193
    71f8:	f0 e0       	ldi	r31, 0x00	; 0
    71fa:	80 81       	ld	r24, Z
    71fc:	80 62       	ori	r24, 0x20	; 32
    71fe:	80 83       	st	Z, r24
    7200:	08 95       	ret
    7202:	50 93 fe 18 	sts	0x18FE, r21	; 0x8018fe <serUSBTxInIndex+0x1>
    7206:	40 93 fd 18 	sts	0x18FD, r20	; 0x8018fd <serUSBTxInIndex>
    720a:	e1 ec       	ldi	r30, 0xC1	; 193
    720c:	f0 e0       	ldi	r31, 0x00	; 0
    720e:	80 81       	ld	r24, Z
    7210:	80 62       	ori	r24, 0x20	; 32
    7212:	80 83       	st	Z, r24
    7214:	08 95       	ret

00007216 <serial0USB_logMIDIin>:
    7216:	cf 93       	push	r28
    7218:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <serUSB_Active>
    721c:	99 23       	and	r25, r25
    721e:	61 f0       	breq	.+24     	; 0x7238 <serial0USB_logMIDIin+0x22>
    7220:	c8 2f       	mov	r28, r24
    7222:	89 e6       	ldi	r24, 0x69	; 105
    7224:	c2 df       	rcall	.-124    	; 0x71aa <serial0SER_USBSend>
    7226:	8c 2f       	mov	r24, r28
    7228:	82 95       	swap	r24
    722a:	8f 70       	andi	r24, 0x0F	; 15
    722c:	b5 d2       	rcall	.+1386   	; 0x7798 <nibbleToChr>
    722e:	bd df       	rcall	.-134    	; 0x71aa <serial0SER_USBSend>
    7230:	8c 2f       	mov	r24, r28
    7232:	8f 70       	andi	r24, 0x0F	; 15
    7234:	b1 d2       	rcall	.+1378   	; 0x7798 <nibbleToChr>
    7236:	b9 df       	rcall	.-142    	; 0x71aa <serial0SER_USBSend>
    7238:	cf 91       	pop	r28
    723a:	08 95       	ret

0000723c <serial1MIDIReadRx>:
    723c:	cf 93       	push	r28
    723e:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <midiRxInIndex>
    7242:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <midiRxOutIndex>
    7246:	98 17       	cp	r25, r24
    7248:	71 f0       	breq	.+28     	; 0x7266 <serial1MIDIReadRx+0x2a>
    724a:	e0 91 79 16 	lds	r30, 0x1679	; 0x801679 <midiRxOutIndex>
    724e:	f0 e0       	ldi	r31, 0x00	; 0
    7250:	e9 59       	subi	r30, 0x99	; 153
    7252:	fb 4e       	sbci	r31, 0xEB	; 235
    7254:	c0 81       	ld	r28, Z
    7256:	8c 2f       	mov	r24, r28
    7258:	de df       	rcall	.-68     	; 0x7216 <serial0USB_logMIDIin>
    725a:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <midiRxOutIndex>
    725e:	8f 5f       	subi	r24, 0xFF	; 255
    7260:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <midiRxOutIndex>
    7264:	01 c0       	rjmp	.+2      	; 0x7268 <serial1MIDIReadRx+0x2c>
    7266:	cd ef       	ldi	r28, 0xFD	; 253
    7268:	8c 2f       	mov	r24, r28
    726a:	cf 91       	pop	r28
    726c:	08 95       	ret

0000726e <serial0USB_logMIDIout>:
    726e:	cf 93       	push	r28
    7270:	90 91 78 16 	lds	r25, 0x1678	; 0x801678 <serUSB_Active>
    7274:	99 23       	and	r25, r25
    7276:	61 f0       	breq	.+24     	; 0x7290 <serial0USB_logMIDIout+0x22>
    7278:	c8 2f       	mov	r28, r24
    727a:	8f e6       	ldi	r24, 0x6F	; 111
    727c:	96 df       	rcall	.-212    	; 0x71aa <serial0SER_USBSend>
    727e:	8c 2f       	mov	r24, r28
    7280:	82 95       	swap	r24
    7282:	8f 70       	andi	r24, 0x0F	; 15
    7284:	89 d2       	rcall	.+1298   	; 0x7798 <nibbleToChr>
    7286:	91 df       	rcall	.-222    	; 0x71aa <serial0SER_USBSend>
    7288:	8c 2f       	mov	r24, r28
    728a:	8f 70       	andi	r24, 0x0F	; 15
    728c:	85 d2       	rcall	.+1290   	; 0x7798 <nibbleToChr>
    728e:	8d df       	rcall	.-230    	; 0x71aa <serial0SER_USBSend>
    7290:	cf 91       	pop	r28
    7292:	08 95       	ret

00007294 <serial1MIDISend>:
    7294:	cf 93       	push	r28
    7296:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    729a:	99 23       	and	r25, r25
    729c:	71 f0       	breq	.+28     	; 0x72ba <serial1MIDISend+0x26>
    729e:	88 23       	and	r24, r24
    72a0:	64 f4       	brge	.+24     	; 0x72ba <serial1MIDISend+0x26>
    72a2:	90 91 23 14 	lds	r25, 0x1423	; 0x801423 <midiTxLastCmd>
    72a6:	89 17       	cp	r24, r25
    72a8:	09 f4       	brne	.+2      	; 0x72ac <serial1MIDISend+0x18>
    72aa:	55 c0       	rjmp	.+170    	; 0x7356 <serial1MIDISend+0xc2>
    72ac:	80 3a       	cpi	r24, 0xA0	; 160
    72ae:	18 f4       	brcc	.+6      	; 0x72b6 <serial1MIDISend+0x22>
    72b0:	80 93 23 14 	sts	0x1423, r24	; 0x801423 <midiTxLastCmd>
    72b4:	02 c0       	rjmp	.+4      	; 0x72ba <serial1MIDISend+0x26>
    72b6:	10 92 23 14 	sts	0x1423, r1	; 0x801423 <midiTxLastCmd>
    72ba:	2f b7       	in	r18, 0x3f	; 63
    72bc:	f8 94       	cli
    72be:	91 e0       	ldi	r25, 0x01	; 1
    72c0:	06 c0       	rjmp	.+12     	; 0x72ce <serial1MIDISend+0x3a>
    72c2:	e0 e5       	ldi	r30, 0x50	; 80
    72c4:	f2 e0       	ldi	r31, 0x02	; 2
    72c6:	9a e0       	ldi	r25, 0x0A	; 10
    72c8:	90 8b       	std	Z+16, r25	; 0x10
    72ca:	11 8a       	std	Z+17, r1	; 0x11
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	91 11       	cpse	r25, r1
    72d0:	f8 cf       	rjmp	.-16     	; 0x72c2 <serial1MIDISend+0x2e>
    72d2:	c8 2f       	mov	r28, r24
    72d4:	2f bf       	out	0x3f, r18	; 63
    72d6:	e9 ec       	ldi	r30, 0xC9	; 201
    72d8:	f0 e0       	ldi	r31, 0x00	; 0
    72da:	80 81       	ld	r24, Z
    72dc:	8f 7d       	andi	r24, 0xDF	; 223
    72de:	80 83       	st	Z, r24
    72e0:	8c 2f       	mov	r24, r28
    72e2:	c5 df       	rcall	.-118    	; 0x726e <serial0USB_logMIDIout>
    72e4:	e0 91 15 14 	lds	r30, 0x1415	; 0x801415 <midiTxInIndex>
    72e8:	f0 e0       	ldi	r31, 0x00	; 0
    72ea:	e8 59       	subi	r30, 0x98	; 152
    72ec:	fa 4e       	sbci	r31, 0xEA	; 234
    72ee:	c0 83       	st	Z, r28
    72f0:	80 91 15 14 	lds	r24, 0x1415	; 0x801415 <midiTxInIndex>
    72f4:	8f 5f       	subi	r24, 0xFF	; 255
    72f6:	90 91 22 14 	lds	r25, 0x1422	; 0x801422 <midiTxOutIndex>
    72fa:	89 13       	cpse	r24, r25
    72fc:	0e c0       	rjmp	.+28     	; 0x731a <serial1MIDISend+0x86>
    72fe:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <midiTxOvflCount>
    7302:	88 23       	and	r24, r24
    7304:	31 f0       	breq	.+12     	; 0x7312 <serial1MIDISend+0x7e>
    7306:	8f 3f       	cpi	r24, 0xFF	; 255
    7308:	51 f0       	breq	.+20     	; 0x731e <serial1MIDISend+0x8a>
    730a:	8f 5f       	subi	r24, 0xFF	; 255
    730c:	80 93 7c 16 	sts	0x167C, r24	; 0x80167c <midiTxOvflCount>
    7310:	06 c0       	rjmp	.+12     	; 0x731e <serial1MIDISend+0x8a>
    7312:	81 e0       	ldi	r24, 0x01	; 1
    7314:	80 93 7c 16 	sts	0x167C, r24	; 0x80167c <midiTxOvflCount>
    7318:	02 c0       	rjmp	.+4      	; 0x731e <serial1MIDISend+0x8a>
    731a:	80 93 15 14 	sts	0x1415, r24	; 0x801415 <midiTxInIndex>
    731e:	90 91 15 14 	lds	r25, 0x1415	; 0x801415 <midiTxInIndex>
    7322:	80 91 22 14 	lds	r24, 0x1422	; 0x801422 <midiTxOutIndex>
    7326:	89 17       	cp	r24, r25
    7328:	30 f4       	brcc	.+12     	; 0x7336 <serial1MIDISend+0xa2>
    732a:	80 91 15 14 	lds	r24, 0x1415	; 0x801415 <midiTxInIndex>
    732e:	90 91 22 14 	lds	r25, 0x1422	; 0x801422 <midiTxOutIndex>
    7332:	89 1b       	sub	r24, r25
    7334:	05 c0       	rjmp	.+10     	; 0x7340 <serial1MIDISend+0xac>
    7336:	80 91 15 14 	lds	r24, 0x1415	; 0x801415 <midiTxInIndex>
    733a:	90 91 22 14 	lds	r25, 0x1422	; 0x801422 <midiTxOutIndex>
    733e:	89 1b       	sub	r24, r25
    7340:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <midiTxBuffUsage>
    7344:	98 17       	cp	r25, r24
    7346:	10 f4       	brcc	.+4      	; 0x734c <serial1MIDISend+0xb8>
    7348:	80 93 70 16 	sts	0x1670, r24	; 0x801670 <midiTxBuffUsage>
    734c:	e9 ec       	ldi	r30, 0xC9	; 201
    734e:	f0 e0       	ldi	r31, 0x00	; 0
    7350:	80 81       	ld	r24, Z
    7352:	80 62       	ori	r24, 0x20	; 32
    7354:	80 83       	st	Z, r24
    7356:	cf 91       	pop	r28
    7358:	08 95       	ret

0000735a <serial0USB_logPipeIn>:
    735a:	cf 93       	push	r28
    735c:	df 93       	push	r29
    735e:	20 91 78 16 	lds	r18, 0x1678	; 0x801678 <serUSB_Active>
    7362:	22 23       	and	r18, r18
    7364:	a9 f0       	breq	.+42     	; 0x7390 <serial0USB_logPipeIn+0x36>
    7366:	c9 2f       	mov	r28, r25
    7368:	d8 2f       	mov	r29, r24
    736a:	8b e6       	ldi	r24, 0x6B	; 107
    736c:	1e df       	rcall	.-452    	; 0x71aa <serial0SER_USBSend>
    736e:	8c 2f       	mov	r24, r28
    7370:	82 95       	swap	r24
    7372:	8f 70       	andi	r24, 0x0F	; 15
    7374:	11 d2       	rcall	.+1058   	; 0x7798 <nibbleToChr>
    7376:	19 df       	rcall	.-462    	; 0x71aa <serial0SER_USBSend>
    7378:	cf 70       	andi	r28, 0x0F	; 15
    737a:	8c 2f       	mov	r24, r28
    737c:	0d d2       	rcall	.+1050   	; 0x7798 <nibbleToChr>
    737e:	15 df       	rcall	.-470    	; 0x71aa <serial0SER_USBSend>
    7380:	8d 2f       	mov	r24, r29
    7382:	82 95       	swap	r24
    7384:	8f 70       	andi	r24, 0x0F	; 15
    7386:	08 d2       	rcall	.+1040   	; 0x7798 <nibbleToChr>
    7388:	10 df       	rcall	.-480    	; 0x71aa <serial0SER_USBSend>
    738a:	8c 2f       	mov	r24, r28
    738c:	05 d2       	rcall	.+1034   	; 0x7798 <nibbleToChr>
    738e:	0d df       	rcall	.-486    	; 0x71aa <serial0SER_USBSend>
    7390:	df 91       	pop	r29
    7392:	cf 91       	pop	r28
    7394:	08 95       	ret

00007396 <serial0SER_USB_sendStringP>:
    7396:	cf 93       	push	r28
    7398:	df 93       	push	r29
    739a:	fc 01       	movw	r30, r24
    739c:	02 c0       	rjmp	.+4      	; 0x73a2 <serial0SER_USB_sendStringP+0xc>
    739e:	05 df       	rcall	.-502    	; 0x71aa <serial0SER_USBSend>
    73a0:	fe 01       	movw	r30, r28
    73a2:	ef 01       	movw	r28, r30
    73a4:	21 96       	adiw	r28, 0x01	; 1
    73a6:	84 91       	lpm	r24, Z
    73a8:	88 23       	and	r24, r24
    73aa:	21 f0       	breq	.+8      	; 0x73b4 <serial0SER_USB_sendStringP+0x1e>
    73ac:	90 91 6f 16 	lds	r25, 0x166F	; 0x80166f <serUSBOvflFlag>
    73b0:	9f 3f       	cpi	r25, 0xFF	; 255
    73b2:	a9 f7       	brne	.-22     	; 0x739e <serial0SER_USB_sendStringP+0x8>
    73b4:	df 91       	pop	r29
    73b6:	cf 91       	pop	r28
    73b8:	08 95       	ret

000073ba <serial0SER_USB_sendCRLF>:
    73ba:	8a e2       	ldi	r24, 0x2A	; 42
    73bc:	94 e1       	ldi	r25, 0x14	; 20
    73be:	eb cf       	rjmp	.-42     	; 0x7396 <serial0SER_USB_sendStringP>
    73c0:	08 95       	ret

000073c2 <init_Serial0SerUSB>:
    73c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    73c6:	88 e0       	ldi	r24, 0x08	; 8
    73c8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    73cc:	e1 ec       	ldi	r30, 0xC1	; 193
    73ce:	f0 e0       	ldi	r31, 0x00	; 0
    73d0:	80 81       	ld	r24, Z
    73d2:	88 69       	ori	r24, 0x98	; 152
    73d4:	80 83       	st	Z, r24
    73d6:	e2 ec       	ldi	r30, 0xC2	; 194
    73d8:	f0 e0       	ldi	r31, 0x00	; 0
    73da:	80 81       	ld	r24, Z
    73dc:	86 60       	ori	r24, 0x06	; 6
    73de:	80 83       	st	Z, r24
    73e0:	87 e2       	ldi	r24, 0x27	; 39
    73e2:	94 e1       	ldi	r25, 0x14	; 20
    73e4:	90 93 7b 16 	sts	0x167B, r25	; 0x80167b <serUSBRxInIndex+0x1>
    73e8:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <serUSBRxInIndex>
    73ec:	90 93 6e 16 	sts	0x166E, r25	; 0x80166e <serUSBRxOutIndex+0x1>
    73f0:	80 93 6d 16 	sts	0x166D, r24	; 0x80166d <serUSBRxOutIndex>
    73f4:	83 e1       	ldi	r24, 0x13	; 19
    73f6:	9c e0       	ldi	r25, 0x0C	; 12
    73f8:	90 93 14 14 	sts	0x1414, r25	; 0x801414 <serUSBTxOutIndex+0x1>
    73fc:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <serUSBTxOutIndex>
    7400:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <serUSBTxInIndex+0x1>
    7404:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <serUSBTxInIndex>
    7408:	10 92 6f 16 	sts	0x166F, r1	; 0x80166f <serUSBOvflFlag>
    740c:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_ReadUSB>
    7410:	8f 3f       	cpi	r24, 0xFF	; 255
    7412:	41 f4       	brne	.+16     	; 0x7424 <init_Serial0SerUSB+0x62>
    7414:	10 92 78 16 	sts	0x1678, r1	; 0x801678 <serUSB_Active>
    7418:	40 e0       	ldi	r20, 0x00	; 0
    741a:	50 e0       	ldi	r21, 0x00	; 0
    741c:	64 e0       	ldi	r22, 0x04	; 4
    741e:	81 e0       	ldi	r24, 0x01	; 1
    7420:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <log_putError>
    7424:	80 91 78 16 	lds	r24, 0x1678	; 0x801678 <serUSB_Active>
    7428:	8f 3f       	cpi	r24, 0xFF	; 255
    742a:	41 f4       	brne	.+16     	; 0x743c <init_Serial0SerUSB+0x7a>
    742c:	8a ea       	ldi	r24, 0xAA	; 170
    742e:	93 e0       	ldi	r25, 0x03	; 3
    7430:	b2 df       	rcall	.-156    	; 0x7396 <serial0SER_USB_sendStringP>
    7432:	82 ee       	ldi	r24, 0xE2	; 226
    7434:	93 e1       	ldi	r25, 0x13	; 19
    7436:	af df       	rcall	.-162    	; 0x7396 <serial0SER_USB_sendStringP>
    7438:	c0 df       	rcall	.-128    	; 0x73ba <serial0SER_USB_sendCRLF>
    743a:	bf cf       	rjmp	.-130    	; 0x73ba <serial0SER_USB_sendCRLF>
    743c:	08 95       	ret

0000743e <serial0SER_USB_sendString>:
    743e:	1f 93       	push	r17
    7440:	cf 93       	push	r28
    7442:	df 93       	push	r29
    7444:	ec 01       	movw	r28, r24
    7446:	10 e5       	ldi	r17, 0x50	; 80
    7448:	03 c0       	rjmp	.+6      	; 0x7450 <serial0SER_USB_sendString+0x12>
    744a:	21 96       	adiw	r28, 0x01	; 1
    744c:	ae de       	rcall	.-676    	; 0x71aa <serial0SER_USBSend>
    744e:	11 50       	subi	r17, 0x01	; 1
    7450:	88 81       	ld	r24, Y
    7452:	88 23       	and	r24, r24
    7454:	31 f0       	breq	.+12     	; 0x7462 <serial0SER_USB_sendString+0x24>
    7456:	90 91 6f 16 	lds	r25, 0x166F	; 0x80166f <serUSBOvflFlag>
    745a:	9f 3f       	cpi	r25, 0xFF	; 255
    745c:	11 f0       	breq	.+4      	; 0x7462 <serial0SER_USB_sendString+0x24>
    745e:	11 11       	cpse	r17, r1
    7460:	f4 cf       	rjmp	.-24     	; 0x744a <serial0SER_USB_sendString+0xc>
    7462:	df 91       	pop	r29
    7464:	cf 91       	pop	r28
    7466:	1f 91       	pop	r17
    7468:	08 95       	ret

0000746a <__vector_25>:
    746a:	1f 92       	push	r1
    746c:	0f 92       	push	r0
    746e:	0f b6       	in	r0, 0x3f	; 63
    7470:	0f 92       	push	r0
    7472:	11 24       	eor	r1, r1
    7474:	0b b6       	in	r0, 0x3b	; 59
    7476:	0f 92       	push	r0
    7478:	2f 93       	push	r18
    747a:	3f 93       	push	r19
    747c:	4f 93       	push	r20
    747e:	5f 93       	push	r21
    7480:	8f 93       	push	r24
    7482:	9f 93       	push	r25
    7484:	ef 93       	push	r30
    7486:	ff 93       	push	r31
    7488:	e0 91 7a 16 	lds	r30, 0x167A	; 0x80167a <serUSBRxInIndex>
    748c:	f0 91 7b 16 	lds	r31, 0x167B	; 0x80167b <serUSBRxInIndex+0x1>
    7490:	af 01       	movw	r20, r30
    7492:	4f 5f       	subi	r20, 0xFF	; 255
    7494:	5f 4f       	sbci	r21, 0xFF	; 255
    7496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    749a:	80 83       	st	Z, r24
    749c:	84 e1       	ldi	r24, 0x14	; 20
    749e:	46 36       	cpi	r20, 0x66	; 102
    74a0:	58 07       	cpc	r21, r24
    74a2:	19 f0       	breq	.+6      	; 0x74aa <__vector_25+0x40>
    74a4:	10 f0       	brcs	.+4      	; 0x74aa <__vector_25+0x40>
    74a6:	47 e2       	ldi	r20, 0x27	; 39
    74a8:	54 e1       	ldi	r21, 0x14	; 20
    74aa:	9f b7       	in	r25, 0x3f	; 63
    74ac:	f8 94       	cli
    74ae:	81 e0       	ldi	r24, 0x01	; 1
    74b0:	05 c0       	rjmp	.+10     	; 0x74bc <__vector_25+0x52>
    74b2:	20 91 6d 16 	lds	r18, 0x166D	; 0x80166d <serUSBRxOutIndex>
    74b6:	30 91 6e 16 	lds	r19, 0x166E	; 0x80166e <serUSBRxOutIndex+0x1>
    74ba:	80 e0       	ldi	r24, 0x00	; 0
    74bc:	81 11       	cpse	r24, r1
    74be:	f9 cf       	rjmp	.-14     	; 0x74b2 <__vector_25+0x48>
    74c0:	9f bf       	out	0x3f, r25	; 63
    74c2:	42 17       	cp	r20, r18
    74c4:	53 07       	cpc	r21, r19
    74c6:	21 f4       	brne	.+8      	; 0x74d0 <__vector_25+0x66>
    74c8:	8f ef       	ldi	r24, 0xFF	; 255
    74ca:	80 93 6f 16 	sts	0x166F, r24	; 0x80166f <serUSBOvflFlag>
    74ce:	04 c0       	rjmp	.+8      	; 0x74d8 <__vector_25+0x6e>
    74d0:	50 93 7b 16 	sts	0x167B, r21	; 0x80167b <serUSBRxInIndex+0x1>
    74d4:	40 93 7a 16 	sts	0x167A, r20	; 0x80167a <serUSBRxInIndex>
    74d8:	ff 91       	pop	r31
    74da:	ef 91       	pop	r30
    74dc:	9f 91       	pop	r25
    74de:	8f 91       	pop	r24
    74e0:	5f 91       	pop	r21
    74e2:	4f 91       	pop	r20
    74e4:	3f 91       	pop	r19
    74e6:	2f 91       	pop	r18
    74e8:	0f 90       	pop	r0
    74ea:	0b be       	out	0x3b, r0	; 59
    74ec:	0f 90       	pop	r0
    74ee:	0f be       	out	0x3f, r0	; 63
    74f0:	0f 90       	pop	r0
    74f2:	1f 90       	pop	r1
    74f4:	18 95       	reti

000074f6 <__vector_26>:
    74f6:	1f 92       	push	r1
    74f8:	0f 92       	push	r0
    74fa:	0f b6       	in	r0, 0x3f	; 63
    74fc:	0f 92       	push	r0
    74fe:	11 24       	eor	r1, r1
    7500:	0b b6       	in	r0, 0x3b	; 59
    7502:	0f 92       	push	r0
    7504:	2f 93       	push	r18
    7506:	8f 93       	push	r24
    7508:	9f 93       	push	r25
    750a:	ef 93       	push	r30
    750c:	ff 93       	push	r31
    750e:	e0 91 13 14 	lds	r30, 0x1413	; 0x801413 <serUSBTxOutIndex>
    7512:	f0 91 14 14 	lds	r31, 0x1414	; 0x801414 <serUSBTxOutIndex+0x1>
    7516:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <serUSBTxInIndex>
    751a:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <serUSBTxInIndex+0x1>
    751e:	e8 17       	cp	r30, r24
    7520:	f9 07       	cpc	r31, r25
    7522:	89 f0       	breq	.+34     	; 0x7546 <__vector_26+0x50>
    7524:	cf 01       	movw	r24, r30
    7526:	01 96       	adiw	r24, 0x01	; 1
    7528:	20 81       	ld	r18, Z
    752a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    752e:	24 e1       	ldi	r18, 0x14	; 20
    7530:	82 31       	cpi	r24, 0x12	; 18
    7532:	92 07       	cpc	r25, r18
    7534:	19 f0       	breq	.+6      	; 0x753c <__vector_26+0x46>
    7536:	10 f0       	brcs	.+4      	; 0x753c <__vector_26+0x46>
    7538:	83 e1       	ldi	r24, 0x13	; 19
    753a:	9c e0       	ldi	r25, 0x0C	; 12
    753c:	90 93 14 14 	sts	0x1414, r25	; 0x801414 <serUSBTxOutIndex+0x1>
    7540:	80 93 13 14 	sts	0x1413, r24	; 0x801413 <serUSBTxOutIndex>
    7544:	05 c0       	rjmp	.+10     	; 0x7550 <__vector_26+0x5a>
    7546:	e1 ec       	ldi	r30, 0xC1	; 193
    7548:	f0 e0       	ldi	r31, 0x00	; 0
    754a:	80 81       	ld	r24, Z
    754c:	8f 7d       	andi	r24, 0xDF	; 223
    754e:	80 83       	st	Z, r24
    7550:	ff 91       	pop	r31
    7552:	ef 91       	pop	r30
    7554:	9f 91       	pop	r25
    7556:	8f 91       	pop	r24
    7558:	2f 91       	pop	r18
    755a:	0f 90       	pop	r0
    755c:	0b be       	out	0x3b, r0	; 59
    755e:	0f 90       	pop	r0
    7560:	0f be       	out	0x3f, r0	; 63
    7562:	0f 90       	pop	r0
    7564:	1f 90       	pop	r1
    7566:	18 95       	reti

00007568 <init_Serial3SerESP>:
    7568:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    756c:	88 e0       	ldi	r24, 0x08	; 8
    756e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    7572:	e1 e3       	ldi	r30, 0x31	; 49
    7574:	f1 e0       	ldi	r31, 0x01	; 1
    7576:	80 81       	ld	r24, Z
    7578:	88 69       	ori	r24, 0x98	; 152
    757a:	80 83       	st	Z, r24
    757c:	e2 e3       	ldi	r30, 0x32	; 50
    757e:	f1 e0       	ldi	r31, 0x01	; 1
    7580:	80 81       	ld	r24, Z
    7582:	86 60       	ori	r24, 0x06	; 6
    7584:	80 83       	st	Z, r24
    7586:	8d e7       	ldi	r24, 0x7D	; 125
    7588:	96 e1       	ldi	r25, 0x16	; 22
    758a:	90 93 25 14 	sts	0x1425, r25	; 0x801425 <serESPRxInIndex+0x1>
    758e:	80 93 24 14 	sts	0x1424, r24	; 0x801424 <serESPRxInIndex>
    7592:	90 93 20 14 	sts	0x1420, r25	; 0x801420 <serESPRxOutIndex+0x1>
    7596:	80 93 1f 14 	sts	0x141F, r24	; 0x80141f <serESPRxOutIndex>
    759a:	8d ef       	ldi	r24, 0xFD	; 253
    759c:	96 e1       	ldi	r25, 0x16	; 22
    759e:	90 93 69 16 	sts	0x1669, r25	; 0x801669 <serESPTxOutIndex+0x1>
    75a2:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <serESPTxOutIndex>
    75a6:	90 93 6c 16 	sts	0x166C, r25	; 0x80166c <serESPTxInIndex+0x1>
    75aa:	80 93 6b 16 	sts	0x166B, r24	; 0x80166b <serESPTxInIndex>
    75ae:	10 92 16 14 	sts	0x1416, r1	; 0x801416 <serESPOvflFlag>
    75b2:	8f ef       	ldi	r24, 0xFF	; 255
    75b4:	80 93 74 16 	sts	0x1674, r24	; 0x801674 <serESP_Active>
    75b8:	80 e0       	ldi	r24, 0x00	; 0
    75ba:	07 c0       	rjmp	.+14     	; 0x75ca <init_Serial3SerESP+0x62>
    75bc:	e8 2f       	mov	r30, r24
    75be:	f0 e0       	ldi	r31, 0x00	; 0
    75c0:	e9 5e       	subi	r30, 0xE9	; 233
    75c2:	fb 4e       	sbci	r31, 0xEB	; 235
    75c4:	9f ef       	ldi	r25, 0xFF	; 255
    75c6:	90 83       	st	Z, r25
    75c8:	8f 5f       	subi	r24, 0xFF	; 255
    75ca:	88 30       	cpi	r24, 0x08	; 8
    75cc:	b8 f3       	brcs	.-18     	; 0x75bc <init_Serial3SerESP+0x54>
    75ce:	08 95       	ret

000075d0 <serial3SER_ESPSend>:
    75d0:	e0 91 6b 16 	lds	r30, 0x166B	; 0x80166b <serESPTxInIndex>
    75d4:	f0 91 6c 16 	lds	r31, 0x166C	; 0x80166c <serESPTxInIndex+0x1>
    75d8:	a1 e3       	ldi	r26, 0x31	; 49
    75da:	b1 e0       	ldi	r27, 0x01	; 1
    75dc:	9c 91       	ld	r25, X
    75de:	9f 7d       	andi	r25, 0xDF	; 223
    75e0:	9c 93       	st	X, r25
    75e2:	af 01       	movw	r20, r30
    75e4:	4f 5f       	subi	r20, 0xFF	; 255
    75e6:	5f 4f       	sbci	r21, 0xFF	; 255
    75e8:	80 83       	st	Z, r24
    75ea:	88 e1       	ldi	r24, 0x18	; 24
    75ec:	4c 3f       	cpi	r20, 0xFC	; 252
    75ee:	58 07       	cpc	r21, r24
    75f0:	19 f0       	breq	.+6      	; 0x75f8 <serial3SER_ESPSend+0x28>
    75f2:	10 f0       	brcs	.+4      	; 0x75f8 <serial3SER_ESPSend+0x28>
    75f4:	4d ef       	ldi	r20, 0xFD	; 253
    75f6:	56 e1       	ldi	r21, 0x16	; 22
    75f8:	9f b7       	in	r25, 0x3f	; 63
    75fa:	f8 94       	cli
    75fc:	81 e0       	ldi	r24, 0x01	; 1
    75fe:	05 c0       	rjmp	.+10     	; 0x760a <serial3SER_ESPSend+0x3a>
    7600:	20 91 68 16 	lds	r18, 0x1668	; 0x801668 <serESPTxOutIndex>
    7604:	30 91 69 16 	lds	r19, 0x1669	; 0x801669 <serESPTxOutIndex+0x1>
    7608:	80 e0       	ldi	r24, 0x00	; 0
    760a:	81 11       	cpse	r24, r1
    760c:	f9 cf       	rjmp	.-14     	; 0x7600 <serial3SER_ESPSend+0x30>
    760e:	9f bf       	out	0x3f, r25	; 63
    7610:	42 17       	cp	r20, r18
    7612:	53 07       	cpc	r21, r19
    7614:	49 f4       	brne	.+18     	; 0x7628 <serial3SER_ESPSend+0x58>
    7616:	8f ef       	ldi	r24, 0xFF	; 255
    7618:	80 93 16 14 	sts	0x1416, r24	; 0x801416 <serESPOvflFlag>
    761c:	e1 e3       	ldi	r30, 0x31	; 49
    761e:	f1 e0       	ldi	r31, 0x01	; 1
    7620:	80 81       	ld	r24, Z
    7622:	80 62       	ori	r24, 0x20	; 32
    7624:	80 83       	st	Z, r24
    7626:	08 95       	ret
    7628:	50 93 6c 16 	sts	0x166C, r21	; 0x80166c <serESPTxInIndex+0x1>
    762c:	40 93 6b 16 	sts	0x166B, r20	; 0x80166b <serESPTxInIndex>
    7630:	e1 e3       	ldi	r30, 0x31	; 49
    7632:	f1 e0       	ldi	r31, 0x01	; 1
    7634:	80 81       	ld	r24, Z
    7636:	80 62       	ori	r24, 0x20	; 32
    7638:	80 83       	st	Z, r24
    763a:	08 95       	ret

0000763c <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    763c:	e0 91 1f 14 	lds	r30, 0x141F	; 0x80141f <serESPRxOutIndex>
    7640:	f0 91 20 14 	lds	r31, 0x1420	; 0x801420 <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    7644:	80 91 24 14 	lds	r24, 0x1424	; 0x801424 <serESPRxInIndex>
    7648:	90 91 25 14 	lds	r25, 0x1425	; 0x801425 <serESPRxInIndex+0x1>
    764c:	e8 17       	cp	r30, r24
    764e:	f9 07       	cpc	r31, r25
    7650:	81 f0       	breq	.+32     	; 0x7672 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    7652:	9f 01       	movw	r18, r30
    7654:	2f 5f       	subi	r18, 0xFF	; 255
    7656:	3f 4f       	sbci	r19, 0xFF	; 255
    7658:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    765a:	96 e1       	ldi	r25, 0x16	; 22
    765c:	2c 3f       	cpi	r18, 0xFC	; 252
    765e:	39 07       	cpc	r19, r25
    7660:	19 f0       	breq	.+6      	; 0x7668 <serial3SER_ESPReadRx+0x2c>
    7662:	10 f0       	brcs	.+4      	; 0x7668 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    7664:	2d e7       	ldi	r18, 0x7D	; 125
    7666:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    7668:	30 93 20 14 	sts	0x1420, r19	; 0x801420 <serESPRxOutIndex+0x1>
    766c:	20 93 1f 14 	sts	0x141F, r18	; 0x80141f <serESPRxOutIndex>
    7670:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    7672:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    7674:	08 95       	ret

00007676 <__vector_54>:

ISR(USART3_RX_vect) {
    7676:	1f 92       	push	r1
    7678:	0f 92       	push	r0
    767a:	0f b6       	in	r0, 0x3f	; 63
    767c:	0f 92       	push	r0
    767e:	11 24       	eor	r1, r1
    7680:	0b b6       	in	r0, 0x3b	; 59
    7682:	0f 92       	push	r0
    7684:	2f 93       	push	r18
    7686:	3f 93       	push	r19
    7688:	4f 93       	push	r20
    768a:	5f 93       	push	r21
    768c:	6f 93       	push	r22
    768e:	8f 93       	push	r24
    7690:	9f 93       	push	r25
    7692:	af 93       	push	r26
    7694:	bf 93       	push	r27
    7696:	ef 93       	push	r30
    7698:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    769a:	e0 91 24 14 	lds	r30, 0x1424	; 0x801424 <serESPRxInIndex>
    769e:	f0 91 25 14 	lds	r31, 0x1425	; 0x801425 <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    76a2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    76a6:	af 01       	movw	r20, r30
    76a8:	4f 5f       	subi	r20, 0xFF	; 255
    76aa:	5f 4f       	sbci	r21, 0xFF	; 255
    76ac:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    76ae:	86 e1       	ldi	r24, 0x16	; 22
    76b0:	4c 3f       	cpi	r20, 0xFC	; 252
    76b2:	58 07       	cpc	r21, r24
    76b4:	19 f0       	breq	.+6      	; 0x76bc <__vector_54+0x46>
    76b6:	10 f0       	brcs	.+4      	; 0x76bc <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    76b8:	4d e7       	ldi	r20, 0x7D	; 125
    76ba:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    76bc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    76be:	f8 94       	cli
    76c0:	81 e0       	ldi	r24, 0x01	; 1
    76c2:	05 c0       	rjmp	.+10     	; 0x76ce <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    76c4:	20 91 1f 14 	lds	r18, 0x141F	; 0x80141f <serESPRxOutIndex>
    76c8:	30 91 20 14 	lds	r19, 0x1420	; 0x801420 <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    76cc:	80 e0       	ldi	r24, 0x00	; 0
    76ce:	81 11       	cpse	r24, r1
    76d0:	f9 cf       	rjmp	.-14     	; 0x76c4 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    76d2:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    76d4:	42 17       	cp	r20, r18
    76d6:	53 07       	cpc	r21, r19
    76d8:	39 f4       	brne	.+14     	; 0x76e8 <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    76da:	8f ef       	ldi	r24, 0xFF	; 255
    76dc:	80 93 16 14 	sts	0x1416, r24	; 0x801416 <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    76e0:	80 e0       	ldi	r24, 0x00	; 0
    76e2:	ae e1       	ldi	r26, 0x1E	; 30
    76e4:	b4 e1       	ldi	r27, 0x14	; 20
    76e6:	0a c0       	rjmp	.+20     	; 0x76fc <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    76e8:	50 93 25 14 	sts	0x1425, r21	; 0x801425 <serESPRxInIndex+0x1>
    76ec:	40 93 24 14 	sts	0x1424, r20	; 0x801424 <serESPRxInIndex>
    76f0:	f7 cf       	rjmp	.-18     	; 0x76e0 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    76f2:	fd 01       	movw	r30, r26
    76f4:	92 91       	ld	r25, -Z
    76f6:	9c 93       	st	X, r25
		inpBufferPtr--;
    76f8:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    76fa:	8f 5f       	subi	r24, 0xFF	; 255
    76fc:	87 30       	cpi	r24, 0x07	; 7
    76fe:	c8 f3       	brcs	.-14     	; 0x76f2 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    7700:	6c 93       	st	X, r22
}
    7702:	ff 91       	pop	r31
    7704:	ef 91       	pop	r30
    7706:	bf 91       	pop	r27
    7708:	af 91       	pop	r26
    770a:	9f 91       	pop	r25
    770c:	8f 91       	pop	r24
    770e:	6f 91       	pop	r22
    7710:	5f 91       	pop	r21
    7712:	4f 91       	pop	r20
    7714:	3f 91       	pop	r19
    7716:	2f 91       	pop	r18
    7718:	0f 90       	pop	r0
    771a:	0b be       	out	0x3b, r0	; 59
    771c:	0f 90       	pop	r0
    771e:	0f be       	out	0x3f, r0	; 63
    7720:	0f 90       	pop	r0
    7722:	1f 90       	pop	r1
    7724:	18 95       	reti

00007726 <__vector_55>:

ISR(USART3_UDRE_vect) {
    7726:	1f 92       	push	r1
    7728:	0f 92       	push	r0
    772a:	0f b6       	in	r0, 0x3f	; 63
    772c:	0f 92       	push	r0
    772e:	11 24       	eor	r1, r1
    7730:	0b b6       	in	r0, 0x3b	; 59
    7732:	0f 92       	push	r0
    7734:	2f 93       	push	r18
    7736:	8f 93       	push	r24
    7738:	9f 93       	push	r25
    773a:	ef 93       	push	r30
    773c:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    773e:	e0 91 68 16 	lds	r30, 0x1668	; 0x801668 <serESPTxOutIndex>
    7742:	f0 91 69 16 	lds	r31, 0x1669	; 0x801669 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    7746:	80 91 6b 16 	lds	r24, 0x166B	; 0x80166b <serESPTxInIndex>
    774a:	90 91 6c 16 	lds	r25, 0x166C	; 0x80166c <serESPTxInIndex+0x1>
    774e:	e8 17       	cp	r30, r24
    7750:	f9 07       	cpc	r31, r25
    7752:	89 f0       	breq	.+34     	; 0x7776 <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    7754:	cf 01       	movw	r24, r30
    7756:	01 96       	adiw	r24, 0x01	; 1
    7758:	20 81       	ld	r18, Z
    775a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    775e:	28 e1       	ldi	r18, 0x18	; 24
    7760:	8c 3f       	cpi	r24, 0xFC	; 252
    7762:	92 07       	cpc	r25, r18
    7764:	19 f0       	breq	.+6      	; 0x776c <__vector_55+0x46>
    7766:	10 f0       	brcs	.+4      	; 0x776c <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    7768:	8d ef       	ldi	r24, 0xFD	; 253
    776a:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    776c:	90 93 69 16 	sts	0x1669, r25	; 0x801669 <serESPTxOutIndex+0x1>
    7770:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <serESPTxOutIndex>
    7774:	05 c0       	rjmp	.+10     	; 0x7780 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    7776:	e1 e3       	ldi	r30, 0x31	; 49
    7778:	f1 e0       	ldi	r31, 0x01	; 1
    777a:	80 81       	ld	r24, Z
    777c:	8f 7d       	andi	r24, 0xDF	; 223
    777e:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    7780:	ff 91       	pop	r31
    7782:	ef 91       	pop	r30
    7784:	9f 91       	pop	r25
    7786:	8f 91       	pop	r24
    7788:	2f 91       	pop	r18
    778a:	0f 90       	pop	r0
    778c:	0b be       	out	0x3b, r0	; 59
    778e:	0f 90       	pop	r0
    7790:	0f be       	out	0x3f, r0	; 63
    7792:	0f 90       	pop	r0
    7794:	1f 90       	pop	r1
    7796:	18 95       	reti

00007798 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    7798:	8a 30       	cpi	r24, 0x0A	; 10
    779a:	10 f0       	brcs	.+4      	; 0x77a0 <nibbleToChr+0x8>
    779c:	89 5c       	subi	r24, 0xC9	; 201
    779e:	08 95       	ret
    77a0:	80 5d       	subi	r24, 0xD0	; 208
    77a2:	08 95       	ret

000077a4 <lcd_hexout>:
    77a4:	cf 93       	push	r28
    77a6:	c8 2f       	mov	r28, r24
    77a8:	82 95       	swap	r24
    77aa:	8f 70       	andi	r24, 0x0F	; 15
    77ac:	8a 30       	cpi	r24, 0x0A	; 10
    77ae:	10 f0       	brcs	.+4      	; 0x77b4 <lcd_hexout+0x10>
    77b0:	89 5c       	subi	r24, 0xC9	; 201
    77b2:	01 c0       	rjmp	.+2      	; 0x77b6 <lcd_hexout+0x12>
    77b4:	80 5d       	subi	r24, 0xD0	; 208
    77b6:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    77ba:	cf 70       	andi	r28, 0x0F	; 15
    77bc:	ca 30       	cpi	r28, 0x0A	; 10
    77be:	18 f0       	brcs	.+6      	; 0x77c6 <lcd_hexout+0x22>
    77c0:	87 e3       	ldi	r24, 0x37	; 55
    77c2:	8c 0f       	add	r24, r28
    77c4:	02 c0       	rjmp	.+4      	; 0x77ca <lcd_hexout+0x26>
    77c6:	80 e3       	ldi	r24, 0x30	; 48
    77c8:	8c 0f       	add	r24, r28
    77ca:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    77ce:	cf 91       	pop	r28
    77d0:	08 95       	ret

000077d2 <lcd_longout>:
    77d2:	cf 93       	push	r28
    77d4:	df 93       	push	r29
    77d6:	d3 e0       	ldi	r29, 0x03	; 3
    77d8:	1c c0       	rjmp	.+56     	; 0x7812 <lcd_longout+0x40>
    77da:	ed 2f       	mov	r30, r29
    77dc:	0d 2e       	mov	r0, r29
    77de:	00 0c       	add	r0, r0
    77e0:	ff 0b       	sbc	r31, r31
    77e2:	ee 5f       	subi	r30, 0xFE	; 254
    77e4:	f6 4e       	sbci	r31, 0xE6	; 230
    77e6:	c0 81       	ld	r28, Z
    77e8:	8c 2f       	mov	r24, r28
    77ea:	82 95       	swap	r24
    77ec:	8f 70       	andi	r24, 0x0F	; 15
    77ee:	8a 30       	cpi	r24, 0x0A	; 10
    77f0:	10 f0       	brcs	.+4      	; 0x77f6 <lcd_longout+0x24>
    77f2:	89 5c       	subi	r24, 0xC9	; 201
    77f4:	01 c0       	rjmp	.+2      	; 0x77f8 <lcd_longout+0x26>
    77f6:	80 5d       	subi	r24, 0xD0	; 208
    77f8:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    77fc:	cf 70       	andi	r28, 0x0F	; 15
    77fe:	ca 30       	cpi	r28, 0x0A	; 10
    7800:	18 f0       	brcs	.+6      	; 0x7808 <lcd_longout+0x36>
    7802:	87 e3       	ldi	r24, 0x37	; 55
    7804:	8c 0f       	add	r24, r28
    7806:	02 c0       	rjmp	.+4      	; 0x780c <lcd_longout+0x3a>
    7808:	80 e3       	ldi	r24, 0x30	; 48
    780a:	8c 0f       	add	r24, r28
    780c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7810:	d1 50       	subi	r29, 0x01	; 1
    7812:	dd 23       	and	r29, r29
    7814:	14 f7       	brge	.-60     	; 0x77da <lcd_longout+0x8>
    7816:	df 91       	pop	r29
    7818:	cf 91       	pop	r28
    781a:	08 95       	ret

0000781c <lcd_dec2out>:
    781c:	cf 93       	push	r28
    781e:	c8 2f       	mov	r28, r24
    7820:	84 36       	cpi	r24, 0x64	; 100
    7822:	50 f0       	brcs	.+20     	; 0x7838 <lcd_dec2out+0x1c>
    7824:	8d e2       	ldi	r24, 0x2D	; 45
    7826:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    782a:	8d e2       	ldi	r24, 0x2D	; 45
    782c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7830:	0d c0       	rjmp	.+26     	; 0x784c <lcd_dec2out+0x30>
    7832:	ca 50       	subi	r28, 0x0A	; 10
    7834:	8f 5f       	subi	r24, 0xFF	; 255
    7836:	01 c0       	rjmp	.+2      	; 0x783a <lcd_dec2out+0x1e>
    7838:	80 e0       	ldi	r24, 0x00	; 0
    783a:	ca 30       	cpi	r28, 0x0A	; 10
    783c:	d0 f7       	brcc	.-12     	; 0x7832 <lcd_dec2out+0x16>
    783e:	80 5d       	subi	r24, 0xD0	; 208
    7840:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7844:	80 e3       	ldi	r24, 0x30	; 48
    7846:	8c 0f       	add	r24, r28
    7848:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    784c:	cf 91       	pop	r28
    784e:	08 95       	ret

00007850 <putChar_Dec2>:
    7850:	84 36       	cpi	r24, 0x64	; 100
    7852:	58 f0       	brcs	.+22     	; 0x786a <putChar_Dec2+0x1a>
    7854:	8d e2       	ldi	r24, 0x2D	; 45
    7856:	db 01       	movw	r26, r22
    7858:	8c 93       	st	X, r24
    785a:	fb 01       	movw	r30, r22
    785c:	32 96       	adiw	r30, 0x02	; 2
    785e:	11 96       	adiw	r26, 0x01	; 1
    7860:	8c 93       	st	X, r24
    7862:	0f c0       	rjmp	.+30     	; 0x7882 <putChar_Dec2+0x32>
    7864:	8a 50       	subi	r24, 0x0A	; 10
    7866:	9f 5f       	subi	r25, 0xFF	; 255
    7868:	01 c0       	rjmp	.+2      	; 0x786c <putChar_Dec2+0x1c>
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	8a 30       	cpi	r24, 0x0A	; 10
    786e:	d0 f7       	brcc	.-12     	; 0x7864 <putChar_Dec2+0x14>
    7870:	90 5d       	subi	r25, 0xD0	; 208
    7872:	fb 01       	movw	r30, r22
    7874:	90 83       	st	Z, r25
    7876:	32 96       	adiw	r30, 0x02	; 2
    7878:	90 e3       	ldi	r25, 0x30	; 48
    787a:	98 0f       	add	r25, r24
    787c:	db 01       	movw	r26, r22
    787e:	11 96       	adiw	r26, 0x01	; 1
    7880:	9c 93       	st	X, r25
    7882:	10 82       	st	Z, r1
    7884:	cf 01       	movw	r24, r30
    7886:	08 95       	ret

00007888 <putChar_Dec>:
    7888:	90 e0       	ldi	r25, 0x00	; 0
    788a:	02 c0       	rjmp	.+4      	; 0x7890 <putChar_Dec+0x8>
    788c:	84 56       	subi	r24, 0x64	; 100
    788e:	9f 5f       	subi	r25, 0xFF	; 255
    7890:	84 36       	cpi	r24, 0x64	; 100
    7892:	e0 f7       	brcc	.-8      	; 0x788c <putChar_Dec+0x4>
    7894:	99 23       	and	r25, r25
    7896:	39 f0       	breq	.+14     	; 0x78a6 <putChar_Dec+0x1e>
    7898:	90 5d       	subi	r25, 0xD0	; 208
    789a:	db 01       	movw	r26, r22
    789c:	9c 93       	st	X, r25
    789e:	6f 5f       	subi	r22, 0xFF	; 255
    78a0:	7f 4f       	sbci	r23, 0xFF	; 255
    78a2:	2f ef       	ldi	r18, 0xFF	; 255
    78a4:	01 c0       	rjmp	.+2      	; 0x78a8 <putChar_Dec+0x20>
    78a6:	20 e0       	ldi	r18, 0x00	; 0
    78a8:	90 e0       	ldi	r25, 0x00	; 0
    78aa:	02 c0       	rjmp	.+4      	; 0x78b0 <putChar_Dec+0x28>
    78ac:	8a 50       	subi	r24, 0x0A	; 10
    78ae:	9f 5f       	subi	r25, 0xFF	; 255
    78b0:	8a 30       	cpi	r24, 0x0A	; 10
    78b2:	e0 f7       	brcc	.-8      	; 0x78ac <putChar_Dec+0x24>
    78b4:	91 11       	cpse	r25, r1
    78b6:	02 c0       	rjmp	.+4      	; 0x78bc <putChar_Dec+0x34>
    78b8:	2f 3f       	cpi	r18, 0xFF	; 255
    78ba:	31 f4       	brne	.+12     	; 0x78c8 <putChar_Dec+0x40>
    78bc:	fb 01       	movw	r30, r22
    78be:	31 96       	adiw	r30, 0x01	; 1
    78c0:	90 5d       	subi	r25, 0xD0	; 208
    78c2:	db 01       	movw	r26, r22
    78c4:	9c 93       	st	X, r25
    78c6:	01 c0       	rjmp	.+2      	; 0x78ca <putChar_Dec+0x42>
    78c8:	fb 01       	movw	r30, r22
    78ca:	80 5d       	subi	r24, 0xD0	; 208
    78cc:	80 83       	st	Z, r24
    78ce:	11 82       	std	Z+1, r1	; 0x01
    78d0:	cf 01       	movw	r24, r30
    78d2:	01 96       	adiw	r24, 0x01	; 1
    78d4:	08 95       	ret

000078d6 <putChar_hex>:
    78d6:	fb 01       	movw	r30, r22
    78d8:	98 2f       	mov	r25, r24
    78da:	92 95       	swap	r25
    78dc:	9f 70       	andi	r25, 0x0F	; 15
    78de:	9a 30       	cpi	r25, 0x0A	; 10
    78e0:	10 f0       	brcs	.+4      	; 0x78e6 <putChar_hex+0x10>
    78e2:	99 5c       	subi	r25, 0xC9	; 201
    78e4:	01 c0       	rjmp	.+2      	; 0x78e8 <putChar_hex+0x12>
    78e6:	90 5d       	subi	r25, 0xD0	; 208
    78e8:	90 83       	st	Z, r25
    78ea:	98 2f       	mov	r25, r24
    78ec:	9f 70       	andi	r25, 0x0F	; 15
    78ee:	9f 01       	movw	r18, r30
    78f0:	2e 5f       	subi	r18, 0xFE	; 254
    78f2:	3f 4f       	sbci	r19, 0xFF	; 255
    78f4:	9a 30       	cpi	r25, 0x0A	; 10
    78f6:	10 f0       	brcs	.+4      	; 0x78fc <putChar_hex+0x26>
    78f8:	99 5c       	subi	r25, 0xC9	; 201
    78fa:	01 c0       	rjmp	.+2      	; 0x78fe <putChar_hex+0x28>
    78fc:	90 5d       	subi	r25, 0xD0	; 208
    78fe:	91 83       	std	Z+1, r25	; 0x01
    7900:	12 82       	std	Z+2, r1	; 0x02
    7902:	c9 01       	movw	r24, r18
    7904:	08 95       	ret

00007906 <putChar_MidiChan>:
    7906:	80 31       	cpi	r24, 0x10	; 16
    7908:	48 f0       	brcs	.+18     	; 0x791c <putChar_MidiChan+0x16>
    790a:	8e e6       	ldi	r24, 0x6E	; 110
    790c:	db 01       	movw	r26, r22
    790e:	8c 93       	st	X, r24
    7910:	fb 01       	movw	r30, r22
    7912:	32 96       	adiw	r30, 0x02	; 2
    7914:	8f e6       	ldi	r24, 0x6F	; 111
    7916:	11 96       	adiw	r26, 0x01	; 1
    7918:	8c 93       	st	X, r24
    791a:	15 c0       	rjmp	.+42     	; 0x7946 <putChar_MidiChan+0x40>
    791c:	91 e0       	ldi	r25, 0x01	; 1
    791e:	98 0f       	add	r25, r24
    7920:	9a 30       	cpi	r25, 0x0A	; 10
    7922:	40 f0       	brcs	.+16     	; 0x7934 <putChar_MidiChan+0x2e>
    7924:	db 01       	movw	r26, r22
    7926:	11 96       	adiw	r26, 0x01	; 1
    7928:	91 e3       	ldi	r25, 0x31	; 49
    792a:	fb 01       	movw	r30, r22
    792c:	90 83       	st	Z, r25
    792e:	97 ef       	ldi	r25, 0xF7	; 247
    7930:	98 0f       	add	r25, r24
    7932:	05 c0       	rjmp	.+10     	; 0x793e <putChar_MidiChan+0x38>
    7934:	db 01       	movw	r26, r22
    7936:	11 96       	adiw	r26, 0x01	; 1
    7938:	80 e2       	ldi	r24, 0x20	; 32
    793a:	fb 01       	movw	r30, r22
    793c:	80 83       	st	Z, r24
    793e:	fd 01       	movw	r30, r26
    7940:	31 96       	adiw	r30, 0x01	; 1
    7942:	90 5d       	subi	r25, 0xD0	; 208
    7944:	9c 93       	st	X, r25
    7946:	10 82       	st	Z, r1
    7948:	cf 01       	movw	r24, r30
    794a:	08 95       	ret

0000794c <putChar_word>:
    794c:	ac 01       	movw	r20, r24
    794e:	fb 01       	movw	r30, r22
    7950:	34 96       	adiw	r30, 0x04	; 4
    7952:	db 01       	movw	r26, r22
    7954:	14 96       	adiw	r26, 0x04	; 4
    7956:	1c 92       	st	X, r1
    7958:	20 e0       	ldi	r18, 0x00	; 0
    795a:	10 c0       	rjmp	.+32     	; 0x797c <putChar_word+0x30>
    795c:	94 2f       	mov	r25, r20
    795e:	9f 70       	andi	r25, 0x0F	; 15
    7960:	31 97       	sbiw	r30, 0x01	; 1
    7962:	9a 30       	cpi	r25, 0x0A	; 10
    7964:	10 f0       	brcs	.+4      	; 0x796a <putChar_word+0x1e>
    7966:	99 5c       	subi	r25, 0xC9	; 201
    7968:	01 c0       	rjmp	.+2      	; 0x796c <putChar_word+0x20>
    796a:	90 5d       	subi	r25, 0xD0	; 208
    796c:	90 83       	st	Z, r25
    796e:	52 95       	swap	r21
    7970:	42 95       	swap	r20
    7972:	4f 70       	andi	r20, 0x0F	; 15
    7974:	45 27       	eor	r20, r21
    7976:	5f 70       	andi	r21, 0x0F	; 15
    7978:	45 27       	eor	r20, r21
    797a:	2f 5f       	subi	r18, 0xFF	; 255
    797c:	24 30       	cpi	r18, 0x04	; 4
    797e:	70 f3       	brcs	.-36     	; 0x795c <putChar_word+0x10>
    7980:	cf 01       	movw	r24, r30
    7982:	04 96       	adiw	r24, 0x04	; 4
    7984:	08 95       	ret

00007986 <putChar_long>:
    7986:	0f 93       	push	r16
    7988:	1f 93       	push	r17
    798a:	8b 01       	movw	r16, r22
    798c:	9c 01       	movw	r18, r24
    798e:	fa 01       	movw	r30, r20
    7990:	38 96       	adiw	r30, 0x08	; 8
    7992:	da 01       	movw	r26, r20
    7994:	18 96       	adiw	r26, 0x08	; 8
    7996:	1c 92       	st	X, r1
    7998:	80 e0       	ldi	r24, 0x00	; 0
    799a:	12 c0       	rjmp	.+36     	; 0x79c0 <putChar_long+0x3a>
    799c:	90 2f       	mov	r25, r16
    799e:	9f 70       	andi	r25, 0x0F	; 15
    79a0:	31 97       	sbiw	r30, 0x01	; 1
    79a2:	9a 30       	cpi	r25, 0x0A	; 10
    79a4:	10 f0       	brcs	.+4      	; 0x79aa <putChar_long+0x24>
    79a6:	99 5c       	subi	r25, 0xC9	; 201
    79a8:	01 c0       	rjmp	.+2      	; 0x79ac <putChar_long+0x26>
    79aa:	90 5d       	subi	r25, 0xD0	; 208
    79ac:	90 83       	st	Z, r25
    79ae:	68 94       	set
    79b0:	13 f8       	bld	r1, 3
    79b2:	36 95       	lsr	r19
    79b4:	27 95       	ror	r18
    79b6:	17 95       	ror	r17
    79b8:	07 95       	ror	r16
    79ba:	16 94       	lsr	r1
    79bc:	d1 f7       	brne	.-12     	; 0x79b2 <putChar_long+0x2c>
    79be:	8f 5f       	subi	r24, 0xFF	; 255
    79c0:	84 30       	cpi	r24, 0x04	; 4
    79c2:	60 f3       	brcs	.-40     	; 0x799c <putChar_long+0x16>
    79c4:	cf 01       	movw	r24, r30
    79c6:	04 96       	adiw	r24, 0x04	; 4
    79c8:	1f 91       	pop	r17
    79ca:	0f 91       	pop	r16
    79cc:	08 95       	ret

000079ce <putChar_Note>:
    79ce:	88 23       	and	r24, r24
    79d0:	8c f4       	brge	.+34     	; 0x79f4 <putChar_Note+0x26>
    79d2:	8d e2       	ldi	r24, 0x2D	; 45
    79d4:	db 01       	movw	r26, r22
    79d6:	8c 93       	st	X, r24
    79d8:	9e e6       	ldi	r25, 0x6E	; 110
    79da:	11 96       	adiw	r26, 0x01	; 1
    79dc:	9c 93       	st	X, r25
    79de:	11 97       	sbiw	r26, 0x01	; 1
    79e0:	12 96       	adiw	r26, 0x02	; 2
    79e2:	8c 93       	st	X, r24
    79e4:	12 97       	sbiw	r26, 0x02	; 2
    79e6:	14 96       	adiw	r26, 0x04	; 4
    79e8:	fb 01       	movw	r30, r22
    79ea:	13 82       	std	Z+3, r1	; 0x03
    79ec:	49 c0       	rjmp	.+146    	; 0x7a80 <putChar_Note+0xb2>
    79ee:	8c 50       	subi	r24, 0x0C	; 12
    79f0:	9f 5f       	subi	r25, 0xFF	; 255
    79f2:	01 c0       	rjmp	.+2      	; 0x79f6 <putChar_Note+0x28>
    79f4:	90 e0       	ldi	r25, 0x00	; 0
    79f6:	8c 30       	cpi	r24, 0x0C	; 12
    79f8:	d0 f7       	brcc	.-12     	; 0x79ee <putChar_Note+0x20>
    79fa:	8b 30       	cpi	r24, 0x0B	; 11
    79fc:	39 f4       	brne	.+14     	; 0x7a0c <putChar_Note+0x3e>
    79fe:	fb 01       	movw	r30, r22
    7a00:	31 96       	adiw	r30, 0x01	; 1
    7a02:	88 e4       	ldi	r24, 0x48	; 72
    7a04:	db 01       	movw	r26, r22
    7a06:	8c 93       	st	X, r24
    7a08:	8f e5       	ldi	r24, 0x5F	; 95
    7a0a:	27 c0       	rjmp	.+78     	; 0x7a5a <putChar_Note+0x8c>
    7a0c:	85 30       	cpi	r24, 0x05	; 5
    7a0e:	58 f4       	brcc	.+22     	; 0x7a26 <putChar_Note+0x58>
    7a10:	fb 01       	movw	r30, r22
    7a12:	31 96       	adiw	r30, 0x01	; 1
    7a14:	28 2f       	mov	r18, r24
    7a16:	26 95       	lsr	r18
    7a18:	2d 5b       	subi	r18, 0xBD	; 189
    7a1a:	db 01       	movw	r26, r22
    7a1c:	2c 93       	st	X, r18
    7a1e:	80 fd       	sbrc	r24, 0
    7a20:	19 c0       	rjmp	.+50     	; 0x7a54 <putChar_Note+0x86>
    7a22:	8f e5       	ldi	r24, 0x5F	; 95
    7a24:	1a c0       	rjmp	.+52     	; 0x7a5a <putChar_Note+0x8c>
    7a26:	89 30       	cpi	r24, 0x09	; 9
    7a28:	30 f0       	brcs	.+12     	; 0x7a36 <putChar_Note+0x68>
    7a2a:	fb 01       	movw	r30, r22
    7a2c:	31 96       	adiw	r30, 0x01	; 1
    7a2e:	21 e4       	ldi	r18, 0x41	; 65
    7a30:	db 01       	movw	r26, r22
    7a32:	2c 93       	st	X, r18
    7a34:	0b c0       	rjmp	.+22     	; 0x7a4c <putChar_Note+0x7e>
    7a36:	fb 01       	movw	r30, r22
    7a38:	31 96       	adiw	r30, 0x01	; 1
    7a3a:	28 2f       	mov	r18, r24
    7a3c:	30 e0       	ldi	r19, 0x00	; 0
    7a3e:	25 50       	subi	r18, 0x05	; 5
    7a40:	31 09       	sbc	r19, r1
    7a42:	35 95       	asr	r19
    7a44:	27 95       	ror	r18
    7a46:	2a 5b       	subi	r18, 0xBA	; 186
    7a48:	db 01       	movw	r26, r22
    7a4a:	2c 93       	st	X, r18
    7a4c:	80 ff       	sbrs	r24, 0
    7a4e:	04 c0       	rjmp	.+8      	; 0x7a58 <putChar_Note+0x8a>
    7a50:	8f e5       	ldi	r24, 0x5F	; 95
    7a52:	03 c0       	rjmp	.+6      	; 0x7a5a <putChar_Note+0x8c>
    7a54:	83 e2       	ldi	r24, 0x23	; 35
    7a56:	01 c0       	rjmp	.+2      	; 0x7a5a <putChar_Note+0x8c>
    7a58:	83 e2       	ldi	r24, 0x23	; 35
    7a5a:	80 83       	st	Z, r24
    7a5c:	91 11       	cpse	r25, r1
    7a5e:	05 c0       	rjmp	.+10     	; 0x7a6a <putChar_Note+0x9c>
    7a60:	df 01       	movw	r26, r30
    7a62:	12 96       	adiw	r26, 0x02	; 2
    7a64:	8d e6       	ldi	r24, 0x6D	; 109
    7a66:	81 83       	std	Z+1, r24	; 0x01
    7a68:	0b c0       	rjmp	.+22     	; 0x7a80 <putChar_Note+0xb2>
    7a6a:	9c 30       	cpi	r25, 0x0C	; 12
    7a6c:	28 f4       	brcc	.+10     	; 0x7a78 <putChar_Note+0xaa>
    7a6e:	df 01       	movw	r26, r30
    7a70:	12 96       	adiw	r26, 0x02	; 2
    7a72:	91 5d       	subi	r25, 0xD1	; 209
    7a74:	91 83       	std	Z+1, r25	; 0x01
    7a76:	04 c0       	rjmp	.+8      	; 0x7a80 <putChar_Note+0xb2>
    7a78:	df 01       	movw	r26, r30
    7a7a:	12 96       	adiw	r26, 0x02	; 2
    7a7c:	8d e2       	ldi	r24, 0x2D	; 45
    7a7e:	81 83       	std	Z+1, r24	; 0x01
    7a80:	1c 92       	st	X, r1
    7a82:	cd 01       	movw	r24, r26
    7a84:	08 95       	ret

00007a86 <putChar_Manual>:
    7a86:	83 30       	cpi	r24, 0x03	; 3
    7a88:	38 f4       	brcc	.+14     	; 0x7a98 <putChar_Manual+0x12>
    7a8a:	fb 01       	movw	r30, r22
    7a8c:	31 96       	adiw	r30, 0x01	; 1
    7a8e:	93 e3       	ldi	r25, 0x33	; 51
    7a90:	98 1b       	sub	r25, r24
    7a92:	db 01       	movw	r26, r22
    7a94:	9c 93       	st	X, r25
    7a96:	0d c0       	rjmp	.+26     	; 0x7ab2 <putChar_Manual+0x2c>
    7a98:	83 30       	cpi	r24, 0x03	; 3
    7a9a:	31 f4       	brne	.+12     	; 0x7aa8 <putChar_Manual+0x22>
    7a9c:	fb 01       	movw	r30, r22
    7a9e:	31 96       	adiw	r30, 0x01	; 1
    7aa0:	80 e5       	ldi	r24, 0x50	; 80
    7aa2:	db 01       	movw	r26, r22
    7aa4:	8c 93       	st	X, r24
    7aa6:	05 c0       	rjmp	.+10     	; 0x7ab2 <putChar_Manual+0x2c>
    7aa8:	fb 01       	movw	r30, r22
    7aaa:	31 96       	adiw	r30, 0x01	; 1
    7aac:	8d e2       	ldi	r24, 0x2D	; 45
    7aae:	db 01       	movw	r26, r22
    7ab0:	8c 93       	st	X, r24
    7ab2:	10 82       	st	Z, r1
    7ab4:	cf 01       	movw	r24, r30
    7ab6:	08 95       	ret

00007ab8 <putString_P>:
    7ab8:	fc 01       	movw	r30, r24
    7aba:	db 01       	movw	r26, r22
    7abc:	20 e0       	ldi	r18, 0x00	; 0
    7abe:	02 c0       	rjmp	.+4      	; 0x7ac4 <putString_P+0xc>
    7ac0:	28 2f       	mov	r18, r24
    7ac2:	da 01       	movw	r26, r20
    7ac4:	94 91       	lpm	r25, Z
    7ac6:	99 23       	and	r25, r25
    7ac8:	51 f0       	breq	.+20     	; 0x7ade <putString_P+0x26>
    7aca:	ad 01       	movw	r20, r26
    7acc:	4f 5f       	subi	r20, 0xFF	; 255
    7ace:	5f 4f       	sbci	r21, 0xFF	; 255
    7ad0:	31 96       	adiw	r30, 0x01	; 1
    7ad2:	9c 93       	st	X, r25
    7ad4:	81 e0       	ldi	r24, 0x01	; 1
    7ad6:	82 0f       	add	r24, r18
    7ad8:	24 31       	cpi	r18, 0x14	; 20
    7ada:	90 f3       	brcs	.-28     	; 0x7ac0 <putString_P+0x8>
    7adc:	01 c0       	rjmp	.+2      	; 0x7ae0 <putString_P+0x28>
    7ade:	ad 01       	movw	r20, r26
    7ae0:	ca 01       	movw	r24, r20
    7ae2:	08 95       	ret

00007ae4 <putString_Prog>:
    7ae4:	fc 01       	movw	r30, r24
    7ae6:	80 e5       	ldi	r24, 0x50	; 80
    7ae8:	80 83       	st	Z, r24
    7aea:	96 2f       	mov	r25, r22
    7aec:	96 95       	lsr	r25
    7aee:	96 95       	lsr	r25
    7af0:	96 95       	lsr	r25
    7af2:	97 70       	andi	r25, 0x07	; 7
    7af4:	9f 5b       	subi	r25, 0xBF	; 191
    7af6:	91 83       	std	Z+1, r25	; 0x01
    7af8:	67 70       	andi	r22, 0x07	; 7
    7afa:	6f 5c       	subi	r22, 0xCF	; 207
    7afc:	62 83       	std	Z+2, r22	; 0x02
    7afe:	cf 01       	movw	r24, r30
    7b00:	03 96       	adiw	r24, 0x03	; 3
    7b02:	08 95       	ret

00007b04 <lcd_wordout>:
    7b04:	cf 93       	push	r28
    7b06:	c8 2f       	mov	r28, r24
    7b08:	89 2f       	mov	r24, r25
    7b0a:	4c de       	rcall	.-872    	; 0x77a4 <lcd_hexout>
    7b0c:	8c 2f       	mov	r24, r28
    7b0e:	4a de       	rcall	.-876    	; 0x77a4 <lcd_hexout>
    7b10:	cf 91       	pop	r28
    7b12:	08 95       	ret

00007b14 <lcd_noteOut>:
    7b14:	cf 93       	push	r28
    7b16:	df 93       	push	r29
    7b18:	88 23       	and	r24, r24
    7b1a:	e4 f1       	brlt	.+120    	; 0x7b94 <lcd_noteOut+0x80>
    7b1c:	90 e0       	ldi	r25, 0x00	; 0
    7b1e:	02 c0       	rjmp	.+4      	; 0x7b24 <lcd_noteOut+0x10>
    7b20:	9f 5f       	subi	r25, 0xFF	; 255
    7b22:	8c 50       	subi	r24, 0x0C	; 12
    7b24:	8c 30       	cpi	r24, 0x0C	; 12
    7b26:	e0 f7       	brcc	.-8      	; 0x7b20 <lcd_noteOut+0xc>
    7b28:	48 2f       	mov	r20, r24
    7b2a:	50 e0       	ldi	r21, 0x00	; 0
    7b2c:	4c 30       	cpi	r20, 0x0C	; 12
    7b2e:	51 05       	cpc	r21, r1
    7b30:	30 f4       	brcc	.+12     	; 0x7b3e <lcd_noteOut+0x2a>
    7b32:	fa 01       	movw	r30, r20
    7b34:	88 27       	eor	r24, r24
    7b36:	ea 55       	subi	r30, 0x5A	; 90
    7b38:	ff 4f       	sbci	r31, 0xFF	; 255
    7b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    7b3c:	50 c1       	rjmp	.+672    	; 0x7dde <__tablejump2__>
    7b3e:	d3 e2       	ldi	r29, 0x23	; 35
    7b40:	80 e2       	ldi	r24, 0x20	; 32
    7b42:	23 c0       	rjmp	.+70     	; 0x7b8a <lcd_noteOut+0x76>
    7b44:	d3 e2       	ldi	r29, 0x23	; 35
    7b46:	84 e4       	ldi	r24, 0x44	; 68
    7b48:	20 c0       	rjmp	.+64     	; 0x7b8a <lcd_noteOut+0x76>
    7b4a:	d3 e2       	ldi	r29, 0x23	; 35
    7b4c:	86 e4       	ldi	r24, 0x46	; 70
    7b4e:	1d c0       	rjmp	.+58     	; 0x7b8a <lcd_noteOut+0x76>
    7b50:	d3 e2       	ldi	r29, 0x23	; 35
    7b52:	87 e4       	ldi	r24, 0x47	; 71
    7b54:	1a c0       	rjmp	.+52     	; 0x7b8a <lcd_noteOut+0x76>
    7b56:	d3 e2       	ldi	r29, 0x23	; 35
    7b58:	81 e4       	ldi	r24, 0x41	; 65
    7b5a:	17 c0       	rjmp	.+46     	; 0x7b8a <lcd_noteOut+0x76>
    7b5c:	d5 ea       	ldi	r29, 0xA5	; 165
    7b5e:	83 e4       	ldi	r24, 0x43	; 67
    7b60:	14 c0       	rjmp	.+40     	; 0x7b8a <lcd_noteOut+0x76>
    7b62:	d5 ea       	ldi	r29, 0xA5	; 165
    7b64:	84 e4       	ldi	r24, 0x44	; 68
    7b66:	11 c0       	rjmp	.+34     	; 0x7b8a <lcd_noteOut+0x76>
    7b68:	d5 ea       	ldi	r29, 0xA5	; 165
    7b6a:	85 e4       	ldi	r24, 0x45	; 69
    7b6c:	0e c0       	rjmp	.+28     	; 0x7b8a <lcd_noteOut+0x76>
    7b6e:	d5 ea       	ldi	r29, 0xA5	; 165
    7b70:	86 e4       	ldi	r24, 0x46	; 70
    7b72:	0b c0       	rjmp	.+22     	; 0x7b8a <lcd_noteOut+0x76>
    7b74:	d5 ea       	ldi	r29, 0xA5	; 165
    7b76:	87 e4       	ldi	r24, 0x47	; 71
    7b78:	08 c0       	rjmp	.+16     	; 0x7b8a <lcd_noteOut+0x76>
    7b7a:	d5 ea       	ldi	r29, 0xA5	; 165
    7b7c:	81 e4       	ldi	r24, 0x41	; 65
    7b7e:	05 c0       	rjmp	.+10     	; 0x7b8a <lcd_noteOut+0x76>
    7b80:	d5 ea       	ldi	r29, 0xA5	; 165
    7b82:	88 e4       	ldi	r24, 0x48	; 72
    7b84:	02 c0       	rjmp	.+4      	; 0x7b8a <lcd_noteOut+0x76>
    7b86:	d3 e2       	ldi	r29, 0x23	; 35
    7b88:	83 e4       	ldi	r24, 0x43	; 67
    7b8a:	99 23       	and	r25, r25
    7b8c:	39 f0       	breq	.+14     	; 0x7b9c <lcd_noteOut+0x88>
    7b8e:	cf e2       	ldi	r28, 0x2F	; 47
    7b90:	c9 0f       	add	r28, r25
    7b92:	05 c0       	rjmp	.+10     	; 0x7b9e <lcd_noteOut+0x8a>
    7b94:	cd e2       	ldi	r28, 0x2D	; 45
    7b96:	dd e2       	ldi	r29, 0x2D	; 45
    7b98:	8d e2       	ldi	r24, 0x2D	; 45
    7b9a:	01 c0       	rjmp	.+2      	; 0x7b9e <lcd_noteOut+0x8a>
    7b9c:	cd e2       	ldi	r28, 0x2D	; 45
    7b9e:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7ba2:	8d 2f       	mov	r24, r29
    7ba4:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7ba8:	8c 2f       	mov	r24, r28
    7baa:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7bae:	83 e0       	ldi	r24, 0x03	; 3
    7bb0:	df 91       	pop	r29
    7bb2:	cf 91       	pop	r28
    7bb4:	08 95       	ret

00007bb6 <lcd_ChannelOut>:
    7bb6:	cf 93       	push	r28
    7bb8:	c8 2f       	mov	r28, r24
    7bba:	cf 70       	andi	r28, 0x0F	; 15
    7bbc:	81 e0       	ldi	r24, 0x01	; 1
    7bbe:	8c 0f       	add	r24, r28
    7bc0:	8a 30       	cpi	r24, 0x0A	; 10
    7bc2:	28 f0       	brcs	.+10     	; 0x7bce <lcd_ChannelOut+0x18>
    7bc4:	81 e3       	ldi	r24, 0x31	; 49
    7bc6:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7bca:	87 ef       	ldi	r24, 0xF7	; 247
    7bcc:	8c 0f       	add	r24, r28
    7bce:	80 5d       	subi	r24, 0xD0	; 208
    7bd0:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7bd4:	cf 91       	pop	r28
    7bd6:	08 95       	ret

00007bd8 <lcd_ManualOutDec>:
    7bd8:	84 30       	cpi	r24, 0x04	; 4
    7bda:	20 f0       	brcs	.+8      	; 0x7be4 <lcd_ManualOutDec+0xc>
    7bdc:	8d e2       	ldi	r24, 0x2D	; 45
    7bde:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    7be2:	08 95       	ret
    7be4:	83 30       	cpi	r24, 0x03	; 3
    7be6:	21 f4       	brne	.+8      	; 0x7bf0 <lcd_ManualOutDec+0x18>
    7be8:	80 e5       	ldi	r24, 0x50	; 80
    7bea:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    7bee:	08 95       	ret
    7bf0:	93 e3       	ldi	r25, 0x33	; 51
    7bf2:	98 1b       	sub	r25, r24
    7bf4:	89 2f       	mov	r24, r25
    7bf6:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    7bfa:	08 95       	ret

00007bfc <lcd_blank>:
    7bfc:	cf 93       	push	r28
    7bfe:	04 c0       	rjmp	.+8      	; 0x7c08 <lcd_blank+0xc>
    7c00:	80 e2       	ldi	r24, 0x20	; 32
    7c02:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7c06:	8c 2f       	mov	r24, r28
    7c08:	cf ef       	ldi	r28, 0xFF	; 255
    7c0a:	c8 0f       	add	r28, r24
    7c0c:	81 11       	cpse	r24, r1
    7c0e:	f8 cf       	rjmp	.-16     	; 0x7c00 <lcd_blank+0x4>
    7c10:	cf 91       	pop	r28
    7c12:	08 95       	ret

00007c14 <lcd_clrEol>:
    7c14:	cf 93       	push	r28
    7c16:	90 e0       	ldi	r25, 0x00	; 0
    7c18:	04 c0       	rjmp	.+8      	; 0x7c22 <lcd_clrEol+0xe>
    7c1a:	80 e2       	ldi	r24, 0x20	; 32
    7c1c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7c20:	9c 2f       	mov	r25, r28
    7c22:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7c26:	84 31       	cpi	r24, 0x14	; 20
    7c28:	51 f0       	breq	.+20     	; 0x7c3e <lcd_clrEol+0x2a>
    7c2a:	84 35       	cpi	r24, 0x54	; 84
    7c2c:	41 f0       	breq	.+16     	; 0x7c3e <lcd_clrEol+0x2a>
    7c2e:	88 32       	cpi	r24, 0x28	; 40
    7c30:	31 f0       	breq	.+12     	; 0x7c3e <lcd_clrEol+0x2a>
    7c32:	88 36       	cpi	r24, 0x68	; 104
    7c34:	21 f0       	breq	.+8      	; 0x7c3e <lcd_clrEol+0x2a>
    7c36:	c1 e0       	ldi	r28, 0x01	; 1
    7c38:	c9 0f       	add	r28, r25
    7c3a:	94 31       	cpi	r25, 0x14	; 20
    7c3c:	70 f3       	brcs	.-36     	; 0x7c1a <lcd_clrEol+0x6>
    7c3e:	cf 91       	pop	r28
    7c40:	08 95       	ret

00007c42 <lcd_waitSymbolOn>:
    7c42:	cf 93       	push	r28
    7c44:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7c48:	8c e0       	ldi	r24, 0x0C	; 12
    7c4a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7c4e:	81 ea       	ldi	r24, 0xA1	; 161
    7c50:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7c54:	8c 2f       	mov	r24, r28
    7c56:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7c5a:	cf 91       	pop	r28
    7c5c:	08 95       	ret

00007c5e <lcd_waitSymbolOff>:
    7c5e:	cf 93       	push	r28
    7c60:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7c64:	8c e0       	ldi	r24, 0x0C	; 12
    7c66:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7c6a:	80 e2       	ldi	r24, 0x20	; 32
    7c6c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7c70:	8c 2f       	mov	r24, r28
    7c72:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7c76:	cf 91       	pop	r28
    7c78:	08 95       	ret

00007c7a <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    7c7a:	84 30       	cpi	r24, 0x04	; 4
    7c7c:	28 f0       	brcs	.+10     	; 0x7c88 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    7c7e:	20 e0       	ldi	r18, 0x00	; 0
    7c80:	0d c0       	rjmp	.+26     	; 0x7c9c <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7c82:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    7c84:	fa 01       	movw	r30, r20
    7c86:	02 c0       	rjmp	.+4      	; 0x7c8c <keylabel_set+0x12>
    7c88:	fb 01       	movw	r30, r22
    7c8a:	20 e0       	ldi	r18, 0x00	; 0
    7c8c:	af 01       	movw	r20, r30
    7c8e:	4f 5f       	subi	r20, 0xFF	; 255
    7c90:	5f 4f       	sbci	r21, 0xFF	; 255
    7c92:	94 91       	lpm	r25, Z
    7c94:	99 23       	and	r25, r25
    7c96:	11 f0       	breq	.+4      	; 0x7c9c <keylabel_set+0x22>
    7c98:	25 30       	cpi	r18, 0x05	; 5
    7c9a:	98 f3       	brcs	.-26     	; 0x7c82 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7c9c:	90 e0       	ldi	r25, 0x00	; 0
    7c9e:	dc 01       	movw	r26, r24
    7ca0:	aa 0f       	add	r26, r26
    7ca2:	bb 1f       	adc	r27, r27
    7ca4:	aa 0f       	add	r26, r26
    7ca6:	bb 1f       	adc	r27, r27
    7ca8:	8a 0f       	add	r24, r26
    7caa:	9b 1f       	adc	r25, r27
    7cac:	dc 01       	movw	r26, r24
    7cae:	ae 5c       	subi	r26, 0xCE	; 206
    7cb0:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7cb2:	45 e0       	ldi	r20, 0x05	; 5
    7cb4:	50 e0       	ldi	r21, 0x00	; 0
    7cb6:	42 1b       	sub	r20, r18
    7cb8:	51 09       	sbc	r21, r1
    7cba:	ca 01       	movw	r24, r20
    7cbc:	99 23       	and	r25, r25
    7cbe:	0c f4       	brge	.+2      	; 0x7cc2 <keylabel_set+0x48>
    7cc0:	01 96       	adiw	r24, 0x01	; 1
    7cc2:	95 95       	asr	r25
    7cc4:	87 95       	ror	r24
    7cc6:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    7cc8:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    7cca:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7ccc:	0e c0       	rjmp	.+28     	; 0x7cea <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7cce:	93 17       	cp	r25, r19
    7cd0:	10 f0       	brcs	.+4      	; 0x7cd6 <keylabel_set+0x5c>
    7cd2:	98 17       	cp	r25, r24
    7cd4:	18 f0       	brcs	.+6      	; 0x7cdc <keylabel_set+0x62>
			*charBufPtr = ' ';
    7cd6:	20 e2       	ldi	r18, 0x20	; 32
    7cd8:	2c 93       	st	X, r18
    7cda:	05 c0       	rjmp	.+10     	; 0x7ce6 <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7cdc:	fb 01       	movw	r30, r22
    7cde:	24 91       	lpm	r18, Z
    7ce0:	2c 93       	st	X, r18
    7ce2:	6f 5f       	subi	r22, 0xFF	; 255
    7ce4:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    7ce6:	11 96       	adiw	r26, 0x01	; 1
		i++;
    7ce8:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7cea:	95 30       	cpi	r25, 0x05	; 5
    7cec:	80 f3       	brcs	.-32     	; 0x7cce <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7cee:	08 95       	ret

00007cf0 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7cf0:	90 e0       	ldi	r25, 0x00	; 0
    7cf2:	fc 01       	movw	r30, r24
    7cf4:	ee 0f       	add	r30, r30
    7cf6:	ff 1f       	adc	r31, r31
    7cf8:	ee 0f       	add	r30, r30
    7cfa:	ff 1f       	adc	r31, r31
    7cfc:	8e 0f       	add	r24, r30
    7cfe:	9f 1f       	adc	r25, r31
    7d00:	fc 01       	movw	r30, r24
    7d02:	ee 5c       	subi	r30, 0xCE	; 206
    7d04:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7d06:	80 e0       	ldi	r24, 0x00	; 0
    7d08:	04 c0       	rjmp	.+8      	; 0x7d12 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    7d0a:	90 e2       	ldi	r25, 0x20	; 32
    7d0c:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7d0e:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7d10:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7d12:	85 30       	cpi	r24, 0x05	; 5
    7d14:	d0 f3       	brcs	.-12     	; 0x7d0a <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    7d16:	08 95       	ret

00007d18 <keylabel_toLCD>:

void keylabel_toLCD(){
    7d18:	0f 93       	push	r16
    7d1a:	1f 93       	push	r17
    7d1c:	cf 93       	push	r28
    7d1e:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7d20:	d0 91 cd 03 	lds	r29, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    7d24:	84 e5       	ldi	r24, 0x54	; 84
    7d26:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7d2a:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7d2c:	e2 e3       	ldi	r30, 0x32	; 50
    7d2e:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7d30:	08 c0       	rjmp	.+16     	; 0x7d42 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    7d32:	8f 01       	movw	r16, r30
    7d34:	0f 5f       	subi	r16, 0xFF	; 255
    7d36:	1f 4f       	sbci	r17, 0xFF	; 255
    7d38:	80 81       	ld	r24, Z
    7d3a:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7d3e:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    7d40:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7d42:	c4 31       	cpi	r28, 0x14	; 20
    7d44:	b0 f3       	brcs	.-20     	; 0x7d32 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    7d46:	8d 2f       	mov	r24, r29
    7d48:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
}
    7d4c:	df 91       	pop	r29
    7d4e:	cf 91       	pop	r28
    7d50:	1f 91       	pop	r17
    7d52:	0f 91       	pop	r16
    7d54:	08 95       	ret

00007d56 <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7d56:	90 e0       	ldi	r25, 0x00	; 0
    7d58:	fc 01       	movw	r30, r24
    7d5a:	ee 0f       	add	r30, r30
    7d5c:	ff 1f       	adc	r31, r31
    7d5e:	ee 0f       	add	r30, r30
    7d60:	ff 1f       	adc	r31, r31
    7d62:	8e 0f       	add	r24, r30
    7d64:	9f 1f       	adc	r25, r31
    7d66:	fc 01       	movw	r30, r24
    7d68:	ee 5c       	subi	r30, 0xCE	; 206
    7d6a:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7d6c:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7d6e:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7d70:	12 c0       	rjmp	.+36     	; 0x7d96 <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    7d72:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7d74:	61 11       	cpse	r22, r1
    7d76:	06 c0       	rjmp	.+12     	; 0x7d84 <keylabel_statcheck+0x2e>
    7d78:	2a 32       	cpi	r18, 0x2A	; 42
    7d7a:	21 f4       	brne	.+8      	; 0x7d84 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7d7c:	80 e8       	ldi	r24, 0x80	; 128
    7d7e:	80 83       	st	Z, r24
			result = 0xFF;
    7d80:	8f ef       	ldi	r24, 0xFF	; 255
    7d82:	07 c0       	rjmp	.+14     	; 0x7d92 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7d84:	66 23       	and	r22, r22
    7d86:	29 f0       	breq	.+10     	; 0x7d92 <keylabel_statcheck+0x3c>
    7d88:	20 38       	cpi	r18, 0x80	; 128
    7d8a:	19 f4       	brne	.+6      	; 0x7d92 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    7d8c:	8a e2       	ldi	r24, 0x2A	; 42
    7d8e:	80 83       	st	Z, r24
			result = 0xFF;
    7d90:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    7d92:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7d94:	9f 5f       	subi	r25, 0xFF	; 255
    7d96:	95 30       	cpi	r25, 0x05	; 5
    7d98:	60 f3       	brcs	.-40     	; 0x7d72 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7d9a:	08 95       	ret

00007d9c <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7d9c:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7d9e:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7da0:	94 91       	lpm	r25, Z
    7da2:	99 23       	and	r25, r25
    7da4:	21 f0       	breq	.+8      	; 0x7dae <get_StrLenP+0x12>
			return result;
		}
		pString++;
    7da6:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7da8:	8f 5f       	subi	r24, 0xFF	; 255
    7daa:	80 32       	cpi	r24, 0x20	; 32
    7dac:	c8 f3       	brcs	.-14     	; 0x7da0 <get_StrLenP+0x4>
	return result;
}
    7dae:	08 95       	ret

00007db0 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7db0:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7db2:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7db4:	90 81       	ld	r25, Z
    7db6:	99 23       	and	r25, r25
    7db8:	21 f0       	breq	.+8      	; 0x7dc2 <get_StrLen+0x12>
			return result;
		}
		pString++;
    7dba:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7dbc:	8f 5f       	subi	r24, 0xFF	; 255
    7dbe:	80 32       	cpi	r24, 0x20	; 32
    7dc0:	c8 f3       	brcs	.-14     	; 0x7db4 <get_StrLen+0x4>
	return result;
}
    7dc2:	08 95       	ret

00007dc4 <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    7dc4:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7dc6:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    7dc8:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7dca:	06 c0       	rjmp	.+12     	; 0x7dd8 <reverse_Bits+0x14>
		result = result << 1;
    7dcc:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7dce:	32 2f       	mov	r19, r18
    7dd0:	31 70       	andi	r19, 0x01	; 1
    7dd2:	83 2b       	or	r24, r19
		val = val >> 1;
    7dd4:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7dd6:	9f 5f       	subi	r25, 0xFF	; 255
    7dd8:	98 30       	cpi	r25, 0x08	; 8
    7dda:	c0 f3       	brcs	.-16     	; 0x7dcc <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7ddc:	08 95       	ret

00007dde <__tablejump2__>:
    7dde:	ee 0f       	add	r30, r30
    7de0:	ff 1f       	adc	r31, r31
    7de2:	88 1f       	adc	r24, r24
    7de4:	8b bf       	out	0x3b, r24	; 59
    7de6:	07 90       	elpm	r0, Z+
    7de8:	f6 91       	elpm	r31, Z
    7dea:	e0 2d       	mov	r30, r0
    7dec:	19 94       	eijmp

00007dee <eeprom_read_block>:
    7dee:	dc 01       	movw	r26, r24
    7df0:	cb 01       	movw	r24, r22

00007df2 <eeprom_read_blraw>:
    7df2:	fc 01       	movw	r30, r24
    7df4:	f9 99       	sbic	0x1f, 1	; 31
    7df6:	fe cf       	rjmp	.-4      	; 0x7df4 <eeprom_read_blraw+0x2>
    7df8:	06 c0       	rjmp	.+12     	; 0x7e06 <eeprom_read_blraw+0x14>
    7dfa:	f2 bd       	out	0x22, r31	; 34
    7dfc:	e1 bd       	out	0x21, r30	; 33
    7dfe:	f8 9a       	sbi	0x1f, 0	; 31
    7e00:	31 96       	adiw	r30, 0x01	; 1
    7e02:	00 b4       	in	r0, 0x20	; 32
    7e04:	0d 92       	st	X+, r0
    7e06:	41 50       	subi	r20, 0x01	; 1
    7e08:	50 40       	sbci	r21, 0x00	; 0
    7e0a:	b8 f7       	brcc	.-18     	; 0x7dfa <eeprom_read_blraw+0x8>
    7e0c:	08 95       	ret

00007e0e <eeprom_read_byte>:
    7e0e:	f9 99       	sbic	0x1f, 1	; 31
    7e10:	fe cf       	rjmp	.-4      	; 0x7e0e <eeprom_read_byte>
    7e12:	92 bd       	out	0x22, r25	; 34
    7e14:	81 bd       	out	0x21, r24	; 33
    7e16:	f8 9a       	sbi	0x1f, 0	; 31
    7e18:	99 27       	eor	r25, r25
    7e1a:	80 b5       	in	r24, 0x20	; 32
    7e1c:	08 95       	ret

00007e1e <eeprom_read_word>:
    7e1e:	a8 e1       	ldi	r26, 0x18	; 24
    7e20:	b0 e0       	ldi	r27, 0x00	; 0
    7e22:	42 e0       	ldi	r20, 0x02	; 2
    7e24:	50 e0       	ldi	r21, 0x00	; 0
    7e26:	e5 cf       	rjmp	.-54     	; 0x7df2 <eeprom_read_blraw>

00007e28 <eeprom_update_block>:
    7e28:	dc 01       	movw	r26, r24
    7e2a:	a4 0f       	add	r26, r20
    7e2c:	b5 1f       	adc	r27, r21
    7e2e:	41 50       	subi	r20, 0x01	; 1
    7e30:	50 40       	sbci	r21, 0x00	; 0
    7e32:	40 f0       	brcs	.+16     	; 0x7e44 <eeprom_update_block+0x1c>
    7e34:	cb 01       	movw	r24, r22
    7e36:	84 0f       	add	r24, r20
    7e38:	95 1f       	adc	r25, r21
    7e3a:	2e 91       	ld	r18, -X
    7e3c:	05 d0       	rcall	.+10     	; 0x7e48 <eeprom_update_r18>
    7e3e:	41 50       	subi	r20, 0x01	; 1
    7e40:	50 40       	sbci	r21, 0x00	; 0
    7e42:	d8 f7       	brcc	.-10     	; 0x7e3a <eeprom_update_block+0x12>
    7e44:	08 95       	ret

00007e46 <eeprom_update_byte>:
    7e46:	26 2f       	mov	r18, r22

00007e48 <eeprom_update_r18>:
    7e48:	f9 99       	sbic	0x1f, 1	; 31
    7e4a:	fe cf       	rjmp	.-4      	; 0x7e48 <eeprom_update_r18>
    7e4c:	92 bd       	out	0x22, r25	; 34
    7e4e:	81 bd       	out	0x21, r24	; 33
    7e50:	f8 9a       	sbi	0x1f, 0	; 31
    7e52:	01 97       	sbiw	r24, 0x01	; 1
    7e54:	00 b4       	in	r0, 0x20	; 32
    7e56:	02 16       	cp	r0, r18
    7e58:	39 f0       	breq	.+14     	; 0x7e68 <eeprom_update_r18+0x20>
    7e5a:	1f ba       	out	0x1f, r1	; 31
    7e5c:	20 bd       	out	0x20, r18	; 32
    7e5e:	0f b6       	in	r0, 0x3f	; 63
    7e60:	f8 94       	cli
    7e62:	fa 9a       	sbi	0x1f, 2	; 31
    7e64:	f9 9a       	sbi	0x1f, 1	; 31
    7e66:	0f be       	out	0x3f, r0	; 63
    7e68:	08 95       	ret

00007e6a <eeprom_update_word>:
    7e6a:	01 96       	adiw	r24, 0x01	; 1
    7e6c:	27 2f       	mov	r18, r23
    7e6e:	ec df       	rcall	.-40     	; 0x7e48 <eeprom_update_r18>
    7e70:	ea cf       	rjmp	.-44     	; 0x7e46 <eeprom_update_byte>

00007e72 <_exit>:
    7e72:	f8 94       	cli

00007e74 <__stop_program>:
    7e74:	ff cf       	rjmp	.-2      	; 0x7e74 <__stop_program>
