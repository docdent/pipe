
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00006ab2  00006b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006ab2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000b4e  00800208  00800208  00006b6e  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00006b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000060  00000000  00000000  00007b6e  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007bd0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a18  00000000  00000000  00007c10  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000cf48  00000000  00000000  00008628  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000023ee  00000000  00000000  00015570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000079b9  00000000  00000000  0001795e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000017bc  00000000  00000000  0001f318  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002f3f  00000000  00000000  00020ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007e01  00000000  00000000  00023a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ce0  00000000  00000000  0002b814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__ctors_end>
       4:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
       8:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
       c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      10:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      14:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      18:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      1c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      20:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      24:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      28:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      2c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      30:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      34:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      38:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      3c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      40:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      44:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      48:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      4c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      50:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      54:	0c 94 db 0e 	jmp	0x1db6	; 0x1db6 <__vector_21>
      58:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      5c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      60:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      64:	0c 94 a8 31 	jmp	0x6350	; 0x6350 <__vector_25>
      68:	0c 94 d3 31 	jmp	0x63a6	; 0x63a6 <__vector_26>
      6c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      70:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      74:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      78:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      7c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      80:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      84:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      88:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      8c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      90:	0c 94 ab 30 	jmp	0x6156	; 0x6156 <__vector_36>
      94:	0c 94 eb 30 	jmp	0x61d6	; 0x61d6 <__vector_37>
      98:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      9c:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      a0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      a4:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      a8:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      ac:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      b0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      b4:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      b8:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      bc:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      c0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      c4:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      c8:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      cc:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      d0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      d4:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      d8:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      dc:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      e0:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__bad_interrupt>
      e4:	21 1b       	sub	r18, r17
      e6:	2c 1b       	sub	r18, r28
      e8:	38 1b       	sub	r19, r24
      ea:	54 1b       	sub	r21, r20
      ec:	71 1b       	sub	r23, r17
      ee:	92 1b       	sub	r25, r18
      f0:	9d 1b       	sub	r25, r29
      f2:	a8 1b       	sub	r26, r24
      f4:	bd 1b       	sub	r27, r29
      f6:	d3 1b       	sub	r29, r19
      f8:	db 1b       	sub	r29, r27
      fa:	e9 1b       	sub	r30, r25
      fc:	bd 1b       	sub	r27, r29
      fe:	16 1c       	adc	r1, r6
     100:	26 1c       	adc	r2, r6
     102:	4a 1c       	adc	r4, r10
     104:	9c 1c       	adc	r9, r12
     106:	b5 1c       	adc	r11, r5
     108:	ca 1c       	adc	r12, r10
     10a:	e3 1c       	adc	r14, r3
     10c:	eb 1c       	adc	r14, r11
     10e:	10 1d       	adc	r17, r0
     110:	10 1d       	adc	r17, r0
     112:	29 1d       	adc	r18, r9
     114:	36 1d       	adc	r19, r6
     116:	25 1d       	adc	r18, r5
     118:	91 1d       	adc	r25, r1
     11a:	99 1d       	adc	r25, r9
     11c:	e4 1d       	adc	r30, r4
     11e:	46 1e       	adc	r4, r22
     120:	70 1e       	adc	r7, r16
     122:	9c 1e       	adc	r9, r28
     124:	cb 1e       	adc	r12, r27
     126:	d3 1e       	adc	r13, r19
     128:	d9 1e       	adc	r13, r25
     12a:	91 1d       	adc	r25, r1
     12c:	e1 1e       	adc	r14, r17
     12e:	f5 1e       	adc	r15, r21
     130:	d9 1e       	adc	r13, r25
     132:	33 1f       	adc	r19, r19
     134:	40 1f       	adc	r20, r16
     136:	4c 1f       	adc	r20, r28
     138:	61 1f       	adc	r22, r17
     13a:	7a 1f       	adc	r23, r26
     13c:	9d 1f       	adc	r25, r29
     13e:	a8 1f       	adc	r26, r24
     140:	ae 1f       	adc	r26, r30
     142:	b3 1f       	adc	r27, r19
     144:	c6 1f       	adc	r28, r22
     146:	e7 1f       	adc	r30, r23
     148:	fa 1f       	adc	r31, r26
     14a:	b3 1f       	adc	r27, r19
     14c:	be 33       	cpi	r27, 0x3E	; 62
     14e:	d3 33       	cpi	r29, 0x33	; 51
     150:	c1 33       	cpi	r28, 0x31	; 49
     152:	b2 33       	cpi	r27, 0x32	; 50
     154:	c4 33       	cpi	r28, 0x34	; 52
     156:	c7 33       	cpi	r28, 0x37	; 55
     158:	b5 33       	cpi	r27, 0x35	; 53
     15a:	ca 33       	cpi	r28, 0x3A	; 58
     15c:	b8 33       	cpi	r27, 0x38	; 56
     15e:	cd 33       	cpi	r28, 0x3D	; 61
     160:	bb 33       	cpi	r27, 0x3B	; 59
     162:	d0 33       	cpi	r29, 0x30	; 48

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWBits>:
     2b4:	2c 42 69 74 73 3a 00                                ,Bits:.

000002bb <usbHWmodule>:
     2bb:	4d 6f 64 75 6c 65 3a 00                             Module:.

000002c3 <usbHWempty>:
     2c3:	65 6d 70 74 79 00                                   empty.

000002c9 <usbHWRange>:
     2c9:	52 61 6e 67 65 3a 20 00                             Range: .

000002d1 <usbHWManual>:
     2d1:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

000002da <usbHWmodulCheck>:
     2da:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     2ea:	20 00                                                .

000002ec <usbHWmodulInst>:
     2ec:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     2fc:	3a 20 00                                            : .

000002ff <usbHWtitel>:
     2ff:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     30f:	72 61 74 69 6f 6e 0d 0a 00                          ration...

00000318 <HelloMsg>:
     318:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     328:	65 72 66 61 63 65 0d 0a 00                          erface...

00000331 <usbLog>:
     331:	4c 6f 67 0d 0a 00                                   Log...

00000337 <usbEmpty>:
     337:	65 6d 70 74 79 0d 0a 00                             empty...

0000033f <msg_programming1>:
     33f:	73 61 76 65 2e 2e 2e 00                             save....

00000347 <logNone>:
     347:	3c 6e 6f 6e 65 3e 00                                <none>.

0000034e <stringNotAssigen>:
     34e:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

00000359 <menuMessageE>:
     359:	45 3a 00                                            E:.

0000035c <menuMessageOK>:
     35c:	6f 6b 00                                            ok.

0000035f <menuMessageAbort>:
     35f:	61 62 6f 72 74 00                                   abort.

00000365 <menuMessageMIDIpanic>:
     365:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

00000374 <messageRegisterMan>:
     374:	2b 00                                               +.

00000376 <messageLoaded>:
     376:	20 52 65 67 2e 67 65 73 65 74 7a 74 00               Reg.gesetzt.

00000383 <messageSaved>:
     383:	20 52 65 67 2e 69 6e 20 4b 6f 6d 62 2e 67 65 73      Reg.in Komb.ges
     393:	70 2e 00                                            p..

00000396 <MenuMIDIOutText>:
     396:	4f 75 74 3a 00                                      Out:.

0000039b <MenuMIDIInText>:
     39b:	49 6e 3a 00                                         In:.

0000039f <initMenuText>:
     39f:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003a9 <nibbleInfo>:
	...
     3b1:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     3c1:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     3d1:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     3e1:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     3f1:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     401:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     411:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     421:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000430 <menu_selFunc>:
     430:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 ba 06     ..<none>........
     440:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     450:	c4 06 b0 06 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     460:	6e 00 00 00 00 0c a6 06 00 00 00 00 01 10 4b 6f     n.............Ko
     470:	70 70 65 6c 32 3c 33 00 00 00 88 06 80 1a 00 00     ppel2<3.........
     480:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 7e 06     ..Koppel1<3...~.
     490:	83 1a 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     ......KoppelP<3.
     4a0:	00 00 74 06 86 1a 00 00 01 10 4b 6f 70 70 65 6c     ..t.......Koppel
     4b0:	31 3c 32 00 00 00 6a 06 89 1a 00 00 01 10 4b 6f     1<2...j.......Ko
     4c0:	70 70 65 6c 50 3c 32 00 00 00 60 06 8c 1a 00 00     ppelP<2...`.....
     4d0:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 56 06     ..KoppelP<1...V.
     4e0:	8f 1a 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     ......Koppel3<2.
     4f0:	00 00 4c 06 92 1a 00 00 01 10 4b 6f 70 70 65 6c     ..L.......Koppel
     500:	33 3c 31 00 00 00 42 06 95 1a 00 00 01 10 4b 6f     3<1...B.......Ko
     510:	70 70 65 6c 33 3c 50 00 00 00 38 06 98 1a 00 00     ppel3<P...8.....
     520:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 2e 06     ..Koppel2<1.....
     530:	9b 1a 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     ......Koppel2<P.
     540:	00 00 24 06 9e 1a 00 00 01 10 4b 6f 70 70 65 6c     ..$.......Koppel
     550:	31 3c 50 00 00 00 1a 06 a1 1a 00 00 01 10 4b 6f     1<P...........Ko
     560:	6d 62 69 6e 20 31 41 00 00 00 10 06 bb 26 00 00     mbin 1A......&..
     570:	01 10 4b 6f 6d 62 69 6e 20 32 41 00 00 00 06 06     ..Kombin 2A.....
     580:	cf 26 00 00 01 10 4b 6f 6d 62 69 6e 20 33 41 00     .&....Kombin 3A.
     590:	00 00 fc 05 e3 26 00 00 01 10 4b 6f 6d 62 69 6e     .....&....Kombin
     5a0:	20 34 41 00 00 00 f2 05 f7 26 00 00 01 10 52 65      4A......&....Re
     5b0:	67 2e 61 75 73 00 00 00 00 00 e8 05 4d 17 00 00     g.aus.......M...
     5c0:	01 10 4d 49 44 49 20 4f 66 66 00 00 00 00 92 06     ..MIDI Off......
     5d0:	e1 24 00 00 c1 10 53 65 74 75 70 00 00 00 00 00     .$....Setup.....
     5e0:	a0 0c 9c 06 00 00 00 00                             ........

000005e8 <shortKeyTextRegOff>:
     5e8:	52 65 67 09 00 00 00 00 00 00                       Reg.......

000005f2 <shortKeyTextK4A>:
     5f2:	4b 62 34 41 80 00 00 00 00 00                       Kb4A......

000005fc <shortKeyTextK3A>:
     5fc:	4b 62 33 41 80 00 00 00 00 00                       Kb3A......

00000606 <shortKeyTextK2A>:
     606:	4b 62 32 41 80 00 00 00 00 00                       Kb2A......

00000610 <shortKeyTextK1A>:
     610:	4b 62 31 41 80 00 00 00 00 00                       Kb1A......

0000061a <shortKeyTextCpl1P>:
     61a:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000624 <shortKeyTextCpl2P>:
     624:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

0000062e <shortKeyTextCpl21>:
     62e:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

00000638 <shortKeyTextCpl3P>:
     638:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000642 <shortKeyTextCpl31>:
     642:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000064c <shortKeyTextCpl32>:
     64c:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000656 <shortKeyTextCplP1>:
     656:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

00000660 <shortKeyTextCplP2>:
     660:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

0000066a <shortKeyTextCpl12>:
     66a:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

00000674 <shortKeyTextCplP3>:
     674:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

0000067e <shortKeyTextCpl13>:
     67e:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

00000688 <shortKeyTextCpl23>:
     688:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

00000692 <shortKeyTextMIDIoff>:
     692:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

0000069c <shortKeyTextSetup>:
     69c:	53 65 74 75 00 00 00 00 00 00                       Setu......

000006a6 <shortKeyTextStim>:
     6a6:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000006b0 <shortKeyTextMenu>:
     6b0:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000006ba <shortKeyTextNone>:
	...

000006c4 <menu_main>:
     6c4:	81 00 4d 61 6e 75 61 6c 00 00 00 00 3c 07 00 00     ..Manual....<...
     6d4:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     6e4:	64 07 00 00 3c 1a 00 00 01 00 4d 49 44 49 00 00     d...<.....MIDI..
     6f4:	00 00 00 00 30 09 00 00 00 00 00 00 01 00 54 61     ....0.........Ta
     704:	73 74 65 6e 00 00 00 00 b0 0b 00 00 00 00 70 17     sten..........p.
     714:	01 00 53 74 61 74 75 73 00 00 00 00 c4 10 00 00     ..Status........
     724:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     734:	a0 0c 00 00 00 00 00 00                             ........

0000073c <menu_manual>:
     73c:	81 00 4b 6f 70 70 65 6c 00 00 00 00 40 08 00 00     ..Koppel....@...
     74c:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     75c:	00 0c 00 00 00 00 00 00                             ........

00000764 <menu_register>:
     764:	8c 00 4b 6f 6d 62 2e 6c 61 64 2e 00 00 00 57 05     ..Komb.lad....W.
     774:	00 00 49 1a 0c 00 4b 6f 6d 62 2e 73 70 2e 00 00     ..I...Komb.sp...
     784:	00 00 57 05 00 00 65 17 01 00 61 75 73 00 00 00     ..W...e...aus...
	...
     79c:	43 1a 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     C.....Reg.1-8...
     7ac:	00 00 1c 05 00 00 25 17 0e 00 52 65 67 2e 39 2d     ......%...Reg.9-
     7bc:	31 36 00 00 00 00 1d 05 00 00 25 17 0e 00 52 65     16........%...Re
     7cc:	67 2e 31 37 2d 32 34 00 00 00 1e 05 00 00 25 17     g.17-24.......%.
     7dc:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 1f 05     ..Reg.25-32.....
     7ec:	00 00 25 17 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..%...Reg.33-40.
     7fc:	00 00 20 05 00 00 25 17 0e 00 52 65 67 2e 34 31     .. ...%...Reg.41
     80c:	2d 34 38 00 00 00 21 05 00 00 25 17 0e 00 52 65     -48...!...%...Re
     81c:	67 2e 34 39 2d 35 34 00 00 00 22 05 00 00 25 17     g.49-54..."...%.
     82c:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 23 05     ..Reg.55-64...#.
     83c:	00 00 25 17                                         ..%.

00000840 <menu_coupler>:
     840:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 be 07     ..2<3...........
     850:	00 00 52 17 09 00 31 3c 33 00 00 00 00 00 00 00     ..R...1<3.......
     860:	00 00 bf 07 00 00 52 17 09 00 31 3c 32 00 00 00     ......R...1<2...
     870:	00 00 00 00 00 00 c0 07 00 00 52 17 09 00 50 3c     ..........R...P<
     880:	33 00 00 00 00 00 00 00 00 00 c1 07 00 00 52 17     3.............R.
     890:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 c2 07     ..P<2...........
     8a0:	00 00 52 17 09 00 50 3c 31 00 00 00 00 00 00 00     ..R...P<1.......
     8b0:	00 00 c3 07 00 00 52 17 09 00 33 3c 32 00 00 00     ......R...3<2...
     8c0:	00 00 00 00 00 00 c4 07 00 00 52 17 09 00 33 3c     ..........R...3<
     8d0:	31 00 00 00 00 00 00 00 00 00 c5 07 00 00 52 17     1.............R.
     8e0:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 c6 07     ..3<P...........
     8f0:	00 00 52 17 09 00 32 3c 31 00 00 00 00 00 00 00     ..R...2<1.......
     900:	00 00 c7 07 00 00 52 17 09 00 32 3c 50 00 00 00     ......R...2<P...
     910:	00 00 00 00 00 00 c8 07 00 00 52 17 c9 00 31 3c     ..........R...1<
     920:	50 00 00 00 00 00 00 00 00 00 c9 07 00 00 52 17     P.............R.

00000930 <menu_midi>:
     930:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     940:	e1 24 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .$....MIDIin....
     950:	d0 09 00 00 00 00 de 18 01 00 4d 49 44 49 6f 75     ..........MIDIou
     960:	74 00 00 00 50 0c 00 00 00 00 da 18 03 10 54 68     t...P.........Th
     970:	72 75 2d 49 6e 00 00 00 00 00 d3 07 00 00 21 17     ru-In.........!.
     980:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 d4 07     ..Thru-Out......
     990:	00 00 21 17 09 00 41 63 63 65 70 74 20 50 43 00     ..!...Accept PC.
     9a0:	00 00 db 08 00 00 d6 18 09 00 41 63 74 2e 53 65     ..........Act.Se
     9b0:	6e 73 65 00 00 00 d9 08 00 00 d6 18 c9 00 56 65     nse...........Ve
     9c0:	6c 30 34 4f 66 66 00 00 00 00 da 08 00 00 d6 18     l04Off..........

000009d0 <menu_midiIn>:
     9d0:	81 00 43 68 2e 31 00 00 00 00 00 00 10 0b 00 00     ..Ch.1..........
     9e0:	9b 16 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     9f0:	10 0b 01 00 9b 16 00 00 01 00 43 68 2e 33 00 00     ..........Ch.3..
     a00:	00 00 00 00 10 0b 02 00 9b 16 00 00 01 00 43 68     ..............Ch
     a10:	2e 34 00 00 00 00 00 00 10 0b 03 00 9b 16 00 00     .4..............
     a20:	01 00 43 68 2e 35 00 00 00 00 00 00 10 0b 04 00     ..Ch.5..........
     a30:	9b 16 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     a40:	10 0b 05 00 9b 16 00 00 01 00 43 68 2e 37 00 00     ..........Ch.7..
     a50:	00 00 00 00 10 0b 06 00 9b 16 00 00 01 00 43 68     ..............Ch
     a60:	2e 38 00 00 00 00 00 00 10 0b 07 00 9b 16 00 00     .8..............
     a70:	01 00 43 68 2e 39 00 00 00 00 00 00 10 0b 08 00     ..Ch.9..........
     a80:	9b 16 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     a90:	10 0b 09 00 9b 16 00 00 01 00 43 68 2e 31 31 00     ..........Ch.11.
     aa0:	00 00 00 00 10 0b 0a 00 9b 16 00 00 01 00 43 68     ..............Ch
     ab0:	2e 31 32 00 00 00 00 00 10 0b 0b 00 9b 16 00 00     .12.............
     ac0:	01 00 43 68 2e 31 33 00 00 00 00 00 10 0b 0c 00     ..Ch.13.........
     ad0:	9b 16 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     ae0:	10 0b 0d 00 9b 16 00 00 01 00 43 68 2e 31 35 00     ..........Ch.15.
     af0:	00 00 00 00 10 0b 0e 00 9b 16 00 00 c1 00 43 68     ..............Ch
     b00:	2e 31 36 00 00 00 00 00 10 0b 0f 00 9b 16 00 00     .16.............

00000b10 <menu_midiInSec>:
     b10:	81 00 53 65 63 74 2e 31 00 00 00 00 60 0b 00 00     ..Sect.1....`...
     b20:	a6 16 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     b30:	60 0b 01 00 a6 16 00 00 01 00 53 65 63 74 2e 33     `.........Sect.3
     b40:	00 00 00 00 60 0b 02 00 a6 16 00 00 c1 00 53 65     ....`.........Se
     b50:	63 74 2e 34 00 00 00 00 60 0b 03 00 a6 16 00 00     ct.4....`.......

00000b60 <menu_midiInVar>:
     b60:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 d5 07     ..Manual........
     b70:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     b80:	00 00 d6 07 00 00 00 00 06 80 52 61 6e 67 65 00     ..........Range.
     b90:	00 00 00 00 00 00 d7 07 00 00 00 00 c4 90 4d 61     ..............Ma
     ba0:	6e 4e 6f 74 65 00 00 00 00 00 d8 07 00 00 00 00     nNote...........

00000bb0 <menu_key>:
     bb0:	81 08 54 61 73 74 65 31 00 00 00 00 30 04 00 00     ..Taste1....0...
     bc0:	0a 17 92 27 01 08 54 61 73 74 65 32 00 00 00 00     ...'..Taste2....
     bd0:	30 04 01 00 0a 17 92 27 01 08 54 61 73 74 65 33     0......'..Taste3
     be0:	00 00 00 00 30 04 02 00 0a 17 92 27 c1 08 54 61     ....0......'..Ta
     bf0:	73 74 65 34 00 00 00 00 30 04 03 00 0a 17 92 27     ste4....0......'

00000c00 <menu_tune>:
     c00:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     c10:	ba 17 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     c20:	00 00 01 00 ba 17 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     c30:	00 00 00 00 00 00 02 00 ba 17 00 00 c1 20 50 65     ............. Pe
     c40:	64 61 6c 00 00 00 00 00 00 00 03 00 ba 17 00 00     dal.............

00000c50 <menu_midiOut>:
     c50:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 d5 08     ..III...........
     c60:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     c70:	00 00 d6 08 00 00 00 00 03 10 49 00 00 00 00 00     ..........I.....
     c80:	00 00 00 00 00 00 d7 08 00 00 00 00 c3 10 50 00     ..............P.
	...
     c98:	00 00 d8 08 00 00 00 00                             ........

00000ca0 <menu_setup>:
     ca0:	81 00 4d 6f 64 75 6c 65 00 00 00 00 68 0d 00 00     ..Module....h...
     cb0:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     cc0:	bc 0e 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     ..........Power.
     cd0:	00 00 00 00 2c 0d 00 00 00 00 00 00 c1 00 45 45     ....,.........EE
     ce0:	70 72 6f 6d 00 00 00 00 f0 0c 00 00 00 00 00 00     prom............

00000cf0 <menu_eeprom>:
     cf0:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     d00:	f4 25 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     .%....EEBackup..
     d10:	00 00 00 00 dc 25 00 00 c1 00 45 45 52 65 73 74     .....%....EERest
     d20:	6f 72 65 00 00 00 00 00 e8 25 00 00                 ore......%..

00000d2c <menu_Power>:
     d2c:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     d3c:	56 28 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     V(....PowerOff..
     d4c:	00 00 00 00 5f 28 00 00 c1 00 50 2e 52 65 73 74     ...._(....P.Rest
     d5c:	61 72 74 00 00 00 00 00 67 28 00 00                 art.....g(..

00000d68 <menu_module>:
     d68:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 50 03     ..ModRead.....P.
     d78:	00 00 ec 18 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     d88:	00 00 4f 03 00 00 ec 18 0a 08 4d 6f 64 4f 4b 00     ..O.......ModOK.
     d98:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     da8:	64 54 65 73 74 00 00 00 cc 0d 00 00 00 00 00 00     dTest...........
     db8:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 f8 0e 00 00     ..ModAssign.....
     dc8:	00 00 e2 18                                         ....

00000dcc <menu_ModeSel>:
     dcc:	81 00 4d 6f 64 2e 30 00 00 00 00 00 6c 0e 00 00     ..Mod.0.....l...
     ddc:	90 16 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     dec:	6c 0e 01 00 90 16 00 00 01 00 4d 6f 64 2e 32 00     l.........Mod.2.
     dfc:	00 00 00 00 6c 0e 02 00 90 16 00 00 01 00 4d 6f     ....l.........Mo
     e0c:	64 2e 33 00 00 00 00 00 6c 0e 03 00 90 16 00 00     d.3.....l.......
     e1c:	01 00 4d 6f 64 2e 34 00 00 00 00 00 6c 0e 04 00     ..Mod.4.....l...
     e2c:	90 16 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     e3c:	6c 0e 05 00 90 16 00 00 01 00 4d 6f 64 2e 36 00     l.........Mod.6.
     e4c:	00 00 00 00 6c 0e 06 00 90 16 00 00 c1 00 4d 6f     ....l.........Mo
     e5c:	64 2e 37 00 00 00 00 00 6c 0e 07 00 90 16 00 00     d.7.....l.......

00000e6c <menu_ModTestSelcted>:
     e6c:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     e7c:	74 17 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     t.....Write.....
     e8c:	00 00 5c 05 27 16 63 16 01 00 54 65 73 74 50 74     ..\.'.c...TestPt
     e9c:	72 6e 00 00 00 00 00 00 bf 25 00 00 c1 00 4c 6f     rn.......%....Lo
     eac:	6f 70 54 73 74 00 00 00 00 00 00 00 a8 17 00 00     opTst...........

00000ebc <menu_USBser>:
     ebc:	89 00 41 63 74 69 76 65 00 00 00 00 00 00 dc 0b     ..Active........
     ecc:	00 00 0e 19 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
     edc:	00 00 00 00 f0 18 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
     eec:	66 67 00 00 00 00 00 00 22 19 00 00                 fg......"...

00000ef8 <menu_modAssign>:
     ef8:	81 00 4d 61 6e 2e 33 00 00 00 00 00 fc 0f 00 00     ..Man.3.........
     f08:	c4 16 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
     f18:	fc 0f 01 00 c4 16 00 00 01 00 4d 61 6e 2e 31 00     ..........Man.1.
     f28:	00 00 00 00 fc 0f 02 00 c4 16 00 00 01 00 50 65     ..............Pe
     f38:	64 61 6c 00 00 00 00 00 fc 0f 03 00 c4 16 00 00     dal.............
     f48:	c1 00 52 65 67 69 73 74 65 72 00 00 5c 0f 04 00     ..Register..\...
     f58:	00 00 00 00                                         ....

00000f5c <menu_modSection8>:
     f5c:	81 00 53 65 63 74 2e 31 00 00 00 00 4c 10 00 00     ..Sect.1....L...
     f6c:	f4 16 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     f7c:	4c 10 01 00 f4 16 00 00 01 00 53 65 63 74 2e 33     L.........Sect.3
     f8c:	00 00 00 00 4c 10 02 00 f4 16 00 00 01 00 53 65     ....L.........Se
     f9c:	63 74 2e 34 00 00 00 00 4c 10 03 00 f4 16 00 00     ct.4....L.......
     fac:	01 00 53 65 63 74 2e 35 00 00 00 00 4c 10 04 00     ..Sect.5....L...
     fbc:	f4 16 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
     fcc:	4c 10 05 00 f4 16 00 00 01 00 53 65 63 74 2e 37     L.........Sect.7
     fdc:	00 00 00 00 4c 10 06 00 f4 16 00 00 c1 00 53 65     ....L.........Se
     fec:	63 74 2e 38 00 00 00 00 4c 10 07 00 f4 16 00 00     ct.8....L.......

00000ffc <menu_modSection>:
     ffc:	81 00 53 65 63 74 2e 31 00 00 00 00 88 10 00 00     ..Sect.1........
    100c:	cf 16 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    101c:	88 10 01 00 cf 16 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    102c:	00 00 00 00 88 10 02 00 cf 16 00 00 c1 00 53 65     ..............Se
    103c:	63 74 2e 34 00 00 00 00 88 10 03 00 cf 16 00 00     ct.4............

0000104c <menu_modDefineReg>:
    104c:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 a5 07     ..RegBeg........
    105c:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    106c:	00 00 a6 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    107c:	2f 42 69 74 00 00 a7 07 00 00 00 00                 /Bit........

00001088 <menu_modDefine>:
    1088:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 dd 08     ..NoteBeg.......
    1098:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    10a8:	00 00 de 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    10b8:	2f 42 69 74 00 00 df 08 00 00 00 00                 /Bit........

000010c4 <menu_status>:
    10c4:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    10d4:	f7 20 00 00 02 40 4d 49 44 49 2d 49 6e 00 00 00     . ...@MIDI-In...
    10e4:	00 00 00 00 7b 20 00 00 c2 40 4d 49 44 49 2d 4f     ....{ ...@MIDI-O
    10f4:	75 74 00 00 00 00 00 00 b9 20 00 00                 ut....... ..

00001100 <sw_version>:
    1100:	56 30 2e 35 39 00                                   V0.59.

00001106 <cplInfo>:
    1106:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    1116:	01 02 00 03 01 03 02 03                             ........

0000111e <keylabel_1>:
    111e:	31 00                                               1.

00001120 <keylabel_0>:
    1120:	30 00                                               0.

00001122 <keylabel_text>:
    1122:	54 65 78 74 80 00                                   Text..

00001128 <keylabel_exit>:
    1128:	45 78 69 74 00                                      Exit.

0000112d <keylabel_off>:
    112d:	7e 61 75 73 00                                      ~aus.

00001132 <keylabel_on>:
    1132:	7e 65 69 6e 00                                      ~ein.

00001137 <keylabel_onoff>:
    1137:	45 69 6e 80 00                                      Ein..

0000113c <keylabel_minus>:
    113c:	2d 00                                               -.

0000113e <keylabel_plus>:
    113e:	2b 00                                               +.

00001140 <keylabel_left>:
    1140:	7f 00                                               ..

00001142 <keylabel_right>:
    1142:	7e 00                                               ~.

00001144 <keylabel_down>:
    1144:	09 00                                               ..

00001146 <keylabel_up>:
    1146:	08 00                                               ..

00001148 <cgPattern_Block>:
    1148:	00 00 0e 0e 0e 0e 00 00                             ........

00001150 <cgPattern_Down>:
    1150:	04 04 04 04 15 0e 04 00                             ........

00001158 <cgPattern_Up>:
    1158:	04 0e 15 04 04 04 04 00                             ........

00001160 <cr_lf>:
    1160:	0d 0a 00 00                                         ....

00001164 <__ctors_end>:
    1164:	11 24       	eor	r1, r1
    1166:	1f be       	out	0x3f, r1	; 63
    1168:	cf ef       	ldi	r28, 0xFF	; 255
    116a:	d1 e2       	ldi	r29, 0x21	; 33
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	00 e0       	ldi	r16, 0x00	; 0
    1172:	0c bf       	out	0x3c, r16	; 60

00001174 <__do_copy_data>:
    1174:	12 e0       	ldi	r17, 0x02	; 2
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b2 e0       	ldi	r27, 0x02	; 2
    117a:	e2 eb       	ldi	r30, 0xB2	; 178
    117c:	fa e6       	ldi	r31, 0x6A	; 106
    117e:	00 e0       	ldi	r16, 0x00	; 0
    1180:	0b bf       	out	0x3b, r16	; 59
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <__do_copy_data+0x14>
    1184:	07 90       	elpm	r0, Z+
    1186:	0d 92       	st	X+, r0
    1188:	a8 30       	cpi	r26, 0x08	; 8
    118a:	b1 07       	cpc	r27, r17
    118c:	d9 f7       	brne	.-10     	; 0x1184 <__do_copy_data+0x10>

0000118e <__do_clear_bss>:
    118e:	2d e0       	ldi	r18, 0x0D	; 13
    1190:	a8 e0       	ldi	r26, 0x08	; 8
    1192:	b2 e0       	ldi	r27, 0x02	; 2
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <.do_clear_bss_start>

00001196 <.do_clear_bss_loop>:
    1196:	1d 92       	st	X+, r1

00001198 <.do_clear_bss_start>:
    1198:	a6 35       	cpi	r26, 0x56	; 86
    119a:	b2 07       	cpc	r27, r18
    119c:	e1 f7       	brne	.-8      	; 0x1196 <.do_clear_bss_loop>
    119e:	0e 94 f7 13 	call	0x27ee	; 0x27ee <main>
    11a2:	0c 94 57 35 	jmp	0x6aae	; 0x6aae <_exit>

000011a6 <__bad_interrupt>:
    11a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000011aa <crc16_ram>:

uint8_t ee_initError = EE_ERROR_NONE;

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
    11aa:	fc 01       	movw	r30, r24
	uint16_t result = CRC_START;
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
	while (count-- > 0){
    11b0:	1c c0       	rjmp	.+56     	; 0x11ea <crc16_ram+0x40>
		result =  _crc16_update(result, *pRam++);
    11b2:	df 01       	movw	r26, r30
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	20 81       	ld	r18, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    11b8:	82 27       	eor	r24, r18
    11ba:	28 2f       	mov	r18, r24
    11bc:	22 95       	swap	r18
    11be:	28 27       	eor	r18, r24
    11c0:	02 2e       	mov	r0, r18
    11c2:	26 95       	lsr	r18
    11c4:	26 95       	lsr	r18
    11c6:	20 25       	eor	r18, r0
    11c8:	02 2e       	mov	r0, r18
    11ca:	26 95       	lsr	r18
    11cc:	20 25       	eor	r18, r0
    11ce:	27 70       	andi	r18, 0x07	; 7
    11d0:	08 2e       	mov	r0, r24
    11d2:	89 2f       	mov	r24, r25
    11d4:	26 95       	lsr	r18
    11d6:	07 94       	ror	r0
    11d8:	27 95       	ror	r18
    11da:	90 2d       	mov	r25, r0
    11dc:	82 27       	eor	r24, r18
    11de:	06 94       	lsr	r0
    11e0:	27 95       	ror	r18
    11e2:	90 25       	eor	r25, r0
    11e4:	82 27       	eor	r24, r18

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    11e6:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    11e8:	fd 01       	movw	r30, r26

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    11ea:	ab 01       	movw	r20, r22
    11ec:	41 50       	subi	r20, 0x01	; 1
    11ee:	51 09       	sbc	r21, r1
    11f0:	67 2b       	or	r22, r23
    11f2:	f9 f6       	brne	.-66     	; 0x11b2 <crc16_ram+0x8>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    11f4:	08 95       	ret

000011f6 <crc16_eeprom>:

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
    11f6:	ef 92       	push	r14
    11f8:	ff 92       	push	r15
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
	uint16_t result = CRC_START;
    1202:	cf ef       	ldi	r28, 0xFF	; 255
    1204:	df ef       	ldi	r29, 0xFF	; 255
	while (count-- > 0){
    1206:	21 c0       	rjmp	.+66     	; 0x124a <crc16_eeprom+0x54>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    1208:	7c 01       	movw	r14, r24
    120a:	2f ef       	ldi	r18, 0xFF	; 255
    120c:	e2 1a       	sub	r14, r18
    120e:	f2 0a       	sbc	r15, r18
    1210:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    1214:	9e 01       	movw	r18, r28
    1216:	28 27       	eor	r18, r24
    1218:	82 2f       	mov	r24, r18
    121a:	82 95       	swap	r24
    121c:	82 27       	eor	r24, r18
    121e:	08 2e       	mov	r0, r24
    1220:	86 95       	lsr	r24
    1222:	86 95       	lsr	r24
    1224:	80 25       	eor	r24, r0
    1226:	08 2e       	mov	r0, r24
    1228:	86 95       	lsr	r24
    122a:	80 25       	eor	r24, r0
    122c:	87 70       	andi	r24, 0x07	; 7
    122e:	02 2e       	mov	r0, r18
    1230:	23 2f       	mov	r18, r19
    1232:	86 95       	lsr	r24
    1234:	07 94       	ror	r0
    1236:	87 95       	ror	r24
    1238:	30 2d       	mov	r19, r0
    123a:	28 27       	eor	r18, r24
    123c:	06 94       	lsr	r0
    123e:	87 95       	ror	r24
    1240:	30 25       	eor	r19, r0
    1242:	28 27       	eor	r18, r24
    1244:	e9 01       	movw	r28, r18
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    1246:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    1248:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    124a:	8b 01       	movw	r16, r22
    124c:	01 50       	subi	r16, 0x01	; 1
    124e:	11 09       	sbc	r17, r1
    1250:	67 2b       	or	r22, r23
    1252:	d1 f6       	brne	.-76     	; 0x1208 <crc16_eeprom+0x12>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    1254:	ce 01       	movw	r24, r28
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	08 95       	ret

00001264 <crc16_ram_startVal>:

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
    1264:	fc 01       	movw	r30, r24
    1266:	ca 01       	movw	r24, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    1268:	1c c0       	rjmp	.+56     	; 0x12a2 <crc16_ram_startVal+0x3e>
		result =  _crc16_update(result, *pRam++);
    126a:	df 01       	movw	r26, r30
    126c:	11 96       	adiw	r26, 0x01	; 1
    126e:	20 81       	ld	r18, Z
    1270:	82 27       	eor	r24, r18
    1272:	28 2f       	mov	r18, r24
    1274:	22 95       	swap	r18
    1276:	28 27       	eor	r18, r24
    1278:	02 2e       	mov	r0, r18
    127a:	26 95       	lsr	r18
    127c:	26 95       	lsr	r18
    127e:	20 25       	eor	r18, r0
    1280:	02 2e       	mov	r0, r18
    1282:	26 95       	lsr	r18
    1284:	20 25       	eor	r18, r0
    1286:	27 70       	andi	r18, 0x07	; 7
    1288:	08 2e       	mov	r0, r24
    128a:	89 2f       	mov	r24, r25
    128c:	26 95       	lsr	r18
    128e:	07 94       	ror	r0
    1290:	27 95       	ror	r18
    1292:	90 2d       	mov	r25, r0
    1294:	82 27       	eor	r24, r18
    1296:	06 94       	lsr	r0
    1298:	27 95       	ror	r18
    129a:	90 25       	eor	r25, r0
    129c:	82 27       	eor	r24, r18
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    129e:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    12a0:	fd 01       	movw	r30, r26
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    12a2:	ab 01       	movw	r20, r22
    12a4:	41 50       	subi	r20, 0x01	; 1
    12a6:	51 09       	sbc	r21, r1
    12a8:	67 2b       	or	r22, r23
    12aa:	f9 f6       	brne	.-66     	; 0x126a <crc16_ram_startVal+0x6>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    12ac:	08 95       	ret

000012ae <crc16_eeprom_startVal>:

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ea 01       	movw	r28, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    12bc:	21 c0       	rjmp	.+66     	; 0x1300 <crc16_eeprom_startVal+0x52>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    12be:	7c 01       	movw	r14, r24
    12c0:	2f ef       	ldi	r18, 0xFF	; 255
    12c2:	e2 1a       	sub	r14, r18
    12c4:	f2 0a       	sbc	r15, r18
    12c6:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    12ca:	ae 01       	movw	r20, r28
    12cc:	48 27       	eor	r20, r24
    12ce:	84 2f       	mov	r24, r20
    12d0:	82 95       	swap	r24
    12d2:	84 27       	eor	r24, r20
    12d4:	08 2e       	mov	r0, r24
    12d6:	86 95       	lsr	r24
    12d8:	86 95       	lsr	r24
    12da:	80 25       	eor	r24, r0
    12dc:	08 2e       	mov	r0, r24
    12de:	86 95       	lsr	r24
    12e0:	80 25       	eor	r24, r0
    12e2:	87 70       	andi	r24, 0x07	; 7
    12e4:	04 2e       	mov	r0, r20
    12e6:	45 2f       	mov	r20, r21
    12e8:	86 95       	lsr	r24
    12ea:	07 94       	ror	r0
    12ec:	87 95       	ror	r24
    12ee:	50 2d       	mov	r21, r0
    12f0:	48 27       	eor	r20, r24
    12f2:	06 94       	lsr	r0
    12f4:	87 95       	ror	r24
    12f6:	50 25       	eor	r21, r0
    12f8:	48 27       	eor	r20, r24
    12fa:	ea 01       	movw	r28, r20
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    12fc:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    12fe:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1300:	8b 01       	movw	r16, r22
    1302:	01 50       	subi	r16, 0x01	; 1
    1304:	11 09       	sbc	r17, r1
    1306:	67 2b       	or	r22, r23
    1308:	d1 f6       	brne	.-76     	; 0x12be <crc16_eeprom_startVal+0x10>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    130a:	ce 01       	movw	r24, r28
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	08 95       	ret

0000131a <eeprom_ReadManualMap>:


uint8_t eeprom_ReadManualMap(){
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    131e:	82 e3       	ldi	r24, 0x32	; 50
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    1326:	ec 01       	movw	r28, r24
    1328:	60 e3       	ldi	r22, 0x30	; 48
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	62 df       	rcall	.-316    	; 0x11f6 <crc16_eeprom>
    1332:	c8 17       	cp	r28, r24
    1334:	d9 07       	cpc	r29, r25
    1336:	81 f4       	brne	.+32     	; 0x1358 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    1340:	8d 34       	cpi	r24, 0x4D	; 77
    1342:	51 f4       	brne	.+20     	; 0x1358 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    1344:	40 e3       	ldi	r20, 0x30	; 48
    1346:	50 e0       	ldi	r21, 0x00	; 0
    1348:	62 e0       	ldi	r22, 0x02	; 2
    134a:	70 e0       	ldi	r23, 0x00	; 0
    134c:	8d ed       	ldi	r24, 0xDD	; 221
    134e:	98 e0       	ldi	r25, 0x08	; 8
    1350:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		return (EE_LOAD_OK);
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	06 c0       	rjmp	.+12     	; 0x1364 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    1358:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    135c:	81 60       	ori	r24, 0x01	; 1
    135e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1362:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap)) 
    136e:	85 e3       	ldi	r24, 0x35	; 53
    1370:	91 e0       	ldi	r25, 0x01	; 1
    1372:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    1376:	ec 01       	movw	r28, r24
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	71 e0       	ldi	r23, 0x01	; 1
    137c:	85 e3       	ldi	r24, 0x35	; 53
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	3a df       	rcall	.-396    	; 0x11f6 <crc16_eeprom>
    1382:	c8 17       	cp	r28, r24
    1384:	d9 07       	cpc	r29, r25
    1386:	81 f4       	brne	.+32     	; 0x13a8 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1388:	84 e3       	ldi	r24, 0x34	; 52
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    1390:	89 34       	cpi	r24, 0x49	; 73
    1392:	51 f4       	brne	.+20     	; 0x13a8 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	51 e0       	ldi	r21, 0x01	; 1
    1398:	65 e3       	ldi	r22, 0x35	; 53
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	85 ed       	ldi	r24, 0xD5	; 213
    139e:	97 e0       	ldi	r25, 0x07	; 7
    13a0:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		return (EE_LOAD_OK);
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	06 c0       	rjmp	.+12     	; 0x13b4 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    13a8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    13ac:	82 60       	ori	r24, 0x02	; 2
    13ae:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	08 95       	ret

000013ba <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))  
    13be:	8f e3       	ldi	r24, 0x3F	; 63
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    13c6:	ec 01       	movw	r28, r24
    13c8:	67 e0       	ldi	r22, 0x07	; 7
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	88 e3       	ldi	r24, 0x38	; 56
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	12 df       	rcall	.-476    	; 0x11f6 <crc16_eeprom>
    13d2:	c8 17       	cp	r28, r24
    13d4:	d9 07       	cpc	r29, r25
    13d6:	c1 f4       	brne	.+48     	; 0x1408 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    13d8:	87 e3       	ldi	r24, 0x37	; 55
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    13e0:	8f 34       	cpi	r24, 0x4F	; 79
    13e2:	91 f4       	brne	.+36     	; 0x1408 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    13e4:	44 e0       	ldi	r20, 0x04	; 4
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	68 e3       	ldi	r22, 0x38	; 56
    13ea:	71 e0       	ldi	r23, 0x01	; 1
    13ec:	85 ed       	ldi	r24, 0xD5	; 213
    13ee:	98 e0       	ldi	r25, 0x08	; 8
    13f0:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    13f4:	43 e0       	ldi	r20, 0x03	; 3
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	6c e3       	ldi	r22, 0x3C	; 60
    13fa:	71 e0       	ldi	r23, 0x01	; 1
    13fc:	89 ed       	ldi	r24, 0xD9	; 217
    13fe:	98 e0       	ldi	r25, 0x08	; 8
    1400:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		return (EE_LOAD_OK);
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	06 c0       	rjmp	.+12     	; 0x1414 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    1408:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    140c:	84 60       	ori	r24, 0x04	; 4
    140e:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1412:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	08 95       	ret

0000141a <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))  
    141e:	84 e4       	ldi	r24, 0x44	; 68
    1420:	91 e0       	ldi	r25, 0x01	; 1
    1422:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    1426:	ec 01       	movw	r28, r24
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	82 e4       	ldi	r24, 0x42	; 66
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	e2 de       	rcall	.-572    	; 0x11f6 <crc16_eeprom>
    1432:	c8 17       	cp	r28, r24
    1434:	d9 07       	cpc	r29, r25
    1436:	a1 f4       	brne	.+40     	; 0x1460 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    1438:	81 e4       	ldi	r24, 0x41	; 65
    143a:	91 e0       	ldi	r25, 0x01	; 1
    143c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    1440:	89 36       	cpi	r24, 0x69	; 105
    1442:	71 f4       	brne	.+28     	; 0x1460 <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_ModuleAssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    1444:	82 e4       	ldi	r24, 0x42	; 66
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    144c:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <pipe_ModuleAssnRead>
		pipe_ModuleAssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    1450:	83 e4       	ldi	r24, 0x43	; 67
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    1458:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <pipe_ModuleAssnWrite>
		return (EE_LOAD_OK);
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	06 c0       	rjmp	.+12     	; 0x146c <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    1460:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1464:	88 60       	ori	r24, 0x08	; 8
    1466:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    146a:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1476:	83 ef       	ldi	r24, 0xF3	; 243
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    147e:	ec 01       	movw	r28, r24
    1480:	62 e0       	ldi	r22, 0x02	; 2
    1482:	70 e0       	ldi	r23, 0x00	; 0
    1484:	81 ef       	ldi	r24, 0xF1	; 241
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	b6 de       	rcall	.-660    	; 0x11f6 <crc16_eeprom>
    148a:	c8 17       	cp	r28, r24
    148c:	d9 07       	cpc	r29, r25
    148e:	81 f4       	brne	.+32     	; 0x14b0 <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    1490:	80 ef       	ldi	r24, 0xF0	; 240
    1492:	93 e0       	ldi	r25, 0x03	; 3
    1494:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    1498:	84 35       	cpi	r24, 0x54	; 84
    149a:	51 f4       	brne	.+20     	; 0x14b0 <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    149c:	42 e0       	ldi	r20, 0x02	; 2
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	61 ef       	ldi	r22, 0xF1	; 241
    14a2:	73 e0       	ldi	r23, 0x03	; 3
    14a4:	83 ed       	ldi	r24, 0xD3	; 211
    14a6:	97 e0       	ldi	r25, 0x07	; 7
    14a8:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		return (EE_LOAD_OK);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    14b0:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14b4:	82 60       	ori	r24, 0x02	; 2
    14b6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14ba:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    14c6:	88 e4       	ldi	r24, 0x48	; 72
    14c8:	91 e0       	ldi	r25, 0x01	; 1
    14ca:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    14ce:	ec 01       	movw	r28, r24
    14d0:	61 e0       	ldi	r22, 0x01	; 1
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	87 e4       	ldi	r24, 0x47	; 71
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	8e de       	rcall	.-740    	; 0x11f6 <crc16_eeprom>
    14da:	c8 17       	cp	r28, r24
    14dc:	d9 07       	cpc	r29, r25
    14de:	71 f4       	brne	.+28     	; 0x14fc <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    14e0:	86 e4       	ldi	r24, 0x46	; 70
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    14e8:	85 35       	cpi	r24, 0x55	; 85
    14ea:	41 f4       	brne	.+16     	; 0x14fc <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serusb_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    14ec:	87 e4       	ldi	r24, 0x47	; 71
    14ee:	91 e0       	ldi	r25, 0x01	; 1
    14f0:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    14f4:	80 93 dc 0b 	sts	0x0BDC, r24	; 0x800bdc <serusb_Active>
		return (EE_LOAD_OK);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	06 c0       	rjmp	.+12     	; 0x1508 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    14fc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1500:	88 60       	ori	r24, 0x08	; 8
    1502:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1506:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	08 95       	ret

0000150e <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	8b e4       	ldi	r24, 0x4B	; 75
    1518:	91 e0       	ldi	r25, 0x01	; 1
    151a:	6d de       	rcall	.-806    	; 0x11f6 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    151c:	ac 01       	movw	r20, r24
    151e:	68 e1       	ldi	r22, 0x18	; 24
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	8c e4       	ldi	r24, 0x4C	; 76
    1524:	91 e0       	ldi	r25, 0x01	; 1
    1526:	c3 de       	rcall	.-634    	; 0x12ae <crc16_eeprom_startVal>
    1528:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    152a:	84 e6       	ldi	r24, 0x64	; 100
    152c:	91 e0       	ldi	r25, 0x01	; 1
    152e:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    1532:	c8 17       	cp	r28, r24
    1534:	d9 07       	cpc	r29, r25
    1536:	b1 f4       	brne	.+44     	; 0x1564 <eeprom_ReadReg+0x56>
    1538:	8a e4       	ldi	r24, 0x4A	; 74
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    1540:	82 35       	cpi	r24, 0x52	; 82
    1542:	81 f4       	brne	.+32     	; 0x1564 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount);
    1544:	8b e4       	ldi	r24, 0x4B	; 75
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    154c:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    1550:	48 e1       	ldi	r20, 0x18	; 24
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	6c e4       	ldi	r22, 0x4C	; 76
    1556:	71 e0       	ldi	r23, 0x01	; 1
    1558:	85 ea       	ldi	r24, 0xA5	; 165
    155a:	97 e0       	ldi	r25, 0x07	; 7
    155c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		return(EE_LOAD_OK);
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    1564:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1568:	80 62       	ori	r24, 0x20	; 32
    156a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    156e:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	08 95       	ret

00001576 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1576:	cf 93       	push	r28
    1578:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    157a:	87 ee       	ldi	r24, 0xE7	; 231
    157c:	93 e0       	ldi	r25, 0x03	; 3
    157e:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    1582:	ec 01       	movw	r28, r24
    1584:	60 e8       	ldi	r22, 0x80	; 128
    1586:	72 e0       	ldi	r23, 0x02	; 2
    1588:	87 e6       	ldi	r24, 0x67	; 103
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	34 de       	rcall	.-920    	; 0x11f6 <crc16_eeprom>
    158e:	c8 17       	cp	r28, r24
    1590:	d9 07       	cpc	r29, r25
    1592:	81 f4       	brne	.+32     	; 0x15b4 <eeprom_ReadProg+0x3e>
    1594:	86 e6       	ldi	r24, 0x66	; 102
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    159c:	80 35       	cpi	r24, 0x50	; 80
    159e:	51 f4       	brne	.+20     	; 0x15b4 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	52 e0       	ldi	r21, 0x02	; 2
    15a4:	67 e6       	ldi	r22, 0x67	; 103
    15a6:	71 e0       	ldi	r23, 0x01	; 1
    15a8:	8d e0       	ldi	r24, 0x0D	; 13
    15aa:	99 e0       	ldi	r25, 0x09	; 9
    15ac:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		return(EE_LOAD_OK);
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	06 c0       	rjmp	.+12     	; 0x15c0 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    15b4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15b8:	80 64       	ori	r24, 0x40	; 64
    15ba:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15be:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	08 95       	ret

000015c6 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    15ca:	8e ee       	ldi	r24, 0xEE	; 238
    15cc:	93 e0       	ldi	r25, 0x03	; 3
    15ce:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <eeprom_read_word>
    15d2:	ec 01       	movw	r28, r24
    15d4:	64 e0       	ldi	r22, 0x04	; 4
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	8a ee       	ldi	r24, 0xEA	; 234
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0c de       	rcall	.-1000   	; 0x11f6 <crc16_eeprom>
    15de:	c8 17       	cp	r28, r24
    15e0:	d9 07       	cpc	r29, r25
    15e2:	51 f4       	brne	.+20     	; 0x15f8 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    15e4:	44 e0       	ldi	r20, 0x04	; 4
    15e6:	50 e0       	ldi	r21, 0x00	; 0
    15e8:	6a ee       	ldi	r22, 0xEA	; 234
    15ea:	73 e0       	ldi	r23, 0x03	; 3
    15ec:	82 e6       	ldi	r24, 0x62	; 98
    15ee:	95 e0       	ldi	r25, 0x05	; 5
    15f0:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <eeprom_read_block>
		return(EE_LOAD_OK);
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	06 c0       	rjmp	.+12     	; 0x1604 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    15f8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15fc:	80 68       	ori	r24, 0x80	; 128
    15fe:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1602:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1614:	65 e6       	ldi	r22, 0x65	; 101
    1616:	85 ef       	ldi	r24, 0xF5	; 245
    1618:	93 e0       	ldi	r25, 0x03	; 3
    161a:	0c 94 41 35 	jmp	0x6a82	; 0x6a82 <eeprom_update_byte>
    161e:	08 95       	ret

00001620 <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1624:	60 e3       	ldi	r22, 0x30	; 48
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	8d ed       	ldi	r24, 0xDD	; 221
    162a:	98 e0       	ldi	r25, 0x08	; 8
    162c:	be dd       	rcall	.-1156   	; 0x11aa <crc16_ram>
    162e:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1630:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1634:	6d e4       	ldi	r22, 0x4D	; 77
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    163e:	40 e3       	ldi	r20, 0x30	; 48
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	62 e0       	ldi	r22, 0x02	; 2
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	8d ed       	ldi	r24, 0xDD	; 221
    1648:	98 e0       	ldi	r25, 0x08	; 8
    164a:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    164e:	be 01       	movw	r22, r28
    1650:	82 e3       	ldi	r24, 0x32	; 50
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    1658:	d8 df       	rcall	.-80     	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    165a:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	71 e0       	ldi	r23, 0x01	; 1
    166c:	85 ed       	ldi	r24, 0xD5	; 213
    166e:	97 e0       	ldi	r25, 0x07	; 7
    1670:	9c dd       	rcall	.-1224   	; 0x11aa <crc16_ram>
    1672:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1674:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1678:	69 e4       	ldi	r22, 0x49	; 73
    167a:	84 e3       	ldi	r24, 0x34	; 52
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	51 e0       	ldi	r21, 0x01	; 1
    1686:	65 e3       	ldi	r22, 0x35	; 53
    1688:	70 e0       	ldi	r23, 0x00	; 0
    168a:	85 ed       	ldi	r24, 0xD5	; 213
    168c:	97 e0       	ldi	r25, 0x07	; 7
    168e:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1692:	be 01       	movw	r22, r28
    1694:	85 e3       	ldi	r24, 0x35	; 53
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    169c:	b6 df       	rcall	.-148    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    169e:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	08 95       	ret

000016a8 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    16ac:	64 e0       	ldi	r22, 0x04	; 4
    16ae:	70 e0       	ldi	r23, 0x00	; 0
    16b0:	85 ed       	ldi	r24, 0xD5	; 213
    16b2:	98 e0       	ldi	r25, 0x08	; 8
    16b4:	7a dd       	rcall	.-1292   	; 0x11aa <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    16b6:	ac 01       	movw	r20, r24
    16b8:	63 e0       	ldi	r22, 0x03	; 3
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	89 ed       	ldi	r24, 0xD9	; 217
    16be:	98 e0       	ldi	r25, 0x08	; 8
    16c0:	d1 dd       	rcall	.-1118   	; 0x1264 <crc16_ram_startVal>
    16c2:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    16c4:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    16c8:	6f e4       	ldi	r22, 0x4F	; 79
    16ca:	87 e3       	ldi	r24, 0x37	; 55
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    16d2:	44 e0       	ldi	r20, 0x04	; 4
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	68 e3       	ldi	r22, 0x38	; 56
    16d8:	71 e0       	ldi	r23, 0x01	; 1
    16da:	85 ed       	ldi	r24, 0xD5	; 213
    16dc:	98 e0       	ldi	r25, 0x08	; 8
    16de:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    16e2:	43 e0       	ldi	r20, 0x03	; 3
    16e4:	50 e0       	ldi	r21, 0x00	; 0
    16e6:	6c e3       	ldi	r22, 0x3C	; 60
    16e8:	71 e0       	ldi	r23, 0x01	; 1
    16ea:	89 ed       	ldi	r24, 0xD9	; 217
    16ec:	98 e0       	ldi	r25, 0x08	; 8
    16ee:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    16f2:	be 01       	movw	r22, r28
    16f4:	8f e3       	ldi	r24, 0x3F	; 63
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    16fc:	86 df       	rcall	.-244    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    16fe:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	08 95       	ret

00001708 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_ModuleAssnRead, sizeof(pipe_ModuleAssnRead));
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	80 e5       	ldi	r24, 0x50	; 80
    1712:	93 e0       	ldi	r25, 0x03	; 3
    1714:	4a dd       	rcall	.-1388   	; 0x11aa <crc16_ram>
    1716:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1718:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    171c:	69 e6       	ldi	r22, 0x69	; 105
    171e:	81 e4       	ldi	r24, 0x41	; 65
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_ModuleAssnRead);
    1726:	60 91 50 03 	lds	r22, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
    172a:	82 e4       	ldi	r24, 0x42	; 66
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_ModuleAssnWrite);
    1732:	60 91 4f 03 	lds	r22, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    1736:	83 e4       	ldi	r24, 0x43	; 67
    1738:	91 e0       	ldi	r25, 0x01	; 1
    173a:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    173e:	be 01       	movw	r22, r28
    1740:	84 e4       	ldi	r24, 0x44	; 68
    1742:	91 e0       	ldi	r25, 0x01	; 1
    1744:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    1748:	60 df       	rcall	.-320    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    174a:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serusb_Active, sizeof(serusb_Active));
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	8c ed       	ldi	r24, 0xDC	; 220
    175e:	9b e0       	ldi	r25, 0x0B	; 11
    1760:	24 dd       	rcall	.-1464   	; 0x11aa <crc16_ram>
    1762:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1764:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1768:	65 e5       	ldi	r22, 0x55	; 85
    176a:	86 e4       	ldi	r24, 0x46	; 70
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serusb_Active);
    1772:	60 91 dc 0b 	lds	r22, 0x0BDC	; 0x800bdc <serusb_Active>
    1776:	87 e4       	ldi	r24, 0x47	; 71
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    177e:	be 01       	movw	r22, r28
    1780:	88 e4       	ldi	r24, 0x48	; 72
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    1788:	40 df       	rcall	.-384    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    178a:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1798:	62 e0       	ldi	r22, 0x02	; 2
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	83 ed       	ldi	r24, 0xD3	; 211
    179e:	97 e0       	ldi	r25, 0x07	; 7
    17a0:	04 dd       	rcall	.-1528   	; 0x11aa <crc16_ram>
    17a2:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17a4:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    17a8:	64 e5       	ldi	r22, 0x54	; 84
    17aa:	80 ef       	ldi	r24, 0xF0	; 240
    17ac:	93 e0       	ldi	r25, 0x03	; 3
    17ae:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    17b2:	42 e0       	ldi	r20, 0x02	; 2
    17b4:	50 e0       	ldi	r21, 0x00	; 0
    17b6:	61 ef       	ldi	r22, 0xF1	; 241
    17b8:	73 e0       	ldi	r23, 0x03	; 3
    17ba:	83 ed       	ldi	r24, 0xD3	; 211
    17bc:	97 e0       	ldi	r25, 0x07	; 7
    17be:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    17c2:	be 01       	movw	r22, r28
    17c4:	83 ef       	ldi	r24, 0xF3	; 243
    17c6:	93 e0       	ldi	r25, 0x03	; 3
    17c8:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    17cc:	1e df       	rcall	.-452    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    17ce:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	08 95       	ret

000017d8 <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	8d eb       	ldi	r24, 0xBD	; 189
    17e2:	97 e0       	ldi	r25, 0x07	; 7
    17e4:	e2 dc       	rcall	.-1596   	; 0x11aa <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    17e6:	ac 01       	movw	r20, r24
    17e8:	68 e1       	ldi	r22, 0x18	; 24
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	85 ea       	ldi	r24, 0xA5	; 165
    17ee:	97 e0       	ldi	r25, 0x07	; 7
    17f0:	39 dd       	rcall	.-1422   	; 0x1264 <crc16_ram_startVal>
    17f2:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17f4:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    17f8:	62 e5       	ldi	r22, 0x52	; 82
    17fa:	8a e4       	ldi	r24, 0x4A	; 74
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1802:	60 91 bd 07 	lds	r22, 0x07BD	; 0x8007bd <registerCount>
    1806:	8b e4       	ldi	r24, 0x4B	; 75
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    180e:	48 e1       	ldi	r20, 0x18	; 24
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	6c e4       	ldi	r22, 0x4C	; 76
    1814:	71 e0       	ldi	r23, 0x01	; 1
    1816:	85 ea       	ldi	r24, 0xA5	; 165
    1818:	97 e0       	ldi	r25, 0x07	; 7
    181a:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    181e:	be 01       	movw	r22, r28
    1820:	84 e6       	ldi	r24, 0x64	; 100
    1822:	91 e0       	ldi	r25, 0x01	; 1
    1824:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    1828:	f0 de       	rcall	.-544    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    182a:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1838:	60 e8       	ldi	r22, 0x80	; 128
    183a:	72 e0       	ldi	r23, 0x02	; 2
    183c:	8d e0       	ldi	r24, 0x0D	; 13
    183e:	99 e0       	ldi	r25, 0x09	; 9
    1840:	b4 dc       	rcall	.-1688   	; 0x11aa <crc16_ram>
    1842:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1844:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1848:	60 e5       	ldi	r22, 0x50	; 80
    184a:	86 e6       	ldi	r24, 0x66	; 102
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	52 e0       	ldi	r21, 0x02	; 2
    1856:	67 e6       	ldi	r22, 0x67	; 103
    1858:	71 e0       	ldi	r23, 0x01	; 1
    185a:	8d e0       	ldi	r24, 0x0D	; 13
    185c:	99 e0       	ldi	r25, 0x09	; 9
    185e:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1862:	be 01       	movw	r22, r28
    1864:	87 ee       	ldi	r24, 0xE7	; 231
    1866:	93 e0       	ldi	r25, 0x03	; 3
    1868:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    186c:	ce de       	rcall	.-612    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    186e:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	08 95       	ret

00001878 <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    187c:	64 e0       	ldi	r22, 0x04	; 4
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	82 e6       	ldi	r24, 0x62	; 98
    1882:	95 e0       	ldi	r25, 0x05	; 5
    1884:	92 dc       	rcall	.-1756   	; 0x11aa <crc16_ram>
    1886:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1888:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    188c:	6b e4       	ldi	r22, 0x4B	; 75
    188e:	89 ee       	ldi	r24, 0xE9	; 233
    1890:	93 e0       	ldi	r25, 0x03	; 3
    1892:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1896:	44 e0       	ldi	r20, 0x04	; 4
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	6a ee       	ldi	r22, 0xEA	; 234
    189c:	73 e0       	ldi	r23, 0x03	; 3
    189e:	82 e6       	ldi	r24, 0x62	; 98
    18a0:	95 e0       	ldi	r25, 0x05	; 5
    18a2:	0e 94 32 35 	call	0x6a64	; 0x6a64 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    18a6:	be 01       	movw	r22, r28
    18a8:	8e ee       	ldi	r24, 0xEE	; 238
    18aa:	93 e0       	ldi	r25, 0x03	; 3
    18ac:	0e 94 53 35 	call	0x6aa6	; 0x6aa6 <eeprom_update_word>
	eepromWriteSignature();
    18b0:	ac de       	rcall	.-680    	; 0x160a <eepromWriteSignature>
	lcd_waitSymbolOff();
    18b2:	0e 94 4d 34 	call	0x689a	; 0x689a <lcd_waitSymbolOff>
}
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    18bc:	b1 de       	rcall	.-670    	; 0x1620 <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    18be:	d2 de       	rcall	.-604    	; 0x1664 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    18c0:	f3 de       	rcall	.-538    	; 0x16a8 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    18c2:	22 df       	rcall	.-444    	; 0x1708 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    18c4:	47 df       	rcall	.-370    	; 0x1754 <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    18c6:	88 df       	rcall	.-240    	; 0x17d8 <eeprom_UpdateReg>
    18c8:	b5 df       	rcall	.-150    	; 0x1834 <eeprom_UpdateProg>
	eeprom_UpdateProg();
    18ca:	d6 df       	rcall	.-84     	; 0x1878 <eeprom_UpdateSoftkeys>
    18cc:	63 cf       	rjmp	.-314    	; 0x1794 <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    18ce:	08 95       	ret

000018d0 <eepromCopy>:
    18d0:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    18d2:	df 92       	push	r13
    18d4:	ef 92       	push	r14
    18d6:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	eb 01       	movw	r28, r22
	while (count-- > 0){
    18e2:	11 c0       	rjmp	.+34     	; 0x1906 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    18e4:	7c 01       	movw	r14, r24
    18e6:	2f ef       	ldi	r18, 0xFF	; 255
    18e8:	e2 1a       	sub	r14, r18
    18ea:	f2 0a       	sbc	r15, r18
    18ec:	0e 94 25 35 	call	0x6a4a	; 0x6a4a <eeprom_read_byte>
    18f0:	6e 01       	movw	r12, r28
    18f2:	9f ef       	ldi	r25, 0xFF	; 255
    18f4:	c9 1a       	sub	r12, r25
    18f6:	d9 0a       	sbc	r13, r25
    18f8:	68 2f       	mov	r22, r24
    18fa:	ce 01       	movw	r24, r28
    18fc:	0e 94 41 35 	call	0x6a82	; 0x6a82 <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1900:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1902:	e6 01       	movw	r28, r12
    1904:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1906:	8a 01       	movw	r16, r20
    1908:	01 50       	subi	r16, 0x01	; 1
    190a:	11 09       	sbc	r17, r1
    190c:	45 2b       	or	r20, r21
    190e:	51 f7       	brne	.-44     	; 0x18e4 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	08 95       	ret

00001922 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1922:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	58 e0       	ldi	r21, 0x08	; 8
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	78 e0       	ldi	r23, 0x08	; 8
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	ce df       	rcall	.-100    	; 0x18d0 <eepromCopy>
	lcd_waitSymbolOff();
    1934:	0c 94 4d 34 	jmp	0x689a	; 0x689a <lcd_waitSymbolOff>
    1938:	08 95       	ret

0000193a <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    193a:	0e 94 3f 34 	call	0x687e	; 0x687e <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	58 e0       	ldi	r21, 0x08	; 8
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	70 e0       	ldi	r23, 0x00	; 0
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	98 e0       	ldi	r25, 0x08	; 8
    194a:	c2 df       	rcall	.-124    	; 0x18d0 <eepromCopy>
	lcd_waitSymbolOff();
    194c:	0c 94 4d 34 	jmp	0x689a	; 0x689a <lcd_waitSymbolOff>
    1950:	08 95       	ret

00001952 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	0a c0       	rjmp	.+20     	; 0x196a <init_Timers+0x18>
    1956:	e8 2f       	mov	r30, r24
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	ee 0f       	add	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	e1 5d       	subi	r30, 0xD1	; 209
    1960:	fd 4f       	sbci	r31, 0xFD	; 253
    1962:	9f ef       	ldi	r25, 0xFF	; 255
    1964:	90 83       	st	Z, r25
    1966:	11 82       	std	Z+1, r1	; 0x01
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	89 30       	cpi	r24, 0x09	; 9
    196c:	a0 f3       	brcs	.-24     	; 0x1956 <init_Timers+0x4>
    196e:	e1 e4       	ldi	r30, 0x41	; 65
    1970:	f2 e0       	ldi	r31, 0x02	; 2
    1972:	10 82       	st	Z, r1
    1974:	11 82       	std	Z+1, r1	; 0x01
    1976:	12 82       	std	Z+2, r1	; 0x02
    1978:	13 82       	std	Z+3, r1	; 0x03
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1980:	08 95       	ret

00001982 <init_HwTimer>:
    1982:	82 e0       	ldi	r24, 0x02	; 2
    1984:	84 bd       	out	0x24, r24	; 36
    1986:	93 e0       	ldi	r25, 0x03	; 3
    1988:	95 bd       	out	0x25, r25	; 37
    198a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    198e:	89 ef       	ldi	r24, 0xF9	; 249
    1990:	87 bd       	out	0x27, r24	; 39
    1992:	85 b1       	in	r24, 0x05	; 5
    1994:	8f 77       	andi	r24, 0x7F	; 127
    1996:	85 b9       	out	0x05, r24	; 5
    1998:	84 b1       	in	r24, 0x04	; 4
    199a:	80 68       	ori	r24, 0x80	; 128
    199c:	84 b9       	out	0x04, r24	; 4
    199e:	08 95       	ret

000019a0 <init_ADC>:
    19a0:	87 e8       	ldi	r24, 0x87	; 135
    19a2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    19a6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    19aa:	8f e7       	ldi	r24, 0x7F	; 127
    19ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    19b6:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    19ba:	e9 e4       	ldi	r30, 0x49	; 73
    19bc:	f3 e0       	ldi	r31, 0x03	; 3
    19be:	10 82       	st	Z, r1
    19c0:	8f ef       	ldi	r24, 0xFF	; 255
    19c2:	81 83       	std	Z+1, r24	; 0x01
    19c4:	82 83       	std	Z+2, r24	; 0x02
    19c6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	10 c0       	rjmp	.+32     	; 0x19ee <init_ADC+0x4e>
    19ce:	85 30       	cpi	r24, 0x05	; 5
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <init_ADC+0x40>
    19d2:	e8 2f       	mov	r30, r24
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	ef 5a       	subi	r30, 0xAF	; 175
    19d8:	fc 4f       	sbci	r31, 0xFC	; 252
    19da:	96 e0       	ldi	r25, 0x06	; 6
    19dc:	90 83       	st	Z, r25
    19de:	06 c0       	rjmp	.+12     	; 0x19ec <init_ADC+0x4c>
    19e0:	e8 2f       	mov	r30, r24
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	ef 5a       	subi	r30, 0xAF	; 175
    19e6:	fc 4f       	sbci	r31, 0xFC	; 252
    19e8:	9a e0       	ldi	r25, 0x0A	; 10
    19ea:	90 83       	st	Z, r25
    19ec:	8f 5f       	subi	r24, 0xFF	; 255
    19ee:	86 30       	cpi	r24, 0x06	; 6
    19f0:	70 f3       	brcs	.-36     	; 0x19ce <init_ADC+0x2e>
    19f2:	08 95       	ret

000019f4 <init_Pipe>:
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	88 b9       	out	0x08, r24	; 8
    19f8:	87 b9       	out	0x07, r24	; 7
    19fa:	82 b9       	out	0x02, r24	; 2
    19fc:	11 b8       	out	0x01, r1	; 1
    19fe:	84 b3       	in	r24, 0x14	; 20
    1a00:	87 60       	ori	r24, 0x07	; 7
    1a02:	84 bb       	out	0x14, r24	; 20
    1a04:	83 b3       	in	r24, 0x13	; 19
    1a06:	87 60       	ori	r24, 0x07	; 7
    1a08:	83 bb       	out	0x13, r24	; 19
    1a0a:	8b b1       	in	r24, 0x0b	; 11
    1a0c:	8f 77       	andi	r24, 0x7F	; 127
    1a0e:	8b b9       	out	0x0b, r24	; 11
    1a10:	8a b1       	in	r24, 0x0a	; 10
    1a12:	80 68       	ori	r24, 0x80	; 128
    1a14:	8a b9       	out	0x0a, r24	; 10
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0e c0       	rjmp	.+28     	; 0x1a36 <init_Pipe+0x42>
    1a1a:	e8 2f       	mov	r30, r24
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	ee 0f       	add	r30, r30
    1a20:	ff 1f       	adc	r31, r31
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	e7 5b       	subi	r30, 0xB7	; 183
    1a2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a2e:	9f ef       	ldi	r25, 0xFF	; 255
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	90 83       	st	Z, r25
    1a34:	8f 5f       	subi	r24, 0xFF	; 255
    1a36:	80 32       	cpi	r24, 0x20	; 32
    1a38:	80 f3       	brcs	.-32     	; 0x1a1a <init_Pipe+0x26>
    1a3a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1a3e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1a42:	08 95       	ret

00001a44 <init_PipeModules>:
    1a44:	ea dc       	rcall	.-1580   	; 0x141a <eeprom_ReadModules>
    1a46:	8f 3f       	cpi	r24, 0xFF	; 255
    1a48:	51 f4       	brne	.+20     	; 0x1a5e <init_PipeModules+0x1a>
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	b7 d6       	rcall	.+3438   	; 0x27c2 <log_putError>
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <pipe_ModuleAssnRead>
    1a5a:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <pipe_ModuleAssnWrite>
    1a5e:	8b b1       	in	r24, 0x0b	; 11
    1a60:	8f 77       	andi	r24, 0x7F	; 127
    1a62:	8b b9       	out	0x0b, r24	; 11
    1a64:	84 b3       	in	r24, 0x14	; 20
    1a66:	87 60       	ori	r24, 0x07	; 7
    1a68:	84 bb       	out	0x14, r24	; 20
    1a6a:	84 b3       	in	r24, 0x14	; 20
    1a6c:	8b 7f       	andi	r24, 0xFB	; 251
    1a6e:	84 bb       	out	0x14, r24	; 20
    1a70:	85 e0       	ldi	r24, 0x05	; 5
    1a72:	8a 95       	dec	r24
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <init_PipeModules+0x2e>
    1a76:	00 00       	nop
    1a78:	84 b3       	in	r24, 0x14	; 20
    1a7a:	84 60       	ori	r24, 0x04	; 4
    1a7c:	84 bb       	out	0x14, r24	; 20
    1a7e:	90 e2       	ldi	r25, 0x20	; 32
    1a80:	84 b3       	in	r24, 0x14	; 20
    1a82:	81 60       	ori	r24, 0x01	; 1
    1a84:	84 bb       	out	0x14, r24	; 20
    1a86:	90 fd       	sbrc	r25, 0
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <init_PipeModules+0x4a>
    1a8a:	85 e5       	ldi	r24, 0x55	; 85
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <init_PipeModules+0x4c>
    1a8e:	8a ea       	ldi	r24, 0xAA	; 170
    1a90:	88 b9       	out	0x08, r24	; 8
    1a92:	80 b1       	in	r24, 0x00	; 0
    1a94:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1a98:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1a9c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1aa0:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1aa4:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1aa8:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1aac:	84 b3       	in	r24, 0x14	; 20
    1aae:	8e 7f       	andi	r24, 0xFE	; 254
    1ab0:	84 bb       	out	0x14, r24	; 20
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	8a 95       	dec	r24
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <init_PipeModules+0x70>
    1ab8:	00 00       	nop
    1aba:	91 50       	subi	r25, 0x01	; 1
    1abc:	09 f7       	brne	.-62     	; 0x1a80 <init_PipeModules+0x3c>
    1abe:	90 e2       	ldi	r25, 0x20	; 32
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <init_PipeModules+0x9c>
    1ac2:	84 b3       	in	r24, 0x14	; 20
    1ac4:	81 60       	ori	r24, 0x01	; 1
    1ac6:	84 bb       	out	0x14, r24	; 20
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	8a 95       	dec	r24
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <init_PipeModules+0x86>
    1ace:	00 c0       	rjmp	.+0      	; 0x1ad0 <init_PipeModules+0x8c>
    1ad0:	84 b3       	in	r24, 0x14	; 20
    1ad2:	8e 7f       	andi	r24, 0xFE	; 254
    1ad4:	84 bb       	out	0x14, r24	; 20
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	8a 95       	dec	r24
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <init_PipeModules+0x94>
    1adc:	00 c0       	rjmp	.+0      	; 0x1ade <init_PipeModules+0x9a>
    1ade:	91 50       	subi	r25, 0x01	; 1
    1ae0:	91 11       	cpse	r25, r1
    1ae2:	ef cf       	rjmp	.-34     	; 0x1ac2 <init_PipeModules+0x7e>
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1aea:	90 e2       	ldi	r25, 0x20	; 32
    1aec:	84 b3       	in	r24, 0x14	; 20
    1aee:	81 60       	ori	r24, 0x01	; 1
    1af0:	84 bb       	out	0x14, r24	; 20
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	88 b9       	out	0x08, r24	; 8
    1af6:	20 b1       	in	r18, 0x00	; 0
    1af8:	90 fd       	sbrc	r25, 0
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <init_PipeModules+0xbc>
    1afc:	8a ea       	ldi	r24, 0xAA	; 170
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <init_PipeModules+0xbe>
    1b00:	85 e5       	ldi	r24, 0x55	; 85
    1b02:	82 27       	eor	r24, r18
    1b04:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1b08:	82 23       	and	r24, r18
    1b0a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1b0e:	84 b3       	in	r24, 0x14	; 20
    1b10:	8e 7f       	andi	r24, 0xFE	; 254
    1b12:	84 bb       	out	0x14, r24	; 20
    1b14:	85 e0       	ldi	r24, 0x05	; 5
    1b16:	8a 95       	dec	r24
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <init_PipeModules+0xd2>
    1b1a:	00 00       	nop
    1b1c:	91 50       	subi	r25, 0x01	; 1
    1b1e:	31 f7       	brne	.-52     	; 0x1aec <init_PipeModules+0xa8>
    1b20:	00 00       	nop
    1b22:	00 00       	nop
    1b24:	84 b3       	in	r24, 0x14	; 20
    1b26:	81 60       	ori	r24, 0x01	; 1
    1b28:	84 bb       	out	0x14, r24	; 20
    1b2a:	84 b3       	in	r24, 0x14	; 20
    1b2c:	87 60       	ori	r24, 0x07	; 7
    1b2e:	84 bb       	out	0x14, r24	; 20
    1b30:	84 b3       	in	r24, 0x14	; 20
    1b32:	8b 7f       	andi	r24, 0xFB	; 251
    1b34:	84 bb       	out	0x14, r24	; 20
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	8a 95       	dec	r24
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <init_PipeModules+0xf4>
    1b3c:	00 c0       	rjmp	.+0      	; 0x1b3e <init_PipeModules+0xfa>
    1b3e:	84 b3       	in	r24, 0x14	; 20
    1b40:	84 60       	ori	r24, 0x04	; 4
    1b42:	84 bb       	out	0x14, r24	; 20
    1b44:	90 e2       	ldi	r25, 0x20	; 32
    1b46:	e1 e4       	ldi	r30, 0x41	; 65
    1b48:	f3 e0       	ldi	r31, 0x03	; 3
    1b4a:	83 81       	ldd	r24, Z+3	; 0x03
    1b4c:	82 83       	std	Z+2, r24	; 0x02
    1b4e:	84 81       	ldd	r24, Z+4	; 0x04
    1b50:	83 83       	std	Z+3, r24	; 0x03
    1b52:	84 b3       	in	r24, 0x14	; 20
    1b54:	81 60       	ori	r24, 0x01	; 1
    1b56:	84 bb       	out	0x14, r24	; 20
    1b58:	8f ef       	ldi	r24, 0xFF	; 255
    1b5a:	81 83       	std	Z+1, r24	; 0x01
    1b5c:	88 b9       	out	0x08, r24	; 8
    1b5e:	85 81       	ldd	r24, Z+5	; 0x05
    1b60:	84 83       	std	Z+4, r24	; 0x04
    1b62:	86 81       	ldd	r24, Z+6	; 0x06
    1b64:	85 83       	std	Z+5, r24	; 0x05
    1b66:	80 b1       	in	r24, 0x00	; 0
    1b68:	86 83       	std	Z+6, r24	; 0x06
    1b6a:	82 83       	std	Z+2, r24	; 0x02
    1b6c:	83 83       	std	Z+3, r24	; 0x03
    1b6e:	84 83       	std	Z+4, r24	; 0x04
    1b70:	85 83       	std	Z+5, r24	; 0x05
    1b72:	87 83       	std	Z+7, r24	; 0x07
    1b74:	84 b3       	in	r24, 0x14	; 20
    1b76:	8e 7f       	andi	r24, 0xFE	; 254
    1b78:	84 bb       	out	0x14, r24	; 20
    1b7a:	38 97       	sbiw	r30, 0x08	; 8
    1b7c:	91 50       	subi	r25, 0x01	; 1
    1b7e:	29 f7       	brne	.-54     	; 0x1b4a <init_PipeModules+0x106>
    1b80:	00 00       	nop
    1b82:	00 00       	nop
    1b84:	84 b3       	in	r24, 0x14	; 20
    1b86:	81 60       	ori	r24, 0x01	; 1
    1b88:	84 bb       	out	0x14, r24	; 20
    1b8a:	84 b3       	in	r24, 0x14	; 20
    1b8c:	8d 7f       	andi	r24, 0xFD	; 253
    1b8e:	84 bb       	out	0x14, r24	; 20
    1b90:	18 b8       	out	0x08, r1	; 8
    1b92:	85 e0       	ldi	r24, 0x05	; 5
    1b94:	8a 95       	dec	r24
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <init_PipeModules+0x150>
    1b98:	00 00       	nop
    1b9a:	84 b3       	in	r24, 0x14	; 20
    1b9c:	82 60       	ori	r24, 0x02	; 2
    1b9e:	84 bb       	out	0x14, r24	; 20
    1ba0:	40 91 50 03 	lds	r20, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
    1ba4:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    1ba8:	84 2b       	or	r24, r20
    1baa:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
    1bae:	89 17       	cp	r24, r25
    1bb0:	39 f0       	breq	.+14     	; 0x1bc0 <init_PipeModules+0x17c>
    1bb2:	50 e0       	ldi	r21, 0x00	; 0
    1bb4:	54 2f       	mov	r21, r20
    1bb6:	44 27       	eor	r20, r20
    1bb8:	49 2b       	or	r20, r25
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	01 c6       	rjmp	.+3074   	; 0x27c2 <log_putError>
    1bc0:	08 95       	ret

00001bc2 <test_PipeModule>:
    1bc2:	88 30       	cpi	r24, 0x08	; 8
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8 <test_PipeModule+0x6>
    1bc6:	6a c0       	rjmp	.+212    	; 0x1c9c <test_PipeModule+0xda>
    1bc8:	31 e0       	ldi	r19, 0x01	; 1
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <test_PipeModule+0xc>
    1bcc:	33 0f       	add	r19, r19
    1bce:	8a 95       	dec	r24
    1bd0:	ea f7       	brpl	.-6      	; 0x1bcc <test_PipeModule+0xa>
    1bd2:	80 e8       	ldi	r24, 0x80	; 128
    1bd4:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1bd8:	8b b1       	in	r24, 0x0b	; 11
    1bda:	8f 77       	andi	r24, 0x7F	; 127
    1bdc:	8b b9       	out	0x0b, r24	; 11
    1bde:	84 b3       	in	r24, 0x14	; 20
    1be0:	87 60       	ori	r24, 0x07	; 7
    1be2:	84 bb       	out	0x14, r24	; 20
    1be4:	40 e0       	ldi	r20, 0x00	; 0
    1be6:	1d c0       	rjmp	.+58     	; 0x1c22 <test_PipeModule+0x60>
    1be8:	20 fd       	sbrc	r18, 0
    1bea:	03 c0       	rjmp	.+6      	; 0x1bf2 <test_PipeModule+0x30>
    1bec:	83 2f       	mov	r24, r19
    1bee:	80 95       	com	r24
    1bf0:	01 c0       	rjmp	.+2      	; 0x1bf4 <test_PipeModule+0x32>
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	88 b9       	out	0x08, r24	; 8
    1bf6:	26 95       	lsr	r18
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	8a 95       	dec	r24
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <test_PipeModule+0x38>
    1bfe:	00 c0       	rjmp	.+0      	; 0x1c00 <test_PipeModule+0x3e>
    1c00:	84 b3       	in	r24, 0x14	; 20
    1c02:	8e 7f       	andi	r24, 0xFE	; 254
    1c04:	84 bb       	out	0x14, r24	; 20
    1c06:	82 e0       	ldi	r24, 0x02	; 2
    1c08:	8a 95       	dec	r24
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <test_PipeModule+0x46>
    1c0c:	00 c0       	rjmp	.+0      	; 0x1c0e <test_PipeModule+0x4c>
    1c0e:	84 b3       	in	r24, 0x14	; 20
    1c10:	81 60       	ori	r24, 0x01	; 1
    1c12:	84 bb       	out	0x14, r24	; 20
    1c14:	9f 5f       	subi	r25, 0xFF	; 255
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <test_PipeModule+0x5a>
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	25 ea       	ldi	r18, 0xA5	; 165
    1c1c:	98 30       	cpi	r25, 0x08	; 8
    1c1e:	20 f3       	brcs	.-56     	; 0x1be8 <test_PipeModule+0x26>
    1c20:	4f 5f       	subi	r20, 0xFF	; 255
    1c22:	44 30       	cpi	r20, 0x04	; 4
    1c24:	c8 f3       	brcs	.-14     	; 0x1c18 <test_PipeModule+0x56>
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <test_PipeModule+0x86>
    1c2a:	82 e0       	ldi	r24, 0x02	; 2
    1c2c:	8a 95       	dec	r24
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <test_PipeModule+0x6a>
    1c30:	00 c0       	rjmp	.+0      	; 0x1c32 <test_PipeModule+0x70>
    1c32:	84 b3       	in	r24, 0x14	; 20
    1c34:	8e 7f       	andi	r24, 0xFE	; 254
    1c36:	84 bb       	out	0x14, r24	; 20
    1c38:	82 e0       	ldi	r24, 0x02	; 2
    1c3a:	8a 95       	dec	r24
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <test_PipeModule+0x78>
    1c3e:	00 c0       	rjmp	.+0      	; 0x1c40 <test_PipeModule+0x7e>
    1c40:	84 b3       	in	r24, 0x14	; 20
    1c42:	81 60       	ori	r24, 0x01	; 1
    1c44:	84 bb       	out	0x14, r24	; 20
    1c46:	9f 5f       	subi	r25, 0xFF	; 255
    1c48:	90 32       	cpi	r25, 0x20	; 32
    1c4a:	78 f3       	brcs	.-34     	; 0x1c2a <test_PipeModule+0x68>
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	40 e0       	ldi	r20, 0x00	; 0
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	ba 01       	movw	r22, r20
    1c54:	17 c0       	rjmp	.+46     	; 0x1c84 <test_PipeModule+0xc2>
    1c56:	44 0f       	add	r20, r20
    1c58:	55 1f       	adc	r21, r21
    1c5a:	66 1f       	adc	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	8a 95       	dec	r24
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <test_PipeModule+0x9e>
    1c64:	00 c0       	rjmp	.+0      	; 0x1c66 <test_PipeModule+0xa4>
    1c66:	84 b3       	in	r24, 0x14	; 20
    1c68:	8e 7f       	andi	r24, 0xFE	; 254
    1c6a:	84 bb       	out	0x14, r24	; 20
    1c6c:	80 b1       	in	r24, 0x00	; 0
    1c6e:	83 23       	and	r24, r19
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <test_PipeModule+0xb2>
    1c72:	41 60       	ori	r20, 0x01	; 1
    1c74:	82 e0       	ldi	r24, 0x02	; 2
    1c76:	8a 95       	dec	r24
    1c78:	f1 f7       	brne	.-4      	; 0x1c76 <test_PipeModule+0xb4>
    1c7a:	00 c0       	rjmp	.+0      	; 0x1c7c <test_PipeModule+0xba>
    1c7c:	84 b3       	in	r24, 0x14	; 20
    1c7e:	81 60       	ori	r24, 0x01	; 1
    1c80:	84 bb       	out	0x14, r24	; 20
    1c82:	9f 5f       	subi	r25, 0xFF	; 255
    1c84:	90 32       	cpi	r25, 0x20	; 32
    1c86:	38 f3       	brcs	.-50     	; 0x1c56 <test_PipeModule+0x94>
    1c88:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1c8c:	8b b1       	in	r24, 0x0b	; 11
    1c8e:	80 68       	ori	r24, 0x80	; 128
    1c90:	8b b9       	out	0x0b, r24	; 11
    1c92:	34 2f       	mov	r19, r20
    1c94:	25 2f       	mov	r18, r21
    1c96:	86 2f       	mov	r24, r22
    1c98:	97 2f       	mov	r25, r23
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <test_PipeModule+0xe2>
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	63 2f       	mov	r22, r19
    1ca6:	72 2f       	mov	r23, r18
    1ca8:	08 95       	ret

00001caa <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1caa:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1cac:	e9 e4       	ldi	r30, 0x49	; 73
    1cae:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1cb2:	06 c0       	rjmp	.+12     	; 0x1cc0 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1cb4:	2f ef       	ldi	r18, 0xFF	; 255
    1cb6:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1cb8:	26 81       	ldd	r18, Z+6	; 0x06
    1cba:	82 2b       	or	r24, r18
		pPipe++;
    1cbc:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1cbe:	9f 5f       	subi	r25, 0xFF	; 255
    1cc0:	90 32       	cpi	r25, 0x20	; 32
    1cc2:	c0 f3       	brcs	.-16     	; 0x1cb4 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	return result & pipe_ModuleAssnRead; // modules unassgined to read will be ignored (return bit=0)
    1cc4:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
}
    1cc8:	89 23       	and	r24, r25
    1cca:	08 95       	ret

00001ccc <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1ccc:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1cd0:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1cd4:	81 ff       	sbrs	r24, 1
    1cd6:	fc cf       	rjmp	.-8      	; 0x1cd0 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1cd8:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1cdc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1ce0:	81 ff       	sbrs	r24, 1
    1ce2:	fc cf       	rjmp	.-8      	; 0x1cdc <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1ce4:	08 95       	ret

00001ce6 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1cec:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cee:	f8 94       	cli
    1cf0:	06 c0       	rjmp	.+12     	; 0x1cfe <module_StartPowerOn+0x18>
    1cf2:	ef e2       	ldi	r30, 0x2F	; 47
    1cf4:	f2 e0       	ldi	r31, 0x02	; 2
    1cf6:	88 e2       	ldi	r24, 0x28	; 40
    1cf8:	82 83       	std	Z+2, r24	; 0x02
    1cfa:	13 82       	std	Z+3, r1	; 0x03
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	81 11       	cpse	r24, r1
    1d00:	f8 cf       	rjmp	.-16     	; 0x1cf2 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d02:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1d04:	08 95       	ret

00001d06 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1d06:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1d0a:	81 30       	cpi	r24, 0x01	; 1
    1d0c:	31 f5       	brne	.+76     	; 0x1d5a <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1d0e:	cd df       	rcall	.-102    	; 0x1caa <module_TestAllInputs>
    1d10:	81 11       	cpse	r24, r1
    1d12:	14 c0       	rjmp	.+40     	; 0x1d3c <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1d14:	85 b1       	in	r24, 0x05	; 5
    1d16:	80 64       	ori	r24, 0x40	; 64
    1d18:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1d1a:	82 e1       	ldi	r24, 0x12	; 18
    1d1c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1d20:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d22:	f8 94       	cli
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	06 c0       	rjmp	.+12     	; 0x1d34 <module_PowerControl+0x2e>
    1d28:	ef e2       	ldi	r30, 0x2F	; 47
    1d2a:	f2 e0       	ldi	r31, 0x02	; 2
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	82 83       	std	Z+2, r24	; 0x02
    1d30:	13 82       	std	Z+3, r1	; 0x03
    1d32:	80 e0       	ldi	r24, 0x00	; 0
    1d34:	81 11       	cpse	r24, r1
    1d36:	f8 cf       	rjmp	.-16     	; 0x1d28 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d38:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1d3a:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1d3c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d3e:	f8 94       	cli
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	07 c0       	rjmp	.+14     	; 0x1d52 <module_PowerControl+0x4c>
    1d44:	ef e2       	ldi	r30, 0x2F	; 47
    1d46:	f2 e0       	ldi	r31, 0x02	; 2
    1d48:	8c e0       	ldi	r24, 0x0C	; 12
    1d4a:	82 83       	std	Z+2, r24	; 0x02
    1d4c:	82 e0       	ldi	r24, 0x02	; 2
    1d4e:	83 83       	std	Z+3, r24	; 0x03
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	81 11       	cpse	r24, r1
    1d54:	f7 cf       	rjmp	.-18     	; 0x1d44 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d56:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1d58:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1d5a:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1d5c:	b1 f4       	brne	.+44     	; 0x1d8a <module_PowerControl+0x84>
    1d5e:	a5 df       	rcall	.-182    	; 0x1caa <module_TestAllInputs>
		if (testResult == 0){
    1d60:	81 11       	cpse	r24, r1
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1d64:	84 e1       	ldi	r24, 0x14	; 20
    1d66:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1d6a:	0b c0       	rjmp	.+22     	; 0x1d82 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1d6c:	48 2f       	mov	r20, r24
    1d6e:	50 e0       	ldi	r21, 0x00	; 0
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	85 e0       	ldi	r24, 0x05	; 5
    1d74:	26 d5       	rcall	.+2636   	; 0x27c2 <log_putError>
			POWER_OFF
    1d76:	85 b1       	in	r24, 0x05	; 5
    1d78:	8f 7b       	andi	r24, 0xBF	; 191
    1d7a:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1d7c:	80 e8       	ldi	r24, 0x80	; 128
    1d7e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1d88:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1d8a:	8f ef       	ldi	r24, 0xFF	; 255
    1d8c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1d90:	08 95       	ret

00001d92 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	0d c0       	rjmp	.+26     	; 0x1db0 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1d96:	94 30       	cpi	r25, 0x04	; 4
    1d98:	50 f4       	brcc	.+20     	; 0x1dae <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1d9a:	e9 2f       	mov	r30, r25
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	81 11       	cpse	r24, r1
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <softKey_WantLong+0x14>
    1da2:	2a e0       	ldi	r18, 0x0A	; 10
    1da4:	01 c0       	rjmp	.+2      	; 0x1da8 <softKey_WantLong+0x16>
    1da6:	26 e0       	ldi	r18, 0x06	; 6
    1da8:	ef 5a       	subi	r30, 0xAF	; 175
    1daa:	fc 4f       	sbci	r31, 0xFC	; 252
    1dac:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1dae:	9f 5f       	subi	r25, 0xFF	; 255
    1db0:	96 30       	cpi	r25, 0x06	; 6
    1db2:	88 f3       	brcs	.-30     	; 0x1d96 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1db4:	08 95       	ret

00001db6 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1db6:	1f 92       	push	r1
    1db8:	0f 92       	push	r0
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	0f 92       	push	r0
    1dbe:	11 24       	eor	r1, r1
    1dc0:	0b b6       	in	r0, 0x3b	; 59
    1dc2:	0f 92       	push	r0
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	2f 93       	push	r18
    1dce:	3f 93       	push	r19
    1dd0:	4f 93       	push	r20
    1dd2:	5f 93       	push	r21
    1dd4:	6f 93       	push	r22
    1dd6:	7f 93       	push	r23
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
    1ddc:	af 93       	push	r26
    1dde:	bf 93       	push	r27
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	ef 93       	push	r30
    1de6:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1de8:	85 b1       	in	r24, 0x05	; 5
    1dea:	80 68       	ori	r24, 0x80	; 128
    1dec:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1dee:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1df8:	83 70       	andi	r24, 0x03	; 3
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <__vector_21+0x4a>
    1dfe:	58 c1       	rjmp	.+688    	; 0x20b0 <__vector_21+0x2fa>
    1e00:	38 f0       	brcs	.+14     	; 0x1e10 <__vector_21+0x5a>
    1e02:	82 30       	cpi	r24, 0x02	; 2
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <__vector_21+0x52>
    1e06:	a5 c1       	rjmp	.+842    	; 0x2152 <__vector_21+0x39c>
    1e08:	83 30       	cpi	r24, 0x03	; 3
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <__vector_21+0x58>
    1e0c:	c9 c1       	rjmp	.+914    	; 0x21a0 <__vector_21+0x3ea>
    1e0e:	01 c2       	rjmp	.+1026   	; 0x2212 <__stack+0x13>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1e10:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1e14:	81 11       	cpse	r24, r1
    1e16:	1a c1       	rjmp	.+564    	; 0x204c <__vector_21+0x296>
    1e18:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1e1c:	96 fd       	sbrc	r25, 6
    1e1e:	16 c1       	rjmp	.+556    	; 0x204c <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	f9 01       	movw	r30, r18
    1e26:	ee 0f       	add	r30, r30
    1e28:	ff 1f       	adc	r31, r31
    1e2a:	e2 0f       	add	r30, r18
    1e2c:	f3 1f       	adc	r31, r19
    1e2e:	ee 0f       	add	r30, r30
    1e30:	ff 1f       	adc	r31, r31
    1e32:	e7 5b       	subi	r30, 0xB7	; 183
    1e34:	fc 4f       	sbci	r31, 0xFC	; 252
    1e36:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1e38:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1e3c:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1e3e:	49 17       	cp	r20, r25
    1e40:	10 f4       	brcc	.+4      	; 0x1e46 <__vector_21+0x90>
		return data1-data2;
    1e42:	94 1b       	sub	r25, r20
    1e44:	03 c0       	rjmp	.+6      	; 0x1e4c <__vector_21+0x96>
	} else {
		return data2-data1;
    1e46:	54 2f       	mov	r21, r20
    1e48:	59 1b       	sub	r21, r25
    1e4a:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1e4c:	94 30       	cpi	r25, 0x04	; 4
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <__vector_21+0x9c>
    1e50:	fd c0       	rjmp	.+506    	; 0x204c <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1e52:	81 11       	cpse	r24, r1
    1e54:	0e c0       	rjmp	.+28     	; 0x1e72 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1e56:	42 32       	cpi	r20, 0x22	; 34
    1e58:	70 f0       	brcs	.+28     	; 0x1e76 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1e5a:	4f 33       	cpi	r20, 0x3F	; 63
    1e5c:	70 f0       	brcs	.+28     	; 0x1e7a <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1e5e:	48 36       	cpi	r20, 0x68	; 104
    1e60:	70 f0       	brcs	.+28     	; 0x1e7e <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1e62:	46 39       	cpi	r20, 0x96	; 150
    1e64:	70 f0       	brcs	.+28     	; 0x1e82 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1e66:	4f 3b       	cpi	r20, 0xBF	; 191
    1e68:	70 f0       	brcs	.+28     	; 0x1e86 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1e6a:	48 3e       	cpi	r20, 0xE8	; 232
    1e6c:	70 f4       	brcc	.+28     	; 0x1e8a <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1e6e:	c6 e0       	ldi	r28, 0x06	; 6
    1e70:	0d c0       	rjmp	.+26     	; 0x1e8c <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1e72:	cf ef       	ldi	r28, 0xFF	; 255
    1e74:	0b c0       	rjmp	.+22     	; 0x1e8c <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1e76:	c4 e0       	ldi	r28, 0x04	; 4
    1e78:	09 c0       	rjmp	.+18     	; 0x1e8c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1e7a:	c3 e0       	ldi	r28, 0x03	; 3
    1e7c:	07 c0       	rjmp	.+14     	; 0x1e8c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1e7e:	c5 e0       	ldi	r28, 0x05	; 5
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1e82:	c1 e0       	ldi	r28, 0x01	; 1
    1e84:	03 c0       	rjmp	.+6      	; 0x1e8c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1e86:	c2 e0       	ldi	r28, 0x02	; 2
    1e88:	01 c0       	rjmp	.+2      	; 0x1e8c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1e8a:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	ee 0f       	add	r30, r30
    1e90:	ff 1f       	adc	r31, r31
    1e92:	e2 0f       	add	r30, r18
    1e94:	f3 1f       	adc	r31, r19
    1e96:	ee 0f       	add	r30, r30
    1e98:	ff 1f       	adc	r31, r31
    1e9a:	e7 5b       	subi	r30, 0xB7	; 183
    1e9c:	fc 4f       	sbci	r31, 0xFC	; 252
    1e9e:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1ea0:	dc 17       	cp	r29, r28
    1ea2:	09 f4       	brne	.+2      	; 0x1ea6 <__vector_21+0xf0>
    1ea4:	48 c0       	rjmp	.+144    	; 0x1f36 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1ea6:	df 3f       	cpi	r29, 0xFF	; 255
    1ea8:	19 f0       	breq	.+6      	; 0x1eb0 <__vector_21+0xfa>
    1eaa:	cf 3f       	cpi	r28, 0xFF	; 255
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1eae:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1eb0:	f9 01       	movw	r30, r18
    1eb2:	ee 0f       	add	r30, r30
    1eb4:	ff 1f       	adc	r31, r31
    1eb6:	e2 0f       	add	r30, r18
    1eb8:	f3 1f       	adc	r31, r19
    1eba:	ee 0f       	add	r30, r30
    1ebc:	ff 1f       	adc	r31, r31
    1ebe:	e7 5b       	subi	r30, 0xB7	; 183
    1ec0:	fc 4f       	sbci	r31, 0xFC	; 252
    1ec2:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1ec4:	df 3f       	cpi	r29, 0xFF	; 255
    1ec6:	f9 f4       	brne	.+62     	; 0x1f06 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    1ec8:	c9 01       	movw	r24, r18
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	fc 01       	movw	r30, r24
    1ed0:	e2 0f       	add	r30, r18
    1ed2:	f3 1f       	adc	r31, r19
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	e7 5b       	subi	r30, 0xB7	; 183
    1eda:	fc 4f       	sbci	r31, 0xFC	; 252
    1edc:	15 82       	std	Z+5, r1	; 0x05
    1ede:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	e2 0f       	add	r30, r18
    1ee4:	f3 1f       	adc	r31, r19
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	e7 5b       	subi	r30, 0xB7	; 183
    1eec:	fc 4f       	sbci	r31, 0xFC	; 252
    1eee:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1ef0:	ec 2f       	mov	r30, r28
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	e0 5b       	subi	r30, 0xB0	; 176
    1ef6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ef8:	80 81       	ld	r24, Z
    1efa:	80 ff       	sbrs	r24, 0
    1efc:	a7 c0       	rjmp	.+334    	; 0x204c <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    1efe:	8c 2f       	mov	r24, r28
    1f00:	0e 94 83 28 	call	0x5106	; 0x5106 <message_push>
    1f04:	a3 c0       	rjmp	.+326    	; 0x204c <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    1f06:	ed 2f       	mov	r30, r29
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	e0 5b       	subi	r30, 0xB0	; 176
    1f0c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f0e:	80 81       	ld	r24, Z
    1f10:	81 ff       	sbrs	r24, 1
    1f12:	9c c0       	rjmp	.+312    	; 0x204c <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    1f14:	f9 01       	movw	r30, r18
    1f16:	ee 0f       	add	r30, r30
    1f18:	ff 1f       	adc	r31, r31
    1f1a:	e2 0f       	add	r30, r18
    1f1c:	f3 1f       	adc	r31, r19
    1f1e:	ee 0f       	add	r30, r30
    1f20:	ff 1f       	adc	r31, r31
    1f22:	e7 5b       	subi	r30, 0xB7	; 183
    1f24:	fc 4f       	sbci	r31, 0xFC	; 252
    1f26:	83 81       	ldd	r24, Z+3	; 0x03
    1f28:	83 70       	andi	r24, 0x03	; 3
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <__vector_21+0x178>
    1f2c:	8f c0       	rjmp	.+286    	; 0x204c <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    1f2e:	8d 2f       	mov	r24, r29
    1f30:	0e 94 83 28 	call	0x5106	; 0x5106 <message_push>
    1f34:	8b c0       	rjmp	.+278    	; 0x204c <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    1f36:	cf 3f       	cpi	r28, 0xFF	; 255
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <__vector_21+0x186>
    1f3a:	88 c0       	rjmp	.+272    	; 0x204c <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    1f3c:	f9 01       	movw	r30, r18
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	df 01       	movw	r26, r30
    1f44:	a2 0f       	add	r26, r18
    1f46:	b3 1f       	adc	r27, r19
    1f48:	aa 0f       	add	r26, r26
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	a7 5b       	subi	r26, 0xB7	; 183
    1f4e:	bc 4f       	sbci	r27, 0xFC	; 252
    1f50:	14 96       	adiw	r26, 0x04	; 4
    1f52:	8d 91       	ld	r24, X+
    1f54:	9c 91       	ld	r25, X
    1f56:	15 97       	sbiw	r26, 0x05	; 5
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	15 96       	adiw	r26, 0x05	; 5
    1f5c:	9c 93       	st	X, r25
    1f5e:	8e 93       	st	-X, r24
    1f60:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    1f62:	fd 01       	movw	r30, r26
    1f64:	84 81       	ldd	r24, Z+4	; 0x04
    1f66:	95 81       	ldd	r25, Z+5	; 0x05
    1f68:	8b 34       	cpi	r24, 0x4B	; 75
    1f6a:	91 05       	cpc	r25, r1
    1f6c:	a9 f4       	brne	.+42     	; 0x1f98 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    1f6e:	ed 2f       	mov	r30, r29
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	e0 5b       	subi	r30, 0xB0	; 176
    1f74:	fc 4f       	sbci	r31, 0xFC	; 252
    1f76:	80 81       	ld	r24, Z
    1f78:	82 ff       	sbrs	r24, 2
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    1f7c:	8c 2f       	mov	r24, r28
    1f7e:	80 68       	ori	r24, 0x80	; 128
    1f80:	0e 94 83 28 	call	0x5106	; 0x5106 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    1f84:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    1f88:	86 e0       	ldi	r24, 0x06	; 6
    1f8a:	e8 9f       	mul	r30, r24
    1f8c:	f0 01       	movw	r30, r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	e7 5b       	subi	r30, 0xB7	; 183
    1f92:	fc 4f       	sbci	r31, 0xFC	; 252
    1f94:	82 e0       	ldi	r24, 0x02	; 2
    1f96:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    1f98:	ed 2f       	mov	r30, r29
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	e0 5b       	subi	r30, 0xB0	; 176
    1f9e:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa0:	80 81       	ld	r24, Z
    1fa2:	83 ff       	sbrs	r24, 3
    1fa4:	53 c0       	rjmp	.+166    	; 0x204c <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    1fa6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	fc 01       	movw	r30, r24
    1fae:	ee 0f       	add	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	e8 0f       	add	r30, r24
    1fb4:	f9 1f       	adc	r31, r25
    1fb6:	ee 0f       	add	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	e7 5b       	subi	r30, 0xB7	; 183
    1fbc:	fc 4f       	sbci	r31, 0xFC	; 252
    1fbe:	23 81       	ldd	r18, Z+3	; 0x03
    1fc0:	21 11       	cpse	r18, r1
    1fc2:	1e c0       	rjmp	.+60     	; 0x2000 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	ee 0f       	add	r30, r30
    1fc8:	ff 1f       	adc	r31, r31
    1fca:	e8 0f       	add	r30, r24
    1fcc:	f9 1f       	adc	r31, r25
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	e7 5b       	subi	r30, 0xB7	; 183
    1fd4:	fc 4f       	sbci	r31, 0xFC	; 252
    1fd6:	24 81       	ldd	r18, Z+4	; 0x04
    1fd8:	35 81       	ldd	r19, Z+5	; 0x05
    1fda:	22 33       	cpi	r18, 0x32	; 50
    1fdc:	31 05       	cpc	r19, r1
    1fde:	b1 f5       	brne	.+108    	; 0x204c <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    1fe0:	26 e0       	ldi	r18, 0x06	; 6
    1fe2:	28 9f       	mul	r18, r24
    1fe4:	f0 01       	movw	r30, r0
    1fe6:	29 9f       	mul	r18, r25
    1fe8:	f0 0d       	add	r31, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	e7 5b       	subi	r30, 0xB7	; 183
    1fee:	fc 4f       	sbci	r31, 0xFC	; 252
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    1ff4:	15 82       	std	Z+5, r1	; 0x05
    1ff6:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    1ff8:	8c 2f       	mov	r24, r28
    1ffa:	0e 94 83 28 	call	0x5106	; 0x5106 <message_push>
    1ffe:	26 c0       	rjmp	.+76     	; 0x204c <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2000:	fc 01       	movw	r30, r24
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	e8 0f       	add	r30, r24
    2008:	f9 1f       	adc	r31, r25
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	e7 5b       	subi	r30, 0xB7	; 183
    2010:	fc 4f       	sbci	r31, 0xFC	; 252
    2012:	23 81       	ldd	r18, Z+3	; 0x03
    2014:	21 30       	cpi	r18, 0x01	; 1
    2016:	d1 f4       	brne	.+52     	; 0x204c <__vector_21+0x296>
    2018:	26 e0       	ldi	r18, 0x06	; 6
    201a:	28 9f       	mul	r18, r24
    201c:	f0 01       	movw	r30, r0
    201e:	29 9f       	mul	r18, r25
    2020:	f0 0d       	add	r31, r0
    2022:	11 24       	eor	r1, r1
    2024:	e7 5b       	subi	r30, 0xB7	; 183
    2026:	fc 4f       	sbci	r31, 0xFC	; 252
    2028:	24 81       	ldd	r18, Z+4	; 0x04
    202a:	35 81       	ldd	r19, Z+5	; 0x05
    202c:	2c 30       	cpi	r18, 0x0C	; 12
    202e:	31 05       	cpc	r19, r1
    2030:	69 f4       	brne	.+26     	; 0x204c <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    2032:	26 e0       	ldi	r18, 0x06	; 6
    2034:	28 9f       	mul	r18, r24
    2036:	f0 01       	movw	r30, r0
    2038:	29 9f       	mul	r18, r25
    203a:	f0 0d       	add	r31, r0
    203c:	11 24       	eor	r1, r1
    203e:	e7 5b       	subi	r30, 0xB7	; 183
    2040:	fc 4f       	sbci	r31, 0xFC	; 252
    2042:	15 82       	std	Z+5, r1	; 0x05
    2044:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2046:	8c 2f       	mov	r24, r28
    2048:	0e 94 83 28 	call	0x5106	; 0x5106 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    204c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2050:	8f 5f       	subi	r24, 0xFF	; 255
    2052:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    2056:	84 30       	cpi	r24, 0x04	; 4
    2058:	10 f0       	brcs	.+4      	; 0x205e <__vector_21+0x2a8>
		adcNr = 0;
    205a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    205e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2062:	81 11       	cpse	r24, r1
    2064:	0c c0       	rjmp	.+24     	; 0x207e <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	fc 01       	movw	r30, r24
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	e8 0f       	add	r30, r24
    2070:	f9 1f       	adc	r31, r25
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e7 5b       	subi	r30, 0xB7	; 183
    2078:	fc 4f       	sbci	r31, 0xFC	; 252
    207a:	80 81       	ld	r24, Z
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    207e:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    2080:	98 2f       	mov	r25, r24
    2082:	9f 71       	andi	r25, 0x1F	; 31
    2084:	90 66       	ori	r25, 0x60	; 96
    2086:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    208a:	eb e7       	ldi	r30, 0x7B	; 123
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	20 81       	ld	r18, Z
    2090:	80 72       	andi	r24, 0x20	; 32
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	95 95       	asr	r25
    2096:	87 95       	ror	r24
    2098:	95 95       	asr	r25
    209a:	87 95       	ror	r24
    209c:	92 2f       	mov	r25, r18
    209e:	9f 7d       	andi	r25, 0xDF	; 223
    20a0:	89 2b       	or	r24, r25
    20a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    20a4:	ea e7       	ldi	r30, 0x7A	; 122
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	80 64       	ori	r24, 0x40	; 64
    20ac:	80 83       	st	Z, r24
    20ae:	b1 c0       	rjmp	.+354    	; 0x2212 <__stack+0x13>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    20b0:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    20b4:	80 38       	cpi	r24, 0x80	; 128
    20b6:	09 f4       	brne	.+2      	; 0x20ba <__vector_21+0x304>
    20b8:	ac c0       	rjmp	.+344    	; 0x2212 <__stack+0x13>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    20ba:	84 b3       	in	r24, 0x14	; 20
    20bc:	87 60       	ori	r24, 0x07	; 7
    20be:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    20c0:	84 b3       	in	r24, 0x14	; 20
    20c2:	8b 7f       	andi	r24, 0xFB	; 251
    20c4:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
    20c6:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    20ca:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20cc:	e2 e0       	ldi	r30, 0x02	; 2
    20ce:	ea 95       	dec	r30
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <__vector_21+0x318>
    20d2:	00 c0       	rjmp	.+0      	; 0x20d4 <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    20d4:	84 b3       	in	r24, 0x14	; 20
    20d6:	84 60       	ori	r24, 0x04	; 4
    20d8:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    20da:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    20dc:	e1 e4       	ldi	r30, 0x41	; 65
    20de:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    20e0:	83 81       	ldd	r24, Z+3	; 0x03
    20e2:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    20e4:	84 81       	ldd	r24, Z+4	; 0x04
    20e6:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    20e8:	84 b3       	in	r24, 0x14	; 20
    20ea:	81 60       	ori	r24, 0x01	; 1
    20ec:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    20ee:	81 81       	ldd	r24, Z+1	; 0x01
    20f0:	82 2b       	or	r24, r18
    20f2:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    20f4:	85 81       	ldd	r24, Z+5	; 0x05
    20f6:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    20f8:	86 81       	ldd	r24, Z+6	; 0x06
    20fa:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    20fc:	80 b1       	in	r24, 0x00	; 0
    20fe:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2100:	84 b3       	in	r24, 0x14	; 20
    2102:	8e 7f       	andi	r24, 0xFE	; 254
    2104:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    2106:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    2108:	91 50       	subi	r25, 0x01	; 1
    210a:	51 f7       	brne	.-44     	; 0x20e0 <__vector_21+0x32a>
	asm("nop");
    210c:	00 00       	nop
	asm("nop");
    210e:	00 00       	nop
	PIPE_CLOCK_H
    2110:	84 b3       	in	r24, 0x14	; 20
    2112:	81 60       	ori	r24, 0x01	; 1
    2114:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    2116:	84 b3       	in	r24, 0x14	; 20
    2118:	8d 7f       	andi	r24, 0xFD	; 253
    211a:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    211c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2120:	82 60       	ori	r24, 0x02	; 2
    2122:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    2126:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    2128:	8b b1       	in	r24, 0x0b	; 11
    212a:	80 68       	ori	r24, 0x80	; 128
    212c:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    212e:	84 b3       	in	r24, 0x14	; 20
    2130:	82 60       	ori	r24, 0x02	; 2
    2132:	84 bb       	out	0x14, r24	; 20
    2134:	6e c0       	rjmp	.+220    	; 0x2212 <__stack+0x13>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    2136:	80 81       	ld	r24, Z
    2138:	81 50       	subi	r24, 0x01	; 1
    213a:	8e 3f       	cpi	r24, 0xFE	; 254
    213c:	38 f4       	brcc	.+14     	; 0x214c <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    213e:	21 81       	ldd	r18, Z+1	; 0x01
    2140:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    2142:	25 30       	cpi	r18, 0x05	; 5
    2144:	10 f0       	brcs	.+4      	; 0x214a <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    2146:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    2148:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    214a:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    214c:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    214e:	9f 5f       	subi	r25, 0xFF	; 255
    2150:	03 c0       	rjmp	.+6      	; 0x2158 <__vector_21+0x3a2>
    2152:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    2154:	ef e2       	ldi	r30, 0x2F	; 47
    2156:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2158:	99 30       	cpi	r25, 0x09	; 9
    215a:	68 f3       	brcs	.-38     	; 0x2136 <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    215c:	e1 e4       	ldi	r30, 0x41	; 65
    215e:	f2 e0       	ldi	r31, 0x02	; 2
    2160:	80 81       	ld	r24, Z
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	80 83       	st	Z, r24
    2166:	8a 3f       	cpi	r24, 0xFA	; 250
    2168:	09 f0       	breq	.+2      	; 0x216c <__vector_21+0x3b6>
    216a:	53 c0       	rjmp	.+166    	; 0x2212 <__stack+0x13>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    2172:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    2174:	81 81       	ldd	r24, Z+1	; 0x01
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	81 83       	std	Z+1, r24	; 0x01
    217a:	8c 33       	cpi	r24, 0x3C	; 60
    217c:	08 f4       	brcc	.+2      	; 0x2180 <__vector_21+0x3ca>
    217e:	49 c0       	rjmp	.+146    	; 0x2212 <__stack+0x13>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    2180:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	8f 5f       	subi	r24, 0xFF	; 255
    2186:	82 83       	std	Z+2, r24	; 0x02
    2188:	8c 33       	cpi	r24, 0x3C	; 60
    218a:	08 f4       	brcc	.+2      	; 0x218e <__vector_21+0x3d8>
    218c:	42 c0       	rjmp	.+132    	; 0x2212 <__stack+0x13>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    218e:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    2190:	83 81       	ldd	r24, Z+3	; 0x03
    2192:	8f 5f       	subi	r24, 0xFF	; 255
    2194:	83 83       	std	Z+3, r24	; 0x03
    2196:	84 36       	cpi	r24, 0x64	; 100
    2198:	e0 f1       	brcs	.+120    	; 0x2212 <__stack+0x13>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    219a:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    219e:	39 c0       	rjmp	.+114    	; 0x2212 <__stack+0x13>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    21a0:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    21a4:	80 38       	cpi	r24, 0x80	; 128
    21a6:	a9 f1       	breq	.+106    	; 0x2212 <__stack+0x13>
//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
    21a8:	e0 90 50 03 	lds	r14, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    21ac:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    21ae:	09 e4       	ldi	r16, 0x49	; 73
    21b0:	12 e0       	ldi	r17, 0x02	; 2
    21b2:	2c c0       	rjmp	.+88     	; 0x220c <__stack+0xd>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    21b4:	f8 01       	movw	r30, r16
    21b6:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    21b8:	83 81       	ldd	r24, Z+3	; 0x03
    21ba:	9c 2f       	mov	r25, r28
    21bc:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    21be:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    21c0:	84 81       	ldd	r24, Z+4	; 0x04
    21c2:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    21c4:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    21c6:	25 81       	ldd	r18, Z+5	; 0x05
    21c8:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    21ca:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    21cc:	86 81       	ldd	r24, Z+6	; 0x06
    21ce:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    21d0:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    21d2:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    21d4:	cd 23       	and	r28, r29
    21d6:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    21d8:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    21da:	8d 2f       	mov	r24, r29
    21dc:	80 95       	com	r24
    21de:	8c 23       	and	r24, r28
    21e0:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    21e2:	21 f0       	breq	.+8      	; 0x21ec <__vector_21+0x436>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    21e4:	9f 2d       	mov	r25, r15
    21e6:	90 62       	ori	r25, 0x20	; 32
    21e8:	0e 94 c3 28 	call	0x5186	; 0x5186 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    21ec:	c0 95       	com	r28
    21ee:	cd 23       	and	r28, r29
    21f0:	8c 2f       	mov	r24, r28
    21f2:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    21f4:	19 f0       	breq	.+6      	; 0x21fc <__vector_21+0x446>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    21f6:	9f 2d       	mov	r25, r15
    21f8:	0e 94 c3 28 	call	0x5186	; 0x5186 <pipeMsgPush>
		}
		curPipe++;
    21fc:	08 5f       	subi	r16, 0xF8	; 248
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    2200:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2204:	81 60       	ori	r24, 0x01	; 1
    2206:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    220a:	f3 94       	inc	r15
    220c:	ff e1       	ldi	r31, 0x1F	; 31
    220e:	ff 15       	cp	r31, r15
    2210:	88 f6       	brcc	.-94     	; 0x21b4 <__vector_21+0x3fe>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    2212:	85 b1       	in	r24, 0x05	; 5
    2214:	8f 77       	andi	r24, 0x7F	; 127
    2216:	85 b9       	out	0x05, r24	; 5

}
    2218:	ff 91       	pop	r31
    221a:	ef 91       	pop	r30
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	bf 91       	pop	r27
    2222:	af 91       	pop	r26
    2224:	9f 91       	pop	r25
    2226:	8f 91       	pop	r24
    2228:	7f 91       	pop	r23
    222a:	6f 91       	pop	r22
    222c:	5f 91       	pop	r21
    222e:	4f 91       	pop	r20
    2230:	3f 91       	pop	r19
    2232:	2f 91       	pop	r18
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	ff 90       	pop	r15
    223a:	ef 90       	pop	r14
    223c:	0f 90       	pop	r0
    223e:	0b be       	out	0x3b, r0	; 59
    2240:	0f 90       	pop	r0
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	0f 90       	pop	r0
    2246:	1f 90       	pop	r1
    2248:	18 95       	reti

0000224a <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    224a:	8f ef       	ldi	r24, 0xFF	; 255
    224c:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    224e:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    2250:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    2252:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    2254:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    2256:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    2258:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    225a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    225e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    2262:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    2266:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    226a:	8a b1       	in	r24, 0x0a	; 10
    226c:	80 68       	ori	r24, 0x80	; 128
    226e:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2270:	8b b1       	in	r24, 0x0b	; 11
    2272:	8f 77       	andi	r24, 0x7F	; 127
    2274:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    2276:	84 b1       	in	r24, 0x04	; 4
    2278:	80 64       	ori	r24, 0x40	; 64
    227a:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    227c:	85 b1       	in	r24, 0x05	; 5
    227e:	8f 7b       	andi	r24, 0xBF	; 191
    2280:	85 b9       	out	0x05, r24	; 5
    2282:	08 95       	ret

00002284 <lcd_write_nibble>:
    2284:	88 23       	and	r24, r24
    2286:	34 f4       	brge	.+12     	; 0x2294 <lcd_write_nibble+0x10>
    2288:	e2 e0       	ldi	r30, 0x02	; 2
    228a:	f1 e0       	ldi	r31, 0x01	; 1
    228c:	90 81       	ld	r25, Z
    228e:	90 61       	ori	r25, 0x10	; 16
    2290:	90 83       	st	Z, r25
    2292:	05 c0       	rjmp	.+10     	; 0x229e <lcd_write_nibble+0x1a>
    2294:	e2 e0       	ldi	r30, 0x02	; 2
    2296:	f1 e0       	ldi	r31, 0x01	; 1
    2298:	90 81       	ld	r25, Z
    229a:	9f 7e       	andi	r25, 0xEF	; 239
    229c:	90 83       	st	Z, r25
    229e:	86 ff       	sbrs	r24, 6
    22a0:	06 c0       	rjmp	.+12     	; 0x22ae <lcd_write_nibble+0x2a>
    22a2:	e2 e0       	ldi	r30, 0x02	; 2
    22a4:	f1 e0       	ldi	r31, 0x01	; 1
    22a6:	90 81       	ld	r25, Z
    22a8:	98 60       	ori	r25, 0x08	; 8
    22aa:	90 83       	st	Z, r25
    22ac:	05 c0       	rjmp	.+10     	; 0x22b8 <lcd_write_nibble+0x34>
    22ae:	e2 e0       	ldi	r30, 0x02	; 2
    22b0:	f1 e0       	ldi	r31, 0x01	; 1
    22b2:	90 81       	ld	r25, Z
    22b4:	97 7f       	andi	r25, 0xF7	; 247
    22b6:	90 83       	st	Z, r25
    22b8:	85 ff       	sbrs	r24, 5
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <lcd_write_nibble+0x40>
    22bc:	9e b1       	in	r25, 0x0e	; 14
    22be:	98 60       	ori	r25, 0x08	; 8
    22c0:	9e b9       	out	0x0e, r25	; 14
    22c2:	03 c0       	rjmp	.+6      	; 0x22ca <lcd_write_nibble+0x46>
    22c4:	9e b1       	in	r25, 0x0e	; 14
    22c6:	97 7f       	andi	r25, 0xF7	; 247
    22c8:	9e b9       	out	0x0e, r25	; 14
    22ca:	84 ff       	sbrs	r24, 4
    22cc:	04 c0       	rjmp	.+8      	; 0x22d6 <lcd_write_nibble+0x52>
    22ce:	84 b3       	in	r24, 0x14	; 20
    22d0:	80 62       	ori	r24, 0x20	; 32
    22d2:	84 bb       	out	0x14, r24	; 20
    22d4:	03 c0       	rjmp	.+6      	; 0x22dc <lcd_write_nibble+0x58>
    22d6:	84 b3       	in	r24, 0x14	; 20
    22d8:	8f 7d       	andi	r24, 0xDF	; 223
    22da:	84 bb       	out	0x14, r24	; 20
    22dc:	e2 e0       	ldi	r30, 0x02	; 2
    22de:	f1 e0       	ldi	r31, 0x01	; 1
    22e0:	80 81       	ld	r24, Z
    22e2:	80 64       	ori	r24, 0x40	; 64
    22e4:	80 83       	st	Z, r24
    22e6:	85 e0       	ldi	r24, 0x05	; 5
    22e8:	8a 95       	dec	r24
    22ea:	f1 f7       	brne	.-4      	; 0x22e8 <lcd_write_nibble+0x64>
    22ec:	00 00       	nop
    22ee:	80 81       	ld	r24, Z
    22f0:	8f 7b       	andi	r24, 0xBF	; 191
    22f2:	80 83       	st	Z, r24
    22f4:	85 e0       	ldi	r24, 0x05	; 5
    22f6:	8a 95       	dec	r24
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <lcd_write_nibble+0x72>
    22fa:	00 00       	nop
    22fc:	08 95       	ret

000022fe <lcd_write_character>:
    22fe:	cf 93       	push	r28
    2300:	c8 2f       	mov	r28, r24
    2302:	e2 e0       	ldi	r30, 0x02	; 2
    2304:	f1 e0       	ldi	r31, 0x01	; 1
    2306:	80 81       	ld	r24, Z
    2308:	80 62       	ori	r24, 0x20	; 32
    230a:	80 83       	st	Z, r24
    230c:	80 81       	ld	r24, Z
    230e:	8f 7b       	andi	r24, 0xBF	; 191
    2310:	80 83       	st	Z, r24
    2312:	8c 2f       	mov	r24, r28
    2314:	b7 df       	rcall	.-146    	; 0x2284 <lcd_write_nibble>
    2316:	8c 2f       	mov	r24, r28
    2318:	82 95       	swap	r24
    231a:	80 7f       	andi	r24, 0xF0	; 240
    231c:	b3 df       	rcall	.-154    	; 0x2284 <lcd_write_nibble>
    231e:	8f ef       	ldi	r24, 0xFF	; 255
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <lcd_write_character+0x24>
    2326:	00 c0       	rjmp	.+0      	; 0x2328 <lcd_write_character+0x2a>
    2328:	00 00       	nop
    232a:	cf 91       	pop	r28
    232c:	08 95       	ret

0000232e <lcd_write_command>:
    232e:	cf 93       	push	r28
    2330:	c8 2f       	mov	r28, r24
    2332:	e2 e0       	ldi	r30, 0x02	; 2
    2334:	f1 e0       	ldi	r31, 0x01	; 1
    2336:	80 81       	ld	r24, Z
    2338:	8f 7d       	andi	r24, 0xDF	; 223
    233a:	80 83       	st	Z, r24
    233c:	80 81       	ld	r24, Z
    233e:	8f 7b       	andi	r24, 0xBF	; 191
    2340:	80 83       	st	Z, r24
    2342:	8c 2f       	mov	r24, r28
    2344:	9f df       	rcall	.-194    	; 0x2284 <lcd_write_nibble>
    2346:	8c 2f       	mov	r24, r28
    2348:	82 95       	swap	r24
    234a:	80 7f       	andi	r24, 0xF0	; 240
    234c:	9b df       	rcall	.-202    	; 0x2284 <lcd_write_nibble>
    234e:	c1 50       	subi	r28, 0x01	; 1
    2350:	c2 30       	cpi	r28, 0x02	; 2
    2352:	38 f4       	brcc	.+14     	; 0x2362 <lcd_write_command+0x34>
    2354:	8f e0       	ldi	r24, 0x0F	; 15
    2356:	97 e2       	ldi	r25, 0x27	; 39
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <lcd_write_command+0x2a>
    235c:	00 c0       	rjmp	.+0      	; 0x235e <lcd_write_command+0x30>
    235e:	00 00       	nop
    2360:	06 c0       	rjmp	.+12     	; 0x236e <lcd_write_command+0x40>
    2362:	8f ef       	ldi	r24, 0xFF	; 255
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <lcd_write_command+0x38>
    236a:	00 c0       	rjmp	.+0      	; 0x236c <lcd_write_command+0x3e>
    236c:	00 00       	nop
    236e:	cf 91       	pop	r28
    2370:	08 95       	ret

00002372 <lcd_init>:
    2372:	e1 e0       	ldi	r30, 0x01	; 1
    2374:	f1 e0       	ldi	r31, 0x01	; 1
    2376:	80 81       	ld	r24, Z
    2378:	80 61       	ori	r24, 0x10	; 16
    237a:	80 83       	st	Z, r24
    237c:	80 81       	ld	r24, Z
    237e:	88 60       	ori	r24, 0x08	; 8
    2380:	80 83       	st	Z, r24
    2382:	8d b1       	in	r24, 0x0d	; 13
    2384:	88 60       	ori	r24, 0x08	; 8
    2386:	8d b9       	out	0x0d, r24	; 13
    2388:	83 b3       	in	r24, 0x13	; 19
    238a:	80 62       	ori	r24, 0x20	; 32
    238c:	83 bb       	out	0x13, r24	; 19
    238e:	80 81       	ld	r24, Z
    2390:	80 64       	ori	r24, 0x40	; 64
    2392:	80 83       	st	Z, r24
    2394:	80 81       	ld	r24, Z
    2396:	80 62       	ori	r24, 0x20	; 32
    2398:	80 83       	st	Z, r24
    239a:	2f ef       	ldi	r18, 0xFF	; 255
    239c:	81 ee       	ldi	r24, 0xE1	; 225
    239e:	94 e0       	ldi	r25, 0x04	; 4
    23a0:	21 50       	subi	r18, 0x01	; 1
    23a2:	80 40       	sbci	r24, 0x00	; 0
    23a4:	90 40       	sbci	r25, 0x00	; 0
    23a6:	e1 f7       	brne	.-8      	; 0x23a0 <lcd_init+0x2e>
    23a8:	00 c0       	rjmp	.+0      	; 0x23aa <lcd_init+0x38>
    23aa:	00 00       	nop
    23ac:	e2 e0       	ldi	r30, 0x02	; 2
    23ae:	f1 e0       	ldi	r31, 0x01	; 1
    23b0:	80 81       	ld	r24, Z
    23b2:	8f 7d       	andi	r24, 0xDF	; 223
    23b4:	80 83       	st	Z, r24
    23b6:	80 81       	ld	r24, Z
    23b8:	8f 7b       	andi	r24, 0xBF	; 191
    23ba:	80 83       	st	Z, r24
    23bc:	80 e3       	ldi	r24, 0x30	; 48
    23be:	62 df       	rcall	.-316    	; 0x2284 <lcd_write_nibble>
    23c0:	8f e1       	ldi	r24, 0x1F	; 31
    23c2:	9e e4       	ldi	r25, 0x4E	; 78
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <lcd_init+0x52>
    23c8:	00 c0       	rjmp	.+0      	; 0x23ca <lcd_init+0x58>
    23ca:	00 00       	nop
    23cc:	80 e3       	ldi	r24, 0x30	; 48
    23ce:	5a df       	rcall	.-332    	; 0x2284 <lcd_write_nibble>
    23d0:	8f e1       	ldi	r24, 0x1F	; 31
    23d2:	9e e4       	ldi	r25, 0x4E	; 78
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <lcd_init+0x62>
    23d8:	00 c0       	rjmp	.+0      	; 0x23da <lcd_init+0x68>
    23da:	00 00       	nop
    23dc:	80 e3       	ldi	r24, 0x30	; 48
    23de:	52 df       	rcall	.-348    	; 0x2284 <lcd_write_nibble>
    23e0:	8f e1       	ldi	r24, 0x1F	; 31
    23e2:	9e e4       	ldi	r25, 0x4E	; 78
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <lcd_init+0x72>
    23e8:	00 c0       	rjmp	.+0      	; 0x23ea <lcd_init+0x78>
    23ea:	00 00       	nop
    23ec:	88 e2       	ldi	r24, 0x28	; 40
    23ee:	4a df       	rcall	.-364    	; 0x2284 <lcd_write_nibble>
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <lcd_init+0x82>
    23f8:	00 c0       	rjmp	.+0      	; 0x23fa <lcd_init+0x88>
    23fa:	00 00       	nop
    23fc:	88 e2       	ldi	r24, 0x28	; 40
    23fe:	97 df       	rcall	.-210    	; 0x232e <lcd_write_command>
    2400:	88 e0       	ldi	r24, 0x08	; 8
    2402:	95 df       	rcall	.-214    	; 0x232e <lcd_write_command>
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	93 df       	rcall	.-218    	; 0x232e <lcd_write_command>
    2408:	86 e0       	ldi	r24, 0x06	; 6
    240a:	91 df       	rcall	.-222    	; 0x232e <lcd_write_command>
    240c:	8c e0       	ldi	r24, 0x0C	; 12
    240e:	8f cf       	rjmp	.-226    	; 0x232e <lcd_write_command>
    2410:	08 95       	ret

00002412 <lcd_goto>:
    2412:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <lcd_cursorPos>
    2416:	80 58       	subi	r24, 0x80	; 128
    2418:	8a cf       	rjmp	.-236    	; 0x232e <lcd_write_command>
    241a:	08 95       	ret

0000241c <lcd_clrscr>:
    241c:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <lcd_cursorPos>
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	85 cf       	rjmp	.-246    	; 0x232e <lcd_write_command>
    2424:	08 95       	ret

00002426 <lcd_putc>:
    2426:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <lcd_cursorPos>
    242a:	9f 5f       	subi	r25, 0xFF	; 255
    242c:	9f 77       	andi	r25, 0x7F	; 127
    242e:	90 93 58 03 	sts	0x0358, r25	; 0x800358 <lcd_cursorPos>
    2432:	65 cf       	rjmp	.-310    	; 0x22fe <lcd_write_character>
    2434:	08 95       	ret

00002436 <lcd_puts>:
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	fc 01       	movw	r30, r24
    243c:	89 2b       	or	r24, r25
    243e:	19 f4       	brne	.+6      	; 0x2446 <lcd_puts+0x10>
    2440:	07 c0       	rjmp	.+14     	; 0x2450 <lcd_puts+0x1a>
    2442:	f1 df       	rcall	.-30     	; 0x2426 <lcd_putc>
    2444:	fe 01       	movw	r30, r28
    2446:	ef 01       	movw	r28, r30
    2448:	21 96       	adiw	r28, 0x01	; 1
    244a:	80 81       	ld	r24, Z
    244c:	81 11       	cpse	r24, r1
    244e:	f9 cf       	rjmp	.-14     	; 0x2442 <lcd_puts+0xc>
    2450:	df 91       	pop	r29
    2452:	cf 91       	pop	r28
    2454:	08 95       	ret

00002456 <lcd_puts_P>:
    2456:	cf 93       	push	r28
    2458:	df 93       	push	r29
    245a:	fc 01       	movw	r30, r24
    245c:	89 2b       	or	r24, r25
    245e:	19 f4       	brne	.+6      	; 0x2466 <lcd_puts_P+0x10>
    2460:	07 c0       	rjmp	.+14     	; 0x2470 <lcd_puts_P+0x1a>
    2462:	e1 df       	rcall	.-62     	; 0x2426 <lcd_putc>
    2464:	fe 01       	movw	r30, r28
    2466:	ef 01       	movw	r28, r30
    2468:	21 96       	adiw	r28, 0x01	; 1
    246a:	84 91       	lpm	r24, Z
    246c:	81 11       	cpse	r24, r1
    246e:	f9 cf       	rjmp	.-14     	; 0x2462 <lcd_puts_P+0xc>
    2470:	df 91       	pop	r29
    2472:	cf 91       	pop	r28
    2474:	08 95       	ret

00002476 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2476:	82 e8       	ldi	r24, 0x82	; 130
    2478:	93 e0       	ldi	r25, 0x03	; 3
    247a:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <pLogStart+0x1>
    247e:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <pLogStart>
    2482:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogEnd+0x1>
    2486:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogEnd>
    248a:	08 95       	ret

0000248c <log_count>:
    248c:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <pLogEnd>
    2490:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <pLogEnd+0x1>
    2494:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <pLogStart>
    2498:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <pLogStart+0x1>
    249c:	82 17       	cp	r24, r18
    249e:	93 07       	cpc	r25, r19
    24a0:	48 f0       	brcs	.+18     	; 0x24b4 <log_count+0x28>
    24a2:	82 1b       	sub	r24, r18
    24a4:	93 0b       	sbc	r25, r19
    24a6:	95 95       	asr	r25
    24a8:	87 95       	ror	r24
    24aa:	9d ec       	ldi	r25, 0xCD	; 205
    24ac:	89 9f       	mul	r24, r25
    24ae:	80 2d       	mov	r24, r0
    24b0:	11 24       	eor	r1, r1
    24b2:	08 95       	ret
    24b4:	80 57       	subi	r24, 0x70	; 112
    24b6:	9e 4f       	sbci	r25, 0xFE	; 254
    24b8:	82 1b       	sub	r24, r18
    24ba:	93 0b       	sbc	r25, r19
    24bc:	95 95       	asr	r25
    24be:	87 95       	ror	r24
    24c0:	9d ec       	ldi	r25, 0xCD	; 205
    24c2:	89 9f       	mul	r24, r25
    24c4:	80 2d       	mov	r24, r0
    24c6:	11 24       	eor	r1, r1
    24c8:	08 95       	ret

000024ca <log_getLog>:
    24ca:	cf 93       	push	r28
    24cc:	c8 2f       	mov	r28, r24
    24ce:	de df       	rcall	.-68     	; 0x248c <log_count>
    24d0:	c8 17       	cp	r28, r24
    24d2:	f8 f4       	brcc	.+62     	; 0x2512 <log_getLog+0x48>
    24d4:	40 91 14 05 	lds	r20, 0x0514	; 0x800514 <pLogStart>
    24d8:	50 91 15 05 	lds	r21, 0x0515	; 0x800515 <pLogStart+0x1>
    24dc:	8c 2f       	mov	r24, r28
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 01       	movw	r18, r24
    24e2:	22 0f       	add	r18, r18
    24e4:	33 1f       	adc	r19, r19
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	28 0f       	add	r18, r24
    24f4:	39 1f       	adc	r19, r25
    24f6:	ca 01       	movw	r24, r20
    24f8:	82 0f       	add	r24, r18
    24fa:	93 1f       	adc	r25, r19
    24fc:	65 e0       	ldi	r22, 0x05	; 5
    24fe:	88 30       	cpi	r24, 0x08	; 8
    2500:	96 07       	cpc	r25, r22
    2502:	49 f0       	breq	.+18     	; 0x2516 <log_getLog+0x4c>
    2504:	40 f0       	brcs	.+16     	; 0x2516 <log_getLog+0x4c>
    2506:	20 59       	subi	r18, 0x90	; 144
    2508:	31 40       	sbci	r19, 0x01	; 1
    250a:	ca 01       	movw	r24, r20
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	02 c0       	rjmp	.+4      	; 0x2516 <log_getLog+0x4c>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <getErrorText>:
    251a:	d7 df       	rcall	.-82     	; 0x24ca <log_getLog>
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	f1 f1       	breq	.+124    	; 0x259c <getErrorText+0x82>
    2520:	fc 01       	movw	r30, r24
    2522:	36 81       	ldd	r19, Z+6	; 0x06
    2524:	67 81       	ldd	r22, Z+7	; 0x07
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	34 c0       	rjmp	.+104    	; 0x2592 <getErrorText+0x78>
    252a:	42 2f       	mov	r20, r18
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	fa 01       	movw	r30, r20
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	cf 01       	movw	r24, r30
    2536:	88 0f       	add	r24, r24
    2538:	99 1f       	adc	r25, r25
    253a:	88 0f       	add	r24, r24
    253c:	99 1f       	adc	r25, r25
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	e8 0f       	add	r30, r24
    2544:	f9 1f       	adc	r31, r25
    2546:	e6 59       	subi	r30, 0x96	; 150
    2548:	fe 4f       	sbci	r31, 0xFE	; 254
    254a:	84 91       	lpm	r24, Z
    254c:	38 13       	cpse	r19, r24
    254e:	20 c0       	rjmp	.+64     	; 0x2590 <getErrorText+0x76>
    2550:	fa 01       	movw	r30, r20
    2552:	ee 0f       	add	r30, r30
    2554:	ff 1f       	adc	r31, r31
    2556:	cf 01       	movw	r24, r30
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	88 0f       	add	r24, r24
    2562:	99 1f       	adc	r25, r25
    2564:	e8 0f       	add	r30, r24
    2566:	f9 1f       	adc	r31, r25
    2568:	e5 59       	subi	r30, 0x95	; 149
    256a:	fe 4f       	sbci	r31, 0xFE	; 254
    256c:	84 91       	lpm	r24, Z
    256e:	68 13       	cpse	r22, r24
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <getErrorText+0x76>
    2572:	44 0f       	add	r20, r20
    2574:	55 1f       	adc	r21, r21
    2576:	ca 01       	movw	r24, r20
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	88 0f       	add	r24, r24
    2582:	99 1f       	adc	r25, r25
    2584:	48 0f       	add	r20, r24
    2586:	59 1f       	adc	r21, r25
    2588:	ca 01       	movw	r24, r20
    258a:	84 59       	subi	r24, 0x94	; 148
    258c:	9e 4f       	sbci	r25, 0xFE	; 254
    258e:	08 95       	ret
    2590:	2f 5f       	subi	r18, 0xFF	; 255
    2592:	20 31       	cpi	r18, 0x10	; 16
    2594:	50 f2       	brcs	.-108    	; 0x252a <getErrorText+0x10>
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	08 95       	ret
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	08 95       	ret

000025a2 <logCheckUnreadErrorLogs>:
    25a2:	cf 93       	push	r28
    25a4:	73 df       	rcall	.-282    	; 0x248c <log_count>
    25a6:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <log_unreadErrors>
    25aa:	81 11       	cpse	r24, r1
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <logCheckUnreadErrorLogs+0x34>
    25ae:	17 c0       	rjmp	.+46     	; 0x25de <logCheckUnreadErrorLogs+0x3c>
    25b0:	8c 2f       	mov	r24, r28
    25b2:	8b df       	rcall	.-234    	; 0x24ca <log_getLog>
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	61 f0       	breq	.+24     	; 0x25d0 <logCheckUnreadErrorLogs+0x2e>
    25b8:	fc 01       	movw	r30, r24
    25ba:	24 81       	ldd	r18, Z+4	; 0x04
    25bc:	20 32       	cpi	r18, 0x20	; 32
    25be:	51 f0       	breq	.+20     	; 0x25d4 <logCheckUnreadErrorLogs+0x32>
    25c0:	95 81       	ldd	r25, Z+5	; 0x05
    25c2:	8c 2f       	mov	r24, r28
    25c4:	95 34       	cpi	r25, 0x45	; 69
    25c6:	39 f4       	brne	.+14     	; 0x25d6 <logCheckUnreadErrorLogs+0x34>
    25c8:	8f ef       	ldi	r24, 0xFF	; 255
    25ca:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <log_unreadErrors>
    25ce:	07 c0       	rjmp	.+14     	; 0x25de <logCheckUnreadErrorLogs+0x3c>
    25d0:	8c 2f       	mov	r24, r28
    25d2:	01 c0       	rjmp	.+2      	; 0x25d6 <logCheckUnreadErrorLogs+0x34>
    25d4:	8c 2f       	mov	r24, r28
    25d6:	cf ef       	ldi	r28, 0xFF	; 255
    25d8:	c8 0f       	add	r28, r24
    25da:	81 11       	cpse	r24, r1
    25dc:	e9 cf       	rjmp	.-46     	; 0x25b0 <logCheckUnreadErrorLogs+0xe>
    25de:	cf 91       	pop	r28
    25e0:	08 95       	ret

000025e2 <log_getShortTextFromPtr>:
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	09 f4       	brne	.+2      	; 0x25ee <log_getShortTextFromPtr+0xc>
    25ec:	7b c0       	rjmp	.+246    	; 0x26e4 <log_getShortTextFromPtr+0x102>
    25ee:	16 2f       	mov	r17, r22
    25f0:	ec 01       	movw	r28, r24
    25f2:	8b 81       	ldd	r24, Y+3	; 0x03
    25f4:	88 23       	and	r24, r24
    25f6:	79 f0       	breq	.+30     	; 0x2616 <log_getShortTextFromPtr+0x34>
    25f8:	6a e5       	ldi	r22, 0x5A	; 90
    25fa:	73 e0       	ldi	r23, 0x03	; 3
    25fc:	0e 94 90 32 	call	0x6520	; 0x6520 <putChar_Dec2>
    2600:	bc 01       	movw	r22, r24
    2602:	6f 5f       	subi	r22, 0xFF	; 255
    2604:	7f 4f       	sbci	r23, 0xFF	; 255
    2606:	28 e6       	ldi	r18, 0x68	; 104
    2608:	fc 01       	movw	r30, r24
    260a:	20 83       	st	Z, r18
    260c:	8a 81       	ldd	r24, Y+2	; 0x02
    260e:	0e 94 90 32 	call	0x6520	; 0x6520 <putChar_Dec2>
    2612:	dc 01       	movw	r26, r24
    2614:	2f c0       	rjmp	.+94     	; 0x2674 <log_getShortTextFromPtr+0x92>
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	88 23       	and	r24, r24
    261a:	79 f0       	breq	.+30     	; 0x263a <log_getShortTextFromPtr+0x58>
    261c:	6a e5       	ldi	r22, 0x5A	; 90
    261e:	73 e0       	ldi	r23, 0x03	; 3
    2620:	0e 94 90 32 	call	0x6520	; 0x6520 <putChar_Dec2>
    2624:	bc 01       	movw	r22, r24
    2626:	6f 5f       	subi	r22, 0xFF	; 255
    2628:	7f 4f       	sbci	r23, 0xFF	; 255
    262a:	2d e6       	ldi	r18, 0x6D	; 109
    262c:	fc 01       	movw	r30, r24
    262e:	20 83       	st	Z, r18
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	0e 94 90 32 	call	0x6520	; 0x6520 <putChar_Dec2>
    2636:	dc 01       	movw	r26, r24
    2638:	1d c0       	rjmp	.+58     	; 0x2674 <log_getShortTextFromPtr+0x92>
    263a:	6a e5       	ldi	r22, 0x5A	; 90
    263c:	73 e0       	ldi	r23, 0x03	; 3
    263e:	89 81       	ldd	r24, Y+1	; 0x01
    2640:	0e 94 90 32 	call	0x6520	; 0x6520 <putChar_Dec2>
    2644:	fc 01       	movw	r30, r24
    2646:	83 e7       	ldi	r24, 0x73	; 115
    2648:	80 83       	st	Z, r24
    264a:	98 81       	ld	r25, Y
    264c:	99 0f       	add	r25, r25
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <log_getShortTextFromPtr+0x74>
    2652:	99 51       	subi	r25, 0x19	; 25
    2654:	2f 5f       	subi	r18, 0xFF	; 255
    2656:	99 31       	cpi	r25, 0x19	; 25
    2658:	e0 f7       	brcc	.-8      	; 0x2652 <log_getShortTextFromPtr+0x70>
    265a:	20 5d       	subi	r18, 0xD0	; 208
    265c:	21 83       	std	Z+1, r18	; 0x01
    265e:	99 0f       	add	r25, r25
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <log_getShortTextFromPtr+0x86>
    2664:	95 50       	subi	r25, 0x05	; 5
    2666:	2f 5f       	subi	r18, 0xFF	; 255
    2668:	95 30       	cpi	r25, 0x05	; 5
    266a:	e0 f7       	brcc	.-8      	; 0x2664 <log_getShortTextFromPtr+0x82>
    266c:	df 01       	movw	r26, r30
    266e:	13 96       	adiw	r26, 0x03	; 3
    2670:	20 5d       	subi	r18, 0xD0	; 208
    2672:	22 83       	std	Z+2, r18	; 0x02
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	90 34       	cpi	r25, 0x40	; 64
    2678:	51 f0       	breq	.+20     	; 0x268e <log_getShortTextFromPtr+0xac>
    267a:	90 38       	cpi	r25, 0x80	; 128
    267c:	19 f0       	breq	.+6      	; 0x2684 <log_getShortTextFromPtr+0xa2>
    267e:	90 32       	cpi	r25, 0x20	; 32
    2680:	81 f4       	brne	.+32     	; 0x26a2 <log_getShortTextFromPtr+0xc0>
    2682:	0a c0       	rjmp	.+20     	; 0x2698 <log_getShortTextFromPtr+0xb6>
    2684:	fd 01       	movw	r30, r26
    2686:	31 96       	adiw	r30, 0x01	; 1
    2688:	8a e2       	ldi	r24, 0x2A	; 42
    268a:	8c 93       	st	X, r24
    268c:	0e c0       	rjmp	.+28     	; 0x26aa <log_getShortTextFromPtr+0xc8>
    268e:	fd 01       	movw	r30, r26
    2690:	31 96       	adiw	r30, 0x01	; 1
    2692:	85 ea       	ldi	r24, 0xA5	; 165
    2694:	8c 93       	st	X, r24
    2696:	09 c0       	rjmp	.+18     	; 0x26aa <log_getShortTextFromPtr+0xc8>
    2698:	fd 01       	movw	r30, r26
    269a:	31 96       	adiw	r30, 0x01	; 1
    269c:	80 e2       	ldi	r24, 0x20	; 32
    269e:	8c 93       	st	X, r24
    26a0:	04 c0       	rjmp	.+8      	; 0x26aa <log_getShortTextFromPtr+0xc8>
    26a2:	fd 01       	movw	r30, r26
    26a4:	31 96       	adiw	r30, 0x01	; 1
    26a6:	8f e3       	ldi	r24, 0x3F	; 63
    26a8:	8c 93       	st	X, r24
    26aa:	bf 01       	movw	r22, r30
    26ac:	6f 5f       	subi	r22, 0xFF	; 255
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	8d 81       	ldd	r24, Y+5	; 0x05
    26b2:	80 83       	st	Z, r24
    26b4:	8e 81       	ldd	r24, Y+6	; 0x06
    26b6:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    26ba:	bc 01       	movw	r22, r24
    26bc:	8f 81       	ldd	r24, Y+7	; 0x07
    26be:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    26c2:	bc 01       	movw	r22, r24
    26c4:	6f 5f       	subi	r22, 0xFF	; 255
    26c6:	7f 4f       	sbci	r23, 0xFF	; 255
    26c8:	2d e2       	ldi	r18, 0x2D	; 45
    26ca:	fc 01       	movw	r30, r24
    26cc:	20 83       	st	Z, r18
    26ce:	88 85       	ldd	r24, Y+8	; 0x08
    26d0:	99 85       	ldd	r25, Y+9	; 0x09
    26d2:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <putChar_long>
    26d6:	fc 01       	movw	r30, r24
    26d8:	10 82       	st	Z, r1
    26da:	1f 3f       	cpi	r17, 0xFF	; 255
    26dc:	41 f0       	breq	.+16     	; 0x26ee <log_getShortTextFromPtr+0x10c>
    26de:	1c 83       	std	Y+4, r17	; 0x04
    26e0:	60 df       	rcall	.-320    	; 0x25a2 <logCheckUnreadErrorLogs>
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <log_getShortTextFromPtr+0x10c>
    26e4:	ea e5       	ldi	r30, 0x5A	; 90
    26e6:	f3 e0       	ldi	r31, 0x03	; 3
    26e8:	8d e2       	ldi	r24, 0x2D	; 45
    26ea:	80 83       	st	Z, r24
    26ec:	11 82       	std	Z+1, r1	; 0x01
    26ee:	8a e5       	ldi	r24, 0x5A	; 90
    26f0:	93 e0       	ldi	r25, 0x03	; 3
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	08 95       	ret

000026fa <log_put>:
    26fa:	e0 91 12 05 	lds	r30, 0x0512	; 0x800512 <pLogEnd>
    26fe:	f0 91 13 05 	lds	r31, 0x0513	; 0x800513 <pLogEnd+0x1>
    2702:	a1 e4       	ldi	r26, 0x41	; 65
    2704:	b2 e0       	ldi	r27, 0x02	; 2
    2706:	9c 91       	ld	r25, X
    2708:	90 83       	st	Z, r25
    270a:	e0 91 12 05 	lds	r30, 0x0512	; 0x800512 <pLogEnd>
    270e:	f0 91 13 05 	lds	r31, 0x0513	; 0x800513 <pLogEnd+0x1>
    2712:	11 96       	adiw	r26, 0x01	; 1
    2714:	9c 91       	ld	r25, X
    2716:	11 97       	sbiw	r26, 0x01	; 1
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	e0 91 12 05 	lds	r30, 0x0512	; 0x800512 <pLogEnd>
    271e:	f0 91 13 05 	lds	r31, 0x0513	; 0x800513 <pLogEnd+0x1>
    2722:	12 96       	adiw	r26, 0x02	; 2
    2724:	9c 91       	ld	r25, X
    2726:	12 97       	sbiw	r26, 0x02	; 2
    2728:	92 83       	std	Z+2, r25	; 0x02
    272a:	13 96       	adiw	r26, 0x03	; 3
    272c:	9c 91       	ld	r25, X
    272e:	93 83       	std	Z+3, r25	; 0x03
    2730:	25 83       	std	Z+5, r18	; 0x05
    2732:	86 83       	std	Z+6, r24	; 0x06
    2734:	67 83       	std	Z+7, r22	; 0x07
    2736:	51 87       	std	Z+9, r21	; 0x09
    2738:	40 87       	std	Z+8, r20	; 0x08
    273a:	80 e8       	ldi	r24, 0x80	; 128
    273c:	84 83       	std	Z+4, r24	; 0x04
    273e:	80 91 dc 0b 	lds	r24, 0x0BDC	; 0x800bdc <serusb_Active>
    2742:	8f 3f       	cpi	r24, 0xFF	; 255
    2744:	81 f4       	brne	.+32     	; 0x2766 <log_put+0x6c>
    2746:	84 e6       	ldi	r24, 0x64	; 100
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    274e:	6f ef       	ldi	r22, 0xFF	; 255
    2750:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <pLogEnd>
    2754:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <pLogEnd+0x1>
    2758:	44 df       	rcall	.-376    	; 0x25e2 <log_getShortTextFromPtr>
    275a:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    275e:	80 e6       	ldi	r24, 0x60	; 96
    2760:	91 e1       	ldi	r25, 0x11	; 17
    2762:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    2766:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <pLogEnd>
    276a:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <pLogEnd+0x1>
    276e:	0a 96       	adiw	r24, 0x0a	; 10
    2770:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogEnd+0x1>
    2774:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogEnd>
    2778:	88 50       	subi	r24, 0x08	; 8
    277a:	95 40       	sbci	r25, 0x05	; 5
    277c:	39 f0       	breq	.+14     	; 0x278c <log_put+0x92>
    277e:	30 f0       	brcs	.+12     	; 0x278c <log_put+0x92>
    2780:	82 e8       	ldi	r24, 0x82	; 130
    2782:	93 e0       	ldi	r25, 0x03	; 3
    2784:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogEnd+0x1>
    2788:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogEnd>
    278c:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <pLogEnd>
    2790:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <pLogEnd+0x1>
    2794:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <pLogStart>
    2798:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <pLogStart+0x1>
    279c:	28 17       	cp	r18, r24
    279e:	39 07       	cpc	r19, r25
    27a0:	79 f4       	brne	.+30     	; 0x27c0 <log_put+0xc6>
    27a2:	0a 96       	adiw	r24, 0x0a	; 10
    27a4:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <pLogStart+0x1>
    27a8:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <pLogStart>
    27ac:	88 50       	subi	r24, 0x08	; 8
    27ae:	95 40       	sbci	r25, 0x05	; 5
    27b0:	39 f0       	breq	.+14     	; 0x27c0 <log_put+0xc6>
    27b2:	30 f0       	brcs	.+12     	; 0x27c0 <log_put+0xc6>
    27b4:	82 e8       	ldi	r24, 0x82	; 130
    27b6:	93 e0       	ldi	r25, 0x03	; 3
    27b8:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <pLogStart+0x1>
    27bc:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <pLogStart>
    27c0:	08 95       	ret

000027c2 <log_putError>:
    27c2:	25 e4       	ldi	r18, 0x45	; 69
    27c4:	9a df       	rcall	.-204    	; 0x26fa <log_put>
    27c6:	8f ef       	ldi	r24, 0xFF	; 255
    27c8:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <log_unreadErrors>
    27cc:	08 95       	ret

000027ce <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    27ce:	cf 93       	push	r28
    27d0:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    27d2:	7b de       	rcall	.-778    	; 0x24ca <log_getLog>
	if (pLogEntry != NULL){
    27d4:	00 97       	sbiw	r24, 0x00	; 0
    27d6:	19 f0       	breq	.+6      	; 0x27de <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    27d8:	6c 2f       	mov	r22, r28
    27da:	03 df       	rcall	.-506    	; 0x25e2 <log_getShortTextFromPtr>
    27dc:	06 c0       	rjmp	.+12     	; 0x27ea <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    27de:	ea e5       	ldi	r30, 0x5A	; 90
    27e0:	f3 e0       	ldi	r31, 0x03	; 3
    27e2:	8d e2       	ldi	r24, 0x2D	; 45
    27e4:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    27e6:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    27e8:	cf 01       	movw	r24, r30
	}
    27ea:	cf 91       	pop	r28
    27ec:	08 95       	ret

000027ee <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    27ee:	2d dd       	rcall	.-1446   	; 0x224a <init_iopins>
	init_log();
    27f0:	42 de       	rcall	.-892    	; 0x2476 <init_log>
    27f2:	0e 94 60 31 	call	0x62c0	; 0x62c0 <init_Serial0SerUSB>
	init_Serial0SerUSB();
    27f6:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <init_message>
	init_message();
	init_HwTimer();
    27fa:	c3 d8       	rcall	.-3706   	; 0x1982 <init_HwTimer>
	init_Timers();
    27fc:	aa d8       	rcall	.-3756   	; 0x1952 <init_Timers>
    27fe:	d0 d8       	rcall	.-3680   	; 0x19a0 <init_ADC>
	init_ADC();
    2800:	f9 d8       	rcall	.-3598   	; 0x19f4 <init_Pipe>
	init_Pipe();
    2802:	0e 94 4c 30 	call	0x6098	; 0x6098 <init_Serial1MIDI>
	init_Serial1MIDI();
    2806:	1e d9       	rcall	.-3524   	; 0x1a44 <init_PipeModules>
    2808:	0e 94 19 2c 	call	0x5832	; 0x5832 <init_Midi2Manual>
	init_PipeModules();
    280c:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <init_Manual2Midi>
	init_Midi2Manual();
    2810:	0e 94 0e 29 	call	0x521c	; 0x521c <init_Midi>
	init_Manual2Midi();
    2814:	0e 94 82 29 	call	0x5304	; 0x5304 <init_Registers>
	init_Midi();
	init_Registers();
    2818:	0e 94 e5 2c 	call	0x59ca	; 0x59ca <init_Manual2Module>
	init_Manual2Module();
    281c:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <init_SoftKeys>
	init_SoftKeys();
    2820:	4d d8       	rcall	.-3942   	; 0x18bc <eeprom_UpdateALL>
    2822:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <menu_TestModulePattern>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2826:	a5 dd       	rcall	.-1206   	; 0x2372 <lcd_init>
	INIT_MENU
    2828:	0e 94 2d 32 	call	0x645a	; 0x645a <lcd_initCG>


	// BOOT MESSAGE

	lcd_init ();
	lcd_initCG();
    282c:	f7 dd       	rcall	.-1042   	; 0x241c <lcd_clrscr>
	lcd_clrscr ();
    282e:	83 e4       	ldi	r24, 0x43	; 67
    2830:	f0 dd       	rcall	.-1056   	; 0x2412 <lcd_goto>
	lcd_goto(LCD_LINE1+3);
    2832:	85 ea       	ldi	r24, 0xA5	; 165
    2834:	92 e0       	ldi	r25, 0x02	; 2
	lcd_puts_P(prog_name);
    2836:	0f de       	rcall	.-994    	; 0x2456 <lcd_puts_P>
    2838:	8b e1       	ldi	r24, 0x1B	; 27
    283a:	eb dd       	rcall	.-1066   	; 0x2412 <lcd_goto>
	lcd_goto(LCD_LINE2+7);
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	91 e1       	ldi	r25, 0x11	; 17
    2840:	0a de       	rcall	.-1004   	; 0x2456 <lcd_puts_P>
	lcd_puts_P(sw_version);
    2842:	78 94       	sei
    2844:	2f ef       	ldi	r18, 0xFF	; 255
    2846:	87 e9       	ldi	r24, 0x97	; 151
    2848:	9a e3       	ldi	r25, 0x3A	; 58
	sei();
    284a:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    284c:	80 40       	sbci	r24, 0x00	; 0
    284e:	90 40       	sbci	r25, 0x00	; 0
    2850:	e1 f7       	brne	.-8      	; 0x284a <main+0x5c>
    2852:	00 c0       	rjmp	.+0      	; 0x2854 <main+0x66>
    2854:	00 00       	nop
    2856:	e2 dd       	rcall	.-1084   	; 0x241c <lcd_clrscr>
    2858:	46 da       	rcall	.-2932   	; 0x1ce6 <module_StartPowerOn>
	_delay_ms(1200);
	lcd_clrscr ();
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <msgPipe_Handling>

	// TURN ON POWER

	module_StartPowerOn();
    2860:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <menuNotActive>
	MESSAGE_PIPE_HANDLING_ON
    2864:	df ef       	ldi	r29, 0xFF	; 255
    2866:	0e 94 b0 28 	call	0x5160	; 0x5160 <message_status>

	menuNotActive = TRUE;
    286a:	88 23       	and	r24, r24
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    286c:	09 f4       	brne	.+2      	; 0x2870 <main+0x82>
    while (1)
    {
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    286e:	42 c0       	rjmp	.+132    	; 0x28f4 <main+0x106>
    2870:	0e 94 97 28 	call	0x512e	; 0x512e <message_get>
    2874:	c8 2f       	mov	r28, r24
    2876:	86 38       	cpi	r24, 0x86	; 134
			uint8_t keyMessage = message_get();
    2878:	61 f4       	brne	.+24     	; 0x2892 <main+0xa4>
    287a:	0e 94 19 30 	call	0x6032	; 0x6032 <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    287e:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <midi_AllManualsOff>
				// PANIC BUTTON
				midiSendAllNotesOff();
    2882:	0e 94 9c 2b 	call	0x5738	; 0x5738 <midi_resetRegisters>
				midi_AllManualsOff();
    2886:	0e 94 04 29 	call	0x5208	; 0x5208 <midi_CouplerReset>
				midi_resetRegisters();
    288a:	8a e8       	ldi	r24, 0x8A	; 138
    288c:	92 e0       	ldi	r25, 0x02	; 2
				midi_CouplerReset();
    288e:	0e 94 1e 26 	call	0x4c3c	; 0x4c3c <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2892:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <menuNotActive>
    2896:	8f 3f       	cpi	r24, 0xFF	; 255
    2898:	f1 f4       	brne	.+60     	; 0x28d6 <main+0xe8>
			}
			if (menuNotActive == TRUE) {
    289a:	8c 2f       	mov	r24, r28
    289c:	8f 73       	andi	r24, 0x3F	; 63
    289e:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    28a0:	61 f4       	brne	.+24     	; 0x28ba <main+0xcc>
    28a2:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    28a4:	70 e0       	ldi	r23, 0x00	; 0
    28a6:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	4e d6       	rcall	.+3228   	; 0x3548 <menu_Init>
    28ac:	0e 94 69 22 	call	0x44d2	; 0x44d2 <menu_InitLCD>
    28b0:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <menuNotActive>
					menu_InitLCD(); //display menu
    28b4:	80 e0       	ldi	r24, 0x00	; 0
					menuNotActive = FALSE; // notify that menu is displayed
    28b6:	6d da       	rcall	.-2854   	; 0x1d92 <softKey_WantLong>
    28b8:	1d c0       	rjmp	.+58     	; 0x28f4 <main+0x106>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    28ba:	9f ef       	ldi	r25, 0xFF	; 255
    28bc:	98 0f       	add	r25, r24
    28be:	94 30       	cpi	r25, 0x04	; 4
    28c0:	c8 f4       	brcc	.+50     	; 0x28f4 <main+0x106>
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    28c2:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <softKey_MessageKey_ToSoftKeyNr>
    28c6:	6c 2f       	mov	r22, r28
    28c8:	0e 94 f6 27 	call	0x4fec	; 0x4fec <softKey_Execute>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    28cc:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <menuNotActive>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    28d0:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <softKeys_toLCD>
    28d4:	0f c0       	rjmp	.+30     	; 0x28f4 <main+0x106>
    28d6:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <menu_TestModulePattern>
					softKeys_toLCD();
    28da:	81 11       	cpse	r24, r1
    28dc:	06 c0       	rjmp	.+12     	; 0x28ea <main+0xfc>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    28de:	8c 2f       	mov	r24, r28
    28e0:	0e 94 70 22 	call	0x44e0	; 0x44e0 <menu_ProcessMessage>
    28e4:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <menuNotActive>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <main+0x106>
    28ea:	8d ef       	ldi	r24, 0xFD	; 253
    28ec:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <menu_TestModuleBitCounter>
    28f0:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <menu_ModuleTestExecute>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    28f4:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <menuNotActive>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    28f8:	8f 3f       	cpi	r24, 0xFF	; 255
				}
			}
		}
		if (menuNotActive == TRUE) {
    28fa:	51 f4       	brne	.+20     	; 0x2910 <main+0x122>
    28fc:	df 3f       	cpi	r29, 0xFF	; 255
    28fe:	49 f4       	brne	.+18     	; 0x2912 <main+0x124>
    2900:	0e 94 b7 21 	call	0x436e	; 0x436e <menu_ClearAllDisp>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2904:	0e 94 a2 27 	call	0x4f44	; 0x4f44 <softKeys_toLCD>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2908:	8f ef       	ldi	r24, 0xFF	; 255
				softKeys_toLCD();
    290a:	43 da       	rcall	.-2938   	; 0x1d92 <softKey_WantLong>
    290c:	d0 e0       	ldi	r29, 0x00	; 0
				softKey_WantLong(TRUE);
    290e:	01 c0       	rjmp	.+2      	; 0x2912 <main+0x124>
    2910:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2912:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2916:	81 11       	cpse	r24, r1
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2918:	09 c0       	rjmp	.+18     	; 0x292c <main+0x13e>
    291a:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <lcd_cursorPos>
    291e:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <menu_deleteMessage>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2922:	8c 2f       	mov	r24, r28
				menu_deleteMessage();
    2924:	76 dd       	rcall	.-1300   	; 0x2412 <lcd_goto>
    2926:	8f ef       	ldi	r24, 0xFF	; 255
				lcd_goto(saveCursor);
    2928:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    292c:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2930:	81 11       	cpse	r24, r1
    2932:	0a c0       	rjmp	.+20     	; 0x2948 <main+0x15a>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2934:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <menu_TestModulePattern>
    2938:	88 23       	and	r24, r24
    293a:	19 f0       	breq	.+6      	; 0x2942 <main+0x154>
			if (menu_TestModulePattern != 0){
    293c:	0e 94 e9 24 	call	0x49d2	; 0x49d2 <menu_ModuleTestExecute>
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <main+0x15a>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2942:	8f ef       	ldi	r24, 0xFF	; 255
    2944:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2948:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
    294c:	81 11       	cpse	r24, r1
			}
		}

		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    294e:	1a c0       	rjmp	.+52     	; 0x2984 <main+0x196>
    2950:	da d9       	rcall	.-3148   	; 0x1d06 <module_PowerControl>
    2952:	0e 94 42 28 	call	0x5084	; 0x5084 <menu_showPowerState>
			module_PowerControl();
    2956:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <menuNotActive>
			menu_showPowerState();
			if (menuNotActive == TRUE) {
    295a:	8f 3f       	cpi	r24, 0xFF	; 255
    295c:	99 f4       	brne	.+38     	; 0x2984 <main+0x196>
    295e:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2962:	84 e1       	ldi	r24, 0x14	; 20
    2964:	56 dd       	rcall	.-1364   	; 0x2412 <lcd_goto>
				lcd_goto(LCD_LINE2);
    2966:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    296a:	81 30       	cpi	r24, 0x01	; 1
    296c:	21 f4       	brne	.+8      	; 0x2976 <main+0x188>
    296e:	83 e9       	ldi	r24, 0x93	; 147
    2970:	92 e0       	ldi	r25, 0x02	; 2
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2972:	71 dd       	rcall	.-1310   	; 0x2456 <lcd_puts_P>
    2974:	05 c0       	rjmp	.+10     	; 0x2980 <main+0x192>
    2976:	82 31       	cpi	r24, 0x12	; 18
    2978:	19 f4       	brne	.+6      	; 0x2980 <main+0x192>
    297a:	84 e1       	ldi	r24, 0x14	; 20
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    297c:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2980:	8c 2f       	mov	r24, r28
    2982:	47 dd       	rcall	.-1394   	; 0x2412 <lcd_goto>
				}
				lcd_goto(saveCursor);
    2984:	0e 94 31 30 	call	0x6062	; 0x6062 <midi_CheckTxActiveSense>
    2988:	0e 94 26 2e 	call	0x5c4c	; 0x5c4c <midi_CheckRxActiveSense>
			}
		}

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    298c:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense

		// ------------------------ TOP STATUS LINE --------------------------
		uint8_t oldcursor = lcd_cursorPos;
    2990:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
		if (midiLastInNote != MIDI_NOTE_NONE){
    2994:	8f 3f       	cpi	r24, 0xFF	; 255
    2996:	91 f1       	breq	.+100    	; 0x29fc <main+0x20e>
    2998:	80 e0       	ldi	r24, 0x00	; 0
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    299a:	3b dd       	rcall	.-1418   	; 0x2412 <lcd_goto>
    299c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
			if (midiLastInManual == MANUAL_NONE) {
    29a0:	8f 3f       	cpi	r24, 0xFF	; 255
    29a2:	69 f4       	brne	.+26     	; 0x29be <main+0x1d0>
    29a4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
				// there was no manual assigned to midi in note
				// cc?nnn
				lcd_ChannelOut(midiLastInChannel);
    29a8:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <lcd_ChannelOut>
    29ac:	8f e3       	ldi	r24, 0x3F	; 63
				lcd_putc('?');
    29ae:	3b dd       	rcall	.-1418   	; 0x2426 <lcd_putc>
    29b0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				lcd_noteOut(midiLastInNote);
    29b4:	0e 94 9b 33 	call	0x6736	; 0x6736 <lcd_noteOut>
				lcd_putc(' ');
    29b8:	80 e2       	ldi	r24, 0x20	; 32
    29ba:	35 dd       	rcall	.-1430   	; 0x2426 <lcd_putc>
    29bc:	0c c0       	rjmp	.+24     	; 0x29d6 <main+0x1e8>
    29be:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
			} else {
				// midi input to assigned manual
				// nnn>m
				lcd_noteOut(midiLastInNote);
    29c2:	0e 94 9b 33 	call	0x6736	; 0x6736 <lcd_noteOut>
    29c6:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    29c8:	2e dd       	rcall	.-1444   	; 0x2426 <lcd_putc>
    29ca:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
				lcd_ManualOutDec(midiLastInManual);
    29ce:	0e 94 fd 33 	call	0x67fa	; 0x67fa <lcd_ManualOutDec>
    29d2:	80 e2       	ldi	r24, 0x20	; 32
    29d4:	28 dd       	rcall	.-1456   	; 0x2426 <lcd_putc>
				lcd_putc(' ');
    29d6:	8c 2f       	mov	r24, r28
    29d8:	1c dd       	rcall	.-1480   	; 0x2412 <lcd_goto>
    29da:	8f ef       	ldi	r24, 0xFF	; 255
			}
			lcd_goto(oldcursor);
    29dc:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
			midiLastInNote = MIDI_NOTE_NONE;
    29e0:	9f b7       	in	r25, 0x3f	; 63
    29e2:	f8 94       	cli
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    29e4:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29e6:	06 c0       	rjmp	.+12     	; 0x29f4 <main+0x206>
    29e8:	ef e2       	ldi	r30, 0x2F	; 47
    29ea:	f2 e0       	ldi	r31, 0x02	; 2
    29ec:	82 e3       	ldi	r24, 0x32	; 50
    29ee:	80 87       	std	Z+8, r24	; 0x08
    29f0:	11 86       	std	Z+9, r1	; 0x09
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	81 11       	cpse	r24, r1
    29f6:	f8 cf       	rjmp	.-16     	; 0x29e8 <main+0x1fa>
    29f8:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    29fa:	2c c0       	rjmp	.+88     	; 0x2a54 <main+0x266>
    __asm__ volatile ("" ::: "memory");
    29fc:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2a00:	8f 3f       	cpi	r24, 0xFF	; 255
    2a02:	d9 f0       	breq	.+54     	; 0x2a3a <main+0x24c>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
			// no midi not but a program change
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2a06:	05 dd       	rcall	.-1526   	; 0x2412 <lcd_goto>
    2a08:	80 e7       	ldi	r24, 0x70	; 112
    2a0a:	0d dd       	rcall	.-1510   	; 0x2426 <lcd_putc>
			lcd_putc('p');
    2a0c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2a10:	0e 94 76 32 	call	0x64ec	; 0x64ec <lcd_dec2out>
			lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2a14:	8e e7       	ldi	r24, 0x7E	; 126
    2a16:	07 dd       	rcall	.-1522   	; 0x2426 <lcd_putc>
			lcd_putc(LCDCHAR_ARROW_RIGHT);
    2a18:	8f ef       	ldi	r24, 0xFF	; 255
    2a1a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2a1e:	9f b7       	in	r25, 0x3f	; 63
    2a20:	f8 94       	cli
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <main+0x244>
    2a26:	ef e2       	ldi	r30, 0x2F	; 47
    2a28:	f2 e0       	ldi	r31, 0x02	; 2
    2a2a:	82 e3       	ldi	r24, 0x32	; 50
    2a2c:	80 87       	std	Z+8, r24	; 0x08
    2a2e:	11 86       	std	Z+9, r1	; 0x09
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	81 11       	cpse	r24, r1
    2a34:	f8 cf       	rjmp	.-16     	; 0x2a26 <main+0x238>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a36:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2a38:	0d c0       	rjmp	.+26     	; 0x2a54 <main+0x266>
		} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2a3a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
    2a3e:	81 11       	cpse	r24, r1
			// timer for showing note has elapsed
			// removed or about every 2.5 second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2a40:	09 c0       	rjmp	.+18     	; 0x2a54 <main+0x266>
    2a42:	e7 dc       	rcall	.-1586   	; 0x2412 <lcd_goto>
			lcd_blank(6);
    2a44:	86 e0       	ldi	r24, 0x06	; 6
    2a46:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
			lcd_goto(oldcursor);
    2a4a:	8c 2f       	mov	r24, r28
    2a4c:	e2 dc       	rcall	.-1596   	; 0x2412 <lcd_goto>
    2a4e:	8f ef       	ldi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2a50:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
    2a54:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
    2a58:	8f 3f       	cpi	r24, 0xFF	; 255
    2a5a:	f9 f0       	breq	.+62     	; 0x2a9a <main+0x2ac>
    2a5c:	8f e0       	ldi	r24, 0x0F	; 15
			// there is a midi in note to be displayed in status
			// m>nnn
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2a5e:	d9 dc       	rcall	.-1614   	; 0x2412 <lcd_goto>
    2a60:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
			lcd_ManualOutDec(midiLastOutManual);
    2a64:	0e 94 fd 33 	call	0x67fa	; 0x67fa <lcd_ManualOutDec>
    2a68:	8e e7       	ldi	r24, 0x7E	; 126
    2a6a:	dd dc       	rcall	.-1606   	; 0x2426 <lcd_putc>
			lcd_putc(MENU_MIDI_IO_SIGN);
    2a6c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
			lcd_noteOut(midiLastOutNote);
    2a70:	0e 94 9b 33 	call	0x6736	; 0x6736 <lcd_noteOut>
    2a74:	8c 2f       	mov	r24, r28
    2a76:	cd dc       	rcall	.-1638   	; 0x2412 <lcd_goto>
			lcd_goto(oldcursor);
    2a78:	8f ef       	ldi	r24, 0xFF	; 255
    2a7a:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
			midiLastOutNote = MIDI_NOTE_NONE;
    2a7e:	9f b7       	in	r25, 0x3f	; 63
    2a80:	f8 94       	cli
    2a82:	81 e0       	ldi	r24, 0x01	; 1
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2a84:	06 c0       	rjmp	.+12     	; 0x2a92 <main+0x2a4>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a86:	ef e2       	ldi	r30, 0x2F	; 47
    2a88:	f2 e0       	ldi	r31, 0x02	; 2
    2a8a:	82 e3       	ldi	r24, 0x32	; 50
    2a8c:	82 87       	std	Z+10, r24	; 0x0a
    2a8e:	13 86       	std	Z+11, r1	; 0x0b
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	81 11       	cpse	r24, r1
    2a94:	f8 cf       	rjmp	.-16     	; 0x2a86 <main+0x298>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a96:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2a98:	38 c0       	rjmp	.+112    	; 0x2b0a <main+0x31c>
		} else if (midi_RegisterChanged != REGISTER_NONE) {
    2a9a:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <midi_RegisterChanged>
    2a9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2aa0:	31 f1       	breq	.+76     	; 0x2aee <main+0x300>
			// register change has top priority in display so it is processed later (!) and will overwrite previos note display
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2aa2:	8f e0       	ldi	r24, 0x0F	; 15
    2aa4:	b6 dc       	rcall	.-1684   	; 0x2412 <lcd_goto>
    2aa6:	82 e5       	ldi	r24, 0x52	; 82
			lcd_putc('R');
    2aa8:	be dc       	rcall	.-1668   	; 0x2426 <lcd_putc>
    2aaa:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <midi_RegisterChanged>
			lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2aae:	8f 77       	andi	r24, 0x7F	; 127
    2ab0:	0e 94 76 32 	call	0x64ec	; 0x64ec <lcd_dec2out>
    2ab4:	80 91 dc 08 	lds	r24, 0x08DC	; 0x8008dc <midi_RegisterChanged>
			lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCDCHAR_ARROW_DOWN : LCDCHAR_ARROW_UP); // MSB = register was set
    2ab8:	88 23       	and	r24, r24
    2aba:	14 f0       	brlt	.+4      	; 0x2ac0 <main+0x2d2>
    2abc:	89 e0       	ldi	r24, 0x09	; 9
    2abe:	01 c0       	rjmp	.+2      	; 0x2ac2 <main+0x2d4>
    2ac0:	88 e0       	ldi	r24, 0x08	; 8
    2ac2:	b1 dc       	rcall	.-1694   	; 0x2426 <lcd_putc>
    2ac4:	80 e2       	ldi	r24, 0x20	; 32
			lcd_putc(' ');
    2ac6:	af dc       	rcall	.-1698   	; 0x2426 <lcd_putc>
    2ac8:	8c 2f       	mov	r24, r28
    2aca:	a3 dc       	rcall	.-1722   	; 0x2412 <lcd_goto>
			lcd_goto(oldcursor);
    2acc:	8f ef       	ldi	r24, 0xFF	; 255
    2ace:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <midi_RegisterChanged>
			midi_RegisterChanged = REGISTER_NONE;
    2ad2:	9f b7       	in	r25, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2ad8:	06 c0       	rjmp	.+12     	; 0x2ae6 <main+0x2f8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ada:	ef e2       	ldi	r30, 0x2F	; 47
    2adc:	f2 e0       	ldi	r31, 0x02	; 2
    2ade:	82 e3       	ldi	r24, 0x32	; 50
    2ae0:	82 87       	std	Z+10, r24	; 0x0a
    2ae2:	13 86       	std	Z+11, r1	; 0x0b
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	81 11       	cpse	r24, r1
    2ae8:	f8 cf       	rjmp	.-16     	; 0x2ada <main+0x2ec>
    2aea:	9f bf       	out	0x3f, r25	; 63
    2aec:	0e c0       	rjmp	.+28     	; 0x2b0a <main+0x31c>
    2aee:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    2af2:	81 11       	cpse	r24, r1
		} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2af4:	0a c0       	rjmp	.+20     	; 0x2b0a <main+0x31c>
    2af6:	8f e0       	ldi	r24, 0x0F	; 15
    2af8:	8c dc       	rcall	.-1768   	; 0x2412 <lcd_goto>
    2afa:	85 e0       	ldi	r24, 0x05	; 5
			// timer for showing note has elapsed
			// removed V0.59: or about every second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2afc:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
    2b00:	8c 2f       	mov	r24, r28
			lcd_blank(5);
    2b02:	87 dc       	rcall	.-1778   	; 0x2412 <lcd_goto>
    2b04:	8f ef       	ldi	r24, 0xFF	; 255
    2b06:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
			lcd_goto(oldcursor);
    2b0a:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2b0e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b10:	09 f0       	breq	.+2      	; 0x2b14 <main+0x326>
    2b12:	7e c0       	rjmp	.+252    	; 0x2c10 <main+0x422>
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2b14:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2b18:	f0 90 58 03 	lds	r15, 0x0358	; 0x800358 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2b1c:	c0 91 28 0d 	lds	r28, 0x0D28	; 0x800d28 <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2b20:	cf 3f       	cpi	r28, 0xFF	; 255
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <main+0x33a>
			uint8_t oldBlink = lcd_cursorIsOn;
    2b24:	0e 94 39 34 	call	0x6872	; 0x6872 <lcd_cursoroff>
			if (oldBlink == TRUE) {
    2b28:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
				lcd_cursoroff();
    2b2c:	88 23       	and	r24, r24
			}
			char separator;
			if (*pTime == 0) {
    2b2e:	59 f0       	breq	.+22     	; 0x2b46 <main+0x358>
    2b30:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
    2b34:	80 fd       	sbrc	r24, 0
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2b36:	0e c0       	rjmp	.+28     	; 0x2b54 <main+0x366>
    2b38:	0f 2e       	mov	r0, r31
    2b3a:	fa e3       	ldi	r31, 0x3A	; 58
    2b3c:	ef 2e       	mov	r14, r31
				// when displaying hr:min blink ":"
				separator = ':';
    2b3e:	f0 2d       	mov	r31, r0
    2b40:	04 e4       	ldi	r16, 0x44	; 68
    2b42:	12 e0       	ldi	r17, 0x02	; 2

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2b44:	0c c0       	rjmp	.+24     	; 0x2b5e <main+0x370>
    2b46:	0f 2e       	mov	r0, r31
    2b48:	fa e3       	ldi	r31, 0x3A	; 58
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2b4a:	ef 2e       	mov	r14, r31
    2b4c:	f0 2d       	mov	r31, r0
    2b4e:	03 e4       	ldi	r16, 0x43	; 67
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2b50:	12 e0       	ldi	r17, 0x02	; 2
    2b52:	05 c0       	rjmp	.+10     	; 0x2b5e <main+0x370>
    2b54:	68 94       	set
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2b56:	ee 24       	eor	r14, r14
    2b58:	e5 f8       	bld	r14, 5
    2b5a:	04 e4       	ldi	r16, 0x44	; 68

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2b5c:	12 e0       	ldi	r17, 0x02	; 2
    2b5e:	87 e0       	ldi	r24, 0x07	; 7
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2b60:	58 dc       	rcall	.-1872   	; 0x2412 <lcd_goto>
    2b62:	f8 01       	movw	r30, r16
			lcd_dec2out(*(pTime--));
    2b64:	80 81       	ld	r24, Z
    2b66:	0e 94 76 32 	call	0x64ec	; 0x64ec <lcd_dec2out>
    2b6a:	8e 2d       	mov	r24, r14
			lcd_putc(separator);
    2b6c:	5c dc       	rcall	.-1864   	; 0x2426 <lcd_putc>
    2b6e:	f8 01       	movw	r30, r16
			lcd_dec2out(*pTime);
    2b70:	31 97       	sbiw	r30, 0x01	; 1
    2b72:	80 81       	ld	r24, Z
    2b74:	0e 94 76 32 	call	0x64ec	; 0x64ec <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2b78:	40 91 1f 0c 	lds	r20, 0x0C1F	; 0x800c1f <midiRxOvflCount>
			if (ovflCount > 0){
    2b7c:	44 23       	and	r20, r20
    2b7e:	31 f0       	breq	.+12     	; 0x2b8c <main+0x39e>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	83 e0       	ldi	r24, 0x03	; 3
    2b86:	1d de       	rcall	.-966    	; 0x27c2 <log_putError>
    2b88:	10 92 1f 0c 	sts	0x0C1F, r1	; 0x800c1f <midiRxOvflCount>
				midiRxOvflCount = 0;
    2b8c:	40 91 24 0d 	lds	r20, 0x0D24	; 0x800d24 <midiTxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2b90:	44 23       	and	r20, r20
			if (ovflCount > 0){
    2b92:	31 f0       	breq	.+12     	; 0x2ba0 <main+0x3b2>
    2b94:	50 e0       	ldi	r21, 0x00	; 0
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	83 e0       	ldi	r24, 0x03	; 3
    2b9a:	13 de       	rcall	.-986    	; 0x27c2 <log_putError>
    2b9c:	10 92 24 0d 	sts	0x0D24, r1	; 0x800d24 <midiTxOvflCount>
				midiTxOvflCount = 0;
    2ba0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2ba4:	84 ff       	sbrs	r24, 4
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <main+0x3be>
    2ba8:	80 e2       	ldi	r24, 0x20	; 32
    2baa:	01 c0       	rjmp	.+2      	; 0x2bae <main+0x3c0>
    2bac:	89 e0       	ldi	r24, 0x09	; 9
    2bae:	3b dc       	rcall	.-1930   	; 0x2426 <lcd_putc>
    2bb0:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <log_unreadErrors>
    2bb4:	8f 3f       	cpi	r24, 0xFF	; 255
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2bb6:	11 f4       	brne	.+4      	; 0x2bbc <main+0x3ce>
    2bb8:	85 e4       	ldi	r24, 0x45	; 69
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <main+0x3d0>
    2bbc:	80 e2       	ldi	r24, 0x20	; 32
    2bbe:	33 dc       	rcall	.-1946   	; 0x2426 <lcd_putc>
    2bc0:	8f 2d       	mov	r24, r15
    2bc2:	27 dc       	rcall	.-1970   	; 0x2412 <lcd_goto>
    2bc4:	cf 3f       	cpi	r28, 0xFF	; 255
    2bc6:	11 f4       	brne	.+4      	; 0x2bcc <main+0x3de>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    2bc8:	0e 94 32 34 	call	0x6864	; 0x6864 <lcd_cursosblink>
    2bcc:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			if (oldBlink == TRUE) {
    2bd0:	8f 3f       	cpi	r24, 0xFF	; 255
				lcd_cursosblink();
    2bd2:	69 f4       	brne	.+26     	; 0x2bee <main+0x400>
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    2bd4:	9f b7       	in	r25, 0x3f	; 63
    2bd6:	f8 94       	cli
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	06 c0       	rjmp	.+12     	; 0x2be8 <main+0x3fa>
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2bdc:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2bde:	f2 e0       	ldi	r31, 0x02	; 2
    2be0:	8d e7       	ldi	r24, 0x7D	; 125
    2be2:	80 87       	std	Z+8, r24	; 0x08
    2be4:	11 86       	std	Z+9, r1	; 0x09
    2be6:	80 e0       	ldi	r24, 0x00	; 0
    2be8:	81 11       	cpse	r24, r1
    2bea:	f8 cf       	rjmp	.-16     	; 0x2bdc <main+0x3ee>
    2bec:	9f bf       	out	0x3f, r25	; 63
    2bee:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bf4:	69 f4       	brne	.+26     	; 0x2c10 <main+0x422>
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    2bf6:	9f b7       	in	r25, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	06 c0       	rjmp	.+12     	; 0x2c0a <main+0x41c>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2bfe:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c00:	f2 e0       	ldi	r31, 0x02	; 2
    2c02:	8d e7       	ldi	r24, 0x7D	; 125
    2c04:	82 87       	std	Z+10, r24	; 0x0a
    2c06:	13 86       	std	Z+11, r1	; 0x0b
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	81 11       	cpse	r24, r1
    2c0c:	f8 cf       	rjmp	.-16     	; 0x2bfe <main+0x410>
    2c0e:	9f bf       	out	0x3f, r25	; 63
    2c10:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <msgPipeOverflow>
    2c14:	8f 3f       	cpi	r24, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2c16:	39 f4       	brne	.+14     	; 0x2c26 <main+0x438>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    2c18:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <msgPipeOverflow>
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    2c20:	60 e0       	ldi	r22, 0x00	; 0
    2c22:	84 e0       	ldi	r24, 0x04	; 4
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    2c24:	ce dd       	rcall	.-1124   	; 0x27c2 <log_putError>
    2c26:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <midiRxInIndex>
    2c2a:	80 91 23 0d 	lds	r24, 0x0D23	; 0x800d23 <midiRxOutIndex>
    2c2e:	98 17       	cp	r25, r24
		}

		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    2c30:	21 f0       	breq	.+8      	; 0x2c3a <main+0x44c>
    2c32:	0e 94 96 30 	call	0x612c	; 0x612c <serial1MIDIReadRx>
    2c36:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <midiIn_Process>
    2c3a:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <pipeMsgStatus>
			midiIn_Process(serial1MIDIReadRx());
    2c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <main+0x456>
    2c42:	11 ce       	rjmp	.-990    	; 0x2866 <main+0x78>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    2c44:	0e 94 e5 28 	call	0x51ca	; 0x51ca <pipeMsgGet>
    2c48:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <midiKeyPress_Process>
    2c4c:	0c ce       	rjmp	.-1000   	; 0x2866 <main+0x78>

00002c4e <menu_enterWriteModule>:
			midiKeyPress_Process(pipeMsgGet());
    2c4e:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <menuModVal>
    2c52:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <menuModVal+0x1>
    2c56:	10 92 5e 05 	sts	0x055E, r1	; 0x80055e <menuModVal+0x2>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    2c5a:	10 92 5f 05 	sts	0x055F, r1	; 0x80055f <menuModVal+0x3>
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	00 90 27 05 	lds	r0, 0x0527	; 0x800527 <menuVmodule>
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <menu_enterWriteModule+0x1e>
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	0a 94       	dec	r0
    2c6e:	e2 f7       	brpl	.-8      	; 0x2c68 <menu_enterWriteModule+0x1a>
    2c70:	48 2f       	mov	r20, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	e1 e4       	ldi	r30, 0x41	; 65
    2c76:	f3 e0       	ldi	r31, 0x03	; 3
    2c78:	22 c0       	rjmp	.+68     	; 0x2cbe <menu_enterWriteModule+0x70>
    2c7a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <menuModVal>
    2c7e:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <menuModVal+0x1>
    2c82:	a0 91 5e 05 	lds	r26, 0x055E	; 0x80055e <menuModVal+0x2>
    2c86:	b0 91 5f 05 	lds	r27, 0x055F	; 0x80055f <menuModVal+0x3>
    2c8a:	88 0f       	add	r24, r24
    2c8c:	99 1f       	adc	r25, r25
    2c8e:	aa 1f       	adc	r26, r26
    2c90:	bb 1f       	adc	r27, r27
    2c92:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <menuModVal>
    2c96:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <menuModVal+0x1>
    2c9a:	a0 93 5e 05 	sts	0x055E, r26	; 0x80055e <menuModVal+0x2>
    2c9e:	b0 93 5f 05 	sts	0x055F, r27	; 0x80055f <menuModVal+0x3>
    2ca2:	21 81       	ldd	r18, Z+1	; 0x01
    2ca4:	24 23       	and	r18, r20
    2ca6:	49 f0       	breq	.+18     	; 0x2cba <menu_enterWriteModule+0x6c>
    2ca8:	81 60       	ori	r24, 0x01	; 1
    2caa:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <menuModVal>
    2cae:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <menuModVal+0x1>
    2cb2:	a0 93 5e 05 	sts	0x055E, r26	; 0x80055e <menuModVal+0x2>
    2cb6:	b0 93 5f 05 	sts	0x055F, r27	; 0x80055f <menuModVal+0x3>
    2cba:	38 97       	sbiw	r30, 0x08	; 8
    2cbc:	3f 5f       	subi	r19, 0xFF	; 255
    2cbe:	30 32       	cpi	r19, 0x20	; 32
    2cc0:	e0 f2       	brcs	.-72     	; 0x2c7a <menu_enterWriteModule+0x2c>
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	08 95       	ret

00002cc6 <menu_exitWriteModule>:
    2cc6:	40 91 5c 05 	lds	r20, 0x055C	; 0x80055c <menuModVal>
    2cca:	50 91 5d 05 	lds	r21, 0x055D	; 0x80055d <menuModVal+0x1>
    2cce:	60 91 5e 05 	lds	r22, 0x055E	; 0x80055e <menuModVal+0x2>
    2cd2:	70 91 5f 05 	lds	r23, 0x055F	; 0x80055f <menuModVal+0x3>
    2cd6:	85 30       	cpi	r24, 0x05	; 5
    2cd8:	09 f5       	brne	.+66     	; 0x2d1c <menu_exitWriteModule+0x56>
    2cda:	a1 e0       	ldi	r26, 0x01	; 1
    2cdc:	b0 e0       	ldi	r27, 0x00	; 0
    2cde:	00 90 27 05 	lds	r0, 0x0527	; 0x800527 <menuVmodule>
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <menu_exitWriteModule+0x22>
    2ce4:	aa 0f       	add	r26, r26
    2ce6:	bb 1f       	adc	r27, r27
    2ce8:	0a 94       	dec	r0
    2cea:	e2 f7       	brpl	.-8      	; 0x2ce4 <menu_exitWriteModule+0x1e>
    2cec:	3a 2f       	mov	r19, r26
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	e1 e4       	ldi	r30, 0x41	; 65
    2cf2:	f3 e0       	ldi	r31, 0x03	; 3
    2cf4:	11 c0       	rjmp	.+34     	; 0x2d18 <menu_exitWriteModule+0x52>
    2cf6:	77 23       	and	r23, r23
    2cf8:	24 f4       	brge	.+8      	; 0x2d02 <menu_exitWriteModule+0x3c>
    2cfa:	81 81       	ldd	r24, Z+1	; 0x01
    2cfc:	83 2b       	or	r24, r19
    2cfe:	81 83       	std	Z+1, r24	; 0x01
    2d00:	05 c0       	rjmp	.+10     	; 0x2d0c <menu_exitWriteModule+0x46>
    2d02:	21 81       	ldd	r18, Z+1	; 0x01
    2d04:	8a 2f       	mov	r24, r26
    2d06:	80 95       	com	r24
    2d08:	82 23       	and	r24, r18
    2d0a:	81 83       	std	Z+1, r24	; 0x01
    2d0c:	44 0f       	add	r20, r20
    2d0e:	55 1f       	adc	r21, r21
    2d10:	66 1f       	adc	r22, r22
    2d12:	77 1f       	adc	r23, r23
    2d14:	38 97       	sbiw	r30, 0x08	; 8
    2d16:	9f 5f       	subi	r25, 0xFF	; 255
    2d18:	90 32       	cpi	r25, 0x20	; 32
    2d1a:	68 f3       	brcs	.-38     	; 0x2cf6 <menu_exitWriteModule+0x30>
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	08 95       	ret

00002d20 <menuOnEnterModSel>:
    2d20:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2d24:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2d28:	3e 96       	adiw	r30, 0x0e	; 14
    2d2a:	85 91       	lpm	r24, Z+
    2d2c:	95 91       	lpm	r25, Z+
    2d2e:	80 93 27 05 	sts	0x0527, r24	; 0x800527 <menuVmodule>
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	08 95       	ret

00002d36 <menuOnEnterMidiInCh>:
    2d36:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2d3a:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2d3e:	3e 96       	adiw	r30, 0x0e	; 14
    2d40:	85 91       	lpm	r24, Z+
    2d42:	95 91       	lpm	r25, Z+
    2d44:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <menuVmidiChan>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	08 95       	ret

00002d4c <menuOnEnterMidiInSec>:
    2d4c:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2d50:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2d54:	3e 96       	adiw	r30, 0x0e	; 14
    2d56:	25 91       	lpm	r18, Z+
    2d58:	35 91       	lpm	r19, Z+
    2d5a:	20 93 66 05 	sts	0x0566, r18	; 0x800566 <menuVsection>
    2d5e:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <menuVmidiChan>
    2d62:	8f 70       	andi	r24, 0x0F	; 15
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	23 70       	andi	r18, 0x03	; 3
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	88 0f       	add	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	82 0f       	add	r24, r18
    2d72:	91 1d       	adc	r25, r1
    2d74:	88 0f       	add	r24, r24
    2d76:	99 1f       	adc	r25, r25
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <DataAdressOffset+0x1>
    2d80:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <DataAdressOffset>
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	08 95       	ret

00002d88 <menuOnEnterModManual>:
    2d88:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2d8c:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2d90:	3e 96       	adiw	r30, 0x0e	; 14
    2d92:	85 91       	lpm	r24, Z+
    2d94:	95 91       	lpm	r25, Z+
    2d96:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <menuVmanual>
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	08 95       	ret

00002d9e <menuOnEnterModSec>:
    2d9e:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2da2:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2da6:	3e 96       	adiw	r30, 0x0e	; 14
    2da8:	85 91       	lpm	r24, Z+
    2daa:	95 91       	lpm	r25, Z+
    2dac:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <menuVsection>
    2db0:	20 91 26 05 	lds	r18, 0x0526	; 0x800526 <menuVmanual>
    2db4:	2f 70       	andi	r18, 0x0F	; 15
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	83 70       	andi	r24, 0x03	; 3
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a9 01       	movw	r20, r18
    2dbe:	44 0f       	add	r20, r20
    2dc0:	55 1f       	adc	r21, r21
    2dc2:	24 0f       	add	r18, r20
    2dc4:	35 1f       	adc	r19, r21
    2dc6:	22 0f       	add	r18, r18
    2dc8:	33 1f       	adc	r19, r19
    2dca:	22 0f       	add	r18, r18
    2dcc:	33 1f       	adc	r19, r19
    2dce:	ac 01       	movw	r20, r24
    2dd0:	44 0f       	add	r20, r20
    2dd2:	55 1f       	adc	r21, r21
    2dd4:	84 0f       	add	r24, r20
    2dd6:	95 1f       	adc	r25, r21
    2dd8:	82 0f       	add	r24, r18
    2dda:	93 1f       	adc	r25, r19
    2ddc:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <DataAdressOffset+0x1>
    2de0:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <DataAdressOffset>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	08 95       	ret

00002de8 <menuOnEnterModSecReg>:
    2de8:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2dec:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2df0:	3e 96       	adiw	r30, 0x0e	; 14
    2df2:	85 91       	lpm	r24, Z+
    2df4:	95 91       	lpm	r25, Z+
    2df6:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <menuVsection>
    2dfa:	87 70       	andi	r24, 0x07	; 7
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9c 01       	movw	r18, r24
    2e00:	22 0f       	add	r18, r18
    2e02:	33 1f       	adc	r19, r19
    2e04:	82 0f       	add	r24, r18
    2e06:	93 1f       	adc	r25, r19
    2e08:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <DataAdressOffset+0x1>
    2e0c:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <DataAdressOffset>
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	08 95       	ret

00002e14 <menuOnEnterKey>:
    2e14:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2e18:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2e1c:	3e 96       	adiw	r30, 0x0e	; 14
    2e1e:	85 91       	lpm	r24, Z+
    2e20:	95 91       	lpm	r25, Z+
    2e22:	84 30       	cpi	r24, 0x04	; 4
    2e24:	60 f4       	brcc	.+24     	; 0x2e3e <menuOnEnterKey+0x2a>
    2e26:	fc 01       	movw	r30, r24
    2e28:	ff 27       	eor	r31, r31
    2e2a:	ee 0f       	add	r30, r30
    2e2c:	ff 1f       	adc	r31, r31
    2e2e:	e7 59       	subi	r30, 0x97	; 151
    2e30:	fa 4f       	sbci	r31, 0xFA	; 250
    2e32:	80 81       	ld	r24, Z
    2e34:	91 81       	ldd	r25, Z+1	; 0x01
    2e36:	90 93 7d 05 	sts	0x057D, r25	; 0x80057d <menuVMenuSoftKey+0x1>
    2e3a:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <menuVMenuSoftKey>
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	08 95       	ret

00002e42 <menuOnExitMidiThrough>:
    2e42:	0e 94 ca 0b 	call	0x1794	; 0x1794 <eeprom_UpdateMidiThrough>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	08 95       	ret

00002e4a <menuOnExitRegisterEdit>:
    2e4a:	1f 93       	push	r17
    2e4c:	cf 93       	push	r28
    2e4e:	df 93       	push	r29
    2e50:	86 30       	cpi	r24, 0x06	; 6
    2e52:	f1 f0       	breq	.+60     	; 0x2e90 <menuOnExitRegisterEdit+0x46>
    2e54:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2e58:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2e5c:	3e 96       	adiw	r30, 0x0e	; 14
    2e5e:	05 90       	lpm	r0, Z+
    2e60:	f4 91       	lpm	r31, Z
    2e62:	e0 2d       	mov	r30, r0
    2e64:	cf 01       	movw	r24, r30
    2e66:	8c 51       	subi	r24, 0x1C	; 28
    2e68:	95 40       	sbci	r25, 0x05	; 5
    2e6a:	88 0f       	add	r24, r24
    2e6c:	88 0f       	add	r24, r24
    2e6e:	88 0f       	add	r24, r24
    2e70:	d0 81       	ld	r29, Z
    2e72:	c0 e0       	ldi	r28, 0x00	; 0
    2e74:	0b c0       	rjmp	.+22     	; 0x2e8c <menuOnExitRegisterEdit+0x42>
    2e76:	11 e0       	ldi	r17, 0x01	; 1
    2e78:	18 0f       	add	r17, r24
    2e7a:	6d 2f       	mov	r22, r29
    2e7c:	66 1f       	adc	r22, r22
    2e7e:	66 27       	eor	r22, r22
    2e80:	66 1f       	adc	r22, r22
    2e82:	0e 94 cf 2a 	call	0x559e	; 0x559e <register_onOff>
    2e86:	dd 0f       	add	r29, r29
    2e88:	cf 5f       	subi	r28, 0xFF	; 255
    2e8a:	81 2f       	mov	r24, r17
    2e8c:	c8 30       	cpi	r28, 0x08	; 8
    2e8e:	98 f3       	brcs	.-26     	; 0x2e76 <menuOnExitRegisterEdit+0x2c>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	1f 91       	pop	r17
    2e98:	08 95       	ret

00002e9a <softKeyRegOff>:
    2e9a:	81 11       	cpse	r24, r1
    2e9c:	0e 94 9c 2b 	call	0x5738	; 0x5738 <midi_resetRegisters>
    2ea0:	80 e0       	ldi	r24, 0x00	; 0
    2ea2:	08 95       	ret

00002ea4 <menuOnExitCoupler>:
    2ea4:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2ea8:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2eac:	3e 96       	adiw	r30, 0x0e	; 14
    2eae:	85 91       	lpm	r24, Z+
    2eb0:	95 91       	lpm	r25, Z+
    2eb2:	8e 5b       	subi	r24, 0xBE	; 190
    2eb4:	97 40       	sbci	r25, 0x07	; 7
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	ff 27       	eor	r31, r31
    2eba:	e2 54       	subi	r30, 0x42	; 66
    2ebc:	f8 4f       	sbci	r31, 0xF8	; 248
    2ebe:	20 81       	ld	r18, Z
    2ec0:	21 11       	cpse	r18, r1
    2ec2:	0e 94 10 29 	call	0x5220	; 0x5220 <set_Coupler>
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	08 95       	ret

00002eca <menuOnExitSaveProgram>:
    2eca:	86 30       	cpi	r24, 0x06	; 6
    2ecc:	39 f0       	breq	.+14     	; 0x2edc <menuOnExitSaveProgram+0x12>
    2ece:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <menuVKombination>
    2ed2:	80 34       	cpi	r24, 0x40	; 64
    2ed4:	18 f4       	brcc	.+6      	; 0x2edc <menuOnExitSaveProgram+0x12>
    2ed6:	6f ef       	ldi	r22, 0xFF	; 255
    2ed8:	0e 94 a9 2b 	call	0x5752	; 0x5752 <register_toProgram>
    2edc:	80 e0       	ldi	r24, 0x00	; 0
    2ede:	08 95       	ret

00002ee0 <menuOnExitKeys>:
    2ee0:	0e 94 3c 0c 	call	0x1878	; 0x1878 <eeprom_UpdateSoftkeys>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	08 95       	ret

00002ee8 <menu_readModule>:
    2ee8:	cf 92       	push	r12
    2eea:	df 92       	push	r13
    2eec:	ef 92       	push	r14
    2eee:	ff 92       	push	r15
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	00 90 27 05 	lds	r0, 0x0527	; 0x800527 <menuVmodule>
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <menu_readModule+0x16>
    2efa:	88 0f       	add	r24, r24
    2efc:	99 1f       	adc	r25, r25
    2efe:	0a 94       	dec	r0
    2f00:	e2 f7       	brpl	.-8      	; 0x2efa <menu_readModule+0x12>
    2f02:	28 2f       	mov	r18, r24
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	e1 e4       	ldi	r30, 0x41	; 65
    2f08:	f3 e0       	ldi	r31, 0x03	; 3
    2f0a:	c1 2c       	mov	r12, r1
    2f0c:	d1 2c       	mov	r13, r1
    2f0e:	76 01       	movw	r14, r12
    2f10:	0b c0       	rjmp	.+22     	; 0x2f28 <menu_readModule+0x40>
    2f12:	cc 0c       	add	r12, r12
    2f14:	dd 1c       	adc	r13, r13
    2f16:	ee 1c       	adc	r14, r14
    2f18:	ff 1c       	adc	r15, r15
    2f1a:	86 81       	ldd	r24, Z+6	; 0x06
    2f1c:	82 23       	and	r24, r18
    2f1e:	11 f0       	breq	.+4      	; 0x2f24 <menu_readModule+0x3c>
    2f20:	68 94       	set
    2f22:	c0 f8       	bld	r12, 0
    2f24:	38 97       	sbiw	r30, 0x08	; 8
    2f26:	9f 5f       	subi	r25, 0xFF	; 255
    2f28:	90 32       	cpi	r25, 0x20	; 32
    2f2a:	98 f3       	brcs	.-26     	; 0x2f12 <menu_readModule+0x2a>
    2f2c:	8e e1       	ldi	r24, 0x1E	; 30
    2f2e:	71 da       	rcall	.-2846   	; 0x2412 <lcd_goto>
    2f30:	c0 92 2a 0d 	sts	0x0D2A, r12	; 0x800d2a <editLong>
    2f34:	d0 92 2b 0d 	sts	0x0D2B, r13	; 0x800d2b <editLong+0x1>
    2f38:	e0 92 2c 0d 	sts	0x0D2C, r14	; 0x800d2c <editLong+0x2>
    2f3c:	f0 92 2d 0d 	sts	0x0D2D, r15	; 0x800d2d <editLong+0x3>
    2f40:	0e 94 51 32 	call	0x64a2	; 0x64a2 <lcd_longout>
    2f44:	80 e0       	ldi	r24, 0x00	; 0
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	df 90       	pop	r13
    2f4c:	cf 90       	pop	r12
    2f4e:	08 95       	ret

00002f50 <menu_testModule>:
    2f50:	8e e1       	ldi	r24, 0x1E	; 30
    2f52:	5f da       	rcall	.-2882   	; 0x2412 <lcd_goto>
    2f54:	80 91 27 05 	lds	r24, 0x0527	; 0x800527 <menuVmodule>
    2f58:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <test_PipeModule>
    2f5c:	60 93 2a 0d 	sts	0x0D2A, r22	; 0x800d2a <editLong>
    2f60:	70 93 2b 0d 	sts	0x0D2B, r23	; 0x800d2b <editLong+0x1>
    2f64:	80 93 2c 0d 	sts	0x0D2C, r24	; 0x800d2c <editLong+0x2>
    2f68:	90 93 2d 0d 	sts	0x0D2D, r25	; 0x800d2d <editLong+0x3>
    2f6c:	0e 94 51 32 	call	0x64a2	; 0x64a2 <lcd_longout>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	08 95       	ret

00002f74 <menuOnEnterTune>:
    2f74:	cf 93       	push	r28
    2f76:	8f 3f       	cpi	r24, 0xFF	; 255
    2f78:	09 f0       	breq	.+2      	; 0x2f7c <menuOnEnterTune+0x8>
    2f7a:	77 c0       	rjmp	.+238    	; 0x306a <menuOnEnterTune+0xf6>
    2f7c:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.2881>
    2f80:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.2882>
    2f84:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    2f88:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    2f8c:	3e 96       	adiw	r30, 0x0e	; 14
    2f8e:	85 91       	lpm	r24, Z+
    2f90:	95 91       	lpm	r25, Z+
    2f92:	80 93 26 05 	sts	0x0526, r24	; 0x800526 <menuVmanual>
    2f96:	84 30       	cpi	r24, 0x04	; 4
    2f98:	10 f0       	brcs	.+4      	; 0x2f9e <menuOnEnterTune+0x2a>
    2f9a:	10 92 26 05 	sts	0x0526, r1	; 0x800526 <menuVmanual>
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	39 c0       	rjmp	.+114    	; 0x3014 <menuOnEnterTune+0xa0>
    2fa2:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	e2 2f       	mov	r30, r18
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	df 01       	movw	r26, r30
    2fae:	aa 0f       	add	r26, r26
    2fb0:	bb 1f       	adc	r27, r27
    2fb2:	ad 01       	movw	r20, r26
    2fb4:	4e 0f       	add	r20, r30
    2fb6:	5f 1f       	adc	r21, r31
    2fb8:	dc 01       	movw	r26, r24
    2fba:	aa 0f       	add	r26, r26
    2fbc:	bb 1f       	adc	r27, r27
    2fbe:	a8 0f       	add	r26, r24
    2fc0:	b9 1f       	adc	r27, r25
    2fc2:	aa 0f       	add	r26, r26
    2fc4:	bb 1f       	adc	r27, r27
    2fc6:	aa 0f       	add	r26, r26
    2fc8:	bb 1f       	adc	r27, r27
    2fca:	a4 0f       	add	r26, r20
    2fcc:	b5 1f       	adc	r27, r21
    2fce:	a3 52       	subi	r26, 0x23	; 35
    2fd0:	b7 4f       	sbci	r27, 0xF7	; 247
    2fd2:	3c 91       	ld	r19, X
    2fd4:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.2881>
    2fd8:	34 17       	cp	r19, r20
    2fda:	10 f4       	brcc	.+4      	; 0x2fe0 <menuOnEnterTune+0x6c>
    2fdc:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.2881>
    2fe0:	af 01       	movw	r20, r30
    2fe2:	44 0f       	add	r20, r20
    2fe4:	55 1f       	adc	r21, r21
    2fe6:	e4 0f       	add	r30, r20
    2fe8:	f5 1f       	adc	r31, r21
    2fea:	ac 01       	movw	r20, r24
    2fec:	44 0f       	add	r20, r20
    2fee:	55 1f       	adc	r21, r21
    2ff0:	84 0f       	add	r24, r20
    2ff2:	95 1f       	adc	r25, r21
    2ff4:	88 0f       	add	r24, r24
    2ff6:	99 1f       	adc	r25, r25
    2ff8:	88 0f       	add	r24, r24
    2ffa:	99 1f       	adc	r25, r25
    2ffc:	e8 0f       	add	r30, r24
    2ffe:	f9 1f       	adc	r31, r25
    3000:	e3 52       	subi	r30, 0x23	; 35
    3002:	f7 4f       	sbci	r31, 0xF7	; 247
    3004:	81 81       	ldd	r24, Z+1	; 0x01
    3006:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.2882>
    300a:	98 17       	cp	r25, r24
    300c:	10 f4       	brcc	.+4      	; 0x3012 <menuOnEnterTune+0x9e>
    300e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.2882>
    3012:	2f 5f       	subi	r18, 0xFF	; 255
    3014:	24 30       	cpi	r18, 0x04	; 4
    3016:	28 f2       	brcs	.-118    	; 0x2fa2 <menuOnEnterTune+0x2e>
    3018:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2881>
    301c:	88 23       	and	r24, r24
    301e:	4c f4       	brge	.+18     	; 0x3032 <menuOnEnterTune+0xbe>
    3020:	8e e1       	ldi	r24, 0x1E	; 30
    3022:	f7 d9       	rcall	.-3090   	; 0x2412 <lcd_goto>
    3024:	8e e4       	ldi	r24, 0x4E	; 78
    3026:	93 e0       	ldi	r25, 0x03	; 3
    3028:	16 da       	rcall	.-3028   	; 0x2456 <lcd_puts_P>
    302a:	8f ef       	ldi	r24, 0xFF	; 255
    302c:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <menuNote>
    3030:	04 c0       	rjmp	.+8      	; 0x303a <menuOnEnterTune+0xc6>
    3032:	80 93 4e 05 	sts	0x054E, r24	; 0x80054e <menuNote>
    3036:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2883>
    303a:	68 e2       	ldi	r22, 0x28	; 40
    303c:	71 e1       	ldi	r23, 0x11	; 17
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    3044:	67 e3       	ldi	r22, 0x37	; 55
    3046:	71 e1       	ldi	r23, 0x11	; 17
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    304e:	6c e3       	ldi	r22, 0x3C	; 60
    3050:	71 e1       	ldi	r23, 0x11	; 17
    3052:	82 e0       	ldi	r24, 0x02	; 2
    3054:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    3058:	6e e3       	ldi	r22, 0x3E	; 62
    305a:	71 e1       	ldi	r23, 0x11	; 17
    305c:	83 e0       	ldi	r24, 0x03	; 3
    305e:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    3062:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
    3066:	cf ef       	ldi	r28, 0xFF	; 255
    3068:	71 c0       	rjmp	.+226    	; 0x314c <menuOnEnterTune+0x1d8>
    306a:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <menuNote>
    306e:	6f 3f       	cpi	r22, 0xFF	; 255
    3070:	09 f4       	brne	.+2      	; 0x3074 <menuOnEnterTune+0x100>
    3072:	61 c0       	rjmp	.+194    	; 0x3136 <menuOnEnterTune+0x1c2>
    3074:	81 30       	cpi	r24, 0x01	; 1
    3076:	d9 f4       	brne	.+54     	; 0x30ae <menuOnEnterTune+0x13a>
    3078:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.2882>
    307c:	68 17       	cp	r22, r24
    307e:	08 f0       	brcs	.+2      	; 0x3082 <menuOnEnterTune+0x10e>
    3080:	5c c0       	rjmp	.+184    	; 0x313a <menuOnEnterTune+0x1c6>
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    3088:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <manual_NoteOnOff>
    308c:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <menuNote>
    3090:	6f 5f       	subi	r22, 0xFF	; 255
    3092:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <menuNote>
    3096:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2883>
    309a:	81 30       	cpi	r24, 0x01	; 1
    309c:	09 f0       	breq	.+2      	; 0x30a0 <menuOnEnterTune+0x12c>
    309e:	4f c0       	rjmp	.+158    	; 0x313e <menuOnEnterTune+0x1ca>
    30a0:	41 e0       	ldi	r20, 0x01	; 1
    30a2:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    30a6:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <manual_NoteOnOff>
    30aa:	cf ef       	ldi	r28, 0xFF	; 255
    30ac:	4f c0       	rjmp	.+158    	; 0x314c <menuOnEnterTune+0x1d8>
    30ae:	84 30       	cpi	r24, 0x04	; 4
    30b0:	d1 f4       	brne	.+52     	; 0x30e6 <menuOnEnterTune+0x172>
    30b2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2881>
    30b6:	86 17       	cp	r24, r22
    30b8:	08 f0       	brcs	.+2      	; 0x30bc <menuOnEnterTune+0x148>
    30ba:	43 c0       	rjmp	.+134    	; 0x3142 <menuOnEnterTune+0x1ce>
    30bc:	40 e0       	ldi	r20, 0x00	; 0
    30be:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    30c2:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <manual_NoteOnOff>
    30c6:	60 91 4e 05 	lds	r22, 0x054E	; 0x80054e <menuNote>
    30ca:	61 50       	subi	r22, 0x01	; 1
    30cc:	60 93 4e 05 	sts	0x054E, r22	; 0x80054e <menuNote>
    30d0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2883>
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	b9 f5       	brne	.+110    	; 0x3146 <menuOnEnterTune+0x1d2>
    30d8:	41 e0       	ldi	r20, 0x01	; 1
    30da:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    30de:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <manual_NoteOnOff>
    30e2:	cf ef       	ldi	r28, 0xFF	; 255
    30e4:	33 c0       	rjmp	.+102    	; 0x314c <menuOnEnterTune+0x1d8>
    30e6:	83 30       	cpi	r24, 0x03	; 3
    30e8:	91 f4       	brne	.+36     	; 0x310e <menuOnEnterTune+0x19a>
    30ea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2883>
    30ee:	81 11       	cpse	r24, r1
    30f0:	04 c0       	rjmp	.+8      	; 0x30fa <menuOnEnterTune+0x186>
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.2883>
    30f8:	02 c0       	rjmp	.+4      	; 0x30fe <menuOnEnterTune+0x18a>
    30fa:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2883>
    30fe:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.2883>
    3102:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    3106:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <manual_NoteOnOff>
    310a:	cf ef       	ldi	r28, 0xFF	; 255
    310c:	1f c0       	rjmp	.+62     	; 0x314c <menuOnEnterTune+0x1d8>
    310e:	82 30       	cpi	r24, 0x02	; 2
    3110:	11 f0       	breq	.+4      	; 0x3116 <menuOnEnterTune+0x1a2>
    3112:	86 30       	cpi	r24, 0x06	; 6
    3114:	39 f4       	brne	.+14     	; 0x3124 <menuOnEnterTune+0x1b0>
    3116:	40 e0       	ldi	r20, 0x00	; 0
    3118:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    311c:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <manual_NoteOnOff>
    3120:	c0 e0       	ldi	r28, 0x00	; 0
    3122:	14 c0       	rjmp	.+40     	; 0x314c <menuOnEnterTune+0x1d8>
    3124:	85 30       	cpi	r24, 0x05	; 5
    3126:	89 f4       	brne	.+34     	; 0x314a <menuOnEnterTune+0x1d6>
    3128:	40 e0       	ldi	r20, 0x00	; 0
    312a:	80 91 26 05 	lds	r24, 0x0526	; 0x800526 <menuVmanual>
    312e:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <manual_NoteOnOff>
    3132:	c0 e0       	ldi	r28, 0x00	; 0
    3134:	0b c0       	rjmp	.+22     	; 0x314c <menuOnEnterTune+0x1d8>
    3136:	c0 e0       	ldi	r28, 0x00	; 0
    3138:	09 c0       	rjmp	.+18     	; 0x314c <menuOnEnterTune+0x1d8>
    313a:	cf ef       	ldi	r28, 0xFF	; 255
    313c:	07 c0       	rjmp	.+14     	; 0x314c <menuOnEnterTune+0x1d8>
    313e:	cf ef       	ldi	r28, 0xFF	; 255
    3140:	05 c0       	rjmp	.+10     	; 0x314c <menuOnEnterTune+0x1d8>
    3142:	cf ef       	ldi	r28, 0xFF	; 255
    3144:	03 c0       	rjmp	.+6      	; 0x314c <menuOnEnterTune+0x1d8>
    3146:	cf ef       	ldi	r28, 0xFF	; 255
    3148:	01 c0       	rjmp	.+2      	; 0x314c <menuOnEnterTune+0x1d8>
    314a:	cf ef       	ldi	r28, 0xFF	; 255
    314c:	cf 3f       	cpi	r28, 0xFF	; 255
    314e:	59 f5       	brne	.+86     	; 0x31a6 <menuOnEnterTune+0x232>
    3150:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <menuNote>
    3154:	8f 3f       	cpi	r24, 0xFF	; 255
    3156:	29 f1       	breq	.+74     	; 0x31a2 <menuOnEnterTune+0x22e>
    3158:	8e e1       	ldi	r24, 0x1E	; 30
    315a:	5b d9       	rcall	.-3402   	; 0x2412 <lcd_goto>
    315c:	80 91 4e 05 	lds	r24, 0x054E	; 0x80054e <menuNote>
    3160:	0e 94 9b 33 	call	0x6736	; 0x6736 <lcd_noteOut>
    3164:	80 e2       	ldi	r24, 0x20	; 32
    3166:	5f d9       	rcall	.-3394   	; 0x2426 <lcd_putc>
    3168:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2883>
    316c:	81 11       	cpse	r24, r1
    316e:	07 c0       	rjmp	.+14     	; 0x317e <menuOnEnterTune+0x20a>
    3170:	81 e6       	ldi	r24, 0x61	; 97
    3172:	59 d9       	rcall	.-3406   	; 0x2426 <lcd_putc>
    3174:	85 e7       	ldi	r24, 0x75	; 117
    3176:	57 d9       	rcall	.-3410   	; 0x2426 <lcd_putc>
    3178:	83 e7       	ldi	r24, 0x73	; 115
    317a:	55 d9       	rcall	.-3414   	; 0x2426 <lcd_putc>
    317c:	06 c0       	rjmp	.+12     	; 0x318a <menuOnEnterTune+0x216>
    317e:	85 e6       	ldi	r24, 0x65	; 101
    3180:	52 d9       	rcall	.-3420   	; 0x2426 <lcd_putc>
    3182:	89 e6       	ldi	r24, 0x69	; 105
    3184:	50 d9       	rcall	.-3424   	; 0x2426 <lcd_putc>
    3186:	8e e6       	ldi	r24, 0x6E	; 110
    3188:	4e d9       	rcall	.-3428   	; 0x2426 <lcd_putc>
    318a:	61 e0       	ldi	r22, 0x01	; 1
    318c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2883>
    3190:	81 11       	cpse	r24, r1
    3192:	01 c0       	rjmp	.+2      	; 0x3196 <menuOnEnterTune+0x222>
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	0e 94 c9 34 	call	0x6992	; 0x6992 <keylabel_statcheck>
    319c:	81 11       	cpse	r24, r1
    319e:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
    31a2:	8e e1       	ldi	r24, 0x1E	; 30
    31a4:	36 d9       	rcall	.-3476   	; 0x2412 <lcd_goto>
    31a6:	8c 2f       	mov	r24, r28
    31a8:	cf 91       	pop	r28
    31aa:	08 95       	ret

000031ac <menuOnExitMidiActiveSense>:
    31ac:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <eeprom_UpdateMidiOutMap>
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	08 95       	ret

000031b4 <menuOnExitMidiOut>:
    31b4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <eeprom_UpdateMidiOutMap>
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	08 95       	ret

000031bc <menuOnExitMidiIn>:
    31bc:	0e 94 32 0b 	call	0x1664	; 0x1664 <eeprom_UpdateMidiInMap>
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	08 95       	ret

000031c4 <menuOnExitManual>:
    31c4:	0e 94 10 0b 	call	0x1620	; 0x1620 <eeprom_UpdateManualMap>
    31c8:	0e 94 68 29 	call	0x52d0	; 0x52d0 <registers_CalcCount>
    31cc:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_UpdateReg>
    31d0:	0e 94 8e 2c 	call	0x591c	; 0x591c <Midi_updateManualRange>
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	08 95       	ret

000031d8 <menuOnExitModules>:
    31d8:	0e 94 84 0b 	call	0x1708	; 0x1708 <eeprom_UpdateModules>
    31dc:	80 e0       	ldi	r24, 0x00	; 0
    31de:	08 95       	ret

000031e0 <menuOnEnterUSBprotokoll>:
    31e0:	cf 93       	push	r28
    31e2:	81 e3       	ldi	r24, 0x31	; 49
    31e4:	93 e0       	ldi	r25, 0x03	; 3
    31e6:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    31ea:	50 d9       	rcall	.-3424   	; 0x248c <log_count>
    31ec:	81 11       	cpse	r24, r1
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <menuOnEnterUSBprotokoll+0x2e>
    31f0:	87 e3       	ldi	r24, 0x37	; 55
    31f2:	93 e0       	ldi	r25, 0x03	; 3
    31f4:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    31f8:	0e c0       	rjmp	.+28     	; 0x3216 <menuOnEnterUSBprotokoll+0x36>
    31fa:	6f ef       	ldi	r22, 0xFF	; 255
    31fc:	8c 2f       	mov	r24, r28
    31fe:	e7 da       	rcall	.-2610   	; 0x27ce <log_getShortTextFromIndex>
    3200:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    3204:	80 e6       	ldi	r24, 0x60	; 96
    3206:	91 e1       	ldi	r25, 0x11	; 17
    3208:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    320c:	8c 2f       	mov	r24, r28
    320e:	cf ef       	ldi	r28, 0xFF	; 255
    3210:	c8 0f       	add	r28, r24
    3212:	81 11       	cpse	r24, r1
    3214:	f2 cf       	rjmp	.-28     	; 0x31fa <menuOnEnterUSBprotokoll+0x1a>
    3216:	80 e0       	ldi	r24, 0x00	; 0
    3218:	cf 91       	pop	r28
    321a:	08 95       	ret

0000321c <menuOnExitUSBactive>:
    321c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <eeprom_UpdateUSB>
    3220:	80 91 dc 0b 	lds	r24, 0x0BDC	; 0x800bdc <serusb_Active>
    3224:	8f 3f       	cpi	r24, 0xFF	; 255
    3226:	61 f4       	brne	.+24     	; 0x3240 <menuOnExitUSBactive+0x24>
    3228:	88 e1       	ldi	r24, 0x18	; 24
    322a:	93 e0       	ldi	r25, 0x03	; 3
    322c:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	91 e1       	ldi	r25, 0x11	; 17
    3234:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    3238:	80 e6       	ldi	r24, 0x60	; 96
    323a:	91 e1       	ldi	r25, 0x11	; 17
    323c:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	08 95       	ret

00003244 <menuOnEnterUSBsendHW>:
    3244:	9f 92       	push	r9
    3246:	af 92       	push	r10
    3248:	bf 92       	push	r11
    324a:	cf 92       	push	r12
    324c:	df 92       	push	r13
    324e:	ef 92       	push	r14
    3250:	ff 92       	push	r15
    3252:	0f 93       	push	r16
    3254:	1f 93       	push	r17
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	8f ef       	ldi	r24, 0xFF	; 255
    325c:	92 e0       	ldi	r25, 0x02	; 2
    325e:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    3262:	8c ee       	ldi	r24, 0xEC	; 236
    3264:	92 e0       	ldi	r25, 0x02	; 2
    3266:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    326a:	6e e2       	ldi	r22, 0x2E	; 46
    326c:	7d e0       	ldi	r23, 0x0D	; 13
    326e:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <pipe_ModuleAssnRead>
    3272:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    3276:	22 e7       	ldi	r18, 0x72	; 114
    3278:	fc 01       	movw	r30, r24
    327a:	20 83       	st	Z, r18
    327c:	bc 01       	movw	r22, r24
    327e:	6e 5f       	subi	r22, 0xFE	; 254
    3280:	7f 4f       	sbci	r23, 0xFF	; 255
    3282:	20 e2       	ldi	r18, 0x20	; 32
    3284:	21 83       	std	Z+1, r18	; 0x01
    3286:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <pipe_ModuleAssnWrite>
    328a:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    328e:	27 e7       	ldi	r18, 0x77	; 119
    3290:	fc 01       	movw	r30, r24
    3292:	20 83       	st	Z, r18
    3294:	8e e2       	ldi	r24, 0x2E	; 46
    3296:	9d e0       	ldi	r25, 0x0D	; 13
    3298:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    329c:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <serial0SER_USB_sendCRLF>
    32a0:	8a ed       	ldi	r24, 0xDA	; 218
    32a2:	92 e0       	ldi	r25, 0x02	; 2
    32a4:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    32a8:	6e e2       	ldi	r22, 0x2E	; 46
    32aa:	7d e0       	ldi	r23, 0x0D	; 13
    32ac:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    32b0:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    32b4:	8e e2       	ldi	r24, 0x2E	; 46
    32b6:	9d e0       	ldi	r25, 0x0D	; 13
    32b8:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    32bc:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <serial0SER_USB_sendCRLF>
    32c0:	e1 2c       	mov	r14, r1
    32c2:	b5 c0       	rjmp	.+362    	; 0x342e <menuOnEnterUSBsendHW+0x1ea>
    32c4:	81 ed       	ldi	r24, 0xD1	; 209
    32c6:	92 e0       	ldi	r25, 0x02	; 2
    32c8:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    32cc:	6e e2       	ldi	r22, 0x2E	; 46
    32ce:	7d e0       	ldi	r23, 0x0D	; 13
    32d0:	8e 2d       	mov	r24, r14
    32d2:	0e 94 64 33 	call	0x66c8	; 0x66c8 <putChar_Manual>
    32d6:	8e e2       	ldi	r24, 0x2E	; 46
    32d8:	9d e0       	ldi	r25, 0x0D	; 13
    32da:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    32de:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <serial0SER_USB_sendCRLF>
    32e2:	f1 2c       	mov	r15, r1
    32e4:	9f c0       	rjmp	.+318    	; 0x3424 <menuOnEnterUSBsendHW+0x1e0>
    32e6:	89 ec       	ldi	r24, 0xC9	; 201
    32e8:	92 e0       	ldi	r25, 0x02	; 2
    32ea:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    32ee:	80 e3       	ldi	r24, 0x30	; 48
    32f0:	8f 0d       	add	r24, r15
    32f2:	0e 94 24 31 	call	0x6248	; 0x6248 <serial0SER_USBSend>
    32f6:	8d e2       	ldi	r24, 0x2D	; 45
    32f8:	0e 94 24 31 	call	0x6248	; 0x6248 <serial0SER_USBSend>
    32fc:	80 e2       	ldi	r24, 0x20	; 32
    32fe:	0e 94 24 31 	call	0x6248	; 0x6248 <serial0SER_USBSend>
    3302:	0e 2d       	mov	r16, r14
    3304:	10 e0       	ldi	r17, 0x00	; 0
    3306:	cf 2c       	mov	r12, r15
    3308:	d1 2c       	mov	r13, r1
    330a:	e6 01       	movw	r28, r12
    330c:	cc 0f       	add	r28, r28
    330e:	dd 1f       	adc	r29, r29
    3310:	ce 01       	movw	r24, r28
    3312:	8c 0d       	add	r24, r12
    3314:	9d 1d       	adc	r25, r13
    3316:	e8 01       	movw	r28, r16
    3318:	cc 0f       	add	r28, r28
    331a:	dd 1f       	adc	r29, r29
    331c:	c0 0f       	add	r28, r16
    331e:	d1 1f       	adc	r29, r17
    3320:	cc 0f       	add	r28, r28
    3322:	dd 1f       	adc	r29, r29
    3324:	cc 0f       	add	r28, r28
    3326:	dd 1f       	adc	r29, r29
    3328:	c8 0f       	add	r28, r24
    332a:	d9 1f       	adc	r29, r25
    332c:	c3 52       	subi	r28, 0x23	; 35
    332e:	d7 4f       	sbci	r29, 0xF7	; 247
    3330:	6e e2       	ldi	r22, 0x2E	; 46
    3332:	7d e0       	ldi	r23, 0x0D	; 13
    3334:	88 81       	ld	r24, Y
    3336:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    333a:	bc 01       	movw	r22, r24
    333c:	6f 5f       	subi	r22, 0xFF	; 255
    333e:	7f 4f       	sbci	r23, 0xFF	; 255
    3340:	68 94       	set
    3342:	bb 24       	eor	r11, r11
    3344:	b5 f8       	bld	r11, 5
    3346:	fc 01       	movw	r30, r24
    3348:	b0 82       	st	Z, r11
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    3350:	bc 01       	movw	r22, r24
    3352:	6f 5f       	subi	r22, 0xFF	; 255
    3354:	7f 4f       	sbci	r23, 0xFF	; 255
    3356:	fc 01       	movw	r30, r24
    3358:	b0 82       	st	Z, r11
    335a:	8a 81       	ldd	r24, Y+2	; 0x02
    335c:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <putChar_hex>
    3360:	2d e3       	ldi	r18, 0x3D	; 61
    3362:	fc 01       	movw	r30, r24
    3364:	20 83       	st	Z, r18
    3366:	8e e2       	ldi	r24, 0x2E	; 46
    3368:	9d e0       	ldi	r25, 0x0D	; 13
    336a:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    336e:	88 81       	ld	r24, Y
    3370:	88 23       	and	r24, r24
    3372:	2c f4       	brge	.+10     	; 0x337e <menuOnEnterUSBsendHW+0x13a>
    3374:	83 ec       	ldi	r24, 0xC3	; 195
    3376:	92 e0       	ldi	r25, 0x02	; 2
    3378:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    337c:	50 c0       	rjmp	.+160    	; 0x341e <menuOnEnterUSBsendHW+0x1da>
    337e:	6e e2       	ldi	r22, 0x2E	; 46
    3380:	7d e0       	ldi	r23, 0x0D	; 13
    3382:	0e 94 08 33 	call	0x6610	; 0x6610 <putChar_Note>
    3386:	bc 01       	movw	r22, r24
    3388:	6f 5f       	subi	r22, 0xFF	; 255
    338a:	7f 4f       	sbci	r23, 0xFF	; 255
    338c:	0f 2e       	mov	r0, r31
    338e:	fd e2       	ldi	r31, 0x2D	; 45
    3390:	9f 2e       	mov	r9, r31
    3392:	f0 2d       	mov	r31, r0
    3394:	fc 01       	movw	r30, r24
    3396:	90 82       	st	Z, r9
    3398:	f6 01       	movw	r30, r12
    339a:	ee 0f       	add	r30, r30
    339c:	ff 1f       	adc	r31, r31
    339e:	ce 0e       	add	r12, r30
    33a0:	df 1e       	adc	r13, r31
    33a2:	58 01       	movw	r10, r16
    33a4:	aa 0c       	add	r10, r10
    33a6:	bb 1c       	adc	r11, r11
    33a8:	e5 01       	movw	r28, r10
    33aa:	c0 0f       	add	r28, r16
    33ac:	d1 1f       	adc	r29, r17
    33ae:	cc 0f       	add	r28, r28
    33b0:	dd 1f       	adc	r29, r29
    33b2:	cc 0f       	add	r28, r28
    33b4:	dd 1f       	adc	r29, r29
    33b6:	cc 0d       	add	r28, r12
    33b8:	dd 1d       	adc	r29, r13
    33ba:	c3 52       	subi	r28, 0x23	; 35
    33bc:	d7 4f       	sbci	r29, 0xF7	; 247
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	0e 94 08 33 	call	0x6610	; 0x6610 <putChar_Note>
    33c4:	20 e2       	ldi	r18, 0x20	; 32
    33c6:	fc 01       	movw	r30, r24
    33c8:	20 83       	st	Z, r18
    33ca:	8e e2       	ldi	r24, 0x2E	; 46
    33cc:	9d e0       	ldi	r25, 0x0D	; 13
    33ce:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    33d2:	8b eb       	ldi	r24, 0xBB	; 187
    33d4:	92 e0       	ldi	r25, 0x02	; 2
    33d6:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    33da:	8a 81       	ldd	r24, Y+2	; 0x02
    33dc:	82 95       	swap	r24
    33de:	86 95       	lsr	r24
    33e0:	87 70       	andi	r24, 0x07	; 7
    33e2:	80 5d       	subi	r24, 0xD0	; 208
    33e4:	0e 94 24 31 	call	0x6248	; 0x6248 <serial0SER_USBSend>
    33e8:	84 eb       	ldi	r24, 0xB4	; 180
    33ea:	92 e0       	ldi	r25, 0x02	; 2
    33ec:	0e 94 4a 31 	call	0x6294	; 0x6294 <serial0SER_USB_sendStringP>
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	6e e2       	ldi	r22, 0x2E	; 46
    33f4:	7d e0       	ldi	r23, 0x0D	; 13
    33f6:	8f 71       	andi	r24, 0x1F	; 31
    33f8:	0e 94 90 32 	call	0x6520	; 0x6520 <putChar_Dec2>
    33fc:	bc 01       	movw	r22, r24
    33fe:	6f 5f       	subi	r22, 0xFF	; 255
    3400:	7f 4f       	sbci	r23, 0xFF	; 255
    3402:	fc 01       	movw	r30, r24
    3404:	90 82       	st	Z, r9
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
    3408:	99 81       	ldd	r25, Y+1	; 0x01
    340a:	28 81       	ld	r18, Y
    340c:	8f 71       	andi	r24, 0x1F	; 31
    340e:	89 0f       	add	r24, r25
    3410:	82 1b       	sub	r24, r18
    3412:	0e 94 90 32 	call	0x6520	; 0x6520 <putChar_Dec2>
    3416:	8e e2       	ldi	r24, 0x2E	; 46
    3418:	9d e0       	ldi	r25, 0x0D	; 13
    341a:	0e 94 92 31 	call	0x6324	; 0x6324 <serial0SER_USB_sendString>
    341e:	0e 94 5c 31 	call	0x62b8	; 0x62b8 <serial0SER_USB_sendCRLF>
    3422:	f3 94       	inc	r15
    3424:	f3 e0       	ldi	r31, 0x03	; 3
    3426:	ff 15       	cp	r31, r15
    3428:	08 f0       	brcs	.+2      	; 0x342c <menuOnEnterUSBsendHW+0x1e8>
    342a:	5d cf       	rjmp	.-326    	; 0x32e6 <menuOnEnterUSBsendHW+0xa2>
    342c:	e3 94       	inc	r14
    342e:	83 e0       	ldi	r24, 0x03	; 3
    3430:	8e 15       	cp	r24, r14
    3432:	08 f0       	brcs	.+2      	; 0x3436 <menuOnEnterUSBsendHW+0x1f2>
    3434:	47 cf       	rjmp	.-370    	; 0x32c4 <menuOnEnterUSBsendHW+0x80>
    3436:	80 e0       	ldi	r24, 0x00	; 0
    3438:	df 91       	pop	r29
    343a:	cf 91       	pop	r28
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	ef 90       	pop	r14
    3444:	df 90       	pop	r13
    3446:	cf 90       	pop	r12
    3448:	bf 90       	pop	r11
    344a:	af 90       	pop	r10
    344c:	9f 90       	pop	r9
    344e:	08 95       	ret

00003450 <reverseRegisterBits>:
    3450:	1f 93       	push	r17
    3452:	cf 93       	push	r28
    3454:	df 93       	push	r29
    3456:	10 e0       	ldi	r17, 0x00	; 0
    3458:	09 c0       	rjmp	.+18     	; 0x346c <reverseRegisterBits+0x1c>
    345a:	c1 2f       	mov	r28, r17
    345c:	d0 e0       	ldi	r29, 0x00	; 0
    345e:	c4 5e       	subi	r28, 0xE4	; 228
    3460:	da 4f       	sbci	r29, 0xFA	; 250
    3462:	88 81       	ld	r24, Y
    3464:	0e 94 00 35 	call	0x6a00	; 0x6a00 <reverse_Bits>
    3468:	88 83       	st	Y, r24
    346a:	1f 5f       	subi	r17, 0xFF	; 255
    346c:	18 30       	cpi	r17, 0x08	; 8
    346e:	a8 f3       	brcs	.-22     	; 0x345a <reverseRegisterBits+0xa>
    3470:	df 91       	pop	r29
    3472:	cf 91       	pop	r28
    3474:	1f 91       	pop	r17
    3476:	08 95       	ret

00003478 <menuOnUpdateRegister>:
    3478:	8c e1       	ldi	r24, 0x1C	; 28
    347a:	95 e0       	ldi	r25, 0x05	; 5
    347c:	0e 94 a3 2a 	call	0x5546	; 0x5546 <read_allRegister>
    3480:	e7 df       	rcall	.-50     	; 0x3450 <reverseRegisterBits>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	08 95       	ret

00003486 <menuOnEnterResetReg>:
    3486:	0e 94 9c 2b 	call	0x5738	; 0x5738 <midi_resetRegisters>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	f5 df       	rcall	.-22     	; 0x3478 <menuOnUpdateRegister>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	08 95       	ret

00003492 <menuOnExitLoadProgran>:
    3492:	86 30       	cpi	r24, 0x06	; 6
    3494:	31 f0       	breq	.+12     	; 0x34a2 <menuOnExitLoadProgran+0x10>
    3496:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <menuVKombination>
    349a:	80 34       	cpi	r24, 0x40	; 64
    349c:	10 f4       	brcc	.+4      	; 0x34a2 <menuOnExitLoadProgran+0x10>
    349e:	0e 94 0d 2b 	call	0x561a	; 0x561a <program_toRegister>
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	e9 df       	rcall	.-46     	; 0x3478 <menuOnUpdateRegister>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	08 95       	ret

000034aa <softkeyCoupler>:
    34aa:	cf 93       	push	r28
    34ac:	c6 2f       	mov	r28, r22
    34ae:	88 23       	and	r24, r24
    34b0:	d9 f0       	breq	.+54     	; 0x34e8 <softkeyCoupler+0x3e>
    34b2:	e6 2f       	mov	r30, r22
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	df 01       	movw	r26, r30
    34b8:	a2 54       	subi	r26, 0x42	; 66
    34ba:	b8 4f       	sbci	r27, 0xF8	; 248
    34bc:	8c 91       	ld	r24, X
    34be:	81 11       	cpse	r24, r1
    34c0:	08 c0       	rjmp	.+16     	; 0x34d2 <softkeyCoupler+0x28>
    34c2:	86 2f       	mov	r24, r22
    34c4:	0e 94 10 29 	call	0x5220	; 0x5220 <set_Coupler>
    34c8:	88 23       	and	r24, r24
    34ca:	71 f0       	breq	.+28     	; 0x34e8 <softkeyCoupler+0x3e>
    34cc:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <midi_ManualOff>
    34d0:	0b c0       	rjmp	.+22     	; 0x34e8 <softkeyCoupler+0x3e>
    34d2:	df 01       	movw	r26, r30
    34d4:	a2 54       	subi	r26, 0x42	; 66
    34d6:	b8 4f       	sbci	r27, 0xF8	; 248
    34d8:	1c 92       	st	X, r1
    34da:	ee 0f       	add	r30, r30
    34dc:	ff 1f       	adc	r31, r31
    34de:	ea 5f       	subi	r30, 0xFA	; 250
    34e0:	fe 4e       	sbci	r31, 0xEE	; 238
    34e2:	84 91       	lpm	r24, Z
    34e4:	0e 94 f0 2d 	call	0x5be0	; 0x5be0 <midi_ManualOff>
    34e8:	ec 2f       	mov	r30, r28
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	e2 54       	subi	r30, 0x42	; 66
    34ee:	f8 4f       	sbci	r31, 0xF8	; 248
    34f0:	80 81       	ld	r24, Z
    34f2:	81 11       	cpse	r24, r1
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <softkeyCoupler+0x50>
    34f6:	82 e8       	ldi	r24, 0x82	; 130
    34f8:	01 c0       	rjmp	.+2      	; 0x34fc <softkeyCoupler+0x52>
    34fa:	81 e8       	ldi	r24, 0x81	; 129
    34fc:	cf 91       	pop	r28
    34fe:	08 95       	ret

00003500 <softKeyCoupler2from3>:
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	d3 cf       	rjmp	.-90     	; 0x34aa <softkeyCoupler>
    3504:	08 95       	ret

00003506 <softKeyCoupler1from3>:
    3506:	61 e0       	ldi	r22, 0x01	; 1
    3508:	d0 cf       	rjmp	.-96     	; 0x34aa <softkeyCoupler>
    350a:	08 95       	ret

0000350c <softKeyCouplerPfrom3>:
    350c:	63 e0       	ldi	r22, 0x03	; 3
    350e:	cd cf       	rjmp	.-102    	; 0x34aa <softkeyCoupler>
    3510:	08 95       	ret

00003512 <softKeyCoupler1from2>:
    3512:	62 e0       	ldi	r22, 0x02	; 2
    3514:	ca cf       	rjmp	.-108    	; 0x34aa <softkeyCoupler>
    3516:	08 95       	ret

00003518 <softKeyCouplerPfrom2>:
    3518:	64 e0       	ldi	r22, 0x04	; 4
    351a:	c7 cf       	rjmp	.-114    	; 0x34aa <softkeyCoupler>
    351c:	08 95       	ret

0000351e <softKeyCouplerPfrom1>:
    351e:	65 e0       	ldi	r22, 0x05	; 5
    3520:	c4 cf       	rjmp	.-120    	; 0x34aa <softkeyCoupler>
    3522:	08 95       	ret

00003524 <softKeyCoupler3from2>:
    3524:	66 e0       	ldi	r22, 0x06	; 6
    3526:	c1 cf       	rjmp	.-126    	; 0x34aa <softkeyCoupler>
    3528:	08 95       	ret

0000352a <softKeyCoupler3from1>:
    352a:	67 e0       	ldi	r22, 0x07	; 7
    352c:	be cf       	rjmp	.-132    	; 0x34aa <softkeyCoupler>
    352e:	08 95       	ret

00003530 <softKeyCoupler3fromP>:
    3530:	69 e0       	ldi	r22, 0x09	; 9
    3532:	bb cf       	rjmp	.-138    	; 0x34aa <softkeyCoupler>
    3534:	08 95       	ret

00003536 <softKeyCoupler2from1>:
    3536:	68 e0       	ldi	r22, 0x08	; 8
    3538:	b8 cf       	rjmp	.-144    	; 0x34aa <softkeyCoupler>
    353a:	08 95       	ret

0000353c <softKeyCoupler2fromP>:
    353c:	6a e0       	ldi	r22, 0x0A	; 10
    353e:	b5 cf       	rjmp	.-150    	; 0x34aa <softkeyCoupler>
    3540:	08 95       	ret

00003542 <softKeyCoupler1fromP>:
    3542:	6b e0       	ldi	r22, 0x0B	; 11
    3544:	b2 cf       	rjmp	.-156    	; 0x34aa <softkeyCoupler>
    3546:	08 95       	ret

00003548 <menu_Init>:
    3548:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <menuStackIndex>
    354c:	00 97       	sbiw	r24, 0x00	; 0
    354e:	69 f4       	brne	.+26     	; 0x356a <menu_Init+0x22>
    3550:	84 ec       	ldi	r24, 0xC4	; 196
    3552:	96 e0       	ldi	r25, 0x06	; 6
    3554:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    3558:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
    355c:	8f e9       	ldi	r24, 0x9F	; 159
    355e:	93 e0       	ldi	r25, 0x03	; 3
    3560:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <pMenuTopTitle+0x1>
    3564:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <pMenuTopTitle>
    3568:	08 c0       	rjmp	.+16     	; 0x357a <menu_Init+0x32>
    356a:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    356e:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
    3572:	70 93 4c 05 	sts	0x054C, r23	; 0x80054c <pMenuTopTitle+0x1>
    3576:	60 93 4b 05 	sts	0x054B, r22	; 0x80054b <pMenuTopTitle>
    357a:	8f ef       	ldi	r24, 0xFF	; 255
    357c:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <nibbleIndex>
    3580:	89 ea       	ldi	r24, 0xA9	; 169
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <pNibbleInfo+0x1>
    3588:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <pNibbleInfo>
    358c:	08 95       	ret

0000358e <softkeyLeft>:
    358e:	60 e4       	ldi	r22, 0x40	; 64
    3590:	71 e1       	ldi	r23, 0x11	; 17
    3592:	82 e0       	ldi	r24, 0x02	; 2
    3594:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    3598:	08 95       	ret

0000359a <softkeyRight>:
    359a:	62 e4       	ldi	r22, 0x42	; 66
    359c:	71 e1       	ldi	r23, 0x11	; 17
    359e:	83 e0       	ldi	r24, 0x03	; 3
    35a0:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    35a4:	08 95       	ret

000035a6 <softkeyDown>:
    35a6:	64 e4       	ldi	r22, 0x44	; 68
    35a8:	71 e1       	ldi	r23, 0x11	; 17
    35aa:	81 e0       	ldi	r24, 0x01	; 1
    35ac:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    35b0:	08 95       	ret

000035b2 <softkeyOn>:
    35b2:	62 e3       	ldi	r22, 0x32	; 50
    35b4:	71 e1       	ldi	r23, 0x11	; 17
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    35bc:	08 95       	ret

000035be <softkeyOff>:
    35be:	6d e2       	ldi	r22, 0x2D	; 45
    35c0:	71 e1       	ldi	r23, 0x11	; 17
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    35c8:	08 95       	ret

000035ca <softkeyUp>:
    35ca:	66 e4       	ldi	r22, 0x46	; 70
    35cc:	71 e1       	ldi	r23, 0x11	; 17
    35ce:	80 e0       	ldi	r24, 0x00	; 0
    35d0:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    35d4:	08 95       	ret

000035d6 <softkeyPlus>:
    35d6:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <dataType>
    35da:	8a 30       	cpi	r24, 0x0A	; 10
    35dc:	11 f0       	breq	.+4      	; 0x35e2 <softkeyPlus+0xc>
    35de:	8e 30       	cpi	r24, 0x0E	; 14
    35e0:	31 f4       	brne	.+12     	; 0x35ee <softkeyPlus+0x18>
    35e2:	6e e1       	ldi	r22, 0x1E	; 30
    35e4:	71 e1       	ldi	r23, 0x11	; 17
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    35ec:	08 95       	ret
    35ee:	6e e3       	ldi	r22, 0x3E	; 62
    35f0:	71 e1       	ldi	r23, 0x11	; 17
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    35f8:	08 95       	ret

000035fa <softkeyMinus>:
    35fa:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <dataType>
    35fe:	8a 30       	cpi	r24, 0x0A	; 10
    3600:	11 f0       	breq	.+4      	; 0x3606 <softkeyMinus+0xc>
    3602:	8e 30       	cpi	r24, 0x0E	; 14
    3604:	31 f4       	brne	.+12     	; 0x3612 <softkeyMinus+0x18>
    3606:	60 e2       	ldi	r22, 0x20	; 32
    3608:	71 e1       	ldi	r23, 0x11	; 17
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    3610:	08 95       	ret
    3612:	6c e3       	ldi	r22, 0x3C	; 60
    3614:	71 e1       	ldi	r23, 0x11	; 17
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	0c 94 5b 34 	jmp	0x68b6	; 0x68b6 <keylabel_set>
    361c:	08 95       	ret

0000361e <dataToNibbles>:
    361e:	cf 93       	push	r28
    3620:	df 93       	push	r29
    3622:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <dataType>
    3626:	8e 2f       	mov	r24, r30
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	fc 01       	movw	r30, r24
    362c:	32 97       	sbiw	r30, 0x02	; 2
    362e:	ed 30       	cpi	r30, 0x0D	; 13
    3630:	f1 05       	cpc	r31, r1
    3632:	08 f0       	brcs	.+2      	; 0x3636 <dataToNibbles+0x18>
    3634:	e4 c0       	rjmp	.+456    	; 0x37fe <dataToNibbles+0x1e0>
    3636:	88 27       	eor	r24, r24
    3638:	ee 58       	subi	r30, 0x8E	; 142
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	8f 4f       	sbci	r24, 0xFF	; 255
    363e:	0c 94 0d 35 	jmp	0x6a1a	; 0x6a1a <__tablejump2__>
    3642:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    3646:	e3 e7       	ldi	r30, 0x73	; 115
    3648:	f5 e0       	ldi	r31, 0x05	; 5
    364a:	98 2f       	mov	r25, r24
    364c:	92 95       	swap	r25
    364e:	9f 70       	andi	r25, 0x0F	; 15
    3650:	90 83       	st	Z, r25
    3652:	8f 70       	andi	r24, 0x0F	; 15
    3654:	81 83       	std	Z+1, r24	; 0x01
    3656:	d3 c0       	rjmp	.+422    	; 0x37fe <dataToNibbles+0x1e0>
    3658:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    365c:	80 31       	cpi	r24, 0x10	; 16
    365e:	20 f0       	brcs	.+8      	; 0x3668 <dataToNibbles+0x4a>
    3660:	8f ef       	ldi	r24, 0xFF	; 255
    3662:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3666:	cb c0       	rjmp	.+406    	; 0x37fe <dataToNibbles+0x1e0>
    3668:	8f 5f       	subi	r24, 0xFF	; 255
    366a:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    366e:	c7 c0       	rjmp	.+398    	; 0x37fe <dataToNibbles+0x1e0>
    3670:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    3674:	88 23       	and	r24, r24
    3676:	34 f4       	brge	.+12     	; 0x3684 <dataToNibbles+0x66>
    3678:	e3 e7       	ldi	r30, 0x73	; 115
    367a:	f5 e0       	ldi	r31, 0x05	; 5
    367c:	10 82       	st	Z, r1
    367e:	8f ef       	ldi	r24, 0xFF	; 255
    3680:	81 83       	std	Z+1, r24	; 0x01
    3682:	bd c0       	rjmp	.+378    	; 0x37fe <dataToNibbles+0x1e0>
    3684:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <nibble+0x1>
    3688:	08 c0       	rjmp	.+16     	; 0x369a <dataToNibbles+0x7c>
    368a:	e3 e7       	ldi	r30, 0x73	; 115
    368c:	f5 e0       	ldi	r31, 0x05	; 5
    368e:	91 81       	ldd	r25, Z+1	; 0x01
    3690:	9f 5f       	subi	r25, 0xFF	; 255
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	8c 50       	subi	r24, 0x0C	; 12
    3696:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    369a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    369e:	8c 30       	cpi	r24, 0x0C	; 12
    36a0:	a0 f7       	brcc	.-24     	; 0x368a <dataToNibbles+0x6c>
    36a2:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    36a6:	ab c0       	rjmp	.+342    	; 0x37fe <dataToNibbles+0x1e0>
    36a8:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    36ac:	e3 e7       	ldi	r30, 0x73	; 115
    36ae:	f5 e0       	ldi	r31, 0x05	; 5
    36b0:	98 2f       	mov	r25, r24
    36b2:	92 95       	swap	r25
    36b4:	96 95       	lsr	r25
    36b6:	97 70       	andi	r25, 0x07	; 7
    36b8:	90 83       	st	Z, r25
    36ba:	8f 71       	andi	r24, 0x1F	; 31
    36bc:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    36c0:	11 82       	std	Z+1, r1	; 0x01
    36c2:	08 c0       	rjmp	.+16     	; 0x36d4 <dataToNibbles+0xb6>
    36c4:	e3 e7       	ldi	r30, 0x73	; 115
    36c6:	f5 e0       	ldi	r31, 0x05	; 5
    36c8:	91 81       	ldd	r25, Z+1	; 0x01
    36ca:	9f 5f       	subi	r25, 0xFF	; 255
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	8a 50       	subi	r24, 0x0A	; 10
    36d0:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    36d4:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    36d8:	8a 30       	cpi	r24, 0x0A	; 10
    36da:	a0 f7       	brcc	.-24     	; 0x36c4 <dataToNibbles+0xa6>
    36dc:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <nibble+0x2>
    36e0:	8e c0       	rjmp	.+284    	; 0x37fe <dataToNibbles+0x1e0>
    36e2:	e3 e7       	ldi	r30, 0x73	; 115
    36e4:	f5 e0       	ldi	r31, 0x05	; 5
    36e6:	10 82       	st	Z, r1
    36e8:	11 82       	std	Z+1, r1	; 0x01
    36ea:	08 c0       	rjmp	.+16     	; 0x36fc <dataToNibbles+0xde>
    36ec:	e3 e7       	ldi	r30, 0x73	; 115
    36ee:	f5 e0       	ldi	r31, 0x05	; 5
    36f0:	90 81       	ld	r25, Z
    36f2:	9f 5f       	subi	r25, 0xFF	; 255
    36f4:	90 83       	st	Z, r25
    36f6:	84 56       	subi	r24, 0x64	; 100
    36f8:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    36fc:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    3700:	84 36       	cpi	r24, 0x64	; 100
    3702:	a0 f7       	brcc	.-24     	; 0x36ec <dataToNibbles+0xce>
    3704:	08 c0       	rjmp	.+16     	; 0x3716 <dataToNibbles+0xf8>
    3706:	e3 e7       	ldi	r30, 0x73	; 115
    3708:	f5 e0       	ldi	r31, 0x05	; 5
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	9f 5f       	subi	r25, 0xFF	; 255
    370e:	91 83       	std	Z+1, r25	; 0x01
    3710:	8a 50       	subi	r24, 0x0A	; 10
    3712:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3716:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    371a:	8a 30       	cpi	r24, 0x0A	; 10
    371c:	a0 f7       	brcc	.-24     	; 0x3706 <dataToNibbles+0xe8>
    371e:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <nibble+0x2>
    3722:	6d c0       	rjmp	.+218    	; 0x37fe <dataToNibbles+0x1e0>
    3724:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    3728:	84 30       	cpi	r24, 0x04	; 4
    372a:	20 f0       	brcs	.+8      	; 0x3734 <dataToNibbles+0x116>
    372c:	8f ef       	ldi	r24, 0xFF	; 255
    372e:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3732:	65 c0       	rjmp	.+202    	; 0x37fe <dataToNibbles+0x1e0>
    3734:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3738:	62 c0       	rjmp	.+196    	; 0x37fe <dataToNibbles+0x1e0>
    373a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    373e:	84 30       	cpi	r24, 0x04	; 4
    3740:	20 f0       	brcs	.+8      	; 0x374a <dataToNibbles+0x12c>
    3742:	83 e0       	ldi	r24, 0x03	; 3
    3744:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3748:	5a c0       	rjmp	.+180    	; 0x37fe <dataToNibbles+0x1e0>
    374a:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    374e:	57 c0       	rjmp	.+174    	; 0x37fe <dataToNibbles+0x1e0>
    3750:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    3754:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3758:	52 c0       	rjmp	.+164    	; 0x37fe <dataToNibbles+0x1e0>
    375a:	e9 2f       	mov	r30, r25
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    3762:	28 2f       	mov	r18, r24
    3764:	22 1f       	adc	r18, r18
    3766:	22 27       	eor	r18, r18
    3768:	22 1f       	adc	r18, r18
    376a:	ed 58       	subi	r30, 0x8D	; 141
    376c:	fa 4f       	sbci	r31, 0xFA	; 250
    376e:	20 83       	st	Z, r18
    3770:	88 0f       	add	r24, r24
    3772:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3776:	9f 5f       	subi	r25, 0xFF	; 255
    3778:	01 c0       	rjmp	.+2      	; 0x377c <dataToNibbles+0x15e>
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	98 30       	cpi	r25, 0x08	; 8
    377e:	68 f3       	brcs	.-38     	; 0x375a <dataToNibbles+0x13c>
    3780:	3e c0       	rjmp	.+124    	; 0x37fe <dataToNibbles+0x1e0>
    3782:	82 50       	subi	r24, 0x02	; 2
    3784:	f0 e0       	ldi	r31, 0x00	; 0
    3786:	de 01       	movw	r26, r28
    3788:	9d 91       	ld	r25, X+
    378a:	ed 58       	subi	r30, 0x8D	; 141
    378c:	fa 4f       	sbci	r31, 0xFA	; 250
    378e:	9f 70       	andi	r25, 0x0F	; 15
    3790:	90 83       	st	Z, r25
    3792:	e8 2f       	mov	r30, r24
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	98 81       	ld	r25, Y
    3798:	ed 58       	subi	r30, 0x8D	; 141
    379a:	fa 4f       	sbci	r31, 0xFA	; 250
    379c:	92 95       	swap	r25
    379e:	9f 70       	andi	r25, 0x0F	; 15
    37a0:	90 83       	st	Z, r25
    37a2:	ed 01       	movw	r28, r26
    37a4:	03 c0       	rjmp	.+6      	; 0x37ac <dataToNibbles+0x18e>
    37a6:	c1 e5       	ldi	r28, 0x51	; 81
    37a8:	d5 e0       	ldi	r29, 0x05	; 5
    37aa:	88 e0       	ldi	r24, 0x08	; 8
    37ac:	ef ef       	ldi	r30, 0xFF	; 255
    37ae:	e8 0f       	add	r30, r24
    37b0:	81 11       	cpse	r24, r1
    37b2:	e7 cf       	rjmp	.-50     	; 0x3782 <dataToNibbles+0x164>
    37b4:	24 c0       	rjmp	.+72     	; 0x37fe <dataToNibbles+0x1e0>
    37b6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    37ba:	e3 e7       	ldi	r30, 0x73	; 115
    37bc:	f5 e0       	ldi	r31, 0x05	; 5
    37be:	98 2f       	mov	r25, r24
    37c0:	97 70       	andi	r25, 0x07	; 7
    37c2:	9f 5f       	subi	r25, 0xFF	; 255
    37c4:	90 83       	st	Z, r25
    37c6:	86 95       	lsr	r24
    37c8:	86 95       	lsr	r24
    37ca:	86 95       	lsr	r24
    37cc:	8f 5f       	subi	r24, 0xFF	; 255
    37ce:	81 83       	std	Z+1, r24	; 0x01
    37d0:	16 c0       	rjmp	.+44     	; 0x37fe <dataToNibbles+0x1e0>
    37d2:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    37dc:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <nibble>
    37e0:	08 c0       	rjmp	.+16     	; 0x37f2 <dataToNibbles+0x1d4>
    37e2:	e3 e7       	ldi	r30, 0x73	; 115
    37e4:	f5 e0       	ldi	r31, 0x05	; 5
    37e6:	90 81       	ld	r25, Z
    37e8:	9f 5f       	subi	r25, 0xFF	; 255
    37ea:	90 83       	st	Z, r25
    37ec:	8a 50       	subi	r24, 0x0A	; 10
    37ee:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    37f2:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    37f6:	8a 30       	cpi	r24, 0x0A	; 10
    37f8:	a0 f7       	brcc	.-24     	; 0x37e2 <dataToNibbles+0x1c4>
    37fa:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <nibble+0x1>
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	08 95       	ret

00003804 <nibbleToLCDstring>:
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	cf 93       	push	r28
    380a:	df 93       	push	r29
    380c:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <dataType>
    3810:	8e 2f       	mov	r24, r30
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	fc 01       	movw	r30, r24
    3816:	32 97       	sbiw	r30, 0x02	; 2
    3818:	ed 30       	cpi	r30, 0x0D	; 13
    381a:	f1 05       	cpc	r31, r1
    381c:	08 f0       	brcs	.+2      	; 0x3820 <nibbleToLCDstring+0x1c>
    381e:	3b c1       	rjmp	.+630    	; 0x3a96 <nibbleToLCDstring+0x292>
    3820:	88 27       	eor	r24, r24
    3822:	e1 58       	subi	r30, 0x81	; 129
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	8f 4f       	sbci	r24, 0xFF	; 255
    3828:	0c 94 0d 35 	jmp	0x6a1a	; 0x6a1a <__tablejump2__>
    382c:	03 e7       	ldi	r16, 0x73	; 115
    382e:	15 e0       	ldi	r17, 0x05	; 5
    3830:	f8 01       	movw	r30, r16
    3832:	80 81       	ld	r24, Z
    3834:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    3838:	c5 e2       	ldi	r28, 0x25	; 37
    383a:	d2 e0       	ldi	r29, 0x02	; 2
    383c:	88 83       	st	Y, r24
    383e:	f8 01       	movw	r30, r16
    3840:	81 81       	ldd	r24, Z+1	; 0x01
    3842:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    3846:	89 83       	std	Y+1, r24	; 0x01
    3848:	1a 82       	std	Y+2, r1	; 0x02
    384a:	25 c1       	rjmp	.+586    	; 0x3a96 <nibbleToLCDstring+0x292>
    384c:	e5 e2       	ldi	r30, 0x25	; 37
    384e:	f2 e0       	ldi	r31, 0x02	; 2
    3850:	83 e4       	ldi	r24, 0x43	; 67
    3852:	80 83       	st	Z, r24
    3854:	88 e6       	ldi	r24, 0x68	; 104
    3856:	81 83       	std	Z+1, r24	; 0x01
    3858:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    385c:	8f 3f       	cpi	r24, 0xFF	; 255
    385e:	29 f4       	brne	.+10     	; 0x386a <nibbleToLCDstring+0x66>
    3860:	80 e2       	ldi	r24, 0x20	; 32
    3862:	82 83       	std	Z+2, r24	; 0x02
    3864:	8d e2       	ldi	r24, 0x2D	; 45
    3866:	83 83       	std	Z+3, r24	; 0x03
    3868:	12 c0       	rjmp	.+36     	; 0x388e <nibbleToLCDstring+0x8a>
    386a:	8a 30       	cpi	r24, 0x0A	; 10
    386c:	48 f0       	brcs	.+18     	; 0x3880 <nibbleToLCDstring+0x7c>
    386e:	c5 e2       	ldi	r28, 0x25	; 37
    3870:	d2 e0       	ldi	r29, 0x02	; 2
    3872:	91 e3       	ldi	r25, 0x31	; 49
    3874:	9a 83       	std	Y+2, r25	; 0x02
    3876:	8a 50       	subi	r24, 0x0A	; 10
    3878:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    387c:	8b 83       	std	Y+3, r24	; 0x03
    387e:	07 c0       	rjmp	.+14     	; 0x388e <nibbleToLCDstring+0x8a>
    3880:	c5 e2       	ldi	r28, 0x25	; 37
    3882:	d2 e0       	ldi	r29, 0x02	; 2
    3884:	90 e2       	ldi	r25, 0x20	; 32
    3886:	9a 83       	std	Y+2, r25	; 0x02
    3888:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    388c:	8b 83       	std	Y+3, r24	; 0x03
    388e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    3892:	01 c1       	rjmp	.+514    	; 0x3a96 <nibbleToLCDstring+0x292>
    3894:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3898:	8f 3f       	cpi	r24, 0xFF	; 255
    389a:	21 f0       	breq	.+8      	; 0x38a4 <nibbleToLCDstring+0xa0>
    389c:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <nibble+0x1>
    38a0:	9f 3f       	cpi	r25, 0xFF	; 255
    38a2:	59 f4       	brne	.+22     	; 0x38ba <nibbleToLCDstring+0xb6>
    38a4:	e5 e2       	ldi	r30, 0x25	; 37
    38a6:	f2 e0       	ldi	r31, 0x02	; 2
    38a8:	8e e6       	ldi	r24, 0x6E	; 110
    38aa:	80 83       	st	Z, r24
    38ac:	9f e6       	ldi	r25, 0x6F	; 111
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	82 83       	std	Z+2, r24	; 0x02
    38b2:	85 e6       	ldi	r24, 0x65	; 101
    38b4:	83 83       	std	Z+3, r24	; 0x03
    38b6:	14 82       	std	Z+4, r1	; 0x04
    38b8:	ee c0       	rjmp	.+476    	; 0x3a96 <nibbleToLCDstring+0x292>
    38ba:	9f e5       	ldi	r25, 0x5F	; 95
    38bc:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    38c0:	8b 30       	cpi	r24, 0x0B	; 11
    38c2:	21 f4       	brne	.+8      	; 0x38cc <nibbleToLCDstring+0xc8>
    38c4:	88 e4       	ldi	r24, 0x48	; 72
    38c6:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    38ca:	20 c0       	rjmp	.+64     	; 0x390c <nibbleToLCDstring+0x108>
    38cc:	85 30       	cpi	r24, 0x05	; 5
    38ce:	58 f4       	brcc	.+22     	; 0x38e6 <nibbleToLCDstring+0xe2>
    38d0:	98 2f       	mov	r25, r24
    38d2:	96 95       	lsr	r25
    38d4:	9d 5b       	subi	r25, 0xBD	; 189
    38d6:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    38da:	80 ff       	sbrs	r24, 0
    38dc:	17 c0       	rjmp	.+46     	; 0x390c <nibbleToLCDstring+0x108>
    38de:	83 e2       	ldi	r24, 0x23	; 35
    38e0:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    38e4:	13 c0       	rjmp	.+38     	; 0x390c <nibbleToLCDstring+0x108>
    38e6:	28 2f       	mov	r18, r24
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	25 50       	subi	r18, 0x05	; 5
    38ec:	31 09       	sbc	r19, r1
    38ee:	35 95       	asr	r19
    38f0:	27 95       	ror	r18
    38f2:	2a 5b       	subi	r18, 0xBA	; 186
    38f4:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    38f8:	80 fd       	sbrc	r24, 0
    38fa:	03 c0       	rjmp	.+6      	; 0x3902 <nibbleToLCDstring+0xfe>
    38fc:	83 e2       	ldi	r24, 0x23	; 35
    38fe:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3902:	28 34       	cpi	r18, 0x48	; 72
    3904:	19 f4       	brne	.+6      	; 0x390c <nibbleToLCDstring+0x108>
    3906:	81 e4       	ldi	r24, 0x41	; 65
    3908:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    390c:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <nibble+0x1>
    3910:	81 11       	cpse	r24, r1
    3912:	04 c0       	rjmp	.+8      	; 0x391c <nibbleToLCDstring+0x118>
    3914:	8d e6       	ldi	r24, 0x6D	; 109
    3916:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    391a:	0b c0       	rjmp	.+22     	; 0x3932 <nibbleToLCDstring+0x12e>
    391c:	8c 30       	cpi	r24, 0x0C	; 12
    391e:	30 f4       	brcc	.+12     	; 0x392c <nibbleToLCDstring+0x128>
    3920:	81 50       	subi	r24, 0x01	; 1
    3922:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    3926:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    392a:	03 c0       	rjmp	.+6      	; 0x3932 <nibbleToLCDstring+0x12e>
    392c:	8d e2       	ldi	r24, 0x2D	; 45
    392e:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3932:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3936:	af c0       	rjmp	.+350    	; 0x3a96 <nibbleToLCDstring+0x292>
    3938:	c5 e2       	ldi	r28, 0x25	; 37
    393a:	d2 e0       	ldi	r29, 0x02	; 2
    393c:	8d e4       	ldi	r24, 0x4D	; 77
    393e:	88 83       	st	Y, r24
    3940:	03 e7       	ldi	r16, 0x73	; 115
    3942:	15 e0       	ldi	r17, 0x05	; 5
    3944:	f8 01       	movw	r30, r16
    3946:	80 81       	ld	r24, Z
    3948:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    394c:	89 83       	std	Y+1, r24	; 0x01
    394e:	82 e4       	ldi	r24, 0x42	; 66
    3950:	8a 83       	std	Y+2, r24	; 0x02
    3952:	f8 01       	movw	r30, r16
    3954:	81 81       	ldd	r24, Z+1	; 0x01
    3956:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    395a:	8b 83       	std	Y+3, r24	; 0x03
    395c:	f8 01       	movw	r30, r16
    395e:	82 81       	ldd	r24, Z+2	; 0x02
    3960:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    3964:	8c 83       	std	Y+4, r24	; 0x04
    3966:	1d 82       	std	Y+5, r1	; 0x05
    3968:	96 c0       	rjmp	.+300    	; 0x3a96 <nibbleToLCDstring+0x292>
    396a:	03 e7       	ldi	r16, 0x73	; 115
    396c:	15 e0       	ldi	r17, 0x05	; 5
    396e:	f8 01       	movw	r30, r16
    3970:	80 81       	ld	r24, Z
    3972:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    3976:	c5 e2       	ldi	r28, 0x25	; 37
    3978:	d2 e0       	ldi	r29, 0x02	; 2
    397a:	88 83       	st	Y, r24
    397c:	f8 01       	movw	r30, r16
    397e:	81 81       	ldd	r24, Z+1	; 0x01
    3980:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    3984:	89 83       	std	Y+1, r24	; 0x01
    3986:	f8 01       	movw	r30, r16
    3988:	82 81       	ldd	r24, Z+2	; 0x02
    398a:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    398e:	8a 83       	std	Y+2, r24	; 0x02
    3990:	1b 82       	std	Y+3, r1	; 0x03
    3992:	81 c0       	rjmp	.+258    	; 0x3a96 <nibbleToLCDstring+0x292>
    3994:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3998:	83 30       	cpi	r24, 0x03	; 3
    399a:	38 f4       	brcc	.+14     	; 0x39aa <nibbleToLCDstring+0x1a6>
    399c:	e5 e2       	ldi	r30, 0x25	; 37
    399e:	f2 e0       	ldi	r31, 0x02	; 2
    39a0:	93 e3       	ldi	r25, 0x33	; 51
    39a2:	98 1b       	sub	r25, r24
    39a4:	90 83       	st	Z, r25
    39a6:	11 82       	std	Z+1, r1	; 0x01
    39a8:	76 c0       	rjmp	.+236    	; 0x3a96 <nibbleToLCDstring+0x292>
    39aa:	83 30       	cpi	r24, 0x03	; 3
    39ac:	31 f4       	brne	.+12     	; 0x39ba <nibbleToLCDstring+0x1b6>
    39ae:	e5 e2       	ldi	r30, 0x25	; 37
    39b0:	f2 e0       	ldi	r31, 0x02	; 2
    39b2:	80 e5       	ldi	r24, 0x50	; 80
    39b4:	80 83       	st	Z, r24
    39b6:	11 82       	std	Z+1, r1	; 0x01
    39b8:	6e c0       	rjmp	.+220    	; 0x3a96 <nibbleToLCDstring+0x292>
    39ba:	e5 e2       	ldi	r30, 0x25	; 37
    39bc:	f2 e0       	ldi	r31, 0x02	; 2
    39be:	8d e2       	ldi	r24, 0x2D	; 45
    39c0:	80 83       	st	Z, r24
    39c2:	11 82       	std	Z+1, r1	; 0x01
    39c4:	68 c0       	rjmp	.+208    	; 0x3a96 <nibbleToLCDstring+0x292>
    39c6:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    39ca:	e5 e2       	ldi	r30, 0x25	; 37
    39cc:	f2 e0       	ldi	r31, 0x02	; 2
    39ce:	80 5d       	subi	r24, 0xD0	; 208
    39d0:	80 83       	st	Z, r24
    39d2:	11 82       	std	Z+1, r1	; 0x01
    39d4:	60 c0       	rjmp	.+192    	; 0x3a96 <nibbleToLCDstring+0x292>
    39d6:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    39da:	81 11       	cpse	r24, r1
    39dc:	09 c0       	rjmp	.+18     	; 0x39f0 <nibbleToLCDstring+0x1ec>
    39de:	e5 e2       	ldi	r30, 0x25	; 37
    39e0:	f2 e0       	ldi	r31, 0x02	; 2
    39e2:	81 e4       	ldi	r24, 0x41	; 65
    39e4:	80 83       	st	Z, r24
    39e6:	85 e7       	ldi	r24, 0x75	; 117
    39e8:	81 83       	std	Z+1, r24	; 0x01
    39ea:	83 e7       	ldi	r24, 0x73	; 115
    39ec:	82 83       	std	Z+2, r24	; 0x02
    39ee:	08 c0       	rjmp	.+16     	; 0x3a00 <nibbleToLCDstring+0x1fc>
    39f0:	e5 e2       	ldi	r30, 0x25	; 37
    39f2:	f2 e0       	ldi	r31, 0x02	; 2
    39f4:	85 e4       	ldi	r24, 0x45	; 69
    39f6:	80 83       	st	Z, r24
    39f8:	89 e6       	ldi	r24, 0x69	; 105
    39fa:	81 83       	std	Z+1, r24	; 0x01
    39fc:	8e e6       	ldi	r24, 0x6E	; 110
    39fe:	82 83       	std	Z+2, r24	; 0x02
    3a00:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3a04:	48 c0       	rjmp	.+144    	; 0x3a96 <nibbleToLCDstring+0x292>
    3a06:	c1 2f       	mov	r28, r17
    3a08:	d0 e0       	ldi	r29, 0x00	; 0
    3a0a:	fe 01       	movw	r30, r28
    3a0c:	ed 58       	subi	r30, 0x8D	; 141
    3a0e:	fa 4f       	sbci	r31, 0xFA	; 250
    3a10:	80 81       	ld	r24, Z
    3a12:	0e 94 03 32 	call	0x6406	; 0x6406 <nibbleToChr>
    3a16:	cb 5d       	subi	r28, 0xDB	; 219
    3a18:	dd 4f       	sbci	r29, 0xFD	; 253
    3a1a:	88 83       	st	Y, r24
    3a1c:	1f 5f       	subi	r17, 0xFF	; 255
    3a1e:	01 c0       	rjmp	.+2      	; 0x3a22 <nibbleToLCDstring+0x21e>
    3a20:	10 e0       	ldi	r17, 0x00	; 0
    3a22:	18 30       	cpi	r17, 0x08	; 8
    3a24:	80 f3       	brcs	.-32     	; 0x3a06 <nibbleToLCDstring+0x202>
    3a26:	37 c0       	rjmp	.+110    	; 0x3a96 <nibbleToLCDstring+0x292>
    3a28:	82 2f       	mov	r24, r18
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	fc 01       	movw	r30, r24
    3a2e:	ed 58       	subi	r30, 0x8D	; 141
    3a30:	fa 4f       	sbci	r31, 0xFA	; 250
    3a32:	30 81       	ld	r19, Z
    3a34:	31 11       	cpse	r19, r1
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <nibbleToLCDstring+0x238>
    3a38:	3f e6       	ldi	r19, 0x6F	; 111
    3a3a:	01 c0       	rjmp	.+2      	; 0x3a3e <nibbleToLCDstring+0x23a>
    3a3c:	39 e4       	ldi	r19, 0x49	; 73
    3a3e:	fc 01       	movw	r30, r24
    3a40:	eb 5d       	subi	r30, 0xDB	; 219
    3a42:	fd 4f       	sbci	r31, 0xFD	; 253
    3a44:	30 83       	st	Z, r19
    3a46:	2f 5f       	subi	r18, 0xFF	; 255
    3a48:	01 c0       	rjmp	.+2      	; 0x3a4c <nibbleToLCDstring+0x248>
    3a4a:	20 e0       	ldi	r18, 0x00	; 0
    3a4c:	28 30       	cpi	r18, 0x08	; 8
    3a4e:	60 f3       	brcs	.-40     	; 0x3a28 <nibbleToLCDstring+0x224>
    3a50:	22 c0       	rjmp	.+68     	; 0x3a96 <nibbleToLCDstring+0x292>
    3a52:	a3 e7       	ldi	r26, 0x73	; 115
    3a54:	b5 e0       	ldi	r27, 0x05	; 5
    3a56:	8c 91       	ld	r24, X
    3a58:	e5 e2       	ldi	r30, 0x25	; 37
    3a5a:	f2 e0       	ldi	r31, 0x02	; 2
    3a5c:	80 5d       	subi	r24, 0xD0	; 208
    3a5e:	80 83       	st	Z, r24
    3a60:	11 96       	adiw	r26, 0x01	; 1
    3a62:	8c 91       	ld	r24, X
    3a64:	80 5c       	subi	r24, 0xC0	; 192
    3a66:	81 83       	std	Z+1, r24	; 0x01
    3a68:	12 82       	std	Z+2, r1	; 0x02
    3a6a:	15 c0       	rjmp	.+42     	; 0x3a96 <nibbleToLCDstring+0x292>
    3a6c:	e3 e7       	ldi	r30, 0x73	; 115
    3a6e:	f5 e0       	ldi	r31, 0x05	; 5
    3a70:	90 81       	ld	r25, Z
    3a72:	81 81       	ldd	r24, Z+1	; 0x01
    3a74:	29 2f       	mov	r18, r25
    3a76:	28 2b       	or	r18, r24
    3a78:	31 f4       	brne	.+12     	; 0x3a86 <nibbleToLCDstring+0x282>
    3a7a:	e5 e2       	ldi	r30, 0x25	; 37
    3a7c:	f2 e0       	ldi	r31, 0x02	; 2
    3a7e:	8d e2       	ldi	r24, 0x2D	; 45
    3a80:	80 83       	st	Z, r24
    3a82:	81 83       	std	Z+1, r24	; 0x01
    3a84:	06 c0       	rjmp	.+12     	; 0x3a92 <nibbleToLCDstring+0x28e>
    3a86:	e5 e2       	ldi	r30, 0x25	; 37
    3a88:	f2 e0       	ldi	r31, 0x02	; 2
    3a8a:	90 5d       	subi	r25, 0xD0	; 208
    3a8c:	90 83       	st	Z, r25
    3a8e:	80 5d       	subi	r24, 0xD0	; 208
    3a90:	81 83       	std	Z+1, r24	; 0x01
    3a92:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    3a96:	df 91       	pop	r29
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	08 95       	ret

00003aa0 <LCDStringOut>:
    3aa0:	0f 93       	push	r16
    3aa2:	1f 93       	push	r17
    3aa4:	cf 93       	push	r28
    3aa6:	8e e1       	ldi	r24, 0x1E	; 30
    3aa8:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    3aac:	c0 e0       	ldi	r28, 0x00	; 0
    3aae:	05 e2       	ldi	r16, 0x25	; 37
    3ab0:	12 e0       	ldi	r17, 0x02	; 2
    3ab2:	0b c0       	rjmp	.+22     	; 0x3aca <LCDStringOut+0x2a>
    3ab4:	f8 01       	movw	r30, r16
    3ab6:	80 81       	ld	r24, Z
    3ab8:	88 23       	and	r24, r24
    3aba:	19 f0       	breq	.+6      	; 0x3ac2 <LCDStringOut+0x22>
    3abc:	0f 5f       	subi	r16, 0xFF	; 255
    3abe:	1f 4f       	sbci	r17, 0xFF	; 255
    3ac0:	01 c0       	rjmp	.+2      	; 0x3ac4 <LCDStringOut+0x24>
    3ac2:	80 e2       	ldi	r24, 0x20	; 32
    3ac4:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    3ac8:	cf 5f       	subi	r28, 0xFF	; 255
    3aca:	ca 30       	cpi	r28, 0x0A	; 10
    3acc:	98 f3       	brcs	.-26     	; 0x3ab4 <LCDStringOut+0x14>
    3ace:	cf 91       	pop	r28
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	08 95       	ret

00003ad6 <nibbleCheckOvfl>:
    3ad6:	8a 30       	cpi	r24, 0x0A	; 10
    3ad8:	1c f4       	brge	.+6      	; 0x3ae0 <nibbleCheckOvfl+0xa>
    3ada:	88 23       	and	r24, r24
    3adc:	1c f0       	brlt	.+6      	; 0x3ae4 <nibbleCheckOvfl+0xe>
    3ade:	08 95       	ret
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	08 95       	ret
    3ae4:	89 e0       	ldi	r24, 0x09	; 9
    3ae6:	08 95       	ret

00003ae8 <nibbleChange>:
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	c8 2f       	mov	r28, r24
    3af2:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3af6:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3afa:	31 96       	adiw	r30, 0x01	; 1
    3afc:	84 91       	lpm	r24, Z
    3afe:	28 2f       	mov	r18, r24
    3b00:	20 71       	andi	r18, 0x10	; 16
    3b02:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <dataType>
    3b06:	8e 2f       	mov	r24, r30
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	32 97       	sbiw	r30, 0x02	; 2
    3b0e:	ed 30       	cpi	r30, 0x0D	; 13
    3b10:	f1 05       	cpc	r31, r1
    3b12:	08 f0       	brcs	.+2      	; 0x3b16 <nibbleChange+0x2e>
    3b14:	93 c1       	rjmp	.+806    	; 0x3e3c <nibbleChange+0x354>
    3b16:	88 27       	eor	r24, r24
    3b18:	e4 57       	subi	r30, 0x74	; 116
    3b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b1e:	0c 94 0d 35 	jmp	0x6a1a	; 0x6a1a <__tablejump2__>
    3b22:	d0 e0       	ldi	r29, 0x00	; 0
    3b24:	cd 58       	subi	r28, 0x8D	; 141
    3b26:	da 4f       	sbci	r29, 0xFA	; 250
    3b28:	88 81       	ld	r24, Y
    3b2a:	68 0f       	add	r22, r24
    3b2c:	6f 70       	andi	r22, 0x0F	; 15
    3b2e:	68 83       	st	Y, r22
    3b30:	85 c1       	rjmp	.+778    	; 0x3e3c <nibbleChange+0x354>
    3b32:	21 11       	cpse	r18, r1
    3b34:	1b c0       	rjmp	.+54     	; 0x3b6c <nibbleChange+0x84>
    3b36:	61 30       	cpi	r22, 0x01	; 1
    3b38:	41 f4       	brne	.+16     	; 0x3b4a <nibbleChange+0x62>
    3b3a:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3b3e:	80 31       	cpi	r24, 0x10	; 16
    3b40:	20 f0       	brcs	.+8      	; 0x3b4a <nibbleChange+0x62>
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3b48:	79 c1       	rjmp	.+754    	; 0x3e3c <nibbleChange+0x354>
    3b4a:	6f 3f       	cpi	r22, 0xFF	; 255
    3b4c:	49 f4       	brne	.+18     	; 0x3b60 <nibbleChange+0x78>
    3b4e:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3b52:	82 50       	subi	r24, 0x02	; 2
    3b54:	8f 30       	cpi	r24, 0x0F	; 15
    3b56:	20 f0       	brcs	.+8      	; 0x3b60 <nibbleChange+0x78>
    3b58:	80 e1       	ldi	r24, 0x10	; 16
    3b5a:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3b5e:	6e c1       	rjmp	.+732    	; 0x3e3c <nibbleChange+0x354>
    3b60:	e3 e7       	ldi	r30, 0x73	; 115
    3b62:	f5 e0       	ldi	r31, 0x05	; 5
    3b64:	80 81       	ld	r24, Z
    3b66:	68 0f       	add	r22, r24
    3b68:	60 83       	st	Z, r22
    3b6a:	68 c1       	rjmp	.+720    	; 0x3e3c <nibbleChange+0x354>
    3b6c:	61 30       	cpi	r22, 0x01	; 1
    3b6e:	41 f4       	brne	.+16     	; 0x3b80 <nibbleChange+0x98>
    3b70:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3b74:	80 31       	cpi	r24, 0x10	; 16
    3b76:	21 f4       	brne	.+8      	; 0x3b80 <nibbleChange+0x98>
    3b78:	8f ef       	ldi	r24, 0xFF	; 255
    3b7a:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3b7e:	5e c1       	rjmp	.+700    	; 0x3e3c <nibbleChange+0x354>
    3b80:	61 30       	cpi	r22, 0x01	; 1
    3b82:	41 f4       	brne	.+16     	; 0x3b94 <nibbleChange+0xac>
    3b84:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3b88:	8f 3f       	cpi	r24, 0xFF	; 255
    3b8a:	21 f4       	brne	.+8      	; 0x3b94 <nibbleChange+0xac>
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3b92:	54 c1       	rjmp	.+680    	; 0x3e3c <nibbleChange+0x354>
    3b94:	6f 3f       	cpi	r22, 0xFF	; 255
    3b96:	41 f4       	brne	.+16     	; 0x3ba8 <nibbleChange+0xc0>
    3b98:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b9e:	21 f4       	brne	.+8      	; 0x3ba8 <nibbleChange+0xc0>
    3ba0:	80 e1       	ldi	r24, 0x10	; 16
    3ba2:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3ba6:	4a c1       	rjmp	.+660    	; 0x3e3c <nibbleChange+0x354>
    3ba8:	6f 3f       	cpi	r22, 0xFF	; 255
    3baa:	41 f4       	brne	.+16     	; 0x3bbc <nibbleChange+0xd4>
    3bac:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3bb0:	81 30       	cpi	r24, 0x01	; 1
    3bb2:	21 f4       	brne	.+8      	; 0x3bbc <nibbleChange+0xd4>
    3bb4:	8f ef       	ldi	r24, 0xFF	; 255
    3bb6:	80 93 73 05 	sts	0x0573, r24	; 0x800573 <nibble>
    3bba:	40 c1       	rjmp	.+640    	; 0x3e3c <nibbleChange+0x354>
    3bbc:	e3 e7       	ldi	r30, 0x73	; 115
    3bbe:	f5 e0       	ldi	r31, 0x05	; 5
    3bc0:	80 81       	ld	r24, Z
    3bc2:	68 0f       	add	r22, r24
    3bc4:	60 83       	st	Z, r22
    3bc6:	3a c1       	rjmp	.+628    	; 0x3e3c <nibbleChange+0x354>
    3bc8:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <nibble+0x1>
    3bcc:	8f 3f       	cpi	r24, 0xFF	; 255
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <nibbleChange+0xea>
    3bd0:	c1 e0       	ldi	r28, 0x01	; 1
    3bd2:	c1 11       	cpse	r28, r1
    3bd4:	16 c0       	rjmp	.+44     	; 0x3c02 <nibbleChange+0x11a>
    3bd6:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3bda:	8c 30       	cpi	r24, 0x0C	; 12
    3bdc:	50 f4       	brcc	.+20     	; 0x3bf2 <nibbleChange+0x10a>
    3bde:	8b 30       	cpi	r24, 0x0B	; 11
    3be0:	11 f4       	brne	.+4      	; 0x3be6 <nibbleChange+0xfe>
    3be2:	61 30       	cpi	r22, 0x01	; 1
    3be4:	41 f0       	breq	.+16     	; 0x3bf6 <nibbleChange+0x10e>
    3be6:	81 11       	cpse	r24, r1
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <nibbleChange+0x106>
    3bea:	6f 3f       	cpi	r22, 0xFF	; 255
    3bec:	31 f0       	breq	.+12     	; 0x3bfa <nibbleChange+0x112>
    3bee:	68 0f       	add	r22, r24
    3bf0:	05 c0       	rjmp	.+10     	; 0x3bfc <nibbleChange+0x114>
    3bf2:	60 e0       	ldi	r22, 0x00	; 0
    3bf4:	03 c0       	rjmp	.+6      	; 0x3bfc <nibbleChange+0x114>
    3bf6:	60 e0       	ldi	r22, 0x00	; 0
    3bf8:	01 c0       	rjmp	.+2      	; 0x3bfc <nibbleChange+0x114>
    3bfa:	6b e0       	ldi	r22, 0x0B	; 11
    3bfc:	60 93 73 05 	sts	0x0573, r22	; 0x800573 <nibble>
    3c00:	2b c0       	rjmp	.+86     	; 0x3c58 <nibbleChange+0x170>
    3c02:	21 11       	cpse	r18, r1
    3c04:	0a c0       	rjmp	.+20     	; 0x3c1a <nibbleChange+0x132>
    3c06:	81 11       	cpse	r24, r1
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <nibbleChange+0x126>
    3c0a:	6f 3f       	cpi	r22, 0xFF	; 255
    3c0c:	c1 f0       	breq	.+48     	; 0x3c3e <nibbleChange+0x156>
    3c0e:	8a 30       	cpi	r24, 0x0A	; 10
    3c10:	11 f4       	brne	.+4      	; 0x3c16 <nibbleChange+0x12e>
    3c12:	61 30       	cpi	r22, 0x01	; 1
    3c14:	b1 f0       	breq	.+44     	; 0x3c42 <nibbleChange+0x15a>
    3c16:	68 0f       	add	r22, r24
    3c18:	1d c0       	rjmp	.+58     	; 0x3c54 <nibbleChange+0x16c>
    3c1a:	81 11       	cpse	r24, r1
    3c1c:	02 c0       	rjmp	.+4      	; 0x3c22 <nibbleChange+0x13a>
    3c1e:	6f 3f       	cpi	r22, 0xFF	; 255
    3c20:	91 f0       	breq	.+36     	; 0x3c46 <nibbleChange+0x15e>
    3c22:	8a 30       	cpi	r24, 0x0A	; 10
    3c24:	11 f4       	brne	.+4      	; 0x3c2a <nibbleChange+0x142>
    3c26:	61 30       	cpi	r22, 0x01	; 1
    3c28:	81 f0       	breq	.+32     	; 0x3c4a <nibbleChange+0x162>
    3c2a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c2c:	11 f4       	brne	.+4      	; 0x3c32 <nibbleChange+0x14a>
    3c2e:	61 30       	cpi	r22, 0x01	; 1
    3c30:	71 f0       	breq	.+28     	; 0x3c4e <nibbleChange+0x166>
    3c32:	8f 3f       	cpi	r24, 0xFF	; 255
    3c34:	11 f4       	brne	.+4      	; 0x3c3a <nibbleChange+0x152>
    3c36:	6f 3f       	cpi	r22, 0xFF	; 255
    3c38:	61 f0       	breq	.+24     	; 0x3c52 <nibbleChange+0x16a>
    3c3a:	68 0f       	add	r22, r24
    3c3c:	0b c0       	rjmp	.+22     	; 0x3c54 <nibbleChange+0x16c>
    3c3e:	6a e0       	ldi	r22, 0x0A	; 10
    3c40:	09 c0       	rjmp	.+18     	; 0x3c54 <nibbleChange+0x16c>
    3c42:	60 e0       	ldi	r22, 0x00	; 0
    3c44:	07 c0       	rjmp	.+14     	; 0x3c54 <nibbleChange+0x16c>
    3c46:	6f ef       	ldi	r22, 0xFF	; 255
    3c48:	05 c0       	rjmp	.+10     	; 0x3c54 <nibbleChange+0x16c>
    3c4a:	6f ef       	ldi	r22, 0xFF	; 255
    3c4c:	03 c0       	rjmp	.+6      	; 0x3c54 <nibbleChange+0x16c>
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	01 c0       	rjmp	.+2      	; 0x3c54 <nibbleChange+0x16c>
    3c52:	6a e0       	ldi	r22, 0x0A	; 10
    3c54:	60 93 74 05 	sts	0x0574, r22	; 0x800574 <nibble+0x1>
    3c58:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <nibble>
    3c5c:	9f 3f       	cpi	r25, 0xFF	; 255
    3c5e:	09 f4       	brne	.+2      	; 0x3c62 <nibbleChange+0x17a>
    3c60:	ed c0       	rjmp	.+474    	; 0x3e3c <nibbleChange+0x354>
    3c62:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <nibble+0x1>
    3c66:	8f 3f       	cpi	r24, 0xFF	; 255
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <nibbleChange+0x184>
    3c6a:	e8 c0       	rjmp	.+464    	; 0x3e3c <nibbleChange+0x354>
    3c6c:	28 2f       	mov	r18, r24
    3c6e:	22 0f       	add	r18, r18
    3c70:	82 0f       	add	r24, r18
    3c72:	28 2f       	mov	r18, r24
    3c74:	22 0f       	add	r18, r18
    3c76:	22 0f       	add	r18, r18
    3c78:	92 0f       	add	r25, r18
    3c7a:	0a f0       	brmi	.+2      	; 0x3c7e <nibbleChange+0x196>
    3c7c:	df c0       	rjmp	.+446    	; 0x3e3c <nibbleChange+0x354>
    3c7e:	e3 e7       	ldi	r30, 0x73	; 115
    3c80:	f5 e0       	ldi	r31, 0x05	; 5
    3c82:	87 e0       	ldi	r24, 0x07	; 7
    3c84:	80 83       	st	Z, r24
    3c86:	8a e0       	ldi	r24, 0x0A	; 10
    3c88:	81 83       	std	Z+1, r24	; 0x01
    3c8a:	d8 c0       	rjmp	.+432    	; 0x3e3c <nibbleChange+0x354>
    3c8c:	c1 11       	cpse	r28, r1
    3c8e:	07 c0       	rjmp	.+14     	; 0x3c9e <nibbleChange+0x1b6>
    3c90:	e3 e7       	ldi	r30, 0x73	; 115
    3c92:	f5 e0       	ldi	r31, 0x05	; 5
    3c94:	80 81       	ld	r24, Z
    3c96:	68 0f       	add	r22, r24
    3c98:	67 70       	andi	r22, 0x07	; 7
    3c9a:	60 83       	st	Z, r22
    3c9c:	cf c0       	rjmp	.+414    	; 0x3e3c <nibbleChange+0x354>
    3c9e:	d0 e0       	ldi	r29, 0x00	; 0
    3ca0:	03 e7       	ldi	r16, 0x73	; 115
    3ca2:	15 e0       	ldi	r17, 0x05	; 5
    3ca4:	cd 58       	subi	r28, 0x8D	; 141
    3ca6:	da 4f       	sbci	r29, 0xFA	; 250
    3ca8:	88 81       	ld	r24, Y
    3caa:	86 0f       	add	r24, r22
    3cac:	14 df       	rcall	.-472    	; 0x3ad6 <nibbleCheckOvfl>
    3cae:	88 83       	st	Y, r24
    3cb0:	f8 01       	movw	r30, r16
    3cb2:	81 81       	ldd	r24, Z+1	; 0x01
    3cb4:	92 81       	ldd	r25, Z+2	; 0x02
    3cb6:	88 0f       	add	r24, r24
    3cb8:	28 2f       	mov	r18, r24
    3cba:	22 0f       	add	r18, r18
    3cbc:	22 0f       	add	r18, r18
    3cbe:	82 0f       	add	r24, r18
    3cc0:	89 0f       	add	r24, r25
    3cc2:	80 32       	cpi	r24, 0x20	; 32
    3cc4:	2c f0       	brlt	.+10     	; 0x3cd0 <nibbleChange+0x1e8>
    3cc6:	83 e0       	ldi	r24, 0x03	; 3
    3cc8:	81 83       	std	Z+1, r24	; 0x01
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	82 83       	std	Z+2, r24	; 0x02
    3cce:	b6 c0       	rjmp	.+364    	; 0x3e3c <nibbleChange+0x354>
    3cd0:	88 23       	and	r24, r24
    3cd2:	0c f0       	brlt	.+2      	; 0x3cd6 <nibbleChange+0x1ee>
    3cd4:	b3 c0       	rjmp	.+358    	; 0x3e3c <nibbleChange+0x354>
    3cd6:	e3 e7       	ldi	r30, 0x73	; 115
    3cd8:	f5 e0       	ldi	r31, 0x05	; 5
    3cda:	11 82       	std	Z+1, r1	; 0x01
    3cdc:	12 82       	std	Z+2, r1	; 0x02
    3cde:	ae c0       	rjmp	.+348    	; 0x3e3c <nibbleChange+0x354>
    3ce0:	d0 e0       	ldi	r29, 0x00	; 0
    3ce2:	03 e7       	ldi	r16, 0x73	; 115
    3ce4:	15 e0       	ldi	r17, 0x05	; 5
    3ce6:	cd 58       	subi	r28, 0x8D	; 141
    3ce8:	da 4f       	sbci	r29, 0xFA	; 250
    3cea:	88 81       	ld	r24, Y
    3cec:	86 0f       	add	r24, r22
    3cee:	f3 de       	rcall	.-538    	; 0x3ad6 <nibbleCheckOvfl>
    3cf0:	88 83       	st	Y, r24
    3cf2:	f8 01       	movw	r30, r16
    3cf4:	20 81       	ld	r18, Z
    3cf6:	81 81       	ldd	r24, Z+1	; 0x01
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	ac 01       	movw	r20, r24
    3cfc:	44 0f       	add	r20, r20
    3cfe:	55 1f       	adc	r21, r21
    3d00:	88 0f       	add	r24, r24
    3d02:	99 1f       	adc	r25, r25
    3d04:	88 0f       	add	r24, r24
    3d06:	99 1f       	adc	r25, r25
    3d08:	88 0f       	add	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	84 0f       	add	r24, r20
    3d0e:	95 1f       	adc	r25, r21
    3d10:	f4 e6       	ldi	r31, 0x64	; 100
    3d12:	2f 9f       	mul	r18, r31
    3d14:	80 0d       	add	r24, r0
    3d16:	91 1d       	adc	r25, r1
    3d18:	11 24       	eor	r1, r1
    3d1a:	f8 01       	movw	r30, r16
    3d1c:	22 81       	ldd	r18, Z+2	; 0x02
    3d1e:	82 0f       	add	r24, r18
    3d20:	91 1d       	adc	r25, r1
    3d22:	8f 3f       	cpi	r24, 0xFF	; 255
    3d24:	91 05       	cpc	r25, r1
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <nibbleChange+0x242>
    3d28:	0c f4       	brge	.+2      	; 0x3d2c <nibbleChange+0x244>
    3d2a:	88 c0       	rjmp	.+272    	; 0x3e3c <nibbleChange+0x354>
    3d2c:	82 e0       	ldi	r24, 0x02	; 2
    3d2e:	80 83       	st	Z, r24
    3d30:	85 e0       	ldi	r24, 0x05	; 5
    3d32:	81 83       	std	Z+1, r24	; 0x01
    3d34:	82 83       	std	Z+2, r24	; 0x02
    3d36:	82 c0       	rjmp	.+260    	; 0x3e3c <nibbleChange+0x354>
    3d38:	22 23       	and	r18, r18
    3d3a:	a1 f0       	breq	.+40     	; 0x3d64 <nibbleChange+0x27c>
    3d3c:	d0 e0       	ldi	r29, 0x00	; 0
    3d3e:	fe 01       	movw	r30, r28
    3d40:	ed 58       	subi	r30, 0x8D	; 141
    3d42:	fa 4f       	sbci	r31, 0xFA	; 250
    3d44:	80 81       	ld	r24, Z
    3d46:	68 0f       	add	r22, r24
    3d48:	60 83       	st	Z, r22
    3d4a:	64 30       	cpi	r22, 0x04	; 4
    3d4c:	19 f4       	brne	.+6      	; 0x3d54 <nibbleChange+0x26c>
    3d4e:	8f ef       	ldi	r24, 0xFF	; 255
    3d50:	80 83       	st	Z, r24
    3d52:	74 c0       	rjmp	.+232    	; 0x3e3c <nibbleChange+0x354>
    3d54:	6e 3f       	cpi	r22, 0xFE	; 254
    3d56:	09 f0       	breq	.+2      	; 0x3d5a <nibbleChange+0x272>
    3d58:	71 c0       	rjmp	.+226    	; 0x3e3c <nibbleChange+0x354>
    3d5a:	cd 58       	subi	r28, 0x8D	; 141
    3d5c:	da 4f       	sbci	r29, 0xFA	; 250
    3d5e:	83 e0       	ldi	r24, 0x03	; 3
    3d60:	88 83       	st	Y, r24
    3d62:	6c c0       	rjmp	.+216    	; 0x3e3c <nibbleChange+0x354>
    3d64:	d0 e0       	ldi	r29, 0x00	; 0
    3d66:	fe 01       	movw	r30, r28
    3d68:	ed 58       	subi	r30, 0x8D	; 141
    3d6a:	fa 4f       	sbci	r31, 0xFA	; 250
    3d6c:	80 81       	ld	r24, Z
    3d6e:	81 11       	cpse	r24, r1
    3d70:	05 c0       	rjmp	.+10     	; 0x3d7c <nibbleChange+0x294>
    3d72:	6f 3f       	cpi	r22, 0xFF	; 255
    3d74:	19 f4       	brne	.+6      	; 0x3d7c <nibbleChange+0x294>
    3d76:	83 e0       	ldi	r24, 0x03	; 3
    3d78:	80 83       	st	Z, r24
    3d7a:	60 c0       	rjmp	.+192    	; 0x3e3c <nibbleChange+0x354>
    3d7c:	83 30       	cpi	r24, 0x03	; 3
    3d7e:	31 f4       	brne	.+12     	; 0x3d8c <nibbleChange+0x2a4>
    3d80:	61 30       	cpi	r22, 0x01	; 1
    3d82:	21 f4       	brne	.+8      	; 0x3d8c <nibbleChange+0x2a4>
    3d84:	cd 58       	subi	r28, 0x8D	; 141
    3d86:	da 4f       	sbci	r29, 0xFA	; 250
    3d88:	18 82       	st	Y, r1
    3d8a:	58 c0       	rjmp	.+176    	; 0x3e3c <nibbleChange+0x354>
    3d8c:	cd 58       	subi	r28, 0x8D	; 141
    3d8e:	da 4f       	sbci	r29, 0xFA	; 250
    3d90:	68 0f       	add	r22, r24
    3d92:	68 83       	st	Y, r22
    3d94:	53 c0       	rjmp	.+166    	; 0x3e3c <nibbleChange+0x354>
    3d96:	d0 e0       	ldi	r29, 0x00	; 0
    3d98:	cd 58       	subi	r28, 0x8D	; 141
    3d9a:	da 4f       	sbci	r29, 0xFA	; 250
    3d9c:	88 81       	ld	r24, Y
    3d9e:	68 0f       	add	r22, r24
    3da0:	63 70       	andi	r22, 0x03	; 3
    3da2:	68 83       	st	Y, r22
    3da4:	4b c0       	rjmp	.+150    	; 0x3e3c <nibbleChange+0x354>
    3da6:	e3 e7       	ldi	r30, 0x73	; 115
    3da8:	f5 e0       	ldi	r31, 0x05	; 5
    3daa:	80 81       	ld	r24, Z
    3dac:	80 95       	com	r24
    3dae:	80 83       	st	Z, r24
    3db0:	45 c0       	rjmp	.+138    	; 0x3e3c <nibbleChange+0x354>
    3db2:	d0 e0       	ldi	r29, 0x00	; 0
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	61 fd       	sbrc	r22, 1
    3db8:	80 e0       	ldi	r24, 0x00	; 0
    3dba:	cd 58       	subi	r28, 0x8D	; 141
    3dbc:	da 4f       	sbci	r29, 0xFA	; 250
    3dbe:	88 83       	st	Y, r24
    3dc0:	3d c0       	rjmp	.+122    	; 0x3e3c <nibbleChange+0x354>
    3dc2:	61 30       	cpi	r22, 0x01	; 1
    3dc4:	41 f4       	brne	.+16     	; 0x3dd6 <nibbleChange+0x2ee>
    3dc6:	d0 e0       	ldi	r29, 0x00	; 0
    3dc8:	cd 58       	subi	r28, 0x8D	; 141
    3dca:	da 4f       	sbci	r29, 0xFA	; 250
    3dcc:	88 81       	ld	r24, Y
    3dce:	87 70       	andi	r24, 0x07	; 7
    3dd0:	8f 5f       	subi	r24, 0xFF	; 255
    3dd2:	88 83       	st	Y, r24
    3dd4:	33 c0       	rjmp	.+102    	; 0x3e3c <nibbleChange+0x354>
    3dd6:	ec 2f       	mov	r30, r28
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	ed 58       	subi	r30, 0x8D	; 141
    3ddc:	fa 4f       	sbci	r31, 0xFA	; 250
    3dde:	80 81       	ld	r24, Z
    3de0:	82 50       	subi	r24, 0x02	; 2
    3de2:	87 70       	andi	r24, 0x07	; 7
    3de4:	8f 5f       	subi	r24, 0xFF	; 255
    3de6:	80 83       	st	Z, r24
    3de8:	29 c0       	rjmp	.+82     	; 0x3e3c <nibbleChange+0x354>
    3dea:	e3 e7       	ldi	r30, 0x73	; 115
    3dec:	f5 e0       	ldi	r31, 0x05	; 5
    3dee:	90 81       	ld	r25, Z
    3df0:	81 81       	ldd	r24, Z+1	; 0x01
    3df2:	99 0f       	add	r25, r25
    3df4:	29 2f       	mov	r18, r25
    3df6:	22 0f       	add	r18, r18
    3df8:	22 0f       	add	r18, r18
    3dfa:	92 0f       	add	r25, r18
    3dfc:	89 0f       	add	r24, r25
    3dfe:	c1 11       	cpse	r28, r1
    3e00:	07 c0       	rjmp	.+14     	; 0x3e10 <nibbleChange+0x328>
    3e02:	66 0f       	add	r22, r22
    3e04:	96 2f       	mov	r25, r22
    3e06:	99 0f       	add	r25, r25
    3e08:	99 0f       	add	r25, r25
    3e0a:	69 0f       	add	r22, r25
    3e0c:	68 0f       	add	r22, r24
    3e0e:	01 c0       	rjmp	.+2      	; 0x3e12 <nibbleChange+0x32a>
    3e10:	68 0f       	add	r22, r24
    3e12:	66 23       	and	r22, r22
    3e14:	1c f0       	brlt	.+6      	; 0x3e1c <nibbleChange+0x334>
    3e16:	61 34       	cpi	r22, 0x41	; 65
    3e18:	1c f4       	brge	.+6      	; 0x3e20 <nibbleChange+0x338>
    3e1a:	03 c0       	rjmp	.+6      	; 0x3e22 <nibbleChange+0x33a>
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	01 c0       	rjmp	.+2      	; 0x3e22 <nibbleChange+0x33a>
    3e20:	60 e0       	ldi	r22, 0x00	; 0
    3e22:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <nibble>
    3e26:	06 c0       	rjmp	.+12     	; 0x3e34 <nibbleChange+0x34c>
    3e28:	e3 e7       	ldi	r30, 0x73	; 115
    3e2a:	f5 e0       	ldi	r31, 0x05	; 5
    3e2c:	80 81       	ld	r24, Z
    3e2e:	8f 5f       	subi	r24, 0xFF	; 255
    3e30:	80 83       	st	Z, r24
    3e32:	6a 50       	subi	r22, 0x0A	; 10
    3e34:	6a 30       	cpi	r22, 0x0A	; 10
    3e36:	c4 f7       	brge	.-16     	; 0x3e28 <nibbleChange+0x340>
    3e38:	60 93 74 05 	sts	0x0574, r22	; 0x800574 <nibble+0x1>
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	1f 91       	pop	r17
    3e42:	0f 91       	pop	r16
    3e44:	08 95       	ret

00003e46 <nibbleToData>:
    3e46:	e0 91 24 05 	lds	r30, 0x0524	; 0x800524 <dataType>
    3e4a:	8e 2f       	mov	r24, r30
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	fc 01       	movw	r30, r24
    3e50:	32 97       	sbiw	r30, 0x02	; 2
    3e52:	ed 30       	cpi	r30, 0x0D	; 13
    3e54:	f1 05       	cpc	r31, r1
    3e56:	08 f0       	brcs	.+2      	; 0x3e5a <nibbleToData+0x14>
    3e58:	da c0       	rjmp	.+436    	; 0x400e <nibbleToData+0x1c8>
    3e5a:	88 27       	eor	r24, r24
    3e5c:	e7 56       	subi	r30, 0x67	; 103
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	8f 4f       	sbci	r24, 0xFF	; 255
    3e62:	0c 94 0d 35 	jmp	0x6a1a	; 0x6a1a <__tablejump2__>
    3e66:	e3 e7       	ldi	r30, 0x73	; 115
    3e68:	f5 e0       	ldi	r31, 0x05	; 5
    3e6a:	80 81       	ld	r24, Z
    3e6c:	20 e1       	ldi	r18, 0x10	; 16
    3e6e:	82 9f       	mul	r24, r18
    3e70:	c0 01       	movw	r24, r0
    3e72:	11 24       	eor	r1, r1
    3e74:	91 81       	ldd	r25, Z+1	; 0x01
    3e76:	9f 70       	andi	r25, 0x0F	; 15
    3e78:	89 2b       	or	r24, r25
    3e7a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3e7e:	08 95       	ret
    3e80:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <nibble>
    3e84:	8f ef       	ldi	r24, 0xFF	; 255
    3e86:	89 0f       	add	r24, r25
    3e88:	80 31       	cpi	r24, 0x10	; 16
    3e8a:	18 f0       	brcs	.+6      	; 0x3e92 <nibbleToData+0x4c>
    3e8c:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <dataEntry>
    3e90:	08 95       	ret
    3e92:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3e96:	08 95       	ret
    3e98:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <nibble>
    3e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    3e9e:	21 f0       	breq	.+8      	; 0x3ea8 <nibbleToData+0x62>
    3ea0:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <nibble+0x1>
    3ea4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ea6:	21 f4       	brne	.+8      	; 0x3eb0 <nibbleToData+0x6a>
    3ea8:	8f ef       	ldi	r24, 0xFF	; 255
    3eaa:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3eae:	08 95       	ret
    3eb0:	28 2f       	mov	r18, r24
    3eb2:	22 0f       	add	r18, r18
    3eb4:	82 0f       	add	r24, r18
    3eb6:	88 0f       	add	r24, r24
    3eb8:	88 0f       	add	r24, r24
    3eba:	89 0f       	add	r24, r25
    3ebc:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3ec0:	08 95       	ret
    3ec2:	e3 e7       	ldi	r30, 0x73	; 115
    3ec4:	f5 e0       	ldi	r31, 0x05	; 5
    3ec6:	80 81       	ld	r24, Z
    3ec8:	30 e2       	ldi	r19, 0x20	; 32
    3eca:	83 9f       	mul	r24, r19
    3ecc:	c0 01       	movw	r24, r0
    3ece:	11 24       	eor	r1, r1
    3ed0:	21 81       	ldd	r18, Z+1	; 0x01
    3ed2:	32 81       	ldd	r19, Z+2	; 0x02
    3ed4:	22 0f       	add	r18, r18
    3ed6:	42 2f       	mov	r20, r18
    3ed8:	44 0f       	add	r20, r20
    3eda:	44 0f       	add	r20, r20
    3edc:	24 0f       	add	r18, r20
    3ede:	23 0f       	add	r18, r19
    3ee0:	20 32       	cpi	r18, 0x20	; 32
    3ee2:	20 f0       	brcs	.+8      	; 0x3eec <nibbleToData+0xa6>
    3ee4:	8f 61       	ori	r24, 0x1F	; 31
    3ee6:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3eea:	08 95       	ret
    3eec:	82 2b       	or	r24, r18
    3eee:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3ef2:	08 95       	ret
    3ef4:	e3 e7       	ldi	r30, 0x73	; 115
    3ef6:	f5 e0       	ldi	r31, 0x05	; 5
    3ef8:	20 81       	ld	r18, Z
    3efa:	81 81       	ldd	r24, Z+1	; 0x01
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	ac 01       	movw	r20, r24
    3f00:	44 0f       	add	r20, r20
    3f02:	55 1f       	adc	r21, r21
    3f04:	88 0f       	add	r24, r24
    3f06:	99 1f       	adc	r25, r25
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	84 0f       	add	r24, r20
    3f12:	95 1f       	adc	r25, r21
    3f14:	34 e6       	ldi	r19, 0x64	; 100
    3f16:	23 9f       	mul	r18, r19
    3f18:	80 0d       	add	r24, r0
    3f1a:	91 1d       	adc	r25, r1
    3f1c:	11 24       	eor	r1, r1
    3f1e:	22 81       	ldd	r18, Z+2	; 0x02
    3f20:	82 0f       	add	r24, r18
    3f22:	91 1d       	adc	r25, r1
    3f24:	8f 3f       	cpi	r24, 0xFF	; 255
    3f26:	91 05       	cpc	r25, r1
    3f28:	29 f0       	breq	.+10     	; 0x3f34 <nibbleToData+0xee>
    3f2a:	20 f0       	brcs	.+8      	; 0x3f34 <nibbleToData+0xee>
    3f2c:	8f ef       	ldi	r24, 0xFF	; 255
    3f2e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3f32:	08 95       	ret
    3f34:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3f38:	08 95       	ret
    3f3a:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3f3e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3f42:	84 30       	cpi	r24, 0x04	; 4
    3f44:	08 f4       	brcc	.+2      	; 0x3f48 <nibbleToData+0x102>
    3f46:	63 c0       	rjmp	.+198    	; 0x400e <nibbleToData+0x1c8>
    3f48:	8f ef       	ldi	r24, 0xFF	; 255
    3f4a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3f4e:	08 95       	ret
    3f50:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3f54:	83 70       	andi	r24, 0x03	; 3
    3f56:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3f5a:	08 95       	ret
    3f5c:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <nibble>
    3f60:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3f64:	08 95       	ret
    3f66:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <dataEntry>
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	0c c0       	rjmp	.+24     	; 0x3f86 <nibbleToData+0x140>
    3f6e:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <dataEntry>
    3f72:	99 0f       	add	r25, r25
    3f74:	e8 2f       	mov	r30, r24
    3f76:	f0 e0       	ldi	r31, 0x00	; 0
    3f78:	ed 58       	subi	r30, 0x8D	; 141
    3f7a:	fa 4f       	sbci	r31, 0xFA	; 250
    3f7c:	20 81       	ld	r18, Z
    3f7e:	92 0f       	add	r25, r18
    3f80:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <dataEntry>
    3f84:	8f 5f       	subi	r24, 0xFF	; 255
    3f86:	88 30       	cpi	r24, 0x08	; 8
    3f88:	90 f3       	brcs	.-28     	; 0x3f6e <nibbleToData+0x128>
    3f8a:	08 95       	ret
    3f8c:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <dataEntry32>
    3f90:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <dataEntry32+0x1>
    3f94:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <dataEntry32+0x2>
    3f98:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <dataEntry32+0x3>
    3f9c:	a1 e5       	ldi	r26, 0x51	; 81
    3f9e:	b5 e0       	ldi	r27, 0x05	; 5
    3fa0:	88 e0       	ldi	r24, 0x08	; 8
    3fa2:	10 c0       	rjmp	.+32     	; 0x3fc4 <nibbleToData+0x17e>
    3fa4:	82 50       	subi	r24, 0x02	; 2
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	ed 58       	subi	r30, 0x8D	; 141
    3faa:	fa 4f       	sbci	r31, 0xFA	; 250
    3fac:	90 81       	ld	r25, Z
    3fae:	e8 2f       	mov	r30, r24
    3fb0:	f0 e0       	ldi	r31, 0x00	; 0
    3fb2:	ed 58       	subi	r30, 0x8D	; 141
    3fb4:	fa 4f       	sbci	r31, 0xFA	; 250
    3fb6:	20 81       	ld	r18, Z
    3fb8:	30 e1       	ldi	r19, 0x10	; 16
    3fba:	23 9f       	mul	r18, r19
    3fbc:	90 0d       	add	r25, r0
    3fbe:	11 24       	eor	r1, r1
    3fc0:	9c 93       	st	X, r25
    3fc2:	11 96       	adiw	r26, 0x01	; 1
    3fc4:	ef ef       	ldi	r30, 0xFF	; 255
    3fc6:	e8 0f       	add	r30, r24
    3fc8:	81 11       	cpse	r24, r1
    3fca:	ec cf       	rjmp	.-40     	; 0x3fa4 <nibbleToData+0x15e>
    3fcc:	08 95       	ret
    3fce:	e3 e7       	ldi	r30, 0x73	; 115
    3fd0:	f5 e0       	ldi	r31, 0x05	; 5
    3fd2:	20 81       	ld	r18, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	89 2f       	mov	r24, r25
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	01 97       	sbiw	r24, 0x01	; 1
    3fdc:	88 0f       	add	r24, r24
    3fde:	99 1f       	adc	r25, r25
    3fe0:	88 0f       	add	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	88 0f       	add	r24, r24
    3fe6:	99 1f       	adc	r25, r25
    3fe8:	9f ef       	ldi	r25, 0xFF	; 255
    3fea:	92 0f       	add	r25, r18
    3fec:	89 2b       	or	r24, r25
    3fee:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    3ff2:	08 95       	ret
    3ff4:	e3 e7       	ldi	r30, 0x73	; 115
    3ff6:	f5 e0       	ldi	r31, 0x05	; 5
    3ff8:	80 81       	ld	r24, Z
    3ffa:	91 81       	ldd	r25, Z+1	; 0x01
    3ffc:	88 0f       	add	r24, r24
    3ffe:	28 2f       	mov	r18, r24
    4000:	22 0f       	add	r18, r18
    4002:	22 0f       	add	r18, r18
    4004:	82 0f       	add	r24, r18
    4006:	89 0f       	add	r24, r25
    4008:	81 50       	subi	r24, 0x01	; 1
    400a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    400e:	08 95       	ret

00004010 <menuTextOut>:
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	8c 01       	movw	r16, r24
    401a:	d6 2f       	mov	r29, r22
    401c:	c0 e0       	ldi	r28, 0x00	; 0
    401e:	0c c0       	rjmp	.+24     	; 0x4038 <menuTextOut+0x28>
    4020:	f8 01       	movw	r30, r16
    4022:	84 91       	lpm	r24, Z
    4024:	88 23       	and	r24, r24
    4026:	19 f0       	breq	.+6      	; 0x402e <menuTextOut+0x1e>
    4028:	0f 5f       	subi	r16, 0xFF	; 255
    402a:	1f 4f       	sbci	r17, 0xFF	; 255
    402c:	02 c0       	rjmp	.+4      	; 0x4032 <menuTextOut+0x22>
    402e:	8d 2f       	mov	r24, r29
    4030:	d0 e2       	ldi	r29, 0x20	; 32
    4032:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    4036:	cf 5f       	subi	r28, 0xFF	; 255
    4038:	ca 30       	cpi	r28, 0x0A	; 10
    403a:	90 f3       	brcs	.-28     	; 0x4020 <menuTextOut+0x10>
    403c:	df 91       	pop	r29
    403e:	cf 91       	pop	r28
    4040:	1f 91       	pop	r17
    4042:	0f 91       	pop	r16
    4044:	08 95       	ret

00004046 <menuParentMenuToLCD>:
    4046:	80 e4       	ldi	r24, 0x40	; 64
    4048:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    404c:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <menuStackIndex>
    4050:	e1 11       	cpse	r30, r1
    4052:	07 c0       	rjmp	.+14     	; 0x4062 <menuParentMenuToLCD+0x1c>
    4054:	6a e3       	ldi	r22, 0x3A	; 58
    4056:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pMenuTopTitle>
    405a:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pMenuTopTitle+0x1>
    405e:	d8 cf       	rjmp	.-80     	; 0x4010 <menuTextOut>
    4060:	08 95       	ret
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	31 97       	sbiw	r30, 0x01	; 1
    4066:	ee 0f       	add	r30, r30
    4068:	ff 1f       	adc	r31, r31
    406a:	e6 5d       	subi	r30, 0xD6	; 214
    406c:	fa 4f       	sbci	r31, 0xFA	; 250
    406e:	80 81       	ld	r24, Z
    4070:	91 81       	ldd	r25, Z+1	; 0x01
    4072:	6a e3       	ldi	r22, 0x3A	; 58
    4074:	02 96       	adiw	r24, 0x02	; 2
    4076:	cc cf       	rjmp	.-104    	; 0x4010 <menuTextOut>
    4078:	08 95       	ret

0000407a <menuDisplayValue>:
    407a:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    407e:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    4082:	84 91       	lpm	r24, Z
    4084:	8f 73       	andi	r24, 0x3F	; 63
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	02 97       	sbiw	r24, 0x02	; 2
    408a:	1c f0       	brlt	.+6      	; 0x4092 <menuDisplayValue+0x18>
    408c:	c8 da       	rcall	.-2672   	; 0x361e <dataToNibbles>
    408e:	ba db       	rcall	.-2188   	; 0x3804 <nibbleToLCDstring>
    4090:	07 cd       	rjmp	.-1522   	; 0x3aa0 <LCDStringOut>
    4092:	08 95       	ret

00004094 <menuCursorSetDataNibble>:
    4094:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <pNibbleInfo>
    4098:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <pNibbleInfo+0x1>
    409c:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <nibbleIndex>
    40a0:	e8 0f       	add	r30, r24
    40a2:	f1 1d       	adc	r31, r1
    40a4:	31 96       	adiw	r30, 0x01	; 1
    40a6:	84 91       	lpm	r24, Z
    40a8:	82 5e       	subi	r24, 0xE2	; 226
    40aa:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    40ae:	20 91 25 05 	lds	r18, 0x0525	; 0x800525 <nibbleIndex>
    40b2:	30 e0       	ldi	r19, 0x00	; 0
    40b4:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <pNibbleInfo>
    40b8:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <pNibbleInfo+0x1>
    40bc:	84 91       	lpm	r24, Z
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	28 17       	cp	r18, r24
    40c4:	39 07       	cpc	r19, r25
    40c6:	14 f4       	brge	.+4      	; 0x40cc <menuCursorSetDataNibble+0x38>
    40c8:	68 da       	rcall	.-2864   	; 0x359a <softkeyRight>
    40ca:	03 c0       	rjmp	.+6      	; 0x40d2 <menuCursorSetDataNibble+0x3e>
    40cc:	83 e0       	ldi	r24, 0x03	; 3
    40ce:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    40d2:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <nibbleIndex>
    40d6:	88 23       	and	r24, r24
    40d8:	11 f0       	breq	.+4      	; 0x40de <menuCursorSetDataNibble+0x4a>
    40da:	59 da       	rcall	.-2894   	; 0x358e <softkeyLeft>
    40dc:	03 c0       	rjmp	.+6      	; 0x40e4 <menuCursorSetDataNibble+0x50>
    40de:	82 e0       	ldi	r24, 0x02	; 2
    40e0:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    40e4:	78 da       	rcall	.-2832   	; 0x35d6 <softkeyPlus>
    40e6:	89 da       	rcall	.-2798   	; 0x35fa <softkeyMinus>
    40e8:	0c 94 aa 34 	jmp	0x6954	; 0x6954 <keylabel_toLCD>
    40ec:	08 95       	ret

000040ee <menuCursorSetExtra>:
    40ee:	84 e1       	ldi	r24, 0x14	; 20
    40f0:	0c 94 09 12 	jmp	0x2412	; 0x2412 <lcd_goto>
    40f4:	08 95       	ret

000040f6 <menuOnEnterStatusMidiIn>:
    40f6:	0f 93       	push	r16
    40f8:	1f 93       	push	r17
    40fa:	cf 93       	push	r28
    40fc:	f8 df       	rcall	.-16     	; 0x40ee <menuCursorSetExtra>
    40fe:	8b e9       	ldi	r24, 0x9B	; 155
    4100:	93 e0       	ldi	r25, 0x03	; 3
    4102:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    4106:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <midiRxBytesCount>
    410a:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <midiRxBytesCount+0x1>
    410e:	0e 94 93 33 	call	0x6726	; 0x6726 <lcd_wordout>
    4112:	8d e2       	ldi	r24, 0x2D	; 45
    4114:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    4118:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <midiRxBytesCount>
    411c:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <midiRxBytesCount+0x1>
    4120:	04 97       	sbiw	r24, 0x04	; 4
    4122:	30 f4       	brcc	.+12     	; 0x4130 <menuOnEnterStatusMidiIn+0x3a>
    4124:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <midiRxBytesCount>
    4128:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <midiRxBytesCount+0x1>
    412c:	c8 2f       	mov	r28, r24
    412e:	01 c0       	rjmp	.+2      	; 0x4132 <menuOnEnterStatusMidiIn+0x3c>
    4130:	c4 e0       	ldi	r28, 0x04	; 4
    4132:	00 91 db 0b 	lds	r16, 0x0BDB	; 0x800bdb <midiRxInIndex>
    4136:	10 e0       	ldi	r17, 0x00	; 0
    4138:	06 56       	subi	r16, 0x66	; 102
    413a:	14 4f       	sbci	r17, 0xF4	; 244
    413c:	13 c0       	rjmp	.+38     	; 0x4164 <menuOnEnterStatusMidiIn+0x6e>
    413e:	8b e0       	ldi	r24, 0x0B	; 11
    4140:	0b 39       	cpi	r16, 0x9B	; 155
    4142:	18 07       	cpc	r17, r24
    4144:	10 f0       	brcs	.+4      	; 0x414a <menuOnEnterStatusMidiIn+0x54>
    4146:	f8 01       	movw	r30, r16
    4148:	02 c0       	rjmp	.+4      	; 0x414e <menuOnEnterStatusMidiIn+0x58>
    414a:	ea eb       	ldi	r30, 0xBA	; 186
    414c:	fb e0       	ldi	r31, 0x0B	; 11
    414e:	8f 01       	movw	r16, r30
    4150:	01 50       	subi	r16, 0x01	; 1
    4152:	11 09       	sbc	r17, r1
    4154:	80 81       	ld	r24, Z
    4156:	0e 94 3a 32 	call	0x6474	; 0x6474 <lcd_hexout>
    415a:	c1 50       	subi	r28, 0x01	; 1
    415c:	19 f0       	breq	.+6      	; 0x4164 <menuOnEnterStatusMidiIn+0x6e>
    415e:	80 e2       	ldi	r24, 0x20	; 32
    4160:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    4164:	c1 11       	cpse	r28, r1
    4166:	eb cf       	rjmp	.-42     	; 0x413e <menuOnEnterStatusMidiIn+0x48>
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	08 95       	ret

00004172 <menuOnEnterStatusMidiOut>:
    4172:	0f 93       	push	r16
    4174:	1f 93       	push	r17
    4176:	cf 93       	push	r28
    4178:	ba df       	rcall	.-140    	; 0x40ee <menuCursorSetExtra>
    417a:	86 e9       	ldi	r24, 0x96	; 150
    417c:	93 e0       	ldi	r25, 0x03	; 3
    417e:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    4182:	80 91 20 0c 	lds	r24, 0x0C20	; 0x800c20 <midiTxBytesCount>
    4186:	90 91 21 0c 	lds	r25, 0x0C21	; 0x800c21 <midiTxBytesCount+0x1>
    418a:	0e 94 93 33 	call	0x6726	; 0x6726 <lcd_wordout>
    418e:	8d e2       	ldi	r24, 0x2D	; 45
    4190:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    4194:	80 91 20 0c 	lds	r24, 0x0C20	; 0x800c20 <midiTxBytesCount>
    4198:	90 91 21 0c 	lds	r25, 0x0C21	; 0x800c21 <midiTxBytesCount+0x1>
    419c:	04 97       	sbiw	r24, 0x04	; 4
    419e:	30 f4       	brcc	.+12     	; 0x41ac <menuOnEnterStatusMidiOut+0x3a>
    41a0:	80 91 20 0c 	lds	r24, 0x0C20	; 0x800c20 <midiTxBytesCount>
    41a4:	90 91 21 0c 	lds	r25, 0x0C21	; 0x800c21 <midiTxBytesCount+0x1>
    41a8:	c8 2f       	mov	r28, r24
    41aa:	01 c0       	rjmp	.+2      	; 0x41ae <menuOnEnterStatusMidiOut+0x3c>
    41ac:	c4 e0       	ldi	r28, 0x04	; 4
    41ae:	00 91 96 0b 	lds	r16, 0x0B96	; 0x800b96 <midiTxInIndex>
    41b2:	10 e0       	ldi	r17, 0x00	; 0
    41b4:	06 54       	subi	r16, 0x46	; 70
    41b6:	14 4f       	sbci	r17, 0xF4	; 244
    41b8:	13 c0       	rjmp	.+38     	; 0x41e0 <menuOnEnterStatusMidiOut+0x6e>
    41ba:	8b e0       	ldi	r24, 0x0B	; 11
    41bc:	0b 3b       	cpi	r16, 0xBB	; 187
    41be:	18 07       	cpc	r17, r24
    41c0:	10 f0       	brcs	.+4      	; 0x41c6 <menuOnEnterStatusMidiOut+0x54>
    41c2:	f8 01       	movw	r30, r16
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <menuOnEnterStatusMidiOut+0x58>
    41c6:	ea ed       	ldi	r30, 0xDA	; 218
    41c8:	fb e0       	ldi	r31, 0x0B	; 11
    41ca:	8f 01       	movw	r16, r30
    41cc:	01 50       	subi	r16, 0x01	; 1
    41ce:	11 09       	sbc	r17, r1
    41d0:	80 81       	ld	r24, Z
    41d2:	0e 94 3a 32 	call	0x6474	; 0x6474 <lcd_hexout>
    41d6:	c1 50       	subi	r28, 0x01	; 1
    41d8:	19 f0       	breq	.+6      	; 0x41e0 <menuOnEnterStatusMidiOut+0x6e>
    41da:	80 e2       	ldi	r24, 0x20	; 32
    41dc:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    41e0:	c1 11       	cpse	r28, r1
    41e2:	eb cf       	rjmp	.-42     	; 0x41ba <menuOnEnterStatusMidiOut+0x48>
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	cf 91       	pop	r28
    41e8:	1f 91       	pop	r17
    41ea:	0f 91       	pop	r16
    41ec:	08 95       	ret

000041ee <menuOnEnterLogDisp>:
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	cf 93       	push	r28
    41f4:	8f 3f       	cpi	r24, 0xFF	; 255
    41f6:	a9 f4       	brne	.+42     	; 0x4222 <menuOnEnterLogDisp+0x34>
    41f8:	0e 94 46 12 	call	0x248c	; 0x248c <log_count>
    41fc:	81 50       	subi	r24, 0x01	; 1
    41fe:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2924>
    4202:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.2925>
    4206:	68 e2       	ldi	r22, 0x28	; 40
    4208:	71 e1       	ldi	r23, 0x11	; 17
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    4210:	62 e2       	ldi	r22, 0x22	; 34
    4212:	71 e1       	ldi	r23, 0x11	; 17
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    421a:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
    421e:	cf ef       	ldi	r28, 0xFF	; 255
    4220:	2f c0       	rjmp	.+94     	; 0x4280 <menuOnEnterLogDisp+0x92>
    4222:	84 30       	cpi	r24, 0x04	; 4
    4224:	49 f4       	brne	.+18     	; 0x4238 <menuOnEnterLogDisp+0x4a>
    4226:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2924>
    422a:	88 23       	and	r24, r24
    422c:	21 f1       	breq	.+72     	; 0x4276 <menuOnEnterLogDisp+0x88>
    422e:	81 50       	subi	r24, 0x01	; 1
    4230:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2924>
    4234:	cf ef       	ldi	r28, 0xFF	; 255
    4236:	24 c0       	rjmp	.+72     	; 0x4280 <menuOnEnterLogDisp+0x92>
    4238:	81 30       	cpi	r24, 0x01	; 1
    423a:	91 f4       	brne	.+36     	; 0x4260 <menuOnEnterLogDisp+0x72>
    423c:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2924>
    4240:	10 e0       	ldi	r17, 0x00	; 0
    4242:	0f 5f       	subi	r16, 0xFF	; 255
    4244:	1f 4f       	sbci	r17, 0xFF	; 255
    4246:	0e 94 46 12 	call	0x248c	; 0x248c <log_count>
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	08 17       	cp	r16, r24
    424e:	19 07       	cpc	r17, r25
    4250:	a4 f4       	brge	.+40     	; 0x427a <menuOnEnterLogDisp+0x8c>
    4252:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2924>
    4256:	8f 5f       	subi	r24, 0xFF	; 255
    4258:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2924>
    425c:	cf ef       	ldi	r28, 0xFF	; 255
    425e:	10 c0       	rjmp	.+32     	; 0x4280 <menuOnEnterLogDisp+0x92>
    4260:	83 30       	cpi	r24, 0x03	; 3
    4262:	11 f0       	breq	.+4      	; 0x4268 <menuOnEnterLogDisp+0x7a>
    4264:	85 30       	cpi	r24, 0x05	; 5
    4266:	59 f4       	brne	.+22     	; 0x427e <menuOnEnterLogDisp+0x90>
    4268:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2925>
    426c:	80 95       	com	r24
    426e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.2925>
    4272:	cf ef       	ldi	r28, 0xFF	; 255
    4274:	05 c0       	rjmp	.+10     	; 0x4280 <menuOnEnterLogDisp+0x92>
    4276:	cf ef       	ldi	r28, 0xFF	; 255
    4278:	03 c0       	rjmp	.+6      	; 0x4280 <menuOnEnterLogDisp+0x92>
    427a:	cf ef       	ldi	r28, 0xFF	; 255
    427c:	01 c0       	rjmp	.+2      	; 0x4280 <menuOnEnterLogDisp+0x92>
    427e:	c0 e0       	ldi	r28, 0x00	; 0
    4280:	cf 3f       	cpi	r28, 0xFF	; 255
    4282:	09 f0       	breq	.+2      	; 0x4286 <menuOnEnterLogDisp+0x98>
    4284:	54 c0       	rjmp	.+168    	; 0x432e <menuOnEnterLogDisp+0x140>
    4286:	33 df       	rcall	.-410    	; 0x40ee <menuCursorSetExtra>
    4288:	0e 94 46 12 	call	0x248c	; 0x248c <log_count>
    428c:	81 11       	cpse	r24, r1
    428e:	06 c0       	rjmp	.+12     	; 0x429c <menuOnEnterLogDisp+0xae>
    4290:	87 e4       	ldi	r24, 0x47	; 71
    4292:	93 e0       	ldi	r25, 0x03	; 3
    4294:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    4298:	c0 e0       	ldi	r28, 0x00	; 0
    429a:	1d c0       	rjmp	.+58     	; 0x42d6 <menuOnEnterLogDisp+0xe8>
    429c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2924>
    42a0:	8f 5f       	subi	r24, 0xFF	; 255
    42a2:	0e 94 76 32 	call	0x64ec	; 0x64ec <lcd_dec2out>
    42a6:	8a e3       	ldi	r24, 0x3A	; 58
    42a8:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    42ac:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2925>
    42b0:	81 11       	cpse	r24, r1
    42b2:	08 c0       	rjmp	.+16     	; 0x42c4 <menuOnEnterLogDisp+0xd6>
    42b4:	60 e2       	ldi	r22, 0x20	; 32
    42b6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2924>
    42ba:	0e 94 e7 13 	call	0x27ce	; 0x27ce <log_getShortTextFromIndex>
    42be:	0e 94 1b 12 	call	0x2436	; 0x2436 <lcd_puts>
    42c2:	06 c0       	rjmp	.+12     	; 0x42d0 <menuOnEnterLogDisp+0xe2>
    42c4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2924>
    42c8:	0e 94 8d 12 	call	0x251a	; 0x251a <getErrorText>
    42cc:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    42d0:	0e 94 1b 34 	call	0x6836	; 0x6836 <lcd_clrEol>
    42d4:	0c df       	rcall	.-488    	; 0x40ee <menuCursorSetExtra>
    42d6:	61 e0       	ldi	r22, 0x01	; 1
    42d8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2925>
    42dc:	8f 3f       	cpi	r24, 0xFF	; 255
    42de:	09 f0       	breq	.+2      	; 0x42e2 <menuOnEnterLogDisp+0xf4>
    42e0:	60 e0       	ldi	r22, 0x00	; 0
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	0e 94 c9 34 	call	0x6992	; 0x6992 <keylabel_statcheck>
    42e8:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2924>
    42ec:	10 e0       	ldi	r17, 0x00	; 0
    42ee:	0f 5f       	subi	r16, 0xFF	; 255
    42f0:	1f 4f       	sbci	r17, 0xFF	; 255
    42f2:	0e 94 46 12 	call	0x248c	; 0x248c <log_count>
    42f6:	90 e0       	ldi	r25, 0x00	; 0
    42f8:	08 17       	cp	r16, r24
    42fa:	19 07       	cpc	r17, r25
    42fc:	34 f4       	brge	.+12     	; 0x430a <menuOnEnterLogDisp+0x11c>
    42fe:	62 e4       	ldi	r22, 0x42	; 66
    4300:	71 e1       	ldi	r23, 0x11	; 17
    4302:	83 e0       	ldi	r24, 0x03	; 3
    4304:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    4308:	03 c0       	rjmp	.+6      	; 0x4310 <menuOnEnterLogDisp+0x122>
    430a:	83 e0       	ldi	r24, 0x03	; 3
    430c:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    4310:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2924>
    4314:	88 23       	and	r24, r24
    4316:	31 f0       	breq	.+12     	; 0x4324 <menuOnEnterLogDisp+0x136>
    4318:	60 e4       	ldi	r22, 0x40	; 64
    431a:	71 e1       	ldi	r23, 0x11	; 17
    431c:	82 e0       	ldi	r24, 0x02	; 2
    431e:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
    4322:	03 c0       	rjmp	.+6      	; 0x432a <menuOnEnterLogDisp+0x13c>
    4324:	82 e0       	ldi	r24, 0x02	; 2
    4326:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    432a:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
    432e:	8c 2f       	mov	r24, r28
    4330:	cf 91       	pop	r28
    4332:	1f 91       	pop	r17
    4334:	0f 91       	pop	r16
    4336:	08 95       	ret

00004338 <menuCursorSetMenu>:
    4338:	8a e4       	ldi	r24, 0x4A	; 74
    433a:	0c 94 09 12 	jmp	0x2412	; 0x2412 <lcd_goto>
    433e:	08 95       	ret

00004340 <menuClearExtraDisp>:
    4340:	d6 de       	rcall	.-596    	; 0x40ee <menuCursorSetExtra>
    4342:	8a e0       	ldi	r24, 0x0A	; 10
    4344:	0c 94 0f 34 	jmp	0x681e	; 0x681e <lcd_blank>
    4348:	08 95       	ret

0000434a <menu_ClearDataDisp>:
    434a:	8e e1       	ldi	r24, 0x1E	; 30
    434c:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4350:	8a e0       	ldi	r24, 0x0A	; 10
    4352:	0c 94 0f 34 	jmp	0x681e	; 0x681e <lcd_blank>
    4356:	08 95       	ret

00004358 <menuClearMenuDisp>:
    4358:	80 e4       	ldi	r24, 0x40	; 64
    435a:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    435e:	8a e0       	ldi	r24, 0x0A	; 10
    4360:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
    4364:	e9 df       	rcall	.-46     	; 0x4338 <menuCursorSetMenu>
    4366:	8a e0       	ldi	r24, 0x0A	; 10
    4368:	0c 94 0f 34 	jmp	0x681e	; 0x681e <lcd_blank>
    436c:	08 95       	ret

0000436e <menu_ClearAllDisp>:
    436e:	f4 df       	rcall	.-24     	; 0x4358 <menuClearMenuDisp>
    4370:	ec df       	rcall	.-40     	; 0x434a <menu_ClearDataDisp>
    4372:	e6 cf       	rjmp	.-52     	; 0x4340 <menuClearExtraDisp>
    4374:	08 95       	ret

00004376 <menuCheckArrowDown>:
    4376:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    437a:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    437e:	84 91       	lpm	r24, Z
    4380:	8f 73       	andi	r24, 0x3F	; 63
    4382:	81 30       	cpi	r24, 0x01	; 1
    4384:	11 f4       	brne	.+4      	; 0x438a <menuCheckArrowDown+0x14>
    4386:	0f c9       	rjmp	.-3554   	; 0x35a6 <softkeyDown>
    4388:	08 95       	ret
    438a:	3e 96       	adiw	r30, 0x0e	; 14
    438c:	05 90       	lpm	r0, Z+
    438e:	f4 91       	lpm	r31, Z
    4390:	e0 2d       	mov	r30, r0
    4392:	30 97       	sbiw	r30, 0x00	; 0
    4394:	59 f0       	breq	.+22     	; 0x43ac <menuCheckArrowDown+0x36>
    4396:	89 30       	cpi	r24, 0x09	; 9
    4398:	39 f4       	brne	.+14     	; 0x43a8 <menuCheckArrowDown+0x32>
    439a:	80 81       	ld	r24, Z
    439c:	81 11       	cpse	r24, r1
    439e:	02 c0       	rjmp	.+4      	; 0x43a4 <menuCheckArrowDown+0x2e>
    43a0:	08 c9       	rjmp	.-3568   	; 0x35b2 <softkeyOn>
    43a2:	08 95       	ret
    43a4:	0c c9       	rjmp	.-3560   	; 0x35be <softkeyOff>
    43a6:	08 95       	ret
    43a8:	fe c8       	rjmp	.-3588   	; 0x35a6 <softkeyDown>
    43aa:	08 95       	ret
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	0c 94 96 34 	jmp	0x692c	; 0x692c <keylabel_clr>
    43b2:	08 95       	ret

000043b4 <menuCurrMenuToLCD>:
    43b4:	cf 93       	push	r28
    43b6:	89 e4       	ldi	r24, 0x49	; 73
    43b8:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    43bc:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    43c0:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    43c4:	c4 91       	lpm	r28, Z
    43c6:	c0 7c       	andi	r28, 0xC0	; 192
    43c8:	c0 38       	cpi	r28, 0x80	; 128
    43ca:	39 f4       	brne	.+14     	; 0x43da <menuCurrMenuToLCD+0x26>
    43cc:	80 e2       	ldi	r24, 0x20	; 32
    43ce:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    43d2:	82 e0       	ldi	r24, 0x02	; 2
    43d4:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    43d8:	04 c0       	rjmp	.+8      	; 0x43e2 <menuCurrMenuToLCD+0x2e>
    43da:	8f e7       	ldi	r24, 0x7F	; 127
    43dc:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    43e0:	d6 d8       	rcall	.-3668   	; 0x358e <softkeyLeft>
    43e2:	c0 3c       	cpi	r28, 0xC0	; 192
    43e4:	29 f4       	brne	.+10     	; 0x43f0 <menuCurrMenuToLCD+0x3c>
    43e6:	83 e0       	ldi	r24, 0x03	; 3
    43e8:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    43ec:	c0 e2       	ldi	r28, 0x20	; 32
    43ee:	02 c0       	rjmp	.+4      	; 0x43f4 <menuCurrMenuToLCD+0x40>
    43f0:	d4 d8       	rcall	.-3672   	; 0x359a <softkeyRight>
    43f2:	ce e7       	ldi	r28, 0x7E	; 126
    43f4:	ea d8       	rcall	.-3628   	; 0x35ca <softkeyUp>
    43f6:	bf df       	rcall	.-130    	; 0x4376 <menuCheckArrowDown>
    43f8:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <currentMenu>
    43fc:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <currentMenu+0x1>
    4400:	6c 2f       	mov	r22, r28
    4402:	02 96       	adiw	r24, 0x02	; 2
    4404:	05 de       	rcall	.-1014   	; 0x4010 <menuTextOut>
    4406:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
    440a:	96 df       	rcall	.-212    	; 0x4338 <menuCursorSetMenu>
    440c:	cf 91       	pop	r28
    440e:	08 95       	ret

00004410 <menuItemChanged>:
    4410:	8f ef       	ldi	r24, 0xFF	; 255
    4412:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4416:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <currentMenu>
    441a:	90 91 59 05 	lds	r25, 0x0559	; 0x800559 <currentMenu+0x1>
    441e:	fc 01       	movw	r30, r24
    4420:	24 91       	lpm	r18, Z
    4422:	62 2f       	mov	r22, r18
    4424:	6f 73       	andi	r22, 0x3F	; 63
    4426:	62 30       	cpi	r22, 0x02	; 2
    4428:	08 f4       	brcc	.+2      	; 0x442c <menuItemChanged+0x1c>
    442a:	49 c0       	rjmp	.+146    	; 0x44be <menuItemChanged+0xae>
    442c:	9c 01       	movw	r18, r24
    442e:	22 5f       	subi	r18, 0xF2	; 242
    4430:	3f 4f       	sbci	r19, 0xFF	; 255
    4432:	f9 01       	movw	r30, r18
    4434:	45 91       	lpm	r20, Z+
    4436:	55 91       	lpm	r21, Z+
    4438:	41 15       	cp	r20, r1
    443a:	51 05       	cpc	r21, r1
    443c:	09 f4       	brne	.+2      	; 0x4440 <menuItemChanged+0x30>
    443e:	3f c0       	rjmp	.+126    	; 0x44be <menuItemChanged+0xae>
    4440:	e6 2f       	mov	r30, r22
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	31 97       	sbiw	r30, 0x01	; 1
    4446:	9f 01       	movw	r18, r30
    4448:	22 0f       	add	r18, r18
    444a:	33 1f       	adc	r19, r19
    444c:	22 0f       	add	r18, r18
    444e:	33 1f       	adc	r19, r19
    4450:	22 0f       	add	r18, r18
    4452:	33 1f       	adc	r19, r19
    4454:	e2 0f       	add	r30, r18
    4456:	f3 1f       	adc	r31, r19
    4458:	e7 55       	subi	r30, 0x57	; 87
    445a:	fc 4f       	sbci	r31, 0xFC	; 252
    445c:	f0 93 29 05 	sts	0x0529, r31	; 0x800529 <pNibbleInfo+0x1>
    4460:	e0 93 28 05 	sts	0x0528, r30	; 0x800528 <pNibbleInfo>
    4464:	24 91       	lpm	r18, Z
    4466:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <nibbleCount>
    446a:	fc 01       	movw	r30, r24
    446c:	25 91       	lpm	r18, Z+
    446e:	2f 73       	andi	r18, 0x3F	; 63
    4470:	20 93 24 05 	sts	0x0524, r18	; 0x800524 <dataType>
    4474:	24 91       	lpm	r18, Z
    4476:	22 23       	and	r18, r18
    4478:	2c f4       	brge	.+10     	; 0x4484 <menuItemChanged+0x74>
    447a:	20 91 60 05 	lds	r18, 0x0560	; 0x800560 <DataAdressOffset>
    447e:	30 91 61 05 	lds	r19, 0x0561	; 0x800561 <DataAdressOffset+0x1>
    4482:	02 c0       	rjmp	.+4      	; 0x4488 <menuItemChanged+0x78>
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	24 0f       	add	r18, r20
    448a:	35 1f       	adc	r19, r21
    448c:	fc 01       	movw	r30, r24
    448e:	84 91       	lpm	r24, Z
    4490:	8f 73       	andi	r24, 0x3F	; 63
    4492:	8b 30       	cpi	r24, 0x0B	; 11
    4494:	71 f4       	brne	.+28     	; 0x44b2 <menuItemChanged+0xa2>
    4496:	f9 01       	movw	r30, r18
    4498:	80 81       	ld	r24, Z
    449a:	91 81       	ldd	r25, Z+1	; 0x01
    449c:	a2 81       	ldd	r26, Z+2	; 0x02
    449e:	b3 81       	ldd	r27, Z+3	; 0x03
    44a0:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <dataEntry32>
    44a4:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <dataEntry32+0x1>
    44a8:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <dataEntry32+0x2>
    44ac:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <dataEntry32+0x3>
    44b0:	04 c0       	rjmp	.+8      	; 0x44ba <menuItemChanged+0xaa>
    44b2:	f9 01       	movw	r30, r18
    44b4:	80 81       	ld	r24, Z
    44b6:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <dataEntry>
    44ba:	df dd       	rcall	.-1090   	; 0x407a <menuDisplayValue>
    44bc:	07 c0       	rjmp	.+14     	; 0x44cc <menuItemChanged+0xbc>
    44be:	45 df       	rcall	.-374    	; 0x434a <menu_ClearDataDisp>
    44c0:	89 ea       	ldi	r24, 0xA9	; 169
    44c2:	93 e0       	ldi	r25, 0x03	; 3
    44c4:	90 93 29 05 	sts	0x0529, r25	; 0x800529 <pNibbleInfo+0x1>
    44c8:	80 93 28 05 	sts	0x0528, r24	; 0x800528 <pNibbleInfo>
    44cc:	54 df       	rcall	.-344    	; 0x4376 <menuCheckArrowDown>
    44ce:	34 cf       	rjmp	.-408    	; 0x4338 <menuCursorSetMenu>
    44d0:	08 95       	ret

000044d2 <menu_InitLCD>:
    44d2:	36 df       	rcall	.-404    	; 0x4340 <menuClearExtraDisp>
    44d4:	9d df       	rcall	.-198    	; 0x4410 <menuItemChanged>
    44d6:	b7 dd       	rcall	.-1170   	; 0x4046 <menuParentMenuToLCD>
    44d8:	6d df       	rcall	.-294    	; 0x43b4 <menuCurrMenuToLCD>
    44da:	0c 94 32 34 	jmp	0x6864	; 0x6864 <lcd_cursosblink>
    44de:	08 95       	ret

000044e0 <menu_ProcessMessage>:
    44e0:	cf 93       	push	r28
    44e2:	c8 2f       	mov	r28, r24
    44e4:	0e 94 32 34 	call	0x6864	; 0x6864 <lcd_cursosblink>
    44e8:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    44ec:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    44f0:	84 91       	lpm	r24, Z
    44f2:	8f 73       	andi	r24, 0x3F	; 63
    44f4:	81 30       	cpi	r24, 0x01	; 1
    44f6:	29 f0       	breq	.+10     	; 0x4502 <menu_ProcessMessage+0x22>
    44f8:	80 91 25 05 	lds	r24, 0x0525	; 0x800525 <nibbleIndex>
    44fc:	8f 3f       	cpi	r24, 0xFF	; 255
    44fe:	09 f0       	breq	.+2      	; 0x4502 <menu_ProcessMessage+0x22>
    4500:	5b c1       	rjmp	.+694    	; 0x47b8 <menu_ProcessMessage+0x2d8>
    4502:	31 96       	adiw	r30, 0x01	; 1
    4504:	84 91       	lpm	r24, Z
    4506:	86 ff       	sbrs	r24, 6
    4508:	02 c0       	rjmp	.+4      	; 0x450e <menu_ProcessMessage+0x2e>
    450a:	1a df       	rcall	.-460    	; 0x4340 <menuClearExtraDisp>
    450c:	15 df       	rcall	.-470    	; 0x4338 <menuCursorSetMenu>
    450e:	60 91 58 05 	lds	r22, 0x0558	; 0x800558 <currentMenu>
    4512:	70 91 59 05 	lds	r23, 0x0559	; 0x800559 <currentMenu+0x1>
    4516:	cb 01       	movw	r24, r22
    4518:	01 96       	adiw	r24, 0x01	; 1
    451a:	fc 01       	movw	r30, r24
    451c:	84 91       	lpm	r24, Z
    451e:	98 2f       	mov	r25, r24
    4520:	90 72       	andi	r25, 0x20	; 32
    4522:	85 ff       	sbrs	r24, 5
    4524:	1f c0       	rjmp	.+62     	; 0x4564 <menu_ProcessMessage+0x84>
    4526:	9b 01       	movw	r18, r22
    4528:	20 5f       	subi	r18, 0xF0	; 240
    452a:	3f 4f       	sbci	r19, 0xFF	; 255
    452c:	f9 01       	movw	r30, r18
    452e:	25 91       	lpm	r18, Z+
    4530:	35 91       	lpm	r19, Z+
    4532:	21 15       	cp	r18, r1
    4534:	31 05       	cpc	r19, r1
    4536:	b1 f0       	breq	.+44     	; 0x4564 <menu_ProcessMessage+0x84>
    4538:	40 91 25 05 	lds	r20, 0x0525	; 0x800525 <nibbleIndex>
    453c:	4f 3f       	cpi	r20, 0xFF	; 255
    453e:	91 f0       	breq	.+36     	; 0x4564 <menu_ProcessMessage+0x84>
    4540:	8c 2f       	mov	r24, r28
    4542:	f9 01       	movw	r30, r18
    4544:	19 95       	eicall
    4546:	8f 3f       	cpi	r24, 0xFF	; 255
    4548:	21 f4       	brne	.+8      	; 0x4552 <menu_ProcessMessage+0x72>
    454a:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <nibbleIndex>
    454e:	80 e0       	ldi	r24, 0x00	; 0
    4550:	f5 c1       	rjmp	.+1002   	; 0x493c <menu_ProcessMessage+0x45c>
    4552:	f6 de       	rcall	.-532    	; 0x4340 <menuClearExtraDisp>
    4554:	fa de       	rcall	.-524    	; 0x434a <menu_ClearDataDisp>
    4556:	f0 de       	rcall	.-544    	; 0x4338 <menuCursorSetMenu>
    4558:	8f ef       	ldi	r24, 0xFF	; 255
    455a:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <nibbleIndex>
    455e:	2a df       	rcall	.-428    	; 0x43b4 <menuCurrMenuToLCD>
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	ec c1       	rjmp	.+984    	; 0x493c <menu_ProcessMessage+0x45c>
    4564:	c3 30       	cpi	r28, 0x03	; 3
    4566:	09 f4       	brne	.+2      	; 0x456a <menu_ProcessMessage+0x8a>
    4568:	64 c0       	rjmp	.+200    	; 0x4632 <menu_ProcessMessage+0x152>
    456a:	28 f4       	brcc	.+10     	; 0x4576 <menu_ProcessMessage+0x96>
    456c:	c1 30       	cpi	r28, 0x01	; 1
    456e:	51 f0       	breq	.+20     	; 0x4584 <menu_ProcessMessage+0xa4>
    4570:	c2 30       	cpi	r28, 0x02	; 2
    4572:	31 f1       	breq	.+76     	; 0x45c0 <menu_ProcessMessage+0xe0>
    4574:	ce c1       	rjmp	.+924    	; 0x4912 <menu_ProcessMessage+0x432>
    4576:	c5 30       	cpi	r28, 0x05	; 5
    4578:	09 f4       	brne	.+2      	; 0x457c <menu_ProcessMessage+0x9c>
    457a:	5b c0       	rjmp	.+182    	; 0x4632 <menu_ProcessMessage+0x152>
    457c:	90 f0       	brcs	.+36     	; 0x45a2 <menu_ProcessMessage+0xc2>
    457e:	c6 30       	cpi	r28, 0x06	; 6
    4580:	f9 f0       	breq	.+62     	; 0x45c0 <menu_ProcessMessage+0xe0>
    4582:	c7 c1       	rjmp	.+910    	; 0x4912 <menu_ProcessMessage+0x432>
    4584:	fb 01       	movw	r30, r22
    4586:	84 91       	lpm	r24, Z
    4588:	80 7c       	andi	r24, 0xC0	; 192
    458a:	80 3c       	cpi	r24, 0xC0	; 192
    458c:	09 f4       	brne	.+2      	; 0x4590 <menu_ProcessMessage+0xb0>
    458e:	c3 c1       	rjmp	.+902    	; 0x4916 <menu_ProcessMessage+0x436>
    4590:	74 96       	adiw	r30, 0x14	; 20
    4592:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    4596:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    459a:	3a df       	rcall	.-396    	; 0x4410 <menuItemChanged>
    459c:	0b df       	rcall	.-490    	; 0x43b4 <menuCurrMenuToLCD>
    459e:	80 e0       	ldi	r24, 0x00	; 0
    45a0:	cd c1       	rjmp	.+922    	; 0x493c <menu_ProcessMessage+0x45c>
    45a2:	fb 01       	movw	r30, r22
    45a4:	84 91       	lpm	r24, Z
    45a6:	80 7c       	andi	r24, 0xC0	; 192
    45a8:	80 38       	cpi	r24, 0x80	; 128
    45aa:	09 f4       	brne	.+2      	; 0x45ae <menu_ProcessMessage+0xce>
    45ac:	b6 c1       	rjmp	.+876    	; 0x491a <menu_ProcessMessage+0x43a>
    45ae:	74 97       	sbiw	r30, 0x14	; 20
    45b0:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    45b4:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    45b8:	2b df       	rcall	.-426    	; 0x4410 <menuItemChanged>
    45ba:	fc de       	rcall	.-520    	; 0x43b4 <menuCurrMenuToLCD>
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	be c1       	rjmp	.+892    	; 0x493c <menu_ProcessMessage+0x45c>
    45c0:	84 ff       	sbrs	r24, 4
    45c2:	04 c0       	rjmp	.+8      	; 0x45cc <menu_ProcessMessage+0xec>
    45c4:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <menuVMenuSoftKey+0x1>
    45c8:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <menuVMenuSoftKey>
    45cc:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <menuStackIndex>
    45d0:	ee 23       	and	r30, r30
    45d2:	e9 f0       	breq	.+58     	; 0x460e <menu_ProcessMessage+0x12e>
    45d4:	e1 50       	subi	r30, 0x01	; 1
    45d6:	e0 93 17 05 	sts	0x0517, r30	; 0x800517 <menuStackIndex>
    45da:	f0 e0       	ldi	r31, 0x00	; 0
    45dc:	ee 0f       	add	r30, r30
    45de:	ff 1f       	adc	r31, r31
    45e0:	e6 5d       	subi	r30, 0xD6	; 214
    45e2:	fa 4f       	sbci	r31, 0xFA	; 250
    45e4:	01 90       	ld	r0, Z+
    45e6:	f0 81       	ld	r31, Z
    45e8:	e0 2d       	mov	r30, r0
    45ea:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    45ee:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    45f2:	72 96       	adiw	r30, 0x12	; 18
    45f4:	05 90       	lpm	r0, Z+
    45f6:	f4 91       	lpm	r31, Z
    45f8:	e0 2d       	mov	r30, r0
    45fa:	30 97       	sbiw	r30, 0x00	; 0
    45fc:	11 f0       	breq	.+4      	; 0x4602 <menu_ProcessMessage+0x122>
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	19 95       	eicall
    4602:	9e de       	rcall	.-708    	; 0x4340 <menuClearExtraDisp>
    4604:	20 dd       	rcall	.-1472   	; 0x4046 <menuParentMenuToLCD>
    4606:	d6 de       	rcall	.-596    	; 0x43b4 <menuCurrMenuToLCD>
    4608:	03 df       	rcall	.-506    	; 0x4410 <menuItemChanged>
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	97 c1       	rjmp	.+814    	; 0x493c <menu_ProcessMessage+0x45c>
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    461a:	82 e0       	ldi	r24, 0x02	; 2
    461c:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    4620:	83 e0       	ldi	r24, 0x03	; 3
    4622:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    4626:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
    462a:	0e 94 39 34 	call	0x6872	; 0x6872 <lcd_cursoroff>
    462e:	8f ef       	ldi	r24, 0xFF	; 255
    4630:	85 c1       	rjmp	.+778    	; 0x493c <menu_ProcessMessage+0x45c>
    4632:	fb 01       	movw	r30, r22
    4634:	24 91       	lpm	r18, Z
    4636:	2f 73       	andi	r18, 0x3F	; 63
    4638:	30 e0       	ldi	r19, 0x00	; 0
    463a:	22 30       	cpi	r18, 0x02	; 2
    463c:	31 05       	cpc	r19, r1
    463e:	0c f4       	brge	.+2      	; 0x4642 <menu_ProcessMessage+0x162>
    4640:	3b c0       	rjmp	.+118    	; 0x46b8 <menu_ProcessMessage+0x1d8>
    4642:	70 96       	adiw	r30, 0x10	; 16
    4644:	05 90       	lpm	r0, Z+
    4646:	f4 91       	lpm	r31, Z
    4648:	e0 2d       	mov	r30, r0
    464a:	30 97       	sbiw	r30, 0x00	; 0
    464c:	19 f0       	breq	.+6      	; 0x4654 <menu_ProcessMessage+0x174>
    464e:	8c 2f       	mov	r24, r28
    4650:	19 95       	eicall
    4652:	de de       	rcall	.-580    	; 0x4410 <menuItemChanged>
    4654:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <currentMenu>
    4658:	30 91 59 05 	lds	r19, 0x0559	; 0x800559 <currentMenu+0x1>
    465c:	c9 01       	movw	r24, r18
    465e:	01 96       	adiw	r24, 0x01	; 1
    4660:	fc 01       	movw	r30, r24
    4662:	84 91       	lpm	r24, Z
    4664:	83 fd       	sbrc	r24, 3
    4666:	5b c1       	rjmp	.+694    	; 0x491e <menu_ProcessMessage+0x43e>
    4668:	c9 01       	movw	r24, r18
    466a:	0e 96       	adiw	r24, 0x0e	; 14
    466c:	fc 01       	movw	r30, r24
    466e:	85 91       	lpm	r24, Z+
    4670:	95 91       	lpm	r25, Z+
    4672:	89 2b       	or	r24, r25
    4674:	09 f4       	brne	.+2      	; 0x4678 <menu_ProcessMessage+0x198>
    4676:	55 c1       	rjmp	.+682    	; 0x4922 <menu_ProcessMessage+0x442>
    4678:	f9 01       	movw	r30, r18
    467a:	84 91       	lpm	r24, Z
    467c:	8f 73       	andi	r24, 0x3F	; 63
    467e:	89 30       	cpi	r24, 0x09	; 9
    4680:	b1 f4       	brne	.+44     	; 0x46ae <menu_ProcessMessage+0x1ce>
    4682:	61 e0       	ldi	r22, 0x01	; 1
    4684:	80 e0       	ldi	r24, 0x00	; 0
    4686:	30 da       	rcall	.-2976   	; 0x3ae8 <nibbleChange>
    4688:	de db       	rcall	.-2116   	; 0x3e46 <nibbleToData>
    468a:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    468e:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    4692:	3e 96       	adiw	r30, 0x0e	; 14
    4694:	05 90       	lpm	r0, Z+
    4696:	f4 91       	lpm	r31, Z
    4698:	e0 2d       	mov	r30, r0
    469a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    469e:	80 83       	st	Z, r24
    46a0:	ec dc       	rcall	.-1576   	; 0x407a <menuDisplayValue>
    46a2:	69 de       	rcall	.-814    	; 0x4376 <menuCheckArrowDown>
    46a4:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
    46a8:	47 de       	rcall	.-882    	; 0x4338 <menuCursorSetMenu>
    46aa:	80 e0       	ldi	r24, 0x00	; 0
    46ac:	47 c1       	rjmp	.+654    	; 0x493c <menu_ProcessMessage+0x45c>
    46ae:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <nibbleIndex>
    46b2:	f0 dc       	rcall	.-1568   	; 0x4094 <menuCursorSetDataNibble>
    46b4:	80 e0       	ldi	r24, 0x00	; 0
    46b6:	42 c1       	rjmp	.+644    	; 0x493c <menu_ProcessMessage+0x45c>
    46b8:	2f ef       	ldi	r18, 0xFF	; 255
    46ba:	20 93 25 05 	sts	0x0525, r18	; 0x800525 <nibbleIndex>
    46be:	84 ff       	sbrs	r24, 4
    46c0:	26 c0       	rjmp	.+76     	; 0x470e <menu_ProcessMessage+0x22e>
    46c2:	70 93 7d 05 	sts	0x057D, r23	; 0x80057d <menuVMenuSoftKey+0x1>
    46c6:	60 93 7c 05 	sts	0x057C, r22	; 0x80057c <menuVMenuSoftKey>
    46ca:	e0 91 17 05 	lds	r30, 0x0517	; 0x800517 <menuStackIndex>
    46ce:	ee 23       	and	r30, r30
    46d0:	09 f4       	brne	.+2      	; 0x46d4 <menu_ProcessMessage+0x1f4>
    46d2:	29 c1       	rjmp	.+594    	; 0x4926 <menu_ProcessMessage+0x446>
    46d4:	e1 50       	subi	r30, 0x01	; 1
    46d6:	e0 93 17 05 	sts	0x0517, r30	; 0x800517 <menuStackIndex>
    46da:	f0 e0       	ldi	r31, 0x00	; 0
    46dc:	ee 0f       	add	r30, r30
    46de:	ff 1f       	adc	r31, r31
    46e0:	e6 5d       	subi	r30, 0xD6	; 214
    46e2:	fa 4f       	sbci	r31, 0xFA	; 250
    46e4:	01 90       	ld	r0, Z+
    46e6:	f0 81       	ld	r31, Z
    46e8:	e0 2d       	mov	r30, r0
    46ea:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    46ee:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    46f2:	72 96       	adiw	r30, 0x12	; 18
    46f4:	05 90       	lpm	r0, Z+
    46f6:	f4 91       	lpm	r31, Z
    46f8:	e0 2d       	mov	r30, r0
    46fa:	30 97       	sbiw	r30, 0x00	; 0
    46fc:	11 f0       	breq	.+4      	; 0x4702 <menu_ProcessMessage+0x222>
    46fe:	80 e0       	ldi	r24, 0x00	; 0
    4700:	19 95       	eicall
    4702:	1e de       	rcall	.-964    	; 0x4340 <menuClearExtraDisp>
    4704:	a0 dc       	rcall	.-1728   	; 0x4046 <menuParentMenuToLCD>
    4706:	56 de       	rcall	.-852    	; 0x43b4 <menuCurrMenuToLCD>
    4708:	83 de       	rcall	.-762    	; 0x4410 <menuItemChanged>
    470a:	80 e0       	ldi	r24, 0x00	; 0
    470c:	17 c1       	rjmp	.+558    	; 0x493c <menu_ProcessMessage+0x45c>
    470e:	fb 01       	movw	r30, r22
    4710:	70 96       	adiw	r30, 0x10	; 16
    4712:	05 90       	lpm	r0, Z+
    4714:	f4 91       	lpm	r31, Z
    4716:	e0 2d       	mov	r30, r0
    4718:	30 97       	sbiw	r30, 0x00	; 0
    471a:	99 f0       	breq	.+38     	; 0x4742 <menu_ProcessMessage+0x262>
    471c:	99 23       	and	r25, r25
    471e:	71 f0       	breq	.+28     	; 0x473c <menu_ProcessMessage+0x25c>
    4720:	8f ef       	ldi	r24, 0xFF	; 255
    4722:	19 95       	eicall
    4724:	8f 3f       	cpi	r24, 0xFF	; 255
    4726:	19 f4       	brne	.+6      	; 0x472e <menu_ProcessMessage+0x24e>
    4728:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <nibbleIndex>
    472c:	0a c0       	rjmp	.+20     	; 0x4742 <menu_ProcessMessage+0x262>
    472e:	08 de       	rcall	.-1008   	; 0x4340 <menuClearExtraDisp>
    4730:	0c de       	rcall	.-1000   	; 0x434a <menu_ClearDataDisp>
    4732:	02 de       	rcall	.-1020   	; 0x4338 <menuCursorSetMenu>
    4734:	8f ef       	ldi	r24, 0xFF	; 255
    4736:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <nibbleIndex>
    473a:	03 c0       	rjmp	.+6      	; 0x4742 <menu_ProcessMessage+0x262>
    473c:	85 e0       	ldi	r24, 0x05	; 5
    473e:	19 95       	eicall
    4740:	fb dd       	rcall	.-1034   	; 0x4338 <menuCursorSetMenu>
    4742:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <currentMenu>
    4746:	30 91 59 05 	lds	r19, 0x0559	; 0x800559 <currentMenu+0x1>
    474a:	c9 01       	movw	r24, r18
    474c:	0c 96       	adiw	r24, 0x0c	; 12
    474e:	fc 01       	movw	r30, r24
    4750:	85 91       	lpm	r24, Z+
    4752:	95 91       	lpm	r25, Z+
    4754:	89 2b       	or	r24, r25
    4756:	09 f4       	brne	.+2      	; 0x475a <menu_ProcessMessage+0x27a>
    4758:	e8 c0       	rjmp	.+464    	; 0x492a <menu_ProcessMessage+0x44a>
    475a:	a0 91 17 05 	lds	r26, 0x0517	; 0x800517 <menuStackIndex>
    475e:	a0 31       	cpi	r26, 0x10	; 16
    4760:	08 f0       	brcs	.+2      	; 0x4764 <menu_ProcessMessage+0x284>
    4762:	e5 c0       	rjmp	.+458    	; 0x492e <menu_ProcessMessage+0x44e>
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	8a 0f       	add	r24, r26
    4768:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <menuStackIndex>
    476c:	b0 e0       	ldi	r27, 0x00	; 0
    476e:	aa 0f       	add	r26, r26
    4770:	bb 1f       	adc	r27, r27
    4772:	a6 5d       	subi	r26, 0xD6	; 214
    4774:	ba 4f       	sbci	r27, 0xFA	; 250
    4776:	2d 93       	st	X+, r18
    4778:	3c 93       	st	X, r19
    477a:	c9 01       	movw	r24, r18
    477c:	01 96       	adiw	r24, 0x01	; 1
    477e:	fc 01       	movw	r30, r24
    4780:	84 91       	lpm	r24, Z
    4782:	83 ff       	sbrs	r24, 3
    4784:	0b c0       	rjmp	.+22     	; 0x479c <menu_ProcessMessage+0x2bc>
    4786:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <menuVMenuSoftKey>
    478a:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <menuVMenuSoftKey+0x1>
    478e:	00 97       	sbiw	r24, 0x00	; 0
    4790:	29 f0       	breq	.+10     	; 0x479c <menu_ProcessMessage+0x2bc>
    4792:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    4796:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
    479a:	08 c0       	rjmp	.+16     	; 0x47ac <menu_ProcessMessage+0x2cc>
    479c:	f9 01       	movw	r30, r18
    479e:	3c 96       	adiw	r30, 0x0c	; 12
    47a0:	85 91       	lpm	r24, Z+
    47a2:	95 91       	lpm	r25, Z+
    47a4:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    47a8:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
    47ac:	c9 dd       	rcall	.-1134   	; 0x4340 <menuClearExtraDisp>
    47ae:	4b dc       	rcall	.-1898   	; 0x4046 <menuParentMenuToLCD>
    47b0:	01 de       	rcall	.-1022   	; 0x43b4 <menuCurrMenuToLCD>
    47b2:	2e de       	rcall	.-932    	; 0x4410 <menuItemChanged>
    47b4:	80 e0       	ldi	r24, 0x00	; 0
    47b6:	c2 c0       	rjmp	.+388    	; 0x493c <menu_ProcessMessage+0x45c>
    47b8:	c3 30       	cpi	r28, 0x03	; 3
    47ba:	09 f4       	brne	.+2      	; 0x47be <menu_ProcessMessage+0x2de>
    47bc:	49 c0       	rjmp	.+146    	; 0x4850 <menu_ProcessMessage+0x370>
    47be:	28 f4       	brcc	.+10     	; 0x47ca <menu_ProcessMessage+0x2ea>
    47c0:	c1 30       	cpi	r28, 0x01	; 1
    47c2:	59 f0       	breq	.+22     	; 0x47da <menu_ProcessMessage+0x2fa>
    47c4:	c2 30       	cpi	r28, 0x02	; 2
    47c6:	31 f1       	breq	.+76     	; 0x4814 <menu_ProcessMessage+0x334>
    47c8:	b4 c0       	rjmp	.+360    	; 0x4932 <menu_ProcessMessage+0x452>
    47ca:	c5 30       	cpi	r28, 0x05	; 5
    47cc:	09 f4       	brne	.+2      	; 0x47d0 <menu_ProcessMessage+0x2f0>
    47ce:	5e c0       	rjmp	.+188    	; 0x488c <menu_ProcessMessage+0x3ac>
    47d0:	c0 f0       	brcs	.+48     	; 0x4802 <menu_ProcessMessage+0x322>
    47d2:	c6 30       	cpi	r28, 0x06	; 6
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <menu_ProcessMessage+0x2f8>
    47d6:	8a c0       	rjmp	.+276    	; 0x48ec <menu_ProcessMessage+0x40c>
    47d8:	ac c0       	rjmp	.+344    	; 0x4932 <menu_ProcessMessage+0x452>
    47da:	48 2f       	mov	r20, r24
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <pNibbleInfo>
    47e2:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <pNibbleInfo+0x1>
    47e6:	24 91       	lpm	r18, Z
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	21 50       	subi	r18, 0x01	; 1
    47ec:	31 09       	sbc	r19, r1
    47ee:	42 17       	cp	r20, r18
    47f0:	53 07       	cpc	r21, r19
    47f2:	0c f0       	brlt	.+2      	; 0x47f6 <menu_ProcessMessage+0x316>
    47f4:	a0 c0       	rjmp	.+320    	; 0x4936 <menu_ProcessMessage+0x456>
    47f6:	8f 5f       	subi	r24, 0xFF	; 255
    47f8:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <nibbleIndex>
    47fc:	4b dc       	rcall	.-1898   	; 0x4094 <menuCursorSetDataNibble>
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	9d c0       	rjmp	.+314    	; 0x493c <menu_ProcessMessage+0x45c>
    4802:	88 23       	and	r24, r24
    4804:	09 f4       	brne	.+2      	; 0x4808 <menu_ProcessMessage+0x328>
    4806:	99 c0       	rjmp	.+306    	; 0x493a <menu_ProcessMessage+0x45a>
    4808:	81 50       	subi	r24, 0x01	; 1
    480a:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <nibbleIndex>
    480e:	42 dc       	rcall	.-1916   	; 0x4094 <menuCursorSetDataNibble>
    4810:	80 e0       	ldi	r24, 0x00	; 0
    4812:	94 c0       	rjmp	.+296    	; 0x493c <menu_ProcessMessage+0x45c>
    4814:	61 e0       	ldi	r22, 0x01	; 1
    4816:	68 d9       	rcall	.-3376   	; 0x3ae8 <nibbleChange>
    4818:	16 db       	rcall	.-2516   	; 0x3e46 <nibbleToData>
    481a:	2f dc       	rcall	.-1954   	; 0x407a <menuDisplayValue>
    481c:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <dataType>
    4820:	8a 30       	cpi	r24, 0x0A	; 10
    4822:	11 f0       	breq	.+4      	; 0x4828 <menu_ProcessMessage+0x348>
    4824:	8e 30       	cpi	r24, 0x0E	; 14
    4826:	89 f4       	brne	.+34     	; 0x484a <menu_ProcessMessage+0x36a>
    4828:	20 91 25 05 	lds	r18, 0x0525	; 0x800525 <nibbleIndex>
    482c:	42 2f       	mov	r20, r18
    482e:	50 e0       	ldi	r21, 0x00	; 0
    4830:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <pNibbleInfo>
    4834:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <pNibbleInfo+0x1>
    4838:	84 91       	lpm	r24, Z
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	01 97       	sbiw	r24, 0x01	; 1
    483e:	48 17       	cp	r20, r24
    4840:	59 07       	cpc	r21, r25
    4842:	1c f4       	brge	.+6      	; 0x484a <menu_ProcessMessage+0x36a>
    4844:	2f 5f       	subi	r18, 0xFF	; 255
    4846:	20 93 25 05 	sts	0x0525, r18	; 0x800525 <nibbleIndex>
    484a:	24 dc       	rcall	.-1976   	; 0x4094 <menuCursorSetDataNibble>
    484c:	80 e0       	ldi	r24, 0x00	; 0
    484e:	76 c0       	rjmp	.+236    	; 0x493c <menu_ProcessMessage+0x45c>
    4850:	6f ef       	ldi	r22, 0xFF	; 255
    4852:	4a d9       	rcall	.-3436   	; 0x3ae8 <nibbleChange>
    4854:	f8 da       	rcall	.-2576   	; 0x3e46 <nibbleToData>
    4856:	11 dc       	rcall	.-2014   	; 0x407a <menuDisplayValue>
    4858:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <dataType>
    485c:	8a 30       	cpi	r24, 0x0A	; 10
    485e:	11 f0       	breq	.+4      	; 0x4864 <menu_ProcessMessage+0x384>
    4860:	8e 30       	cpi	r24, 0x0E	; 14
    4862:	89 f4       	brne	.+34     	; 0x4886 <menu_ProcessMessage+0x3a6>
    4864:	20 91 25 05 	lds	r18, 0x0525	; 0x800525 <nibbleIndex>
    4868:	42 2f       	mov	r20, r18
    486a:	50 e0       	ldi	r21, 0x00	; 0
    486c:	e0 91 28 05 	lds	r30, 0x0528	; 0x800528 <pNibbleInfo>
    4870:	f0 91 29 05 	lds	r31, 0x0529	; 0x800529 <pNibbleInfo+0x1>
    4874:	84 91       	lpm	r24, Z
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	01 97       	sbiw	r24, 0x01	; 1
    487a:	48 17       	cp	r20, r24
    487c:	59 07       	cpc	r21, r25
    487e:	1c f4       	brge	.+6      	; 0x4886 <menu_ProcessMessage+0x3a6>
    4880:	2f 5f       	subi	r18, 0xFF	; 255
    4882:	20 93 25 05 	sts	0x0525, r18	; 0x800525 <nibbleIndex>
    4886:	06 dc       	rcall	.-2036   	; 0x4094 <menuCursorSetDataNibble>
    4888:	80 e0       	ldi	r24, 0x00	; 0
    488a:	58 c0       	rjmp	.+176    	; 0x493c <menu_ProcessMessage+0x45c>
    488c:	dc da       	rcall	.-2632   	; 0x3e46 <nibbleToData>
    488e:	20 91 58 05 	lds	r18, 0x0558	; 0x800558 <currentMenu>
    4892:	30 91 59 05 	lds	r19, 0x0559	; 0x800559 <currentMenu+0x1>
    4896:	c9 01       	movw	r24, r18
    4898:	0e 96       	adiw	r24, 0x0e	; 14
    489a:	fc 01       	movw	r30, r24
    489c:	a5 91       	lpm	r26, Z+
    489e:	b5 91       	lpm	r27, Z+
    48a0:	10 97       	sbiw	r26, 0x00	; 0
    48a2:	21 f1       	breq	.+72     	; 0x48ec <menu_ProcessMessage+0x40c>
    48a4:	0d 97       	sbiw	r24, 0x0d	; 13
    48a6:	fc 01       	movw	r30, r24
    48a8:	84 91       	lpm	r24, Z
    48aa:	88 23       	and	r24, r24
    48ac:	2c f4       	brge	.+10     	; 0x48b8 <menu_ProcessMessage+0x3d8>
    48ae:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <DataAdressOffset>
    48b2:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <DataAdressOffset+0x1>
    48b6:	02 c0       	rjmp	.+4      	; 0x48bc <menu_ProcessMessage+0x3dc>
    48b8:	80 e0       	ldi	r24, 0x00	; 0
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	a8 0f       	add	r26, r24
    48be:	b9 1f       	adc	r27, r25
    48c0:	f9 01       	movw	r30, r18
    48c2:	84 91       	lpm	r24, Z
    48c4:	8f 73       	andi	r24, 0x3F	; 63
    48c6:	8b 30       	cpi	r24, 0x0B	; 11
    48c8:	71 f4       	brne	.+28     	; 0x48e6 <menu_ProcessMessage+0x406>
    48ca:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <dataEntry32>
    48ce:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <dataEntry32+0x1>
    48d2:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <dataEntry32+0x2>
    48d6:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <dataEntry32+0x3>
    48da:	4d 93       	st	X+, r20
    48dc:	5d 93       	st	X+, r21
    48de:	6d 93       	st	X+, r22
    48e0:	7c 93       	st	X, r23
    48e2:	13 97       	sbiw	r26, 0x03	; 3
    48e4:	03 c0       	rjmp	.+6      	; 0x48ec <menu_ProcessMessage+0x40c>
    48e6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <dataEntry>
    48ea:	8c 93       	st	X, r24
    48ec:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    48f0:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    48f4:	72 96       	adiw	r30, 0x12	; 18
    48f6:	05 90       	lpm	r0, Z+
    48f8:	f4 91       	lpm	r31, Z
    48fa:	e0 2d       	mov	r30, r0
    48fc:	30 97       	sbiw	r30, 0x00	; 0
    48fe:	11 f0       	breq	.+4      	; 0x4904 <menu_ProcessMessage+0x424>
    4900:	8c 2f       	mov	r24, r28
    4902:	19 95       	eicall
    4904:	8f ef       	ldi	r24, 0xFF	; 255
    4906:	80 93 25 05 	sts	0x0525, r24	; 0x800525 <nibbleIndex>
    490a:	54 dd       	rcall	.-1368   	; 0x43b4 <menuCurrMenuToLCD>
    490c:	81 dd       	rcall	.-1278   	; 0x4410 <menuItemChanged>
    490e:	80 e0       	ldi	r24, 0x00	; 0
    4910:	15 c0       	rjmp	.+42     	; 0x493c <menu_ProcessMessage+0x45c>
    4912:	80 e0       	ldi	r24, 0x00	; 0
    4914:	13 c0       	rjmp	.+38     	; 0x493c <menu_ProcessMessage+0x45c>
    4916:	80 e0       	ldi	r24, 0x00	; 0
    4918:	11 c0       	rjmp	.+34     	; 0x493c <menu_ProcessMessage+0x45c>
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	0f c0       	rjmp	.+30     	; 0x493c <menu_ProcessMessage+0x45c>
    491e:	80 e0       	ldi	r24, 0x00	; 0
    4920:	0d c0       	rjmp	.+26     	; 0x493c <menu_ProcessMessage+0x45c>
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	0b c0       	rjmp	.+22     	; 0x493c <menu_ProcessMessage+0x45c>
    4926:	80 e0       	ldi	r24, 0x00	; 0
    4928:	09 c0       	rjmp	.+18     	; 0x493c <menu_ProcessMessage+0x45c>
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	07 c0       	rjmp	.+14     	; 0x493c <menu_ProcessMessage+0x45c>
    492e:	80 e0       	ldi	r24, 0x00	; 0
    4930:	05 c0       	rjmp	.+10     	; 0x493c <menu_ProcessMessage+0x45c>
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	03 c0       	rjmp	.+6      	; 0x493c <menu_ProcessMessage+0x45c>
    4936:	80 e0       	ldi	r24, 0x00	; 0
    4938:	01 c0       	rjmp	.+2      	; 0x493c <menu_ProcessMessage+0x45c>
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	cf 91       	pop	r28
    493e:	08 95       	ret

00004940 <displayMenuMessage_P>:
    4940:	0f 93       	push	r16
    4942:	1f 93       	push	r17
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
    4948:	ec 01       	movw	r28, r24
    494a:	00 91 58 03 	lds	r16, 0x0358	; 0x800358 <lcd_cursorPos>
    494e:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    4952:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    4956:	84 91       	lpm	r24, Z
    4958:	8f 73       	andi	r24, 0x3F	; 63
    495a:	81 30       	cpi	r24, 0x01	; 1
    495c:	91 f4       	brne	.+36     	; 0x4982 <displayMenuMessage_P+0x42>
    495e:	ce 01       	movw	r24, r28
    4960:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <get_StrLenP>
    4964:	24 e1       	ldi	r18, 0x14	; 20
    4966:	30 e0       	ldi	r19, 0x00	; 0
    4968:	a9 01       	movw	r20, r18
    496a:	48 1b       	sub	r20, r24
    496c:	51 09       	sbc	r21, r1
    496e:	ca 01       	movw	r24, r20
    4970:	95 95       	asr	r25
    4972:	87 95       	ror	r24
    4974:	8c 5e       	subi	r24, 0xEC	; 236
    4976:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    497a:	83 e0       	ldi	r24, 0x03	; 3
    497c:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <displayMessageArea>
    4980:	05 c0       	rjmp	.+10     	; 0x498c <displayMenuMessage_P+0x4c>
    4982:	84 e1       	ldi	r24, 0x14	; 20
    4984:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4988:	10 92 4d 05 	sts	0x054D, r1	; 0x80054d <displayMessageArea>
    498c:	10 91 58 03 	lds	r17, 0x0358	; 0x800358 <lcd_cursorPos>
    4990:	ce 01       	movw	r24, r28
    4992:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    4996:	80 2f       	mov	r24, r16
    4998:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    499c:	9f b7       	in	r25, 0x3f	; 63
    499e:	f8 94       	cli
    49a0:	81 e0       	ldi	r24, 0x01	; 1
    49a2:	06 c0       	rjmp	.+12     	; 0x49b0 <displayMenuMessage_P+0x70>
    49a4:	ef e2       	ldi	r30, 0x2F	; 47
    49a6:	f2 e0       	ldi	r31, 0x02	; 2
    49a8:	84 e6       	ldi	r24, 0x64	; 100
    49aa:	86 87       	std	Z+14, r24	; 0x0e
    49ac:	17 86       	std	Z+15, r1	; 0x0f
    49ae:	80 e0       	ldi	r24, 0x00	; 0
    49b0:	81 11       	cpse	r24, r1
    49b2:	f8 cf       	rjmp	.-16     	; 0x49a4 <displayMenuMessage_P+0x64>
    49b4:	9f bf       	out	0x3f, r25	; 63
    49b6:	81 2f       	mov	r24, r17
    49b8:	df 91       	pop	r29
    49ba:	cf 91       	pop	r28
    49bc:	1f 91       	pop	r17
    49be:	0f 91       	pop	r16
    49c0:	08 95       	ret

000049c2 <menu_OnEnterMidiPanic>:
    49c2:	85 e6       	ldi	r24, 0x65	; 101
    49c4:	93 e0       	ldi	r25, 0x03	; 3
    49c6:	bc df       	rcall	.-136    	; 0x4940 <displayMenuMessage_P>
    49c8:	0e 94 19 30 	call	0x6032	; 0x6032 <midiSendAllNotesOff>
    49cc:	b5 dc       	rcall	.-1686   	; 0x4338 <menuCursorSetMenu>
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	08 95       	ret

000049d2 <menu_ModuleTestExecute>:
    49d2:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <menu_TestModuleBitCounter>
    49d6:	8f 3f       	cpi	r24, 0xFF	; 255
    49d8:	11 f0       	breq	.+4      	; 0x49de <menu_ModuleTestExecute+0xc>
    49da:	8d 3f       	cpi	r24, 0xFD	; 253
    49dc:	71 f5       	brne	.+92     	; 0x4a3a <menu_ModuleTestExecute+0x68>
    49de:	0e 94 39 34 	call	0x6872	; 0x6872 <lcd_cursoroff>
    49e2:	b3 dc       	rcall	.-1690   	; 0x434a <menu_ClearDataDisp>
    49e4:	10 92 a2 07 	sts	0x07A2, r1	; 0x8007a2 <msgPipe_Handling>
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	e9 e4       	ldi	r30, 0x49	; 73
    49ec:	f2 e0       	ldi	r31, 0x02	; 2
    49ee:	07 c0       	rjmp	.+14     	; 0x49fe <menu_ModuleTestExecute+0x2c>
    49f0:	21 81       	ldd	r18, Z+1	; 0x01
    49f2:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <menu_TestModulePattern>
    49f6:	82 2b       	or	r24, r18
    49f8:	81 83       	std	Z+1, r24	; 0x01
    49fa:	38 96       	adiw	r30, 0x08	; 8
    49fc:	9f 5f       	subi	r25, 0xFF	; 255
    49fe:	90 32       	cpi	r25, 0x20	; 32
    4a00:	b8 f3       	brcs	.-18     	; 0x49f0 <menu_ModuleTestExecute+0x1e>
    4a02:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <menu_TestModuleBitCounter>
    4a06:	8f 3f       	cpi	r24, 0xFF	; 255
    4a08:	19 f4       	brne	.+6      	; 0x4a10 <menu_ModuleTestExecute+0x3e>
    4a0a:	10 92 55 05 	sts	0x0555, r1	; 0x800555 <menu_TestModuleBitCounter>
    4a0e:	5b c0       	rjmp	.+182    	; 0x4ac6 <menu_ModuleTestExecute+0xf4>
    4a10:	8f e5       	ldi	r24, 0x5F	; 95
    4a12:	93 e0       	ldi	r25, 0x03	; 3
    4a14:	95 df       	rcall	.-214    	; 0x4940 <displayMenuMessage_P>
    4a16:	8e ef       	ldi	r24, 0xFE	; 254
    4a18:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <menu_TestModuleBitCounter>
    4a1c:	9f b7       	in	r25, 0x3f	; 63
    4a1e:	f8 94       	cli
    4a20:	81 e0       	ldi	r24, 0x01	; 1
    4a22:	06 c0       	rjmp	.+12     	; 0x4a30 <menu_ModuleTestExecute+0x5e>
    4a24:	ef e2       	ldi	r30, 0x2F	; 47
    4a26:	f2 e0       	ldi	r31, 0x02	; 2
    4a28:	82 e0       	ldi	r24, 0x02	; 2
    4a2a:	84 87       	std	Z+12, r24	; 0x0c
    4a2c:	85 87       	std	Z+13, r24	; 0x0d
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	81 11       	cpse	r24, r1
    4a32:	f8 cf       	rjmp	.-16     	; 0x4a24 <menu_ModuleTestExecute+0x52>
    4a34:	9f bf       	out	0x3f, r25	; 63
    4a36:	80 dc       	rcall	.-1792   	; 0x4338 <menuCursorSetMenu>
    4a38:	46 c0       	rjmp	.+140    	; 0x4ac6 <menu_ModuleTestExecute+0xf4>
    4a3a:	8e 3f       	cpi	r24, 0xFE	; 254
    4a3c:	41 f4       	brne	.+16     	; 0x4a4e <menu_ModuleTestExecute+0x7c>
    4a3e:	8f ef       	ldi	r24, 0xFF	; 255
    4a40:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <msgPipe_Handling>
    4a44:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <menu_TestModulePattern>
    4a48:	0e 94 32 34 	call	0x6864	; 0x6864 <lcd_cursosblink>
    4a4c:	3c c0       	rjmp	.+120    	; 0x4ac6 <menu_ModuleTestExecute+0xf4>
    4a4e:	40 91 18 05 	lds	r20, 0x0518	; 0x800518 <menu_TestModuleErrorList>
    4a52:	50 91 19 05 	lds	r21, 0x0519	; 0x800519 <menu_TestModuleErrorList+0x1>
    4a56:	60 91 1a 05 	lds	r22, 0x051A	; 0x80051a <menu_TestModuleErrorList+0x2>
    4a5a:	70 91 1b 05 	lds	r23, 0x051B	; 0x80051b <menu_TestModuleErrorList+0x3>
    4a5e:	76 95       	lsr	r23
    4a60:	67 95       	ror	r22
    4a62:	57 95       	ror	r21
    4a64:	47 95       	ror	r20
    4a66:	40 93 18 05 	sts	0x0518, r20	; 0x800518 <menu_TestModuleErrorList>
    4a6a:	50 93 19 05 	sts	0x0519, r21	; 0x800519 <menu_TestModuleErrorList+0x1>
    4a6e:	60 93 1a 05 	sts	0x051A, r22	; 0x80051a <menu_TestModuleErrorList+0x2>
    4a72:	70 93 1b 05 	sts	0x051B, r23	; 0x80051b <menu_TestModuleErrorList+0x3>
    4a76:	e8 2f       	mov	r30, r24
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	df 01       	movw	r26, r30
    4a7c:	aa 0f       	add	r26, r26
    4a7e:	bb 1f       	adc	r27, r27
    4a80:	aa 0f       	add	r26, r26
    4a82:	bb 1f       	adc	r27, r27
    4a84:	aa 0f       	add	r26, r26
    4a86:	bb 1f       	adc	r27, r27
    4a88:	a7 5b       	subi	r26, 0xB7	; 183
    4a8a:	bd 4f       	sbci	r27, 0xFD	; 253
    4a8c:	16 96       	adiw	r26, 0x06	; 6
    4a8e:	2c 91       	ld	r18, X
    4a90:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <menu_TestModulePattern>
    4a94:	29 23       	and	r18, r25
    4a96:	49 f4       	brne	.+18     	; 0x4aaa <menu_ModuleTestExecute+0xd8>
    4a98:	70 68       	ori	r23, 0x80	; 128
    4a9a:	40 93 18 05 	sts	0x0518, r20	; 0x800518 <menu_TestModuleErrorList>
    4a9e:	50 93 19 05 	sts	0x0519, r21	; 0x800519 <menu_TestModuleErrorList+0x1>
    4aa2:	60 93 1a 05 	sts	0x051A, r22	; 0x80051a <menu_TestModuleErrorList+0x2>
    4aa6:	70 93 1b 05 	sts	0x051B, r23	; 0x80051b <menu_TestModuleErrorList+0x3>
    4aaa:	ee 0f       	add	r30, r30
    4aac:	ff 1f       	adc	r31, r31
    4aae:	ee 0f       	add	r30, r30
    4ab0:	ff 1f       	adc	r31, r31
    4ab2:	ee 0f       	add	r30, r30
    4ab4:	ff 1f       	adc	r31, r31
    4ab6:	e7 5b       	subi	r30, 0xB7	; 183
    4ab8:	fd 4f       	sbci	r31, 0xFD	; 253
    4aba:	21 81       	ldd	r18, Z+1	; 0x01
    4abc:	92 2b       	or	r25, r18
    4abe:	91 83       	std	Z+1, r25	; 0x01
    4ac0:	8f 5f       	subi	r24, 0xFF	; 255
    4ac2:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <menu_TestModuleBitCounter>
    4ac6:	e0 91 55 05 	lds	r30, 0x0555	; 0x800555 <menu_TestModuleBitCounter>
    4aca:	e0 32       	cpi	r30, 0x20	; 32
    4acc:	28 f5       	brcc	.+74     	; 0x4b18 <menu_ModuleTestExecute+0x146>
    4ace:	f0 e0       	ldi	r31, 0x00	; 0
    4ad0:	ee 0f       	add	r30, r30
    4ad2:	ff 1f       	adc	r31, r31
    4ad4:	ee 0f       	add	r30, r30
    4ad6:	ff 1f       	adc	r31, r31
    4ad8:	ee 0f       	add	r30, r30
    4ada:	ff 1f       	adc	r31, r31
    4adc:	e7 5b       	subi	r30, 0xB7	; 183
    4ade:	fd 4f       	sbci	r31, 0xFD	; 253
    4ae0:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <menu_TestModulePattern>
    4ae4:	98 2f       	mov	r25, r24
    4ae6:	90 95       	com	r25
    4ae8:	81 81       	ldd	r24, Z+1	; 0x01
    4aea:	89 23       	and	r24, r25
    4aec:	81 83       	std	Z+1, r24	; 0x01
    4aee:	8e e1       	ldi	r24, 0x1E	; 30
    4af0:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4af4:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <menu_TestModuleBitCounter>
    4af8:	0e 94 76 32 	call	0x64ec	; 0x64ec <lcd_dec2out>
    4afc:	9f b7       	in	r25, 0x3f	; 63
    4afe:	f8 94       	cli
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	06 c0       	rjmp	.+12     	; 0x4b10 <menu_ModuleTestExecute+0x13e>
    4b04:	ef e2       	ldi	r30, 0x2F	; 47
    4b06:	f2 e0       	ldi	r31, 0x02	; 2
    4b08:	88 e0       	ldi	r24, 0x08	; 8
    4b0a:	84 87       	std	Z+12, r24	; 0x0c
    4b0c:	15 86       	std	Z+13, r1	; 0x0d
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	81 11       	cpse	r24, r1
    4b12:	f8 cf       	rjmp	.-16     	; 0x4b04 <menu_ModuleTestExecute+0x132>
    4b14:	9f bf       	out	0x3f, r25	; 63
    4b16:	08 95       	ret
    4b18:	e0 32       	cpi	r30, 0x20	; 32
    4b1a:	81 f5       	brne	.+96     	; 0x4b7c <menu_ModuleTestExecute+0x1aa>
    4b1c:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <menu_TestModuleErrorList>
    4b20:	90 91 19 05 	lds	r25, 0x0519	; 0x800519 <menu_TestModuleErrorList+0x1>
    4b24:	a0 91 1a 05 	lds	r26, 0x051A	; 0x80051a <menu_TestModuleErrorList+0x2>
    4b28:	b0 91 1b 05 	lds	r27, 0x051B	; 0x80051b <menu_TestModuleErrorList+0x3>
    4b2c:	00 97       	sbiw	r24, 0x00	; 0
    4b2e:	a1 05       	cpc	r26, r1
    4b30:	b1 05       	cpc	r27, r1
    4b32:	21 f4       	brne	.+8      	; 0x4b3c <menu_ModuleTestExecute+0x16a>
    4b34:	8c e5       	ldi	r24, 0x5C	; 92
    4b36:	93 e0       	ldi	r25, 0x03	; 3
    4b38:	03 df       	rcall	.-506    	; 0x4940 <displayMenuMessage_P>
    4b3a:	0f c0       	rjmp	.+30     	; 0x4b5a <menu_ModuleTestExecute+0x188>
    4b3c:	80 93 2a 0d 	sts	0x0D2A, r24	; 0x800d2a <editLong>
    4b40:	90 93 2b 0d 	sts	0x0D2B, r25	; 0x800d2b <editLong+0x1>
    4b44:	a0 93 2c 0d 	sts	0x0D2C, r26	; 0x800d2c <editLong+0x2>
    4b48:	b0 93 2d 0d 	sts	0x0D2D, r27	; 0x800d2d <editLong+0x3>
    4b4c:	89 e5       	ldi	r24, 0x59	; 89
    4b4e:	93 e0       	ldi	r25, 0x03	; 3
    4b50:	f7 de       	rcall	.-530    	; 0x4940 <displayMenuMessage_P>
    4b52:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4b56:	0e 94 51 32 	call	0x64a2	; 0x64a2 <lcd_longout>
    4b5a:	8e ef       	ldi	r24, 0xFE	; 254
    4b5c:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <menu_TestModuleBitCounter>
    4b60:	9f b7       	in	r25, 0x3f	; 63
    4b62:	f8 94       	cli
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	06 c0       	rjmp	.+12     	; 0x4b74 <menu_ModuleTestExecute+0x1a2>
    4b68:	ef e2       	ldi	r30, 0x2F	; 47
    4b6a:	f2 e0       	ldi	r31, 0x02	; 2
    4b6c:	82 e0       	ldi	r24, 0x02	; 2
    4b6e:	84 87       	std	Z+12, r24	; 0x0c
    4b70:	85 87       	std	Z+13, r24	; 0x0d
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	81 11       	cpse	r24, r1
    4b76:	f8 cf       	rjmp	.-16     	; 0x4b68 <menu_ModuleTestExecute+0x196>
    4b78:	9f bf       	out	0x3f, r25	; 63
    4b7a:	de cb       	rjmp	.-2116   	; 0x4338 <menuCursorSetMenu>
    4b7c:	08 95       	ret

00004b7e <menu_ModuleTestPattern>:
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	00 90 27 05 	lds	r0, 0x0527	; 0x800527 <menuVmodule>
    4b86:	02 c0       	rjmp	.+4      	; 0x4b8c <menu_ModuleTestPattern+0xe>
    4b88:	88 0f       	add	r24, r24
    4b8a:	99 1f       	adc	r25, r25
    4b8c:	0a 94       	dec	r0
    4b8e:	e2 f7       	brpl	.-8      	; 0x4b88 <menu_ModuleTestPattern+0xa>
    4b90:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <menu_TestModulePattern>
    4b94:	8f ef       	ldi	r24, 0xFF	; 255
    4b96:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <menu_TestModuleBitCounter>
    4b9a:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <menu_TestModuleErrorList>
    4b9e:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <menu_TestModuleErrorList+0x1>
    4ba2:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <menu_TestModuleErrorList+0x2>
    4ba6:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <menu_TestModuleErrorList+0x3>
    4baa:	13 df       	rcall	.-474    	; 0x49d2 <menu_ModuleTestExecute>
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	08 95       	ret

00004bb0 <menuLCDwriteOK>:
    4bb0:	8c e5       	ldi	r24, 0x5C	; 92
    4bb2:	93 e0       	ldi	r25, 0x03	; 3
    4bb4:	c5 ce       	rjmp	.-630    	; 0x4940 <displayMenuMessage_P>
    4bb6:	08 95       	ret

00004bb8 <menuOnEnterEEBackup>:
    4bb8:	8e e1       	ldi	r24, 0x1E	; 30
    4bba:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4bbe:	8f e3       	ldi	r24, 0x3F	; 63
    4bc0:	93 e0       	ldi	r25, 0x03	; 3
    4bc2:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    4bc6:	0e 94 91 0c 	call	0x1922	; 0x1922 <eeprom_Backup>
    4bca:	f2 df       	rcall	.-28     	; 0x4bb0 <menuLCDwriteOK>
    4bcc:	80 e0       	ldi	r24, 0x00	; 0
    4bce:	08 95       	ret

00004bd0 <menuOnEnterEERestore>:
    4bd0:	8e e1       	ldi	r24, 0x1E	; 30
    4bd2:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4bd6:	8f e3       	ldi	r24, 0x3F	; 63
    4bd8:	93 e0       	ldi	r25, 0x03	; 3
    4bda:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    4bde:	0e 94 9d 0c 	call	0x193a	; 0x193a <eeprom_Restore>
    4be2:	e6 df       	rcall	.-52     	; 0x4bb0 <menuLCDwriteOK>
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	08 95       	ret

00004be8 <menuOnEnterEEUpdate>:
    4be8:	8f e3       	ldi	r24, 0x3F	; 63
    4bea:	93 e0       	ldi	r25, 0x03	; 3
    4bec:	a9 de       	rcall	.-686    	; 0x4940 <displayMenuMessage_P>
    4bee:	8e e1       	ldi	r24, 0x1E	; 30
    4bf0:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4bf4:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <eeprom_UpdateALL>
    4bf8:	db df       	rcall	.-74     	; 0x4bb0 <menuLCDwriteOK>
    4bfa:	80 e0       	ldi	r24, 0x00	; 0
    4bfc:	08 95       	ret

00004bfe <menudeleteMainMessage>:
    4bfe:	cf 93       	push	r28
    4c00:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <lcd_cursorPos>
    4c04:	80 e4       	ldi	r24, 0x40	; 64
    4c06:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4c0a:	84 e1       	ldi	r24, 0x14	; 20
    4c0c:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
    4c10:	8c 2f       	mov	r24, r28
    4c12:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4c16:	cf 91       	pop	r28
    4c18:	08 95       	ret

00004c1a <menu_deleteMessage>:
    4c1a:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <displayMessageArea>
    4c1e:	83 30       	cpi	r24, 0x03	; 3
    4c20:	19 f4       	brne	.+6      	; 0x4c28 <menu_deleteMessage+0xe>
    4c22:	8e db       	rcall	.-2276   	; 0x4340 <menuClearExtraDisp>
    4c24:	92 cb       	rjmp	.-2268   	; 0x434a <menu_ClearDataDisp>
    4c26:	08 95       	ret
    4c28:	81 11       	cpse	r24, r1
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <menu_deleteMessage+0x16>
    4c2c:	89 cb       	rjmp	.-2286   	; 0x4340 <menuClearExtraDisp>
    4c2e:	08 95       	ret
    4c30:	81 30       	cpi	r24, 0x01	; 1
    4c32:	11 f4       	brne	.+4      	; 0x4c38 <menu_deleteMessage+0x1e>
    4c34:	8a cb       	rjmp	.-2284   	; 0x434a <menu_ClearDataDisp>
    4c36:	08 95       	ret
    4c38:	e2 cf       	rjmp	.-60     	; 0x4bfe <menudeleteMainMessage>
    4c3a:	08 95       	ret

00004c3c <menu_DisplayMainMessage_P>:
    4c3c:	0f 93       	push	r16
    4c3e:	1f 93       	push	r17
    4c40:	cf 93       	push	r28
    4c42:	df 93       	push	r29
    4c44:	ec 01       	movw	r28, r24
    4c46:	10 91 58 03 	lds	r17, 0x0358	; 0x800358 <lcd_cursorPos>
    4c4a:	0e 94 ec 34 	call	0x69d8	; 0x69d8 <get_StrLenP>
    4c4e:	08 2f       	mov	r16, r24
    4c50:	80 e4       	ldi	r24, 0x40	; 64
    4c52:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4c56:	84 e1       	ldi	r24, 0x14	; 20
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	80 1b       	sub	r24, r16
    4c5c:	91 09       	sbc	r25, r1
    4c5e:	95 95       	asr	r25
    4c60:	87 95       	ror	r24
    4c62:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
    4c66:	ce 01       	movw	r24, r28
    4c68:	0e 94 2b 12 	call	0x2456	; 0x2456 <lcd_puts_P>
    4c6c:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <lcd_cursorPos>
    4c70:	84 e5       	ldi	r24, 0x54	; 84
    4c72:	89 1b       	sub	r24, r25
    4c74:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
    4c78:	81 2f       	mov	r24, r17
    4c7a:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4c7e:	9f b7       	in	r25, 0x3f	; 63
    4c80:	f8 94       	cli
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	06 c0       	rjmp	.+12     	; 0x4c92 <menu_DisplayMainMessage_P+0x56>
    4c86:	ef e2       	ldi	r30, 0x2F	; 47
    4c88:	f2 e0       	ldi	r31, 0x02	; 2
    4c8a:	84 e6       	ldi	r24, 0x64	; 100
    4c8c:	86 87       	std	Z+14, r24	; 0x0e
    4c8e:	17 86       	std	Z+15, r1	; 0x0f
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	81 11       	cpse	r24, r1
    4c94:	f8 cf       	rjmp	.-16     	; 0x4c86 <menu_DisplayMainMessage_P+0x4a>
    4c96:	9f bf       	out	0x3f, r25	; 63
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <displayMessageArea>
    4c9e:	df 91       	pop	r29
    4ca0:	cf 91       	pop	r28
    4ca2:	1f 91       	pop	r17
    4ca4:	0f 91       	pop	r16
    4ca6:	08 95       	ret

00004ca8 <menu_DisplayMainMessage>:
    4ca8:	0f 93       	push	r16
    4caa:	1f 93       	push	r17
    4cac:	cf 93       	push	r28
    4cae:	df 93       	push	r29
    4cb0:	ec 01       	movw	r28, r24
    4cb2:	10 91 58 03 	lds	r17, 0x0358	; 0x800358 <lcd_cursorPos>
    4cb6:	0e 94 f6 34 	call	0x69ec	; 0x69ec <get_StrLen>
    4cba:	08 2f       	mov	r16, r24
    4cbc:	80 e4       	ldi	r24, 0x40	; 64
    4cbe:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4cc2:	84 e1       	ldi	r24, 0x14	; 20
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	80 1b       	sub	r24, r16
    4cc8:	91 09       	sbc	r25, r1
    4cca:	95 95       	asr	r25
    4ccc:	87 95       	ror	r24
    4cce:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
    4cd2:	ce 01       	movw	r24, r28
    4cd4:	0e 94 1b 12 	call	0x2436	; 0x2436 <lcd_puts>
    4cd8:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <lcd_cursorPos>
    4cdc:	84 e5       	ldi	r24, 0x54	; 84
    4cde:	89 1b       	sub	r24, r25
    4ce0:	0e 94 0f 34 	call	0x681e	; 0x681e <lcd_blank>
    4ce4:	81 2f       	mov	r24, r17
    4ce6:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    4cea:	9f b7       	in	r25, 0x3f	; 63
    4cec:	f8 94       	cli
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	06 c0       	rjmp	.+12     	; 0x4cfe <menu_DisplayMainMessage+0x56>
    4cf2:	ef e2       	ldi	r30, 0x2F	; 47
    4cf4:	f2 e0       	ldi	r31, 0x02	; 2
    4cf6:	84 e6       	ldi	r24, 0x64	; 100
    4cf8:	86 87       	std	Z+14, r24	; 0x0e
    4cfa:	17 86       	std	Z+15, r1	; 0x0f
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	81 11       	cpse	r24, r1
    4d00:	f8 cf       	rjmp	.-16     	; 0x4cf2 <menu_DisplayMainMessage+0x4a>
    4d02:	9f bf       	out	0x3f, r25	; 63
    4d04:	82 e0       	ldi	r24, 0x02	; 2
    4d06:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <displayMessageArea>
    4d0a:	df 91       	pop	r29
    4d0c:	cf 91       	pop	r28
    4d0e:	1f 91       	pop	r17
    4d10:	0f 91       	pop	r16
    4d12:	08 95       	ret

00004d14 <menuDisplaySaveMessage>:
    4d14:	6e e2       	ldi	r22, 0x2E	; 46
    4d16:	7d e0       	ldi	r23, 0x0D	; 13
    4d18:	0e 94 ac 32 	call	0x6558	; 0x6558 <putChar_Dec>
    4d1c:	bc 01       	movw	r22, r24
    4d1e:	83 e8       	ldi	r24, 0x83	; 131
    4d20:	93 e0       	ldi	r25, 0x03	; 3
    4d22:	0e 94 7d 33 	call	0x66fa	; 0x66fa <putString_P>
    4d26:	8e e2       	ldi	r24, 0x2E	; 46
    4d28:	9d e0       	ldi	r25, 0x0D	; 13
    4d2a:	be cf       	rjmp	.-132    	; 0x4ca8 <menu_DisplayMainMessage>
    4d2c:	08 95       	ret

00004d2e <menuDisplayLoadMessage>:
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	cf 93       	push	r28
    4d34:	6e e2       	ldi	r22, 0x2E	; 46
    4d36:	7d e0       	ldi	r23, 0x0D	; 13
    4d38:	0e 94 ac 32 	call	0x6558	; 0x6558 <putChar_Dec>
    4d3c:	bc 01       	movw	r22, r24
    4d3e:	86 e7       	ldi	r24, 0x76	; 118
    4d40:	93 e0       	ldi	r25, 0x03	; 3
    4d42:	0e 94 7d 33 	call	0x66fa	; 0x66fa <putString_P>
    4d46:	8c 01       	movw	r16, r24
    4d48:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <module_WaitOutputInput2Cycles>
    4d4c:	84 e0       	ldi	r24, 0x04	; 4
    4d4e:	e7 d3       	rcall	.+1998   	; 0x551e <count_Registers>
    4d50:	c8 2f       	mov	r28, r24
    4d52:	88 23       	and	r24, r24
    4d54:	49 f0       	breq	.+18     	; 0x4d68 <menuDisplayLoadMessage+0x3a>
    4d56:	b8 01       	movw	r22, r16
    4d58:	84 e7       	ldi	r24, 0x74	; 116
    4d5a:	93 e0       	ldi	r25, 0x03	; 3
    4d5c:	0e 94 7d 33 	call	0x66fa	; 0x66fa <putString_P>
    4d60:	bc 01       	movw	r22, r24
    4d62:	8c 2f       	mov	r24, r28
    4d64:	0e 94 ac 32 	call	0x6558	; 0x6558 <putChar_Dec>
    4d68:	8e e2       	ldi	r24, 0x2E	; 46
    4d6a:	9d e0       	ldi	r25, 0x0D	; 13
    4d6c:	9d df       	rcall	.-198    	; 0x4ca8 <menu_DisplayMainMessage>
    4d6e:	cf 91       	pop	r28
    4d70:	1f 91       	pop	r17
    4d72:	0f 91       	pop	r16
    4d74:	08 95       	ret

00004d76 <softKeyK1A>:
    4d76:	88 23       	and	r24, r24
    4d78:	2c f4       	brge	.+10     	; 0x4d84 <softKeyK1A+0xe>
    4d7a:	6f ef       	ldi	r22, 0xFF	; 255
    4d7c:	80 e0       	ldi	r24, 0x00	; 0
    4d7e:	e9 d4       	rcall	.+2514   	; 0x5752 <register_toProgram>
    4d80:	c9 df       	rcall	.-110    	; 0x4d14 <menuDisplaySaveMessage>
    4d82:	05 c0       	rjmp	.+10     	; 0x4d8e <softKeyK1A+0x18>
    4d84:	88 23       	and	r24, r24
    4d86:	19 f0       	breq	.+6      	; 0x4d8e <softKeyK1A+0x18>
    4d88:	80 e0       	ldi	r24, 0x00	; 0
    4d8a:	47 d4       	rcall	.+2190   	; 0x561a <program_toRegister>
    4d8c:	d0 df       	rcall	.-96     	; 0x4d2e <menuDisplayLoadMessage>
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	15 d5       	rcall	.+2602   	; 0x57bc <midi_RegisterMatchProgram>
    4d92:	81 11       	cpse	r24, r1
    4d94:	02 c0       	rjmp	.+4      	; 0x4d9a <softKeyK1A+0x24>
    4d96:	81 e8       	ldi	r24, 0x81	; 129
    4d98:	08 95       	ret
    4d9a:	82 e8       	ldi	r24, 0x82	; 130
    4d9c:	08 95       	ret

00004d9e <softKeyK2A>:
    4d9e:	88 23       	and	r24, r24
    4da0:	2c f4       	brge	.+10     	; 0x4dac <softKeyK2A+0xe>
    4da2:	6f ef       	ldi	r22, 0xFF	; 255
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	d5 d4       	rcall	.+2474   	; 0x5752 <register_toProgram>
    4da8:	b5 df       	rcall	.-150    	; 0x4d14 <menuDisplaySaveMessage>
    4daa:	05 c0       	rjmp	.+10     	; 0x4db6 <softKeyK2A+0x18>
    4dac:	88 23       	and	r24, r24
    4dae:	19 f0       	breq	.+6      	; 0x4db6 <softKeyK2A+0x18>
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	33 d4       	rcall	.+2150   	; 0x561a <program_toRegister>
    4db4:	bc df       	rcall	.-136    	; 0x4d2e <menuDisplayLoadMessage>
    4db6:	81 e0       	ldi	r24, 0x01	; 1
    4db8:	01 d5       	rcall	.+2562   	; 0x57bc <midi_RegisterMatchProgram>
    4dba:	81 11       	cpse	r24, r1
    4dbc:	02 c0       	rjmp	.+4      	; 0x4dc2 <softKeyK2A+0x24>
    4dbe:	81 e8       	ldi	r24, 0x81	; 129
    4dc0:	08 95       	ret
    4dc2:	82 e8       	ldi	r24, 0x82	; 130
    4dc4:	08 95       	ret

00004dc6 <softKeyK3A>:
    4dc6:	88 23       	and	r24, r24
    4dc8:	2c f4       	brge	.+10     	; 0x4dd4 <softKeyK3A+0xe>
    4dca:	6f ef       	ldi	r22, 0xFF	; 255
    4dcc:	82 e0       	ldi	r24, 0x02	; 2
    4dce:	c1 d4       	rcall	.+2434   	; 0x5752 <register_toProgram>
    4dd0:	a1 df       	rcall	.-190    	; 0x4d14 <menuDisplaySaveMessage>
    4dd2:	05 c0       	rjmp	.+10     	; 0x4dde <softKeyK3A+0x18>
    4dd4:	88 23       	and	r24, r24
    4dd6:	19 f0       	breq	.+6      	; 0x4dde <softKeyK3A+0x18>
    4dd8:	82 e0       	ldi	r24, 0x02	; 2
    4dda:	1f d4       	rcall	.+2110   	; 0x561a <program_toRegister>
    4ddc:	a8 df       	rcall	.-176    	; 0x4d2e <menuDisplayLoadMessage>
    4dde:	82 e0       	ldi	r24, 0x02	; 2
    4de0:	ed d4       	rcall	.+2522   	; 0x57bc <midi_RegisterMatchProgram>
    4de2:	81 11       	cpse	r24, r1
    4de4:	02 c0       	rjmp	.+4      	; 0x4dea <softKeyK3A+0x24>
    4de6:	81 e8       	ldi	r24, 0x81	; 129
    4de8:	08 95       	ret
    4dea:	82 e8       	ldi	r24, 0x82	; 130
    4dec:	08 95       	ret

00004dee <softKeyK4A>:
    4dee:	88 23       	and	r24, r24
    4df0:	2c f4       	brge	.+10     	; 0x4dfc <softKeyK4A+0xe>
    4df2:	6f ef       	ldi	r22, 0xFF	; 255
    4df4:	83 e0       	ldi	r24, 0x03	; 3
    4df6:	ad d4       	rcall	.+2394   	; 0x5752 <register_toProgram>
    4df8:	8d df       	rcall	.-230    	; 0x4d14 <menuDisplaySaveMessage>
    4dfa:	05 c0       	rjmp	.+10     	; 0x4e06 <softKeyK4A+0x18>
    4dfc:	88 23       	and	r24, r24
    4dfe:	19 f0       	breq	.+6      	; 0x4e06 <softKeyK4A+0x18>
    4e00:	83 e0       	ldi	r24, 0x03	; 3
    4e02:	0b d4       	rcall	.+2070   	; 0x561a <program_toRegister>
    4e04:	94 df       	rcall	.-216    	; 0x4d2e <menuDisplayLoadMessage>
    4e06:	83 e0       	ldi	r24, 0x03	; 3
    4e08:	d9 d4       	rcall	.+2482   	; 0x57bc <midi_RegisterMatchProgram>
    4e0a:	81 11       	cpse	r24, r1
    4e0c:	02 c0       	rjmp	.+4      	; 0x4e12 <softKeyK4A+0x24>
    4e0e:	81 e8       	ldi	r24, 0x81	; 129
    4e10:	08 95       	ret
    4e12:	82 e8       	ldi	r24, 0x82	; 130
    4e14:	08 95       	ret

00004e16 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    4e16:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    4e18:	34 e0       	ldi	r19, 0x04	; 4
    4e1a:	80 33       	cpi	r24, 0x30	; 48
    4e1c:	93 07       	cpc	r25, r19
    4e1e:	49 f0       	breq	.+18     	; 0x4e32 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    4e20:	34 e0       	ldi	r19, 0x04	; 4
    4e22:	80 33       	cpi	r24, 0x30	; 48
    4e24:	93 07       	cpc	r25, r19
    4e26:	38 f0       	brcs	.+14     	; 0x4e36 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    4e28:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    4e2a:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    4e2c:	a9 f7       	brne	.-22     	; 0x4e18 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    4e2e:	80 e0       	ldi	r24, 0x00	; 0
    4e30:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    4e32:	82 2f       	mov	r24, r18
    4e34:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    4e36:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    4e38:	08 95       	ret

00004e3a <init_SoftKeys>:

void init_SoftKeys(){
    4e3a:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    4e3c:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <eeprom_ReadSoftkeys>
    4e40:	8f 3f       	cpi	r24, 0xFF	; 255
    4e42:	c9 f4       	brne	.+50     	; 0x4e76 <init_SoftKeys+0x3c>
    4e44:	0f c0       	rjmp	.+30     	; 0x4e64 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    4e46:	82 2f       	mov	r24, r18
    4e48:	90 e0       	ldi	r25, 0x00	; 0
    4e4a:	fc 01       	movw	r30, r24
    4e4c:	ee 59       	subi	r30, 0x9E	; 158
    4e4e:	fa 4f       	sbci	r31, 0xFA	; 250
    4e50:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    4e52:	88 0f       	add	r24, r24
    4e54:	99 1f       	adc	r25, r25
    4e56:	fc 01       	movw	r30, r24
    4e58:	e7 59       	subi	r30, 0x97	; 151
    4e5a:	fa 4f       	sbci	r31, 0xFA	; 250
    4e5c:	11 82       	std	Z+1, r1	; 0x01
    4e5e:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4e60:	2f 5f       	subi	r18, 0xFF	; 255
    4e62:	01 c0       	rjmp	.+2      	; 0x4e66 <init_SoftKeys+0x2c>
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	24 30       	cpi	r18, 0x04	; 4
    4e68:	70 f3       	brcs	.-36     	; 0x4e46 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    4e6a:	40 e0       	ldi	r20, 0x00	; 0
    4e6c:	50 e0       	ldi	r21, 0x00	; 0
    4e6e:	67 e0       	ldi	r22, 0x07	; 7
    4e70:	81 e0       	ldi	r24, 0x01	; 1
    4e72:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <log_putError>
    4e76:	c0 e0       	ldi	r28, 0x00	; 0
    4e78:	25 c0       	rjmp	.+74     	; 0x4ec4 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    4e7a:	4c 2f       	mov	r20, r28
    4e7c:	50 e0       	ldi	r21, 0x00	; 0
    4e7e:	fa 01       	movw	r30, r20
    4e80:	ee 59       	subi	r30, 0x9E	; 158
    4e82:	fa 4f       	sbci	r31, 0xFA	; 250
    4e84:	80 81       	ld	r24, Z
    4e86:	86 31       	cpi	r24, 0x16	; 22
    4e88:	70 f4       	brcc	.+28     	; 0x4ea6 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    4e8a:	24 e1       	ldi	r18, 0x14	; 20
    4e8c:	82 9f       	mul	r24, r18
    4e8e:	c0 01       	movw	r24, r0
    4e90:	11 24       	eor	r1, r1
    4e92:	80 5d       	subi	r24, 0xD0	; 208
    4e94:	9b 4f       	sbci	r25, 0xFB	; 251
    4e96:	44 0f       	add	r20, r20
    4e98:	55 1f       	adc	r21, r21
    4e9a:	fa 01       	movw	r30, r20
    4e9c:	e7 59       	subi	r30, 0x97	; 151
    4e9e:	fa 4f       	sbci	r31, 0xFA	; 250
    4ea0:	91 83       	std	Z+1, r25	; 0x01
    4ea2:	80 83       	st	Z, r24
    4ea4:	0e c0       	rjmp	.+28     	; 0x4ec2 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    4ea6:	fa 01       	movw	r30, r20
    4ea8:	ee 0f       	add	r30, r30
    4eaa:	ff 1f       	adc	r31, r31
    4eac:	e7 59       	subi	r30, 0x97	; 151
    4eae:	fa 4f       	sbci	r31, 0xFA	; 250
    4eb0:	11 82       	std	Z+1, r1	; 0x01
    4eb2:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    4eb4:	4f 5f       	subi	r20, 0xFF	; 255
    4eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    4eb8:	40 61       	ori	r20, 0x10	; 16
    4eba:	67 e0       	ldi	r22, 0x07	; 7
    4ebc:	81 e0       	ldi	r24, 0x01	; 1
    4ebe:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4ec2:	cf 5f       	subi	r28, 0xFF	; 255
    4ec4:	c4 30       	cpi	r28, 0x04	; 4
    4ec6:	c8 f2       	brcs	.-78     	; 0x4e7a <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    4ec8:	cf 91       	pop	r28
    4eca:	08 95       	ret

00004ecc <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    4ecc:	cf 93       	push	r28
    4ece:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    4ed0:	64 30       	cpi	r22, 0x04	; 4
    4ed2:	28 f5       	brcc	.+74     	; 0x4f1e <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    4ed4:	00 97       	sbiw	r24, 0x00	; 0
    4ed6:	b9 f0       	breq	.+46     	; 0x4f06 <softKey_Set+0x3a>
    4ed8:	fc 01       	movw	r30, r24
    4eda:	24 91       	lpm	r18, Z
    4edc:	2f 73       	andi	r18, 0x3F	; 63
    4ede:	21 30       	cpi	r18, 0x01	; 1
    4ee0:	91 f4       	brne	.+36     	; 0x4f06 <softKey_Set+0x3a>
    4ee2:	31 96       	adiw	r30, 0x01	; 1
    4ee4:	24 91       	lpm	r18, Z
    4ee6:	24 ff       	sbrs	r18, 4
    4ee8:	0e c0       	rjmp	.+28     	; 0x4f06 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    4eea:	c6 2f       	mov	r28, r22
    4eec:	d0 e0       	ldi	r29, 0x00	; 0
    4eee:	fe 01       	movw	r30, r28
    4ef0:	ee 0f       	add	r30, r30
    4ef2:	ff 1f       	adc	r31, r31
    4ef4:	e7 59       	subi	r30, 0x97	; 151
    4ef6:	fa 4f       	sbci	r31, 0xFA	; 250
    4ef8:	91 83       	std	Z+1, r25	; 0x01
    4efa:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    4efc:	8c df       	rcall	.-232    	; 0x4e16 <getSoftKeyIndex>
    4efe:	ce 59       	subi	r28, 0x9E	; 158
    4f00:	da 4f       	sbci	r29, 0xFA	; 250
    4f02:	88 83       	st	Y, r24
    4f04:	0c c0       	rjmp	.+24     	; 0x4f1e <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    4f06:	70 e0       	ldi	r23, 0x00	; 0
    4f08:	fb 01       	movw	r30, r22
    4f0a:	ee 0f       	add	r30, r30
    4f0c:	ff 1f       	adc	r31, r31
    4f0e:	e7 59       	subi	r30, 0x97	; 151
    4f10:	fa 4f       	sbci	r31, 0xFA	; 250
    4f12:	11 82       	std	Z+1, r1	; 0x01
    4f14:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    4f16:	fb 01       	movw	r30, r22
    4f18:	ee 59       	subi	r30, 0x9E	; 158
    4f1a:	fa 4f       	sbci	r31, 0xFA	; 250
    4f1c:	10 82       	st	Z, r1
		}
	}
}
    4f1e:	df 91       	pop	r29
    4f20:	cf 91       	pop	r28
    4f22:	08 95       	ret

00004f24 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    4f24:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    4f28:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    4f2c:	3e 96       	adiw	r30, 0x0e	; 14
    4f2e:	65 91       	lpm	r22, Z+
    4f30:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    4f32:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <menuVMenuSoftKey>
    4f36:	90 91 7d 05 	lds	r25, 0x057D	; 0x80057d <menuVMenuSoftKey+0x1>
    4f3a:	c8 df       	rcall	.-112    	; 0x4ecc <softKey_Set>
	eeprom_UpdateSoftkeys();
    4f3c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <eeprom_UpdateSoftkeys>
	return 0;
}
    4f40:	80 e0       	ldi	r24, 0x00	; 0
    4f42:	08 95       	ret

00004f44 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    4f44:	0f 93       	push	r16
    4f46:	1f 93       	push	r17
    4f48:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4f4a:	c0 e0       	ldi	r28, 0x00	; 0
    4f4c:	32 c0       	rjmp	.+100    	; 0x4fb2 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    4f4e:	0c 2f       	mov	r16, r28
    4f50:	10 e0       	ldi	r17, 0x00	; 0
    4f52:	f8 01       	movw	r30, r16
    4f54:	ee 0f       	add	r30, r30
    4f56:	ff 1f       	adc	r31, r31
    4f58:	e7 59       	subi	r30, 0x97	; 151
    4f5a:	fa 4f       	sbci	r31, 0xFA	; 250
    4f5c:	01 90       	ld	r0, Z+
    4f5e:	f0 81       	ld	r31, Z
    4f60:	e0 2d       	mov	r30, r0
    4f62:	30 97       	sbiw	r30, 0x00	; 0
    4f64:	31 f0       	breq	.+12     	; 0x4f72 <softKeys_toLCD+0x2e>
    4f66:	3e 96       	adiw	r30, 0x0e	; 14
    4f68:	65 91       	lpm	r22, Z+
    4f6a:	75 91       	lpm	r23, Z+
    4f6c:	61 15       	cp	r22, r1
    4f6e:	71 05       	cpc	r23, r1
    4f70:	21 f4       	brne	.+8      	; 0x4f7a <softKeys_toLCD+0x36>
			keylabel_clr(i);
    4f72:	8c 2f       	mov	r24, r28
    4f74:	0e 94 96 34 	call	0x692c	; 0x692c <keylabel_clr>
    4f78:	1b c0       	rjmp	.+54     	; 0x4fb0 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    4f7a:	8c 2f       	mov	r24, r28
    4f7c:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    4f80:	00 0f       	add	r16, r16
    4f82:	11 1f       	adc	r17, r17
    4f84:	f8 01       	movw	r30, r16
    4f86:	e7 59       	subi	r30, 0x97	; 151
    4f88:	fa 4f       	sbci	r31, 0xFA	; 250
    4f8a:	01 90       	ld	r0, Z+
    4f8c:	f0 81       	ld	r31, Z
    4f8e:	e0 2d       	mov	r30, r0
    4f90:	70 96       	adiw	r30, 0x10	; 16
    4f92:	05 90       	lpm	r0, Z+
    4f94:	f4 91       	lpm	r31, Z
    4f96:	e0 2d       	mov	r30, r0
    4f98:	30 97       	sbiw	r30, 0x00	; 0
    4f9a:	51 f0       	breq	.+20     	; 0x4fb0 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    4f9c:	80 e0       	ldi	r24, 0x00	; 0
    4f9e:	19 95       	eicall
    4fa0:	81 38       	cpi	r24, 0x81	; 129
    4fa2:	11 f4       	brne	.+4      	; 0x4fa8 <softKeys_toLCD+0x64>
    4fa4:	6f ef       	ldi	r22, 0xFF	; 255
    4fa6:	01 c0       	rjmp	.+2      	; 0x4faa <softKeys_toLCD+0x66>
    4fa8:	60 e0       	ldi	r22, 0x00	; 0
    4faa:	8c 2f       	mov	r24, r28
    4fac:	0e 94 c9 34 	call	0x6992	; 0x6992 <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4fb0:	cf 5f       	subi	r28, 0xFF	; 255
    4fb2:	c4 30       	cpi	r28, 0x04	; 4
    4fb4:	60 f2       	brcs	.-104    	; 0x4f4e <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    4fb6:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
}
    4fba:	cf 91       	pop	r28
    4fbc:	1f 91       	pop	r17
    4fbe:	0f 91       	pop	r16
    4fc0:	08 95       	ret

00004fc2 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    4fc2:	82 30       	cpi	r24, 0x02	; 2
    4fc4:	49 f0       	breq	.+18     	; 0x4fd8 <softKey_MessageKey_ToSoftKeyNr+0x16>
    4fc6:	18 f4       	brcc	.+6      	; 0x4fce <softKey_MessageKey_ToSoftKeyNr+0xc>
    4fc8:	81 30       	cpi	r24, 0x01	; 1
    4fca:	51 f0       	breq	.+20     	; 0x4fe0 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    4fcc:	0b c0       	rjmp	.+22     	; 0x4fe4 <softKey_MessageKey_ToSoftKeyNr+0x22>
    4fce:	83 30       	cpi	r24, 0x03	; 3
    4fd0:	59 f0       	breq	.+22     	; 0x4fe8 <softKey_MessageKey_ToSoftKeyNr+0x26>
    4fd2:	84 30       	cpi	r24, 0x04	; 4
    4fd4:	19 f0       	breq	.+6      	; 0x4fdc <softKey_MessageKey_ToSoftKeyNr+0x1a>
    4fd6:	06 c0       	rjmp	.+12     	; 0x4fe4 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    4fdc:	82 e0       	ldi	r24, 0x02	; 2
    4fde:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    4fe0:	83 e0       	ldi	r24, 0x03	; 3
    4fe2:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    4fe4:	8f ef       	ldi	r24, 0xFF	; 255
    4fe6:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    4fe8:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    4fea:	08 95       	ret

00004fec <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    4fec:	0f 93       	push	r16
    4fee:	1f 93       	push	r17
    4ff0:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    4ff2:	84 30       	cpi	r24, 0x04	; 4
    4ff4:	d0 f5       	brcc	.+116    	; 0x506a <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    4ff6:	e8 2f       	mov	r30, r24
    4ff8:	f0 e0       	ldi	r31, 0x00	; 0
    4ffa:	ee 0f       	add	r30, r30
    4ffc:	ff 1f       	adc	r31, r31
    4ffe:	e7 59       	subi	r30, 0x97	; 151
    5000:	fa 4f       	sbci	r31, 0xFA	; 250
    5002:	00 81       	ld	r16, Z
    5004:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5006:	01 15       	cp	r16, r1
    5008:	11 05       	cpc	r17, r1
    500a:	89 f1       	breq	.+98     	; 0x506e <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    500c:	f8 01       	movw	r30, r16
    500e:	94 91       	lpm	r25, Z
    5010:	9f 73       	andi	r25, 0x3F	; 63
    5012:	91 30       	cpi	r25, 0x01	; 1
    5014:	71 f5       	brne	.+92     	; 0x5072 <softKey_Execute+0x86>
    5016:	31 96       	adiw	r30, 0x01	; 1
    5018:	94 91       	lpm	r25, Z
    501a:	94 ff       	sbrs	r25, 4
    501c:	2c c0       	rjmp	.+88     	; 0x5076 <softKey_Execute+0x8a>
    501e:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5020:	3f 96       	adiw	r30, 0x0f	; 15
    5022:	05 90       	lpm	r0, Z+
    5024:	f4 91       	lpm	r31, Z
    5026:	e0 2d       	mov	r30, r0
    5028:	30 97       	sbiw	r30, 0x00	; 0
    502a:	89 f0       	breq	.+34     	; 0x504e <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    502c:	86 2f       	mov	r24, r22
    502e:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5030:	82 38       	cpi	r24, 0x82	; 130
    5032:	29 f4       	brne	.+10     	; 0x503e <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5034:	60 e0       	ldi	r22, 0x00	; 0
    5036:	8c 2f       	mov	r24, r28
    5038:	0e 94 c9 34 	call	0x6992	; 0x6992 <keylabel_statcheck>
    503c:	06 c0       	rjmp	.+12     	; 0x504a <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    503e:	81 38       	cpi	r24, 0x81	; 129
    5040:	21 f4       	brne	.+8      	; 0x504a <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5042:	6f ef       	ldi	r22, 0xFF	; 255
    5044:	8c 2f       	mov	r24, r28
    5046:	0e 94 c9 34 	call	0x6992	; 0x6992 <keylabel_statcheck>
					}
					keylabel_toLCD();
    504a:	0e 94 aa 34 	call	0x6954	; 0x6954 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    504e:	f8 01       	movw	r30, r16
    5050:	3c 96       	adiw	r30, 0x0c	; 12
    5052:	85 91       	lpm	r24, Z+
    5054:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5056:	00 97       	sbiw	r24, 0x00	; 0
    5058:	81 f0       	breq	.+32     	; 0x507a <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    505a:	b8 01       	movw	r22, r16
    505c:	6e 5f       	subi	r22, 0xFE	; 254
    505e:	7f 4f       	sbci	r23, 0xFF	; 255
    5060:	0e 94 a4 1a 	call	0x3548	; 0x3548 <menu_Init>
					menu_InitLCD(); //display menu
    5064:	36 da       	rcall	.-2964   	; 0x44d2 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	09 c0       	rjmp	.+18     	; 0x507c <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    506a:	8f ef       	ldi	r24, 0xFF	; 255
    506c:	07 c0       	rjmp	.+14     	; 0x507c <softKey_Execute+0x90>
    506e:	8f ef       	ldi	r24, 0xFF	; 255
    5070:	05 c0       	rjmp	.+10     	; 0x507c <softKey_Execute+0x90>
    5072:	8f ef       	ldi	r24, 0xFF	; 255
    5074:	03 c0       	rjmp	.+6      	; 0x507c <softKey_Execute+0x90>
    5076:	8f ef       	ldi	r24, 0xFF	; 255
    5078:	01 c0       	rjmp	.+2      	; 0x507c <softKey_Execute+0x90>
    507a:	8f ef       	ldi	r24, 0xFF	; 255
}
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	0f 91       	pop	r16
    5082:	08 95       	ret

00005084 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5084:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5086:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    508a:	8c e0       	ldi	r24, 0x0C	; 12
    508c:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5090:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    5094:	84 ff       	sbrs	r24, 4
    5096:	02 c0       	rjmp	.+4      	; 0x509c <menu_showPowerState+0x18>
    5098:	80 e2       	ldi	r24, 0x20	; 32
    509a:	01 c0       	rjmp	.+2      	; 0x509e <menu_showPowerState+0x1a>
    509c:	89 e0       	ldi	r24, 0x09	; 9
    509e:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
	lcd_goto(saveCursor);
    50a2:	8c 2f       	mov	r24, r28
    50a4:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>

    50a8:	cf 91       	pop	r28
    50aa:	08 95       	ret

000050ac <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    50ac:	85 b1       	in	r24, 0x05	; 5
    50ae:	80 64       	ori	r24, 0x40	; 64
    50b0:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    50b2:	83 e1       	ldi	r24, 0x13	; 19
    50b4:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    50b8:	e5 df       	rcall	.-54     	; 0x5084 <menu_showPowerState>
	return 0;
}
    50ba:	80 e0       	ldi	r24, 0x00	; 0
    50bc:	08 95       	ret

000050be <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    50be:	85 b1       	in	r24, 0x05	; 5
    50c0:	8f 7b       	andi	r24, 0xBF	; 191
    50c2:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    50c4:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    50c8:	dd df       	rcall	.-70     	; 0x5084 <menu_showPowerState>
	return 0;
}
    50ca:	80 e0       	ldi	r24, 0x00	; 0
    50cc:	08 95       	ret

000050ce <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    50ce:	85 b1       	in	r24, 0x05	; 5
    50d0:	8f 7b       	andi	r24, 0xBF	; 191
    50d2:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    50da:	d4 df       	rcall	.-88     	; 0x5084 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    50dc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    50de:	f8 94       	cli
    50e0:	81 e0       	ldi	r24, 0x01	; 1
    50e2:	06 c0       	rjmp	.+12     	; 0x50f0 <menuOnEnterPwrRest+0x22>
    50e4:	ef e2       	ldi	r30, 0x2F	; 47
    50e6:	f2 e0       	ldi	r31, 0x02	; 2
    50e8:	88 e2       	ldi	r24, 0x28	; 40
    50ea:	82 83       	std	Z+2, r24	; 0x02
    50ec:	13 82       	std	Z+3, r1	; 0x03
    50ee:	80 e0       	ldi	r24, 0x00	; 0
    50f0:	81 11       	cpse	r24, r1
    50f2:	f8 cf       	rjmp	.-16     	; 0x50e4 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    50f4:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    50f6:	08 95       	ret

000050f8 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    50f8:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <msgInIndex>
    50fc:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <msgOutIndex>
    5100:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <msgOverflow>
    5104:	08 95       	ret

00005106 <message_push>:
    5106:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <msgInIndex>
    510a:	e9 2f       	mov	r30, r25
    510c:	f0 e0       	ldi	r31, 0x00	; 0
    510e:	ee 57       	subi	r30, 0x7E	; 126
    5110:	f8 4f       	sbci	r31, 0xF8	; 248
    5112:	80 83       	st	Z, r24
    5114:	9f 5f       	subi	r25, 0xFF	; 255
    5116:	9f 71       	andi	r25, 0x1F	; 31
    5118:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <msgOutIndex>
    511c:	98 13       	cpse	r25, r24
    511e:	04 c0       	rjmp	.+8      	; 0x5128 <message_push+0x22>
    5120:	8f ef       	ldi	r24, 0xFF	; 255
    5122:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <msgOverflow>
    5126:	08 95       	ret
    5128:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <msgInIndex>
    512c:	08 95       	ret

0000512e <message_get>:
    512e:	4f b7       	in	r20, 0x3f	; 63
    5130:	f8 94       	cli
    5132:	21 e0       	ldi	r18, 0x01	; 1
    5134:	11 c0       	rjmp	.+34     	; 0x5158 <message_get+0x2a>
    5136:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <msgOutIndex>
    513a:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <msgInIndex>
    513e:	8f ef       	ldi	r24, 0xFF	; 255
    5140:	20 e0       	ldi	r18, 0x00	; 0
    5142:	93 17       	cp	r25, r19
    5144:	49 f0       	breq	.+18     	; 0x5158 <message_get+0x2a>
    5146:	e9 2f       	mov	r30, r25
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	ee 57       	subi	r30, 0x7E	; 126
    514c:	f8 4f       	sbci	r31, 0xF8	; 248
    514e:	80 81       	ld	r24, Z
    5150:	9f 5f       	subi	r25, 0xFF	; 255
    5152:	9f 71       	andi	r25, 0x1F	; 31
    5154:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <msgOutIndex>
    5158:	21 11       	cpse	r18, r1
    515a:	ed cf       	rjmp	.-38     	; 0x5136 <message_get+0x8>
    515c:	4f bf       	out	0x3f, r20	; 63
    515e:	08 95       	ret

00005160 <message_status>:
    5160:	4f b7       	in	r20, 0x3f	; 63
    5162:	f8 94       	cli
    5164:	91 e0       	ldi	r25, 0x01	; 1
    5166:	08 c0       	rjmp	.+16     	; 0x5178 <message_status+0x18>
    5168:	30 91 7e 05 	lds	r19, 0x057E	; 0x80057e <msgOutIndex>
    516c:	20 91 81 07 	lds	r18, 0x0781	; 0x800781 <msgInIndex>
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	80 e0       	ldi	r24, 0x00	; 0
    5174:	32 17       	cp	r19, r18
    5176:	11 f0       	breq	.+4      	; 0x517c <message_status+0x1c>
    5178:	8f ef       	ldi	r24, 0xFF	; 255
    517a:	01 c0       	rjmp	.+2      	; 0x517e <message_status+0x1e>
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	91 11       	cpse	r25, r1
    5180:	f3 cf       	rjmp	.-26     	; 0x5168 <message_status+0x8>
    5182:	4f bf       	out	0x3f, r20	; 63
    5184:	08 95       	ret

00005186 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5186:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5188:	90 91 a2 07 	lds	r25, 0x07A2	; 0x8007a2 <msgPipe_Handling>
    518c:	99 23       	and	r25, r25
    518e:	e1 f0       	breq	.+56     	; 0x51c8 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5190:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <pipeMsgInIndex>
    5194:	21 e0       	ldi	r18, 0x01	; 1
    5196:	29 0f       	add	r18, r25
    5198:	20 93 7f 07 	sts	0x077F, r18	; 0x80077f <pipeMsgInIndex>
    519c:	e9 2f       	mov	r30, r25
    519e:	f0 e0       	ldi	r31, 0x00	; 0
    51a0:	ee 0f       	add	r30, r30
    51a2:	ff 1f       	adc	r31, r31
    51a4:	e1 58       	subi	r30, 0x81	; 129
    51a6:	fa 4f       	sbci	r31, 0xFA	; 250
    51a8:	51 83       	std	Z+1, r21	; 0x01
    51aa:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    51ac:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <pipeMsgOutIndex>
    51b0:	28 13       	cpse	r18, r24
    51b2:	0a c0       	rjmp	.+20     	; 0x51c8 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    51b4:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    51b8:	9f 3f       	cpi	r25, 0xFF	; 255
    51ba:	19 f4       	brne	.+6      	; 0x51c2 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    51bc:	8f ef       	ldi	r24, 0xFF	; 255
    51be:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    51c2:	8f ef       	ldi	r24, 0xFF	; 255
    51c4:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <msgPipeOverflow>
    51c8:	08 95       	ret

000051ca <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    51ca:	e0 91 a4 07 	lds	r30, 0x07A4	; 0x8007a4 <pipeMsgOutIndex>
    51ce:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <pipeMsgInIndex>
    51d2:	e8 13       	cpse	r30, r24
    51d4:	03 c0       	rjmp	.+6      	; 0x51dc <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    51d6:	8f ef       	ldi	r24, 0xFF	; 255
    51d8:	9f ef       	ldi	r25, 0xFF	; 255
    51da:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	8e 0f       	add	r24, r30
    51e0:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <pipeMsgOutIndex>
    51e4:	f0 e0       	ldi	r31, 0x00	; 0
    51e6:	ee 0f       	add	r30, r30
    51e8:	ff 1f       	adc	r31, r31
    51ea:	e1 58       	subi	r30, 0x81	; 129
    51ec:	fa 4f       	sbci	r31, 0xFA	; 250
    51ee:	80 81       	ld	r24, Z
    51f0:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    51f2:	08 95       	ret

000051f4 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    51f4:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <pipeMsgOutIndex>
    51f8:	80 91 7f 07 	lds	r24, 0x077F	; 0x80077f <pipeMsgInIndex>
    51fc:	98 13       	cpse	r25, r24
    51fe:	02 c0       	rjmp	.+4      	; 0x5204 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5200:	80 e0       	ldi	r24, 0x00	; 0
    5202:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5204:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5206:	08 95       	ret

00005208 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	ee eb       	ldi	r30, 0xBE	; 190
    520c:	f7 e0       	ldi	r31, 0x07	; 7
    520e:	03 c0       	rjmp	.+6      	; 0x5216 <midi_CouplerReset+0xe>
    5210:	10 82       	st	Z, r1
    5212:	8f 5f       	subi	r24, 0xFF	; 255
    5214:	31 96       	adiw	r30, 0x01	; 1
    5216:	8c 30       	cpi	r24, 0x0C	; 12
    5218:	d8 f3       	brcs	.-10     	; 0x5210 <midi_CouplerReset+0x8>
    521a:	08 95       	ret

0000521c <init_Midi>:
    521c:	f5 cf       	rjmp	.-22     	; 0x5208 <midi_CouplerReset>
    521e:	08 95       	ret

00005220 <set_Coupler>:
    5220:	8c 30       	cpi	r24, 0x0C	; 12
    5222:	e8 f4       	brcc	.+58     	; 0x525e <set_Coupler+0x3e>
    5224:	e8 2f       	mov	r30, r24
    5226:	f0 e0       	ldi	r31, 0x00	; 0
    5228:	e2 54       	subi	r30, 0x42	; 66
    522a:	f8 4f       	sbci	r31, 0xF8	; 248
    522c:	9f ef       	ldi	r25, 0xFF	; 255
    522e:	90 83       	st	Z, r25
    5230:	86 30       	cpi	r24, 0x06	; 6
    5232:	10 f0       	brcs	.+4      	; 0x5238 <set_Coupler+0x18>
    5234:	86 50       	subi	r24, 0x06	; 6
    5236:	01 c0       	rjmp	.+2      	; 0x523a <set_Coupler+0x1a>
    5238:	8a 5f       	subi	r24, 0xFA	; 250
    523a:	e8 2f       	mov	r30, r24
    523c:	f0 e0       	ldi	r31, 0x00	; 0
    523e:	df 01       	movw	r26, r30
    5240:	a2 54       	subi	r26, 0x42	; 66
    5242:	b8 4f       	sbci	r27, 0xF8	; 248
    5244:	8c 91       	ld	r24, X
    5246:	88 23       	and	r24, r24
    5248:	59 f0       	breq	.+22     	; 0x5260 <set_Coupler+0x40>
    524a:	df 01       	movw	r26, r30
    524c:	a2 54       	subi	r26, 0x42	; 66
    524e:	b8 4f       	sbci	r27, 0xF8	; 248
    5250:	1c 92       	st	X, r1
    5252:	ee 0f       	add	r30, r30
    5254:	ff 1f       	adc	r31, r31
    5256:	ea 5f       	subi	r30, 0xFA	; 250
    5258:	fe 4e       	sbci	r31, 0xEE	; 238
    525a:	84 91       	lpm	r24, Z
    525c:	08 95       	ret
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	08 95       	ret

00005262 <getAllCouplers>:
    5262:	80 e0       	ldi	r24, 0x00	; 0
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	4b e0       	ldi	r20, 0x0B	; 11
    5268:	01 c0       	rjmp	.+2      	; 0x526c <getAllCouplers+0xa>
    526a:	42 2f       	mov	r20, r18
    526c:	28 2f       	mov	r18, r24
    526e:	39 2f       	mov	r19, r25
    5270:	22 0f       	add	r18, r18
    5272:	33 1f       	adc	r19, r19
    5274:	82 2f       	mov	r24, r18
    5276:	93 2f       	mov	r25, r19
    5278:	e4 2f       	mov	r30, r20
    527a:	f0 e0       	ldi	r31, 0x00	; 0
    527c:	e2 54       	subi	r30, 0x42	; 66
    527e:	f8 4f       	sbci	r31, 0xF8	; 248
    5280:	50 81       	ld	r21, Z
    5282:	5f 3f       	cpi	r21, 0xFF	; 255
    5284:	09 f4       	brne	.+2      	; 0x5288 <getAllCouplers+0x26>
    5286:	81 60       	ori	r24, 0x01	; 1
    5288:	2f ef       	ldi	r18, 0xFF	; 255
    528a:	24 0f       	add	r18, r20
    528c:	41 11       	cpse	r20, r1
    528e:	ed cf       	rjmp	.-38     	; 0x526a <getAllCouplers+0x8>
    5290:	08 95       	ret

00005292 <setAllCouplers>:
    5292:	40 e0       	ldi	r20, 0x00	; 0
    5294:	80 ff       	sbrs	r24, 0
    5296:	07 c0       	rjmp	.+14     	; 0x52a6 <setAllCouplers+0x14>
    5298:	e4 2f       	mov	r30, r20
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	e2 54       	subi	r30, 0x42	; 66
    529e:	f8 4f       	sbci	r31, 0xF8	; 248
    52a0:	2f ef       	ldi	r18, 0xFF	; 255
    52a2:	20 83       	st	Z, r18
    52a4:	05 c0       	rjmp	.+10     	; 0x52b0 <setAllCouplers+0x1e>
    52a6:	e4 2f       	mov	r30, r20
    52a8:	f0 e0       	ldi	r31, 0x00	; 0
    52aa:	e2 54       	subi	r30, 0x42	; 66
    52ac:	f8 4f       	sbci	r31, 0xF8	; 248
    52ae:	10 82       	st	Z, r1
    52b0:	28 2f       	mov	r18, r24
    52b2:	39 2f       	mov	r19, r25
    52b4:	36 95       	lsr	r19
    52b6:	27 95       	ror	r18
    52b8:	82 2f       	mov	r24, r18
    52ba:	93 2f       	mov	r25, r19
    52bc:	4f 5f       	subi	r20, 0xFF	; 255
    52be:	4c 30       	cpi	r20, 0x0C	; 12
    52c0:	48 f3       	brcs	.-46     	; 0x5294 <setAllCouplers+0x2>
    52c2:	08 95       	ret

000052c4 <midiAllReset>:
    52c4:	80 e8       	ldi	r24, 0x80	; 128
    52c6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    52ca:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <init_Pipe>
    52ce:	08 95       	ret

000052d0 <registers_CalcCount>:
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	12 c0       	rjmp	.+36     	; 0x52fa <registers_CalcCount+0x2a>
    52d6:	82 2f       	mov	r24, r18
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	fc 01       	movw	r30, r24
    52dc:	ee 0f       	add	r30, r30
    52de:	ff 1f       	adc	r31, r31
    52e0:	8e 0f       	add	r24, r30
    52e2:	9f 1f       	adc	r25, r31
    52e4:	fc 01       	movw	r30, r24
    52e6:	eb 55       	subi	r30, 0x5B	; 91
    52e8:	f8 4f       	sbci	r31, 0xF8	; 248
    52ea:	81 81       	ldd	r24, Z+1	; 0x01
    52ec:	8f 3f       	cpi	r24, 0xFF	; 255
    52ee:	21 f0       	breq	.+8      	; 0x52f8 <registers_CalcCount+0x28>
    52f0:	83 17       	cp	r24, r19
    52f2:	10 f0       	brcs	.+4      	; 0x52f8 <registers_CalcCount+0x28>
    52f4:	31 e0       	ldi	r19, 0x01	; 1
    52f6:	38 0f       	add	r19, r24
    52f8:	2f 5f       	subi	r18, 0xFF	; 255
    52fa:	28 30       	cpi	r18, 0x08	; 8
    52fc:	60 f3       	brcs	.-40     	; 0x52d6 <registers_CalcCount+0x6>
    52fe:	30 93 bd 07 	sts	0x07BD, r19	; 0x8007bd <registerCount>
    5302:	08 95       	ret

00005304 <init_Registers>:
    5304:	8f ef       	ldi	r24, 0xFF	; 255
    5306:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <midi_RegisterChanged>
    530a:	20 e0       	ldi	r18, 0x00	; 0
    530c:	0e c0       	rjmp	.+28     	; 0x532a <init_Registers+0x26>
    530e:	82 2f       	mov	r24, r18
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	fc 01       	movw	r30, r24
    5314:	ee 0f       	add	r30, r30
    5316:	ff 1f       	adc	r31, r31
    5318:	e8 0f       	add	r30, r24
    531a:	f9 1f       	adc	r31, r25
    531c:	eb 55       	subi	r30, 0x5B	; 91
    531e:	f8 4f       	sbci	r31, 0xF8	; 248
    5320:	8f ef       	ldi	r24, 0xFF	; 255
    5322:	80 83       	st	Z, r24
    5324:	81 83       	std	Z+1, r24	; 0x01
    5326:	12 82       	std	Z+2, r1	; 0x02
    5328:	2f 5f       	subi	r18, 0xFF	; 255
    532a:	28 30       	cpi	r18, 0x08	; 8
    532c:	80 f3       	brcs	.-32     	; 0x530e <init_Registers+0xa>
    532e:	0e 94 87 0a 	call	0x150e	; 0x150e <eeprom_ReadReg>
    5332:	8f 3f       	cpi	r24, 0xFF	; 255
    5334:	49 f4       	brne	.+18     	; 0x5348 <init_Registers+0x44>
    5336:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <registerCount>
    533a:	40 e0       	ldi	r20, 0x00	; 0
    533c:	50 e0       	ldi	r21, 0x00	; 0
    533e:	65 e0       	ldi	r22, 0x05	; 5
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <log_putError>
    5346:	01 c0       	rjmp	.+2      	; 0x534a <init_Registers+0x46>
    5348:	c3 df       	rcall	.-122    	; 0x52d0 <registers_CalcCount>
    534a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <eeprom_ReadProg>
    534e:	8f 3f       	cpi	r24, 0xFF	; 255
    5350:	a1 f5       	brne	.+104    	; 0x53ba <init_Registers+0xb6>
    5352:	2a c0       	rjmp	.+84     	; 0x53a8 <init_Registers+0xa4>
    5354:	83 2f       	mov	r24, r19
    5356:	90 e0       	ldi	r25, 0x00	; 0
    5358:	fc 01       	movw	r30, r24
    535a:	ee 0f       	add	r30, r30
    535c:	ff 1f       	adc	r31, r31
    535e:	88 0f       	add	r24, r24
    5360:	99 1f       	adc	r25, r25
    5362:	88 0f       	add	r24, r24
    5364:	99 1f       	adc	r25, r25
    5366:	88 0f       	add	r24, r24
    5368:	99 1f       	adc	r25, r25
    536a:	e8 0f       	add	r30, r24
    536c:	f9 1f       	adc	r31, r25
    536e:	e3 5f       	subi	r30, 0xF3	; 243
    5370:	f6 4f       	sbci	r31, 0xF6	; 246
    5372:	e2 0f       	add	r30, r18
    5374:	f1 1d       	adc	r31, r1
    5376:	10 82       	st	Z, r1
    5378:	2f 5f       	subi	r18, 0xFF	; 255
    537a:	01 c0       	rjmp	.+2      	; 0x537e <init_Registers+0x7a>
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	28 30       	cpi	r18, 0x08	; 8
    5380:	48 f3       	brcs	.-46     	; 0x5354 <init_Registers+0x50>
    5382:	83 2f       	mov	r24, r19
    5384:	90 e0       	ldi	r25, 0x00	; 0
    5386:	fc 01       	movw	r30, r24
    5388:	ee 0f       	add	r30, r30
    538a:	ff 1f       	adc	r31, r31
    538c:	88 0f       	add	r24, r24
    538e:	99 1f       	adc	r25, r25
    5390:	88 0f       	add	r24, r24
    5392:	99 1f       	adc	r25, r25
    5394:	88 0f       	add	r24, r24
    5396:	99 1f       	adc	r25, r25
    5398:	e8 0f       	add	r30, r24
    539a:	f9 1f       	adc	r31, r25
    539c:	e3 5f       	subi	r30, 0xF3	; 243
    539e:	f6 4f       	sbci	r31, 0xF6	; 246
    53a0:	11 86       	std	Z+9, r1	; 0x09
    53a2:	10 86       	std	Z+8, r1	; 0x08
    53a4:	3f 5f       	subi	r19, 0xFF	; 255
    53a6:	01 c0       	rjmp	.+2      	; 0x53aa <init_Registers+0xa6>
    53a8:	30 e0       	ldi	r19, 0x00	; 0
    53aa:	30 34       	cpi	r19, 0x40	; 64
    53ac:	38 f3       	brcs	.-50     	; 0x537c <init_Registers+0x78>
    53ae:	40 e0       	ldi	r20, 0x00	; 0
    53b0:	50 e0       	ldi	r21, 0x00	; 0
    53b2:	66 e0       	ldi	r22, 0x06	; 6
    53b4:	81 e0       	ldi	r24, 0x01	; 1
    53b6:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <log_putError>
    53ba:	08 95       	ret

000053bc <regNr_to_moduleBit>:
    53bc:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <registerCount>
    53c0:	89 17       	cp	r24, r25
    53c2:	a0 f4       	brcc	.+40     	; 0x53ec <regNr_to_moduleBit+0x30>
    53c4:	80 34       	cpi	r24, 0x40	; 64
    53c6:	90 f4       	brcc	.+36     	; 0x53ec <regNr_to_moduleBit+0x30>
    53c8:	28 e0       	ldi	r18, 0x08	; 8
    53ca:	e5 ea       	ldi	r30, 0xA5	; 165
    53cc:	f7 e0       	ldi	r31, 0x07	; 7
    53ce:	30 81       	ld	r19, Z
    53d0:	83 17       	cp	r24, r19
    53d2:	48 f0       	brcs	.+18     	; 0x53e6 <regNr_to_moduleBit+0x2a>
    53d4:	91 81       	ldd	r25, Z+1	; 0x01
    53d6:	98 17       	cp	r25, r24
    53d8:	30 f0       	brcs	.+12     	; 0x53e6 <regNr_to_moduleBit+0x2a>
    53da:	22 81       	ldd	r18, Z+2	; 0x02
    53dc:	98 2f       	mov	r25, r24
    53de:	93 1b       	sub	r25, r19
    53e0:	80 e0       	ldi	r24, 0x00	; 0
    53e2:	92 0f       	add	r25, r18
    53e4:	08 95       	ret
    53e6:	33 96       	adiw	r30, 0x03	; 3
    53e8:	21 50       	subi	r18, 0x01	; 1
    53ea:	89 f7       	brne	.-30     	; 0x53ce <regNr_to_moduleBit+0x12>
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	08 95       	ret

000053f2 <moduleBit_to_registerNr>:
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	16 c0       	rjmp	.+44     	; 0x5422 <moduleBit_to_registerNr+0x30>
    53f6:	40 91 a7 07 	lds	r20, 0x07A7	; 0x8007a7 <registerMap+0x2>
    53fa:	84 17       	cp	r24, r20
    53fc:	88 f0       	brcs	.+34     	; 0x5420 <moduleBit_to_registerNr+0x2e>
    53fe:	68 2f       	mov	r22, r24
    5400:	70 e0       	ldi	r23, 0x00	; 0
    5402:	e5 ea       	ldi	r30, 0xA5	; 165
    5404:	f7 e0       	ldi	r31, 0x07	; 7
    5406:	21 81       	ldd	r18, Z+1	; 0x01
    5408:	30 e0       	ldi	r19, 0x00	; 0
    540a:	24 0f       	add	r18, r20
    540c:	31 1d       	adc	r19, r1
    540e:	50 81       	ld	r21, Z
    5410:	25 1b       	sub	r18, r21
    5412:	31 09       	sbc	r19, r1
    5414:	26 17       	cp	r18, r22
    5416:	37 07       	cpc	r19, r23
    5418:	1c f0       	brlt	.+6      	; 0x5420 <moduleBit_to_registerNr+0x2e>
    541a:	84 1b       	sub	r24, r20
    541c:	85 0f       	add	r24, r21
    541e:	08 95       	ret
    5420:	9f 5f       	subi	r25, 0xFF	; 255
    5422:	98 30       	cpi	r25, 0x08	; 8
    5424:	40 f3       	brcs	.-48     	; 0x53f6 <moduleBit_to_registerNr+0x4>
    5426:	8f ef       	ldi	r24, 0xFF	; 255
    5428:	08 95       	ret

0000542a <read_Register>:
    542a:	cf 93       	push	r28
    542c:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <registerCount>
    5430:	89 17       	cp	r24, r25
    5432:	08 f0       	brcs	.+2      	; 0x5436 <read_Register+0xc>
    5434:	3c c0       	rjmp	.+120    	; 0x54ae <read_Register+0x84>
    5436:	c6 2f       	mov	r28, r22
    5438:	c1 df       	rcall	.-126    	; 0x53bc <regNr_to_moduleBit>
    543a:	81 11       	cpse	r24, r1
    543c:	30 c0       	rjmp	.+96     	; 0x549e <read_Register+0x74>
    543e:	29 2f       	mov	r18, r25
    5440:	2f 71       	andi	r18, 0x1F	; 31
    5442:	92 95       	swap	r25
    5444:	96 95       	lsr	r25
    5446:	97 70       	andi	r25, 0x07	; 7
    5448:	41 e0       	ldi	r20, 0x01	; 1
    544a:	50 e0       	ldi	r21, 0x00	; 0
    544c:	02 c0       	rjmp	.+4      	; 0x5452 <read_Register+0x28>
    544e:	44 0f       	add	r20, r20
    5450:	55 1f       	adc	r21, r21
    5452:	9a 95       	dec	r25
    5454:	e2 f7       	brpl	.-8      	; 0x544e <read_Register+0x24>
    5456:	30 e0       	ldi	r19, 0x00	; 0
    5458:	f9 01       	movw	r30, r18
    545a:	ee 0f       	add	r30, r30
    545c:	ff 1f       	adc	r31, r31
    545e:	ee 0f       	add	r30, r30
    5460:	ff 1f       	adc	r31, r31
    5462:	ee 0f       	add	r30, r30
    5464:	ff 1f       	adc	r31, r31
    5466:	e7 5b       	subi	r30, 0xB7	; 183
    5468:	fd 4f       	sbci	r31, 0xFD	; 253
    546a:	91 81       	ldd	r25, Z+1	; 0x01
    546c:	94 23       	and	r25, r20
    546e:	11 f4       	brne	.+4      	; 0x5474 <read_Register+0x4a>
    5470:	c1 fd       	sbrc	r28, 1
    5472:	17 c0       	rjmp	.+46     	; 0x54a2 <read_Register+0x78>
    5474:	22 0f       	add	r18, r18
    5476:	33 1f       	adc	r19, r19
    5478:	22 0f       	add	r18, r18
    547a:	33 1f       	adc	r19, r19
    547c:	22 0f       	add	r18, r18
    547e:	33 1f       	adc	r19, r19
    5480:	f9 01       	movw	r30, r18
    5482:	e7 5b       	subi	r30, 0xB7	; 183
    5484:	fd 4f       	sbci	r31, 0xFD	; 253
    5486:	26 81       	ldd	r18, Z+6	; 0x06
    5488:	42 23       	and	r20, r18
    548a:	11 f0       	breq	.+4      	; 0x5490 <read_Register+0x66>
    548c:	c0 fd       	sbrc	r28, 0
    548e:	0b c0       	rjmp	.+22     	; 0x54a6 <read_Register+0x7c>
    5490:	99 23       	and	r25, r25
    5492:	71 f0       	breq	.+28     	; 0x54b0 <read_Register+0x86>
    5494:	44 23       	and	r20, r20
    5496:	61 f0       	breq	.+24     	; 0x54b0 <read_Register+0x86>
    5498:	c4 30       	cpi	r28, 0x04	; 4
    549a:	51 f4       	brne	.+20     	; 0x54b0 <read_Register+0x86>
    549c:	06 c0       	rjmp	.+12     	; 0x54aa <read_Register+0x80>
    549e:	80 e0       	ldi	r24, 0x00	; 0
    54a0:	07 c0       	rjmp	.+14     	; 0x54b0 <read_Register+0x86>
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	05 c0       	rjmp	.+10     	; 0x54b0 <read_Register+0x86>
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	03 c0       	rjmp	.+6      	; 0x54b0 <read_Register+0x86>
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	01 c0       	rjmp	.+2      	; 0x54b0 <read_Register+0x86>
    54ae:	80 e0       	ldi	r24, 0x00	; 0
    54b0:	cf 91       	pop	r28
    54b2:	08 95       	ret

000054b4 <get_RegisterStatus>:
    54b4:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <registerCount>
    54b8:	89 17       	cp	r24, r25
    54ba:	78 f5       	brcc	.+94     	; 0x551a <get_RegisterStatus+0x66>
    54bc:	7f df       	rcall	.-258    	; 0x53bc <regNr_to_moduleBit>
    54be:	81 11       	cpse	r24, r1
    54c0:	28 c0       	rjmp	.+80     	; 0x5512 <get_RegisterStatus+0x5e>
    54c2:	29 2f       	mov	r18, r25
    54c4:	2f 71       	andi	r18, 0x1F	; 31
    54c6:	39 2f       	mov	r19, r25
    54c8:	32 95       	swap	r19
    54ca:	36 95       	lsr	r19
    54cc:	37 70       	andi	r19, 0x07	; 7
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	02 c0       	rjmp	.+4      	; 0x54d8 <get_RegisterStatus+0x24>
    54d4:	88 0f       	add	r24, r24
    54d6:	99 1f       	adc	r25, r25
    54d8:	3a 95       	dec	r19
    54da:	e2 f7       	brpl	.-8      	; 0x54d4 <get_RegisterStatus+0x20>
    54dc:	30 e0       	ldi	r19, 0x00	; 0
    54de:	f9 01       	movw	r30, r18
    54e0:	ee 0f       	add	r30, r30
    54e2:	ff 1f       	adc	r31, r31
    54e4:	ee 0f       	add	r30, r30
    54e6:	ff 1f       	adc	r31, r31
    54e8:	ee 0f       	add	r30, r30
    54ea:	ff 1f       	adc	r31, r31
    54ec:	e7 5b       	subi	r30, 0xB7	; 183
    54ee:	fd 4f       	sbci	r31, 0xFD	; 253
    54f0:	41 81       	ldd	r20, Z+1	; 0x01
    54f2:	48 23       	and	r20, r24
    54f4:	81 f0       	breq	.+32     	; 0x5516 <get_RegisterStatus+0x62>
    54f6:	22 0f       	add	r18, r18
    54f8:	33 1f       	adc	r19, r19
    54fa:	22 0f       	add	r18, r18
    54fc:	33 1f       	adc	r19, r19
    54fe:	22 0f       	add	r18, r18
    5500:	33 1f       	adc	r19, r19
    5502:	f9 01       	movw	r30, r18
    5504:	e7 5b       	subi	r30, 0xB7	; 183
    5506:	fd 4f       	sbci	r31, 0xFD	; 253
    5508:	96 81       	ldd	r25, Z+6	; 0x06
    550a:	89 23       	and	r24, r25
    550c:	39 f0       	breq	.+14     	; 0x551c <get_RegisterStatus+0x68>
    550e:	81 e0       	ldi	r24, 0x01	; 1
    5510:	08 95       	ret
    5512:	80 e0       	ldi	r24, 0x00	; 0
    5514:	08 95       	ret
    5516:	82 e0       	ldi	r24, 0x02	; 2
    5518:	08 95       	ret
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	08 95       	ret

0000551e <count_Registers>:
    551e:	1f 93       	push	r17
    5520:	cf 93       	push	r28
    5522:	df 93       	push	r29
    5524:	18 2f       	mov	r17, r24
    5526:	c0 e0       	ldi	r28, 0x00	; 0
    5528:	d0 e0       	ldi	r29, 0x00	; 0
    552a:	06 c0       	rjmp	.+12     	; 0x5538 <count_Registers+0x1a>
    552c:	61 2f       	mov	r22, r17
    552e:	8c 2f       	mov	r24, r28
    5530:	7c df       	rcall	.-264    	; 0x542a <read_Register>
    5532:	81 11       	cpse	r24, r1
    5534:	df 5f       	subi	r29, 0xFF	; 255
    5536:	cf 5f       	subi	r28, 0xFF	; 255
    5538:	c0 34       	cpi	r28, 0x40	; 64
    553a:	c0 f3       	brcs	.-16     	; 0x552c <count_Registers+0xe>
    553c:	8d 2f       	mov	r24, r29
    553e:	df 91       	pop	r29
    5540:	cf 91       	pop	r28
    5542:	1f 91       	pop	r17
    5544:	08 95       	ret

00005546 <read_allRegister>:
    5546:	ef 92       	push	r14
    5548:	ff 92       	push	r15
    554a:	0f 93       	push	r16
    554c:	1f 93       	push	r17
    554e:	cf 93       	push	r28
    5550:	df 93       	push	r29
    5552:	7c 01       	movw	r14, r24
    5554:	c0 e0       	ldi	r28, 0x00	; 0
    5556:	d0 e0       	ldi	r29, 0x00	; 0
    5558:	00 e0       	ldi	r16, 0x00	; 0
    555a:	17 c0       	rjmp	.+46     	; 0x558a <read_allRegister+0x44>
    555c:	1c 2f       	mov	r17, r28
    555e:	17 70       	andi	r17, 0x07	; 7
    5560:	09 f4       	brne	.+2      	; 0x5564 <read_allRegister+0x1e>
    5562:	d0 e0       	ldi	r29, 0x00	; 0
    5564:	d6 95       	lsr	r29
    5566:	63 e0       	ldi	r22, 0x03	; 3
    5568:	8c 2f       	mov	r24, r28
    556a:	5f df       	rcall	.-322    	; 0x542a <read_Register>
    556c:	88 23       	and	r24, r24
    556e:	11 f0       	breq	.+4      	; 0x5574 <read_allRegister+0x2e>
    5570:	d0 68       	ori	r29, 0x80	; 128
    5572:	0f 5f       	subi	r16, 0xFF	; 255
    5574:	17 30       	cpi	r17, 0x07	; 7
    5576:	41 f4       	brne	.+16     	; 0x5588 <read_allRegister+0x42>
    5578:	e1 14       	cp	r14, r1
    557a:	f1 04       	cpc	r15, r1
    557c:	29 f0       	breq	.+10     	; 0x5588 <read_allRegister+0x42>
    557e:	f7 01       	movw	r30, r14
    5580:	d0 83       	st	Z, r29
    5582:	c7 01       	movw	r24, r14
    5584:	01 96       	adiw	r24, 0x01	; 1
    5586:	7c 01       	movw	r14, r24
    5588:	cf 5f       	subi	r28, 0xFF	; 255
    558a:	c0 34       	cpi	r28, 0x40	; 64
    558c:	38 f3       	brcs	.-50     	; 0x555c <read_allRegister+0x16>
    558e:	80 2f       	mov	r24, r16
    5590:	df 91       	pop	r29
    5592:	cf 91       	pop	r28
    5594:	1f 91       	pop	r17
    5596:	0f 91       	pop	r16
    5598:	ff 90       	pop	r15
    559a:	ef 90       	pop	r14
    559c:	08 95       	ret

0000559e <register_onOff>:
    559e:	cf 93       	push	r28
    55a0:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <registerCount>
    55a4:	89 17       	cp	r24, r25
    55a6:	b8 f5       	brcc	.+110    	; 0x5616 <register_onOff+0x78>
    55a8:	c6 2f       	mov	r28, r22
    55aa:	08 df       	rcall	.-496    	; 0x53bc <regNr_to_moduleBit>
    55ac:	81 11       	cpse	r24, r1
    55ae:	33 c0       	rjmp	.+102    	; 0x5616 <register_onOff+0x78>
    55b0:	e9 2f       	mov	r30, r25
    55b2:	ef 71       	andi	r30, 0x1F	; 31
    55b4:	92 95       	swap	r25
    55b6:	96 95       	lsr	r25
    55b8:	97 70       	andi	r25, 0x07	; 7
    55ba:	c0 ff       	sbrs	r28, 0
    55bc:	17 c0       	rjmp	.+46     	; 0x55ec <register_onOff+0x4e>
    55be:	f0 e0       	ldi	r31, 0x00	; 0
    55c0:	21 e0       	ldi	r18, 0x01	; 1
    55c2:	30 e0       	ldi	r19, 0x00	; 0
    55c4:	a9 01       	movw	r20, r18
    55c6:	02 c0       	rjmp	.+4      	; 0x55cc <register_onOff+0x2e>
    55c8:	44 0f       	add	r20, r20
    55ca:	55 1f       	adc	r21, r21
    55cc:	9a 95       	dec	r25
    55ce:	e2 f7       	brpl	.-8      	; 0x55c8 <register_onOff+0x2a>
    55d0:	ca 01       	movw	r24, r20
    55d2:	ee 0f       	add	r30, r30
    55d4:	ff 1f       	adc	r31, r31
    55d6:	ee 0f       	add	r30, r30
    55d8:	ff 1f       	adc	r31, r31
    55da:	ee 0f       	add	r30, r30
    55dc:	ff 1f       	adc	r31, r31
    55de:	e7 5b       	subi	r30, 0xB7	; 183
    55e0:	fd 4f       	sbci	r31, 0xFD	; 253
    55e2:	80 95       	com	r24
    55e4:	91 81       	ldd	r25, Z+1	; 0x01
    55e6:	89 23       	and	r24, r25
    55e8:	81 83       	std	Z+1, r24	; 0x01
    55ea:	15 c0       	rjmp	.+42     	; 0x5616 <register_onOff+0x78>
    55ec:	f0 e0       	ldi	r31, 0x00	; 0
    55ee:	21 e0       	ldi	r18, 0x01	; 1
    55f0:	30 e0       	ldi	r19, 0x00	; 0
    55f2:	a9 01       	movw	r20, r18
    55f4:	02 c0       	rjmp	.+4      	; 0x55fa <register_onOff+0x5c>
    55f6:	44 0f       	add	r20, r20
    55f8:	55 1f       	adc	r21, r21
    55fa:	9a 95       	dec	r25
    55fc:	e2 f7       	brpl	.-8      	; 0x55f6 <register_onOff+0x58>
    55fe:	ca 01       	movw	r24, r20
    5600:	ee 0f       	add	r30, r30
    5602:	ff 1f       	adc	r31, r31
    5604:	ee 0f       	add	r30, r30
    5606:	ff 1f       	adc	r31, r31
    5608:	ee 0f       	add	r30, r30
    560a:	ff 1f       	adc	r31, r31
    560c:	e7 5b       	subi	r30, 0xB7	; 183
    560e:	fd 4f       	sbci	r31, 0xFD	; 253
    5610:	91 81       	ldd	r25, Z+1	; 0x01
    5612:	89 2b       	or	r24, r25
    5614:	81 83       	std	Z+1, r24	; 0x01
    5616:	cf 91       	pop	r28
    5618:	08 95       	ret

0000561a <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    561a:	bf 92       	push	r11
    561c:	cf 92       	push	r12
    561e:	df 92       	push	r13
    5620:	ef 92       	push	r14
    5622:	ff 92       	push	r15
    5624:	0f 93       	push	r16
    5626:	1f 93       	push	r17
    5628:	cf 93       	push	r28
    562a:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    562c:	80 34       	cpi	r24, 0x40	; 64
    562e:	08 f0       	brcs	.+2      	; 0x5632 <program_toRegister+0x18>
    5630:	40 c0       	rjmp	.+128    	; 0x56b2 <program_toRegister+0x98>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5632:	e8 2e       	mov	r14, r24
    5634:	f1 2c       	mov	r15, r1
    5636:	f7 01       	movw	r30, r14
    5638:	ee 0f       	add	r30, r30
    563a:	ff 1f       	adc	r31, r31
    563c:	c7 01       	movw	r24, r14
    563e:	88 0f       	add	r24, r24
    5640:	99 1f       	adc	r25, r25
    5642:	88 0f       	add	r24, r24
    5644:	99 1f       	adc	r25, r25
    5646:	88 0f       	add	r24, r24
    5648:	99 1f       	adc	r25, r25
    564a:	e8 0f       	add	r30, r24
    564c:	f9 1f       	adc	r31, r25
    564e:	e3 5f       	subi	r30, 0xF3	; 243
    5650:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5652:	b1 2c       	mov	r11, r1
uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
    5654:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5656:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5658:	18 c0       	rjmp	.+48     	; 0x568a <program_toRegister+0x70>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    565a:	6f 01       	movw	r12, r30
    565c:	8f ef       	ldi	r24, 0xFF	; 255
    565e:	c8 1a       	sub	r12, r24
    5660:	d8 0a       	sbc	r13, r24
    5662:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5664:	d0 e0       	ldi	r29, 0x00	; 0
    5666:	0d c0       	rjmp	.+26     	; 0x5682 <program_toRegister+0x68>
				if ((regBits & 0x01) != 0) {
    5668:	8c 2f       	mov	r24, r28
    566a:	81 70       	andi	r24, 0x01	; 1
    566c:	c0 fd       	sbrc	r28, 0
					result++;
    566e:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    5670:	61 e0       	ldi	r22, 0x01	; 1
    5672:	81 11       	cpse	r24, r1
    5674:	01 c0       	rjmp	.+2      	; 0x5678 <program_toRegister+0x5e>
    5676:	60 e0       	ldi	r22, 0x00	; 0
    5678:	81 2f       	mov	r24, r17
    567a:	91 df       	rcall	.-222    	; 0x559e <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    567c:	c6 95       	lsr	r28
				regNr++;
    567e:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5680:	df 5f       	subi	r29, 0xFF	; 255
    5682:	d8 30       	cpi	r29, 0x08	; 8
    5684:	88 f3       	brcs	.-30     	; 0x5668 <program_toRegister+0x4e>
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5686:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5688:	f6 01       	movw	r30, r12
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    568a:	87 e0       	ldi	r24, 0x07	; 7
    568c:	8b 15       	cp	r24, r11
    568e:	28 f7       	brcc	.-54     	; 0x565a <program_toRegister+0x40>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    5690:	f7 01       	movw	r30, r14
    5692:	ee 0f       	add	r30, r30
    5694:	ff 1f       	adc	r31, r31
    5696:	ee 0c       	add	r14, r14
    5698:	ff 1c       	adc	r15, r15
    569a:	ee 0c       	add	r14, r14
    569c:	ff 1c       	adc	r15, r15
    569e:	ee 0c       	add	r14, r14
    56a0:	ff 1c       	adc	r15, r15
    56a2:	ee 0d       	add	r30, r14
    56a4:	ff 1d       	adc	r31, r15
    56a6:	e3 5f       	subi	r30, 0xF3	; 243
    56a8:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    56aa:	80 85       	ldd	r24, Z+8	; 0x08
    56ac:	91 85       	ldd	r25, Z+9	; 0x09
    56ae:	f1 dd       	rcall	.-1054   	; 0x5292 <setAllCouplers>
    56b0:	01 c0       	rjmp	.+2      	; 0x56b4 <program_toRegister+0x9a>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    56b2:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    56b4:	80 2f       	mov	r24, r16
    56b6:	df 91       	pop	r29
    56b8:	cf 91       	pop	r28
    56ba:	1f 91       	pop	r17
    56bc:	0f 91       	pop	r16
    56be:	ff 90       	pop	r15
    56c0:	ef 90       	pop	r14
    56c2:	df 90       	pop	r13
    56c4:	cf 90       	pop	r12
    56c6:	bf 90       	pop	r11
    56c8:	08 95       	ret

000056ca <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	c8 2f       	mov	r28, r24
    56d0:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    56d2:	80 91 db 08 	lds	r24, 0x08DB	; 0x8008db <midi_Setting+0x2>
    56d6:	81 11       	cpse	r24, r1
    56d8:	14 c0       	rjmp	.+40     	; 0x5702 <midi_ProgramChange+0x38>
    56da:	1f c0       	rjmp	.+62     	; 0x571a <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    56dc:	ec 2f       	mov	r30, r28
    56de:	f0 e0       	ldi	r31, 0x00	; 0
    56e0:	ee 0f       	add	r30, r30
    56e2:	ff 1f       	adc	r31, r31
    56e4:	ee 0f       	add	r30, r30
    56e6:	ff 1f       	adc	r31, r31
    56e8:	e8 0f       	add	r30, r24
    56ea:	f1 1d       	adc	r31, r1
    56ec:	ee 0f       	add	r30, r30
    56ee:	ff 1f       	adc	r31, r31
    56f0:	ee 0f       	add	r30, r30
    56f2:	ff 1f       	adc	r31, r31
    56f4:	eb 52       	subi	r30, 0x2B	; 43
    56f6:	f8 4f       	sbci	r31, 0xF8	; 248
    56f8:	90 81       	ld	r25, Z
    56fa:	9f 3f       	cpi	r25, 0xFF	; 255
    56fc:	39 f4       	brne	.+14     	; 0x570c <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    56fe:	8f 5f       	subi	r24, 0xFF	; 255
    5700:	01 c0       	rjmp	.+2      	; 0x5704 <midi_ProgramChange+0x3a>
    5702:	80 e0       	ldi	r24, 0x00	; 0
    5704:	84 30       	cpi	r24, 0x04	; 4
    5706:	50 f3       	brcs	.-44     	; 0x56dc <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	01 c0       	rjmp	.+2      	; 0x570e <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    570c:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    570e:	8f 3f       	cpi	r24, 0xFF	; 255
    5710:	21 f4       	brne	.+8      	; 0x571a <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    5712:	8d 2f       	mov	r24, r29
    5714:	82 df       	rcall	.-252    	; 0x561a <program_toRegister>
			midiLastProgram = program;
    5716:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    571a:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <midiThrough>
    571e:	c8 13       	cpse	r28, r24
    5720:	08 c0       	rjmp	.+16     	; 0x5732 <midi_ProgramChange+0x68>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    5722:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <midiThrough+0x1>
    5726:	8f 3f       	cpi	r24, 0xFF	; 255
    5728:	21 f0       	breq	.+8      	; 0x5732 <midi_ProgramChange+0x68>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    572a:	80 6c       	ori	r24, 0xC0	; 192
    572c:	d5 d4       	rcall	.+2474   	; 0x60d8 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    572e:	8d 2f       	mov	r24, r29
    5730:	d3 d4       	rcall	.+2470   	; 0x60d8 <serial1MIDISend>
    5732:	df 91       	pop	r29
		}
	}
}
    5734:	cf 91       	pop	r28
    5736:	08 95       	ret

00005738 <midi_resetRegisters>:
    5738:	cf 93       	push	r28


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    573a:	c0 e0       	ldi	r28, 0x00	; 0
    573c:	04 c0       	rjmp	.+8      	; 0x5746 <midi_resetRegisters+0xe>
		register_onOff(i,REGISTER_OFF);
    573e:	60 e0       	ldi	r22, 0x00	; 0
    5740:	8c 2f       	mov	r24, r28
    5742:	2d df       	rcall	.-422    	; 0x559e <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5744:	cf 5f       	subi	r28, 0xFF	; 255
    5746:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <registerCount>
    574a:	c8 17       	cp	r28, r24
    574c:	c0 f3       	brcs	.-16     	; 0x573e <midi_resetRegisters+0x6>
		register_onOff(i,REGISTER_OFF);
	}
}
    574e:	cf 91       	pop	r28
    5750:	08 95       	ret

00005752 <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5752:	0f 93       	push	r16
    5754:	1f 93       	push	r17
    5756:	cf 93       	push	r28
    5758:	df 93       	push	r29
    575a:	c8 2f       	mov	r28, r24
    575c:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    575e:	80 34       	cpi	r24, 0x40	; 64
    5760:	90 f4       	brcc	.+36     	; 0x5786 <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5762:	28 2f       	mov	r18, r24
    5764:	30 e0       	ldi	r19, 0x00	; 0
    5766:	c9 01       	movw	r24, r18
    5768:	88 0f       	add	r24, r24
    576a:	99 1f       	adc	r25, r25
    576c:	22 0f       	add	r18, r18
    576e:	33 1f       	adc	r19, r19
    5770:	22 0f       	add	r18, r18
    5772:	33 1f       	adc	r19, r19
    5774:	22 0f       	add	r18, r18
    5776:	33 1f       	adc	r19, r19
    5778:	82 0f       	add	r24, r18
    577a:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    577c:	83 5f       	subi	r24, 0xF3	; 243
    577e:	96 4f       	sbci	r25, 0xF6	; 246
    5780:	e2 de       	rcall	.-572    	; 0x5546 <read_allRegister>
    5782:	18 2f       	mov	r17, r24
    5784:	01 c0       	rjmp	.+2      	; 0x5788 <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5786:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5788:	d0 e0       	ldi	r29, 0x00	; 0
    578a:	6b dd       	rcall	.-1322   	; 0x5262 <getAllCouplers>
    578c:	9e 01       	movw	r18, r28
    578e:	22 0f       	add	r18, r18
    5790:	33 1f       	adc	r19, r19
    5792:	cc 0f       	add	r28, r28
    5794:	dd 1f       	adc	r29, r29
    5796:	cc 0f       	add	r28, r28
    5798:	dd 1f       	adc	r29, r29
    579a:	cc 0f       	add	r28, r28
    579c:	dd 1f       	adc	r29, r29
    579e:	c2 0f       	add	r28, r18
    57a0:	d3 1f       	adc	r29, r19
    57a2:	c3 5f       	subi	r28, 0xF3	; 243
    57a4:	d6 4f       	sbci	r29, 0xF6	; 246
    57a6:	99 87       	std	Y+9, r25	; 0x09
    57a8:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    57aa:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    57ac:	0e 94 1a 0c 	call	0x1834	; 0x1834 <eeprom_UpdateProg>
	}
	return result;
}
    57b0:	81 2f       	mov	r24, r17
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	1f 91       	pop	r17
    57b8:	0f 91       	pop	r16
    57ba:	08 95       	ret

000057bc <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    57bc:	ff 92       	push	r15
    57be:	0f 93       	push	r16
    57c0:	1f 93       	push	r17
    57c2:	cf 93       	push	r28
    57c4:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	8c 01       	movw	r16, r24
    57ca:	00 0f       	add	r16, r16
    57cc:	11 1f       	adc	r17, r17
    57ce:	88 0f       	add	r24, r24
    57d0:	99 1f       	adc	r25, r25
    57d2:	88 0f       	add	r24, r24
    57d4:	99 1f       	adc	r25, r25
    57d6:	88 0f       	add	r24, r24
    57d8:	99 1f       	adc	r25, r25
    57da:	08 0f       	add	r16, r24
    57dc:	19 1f       	adc	r17, r25
    57de:	03 5f       	subi	r16, 0xF3	; 243
    57e0:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    57e2:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    57e4:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    57e6:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    57e8:	15 c0       	rjmp	.+42     	; 0x5814 <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    57ea:	9c 2f       	mov	r25, r28
    57ec:	97 70       	andi	r25, 0x07	; 7
    57ee:	21 f4       	brne	.+8      	; 0x57f8 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    57f0:	f8 01       	movw	r30, r16
    57f2:	d0 81       	ld	r29, Z
    57f4:	0f 5f       	subi	r16, 0xFF	; 255
    57f6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    57f8:	8c 2f       	mov	r24, r28
    57fa:	5c de       	rcall	.-840    	; 0x54b4 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    57fc:	d0 ff       	sbrs	r29, 0
    57fe:	03 c0       	rjmp	.+6      	; 0x5806 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5800:	82 30       	cpi	r24, 0x02	; 2
    5802:	31 f0       	breq	.+12     	; 0x5810 <midi_RegisterMatchProgram+0x54>
    5804:	0d c0       	rjmp	.+26     	; 0x5820 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5806:	82 30       	cpi	r24, 0x02	; 2
    5808:	69 f0       	breq	.+26     	; 0x5824 <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    580a:	81 30       	cpi	r24, 0x01	; 1
    580c:	09 f4       	brne	.+2      	; 0x5810 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    580e:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5810:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5812:	cf 5f       	subi	r28, 0xFF	; 255
    5814:	90 91 bd 07 	lds	r25, 0x07BD	; 0x8007bd <registerCount>
    5818:	c9 17       	cp	r28, r25
    581a:	38 f3       	brcs	.-50     	; 0x57ea <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    581c:	8f 2d       	mov	r24, r15
    581e:	03 c0       	rjmp	.+6      	; 0x5826 <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5820:	8f ef       	ldi	r24, 0xFF	; 255
    5822:	01 c0       	rjmp	.+2      	; 0x5826 <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5824:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5826:	df 91       	pop	r29
    5828:	cf 91       	pop	r28
    582a:	1f 91       	pop	r17
    582c:	0f 91       	pop	r16
    582e:	ff 90       	pop	r15
    5830:	08 95       	ret

00005832 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5832:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    5834:	e5 ed       	ldi	r30, 0xD5	; 213
    5836:	f7 e0       	ldi	r31, 0x07	; 7
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5838:	07 c0       	rjmp	.+14     	; 0x5848 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    583a:	8f ef       	ldi	r24, 0xFF	; 255
    583c:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    583e:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    5840:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    5842:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    5844:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5846:	91 50       	subi	r25, 0x01	; 1
    5848:	91 11       	cpse	r25, r1
    584a:	f7 cf       	rjmp	.-18     	; 0x583a <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    584c:	0e 94 b5 09 	call	0x136a	; 0x136a <eeprom_ReadMidiInMap>
    5850:	8f 3f       	cpi	r24, 0xFF	; 255
    5852:	01 f5       	brne	.+64     	; 0x5894 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5854:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    5858:	e5 ed       	ldi	r30, 0xD5	; 213
    585a:	f7 e0       	ldi	r31, 0x07	; 7
    585c:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    585e:	84 e2       	ldi	r24, 0x24	; 36
    5860:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    5862:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5864:	98 e3       	ldi	r25, 0x38	; 56
    5866:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    5868:	21 e0       	ldi	r18, 0x01	; 1
    586a:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    586c:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    586e:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5870:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    5872:	22 e0       	ldi	r18, 0x02	; 2
    5874:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    5876:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    5878:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    587a:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    587c:	93 e0       	ldi	r25, 0x03	; 3
    587e:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    5880:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    5882:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    5884:	8e e1       	ldi	r24, 0x1E	; 30
    5886:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5888:	40 e0       	ldi	r20, 0x00	; 0
    588a:	50 e0       	ldi	r21, 0x00	; 0
    588c:	61 e0       	ldi	r22, 0x01	; 1
    588e:	81 e0       	ldi	r24, 0x01	; 1
    5890:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    5894:	0e 94 39 0a 	call	0x1472	; 0x1472 <eeprom_ReadMidiThrough>
    5898:	8f 3f       	cpi	r24, 0xFF	; 255
    589a:	51 f4       	brne	.+20     	; 0x58b0 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    589c:	e3 ed       	ldi	r30, 0xD3	; 211
    589e:	f7 e0       	ldi	r31, 0x07	; 7
    58a0:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    58a2:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    58a4:	40 e0       	ldi	r20, 0x00	; 0
    58a6:	50 e0       	ldi	r21, 0x00	; 0
    58a8:	61 e0       	ldi	r22, 0x01	; 1
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <log_putError>
    58b0:	08 95       	ret

000058b2 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    58b2:	20 e0       	ldi	r18, 0x00	; 0
    58b4:	06 c0       	rjmp	.+12     	; 0x58c2 <init_Manual2Midi+0x10>
		midiOutMap[i].channel = MIDI_CHANNEL_NONE;
    58b6:	fc 01       	movw	r30, r24
    58b8:	eb 52       	subi	r30, 0x2B	; 43
    58ba:	f7 4f       	sbci	r31, 0xF7	; 247
    58bc:	3f ef       	ldi	r19, 0xFF	; 255
    58be:	30 83       	st	Z, r19
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    58c0:	2f 5f       	subi	r18, 0xFF	; 255
    58c2:	82 2f       	mov	r24, r18
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	00 97       	sbiw	r24, 0x00	; 0
    58c8:	b1 f7       	brne	.-20     	; 0x58b6 <init_Manual2Midi+0x4>
		midiOutMap[i].channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    58ca:	0e 94 dd 09 	call	0x13ba	; 0x13ba <eeprom_ReadMidiOutMap>
    58ce:	8f 3f       	cpi	r24, 0xFF	; 255
    58d0:	b1 f4       	brne	.+44     	; 0x58fe <init_Manual2Midi+0x4c>
		midiEEPromLoadError = EE_LOAD_ERROR;
    58d2:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].channel = MIDI_CHANNEL_1;
    58d6:	e5 ed       	ldi	r30, 0xD5	; 213
    58d8:	f8 e0       	ldi	r31, 0x08	; 8
    58da:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].channel = MIDI_CHANNEL_2;
    58dc:	91 e0       	ldi	r25, 0x01	; 1
    58de:	91 83       	std	Z+1, r25	; 0x01
		midiOutMap[MANUAL_I].channel = MIDI_CHANNEL_3;
    58e0:	92 e0       	ldi	r25, 0x02	; 2
    58e2:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_P].channel = MIDI_CHANNEL_4;
    58e4:	93 e0       	ldi	r25, 0x03	; 3
    58e6:	93 83       	std	Z+3, r25	; 0x03
		midi_Setting.TxActivceSense = FALSE;
    58e8:	e9 ed       	ldi	r30, 0xD9	; 217
    58ea:	f8 e0       	ldi	r31, 0x08	; 8
    58ec:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    58ee:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    58f0:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    58f2:	40 e0       	ldi	r20, 0x00	; 0
    58f4:	50 e0       	ldi	r21, 0x00	; 0
    58f6:	62 e0       	ldi	r22, 0x02	; 2
    58f8:	81 e0       	ldi	r24, 0x01	; 1
    58fa:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <log_putError>
    58fe:	08 95       	ret

00005900 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    5900:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    5902:	8f ef       	ldi	r24, 0xFF	; 255
    5904:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    5906:	e4 30       	cpi	r30, 0x04	; 4
    5908:	40 f4       	brcc	.+16     	; 0x591a <Manual_to_MidiNote+0x1a>
		if (midiOutMap[manual].channel != MIDI_CHANNEL_NONE) {
    590a:	f0 e0       	ldi	r31, 0x00	; 0
    590c:	eb 52       	subi	r30, 0x2B	; 43
    590e:	f7 4f       	sbci	r31, 0xF7	; 247
    5910:	20 81       	ld	r18, Z
    5912:	2f 3f       	cpi	r18, 0xFF	; 255
    5914:	11 f0       	breq	.+4      	; 0x591a <Manual_to_MidiNote+0x1a>
			result.channel = midiOutMap[manual].channel;
    5916:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    5918:	96 2f       	mov	r25, r22
		}
	}
	return(result);
}
    591a:	08 95       	ret

0000591c <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    591c:	70 e0       	ldi	r23, 0x00	; 0
    591e:	52 c0       	rjmp	.+164    	; 0x59c4 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    5920:	87 2f       	mov	r24, r23
    5922:	90 e0       	ldi	r25, 0x00	; 0
    5924:	24 2f       	mov	r18, r20
    5926:	30 e0       	ldi	r19, 0x00	; 0
    5928:	f9 01       	movw	r30, r18
    592a:	ee 0f       	add	r30, r30
    592c:	ff 1f       	adc	r31, r31
    592e:	df 01       	movw	r26, r30
    5930:	a2 0f       	add	r26, r18
    5932:	b3 1f       	adc	r27, r19
    5934:	fc 01       	movw	r30, r24
    5936:	ee 0f       	add	r30, r30
    5938:	ff 1f       	adc	r31, r31
    593a:	e8 0f       	add	r30, r24
    593c:	f9 1f       	adc	r31, r25
    593e:	ee 0f       	add	r30, r30
    5940:	ff 1f       	adc	r31, r31
    5942:	ee 0f       	add	r30, r30
    5944:	ff 1f       	adc	r31, r31
    5946:	ea 0f       	add	r30, r26
    5948:	fb 1f       	adc	r31, r27
    594a:	e3 52       	subi	r30, 0x23	; 35
    594c:	f7 4f       	sbci	r31, 0xF7	; 247
    594e:	a0 81       	ld	r26, Z
    5950:	af 3f       	cpi	r26, 0xFF	; 255
    5952:	d9 f0       	breq	.+54     	; 0x598a <Midi_updateManualRange+0x6e>
    5954:	f9 01       	movw	r30, r18
    5956:	ee 0f       	add	r30, r30
    5958:	ff 1f       	adc	r31, r31
    595a:	e2 0f       	add	r30, r18
    595c:	f3 1f       	adc	r31, r19
    595e:	9c 01       	movw	r18, r24
    5960:	22 0f       	add	r18, r18
    5962:	33 1f       	adc	r19, r19
    5964:	28 0f       	add	r18, r24
    5966:	39 1f       	adc	r19, r25
    5968:	22 0f       	add	r18, r18
    596a:	33 1f       	adc	r19, r19
    596c:	22 0f       	add	r18, r18
    596e:	33 1f       	adc	r19, r19
    5970:	e2 0f       	add	r30, r18
    5972:	f3 1f       	adc	r31, r19
    5974:	e3 52       	subi	r30, 0x23	; 35
    5976:	f7 4f       	sbci	r31, 0xF7	; 247
    5978:	21 81       	ldd	r18, Z+1	; 0x01
    597a:	2f 3f       	cpi	r18, 0xFF	; 255
    597c:	31 f0       	breq	.+12     	; 0x598a <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    597e:	a6 17       	cp	r26, r22
    5980:	08 f4       	brcc	.+2      	; 0x5984 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    5982:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    5984:	52 17       	cp	r21, r18
    5986:	08 f4       	brcc	.+2      	; 0x598a <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    5988:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    598a:	55 23       	and	r21, r21
    598c:	11 f0       	breq	.+4      	; 0x5992 <Midi_updateManualRange+0x76>
    598e:	6f 3f       	cpi	r22, 0xFF	; 255
    5990:	49 f4       	brne	.+18     	; 0x59a4 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    5992:	88 0f       	add	r24, r24
    5994:	99 1f       	adc	r25, r25
    5996:	fc 01       	movw	r30, r24
    5998:	e5 53       	subi	r30, 0x35	; 53
    599a:	f8 4f       	sbci	r31, 0xF8	; 248
    599c:	8f ef       	ldi	r24, 0xFF	; 255
    599e:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    59a0:	81 83       	std	Z+1, r24	; 0x01
    59a2:	07 c0       	rjmp	.+14     	; 0x59b2 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    59a4:	88 0f       	add	r24, r24
    59a6:	99 1f       	adc	r25, r25
    59a8:	fc 01       	movw	r30, r24
    59aa:	e5 53       	subi	r30, 0x35	; 53
    59ac:	f8 4f       	sbci	r31, 0xF8	; 248
    59ae:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    59b0:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    59b2:	4f 5f       	subi	r20, 0xFF	; 255
    59b4:	03 c0       	rjmp	.+6      	; 0x59bc <Midi_updateManualRange+0xa0>
    59b6:	40 e0       	ldi	r20, 0x00	; 0
    59b8:	6f ef       	ldi	r22, 0xFF	; 255
    59ba:	50 e0       	ldi	r21, 0x00	; 0
    59bc:	44 30       	cpi	r20, 0x04	; 4
    59be:	08 f4       	brcc	.+2      	; 0x59c2 <Midi_updateManualRange+0xa6>
    59c0:	af cf       	rjmp	.-162    	; 0x5920 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    59c2:	7f 5f       	subi	r23, 0xFF	; 255
    59c4:	74 30       	cpi	r23, 0x04	; 4
    59c6:	b8 f3       	brcs	.-18     	; 0x59b6 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    59c8:	08 95       	ret

000059ca <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    59ca:	63 e0       	ldi	r22, 0x03	; 3
    59cc:	28 c0       	rjmp	.+80     	; 0x5a1e <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    59ce:	86 2f       	mov	r24, r22
    59d0:	06 2e       	mov	r0, r22
    59d2:	00 0c       	add	r0, r0
    59d4:	99 0b       	sbc	r25, r25
    59d6:	42 2f       	mov	r20, r18
    59d8:	02 2e       	mov	r0, r18
    59da:	00 0c       	add	r0, r0
    59dc:	55 0b       	sbc	r21, r21
    59de:	fa 01       	movw	r30, r20
    59e0:	ee 0f       	add	r30, r30
    59e2:	ff 1f       	adc	r31, r31
    59e4:	e4 0f       	add	r30, r20
    59e6:	f5 1f       	adc	r31, r21
    59e8:	ac 01       	movw	r20, r24
    59ea:	44 0f       	add	r20, r20
    59ec:	55 1f       	adc	r21, r21
    59ee:	da 01       	movw	r26, r20
    59f0:	a8 0f       	add	r26, r24
    59f2:	b9 1f       	adc	r27, r25
    59f4:	aa 0f       	add	r26, r26
    59f6:	bb 1f       	adc	r27, r27
    59f8:	aa 0f       	add	r26, r26
    59fa:	bb 1f       	adc	r27, r27
    59fc:	ae 0f       	add	r26, r30
    59fe:	bf 1f       	adc	r27, r31
    5a00:	a3 52       	subi	r26, 0x23	; 35
    5a02:	b7 4f       	sbci	r27, 0xF7	; 247
    5a04:	3f ef       	ldi	r19, 0xFF	; 255
    5a06:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    5a08:	11 96       	adiw	r26, 0x01	; 1
    5a0a:	3c 93       	st	X, r19
    5a0c:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    5a0e:	fd 01       	movw	r30, r26
    5a10:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    5a12:	21 50       	subi	r18, 0x01	; 1
    5a14:	01 c0       	rjmp	.+2      	; 0x5a18 <init_Manual2Module+0x4e>
    5a16:	23 e0       	ldi	r18, 0x03	; 3
    5a18:	22 23       	and	r18, r18
    5a1a:	cc f6       	brge	.-78     	; 0x59ce <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    5a1c:	61 50       	subi	r22, 0x01	; 1
    5a1e:	66 23       	and	r22, r22
    5a20:	d4 f7       	brge	.-12     	; 0x5a16 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    5a22:	0e 94 8d 09 	call	0x131a	; 0x131a <eeprom_ReadManualMap>
    5a26:	8f 3f       	cpi	r24, 0xFF	; 255
    5a28:	41 f4       	brne	.+16     	; 0x5a3a <init_Manual2Module+0x70>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    5a2a:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    5a2e:	40 e0       	ldi	r20, 0x00	; 0
    5a30:	50 e0       	ldi	r21, 0x00	; 0
    5a32:	63 e0       	ldi	r22, 0x03	; 3
    5a34:	81 e0       	ldi	r24, 0x01	; 1
    5a36:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <log_putError>
	}
	Midi_updateManualRange();
    5a3a:	70 cf       	rjmp	.-288    	; 0x591c <Midi_updateManualRange>
    5a3c:	08 95       	ret

00005a3e <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    5a3e:	84 30       	cpi	r24, 0x04	; 4
    5a40:	d8 f4       	brcc	.+54     	; 0x5a78 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	fc 01       	movw	r30, r24
    5a46:	ee 0f       	add	r30, r30
    5a48:	ff 1f       	adc	r31, r31
    5a4a:	e8 0f       	add	r30, r24
    5a4c:	f9 1f       	adc	r31, r25
    5a4e:	ee 0f       	add	r30, r30
    5a50:	ff 1f       	adc	r31, r31
    5a52:	ee 0f       	add	r30, r30
    5a54:	ff 1f       	adc	r31, r31
    5a56:	e3 52       	subi	r30, 0x23	; 35
    5a58:	f7 4f       	sbci	r31, 0xF7	; 247
		uint8_t i = RANGE_COUNT;
    5a5a:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    5a5c:	20 81       	ld	r18, Z
    5a5e:	62 17       	cp	r22, r18
    5a60:	40 f0       	brcs	.+16     	; 0x5a72 <manualNote_to_moduleBit+0x34>
    5a62:	91 81       	ldd	r25, Z+1	; 0x01
    5a64:	96 17       	cp	r25, r22
    5a66:	28 f0       	brcs	.+10     	; 0x5a72 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    5a68:	92 81       	ldd	r25, Z+2	; 0x02
    5a6a:	62 1b       	sub	r22, r18
				return (result);
    5a6c:	80 e0       	ldi	r24, 0x00	; 0
    5a6e:	96 0f       	add	r25, r22
    5a70:	08 95       	ret
			}
			pRange++;
    5a72:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    5a74:	81 50       	subi	r24, 0x01	; 1
    5a76:	91 f7       	brne	.-28     	; 0x5a5c <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    5a78:	8f ef       	ldi	r24, 0xFF	; 255
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
}
    5a7c:	08 95       	ret

00005a7e <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    5a7e:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    5a80:	ed ed       	ldi	r30, 0xDD	; 221
    5a82:	f8 e0       	ldi	r31, 0x08	; 8
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5a84:	44 e0       	ldi	r20, 0x04	; 4
    5a86:	16 c0       	rjmp	.+44     	; 0x5ab4 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    5a88:	52 81       	ldd	r21, Z+2	; 0x02
    5a8a:	85 17       	cp	r24, r21
    5a8c:	88 f0       	brcs	.+34     	; 0x5ab0 <moduleBit_to_manualNote+0x32>
    5a8e:	68 2f       	mov	r22, r24
    5a90:	70 e0       	ldi	r23, 0x00	; 0
    5a92:	21 81       	ldd	r18, Z+1	; 0x01
    5a94:	a0 81       	ld	r26, Z
    5a96:	30 e0       	ldi	r19, 0x00	; 0
    5a98:	2a 1b       	sub	r18, r26
    5a9a:	31 09       	sbc	r19, r1
    5a9c:	25 0f       	add	r18, r21
    5a9e:	31 1d       	adc	r19, r1
    5aa0:	26 17       	cp	r18, r22
    5aa2:	37 07       	cpc	r19, r23
    5aa4:	2c f0       	brlt	.+10     	; 0x5ab0 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    5aa6:	98 2f       	mov	r25, r24
    5aa8:	95 1b       	sub	r25, r21
				return(result);
    5aaa:	8b 2f       	mov	r24, r27
    5aac:	9a 0f       	add	r25, r26
    5aae:	08 95       	ret
			}
			pRange++;
    5ab0:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5ab2:	41 50       	subi	r20, 0x01	; 1
    5ab4:	41 11       	cpse	r20, r1
    5ab6:	e8 cf       	rjmp	.-48     	; 0x5a88 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    5ab8:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    5aba:	b5 30       	cpi	r27, 0x05	; 5
    5abc:	18 f3       	brcs	.-58     	; 0x5a84 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    5abe:	8f ef       	ldi	r24, 0xFF	; 255
    5ac0:	90 e0       	ldi	r25, 0x00	; 0
}
    5ac2:	08 95       	ret

00005ac4 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    5ac4:	cf 93       	push	r28
    5ac6:	c4 2f       	mov	r28, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    5ac8:	ba df       	rcall	.-140    	; 0x5a3e <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
    5aca:	81 11       	cpse	r24, r1
    5acc:	33 c0       	rjmp	.+102    	; 0x5b34 <manual_NoteOnOff+0x70>
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    5ace:	e9 2f       	mov	r30, r25
    5ad0:	ef 71       	andi	r30, 0x1F	; 31
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    5ad2:	92 95       	swap	r25
    5ad4:	96 95       	lsr	r25
    5ad6:	97 70       	andi	r25, 0x07	; 7
		if (onOff == NOTE_OFF) {
    5ad8:	c1 11       	cpse	r28, r1
    5ada:	16 c0       	rjmp	.+44     	; 0x5b08 <manual_NoteOnOff+0x44>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    5adc:	f0 e0       	ldi	r31, 0x00	; 0
    5ade:	21 e0       	ldi	r18, 0x01	; 1
    5ae0:	30 e0       	ldi	r19, 0x00	; 0
    5ae2:	a9 01       	movw	r20, r18
    5ae4:	02 c0       	rjmp	.+4      	; 0x5aea <manual_NoteOnOff+0x26>
    5ae6:	44 0f       	add	r20, r20
    5ae8:	55 1f       	adc	r21, r21
    5aea:	9a 95       	dec	r25
    5aec:	e2 f7       	brpl	.-8      	; 0x5ae6 <manual_NoteOnOff+0x22>
    5aee:	ca 01       	movw	r24, r20
    5af0:	ee 0f       	add	r30, r30
    5af2:	ff 1f       	adc	r31, r31
    5af4:	ee 0f       	add	r30, r30
    5af6:	ff 1f       	adc	r31, r31
    5af8:	ee 0f       	add	r30, r30
    5afa:	ff 1f       	adc	r31, r31
    5afc:	e7 5b       	subi	r30, 0xB7	; 183
    5afe:	fd 4f       	sbci	r31, 0xFD	; 253
    5b00:	91 81       	ldd	r25, Z+1	; 0x01
    5b02:	89 2b       	or	r24, r25
    5b04:	81 83       	std	Z+1, r24	; 0x01
    5b06:	16 c0       	rjmp	.+44     	; 0x5b34 <manual_NoteOnOff+0x70>
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    5b08:	f0 e0       	ldi	r31, 0x00	; 0
    5b0a:	21 e0       	ldi	r18, 0x01	; 1
    5b0c:	30 e0       	ldi	r19, 0x00	; 0
    5b0e:	a9 01       	movw	r20, r18
    5b10:	02 c0       	rjmp	.+4      	; 0x5b16 <manual_NoteOnOff+0x52>
    5b12:	44 0f       	add	r20, r20
    5b14:	55 1f       	adc	r21, r21
    5b16:	9a 95       	dec	r25
    5b18:	e2 f7       	brpl	.-8      	; 0x5b12 <manual_NoteOnOff+0x4e>
    5b1a:	ca 01       	movw	r24, r20
    5b1c:	ee 0f       	add	r30, r30
    5b1e:	ff 1f       	adc	r31, r31
    5b20:	ee 0f       	add	r30, r30
    5b22:	ff 1f       	adc	r31, r31
    5b24:	ee 0f       	add	r30, r30
    5b26:	ff 1f       	adc	r31, r31
    5b28:	e7 5b       	subi	r30, 0xB7	; 183
    5b2a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b2c:	80 95       	com	r24
    5b2e:	91 81       	ldd	r25, Z+1	; 0x01
    5b30:	89 23       	and	r24, r25
    5b32:	81 83       	std	Z+1, r24	; 0x01
		}
	}
}
    5b34:	cf 91       	pop	r28
    5b36:	08 95       	ret

00005b38 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    5b38:	cf 92       	push	r12
    5b3a:	df 92       	push	r13
    5b3c:	ef 92       	push	r14
    5b3e:	ff 92       	push	r15
    5b40:	0f 93       	push	r16
    5b42:	1f 93       	push	r17
    5b44:	cf 93       	push	r28
    5b46:	df 93       	push	r29
    5b48:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    5b4a:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    5b4c:	3c c0       	rjmp	.+120    	; 0x5bc6 <midiAllNotesOff+0x8e>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
    5b4e:	0c 2d       	mov	r16, r12
    5b50:	10 e0       	ldi	r17, 0x00	; 0
    5b52:	cd 2d       	mov	r28, r13
    5b54:	d0 e0       	ldi	r29, 0x00	; 0
    5b56:	f8 01       	movw	r30, r16
    5b58:	ee 0f       	add	r30, r30
    5b5a:	ff 1f       	adc	r31, r31
    5b5c:	ee 0f       	add	r30, r30
    5b5e:	ff 1f       	adc	r31, r31
    5b60:	ec 0f       	add	r30, r28
    5b62:	fd 1f       	adc	r31, r29
    5b64:	ee 0f       	add	r30, r30
    5b66:	ff 1f       	adc	r31, r31
    5b68:	ee 0f       	add	r30, r30
    5b6a:	ff 1f       	adc	r31, r31
    5b6c:	eb 52       	subi	r30, 0x2B	; 43
    5b6e:	f8 4f       	sbci	r31, 0xF8	; 248
    5b70:	80 81       	ld	r24, Z
    5b72:	84 30       	cpi	r24, 0x04	; 4
    5b74:	38 f5       	brcc	.+78     	; 0x5bc4 <midiAllNotesOff+0x8c>
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    5b76:	f8 01       	movw	r30, r16
    5b78:	ee 0f       	add	r30, r30
    5b7a:	ff 1f       	adc	r31, r31
    5b7c:	ee 0f       	add	r30, r30
    5b7e:	ff 1f       	adc	r31, r31
    5b80:	ec 0f       	add	r30, r28
    5b82:	fd 1f       	adc	r31, r29
    5b84:	ee 0f       	add	r30, r30
    5b86:	ff 1f       	adc	r31, r31
    5b88:	ee 0f       	add	r30, r30
    5b8a:	ff 1f       	adc	r31, r31
    5b8c:	eb 52       	subi	r30, 0x2B	; 43
    5b8e:	f8 4f       	sbci	r31, 0xF8	; 248
    5b90:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5b92:	f2 80       	ldd	r15, Z+2	; 0x02
    5b94:	15 c0       	rjmp	.+42     	; 0x5bc0 <midiAllNotesOff+0x88>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    5b96:	ee 24       	eor	r14, r14
    5b98:	e3 94       	inc	r14
    5b9a:	e6 0e       	add	r14, r22
    5b9c:	f8 01       	movw	r30, r16
    5b9e:	ee 0f       	add	r30, r30
    5ba0:	ff 1f       	adc	r31, r31
    5ba2:	ee 0f       	add	r30, r30
    5ba4:	ff 1f       	adc	r31, r31
    5ba6:	ec 0f       	add	r30, r28
    5ba8:	fd 1f       	adc	r31, r29
    5baa:	ee 0f       	add	r30, r30
    5bac:	ff 1f       	adc	r31, r31
    5bae:	ee 0f       	add	r30, r30
    5bb0:	ff 1f       	adc	r31, r31
    5bb2:	eb 52       	subi	r30, 0x2B	; 43
    5bb4:	f8 4f       	sbci	r31, 0xF8	; 248
    5bb6:	40 e0       	ldi	r20, 0x00	; 0
    5bb8:	80 81       	ld	r24, Z
    5bba:	84 df       	rcall	.-248    	; 0x5ac4 <manual_NoteOnOff>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5bbc:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    5bbe:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5bc0:	f1 10       	cpse	r15, r1
    5bc2:	e9 cf       	rjmp	.-46     	; 0x5b96 <midiAllNotesOff+0x5e>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
    5bc4:	d3 94       	inc	r13
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    5bc6:	83 e0       	ldi	r24, 0x03	; 3
    5bc8:	8d 15       	cp	r24, r13
    5bca:	08 f0       	brcs	.+2      	; 0x5bce <midiAllNotesOff+0x96>
    5bcc:	c0 cf       	rjmp	.-128    	; 0x5b4e <midiAllNotesOff+0x16>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
	}
}
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
    5bd2:	1f 91       	pop	r17
    5bd4:	0f 91       	pop	r16
    5bd6:	ff 90       	pop	r15
    5bd8:	ef 90       	pop	r14
    5bda:	df 90       	pop	r13
    5bdc:	cf 90       	pop	r12
    5bde:	08 95       	ret

00005be0 <midi_ManualOff>:

void midi_ManualOff(uint8_t manual){
    5be0:	0f 93       	push	r16
    5be2:	1f 93       	push	r17
    5be4:	cf 93       	push	r28
    5be6:	df 93       	push	r29
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    5be8:	84 30       	cpi	r24, 0x04	; 4
    5bea:	08 f5       	brcc	.+66     	; 0x5c2e <midi_ManualOff+0x4e>
    5bec:	08 2f       	mov	r16, r24
    5bee:	10 e0       	ldi	r17, 0x00	; 0
    5bf0:	f8 01       	movw	r30, r16
    5bf2:	ee 0f       	add	r30, r30
    5bf4:	ff 1f       	adc	r31, r31
    5bf6:	e5 53       	subi	r30, 0x35	; 53
    5bf8:	f8 4f       	sbci	r31, 0xF8	; 248
    5bfa:	c0 81       	ld	r28, Z
    5bfc:	cf 3f       	cpi	r28, 0xFF	; 255
    5bfe:	b9 f0       	breq	.+46     	; 0x5c2e <midi_ManualOff+0x4e>
    5c00:	d8 2f       	mov	r29, r24
    5c02:	f8 01       	movw	r30, r16
    5c04:	ee 0f       	add	r30, r30
    5c06:	ff 1f       	adc	r31, r31
    5c08:	e5 53       	subi	r30, 0x35	; 53
    5c0a:	f8 4f       	sbci	r31, 0xF8	; 248
    5c0c:	81 81       	ldd	r24, Z+1	; 0x01
    5c0e:	8f 3f       	cpi	r24, 0xFF	; 255
    5c10:	31 f4       	brne	.+12     	; 0x5c1e <midi_ManualOff+0x3e>
    5c12:	0d c0       	rjmp	.+26     	; 0x5c2e <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF);
    5c14:	40 e0       	ldi	r20, 0x00	; 0
    5c16:	6c 2f       	mov	r22, r28
    5c18:	8d 2f       	mov	r24, r29
    5c1a:	54 df       	rcall	.-344    	; 0x5ac4 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    5c1c:	cf 5f       	subi	r28, 0xFF	; 255
    5c1e:	f8 01       	movw	r30, r16
    5c20:	ee 0f       	add	r30, r30
    5c22:	ff 1f       	adc	r31, r31
    5c24:	e5 53       	subi	r30, 0x35	; 53
    5c26:	f8 4f       	sbci	r31, 0xF8	; 248
    5c28:	91 81       	ldd	r25, Z+1	; 0x01
    5c2a:	9c 17       	cp	r25, r28
    5c2c:	98 f7       	brcc	.-26     	; 0x5c14 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF);
		}
	}
}
    5c2e:	df 91       	pop	r29
    5c30:	cf 91       	pop	r28
    5c32:	1f 91       	pop	r17
    5c34:	0f 91       	pop	r16
    5c36:	08 95       	ret

00005c38 <midi_AllManualsOff>:

void midi_AllManualsOff(){
    5c38:	cf 93       	push	r28
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    5c3a:	c0 e0       	ldi	r28, 0x00	; 0
    5c3c:	03 c0       	rjmp	.+6      	; 0x5c44 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    5c3e:	8c 2f       	mov	r24, r28
    5c40:	cf df       	rcall	.-98     	; 0x5be0 <midi_ManualOff>
		}
	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    5c42:	cf 5f       	subi	r28, 0xFF	; 255
    5c44:	c4 30       	cpi	r28, 0x04	; 4
    5c46:	d8 f3       	brcs	.-10     	; 0x5c3e <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    5c48:	cf 91       	pop	r28
    5c4a:	08 95       	ret

00005c4c <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    5c4c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    5c50:	88 23       	and	r24, r24
    5c52:	39 f0       	breq	.+14     	; 0x5c62 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    5c54:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    5c58:	81 11       	cpse	r24, r1
    5c5a:	03 c0       	rjmp	.+6      	; 0x5c62 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    5c5c:	ed df       	rcall	.-38     	; 0x5c38 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    5c5e:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    5c62:	08 95       	ret

00005c64 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    5c64:	0f 93       	push	r16
    5c66:	1f 93       	push	r17
    5c68:	cf 93       	push	r28
    5c6a:	df 93       	push	r29
    5c6c:	06 2f       	mov	r16, r22
    5c6e:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    5c70:	d8 2f       	mov	r29, r24
    5c72:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    5c74:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    5c76:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    5c78:	3c c0       	rjmp	.+120    	; 0x5cf2 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    5c7a:	4d 2f       	mov	r20, r29
    5c7c:	50 e0       	ldi	r21, 0x00	; 0
    5c7e:	2c 2f       	mov	r18, r28
    5c80:	30 e0       	ldi	r19, 0x00	; 0
    5c82:	fa 01       	movw	r30, r20
    5c84:	ee 0f       	add	r30, r30
    5c86:	ff 1f       	adc	r31, r31
    5c88:	ee 0f       	add	r30, r30
    5c8a:	ff 1f       	adc	r31, r31
    5c8c:	e2 0f       	add	r30, r18
    5c8e:	f3 1f       	adc	r31, r19
    5c90:	ee 0f       	add	r30, r30
    5c92:	ff 1f       	adc	r31, r31
    5c94:	ee 0f       	add	r30, r30
    5c96:	ff 1f       	adc	r31, r31
    5c98:	eb 52       	subi	r30, 0x2B	; 43
    5c9a:	f8 4f       	sbci	r31, 0xF8	; 248
    5c9c:	80 81       	ld	r24, Z
    5c9e:	84 30       	cpi	r24, 0x04	; 4
    5ca0:	38 f5       	brcc	.+78     	; 0x5cf0 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    5ca2:	df 01       	movw	r26, r30
    5ca4:	61 81       	ldd	r22, Z+1	; 0x01
    5ca6:	70 2f       	mov	r23, r16
    5ca8:	76 1b       	sub	r23, r22
    5caa:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    5cac:	0a f1       	brmi	.+66     	; 0x5cf0 <midiNote_to_Manual+0x8c>
    5cae:	fd 01       	movw	r30, r26
    5cb0:	e2 81       	ldd	r30, Z+2	; 0x02
    5cb2:	f0 e0       	ldi	r31, 0x00	; 0
    5cb4:	a7 2f       	mov	r26, r23
    5cb6:	77 0f       	add	r23, r23
    5cb8:	bb 0b       	sbc	r27, r27
    5cba:	ae 17       	cp	r26, r30
    5cbc:	bf 07       	cpc	r27, r31
    5cbe:	c4 f4       	brge	.+48     	; 0x5cf0 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    5cc0:	fa 01       	movw	r30, r20
    5cc2:	ee 0f       	add	r30, r30
    5cc4:	ff 1f       	adc	r31, r31
    5cc6:	ee 0f       	add	r30, r30
    5cc8:	ff 1f       	adc	r31, r31
    5cca:	e2 0f       	add	r30, r18
    5ccc:	f3 1f       	adc	r31, r19
    5cce:	ee 0f       	add	r30, r30
    5cd0:	ff 1f       	adc	r31, r31
    5cd2:	ee 0f       	add	r30, r30
    5cd4:	ff 1f       	adc	r31, r31
    5cd6:	eb 52       	subi	r30, 0x2B	; 43
    5cd8:	f8 4f       	sbci	r31, 0xF8	; 248
    5cda:	93 81       	ldd	r25, Z+3	; 0x03
    5cdc:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    5cde:	11 30       	cpi	r17, 0x01	; 1
    5ce0:	21 f4       	brne	.+8      	; 0x5cea <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    5ce2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    5ce6:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    5cea:	41 2f       	mov	r20, r17
    5cec:	eb de       	rcall	.-554    	; 0x5ac4 <manual_NoteOnOff>
				found |= 0xFF;
    5cee:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    5cf0:	cf 5f       	subi	r28, 0xFF	; 255
    5cf2:	c4 30       	cpi	r28, 0x04	; 4
    5cf4:	08 f4       	brcc	.+2      	; 0x5cf8 <midiNote_to_Manual+0x94>
    5cf6:	c1 cf       	rjmp	.-126    	; 0x5c7a <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    5cf8:	11 30       	cpi	r17, 0x01	; 1
    5cfa:	49 f4       	brne	.+18     	; 0x5d0e <midiNote_to_Manual+0xaa>
    5cfc:	91 11       	cpse	r25, r1
    5cfe:	07 c0       	rjmp	.+14     	; 0x5d0e <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    5d00:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    5d04:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    5d08:	8f ef       	ldi	r24, 0xFF	; 255
    5d0a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    5d0e:	80 91 d3 07 	lds	r24, 0x07D3	; 0x8007d3 <midiThrough>
    5d12:	d8 13       	cpse	r29, r24
    5d14:	1f c0       	rjmp	.+62     	; 0x5d54 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    5d16:	80 91 d4 07 	lds	r24, 0x07D4	; 0x8007d4 <midiThrough+0x1>
    5d1a:	8f 3f       	cpi	r24, 0xFF	; 255
    5d1c:	d9 f0       	breq	.+54     	; 0x5d54 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    5d1e:	11 30       	cpi	r17, 0x01	; 1
    5d20:	31 f0       	breq	.+12     	; 0x5d2e <midiNote_to_Manual+0xca>
    5d22:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <midi_Setting+0x1>
    5d26:	99 23       	and	r25, r25
    5d28:	21 f0       	breq	.+8      	; 0x5d32 <midiNote_to_Manual+0xce>
    5d2a:	90 e9       	ldi	r25, 0x90	; 144
    5d2c:	03 c0       	rjmp	.+6      	; 0x5d34 <midiNote_to_Manual+0xd0>
    5d2e:	90 e9       	ldi	r25, 0x90	; 144
    5d30:	01 c0       	rjmp	.+2      	; 0x5d34 <midiNote_to_Manual+0xd0>
    5d32:	90 e8       	ldi	r25, 0x80	; 128
    5d34:	89 2b       	or	r24, r25
    5d36:	d0 d1       	rcall	.+928    	; 0x60d8 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    5d38:	80 2f       	mov	r24, r16
    5d3a:	ce d1       	rcall	.+924    	; 0x60d8 <serial1MIDISend>
    5d3c:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    5d3e:	06 c0       	rjmp	.+12     	; 0x5d4c <midiNote_to_Manual+0xe8>
    5d40:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <midi_Setting+0x1>
    5d44:	81 11       	cpse	r24, r1
    5d46:	04 c0       	rjmp	.+8      	; 0x5d50 <midiNote_to_Manual+0xec>
    5d48:	80 e4       	ldi	r24, 0x40	; 64
    5d4a:	03 c0       	rjmp	.+6      	; 0x5d52 <midiNote_to_Manual+0xee>
    5d4c:	80 e4       	ldi	r24, 0x40	; 64
    5d4e:	01 c0       	rjmp	.+2      	; 0x5d52 <midiNote_to_Manual+0xee>
    5d50:	80 e0       	ldi	r24, 0x00	; 0
    5d52:	c2 d1       	rcall	.+900    	; 0x60d8 <serial1MIDISend>
    5d54:	df 91       	pop	r29
		}
	}
}
    5d56:	cf 91       	pop	r28
    5d58:	1f 91       	pop	r17
    5d5a:	0f 91       	pop	r16
    5d5c:	08 95       	ret

00005d5e <midiIn_Process>:
    5d5e:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    5d60:	0c f0       	brlt	.+2      	; 0x5d64 <midiIn_Process+0x6>
    5d62:	4f c0       	rjmp	.+158    	; 0x5e02 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    5d64:	88 3f       	cpi	r24, 0xF8	; 248
    5d66:	b8 f0       	brcs	.+46     	; 0x5d96 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    5d68:	8e 3f       	cpi	r24, 0xFE	; 254
    5d6a:	81 f4       	brne	.+32     	; 0x5d8c <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    5d72:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5d74:	f8 94       	cli
    5d76:	06 c0       	rjmp	.+12     	; 0x5d84 <midiIn_Process+0x26>
    5d78:	ef e2       	ldi	r30, 0x2F	; 47
    5d7a:	f2 e0       	ldi	r31, 0x02	; 2
    5d7c:	89 e1       	ldi	r24, 0x19	; 25
    5d7e:	86 83       	std	Z+6, r24	; 0x06
    5d80:	17 82       	std	Z+7, r1	; 0x07
    5d82:	80 e0       	ldi	r24, 0x00	; 0
    5d84:	81 11       	cpse	r24, r1
    5d86:	f8 cf       	rjmp	.-16     	; 0x5d78 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5d88:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    5d8a:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    5d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    5d8e:	09 f0       	breq	.+2      	; 0x5d92 <midiIn_Process+0x34>
    5d90:	79 c0       	rjmp	.+242    	; 0x5e84 <midiIn_Process+0x126>
				midiAllReset();
    5d92:	98 ca       	rjmp	.-2768   	; 0x52c4 <midiAllReset>
    5d94:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    5d96:	80 93 95 0b 	sts	0x0B95, r24	; 0x800b95 <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    5d9a:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    5d9e:	90 e8       	ldi	r25, 0x80	; 128
    5da0:	98 0f       	add	r25, r24
    5da2:	90 34       	cpi	r25, 0x40	; 64
    5da4:	20 f4       	brcc	.+8      	; 0x5dae <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    5da6:	82 e0       	ldi	r24, 0x02	; 2
    5da8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    5dac:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    5dae:	90 e2       	ldi	r25, 0x20	; 32
    5db0:	98 0f       	add	r25, r24
    5db2:	90 31       	cpi	r25, 0x10	; 16
    5db4:	20 f4       	brcc	.+8      	; 0x5dbe <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    5db6:	82 e0       	ldi	r24, 0x02	; 2
    5db8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    5dbc:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    5dbe:	82 3f       	cpi	r24, 0xF2	; 242
    5dc0:	21 f4       	brne	.+8      	; 0x5dca <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    5dc2:	82 e0       	ldi	r24, 0x02	; 2
    5dc4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    5dc8:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    5dca:	80 3f       	cpi	r24, 0xF0	; 240
    5dcc:	21 f4       	brne	.+8      	; 0x5dd6 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    5dce:	8f ef       	ldi	r24, 0xFF	; 255
    5dd0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    5dd4:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    5dd6:	90 e4       	ldi	r25, 0x40	; 64
    5dd8:	98 0f       	add	r25, r24
    5dda:	90 32       	cpi	r25, 0x20	; 32
    5ddc:	20 f4       	brcc	.+8      	; 0x5de6 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    5dde:	81 e0       	ldi	r24, 0x01	; 1
    5de0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    5de4:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    5de6:	81 3f       	cpi	r24, 0xF1	; 241
    5de8:	11 f0       	breq	.+4      	; 0x5dee <midiIn_Process+0x90>
    5dea:	83 3f       	cpi	r24, 0xF3	; 243
    5dec:	21 f4       	brne	.+8      	; 0x5df6 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    5dee:	81 e0       	ldi	r24, 0x01	; 1
    5df0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    5df4:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    5df6:	87 3f       	cpi	r24, 0xF7	; 247
    5df8:	09 f4       	brne	.+2      	; 0x5dfc <midiIn_Process+0x9e>
    5dfa:	44 c0       	rjmp	.+136    	; 0x5e84 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    5dfc:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    5e00:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    5e02:	e0 91 ca 07 	lds	r30, 0x07CA	; 0x8007ca <midiDataByteCount>
    5e06:	e8 30       	cpi	r30, 0x08	; 8
    5e08:	40 f4       	brcc	.+16     	; 0x5e1a <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    5e0a:	91 e0       	ldi	r25, 0x01	; 1
    5e0c:	9e 0f       	add	r25, r30
    5e0e:	90 93 ca 07 	sts	0x07CA, r25	; 0x8007ca <midiDataByteCount>
    5e12:	f0 e0       	ldi	r31, 0x00	; 0
    5e14:	e3 57       	subi	r30, 0x73	; 115
    5e16:	f4 4f       	sbci	r31, 0xF4	; 244
    5e18:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    5e1a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    5e1e:	8f 3f       	cpi	r24, 0xFF	; 255
    5e20:	89 f1       	breq	.+98     	; 0x5e84 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    5e22:	90 91 ca 07 	lds	r25, 0x07CA	; 0x8007ca <midiDataByteCount>
    5e26:	98 17       	cp	r25, r24
    5e28:	68 f1       	brcs	.+90     	; 0x5e84 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    5e2a:	90 91 95 0b 	lds	r25, 0x0B95	; 0x800b95 <midiLastCommand>
    5e2e:	90 3f       	cpi	r25, 0xF0	; 240
    5e30:	38 f5       	brcc	.+78     	; 0x5e80 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    5e32:	89 2f       	mov	r24, r25
    5e34:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    5e36:	90 7f       	andi	r25, 0xF0	; 240
    5e38:	90 39       	cpi	r25, 0x90	; 144
    5e3a:	71 f0       	breq	.+28     	; 0x5e58 <midiIn_Process+0xfa>
    5e3c:	18 f4       	brcc	.+6      	; 0x5e44 <midiIn_Process+0xe6>
    5e3e:	90 38       	cpi	r25, 0x80	; 128
    5e40:	31 f0       	breq	.+12     	; 0x5e4e <midiIn_Process+0xf0>
    5e42:	1e c0       	rjmp	.+60     	; 0x5e80 <midiIn_Process+0x122>
    5e44:	90 3b       	cpi	r25, 0xB0	; 176
    5e46:	99 f0       	breq	.+38     	; 0x5e6e <midiIn_Process+0x110>
    5e48:	90 3c       	cpi	r25, 0xC0	; 192
    5e4a:	b9 f0       	breq	.+46     	; 0x5e7a <midiIn_Process+0x11c>
    5e4c:	19 c0       	rjmp	.+50     	; 0x5e80 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    5e4e:	40 e0       	ldi	r20, 0x00	; 0
    5e50:	60 91 8d 0b 	lds	r22, 0x0B8D	; 0x800b8d <midiDataByte>
    5e54:	07 df       	rcall	.-498    	; 0x5c64 <midiNote_to_Manual>
						break;
    5e56:	14 c0       	rjmp	.+40     	; 0x5e80 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    5e58:	90 91 8e 0b 	lds	r25, 0x0B8E	; 0x800b8e <midiDataByte+0x1>
    5e5c:	91 11       	cpse	r25, r1
    5e5e:	02 c0       	rjmp	.+4      	; 0x5e64 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    5e60:	40 e0       	ldi	r20, 0x00	; 0
    5e62:	01 c0       	rjmp	.+2      	; 0x5e66 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    5e64:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    5e66:	60 91 8d 0b 	lds	r22, 0x0B8D	; 0x800b8d <midiDataByte>
    5e6a:	fc de       	rcall	.-520    	; 0x5c64 <midiNote_to_Manual>
						break;
    5e6c:	09 c0       	rjmp	.+18     	; 0x5e80 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    5e6e:	90 91 8d 0b 	lds	r25, 0x0B8D	; 0x800b8d <midiDataByte>
    5e72:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    5e74:	29 f4       	brne	.+10     	; 0x5e80 <midiIn_Process+0x122>
    5e76:	60 de       	rcall	.-832    	; 0x5b38 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    5e78:	03 c0       	rjmp	.+6      	; 0x5e80 <midiIn_Process+0x122>
    5e7a:	60 91 8d 0b 	lds	r22, 0x0B8D	; 0x800b8d <midiDataByte>
    5e7e:	25 dc       	rcall	.-1974   	; 0x56ca <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    5e80:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <midiDataByteCount>
    5e84:	08 95       	ret

00005e86 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    5e86:	bf 92       	push	r11
    5e88:	cf 92       	push	r12
    5e8a:	df 92       	push	r13
    5e8c:	ef 92       	push	r14
    5e8e:	ff 92       	push	r15
    5e90:	0f 93       	push	r16
    5e92:	1f 93       	push	r17
    5e94:	cf 93       	push	r28
    5e96:	df 93       	push	r29
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    5e98:	09 2f       	mov	r16, r25
    5e9a:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    5e9c:	9f 71       	andi	r25, 0x1F	; 31
    5e9e:	d9 2e       	mov	r13, r25
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
    5ea0:	d8 2f       	mov	r29, r24
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    5ea2:	00 32       	cpi	r16, 0x20	; 32
    5ea4:	09 f4       	brne	.+2      	; 0x5ea8 <midiKeyPress_Process+0x22>
    5ea6:	b5 c0       	rjmp	.+362    	; 0x6012 <midiKeyPress_Process+0x18c>
    5ea8:	00 23       	and	r16, r16
    5eaa:	09 f4       	brne	.+2      	; 0x5eae <midiKeyPress_Process+0x28>
    5eac:	b4 c0       	rjmp	.+360    	; 0x6016 <midiKeyPress_Process+0x190>
    5eae:	b7 c0       	rjmp	.+366    	; 0x601e <midiKeyPress_Process+0x198>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    5eb0:	d0 ff       	sbrs	r29, 0
    5eb2:	ac c0       	rjmp	.+344    	; 0x600c <midiKeyPress_Process+0x186>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    5eb4:	20 e2       	ldi	r18, 0x20	; 32
    5eb6:	c2 9f       	mul	r28, r18
    5eb8:	c0 01       	movw	r24, r0
    5eba:	11 24       	eor	r1, r1
    5ebc:	fd 2c       	mov	r15, r13
    5ebe:	f8 2a       	or	r15, r24
    5ec0:	8f 2d       	mov	r24, r15
    5ec2:	dd dd       	rcall	.-1094   	; 0x5a7e <moduleBit_to_manualNote>
    5ec4:	e8 2e       	mov	r14, r24
    5ec6:	c9 2e       	mov	r12, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    5ec8:	18 2f       	mov	r17, r24
    5eca:	8f 3f       	cpi	r24, 0xFF	; 255
    5ecc:	09 f4       	brne	.+2      	; 0x5ed0 <midiKeyPress_Process+0x4a>
    5ece:	94 c0       	rjmp	.+296    	; 0x5ff8 <midiKeyPress_Process+0x172>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    5ed0:	69 2f       	mov	r22, r25
    5ed2:	16 dd       	rcall	.-1492   	; 0x5900 <Manual_to_MidiNote>
    5ed4:	b9 2e       	mov	r11, r25
					if (chanNote.channel != MIDI_CHANNEL_NONE){
    5ed6:	8f 3f       	cpi	r24, 0xFF	; 255
    5ed8:	09 f1       	breq	.+66     	; 0x5f1c <midiKeyPress_Process+0x96>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.channel);
    5eda:	00 32       	cpi	r16, 0x20	; 32
    5edc:	31 f0       	breq	.+12     	; 0x5eea <midiKeyPress_Process+0x64>
    5ede:	90 91 da 08 	lds	r25, 0x08DA	; 0x8008da <midi_Setting+0x1>
    5ee2:	99 23       	and	r25, r25
    5ee4:	21 f0       	breq	.+8      	; 0x5eee <midiKeyPress_Process+0x68>
    5ee6:	90 e9       	ldi	r25, 0x90	; 144
    5ee8:	03 c0       	rjmp	.+6      	; 0x5ef0 <midiKeyPress_Process+0x6a>
    5eea:	90 e9       	ldi	r25, 0x90	; 144
    5eec:	01 c0       	rjmp	.+2      	; 0x5ef0 <midiKeyPress_Process+0x6a>
    5eee:	90 e8       	ldi	r25, 0x80	; 128
    5ef0:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    5ef2:	f2 d0       	rcall	.+484    	; 0x60d8 <serial1MIDISend>
    5ef4:	8b 2d       	mov	r24, r11
    5ef6:	f0 d0       	rcall	.+480    	; 0x60d8 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    5ef8:	01 11       	cpse	r16, r1
    5efa:	06 c0       	rjmp	.+12     	; 0x5f08 <midiKeyPress_Process+0x82>
    5efc:	80 91 da 08 	lds	r24, 0x08DA	; 0x8008da <midi_Setting+0x1>
    5f00:	81 11       	cpse	r24, r1
    5f02:	04 c0       	rjmp	.+8      	; 0x5f0c <midiKeyPress_Process+0x86>
    5f04:	80 e4       	ldi	r24, 0x40	; 64
    5f06:	03 c0       	rjmp	.+6      	; 0x5f0e <midiKeyPress_Process+0x88>
    5f08:	80 e4       	ldi	r24, 0x40	; 64
    5f0a:	01 c0       	rjmp	.+2      	; 0x5f0e <midiKeyPress_Process+0x88>
    5f0c:	80 e0       	ldi	r24, 0x00	; 0
    5f0e:	e4 d0       	rcall	.+456    	; 0x60d8 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    5f10:	00 32       	cpi	r16, 0x20	; 32
    5f12:	21 f4       	brne	.+8      	; 0x5f1c <midiKeyPress_Process+0x96>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    5f14:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    5f18:	c0 92 05 02 	sts	0x0205, r12	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    5f1c:	41 e0       	ldi	r20, 0x01	; 1
    5f1e:	00 32       	cpi	r16, 0x20	; 32
    5f20:	09 f0       	breq	.+2      	; 0x5f24 <midiKeyPress_Process+0x9e>
    5f22:	40 e0       	ldi	r20, 0x00	; 0
    5f24:	e4 2e       	mov	r14, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    5f26:	11 11       	cpse	r17, r1
    5f28:	19 c0       	rjmp	.+50     	; 0x5f5c <midiKeyPress_Process+0xd6>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    5f2a:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <midi_Couplers>
    5f2e:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    5f30:	19 f4       	brne	.+6      	; 0x5f38 <midiKeyPress_Process+0xb2>
    5f32:	6c 2d       	mov	r22, r12
    5f34:	81 e0       	ldi	r24, 0x01	; 1
    5f36:	c6 dd       	rcall	.-1140   	; 0x5ac4 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    5f38:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <midi_Couplers+0x1>
    5f3c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    5f3e:	21 f4       	brne	.+8      	; 0x5f48 <midiKeyPress_Process+0xc2>
    5f40:	4e 2d       	mov	r20, r14
    5f42:	6c 2d       	mov	r22, r12
    5f44:	82 e0       	ldi	r24, 0x02	; 2
    5f46:	be dd       	rcall	.-1156   	; 0x5ac4 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    5f48:	80 91 c1 07 	lds	r24, 0x07C1	; 0x8007c1 <midi_Couplers+0x3>
    5f4c:	8f 3f       	cpi	r24, 0xFF	; 255
    5f4e:	09 f0       	breq	.+2      	; 0x5f52 <midiKeyPress_Process+0xcc>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    5f50:	53 c0       	rjmp	.+166    	; 0x5ff8 <midiKeyPress_Process+0x172>
    5f52:	4e 2d       	mov	r20, r14
    5f54:	6c 2d       	mov	r22, r12
    5f56:	83 e0       	ldi	r24, 0x03	; 3
    5f58:	b5 dd       	rcall	.-1174   	; 0x5ac4 <manual_NoteOnOff>
    5f5a:	4e c0       	rjmp	.+156    	; 0x5ff8 <midiKeyPress_Process+0x172>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    5f5c:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    5f5e:	c9 f4       	brne	.+50     	; 0x5f92 <midiKeyPress_Process+0x10c>
    5f60:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <midi_Couplers+0x2>
    5f64:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    5f66:	19 f4       	brne	.+6      	; 0x5f6e <midiKeyPress_Process+0xe8>
    5f68:	6c 2d       	mov	r22, r12
    5f6a:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    5f6c:	ab dd       	rcall	.-1194   	; 0x5ac4 <manual_NoteOnOff>
    5f6e:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <midi_Couplers+0x4>
    5f72:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    5f74:	21 f4       	brne	.+8      	; 0x5f7e <midiKeyPress_Process+0xf8>
    5f76:	4e 2d       	mov	r20, r14
    5f78:	6c 2d       	mov	r22, r12
    5f7a:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    5f7c:	a3 dd       	rcall	.-1210   	; 0x5ac4 <manual_NoteOnOff>
    5f7e:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <midi_Couplers+0x6>
    5f82:	8f 3f       	cpi	r24, 0xFF	; 255
    5f84:	09 f0       	breq	.+2      	; 0x5f88 <midiKeyPress_Process+0x102>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    5f86:	38 c0       	rjmp	.+112    	; 0x5ff8 <midiKeyPress_Process+0x172>
    5f88:	4e 2d       	mov	r20, r14
    5f8a:	6c 2d       	mov	r22, r12
    5f8c:	80 e0       	ldi	r24, 0x00	; 0
    5f8e:	9a dd       	rcall	.-1228   	; 0x5ac4 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    5f90:	33 c0       	rjmp	.+102    	; 0x5ff8 <midiKeyPress_Process+0x172>
    5f92:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    5f94:	c1 f4       	brne	.+48     	; 0x5fc6 <midiKeyPress_Process+0x140>
    5f96:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    5f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    5f9c:	19 f4       	brne	.+6      	; 0x5fa4 <midiKeyPress_Process+0x11e>
    5f9e:	6c 2d       	mov	r22, r12
    5fa0:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    5fa2:	90 dd       	rcall	.-1248   	; 0x5ac4 <manual_NoteOnOff>
    5fa4:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    5fa8:	8f 3f       	cpi	r24, 0xFF	; 255
    5faa:	21 f4       	brne	.+8      	; 0x5fb4 <midiKeyPress_Process+0x12e>
    5fac:	4e 2d       	mov	r20, r14
    5fae:	6c 2d       	mov	r22, r12
    5fb0:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    5fb2:	88 dd       	rcall	.-1264   	; 0x5ac4 <manual_NoteOnOff>
    5fb4:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <midi_Couplers+0x8>
    5fb8:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    5fba:	f1 f4       	brne	.+60     	; 0x5ff8 <midiKeyPress_Process+0x172>
    5fbc:	4e 2d       	mov	r20, r14
    5fbe:	6c 2d       	mov	r22, r12
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
    5fc2:	80 dd       	rcall	.-1280   	; 0x5ac4 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    5fc4:	19 c0       	rjmp	.+50     	; 0x5ff8 <midiKeyPress_Process+0x172>
    5fc6:	13 30       	cpi	r17, 0x03	; 3
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    5fc8:	b9 f4       	brne	.+46     	; 0x5ff8 <midiKeyPress_Process+0x172>
    5fca:	80 91 c7 07 	lds	r24, 0x07C7	; 0x8007c7 <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    5fce:	8f 3f       	cpi	r24, 0xFF	; 255
    5fd0:	19 f4       	brne	.+6      	; 0x5fd8 <midiKeyPress_Process+0x152>
    5fd2:	6c 2d       	mov	r22, r12
    5fd4:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    5fd6:	76 dd       	rcall	.-1300   	; 0x5ac4 <manual_NoteOnOff>
    5fd8:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    5fdc:	8f 3f       	cpi	r24, 0xFF	; 255
    5fde:	21 f4       	brne	.+8      	; 0x5fe8 <midiKeyPress_Process+0x162>
    5fe0:	4e 2d       	mov	r20, r14
    5fe2:	6c 2d       	mov	r22, r12
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    5fe4:	81 e0       	ldi	r24, 0x01	; 1
    5fe6:	6e dd       	rcall	.-1316   	; 0x5ac4 <manual_NoteOnOff>
    5fe8:	80 91 c9 07 	lds	r24, 0x07C9	; 0x8007c9 <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    5fec:	8f 3f       	cpi	r24, 0xFF	; 255
    5fee:	21 f4       	brne	.+8      	; 0x5ff8 <midiKeyPress_Process+0x172>
    5ff0:	4e 2d       	mov	r20, r14
    5ff2:	6c 2d       	mov	r22, r12
    5ff4:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    5ff6:	66 dd       	rcall	.-1332   	; 0x5ac4 <manual_NoteOnOff>
    5ff8:	8f 2d       	mov	r24, r15
    5ffa:	fb d9       	rcall	.-3082   	; 0x53f2 <moduleBit_to_registerNr>
    5ffc:	00 32       	cpi	r16, 0x20	; 32
    5ffe:	11 f4       	brne	.+4      	; 0x6004 <midiKeyPress_Process+0x17e>
    6000:	20 e8       	ldi	r18, 0x80	; 128
    6002:	01 c0       	rjmp	.+2      	; 0x6006 <midiKeyPress_Process+0x180>
    6004:	20 e0       	ldi	r18, 0x00	; 0
    6006:	82 2b       	or	r24, r18
    6008:	80 93 dc 08 	sts	0x08DC, r24	; 0x8008dc <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    600c:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    600e:	cf 5f       	subi	r28, 0xFF	; 255
    6010:	03 c0       	rjmp	.+6      	; 0x6018 <midiKeyPress_Process+0x192>
    6012:	c0 e0       	ldi	r28, 0x00	; 0
    6014:	01 c0       	rjmp	.+2      	; 0x6018 <midiKeyPress_Process+0x192>
    6016:	c0 e0       	ldi	r28, 0x00	; 0
    6018:	c8 30       	cpi	r28, 0x08	; 8
    601a:	08 f4       	brcc	.+2      	; 0x601e <midiKeyPress_Process+0x198>
    601c:	49 cf       	rjmp	.-366    	; 0x5eb0 <midiKeyPress_Process+0x2a>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    601e:	df 91       	pop	r29
    6020:	cf 91       	pop	r28
    6022:	1f 91       	pop	r17
    6024:	0f 91       	pop	r16
    6026:	ff 90       	pop	r15
    6028:	ef 90       	pop	r14
    602a:	df 90       	pop	r13
    602c:	cf 90       	pop	r12
    602e:	bf 90       	pop	r11
    6030:	08 95       	ret

00006032 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    6032:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6034:	c0 e0       	ldi	r28, 0x00	; 0
    6036:	0e c0       	rjmp	.+28     	; 0x6054 <midiSendAllNotesOff+0x22>
		uint8_t chan = midiOutMap[i].channel;
    6038:	ec 2f       	mov	r30, r28
    603a:	f0 e0       	ldi	r31, 0x00	; 0
    603c:	eb 52       	subi	r30, 0x2B	; 43
    603e:	f7 4f       	sbci	r31, 0xF7	; 247
    6040:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    6042:	80 31       	cpi	r24, 0x10	; 16
    6044:	30 f4       	brcc	.+12     	; 0x6052 <midiSendAllNotesOff+0x20>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6046:	80 6b       	ori	r24, 0xB0	; 176
    6048:	47 d0       	rcall	.+142    	; 0x60d8 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    604a:	8b e7       	ldi	r24, 0x7B	; 123
    604c:	45 d0       	rcall	.+138    	; 0x60d8 <serial1MIDISend>
			serial1MIDISend(0);
    604e:	80 e0       	ldi	r24, 0x00	; 0
    6050:	43 d0       	rcall	.+134    	; 0x60d8 <serial1MIDISend>
    6052:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6054:	c4 30       	cpi	r28, 0x04	; 4
    6056:	80 f3       	brcs	.-32     	; 0x6038 <midiSendAllNotesOff+0x6>
    6058:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    605a:	08 95       	ret

0000605c <midi_SendActiveSense>:
    605c:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    605e:	3c c0       	rjmp	.+120    	; 0x60d8 <serial1MIDISend>
    6060:	08 95       	ret

00006062 <midi_CheckTxActiveSense>:
		}
	}
}

void midi_CheckTxActiveSense(){
	if (midi_Setting.TxActivceSense) {
    6062:	80 91 d9 08 	lds	r24, 0x08D9	; 0x8008d9 <midi_Setting>
    6066:	88 23       	and	r24, r24
    6068:	b1 f0       	breq	.+44     	; 0x6096 <midi_CheckTxActiveSense+0x34>
		if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    606a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    606e:	88 23       	and	r24, r24
    6070:	21 f0       	breq	.+8      	; 0x607a <midi_CheckTxActiveSense+0x18>
    6072:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6076:	8f 3f       	cpi	r24, 0xFF	; 255
    6078:	71 f4       	brne	.+28     	; 0x6096 <midi_CheckTxActiveSense+0x34>
			// timer ended or not yet running
			TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    607a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    607c:	f8 94       	cli
    607e:	81 e0       	ldi	r24, 0x01	; 1
    6080:	06 c0       	rjmp	.+12     	; 0x608e <midi_CheckTxActiveSense+0x2c>
    6082:	ef e2       	ldi	r30, 0x2F	; 47
    6084:	f2 e0       	ldi	r31, 0x02	; 2
    6086:	8a e0       	ldi	r24, 0x0A	; 10
    6088:	80 8b       	std	Z+16, r24	; 0x10
    608a:	11 8a       	std	Z+17, r1	; 0x11
    608c:	80 e0       	ldi	r24, 0x00	; 0
    608e:	81 11       	cpse	r24, r1
    6090:	f8 cf       	rjmp	.-16     	; 0x6082 <midi_CheckTxActiveSense+0x20>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6092:	9f bf       	out	0x3f, r25	; 63
			midi_SendActiveSense();
    6094:	e3 cf       	rjmp	.-58     	; 0x605c <midi_SendActiveSense>
    6096:	08 95       	ret

00006098 <init_Serial1MIDI>:
	} else {
		result = serUsbRxBuffer[index++];
		serusbRxOutIndex = index & SER_USB_RX_BUFFER_MASK;
	}
	return result;
}
    6098:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    609c:	8f e1       	ldi	r24, 0x1F	; 31
    609e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    60a2:	e9 ec       	ldi	r30, 0xC9	; 201
    60a4:	f0 e0       	ldi	r31, 0x00	; 0
    60a6:	80 81       	ld	r24, Z
    60a8:	88 69       	ori	r24, 0x98	; 152
    60aa:	80 83       	st	Z, r24
    60ac:	ea ec       	ldi	r30, 0xCA	; 202
    60ae:	f0 e0       	ldi	r31, 0x00	; 0
    60b0:	80 81       	ld	r24, Z
    60b2:	86 60       	ori	r24, 0x06	; 6
    60b4:	80 83       	st	Z, r24
    60b6:	10 92 db 0b 	sts	0x0BDB, r1	; 0x800bdb <midiRxInIndex>
    60ba:	10 92 23 0d 	sts	0x0D23, r1	; 0x800d23 <midiRxOutIndex>
    60be:	10 92 96 0b 	sts	0x0B96, r1	; 0x800b96 <midiTxInIndex>
    60c2:	10 92 98 0b 	sts	0x0B98, r1	; 0x800b98 <midiTxOutIndex>
    60c6:	10 92 97 0b 	sts	0x0B97, r1	; 0x800b97 <midiRxOvfl>
    60ca:	10 92 9a 0b 	sts	0x0B9A, r1	; 0x800b9a <midiTxOvfl>
    60ce:	10 92 1f 0c 	sts	0x0C1F, r1	; 0x800c1f <midiRxOvflCount>
    60d2:	10 92 24 0d 	sts	0x0D24, r1	; 0x800d24 <midiTxOvflCount>
    60d6:	08 95       	ret

000060d8 <serial1MIDISend>:
    60d8:	e9 ec       	ldi	r30, 0xC9	; 201
    60da:	f0 e0       	ldi	r31, 0x00	; 0
    60dc:	90 81       	ld	r25, Z
    60de:	9f 7d       	andi	r25, 0xDF	; 223
    60e0:	90 83       	st	Z, r25
    60e2:	e0 91 96 0b 	lds	r30, 0x0B96	; 0x800b96 <midiTxInIndex>
    60e6:	f0 e0       	ldi	r31, 0x00	; 0
    60e8:	e5 54       	subi	r30, 0x45	; 69
    60ea:	f4 4f       	sbci	r31, 0xF4	; 244
    60ec:	80 83       	st	Z, r24
    60ee:	80 91 96 0b 	lds	r24, 0x0B96	; 0x800b96 <midiTxInIndex>
    60f2:	8f 5f       	subi	r24, 0xFF	; 255
    60f4:	8f 71       	andi	r24, 0x1F	; 31
    60f6:	80 93 96 0b 	sts	0x0B96, r24	; 0x800b96 <midiTxInIndex>
    60fa:	90 91 96 0b 	lds	r25, 0x0B96	; 0x800b96 <midiTxInIndex>
    60fe:	80 91 98 0b 	lds	r24, 0x0B98	; 0x800b98 <midiTxOutIndex>
    6102:	98 13       	cpse	r25, r24
    6104:	0d c0       	rjmp	.+26     	; 0x6120 <serial1MIDISend+0x48>
    6106:	80 91 24 0d 	lds	r24, 0x0D24	; 0x800d24 <midiTxOvflCount>
    610a:	88 23       	and	r24, r24
    610c:	31 f0       	breq	.+12     	; 0x611a <serial1MIDISend+0x42>
    610e:	8f 3f       	cpi	r24, 0xFF	; 255
    6110:	39 f0       	breq	.+14     	; 0x6120 <serial1MIDISend+0x48>
    6112:	8f 5f       	subi	r24, 0xFF	; 255
    6114:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <midiTxOvflCount>
    6118:	03 c0       	rjmp	.+6      	; 0x6120 <serial1MIDISend+0x48>
    611a:	81 e0       	ldi	r24, 0x01	; 1
    611c:	80 93 24 0d 	sts	0x0D24, r24	; 0x800d24 <midiTxOvflCount>
    6120:	e9 ec       	ldi	r30, 0xC9	; 201
    6122:	f0 e0       	ldi	r31, 0x00	; 0
    6124:	80 81       	ld	r24, Z
    6126:	80 62       	ori	r24, 0x20	; 32
    6128:	80 83       	st	Z, r24
    612a:	08 95       	ret

0000612c <serial1MIDIReadRx>:
    612c:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <midiRxInIndex>
    6130:	80 91 23 0d 	lds	r24, 0x0D23	; 0x800d23 <midiRxOutIndex>
    6134:	98 17       	cp	r25, r24
    6136:	69 f0       	breq	.+26     	; 0x6152 <serial1MIDIReadRx+0x26>
    6138:	e0 91 23 0d 	lds	r30, 0x0D23	; 0x800d23 <midiRxOutIndex>
    613c:	f0 e0       	ldi	r31, 0x00	; 0
    613e:	e5 56       	subi	r30, 0x65	; 101
    6140:	f4 4f       	sbci	r31, 0xF4	; 244
    6142:	80 81       	ld	r24, Z
    6144:	90 91 23 0d 	lds	r25, 0x0D23	; 0x800d23 <midiRxOutIndex>
    6148:	9f 5f       	subi	r25, 0xFF	; 255
    614a:	9f 71       	andi	r25, 0x1F	; 31
    614c:	90 93 23 0d 	sts	0x0D23, r25	; 0x800d23 <midiRxOutIndex>
    6150:	08 95       	ret
    6152:	8d ef       	ldi	r24, 0xFD	; 253
    6154:	08 95       	ret

00006156 <__vector_36>:
    6156:	1f 92       	push	r1
    6158:	0f 92       	push	r0
    615a:	0f b6       	in	r0, 0x3f	; 63
    615c:	0f 92       	push	r0
    615e:	11 24       	eor	r1, r1
    6160:	0b b6       	in	r0, 0x3b	; 59
    6162:	0f 92       	push	r0
    6164:	8f 93       	push	r24
    6166:	9f 93       	push	r25
    6168:	ef 93       	push	r30
    616a:	ff 93       	push	r31
    616c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6170:	e0 91 db 0b 	lds	r30, 0x0BDB	; 0x800bdb <midiRxInIndex>
    6174:	f0 e0       	ldi	r31, 0x00	; 0
    6176:	e5 56       	subi	r30, 0x65	; 101
    6178:	f4 4f       	sbci	r31, 0xF4	; 244
    617a:	80 83       	st	Z, r24
    617c:	80 91 db 0b 	lds	r24, 0x0BDB	; 0x800bdb <midiRxInIndex>
    6180:	8f 5f       	subi	r24, 0xFF	; 255
    6182:	8f 71       	andi	r24, 0x1F	; 31
    6184:	80 93 db 0b 	sts	0x0BDB, r24	; 0x800bdb <midiRxInIndex>
    6188:	90 91 db 0b 	lds	r25, 0x0BDB	; 0x800bdb <midiRxInIndex>
    618c:	80 91 23 0d 	lds	r24, 0x0D23	; 0x800d23 <midiRxOutIndex>
    6190:	98 13       	cpse	r25, r24
    6192:	0d c0       	rjmp	.+26     	; 0x61ae <__vector_36+0x58>
    6194:	80 91 1f 0c 	lds	r24, 0x0C1F	; 0x800c1f <midiRxOvflCount>
    6198:	88 23       	and	r24, r24
    619a:	31 f0       	breq	.+12     	; 0x61a8 <__vector_36+0x52>
    619c:	8f 3f       	cpi	r24, 0xFF	; 255
    619e:	39 f0       	breq	.+14     	; 0x61ae <__vector_36+0x58>
    61a0:	8f 5f       	subi	r24, 0xFF	; 255
    61a2:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <midiRxOvflCount>
    61a6:	03 c0       	rjmp	.+6      	; 0x61ae <__vector_36+0x58>
    61a8:	81 e0       	ldi	r24, 0x01	; 1
    61aa:	80 93 1f 0c 	sts	0x0C1F, r24	; 0x800c1f <midiRxOvflCount>
    61ae:	80 91 25 0d 	lds	r24, 0x0D25	; 0x800d25 <midiRxBytesCount>
    61b2:	90 91 26 0d 	lds	r25, 0x0D26	; 0x800d26 <midiRxBytesCount+0x1>
    61b6:	01 96       	adiw	r24, 0x01	; 1
    61b8:	90 93 26 0d 	sts	0x0D26, r25	; 0x800d26 <midiRxBytesCount+0x1>
    61bc:	80 93 25 0d 	sts	0x0D25, r24	; 0x800d25 <midiRxBytesCount>
    61c0:	ff 91       	pop	r31
    61c2:	ef 91       	pop	r30
    61c4:	9f 91       	pop	r25
    61c6:	8f 91       	pop	r24
    61c8:	0f 90       	pop	r0
    61ca:	0b be       	out	0x3b, r0	; 59
    61cc:	0f 90       	pop	r0
    61ce:	0f be       	out	0x3f, r0	; 63
    61d0:	0f 90       	pop	r0
    61d2:	1f 90       	pop	r1
    61d4:	18 95       	reti

000061d6 <__vector_37>:
    61d6:	1f 92       	push	r1
    61d8:	0f 92       	push	r0
    61da:	0f b6       	in	r0, 0x3f	; 63
    61dc:	0f 92       	push	r0
    61de:	11 24       	eor	r1, r1
    61e0:	0b b6       	in	r0, 0x3b	; 59
    61e2:	0f 92       	push	r0
    61e4:	8f 93       	push	r24
    61e6:	9f 93       	push	r25
    61e8:	ef 93       	push	r30
    61ea:	ff 93       	push	r31
    61ec:	90 91 98 0b 	lds	r25, 0x0B98	; 0x800b98 <midiTxOutIndex>
    61f0:	80 91 96 0b 	lds	r24, 0x0B96	; 0x800b96 <midiTxInIndex>
    61f4:	98 17       	cp	r25, r24
    61f6:	c1 f0       	breq	.+48     	; 0x6228 <__vector_37+0x52>
    61f8:	e0 91 98 0b 	lds	r30, 0x0B98	; 0x800b98 <midiTxOutIndex>
    61fc:	f0 e0       	ldi	r31, 0x00	; 0
    61fe:	e5 54       	subi	r30, 0x45	; 69
    6200:	f4 4f       	sbci	r31, 0xF4	; 244
    6202:	80 81       	ld	r24, Z
    6204:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6208:	80 91 98 0b 	lds	r24, 0x0B98	; 0x800b98 <midiTxOutIndex>
    620c:	8f 5f       	subi	r24, 0xFF	; 255
    620e:	8f 71       	andi	r24, 0x1F	; 31
    6210:	80 93 98 0b 	sts	0x0B98, r24	; 0x800b98 <midiTxOutIndex>
    6214:	80 91 20 0c 	lds	r24, 0x0C20	; 0x800c20 <midiTxBytesCount>
    6218:	90 91 21 0c 	lds	r25, 0x0C21	; 0x800c21 <midiTxBytesCount+0x1>
    621c:	01 96       	adiw	r24, 0x01	; 1
    621e:	90 93 21 0c 	sts	0x0C21, r25	; 0x800c21 <midiTxBytesCount+0x1>
    6222:	80 93 20 0c 	sts	0x0C20, r24	; 0x800c20 <midiTxBytesCount>
    6226:	05 c0       	rjmp	.+10     	; 0x6232 <__vector_37+0x5c>
    6228:	e9 ec       	ldi	r30, 0xC9	; 201
    622a:	f0 e0       	ldi	r31, 0x00	; 0
    622c:	80 81       	ld	r24, Z
    622e:	8f 7d       	andi	r24, 0xDF	; 223
    6230:	80 83       	st	Z, r24
    6232:	ff 91       	pop	r31
    6234:	ef 91       	pop	r30
    6236:	9f 91       	pop	r25
    6238:	8f 91       	pop	r24
    623a:	0f 90       	pop	r0
    623c:	0b be       	out	0x3b, r0	; 59
    623e:	0f 90       	pop	r0
    6240:	0f be       	out	0x3f, r0	; 63
    6242:	0f 90       	pop	r0
    6244:	1f 90       	pop	r1
    6246:	18 95       	reti

00006248 <serial0SER_USBSend>:
    6248:	90 91 dd 0b 	lds	r25, 0x0BDD	; 0x800bdd <serusbTxInIndex>
    624c:	e1 ec       	ldi	r30, 0xC1	; 193
    624e:	f0 e0       	ldi	r31, 0x00	; 0
    6250:	20 81       	ld	r18, Z
    6252:	2f 7d       	andi	r18, 0xDF	; 223
    6254:	20 83       	st	Z, r18
    6256:	e9 2f       	mov	r30, r25
    6258:	f0 e0       	ldi	r31, 0x00	; 0
    625a:	ee 5d       	subi	r30, 0xDE	; 222
    625c:	f3 4f       	sbci	r31, 0xF3	; 243
    625e:	80 83       	st	Z, r24
    6260:	81 e0       	ldi	r24, 0x01	; 1
    6262:	89 0f       	add	r24, r25
    6264:	90 91 99 0b 	lds	r25, 0x0B99	; 0x800b99 <serusbTxOutIndex>
    6268:	89 13       	cpse	r24, r25
    626a:	0c c0       	rjmp	.+24     	; 0x6284 <serial0SER_USBSend+0x3c>
    626c:	e1 ec       	ldi	r30, 0xC1	; 193
    626e:	f0 e0       	ldi	r31, 0x00	; 0
    6270:	90 81       	ld	r25, Z
    6272:	90 62       	ori	r25, 0x20	; 32
    6274:	90 83       	st	Z, r25
    6276:	90 91 99 0b 	lds	r25, 0x0B99	; 0x800b99 <serusbTxOutIndex>
    627a:	89 17       	cp	r24, r25
    627c:	e1 f3       	breq	.-8      	; 0x6276 <serial0SER_USBSend+0x2e>
    627e:	80 93 dd 0b 	sts	0x0BDD, r24	; 0x800bdd <serusbTxInIndex>
    6282:	08 95       	ret
    6284:	80 93 dd 0b 	sts	0x0BDD, r24	; 0x800bdd <serusbTxInIndex>
    6288:	e1 ec       	ldi	r30, 0xC1	; 193
    628a:	f0 e0       	ldi	r31, 0x00	; 0
    628c:	80 81       	ld	r24, Z
    628e:	80 62       	ori	r24, 0x20	; 32
    6290:	80 83       	st	Z, r24
    6292:	08 95       	ret

00006294 <serial0SER_USB_sendStringP>:
    6294:	cf 93       	push	r28
    6296:	df 93       	push	r29
    6298:	fc 01       	movw	r30, r24
    629a:	02 c0       	rjmp	.+4      	; 0x62a0 <serial0SER_USB_sendStringP+0xc>
    629c:	d5 df       	rcall	.-86     	; 0x6248 <serial0SER_USBSend>
    629e:	fe 01       	movw	r30, r28
    62a0:	ef 01       	movw	r28, r30
    62a2:	21 96       	adiw	r28, 0x01	; 1
    62a4:	84 91       	lpm	r24, Z
    62a6:	88 23       	and	r24, r24
    62a8:	21 f0       	breq	.+8      	; 0x62b2 <serial0SER_USB_sendStringP+0x1e>
    62aa:	90 91 22 0d 	lds	r25, 0x0D22	; 0x800d22 <serusbOvflFlag>
    62ae:	9f 3f       	cpi	r25, 0xFF	; 255
    62b0:	a9 f7       	brne	.-22     	; 0x629c <serial0SER_USB_sendStringP+0x8>
    62b2:	df 91       	pop	r29
    62b4:	cf 91       	pop	r28
    62b6:	08 95       	ret

000062b8 <serial0SER_USB_sendCRLF>:
    62b8:	80 e6       	ldi	r24, 0x60	; 96
    62ba:	91 e1       	ldi	r25, 0x11	; 17
    62bc:	eb cf       	rjmp	.-42     	; 0x6294 <serial0SER_USB_sendStringP>
    62be:	08 95       	ret

000062c0 <init_Serial0SerUSB>:
    62c0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    62c4:	83 e3       	ldi	r24, 0x33	; 51
    62c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    62ca:	e1 ec       	ldi	r30, 0xC1	; 193
    62cc:	f0 e0       	ldi	r31, 0x00	; 0
    62ce:	80 81       	ld	r24, Z
    62d0:	88 69       	ori	r24, 0x98	; 152
    62d2:	80 83       	st	Z, r24
    62d4:	e2 ec       	ldi	r30, 0xC2	; 194
    62d6:	f0 e0       	ldi	r31, 0x00	; 0
    62d8:	80 81       	ld	r24, Z
    62da:	86 60       	ori	r24, 0x06	; 6
    62dc:	80 83       	st	Z, r24
    62de:	10 92 db 0b 	sts	0x0BDB, r1	; 0x800bdb <midiRxInIndex>
    62e2:	10 92 23 0d 	sts	0x0D23, r1	; 0x800d23 <midiRxOutIndex>
    62e6:	10 92 96 0b 	sts	0x0B96, r1	; 0x800b96 <midiTxInIndex>
    62ea:	10 92 98 0b 	sts	0x0B98, r1	; 0x800b98 <midiTxOutIndex>
    62ee:	10 92 22 0d 	sts	0x0D22, r1	; 0x800d22 <serusbOvflFlag>
    62f2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <eeprom_ReadUSB>
    62f6:	8f 3f       	cpi	r24, 0xFF	; 255
    62f8:	41 f4       	brne	.+16     	; 0x630a <init_Serial0SerUSB+0x4a>
    62fa:	10 92 dc 0b 	sts	0x0BDC, r1	; 0x800bdc <serusb_Active>
    62fe:	40 e0       	ldi	r20, 0x00	; 0
    6300:	50 e0       	ldi	r21, 0x00	; 0
    6302:	64 e0       	ldi	r22, 0x04	; 4
    6304:	81 e0       	ldi	r24, 0x01	; 1
    6306:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <log_putError>
    630a:	80 91 dc 0b 	lds	r24, 0x0BDC	; 0x800bdc <serusb_Active>
    630e:	8f 3f       	cpi	r24, 0xFF	; 255
    6310:	41 f4       	brne	.+16     	; 0x6322 <init_Serial0SerUSB+0x62>
    6312:	88 e1       	ldi	r24, 0x18	; 24
    6314:	93 e0       	ldi	r25, 0x03	; 3
    6316:	be df       	rcall	.-132    	; 0x6294 <serial0SER_USB_sendStringP>
    6318:	80 e0       	ldi	r24, 0x00	; 0
    631a:	91 e1       	ldi	r25, 0x11	; 17
    631c:	bb df       	rcall	.-138    	; 0x6294 <serial0SER_USB_sendStringP>
    631e:	cc df       	rcall	.-104    	; 0x62b8 <serial0SER_USB_sendCRLF>
    6320:	cb cf       	rjmp	.-106    	; 0x62b8 <serial0SER_USB_sendCRLF>
    6322:	08 95       	ret

00006324 <serial0SER_USB_sendString>:
    6324:	1f 93       	push	r17
    6326:	cf 93       	push	r28
    6328:	df 93       	push	r29
    632a:	ec 01       	movw	r28, r24
    632c:	10 e5       	ldi	r17, 0x50	; 80
    632e:	03 c0       	rjmp	.+6      	; 0x6336 <serial0SER_USB_sendString+0x12>
    6330:	21 96       	adiw	r28, 0x01	; 1
    6332:	8a df       	rcall	.-236    	; 0x6248 <serial0SER_USBSend>
    6334:	11 50       	subi	r17, 0x01	; 1
    6336:	88 81       	ld	r24, Y
    6338:	88 23       	and	r24, r24
    633a:	31 f0       	breq	.+12     	; 0x6348 <serial0SER_USB_sendString+0x24>
    633c:	90 91 22 0d 	lds	r25, 0x0D22	; 0x800d22 <serusbOvflFlag>
    6340:	9f 3f       	cpi	r25, 0xFF	; 255
    6342:	11 f0       	breq	.+4      	; 0x6348 <serial0SER_USB_sendString+0x24>
    6344:	11 11       	cpse	r17, r1
    6346:	f4 cf       	rjmp	.-24     	; 0x6330 <serial0SER_USB_sendString+0xc>
    6348:	df 91       	pop	r29
    634a:	cf 91       	pop	r28
    634c:	1f 91       	pop	r17
    634e:	08 95       	ret

00006350 <__vector_25>:

ISR(USART0_RX_vect) {
    6350:	1f 92       	push	r1
    6352:	0f 92       	push	r0
    6354:	0f b6       	in	r0, 0x3f	; 63
    6356:	0f 92       	push	r0
    6358:	11 24       	eor	r1, r1
    635a:	0b b6       	in	r0, 0x3b	; 59
    635c:	0f 92       	push	r0
    635e:	8f 93       	push	r24
    6360:	9f 93       	push	r25
    6362:	ef 93       	push	r30
    6364:	ff 93       	push	r31
	uint8_t received_byte;
	uint8_t index = serusbRxInIndex;
    6366:	e0 91 27 0d 	lds	r30, 0x0D27	; 0x800d27 <serusbRxInIndex>
	received_byte = UDR0;
    636a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	serUsbRxBuffer[index++] =  received_byte; // Fetch the received byte value
    636e:	81 e0       	ldi	r24, 0x01	; 1
    6370:	8e 0f       	add	r24, r30
    6372:	f0 e0       	ldi	r31, 0x00	; 0
    6374:	e1 52       	subi	r30, 0x21	; 33
    6376:	f4 4f       	sbci	r31, 0xF4	; 244
    6378:	90 83       	st	Z, r25
	index &= SER_USB_RX_BUFFER_MASK;
    637a:	8f 73       	andi	r24, 0x3F	; 63
	if (index == serusbRxOutIndex) {
    637c:	90 91 de 0b 	lds	r25, 0x0BDE	; 0x800bde <serusbRxOutIndex>
    6380:	89 13       	cpse	r24, r25
    6382:	04 c0       	rjmp	.+8      	; 0x638c <__vector_25+0x3c>
		// overflow!
		serusbOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    6384:	8f ef       	ldi	r24, 0xFF	; 255
    6386:	80 93 22 0d 	sts	0x0D22, r24	; 0x800d22 <serusbOvflFlag>
    638a:	02 c0       	rjmp	.+4      	; 0x6390 <__vector_25+0x40>
	} else {
		serusbRxInIndex = index;
    638c:	80 93 27 0d 	sts	0x0D27, r24	; 0x800d27 <serusbRxInIndex>
	}
}
    6390:	ff 91       	pop	r31
    6392:	ef 91       	pop	r30
    6394:	9f 91       	pop	r25
    6396:	8f 91       	pop	r24
    6398:	0f 90       	pop	r0
    639a:	0b be       	out	0x3b, r0	; 59
    639c:	0f 90       	pop	r0
    639e:	0f be       	out	0x3f, r0	; 63
    63a0:	0f 90       	pop	r0
    63a2:	1f 90       	pop	r1
    63a4:	18 95       	reti

000063a6 <__vector_26>:

ISR(USART0_UDRE_vect) {
    63a6:	1f 92       	push	r1
    63a8:	0f 92       	push	r0
    63aa:	0f b6       	in	r0, 0x3f	; 63
    63ac:	0f 92       	push	r0
    63ae:	11 24       	eor	r1, r1
    63b0:	0b b6       	in	r0, 0x3b	; 59
    63b2:	0f 92       	push	r0
    63b4:	2f 93       	push	r18
    63b6:	8f 93       	push	r24
    63b8:	9f 93       	push	r25
    63ba:	ef 93       	push	r30
    63bc:	ff 93       	push	r31
	uint8_t index = serusbTxOutIndex;
    63be:	80 91 99 0b 	lds	r24, 0x0B99	; 0x800b99 <serusbTxOutIndex>
	if (SER_USB_TX_BUFFER_NONEMPTY){
    63c2:	20 91 dd 0b 	lds	r18, 0x0BDD	; 0x800bdd <serusbTxInIndex>
    63c6:	90 91 99 0b 	lds	r25, 0x0B99	; 0x800b99 <serusbTxOutIndex>
    63ca:	29 17       	cp	r18, r25
    63cc:	59 f0       	breq	.+22     	; 0x63e4 <__vector_26+0x3e>
		// es ist was zu senden da
		UDR0 = serUsbTxBuffer[index];
    63ce:	e8 2f       	mov	r30, r24
    63d0:	f0 e0       	ldi	r31, 0x00	; 0
    63d2:	ee 5d       	subi	r30, 0xDE	; 222
    63d4:	f3 4f       	sbci	r31, 0xF3	; 243
    63d6:	90 81       	ld	r25, Z
    63d8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serusbTxOutIndex = (index+1) & SER_USB_TX_BUFFER_MASK;
    63dc:	8f 5f       	subi	r24, 0xFF	; 255
    63de:	80 93 99 0b 	sts	0x0B99, r24	; 0x800b99 <serusbTxOutIndex>
    63e2:	05 c0       	rjmp	.+10     	; 0x63ee <__vector_26+0x48>
	} else {
		// nothing to send
		UCSR0B &= ~(1 << UDRIE0);
    63e4:	e1 ec       	ldi	r30, 0xC1	; 193
    63e6:	f0 e0       	ldi	r31, 0x00	; 0
    63e8:	80 81       	ld	r24, Z
    63ea:	8f 7d       	andi	r24, 0xDF	; 223
    63ec:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
}
    63ee:	ff 91       	pop	r31
    63f0:	ef 91       	pop	r30
    63f2:	9f 91       	pop	r25
    63f4:	8f 91       	pop	r24
    63f6:	2f 91       	pop	r18
    63f8:	0f 90       	pop	r0
    63fa:	0b be       	out	0x3b, r0	; 59
    63fc:	0f 90       	pop	r0
    63fe:	0f be       	out	0x3f, r0	; 63
    6400:	0f 90       	pop	r0
    6402:	1f 90       	pop	r1
    6404:	18 95       	reti

00006406 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    6406:	8a 30       	cpi	r24, 0x0A	; 10
    6408:	10 f0       	brcs	.+4      	; 0x640e <nibbleToChr+0x8>
    640a:	89 5c       	subi	r24, 0xC9	; 201
    640c:	08 95       	ret
    640e:	80 5d       	subi	r24, 0xD0	; 208
    6410:	08 95       	ret

00006412 <lcd_setCG>:
    6412:	ef 92       	push	r14
    6414:	ff 92       	push	r15
    6416:	1f 93       	push	r17
    6418:	cf 93       	push	r28
    641a:	df 93       	push	r29
    641c:	eb 01       	movw	r28, r22
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	88 0f       	add	r24, r24
    6422:	99 1f       	adc	r25, r25
    6424:	88 0f       	add	r24, r24
    6426:	99 1f       	adc	r25, r25
    6428:	88 0f       	add	r24, r24
    642a:	99 1f       	adc	r25, r25
    642c:	80 64       	ori	r24, 0x40	; 64
    642e:	0e 94 97 11 	call	0x232e	; 0x232e <lcd_write_command>
    6432:	10 e0       	ldi	r17, 0x00	; 0
    6434:	0a c0       	rjmp	.+20     	; 0x644a <lcd_setCG+0x38>
    6436:	7e 01       	movw	r14, r28
    6438:	8f ef       	ldi	r24, 0xFF	; 255
    643a:	e8 1a       	sub	r14, r24
    643c:	f8 0a       	sbc	r15, r24
    643e:	fe 01       	movw	r30, r28
    6440:	84 91       	lpm	r24, Z
    6442:	0e 94 7f 11 	call	0x22fe	; 0x22fe <lcd_write_character>
    6446:	1f 5f       	subi	r17, 0xFF	; 255
    6448:	e7 01       	movw	r28, r14
    644a:	18 30       	cpi	r17, 0x08	; 8
    644c:	a0 f3       	brcs	.-24     	; 0x6436 <lcd_setCG+0x24>
    644e:	df 91       	pop	r29
    6450:	cf 91       	pop	r28
    6452:	1f 91       	pop	r17
    6454:	ff 90       	pop	r15
    6456:	ef 90       	pop	r14
    6458:	08 95       	ret

0000645a <lcd_initCG>:
    645a:	68 e5       	ldi	r22, 0x58	; 88
    645c:	71 e1       	ldi	r23, 0x11	; 17
    645e:	80 e0       	ldi	r24, 0x00	; 0
    6460:	d8 df       	rcall	.-80     	; 0x6412 <lcd_setCG>
    6462:	60 e5       	ldi	r22, 0x50	; 80
    6464:	71 e1       	ldi	r23, 0x11	; 17
    6466:	81 e0       	ldi	r24, 0x01	; 1
    6468:	d4 df       	rcall	.-88     	; 0x6412 <lcd_setCG>
    646a:	68 e4       	ldi	r22, 0x48	; 72
    646c:	71 e1       	ldi	r23, 0x11	; 17
    646e:	82 e0       	ldi	r24, 0x02	; 2
    6470:	d0 cf       	rjmp	.-96     	; 0x6412 <lcd_setCG>
    6472:	08 95       	ret

00006474 <lcd_hexout>:
    6474:	cf 93       	push	r28
    6476:	c8 2f       	mov	r28, r24
    6478:	82 95       	swap	r24
    647a:	8f 70       	andi	r24, 0x0F	; 15
    647c:	8a 30       	cpi	r24, 0x0A	; 10
    647e:	10 f0       	brcs	.+4      	; 0x6484 <lcd_hexout+0x10>
    6480:	89 5c       	subi	r24, 0xC9	; 201
    6482:	01 c0       	rjmp	.+2      	; 0x6486 <lcd_hexout+0x12>
    6484:	80 5d       	subi	r24, 0xD0	; 208
    6486:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    648a:	cf 70       	andi	r28, 0x0F	; 15
    648c:	ca 30       	cpi	r28, 0x0A	; 10
    648e:	18 f0       	brcs	.+6      	; 0x6496 <lcd_hexout+0x22>
    6490:	87 e3       	ldi	r24, 0x37	; 55
    6492:	8c 0f       	add	r24, r28
    6494:	02 c0       	rjmp	.+4      	; 0x649a <lcd_hexout+0x26>
    6496:	80 e3       	ldi	r24, 0x30	; 48
    6498:	8c 0f       	add	r24, r28
    649a:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    649e:	cf 91       	pop	r28
    64a0:	08 95       	ret

000064a2 <lcd_longout>:
    64a2:	cf 93       	push	r28
    64a4:	df 93       	push	r29
    64a6:	d3 e0       	ldi	r29, 0x03	; 3
    64a8:	1c c0       	rjmp	.+56     	; 0x64e2 <lcd_longout+0x40>
    64aa:	ed 2f       	mov	r30, r29
    64ac:	0d 2e       	mov	r0, r29
    64ae:	00 0c       	add	r0, r0
    64b0:	ff 0b       	sbc	r31, r31
    64b2:	e6 5d       	subi	r30, 0xD6	; 214
    64b4:	f2 4f       	sbci	r31, 0xF2	; 242
    64b6:	c0 81       	ld	r28, Z
    64b8:	8c 2f       	mov	r24, r28
    64ba:	82 95       	swap	r24
    64bc:	8f 70       	andi	r24, 0x0F	; 15
    64be:	8a 30       	cpi	r24, 0x0A	; 10
    64c0:	10 f0       	brcs	.+4      	; 0x64c6 <lcd_longout+0x24>
    64c2:	89 5c       	subi	r24, 0xC9	; 201
    64c4:	01 c0       	rjmp	.+2      	; 0x64c8 <lcd_longout+0x26>
    64c6:	80 5d       	subi	r24, 0xD0	; 208
    64c8:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    64cc:	cf 70       	andi	r28, 0x0F	; 15
    64ce:	ca 30       	cpi	r28, 0x0A	; 10
    64d0:	18 f0       	brcs	.+6      	; 0x64d8 <lcd_longout+0x36>
    64d2:	87 e3       	ldi	r24, 0x37	; 55
    64d4:	8c 0f       	add	r24, r28
    64d6:	02 c0       	rjmp	.+4      	; 0x64dc <lcd_longout+0x3a>
    64d8:	80 e3       	ldi	r24, 0x30	; 48
    64da:	8c 0f       	add	r24, r28
    64dc:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    64e0:	d1 50       	subi	r29, 0x01	; 1
    64e2:	dd 23       	and	r29, r29
    64e4:	14 f7       	brge	.-60     	; 0x64aa <lcd_longout+0x8>
    64e6:	df 91       	pop	r29
    64e8:	cf 91       	pop	r28
    64ea:	08 95       	ret

000064ec <lcd_dec2out>:
    64ec:	cf 93       	push	r28
    64ee:	c8 2f       	mov	r28, r24
    64f0:	84 36       	cpi	r24, 0x64	; 100
    64f2:	50 f0       	brcs	.+20     	; 0x6508 <lcd_dec2out+0x1c>
    64f4:	8d e2       	ldi	r24, 0x2D	; 45
    64f6:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    64fa:	8d e2       	ldi	r24, 0x2D	; 45
    64fc:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    6500:	0d c0       	rjmp	.+26     	; 0x651c <lcd_dec2out+0x30>
    6502:	ca 50       	subi	r28, 0x0A	; 10
    6504:	8f 5f       	subi	r24, 0xFF	; 255
    6506:	01 c0       	rjmp	.+2      	; 0x650a <lcd_dec2out+0x1e>
    6508:	80 e0       	ldi	r24, 0x00	; 0
    650a:	ca 30       	cpi	r28, 0x0A	; 10
    650c:	d0 f7       	brcc	.-12     	; 0x6502 <lcd_dec2out+0x16>
    650e:	80 5d       	subi	r24, 0xD0	; 208
    6510:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    6514:	80 e3       	ldi	r24, 0x30	; 48
    6516:	8c 0f       	add	r24, r28
    6518:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    651c:	cf 91       	pop	r28
    651e:	08 95       	ret

00006520 <putChar_Dec2>:
    6520:	84 36       	cpi	r24, 0x64	; 100
    6522:	58 f0       	brcs	.+22     	; 0x653a <putChar_Dec2+0x1a>
    6524:	8d e2       	ldi	r24, 0x2D	; 45
    6526:	db 01       	movw	r26, r22
    6528:	8c 93       	st	X, r24
    652a:	fb 01       	movw	r30, r22
    652c:	32 96       	adiw	r30, 0x02	; 2
    652e:	11 96       	adiw	r26, 0x01	; 1
    6530:	8c 93       	st	X, r24
    6532:	0f c0       	rjmp	.+30     	; 0x6552 <putChar_Dec2+0x32>
    6534:	8a 50       	subi	r24, 0x0A	; 10
    6536:	9f 5f       	subi	r25, 0xFF	; 255
    6538:	01 c0       	rjmp	.+2      	; 0x653c <putChar_Dec2+0x1c>
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	8a 30       	cpi	r24, 0x0A	; 10
    653e:	d0 f7       	brcc	.-12     	; 0x6534 <putChar_Dec2+0x14>
    6540:	90 5d       	subi	r25, 0xD0	; 208
    6542:	fb 01       	movw	r30, r22
    6544:	90 83       	st	Z, r25
    6546:	32 96       	adiw	r30, 0x02	; 2
    6548:	90 e3       	ldi	r25, 0x30	; 48
    654a:	98 0f       	add	r25, r24
    654c:	db 01       	movw	r26, r22
    654e:	11 96       	adiw	r26, 0x01	; 1
    6550:	9c 93       	st	X, r25
    6552:	10 82       	st	Z, r1
    6554:	cf 01       	movw	r24, r30
    6556:	08 95       	ret

00006558 <putChar_Dec>:
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	02 c0       	rjmp	.+4      	; 0x6560 <putChar_Dec+0x8>
    655c:	84 56       	subi	r24, 0x64	; 100
    655e:	9f 5f       	subi	r25, 0xFF	; 255
    6560:	84 36       	cpi	r24, 0x64	; 100
    6562:	e0 f7       	brcc	.-8      	; 0x655c <putChar_Dec+0x4>
    6564:	99 23       	and	r25, r25
    6566:	39 f0       	breq	.+14     	; 0x6576 <putChar_Dec+0x1e>
    6568:	90 5d       	subi	r25, 0xD0	; 208
    656a:	db 01       	movw	r26, r22
    656c:	9c 93       	st	X, r25
    656e:	6f 5f       	subi	r22, 0xFF	; 255
    6570:	7f 4f       	sbci	r23, 0xFF	; 255
    6572:	2f ef       	ldi	r18, 0xFF	; 255
    6574:	01 c0       	rjmp	.+2      	; 0x6578 <putChar_Dec+0x20>
    6576:	20 e0       	ldi	r18, 0x00	; 0
    6578:	90 e0       	ldi	r25, 0x00	; 0
    657a:	02 c0       	rjmp	.+4      	; 0x6580 <putChar_Dec+0x28>
    657c:	8a 50       	subi	r24, 0x0A	; 10
    657e:	9f 5f       	subi	r25, 0xFF	; 255
    6580:	8a 30       	cpi	r24, 0x0A	; 10
    6582:	e0 f7       	brcc	.-8      	; 0x657c <putChar_Dec+0x24>
    6584:	91 11       	cpse	r25, r1
    6586:	02 c0       	rjmp	.+4      	; 0x658c <putChar_Dec+0x34>
    6588:	2f 3f       	cpi	r18, 0xFF	; 255
    658a:	31 f4       	brne	.+12     	; 0x6598 <putChar_Dec+0x40>
    658c:	fb 01       	movw	r30, r22
    658e:	31 96       	adiw	r30, 0x01	; 1
    6590:	90 5d       	subi	r25, 0xD0	; 208
    6592:	db 01       	movw	r26, r22
    6594:	9c 93       	st	X, r25
    6596:	01 c0       	rjmp	.+2      	; 0x659a <putChar_Dec+0x42>
    6598:	fb 01       	movw	r30, r22
    659a:	80 5d       	subi	r24, 0xD0	; 208
    659c:	80 83       	st	Z, r24
    659e:	11 82       	std	Z+1, r1	; 0x01
    65a0:	cf 01       	movw	r24, r30
    65a2:	01 96       	adiw	r24, 0x01	; 1
    65a4:	08 95       	ret

000065a6 <putChar_hex>:
    65a6:	fb 01       	movw	r30, r22
    65a8:	98 2f       	mov	r25, r24
    65aa:	92 95       	swap	r25
    65ac:	9f 70       	andi	r25, 0x0F	; 15
    65ae:	9a 30       	cpi	r25, 0x0A	; 10
    65b0:	10 f0       	brcs	.+4      	; 0x65b6 <putChar_hex+0x10>
    65b2:	99 5c       	subi	r25, 0xC9	; 201
    65b4:	01 c0       	rjmp	.+2      	; 0x65b8 <putChar_hex+0x12>
    65b6:	90 5d       	subi	r25, 0xD0	; 208
    65b8:	90 83       	st	Z, r25
    65ba:	98 2f       	mov	r25, r24
    65bc:	9f 70       	andi	r25, 0x0F	; 15
    65be:	9f 01       	movw	r18, r30
    65c0:	2e 5f       	subi	r18, 0xFE	; 254
    65c2:	3f 4f       	sbci	r19, 0xFF	; 255
    65c4:	9a 30       	cpi	r25, 0x0A	; 10
    65c6:	10 f0       	brcs	.+4      	; 0x65cc <putChar_hex+0x26>
    65c8:	99 5c       	subi	r25, 0xC9	; 201
    65ca:	01 c0       	rjmp	.+2      	; 0x65ce <putChar_hex+0x28>
    65cc:	90 5d       	subi	r25, 0xD0	; 208
    65ce:	91 83       	std	Z+1, r25	; 0x01
    65d0:	12 82       	std	Z+2, r1	; 0x02
    65d2:	c9 01       	movw	r24, r18
    65d4:	08 95       	ret

000065d6 <putChar_long>:
    65d6:	ac 01       	movw	r20, r24
    65d8:	fb 01       	movw	r30, r22
    65da:	34 96       	adiw	r30, 0x04	; 4
    65dc:	db 01       	movw	r26, r22
    65de:	14 96       	adiw	r26, 0x04	; 4
    65e0:	1c 92       	st	X, r1
    65e2:	20 e0       	ldi	r18, 0x00	; 0
    65e4:	10 c0       	rjmp	.+32     	; 0x6606 <putChar_long+0x30>
    65e6:	94 2f       	mov	r25, r20
    65e8:	9f 70       	andi	r25, 0x0F	; 15
    65ea:	31 97       	sbiw	r30, 0x01	; 1
    65ec:	9a 30       	cpi	r25, 0x0A	; 10
    65ee:	10 f0       	brcs	.+4      	; 0x65f4 <putChar_long+0x1e>
    65f0:	99 5c       	subi	r25, 0xC9	; 201
    65f2:	01 c0       	rjmp	.+2      	; 0x65f6 <putChar_long+0x20>
    65f4:	90 5d       	subi	r25, 0xD0	; 208
    65f6:	90 83       	st	Z, r25
    65f8:	52 95       	swap	r21
    65fa:	42 95       	swap	r20
    65fc:	4f 70       	andi	r20, 0x0F	; 15
    65fe:	45 27       	eor	r20, r21
    6600:	5f 70       	andi	r21, 0x0F	; 15
    6602:	45 27       	eor	r20, r21
    6604:	2f 5f       	subi	r18, 0xFF	; 255
    6606:	24 30       	cpi	r18, 0x04	; 4
    6608:	70 f3       	brcs	.-36     	; 0x65e6 <putChar_long+0x10>
    660a:	cf 01       	movw	r24, r30
    660c:	04 96       	adiw	r24, 0x04	; 4
    660e:	08 95       	ret

00006610 <putChar_Note>:
    6610:	88 23       	and	r24, r24
    6612:	8c f4       	brge	.+34     	; 0x6636 <putChar_Note+0x26>
    6614:	8d e2       	ldi	r24, 0x2D	; 45
    6616:	db 01       	movw	r26, r22
    6618:	8c 93       	st	X, r24
    661a:	9e e6       	ldi	r25, 0x6E	; 110
    661c:	11 96       	adiw	r26, 0x01	; 1
    661e:	9c 93       	st	X, r25
    6620:	11 97       	sbiw	r26, 0x01	; 1
    6622:	12 96       	adiw	r26, 0x02	; 2
    6624:	8c 93       	st	X, r24
    6626:	12 97       	sbiw	r26, 0x02	; 2
    6628:	14 96       	adiw	r26, 0x04	; 4
    662a:	fb 01       	movw	r30, r22
    662c:	13 82       	std	Z+3, r1	; 0x03
    662e:	49 c0       	rjmp	.+146    	; 0x66c2 <putChar_Note+0xb2>
    6630:	8c 50       	subi	r24, 0x0C	; 12
    6632:	9f 5f       	subi	r25, 0xFF	; 255
    6634:	01 c0       	rjmp	.+2      	; 0x6638 <putChar_Note+0x28>
    6636:	90 e0       	ldi	r25, 0x00	; 0
    6638:	8c 30       	cpi	r24, 0x0C	; 12
    663a:	d0 f7       	brcc	.-12     	; 0x6630 <putChar_Note+0x20>
    663c:	8b 30       	cpi	r24, 0x0B	; 11
    663e:	39 f4       	brne	.+14     	; 0x664e <putChar_Note+0x3e>
    6640:	fb 01       	movw	r30, r22
    6642:	31 96       	adiw	r30, 0x01	; 1
    6644:	88 e4       	ldi	r24, 0x48	; 72
    6646:	db 01       	movw	r26, r22
    6648:	8c 93       	st	X, r24
    664a:	8f e5       	ldi	r24, 0x5F	; 95
    664c:	27 c0       	rjmp	.+78     	; 0x669c <putChar_Note+0x8c>
    664e:	85 30       	cpi	r24, 0x05	; 5
    6650:	58 f4       	brcc	.+22     	; 0x6668 <putChar_Note+0x58>
    6652:	fb 01       	movw	r30, r22
    6654:	31 96       	adiw	r30, 0x01	; 1
    6656:	28 2f       	mov	r18, r24
    6658:	26 95       	lsr	r18
    665a:	2d 5b       	subi	r18, 0xBD	; 189
    665c:	db 01       	movw	r26, r22
    665e:	2c 93       	st	X, r18
    6660:	80 fd       	sbrc	r24, 0
    6662:	19 c0       	rjmp	.+50     	; 0x6696 <putChar_Note+0x86>
    6664:	8f e5       	ldi	r24, 0x5F	; 95
    6666:	1a c0       	rjmp	.+52     	; 0x669c <putChar_Note+0x8c>
    6668:	89 30       	cpi	r24, 0x09	; 9
    666a:	30 f0       	brcs	.+12     	; 0x6678 <putChar_Note+0x68>
    666c:	fb 01       	movw	r30, r22
    666e:	31 96       	adiw	r30, 0x01	; 1
    6670:	21 e4       	ldi	r18, 0x41	; 65
    6672:	db 01       	movw	r26, r22
    6674:	2c 93       	st	X, r18
    6676:	0b c0       	rjmp	.+22     	; 0x668e <putChar_Note+0x7e>
    6678:	fb 01       	movw	r30, r22
    667a:	31 96       	adiw	r30, 0x01	; 1
    667c:	28 2f       	mov	r18, r24
    667e:	30 e0       	ldi	r19, 0x00	; 0
    6680:	25 50       	subi	r18, 0x05	; 5
    6682:	31 09       	sbc	r19, r1
    6684:	35 95       	asr	r19
    6686:	27 95       	ror	r18
    6688:	2a 5b       	subi	r18, 0xBA	; 186
    668a:	db 01       	movw	r26, r22
    668c:	2c 93       	st	X, r18
    668e:	80 ff       	sbrs	r24, 0
    6690:	04 c0       	rjmp	.+8      	; 0x669a <putChar_Note+0x8a>
    6692:	8f e5       	ldi	r24, 0x5F	; 95
    6694:	03 c0       	rjmp	.+6      	; 0x669c <putChar_Note+0x8c>
    6696:	83 e2       	ldi	r24, 0x23	; 35
    6698:	01 c0       	rjmp	.+2      	; 0x669c <putChar_Note+0x8c>
    669a:	83 e2       	ldi	r24, 0x23	; 35
    669c:	80 83       	st	Z, r24
    669e:	91 11       	cpse	r25, r1
    66a0:	05 c0       	rjmp	.+10     	; 0x66ac <putChar_Note+0x9c>
    66a2:	df 01       	movw	r26, r30
    66a4:	12 96       	adiw	r26, 0x02	; 2
    66a6:	8d e6       	ldi	r24, 0x6D	; 109
    66a8:	81 83       	std	Z+1, r24	; 0x01
    66aa:	0b c0       	rjmp	.+22     	; 0x66c2 <putChar_Note+0xb2>
    66ac:	9c 30       	cpi	r25, 0x0C	; 12
    66ae:	28 f4       	brcc	.+10     	; 0x66ba <putChar_Note+0xaa>
    66b0:	df 01       	movw	r26, r30
    66b2:	12 96       	adiw	r26, 0x02	; 2
    66b4:	91 5d       	subi	r25, 0xD1	; 209
    66b6:	91 83       	std	Z+1, r25	; 0x01
    66b8:	04 c0       	rjmp	.+8      	; 0x66c2 <putChar_Note+0xb2>
    66ba:	df 01       	movw	r26, r30
    66bc:	12 96       	adiw	r26, 0x02	; 2
    66be:	8d e2       	ldi	r24, 0x2D	; 45
    66c0:	81 83       	std	Z+1, r24	; 0x01
    66c2:	1c 92       	st	X, r1
    66c4:	cd 01       	movw	r24, r26
    66c6:	08 95       	ret

000066c8 <putChar_Manual>:
    66c8:	83 30       	cpi	r24, 0x03	; 3
    66ca:	38 f4       	brcc	.+14     	; 0x66da <putChar_Manual+0x12>
    66cc:	fb 01       	movw	r30, r22
    66ce:	31 96       	adiw	r30, 0x01	; 1
    66d0:	93 e3       	ldi	r25, 0x33	; 51
    66d2:	98 1b       	sub	r25, r24
    66d4:	db 01       	movw	r26, r22
    66d6:	9c 93       	st	X, r25
    66d8:	0d c0       	rjmp	.+26     	; 0x66f4 <putChar_Manual+0x2c>
    66da:	83 30       	cpi	r24, 0x03	; 3
    66dc:	31 f4       	brne	.+12     	; 0x66ea <putChar_Manual+0x22>
    66de:	fb 01       	movw	r30, r22
    66e0:	31 96       	adiw	r30, 0x01	; 1
    66e2:	80 e5       	ldi	r24, 0x50	; 80
    66e4:	db 01       	movw	r26, r22
    66e6:	8c 93       	st	X, r24
    66e8:	05 c0       	rjmp	.+10     	; 0x66f4 <putChar_Manual+0x2c>
    66ea:	fb 01       	movw	r30, r22
    66ec:	31 96       	adiw	r30, 0x01	; 1
    66ee:	8d e2       	ldi	r24, 0x2D	; 45
    66f0:	db 01       	movw	r26, r22
    66f2:	8c 93       	st	X, r24
    66f4:	10 82       	st	Z, r1
    66f6:	cf 01       	movw	r24, r30
    66f8:	08 95       	ret

000066fa <putString_P>:
    66fa:	fc 01       	movw	r30, r24
    66fc:	db 01       	movw	r26, r22
    66fe:	20 e0       	ldi	r18, 0x00	; 0
    6700:	02 c0       	rjmp	.+4      	; 0x6706 <putString_P+0xc>
    6702:	28 2f       	mov	r18, r24
    6704:	da 01       	movw	r26, r20
    6706:	94 91       	lpm	r25, Z
    6708:	99 23       	and	r25, r25
    670a:	51 f0       	breq	.+20     	; 0x6720 <putString_P+0x26>
    670c:	ad 01       	movw	r20, r26
    670e:	4f 5f       	subi	r20, 0xFF	; 255
    6710:	5f 4f       	sbci	r21, 0xFF	; 255
    6712:	31 96       	adiw	r30, 0x01	; 1
    6714:	9c 93       	st	X, r25
    6716:	81 e0       	ldi	r24, 0x01	; 1
    6718:	82 0f       	add	r24, r18
    671a:	24 31       	cpi	r18, 0x14	; 20
    671c:	90 f3       	brcs	.-28     	; 0x6702 <putString_P+0x8>
    671e:	01 c0       	rjmp	.+2      	; 0x6722 <putString_P+0x28>
    6720:	ad 01       	movw	r20, r26
    6722:	ca 01       	movw	r24, r20
    6724:	08 95       	ret

00006726 <lcd_wordout>:
    6726:	cf 93       	push	r28
    6728:	c8 2f       	mov	r28, r24
    672a:	89 2f       	mov	r24, r25
    672c:	a3 de       	rcall	.-698    	; 0x6474 <lcd_hexout>
    672e:	8c 2f       	mov	r24, r28
    6730:	a1 de       	rcall	.-702    	; 0x6474 <lcd_hexout>
    6732:	cf 91       	pop	r28
    6734:	08 95       	ret

00006736 <lcd_noteOut>:
    6736:	cf 93       	push	r28
    6738:	df 93       	push	r29
    673a:	88 23       	and	r24, r24
    673c:	dc f1       	brlt	.+118    	; 0x67b4 <lcd_noteOut+0x7e>
    673e:	90 e0       	ldi	r25, 0x00	; 0
    6740:	02 c0       	rjmp	.+4      	; 0x6746 <lcd_noteOut+0x10>
    6742:	9f 5f       	subi	r25, 0xFF	; 255
    6744:	8c 50       	subi	r24, 0x0C	; 12
    6746:	8c 30       	cpi	r24, 0x0C	; 12
    6748:	e0 f7       	brcc	.-8      	; 0x6742 <lcd_noteOut+0xc>
    674a:	48 2f       	mov	r20, r24
    674c:	50 e0       	ldi	r21, 0x00	; 0
    674e:	4c 30       	cpi	r20, 0x0C	; 12
    6750:	51 05       	cpc	r21, r1
    6752:	30 f4       	brcc	.+12     	; 0x6760 <lcd_noteOut+0x2a>
    6754:	fa 01       	movw	r30, r20
    6756:	88 27       	eor	r24, r24
    6758:	ea 55       	subi	r30, 0x5A	; 90
    675a:	ff 4f       	sbci	r31, 0xFF	; 255
    675c:	8f 4f       	sbci	r24, 0xFF	; 255
    675e:	5d c1       	rjmp	.+698    	; 0x6a1a <__tablejump2__>
    6760:	d3 e2       	ldi	r29, 0x23	; 35
    6762:	23 c0       	rjmp	.+70     	; 0x67aa <lcd_noteOut+0x74>
    6764:	d3 e2       	ldi	r29, 0x23	; 35
    6766:	24 e4       	ldi	r18, 0x44	; 68
    6768:	20 c0       	rjmp	.+64     	; 0x67aa <lcd_noteOut+0x74>
    676a:	d3 e2       	ldi	r29, 0x23	; 35
    676c:	26 e4       	ldi	r18, 0x46	; 70
    676e:	1d c0       	rjmp	.+58     	; 0x67aa <lcd_noteOut+0x74>
    6770:	d3 e2       	ldi	r29, 0x23	; 35
    6772:	27 e4       	ldi	r18, 0x47	; 71
    6774:	1a c0       	rjmp	.+52     	; 0x67aa <lcd_noteOut+0x74>
    6776:	d3 e2       	ldi	r29, 0x23	; 35
    6778:	21 e4       	ldi	r18, 0x41	; 65
    677a:	17 c0       	rjmp	.+46     	; 0x67aa <lcd_noteOut+0x74>
    677c:	d5 ea       	ldi	r29, 0xA5	; 165
    677e:	23 e4       	ldi	r18, 0x43	; 67
    6780:	14 c0       	rjmp	.+40     	; 0x67aa <lcd_noteOut+0x74>
    6782:	d5 ea       	ldi	r29, 0xA5	; 165
    6784:	24 e4       	ldi	r18, 0x44	; 68
    6786:	11 c0       	rjmp	.+34     	; 0x67aa <lcd_noteOut+0x74>
    6788:	d5 ea       	ldi	r29, 0xA5	; 165
    678a:	25 e4       	ldi	r18, 0x45	; 69
    678c:	0e c0       	rjmp	.+28     	; 0x67aa <lcd_noteOut+0x74>
    678e:	d5 ea       	ldi	r29, 0xA5	; 165
    6790:	26 e4       	ldi	r18, 0x46	; 70
    6792:	0b c0       	rjmp	.+22     	; 0x67aa <lcd_noteOut+0x74>
    6794:	d5 ea       	ldi	r29, 0xA5	; 165
    6796:	27 e4       	ldi	r18, 0x47	; 71
    6798:	08 c0       	rjmp	.+16     	; 0x67aa <lcd_noteOut+0x74>
    679a:	d5 ea       	ldi	r29, 0xA5	; 165
    679c:	21 e4       	ldi	r18, 0x41	; 65
    679e:	05 c0       	rjmp	.+10     	; 0x67aa <lcd_noteOut+0x74>
    67a0:	d5 ea       	ldi	r29, 0xA5	; 165
    67a2:	28 e4       	ldi	r18, 0x48	; 72
    67a4:	02 c0       	rjmp	.+4      	; 0x67aa <lcd_noteOut+0x74>
    67a6:	d3 e2       	ldi	r29, 0x23	; 35
    67a8:	23 e4       	ldi	r18, 0x43	; 67
    67aa:	99 23       	and	r25, r25
    67ac:	39 f0       	breq	.+14     	; 0x67bc <lcd_noteOut+0x86>
    67ae:	cf e2       	ldi	r28, 0x2F	; 47
    67b0:	c9 0f       	add	r28, r25
    67b2:	05 c0       	rjmp	.+10     	; 0x67be <lcd_noteOut+0x88>
    67b4:	cd e2       	ldi	r28, 0x2D	; 45
    67b6:	dd e2       	ldi	r29, 0x2D	; 45
    67b8:	2d e2       	ldi	r18, 0x2D	; 45
    67ba:	01 c0       	rjmp	.+2      	; 0x67be <lcd_noteOut+0x88>
    67bc:	cd e2       	ldi	r28, 0x2D	; 45
    67be:	82 2f       	mov	r24, r18
    67c0:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    67c4:	8d 2f       	mov	r24, r29
    67c6:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    67ca:	8c 2f       	mov	r24, r28
    67cc:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    67d0:	83 e0       	ldi	r24, 0x03	; 3
    67d2:	df 91       	pop	r29
    67d4:	cf 91       	pop	r28
    67d6:	08 95       	ret

000067d8 <lcd_ChannelOut>:
    67d8:	cf 93       	push	r28
    67da:	c8 2f       	mov	r28, r24
    67dc:	cf 70       	andi	r28, 0x0F	; 15
    67de:	81 e0       	ldi	r24, 0x01	; 1
    67e0:	8c 0f       	add	r24, r28
    67e2:	8a 30       	cpi	r24, 0x0A	; 10
    67e4:	28 f0       	brcs	.+10     	; 0x67f0 <lcd_ChannelOut+0x18>
    67e6:	81 e3       	ldi	r24, 0x31	; 49
    67e8:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    67ec:	87 ef       	ldi	r24, 0xF7	; 247
    67ee:	8c 0f       	add	r24, r28
    67f0:	80 5d       	subi	r24, 0xD0	; 208
    67f2:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    67f6:	cf 91       	pop	r28
    67f8:	08 95       	ret

000067fa <lcd_ManualOutDec>:
    67fa:	84 30       	cpi	r24, 0x04	; 4
    67fc:	20 f0       	brcs	.+8      	; 0x6806 <lcd_ManualOutDec+0xc>
    67fe:	8d e2       	ldi	r24, 0x2D	; 45
    6800:	0c 94 13 12 	jmp	0x2426	; 0x2426 <lcd_putc>
    6804:	08 95       	ret
    6806:	83 30       	cpi	r24, 0x03	; 3
    6808:	21 f4       	brne	.+8      	; 0x6812 <lcd_ManualOutDec+0x18>
    680a:	80 e5       	ldi	r24, 0x50	; 80
    680c:	0c 94 13 12 	jmp	0x2426	; 0x2426 <lcd_putc>
    6810:	08 95       	ret
    6812:	93 e3       	ldi	r25, 0x33	; 51
    6814:	98 1b       	sub	r25, r24
    6816:	89 2f       	mov	r24, r25
    6818:	0c 94 13 12 	jmp	0x2426	; 0x2426 <lcd_putc>
    681c:	08 95       	ret

0000681e <lcd_blank>:
    681e:	cf 93       	push	r28
    6820:	04 c0       	rjmp	.+8      	; 0x682a <lcd_blank+0xc>
    6822:	80 e2       	ldi	r24, 0x20	; 32
    6824:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    6828:	8c 2f       	mov	r24, r28
    682a:	cf ef       	ldi	r28, 0xFF	; 255
    682c:	c8 0f       	add	r28, r24
    682e:	81 11       	cpse	r24, r1
    6830:	f8 cf       	rjmp	.-16     	; 0x6822 <lcd_blank+0x4>
    6832:	cf 91       	pop	r28
    6834:	08 95       	ret

00006836 <lcd_clrEol>:
    6836:	cf 93       	push	r28
    6838:	90 e0       	ldi	r25, 0x00	; 0
    683a:	04 c0       	rjmp	.+8      	; 0x6844 <lcd_clrEol+0xe>
    683c:	80 e2       	ldi	r24, 0x20	; 32
    683e:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    6842:	9c 2f       	mov	r25, r28
    6844:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <lcd_cursorPos>
    6848:	84 31       	cpi	r24, 0x14	; 20
    684a:	51 f0       	breq	.+20     	; 0x6860 <lcd_clrEol+0x2a>
    684c:	84 35       	cpi	r24, 0x54	; 84
    684e:	41 f0       	breq	.+16     	; 0x6860 <lcd_clrEol+0x2a>
    6850:	88 32       	cpi	r24, 0x28	; 40
    6852:	31 f0       	breq	.+12     	; 0x6860 <lcd_clrEol+0x2a>
    6854:	88 36       	cpi	r24, 0x68	; 104
    6856:	21 f0       	breq	.+8      	; 0x6860 <lcd_clrEol+0x2a>
    6858:	c1 e0       	ldi	r28, 0x01	; 1
    685a:	c9 0f       	add	r28, r25
    685c:	94 31       	cpi	r25, 0x14	; 20
    685e:	70 f3       	brcs	.-36     	; 0x683c <lcd_clrEol+0x6>
    6860:	cf 91       	pop	r28
    6862:	08 95       	ret

00006864 <lcd_cursosblink>:
    6864:	8d e0       	ldi	r24, 0x0D	; 13
    6866:	0e 94 97 11 	call	0x232e	; 0x232e <lcd_write_command>
    686a:	8f ef       	ldi	r24, 0xFF	; 255
    686c:	80 93 28 0d 	sts	0x0D28, r24	; 0x800d28 <lcd_cursorIsOn>
    6870:	08 95       	ret

00006872 <lcd_cursoroff>:
    6872:	8c e0       	ldi	r24, 0x0C	; 12
    6874:	0e 94 97 11 	call	0x232e	; 0x232e <lcd_write_command>
    6878:	10 92 28 0d 	sts	0x0D28, r1	; 0x800d28 <lcd_cursorIsOn>
    687c:	08 95       	ret

0000687e <lcd_waitSymbolOn>:
    687e:	cf 93       	push	r28
    6880:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <lcd_cursorPos>
    6884:	8c e0       	ldi	r24, 0x0C	; 12
    6886:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    688a:	81 ea       	ldi	r24, 0xA1	; 161
    688c:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    6890:	8c 2f       	mov	r24, r28
    6892:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    6896:	cf 91       	pop	r28
    6898:	08 95       	ret

0000689a <lcd_waitSymbolOff>:
    689a:	cf 93       	push	r28
    689c:	c0 91 58 03 	lds	r28, 0x0358	; 0x800358 <lcd_cursorPos>
    68a0:	8c e0       	ldi	r24, 0x0C	; 12
    68a2:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    68a6:	80 e2       	ldi	r24, 0x20	; 32
    68a8:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>
    68ac:	8c 2f       	mov	r24, r28
    68ae:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
    68b2:	cf 91       	pop	r28
    68b4:	08 95       	ret

000068b6 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    68b6:	84 30       	cpi	r24, 0x04	; 4
    68b8:	28 f0       	brcs	.+10     	; 0x68c4 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    68ba:	20 e0       	ldi	r18, 0x00	; 0
    68bc:	0d c0       	rjmp	.+26     	; 0x68d8 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    68be:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    68c0:	fa 01       	movw	r30, r20
    68c2:	02 c0       	rjmp	.+4      	; 0x68c8 <keylabel_set+0x12>
    68c4:	fb 01       	movw	r30, r22
    68c6:	20 e0       	ldi	r18, 0x00	; 0
    68c8:	af 01       	movw	r20, r30
    68ca:	4f 5f       	subi	r20, 0xFF	; 255
    68cc:	5f 4f       	sbci	r21, 0xFF	; 255
    68ce:	94 91       	lpm	r25, Z
    68d0:	99 23       	and	r25, r25
    68d2:	11 f0       	breq	.+4      	; 0x68d8 <keylabel_set+0x22>
    68d4:	25 30       	cpi	r18, 0x05	; 5
    68d6:	98 f3       	brcs	.-26     	; 0x68be <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	dc 01       	movw	r26, r24
    68dc:	aa 0f       	add	r26, r26
    68de:	bb 1f       	adc	r27, r27
    68e0:	aa 0f       	add	r26, r26
    68e2:	bb 1f       	adc	r27, r27
    68e4:	8a 0f       	add	r24, r26
    68e6:	9b 1f       	adc	r25, r27
    68e8:	dc 01       	movw	r26, r24
    68ea:	af 5e       	subi	r26, 0xEF	; 239
    68ec:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    68ee:	45 e0       	ldi	r20, 0x05	; 5
    68f0:	50 e0       	ldi	r21, 0x00	; 0
    68f2:	42 1b       	sub	r20, r18
    68f4:	51 09       	sbc	r21, r1
    68f6:	ca 01       	movw	r24, r20
    68f8:	99 23       	and	r25, r25
    68fa:	0c f4       	brge	.+2      	; 0x68fe <keylabel_set+0x48>
    68fc:	01 96       	adiw	r24, 0x01	; 1
    68fe:	95 95       	asr	r25
    6900:	87 95       	ror	r24
    6902:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    6904:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    6906:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    6908:	0e c0       	rjmp	.+28     	; 0x6926 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    690a:	93 17       	cp	r25, r19
    690c:	10 f0       	brcs	.+4      	; 0x6912 <keylabel_set+0x5c>
    690e:	98 17       	cp	r25, r24
    6910:	18 f0       	brcs	.+6      	; 0x6918 <keylabel_set+0x62>
			*charBufPtr = ' ';
    6912:	20 e2       	ldi	r18, 0x20	; 32
    6914:	2c 93       	st	X, r18
    6916:	05 c0       	rjmp	.+10     	; 0x6922 <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    6918:	fb 01       	movw	r30, r22
    691a:	24 91       	lpm	r18, Z
    691c:	2c 93       	st	X, r18
    691e:	6f 5f       	subi	r22, 0xFF	; 255
    6920:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    6922:	11 96       	adiw	r26, 0x01	; 1
		i++;
    6924:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    6926:	95 30       	cpi	r25, 0x05	; 5
    6928:	80 f3       	brcs	.-32     	; 0x690a <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    692a:	08 95       	ret

0000692c <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    692c:	90 e0       	ldi	r25, 0x00	; 0
    692e:	fc 01       	movw	r30, r24
    6930:	ee 0f       	add	r30, r30
    6932:	ff 1f       	adc	r31, r31
    6934:	ee 0f       	add	r30, r30
    6936:	ff 1f       	adc	r31, r31
    6938:	8e 0f       	add	r24, r30
    693a:	9f 1f       	adc	r25, r31
    693c:	fc 01       	movw	r30, r24
    693e:	ef 5e       	subi	r30, 0xEF	; 239
    6940:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6942:	80 e0       	ldi	r24, 0x00	; 0
    6944:	04 c0       	rjmp	.+8      	; 0x694e <keylabel_clr+0x22>
		*charPtr++ = ' ';
    6946:	90 e2       	ldi	r25, 0x20	; 32
    6948:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    694a:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    694c:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    694e:	85 30       	cpi	r24, 0x05	; 5
    6950:	d0 f3       	brcs	.-12     	; 0x6946 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    6952:	08 95       	ret

00006954 <keylabel_toLCD>:

void keylabel_toLCD(){
    6954:	0f 93       	push	r16
    6956:	1f 93       	push	r17
    6958:	cf 93       	push	r28
    695a:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    695c:	d0 91 58 03 	lds	r29, 0x0358	; 0x800358 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    6960:	84 e5       	ldi	r24, 0x54	; 84
    6962:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6966:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    6968:	e1 e1       	ldi	r30, 0x11	; 17
    696a:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    696c:	08 c0       	rjmp	.+16     	; 0x697e <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    696e:	8f 01       	movw	r16, r30
    6970:	0f 5f       	subi	r16, 0xFF	; 255
    6972:	1f 4f       	sbci	r17, 0xFF	; 255
    6974:	80 81       	ld	r24, Z
    6976:	0e 94 13 12 	call	0x2426	; 0x2426 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    697a:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    697c:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    697e:	c4 31       	cpi	r28, 0x14	; 20
    6980:	b0 f3       	brcs	.-20     	; 0x696e <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    6982:	8d 2f       	mov	r24, r29
    6984:	0e 94 09 12 	call	0x2412	; 0x2412 <lcd_goto>
}
    6988:	df 91       	pop	r29
    698a:	cf 91       	pop	r28
    698c:	1f 91       	pop	r17
    698e:	0f 91       	pop	r16
    6990:	08 95       	ret

00006992 <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    6992:	90 e0       	ldi	r25, 0x00	; 0
    6994:	fc 01       	movw	r30, r24
    6996:	ee 0f       	add	r30, r30
    6998:	ff 1f       	adc	r31, r31
    699a:	ee 0f       	add	r30, r30
    699c:	ff 1f       	adc	r31, r31
    699e:	8e 0f       	add	r24, r30
    69a0:	9f 1f       	adc	r25, r31
    69a2:	fc 01       	movw	r30, r24
    69a4:	ef 5e       	subi	r30, 0xEF	; 239
    69a6:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    69a8:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    69aa:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    69ac:	12 c0       	rjmp	.+36     	; 0x69d2 <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    69ae:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    69b0:	61 11       	cpse	r22, r1
    69b2:	06 c0       	rjmp	.+12     	; 0x69c0 <keylabel_statcheck+0x2e>
    69b4:	2a 30       	cpi	r18, 0x0A	; 10
    69b6:	21 f4       	brne	.+8      	; 0x69c0 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    69b8:	80 e8       	ldi	r24, 0x80	; 128
    69ba:	80 83       	st	Z, r24
			result = 0xFF;
    69bc:	8f ef       	ldi	r24, 0xFF	; 255
    69be:	07 c0       	rjmp	.+14     	; 0x69ce <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    69c0:	66 23       	and	r22, r22
    69c2:	29 f0       	breq	.+10     	; 0x69ce <keylabel_statcheck+0x3c>
    69c4:	20 38       	cpi	r18, 0x80	; 128
    69c6:	19 f4       	brne	.+6      	; 0x69ce <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    69c8:	8a e0       	ldi	r24, 0x0A	; 10
    69ca:	80 83       	st	Z, r24
			result = 0xFF;
    69cc:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    69ce:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    69d0:	9f 5f       	subi	r25, 0xFF	; 255
    69d2:	95 30       	cpi	r25, 0x05	; 5
    69d4:	60 f3       	brcs	.-40     	; 0x69ae <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    69d6:	08 95       	ret

000069d8 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    69d8:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    69da:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    69dc:	94 91       	lpm	r25, Z
    69de:	99 23       	and	r25, r25
    69e0:	21 f0       	breq	.+8      	; 0x69ea <get_StrLenP+0x12>
			return result;
		}
		pString++;
    69e2:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    69e4:	8f 5f       	subi	r24, 0xFF	; 255
    69e6:	80 32       	cpi	r24, 0x20	; 32
    69e8:	c8 f3       	brcs	.-14     	; 0x69dc <get_StrLenP+0x4>
	return result;
}
    69ea:	08 95       	ret

000069ec <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    69ec:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    69ee:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    69f0:	90 81       	ld	r25, Z
    69f2:	99 23       	and	r25, r25
    69f4:	21 f0       	breq	.+8      	; 0x69fe <get_StrLen+0x12>
			return result;
		}
		pString++;
    69f6:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    69f8:	8f 5f       	subi	r24, 0xFF	; 255
    69fa:	80 32       	cpi	r24, 0x20	; 32
    69fc:	c8 f3       	brcs	.-14     	; 0x69f0 <get_StrLen+0x4>
	return result;
}
    69fe:	08 95       	ret

00006a00 <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    6a00:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    6a02:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    6a04:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    6a06:	06 c0       	rjmp	.+12     	; 0x6a14 <reverse_Bits+0x14>
		result = result << 1;
    6a08:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    6a0a:	32 2f       	mov	r19, r18
    6a0c:	31 70       	andi	r19, 0x01	; 1
    6a0e:	83 2b       	or	r24, r19
		val = val >> 1;
    6a10:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    6a12:	9f 5f       	subi	r25, 0xFF	; 255
    6a14:	98 30       	cpi	r25, 0x08	; 8
    6a16:	c0 f3       	brcs	.-16     	; 0x6a08 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    6a18:	08 95       	ret

00006a1a <__tablejump2__>:
    6a1a:	ee 0f       	add	r30, r30
    6a1c:	ff 1f       	adc	r31, r31
    6a1e:	88 1f       	adc	r24, r24
    6a20:	8b bf       	out	0x3b, r24	; 59
    6a22:	07 90       	elpm	r0, Z+
    6a24:	f6 91       	elpm	r31, Z
    6a26:	e0 2d       	mov	r30, r0
    6a28:	19 94       	eijmp

00006a2a <eeprom_read_block>:
    6a2a:	dc 01       	movw	r26, r24
    6a2c:	cb 01       	movw	r24, r22

00006a2e <eeprom_read_blraw>:
    6a2e:	fc 01       	movw	r30, r24
    6a30:	f9 99       	sbic	0x1f, 1	; 31
    6a32:	fe cf       	rjmp	.-4      	; 0x6a30 <eeprom_read_blraw+0x2>
    6a34:	06 c0       	rjmp	.+12     	; 0x6a42 <eeprom_read_blraw+0x14>
    6a36:	f2 bd       	out	0x22, r31	; 34
    6a38:	e1 bd       	out	0x21, r30	; 33
    6a3a:	f8 9a       	sbi	0x1f, 0	; 31
    6a3c:	31 96       	adiw	r30, 0x01	; 1
    6a3e:	00 b4       	in	r0, 0x20	; 32
    6a40:	0d 92       	st	X+, r0
    6a42:	41 50       	subi	r20, 0x01	; 1
    6a44:	50 40       	sbci	r21, 0x00	; 0
    6a46:	b8 f7       	brcc	.-18     	; 0x6a36 <eeprom_read_blraw+0x8>
    6a48:	08 95       	ret

00006a4a <eeprom_read_byte>:
    6a4a:	f9 99       	sbic	0x1f, 1	; 31
    6a4c:	fe cf       	rjmp	.-4      	; 0x6a4a <eeprom_read_byte>
    6a4e:	92 bd       	out	0x22, r25	; 34
    6a50:	81 bd       	out	0x21, r24	; 33
    6a52:	f8 9a       	sbi	0x1f, 0	; 31
    6a54:	99 27       	eor	r25, r25
    6a56:	80 b5       	in	r24, 0x20	; 32
    6a58:	08 95       	ret

00006a5a <eeprom_read_word>:
    6a5a:	a8 e1       	ldi	r26, 0x18	; 24
    6a5c:	b0 e0       	ldi	r27, 0x00	; 0
    6a5e:	42 e0       	ldi	r20, 0x02	; 2
    6a60:	50 e0       	ldi	r21, 0x00	; 0
    6a62:	e5 cf       	rjmp	.-54     	; 0x6a2e <eeprom_read_blraw>

00006a64 <eeprom_update_block>:
    6a64:	dc 01       	movw	r26, r24
    6a66:	a4 0f       	add	r26, r20
    6a68:	b5 1f       	adc	r27, r21
    6a6a:	41 50       	subi	r20, 0x01	; 1
    6a6c:	50 40       	sbci	r21, 0x00	; 0
    6a6e:	40 f0       	brcs	.+16     	; 0x6a80 <eeprom_update_block+0x1c>
    6a70:	cb 01       	movw	r24, r22
    6a72:	84 0f       	add	r24, r20
    6a74:	95 1f       	adc	r25, r21
    6a76:	2e 91       	ld	r18, -X
    6a78:	05 d0       	rcall	.+10     	; 0x6a84 <eeprom_update_r18>
    6a7a:	41 50       	subi	r20, 0x01	; 1
    6a7c:	50 40       	sbci	r21, 0x00	; 0
    6a7e:	d8 f7       	brcc	.-10     	; 0x6a76 <eeprom_update_block+0x12>
    6a80:	08 95       	ret

00006a82 <eeprom_update_byte>:
    6a82:	26 2f       	mov	r18, r22

00006a84 <eeprom_update_r18>:
    6a84:	f9 99       	sbic	0x1f, 1	; 31
    6a86:	fe cf       	rjmp	.-4      	; 0x6a84 <eeprom_update_r18>
    6a88:	92 bd       	out	0x22, r25	; 34
    6a8a:	81 bd       	out	0x21, r24	; 33
    6a8c:	f8 9a       	sbi	0x1f, 0	; 31
    6a8e:	01 97       	sbiw	r24, 0x01	; 1
    6a90:	00 b4       	in	r0, 0x20	; 32
    6a92:	02 16       	cp	r0, r18
    6a94:	39 f0       	breq	.+14     	; 0x6aa4 <eeprom_update_r18+0x20>
    6a96:	1f ba       	out	0x1f, r1	; 31
    6a98:	20 bd       	out	0x20, r18	; 32
    6a9a:	0f b6       	in	r0, 0x3f	; 63
    6a9c:	f8 94       	cli
    6a9e:	fa 9a       	sbi	0x1f, 2	; 31
    6aa0:	f9 9a       	sbi	0x1f, 1	; 31
    6aa2:	0f be       	out	0x3f, r0	; 63
    6aa4:	08 95       	ret

00006aa6 <eeprom_update_word>:
    6aa6:	01 96       	adiw	r24, 0x01	; 1
    6aa8:	27 2f       	mov	r18, r23
    6aaa:	ec df       	rcall	.-40     	; 0x6a84 <eeprom_update_r18>
    6aac:	ea cf       	rjmp	.-44     	; 0x6a82 <eeprom_update_byte>

00006aae <_exit>:
    6aae:	f8 94       	cli

00006ab0 <__stop_program>:
    6ab0:	ff cf       	rjmp	.-2      	; 0x6ab0 <__stop_program>
