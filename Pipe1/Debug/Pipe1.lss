
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00007d96  00007e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d96  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000171a  00800228  00800228  00007e72  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007e72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008e72  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008ea4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b78  00000000  00000000  00008ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f6ee  00000000  00000000  00009a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026e3  00000000  00000000  0001914e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000905f  00000000  00000000  0001b831  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001cb0  00000000  00000000  00024890  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000035c3  00000000  00000000  00026540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009e76  00000000  00000000  00029b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f60  00000000  00000000  00033979  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 0a 	jmp	0x142e	; 0x142e <__ctors_end>
       4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
       8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
       c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      10:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      14:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      18:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      1c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      20:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      24:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      28:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      2c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      30:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      34:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      38:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      3c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      40:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      44:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      48:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      4c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      50:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      54:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__vector_21>
      58:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      5c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      60:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      64:	0c 94 73 39 	jmp	0x72e6	; 0x72e6 <__vector_25>
      68:	0c 94 b9 39 	jmp	0x7372	; 0x7372 <__vector_26>
      6c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      70:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      74:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      78:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      7c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      80:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      84:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      88:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      8c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      90:	0c 94 86 37 	jmp	0x6f0c	; 0x6f0c <__vector_36>
      94:	0c 94 db 37 	jmp	0x6fb6	; 0x6fb6 <__vector_37>
      98:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      9c:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      a0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      a4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      a8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      ac:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      b0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      b4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      b8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      bc:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      c0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      c4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      c8:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      cc:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      d0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      d4:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      d8:	0c 94 79 3a 	jmp	0x74f2	; 0x74f2 <__vector_54>
      dc:	0c 94 d1 3a 	jmp	0x75a2	; 0x75a2 <__vector_55>
      e0:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__bad_interrupt>
      e4:	23 22       	and	r2, r19
      e6:	2e 22       	and	r2, r30
      e8:	3a 22       	and	r3, r26
      ea:	56 22       	and	r5, r22
      ec:	73 22       	and	r7, r19
      ee:	94 22       	and	r9, r20
      f0:	9f 22       	and	r9, r31
      f2:	aa 22       	and	r10, r26
      f4:	bf 22       	and	r11, r31
      f6:	d5 22       	and	r13, r21
      f8:	dd 22       	and	r13, r29
      fa:	eb 22       	and	r14, r27
      fc:	bf 22       	and	r11, r31
      fe:	18 23       	and	r17, r24
     100:	28 23       	and	r18, r24
     102:	4c 23       	and	r20, r28
     104:	9e 23       	and	r25, r30
     106:	b7 23       	and	r27, r23
     108:	cc 23       	and	r28, r28
     10a:	e5 23       	and	r30, r21
     10c:	ed 23       	and	r30, r29
     10e:	12 24       	eor	r1, r2
     110:	12 24       	eor	r1, r2
     112:	2b 24       	eor	r2, r11
     114:	38 24       	eor	r3, r8
     116:	27 24       	eor	r2, r7
     118:	93 24       	eor	r9, r3
     11a:	9b 24       	eor	r9, r11
     11c:	e6 24       	eor	r14, r6
     11e:	48 25       	eor	r20, r8
     120:	72 25       	eor	r23, r2
     122:	9e 25       	eor	r25, r14
     124:	cd 25       	eor	r28, r13
     126:	d5 25       	eor	r29, r5
     128:	db 25       	eor	r29, r11
     12a:	93 24       	eor	r9, r3
     12c:	e3 25       	eor	r30, r3
     12e:	f7 25       	eor	r31, r7
     130:	db 25       	eor	r29, r11
     132:	35 26       	eor	r3, r21
     134:	42 26       	eor	r4, r18
     136:	4e 26       	eor	r4, r30
     138:	63 26       	eor	r6, r19
     13a:	7c 26       	eor	r7, r28
     13c:	9f 26       	eor	r9, r31
     13e:	aa 26       	eor	r10, r26
     140:	b0 26       	eor	r11, r16
     142:	b5 26       	eor	r11, r21
     144:	c8 26       	eor	r12, r24
     146:	e9 26       	eor	r14, r25
     148:	fc 26       	eor	r15, r28
     14a:	b5 26       	eor	r11, r21
     14c:	31 3d       	cpi	r19, 0xD1	; 209
     14e:	46 3d       	cpi	r20, 0xD6	; 214
     150:	34 3d       	cpi	r19, 0xD4	; 212
     152:	25 3d       	cpi	r18, 0xD5	; 213
     154:	37 3d       	cpi	r19, 0xD7	; 215
     156:	3a 3d       	cpi	r19, 0xDA	; 218
     158:	28 3d       	cpi	r18, 0xD8	; 216
     15a:	3d 3d       	cpi	r19, 0xDD	; 221
     15c:	2b 3d       	cpi	r18, 0xDB	; 219
     15e:	40 3d       	cpi	r20, 0xD0	; 208
     160:	2e 3d       	cpi	r18, 0xDE	; 222
     162:	43 3d       	cpi	r20, 0xD3	; 211

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWnone>:
     2b4:	6e 6f 6e 65 00                                      none.

000002b9 <usbHWmidiThru>:
     2b9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

000002c5 <usbHWmidiOut>:
     2c5:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

000002cf <usbHWmidiIn>:
     2cf:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

000002d8 <usbHWmidichanSW>:
     2d8:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2e8:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2f8:	20 00                                                .

000002fa <usbHWBits>:
     2fa:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000302 <usbHWmodule>:
     302:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000030a <usbHWempty>:
     30a:	65 6d 70 74 79 00                                   empty.

00000310 <usbHWRegister>:
     310:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000031c <usbHWRange>:
     31c:	52 61 6e 67 65 20 00                                Range .

00000323 <usbHWManual>:
     323:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000032c <usbHWmodulCheck>:
     32c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     33c:	20 00                                                .

0000033e <usbHWmodulInst>:
     33e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     34e:	3a 20 00                                            : .

00000351 <usbHWtitel>:
     351:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     361:	72 61 74 69 6f 6e 0d 0a 00                          ration...

0000036a <HelloMsg>:
     36a:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     37a:	65 72 66 61 63 65 0d 0a 00                          erface...

00000383 <usbLog>:
     383:	4c 6f 67 0d 0a 00                                   Log...

00000389 <usbEmpty>:
     389:	65 6d 70 74 79 0d 0a 00                             empty...

00000391 <msg_programming1>:
     391:	73 61 76 65 2e 2e 2e 00                             save....

00000399 <logNone>:
     399:	3c 6e 6f 6e 65 3e 00                                <none>.

000003a0 <stringNotAssigen>:
     3a0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003ab <menuMessageE>:
     3ab:	45 3a 00                                            E:.

000003ae <menuMessageOK>:
     3ae:	6f 6b 20 00                                         ok .

000003b2 <menuMessageAbort>:
     3b2:	61 62 6f 72 74 00                                   abort.

000003b8 <menuMessageMIDIpanic>:
     3b8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003c7 <messageRegisterMan>:
     3c7:	2b 00                                               +.

000003c9 <messageLoaded>:
     3c9:	20 52 65 67 00                                       Reg.

000003ce <messageSaved>:
     3ce:	20 52 65 67 20 7e 20 00                              Reg ~ .

000003d6 <MenuMIDIOutText>:
     3d6:	4f 75 74 3a 00                                      Out:.

000003db <MenuMIDIInText>:
     3db:	49 6e 3a 00                                         In:.

000003df <initMenuText>:
     3df:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003e9 <nibbleInfo>:
	...
     3f1:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     401:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     411:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     421:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     431:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     441:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     451:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     461:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000470 <menu_selFunc>:
     470:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 cc 07     ..<none>........
     480:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     490:	d6 07 c2 07 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     4a0:	6e 00 00 00 3a 0d b8 07 00 00 00 00 01 10 4b 6f     n...:.........Ko
     4b0:	70 70 65 6c 32 3c 33 00 00 00 9a 07 2e 20 00 00     ppel2<3...... ..
     4c0:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 90 07     ..Koppel1<3.....
     4d0:	31 20 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     1 ....KoppelP<3.
     4e0:	00 00 86 07 34 20 00 00 01 10 4b 6f 70 70 65 6c     ....4 ....Koppel
     4f0:	31 3c 32 00 00 00 7c 07 37 20 00 00 01 10 4b 6f     1<2...|.7 ....Ko
     500:	70 70 65 6c 50 3c 32 00 00 00 72 07 3a 20 00 00     ppelP<2...r.: ..
     510:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 68 07     ..KoppelP<1...h.
     520:	3d 20 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     = ....Koppel3<2.
     530:	00 00 5e 07 40 20 00 00 01 10 4b 6f 70 70 65 6c     ..^.@ ....Koppel
     540:	33 3c 31 00 00 00 54 07 43 20 00 00 01 10 4b 6f     3<1...T.C ....Ko
     550:	70 70 65 6c 33 3c 50 00 00 00 4a 07 46 20 00 00     ppel3<P...J.F ..
     560:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 40 07     ..Koppel2<1...@.
     570:	49 20 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     I ....Koppel2<P.
     580:	00 00 36 07 4c 20 00 00 01 10 4b 6f 70 70 65 6c     ..6.L ....Koppel
     590:	31 3c 50 00 00 00 2c 07 4f 20 00 00 01 10 50 72     1<P...,.O ....Pr
     5a0:	2e 2b 2f 73 65 74 00 00 00 00 fa 06 f8 20 00 00     .+/set....... ..
     5b0:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 f0 06     ..Pr.-/clr......
     5c0:	17 21 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     .!....Prog. 1A..
     5d0:	00 00 22 07 dc 20 00 00 01 10 50 72 6f 67 2e 20     ..".. ....Prog. 
     5e0:	32 41 00 00 00 00 18 07 df 20 00 00 01 10 50 72     2A....... ....Pr
     5f0:	6f 67 2e 20 33 41 00 00 00 00 0e 07 e2 20 00 00     og. 3A....... ..
     600:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 04 07     ..Prog. 4A......
     610:	e5 20 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     . ....Prog.clr..
     620:	00 00 b4 06 62 1b 00 00 01 10 50 72 6f 67 2e 73     ....b.....Prog.s
     630:	65 74 00 00 00 00 be 06 66 20 00 00 01 10 50 72     et......f ....Pr
     640:	6f 67 2e 2b 00 00 00 00 00 00 e6 06 2f 21 00 00     og.+......../!..
     650:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 dc 06     ..Prog.-........
     660:	4b 21 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     K!....PrBank+...
     670:	00 00 d2 06 67 21 00 00 01 10 50 72 42 61 6e 6b     ....g!....PrBank
     680:	2e 2d 00 00 00 00 c8 06 72 21 00 00 01 10 4d 49     .-......r!....MI
     690:	44 49 20 4f 66 66 00 00 00 00 a4 07 a2 28 00 00     DI Off.......(..
     6a0:	c1 10 53 65 74 75 70 00 00 00 00 00 2a 0e ae 07     ..Setup.....*...
     6b0:	00 00 00 00                                         ....

000006b4 <shortKeyTextRegOff>:
     6b4:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

000006be <shortKeyTextPRS>:
     6be:	50 73 65 74 00 00 00 00 00 00                       Pset......

000006c8 <shortKeyTextPBD>:
     6c8:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

000006d2 <shortKeyTextPBI>:
     6d2:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

000006dc <shortKeyTextPRD>:
     6dc:	50 2d 00 00 00 00 00 00 00 00                       P-........

000006e6 <shortKeyTextPRI>:
     6e6:	50 2b 00 00 00 00 00 00 00 00                       P+........

000006f0 <shortKeyTextPRM>:
     6f0:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

000006fa <shortKeyTextPRP>:
     6fa:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000704 <shortKeyTextK4A>:
     704:	50 41 34 00 00 00 00 00 00 00                       PA4.......

0000070e <shortKeyTextK3A>:
     70e:	50 41 33 00 00 00 00 00 00 00                       PA3.......

00000718 <shortKeyTextK2A>:
     718:	50 41 32 00 00 00 00 00 00 00                       PA2.......

00000722 <shortKeyTextK1A>:
     722:	50 41 31 00 00 00 00 00 00 00                       PA1.......

0000072c <shortKeyTextCpl1P>:
     72c:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000736 <shortKeyTextCpl2P>:
     736:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000740 <shortKeyTextCpl21>:
     740:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000074a <shortKeyTextCpl3P>:
     74a:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000754 <shortKeyTextCpl31>:
     754:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000075e <shortKeyTextCpl32>:
     75e:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000768 <shortKeyTextCplP1>:
     768:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

00000772 <shortKeyTextCplP2>:
     772:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

0000077c <shortKeyTextCpl12>:
     77c:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

00000786 <shortKeyTextCplP3>:
     786:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

00000790 <shortKeyTextCpl13>:
     790:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

0000079a <shortKeyTextCpl23>:
     79a:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000007a4 <shortKeyTextMIDIoff>:
     7a4:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000007ae <shortKeyTextSetup>:
     7ae:	53 65 74 75 00 00 00 00 00 00                       Setu......

000007b8 <shortKeyTextStim>:
     7b8:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000007c2 <shortKeyTextMenu>:
     7c2:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000007cc <shortKeyTextNone>:
	...

000007d6 <menu_main>:
     7d6:	81 00 4d 61 6e 75 61 6c 00 00 00 00 4e 08 00 00     ..Manual....N...
     7e6:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     7f6:	76 08 00 00 ea 1f 00 00 01 00 4d 49 44 49 00 00     v.........MIDI..
     806:	00 00 00 00 42 0a 00 00 00 00 00 00 01 00 54 61     ....B.........Ta
     816:	73 74 65 6e 00 00 00 00 ea 0c 00 00 00 00 85 1b     sten............
     826:	01 00 53 74 61 74 75 73 00 00 00 00 16 13 00 00     ..Status........
     836:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     846:	2a 0e 00 00 00 00 00 00                             *.......

0000084e <menu_manual>:
     84e:	81 00 4b 6f 70 70 65 6c 00 00 00 00 52 09 00 00     ..Koppel....R...
     85e:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     86e:	3a 0d 00 00 00 00 00 00                             :.......

00000876 <menu_register>:
     876:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 c9 05     ..Prog.lad......
     886:	00 00 f7 1f 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ......Prog.sp...
     896:	00 00 c9 05 00 00 7a 1b 01 00 61 75 73 00 00 00     ......z...aus...
	...
     8ae:	f1 1f 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     8be:	00 00 8e 05 00 00 3a 1b 0e 00 52 65 67 2e 39 2d     ......:...Reg.9-
     8ce:	31 36 00 00 00 00 8f 05 00 00 3a 1b 0e 00 52 65     16........:...Re
     8de:	67 2e 31 37 2d 32 34 00 00 00 90 05 00 00 3a 1b     g.17-24.......:.
     8ee:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 91 05     ..Reg.25-32.....
     8fe:	00 00 3a 1b 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..:...Reg.33-40.
     90e:	00 00 92 05 00 00 3a 1b 0e 00 52 65 67 2e 34 31     ......:...Reg.41
     91e:	2d 34 38 00 00 00 93 05 00 00 3a 1b 0e 00 52 65     -48.......:...Re
     92e:	67 2e 34 39 2d 35 34 00 00 00 94 05 00 00 3a 1b     g.49-54.......:.
     93e:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 95 05     ..Reg.55-64.....
     94e:	00 00 3a 1b                                         ..:.

00000952 <menu_coupler>:
     952:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 32 08     ..2<3.........2.
     962:	00 00 67 1b 09 00 31 3c 33 00 00 00 00 00 00 00     ..g...1<3.......
     972:	00 00 33 08 00 00 67 1b 09 00 31 3c 32 00 00 00     ..3...g...1<2...
     982:	00 00 00 00 00 00 34 08 00 00 67 1b 09 00 50 3c     ......4...g...P<
     992:	33 00 00 00 00 00 00 00 00 00 35 08 00 00 67 1b     3.........5...g.
     9a2:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 36 08     ..P<2.........6.
     9b2:	00 00 67 1b 09 00 50 3c 31 00 00 00 00 00 00 00     ..g...P<1.......
     9c2:	00 00 37 08 00 00 67 1b 09 00 33 3c 32 00 00 00     ..7...g...3<2...
     9d2:	00 00 00 00 00 00 38 08 00 00 67 1b 09 00 33 3c     ......8...g...3<
     9e2:	31 00 00 00 00 00 00 00 00 00 39 08 00 00 67 1b     1.........9...g.
     9f2:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 3a 08     ..3<P.........:.
     a02:	00 00 67 1b 09 00 32 3c 31 00 00 00 00 00 00 00     ..g...2<1.......
     a12:	00 00 3b 08 00 00 67 1b 09 00 32 3c 50 00 00 00     ..;...g...2<P...
     a22:	00 00 00 00 00 00 3c 08 00 00 67 1b c9 00 31 3c     ......<...g...1<
     a32:	50 00 00 00 00 00 00 00 00 00 3d 08 00 00 67 1b     P.........=...g.

00000a42 <menu_midi>:
     a42:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     a52:	a2 28 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .(....MIDIin....
     a62:	0a 0b 00 00 00 00 fd 1c 01 00 4d 49 44 49 6f 75     ..........MIDIou
     a72:	74 00 00 00 8a 0d 00 00 00 00 f9 1c 03 10 54 68     t.............Th
     a82:	72 75 2d 49 6e 00 00 00 00 00 47 08 00 00 36 1b     ru-In.....G...6.
     a92:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 48 08     ..Thru-Out....H.
     aa2:	00 00 36 1b 09 00 41 63 63 65 70 74 20 50 43 00     ..6...Accept PC.
     ab2:	00 00 53 09 00 00 f5 1c 09 00 41 63 74 2e 53 65     ..S.......Act.Se
     ac2:	6e 73 65 00 00 00 51 09 00 00 f5 1c 09 00 56 65     nse...Q.......Ve
     ad2:	6c 5a 34 4f 66 66 00 00 00 00 52 09 00 00 f5 1c     lZ4Off....R.....
     ae2:	06 08 52 78 42 75 66 55 73 65 00 00 00 00 62 15     ..RxBufUse....b.
     af2:	00 00 00 00 c6 08 54 78 42 75 66 55 73 65 00 00     ......TxBufUse..
     b02:	00 00 6b 16 00 00 00 00                             ..k.....

00000b0a <menu_midiIn>:
     b0a:	81 00 43 68 2e 31 00 00 00 00 00 00 4a 0c 00 00     ..Ch.1......J...
     b1a:	97 1a 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     b2a:	4a 0c 01 00 97 1a 00 00 01 00 43 68 2e 33 00 00     J.........Ch.3..
     b3a:	00 00 00 00 4a 0c 02 00 97 1a 00 00 01 00 43 68     ....J.........Ch
     b4a:	2e 34 00 00 00 00 00 00 4a 0c 03 00 97 1a 00 00     .4......J.......
     b5a:	01 00 43 68 2e 35 00 00 00 00 00 00 4a 0c 04 00     ..Ch.5......J...
     b6a:	97 1a 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     b7a:	4a 0c 05 00 97 1a 00 00 01 00 43 68 2e 37 00 00     J.........Ch.7..
     b8a:	00 00 00 00 4a 0c 06 00 97 1a 00 00 01 00 43 68     ....J.........Ch
     b9a:	2e 38 00 00 00 00 00 00 4a 0c 07 00 97 1a 00 00     .8......J.......
     baa:	01 00 43 68 2e 39 00 00 00 00 00 00 4a 0c 08 00     ..Ch.9......J...
     bba:	97 1a 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     bca:	4a 0c 09 00 97 1a 00 00 01 00 43 68 2e 31 31 00     J.........Ch.11.
     bda:	00 00 00 00 4a 0c 0a 00 97 1a 00 00 01 00 43 68     ....J.........Ch
     bea:	2e 31 32 00 00 00 00 00 4a 0c 0b 00 97 1a 00 00     .12.....J.......
     bfa:	01 00 43 68 2e 31 33 00 00 00 00 00 4a 0c 0c 00     ..Ch.13.....J...
     c0a:	97 1a 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     c1a:	4a 0c 0d 00 97 1a 00 00 01 00 43 68 2e 31 35 00     J.........Ch.15.
     c2a:	00 00 00 00 4a 0c 0e 00 97 1a 00 00 c1 00 43 68     ....J.........Ch
     c3a:	2e 31 36 00 00 00 00 00 4a 0c 0f 00 97 1a 00 00     .16.....J.......

00000c4a <menu_midiInSec>:
     c4a:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 0c 00 00     ..Sect.1........
     c5a:	a2 1a 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     c6a:	9a 0c 01 00 a2 1a 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     c7a:	00 00 00 00 9a 0c 02 00 a2 1a 00 00 c1 00 53 65     ..............Se
     c8a:	63 74 2e 34 00 00 00 00 9a 0c 03 00 a2 1a 00 00     ct.4............

00000c9a <menu_midiInVar>:
     c9a:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 49 08     ..Manual......I.
     caa:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     cba:	00 00 4a 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..J.......Range.
     cca:	00 00 00 00 00 00 4b 08 00 00 00 00 c4 90 4d 61     ......K.......Ma
     cda:	6e 4e 6f 74 65 00 00 00 00 00 4c 08 00 00 00 00     nNote.....L.....

00000cea <menu_key>:
     cea:	81 08 54 61 73 74 65 31 00 00 00 00 70 04 00 00     ..Taste1....p...
     cfa:	1b 1b 45 2d 01 08 54 61 73 74 65 32 00 00 00 00     ..E-..Taste2....
     d0a:	70 04 01 00 1b 1b 45 2d 01 08 54 61 73 74 65 33     p.....E-..Taste3
     d1a:	00 00 00 00 70 04 02 00 1b 1b 45 2d c1 08 54 61     ....p.....E-..Ta
     d2a:	73 74 65 34 00 00 00 00 70 04 03 00 1b 1b 45 2d     ste4....p.....E-

00000d3a <menu_tune>:
     d3a:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     d4a:	cf 1b 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     d5a:	00 00 01 00 cf 1b 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     d6a:	00 00 00 00 00 00 02 00 cf 1b 00 00 c1 20 50 65     ............. Pe
     d7a:	64 61 6c 00 00 00 00 00 00 00 03 00 cf 1b 00 00     dal.............

00000d8a <menu_midiOut>:
     d8a:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 49 09     ..III.........I.
     d9a:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     daa:	00 00 4b 09 00 00 00 00 03 10 49 00 00 00 00 00     ..K.......I.....
     dba:	00 00 00 00 00 00 4d 09 00 00 00 00 03 10 50 00     ......M.......P.
	...
     dd2:	00 00 4f 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..O.......III(in
     de2:	74 29 00 00 00 00 4a 09 00 00 00 00 03 10 49 49     t)....J.......II
     df2:	28 69 6e 74 29 00 00 00 00 00 4c 09 00 00 00 00     (int).....L.....
     e02:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 4e 09     ..I(int)......N.
     e12:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     e22:	00 00 50 09 00 00 00 00                             ..P.....

00000e2a <menu_setup>:
     e2a:	81 00 4d 6f 64 75 6c 65 00 00 00 00 f6 0f 00 00     ..Module........
     e3a:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     e4a:	8e 0e 00 00 00 00 32 1b 01 00 55 53 42 00 00 00     ......2...USB...
     e5a:	00 00 00 00 66 13 00 00 00 00 00 00 01 00 50 6f     ....f.........Po
     e6a:	77 65 72 00 00 00 00 00 ba 0f 00 00 00 00 00 00     wer.............
     e7a:	c1 00 45 45 70 72 6f 6d 00 00 00 00 7e 0f 00 00     ..EEprom....~...
     e8a:	00 00 00 00                                         ....

00000e8e <menu_regout>:
     e8e:	81 00 53 65 63 74 2e 31 00 00 00 00 2e 0f 00 00     ..Sect.1........
     e9e:	06 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     eae:	2e 0f 01 00 06 1b 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     ebe:	00 00 00 00 2e 0f 02 00 06 1b 00 00 01 00 53 65     ..............Se
     ece:	63 74 2e 34 00 00 00 00 2e 0f 03 00 06 1b 00 00     ct.4............
     ede:	01 00 53 65 63 74 2e 35 00 00 00 00 2e 0f 04 00     ..Sect.5........
     eee:	06 1b 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
     efe:	2e 0f 05 00 06 1b 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
     f0e:	00 00 00 00 2e 0f 06 00 06 1b 00 00 c1 00 53 65     ..............Se
     f1e:	63 74 2e 38 00 00 00 00 2e 0f 07 00 06 1b 00 00     ct.8............

00000f2e <menu_regoutSec>:
     f2e:	82 80 43 75 72 73 6f 72 00 00 00 00 00 00 00 02     ..Cursor........
     f3e:	00 00 00 00 02 80 43 68 61 72 00 00 00 00 00 00     ......Char......
     f4e:	00 00 01 02 00 00 00 00 0d 80 52 65 67 42 65 67     ..........RegBeg
     f5e:	00 00 00 00 00 00 02 02 00 00 00 00 cd 80 52 65     ..............Re
     f6e:	67 45 6e 64 00 00 00 00 00 00 03 02 00 00 00 00     gEnd............

00000f7e <menu_eeprom>:
     f7e:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     f8e:	9a 21 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     .!....EEBackup..
     f9e:	00 00 00 00 82 21 00 00 c1 00 45 45 52 65 73 74     .....!....EERest
     fae:	6f 72 65 00 00 00 00 00 8e 21 00 00                 ore......!..

00000fba <menu_Power>:
     fba:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     fca:	09 2e 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     ......PowerOff..
     fda:	00 00 00 00 12 2e 00 00 c1 00 50 2e 52 65 73 74     ..........P.Rest
     fea:	61 72 74 00 00 00 00 00 1a 2e 00 00                 art.........

00000ff6 <menu_module>:
     ff6:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 75 03     ..ModRead.....u.
    1006:	00 00 0b 1d 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
    1016:	00 00 76 03 00 00 0b 1d 0a 08 4d 6f 64 4f 4b 00     ..v.......ModOK.
    1026:	00 00 00 00 00 00 68 02 00 00 00 00 01 00 4d 6f     ......h.......Mo
    1036:	64 54 65 73 74 00 00 00 5a 10 00 00 00 00 00 00     dTest...Z.......
    1046:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 4a 11 00 00     ..ModAssign.J...
    1056:	00 00 01 1d                                         ....

0000105a <menu_ModeSel>:
    105a:	81 00 4d 6f 64 2e 30 00 00 00 00 00 fa 10 00 00     ..Mod.0.........
    106a:	8c 1a 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
    107a:	fa 10 01 00 8c 1a 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
    108a:	00 00 00 00 fa 10 02 00 8c 1a 00 00 01 00 4d 6f     ..............Mo
    109a:	64 2e 33 00 00 00 00 00 fa 10 03 00 8c 1a 00 00     d.3.............
    10aa:	01 00 4d 6f 64 2e 34 00 00 00 00 00 fa 10 04 00     ..Mod.4.........
    10ba:	8c 1a 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
    10ca:	fa 10 05 00 8c 1a 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
    10da:	00 00 00 00 fa 10 06 00 8c 1a 00 00 c1 00 4d 6f     ..............Mo
    10ea:	64 2e 37 00 00 00 00 00 fa 10 07 00 8c 1a 00 00     d.7.............

000010fa <menu_ModTestSelcted>:
    10fa:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    110a:	89 1b 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
    111a:	00 00 ce 05 23 1a 5f 1a 01 00 54 65 73 74 50 74     ....#._...TestPt
    112a:	72 6e 00 00 00 00 00 00 a0 29 00 00 c1 00 4c 6f     rn.......)....Lo
    113a:	6f 70 54 73 74 00 00 00 00 00 00 00 bd 1b 00 00     opTst...........

0000114a <menu_modAssign>:
    114a:	81 00 4d 61 6e 2e 33 00 00 00 00 00 4e 12 00 00     ..Man.3.....N...
    115a:	c0 1a 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
    116a:	4e 12 01 00 c0 1a 00 00 01 00 4d 61 6e 2e 31 00     N.........Man.1.
    117a:	00 00 00 00 4e 12 02 00 c0 1a 00 00 01 00 50 65     ....N.........Pe
    118a:	64 61 6c 00 00 00 00 00 4e 12 03 00 c0 1a 00 00     dal.....N.......
    119a:	c1 00 52 65 67 69 73 74 65 72 00 00 ae 11 04 00     ..Register......
    11aa:	00 00 00 00                                         ....

000011ae <menu_modSection8>:
    11ae:	81 00 53 65 63 74 2e 31 00 00 00 00 9e 12 00 00     ..Sect.1........
    11be:	f0 1a 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    11ce:	9e 12 01 00 f0 1a 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    11de:	00 00 00 00 9e 12 02 00 f0 1a 00 00 01 00 53 65     ..............Se
    11ee:	63 74 2e 34 00 00 00 00 9e 12 03 00 f0 1a 00 00     ct.4............
    11fe:	01 00 53 65 63 74 2e 35 00 00 00 00 9e 12 04 00     ..Sect.5........
    120e:	f0 1a 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    121e:	9e 12 05 00 f0 1a 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
    122e:	00 00 00 00 9e 12 06 00 f0 1a 00 00 c1 00 53 65     ..............Se
    123e:	63 74 2e 38 00 00 00 00 9e 12 07 00 f0 1a 00 00     ct.8............

0000124e <menu_modSection>:
    124e:	81 00 53 65 63 74 2e 31 00 00 00 00 da 12 00 00     ..Sect.1........
    125e:	cb 1a 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    126e:	da 12 01 00 cb 1a 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    127e:	00 00 00 00 da 12 02 00 cb 1a 00 00 c1 00 53 65     ..............Se
    128e:	63 74 2e 34 00 00 00 00 da 12 03 00 cb 1a 00 00     ct.4............

0000129e <menu_modDefineReg>:
    129e:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 18 08     ..RegBeg........
    12ae:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    12be:	00 00 19 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    12ce:	2f 42 69 74 00 00 1a 08 00 00 00 00                 /Bit........

000012da <menu_modDefine>:
    12da:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 55 09     ..NoteBeg.....U.
    12ea:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    12fa:	00 00 56 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..V.......Module
    130a:	2f 42 69 74 00 00 57 09 00 00 00 00                 /Bit..W.....

00001316 <menu_status>:
    1316:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1326:	f9 27 00 00 01 00 55 53 42 00 00 00 00 00 00 00     .'....USB.......
    1336:	66 13 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     f........@MIDI-I
    1346:	6e 00 00 00 00 00 00 00 7d 27 00 00 c2 40 4d 49     n.......}'...@MI
    1356:	44 49 2d 4f 75 74 00 00 00 00 00 00 bb 27 00 00     DI-Out.......'..

00001366 <menu_USBser>:
    1366:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 73 16     ..EventLog....s.
    1376:	00 00 35 1d 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..5...SendLog...
    1386:	00 00 00 00 0f 1d 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
    1396:	66 67 00 00 00 00 00 00 49 1d 00 00                 fg......I...

000013a2 <sw_version>:
    13a2:	56 30 2e 37 35 00                                   V0.75.

000013a8 <cplInfo>:
    13a8:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    13b8:	01 02 00 03 01 03 02 03                             ........

000013c0 <keylabel_1>:
    13c0:	31 00                                               1.

000013c2 <keylabel_0>:
    13c2:	30 00                                               0.

000013c4 <keylabel_text>:
    13c4:	54 65 78 74 80 00                                   Text..

000013ca <keylabel_exit>:
    13ca:	45 78 69 74 00                                      Exit.

000013cf <keylabel_off>:
    13cf:	7e 61 75 73 00                                      ~aus.

000013d4 <keylabel_on>:
    13d4:	7e 65 69 6e 00                                      ~ein.

000013d9 <keylabel_onoff>:
    13d9:	45 69 6e 80 00                                      Ein..

000013de <keylabel_minus>:
    13de:	2d 00                                               -.

000013e0 <keylabel_plus>:
    13e0:	2b 00                                               +.

000013e2 <keylabel_left>:
    13e2:	7f 00                                               ..

000013e4 <keylabel_right>:
    13e4:	7e 00                                               ~.

000013e6 <keylabel_down>:
    13e6:	09 00                                               ..

000013e8 <keylabel_up>:
    13e8:	08 00                                               ..

000013ea <cgPattern_RegOnOn>:
    13ea:	1b 1b 1b 1b 1b 1b 1b 00                             ........

000013f2 <cgPattern_RegOnOff>:
    13f2:	1b 1b 18 18 18 18 18 00                             ........

000013fa <cgPattern_RegOffOn>:
    13fa:	1b 1b 03 03 03 03 03 00                             ........

00001402 <cgPattern_RegOffOff>:
    1402:	1b 1b 00 00 00 00 00 00                             ........

0000140a <cgPattern_RegOn>:
    140a:	18 18 18 18 18 18 18 00                             ........

00001412 <cgPattern_RegOff>:
    1412:	18 18 00 00 00 00 00 00                             ........

0000141a <cgPattern_Down>:
    141a:	04 04 04 04 15 0e 04 00                             ........

00001422 <cgPattern_Up>:
    1422:	04 0e 15 04 04 04 04 00                             ........

0000142a <cr_lf>:
    142a:	0d 0a 00 00                                         ....

0000142e <__ctors_end>:
    142e:	11 24       	eor	r1, r1
    1430:	1f be       	out	0x3f, r1	; 63
    1432:	cf ef       	ldi	r28, 0xFF	; 255
    1434:	d1 e2       	ldi	r29, 0x21	; 33
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	00 e0       	ldi	r16, 0x00	; 0
    143c:	0c bf       	out	0x3c, r16	; 60

0000143e <__do_copy_data>:
    143e:	12 e0       	ldi	r17, 0x02	; 2
    1440:	a0 e0       	ldi	r26, 0x00	; 0
    1442:	b2 e0       	ldi	r27, 0x02	; 2
    1444:	e6 e9       	ldi	r30, 0x96	; 150
    1446:	fd e7       	ldi	r31, 0x7D	; 125
    1448:	00 e0       	ldi	r16, 0x00	; 0
    144a:	0b bf       	out	0x3b, r16	; 59
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <__do_copy_data+0x14>
    144e:	07 90       	elpm	r0, Z+
    1450:	0d 92       	st	X+, r0
    1452:	a8 32       	cpi	r26, 0x28	; 40
    1454:	b1 07       	cpc	r27, r17
    1456:	d9 f7       	brne	.-10     	; 0x144e <__do_copy_data+0x10>

00001458 <__do_clear_bss>:
    1458:	29 e1       	ldi	r18, 0x19	; 25
    145a:	a8 e2       	ldi	r26, 0x28	; 40
    145c:	b2 e0       	ldi	r27, 0x02	; 2
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <.do_clear_bss_start>

00001460 <.do_clear_bss_loop>:
    1460:	1d 92       	st	X+, r1

00001462 <.do_clear_bss_start>:
    1462:	a2 34       	cpi	r26, 0x42	; 66
    1464:	b2 07       	cpc	r27, r18
    1466:	e1 f7       	brne	.-8      	; 0x1460 <.do_clear_bss_loop>
    1468:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <main>
    146c:	0c 94 c9 3e 	jmp	0x7d92	; 0x7d92 <_exit>

00001470 <__bad_interrupt>:
    1470:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001474 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    1474:	fc 01       	movw	r30, r24
    1476:	8f ef       	ldi	r24, 0xFF	; 255
    1478:	9f ef       	ldi	r25, 0xFF	; 255
    147a:	1c c0       	rjmp	.+56     	; 0x14b4 <crc16_ram+0x40>
    147c:	df 01       	movw	r26, r30
    147e:	11 96       	adiw	r26, 0x01	; 1
    1480:	20 81       	ld	r18, Z
    1482:	82 27       	eor	r24, r18
    1484:	28 2f       	mov	r18, r24
    1486:	22 95       	swap	r18
    1488:	28 27       	eor	r18, r24
    148a:	02 2e       	mov	r0, r18
    148c:	26 95       	lsr	r18
    148e:	26 95       	lsr	r18
    1490:	20 25       	eor	r18, r0
    1492:	02 2e       	mov	r0, r18
    1494:	26 95       	lsr	r18
    1496:	20 25       	eor	r18, r0
    1498:	27 70       	andi	r18, 0x07	; 7
    149a:	08 2e       	mov	r0, r24
    149c:	89 2f       	mov	r24, r25
    149e:	26 95       	lsr	r18
    14a0:	07 94       	ror	r0
    14a2:	27 95       	ror	r18
    14a4:	90 2d       	mov	r25, r0
    14a6:	82 27       	eor	r24, r18
    14a8:	06 94       	lsr	r0
    14aa:	27 95       	ror	r18
    14ac:	90 25       	eor	r25, r0
    14ae:	82 27       	eor	r24, r18
    14b0:	ba 01       	movw	r22, r20
    14b2:	fd 01       	movw	r30, r26
    14b4:	ab 01       	movw	r20, r22
    14b6:	41 50       	subi	r20, 0x01	; 1
    14b8:	51 09       	sbc	r21, r1
    14ba:	67 2b       	or	r22, r23
    14bc:	f9 f6       	brne	.-66     	; 0x147c <crc16_ram+0x8>
    14be:	08 95       	ret

000014c0 <crc16_eeprom>:
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cf ef       	ldi	r28, 0xFF	; 255
    14ce:	df ef       	ldi	r29, 0xFF	; 255
    14d0:	21 c0       	rjmp	.+66     	; 0x1514 <crc16_eeprom+0x54>
    14d2:	7c 01       	movw	r14, r24
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	e2 1a       	sub	r14, r18
    14d8:	f2 0a       	sbc	r15, r18
    14da:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    14de:	9e 01       	movw	r18, r28
    14e0:	28 27       	eor	r18, r24
    14e2:	82 2f       	mov	r24, r18
    14e4:	82 95       	swap	r24
    14e6:	82 27       	eor	r24, r18
    14e8:	08 2e       	mov	r0, r24
    14ea:	86 95       	lsr	r24
    14ec:	86 95       	lsr	r24
    14ee:	80 25       	eor	r24, r0
    14f0:	08 2e       	mov	r0, r24
    14f2:	86 95       	lsr	r24
    14f4:	80 25       	eor	r24, r0
    14f6:	87 70       	andi	r24, 0x07	; 7
    14f8:	02 2e       	mov	r0, r18
    14fa:	23 2f       	mov	r18, r19
    14fc:	86 95       	lsr	r24
    14fe:	07 94       	ror	r0
    1500:	87 95       	ror	r24
    1502:	30 2d       	mov	r19, r0
    1504:	28 27       	eor	r18, r24
    1506:	06 94       	lsr	r0
    1508:	87 95       	ror	r24
    150a:	30 25       	eor	r19, r0
    150c:	28 27       	eor	r18, r24
    150e:	e9 01       	movw	r28, r18
    1510:	b8 01       	movw	r22, r16
    1512:	c7 01       	movw	r24, r14
    1514:	8b 01       	movw	r16, r22
    1516:	01 50       	subi	r16, 0x01	; 1
    1518:	11 09       	sbc	r17, r1
    151a:	67 2b       	or	r22, r23
    151c:	d1 f6       	brne	.-76     	; 0x14d2 <crc16_eeprom+0x12>
    151e:	ce 01       	movw	r24, r28
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	08 95       	ret

0000152e <crc16_ram_startVal>:
    152e:	fc 01       	movw	r30, r24
    1530:	ca 01       	movw	r24, r20
    1532:	1c c0       	rjmp	.+56     	; 0x156c <crc16_ram_startVal+0x3e>
    1534:	df 01       	movw	r26, r30
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	20 81       	ld	r18, Z
    153a:	82 27       	eor	r24, r18
    153c:	28 2f       	mov	r18, r24
    153e:	22 95       	swap	r18
    1540:	28 27       	eor	r18, r24
    1542:	02 2e       	mov	r0, r18
    1544:	26 95       	lsr	r18
    1546:	26 95       	lsr	r18
    1548:	20 25       	eor	r18, r0
    154a:	02 2e       	mov	r0, r18
    154c:	26 95       	lsr	r18
    154e:	20 25       	eor	r18, r0
    1550:	27 70       	andi	r18, 0x07	; 7
    1552:	08 2e       	mov	r0, r24
    1554:	89 2f       	mov	r24, r25
    1556:	26 95       	lsr	r18
    1558:	07 94       	ror	r0
    155a:	27 95       	ror	r18
    155c:	90 2d       	mov	r25, r0
    155e:	82 27       	eor	r24, r18
    1560:	06 94       	lsr	r0
    1562:	27 95       	ror	r18
    1564:	90 25       	eor	r25, r0
    1566:	82 27       	eor	r24, r18
    1568:	ba 01       	movw	r22, r20
    156a:	fd 01       	movw	r30, r26
    156c:	ab 01       	movw	r20, r22
    156e:	41 50       	subi	r20, 0x01	; 1
    1570:	51 09       	sbc	r21, r1
    1572:	67 2b       	or	r22, r23
    1574:	f9 f6       	brne	.-66     	; 0x1534 <crc16_ram_startVal+0x6>
    1576:	08 95       	ret

00001578 <crc16_eeprom_startVal>:
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	ea 01       	movw	r28, r20
    1586:	21 c0       	rjmp	.+66     	; 0x15ca <crc16_eeprom_startVal+0x52>
    1588:	7c 01       	movw	r14, r24
    158a:	2f ef       	ldi	r18, 0xFF	; 255
    158c:	e2 1a       	sub	r14, r18
    158e:	f2 0a       	sbc	r15, r18
    1590:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    1594:	ae 01       	movw	r20, r28
    1596:	48 27       	eor	r20, r24
    1598:	84 2f       	mov	r24, r20
    159a:	82 95       	swap	r24
    159c:	84 27       	eor	r24, r20
    159e:	08 2e       	mov	r0, r24
    15a0:	86 95       	lsr	r24
    15a2:	86 95       	lsr	r24
    15a4:	80 25       	eor	r24, r0
    15a6:	08 2e       	mov	r0, r24
    15a8:	86 95       	lsr	r24
    15aa:	80 25       	eor	r24, r0
    15ac:	87 70       	andi	r24, 0x07	; 7
    15ae:	04 2e       	mov	r0, r20
    15b0:	45 2f       	mov	r20, r21
    15b2:	86 95       	lsr	r24
    15b4:	07 94       	ror	r0
    15b6:	87 95       	ror	r24
    15b8:	50 2d       	mov	r21, r0
    15ba:	48 27       	eor	r20, r24
    15bc:	06 94       	lsr	r0
    15be:	87 95       	ror	r24
    15c0:	50 25       	eor	r21, r0
    15c2:	48 27       	eor	r20, r24
    15c4:	ea 01       	movw	r28, r20
    15c6:	b8 01       	movw	r22, r16
    15c8:	c7 01       	movw	r24, r14
    15ca:	8b 01       	movw	r16, r22
    15cc:	01 50       	subi	r16, 0x01	; 1
    15ce:	11 09       	sbc	r17, r1
    15d0:	67 2b       	or	r22, r23
    15d2:	d1 f6       	brne	.-76     	; 0x1588 <crc16_eeprom_startVal+0x10>
    15d4:	ce 01       	movw	r24, r28
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	08 95       	ret

000015e4 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    15e8:	82 e3       	ldi	r24, 0x32	; 50
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    15f0:	ec 01       	movw	r28, r24
    15f2:	60 e3       	ldi	r22, 0x30	; 48
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	82 e0       	ldi	r24, 0x02	; 2
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	62 df       	rcall	.-316    	; 0x14c0 <crc16_eeprom>
    15fc:	c8 17       	cp	r28, r24
    15fe:	d9 07       	cpc	r29, r25
    1600:	81 f4       	brne	.+32     	; 0x1622 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    160a:	8d 34       	cpi	r24, 0x4D	; 77
    160c:	51 f4       	brne	.+20     	; 0x1622 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    160e:	40 e3       	ldi	r20, 0x30	; 48
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	85 e5       	ldi	r24, 0x55	; 85
    1618:	99 e0       	ldi	r25, 0x09	; 9
    161a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return (EE_LOAD_OK);
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	06 c0       	rjmp	.+12     	; 0x162e <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    1622:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    162c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	08 95       	ret

00001634 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    1638:	85 e3       	ldi	r24, 0x35	; 53
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    1640:	ec 01       	movw	r28, r24
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	71 e0       	ldi	r23, 0x01	; 1
    1646:	85 e3       	ldi	r24, 0x35	; 53
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	3a df       	rcall	.-396    	; 0x14c0 <crc16_eeprom>
    164c:	c8 17       	cp	r28, r24
    164e:	d9 07       	cpc	r29, r25
    1650:	81 f4       	brne	.+32     	; 0x1672 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1652:	84 e3       	ldi	r24, 0x34	; 52
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    165a:	89 34       	cpi	r24, 0x49	; 73
    165c:	51 f4       	brne	.+20     	; 0x1672 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	51 e0       	ldi	r21, 0x01	; 1
    1662:	65 e3       	ldi	r22, 0x35	; 53
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	89 e4       	ldi	r24, 0x49	; 73
    1668:	98 e0       	ldi	r25, 0x08	; 8
    166a:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return (EE_LOAD_OK);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	06 c0       	rjmp	.+12     	; 0x167e <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1672:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1676:	82 60       	ori	r24, 0x02	; 2
    1678:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    167c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    1688:	83 e4       	ldi	r24, 0x43	; 67
    168a:	91 e0       	ldi	r25, 0x01	; 1
    168c:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    1690:	ec 01       	movw	r28, r24
    1692:	6b e0       	ldi	r22, 0x0B	; 11
    1694:	70 e0       	ldi	r23, 0x00	; 0
    1696:	88 e3       	ldi	r24, 0x38	; 56
    1698:	91 e0       	ldi	r25, 0x01	; 1
    169a:	12 df       	rcall	.-476    	; 0x14c0 <crc16_eeprom>
    169c:	c8 17       	cp	r28, r24
    169e:	d9 07       	cpc	r29, r25
    16a0:	c1 f4       	brne	.+48     	; 0x16d2 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    16a2:	87 e3       	ldi	r24, 0x37	; 55
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    16aa:	8f 34       	cpi	r24, 0x4F	; 79
    16ac:	91 f4       	brne	.+36     	; 0x16d2 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    16ae:	48 e0       	ldi	r20, 0x08	; 8
    16b0:	50 e0       	ldi	r21, 0x00	; 0
    16b2:	68 e3       	ldi	r22, 0x38	; 56
    16b4:	71 e0       	ldi	r23, 0x01	; 1
    16b6:	89 e4       	ldi	r24, 0x49	; 73
    16b8:	99 e0       	ldi	r25, 0x09	; 9
    16ba:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    16be:	43 e0       	ldi	r20, 0x03	; 3
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	60 e4       	ldi	r22, 0x40	; 64
    16c4:	71 e0       	ldi	r23, 0x01	; 1
    16c6:	81 e5       	ldi	r24, 0x51	; 81
    16c8:	99 e0       	ldi	r25, 0x09	; 9
    16ca:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return (EE_LOAD_OK);
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	06 c0       	rjmp	.+12     	; 0x16de <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    16d2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    16d6:	84 60       	ori	r24, 0x04	; 4
    16d8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    16e8:	88 e4       	ldi	r24, 0x48	; 72
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    16f0:	ec 01       	movw	r28, r24
    16f2:	61 e0       	ldi	r22, 0x01	; 1
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	86 e4       	ldi	r24, 0x46	; 70
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	e2 de       	rcall	.-572    	; 0x14c0 <crc16_eeprom>
    16fc:	c8 17       	cp	r28, r24
    16fe:	d9 07       	cpc	r29, r25
    1700:	a1 f4       	brne	.+40     	; 0x172a <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    1702:	85 e4       	ldi	r24, 0x45	; 69
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    170a:	89 36       	cpi	r24, 0x69	; 105
    170c:	71 f4       	brne	.+28     	; 0x172a <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    170e:	86 e4       	ldi	r24, 0x46	; 70
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    1716:	c5 e7       	ldi	r28, 0x75	; 117
    1718:	d3 e0       	ldi	r29, 0x03	; 3
    171a:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    171c:	87 e4       	ldi	r24, 0x47	; 71
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    1724:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    172a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    172e:	88 60       	ori	r24, 0x08	; 8
    1730:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1734:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1736:	df 91       	pop	r29
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1740:	87 ef       	ldi	r24, 0xF7	; 247
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    1748:	ec 01       	movw	r28, r24
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	85 ef       	ldi	r24, 0xF5	; 245
    1750:	93 e0       	ldi	r25, 0x03	; 3
    1752:	b6 de       	rcall	.-660    	; 0x14c0 <crc16_eeprom>
    1754:	c8 17       	cp	r28, r24
    1756:	d9 07       	cpc	r29, r25
    1758:	81 f4       	brne	.+32     	; 0x177a <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    175a:	84 ef       	ldi	r24, 0xF4	; 244
    175c:	93 e0       	ldi	r25, 0x03	; 3
    175e:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    1762:	84 35       	cpi	r24, 0x54	; 84
    1764:	51 f4       	brne	.+20     	; 0x177a <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    1766:	42 e0       	ldi	r20, 0x02	; 2
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	65 ef       	ldi	r22, 0xF5	; 245
    176c:	73 e0       	ldi	r23, 0x03	; 3
    176e:	87 e4       	ldi	r24, 0x47	; 71
    1770:	98 e0       	ldi	r25, 0x08	; 8
    1772:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return (EE_LOAD_OK);
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    177a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    177e:	82 60       	ori	r24, 0x02	; 2
    1780:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1784:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1790:	8c e4       	ldi	r24, 0x4C	; 76
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    1798:	ec 01       	movw	r28, r24
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	8b e4       	ldi	r24, 0x4B	; 75
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	8e de       	rcall	.-740    	; 0x14c0 <crc16_eeprom>
    17a4:	c8 17       	cp	r28, r24
    17a6:	d9 07       	cpc	r29, r25
    17a8:	71 f4       	brne	.+28     	; 0x17c6 <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    17aa:	8a e4       	ldi	r24, 0x4A	; 74
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    17b2:	85 35       	cpi	r24, 0x55	; 85
    17b4:	41 f4       	brne	.+16     	; 0x17c6 <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    17b6:	8b e4       	ldi	r24, 0x4B	; 75
    17b8:	91 e0       	ldi	r25, 0x01	; 1
    17ba:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    17be:	80 93 73 16 	sts	0x1673, r24	; 0x801673 <serUSB_Active>
		return (EE_LOAD_OK);
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	06 c0       	rjmp	.+12     	; 0x17d2 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    17c6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    17ca:	88 60       	ori	r24, 0x08	; 8
    17cc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    17d0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	08 95       	ret

000017d8 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    17dc:	61 e0       	ldi	r22, 0x01	; 1
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	8f e4       	ldi	r24, 0x4F	; 79
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	6d de       	rcall	.-806    	; 0x14c0 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    17e6:	ac 01       	movw	r20, r24
    17e8:	68 e1       	ldi	r22, 0x18	; 24
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	80 e5       	ldi	r24, 0x50	; 80
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	c3 de       	rcall	.-634    	; 0x1578 <crc16_eeprom_startVal>
    17f2:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    17f4:	88 e6       	ldi	r24, 0x68	; 104
    17f6:	91 e0       	ldi	r25, 0x01	; 1
    17f8:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    17fc:	c8 17       	cp	r28, r24
    17fe:	d9 07       	cpc	r29, r25
    1800:	b1 f4       	brne	.+44     	; 0x182e <eeprom_ReadReg+0x56>
    1802:	8e e4       	ldi	r24, 0x4E	; 78
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    180a:	82 35       	cpi	r24, 0x52	; 82
    180c:	81 f4       	brne	.+32     	; 0x182e <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    180e:	8f e4       	ldi	r24, 0x4F	; 79
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    1816:	80 93 31 08 	sts	0x0831, r24	; 0x800831 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    181a:	48 e1       	ldi	r20, 0x18	; 24
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	60 e5       	ldi	r22, 0x50	; 80
    1820:	71 e0       	ldi	r23, 0x01	; 1
    1822:	88 e1       	ldi	r24, 0x18	; 24
    1824:	98 e0       	ldi	r25, 0x08	; 8
    1826:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return(EE_LOAD_OK);
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	06 c0       	rjmp	.+12     	; 0x183a <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    182e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1832:	80 62       	ori	r24, 0x20	; 32
    1834:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1838:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	08 95       	ret

00001840 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    1844:	8b ee       	ldi	r24, 0xEB	; 235
    1846:	93 e0       	ldi	r25, 0x03	; 3
    1848:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    184c:	ec 01       	movw	r28, r24
    184e:	60 e8       	ldi	r22, 0x80	; 128
    1850:	72 e0       	ldi	r23, 0x02	; 2
    1852:	8b e6       	ldi	r24, 0x6B	; 107
    1854:	91 e0       	ldi	r25, 0x01	; 1
    1856:	34 de       	rcall	.-920    	; 0x14c0 <crc16_eeprom>
    1858:	c8 17       	cp	r28, r24
    185a:	d9 07       	cpc	r29, r25
    185c:	81 f4       	brne	.+32     	; 0x187e <eeprom_ReadProg+0x3e>
    185e:	8a e6       	ldi	r24, 0x6A	; 106
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    1866:	80 35       	cpi	r24, 0x50	; 80
    1868:	51 f4       	brne	.+20     	; 0x187e <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	52 e0       	ldi	r21, 0x02	; 2
    186e:	6b e6       	ldi	r22, 0x6B	; 107
    1870:	71 e0       	ldi	r23, 0x01	; 1
    1872:	85 e8       	ldi	r24, 0x85	; 133
    1874:	99 e0       	ldi	r25, 0x09	; 9
    1876:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return(EE_LOAD_OK);
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	06 c0       	rjmp	.+12     	; 0x188a <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    187e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1882:	80 64       	ori	r24, 0x40	; 64
    1884:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1888:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    1894:	82 ef       	ldi	r24, 0xF2	; 242
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    189c:	ec 01       	movw	r28, r24
    189e:	64 e0       	ldi	r22, 0x04	; 4
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	8e ee       	ldi	r24, 0xEE	; 238
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	0c de       	rcall	.-1000   	; 0x14c0 <crc16_eeprom>
    18a8:	c8 17       	cp	r28, r24
    18aa:	d9 07       	cpc	r29, r25
    18ac:	51 f4       	brne	.+20     	; 0x18c2 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    18ae:	44 e0       	ldi	r20, 0x04	; 4
    18b0:	50 e0       	ldi	r21, 0x00	; 0
    18b2:	6e ee       	ldi	r22, 0xEE	; 238
    18b4:	73 e0       	ldi	r23, 0x03	; 3
    18b6:	84 ed       	ldi	r24, 0xD4	; 212
    18b8:	95 e0       	ldi	r25, 0x05	; 5
    18ba:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return(EE_LOAD_OK);
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	06 c0       	rjmp	.+12     	; 0x18ce <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    18c2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    18c6:	80 68       	ori	r24, 0x80	; 128
    18c8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    18cc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	08 95       	ret

000018d4 <eeprom_ReadRegOut>:

uint8_t eeprom_ReadRegOut(){
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.regOut_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.reg_Out, sizeof (reg_Out)))){
    18d8:	8a e1       	ldi	r24, 0x1A	; 26
    18da:	94 e0       	ldi	r25, 0x04	; 4
    18dc:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <eeprom_read_word>
    18e0:	ec 01       	movw	r28, r24
    18e2:	60 e2       	ldi	r22, 0x20	; 32
    18e4:	70 e0       	ldi	r23, 0x00	; 0
    18e6:	8a ef       	ldi	r24, 0xFA	; 250
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	ea dd       	rcall	.-1068   	; 0x14c0 <crc16_eeprom>
    18ec:	c8 17       	cp	r28, r24
    18ee:	d9 07       	cpc	r29, r25
    18f0:	51 f4       	brne	.+20     	; 0x1906 <eeprom_ReadRegOut+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof (ee.eeData.ee.reg_Out));
    18f2:	40 e2       	ldi	r20, 0x20	; 32
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	6a ef       	ldi	r22, 0xFA	; 250
    18f8:	73 e0       	ldi	r23, 0x03	; 3
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	0e 94 87 3e 	call	0x7d0e	; 0x7d0e <eeprom_read_block>
		return(EE_LOAD_OK);
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	06 c0       	rjmp	.+12     	; 0x1912 <eeprom_ReadRegOut+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    1906:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    190a:	80 62       	ori	r24, 0x20	; 32
    190c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1910:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1922:	65 e6       	ldi	r22, 0x65	; 101
    1924:	8c e1       	ldi	r24, 0x1C	; 28
    1926:	94 e0       	ldi	r25, 0x04	; 4
    1928:	0c 94 b3 3e 	jmp	0x7d66	; 0x7d66 <eeprom_update_byte>
    192c:	08 95       	ret

0000192e <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1932:	60 e3       	ldi	r22, 0x30	; 48
    1934:	70 e0       	ldi	r23, 0x00	; 0
    1936:	85 e5       	ldi	r24, 0x55	; 85
    1938:	99 e0       	ldi	r25, 0x09	; 9
    193a:	9c dd       	rcall	.-1224   	; 0x1474 <crc16_ram>
    193c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    193e:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1942:	6d e4       	ldi	r22, 0x4D	; 77
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    194c:	40 e3       	ldi	r20, 0x30	; 48
    194e:	50 e0       	ldi	r21, 0x00	; 0
    1950:	62 e0       	ldi	r22, 0x02	; 2
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	85 e5       	ldi	r24, 0x55	; 85
    1956:	99 e0       	ldi	r25, 0x09	; 9
    1958:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    195c:	be 01       	movw	r22, r28
    195e:	82 e3       	ldi	r24, 0x32	; 50
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1966:	d8 df       	rcall	.-80     	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1968:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1976:	60 e0       	ldi	r22, 0x00	; 0
    1978:	71 e0       	ldi	r23, 0x01	; 1
    197a:	89 e4       	ldi	r24, 0x49	; 73
    197c:	98 e0       	ldi	r25, 0x08	; 8
    197e:	7a dd       	rcall	.-1292   	; 0x1474 <crc16_ram>
    1980:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1982:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1986:	69 e4       	ldi	r22, 0x49	; 73
    1988:	84 e3       	ldi	r24, 0x34	; 52
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	51 e0       	ldi	r21, 0x01	; 1
    1994:	65 e3       	ldi	r22, 0x35	; 53
    1996:	70 e0       	ldi	r23, 0x00	; 0
    1998:	89 e4       	ldi	r24, 0x49	; 73
    199a:	98 e0       	ldi	r25, 0x08	; 8
    199c:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    19a0:	be 01       	movw	r22, r28
    19a2:	85 e3       	ldi	r24, 0x35	; 53
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    19aa:	b6 df       	rcall	.-148    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    19ac:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    19b6:	cf 93       	push	r28
    19b8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    19ba:	68 e0       	ldi	r22, 0x08	; 8
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	89 e4       	ldi	r24, 0x49	; 73
    19c0:	99 e0       	ldi	r25, 0x09	; 9
    19c2:	58 dd       	rcall	.-1360   	; 0x1474 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    19c4:	ac 01       	movw	r20, r24
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	70 e0       	ldi	r23, 0x00	; 0
    19ca:	81 e5       	ldi	r24, 0x51	; 81
    19cc:	99 e0       	ldi	r25, 0x09	; 9
    19ce:	af dd       	rcall	.-1186   	; 0x152e <crc16_ram_startVal>
    19d0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19d2:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    19d6:	6f e4       	ldi	r22, 0x4F	; 79
    19d8:	87 e3       	ldi	r24, 0x37	; 55
    19da:	91 e0       	ldi	r25, 0x01	; 1
    19dc:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    19e0:	48 e0       	ldi	r20, 0x08	; 8
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	68 e3       	ldi	r22, 0x38	; 56
    19e6:	71 e0       	ldi	r23, 0x01	; 1
    19e8:	89 e4       	ldi	r24, 0x49	; 73
    19ea:	99 e0       	ldi	r25, 0x09	; 9
    19ec:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    19f0:	43 e0       	ldi	r20, 0x03	; 3
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	60 e4       	ldi	r22, 0x40	; 64
    19f6:	71 e0       	ldi	r23, 0x01	; 1
    19f8:	81 e5       	ldi	r24, 0x51	; 81
    19fa:	99 e0       	ldi	r25, 0x09	; 9
    19fc:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1a00:	be 01       	movw	r22, r28
    1a02:	83 e4       	ldi	r24, 0x43	; 67
    1a04:	91 e0       	ldi	r25, 0x01	; 1
    1a06:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1a0a:	86 df       	rcall	.-244    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a0c:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	85 e7       	ldi	r24, 0x75	; 117
    1a24:	93 e0       	ldi	r25, 0x03	; 3
    1a26:	26 dd       	rcall	.-1460   	; 0x1474 <crc16_ram>
    1a28:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    1a2a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    1a2e:	69 e6       	ldi	r22, 0x69	; 105
    1a30:	85 e4       	ldi	r24, 0x45	; 69
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    1a38:	c5 e7       	ldi	r28, 0x75	; 117
    1a3a:	d3 e0       	ldi	r29, 0x03	; 3
    1a3c:	68 81       	ld	r22, Y
    1a3e:	86 e4       	ldi	r24, 0x46	; 70
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    1a46:	69 81       	ldd	r22, Y+1	; 0x01
    1a48:	87 e4       	ldi	r24, 0x47	; 71
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1a50:	b8 01       	movw	r22, r16
    1a52:	88 e4       	ldi	r24, 0x48	; 72
    1a54:	91 e0       	ldi	r25, 0x01	; 1
    1a56:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1a5a:	5e df       	rcall	.-324    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a5c:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1a60:	df 91       	pop	r29
    1a62:	cf 91       	pop	r28
    1a64:	1f 91       	pop	r17
    1a66:	0f 91       	pop	r16
    1a68:	08 95       	ret

00001a6a <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	83 e7       	ldi	r24, 0x73	; 115
    1a74:	96 e1       	ldi	r25, 0x16	; 22
    1a76:	fe dc       	rcall	.-1540   	; 0x1474 <crc16_ram>
    1a78:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a7a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1a7e:	65 e5       	ldi	r22, 0x55	; 85
    1a80:	8a e4       	ldi	r24, 0x4A	; 74
    1a82:	91 e0       	ldi	r25, 0x01	; 1
    1a84:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1a88:	60 91 73 16 	lds	r22, 0x1673	; 0x801673 <serUSB_Active>
    1a8c:	8b e4       	ldi	r24, 0x4B	; 75
    1a8e:	91 e0       	ldi	r25, 0x01	; 1
    1a90:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1a94:	be 01       	movw	r22, r28
    1a96:	8c e4       	ldi	r24, 0x4C	; 76
    1a98:	91 e0       	ldi	r25, 0x01	; 1
    1a9a:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1a9e:	3c df       	rcall	.-392    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1aa0:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	08 95       	ret

00001aaa <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1aae:	62 e0       	ldi	r22, 0x02	; 2
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	87 e4       	ldi	r24, 0x47	; 71
    1ab4:	98 e0       	ldi	r25, 0x08	; 8
    1ab6:	de dc       	rcall	.-1604   	; 0x1474 <crc16_ram>
    1ab8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1aba:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1abe:	64 e5       	ldi	r22, 0x54	; 84
    1ac0:	84 ef       	ldi	r24, 0xF4	; 244
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1ac8:	42 e0       	ldi	r20, 0x02	; 2
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	65 ef       	ldi	r22, 0xF5	; 245
    1ace:	73 e0       	ldi	r23, 0x03	; 3
    1ad0:	87 e4       	ldi	r24, 0x47	; 71
    1ad2:	98 e0       	ldi	r25, 0x08	; 8
    1ad4:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1ad8:	be 01       	movw	r22, r28
    1ada:	87 ef       	ldi	r24, 0xF7	; 247
    1adc:	93 e0       	ldi	r25, 0x03	; 3
    1ade:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1ae2:	1a df       	rcall	.-460    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1ae4:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	08 95       	ret

00001aee <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	70 e0       	ldi	r23, 0x00	; 0
    1af6:	81 e3       	ldi	r24, 0x31	; 49
    1af8:	98 e0       	ldi	r25, 0x08	; 8
    1afa:	bc dc       	rcall	.-1672   	; 0x1474 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1afc:	ac 01       	movw	r20, r24
    1afe:	68 e1       	ldi	r22, 0x18	; 24
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	88 e1       	ldi	r24, 0x18	; 24
    1b04:	98 e0       	ldi	r25, 0x08	; 8
    1b06:	13 dd       	rcall	.-1498   	; 0x152e <crc16_ram_startVal>
    1b08:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b0a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1b0e:	62 e5       	ldi	r22, 0x52	; 82
    1b10:	8e e4       	ldi	r24, 0x4E	; 78
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1b18:	60 91 31 08 	lds	r22, 0x0831	; 0x800831 <registerCount>
    1b1c:	8f e4       	ldi	r24, 0x4F	; 79
    1b1e:	91 e0       	ldi	r25, 0x01	; 1
    1b20:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1b24:	48 e1       	ldi	r20, 0x18	; 24
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	60 e5       	ldi	r22, 0x50	; 80
    1b2a:	71 e0       	ldi	r23, 0x01	; 1
    1b2c:	88 e1       	ldi	r24, 0x18	; 24
    1b2e:	98 e0       	ldi	r25, 0x08	; 8
    1b30:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1b34:	be 01       	movw	r22, r28
    1b36:	88 e6       	ldi	r24, 0x68	; 104
    1b38:	91 e0       	ldi	r25, 0x01	; 1
    1b3a:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1b3e:	ec de       	rcall	.-552    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b40:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	08 95       	ret

00001b4a <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1b4a:	cf 93       	push	r28
    1b4c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1b4e:	60 e8       	ldi	r22, 0x80	; 128
    1b50:	72 e0       	ldi	r23, 0x02	; 2
    1b52:	85 e8       	ldi	r24, 0x85	; 133
    1b54:	99 e0       	ldi	r25, 0x09	; 9
    1b56:	8e dc       	rcall	.-1764   	; 0x1474 <crc16_ram>
    1b58:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b5a:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1b5e:	60 e5       	ldi	r22, 0x50	; 80
    1b60:	8a e6       	ldi	r24, 0x6A	; 106
    1b62:	91 e0       	ldi	r25, 0x01	; 1
    1b64:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	52 e0       	ldi	r21, 0x02	; 2
    1b6c:	6b e6       	ldi	r22, 0x6B	; 107
    1b6e:	71 e0       	ldi	r23, 0x01	; 1
    1b70:	85 e8       	ldi	r24, 0x85	; 133
    1b72:	99 e0       	ldi	r25, 0x09	; 9
    1b74:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1b78:	be 01       	movw	r22, r28
    1b7a:	8b ee       	ldi	r24, 0xEB	; 235
    1b7c:	93 e0       	ldi	r25, 0x03	; 3
    1b7e:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1b82:	ca de       	rcall	.-620    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b84:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	08 95       	ret

00001b8e <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1b92:	64 e0       	ldi	r22, 0x04	; 4
    1b94:	70 e0       	ldi	r23, 0x00	; 0
    1b96:	84 ed       	ldi	r24, 0xD4	; 212
    1b98:	95 e0       	ldi	r25, 0x05	; 5
    1b9a:	6c dc       	rcall	.-1832   	; 0x1474 <crc16_ram>
    1b9c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b9e:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1ba2:	6b e4       	ldi	r22, 0x4B	; 75
    1ba4:	8d ee       	ldi	r24, 0xED	; 237
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1bac:	44 e0       	ldi	r20, 0x04	; 4
    1bae:	50 e0       	ldi	r21, 0x00	; 0
    1bb0:	6e ee       	ldi	r22, 0xEE	; 238
    1bb2:	73 e0       	ldi	r23, 0x03	; 3
    1bb4:	84 ed       	ldi	r24, 0xD4	; 212
    1bb6:	95 e0       	ldi	r25, 0x05	; 5
    1bb8:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1bbc:	be 01       	movw	r22, r28
    1bbe:	82 ef       	ldi	r24, 0xF2	; 242
    1bc0:	93 e0       	ldi	r25, 0x03	; 3
    1bc2:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1bc6:	a8 de       	rcall	.-688    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1bc8:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	08 95       	ret

00001bd2 <eeprom_UpdateRegOut>:

void eeprom_UpdateRegOut(){
    1bd2:	cf 93       	push	r28
    1bd4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) reg_Out, sizeof(reg_Out));
    1bd6:	60 e2       	ldi	r22, 0x20	; 32
    1bd8:	70 e0       	ldi	r23, 0x00	; 0
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	4a dc       	rcall	.-1900   	; 0x1474 <crc16_ram>
    1be0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1be2:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charRegOut), EE_CHAR_REGOUT);
    1be6:	62 e7       	ldi	r22, 0x72	; 114
    1be8:	89 ef       	ldi	r24, 0xF9	; 249
    1bea:	93 e0       	ldi	r25, 0x03	; 3
    1bec:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof(reg_Out));
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	6a ef       	ldi	r22, 0xFA	; 250
    1bf6:	73 e0       	ldi	r23, 0x03	; 3
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	92 e0       	ldi	r25, 0x02	; 2
    1bfc:	0e 94 a4 3e 	call	0x7d48	; 0x7d48 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.regOut_crc), crc);
    1c00:	be 01       	movw	r22, r28
    1c02:	8a e1       	ldi	r24, 0x1A	; 26
    1c04:	94 e0       	ldi	r25, 0x04	; 4
    1c06:	0e 94 c5 3e 	call	0x7d8a	; 0x7d8a <eeprom_update_word>
	eepromWriteSignature();
    1c0a:	86 de       	rcall	.-756    	; 0x1918 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c0c:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1c16:	8b de       	rcall	.-746    	; 0x192e <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1c18:	ac de       	rcall	.-680    	; 0x1972 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1c1a:	cd de       	rcall	.-614    	; 0x19b6 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1c1c:	fc de       	rcall	.-520    	; 0x1a16 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1c1e:	25 df       	rcall	.-438    	; 0x1a6a <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1c20:	66 df       	rcall	.-308    	; 0x1aee <eeprom_UpdateReg>
    1c22:	93 df       	rcall	.-218    	; 0x1b4a <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1c24:	b4 df       	rcall	.-152    	; 0x1b8e <eeprom_UpdateSoftkeys>
    1c26:	41 df       	rcall	.-382    	; 0x1aaa <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1c28:	d4 cf       	rjmp	.-88     	; 0x1bd2 <eeprom_UpdateRegOut>
    1c2a:	08 95       	ret

00001c2c <eepromCopy>:
	eeprom_UpdateMidiThrough();
    1c2c:	cf 92       	push	r12
    1c2e:	df 92       	push	r13
	eeprom_UpdateRegOut();
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1c3e:	11 c0       	rjmp	.+34     	; 0x1c62 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1c40:	7c 01       	movw	r14, r24
    1c42:	2f ef       	ldi	r18, 0xFF	; 255
    1c44:	e2 1a       	sub	r14, r18
    1c46:	f2 0a       	sbc	r15, r18
    1c48:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <eeprom_read_byte>
    1c4c:	6e 01       	movw	r12, r28
    1c4e:	9f ef       	ldi	r25, 0xFF	; 255
    1c50:	c9 1a       	sub	r12, r25
    1c52:	d9 0a       	sbc	r13, r25
    1c54:	68 2f       	mov	r22, r24
    1c56:	ce 01       	movw	r24, r28
    1c58:	0e 94 b3 3e 	call	0x7d66	; 0x7d66 <eeprom_update_byte>
	eeprom_UpdateRegOut();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1c5c:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1c5e:	e6 01       	movw	r28, r12
    1c60:	c7 01       	movw	r24, r14
	eeprom_UpdateRegOut();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1c62:	8a 01       	movw	r16, r20
    1c64:	01 50       	subi	r16, 0x01	; 1
    1c66:	11 09       	sbc	r17, r1
    1c68:	45 2b       	or	r20, r21
    1c6a:	51 f7       	brne	.-44     	; 0x1c40 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	ff 90       	pop	r15
    1c76:	ef 90       	pop	r14
    1c78:	df 90       	pop	r13
    1c7a:	cf 90       	pop	r12
    1c7c:	08 95       	ret

00001c7e <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1c7e:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	58 e0       	ldi	r21, 0x08	; 8
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	78 e0       	ldi	r23, 0x08	; 8
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	ce df       	rcall	.-100    	; 0x1c2c <eepromCopy>
	lcd_waitSymbolOff();
    1c90:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
    1c94:	08 95       	ret

00001c96 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1c96:	0e 94 b1 3d 	call	0x7b62	; 0x7b62 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1c9a:	40 e0       	ldi	r20, 0x00	; 0
    1c9c:	58 e0       	ldi	r21, 0x08	; 8
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	98 e0       	ldi	r25, 0x08	; 8
    1ca6:	c2 df       	rcall	.-124    	; 0x1c2c <eepromCopy>
	lcd_waitSymbolOff();
    1ca8:	0c 94 bf 3d 	jmp	0x7b7e	; 0x7b7e <lcd_waitSymbolOff>
    1cac:	08 95       	ret

00001cae <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	0a c0       	rjmp	.+20     	; 0x1cc6 <init_Timers+0x18>
    1cb2:	e8 2f       	mov	r30, r24
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	e1 5b       	subi	r30, 0xB1	; 177
    1cbc:	fd 4f       	sbci	r31, 0xFD	; 253
    1cbe:	9f ef       	ldi	r25, 0xFF	; 255
    1cc0:	90 83       	st	Z, r25
    1cc2:	11 82       	std	Z+1, r1	; 0x01
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	89 30       	cpi	r24, 0x09	; 9
    1cc8:	a0 f3       	brcs	.-24     	; 0x1cb2 <init_Timers+0x4>
    1cca:	e1 e6       	ldi	r30, 0x61	; 97
    1ccc:	f2 e0       	ldi	r31, 0x02	; 2
    1cce:	10 82       	st	Z, r1
    1cd0:	11 82       	std	Z+1, r1	; 0x01
    1cd2:	12 82       	std	Z+2, r1	; 0x02
    1cd4:	13 82       	std	Z+3, r1	; 0x03
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <time_UpTimeUpdated>
    1cdc:	08 95       	ret

00001cde <init_HwTimer>:
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	84 bd       	out	0x24, r24	; 36
    1ce2:	93 e0       	ldi	r25, 0x03	; 3
    1ce4:	95 bd       	out	0x25, r25	; 37
    1ce6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1cea:	89 ef       	ldi	r24, 0xF9	; 249
    1cec:	87 bd       	out	0x27, r24	; 39
    1cee:	85 b1       	in	r24, 0x05	; 5
    1cf0:	8f 77       	andi	r24, 0x7F	; 127
    1cf2:	85 b9       	out	0x05, r24	; 5
    1cf4:	84 b1       	in	r24, 0x04	; 4
    1cf6:	80 68       	ori	r24, 0x80	; 128
    1cf8:	84 b9       	out	0x04, r24	; 4
    1cfa:	08 95       	ret

00001cfc <init_ADC>:
    1cfc:	87 e8       	ldi	r24, 0x87	; 135
    1cfe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1d02:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1d06:	8f e7       	ldi	r24, 0x7F	; 127
    1d08:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1d12:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1d16:	e9 e6       	ldi	r30, 0x69	; 105
    1d18:	f3 e0       	ldi	r31, 0x03	; 3
    1d1a:	10 82       	st	Z, r1
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	81 83       	std	Z+1, r24	; 0x01
    1d20:	82 83       	std	Z+2, r24	; 0x02
    1d22:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	10 c0       	rjmp	.+32     	; 0x1d4a <init_ADC+0x4e>
    1d2a:	85 30       	cpi	r24, 0x05	; 5
    1d2c:	39 f4       	brne	.+14     	; 0x1d3c <init_ADC+0x40>
    1d2e:	e8 2f       	mov	r30, r24
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	e1 59       	subi	r30, 0x91	; 145
    1d34:	fc 4f       	sbci	r31, 0xFC	; 252
    1d36:	96 e0       	ldi	r25, 0x06	; 6
    1d38:	90 83       	st	Z, r25
    1d3a:	06 c0       	rjmp	.+12     	; 0x1d48 <init_ADC+0x4c>
    1d3c:	e8 2f       	mov	r30, r24
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	e1 59       	subi	r30, 0x91	; 145
    1d42:	fc 4f       	sbci	r31, 0xFC	; 252
    1d44:	9a e0       	ldi	r25, 0x0A	; 10
    1d46:	90 83       	st	Z, r25
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	86 30       	cpi	r24, 0x06	; 6
    1d4c:	70 f3       	brcs	.-36     	; 0x1d2a <init_ADC+0x2e>
    1d4e:	08 95       	ret

00001d50 <init_Pipe>:
    1d50:	8f ef       	ldi	r24, 0xFF	; 255
    1d52:	88 b9       	out	0x08, r24	; 8
    1d54:	87 b9       	out	0x07, r24	; 7
    1d56:	82 b9       	out	0x02, r24	; 2
    1d58:	11 b8       	out	0x01, r1	; 1
    1d5a:	84 b3       	in	r24, 0x14	; 20
    1d5c:	87 60       	ori	r24, 0x07	; 7
    1d5e:	84 bb       	out	0x14, r24	; 20
    1d60:	83 b3       	in	r24, 0x13	; 19
    1d62:	87 60       	ori	r24, 0x07	; 7
    1d64:	83 bb       	out	0x13, r24	; 19
    1d66:	8b b1       	in	r24, 0x0b	; 11
    1d68:	8f 77       	andi	r24, 0x7F	; 127
    1d6a:	8b b9       	out	0x0b, r24	; 11
    1d6c:	8a b1       	in	r24, 0x0a	; 10
    1d6e:	80 68       	ori	r24, 0x80	; 128
    1d70:	8a b9       	out	0x0a, r24	; 10
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <init_Pipe+0x42>
    1d76:	e8 2f       	mov	r30, r24
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	ee 0f       	add	r30, r30
    1d80:	ff 1f       	adc	r31, r31
    1d82:	ee 0f       	add	r30, r30
    1d84:	ff 1f       	adc	r31, r31
    1d86:	e7 59       	subi	r30, 0x97	; 151
    1d88:	fd 4f       	sbci	r31, 0xFD	; 253
    1d8a:	9f ef       	ldi	r25, 0xFF	; 255
    1d8c:	91 83       	std	Z+1, r25	; 0x01
    1d8e:	90 83       	st	Z, r25
    1d90:	8f 5f       	subi	r24, 0xFF	; 255
    1d92:	80 32       	cpi	r24, 0x20	; 32
    1d94:	80 f3       	brcs	.-32     	; 0x1d76 <init_Pipe+0x26>
    1d96:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <pipeProcessing>
    1d9a:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <pipe_PowerStatus>
    1d9e:	08 95       	ret

00001da0 <init_PipeModules>:
    1da0:	a1 dc       	rcall	.-1726   	; 0x16e4 <eeprom_ReadModules>
    1da2:	8f 3f       	cpi	r24, 0xFF	; 255
    1da4:	59 f4       	brne	.+22     	; 0x1dbc <init_PipeModules+0x1c>
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	50 e0       	ldi	r21, 0x00	; 0
    1daa:	60 e0       	ldi	r22, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	0e 94 ef 16 	call	0x2dde	; 0x2dde <log_putError>
    1db2:	e5 e7       	ldi	r30, 0x75	; 117
    1db4:	f3 e0       	ldi	r31, 0x03	; 3
    1db6:	8f ef       	ldi	r24, 0xFF	; 255
    1db8:	80 83       	st	Z, r24
    1dba:	81 83       	std	Z+1, r24	; 0x01
    1dbc:	8b b1       	in	r24, 0x0b	; 11
    1dbe:	8f 77       	andi	r24, 0x7F	; 127
    1dc0:	8b b9       	out	0x0b, r24	; 11
    1dc2:	84 b3       	in	r24, 0x14	; 20
    1dc4:	87 60       	ori	r24, 0x07	; 7
    1dc6:	84 bb       	out	0x14, r24	; 20
    1dc8:	84 b3       	in	r24, 0x14	; 20
    1dca:	8b 7f       	andi	r24, 0xFB	; 251
    1dcc:	84 bb       	out	0x14, r24	; 20
    1dce:	85 e0       	ldi	r24, 0x05	; 5
    1dd0:	8a 95       	dec	r24
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <init_PipeModules+0x30>
    1dd4:	00 00       	nop
    1dd6:	84 b3       	in	r24, 0x14	; 20
    1dd8:	84 60       	ori	r24, 0x04	; 4
    1dda:	84 bb       	out	0x14, r24	; 20
    1ddc:	90 e2       	ldi	r25, 0x20	; 32
    1dde:	84 b3       	in	r24, 0x14	; 20
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	84 bb       	out	0x14, r24	; 20
    1de4:	90 fd       	sbrc	r25, 0
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <init_PipeModules+0x4c>
    1de8:	85 e5       	ldi	r24, 0x55	; 85
    1dea:	01 c0       	rjmp	.+2      	; 0x1dee <init_PipeModules+0x4e>
    1dec:	8a ea       	ldi	r24, 0xAA	; 170
    1dee:	88 b9       	out	0x08, r24	; 8
    1df0:	80 b1       	in	r24, 0x00	; 0
    1df2:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <pipe+0xff>
    1df6:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <pipe+0xfe>
    1dfa:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <pipe+0xfd>
    1dfe:	80 93 65 03 	sts	0x0365, r24	; 0x800365 <pipe+0xfc>
    1e02:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <pipe+0xfb>
    1e06:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <pipe+0xfa>
    1e0a:	84 b3       	in	r24, 0x14	; 20
    1e0c:	8e 7f       	andi	r24, 0xFE	; 254
    1e0e:	84 bb       	out	0x14, r24	; 20
    1e10:	85 e0       	ldi	r24, 0x05	; 5
    1e12:	8a 95       	dec	r24
    1e14:	f1 f7       	brne	.-4      	; 0x1e12 <init_PipeModules+0x72>
    1e16:	00 00       	nop
    1e18:	91 50       	subi	r25, 0x01	; 1
    1e1a:	09 f7       	brne	.-62     	; 0x1dde <init_PipeModules+0x3e>
    1e1c:	90 e2       	ldi	r25, 0x20	; 32
    1e1e:	0f c0       	rjmp	.+30     	; 0x1e3e <init_PipeModules+0x9e>
    1e20:	84 b3       	in	r24, 0x14	; 20
    1e22:	81 60       	ori	r24, 0x01	; 1
    1e24:	84 bb       	out	0x14, r24	; 20
    1e26:	82 e0       	ldi	r24, 0x02	; 2
    1e28:	8a 95       	dec	r24
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <init_PipeModules+0x88>
    1e2c:	00 c0       	rjmp	.+0      	; 0x1e2e <init_PipeModules+0x8e>
    1e2e:	84 b3       	in	r24, 0x14	; 20
    1e30:	8e 7f       	andi	r24, 0xFE	; 254
    1e32:	84 bb       	out	0x14, r24	; 20
    1e34:	82 e0       	ldi	r24, 0x02	; 2
    1e36:	8a 95       	dec	r24
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <init_PipeModules+0x96>
    1e3a:	00 c0       	rjmp	.+0      	; 0x1e3c <init_PipeModules+0x9c>
    1e3c:	91 50       	subi	r25, 0x01	; 1
    1e3e:	91 11       	cpse	r25, r1
    1e40:	ef cf       	rjmp	.-34     	; 0x1e20 <init_PipeModules+0x80>
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_ModuleTested>
    1e48:	90 e2       	ldi	r25, 0x20	; 32
    1e4a:	84 b3       	in	r24, 0x14	; 20
    1e4c:	81 60       	ori	r24, 0x01	; 1
    1e4e:	84 bb       	out	0x14, r24	; 20
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	88 b9       	out	0x08, r24	; 8
    1e54:	20 b1       	in	r18, 0x00	; 0
    1e56:	90 fd       	sbrc	r25, 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <init_PipeModules+0xbe>
    1e5a:	8a ea       	ldi	r24, 0xAA	; 170
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <init_PipeModules+0xc0>
    1e5e:	85 e5       	ldi	r24, 0x55	; 85
    1e60:	82 27       	eor	r24, r18
    1e62:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <pipe_ModuleTested>
    1e66:	82 23       	and	r24, r18
    1e68:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_ModuleTested>
    1e6c:	84 b3       	in	r24, 0x14	; 20
    1e6e:	8e 7f       	andi	r24, 0xFE	; 254
    1e70:	84 bb       	out	0x14, r24	; 20
    1e72:	85 e0       	ldi	r24, 0x05	; 5
    1e74:	8a 95       	dec	r24
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <init_PipeModules+0xd4>
    1e78:	00 00       	nop
    1e7a:	91 50       	subi	r25, 0x01	; 1
    1e7c:	31 f7       	brne	.-52     	; 0x1e4a <init_PipeModules+0xaa>
    1e7e:	00 00       	nop
    1e80:	00 00       	nop
    1e82:	84 b3       	in	r24, 0x14	; 20
    1e84:	81 60       	ori	r24, 0x01	; 1
    1e86:	84 bb       	out	0x14, r24	; 20
    1e88:	84 b3       	in	r24, 0x14	; 20
    1e8a:	87 60       	ori	r24, 0x07	; 7
    1e8c:	84 bb       	out	0x14, r24	; 20
    1e8e:	84 b3       	in	r24, 0x14	; 20
    1e90:	8b 7f       	andi	r24, 0xFB	; 251
    1e92:	84 bb       	out	0x14, r24	; 20
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	8a 95       	dec	r24
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <init_PipeModules+0xf6>
    1e9a:	00 c0       	rjmp	.+0      	; 0x1e9c <init_PipeModules+0xfc>
    1e9c:	84 b3       	in	r24, 0x14	; 20
    1e9e:	84 60       	ori	r24, 0x04	; 4
    1ea0:	84 bb       	out	0x14, r24	; 20
    1ea2:	90 e2       	ldi	r25, 0x20	; 32
    1ea4:	e1 e6       	ldi	r30, 0x61	; 97
    1ea6:	f3 e0       	ldi	r31, 0x03	; 3
    1ea8:	83 81       	ldd	r24, Z+3	; 0x03
    1eaa:	82 83       	std	Z+2, r24	; 0x02
    1eac:	84 81       	ldd	r24, Z+4	; 0x04
    1eae:	83 83       	std	Z+3, r24	; 0x03
    1eb0:	84 b3       	in	r24, 0x14	; 20
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	84 bb       	out	0x14, r24	; 20
    1eb6:	8f ef       	ldi	r24, 0xFF	; 255
    1eb8:	81 83       	std	Z+1, r24	; 0x01
    1eba:	88 b9       	out	0x08, r24	; 8
    1ebc:	85 81       	ldd	r24, Z+5	; 0x05
    1ebe:	84 83       	std	Z+4, r24	; 0x04
    1ec0:	86 81       	ldd	r24, Z+6	; 0x06
    1ec2:	85 83       	std	Z+5, r24	; 0x05
    1ec4:	80 b1       	in	r24, 0x00	; 0
    1ec6:	86 83       	std	Z+6, r24	; 0x06
    1ec8:	82 83       	std	Z+2, r24	; 0x02
    1eca:	83 83       	std	Z+3, r24	; 0x03
    1ecc:	84 83       	std	Z+4, r24	; 0x04
    1ece:	85 83       	std	Z+5, r24	; 0x05
    1ed0:	87 83       	std	Z+7, r24	; 0x07
    1ed2:	84 b3       	in	r24, 0x14	; 20
    1ed4:	8e 7f       	andi	r24, 0xFE	; 254
    1ed6:	84 bb       	out	0x14, r24	; 20
    1ed8:	38 97       	sbiw	r30, 0x08	; 8
    1eda:	91 50       	subi	r25, 0x01	; 1
    1edc:	29 f7       	brne	.-54     	; 0x1ea8 <init_PipeModules+0x108>
    1ede:	00 00       	nop
    1ee0:	00 00       	nop
    1ee2:	84 b3       	in	r24, 0x14	; 20
    1ee4:	81 60       	ori	r24, 0x01	; 1
    1ee6:	84 bb       	out	0x14, r24	; 20
    1ee8:	84 b3       	in	r24, 0x14	; 20
    1eea:	8d 7f       	andi	r24, 0xFD	; 253
    1eec:	84 bb       	out	0x14, r24	; 20
    1eee:	18 b8       	out	0x08, r1	; 8
    1ef0:	85 e0       	ldi	r24, 0x05	; 5
    1ef2:	8a 95       	dec	r24
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <init_PipeModules+0x152>
    1ef6:	00 00       	nop
    1ef8:	84 b3       	in	r24, 0x14	; 20
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	84 bb       	out	0x14, r24	; 20
    1efe:	08 95       	ret

00001f00 <test_PipeModule>:
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <test_PipeModule+0x6>
    1f04:	6a c0       	rjmp	.+212    	; 0x1fda <test_PipeModule+0xda>
    1f06:	31 e0       	ldi	r19, 0x01	; 1
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <test_PipeModule+0xc>
    1f0a:	33 0f       	add	r19, r19
    1f0c:	8a 95       	dec	r24
    1f0e:	ea f7       	brpl	.-6      	; 0x1f0a <test_PipeModule+0xa>
    1f10:	80 e8       	ldi	r24, 0x80	; 128
    1f12:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pipeProcessing>
    1f16:	8b b1       	in	r24, 0x0b	; 11
    1f18:	8f 77       	andi	r24, 0x7F	; 127
    1f1a:	8b b9       	out	0x0b, r24	; 11
    1f1c:	84 b3       	in	r24, 0x14	; 20
    1f1e:	87 60       	ori	r24, 0x07	; 7
    1f20:	84 bb       	out	0x14, r24	; 20
    1f22:	40 e0       	ldi	r20, 0x00	; 0
    1f24:	1d c0       	rjmp	.+58     	; 0x1f60 <test_PipeModule+0x60>
    1f26:	20 fd       	sbrc	r18, 0
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <test_PipeModule+0x30>
    1f2a:	83 2f       	mov	r24, r19
    1f2c:	80 95       	com	r24
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <test_PipeModule+0x32>
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	88 b9       	out	0x08, r24	; 8
    1f34:	26 95       	lsr	r18
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	8a 95       	dec	r24
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <test_PipeModule+0x38>
    1f3c:	00 c0       	rjmp	.+0      	; 0x1f3e <test_PipeModule+0x3e>
    1f3e:	84 b3       	in	r24, 0x14	; 20
    1f40:	8e 7f       	andi	r24, 0xFE	; 254
    1f42:	84 bb       	out	0x14, r24	; 20
    1f44:	82 e0       	ldi	r24, 0x02	; 2
    1f46:	8a 95       	dec	r24
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <test_PipeModule+0x46>
    1f4a:	00 c0       	rjmp	.+0      	; 0x1f4c <test_PipeModule+0x4c>
    1f4c:	84 b3       	in	r24, 0x14	; 20
    1f4e:	81 60       	ori	r24, 0x01	; 1
    1f50:	84 bb       	out	0x14, r24	; 20
    1f52:	9f 5f       	subi	r25, 0xFF	; 255
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <test_PipeModule+0x5a>
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	25 ea       	ldi	r18, 0xA5	; 165
    1f5a:	98 30       	cpi	r25, 0x08	; 8
    1f5c:	20 f3       	brcs	.-56     	; 0x1f26 <test_PipeModule+0x26>
    1f5e:	4f 5f       	subi	r20, 0xFF	; 255
    1f60:	44 30       	cpi	r20, 0x04	; 4
    1f62:	c8 f3       	brcs	.-14     	; 0x1f56 <test_PipeModule+0x56>
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0f c0       	rjmp	.+30     	; 0x1f86 <test_PipeModule+0x86>
    1f68:	82 e0       	ldi	r24, 0x02	; 2
    1f6a:	8a 95       	dec	r24
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <test_PipeModule+0x6a>
    1f6e:	00 c0       	rjmp	.+0      	; 0x1f70 <test_PipeModule+0x70>
    1f70:	84 b3       	in	r24, 0x14	; 20
    1f72:	8e 7f       	andi	r24, 0xFE	; 254
    1f74:	84 bb       	out	0x14, r24	; 20
    1f76:	82 e0       	ldi	r24, 0x02	; 2
    1f78:	8a 95       	dec	r24
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <test_PipeModule+0x78>
    1f7c:	00 c0       	rjmp	.+0      	; 0x1f7e <test_PipeModule+0x7e>
    1f7e:	84 b3       	in	r24, 0x14	; 20
    1f80:	81 60       	ori	r24, 0x01	; 1
    1f82:	84 bb       	out	0x14, r24	; 20
    1f84:	9f 5f       	subi	r25, 0xFF	; 255
    1f86:	90 32       	cpi	r25, 0x20	; 32
    1f88:	78 f3       	brcs	.-34     	; 0x1f68 <test_PipeModule+0x68>
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	40 e0       	ldi	r20, 0x00	; 0
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	ba 01       	movw	r22, r20
    1f92:	17 c0       	rjmp	.+46     	; 0x1fc2 <test_PipeModule+0xc2>
    1f94:	44 0f       	add	r20, r20
    1f96:	55 1f       	adc	r21, r21
    1f98:	66 1f       	adc	r22, r22
    1f9a:	77 1f       	adc	r23, r23
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	8a 95       	dec	r24
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <test_PipeModule+0x9e>
    1fa2:	00 c0       	rjmp	.+0      	; 0x1fa4 <test_PipeModule+0xa4>
    1fa4:	84 b3       	in	r24, 0x14	; 20
    1fa6:	8e 7f       	andi	r24, 0xFE	; 254
    1fa8:	84 bb       	out	0x14, r24	; 20
    1faa:	80 b1       	in	r24, 0x00	; 0
    1fac:	83 23       	and	r24, r19
    1fae:	09 f0       	breq	.+2      	; 0x1fb2 <test_PipeModule+0xb2>
    1fb0:	41 60       	ori	r20, 0x01	; 1
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	8a 95       	dec	r24
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <test_PipeModule+0xb4>
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <test_PipeModule+0xba>
    1fba:	84 b3       	in	r24, 0x14	; 20
    1fbc:	81 60       	ori	r24, 0x01	; 1
    1fbe:	84 bb       	out	0x14, r24	; 20
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
    1fc2:	90 32       	cpi	r25, 0x20	; 32
    1fc4:	38 f3       	brcs	.-50     	; 0x1f94 <test_PipeModule+0x94>
    1fc6:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <pipeProcessing>
    1fca:	8b b1       	in	r24, 0x0b	; 11
    1fcc:	80 68       	ori	r24, 0x80	; 128
    1fce:	8b b9       	out	0x0b, r24	; 11
    1fd0:	34 2f       	mov	r19, r20
    1fd2:	25 2f       	mov	r18, r21
    1fd4:	86 2f       	mov	r24, r22
    1fd6:	97 2f       	mov	r25, r23
    1fd8:	04 c0       	rjmp	.+8      	; 0x1fe2 <test_PipeModule+0xe2>
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	63 2f       	mov	r22, r19
    1fe4:	72 2f       	mov	r23, r18
    1fe6:	08 95       	ret

00001fe8 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1fea:	e9 e6       	ldi	r30, 0x69	; 105
    1fec:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1fee:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1ff0:	06 c0       	rjmp	.+12     	; 0x1ffe <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1ff2:	2f ef       	ldi	r18, 0xFF	; 255
    1ff4:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1ff6:	26 81       	ldd	r18, Z+6	; 0x06
    1ff8:	82 2b       	or	r24, r18
		pPipe++;
    1ffa:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1ffc:	9f 5f       	subi	r25, 0xFF	; 255
    1ffe:	90 32       	cpi	r25, 0x20	; 32
    2000:	c0 f3       	brcs	.-16     	; 0x1ff2 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    2002:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <pipe_Module>
    2006:	89 23       	and	r24, r25
    2008:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <pipe_ModuleTested>
}
    200c:	89 23       	and	r24, r25
    200e:	08 95       	ret

00002010 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    2010:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2014:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pipeProcessing>
    2018:	81 ff       	sbrs	r24, 1
    201a:	fc cf       	rjmp	.-8      	; 0x2014 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    201c:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2020:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pipeProcessing>
    2024:	81 ff       	sbrs	r24, 1
    2026:	fc cf       	rjmp	.-8      	; 0x2020 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    2028:	08 95       	ret

0000202a <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    2030:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2032:	f8 94       	cli
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <module_StartPowerOn+0x18>
    2036:	ef e4       	ldi	r30, 0x4F	; 79
    2038:	f2 e0       	ldi	r31, 0x02	; 2
    203a:	88 e2       	ldi	r24, 0x28	; 40
    203c:	82 83       	std	Z+2, r24	; 0x02
    203e:	13 82       	std	Z+3, r1	; 0x03
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	81 11       	cpse	r24, r1
    2044:	f8 cf       	rjmp	.-16     	; 0x2036 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2046:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2048:	08 95       	ret

0000204a <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    204a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <pipe_PowerStatus>
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	31 f5       	brne	.+76     	; 0x209e <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    2052:	ca df       	rcall	.-108    	; 0x1fe8 <module_TestAllInputs>
    2054:	81 11       	cpse	r24, r1
    2056:	14 c0       	rjmp	.+40     	; 0x2080 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    2058:	85 b1       	in	r24, 0x05	; 5
    205a:	80 64       	ori	r24, 0x40	; 64
    205c:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    205e:	82 e1       	ldi	r24, 0x12	; 18
    2060:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    2064:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2066:	f8 94       	cli
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	06 c0       	rjmp	.+12     	; 0x2078 <module_PowerControl+0x2e>
    206c:	ef e4       	ldi	r30, 0x4F	; 79
    206e:	f2 e0       	ldi	r31, 0x02	; 2
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	82 83       	std	Z+2, r24	; 0x02
    2074:	13 82       	std	Z+3, r1	; 0x03
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	81 11       	cpse	r24, r1
    207a:	f8 cf       	rjmp	.-16     	; 0x206c <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    207c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    207e:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    2080:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2082:	f8 94       	cli
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <module_PowerControl+0x4c>
    2088:	ef e4       	ldi	r30, 0x4F	; 79
    208a:	f2 e0       	ldi	r31, 0x02	; 2
    208c:	8c e0       	ldi	r24, 0x0C	; 12
    208e:	82 83       	std	Z+2, r24	; 0x02
    2090:	82 e0       	ldi	r24, 0x02	; 2
    2092:	83 83       	std	Z+3, r24	; 0x03
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	81 11       	cpse	r24, r1
    2098:	f7 cf       	rjmp	.-18     	; 0x2088 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    209a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    209c:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    209e:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    20a0:	b1 f4       	brne	.+44     	; 0x20ce <module_PowerControl+0x84>
    20a2:	a2 df       	rcall	.-188    	; 0x1fe8 <module_TestAllInputs>
		if (testResult == 0){
    20a4:	81 11       	cpse	r24, r1
    20a6:	04 c0       	rjmp	.+8      	; 0x20b0 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    20a8:	84 e1       	ldi	r24, 0x14	; 20
    20aa:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <pipe_PowerStatus>
    20ae:	0b c0       	rjmp	.+22     	; 0x20c6 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    20b0:	48 2f       	mov	r20, r24
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	60 e0       	ldi	r22, 0x00	; 0
    20b6:	85 e0       	ldi	r24, 0x05	; 5
    20b8:	92 d6       	rcall	.+3364   	; 0x2dde <log_putError>
			POWER_OFF
    20ba:	85 b1       	in	r24, 0x05	; 5
    20bc:	8f 7b       	andi	r24, 0xBF	; 191
    20be:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    20c0:	80 e8       	ldi	r24, 0x80	; 128
    20c2:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    20c6:	8f ef       	ldi	r24, 0xFF	; 255
    20c8:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <swTimer+0x2>
    20cc:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    20ce:	8f ef       	ldi	r24, 0xFF	; 255
    20d0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <swTimer+0x2>
    20d4:	08 95       	ret

000020d6 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0d c0       	rjmp	.+26     	; 0x20f4 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    20da:	94 30       	cpi	r25, 0x04	; 4
    20dc:	50 f4       	brcc	.+20     	; 0x20f2 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    20de:	e9 2f       	mov	r30, r25
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	81 11       	cpse	r24, r1
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <softKey_WantLong+0x14>
    20e6:	2a e0       	ldi	r18, 0x0A	; 10
    20e8:	01 c0       	rjmp	.+2      	; 0x20ec <softKey_WantLong+0x16>
    20ea:	26 e0       	ldi	r18, 0x06	; 6
    20ec:	e1 59       	subi	r30, 0x91	; 145
    20ee:	fc 4f       	sbci	r31, 0xFC	; 252
    20f0:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    20f2:	9f 5f       	subi	r25, 0xFF	; 255
    20f4:	96 30       	cpi	r25, 0x06	; 6
    20f6:	88 f3       	brcs	.-30     	; 0x20da <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    20f8:	08 95       	ret

000020fa <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    20fa:	1f 92       	push	r1
    20fc:	0f 92       	push	r0
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	0f 92       	push	r0
    2102:	11 24       	eor	r1, r1
    2104:	0b b6       	in	r0, 0x3b	; 59
    2106:	0f 92       	push	r0
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	2f 93       	push	r18
    2112:	3f 93       	push	r19
    2114:	4f 93       	push	r20
    2116:	5f 93       	push	r21
    2118:	6f 93       	push	r22
    211a:	7f 93       	push	r23
    211c:	8f 93       	push	r24
    211e:	9f 93       	push	r25
    2120:	af 93       	push	r26
    2122:	bf 93       	push	r27
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	ef 93       	push	r30
    212a:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    212c:	85 b1       	in	r24, 0x05	; 5
    212e:	80 68       	ori	r24, 0x80	; 128
    2130:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    2132:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <msecCtr>
    2136:	8f 5f       	subi	r24, 0xFF	; 255
    2138:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <msecCtr>
    213c:	83 70       	andi	r24, 0x03	; 3
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	09 f4       	brne	.+2      	; 0x2144 <__vector_21+0x4a>
    2142:	58 c1       	rjmp	.+688    	; 0x23f4 <__stack+0x1f5>
    2144:	38 f0       	brcs	.+14     	; 0x2154 <__vector_21+0x5a>
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	09 f4       	brne	.+2      	; 0x214c <__vector_21+0x52>
    214a:	a5 c1       	rjmp	.+842    	; 0x2496 <__stack+0x297>
    214c:	83 30       	cpi	r24, 0x03	; 3
    214e:	09 f4       	brne	.+2      	; 0x2152 <__vector_21+0x58>
    2150:	ca c1       	rjmp	.+916    	; 0x24e6 <__stack+0x2e7>
    2152:	05 c2       	rjmp	.+1034   	; 0x255e <__stack+0x35f>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    2154:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2158:	81 11       	cpse	r24, r1
    215a:	1a c1       	rjmp	.+564    	; 0x2390 <__stack+0x191>
    215c:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    2160:	96 fd       	sbrc	r25, 6
    2162:	16 c1       	rjmp	.+556    	; 0x2390 <__stack+0x191>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	f9 01       	movw	r30, r18
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	e2 0f       	add	r30, r18
    2170:	f3 1f       	adc	r31, r19
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e7 59       	subi	r30, 0x97	; 151
    2178:	fc 4f       	sbci	r31, 0xFC	; 252
    217a:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    217c:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    2180:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    2182:	49 17       	cp	r20, r25
    2184:	10 f4       	brcc	.+4      	; 0x218a <__vector_21+0x90>
		return data1-data2;
    2186:	94 1b       	sub	r25, r20
    2188:	03 c0       	rjmp	.+6      	; 0x2190 <__vector_21+0x96>
	} else {
		return data2-data1;
    218a:	54 2f       	mov	r21, r20
    218c:	59 1b       	sub	r21, r25
    218e:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    2190:	94 30       	cpi	r25, 0x04	; 4
    2192:	08 f0       	brcs	.+2      	; 0x2196 <__vector_21+0x9c>
    2194:	fd c0       	rjmp	.+506    	; 0x2390 <__stack+0x191>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    2196:	81 11       	cpse	r24, r1
    2198:	0e c0       	rjmp	.+28     	; 0x21b6 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    219a:	42 32       	cpi	r20, 0x22	; 34
    219c:	70 f0       	brcs	.+28     	; 0x21ba <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    219e:	4f 33       	cpi	r20, 0x3F	; 63
    21a0:	70 f0       	brcs	.+28     	; 0x21be <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    21a2:	48 36       	cpi	r20, 0x68	; 104
    21a4:	70 f0       	brcs	.+28     	; 0x21c2 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    21a6:	46 39       	cpi	r20, 0x96	; 150
    21a8:	70 f0       	brcs	.+28     	; 0x21c6 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    21aa:	4f 3b       	cpi	r20, 0xBF	; 191
    21ac:	70 f0       	brcs	.+28     	; 0x21ca <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    21ae:	48 3e       	cpi	r20, 0xE8	; 232
    21b0:	70 f4       	brcc	.+28     	; 0x21ce <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    21b2:	c6 e0       	ldi	r28, 0x06	; 6
    21b4:	0d c0       	rjmp	.+26     	; 0x21d0 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    21b6:	cf ef       	ldi	r28, 0xFF	; 255
    21b8:	0b c0       	rjmp	.+22     	; 0x21d0 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    21ba:	c4 e0       	ldi	r28, 0x04	; 4
    21bc:	09 c0       	rjmp	.+18     	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    21be:	c3 e0       	ldi	r28, 0x03	; 3
    21c0:	07 c0       	rjmp	.+14     	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    21c2:	c5 e0       	ldi	r28, 0x05	; 5
    21c4:	05 c0       	rjmp	.+10     	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    21c6:	c1 e0       	ldi	r28, 0x01	; 1
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    21ca:	c2 e0       	ldi	r28, 0x02	; 2
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    21ce:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    21d0:	f9 01       	movw	r30, r18
    21d2:	ee 0f       	add	r30, r30
    21d4:	ff 1f       	adc	r31, r31
    21d6:	e2 0f       	add	r30, r18
    21d8:	f3 1f       	adc	r31, r19
    21da:	ee 0f       	add	r30, r30
    21dc:	ff 1f       	adc	r31, r31
    21de:	e7 59       	subi	r30, 0x97	; 151
    21e0:	fc 4f       	sbci	r31, 0xFC	; 252
    21e2:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    21e4:	dc 17       	cp	r29, r28
    21e6:	09 f4       	brne	.+2      	; 0x21ea <__vector_21+0xf0>
    21e8:	48 c0       	rjmp	.+144    	; 0x227a <__stack+0x7b>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    21ea:	df 3f       	cpi	r29, 0xFF	; 255
    21ec:	19 f0       	breq	.+6      	; 0x21f4 <__vector_21+0xfa>
    21ee:	cf 3f       	cpi	r28, 0xFF	; 255
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    21f2:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    21f4:	f9 01       	movw	r30, r18
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	e2 0f       	add	r30, r18
    21fc:	f3 1f       	adc	r31, r19
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	e7 59       	subi	r30, 0x97	; 151
    2204:	fc 4f       	sbci	r31, 0xFC	; 252
    2206:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    2208:	df 3f       	cpi	r29, 0xFF	; 255
    220a:	f9 f4       	brne	.+62     	; 0x224a <__stack+0x4b>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    220c:	c9 01       	movw	r24, r18
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	fc 01       	movw	r30, r24
    2214:	e2 0f       	add	r30, r18
    2216:	f3 1f       	adc	r31, r19
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	e7 59       	subi	r30, 0x97	; 151
    221e:	fc 4f       	sbci	r31, 0xFC	; 252
    2220:	15 82       	std	Z+5, r1	; 0x05
    2222:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    2224:	fc 01       	movw	r30, r24
    2226:	e2 0f       	add	r30, r18
    2228:	f3 1f       	adc	r31, r19
    222a:	ee 0f       	add	r30, r30
    222c:	ff 1f       	adc	r31, r31
    222e:	e7 59       	subi	r30, 0x97	; 151
    2230:	fc 4f       	sbci	r31, 0xFC	; 252
    2232:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    2234:	ec 2f       	mov	r30, r28
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	e2 59       	subi	r30, 0x92	; 146
    223a:	fc 4f       	sbci	r31, 0xFC	; 252
    223c:	80 81       	ld	r24, Z
    223e:	80 ff       	sbrs	r24, 0
    2240:	a7 c0       	rjmp	.+334    	; 0x2390 <__stack+0x191>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    2242:	8c 2f       	mov	r24, r28
    2244:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <message_push>
    2248:	a3 c0       	rjmp	.+326    	; 0x2390 <__stack+0x191>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    224a:	ed 2f       	mov	r30, r29
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	e2 59       	subi	r30, 0x92	; 146
    2250:	fc 4f       	sbci	r31, 0xFC	; 252
    2252:	80 81       	ld	r24, Z
    2254:	81 ff       	sbrs	r24, 1
    2256:	9c c0       	rjmp	.+312    	; 0x2390 <__stack+0x191>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    2258:	f9 01       	movw	r30, r18
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	e2 0f       	add	r30, r18
    2260:	f3 1f       	adc	r31, r19
    2262:	ee 0f       	add	r30, r30
    2264:	ff 1f       	adc	r31, r31
    2266:	e7 59       	subi	r30, 0x97	; 151
    2268:	fc 4f       	sbci	r31, 0xFC	; 252
    226a:	83 81       	ldd	r24, Z+3	; 0x03
    226c:	83 70       	andi	r24, 0x03	; 3
    226e:	09 f0       	breq	.+2      	; 0x2272 <__stack+0x73>
    2270:	8f c0       	rjmp	.+286    	; 0x2390 <__stack+0x191>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    2272:	8d 2f       	mov	r24, r29
    2274:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <message_push>
    2278:	8b c0       	rjmp	.+278    	; 0x2390 <__stack+0x191>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    227a:	cf 3f       	cpi	r28, 0xFF	; 255
    227c:	09 f4       	brne	.+2      	; 0x2280 <__stack+0x81>
    227e:	88 c0       	rjmp	.+272    	; 0x2390 <__stack+0x191>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    2280:	f9 01       	movw	r30, r18
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	df 01       	movw	r26, r30
    2288:	a2 0f       	add	r26, r18
    228a:	b3 1f       	adc	r27, r19
    228c:	aa 0f       	add	r26, r26
    228e:	bb 1f       	adc	r27, r27
    2290:	a7 59       	subi	r26, 0x97	; 151
    2292:	bc 4f       	sbci	r27, 0xFC	; 252
    2294:	14 96       	adiw	r26, 0x04	; 4
    2296:	8d 91       	ld	r24, X+
    2298:	9c 91       	ld	r25, X
    229a:	15 97       	sbiw	r26, 0x05	; 5
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	15 96       	adiw	r26, 0x05	; 5
    22a0:	9c 93       	st	X, r25
    22a2:	8e 93       	st	-X, r24
    22a4:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    22a6:	fd 01       	movw	r30, r26
    22a8:	84 81       	ldd	r24, Z+4	; 0x04
    22aa:	95 81       	ldd	r25, Z+5	; 0x05
    22ac:	8b 34       	cpi	r24, 0x4B	; 75
    22ae:	91 05       	cpc	r25, r1
    22b0:	a9 f4       	brne	.+42     	; 0x22dc <__stack+0xdd>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    22b2:	ed 2f       	mov	r30, r29
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	e2 59       	subi	r30, 0x92	; 146
    22b8:	fc 4f       	sbci	r31, 0xFC	; 252
    22ba:	80 81       	ld	r24, Z
    22bc:	82 ff       	sbrs	r24, 2
    22be:	0e c0       	rjmp	.+28     	; 0x22dc <__stack+0xdd>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    22c0:	8c 2f       	mov	r24, r28
    22c2:	80 68       	ori	r24, 0x80	; 128
    22c4:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    22c8:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <adcNr>
    22cc:	86 e0       	ldi	r24, 0x06	; 6
    22ce:	e8 9f       	mul	r30, r24
    22d0:	f0 01       	movw	r30, r0
    22d2:	11 24       	eor	r1, r1
    22d4:	e7 59       	subi	r30, 0x97	; 151
    22d6:	fc 4f       	sbci	r31, 0xFC	; 252
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    22dc:	ed 2f       	mov	r30, r29
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	e2 59       	subi	r30, 0x92	; 146
    22e2:	fc 4f       	sbci	r31, 0xFC	; 252
    22e4:	80 81       	ld	r24, Z
    22e6:	83 ff       	sbrs	r24, 3
    22e8:	53 c0       	rjmp	.+166    	; 0x2390 <__stack+0x191>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    22ea:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	fc 01       	movw	r30, r24
    22f2:	ee 0f       	add	r30, r30
    22f4:	ff 1f       	adc	r31, r31
    22f6:	e8 0f       	add	r30, r24
    22f8:	f9 1f       	adc	r31, r25
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	e7 59       	subi	r30, 0x97	; 151
    2300:	fc 4f       	sbci	r31, 0xFC	; 252
    2302:	23 81       	ldd	r18, Z+3	; 0x03
    2304:	21 11       	cpse	r18, r1
    2306:	1e c0       	rjmp	.+60     	; 0x2344 <__stack+0x145>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2308:	fc 01       	movw	r30, r24
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	e8 0f       	add	r30, r24
    2310:	f9 1f       	adc	r31, r25
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	e7 59       	subi	r30, 0x97	; 151
    2318:	fc 4f       	sbci	r31, 0xFC	; 252
    231a:	24 81       	ldd	r18, Z+4	; 0x04
    231c:	35 81       	ldd	r19, Z+5	; 0x05
    231e:	22 33       	cpi	r18, 0x32	; 50
    2320:	31 05       	cpc	r19, r1
    2322:	b1 f5       	brne	.+108    	; 0x2390 <__stack+0x191>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2324:	26 e0       	ldi	r18, 0x06	; 6
    2326:	28 9f       	mul	r18, r24
    2328:	f0 01       	movw	r30, r0
    232a:	29 9f       	mul	r18, r25
    232c:	f0 0d       	add	r31, r0
    232e:	11 24       	eor	r1, r1
    2330:	e7 59       	subi	r30, 0x97	; 151
    2332:	fc 4f       	sbci	r31, 0xFC	; 252
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2338:	15 82       	std	Z+5, r1	; 0x05
    233a:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    233c:	8c 2f       	mov	r24, r28
    233e:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <message_push>
    2342:	26 c0       	rjmp	.+76     	; 0x2390 <__stack+0x191>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2344:	fc 01       	movw	r30, r24
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e8 0f       	add	r30, r24
    234c:	f9 1f       	adc	r31, r25
    234e:	ee 0f       	add	r30, r30
    2350:	ff 1f       	adc	r31, r31
    2352:	e7 59       	subi	r30, 0x97	; 151
    2354:	fc 4f       	sbci	r31, 0xFC	; 252
    2356:	23 81       	ldd	r18, Z+3	; 0x03
    2358:	21 30       	cpi	r18, 0x01	; 1
    235a:	d1 f4       	brne	.+52     	; 0x2390 <__stack+0x191>
    235c:	26 e0       	ldi	r18, 0x06	; 6
    235e:	28 9f       	mul	r18, r24
    2360:	f0 01       	movw	r30, r0
    2362:	29 9f       	mul	r18, r25
    2364:	f0 0d       	add	r31, r0
    2366:	11 24       	eor	r1, r1
    2368:	e7 59       	subi	r30, 0x97	; 151
    236a:	fc 4f       	sbci	r31, 0xFC	; 252
    236c:	24 81       	ldd	r18, Z+4	; 0x04
    236e:	35 81       	ldd	r19, Z+5	; 0x05
    2370:	2c 30       	cpi	r18, 0x0C	; 12
    2372:	31 05       	cpc	r19, r1
    2374:	69 f4       	brne	.+26     	; 0x2390 <__stack+0x191>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    2376:	26 e0       	ldi	r18, 0x06	; 6
    2378:	28 9f       	mul	r18, r24
    237a:	f0 01       	movw	r30, r0
    237c:	29 9f       	mul	r18, r25
    237e:	f0 0d       	add	r31, r0
    2380:	11 24       	eor	r1, r1
    2382:	e7 59       	subi	r30, 0x97	; 151
    2384:	fc 4f       	sbci	r31, 0xFC	; 252
    2386:	15 82       	std	Z+5, r1	; 0x05
    2388:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    238a:	8c 2f       	mov	r24, r28
    238c:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    2390:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2394:	8f 5f       	subi	r24, 0xFF	; 255
    2396:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    239a:	84 30       	cpi	r24, 0x04	; 4
    239c:	10 f0       	brcs	.+4      	; 0x23a2 <__stack+0x1a3>
		adcNr = 0;
    239e:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    23a2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    23a6:	81 11       	cpse	r24, r1
    23a8:	0c c0       	rjmp	.+24     	; 0x23c2 <__stack+0x1c3>
		newMux = adcKeys[adcNr].mux;
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	fc 01       	movw	r30, r24
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e8 0f       	add	r30, r24
    23b4:	f9 1f       	adc	r31, r25
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	e7 59       	subi	r30, 0x97	; 151
    23bc:	fc 4f       	sbci	r31, 0xFC	; 252
    23be:	80 81       	ld	r24, Z
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <__stack+0x1c5>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    23c2:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    23c4:	98 2f       	mov	r25, r24
    23c6:	9f 71       	andi	r25, 0x1F	; 31
    23c8:	90 66       	ori	r25, 0x60	; 96
    23ca:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    23ce:	eb e7       	ldi	r30, 0x7B	; 123
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	20 81       	ld	r18, Z
    23d4:	80 72       	andi	r24, 0x20	; 32
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	95 95       	asr	r25
    23da:	87 95       	ror	r24
    23dc:	95 95       	asr	r25
    23de:	87 95       	ror	r24
    23e0:	92 2f       	mov	r25, r18
    23e2:	9f 7d       	andi	r25, 0xDF	; 223
    23e4:	89 2b       	or	r24, r25
    23e6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    23e8:	ea e7       	ldi	r30, 0x7A	; 122
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 64       	ori	r24, 0x40	; 64
    23f0:	80 83       	st	Z, r24
    23f2:	b5 c0       	rjmp	.+362    	; 0x255e <__stack+0x35f>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    23f4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pipeProcessing>
    23f8:	80 38       	cpi	r24, 0x80	; 128
    23fa:	09 f4       	brne	.+2      	; 0x23fe <__stack+0x1ff>
    23fc:	b0 c0       	rjmp	.+352    	; 0x255e <__stack+0x35f>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    23fe:	84 b3       	in	r24, 0x14	; 20
    2400:	87 60       	ori	r24, 0x07	; 7
    2402:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2404:	84 b3       	in	r24, 0x14	; 20
    2406:	8b 7f       	andi	r24, 0xFB	; 251
    2408:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    240a:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <pipe_Module+0x1>
    240e:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2410:	e2 e0       	ldi	r30, 0x02	; 2
    2412:	ea 95       	dec	r30
    2414:	f1 f7       	brne	.-4      	; 0x2412 <__stack+0x213>
    2416:	00 c0       	rjmp	.+0      	; 0x2418 <__stack+0x219>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2418:	84 b3       	in	r24, 0x14	; 20
    241a:	84 60       	ori	r24, 0x04	; 4
    241c:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    241e:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2420:	e1 e6       	ldi	r30, 0x61	; 97
    2422:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2424:	83 81       	ldd	r24, Z+3	; 0x03
    2426:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2428:	84 81       	ldd	r24, Z+4	; 0x04
    242a:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    242c:	84 b3       	in	r24, 0x14	; 20
    242e:	81 60       	ori	r24, 0x01	; 1
    2430:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    2432:	81 81       	ldd	r24, Z+1	; 0x01
    2434:	82 2b       	or	r24, r18
    2436:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2438:	85 81       	ldd	r24, Z+5	; 0x05
    243a:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    243c:	86 81       	ldd	r24, Z+6	; 0x06
    243e:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2440:	80 b1       	in	r24, 0x00	; 0
    2442:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2444:	84 b3       	in	r24, 0x14	; 20
    2446:	8e 7f       	andi	r24, 0xFE	; 254
    2448:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    244a:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    244c:	91 50       	subi	r25, 0x01	; 1
    244e:	51 f7       	brne	.-44     	; 0x2424 <__stack+0x225>
	asm("nop");
    2450:	00 00       	nop
	asm("nop");
    2452:	00 00       	nop
	PIPE_CLOCK_H
    2454:	84 b3       	in	r24, 0x14	; 20
    2456:	81 60       	ori	r24, 0x01	; 1
    2458:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    245a:	84 b3       	in	r24, 0x14	; 20
    245c:	8d 7f       	andi	r24, 0xFD	; 253
    245e:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    2460:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pipeProcessing>
    2464:	82 60       	ori	r24, 0x02	; 2
    2466:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    246a:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    246c:	8b b1       	in	r24, 0x0b	; 11
    246e:	80 68       	ori	r24, 0x80	; 128
    2470:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    2472:	84 b3       	in	r24, 0x14	; 20
    2474:	82 60       	ori	r24, 0x02	; 2
    2476:	84 bb       	out	0x14, r24	; 20
    2478:	72 c0       	rjmp	.+228    	; 0x255e <__stack+0x35f>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    247a:	80 81       	ld	r24, Z
    247c:	81 50       	subi	r24, 0x01	; 1
    247e:	8e 3f       	cpi	r24, 0xFE	; 254
    2480:	38 f4       	brcc	.+14     	; 0x2490 <__stack+0x291>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    2482:	21 81       	ldd	r18, Z+1	; 0x01
    2484:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    2486:	25 30       	cpi	r18, 0x05	; 5
    2488:	10 f0       	brcs	.+4      	; 0x248e <__stack+0x28f>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    248a:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    248c:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    248e:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    2490:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2492:	9f 5f       	subi	r25, 0xFF	; 255
    2494:	03 c0       	rjmp	.+6      	; 0x249c <__stack+0x29d>
    2496:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    2498:	ef e4       	ldi	r30, 0x4F	; 79
    249a:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    249c:	99 30       	cpi	r25, 0x09	; 9
    249e:	68 f3       	brcs	.-38     	; 0x247a <__stack+0x27b>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    24a0:	e1 e6       	ldi	r30, 0x61	; 97
    24a2:	f2 e0       	ldi	r31, 0x02	; 2
    24a4:	80 81       	ld	r24, Z
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	80 83       	st	Z, r24
    24aa:	8a 3f       	cpi	r24, 0xFA	; 250
    24ac:	09 f0       	breq	.+2      	; 0x24b0 <__stack+0x2b1>
    24ae:	57 c0       	rjmp	.+174    	; 0x255e <__stack+0x35f>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    24b6:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    24b8:	81 81       	ldd	r24, Z+1	; 0x01
    24ba:	8f 5f       	subi	r24, 0xFF	; 255
    24bc:	81 83       	std	Z+1, r24	; 0x01
    24be:	8c 33       	cpi	r24, 0x3C	; 60
    24c0:	08 f4       	brcc	.+2      	; 0x24c4 <__stack+0x2c5>
    24c2:	4d c0       	rjmp	.+154    	; 0x255e <__stack+0x35f>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    24c4:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	8f 5f       	subi	r24, 0xFF	; 255
    24ca:	82 83       	std	Z+2, r24	; 0x02
    24cc:	8c 33       	cpi	r24, 0x3C	; 60
    24ce:	08 f4       	brcc	.+2      	; 0x24d2 <__stack+0x2d3>
    24d0:	46 c0       	rjmp	.+140    	; 0x255e <__stack+0x35f>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    24d2:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    24d4:	83 81       	ldd	r24, Z+3	; 0x03
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	83 83       	std	Z+3, r24	; 0x03
    24da:	84 36       	cpi	r24, 0x64	; 100
    24dc:	08 f4       	brcc	.+2      	; 0x24e0 <__stack+0x2e1>
    24de:	3f c0       	rjmp	.+126    	; 0x255e <__stack+0x35f>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    24e0:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <time_Uptime+0x3>
    24e4:	3c c0       	rjmp	.+120    	; 0x255e <__stack+0x35f>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    24e6:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pipeProcessing>
    24ea:	80 38       	cpi	r24, 0x80	; 128
    24ec:	c1 f1       	breq	.+112    	; 0x255e <__stack+0x35f>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    24ee:	e0 90 75 03 	lds	r14, 0x0375	; 0x800375 <pipe_Module>
    24f2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_ModuleTested>
    24f6:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    24f8:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    24fa:	09 e6       	ldi	r16, 0x69	; 105
    24fc:	12 e0       	ldi	r17, 0x02	; 2
    24fe:	2c c0       	rjmp	.+88     	; 0x2558 <__stack+0x359>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2500:	f8 01       	movw	r30, r16
    2502:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2504:	83 81       	ldd	r24, Z+3	; 0x03
    2506:	9c 2f       	mov	r25, r28
    2508:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    250a:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    250c:	84 81       	ldd	r24, Z+4	; 0x04
    250e:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2510:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    2512:	25 81       	ldd	r18, Z+5	; 0x05
    2514:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2516:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2518:	86 81       	ldd	r24, Z+6	; 0x06
    251a:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    251c:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    251e:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2520:	cd 23       	and	r28, r29
    2522:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2524:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2526:	8d 2f       	mov	r24, r29
    2528:	80 95       	com	r24
    252a:	8c 23       	and	r24, r28
    252c:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    252e:	21 f0       	breq	.+8      	; 0x2538 <__stack+0x339>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2530:	9f 2d       	mov	r25, r15
    2532:	90 62       	ori	r25, 0x20	; 32
    2534:	0e 94 76 2e 	call	0x5cec	; 0x5cec <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2538:	c0 95       	com	r28
    253a:	cd 23       	and	r28, r29
    253c:	8c 2f       	mov	r24, r28
    253e:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2540:	19 f0       	breq	.+6      	; 0x2548 <__stack+0x349>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2542:	9f 2d       	mov	r25, r15
    2544:	0e 94 76 2e 	call	0x5cec	; 0x5cec <pipeMsgPush>
		}
		curPipe++;
    2548:	08 5f       	subi	r16, 0xF8	; 248
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    254c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <pipeProcessing>
    2550:	81 60       	ori	r24, 0x01	; 1
    2552:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2556:	f3 94       	inc	r15
    2558:	ff e1       	ldi	r31, 0x1F	; 31
    255a:	ff 15       	cp	r31, r15
    255c:	88 f6       	brcc	.-94     	; 0x2500 <__stack+0x301>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    255e:	85 b1       	in	r24, 0x05	; 5
    2560:	8f 77       	andi	r24, 0x7F	; 127
    2562:	85 b9       	out	0x05, r24	; 5

}
    2564:	ff 91       	pop	r31
    2566:	ef 91       	pop	r30
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	bf 91       	pop	r27
    256e:	af 91       	pop	r26
    2570:	9f 91       	pop	r25
    2572:	8f 91       	pop	r24
    2574:	7f 91       	pop	r23
    2576:	6f 91       	pop	r22
    2578:	5f 91       	pop	r21
    257a:	4f 91       	pop	r20
    257c:	3f 91       	pop	r19
    257e:	2f 91       	pop	r18
    2580:	1f 91       	pop	r17
    2582:	0f 91       	pop	r16
    2584:	ff 90       	pop	r15
    2586:	ef 90       	pop	r14
    2588:	0f 90       	pop	r0
    258a:	0b be       	out	0x3b, r0	; 59
    258c:	0f 90       	pop	r0
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	0f 90       	pop	r0
    2592:	1f 90       	pop	r1
    2594:	18 95       	reti

00002596 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    2596:	e8 2f       	mov	r30, r24
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	ee 0f       	add	r30, r30
    259c:	ff 1f       	adc	r31, r31
    259e:	ee 0f       	add	r30, r30
    25a0:	ff 1f       	adc	r31, r31
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	e7 59       	subi	r30, 0x97	; 151
    25a8:	fd 4f       	sbci	r31, 0xFD	; 253
    25aa:	60 95       	com	r22
    25ac:	81 81       	ldd	r24, Z+1	; 0x01
    25ae:	68 23       	and	r22, r24
    25b0:	61 83       	std	Z+1, r22	; 0x01
    25b2:	08 95       	ret

000025b4 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    25b4:	e8 2f       	mov	r30, r24
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	ee 0f       	add	r30, r30
    25ba:	ff 1f       	adc	r31, r31
    25bc:	ee 0f       	add	r30, r30
    25be:	ff 1f       	adc	r31, r31
    25c0:	ee 0f       	add	r30, r30
    25c2:	ff 1f       	adc	r31, r31
    25c4:	e7 59       	subi	r30, 0x97	; 151
    25c6:	fd 4f       	sbci	r31, 0xFD	; 253
    25c8:	81 81       	ldd	r24, Z+1	; 0x01
    25ca:	68 2b       	or	r22, r24
    25cc:	61 83       	std	Z+1, r22	; 0x01
    25ce:	08 95       	ret

000025d0 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    25d0:	8f ef       	ldi	r24, 0xFF	; 255
    25d2:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    25d4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    25d6:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    25d8:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    25da:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    25dc:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    25de:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    25e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    25e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    25e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    25ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    25f0:	8a b1       	in	r24, 0x0a	; 10
    25f2:	80 68       	ori	r24, 0x80	; 128
    25f4:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    25f6:	8b b1       	in	r24, 0x0b	; 11
    25f8:	8f 77       	andi	r24, 0x7F	; 127
    25fa:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    25fc:	84 b1       	in	r24, 0x04	; 4
    25fe:	80 64       	ori	r24, 0x40	; 64
    2600:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    2602:	85 b1       	in	r24, 0x05	; 5
    2604:	8f 7b       	andi	r24, 0xBF	; 191
    2606:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2608:	84 b1       	in	r24, 0x04	; 4
    260a:	80 63       	ori	r24, 0x30	; 48
    260c:	84 b9       	out	0x04, r24	; 4
    260e:	08 95       	ret

00002610 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2610:	88 23       	and	r24, r24
    2612:	34 f4       	brge	.+12     	; 0x2620 <lcd_write_nibble+0x10>
    2614:	e2 e0       	ldi	r30, 0x02	; 2
    2616:	f1 e0       	ldi	r31, 0x01	; 1
    2618:	90 81       	ld	r25, Z
    261a:	90 61       	ori	r25, 0x10	; 16
    261c:	90 83       	st	Z, r25
    261e:	05 c0       	rjmp	.+10     	; 0x262a <lcd_write_nibble+0x1a>
    2620:	e2 e0       	ldi	r30, 0x02	; 2
    2622:	f1 e0       	ldi	r31, 0x01	; 1
    2624:	90 81       	ld	r25, Z
    2626:	9f 7e       	andi	r25, 0xEF	; 239
    2628:	90 83       	st	Z, r25
    262a:	86 ff       	sbrs	r24, 6
    262c:	06 c0       	rjmp	.+12     	; 0x263a <lcd_write_nibble+0x2a>
    262e:	e2 e0       	ldi	r30, 0x02	; 2
    2630:	f1 e0       	ldi	r31, 0x01	; 1
    2632:	90 81       	ld	r25, Z
    2634:	98 60       	ori	r25, 0x08	; 8
    2636:	90 83       	st	Z, r25
    2638:	05 c0       	rjmp	.+10     	; 0x2644 <lcd_write_nibble+0x34>
    263a:	e2 e0       	ldi	r30, 0x02	; 2
    263c:	f1 e0       	ldi	r31, 0x01	; 1
    263e:	90 81       	ld	r25, Z
    2640:	97 7f       	andi	r25, 0xF7	; 247
    2642:	90 83       	st	Z, r25
    2644:	85 ff       	sbrs	r24, 5
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <lcd_write_nibble+0x40>
    2648:	9e b1       	in	r25, 0x0e	; 14
    264a:	98 60       	ori	r25, 0x08	; 8
    264c:	9e b9       	out	0x0e, r25	; 14
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <lcd_write_nibble+0x46>
    2650:	9e b1       	in	r25, 0x0e	; 14
    2652:	97 7f       	andi	r25, 0xF7	; 247
    2654:	9e b9       	out	0x0e, r25	; 14
    2656:	84 ff       	sbrs	r24, 4
    2658:	04 c0       	rjmp	.+8      	; 0x2662 <lcd_write_nibble+0x52>
    265a:	84 b3       	in	r24, 0x14	; 20
    265c:	80 62       	ori	r24, 0x20	; 32
    265e:	84 bb       	out	0x14, r24	; 20
    2660:	03 c0       	rjmp	.+6      	; 0x2668 <lcd_write_nibble+0x58>
    2662:	84 b3       	in	r24, 0x14	; 20
    2664:	8f 7d       	andi	r24, 0xDF	; 223
    2666:	84 bb       	out	0x14, r24	; 20
    2668:	e2 e0       	ldi	r30, 0x02	; 2
    266a:	f1 e0       	ldi	r31, 0x01	; 1
    266c:	80 81       	ld	r24, Z
    266e:	80 64       	ori	r24, 0x40	; 64
    2670:	80 83       	st	Z, r24
    2672:	85 e0       	ldi	r24, 0x05	; 5
    2674:	8a 95       	dec	r24
    2676:	f1 f7       	brne	.-4      	; 0x2674 <lcd_write_nibble+0x64>
    2678:	00 00       	nop
    267a:	80 81       	ld	r24, Z
    267c:	8f 7b       	andi	r24, 0xBF	; 191
    267e:	80 83       	st	Z, r24
    2680:	85 e0       	ldi	r24, 0x05	; 5
    2682:	8a 95       	dec	r24
    2684:	f1 f7       	brne	.-4      	; 0x2682 <lcd_write_nibble+0x72>
    2686:	00 00       	nop
    2688:	08 95       	ret

0000268a <lcd_write_character>:
    268a:	cf 93       	push	r28
    268c:	df 93       	push	r29
    268e:	d8 2f       	mov	r29, r24
    2690:	c5 b1       	in	r28, 0x05	; 5
    2692:	c0 73       	andi	r28, 0x30	; 48
    2694:	85 b1       	in	r24, 0x05	; 5
    2696:	8f 7c       	andi	r24, 0xCF	; 207
    2698:	80 61       	ori	r24, 0x10	; 16
    269a:	85 b9       	out	0x05, r24	; 5
    269c:	e2 e0       	ldi	r30, 0x02	; 2
    269e:	f1 e0       	ldi	r31, 0x01	; 1
    26a0:	80 81       	ld	r24, Z
    26a2:	80 62       	ori	r24, 0x20	; 32
    26a4:	80 83       	st	Z, r24
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7b       	andi	r24, 0xBF	; 191
    26aa:	80 83       	st	Z, r24
    26ac:	8d 2f       	mov	r24, r29
    26ae:	b0 df       	rcall	.-160    	; 0x2610 <lcd_write_nibble>
    26b0:	8d 2f       	mov	r24, r29
    26b2:	82 95       	swap	r24
    26b4:	80 7f       	andi	r24, 0xF0	; 240
    26b6:	ac df       	rcall	.-168    	; 0x2610 <lcd_write_nibble>
    26b8:	8f ef       	ldi	r24, 0xFF	; 255
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	f1 f7       	brne	.-4      	; 0x26bc <lcd_write_character+0x32>
    26c0:	00 c0       	rjmp	.+0      	; 0x26c2 <lcd_write_character+0x38>
    26c2:	00 00       	nop
    26c4:	85 b1       	in	r24, 0x05	; 5
    26c6:	80 73       	andi	r24, 0x30	; 48
    26c8:	c8 2b       	or	r28, r24
    26ca:	c5 b9       	out	0x05, r28	; 5
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	08 95       	ret

000026d2 <lcd_write_command>:
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	d8 2f       	mov	r29, r24
    26d8:	c5 b1       	in	r28, 0x05	; 5
    26da:	c0 73       	andi	r28, 0x30	; 48
    26dc:	85 b1       	in	r24, 0x05	; 5
    26de:	8f 7c       	andi	r24, 0xCF	; 207
    26e0:	80 61       	ori	r24, 0x10	; 16
    26e2:	85 b9       	out	0x05, r24	; 5
    26e4:	e2 e0       	ldi	r30, 0x02	; 2
    26e6:	f1 e0       	ldi	r31, 0x01	; 1
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 7d       	andi	r24, 0xDF	; 223
    26ec:	80 83       	st	Z, r24
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 7b       	andi	r24, 0xBF	; 191
    26f2:	80 83       	st	Z, r24
    26f4:	8d 2f       	mov	r24, r29
    26f6:	8c df       	rcall	.-232    	; 0x2610 <lcd_write_nibble>
    26f8:	8d 2f       	mov	r24, r29
    26fa:	82 95       	swap	r24
    26fc:	80 7f       	andi	r24, 0xF0	; 240
    26fe:	88 df       	rcall	.-240    	; 0x2610 <lcd_write_nibble>
    2700:	d1 50       	subi	r29, 0x01	; 1
    2702:	d2 30       	cpi	r29, 0x02	; 2
    2704:	38 f4       	brcc	.+14     	; 0x2714 <lcd_write_command+0x42>
    2706:	8f e0       	ldi	r24, 0x0F	; 15
    2708:	97 e2       	ldi	r25, 0x27	; 39
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <lcd_write_command+0x38>
    270e:	00 c0       	rjmp	.+0      	; 0x2710 <lcd_write_command+0x3e>
    2710:	00 00       	nop
    2712:	06 c0       	rjmp	.+12     	; 0x2720 <lcd_write_command+0x4e>
    2714:	8f ef       	ldi	r24, 0xFF	; 255
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <lcd_write_command+0x46>
    271c:	00 c0       	rjmp	.+0      	; 0x271e <lcd_write_command+0x4c>
    271e:	00 00       	nop
    2720:	85 b1       	in	r24, 0x05	; 5
    2722:	80 73       	andi	r24, 0x30	; 48
    2724:	c8 2b       	or	r28, r24
    2726:	c5 b9       	out	0x05, r28	; 5
    2728:	df 91       	pop	r29
    272a:	cf 91       	pop	r28
    272c:	08 95       	ret

0000272e <lcd_init>:
    272e:	cf 93       	push	r28
    2730:	c5 b1       	in	r28, 0x05	; 5
    2732:	c0 73       	andi	r28, 0x30	; 48
    2734:	85 b1       	in	r24, 0x05	; 5
    2736:	8f 7c       	andi	r24, 0xCF	; 207
    2738:	80 61       	ori	r24, 0x10	; 16
    273a:	85 b9       	out	0x05, r24	; 5
    273c:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <lcd_displayingMessage>
    2740:	e1 e0       	ldi	r30, 0x01	; 1
    2742:	f1 e0       	ldi	r31, 0x01	; 1
    2744:	80 81       	ld	r24, Z
    2746:	80 61       	ori	r24, 0x10	; 16
    2748:	80 83       	st	Z, r24
    274a:	80 81       	ld	r24, Z
    274c:	88 60       	ori	r24, 0x08	; 8
    274e:	80 83       	st	Z, r24
    2750:	8d b1       	in	r24, 0x0d	; 13
    2752:	88 60       	ori	r24, 0x08	; 8
    2754:	8d b9       	out	0x0d, r24	; 13
    2756:	83 b3       	in	r24, 0x13	; 19
    2758:	80 62       	ori	r24, 0x20	; 32
    275a:	83 bb       	out	0x13, r24	; 19
    275c:	80 81       	ld	r24, Z
    275e:	80 64       	ori	r24, 0x40	; 64
    2760:	80 83       	st	Z, r24
    2762:	80 81       	ld	r24, Z
    2764:	80 62       	ori	r24, 0x20	; 32
    2766:	80 83       	st	Z, r24
    2768:	2f ef       	ldi	r18, 0xFF	; 255
    276a:	81 ee       	ldi	r24, 0xE1	; 225
    276c:	94 e0       	ldi	r25, 0x04	; 4
    276e:	21 50       	subi	r18, 0x01	; 1
    2770:	80 40       	sbci	r24, 0x00	; 0
    2772:	90 40       	sbci	r25, 0x00	; 0
    2774:	e1 f7       	brne	.-8      	; 0x276e <lcd_init+0x40>
    2776:	00 c0       	rjmp	.+0      	; 0x2778 <lcd_init+0x4a>
    2778:	00 00       	nop
    277a:	e2 e0       	ldi	r30, 0x02	; 2
    277c:	f1 e0       	ldi	r31, 0x01	; 1
    277e:	80 81       	ld	r24, Z
    2780:	8f 7d       	andi	r24, 0xDF	; 223
    2782:	80 83       	st	Z, r24
    2784:	80 81       	ld	r24, Z
    2786:	8f 7b       	andi	r24, 0xBF	; 191
    2788:	80 83       	st	Z, r24
    278a:	80 e3       	ldi	r24, 0x30	; 48
    278c:	41 df       	rcall	.-382    	; 0x2610 <lcd_write_nibble>
    278e:	8f e1       	ldi	r24, 0x1F	; 31
    2790:	9e e4       	ldi	r25, 0x4E	; 78
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <lcd_init+0x64>
    2796:	00 c0       	rjmp	.+0      	; 0x2798 <lcd_init+0x6a>
    2798:	00 00       	nop
    279a:	80 e3       	ldi	r24, 0x30	; 48
    279c:	39 df       	rcall	.-398    	; 0x2610 <lcd_write_nibble>
    279e:	8f e1       	ldi	r24, 0x1F	; 31
    27a0:	9e e4       	ldi	r25, 0x4E	; 78
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <lcd_init+0x74>
    27a6:	00 c0       	rjmp	.+0      	; 0x27a8 <lcd_init+0x7a>
    27a8:	00 00       	nop
    27aa:	80 e3       	ldi	r24, 0x30	; 48
    27ac:	31 df       	rcall	.-414    	; 0x2610 <lcd_write_nibble>
    27ae:	8f e1       	ldi	r24, 0x1F	; 31
    27b0:	9e e4       	ldi	r25, 0x4E	; 78
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	f1 f7       	brne	.-4      	; 0x27b2 <lcd_init+0x84>
    27b6:	00 c0       	rjmp	.+0      	; 0x27b8 <lcd_init+0x8a>
    27b8:	00 00       	nop
    27ba:	88 e2       	ldi	r24, 0x28	; 40
    27bc:	29 df       	rcall	.-430    	; 0x2610 <lcd_write_nibble>
    27be:	8f ef       	ldi	r24, 0xFF	; 255
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <lcd_init+0x94>
    27c6:	00 c0       	rjmp	.+0      	; 0x27c8 <lcd_init+0x9a>
    27c8:	00 00       	nop
    27ca:	88 e2       	ldi	r24, 0x28	; 40
    27cc:	82 df       	rcall	.-252    	; 0x26d2 <lcd_write_command>
    27ce:	88 e0       	ldi	r24, 0x08	; 8
    27d0:	80 df       	rcall	.-256    	; 0x26d2 <lcd_write_command>
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	7e df       	rcall	.-260    	; 0x26d2 <lcd_write_command>
    27d6:	86 e0       	ldi	r24, 0x06	; 6
    27d8:	7c df       	rcall	.-264    	; 0x26d2 <lcd_write_command>
    27da:	8c e0       	ldi	r24, 0x0C	; 12
    27dc:	7a df       	rcall	.-268    	; 0x26d2 <lcd_write_command>
    27de:	85 b1       	in	r24, 0x05	; 5
    27e0:	80 73       	andi	r24, 0x30	; 48
    27e2:	c8 2b       	or	r28, r24
    27e4:	c5 b9       	out	0x05, r28	; 5
    27e6:	cf 91       	pop	r28
    27e8:	08 95       	ret

000027ea <lcd_goto>:
    27ea:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <lcd_cursorPos>
    27ee:	80 58       	subi	r24, 0x80	; 128
    27f0:	70 cf       	rjmp	.-288    	; 0x26d2 <lcd_write_command>
    27f2:	08 95       	ret

000027f4 <lcd_clrscr>:
    27f4:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <lcd_cursorPos>
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	6b df       	rcall	.-298    	; 0x26d2 <lcd_write_command>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	e8 e7       	ldi	r30, 0x78	; 120
    2800:	f3 e0       	ldi	r31, 0x03	; 3
    2802:	04 c0       	rjmp	.+8      	; 0x280c <lcd_clrscr+0x18>
    2804:	90 e2       	ldi	r25, 0x20	; 32
    2806:	90 83       	st	Z, r25
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	31 96       	adiw	r30, 0x01	; 1
    280c:	80 35       	cpi	r24, 0x50	; 80
    280e:	d0 f3       	brcs	.-12     	; 0x2804 <lcd_clrscr+0x10>
    2810:	08 95       	ret

00002812 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	// convert non linear LCD-Cursor to linear Cursor 0..19 = line 0, 20..39 = line 1...
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    2812:	84 31       	cpi	r24, 0x14	; 20
    2814:	98 f0       	brcs	.+38     	; 0x283c <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    2816:	90 ec       	ldi	r25, 0xC0	; 192
    2818:	98 0f       	add	r25, r24
    281a:	94 31       	cpi	r25, 0x14	; 20
    281c:	10 f4       	brcc	.+4      	; 0x2822 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    281e:	8c 52       	subi	r24, 0x2C	; 44
    2820:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    2822:	9c ee       	ldi	r25, 0xEC	; 236
    2824:	98 0f       	add	r25, r24
    2826:	94 31       	cpi	r25, 0x14	; 20
    2828:	10 f4       	brcc	.+4      	; 0x282e <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    282a:	8c 5e       	subi	r24, 0xEC	; 236
    282c:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    282e:	9c ea       	ldi	r25, 0xAC	; 172
    2830:	98 0f       	add	r25, r24
    2832:	94 31       	cpi	r25, 0x14	; 20
    2834:	10 f4       	brcc	.+4      	; 0x283a <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    2836:	88 51       	subi	r24, 0x18	; 24
    2838:	08 95       	ret
	}
	return 0xFF; // default should not occure
    283a:	8f ef       	ldi	r24, 0xFF	; 255

}
    283c:	08 95       	ret

0000283e <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	d8 2f       	mov	r29, r24
	// V 0.76 no output if displaying message
	if ((lcd_displayingMessage == FALSE) || (lcd_cursorPos < MENU_LCD_CURSOR_MAINMESSAGE) 
    2844:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <lcd_displayingMessage>
    2848:	88 23       	and	r24, r24
    284a:	31 f0       	breq	.+12     	; 0x2858 <lcd_putc+0x1a>
    284c:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <lcd_cursorPos>
    2850:	80 34       	cpi	r24, 0x40	; 64
    2852:	10 f0       	brcs	.+4      	; 0x2858 <lcd_putc+0x1a>
		|| (lcd_cursorPos >= MENU_LCD_CURSOR_MAINMESSAGE+MENU_LCD_LEN_MAINMESSAGE)) {
    2854:	84 35       	cpi	r24, 0x54	; 84
    2856:	10 f0       	brcs	.+4      	; 0x285c <lcd_putc+0x1e>
		lcd_write_character(c);
    2858:	8d 2f       	mov	r24, r29
    285a:	17 df       	rcall	.-466    	; 0x268a <lcd_write_character>
	}
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    285c:	c0 91 c8 03 	lds	r28, 0x03C8	; 0x8003c8 <lcd_cursorPos>
    2860:	8c 2f       	mov	r24, r28
    2862:	d7 df       	rcall	.-82     	; 0x2812 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2864:	8f 3f       	cpi	r24, 0xFF	; 255
    2866:	29 f1       	breq	.+74     	; 0x28b2 <lcd_putc+0x74>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    2868:	d1 3a       	cpi	r29, 0xA1	; 161
    286a:	79 f0       	breq	.+30     	; 0x288a <lcd_putc+0x4c>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    286c:	d0 38       	cpi	r29, 0x80	; 128
    286e:	79 f0       	breq	.+30     	; 0x288e <lcd_putc+0x50>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2870:	d5 3a       	cpi	r29, 0xA5	; 165
    2872:	79 f0       	breq	.+30     	; 0x2892 <lcd_putc+0x54>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    2874:	da 32       	cpi	r29, 0x2A	; 42
    2876:	79 f0       	breq	.+30     	; 0x2896 <lcd_putc+0x58>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    2878:	d2 3e       	cpi	r29, 0xE2	; 226
    287a:	79 f0       	breq	.+30     	; 0x289a <lcd_putc+0x5c>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    287c:	d5 3f       	cpi	r29, 0xF5	; 245
    287e:	79 f0       	breq	.+30     	; 0x289e <lcd_putc+0x60>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2880:	df 3e       	cpi	r29, 0xEF	; 239
    2882:	79 f0       	breq	.+30     	; 0x28a2 <lcd_putc+0x64>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    2884:	d1 3e       	cpi	r29, 0xE1	; 225
    2886:	81 f4       	brne	.+32     	; 0x28a8 <lcd_putc+0x6a>
    2888:	0e c0       	rjmp	.+28     	; 0x28a6 <lcd_putc+0x68>
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    288a:	d0 e2       	ldi	r29, 0x20	; 32
    288c:	0d c0       	rjmp	.+26     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    288e:	d0 e2       	ldi	r29, 0x20	; 32
    2890:	0b c0       	rjmp	.+22     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    2892:	d4 e1       	ldi	r29, 0x14	; 20
    2894:	09 c0       	rjmp	.+18     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    2896:	d5 e1       	ldi	r29, 0x15	; 21
    2898:	07 c0       	rjmp	.+14     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    289a:	d3 e1       	ldi	r29, 0x13	; 19
    289c:	05 c0       	rjmp	.+10     	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    289e:	d2 e1       	ldi	r29, 0x12	; 18
    28a0:	03 c0       	rjmp	.+6      	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    28a2:	d1 e1       	ldi	r29, 0x11	; 17
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    28a6:	d0 e1       	ldi	r29, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    28a8:	e8 2f       	mov	r30, r24
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	e8 58       	subi	r30, 0x88	; 136
    28ae:	fc 4f       	sbci	r31, 0xFC	; 252
    28b0:	d0 83       	st	Z, r29
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    28b2:	cf 5f       	subi	r28, 0xFF	; 255
    28b4:	cf 77       	andi	r28, 0x7F	; 127
    28b6:	c0 93 c8 03 	sts	0x03C8, r28	; 0x8003c8 <lcd_cursorPos>
}
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	08 95       	ret

000028c0 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    28c0:	cf 93       	push	r28
    28c2:	df 93       	push	r29
    28c4:	fc 01       	movw	r30, r24
	if (s != NULL){
    28c6:	89 2b       	or	r24, r25
    28c8:	19 f4       	brne	.+6      	; 0x28d0 <lcd_puts+0x10>
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    28cc:	b8 df       	rcall	.-144    	; 0x283e <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    28ce:	fe 01       	movw	r30, r28
    28d0:	ef 01       	movw	r28, r30
    28d2:	21 96       	adiw	r28, 0x01	; 1
    28d4:	80 81       	ld	r24, Z
    28d6:	81 11       	cpse	r24, r1
    28d8:	f9 cf       	rjmp	.-14     	; 0x28cc <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	08 95       	ret

000028e0 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    28e6:	89 2b       	or	r24, r25
    28e8:	19 f4       	brne	.+6      	; 0x28f0 <lcd_puts_P+0x10>
    28ea:	07 c0       	rjmp	.+14     	; 0x28fa <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    28ec:	a8 df       	rcall	.-176    	; 0x283e <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    28ee:	fe 01       	movw	r30, r28
    28f0:	ef 01       	movw	r28, r30
    28f2:	21 96       	adiw	r28, 0x01	; 1
    28f4:	84 91       	lpm	r24, Z
    28f6:	81 11       	cpse	r24, r1
    28f8:	f9 cf       	rjmp	.-14     	; 0x28ec <lcd_puts_P+0xc>
		lcd_putc(c);
	}
}
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	08 95       	ret

00002900 <lcd_message>:

//------------------------------ MESSAGE ------------------------------

uint8_t lcd_displayingMessage;

void lcd_message(const char *pMessage){
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	8c 01       	movw	r16, r24
	uint8_t saveCursor = lcd_cursorPos;
    290c:	f0 90 c8 03 	lds	r15, 0x03C8	; 0x8003c8 <lcd_cursorPos>
	uint8_t textLen = get_StrLen(pMessage);
    2910:	0e 94 68 3e 	call	0x7cd0	; 0x7cd0 <get_StrLen>
    2914:	d8 2f       	mov	r29, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2916:	80 e4       	ldi	r24, 0x40	; 64
    2918:	68 df       	rcall	.-304    	; 0x27ea <lcd_goto>
	uint8_t pos = 0;
    291a:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    291c:	03 c0       	rjmp	.+6      	; 0x2924 <lcd_message+0x24>
		lcd_write_character(' '); // blank but do not write to buffer
    291e:	80 e2       	ldi	r24, 0x20	; 32
    2920:	b4 de       	rcall	.-664    	; 0x268a <lcd_write_character>
		pos++;
    2922:	cf 5f       	subi	r28, 0xFF	; 255
void lcd_message(const char *pMessage){
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t textLen = get_StrLen(pMessage);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2924:	2c 2f       	mov	r18, r28
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	84 e1       	ldi	r24, 0x14	; 20
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	8d 1b       	sub	r24, r29
    292e:	91 09       	sbc	r25, r1
    2930:	95 95       	asr	r25
    2932:	87 95       	ror	r24
    2934:	28 17       	cp	r18, r24
    2936:	39 07       	cpc	r19, r25
    2938:	94 f3       	brlt	.-28     	; 0x291e <lcd_message+0x1e>
    293a:	04 c0       	rjmp	.+8      	; 0x2944 <lcd_message+0x44>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}	
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
    293c:	0f 5f       	subi	r16, 0xFF	; 255
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	a4 de       	rcall	.-696    	; 0x268a <lcd_write_character>
		pos++;
    2942:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}	
	while (*pMessage != 0){
    2944:	f8 01       	movw	r30, r16
    2946:	80 81       	ld	r24, Z
    2948:	81 11       	cpse	r24, r1
    294a:	f8 cf       	rjmp	.-16     	; 0x293c <lcd_message+0x3c>
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    294c:	03 c0       	rjmp	.+6      	; 0x2954 <lcd_message+0x54>
    294e:	80 e2       	ldi	r24, 0x20	; 32
    2950:	9c de       	rcall	.-712    	; 0x268a <lcd_write_character>
	}	
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    2952:	c1 2f       	mov	r28, r17
    2954:	11 e0       	ldi	r17, 0x01	; 1
    2956:	1c 0f       	add	r17, r28
    2958:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    295a:	c8 f3       	brcs	.-14     	; 0x294e <lcd_message+0x4e>
    295c:	8f 2d       	mov	r24, r15
    295e:	45 df       	rcall	.-374    	; 0x27ea <lcd_goto>
	lcd_displayingMessage = TRUE;
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <lcd_displayingMessage>
	TIMER_SET(TIMER_MENUDATA_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2966:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2968:	f8 94       	cli
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	06 c0       	rjmp	.+12     	; 0x297a <lcd_message+0x7a>
    296e:	ef e4       	ldi	r30, 0x4F	; 79
    2970:	f2 e0       	ldi	r31, 0x02	; 2
    2972:	84 e6       	ldi	r24, 0x64	; 100
    2974:	86 87       	std	Z+14, r24	; 0x0e
    2976:	17 86       	std	Z+15, r1	; 0x0f
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	81 11       	cpse	r24, r1
    297c:	f8 cf       	rjmp	.-16     	; 0x296e <lcd_message+0x6e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    297e:	9f bf       	out	0x3f, r25	; 63
}
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	ff 90       	pop	r15
    298a:	08 95       	ret

0000298c <lcd_message_P>:
	
void lcd_message_P(const char *pMessage_P){
    298c:	ff 92       	push	r15
    298e:	0f 93       	push	r16
    2990:	1f 93       	push	r17
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	8c 01       	movw	r16, r24
	uint8_t saveCursor = lcd_cursorPos;
    2998:	d0 91 c8 03 	lds	r29, 0x03C8	; 0x8003c8 <lcd_cursorPos>
	uint8_t textLen = get_StrLenP(pMessage_P);
    299c:	0e 94 5e 3e 	call	0x7cbc	; 0x7cbc <get_StrLenP>
    29a0:	f8 2e       	mov	r15, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    29a2:	80 e4       	ldi	r24, 0x40	; 64
    29a4:	22 df       	rcall	.-444    	; 0x27ea <lcd_goto>
	uint8_t pos = 0;
    29a6:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <lcd_message_P+0x24>
		lcd_write_character(' '); // blank but do not write to buffer
    29aa:	80 e2       	ldi	r24, 0x20	; 32
    29ac:	6e de       	rcall	.-804    	; 0x268a <lcd_write_character>
		pos++;
    29ae:	cf 5f       	subi	r28, 0xFF	; 255
void lcd_message_P(const char *pMessage_P){
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t textLen = get_StrLenP(pMessage_P);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    29b0:	2c 2f       	mov	r18, r28
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	84 e1       	ldi	r24, 0x14	; 20
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	8f 19       	sub	r24, r15
    29ba:	91 09       	sbc	r25, r1
    29bc:	95 95       	asr	r25
    29be:	87 95       	ror	r24
    29c0:	28 17       	cp	r18, r24
    29c2:	39 07       	cpc	r19, r25
    29c4:	94 f3       	brlt	.-28     	; 0x29aa <lcd_message_P+0x1e>
    29c6:	06 c0       	rjmp	.+12     	; 0x29d4 <lcd_message_P+0x48>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}	
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
    29c8:	0f 5f       	subi	r16, 0xFF	; 255
    29ca:	1f 4f       	sbci	r17, 0xFF	; 255
    29cc:	fc 01       	movw	r30, r24
    29ce:	84 91       	lpm	r24, Z
    29d0:	5c de       	rcall	.-840    	; 0x268a <lcd_write_character>
		pos++;
    29d2:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}	
	while (pgm_read_byte(pMessage_P) != 0){
    29d4:	c8 01       	movw	r24, r16
    29d6:	f8 01       	movw	r30, r16
    29d8:	24 91       	lpm	r18, Z
    29da:	21 11       	cpse	r18, r1
    29dc:	f5 cf       	rjmp	.-22     	; 0x29c8 <lcd_message_P+0x3c>
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    29de:	03 c0       	rjmp	.+6      	; 0x29e6 <lcd_message_P+0x5a>
    29e0:	80 e2       	ldi	r24, 0x20	; 32
    29e2:	53 de       	rcall	.-858    	; 0x268a <lcd_write_character>
	}	
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    29e4:	c1 2f       	mov	r28, r17
    29e6:	11 e0       	ldi	r17, 0x01	; 1
    29e8:	1c 0f       	add	r17, r28
    29ea:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    29ec:	c8 f3       	brcs	.-14     	; 0x29e0 <lcd_message_P+0x54>
    29ee:	8d 2f       	mov	r24, r29
    29f0:	fc de       	rcall	.-520    	; 0x27ea <lcd_goto>
	lcd_displayingMessage = TRUE;
    29f2:	8f ef       	ldi	r24, 0xFF	; 255
    29f4:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <lcd_displayingMessage>
	TIMER_SET(TIMER_MENUDATA_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    29f8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    29fa:	f8 94       	cli
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	06 c0       	rjmp	.+12     	; 0x2a0c <lcd_message_P+0x80>
    2a00:	ef e4       	ldi	r30, 0x4F	; 79
    2a02:	f2 e0       	ldi	r31, 0x02	; 2
    2a04:	84 e6       	ldi	r24, 0x64	; 100
    2a06:	86 87       	std	Z+14, r24	; 0x0e
    2a08:	17 86       	std	Z+15, r1	; 0x0f
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	81 11       	cpse	r24, r1
    2a0e:	f8 cf       	rjmp	.-16     	; 0x2a00 <lcd_message_P+0x74>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a10:	9f bf       	out	0x3f, r25	; 63
}
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	08 95       	ret

00002a1e <lcd_message_clear>:


void lcd_message_clear(){
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
	uint8_t saveCursor = lcd_cursorPos;
    2a26:	00 91 c8 03 	lds	r16, 0x03C8	; 0x8003c8 <lcd_cursorPos>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
    2a2a:	80 e4       	ldi	r24, 0x40	; 64
    2a2c:	f2 de       	rcall	.-540    	; 0x2812 <getCursorFromLCDRAMcursor>
    2a2e:	c8 2f       	mov	r28, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2a30:	80 e4       	ldi	r24, 0x40	; 64
    2a32:	db de       	rcall	.-586    	; 0x27ea <lcd_goto>
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2a34:	d0 e0       	ldi	r29, 0x00	; 0
    2a36:	22 c0       	rjmp	.+68     	; 0x2a7c <lcd_message_clear+0x5e>
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2a38:	11 e0       	ldi	r17, 0x01	; 1
    2a3a:	1c 0f       	add	r17, r28
    2a3c:	ec 2f       	mov	r30, r28
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	e8 58       	subi	r30, 0x88	; 136
    2a42:	fc 4f       	sbci	r31, 0xFC	; 252
    2a44:	80 81       	ld	r24, Z
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
    2a46:	84 31       	cpi	r24, 0x14	; 20
    2a48:	59 f0       	breq	.+22     	; 0x2a60 <lcd_message_clear+0x42>
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHARREPL_STATEON){
    2a4a:	85 31       	cpi	r24, 0x15	; 21
    2a4c:	59 f0       	breq	.+22     	; 0x2a64 <lcd_message_clear+0x46>
			stored_char = LCD_CHAR_STATEON; 
		} else if (stored_char == LCD_CHARREPL_SZ){
    2a4e:	83 31       	cpi	r24, 0x13	; 19
    2a50:	59 f0       	breq	.+22     	; 0x2a68 <lcd_message_clear+0x4a>
			stored_char = LCD_CHAR_SZ; 
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
    2a52:	82 31       	cpi	r24, 0x12	; 18
    2a54:	59 f0       	breq	.+22     	; 0x2a6c <lcd_message_clear+0x4e>
			stored_char = LCD_CHAR_UMLAUTU; 
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
    2a56:	81 31       	cpi	r24, 0x11	; 17
    2a58:	59 f0       	breq	.+22     	; 0x2a70 <lcd_message_clear+0x52>
			stored_char = LCD_CHAR_UMLAUTO; 
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
    2a5a:	80 31       	cpi	r24, 0x10	; 16
    2a5c:	61 f4       	brne	.+24     	; 0x2a76 <lcd_message_clear+0x58>
    2a5e:	0a c0       	rjmp	.+20     	; 0x2a74 <lcd_message_clear+0x56>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM; 
    2a60:	85 ea       	ldi	r24, 0xA5	; 165
    2a62:	09 c0       	rjmp	.+18     	; 0x2a76 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_STATEON){
			stored_char = LCD_CHAR_STATEON; 
    2a64:	8a e2       	ldi	r24, 0x2A	; 42
    2a66:	07 c0       	rjmp	.+14     	; 0x2a76 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_SZ){
			stored_char = LCD_CHAR_SZ; 
    2a68:	82 ee       	ldi	r24, 0xE2	; 226
    2a6a:	05 c0       	rjmp	.+10     	; 0x2a76 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
			stored_char = LCD_CHAR_UMLAUTU; 
    2a6c:	85 ef       	ldi	r24, 0xF5	; 245
    2a6e:	03 c0       	rjmp	.+6      	; 0x2a76 <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
			stored_char = LCD_CHAR_UMLAUTO; 
    2a70:	8f ee       	ldi	r24, 0xEF	; 239
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA; 
    2a72:	01 c0       	rjmp	.+2      	; 0x2a76 <lcd_message_clear+0x58>
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
    2a74:	81 ee       	ldi	r24, 0xE1	; 225
    2a76:	09 de       	rcall	.-1006   	; 0x268a <lcd_write_character>

void lcd_message_clear(){
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2a78:	df 5f       	subi	r29, 0xFF	; 255
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2a7a:	c1 2f       	mov	r28, r17

void lcd_message_clear(){
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2a7c:	d4 31       	cpi	r29, 0x14	; 20
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA; 
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
	}
	lcd_goto(saveCursor);
    2a7e:	e0 f2       	brcs	.-72     	; 0x2a38 <lcd_message_clear+0x1a>
    2a80:	80 2f       	mov	r24, r16
    2a82:	b3 de       	rcall	.-666    	; 0x27ea <lcd_goto>
	lcd_displayingMessage = FALSE;
    2a84:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <lcd_displayingMessage>
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	08 95       	ret

00002a92 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2a92:	83 ef       	ldi	r24, 0xF3	; 243
    2a94:	93 e0       	ldi	r25, 0x03	; 3
    2a96:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <pLogStart+0x1>
    2a9a:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <pLogStart>
    2a9e:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <pLogEnd+0x1>
    2aa2:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <pLogEnd>
    2aa6:	08 95       	ret

00002aa8 <log_count>:
    2aa8:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pLogEnd>
    2aac:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pLogEnd+0x1>
    2ab0:	20 91 85 05 	lds	r18, 0x0585	; 0x800585 <pLogStart>
    2ab4:	30 91 86 05 	lds	r19, 0x0586	; 0x800586 <pLogStart+0x1>
    2ab8:	82 17       	cp	r24, r18
    2aba:	93 07       	cpc	r25, r19
    2abc:	48 f0       	brcs	.+18     	; 0x2ad0 <log_count+0x28>
    2abe:	82 1b       	sub	r24, r18
    2ac0:	93 0b       	sbc	r25, r19
    2ac2:	95 95       	asr	r25
    2ac4:	87 95       	ror	r24
    2ac6:	9d ec       	ldi	r25, 0xCD	; 205
    2ac8:	89 9f       	mul	r24, r25
    2aca:	80 2d       	mov	r24, r0
    2acc:	11 24       	eor	r1, r1
    2ace:	08 95       	ret
    2ad0:	80 57       	subi	r24, 0x70	; 112
    2ad2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ad4:	82 1b       	sub	r24, r18
    2ad6:	93 0b       	sbc	r25, r19
    2ad8:	95 95       	asr	r25
    2ada:	87 95       	ror	r24
    2adc:	9d ec       	ldi	r25, 0xCD	; 205
    2ade:	89 9f       	mul	r24, r25
    2ae0:	80 2d       	mov	r24, r0
    2ae2:	11 24       	eor	r1, r1
    2ae4:	08 95       	ret

00002ae6 <log_getLog>:
    2ae6:	cf 93       	push	r28
    2ae8:	c8 2f       	mov	r28, r24
    2aea:	de df       	rcall	.-68     	; 0x2aa8 <log_count>
    2aec:	c8 17       	cp	r28, r24
    2aee:	f8 f4       	brcc	.+62     	; 0x2b2e <log_getLog+0x48>
    2af0:	40 91 85 05 	lds	r20, 0x0585	; 0x800585 <pLogStart>
    2af4:	50 91 86 05 	lds	r21, 0x0586	; 0x800586 <pLogStart+0x1>
    2af8:	8c 2f       	mov	r24, r28
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	9c 01       	movw	r18, r24
    2afe:	22 0f       	add	r18, r18
    2b00:	33 1f       	adc	r19, r19
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	28 0f       	add	r18, r24
    2b10:	39 1f       	adc	r19, r25
    2b12:	ca 01       	movw	r24, r20
    2b14:	82 0f       	add	r24, r18
    2b16:	93 1f       	adc	r25, r19
    2b18:	65 e0       	ldi	r22, 0x05	; 5
    2b1a:	89 37       	cpi	r24, 0x79	; 121
    2b1c:	96 07       	cpc	r25, r22
    2b1e:	49 f0       	breq	.+18     	; 0x2b32 <log_getLog+0x4c>
    2b20:	40 f0       	brcs	.+16     	; 0x2b32 <log_getLog+0x4c>
    2b22:	20 59       	subi	r18, 0x90	; 144
    2b24:	31 40       	sbci	r19, 0x01	; 1
    2b26:	ca 01       	movw	r24, r20
    2b28:	82 0f       	add	r24, r18
    2b2a:	93 1f       	adc	r25, r19
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <log_getLog+0x4c>
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	cf 91       	pop	r28
    2b34:	08 95       	ret

00002b36 <log_getErrorText>:
    2b36:	d7 df       	rcall	.-82     	; 0x2ae6 <log_getLog>
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	f1 f1       	breq	.+124    	; 0x2bb8 <log_getErrorText+0x82>
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	36 81       	ldd	r19, Z+6	; 0x06
    2b40:	67 81       	ldd	r22, Z+7	; 0x07
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	34 c0       	rjmp	.+104    	; 0x2bae <log_getErrorText+0x78>
    2b46:	42 2f       	mov	r20, r18
    2b48:	50 e0       	ldi	r21, 0x00	; 0
    2b4a:	fa 01       	movw	r30, r20
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	cf 01       	movw	r24, r30
    2b52:	88 0f       	add	r24, r24
    2b54:	99 1f       	adc	r25, r25
    2b56:	88 0f       	add	r24, r24
    2b58:	99 1f       	adc	r25, r25
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	e8 0f       	add	r30, r24
    2b60:	f9 1f       	adc	r31, r25
    2b62:	e6 59       	subi	r30, 0x96	; 150
    2b64:	fe 4f       	sbci	r31, 0xFE	; 254
    2b66:	84 91       	lpm	r24, Z
    2b68:	38 13       	cpse	r19, r24
    2b6a:	20 c0       	rjmp	.+64     	; 0x2bac <log_getErrorText+0x76>
    2b6c:	fa 01       	movw	r30, r20
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	cf 01       	movw	r24, r30
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	e8 0f       	add	r30, r24
    2b82:	f9 1f       	adc	r31, r25
    2b84:	e5 59       	subi	r30, 0x95	; 149
    2b86:	fe 4f       	sbci	r31, 0xFE	; 254
    2b88:	84 91       	lpm	r24, Z
    2b8a:	68 13       	cpse	r22, r24
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <log_getErrorText+0x76>
    2b8e:	44 0f       	add	r20, r20
    2b90:	55 1f       	adc	r21, r21
    2b92:	ca 01       	movw	r24, r20
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	48 0f       	add	r20, r24
    2ba2:	59 1f       	adc	r21, r25
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	84 59       	subi	r24, 0x94	; 148
    2ba8:	9e 4f       	sbci	r25, 0xFE	; 254
    2baa:	08 95       	ret
    2bac:	2f 5f       	subi	r18, 0xFF	; 255
    2bae:	20 31       	cpi	r18, 0x10	; 16
    2bb0:	50 f2       	brcs	.-108    	; 0x2b46 <log_getErrorText+0x10>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	08 95       	ret
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	08 95       	ret

00002bbe <logCheckUnreadErrorLogs>:
    2bbe:	cf 93       	push	r28
    2bc0:	73 df       	rcall	.-282    	; 0x2aa8 <log_count>
    2bc2:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <log_unreadErrors>
    2bc6:	81 11       	cpse	r24, r1
    2bc8:	14 c0       	rjmp	.+40     	; 0x2bf2 <logCheckUnreadErrorLogs+0x34>
    2bca:	17 c0       	rjmp	.+46     	; 0x2bfa <logCheckUnreadErrorLogs+0x3c>
    2bcc:	8c 2f       	mov	r24, r28
    2bce:	8b df       	rcall	.-234    	; 0x2ae6 <log_getLog>
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	61 f0       	breq	.+24     	; 0x2bec <logCheckUnreadErrorLogs+0x2e>
    2bd4:	fc 01       	movw	r30, r24
    2bd6:	24 81       	ldd	r18, Z+4	; 0x04
    2bd8:	20 32       	cpi	r18, 0x20	; 32
    2bda:	51 f0       	breq	.+20     	; 0x2bf0 <logCheckUnreadErrorLogs+0x32>
    2bdc:	95 81       	ldd	r25, Z+5	; 0x05
    2bde:	8c 2f       	mov	r24, r28
    2be0:	95 34       	cpi	r25, 0x45	; 69
    2be2:	39 f4       	brne	.+14     	; 0x2bf2 <logCheckUnreadErrorLogs+0x34>
    2be4:	8f ef       	ldi	r24, 0xFF	; 255
    2be6:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <log_unreadErrors>
    2bea:	07 c0       	rjmp	.+14     	; 0x2bfa <logCheckUnreadErrorLogs+0x3c>
    2bec:	8c 2f       	mov	r24, r28
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <logCheckUnreadErrorLogs+0x34>
    2bf0:	8c 2f       	mov	r24, r28
    2bf2:	cf ef       	ldi	r28, 0xFF	; 255
    2bf4:	c8 0f       	add	r28, r24
    2bf6:	81 11       	cpse	r24, r1
    2bf8:	e9 cf       	rjmp	.-46     	; 0x2bcc <logCheckUnreadErrorLogs+0xe>
    2bfa:	cf 91       	pop	r28
    2bfc:	08 95       	ret

00002bfe <log_getShortTextFromPtr>:
    2bfe:	1f 93       	push	r17
    2c00:	cf 93       	push	r28
    2c02:	df 93       	push	r29
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <log_getShortTextFromPtr+0xc>
    2c08:	7b c0       	rjmp	.+246    	; 0x2d00 <log_getShortTextFromPtr+0x102>
    2c0a:	16 2f       	mov	r17, r22
    2c0c:	ec 01       	movw	r28, r24
    2c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c10:	88 23       	and	r24, r24
    2c12:	79 f0       	breq	.+30     	; 0x2c32 <log_getShortTextFromPtr+0x34>
    2c14:	6b ec       	ldi	r22, 0xCB	; 203
    2c16:	73 e0       	ldi	r23, 0x03	; 3
    2c18:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    2c1c:	bc 01       	movw	r22, r24
    2c1e:	6f 5f       	subi	r22, 0xFF	; 255
    2c20:	7f 4f       	sbci	r23, 0xFF	; 255
    2c22:	28 e6       	ldi	r18, 0x68	; 104
    2c24:	fc 01       	movw	r30, r24
    2c26:	20 83       	st	Z, r18
    2c28:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2a:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	2f c0       	rjmp	.+94     	; 0x2c90 <log_getShortTextFromPtr+0x92>
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	88 23       	and	r24, r24
    2c36:	79 f0       	breq	.+30     	; 0x2c56 <log_getShortTextFromPtr+0x58>
    2c38:	6b ec       	ldi	r22, 0xCB	; 203
    2c3a:	73 e0       	ldi	r23, 0x03	; 3
    2c3c:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    2c40:	bc 01       	movw	r22, r24
    2c42:	6f 5f       	subi	r22, 0xFF	; 255
    2c44:	7f 4f       	sbci	r23, 0xFF	; 255
    2c46:	2d e6       	ldi	r18, 0x6D	; 109
    2c48:	fc 01       	movw	r30, r24
    2c4a:	20 83       	st	Z, r18
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    2c52:	dc 01       	movw	r26, r24
    2c54:	1d c0       	rjmp	.+58     	; 0x2c90 <log_getShortTextFromPtr+0x92>
    2c56:	6b ec       	ldi	r22, 0xCB	; 203
    2c58:	73 e0       	ldi	r23, 0x03	; 3
    2c5a:	89 81       	ldd	r24, Y+1	; 0x01
    2c5c:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    2c60:	fc 01       	movw	r30, r24
    2c62:	83 e7       	ldi	r24, 0x73	; 115
    2c64:	80 83       	st	Z, r24
    2c66:	98 81       	ld	r25, Y
    2c68:	99 0f       	add	r25, r25
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	02 c0       	rjmp	.+4      	; 0x2c72 <log_getShortTextFromPtr+0x74>
    2c6e:	99 51       	subi	r25, 0x19	; 25
    2c70:	2f 5f       	subi	r18, 0xFF	; 255
    2c72:	99 31       	cpi	r25, 0x19	; 25
    2c74:	e0 f7       	brcc	.-8      	; 0x2c6e <log_getShortTextFromPtr+0x70>
    2c76:	20 5d       	subi	r18, 0xD0	; 208
    2c78:	21 83       	std	Z+1, r18	; 0x01
    2c7a:	99 0f       	add	r25, r25
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <log_getShortTextFromPtr+0x86>
    2c80:	95 50       	subi	r25, 0x05	; 5
    2c82:	2f 5f       	subi	r18, 0xFF	; 255
    2c84:	95 30       	cpi	r25, 0x05	; 5
    2c86:	e0 f7       	brcc	.-8      	; 0x2c80 <log_getShortTextFromPtr+0x82>
    2c88:	df 01       	movw	r26, r30
    2c8a:	13 96       	adiw	r26, 0x03	; 3
    2c8c:	20 5d       	subi	r18, 0xD0	; 208
    2c8e:	22 83       	std	Z+2, r18	; 0x02
    2c90:	9c 81       	ldd	r25, Y+4	; 0x04
    2c92:	90 34       	cpi	r25, 0x40	; 64
    2c94:	51 f0       	breq	.+20     	; 0x2caa <log_getShortTextFromPtr+0xac>
    2c96:	90 38       	cpi	r25, 0x80	; 128
    2c98:	19 f0       	breq	.+6      	; 0x2ca0 <log_getShortTextFromPtr+0xa2>
    2c9a:	90 32       	cpi	r25, 0x20	; 32
    2c9c:	81 f4       	brne	.+32     	; 0x2cbe <log_getShortTextFromPtr+0xc0>
    2c9e:	0a c0       	rjmp	.+20     	; 0x2cb4 <log_getShortTextFromPtr+0xb6>
    2ca0:	fd 01       	movw	r30, r26
    2ca2:	31 96       	adiw	r30, 0x01	; 1
    2ca4:	8a e2       	ldi	r24, 0x2A	; 42
    2ca6:	8c 93       	st	X, r24
    2ca8:	0e c0       	rjmp	.+28     	; 0x2cc6 <log_getShortTextFromPtr+0xc8>
    2caa:	fd 01       	movw	r30, r26
    2cac:	31 96       	adiw	r30, 0x01	; 1
    2cae:	85 ea       	ldi	r24, 0xA5	; 165
    2cb0:	8c 93       	st	X, r24
    2cb2:	09 c0       	rjmp	.+18     	; 0x2cc6 <log_getShortTextFromPtr+0xc8>
    2cb4:	fd 01       	movw	r30, r26
    2cb6:	31 96       	adiw	r30, 0x01	; 1
    2cb8:	80 e2       	ldi	r24, 0x20	; 32
    2cba:	8c 93       	st	X, r24
    2cbc:	04 c0       	rjmp	.+8      	; 0x2cc6 <log_getShortTextFromPtr+0xc8>
    2cbe:	fd 01       	movw	r30, r26
    2cc0:	31 96       	adiw	r30, 0x01	; 1
    2cc2:	8f e3       	ldi	r24, 0x3F	; 63
    2cc4:	8c 93       	st	X, r24
    2cc6:	bf 01       	movw	r22, r30
    2cc8:	6f 5f       	subi	r22, 0xFF	; 255
    2cca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	80 83       	st	Z, r24
    2cd0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cd2:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	8f 81       	ldd	r24, Y+7	; 0x07
    2cda:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    2cde:	bc 01       	movw	r22, r24
    2ce0:	6f 5f       	subi	r22, 0xFF	; 255
    2ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce4:	2d e2       	ldi	r18, 0x2D	; 45
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	20 83       	st	Z, r18
    2cea:	88 85       	ldd	r24, Y+8	; 0x08
    2cec:	99 85       	ldd	r25, Y+9	; 0x09
    2cee:	0e 94 29 3c 	call	0x7852	; 0x7852 <putChar_word>
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	10 82       	st	Z, r1
    2cf6:	1f 3f       	cpi	r17, 0xFF	; 255
    2cf8:	41 f0       	breq	.+16     	; 0x2d0a <log_getShortTextFromPtr+0x10c>
    2cfa:	1c 83       	std	Y+4, r17	; 0x04
    2cfc:	60 df       	rcall	.-320    	; 0x2bbe <logCheckUnreadErrorLogs>
    2cfe:	05 c0       	rjmp	.+10     	; 0x2d0a <log_getShortTextFromPtr+0x10c>
    2d00:	eb ec       	ldi	r30, 0xCB	; 203
    2d02:	f3 e0       	ldi	r31, 0x03	; 3
    2d04:	8d e2       	ldi	r24, 0x2D	; 45
    2d06:	80 83       	st	Z, r24
    2d08:	11 82       	std	Z+1, r1	; 0x01
    2d0a:	8b ec       	ldi	r24, 0xCB	; 203
    2d0c:	93 e0       	ldi	r25, 0x03	; 3
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	1f 91       	pop	r17
    2d14:	08 95       	ret

00002d16 <log_put>:
    2d16:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pLogEnd>
    2d1a:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pLogEnd+0x1>
    2d1e:	a1 e6       	ldi	r26, 0x61	; 97
    2d20:	b2 e0       	ldi	r27, 0x02	; 2
    2d22:	9c 91       	ld	r25, X
    2d24:	90 83       	st	Z, r25
    2d26:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pLogEnd>
    2d2a:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pLogEnd+0x1>
    2d2e:	11 96       	adiw	r26, 0x01	; 1
    2d30:	9c 91       	ld	r25, X
    2d32:	11 97       	sbiw	r26, 0x01	; 1
    2d34:	91 83       	std	Z+1, r25	; 0x01
    2d36:	e0 91 83 05 	lds	r30, 0x0583	; 0x800583 <pLogEnd>
    2d3a:	f0 91 84 05 	lds	r31, 0x0584	; 0x800584 <pLogEnd+0x1>
    2d3e:	12 96       	adiw	r26, 0x02	; 2
    2d40:	9c 91       	ld	r25, X
    2d42:	12 97       	sbiw	r26, 0x02	; 2
    2d44:	92 83       	std	Z+2, r25	; 0x02
    2d46:	13 96       	adiw	r26, 0x03	; 3
    2d48:	9c 91       	ld	r25, X
    2d4a:	93 83       	std	Z+3, r25	; 0x03
    2d4c:	25 83       	std	Z+5, r18	; 0x05
    2d4e:	86 83       	std	Z+6, r24	; 0x06
    2d50:	67 83       	std	Z+7, r22	; 0x07
    2d52:	51 87       	std	Z+9, r21	; 0x09
    2d54:	40 87       	std	Z+8, r20	; 0x08
    2d56:	80 e8       	ldi	r24, 0x80	; 128
    2d58:	84 83       	std	Z+4, r24	; 0x04
    2d5a:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <serUSB_Active>
    2d5e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d60:	81 f4       	brne	.+32     	; 0x2d82 <log_put+0x6c>
    2d62:	84 e6       	ldi	r24, 0x64	; 100
    2d64:	91 e0       	ldi	r25, 0x01	; 1
    2d66:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    2d6a:	6f ef       	ldi	r22, 0xFF	; 255
    2d6c:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pLogEnd>
    2d70:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pLogEnd+0x1>
    2d74:	44 df       	rcall	.-376    	; 0x2bfe <log_getShortTextFromPtr>
    2d76:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    2d7a:	8a e2       	ldi	r24, 0x2A	; 42
    2d7c:	94 e1       	ldi	r25, 0x14	; 20
    2d7e:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    2d82:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <pLogEnd>
    2d86:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <pLogEnd+0x1>
    2d8a:	0a 96       	adiw	r24, 0x0a	; 10
    2d8c:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <pLogEnd+0x1>
    2d90:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <pLogEnd>
    2d94:	89 57       	subi	r24, 0x79	; 121
    2d96:	95 40       	sbci	r25, 0x05	; 5
    2d98:	39 f0       	breq	.+14     	; 0x2da8 <log_put+0x92>
    2d9a:	30 f0       	brcs	.+12     	; 0x2da8 <log_put+0x92>
    2d9c:	83 ef       	ldi	r24, 0xF3	; 243
    2d9e:	93 e0       	ldi	r25, 0x03	; 3
    2da0:	90 93 84 05 	sts	0x0584, r25	; 0x800584 <pLogEnd+0x1>
    2da4:	80 93 83 05 	sts	0x0583, r24	; 0x800583 <pLogEnd>
    2da8:	20 91 83 05 	lds	r18, 0x0583	; 0x800583 <pLogEnd>
    2dac:	30 91 84 05 	lds	r19, 0x0584	; 0x800584 <pLogEnd+0x1>
    2db0:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <pLogStart>
    2db4:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <pLogStart+0x1>
    2db8:	28 17       	cp	r18, r24
    2dba:	39 07       	cpc	r19, r25
    2dbc:	79 f4       	brne	.+30     	; 0x2ddc <log_put+0xc6>
    2dbe:	0a 96       	adiw	r24, 0x0a	; 10
    2dc0:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <pLogStart+0x1>
    2dc4:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <pLogStart>
    2dc8:	89 57       	subi	r24, 0x79	; 121
    2dca:	95 40       	sbci	r25, 0x05	; 5
    2dcc:	39 f0       	breq	.+14     	; 0x2ddc <log_put+0xc6>
    2dce:	30 f0       	brcs	.+12     	; 0x2ddc <log_put+0xc6>
    2dd0:	83 ef       	ldi	r24, 0xF3	; 243
    2dd2:	93 e0       	ldi	r25, 0x03	; 3
    2dd4:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <pLogStart+0x1>
    2dd8:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <pLogStart>
    2ddc:	08 95       	ret

00002dde <log_putError>:
    2dde:	25 e4       	ldi	r18, 0x45	; 69
    2de0:	9a df       	rcall	.-204    	; 0x2d16 <log_put>
    2de2:	8f ef       	ldi	r24, 0xFF	; 255
    2de4:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <log_unreadErrors>
    2de8:	08 95       	ret

00002dea <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2dea:	cf 93       	push	r28
    2dec:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2dee:	7b de       	rcall	.-778    	; 0x2ae6 <log_getLog>
	if (pLogEntry != NULL){
    2df0:	00 97       	sbiw	r24, 0x00	; 0
    2df2:	19 f0       	breq	.+6      	; 0x2dfa <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2df4:	6c 2f       	mov	r22, r28
    2df6:	03 df       	rcall	.-506    	; 0x2bfe <log_getShortTextFromPtr>
    2df8:	06 c0       	rjmp	.+12     	; 0x2e06 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2dfa:	eb ec       	ldi	r30, 0xCB	; 203
    2dfc:	f3 e0       	ldi	r31, 0x03	; 3
    2dfe:	8d e2       	ldi	r24, 0x2D	; 45
    2e00:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2e02:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2e04:	cf 01       	movw	r24, r30
	}
    2e06:	cf 91       	pop	r28
    2e08:	08 95       	ret

00002e0a <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2e0a:	e2 db       	rcall	.-2108   	; 0x25d0 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2e0c:	85 b1       	in	r24, 0x05	; 5
    2e0e:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();
    2e10:	85 b9       	out	0x05, r24	; 5
    2e12:	3f de       	rcall	.-898    	; 0x2a92 <init_log>
	init_Serial0SerUSB();
    2e14:	0e 94 1f 39 	call	0x723e	; 0x723e <init_Serial0SerUSB>
	init_message();
    2e18:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <init_message>
	init_HwTimer();
    2e1c:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <init_HwTimer>
	init_Timers();
    2e20:	0e 94 57 0e 	call	0x1cae	; 0x1cae <init_Timers>
	init_ADC();
    2e24:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <init_ADC>
	init_Pipe();
    2e28:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <init_Pipe>
	init_Serial1MIDI();
    2e2c:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <init_Serial1MIDI>
	init_PipeModules();
    2e30:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <init_PipeModules>
	init_Midi2Manual();
    2e34:	0e 94 97 32 	call	0x652e	; 0x652e <init_Midi2Manual>
	init_Manual2Midi();
    2e38:	0e 94 d7 32 	call	0x65ae	; 0x65ae <init_Manual2Midi>
	init_Midi();
    2e3c:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <init_Midi>
	init_Registers();
    2e40:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <init_Registers>
	init_RegOut();
    2e44:	0e 94 08 32 	call	0x6410	; 0x6410 <init_RegOut>
	init_Manual2Module();
    2e48:	0e 94 68 33 	call	0x66d0	; 0x66d0 <init_Manual2Module>
	init_SoftKeys();
    2e4c:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <init_SoftKeys>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2e50:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <eeprom_UpdateALL>
	INIT_MENU
    2e54:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <menu_TestModulePattern>


	// BOOT MESSAGE

	lcd_init ();
	lcd_initCG();
    2e58:	6a dc       	rcall	.-1836   	; 0x272e <lcd_init>
	lcd_clrscr ();
    2e5a:	0e 94 34 3b 	call	0x7668	; 0x7668 <lcd_initCG>
	lcd_goto(LCD_LINE1+3);
    2e5e:	ca dc       	rcall	.-1644   	; 0x27f4 <lcd_clrscr>
    2e60:	83 e4       	ldi	r24, 0x43	; 67
	lcd_puts_P(prog_name);
    2e62:	c3 dc       	rcall	.-1658   	; 0x27ea <lcd_goto>
    2e64:	85 ea       	ldi	r24, 0xA5	; 165
    2e66:	92 e0       	ldi	r25, 0x02	; 2
	lcd_goto(LCD_LINE2+7);
    2e68:	3b dd       	rcall	.-1418   	; 0x28e0 <lcd_puts_P>
    2e6a:	8b e1       	ldi	r24, 0x1B	; 27
    2e6c:	be dc       	rcall	.-1668   	; 0x27ea <lcd_goto>
	lcd_puts_P(sw_version);
    2e6e:	82 ea       	ldi	r24, 0xA2	; 162
    2e70:	93 e1       	ldi	r25, 0x13	; 19
    2e72:	36 dd       	rcall	.-1428   	; 0x28e0 <lcd_puts_P>
    2e74:	78 94       	sei
	sei();
    2e76:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2e78:	47 e9       	ldi	r20, 0x97	; 151
    2e7a:	8a e3       	ldi	r24, 0x3A	; 58
    2e7c:	21 50       	subi	r18, 0x01	; 1
    2e7e:	40 40       	sbci	r20, 0x00	; 0
    2e80:	80 40       	sbci	r24, 0x00	; 0
    2e82:	e1 f7       	brne	.-8      	; 0x2e7c <main+0x72>
    2e84:	00 c0       	rjmp	.+0      	; 0x2e86 <main+0x7c>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2e86:	00 00       	nop
    2e88:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <init_Serial3SerESP>
	lcd_clrscr ();
    2e8c:	b3 dc       	rcall	.-1690   	; 0x27f4 <lcd_clrscr>

	// TURN ON POWER

	module_StartPowerOn();
    2e8e:	cd d8       	rcall	.-3686   	; 0x202a <module_StartPowerOn>
    2e90:	8f ef       	ldi	r24, 0xFF	; 255
	MESSAGE_PIPE_HANDLING_ON
    2e92:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <msgPipe_Handling>
    2e96:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <menuNotActive>

	menuNotActive = TRUE;
    2e9a:	8e ef       	ldi	r24, 0xFE	; 254
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2e9c:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <messageFromESP>
    2ea0:	df ef       	ldi	r29, 0xFF	; 255
	module_StartPowerOn();
	MESSAGE_PIPE_HANDLING_ON

	menuNotActive = TRUE;
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2ea2:	85 b1       	in	r24, 0x05	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		DEBUG_OUT_MAIN
    2ea4:	8f 7c       	andi	r24, 0xCF	; 207
    2ea6:	85 b9       	out	0x05, r24	; 5
    2ea8:	20 91 1f 14 	lds	r18, 0x141F	; 0x80141f <serESPRxInIndex>
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2eac:	30 91 20 14 	lds	r19, 0x1420	; 0x801420 <serESPRxInIndex+0x1>
    2eb0:	80 91 1a 14 	lds	r24, 0x141A	; 0x80141a <serESPRxOutIndex>
    2eb4:	90 91 1b 14 	lds	r25, 0x141B	; 0x80141b <serESPRxOutIndex+0x1>
    2eb8:	28 17       	cp	r18, r24
    2eba:	39 07       	cpc	r19, r25
    2ebc:	09 f4       	brne	.+2      	; 0x2ec0 <main+0xb6>
    2ebe:	66 c0       	rjmp	.+204    	; 0x2f8c <main+0x182>
    2ec0:	0e 94 5c 3a 	call	0x74b8	; 0x74b8 <serial3SER_ESPReadRx>
			uint8_t esp_message = serial3SER_ESPReadRx();
    2ec4:	c8 2f       	mov	r28, r24
    2ec6:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <messageFromESP>
			messageFromESP = esp_message; // save for later transfer of LCD
    2eca:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2ece:	8f e7       	ldi	r24, 0x7F	; 127
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2ed0:	8c 0f       	add	r24, r28
    2ed2:	86 30       	cpi	r24, 0x06	; 6
    2ed4:	28 f4       	brcc	.+10     	; 0x2ee0 <main+0xd6>
    2ed6:	80 e8       	ldi	r24, 0x80	; 128
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2ed8:	8c 0f       	add	r24, r28
    2eda:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <message_push>
    2ede:	56 c0       	rjmp	.+172    	; 0x2f8c <main+0x182>
    2ee0:	c0 39       	cpi	r28, 0x90	; 144
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2ee2:	09 f0       	breq	.+2      	; 0x2ee6 <main+0xdc>
    2ee4:	53 c0       	rjmp	.+166    	; 0x2f8c <main+0x182>
    2ee6:	80 91 12 14 	lds	r24, 0x1412	; 0x801412 <serESPInBuffer>
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2eea:	80 39       	cpi	r24, 0x90	; 144
    2eec:	09 f0       	breq	.+2      	; 0x2ef0 <main+0xe6>
    2eee:	4e c0       	rjmp	.+156    	; 0x2f8c <main+0x182>
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	e9 2f       	mov	r30, r25
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2ef4:	09 2e       	mov	r0, r25
    2ef6:	00 0c       	add	r0, r0
    2ef8:	ff 0b       	sbc	r31, r31
    2efa:	ee 5e       	subi	r30, 0xEE	; 238
    2efc:	fb 4e       	sbci	r31, 0xEB	; 235
    2efe:	80 81       	ld	r24, Z
    2f00:	8d 33       	cpi	r24, 0x3D	; 61
    2f02:	19 f0       	breq	.+6      	; 0x2f0a <main+0x100>
    2f04:	9f 5f       	subi	r25, 0xFF	; 255
							break;
						}
						i++;
    2f06:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2f08:	a4 f3       	brlt	.-24     	; 0x2ef2 <main+0xe8>
    2f0a:	98 30       	cpi	r25, 0x08	; 8
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2f0c:	0c f0       	brlt	.+2      	; 0x2f10 <main+0x106>
    2f0e:	3e c0       	rjmp	.+124    	; 0x2f8c <main+0x182>
    2f10:	89 2f       	mov	r24, r25
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2f12:	85 95       	asr	r24
    2f14:	20 e0       	ldi	r18, 0x00	; 0
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2f16:	06 c0       	rjmp	.+12     	; 0x2f24 <main+0x11a>
    2f18:	e2 2f       	mov	r30, r18
							serESPMidiTmp[j] = 0;
    2f1a:	f0 e0       	ldi	r31, 0x00	; 0
    2f1c:	e4 59       	subi	r30, 0x94	; 148
    2f1e:	f9 4e       	sbci	r31, 0xE9	; 233
    2f20:	10 82       	st	Z, r1
    2f22:	2f 5f       	subi	r18, 0xFF	; 255
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2f24:	23 30       	cpi	r18, 0x03	; 3
    2f26:	c0 f3       	brcs	.-16     	; 0x2f18 <main+0x10e>
    2f28:	2c c0       	rjmp	.+88     	; 0x2f82 <main+0x178>
    2f2a:	e9 2f       	mov	r30, r25
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2f2c:	09 2e       	mov	r0, r25
    2f2e:	00 0c       	add	r0, r0
    2f30:	ff 0b       	sbc	r31, r31
    2f32:	ee 5e       	subi	r30, 0xEE	; 238
    2f34:	fb 4e       	sbci	r31, 0xEB	; 235
    2f36:	30 81       	ld	r19, Z
    2f38:	20 ed       	ldi	r18, 0xD0	; 208
    2f3a:	23 0f       	add	r18, r19
    2f3c:	2a 30       	cpi	r18, 0x0A	; 10
							if (asciiData > 9){
    2f3e:	10 f0       	brcs	.+4      	; 0x2f44 <main+0x13a>
    2f40:	27 ed       	ldi	r18, 0xD7	; 215
								asciiData = asciiData - (0x0A - 'A' + '0');
    2f42:	23 0f       	add	r18, r19
    2f44:	a2 2f       	mov	r26, r18
							}
							asciiData &= 0x0F;
    2f46:	af 70       	andi	r26, 0x0F	; 15
    2f48:	ec e6       	ldi	r30, 0x6C	; 108
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2f4a:	f6 e1       	ldi	r31, 0x16	; 22
    2f4c:	62 81       	ldd	r22, Z+2	; 0x02
    2f4e:	20 e1       	ldi	r18, 0x10	; 16
    2f50:	62 9f       	mul	r22, r18
    2f52:	b0 01       	movw	r22, r0
    2f54:	11 24       	eor	r1, r1
    2f56:	41 81       	ldd	r20, Z+1	; 0x01
    2f58:	24 2f       	mov	r18, r20
    2f5a:	22 95       	swap	r18
    2f5c:	2f 70       	andi	r18, 0x0F	; 15
    2f5e:	62 2b       	or	r22, r18
    2f60:	62 83       	std	Z+2, r22	; 0x02
    2f62:	20 e1       	ldi	r18, 0x10	; 16
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2f64:	42 9f       	mul	r20, r18
    2f66:	a0 01       	movw	r20, r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	20 81       	ld	r18, Z
    2f6c:	32 2f       	mov	r19, r18
    2f6e:	32 95       	swap	r19
    2f70:	3f 70       	andi	r19, 0x0F	; 15
    2f72:	43 2b       	or	r20, r19
    2f74:	41 83       	std	Z+1, r20	; 0x01
    2f76:	40 e1       	ldi	r20, 0x10	; 16
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2f78:	24 9f       	mul	r18, r20
    2f7a:	90 01       	movw	r18, r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	2a 2b       	or	r18, r26
    2f80:	20 83       	st	Z, r18
    2f82:	91 50       	subi	r25, 0x01	; 1
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2f84:	19 16       	cp	r1, r25
    2f86:	8c f2       	brlt	.-94     	; 0x2f2a <main+0x120>
    2f88:	0e 94 2d 36 	call	0x6c5a	; 0x6c5a <proc_ESPmidi>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2f8c:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <message_status>
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2f90:	88 23       	and	r24, r24
    2f92:	09 f4       	brne	.+2      	; 0x2f96 <main+0x18c>
    2f94:	50 c0       	rjmp	.+160    	; 0x3036 <main+0x22c>
    2f96:	85 b1       	in	r24, 0x05	; 5
			DEBUG_OUT_MENU
    2f98:	80 63       	ori	r24, 0x30	; 48
    2f9a:	85 b9       	out	0x05, r24	; 5
    2f9c:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <message_get>
			uint8_t keyMessage = message_get();
    2fa0:	c8 2f       	mov	r28, r24
    2fa2:	86 38       	cpi	r24, 0x86	; 134
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    2fa4:	b1 f4       	brne	.+44     	; 0x2fd2 <main+0x1c8>
				// PANIC BUTTON
				midiSendAllNotesOff();
    2fa6:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <midiSendAllNotesOff>
				midi_AllManualsOff();
    2faa:	0e 94 06 35 	call	0x6a0c	; 0x6a0c <midi_AllManualsOff>
				midi_resetRegisters();
    2fae:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <midi_resetRegisters>
				midi_CouplerReset();
    2fb2:	0e 94 b7 2e 	call	0x5d6e	; 0x5d6e <midi_CouplerReset>
				init_log(); // clear log V 0.70
    2fb6:	6d dd       	rcall	.-1318   	; 0x2a92 <init_log>
    2fb8:	10 92 62 15 	sts	0x1562, r1	; 0x801562 <midiRxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    2fbc:	10 92 6b 16 	sts	0x166B, r1	; 0x80166b <midiTxBuffUsage>
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
				POWER_ON
    2fc0:	85 b1       	in	r24, 0x05	; 5
    2fc2:	80 64       	ori	r24, 0x40	; 64
    2fc4:	85 b9       	out	0x05, r24	; 5
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    2fc6:	83 e1       	ldi	r24, 0x13	; 19
    2fc8:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <pipe_PowerStatus>
				lcd_message_P(panicString);
    2fcc:	8a e8       	ldi	r24, 0x8A	; 138
    2fce:	92 e0       	ldi	r25, 0x02	; 2
    2fd0:	dd dc       	rcall	.-1606   	; 0x298c <lcd_message_P>
    2fd2:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuNotActive>
			}
			if (menuNotActive == TRUE) {
    2fd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fd8:	f9 f4       	brne	.+62     	; 0x3018 <main+0x20e>
    2fda:	8c 2f       	mov	r24, r28
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2fdc:	8f 73       	andi	r24, 0x3F	; 63
    2fde:	c5 30       	cpi	r28, 0x05	; 5
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2fe0:	69 f4       	brne	.+26     	; 0x2ffc <main+0x1f2>
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	0e 94 a6 21 	call	0x434c	; 0x434c <menu_Init>
					menu_InitLCD(); //display menu
    2fee:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <menu_InitLCD>
					menuNotActive = FALSE; // notify that menu is displayed
    2ff2:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <menuNotActive>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	6e d8       	rcall	.-3876   	; 0x20d6 <softKey_WantLong>
    2ffa:	1d c0       	rjmp	.+58     	; 0x3036 <main+0x22c>
    2ffc:	9f ef       	ldi	r25, 0xFF	; 255
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2ffe:	98 0f       	add	r25, r24
    3000:	94 30       	cpi	r25, 0x04	; 4
    3002:	c8 f4       	brcc	.+50     	; 0x3036 <main+0x22c>
    3004:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <softKey_MessageKey_ToSoftKeyNr>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    3008:	6c 2f       	mov	r22, r28
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    300a:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <softKey_Execute>
    300e:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <menuNotActive>
    3012:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <softKeys_toLCD>
					softKeys_toLCD();
    3016:	0f c0       	rjmp	.+30     	; 0x3036 <main+0x22c>
    3018:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <menu_TestModulePattern>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    301c:	81 11       	cpse	r24, r1
    301e:	06 c0       	rjmp	.+12     	; 0x302c <main+0x222>
    3020:	8c 2f       	mov	r24, r28
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    3022:	0e 94 7f 2a 	call	0x54fe	; 0x54fe <menu_ProcessMessage>
    3026:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <menuNotActive>
    302a:	05 c0       	rjmp	.+10     	; 0x3036 <main+0x22c>
    302c:	8d ef       	ldi	r24, 0xFD	; 253
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    302e:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <menu_TestModuleBitCounter>
    3032:	0e 94 b7 28 	call	0x516e	; 0x516e <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
				}
			}
		}
		if (menuNotActive == TRUE) {
    3036:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuNotActive>
    303a:	8f 3f       	cpi	r24, 0xFF	; 255
    303c:	69 f4       	brne	.+26     	; 0x3058 <main+0x24e>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    303e:	df 3f       	cpi	r29, 0xFF	; 255
    3040:	61 f4       	brne	.+24     	; 0x305a <main+0x250>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    3042:	0e 94 c4 29 	call	0x5388	; 0x5388 <menu_ClearAllDisp>
				softKeys_toLCD();
    3046:	0e 94 55 2d 	call	0x5aaa	; 0x5aaa <softKeys_toLCD>
				softKey_WantLong(TRUE);
    304a:	8f ef       	ldi	r24, 0xFF	; 255
    304c:	44 d8       	rcall	.-3960   	; 0x20d6 <softKey_WantLong>
    304e:	8f ef       	ldi	r24, 0xFF	; 255
				prog_UpdDisplay = TRUE; // update program display 
    3050:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <prog_UpdDisplay>
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    3054:	d0 e0       	ldi	r29, 0x00	; 0
    3056:	01 c0       	rjmp	.+2      	; 0x305a <main+0x250>
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    3058:	df ef       	ldi	r29, 0xFF	; 255
		}
		DEBUG_OUT_MAIN
    305a:	85 b1       	in	r24, 0x05	; 5
    305c:	8f 7c       	andi	r24, 0xCF	; 207
    305e:	85 b9       	out	0x05, r24	; 5
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    3060:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <swTimer+0xe>
    3064:	81 11       	cpse	r24, r1
    3066:	04 c0       	rjmp	.+8      	; 0x3070 <main+0x266>
// 				uint8_t saveCursor = lcd_cursorPos;
// 				menu_deleteMessage();
// 				prog_UpdDisplay = TRUE; // to update reg display
// 				lcd_goto(saveCursor);
// 			 //}
			lcd_message_clear();
    3068:	da dc       	rcall	.-1612   	; 0x2a1e <lcd_message_clear>
    306a:	8f ef       	ldi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    306c:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <swTimer+0xe>
    3070:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    3074:	81 11       	cpse	r24, r1
    3076:	0a c0       	rjmp	.+20     	; 0x308c <main+0x282>
    3078:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    307c:	88 23       	and	r24, r24
    307e:	19 f0       	breq	.+6      	; 0x3086 <main+0x27c>
    3080:	0e 94 b7 28 	call	0x516e	; 0x516e <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    3084:	03 c0       	rjmp	.+6      	; 0x308c <main+0x282>
    3086:	8f ef       	ldi	r24, 0xFF	; 255
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    3088:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <swTimer+0xc>
    308c:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    3090:	81 11       	cpse	r24, r1
    3092:	1b c0       	rjmp	.+54     	; 0x30ca <main+0x2c0>
			module_PowerControl();
    3094:	0e 94 25 10 	call	0x204a	; 0x204a <module_PowerControl>
			menu_showPowerState();
    3098:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <menu_showPowerState>
			if (menuNotActive == TRUE) {
    309c:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <menuNotActive>
    30a0:	8f 3f       	cpi	r24, 0xFF	; 255
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    30a2:	99 f4       	brne	.+38     	; 0x30ca <main+0x2c0>
    30a4:	c0 91 c8 03 	lds	r28, 0x03C8	; 0x8003c8 <lcd_cursorPos>
				lcd_goto(LCD_LINE2);
    30a8:	84 e1       	ldi	r24, 0x14	; 20
    30aa:	9f db       	rcall	.-2242   	; 0x27ea <lcd_goto>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    30ac:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <pipe_PowerStatus>
    30b0:	81 30       	cpi	r24, 0x01	; 1
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    30b2:	21 f4       	brne	.+8      	; 0x30bc <main+0x2b2>
    30b4:	83 e9       	ldi	r24, 0x93	; 147
    30b6:	92 e0       	ldi	r25, 0x02	; 2
    30b8:	13 dc       	rcall	.-2010   	; 0x28e0 <lcd_puts_P>
    30ba:	05 c0       	rjmp	.+10     	; 0x30c6 <main+0x2bc>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    30bc:	82 31       	cpi	r24, 0x12	; 18
    30be:	19 f4       	brne	.+6      	; 0x30c6 <main+0x2bc>
					lcd_blank(LCD_LINELEN);
    30c0:	84 e1       	ldi	r24, 0x14	; 20
    30c2:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <lcd_blank>
				}
				lcd_goto(saveCursor);
    30c6:	8c 2f       	mov	r24, r28
    30c8:	90 db       	rcall	.-2272   	; 0x27ea <lcd_goto>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    30ca:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <messageFromESP>
    30ce:	9f e7       	ldi	r25, 0x7F	; 127
    30d0:	98 0f       	add	r25, r24
    30d2:	96 30       	cpi	r25, 0x06	; 6
    30d4:	10 f0       	brcs	.+4      	; 0x30da <main+0x2d0>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    30d6:	8e 3f       	cpi	r24, 0xFE	; 254
    30d8:	09 f5       	brne	.+66     	; 0x311c <main+0x312>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    30da:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <lcd_cursorIsOn>
    30de:	8f 3f       	cpi	r24, 0xFF	; 255
    30e0:	31 f4       	brne	.+12     	; 0x30ee <main+0x2e4>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    30e2:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <lcd_cursorPos>
    30e6:	95 db       	rcall	.-2262   	; 0x2812 <getCursorFromLCDRAMcursor>
    30e8:	0e 94 26 3a 	call	0x744c	; 0x744c <serial3SER_ESPSend>
    30ec:	03 c0       	rjmp	.+6      	; 0x30f4 <main+0x2ea>
    30ee:	8f e7       	ldi	r24, 0x7F	; 127
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    30f0:	0e 94 26 3a 	call	0x744c	; 0x744c <serial3SER_ESPSend>
    30f4:	81 e8       	ldi	r24, 0x81	; 129
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    30f6:	0e 94 26 3a 	call	0x744c	; 0x744c <serial3SER_ESPSend>
    30fa:	c0 e0       	ldi	r28, 0x00	; 0
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    30fc:	e8 e7       	ldi	r30, 0x78	; 120
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    30fe:	f3 e0       	ldi	r31, 0x03	; 3
    3100:	08 c0       	rjmp	.+16     	; 0x3112 <main+0x308>
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    3102:	8f 01       	movw	r16, r30
				serial3SER_ESPSend(*pChar++);
    3104:	0f 5f       	subi	r16, 0xFF	; 255
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	0e 94 26 3a 	call	0x744c	; 0x744c <serial3SER_ESPSend>
    310e:	cf 5f       	subi	r28, 0xFF	; 255
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    3110:	f8 01       	movw	r30, r16
				serial3SER_ESPSend(*pChar++);
    3112:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    3114:	b0 f3       	brcs	.-20     	; 0x3102 <main+0x2f8>
    3116:	80 e8       	ldi	r24, 0x80	; 128
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    3118:	0e 94 26 3a 	call	0x744c	; 0x744c <serial3SER_ESPSend>
    311c:	8f ef       	ldi	r24, 0xFF	; 255
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    311e:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <messageFromESP>
    3122:	0e 94 44 37 	call	0x6e88	; 0x6e88 <midi_CheckTxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    3126:	0e 94 10 35 	call	0x6a20	; 0x6a20 <midi_CheckRxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
    312a:	c0 91 c8 03 	lds	r28, 0x03C8	; 0x8003c8 <lcd_cursorPos>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    312e:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <swTimer+0x8>
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)){
    3132:	88 23       	and	r24, r24
    3134:	29 f0       	breq	.+10     	; 0x3140 <main+0x336>
    3136:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <swTimer+0x8>
    313a:	8f 3f       	cpi	r24, 0xFF	; 255
    313c:	09 f0       	breq	.+2      	; 0x3140 <main+0x336>
    313e:	67 c0       	rjmp	.+206    	; 0x320e <main+0x404>
			if (prog_Display == PROGR_NONE) {
    3140:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    3144:	8f 3f       	cpi	r24, 0xFF	; 255
    3146:	09 f0       	breq	.+2      	; 0x314a <main+0x340>
				// only if timer for midi in is not running at all (or just has elapsed)
				if (midiLastInNote != MIDI_NOTE_NONE) {
    3148:	62 c0       	rjmp	.+196    	; 0x320e <main+0x404>
    314a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
    314e:	8f 3f       	cpi	r24, 0xFF	; 255
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    3150:	91 f1       	breq	.+100    	; 0x31b6 <main+0x3ac>
    3152:	80 e0       	ldi	r24, 0x00	; 0
					if (midiLastInManual == MANUAL_NONE) {
    3154:	4a db       	rcall	.-2412   	; 0x27ea <lcd_goto>
    3156:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    315a:	8f 3f       	cpi	r24, 0xFF	; 255
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    315c:	69 f4       	brne	.+26     	; 0x3178 <main+0x36e>
    315e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <midiLastInChannel>
						lcd_putc('?');
    3162:	0e 94 5e 3d 	call	0x7abc	; 0x7abc <lcd_ChannelOut>
    3166:	8f e3       	ldi	r24, 0x3F	; 63
						lcd_noteOut(midiLastInNote);
    3168:	6a db       	rcall	.-2348   	; 0x283e <lcd_putc>
    316a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(' ');
    316e:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <lcd_noteOut>
    3172:	80 e2       	ldi	r24, 0x20	; 32
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    3174:	64 db       	rcall	.-2360   	; 0x283e <lcd_putc>
    3176:	0c c0       	rjmp	.+24     	; 0x3190 <main+0x386>
    3178:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(MENU_MIDI_IO_SIGN);
    317c:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <lcd_noteOut>
    3180:	8e e7       	ldi	r24, 0x7E	; 126
						lcd_ManualOutDec(midiLastInManual);
    3182:	5d db       	rcall	.-2374   	; 0x283e <lcd_putc>
    3184:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    3188:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <lcd_ManualOutDec>
						lcd_putc(' ');
    318c:	80 e2       	ldi	r24, 0x20	; 32
    318e:	57 db       	rcall	.-2386   	; 0x283e <lcd_putc>
					}
					lcd_goto(oldcursor);
    3190:	8c 2f       	mov	r24, r28
    3192:	2b db       	rcall	.-2474   	; 0x27ea <lcd_goto>
    3194:	8f ef       	ldi	r24, 0xFF	; 255
					midiLastInNote = MIDI_NOTE_NONE;
    3196:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <midiLastInNote>
					// now start timer 
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    319a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    319c:	f8 94       	cli
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	06 c0       	rjmp	.+12     	; 0x31ae <main+0x3a4>
    31a2:	ef e4       	ldi	r30, 0x4F	; 79
    31a4:	f2 e0       	ldi	r31, 0x02	; 2
    31a6:	83 e2       	ldi	r24, 0x23	; 35
    31a8:	80 87       	std	Z+8, r24	; 0x08
    31aa:	11 86       	std	Z+9, r1	; 0x09
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    31b0:	f8 cf       	rjmp	.-16     	; 0x31a2 <main+0x398>
    __asm__ volatile ("" ::: "memory");
    31b2:	9f bf       	out	0x3f, r25	; 63
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    31b4:	2c c0       	rjmp	.+88     	; 0x320e <main+0x404>
    31b6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    31ba:	8f 3f       	cpi	r24, 0xFF	; 255
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    31bc:	d9 f0       	breq	.+54     	; 0x31f4 <main+0x3ea>
    31be:	80 e0       	ldi	r24, 0x00	; 0
    31c0:	14 db       	rcall	.-2520   	; 0x27ea <lcd_goto>
					lcd_putc('p');
    31c2:	80 e7       	ldi	r24, 0x70	; 112
    31c4:	3c db       	rcall	.-2440   	; 0x283e <lcd_putc>
    31c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
					lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    31ca:	0e 94 91 3b 	call	0x7722	; 0x7722 <lcd_dec2out>
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    31ce:	8e e7       	ldi	r24, 0x7E	; 126
    31d0:	36 db       	rcall	.-2452   	; 0x283e <lcd_putc>
    31d2:	8f ef       	ldi	r24, 0xFF	; 255
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    31d4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <midiLastProgram>
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    31d8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    31da:	f8 94       	cli
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	06 c0       	rjmp	.+12     	; 0x31ec <main+0x3e2>
    31e0:	ef e4       	ldi	r30, 0x4F	; 79
    31e2:	f2 e0       	ldi	r31, 0x02	; 2
    31e4:	83 e2       	ldi	r24, 0x23	; 35
    31e6:	80 87       	std	Z+8, r24	; 0x08
    31e8:	11 86       	std	Z+9, r1	; 0x09
    31ea:	80 e0       	ldi	r24, 0x00	; 0
    31ec:	81 11       	cpse	r24, r1
    31ee:	f8 cf       	rjmp	.-16     	; 0x31e0 <main+0x3d6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    31f0:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    31f2:	0d c0       	rjmp	.+26     	; 0x320e <main+0x404>
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    31f4:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <swTimer+0x8>
    31f8:	81 11       	cpse	r24, r1
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    31fa:	09 c0       	rjmp	.+18     	; 0x320e <main+0x404>
    31fc:	f6 da       	rcall	.-2580   	; 0x27ea <lcd_goto>
					lcd_blank(6);
    31fe:	86 e0       	ldi	r24, 0x06	; 6
    3200:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <lcd_blank>
					lcd_goto(oldcursor);
    3204:	8c 2f       	mov	r24, r28
    3206:	f1 da       	rcall	.-2590   	; 0x27ea <lcd_goto>
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    3208:	8f ef       	ldi	r24, 0xFF	; 255
    320a:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <swTimer+0x8>
				}
			}
		}
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    320e:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <swTimer+0xa>
    3212:	8f 3f       	cpi	r24, 0xFF	; 255
    3214:	21 f0       	breq	.+8      	; 0x321e <main+0x414>
    3216:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <swTimer+0xa>
    321a:	81 11       	cpse	r24, r1
			if (midiLastOutNote != MIDI_NOTE_NONE){
    321c:	5b c0       	rjmp	.+182    	; 0x32d4 <main+0x4ca>
    321e:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
    3222:	8f 3f       	cpi	r24, 0xFF	; 255
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3224:	f9 f0       	breq	.+62     	; 0x3264 <main+0x45a>
    3226:	8f e0       	ldi	r24, 0x0F	; 15
    3228:	e0 da       	rcall	.-2624   	; 0x27ea <lcd_goto>
				lcd_ManualOutDec(midiLastOutManual);
    322a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <midiLastOutManual>
    322e:	0e 94 6f 3d 	call	0x7ade	; 0x7ade <lcd_ManualOutDec>
				lcd_putc(MENU_MIDI_IO_SIGN);
    3232:	8e e7       	ldi	r24, 0x7E	; 126
    3234:	04 db       	rcall	.-2552   	; 0x283e <lcd_putc>
				lcd_noteOut(midiLastOutNote);
    3236:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
    323a:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <lcd_noteOut>
				lcd_goto(oldcursor);
    323e:	8c 2f       	mov	r24, r28
    3240:	d4 da       	rcall	.-2648   	; 0x27ea <lcd_goto>
				midiLastOutNote = MIDI_NOTE_NONE;
    3242:	8f ef       	ldi	r24, 0xFF	; 255
    3244:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <midiLastOutNote>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    3248:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    324a:	f8 94       	cli
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	06 c0       	rjmp	.+12     	; 0x325c <main+0x452>
    3250:	ef e4       	ldi	r30, 0x4F	; 79
    3252:	f2 e0       	ldi	r31, 0x02	; 2
    3254:	88 e2       	ldi	r24, 0x28	; 40
    3256:	82 87       	std	Z+10, r24	; 0x0a
    3258:	13 86       	std	Z+11, r1	; 0x0b
    325a:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    325c:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    325e:	f8 cf       	rjmp	.-16     	; 0x3250 <main+0x446>
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    3260:	9f bf       	out	0x3f, r25	; 63
    3262:	38 c0       	rjmp	.+112    	; 0x32d4 <main+0x4ca>
    3264:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3268:	8f 3f       	cpi	r24, 0xFF	; 255
    326a:	31 f1       	breq	.+76     	; 0x32b8 <main+0x4ae>
    326c:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_putc('R');
    326e:	bd da       	rcall	.-2694   	; 0x27ea <lcd_goto>
    3270:	82 e5       	ldi	r24, 0x52	; 82
    3272:	e5 da       	rcall	.-2614   	; 0x283e <lcd_putc>
				lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    3274:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <midi_RegisterChanged>
    3278:	8f 77       	andi	r24, 0x7F	; 127
    327a:	0e 94 91 3b 	call	0x7722	; 0x7722 <lcd_dec2out>
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    327e:	80 91 54 09 	lds	r24, 0x0954	; 0x800954 <midi_RegisterChanged>
    3282:	88 23       	and	r24, r24
    3284:	14 f0       	brlt	.+4      	; 0x328a <main+0x480>
    3286:	88 e0       	ldi	r24, 0x08	; 8
    3288:	01 c0       	rjmp	.+2      	; 0x328c <main+0x482>
    328a:	89 e0       	ldi	r24, 0x09	; 9
				lcd_putc(' ');
    328c:	d8 da       	rcall	.-2640   	; 0x283e <lcd_putc>
    328e:	80 e2       	ldi	r24, 0x20	; 32
    3290:	d6 da       	rcall	.-2644   	; 0x283e <lcd_putc>
				lcd_goto(oldcursor);
    3292:	8c 2f       	mov	r24, r28
    3294:	aa da       	rcall	.-2732   	; 0x27ea <lcd_goto>
    3296:	8f ef       	ldi	r24, 0xFF	; 255
				midi_RegisterChanged = REGISTER_NONE;
    3298:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <midi_RegisterChanged>
    329c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    329e:	f8 94       	cli
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	06 c0       	rjmp	.+12     	; 0x32b0 <main+0x4a6>
    32a4:	ef e4       	ldi	r30, 0x4F	; 79
    32a6:	f2 e0       	ldi	r31, 0x02	; 2
    32a8:	88 e2       	ldi	r24, 0x28	; 40
    32aa:	82 87       	std	Z+10, r24	; 0x0a
    32ac:	13 86       	std	Z+11, r1	; 0x0b
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	81 11       	cpse	r24, r1
    32b2:	f8 cf       	rjmp	.-16     	; 0x32a4 <main+0x49a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    32b4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    32b6:	0e c0       	rjmp	.+28     	; 0x32d4 <main+0x4ca>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    32b8:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <swTimer+0xa>
    32bc:	81 11       	cpse	r24, r1
    32be:	0a c0       	rjmp	.+20     	; 0x32d4 <main+0x4ca>
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    32c0:	8f e0       	ldi	r24, 0x0F	; 15
    32c2:	93 da       	rcall	.-2778   	; 0x27ea <lcd_goto>
    32c4:	85 e0       	ldi	r24, 0x05	; 5
				lcd_blank(5);
    32c6:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <lcd_blank>
    32ca:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    32cc:	8e da       	rcall	.-2788   	; 0x27ea <lcd_goto>
    32ce:	8f ef       	ldi	r24, 0xFF	; 255
    32d0:	80 93 59 02 	sts	0x0259, r24	; 0x800259 <swTimer+0xa>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    32d4:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <prog_UpdDisplay>
			}
		}
		#endif
		//----------------------- program display ------------------------
		if (prog_UpdDisplay == TRUE){
    32d8:	8f 3f       	cpi	r24, 0xFF	; 255
    32da:	79 f4       	brne	.+30     	; 0x32fa <main+0x4f0>
    32dc:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <prog_UpdDisplay>
			prog_UpdDisplay = FALSE;
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	83 da       	rcall	.-2810   	; 0x27ea <lcd_goto>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    32e4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <prog_toLcd>
    32e8:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
			prog_toLcd();
    32ec:	8f 3f       	cpi	r24, 0xFF	; 255
			if (prog_Display != PROGR_NONE) {
    32ee:	19 f0       	breq	.+6      	; 0x32f6 <main+0x4ec>
    32f0:	0e 94 0b 32 	call	0x6416	; 0x6416 <reg_toLCD>
    32f4:	02 c0       	rjmp	.+4      	; 0x32fa <main+0x4f0>
				reg_toLCD();
    32f6:	0e 94 6e 32 	call	0x64dc	; 0x64dc <reg_ClearOnLCD>
    32fa:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <time_UpTimeUpdated>
			} else {
				reg_ClearOnLCD();
    32fe:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    3300:	09 f0       	breq	.+2      	; 0x3304 <main+0x4fa>
    3302:	7e c0       	rjmp	.+252    	; 0x3400 <main+0x5f6>
    3304:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <time_UpTimeUpdated>
    3308:	f0 90 c8 03 	lds	r15, 0x03C8	; 0x8003c8 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    330c:	c0 91 fc 18 	lds	r28, 0x18FC	; 0x8018fc <lcd_cursorIsOn>
			uint8_t oldBlink = lcd_cursorIsOn;
    3310:	cf 3f       	cpi	r28, 0xFF	; 255
    3312:	11 f4       	brne	.+4      	; 0x3318 <main+0x50e>
			if (oldBlink == TRUE) {
    3314:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <lcd_cursoroff>
				lcd_cursoroff();
    3318:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <time_Uptime+0x3>
			}
			char separator;
			if (*pTime == 0) {
    331c:	88 23       	and	r24, r24
    331e:	59 f0       	breq	.+22     	; 0x3336 <main+0x52c>
    3320:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <time_Uptime+0x1>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    3324:	80 fd       	sbrc	r24, 0
    3326:	0e c0       	rjmp	.+28     	; 0x3344 <main+0x53a>
    3328:	0f 2e       	mov	r0, r31
				// when displaying hr:min blink ":"
				separator = ':';
    332a:	fa e3       	ldi	r31, 0x3A	; 58
    332c:	ef 2e       	mov	r14, r31
    332e:	f0 2d       	mov	r31, r0
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3330:	04 e6       	ldi	r16, 0x64	; 100
    3332:	12 e0       	ldi	r17, 0x02	; 2
    3334:	0c c0       	rjmp	.+24     	; 0x334e <main+0x544>
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    3336:	0f 2e       	mov	r0, r31
    3338:	fa e3       	ldi	r31, 0x3A	; 58
    333a:	ef 2e       	mov	r14, r31
    333c:	f0 2d       	mov	r31, r0
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    333e:	03 e6       	ldi	r16, 0x63	; 99
    3340:	12 e0       	ldi	r17, 0x02	; 2
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    3342:	05 c0       	rjmp	.+10     	; 0x334e <main+0x544>
    3344:	68 94       	set
    3346:	ee 24       	eor	r14, r14
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3348:	e5 f8       	bld	r14, 5
    334a:	04 e6       	ldi	r16, 0x64	; 100
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    334c:	12 e0       	ldi	r17, 0x02	; 2
    334e:	87 e0       	ldi	r24, 0x07	; 7
			lcd_dec2out(*(pTime--));
    3350:	4c da       	rcall	.-2920   	; 0x27ea <lcd_goto>
    3352:	f8 01       	movw	r30, r16
    3354:	80 81       	ld	r24, Z
    3356:	0e 94 91 3b 	call	0x7722	; 0x7722 <lcd_dec2out>
			lcd_putc(separator);
    335a:	8e 2d       	mov	r24, r14
    335c:	70 da       	rcall	.-2848   	; 0x283e <lcd_putc>
			lcd_dec2out(*pTime);
    335e:	f8 01       	movw	r30, r16
    3360:	31 97       	sbiw	r30, 0x01	; 1
    3362:	80 81       	ld	r24, Z
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    3364:	0e 94 91 3b 	call	0x7722	; 0x7722 <lcd_dec2out>
			if (ovflCount > 0){
    3368:	40 91 70 16 	lds	r20, 0x1670	; 0x801670 <midiRxOvflCount>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    336c:	44 23       	and	r20, r20
    336e:	31 f0       	breq	.+12     	; 0x337c <main+0x572>
    3370:	50 e0       	ldi	r21, 0x00	; 0
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	83 e0       	ldi	r24, 0x03	; 3
				midiRxOvflCount = 0;
    3376:	33 dd       	rcall	.-1434   	; 0x2dde <log_putError>
    3378:	10 92 70 16 	sts	0x1670, r1	; 0x801670 <midiRxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    337c:	40 91 77 16 	lds	r20, 0x1677	; 0x801677 <midiTxOvflCount>
			if (ovflCount > 0){
    3380:	44 23       	and	r20, r20
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    3382:	31 f0       	breq	.+12     	; 0x3390 <main+0x586>
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	61 e0       	ldi	r22, 0x01	; 1
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	29 dd       	rcall	.-1454   	; 0x2dde <log_putError>
				midiTxOvflCount = 0;
    338c:	10 92 77 16 	sts	0x1677, r1	; 0x801677 <midiTxOvflCount>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    3390:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <pipe_PowerStatus>
    3394:	84 ff       	sbrs	r24, 4
    3396:	02 c0       	rjmp	.+4      	; 0x339c <main+0x592>
    3398:	80 e2       	ldi	r24, 0x20	; 32
    339a:	01 c0       	rjmp	.+2      	; 0x339e <main+0x594>
    339c:	89 e0       	ldi	r24, 0x09	; 9
    339e:	4f da       	rcall	.-2914   	; 0x283e <lcd_putc>
    33a0:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <log_unreadErrors>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    33a4:	8f 3f       	cpi	r24, 0xFF	; 255
    33a6:	11 f4       	brne	.+4      	; 0x33ac <main+0x5a2>
    33a8:	85 e4       	ldi	r24, 0x45	; 69
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <main+0x5a4>
    33ac:	80 e2       	ldi	r24, 0x20	; 32
    33ae:	47 da       	rcall	.-2930   	; 0x283e <lcd_putc>
    33b0:	8f 2d       	mov	r24, r15
    33b2:	1b da       	rcall	.-3018   	; 0x27ea <lcd_goto>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    33b4:	cf 3f       	cpi	r28, 0xFF	; 255
    33b6:	11 f4       	brne	.+4      	; 0x33bc <main+0x5b2>
    33b8:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <lcd_cursosblink>
			if (oldBlink == TRUE) {
    33bc:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <swTimer+0x8>
				lcd_cursosblink();
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    33c0:	8f 3f       	cpi	r24, 0xFF	; 255
    33c2:	69 f4       	brne	.+26     	; 0x33de <main+0x5d4>
    33c4:	9f b7       	in	r25, 0x3f	; 63
    33c6:	f8 94       	cli
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    33ca:	06 c0       	rjmp	.+12     	; 0x33d8 <main+0x5ce>
    33cc:	ef e4       	ldi	r30, 0x4F	; 79
    33ce:	f2 e0       	ldi	r31, 0x02	; 2
    33d0:	8d e7       	ldi	r24, 0x7D	; 125
    33d2:	80 87       	std	Z+8, r24	; 0x08
    33d4:	11 86       	std	Z+9, r1	; 0x09
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	81 11       	cpse	r24, r1
    33da:	f8 cf       	rjmp	.-16     	; 0x33cc <main+0x5c2>
    33dc:	9f bf       	out	0x3f, r25	; 63
    33de:	80 91 59 02 	lds	r24, 0x0259	; 0x800259 <swTimer+0xa>
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    33e2:	8f 3f       	cpi	r24, 0xFF	; 255
    33e4:	69 f4       	brne	.+26     	; 0x3400 <main+0x5f6>
    33e6:	9f b7       	in	r25, 0x3f	; 63
    33e8:	f8 94       	cli
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	06 c0       	rjmp	.+12     	; 0x33fa <main+0x5f0>
    33ee:	ef e4       	ldi	r30, 0x4F	; 79
    33f0:	f2 e0       	ldi	r31, 0x02	; 2
    33f2:	8d e7       	ldi	r24, 0x7D	; 125
    33f4:	82 87       	std	Z+10, r24	; 0x0a
    33f6:	13 86       	std	Z+11, r1	; 0x0b
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	81 11       	cpse	r24, r1
    33fc:	f8 cf       	rjmp	.-16     	; 0x33ee <main+0x5e4>
    33fe:	9f bf       	out	0x3f, r25	; 63
    3400:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <msgPipeOverflow>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    3404:	8f 3f       	cpi	r24, 0xFF	; 255
    3406:	39 f4       	brne	.+14     	; 0x3416 <main+0x60c>
    3408:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <msgPipeOverflow>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    340c:	40 e0       	ldi	r20, 0x00	; 0
    340e:	50 e0       	ldi	r21, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	84 e0       	ldi	r24, 0x04	; 4
    3414:	e4 dc       	rcall	.-1592   	; 0x2dde <log_putError>
    3416:	85 b1       	in	r24, 0x05	; 5
    3418:	8f 7c       	andi	r24, 0xCF	; 207
    341a:	80 62       	ori	r24, 0x20	; 32
		}
		DEBUG_OUT_MIDI
    341c:	85 b9       	out	0x05, r24	; 5
    341e:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <midiRxInIndex>
    3422:	80 91 74 16 	lds	r24, 0x1674	; 0x801674 <midiRxOutIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    3426:	98 17       	cp	r25, r24
    3428:	21 f0       	breq	.+8      	; 0x3432 <main+0x628>
    342a:	0e 94 5c 38 	call	0x70b8	; 0x70b8 <serial1MIDIReadRx>
    342e:	0e 94 99 35 	call	0x6b32	; 0x6b32 <midiIn_Process>
			midiIn_Process(serial1MIDIReadRx());
    3432:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <pipeMsgStatus>
    3436:	8f 3f       	cpi	r24, 0xFF	; 255
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    3438:	09 f0       	breq	.+2      	; 0x343c <main+0x632>
    343a:	33 cd       	rjmp	.-1434   	; 0x2ea2 <main+0x98>
    343c:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <pipeMsgGet>
    3440:	0e 94 5e 36 	call	0x6cbc	; 0x6cbc <midiKeyPress_Process>
			midiKeyPress_Process(pipeMsgGet());
    3444:	2e cd       	rjmp	.-1444   	; 0x2ea2 <main+0x98>

00003446 <menu_enterWriteModule>:
    3446:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuModVal>
    344a:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <menuModVal+0x1>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    344e:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <menuModVal+0x2>
    3452:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <menuModVal+0x3>
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	90 e0       	ldi	r25, 0x00	; 0
    345a:	00 90 99 05 	lds	r0, 0x0599	; 0x800599 <menuVmodule>
    345e:	02 c0       	rjmp	.+4      	; 0x3464 <menu_enterWriteModule+0x1e>
    3460:	88 0f       	add	r24, r24
    3462:	99 1f       	adc	r25, r25
    3464:	0a 94       	dec	r0
    3466:	e2 f7       	brpl	.-8      	; 0x3460 <menu_enterWriteModule+0x1a>
    3468:	48 2f       	mov	r20, r24
    346a:	30 e0       	ldi	r19, 0x00	; 0
    346c:	e1 e6       	ldi	r30, 0x61	; 97
    346e:	f3 e0       	ldi	r31, 0x03	; 3
    3470:	22 c0       	rjmp	.+68     	; 0x34b6 <menu_enterWriteModule+0x70>
    3472:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menuModVal>
    3476:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <menuModVal+0x1>
    347a:	a0 91 d0 05 	lds	r26, 0x05D0	; 0x8005d0 <menuModVal+0x2>
    347e:	b0 91 d1 05 	lds	r27, 0x05D1	; 0x8005d1 <menuModVal+0x3>
    3482:	88 0f       	add	r24, r24
    3484:	99 1f       	adc	r25, r25
    3486:	aa 1f       	adc	r26, r26
    3488:	bb 1f       	adc	r27, r27
    348a:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menuModVal>
    348e:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <menuModVal+0x1>
    3492:	a0 93 d0 05 	sts	0x05D0, r26	; 0x8005d0 <menuModVal+0x2>
    3496:	b0 93 d1 05 	sts	0x05D1, r27	; 0x8005d1 <menuModVal+0x3>
    349a:	21 81       	ldd	r18, Z+1	; 0x01
    349c:	24 23       	and	r18, r20
    349e:	49 f0       	breq	.+18     	; 0x34b2 <menu_enterWriteModule+0x6c>
    34a0:	81 60       	ori	r24, 0x01	; 1
    34a2:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <menuModVal>
    34a6:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <menuModVal+0x1>
    34aa:	a0 93 d0 05 	sts	0x05D0, r26	; 0x8005d0 <menuModVal+0x2>
    34ae:	b0 93 d1 05 	sts	0x05D1, r27	; 0x8005d1 <menuModVal+0x3>
    34b2:	38 97       	sbiw	r30, 0x08	; 8
    34b4:	3f 5f       	subi	r19, 0xFF	; 255
    34b6:	30 32       	cpi	r19, 0x20	; 32
    34b8:	e0 f2       	brcs	.-72     	; 0x3472 <menu_enterWriteModule+0x2c>
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	08 95       	ret

000034be <menu_exitWriteModule>:
    34be:	40 91 ce 05 	lds	r20, 0x05CE	; 0x8005ce <menuModVal>
    34c2:	50 91 cf 05 	lds	r21, 0x05CF	; 0x8005cf <menuModVal+0x1>
    34c6:	60 91 d0 05 	lds	r22, 0x05D0	; 0x8005d0 <menuModVal+0x2>
    34ca:	70 91 d1 05 	lds	r23, 0x05D1	; 0x8005d1 <menuModVal+0x3>
    34ce:	85 30       	cpi	r24, 0x05	; 5
    34d0:	09 f5       	brne	.+66     	; 0x3514 <menu_exitWriteModule+0x56>
    34d2:	a1 e0       	ldi	r26, 0x01	; 1
    34d4:	b0 e0       	ldi	r27, 0x00	; 0
    34d6:	00 90 99 05 	lds	r0, 0x0599	; 0x800599 <menuVmodule>
    34da:	02 c0       	rjmp	.+4      	; 0x34e0 <menu_exitWriteModule+0x22>
    34dc:	aa 0f       	add	r26, r26
    34de:	bb 1f       	adc	r27, r27
    34e0:	0a 94       	dec	r0
    34e2:	e2 f7       	brpl	.-8      	; 0x34dc <menu_exitWriteModule+0x1e>
    34e4:	3a 2f       	mov	r19, r26
    34e6:	90 e0       	ldi	r25, 0x00	; 0
    34e8:	e1 e6       	ldi	r30, 0x61	; 97
    34ea:	f3 e0       	ldi	r31, 0x03	; 3
    34ec:	11 c0       	rjmp	.+34     	; 0x3510 <menu_exitWriteModule+0x52>
    34ee:	77 23       	and	r23, r23
    34f0:	24 f4       	brge	.+8      	; 0x34fa <menu_exitWriteModule+0x3c>
    34f2:	81 81       	ldd	r24, Z+1	; 0x01
    34f4:	83 2b       	or	r24, r19
    34f6:	81 83       	std	Z+1, r24	; 0x01
    34f8:	05 c0       	rjmp	.+10     	; 0x3504 <menu_exitWriteModule+0x46>
    34fa:	21 81       	ldd	r18, Z+1	; 0x01
    34fc:	8a 2f       	mov	r24, r26
    34fe:	80 95       	com	r24
    3500:	82 23       	and	r24, r18
    3502:	81 83       	std	Z+1, r24	; 0x01
    3504:	44 0f       	add	r20, r20
    3506:	55 1f       	adc	r21, r21
    3508:	66 1f       	adc	r22, r22
    350a:	77 1f       	adc	r23, r23
    350c:	38 97       	sbiw	r30, 0x08	; 8
    350e:	9f 5f       	subi	r25, 0xFF	; 255
    3510:	90 32       	cpi	r25, 0x20	; 32
    3512:	68 f3       	brcs	.-38     	; 0x34ee <menu_exitWriteModule+0x30>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	08 95       	ret

00003518 <menuOnEnterModSel>:
    3518:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    351c:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    3520:	3e 96       	adiw	r30, 0x0e	; 14
    3522:	85 91       	lpm	r24, Z+
    3524:	95 91       	lpm	r25, Z+
    3526:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <menuVmodule>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	08 95       	ret

0000352e <menuOnEnterMidiInCh>:
    352e:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    3532:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    3536:	3e 96       	adiw	r30, 0x0e	; 14
    3538:	85 91       	lpm	r24, Z+
    353a:	95 91       	lpm	r25, Z+
    353c:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <menuVmidiChan>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	08 95       	ret

00003544 <menuOnEnterMidiInSec>:
    3544:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    3548:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    354c:	3e 96       	adiw	r30, 0x0e	; 14
    354e:	25 91       	lpm	r18, Z+
    3550:	35 91       	lpm	r19, Z+
    3552:	20 93 d8 05 	sts	0x05D8, r18	; 0x8005d8 <menuVsection>
    3556:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <menuVmidiChan>
    355a:	8f 70       	andi	r24, 0x0F	; 15
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	23 70       	andi	r18, 0x03	; 3
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	82 0f       	add	r24, r18
    356a:	91 1d       	adc	r25, r1
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <DataAdressOffset+0x1>
    3578:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <DataAdressOffset>
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	08 95       	ret

00003580 <menuOnEnterModManual>:
    3580:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    3584:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    3588:	3e 96       	adiw	r30, 0x0e	; 14
    358a:	85 91       	lpm	r24, Z+
    358c:	95 91       	lpm	r25, Z+
    358e:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <menuVmanual>
    3592:	80 e0       	ldi	r24, 0x00	; 0
    3594:	08 95       	ret

00003596 <menuOnEnterModSec>:
    3596:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    359a:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    359e:	3e 96       	adiw	r30, 0x0e	; 14
    35a0:	85 91       	lpm	r24, Z+
    35a2:	95 91       	lpm	r25, Z+
    35a4:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <menuVsection>
    35a8:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <menuVmanual>
    35ac:	2f 70       	andi	r18, 0x0F	; 15
    35ae:	30 e0       	ldi	r19, 0x00	; 0
    35b0:	83 70       	andi	r24, 0x03	; 3
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	a9 01       	movw	r20, r18
    35b6:	44 0f       	add	r20, r20
    35b8:	55 1f       	adc	r21, r21
    35ba:	24 0f       	add	r18, r20
    35bc:	35 1f       	adc	r19, r21
    35be:	22 0f       	add	r18, r18
    35c0:	33 1f       	adc	r19, r19
    35c2:	22 0f       	add	r18, r18
    35c4:	33 1f       	adc	r19, r19
    35c6:	ac 01       	movw	r20, r24
    35c8:	44 0f       	add	r20, r20
    35ca:	55 1f       	adc	r21, r21
    35cc:	84 0f       	add	r24, r20
    35ce:	95 1f       	adc	r25, r21
    35d0:	82 0f       	add	r24, r18
    35d2:	93 1f       	adc	r25, r19
    35d4:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <DataAdressOffset+0x1>
    35d8:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <DataAdressOffset>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	08 95       	ret

000035e0 <menuOnEnterModSecReg>:
    35e0:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    35e4:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    35e8:	3e 96       	adiw	r30, 0x0e	; 14
    35ea:	85 91       	lpm	r24, Z+
    35ec:	95 91       	lpm	r25, Z+
    35ee:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <menuVsection>
    35f2:	87 70       	andi	r24, 0x07	; 7
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	9c 01       	movw	r18, r24
    35f8:	22 0f       	add	r18, r18
    35fa:	33 1f       	adc	r19, r19
    35fc:	82 0f       	add	r24, r18
    35fe:	93 1f       	adc	r25, r19
    3600:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <DataAdressOffset+0x1>
    3604:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <DataAdressOffset>
    3608:	80 e0       	ldi	r24, 0x00	; 0
    360a:	08 95       	ret

0000360c <menuOnEnterRegOut>:
    360c:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    3610:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    3614:	3e 96       	adiw	r30, 0x0e	; 14
    3616:	85 91       	lpm	r24, Z+
    3618:	95 91       	lpm	r25, Z+
    361a:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <menuVsection>
    361e:	87 70       	andi	r24, 0x07	; 7
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	88 0f       	add	r24, r24
    3624:	99 1f       	adc	r25, r25
    3626:	88 0f       	add	r24, r24
    3628:	99 1f       	adc	r25, r25
    362a:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <DataAdressOffset+0x1>
    362e:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <DataAdressOffset>
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	08 95       	ret

00003636 <menuOnEnterKey>:
    3636:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    363a:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    363e:	3e 96       	adiw	r30, 0x0e	; 14
    3640:	85 91       	lpm	r24, Z+
    3642:	95 91       	lpm	r25, Z+
    3644:	84 30       	cpi	r24, 0x04	; 4
    3646:	60 f4       	brcc	.+24     	; 0x3660 <menuOnEnterKey+0x2a>
    3648:	fc 01       	movw	r30, r24
    364a:	ff 27       	eor	r31, r31
    364c:	ee 0f       	add	r30, r30
    364e:	ff 1f       	adc	r31, r31
    3650:	e5 52       	subi	r30, 0x25	; 37
    3652:	fa 4f       	sbci	r31, 0xFA	; 250
    3654:	80 81       	ld	r24, Z
    3656:	91 81       	ldd	r25, Z+1	; 0x01
    3658:	90 93 ef 05 	sts	0x05EF, r25	; 0x8005ef <menuVMenuSoftKey+0x1>
    365c:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <menuVMenuSoftKey>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	08 95       	ret

00003664 <menuOnExitRegisterOut>:
    3664:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <eeprom_UpdateRegOut>
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	08 95       	ret

0000366c <menuOnExitMidiThrough>:
    366c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_UpdateMidiThrough>
    3670:	80 e0       	ldi	r24, 0x00	; 0
    3672:	08 95       	ret

00003674 <menuOnExitRegisterEdit>:
    3674:	1f 93       	push	r17
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	86 30       	cpi	r24, 0x06	; 6
    367c:	f1 f0       	breq	.+60     	; 0x36ba <menuOnExitRegisterEdit+0x46>
    367e:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    3682:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    3686:	3e 96       	adiw	r30, 0x0e	; 14
    3688:	05 90       	lpm	r0, Z+
    368a:	f4 91       	lpm	r31, Z
    368c:	e0 2d       	mov	r30, r0
    368e:	cf 01       	movw	r24, r30
    3690:	8e 58       	subi	r24, 0x8E	; 142
    3692:	95 40       	sbci	r25, 0x05	; 5
    3694:	88 0f       	add	r24, r24
    3696:	88 0f       	add	r24, r24
    3698:	88 0f       	add	r24, r24
    369a:	d0 81       	ld	r29, Z
    369c:	c0 e0       	ldi	r28, 0x00	; 0
    369e:	0b c0       	rjmp	.+22     	; 0x36b6 <menuOnExitRegisterEdit+0x42>
    36a0:	11 e0       	ldi	r17, 0x01	; 1
    36a2:	18 0f       	add	r17, r24
    36a4:	6d 2f       	mov	r22, r29
    36a6:	66 1f       	adc	r22, r22
    36a8:	66 27       	eor	r22, r22
    36aa:	66 1f       	adc	r22, r22
    36ac:	0e 94 8e 30 	call	0x611c	; 0x611c <register_onOff>
    36b0:	dd 0f       	add	r29, r29
    36b2:	cf 5f       	subi	r28, 0xFF	; 255
    36b4:	81 2f       	mov	r24, r17
    36b6:	c8 30       	cpi	r28, 0x08	; 8
    36b8:	98 f3       	brcs	.-26     	; 0x36a0 <menuOnExitRegisterEdit+0x2c>
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	df 91       	pop	r29
    36be:	cf 91       	pop	r28
    36c0:	1f 91       	pop	r17
    36c2:	08 95       	ret

000036c4 <softKeyRegOff>:
    36c4:	81 11       	cpse	r24, r1
    36c6:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <midi_resetRegisters>
    36ca:	80 e0       	ldi	r24, 0x00	; 0
    36cc:	08 95       	ret

000036ce <menuOnExitCoupler>:
    36ce:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    36d2:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    36d6:	3e 96       	adiw	r30, 0x0e	; 14
    36d8:	85 91       	lpm	r24, Z+
    36da:	95 91       	lpm	r25, Z+
    36dc:	82 53       	subi	r24, 0x32	; 50
    36de:	98 40       	sbci	r25, 0x08	; 8
    36e0:	fc 01       	movw	r30, r24
    36e2:	ff 27       	eor	r31, r31
    36e4:	ee 5c       	subi	r30, 0xCE	; 206
    36e6:	f7 4f       	sbci	r31, 0xF7	; 247
    36e8:	20 81       	ld	r18, Z
    36ea:	21 11       	cpse	r18, r1
    36ec:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <set_Coupler>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	08 95       	ret

000036f4 <menuOnExitSaveProgram>:
    36f4:	86 30       	cpi	r24, 0x06	; 6
    36f6:	39 f0       	breq	.+14     	; 0x3706 <menuOnExitSaveProgram+0x12>
    36f8:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <menuVKombination>
    36fc:	80 34       	cpi	r24, 0x40	; 64
    36fe:	18 f4       	brcc	.+6      	; 0x3706 <menuOnExitSaveProgram+0x12>
    3700:	6f ef       	ldi	r22, 0xFF	; 255
    3702:	0e 94 b3 30 	call	0x6166	; 0x6166 <register_toProgram>
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	08 95       	ret

0000370a <menuOnExitKeys>:
    370a:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <eeprom_UpdateSoftkeys>
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	08 95       	ret

00003712 <menu_readModule>:
    3712:	cf 92       	push	r12
    3714:	df 92       	push	r13
    3716:	ef 92       	push	r14
    3718:	ff 92       	push	r15
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	00 90 99 05 	lds	r0, 0x0599	; 0x800599 <menuVmodule>
    3722:	02 c0       	rjmp	.+4      	; 0x3728 <menu_readModule+0x16>
    3724:	88 0f       	add	r24, r24
    3726:	99 1f       	adc	r25, r25
    3728:	0a 94       	dec	r0
    372a:	e2 f7       	brpl	.-8      	; 0x3724 <menu_readModule+0x12>
    372c:	28 2f       	mov	r18, r24
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	e1 e6       	ldi	r30, 0x61	; 97
    3732:	f3 e0       	ldi	r31, 0x03	; 3
    3734:	c1 2c       	mov	r12, r1
    3736:	d1 2c       	mov	r13, r1
    3738:	76 01       	movw	r14, r12
    373a:	0b c0       	rjmp	.+22     	; 0x3752 <menu_readModule+0x40>
    373c:	cc 0c       	add	r12, r12
    373e:	dd 1c       	adc	r13, r13
    3740:	ee 1c       	adc	r14, r14
    3742:	ff 1c       	adc	r15, r15
    3744:	86 81       	ldd	r24, Z+6	; 0x06
    3746:	82 23       	and	r24, r18
    3748:	11 f0       	breq	.+4      	; 0x374e <menu_readModule+0x3c>
    374a:	68 94       	set
    374c:	c0 f8       	bld	r12, 0
    374e:	38 97       	sbiw	r30, 0x08	; 8
    3750:	9f 5f       	subi	r25, 0xFF	; 255
    3752:	90 32       	cpi	r25, 0x20	; 32
    3754:	98 f3       	brcs	.-26     	; 0x373c <menu_readModule+0x2a>
    3756:	8e e1       	ldi	r24, 0x1E	; 30
    3758:	48 d8       	rcall	.-3952   	; 0x27ea <lcd_goto>
    375a:	c0 92 fe 18 	sts	0x18FE, r12	; 0x8018fe <editLong>
    375e:	d0 92 ff 18 	sts	0x18FF, r13	; 0x8018ff <editLong+0x1>
    3762:	e0 92 00 19 	sts	0x1900, r14	; 0x801900 <editLong+0x2>
    3766:	f0 92 01 19 	sts	0x1901, r15	; 0x801901 <editLong+0x3>
    376a:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <lcd_longout>
    376e:	80 e0       	ldi	r24, 0x00	; 0
    3770:	ff 90       	pop	r15
    3772:	ef 90       	pop	r14
    3774:	df 90       	pop	r13
    3776:	cf 90       	pop	r12
    3778:	08 95       	ret

0000377a <menu_testModule>:
    377a:	8e e1       	ldi	r24, 0x1E	; 30
    377c:	36 d8       	rcall	.-3988   	; 0x27ea <lcd_goto>
    377e:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <menuVmodule>
    3782:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <test_PipeModule>
    3786:	60 93 fe 18 	sts	0x18FE, r22	; 0x8018fe <editLong>
    378a:	70 93 ff 18 	sts	0x18FF, r23	; 0x8018ff <editLong+0x1>
    378e:	80 93 00 19 	sts	0x1900, r24	; 0x801900 <editLong+0x2>
    3792:	90 93 01 19 	sts	0x1901, r25	; 0x801901 <editLong+0x3>
    3796:	0e 94 6c 3b 	call	0x76d8	; 0x76d8 <lcd_longout>
    379a:	80 e0       	ldi	r24, 0x00	; 0
    379c:	08 95       	ret

0000379e <menuOnEnterTune>:
    379e:	cf 93       	push	r28
    37a0:	8f 3f       	cpi	r24, 0xFF	; 255
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <menuOnEnterTune+0x8>
    37a4:	78 c0       	rjmp	.+240    	; 0x3896 <menuOnEnterTune+0xf8>
    37a6:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <minManNote.3048>
    37aa:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <maxManNote.3049>
    37ae:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    37b2:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    37b6:	3e 96       	adiw	r30, 0x0e	; 14
    37b8:	85 91       	lpm	r24, Z+
    37ba:	95 91       	lpm	r25, Z+
    37bc:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <menuVmanual>
    37c0:	84 30       	cpi	r24, 0x04	; 4
    37c2:	10 f0       	brcs	.+4      	; 0x37c8 <menuOnEnterTune+0x2a>
    37c4:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <menuVmanual>
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	39 c0       	rjmp	.+114    	; 0x383e <menuOnEnterTune+0xa0>
    37cc:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	e2 2f       	mov	r30, r18
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	df 01       	movw	r26, r30
    37d8:	aa 0f       	add	r26, r26
    37da:	bb 1f       	adc	r27, r27
    37dc:	ad 01       	movw	r20, r26
    37de:	4e 0f       	add	r20, r30
    37e0:	5f 1f       	adc	r21, r31
    37e2:	dc 01       	movw	r26, r24
    37e4:	aa 0f       	add	r26, r26
    37e6:	bb 1f       	adc	r27, r27
    37e8:	a8 0f       	add	r26, r24
    37ea:	b9 1f       	adc	r27, r25
    37ec:	aa 0f       	add	r26, r26
    37ee:	bb 1f       	adc	r27, r27
    37f0:	aa 0f       	add	r26, r26
    37f2:	bb 1f       	adc	r27, r27
    37f4:	a4 0f       	add	r26, r20
    37f6:	b5 1f       	adc	r27, r21
    37f8:	ab 5a       	subi	r26, 0xAB	; 171
    37fa:	b6 4f       	sbci	r27, 0xF6	; 246
    37fc:	3c 91       	ld	r19, X
    37fe:	40 91 2e 02 	lds	r20, 0x022E	; 0x80022e <minManNote.3048>
    3802:	34 17       	cp	r19, r20
    3804:	10 f4       	brcc	.+4      	; 0x380a <menuOnEnterTune+0x6c>
    3806:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <minManNote.3048>
    380a:	af 01       	movw	r20, r30
    380c:	44 0f       	add	r20, r20
    380e:	55 1f       	adc	r21, r21
    3810:	e4 0f       	add	r30, r20
    3812:	f5 1f       	adc	r31, r21
    3814:	ac 01       	movw	r20, r24
    3816:	44 0f       	add	r20, r20
    3818:	55 1f       	adc	r21, r21
    381a:	84 0f       	add	r24, r20
    381c:	95 1f       	adc	r25, r21
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	88 0f       	add	r24, r24
    3824:	99 1f       	adc	r25, r25
    3826:	e8 0f       	add	r30, r24
    3828:	f9 1f       	adc	r31, r25
    382a:	eb 5a       	subi	r30, 0xAB	; 171
    382c:	f6 4f       	sbci	r31, 0xF6	; 246
    382e:	81 81       	ldd	r24, Z+1	; 0x01
    3830:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <maxManNote.3049>
    3834:	98 17       	cp	r25, r24
    3836:	10 f4       	brcc	.+4      	; 0x383c <menuOnEnterTune+0x9e>
    3838:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <maxManNote.3049>
    383c:	2f 5f       	subi	r18, 0xFF	; 255
    383e:	24 30       	cpi	r18, 0x04	; 4
    3840:	28 f2       	brcs	.-118    	; 0x37cc <menuOnEnterTune+0x2e>
    3842:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <minManNote.3048>
    3846:	88 23       	and	r24, r24
    3848:	54 f4       	brge	.+20     	; 0x385e <menuOnEnterTune+0xc0>
    384a:	8e e1       	ldi	r24, 0x1E	; 30
    384c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    3850:	80 ea       	ldi	r24, 0xA0	; 160
    3852:	93 e0       	ldi	r25, 0x03	; 3
    3854:	45 d8       	rcall	.-3958   	; 0x28e0 <lcd_puts_P>
    3856:	8f ef       	ldi	r24, 0xFF	; 255
    3858:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <menuNote>
    385c:	04 c0       	rjmp	.+8      	; 0x3866 <menuOnEnterTune+0xc8>
    385e:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <menuNote>
    3862:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <notOnOff.3050>
    3866:	6a ec       	ldi	r22, 0xCA	; 202
    3868:	73 e1       	ldi	r23, 0x13	; 19
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    3870:	69 ed       	ldi	r22, 0xD9	; 217
    3872:	73 e1       	ldi	r23, 0x13	; 19
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    387a:	6e ed       	ldi	r22, 0xDE	; 222
    387c:	73 e1       	ldi	r23, 0x13	; 19
    387e:	82 e0       	ldi	r24, 0x02	; 2
    3880:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    3884:	60 ee       	ldi	r22, 0xE0	; 224
    3886:	73 e1       	ldi	r23, 0x13	; 19
    3888:	83 e0       	ldi	r24, 0x03	; 3
    388a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    388e:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
    3892:	cf ef       	ldi	r28, 0xFF	; 255
    3894:	71 c0       	rjmp	.+226    	; 0x3978 <menuOnEnterTune+0x1da>
    3896:	60 91 c0 05 	lds	r22, 0x05C0	; 0x8005c0 <menuNote>
    389a:	6f 3f       	cpi	r22, 0xFF	; 255
    389c:	09 f4       	brne	.+2      	; 0x38a0 <menuOnEnterTune+0x102>
    389e:	61 c0       	rjmp	.+194    	; 0x3962 <menuOnEnterTune+0x1c4>
    38a0:	81 30       	cpi	r24, 0x01	; 1
    38a2:	d9 f4       	brne	.+54     	; 0x38da <menuOnEnterTune+0x13c>
    38a4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <maxManNote.3049>
    38a8:	68 17       	cp	r22, r24
    38aa:	08 f0       	brcs	.+2      	; 0x38ae <menuOnEnterTune+0x110>
    38ac:	5c c0       	rjmp	.+184    	; 0x3966 <menuOnEnterTune+0x1c8>
    38ae:	40 e0       	ldi	r20, 0x00	; 0
    38b0:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    38b4:	0e 94 0c 34 	call	0x6818	; 0x6818 <manual_NoteOnOff>
    38b8:	60 91 c0 05 	lds	r22, 0x05C0	; 0x8005c0 <menuNote>
    38bc:	6f 5f       	subi	r22, 0xFF	; 255
    38be:	60 93 c0 05 	sts	0x05C0, r22	; 0x8005c0 <menuNote>
    38c2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <notOnOff.3050>
    38c6:	81 30       	cpi	r24, 0x01	; 1
    38c8:	09 f0       	breq	.+2      	; 0x38cc <menuOnEnterTune+0x12e>
    38ca:	4f c0       	rjmp	.+158    	; 0x396a <menuOnEnterTune+0x1cc>
    38cc:	41 e0       	ldi	r20, 0x01	; 1
    38ce:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    38d2:	0e 94 0c 34 	call	0x6818	; 0x6818 <manual_NoteOnOff>
    38d6:	cf ef       	ldi	r28, 0xFF	; 255
    38d8:	4f c0       	rjmp	.+158    	; 0x3978 <menuOnEnterTune+0x1da>
    38da:	84 30       	cpi	r24, 0x04	; 4
    38dc:	d1 f4       	brne	.+52     	; 0x3912 <menuOnEnterTune+0x174>
    38de:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <minManNote.3048>
    38e2:	86 17       	cp	r24, r22
    38e4:	08 f0       	brcs	.+2      	; 0x38e8 <menuOnEnterTune+0x14a>
    38e6:	43 c0       	rjmp	.+134    	; 0x396e <menuOnEnterTune+0x1d0>
    38e8:	40 e0       	ldi	r20, 0x00	; 0
    38ea:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    38ee:	0e 94 0c 34 	call	0x6818	; 0x6818 <manual_NoteOnOff>
    38f2:	60 91 c0 05 	lds	r22, 0x05C0	; 0x8005c0 <menuNote>
    38f6:	61 50       	subi	r22, 0x01	; 1
    38f8:	60 93 c0 05 	sts	0x05C0, r22	; 0x8005c0 <menuNote>
    38fc:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <notOnOff.3050>
    3900:	81 30       	cpi	r24, 0x01	; 1
    3902:	b9 f5       	brne	.+110    	; 0x3972 <menuOnEnterTune+0x1d4>
    3904:	41 e0       	ldi	r20, 0x01	; 1
    3906:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    390a:	0e 94 0c 34 	call	0x6818	; 0x6818 <manual_NoteOnOff>
    390e:	cf ef       	ldi	r28, 0xFF	; 255
    3910:	33 c0       	rjmp	.+102    	; 0x3978 <menuOnEnterTune+0x1da>
    3912:	83 30       	cpi	r24, 0x03	; 3
    3914:	91 f4       	brne	.+36     	; 0x393a <menuOnEnterTune+0x19c>
    3916:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <notOnOff.3050>
    391a:	81 11       	cpse	r24, r1
    391c:	04 c0       	rjmp	.+8      	; 0x3926 <menuOnEnterTune+0x188>
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <notOnOff.3050>
    3924:	02 c0       	rjmp	.+4      	; 0x392a <menuOnEnterTune+0x18c>
    3926:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <notOnOff.3050>
    392a:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <notOnOff.3050>
    392e:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    3932:	0e 94 0c 34 	call	0x6818	; 0x6818 <manual_NoteOnOff>
    3936:	cf ef       	ldi	r28, 0xFF	; 255
    3938:	1f c0       	rjmp	.+62     	; 0x3978 <menuOnEnterTune+0x1da>
    393a:	82 30       	cpi	r24, 0x02	; 2
    393c:	11 f0       	breq	.+4      	; 0x3942 <menuOnEnterTune+0x1a4>
    393e:	86 30       	cpi	r24, 0x06	; 6
    3940:	39 f4       	brne	.+14     	; 0x3950 <menuOnEnterTune+0x1b2>
    3942:	40 e0       	ldi	r20, 0x00	; 0
    3944:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    3948:	0e 94 0c 34 	call	0x6818	; 0x6818 <manual_NoteOnOff>
    394c:	c0 e0       	ldi	r28, 0x00	; 0
    394e:	14 c0       	rjmp	.+40     	; 0x3978 <menuOnEnterTune+0x1da>
    3950:	85 30       	cpi	r24, 0x05	; 5
    3952:	89 f4       	brne	.+34     	; 0x3976 <menuOnEnterTune+0x1d8>
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <menuVmanual>
    395a:	0e 94 0c 34 	call	0x6818	; 0x6818 <manual_NoteOnOff>
    395e:	c0 e0       	ldi	r28, 0x00	; 0
    3960:	0b c0       	rjmp	.+22     	; 0x3978 <menuOnEnterTune+0x1da>
    3962:	c0 e0       	ldi	r28, 0x00	; 0
    3964:	09 c0       	rjmp	.+18     	; 0x3978 <menuOnEnterTune+0x1da>
    3966:	cf ef       	ldi	r28, 0xFF	; 255
    3968:	07 c0       	rjmp	.+14     	; 0x3978 <menuOnEnterTune+0x1da>
    396a:	cf ef       	ldi	r28, 0xFF	; 255
    396c:	05 c0       	rjmp	.+10     	; 0x3978 <menuOnEnterTune+0x1da>
    396e:	cf ef       	ldi	r28, 0xFF	; 255
    3970:	03 c0       	rjmp	.+6      	; 0x3978 <menuOnEnterTune+0x1da>
    3972:	cf ef       	ldi	r28, 0xFF	; 255
    3974:	01 c0       	rjmp	.+2      	; 0x3978 <menuOnEnterTune+0x1da>
    3976:	cf ef       	ldi	r28, 0xFF	; 255
    3978:	cf 3f       	cpi	r28, 0xFF	; 255
    397a:	a1 f5       	brne	.+104    	; 0x39e4 <menuOnEnterTune+0x246>
    397c:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <menuNote>
    3980:	8f 3f       	cpi	r24, 0xFF	; 255
    3982:	69 f1       	breq	.+90     	; 0x39de <menuOnEnterTune+0x240>
    3984:	8e e1       	ldi	r24, 0x1E	; 30
    3986:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    398a:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <menuNote>
    398e:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <lcd_noteOut>
    3992:	80 e2       	ldi	r24, 0x20	; 32
    3994:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    3998:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <notOnOff.3050>
    399c:	81 11       	cpse	r24, r1
    399e:	0a c0       	rjmp	.+20     	; 0x39b4 <menuOnEnterTune+0x216>
    39a0:	81 e6       	ldi	r24, 0x61	; 97
    39a2:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    39a6:	85 e7       	ldi	r24, 0x75	; 117
    39a8:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    39ac:	83 e7       	ldi	r24, 0x73	; 115
    39ae:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    39b2:	09 c0       	rjmp	.+18     	; 0x39c6 <menuOnEnterTune+0x228>
    39b4:	85 e6       	ldi	r24, 0x65	; 101
    39b6:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    39ba:	89 e6       	ldi	r24, 0x69	; 105
    39bc:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    39c0:	8e e6       	ldi	r24, 0x6E	; 110
    39c2:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    39c6:	61 e0       	ldi	r22, 0x01	; 1
    39c8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <notOnOff.3050>
    39cc:	81 11       	cpse	r24, r1
    39ce:	01 c0       	rjmp	.+2      	; 0x39d2 <menuOnEnterTune+0x234>
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <keylabel_statcheck>
    39d8:	81 11       	cpse	r24, r1
    39da:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
    39de:	8e e1       	ldi	r24, 0x1E	; 30
    39e0:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    39e4:	8c 2f       	mov	r24, r28
    39e6:	cf 91       	pop	r28
    39e8:	08 95       	ret

000039ea <menuOnExitMidiActiveSense>:
    39ea:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_UpdateMidiOutMap>
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	08 95       	ret

000039f2 <menuOnExitMidiOut>:
    39f2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <eeprom_UpdateMidiOutMap>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	08 95       	ret

000039fa <menuOnExitMidiIn>:
    39fa:	0e 94 b9 0c 	call	0x1972	; 0x1972 <eeprom_UpdateMidiInMap>
    39fe:	80 e0       	ldi	r24, 0x00	; 0
    3a00:	08 95       	ret

00003a02 <menuOnExitManual>:
    3a02:	0e 94 97 0c 	call	0x192e	; 0x192e <eeprom_UpdateManualMap>
    3a06:	0e 94 20 2f 	call	0x5e40	; 0x5e40 <registers_CalcCount>
    3a0a:	0e 94 77 0d 	call	0x1aee	; 0x1aee <eeprom_UpdateReg>
    3a0e:	0e 94 11 33 	call	0x6622	; 0x6622 <Midi_updateManualRange>
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	08 95       	ret

00003a16 <menuOnExitModules>:
    3a16:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <eeprom_UpdateModules>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	08 95       	ret

00003a1e <menuOnEnterUSBprotokoll>:
    3a1e:	cf 93       	push	r28
    3a20:	83 e8       	ldi	r24, 0x83	; 131
    3a22:	93 e0       	ldi	r25, 0x03	; 3
    3a24:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a28:	3f d8       	rcall	.-3970   	; 0x2aa8 <log_count>
    3a2a:	81 11       	cpse	r24, r1
    3a2c:	17 c0       	rjmp	.+46     	; 0x3a5c <menuOnEnterUSBprotokoll+0x3e>
    3a2e:	89 e8       	ldi	r24, 0x89	; 137
    3a30:	93 e0       	ldi	r25, 0x03	; 3
    3a32:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a36:	16 c0       	rjmp	.+44     	; 0x3a64 <menuOnEnterUSBprotokoll+0x46>
    3a38:	6f ef       	ldi	r22, 0xFF	; 255
    3a3a:	8c 2f       	mov	r24, r28
    3a3c:	d6 d9       	rcall	.-3156   	; 0x2dea <log_getShortTextFromIndex>
    3a3e:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3a42:	8a e2       	ldi	r24, 0x2A	; 42
    3a44:	94 e1       	ldi	r25, 0x14	; 20
    3a46:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a4a:	8c 2f       	mov	r24, r28
    3a4c:	74 d8       	rcall	.-3864   	; 0x2b36 <log_getErrorText>
    3a4e:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a52:	8a e2       	ldi	r24, 0x2A	; 42
    3a54:	94 e1       	ldi	r25, 0x14	; 20
    3a56:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a5a:	8c 2f       	mov	r24, r28
    3a5c:	cf ef       	ldi	r28, 0xFF	; 255
    3a5e:	c8 0f       	add	r28, r24
    3a60:	81 11       	cpse	r24, r1
    3a62:	ea cf       	rjmp	.-44     	; 0x3a38 <menuOnEnterUSBprotokoll+0x1a>
    3a64:	80 e0       	ldi	r24, 0x00	; 0
    3a66:	cf 91       	pop	r28
    3a68:	08 95       	ret

00003a6a <menuOnExitUSBactive>:
    3a6a:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <eeprom_UpdateUSB>
    3a6e:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <serUSB_Active>
    3a72:	8f 3f       	cpi	r24, 0xFF	; 255
    3a74:	61 f4       	brne	.+24     	; 0x3a8e <menuOnExitUSBactive+0x24>
    3a76:	8a e6       	ldi	r24, 0x6A	; 106
    3a78:	93 e0       	ldi	r25, 0x03	; 3
    3a7a:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a7e:	82 ea       	ldi	r24, 0xA2	; 162
    3a80:	93 e1       	ldi	r25, 0x13	; 19
    3a82:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a86:	8a e2       	ldi	r24, 0x2A	; 42
    3a88:	94 e1       	ldi	r25, 0x14	; 20
    3a8a:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	08 95       	ret

00003a92 <menuOnEnterUSBsendHW>:
    3a92:	9f 92       	push	r9
    3a94:	af 92       	push	r10
    3a96:	bf 92       	push	r11
    3a98:	cf 92       	push	r12
    3a9a:	df 92       	push	r13
    3a9c:	ef 92       	push	r14
    3a9e:	ff 92       	push	r15
    3aa0:	0f 93       	push	r16
    3aa2:	1f 93       	push	r17
    3aa4:	cf 93       	push	r28
    3aa6:	df 93       	push	r29
    3aa8:	81 e5       	ldi	r24, 0x51	; 81
    3aaa:	93 e0       	ldi	r25, 0x03	; 3
    3aac:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3ab0:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3ab4:	8e e3       	ldi	r24, 0x3E	; 62
    3ab6:	93 e0       	ldi	r25, 0x03	; 3
    3ab8:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3abc:	c5 e7       	ldi	r28, 0x75	; 117
    3abe:	d3 e0       	ldi	r29, 0x03	; 3
    3ac0:	62 e0       	ldi	r22, 0x02	; 2
    3ac2:	79 e1       	ldi	r23, 0x19	; 25
    3ac4:	88 81       	ld	r24, Y
    3ac6:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3aca:	22 e7       	ldi	r18, 0x72	; 114
    3acc:	fc 01       	movw	r30, r24
    3ace:	20 83       	st	Z, r18
    3ad0:	bc 01       	movw	r22, r24
    3ad2:	6e 5f       	subi	r22, 0xFE	; 254
    3ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ad6:	20 e2       	ldi	r18, 0x20	; 32
    3ad8:	21 83       	std	Z+1, r18	; 0x01
    3ada:	89 81       	ldd	r24, Y+1	; 0x01
    3adc:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3ae0:	27 e7       	ldi	r18, 0x77	; 119
    3ae2:	fc 01       	movw	r30, r24
    3ae4:	20 83       	st	Z, r18
    3ae6:	82 e0       	ldi	r24, 0x02	; 2
    3ae8:	99 e1       	ldi	r25, 0x19	; 25
    3aea:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3aee:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3af2:	8c e2       	ldi	r24, 0x2C	; 44
    3af4:	93 e0       	ldi	r25, 0x03	; 3
    3af6:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3afa:	62 e0       	ldi	r22, 0x02	; 2
    3afc:	79 e1       	ldi	r23, 0x19	; 25
    3afe:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_ModuleTested>
    3b02:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	99 e1       	ldi	r25, 0x19	; 25
    3b0a:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3b0e:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3b12:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3b16:	e1 2c       	mov	r14, r1
    3b18:	d1 c0       	rjmp	.+418    	; 0x3cbc <menuOnEnterUSBsendHW+0x22a>
    3b1a:	83 e2       	ldi	r24, 0x23	; 35
    3b1c:	93 e0       	ldi	r25, 0x03	; 3
    3b1e:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3b22:	62 e0       	ldi	r22, 0x02	; 2
    3b24:	79 e1       	ldi	r23, 0x19	; 25
    3b26:	8e 2d       	mov	r24, r14
    3b28:	0e 94 c6 3c 	call	0x798c	; 0x798c <putChar_Manual>
    3b2c:	82 e0       	ldi	r24, 0x02	; 2
    3b2e:	99 e1       	ldi	r25, 0x19	; 25
    3b30:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3b34:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3b38:	f1 2c       	mov	r15, r1
    3b3a:	a4 c0       	rjmp	.+328    	; 0x3c84 <menuOnEnterUSBsendHW+0x1f2>
    3b3c:	8c e1       	ldi	r24, 0x1C	; 28
    3b3e:	93 e0       	ldi	r25, 0x03	; 3
    3b40:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3b44:	80 e3       	ldi	r24, 0x30	; 48
    3b46:	8f 0d       	add	r24, r15
    3b48:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3b4c:	8a e3       	ldi	r24, 0x3A	; 58
    3b4e:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3b52:	80 e2       	ldi	r24, 0x20	; 32
    3b54:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3b58:	0e 2d       	mov	r16, r14
    3b5a:	10 e0       	ldi	r17, 0x00	; 0
    3b5c:	cf 2c       	mov	r12, r15
    3b5e:	d1 2c       	mov	r13, r1
    3b60:	e6 01       	movw	r28, r12
    3b62:	cc 0f       	add	r28, r28
    3b64:	dd 1f       	adc	r29, r29
    3b66:	ce 01       	movw	r24, r28
    3b68:	8c 0d       	add	r24, r12
    3b6a:	9d 1d       	adc	r25, r13
    3b6c:	e8 01       	movw	r28, r16
    3b6e:	cc 0f       	add	r28, r28
    3b70:	dd 1f       	adc	r29, r29
    3b72:	c0 0f       	add	r28, r16
    3b74:	d1 1f       	adc	r29, r17
    3b76:	cc 0f       	add	r28, r28
    3b78:	dd 1f       	adc	r29, r29
    3b7a:	cc 0f       	add	r28, r28
    3b7c:	dd 1f       	adc	r29, r29
    3b7e:	c8 0f       	add	r28, r24
    3b80:	d9 1f       	adc	r29, r25
    3b82:	cb 5a       	subi	r28, 0xAB	; 171
    3b84:	d6 4f       	sbci	r29, 0xF6	; 246
    3b86:	62 e0       	ldi	r22, 0x02	; 2
    3b88:	79 e1       	ldi	r23, 0x19	; 25
    3b8a:	88 81       	ld	r24, Y
    3b8c:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3b90:	bc 01       	movw	r22, r24
    3b92:	6f 5f       	subi	r22, 0xFF	; 255
    3b94:	7f 4f       	sbci	r23, 0xFF	; 255
    3b96:	0f 2e       	mov	r0, r31
    3b98:	fe e2       	ldi	r31, 0x2E	; 46
    3b9a:	bf 2e       	mov	r11, r31
    3b9c:	f0 2d       	mov	r31, r0
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	b0 82       	st	Z, r11
    3ba2:	89 81       	ldd	r24, Y+1	; 0x01
    3ba4:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3ba8:	bc 01       	movw	r22, r24
    3baa:	6f 5f       	subi	r22, 0xFF	; 255
    3bac:	7f 4f       	sbci	r23, 0xFF	; 255
    3bae:	fc 01       	movw	r30, r24
    3bb0:	b0 82       	st	Z, r11
    3bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb4:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3bb8:	fc 01       	movw	r30, r24
    3bba:	80 e2       	ldi	r24, 0x20	; 32
    3bbc:	80 83       	st	Z, r24
    3bbe:	9d e3       	ldi	r25, 0x3D	; 61
    3bc0:	91 83       	std	Z+1, r25	; 0x01
    3bc2:	82 83       	std	Z+2, r24	; 0x02
    3bc4:	82 e0       	ldi	r24, 0x02	; 2
    3bc6:	99 e1       	ldi	r25, 0x19	; 25
    3bc8:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3bcc:	88 81       	ld	r24, Y
    3bce:	88 23       	and	r24, r24
    3bd0:	2c f4       	brge	.+10     	; 0x3bdc <menuOnEnterUSBsendHW+0x14a>
    3bd2:	8a e0       	ldi	r24, 0x0A	; 10
    3bd4:	93 e0       	ldi	r25, 0x03	; 3
    3bd6:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3bda:	51 c0       	rjmp	.+162    	; 0x3c7e <menuOnEnterUSBsendHW+0x1ec>
    3bdc:	62 e0       	ldi	r22, 0x02	; 2
    3bde:	79 e1       	ldi	r23, 0x19	; 25
    3be0:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <putChar_Note>
    3be4:	bc 01       	movw	r22, r24
    3be6:	6f 5f       	subi	r22, 0xFF	; 255
    3be8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bea:	0f 2e       	mov	r0, r31
    3bec:	fd e2       	ldi	r31, 0x2D	; 45
    3bee:	9f 2e       	mov	r9, r31
    3bf0:	f0 2d       	mov	r31, r0
    3bf2:	fc 01       	movw	r30, r24
    3bf4:	90 82       	st	Z, r9
    3bf6:	f6 01       	movw	r30, r12
    3bf8:	ee 0f       	add	r30, r30
    3bfa:	ff 1f       	adc	r31, r31
    3bfc:	ce 0e       	add	r12, r30
    3bfe:	df 1e       	adc	r13, r31
    3c00:	58 01       	movw	r10, r16
    3c02:	aa 0c       	add	r10, r10
    3c04:	bb 1c       	adc	r11, r11
    3c06:	e5 01       	movw	r28, r10
    3c08:	c0 0f       	add	r28, r16
    3c0a:	d1 1f       	adc	r29, r17
    3c0c:	cc 0f       	add	r28, r28
    3c0e:	dd 1f       	adc	r29, r29
    3c10:	cc 0f       	add	r28, r28
    3c12:	dd 1f       	adc	r29, r29
    3c14:	cc 0d       	add	r28, r12
    3c16:	dd 1d       	adc	r29, r13
    3c18:	cb 5a       	subi	r28, 0xAB	; 171
    3c1a:	d6 4f       	sbci	r29, 0xF6	; 246
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <putChar_Note>
    3c22:	20 e2       	ldi	r18, 0x20	; 32
    3c24:	fc 01       	movw	r30, r24
    3c26:	20 83       	st	Z, r18
    3c28:	11 82       	std	Z+1, r1	; 0x01
    3c2a:	82 e0       	ldi	r24, 0x02	; 2
    3c2c:	99 e1       	ldi	r25, 0x19	; 25
    3c2e:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3c32:	82 e0       	ldi	r24, 0x02	; 2
    3c34:	93 e0       	ldi	r25, 0x03	; 3
    3c36:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3c:	82 95       	swap	r24
    3c3e:	86 95       	lsr	r24
    3c40:	87 70       	andi	r24, 0x07	; 7
    3c42:	80 5d       	subi	r24, 0xD0	; 208
    3c44:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3c48:	8a ef       	ldi	r24, 0xFA	; 250
    3c4a:	92 e0       	ldi	r25, 0x02	; 2
    3c4c:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3c50:	8a 81       	ldd	r24, Y+2	; 0x02
    3c52:	62 e0       	ldi	r22, 0x02	; 2
    3c54:	79 e1       	ldi	r23, 0x19	; 25
    3c56:	8f 71       	andi	r24, 0x1F	; 31
    3c58:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    3c5c:	bc 01       	movw	r22, r24
    3c5e:	6f 5f       	subi	r22, 0xFF	; 255
    3c60:	7f 4f       	sbci	r23, 0xFF	; 255
    3c62:	fc 01       	movw	r30, r24
    3c64:	90 82       	st	Z, r9
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	99 81       	ldd	r25, Y+1	; 0x01
    3c6a:	28 81       	ld	r18, Y
    3c6c:	8f 71       	andi	r24, 0x1F	; 31
    3c6e:	89 0f       	add	r24, r25
    3c70:	82 1b       	sub	r24, r18
    3c72:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    3c76:	82 e0       	ldi	r24, 0x02	; 2
    3c78:	99 e1       	ldi	r25, 0x19	; 25
    3c7a:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3c7e:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3c82:	f3 94       	inc	r15
    3c84:	f3 e0       	ldi	r31, 0x03	; 3
    3c86:	ff 15       	cp	r31, r15
    3c88:	08 f0       	brcs	.+2      	; 0x3c8c <menuOnEnterUSBsendHW+0x1fa>
    3c8a:	58 cf       	rjmp	.-336    	; 0x3b3c <menuOnEnterUSBsendHW+0xaa>
    3c8c:	88 ed       	ldi	r24, 0xD8	; 216
    3c8e:	92 e0       	ldi	r25, 0x02	; 2
    3c90:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3c94:	ee 2d       	mov	r30, r14
    3c96:	f0 e0       	ldi	r31, 0x00	; 0
    3c98:	ee 0f       	add	r30, r30
    3c9a:	ff 1f       	adc	r31, r31
    3c9c:	e7 5b       	subi	r30, 0xB7	; 183
    3c9e:	f6 4f       	sbci	r31, 0xF6	; 246
    3ca0:	62 e0       	ldi	r22, 0x02	; 2
    3ca2:	79 e1       	ldi	r23, 0x19	; 25
    3ca4:	81 81       	ldd	r24, Z+1	; 0x01
    3ca6:	0e 94 06 3c 	call	0x780c	; 0x780c <putChar_MidiChan>
    3caa:	82 e0       	ldi	r24, 0x02	; 2
    3cac:	99 e1       	ldi	r25, 0x19	; 25
    3cae:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3cb2:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3cb6:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3cba:	e3 94       	inc	r14
    3cbc:	83 e0       	ldi	r24, 0x03	; 3
    3cbe:	8e 15       	cp	r24, r14
    3cc0:	08 f0       	brcs	.+2      	; 0x3cc4 <menuOnEnterUSBsendHW+0x232>
    3cc2:	2b cf       	rjmp	.-426    	; 0x3b1a <menuOnEnterUSBsendHW+0x88>
    3cc4:	80 e1       	ldi	r24, 0x10	; 16
    3cc6:	93 e0       	ldi	r25, 0x03	; 3
    3cc8:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3ccc:	f1 2c       	mov	r15, r1
    3cce:	94 c0       	rjmp	.+296    	; 0x3df8 <menuOnEnterUSBsendHW+0x366>
    3cd0:	8c e1       	ldi	r24, 0x1C	; 28
    3cd2:	93 e0       	ldi	r25, 0x03	; 3
    3cd4:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3cd8:	80 e3       	ldi	r24, 0x30	; 48
    3cda:	8f 0d       	add	r24, r15
    3cdc:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3ce0:	8a e3       	ldi	r24, 0x3A	; 58
    3ce2:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3ce6:	80 e2       	ldi	r24, 0x20	; 32
    3ce8:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3cec:	cf 2d       	mov	r28, r15
    3cee:	d0 e0       	ldi	r29, 0x00	; 0
    3cf0:	8e 01       	movw	r16, r28
    3cf2:	00 0f       	add	r16, r16
    3cf4:	11 1f       	adc	r17, r17
    3cf6:	0c 0f       	add	r16, r28
    3cf8:	1d 1f       	adc	r17, r29
    3cfa:	08 5e       	subi	r16, 0xE8	; 232
    3cfc:	17 4f       	sbci	r17, 0xF7	; 247
    3cfe:	62 e0       	ldi	r22, 0x02	; 2
    3d00:	79 e1       	ldi	r23, 0x19	; 25
    3d02:	f8 01       	movw	r30, r16
    3d04:	80 81       	ld	r24, Z
    3d06:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3d0a:	bc 01       	movw	r22, r24
    3d0c:	6f 5f       	subi	r22, 0xFF	; 255
    3d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d10:	0f 2e       	mov	r0, r31
    3d12:	fe e2       	ldi	r31, 0x2E	; 46
    3d14:	ef 2e       	mov	r14, r31
    3d16:	f0 2d       	mov	r31, r0
    3d18:	fc 01       	movw	r30, r24
    3d1a:	e0 82       	st	Z, r14
    3d1c:	f8 01       	movw	r30, r16
    3d1e:	81 81       	ldd	r24, Z+1	; 0x01
    3d20:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3d24:	bc 01       	movw	r22, r24
    3d26:	6f 5f       	subi	r22, 0xFF	; 255
    3d28:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	e0 82       	st	Z, r14
    3d2e:	f8 01       	movw	r30, r16
    3d30:	82 81       	ldd	r24, Z+2	; 0x02
    3d32:	0e 94 ee 3b 	call	0x77dc	; 0x77dc <putChar_hex>
    3d36:	fc 01       	movw	r30, r24
    3d38:	80 e2       	ldi	r24, 0x20	; 32
    3d3a:	80 83       	st	Z, r24
    3d3c:	9d e3       	ldi	r25, 0x3D	; 61
    3d3e:	91 83       	std	Z+1, r25	; 0x01
    3d40:	82 83       	std	Z+2, r24	; 0x02
    3d42:	13 82       	std	Z+3, r1	; 0x03
    3d44:	82 e0       	ldi	r24, 0x02	; 2
    3d46:	99 e1       	ldi	r25, 0x19	; 25
    3d48:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3d4c:	f8 01       	movw	r30, r16
    3d4e:	80 81       	ld	r24, Z
    3d50:	8f 3f       	cpi	r24, 0xFF	; 255
    3d52:	29 f4       	brne	.+10     	; 0x3d5e <menuOnEnterUSBsendHW+0x2cc>
    3d54:	8a e0       	ldi	r24, 0x0A	; 10
    3d56:	93 e0       	ldi	r25, 0x03	; 3
    3d58:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3d5c:	4a c0       	rjmp	.+148    	; 0x3df2 <menuOnEnterUSBsendHW+0x360>
    3d5e:	e2 e0       	ldi	r30, 0x02	; 2
    3d60:	f9 e1       	ldi	r31, 0x19	; 25
    3d62:	92 e5       	ldi	r25, 0x52	; 82
    3d64:	90 83       	st	Z, r25
    3d66:	9e e2       	ldi	r25, 0x2E	; 46
    3d68:	91 83       	std	Z+1, r25	; 0x01
    3d6a:	64 e0       	ldi	r22, 0x04	; 4
    3d6c:	79 e1       	ldi	r23, 0x19	; 25
    3d6e:	8f 5f       	subi	r24, 0xFF	; 255
    3d70:	0e 94 c7 3b 	call	0x778e	; 0x778e <putChar_Dec>
    3d74:	bc 01       	movw	r22, r24
    3d76:	6f 5f       	subi	r22, 0xFF	; 255
    3d78:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7a:	1d e2       	ldi	r17, 0x2D	; 45
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	10 83       	st	Z, r17
    3d80:	ce 01       	movw	r24, r28
    3d82:	88 0f       	add	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	c8 0f       	add	r28, r24
    3d88:	d9 1f       	adc	r29, r25
    3d8a:	c8 5e       	subi	r28, 0xE8	; 232
    3d8c:	d7 4f       	sbci	r29, 0xF7	; 247
    3d8e:	89 81       	ldd	r24, Y+1	; 0x01
    3d90:	8f 5f       	subi	r24, 0xFF	; 255
    3d92:	0e 94 c7 3b 	call	0x778e	; 0x778e <putChar_Dec>
    3d96:	20 e2       	ldi	r18, 0x20	; 32
    3d98:	fc 01       	movw	r30, r24
    3d9a:	20 83       	st	Z, r18
    3d9c:	11 82       	std	Z+1, r1	; 0x01
    3d9e:	82 e0       	ldi	r24, 0x02	; 2
    3da0:	99 e1       	ldi	r25, 0x19	; 25
    3da2:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3da6:	82 e0       	ldi	r24, 0x02	; 2
    3da8:	93 e0       	ldi	r25, 0x03	; 3
    3daa:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3dae:	8a 81       	ldd	r24, Y+2	; 0x02
    3db0:	82 95       	swap	r24
    3db2:	86 95       	lsr	r24
    3db4:	87 70       	andi	r24, 0x07	; 7
    3db6:	80 5d       	subi	r24, 0xD0	; 208
    3db8:	0e 94 13 38 	call	0x7026	; 0x7026 <serial0SER_USBSend>
    3dbc:	8a ef       	ldi	r24, 0xFA	; 250
    3dbe:	92 e0       	ldi	r25, 0x02	; 2
    3dc0:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc6:	62 e0       	ldi	r22, 0x02	; 2
    3dc8:	79 e1       	ldi	r23, 0x19	; 25
    3dca:	8f 71       	andi	r24, 0x1F	; 31
    3dcc:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    3dd0:	bc 01       	movw	r22, r24
    3dd2:	6f 5f       	subi	r22, 0xFF	; 255
    3dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd6:	fc 01       	movw	r30, r24
    3dd8:	10 83       	st	Z, r17
    3dda:	8a 81       	ldd	r24, Y+2	; 0x02
    3ddc:	99 81       	ldd	r25, Y+1	; 0x01
    3dde:	28 81       	ld	r18, Y
    3de0:	8f 71       	andi	r24, 0x1F	; 31
    3de2:	89 0f       	add	r24, r25
    3de4:	82 1b       	sub	r24, r18
    3de6:	0e 94 ab 3b 	call	0x7756	; 0x7756 <putChar_Dec2>
    3dea:	82 e0       	ldi	r24, 0x02	; 2
    3dec:	99 e1       	ldi	r25, 0x19	; 25
    3dee:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3df2:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3df6:	f3 94       	inc	r15
    3df8:	f7 e0       	ldi	r31, 0x07	; 7
    3dfa:	ff 15       	cp	r31, r15
    3dfc:	08 f0       	brcs	.+2      	; 0x3e00 <menuOnEnterUSBsendHW+0x36e>
    3dfe:	68 cf       	rjmp	.-304    	; 0x3cd0 <menuOnEnterUSBsendHW+0x23e>
    3e00:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3e04:	8f ec       	ldi	r24, 0xCF	; 207
    3e06:	92 e0       	ldi	r25, 0x02	; 2
    3e08:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3e0c:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3e10:	e1 2c       	mov	r14, r1
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	64 c0       	rjmp	.+200    	; 0x3ede <menuOnEnterUSBsendHW+0x44c>
    3e16:	ce 2d       	mov	r28, r14
    3e18:	d0 e0       	ldi	r29, 0x00	; 0
    3e1a:	0f 2d       	mov	r16, r15
    3e1c:	10 e0       	ldi	r17, 0x00	; 0
    3e1e:	fe 01       	movw	r30, r28
    3e20:	ee 0f       	add	r30, r30
    3e22:	ff 1f       	adc	r31, r31
    3e24:	ee 0f       	add	r30, r30
    3e26:	ff 1f       	adc	r31, r31
    3e28:	e0 0f       	add	r30, r16
    3e2a:	f1 1f       	adc	r31, r17
    3e2c:	ee 0f       	add	r30, r30
    3e2e:	ff 1f       	adc	r31, r31
    3e30:	ee 0f       	add	r30, r30
    3e32:	ff 1f       	adc	r31, r31
    3e34:	e7 5b       	subi	r30, 0xB7	; 183
    3e36:	f7 4f       	sbci	r31, 0xF7	; 247
    3e38:	80 81       	ld	r24, Z
    3e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e3c:	09 f4       	brne	.+2      	; 0x3e40 <menuOnEnterUSBsendHW+0x3ae>
    3e3e:	47 c0       	rjmp	.+142    	; 0x3ece <menuOnEnterUSBsendHW+0x43c>
    3e40:	62 e0       	ldi	r22, 0x02	; 2
    3e42:	79 e1       	ldi	r23, 0x19	; 25
    3e44:	8e 2d       	mov	r24, r14
    3e46:	0e 94 06 3c 	call	0x780c	; 0x780c <putChar_MidiChan>
    3e4a:	bc 01       	movw	r22, r24
    3e4c:	6f 5f       	subi	r22, 0xFF	; 255
    3e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e50:	0f 2e       	mov	r0, r31
    3e52:	f8 e2       	ldi	r31, 0x28	; 40
    3e54:	df 2e       	mov	r13, r31
    3e56:	f0 2d       	mov	r31, r0
    3e58:	fc 01       	movw	r30, r24
    3e5a:	d0 82       	st	Z, r13
    3e5c:	cc 0f       	add	r28, r28
    3e5e:	dd 1f       	adc	r29, r29
    3e60:	cc 0f       	add	r28, r28
    3e62:	dd 1f       	adc	r29, r29
    3e64:	c0 0f       	add	r28, r16
    3e66:	d1 1f       	adc	r29, r17
    3e68:	cc 0f       	add	r28, r28
    3e6a:	dd 1f       	adc	r29, r29
    3e6c:	cc 0f       	add	r28, r28
    3e6e:	dd 1f       	adc	r29, r29
    3e70:	c7 5b       	subi	r28, 0xB7	; 183
    3e72:	d7 4f       	sbci	r29, 0xF7	; 247
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <putChar_Note>
    3e7a:	bc 01       	movw	r22, r24
    3e7c:	6f 5f       	subi	r22, 0xFF	; 255
    3e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e80:	2d e2       	ldi	r18, 0x2D	; 45
    3e82:	fc 01       	movw	r30, r24
    3e84:	20 83       	st	Z, r18
    3e86:	99 81       	ldd	r25, Y+1	; 0x01
    3e88:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8a:	89 0f       	add	r24, r25
    3e8c:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <putChar_Note>
    3e90:	fc 01       	movw	r30, r24
    3e92:	19 e2       	ldi	r17, 0x29	; 41
    3e94:	10 83       	st	Z, r17
    3e96:	80 e2       	ldi	r24, 0x20	; 32
    3e98:	81 83       	std	Z+1, r24	; 0x01
    3e9a:	bf 01       	movw	r22, r30
    3e9c:	6d 5f       	subi	r22, 0xFD	; 253
    3e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ea0:	8e e3       	ldi	r24, 0x3E	; 62
    3ea2:	82 83       	std	Z+2, r24	; 0x02
    3ea4:	88 81       	ld	r24, Y
    3ea6:	0e 94 c6 3c 	call	0x798c	; 0x798c <putChar_Manual>
    3eaa:	bc 01       	movw	r22, r24
    3eac:	6f 5f       	subi	r22, 0xFF	; 255
    3eae:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	d0 82       	st	Z, r13
    3eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb6:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <putChar_Note>
    3eba:	fc 01       	movw	r30, r24
    3ebc:	10 83       	st	Z, r17
    3ebe:	11 82       	std	Z+1, r1	; 0x01
    3ec0:	82 e0       	ldi	r24, 0x02	; 2
    3ec2:	99 e1       	ldi	r25, 0x19	; 25
    3ec4:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3ec8:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3ecc:	9f ef       	ldi	r25, 0xFF	; 255
    3ece:	f3 94       	inc	r15
    3ed0:	01 c0       	rjmp	.+2      	; 0x3ed4 <menuOnEnterUSBsendHW+0x442>
    3ed2:	f1 2c       	mov	r15, r1
    3ed4:	f3 e0       	ldi	r31, 0x03	; 3
    3ed6:	ff 15       	cp	r31, r15
    3ed8:	08 f0       	brcs	.+2      	; 0x3edc <menuOnEnterUSBsendHW+0x44a>
    3eda:	9d cf       	rjmp	.-198    	; 0x3e16 <menuOnEnterUSBsendHW+0x384>
    3edc:	e3 94       	inc	r14
    3ede:	8f e0       	ldi	r24, 0x0F	; 15
    3ee0:	8e 15       	cp	r24, r14
    3ee2:	b8 f7       	brcc	.-18     	; 0x3ed2 <menuOnEnterUSBsendHW+0x440>
    3ee4:	91 11       	cpse	r25, r1
    3ee6:	06 c0       	rjmp	.+12     	; 0x3ef4 <menuOnEnterUSBsendHW+0x462>
    3ee8:	84 eb       	ldi	r24, 0xB4	; 180
    3eea:	92 e0       	ldi	r25, 0x02	; 2
    3eec:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3ef0:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3ef4:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3ef8:	85 ec       	ldi	r24, 0xC5	; 197
    3efa:	92 e0       	ldi	r25, 0x02	; 2
    3efc:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3f00:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3f04:	c0 e0       	ldi	r28, 0x00	; 0
    3f06:	25 c0       	rjmp	.+74     	; 0x3f52 <menuOnEnterUSBsendHW+0x4c0>
    3f08:	62 e0       	ldi	r22, 0x02	; 2
    3f0a:	79 e1       	ldi	r23, 0x19	; 25
    3f0c:	8c 2f       	mov	r24, r28
    3f0e:	0e 94 c6 3c 	call	0x798c	; 0x798c <putChar_Manual>
    3f12:	dc 01       	movw	r26, r24
    3f14:	bc 01       	movw	r22, r24
    3f16:	6f 5f       	subi	r22, 0xFF	; 255
    3f18:	7f 4f       	sbci	r23, 0xFF	; 255
    3f1a:	8a e3       	ldi	r24, 0x3A	; 58
    3f1c:	8c 93       	st	X, r24
    3f1e:	ec 2f       	mov	r30, r28
    3f20:	f0 e0       	ldi	r31, 0x00	; 0
    3f22:	ee 0f       	add	r30, r30
    3f24:	ff 1f       	adc	r31, r31
    3f26:	e7 5b       	subi	r30, 0xB7	; 183
    3f28:	f6 4f       	sbci	r31, 0xF6	; 246
    3f2a:	80 81       	ld	r24, Z
    3f2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f2e:	19 f0       	breq	.+6      	; 0x3f36 <menuOnEnterUSBsendHW+0x4a4>
    3f30:	0e 94 06 3c 	call	0x780c	; 0x780c <putChar_MidiChan>
    3f34:	05 c0       	rjmp	.+10     	; 0x3f40 <menuOnEnterUSBsendHW+0x4ae>
    3f36:	cd 01       	movw	r24, r26
    3f38:	02 96       	adiw	r24, 0x02	; 2
    3f3a:	2d e2       	ldi	r18, 0x2D	; 45
    3f3c:	11 96       	adiw	r26, 0x01	; 1
    3f3e:	2c 93       	st	X, r18
    3f40:	fc 01       	movw	r30, r24
    3f42:	10 82       	st	Z, r1
    3f44:	82 e0       	ldi	r24, 0x02	; 2
    3f46:	99 e1       	ldi	r25, 0x19	; 25
    3f48:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3f4c:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3f50:	cf 5f       	subi	r28, 0xFF	; 255
    3f52:	c4 30       	cpi	r28, 0x04	; 4
    3f54:	c8 f2       	brcs	.-78     	; 0x3f08 <menuOnEnterUSBsendHW+0x476>
    3f56:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3f5a:	89 eb       	ldi	r24, 0xB9	; 185
    3f5c:	92 e0       	ldi	r25, 0x02	; 2
    3f5e:	0e 94 09 39 	call	0x7212	; 0x7212 <serial0SER_USB_sendStringP>
    3f62:	c7 e4       	ldi	r28, 0x47	; 71
    3f64:	d8 e0       	ldi	r29, 0x08	; 8
    3f66:	62 e0       	ldi	r22, 0x02	; 2
    3f68:	79 e1       	ldi	r23, 0x19	; 25
    3f6a:	88 81       	ld	r24, Y
    3f6c:	0e 94 06 3c 	call	0x780c	; 0x780c <putChar_MidiChan>
    3f70:	bc 01       	movw	r22, r24
    3f72:	6f 5f       	subi	r22, 0xFF	; 255
    3f74:	7f 4f       	sbci	r23, 0xFF	; 255
    3f76:	2e e3       	ldi	r18, 0x3E	; 62
    3f78:	fc 01       	movw	r30, r24
    3f7a:	20 83       	st	Z, r18
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	0e 94 06 3c 	call	0x780c	; 0x780c <putChar_MidiChan>
    3f82:	fc 01       	movw	r30, r24
    3f84:	10 82       	st	Z, r1
    3f86:	82 e0       	ldi	r24, 0x02	; 2
    3f88:	99 e1       	ldi	r25, 0x19	; 25
    3f8a:	0e 94 5d 39 	call	0x72ba	; 0x72ba <serial0SER_USB_sendString>
    3f8e:	0e 94 1b 39 	call	0x7236	; 0x7236 <serial0SER_USB_sendCRLF>
    3f92:	80 e0       	ldi	r24, 0x00	; 0
    3f94:	df 91       	pop	r29
    3f96:	cf 91       	pop	r28
    3f98:	1f 91       	pop	r17
    3f9a:	0f 91       	pop	r16
    3f9c:	ff 90       	pop	r15
    3f9e:	ef 90       	pop	r14
    3fa0:	df 90       	pop	r13
    3fa2:	cf 90       	pop	r12
    3fa4:	bf 90       	pop	r11
    3fa6:	af 90       	pop	r10
    3fa8:	9f 90       	pop	r9
    3faa:	08 95       	ret

00003fac <reverseRegisterBits>:
    3fac:	1f 93       	push	r17
    3fae:	cf 93       	push	r28
    3fb0:	df 93       	push	r29
    3fb2:	10 e0       	ldi	r17, 0x00	; 0
    3fb4:	09 c0       	rjmp	.+18     	; 0x3fc8 <reverseRegisterBits+0x1c>
    3fb6:	c1 2f       	mov	r28, r17
    3fb8:	d0 e0       	ldi	r29, 0x00	; 0
    3fba:	c2 57       	subi	r28, 0x72	; 114
    3fbc:	da 4f       	sbci	r29, 0xFA	; 250
    3fbe:	88 81       	ld	r24, Y
    3fc0:	0e 94 72 3e 	call	0x7ce4	; 0x7ce4 <reverse_Bits>
    3fc4:	88 83       	st	Y, r24
    3fc6:	1f 5f       	subi	r17, 0xFF	; 255
    3fc8:	18 30       	cpi	r17, 0x08	; 8
    3fca:	a8 f3       	brcs	.-22     	; 0x3fb6 <reverseRegisterBits+0xa>
    3fcc:	df 91       	pop	r29
    3fce:	cf 91       	pop	r28
    3fd0:	1f 91       	pop	r17
    3fd2:	08 95       	ret

00003fd4 <menuOnUpdateRegister>:
    3fd4:	8e e8       	ldi	r24, 0x8E	; 142
    3fd6:	95 e0       	ldi	r25, 0x05	; 5
    3fd8:	0e 94 62 30 	call	0x60c4	; 0x60c4 <read_allRegister>
    3fdc:	e7 df       	rcall	.-50     	; 0x3fac <reverseRegisterBits>
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	08 95       	ret

00003fe2 <menuOnEnterResetReg>:
    3fe2:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <midi_resetRegisters>
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	f5 df       	rcall	.-22     	; 0x3fd4 <menuOnUpdateRegister>
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	08 95       	ret

00003fee <menuOnExitLoadProgran>:
    3fee:	86 30       	cpi	r24, 0x06	; 6
    3ff0:	31 f0       	breq	.+12     	; 0x3ffe <menuOnExitLoadProgran+0x10>
    3ff2:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <menuVKombination>
    3ff6:	80 34       	cpi	r24, 0x40	; 64
    3ff8:	10 f4       	brcc	.+4      	; 0x3ffe <menuOnExitLoadProgran+0x10>
    3ffa:	0e 94 4d 31 	call	0x629a	; 0x629a <program_toRegister>
    3ffe:	80 e0       	ldi	r24, 0x00	; 0
    4000:	e9 df       	rcall	.-46     	; 0x3fd4 <menuOnUpdateRegister>
    4002:	80 e0       	ldi	r24, 0x00	; 0
    4004:	08 95       	ret

00004006 <softkeyCoupler>:
    4006:	cf 93       	push	r28
    4008:	c6 2f       	mov	r28, r22
    400a:	88 23       	and	r24, r24
    400c:	d9 f0       	breq	.+54     	; 0x4044 <softkeyCoupler+0x3e>
    400e:	e6 2f       	mov	r30, r22
    4010:	f0 e0       	ldi	r31, 0x00	; 0
    4012:	df 01       	movw	r26, r30
    4014:	ae 5c       	subi	r26, 0xCE	; 206
    4016:	b7 4f       	sbci	r27, 0xF7	; 247
    4018:	8c 91       	ld	r24, X
    401a:	81 11       	cpse	r24, r1
    401c:	08 c0       	rjmp	.+16     	; 0x402e <softkeyCoupler+0x28>
    401e:	86 2f       	mov	r24, r22
    4020:	0e 94 c8 2e 	call	0x5d90	; 0x5d90 <set_Coupler>
    4024:	88 23       	and	r24, r24
    4026:	71 f0       	breq	.+28     	; 0x4044 <softkeyCoupler+0x3e>
    4028:	0e 94 cb 34 	call	0x6996	; 0x6996 <midi_ManualOff>
    402c:	0b c0       	rjmp	.+22     	; 0x4044 <softkeyCoupler+0x3e>
    402e:	df 01       	movw	r26, r30
    4030:	ae 5c       	subi	r26, 0xCE	; 206
    4032:	b7 4f       	sbci	r27, 0xF7	; 247
    4034:	1c 92       	st	X, r1
    4036:	ee 0f       	add	r30, r30
    4038:	ff 1f       	adc	r31, r31
    403a:	e8 55       	subi	r30, 0x58	; 88
    403c:	fc 4e       	sbci	r31, 0xEC	; 236
    403e:	84 91       	lpm	r24, Z
    4040:	0e 94 cb 34 	call	0x6996	; 0x6996 <midi_ManualOff>
    4044:	ec 2f       	mov	r30, r28
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	ee 5c       	subi	r30, 0xCE	; 206
    404a:	f7 4f       	sbci	r31, 0xF7	; 247
    404c:	80 81       	ld	r24, Z
    404e:	81 11       	cpse	r24, r1
    4050:	02 c0       	rjmp	.+4      	; 0x4056 <softkeyCoupler+0x50>
    4052:	82 e8       	ldi	r24, 0x82	; 130
    4054:	01 c0       	rjmp	.+2      	; 0x4058 <softkeyCoupler+0x52>
    4056:	81 e8       	ldi	r24, 0x81	; 129
    4058:	cf 91       	pop	r28
    405a:	08 95       	ret

0000405c <softKeyCoupler2from3>:
    405c:	60 e0       	ldi	r22, 0x00	; 0
    405e:	d3 cf       	rjmp	.-90     	; 0x4006 <softkeyCoupler>
    4060:	08 95       	ret

00004062 <softKeyCoupler1from3>:
    4062:	61 e0       	ldi	r22, 0x01	; 1
    4064:	d0 cf       	rjmp	.-96     	; 0x4006 <softkeyCoupler>
    4066:	08 95       	ret

00004068 <softKeyCouplerPfrom3>:
    4068:	63 e0       	ldi	r22, 0x03	; 3
    406a:	cd cf       	rjmp	.-102    	; 0x4006 <softkeyCoupler>
    406c:	08 95       	ret

0000406e <softKeyCoupler1from2>:
    406e:	62 e0       	ldi	r22, 0x02	; 2
    4070:	ca cf       	rjmp	.-108    	; 0x4006 <softkeyCoupler>
    4072:	08 95       	ret

00004074 <softKeyCouplerPfrom2>:
    4074:	64 e0       	ldi	r22, 0x04	; 4
    4076:	c7 cf       	rjmp	.-114    	; 0x4006 <softkeyCoupler>
    4078:	08 95       	ret

0000407a <softKeyCouplerPfrom1>:
    407a:	65 e0       	ldi	r22, 0x05	; 5
    407c:	c4 cf       	rjmp	.-120    	; 0x4006 <softkeyCoupler>
    407e:	08 95       	ret

00004080 <softKeyCoupler3from2>:
    4080:	66 e0       	ldi	r22, 0x06	; 6
    4082:	c1 cf       	rjmp	.-126    	; 0x4006 <softkeyCoupler>
    4084:	08 95       	ret

00004086 <softKeyCoupler3from1>:
    4086:	67 e0       	ldi	r22, 0x07	; 7
    4088:	be cf       	rjmp	.-132    	; 0x4006 <softkeyCoupler>
    408a:	08 95       	ret

0000408c <softKeyCoupler3fromP>:
    408c:	69 e0       	ldi	r22, 0x09	; 9
    408e:	bb cf       	rjmp	.-138    	; 0x4006 <softkeyCoupler>
    4090:	08 95       	ret

00004092 <softKeyCoupler2from1>:
    4092:	68 e0       	ldi	r22, 0x08	; 8
    4094:	b8 cf       	rjmp	.-144    	; 0x4006 <softkeyCoupler>
    4096:	08 95       	ret

00004098 <softKeyCoupler2fromP>:
    4098:	6a e0       	ldi	r22, 0x0A	; 10
    409a:	b5 cf       	rjmp	.-150    	; 0x4006 <softkeyCoupler>
    409c:	08 95       	ret

0000409e <softKeyCoupler1fromP>:
    409e:	6b e0       	ldi	r22, 0x0B	; 11
    40a0:	b2 cf       	rjmp	.-156    	; 0x4006 <softkeyCoupler>
    40a2:	08 95       	ret

000040a4 <menuDisplaySaveMessage>:
    40a4:	cf 93       	push	r28
    40a6:	c6 2f       	mov	r28, r22
    40a8:	62 e0       	ldi	r22, 0x02	; 2
    40aa:	79 e1       	ldi	r23, 0x19	; 25
    40ac:	0e 94 c7 3b 	call	0x778e	; 0x778e <putChar_Dec>
    40b0:	bc 01       	movw	r22, r24
    40b2:	8e ec       	ldi	r24, 0xCE	; 206
    40b4:	93 e0       	ldi	r25, 0x03	; 3
    40b6:	0e 94 df 3c 	call	0x79be	; 0x79be <putString_P>
    40ba:	6c 2f       	mov	r22, r28
    40bc:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <putString_Prog>
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	99 e1       	ldi	r25, 0x19	; 25
    40c4:	0e 94 80 14 	call	0x2900	; 0x2900 <lcd_message>
    40c8:	cf 91       	pop	r28
    40ca:	08 95       	ret

000040cc <softKeyPrSet>:
    40cc:	cf 93       	push	r28
    40ce:	88 23       	and	r24, r24
    40d0:	51 f0       	breq	.+20     	; 0x40e6 <softKeyPrSet+0x1a>
    40d2:	c0 91 17 08 	lds	r28, 0x0817	; 0x800817 <prog_Display>
    40d6:	cf 3f       	cpi	r28, 0xFF	; 255
    40d8:	31 f0       	breq	.+12     	; 0x40e6 <softKeyPrSet+0x1a>
    40da:	6f ef       	ldi	r22, 0xFF	; 255
    40dc:	8c 2f       	mov	r24, r28
    40de:	0e 94 b3 30 	call	0x6166	; 0x6166 <register_toProgram>
    40e2:	6c 2f       	mov	r22, r28
    40e4:	df df       	rcall	.-66     	; 0x40a4 <menuDisplaySaveMessage>
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	cf 91       	pop	r28
    40ea:	08 95       	ret

000040ec <menuDisplayLoadMessage>:
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	cf 93       	push	r28
    40f2:	c8 2f       	mov	r28, r24
    40f4:	82 e0       	ldi	r24, 0x02	; 2
    40f6:	99 e1       	ldi	r25, 0x19	; 25
    40f8:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <putString_Prog>
    40fc:	bc 01       	movw	r22, r24
    40fe:	6f 5f       	subi	r22, 0xFF	; 255
    4100:	7f 4f       	sbci	r23, 0xFF	; 255
    4102:	2e e7       	ldi	r18, 0x7E	; 126
    4104:	fc 01       	movw	r30, r24
    4106:	20 83       	st	Z, r18
    4108:	8c 2f       	mov	r24, r28
    410a:	0e 94 c7 3b 	call	0x778e	; 0x778e <putChar_Dec>
    410e:	bc 01       	movw	r22, r24
    4110:	89 ec       	ldi	r24, 0xC9	; 201
    4112:	93 e0       	ldi	r25, 0x03	; 3
    4114:	0e 94 df 3c 	call	0x79be	; 0x79be <putString_P>
    4118:	8c 01       	movw	r16, r24
    411a:	0e 94 08 10 	call	0x2010	; 0x2010 <module_WaitOutputInput2Cycles>
    411e:	84 e0       	ldi	r24, 0x04	; 4
    4120:	0e 94 4e 30 	call	0x609c	; 0x609c <count_Registers>
    4124:	c8 2f       	mov	r28, r24
    4126:	88 23       	and	r24, r24
    4128:	49 f0       	breq	.+18     	; 0x413c <menuDisplayLoadMessage+0x50>
    412a:	b8 01       	movw	r22, r16
    412c:	87 ec       	ldi	r24, 0xC7	; 199
    412e:	93 e0       	ldi	r25, 0x03	; 3
    4130:	0e 94 df 3c 	call	0x79be	; 0x79be <putString_P>
    4134:	bc 01       	movw	r22, r24
    4136:	8c 2f       	mov	r24, r28
    4138:	0e 94 c7 3b 	call	0x778e	; 0x778e <putChar_Dec>
    413c:	82 e0       	ldi	r24, 0x02	; 2
    413e:	99 e1       	ldi	r25, 0x19	; 25
    4140:	0e 94 80 14 	call	0x2900	; 0x2900 <lcd_message>
    4144:	cf 91       	pop	r28
    4146:	1f 91       	pop	r17
    4148:	0f 91       	pop	r16
    414a:	08 95       	ret

0000414c <send_progrChange_toMidiThru>:
    414c:	cf 93       	push	r28
    414e:	80 34       	cpi	r24, 0x40	; 64
    4150:	60 f4       	brcc	.+24     	; 0x416a <send_progrChange_toMidiThru+0x1e>
    4152:	90 91 48 08 	lds	r25, 0x0848	; 0x800848 <midiThrough+0x1>
    4156:	9f 3f       	cpi	r25, 0xFF	; 255
    4158:	41 f0       	breq	.+16     	; 0x416a <send_progrChange_toMidiThru+0x1e>
    415a:	c8 2f       	mov	r28, r24
    415c:	89 2f       	mov	r24, r25
    415e:	80 6c       	ori	r24, 0xC0	; 192
    4160:	0e 94 88 38 	call	0x7110	; 0x7110 <serial1MIDISend>
    4164:	8c 2f       	mov	r24, r28
    4166:	0e 94 88 38 	call	0x7110	; 0x7110 <serial1MIDISend>
    416a:	cf 91       	pop	r28
    416c:	08 95       	ret

0000416e <handle_programKey>:
    416e:	cf 93       	push	r28
    4170:	c6 2f       	mov	r28, r22
    4172:	88 23       	and	r24, r24
    4174:	3c f4       	brge	.+14     	; 0x4184 <handle_programKey+0x16>
    4176:	6f ef       	ldi	r22, 0xFF	; 255
    4178:	8c 2f       	mov	r24, r28
    417a:	0e 94 b3 30 	call	0x6166	; 0x6166 <register_toProgram>
    417e:	6c 2f       	mov	r22, r28
    4180:	91 df       	rcall	.-222    	; 0x40a4 <menuDisplaySaveMessage>
    4182:	09 c0       	rjmp	.+18     	; 0x4196 <handle_programKey+0x28>
    4184:	88 23       	and	r24, r24
    4186:	39 f0       	breq	.+14     	; 0x4196 <handle_programKey+0x28>
    4188:	86 2f       	mov	r24, r22
    418a:	0e 94 4d 31 	call	0x629a	; 0x629a <program_toRegister>
    418e:	6c 2f       	mov	r22, r28
    4190:	ad df       	rcall	.-166    	; 0x40ec <menuDisplayLoadMessage>
    4192:	8c 2f       	mov	r24, r28
    4194:	db df       	rcall	.-74     	; 0x414c <send_progrChange_toMidiThru>
    4196:	8c 2f       	mov	r24, r28
    4198:	0e 94 23 31 	call	0x6246	; 0x6246 <midi_CountRegisterInProgram>
    419c:	88 23       	and	r24, r24
    419e:	39 f0       	breq	.+14     	; 0x41ae <handle_programKey+0x40>
    41a0:	8c 2f       	mov	r24, r28
    41a2:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <midi_RegisterMatchProgram>
    41a6:	81 11       	cpse	r24, r1
    41a8:	04 c0       	rjmp	.+8      	; 0x41b2 <handle_programKey+0x44>
    41aa:	81 e8       	ldi	r24, 0x81	; 129
    41ac:	03 c0       	rjmp	.+6      	; 0x41b4 <handle_programKey+0x46>
    41ae:	82 e8       	ldi	r24, 0x82	; 130
    41b0:	01 c0       	rjmp	.+2      	; 0x41b4 <handle_programKey+0x46>
    41b2:	82 e8       	ldi	r24, 0x82	; 130
    41b4:	cf 91       	pop	r28
    41b6:	08 95       	ret

000041b8 <softKeyK1A>:
    41b8:	60 e0       	ldi	r22, 0x00	; 0
    41ba:	d9 cf       	rjmp	.-78     	; 0x416e <handle_programKey>
    41bc:	08 95       	ret

000041be <softKeyK2A>:
    41be:	61 e0       	ldi	r22, 0x01	; 1
    41c0:	d6 cf       	rjmp	.-84     	; 0x416e <handle_programKey>
    41c2:	08 95       	ret

000041c4 <softKeyK3A>:
    41c4:	62 e0       	ldi	r22, 0x02	; 2
    41c6:	d3 cf       	rjmp	.-90     	; 0x416e <handle_programKey>
    41c8:	08 95       	ret

000041ca <softKeyK4A>:
    41ca:	63 e0       	ldi	r22, 0x03	; 3
    41cc:	d0 cf       	rjmp	.-96     	; 0x416e <handle_programKey>
    41ce:	08 95       	ret

000041d0 <softKeyUpdateProg>:
    41d0:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    41d4:	80 34       	cpi	r24, 0x40	; 64
    41d6:	30 f4       	brcc	.+12     	; 0x41e4 <softKeyUpdateProg+0x14>
    41d8:	b9 df       	rcall	.-142    	; 0x414c <send_progrChange_toMidiThru>
    41da:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    41de:	0e 94 4d 31 	call	0x629a	; 0x629a <program_toRegister>
    41e2:	02 c0       	rjmp	.+4      	; 0x41e8 <softKeyUpdateProg+0x18>
    41e4:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <midi_resetRegisters>
    41e8:	8f ef       	ldi	r24, 0xFF	; 255
    41ea:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <prog_UpdDisplay>
    41ee:	08 95       	ret

000041f0 <softKeyPrP>:
    41f0:	cf 93       	push	r28
    41f2:	88 23       	and	r24, r24
    41f4:	5c f4       	brge	.+22     	; 0x420c <softKeyPrP+0x1c>
    41f6:	c0 91 17 08 	lds	r28, 0x0817	; 0x800817 <prog_Display>
    41fa:	cf 3f       	cpi	r28, 0xFF	; 255
    41fc:	a9 f0       	breq	.+42     	; 0x4228 <softKeyPrP+0x38>
    41fe:	6f ef       	ldi	r22, 0xFF	; 255
    4200:	8c 2f       	mov	r24, r28
    4202:	0e 94 b3 30 	call	0x6166	; 0x6166 <register_toProgram>
    4206:	6c 2f       	mov	r22, r28
    4208:	4d df       	rcall	.-358    	; 0x40a4 <menuDisplaySaveMessage>
    420a:	0e c0       	rjmp	.+28     	; 0x4228 <softKeyPrP+0x38>
    420c:	88 23       	and	r24, r24
    420e:	61 f0       	breq	.+24     	; 0x4228 <softKeyPrP+0x38>
    4210:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    4214:	8f 33       	cpi	r24, 0x3F	; 63
    4216:	21 f4       	brne	.+8      	; 0x4220 <softKeyPrP+0x30>
    4218:	8f ef       	ldi	r24, 0xFF	; 255
    421a:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    421e:	03 c0       	rjmp	.+6      	; 0x4226 <softKeyPrP+0x36>
    4220:	8f 5f       	subi	r24, 0xFF	; 255
    4222:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    4226:	d4 df       	rcall	.-88     	; 0x41d0 <softKeyUpdateProg>
    4228:	80 e0       	ldi	r24, 0x00	; 0
    422a:	cf 91       	pop	r28
    422c:	08 95       	ret

0000422e <softKeyPrM>:
    422e:	88 23       	and	r24, r24
    4230:	34 f4       	brge	.+12     	; 0x423e <softKeyPrM+0x10>
    4232:	0e 94 d8 31 	call	0x63b0	; 0x63b0 <midi_resetRegisters>
    4236:	8f ef       	ldi	r24, 0xFF	; 255
    4238:	0e 94 43 31 	call	0x6286	; 0x6286 <prog_set>
    423c:	0e c0       	rjmp	.+28     	; 0x425a <softKeyPrM+0x2c>
    423e:	88 23       	and	r24, r24
    4240:	61 f0       	breq	.+24     	; 0x425a <softKeyPrM+0x2c>
    4242:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    4246:	8f 3f       	cpi	r24, 0xFF	; 255
    4248:	21 f4       	brne	.+8      	; 0x4252 <softKeyPrM+0x24>
    424a:	8f e3       	ldi	r24, 0x3F	; 63
    424c:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    4250:	03 c0       	rjmp	.+6      	; 0x4258 <softKeyPrM+0x2a>
    4252:	81 50       	subi	r24, 0x01	; 1
    4254:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    4258:	bb df       	rcall	.-138    	; 0x41d0 <softKeyUpdateProg>
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	08 95       	ret

0000425e <softKeyPrInc>:
    425e:	88 23       	and	r24, r24
    4260:	c1 f0       	breq	.+48     	; 0x4292 <softKeyPrInc+0x34>
    4262:	4c f4       	brge	.+18     	; 0x4276 <softKeyPrInc+0x18>
    4264:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    4268:	8f 3f       	cpi	r24, 0xFF	; 255
    426a:	91 f0       	breq	.+36     	; 0x4290 <softKeyPrInc+0x32>
    426c:	88 5f       	subi	r24, 0xF8	; 248
    426e:	88 73       	andi	r24, 0x38	; 56
    4270:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    4274:	0d c0       	rjmp	.+26     	; 0x4290 <softKeyPrInc+0x32>
    4276:	88 23       	and	r24, r24
    4278:	59 f0       	breq	.+22     	; 0x4290 <softKeyPrInc+0x32>
    427a:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    427e:	8f 33       	cpi	r24, 0x3F	; 63
    4280:	21 f4       	brne	.+8      	; 0x428a <softKeyPrInc+0x2c>
    4282:	8f ef       	ldi	r24, 0xFF	; 255
    4284:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    4288:	03 c0       	rjmp	.+6      	; 0x4290 <softKeyPrInc+0x32>
    428a:	8f 5f       	subi	r24, 0xFF	; 255
    428c:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    4290:	9f df       	rcall	.-194    	; 0x41d0 <softKeyUpdateProg>
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	08 95       	ret

00004296 <softKeyPrDec>:
    4296:	88 23       	and	r24, r24
    4298:	c1 f0       	breq	.+48     	; 0x42ca <softKeyPrDec+0x34>
    429a:	4c f4       	brge	.+18     	; 0x42ae <softKeyPrDec+0x18>
    429c:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    42a0:	8f 3f       	cpi	r24, 0xFF	; 255
    42a2:	91 f0       	breq	.+36     	; 0x42c8 <softKeyPrDec+0x32>
    42a4:	88 50       	subi	r24, 0x08	; 8
    42a6:	88 73       	andi	r24, 0x38	; 56
    42a8:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    42ac:	0d c0       	rjmp	.+26     	; 0x42c8 <softKeyPrDec+0x32>
    42ae:	88 23       	and	r24, r24
    42b0:	59 f0       	breq	.+22     	; 0x42c8 <softKeyPrDec+0x32>
    42b2:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    42b6:	8f 3f       	cpi	r24, 0xFF	; 255
    42b8:	21 f4       	brne	.+8      	; 0x42c2 <softKeyPrDec+0x2c>
    42ba:	8f e3       	ldi	r24, 0x3F	; 63
    42bc:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    42c0:	03 c0       	rjmp	.+6      	; 0x42c8 <softKeyPrDec+0x32>
    42c2:	81 50       	subi	r24, 0x01	; 1
    42c4:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    42c8:	83 df       	rcall	.-250    	; 0x41d0 <softKeyUpdateProg>
    42ca:	80 e0       	ldi	r24, 0x00	; 0
    42cc:	08 95       	ret

000042ce <softKeyPBInc>:
    42ce:	88 23       	and	r24, r24
    42d0:	39 f0       	breq	.+14     	; 0x42e0 <softKeyPBInc+0x12>
    42d2:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    42d6:	88 5f       	subi	r24, 0xF8	; 248
    42d8:	88 73       	andi	r24, 0x38	; 56
    42da:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    42de:	78 df       	rcall	.-272    	; 0x41d0 <softKeyUpdateProg>
    42e0:	80 e0       	ldi	r24, 0x00	; 0
    42e2:	08 95       	ret

000042e4 <softKeyPBDec>:
    42e4:	88 23       	and	r24, r24
    42e6:	39 f0       	breq	.+14     	; 0x42f6 <softKeyPBDec+0x12>
    42e8:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    42ec:	88 50       	subi	r24, 0x08	; 8
    42ee:	88 73       	andi	r24, 0x38	; 56
    42f0:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    42f4:	6d df       	rcall	.-294    	; 0x41d0 <softKeyUpdateProg>
    42f6:	80 e0       	ldi	r24, 0x00	; 0
    42f8:	08 95       	ret

000042fa <menuLCDwriteOK>:
    42fa:	8e ea       	ldi	r24, 0xAE	; 174
    42fc:	93 e0       	ldi	r25, 0x03	; 3
    42fe:	0c 94 c6 14 	jmp	0x298c	; 0x298c <lcd_message_P>
    4302:	08 95       	ret

00004304 <menuOnEnterEEBackup>:
    4304:	8e e1       	ldi	r24, 0x1E	; 30
    4306:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    430a:	81 e9       	ldi	r24, 0x91	; 145
    430c:	93 e0       	ldi	r25, 0x03	; 3
    430e:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    4312:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <eeprom_Backup>
    4316:	f1 df       	rcall	.-30     	; 0x42fa <menuLCDwriteOK>
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	08 95       	ret

0000431c <menuOnEnterEERestore>:
    431c:	8e e1       	ldi	r24, 0x1E	; 30
    431e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4322:	81 e9       	ldi	r24, 0x91	; 145
    4324:	93 e0       	ldi	r25, 0x03	; 3
    4326:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    432a:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <eeprom_Restore>
    432e:	e5 df       	rcall	.-54     	; 0x42fa <menuLCDwriteOK>
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	08 95       	ret

00004334 <menuOnEnterEEUpdate>:
    4334:	81 e9       	ldi	r24, 0x91	; 145
    4336:	93 e0       	ldi	r25, 0x03	; 3
    4338:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    433c:	8e e1       	ldi	r24, 0x1E	; 30
    433e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4342:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <eeprom_UpdateALL>
    4346:	d9 df       	rcall	.-78     	; 0x42fa <menuLCDwriteOK>
    4348:	80 e0       	ldi	r24, 0x00	; 0
    434a:	08 95       	ret

0000434c <menu_Init>:
    434c:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <menuStackIndex>
    4350:	00 97       	sbiw	r24, 0x00	; 0
    4352:	69 f4       	brne	.+26     	; 0x436e <menu_Init+0x22>
    4354:	86 ed       	ldi	r24, 0xD6	; 214
    4356:	97 e0       	ldi	r25, 0x07	; 7
    4358:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <currentMenu+0x1>
    435c:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <currentMenu>
    4360:	8f ed       	ldi	r24, 0xDF	; 223
    4362:	93 e0       	ldi	r25, 0x03	; 3
    4364:	90 93 be 05 	sts	0x05BE, r25	; 0x8005be <pMenuTopTitle+0x1>
    4368:	80 93 bd 05 	sts	0x05BD, r24	; 0x8005bd <pMenuTopTitle>
    436c:	08 c0       	rjmp	.+16     	; 0x437e <menu_Init+0x32>
    436e:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <currentMenu+0x1>
    4372:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <currentMenu>
    4376:	70 93 be 05 	sts	0x05BE, r23	; 0x8005be <pMenuTopTitle+0x1>
    437a:	60 93 bd 05 	sts	0x05BD, r22	; 0x8005bd <pMenuTopTitle>
    437e:	8f ef       	ldi	r24, 0xFF	; 255
    4380:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <nibbleIndex>
    4384:	89 ee       	ldi	r24, 0xE9	; 233
    4386:	93 e0       	ldi	r25, 0x03	; 3
    4388:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <pNibbleInfo+0x1>
    438c:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <pNibbleInfo>
    4390:	08 95       	ret

00004392 <softkeyLeft>:
    4392:	62 ee       	ldi	r22, 0xE2	; 226
    4394:	73 e1       	ldi	r23, 0x13	; 19
    4396:	82 e0       	ldi	r24, 0x02	; 2
    4398:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    439c:	08 95       	ret

0000439e <softkeyRight>:
    439e:	64 ee       	ldi	r22, 0xE4	; 228
    43a0:	73 e1       	ldi	r23, 0x13	; 19
    43a2:	83 e0       	ldi	r24, 0x03	; 3
    43a4:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    43a8:	08 95       	ret

000043aa <softkeyDown>:
    43aa:	66 ee       	ldi	r22, 0xE6	; 230
    43ac:	73 e1       	ldi	r23, 0x13	; 19
    43ae:	81 e0       	ldi	r24, 0x01	; 1
    43b0:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    43b4:	08 95       	ret

000043b6 <softkeyOn>:
    43b6:	64 ed       	ldi	r22, 0xD4	; 212
    43b8:	73 e1       	ldi	r23, 0x13	; 19
    43ba:	81 e0       	ldi	r24, 0x01	; 1
    43bc:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    43c0:	08 95       	ret

000043c2 <softkeyOff>:
    43c2:	6f ec       	ldi	r22, 0xCF	; 207
    43c4:	73 e1       	ldi	r23, 0x13	; 19
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    43cc:	08 95       	ret

000043ce <softkeyUp>:
    43ce:	68 ee       	ldi	r22, 0xE8	; 232
    43d0:	73 e1       	ldi	r23, 0x13	; 19
    43d2:	80 e0       	ldi	r24, 0x00	; 0
    43d4:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    43d8:	08 95       	ret

000043da <softkeyPlus>:
    43da:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <dataType>
    43de:	8a 30       	cpi	r24, 0x0A	; 10
    43e0:	11 f0       	breq	.+4      	; 0x43e6 <softkeyPlus+0xc>
    43e2:	8e 30       	cpi	r24, 0x0E	; 14
    43e4:	31 f4       	brne	.+12     	; 0x43f2 <softkeyPlus+0x18>
    43e6:	60 ec       	ldi	r22, 0xC0	; 192
    43e8:	73 e1       	ldi	r23, 0x13	; 19
    43ea:	80 e0       	ldi	r24, 0x00	; 0
    43ec:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    43f0:	08 95       	ret
    43f2:	60 ee       	ldi	r22, 0xE0	; 224
    43f4:	73 e1       	ldi	r23, 0x13	; 19
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    43fc:	08 95       	ret

000043fe <softkeyMinus>:
    43fe:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <dataType>
    4402:	8a 30       	cpi	r24, 0x0A	; 10
    4404:	11 f0       	breq	.+4      	; 0x440a <softkeyMinus+0xc>
    4406:	8e 30       	cpi	r24, 0x0E	; 14
    4408:	31 f4       	brne	.+12     	; 0x4416 <softkeyMinus+0x18>
    440a:	62 ec       	ldi	r22, 0xC2	; 194
    440c:	73 e1       	ldi	r23, 0x13	; 19
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    4414:	08 95       	ret
    4416:	6e ed       	ldi	r22, 0xDE	; 222
    4418:	73 e1       	ldi	r23, 0x13	; 19
    441a:	81 e0       	ldi	r24, 0x01	; 1
    441c:	0c 94 cd 3d 	jmp	0x7b9a	; 0x7b9a <keylabel_set>
    4420:	08 95       	ret

00004422 <dataToNibbles>:
    4422:	cf 93       	push	r28
    4424:	df 93       	push	r29
    4426:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <dataType>
    442a:	8e 2f       	mov	r24, r30
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	fc 01       	movw	r30, r24
    4430:	32 97       	sbiw	r30, 0x02	; 2
    4432:	ed 30       	cpi	r30, 0x0D	; 13
    4434:	f1 05       	cpc	r31, r1
    4436:	08 f0       	brcs	.+2      	; 0x443a <dataToNibbles+0x18>
    4438:	e4 c0       	rjmp	.+456    	; 0x4602 <dataToNibbles+0x1e0>
    443a:	88 27       	eor	r24, r24
    443c:	ee 58       	subi	r30, 0x8E	; 142
    443e:	ff 4f       	sbci	r31, 0xFF	; 255
    4440:	8f 4f       	sbci	r24, 0xFF	; 255
    4442:	0c 94 7f 3e 	jmp	0x7cfe	; 0x7cfe <__tablejump2__>
    4446:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    444a:	e5 ee       	ldi	r30, 0xE5	; 229
    444c:	f5 e0       	ldi	r31, 0x05	; 5
    444e:	98 2f       	mov	r25, r24
    4450:	92 95       	swap	r25
    4452:	9f 70       	andi	r25, 0x0F	; 15
    4454:	90 83       	st	Z, r25
    4456:	8f 70       	andi	r24, 0x0F	; 15
    4458:	81 83       	std	Z+1, r24	; 0x01
    445a:	d3 c0       	rjmp	.+422    	; 0x4602 <dataToNibbles+0x1e0>
    445c:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    4460:	80 31       	cpi	r24, 0x10	; 16
    4462:	20 f0       	brcs	.+8      	; 0x446c <dataToNibbles+0x4a>
    4464:	8f ef       	ldi	r24, 0xFF	; 255
    4466:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    446a:	cb c0       	rjmp	.+406    	; 0x4602 <dataToNibbles+0x1e0>
    446c:	8f 5f       	subi	r24, 0xFF	; 255
    446e:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    4472:	c7 c0       	rjmp	.+398    	; 0x4602 <dataToNibbles+0x1e0>
    4474:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    4478:	88 23       	and	r24, r24
    447a:	34 f4       	brge	.+12     	; 0x4488 <dataToNibbles+0x66>
    447c:	e5 ee       	ldi	r30, 0xE5	; 229
    447e:	f5 e0       	ldi	r31, 0x05	; 5
    4480:	10 82       	st	Z, r1
    4482:	8f ef       	ldi	r24, 0xFF	; 255
    4484:	81 83       	std	Z+1, r24	; 0x01
    4486:	bd c0       	rjmp	.+378    	; 0x4602 <dataToNibbles+0x1e0>
    4488:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <nibble+0x1>
    448c:	08 c0       	rjmp	.+16     	; 0x449e <dataToNibbles+0x7c>
    448e:	e5 ee       	ldi	r30, 0xE5	; 229
    4490:	f5 e0       	ldi	r31, 0x05	; 5
    4492:	91 81       	ldd	r25, Z+1	; 0x01
    4494:	9f 5f       	subi	r25, 0xFF	; 255
    4496:	91 83       	std	Z+1, r25	; 0x01
    4498:	8c 50       	subi	r24, 0x0C	; 12
    449a:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    449e:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    44a2:	8c 30       	cpi	r24, 0x0C	; 12
    44a4:	a0 f7       	brcc	.-24     	; 0x448e <dataToNibbles+0x6c>
    44a6:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    44aa:	ab c0       	rjmp	.+342    	; 0x4602 <dataToNibbles+0x1e0>
    44ac:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    44b0:	e5 ee       	ldi	r30, 0xE5	; 229
    44b2:	f5 e0       	ldi	r31, 0x05	; 5
    44b4:	98 2f       	mov	r25, r24
    44b6:	92 95       	swap	r25
    44b8:	96 95       	lsr	r25
    44ba:	97 70       	andi	r25, 0x07	; 7
    44bc:	90 83       	st	Z, r25
    44be:	8f 71       	andi	r24, 0x1F	; 31
    44c0:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    44c4:	11 82       	std	Z+1, r1	; 0x01
    44c6:	08 c0       	rjmp	.+16     	; 0x44d8 <dataToNibbles+0xb6>
    44c8:	e5 ee       	ldi	r30, 0xE5	; 229
    44ca:	f5 e0       	ldi	r31, 0x05	; 5
    44cc:	91 81       	ldd	r25, Z+1	; 0x01
    44ce:	9f 5f       	subi	r25, 0xFF	; 255
    44d0:	91 83       	std	Z+1, r25	; 0x01
    44d2:	8a 50       	subi	r24, 0x0A	; 10
    44d4:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    44d8:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    44dc:	8a 30       	cpi	r24, 0x0A	; 10
    44de:	a0 f7       	brcc	.-24     	; 0x44c8 <dataToNibbles+0xa6>
    44e0:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <nibble+0x2>
    44e4:	8e c0       	rjmp	.+284    	; 0x4602 <dataToNibbles+0x1e0>
    44e6:	e5 ee       	ldi	r30, 0xE5	; 229
    44e8:	f5 e0       	ldi	r31, 0x05	; 5
    44ea:	10 82       	st	Z, r1
    44ec:	11 82       	std	Z+1, r1	; 0x01
    44ee:	08 c0       	rjmp	.+16     	; 0x4500 <dataToNibbles+0xde>
    44f0:	e5 ee       	ldi	r30, 0xE5	; 229
    44f2:	f5 e0       	ldi	r31, 0x05	; 5
    44f4:	90 81       	ld	r25, Z
    44f6:	9f 5f       	subi	r25, 0xFF	; 255
    44f8:	90 83       	st	Z, r25
    44fa:	84 56       	subi	r24, 0x64	; 100
    44fc:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4500:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    4504:	84 36       	cpi	r24, 0x64	; 100
    4506:	a0 f7       	brcc	.-24     	; 0x44f0 <dataToNibbles+0xce>
    4508:	08 c0       	rjmp	.+16     	; 0x451a <dataToNibbles+0xf8>
    450a:	e5 ee       	ldi	r30, 0xE5	; 229
    450c:	f5 e0       	ldi	r31, 0x05	; 5
    450e:	91 81       	ldd	r25, Z+1	; 0x01
    4510:	9f 5f       	subi	r25, 0xFF	; 255
    4512:	91 83       	std	Z+1, r25	; 0x01
    4514:	8a 50       	subi	r24, 0x0A	; 10
    4516:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    451a:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    451e:	8a 30       	cpi	r24, 0x0A	; 10
    4520:	a0 f7       	brcc	.-24     	; 0x450a <dataToNibbles+0xe8>
    4522:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <nibble+0x2>
    4526:	6d c0       	rjmp	.+218    	; 0x4602 <dataToNibbles+0x1e0>
    4528:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    452c:	84 30       	cpi	r24, 0x04	; 4
    452e:	20 f0       	brcs	.+8      	; 0x4538 <dataToNibbles+0x116>
    4530:	8f ef       	ldi	r24, 0xFF	; 255
    4532:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    4536:	65 c0       	rjmp	.+202    	; 0x4602 <dataToNibbles+0x1e0>
    4538:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    453c:	62 c0       	rjmp	.+196    	; 0x4602 <dataToNibbles+0x1e0>
    453e:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    4542:	84 30       	cpi	r24, 0x04	; 4
    4544:	20 f0       	brcs	.+8      	; 0x454e <dataToNibbles+0x12c>
    4546:	83 e0       	ldi	r24, 0x03	; 3
    4548:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    454c:	5a c0       	rjmp	.+180    	; 0x4602 <dataToNibbles+0x1e0>
    454e:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    4552:	57 c0       	rjmp	.+174    	; 0x4602 <dataToNibbles+0x1e0>
    4554:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    4558:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    455c:	52 c0       	rjmp	.+164    	; 0x4602 <dataToNibbles+0x1e0>
    455e:	e9 2f       	mov	r30, r25
    4560:	f0 e0       	ldi	r31, 0x00	; 0
    4562:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    4566:	28 2f       	mov	r18, r24
    4568:	22 1f       	adc	r18, r18
    456a:	22 27       	eor	r18, r18
    456c:	22 1f       	adc	r18, r18
    456e:	eb 51       	subi	r30, 0x1B	; 27
    4570:	fa 4f       	sbci	r31, 0xFA	; 250
    4572:	20 83       	st	Z, r18
    4574:	88 0f       	add	r24, r24
    4576:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    457a:	9f 5f       	subi	r25, 0xFF	; 255
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <dataToNibbles+0x15e>
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	98 30       	cpi	r25, 0x08	; 8
    4582:	68 f3       	brcs	.-38     	; 0x455e <dataToNibbles+0x13c>
    4584:	3e c0       	rjmp	.+124    	; 0x4602 <dataToNibbles+0x1e0>
    4586:	82 50       	subi	r24, 0x02	; 2
    4588:	f0 e0       	ldi	r31, 0x00	; 0
    458a:	de 01       	movw	r26, r28
    458c:	9d 91       	ld	r25, X+
    458e:	eb 51       	subi	r30, 0x1B	; 27
    4590:	fa 4f       	sbci	r31, 0xFA	; 250
    4592:	9f 70       	andi	r25, 0x0F	; 15
    4594:	90 83       	st	Z, r25
    4596:	e8 2f       	mov	r30, r24
    4598:	f0 e0       	ldi	r31, 0x00	; 0
    459a:	98 81       	ld	r25, Y
    459c:	eb 51       	subi	r30, 0x1B	; 27
    459e:	fa 4f       	sbci	r31, 0xFA	; 250
    45a0:	92 95       	swap	r25
    45a2:	9f 70       	andi	r25, 0x0F	; 15
    45a4:	90 83       	st	Z, r25
    45a6:	ed 01       	movw	r28, r26
    45a8:	03 c0       	rjmp	.+6      	; 0x45b0 <dataToNibbles+0x18e>
    45aa:	c3 ec       	ldi	r28, 0xC3	; 195
    45ac:	d5 e0       	ldi	r29, 0x05	; 5
    45ae:	88 e0       	ldi	r24, 0x08	; 8
    45b0:	ef ef       	ldi	r30, 0xFF	; 255
    45b2:	e8 0f       	add	r30, r24
    45b4:	81 11       	cpse	r24, r1
    45b6:	e7 cf       	rjmp	.-50     	; 0x4586 <dataToNibbles+0x164>
    45b8:	24 c0       	rjmp	.+72     	; 0x4602 <dataToNibbles+0x1e0>
    45ba:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    45be:	e5 ee       	ldi	r30, 0xE5	; 229
    45c0:	f5 e0       	ldi	r31, 0x05	; 5
    45c2:	98 2f       	mov	r25, r24
    45c4:	97 70       	andi	r25, 0x07	; 7
    45c6:	9f 5f       	subi	r25, 0xFF	; 255
    45c8:	90 83       	st	Z, r25
    45ca:	86 95       	lsr	r24
    45cc:	86 95       	lsr	r24
    45ce:	86 95       	lsr	r24
    45d0:	8f 5f       	subi	r24, 0xFF	; 255
    45d2:	81 83       	std	Z+1, r24	; 0x01
    45d4:	16 c0       	rjmp	.+44     	; 0x4602 <dataToNibbles+0x1e0>
    45d6:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    45da:	8f 5f       	subi	r24, 0xFF	; 255
    45dc:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    45e0:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <nibble>
    45e4:	08 c0       	rjmp	.+16     	; 0x45f6 <dataToNibbles+0x1d4>
    45e6:	e5 ee       	ldi	r30, 0xE5	; 229
    45e8:	f5 e0       	ldi	r31, 0x05	; 5
    45ea:	90 81       	ld	r25, Z
    45ec:	9f 5f       	subi	r25, 0xFF	; 255
    45ee:	90 83       	st	Z, r25
    45f0:	8a 50       	subi	r24, 0x0A	; 10
    45f2:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    45f6:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    45fa:	8a 30       	cpi	r24, 0x0A	; 10
    45fc:	a0 f7       	brcc	.-24     	; 0x45e6 <dataToNibbles+0x1c4>
    45fe:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <nibble+0x1>
    4602:	df 91       	pop	r29
    4604:	cf 91       	pop	r28
    4606:	08 95       	ret

00004608 <nibbleToLCDstring>:
    4608:	0f 93       	push	r16
    460a:	1f 93       	push	r17
    460c:	cf 93       	push	r28
    460e:	df 93       	push	r29
    4610:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <dataType>
    4614:	8e 2f       	mov	r24, r30
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	fc 01       	movw	r30, r24
    461a:	32 97       	sbiw	r30, 0x02	; 2
    461c:	ed 30       	cpi	r30, 0x0D	; 13
    461e:	f1 05       	cpc	r31, r1
    4620:	08 f0       	brcs	.+2      	; 0x4624 <nibbleToLCDstring+0x1c>
    4622:	3b c1       	rjmp	.+630    	; 0x489a <nibbleToLCDstring+0x292>
    4624:	88 27       	eor	r24, r24
    4626:	e1 58       	subi	r30, 0x81	; 129
    4628:	ff 4f       	sbci	r31, 0xFF	; 255
    462a:	8f 4f       	sbci	r24, 0xFF	; 255
    462c:	0c 94 7f 3e 	jmp	0x7cfe	; 0x7cfe <__tablejump2__>
    4630:	05 ee       	ldi	r16, 0xE5	; 229
    4632:	15 e0       	ldi	r17, 0x05	; 5
    4634:	f8 01       	movw	r30, r16
    4636:	80 81       	ld	r24, Z
    4638:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    463c:	c5 e4       	ldi	r28, 0x45	; 69
    463e:	d2 e0       	ldi	r29, 0x02	; 2
    4640:	88 83       	st	Y, r24
    4642:	f8 01       	movw	r30, r16
    4644:	81 81       	ldd	r24, Z+1	; 0x01
    4646:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    464a:	89 83       	std	Y+1, r24	; 0x01
    464c:	1a 82       	std	Y+2, r1	; 0x02
    464e:	25 c1       	rjmp	.+586    	; 0x489a <nibbleToLCDstring+0x292>
    4650:	e5 e4       	ldi	r30, 0x45	; 69
    4652:	f2 e0       	ldi	r31, 0x02	; 2
    4654:	83 e4       	ldi	r24, 0x43	; 67
    4656:	80 83       	st	Z, r24
    4658:	88 e6       	ldi	r24, 0x68	; 104
    465a:	81 83       	std	Z+1, r24	; 0x01
    465c:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    4660:	8f 3f       	cpi	r24, 0xFF	; 255
    4662:	29 f4       	brne	.+10     	; 0x466e <nibbleToLCDstring+0x66>
    4664:	80 e2       	ldi	r24, 0x20	; 32
    4666:	82 83       	std	Z+2, r24	; 0x02
    4668:	8d e2       	ldi	r24, 0x2D	; 45
    466a:	83 83       	std	Z+3, r24	; 0x03
    466c:	12 c0       	rjmp	.+36     	; 0x4692 <nibbleToLCDstring+0x8a>
    466e:	8a 30       	cpi	r24, 0x0A	; 10
    4670:	48 f0       	brcs	.+18     	; 0x4684 <nibbleToLCDstring+0x7c>
    4672:	c5 e4       	ldi	r28, 0x45	; 69
    4674:	d2 e0       	ldi	r29, 0x02	; 2
    4676:	91 e3       	ldi	r25, 0x31	; 49
    4678:	9a 83       	std	Y+2, r25	; 0x02
    467a:	8a 50       	subi	r24, 0x0A	; 10
    467c:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    4680:	8b 83       	std	Y+3, r24	; 0x03
    4682:	07 c0       	rjmp	.+14     	; 0x4692 <nibbleToLCDstring+0x8a>
    4684:	c5 e4       	ldi	r28, 0x45	; 69
    4686:	d2 e0       	ldi	r29, 0x02	; 2
    4688:	90 e2       	ldi	r25, 0x20	; 32
    468a:	9a 83       	std	Y+2, r25	; 0x02
    468c:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    4690:	8b 83       	std	Y+3, r24	; 0x03
    4692:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x4>
    4696:	01 c1       	rjmp	.+514    	; 0x489a <nibbleToLCDstring+0x292>
    4698:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    469c:	8f 3f       	cpi	r24, 0xFF	; 255
    469e:	21 f0       	breq	.+8      	; 0x46a8 <nibbleToLCDstring+0xa0>
    46a0:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <nibble+0x1>
    46a4:	9f 3f       	cpi	r25, 0xFF	; 255
    46a6:	59 f4       	brne	.+22     	; 0x46be <nibbleToLCDstring+0xb6>
    46a8:	e5 e4       	ldi	r30, 0x45	; 69
    46aa:	f2 e0       	ldi	r31, 0x02	; 2
    46ac:	8e e6       	ldi	r24, 0x6E	; 110
    46ae:	80 83       	st	Z, r24
    46b0:	9f e6       	ldi	r25, 0x6F	; 111
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	82 83       	std	Z+2, r24	; 0x02
    46b6:	85 e6       	ldi	r24, 0x65	; 101
    46b8:	83 83       	std	Z+3, r24	; 0x03
    46ba:	14 82       	std	Z+4, r1	; 0x04
    46bc:	ee c0       	rjmp	.+476    	; 0x489a <nibbleToLCDstring+0x292>
    46be:	9f e5       	ldi	r25, 0x5F	; 95
    46c0:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <lcdData+0x1>
    46c4:	8b 30       	cpi	r24, 0x0B	; 11
    46c6:	21 f4       	brne	.+8      	; 0x46d0 <nibbleToLCDstring+0xc8>
    46c8:	88 e4       	ldi	r24, 0x48	; 72
    46ca:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <lcdData>
    46ce:	20 c0       	rjmp	.+64     	; 0x4710 <nibbleToLCDstring+0x108>
    46d0:	85 30       	cpi	r24, 0x05	; 5
    46d2:	58 f4       	brcc	.+22     	; 0x46ea <nibbleToLCDstring+0xe2>
    46d4:	98 2f       	mov	r25, r24
    46d6:	96 95       	lsr	r25
    46d8:	9d 5b       	subi	r25, 0xBD	; 189
    46da:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <lcdData>
    46de:	80 ff       	sbrs	r24, 0
    46e0:	17 c0       	rjmp	.+46     	; 0x4710 <nibbleToLCDstring+0x108>
    46e2:	83 e2       	ldi	r24, 0x23	; 35
    46e4:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData+0x1>
    46e8:	13 c0       	rjmp	.+38     	; 0x4710 <nibbleToLCDstring+0x108>
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	25 50       	subi	r18, 0x05	; 5
    46f0:	31 09       	sbc	r19, r1
    46f2:	35 95       	asr	r19
    46f4:	27 95       	ror	r18
    46f6:	2a 5b       	subi	r18, 0xBA	; 186
    46f8:	20 93 45 02 	sts	0x0245, r18	; 0x800245 <lcdData>
    46fc:	80 fd       	sbrc	r24, 0
    46fe:	03 c0       	rjmp	.+6      	; 0x4706 <nibbleToLCDstring+0xfe>
    4700:	83 e2       	ldi	r24, 0x23	; 35
    4702:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData+0x1>
    4706:	28 34       	cpi	r18, 0x48	; 72
    4708:	19 f4       	brne	.+6      	; 0x4710 <nibbleToLCDstring+0x108>
    470a:	81 e4       	ldi	r24, 0x41	; 65
    470c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <lcdData>
    4710:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <nibble+0x1>
    4714:	81 11       	cpse	r24, r1
    4716:	04 c0       	rjmp	.+8      	; 0x4720 <nibbleToLCDstring+0x118>
    4718:	8d e6       	ldi	r24, 0x6D	; 109
    471a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x2>
    471e:	0b c0       	rjmp	.+22     	; 0x4736 <nibbleToLCDstring+0x12e>
    4720:	8c 30       	cpi	r24, 0x0C	; 12
    4722:	30 f4       	brcc	.+12     	; 0x4730 <nibbleToLCDstring+0x128>
    4724:	81 50       	subi	r24, 0x01	; 1
    4726:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    472a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x2>
    472e:	03 c0       	rjmp	.+6      	; 0x4736 <nibbleToLCDstring+0x12e>
    4730:	8d e2       	ldi	r24, 0x2D	; 45
    4732:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x2>
    4736:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <lcdData+0x3>
    473a:	af c0       	rjmp	.+350    	; 0x489a <nibbleToLCDstring+0x292>
    473c:	c5 e4       	ldi	r28, 0x45	; 69
    473e:	d2 e0       	ldi	r29, 0x02	; 2
    4740:	8d e4       	ldi	r24, 0x4D	; 77
    4742:	88 83       	st	Y, r24
    4744:	05 ee       	ldi	r16, 0xE5	; 229
    4746:	15 e0       	ldi	r17, 0x05	; 5
    4748:	f8 01       	movw	r30, r16
    474a:	80 81       	ld	r24, Z
    474c:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    4750:	89 83       	std	Y+1, r24	; 0x01
    4752:	82 e4       	ldi	r24, 0x42	; 66
    4754:	8a 83       	std	Y+2, r24	; 0x02
    4756:	f8 01       	movw	r30, r16
    4758:	81 81       	ldd	r24, Z+1	; 0x01
    475a:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    475e:	8b 83       	std	Y+3, r24	; 0x03
    4760:	f8 01       	movw	r30, r16
    4762:	82 81       	ldd	r24, Z+2	; 0x02
    4764:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    4768:	8c 83       	std	Y+4, r24	; 0x04
    476a:	1d 82       	std	Y+5, r1	; 0x05
    476c:	96 c0       	rjmp	.+300    	; 0x489a <nibbleToLCDstring+0x292>
    476e:	05 ee       	ldi	r16, 0xE5	; 229
    4770:	15 e0       	ldi	r17, 0x05	; 5
    4772:	f8 01       	movw	r30, r16
    4774:	80 81       	ld	r24, Z
    4776:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    477a:	c5 e4       	ldi	r28, 0x45	; 69
    477c:	d2 e0       	ldi	r29, 0x02	; 2
    477e:	88 83       	st	Y, r24
    4780:	f8 01       	movw	r30, r16
    4782:	81 81       	ldd	r24, Z+1	; 0x01
    4784:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    4788:	89 83       	std	Y+1, r24	; 0x01
    478a:	f8 01       	movw	r30, r16
    478c:	82 81       	ldd	r24, Z+2	; 0x02
    478e:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    4792:	8a 83       	std	Y+2, r24	; 0x02
    4794:	1b 82       	std	Y+3, r1	; 0x03
    4796:	81 c0       	rjmp	.+258    	; 0x489a <nibbleToLCDstring+0x292>
    4798:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    479c:	83 30       	cpi	r24, 0x03	; 3
    479e:	38 f4       	brcc	.+14     	; 0x47ae <nibbleToLCDstring+0x1a6>
    47a0:	e5 e4       	ldi	r30, 0x45	; 69
    47a2:	f2 e0       	ldi	r31, 0x02	; 2
    47a4:	93 e3       	ldi	r25, 0x33	; 51
    47a6:	98 1b       	sub	r25, r24
    47a8:	90 83       	st	Z, r25
    47aa:	11 82       	std	Z+1, r1	; 0x01
    47ac:	76 c0       	rjmp	.+236    	; 0x489a <nibbleToLCDstring+0x292>
    47ae:	83 30       	cpi	r24, 0x03	; 3
    47b0:	31 f4       	brne	.+12     	; 0x47be <nibbleToLCDstring+0x1b6>
    47b2:	e5 e4       	ldi	r30, 0x45	; 69
    47b4:	f2 e0       	ldi	r31, 0x02	; 2
    47b6:	80 e5       	ldi	r24, 0x50	; 80
    47b8:	80 83       	st	Z, r24
    47ba:	11 82       	std	Z+1, r1	; 0x01
    47bc:	6e c0       	rjmp	.+220    	; 0x489a <nibbleToLCDstring+0x292>
    47be:	e5 e4       	ldi	r30, 0x45	; 69
    47c0:	f2 e0       	ldi	r31, 0x02	; 2
    47c2:	8d e2       	ldi	r24, 0x2D	; 45
    47c4:	80 83       	st	Z, r24
    47c6:	11 82       	std	Z+1, r1	; 0x01
    47c8:	68 c0       	rjmp	.+208    	; 0x489a <nibbleToLCDstring+0x292>
    47ca:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    47ce:	e5 e4       	ldi	r30, 0x45	; 69
    47d0:	f2 e0       	ldi	r31, 0x02	; 2
    47d2:	80 5d       	subi	r24, 0xD0	; 208
    47d4:	80 83       	st	Z, r24
    47d6:	11 82       	std	Z+1, r1	; 0x01
    47d8:	60 c0       	rjmp	.+192    	; 0x489a <nibbleToLCDstring+0x292>
    47da:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    47de:	81 11       	cpse	r24, r1
    47e0:	09 c0       	rjmp	.+18     	; 0x47f4 <nibbleToLCDstring+0x1ec>
    47e2:	e5 e4       	ldi	r30, 0x45	; 69
    47e4:	f2 e0       	ldi	r31, 0x02	; 2
    47e6:	81 e4       	ldi	r24, 0x41	; 65
    47e8:	80 83       	st	Z, r24
    47ea:	85 e7       	ldi	r24, 0x75	; 117
    47ec:	81 83       	std	Z+1, r24	; 0x01
    47ee:	83 e7       	ldi	r24, 0x73	; 115
    47f0:	82 83       	std	Z+2, r24	; 0x02
    47f2:	08 c0       	rjmp	.+16     	; 0x4804 <nibbleToLCDstring+0x1fc>
    47f4:	e5 e4       	ldi	r30, 0x45	; 69
    47f6:	f2 e0       	ldi	r31, 0x02	; 2
    47f8:	85 e4       	ldi	r24, 0x45	; 69
    47fa:	80 83       	st	Z, r24
    47fc:	89 e6       	ldi	r24, 0x69	; 105
    47fe:	81 83       	std	Z+1, r24	; 0x01
    4800:	8e e6       	ldi	r24, 0x6E	; 110
    4802:	82 83       	std	Z+2, r24	; 0x02
    4804:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <lcdData+0x3>
    4808:	48 c0       	rjmp	.+144    	; 0x489a <nibbleToLCDstring+0x292>
    480a:	c1 2f       	mov	r28, r17
    480c:	d0 e0       	ldi	r29, 0x00	; 0
    480e:	fe 01       	movw	r30, r28
    4810:	eb 51       	subi	r30, 0x1B	; 27
    4812:	fa 4f       	sbci	r31, 0xFA	; 250
    4814:	80 81       	ld	r24, Z
    4816:	0e 94 0a 3b 	call	0x7614	; 0x7614 <nibbleToChr>
    481a:	cb 5b       	subi	r28, 0xBB	; 187
    481c:	dd 4f       	sbci	r29, 0xFD	; 253
    481e:	88 83       	st	Y, r24
    4820:	1f 5f       	subi	r17, 0xFF	; 255
    4822:	01 c0       	rjmp	.+2      	; 0x4826 <nibbleToLCDstring+0x21e>
    4824:	10 e0       	ldi	r17, 0x00	; 0
    4826:	18 30       	cpi	r17, 0x08	; 8
    4828:	80 f3       	brcs	.-32     	; 0x480a <nibbleToLCDstring+0x202>
    482a:	37 c0       	rjmp	.+110    	; 0x489a <nibbleToLCDstring+0x292>
    482c:	82 2f       	mov	r24, r18
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	fc 01       	movw	r30, r24
    4832:	eb 51       	subi	r30, 0x1B	; 27
    4834:	fa 4f       	sbci	r31, 0xFA	; 250
    4836:	30 81       	ld	r19, Z
    4838:	31 11       	cpse	r19, r1
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <nibbleToLCDstring+0x238>
    483c:	3f e6       	ldi	r19, 0x6F	; 111
    483e:	01 c0       	rjmp	.+2      	; 0x4842 <nibbleToLCDstring+0x23a>
    4840:	39 e4       	ldi	r19, 0x49	; 73
    4842:	fc 01       	movw	r30, r24
    4844:	eb 5b       	subi	r30, 0xBB	; 187
    4846:	fd 4f       	sbci	r31, 0xFD	; 253
    4848:	30 83       	st	Z, r19
    484a:	2f 5f       	subi	r18, 0xFF	; 255
    484c:	01 c0       	rjmp	.+2      	; 0x4850 <nibbleToLCDstring+0x248>
    484e:	20 e0       	ldi	r18, 0x00	; 0
    4850:	28 30       	cpi	r18, 0x08	; 8
    4852:	60 f3       	brcs	.-40     	; 0x482c <nibbleToLCDstring+0x224>
    4854:	22 c0       	rjmp	.+68     	; 0x489a <nibbleToLCDstring+0x292>
    4856:	a5 ee       	ldi	r26, 0xE5	; 229
    4858:	b5 e0       	ldi	r27, 0x05	; 5
    485a:	8c 91       	ld	r24, X
    485c:	e5 e4       	ldi	r30, 0x45	; 69
    485e:	f2 e0       	ldi	r31, 0x02	; 2
    4860:	80 5d       	subi	r24, 0xD0	; 208
    4862:	80 83       	st	Z, r24
    4864:	11 96       	adiw	r26, 0x01	; 1
    4866:	8c 91       	ld	r24, X
    4868:	80 5c       	subi	r24, 0xC0	; 192
    486a:	81 83       	std	Z+1, r24	; 0x01
    486c:	12 82       	std	Z+2, r1	; 0x02
    486e:	15 c0       	rjmp	.+42     	; 0x489a <nibbleToLCDstring+0x292>
    4870:	e5 ee       	ldi	r30, 0xE5	; 229
    4872:	f5 e0       	ldi	r31, 0x05	; 5
    4874:	90 81       	ld	r25, Z
    4876:	81 81       	ldd	r24, Z+1	; 0x01
    4878:	29 2f       	mov	r18, r25
    487a:	28 2b       	or	r18, r24
    487c:	31 f4       	brne	.+12     	; 0x488a <nibbleToLCDstring+0x282>
    487e:	e5 e4       	ldi	r30, 0x45	; 69
    4880:	f2 e0       	ldi	r31, 0x02	; 2
    4882:	8d e2       	ldi	r24, 0x2D	; 45
    4884:	80 83       	st	Z, r24
    4886:	81 83       	std	Z+1, r24	; 0x01
    4888:	06 c0       	rjmp	.+12     	; 0x4896 <nibbleToLCDstring+0x28e>
    488a:	e5 e4       	ldi	r30, 0x45	; 69
    488c:	f2 e0       	ldi	r31, 0x02	; 2
    488e:	90 5d       	subi	r25, 0xD0	; 208
    4890:	90 83       	st	Z, r25
    4892:	80 5d       	subi	r24, 0xD0	; 208
    4894:	81 83       	std	Z+1, r24	; 0x01
    4896:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <lcdData+0x2>
    489a:	df 91       	pop	r29
    489c:	cf 91       	pop	r28
    489e:	1f 91       	pop	r17
    48a0:	0f 91       	pop	r16
    48a2:	08 95       	ret

000048a4 <LCDStringOut>:
    48a4:	0f 93       	push	r16
    48a6:	1f 93       	push	r17
    48a8:	cf 93       	push	r28
    48aa:	8e e1       	ldi	r24, 0x1E	; 30
    48ac:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    48b0:	c0 e0       	ldi	r28, 0x00	; 0
    48b2:	05 e4       	ldi	r16, 0x45	; 69
    48b4:	12 e0       	ldi	r17, 0x02	; 2
    48b6:	0b c0       	rjmp	.+22     	; 0x48ce <LCDStringOut+0x2a>
    48b8:	f8 01       	movw	r30, r16
    48ba:	80 81       	ld	r24, Z
    48bc:	88 23       	and	r24, r24
    48be:	19 f0       	breq	.+6      	; 0x48c6 <LCDStringOut+0x22>
    48c0:	0f 5f       	subi	r16, 0xFF	; 255
    48c2:	1f 4f       	sbci	r17, 0xFF	; 255
    48c4:	01 c0       	rjmp	.+2      	; 0x48c8 <LCDStringOut+0x24>
    48c6:	80 e2       	ldi	r24, 0x20	; 32
    48c8:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    48cc:	cf 5f       	subi	r28, 0xFF	; 255
    48ce:	ca 30       	cpi	r28, 0x0A	; 10
    48d0:	98 f3       	brcs	.-26     	; 0x48b8 <LCDStringOut+0x14>
    48d2:	cf 91       	pop	r28
    48d4:	1f 91       	pop	r17
    48d6:	0f 91       	pop	r16
    48d8:	08 95       	ret

000048da <nibbleCheckOvfl>:
    48da:	8a 30       	cpi	r24, 0x0A	; 10
    48dc:	1c f4       	brge	.+6      	; 0x48e4 <nibbleCheckOvfl+0xa>
    48de:	88 23       	and	r24, r24
    48e0:	1c f0       	brlt	.+6      	; 0x48e8 <nibbleCheckOvfl+0xe>
    48e2:	08 95       	ret
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	08 95       	ret
    48e8:	89 e0       	ldi	r24, 0x09	; 9
    48ea:	08 95       	ret

000048ec <nibbleChange>:
    48ec:	0f 93       	push	r16
    48ee:	1f 93       	push	r17
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	c8 2f       	mov	r28, r24
    48f6:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    48fa:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    48fe:	31 96       	adiw	r30, 0x01	; 1
    4900:	84 91       	lpm	r24, Z
    4902:	28 2f       	mov	r18, r24
    4904:	20 71       	andi	r18, 0x10	; 16
    4906:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <dataType>
    490a:	8e 2f       	mov	r24, r30
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	fc 01       	movw	r30, r24
    4910:	32 97       	sbiw	r30, 0x02	; 2
    4912:	ed 30       	cpi	r30, 0x0D	; 13
    4914:	f1 05       	cpc	r31, r1
    4916:	08 f0       	brcs	.+2      	; 0x491a <nibbleChange+0x2e>
    4918:	93 c1       	rjmp	.+806    	; 0x4c40 <nibbleChange+0x354>
    491a:	88 27       	eor	r24, r24
    491c:	e4 57       	subi	r30, 0x74	; 116
    491e:	ff 4f       	sbci	r31, 0xFF	; 255
    4920:	8f 4f       	sbci	r24, 0xFF	; 255
    4922:	0c 94 7f 3e 	jmp	0x7cfe	; 0x7cfe <__tablejump2__>
    4926:	d0 e0       	ldi	r29, 0x00	; 0
    4928:	cb 51       	subi	r28, 0x1B	; 27
    492a:	da 4f       	sbci	r29, 0xFA	; 250
    492c:	88 81       	ld	r24, Y
    492e:	68 0f       	add	r22, r24
    4930:	6f 70       	andi	r22, 0x0F	; 15
    4932:	68 83       	st	Y, r22
    4934:	85 c1       	rjmp	.+778    	; 0x4c40 <nibbleChange+0x354>
    4936:	21 11       	cpse	r18, r1
    4938:	1b c0       	rjmp	.+54     	; 0x4970 <nibbleChange+0x84>
    493a:	61 30       	cpi	r22, 0x01	; 1
    493c:	41 f4       	brne	.+16     	; 0x494e <nibbleChange+0x62>
    493e:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    4942:	80 31       	cpi	r24, 0x10	; 16
    4944:	20 f0       	brcs	.+8      	; 0x494e <nibbleChange+0x62>
    4946:	81 e0       	ldi	r24, 0x01	; 1
    4948:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    494c:	79 c1       	rjmp	.+754    	; 0x4c40 <nibbleChange+0x354>
    494e:	6f 3f       	cpi	r22, 0xFF	; 255
    4950:	49 f4       	brne	.+18     	; 0x4964 <nibbleChange+0x78>
    4952:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    4956:	82 50       	subi	r24, 0x02	; 2
    4958:	8f 30       	cpi	r24, 0x0F	; 15
    495a:	20 f0       	brcs	.+8      	; 0x4964 <nibbleChange+0x78>
    495c:	80 e1       	ldi	r24, 0x10	; 16
    495e:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    4962:	6e c1       	rjmp	.+732    	; 0x4c40 <nibbleChange+0x354>
    4964:	e5 ee       	ldi	r30, 0xE5	; 229
    4966:	f5 e0       	ldi	r31, 0x05	; 5
    4968:	80 81       	ld	r24, Z
    496a:	68 0f       	add	r22, r24
    496c:	60 83       	st	Z, r22
    496e:	68 c1       	rjmp	.+720    	; 0x4c40 <nibbleChange+0x354>
    4970:	61 30       	cpi	r22, 0x01	; 1
    4972:	41 f4       	brne	.+16     	; 0x4984 <nibbleChange+0x98>
    4974:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    4978:	80 31       	cpi	r24, 0x10	; 16
    497a:	21 f4       	brne	.+8      	; 0x4984 <nibbleChange+0x98>
    497c:	8f ef       	ldi	r24, 0xFF	; 255
    497e:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    4982:	5e c1       	rjmp	.+700    	; 0x4c40 <nibbleChange+0x354>
    4984:	61 30       	cpi	r22, 0x01	; 1
    4986:	41 f4       	brne	.+16     	; 0x4998 <nibbleChange+0xac>
    4988:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    498c:	8f 3f       	cpi	r24, 0xFF	; 255
    498e:	21 f4       	brne	.+8      	; 0x4998 <nibbleChange+0xac>
    4990:	81 e0       	ldi	r24, 0x01	; 1
    4992:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    4996:	54 c1       	rjmp	.+680    	; 0x4c40 <nibbleChange+0x354>
    4998:	6f 3f       	cpi	r22, 0xFF	; 255
    499a:	41 f4       	brne	.+16     	; 0x49ac <nibbleChange+0xc0>
    499c:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    49a0:	8f 3f       	cpi	r24, 0xFF	; 255
    49a2:	21 f4       	brne	.+8      	; 0x49ac <nibbleChange+0xc0>
    49a4:	80 e1       	ldi	r24, 0x10	; 16
    49a6:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    49aa:	4a c1       	rjmp	.+660    	; 0x4c40 <nibbleChange+0x354>
    49ac:	6f 3f       	cpi	r22, 0xFF	; 255
    49ae:	41 f4       	brne	.+16     	; 0x49c0 <nibbleChange+0xd4>
    49b0:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    49b4:	81 30       	cpi	r24, 0x01	; 1
    49b6:	21 f4       	brne	.+8      	; 0x49c0 <nibbleChange+0xd4>
    49b8:	8f ef       	ldi	r24, 0xFF	; 255
    49ba:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <nibble>
    49be:	40 c1       	rjmp	.+640    	; 0x4c40 <nibbleChange+0x354>
    49c0:	e5 ee       	ldi	r30, 0xE5	; 229
    49c2:	f5 e0       	ldi	r31, 0x05	; 5
    49c4:	80 81       	ld	r24, Z
    49c6:	68 0f       	add	r22, r24
    49c8:	60 83       	st	Z, r22
    49ca:	3a c1       	rjmp	.+628    	; 0x4c40 <nibbleChange+0x354>
    49cc:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <nibble+0x1>
    49d0:	8f 3f       	cpi	r24, 0xFF	; 255
    49d2:	09 f4       	brne	.+2      	; 0x49d6 <nibbleChange+0xea>
    49d4:	c1 e0       	ldi	r28, 0x01	; 1
    49d6:	c1 11       	cpse	r28, r1
    49d8:	16 c0       	rjmp	.+44     	; 0x4a06 <nibbleChange+0x11a>
    49da:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    49de:	8c 30       	cpi	r24, 0x0C	; 12
    49e0:	50 f4       	brcc	.+20     	; 0x49f6 <nibbleChange+0x10a>
    49e2:	8b 30       	cpi	r24, 0x0B	; 11
    49e4:	11 f4       	brne	.+4      	; 0x49ea <nibbleChange+0xfe>
    49e6:	61 30       	cpi	r22, 0x01	; 1
    49e8:	41 f0       	breq	.+16     	; 0x49fa <nibbleChange+0x10e>
    49ea:	81 11       	cpse	r24, r1
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <nibbleChange+0x106>
    49ee:	6f 3f       	cpi	r22, 0xFF	; 255
    49f0:	31 f0       	breq	.+12     	; 0x49fe <nibbleChange+0x112>
    49f2:	68 0f       	add	r22, r24
    49f4:	05 c0       	rjmp	.+10     	; 0x4a00 <nibbleChange+0x114>
    49f6:	60 e0       	ldi	r22, 0x00	; 0
    49f8:	03 c0       	rjmp	.+6      	; 0x4a00 <nibbleChange+0x114>
    49fa:	60 e0       	ldi	r22, 0x00	; 0
    49fc:	01 c0       	rjmp	.+2      	; 0x4a00 <nibbleChange+0x114>
    49fe:	6b e0       	ldi	r22, 0x0B	; 11
    4a00:	60 93 e5 05 	sts	0x05E5, r22	; 0x8005e5 <nibble>
    4a04:	2b c0       	rjmp	.+86     	; 0x4a5c <nibbleChange+0x170>
    4a06:	21 11       	cpse	r18, r1
    4a08:	0a c0       	rjmp	.+20     	; 0x4a1e <nibbleChange+0x132>
    4a0a:	81 11       	cpse	r24, r1
    4a0c:	02 c0       	rjmp	.+4      	; 0x4a12 <nibbleChange+0x126>
    4a0e:	6f 3f       	cpi	r22, 0xFF	; 255
    4a10:	c1 f0       	breq	.+48     	; 0x4a42 <nibbleChange+0x156>
    4a12:	8a 30       	cpi	r24, 0x0A	; 10
    4a14:	11 f4       	brne	.+4      	; 0x4a1a <nibbleChange+0x12e>
    4a16:	61 30       	cpi	r22, 0x01	; 1
    4a18:	b1 f0       	breq	.+44     	; 0x4a46 <nibbleChange+0x15a>
    4a1a:	68 0f       	add	r22, r24
    4a1c:	1d c0       	rjmp	.+58     	; 0x4a58 <nibbleChange+0x16c>
    4a1e:	81 11       	cpse	r24, r1
    4a20:	02 c0       	rjmp	.+4      	; 0x4a26 <nibbleChange+0x13a>
    4a22:	6f 3f       	cpi	r22, 0xFF	; 255
    4a24:	91 f0       	breq	.+36     	; 0x4a4a <nibbleChange+0x15e>
    4a26:	8a 30       	cpi	r24, 0x0A	; 10
    4a28:	11 f4       	brne	.+4      	; 0x4a2e <nibbleChange+0x142>
    4a2a:	61 30       	cpi	r22, 0x01	; 1
    4a2c:	81 f0       	breq	.+32     	; 0x4a4e <nibbleChange+0x162>
    4a2e:	8f 3f       	cpi	r24, 0xFF	; 255
    4a30:	11 f4       	brne	.+4      	; 0x4a36 <nibbleChange+0x14a>
    4a32:	61 30       	cpi	r22, 0x01	; 1
    4a34:	71 f0       	breq	.+28     	; 0x4a52 <nibbleChange+0x166>
    4a36:	8f 3f       	cpi	r24, 0xFF	; 255
    4a38:	11 f4       	brne	.+4      	; 0x4a3e <nibbleChange+0x152>
    4a3a:	6f 3f       	cpi	r22, 0xFF	; 255
    4a3c:	61 f0       	breq	.+24     	; 0x4a56 <nibbleChange+0x16a>
    4a3e:	68 0f       	add	r22, r24
    4a40:	0b c0       	rjmp	.+22     	; 0x4a58 <nibbleChange+0x16c>
    4a42:	6a e0       	ldi	r22, 0x0A	; 10
    4a44:	09 c0       	rjmp	.+18     	; 0x4a58 <nibbleChange+0x16c>
    4a46:	60 e0       	ldi	r22, 0x00	; 0
    4a48:	07 c0       	rjmp	.+14     	; 0x4a58 <nibbleChange+0x16c>
    4a4a:	6f ef       	ldi	r22, 0xFF	; 255
    4a4c:	05 c0       	rjmp	.+10     	; 0x4a58 <nibbleChange+0x16c>
    4a4e:	6f ef       	ldi	r22, 0xFF	; 255
    4a50:	03 c0       	rjmp	.+6      	; 0x4a58 <nibbleChange+0x16c>
    4a52:	60 e0       	ldi	r22, 0x00	; 0
    4a54:	01 c0       	rjmp	.+2      	; 0x4a58 <nibbleChange+0x16c>
    4a56:	6a e0       	ldi	r22, 0x0A	; 10
    4a58:	60 93 e6 05 	sts	0x05E6, r22	; 0x8005e6 <nibble+0x1>
    4a5c:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <nibble>
    4a60:	9f 3f       	cpi	r25, 0xFF	; 255
    4a62:	09 f4       	brne	.+2      	; 0x4a66 <nibbleChange+0x17a>
    4a64:	ed c0       	rjmp	.+474    	; 0x4c40 <nibbleChange+0x354>
    4a66:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <nibble+0x1>
    4a6a:	8f 3f       	cpi	r24, 0xFF	; 255
    4a6c:	09 f4       	brne	.+2      	; 0x4a70 <nibbleChange+0x184>
    4a6e:	e8 c0       	rjmp	.+464    	; 0x4c40 <nibbleChange+0x354>
    4a70:	28 2f       	mov	r18, r24
    4a72:	22 0f       	add	r18, r18
    4a74:	82 0f       	add	r24, r18
    4a76:	28 2f       	mov	r18, r24
    4a78:	22 0f       	add	r18, r18
    4a7a:	22 0f       	add	r18, r18
    4a7c:	92 0f       	add	r25, r18
    4a7e:	0a f0       	brmi	.+2      	; 0x4a82 <nibbleChange+0x196>
    4a80:	df c0       	rjmp	.+446    	; 0x4c40 <nibbleChange+0x354>
    4a82:	e5 ee       	ldi	r30, 0xE5	; 229
    4a84:	f5 e0       	ldi	r31, 0x05	; 5
    4a86:	87 e0       	ldi	r24, 0x07	; 7
    4a88:	80 83       	st	Z, r24
    4a8a:	8a e0       	ldi	r24, 0x0A	; 10
    4a8c:	81 83       	std	Z+1, r24	; 0x01
    4a8e:	d8 c0       	rjmp	.+432    	; 0x4c40 <nibbleChange+0x354>
    4a90:	c1 11       	cpse	r28, r1
    4a92:	07 c0       	rjmp	.+14     	; 0x4aa2 <nibbleChange+0x1b6>
    4a94:	e5 ee       	ldi	r30, 0xE5	; 229
    4a96:	f5 e0       	ldi	r31, 0x05	; 5
    4a98:	80 81       	ld	r24, Z
    4a9a:	68 0f       	add	r22, r24
    4a9c:	67 70       	andi	r22, 0x07	; 7
    4a9e:	60 83       	st	Z, r22
    4aa0:	cf c0       	rjmp	.+414    	; 0x4c40 <nibbleChange+0x354>
    4aa2:	d0 e0       	ldi	r29, 0x00	; 0
    4aa4:	05 ee       	ldi	r16, 0xE5	; 229
    4aa6:	15 e0       	ldi	r17, 0x05	; 5
    4aa8:	cb 51       	subi	r28, 0x1B	; 27
    4aaa:	da 4f       	sbci	r29, 0xFA	; 250
    4aac:	88 81       	ld	r24, Y
    4aae:	86 0f       	add	r24, r22
    4ab0:	14 df       	rcall	.-472    	; 0x48da <nibbleCheckOvfl>
    4ab2:	88 83       	st	Y, r24
    4ab4:	f8 01       	movw	r30, r16
    4ab6:	81 81       	ldd	r24, Z+1	; 0x01
    4ab8:	92 81       	ldd	r25, Z+2	; 0x02
    4aba:	88 0f       	add	r24, r24
    4abc:	28 2f       	mov	r18, r24
    4abe:	22 0f       	add	r18, r18
    4ac0:	22 0f       	add	r18, r18
    4ac2:	82 0f       	add	r24, r18
    4ac4:	89 0f       	add	r24, r25
    4ac6:	80 32       	cpi	r24, 0x20	; 32
    4ac8:	2c f0       	brlt	.+10     	; 0x4ad4 <nibbleChange+0x1e8>
    4aca:	83 e0       	ldi	r24, 0x03	; 3
    4acc:	81 83       	std	Z+1, r24	; 0x01
    4ace:	81 e0       	ldi	r24, 0x01	; 1
    4ad0:	82 83       	std	Z+2, r24	; 0x02
    4ad2:	b6 c0       	rjmp	.+364    	; 0x4c40 <nibbleChange+0x354>
    4ad4:	88 23       	and	r24, r24
    4ad6:	0c f0       	brlt	.+2      	; 0x4ada <nibbleChange+0x1ee>
    4ad8:	b3 c0       	rjmp	.+358    	; 0x4c40 <nibbleChange+0x354>
    4ada:	e5 ee       	ldi	r30, 0xE5	; 229
    4adc:	f5 e0       	ldi	r31, 0x05	; 5
    4ade:	11 82       	std	Z+1, r1	; 0x01
    4ae0:	12 82       	std	Z+2, r1	; 0x02
    4ae2:	ae c0       	rjmp	.+348    	; 0x4c40 <nibbleChange+0x354>
    4ae4:	d0 e0       	ldi	r29, 0x00	; 0
    4ae6:	05 ee       	ldi	r16, 0xE5	; 229
    4ae8:	15 e0       	ldi	r17, 0x05	; 5
    4aea:	cb 51       	subi	r28, 0x1B	; 27
    4aec:	da 4f       	sbci	r29, 0xFA	; 250
    4aee:	88 81       	ld	r24, Y
    4af0:	86 0f       	add	r24, r22
    4af2:	f3 de       	rcall	.-538    	; 0x48da <nibbleCheckOvfl>
    4af4:	88 83       	st	Y, r24
    4af6:	f8 01       	movw	r30, r16
    4af8:	20 81       	ld	r18, Z
    4afa:	81 81       	ldd	r24, Z+1	; 0x01
    4afc:	90 e0       	ldi	r25, 0x00	; 0
    4afe:	ac 01       	movw	r20, r24
    4b00:	44 0f       	add	r20, r20
    4b02:	55 1f       	adc	r21, r21
    4b04:	88 0f       	add	r24, r24
    4b06:	99 1f       	adc	r25, r25
    4b08:	88 0f       	add	r24, r24
    4b0a:	99 1f       	adc	r25, r25
    4b0c:	88 0f       	add	r24, r24
    4b0e:	99 1f       	adc	r25, r25
    4b10:	84 0f       	add	r24, r20
    4b12:	95 1f       	adc	r25, r21
    4b14:	f4 e6       	ldi	r31, 0x64	; 100
    4b16:	2f 9f       	mul	r18, r31
    4b18:	80 0d       	add	r24, r0
    4b1a:	91 1d       	adc	r25, r1
    4b1c:	11 24       	eor	r1, r1
    4b1e:	f8 01       	movw	r30, r16
    4b20:	22 81       	ldd	r18, Z+2	; 0x02
    4b22:	82 0f       	add	r24, r18
    4b24:	91 1d       	adc	r25, r1
    4b26:	8f 3f       	cpi	r24, 0xFF	; 255
    4b28:	91 05       	cpc	r25, r1
    4b2a:	09 f0       	breq	.+2      	; 0x4b2e <nibbleChange+0x242>
    4b2c:	0c f4       	brge	.+2      	; 0x4b30 <nibbleChange+0x244>
    4b2e:	88 c0       	rjmp	.+272    	; 0x4c40 <nibbleChange+0x354>
    4b30:	82 e0       	ldi	r24, 0x02	; 2
    4b32:	80 83       	st	Z, r24
    4b34:	85 e0       	ldi	r24, 0x05	; 5
    4b36:	81 83       	std	Z+1, r24	; 0x01
    4b38:	82 83       	std	Z+2, r24	; 0x02
    4b3a:	82 c0       	rjmp	.+260    	; 0x4c40 <nibbleChange+0x354>
    4b3c:	22 23       	and	r18, r18
    4b3e:	a1 f0       	breq	.+40     	; 0x4b68 <nibbleChange+0x27c>
    4b40:	d0 e0       	ldi	r29, 0x00	; 0
    4b42:	fe 01       	movw	r30, r28
    4b44:	eb 51       	subi	r30, 0x1B	; 27
    4b46:	fa 4f       	sbci	r31, 0xFA	; 250
    4b48:	80 81       	ld	r24, Z
    4b4a:	68 0f       	add	r22, r24
    4b4c:	60 83       	st	Z, r22
    4b4e:	64 30       	cpi	r22, 0x04	; 4
    4b50:	19 f4       	brne	.+6      	; 0x4b58 <nibbleChange+0x26c>
    4b52:	8f ef       	ldi	r24, 0xFF	; 255
    4b54:	80 83       	st	Z, r24
    4b56:	74 c0       	rjmp	.+232    	; 0x4c40 <nibbleChange+0x354>
    4b58:	6e 3f       	cpi	r22, 0xFE	; 254
    4b5a:	09 f0       	breq	.+2      	; 0x4b5e <nibbleChange+0x272>
    4b5c:	71 c0       	rjmp	.+226    	; 0x4c40 <nibbleChange+0x354>
    4b5e:	cb 51       	subi	r28, 0x1B	; 27
    4b60:	da 4f       	sbci	r29, 0xFA	; 250
    4b62:	83 e0       	ldi	r24, 0x03	; 3
    4b64:	88 83       	st	Y, r24
    4b66:	6c c0       	rjmp	.+216    	; 0x4c40 <nibbleChange+0x354>
    4b68:	d0 e0       	ldi	r29, 0x00	; 0
    4b6a:	fe 01       	movw	r30, r28
    4b6c:	eb 51       	subi	r30, 0x1B	; 27
    4b6e:	fa 4f       	sbci	r31, 0xFA	; 250
    4b70:	80 81       	ld	r24, Z
    4b72:	81 11       	cpse	r24, r1
    4b74:	05 c0       	rjmp	.+10     	; 0x4b80 <nibbleChange+0x294>
    4b76:	6f 3f       	cpi	r22, 0xFF	; 255
    4b78:	19 f4       	brne	.+6      	; 0x4b80 <nibbleChange+0x294>
    4b7a:	83 e0       	ldi	r24, 0x03	; 3
    4b7c:	80 83       	st	Z, r24
    4b7e:	60 c0       	rjmp	.+192    	; 0x4c40 <nibbleChange+0x354>
    4b80:	83 30       	cpi	r24, 0x03	; 3
    4b82:	31 f4       	brne	.+12     	; 0x4b90 <nibbleChange+0x2a4>
    4b84:	61 30       	cpi	r22, 0x01	; 1
    4b86:	21 f4       	brne	.+8      	; 0x4b90 <nibbleChange+0x2a4>
    4b88:	cb 51       	subi	r28, 0x1B	; 27
    4b8a:	da 4f       	sbci	r29, 0xFA	; 250
    4b8c:	18 82       	st	Y, r1
    4b8e:	58 c0       	rjmp	.+176    	; 0x4c40 <nibbleChange+0x354>
    4b90:	cb 51       	subi	r28, 0x1B	; 27
    4b92:	da 4f       	sbci	r29, 0xFA	; 250
    4b94:	68 0f       	add	r22, r24
    4b96:	68 83       	st	Y, r22
    4b98:	53 c0       	rjmp	.+166    	; 0x4c40 <nibbleChange+0x354>
    4b9a:	d0 e0       	ldi	r29, 0x00	; 0
    4b9c:	cb 51       	subi	r28, 0x1B	; 27
    4b9e:	da 4f       	sbci	r29, 0xFA	; 250
    4ba0:	88 81       	ld	r24, Y
    4ba2:	68 0f       	add	r22, r24
    4ba4:	63 70       	andi	r22, 0x03	; 3
    4ba6:	68 83       	st	Y, r22
    4ba8:	4b c0       	rjmp	.+150    	; 0x4c40 <nibbleChange+0x354>
    4baa:	e5 ee       	ldi	r30, 0xE5	; 229
    4bac:	f5 e0       	ldi	r31, 0x05	; 5
    4bae:	80 81       	ld	r24, Z
    4bb0:	80 95       	com	r24
    4bb2:	80 83       	st	Z, r24
    4bb4:	45 c0       	rjmp	.+138    	; 0x4c40 <nibbleChange+0x354>
    4bb6:	d0 e0       	ldi	r29, 0x00	; 0
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	61 fd       	sbrc	r22, 1
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	cb 51       	subi	r28, 0x1B	; 27
    4bc0:	da 4f       	sbci	r29, 0xFA	; 250
    4bc2:	88 83       	st	Y, r24
    4bc4:	3d c0       	rjmp	.+122    	; 0x4c40 <nibbleChange+0x354>
    4bc6:	61 30       	cpi	r22, 0x01	; 1
    4bc8:	41 f4       	brne	.+16     	; 0x4bda <nibbleChange+0x2ee>
    4bca:	d0 e0       	ldi	r29, 0x00	; 0
    4bcc:	cb 51       	subi	r28, 0x1B	; 27
    4bce:	da 4f       	sbci	r29, 0xFA	; 250
    4bd0:	88 81       	ld	r24, Y
    4bd2:	87 70       	andi	r24, 0x07	; 7
    4bd4:	8f 5f       	subi	r24, 0xFF	; 255
    4bd6:	88 83       	st	Y, r24
    4bd8:	33 c0       	rjmp	.+102    	; 0x4c40 <nibbleChange+0x354>
    4bda:	ec 2f       	mov	r30, r28
    4bdc:	f0 e0       	ldi	r31, 0x00	; 0
    4bde:	eb 51       	subi	r30, 0x1B	; 27
    4be0:	fa 4f       	sbci	r31, 0xFA	; 250
    4be2:	80 81       	ld	r24, Z
    4be4:	82 50       	subi	r24, 0x02	; 2
    4be6:	87 70       	andi	r24, 0x07	; 7
    4be8:	8f 5f       	subi	r24, 0xFF	; 255
    4bea:	80 83       	st	Z, r24
    4bec:	29 c0       	rjmp	.+82     	; 0x4c40 <nibbleChange+0x354>
    4bee:	e5 ee       	ldi	r30, 0xE5	; 229
    4bf0:	f5 e0       	ldi	r31, 0x05	; 5
    4bf2:	90 81       	ld	r25, Z
    4bf4:	81 81       	ldd	r24, Z+1	; 0x01
    4bf6:	99 0f       	add	r25, r25
    4bf8:	29 2f       	mov	r18, r25
    4bfa:	22 0f       	add	r18, r18
    4bfc:	22 0f       	add	r18, r18
    4bfe:	92 0f       	add	r25, r18
    4c00:	89 0f       	add	r24, r25
    4c02:	c1 11       	cpse	r28, r1
    4c04:	07 c0       	rjmp	.+14     	; 0x4c14 <nibbleChange+0x328>
    4c06:	66 0f       	add	r22, r22
    4c08:	96 2f       	mov	r25, r22
    4c0a:	99 0f       	add	r25, r25
    4c0c:	99 0f       	add	r25, r25
    4c0e:	69 0f       	add	r22, r25
    4c10:	68 0f       	add	r22, r24
    4c12:	01 c0       	rjmp	.+2      	; 0x4c16 <nibbleChange+0x32a>
    4c14:	68 0f       	add	r22, r24
    4c16:	66 23       	and	r22, r22
    4c18:	1c f0       	brlt	.+6      	; 0x4c20 <nibbleChange+0x334>
    4c1a:	61 34       	cpi	r22, 0x41	; 65
    4c1c:	1c f4       	brge	.+6      	; 0x4c24 <nibbleChange+0x338>
    4c1e:	03 c0       	rjmp	.+6      	; 0x4c26 <nibbleChange+0x33a>
    4c20:	60 e0       	ldi	r22, 0x00	; 0
    4c22:	01 c0       	rjmp	.+2      	; 0x4c26 <nibbleChange+0x33a>
    4c24:	60 e0       	ldi	r22, 0x00	; 0
    4c26:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <nibble>
    4c2a:	06 c0       	rjmp	.+12     	; 0x4c38 <nibbleChange+0x34c>
    4c2c:	e5 ee       	ldi	r30, 0xE5	; 229
    4c2e:	f5 e0       	ldi	r31, 0x05	; 5
    4c30:	80 81       	ld	r24, Z
    4c32:	8f 5f       	subi	r24, 0xFF	; 255
    4c34:	80 83       	st	Z, r24
    4c36:	6a 50       	subi	r22, 0x0A	; 10
    4c38:	6a 30       	cpi	r22, 0x0A	; 10
    4c3a:	c4 f7       	brge	.-16     	; 0x4c2c <nibbleChange+0x340>
    4c3c:	60 93 e6 05 	sts	0x05E6, r22	; 0x8005e6 <nibble+0x1>
    4c40:	df 91       	pop	r29
    4c42:	cf 91       	pop	r28
    4c44:	1f 91       	pop	r17
    4c46:	0f 91       	pop	r16
    4c48:	08 95       	ret

00004c4a <nibbleToData>:
    4c4a:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <dataType>
    4c4e:	8e 2f       	mov	r24, r30
    4c50:	90 e0       	ldi	r25, 0x00	; 0
    4c52:	fc 01       	movw	r30, r24
    4c54:	32 97       	sbiw	r30, 0x02	; 2
    4c56:	ed 30       	cpi	r30, 0x0D	; 13
    4c58:	f1 05       	cpc	r31, r1
    4c5a:	08 f0       	brcs	.+2      	; 0x4c5e <nibbleToData+0x14>
    4c5c:	da c0       	rjmp	.+436    	; 0x4e12 <nibbleToData+0x1c8>
    4c5e:	88 27       	eor	r24, r24
    4c60:	e7 56       	subi	r30, 0x67	; 103
    4c62:	ff 4f       	sbci	r31, 0xFF	; 255
    4c64:	8f 4f       	sbci	r24, 0xFF	; 255
    4c66:	0c 94 7f 3e 	jmp	0x7cfe	; 0x7cfe <__tablejump2__>
    4c6a:	e5 ee       	ldi	r30, 0xE5	; 229
    4c6c:	f5 e0       	ldi	r31, 0x05	; 5
    4c6e:	80 81       	ld	r24, Z
    4c70:	20 e1       	ldi	r18, 0x10	; 16
    4c72:	82 9f       	mul	r24, r18
    4c74:	c0 01       	movw	r24, r0
    4c76:	11 24       	eor	r1, r1
    4c78:	91 81       	ldd	r25, Z+1	; 0x01
    4c7a:	9f 70       	andi	r25, 0x0F	; 15
    4c7c:	89 2b       	or	r24, r25
    4c7e:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4c82:	08 95       	ret
    4c84:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <nibble>
    4c88:	8f ef       	ldi	r24, 0xFF	; 255
    4c8a:	89 0f       	add	r24, r25
    4c8c:	80 31       	cpi	r24, 0x10	; 16
    4c8e:	18 f0       	brcs	.+6      	; 0x4c96 <nibbleToData+0x4c>
    4c90:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <dataEntry>
    4c94:	08 95       	ret
    4c96:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4c9a:	08 95       	ret
    4c9c:	90 91 e5 05 	lds	r25, 0x05E5	; 0x8005e5 <nibble>
    4ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    4ca2:	21 f0       	breq	.+8      	; 0x4cac <nibbleToData+0x62>
    4ca4:	80 91 e6 05 	lds	r24, 0x05E6	; 0x8005e6 <nibble+0x1>
    4ca8:	8f 3f       	cpi	r24, 0xFF	; 255
    4caa:	21 f4       	brne	.+8      	; 0x4cb4 <nibbleToData+0x6a>
    4cac:	8f ef       	ldi	r24, 0xFF	; 255
    4cae:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4cb2:	08 95       	ret
    4cb4:	28 2f       	mov	r18, r24
    4cb6:	22 0f       	add	r18, r18
    4cb8:	82 0f       	add	r24, r18
    4cba:	88 0f       	add	r24, r24
    4cbc:	88 0f       	add	r24, r24
    4cbe:	89 0f       	add	r24, r25
    4cc0:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4cc4:	08 95       	ret
    4cc6:	e5 ee       	ldi	r30, 0xE5	; 229
    4cc8:	f5 e0       	ldi	r31, 0x05	; 5
    4cca:	80 81       	ld	r24, Z
    4ccc:	30 e2       	ldi	r19, 0x20	; 32
    4cce:	83 9f       	mul	r24, r19
    4cd0:	c0 01       	movw	r24, r0
    4cd2:	11 24       	eor	r1, r1
    4cd4:	21 81       	ldd	r18, Z+1	; 0x01
    4cd6:	32 81       	ldd	r19, Z+2	; 0x02
    4cd8:	22 0f       	add	r18, r18
    4cda:	42 2f       	mov	r20, r18
    4cdc:	44 0f       	add	r20, r20
    4cde:	44 0f       	add	r20, r20
    4ce0:	24 0f       	add	r18, r20
    4ce2:	23 0f       	add	r18, r19
    4ce4:	20 32       	cpi	r18, 0x20	; 32
    4ce6:	20 f0       	brcs	.+8      	; 0x4cf0 <nibbleToData+0xa6>
    4ce8:	8f 61       	ori	r24, 0x1F	; 31
    4cea:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4cee:	08 95       	ret
    4cf0:	82 2b       	or	r24, r18
    4cf2:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4cf6:	08 95       	ret
    4cf8:	e5 ee       	ldi	r30, 0xE5	; 229
    4cfa:	f5 e0       	ldi	r31, 0x05	; 5
    4cfc:	20 81       	ld	r18, Z
    4cfe:	81 81       	ldd	r24, Z+1	; 0x01
    4d00:	90 e0       	ldi	r25, 0x00	; 0
    4d02:	ac 01       	movw	r20, r24
    4d04:	44 0f       	add	r20, r20
    4d06:	55 1f       	adc	r21, r21
    4d08:	88 0f       	add	r24, r24
    4d0a:	99 1f       	adc	r25, r25
    4d0c:	88 0f       	add	r24, r24
    4d0e:	99 1f       	adc	r25, r25
    4d10:	88 0f       	add	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	84 0f       	add	r24, r20
    4d16:	95 1f       	adc	r25, r21
    4d18:	34 e6       	ldi	r19, 0x64	; 100
    4d1a:	23 9f       	mul	r18, r19
    4d1c:	80 0d       	add	r24, r0
    4d1e:	91 1d       	adc	r25, r1
    4d20:	11 24       	eor	r1, r1
    4d22:	22 81       	ldd	r18, Z+2	; 0x02
    4d24:	82 0f       	add	r24, r18
    4d26:	91 1d       	adc	r25, r1
    4d28:	8f 3f       	cpi	r24, 0xFF	; 255
    4d2a:	91 05       	cpc	r25, r1
    4d2c:	29 f0       	breq	.+10     	; 0x4d38 <nibbleToData+0xee>
    4d2e:	20 f0       	brcs	.+8      	; 0x4d38 <nibbleToData+0xee>
    4d30:	8f ef       	ldi	r24, 0xFF	; 255
    4d32:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4d36:	08 95       	ret
    4d38:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4d3c:	08 95       	ret
    4d3e:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    4d42:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4d46:	84 30       	cpi	r24, 0x04	; 4
    4d48:	08 f4       	brcc	.+2      	; 0x4d4c <nibbleToData+0x102>
    4d4a:	63 c0       	rjmp	.+198    	; 0x4e12 <nibbleToData+0x1c8>
    4d4c:	8f ef       	ldi	r24, 0xFF	; 255
    4d4e:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4d52:	08 95       	ret
    4d54:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    4d58:	83 70       	andi	r24, 0x03	; 3
    4d5a:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4d5e:	08 95       	ret
    4d60:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <nibble>
    4d64:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4d68:	08 95       	ret
    4d6a:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <dataEntry>
    4d6e:	80 e0       	ldi	r24, 0x00	; 0
    4d70:	0c c0       	rjmp	.+24     	; 0x4d8a <nibbleToData+0x140>
    4d72:	90 91 da 05 	lds	r25, 0x05DA	; 0x8005da <dataEntry>
    4d76:	99 0f       	add	r25, r25
    4d78:	e8 2f       	mov	r30, r24
    4d7a:	f0 e0       	ldi	r31, 0x00	; 0
    4d7c:	eb 51       	subi	r30, 0x1B	; 27
    4d7e:	fa 4f       	sbci	r31, 0xFA	; 250
    4d80:	20 81       	ld	r18, Z
    4d82:	92 0f       	add	r25, r18
    4d84:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <dataEntry>
    4d88:	8f 5f       	subi	r24, 0xFF	; 255
    4d8a:	88 30       	cpi	r24, 0x08	; 8
    4d8c:	90 f3       	brcs	.-28     	; 0x4d72 <nibbleToData+0x128>
    4d8e:	08 95       	ret
    4d90:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <dataEntry32>
    4d94:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <dataEntry32+0x1>
    4d98:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <dataEntry32+0x2>
    4d9c:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <dataEntry32+0x3>
    4da0:	a3 ec       	ldi	r26, 0xC3	; 195
    4da2:	b5 e0       	ldi	r27, 0x05	; 5
    4da4:	88 e0       	ldi	r24, 0x08	; 8
    4da6:	10 c0       	rjmp	.+32     	; 0x4dc8 <nibbleToData+0x17e>
    4da8:	82 50       	subi	r24, 0x02	; 2
    4daa:	f0 e0       	ldi	r31, 0x00	; 0
    4dac:	eb 51       	subi	r30, 0x1B	; 27
    4dae:	fa 4f       	sbci	r31, 0xFA	; 250
    4db0:	90 81       	ld	r25, Z
    4db2:	e8 2f       	mov	r30, r24
    4db4:	f0 e0       	ldi	r31, 0x00	; 0
    4db6:	eb 51       	subi	r30, 0x1B	; 27
    4db8:	fa 4f       	sbci	r31, 0xFA	; 250
    4dba:	20 81       	ld	r18, Z
    4dbc:	30 e1       	ldi	r19, 0x10	; 16
    4dbe:	23 9f       	mul	r18, r19
    4dc0:	90 0d       	add	r25, r0
    4dc2:	11 24       	eor	r1, r1
    4dc4:	9c 93       	st	X, r25
    4dc6:	11 96       	adiw	r26, 0x01	; 1
    4dc8:	ef ef       	ldi	r30, 0xFF	; 255
    4dca:	e8 0f       	add	r30, r24
    4dcc:	81 11       	cpse	r24, r1
    4dce:	ec cf       	rjmp	.-40     	; 0x4da8 <nibbleToData+0x15e>
    4dd0:	08 95       	ret
    4dd2:	e5 ee       	ldi	r30, 0xE5	; 229
    4dd4:	f5 e0       	ldi	r31, 0x05	; 5
    4dd6:	20 81       	ld	r18, Z
    4dd8:	91 81       	ldd	r25, Z+1	; 0x01
    4dda:	89 2f       	mov	r24, r25
    4ddc:	90 e0       	ldi	r25, 0x00	; 0
    4dde:	01 97       	sbiw	r24, 0x01	; 1
    4de0:	88 0f       	add	r24, r24
    4de2:	99 1f       	adc	r25, r25
    4de4:	88 0f       	add	r24, r24
    4de6:	99 1f       	adc	r25, r25
    4de8:	88 0f       	add	r24, r24
    4dea:	99 1f       	adc	r25, r25
    4dec:	9f ef       	ldi	r25, 0xFF	; 255
    4dee:	92 0f       	add	r25, r18
    4df0:	89 2b       	or	r24, r25
    4df2:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4df6:	08 95       	ret
    4df8:	e5 ee       	ldi	r30, 0xE5	; 229
    4dfa:	f5 e0       	ldi	r31, 0x05	; 5
    4dfc:	80 81       	ld	r24, Z
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	88 0f       	add	r24, r24
    4e02:	28 2f       	mov	r18, r24
    4e04:	22 0f       	add	r18, r18
    4e06:	22 0f       	add	r18, r18
    4e08:	82 0f       	add	r24, r18
    4e0a:	89 0f       	add	r24, r25
    4e0c:	81 50       	subi	r24, 0x01	; 1
    4e0e:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    4e12:	08 95       	ret

00004e14 <menuTextOut>:
    4e14:	0f 93       	push	r16
    4e16:	1f 93       	push	r17
    4e18:	cf 93       	push	r28
    4e1a:	df 93       	push	r29
    4e1c:	8c 01       	movw	r16, r24
    4e1e:	d6 2f       	mov	r29, r22
    4e20:	c0 e0       	ldi	r28, 0x00	; 0
    4e22:	0c c0       	rjmp	.+24     	; 0x4e3c <menuTextOut+0x28>
    4e24:	f8 01       	movw	r30, r16
    4e26:	84 91       	lpm	r24, Z
    4e28:	88 23       	and	r24, r24
    4e2a:	19 f0       	breq	.+6      	; 0x4e32 <menuTextOut+0x1e>
    4e2c:	0f 5f       	subi	r16, 0xFF	; 255
    4e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e30:	02 c0       	rjmp	.+4      	; 0x4e36 <menuTextOut+0x22>
    4e32:	8d 2f       	mov	r24, r29
    4e34:	d0 e2       	ldi	r29, 0x20	; 32
    4e36:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    4e3a:	cf 5f       	subi	r28, 0xFF	; 255
    4e3c:	ca 30       	cpi	r28, 0x0A	; 10
    4e3e:	90 f3       	brcs	.-28     	; 0x4e24 <menuTextOut+0x10>
    4e40:	df 91       	pop	r29
    4e42:	cf 91       	pop	r28
    4e44:	1f 91       	pop	r17
    4e46:	0f 91       	pop	r16
    4e48:	08 95       	ret

00004e4a <menuParentMenuToLCD>:
    4e4a:	80 e4       	ldi	r24, 0x40	; 64
    4e4c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4e50:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <menuStackIndex>
    4e54:	e1 11       	cpse	r30, r1
    4e56:	07 c0       	rjmp	.+14     	; 0x4e66 <menuParentMenuToLCD+0x1c>
    4e58:	6a e3       	ldi	r22, 0x3A	; 58
    4e5a:	80 91 bd 05 	lds	r24, 0x05BD	; 0x8005bd <pMenuTopTitle>
    4e5e:	90 91 be 05 	lds	r25, 0x05BE	; 0x8005be <pMenuTopTitle+0x1>
    4e62:	d8 cf       	rjmp	.-80     	; 0x4e14 <menuTextOut>
    4e64:	08 95       	ret
    4e66:	f0 e0       	ldi	r31, 0x00	; 0
    4e68:	31 97       	sbiw	r30, 0x01	; 1
    4e6a:	ee 0f       	add	r30, r30
    4e6c:	ff 1f       	adc	r31, r31
    4e6e:	e4 56       	subi	r30, 0x64	; 100
    4e70:	fa 4f       	sbci	r31, 0xFA	; 250
    4e72:	80 81       	ld	r24, Z
    4e74:	91 81       	ldd	r25, Z+1	; 0x01
    4e76:	6a e3       	ldi	r22, 0x3A	; 58
    4e78:	02 96       	adiw	r24, 0x02	; 2
    4e7a:	cc cf       	rjmp	.-104    	; 0x4e14 <menuTextOut>
    4e7c:	08 95       	ret

00004e7e <menuDisplayValue>:
    4e7e:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    4e82:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    4e86:	84 91       	lpm	r24, Z
    4e88:	8f 73       	andi	r24, 0x3F	; 63
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	02 97       	sbiw	r24, 0x02	; 2
    4e8e:	1c f0       	brlt	.+6      	; 0x4e96 <menuDisplayValue+0x18>
    4e90:	c8 da       	rcall	.-2672   	; 0x4422 <dataToNibbles>
    4e92:	ba db       	rcall	.-2188   	; 0x4608 <nibbleToLCDstring>
    4e94:	07 cd       	rjmp	.-1522   	; 0x48a4 <LCDStringOut>
    4e96:	08 95       	ret

00004e98 <menuCursorSetDataNibble>:
    4e98:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <pNibbleInfo>
    4e9c:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <pNibbleInfo+0x1>
    4ea0:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <nibbleIndex>
    4ea4:	e8 0f       	add	r30, r24
    4ea6:	f1 1d       	adc	r31, r1
    4ea8:	31 96       	adiw	r30, 0x01	; 1
    4eaa:	84 91       	lpm	r24, Z
    4eac:	82 5e       	subi	r24, 0xE2	; 226
    4eae:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    4eb2:	20 91 97 05 	lds	r18, 0x0597	; 0x800597 <nibbleIndex>
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <pNibbleInfo>
    4ebc:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <pNibbleInfo+0x1>
    4ec0:	84 91       	lpm	r24, Z
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	01 97       	sbiw	r24, 0x01	; 1
    4ec6:	28 17       	cp	r18, r24
    4ec8:	39 07       	cpc	r19, r25
    4eca:	14 f4       	brge	.+4      	; 0x4ed0 <menuCursorSetDataNibble+0x38>
    4ecc:	68 da       	rcall	.-2864   	; 0x439e <softkeyRight>
    4ece:	03 c0       	rjmp	.+6      	; 0x4ed6 <menuCursorSetDataNibble+0x3e>
    4ed0:	83 e0       	ldi	r24, 0x03	; 3
    4ed2:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    4ed6:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <nibbleIndex>
    4eda:	88 23       	and	r24, r24
    4edc:	11 f0       	breq	.+4      	; 0x4ee2 <menuCursorSetDataNibble+0x4a>
    4ede:	59 da       	rcall	.-2894   	; 0x4392 <softkeyLeft>
    4ee0:	03 c0       	rjmp	.+6      	; 0x4ee8 <menuCursorSetDataNibble+0x50>
    4ee2:	82 e0       	ldi	r24, 0x02	; 2
    4ee4:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    4ee8:	78 da       	rcall	.-2832   	; 0x43da <softkeyPlus>
    4eea:	89 da       	rcall	.-2798   	; 0x43fe <softkeyMinus>
    4eec:	0c 94 1c 3e 	jmp	0x7c38	; 0x7c38 <keylabel_toLCD>
    4ef0:	08 95       	ret

00004ef2 <menuCursorSetExtra>:
    4ef2:	84 e1       	ldi	r24, 0x14	; 20
    4ef4:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <lcd_goto>
    4ef8:	08 95       	ret

00004efa <menuOnEnterStatusMidiIn>:
    4efa:	0f 93       	push	r16
    4efc:	1f 93       	push	r17
    4efe:	cf 93       	push	r28
    4f00:	f8 df       	rcall	.-16     	; 0x4ef2 <menuCursorSetExtra>
    4f02:	8b ed       	ldi	r24, 0xDB	; 219
    4f04:	93 e0       	ldi	r25, 0x03	; 3
    4f06:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    4f0a:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <midiRxBytesCount>
    4f0e:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <midiRxBytesCount+0x1>
    4f12:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <lcd_wordout>
    4f16:	8d e2       	ldi	r24, 0x2D	; 45
    4f18:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    4f1c:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <midiRxBytesCount>
    4f20:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <midiRxBytesCount+0x1>
    4f24:	04 97       	sbiw	r24, 0x04	; 4
    4f26:	30 f4       	brcc	.+12     	; 0x4f34 <menuOnEnterStatusMidiIn+0x3a>
    4f28:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <midiRxBytesCount>
    4f2c:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <midiRxBytesCount+0x1>
    4f30:	c8 2f       	mov	r28, r24
    4f32:	01 c0       	rjmp	.+2      	; 0x4f36 <menuOnEnterStatusMidiIn+0x3c>
    4f34:	c4 e0       	ldi	r28, 0x04	; 4
    4f36:	00 91 65 16 	lds	r16, 0x1665	; 0x801665 <midiRxInIndex>
    4f3a:	10 e0       	ldi	r17, 0x00	; 0
    4f3c:	0f 59       	subi	r16, 0x9F	; 159
    4f3e:	1b 4e       	sbci	r17, 0xEB	; 235
    4f40:	13 c0       	rjmp	.+38     	; 0x4f68 <menuOnEnterStatusMidiIn+0x6e>
    4f42:	84 e1       	ldi	r24, 0x14	; 20
    4f44:	02 36       	cpi	r16, 0x62	; 98
    4f46:	18 07       	cpc	r17, r24
    4f48:	10 f0       	brcs	.+4      	; 0x4f4e <menuOnEnterStatusMidiIn+0x54>
    4f4a:	f8 01       	movw	r30, r16
    4f4c:	02 c0       	rjmp	.+4      	; 0x4f52 <menuOnEnterStatusMidiIn+0x58>
    4f4e:	e1 e6       	ldi	r30, 0x61	; 97
    4f50:	f5 e1       	ldi	r31, 0x15	; 21
    4f52:	8f 01       	movw	r16, r30
    4f54:	01 50       	subi	r16, 0x01	; 1
    4f56:	11 09       	sbc	r17, r1
    4f58:	80 81       	ld	r24, Z
    4f5a:	0e 94 55 3b 	call	0x76aa	; 0x76aa <lcd_hexout>
    4f5e:	c1 50       	subi	r28, 0x01	; 1
    4f60:	19 f0       	breq	.+6      	; 0x4f68 <menuOnEnterStatusMidiIn+0x6e>
    4f62:	80 e2       	ldi	r24, 0x20	; 32
    4f64:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    4f68:	c1 11       	cpse	r28, r1
    4f6a:	eb cf       	rjmp	.-42     	; 0x4f42 <menuOnEnterStatusMidiIn+0x48>
    4f6c:	80 e0       	ldi	r24, 0x00	; 0
    4f6e:	cf 91       	pop	r28
    4f70:	1f 91       	pop	r17
    4f72:	0f 91       	pop	r16
    4f74:	08 95       	ret

00004f76 <menuOnEnterStatusMidiOut>:
    4f76:	0f 93       	push	r16
    4f78:	1f 93       	push	r17
    4f7a:	cf 93       	push	r28
    4f7c:	ba df       	rcall	.-140    	; 0x4ef2 <menuCursorSetExtra>
    4f7e:	86 ed       	ldi	r24, 0xD6	; 214
    4f80:	93 e0       	ldi	r25, 0x03	; 3
    4f82:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    4f86:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <midiTxBytesCount>
    4f8a:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <midiTxBytesCount+0x1>
    4f8e:	0e 94 05 3d 	call	0x7a0a	; 0x7a0a <lcd_wordout>
    4f92:	8d e2       	ldi	r24, 0x2D	; 45
    4f94:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    4f98:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <midiTxBytesCount>
    4f9c:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <midiTxBytesCount+0x1>
    4fa0:	04 97       	sbiw	r24, 0x04	; 4
    4fa2:	30 f4       	brcc	.+12     	; 0x4fb0 <menuOnEnterStatusMidiOut+0x3a>
    4fa4:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <midiTxBytesCount>
    4fa8:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <midiTxBytesCount+0x1>
    4fac:	c8 2f       	mov	r28, r24
    4fae:	01 c0       	rjmp	.+2      	; 0x4fb2 <menuOnEnterStatusMidiOut+0x3c>
    4fb0:	c4 e0       	ldi	r28, 0x04	; 4
    4fb2:	00 91 10 14 	lds	r16, 0x1410	; 0x801410 <midiTxInIndex>
    4fb6:	10 e0       	ldi	r17, 0x00	; 0
    4fb8:	0e 59       	subi	r16, 0x9E	; 158
    4fba:	1a 4e       	sbci	r17, 0xEA	; 234
    4fbc:	13 c0       	rjmp	.+38     	; 0x4fe4 <menuOnEnterStatusMidiOut+0x6e>
    4fbe:	85 e1       	ldi	r24, 0x15	; 21
    4fc0:	03 36       	cpi	r16, 0x63	; 99
    4fc2:	18 07       	cpc	r17, r24
    4fc4:	10 f0       	brcs	.+4      	; 0x4fca <menuOnEnterStatusMidiOut+0x54>
    4fc6:	f8 01       	movw	r30, r16
    4fc8:	02 c0       	rjmp	.+4      	; 0x4fce <menuOnEnterStatusMidiOut+0x58>
    4fca:	e2 e6       	ldi	r30, 0x62	; 98
    4fcc:	f6 e1       	ldi	r31, 0x16	; 22
    4fce:	8f 01       	movw	r16, r30
    4fd0:	01 50       	subi	r16, 0x01	; 1
    4fd2:	11 09       	sbc	r17, r1
    4fd4:	80 81       	ld	r24, Z
    4fd6:	0e 94 55 3b 	call	0x76aa	; 0x76aa <lcd_hexout>
    4fda:	c1 50       	subi	r28, 0x01	; 1
    4fdc:	19 f0       	breq	.+6      	; 0x4fe4 <menuOnEnterStatusMidiOut+0x6e>
    4fde:	80 e2       	ldi	r24, 0x20	; 32
    4fe0:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    4fe4:	c1 11       	cpse	r28, r1
    4fe6:	eb cf       	rjmp	.-42     	; 0x4fbe <menuOnEnterStatusMidiOut+0x48>
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	cf 91       	pop	r28
    4fec:	1f 91       	pop	r17
    4fee:	0f 91       	pop	r16
    4ff0:	08 95       	ret

00004ff2 <menuOnEnterLogDisp>:
    4ff2:	0f 93       	push	r16
    4ff4:	1f 93       	push	r17
    4ff6:	cf 93       	push	r28
    4ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    4ffa:	a9 f4       	brne	.+42     	; 0x5026 <menuOnEnterLogDisp+0x34>
    4ffc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <log_count>
    5000:	81 50       	subi	r24, 0x01	; 1
    5002:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <logEntryNr.3091>
    5006:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <showText.3092>
    500a:	6a ec       	ldi	r22, 0xCA	; 202
    500c:	73 e1       	ldi	r23, 0x13	; 19
    500e:	80 e0       	ldi	r24, 0x00	; 0
    5010:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    5014:	64 ec       	ldi	r22, 0xC4	; 196
    5016:	73 e1       	ldi	r23, 0x13	; 19
    5018:	81 e0       	ldi	r24, 0x01	; 1
    501a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    501e:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
    5022:	cf ef       	ldi	r28, 0xFF	; 255
    5024:	2f c0       	rjmp	.+94     	; 0x5084 <menuOnEnterLogDisp+0x92>
    5026:	84 30       	cpi	r24, 0x04	; 4
    5028:	49 f4       	brne	.+18     	; 0x503c <menuOnEnterLogDisp+0x4a>
    502a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <logEntryNr.3091>
    502e:	88 23       	and	r24, r24
    5030:	21 f1       	breq	.+72     	; 0x507a <menuOnEnterLogDisp+0x88>
    5032:	81 50       	subi	r24, 0x01	; 1
    5034:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <logEntryNr.3091>
    5038:	cf ef       	ldi	r28, 0xFF	; 255
    503a:	24 c0       	rjmp	.+72     	; 0x5084 <menuOnEnterLogDisp+0x92>
    503c:	81 30       	cpi	r24, 0x01	; 1
    503e:	91 f4       	brne	.+36     	; 0x5064 <menuOnEnterLogDisp+0x72>
    5040:	00 91 2b 02 	lds	r16, 0x022B	; 0x80022b <logEntryNr.3091>
    5044:	10 e0       	ldi	r17, 0x00	; 0
    5046:	0f 5f       	subi	r16, 0xFF	; 255
    5048:	1f 4f       	sbci	r17, 0xFF	; 255
    504a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <log_count>
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	08 17       	cp	r16, r24
    5052:	19 07       	cpc	r17, r25
    5054:	a4 f4       	brge	.+40     	; 0x507e <menuOnEnterLogDisp+0x8c>
    5056:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <logEntryNr.3091>
    505a:	8f 5f       	subi	r24, 0xFF	; 255
    505c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <logEntryNr.3091>
    5060:	cf ef       	ldi	r28, 0xFF	; 255
    5062:	10 c0       	rjmp	.+32     	; 0x5084 <menuOnEnterLogDisp+0x92>
    5064:	83 30       	cpi	r24, 0x03	; 3
    5066:	11 f0       	breq	.+4      	; 0x506c <menuOnEnterLogDisp+0x7a>
    5068:	85 30       	cpi	r24, 0x05	; 5
    506a:	59 f4       	brne	.+22     	; 0x5082 <menuOnEnterLogDisp+0x90>
    506c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <showText.3092>
    5070:	80 95       	com	r24
    5072:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <showText.3092>
    5076:	cf ef       	ldi	r28, 0xFF	; 255
    5078:	05 c0       	rjmp	.+10     	; 0x5084 <menuOnEnterLogDisp+0x92>
    507a:	cf ef       	ldi	r28, 0xFF	; 255
    507c:	03 c0       	rjmp	.+6      	; 0x5084 <menuOnEnterLogDisp+0x92>
    507e:	cf ef       	ldi	r28, 0xFF	; 255
    5080:	01 c0       	rjmp	.+2      	; 0x5084 <menuOnEnterLogDisp+0x92>
    5082:	c0 e0       	ldi	r28, 0x00	; 0
    5084:	cf 3f       	cpi	r28, 0xFF	; 255
    5086:	09 f0       	breq	.+2      	; 0x508a <menuOnEnterLogDisp+0x98>
    5088:	54 c0       	rjmp	.+168    	; 0x5132 <menuOnEnterLogDisp+0x140>
    508a:	33 df       	rcall	.-410    	; 0x4ef2 <menuCursorSetExtra>
    508c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <log_count>
    5090:	81 11       	cpse	r24, r1
    5092:	06 c0       	rjmp	.+12     	; 0x50a0 <menuOnEnterLogDisp+0xae>
    5094:	89 e9       	ldi	r24, 0x99	; 153
    5096:	93 e0       	ldi	r25, 0x03	; 3
    5098:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    509c:	c0 e0       	ldi	r28, 0x00	; 0
    509e:	1d c0       	rjmp	.+58     	; 0x50da <menuOnEnterLogDisp+0xe8>
    50a0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <logEntryNr.3091>
    50a4:	8f 5f       	subi	r24, 0xFF	; 255
    50a6:	0e 94 91 3b 	call	0x7722	; 0x7722 <lcd_dec2out>
    50aa:	8a e3       	ldi	r24, 0x3A	; 58
    50ac:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    50b0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <showText.3092>
    50b4:	81 11       	cpse	r24, r1
    50b6:	08 c0       	rjmp	.+16     	; 0x50c8 <menuOnEnterLogDisp+0xd6>
    50b8:	60 e2       	ldi	r22, 0x20	; 32
    50ba:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <logEntryNr.3091>
    50be:	0e 94 f5 16 	call	0x2dea	; 0x2dea <log_getShortTextFromIndex>
    50c2:	0e 94 60 14 	call	0x28c0	; 0x28c0 <lcd_puts>
    50c6:	06 c0       	rjmp	.+12     	; 0x50d4 <menuOnEnterLogDisp+0xe2>
    50c8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <logEntryNr.3091>
    50cc:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <log_getErrorText>
    50d0:	0e 94 70 14 	call	0x28e0	; 0x28e0 <lcd_puts_P>
    50d4:	0e 94 8d 3d 	call	0x7b1a	; 0x7b1a <lcd_clrEol>
    50d8:	0c df       	rcall	.-488    	; 0x4ef2 <menuCursorSetExtra>
    50da:	61 e0       	ldi	r22, 0x01	; 1
    50dc:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <showText.3092>
    50e0:	8f 3f       	cpi	r24, 0xFF	; 255
    50e2:	09 f0       	breq	.+2      	; 0x50e6 <menuOnEnterLogDisp+0xf4>
    50e4:	60 e0       	ldi	r22, 0x00	; 0
    50e6:	81 e0       	ldi	r24, 0x01	; 1
    50e8:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <keylabel_statcheck>
    50ec:	00 91 2b 02 	lds	r16, 0x022B	; 0x80022b <logEntryNr.3091>
    50f0:	10 e0       	ldi	r17, 0x00	; 0
    50f2:	0f 5f       	subi	r16, 0xFF	; 255
    50f4:	1f 4f       	sbci	r17, 0xFF	; 255
    50f6:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <log_count>
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	08 17       	cp	r16, r24
    50fe:	19 07       	cpc	r17, r25
    5100:	34 f4       	brge	.+12     	; 0x510e <menuOnEnterLogDisp+0x11c>
    5102:	64 ee       	ldi	r22, 0xE4	; 228
    5104:	73 e1       	ldi	r23, 0x13	; 19
    5106:	83 e0       	ldi	r24, 0x03	; 3
    5108:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    510c:	03 c0       	rjmp	.+6      	; 0x5114 <menuOnEnterLogDisp+0x122>
    510e:	83 e0       	ldi	r24, 0x03	; 3
    5110:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    5114:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <logEntryNr.3091>
    5118:	88 23       	and	r24, r24
    511a:	31 f0       	breq	.+12     	; 0x5128 <menuOnEnterLogDisp+0x136>
    511c:	62 ee       	ldi	r22, 0xE2	; 226
    511e:	73 e1       	ldi	r23, 0x13	; 19
    5120:	82 e0       	ldi	r24, 0x02	; 2
    5122:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
    5126:	03 c0       	rjmp	.+6      	; 0x512e <menuOnEnterLogDisp+0x13c>
    5128:	82 e0       	ldi	r24, 0x02	; 2
    512a:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    512e:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
    5132:	8c 2f       	mov	r24, r28
    5134:	cf 91       	pop	r28
    5136:	1f 91       	pop	r17
    5138:	0f 91       	pop	r16
    513a:	08 95       	ret

0000513c <menuCursorSetMenu>:
    513c:	8a e4       	ldi	r24, 0x4A	; 74
    513e:	0c 94 f5 13 	jmp	0x27ea	; 0x27ea <lcd_goto>
    5142:	08 95       	ret

00005144 <menu_OnEnterMidiPanic>:
    5144:	88 eb       	ldi	r24, 0xB8	; 184
    5146:	93 e0       	ldi	r25, 0x03	; 3
    5148:	0e 94 c6 14 	call	0x298c	; 0x298c <lcd_message_P>
    514c:	0e 94 36 37 	call	0x6e6c	; 0x6e6c <midiSendAllNotesOff>
    5150:	f5 df       	rcall	.-22     	; 0x513c <menuCursorSetMenu>
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	08 95       	ret

00005156 <menuClearExtraDisp>:
    5156:	cd de       	rcall	.-614    	; 0x4ef2 <menuCursorSetExtra>
    5158:	8a e0       	ldi	r24, 0x0A	; 10
    515a:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <lcd_blank>
    515e:	08 95       	ret

00005160 <menu_ClearDataDisp>:
    5160:	8e e1       	ldi	r24, 0x1E	; 30
    5162:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    5166:	8a e0       	ldi	r24, 0x0A	; 10
    5168:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <lcd_blank>
    516c:	08 95       	ret

0000516e <menu_ModuleTestExecute>:
    516e:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <menu_TestModuleBitCounter>
    5172:	8f 3f       	cpi	r24, 0xFF	; 255
    5174:	11 f0       	breq	.+4      	; 0x517a <menu_ModuleTestExecute+0xc>
    5176:	8d 3f       	cpi	r24, 0xFD	; 253
    5178:	79 f5       	brne	.+94     	; 0x51d8 <menu_ModuleTestExecute+0x6a>
    517a:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <lcd_cursoroff>
    517e:	f0 df       	rcall	.-32     	; 0x5160 <menu_ClearDataDisp>
    5180:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <msgPipe_Handling>
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	e9 e6       	ldi	r30, 0x69	; 105
    5188:	f2 e0       	ldi	r31, 0x02	; 2
    518a:	07 c0       	rjmp	.+14     	; 0x519a <menu_ModuleTestExecute+0x2c>
    518c:	21 81       	ldd	r18, Z+1	; 0x01
    518e:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <menu_TestModulePattern>
    5192:	82 2b       	or	r24, r18
    5194:	81 83       	std	Z+1, r24	; 0x01
    5196:	38 96       	adiw	r30, 0x08	; 8
    5198:	9f 5f       	subi	r25, 0xFF	; 255
    519a:	90 32       	cpi	r25, 0x20	; 32
    519c:	b8 f3       	brcs	.-18     	; 0x518c <menu_ModuleTestExecute+0x1e>
    519e:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <menu_TestModuleBitCounter>
    51a2:	8f 3f       	cpi	r24, 0xFF	; 255
    51a4:	19 f4       	brne	.+6      	; 0x51ac <menu_ModuleTestExecute+0x3e>
    51a6:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <menu_TestModuleBitCounter>
    51aa:	5c c0       	rjmp	.+184    	; 0x5264 <menu_ModuleTestExecute+0xf6>
    51ac:	82 eb       	ldi	r24, 0xB2	; 178
    51ae:	93 e0       	ldi	r25, 0x03	; 3
    51b0:	0e 94 c6 14 	call	0x298c	; 0x298c <lcd_message_P>
    51b4:	8e ef       	ldi	r24, 0xFE	; 254
    51b6:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <menu_TestModuleBitCounter>
    51ba:	9f b7       	in	r25, 0x3f	; 63
    51bc:	f8 94       	cli
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	06 c0       	rjmp	.+12     	; 0x51ce <menu_ModuleTestExecute+0x60>
    51c2:	ef e4       	ldi	r30, 0x4F	; 79
    51c4:	f2 e0       	ldi	r31, 0x02	; 2
    51c6:	82 e0       	ldi	r24, 0x02	; 2
    51c8:	84 87       	std	Z+12, r24	; 0x0c
    51ca:	85 87       	std	Z+13, r24	; 0x0d
    51cc:	80 e0       	ldi	r24, 0x00	; 0
    51ce:	81 11       	cpse	r24, r1
    51d0:	f8 cf       	rjmp	.-16     	; 0x51c2 <menu_ModuleTestExecute+0x54>
    51d2:	9f bf       	out	0x3f, r25	; 63
    51d4:	b3 df       	rcall	.-154    	; 0x513c <menuCursorSetMenu>
    51d6:	46 c0       	rjmp	.+140    	; 0x5264 <menu_ModuleTestExecute+0xf6>
    51d8:	8e 3f       	cpi	r24, 0xFE	; 254
    51da:	41 f4       	brne	.+16     	; 0x51ec <menu_ModuleTestExecute+0x7e>
    51dc:	8f ef       	ldi	r24, 0xFF	; 255
    51de:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <msgPipe_Handling>
    51e2:	10 92 e3 05 	sts	0x05E3, r1	; 0x8005e3 <menu_TestModulePattern>
    51e6:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <lcd_cursosblink>
    51ea:	3c c0       	rjmp	.+120    	; 0x5264 <menu_ModuleTestExecute+0xf6>
    51ec:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <menu_TestModuleErrorList>
    51f0:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <menu_TestModuleErrorList+0x1>
    51f4:	60 91 8c 05 	lds	r22, 0x058C	; 0x80058c <menu_TestModuleErrorList+0x2>
    51f8:	70 91 8d 05 	lds	r23, 0x058D	; 0x80058d <menu_TestModuleErrorList+0x3>
    51fc:	76 95       	lsr	r23
    51fe:	67 95       	ror	r22
    5200:	57 95       	ror	r21
    5202:	47 95       	ror	r20
    5204:	40 93 8a 05 	sts	0x058A, r20	; 0x80058a <menu_TestModuleErrorList>
    5208:	50 93 8b 05 	sts	0x058B, r21	; 0x80058b <menu_TestModuleErrorList+0x1>
    520c:	60 93 8c 05 	sts	0x058C, r22	; 0x80058c <menu_TestModuleErrorList+0x2>
    5210:	70 93 8d 05 	sts	0x058D, r23	; 0x80058d <menu_TestModuleErrorList+0x3>
    5214:	e8 2f       	mov	r30, r24
    5216:	f0 e0       	ldi	r31, 0x00	; 0
    5218:	df 01       	movw	r26, r30
    521a:	aa 0f       	add	r26, r26
    521c:	bb 1f       	adc	r27, r27
    521e:	aa 0f       	add	r26, r26
    5220:	bb 1f       	adc	r27, r27
    5222:	aa 0f       	add	r26, r26
    5224:	bb 1f       	adc	r27, r27
    5226:	a7 59       	subi	r26, 0x97	; 151
    5228:	bd 4f       	sbci	r27, 0xFD	; 253
    522a:	16 96       	adiw	r26, 0x06	; 6
    522c:	2c 91       	ld	r18, X
    522e:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <menu_TestModulePattern>
    5232:	29 23       	and	r18, r25
    5234:	49 f4       	brne	.+18     	; 0x5248 <menu_ModuleTestExecute+0xda>
    5236:	70 68       	ori	r23, 0x80	; 128
    5238:	40 93 8a 05 	sts	0x058A, r20	; 0x80058a <menu_TestModuleErrorList>
    523c:	50 93 8b 05 	sts	0x058B, r21	; 0x80058b <menu_TestModuleErrorList+0x1>
    5240:	60 93 8c 05 	sts	0x058C, r22	; 0x80058c <menu_TestModuleErrorList+0x2>
    5244:	70 93 8d 05 	sts	0x058D, r23	; 0x80058d <menu_TestModuleErrorList+0x3>
    5248:	ee 0f       	add	r30, r30
    524a:	ff 1f       	adc	r31, r31
    524c:	ee 0f       	add	r30, r30
    524e:	ff 1f       	adc	r31, r31
    5250:	ee 0f       	add	r30, r30
    5252:	ff 1f       	adc	r31, r31
    5254:	e7 59       	subi	r30, 0x97	; 151
    5256:	fd 4f       	sbci	r31, 0xFD	; 253
    5258:	21 81       	ldd	r18, Z+1	; 0x01
    525a:	92 2b       	or	r25, r18
    525c:	91 83       	std	Z+1, r25	; 0x01
    525e:	8f 5f       	subi	r24, 0xFF	; 255
    5260:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <menu_TestModuleBitCounter>
    5264:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <menu_TestModuleBitCounter>
    5268:	e0 32       	cpi	r30, 0x20	; 32
    526a:	28 f5       	brcc	.+74     	; 0x52b6 <menu_ModuleTestExecute+0x148>
    526c:	f0 e0       	ldi	r31, 0x00	; 0
    526e:	ee 0f       	add	r30, r30
    5270:	ff 1f       	adc	r31, r31
    5272:	ee 0f       	add	r30, r30
    5274:	ff 1f       	adc	r31, r31
    5276:	ee 0f       	add	r30, r30
    5278:	ff 1f       	adc	r31, r31
    527a:	e7 59       	subi	r30, 0x97	; 151
    527c:	fd 4f       	sbci	r31, 0xFD	; 253
    527e:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <menu_TestModulePattern>
    5282:	98 2f       	mov	r25, r24
    5284:	90 95       	com	r25
    5286:	81 81       	ldd	r24, Z+1	; 0x01
    5288:	89 23       	and	r24, r25
    528a:	81 83       	std	Z+1, r24	; 0x01
    528c:	8e e1       	ldi	r24, 0x1E	; 30
    528e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    5292:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <menu_TestModuleBitCounter>
    5296:	0e 94 91 3b 	call	0x7722	; 0x7722 <lcd_dec2out>
    529a:	9f b7       	in	r25, 0x3f	; 63
    529c:	f8 94       	cli
    529e:	81 e0       	ldi	r24, 0x01	; 1
    52a0:	06 c0       	rjmp	.+12     	; 0x52ae <menu_ModuleTestExecute+0x140>
    52a2:	ef e4       	ldi	r30, 0x4F	; 79
    52a4:	f2 e0       	ldi	r31, 0x02	; 2
    52a6:	88 e0       	ldi	r24, 0x08	; 8
    52a8:	84 87       	std	Z+12, r24	; 0x0c
    52aa:	15 86       	std	Z+13, r1	; 0x0d
    52ac:	80 e0       	ldi	r24, 0x00	; 0
    52ae:	81 11       	cpse	r24, r1
    52b0:	f8 cf       	rjmp	.-16     	; 0x52a2 <menu_ModuleTestExecute+0x134>
    52b2:	9f bf       	out	0x3f, r25	; 63
    52b4:	08 95       	ret
    52b6:	e0 32       	cpi	r30, 0x20	; 32
    52b8:	09 f0       	breq	.+2      	; 0x52bc <menu_ModuleTestExecute+0x14e>
    52ba:	41 c0       	rjmp	.+130    	; 0x533e <menu_ModuleTestExecute+0x1d0>
    52bc:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <menu_TestModuleErrorList>
    52c0:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <menu_TestModuleErrorList+0x1>
    52c4:	a0 91 8c 05 	lds	r26, 0x058C	; 0x80058c <menu_TestModuleErrorList+0x2>
    52c8:	b0 91 8d 05 	lds	r27, 0x058D	; 0x80058d <menu_TestModuleErrorList+0x3>
    52cc:	00 97       	sbiw	r24, 0x00	; 0
    52ce:	a1 05       	cpc	r26, r1
    52d0:	b1 05       	cpc	r27, r1
    52d2:	29 f4       	brne	.+10     	; 0x52de <menu_ModuleTestExecute+0x170>
    52d4:	8e ea       	ldi	r24, 0xAE	; 174
    52d6:	93 e0       	ldi	r25, 0x03	; 3
    52d8:	0e 94 c6 14 	call	0x298c	; 0x298c <lcd_message_P>
    52dc:	1f c0       	rjmp	.+62     	; 0x531c <menu_ModuleTestExecute+0x1ae>
    52de:	80 93 fe 18 	sts	0x18FE, r24	; 0x8018fe <editLong>
    52e2:	90 93 ff 18 	sts	0x18FF, r25	; 0x8018ff <editLong+0x1>
    52e6:	a0 93 00 19 	sts	0x1900, r26	; 0x801900 <editLong+0x2>
    52ea:	b0 93 01 19 	sts	0x1901, r27	; 0x801901 <editLong+0x3>
    52ee:	62 e0       	ldi	r22, 0x02	; 2
    52f0:	79 e1       	ldi	r23, 0x19	; 25
    52f2:	8b ea       	ldi	r24, 0xAB	; 171
    52f4:	93 e0       	ldi	r25, 0x03	; 3
    52f6:	0e 94 df 3c 	call	0x79be	; 0x79be <putString_P>
    52fa:	ac 01       	movw	r20, r24
    52fc:	60 91 8a 05 	lds	r22, 0x058A	; 0x80058a <menu_TestModuleErrorList>
    5300:	70 91 8b 05 	lds	r23, 0x058B	; 0x80058b <menu_TestModuleErrorList+0x1>
    5304:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <menu_TestModuleErrorList+0x2>
    5308:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <menu_TestModuleErrorList+0x3>
    530c:	0e 94 46 3c 	call	0x788c	; 0x788c <putChar_long>
    5310:	fc 01       	movw	r30, r24
    5312:	10 82       	st	Z, r1
    5314:	82 e0       	ldi	r24, 0x02	; 2
    5316:	99 e1       	ldi	r25, 0x19	; 25
    5318:	0e 94 80 14 	call	0x2900	; 0x2900 <lcd_message>
    531c:	8e ef       	ldi	r24, 0xFE	; 254
    531e:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <menu_TestModuleBitCounter>
    5322:	9f b7       	in	r25, 0x3f	; 63
    5324:	f8 94       	cli
    5326:	81 e0       	ldi	r24, 0x01	; 1
    5328:	06 c0       	rjmp	.+12     	; 0x5336 <menu_ModuleTestExecute+0x1c8>
    532a:	ef e4       	ldi	r30, 0x4F	; 79
    532c:	f2 e0       	ldi	r31, 0x02	; 2
    532e:	82 e0       	ldi	r24, 0x02	; 2
    5330:	84 87       	std	Z+12, r24	; 0x0c
    5332:	85 87       	std	Z+13, r24	; 0x0d
    5334:	80 e0       	ldi	r24, 0x00	; 0
    5336:	81 11       	cpse	r24, r1
    5338:	f8 cf       	rjmp	.-16     	; 0x532a <menu_ModuleTestExecute+0x1bc>
    533a:	9f bf       	out	0x3f, r25	; 63
    533c:	ff ce       	rjmp	.-514    	; 0x513c <menuCursorSetMenu>
    533e:	08 95       	ret

00005340 <menu_ModuleTestPattern>:
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	00 90 99 05 	lds	r0, 0x0599	; 0x800599 <menuVmodule>
    5348:	02 c0       	rjmp	.+4      	; 0x534e <menu_ModuleTestPattern+0xe>
    534a:	88 0f       	add	r24, r24
    534c:	99 1f       	adc	r25, r25
    534e:	0a 94       	dec	r0
    5350:	e2 f7       	brpl	.-8      	; 0x534a <menu_ModuleTestPattern+0xa>
    5352:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <menu_TestModulePattern>
    5356:	8f ef       	ldi	r24, 0xFF	; 255
    5358:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <menu_TestModuleBitCounter>
    535c:	10 92 8a 05 	sts	0x058A, r1	; 0x80058a <menu_TestModuleErrorList>
    5360:	10 92 8b 05 	sts	0x058B, r1	; 0x80058b <menu_TestModuleErrorList+0x1>
    5364:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <menu_TestModuleErrorList+0x2>
    5368:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <menu_TestModuleErrorList+0x3>
    536c:	00 df       	rcall	.-512    	; 0x516e <menu_ModuleTestExecute>
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	08 95       	ret

00005372 <menuClearMenuDisp>:
    5372:	80 e4       	ldi	r24, 0x40	; 64
    5374:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    5378:	8a e0       	ldi	r24, 0x0A	; 10
    537a:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <lcd_blank>
    537e:	de de       	rcall	.-580    	; 0x513c <menuCursorSetMenu>
    5380:	8a e0       	ldi	r24, 0x0A	; 10
    5382:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <lcd_blank>
    5386:	08 95       	ret

00005388 <menu_ClearAllDisp>:
    5388:	f4 df       	rcall	.-24     	; 0x5372 <menuClearMenuDisp>
    538a:	ea de       	rcall	.-556    	; 0x5160 <menu_ClearDataDisp>
    538c:	e4 ce       	rjmp	.-568    	; 0x5156 <menuClearExtraDisp>
    538e:	08 95       	ret

00005390 <menuCheckArrowDown>:
    5390:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    5394:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    5398:	84 91       	lpm	r24, Z
    539a:	8f 73       	andi	r24, 0x3F	; 63
    539c:	81 30       	cpi	r24, 0x01	; 1
    539e:	11 f4       	brne	.+4      	; 0x53a4 <menuCheckArrowDown+0x14>
    53a0:	04 c8       	rjmp	.-4088   	; 0x43aa <softkeyDown>
    53a2:	08 95       	ret
    53a4:	3e 96       	adiw	r30, 0x0e	; 14
    53a6:	05 90       	lpm	r0, Z+
    53a8:	f4 91       	lpm	r31, Z
    53aa:	e0 2d       	mov	r30, r0
    53ac:	30 97       	sbiw	r30, 0x00	; 0
    53ae:	69 f0       	breq	.+26     	; 0x53ca <menuCheckArrowDown+0x3a>
    53b0:	89 30       	cpi	r24, 0x09	; 9
    53b2:	41 f4       	brne	.+16     	; 0x53c4 <menuCheckArrowDown+0x34>
    53b4:	80 81       	ld	r24, Z
    53b6:	81 11       	cpse	r24, r1
    53b8:	03 c0       	rjmp	.+6      	; 0x53c0 <menuCheckArrowDown+0x30>
    53ba:	0c 94 db 21 	jmp	0x43b6	; 0x43b6 <softkeyOn>
    53be:	08 95       	ret
    53c0:	00 c8       	rjmp	.-4096   	; 0x43c2 <softkeyOff>
    53c2:	08 95       	ret
    53c4:	0c 94 d5 21 	jmp	0x43aa	; 0x43aa <softkeyDown>
    53c8:	08 95       	ret
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	0c 94 08 3e 	jmp	0x7c10	; 0x7c10 <keylabel_clr>
    53d0:	08 95       	ret

000053d2 <menuCurrMenuToLCD>:
    53d2:	cf 93       	push	r28
    53d4:	89 e4       	ldi	r24, 0x49	; 73
    53d6:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    53da:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    53de:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    53e2:	c4 91       	lpm	r28, Z
    53e4:	c0 7c       	andi	r28, 0xC0	; 192
    53e6:	c0 38       	cpi	r28, 0x80	; 128
    53e8:	39 f4       	brne	.+14     	; 0x53f8 <menuCurrMenuToLCD+0x26>
    53ea:	80 e2       	ldi	r24, 0x20	; 32
    53ec:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    53f0:	82 e0       	ldi	r24, 0x02	; 2
    53f2:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    53f6:	05 c0       	rjmp	.+10     	; 0x5402 <menuCurrMenuToLCD+0x30>
    53f8:	8f e7       	ldi	r24, 0x7F	; 127
    53fa:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    53fe:	0e 94 c9 21 	call	0x4392	; 0x4392 <softkeyLeft>
    5402:	c0 3c       	cpi	r28, 0xC0	; 192
    5404:	29 f4       	brne	.+10     	; 0x5410 <menuCurrMenuToLCD+0x3e>
    5406:	83 e0       	ldi	r24, 0x03	; 3
    5408:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    540c:	c0 e2       	ldi	r28, 0x20	; 32
    540e:	03 c0       	rjmp	.+6      	; 0x5416 <menuCurrMenuToLCD+0x44>
    5410:	0e 94 cf 21 	call	0x439e	; 0x439e <softkeyRight>
    5414:	ce e7       	ldi	r28, 0x7E	; 126
    5416:	0e 94 e7 21 	call	0x43ce	; 0x43ce <softkeyUp>
    541a:	ba df       	rcall	.-140    	; 0x5390 <menuCheckArrowDown>
    541c:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <currentMenu>
    5420:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <currentMenu+0x1>
    5424:	6c 2f       	mov	r22, r28
    5426:	02 96       	adiw	r24, 0x02	; 2
    5428:	f5 dc       	rcall	.-1558   	; 0x4e14 <menuTextOut>
    542a:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
    542e:	86 de       	rcall	.-756    	; 0x513c <menuCursorSetMenu>
    5430:	cf 91       	pop	r28
    5432:	08 95       	ret

00005434 <menuItemChanged>:
    5434:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <currentMenu>
    5438:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <currentMenu+0x1>
    543c:	fc 01       	movw	r30, r24
    543e:	24 91       	lpm	r18, Z
    5440:	62 2f       	mov	r22, r18
    5442:	6f 73       	andi	r22, 0x3F	; 63
    5444:	62 30       	cpi	r22, 0x02	; 2
    5446:	08 f4       	brcc	.+2      	; 0x544a <menuItemChanged+0x16>
    5448:	49 c0       	rjmp	.+146    	; 0x54dc <menuItemChanged+0xa8>
    544a:	9c 01       	movw	r18, r24
    544c:	22 5f       	subi	r18, 0xF2	; 242
    544e:	3f 4f       	sbci	r19, 0xFF	; 255
    5450:	f9 01       	movw	r30, r18
    5452:	45 91       	lpm	r20, Z+
    5454:	55 91       	lpm	r21, Z+
    5456:	41 15       	cp	r20, r1
    5458:	51 05       	cpc	r21, r1
    545a:	09 f4       	brne	.+2      	; 0x545e <menuItemChanged+0x2a>
    545c:	3f c0       	rjmp	.+126    	; 0x54dc <menuItemChanged+0xa8>
    545e:	e6 2f       	mov	r30, r22
    5460:	f0 e0       	ldi	r31, 0x00	; 0
    5462:	31 97       	sbiw	r30, 0x01	; 1
    5464:	9f 01       	movw	r18, r30
    5466:	22 0f       	add	r18, r18
    5468:	33 1f       	adc	r19, r19
    546a:	22 0f       	add	r18, r18
    546c:	33 1f       	adc	r19, r19
    546e:	22 0f       	add	r18, r18
    5470:	33 1f       	adc	r19, r19
    5472:	e2 0f       	add	r30, r18
    5474:	f3 1f       	adc	r31, r19
    5476:	e7 51       	subi	r30, 0x17	; 23
    5478:	fc 4f       	sbci	r31, 0xFC	; 252
    547a:	f0 93 9b 05 	sts	0x059B, r31	; 0x80059b <pNibbleInfo+0x1>
    547e:	e0 93 9a 05 	sts	0x059A, r30	; 0x80059a <pNibbleInfo>
    5482:	24 91       	lpm	r18, Z
    5484:	20 93 c1 05 	sts	0x05C1, r18	; 0x8005c1 <nibbleCount>
    5488:	fc 01       	movw	r30, r24
    548a:	25 91       	lpm	r18, Z+
    548c:	2f 73       	andi	r18, 0x3F	; 63
    548e:	20 93 96 05 	sts	0x0596, r18	; 0x800596 <dataType>
    5492:	24 91       	lpm	r18, Z
    5494:	22 23       	and	r18, r18
    5496:	2c f4       	brge	.+10     	; 0x54a2 <menuItemChanged+0x6e>
    5498:	20 91 d2 05 	lds	r18, 0x05D2	; 0x8005d2 <DataAdressOffset>
    549c:	30 91 d3 05 	lds	r19, 0x05D3	; 0x8005d3 <DataAdressOffset+0x1>
    54a0:	02 c0       	rjmp	.+4      	; 0x54a6 <menuItemChanged+0x72>
    54a2:	20 e0       	ldi	r18, 0x00	; 0
    54a4:	30 e0       	ldi	r19, 0x00	; 0
    54a6:	24 0f       	add	r18, r20
    54a8:	35 1f       	adc	r19, r21
    54aa:	fc 01       	movw	r30, r24
    54ac:	84 91       	lpm	r24, Z
    54ae:	8f 73       	andi	r24, 0x3F	; 63
    54b0:	8b 30       	cpi	r24, 0x0B	; 11
    54b2:	71 f4       	brne	.+28     	; 0x54d0 <menuItemChanged+0x9c>
    54b4:	f9 01       	movw	r30, r18
    54b6:	80 81       	ld	r24, Z
    54b8:	91 81       	ldd	r25, Z+1	; 0x01
    54ba:	a2 81       	ldd	r26, Z+2	; 0x02
    54bc:	b3 81       	ldd	r27, Z+3	; 0x03
    54be:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <dataEntry32>
    54c2:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <dataEntry32+0x1>
    54c6:	a0 93 c5 05 	sts	0x05C5, r26	; 0x8005c5 <dataEntry32+0x2>
    54ca:	b0 93 c6 05 	sts	0x05C6, r27	; 0x8005c6 <dataEntry32+0x3>
    54ce:	04 c0       	rjmp	.+8      	; 0x54d8 <menuItemChanged+0xa4>
    54d0:	f9 01       	movw	r30, r18
    54d2:	80 81       	ld	r24, Z
    54d4:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <dataEntry>
    54d8:	d2 dc       	rcall	.-1628   	; 0x4e7e <menuDisplayValue>
    54da:	07 c0       	rjmp	.+14     	; 0x54ea <menuItemChanged+0xb6>
    54dc:	41 de       	rcall	.-894    	; 0x5160 <menu_ClearDataDisp>
    54de:	89 ee       	ldi	r24, 0xE9	; 233
    54e0:	93 e0       	ldi	r25, 0x03	; 3
    54e2:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <pNibbleInfo+0x1>
    54e6:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <pNibbleInfo>
    54ea:	52 df       	rcall	.-348    	; 0x5390 <menuCheckArrowDown>
    54ec:	27 ce       	rjmp	.-946    	; 0x513c <menuCursorSetMenu>
    54ee:	08 95       	ret

000054f0 <menu_InitLCD>:
    54f0:	32 de       	rcall	.-924    	; 0x5156 <menuClearExtraDisp>
    54f2:	a0 df       	rcall	.-192    	; 0x5434 <menuItemChanged>
    54f4:	aa dc       	rcall	.-1708   	; 0x4e4a <menuParentMenuToLCD>
    54f6:	6d df       	rcall	.-294    	; 0x53d2 <menuCurrMenuToLCD>
    54f8:	0c 94 a4 3d 	jmp	0x7b48	; 0x7b48 <lcd_cursosblink>
    54fc:	08 95       	ret

000054fe <menu_ProcessMessage>:
    54fe:	cf 93       	push	r28
    5500:	c8 2f       	mov	r28, r24
    5502:	0e 94 a4 3d 	call	0x7b48	; 0x7b48 <lcd_cursosblink>
    5506:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    550a:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    550e:	84 91       	lpm	r24, Z
    5510:	8f 73       	andi	r24, 0x3F	; 63
    5512:	81 30       	cpi	r24, 0x01	; 1
    5514:	29 f0       	breq	.+10     	; 0x5520 <menu_ProcessMessage+0x22>
    5516:	80 91 97 05 	lds	r24, 0x0597	; 0x800597 <nibbleIndex>
    551a:	8f 3f       	cpi	r24, 0xFF	; 255
    551c:	09 f0       	breq	.+2      	; 0x5520 <menu_ProcessMessage+0x22>
    551e:	68 c1       	rjmp	.+720    	; 0x57f0 <menu_ProcessMessage+0x2f2>
    5520:	31 96       	adiw	r30, 0x01	; 1
    5522:	84 91       	lpm	r24, Z
    5524:	86 ff       	sbrs	r24, 6
    5526:	02 c0       	rjmp	.+4      	; 0x552c <menu_ProcessMessage+0x2e>
    5528:	16 de       	rcall	.-980    	; 0x5156 <menuClearExtraDisp>
    552a:	08 de       	rcall	.-1008   	; 0x513c <menuCursorSetMenu>
    552c:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <currentMenu>
    5530:	70 91 cb 05 	lds	r23, 0x05CB	; 0x8005cb <currentMenu+0x1>
    5534:	cb 01       	movw	r24, r22
    5536:	01 96       	adiw	r24, 0x01	; 1
    5538:	fc 01       	movw	r30, r24
    553a:	84 91       	lpm	r24, Z
    553c:	98 2f       	mov	r25, r24
    553e:	90 72       	andi	r25, 0x20	; 32
    5540:	85 ff       	sbrs	r24, 5
    5542:	1f c0       	rjmp	.+62     	; 0x5582 <menu_ProcessMessage+0x84>
    5544:	9b 01       	movw	r18, r22
    5546:	20 5f       	subi	r18, 0xF0	; 240
    5548:	3f 4f       	sbci	r19, 0xFF	; 255
    554a:	f9 01       	movw	r30, r18
    554c:	25 91       	lpm	r18, Z+
    554e:	35 91       	lpm	r19, Z+
    5550:	21 15       	cp	r18, r1
    5552:	31 05       	cpc	r19, r1
    5554:	b1 f0       	breq	.+44     	; 0x5582 <menu_ProcessMessage+0x84>
    5556:	40 91 97 05 	lds	r20, 0x0597	; 0x800597 <nibbleIndex>
    555a:	4f 3f       	cpi	r20, 0xFF	; 255
    555c:	91 f0       	breq	.+36     	; 0x5582 <menu_ProcessMessage+0x84>
    555e:	8c 2f       	mov	r24, r28
    5560:	f9 01       	movw	r30, r18
    5562:	19 95       	eicall
    5564:	8f 3f       	cpi	r24, 0xFF	; 255
    5566:	21 f4       	brne	.+8      	; 0x5570 <menu_ProcessMessage+0x72>
    5568:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <nibbleIndex>
    556c:	80 e0       	ldi	r24, 0x00	; 0
    556e:	04 c2       	rjmp	.+1032   	; 0x5978 <menu_ProcessMessage+0x47a>
    5570:	f2 dd       	rcall	.-1052   	; 0x5156 <menuClearExtraDisp>
    5572:	f6 dd       	rcall	.-1044   	; 0x5160 <menu_ClearDataDisp>
    5574:	e3 dd       	rcall	.-1082   	; 0x513c <menuCursorSetMenu>
    5576:	8f ef       	ldi	r24, 0xFF	; 255
    5578:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <nibbleIndex>
    557c:	2a df       	rcall	.-428    	; 0x53d2 <menuCurrMenuToLCD>
    557e:	80 e0       	ldi	r24, 0x00	; 0
    5580:	fb c1       	rjmp	.+1014   	; 0x5978 <menu_ProcessMessage+0x47a>
    5582:	c3 30       	cpi	r28, 0x03	; 3
    5584:	09 f4       	brne	.+2      	; 0x5588 <menu_ProcessMessage+0x8a>
    5586:	64 c0       	rjmp	.+200    	; 0x5650 <menu_ProcessMessage+0x152>
    5588:	28 f4       	brcc	.+10     	; 0x5594 <menu_ProcessMessage+0x96>
    558a:	c1 30       	cpi	r28, 0x01	; 1
    558c:	51 f0       	breq	.+20     	; 0x55a2 <menu_ProcessMessage+0xa4>
    558e:	c2 30       	cpi	r28, 0x02	; 2
    5590:	31 f1       	breq	.+76     	; 0x55de <menu_ProcessMessage+0xe0>
    5592:	db c1       	rjmp	.+950    	; 0x594a <menu_ProcessMessage+0x44c>
    5594:	c5 30       	cpi	r28, 0x05	; 5
    5596:	09 f4       	brne	.+2      	; 0x559a <menu_ProcessMessage+0x9c>
    5598:	5b c0       	rjmp	.+182    	; 0x5650 <menu_ProcessMessage+0x152>
    559a:	90 f0       	brcs	.+36     	; 0x55c0 <menu_ProcessMessage+0xc2>
    559c:	c6 30       	cpi	r28, 0x06	; 6
    559e:	f9 f0       	breq	.+62     	; 0x55de <menu_ProcessMessage+0xe0>
    55a0:	d4 c1       	rjmp	.+936    	; 0x594a <menu_ProcessMessage+0x44c>
    55a2:	fb 01       	movw	r30, r22
    55a4:	84 91       	lpm	r24, Z
    55a6:	80 7c       	andi	r24, 0xC0	; 192
    55a8:	80 3c       	cpi	r24, 0xC0	; 192
    55aa:	09 f4       	brne	.+2      	; 0x55ae <menu_ProcessMessage+0xb0>
    55ac:	d0 c1       	rjmp	.+928    	; 0x594e <menu_ProcessMessage+0x450>
    55ae:	74 96       	adiw	r30, 0x14	; 20
    55b0:	f0 93 cb 05 	sts	0x05CB, r31	; 0x8005cb <currentMenu+0x1>
    55b4:	e0 93 ca 05 	sts	0x05CA, r30	; 0x8005ca <currentMenu>
    55b8:	3d df       	rcall	.-390    	; 0x5434 <menuItemChanged>
    55ba:	0b df       	rcall	.-490    	; 0x53d2 <menuCurrMenuToLCD>
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	dc c1       	rjmp	.+952    	; 0x5978 <menu_ProcessMessage+0x47a>
    55c0:	fb 01       	movw	r30, r22
    55c2:	84 91       	lpm	r24, Z
    55c4:	80 7c       	andi	r24, 0xC0	; 192
    55c6:	80 38       	cpi	r24, 0x80	; 128
    55c8:	09 f4       	brne	.+2      	; 0x55cc <menu_ProcessMessage+0xce>
    55ca:	c3 c1       	rjmp	.+902    	; 0x5952 <menu_ProcessMessage+0x454>
    55cc:	74 97       	sbiw	r30, 0x14	; 20
    55ce:	f0 93 cb 05 	sts	0x05CB, r31	; 0x8005cb <currentMenu+0x1>
    55d2:	e0 93 ca 05 	sts	0x05CA, r30	; 0x8005ca <currentMenu>
    55d6:	2e df       	rcall	.-420    	; 0x5434 <menuItemChanged>
    55d8:	fc de       	rcall	.-520    	; 0x53d2 <menuCurrMenuToLCD>
    55da:	80 e0       	ldi	r24, 0x00	; 0
    55dc:	cd c1       	rjmp	.+922    	; 0x5978 <menu_ProcessMessage+0x47a>
    55de:	84 ff       	sbrs	r24, 4
    55e0:	04 c0       	rjmp	.+8      	; 0x55ea <menu_ProcessMessage+0xec>
    55e2:	10 92 ef 05 	sts	0x05EF, r1	; 0x8005ef <menuVMenuSoftKey+0x1>
    55e6:	10 92 ee 05 	sts	0x05EE, r1	; 0x8005ee <menuVMenuSoftKey>
    55ea:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <menuStackIndex>
    55ee:	ee 23       	and	r30, r30
    55f0:	e9 f0       	breq	.+58     	; 0x562c <menu_ProcessMessage+0x12e>
    55f2:	e1 50       	subi	r30, 0x01	; 1
    55f4:	e0 93 89 05 	sts	0x0589, r30	; 0x800589 <menuStackIndex>
    55f8:	f0 e0       	ldi	r31, 0x00	; 0
    55fa:	ee 0f       	add	r30, r30
    55fc:	ff 1f       	adc	r31, r31
    55fe:	e4 56       	subi	r30, 0x64	; 100
    5600:	fa 4f       	sbci	r31, 0xFA	; 250
    5602:	01 90       	ld	r0, Z+
    5604:	f0 81       	ld	r31, Z
    5606:	e0 2d       	mov	r30, r0
    5608:	f0 93 cb 05 	sts	0x05CB, r31	; 0x8005cb <currentMenu+0x1>
    560c:	e0 93 ca 05 	sts	0x05CA, r30	; 0x8005ca <currentMenu>
    5610:	72 96       	adiw	r30, 0x12	; 18
    5612:	05 90       	lpm	r0, Z+
    5614:	f4 91       	lpm	r31, Z
    5616:	e0 2d       	mov	r30, r0
    5618:	30 97       	sbiw	r30, 0x00	; 0
    561a:	11 f0       	breq	.+4      	; 0x5620 <menu_ProcessMessage+0x122>
    561c:	80 e0       	ldi	r24, 0x00	; 0
    561e:	19 95       	eicall
    5620:	9a dd       	rcall	.-1228   	; 0x5156 <menuClearExtraDisp>
    5622:	13 dc       	rcall	.-2010   	; 0x4e4a <menuParentMenuToLCD>
    5624:	d6 de       	rcall	.-596    	; 0x53d2 <menuCurrMenuToLCD>
    5626:	06 df       	rcall	.-500    	; 0x5434 <menuItemChanged>
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	a6 c1       	rjmp	.+844    	; 0x5978 <menu_ProcessMessage+0x47a>
    562c:	80 e0       	ldi	r24, 0x00	; 0
    562e:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    5638:	82 e0       	ldi	r24, 0x02	; 2
    563a:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    563e:	83 e0       	ldi	r24, 0x03	; 3
    5640:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    5644:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
    5648:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <lcd_cursoroff>
    564c:	8f ef       	ldi	r24, 0xFF	; 255
    564e:	94 c1       	rjmp	.+808    	; 0x5978 <menu_ProcessMessage+0x47a>
    5650:	fb 01       	movw	r30, r22
    5652:	24 91       	lpm	r18, Z
    5654:	2f 73       	andi	r18, 0x3F	; 63
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	22 30       	cpi	r18, 0x02	; 2
    565a:	31 05       	cpc	r19, r1
    565c:	0c f4       	brge	.+2      	; 0x5660 <menu_ProcessMessage+0x162>
    565e:	48 c0       	rjmp	.+144    	; 0x56f0 <menu_ProcessMessage+0x1f2>
    5660:	70 96       	adiw	r30, 0x10	; 16
    5662:	05 90       	lpm	r0, Z+
    5664:	f4 91       	lpm	r31, Z
    5666:	e0 2d       	mov	r30, r0
    5668:	30 97       	sbiw	r30, 0x00	; 0
    566a:	19 f0       	breq	.+6      	; 0x5672 <menu_ProcessMessage+0x174>
    566c:	8c 2f       	mov	r24, r28
    566e:	19 95       	eicall
    5670:	e1 de       	rcall	.-574    	; 0x5434 <menuItemChanged>
    5672:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <currentMenu>
    5676:	30 91 cb 05 	lds	r19, 0x05CB	; 0x8005cb <currentMenu+0x1>
    567a:	c9 01       	movw	r24, r18
    567c:	01 96       	adiw	r24, 0x01	; 1
    567e:	fc 01       	movw	r30, r24
    5680:	84 91       	lpm	r24, Z
    5682:	83 fd       	sbrc	r24, 3
    5684:	68 c1       	rjmp	.+720    	; 0x5956 <menu_ProcessMessage+0x458>
    5686:	c9 01       	movw	r24, r18
    5688:	0e 96       	adiw	r24, 0x0e	; 14
    568a:	fc 01       	movw	r30, r24
    568c:	85 91       	lpm	r24, Z+
    568e:	95 91       	lpm	r25, Z+
    5690:	89 2b       	or	r24, r25
    5692:	09 f4       	brne	.+2      	; 0x5696 <menu_ProcessMessage+0x198>
    5694:	62 c1       	rjmp	.+708    	; 0x595a <menu_ProcessMessage+0x45c>
    5696:	f9 01       	movw	r30, r18
    5698:	84 91       	lpm	r24, Z
    569a:	8f 73       	andi	r24, 0x3F	; 63
    569c:	89 30       	cpi	r24, 0x09	; 9
    569e:	19 f5       	brne	.+70     	; 0x56e6 <menu_ProcessMessage+0x1e8>
    56a0:	61 e0       	ldi	r22, 0x01	; 1
    56a2:	80 e0       	ldi	r24, 0x00	; 0
    56a4:	23 d9       	rcall	.-3514   	; 0x48ec <nibbleChange>
    56a6:	d1 da       	rcall	.-2654   	; 0x4c4a <nibbleToData>
    56a8:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    56ac:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    56b0:	3e 96       	adiw	r30, 0x0e	; 14
    56b2:	05 90       	lpm	r0, Z+
    56b4:	f4 91       	lpm	r31, Z
    56b6:	e0 2d       	mov	r30, r0
    56b8:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    56bc:	80 83       	st	Z, r24
    56be:	df db       	rcall	.-2114   	; 0x4e7e <menuDisplayValue>
    56c0:	67 de       	rcall	.-818    	; 0x5390 <menuCheckArrowDown>
    56c2:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
    56c6:	3a dd       	rcall	.-1420   	; 0x513c <menuCursorSetMenu>
    56c8:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    56cc:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    56d0:	72 96       	adiw	r30, 0x12	; 18
    56d2:	05 90       	lpm	r0, Z+
    56d4:	f4 91       	lpm	r31, Z
    56d6:	e0 2d       	mov	r30, r0
    56d8:	30 97       	sbiw	r30, 0x00	; 0
    56da:	09 f4       	brne	.+2      	; 0x56de <menu_ProcessMessage+0x1e0>
    56dc:	40 c1       	rjmp	.+640    	; 0x595e <menu_ProcessMessage+0x460>
    56de:	80 e0       	ldi	r24, 0x00	; 0
    56e0:	19 95       	eicall
    56e2:	80 e0       	ldi	r24, 0x00	; 0
    56e4:	49 c1       	rjmp	.+658    	; 0x5978 <menu_ProcessMessage+0x47a>
    56e6:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <nibbleIndex>
    56ea:	d6 db       	rcall	.-2132   	; 0x4e98 <menuCursorSetDataNibble>
    56ec:	80 e0       	ldi	r24, 0x00	; 0
    56ee:	44 c1       	rjmp	.+648    	; 0x5978 <menu_ProcessMessage+0x47a>
    56f0:	2f ef       	ldi	r18, 0xFF	; 255
    56f2:	20 93 97 05 	sts	0x0597, r18	; 0x800597 <nibbleIndex>
    56f6:	84 ff       	sbrs	r24, 4
    56f8:	26 c0       	rjmp	.+76     	; 0x5746 <menu_ProcessMessage+0x248>
    56fa:	70 93 ef 05 	sts	0x05EF, r23	; 0x8005ef <menuVMenuSoftKey+0x1>
    56fe:	60 93 ee 05 	sts	0x05EE, r22	; 0x8005ee <menuVMenuSoftKey>
    5702:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <menuStackIndex>
    5706:	ee 23       	and	r30, r30
    5708:	09 f4       	brne	.+2      	; 0x570c <menu_ProcessMessage+0x20e>
    570a:	2b c1       	rjmp	.+598    	; 0x5962 <menu_ProcessMessage+0x464>
    570c:	e1 50       	subi	r30, 0x01	; 1
    570e:	e0 93 89 05 	sts	0x0589, r30	; 0x800589 <menuStackIndex>
    5712:	f0 e0       	ldi	r31, 0x00	; 0
    5714:	ee 0f       	add	r30, r30
    5716:	ff 1f       	adc	r31, r31
    5718:	e4 56       	subi	r30, 0x64	; 100
    571a:	fa 4f       	sbci	r31, 0xFA	; 250
    571c:	01 90       	ld	r0, Z+
    571e:	f0 81       	ld	r31, Z
    5720:	e0 2d       	mov	r30, r0
    5722:	f0 93 cb 05 	sts	0x05CB, r31	; 0x8005cb <currentMenu+0x1>
    5726:	e0 93 ca 05 	sts	0x05CA, r30	; 0x8005ca <currentMenu>
    572a:	72 96       	adiw	r30, 0x12	; 18
    572c:	05 90       	lpm	r0, Z+
    572e:	f4 91       	lpm	r31, Z
    5730:	e0 2d       	mov	r30, r0
    5732:	30 97       	sbiw	r30, 0x00	; 0
    5734:	11 f0       	breq	.+4      	; 0x573a <menu_ProcessMessage+0x23c>
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	19 95       	eicall
    573a:	0d dd       	rcall	.-1510   	; 0x5156 <menuClearExtraDisp>
    573c:	86 db       	rcall	.-2292   	; 0x4e4a <menuParentMenuToLCD>
    573e:	49 de       	rcall	.-878    	; 0x53d2 <menuCurrMenuToLCD>
    5740:	79 de       	rcall	.-782    	; 0x5434 <menuItemChanged>
    5742:	80 e0       	ldi	r24, 0x00	; 0
    5744:	19 c1       	rjmp	.+562    	; 0x5978 <menu_ProcessMessage+0x47a>
    5746:	fb 01       	movw	r30, r22
    5748:	70 96       	adiw	r30, 0x10	; 16
    574a:	05 90       	lpm	r0, Z+
    574c:	f4 91       	lpm	r31, Z
    574e:	e0 2d       	mov	r30, r0
    5750:	30 97       	sbiw	r30, 0x00	; 0
    5752:	99 f0       	breq	.+38     	; 0x577a <menu_ProcessMessage+0x27c>
    5754:	99 23       	and	r25, r25
    5756:	71 f0       	breq	.+28     	; 0x5774 <menu_ProcessMessage+0x276>
    5758:	8f ef       	ldi	r24, 0xFF	; 255
    575a:	19 95       	eicall
    575c:	8f 3f       	cpi	r24, 0xFF	; 255
    575e:	19 f4       	brne	.+6      	; 0x5766 <menu_ProcessMessage+0x268>
    5760:	10 92 97 05 	sts	0x0597, r1	; 0x800597 <nibbleIndex>
    5764:	0a c0       	rjmp	.+20     	; 0x577a <menu_ProcessMessage+0x27c>
    5766:	f7 dc       	rcall	.-1554   	; 0x5156 <menuClearExtraDisp>
    5768:	fb dc       	rcall	.-1546   	; 0x5160 <menu_ClearDataDisp>
    576a:	e8 dc       	rcall	.-1584   	; 0x513c <menuCursorSetMenu>
    576c:	8f ef       	ldi	r24, 0xFF	; 255
    576e:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <nibbleIndex>
    5772:	03 c0       	rjmp	.+6      	; 0x577a <menu_ProcessMessage+0x27c>
    5774:	85 e0       	ldi	r24, 0x05	; 5
    5776:	19 95       	eicall
    5778:	e1 dc       	rcall	.-1598   	; 0x513c <menuCursorSetMenu>
    577a:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <currentMenu>
    577e:	30 91 cb 05 	lds	r19, 0x05CB	; 0x8005cb <currentMenu+0x1>
    5782:	c9 01       	movw	r24, r18
    5784:	0c 96       	adiw	r24, 0x0c	; 12
    5786:	fc 01       	movw	r30, r24
    5788:	85 91       	lpm	r24, Z+
    578a:	95 91       	lpm	r25, Z+
    578c:	89 2b       	or	r24, r25
    578e:	09 f4       	brne	.+2      	; 0x5792 <menu_ProcessMessage+0x294>
    5790:	ea c0       	rjmp	.+468    	; 0x5966 <menu_ProcessMessage+0x468>
    5792:	a0 91 89 05 	lds	r26, 0x0589	; 0x800589 <menuStackIndex>
    5796:	a0 31       	cpi	r26, 0x10	; 16
    5798:	08 f0       	brcs	.+2      	; 0x579c <menu_ProcessMessage+0x29e>
    579a:	e7 c0       	rjmp	.+462    	; 0x596a <menu_ProcessMessage+0x46c>
    579c:	81 e0       	ldi	r24, 0x01	; 1
    579e:	8a 0f       	add	r24, r26
    57a0:	80 93 89 05 	sts	0x0589, r24	; 0x800589 <menuStackIndex>
    57a4:	b0 e0       	ldi	r27, 0x00	; 0
    57a6:	aa 0f       	add	r26, r26
    57a8:	bb 1f       	adc	r27, r27
    57aa:	a4 56       	subi	r26, 0x64	; 100
    57ac:	ba 4f       	sbci	r27, 0xFA	; 250
    57ae:	2d 93       	st	X+, r18
    57b0:	3c 93       	st	X, r19
    57b2:	c9 01       	movw	r24, r18
    57b4:	01 96       	adiw	r24, 0x01	; 1
    57b6:	fc 01       	movw	r30, r24
    57b8:	84 91       	lpm	r24, Z
    57ba:	83 ff       	sbrs	r24, 3
    57bc:	0b c0       	rjmp	.+22     	; 0x57d4 <menu_ProcessMessage+0x2d6>
    57be:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <menuVMenuSoftKey>
    57c2:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <menuVMenuSoftKey+0x1>
    57c6:	00 97       	sbiw	r24, 0x00	; 0
    57c8:	29 f0       	breq	.+10     	; 0x57d4 <menu_ProcessMessage+0x2d6>
    57ca:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <currentMenu+0x1>
    57ce:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <currentMenu>
    57d2:	08 c0       	rjmp	.+16     	; 0x57e4 <menu_ProcessMessage+0x2e6>
    57d4:	f9 01       	movw	r30, r18
    57d6:	3c 96       	adiw	r30, 0x0c	; 12
    57d8:	85 91       	lpm	r24, Z+
    57da:	95 91       	lpm	r25, Z+
    57dc:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <currentMenu+0x1>
    57e0:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <currentMenu>
    57e4:	b8 dc       	rcall	.-1680   	; 0x5156 <menuClearExtraDisp>
    57e6:	31 db       	rcall	.-2462   	; 0x4e4a <menuParentMenuToLCD>
    57e8:	f4 dd       	rcall	.-1048   	; 0x53d2 <menuCurrMenuToLCD>
    57ea:	24 de       	rcall	.-952    	; 0x5434 <menuItemChanged>
    57ec:	80 e0       	ldi	r24, 0x00	; 0
    57ee:	c4 c0       	rjmp	.+392    	; 0x5978 <menu_ProcessMessage+0x47a>
    57f0:	c3 30       	cpi	r28, 0x03	; 3
    57f2:	09 f4       	brne	.+2      	; 0x57f6 <menu_ProcessMessage+0x2f8>
    57f4:	49 c0       	rjmp	.+146    	; 0x5888 <menu_ProcessMessage+0x38a>
    57f6:	28 f4       	brcc	.+10     	; 0x5802 <menu_ProcessMessage+0x304>
    57f8:	c1 30       	cpi	r28, 0x01	; 1
    57fa:	59 f0       	breq	.+22     	; 0x5812 <menu_ProcessMessage+0x314>
    57fc:	c2 30       	cpi	r28, 0x02	; 2
    57fe:	31 f1       	breq	.+76     	; 0x584c <menu_ProcessMessage+0x34e>
    5800:	b6 c0       	rjmp	.+364    	; 0x596e <menu_ProcessMessage+0x470>
    5802:	c5 30       	cpi	r28, 0x05	; 5
    5804:	09 f4       	brne	.+2      	; 0x5808 <menu_ProcessMessage+0x30a>
    5806:	5e c0       	rjmp	.+188    	; 0x58c4 <menu_ProcessMessage+0x3c6>
    5808:	c0 f0       	brcs	.+48     	; 0x583a <menu_ProcessMessage+0x33c>
    580a:	c6 30       	cpi	r28, 0x06	; 6
    580c:	09 f4       	brne	.+2      	; 0x5810 <menu_ProcessMessage+0x312>
    580e:	8a c0       	rjmp	.+276    	; 0x5924 <menu_ProcessMessage+0x426>
    5810:	ae c0       	rjmp	.+348    	; 0x596e <menu_ProcessMessage+0x470>
    5812:	48 2f       	mov	r20, r24
    5814:	50 e0       	ldi	r21, 0x00	; 0
    5816:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <pNibbleInfo>
    581a:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <pNibbleInfo+0x1>
    581e:	24 91       	lpm	r18, Z
    5820:	30 e0       	ldi	r19, 0x00	; 0
    5822:	21 50       	subi	r18, 0x01	; 1
    5824:	31 09       	sbc	r19, r1
    5826:	42 17       	cp	r20, r18
    5828:	53 07       	cpc	r21, r19
    582a:	0c f0       	brlt	.+2      	; 0x582e <menu_ProcessMessage+0x330>
    582c:	a2 c0       	rjmp	.+324    	; 0x5972 <menu_ProcessMessage+0x474>
    582e:	8f 5f       	subi	r24, 0xFF	; 255
    5830:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <nibbleIndex>
    5834:	31 db       	rcall	.-2462   	; 0x4e98 <menuCursorSetDataNibble>
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	9f c0       	rjmp	.+318    	; 0x5978 <menu_ProcessMessage+0x47a>
    583a:	88 23       	and	r24, r24
    583c:	09 f4       	brne	.+2      	; 0x5840 <menu_ProcessMessage+0x342>
    583e:	9b c0       	rjmp	.+310    	; 0x5976 <menu_ProcessMessage+0x478>
    5840:	81 50       	subi	r24, 0x01	; 1
    5842:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <nibbleIndex>
    5846:	28 db       	rcall	.-2480   	; 0x4e98 <menuCursorSetDataNibble>
    5848:	80 e0       	ldi	r24, 0x00	; 0
    584a:	96 c0       	rjmp	.+300    	; 0x5978 <menu_ProcessMessage+0x47a>
    584c:	61 e0       	ldi	r22, 0x01	; 1
    584e:	4e d8       	rcall	.-3940   	; 0x48ec <nibbleChange>
    5850:	fc d9       	rcall	.-3080   	; 0x4c4a <nibbleToData>
    5852:	15 db       	rcall	.-2518   	; 0x4e7e <menuDisplayValue>
    5854:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <dataType>
    5858:	8a 30       	cpi	r24, 0x0A	; 10
    585a:	11 f0       	breq	.+4      	; 0x5860 <menu_ProcessMessage+0x362>
    585c:	8e 30       	cpi	r24, 0x0E	; 14
    585e:	89 f4       	brne	.+34     	; 0x5882 <menu_ProcessMessage+0x384>
    5860:	20 91 97 05 	lds	r18, 0x0597	; 0x800597 <nibbleIndex>
    5864:	42 2f       	mov	r20, r18
    5866:	50 e0       	ldi	r21, 0x00	; 0
    5868:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <pNibbleInfo>
    586c:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <pNibbleInfo+0x1>
    5870:	84 91       	lpm	r24, Z
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	01 97       	sbiw	r24, 0x01	; 1
    5876:	48 17       	cp	r20, r24
    5878:	59 07       	cpc	r21, r25
    587a:	1c f4       	brge	.+6      	; 0x5882 <menu_ProcessMessage+0x384>
    587c:	2f 5f       	subi	r18, 0xFF	; 255
    587e:	20 93 97 05 	sts	0x0597, r18	; 0x800597 <nibbleIndex>
    5882:	0a db       	rcall	.-2540   	; 0x4e98 <menuCursorSetDataNibble>
    5884:	80 e0       	ldi	r24, 0x00	; 0
    5886:	78 c0       	rjmp	.+240    	; 0x5978 <menu_ProcessMessage+0x47a>
    5888:	6f ef       	ldi	r22, 0xFF	; 255
    588a:	30 d8       	rcall	.-4000   	; 0x48ec <nibbleChange>
    588c:	de d9       	rcall	.-3140   	; 0x4c4a <nibbleToData>
    588e:	f7 da       	rcall	.-2578   	; 0x4e7e <menuDisplayValue>
    5890:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <dataType>
    5894:	8a 30       	cpi	r24, 0x0A	; 10
    5896:	11 f0       	breq	.+4      	; 0x589c <menu_ProcessMessage+0x39e>
    5898:	8e 30       	cpi	r24, 0x0E	; 14
    589a:	89 f4       	brne	.+34     	; 0x58be <menu_ProcessMessage+0x3c0>
    589c:	20 91 97 05 	lds	r18, 0x0597	; 0x800597 <nibbleIndex>
    58a0:	42 2f       	mov	r20, r18
    58a2:	50 e0       	ldi	r21, 0x00	; 0
    58a4:	e0 91 9a 05 	lds	r30, 0x059A	; 0x80059a <pNibbleInfo>
    58a8:	f0 91 9b 05 	lds	r31, 0x059B	; 0x80059b <pNibbleInfo+0x1>
    58ac:	84 91       	lpm	r24, Z
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	01 97       	sbiw	r24, 0x01	; 1
    58b2:	48 17       	cp	r20, r24
    58b4:	59 07       	cpc	r21, r25
    58b6:	1c f4       	brge	.+6      	; 0x58be <menu_ProcessMessage+0x3c0>
    58b8:	2f 5f       	subi	r18, 0xFF	; 255
    58ba:	20 93 97 05 	sts	0x0597, r18	; 0x800597 <nibbleIndex>
    58be:	ec da       	rcall	.-2600   	; 0x4e98 <menuCursorSetDataNibble>
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	5a c0       	rjmp	.+180    	; 0x5978 <menu_ProcessMessage+0x47a>
    58c4:	c2 d9       	rcall	.-3196   	; 0x4c4a <nibbleToData>
    58c6:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <currentMenu>
    58ca:	30 91 cb 05 	lds	r19, 0x05CB	; 0x8005cb <currentMenu+0x1>
    58ce:	c9 01       	movw	r24, r18
    58d0:	0e 96       	adiw	r24, 0x0e	; 14
    58d2:	fc 01       	movw	r30, r24
    58d4:	a5 91       	lpm	r26, Z+
    58d6:	b5 91       	lpm	r27, Z+
    58d8:	10 97       	sbiw	r26, 0x00	; 0
    58da:	21 f1       	breq	.+72     	; 0x5924 <menu_ProcessMessage+0x426>
    58dc:	0d 97       	sbiw	r24, 0x0d	; 13
    58de:	fc 01       	movw	r30, r24
    58e0:	84 91       	lpm	r24, Z
    58e2:	88 23       	and	r24, r24
    58e4:	2c f4       	brge	.+10     	; 0x58f0 <menu_ProcessMessage+0x3f2>
    58e6:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <DataAdressOffset>
    58ea:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <DataAdressOffset+0x1>
    58ee:	02 c0       	rjmp	.+4      	; 0x58f4 <menu_ProcessMessage+0x3f6>
    58f0:	80 e0       	ldi	r24, 0x00	; 0
    58f2:	90 e0       	ldi	r25, 0x00	; 0
    58f4:	a8 0f       	add	r26, r24
    58f6:	b9 1f       	adc	r27, r25
    58f8:	f9 01       	movw	r30, r18
    58fa:	84 91       	lpm	r24, Z
    58fc:	8f 73       	andi	r24, 0x3F	; 63
    58fe:	8b 30       	cpi	r24, 0x0B	; 11
    5900:	71 f4       	brne	.+28     	; 0x591e <menu_ProcessMessage+0x420>
    5902:	40 91 c3 05 	lds	r20, 0x05C3	; 0x8005c3 <dataEntry32>
    5906:	50 91 c4 05 	lds	r21, 0x05C4	; 0x8005c4 <dataEntry32+0x1>
    590a:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <dataEntry32+0x2>
    590e:	70 91 c6 05 	lds	r23, 0x05C6	; 0x8005c6 <dataEntry32+0x3>
    5912:	4d 93       	st	X+, r20
    5914:	5d 93       	st	X+, r21
    5916:	6d 93       	st	X+, r22
    5918:	7c 93       	st	X, r23
    591a:	13 97       	sbiw	r26, 0x03	; 3
    591c:	03 c0       	rjmp	.+6      	; 0x5924 <menu_ProcessMessage+0x426>
    591e:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <dataEntry>
    5922:	8c 93       	st	X, r24
    5924:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    5928:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    592c:	72 96       	adiw	r30, 0x12	; 18
    592e:	05 90       	lpm	r0, Z+
    5930:	f4 91       	lpm	r31, Z
    5932:	e0 2d       	mov	r30, r0
    5934:	30 97       	sbiw	r30, 0x00	; 0
    5936:	11 f0       	breq	.+4      	; 0x593c <menu_ProcessMessage+0x43e>
    5938:	8c 2f       	mov	r24, r28
    593a:	19 95       	eicall
    593c:	8f ef       	ldi	r24, 0xFF	; 255
    593e:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <nibbleIndex>
    5942:	47 dd       	rcall	.-1394   	; 0x53d2 <menuCurrMenuToLCD>
    5944:	77 dd       	rcall	.-1298   	; 0x5434 <menuItemChanged>
    5946:	80 e0       	ldi	r24, 0x00	; 0
    5948:	17 c0       	rjmp	.+46     	; 0x5978 <menu_ProcessMessage+0x47a>
    594a:	80 e0       	ldi	r24, 0x00	; 0
    594c:	15 c0       	rjmp	.+42     	; 0x5978 <menu_ProcessMessage+0x47a>
    594e:	80 e0       	ldi	r24, 0x00	; 0
    5950:	13 c0       	rjmp	.+38     	; 0x5978 <menu_ProcessMessage+0x47a>
    5952:	80 e0       	ldi	r24, 0x00	; 0
    5954:	11 c0       	rjmp	.+34     	; 0x5978 <menu_ProcessMessage+0x47a>
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	0f c0       	rjmp	.+30     	; 0x5978 <menu_ProcessMessage+0x47a>
    595a:	80 e0       	ldi	r24, 0x00	; 0
    595c:	0d c0       	rjmp	.+26     	; 0x5978 <menu_ProcessMessage+0x47a>
    595e:	80 e0       	ldi	r24, 0x00	; 0
    5960:	0b c0       	rjmp	.+22     	; 0x5978 <menu_ProcessMessage+0x47a>
    5962:	80 e0       	ldi	r24, 0x00	; 0
    5964:	09 c0       	rjmp	.+18     	; 0x5978 <menu_ProcessMessage+0x47a>
    5966:	80 e0       	ldi	r24, 0x00	; 0
    5968:	07 c0       	rjmp	.+14     	; 0x5978 <menu_ProcessMessage+0x47a>
    596a:	80 e0       	ldi	r24, 0x00	; 0
    596c:	05 c0       	rjmp	.+10     	; 0x5978 <menu_ProcessMessage+0x47a>
    596e:	80 e0       	ldi	r24, 0x00	; 0
    5970:	03 c0       	rjmp	.+6      	; 0x5978 <menu_ProcessMessage+0x47a>
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	01 c0       	rjmp	.+2      	; 0x5978 <menu_ProcessMessage+0x47a>
    5976:	80 e0       	ldi	r24, 0x00	; 0
    5978:	cf 91       	pop	r28
    597a:	08 95       	ret

0000597c <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    597c:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    597e:	34 e0       	ldi	r19, 0x04	; 4
    5980:	80 37       	cpi	r24, 0x70	; 112
    5982:	93 07       	cpc	r25, r19
    5984:	49 f0       	breq	.+18     	; 0x5998 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5986:	34 e0       	ldi	r19, 0x04	; 4
    5988:	80 37       	cpi	r24, 0x70	; 112
    598a:	93 07       	cpc	r25, r19
    598c:	38 f0       	brcs	.+14     	; 0x599c <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    598e:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5990:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5992:	a9 f7       	brne	.-22     	; 0x597e <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5994:	80 e0       	ldi	r24, 0x00	; 0
    5996:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5998:	82 2f       	mov	r24, r18
    599a:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    599c:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    599e:	08 95       	ret

000059a0 <init_SoftKeys>:

void init_SoftKeys(){
    59a0:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    59a2:	0e 94 48 0c 	call	0x1890	; 0x1890 <eeprom_ReadSoftkeys>
    59a6:	8f 3f       	cpi	r24, 0xFF	; 255
    59a8:	c9 f4       	brne	.+50     	; 0x59dc <init_SoftKeys+0x3c>
    59aa:	0f c0       	rjmp	.+30     	; 0x59ca <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    59ac:	82 2f       	mov	r24, r18
    59ae:	90 e0       	ldi	r25, 0x00	; 0
    59b0:	fc 01       	movw	r30, r24
    59b2:	ec 52       	subi	r30, 0x2C	; 44
    59b4:	fa 4f       	sbci	r31, 0xFA	; 250
    59b6:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    59b8:	88 0f       	add	r24, r24
    59ba:	99 1f       	adc	r25, r25
    59bc:	fc 01       	movw	r30, r24
    59be:	e5 52       	subi	r30, 0x25	; 37
    59c0:	fa 4f       	sbci	r31, 0xFA	; 250
    59c2:	11 82       	std	Z+1, r1	; 0x01
    59c4:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    59c6:	2f 5f       	subi	r18, 0xFF	; 255
    59c8:	01 c0       	rjmp	.+2      	; 0x59cc <init_SoftKeys+0x2c>
    59ca:	20 e0       	ldi	r18, 0x00	; 0
    59cc:	24 30       	cpi	r18, 0x04	; 4
    59ce:	70 f3       	brcs	.-36     	; 0x59ac <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    59d0:	40 e0       	ldi	r20, 0x00	; 0
    59d2:	50 e0       	ldi	r21, 0x00	; 0
    59d4:	67 e0       	ldi	r22, 0x07	; 7
    59d6:	81 e0       	ldi	r24, 0x01	; 1
    59d8:	0e 94 ef 16 	call	0x2dde	; 0x2dde <log_putError>
    59dc:	c0 e0       	ldi	r28, 0x00	; 0
    59de:	25 c0       	rjmp	.+74     	; 0x5a2a <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    59e0:	4c 2f       	mov	r20, r28
    59e2:	50 e0       	ldi	r21, 0x00	; 0
    59e4:	fa 01       	movw	r30, r20
    59e6:	ec 52       	subi	r30, 0x2C	; 44
    59e8:	fa 4f       	sbci	r31, 0xFA	; 250
    59ea:	80 81       	ld	r24, Z
    59ec:	8d 31       	cpi	r24, 0x1D	; 29
    59ee:	70 f4       	brcc	.+28     	; 0x5a0c <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    59f0:	24 e1       	ldi	r18, 0x14	; 20
    59f2:	82 9f       	mul	r24, r18
    59f4:	c0 01       	movw	r24, r0
    59f6:	11 24       	eor	r1, r1
    59f8:	80 59       	subi	r24, 0x90	; 144
    59fa:	9b 4f       	sbci	r25, 0xFB	; 251
    59fc:	44 0f       	add	r20, r20
    59fe:	55 1f       	adc	r21, r21
    5a00:	fa 01       	movw	r30, r20
    5a02:	e5 52       	subi	r30, 0x25	; 37
    5a04:	fa 4f       	sbci	r31, 0xFA	; 250
    5a06:	91 83       	std	Z+1, r25	; 0x01
    5a08:	80 83       	st	Z, r24
    5a0a:	0e c0       	rjmp	.+28     	; 0x5a28 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    5a0c:	fa 01       	movw	r30, r20
    5a0e:	ee 0f       	add	r30, r30
    5a10:	ff 1f       	adc	r31, r31
    5a12:	e5 52       	subi	r30, 0x25	; 37
    5a14:	fa 4f       	sbci	r31, 0xFA	; 250
    5a16:	11 82       	std	Z+1, r1	; 0x01
    5a18:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5a1a:	4f 5f       	subi	r20, 0xFF	; 255
    5a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a1e:	40 61       	ori	r20, 0x10	; 16
    5a20:	67 e0       	ldi	r22, 0x07	; 7
    5a22:	81 e0       	ldi	r24, 0x01	; 1
    5a24:	0e 94 ef 16 	call	0x2dde	; 0x2dde <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5a28:	cf 5f       	subi	r28, 0xFF	; 255
    5a2a:	c4 30       	cpi	r28, 0x04	; 4
    5a2c:	c8 f2       	brcs	.-78     	; 0x59e0 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5a2e:	cf 91       	pop	r28
    5a30:	08 95       	ret

00005a32 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5a32:	cf 93       	push	r28
    5a34:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5a36:	64 30       	cpi	r22, 0x04	; 4
    5a38:	28 f5       	brcc	.+74     	; 0x5a84 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5a3a:	00 97       	sbiw	r24, 0x00	; 0
    5a3c:	b9 f0       	breq	.+46     	; 0x5a6c <softKey_Set+0x3a>
    5a3e:	fc 01       	movw	r30, r24
    5a40:	24 91       	lpm	r18, Z
    5a42:	2f 73       	andi	r18, 0x3F	; 63
    5a44:	21 30       	cpi	r18, 0x01	; 1
    5a46:	91 f4       	brne	.+36     	; 0x5a6c <softKey_Set+0x3a>
    5a48:	31 96       	adiw	r30, 0x01	; 1
    5a4a:	24 91       	lpm	r18, Z
    5a4c:	24 ff       	sbrs	r18, 4
    5a4e:	0e c0       	rjmp	.+28     	; 0x5a6c <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5a50:	c6 2f       	mov	r28, r22
    5a52:	d0 e0       	ldi	r29, 0x00	; 0
    5a54:	fe 01       	movw	r30, r28
    5a56:	ee 0f       	add	r30, r30
    5a58:	ff 1f       	adc	r31, r31
    5a5a:	e5 52       	subi	r30, 0x25	; 37
    5a5c:	fa 4f       	sbci	r31, 0xFA	; 250
    5a5e:	91 83       	std	Z+1, r25	; 0x01
    5a60:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5a62:	8c df       	rcall	.-232    	; 0x597c <getSoftKeyIndex>
    5a64:	cc 52       	subi	r28, 0x2C	; 44
    5a66:	da 4f       	sbci	r29, 0xFA	; 250
    5a68:	88 83       	st	Y, r24
    5a6a:	0c c0       	rjmp	.+24     	; 0x5a84 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5a6c:	70 e0       	ldi	r23, 0x00	; 0
    5a6e:	fb 01       	movw	r30, r22
    5a70:	ee 0f       	add	r30, r30
    5a72:	ff 1f       	adc	r31, r31
    5a74:	e5 52       	subi	r30, 0x25	; 37
    5a76:	fa 4f       	sbci	r31, 0xFA	; 250
    5a78:	11 82       	std	Z+1, r1	; 0x01
    5a7a:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5a7c:	fb 01       	movw	r30, r22
    5a7e:	ec 52       	subi	r30, 0x2C	; 44
    5a80:	fa 4f       	sbci	r31, 0xFA	; 250
    5a82:	10 82       	st	Z, r1
		}
	}
}
    5a84:	df 91       	pop	r29
    5a86:	cf 91       	pop	r28
    5a88:	08 95       	ret

00005a8a <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5a8a:	e0 91 ca 05 	lds	r30, 0x05CA	; 0x8005ca <currentMenu>
    5a8e:	f0 91 cb 05 	lds	r31, 0x05CB	; 0x8005cb <currentMenu+0x1>
    5a92:	3e 96       	adiw	r30, 0x0e	; 14
    5a94:	65 91       	lpm	r22, Z+
    5a96:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5a98:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <menuVMenuSoftKey>
    5a9c:	90 91 ef 05 	lds	r25, 0x05EF	; 0x8005ef <menuVMenuSoftKey+0x1>
    5aa0:	c8 df       	rcall	.-112    	; 0x5a32 <softKey_Set>
	eeprom_UpdateSoftkeys();
    5aa2:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <eeprom_UpdateSoftkeys>
	return 0;
}
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	08 95       	ret

00005aaa <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5aaa:	0f 93       	push	r16
    5aac:	1f 93       	push	r17
    5aae:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5ab0:	c0 e0       	ldi	r28, 0x00	; 0
    5ab2:	32 c0       	rjmp	.+100    	; 0x5b18 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5ab4:	0c 2f       	mov	r16, r28
    5ab6:	10 e0       	ldi	r17, 0x00	; 0
    5ab8:	f8 01       	movw	r30, r16
    5aba:	ee 0f       	add	r30, r30
    5abc:	ff 1f       	adc	r31, r31
    5abe:	e5 52       	subi	r30, 0x25	; 37
    5ac0:	fa 4f       	sbci	r31, 0xFA	; 250
    5ac2:	01 90       	ld	r0, Z+
    5ac4:	f0 81       	ld	r31, Z
    5ac6:	e0 2d       	mov	r30, r0
    5ac8:	30 97       	sbiw	r30, 0x00	; 0
    5aca:	31 f0       	breq	.+12     	; 0x5ad8 <softKeys_toLCD+0x2e>
    5acc:	3e 96       	adiw	r30, 0x0e	; 14
    5ace:	65 91       	lpm	r22, Z+
    5ad0:	75 91       	lpm	r23, Z+
    5ad2:	61 15       	cp	r22, r1
    5ad4:	71 05       	cpc	r23, r1
    5ad6:	21 f4       	brne	.+8      	; 0x5ae0 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5ad8:	8c 2f       	mov	r24, r28
    5ada:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <keylabel_clr>
    5ade:	1b c0       	rjmp	.+54     	; 0x5b16 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    5ae0:	8c 2f       	mov	r24, r28
    5ae2:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    5ae6:	00 0f       	add	r16, r16
    5ae8:	11 1f       	adc	r17, r17
    5aea:	f8 01       	movw	r30, r16
    5aec:	e5 52       	subi	r30, 0x25	; 37
    5aee:	fa 4f       	sbci	r31, 0xFA	; 250
    5af0:	01 90       	ld	r0, Z+
    5af2:	f0 81       	ld	r31, Z
    5af4:	e0 2d       	mov	r30, r0
    5af6:	70 96       	adiw	r30, 0x10	; 16
    5af8:	05 90       	lpm	r0, Z+
    5afa:	f4 91       	lpm	r31, Z
    5afc:	e0 2d       	mov	r30, r0
    5afe:	30 97       	sbiw	r30, 0x00	; 0
    5b00:	51 f0       	breq	.+20     	; 0x5b16 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    5b02:	80 e0       	ldi	r24, 0x00	; 0
    5b04:	19 95       	eicall
    5b06:	81 38       	cpi	r24, 0x81	; 129
    5b08:	11 f4       	brne	.+4      	; 0x5b0e <softKeys_toLCD+0x64>
    5b0a:	6f ef       	ldi	r22, 0xFF	; 255
    5b0c:	01 c0       	rjmp	.+2      	; 0x5b10 <softKeys_toLCD+0x66>
    5b0e:	60 e0       	ldi	r22, 0x00	; 0
    5b10:	8c 2f       	mov	r24, r28
    5b12:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5b16:	cf 5f       	subi	r28, 0xFF	; 255
    5b18:	c4 30       	cpi	r28, 0x04	; 4
    5b1a:	60 f2       	brcs	.-104    	; 0x5ab4 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5b1c:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
}
    5b20:	cf 91       	pop	r28
    5b22:	1f 91       	pop	r17
    5b24:	0f 91       	pop	r16
    5b26:	08 95       	ret

00005b28 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    5b28:	82 30       	cpi	r24, 0x02	; 2
    5b2a:	49 f0       	breq	.+18     	; 0x5b3e <softKey_MessageKey_ToSoftKeyNr+0x16>
    5b2c:	18 f4       	brcc	.+6      	; 0x5b34 <softKey_MessageKey_ToSoftKeyNr+0xc>
    5b2e:	81 30       	cpi	r24, 0x01	; 1
    5b30:	51 f0       	breq	.+20     	; 0x5b46 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5b32:	0b c0       	rjmp	.+22     	; 0x5b4a <softKey_MessageKey_ToSoftKeyNr+0x22>
    5b34:	83 30       	cpi	r24, 0x03	; 3
    5b36:	59 f0       	breq	.+22     	; 0x5b4e <softKey_MessageKey_ToSoftKeyNr+0x26>
    5b38:	84 30       	cpi	r24, 0x04	; 4
    5b3a:	19 f0       	breq	.+6      	; 0x5b42 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5b3c:	06 c0       	rjmp	.+12     	; 0x5b4a <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5b3e:	80 e0       	ldi	r24, 0x00	; 0
    5b40:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5b42:	82 e0       	ldi	r24, 0x02	; 2
    5b44:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5b46:	83 e0       	ldi	r24, 0x03	; 3
    5b48:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5b4a:	8f ef       	ldi	r24, 0xFF	; 255
    5b4c:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5b4e:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5b50:	08 95       	ret

00005b52 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5b52:	0f 93       	push	r16
    5b54:	1f 93       	push	r17
    5b56:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5b58:	84 30       	cpi	r24, 0x04	; 4
    5b5a:	d0 f5       	brcc	.+116    	; 0x5bd0 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5b5c:	e8 2f       	mov	r30, r24
    5b5e:	f0 e0       	ldi	r31, 0x00	; 0
    5b60:	ee 0f       	add	r30, r30
    5b62:	ff 1f       	adc	r31, r31
    5b64:	e5 52       	subi	r30, 0x25	; 37
    5b66:	fa 4f       	sbci	r31, 0xFA	; 250
    5b68:	00 81       	ld	r16, Z
    5b6a:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5b6c:	01 15       	cp	r16, r1
    5b6e:	11 05       	cpc	r17, r1
    5b70:	89 f1       	breq	.+98     	; 0x5bd4 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5b72:	f8 01       	movw	r30, r16
    5b74:	94 91       	lpm	r25, Z
    5b76:	9f 73       	andi	r25, 0x3F	; 63
    5b78:	91 30       	cpi	r25, 0x01	; 1
    5b7a:	71 f5       	brne	.+92     	; 0x5bd8 <softKey_Execute+0x86>
    5b7c:	31 96       	adiw	r30, 0x01	; 1
    5b7e:	94 91       	lpm	r25, Z
    5b80:	94 ff       	sbrs	r25, 4
    5b82:	2c c0       	rjmp	.+88     	; 0x5bdc <softKey_Execute+0x8a>
    5b84:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5b86:	3f 96       	adiw	r30, 0x0f	; 15
    5b88:	05 90       	lpm	r0, Z+
    5b8a:	f4 91       	lpm	r31, Z
    5b8c:	e0 2d       	mov	r30, r0
    5b8e:	30 97       	sbiw	r30, 0x00	; 0
    5b90:	89 f0       	breq	.+34     	; 0x5bb4 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5b92:	86 2f       	mov	r24, r22
    5b94:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5b96:	82 38       	cpi	r24, 0x82	; 130
    5b98:	29 f4       	brne	.+10     	; 0x5ba4 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5b9a:	60 e0       	ldi	r22, 0x00	; 0
    5b9c:	8c 2f       	mov	r24, r28
    5b9e:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <keylabel_statcheck>
    5ba2:	06 c0       	rjmp	.+12     	; 0x5bb0 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5ba4:	81 38       	cpi	r24, 0x81	; 129
    5ba6:	21 f4       	brne	.+8      	; 0x5bb0 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5ba8:	6f ef       	ldi	r22, 0xFF	; 255
    5baa:	8c 2f       	mov	r24, r28
    5bac:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <keylabel_statcheck>
					}
					keylabel_toLCD();
    5bb0:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5bb4:	f8 01       	movw	r30, r16
    5bb6:	3c 96       	adiw	r30, 0x0c	; 12
    5bb8:	85 91       	lpm	r24, Z+
    5bba:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5bbc:	00 97       	sbiw	r24, 0x00	; 0
    5bbe:	81 f0       	breq	.+32     	; 0x5be0 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5bc0:	b8 01       	movw	r22, r16
    5bc2:	6e 5f       	subi	r22, 0xFE	; 254
    5bc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc6:	0e 94 a6 21 	call	0x434c	; 0x434c <menu_Init>
					menu_InitLCD(); //display menu
    5bca:	92 dc       	rcall	.-1756   	; 0x54f0 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5bcc:	80 e0       	ldi	r24, 0x00	; 0
    5bce:	09 c0       	rjmp	.+18     	; 0x5be2 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5bd0:	8f ef       	ldi	r24, 0xFF	; 255
    5bd2:	07 c0       	rjmp	.+14     	; 0x5be2 <softKey_Execute+0x90>
    5bd4:	8f ef       	ldi	r24, 0xFF	; 255
    5bd6:	05 c0       	rjmp	.+10     	; 0x5be2 <softKey_Execute+0x90>
    5bd8:	8f ef       	ldi	r24, 0xFF	; 255
    5bda:	03 c0       	rjmp	.+6      	; 0x5be2 <softKey_Execute+0x90>
    5bdc:	8f ef       	ldi	r24, 0xFF	; 255
    5bde:	01 c0       	rjmp	.+2      	; 0x5be2 <softKey_Execute+0x90>
    5be0:	8f ef       	ldi	r24, 0xFF	; 255
}
    5be2:	cf 91       	pop	r28
    5be4:	1f 91       	pop	r17
    5be6:	0f 91       	pop	r16
    5be8:	08 95       	ret

00005bea <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5bea:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5bec:	c0 91 c8 03 	lds	r28, 0x03C8	; 0x8003c8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    5bf0:	8c e0       	ldi	r24, 0x0C	; 12
    5bf2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5bf6:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <pipe_PowerStatus>
    5bfa:	84 ff       	sbrs	r24, 4
    5bfc:	02 c0       	rjmp	.+4      	; 0x5c02 <menu_showPowerState+0x18>
    5bfe:	80 e2       	ldi	r24, 0x20	; 32
    5c00:	01 c0       	rjmp	.+2      	; 0x5c04 <menu_showPowerState+0x1a>
    5c02:	89 e0       	ldi	r24, 0x09	; 9
    5c04:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
	lcd_goto(saveCursor);
    5c08:	8c 2f       	mov	r24, r28
    5c0a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>

    5c0e:	cf 91       	pop	r28
    5c10:	08 95       	ret

00005c12 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    5c12:	85 b1       	in	r24, 0x05	; 5
    5c14:	80 64       	ori	r24, 0x40	; 64
    5c16:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5c18:	83 e1       	ldi	r24, 0x13	; 19
    5c1a:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <pipe_PowerStatus>
	menu_showPowerState();
    5c1e:	e5 df       	rcall	.-54     	; 0x5bea <menu_showPowerState>
	return 0;
}
    5c20:	80 e0       	ldi	r24, 0x00	; 0
    5c22:	08 95       	ret

00005c24 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    5c24:	85 b1       	in	r24, 0x05	; 5
    5c26:	8f 7b       	andi	r24, 0xBF	; 191
    5c28:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5c2a:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <pipe_PowerStatus>
	menu_showPowerState();
    5c2e:	dd df       	rcall	.-70     	; 0x5bea <menu_showPowerState>
	return 0;
}
    5c30:	80 e0       	ldi	r24, 0x00	; 0
    5c32:	08 95       	ret

00005c34 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    5c34:	85 b1       	in	r24, 0x05	; 5
    5c36:	8f 7b       	andi	r24, 0xBF	; 191
    5c38:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5c3a:	81 e0       	ldi	r24, 0x01	; 1
    5c3c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <pipe_PowerStatus>
	menu_showPowerState();
    5c40:	d4 df       	rcall	.-88     	; 0x5bea <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5c42:	9f b7       	in	r25, 0x3f	; 63
    5c44:	f8 94       	cli
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	06 c0       	rjmp	.+12     	; 0x5c56 <menuOnEnterPwrRest+0x22>
    5c4a:	ef e4       	ldi	r30, 0x4F	; 79
    5c4c:	f2 e0       	ldi	r31, 0x02	; 2
    5c4e:	88 e2       	ldi	r24, 0x28	; 40
    5c50:	82 83       	std	Z+2, r24	; 0x02
    5c52:	13 82       	std	Z+3, r1	; 0x03
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	81 11       	cpse	r24, r1
    5c58:	f8 cf       	rjmp	.-16     	; 0x5c4a <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5c5a:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5c5c:	08 95       	ret

00005c5e <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5c5e:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgInIndex>
    5c62:	10 92 f0 05 	sts	0x05F0, r1	; 0x8005f0 <msgOutIndex>
    5c66:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <msgOverflow>
    5c6a:	08 95       	ret

00005c6c <message_push>:
    5c6c:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgInIndex>
    5c70:	e9 2f       	mov	r30, r25
    5c72:	f0 e0       	ldi	r31, 0x00	; 0
    5c74:	ec 50       	subi	r30, 0x0C	; 12
    5c76:	f8 4f       	sbci	r31, 0xF8	; 248
    5c78:	80 83       	st	Z, r24
    5c7a:	9f 5f       	subi	r25, 0xFF	; 255
    5c7c:	9f 71       	andi	r25, 0x1F	; 31
    5c7e:	80 91 f0 05 	lds	r24, 0x05F0	; 0x8005f0 <msgOutIndex>
    5c82:	98 13       	cpse	r25, r24
    5c84:	04 c0       	rjmp	.+8      	; 0x5c8e <message_push+0x22>
    5c86:	8f ef       	ldi	r24, 0xFF	; 255
    5c88:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <msgOverflow>
    5c8c:	08 95       	ret
    5c8e:	90 93 f3 07 	sts	0x07F3, r25	; 0x8007f3 <msgInIndex>
    5c92:	08 95       	ret

00005c94 <message_get>:
    5c94:	4f b7       	in	r20, 0x3f	; 63
    5c96:	f8 94       	cli
    5c98:	21 e0       	ldi	r18, 0x01	; 1
    5c9a:	11 c0       	rjmp	.+34     	; 0x5cbe <message_get+0x2a>
    5c9c:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <msgOutIndex>
    5ca0:	30 91 f3 07 	lds	r19, 0x07F3	; 0x8007f3 <msgInIndex>
    5ca4:	8f ef       	ldi	r24, 0xFF	; 255
    5ca6:	20 e0       	ldi	r18, 0x00	; 0
    5ca8:	93 17       	cp	r25, r19
    5caa:	49 f0       	breq	.+18     	; 0x5cbe <message_get+0x2a>
    5cac:	e9 2f       	mov	r30, r25
    5cae:	f0 e0       	ldi	r31, 0x00	; 0
    5cb0:	ec 50       	subi	r30, 0x0C	; 12
    5cb2:	f8 4f       	sbci	r31, 0xF8	; 248
    5cb4:	80 81       	ld	r24, Z
    5cb6:	9f 5f       	subi	r25, 0xFF	; 255
    5cb8:	9f 71       	andi	r25, 0x1F	; 31
    5cba:	90 93 f0 05 	sts	0x05F0, r25	; 0x8005f0 <msgOutIndex>
    5cbe:	21 11       	cpse	r18, r1
    5cc0:	ed cf       	rjmp	.-38     	; 0x5c9c <message_get+0x8>
    5cc2:	4f bf       	out	0x3f, r20	; 63
    5cc4:	08 95       	ret

00005cc6 <message_status>:
    5cc6:	4f b7       	in	r20, 0x3f	; 63
    5cc8:	f8 94       	cli
    5cca:	91 e0       	ldi	r25, 0x01	; 1
    5ccc:	08 c0       	rjmp	.+16     	; 0x5cde <message_status+0x18>
    5cce:	30 91 f0 05 	lds	r19, 0x05F0	; 0x8005f0 <msgOutIndex>
    5cd2:	20 91 f3 07 	lds	r18, 0x07F3	; 0x8007f3 <msgInIndex>
    5cd6:	90 e0       	ldi	r25, 0x00	; 0
    5cd8:	80 e0       	ldi	r24, 0x00	; 0
    5cda:	32 17       	cp	r19, r18
    5cdc:	11 f0       	breq	.+4      	; 0x5ce2 <message_status+0x1c>
    5cde:	8f ef       	ldi	r24, 0xFF	; 255
    5ce0:	01 c0       	rjmp	.+2      	; 0x5ce4 <message_status+0x1e>
    5ce2:	90 e0       	ldi	r25, 0x00	; 0
    5ce4:	91 11       	cpse	r25, r1
    5ce6:	f3 cf       	rjmp	.-26     	; 0x5cce <message_status+0x8>
    5ce8:	4f bf       	out	0x3f, r20	; 63
    5cea:	08 95       	ret

00005cec <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5cec:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5cee:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <msgPipe_Handling>
    5cf2:	99 23       	and	r25, r25
    5cf4:	e1 f0       	breq	.+56     	; 0x5d2e <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5cf6:	90 91 f1 07 	lds	r25, 0x07F1	; 0x8007f1 <pipeMsgInIndex>
    5cfa:	21 e0       	ldi	r18, 0x01	; 1
    5cfc:	29 0f       	add	r18, r25
    5cfe:	20 93 f1 07 	sts	0x07F1, r18	; 0x8007f1 <pipeMsgInIndex>
    5d02:	e9 2f       	mov	r30, r25
    5d04:	f0 e0       	ldi	r31, 0x00	; 0
    5d06:	ee 0f       	add	r30, r30
    5d08:	ff 1f       	adc	r31, r31
    5d0a:	ef 50       	subi	r30, 0x0F	; 15
    5d0c:	fa 4f       	sbci	r31, 0xFA	; 250
    5d0e:	51 83       	std	Z+1, r21	; 0x01
    5d10:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5d12:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <pipeMsgOutIndex>
    5d16:	28 13       	cpse	r18, r24
    5d18:	0a c0       	rjmp	.+20     	; 0x5d2e <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5d1a:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5d1e:	9f 3f       	cpi	r25, 0xFF	; 255
    5d20:	19 f4       	brne	.+6      	; 0x5d28 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5d22:	8f ef       	ldi	r24, 0xFF	; 255
    5d24:	80 93 f1 07 	sts	0x07F1, r24	; 0x8007f1 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5d28:	8f ef       	ldi	r24, 0xFF	; 255
    5d2a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <msgPipeOverflow>
    5d2e:	08 95       	ret

00005d30 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5d30:	e0 91 16 08 	lds	r30, 0x0816	; 0x800816 <pipeMsgOutIndex>
    5d34:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <pipeMsgInIndex>
    5d38:	e8 13       	cpse	r30, r24
    5d3a:	03 c0       	rjmp	.+6      	; 0x5d42 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5d3c:	8f ef       	ldi	r24, 0xFF	; 255
    5d3e:	9f ef       	ldi	r25, 0xFF	; 255
    5d40:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5d42:	81 e0       	ldi	r24, 0x01	; 1
    5d44:	8e 0f       	add	r24, r30
    5d46:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <pipeMsgOutIndex>
    5d4a:	f0 e0       	ldi	r31, 0x00	; 0
    5d4c:	ee 0f       	add	r30, r30
    5d4e:	ff 1f       	adc	r31, r31
    5d50:	ef 50       	subi	r30, 0x0F	; 15
    5d52:	fa 4f       	sbci	r31, 0xFA	; 250
    5d54:	80 81       	ld	r24, Z
    5d56:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5d58:	08 95       	ret

00005d5a <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5d5a:	90 91 16 08 	lds	r25, 0x0816	; 0x800816 <pipeMsgOutIndex>
    5d5e:	80 91 f1 07 	lds	r24, 0x07F1	; 0x8007f1 <pipeMsgInIndex>
    5d62:	98 13       	cpse	r25, r24
    5d64:	02 c0       	rjmp	.+4      	; 0x5d6a <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5d66:	80 e0       	ldi	r24, 0x00	; 0
    5d68:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5d6a:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5d6c:	08 95       	ret

00005d6e <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5d6e:	80 e0       	ldi	r24, 0x00	; 0
    5d70:	e2 e3       	ldi	r30, 0x32	; 50
    5d72:	f8 e0       	ldi	r31, 0x08	; 8
    5d74:	03 c0       	rjmp	.+6      	; 0x5d7c <midi_CouplerReset+0xe>
    5d76:	10 82       	st	Z, r1
    5d78:	8f 5f       	subi	r24, 0xFF	; 255
    5d7a:	31 96       	adiw	r30, 0x01	; 1
    5d7c:	8c 30       	cpi	r24, 0x0C	; 12
    5d7e:	d8 f3       	brcs	.-10     	; 0x5d76 <midi_CouplerReset+0x8>
    5d80:	08 95       	ret

00005d82 <init_Midi>:
    5d82:	f5 df       	rcall	.-22     	; 0x5d6e <midi_CouplerReset>
    5d84:	8f ef       	ldi	r24, 0xFF	; 255
    5d86:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
    5d8a:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <prog_UpdDisplay>
    5d8e:	08 95       	ret

00005d90 <set_Coupler>:
    5d90:	8c 30       	cpi	r24, 0x0C	; 12
    5d92:	e8 f4       	brcc	.+58     	; 0x5dce <set_Coupler+0x3e>
    5d94:	e8 2f       	mov	r30, r24
    5d96:	f0 e0       	ldi	r31, 0x00	; 0
    5d98:	ee 5c       	subi	r30, 0xCE	; 206
    5d9a:	f7 4f       	sbci	r31, 0xF7	; 247
    5d9c:	9f ef       	ldi	r25, 0xFF	; 255
    5d9e:	90 83       	st	Z, r25
    5da0:	86 30       	cpi	r24, 0x06	; 6
    5da2:	10 f0       	brcs	.+4      	; 0x5da8 <set_Coupler+0x18>
    5da4:	86 50       	subi	r24, 0x06	; 6
    5da6:	01 c0       	rjmp	.+2      	; 0x5daa <set_Coupler+0x1a>
    5da8:	8a 5f       	subi	r24, 0xFA	; 250
    5daa:	e8 2f       	mov	r30, r24
    5dac:	f0 e0       	ldi	r31, 0x00	; 0
    5dae:	df 01       	movw	r26, r30
    5db0:	ae 5c       	subi	r26, 0xCE	; 206
    5db2:	b7 4f       	sbci	r27, 0xF7	; 247
    5db4:	8c 91       	ld	r24, X
    5db6:	88 23       	and	r24, r24
    5db8:	59 f0       	breq	.+22     	; 0x5dd0 <set_Coupler+0x40>
    5dba:	df 01       	movw	r26, r30
    5dbc:	ae 5c       	subi	r26, 0xCE	; 206
    5dbe:	b7 4f       	sbci	r27, 0xF7	; 247
    5dc0:	1c 92       	st	X, r1
    5dc2:	ee 0f       	add	r30, r30
    5dc4:	ff 1f       	adc	r31, r31
    5dc6:	e8 55       	subi	r30, 0x58	; 88
    5dc8:	fc 4e       	sbci	r31, 0xEC	; 236
    5dca:	84 91       	lpm	r24, Z
    5dcc:	08 95       	ret
    5dce:	80 e0       	ldi	r24, 0x00	; 0
    5dd0:	08 95       	ret

00005dd2 <getAllCouplers>:
    5dd2:	80 e0       	ldi	r24, 0x00	; 0
    5dd4:	90 e0       	ldi	r25, 0x00	; 0
    5dd6:	4b e0       	ldi	r20, 0x0B	; 11
    5dd8:	01 c0       	rjmp	.+2      	; 0x5ddc <getAllCouplers+0xa>
    5dda:	42 2f       	mov	r20, r18
    5ddc:	28 2f       	mov	r18, r24
    5dde:	39 2f       	mov	r19, r25
    5de0:	22 0f       	add	r18, r18
    5de2:	33 1f       	adc	r19, r19
    5de4:	82 2f       	mov	r24, r18
    5de6:	93 2f       	mov	r25, r19
    5de8:	e4 2f       	mov	r30, r20
    5dea:	f0 e0       	ldi	r31, 0x00	; 0
    5dec:	ee 5c       	subi	r30, 0xCE	; 206
    5dee:	f7 4f       	sbci	r31, 0xF7	; 247
    5df0:	50 81       	ld	r21, Z
    5df2:	5f 3f       	cpi	r21, 0xFF	; 255
    5df4:	09 f4       	brne	.+2      	; 0x5df8 <getAllCouplers+0x26>
    5df6:	81 60       	ori	r24, 0x01	; 1
    5df8:	2f ef       	ldi	r18, 0xFF	; 255
    5dfa:	24 0f       	add	r18, r20
    5dfc:	41 11       	cpse	r20, r1
    5dfe:	ed cf       	rjmp	.-38     	; 0x5dda <getAllCouplers+0x8>
    5e00:	08 95       	ret

00005e02 <setAllCouplers>:
    5e02:	40 e0       	ldi	r20, 0x00	; 0
    5e04:	80 ff       	sbrs	r24, 0
    5e06:	07 c0       	rjmp	.+14     	; 0x5e16 <setAllCouplers+0x14>
    5e08:	e4 2f       	mov	r30, r20
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	ee 5c       	subi	r30, 0xCE	; 206
    5e0e:	f7 4f       	sbci	r31, 0xF7	; 247
    5e10:	2f ef       	ldi	r18, 0xFF	; 255
    5e12:	20 83       	st	Z, r18
    5e14:	05 c0       	rjmp	.+10     	; 0x5e20 <setAllCouplers+0x1e>
    5e16:	e4 2f       	mov	r30, r20
    5e18:	f0 e0       	ldi	r31, 0x00	; 0
    5e1a:	ee 5c       	subi	r30, 0xCE	; 206
    5e1c:	f7 4f       	sbci	r31, 0xF7	; 247
    5e1e:	10 82       	st	Z, r1
    5e20:	28 2f       	mov	r18, r24
    5e22:	39 2f       	mov	r19, r25
    5e24:	36 95       	lsr	r19
    5e26:	27 95       	ror	r18
    5e28:	82 2f       	mov	r24, r18
    5e2a:	93 2f       	mov	r25, r19
    5e2c:	4f 5f       	subi	r20, 0xFF	; 255
    5e2e:	4c 30       	cpi	r20, 0x0C	; 12
    5e30:	48 f3       	brcs	.-46     	; 0x5e04 <setAllCouplers+0x2>
    5e32:	08 95       	ret

00005e34 <midiAllReset>:
    5e34:	80 e8       	ldi	r24, 0x80	; 128
    5e36:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <pipeProcessing>
    5e3a:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <init_Pipe>
    5e3e:	08 95       	ret

00005e40 <registers_CalcCount>:
    5e40:	20 e0       	ldi	r18, 0x00	; 0
    5e42:	30 e0       	ldi	r19, 0x00	; 0
    5e44:	12 c0       	rjmp	.+36     	; 0x5e6a <registers_CalcCount+0x2a>
    5e46:	82 2f       	mov	r24, r18
    5e48:	90 e0       	ldi	r25, 0x00	; 0
    5e4a:	fc 01       	movw	r30, r24
    5e4c:	ee 0f       	add	r30, r30
    5e4e:	ff 1f       	adc	r31, r31
    5e50:	8e 0f       	add	r24, r30
    5e52:	9f 1f       	adc	r25, r31
    5e54:	fc 01       	movw	r30, r24
    5e56:	e8 5e       	subi	r30, 0xE8	; 232
    5e58:	f7 4f       	sbci	r31, 0xF7	; 247
    5e5a:	81 81       	ldd	r24, Z+1	; 0x01
    5e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    5e5e:	21 f0       	breq	.+8      	; 0x5e68 <registers_CalcCount+0x28>
    5e60:	83 17       	cp	r24, r19
    5e62:	10 f0       	brcs	.+4      	; 0x5e68 <registers_CalcCount+0x28>
    5e64:	31 e0       	ldi	r19, 0x01	; 1
    5e66:	38 0f       	add	r19, r24
    5e68:	2f 5f       	subi	r18, 0xFF	; 255
    5e6a:	28 30       	cpi	r18, 0x08	; 8
    5e6c:	60 f3       	brcs	.-40     	; 0x5e46 <registers_CalcCount+0x6>
    5e6e:	30 93 31 08 	sts	0x0831, r19	; 0x800831 <registerCount>
    5e72:	08 95       	ret

00005e74 <init_Registers>:
    5e74:	8f ef       	ldi	r24, 0xFF	; 255
    5e76:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <midi_RegisterChanged>
    5e7a:	20 e0       	ldi	r18, 0x00	; 0
    5e7c:	0e c0       	rjmp	.+28     	; 0x5e9a <init_Registers+0x26>
    5e7e:	82 2f       	mov	r24, r18
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	fc 01       	movw	r30, r24
    5e84:	ee 0f       	add	r30, r30
    5e86:	ff 1f       	adc	r31, r31
    5e88:	e8 0f       	add	r30, r24
    5e8a:	f9 1f       	adc	r31, r25
    5e8c:	e8 5e       	subi	r30, 0xE8	; 232
    5e8e:	f7 4f       	sbci	r31, 0xF7	; 247
    5e90:	8f ef       	ldi	r24, 0xFF	; 255
    5e92:	80 83       	st	Z, r24
    5e94:	81 83       	std	Z+1, r24	; 0x01
    5e96:	12 82       	std	Z+2, r1	; 0x02
    5e98:	2f 5f       	subi	r18, 0xFF	; 255
    5e9a:	28 30       	cpi	r18, 0x08	; 8
    5e9c:	80 f3       	brcs	.-32     	; 0x5e7e <init_Registers+0xa>
    5e9e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <eeprom_ReadReg>
    5ea2:	8f 3f       	cpi	r24, 0xFF	; 255
    5ea4:	49 f4       	brne	.+18     	; 0x5eb8 <init_Registers+0x44>
    5ea6:	10 92 31 08 	sts	0x0831, r1	; 0x800831 <registerCount>
    5eaa:	40 e0       	ldi	r20, 0x00	; 0
    5eac:	50 e0       	ldi	r21, 0x00	; 0
    5eae:	65 e0       	ldi	r22, 0x05	; 5
    5eb0:	81 e0       	ldi	r24, 0x01	; 1
    5eb2:	0e 94 ef 16 	call	0x2dde	; 0x2dde <log_putError>
    5eb6:	01 c0       	rjmp	.+2      	; 0x5eba <init_Registers+0x46>
    5eb8:	c3 df       	rcall	.-122    	; 0x5e40 <registers_CalcCount>
    5eba:	0e 94 20 0c 	call	0x1840	; 0x1840 <eeprom_ReadProg>
    5ebe:	8f 3f       	cpi	r24, 0xFF	; 255
    5ec0:	a1 f5       	brne	.+104    	; 0x5f2a <init_Registers+0xb6>
    5ec2:	2a c0       	rjmp	.+84     	; 0x5f18 <init_Registers+0xa4>
    5ec4:	83 2f       	mov	r24, r19
    5ec6:	90 e0       	ldi	r25, 0x00	; 0
    5ec8:	fc 01       	movw	r30, r24
    5eca:	ee 0f       	add	r30, r30
    5ecc:	ff 1f       	adc	r31, r31
    5ece:	88 0f       	add	r24, r24
    5ed0:	99 1f       	adc	r25, r25
    5ed2:	88 0f       	add	r24, r24
    5ed4:	99 1f       	adc	r25, r25
    5ed6:	88 0f       	add	r24, r24
    5ed8:	99 1f       	adc	r25, r25
    5eda:	e8 0f       	add	r30, r24
    5edc:	f9 1f       	adc	r31, r25
    5ede:	eb 57       	subi	r30, 0x7B	; 123
    5ee0:	f6 4f       	sbci	r31, 0xF6	; 246
    5ee2:	e2 0f       	add	r30, r18
    5ee4:	f1 1d       	adc	r31, r1
    5ee6:	10 82       	st	Z, r1
    5ee8:	2f 5f       	subi	r18, 0xFF	; 255
    5eea:	01 c0       	rjmp	.+2      	; 0x5eee <init_Registers+0x7a>
    5eec:	20 e0       	ldi	r18, 0x00	; 0
    5eee:	28 30       	cpi	r18, 0x08	; 8
    5ef0:	48 f3       	brcs	.-46     	; 0x5ec4 <init_Registers+0x50>
    5ef2:	83 2f       	mov	r24, r19
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	fc 01       	movw	r30, r24
    5ef8:	ee 0f       	add	r30, r30
    5efa:	ff 1f       	adc	r31, r31
    5efc:	88 0f       	add	r24, r24
    5efe:	99 1f       	adc	r25, r25
    5f00:	88 0f       	add	r24, r24
    5f02:	99 1f       	adc	r25, r25
    5f04:	88 0f       	add	r24, r24
    5f06:	99 1f       	adc	r25, r25
    5f08:	e8 0f       	add	r30, r24
    5f0a:	f9 1f       	adc	r31, r25
    5f0c:	eb 57       	subi	r30, 0x7B	; 123
    5f0e:	f6 4f       	sbci	r31, 0xF6	; 246
    5f10:	11 86       	std	Z+9, r1	; 0x09
    5f12:	10 86       	std	Z+8, r1	; 0x08
    5f14:	3f 5f       	subi	r19, 0xFF	; 255
    5f16:	01 c0       	rjmp	.+2      	; 0x5f1a <init_Registers+0xa6>
    5f18:	30 e0       	ldi	r19, 0x00	; 0
    5f1a:	30 34       	cpi	r19, 0x40	; 64
    5f1c:	38 f3       	brcs	.-50     	; 0x5eec <init_Registers+0x78>
    5f1e:	40 e0       	ldi	r20, 0x00	; 0
    5f20:	50 e0       	ldi	r21, 0x00	; 0
    5f22:	66 e0       	ldi	r22, 0x06	; 6
    5f24:	81 e0       	ldi	r24, 0x01	; 1
    5f26:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <log_putError>
    5f2a:	08 95       	ret

00005f2c <regNr_to_moduleBit>:
    5f2c:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <registerCount>
    5f30:	89 17       	cp	r24, r25
    5f32:	a0 f4       	brcc	.+40     	; 0x5f5c <regNr_to_moduleBit+0x30>
    5f34:	80 34       	cpi	r24, 0x40	; 64
    5f36:	90 f4       	brcc	.+36     	; 0x5f5c <regNr_to_moduleBit+0x30>
    5f38:	28 e0       	ldi	r18, 0x08	; 8
    5f3a:	e8 e1       	ldi	r30, 0x18	; 24
    5f3c:	f8 e0       	ldi	r31, 0x08	; 8
    5f3e:	30 81       	ld	r19, Z
    5f40:	83 17       	cp	r24, r19
    5f42:	48 f0       	brcs	.+18     	; 0x5f56 <regNr_to_moduleBit+0x2a>
    5f44:	91 81       	ldd	r25, Z+1	; 0x01
    5f46:	98 17       	cp	r25, r24
    5f48:	30 f0       	brcs	.+12     	; 0x5f56 <regNr_to_moduleBit+0x2a>
    5f4a:	22 81       	ldd	r18, Z+2	; 0x02
    5f4c:	98 2f       	mov	r25, r24
    5f4e:	93 1b       	sub	r25, r19
    5f50:	80 e0       	ldi	r24, 0x00	; 0
    5f52:	92 0f       	add	r25, r18
    5f54:	08 95       	ret
    5f56:	33 96       	adiw	r30, 0x03	; 3
    5f58:	21 50       	subi	r18, 0x01	; 1
    5f5a:	89 f7       	brne	.-30     	; 0x5f3e <regNr_to_moduleBit+0x12>
    5f5c:	8f ef       	ldi	r24, 0xFF	; 255
    5f5e:	90 e0       	ldi	r25, 0x00	; 0
    5f60:	08 95       	ret

00005f62 <moduleBit_to_registerNr>:
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	16 c0       	rjmp	.+44     	; 0x5f92 <moduleBit_to_registerNr+0x30>
    5f66:	40 91 1a 08 	lds	r20, 0x081A	; 0x80081a <registerMap+0x2>
    5f6a:	84 17       	cp	r24, r20
    5f6c:	88 f0       	brcs	.+34     	; 0x5f90 <moduleBit_to_registerNr+0x2e>
    5f6e:	68 2f       	mov	r22, r24
    5f70:	70 e0       	ldi	r23, 0x00	; 0
    5f72:	e8 e1       	ldi	r30, 0x18	; 24
    5f74:	f8 e0       	ldi	r31, 0x08	; 8
    5f76:	21 81       	ldd	r18, Z+1	; 0x01
    5f78:	30 e0       	ldi	r19, 0x00	; 0
    5f7a:	24 0f       	add	r18, r20
    5f7c:	31 1d       	adc	r19, r1
    5f7e:	50 81       	ld	r21, Z
    5f80:	25 1b       	sub	r18, r21
    5f82:	31 09       	sbc	r19, r1
    5f84:	26 17       	cp	r18, r22
    5f86:	37 07       	cpc	r19, r23
    5f88:	1c f0       	brlt	.+6      	; 0x5f90 <moduleBit_to_registerNr+0x2e>
    5f8a:	84 1b       	sub	r24, r20
    5f8c:	85 0f       	add	r24, r21
    5f8e:	08 95       	ret
    5f90:	9f 5f       	subi	r25, 0xFF	; 255
    5f92:	98 30       	cpi	r25, 0x08	; 8
    5f94:	40 f3       	brcs	.-48     	; 0x5f66 <moduleBit_to_registerNr+0x4>
    5f96:	8f ef       	ldi	r24, 0xFF	; 255
    5f98:	08 95       	ret

00005f9a <read_Register>:
    5f9a:	cf 93       	push	r28
    5f9c:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <registerCount>
    5fa0:	89 17       	cp	r24, r25
    5fa2:	08 f0       	brcs	.+2      	; 0x5fa6 <read_Register+0xc>
    5fa4:	3f c0       	rjmp	.+126    	; 0x6024 <read_Register+0x8a>
    5fa6:	c6 2f       	mov	r28, r22
    5fa8:	c1 df       	rcall	.-126    	; 0x5f2c <regNr_to_moduleBit>
    5faa:	81 11       	cpse	r24, r1
    5fac:	33 c0       	rjmp	.+102    	; 0x6014 <read_Register+0x7a>
    5fae:	29 2f       	mov	r18, r25
    5fb0:	2f 71       	andi	r18, 0x1F	; 31
    5fb2:	92 95       	swap	r25
    5fb4:	96 95       	lsr	r25
    5fb6:	97 70       	andi	r25, 0x07	; 7
    5fb8:	41 e0       	ldi	r20, 0x01	; 1
    5fba:	50 e0       	ldi	r21, 0x00	; 0
    5fbc:	02 c0       	rjmp	.+4      	; 0x5fc2 <read_Register+0x28>
    5fbe:	44 0f       	add	r20, r20
    5fc0:	55 1f       	adc	r21, r21
    5fc2:	9a 95       	dec	r25
    5fc4:	e2 f7       	brpl	.-8      	; 0x5fbe <read_Register+0x24>
    5fc6:	30 e0       	ldi	r19, 0x00	; 0
    5fc8:	f9 01       	movw	r30, r18
    5fca:	ee 0f       	add	r30, r30
    5fcc:	ff 1f       	adc	r31, r31
    5fce:	ee 0f       	add	r30, r30
    5fd0:	ff 1f       	adc	r31, r31
    5fd2:	ee 0f       	add	r30, r30
    5fd4:	ff 1f       	adc	r31, r31
    5fd6:	e7 59       	subi	r30, 0x97	; 151
    5fd8:	fd 4f       	sbci	r31, 0xFD	; 253
    5fda:	91 81       	ldd	r25, Z+1	; 0x01
    5fdc:	94 23       	and	r25, r20
    5fde:	11 f4       	brne	.+4      	; 0x5fe4 <read_Register+0x4a>
    5fe0:	c1 fd       	sbrc	r28, 1
    5fe2:	1a c0       	rjmp	.+52     	; 0x6018 <read_Register+0x7e>
    5fe4:	22 0f       	add	r18, r18
    5fe6:	33 1f       	adc	r19, r19
    5fe8:	22 0f       	add	r18, r18
    5fea:	33 1f       	adc	r19, r19
    5fec:	22 0f       	add	r18, r18
    5fee:	33 1f       	adc	r19, r19
    5ff0:	f9 01       	movw	r30, r18
    5ff2:	e7 59       	subi	r30, 0x97	; 151
    5ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    5ff6:	36 81       	ldd	r19, Z+6	; 0x06
    5ff8:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <pipe_Module>
    5ffc:	43 23       	and	r20, r19
    5ffe:	42 23       	and	r20, r18
    6000:	11 f0       	breq	.+4      	; 0x6006 <read_Register+0x6c>
    6002:	c0 fd       	sbrc	r28, 0
    6004:	0b c0       	rjmp	.+22     	; 0x601c <read_Register+0x82>
    6006:	99 23       	and	r25, r25
    6008:	71 f0       	breq	.+28     	; 0x6026 <read_Register+0x8c>
    600a:	44 23       	and	r20, r20
    600c:	61 f0       	breq	.+24     	; 0x6026 <read_Register+0x8c>
    600e:	c4 30       	cpi	r28, 0x04	; 4
    6010:	51 f4       	brne	.+20     	; 0x6026 <read_Register+0x8c>
    6012:	06 c0       	rjmp	.+12     	; 0x6020 <read_Register+0x86>
    6014:	80 e0       	ldi	r24, 0x00	; 0
    6016:	07 c0       	rjmp	.+14     	; 0x6026 <read_Register+0x8c>
    6018:	81 e0       	ldi	r24, 0x01	; 1
    601a:	05 c0       	rjmp	.+10     	; 0x6026 <read_Register+0x8c>
    601c:	81 e0       	ldi	r24, 0x01	; 1
    601e:	03 c0       	rjmp	.+6      	; 0x6026 <read_Register+0x8c>
    6020:	81 e0       	ldi	r24, 0x01	; 1
    6022:	01 c0       	rjmp	.+2      	; 0x6026 <read_Register+0x8c>
    6024:	80 e0       	ldi	r24, 0x00	; 0
    6026:	cf 91       	pop	r28
    6028:	08 95       	ret

0000602a <get_RegisterStatus>:
    602a:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <registerCount>
    602e:	89 17       	cp	r24, r25
    6030:	98 f5       	brcc	.+102    	; 0x6098 <get_RegisterStatus+0x6e>
    6032:	7c df       	rcall	.-264    	; 0x5f2c <regNr_to_moduleBit>
    6034:	81 11       	cpse	r24, r1
    6036:	2c c0       	rjmp	.+88     	; 0x6090 <get_RegisterStatus+0x66>
    6038:	29 2f       	mov	r18, r25
    603a:	2f 71       	andi	r18, 0x1F	; 31
    603c:	92 95       	swap	r25
    603e:	96 95       	lsr	r25
    6040:	97 70       	andi	r25, 0x07	; 7
    6042:	41 e0       	ldi	r20, 0x01	; 1
    6044:	50 e0       	ldi	r21, 0x00	; 0
    6046:	ba 01       	movw	r22, r20
    6048:	02 c0       	rjmp	.+4      	; 0x604e <get_RegisterStatus+0x24>
    604a:	66 0f       	add	r22, r22
    604c:	77 1f       	adc	r23, r23
    604e:	9a 95       	dec	r25
    6050:	e2 f7       	brpl	.-8      	; 0x604a <get_RegisterStatus+0x20>
    6052:	cb 01       	movw	r24, r22
    6054:	30 e0       	ldi	r19, 0x00	; 0
    6056:	f9 01       	movw	r30, r18
    6058:	ee 0f       	add	r30, r30
    605a:	ff 1f       	adc	r31, r31
    605c:	ee 0f       	add	r30, r30
    605e:	ff 1f       	adc	r31, r31
    6060:	ee 0f       	add	r30, r30
    6062:	ff 1f       	adc	r31, r31
    6064:	e7 59       	subi	r30, 0x97	; 151
    6066:	fd 4f       	sbci	r31, 0xFD	; 253
    6068:	41 81       	ldd	r20, Z+1	; 0x01
    606a:	46 23       	and	r20, r22
    606c:	99 f0       	breq	.+38     	; 0x6094 <get_RegisterStatus+0x6a>
    606e:	22 0f       	add	r18, r18
    6070:	33 1f       	adc	r19, r19
    6072:	22 0f       	add	r18, r18
    6074:	33 1f       	adc	r19, r19
    6076:	22 0f       	add	r18, r18
    6078:	33 1f       	adc	r19, r19
    607a:	f9 01       	movw	r30, r18
    607c:	e7 59       	subi	r30, 0x97	; 151
    607e:	fd 4f       	sbci	r31, 0xFD	; 253
    6080:	26 81       	ldd	r18, Z+6	; 0x06
    6082:	90 91 75 03 	lds	r25, 0x0375	; 0x800375 <pipe_Module>
    6086:	82 23       	and	r24, r18
    6088:	89 23       	and	r24, r25
    608a:	39 f0       	breq	.+14     	; 0x609a <get_RegisterStatus+0x70>
    608c:	81 e0       	ldi	r24, 0x01	; 1
    608e:	08 95       	ret
    6090:	80 e0       	ldi	r24, 0x00	; 0
    6092:	08 95       	ret
    6094:	82 e0       	ldi	r24, 0x02	; 2
    6096:	08 95       	ret
    6098:	80 e0       	ldi	r24, 0x00	; 0
    609a:	08 95       	ret

0000609c <count_Registers>:
    609c:	1f 93       	push	r17
    609e:	cf 93       	push	r28
    60a0:	df 93       	push	r29
    60a2:	18 2f       	mov	r17, r24
    60a4:	c0 e0       	ldi	r28, 0x00	; 0
    60a6:	d0 e0       	ldi	r29, 0x00	; 0
    60a8:	06 c0       	rjmp	.+12     	; 0x60b6 <count_Registers+0x1a>
    60aa:	61 2f       	mov	r22, r17
    60ac:	8c 2f       	mov	r24, r28
    60ae:	75 df       	rcall	.-278    	; 0x5f9a <read_Register>
    60b0:	81 11       	cpse	r24, r1
    60b2:	df 5f       	subi	r29, 0xFF	; 255
    60b4:	cf 5f       	subi	r28, 0xFF	; 255
    60b6:	c0 34       	cpi	r28, 0x40	; 64
    60b8:	c0 f3       	brcs	.-16     	; 0x60aa <count_Registers+0xe>
    60ba:	8d 2f       	mov	r24, r29
    60bc:	df 91       	pop	r29
    60be:	cf 91       	pop	r28
    60c0:	1f 91       	pop	r17
    60c2:	08 95       	ret

000060c4 <read_allRegister>:
    60c4:	ef 92       	push	r14
    60c6:	ff 92       	push	r15
    60c8:	0f 93       	push	r16
    60ca:	1f 93       	push	r17
    60cc:	cf 93       	push	r28
    60ce:	df 93       	push	r29
    60d0:	7c 01       	movw	r14, r24
    60d2:	c0 e0       	ldi	r28, 0x00	; 0
    60d4:	d0 e0       	ldi	r29, 0x00	; 0
    60d6:	00 e0       	ldi	r16, 0x00	; 0
    60d8:	17 c0       	rjmp	.+46     	; 0x6108 <read_allRegister+0x44>
    60da:	1c 2f       	mov	r17, r28
    60dc:	17 70       	andi	r17, 0x07	; 7
    60de:	09 f4       	brne	.+2      	; 0x60e2 <read_allRegister+0x1e>
    60e0:	d0 e0       	ldi	r29, 0x00	; 0
    60e2:	d6 95       	lsr	r29
    60e4:	63 e0       	ldi	r22, 0x03	; 3
    60e6:	8c 2f       	mov	r24, r28
    60e8:	58 df       	rcall	.-336    	; 0x5f9a <read_Register>
    60ea:	88 23       	and	r24, r24
    60ec:	11 f0       	breq	.+4      	; 0x60f2 <read_allRegister+0x2e>
    60ee:	d0 68       	ori	r29, 0x80	; 128
    60f0:	0f 5f       	subi	r16, 0xFF	; 255
    60f2:	17 30       	cpi	r17, 0x07	; 7
    60f4:	41 f4       	brne	.+16     	; 0x6106 <read_allRegister+0x42>
    60f6:	e1 14       	cp	r14, r1
    60f8:	f1 04       	cpc	r15, r1
    60fa:	29 f0       	breq	.+10     	; 0x6106 <read_allRegister+0x42>
    60fc:	f7 01       	movw	r30, r14
    60fe:	d0 83       	st	Z, r29
    6100:	c7 01       	movw	r24, r14
    6102:	01 96       	adiw	r24, 0x01	; 1
    6104:	7c 01       	movw	r14, r24
    6106:	cf 5f       	subi	r28, 0xFF	; 255
    6108:	c0 34       	cpi	r28, 0x40	; 64
    610a:	38 f3       	brcs	.-50     	; 0x60da <read_allRegister+0x16>
    610c:	80 2f       	mov	r24, r16
    610e:	df 91       	pop	r29
    6110:	cf 91       	pop	r28
    6112:	1f 91       	pop	r17
    6114:	0f 91       	pop	r16
    6116:	ff 90       	pop	r15
    6118:	ef 90       	pop	r14
    611a:	08 95       	ret

0000611c <register_onOff>:
    611c:	cf 93       	push	r28
    611e:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <registerCount>
    6122:	89 17       	cp	r24, r25
    6124:	f0 f4       	brcc	.+60     	; 0x6162 <register_onOff+0x46>
    6126:	c6 2f       	mov	r28, r22
    6128:	01 df       	rcall	.-510    	; 0x5f2c <regNr_to_moduleBit>
    612a:	81 11       	cpse	r24, r1
    612c:	1a c0       	rjmp	.+52     	; 0x6162 <register_onOff+0x46>
    612e:	89 2f       	mov	r24, r25
    6130:	8f 71       	andi	r24, 0x1F	; 31
    6132:	92 95       	swap	r25
    6134:	96 95       	lsr	r25
    6136:	97 70       	andi	r25, 0x07	; 7
    6138:	c0 ff       	sbrs	r28, 0
    613a:	0a c0       	rjmp	.+20     	; 0x6150 <register_onOff+0x34>
    613c:	61 e0       	ldi	r22, 0x01	; 1
    613e:	70 e0       	ldi	r23, 0x00	; 0
    6140:	02 c0       	rjmp	.+4      	; 0x6146 <register_onOff+0x2a>
    6142:	66 0f       	add	r22, r22
    6144:	77 1f       	adc	r23, r23
    6146:	9a 95       	dec	r25
    6148:	e2 f7       	brpl	.-8      	; 0x6142 <register_onOff+0x26>
    614a:	0e 94 cb 12 	call	0x2596	; 0x2596 <pipe_on>
    614e:	09 c0       	rjmp	.+18     	; 0x6162 <register_onOff+0x46>
    6150:	61 e0       	ldi	r22, 0x01	; 1
    6152:	70 e0       	ldi	r23, 0x00	; 0
    6154:	02 c0       	rjmp	.+4      	; 0x615a <register_onOff+0x3e>
    6156:	66 0f       	add	r22, r22
    6158:	77 1f       	adc	r23, r23
    615a:	9a 95       	dec	r25
    615c:	e2 f7       	brpl	.-8      	; 0x6156 <register_onOff+0x3a>
    615e:	0e 94 da 12 	call	0x25b4	; 0x25b4 <pipe_off>
    6162:	cf 91       	pop	r28
    6164:	08 95       	ret

00006166 <register_toProgram>:
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    6166:	0f 93       	push	r16
    6168:	1f 93       	push	r17
    616a:	cf 93       	push	r28
    616c:	df 93       	push	r29
    616e:	c8 2f       	mov	r28, r24
    6170:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    6172:	80 34       	cpi	r24, 0x40	; 64
    6174:	90 f4       	brcc	.+36     	; 0x619a <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    6176:	28 2f       	mov	r18, r24
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	c9 01       	movw	r24, r18
    617c:	88 0f       	add	r24, r24
    617e:	99 1f       	adc	r25, r25
    6180:	22 0f       	add	r18, r18
    6182:	33 1f       	adc	r19, r19
    6184:	22 0f       	add	r18, r18
    6186:	33 1f       	adc	r19, r19
    6188:	22 0f       	add	r18, r18
    618a:	33 1f       	adc	r19, r19
    618c:	82 0f       	add	r24, r18
    618e:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    6190:	8b 57       	subi	r24, 0x7B	; 123
    6192:	96 4f       	sbci	r25, 0xF6	; 246
    6194:	97 df       	rcall	.-210    	; 0x60c4 <read_allRegister>
    6196:	18 2f       	mov	r17, r24
    6198:	01 c0       	rjmp	.+2      	; 0x619c <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    619a:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    619c:	d0 e0       	ldi	r29, 0x00	; 0
    619e:	19 de       	rcall	.-974    	; 0x5dd2 <getAllCouplers>
    61a0:	9e 01       	movw	r18, r28
    61a2:	22 0f       	add	r18, r18
    61a4:	33 1f       	adc	r19, r19
    61a6:	cc 0f       	add	r28, r28
    61a8:	dd 1f       	adc	r29, r29
    61aa:	cc 0f       	add	r28, r28
    61ac:	dd 1f       	adc	r29, r29
    61ae:	cc 0f       	add	r28, r28
    61b0:	dd 1f       	adc	r29, r29
    61b2:	c2 0f       	add	r28, r18
    61b4:	d3 1f       	adc	r29, r19
    61b6:	cb 57       	subi	r28, 0x7B	; 123
    61b8:	d6 4f       	sbci	r29, 0xF6	; 246
    61ba:	99 87       	std	Y+9, r25	; 0x09
    61bc:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    61be:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    61c0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <eeprom_UpdateProg>
	}
	return result;
}
    61c4:	81 2f       	mov	r24, r17
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	1f 91       	pop	r17
    61cc:	0f 91       	pop	r16
    61ce:	08 95       	ret

000061d0 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    61d0:	ff 92       	push	r15
    61d2:	0f 93       	push	r16
    61d4:	1f 93       	push	r17
    61d6:	cf 93       	push	r28
    61d8:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	8c 01       	movw	r16, r24
    61de:	00 0f       	add	r16, r16
    61e0:	11 1f       	adc	r17, r17
    61e2:	88 0f       	add	r24, r24
    61e4:	99 1f       	adc	r25, r25
    61e6:	88 0f       	add	r24, r24
    61e8:	99 1f       	adc	r25, r25
    61ea:	88 0f       	add	r24, r24
    61ec:	99 1f       	adc	r25, r25
    61ee:	08 0f       	add	r16, r24
    61f0:	19 1f       	adc	r17, r25
    61f2:	0b 57       	subi	r16, 0x7B	; 123
    61f4:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    61f6:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    61f8:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    61fa:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    61fc:	15 c0       	rjmp	.+42     	; 0x6228 <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    61fe:	9c 2f       	mov	r25, r28
    6200:	97 70       	andi	r25, 0x07	; 7
    6202:	21 f4       	brne	.+8      	; 0x620c <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    6204:	f8 01       	movw	r30, r16
    6206:	d0 81       	ld	r29, Z
    6208:	0f 5f       	subi	r16, 0xFF	; 255
    620a:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    620c:	8c 2f       	mov	r24, r28
    620e:	0d df       	rcall	.-486    	; 0x602a <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    6210:	d0 ff       	sbrs	r29, 0
    6212:	03 c0       	rjmp	.+6      	; 0x621a <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    6214:	82 30       	cpi	r24, 0x02	; 2
    6216:	31 f0       	breq	.+12     	; 0x6224 <midi_RegisterMatchProgram+0x54>
    6218:	0d c0       	rjmp	.+26     	; 0x6234 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    621a:	82 30       	cpi	r24, 0x02	; 2
    621c:	69 f0       	breq	.+26     	; 0x6238 <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    621e:	81 30       	cpi	r24, 0x01	; 1
    6220:	09 f4       	brne	.+2      	; 0x6224 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    6222:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    6224:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    6226:	cf 5f       	subi	r28, 0xFF	; 255
    6228:	90 91 31 08 	lds	r25, 0x0831	; 0x800831 <registerCount>
    622c:	c9 17       	cp	r28, r25
    622e:	38 f3       	brcs	.-50     	; 0x61fe <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    6230:	8f 2d       	mov	r24, r15
    6232:	03 c0       	rjmp	.+6      	; 0x623a <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    6234:	8f ef       	ldi	r24, 0xFF	; 255
    6236:	01 c0       	rjmp	.+2      	; 0x623a <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    6238:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    623a:	df 91       	pop	r29
    623c:	cf 91       	pop	r28
    623e:	1f 91       	pop	r17
    6240:	0f 91       	pop	r16
    6242:	ff 90       	pop	r15
    6244:	08 95       	ret

00006246 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    6246:	90 e0       	ldi	r25, 0x00	; 0
    6248:	fc 01       	movw	r30, r24
    624a:	ee 0f       	add	r30, r30
    624c:	ff 1f       	adc	r31, r31
    624e:	88 0f       	add	r24, r24
    6250:	99 1f       	adc	r25, r25
    6252:	88 0f       	add	r24, r24
    6254:	99 1f       	adc	r25, r25
    6256:	88 0f       	add	r24, r24
    6258:	99 1f       	adc	r25, r25
    625a:	e8 0f       	add	r30, r24
    625c:	f9 1f       	adc	r31, r25
    625e:	eb 57       	subi	r30, 0x7B	; 123
    6260:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6262:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    6264:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    6266:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6268:	09 c0       	rjmp	.+18     	; 0x627c <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    626a:	39 2f       	mov	r19, r25
    626c:	37 70       	andi	r19, 0x07	; 7
    626e:	11 f4       	brne	.+4      	; 0x6274 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    6270:	20 81       	ld	r18, Z
    6272:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    6274:	20 fd       	sbrc	r18, 0
			result++;
    6276:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    6278:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    627a:	9f 5f       	subi	r25, 0xFF	; 255
    627c:	30 91 31 08 	lds	r19, 0x0831	; 0x800831 <registerCount>
    6280:	93 17       	cp	r25, r19
    6282:	98 f3       	brcs	.-26     	; 0x626a <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    6284:	08 95       	ret

00006286 <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    6286:	90 91 17 08 	lds	r25, 0x0817	; 0x800817 <prog_Display>
    628a:	98 17       	cp	r25, r24
    628c:	29 f0       	breq	.+10     	; 0x6298 <prog_set+0x12>
		prog_Display = prog;
    628e:	80 93 17 08 	sts	0x0817, r24	; 0x800817 <prog_Display>
		prog_UpdDisplay = TRUE;
    6292:	8f ef       	ldi	r24, 0xFF	; 255
    6294:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <prog_UpdDisplay>
    6298:	08 95       	ret

0000629a <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    629a:	bf 92       	push	r11
    629c:	cf 92       	push	r12
    629e:	df 92       	push	r13
    62a0:	ef 92       	push	r14
    62a2:	ff 92       	push	r15
    62a4:	0f 93       	push	r16
    62a6:	1f 93       	push	r17
    62a8:	cf 93       	push	r28
    62aa:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    62ac:	80 34       	cpi	r24, 0x40	; 64
    62ae:	08 f0       	brcs	.+2      	; 0x62b2 <program_toRegister+0x18>
    62b0:	41 c0       	rjmp	.+130    	; 0x6334 <program_toRegister+0x9a>
    62b2:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    62b4:	e8 df       	rcall	.-48     	; 0x6286 <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    62b6:	f1 2c       	mov	r15, r1
    62b8:	f7 01       	movw	r30, r14
    62ba:	ee 0f       	add	r30, r30
    62bc:	ff 1f       	adc	r31, r31
    62be:	c7 01       	movw	r24, r14
    62c0:	88 0f       	add	r24, r24
    62c2:	99 1f       	adc	r25, r25
    62c4:	88 0f       	add	r24, r24
    62c6:	99 1f       	adc	r25, r25
    62c8:	88 0f       	add	r24, r24
    62ca:	99 1f       	adc	r25, r25
    62cc:	e8 0f       	add	r30, r24
    62ce:	f9 1f       	adc	r31, r25
    62d0:	eb 57       	subi	r30, 0x7B	; 123
    62d2:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    62d4:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    62d6:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    62d8:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    62da:	18 c0       	rjmp	.+48     	; 0x630c <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    62dc:	6f 01       	movw	r12, r30
    62de:	8f ef       	ldi	r24, 0xFF	; 255
    62e0:	c8 1a       	sub	r12, r24
    62e2:	d8 0a       	sbc	r13, r24
    62e4:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    62e6:	d0 e0       	ldi	r29, 0x00	; 0
    62e8:	0d c0       	rjmp	.+26     	; 0x6304 <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    62ea:	8c 2f       	mov	r24, r28
    62ec:	81 70       	andi	r24, 0x01	; 1
    62ee:	c0 fd       	sbrc	r28, 0
					result++;
    62f0:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    62f2:	61 e0       	ldi	r22, 0x01	; 1
    62f4:	81 11       	cpse	r24, r1
    62f6:	01 c0       	rjmp	.+2      	; 0x62fa <program_toRegister+0x60>
    62f8:	60 e0       	ldi	r22, 0x00	; 0
    62fa:	81 2f       	mov	r24, r17
    62fc:	0f df       	rcall	.-482    	; 0x611c <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    62fe:	c6 95       	lsr	r28
				regNr++;
    6300:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    6302:	df 5f       	subi	r29, 0xFF	; 255
    6304:	d8 30       	cpi	r29, 0x08	; 8
    6306:	88 f3       	brcs	.-30     	; 0x62ea <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6308:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    630a:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    630c:	87 e0       	ldi	r24, 0x07	; 7
    630e:	8b 15       	cp	r24, r11
    6310:	28 f7       	brcc	.-54     	; 0x62dc <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    6312:	f7 01       	movw	r30, r14
    6314:	ee 0f       	add	r30, r30
    6316:	ff 1f       	adc	r31, r31
    6318:	ee 0c       	add	r14, r14
    631a:	ff 1c       	adc	r15, r15
    631c:	ee 0c       	add	r14, r14
    631e:	ff 1c       	adc	r15, r15
    6320:	ee 0c       	add	r14, r14
    6322:	ff 1c       	adc	r15, r15
    6324:	ee 0d       	add	r30, r14
    6326:	ff 1d       	adc	r31, r15
    6328:	eb 57       	subi	r30, 0x7B	; 123
    632a:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    632c:	80 85       	ldd	r24, Z+8	; 0x08
    632e:	91 85       	ldd	r25, Z+9	; 0x09
    6330:	68 dd       	rcall	.-1328   	; 0x5e02 <setAllCouplers>
    6332:	01 c0       	rjmp	.+2      	; 0x6336 <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    6334:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    6336:	80 2f       	mov	r24, r16
    6338:	df 91       	pop	r29
    633a:	cf 91       	pop	r28
    633c:	1f 91       	pop	r17
    633e:	0f 91       	pop	r16
    6340:	ff 90       	pop	r15
    6342:	ef 90       	pop	r14
    6344:	df 90       	pop	r13
    6346:	cf 90       	pop	r12
    6348:	bf 90       	pop	r11
    634a:	08 95       	ret

0000634c <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    634c:	cf 93       	push	r28
    634e:	c6 2f       	mov	r28, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6350:	90 91 53 09 	lds	r25, 0x0953	; 0x800953 <midi_Setting+0x2>
    6354:	91 11       	cpse	r25, r1
    6356:	14 c0       	rjmp	.+40     	; 0x6380 <midi_ProgramChange+0x34>
    6358:	21 c0       	rjmp	.+66     	; 0x639c <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    635a:	e8 2f       	mov	r30, r24
    635c:	f0 e0       	ldi	r31, 0x00	; 0
    635e:	ee 0f       	add	r30, r30
    6360:	ff 1f       	adc	r31, r31
    6362:	ee 0f       	add	r30, r30
    6364:	ff 1f       	adc	r31, r31
    6366:	e9 0f       	add	r30, r25
    6368:	f1 1d       	adc	r31, r1
    636a:	ee 0f       	add	r30, r30
    636c:	ff 1f       	adc	r31, r31
    636e:	ee 0f       	add	r30, r30
    6370:	ff 1f       	adc	r31, r31
    6372:	e7 5b       	subi	r30, 0xB7	; 183
    6374:	f7 4f       	sbci	r31, 0xF7	; 247
    6376:	20 81       	ld	r18, Z
    6378:	2f 3f       	cpi	r18, 0xFF	; 255
    637a:	39 f4       	brne	.+14     	; 0x638a <midi_ProgramChange+0x3e>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    637c:	9f 5f       	subi	r25, 0xFF	; 255
    637e:	01 c0       	rjmp	.+2      	; 0x6382 <midi_ProgramChange+0x36>
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	94 30       	cpi	r25, 0x04	; 4
    6384:	50 f3       	brcs	.-44     	; 0x635a <midi_ProgramChange+0xe>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    6386:	80 e0       	ldi	r24, 0x00	; 0
    6388:	01 c0       	rjmp	.+2      	; 0x638c <midi_ProgramChange+0x40>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    638a:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    638c:	8f 3f       	cpi	r24, 0xFF	; 255
    638e:	31 f4       	brne	.+12     	; 0x639c <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    6390:	8c 2f       	mov	r24, r28
    6392:	83 df       	rcall	.-250    	; 0x629a <program_toRegister>
			prog_set(program);
    6394:	8c 2f       	mov	r24, r28
    6396:	77 df       	rcall	.-274    	; 0x6286 <prog_set>
			midiLastProgram = program;
    6398:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <midiLastProgram>
		}
	}
	// V 0.58 SW MIDI Through
	//if (channel == midiThrough.InChannel){
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    639c:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <midiThrough+0x1>
    63a0:	8f 3f       	cpi	r24, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    63a2:	21 f0       	breq	.+8      	; 0x63ac <midi_ProgramChange+0x60>
    63a4:	80 6c       	ori	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    63a6:	b4 d6       	rcall	.+3432   	; 0x7110 <serial1MIDISend>
    63a8:	8c 2f       	mov	r24, r28
    63aa:	b2 d6       	rcall	.+3428   	; 0x7110 <serial1MIDISend>
		}
	//} V 0.73 send program change to "thru" out always
}
    63ac:	cf 91       	pop	r28
    63ae:	08 95       	ret

000063b0 <midi_resetRegisters>:


void midi_resetRegisters(){
    63b0:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    63b2:	c0 e0       	ldi	r28, 0x00	; 0
    63b4:	06 c0       	rjmp	.+12     	; 0x63c2 <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    63b6:	8f ef       	ldi	r24, 0xFF	; 255
    63b8:	66 df       	rcall	.-308    	; 0x6286 <prog_set>
		register_onOff(i,REGISTER_OFF);
    63ba:	60 e0       	ldi	r22, 0x00	; 0
    63bc:	8c 2f       	mov	r24, r28
    63be:	ae de       	rcall	.-676    	; 0x611c <register_onOff>
	//} V 0.73 send program change to "thru" out always
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    63c0:	cf 5f       	subi	r28, 0xFF	; 255
    63c2:	80 91 31 08 	lds	r24, 0x0831	; 0x800831 <registerCount>
    63c6:	c8 17       	cp	r28, r24
    63c8:	b0 f3       	brcs	.-20     	; 0x63b6 <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    63ca:	cf 91       	pop	r28
    63cc:	08 95       	ret

000063ce <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display != PROGR_NONE) {
    63ce:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    63d2:	8f 3f       	cpi	r24, 0xFF	; 255
    63d4:	c9 f0       	breq	.+50     	; 0x6408 <prog_toLcd+0x3a>
		lcd_putc('P');
    63d6:	80 e5       	ldi	r24, 0x50	; 80
    63d8:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc('-');
    63dc:	8d e2       	ldi	r24, 0x2D	; 45
    63de:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    63e2:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    63e6:	86 95       	lsr	r24
    63e8:	86 95       	lsr	r24
    63ea:	86 95       	lsr	r24
    63ec:	87 70       	andi	r24, 0x07	; 7
    63ee:	8f 5b       	subi	r24, 0xBF	; 191
    63f0:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    63f4:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <prog_Display>
    63f8:	87 70       	andi	r24, 0x07	; 7
    63fa:	8f 5c       	subi	r24, 0xCF	; 207
    63fc:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		lcd_putc(' ');
    6400:	80 e2       	ldi	r24, 0x20	; 32
    6402:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    6406:	08 95       	ret
	} else {
		lcd_blank(5);
    6408:	85 e0       	ldi	r24, 0x05	; 5
    640a:	0c 94 81 3d 	jmp	0x7b02	; 0x7b02 <lcd_blank>
    640e:	08 95       	ret

00006410 <init_RegOut>:
RegOut_t reg_Out[REGOUT_LEN] = {{LCD_LINE1+1,'1',10,14},{LCD_LINE1+6,' ',15,18},
{LCD_LINE1+10,'2',20,24},{LCD_LINE1+15,' ',25,29},{LCD_LINE2+1,'P',0,4},{LCD_LINE2+6,' ',5,9},
{0,' ',REGISTER_NONE,REGISTER_NONE},{0,' ',REGISTER_NONE,REGISTER_NONE}};

void init_RegOut(){
	if (eeprom_ReadRegOut() == EE_LOAD_ERROR) {
    6410:	0c 94 6a 0c 	jmp	0x18d4	; 0x18d4 <eeprom_ReadRegOut>
    6414:	08 95       	ret

00006416 <reg_toLCD>:
		// load some default values for my organ -> alredy done in array declaration
	}
}

void reg_toLCD(){
    6416:	ff 92       	push	r15
    6418:	0f 93       	push	r16
    641a:	1f 93       	push	r17
    641c:	cf 93       	push	r28
    641e:	df 93       	push	r29
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6420:	f1 2c       	mov	r15, r1
    6422:	52 c0       	rjmp	.+164    	; 0x64c8 <reg_toLCD+0xb2>
		lcd_goto(reg_Out[i].cursor);
    6424:	0f 2d       	mov	r16, r15
    6426:	10 e0       	ldi	r17, 0x00	; 0
    6428:	e8 01       	movw	r28, r16
    642a:	cc 0f       	add	r28, r28
    642c:	dd 1f       	adc	r29, r29
    642e:	cc 0f       	add	r28, r28
    6430:	dd 1f       	adc	r29, r29
    6432:	c0 50       	subi	r28, 0x00	; 0
    6434:	de 4f       	sbci	r29, 0xFE	; 254
    6436:	88 81       	ld	r24, Y
    6438:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    643c:	89 81       	ldd	r24, Y+1	; 0x01
		if ((myChar > ' ') && (myChar <= 0x7F)) {
    643e:	9f ed       	ldi	r25, 0xDF	; 223
    6440:	98 0f       	add	r25, r24
    6442:	9f 35       	cpi	r25, 0x5F	; 95
    6444:	28 f4       	brcc	.+10     	; 0x6450 <reg_toLCD+0x3a>
			// only if valid char
			lcd_putc(myChar);
    6446:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
			lcd_putc(' ');
    644a:	80 e2       	ldi	r24, 0x20	; 32
    644c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
		}
		uint8_t reg = reg_Out[i].regStart;
    6450:	f8 01       	movw	r30, r16
    6452:	ee 0f       	add	r30, r30
    6454:	ff 1f       	adc	r31, r31
    6456:	ee 0f       	add	r30, r30
    6458:	ff 1f       	adc	r31, r31
    645a:	e0 50       	subi	r30, 0x00	; 0
    645c:	fe 4f       	sbci	r31, 0xFE	; 254
    645e:	c2 81       	ldd	r28, Z+2	; 0x02
		if (reg == REGISTER_NONE) {
    6460:	cf 3f       	cpi	r28, 0xFF	; 255
    6462:	21 f5       	brne	.+72     	; 0x64ac <reg_toLCD+0x96>
    6464:	35 c0       	rjmp	.+106    	; 0x64d0 <reg_toLCD+0xba>
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
			if (reg == reg_Out[i].regEnd) {
    6466:	c8 13       	cpse	r28, r24
    6468:	0b c0       	rjmp	.+22     	; 0x6480 <reg_toLCD+0x6a>
				// only one register left for out
				lcd_putc(LCD_CHAR_REG_OFF+ (get_RegisterStatus(reg) == REGISTER_OFF ? 0 : 1));
    646a:	8c 2f       	mov	r24, r28
    646c:	de dd       	rcall	.-1092   	; 0x602a <get_RegisterStatus>
    646e:	88 23       	and	r24, r24
    6470:	11 f0       	breq	.+4      	; 0x6476 <reg_toLCD+0x60>
    6472:	8b e0       	ldi	r24, 0x0B	; 11
    6474:	01 c0       	rjmp	.+2      	; 0x6478 <reg_toLCD+0x62>
    6476:	8a e0       	ldi	r24, 0x0A	; 10
    6478:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    647c:	dc 2f       	mov	r29, r28
    647e:	14 c0       	rjmp	.+40     	; 0x64a8 <reg_toLCD+0x92>
			} else {
				// at least 2 register left
				uint8_t addChar = get_RegisterStatus(reg++) == REGISTER_OFF ? 0 : 2;
    6480:	d1 e0       	ldi	r29, 0x01	; 1
    6482:	dc 0f       	add	r29, r28
    6484:	8c 2f       	mov	r24, r28
    6486:	d1 dd       	rcall	.-1118   	; 0x602a <get_RegisterStatus>
    6488:	81 11       	cpse	r24, r1
    648a:	02 c0       	rjmp	.+4      	; 0x6490 <reg_toLCD+0x7a>
    648c:	c0 e0       	ldi	r28, 0x00	; 0
    648e:	01 c0       	rjmp	.+2      	; 0x6492 <reg_toLCD+0x7c>
    6490:	c2 e0       	ldi	r28, 0x02	; 2
				addChar += get_RegisterStatus(reg) == REGISTER_OFF ? 0 : 1;
    6492:	8d 2f       	mov	r24, r29
    6494:	ca dd       	rcall	.-1132   	; 0x602a <get_RegisterStatus>
    6496:	91 e0       	ldi	r25, 0x01	; 1
    6498:	81 11       	cpse	r24, r1
    649a:	01 c0       	rjmp	.+2      	; 0x649e <reg_toLCD+0x88>
    649c:	90 e0       	ldi	r25, 0x00	; 0
    649e:	89 2f       	mov	r24, r25
    64a0:	8c 0f       	add	r24, r28
    64a2:	84 5f       	subi	r24, 0xF4	; 244
				lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    64a4:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    64a8:	c1 e0       	ldi	r28, 0x01	; 1
			}
			reg++;
    64aa:	cd 0f       	add	r28, r29
    64ac:	f8 01       	movw	r30, r16
		}
		uint8_t reg = reg_Out[i].regStart;
		if (reg == REGISTER_NONE) {
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
    64ae:	ee 0f       	add	r30, r30
    64b0:	ff 1f       	adc	r31, r31
    64b2:	ee 0f       	add	r30, r30
    64b4:	ff 1f       	adc	r31, r31
    64b6:	e0 50       	subi	r30, 0x00	; 0
    64b8:	fe 4f       	sbci	r31, 0xFE	; 254
    64ba:	83 81       	ldd	r24, Z+3	; 0x03
    64bc:	8c 17       	cp	r24, r28
    64be:	98 f6       	brcc	.-90     	; 0x6466 <reg_toLCD+0x50>
    64c0:	80 e2       	ldi	r24, 0x20	; 32
				addChar += get_RegisterStatus(reg) == REGISTER_OFF ? 0 : 1;
				lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
			}
			reg++;
		}
		lcd_putc(' ');
    64c2:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    64c6:	f3 94       	inc	r15
	}
}

void reg_toLCD(){
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    64c8:	87 e0       	ldi	r24, 0x07	; 7
    64ca:	8f 15       	cp	r24, r15
    64cc:	08 f0       	brcs	.+2      	; 0x64d0 <reg_toLCD+0xba>
    64ce:	aa cf       	rjmp	.-172    	; 0x6424 <reg_toLCD+0xe>
    64d0:	df 91       	pop	r29
			}
			reg++;
		}
		lcd_putc(' ');
	}
}
    64d2:	cf 91       	pop	r28
    64d4:	1f 91       	pop	r17
    64d6:	0f 91       	pop	r16
    64d8:	ff 90       	pop	r15
    64da:	08 95       	ret

000064dc <reg_ClearOnLCD>:
    64dc:	1f 93       	push	r17

void reg_ClearOnLCD(){
    64de:	cf 93       	push	r28
    64e0:	df 93       	push	r29
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    64e2:	10 e0       	ldi	r17, 0x00	; 0
    64e4:	1e c0       	rjmp	.+60     	; 0x6522 <reg_ClearOnLCD+0x46>
		lcd_goto(reg_Out[i].cursor);
    64e6:	c1 2f       	mov	r28, r17
    64e8:	d0 e0       	ldi	r29, 0x00	; 0
    64ea:	cc 0f       	add	r28, r28
    64ec:	dd 1f       	adc	r29, r29
    64ee:	cc 0f       	add	r28, r28
    64f0:	dd 1f       	adc	r29, r29
    64f2:	c0 50       	subi	r28, 0x00	; 0
    64f4:	de 4f       	sbci	r29, 0xFE	; 254
    64f6:	88 81       	ld	r24, Y
    64f8:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    64fc:	29 81       	ldd	r18, Y+1	; 0x01
		uint8_t spaceCount;
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
    64fe:	8b 81       	ldd	r24, Y+3	; 0x03
    6500:	9a 81       	ldd	r25, Y+2	; 0x02
    6502:	89 1b       	sub	r24, r25
    6504:	8f 5f       	subi	r24, 0xFF	; 255
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	01 96       	adiw	r24, 0x01	; 1
    650a:	95 95       	asr	r25
    650c:	87 95       	ror	r24
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
    650e:	21 52       	subi	r18, 0x21	; 33
    6510:	2f 35       	cpi	r18, 0x5F	; 95
    6512:	10 f4       	brcc	.+4      	; 0x6518 <reg_ClearOnLCD+0x3c>
    6514:	22 e0       	ldi	r18, 0x02	; 2
    6516:	01 c0       	rjmp	.+2      	; 0x651a <reg_ClearOnLCD+0x3e>
    6518:	20 e0       	ldi	r18, 0x00	; 0
		lcd_blank(spaceCount);
    651a:	82 0f       	add	r24, r18
    651c:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <lcd_blank>
		lcd_putc(' ');
	}
}

void reg_ClearOnLCD(){
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6520:	1f 5f       	subi	r17, 0xFF	; 255
    6522:	18 30       	cpi	r17, 0x08	; 8
    6524:	00 f3       	brcs	.-64     	; 0x64e6 <reg_ClearOnLCD+0xa>
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
		lcd_blank(spaceCount);
	}
}
    6526:	df 91       	pop	r29
    6528:	cf 91       	pop	r28
    652a:	1f 91       	pop	r17
    652c:	08 95       	ret

0000652e <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    652e:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    6530:	e9 e4       	ldi	r30, 0x49	; 73
    6532:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6534:	07 c0       	rjmp	.+14     	; 0x6544 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    6536:	8f ef       	ldi	r24, 0xFF	; 255
    6538:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    653a:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    653c:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    653e:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    6540:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6542:	91 50       	subi	r25, 0x01	; 1
    6544:	91 11       	cpse	r25, r1
    6546:	f7 cf       	rjmp	.-18     	; 0x6536 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    6548:	0e 94 1a 0b 	call	0x1634	; 0x1634 <eeprom_ReadMidiInMap>
    654c:	8f 3f       	cpi	r24, 0xFF	; 255
    654e:	01 f5       	brne	.+64     	; 0x6590 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6550:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    6554:	e9 e4       	ldi	r30, 0x49	; 73
    6556:	f8 e0       	ldi	r31, 0x08	; 8
    6558:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    655a:	84 e2       	ldi	r24, 0x24	; 36
    655c:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    655e:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6560:	98 e3       	ldi	r25, 0x38	; 56
    6562:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    6564:	21 e0       	ldi	r18, 0x01	; 1
    6566:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    6568:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    656a:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    656c:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    656e:	22 e0       	ldi	r18, 0x02	; 2
    6570:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    6572:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    6574:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6576:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    6578:	93 e0       	ldi	r25, 0x03	; 3
    657a:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    657c:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    657e:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    6580:	8e e1       	ldi	r24, 0x1E	; 30
    6582:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6584:	40 e0       	ldi	r20, 0x00	; 0
    6586:	50 e0       	ldi	r21, 0x00	; 0
    6588:	61 e0       	ldi	r22, 0x01	; 1
    658a:	81 e0       	ldi	r24, 0x01	; 1
    658c:	0e 94 ef 16 	call	0x2dde	; 0x2dde <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    6590:	0e 94 9e 0b 	call	0x173c	; 0x173c <eeprom_ReadMidiThrough>
    6594:	8f 3f       	cpi	r24, 0xFF	; 255
    6596:	51 f4       	brne	.+20     	; 0x65ac <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    6598:	e7 e4       	ldi	r30, 0x47	; 71
    659a:	f8 e0       	ldi	r31, 0x08	; 8
    659c:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    659e:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    65a0:	40 e0       	ldi	r20, 0x00	; 0
    65a2:	50 e0       	ldi	r21, 0x00	; 0
    65a4:	61 e0       	ldi	r22, 0x01	; 1
    65a6:	81 e0       	ldi	r24, 0x01	; 1
    65a8:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <log_putError>
    65ac:	08 95       	ret

000065ae <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    65ae:	20 e0       	ldi	r18, 0x00	; 0
    65b0:	09 c0       	rjmp	.+18     	; 0x65c4 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    65b2:	88 0f       	add	r24, r24
    65b4:	99 1f       	adc	r25, r25
    65b6:	fc 01       	movw	r30, r24
    65b8:	e7 5b       	subi	r30, 0xB7	; 183
    65ba:	f6 4f       	sbci	r31, 0xF6	; 246
    65bc:	8f ef       	ldi	r24, 0xFF	; 255
    65be:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    65c0:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    65c2:	2f 5f       	subi	r18, 0xFF	; 255
    65c4:	82 2f       	mov	r24, r18
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	00 97       	sbiw	r24, 0x00	; 0
    65ca:	99 f7       	brne	.-26     	; 0x65b2 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    65cc:	0e 94 42 0b 	call	0x1684	; 0x1684 <eeprom_ReadMidiOutMap>
    65d0:	8f 3f       	cpi	r24, 0xFF	; 255
    65d2:	b1 f4       	brne	.+44     	; 0x6600 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    65d4:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    65d8:	e9 e4       	ldi	r30, 0x49	; 73
    65da:	f9 e0       	ldi	r31, 0x09	; 9
    65dc:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    65de:	91 e0       	ldi	r25, 0x01	; 1
    65e0:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    65e2:	92 e0       	ldi	r25, 0x02	; 2
    65e4:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    65e6:	93 e0       	ldi	r25, 0x03	; 3
    65e8:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    65ea:	e1 e5       	ldi	r30, 0x51	; 81
    65ec:	f9 e0       	ldi	r31, 0x09	; 9
    65ee:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    65f0:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    65f2:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    65f4:	40 e0       	ldi	r20, 0x00	; 0
    65f6:	50 e0       	ldi	r21, 0x00	; 0
    65f8:	62 e0       	ldi	r22, 0x02	; 2
    65fa:	81 e0       	ldi	r24, 0x01	; 1
    65fc:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <log_putError>
    6600:	08 95       	ret

00006602 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    6602:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    6604:	8f ef       	ldi	r24, 0xFF	; 255
    6606:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    6608:	e4 30       	cpi	r30, 0x04	; 4
    660a:	50 f4       	brcc	.+20     	; 0x6620 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	ee 0f       	add	r30, r30
    6610:	ff 1f       	adc	r31, r31
    6612:	e7 5b       	subi	r30, 0xB7	; 183
    6614:	f6 4f       	sbci	r31, 0xF6	; 246
    6616:	20 81       	ld	r18, Z
    6618:	2f 3f       	cpi	r18, 0xFF	; 255
    661a:	11 f0       	breq	.+4      	; 0x6620 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    661c:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    661e:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    6620:	08 95       	ret

00006622 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6622:	70 e0       	ldi	r23, 0x00	; 0
    6624:	52 c0       	rjmp	.+164    	; 0x66ca <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    6626:	87 2f       	mov	r24, r23
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	24 2f       	mov	r18, r20
    662c:	30 e0       	ldi	r19, 0x00	; 0
    662e:	f9 01       	movw	r30, r18
    6630:	ee 0f       	add	r30, r30
    6632:	ff 1f       	adc	r31, r31
    6634:	df 01       	movw	r26, r30
    6636:	a2 0f       	add	r26, r18
    6638:	b3 1f       	adc	r27, r19
    663a:	fc 01       	movw	r30, r24
    663c:	ee 0f       	add	r30, r30
    663e:	ff 1f       	adc	r31, r31
    6640:	e8 0f       	add	r30, r24
    6642:	f9 1f       	adc	r31, r25
    6644:	ee 0f       	add	r30, r30
    6646:	ff 1f       	adc	r31, r31
    6648:	ee 0f       	add	r30, r30
    664a:	ff 1f       	adc	r31, r31
    664c:	ea 0f       	add	r30, r26
    664e:	fb 1f       	adc	r31, r27
    6650:	eb 5a       	subi	r30, 0xAB	; 171
    6652:	f6 4f       	sbci	r31, 0xF6	; 246
    6654:	a0 81       	ld	r26, Z
    6656:	af 3f       	cpi	r26, 0xFF	; 255
    6658:	d9 f0       	breq	.+54     	; 0x6690 <Midi_updateManualRange+0x6e>
    665a:	f9 01       	movw	r30, r18
    665c:	ee 0f       	add	r30, r30
    665e:	ff 1f       	adc	r31, r31
    6660:	e2 0f       	add	r30, r18
    6662:	f3 1f       	adc	r31, r19
    6664:	9c 01       	movw	r18, r24
    6666:	22 0f       	add	r18, r18
    6668:	33 1f       	adc	r19, r19
    666a:	28 0f       	add	r18, r24
    666c:	39 1f       	adc	r19, r25
    666e:	22 0f       	add	r18, r18
    6670:	33 1f       	adc	r19, r19
    6672:	22 0f       	add	r18, r18
    6674:	33 1f       	adc	r19, r19
    6676:	e2 0f       	add	r30, r18
    6678:	f3 1f       	adc	r31, r19
    667a:	eb 5a       	subi	r30, 0xAB	; 171
    667c:	f6 4f       	sbci	r31, 0xF6	; 246
    667e:	21 81       	ldd	r18, Z+1	; 0x01
    6680:	2f 3f       	cpi	r18, 0xFF	; 255
    6682:	31 f0       	breq	.+12     	; 0x6690 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6684:	a6 17       	cp	r26, r22
    6686:	08 f4       	brcc	.+2      	; 0x668a <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    6688:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    668a:	52 17       	cp	r21, r18
    668c:	08 f4       	brcc	.+2      	; 0x6690 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    668e:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    6690:	55 23       	and	r21, r21
    6692:	11 f0       	breq	.+4      	; 0x6698 <Midi_updateManualRange+0x76>
    6694:	6f 3f       	cpi	r22, 0xFF	; 255
    6696:	49 f4       	brne	.+18     	; 0x66aa <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    6698:	88 0f       	add	r24, r24
    669a:	99 1f       	adc	r25, r25
    669c:	fc 01       	movw	r30, r24
    669e:	e1 5c       	subi	r30, 0xC1	; 193
    66a0:	f7 4f       	sbci	r31, 0xF7	; 247
    66a2:	8f ef       	ldi	r24, 0xFF	; 255
    66a4:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    66a6:	81 83       	std	Z+1, r24	; 0x01
    66a8:	07 c0       	rjmp	.+14     	; 0x66b8 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    66aa:	88 0f       	add	r24, r24
    66ac:	99 1f       	adc	r25, r25
    66ae:	fc 01       	movw	r30, r24
    66b0:	e1 5c       	subi	r30, 0xC1	; 193
    66b2:	f7 4f       	sbci	r31, 0xF7	; 247
    66b4:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    66b6:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    66b8:	4f 5f       	subi	r20, 0xFF	; 255
    66ba:	03 c0       	rjmp	.+6      	; 0x66c2 <Midi_updateManualRange+0xa0>
    66bc:	40 e0       	ldi	r20, 0x00	; 0
    66be:	6f ef       	ldi	r22, 0xFF	; 255
    66c0:	50 e0       	ldi	r21, 0x00	; 0
    66c2:	44 30       	cpi	r20, 0x04	; 4
    66c4:	08 f4       	brcc	.+2      	; 0x66c8 <Midi_updateManualRange+0xa6>
    66c6:	af cf       	rjmp	.-162    	; 0x6626 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    66c8:	7f 5f       	subi	r23, 0xFF	; 255
    66ca:	74 30       	cpi	r23, 0x04	; 4
    66cc:	b8 f3       	brcs	.-18     	; 0x66bc <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    66ce:	08 95       	ret

000066d0 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    66d0:	63 e0       	ldi	r22, 0x03	; 3
    66d2:	28 c0       	rjmp	.+80     	; 0x6724 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    66d4:	86 2f       	mov	r24, r22
    66d6:	06 2e       	mov	r0, r22
    66d8:	00 0c       	add	r0, r0
    66da:	99 0b       	sbc	r25, r25
    66dc:	42 2f       	mov	r20, r18
    66de:	02 2e       	mov	r0, r18
    66e0:	00 0c       	add	r0, r0
    66e2:	55 0b       	sbc	r21, r21
    66e4:	fa 01       	movw	r30, r20
    66e6:	ee 0f       	add	r30, r30
    66e8:	ff 1f       	adc	r31, r31
    66ea:	e4 0f       	add	r30, r20
    66ec:	f5 1f       	adc	r31, r21
    66ee:	ac 01       	movw	r20, r24
    66f0:	44 0f       	add	r20, r20
    66f2:	55 1f       	adc	r21, r21
    66f4:	da 01       	movw	r26, r20
    66f6:	a8 0f       	add	r26, r24
    66f8:	b9 1f       	adc	r27, r25
    66fa:	aa 0f       	add	r26, r26
    66fc:	bb 1f       	adc	r27, r27
    66fe:	aa 0f       	add	r26, r26
    6700:	bb 1f       	adc	r27, r27
    6702:	ae 0f       	add	r26, r30
    6704:	bf 1f       	adc	r27, r31
    6706:	ab 5a       	subi	r26, 0xAB	; 171
    6708:	b6 4f       	sbci	r27, 0xF6	; 246
    670a:	3f ef       	ldi	r19, 0xFF	; 255
    670c:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    670e:	11 96       	adiw	r26, 0x01	; 1
    6710:	3c 93       	st	X, r19
    6712:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    6714:	fd 01       	movw	r30, r26
    6716:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    6718:	21 50       	subi	r18, 0x01	; 1
    671a:	01 c0       	rjmp	.+2      	; 0x671e <init_Manual2Module+0x4e>
    671c:	23 e0       	ldi	r18, 0x03	; 3
    671e:	22 23       	and	r18, r18
    6720:	cc f6       	brge	.-78     	; 0x66d4 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    6722:	61 50       	subi	r22, 0x01	; 1
    6724:	66 23       	and	r22, r22
    6726:	d4 f7       	brge	.-12     	; 0x671c <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    6728:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <eeprom_ReadManualMap>
    672c:	8f 3f       	cpi	r24, 0xFF	; 255
    672e:	79 f5       	brne	.+94     	; 0x678e <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    6730:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    6734:	40 e0       	ldi	r20, 0x00	; 0
    6736:	50 e0       	ldi	r21, 0x00	; 0
    6738:	63 e0       	ldi	r22, 0x03	; 3
    673a:	81 e0       	ldi	r24, 0x01	; 1
    673c:	0e 94 ef 16 	call	0x2dde	; 0x2dde <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    6740:	e5 e5       	ldi	r30, 0x55	; 85
    6742:	f9 e0       	ldi	r31, 0x09	; 9
    6744:	84 e2       	ldi	r24, 0x24	; 36
    6746:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    6748:	33 e4       	ldi	r19, 0x43	; 67
    674a:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    674c:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    674e:	24 e4       	ldi	r18, 0x44	; 68
    6750:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    6752:	9b e5       	ldi	r25, 0x5B	; 91
    6754:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    6756:	40 e2       	ldi	r20, 0x20	; 32
    6758:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    675a:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    675c:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    675e:	40 e4       	ldi	r20, 0x40	; 64
    6760:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    6762:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6764:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6766:	40 e6       	ldi	r20, 0x60	; 96
    6768:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    676a:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    676c:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    676e:	30 e8       	ldi	r19, 0x80	; 128
    6770:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    6772:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6774:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6776:	90 ea       	ldi	r25, 0xA0	; 160
    6778:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    677a:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    677c:	81 e4       	ldi	r24, 0x41	; 65
    677e:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    6780:	80 ec       	ldi	r24, 0xC0	; 192
    6782:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6784:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    6786:	8d e1       	ldi	r24, 0x1D	; 29
    6788:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    678a:	80 ee       	ldi	r24, 0xE0	; 224
    678c:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    678e:	49 cf       	rjmp	.-366    	; 0x6622 <Midi_updateManualRange>
    6790:	08 95       	ret

00006792 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    6792:	84 30       	cpi	r24, 0x04	; 4
    6794:	d8 f4       	brcc	.+54     	; 0x67cc <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	fc 01       	movw	r30, r24
    679a:	ee 0f       	add	r30, r30
    679c:	ff 1f       	adc	r31, r31
    679e:	e8 0f       	add	r30, r24
    67a0:	f9 1f       	adc	r31, r25
    67a2:	ee 0f       	add	r30, r30
    67a4:	ff 1f       	adc	r31, r31
    67a6:	ee 0f       	add	r30, r30
    67a8:	ff 1f       	adc	r31, r31
    67aa:	eb 5a       	subi	r30, 0xAB	; 171
    67ac:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    67ae:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    67b0:	20 81       	ld	r18, Z
    67b2:	62 17       	cp	r22, r18
    67b4:	40 f0       	brcs	.+16     	; 0x67c6 <manualNote_to_moduleBit+0x34>
    67b6:	91 81       	ldd	r25, Z+1	; 0x01
    67b8:	96 17       	cp	r25, r22
    67ba:	28 f0       	brcs	.+10     	; 0x67c6 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    67bc:	92 81       	ldd	r25, Z+2	; 0x02
    67be:	62 1b       	sub	r22, r18
				return (result);
    67c0:	80 e0       	ldi	r24, 0x00	; 0
    67c2:	96 0f       	add	r25, r22
    67c4:	08 95       	ret
			}
			pRange++;
    67c6:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    67c8:	81 50       	subi	r24, 0x01	; 1
    67ca:	91 f7       	brne	.-28     	; 0x67b0 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    67cc:	8f ef       	ldi	r24, 0xFF	; 255
    67ce:	90 e0       	ldi	r25, 0x00	; 0
}
    67d0:	08 95       	ret

000067d2 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    67d2:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    67d4:	e5 e5       	ldi	r30, 0x55	; 85
    67d6:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    67d8:	44 e0       	ldi	r20, 0x04	; 4
    67da:	16 c0       	rjmp	.+44     	; 0x6808 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    67dc:	52 81       	ldd	r21, Z+2	; 0x02
    67de:	85 17       	cp	r24, r21
    67e0:	88 f0       	brcs	.+34     	; 0x6804 <moduleBit_to_manualNote+0x32>
    67e2:	68 2f       	mov	r22, r24
    67e4:	70 e0       	ldi	r23, 0x00	; 0
    67e6:	21 81       	ldd	r18, Z+1	; 0x01
    67e8:	a0 81       	ld	r26, Z
    67ea:	30 e0       	ldi	r19, 0x00	; 0
    67ec:	2a 1b       	sub	r18, r26
    67ee:	31 09       	sbc	r19, r1
    67f0:	25 0f       	add	r18, r21
    67f2:	31 1d       	adc	r19, r1
    67f4:	26 17       	cp	r18, r22
    67f6:	37 07       	cpc	r19, r23
    67f8:	2c f0       	brlt	.+10     	; 0x6804 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    67fa:	98 2f       	mov	r25, r24
    67fc:	95 1b       	sub	r25, r21
				return(result);
    67fe:	8b 2f       	mov	r24, r27
    6800:	9a 0f       	add	r25, r26
    6802:	08 95       	ret
			}
			pRange++;
    6804:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6806:	41 50       	subi	r20, 0x01	; 1
    6808:	41 11       	cpse	r20, r1
    680a:	e8 cf       	rjmp	.-48     	; 0x67dc <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    680c:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    680e:	b5 30       	cpi	r27, 0x05	; 5
    6810:	18 f3       	brcs	.-58     	; 0x67d8 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    6812:	8f ef       	ldi	r24, 0xFF	; 255
    6814:	90 e0       	ldi	r25, 0x00	; 0
}
    6816:	08 95       	ret

00006818 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    6818:	ef 92       	push	r14
    681a:	ff 92       	push	r15
    681c:	0f 93       	push	r16
    681e:	1f 93       	push	r17
    6820:	cf 93       	push	r28
    6822:	df 93       	push	r29
    6824:	c8 2f       	mov	r28, r24
    6826:	06 2f       	mov	r16, r22
    6828:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    682a:	b3 df       	rcall	.-154    	; 0x6792 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    682c:	49 2f       	mov	r20, r25
    682e:	42 95       	swap	r20
    6830:	46 95       	lsr	r20
    6832:	47 70       	andi	r20, 0x07	; 7
    6834:	21 e0       	ldi	r18, 0x01	; 1
    6836:	30 e0       	ldi	r19, 0x00	; 0
    6838:	79 01       	movw	r14, r18
    683a:	02 c0       	rjmp	.+4      	; 0x6840 <manual_NoteOnOff+0x28>
    683c:	ee 0c       	add	r14, r14
    683e:	ff 1c       	adc	r15, r15
    6840:	4a 95       	dec	r20
    6842:	e2 f7       	brpl	.-8      	; 0x683c <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6844:	19 2f       	mov	r17, r25
    6846:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    6848:	81 11       	cpse	r24, r1
    684a:	1a c0       	rjmp	.+52     	; 0x6880 <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    684c:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <pipe_Module+0x1>
    6850:	8e 21       	and	r24, r14
    6852:	59 f4       	brne	.+22     	; 0x686a <manual_NoteOnOff+0x52>
    6854:	dd 23       	and	r29, r29
    6856:	4c f0       	brlt	.+18     	; 0x686a <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6858:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    685a:	d1 30       	cpi	r29, 0x01	; 1
    685c:	11 f4       	brne	.+4      	; 0x6862 <manual_NoteOnOff+0x4a>
    685e:	90 e2       	ldi	r25, 0x20	; 32
    6860:	01 c0       	rjmp	.+2      	; 0x6864 <manual_NoteOnOff+0x4c>
    6862:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6864:	8e 2d       	mov	r24, r14
    6866:	91 2b       	or	r25, r17
    6868:	41 da       	rcall	.-2942   	; 0x5cec <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    686a:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    686c:	29 f4       	brne	.+10     	; 0x6878 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    686e:	6e 2d       	mov	r22, r14
    6870:	81 2f       	mov	r24, r17
    6872:	0e 94 da 12 	call	0x25b4	; 0x25b4 <pipe_off>
    6876:	04 c0       	rjmp	.+8      	; 0x6880 <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6878:	6e 2d       	mov	r22, r14
    687a:	81 2f       	mov	r24, r17
    687c:	0e 94 cb 12 	call	0x2596	; 0x2596 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    6880:	ec 2f       	mov	r30, r28
    6882:	f0 e0       	ldi	r31, 0x00	; 0
    6884:	ee 0f       	add	r30, r30
    6886:	ff 1f       	adc	r31, r31
    6888:	e7 5b       	subi	r30, 0xB7	; 183
    688a:	f6 4f       	sbci	r31, 0xF6	; 246
    688c:	81 81       	ldd	r24, Z+1	; 0x01
    688e:	8f 3f       	cpi	r24, 0xFF	; 255
    6890:	a9 f0       	breq	.+42     	; 0x68bc <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    6892:	d1 30       	cpi	r29, 0x01	; 1
    6894:	31 f0       	breq	.+12     	; 0x68a2 <manual_NoteOnOff+0x8a>
    6896:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <midi_Setting+0x1>
    689a:	99 23       	and	r25, r25
    689c:	21 f0       	breq	.+8      	; 0x68a6 <manual_NoteOnOff+0x8e>
    689e:	90 e9       	ldi	r25, 0x90	; 144
    68a0:	03 c0       	rjmp	.+6      	; 0x68a8 <manual_NoteOnOff+0x90>
    68a2:	90 e9       	ldi	r25, 0x90	; 144
    68a4:	01 c0       	rjmp	.+2      	; 0x68a8 <manual_NoteOnOff+0x90>
    68a6:	90 e8       	ldi	r25, 0x80	; 128
    68a8:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    68aa:	32 d4       	rcall	.+2148   	; 0x7110 <serial1MIDISend>
    68ac:	80 2f       	mov	r24, r16
    68ae:	30 d4       	rcall	.+2144   	; 0x7110 <serial1MIDISend>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    68b0:	d1 11       	cpse	r29, r1
    68b2:	02 c0       	rjmp	.+4      	; 0x68b8 <manual_NoteOnOff+0xa0>
    68b4:	80 e0       	ldi	r24, 0x00	; 0
    68b6:	01 c0       	rjmp	.+2      	; 0x68ba <manual_NoteOnOff+0xa2>
    68b8:	80 e4       	ldi	r24, 0x40	; 64
    68ba:	2a d4       	rcall	.+2132   	; 0x7110 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    68bc:	df 91       	pop	r29
    68be:	cf 91       	pop	r28
    68c0:	1f 91       	pop	r17
    68c2:	0f 91       	pop	r16
    68c4:	ff 90       	pop	r15
    68c6:	ef 90       	pop	r14
    68c8:	08 95       	ret

000068ca <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    68ca:	bf 92       	push	r11
    68cc:	cf 92       	push	r12
    68ce:	df 92       	push	r13
    68d0:	ef 92       	push	r14
    68d2:	ff 92       	push	r15
    68d4:	0f 93       	push	r16
    68d6:	1f 93       	push	r17
    68d8:	cf 93       	push	r28
    68da:	df 93       	push	r29
    68dc:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    68de:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    68e0:	4c c0       	rjmp	.+152    	; 0x697a <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    68e2:	0c 2d       	mov	r16, r12
    68e4:	10 e0       	ldi	r17, 0x00	; 0
    68e6:	cd 2d       	mov	r28, r13
    68e8:	d0 e0       	ldi	r29, 0x00	; 0
    68ea:	f8 01       	movw	r30, r16
    68ec:	ee 0f       	add	r30, r30
    68ee:	ff 1f       	adc	r31, r31
    68f0:	ee 0f       	add	r30, r30
    68f2:	ff 1f       	adc	r31, r31
    68f4:	ec 0f       	add	r30, r28
    68f6:	fd 1f       	adc	r31, r29
    68f8:	ee 0f       	add	r30, r30
    68fa:	ff 1f       	adc	r31, r31
    68fc:	ee 0f       	add	r30, r30
    68fe:	ff 1f       	adc	r31, r31
    6900:	e7 5b       	subi	r30, 0xB7	; 183
    6902:	f7 4f       	sbci	r31, 0xF7	; 247
    6904:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    6906:	83 e0       	ldi	r24, 0x03	; 3
    6908:	8b 15       	cp	r24, r11
    690a:	b0 f1       	brcs	.+108    	; 0x6978 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    690c:	f8 01       	movw	r30, r16
    690e:	ee 0f       	add	r30, r30
    6910:	ff 1f       	adc	r31, r31
    6912:	ee 0f       	add	r30, r30
    6914:	ff 1f       	adc	r31, r31
    6916:	ec 0f       	add	r30, r28
    6918:	fd 1f       	adc	r31, r29
    691a:	ee 0f       	add	r30, r30
    691c:	ff 1f       	adc	r31, r31
    691e:	ee 0f       	add	r30, r30
    6920:	ff 1f       	adc	r31, r31
    6922:	e7 5b       	subi	r30, 0xB7	; 183
    6924:	f7 4f       	sbci	r31, 0xF7	; 247
    6926:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6928:	f2 80       	ldd	r15, Z+2	; 0x02
    692a:	15 c0       	rjmp	.+42     	; 0x6956 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    692c:	ee 24       	eor	r14, r14
    692e:	e3 94       	inc	r14
    6930:	e6 0e       	add	r14, r22
    6932:	f8 01       	movw	r30, r16
    6934:	ee 0f       	add	r30, r30
    6936:	ff 1f       	adc	r31, r31
    6938:	ee 0f       	add	r30, r30
    693a:	ff 1f       	adc	r31, r31
    693c:	ec 0f       	add	r30, r28
    693e:	fd 1f       	adc	r31, r29
    6940:	ee 0f       	add	r30, r30
    6942:	ff 1f       	adc	r31, r31
    6944:	ee 0f       	add	r30, r30
    6946:	ff 1f       	adc	r31, r31
    6948:	e7 5b       	subi	r30, 0xB7	; 183
    694a:	f7 4f       	sbci	r31, 0xF7	; 247
    694c:	40 e8       	ldi	r20, 0x80	; 128
    694e:	80 81       	ld	r24, Z
    6950:	63 df       	rcall	.-314    	; 0x6818 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6952:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6954:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6956:	f1 10       	cpse	r15, r1
    6958:	e9 cf       	rjmp	.-46     	; 0x692c <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    695a:	eb 2d       	mov	r30, r11
    695c:	f0 e0       	ldi	r31, 0x00	; 0
    695e:	ee 0f       	add	r30, r30
    6960:	ff 1f       	adc	r31, r31
    6962:	e7 5b       	subi	r30, 0xB7	; 183
    6964:	f6 4f       	sbci	r31, 0xF6	; 246
    6966:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6968:	80 31       	cpi	r24, 0x10	; 16
    696a:	30 f4       	brcc	.+12     	; 0x6978 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    696c:	80 6b       	ori	r24, 0xB0	; 176
    696e:	d0 d3       	rcall	.+1952   	; 0x7110 <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6970:	8b e7       	ldi	r24, 0x7B	; 123
    6972:	ce d3       	rcall	.+1948   	; 0x7110 <serial1MIDISend>
				serial1MIDISend(0);
    6974:	80 e0       	ldi	r24, 0x00	; 0
    6976:	cc d3       	rcall	.+1944   	; 0x7110 <serial1MIDISend>
    6978:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    697a:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    697c:	8d 15       	cp	r24, r13
    697e:	08 f0       	brcs	.+2      	; 0x6982 <midiAllNotesOff+0xb8>
    6980:	b0 cf       	rjmp	.-160    	; 0x68e2 <midiAllNotesOff+0x18>
    6982:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6984:	cf 91       	pop	r28
    6986:	1f 91       	pop	r17
    6988:	0f 91       	pop	r16
    698a:	ff 90       	pop	r15
    698c:	ef 90       	pop	r14
    698e:	df 90       	pop	r13
    6990:	cf 90       	pop	r12
    6992:	bf 90       	pop	r11
    6994:	08 95       	ret

00006996 <midi_ManualOff>:
    6996:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6998:	1f 93       	push	r17
    699a:	cf 93       	push	r28
    699c:	df 93       	push	r29
    699e:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    69a0:	84 30       	cpi	r24, 0x04	; 4
    69a2:	00 f5       	brcc	.+64     	; 0x69e4 <midi_ManualOff+0x4e>
    69a4:	08 2f       	mov	r16, r24
    69a6:	10 e0       	ldi	r17, 0x00	; 0
    69a8:	f8 01       	movw	r30, r16
    69aa:	ee 0f       	add	r30, r30
    69ac:	ff 1f       	adc	r31, r31
    69ae:	e1 5c       	subi	r30, 0xC1	; 193
    69b0:	f7 4f       	sbci	r31, 0xF7	; 247
    69b2:	d0 81       	ld	r29, Z
    69b4:	df 3f       	cpi	r29, 0xFF	; 255
    69b6:	b1 f0       	breq	.+44     	; 0x69e4 <midi_ManualOff+0x4e>
    69b8:	f8 01       	movw	r30, r16
    69ba:	ee 0f       	add	r30, r30
    69bc:	ff 1f       	adc	r31, r31
    69be:	e1 5c       	subi	r30, 0xC1	; 193
    69c0:	f7 4f       	sbci	r31, 0xF7	; 247
    69c2:	81 81       	ldd	r24, Z+1	; 0x01
    69c4:	8f 3f       	cpi	r24, 0xFF	; 255
    69c6:	31 f4       	brne	.+12     	; 0x69d4 <midi_ManualOff+0x3e>
    69c8:	0d c0       	rjmp	.+26     	; 0x69e4 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    69ca:	40 e8       	ldi	r20, 0x80	; 128
    69cc:	6d 2f       	mov	r22, r29
    69ce:	8c 2f       	mov	r24, r28
    69d0:	23 df       	rcall	.-442    	; 0x6818 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    69d2:	df 5f       	subi	r29, 0xFF	; 255
    69d4:	f8 01       	movw	r30, r16
    69d6:	ee 0f       	add	r30, r30
    69d8:	ff 1f       	adc	r31, r31
    69da:	e1 5c       	subi	r30, 0xC1	; 193
    69dc:	f7 4f       	sbci	r31, 0xF7	; 247
    69de:	81 81       	ldd	r24, Z+1	; 0x01
    69e0:	8d 17       	cp	r24, r29
    69e2:	98 f7       	brcc	.-26     	; 0x69ca <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    69e4:	ec 2f       	mov	r30, r28
    69e6:	f0 e0       	ldi	r31, 0x00	; 0
    69e8:	ee 0f       	add	r30, r30
    69ea:	ff 1f       	adc	r31, r31
    69ec:	e7 5b       	subi	r30, 0xB7	; 183
    69ee:	f6 4f       	sbci	r31, 0xF6	; 246
    69f0:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    69f2:	80 31       	cpi	r24, 0x10	; 16
    69f4:	30 f4       	brcc	.+12     	; 0x6a02 <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    69f6:	80 6b       	ori	r24, 0xB0	; 176
    69f8:	8b d3       	rcall	.+1814   	; 0x7110 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    69fa:	8b e7       	ldi	r24, 0x7B	; 123
    69fc:	89 d3       	rcall	.+1810   	; 0x7110 <serial1MIDISend>
		serial1MIDISend(0);
    69fe:	80 e0       	ldi	r24, 0x00	; 0
    6a00:	87 d3       	rcall	.+1806   	; 0x7110 <serial1MIDISend>
    6a02:	df 91       	pop	r29

	}
}
    6a04:	cf 91       	pop	r28
    6a06:	1f 91       	pop	r17
    6a08:	0f 91       	pop	r16
    6a0a:	08 95       	ret

00006a0c <midi_AllManualsOff>:
    6a0c:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6a0e:	c0 e0       	ldi	r28, 0x00	; 0
    6a10:	03 c0       	rjmp	.+6      	; 0x6a18 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6a12:	8c 2f       	mov	r24, r28
    6a14:	c0 df       	rcall	.-128    	; 0x6996 <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6a16:	cf 5f       	subi	r28, 0xFF	; 255
    6a18:	c4 30       	cpi	r28, 0x04	; 4
    6a1a:	d8 f3       	brcs	.-10     	; 0x6a12 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    6a1c:	cf 91       	pop	r28
    6a1e:	08 95       	ret

00006a20 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6a20:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <midiRxActivceSensing>
    6a24:	88 23       	and	r24, r24
    6a26:	39 f0       	breq	.+14     	; 0x6a36 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6a28:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <swTimer+0x6>
    6a2c:	81 11       	cpse	r24, r1
    6a2e:	03 c0       	rjmp	.+6      	; 0x6a36 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6a30:	ed df       	rcall	.-38     	; 0x6a0c <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6a32:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <midiRxActivceSensing>
    6a36:	08 95       	ret

00006a38 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6a38:	0f 93       	push	r16
    6a3a:	1f 93       	push	r17
    6a3c:	cf 93       	push	r28
    6a3e:	df 93       	push	r29
    6a40:	06 2f       	mov	r16, r22
    6a42:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6a44:	d8 2f       	mov	r29, r24
    6a46:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6a48:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6a4a:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6a4c:	3c c0       	rjmp	.+120    	; 0x6ac6 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    6a4e:	4d 2f       	mov	r20, r29
    6a50:	50 e0       	ldi	r21, 0x00	; 0
    6a52:	2c 2f       	mov	r18, r28
    6a54:	30 e0       	ldi	r19, 0x00	; 0
    6a56:	fa 01       	movw	r30, r20
    6a58:	ee 0f       	add	r30, r30
    6a5a:	ff 1f       	adc	r31, r31
    6a5c:	ee 0f       	add	r30, r30
    6a5e:	ff 1f       	adc	r31, r31
    6a60:	e2 0f       	add	r30, r18
    6a62:	f3 1f       	adc	r31, r19
    6a64:	ee 0f       	add	r30, r30
    6a66:	ff 1f       	adc	r31, r31
    6a68:	ee 0f       	add	r30, r30
    6a6a:	ff 1f       	adc	r31, r31
    6a6c:	e7 5b       	subi	r30, 0xB7	; 183
    6a6e:	f7 4f       	sbci	r31, 0xF7	; 247
    6a70:	80 81       	ld	r24, Z
    6a72:	84 30       	cpi	r24, 0x04	; 4
    6a74:	38 f5       	brcc	.+78     	; 0x6ac4 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6a76:	df 01       	movw	r26, r30
    6a78:	61 81       	ldd	r22, Z+1	; 0x01
    6a7a:	70 2f       	mov	r23, r16
    6a7c:	76 1b       	sub	r23, r22
    6a7e:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6a80:	0a f1       	brmi	.+66     	; 0x6ac4 <midiNote_to_Manual+0x8c>
    6a82:	fd 01       	movw	r30, r26
    6a84:	e2 81       	ldd	r30, Z+2	; 0x02
    6a86:	f0 e0       	ldi	r31, 0x00	; 0
    6a88:	a7 2f       	mov	r26, r23
    6a8a:	77 0f       	add	r23, r23
    6a8c:	bb 0b       	sbc	r27, r27
    6a8e:	ae 17       	cp	r26, r30
    6a90:	bf 07       	cpc	r27, r31
    6a92:	c4 f4       	brge	.+48     	; 0x6ac4 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6a94:	fa 01       	movw	r30, r20
    6a96:	ee 0f       	add	r30, r30
    6a98:	ff 1f       	adc	r31, r31
    6a9a:	ee 0f       	add	r30, r30
    6a9c:	ff 1f       	adc	r31, r31
    6a9e:	e2 0f       	add	r30, r18
    6aa0:	f3 1f       	adc	r31, r19
    6aa2:	ee 0f       	add	r30, r30
    6aa4:	ff 1f       	adc	r31, r31
    6aa6:	ee 0f       	add	r30, r30
    6aa8:	ff 1f       	adc	r31, r31
    6aaa:	e7 5b       	subi	r30, 0xB7	; 183
    6aac:	f7 4f       	sbci	r31, 0xF7	; 247
    6aae:	93 81       	ldd	r25, Z+3	; 0x03
    6ab0:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6ab2:	11 30       	cpi	r17, 0x01	; 1
    6ab4:	21 f4       	brne	.+8      	; 0x6abe <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6ab6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6aba:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    6abe:	41 2f       	mov	r20, r17
    6ac0:	ab de       	rcall	.-682    	; 0x6818 <manual_NoteOnOff>
				found |= 0xFF;
    6ac2:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6ac4:	cf 5f       	subi	r28, 0xFF	; 255
    6ac6:	c4 30       	cpi	r28, 0x04	; 4
    6ac8:	08 f4       	brcc	.+2      	; 0x6acc <midiNote_to_Manual+0x94>
    6aca:	c1 cf       	rjmp	.-126    	; 0x6a4e <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    6acc:	11 30       	cpi	r17, 0x01	; 1
    6ace:	49 f4       	brne	.+18     	; 0x6ae2 <midiNote_to_Manual+0xaa>
    6ad0:	91 11       	cpse	r25, r1
    6ad2:	07 c0       	rjmp	.+14     	; 0x6ae2 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6ad4:	00 93 23 02 	sts	0x0223, r16	; 0x800223 <midiLastInNote>
		midiLastInChannel = channel;
    6ad8:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    6adc:	8f ef       	ldi	r24, 0xFF	; 255
    6ade:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6ae2:	80 91 47 08 	lds	r24, 0x0847	; 0x800847 <midiThrough>
    6ae6:	d8 13       	cpse	r29, r24
    6ae8:	1f c0       	rjmp	.+62     	; 0x6b28 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6aea:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <midiThrough+0x1>
    6aee:	8f 3f       	cpi	r24, 0xFF	; 255
    6af0:	d9 f0       	breq	.+54     	; 0x6b28 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    6af2:	11 30       	cpi	r17, 0x01	; 1
    6af4:	31 f0       	breq	.+12     	; 0x6b02 <midiNote_to_Manual+0xca>
    6af6:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <midi_Setting+0x1>
    6afa:	99 23       	and	r25, r25
    6afc:	21 f0       	breq	.+8      	; 0x6b06 <midiNote_to_Manual+0xce>
    6afe:	90 e9       	ldi	r25, 0x90	; 144
    6b00:	03 c0       	rjmp	.+6      	; 0x6b08 <midiNote_to_Manual+0xd0>
    6b02:	90 e9       	ldi	r25, 0x90	; 144
    6b04:	01 c0       	rjmp	.+2      	; 0x6b08 <midiNote_to_Manual+0xd0>
    6b06:	90 e8       	ldi	r25, 0x80	; 128
    6b08:	89 2b       	or	r24, r25
    6b0a:	02 d3       	rcall	.+1540   	; 0x7110 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    6b0c:	80 2f       	mov	r24, r16
    6b0e:	00 d3       	rcall	.+1536   	; 0x7110 <serial1MIDISend>
    6b10:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6b12:	06 c0       	rjmp	.+12     	; 0x6b20 <midiNote_to_Manual+0xe8>
    6b14:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <midi_Setting+0x1>
    6b18:	81 11       	cpse	r24, r1
    6b1a:	04 c0       	rjmp	.+8      	; 0x6b24 <midiNote_to_Manual+0xec>
    6b1c:	80 e4       	ldi	r24, 0x40	; 64
    6b1e:	03 c0       	rjmp	.+6      	; 0x6b26 <midiNote_to_Manual+0xee>
    6b20:	80 e4       	ldi	r24, 0x40	; 64
    6b22:	01 c0       	rjmp	.+2      	; 0x6b26 <midiNote_to_Manual+0xee>
    6b24:	80 e0       	ldi	r24, 0x00	; 0
    6b26:	f4 d2       	rcall	.+1512   	; 0x7110 <serial1MIDISend>
    6b28:	df 91       	pop	r29
		}
	}
}
    6b2a:	cf 91       	pop	r28
    6b2c:	1f 91       	pop	r17
    6b2e:	0f 91       	pop	r16
    6b30:	08 95       	ret

00006b32 <midiIn_Process>:
    6b32:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6b34:	0c f0       	brlt	.+2      	; 0x6b38 <midiIn_Process+0x6>
    6b36:	4f c0       	rjmp	.+158    	; 0x6bd6 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6b38:	88 3f       	cpi	r24, 0xF8	; 248
    6b3a:	b8 f0       	brcs	.+46     	; 0x6b6a <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    6b3c:	8e 3f       	cpi	r24, 0xFE	; 254
    6b3e:	81 f4       	brne	.+32     	; 0x6b60 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6b40:	81 e0       	ldi	r24, 0x01	; 1
    6b42:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6b46:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6b48:	f8 94       	cli
    6b4a:	06 c0       	rjmp	.+12     	; 0x6b58 <midiIn_Process+0x26>
    6b4c:	ef e4       	ldi	r30, 0x4F	; 79
    6b4e:	f2 e0       	ldi	r31, 0x02	; 2
    6b50:	89 e1       	ldi	r24, 0x19	; 25
    6b52:	86 83       	std	Z+6, r24	; 0x06
    6b54:	17 82       	std	Z+7, r1	; 0x07
    6b56:	80 e0       	ldi	r24, 0x00	; 0
    6b58:	81 11       	cpse	r24, r1
    6b5a:	f8 cf       	rjmp	.-16     	; 0x6b4c <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6b5c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6b5e:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6b60:	8f 3f       	cpi	r24, 0xFF	; 255
    6b62:	09 f0       	breq	.+2      	; 0x6b66 <midiIn_Process+0x34>
    6b64:	79 c0       	rjmp	.+242    	; 0x6c58 <midiIn_Process+0x126>
				midiAllReset();
    6b66:	66 c9       	rjmp	.-3380   	; 0x5e34 <midiAllReset>
    6b68:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6b6a:	80 93 0d 0c 	sts	0x0C0D, r24	; 0x800c0d <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    6b6e:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6b72:	90 e8       	ldi	r25, 0x80	; 128
    6b74:	98 0f       	add	r25, r24
    6b76:	90 34       	cpi	r25, 0x40	; 64
    6b78:	20 f4       	brcc	.+8      	; 0x6b82 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6b7a:	82 e0       	ldi	r24, 0x02	; 2
    6b7c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6b80:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6b82:	90 e2       	ldi	r25, 0x20	; 32
    6b84:	98 0f       	add	r25, r24
    6b86:	90 31       	cpi	r25, 0x10	; 16
    6b88:	20 f4       	brcc	.+8      	; 0x6b92 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6b8a:	82 e0       	ldi	r24, 0x02	; 2
    6b8c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6b90:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6b92:	82 3f       	cpi	r24, 0xF2	; 242
    6b94:	21 f4       	brne	.+8      	; 0x6b9e <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6b96:	82 e0       	ldi	r24, 0x02	; 2
    6b98:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6b9c:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    6b9e:	80 3f       	cpi	r24, 0xF0	; 240
    6ba0:	21 f4       	brne	.+8      	; 0x6baa <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6ba2:	8f ef       	ldi	r24, 0xFF	; 255
    6ba4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6ba8:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6baa:	90 e4       	ldi	r25, 0x40	; 64
    6bac:	98 0f       	add	r25, r24
    6bae:	90 32       	cpi	r25, 0x20	; 32
    6bb0:	20 f4       	brcc	.+8      	; 0x6bba <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    6bb2:	81 e0       	ldi	r24, 0x01	; 1
    6bb4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6bb8:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6bba:	81 3f       	cpi	r24, 0xF1	; 241
    6bbc:	11 f0       	breq	.+4      	; 0x6bc2 <midiIn_Process+0x90>
    6bbe:	83 3f       	cpi	r24, 0xF3	; 243
    6bc0:	21 f4       	brne	.+8      	; 0x6bca <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    6bc2:	81 e0       	ldi	r24, 0x01	; 1
    6bc4:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6bc8:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    6bca:	87 3f       	cpi	r24, 0xF7	; 247
    6bcc:	09 f4       	brne	.+2      	; 0x6bd0 <midiIn_Process+0x9e>
    6bce:	44 c0       	rjmp	.+136    	; 0x6c58 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    6bd0:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <midiDataByteExpected>
    6bd4:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6bd6:	e0 91 3e 08 	lds	r30, 0x083E	; 0x80083e <midiDataByteCount>
    6bda:	e8 30       	cpi	r30, 0x08	; 8
    6bdc:	40 f4       	brcc	.+16     	; 0x6bee <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    6bde:	91 e0       	ldi	r25, 0x01	; 1
    6be0:	9e 0f       	add	r25, r30
    6be2:	90 93 3e 08 	sts	0x083E, r25	; 0x80083e <midiDataByteCount>
    6be6:	f0 e0       	ldi	r31, 0x00	; 0
    6be8:	eb 5f       	subi	r30, 0xFB	; 251
    6bea:	f3 4f       	sbci	r31, 0xF3	; 243
    6bec:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    6bee:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <midiDataByteExpected>
    6bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    6bf4:	89 f1       	breq	.+98     	; 0x6c58 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6bf6:	90 91 3e 08 	lds	r25, 0x083E	; 0x80083e <midiDataByteCount>
    6bfa:	98 17       	cp	r25, r24
    6bfc:	68 f1       	brcs	.+90     	; 0x6c58 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    6bfe:	90 91 0d 0c 	lds	r25, 0x0C0D	; 0x800c0d <midiLastCommand>
    6c02:	90 3f       	cpi	r25, 0xF0	; 240
    6c04:	38 f5       	brcc	.+78     	; 0x6c54 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6c06:	89 2f       	mov	r24, r25
    6c08:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    6c0a:	90 7f       	andi	r25, 0xF0	; 240
    6c0c:	90 39       	cpi	r25, 0x90	; 144
    6c0e:	71 f0       	breq	.+28     	; 0x6c2c <midiIn_Process+0xfa>
    6c10:	18 f4       	brcc	.+6      	; 0x6c18 <midiIn_Process+0xe6>
    6c12:	90 38       	cpi	r25, 0x80	; 128
    6c14:	31 f0       	breq	.+12     	; 0x6c22 <midiIn_Process+0xf0>
    6c16:	1e c0       	rjmp	.+60     	; 0x6c54 <midiIn_Process+0x122>
    6c18:	90 3b       	cpi	r25, 0xB0	; 176
    6c1a:	99 f0       	breq	.+38     	; 0x6c42 <midiIn_Process+0x110>
    6c1c:	90 3c       	cpi	r25, 0xC0	; 192
    6c1e:	b9 f0       	breq	.+46     	; 0x6c4e <midiIn_Process+0x11c>
    6c20:	19 c0       	rjmp	.+50     	; 0x6c54 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6c22:	40 e0       	ldi	r20, 0x00	; 0
    6c24:	60 91 05 0c 	lds	r22, 0x0C05	; 0x800c05 <midiDataByte>
    6c28:	07 df       	rcall	.-498    	; 0x6a38 <midiNote_to_Manual>
						break;
    6c2a:	14 c0       	rjmp	.+40     	; 0x6c54 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    6c2c:	90 91 06 0c 	lds	r25, 0x0C06	; 0x800c06 <midiDataByte+0x1>
    6c30:	91 11       	cpse	r25, r1
    6c32:	02 c0       	rjmp	.+4      	; 0x6c38 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6c34:	40 e0       	ldi	r20, 0x00	; 0
    6c36:	01 c0       	rjmp	.+2      	; 0x6c3a <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6c38:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6c3a:	60 91 05 0c 	lds	r22, 0x0C05	; 0x800c05 <midiDataByte>
    6c3e:	fc de       	rcall	.-520    	; 0x6a38 <midiNote_to_Manual>
						break;
    6c40:	09 c0       	rjmp	.+18     	; 0x6c54 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6c42:	90 91 05 0c 	lds	r25, 0x0C05	; 0x800c05 <midiDataByte>
    6c46:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6c48:	29 f4       	brne	.+10     	; 0x6c54 <midiIn_Process+0x122>
    6c4a:	3f de       	rcall	.-898    	; 0x68ca <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    6c4c:	03 c0       	rjmp	.+6      	; 0x6c54 <midiIn_Process+0x122>
    6c4e:	60 91 05 0c 	lds	r22, 0x0C05	; 0x800c05 <midiDataByte>
    6c52:	7c db       	rcall	.-2312   	; 0x634c <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6c54:	10 92 3e 08 	sts	0x083E, r1	; 0x80083e <midiDataByteCount>
    6c58:	08 95       	ret

00006c5a <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    6c5a:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <serESPMidiTmp+0x2>
    6c5e:	89 2f       	mov	r24, r25
    6c60:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6c62:	90 7f       	andi	r25, 0xF0	; 240
    6c64:	90 38       	cpi	r25, 0x80	; 128
    6c66:	49 f0       	breq	.+18     	; 0x6c7a <proc_ESPmidi+0x20>
    6c68:	18 f4       	brcc	.+6      	; 0x6c70 <proc_ESPmidi+0x16>
    6c6a:	99 23       	and	r25, r25
    6c6c:	e1 f0       	breq	.+56     	; 0x6ca6 <proc_ESPmidi+0x4c>
    6c6e:	08 95       	ret
    6c70:	90 39       	cpi	r25, 0x90	; 144
    6c72:	41 f0       	breq	.+16     	; 0x6c84 <proc_ESPmidi+0x2a>
    6c74:	90 3b       	cpi	r25, 0xB0	; 176
    6c76:	89 f0       	breq	.+34     	; 0x6c9a <proc_ESPmidi+0x40>
    6c78:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6c7a:	40 e0       	ldi	r20, 0x00	; 0
    6c7c:	60 91 6d 16 	lds	r22, 0x166D	; 0x80166d <serESPMidiTmp+0x1>
    6c80:	db ce       	rjmp	.-586    	; 0x6a38 <midiNote_to_Manual>
		break;
    6c82:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6c84:	90 91 6c 16 	lds	r25, 0x166C	; 0x80166c <serESPMidiTmp>
    6c88:	91 11       	cpse	r25, r1
    6c8a:	02 c0       	rjmp	.+4      	; 0x6c90 <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    6c8c:	40 e0       	ldi	r20, 0x00	; 0
    6c8e:	01 c0       	rjmp	.+2      	; 0x6c92 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    6c90:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6c92:	60 91 6d 16 	lds	r22, 0x166D	; 0x80166d <serESPMidiTmp+0x1>
    6c96:	d0 ce       	rjmp	.-608    	; 0x6a38 <midiNote_to_Manual>
		break;
    6c98:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6c9a:	90 91 6d 16 	lds	r25, 0x166D	; 0x80166d <serESPMidiTmp+0x1>
    6c9e:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    6ca0:	61 f4       	brne	.+24     	; 0x6cba <proc_ESPmidi+0x60>
    6ca2:	13 ce       	rjmp	.-986    	; 0x68ca <midiAllNotesOff>
    6ca4:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6ca6:	90 91 6d 16 	lds	r25, 0x166D	; 0x80166d <serESPMidiTmp+0x1>
    6caa:	89 2f       	mov	r24, r25
    6cac:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    6cae:	90 7f       	andi	r25, 0xF0	; 240
    6cb0:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6cb2:	19 f4       	brne	.+6      	; 0x6cba <proc_ESPmidi+0x60>
    6cb4:	60 91 6c 16 	lds	r22, 0x166C	; 0x80166c <serESPMidiTmp>
    6cb8:	49 cb       	rjmp	.-2414   	; 0x634c <midi_ProgramChange>
    6cba:	08 95       	ret

00006cbc <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    6cbc:	bf 92       	push	r11
    6cbe:	cf 92       	push	r12
    6cc0:	df 92       	push	r13
    6cc2:	ef 92       	push	r14
    6cc4:	ff 92       	push	r15
    6cc6:	0f 93       	push	r16
    6cc8:	1f 93       	push	r17
    6cca:	cf 93       	push	r28
    6ccc:	df 93       	push	r29
    6cce:	d8 2f       	mov	r29, r24
    6cd0:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6cd2:	81 d2       	rcall	.+1282   	; 0x71d6 <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6cd4:	0c 2f       	mov	r16, r28
    6cd6:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6cd8:	cf 71       	andi	r28, 0x1F	; 31
    6cda:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6cdc:	00 32       	cpi	r16, 0x20	; 32
    6cde:	09 f4       	brne	.+2      	; 0x6ce2 <midiKeyPress_Process+0x26>
    6ce0:	b5 c0       	rjmp	.+362    	; 0x6e4c <midiKeyPress_Process+0x190>
    6ce2:	00 23       	and	r16, r16
    6ce4:	09 f4       	brne	.+2      	; 0x6ce8 <midiKeyPress_Process+0x2c>
    6ce6:	b4 c0       	rjmp	.+360    	; 0x6e50 <midiKeyPress_Process+0x194>
    6ce8:	b7 c0       	rjmp	.+366    	; 0x6e58 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6cea:	d0 ff       	sbrs	r29, 0
    6cec:	ac c0       	rjmp	.+344    	; 0x6e46 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6cee:	20 e2       	ldi	r18, 0x20	; 32
    6cf0:	c2 9f       	mul	r28, r18
    6cf2:	c0 01       	movw	r24, r0
    6cf4:	11 24       	eor	r1, r1
    6cf6:	fb 2c       	mov	r15, r11
    6cf8:	f8 2a       	or	r15, r24
    6cfa:	8f 2d       	mov	r24, r15
    6cfc:	6a dd       	rcall	.-1324   	; 0x67d2 <moduleBit_to_manualNote>
    6cfe:	c8 2e       	mov	r12, r24
    6d00:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6d02:	18 2f       	mov	r17, r24
    6d04:	8f 3f       	cpi	r24, 0xFF	; 255
    6d06:	09 f4       	brne	.+2      	; 0x6d0a <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6d08:	94 c0       	rjmp	.+296    	; 0x6e32 <midiKeyPress_Process+0x176>
    6d0a:	69 2f       	mov	r22, r25
    6d0c:	7a dc       	rcall	.-1804   	; 0x6602 <Manual_to_MidiNote>
    6d0e:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    6d10:	8f 3f       	cpi	r24, 0xFF	; 255
    6d12:	09 f1       	breq	.+66     	; 0x6d56 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    6d14:	00 32       	cpi	r16, 0x20	; 32
    6d16:	31 f0       	breq	.+12     	; 0x6d24 <midiKeyPress_Process+0x68>
    6d18:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <midi_Setting+0x1>
    6d1c:	99 23       	and	r25, r25
    6d1e:	21 f0       	breq	.+8      	; 0x6d28 <midiKeyPress_Process+0x6c>
    6d20:	90 e9       	ldi	r25, 0x90	; 144
    6d22:	03 c0       	rjmp	.+6      	; 0x6d2a <midiKeyPress_Process+0x6e>
    6d24:	90 e9       	ldi	r25, 0x90	; 144
    6d26:	01 c0       	rjmp	.+2      	; 0x6d2a <midiKeyPress_Process+0x6e>
    6d28:	90 e8       	ldi	r25, 0x80	; 128
    6d2a:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    6d2c:	f1 d1       	rcall	.+994    	; 0x7110 <serial1MIDISend>
    6d2e:	8d 2d       	mov	r24, r13
    6d30:	ef d1       	rcall	.+990    	; 0x7110 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6d32:	01 11       	cpse	r16, r1
    6d34:	06 c0       	rjmp	.+12     	; 0x6d42 <midiKeyPress_Process+0x86>
    6d36:	80 91 52 09 	lds	r24, 0x0952	; 0x800952 <midi_Setting+0x1>
    6d3a:	81 11       	cpse	r24, r1
    6d3c:	04 c0       	rjmp	.+8      	; 0x6d46 <midiKeyPress_Process+0x8a>
    6d3e:	80 e4       	ldi	r24, 0x40	; 64
    6d40:	03 c0       	rjmp	.+6      	; 0x6d48 <midiKeyPress_Process+0x8c>
    6d42:	80 e4       	ldi	r24, 0x40	; 64
    6d44:	01 c0       	rjmp	.+2      	; 0x6d48 <midiKeyPress_Process+0x8c>
    6d46:	80 e0       	ldi	r24, 0x00	; 0
    6d48:	e3 d1       	rcall	.+966    	; 0x7110 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    6d4a:	00 32       	cpi	r16, 0x20	; 32
    6d4c:	21 f4       	brne	.+8      	; 0x6d56 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    6d4e:	c0 92 24 02 	sts	0x0224, r12	; 0x800224 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    6d52:	e0 92 25 02 	sts	0x0225, r14	; 0x800225 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    6d56:	41 e0       	ldi	r20, 0x01	; 1
    6d58:	00 32       	cpi	r16, 0x20	; 32
    6d5a:	09 f0       	breq	.+2      	; 0x6d5e <midiKeyPress_Process+0xa2>
    6d5c:	40 e0       	ldi	r20, 0x00	; 0
    6d5e:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    6d60:	11 11       	cpse	r17, r1
    6d62:	19 c0       	rjmp	.+50     	; 0x6d96 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6d64:	80 91 32 08 	lds	r24, 0x0832	; 0x800832 <midi_Couplers>
    6d68:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6d6a:	19 f4       	brne	.+6      	; 0x6d72 <midiKeyPress_Process+0xb6>
    6d6c:	6e 2d       	mov	r22, r14
    6d6e:	81 e0       	ldi	r24, 0x01	; 1
    6d70:	53 dd       	rcall	.-1370   	; 0x6818 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    6d72:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <midi_Couplers+0x1>
    6d76:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6d78:	21 f4       	brne	.+8      	; 0x6d82 <midiKeyPress_Process+0xc6>
    6d7a:	4d 2d       	mov	r20, r13
    6d7c:	6e 2d       	mov	r22, r14
    6d7e:	82 e0       	ldi	r24, 0x02	; 2
    6d80:	4b dd       	rcall	.-1386   	; 0x6818 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    6d82:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <midi_Couplers+0x3>
    6d86:	8f 3f       	cpi	r24, 0xFF	; 255
    6d88:	09 f0       	breq	.+2      	; 0x6d8c <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6d8a:	53 c0       	rjmp	.+166    	; 0x6e32 <midiKeyPress_Process+0x176>
    6d8c:	4d 2d       	mov	r20, r13
    6d8e:	6e 2d       	mov	r22, r14
    6d90:	83 e0       	ldi	r24, 0x03	; 3
    6d92:	42 dd       	rcall	.-1404   	; 0x6818 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6d94:	4e c0       	rjmp	.+156    	; 0x6e32 <midiKeyPress_Process+0x176>
    6d96:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6d98:	c9 f4       	brne	.+50     	; 0x6dcc <midiKeyPress_Process+0x110>
    6d9a:	80 91 34 08 	lds	r24, 0x0834	; 0x800834 <midi_Couplers+0x2>
    6d9e:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6da0:	19 f4       	brne	.+6      	; 0x6da8 <midiKeyPress_Process+0xec>
    6da2:	6e 2d       	mov	r22, r14
    6da4:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6da6:	38 dd       	rcall	.-1424   	; 0x6818 <manual_NoteOnOff>
    6da8:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <midi_Couplers+0x4>
    6dac:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6dae:	21 f4       	brne	.+8      	; 0x6db8 <midiKeyPress_Process+0xfc>
    6db0:	4d 2d       	mov	r20, r13
    6db2:	6e 2d       	mov	r22, r14
    6db4:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6db6:	30 dd       	rcall	.-1440   	; 0x6818 <manual_NoteOnOff>
    6db8:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <midi_Couplers+0x6>
    6dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    6dbe:	09 f0       	breq	.+2      	; 0x6dc2 <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6dc0:	38 c0       	rjmp	.+112    	; 0x6e32 <midiKeyPress_Process+0x176>
    6dc2:	4d 2d       	mov	r20, r13
    6dc4:	6e 2d       	mov	r22, r14
    6dc6:	80 e0       	ldi	r24, 0x00	; 0
    6dc8:	27 dd       	rcall	.-1458   	; 0x6818 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6dca:	33 c0       	rjmp	.+102    	; 0x6e32 <midiKeyPress_Process+0x176>
    6dcc:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    6dce:	c1 f4       	brne	.+48     	; 0x6e00 <midiKeyPress_Process+0x144>
    6dd0:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6dd4:	8f 3f       	cpi	r24, 0xFF	; 255
    6dd6:	19 f4       	brne	.+6      	; 0x6dde <midiKeyPress_Process+0x122>
    6dd8:	6e 2d       	mov	r22, r14
    6dda:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6ddc:	1d dd       	rcall	.-1478   	; 0x6818 <manual_NoteOnOff>
    6dde:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6de2:	8f 3f       	cpi	r24, 0xFF	; 255
    6de4:	21 f4       	brne	.+8      	; 0x6dee <midiKeyPress_Process+0x132>
    6de6:	4d 2d       	mov	r20, r13
    6de8:	6e 2d       	mov	r22, r14
    6dea:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6dec:	15 dd       	rcall	.-1494   	; 0x6818 <manual_NoteOnOff>
    6dee:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6df2:	8f 3f       	cpi	r24, 0xFF	; 255
    6df4:	f1 f4       	brne	.+60     	; 0x6e32 <midiKeyPress_Process+0x176>
    6df6:	4d 2d       	mov	r20, r13
    6df8:	6e 2d       	mov	r22, r14
    6dfa:	81 e0       	ldi	r24, 0x01	; 1
    6dfc:	0d dd       	rcall	.-1510   	; 0x6818 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6dfe:	19 c0       	rjmp	.+50     	; 0x6e32 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    6e00:	13 30       	cpi	r17, 0x03	; 3
    6e02:	b9 f4       	brne	.+46     	; 0x6e32 <midiKeyPress_Process+0x176>
    6e04:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6e08:	8f 3f       	cpi	r24, 0xFF	; 255
    6e0a:	19 f4       	brne	.+6      	; 0x6e12 <midiKeyPress_Process+0x156>
    6e0c:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    6e0e:	80 e0       	ldi	r24, 0x00	; 0
    6e10:	03 dd       	rcall	.-1530   	; 0x6818 <manual_NoteOnOff>
    6e12:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6e16:	8f 3f       	cpi	r24, 0xFF	; 255
    6e18:	21 f4       	brne	.+8      	; 0x6e22 <midiKeyPress_Process+0x166>
    6e1a:	4d 2d       	mov	r20, r13
    6e1c:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    6e1e:	81 e0       	ldi	r24, 0x01	; 1
    6e20:	fb dc       	rcall	.-1546   	; 0x6818 <manual_NoteOnOff>
    6e22:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6e26:	8f 3f       	cpi	r24, 0xFF	; 255
    6e28:	21 f4       	brne	.+8      	; 0x6e32 <midiKeyPress_Process+0x176>
    6e2a:	4d 2d       	mov	r20, r13
    6e2c:	6e 2d       	mov	r22, r14
    6e2e:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    6e30:	f3 dc       	rcall	.-1562   	; 0x6818 <manual_NoteOnOff>
    6e32:	8f 2d       	mov	r24, r15
    6e34:	96 d8       	rcall	.-3796   	; 0x5f62 <moduleBit_to_registerNr>
    6e36:	00 32       	cpi	r16, 0x20	; 32
    6e38:	11 f4       	brne	.+4      	; 0x6e3e <midiKeyPress_Process+0x182>
    6e3a:	20 e8       	ldi	r18, 0x80	; 128
    6e3c:	01 c0       	rjmp	.+2      	; 0x6e40 <midiKeyPress_Process+0x184>
    6e3e:	20 e0       	ldi	r18, 0x00	; 0
    6e40:	82 2b       	or	r24, r18
    6e42:	80 93 54 09 	sts	0x0954, r24	; 0x800954 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6e46:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6e48:	cf 5f       	subi	r28, 0xFF	; 255
    6e4a:	03 c0       	rjmp	.+6      	; 0x6e52 <midiKeyPress_Process+0x196>
    6e4c:	c0 e0       	ldi	r28, 0x00	; 0
    6e4e:	01 c0       	rjmp	.+2      	; 0x6e52 <midiKeyPress_Process+0x196>
    6e50:	c0 e0       	ldi	r28, 0x00	; 0
    6e52:	c8 30       	cpi	r28, 0x08	; 8
    6e54:	08 f4       	brcc	.+2      	; 0x6e58 <midiKeyPress_Process+0x19c>
    6e56:	49 cf       	rjmp	.-366    	; 0x6cea <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6e58:	df 91       	pop	r29
    6e5a:	cf 91       	pop	r28
    6e5c:	1f 91       	pop	r17
    6e5e:	0f 91       	pop	r16
    6e60:	ff 90       	pop	r15
    6e62:	ef 90       	pop	r14
    6e64:	df 90       	pop	r13
    6e66:	cf 90       	pop	r12
    6e68:	bf 90       	pop	r11
    6e6a:	08 95       	ret

00006e6c <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	if (midiThrough.OutChannel <= MIDI_CHANNEL_16) {
    6e6c:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <midiThrough+0x1>
    6e70:	80 31       	cpi	r24, 0x10	; 16
    6e72:	30 f4       	brcc	.+12     	; 0x6e80 <midiSendAllNotesOff+0x14>
		serial1MIDISend(MIDI_CTRLCHG | (midiThrough.OutChannel));
    6e74:	80 6b       	ori	r24, 0xB0	; 176
    6e76:	4c d1       	rcall	.+664    	; 0x7110 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6e78:	8b e7       	ldi	r24, 0x7B	; 123
    6e7a:	4a d1       	rcall	.+660    	; 0x7110 <serial1MIDISend>
		serial1MIDISend(0);
    6e7c:	80 e0       	ldi	r24, 0x00	; 0
    6e7e:	48 c1       	rjmp	.+656    	; 0x7110 <serial1MIDISend>
    6e80:	08 95       	ret

00006e82 <midi_SendActiveSense>:
    6e82:	8e ef       	ldi	r24, 0xFE	; 254
// 		}
// 	}
}

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6e84:	45 c1       	rjmp	.+650    	; 0x7110 <serial1MIDISend>
    6e86:	08 95       	ret

00006e88 <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    6e88:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <swTimer+0x10>
    6e8c:	88 23       	and	r24, r24
    6e8e:	21 f0       	breq	.+8      	; 0x6e98 <midi_CheckTxActiveSense+0x10>
    6e90:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <swTimer+0x10>
    6e94:	8f 3f       	cpi	r24, 0xFF	; 255
    6e96:	99 f4       	brne	.+38     	; 0x6ebe <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    6e98:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6e9a:	f8 94       	cli
    6e9c:	81 e0       	ldi	r24, 0x01	; 1
    6e9e:	06 c0       	rjmp	.+12     	; 0x6eac <midi_CheckTxActiveSense+0x24>
    6ea0:	ef e4       	ldi	r30, 0x4F	; 79
    6ea2:	f2 e0       	ldi	r31, 0x02	; 2
    6ea4:	8a e0       	ldi	r24, 0x0A	; 10
    6ea6:	80 8b       	std	Z+16, r24	; 0x10
    6ea8:	11 8a       	std	Z+17, r1	; 0x11
    6eaa:	80 e0       	ldi	r24, 0x00	; 0
    6eac:	81 11       	cpse	r24, r1
    6eae:	f8 cf       	rjmp	.-16     	; 0x6ea0 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6eb0:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    6eb2:	80 91 51 09 	lds	r24, 0x0951	; 0x800951 <midi_Setting>
    6eb6:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    6eb8:	e4 df       	rcall	.-56     	; 0x6e82 <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    6eba:	10 92 1e 14 	sts	0x141E, r1	; 0x80141e <midiTxLastCmd>
    6ebe:	08 95       	ret

00006ec0 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6ec0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6ec4:	8f e1       	ldi	r24, 0x1F	; 31
    6ec6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6eca:	e9 ec       	ldi	r30, 0xC9	; 201
    6ecc:	f0 e0       	ldi	r31, 0x00	; 0
    6ece:	80 81       	ld	r24, Z
    6ed0:	88 69       	ori	r24, 0x98	; 152
    6ed2:	80 83       	st	Z, r24
    6ed4:	ea ec       	ldi	r30, 0xCA	; 202
    6ed6:	f0 e0       	ldi	r31, 0x00	; 0
    6ed8:	80 81       	ld	r24, Z
    6eda:	86 60       	ori	r24, 0x06	; 6
    6edc:	80 83       	st	Z, r24
    6ede:	10 92 65 16 	sts	0x1665, r1	; 0x801665 <midiRxInIndex>
    6ee2:	10 92 74 16 	sts	0x1674, r1	; 0x801674 <midiRxOutIndex>
    6ee6:	10 92 10 14 	sts	0x1410, r1	; 0x801410 <midiTxInIndex>
    6eea:	10 92 1d 14 	sts	0x141D, r1	; 0x80141d <midiTxOutIndex>
    6eee:	10 92 1c 14 	sts	0x141C, r1	; 0x80141c <midiRxOvfl>
    6ef2:	10 92 21 14 	sts	0x1421, r1	; 0x801421 <midiTxOvfl>
    6ef6:	10 92 70 16 	sts	0x1670, r1	; 0x801670 <midiRxOvflCount>
    6efa:	10 92 77 16 	sts	0x1677, r1	; 0x801677 <midiTxOvflCount>
    6efe:	10 92 62 15 	sts	0x1562, r1	; 0x801562 <midiRxBuffUsage>
    6f02:	10 92 6b 16 	sts	0x166B, r1	; 0x80166b <midiTxBuffUsage>
    6f06:	10 92 1e 14 	sts	0x141E, r1	; 0x80141e <midiTxLastCmd>
    6f0a:	08 95       	ret

00006f0c <__vector_36>:
    6f0c:	1f 92       	push	r1
    6f0e:	0f 92       	push	r0
    6f10:	0f b6       	in	r0, 0x3f	; 63
    6f12:	0f 92       	push	r0
    6f14:	11 24       	eor	r1, r1
    6f16:	0b b6       	in	r0, 0x3b	; 59
    6f18:	0f 92       	push	r0
    6f1a:	8f 93       	push	r24
    6f1c:	9f 93       	push	r25
    6f1e:	ef 93       	push	r30
    6f20:	ff 93       	push	r31
    6f22:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6f26:	e0 91 65 16 	lds	r30, 0x1665	; 0x801665 <midiRxInIndex>
    6f2a:	f0 e0       	ldi	r31, 0x00	; 0
    6f2c:	ee 59       	subi	r30, 0x9E	; 158
    6f2e:	fb 4e       	sbci	r31, 0xEB	; 235
    6f30:	80 83       	st	Z, r24
    6f32:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <midiRxInIndex>
    6f36:	8f 5f       	subi	r24, 0xFF	; 255
    6f38:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <midiRxOutIndex>
    6f3c:	89 13       	cpse	r24, r25
    6f3e:	0e c0       	rjmp	.+28     	; 0x6f5c <__vector_36+0x50>
    6f40:	80 91 70 16 	lds	r24, 0x1670	; 0x801670 <midiRxOvflCount>
    6f44:	88 23       	and	r24, r24
    6f46:	31 f0       	breq	.+12     	; 0x6f54 <__vector_36+0x48>
    6f48:	8f 3f       	cpi	r24, 0xFF	; 255
    6f4a:	51 f0       	breq	.+20     	; 0x6f60 <__vector_36+0x54>
    6f4c:	8f 5f       	subi	r24, 0xFF	; 255
    6f4e:	80 93 70 16 	sts	0x1670, r24	; 0x801670 <midiRxOvflCount>
    6f52:	06 c0       	rjmp	.+12     	; 0x6f60 <__vector_36+0x54>
    6f54:	81 e0       	ldi	r24, 0x01	; 1
    6f56:	80 93 70 16 	sts	0x1670, r24	; 0x801670 <midiRxOvflCount>
    6f5a:	02 c0       	rjmp	.+4      	; 0x6f60 <__vector_36+0x54>
    6f5c:	80 93 65 16 	sts	0x1665, r24	; 0x801665 <midiRxInIndex>
    6f60:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <midiRxInIndex>
    6f64:	80 91 74 16 	lds	r24, 0x1674	; 0x801674 <midiRxOutIndex>
    6f68:	89 17       	cp	r24, r25
    6f6a:	30 f4       	brcc	.+12     	; 0x6f78 <__vector_36+0x6c>
    6f6c:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <midiRxInIndex>
    6f70:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <midiRxOutIndex>
    6f74:	89 1b       	sub	r24, r25
    6f76:	05 c0       	rjmp	.+10     	; 0x6f82 <__vector_36+0x76>
    6f78:	80 91 65 16 	lds	r24, 0x1665	; 0x801665 <midiRxInIndex>
    6f7c:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <midiRxOutIndex>
    6f80:	89 1b       	sub	r24, r25
    6f82:	90 91 62 15 	lds	r25, 0x1562	; 0x801562 <midiRxBuffUsage>
    6f86:	98 17       	cp	r25, r24
    6f88:	10 f4       	brcc	.+4      	; 0x6f8e <__vector_36+0x82>
    6f8a:	80 93 62 15 	sts	0x1562, r24	; 0x801562 <midiRxBuffUsage>
    6f8e:	80 91 fa 18 	lds	r24, 0x18FA	; 0x8018fa <midiRxBytesCount>
    6f92:	90 91 fb 18 	lds	r25, 0x18FB	; 0x8018fb <midiRxBytesCount+0x1>
    6f96:	01 96       	adiw	r24, 0x01	; 1
    6f98:	90 93 fb 18 	sts	0x18FB, r25	; 0x8018fb <midiRxBytesCount+0x1>
    6f9c:	80 93 fa 18 	sts	0x18FA, r24	; 0x8018fa <midiRxBytesCount>
    6fa0:	ff 91       	pop	r31
    6fa2:	ef 91       	pop	r30
    6fa4:	9f 91       	pop	r25
    6fa6:	8f 91       	pop	r24
    6fa8:	0f 90       	pop	r0
    6faa:	0b be       	out	0x3b, r0	; 59
    6fac:	0f 90       	pop	r0
    6fae:	0f be       	out	0x3f, r0	; 63
    6fb0:	0f 90       	pop	r0
    6fb2:	1f 90       	pop	r1
    6fb4:	18 95       	reti

00006fb6 <__vector_37>:
    6fb6:	1f 92       	push	r1
    6fb8:	0f 92       	push	r0
    6fba:	0f b6       	in	r0, 0x3f	; 63
    6fbc:	0f 92       	push	r0
    6fbe:	11 24       	eor	r1, r1
    6fc0:	0b b6       	in	r0, 0x3b	; 59
    6fc2:	0f 92       	push	r0
    6fc4:	8f 93       	push	r24
    6fc6:	9f 93       	push	r25
    6fc8:	ef 93       	push	r30
    6fca:	ff 93       	push	r31
    6fcc:	90 91 1d 14 	lds	r25, 0x141D	; 0x80141d <midiTxOutIndex>
    6fd0:	80 91 10 14 	lds	r24, 0x1410	; 0x801410 <midiTxInIndex>
    6fd4:	98 17       	cp	r25, r24
    6fd6:	b9 f0       	breq	.+46     	; 0x7006 <__vector_37+0x50>
    6fd8:	e0 91 1d 14 	lds	r30, 0x141D	; 0x80141d <midiTxOutIndex>
    6fdc:	f0 e0       	ldi	r31, 0x00	; 0
    6fde:	ed 59       	subi	r30, 0x9D	; 157
    6fe0:	fa 4e       	sbci	r31, 0xEA	; 234
    6fe2:	80 81       	ld	r24, Z
    6fe4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6fe8:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <midiTxOutIndex>
    6fec:	8f 5f       	subi	r24, 0xFF	; 255
    6fee:	80 93 1d 14 	sts	0x141D, r24	; 0x80141d <midiTxOutIndex>
    6ff2:	80 91 71 16 	lds	r24, 0x1671	; 0x801671 <midiTxBytesCount>
    6ff6:	90 91 72 16 	lds	r25, 0x1672	; 0x801672 <midiTxBytesCount+0x1>
    6ffa:	01 96       	adiw	r24, 0x01	; 1
    6ffc:	90 93 72 16 	sts	0x1672, r25	; 0x801672 <midiTxBytesCount+0x1>
    7000:	80 93 71 16 	sts	0x1671, r24	; 0x801671 <midiTxBytesCount>
    7004:	05 c0       	rjmp	.+10     	; 0x7010 <__vector_37+0x5a>
    7006:	e9 ec       	ldi	r30, 0xC9	; 201
    7008:	f0 e0       	ldi	r31, 0x00	; 0
    700a:	80 81       	ld	r24, Z
    700c:	8f 7d       	andi	r24, 0xDF	; 223
    700e:	80 83       	st	Z, r24
    7010:	ff 91       	pop	r31
    7012:	ef 91       	pop	r30
    7014:	9f 91       	pop	r25
    7016:	8f 91       	pop	r24
    7018:	0f 90       	pop	r0
    701a:	0b be       	out	0x3b, r0	; 59
    701c:	0f 90       	pop	r0
    701e:	0f be       	out	0x3f, r0	; 63
    7020:	0f 90       	pop	r0
    7022:	1f 90       	pop	r1
    7024:	18 95       	reti

00007026 <serial0SER_USBSend>:
    7026:	e0 91 f8 18 	lds	r30, 0x18F8	; 0x8018f8 <serUSBTxInIndex>
    702a:	f0 91 f9 18 	lds	r31, 0x18F9	; 0x8018f9 <serUSBTxInIndex+0x1>
    702e:	a1 ec       	ldi	r26, 0xC1	; 193
    7030:	b0 e0       	ldi	r27, 0x00	; 0
    7032:	9c 91       	ld	r25, X
    7034:	9f 7d       	andi	r25, 0xDF	; 223
    7036:	9c 93       	st	X, r25
    7038:	af 01       	movw	r20, r30
    703a:	4f 5f       	subi	r20, 0xFF	; 255
    703c:	5f 4f       	sbci	r21, 0xFF	; 255
    703e:	80 83       	st	Z, r24
    7040:	84 e1       	ldi	r24, 0x14	; 20
    7042:	4d 30       	cpi	r20, 0x0D	; 13
    7044:	58 07       	cpc	r21, r24
    7046:	19 f0       	breq	.+6      	; 0x704e <serial0SER_USBSend+0x28>
    7048:	10 f0       	brcs	.+4      	; 0x704e <serial0SER_USBSend+0x28>
    704a:	4e e0       	ldi	r20, 0x0E	; 14
    704c:	5c e0       	ldi	r21, 0x0C	; 12
    704e:	9f b7       	in	r25, 0x3f	; 63
    7050:	f8 94       	cli
    7052:	81 e0       	ldi	r24, 0x01	; 1
    7054:	05 c0       	rjmp	.+10     	; 0x7060 <serial0SER_USBSend+0x3a>
    7056:	20 91 0e 14 	lds	r18, 0x140E	; 0x80140e <serUSBTxOutIndex>
    705a:	30 91 0f 14 	lds	r19, 0x140F	; 0x80140f <serUSBTxOutIndex+0x1>
    705e:	80 e0       	ldi	r24, 0x00	; 0
    7060:	81 11       	cpse	r24, r1
    7062:	f9 cf       	rjmp	.-14     	; 0x7056 <serial0SER_USBSend+0x30>
    7064:	9f bf       	out	0x3f, r25	; 63
    7066:	42 17       	cp	r20, r18
    7068:	53 07       	cpc	r21, r19
    706a:	49 f4       	brne	.+18     	; 0x707e <serial0SER_USBSend+0x58>
    706c:	8f ef       	ldi	r24, 0xFF	; 255
    706e:	80 93 6a 16 	sts	0x166A, r24	; 0x80166a <serUSBOvflFlag>
    7072:	e1 ec       	ldi	r30, 0xC1	; 193
    7074:	f0 e0       	ldi	r31, 0x00	; 0
    7076:	80 81       	ld	r24, Z
    7078:	80 62       	ori	r24, 0x20	; 32
    707a:	80 83       	st	Z, r24
    707c:	08 95       	ret
    707e:	50 93 f9 18 	sts	0x18F9, r21	; 0x8018f9 <serUSBTxInIndex+0x1>
    7082:	40 93 f8 18 	sts	0x18F8, r20	; 0x8018f8 <serUSBTxInIndex>
    7086:	e1 ec       	ldi	r30, 0xC1	; 193
    7088:	f0 e0       	ldi	r31, 0x00	; 0
    708a:	80 81       	ld	r24, Z
    708c:	80 62       	ori	r24, 0x20	; 32
    708e:	80 83       	st	Z, r24
    7090:	08 95       	ret

00007092 <serial0USB_logMIDIin>:
    7092:	cf 93       	push	r28
    7094:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <serUSB_Active>
    7098:	99 23       	and	r25, r25
    709a:	61 f0       	breq	.+24     	; 0x70b4 <serial0USB_logMIDIin+0x22>
    709c:	c8 2f       	mov	r28, r24
    709e:	89 e6       	ldi	r24, 0x69	; 105
    70a0:	c2 df       	rcall	.-124    	; 0x7026 <serial0SER_USBSend>
    70a2:	8c 2f       	mov	r24, r28
    70a4:	82 95       	swap	r24
    70a6:	8f 70       	andi	r24, 0x0F	; 15
    70a8:	b5 d2       	rcall	.+1386   	; 0x7614 <nibbleToChr>
    70aa:	bd df       	rcall	.-134    	; 0x7026 <serial0SER_USBSend>
    70ac:	8c 2f       	mov	r24, r28
    70ae:	8f 70       	andi	r24, 0x0F	; 15
    70b0:	b1 d2       	rcall	.+1378   	; 0x7614 <nibbleToChr>
    70b2:	b9 df       	rcall	.-142    	; 0x7026 <serial0SER_USBSend>
    70b4:	cf 91       	pop	r28
    70b6:	08 95       	ret

000070b8 <serial1MIDIReadRx>:
    70b8:	cf 93       	push	r28
    70ba:	90 91 65 16 	lds	r25, 0x1665	; 0x801665 <midiRxInIndex>
    70be:	80 91 74 16 	lds	r24, 0x1674	; 0x801674 <midiRxOutIndex>
    70c2:	98 17       	cp	r25, r24
    70c4:	71 f0       	breq	.+28     	; 0x70e2 <serial1MIDIReadRx+0x2a>
    70c6:	e0 91 74 16 	lds	r30, 0x1674	; 0x801674 <midiRxOutIndex>
    70ca:	f0 e0       	ldi	r31, 0x00	; 0
    70cc:	ee 59       	subi	r30, 0x9E	; 158
    70ce:	fb 4e       	sbci	r31, 0xEB	; 235
    70d0:	c0 81       	ld	r28, Z
    70d2:	8c 2f       	mov	r24, r28
    70d4:	de df       	rcall	.-68     	; 0x7092 <serial0USB_logMIDIin>
    70d6:	80 91 74 16 	lds	r24, 0x1674	; 0x801674 <midiRxOutIndex>
    70da:	8f 5f       	subi	r24, 0xFF	; 255
    70dc:	80 93 74 16 	sts	0x1674, r24	; 0x801674 <midiRxOutIndex>
    70e0:	01 c0       	rjmp	.+2      	; 0x70e4 <serial1MIDIReadRx+0x2c>
    70e2:	cd ef       	ldi	r28, 0xFD	; 253
    70e4:	8c 2f       	mov	r24, r28
    70e6:	cf 91       	pop	r28
    70e8:	08 95       	ret

000070ea <serial0USB_logMIDIout>:
    70ea:	cf 93       	push	r28
    70ec:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <serUSB_Active>
    70f0:	99 23       	and	r25, r25
    70f2:	61 f0       	breq	.+24     	; 0x710c <serial0USB_logMIDIout+0x22>
    70f4:	c8 2f       	mov	r28, r24
    70f6:	8f e6       	ldi	r24, 0x6F	; 111
    70f8:	96 df       	rcall	.-212    	; 0x7026 <serial0SER_USBSend>
    70fa:	8c 2f       	mov	r24, r28
    70fc:	82 95       	swap	r24
    70fe:	8f 70       	andi	r24, 0x0F	; 15
    7100:	89 d2       	rcall	.+1298   	; 0x7614 <nibbleToChr>
    7102:	91 df       	rcall	.-222    	; 0x7026 <serial0SER_USBSend>
    7104:	8c 2f       	mov	r24, r28
    7106:	8f 70       	andi	r24, 0x0F	; 15
    7108:	85 d2       	rcall	.+1290   	; 0x7614 <nibbleToChr>
    710a:	8d df       	rcall	.-230    	; 0x7026 <serial0SER_USBSend>
    710c:	cf 91       	pop	r28
    710e:	08 95       	ret

00007110 <serial1MIDISend>:
    7110:	cf 93       	push	r28
    7112:	90 91 52 09 	lds	r25, 0x0952	; 0x800952 <midi_Setting+0x1>
    7116:	99 23       	and	r25, r25
    7118:	71 f0       	breq	.+28     	; 0x7136 <serial1MIDISend+0x26>
    711a:	88 23       	and	r24, r24
    711c:	64 f4       	brge	.+24     	; 0x7136 <serial1MIDISend+0x26>
    711e:	90 91 1e 14 	lds	r25, 0x141E	; 0x80141e <midiTxLastCmd>
    7122:	89 17       	cp	r24, r25
    7124:	09 f4       	brne	.+2      	; 0x7128 <serial1MIDISend+0x18>
    7126:	55 c0       	rjmp	.+170    	; 0x71d2 <serial1MIDISend+0xc2>
    7128:	80 3a       	cpi	r24, 0xA0	; 160
    712a:	18 f4       	brcc	.+6      	; 0x7132 <serial1MIDISend+0x22>
    712c:	80 93 1e 14 	sts	0x141E, r24	; 0x80141e <midiTxLastCmd>
    7130:	02 c0       	rjmp	.+4      	; 0x7136 <serial1MIDISend+0x26>
    7132:	10 92 1e 14 	sts	0x141E, r1	; 0x80141e <midiTxLastCmd>
    7136:	2f b7       	in	r18, 0x3f	; 63
    7138:	f8 94       	cli
    713a:	91 e0       	ldi	r25, 0x01	; 1
    713c:	06 c0       	rjmp	.+12     	; 0x714a <serial1MIDISend+0x3a>
    713e:	ef e4       	ldi	r30, 0x4F	; 79
    7140:	f2 e0       	ldi	r31, 0x02	; 2
    7142:	9a e0       	ldi	r25, 0x0A	; 10
    7144:	90 8b       	std	Z+16, r25	; 0x10
    7146:	11 8a       	std	Z+17, r1	; 0x11
    7148:	90 e0       	ldi	r25, 0x00	; 0
    714a:	91 11       	cpse	r25, r1
    714c:	f8 cf       	rjmp	.-16     	; 0x713e <serial1MIDISend+0x2e>
    714e:	c8 2f       	mov	r28, r24
    7150:	2f bf       	out	0x3f, r18	; 63
    7152:	e9 ec       	ldi	r30, 0xC9	; 201
    7154:	f0 e0       	ldi	r31, 0x00	; 0
    7156:	80 81       	ld	r24, Z
    7158:	8f 7d       	andi	r24, 0xDF	; 223
    715a:	80 83       	st	Z, r24
    715c:	8c 2f       	mov	r24, r28
    715e:	c5 df       	rcall	.-118    	; 0x70ea <serial0USB_logMIDIout>
    7160:	e0 91 10 14 	lds	r30, 0x1410	; 0x801410 <midiTxInIndex>
    7164:	f0 e0       	ldi	r31, 0x00	; 0
    7166:	ed 59       	subi	r30, 0x9D	; 157
    7168:	fa 4e       	sbci	r31, 0xEA	; 234
    716a:	c0 83       	st	Z, r28
    716c:	80 91 10 14 	lds	r24, 0x1410	; 0x801410 <midiTxInIndex>
    7170:	8f 5f       	subi	r24, 0xFF	; 255
    7172:	90 91 1d 14 	lds	r25, 0x141D	; 0x80141d <midiTxOutIndex>
    7176:	89 13       	cpse	r24, r25
    7178:	0e c0       	rjmp	.+28     	; 0x7196 <serial1MIDISend+0x86>
    717a:	80 91 77 16 	lds	r24, 0x1677	; 0x801677 <midiTxOvflCount>
    717e:	88 23       	and	r24, r24
    7180:	31 f0       	breq	.+12     	; 0x718e <serial1MIDISend+0x7e>
    7182:	8f 3f       	cpi	r24, 0xFF	; 255
    7184:	51 f0       	breq	.+20     	; 0x719a <serial1MIDISend+0x8a>
    7186:	8f 5f       	subi	r24, 0xFF	; 255
    7188:	80 93 77 16 	sts	0x1677, r24	; 0x801677 <midiTxOvflCount>
    718c:	06 c0       	rjmp	.+12     	; 0x719a <serial1MIDISend+0x8a>
    718e:	81 e0       	ldi	r24, 0x01	; 1
    7190:	80 93 77 16 	sts	0x1677, r24	; 0x801677 <midiTxOvflCount>
    7194:	02 c0       	rjmp	.+4      	; 0x719a <serial1MIDISend+0x8a>
    7196:	80 93 10 14 	sts	0x1410, r24	; 0x801410 <midiTxInIndex>
    719a:	90 91 10 14 	lds	r25, 0x1410	; 0x801410 <midiTxInIndex>
    719e:	80 91 1d 14 	lds	r24, 0x141D	; 0x80141d <midiTxOutIndex>
    71a2:	89 17       	cp	r24, r25
    71a4:	30 f4       	brcc	.+12     	; 0x71b2 <serial1MIDISend+0xa2>
    71a6:	80 91 10 14 	lds	r24, 0x1410	; 0x801410 <midiTxInIndex>
    71aa:	90 91 1d 14 	lds	r25, 0x141D	; 0x80141d <midiTxOutIndex>
    71ae:	89 1b       	sub	r24, r25
    71b0:	05 c0       	rjmp	.+10     	; 0x71bc <serial1MIDISend+0xac>
    71b2:	80 91 10 14 	lds	r24, 0x1410	; 0x801410 <midiTxInIndex>
    71b6:	90 91 1d 14 	lds	r25, 0x141D	; 0x80141d <midiTxOutIndex>
    71ba:	89 1b       	sub	r24, r25
    71bc:	90 91 6b 16 	lds	r25, 0x166B	; 0x80166b <midiTxBuffUsage>
    71c0:	98 17       	cp	r25, r24
    71c2:	10 f4       	brcc	.+4      	; 0x71c8 <serial1MIDISend+0xb8>
    71c4:	80 93 6b 16 	sts	0x166B, r24	; 0x80166b <midiTxBuffUsage>
    71c8:	e9 ec       	ldi	r30, 0xC9	; 201
    71ca:	f0 e0       	ldi	r31, 0x00	; 0
    71cc:	80 81       	ld	r24, Z
    71ce:	80 62       	ori	r24, 0x20	; 32
    71d0:	80 83       	st	Z, r24
    71d2:	cf 91       	pop	r28
    71d4:	08 95       	ret

000071d6 <serial0USB_logPipeIn>:
    71d6:	cf 93       	push	r28
    71d8:	df 93       	push	r29
    71da:	20 91 73 16 	lds	r18, 0x1673	; 0x801673 <serUSB_Active>
    71de:	22 23       	and	r18, r18
    71e0:	a9 f0       	breq	.+42     	; 0x720c <serial0USB_logPipeIn+0x36>
    71e2:	c9 2f       	mov	r28, r25
    71e4:	d8 2f       	mov	r29, r24
    71e6:	8b e6       	ldi	r24, 0x6B	; 107
    71e8:	1e df       	rcall	.-452    	; 0x7026 <serial0SER_USBSend>
    71ea:	8c 2f       	mov	r24, r28
    71ec:	82 95       	swap	r24
    71ee:	8f 70       	andi	r24, 0x0F	; 15
    71f0:	11 d2       	rcall	.+1058   	; 0x7614 <nibbleToChr>
    71f2:	19 df       	rcall	.-462    	; 0x7026 <serial0SER_USBSend>
    71f4:	cf 70       	andi	r28, 0x0F	; 15
    71f6:	8c 2f       	mov	r24, r28
    71f8:	0d d2       	rcall	.+1050   	; 0x7614 <nibbleToChr>
    71fa:	15 df       	rcall	.-470    	; 0x7026 <serial0SER_USBSend>
    71fc:	8d 2f       	mov	r24, r29
    71fe:	82 95       	swap	r24
    7200:	8f 70       	andi	r24, 0x0F	; 15
    7202:	08 d2       	rcall	.+1040   	; 0x7614 <nibbleToChr>
    7204:	10 df       	rcall	.-480    	; 0x7026 <serial0SER_USBSend>
    7206:	8c 2f       	mov	r24, r28
    7208:	05 d2       	rcall	.+1034   	; 0x7614 <nibbleToChr>
    720a:	0d df       	rcall	.-486    	; 0x7026 <serial0SER_USBSend>
    720c:	df 91       	pop	r29
    720e:	cf 91       	pop	r28
    7210:	08 95       	ret

00007212 <serial0SER_USB_sendStringP>:
    7212:	cf 93       	push	r28
    7214:	df 93       	push	r29
    7216:	fc 01       	movw	r30, r24
    7218:	02 c0       	rjmp	.+4      	; 0x721e <serial0SER_USB_sendStringP+0xc>
    721a:	05 df       	rcall	.-502    	; 0x7026 <serial0SER_USBSend>
    721c:	fe 01       	movw	r30, r28
    721e:	ef 01       	movw	r28, r30
    7220:	21 96       	adiw	r28, 0x01	; 1
    7222:	84 91       	lpm	r24, Z
    7224:	88 23       	and	r24, r24
    7226:	21 f0       	breq	.+8      	; 0x7230 <serial0SER_USB_sendStringP+0x1e>
    7228:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <serUSBOvflFlag>
    722c:	9f 3f       	cpi	r25, 0xFF	; 255
    722e:	a9 f7       	brne	.-22     	; 0x721a <serial0SER_USB_sendStringP+0x8>
    7230:	df 91       	pop	r29
    7232:	cf 91       	pop	r28
    7234:	08 95       	ret

00007236 <serial0SER_USB_sendCRLF>:
    7236:	8a e2       	ldi	r24, 0x2A	; 42
    7238:	94 e1       	ldi	r25, 0x14	; 20
    723a:	eb cf       	rjmp	.-42     	; 0x7212 <serial0SER_USB_sendStringP>
    723c:	08 95       	ret

0000723e <init_Serial0SerUSB>:
    723e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    7242:	88 e0       	ldi	r24, 0x08	; 8
    7244:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    7248:	e1 ec       	ldi	r30, 0xC1	; 193
    724a:	f0 e0       	ldi	r31, 0x00	; 0
    724c:	80 81       	ld	r24, Z
    724e:	88 69       	ori	r24, 0x98	; 152
    7250:	80 83       	st	Z, r24
    7252:	e2 ec       	ldi	r30, 0xC2	; 194
    7254:	f0 e0       	ldi	r31, 0x00	; 0
    7256:	80 81       	ld	r24, Z
    7258:	86 60       	ori	r24, 0x06	; 6
    725a:	80 83       	st	Z, r24
    725c:	82 e2       	ldi	r24, 0x22	; 34
    725e:	94 e1       	ldi	r25, 0x14	; 20
    7260:	90 93 76 16 	sts	0x1676, r25	; 0x801676 <serUSBRxInIndex+0x1>
    7264:	80 93 75 16 	sts	0x1675, r24	; 0x801675 <serUSBRxInIndex>
    7268:	90 93 69 16 	sts	0x1669, r25	; 0x801669 <serUSBRxOutIndex+0x1>
    726c:	80 93 68 16 	sts	0x1668, r24	; 0x801668 <serUSBRxOutIndex>
    7270:	8e e0       	ldi	r24, 0x0E	; 14
    7272:	9c e0       	ldi	r25, 0x0C	; 12
    7274:	90 93 0f 14 	sts	0x140F, r25	; 0x80140f <serUSBTxOutIndex+0x1>
    7278:	80 93 0e 14 	sts	0x140E, r24	; 0x80140e <serUSBTxOutIndex>
    727c:	90 93 f9 18 	sts	0x18F9, r25	; 0x8018f9 <serUSBTxInIndex+0x1>
    7280:	80 93 f8 18 	sts	0x18F8, r24	; 0x8018f8 <serUSBTxInIndex>
    7284:	10 92 6a 16 	sts	0x166A, r1	; 0x80166a <serUSBOvflFlag>
    7288:	0e 94 c6 0b 	call	0x178c	; 0x178c <eeprom_ReadUSB>
    728c:	8f 3f       	cpi	r24, 0xFF	; 255
    728e:	41 f4       	brne	.+16     	; 0x72a0 <init_Serial0SerUSB+0x62>
    7290:	10 92 73 16 	sts	0x1673, r1	; 0x801673 <serUSB_Active>
    7294:	40 e0       	ldi	r20, 0x00	; 0
    7296:	50 e0       	ldi	r21, 0x00	; 0
    7298:	64 e0       	ldi	r22, 0x04	; 4
    729a:	81 e0       	ldi	r24, 0x01	; 1
    729c:	0e 94 ef 16 	call	0x2dde	; 0x2dde <log_putError>
    72a0:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <serUSB_Active>
    72a4:	8f 3f       	cpi	r24, 0xFF	; 255
    72a6:	41 f4       	brne	.+16     	; 0x72b8 <init_Serial0SerUSB+0x7a>
    72a8:	8a e6       	ldi	r24, 0x6A	; 106
    72aa:	93 e0       	ldi	r25, 0x03	; 3
    72ac:	b2 df       	rcall	.-156    	; 0x7212 <serial0SER_USB_sendStringP>
    72ae:	82 ea       	ldi	r24, 0xA2	; 162
    72b0:	93 e1       	ldi	r25, 0x13	; 19
    72b2:	af df       	rcall	.-162    	; 0x7212 <serial0SER_USB_sendStringP>
    72b4:	c0 df       	rcall	.-128    	; 0x7236 <serial0SER_USB_sendCRLF>
    72b6:	bf cf       	rjmp	.-130    	; 0x7236 <serial0SER_USB_sendCRLF>
    72b8:	08 95       	ret

000072ba <serial0SER_USB_sendString>:
    72ba:	1f 93       	push	r17
    72bc:	cf 93       	push	r28
    72be:	df 93       	push	r29
    72c0:	ec 01       	movw	r28, r24
    72c2:	10 e5       	ldi	r17, 0x50	; 80
    72c4:	03 c0       	rjmp	.+6      	; 0x72cc <serial0SER_USB_sendString+0x12>
    72c6:	21 96       	adiw	r28, 0x01	; 1
    72c8:	ae de       	rcall	.-676    	; 0x7026 <serial0SER_USBSend>
    72ca:	11 50       	subi	r17, 0x01	; 1
    72cc:	88 81       	ld	r24, Y
    72ce:	88 23       	and	r24, r24
    72d0:	31 f0       	breq	.+12     	; 0x72de <serial0SER_USB_sendString+0x24>
    72d2:	90 91 6a 16 	lds	r25, 0x166A	; 0x80166a <serUSBOvflFlag>
    72d6:	9f 3f       	cpi	r25, 0xFF	; 255
    72d8:	11 f0       	breq	.+4      	; 0x72de <serial0SER_USB_sendString+0x24>
    72da:	11 11       	cpse	r17, r1
    72dc:	f4 cf       	rjmp	.-24     	; 0x72c6 <serial0SER_USB_sendString+0xc>
    72de:	df 91       	pop	r29
    72e0:	cf 91       	pop	r28
    72e2:	1f 91       	pop	r17
    72e4:	08 95       	ret

000072e6 <__vector_25>:
    72e6:	1f 92       	push	r1
    72e8:	0f 92       	push	r0
    72ea:	0f b6       	in	r0, 0x3f	; 63
    72ec:	0f 92       	push	r0
    72ee:	11 24       	eor	r1, r1
    72f0:	0b b6       	in	r0, 0x3b	; 59
    72f2:	0f 92       	push	r0
    72f4:	2f 93       	push	r18
    72f6:	3f 93       	push	r19
    72f8:	4f 93       	push	r20
    72fa:	5f 93       	push	r21
    72fc:	8f 93       	push	r24
    72fe:	9f 93       	push	r25
    7300:	ef 93       	push	r30
    7302:	ff 93       	push	r31
    7304:	e0 91 75 16 	lds	r30, 0x1675	; 0x801675 <serUSBRxInIndex>
    7308:	f0 91 76 16 	lds	r31, 0x1676	; 0x801676 <serUSBRxInIndex+0x1>
    730c:	af 01       	movw	r20, r30
    730e:	4f 5f       	subi	r20, 0xFF	; 255
    7310:	5f 4f       	sbci	r21, 0xFF	; 255
    7312:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7316:	80 83       	st	Z, r24
    7318:	84 e1       	ldi	r24, 0x14	; 20
    731a:	41 36       	cpi	r20, 0x61	; 97
    731c:	58 07       	cpc	r21, r24
    731e:	19 f0       	breq	.+6      	; 0x7326 <__vector_25+0x40>
    7320:	10 f0       	brcs	.+4      	; 0x7326 <__vector_25+0x40>
    7322:	42 e2       	ldi	r20, 0x22	; 34
    7324:	54 e1       	ldi	r21, 0x14	; 20
    7326:	9f b7       	in	r25, 0x3f	; 63
    7328:	f8 94       	cli
    732a:	81 e0       	ldi	r24, 0x01	; 1
    732c:	05 c0       	rjmp	.+10     	; 0x7338 <__vector_25+0x52>
    732e:	20 91 68 16 	lds	r18, 0x1668	; 0x801668 <serUSBRxOutIndex>
    7332:	30 91 69 16 	lds	r19, 0x1669	; 0x801669 <serUSBRxOutIndex+0x1>
    7336:	80 e0       	ldi	r24, 0x00	; 0
    7338:	81 11       	cpse	r24, r1
    733a:	f9 cf       	rjmp	.-14     	; 0x732e <__vector_25+0x48>
    733c:	9f bf       	out	0x3f, r25	; 63
    733e:	42 17       	cp	r20, r18
    7340:	53 07       	cpc	r21, r19
    7342:	21 f4       	brne	.+8      	; 0x734c <__vector_25+0x66>
    7344:	8f ef       	ldi	r24, 0xFF	; 255
    7346:	80 93 6a 16 	sts	0x166A, r24	; 0x80166a <serUSBOvflFlag>
    734a:	04 c0       	rjmp	.+8      	; 0x7354 <__vector_25+0x6e>
    734c:	50 93 76 16 	sts	0x1676, r21	; 0x801676 <serUSBRxInIndex+0x1>
    7350:	40 93 75 16 	sts	0x1675, r20	; 0x801675 <serUSBRxInIndex>
    7354:	ff 91       	pop	r31
    7356:	ef 91       	pop	r30
    7358:	9f 91       	pop	r25
    735a:	8f 91       	pop	r24
    735c:	5f 91       	pop	r21
    735e:	4f 91       	pop	r20
    7360:	3f 91       	pop	r19
    7362:	2f 91       	pop	r18
    7364:	0f 90       	pop	r0
    7366:	0b be       	out	0x3b, r0	; 59
    7368:	0f 90       	pop	r0
    736a:	0f be       	out	0x3f, r0	; 63
    736c:	0f 90       	pop	r0
    736e:	1f 90       	pop	r1
    7370:	18 95       	reti

00007372 <__vector_26>:
    7372:	1f 92       	push	r1
    7374:	0f 92       	push	r0
    7376:	0f b6       	in	r0, 0x3f	; 63
    7378:	0f 92       	push	r0
    737a:	11 24       	eor	r1, r1
    737c:	0b b6       	in	r0, 0x3b	; 59
    737e:	0f 92       	push	r0
    7380:	2f 93       	push	r18
    7382:	8f 93       	push	r24
    7384:	9f 93       	push	r25
    7386:	ef 93       	push	r30
    7388:	ff 93       	push	r31
    738a:	e0 91 0e 14 	lds	r30, 0x140E	; 0x80140e <serUSBTxOutIndex>
    738e:	f0 91 0f 14 	lds	r31, 0x140F	; 0x80140f <serUSBTxOutIndex+0x1>
    7392:	80 91 f8 18 	lds	r24, 0x18F8	; 0x8018f8 <serUSBTxInIndex>
    7396:	90 91 f9 18 	lds	r25, 0x18F9	; 0x8018f9 <serUSBTxInIndex+0x1>
    739a:	e8 17       	cp	r30, r24
    739c:	f9 07       	cpc	r31, r25
    739e:	89 f0       	breq	.+34     	; 0x73c2 <__vector_26+0x50>
    73a0:	cf 01       	movw	r24, r30
    73a2:	01 96       	adiw	r24, 0x01	; 1
    73a4:	20 81       	ld	r18, Z
    73a6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    73aa:	24 e1       	ldi	r18, 0x14	; 20
    73ac:	8d 30       	cpi	r24, 0x0D	; 13
    73ae:	92 07       	cpc	r25, r18
    73b0:	19 f0       	breq	.+6      	; 0x73b8 <__vector_26+0x46>
    73b2:	10 f0       	brcs	.+4      	; 0x73b8 <__vector_26+0x46>
    73b4:	8e e0       	ldi	r24, 0x0E	; 14
    73b6:	9c e0       	ldi	r25, 0x0C	; 12
    73b8:	90 93 0f 14 	sts	0x140F, r25	; 0x80140f <serUSBTxOutIndex+0x1>
    73bc:	80 93 0e 14 	sts	0x140E, r24	; 0x80140e <serUSBTxOutIndex>
    73c0:	05 c0       	rjmp	.+10     	; 0x73cc <__vector_26+0x5a>
    73c2:	e1 ec       	ldi	r30, 0xC1	; 193
    73c4:	f0 e0       	ldi	r31, 0x00	; 0
    73c6:	80 81       	ld	r24, Z
    73c8:	8f 7d       	andi	r24, 0xDF	; 223
    73ca:	80 83       	st	Z, r24
    73cc:	ff 91       	pop	r31
    73ce:	ef 91       	pop	r30
    73d0:	9f 91       	pop	r25
    73d2:	8f 91       	pop	r24
    73d4:	2f 91       	pop	r18
    73d6:	0f 90       	pop	r0
    73d8:	0b be       	out	0x3b, r0	; 59
    73da:	0f 90       	pop	r0
    73dc:	0f be       	out	0x3f, r0	; 63
    73de:	0f 90       	pop	r0
    73e0:	1f 90       	pop	r1
    73e2:	18 95       	reti

000073e4 <init_Serial3SerESP>:
    73e4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    73e8:	88 e0       	ldi	r24, 0x08	; 8
    73ea:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    73ee:	e1 e3       	ldi	r30, 0x31	; 49
    73f0:	f1 e0       	ldi	r31, 0x01	; 1
    73f2:	80 81       	ld	r24, Z
    73f4:	88 69       	ori	r24, 0x98	; 152
    73f6:	80 83       	st	Z, r24
    73f8:	e2 e3       	ldi	r30, 0x32	; 50
    73fa:	f1 e0       	ldi	r31, 0x01	; 1
    73fc:	80 81       	ld	r24, Z
    73fe:	86 60       	ori	r24, 0x06	; 6
    7400:	80 83       	st	Z, r24
    7402:	88 e7       	ldi	r24, 0x78	; 120
    7404:	96 e1       	ldi	r25, 0x16	; 22
    7406:	90 93 20 14 	sts	0x1420, r25	; 0x801420 <serESPRxInIndex+0x1>
    740a:	80 93 1f 14 	sts	0x141F, r24	; 0x80141f <serESPRxInIndex>
    740e:	90 93 1b 14 	sts	0x141B, r25	; 0x80141b <serESPRxOutIndex+0x1>
    7412:	80 93 1a 14 	sts	0x141A, r24	; 0x80141a <serESPRxOutIndex>
    7416:	88 ef       	ldi	r24, 0xF8	; 248
    7418:	96 e1       	ldi	r25, 0x16	; 22
    741a:	90 93 64 16 	sts	0x1664, r25	; 0x801664 <serESPTxOutIndex+0x1>
    741e:	80 93 63 16 	sts	0x1663, r24	; 0x801663 <serESPTxOutIndex>
    7422:	90 93 67 16 	sts	0x1667, r25	; 0x801667 <serESPTxInIndex+0x1>
    7426:	80 93 66 16 	sts	0x1666, r24	; 0x801666 <serESPTxInIndex>
    742a:	10 92 11 14 	sts	0x1411, r1	; 0x801411 <serESPOvflFlag>
    742e:	8f ef       	ldi	r24, 0xFF	; 255
    7430:	80 93 6f 16 	sts	0x166F, r24	; 0x80166f <serESP_Active>
    7434:	80 e0       	ldi	r24, 0x00	; 0
    7436:	07 c0       	rjmp	.+14     	; 0x7446 <init_Serial3SerESP+0x62>
    7438:	e8 2f       	mov	r30, r24
    743a:	f0 e0       	ldi	r31, 0x00	; 0
    743c:	ee 5e       	subi	r30, 0xEE	; 238
    743e:	fb 4e       	sbci	r31, 0xEB	; 235
    7440:	9f ef       	ldi	r25, 0xFF	; 255
    7442:	90 83       	st	Z, r25
    7444:	8f 5f       	subi	r24, 0xFF	; 255
    7446:	88 30       	cpi	r24, 0x08	; 8
    7448:	b8 f3       	brcs	.-18     	; 0x7438 <init_Serial3SerESP+0x54>
    744a:	08 95       	ret

0000744c <serial3SER_ESPSend>:
    744c:	e0 91 66 16 	lds	r30, 0x1666	; 0x801666 <serESPTxInIndex>
    7450:	f0 91 67 16 	lds	r31, 0x1667	; 0x801667 <serESPTxInIndex+0x1>
    7454:	a1 e3       	ldi	r26, 0x31	; 49
    7456:	b1 e0       	ldi	r27, 0x01	; 1
    7458:	9c 91       	ld	r25, X
    745a:	9f 7d       	andi	r25, 0xDF	; 223
    745c:	9c 93       	st	X, r25
    745e:	af 01       	movw	r20, r30
    7460:	4f 5f       	subi	r20, 0xFF	; 255
    7462:	5f 4f       	sbci	r21, 0xFF	; 255
    7464:	80 83       	st	Z, r24
    7466:	88 e1       	ldi	r24, 0x18	; 24
    7468:	47 3f       	cpi	r20, 0xF7	; 247
    746a:	58 07       	cpc	r21, r24
    746c:	19 f0       	breq	.+6      	; 0x7474 <serial3SER_ESPSend+0x28>
    746e:	10 f0       	brcs	.+4      	; 0x7474 <serial3SER_ESPSend+0x28>
    7470:	48 ef       	ldi	r20, 0xF8	; 248
    7472:	56 e1       	ldi	r21, 0x16	; 22
    7474:	9f b7       	in	r25, 0x3f	; 63
    7476:	f8 94       	cli
    7478:	81 e0       	ldi	r24, 0x01	; 1
    747a:	05 c0       	rjmp	.+10     	; 0x7486 <serial3SER_ESPSend+0x3a>
    747c:	20 91 63 16 	lds	r18, 0x1663	; 0x801663 <serESPTxOutIndex>
    7480:	30 91 64 16 	lds	r19, 0x1664	; 0x801664 <serESPTxOutIndex+0x1>
    7484:	80 e0       	ldi	r24, 0x00	; 0
    7486:	81 11       	cpse	r24, r1
    7488:	f9 cf       	rjmp	.-14     	; 0x747c <serial3SER_ESPSend+0x30>
    748a:	9f bf       	out	0x3f, r25	; 63
    748c:	42 17       	cp	r20, r18
    748e:	53 07       	cpc	r21, r19
    7490:	49 f4       	brne	.+18     	; 0x74a4 <serial3SER_ESPSend+0x58>
    7492:	8f ef       	ldi	r24, 0xFF	; 255
    7494:	80 93 11 14 	sts	0x1411, r24	; 0x801411 <serESPOvflFlag>
    7498:	e1 e3       	ldi	r30, 0x31	; 49
    749a:	f1 e0       	ldi	r31, 0x01	; 1
    749c:	80 81       	ld	r24, Z
    749e:	80 62       	ori	r24, 0x20	; 32
    74a0:	80 83       	st	Z, r24
    74a2:	08 95       	ret
    74a4:	50 93 67 16 	sts	0x1667, r21	; 0x801667 <serESPTxInIndex+0x1>
    74a8:	40 93 66 16 	sts	0x1666, r20	; 0x801666 <serESPTxInIndex>
    74ac:	e1 e3       	ldi	r30, 0x31	; 49
    74ae:	f1 e0       	ldi	r31, 0x01	; 1
    74b0:	80 81       	ld	r24, Z
    74b2:	80 62       	ori	r24, 0x20	; 32
    74b4:	80 83       	st	Z, r24
    74b6:	08 95       	ret

000074b8 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    74b8:	e0 91 1a 14 	lds	r30, 0x141A	; 0x80141a <serESPRxOutIndex>
    74bc:	f0 91 1b 14 	lds	r31, 0x141B	; 0x80141b <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    74c0:	80 91 1f 14 	lds	r24, 0x141F	; 0x80141f <serESPRxInIndex>
    74c4:	90 91 20 14 	lds	r25, 0x1420	; 0x801420 <serESPRxInIndex+0x1>
    74c8:	e8 17       	cp	r30, r24
    74ca:	f9 07       	cpc	r31, r25
    74cc:	81 f0       	breq	.+32     	; 0x74ee <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    74ce:	9f 01       	movw	r18, r30
    74d0:	2f 5f       	subi	r18, 0xFF	; 255
    74d2:	3f 4f       	sbci	r19, 0xFF	; 255
    74d4:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    74d6:	96 e1       	ldi	r25, 0x16	; 22
    74d8:	27 3f       	cpi	r18, 0xF7	; 247
    74da:	39 07       	cpc	r19, r25
    74dc:	19 f0       	breq	.+6      	; 0x74e4 <serial3SER_ESPReadRx+0x2c>
    74de:	10 f0       	brcs	.+4      	; 0x74e4 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    74e0:	28 e7       	ldi	r18, 0x78	; 120
    74e2:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    74e4:	30 93 1b 14 	sts	0x141B, r19	; 0x80141b <serESPRxOutIndex+0x1>
    74e8:	20 93 1a 14 	sts	0x141A, r18	; 0x80141a <serESPRxOutIndex>
    74ec:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    74ee:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    74f0:	08 95       	ret

000074f2 <__vector_54>:

ISR(USART3_RX_vect) {
    74f2:	1f 92       	push	r1
    74f4:	0f 92       	push	r0
    74f6:	0f b6       	in	r0, 0x3f	; 63
    74f8:	0f 92       	push	r0
    74fa:	11 24       	eor	r1, r1
    74fc:	0b b6       	in	r0, 0x3b	; 59
    74fe:	0f 92       	push	r0
    7500:	2f 93       	push	r18
    7502:	3f 93       	push	r19
    7504:	4f 93       	push	r20
    7506:	5f 93       	push	r21
    7508:	6f 93       	push	r22
    750a:	8f 93       	push	r24
    750c:	9f 93       	push	r25
    750e:	af 93       	push	r26
    7510:	bf 93       	push	r27
    7512:	ef 93       	push	r30
    7514:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    7516:	e0 91 1f 14 	lds	r30, 0x141F	; 0x80141f <serESPRxInIndex>
    751a:	f0 91 20 14 	lds	r31, 0x1420	; 0x801420 <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    751e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    7522:	af 01       	movw	r20, r30
    7524:	4f 5f       	subi	r20, 0xFF	; 255
    7526:	5f 4f       	sbci	r21, 0xFF	; 255
    7528:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    752a:	86 e1       	ldi	r24, 0x16	; 22
    752c:	47 3f       	cpi	r20, 0xF7	; 247
    752e:	58 07       	cpc	r21, r24
    7530:	19 f0       	breq	.+6      	; 0x7538 <__vector_54+0x46>
    7532:	10 f0       	brcs	.+4      	; 0x7538 <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    7534:	48 e7       	ldi	r20, 0x78	; 120
    7536:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7538:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    753a:	f8 94       	cli
    753c:	81 e0       	ldi	r24, 0x01	; 1
    753e:	05 c0       	rjmp	.+10     	; 0x754a <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    7540:	20 91 1a 14 	lds	r18, 0x141A	; 0x80141a <serESPRxOutIndex>
    7544:	30 91 1b 14 	lds	r19, 0x141B	; 0x80141b <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7548:	80 e0       	ldi	r24, 0x00	; 0
    754a:	81 11       	cpse	r24, r1
    754c:	f9 cf       	rjmp	.-14     	; 0x7540 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    754e:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    7550:	42 17       	cp	r20, r18
    7552:	53 07       	cpc	r21, r19
    7554:	39 f4       	brne	.+14     	; 0x7564 <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    7556:	8f ef       	ldi	r24, 0xFF	; 255
    7558:	80 93 11 14 	sts	0x1411, r24	; 0x801411 <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    755c:	80 e0       	ldi	r24, 0x00	; 0
    755e:	a9 e1       	ldi	r26, 0x19	; 25
    7560:	b4 e1       	ldi	r27, 0x14	; 20
    7562:	0a c0       	rjmp	.+20     	; 0x7578 <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    7564:	50 93 20 14 	sts	0x1420, r21	; 0x801420 <serESPRxInIndex+0x1>
    7568:	40 93 1f 14 	sts	0x141F, r20	; 0x80141f <serESPRxInIndex>
    756c:	f7 cf       	rjmp	.-18     	; 0x755c <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    756e:	fd 01       	movw	r30, r26
    7570:	92 91       	ld	r25, -Z
    7572:	9c 93       	st	X, r25
		inpBufferPtr--;
    7574:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    7576:	8f 5f       	subi	r24, 0xFF	; 255
    7578:	87 30       	cpi	r24, 0x07	; 7
    757a:	c8 f3       	brcs	.-14     	; 0x756e <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    757c:	6c 93       	st	X, r22
}
    757e:	ff 91       	pop	r31
    7580:	ef 91       	pop	r30
    7582:	bf 91       	pop	r27
    7584:	af 91       	pop	r26
    7586:	9f 91       	pop	r25
    7588:	8f 91       	pop	r24
    758a:	6f 91       	pop	r22
    758c:	5f 91       	pop	r21
    758e:	4f 91       	pop	r20
    7590:	3f 91       	pop	r19
    7592:	2f 91       	pop	r18
    7594:	0f 90       	pop	r0
    7596:	0b be       	out	0x3b, r0	; 59
    7598:	0f 90       	pop	r0
    759a:	0f be       	out	0x3f, r0	; 63
    759c:	0f 90       	pop	r0
    759e:	1f 90       	pop	r1
    75a0:	18 95       	reti

000075a2 <__vector_55>:

ISR(USART3_UDRE_vect) {
    75a2:	1f 92       	push	r1
    75a4:	0f 92       	push	r0
    75a6:	0f b6       	in	r0, 0x3f	; 63
    75a8:	0f 92       	push	r0
    75aa:	11 24       	eor	r1, r1
    75ac:	0b b6       	in	r0, 0x3b	; 59
    75ae:	0f 92       	push	r0
    75b0:	2f 93       	push	r18
    75b2:	8f 93       	push	r24
    75b4:	9f 93       	push	r25
    75b6:	ef 93       	push	r30
    75b8:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    75ba:	e0 91 63 16 	lds	r30, 0x1663	; 0x801663 <serESPTxOutIndex>
    75be:	f0 91 64 16 	lds	r31, 0x1664	; 0x801664 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    75c2:	80 91 66 16 	lds	r24, 0x1666	; 0x801666 <serESPTxInIndex>
    75c6:	90 91 67 16 	lds	r25, 0x1667	; 0x801667 <serESPTxInIndex+0x1>
    75ca:	e8 17       	cp	r30, r24
    75cc:	f9 07       	cpc	r31, r25
    75ce:	89 f0       	breq	.+34     	; 0x75f2 <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    75d0:	cf 01       	movw	r24, r30
    75d2:	01 96       	adiw	r24, 0x01	; 1
    75d4:	20 81       	ld	r18, Z
    75d6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    75da:	28 e1       	ldi	r18, 0x18	; 24
    75dc:	87 3f       	cpi	r24, 0xF7	; 247
    75de:	92 07       	cpc	r25, r18
    75e0:	19 f0       	breq	.+6      	; 0x75e8 <__vector_55+0x46>
    75e2:	10 f0       	brcs	.+4      	; 0x75e8 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    75e4:	88 ef       	ldi	r24, 0xF8	; 248
    75e6:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    75e8:	90 93 64 16 	sts	0x1664, r25	; 0x801664 <serESPTxOutIndex+0x1>
    75ec:	80 93 63 16 	sts	0x1663, r24	; 0x801663 <serESPTxOutIndex>
    75f0:	05 c0       	rjmp	.+10     	; 0x75fc <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    75f2:	e1 e3       	ldi	r30, 0x31	; 49
    75f4:	f1 e0       	ldi	r31, 0x01	; 1
    75f6:	80 81       	ld	r24, Z
    75f8:	8f 7d       	andi	r24, 0xDF	; 223
    75fa:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    75fc:	ff 91       	pop	r31
    75fe:	ef 91       	pop	r30
    7600:	9f 91       	pop	r25
    7602:	8f 91       	pop	r24
    7604:	2f 91       	pop	r18
    7606:	0f 90       	pop	r0
    7608:	0b be       	out	0x3b, r0	; 59
    760a:	0f 90       	pop	r0
    760c:	0f be       	out	0x3f, r0	; 63
    760e:	0f 90       	pop	r0
    7610:	1f 90       	pop	r1
    7612:	18 95       	reti

00007614 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    7614:	8a 30       	cpi	r24, 0x0A	; 10
    7616:	10 f0       	brcs	.+4      	; 0x761c <nibbleToChr+0x8>
    7618:	89 5c       	subi	r24, 0xC9	; 201
    761a:	08 95       	ret
    761c:	80 5d       	subi	r24, 0xD0	; 208
    761e:	08 95       	ret

00007620 <lcd_setCG>:
    7620:	ef 92       	push	r14
    7622:	ff 92       	push	r15
    7624:	1f 93       	push	r17
    7626:	cf 93       	push	r28
    7628:	df 93       	push	r29
    762a:	eb 01       	movw	r28, r22
    762c:	90 e0       	ldi	r25, 0x00	; 0
    762e:	88 0f       	add	r24, r24
    7630:	99 1f       	adc	r25, r25
    7632:	88 0f       	add	r24, r24
    7634:	99 1f       	adc	r25, r25
    7636:	88 0f       	add	r24, r24
    7638:	99 1f       	adc	r25, r25
    763a:	80 64       	ori	r24, 0x40	; 64
    763c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <lcd_write_command>
    7640:	10 e0       	ldi	r17, 0x00	; 0
    7642:	0a c0       	rjmp	.+20     	; 0x7658 <lcd_setCG+0x38>
    7644:	7e 01       	movw	r14, r28
    7646:	8f ef       	ldi	r24, 0xFF	; 255
    7648:	e8 1a       	sub	r14, r24
    764a:	f8 0a       	sbc	r15, r24
    764c:	fe 01       	movw	r30, r28
    764e:	84 91       	lpm	r24, Z
    7650:	0e 94 45 13 	call	0x268a	; 0x268a <lcd_write_character>
    7654:	1f 5f       	subi	r17, 0xFF	; 255
    7656:	e7 01       	movw	r28, r14
    7658:	18 30       	cpi	r17, 0x08	; 8
    765a:	a0 f3       	brcs	.-24     	; 0x7644 <lcd_setCG+0x24>
    765c:	df 91       	pop	r29
    765e:	cf 91       	pop	r28
    7660:	1f 91       	pop	r17
    7662:	ff 90       	pop	r15
    7664:	ef 90       	pop	r14
    7666:	08 95       	ret

00007668 <lcd_initCG>:
    7668:	62 e2       	ldi	r22, 0x22	; 34
    766a:	74 e1       	ldi	r23, 0x14	; 20
    766c:	80 e0       	ldi	r24, 0x00	; 0
    766e:	d8 df       	rcall	.-80     	; 0x7620 <lcd_setCG>
    7670:	6a e1       	ldi	r22, 0x1A	; 26
    7672:	74 e1       	ldi	r23, 0x14	; 20
    7674:	81 e0       	ldi	r24, 0x01	; 1
    7676:	d4 df       	rcall	.-88     	; 0x7620 <lcd_setCG>
    7678:	62 e1       	ldi	r22, 0x12	; 18
    767a:	74 e1       	ldi	r23, 0x14	; 20
    767c:	82 e0       	ldi	r24, 0x02	; 2
    767e:	d0 df       	rcall	.-96     	; 0x7620 <lcd_setCG>
    7680:	6a e0       	ldi	r22, 0x0A	; 10
    7682:	74 e1       	ldi	r23, 0x14	; 20
    7684:	83 e0       	ldi	r24, 0x03	; 3
    7686:	cc df       	rcall	.-104    	; 0x7620 <lcd_setCG>
    7688:	62 e0       	ldi	r22, 0x02	; 2
    768a:	74 e1       	ldi	r23, 0x14	; 20
    768c:	84 e0       	ldi	r24, 0x04	; 4
    768e:	c8 df       	rcall	.-112    	; 0x7620 <lcd_setCG>
    7690:	6a ef       	ldi	r22, 0xFA	; 250
    7692:	73 e1       	ldi	r23, 0x13	; 19
    7694:	85 e0       	ldi	r24, 0x05	; 5
    7696:	c4 df       	rcall	.-120    	; 0x7620 <lcd_setCG>
    7698:	62 ef       	ldi	r22, 0xF2	; 242
    769a:	73 e1       	ldi	r23, 0x13	; 19
    769c:	86 e0       	ldi	r24, 0x06	; 6
    769e:	c0 df       	rcall	.-128    	; 0x7620 <lcd_setCG>
    76a0:	6a ee       	ldi	r22, 0xEA	; 234
    76a2:	73 e1       	ldi	r23, 0x13	; 19
    76a4:	87 e0       	ldi	r24, 0x07	; 7
    76a6:	bc cf       	rjmp	.-136    	; 0x7620 <lcd_setCG>
    76a8:	08 95       	ret

000076aa <lcd_hexout>:
    76aa:	cf 93       	push	r28
    76ac:	c8 2f       	mov	r28, r24
    76ae:	82 95       	swap	r24
    76b0:	8f 70       	andi	r24, 0x0F	; 15
    76b2:	8a 30       	cpi	r24, 0x0A	; 10
    76b4:	10 f0       	brcs	.+4      	; 0x76ba <lcd_hexout+0x10>
    76b6:	89 5c       	subi	r24, 0xC9	; 201
    76b8:	01 c0       	rjmp	.+2      	; 0x76bc <lcd_hexout+0x12>
    76ba:	80 5d       	subi	r24, 0xD0	; 208
    76bc:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    76c0:	cf 70       	andi	r28, 0x0F	; 15
    76c2:	ca 30       	cpi	r28, 0x0A	; 10
    76c4:	18 f0       	brcs	.+6      	; 0x76cc <lcd_hexout+0x22>
    76c6:	87 e3       	ldi	r24, 0x37	; 55
    76c8:	8c 0f       	add	r24, r28
    76ca:	02 c0       	rjmp	.+4      	; 0x76d0 <lcd_hexout+0x26>
    76cc:	80 e3       	ldi	r24, 0x30	; 48
    76ce:	8c 0f       	add	r24, r28
    76d0:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    76d4:	cf 91       	pop	r28
    76d6:	08 95       	ret

000076d8 <lcd_longout>:
    76d8:	cf 93       	push	r28
    76da:	df 93       	push	r29
    76dc:	d3 e0       	ldi	r29, 0x03	; 3
    76de:	1c c0       	rjmp	.+56     	; 0x7718 <lcd_longout+0x40>
    76e0:	ed 2f       	mov	r30, r29
    76e2:	0d 2e       	mov	r0, r29
    76e4:	00 0c       	add	r0, r0
    76e6:	ff 0b       	sbc	r31, r31
    76e8:	e2 50       	subi	r30, 0x02	; 2
    76ea:	f7 4e       	sbci	r31, 0xE7	; 231
    76ec:	c0 81       	ld	r28, Z
    76ee:	8c 2f       	mov	r24, r28
    76f0:	82 95       	swap	r24
    76f2:	8f 70       	andi	r24, 0x0F	; 15
    76f4:	8a 30       	cpi	r24, 0x0A	; 10
    76f6:	10 f0       	brcs	.+4      	; 0x76fc <lcd_longout+0x24>
    76f8:	89 5c       	subi	r24, 0xC9	; 201
    76fa:	01 c0       	rjmp	.+2      	; 0x76fe <lcd_longout+0x26>
    76fc:	80 5d       	subi	r24, 0xD0	; 208
    76fe:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7702:	cf 70       	andi	r28, 0x0F	; 15
    7704:	ca 30       	cpi	r28, 0x0A	; 10
    7706:	18 f0       	brcs	.+6      	; 0x770e <lcd_longout+0x36>
    7708:	87 e3       	ldi	r24, 0x37	; 55
    770a:	8c 0f       	add	r24, r28
    770c:	02 c0       	rjmp	.+4      	; 0x7712 <lcd_longout+0x3a>
    770e:	80 e3       	ldi	r24, 0x30	; 48
    7710:	8c 0f       	add	r24, r28
    7712:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7716:	d1 50       	subi	r29, 0x01	; 1
    7718:	dd 23       	and	r29, r29
    771a:	14 f7       	brge	.-60     	; 0x76e0 <lcd_longout+0x8>
    771c:	df 91       	pop	r29
    771e:	cf 91       	pop	r28
    7720:	08 95       	ret

00007722 <lcd_dec2out>:
    7722:	cf 93       	push	r28
    7724:	c8 2f       	mov	r28, r24
    7726:	84 36       	cpi	r24, 0x64	; 100
    7728:	50 f0       	brcs	.+20     	; 0x773e <lcd_dec2out+0x1c>
    772a:	8d e2       	ldi	r24, 0x2D	; 45
    772c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7730:	8d e2       	ldi	r24, 0x2D	; 45
    7732:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7736:	0d c0       	rjmp	.+26     	; 0x7752 <lcd_dec2out+0x30>
    7738:	ca 50       	subi	r28, 0x0A	; 10
    773a:	8f 5f       	subi	r24, 0xFF	; 255
    773c:	01 c0       	rjmp	.+2      	; 0x7740 <lcd_dec2out+0x1e>
    773e:	80 e0       	ldi	r24, 0x00	; 0
    7740:	ca 30       	cpi	r28, 0x0A	; 10
    7742:	d0 f7       	brcc	.-12     	; 0x7738 <lcd_dec2out+0x16>
    7744:	80 5d       	subi	r24, 0xD0	; 208
    7746:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    774a:	80 e3       	ldi	r24, 0x30	; 48
    774c:	8c 0f       	add	r24, r28
    774e:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7752:	cf 91       	pop	r28
    7754:	08 95       	ret

00007756 <putChar_Dec2>:
    7756:	84 36       	cpi	r24, 0x64	; 100
    7758:	58 f0       	brcs	.+22     	; 0x7770 <putChar_Dec2+0x1a>
    775a:	8d e2       	ldi	r24, 0x2D	; 45
    775c:	db 01       	movw	r26, r22
    775e:	8c 93       	st	X, r24
    7760:	fb 01       	movw	r30, r22
    7762:	32 96       	adiw	r30, 0x02	; 2
    7764:	11 96       	adiw	r26, 0x01	; 1
    7766:	8c 93       	st	X, r24
    7768:	0f c0       	rjmp	.+30     	; 0x7788 <putChar_Dec2+0x32>
    776a:	8a 50       	subi	r24, 0x0A	; 10
    776c:	9f 5f       	subi	r25, 0xFF	; 255
    776e:	01 c0       	rjmp	.+2      	; 0x7772 <putChar_Dec2+0x1c>
    7770:	90 e0       	ldi	r25, 0x00	; 0
    7772:	8a 30       	cpi	r24, 0x0A	; 10
    7774:	d0 f7       	brcc	.-12     	; 0x776a <putChar_Dec2+0x14>
    7776:	90 5d       	subi	r25, 0xD0	; 208
    7778:	fb 01       	movw	r30, r22
    777a:	90 83       	st	Z, r25
    777c:	32 96       	adiw	r30, 0x02	; 2
    777e:	90 e3       	ldi	r25, 0x30	; 48
    7780:	98 0f       	add	r25, r24
    7782:	db 01       	movw	r26, r22
    7784:	11 96       	adiw	r26, 0x01	; 1
    7786:	9c 93       	st	X, r25
    7788:	10 82       	st	Z, r1
    778a:	cf 01       	movw	r24, r30
    778c:	08 95       	ret

0000778e <putChar_Dec>:
    778e:	90 e0       	ldi	r25, 0x00	; 0
    7790:	02 c0       	rjmp	.+4      	; 0x7796 <putChar_Dec+0x8>
    7792:	84 56       	subi	r24, 0x64	; 100
    7794:	9f 5f       	subi	r25, 0xFF	; 255
    7796:	84 36       	cpi	r24, 0x64	; 100
    7798:	e0 f7       	brcc	.-8      	; 0x7792 <putChar_Dec+0x4>
    779a:	99 23       	and	r25, r25
    779c:	39 f0       	breq	.+14     	; 0x77ac <putChar_Dec+0x1e>
    779e:	90 5d       	subi	r25, 0xD0	; 208
    77a0:	db 01       	movw	r26, r22
    77a2:	9c 93       	st	X, r25
    77a4:	6f 5f       	subi	r22, 0xFF	; 255
    77a6:	7f 4f       	sbci	r23, 0xFF	; 255
    77a8:	2f ef       	ldi	r18, 0xFF	; 255
    77aa:	01 c0       	rjmp	.+2      	; 0x77ae <putChar_Dec+0x20>
    77ac:	20 e0       	ldi	r18, 0x00	; 0
    77ae:	90 e0       	ldi	r25, 0x00	; 0
    77b0:	02 c0       	rjmp	.+4      	; 0x77b6 <putChar_Dec+0x28>
    77b2:	8a 50       	subi	r24, 0x0A	; 10
    77b4:	9f 5f       	subi	r25, 0xFF	; 255
    77b6:	8a 30       	cpi	r24, 0x0A	; 10
    77b8:	e0 f7       	brcc	.-8      	; 0x77b2 <putChar_Dec+0x24>
    77ba:	91 11       	cpse	r25, r1
    77bc:	02 c0       	rjmp	.+4      	; 0x77c2 <putChar_Dec+0x34>
    77be:	2f 3f       	cpi	r18, 0xFF	; 255
    77c0:	31 f4       	brne	.+12     	; 0x77ce <putChar_Dec+0x40>
    77c2:	fb 01       	movw	r30, r22
    77c4:	31 96       	adiw	r30, 0x01	; 1
    77c6:	90 5d       	subi	r25, 0xD0	; 208
    77c8:	db 01       	movw	r26, r22
    77ca:	9c 93       	st	X, r25
    77cc:	01 c0       	rjmp	.+2      	; 0x77d0 <putChar_Dec+0x42>
    77ce:	fb 01       	movw	r30, r22
    77d0:	80 5d       	subi	r24, 0xD0	; 208
    77d2:	80 83       	st	Z, r24
    77d4:	11 82       	std	Z+1, r1	; 0x01
    77d6:	cf 01       	movw	r24, r30
    77d8:	01 96       	adiw	r24, 0x01	; 1
    77da:	08 95       	ret

000077dc <putChar_hex>:
    77dc:	fb 01       	movw	r30, r22
    77de:	98 2f       	mov	r25, r24
    77e0:	92 95       	swap	r25
    77e2:	9f 70       	andi	r25, 0x0F	; 15
    77e4:	9a 30       	cpi	r25, 0x0A	; 10
    77e6:	10 f0       	brcs	.+4      	; 0x77ec <putChar_hex+0x10>
    77e8:	99 5c       	subi	r25, 0xC9	; 201
    77ea:	01 c0       	rjmp	.+2      	; 0x77ee <putChar_hex+0x12>
    77ec:	90 5d       	subi	r25, 0xD0	; 208
    77ee:	90 83       	st	Z, r25
    77f0:	98 2f       	mov	r25, r24
    77f2:	9f 70       	andi	r25, 0x0F	; 15
    77f4:	9f 01       	movw	r18, r30
    77f6:	2e 5f       	subi	r18, 0xFE	; 254
    77f8:	3f 4f       	sbci	r19, 0xFF	; 255
    77fa:	9a 30       	cpi	r25, 0x0A	; 10
    77fc:	10 f0       	brcs	.+4      	; 0x7802 <putChar_hex+0x26>
    77fe:	99 5c       	subi	r25, 0xC9	; 201
    7800:	01 c0       	rjmp	.+2      	; 0x7804 <putChar_hex+0x28>
    7802:	90 5d       	subi	r25, 0xD0	; 208
    7804:	91 83       	std	Z+1, r25	; 0x01
    7806:	12 82       	std	Z+2, r1	; 0x02
    7808:	c9 01       	movw	r24, r18
    780a:	08 95       	ret

0000780c <putChar_MidiChan>:
    780c:	80 31       	cpi	r24, 0x10	; 16
    780e:	48 f0       	brcs	.+18     	; 0x7822 <putChar_MidiChan+0x16>
    7810:	8e e6       	ldi	r24, 0x6E	; 110
    7812:	db 01       	movw	r26, r22
    7814:	8c 93       	st	X, r24
    7816:	fb 01       	movw	r30, r22
    7818:	32 96       	adiw	r30, 0x02	; 2
    781a:	8f e6       	ldi	r24, 0x6F	; 111
    781c:	11 96       	adiw	r26, 0x01	; 1
    781e:	8c 93       	st	X, r24
    7820:	15 c0       	rjmp	.+42     	; 0x784c <putChar_MidiChan+0x40>
    7822:	91 e0       	ldi	r25, 0x01	; 1
    7824:	98 0f       	add	r25, r24
    7826:	9a 30       	cpi	r25, 0x0A	; 10
    7828:	40 f0       	brcs	.+16     	; 0x783a <putChar_MidiChan+0x2e>
    782a:	db 01       	movw	r26, r22
    782c:	11 96       	adiw	r26, 0x01	; 1
    782e:	91 e3       	ldi	r25, 0x31	; 49
    7830:	fb 01       	movw	r30, r22
    7832:	90 83       	st	Z, r25
    7834:	97 ef       	ldi	r25, 0xF7	; 247
    7836:	98 0f       	add	r25, r24
    7838:	05 c0       	rjmp	.+10     	; 0x7844 <putChar_MidiChan+0x38>
    783a:	db 01       	movw	r26, r22
    783c:	11 96       	adiw	r26, 0x01	; 1
    783e:	80 e2       	ldi	r24, 0x20	; 32
    7840:	fb 01       	movw	r30, r22
    7842:	80 83       	st	Z, r24
    7844:	fd 01       	movw	r30, r26
    7846:	31 96       	adiw	r30, 0x01	; 1
    7848:	90 5d       	subi	r25, 0xD0	; 208
    784a:	9c 93       	st	X, r25
    784c:	10 82       	st	Z, r1
    784e:	cf 01       	movw	r24, r30
    7850:	08 95       	ret

00007852 <putChar_word>:
    7852:	ac 01       	movw	r20, r24
    7854:	fb 01       	movw	r30, r22
    7856:	34 96       	adiw	r30, 0x04	; 4
    7858:	db 01       	movw	r26, r22
    785a:	14 96       	adiw	r26, 0x04	; 4
    785c:	1c 92       	st	X, r1
    785e:	20 e0       	ldi	r18, 0x00	; 0
    7860:	10 c0       	rjmp	.+32     	; 0x7882 <putChar_word+0x30>
    7862:	94 2f       	mov	r25, r20
    7864:	9f 70       	andi	r25, 0x0F	; 15
    7866:	31 97       	sbiw	r30, 0x01	; 1
    7868:	9a 30       	cpi	r25, 0x0A	; 10
    786a:	10 f0       	brcs	.+4      	; 0x7870 <putChar_word+0x1e>
    786c:	99 5c       	subi	r25, 0xC9	; 201
    786e:	01 c0       	rjmp	.+2      	; 0x7872 <putChar_word+0x20>
    7870:	90 5d       	subi	r25, 0xD0	; 208
    7872:	90 83       	st	Z, r25
    7874:	52 95       	swap	r21
    7876:	42 95       	swap	r20
    7878:	4f 70       	andi	r20, 0x0F	; 15
    787a:	45 27       	eor	r20, r21
    787c:	5f 70       	andi	r21, 0x0F	; 15
    787e:	45 27       	eor	r20, r21
    7880:	2f 5f       	subi	r18, 0xFF	; 255
    7882:	24 30       	cpi	r18, 0x04	; 4
    7884:	70 f3       	brcs	.-36     	; 0x7862 <putChar_word+0x10>
    7886:	cf 01       	movw	r24, r30
    7888:	04 96       	adiw	r24, 0x04	; 4
    788a:	08 95       	ret

0000788c <putChar_long>:
    788c:	0f 93       	push	r16
    788e:	1f 93       	push	r17
    7890:	8b 01       	movw	r16, r22
    7892:	9c 01       	movw	r18, r24
    7894:	fa 01       	movw	r30, r20
    7896:	38 96       	adiw	r30, 0x08	; 8
    7898:	da 01       	movw	r26, r20
    789a:	18 96       	adiw	r26, 0x08	; 8
    789c:	1c 92       	st	X, r1
    789e:	80 e0       	ldi	r24, 0x00	; 0
    78a0:	12 c0       	rjmp	.+36     	; 0x78c6 <putChar_long+0x3a>
    78a2:	90 2f       	mov	r25, r16
    78a4:	9f 70       	andi	r25, 0x0F	; 15
    78a6:	31 97       	sbiw	r30, 0x01	; 1
    78a8:	9a 30       	cpi	r25, 0x0A	; 10
    78aa:	10 f0       	brcs	.+4      	; 0x78b0 <putChar_long+0x24>
    78ac:	99 5c       	subi	r25, 0xC9	; 201
    78ae:	01 c0       	rjmp	.+2      	; 0x78b2 <putChar_long+0x26>
    78b0:	90 5d       	subi	r25, 0xD0	; 208
    78b2:	90 83       	st	Z, r25
    78b4:	68 94       	set
    78b6:	13 f8       	bld	r1, 3
    78b8:	36 95       	lsr	r19
    78ba:	27 95       	ror	r18
    78bc:	17 95       	ror	r17
    78be:	07 95       	ror	r16
    78c0:	16 94       	lsr	r1
    78c2:	d1 f7       	brne	.-12     	; 0x78b8 <putChar_long+0x2c>
    78c4:	8f 5f       	subi	r24, 0xFF	; 255
    78c6:	84 30       	cpi	r24, 0x04	; 4
    78c8:	60 f3       	brcs	.-40     	; 0x78a2 <putChar_long+0x16>
    78ca:	cf 01       	movw	r24, r30
    78cc:	04 96       	adiw	r24, 0x04	; 4
    78ce:	1f 91       	pop	r17
    78d0:	0f 91       	pop	r16
    78d2:	08 95       	ret

000078d4 <putChar_Note>:
    78d4:	88 23       	and	r24, r24
    78d6:	8c f4       	brge	.+34     	; 0x78fa <putChar_Note+0x26>
    78d8:	8d e2       	ldi	r24, 0x2D	; 45
    78da:	db 01       	movw	r26, r22
    78dc:	8c 93       	st	X, r24
    78de:	9e e6       	ldi	r25, 0x6E	; 110
    78e0:	11 96       	adiw	r26, 0x01	; 1
    78e2:	9c 93       	st	X, r25
    78e4:	11 97       	sbiw	r26, 0x01	; 1
    78e6:	12 96       	adiw	r26, 0x02	; 2
    78e8:	8c 93       	st	X, r24
    78ea:	12 97       	sbiw	r26, 0x02	; 2
    78ec:	14 96       	adiw	r26, 0x04	; 4
    78ee:	fb 01       	movw	r30, r22
    78f0:	13 82       	std	Z+3, r1	; 0x03
    78f2:	49 c0       	rjmp	.+146    	; 0x7986 <putChar_Note+0xb2>
    78f4:	8c 50       	subi	r24, 0x0C	; 12
    78f6:	9f 5f       	subi	r25, 0xFF	; 255
    78f8:	01 c0       	rjmp	.+2      	; 0x78fc <putChar_Note+0x28>
    78fa:	90 e0       	ldi	r25, 0x00	; 0
    78fc:	8c 30       	cpi	r24, 0x0C	; 12
    78fe:	d0 f7       	brcc	.-12     	; 0x78f4 <putChar_Note+0x20>
    7900:	8b 30       	cpi	r24, 0x0B	; 11
    7902:	39 f4       	brne	.+14     	; 0x7912 <putChar_Note+0x3e>
    7904:	fb 01       	movw	r30, r22
    7906:	31 96       	adiw	r30, 0x01	; 1
    7908:	88 e4       	ldi	r24, 0x48	; 72
    790a:	db 01       	movw	r26, r22
    790c:	8c 93       	st	X, r24
    790e:	8f e5       	ldi	r24, 0x5F	; 95
    7910:	27 c0       	rjmp	.+78     	; 0x7960 <putChar_Note+0x8c>
    7912:	85 30       	cpi	r24, 0x05	; 5
    7914:	58 f4       	brcc	.+22     	; 0x792c <putChar_Note+0x58>
    7916:	fb 01       	movw	r30, r22
    7918:	31 96       	adiw	r30, 0x01	; 1
    791a:	28 2f       	mov	r18, r24
    791c:	26 95       	lsr	r18
    791e:	2d 5b       	subi	r18, 0xBD	; 189
    7920:	db 01       	movw	r26, r22
    7922:	2c 93       	st	X, r18
    7924:	80 fd       	sbrc	r24, 0
    7926:	19 c0       	rjmp	.+50     	; 0x795a <putChar_Note+0x86>
    7928:	8f e5       	ldi	r24, 0x5F	; 95
    792a:	1a c0       	rjmp	.+52     	; 0x7960 <putChar_Note+0x8c>
    792c:	89 30       	cpi	r24, 0x09	; 9
    792e:	30 f0       	brcs	.+12     	; 0x793c <putChar_Note+0x68>
    7930:	fb 01       	movw	r30, r22
    7932:	31 96       	adiw	r30, 0x01	; 1
    7934:	21 e4       	ldi	r18, 0x41	; 65
    7936:	db 01       	movw	r26, r22
    7938:	2c 93       	st	X, r18
    793a:	0b c0       	rjmp	.+22     	; 0x7952 <putChar_Note+0x7e>
    793c:	fb 01       	movw	r30, r22
    793e:	31 96       	adiw	r30, 0x01	; 1
    7940:	28 2f       	mov	r18, r24
    7942:	30 e0       	ldi	r19, 0x00	; 0
    7944:	25 50       	subi	r18, 0x05	; 5
    7946:	31 09       	sbc	r19, r1
    7948:	35 95       	asr	r19
    794a:	27 95       	ror	r18
    794c:	2a 5b       	subi	r18, 0xBA	; 186
    794e:	db 01       	movw	r26, r22
    7950:	2c 93       	st	X, r18
    7952:	80 ff       	sbrs	r24, 0
    7954:	04 c0       	rjmp	.+8      	; 0x795e <putChar_Note+0x8a>
    7956:	8f e5       	ldi	r24, 0x5F	; 95
    7958:	03 c0       	rjmp	.+6      	; 0x7960 <putChar_Note+0x8c>
    795a:	83 e2       	ldi	r24, 0x23	; 35
    795c:	01 c0       	rjmp	.+2      	; 0x7960 <putChar_Note+0x8c>
    795e:	83 e2       	ldi	r24, 0x23	; 35
    7960:	80 83       	st	Z, r24
    7962:	91 11       	cpse	r25, r1
    7964:	05 c0       	rjmp	.+10     	; 0x7970 <putChar_Note+0x9c>
    7966:	df 01       	movw	r26, r30
    7968:	12 96       	adiw	r26, 0x02	; 2
    796a:	8d e6       	ldi	r24, 0x6D	; 109
    796c:	81 83       	std	Z+1, r24	; 0x01
    796e:	0b c0       	rjmp	.+22     	; 0x7986 <putChar_Note+0xb2>
    7970:	9c 30       	cpi	r25, 0x0C	; 12
    7972:	28 f4       	brcc	.+10     	; 0x797e <putChar_Note+0xaa>
    7974:	df 01       	movw	r26, r30
    7976:	12 96       	adiw	r26, 0x02	; 2
    7978:	91 5d       	subi	r25, 0xD1	; 209
    797a:	91 83       	std	Z+1, r25	; 0x01
    797c:	04 c0       	rjmp	.+8      	; 0x7986 <putChar_Note+0xb2>
    797e:	df 01       	movw	r26, r30
    7980:	12 96       	adiw	r26, 0x02	; 2
    7982:	8d e2       	ldi	r24, 0x2D	; 45
    7984:	81 83       	std	Z+1, r24	; 0x01
    7986:	1c 92       	st	X, r1
    7988:	cd 01       	movw	r24, r26
    798a:	08 95       	ret

0000798c <putChar_Manual>:
    798c:	83 30       	cpi	r24, 0x03	; 3
    798e:	38 f4       	brcc	.+14     	; 0x799e <putChar_Manual+0x12>
    7990:	fb 01       	movw	r30, r22
    7992:	31 96       	adiw	r30, 0x01	; 1
    7994:	93 e3       	ldi	r25, 0x33	; 51
    7996:	98 1b       	sub	r25, r24
    7998:	db 01       	movw	r26, r22
    799a:	9c 93       	st	X, r25
    799c:	0d c0       	rjmp	.+26     	; 0x79b8 <putChar_Manual+0x2c>
    799e:	83 30       	cpi	r24, 0x03	; 3
    79a0:	31 f4       	brne	.+12     	; 0x79ae <putChar_Manual+0x22>
    79a2:	fb 01       	movw	r30, r22
    79a4:	31 96       	adiw	r30, 0x01	; 1
    79a6:	80 e5       	ldi	r24, 0x50	; 80
    79a8:	db 01       	movw	r26, r22
    79aa:	8c 93       	st	X, r24
    79ac:	05 c0       	rjmp	.+10     	; 0x79b8 <putChar_Manual+0x2c>
    79ae:	fb 01       	movw	r30, r22
    79b0:	31 96       	adiw	r30, 0x01	; 1
    79b2:	8d e2       	ldi	r24, 0x2D	; 45
    79b4:	db 01       	movw	r26, r22
    79b6:	8c 93       	st	X, r24
    79b8:	10 82       	st	Z, r1
    79ba:	cf 01       	movw	r24, r30
    79bc:	08 95       	ret

000079be <putString_P>:
    79be:	fc 01       	movw	r30, r24
    79c0:	db 01       	movw	r26, r22
    79c2:	20 e0       	ldi	r18, 0x00	; 0
    79c4:	02 c0       	rjmp	.+4      	; 0x79ca <putString_P+0xc>
    79c6:	28 2f       	mov	r18, r24
    79c8:	da 01       	movw	r26, r20
    79ca:	94 91       	lpm	r25, Z
    79cc:	99 23       	and	r25, r25
    79ce:	51 f0       	breq	.+20     	; 0x79e4 <putString_P+0x26>
    79d0:	ad 01       	movw	r20, r26
    79d2:	4f 5f       	subi	r20, 0xFF	; 255
    79d4:	5f 4f       	sbci	r21, 0xFF	; 255
    79d6:	31 96       	adiw	r30, 0x01	; 1
    79d8:	9c 93       	st	X, r25
    79da:	81 e0       	ldi	r24, 0x01	; 1
    79dc:	82 0f       	add	r24, r18
    79de:	24 31       	cpi	r18, 0x14	; 20
    79e0:	90 f3       	brcs	.-28     	; 0x79c6 <putString_P+0x8>
    79e2:	01 c0       	rjmp	.+2      	; 0x79e6 <putString_P+0x28>
    79e4:	ad 01       	movw	r20, r26
    79e6:	ca 01       	movw	r24, r20
    79e8:	08 95       	ret

000079ea <putString_Prog>:
    79ea:	fc 01       	movw	r30, r24
    79ec:	80 e5       	ldi	r24, 0x50	; 80
    79ee:	80 83       	st	Z, r24
    79f0:	96 2f       	mov	r25, r22
    79f2:	96 95       	lsr	r25
    79f4:	96 95       	lsr	r25
    79f6:	96 95       	lsr	r25
    79f8:	97 70       	andi	r25, 0x07	; 7
    79fa:	9f 5b       	subi	r25, 0xBF	; 191
    79fc:	91 83       	std	Z+1, r25	; 0x01
    79fe:	67 70       	andi	r22, 0x07	; 7
    7a00:	6f 5c       	subi	r22, 0xCF	; 207
    7a02:	62 83       	std	Z+2, r22	; 0x02
    7a04:	cf 01       	movw	r24, r30
    7a06:	03 96       	adiw	r24, 0x03	; 3
    7a08:	08 95       	ret

00007a0a <lcd_wordout>:
    7a0a:	cf 93       	push	r28
    7a0c:	c8 2f       	mov	r28, r24
    7a0e:	89 2f       	mov	r24, r25
    7a10:	4c de       	rcall	.-872    	; 0x76aa <lcd_hexout>
    7a12:	8c 2f       	mov	r24, r28
    7a14:	4a de       	rcall	.-876    	; 0x76aa <lcd_hexout>
    7a16:	cf 91       	pop	r28
    7a18:	08 95       	ret

00007a1a <lcd_noteOut>:
    7a1a:	cf 93       	push	r28
    7a1c:	df 93       	push	r29
    7a1e:	88 23       	and	r24, r24
    7a20:	e4 f1       	brlt	.+120    	; 0x7a9a <lcd_noteOut+0x80>
    7a22:	90 e0       	ldi	r25, 0x00	; 0
    7a24:	02 c0       	rjmp	.+4      	; 0x7a2a <lcd_noteOut+0x10>
    7a26:	9f 5f       	subi	r25, 0xFF	; 255
    7a28:	8c 50       	subi	r24, 0x0C	; 12
    7a2a:	8c 30       	cpi	r24, 0x0C	; 12
    7a2c:	e0 f7       	brcc	.-8      	; 0x7a26 <lcd_noteOut+0xc>
    7a2e:	48 2f       	mov	r20, r24
    7a30:	50 e0       	ldi	r21, 0x00	; 0
    7a32:	4c 30       	cpi	r20, 0x0C	; 12
    7a34:	51 05       	cpc	r21, r1
    7a36:	30 f4       	brcc	.+12     	; 0x7a44 <lcd_noteOut+0x2a>
    7a38:	fa 01       	movw	r30, r20
    7a3a:	88 27       	eor	r24, r24
    7a3c:	ea 55       	subi	r30, 0x5A	; 90
    7a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    7a40:	8f 4f       	sbci	r24, 0xFF	; 255
    7a42:	5d c1       	rjmp	.+698    	; 0x7cfe <__tablejump2__>
    7a44:	d3 e2       	ldi	r29, 0x23	; 35
    7a46:	80 e2       	ldi	r24, 0x20	; 32
    7a48:	23 c0       	rjmp	.+70     	; 0x7a90 <lcd_noteOut+0x76>
    7a4a:	d3 e2       	ldi	r29, 0x23	; 35
    7a4c:	84 e4       	ldi	r24, 0x44	; 68
    7a4e:	20 c0       	rjmp	.+64     	; 0x7a90 <lcd_noteOut+0x76>
    7a50:	d3 e2       	ldi	r29, 0x23	; 35
    7a52:	86 e4       	ldi	r24, 0x46	; 70
    7a54:	1d c0       	rjmp	.+58     	; 0x7a90 <lcd_noteOut+0x76>
    7a56:	d3 e2       	ldi	r29, 0x23	; 35
    7a58:	87 e4       	ldi	r24, 0x47	; 71
    7a5a:	1a c0       	rjmp	.+52     	; 0x7a90 <lcd_noteOut+0x76>
    7a5c:	d3 e2       	ldi	r29, 0x23	; 35
    7a5e:	81 e4       	ldi	r24, 0x41	; 65
    7a60:	17 c0       	rjmp	.+46     	; 0x7a90 <lcd_noteOut+0x76>
    7a62:	d5 ea       	ldi	r29, 0xA5	; 165
    7a64:	83 e4       	ldi	r24, 0x43	; 67
    7a66:	14 c0       	rjmp	.+40     	; 0x7a90 <lcd_noteOut+0x76>
    7a68:	d5 ea       	ldi	r29, 0xA5	; 165
    7a6a:	84 e4       	ldi	r24, 0x44	; 68
    7a6c:	11 c0       	rjmp	.+34     	; 0x7a90 <lcd_noteOut+0x76>
    7a6e:	d5 ea       	ldi	r29, 0xA5	; 165
    7a70:	85 e4       	ldi	r24, 0x45	; 69
    7a72:	0e c0       	rjmp	.+28     	; 0x7a90 <lcd_noteOut+0x76>
    7a74:	d5 ea       	ldi	r29, 0xA5	; 165
    7a76:	86 e4       	ldi	r24, 0x46	; 70
    7a78:	0b c0       	rjmp	.+22     	; 0x7a90 <lcd_noteOut+0x76>
    7a7a:	d5 ea       	ldi	r29, 0xA5	; 165
    7a7c:	87 e4       	ldi	r24, 0x47	; 71
    7a7e:	08 c0       	rjmp	.+16     	; 0x7a90 <lcd_noteOut+0x76>
    7a80:	d5 ea       	ldi	r29, 0xA5	; 165
    7a82:	81 e4       	ldi	r24, 0x41	; 65
    7a84:	05 c0       	rjmp	.+10     	; 0x7a90 <lcd_noteOut+0x76>
    7a86:	d5 ea       	ldi	r29, 0xA5	; 165
    7a88:	88 e4       	ldi	r24, 0x48	; 72
    7a8a:	02 c0       	rjmp	.+4      	; 0x7a90 <lcd_noteOut+0x76>
    7a8c:	d3 e2       	ldi	r29, 0x23	; 35
    7a8e:	83 e4       	ldi	r24, 0x43	; 67
    7a90:	99 23       	and	r25, r25
    7a92:	39 f0       	breq	.+14     	; 0x7aa2 <lcd_noteOut+0x88>
    7a94:	cf e2       	ldi	r28, 0x2F	; 47
    7a96:	c9 0f       	add	r28, r25
    7a98:	05 c0       	rjmp	.+10     	; 0x7aa4 <lcd_noteOut+0x8a>
    7a9a:	cd e2       	ldi	r28, 0x2D	; 45
    7a9c:	dd e2       	ldi	r29, 0x2D	; 45
    7a9e:	8d e2       	ldi	r24, 0x2D	; 45
    7aa0:	01 c0       	rjmp	.+2      	; 0x7aa4 <lcd_noteOut+0x8a>
    7aa2:	cd e2       	ldi	r28, 0x2D	; 45
    7aa4:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7aa8:	8d 2f       	mov	r24, r29
    7aaa:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7aae:	8c 2f       	mov	r24, r28
    7ab0:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7ab4:	83 e0       	ldi	r24, 0x03	; 3
    7ab6:	df 91       	pop	r29
    7ab8:	cf 91       	pop	r28
    7aba:	08 95       	ret

00007abc <lcd_ChannelOut>:
    7abc:	cf 93       	push	r28
    7abe:	c8 2f       	mov	r28, r24
    7ac0:	cf 70       	andi	r28, 0x0F	; 15
    7ac2:	81 e0       	ldi	r24, 0x01	; 1
    7ac4:	8c 0f       	add	r24, r28
    7ac6:	8a 30       	cpi	r24, 0x0A	; 10
    7ac8:	28 f0       	brcs	.+10     	; 0x7ad4 <lcd_ChannelOut+0x18>
    7aca:	81 e3       	ldi	r24, 0x31	; 49
    7acc:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7ad0:	87 ef       	ldi	r24, 0xF7	; 247
    7ad2:	8c 0f       	add	r24, r28
    7ad4:	80 5d       	subi	r24, 0xD0	; 208
    7ad6:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7ada:	cf 91       	pop	r28
    7adc:	08 95       	ret

00007ade <lcd_ManualOutDec>:
    7ade:	84 30       	cpi	r24, 0x04	; 4
    7ae0:	20 f0       	brcs	.+8      	; 0x7aea <lcd_ManualOutDec+0xc>
    7ae2:	8d e2       	ldi	r24, 0x2D	; 45
    7ae4:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    7ae8:	08 95       	ret
    7aea:	83 30       	cpi	r24, 0x03	; 3
    7aec:	21 f4       	brne	.+8      	; 0x7af6 <lcd_ManualOutDec+0x18>
    7aee:	80 e5       	ldi	r24, 0x50	; 80
    7af0:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    7af4:	08 95       	ret
    7af6:	93 e3       	ldi	r25, 0x33	; 51
    7af8:	98 1b       	sub	r25, r24
    7afa:	89 2f       	mov	r24, r25
    7afc:	0c 94 1f 14 	jmp	0x283e	; 0x283e <lcd_putc>
    7b00:	08 95       	ret

00007b02 <lcd_blank>:
    7b02:	cf 93       	push	r28
    7b04:	04 c0       	rjmp	.+8      	; 0x7b0e <lcd_blank+0xc>
    7b06:	80 e2       	ldi	r24, 0x20	; 32
    7b08:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7b0c:	8c 2f       	mov	r24, r28
    7b0e:	cf ef       	ldi	r28, 0xFF	; 255
    7b10:	c8 0f       	add	r28, r24
    7b12:	81 11       	cpse	r24, r1
    7b14:	f8 cf       	rjmp	.-16     	; 0x7b06 <lcd_blank+0x4>
    7b16:	cf 91       	pop	r28
    7b18:	08 95       	ret

00007b1a <lcd_clrEol>:
    7b1a:	cf 93       	push	r28
    7b1c:	90 e0       	ldi	r25, 0x00	; 0
    7b1e:	04 c0       	rjmp	.+8      	; 0x7b28 <lcd_clrEol+0xe>
    7b20:	80 e2       	ldi	r24, 0x20	; 32
    7b22:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7b26:	9c 2f       	mov	r25, r28
    7b28:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <lcd_cursorPos>
    7b2c:	84 31       	cpi	r24, 0x14	; 20
    7b2e:	51 f0       	breq	.+20     	; 0x7b44 <lcd_clrEol+0x2a>
    7b30:	84 35       	cpi	r24, 0x54	; 84
    7b32:	41 f0       	breq	.+16     	; 0x7b44 <lcd_clrEol+0x2a>
    7b34:	88 32       	cpi	r24, 0x28	; 40
    7b36:	31 f0       	breq	.+12     	; 0x7b44 <lcd_clrEol+0x2a>
    7b38:	88 36       	cpi	r24, 0x68	; 104
    7b3a:	21 f0       	breq	.+8      	; 0x7b44 <lcd_clrEol+0x2a>
    7b3c:	c1 e0       	ldi	r28, 0x01	; 1
    7b3e:	c9 0f       	add	r28, r25
    7b40:	94 31       	cpi	r25, 0x14	; 20
    7b42:	70 f3       	brcs	.-36     	; 0x7b20 <lcd_clrEol+0x6>
    7b44:	cf 91       	pop	r28
    7b46:	08 95       	ret

00007b48 <lcd_cursosblink>:
    7b48:	8d e0       	ldi	r24, 0x0D	; 13
    7b4a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <lcd_write_command>
    7b4e:	8f ef       	ldi	r24, 0xFF	; 255
    7b50:	80 93 fc 18 	sts	0x18FC, r24	; 0x8018fc <lcd_cursorIsOn>
    7b54:	08 95       	ret

00007b56 <lcd_cursoroff>:
    7b56:	8c e0       	ldi	r24, 0x0C	; 12
    7b58:	0e 94 69 13 	call	0x26d2	; 0x26d2 <lcd_write_command>
    7b5c:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <lcd_cursorIsOn>
    7b60:	08 95       	ret

00007b62 <lcd_waitSymbolOn>:
    7b62:	cf 93       	push	r28
    7b64:	c0 91 c8 03 	lds	r28, 0x03C8	; 0x8003c8 <lcd_cursorPos>
    7b68:	8c e0       	ldi	r24, 0x0C	; 12
    7b6a:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7b6e:	81 ea       	ldi	r24, 0xA1	; 161
    7b70:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7b74:	8c 2f       	mov	r24, r28
    7b76:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7b7a:	cf 91       	pop	r28
    7b7c:	08 95       	ret

00007b7e <lcd_waitSymbolOff>:
    7b7e:	cf 93       	push	r28
    7b80:	c0 91 c8 03 	lds	r28, 0x03C8	; 0x8003c8 <lcd_cursorPos>
    7b84:	8c e0       	ldi	r24, 0x0C	; 12
    7b86:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7b8a:	80 e2       	ldi	r24, 0x20	; 32
    7b8c:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>
    7b90:	8c 2f       	mov	r24, r28
    7b92:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
    7b96:	cf 91       	pop	r28
    7b98:	08 95       	ret

00007b9a <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    7b9a:	84 30       	cpi	r24, 0x04	; 4
    7b9c:	28 f0       	brcs	.+10     	; 0x7ba8 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    7b9e:	20 e0       	ldi	r18, 0x00	; 0
    7ba0:	0d c0       	rjmp	.+26     	; 0x7bbc <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7ba2:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    7ba4:	fa 01       	movw	r30, r20
    7ba6:	02 c0       	rjmp	.+4      	; 0x7bac <keylabel_set+0x12>
    7ba8:	fb 01       	movw	r30, r22
    7baa:	20 e0       	ldi	r18, 0x00	; 0
    7bac:	af 01       	movw	r20, r30
    7bae:	4f 5f       	subi	r20, 0xFF	; 255
    7bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    7bb2:	94 91       	lpm	r25, Z
    7bb4:	99 23       	and	r25, r25
    7bb6:	11 f0       	breq	.+4      	; 0x7bbc <keylabel_set+0x22>
    7bb8:	25 30       	cpi	r18, 0x05	; 5
    7bba:	98 f3       	brcs	.-26     	; 0x7ba2 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7bbc:	90 e0       	ldi	r25, 0x00	; 0
    7bbe:	dc 01       	movw	r26, r24
    7bc0:	aa 0f       	add	r26, r26
    7bc2:	bb 1f       	adc	r27, r27
    7bc4:	aa 0f       	add	r26, r26
    7bc6:	bb 1f       	adc	r27, r27
    7bc8:	8a 0f       	add	r24, r26
    7bca:	9b 1f       	adc	r25, r27
    7bcc:	dc 01       	movw	r26, r24
    7bce:	af 5c       	subi	r26, 0xCF	; 207
    7bd0:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7bd2:	45 e0       	ldi	r20, 0x05	; 5
    7bd4:	50 e0       	ldi	r21, 0x00	; 0
    7bd6:	42 1b       	sub	r20, r18
    7bd8:	51 09       	sbc	r21, r1
    7bda:	ca 01       	movw	r24, r20
    7bdc:	99 23       	and	r25, r25
    7bde:	0c f4       	brge	.+2      	; 0x7be2 <keylabel_set+0x48>
    7be0:	01 96       	adiw	r24, 0x01	; 1
    7be2:	95 95       	asr	r25
    7be4:	87 95       	ror	r24
    7be6:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    7be8:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    7bea:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7bec:	0e c0       	rjmp	.+28     	; 0x7c0a <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7bee:	93 17       	cp	r25, r19
    7bf0:	10 f0       	brcs	.+4      	; 0x7bf6 <keylabel_set+0x5c>
    7bf2:	98 17       	cp	r25, r24
    7bf4:	18 f0       	brcs	.+6      	; 0x7bfc <keylabel_set+0x62>
			*charBufPtr = ' ';
    7bf6:	20 e2       	ldi	r18, 0x20	; 32
    7bf8:	2c 93       	st	X, r18
    7bfa:	05 c0       	rjmp	.+10     	; 0x7c06 <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7bfc:	fb 01       	movw	r30, r22
    7bfe:	24 91       	lpm	r18, Z
    7c00:	2c 93       	st	X, r18
    7c02:	6f 5f       	subi	r22, 0xFF	; 255
    7c04:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    7c06:	11 96       	adiw	r26, 0x01	; 1
		i++;
    7c08:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7c0a:	95 30       	cpi	r25, 0x05	; 5
    7c0c:	80 f3       	brcs	.-32     	; 0x7bee <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7c0e:	08 95       	ret

00007c10 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7c10:	90 e0       	ldi	r25, 0x00	; 0
    7c12:	fc 01       	movw	r30, r24
    7c14:	ee 0f       	add	r30, r30
    7c16:	ff 1f       	adc	r31, r31
    7c18:	ee 0f       	add	r30, r30
    7c1a:	ff 1f       	adc	r31, r31
    7c1c:	8e 0f       	add	r24, r30
    7c1e:	9f 1f       	adc	r25, r31
    7c20:	fc 01       	movw	r30, r24
    7c22:	ef 5c       	subi	r30, 0xCF	; 207
    7c24:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7c26:	80 e0       	ldi	r24, 0x00	; 0
    7c28:	04 c0       	rjmp	.+8      	; 0x7c32 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    7c2a:	90 e2       	ldi	r25, 0x20	; 32
    7c2c:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7c2e:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7c30:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7c32:	85 30       	cpi	r24, 0x05	; 5
    7c34:	d0 f3       	brcs	.-12     	; 0x7c2a <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    7c36:	08 95       	ret

00007c38 <keylabel_toLCD>:

void keylabel_toLCD(){
    7c38:	0f 93       	push	r16
    7c3a:	1f 93       	push	r17
    7c3c:	cf 93       	push	r28
    7c3e:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7c40:	d0 91 c8 03 	lds	r29, 0x03C8	; 0x8003c8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    7c44:	84 e5       	ldi	r24, 0x54	; 84
    7c46:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7c4a:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7c4c:	e1 e3       	ldi	r30, 0x31	; 49
    7c4e:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7c50:	08 c0       	rjmp	.+16     	; 0x7c62 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    7c52:	8f 01       	movw	r16, r30
    7c54:	0f 5f       	subi	r16, 0xFF	; 255
    7c56:	1f 4f       	sbci	r17, 0xFF	; 255
    7c58:	80 81       	ld	r24, Z
    7c5a:	0e 94 1f 14 	call	0x283e	; 0x283e <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7c5e:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    7c60:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7c62:	c4 31       	cpi	r28, 0x14	; 20
    7c64:	b0 f3       	brcs	.-20     	; 0x7c52 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    7c66:	8d 2f       	mov	r24, r29
    7c68:	0e 94 f5 13 	call	0x27ea	; 0x27ea <lcd_goto>
}
    7c6c:	df 91       	pop	r29
    7c6e:	cf 91       	pop	r28
    7c70:	1f 91       	pop	r17
    7c72:	0f 91       	pop	r16
    7c74:	08 95       	ret

00007c76 <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7c76:	90 e0       	ldi	r25, 0x00	; 0
    7c78:	fc 01       	movw	r30, r24
    7c7a:	ee 0f       	add	r30, r30
    7c7c:	ff 1f       	adc	r31, r31
    7c7e:	ee 0f       	add	r30, r30
    7c80:	ff 1f       	adc	r31, r31
    7c82:	8e 0f       	add	r24, r30
    7c84:	9f 1f       	adc	r25, r31
    7c86:	fc 01       	movw	r30, r24
    7c88:	ef 5c       	subi	r30, 0xCF	; 207
    7c8a:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7c8c:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7c8e:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7c90:	12 c0       	rjmp	.+36     	; 0x7cb6 <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    7c92:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7c94:	61 11       	cpse	r22, r1
    7c96:	06 c0       	rjmp	.+12     	; 0x7ca4 <keylabel_statcheck+0x2e>
    7c98:	2a 32       	cpi	r18, 0x2A	; 42
    7c9a:	21 f4       	brne	.+8      	; 0x7ca4 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7c9c:	80 e8       	ldi	r24, 0x80	; 128
    7c9e:	80 83       	st	Z, r24
			result = 0xFF;
    7ca0:	8f ef       	ldi	r24, 0xFF	; 255
    7ca2:	07 c0       	rjmp	.+14     	; 0x7cb2 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7ca4:	66 23       	and	r22, r22
    7ca6:	29 f0       	breq	.+10     	; 0x7cb2 <keylabel_statcheck+0x3c>
    7ca8:	20 38       	cpi	r18, 0x80	; 128
    7caa:	19 f4       	brne	.+6      	; 0x7cb2 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    7cac:	8a e2       	ldi	r24, 0x2A	; 42
    7cae:	80 83       	st	Z, r24
			result = 0xFF;
    7cb0:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    7cb2:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7cb4:	9f 5f       	subi	r25, 0xFF	; 255
    7cb6:	95 30       	cpi	r25, 0x05	; 5
    7cb8:	60 f3       	brcs	.-40     	; 0x7c92 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7cba:	08 95       	ret

00007cbc <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7cbc:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7cbe:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7cc0:	94 91       	lpm	r25, Z
    7cc2:	99 23       	and	r25, r25
    7cc4:	21 f0       	breq	.+8      	; 0x7cce <get_StrLenP+0x12>
			return result;
		}
		pString++;
    7cc6:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7cc8:	8f 5f       	subi	r24, 0xFF	; 255
    7cca:	80 32       	cpi	r24, 0x20	; 32
    7ccc:	c8 f3       	brcs	.-14     	; 0x7cc0 <get_StrLenP+0x4>
	return result;
}
    7cce:	08 95       	ret

00007cd0 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7cd0:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7cd2:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7cd4:	90 81       	ld	r25, Z
    7cd6:	99 23       	and	r25, r25
    7cd8:	21 f0       	breq	.+8      	; 0x7ce2 <get_StrLen+0x12>
			return result;
		}
		pString++;
    7cda:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7cdc:	8f 5f       	subi	r24, 0xFF	; 255
    7cde:	80 32       	cpi	r24, 0x20	; 32
    7ce0:	c8 f3       	brcs	.-14     	; 0x7cd4 <get_StrLen+0x4>
	return result;
}
    7ce2:	08 95       	ret

00007ce4 <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    7ce4:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7ce6:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    7ce8:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7cea:	06 c0       	rjmp	.+12     	; 0x7cf8 <reverse_Bits+0x14>
		result = result << 1;
    7cec:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7cee:	32 2f       	mov	r19, r18
    7cf0:	31 70       	andi	r19, 0x01	; 1
    7cf2:	83 2b       	or	r24, r19
		val = val >> 1;
    7cf4:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7cf6:	9f 5f       	subi	r25, 0xFF	; 255
    7cf8:	98 30       	cpi	r25, 0x08	; 8
    7cfa:	c0 f3       	brcs	.-16     	; 0x7cec <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7cfc:	08 95       	ret

00007cfe <__tablejump2__>:
    7cfe:	ee 0f       	add	r30, r30
    7d00:	ff 1f       	adc	r31, r31
    7d02:	88 1f       	adc	r24, r24
    7d04:	8b bf       	out	0x3b, r24	; 59
    7d06:	07 90       	elpm	r0, Z+
    7d08:	f6 91       	elpm	r31, Z
    7d0a:	e0 2d       	mov	r30, r0
    7d0c:	19 94       	eijmp

00007d0e <eeprom_read_block>:
    7d0e:	dc 01       	movw	r26, r24
    7d10:	cb 01       	movw	r24, r22

00007d12 <eeprom_read_blraw>:
    7d12:	fc 01       	movw	r30, r24
    7d14:	f9 99       	sbic	0x1f, 1	; 31
    7d16:	fe cf       	rjmp	.-4      	; 0x7d14 <eeprom_read_blraw+0x2>
    7d18:	06 c0       	rjmp	.+12     	; 0x7d26 <eeprom_read_blraw+0x14>
    7d1a:	f2 bd       	out	0x22, r31	; 34
    7d1c:	e1 bd       	out	0x21, r30	; 33
    7d1e:	f8 9a       	sbi	0x1f, 0	; 31
    7d20:	31 96       	adiw	r30, 0x01	; 1
    7d22:	00 b4       	in	r0, 0x20	; 32
    7d24:	0d 92       	st	X+, r0
    7d26:	41 50       	subi	r20, 0x01	; 1
    7d28:	50 40       	sbci	r21, 0x00	; 0
    7d2a:	b8 f7       	brcc	.-18     	; 0x7d1a <eeprom_read_blraw+0x8>
    7d2c:	08 95       	ret

00007d2e <eeprom_read_byte>:
    7d2e:	f9 99       	sbic	0x1f, 1	; 31
    7d30:	fe cf       	rjmp	.-4      	; 0x7d2e <eeprom_read_byte>
    7d32:	92 bd       	out	0x22, r25	; 34
    7d34:	81 bd       	out	0x21, r24	; 33
    7d36:	f8 9a       	sbi	0x1f, 0	; 31
    7d38:	99 27       	eor	r25, r25
    7d3a:	80 b5       	in	r24, 0x20	; 32
    7d3c:	08 95       	ret

00007d3e <eeprom_read_word>:
    7d3e:	a8 e1       	ldi	r26, 0x18	; 24
    7d40:	b0 e0       	ldi	r27, 0x00	; 0
    7d42:	42 e0       	ldi	r20, 0x02	; 2
    7d44:	50 e0       	ldi	r21, 0x00	; 0
    7d46:	e5 cf       	rjmp	.-54     	; 0x7d12 <eeprom_read_blraw>

00007d48 <eeprom_update_block>:
    7d48:	dc 01       	movw	r26, r24
    7d4a:	a4 0f       	add	r26, r20
    7d4c:	b5 1f       	adc	r27, r21
    7d4e:	41 50       	subi	r20, 0x01	; 1
    7d50:	50 40       	sbci	r21, 0x00	; 0
    7d52:	40 f0       	brcs	.+16     	; 0x7d64 <eeprom_update_block+0x1c>
    7d54:	cb 01       	movw	r24, r22
    7d56:	84 0f       	add	r24, r20
    7d58:	95 1f       	adc	r25, r21
    7d5a:	2e 91       	ld	r18, -X
    7d5c:	05 d0       	rcall	.+10     	; 0x7d68 <eeprom_update_r18>
    7d5e:	41 50       	subi	r20, 0x01	; 1
    7d60:	50 40       	sbci	r21, 0x00	; 0
    7d62:	d8 f7       	brcc	.-10     	; 0x7d5a <eeprom_update_block+0x12>
    7d64:	08 95       	ret

00007d66 <eeprom_update_byte>:
    7d66:	26 2f       	mov	r18, r22

00007d68 <eeprom_update_r18>:
    7d68:	f9 99       	sbic	0x1f, 1	; 31
    7d6a:	fe cf       	rjmp	.-4      	; 0x7d68 <eeprom_update_r18>
    7d6c:	92 bd       	out	0x22, r25	; 34
    7d6e:	81 bd       	out	0x21, r24	; 33
    7d70:	f8 9a       	sbi	0x1f, 0	; 31
    7d72:	01 97       	sbiw	r24, 0x01	; 1
    7d74:	00 b4       	in	r0, 0x20	; 32
    7d76:	02 16       	cp	r0, r18
    7d78:	39 f0       	breq	.+14     	; 0x7d88 <eeprom_update_r18+0x20>
    7d7a:	1f ba       	out	0x1f, r1	; 31
    7d7c:	20 bd       	out	0x20, r18	; 32
    7d7e:	0f b6       	in	r0, 0x3f	; 63
    7d80:	f8 94       	cli
    7d82:	fa 9a       	sbi	0x1f, 2	; 31
    7d84:	f9 9a       	sbi	0x1f, 1	; 31
    7d86:	0f be       	out	0x3f, r0	; 63
    7d88:	08 95       	ret

00007d8a <eeprom_update_word>:
    7d8a:	01 96       	adiw	r24, 0x01	; 1
    7d8c:	27 2f       	mov	r18, r23
    7d8e:	ec df       	rcall	.-40     	; 0x7d68 <eeprom_update_r18>
    7d90:	ea cf       	rjmp	.-44     	; 0x7d66 <eeprom_update_byte>

00007d92 <_exit>:
    7d92:	f8 94       	cli

00007d94 <__stop_program>:
    7d94:	ff cf       	rjmp	.-2      	; 0x7d94 <__stop_program>
