
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000079dc  00007a90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000079dc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001719  00800208  00800208  00007a98  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008ac8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b28  00000000  00000000  00008b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ee35  00000000  00000000  00009630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000263a  00000000  00000000  00018465  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008cdd  00000000  00000000  0001aa9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001bb0  00000000  00000000  0002377c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000343f  00000000  00000000  0002532c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009886  00000000  00000000  0002876b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ee0  00000000  00000000  00031ff1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__ctors_end>
       4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
       8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
       c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      10:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      14:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      18:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      1c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      20:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      24:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      28:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      2c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      30:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      34:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      38:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      3c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      40:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      44:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      48:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      4c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      50:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      54:	0c 94 a1 0f 	jmp	0x1f42	; 0x1f42 <__vector_21>
      58:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      5c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      60:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      64:	0c 94 ce 37 	jmp	0x6f9c	; 0x6f9c <__vector_25>
      68:	0c 94 14 38 	jmp	0x7028	; 0x7028 <__vector_26>
      6c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      70:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      74:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      78:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      7c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      80:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      84:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      88:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      8c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      90:	0c 94 e1 35 	jmp	0x6bc2	; 0x6bc2 <__vector_36>
      94:	0c 94 36 36 	jmp	0x6c6c	; 0x6c6c <__vector_37>
      98:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      9c:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      a0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      a4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      a8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      ac:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      b0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      b4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      b8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      bc:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      c0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      c4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      c8:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      cc:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      d0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      d4:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      d8:	0c 94 d4 38 	jmp	0x71a8	; 0x71a8 <__vector_54>
      dc:	0c 94 2c 39 	jmp	0x7258	; 0x7258 <__vector_55>
      e0:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__bad_interrupt>
      e4:	80 1f       	adc	r24, r16
      e6:	8b 1f       	adc	r24, r27
      e8:	97 1f       	adc	r25, r23
      ea:	b3 1f       	adc	r27, r19
      ec:	d0 1f       	adc	r29, r16
      ee:	f1 1f       	adc	r31, r17
      f0:	fc 1f       	adc	r31, r28
      f2:	07 20       	and	r0, r7
      f4:	1c 20       	and	r1, r12
      f6:	32 20       	and	r3, r2
      f8:	3a 20       	and	r3, r10
      fa:	48 20       	and	r4, r8
      fc:	1c 20       	and	r1, r12
      fe:	75 20       	and	r7, r5
     100:	85 20       	and	r8, r5
     102:	a9 20       	and	r10, r9
     104:	fb 20       	and	r15, r11
     106:	14 21       	and	r17, r4
     108:	29 21       	and	r18, r9
     10a:	42 21       	and	r20, r2
     10c:	4a 21       	and	r20, r10
     10e:	6f 21       	and	r22, r15
     110:	6f 21       	and	r22, r15
     112:	88 21       	and	r24, r8
     114:	95 21       	and	r25, r5
     116:	84 21       	and	r24, r4
     118:	f0 21       	and	r31, r0
     11a:	f8 21       	and	r31, r8
     11c:	43 22       	and	r4, r19
     11e:	a5 22       	and	r10, r21
     120:	cf 22       	and	r12, r31
     122:	fb 22       	and	r15, r27
     124:	2a 23       	and	r18, r26
     126:	32 23       	and	r19, r18
     128:	38 23       	and	r19, r24
     12a:	f0 21       	and	r31, r0
     12c:	40 23       	and	r20, r16
     12e:	54 23       	and	r21, r20
     130:	38 23       	and	r19, r24
     132:	92 23       	and	r25, r18
     134:	9f 23       	and	r25, r31
     136:	ab 23       	and	r26, r27
     138:	c0 23       	and	r28, r16
     13a:	d9 23       	and	r29, r25
     13c:	fc 23       	and	r31, r28
     13e:	07 24       	eor	r0, r7
     140:	0d 24       	eor	r0, r13
     142:	12 24       	eor	r1, r2
     144:	25 24       	eor	r2, r5
     146:	46 24       	eor	r4, r6
     148:	59 24       	eor	r5, r9
     14a:	12 24       	eor	r1, r2
     14c:	54 3b       	cpi	r21, 0xB4	; 180
     14e:	69 3b       	cpi	r22, 0xB9	; 185
     150:	57 3b       	cpi	r21, 0xB7	; 183
     152:	48 3b       	cpi	r20, 0xB8	; 184
     154:	5a 3b       	cpi	r21, 0xBA	; 186
     156:	5d 3b       	cpi	r21, 0xBD	; 189
     158:	4b 3b       	cpi	r20, 0xBB	; 187
     15a:	60 3b       	cpi	r22, 0xB0	; 176
     15c:	4e 3b       	cpi	r20, 0xBE	; 190
     15e:	63 3b       	cpi	r22, 0xB3	; 179
     160:	51 3b       	cpi	r21, 0xB1	; 177
     162:	66 3b       	cpi	r22, 0xB6	; 182

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWnone>:
     2b4:	6e 6f 6e 65 00                                      none.

000002b9 <usbHWmidiThru>:
     2b9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

000002c5 <usbHWmidiOut>:
     2c5:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

000002cf <usbHWmidiIn>:
     2cf:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

000002d8 <usbHWmidichanSW>:
     2d8:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2e8:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2f8:	20 00                                                .

000002fa <usbHWBits>:
     2fa:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000302 <usbHWmodule>:
     302:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000030a <usbHWempty>:
     30a:	65 6d 70 74 79 00                                   empty.

00000310 <usbHWRegister>:
     310:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000031c <usbHWRange>:
     31c:	52 61 6e 67 65 20 00                                Range .

00000323 <usbHWManual>:
     323:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000032c <usbHWmodulCheck>:
     32c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     33c:	20 00                                                .

0000033e <usbHWmodulInst>:
     33e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     34e:	3a 20 00                                            : .

00000351 <usbHWtitel>:
     351:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     361:	72 61 74 69 6f 6e 0d 0a 00                          ration...

0000036a <HelloMsg>:
     36a:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     37a:	65 72 66 61 63 65 0d 0a 00                          erface...

00000383 <usbLog>:
     383:	4c 6f 67 0d 0a 00                                   Log...

00000389 <usbEmpty>:
     389:	65 6d 70 74 79 0d 0a 00                             empty...

00000391 <msg_programming1>:
     391:	73 61 76 65 2e 2e 2e 00                             save....

00000399 <logNone>:
     399:	3c 6e 6f 6e 65 3e 00                                <none>.

000003a0 <stringNotAssigen>:
     3a0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003ab <menuMessageE>:
     3ab:	45 3a 00                                            E:.

000003ae <menuMessageOK>:
     3ae:	6f 6b 20 00                                         ok .

000003b2 <menuMessageAbort>:
     3b2:	61 62 6f 72 74 00                                   abort.

000003b8 <menuMessageMIDIpanic>:
     3b8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003c7 <messageRegisterMan>:
     3c7:	2b 00                                               +.

000003c9 <messageLoaded>:
     3c9:	20 52 65 67 00                                       Reg.

000003ce <messageSaved>:
     3ce:	20 52 65 67 20 7e 20 00                              Reg ~ .

000003d6 <MenuMIDIOutText>:
     3d6:	4f 75 74 3a 00                                      Out:.

000003db <MenuMIDIInText>:
     3db:	49 6e 3a 00                                         In:.

000003df <initMenuText>:
     3df:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003e9 <nibbleInfo>:
	...
     3f1:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     401:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     411:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     421:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     431:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     441:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     451:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     461:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000470 <menu_selFunc>:
     470:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 cc 07     ..<none>........
     480:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     490:	d6 07 c2 07 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     4a0:	6e 00 00 00 3a 0d b8 07 00 00 00 00 01 10 4b 6f     n...:.........Ko
     4b0:	70 70 65 6c 32 3c 33 00 00 00 9a 07 4f 1e 00 00     ppel2<3.....O...
     4c0:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 90 07     ..Koppel1<3.....
     4d0:	52 1e 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     R.....KoppelP<3.
     4e0:	00 00 86 07 55 1e 00 00 01 10 4b 6f 70 70 65 6c     ....U.....Koppel
     4f0:	31 3c 32 00 00 00 7c 07 58 1e 00 00 01 10 4b 6f     1<2...|.X.....Ko
     500:	70 70 65 6c 50 3c 32 00 00 00 72 07 5b 1e 00 00     ppelP<2...r.[...
     510:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 68 07     ..KoppelP<1...h.
     520:	5e 1e 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     ^.....Koppel3<2.
     530:	00 00 5e 07 61 1e 00 00 01 10 4b 6f 70 70 65 6c     ..^.a.....Koppel
     540:	33 3c 31 00 00 00 54 07 64 1e 00 00 01 10 4b 6f     3<1...T.d.....Ko
     550:	70 70 65 6c 33 3c 50 00 00 00 4a 07 67 1e 00 00     ppel3<P...J.g...
     560:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 40 07     ..Koppel2<1...@.
     570:	6a 1e 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     j.....Koppel2<P.
     580:	00 00 36 07 6d 1e 00 00 01 10 4b 6f 70 70 65 6c     ..6.m.....Koppel
     590:	31 3c 50 00 00 00 2c 07 70 1e 00 00 01 10 50 72     1<P...,.p.....Pr
     5a0:	2e 2b 2f 73 65 74 00 00 00 00 fa 06 0c 2b 00 00     .+/set.......+..
     5b0:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 f0 06     ..Pr.-/clr......
     5c0:	84 1e 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     ......Prog. 1A..
     5d0:	00 00 22 07 90 2b 00 00 01 10 50 72 6f 67 2e 20     .."..+....Prog. 
     5e0:	32 41 00 00 00 00 18 07 93 2b 00 00 01 10 50 72     2A.......+....Pr
     5f0:	6f 67 2e 20 33 41 00 00 00 00 0e 07 96 2b 00 00     og. 3A.......+..
     600:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 04 07     ..Prog. 4A......
     610:	99 2b 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     .+....Prog.clr..
     620:	00 00 b4 06 8d 19 00 00 01 10 50 72 6f 67 2e 73     ..........Prog.s
     630:	65 74 00 00 00 00 be 06 30 2b 00 00 01 10 50 72     et......0+....Pr
     640:	6f 67 2e 2b 00 00 00 00 00 00 e6 06 a1 1e 00 00     og.+............
     650:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 dc 06     ..Prog.-........
     660:	c2 1e 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     ......PrBank+...
     670:	00 00 d2 06 e3 1e 00 00 01 10 50 72 42 61 6e 6b     ..........PrBank
     680:	2e 2d 00 00 00 00 c8 06 f3 1e 00 00 01 10 4d 49     .-............MI
     690:	44 49 20 4f 66 66 00 00 00 00 a4 07 4f 29 00 00     DI Off......O)..
     6a0:	c1 10 53 65 74 75 70 00 00 00 00 00 2a 0e ae 07     ..Setup.....*...
     6b0:	00 00 00 00                                         ....

000006b4 <shortKeyTextRegOff>:
     6b4:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

000006be <shortKeyTextPRS>:
     6be:	50 73 65 74 00 00 00 00 00 00                       Pset......

000006c8 <shortKeyTextPBD>:
     6c8:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

000006d2 <shortKeyTextPBI>:
     6d2:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

000006dc <shortKeyTextPRD>:
     6dc:	50 2d 00 00 00 00 00 00 00 00                       P-........

000006e6 <shortKeyTextPRI>:
     6e6:	50 2b 00 00 00 00 00 00 00 00                       P+........

000006f0 <shortKeyTextPRM>:
     6f0:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

000006fa <shortKeyTextPRP>:
     6fa:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000704 <shortKeyTextK4A>:
     704:	50 41 34 00 00 00 00 00 00 00                       PA4.......

0000070e <shortKeyTextK3A>:
     70e:	50 41 33 00 00 00 00 00 00 00                       PA3.......

00000718 <shortKeyTextK2A>:
     718:	50 41 32 00 00 00 00 00 00 00                       PA2.......

00000722 <shortKeyTextK1A>:
     722:	50 41 31 00 00 00 00 00 00 00                       PA1.......

0000072c <shortKeyTextCpl1P>:
     72c:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000736 <shortKeyTextCpl2P>:
     736:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000740 <shortKeyTextCpl21>:
     740:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000074a <shortKeyTextCpl3P>:
     74a:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000754 <shortKeyTextCpl31>:
     754:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000075e <shortKeyTextCpl32>:
     75e:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000768 <shortKeyTextCplP1>:
     768:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

00000772 <shortKeyTextCplP2>:
     772:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

0000077c <shortKeyTextCpl12>:
     77c:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

00000786 <shortKeyTextCplP3>:
     786:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

00000790 <shortKeyTextCpl13>:
     790:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

0000079a <shortKeyTextCpl23>:
     79a:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000007a4 <shortKeyTextMIDIoff>:
     7a4:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000007ae <shortKeyTextSetup>:
     7ae:	53 65 74 75 00 00 00 00 00 00                       Setu......

000007b8 <shortKeyTextStim>:
     7b8:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000007c2 <shortKeyTextMenu>:
     7c2:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000007cc <shortKeyTextNone>:
	...

000007d6 <menu_main>:
     7d6:	81 00 4d 61 6e 75 61 6c 00 00 00 00 4e 08 00 00     ..Manual....N...
     7e6:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     7f6:	76 08 00 00 0b 1e 00 00 01 00 4d 49 44 49 00 00     v.........MIDI..
     806:	00 00 00 00 42 0a 00 00 00 00 00 00 01 00 54 61     ....B.........Ta
     816:	73 74 65 6e 00 00 00 00 ea 0c 00 00 00 00 b0 19     sten............
     826:	01 00 53 74 61 74 75 73 00 00 00 00 12 12 00 00     ..Status........
     836:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     846:	2a 0e 00 00 00 00 00 00                             *.......

0000084e <menu_manual>:
     84e:	81 00 4b 6f 70 70 65 6c 00 00 00 00 52 09 00 00     ..Koppel....R...
     85e:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     86e:	3a 0d 00 00 00 00 00 00                             :.......

00000876 <menu_register>:
     876:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 a8 05     ..Prog.lad......
     886:	00 00 18 1e 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ......Prog.sp...
     896:	00 00 a8 05 00 00 a5 19 01 00 61 75 73 00 00 00     ..........aus...
	...
     8ae:	12 1e 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     8be:	00 00 6d 05 00 00 65 19 0e 00 52 65 67 2e 39 2d     ..m...e...Reg.9-
     8ce:	31 36 00 00 00 00 6e 05 00 00 65 19 0e 00 52 65     16....n...e...Re
     8de:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 65 19     g.17-24...o...e.
     8ee:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     8fe:	00 00 65 19 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..e...Reg.33-40.
     90e:	00 00 71 05 00 00 65 19 0e 00 52 65 67 2e 34 31     ..q...e...Reg.41
     91e:	2d 34 38 00 00 00 72 05 00 00 65 19 0e 00 52 65     -48...r...e...Re
     92e:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 65 19     g.49-54...s...e.
     93e:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     94e:	00 00 65 19                                         ..e.

00000952 <menu_coupler>:
     952:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 11 08     ..2<3...........
     962:	00 00 92 19 09 00 31 3c 33 00 00 00 00 00 00 00     ......1<3.......
     972:	00 00 12 08 00 00 92 19 09 00 31 3c 32 00 00 00     ..........1<2...
     982:	00 00 00 00 00 00 13 08 00 00 92 19 09 00 50 3c     ..............P<
     992:	33 00 00 00 00 00 00 00 00 00 14 08 00 00 92 19     3...............
     9a2:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 15 08     ..P<2...........
     9b2:	00 00 92 19 09 00 50 3c 31 00 00 00 00 00 00 00     ......P<1.......
     9c2:	00 00 16 08 00 00 92 19 09 00 33 3c 32 00 00 00     ..........3<2...
     9d2:	00 00 00 00 00 00 17 08 00 00 92 19 09 00 33 3c     ..............3<
     9e2:	31 00 00 00 00 00 00 00 00 00 18 08 00 00 92 19     1...............
     9f2:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 19 08     ..3<P...........
     a02:	00 00 92 19 09 00 32 3c 31 00 00 00 00 00 00 00     ......2<1.......
     a12:	00 00 1a 08 00 00 92 19 09 00 32 3c 50 00 00 00     ..........2<P...
     a22:	00 00 00 00 00 00 1b 08 00 00 92 19 c9 00 31 3c     ..............1<
     a32:	50 00 00 00 00 00 00 00 00 00 1c 08 00 00 92 19     P...............

00000a42 <menu_midi>:
     a42:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     a52:	4f 29 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     O)....MIDIin....
     a62:	0a 0b 00 00 00 00 1e 1b 01 00 4d 49 44 49 6f 75     ..........MIDIou
     a72:	74 00 00 00 8a 0d 00 00 00 00 1a 1b 03 10 54 68     t.............Th
     a82:	72 75 2d 49 6e 00 00 00 00 00 26 08 00 00 61 19     ru-In.....&...a.
     a92:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 27 08     ..Thru-Out....'.
     aa2:	00 00 61 19 09 00 41 63 63 65 70 74 20 50 43 00     ..a...Accept PC.
     ab2:	00 00 32 09 00 00 16 1b 09 00 41 63 74 2e 53 65     ..2.......Act.Se
     ac2:	6e 73 65 00 00 00 30 09 00 00 16 1b 09 00 56 65     nse...0.......Ve
     ad2:	6c 5a 34 4f 66 66 00 00 00 00 31 09 00 00 16 1b     lZ4Off....1.....
     ae2:	06 08 52 78 42 75 66 55 73 65 00 00 00 00 41 15     ..RxBufUse....A.
     af2:	00 00 00 00 c6 08 54 78 42 75 66 55 73 65 00 00     ......TxBufUse..
     b02:	00 00 4a 16 00 00 00 00                             ..J.....

00000b0a <menu_midiIn>:
     b0a:	81 00 43 68 2e 31 00 00 00 00 00 00 4a 0c 00 00     ..Ch.1......J...
     b1a:	db 18 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     b2a:	4a 0c 01 00 db 18 00 00 01 00 43 68 2e 33 00 00     J.........Ch.3..
     b3a:	00 00 00 00 4a 0c 02 00 db 18 00 00 01 00 43 68     ....J.........Ch
     b4a:	2e 34 00 00 00 00 00 00 4a 0c 03 00 db 18 00 00     .4......J.......
     b5a:	01 00 43 68 2e 35 00 00 00 00 00 00 4a 0c 04 00     ..Ch.5......J...
     b6a:	db 18 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     b7a:	4a 0c 05 00 db 18 00 00 01 00 43 68 2e 37 00 00     J.........Ch.7..
     b8a:	00 00 00 00 4a 0c 06 00 db 18 00 00 01 00 43 68     ....J.........Ch
     b9a:	2e 38 00 00 00 00 00 00 4a 0c 07 00 db 18 00 00     .8......J.......
     baa:	01 00 43 68 2e 39 00 00 00 00 00 00 4a 0c 08 00     ..Ch.9......J...
     bba:	db 18 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     bca:	4a 0c 09 00 db 18 00 00 01 00 43 68 2e 31 31 00     J.........Ch.11.
     bda:	00 00 00 00 4a 0c 0a 00 db 18 00 00 01 00 43 68     ....J.........Ch
     bea:	2e 31 32 00 00 00 00 00 4a 0c 0b 00 db 18 00 00     .12.....J.......
     bfa:	01 00 43 68 2e 31 33 00 00 00 00 00 4a 0c 0c 00     ..Ch.13.....J...
     c0a:	db 18 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     c1a:	4a 0c 0d 00 db 18 00 00 01 00 43 68 2e 31 35 00     J.........Ch.15.
     c2a:	00 00 00 00 4a 0c 0e 00 db 18 00 00 c1 00 43 68     ....J.........Ch
     c3a:	2e 31 36 00 00 00 00 00 4a 0c 0f 00 db 18 00 00     .16.....J.......

00000c4a <menu_midiInSec>:
     c4a:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 0c 00 00     ..Sect.1........
     c5a:	e6 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     c6a:	9a 0c 01 00 e6 18 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     c7a:	00 00 00 00 9a 0c 02 00 e6 18 00 00 c1 00 53 65     ..............Se
     c8a:	63 74 2e 34 00 00 00 00 9a 0c 03 00 e6 18 00 00     ct.4............

00000c9a <menu_midiInVar>:
     c9a:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 28 08     ..Manual......(.
     caa:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     cba:	00 00 29 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..).......Range.
     cca:	00 00 00 00 00 00 2a 08 00 00 00 00 c4 90 4d 61     ......*.......Ma
     cda:	6e 4e 6f 74 65 00 00 00 00 00 2b 08 00 00 00 00     nNote.....+.....

00000cea <menu_key>:
     cea:	81 08 54 61 73 74 65 31 00 00 00 00 70 04 00 00     ..Taste1....p...
     cfa:	4a 19 23 2c 01 08 54 61 73 74 65 32 00 00 00 00     J.#,..Taste2....
     d0a:	70 04 01 00 4a 19 23 2c 01 08 54 61 73 74 65 33     p...J.#,..Taste3
     d1a:	00 00 00 00 70 04 02 00 4a 19 23 2c c1 08 54 61     ....p...J.#,..Ta
     d2a:	73 74 65 34 00 00 00 00 70 04 03 00 4a 19 23 2c     ste4....p...J.#,

00000d3a <menu_tune>:
     d3a:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     d4a:	fa 19 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     d5a:	00 00 01 00 fa 19 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     d6a:	00 00 00 00 00 00 02 00 fa 19 00 00 c1 20 50 65     ............. Pe
     d7a:	64 61 6c 00 00 00 00 00 00 00 03 00 fa 19 00 00     dal.............

00000d8a <menu_midiOut>:
     d8a:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 28 09     ..III.........(.
     d9a:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     daa:	00 00 2a 09 00 00 00 00 03 10 49 00 00 00 00 00     ..*.......I.....
     dba:	00 00 00 00 00 00 2c 09 00 00 00 00 03 10 50 00     ......,.......P.
	...
     dd2:	00 00 2e 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..........III(in
     de2:	74 29 00 00 00 00 29 09 00 00 00 00 03 10 49 49     t)....).......II
     df2:	28 69 6e 74 29 00 00 00 00 00 2b 09 00 00 00 00     (int).....+.....
     e02:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2d 09     ..I(int)......-.
     e12:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     e22:	00 00 2f 09 00 00 00 00                             ../.....

00000e2a <menu_setup>:
     e2a:	81 00 4d 6f 64 75 6c 65 00 00 00 00 f2 0e 00 00     ..Module........
     e3a:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     e4a:	62 12 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     b.........Power.
     e5a:	00 00 00 00 b6 0e 00 00 00 00 00 00 c1 00 45 45     ..............EE
     e6a:	70 72 6f 6d 00 00 00 00 7a 0e 00 00 00 00 00 00     prom....z.......

00000e7a <menu_eeprom>:
     e7a:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     e8a:	62 2a 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     b*....EEBackup..
     e9a:	00 00 00 00 4a 2a 00 00 c1 00 45 45 52 65 73 74     ....J*....EERest
     eaa:	6f 72 65 00 00 00 00 00 56 2a 00 00                 ore.....V*..

00000eb6 <menu_Power>:
     eb6:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     ec6:	e7 2c 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .,....PowerOff..
     ed6:	00 00 00 00 f0 2c 00 00 c1 00 50 2e 52 65 73 74     .....,....P.Rest
     ee6:	61 72 74 00 00 00 00 00 f8 2c 00 00                 art......,..

00000ef2 <menu_module>:
     ef2:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     f02:	00 00 2c 1b 0a 00 4d 6f 64 57 72 69 74 65 00 00     ..,...ModWrite..
     f12:	00 00 56 03 00 00 2c 1b 0a 08 4d 6f 64 4f 4b 00     ..V...,...ModOK.
     f22:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     f32:	64 54 65 73 74 00 00 00 56 0f 00 00 00 00 00 00     dTest...V.......
     f42:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 46 10 00 00     ..ModAssign.F...
     f52:	00 00 22 1b                                         ..".

00000f56 <menu_ModeSel>:
     f56:	81 00 4d 6f 64 2e 30 00 00 00 00 00 f6 0f 00 00     ..Mod.0.........
     f66:	d0 18 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     f76:	f6 0f 01 00 d0 18 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
     f86:	00 00 00 00 f6 0f 02 00 d0 18 00 00 01 00 4d 6f     ..............Mo
     f96:	64 2e 33 00 00 00 00 00 f6 0f 03 00 d0 18 00 00     d.3.............
     fa6:	01 00 4d 6f 64 2e 34 00 00 00 00 00 f6 0f 04 00     ..Mod.4.........
     fb6:	d0 18 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     fc6:	f6 0f 05 00 d0 18 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
     fd6:	00 00 00 00 f6 0f 06 00 d0 18 00 00 c1 00 4d 6f     ..............Mo
     fe6:	64 2e 37 00 00 00 00 00 f6 0f 07 00 d0 18 00 00     d.7.............

00000ff6 <menu_ModTestSelcted>:
     ff6:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    1006:	b4 19 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
    1016:	00 00 ad 05 67 18 a3 18 01 00 54 65 73 74 50 74     ....g.....TestPt
    1026:	72 6e 00 00 00 00 00 00 2d 2a 00 00 c1 00 4c 6f     rn......-*....Lo
    1036:	6f 70 54 73 74 00 00 00 00 00 00 00 e8 19 00 00     opTst...........

00001046 <menu_modAssign>:
    1046:	81 00 4d 61 6e 2e 33 00 00 00 00 00 4a 11 00 00     ..Man.3.....J...
    1056:	04 19 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
    1066:	4a 11 01 00 04 19 00 00 01 00 4d 61 6e 2e 31 00     J.........Man.1.
    1076:	00 00 00 00 4a 11 02 00 04 19 00 00 01 00 50 65     ....J.........Pe
    1086:	64 61 6c 00 00 00 00 00 4a 11 03 00 04 19 00 00     dal.....J.......
    1096:	c1 00 52 65 67 69 73 74 65 72 00 00 aa 10 04 00     ..Register......
    10a6:	00 00 00 00                                         ....

000010aa <menu_modSection8>:
    10aa:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 11 00 00     ..Sect.1........
    10ba:	34 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     4.....Sect.2....
    10ca:	9a 11 01 00 34 19 00 00 01 00 53 65 63 74 2e 33     ....4.....Sect.3
    10da:	00 00 00 00 9a 11 02 00 34 19 00 00 01 00 53 65     ........4.....Se
    10ea:	63 74 2e 34 00 00 00 00 9a 11 03 00 34 19 00 00     ct.4........4...
    10fa:	01 00 53 65 63 74 2e 35 00 00 00 00 9a 11 04 00     ..Sect.5........
    110a:	34 19 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     4.....Sect.6....
    111a:	9a 11 05 00 34 19 00 00 01 00 53 65 63 74 2e 37     ....4.....Sect.7
    112a:	00 00 00 00 9a 11 06 00 34 19 00 00 c1 00 53 65     ........4.....Se
    113a:	63 74 2e 38 00 00 00 00 9a 11 07 00 34 19 00 00     ct.8........4...

0000114a <menu_modSection>:
    114a:	81 00 53 65 63 74 2e 31 00 00 00 00 d6 11 00 00     ..Sect.1........
    115a:	0f 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    116a:	d6 11 01 00 0f 19 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    117a:	00 00 00 00 d6 11 02 00 0f 19 00 00 c1 00 53 65     ..............Se
    118a:	63 74 2e 34 00 00 00 00 d6 11 03 00 0f 19 00 00     ct.4............

0000119a <menu_modDefineReg>:
    119a:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f7 07     ..RegBeg........
    11aa:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    11ba:	00 00 f8 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    11ca:	2f 42 69 74 00 00 f9 07 00 00 00 00                 /Bit........

000011d6 <menu_modDefine>:
    11d6:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 34 09     ..NoteBeg.....4.
    11e6:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    11f6:	00 00 35 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..5.......Module
    1206:	2f 42 69 74 00 00 36 09 00 00 00 00                 /Bit..6.....

00001212 <menu_status>:
    1212:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1222:	56 25 00 00 01 00 55 53 42 00 00 00 00 00 00 00     V%....USB.......
    1232:	62 12 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     b........@MIDI-I
    1242:	6e 00 00 00 00 00 00 00 da 24 00 00 c2 40 4d 49     n........$...@MI
    1252:	44 49 2d 4f 75 74 00 00 00 00 00 00 18 25 00 00     DI-Out.......%..

00001262 <menu_USBser>:
    1262:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 52 16     ..EventLog....R.
    1272:	00 00 56 1b 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..V...SendLog...
    1282:	00 00 00 00 30 1b 00 00 c1 00 53 6e 64 48 57 43     ....0.....SndHWC
    1292:	66 67 00 00 00 00 00 00 6a 1b 00 00                 fg......j...

0000129e <sw_version>:
    129e:	56 30 2e 37 32 00                                   V0.72.

000012a4 <cplInfo>:
    12a4:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    12b4:	01 02 00 03 01 03 02 03                             ........

000012bc <keylabel_1>:
    12bc:	31 00                                               1.

000012be <keylabel_0>:
    12be:	30 00                                               0.

000012c0 <keylabel_text>:
    12c0:	54 65 78 74 80 00                                   Text..

000012c6 <keylabel_exit>:
    12c6:	45 78 69 74 00                                      Exit.

000012cb <keylabel_off>:
    12cb:	7e 61 75 73 00                                      ~aus.

000012d0 <keylabel_on>:
    12d0:	7e 65 69 6e 00                                      ~ein.

000012d5 <keylabel_onoff>:
    12d5:	45 69 6e 80 00                                      Ein..

000012da <keylabel_minus>:
    12da:	2d 00                                               -.

000012dc <keylabel_plus>:
    12dc:	2b 00                                               +.

000012de <keylabel_left>:
    12de:	7f 00                                               ..

000012e0 <keylabel_right>:
    12e0:	7e 00                                               ~.

000012e2 <keylabel_down>:
    12e2:	09 00                                               ..

000012e4 <keylabel_up>:
    12e4:	08 00                                               ..

000012e6 <cgPattern_Block>:
    12e6:	00 00 0e 0e 0e 0e 00 00                             ........

000012ee <cgPattern_Down>:
    12ee:	04 04 04 04 15 0e 04 00                             ........

000012f6 <cgPattern_Up>:
    12f6:	04 0e 15 04 04 04 04 00                             ........

000012fe <cr_lf>:
    12fe:	0d 0a 00 00                                         ....

00001302 <__ctors_end>:
    1302:	11 24       	eor	r1, r1
    1304:	1f be       	out	0x3f, r1	; 63
    1306:	cf ef       	ldi	r28, 0xFF	; 255
    1308:	d1 e2       	ldi	r29, 0x21	; 33
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	0c bf       	out	0x3c, r16	; 60

00001312 <__do_copy_data>:
    1312:	12 e0       	ldi	r17, 0x02	; 2
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b2 e0       	ldi	r27, 0x02	; 2
    1318:	ec ed       	ldi	r30, 0xDC	; 220
    131a:	f9 e7       	ldi	r31, 0x79	; 121
    131c:	00 e0       	ldi	r16, 0x00	; 0
    131e:	0b bf       	out	0x3b, r16	; 59
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <__do_copy_data+0x14>
    1322:	07 90       	elpm	r0, Z+
    1324:	0d 92       	st	X+, r0
    1326:	a8 30       	cpi	r26, 0x08	; 8
    1328:	b1 07       	cpc	r27, r17
    132a:	d9 f7       	brne	.-10     	; 0x1322 <__do_copy_data+0x10>

0000132c <__do_clear_bss>:
    132c:	29 e1       	ldi	r18, 0x19	; 25
    132e:	a8 e0       	ldi	r26, 0x08	; 8
    1330:	b2 e0       	ldi	r27, 0x02	; 2
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <.do_clear_bss_start>

00001334 <.do_clear_bss_loop>:
    1334:	1d 92       	st	X+, r1

00001336 <.do_clear_bss_start>:
    1336:	a1 32       	cpi	r26, 0x21	; 33
    1338:	b2 07       	cpc	r27, r18
    133a:	e1 f7       	brne	.-8      	; 0x1334 <.do_clear_bss_loop>
    133c:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <main>
    1340:	0c 94 ec 3c 	jmp	0x79d8	; 0x79d8 <_exit>

00001344 <__bad_interrupt>:
    1344:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001348 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    1348:	fc 01       	movw	r30, r24
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	1c c0       	rjmp	.+56     	; 0x1388 <crc16_ram+0x40>
    1350:	df 01       	movw	r26, r30
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	20 81       	ld	r18, Z
    1356:	82 27       	eor	r24, r18
    1358:	28 2f       	mov	r18, r24
    135a:	22 95       	swap	r18
    135c:	28 27       	eor	r18, r24
    135e:	02 2e       	mov	r0, r18
    1360:	26 95       	lsr	r18
    1362:	26 95       	lsr	r18
    1364:	20 25       	eor	r18, r0
    1366:	02 2e       	mov	r0, r18
    1368:	26 95       	lsr	r18
    136a:	20 25       	eor	r18, r0
    136c:	27 70       	andi	r18, 0x07	; 7
    136e:	08 2e       	mov	r0, r24
    1370:	89 2f       	mov	r24, r25
    1372:	26 95       	lsr	r18
    1374:	07 94       	ror	r0
    1376:	27 95       	ror	r18
    1378:	90 2d       	mov	r25, r0
    137a:	82 27       	eor	r24, r18
    137c:	06 94       	lsr	r0
    137e:	27 95       	ror	r18
    1380:	90 25       	eor	r25, r0
    1382:	82 27       	eor	r24, r18
    1384:	ba 01       	movw	r22, r20
    1386:	fd 01       	movw	r30, r26
    1388:	ab 01       	movw	r20, r22
    138a:	41 50       	subi	r20, 0x01	; 1
    138c:	51 09       	sbc	r21, r1
    138e:	67 2b       	or	r22, r23
    1390:	f9 f6       	brne	.-66     	; 0x1350 <crc16_ram+0x8>
    1392:	08 95       	ret

00001394 <crc16_eeprom>:
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
    13a0:	cf ef       	ldi	r28, 0xFF	; 255
    13a2:	df ef       	ldi	r29, 0xFF	; 255
    13a4:	21 c0       	rjmp	.+66     	; 0x13e8 <crc16_eeprom+0x54>
    13a6:	7c 01       	movw	r14, r24
    13a8:	2f ef       	ldi	r18, 0xFF	; 255
    13aa:	e2 1a       	sub	r14, r18
    13ac:	f2 0a       	sbc	r15, r18
    13ae:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    13b2:	9e 01       	movw	r18, r28
    13b4:	28 27       	eor	r18, r24
    13b6:	82 2f       	mov	r24, r18
    13b8:	82 95       	swap	r24
    13ba:	82 27       	eor	r24, r18
    13bc:	08 2e       	mov	r0, r24
    13be:	86 95       	lsr	r24
    13c0:	86 95       	lsr	r24
    13c2:	80 25       	eor	r24, r0
    13c4:	08 2e       	mov	r0, r24
    13c6:	86 95       	lsr	r24
    13c8:	80 25       	eor	r24, r0
    13ca:	87 70       	andi	r24, 0x07	; 7
    13cc:	02 2e       	mov	r0, r18
    13ce:	23 2f       	mov	r18, r19
    13d0:	86 95       	lsr	r24
    13d2:	07 94       	ror	r0
    13d4:	87 95       	ror	r24
    13d6:	30 2d       	mov	r19, r0
    13d8:	28 27       	eor	r18, r24
    13da:	06 94       	lsr	r0
    13dc:	87 95       	ror	r24
    13de:	30 25       	eor	r19, r0
    13e0:	28 27       	eor	r18, r24
    13e2:	e9 01       	movw	r28, r18
    13e4:	b8 01       	movw	r22, r16
    13e6:	c7 01       	movw	r24, r14
    13e8:	8b 01       	movw	r16, r22
    13ea:	01 50       	subi	r16, 0x01	; 1
    13ec:	11 09       	sbc	r17, r1
    13ee:	67 2b       	or	r22, r23
    13f0:	d1 f6       	brne	.-76     	; 0x13a6 <crc16_eeprom+0x12>
    13f2:	ce 01       	movw	r24, r28
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	08 95       	ret

00001402 <crc16_ram_startVal>:
    1402:	fc 01       	movw	r30, r24
    1404:	ca 01       	movw	r24, r20
    1406:	1c c0       	rjmp	.+56     	; 0x1440 <crc16_ram_startVal+0x3e>
    1408:	df 01       	movw	r26, r30
    140a:	11 96       	adiw	r26, 0x01	; 1
    140c:	20 81       	ld	r18, Z
    140e:	82 27       	eor	r24, r18
    1410:	28 2f       	mov	r18, r24
    1412:	22 95       	swap	r18
    1414:	28 27       	eor	r18, r24
    1416:	02 2e       	mov	r0, r18
    1418:	26 95       	lsr	r18
    141a:	26 95       	lsr	r18
    141c:	20 25       	eor	r18, r0
    141e:	02 2e       	mov	r0, r18
    1420:	26 95       	lsr	r18
    1422:	20 25       	eor	r18, r0
    1424:	27 70       	andi	r18, 0x07	; 7
    1426:	08 2e       	mov	r0, r24
    1428:	89 2f       	mov	r24, r25
    142a:	26 95       	lsr	r18
    142c:	07 94       	ror	r0
    142e:	27 95       	ror	r18
    1430:	90 2d       	mov	r25, r0
    1432:	82 27       	eor	r24, r18
    1434:	06 94       	lsr	r0
    1436:	27 95       	ror	r18
    1438:	90 25       	eor	r25, r0
    143a:	82 27       	eor	r24, r18
    143c:	ba 01       	movw	r22, r20
    143e:	fd 01       	movw	r30, r26
    1440:	ab 01       	movw	r20, r22
    1442:	41 50       	subi	r20, 0x01	; 1
    1444:	51 09       	sbc	r21, r1
    1446:	67 2b       	or	r22, r23
    1448:	f9 f6       	brne	.-66     	; 0x1408 <crc16_ram_startVal+0x6>
    144a:	08 95       	ret

0000144c <crc16_eeprom_startVal>:
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	ea 01       	movw	r28, r20
    145a:	21 c0       	rjmp	.+66     	; 0x149e <crc16_eeprom_startVal+0x52>
    145c:	7c 01       	movw	r14, r24
    145e:	2f ef       	ldi	r18, 0xFF	; 255
    1460:	e2 1a       	sub	r14, r18
    1462:	f2 0a       	sbc	r15, r18
    1464:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    1468:	ae 01       	movw	r20, r28
    146a:	48 27       	eor	r20, r24
    146c:	84 2f       	mov	r24, r20
    146e:	82 95       	swap	r24
    1470:	84 27       	eor	r24, r20
    1472:	08 2e       	mov	r0, r24
    1474:	86 95       	lsr	r24
    1476:	86 95       	lsr	r24
    1478:	80 25       	eor	r24, r0
    147a:	08 2e       	mov	r0, r24
    147c:	86 95       	lsr	r24
    147e:	80 25       	eor	r24, r0
    1480:	87 70       	andi	r24, 0x07	; 7
    1482:	04 2e       	mov	r0, r20
    1484:	45 2f       	mov	r20, r21
    1486:	86 95       	lsr	r24
    1488:	07 94       	ror	r0
    148a:	87 95       	ror	r24
    148c:	50 2d       	mov	r21, r0
    148e:	48 27       	eor	r20, r24
    1490:	06 94       	lsr	r0
    1492:	87 95       	ror	r24
    1494:	50 25       	eor	r21, r0
    1496:	48 27       	eor	r20, r24
    1498:	ea 01       	movw	r28, r20
    149a:	b8 01       	movw	r22, r16
    149c:	c7 01       	movw	r24, r14
    149e:	8b 01       	movw	r16, r22
    14a0:	01 50       	subi	r16, 0x01	; 1
    14a2:	11 09       	sbc	r17, r1
    14a4:	67 2b       	or	r22, r23
    14a6:	d1 f6       	brne	.-76     	; 0x145c <crc16_eeprom_startVal+0x10>
    14a8:	ce 01       	movw	r24, r28
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	08 95       	ret

000014b8 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    14bc:	82 e3       	ldi	r24, 0x32	; 50
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    14c4:	ec 01       	movw	r28, r24
    14c6:	60 e3       	ldi	r22, 0x30	; 48
    14c8:	70 e0       	ldi	r23, 0x00	; 0
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	62 df       	rcall	.-316    	; 0x1394 <crc16_eeprom>
    14d0:	c8 17       	cp	r28, r24
    14d2:	d9 07       	cpc	r29, r25
    14d4:	81 f4       	brne	.+32     	; 0x14f6 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    14de:	8d 34       	cpi	r24, 0x4D	; 77
    14e0:	51 f4       	brne	.+20     	; 0x14f6 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    14e2:	40 e3       	ldi	r20, 0x30	; 48
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	62 e0       	ldi	r22, 0x02	; 2
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	84 e3       	ldi	r24, 0x34	; 52
    14ec:	99 e0       	ldi	r25, 0x09	; 9
    14ee:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		return (EE_LOAD_OK);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	06 c0       	rjmp	.+12     	; 0x1502 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    14f6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1500:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	08 95       	ret

00001508 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    150c:	85 e3       	ldi	r24, 0x35	; 53
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    1514:	ec 01       	movw	r28, r24
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	71 e0       	ldi	r23, 0x01	; 1
    151a:	85 e3       	ldi	r24, 0x35	; 53
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	3a df       	rcall	.-396    	; 0x1394 <crc16_eeprom>
    1520:	c8 17       	cp	r28, r24
    1522:	d9 07       	cpc	r29, r25
    1524:	81 f4       	brne	.+32     	; 0x1546 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1526:	84 e3       	ldi	r24, 0x34	; 52
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    152e:	89 34       	cpi	r24, 0x49	; 73
    1530:	51 f4       	brne	.+20     	; 0x1546 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1532:	40 e0       	ldi	r20, 0x00	; 0
    1534:	51 e0       	ldi	r21, 0x01	; 1
    1536:	65 e3       	ldi	r22, 0x35	; 53
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	88 e2       	ldi	r24, 0x28	; 40
    153c:	98 e0       	ldi	r25, 0x08	; 8
    153e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		return (EE_LOAD_OK);
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1546:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    154a:	82 60       	ori	r24, 0x02	; 2
    154c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1550:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	08 95       	ret

00001558 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    155c:	83 e4       	ldi	r24, 0x43	; 67
    155e:	91 e0       	ldi	r25, 0x01	; 1
    1560:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    1564:	ec 01       	movw	r28, r24
    1566:	6b e0       	ldi	r22, 0x0B	; 11
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	88 e3       	ldi	r24, 0x38	; 56
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	12 df       	rcall	.-476    	; 0x1394 <crc16_eeprom>
    1570:	c8 17       	cp	r28, r24
    1572:	d9 07       	cpc	r29, r25
    1574:	c1 f4       	brne	.+48     	; 0x15a6 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    1576:	87 e3       	ldi	r24, 0x37	; 55
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    157e:	8f 34       	cpi	r24, 0x4F	; 79
    1580:	91 f4       	brne	.+36     	; 0x15a6 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1582:	48 e0       	ldi	r20, 0x08	; 8
    1584:	50 e0       	ldi	r21, 0x00	; 0
    1586:	68 e3       	ldi	r22, 0x38	; 56
    1588:	71 e0       	ldi	r23, 0x01	; 1
    158a:	88 e2       	ldi	r24, 0x28	; 40
    158c:	99 e0       	ldi	r25, 0x09	; 9
    158e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1592:	43 e0       	ldi	r20, 0x03	; 3
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	60 e4       	ldi	r22, 0x40	; 64
    1598:	71 e0       	ldi	r23, 0x01	; 1
    159a:	80 e3       	ldi	r24, 0x30	; 48
    159c:	99 e0       	ldi	r25, 0x09	; 9
    159e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		return (EE_LOAD_OK);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	06 c0       	rjmp	.+12     	; 0x15b2 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    15a6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15aa:	84 60       	ori	r24, 0x04	; 4
    15ac:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15b0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    15bc:	88 e4       	ldi	r24, 0x48	; 72
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    15c4:	ec 01       	movw	r28, r24
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	86 e4       	ldi	r24, 0x46	; 70
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	e2 de       	rcall	.-572    	; 0x1394 <crc16_eeprom>
    15d0:	c8 17       	cp	r28, r24
    15d2:	d9 07       	cpc	r29, r25
    15d4:	a1 f4       	brne	.+40     	; 0x15fe <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    15d6:	85 e4       	ldi	r24, 0x45	; 69
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    15de:	89 36       	cpi	r24, 0x69	; 105
    15e0:	71 f4       	brne	.+28     	; 0x15fe <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    15e2:	86 e4       	ldi	r24, 0x46	; 70
    15e4:	91 e0       	ldi	r25, 0x01	; 1
    15e6:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    15ea:	c5 e5       	ldi	r28, 0x55	; 85
    15ec:	d3 e0       	ldi	r29, 0x03	; 3
    15ee:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    15f0:	87 e4       	ldi	r24, 0x47	; 71
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    15f8:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	06 c0       	rjmp	.+12     	; 0x160a <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    15fe:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1608:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    160a:	df 91       	pop	r29
    160c:	cf 91       	pop	r28
    160e:	08 95       	ret

00001610 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1614:	87 ef       	ldi	r24, 0xF7	; 247
    1616:	93 e0       	ldi	r25, 0x03	; 3
    1618:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    161c:	ec 01       	movw	r28, r24
    161e:	62 e0       	ldi	r22, 0x02	; 2
    1620:	70 e0       	ldi	r23, 0x00	; 0
    1622:	85 ef       	ldi	r24, 0xF5	; 245
    1624:	93 e0       	ldi	r25, 0x03	; 3
    1626:	b6 de       	rcall	.-660    	; 0x1394 <crc16_eeprom>
    1628:	c8 17       	cp	r28, r24
    162a:	d9 07       	cpc	r29, r25
    162c:	81 f4       	brne	.+32     	; 0x164e <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    162e:	84 ef       	ldi	r24, 0xF4	; 244
    1630:	93 e0       	ldi	r25, 0x03	; 3
    1632:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    1636:	84 35       	cpi	r24, 0x54	; 84
    1638:	51 f4       	brne	.+20     	; 0x164e <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    163a:	42 e0       	ldi	r20, 0x02	; 2
    163c:	50 e0       	ldi	r21, 0x00	; 0
    163e:	65 ef       	ldi	r22, 0xF5	; 245
    1640:	73 e0       	ldi	r23, 0x03	; 3
    1642:	86 e2       	ldi	r24, 0x26	; 38
    1644:	98 e0       	ldi	r25, 0x08	; 8
    1646:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		return (EE_LOAD_OK);
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	06 c0       	rjmp	.+12     	; 0x165a <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    164e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1652:	82 60       	ori	r24, 0x02	; 2
    1654:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1658:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	08 95       	ret

00001660 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1664:	8c e4       	ldi	r24, 0x4C	; 76
    1666:	91 e0       	ldi	r25, 0x01	; 1
    1668:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    166c:	ec 01       	movw	r28, r24
    166e:	61 e0       	ldi	r22, 0x01	; 1
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	8b e4       	ldi	r24, 0x4B	; 75
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	8e de       	rcall	.-740    	; 0x1394 <crc16_eeprom>
    1678:	c8 17       	cp	r28, r24
    167a:	d9 07       	cpc	r29, r25
    167c:	71 f4       	brne	.+28     	; 0x169a <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    167e:	8a e4       	ldi	r24, 0x4A	; 74
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    1686:	85 35       	cpi	r24, 0x55	; 85
    1688:	41 f4       	brne	.+16     	; 0x169a <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    168a:	8b e4       	ldi	r24, 0x4B	; 75
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    1692:	80 93 52 16 	sts	0x1652, r24	; 0x801652 <serUSB_Active>
		return (EE_LOAD_OK);
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    169a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    169e:	88 60       	ori	r24, 0x08	; 8
    16a0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	08 95       	ret

000016ac <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    16ac:	cf 93       	push	r28
    16ae:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	8f e4       	ldi	r24, 0x4F	; 79
    16b6:	91 e0       	ldi	r25, 0x01	; 1
    16b8:	6d de       	rcall	.-806    	; 0x1394 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    16ba:	ac 01       	movw	r20, r24
    16bc:	68 e1       	ldi	r22, 0x18	; 24
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	80 e5       	ldi	r24, 0x50	; 80
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	c3 de       	rcall	.-634    	; 0x144c <crc16_eeprom_startVal>
    16c6:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    16c8:	88 e6       	ldi	r24, 0x68	; 104
    16ca:	91 e0       	ldi	r25, 0x01	; 1
    16cc:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    16d0:	c8 17       	cp	r28, r24
    16d2:	d9 07       	cpc	r29, r25
    16d4:	b1 f4       	brne	.+44     	; 0x1702 <eeprom_ReadReg+0x56>
    16d6:	8e e4       	ldi	r24, 0x4E	; 78
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    16de:	82 35       	cpi	r24, 0x52	; 82
    16e0:	81 f4       	brne	.+32     	; 0x1702 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    16e2:	8f e4       	ldi	r24, 0x4F	; 79
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    16ea:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    16ee:	48 e1       	ldi	r20, 0x18	; 24
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	60 e5       	ldi	r22, 0x50	; 80
    16f4:	71 e0       	ldi	r23, 0x01	; 1
    16f6:	87 ef       	ldi	r24, 0xF7	; 247
    16f8:	97 e0       	ldi	r25, 0x07	; 7
    16fa:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		return(EE_LOAD_OK);
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	06 c0       	rjmp	.+12     	; 0x170e <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    1702:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1706:	80 62       	ori	r24, 0x20	; 32
    1708:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    170c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    1718:	8b ee       	ldi	r24, 0xEB	; 235
    171a:	93 e0       	ldi	r25, 0x03	; 3
    171c:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    1720:	ec 01       	movw	r28, r24
    1722:	60 e8       	ldi	r22, 0x80	; 128
    1724:	72 e0       	ldi	r23, 0x02	; 2
    1726:	8b e6       	ldi	r24, 0x6B	; 107
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	34 de       	rcall	.-920    	; 0x1394 <crc16_eeprom>
    172c:	c8 17       	cp	r28, r24
    172e:	d9 07       	cpc	r29, r25
    1730:	81 f4       	brne	.+32     	; 0x1752 <eeprom_ReadProg+0x3e>
    1732:	8a e6       	ldi	r24, 0x6A	; 106
    1734:	91 e0       	ldi	r25, 0x01	; 1
    1736:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    173a:	80 35       	cpi	r24, 0x50	; 80
    173c:	51 f4       	brne	.+20     	; 0x1752 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	52 e0       	ldi	r21, 0x02	; 2
    1742:	6b e6       	ldi	r22, 0x6B	; 107
    1744:	71 e0       	ldi	r23, 0x01	; 1
    1746:	84 e6       	ldi	r24, 0x64	; 100
    1748:	99 e0       	ldi	r25, 0x09	; 9
    174a:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		return(EE_LOAD_OK);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	06 c0       	rjmp	.+12     	; 0x175e <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1752:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1756:	80 64       	ori	r24, 0x40	; 64
    1758:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    175c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    1768:	82 ef       	ldi	r24, 0xF2	; 242
    176a:	93 e0       	ldi	r25, 0x03	; 3
    176c:	0e 94 c2 3c 	call	0x7984	; 0x7984 <eeprom_read_word>
    1770:	ec 01       	movw	r28, r24
    1772:	64 e0       	ldi	r22, 0x04	; 4
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	8e ee       	ldi	r24, 0xEE	; 238
    1778:	93 e0       	ldi	r25, 0x03	; 3
    177a:	0c de       	rcall	.-1000   	; 0x1394 <crc16_eeprom>
    177c:	c8 17       	cp	r28, r24
    177e:	d9 07       	cpc	r29, r25
    1780:	51 f4       	brne	.+20     	; 0x1796 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1782:	44 e0       	ldi	r20, 0x04	; 4
    1784:	50 e0       	ldi	r21, 0x00	; 0
    1786:	6e ee       	ldi	r22, 0xEE	; 238
    1788:	73 e0       	ldi	r23, 0x03	; 3
    178a:	83 eb       	ldi	r24, 0xB3	; 179
    178c:	95 e0       	ldi	r25, 0x05	; 5
    178e:	0e 94 aa 3c 	call	0x7954	; 0x7954 <eeprom_read_block>
		return(EE_LOAD_OK);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    1796:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	08 95       	ret

000017a8 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    17b2:	65 e6       	ldi	r22, 0x65	; 101
    17b4:	89 ef       	ldi	r24, 0xF9	; 249
    17b6:	93 e0       	ldi	r25, 0x03	; 3
    17b8:	0c 94 d6 3c 	jmp	0x79ac	; 0x79ac <eeprom_update_byte>
    17bc:	08 95       	ret

000017be <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    17be:	cf 93       	push	r28
    17c0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    17c2:	60 e3       	ldi	r22, 0x30	; 48
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	84 e3       	ldi	r24, 0x34	; 52
    17c8:	99 e0       	ldi	r25, 0x09	; 9
    17ca:	be dd       	rcall	.-1156   	; 0x1348 <crc16_ram>
    17cc:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17ce:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    17d2:	6d e4       	ldi	r22, 0x4D	; 77
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    17dc:	40 e3       	ldi	r20, 0x30	; 48
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	62 e0       	ldi	r22, 0x02	; 2
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	84 e3       	ldi	r24, 0x34	; 52
    17e6:	99 e0       	ldi	r25, 0x09	; 9
    17e8:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    17ec:	be 01       	movw	r22, r28
    17ee:	82 e3       	ldi	r24, 0x32	; 50
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    17f6:	d8 df       	rcall	.-80     	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    17f8:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	71 e0       	ldi	r23, 0x01	; 1
    180a:	88 e2       	ldi	r24, 0x28	; 40
    180c:	98 e0       	ldi	r25, 0x08	; 8
    180e:	9c dd       	rcall	.-1224   	; 0x1348 <crc16_ram>
    1810:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1812:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1816:	69 e4       	ldi	r22, 0x49	; 73
    1818:	84 e3       	ldi	r24, 0x34	; 52
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	51 e0       	ldi	r21, 0x01	; 1
    1824:	65 e3       	ldi	r22, 0x35	; 53
    1826:	70 e0       	ldi	r23, 0x00	; 0
    1828:	88 e2       	ldi	r24, 0x28	; 40
    182a:	98 e0       	ldi	r25, 0x08	; 8
    182c:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1830:	be 01       	movw	r22, r28
    1832:	85 e3       	ldi	r24, 0x35	; 53
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    183a:	b6 df       	rcall	.-148    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    183c:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    184a:	68 e0       	ldi	r22, 0x08	; 8
    184c:	70 e0       	ldi	r23, 0x00	; 0
    184e:	88 e2       	ldi	r24, 0x28	; 40
    1850:	99 e0       	ldi	r25, 0x09	; 9
    1852:	7a dd       	rcall	.-1292   	; 0x1348 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1854:	ac 01       	movw	r20, r24
    1856:	63 e0       	ldi	r22, 0x03	; 3
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e3       	ldi	r24, 0x30	; 48
    185c:	99 e0       	ldi	r25, 0x09	; 9
    185e:	d1 dd       	rcall	.-1118   	; 0x1402 <crc16_ram_startVal>
    1860:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1862:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    1866:	6f e4       	ldi	r22, 0x4F	; 79
    1868:	87 e3       	ldi	r24, 0x37	; 55
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1870:	48 e0       	ldi	r20, 0x08	; 8
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	68 e3       	ldi	r22, 0x38	; 56
    1876:	71 e0       	ldi	r23, 0x01	; 1
    1878:	88 e2       	ldi	r24, 0x28	; 40
    187a:	99 e0       	ldi	r25, 0x09	; 9
    187c:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1880:	43 e0       	ldi	r20, 0x03	; 3
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	60 e4       	ldi	r22, 0x40	; 64
    1886:	71 e0       	ldi	r23, 0x01	; 1
    1888:	80 e3       	ldi	r24, 0x30	; 48
    188a:	99 e0       	ldi	r25, 0x09	; 9
    188c:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1890:	be 01       	movw	r22, r28
    1892:	83 e4       	ldi	r24, 0x43	; 67
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    189a:	86 df       	rcall	.-244    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    189c:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	08 95       	ret

000018a6 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    18a6:	0f 93       	push	r16
    18a8:	1f 93       	push	r17
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	70 e0       	ldi	r23, 0x00	; 0
    18b2:	85 e5       	ldi	r24, 0x55	; 85
    18b4:	93 e0       	ldi	r25, 0x03	; 3
    18b6:	48 dd       	rcall	.-1392   	; 0x1348 <crc16_ram>
    18b8:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    18ba:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    18be:	69 e6       	ldi	r22, 0x69	; 105
    18c0:	85 e4       	ldi	r24, 0x45	; 69
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    18c8:	c5 e5       	ldi	r28, 0x55	; 85
    18ca:	d3 e0       	ldi	r29, 0x03	; 3
    18cc:	68 81       	ld	r22, Y
    18ce:	86 e4       	ldi	r24, 0x46	; 70
    18d0:	91 e0       	ldi	r25, 0x01	; 1
    18d2:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    18d6:	69 81       	ldd	r22, Y+1	; 0x01
    18d8:	87 e4       	ldi	r24, 0x47	; 71
    18da:	91 e0       	ldi	r25, 0x01	; 1
    18dc:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    18e0:	b8 01       	movw	r22, r16
    18e2:	88 e4       	ldi	r24, 0x48	; 72
    18e4:	91 e0       	ldi	r25, 0x01	; 1
    18e6:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    18ea:	5e df       	rcall	.-324    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18ec:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	08 95       	ret

000018fa <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	82 e5       	ldi	r24, 0x52	; 82
    1904:	96 e1       	ldi	r25, 0x16	; 22
    1906:	20 dd       	rcall	.-1472   	; 0x1348 <crc16_ram>
    1908:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    190a:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    190e:	65 e5       	ldi	r22, 0x55	; 85
    1910:	8a e4       	ldi	r24, 0x4A	; 74
    1912:	91 e0       	ldi	r25, 0x01	; 1
    1914:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1918:	60 91 52 16 	lds	r22, 0x1652	; 0x801652 <serUSB_Active>
    191c:	8b e4       	ldi	r24, 0x4B	; 75
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1924:	be 01       	movw	r22, r28
    1926:	8c e4       	ldi	r24, 0x4C	; 76
    1928:	91 e0       	ldi	r25, 0x01	; 1
    192a:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    192e:	3c df       	rcall	.-392    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1930:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	86 e2       	ldi	r24, 0x26	; 38
    1944:	98 e0       	ldi	r25, 0x08	; 8
    1946:	00 dd       	rcall	.-1536   	; 0x1348 <crc16_ram>
    1948:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    194a:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    194e:	64 e5       	ldi	r22, 0x54	; 84
    1950:	84 ef       	ldi	r24, 0xF4	; 244
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1958:	42 e0       	ldi	r20, 0x02	; 2
    195a:	50 e0       	ldi	r21, 0x00	; 0
    195c:	65 ef       	ldi	r22, 0xF5	; 245
    195e:	73 e0       	ldi	r23, 0x03	; 3
    1960:	86 e2       	ldi	r24, 0x26	; 38
    1962:	98 e0       	ldi	r25, 0x08	; 8
    1964:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1968:	be 01       	movw	r22, r28
    196a:	87 ef       	ldi	r24, 0xF7	; 247
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    1972:	1a df       	rcall	.-460    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1974:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1982:	61 e0       	ldi	r22, 0x01	; 1
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	80 e1       	ldi	r24, 0x10	; 16
    1988:	98 e0       	ldi	r25, 0x08	; 8
    198a:	de dc       	rcall	.-1604   	; 0x1348 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    198c:	ac 01       	movw	r20, r24
    198e:	68 e1       	ldi	r22, 0x18	; 24
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	87 ef       	ldi	r24, 0xF7	; 247
    1994:	97 e0       	ldi	r25, 0x07	; 7
    1996:	35 dd       	rcall	.-1430   	; 0x1402 <crc16_ram_startVal>
    1998:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    199a:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    199e:	62 e5       	ldi	r22, 0x52	; 82
    19a0:	8e e4       	ldi	r24, 0x4E	; 78
    19a2:	91 e0       	ldi	r25, 0x01	; 1
    19a4:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    19a8:	60 91 10 08 	lds	r22, 0x0810	; 0x800810 <registerCount>
    19ac:	8f e4       	ldi	r24, 0x4F	; 79
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    19b4:	48 e1       	ldi	r20, 0x18	; 24
    19b6:	50 e0       	ldi	r21, 0x00	; 0
    19b8:	60 e5       	ldi	r22, 0x50	; 80
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	87 ef       	ldi	r24, 0xF7	; 247
    19be:	97 e0       	ldi	r25, 0x07	; 7
    19c0:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    19c4:	be 01       	movw	r22, r28
    19c6:	88 e6       	ldi	r24, 0x68	; 104
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    19ce:	ec de       	rcall	.-552    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    19d0:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret

000019da <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    19de:	60 e8       	ldi	r22, 0x80	; 128
    19e0:	72 e0       	ldi	r23, 0x02	; 2
    19e2:	84 e6       	ldi	r24, 0x64	; 100
    19e4:	99 e0       	ldi	r25, 0x09	; 9
    19e6:	b0 dc       	rcall	.-1696   	; 0x1348 <crc16_ram>
    19e8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19ea:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    19ee:	60 e5       	ldi	r22, 0x50	; 80
    19f0:	8a e6       	ldi	r24, 0x6A	; 106
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	52 e0       	ldi	r21, 0x02	; 2
    19fc:	6b e6       	ldi	r22, 0x6B	; 107
    19fe:	71 e0       	ldi	r23, 0x01	; 1
    1a00:	84 e6       	ldi	r24, 0x64	; 100
    1a02:	99 e0       	ldi	r25, 0x09	; 9
    1a04:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1a08:	be 01       	movw	r22, r28
    1a0a:	8b ee       	ldi	r24, 0xEB	; 235
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    1a12:	ca de       	rcall	.-620    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a14:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1a22:	64 e0       	ldi	r22, 0x04	; 4
    1a24:	70 e0       	ldi	r23, 0x00	; 0
    1a26:	83 eb       	ldi	r24, 0xB3	; 179
    1a28:	95 e0       	ldi	r25, 0x05	; 5
    1a2a:	8e dc       	rcall	.-1764   	; 0x1348 <crc16_ram>
    1a2c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a2e:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1a32:	6b e4       	ldi	r22, 0x4B	; 75
    1a34:	8d ee       	ldi	r24, 0xED	; 237
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1a3c:	44 e0       	ldi	r20, 0x04	; 4
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	6e ee       	ldi	r22, 0xEE	; 238
    1a42:	73 e0       	ldi	r23, 0x03	; 3
    1a44:	83 eb       	ldi	r24, 0xB3	; 179
    1a46:	95 e0       	ldi	r25, 0x05	; 5
    1a48:	0e 94 c7 3c 	call	0x798e	; 0x798e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1a4c:	be 01       	movw	r22, r28
    1a4e:	82 ef       	ldi	r24, 0xF2	; 242
    1a50:	93 e0       	ldi	r25, 0x03	; 3
    1a52:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <eeprom_update_word>
	eepromWriteSignature();
    1a56:	a8 de       	rcall	.-688    	; 0x17a8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a58:	0e 94 e2 3b 	call	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
}
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1a62:	ad de       	rcall	.-678    	; 0x17be <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1a64:	ce de       	rcall	.-612    	; 0x1802 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1a66:	ef de       	rcall	.-546    	; 0x1846 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1a68:	1e df       	rcall	.-452    	; 0x18a6 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1a6a:	47 df       	rcall	.-370    	; 0x18fa <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1a6c:	88 df       	rcall	.-240    	; 0x197e <eeprom_UpdateReg>
    1a6e:	b5 df       	rcall	.-150    	; 0x19da <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1a70:	d6 df       	rcall	.-84     	; 0x1a1e <eeprom_UpdateSoftkeys>
    1a72:	63 cf       	rjmp	.-314    	; 0x193a <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1a74:	08 95       	ret

00001a76 <eepromCopy>:
    1a76:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    1a78:	df 92       	push	r13
    1a7a:	ef 92       	push	r14
    1a7c:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1a7e:	0f 93       	push	r16
    1a80:	1f 93       	push	r17
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
    1a86:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1a88:	11 c0       	rjmp	.+34     	; 0x1aac <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1a8a:	7c 01       	movw	r14, r24
    1a8c:	2f ef       	ldi	r18, 0xFF	; 255
    1a8e:	e2 1a       	sub	r14, r18
    1a90:	f2 0a       	sbc	r15, r18
    1a92:	0e 94 ba 3c 	call	0x7974	; 0x7974 <eeprom_read_byte>
    1a96:	6e 01       	movw	r12, r28
    1a98:	9f ef       	ldi	r25, 0xFF	; 255
    1a9a:	c9 1a       	sub	r12, r25
    1a9c:	d9 0a       	sbc	r13, r25
    1a9e:	68 2f       	mov	r22, r24
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	0e 94 d6 3c 	call	0x79ac	; 0x79ac <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1aa6:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1aa8:	e6 01       	movw	r28, r12
    1aaa:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1aac:	8a 01       	movw	r16, r20
    1aae:	01 50       	subi	r16, 0x01	; 1
    1ab0:	11 09       	sbc	r17, r1
    1ab2:	45 2b       	or	r20, r21
    1ab4:	51 f7       	brne	.-44     	; 0x1a8a <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	ff 90       	pop	r15
    1ac0:	ef 90       	pop	r14
    1ac2:	df 90       	pop	r13
    1ac4:	cf 90       	pop	r12
    1ac6:	08 95       	ret

00001ac8 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1ac8:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	58 e0       	ldi	r21, 0x08	; 8
    1ad0:	60 e0       	ldi	r22, 0x00	; 0
    1ad2:	78 e0       	ldi	r23, 0x08	; 8
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	ce df       	rcall	.-100    	; 0x1a76 <eepromCopy>
	lcd_waitSymbolOff();
    1ada:	0c 94 e2 3b 	jmp	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
    1ade:	08 95       	ret

00001ae0 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1ae0:	0e 94 d4 3b 	call	0x77a8	; 0x77a8 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	58 e0       	ldi	r21, 0x08	; 8
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	98 e0       	ldi	r25, 0x08	; 8
    1af0:	c2 df       	rcall	.-124    	; 0x1a76 <eepromCopy>
	lcd_waitSymbolOff();
    1af2:	0c 94 e2 3b 	jmp	0x77c4	; 0x77c4 <lcd_waitSymbolOff>
    1af6:	08 95       	ret

00001af8 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	0a c0       	rjmp	.+20     	; 0x1b10 <init_Timers+0x18>
    1afc:	e8 2f       	mov	r30, r24
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	ee 0f       	add	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	e1 5d       	subi	r30, 0xD1	; 209
    1b06:	fd 4f       	sbci	r31, 0xFD	; 253
    1b08:	9f ef       	ldi	r25, 0xFF	; 255
    1b0a:	90 83       	st	Z, r25
    1b0c:	11 82       	std	Z+1, r1	; 0x01
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	89 30       	cpi	r24, 0x09	; 9
    1b12:	a0 f3       	brcs	.-24     	; 0x1afc <init_Timers+0x4>
    1b14:	e1 e4       	ldi	r30, 0x41	; 65
    1b16:	f2 e0       	ldi	r31, 0x02	; 2
    1b18:	10 82       	st	Z, r1
    1b1a:	11 82       	std	Z+1, r1	; 0x01
    1b1c:	12 82       	std	Z+2, r1	; 0x02
    1b1e:	13 82       	std	Z+3, r1	; 0x03
    1b20:	8f ef       	ldi	r24, 0xFF	; 255
    1b22:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1b26:	08 95       	ret

00001b28 <init_HwTimer>:
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	84 bd       	out	0x24, r24	; 36
    1b2c:	93 e0       	ldi	r25, 0x03	; 3
    1b2e:	95 bd       	out	0x25, r25	; 37
    1b30:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1b34:	89 ef       	ldi	r24, 0xF9	; 249
    1b36:	87 bd       	out	0x27, r24	; 39
    1b38:	85 b1       	in	r24, 0x05	; 5
    1b3a:	8f 77       	andi	r24, 0x7F	; 127
    1b3c:	85 b9       	out	0x05, r24	; 5
    1b3e:	84 b1       	in	r24, 0x04	; 4
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	84 b9       	out	0x04, r24	; 4
    1b44:	08 95       	ret

00001b46 <init_ADC>:
    1b46:	87 e8       	ldi	r24, 0x87	; 135
    1b48:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1b4c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1b50:	8f e7       	ldi	r24, 0x7F	; 127
    1b52:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1b5c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1b60:	e9 e4       	ldi	r30, 0x49	; 73
    1b62:	f3 e0       	ldi	r31, 0x03	; 3
    1b64:	10 82       	st	Z, r1
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	81 83       	std	Z+1, r24	; 0x01
    1b6a:	82 83       	std	Z+2, r24	; 0x02
    1b6c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	10 c0       	rjmp	.+32     	; 0x1b94 <init_ADC+0x4e>
    1b74:	85 30       	cpi	r24, 0x05	; 5
    1b76:	39 f4       	brne	.+14     	; 0x1b86 <init_ADC+0x40>
    1b78:	e8 2f       	mov	r30, r24
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	e1 5b       	subi	r30, 0xB1	; 177
    1b7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b80:	96 e0       	ldi	r25, 0x06	; 6
    1b82:	90 83       	st	Z, r25
    1b84:	06 c0       	rjmp	.+12     	; 0x1b92 <init_ADC+0x4c>
    1b86:	e8 2f       	mov	r30, r24
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	e1 5b       	subi	r30, 0xB1	; 177
    1b8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b8e:	9a e0       	ldi	r25, 0x0A	; 10
    1b90:	90 83       	st	Z, r25
    1b92:	8f 5f       	subi	r24, 0xFF	; 255
    1b94:	86 30       	cpi	r24, 0x06	; 6
    1b96:	70 f3       	brcs	.-36     	; 0x1b74 <init_ADC+0x2e>
    1b98:	08 95       	ret

00001b9a <init_Pipe>:
    1b9a:	8f ef       	ldi	r24, 0xFF	; 255
    1b9c:	88 b9       	out	0x08, r24	; 8
    1b9e:	87 b9       	out	0x07, r24	; 7
    1ba0:	82 b9       	out	0x02, r24	; 2
    1ba2:	11 b8       	out	0x01, r1	; 1
    1ba4:	84 b3       	in	r24, 0x14	; 20
    1ba6:	87 60       	ori	r24, 0x07	; 7
    1ba8:	84 bb       	out	0x14, r24	; 20
    1baa:	83 b3       	in	r24, 0x13	; 19
    1bac:	87 60       	ori	r24, 0x07	; 7
    1bae:	83 bb       	out	0x13, r24	; 19
    1bb0:	8b b1       	in	r24, 0x0b	; 11
    1bb2:	8f 77       	andi	r24, 0x7F	; 127
    1bb4:	8b b9       	out	0x0b, r24	; 11
    1bb6:	8a b1       	in	r24, 0x0a	; 10
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	8a b9       	out	0x0a, r24	; 10
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	0e c0       	rjmp	.+28     	; 0x1bdc <init_Pipe+0x42>
    1bc0:	e8 2f       	mov	r30, r24
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	ee 0f       	add	r30, r30
    1bc6:	ff 1f       	adc	r31, r31
    1bc8:	ee 0f       	add	r30, r30
    1bca:	ff 1f       	adc	r31, r31
    1bcc:	ee 0f       	add	r30, r30
    1bce:	ff 1f       	adc	r31, r31
    1bd0:	e7 5b       	subi	r30, 0xB7	; 183
    1bd2:	fd 4f       	sbci	r31, 0xFD	; 253
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	90 83       	st	Z, r25
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	80 32       	cpi	r24, 0x20	; 32
    1bde:	80 f3       	brcs	.-32     	; 0x1bc0 <init_Pipe+0x26>
    1be0:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1be4:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1be8:	08 95       	ret

00001bea <init_PipeModules>:
    1bea:	e6 dc       	rcall	.-1588   	; 0x15b8 <eeprom_ReadModules>
    1bec:	8f 3f       	cpi	r24, 0xFF	; 255
    1bee:	51 f4       	brne	.+20     	; 0x1c04 <init_PipeModules+0x1a>
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	42 d7       	rcall	.+3716   	; 0x2a7e <log_putError>
    1bfa:	e5 e5       	ldi	r30, 0x55	; 85
    1bfc:	f3 e0       	ldi	r31, 0x03	; 3
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	80 83       	st	Z, r24
    1c02:	81 83       	std	Z+1, r24	; 0x01
    1c04:	8b b1       	in	r24, 0x0b	; 11
    1c06:	8f 77       	andi	r24, 0x7F	; 127
    1c08:	8b b9       	out	0x0b, r24	; 11
    1c0a:	84 b3       	in	r24, 0x14	; 20
    1c0c:	87 60       	ori	r24, 0x07	; 7
    1c0e:	84 bb       	out	0x14, r24	; 20
    1c10:	84 b3       	in	r24, 0x14	; 20
    1c12:	8b 7f       	andi	r24, 0xFB	; 251
    1c14:	84 bb       	out	0x14, r24	; 20
    1c16:	85 e0       	ldi	r24, 0x05	; 5
    1c18:	8a 95       	dec	r24
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <init_PipeModules+0x2e>
    1c1c:	00 00       	nop
    1c1e:	84 b3       	in	r24, 0x14	; 20
    1c20:	84 60       	ori	r24, 0x04	; 4
    1c22:	84 bb       	out	0x14, r24	; 20
    1c24:	90 e2       	ldi	r25, 0x20	; 32
    1c26:	84 b3       	in	r24, 0x14	; 20
    1c28:	81 60       	ori	r24, 0x01	; 1
    1c2a:	84 bb       	out	0x14, r24	; 20
    1c2c:	90 fd       	sbrc	r25, 0
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <init_PipeModules+0x4a>
    1c30:	85 e5       	ldi	r24, 0x55	; 85
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <init_PipeModules+0x4c>
    1c34:	8a ea       	ldi	r24, 0xAA	; 170
    1c36:	88 b9       	out	0x08, r24	; 8
    1c38:	80 b1       	in	r24, 0x00	; 0
    1c3a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1c3e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1c42:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1c46:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1c4a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1c4e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1c52:	84 b3       	in	r24, 0x14	; 20
    1c54:	8e 7f       	andi	r24, 0xFE	; 254
    1c56:	84 bb       	out	0x14, r24	; 20
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	8a 95       	dec	r24
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <init_PipeModules+0x70>
    1c5e:	00 00       	nop
    1c60:	91 50       	subi	r25, 0x01	; 1
    1c62:	09 f7       	brne	.-62     	; 0x1c26 <init_PipeModules+0x3c>
    1c64:	90 e2       	ldi	r25, 0x20	; 32
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <init_PipeModules+0x9c>
    1c68:	84 b3       	in	r24, 0x14	; 20
    1c6a:	81 60       	ori	r24, 0x01	; 1
    1c6c:	84 bb       	out	0x14, r24	; 20
    1c6e:	82 e0       	ldi	r24, 0x02	; 2
    1c70:	8a 95       	dec	r24
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <init_PipeModules+0x86>
    1c74:	00 c0       	rjmp	.+0      	; 0x1c76 <init_PipeModules+0x8c>
    1c76:	84 b3       	in	r24, 0x14	; 20
    1c78:	8e 7f       	andi	r24, 0xFE	; 254
    1c7a:	84 bb       	out	0x14, r24	; 20
    1c7c:	82 e0       	ldi	r24, 0x02	; 2
    1c7e:	8a 95       	dec	r24
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <init_PipeModules+0x94>
    1c82:	00 c0       	rjmp	.+0      	; 0x1c84 <init_PipeModules+0x9a>
    1c84:	91 50       	subi	r25, 0x01	; 1
    1c86:	91 11       	cpse	r25, r1
    1c88:	ef cf       	rjmp	.-34     	; 0x1c68 <init_PipeModules+0x7e>
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1c90:	90 e2       	ldi	r25, 0x20	; 32
    1c92:	84 b3       	in	r24, 0x14	; 20
    1c94:	81 60       	ori	r24, 0x01	; 1
    1c96:	84 bb       	out	0x14, r24	; 20
    1c98:	8f ef       	ldi	r24, 0xFF	; 255
    1c9a:	88 b9       	out	0x08, r24	; 8
    1c9c:	20 b1       	in	r18, 0x00	; 0
    1c9e:	90 fd       	sbrc	r25, 0
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <init_PipeModules+0xbc>
    1ca2:	8a ea       	ldi	r24, 0xAA	; 170
    1ca4:	01 c0       	rjmp	.+2      	; 0x1ca8 <init_PipeModules+0xbe>
    1ca6:	85 e5       	ldi	r24, 0x55	; 85
    1ca8:	82 27       	eor	r24, r18
    1caa:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1cae:	82 23       	and	r24, r18
    1cb0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1cb4:	84 b3       	in	r24, 0x14	; 20
    1cb6:	8e 7f       	andi	r24, 0xFE	; 254
    1cb8:	84 bb       	out	0x14, r24	; 20
    1cba:	85 e0       	ldi	r24, 0x05	; 5
    1cbc:	8a 95       	dec	r24
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <init_PipeModules+0xd2>
    1cc0:	00 00       	nop
    1cc2:	91 50       	subi	r25, 0x01	; 1
    1cc4:	31 f7       	brne	.-52     	; 0x1c92 <init_PipeModules+0xa8>
    1cc6:	00 00       	nop
    1cc8:	00 00       	nop
    1cca:	84 b3       	in	r24, 0x14	; 20
    1ccc:	81 60       	ori	r24, 0x01	; 1
    1cce:	84 bb       	out	0x14, r24	; 20
    1cd0:	84 b3       	in	r24, 0x14	; 20
    1cd2:	87 60       	ori	r24, 0x07	; 7
    1cd4:	84 bb       	out	0x14, r24	; 20
    1cd6:	84 b3       	in	r24, 0x14	; 20
    1cd8:	8b 7f       	andi	r24, 0xFB	; 251
    1cda:	84 bb       	out	0x14, r24	; 20
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	8a 95       	dec	r24
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <init_PipeModules+0xf4>
    1ce2:	00 c0       	rjmp	.+0      	; 0x1ce4 <init_PipeModules+0xfa>
    1ce4:	84 b3       	in	r24, 0x14	; 20
    1ce6:	84 60       	ori	r24, 0x04	; 4
    1ce8:	84 bb       	out	0x14, r24	; 20
    1cea:	90 e2       	ldi	r25, 0x20	; 32
    1cec:	e1 e4       	ldi	r30, 0x41	; 65
    1cee:	f3 e0       	ldi	r31, 0x03	; 3
    1cf0:	83 81       	ldd	r24, Z+3	; 0x03
    1cf2:	82 83       	std	Z+2, r24	; 0x02
    1cf4:	84 81       	ldd	r24, Z+4	; 0x04
    1cf6:	83 83       	std	Z+3, r24	; 0x03
    1cf8:	84 b3       	in	r24, 0x14	; 20
    1cfa:	81 60       	ori	r24, 0x01	; 1
    1cfc:	84 bb       	out	0x14, r24	; 20
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	81 83       	std	Z+1, r24	; 0x01
    1d02:	88 b9       	out	0x08, r24	; 8
    1d04:	85 81       	ldd	r24, Z+5	; 0x05
    1d06:	84 83       	std	Z+4, r24	; 0x04
    1d08:	86 81       	ldd	r24, Z+6	; 0x06
    1d0a:	85 83       	std	Z+5, r24	; 0x05
    1d0c:	80 b1       	in	r24, 0x00	; 0
    1d0e:	86 83       	std	Z+6, r24	; 0x06
    1d10:	82 83       	std	Z+2, r24	; 0x02
    1d12:	83 83       	std	Z+3, r24	; 0x03
    1d14:	84 83       	std	Z+4, r24	; 0x04
    1d16:	85 83       	std	Z+5, r24	; 0x05
    1d18:	87 83       	std	Z+7, r24	; 0x07
    1d1a:	84 b3       	in	r24, 0x14	; 20
    1d1c:	8e 7f       	andi	r24, 0xFE	; 254
    1d1e:	84 bb       	out	0x14, r24	; 20
    1d20:	38 97       	sbiw	r30, 0x08	; 8
    1d22:	91 50       	subi	r25, 0x01	; 1
    1d24:	29 f7       	brne	.-54     	; 0x1cf0 <init_PipeModules+0x106>
    1d26:	00 00       	nop
    1d28:	00 00       	nop
    1d2a:	84 b3       	in	r24, 0x14	; 20
    1d2c:	81 60       	ori	r24, 0x01	; 1
    1d2e:	84 bb       	out	0x14, r24	; 20
    1d30:	84 b3       	in	r24, 0x14	; 20
    1d32:	8d 7f       	andi	r24, 0xFD	; 253
    1d34:	84 bb       	out	0x14, r24	; 20
    1d36:	18 b8       	out	0x08, r1	; 8
    1d38:	85 e0       	ldi	r24, 0x05	; 5
    1d3a:	8a 95       	dec	r24
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <init_PipeModules+0x150>
    1d3e:	00 00       	nop
    1d40:	84 b3       	in	r24, 0x14	; 20
    1d42:	82 60       	ori	r24, 0x02	; 2
    1d44:	84 bb       	out	0x14, r24	; 20
    1d46:	08 95       	ret

00001d48 <test_PipeModule>:
    1d48:	88 30       	cpi	r24, 0x08	; 8
    1d4a:	08 f0       	brcs	.+2      	; 0x1d4e <test_PipeModule+0x6>
    1d4c:	6a c0       	rjmp	.+212    	; 0x1e22 <test_PipeModule+0xda>
    1d4e:	31 e0       	ldi	r19, 0x01	; 1
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <test_PipeModule+0xc>
    1d52:	33 0f       	add	r19, r19
    1d54:	8a 95       	dec	r24
    1d56:	ea f7       	brpl	.-6      	; 0x1d52 <test_PipeModule+0xa>
    1d58:	80 e8       	ldi	r24, 0x80	; 128
    1d5a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1d5e:	8b b1       	in	r24, 0x0b	; 11
    1d60:	8f 77       	andi	r24, 0x7F	; 127
    1d62:	8b b9       	out	0x0b, r24	; 11
    1d64:	84 b3       	in	r24, 0x14	; 20
    1d66:	87 60       	ori	r24, 0x07	; 7
    1d68:	84 bb       	out	0x14, r24	; 20
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	1d c0       	rjmp	.+58     	; 0x1da8 <test_PipeModule+0x60>
    1d6e:	20 fd       	sbrc	r18, 0
    1d70:	03 c0       	rjmp	.+6      	; 0x1d78 <test_PipeModule+0x30>
    1d72:	83 2f       	mov	r24, r19
    1d74:	80 95       	com	r24
    1d76:	01 c0       	rjmp	.+2      	; 0x1d7a <test_PipeModule+0x32>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	88 b9       	out	0x08, r24	; 8
    1d7c:	26 95       	lsr	r18
    1d7e:	82 e0       	ldi	r24, 0x02	; 2
    1d80:	8a 95       	dec	r24
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <test_PipeModule+0x38>
    1d84:	00 c0       	rjmp	.+0      	; 0x1d86 <test_PipeModule+0x3e>
    1d86:	84 b3       	in	r24, 0x14	; 20
    1d88:	8e 7f       	andi	r24, 0xFE	; 254
    1d8a:	84 bb       	out	0x14, r24	; 20
    1d8c:	82 e0       	ldi	r24, 0x02	; 2
    1d8e:	8a 95       	dec	r24
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <test_PipeModule+0x46>
    1d92:	00 c0       	rjmp	.+0      	; 0x1d94 <test_PipeModule+0x4c>
    1d94:	84 b3       	in	r24, 0x14	; 20
    1d96:	81 60       	ori	r24, 0x01	; 1
    1d98:	84 bb       	out	0x14, r24	; 20
    1d9a:	9f 5f       	subi	r25, 0xFF	; 255
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <test_PipeModule+0x5a>
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	25 ea       	ldi	r18, 0xA5	; 165
    1da2:	98 30       	cpi	r25, 0x08	; 8
    1da4:	20 f3       	brcs	.-56     	; 0x1d6e <test_PipeModule+0x26>
    1da6:	4f 5f       	subi	r20, 0xFF	; 255
    1da8:	44 30       	cpi	r20, 0x04	; 4
    1daa:	c8 f3       	brcs	.-14     	; 0x1d9e <test_PipeModule+0x56>
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <test_PipeModule+0x86>
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	8a 95       	dec	r24
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <test_PipeModule+0x6a>
    1db6:	00 c0       	rjmp	.+0      	; 0x1db8 <test_PipeModule+0x70>
    1db8:	84 b3       	in	r24, 0x14	; 20
    1dba:	8e 7f       	andi	r24, 0xFE	; 254
    1dbc:	84 bb       	out	0x14, r24	; 20
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	8a 95       	dec	r24
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <test_PipeModule+0x78>
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <test_PipeModule+0x7e>
    1dc6:	84 b3       	in	r24, 0x14	; 20
    1dc8:	81 60       	ori	r24, 0x01	; 1
    1dca:	84 bb       	out	0x14, r24	; 20
    1dcc:	9f 5f       	subi	r25, 0xFF	; 255
    1dce:	90 32       	cpi	r25, 0x20	; 32
    1dd0:	78 f3       	brcs	.-34     	; 0x1db0 <test_PipeModule+0x68>
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	ba 01       	movw	r22, r20
    1dda:	17 c0       	rjmp	.+46     	; 0x1e0a <test_PipeModule+0xc2>
    1ddc:	44 0f       	add	r20, r20
    1dde:	55 1f       	adc	r21, r21
    1de0:	66 1f       	adc	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	8a 95       	dec	r24
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <test_PipeModule+0x9e>
    1dea:	00 c0       	rjmp	.+0      	; 0x1dec <test_PipeModule+0xa4>
    1dec:	84 b3       	in	r24, 0x14	; 20
    1dee:	8e 7f       	andi	r24, 0xFE	; 254
    1df0:	84 bb       	out	0x14, r24	; 20
    1df2:	80 b1       	in	r24, 0x00	; 0
    1df4:	83 23       	and	r24, r19
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <test_PipeModule+0xb2>
    1df8:	41 60       	ori	r20, 0x01	; 1
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	8a 95       	dec	r24
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <test_PipeModule+0xb4>
    1e00:	00 c0       	rjmp	.+0      	; 0x1e02 <test_PipeModule+0xba>
    1e02:	84 b3       	in	r24, 0x14	; 20
    1e04:	81 60       	ori	r24, 0x01	; 1
    1e06:	84 bb       	out	0x14, r24	; 20
    1e08:	9f 5f       	subi	r25, 0xFF	; 255
    1e0a:	90 32       	cpi	r25, 0x20	; 32
    1e0c:	38 f3       	brcs	.-50     	; 0x1ddc <test_PipeModule+0x94>
    1e0e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1e12:	8b b1       	in	r24, 0x0b	; 11
    1e14:	80 68       	ori	r24, 0x80	; 128
    1e16:	8b b9       	out	0x0b, r24	; 11
    1e18:	34 2f       	mov	r19, r20
    1e1a:	25 2f       	mov	r18, r21
    1e1c:	86 2f       	mov	r24, r22
    1e1e:	97 2f       	mov	r25, r23
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <test_PipeModule+0xe2>
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	63 2f       	mov	r22, r19
    1e2c:	72 2f       	mov	r23, r18
    1e2e:	08 95       	ret

00001e30 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e30:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1e32:	e9 e4       	ldi	r30, 0x49	; 73
    1e34:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1e36:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e38:	06 c0       	rjmp	.+12     	; 0x1e46 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1e3a:	2f ef       	ldi	r18, 0xFF	; 255
    1e3c:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1e3e:	26 81       	ldd	r18, Z+6	; 0x06
    1e40:	82 2b       	or	r24, r18
		pPipe++;
    1e42:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e44:	9f 5f       	subi	r25, 0xFF	; 255
    1e46:	90 32       	cpi	r25, 0x20	; 32
    1e48:	c0 f3       	brcs	.-16     	; 0x1e3a <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    1e4a:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    1e4e:	89 23       	and	r24, r25
    1e50:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
}
    1e54:	89 23       	and	r24, r25
    1e56:	08 95       	ret

00001e58 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1e58:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1e5c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1e60:	81 ff       	sbrs	r24, 1
    1e62:	fc cf       	rjmp	.-8      	; 0x1e5c <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1e64:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1e68:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1e6c:	81 ff       	sbrs	r24, 1
    1e6e:	fc cf       	rjmp	.-8      	; 0x1e68 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1e70:	08 95       	ret

00001e72 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1e78:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e7a:	f8 94       	cli
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <module_StartPowerOn+0x18>
    1e7e:	ef e2       	ldi	r30, 0x2F	; 47
    1e80:	f2 e0       	ldi	r31, 0x02	; 2
    1e82:	88 e2       	ldi	r24, 0x28	; 40
    1e84:	82 83       	std	Z+2, r24	; 0x02
    1e86:	13 82       	std	Z+3, r1	; 0x03
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	81 11       	cpse	r24, r1
    1e8c:	f8 cf       	rjmp	.-16     	; 0x1e7e <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e8e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e90:	08 95       	ret

00001e92 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1e92:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1e96:	81 30       	cpi	r24, 0x01	; 1
    1e98:	31 f5       	brne	.+76     	; 0x1ee6 <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1e9a:	ca df       	rcall	.-108    	; 0x1e30 <module_TestAllInputs>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1ea0:	85 b1       	in	r24, 0x05	; 5
    1ea2:	80 64       	ori	r24, 0x40	; 64
    1ea4:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1ea6:	82 e1       	ldi	r24, 0x12	; 18
    1ea8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1eac:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eae:	f8 94       	cli
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	06 c0       	rjmp	.+12     	; 0x1ec0 <module_PowerControl+0x2e>
    1eb4:	ef e2       	ldi	r30, 0x2F	; 47
    1eb6:	f2 e0       	ldi	r31, 0x02	; 2
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	82 83       	std	Z+2, r24	; 0x02
    1ebc:	13 82       	std	Z+3, r1	; 0x03
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	81 11       	cpse	r24, r1
    1ec2:	f8 cf       	rjmp	.-16     	; 0x1eb4 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ec4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1ec6:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1ec8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eca:	f8 94       	cli
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	07 c0       	rjmp	.+14     	; 0x1ede <module_PowerControl+0x4c>
    1ed0:	ef e2       	ldi	r30, 0x2F	; 47
    1ed2:	f2 e0       	ldi	r31, 0x02	; 2
    1ed4:	8c e0       	ldi	r24, 0x0C	; 12
    1ed6:	82 83       	std	Z+2, r24	; 0x02
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	83 83       	std	Z+3, r24	; 0x03
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	81 11       	cpse	r24, r1
    1ee0:	f7 cf       	rjmp	.-18     	; 0x1ed0 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ee2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1ee4:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1ee6:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1ee8:	b1 f4       	brne	.+44     	; 0x1f16 <module_PowerControl+0x84>
    1eea:	a2 df       	rcall	.-188    	; 0x1e30 <module_TestAllInputs>
		if (testResult == 0){
    1eec:	81 11       	cpse	r24, r1
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1ef0:	84 e1       	ldi	r24, 0x14	; 20
    1ef2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1ef6:	0b c0       	rjmp	.+22     	; 0x1f0e <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1ef8:	48 2f       	mov	r20, r24
    1efa:	50 e0       	ldi	r21, 0x00	; 0
    1efc:	60 e0       	ldi	r22, 0x00	; 0
    1efe:	85 e0       	ldi	r24, 0x05	; 5
    1f00:	be d5       	rcall	.+2940   	; 0x2a7e <log_putError>
			POWER_OFF
    1f02:	85 b1       	in	r24, 0x05	; 5
    1f04:	8f 7b       	andi	r24, 0xBF	; 191
    1f06:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1f08:	80 e8       	ldi	r24, 0x80	; 128
    1f0a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1f0e:	8f ef       	ldi	r24, 0xFF	; 255
    1f10:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1f14:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1f1c:	08 95       	ret

00001f1e <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1f22:	94 30       	cpi	r25, 0x04	; 4
    1f24:	50 f4       	brcc	.+20     	; 0x1f3a <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1f26:	e9 2f       	mov	r30, r25
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <softKey_WantLong+0x14>
    1f2e:	2a e0       	ldi	r18, 0x0A	; 10
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <softKey_WantLong+0x16>
    1f32:	26 e0       	ldi	r18, 0x06	; 6
    1f34:	e1 5b       	subi	r30, 0xB1	; 177
    1f36:	fc 4f       	sbci	r31, 0xFC	; 252
    1f38:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1f3a:	9f 5f       	subi	r25, 0xFF	; 255
    1f3c:	96 30       	cpi	r25, 0x06	; 6
    1f3e:	88 f3       	brcs	.-30     	; 0x1f22 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1f40:	08 95       	ret

00001f42 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1f42:	1f 92       	push	r1
    1f44:	0f 92       	push	r0
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	0f 92       	push	r0
    1f4a:	11 24       	eor	r1, r1
    1f4c:	0b b6       	in	r0, 0x3b	; 59
    1f4e:	0f 92       	push	r0
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	2f 93       	push	r18
    1f5a:	3f 93       	push	r19
    1f5c:	4f 93       	push	r20
    1f5e:	5f 93       	push	r21
    1f60:	6f 93       	push	r22
    1f62:	7f 93       	push	r23
    1f64:	8f 93       	push	r24
    1f66:	9f 93       	push	r25
    1f68:	af 93       	push	r26
    1f6a:	bf 93       	push	r27
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1f74:	85 b1       	in	r24, 0x05	; 5
    1f76:	80 68       	ori	r24, 0x80	; 128
    1f78:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1f7a:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1f84:	83 70       	andi	r24, 0x03	; 3
    1f86:	81 30       	cpi	r24, 0x01	; 1
    1f88:	09 f4       	brne	.+2      	; 0x1f8c <__vector_21+0x4a>
    1f8a:	58 c1       	rjmp	.+688    	; 0x223c <__stack+0x3d>
    1f8c:	38 f0       	brcs	.+14     	; 0x1f9c <__vector_21+0x5a>
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__vector_21+0x52>
    1f92:	a5 c1       	rjmp	.+842    	; 0x22de <__stack+0xdf>
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <__vector_21+0x58>
    1f98:	ca c1       	rjmp	.+916    	; 0x232e <__stack+0x12f>
    1f9a:	05 c2       	rjmp	.+1034   	; 0x23a6 <__stack+0x1a7>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1f9c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1fa0:	81 11       	cpse	r24, r1
    1fa2:	1a c1       	rjmp	.+564    	; 0x21d8 <__vector_21+0x296>
    1fa4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1fa8:	96 fd       	sbrc	r25, 6
    1faa:	16 c1       	rjmp	.+556    	; 0x21d8 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1fac:	28 2f       	mov	r18, r24
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	f9 01       	movw	r30, r18
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	e2 0f       	add	r30, r18
    1fb8:	f3 1f       	adc	r31, r19
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e7 5b       	subi	r30, 0xB7	; 183
    1fc0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1fc4:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1fc8:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1fca:	49 17       	cp	r20, r25
    1fcc:	10 f4       	brcc	.+4      	; 0x1fd2 <__vector_21+0x90>
		return data1-data2;
    1fce:	94 1b       	sub	r25, r20
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <__vector_21+0x96>
	} else {
		return data2-data1;
    1fd2:	54 2f       	mov	r21, r20
    1fd4:	59 1b       	sub	r21, r25
    1fd6:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1fd8:	94 30       	cpi	r25, 0x04	; 4
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <__vector_21+0x9c>
    1fdc:	fd c0       	rjmp	.+506    	; 0x21d8 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1fde:	81 11       	cpse	r24, r1
    1fe0:	0e c0       	rjmp	.+28     	; 0x1ffe <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1fe2:	42 32       	cpi	r20, 0x22	; 34
    1fe4:	70 f0       	brcs	.+28     	; 0x2002 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1fe6:	4f 33       	cpi	r20, 0x3F	; 63
    1fe8:	70 f0       	brcs	.+28     	; 0x2006 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1fea:	48 36       	cpi	r20, 0x68	; 104
    1fec:	70 f0       	brcs	.+28     	; 0x200a <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1fee:	46 39       	cpi	r20, 0x96	; 150
    1ff0:	70 f0       	brcs	.+28     	; 0x200e <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1ff2:	4f 3b       	cpi	r20, 0xBF	; 191
    1ff4:	70 f0       	brcs	.+28     	; 0x2012 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1ff6:	48 3e       	cpi	r20, 0xE8	; 232
    1ff8:	70 f4       	brcc	.+28     	; 0x2016 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1ffa:	c6 e0       	ldi	r28, 0x06	; 6
    1ffc:	0d c0       	rjmp	.+26     	; 0x2018 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1ffe:	cf ef       	ldi	r28, 0xFF	; 255
    2000:	0b c0       	rjmp	.+22     	; 0x2018 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    2002:	c4 e0       	ldi	r28, 0x04	; 4
    2004:	09 c0       	rjmp	.+18     	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    2006:	c3 e0       	ldi	r28, 0x03	; 3
    2008:	07 c0       	rjmp	.+14     	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    200a:	c5 e0       	ldi	r28, 0x05	; 5
    200c:	05 c0       	rjmp	.+10     	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    200e:	c1 e0       	ldi	r28, 0x01	; 1
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    2012:	c2 e0       	ldi	r28, 0x02	; 2
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    2016:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    2018:	f9 01       	movw	r30, r18
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	e2 0f       	add	r30, r18
    2020:	f3 1f       	adc	r31, r19
    2022:	ee 0f       	add	r30, r30
    2024:	ff 1f       	adc	r31, r31
    2026:	e7 5b       	subi	r30, 0xB7	; 183
    2028:	fc 4f       	sbci	r31, 0xFC	; 252
    202a:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    202c:	dc 17       	cp	r29, r28
    202e:	09 f4       	brne	.+2      	; 0x2032 <__vector_21+0xf0>
    2030:	48 c0       	rjmp	.+144    	; 0x20c2 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    2032:	df 3f       	cpi	r29, 0xFF	; 255
    2034:	19 f0       	breq	.+6      	; 0x203c <__vector_21+0xfa>
    2036:	cf 3f       	cpi	r28, 0xFF	; 255
    2038:	09 f0       	breq	.+2      	; 0x203c <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    203a:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    203c:	f9 01       	movw	r30, r18
    203e:	ee 0f       	add	r30, r30
    2040:	ff 1f       	adc	r31, r31
    2042:	e2 0f       	add	r30, r18
    2044:	f3 1f       	adc	r31, r19
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	e7 5b       	subi	r30, 0xB7	; 183
    204c:	fc 4f       	sbci	r31, 0xFC	; 252
    204e:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    2050:	df 3f       	cpi	r29, 0xFF	; 255
    2052:	f9 f4       	brne	.+62     	; 0x2092 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    2054:	c9 01       	movw	r24, r18
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	fc 01       	movw	r30, r24
    205c:	e2 0f       	add	r30, r18
    205e:	f3 1f       	adc	r31, r19
    2060:	ee 0f       	add	r30, r30
    2062:	ff 1f       	adc	r31, r31
    2064:	e7 5b       	subi	r30, 0xB7	; 183
    2066:	fc 4f       	sbci	r31, 0xFC	; 252
    2068:	15 82       	std	Z+5, r1	; 0x05
    206a:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    206c:	fc 01       	movw	r30, r24
    206e:	e2 0f       	add	r30, r18
    2070:	f3 1f       	adc	r31, r19
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e7 5b       	subi	r30, 0xB7	; 183
    2078:	fc 4f       	sbci	r31, 0xFC	; 252
    207a:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    207c:	ec 2f       	mov	r30, r28
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	e2 5b       	subi	r30, 0xB2	; 178
    2082:	fc 4f       	sbci	r31, 0xFC	; 252
    2084:	80 81       	ld	r24, Z
    2086:	80 ff       	sbrs	r24, 0
    2088:	a7 c0       	rjmp	.+334    	; 0x21d8 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    208a:	8c 2f       	mov	r24, r28
    208c:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <message_push>
    2090:	a3 c0       	rjmp	.+326    	; 0x21d8 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    2092:	ed 2f       	mov	r30, r29
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	e2 5b       	subi	r30, 0xB2	; 178
    2098:	fc 4f       	sbci	r31, 0xFC	; 252
    209a:	80 81       	ld	r24, Z
    209c:	81 ff       	sbrs	r24, 1
    209e:	9c c0       	rjmp	.+312    	; 0x21d8 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    20a0:	f9 01       	movw	r30, r18
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e2 0f       	add	r30, r18
    20a8:	f3 1f       	adc	r31, r19
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	e7 5b       	subi	r30, 0xB7	; 183
    20b0:	fc 4f       	sbci	r31, 0xFC	; 252
    20b2:	83 81       	ldd	r24, Z+3	; 0x03
    20b4:	83 70       	andi	r24, 0x03	; 3
    20b6:	09 f0       	breq	.+2      	; 0x20ba <__vector_21+0x178>
    20b8:	8f c0       	rjmp	.+286    	; 0x21d8 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    20ba:	8d 2f       	mov	r24, r29
    20bc:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <message_push>
    20c0:	8b c0       	rjmp	.+278    	; 0x21d8 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    20c2:	cf 3f       	cpi	r28, 0xFF	; 255
    20c4:	09 f4       	brne	.+2      	; 0x20c8 <__vector_21+0x186>
    20c6:	88 c0       	rjmp	.+272    	; 0x21d8 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    20c8:	f9 01       	movw	r30, r18
    20ca:	ee 0f       	add	r30, r30
    20cc:	ff 1f       	adc	r31, r31
    20ce:	df 01       	movw	r26, r30
    20d0:	a2 0f       	add	r26, r18
    20d2:	b3 1f       	adc	r27, r19
    20d4:	aa 0f       	add	r26, r26
    20d6:	bb 1f       	adc	r27, r27
    20d8:	a7 5b       	subi	r26, 0xB7	; 183
    20da:	bc 4f       	sbci	r27, 0xFC	; 252
    20dc:	14 96       	adiw	r26, 0x04	; 4
    20de:	8d 91       	ld	r24, X+
    20e0:	9c 91       	ld	r25, X
    20e2:	15 97       	sbiw	r26, 0x05	; 5
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	15 96       	adiw	r26, 0x05	; 5
    20e8:	9c 93       	st	X, r25
    20ea:	8e 93       	st	-X, r24
    20ec:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    20ee:	fd 01       	movw	r30, r26
    20f0:	84 81       	ldd	r24, Z+4	; 0x04
    20f2:	95 81       	ldd	r25, Z+5	; 0x05
    20f4:	8b 34       	cpi	r24, 0x4B	; 75
    20f6:	91 05       	cpc	r25, r1
    20f8:	a9 f4       	brne	.+42     	; 0x2124 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    20fa:	ed 2f       	mov	r30, r29
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	e2 5b       	subi	r30, 0xB2	; 178
    2100:	fc 4f       	sbci	r31, 0xFC	; 252
    2102:	80 81       	ld	r24, Z
    2104:	82 ff       	sbrs	r24, 2
    2106:	0e c0       	rjmp	.+28     	; 0x2124 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    2108:	8c 2f       	mov	r24, r28
    210a:	80 68       	ori	r24, 0x80	; 128
    210c:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    2110:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    2114:	86 e0       	ldi	r24, 0x06	; 6
    2116:	e8 9f       	mul	r30, r24
    2118:	f0 01       	movw	r30, r0
    211a:	11 24       	eor	r1, r1
    211c:	e7 5b       	subi	r30, 0xB7	; 183
    211e:	fc 4f       	sbci	r31, 0xFC	; 252
    2120:	82 e0       	ldi	r24, 0x02	; 2
    2122:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    2124:	ed 2f       	mov	r30, r29
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	e2 5b       	subi	r30, 0xB2	; 178
    212a:	fc 4f       	sbci	r31, 0xFC	; 252
    212c:	80 81       	ld	r24, Z
    212e:	83 ff       	sbrs	r24, 3
    2130:	53 c0       	rjmp	.+166    	; 0x21d8 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    2132:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	fc 01       	movw	r30, r24
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	e8 0f       	add	r30, r24
    2140:	f9 1f       	adc	r31, r25
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	e7 5b       	subi	r30, 0xB7	; 183
    2148:	fc 4f       	sbci	r31, 0xFC	; 252
    214a:	23 81       	ldd	r18, Z+3	; 0x03
    214c:	21 11       	cpse	r18, r1
    214e:	1e c0       	rjmp	.+60     	; 0x218c <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2150:	fc 01       	movw	r30, r24
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	e8 0f       	add	r30, r24
    2158:	f9 1f       	adc	r31, r25
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e7 5b       	subi	r30, 0xB7	; 183
    2160:	fc 4f       	sbci	r31, 0xFC	; 252
    2162:	24 81       	ldd	r18, Z+4	; 0x04
    2164:	35 81       	ldd	r19, Z+5	; 0x05
    2166:	22 33       	cpi	r18, 0x32	; 50
    2168:	31 05       	cpc	r19, r1
    216a:	b1 f5       	brne	.+108    	; 0x21d8 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    216c:	26 e0       	ldi	r18, 0x06	; 6
    216e:	28 9f       	mul	r18, r24
    2170:	f0 01       	movw	r30, r0
    2172:	29 9f       	mul	r18, r25
    2174:	f0 0d       	add	r31, r0
    2176:	11 24       	eor	r1, r1
    2178:	e7 5b       	subi	r30, 0xB7	; 183
    217a:	fc 4f       	sbci	r31, 0xFC	; 252
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2180:	15 82       	std	Z+5, r1	; 0x05
    2182:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2184:	8c 2f       	mov	r24, r28
    2186:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <message_push>
    218a:	26 c0       	rjmp	.+76     	; 0x21d8 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    218c:	fc 01       	movw	r30, r24
    218e:	ee 0f       	add	r30, r30
    2190:	ff 1f       	adc	r31, r31
    2192:	e8 0f       	add	r30, r24
    2194:	f9 1f       	adc	r31, r25
    2196:	ee 0f       	add	r30, r30
    2198:	ff 1f       	adc	r31, r31
    219a:	e7 5b       	subi	r30, 0xB7	; 183
    219c:	fc 4f       	sbci	r31, 0xFC	; 252
    219e:	23 81       	ldd	r18, Z+3	; 0x03
    21a0:	21 30       	cpi	r18, 0x01	; 1
    21a2:	d1 f4       	brne	.+52     	; 0x21d8 <__vector_21+0x296>
    21a4:	26 e0       	ldi	r18, 0x06	; 6
    21a6:	28 9f       	mul	r18, r24
    21a8:	f0 01       	movw	r30, r0
    21aa:	29 9f       	mul	r18, r25
    21ac:	f0 0d       	add	r31, r0
    21ae:	11 24       	eor	r1, r1
    21b0:	e7 5b       	subi	r30, 0xB7	; 183
    21b2:	fc 4f       	sbci	r31, 0xFC	; 252
    21b4:	24 81       	ldd	r18, Z+4	; 0x04
    21b6:	35 81       	ldd	r19, Z+5	; 0x05
    21b8:	2c 30       	cpi	r18, 0x0C	; 12
    21ba:	31 05       	cpc	r19, r1
    21bc:	69 f4       	brne	.+26     	; 0x21d8 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    21be:	26 e0       	ldi	r18, 0x06	; 6
    21c0:	28 9f       	mul	r18, r24
    21c2:	f0 01       	movw	r30, r0
    21c4:	29 9f       	mul	r18, r25
    21c6:	f0 0d       	add	r31, r0
    21c8:	11 24       	eor	r1, r1
    21ca:	e7 5b       	subi	r30, 0xB7	; 183
    21cc:	fc 4f       	sbci	r31, 0xFC	; 252
    21ce:	15 82       	std	Z+5, r1	; 0x05
    21d0:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    21d2:	8c 2f       	mov	r24, r28
    21d4:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    21d8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    21dc:	8f 5f       	subi	r24, 0xFF	; 255
    21de:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <__vector_21+0x2a8>
		adcNr = 0;
    21e6:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    21ea:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    21ee:	81 11       	cpse	r24, r1
    21f0:	0c c0       	rjmp	.+24     	; 0x220a <__stack+0xb>
		newMux = adcKeys[adcNr].mux;
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	fc 01       	movw	r30, r24
    21f6:	ee 0f       	add	r30, r30
    21f8:	ff 1f       	adc	r31, r31
    21fa:	e8 0f       	add	r30, r24
    21fc:	f9 1f       	adc	r31, r25
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	e7 5b       	subi	r30, 0xB7	; 183
    2204:	fc 4f       	sbci	r31, 0xFC	; 252
    2206:	80 81       	ld	r24, Z
    2208:	01 c0       	rjmp	.+2      	; 0x220c <__stack+0xd>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    220a:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    220c:	98 2f       	mov	r25, r24
    220e:	9f 71       	andi	r25, 0x1F	; 31
    2210:	90 66       	ori	r25, 0x60	; 96
    2212:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2216:	eb e7       	ldi	r30, 0x7B	; 123
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	20 81       	ld	r18, Z
    221c:	80 72       	andi	r24, 0x20	; 32
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	95 95       	asr	r25
    2222:	87 95       	ror	r24
    2224:	95 95       	asr	r25
    2226:	87 95       	ror	r24
    2228:	92 2f       	mov	r25, r18
    222a:	9f 7d       	andi	r25, 0xDF	; 223
    222c:	89 2b       	or	r24, r25
    222e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    2230:	ea e7       	ldi	r30, 0x7A	; 122
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 81       	ld	r24, Z
    2236:	80 64       	ori	r24, 0x40	; 64
    2238:	80 83       	st	Z, r24
    223a:	b5 c0       	rjmp	.+362    	; 0x23a6 <__stack+0x1a7>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    223c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2240:	80 38       	cpi	r24, 0x80	; 128
    2242:	09 f4       	brne	.+2      	; 0x2246 <__stack+0x47>
    2244:	b0 c0       	rjmp	.+352    	; 0x23a6 <__stack+0x1a7>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    2246:	84 b3       	in	r24, 0x14	; 20
    2248:	87 60       	ori	r24, 0x07	; 7
    224a:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    224c:	84 b3       	in	r24, 0x14	; 20
    224e:	8b 7f       	andi	r24, 0xFB	; 251
    2250:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    2252:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    2256:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2258:	e2 e0       	ldi	r30, 0x02	; 2
    225a:	ea 95       	dec	r30
    225c:	f1 f7       	brne	.-4      	; 0x225a <__stack+0x5b>
    225e:	00 c0       	rjmp	.+0      	; 0x2260 <__stack+0x61>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2260:	84 b3       	in	r24, 0x14	; 20
    2262:	84 60       	ori	r24, 0x04	; 4
    2264:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    2266:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2268:	e1 e4       	ldi	r30, 0x41	; 65
    226a:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    226c:	83 81       	ldd	r24, Z+3	; 0x03
    226e:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2270:	84 81       	ldd	r24, Z+4	; 0x04
    2272:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    2274:	84 b3       	in	r24, 0x14	; 20
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    227a:	81 81       	ldd	r24, Z+1	; 0x01
    227c:	82 2b       	or	r24, r18
    227e:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2280:	85 81       	ldd	r24, Z+5	; 0x05
    2282:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    2284:	86 81       	ldd	r24, Z+6	; 0x06
    2286:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2288:	80 b1       	in	r24, 0x00	; 0
    228a:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    228c:	84 b3       	in	r24, 0x14	; 20
    228e:	8e 7f       	andi	r24, 0xFE	; 254
    2290:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    2292:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    2294:	91 50       	subi	r25, 0x01	; 1
    2296:	51 f7       	brne	.-44     	; 0x226c <__stack+0x6d>
	asm("nop");
    2298:	00 00       	nop
	asm("nop");
    229a:	00 00       	nop
	PIPE_CLOCK_H
    229c:	84 b3       	in	r24, 0x14	; 20
    229e:	81 60       	ori	r24, 0x01	; 1
    22a0:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    22a2:	84 b3       	in	r24, 0x14	; 20
    22a4:	8d 7f       	andi	r24, 0xFD	; 253
    22a6:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    22a8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    22ac:	82 60       	ori	r24, 0x02	; 2
    22ae:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    22b2:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    22b4:	8b b1       	in	r24, 0x0b	; 11
    22b6:	80 68       	ori	r24, 0x80	; 128
    22b8:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    22ba:	84 b3       	in	r24, 0x14	; 20
    22bc:	82 60       	ori	r24, 0x02	; 2
    22be:	84 bb       	out	0x14, r24	; 20
    22c0:	72 c0       	rjmp	.+228    	; 0x23a6 <__stack+0x1a7>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    22c2:	80 81       	ld	r24, Z
    22c4:	81 50       	subi	r24, 0x01	; 1
    22c6:	8e 3f       	cpi	r24, 0xFE	; 254
    22c8:	38 f4       	brcc	.+14     	; 0x22d8 <__stack+0xd9>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    22ca:	21 81       	ldd	r18, Z+1	; 0x01
    22cc:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    22ce:	25 30       	cpi	r18, 0x05	; 5
    22d0:	10 f0       	brcs	.+4      	; 0x22d6 <__stack+0xd7>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    22d2:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    22d4:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    22d6:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    22d8:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    22da:	9f 5f       	subi	r25, 0xFF	; 255
    22dc:	03 c0       	rjmp	.+6      	; 0x22e4 <__stack+0xe5>
    22de:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    22e0:	ef e2       	ldi	r30, 0x2F	; 47
    22e2:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    22e4:	99 30       	cpi	r25, 0x09	; 9
    22e6:	68 f3       	brcs	.-38     	; 0x22c2 <__stack+0xc3>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    22e8:	e1 e4       	ldi	r30, 0x41	; 65
    22ea:	f2 e0       	ldi	r31, 0x02	; 2
    22ec:	80 81       	ld	r24, Z
    22ee:	8f 5f       	subi	r24, 0xFF	; 255
    22f0:	80 83       	st	Z, r24
    22f2:	8a 3f       	cpi	r24, 0xFA	; 250
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <__stack+0xf9>
    22f6:	57 c0       	rjmp	.+174    	; 0x23a6 <__stack+0x1a7>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    22f8:	8f ef       	ldi	r24, 0xFF	; 255
    22fa:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    22fe:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    2300:	81 81       	ldd	r24, Z+1	; 0x01
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	81 83       	std	Z+1, r24	; 0x01
    2306:	8c 33       	cpi	r24, 0x3C	; 60
    2308:	08 f4       	brcc	.+2      	; 0x230c <__stack+0x10d>
    230a:	4d c0       	rjmp	.+154    	; 0x23a6 <__stack+0x1a7>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    230c:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    230e:	82 81       	ldd	r24, Z+2	; 0x02
    2310:	8f 5f       	subi	r24, 0xFF	; 255
    2312:	82 83       	std	Z+2, r24	; 0x02
    2314:	8c 33       	cpi	r24, 0x3C	; 60
    2316:	08 f4       	brcc	.+2      	; 0x231a <__stack+0x11b>
    2318:	46 c0       	rjmp	.+140    	; 0x23a6 <__stack+0x1a7>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    231a:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    231c:	83 81       	ldd	r24, Z+3	; 0x03
    231e:	8f 5f       	subi	r24, 0xFF	; 255
    2320:	83 83       	std	Z+3, r24	; 0x03
    2322:	84 36       	cpi	r24, 0x64	; 100
    2324:	08 f4       	brcc	.+2      	; 0x2328 <__stack+0x129>
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <__stack+0x1a7>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2328:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    232c:	3c c0       	rjmp	.+120    	; 0x23a6 <__stack+0x1a7>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    232e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2332:	80 38       	cpi	r24, 0x80	; 128
    2334:	c1 f1       	breq	.+112    	; 0x23a6 <__stack+0x1a7>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    2336:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
    233a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    233e:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2340:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    2342:	09 e4       	ldi	r16, 0x49	; 73
    2344:	12 e0       	ldi	r17, 0x02	; 2
    2346:	2c c0       	rjmp	.+88     	; 0x23a0 <__stack+0x1a1>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2348:	f8 01       	movw	r30, r16
    234a:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    234c:	83 81       	ldd	r24, Z+3	; 0x03
    234e:	9c 2f       	mov	r25, r28
    2350:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2352:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    2354:	84 81       	ldd	r24, Z+4	; 0x04
    2356:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2358:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    235a:	25 81       	ldd	r18, Z+5	; 0x05
    235c:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    235e:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2360:	86 81       	ldd	r24, Z+6	; 0x06
    2362:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    2364:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    2366:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2368:	cd 23       	and	r28, r29
    236a:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    236c:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    236e:	8d 2f       	mov	r24, r29
    2370:	80 95       	com	r24
    2372:	8c 23       	and	r24, r28
    2374:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2376:	21 f0       	breq	.+8      	; 0x2380 <__stack+0x181>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2378:	9f 2d       	mov	r25, r15
    237a:	90 62       	ori	r25, 0x20	; 32
    237c:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2380:	c0 95       	com	r28
    2382:	cd 23       	and	r28, r29
    2384:	8c 2f       	mov	r24, r28
    2386:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2388:	19 f0       	breq	.+6      	; 0x2390 <__stack+0x191>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    238a:	9f 2d       	mov	r25, r15
    238c:	0e 94 54 2d 	call	0x5aa8	; 0x5aa8 <pipeMsgPush>
		}
		curPipe++;
    2390:	08 5f       	subi	r16, 0xF8	; 248
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    2394:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2398:	81 60       	ori	r24, 0x01	; 1
    239a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    239e:	f3 94       	inc	r15
    23a0:	ff e1       	ldi	r31, 0x1F	; 31
    23a2:	ff 15       	cp	r31, r15
    23a4:	88 f6       	brcc	.-94     	; 0x2348 <__stack+0x149>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    23a6:	85 b1       	in	r24, 0x05	; 5
    23a8:	8f 77       	andi	r24, 0x7F	; 127
    23aa:	85 b9       	out	0x05, r24	; 5

}
    23ac:	ff 91       	pop	r31
    23ae:	ef 91       	pop	r30
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	bf 91       	pop	r27
    23b6:	af 91       	pop	r26
    23b8:	9f 91       	pop	r25
    23ba:	8f 91       	pop	r24
    23bc:	7f 91       	pop	r23
    23be:	6f 91       	pop	r22
    23c0:	5f 91       	pop	r21
    23c2:	4f 91       	pop	r20
    23c4:	3f 91       	pop	r19
    23c6:	2f 91       	pop	r18
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	0f 90       	pop	r0
    23d2:	0b be       	out	0x3b, r0	; 59
    23d4:	0f 90       	pop	r0
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	0f 90       	pop	r0
    23da:	1f 90       	pop	r1
    23dc:	18 95       	reti

000023de <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    23de:	e8 2f       	mov	r30, r24
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	ee 0f       	add	r30, r30
    23e8:	ff 1f       	adc	r31, r31
    23ea:	ee 0f       	add	r30, r30
    23ec:	ff 1f       	adc	r31, r31
    23ee:	e7 5b       	subi	r30, 0xB7	; 183
    23f0:	fd 4f       	sbci	r31, 0xFD	; 253
    23f2:	60 95       	com	r22
    23f4:	81 81       	ldd	r24, Z+1	; 0x01
    23f6:	68 23       	and	r22, r24
    23f8:	61 83       	std	Z+1, r22	; 0x01
    23fa:	08 95       	ret

000023fc <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    23fc:	e8 2f       	mov	r30, r24
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	ee 0f       	add	r30, r30
    2402:	ff 1f       	adc	r31, r31
    2404:	ee 0f       	add	r30, r30
    2406:	ff 1f       	adc	r31, r31
    2408:	ee 0f       	add	r30, r30
    240a:	ff 1f       	adc	r31, r31
    240c:	e7 5b       	subi	r30, 0xB7	; 183
    240e:	fd 4f       	sbci	r31, 0xFD	; 253
    2410:	81 81       	ldd	r24, Z+1	; 0x01
    2412:	68 2b       	or	r22, r24
    2414:	61 83       	std	Z+1, r22	; 0x01
    2416:	08 95       	ret

00002418 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    241c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    241e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    2420:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    2422:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    2424:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    2426:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    2428:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    242c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    2430:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    2434:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    2438:	8a b1       	in	r24, 0x0a	; 10
    243a:	80 68       	ori	r24, 0x80	; 128
    243c:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    243e:	8b b1       	in	r24, 0x0b	; 11
    2440:	8f 77       	andi	r24, 0x7F	; 127
    2442:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    2444:	84 b1       	in	r24, 0x04	; 4
    2446:	80 64       	ori	r24, 0x40	; 64
    2448:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    244a:	85 b1       	in	r24, 0x05	; 5
    244c:	8f 7b       	andi	r24, 0xBF	; 191
    244e:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2450:	84 b1       	in	r24, 0x04	; 4
    2452:	80 63       	ori	r24, 0x30	; 48
    2454:	84 b9       	out	0x04, r24	; 4
    2456:	08 95       	ret

00002458 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2458:	88 23       	and	r24, r24
    245a:	34 f4       	brge	.+12     	; 0x2468 <lcd_write_nibble+0x10>
    245c:	e2 e0       	ldi	r30, 0x02	; 2
    245e:	f1 e0       	ldi	r31, 0x01	; 1
    2460:	90 81       	ld	r25, Z
    2462:	90 61       	ori	r25, 0x10	; 16
    2464:	90 83       	st	Z, r25
    2466:	05 c0       	rjmp	.+10     	; 0x2472 <lcd_write_nibble+0x1a>
    2468:	e2 e0       	ldi	r30, 0x02	; 2
    246a:	f1 e0       	ldi	r31, 0x01	; 1
    246c:	90 81       	ld	r25, Z
    246e:	9f 7e       	andi	r25, 0xEF	; 239
    2470:	90 83       	st	Z, r25
    2472:	86 ff       	sbrs	r24, 6
    2474:	06 c0       	rjmp	.+12     	; 0x2482 <lcd_write_nibble+0x2a>
    2476:	e2 e0       	ldi	r30, 0x02	; 2
    2478:	f1 e0       	ldi	r31, 0x01	; 1
    247a:	90 81       	ld	r25, Z
    247c:	98 60       	ori	r25, 0x08	; 8
    247e:	90 83       	st	Z, r25
    2480:	05 c0       	rjmp	.+10     	; 0x248c <lcd_write_nibble+0x34>
    2482:	e2 e0       	ldi	r30, 0x02	; 2
    2484:	f1 e0       	ldi	r31, 0x01	; 1
    2486:	90 81       	ld	r25, Z
    2488:	97 7f       	andi	r25, 0xF7	; 247
    248a:	90 83       	st	Z, r25
    248c:	85 ff       	sbrs	r24, 5
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <lcd_write_nibble+0x40>
    2490:	9e b1       	in	r25, 0x0e	; 14
    2492:	98 60       	ori	r25, 0x08	; 8
    2494:	9e b9       	out	0x0e, r25	; 14
    2496:	03 c0       	rjmp	.+6      	; 0x249e <lcd_write_nibble+0x46>
    2498:	9e b1       	in	r25, 0x0e	; 14
    249a:	97 7f       	andi	r25, 0xF7	; 247
    249c:	9e b9       	out	0x0e, r25	; 14
    249e:	84 ff       	sbrs	r24, 4
    24a0:	04 c0       	rjmp	.+8      	; 0x24aa <lcd_write_nibble+0x52>
    24a2:	84 b3       	in	r24, 0x14	; 20
    24a4:	80 62       	ori	r24, 0x20	; 32
    24a6:	84 bb       	out	0x14, r24	; 20
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <lcd_write_nibble+0x58>
    24aa:	84 b3       	in	r24, 0x14	; 20
    24ac:	8f 7d       	andi	r24, 0xDF	; 223
    24ae:	84 bb       	out	0x14, r24	; 20
    24b0:	e2 e0       	ldi	r30, 0x02	; 2
    24b2:	f1 e0       	ldi	r31, 0x01	; 1
    24b4:	80 81       	ld	r24, Z
    24b6:	80 64       	ori	r24, 0x40	; 64
    24b8:	80 83       	st	Z, r24
    24ba:	85 e0       	ldi	r24, 0x05	; 5
    24bc:	8a 95       	dec	r24
    24be:	f1 f7       	brne	.-4      	; 0x24bc <lcd_write_nibble+0x64>
    24c0:	00 00       	nop
    24c2:	80 81       	ld	r24, Z
    24c4:	8f 7b       	andi	r24, 0xBF	; 191
    24c6:	80 83       	st	Z, r24
    24c8:	85 e0       	ldi	r24, 0x05	; 5
    24ca:	8a 95       	dec	r24
    24cc:	f1 f7       	brne	.-4      	; 0x24ca <lcd_write_nibble+0x72>
    24ce:	00 00       	nop
    24d0:	08 95       	ret

000024d2 <lcd_write_character>:
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	d8 2f       	mov	r29, r24
    24d8:	c5 b1       	in	r28, 0x05	; 5
    24da:	c0 73       	andi	r28, 0x30	; 48
    24dc:	85 b1       	in	r24, 0x05	; 5
    24de:	8f 7c       	andi	r24, 0xCF	; 207
    24e0:	80 61       	ori	r24, 0x10	; 16
    24e2:	85 b9       	out	0x05, r24	; 5
    24e4:	e2 e0       	ldi	r30, 0x02	; 2
    24e6:	f1 e0       	ldi	r31, 0x01	; 1
    24e8:	80 81       	ld	r24, Z
    24ea:	80 62       	ori	r24, 0x20	; 32
    24ec:	80 83       	st	Z, r24
    24ee:	80 81       	ld	r24, Z
    24f0:	8f 7b       	andi	r24, 0xBF	; 191
    24f2:	80 83       	st	Z, r24
    24f4:	8d 2f       	mov	r24, r29
    24f6:	b0 df       	rcall	.-160    	; 0x2458 <lcd_write_nibble>
    24f8:	8d 2f       	mov	r24, r29
    24fa:	82 95       	swap	r24
    24fc:	80 7f       	andi	r24, 0xF0	; 240
    24fe:	ac df       	rcall	.-168    	; 0x2458 <lcd_write_nibble>
    2500:	8f ef       	ldi	r24, 0xFF	; 255
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <lcd_write_character+0x32>
    2508:	00 c0       	rjmp	.+0      	; 0x250a <lcd_write_character+0x38>
    250a:	00 00       	nop
    250c:	85 b1       	in	r24, 0x05	; 5
    250e:	80 73       	andi	r24, 0x30	; 48
    2510:	c8 2b       	or	r28, r24
    2512:	c5 b9       	out	0x05, r28	; 5
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	08 95       	ret

0000251a <lcd_write_command>:
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	d8 2f       	mov	r29, r24
    2520:	c5 b1       	in	r28, 0x05	; 5
    2522:	c0 73       	andi	r28, 0x30	; 48
    2524:	85 b1       	in	r24, 0x05	; 5
    2526:	8f 7c       	andi	r24, 0xCF	; 207
    2528:	80 61       	ori	r24, 0x10	; 16
    252a:	85 b9       	out	0x05, r24	; 5
    252c:	e2 e0       	ldi	r30, 0x02	; 2
    252e:	f1 e0       	ldi	r31, 0x01	; 1
    2530:	80 81       	ld	r24, Z
    2532:	8f 7d       	andi	r24, 0xDF	; 223
    2534:	80 83       	st	Z, r24
    2536:	80 81       	ld	r24, Z
    2538:	8f 7b       	andi	r24, 0xBF	; 191
    253a:	80 83       	st	Z, r24
    253c:	8d 2f       	mov	r24, r29
    253e:	8c df       	rcall	.-232    	; 0x2458 <lcd_write_nibble>
    2540:	8d 2f       	mov	r24, r29
    2542:	82 95       	swap	r24
    2544:	80 7f       	andi	r24, 0xF0	; 240
    2546:	88 df       	rcall	.-240    	; 0x2458 <lcd_write_nibble>
    2548:	d1 50       	subi	r29, 0x01	; 1
    254a:	d2 30       	cpi	r29, 0x02	; 2
    254c:	38 f4       	brcc	.+14     	; 0x255c <lcd_write_command+0x42>
    254e:	8f e0       	ldi	r24, 0x0F	; 15
    2550:	97 e2       	ldi	r25, 0x27	; 39
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <lcd_write_command+0x38>
    2556:	00 c0       	rjmp	.+0      	; 0x2558 <lcd_write_command+0x3e>
    2558:	00 00       	nop
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <lcd_write_command+0x4e>
    255c:	8f ef       	ldi	r24, 0xFF	; 255
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <lcd_write_command+0x46>
    2564:	00 c0       	rjmp	.+0      	; 0x2566 <lcd_write_command+0x4c>
    2566:	00 00       	nop
    2568:	85 b1       	in	r24, 0x05	; 5
    256a:	80 73       	andi	r24, 0x30	; 48
    256c:	c8 2b       	or	r28, r24
    256e:	c5 b9       	out	0x05, r28	; 5
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	08 95       	ret

00002576 <lcd_init>:
    2576:	cf 93       	push	r28
    2578:	c5 b1       	in	r28, 0x05	; 5
    257a:	c0 73       	andi	r28, 0x30	; 48
    257c:	85 b1       	in	r24, 0x05	; 5
    257e:	8f 7c       	andi	r24, 0xCF	; 207
    2580:	80 61       	ori	r24, 0x10	; 16
    2582:	85 b9       	out	0x05, r24	; 5
    2584:	e1 e0       	ldi	r30, 0x01	; 1
    2586:	f1 e0       	ldi	r31, 0x01	; 1
    2588:	80 81       	ld	r24, Z
    258a:	80 61       	ori	r24, 0x10	; 16
    258c:	80 83       	st	Z, r24
    258e:	80 81       	ld	r24, Z
    2590:	88 60       	ori	r24, 0x08	; 8
    2592:	80 83       	st	Z, r24
    2594:	8d b1       	in	r24, 0x0d	; 13
    2596:	88 60       	ori	r24, 0x08	; 8
    2598:	8d b9       	out	0x0d, r24	; 13
    259a:	83 b3       	in	r24, 0x13	; 19
    259c:	80 62       	ori	r24, 0x20	; 32
    259e:	83 bb       	out	0x13, r24	; 19
    25a0:	80 81       	ld	r24, Z
    25a2:	80 64       	ori	r24, 0x40	; 64
    25a4:	80 83       	st	Z, r24
    25a6:	80 81       	ld	r24, Z
    25a8:	80 62       	ori	r24, 0x20	; 32
    25aa:	80 83       	st	Z, r24
    25ac:	2f ef       	ldi	r18, 0xFF	; 255
    25ae:	81 ee       	ldi	r24, 0xE1	; 225
    25b0:	94 e0       	ldi	r25, 0x04	; 4
    25b2:	21 50       	subi	r18, 0x01	; 1
    25b4:	80 40       	sbci	r24, 0x00	; 0
    25b6:	90 40       	sbci	r25, 0x00	; 0
    25b8:	e1 f7       	brne	.-8      	; 0x25b2 <lcd_init+0x3c>
    25ba:	00 c0       	rjmp	.+0      	; 0x25bc <lcd_init+0x46>
    25bc:	00 00       	nop
    25be:	e2 e0       	ldi	r30, 0x02	; 2
    25c0:	f1 e0       	ldi	r31, 0x01	; 1
    25c2:	80 81       	ld	r24, Z
    25c4:	8f 7d       	andi	r24, 0xDF	; 223
    25c6:	80 83       	st	Z, r24
    25c8:	80 81       	ld	r24, Z
    25ca:	8f 7b       	andi	r24, 0xBF	; 191
    25cc:	80 83       	st	Z, r24
    25ce:	80 e3       	ldi	r24, 0x30	; 48
    25d0:	43 df       	rcall	.-378    	; 0x2458 <lcd_write_nibble>
    25d2:	8f e1       	ldi	r24, 0x1F	; 31
    25d4:	9e e4       	ldi	r25, 0x4E	; 78
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <lcd_init+0x60>
    25da:	00 c0       	rjmp	.+0      	; 0x25dc <lcd_init+0x66>
    25dc:	00 00       	nop
    25de:	80 e3       	ldi	r24, 0x30	; 48
    25e0:	3b df       	rcall	.-394    	; 0x2458 <lcd_write_nibble>
    25e2:	8f e1       	ldi	r24, 0x1F	; 31
    25e4:	9e e4       	ldi	r25, 0x4E	; 78
    25e6:	01 97       	sbiw	r24, 0x01	; 1
    25e8:	f1 f7       	brne	.-4      	; 0x25e6 <lcd_init+0x70>
    25ea:	00 c0       	rjmp	.+0      	; 0x25ec <lcd_init+0x76>
    25ec:	00 00       	nop
    25ee:	80 e3       	ldi	r24, 0x30	; 48
    25f0:	33 df       	rcall	.-410    	; 0x2458 <lcd_write_nibble>
    25f2:	8f e1       	ldi	r24, 0x1F	; 31
    25f4:	9e e4       	ldi	r25, 0x4E	; 78
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <lcd_init+0x80>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <lcd_init+0x86>
    25fc:	00 00       	nop
    25fe:	88 e2       	ldi	r24, 0x28	; 40
    2600:	2b df       	rcall	.-426    	; 0x2458 <lcd_write_nibble>
    2602:	8f ef       	ldi	r24, 0xFF	; 255
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <lcd_init+0x90>
    260a:	00 c0       	rjmp	.+0      	; 0x260c <lcd_init+0x96>
    260c:	00 00       	nop
    260e:	88 e2       	ldi	r24, 0x28	; 40
    2610:	84 df       	rcall	.-248    	; 0x251a <lcd_write_command>
    2612:	88 e0       	ldi	r24, 0x08	; 8
    2614:	82 df       	rcall	.-252    	; 0x251a <lcd_write_command>
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	80 df       	rcall	.-256    	; 0x251a <lcd_write_command>
    261a:	86 e0       	ldi	r24, 0x06	; 6
    261c:	7e df       	rcall	.-260    	; 0x251a <lcd_write_command>
    261e:	8c e0       	ldi	r24, 0x0C	; 12
    2620:	7c df       	rcall	.-264    	; 0x251a <lcd_write_command>
    2622:	85 b1       	in	r24, 0x05	; 5
    2624:	80 73       	andi	r24, 0x30	; 48
    2626:	c8 2b       	or	r28, r24
    2628:	c5 b9       	out	0x05, r28	; 5
    262a:	cf 91       	pop	r28
    262c:	08 95       	ret

0000262e <lcd_goto>:
    262e:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    2632:	80 58       	subi	r24, 0x80	; 128
    2634:	72 cf       	rjmp	.-284    	; 0x251a <lcd_write_command>
    2636:	08 95       	ret

00002638 <lcd_clrscr>:
    2638:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	6d df       	rcall	.-294    	; 0x251a <lcd_write_command>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	e8 e5       	ldi	r30, 0x58	; 88
    2644:	f3 e0       	ldi	r31, 0x03	; 3
    2646:	04 c0       	rjmp	.+8      	; 0x2650 <lcd_clrscr+0x18>
    2648:	90 e2       	ldi	r25, 0x20	; 32
    264a:	90 83       	st	Z, r25
    264c:	8f 5f       	subi	r24, 0xFF	; 255
    264e:	31 96       	adiw	r30, 0x01	; 1
    2650:	80 35       	cpi	r24, 0x50	; 80
    2652:	d0 f3       	brcs	.-12     	; 0x2648 <lcd_clrscr+0x10>
    2654:	08 95       	ret

00002656 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    2656:	84 31       	cpi	r24, 0x14	; 20
    2658:	98 f0       	brcs	.+38     	; 0x2680 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    265a:	90 ec       	ldi	r25, 0xC0	; 192
    265c:	98 0f       	add	r25, r24
    265e:	94 31       	cpi	r25, 0x14	; 20
    2660:	10 f4       	brcc	.+4      	; 0x2666 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    2662:	8c 52       	subi	r24, 0x2C	; 44
    2664:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    2666:	9c ee       	ldi	r25, 0xEC	; 236
    2668:	98 0f       	add	r25, r24
    266a:	94 31       	cpi	r25, 0x14	; 20
    266c:	10 f4       	brcc	.+4      	; 0x2672 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    266e:	8c 5e       	subi	r24, 0xEC	; 236
    2670:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    2672:	9c ea       	ldi	r25, 0xAC	; 172
    2674:	98 0f       	add	r25, r24
    2676:	94 31       	cpi	r25, 0x14	; 20
    2678:	10 f4       	brcc	.+4      	; 0x267e <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    267a:	88 51       	subi	r24, 0x18	; 24
    267c:	08 95       	ret
	}
	return 0xFF;
    267e:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    2680:	08 95       	ret

00002682 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    2682:	cf 93       	push	r28
    2684:	df 93       	push	r29
    2686:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    2688:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    268c:	8c 2f       	mov	r24, r28
    268e:	e3 df       	rcall	.-58     	; 0x2656 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2690:	8f 3f       	cpi	r24, 0xFF	; 255
    2692:	31 f1       	breq	.+76     	; 0x26e0 <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    2694:	d1 3a       	cpi	r29, 0xA1	; 161
    2696:	81 f0       	breq	.+32     	; 0x26b8 <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    2698:	d0 38       	cpi	r29, 0x80	; 128
    269a:	81 f0       	breq	.+32     	; 0x26bc <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    269c:	d5 3a       	cpi	r29, 0xA5	; 165
    269e:	81 f0       	breq	.+32     	; 0x26c0 <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    26a0:	da 30       	cpi	r29, 0x0A	; 10
    26a2:	81 f0       	breq	.+32     	; 0x26c4 <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    26a4:	d2 3e       	cpi	r29, 0xE2	; 226
    26a6:	81 f0       	breq	.+32     	; 0x26c8 <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    26a8:	d5 3f       	cpi	r29, 0xF5	; 245
    26aa:	81 f0       	breq	.+32     	; 0x26cc <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    26ac:	df 3e       	cpi	r29, 0xEF	; 239
    26ae:	81 f0       	breq	.+32     	; 0x26d0 <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    26b0:	d1 3e       	cpi	r29, 0xE1	; 225
    26b2:	81 f0       	breq	.+32     	; 0x26d4 <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    26b4:	9d 2f       	mov	r25, r29
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    26b8:	90 e2       	ldi	r25, 0x20	; 32
    26ba:	0d c0       	rjmp	.+26     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    26bc:	90 e2       	ldi	r25, 0x20	; 32
    26be:	0b c0       	rjmp	.+22     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    26c0:	94 e1       	ldi	r25, 0x14	; 20
    26c2:	09 c0       	rjmp	.+18     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    26c4:	95 e1       	ldi	r25, 0x15	; 21
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    26c8:	93 e1       	ldi	r25, 0x13	; 19
    26ca:	05 c0       	rjmp	.+10     	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    26cc:	92 e1       	ldi	r25, 0x12	; 18
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    26d0:	91 e1       	ldi	r25, 0x11	; 17
    26d2:	01 c0       	rjmp	.+2      	; 0x26d6 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    26d4:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    26d6:	e8 2f       	mov	r30, r24
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	e8 5a       	subi	r30, 0xA8	; 168
    26dc:	fc 4f       	sbci	r31, 0xFC	; 252
    26de:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    26e0:	cf 5f       	subi	r28, 0xFF	; 255
    26e2:	cf 77       	andi	r28, 0x7F	; 127
    26e4:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    26e8:	8d 2f       	mov	r24, r29
    26ea:	f3 de       	rcall	.-538    	; 0x24d2 <lcd_write_character>
}
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    26f2:	cf 93       	push	r28
    26f4:	df 93       	push	r29
    26f6:	fc 01       	movw	r30, r24
	if (s != NULL){
    26f8:	89 2b       	or	r24, r25
    26fa:	19 f4       	brne	.+6      	; 0x2702 <lcd_puts+0x10>
    26fc:	07 c0       	rjmp	.+14     	; 0x270c <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    26fe:	c1 df       	rcall	.-126    	; 0x2682 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    2700:	fe 01       	movw	r30, r28
    2702:	ef 01       	movw	r28, r30
    2704:	21 96       	adiw	r28, 0x01	; 1
    2706:	80 81       	ld	r24, Z
    2708:	81 11       	cpse	r24, r1
    270a:	f9 cf       	rjmp	.-14     	; 0x26fe <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	08 95       	ret

00002712 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    2718:	89 2b       	or	r24, r25
    271a:	19 f4       	brne	.+6      	; 0x2722 <lcd_puts_P+0x10>
    271c:	07 c0       	rjmp	.+14     	; 0x272c <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    271e:	b1 df       	rcall	.-158    	; 0x2682 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2720:	fe 01       	movw	r30, r28
    2722:	ef 01       	movw	r28, r30
    2724:	21 96       	adiw	r28, 0x01	; 1
    2726:	84 91       	lpm	r24, Z
    2728:	81 11       	cpse	r24, r1
    272a:	f9 cf       	rjmp	.-14     	; 0x271e <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2732:	82 ed       	ldi	r24, 0xD2	; 210
    2734:	93 e0       	ldi	r25, 0x03	; 3
    2736:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    273a:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    273e:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2742:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2746:	08 95       	ret

00002748 <log_count>:
    2748:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    274c:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2750:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    2754:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    2758:	82 17       	cp	r24, r18
    275a:	93 07       	cpc	r25, r19
    275c:	48 f0       	brcs	.+18     	; 0x2770 <log_count+0x28>
    275e:	82 1b       	sub	r24, r18
    2760:	93 0b       	sbc	r25, r19
    2762:	95 95       	asr	r25
    2764:	87 95       	ror	r24
    2766:	9d ec       	ldi	r25, 0xCD	; 205
    2768:	89 9f       	mul	r24, r25
    276a:	80 2d       	mov	r24, r0
    276c:	11 24       	eor	r1, r1
    276e:	08 95       	ret
    2770:	80 57       	subi	r24, 0x70	; 112
    2772:	9e 4f       	sbci	r25, 0xFE	; 254
    2774:	82 1b       	sub	r24, r18
    2776:	93 0b       	sbc	r25, r19
    2778:	95 95       	asr	r25
    277a:	87 95       	ror	r24
    277c:	9d ec       	ldi	r25, 0xCD	; 205
    277e:	89 9f       	mul	r24, r25
    2780:	80 2d       	mov	r24, r0
    2782:	11 24       	eor	r1, r1
    2784:	08 95       	ret

00002786 <log_getLog>:
    2786:	cf 93       	push	r28
    2788:	c8 2f       	mov	r28, r24
    278a:	de df       	rcall	.-68     	; 0x2748 <log_count>
    278c:	c8 17       	cp	r28, r24
    278e:	f8 f4       	brcc	.+62     	; 0x27ce <log_getLog+0x48>
    2790:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    2794:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    2798:	8c 2f       	mov	r24, r28
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9c 01       	movw	r18, r24
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	88 0f       	add	r24, r24
    27a4:	99 1f       	adc	r25, r25
    27a6:	88 0f       	add	r24, r24
    27a8:	99 1f       	adc	r25, r25
    27aa:	88 0f       	add	r24, r24
    27ac:	99 1f       	adc	r25, r25
    27ae:	28 0f       	add	r18, r24
    27b0:	39 1f       	adc	r19, r25
    27b2:	ca 01       	movw	r24, r20
    27b4:	82 0f       	add	r24, r18
    27b6:	93 1f       	adc	r25, r19
    27b8:	65 e0       	ldi	r22, 0x05	; 5
    27ba:	88 35       	cpi	r24, 0x58	; 88
    27bc:	96 07       	cpc	r25, r22
    27be:	49 f0       	breq	.+18     	; 0x27d2 <log_getLog+0x4c>
    27c0:	40 f0       	brcs	.+16     	; 0x27d2 <log_getLog+0x4c>
    27c2:	20 59       	subi	r18, 0x90	; 144
    27c4:	31 40       	sbci	r19, 0x01	; 1
    27c6:	ca 01       	movw	r24, r20
    27c8:	82 0f       	add	r24, r18
    27ca:	93 1f       	adc	r25, r19
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <log_getLog+0x4c>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	cf 91       	pop	r28
    27d4:	08 95       	ret

000027d6 <log_getErrorText>:
    27d6:	d7 df       	rcall	.-82     	; 0x2786 <log_getLog>
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	f1 f1       	breq	.+124    	; 0x2858 <log_getErrorText+0x82>
    27dc:	fc 01       	movw	r30, r24
    27de:	36 81       	ldd	r19, Z+6	; 0x06
    27e0:	67 81       	ldd	r22, Z+7	; 0x07
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	34 c0       	rjmp	.+104    	; 0x284e <log_getErrorText+0x78>
    27e6:	42 2f       	mov	r20, r18
    27e8:	50 e0       	ldi	r21, 0x00	; 0
    27ea:	fa 01       	movw	r30, r20
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	cf 01       	movw	r24, r30
    27f2:	88 0f       	add	r24, r24
    27f4:	99 1f       	adc	r25, r25
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	88 0f       	add	r24, r24
    27fc:	99 1f       	adc	r25, r25
    27fe:	e8 0f       	add	r30, r24
    2800:	f9 1f       	adc	r31, r25
    2802:	e6 59       	subi	r30, 0x96	; 150
    2804:	fe 4f       	sbci	r31, 0xFE	; 254
    2806:	84 91       	lpm	r24, Z
    2808:	38 13       	cpse	r19, r24
    280a:	20 c0       	rjmp	.+64     	; 0x284c <log_getErrorText+0x76>
    280c:	fa 01       	movw	r30, r20
    280e:	ee 0f       	add	r30, r30
    2810:	ff 1f       	adc	r31, r31
    2812:	cf 01       	movw	r24, r30
    2814:	88 0f       	add	r24, r24
    2816:	99 1f       	adc	r25, r25
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	e8 0f       	add	r30, r24
    2822:	f9 1f       	adc	r31, r25
    2824:	e5 59       	subi	r30, 0x95	; 149
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	84 91       	lpm	r24, Z
    282a:	68 13       	cpse	r22, r24
    282c:	0f c0       	rjmp	.+30     	; 0x284c <log_getErrorText+0x76>
    282e:	44 0f       	add	r20, r20
    2830:	55 1f       	adc	r21, r21
    2832:	ca 01       	movw	r24, r20
    2834:	88 0f       	add	r24, r24
    2836:	99 1f       	adc	r25, r25
    2838:	88 0f       	add	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	88 0f       	add	r24, r24
    283e:	99 1f       	adc	r25, r25
    2840:	48 0f       	add	r20, r24
    2842:	59 1f       	adc	r21, r25
    2844:	ca 01       	movw	r24, r20
    2846:	84 59       	subi	r24, 0x94	; 148
    2848:	9e 4f       	sbci	r25, 0xFE	; 254
    284a:	08 95       	ret
    284c:	2f 5f       	subi	r18, 0xFF	; 255
    284e:	20 31       	cpi	r18, 0x10	; 16
    2850:	50 f2       	brcs	.-108    	; 0x27e6 <log_getErrorText+0x10>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	08 95       	ret
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	08 95       	ret

0000285e <logCheckUnreadErrorLogs>:
    285e:	cf 93       	push	r28
    2860:	73 df       	rcall	.-282    	; 0x2748 <log_count>
    2862:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    2866:	81 11       	cpse	r24, r1
    2868:	14 c0       	rjmp	.+40     	; 0x2892 <logCheckUnreadErrorLogs+0x34>
    286a:	17 c0       	rjmp	.+46     	; 0x289a <logCheckUnreadErrorLogs+0x3c>
    286c:	8c 2f       	mov	r24, r28
    286e:	8b df       	rcall	.-234    	; 0x2786 <log_getLog>
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	61 f0       	breq	.+24     	; 0x288c <logCheckUnreadErrorLogs+0x2e>
    2874:	fc 01       	movw	r30, r24
    2876:	24 81       	ldd	r18, Z+4	; 0x04
    2878:	20 32       	cpi	r18, 0x20	; 32
    287a:	51 f0       	breq	.+20     	; 0x2890 <logCheckUnreadErrorLogs+0x32>
    287c:	95 81       	ldd	r25, Z+5	; 0x05
    287e:	8c 2f       	mov	r24, r28
    2880:	95 34       	cpi	r25, 0x45	; 69
    2882:	39 f4       	brne	.+14     	; 0x2892 <logCheckUnreadErrorLogs+0x34>
    2884:	8f ef       	ldi	r24, 0xFF	; 255
    2886:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    288a:	07 c0       	rjmp	.+14     	; 0x289a <logCheckUnreadErrorLogs+0x3c>
    288c:	8c 2f       	mov	r24, r28
    288e:	01 c0       	rjmp	.+2      	; 0x2892 <logCheckUnreadErrorLogs+0x34>
    2890:	8c 2f       	mov	r24, r28
    2892:	cf ef       	ldi	r28, 0xFF	; 255
    2894:	c8 0f       	add	r28, r24
    2896:	81 11       	cpse	r24, r1
    2898:	e9 cf       	rjmp	.-46     	; 0x286c <logCheckUnreadErrorLogs+0xe>
    289a:	cf 91       	pop	r28
    289c:	08 95       	ret

0000289e <log_getShortTextFromPtr>:
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	09 f4       	brne	.+2      	; 0x28aa <log_getShortTextFromPtr+0xc>
    28a8:	7b c0       	rjmp	.+246    	; 0x29a0 <log_getShortTextFromPtr+0x102>
    28aa:	16 2f       	mov	r17, r22
    28ac:	ec 01       	movw	r28, r24
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	88 23       	and	r24, r24
    28b2:	79 f0       	breq	.+30     	; 0x28d2 <log_getShortTextFromPtr+0x34>
    28b4:	6a ea       	ldi	r22, 0xAA	; 170
    28b6:	73 e0       	ldi	r23, 0x03	; 3
    28b8:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    28bc:	bc 01       	movw	r22, r24
    28be:	6f 5f       	subi	r22, 0xFF	; 255
    28c0:	7f 4f       	sbci	r23, 0xFF	; 255
    28c2:	28 e6       	ldi	r18, 0x68	; 104
    28c4:	fc 01       	movw	r30, r24
    28c6:	20 83       	st	Z, r18
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    28ce:	dc 01       	movw	r26, r24
    28d0:	2f c0       	rjmp	.+94     	; 0x2930 <log_getShortTextFromPtr+0x92>
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	88 23       	and	r24, r24
    28d6:	79 f0       	breq	.+30     	; 0x28f6 <log_getShortTextFromPtr+0x58>
    28d8:	6a ea       	ldi	r22, 0xAA	; 170
    28da:	73 e0       	ldi	r23, 0x03	; 3
    28dc:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    28e0:	bc 01       	movw	r22, r24
    28e2:	6f 5f       	subi	r22, 0xFF	; 255
    28e4:	7f 4f       	sbci	r23, 0xFF	; 255
    28e6:	2d e6       	ldi	r18, 0x6D	; 109
    28e8:	fc 01       	movw	r30, r24
    28ea:	20 83       	st	Z, r18
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    28f2:	dc 01       	movw	r26, r24
    28f4:	1d c0       	rjmp	.+58     	; 0x2930 <log_getShortTextFromPtr+0x92>
    28f6:	6a ea       	ldi	r22, 0xAA	; 170
    28f8:	73 e0       	ldi	r23, 0x03	; 3
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    2900:	fc 01       	movw	r30, r24
    2902:	83 e7       	ldi	r24, 0x73	; 115
    2904:	80 83       	st	Z, r24
    2906:	98 81       	ld	r25, Y
    2908:	99 0f       	add	r25, r25
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <log_getShortTextFromPtr+0x74>
    290e:	99 51       	subi	r25, 0x19	; 25
    2910:	2f 5f       	subi	r18, 0xFF	; 255
    2912:	99 31       	cpi	r25, 0x19	; 25
    2914:	e0 f7       	brcc	.-8      	; 0x290e <log_getShortTextFromPtr+0x70>
    2916:	20 5d       	subi	r18, 0xD0	; 208
    2918:	21 83       	std	Z+1, r18	; 0x01
    291a:	99 0f       	add	r25, r25
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <log_getShortTextFromPtr+0x86>
    2920:	95 50       	subi	r25, 0x05	; 5
    2922:	2f 5f       	subi	r18, 0xFF	; 255
    2924:	95 30       	cpi	r25, 0x05	; 5
    2926:	e0 f7       	brcc	.-8      	; 0x2920 <log_getShortTextFromPtr+0x82>
    2928:	df 01       	movw	r26, r30
    292a:	13 96       	adiw	r26, 0x03	; 3
    292c:	20 5d       	subi	r18, 0xD0	; 208
    292e:	22 83       	std	Z+2, r18	; 0x02
    2930:	9c 81       	ldd	r25, Y+4	; 0x04
    2932:	90 34       	cpi	r25, 0x40	; 64
    2934:	51 f0       	breq	.+20     	; 0x294a <log_getShortTextFromPtr+0xac>
    2936:	90 38       	cpi	r25, 0x80	; 128
    2938:	19 f0       	breq	.+6      	; 0x2940 <log_getShortTextFromPtr+0xa2>
    293a:	90 32       	cpi	r25, 0x20	; 32
    293c:	81 f4       	brne	.+32     	; 0x295e <log_getShortTextFromPtr+0xc0>
    293e:	0a c0       	rjmp	.+20     	; 0x2954 <log_getShortTextFromPtr+0xb6>
    2940:	fd 01       	movw	r30, r26
    2942:	31 96       	adiw	r30, 0x01	; 1
    2944:	8a e2       	ldi	r24, 0x2A	; 42
    2946:	8c 93       	st	X, r24
    2948:	0e c0       	rjmp	.+28     	; 0x2966 <log_getShortTextFromPtr+0xc8>
    294a:	fd 01       	movw	r30, r26
    294c:	31 96       	adiw	r30, 0x01	; 1
    294e:	85 ea       	ldi	r24, 0xA5	; 165
    2950:	8c 93       	st	X, r24
    2952:	09 c0       	rjmp	.+18     	; 0x2966 <log_getShortTextFromPtr+0xc8>
    2954:	fd 01       	movw	r30, r26
    2956:	31 96       	adiw	r30, 0x01	; 1
    2958:	80 e2       	ldi	r24, 0x20	; 32
    295a:	8c 93       	st	X, r24
    295c:	04 c0       	rjmp	.+8      	; 0x2966 <log_getShortTextFromPtr+0xc8>
    295e:	fd 01       	movw	r30, r26
    2960:	31 96       	adiw	r30, 0x01	; 1
    2962:	8f e3       	ldi	r24, 0x3F	; 63
    2964:	8c 93       	st	X, r24
    2966:	bf 01       	movw	r22, r30
    2968:	6f 5f       	subi	r22, 0xFF	; 255
    296a:	7f 4f       	sbci	r23, 0xFF	; 255
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	80 83       	st	Z, r24
    2970:	8e 81       	ldd	r24, Y+6	; 0x06
    2972:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    2976:	bc 01       	movw	r22, r24
    2978:	8f 81       	ldd	r24, Y+7	; 0x07
    297a:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    297e:	bc 01       	movw	r22, r24
    2980:	6f 5f       	subi	r22, 0xFF	; 255
    2982:	7f 4f       	sbci	r23, 0xFF	; 255
    2984:	2d e2       	ldi	r18, 0x2D	; 45
    2986:	fc 01       	movw	r30, r24
    2988:	20 83       	st	Z, r18
    298a:	88 85       	ldd	r24, Y+8	; 0x08
    298c:	99 85       	ldd	r25, Y+9	; 0x09
    298e:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <putChar_long>
    2992:	fc 01       	movw	r30, r24
    2994:	10 82       	st	Z, r1
    2996:	1f 3f       	cpi	r17, 0xFF	; 255
    2998:	41 f0       	breq	.+16     	; 0x29aa <log_getShortTextFromPtr+0x10c>
    299a:	1c 83       	std	Y+4, r17	; 0x04
    299c:	60 df       	rcall	.-320    	; 0x285e <logCheckUnreadErrorLogs>
    299e:	05 c0       	rjmp	.+10     	; 0x29aa <log_getShortTextFromPtr+0x10c>
    29a0:	ea ea       	ldi	r30, 0xAA	; 170
    29a2:	f3 e0       	ldi	r31, 0x03	; 3
    29a4:	8d e2       	ldi	r24, 0x2D	; 45
    29a6:	80 83       	st	Z, r24
    29a8:	11 82       	std	Z+1, r1	; 0x01
    29aa:	8a ea       	ldi	r24, 0xAA	; 170
    29ac:	93 e0       	ldi	r25, 0x03	; 3
    29ae:	df 91       	pop	r29
    29b0:	cf 91       	pop	r28
    29b2:	1f 91       	pop	r17
    29b4:	08 95       	ret

000029b6 <log_put>:
    29b6:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    29ba:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29be:	a1 e4       	ldi	r26, 0x41	; 65
    29c0:	b2 e0       	ldi	r27, 0x02	; 2
    29c2:	9c 91       	ld	r25, X
    29c4:	90 83       	st	Z, r25
    29c6:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    29ca:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29ce:	11 96       	adiw	r26, 0x01	; 1
    29d0:	9c 91       	ld	r25, X
    29d2:	11 97       	sbiw	r26, 0x01	; 1
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    29da:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29de:	12 96       	adiw	r26, 0x02	; 2
    29e0:	9c 91       	ld	r25, X
    29e2:	12 97       	sbiw	r26, 0x02	; 2
    29e4:	92 83       	std	Z+2, r25	; 0x02
    29e6:	13 96       	adiw	r26, 0x03	; 3
    29e8:	9c 91       	ld	r25, X
    29ea:	93 83       	std	Z+3, r25	; 0x03
    29ec:	25 83       	std	Z+5, r18	; 0x05
    29ee:	86 83       	std	Z+6, r24	; 0x06
    29f0:	67 83       	std	Z+7, r22	; 0x07
    29f2:	51 87       	std	Z+9, r21	; 0x09
    29f4:	40 87       	std	Z+8, r20	; 0x08
    29f6:	80 e8       	ldi	r24, 0x80	; 128
    29f8:	84 83       	std	Z+4, r24	; 0x04
    29fa:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    29fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2a00:	81 f4       	brne	.+32     	; 0x2a22 <log_put+0x6c>
    2a02:	84 e6       	ldi	r24, 0x64	; 100
    2a04:	91 e0       	ldi	r25, 0x01	; 1
    2a06:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    2a0a:	6f ef       	ldi	r22, 0xFF	; 255
    2a0c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2a10:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a14:	44 df       	rcall	.-376    	; 0x289e <log_getShortTextFromPtr>
    2a16:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    2a1a:	8e ef       	ldi	r24, 0xFE	; 254
    2a1c:	92 e1       	ldi	r25, 0x12	; 18
    2a1e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    2a22:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2a26:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a2a:	0a 96       	adiw	r24, 0x0a	; 10
    2a2c:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2a30:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2a34:	88 55       	subi	r24, 0x58	; 88
    2a36:	95 40       	sbci	r25, 0x05	; 5
    2a38:	39 f0       	breq	.+14     	; 0x2a48 <log_put+0x92>
    2a3a:	30 f0       	brcs	.+12     	; 0x2a48 <log_put+0x92>
    2a3c:	82 ed       	ldi	r24, 0xD2	; 210
    2a3e:	93 e0       	ldi	r25, 0x03	; 3
    2a40:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2a44:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2a48:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    2a4c:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a50:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    2a54:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	79 f4       	brne	.+30     	; 0x2a7c <log_put+0xc6>
    2a5e:	0a 96       	adiw	r24, 0x0a	; 10
    2a60:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2a64:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2a68:	88 55       	subi	r24, 0x58	; 88
    2a6a:	95 40       	sbci	r25, 0x05	; 5
    2a6c:	39 f0       	breq	.+14     	; 0x2a7c <log_put+0xc6>
    2a6e:	30 f0       	brcs	.+12     	; 0x2a7c <log_put+0xc6>
    2a70:	82 ed       	ldi	r24, 0xD2	; 210
    2a72:	93 e0       	ldi	r25, 0x03	; 3
    2a74:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2a78:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2a7c:	08 95       	ret

00002a7e <log_putError>:
    2a7e:	25 e4       	ldi	r18, 0x45	; 69
    2a80:	9a df       	rcall	.-204    	; 0x29b6 <log_put>
    2a82:	8f ef       	ldi	r24, 0xFF	; 255
    2a84:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    2a88:	08 95       	ret

00002a8a <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2a8a:	cf 93       	push	r28
    2a8c:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2a8e:	7b de       	rcall	.-778    	; 0x2786 <log_getLog>
	if (pLogEntry != NULL){
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2a94:	6c 2f       	mov	r22, r28
    2a96:	03 df       	rcall	.-506    	; 0x289e <log_getShortTextFromPtr>
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2a9a:	ea ea       	ldi	r30, 0xAA	; 170
    2a9c:	f3 e0       	ldi	r31, 0x03	; 3
    2a9e:	8d e2       	ldi	r24, 0x2D	; 45
    2aa0:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2aa2:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2aa4:	cf 01       	movw	r24, r30
	}
    2aa6:	cf 91       	pop	r28
    2aa8:	08 95       	ret

00002aaa <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2aaa:	b6 dc       	rcall	.-1684   	; 0x2418 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2aac:	85 b1       	in	r24, 0x05	; 5
    2aae:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();
    2ab0:	85 b9       	out	0x05, r24	; 5
    2ab2:	3f de       	rcall	.-898    	; 0x2732 <init_log>
	init_Serial0SerUSB();
    2ab4:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <init_Serial0SerUSB>
	init_message();
    2ab8:	0e 94 0d 2d 	call	0x5a1a	; 0x5a1a <init_message>
	init_HwTimer();
	init_Timers();
    2abc:	35 d8       	rcall	.-3990   	; 0x1b28 <init_HwTimer>
    2abe:	1c d8       	rcall	.-4040   	; 0x1af8 <init_Timers>
	init_ADC();
    2ac0:	42 d8       	rcall	.-3964   	; 0x1b46 <init_ADC>
	init_Pipe();
    2ac2:	6b d8       	rcall	.-3882   	; 0x1b9a <init_Pipe>
    2ac4:	0e 94 bb 35 	call	0x6b76	; 0x6b76 <init_Serial1MIDI>
	init_Serial1MIDI();
    2ac8:	90 d8       	rcall	.-3808   	; 0x1bea <init_PipeModules>
	init_PipeModules();
    2aca:	0e 94 e6 30 	call	0x61cc	; 0x61cc <init_Midi2Manual>
	init_Midi2Manual();
    2ace:	0e 94 26 31 	call	0x624c	; 0x624c <init_Manual2Midi>
	init_Manual2Midi();
    2ad2:	0e 94 9f 2d 	call	0x5b3e	; 0x5b3e <init_Midi>
	init_Midi();
    2ad6:	0e 94 18 2e 	call	0x5c30	; 0x5c30 <init_Registers>
	init_Registers();
    2ada:	0e 94 b7 31 	call	0x636e	; 0x636e <init_Manual2Module>
	init_Manual2Module();
    2ade:	0e 94 ae 2b 	call	0x575c	; 0x575c <init_SoftKeys>
	init_SoftKeys();
    2ae2:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2ae6:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	INIT_MENU
    2aea:	45 dd       	rcall	.-1398   	; 0x2576 <lcd_init>


	// BOOT MESSAGE

	lcd_init ();
    2aec:	0e 94 8f 39 	call	0x731e	; 0x731e <lcd_initCG>
	lcd_initCG();
	lcd_clrscr ();
    2af0:	a3 dd       	rcall	.-1210   	; 0x2638 <lcd_clrscr>
    2af2:	83 e4       	ldi	r24, 0x43	; 67
	lcd_goto(LCD_LINE1+3);
    2af4:	9c dd       	rcall	.-1224   	; 0x262e <lcd_goto>
    2af6:	85 ea       	ldi	r24, 0xA5	; 165
	lcd_puts_P(prog_name);
    2af8:	92 e0       	ldi	r25, 0x02	; 2
    2afa:	0b de       	rcall	.-1002   	; 0x2712 <lcd_puts_P>
    2afc:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_goto(LCD_LINE2+7);
    2afe:	97 dd       	rcall	.-1234   	; 0x262e <lcd_goto>
    2b00:	8e e9       	ldi	r24, 0x9E	; 158
    2b02:	92 e1       	ldi	r25, 0x12	; 18
	lcd_puts_P(sw_version);
    2b04:	06 de       	rcall	.-1012   	; 0x2712 <lcd_puts_P>
    2b06:	78 94       	sei
    2b08:	2f ef       	ldi	r18, 0xFF	; 255
    2b0a:	47 e9       	ldi	r20, 0x97	; 151
	sei();
    2b0c:	8a e3       	ldi	r24, 0x3A	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b0e:	21 50       	subi	r18, 0x01	; 1
    2b10:	40 40       	sbci	r20, 0x00	; 0
    2b12:	80 40       	sbci	r24, 0x00	; 0
    2b14:	e1 f7       	brne	.-8      	; 0x2b0e <main+0x64>
    2b16:	00 c0       	rjmp	.+0      	; 0x2b18 <main+0x6e>
    2b18:	00 00       	nop
    2b1a:	0e 94 4d 38 	call	0x709a	; 0x709a <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2b1e:	8c dd       	rcall	.-1256   	; 0x2638 <lcd_clrscr>
	lcd_clrscr ();
    2b20:	a8 d9       	rcall	.-3248   	; 0x1e72 <module_StartPowerOn>
    2b22:	8f ef       	ldi	r24, 0xFF	; 255

	// TURN ON POWER

	module_StartPowerOn();
    2b24:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    2b28:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2b2c:	8e ef       	ldi	r24, 0xFE	; 254

	menuNotActive = TRUE;
    2b2e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2b32:	df ef       	ldi	r29, 0xFF	; 255
    2b34:	85 b1       	in	r24, 0x05	; 5
    2b36:	8f 7c       	andi	r24, 0xCF	; 207
	module_StartPowerOn();
	MESSAGE_PIPE_HANDLING_ON

	menuNotActive = TRUE;
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2b38:	85 b9       	out	0x05, r24	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		DEBUG_OUT_MAIN
    2b3a:	20 91 fe 13 	lds	r18, 0x13FE	; 0x8013fe <serESPRxInIndex>
    2b3e:	30 91 ff 13 	lds	r19, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2b42:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    2b46:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
    2b4a:	28 17       	cp	r18, r24
    2b4c:	39 07       	cpc	r19, r25
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <main+0xa8>
    2b50:	66 c0       	rjmp	.+204    	; 0x2c1e <main+0x174>
    2b52:	0e 94 b7 38 	call	0x716e	; 0x716e <serial3SER_ESPReadRx>
    2b56:	c8 2f       	mov	r28, r24
			uint8_t esp_message = serial3SER_ESPReadRx();
    2b58:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
    2b5c:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    2b60:	8f e7       	ldi	r24, 0x7F	; 127
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2b62:	8c 0f       	add	r24, r28
    2b64:	86 30       	cpi	r24, 0x06	; 6
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2b66:	28 f4       	brcc	.+10     	; 0x2b72 <main+0xc8>
    2b68:	80 e8       	ldi	r24, 0x80	; 128
    2b6a:	8c 0f       	add	r24, r28
    2b6c:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <message_push>
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2b70:	56 c0       	rjmp	.+172    	; 0x2c1e <main+0x174>
    2b72:	c0 39       	cpi	r28, 0x90	; 144
    2b74:	09 f0       	breq	.+2      	; 0x2b78 <main+0xce>
    2b76:	53 c0       	rjmp	.+166    	; 0x2c1e <main+0x174>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2b78:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <serESPInBuffer>
    2b7c:	80 39       	cpi	r24, 0x90	; 144
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <main+0xd8>
    2b80:	4e c0       	rjmp	.+156    	; 0x2c1e <main+0x174>
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	e9 2f       	mov	r30, r25
    2b86:	09 2e       	mov	r0, r25
    2b88:	00 0c       	add	r0, r0
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2b8a:	ff 0b       	sbc	r31, r31
    2b8c:	ef 50       	subi	r30, 0x0F	; 15
    2b8e:	fc 4e       	sbci	r31, 0xEC	; 236
    2b90:	80 81       	ld	r24, Z
    2b92:	8d 33       	cpi	r24, 0x3D	; 61
    2b94:	19 f0       	breq	.+6      	; 0x2b9c <main+0xf2>
    2b96:	9f 5f       	subi	r25, 0xFF	; 255
    2b98:	98 30       	cpi	r25, 0x08	; 8
    2b9a:	a4 f3       	brlt	.-24     	; 0x2b84 <main+0xda>
							break;
						}
						i++;
    2b9c:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2b9e:	0c f0       	brlt	.+2      	; 0x2ba2 <main+0xf8>
    2ba0:	3e c0       	rjmp	.+124    	; 0x2c1e <main+0x174>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2ba2:	89 2f       	mov	r24, r25
    2ba4:	85 95       	asr	r24
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2ba8:	06 c0       	rjmp	.+12     	; 0x2bb6 <main+0x10c>
    2baa:	e2 2f       	mov	r30, r18
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	e5 5b       	subi	r30, 0xB5	; 181
							serESPMidiTmp[j] = 0;
    2bb0:	f9 4e       	sbci	r31, 0xE9	; 233
    2bb2:	10 82       	st	Z, r1
    2bb4:	2f 5f       	subi	r18, 0xFF	; 255
    2bb6:	23 30       	cpi	r18, 0x03	; 3
    2bb8:	c0 f3       	brcs	.-16     	; 0x2baa <main+0x100>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2bba:	2c c0       	rjmp	.+88     	; 0x2c14 <main+0x16a>
    2bbc:	e9 2f       	mov	r30, r25
    2bbe:	09 2e       	mov	r0, r25
    2bc0:	00 0c       	add	r0, r0
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2bc2:	ff 0b       	sbc	r31, r31
    2bc4:	ef 50       	subi	r30, 0x0F	; 15
    2bc6:	fc 4e       	sbci	r31, 0xEC	; 236
    2bc8:	30 81       	ld	r19, Z
    2bca:	20 ed       	ldi	r18, 0xD0	; 208
    2bcc:	23 0f       	add	r18, r19
    2bce:	2a 30       	cpi	r18, 0x0A	; 10
    2bd0:	10 f0       	brcs	.+4      	; 0x2bd6 <main+0x12c>
    2bd2:	27 ed       	ldi	r18, 0xD7	; 215
							if (asciiData > 9){
    2bd4:	23 0f       	add	r18, r19
    2bd6:	a2 2f       	mov	r26, r18
								asciiData = asciiData - (0x0A - 'A' + '0');
    2bd8:	af 70       	andi	r26, 0x0F	; 15
    2bda:	eb e4       	ldi	r30, 0x4B	; 75
							}
							asciiData &= 0x0F;
    2bdc:	f6 e1       	ldi	r31, 0x16	; 22
    2bde:	62 81       	ldd	r22, Z+2	; 0x02
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2be0:	20 e1       	ldi	r18, 0x10	; 16
    2be2:	62 9f       	mul	r22, r18
    2be4:	b0 01       	movw	r22, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	41 81       	ldd	r20, Z+1	; 0x01
    2bea:	24 2f       	mov	r18, r20
    2bec:	22 95       	swap	r18
    2bee:	2f 70       	andi	r18, 0x0F	; 15
    2bf0:	62 2b       	or	r22, r18
    2bf2:	62 83       	std	Z+2, r22	; 0x02
    2bf4:	20 e1       	ldi	r18, 0x10	; 16
    2bf6:	42 9f       	mul	r20, r18
    2bf8:	a0 01       	movw	r20, r0
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2bfa:	11 24       	eor	r1, r1
    2bfc:	20 81       	ld	r18, Z
    2bfe:	32 2f       	mov	r19, r18
    2c00:	32 95       	swap	r19
    2c02:	3f 70       	andi	r19, 0x0F	; 15
    2c04:	43 2b       	or	r20, r19
    2c06:	41 83       	std	Z+1, r20	; 0x01
    2c08:	40 e1       	ldi	r20, 0x10	; 16
    2c0a:	24 9f       	mul	r18, r20
    2c0c:	90 01       	movw	r18, r0
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2c0e:	11 24       	eor	r1, r1
    2c10:	2a 2b       	or	r18, r26
    2c12:	20 83       	st	Z, r18
    2c14:	91 50       	subi	r25, 0x01	; 1
    2c16:	19 16       	cp	r1, r25
    2c18:	8c f2       	brlt	.-94     	; 0x2bbc <main+0x112>
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2c1a:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <proc_ESPmidi>
    2c1e:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <message_status>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2c22:	88 23       	and	r24, r24
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <main+0x17e>
    2c26:	51 c0       	rjmp	.+162    	; 0x2cca <main+0x220>
    2c28:	85 b1       	in	r24, 0x05	; 5
    2c2a:	80 63       	ori	r24, 0x30	; 48
    2c2c:	85 b9       	out	0x05, r24	; 5
			DEBUG_OUT_MENU
    2c2e:	0e 94 28 2d 	call	0x5a50	; 0x5a50 <message_get>
    2c32:	c8 2f       	mov	r28, r24
			uint8_t keyMessage = message_get();
    2c34:	86 38       	cpi	r24, 0x86	; 134
    2c36:	b9 f4       	brne	.+46     	; 0x2c66 <main+0x1bc>
    2c38:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
				// PANIC BUTTON
				midiSendAllNotesOff();
    2c3c:	0e 94 55 33 	call	0x66aa	; 0x66aa <midi_AllManualsOff>
				midi_AllManualsOff();
    2c40:	0e 94 b6 30 	call	0x616c	; 0x616c <midi_resetRegisters>
				midi_resetRegisters();
    2c44:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <midi_CouplerReset>
				midi_CouplerReset();
    2c48:	74 dd       	rcall	.-1304   	; 0x2732 <init_log>
    2c4a:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
				init_log(); // clear log V 0.70
    2c4e:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    2c52:	85 b1       	in	r24, 0x05	; 5
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    2c54:	80 64       	ori	r24, 0x40	; 64
    2c56:	85 b9       	out	0x05, r24	; 5
				POWER_ON
    2c58:	83 e1       	ldi	r24, 0x13	; 19
    2c5a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    2c5e:	8a e8       	ldi	r24, 0x8A	; 138
    2c60:	92 e0       	ldi	r25, 0x02	; 2
    2c62:	0e 94 8c 2a 	call	0x5518	; 0x5518 <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2c66:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    2c6a:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (menuNotActive == TRUE) {
    2c6c:	f9 f4       	brne	.+62     	; 0x2cac <main+0x202>
    2c6e:	8c 2f       	mov	r24, r28
    2c70:	8f 73       	andi	r24, 0x3F	; 63
    2c72:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2c74:	69 f4       	brne	.+26     	; 0x2c90 <main+0x1e6>
    2c76:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2c78:	70 e0       	ldi	r23, 0x00	; 0
    2c7a:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <menu_Init>
    2c82:	0e 94 c8 26 	call	0x4d90	; 0x4d90 <menu_InitLCD>
					menu_InitLCD(); //display menu
    2c86:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	48 d9       	rcall	.-3440   	; 0x1f1e <softKey_WantLong>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2c8e:	1d c0       	rjmp	.+58     	; 0x2cca <main+0x220>
    2c90:	9f ef       	ldi	r25, 0xFF	; 255
    2c92:	98 0f       	add	r25, r24
    2c94:	94 30       	cpi	r25, 0x04	; 4
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2c96:	c8 f4       	brcc	.+50     	; 0x2cca <main+0x220>
    2c98:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <softKey_MessageKey_ToSoftKeyNr>
    2c9c:	6c 2f       	mov	r22, r28
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2c9e:	0e 94 87 2c 	call	0x590e	; 0x590e <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2ca2:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2ca6:	0e 94 33 2c 	call	0x5866	; 0x5866 <softKeys_toLCD>
    2caa:	0f c0       	rjmp	.+30     	; 0x2cca <main+0x220>
					softKeys_toLCD();
    2cac:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2cb0:	81 11       	cpse	r24, r1
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2cb2:	06 c0       	rjmp	.+12     	; 0x2cc0 <main+0x216>
    2cb4:	8c 2f       	mov	r24, r28
    2cb6:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2cba:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2cbe:	05 c0       	rjmp	.+10     	; 0x2cca <main+0x220>
    2cc0:	8d ef       	ldi	r24, 0xFD	; 253
    2cc2:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2cc6:	0e 94 57 29 	call	0x52ae	; 0x52ae <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2cca:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    2cce:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd0:	69 f4       	brne	.+26     	; 0x2cec <main+0x242>
    2cd2:	df 3f       	cpi	r29, 0xFF	; 255
    2cd4:	61 f4       	brne	.+24     	; 0x2cee <main+0x244>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2cd6:	0e 94 16 26 	call	0x4c2c	; 0x4c2c <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2cda:	0e 94 33 2c 	call	0x5866	; 0x5866 <softKeys_toLCD>
				softKeys_toLCD();
    2cde:	8f ef       	ldi	r24, 0xFF	; 255
    2ce0:	1e d9       	rcall	.-3524   	; 0x1f1e <softKey_WantLong>
				softKey_WantLong(TRUE);
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
				prog_UpdDisplay = TRUE; // update program display 
    2ce8:	d0 e0       	ldi	r29, 0x00	; 0
    2cea:	01 c0       	rjmp	.+2      	; 0x2cee <main+0x244>
    2cec:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2cee:	85 b1       	in	r24, 0x05	; 5
    2cf0:	8f 7c       	andi	r24, 0xCF	; 207
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2cf2:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MAIN
    2cf4:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2cf8:	81 11       	cpse	r24, r1
    2cfa:	09 c0       	rjmp	.+18     	; 0x2d0e <main+0x264>
    2cfc:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2d00:	0e 94 7b 2a 	call	0x54f6	; 0x54f6 <menu_deleteMessage>
				menu_deleteMessage();
    2d04:	8c 2f       	mov	r24, r28
    2d06:	93 dc       	rcall	.-1754   	; 0x262e <lcd_goto>
				lcd_goto(saveCursor);
    2d08:	8f ef       	ldi	r24, 0xFF	; 255
    2d0a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2d0e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2d12:	81 11       	cpse	r24, r1
    2d14:	0a c0       	rjmp	.+20     	; 0x2d2a <main+0x280>
    2d16:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2d1a:	88 23       	and	r24, r24
    2d1c:	19 f0       	breq	.+6      	; 0x2d24 <main+0x27a>
    2d1e:	0e 94 57 29 	call	0x52ae	; 0x52ae <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <main+0x280>
    2d24:	8f ef       	ldi	r24, 0xFF	; 255
    2d26:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2d2a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    2d2e:	81 11       	cpse	r24, r1
    2d30:	1a c0       	rjmp	.+52     	; 0x2d66 <main+0x2bc>
    2d32:	af d8       	rcall	.-3746   	; 0x1e92 <module_PowerControl>
			module_PowerControl();
    2d34:	0e 94 d3 2c 	call	0x59a6	; 0x59a6 <menu_showPowerState>
			menu_showPowerState();
    2d38:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			if (menuNotActive == TRUE) {
    2d3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3e:	99 f4       	brne	.+38     	; 0x2d66 <main+0x2bc>
    2d40:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2d44:	84 e1       	ldi	r24, 0x14	; 20
				lcd_goto(LCD_LINE2);
    2d46:	73 dc       	rcall	.-1818   	; 0x262e <lcd_goto>
    2d48:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2d4c:	81 30       	cpi	r24, 0x01	; 1
    2d4e:	21 f4       	brne	.+8      	; 0x2d58 <main+0x2ae>
    2d50:	83 e9       	ldi	r24, 0x93	; 147
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2d52:	92 e0       	ldi	r25, 0x02	; 2
    2d54:	de dc       	rcall	.-1604   	; 0x2712 <lcd_puts_P>
    2d56:	05 c0       	rjmp	.+10     	; 0x2d62 <main+0x2b8>
    2d58:	82 31       	cpi	r24, 0x12	; 18
    2d5a:	19 f4       	brne	.+6      	; 0x2d62 <main+0x2b8>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2d5c:	84 e1       	ldi	r24, 0x14	; 20
    2d5e:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2d62:	8c 2f       	mov	r24, r28
    2d64:	64 dc       	rcall	.-1848   	; 0x262e <lcd_goto>
				}
				lcd_goto(saveCursor);
    2d66:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2d6a:	9f e7       	ldi	r25, 0x7F	; 127
    2d6c:	98 0f       	add	r25, r24
    2d6e:	96 30       	cpi	r25, 0x06	; 6
    2d70:	10 f0       	brcs	.+4      	; 0x2d76 <main+0x2cc>
    2d72:	8e 3f       	cpi	r24, 0xFE	; 254
    2d74:	09 f5       	brne	.+66     	; 0x2db8 <main+0x30e>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2d76:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2d7a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d7c:	31 f4       	brne	.+12     	; 0x2d8a <main+0x2e0>
    2d7e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2d82:	69 dc       	rcall	.-1838   	; 0x2656 <getCursorFromLCDRAMcursor>
    2d84:	0e 94 81 38 	call	0x7102	; 0x7102 <serial3SER_ESPSend>
    2d88:	03 c0       	rjmp	.+6      	; 0x2d90 <main+0x2e6>
    2d8a:	8f e7       	ldi	r24, 0x7F	; 127
    2d8c:	0e 94 81 38 	call	0x7102	; 0x7102 <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2d90:	81 e8       	ldi	r24, 0x81	; 129
    2d92:	0e 94 81 38 	call	0x7102	; 0x7102 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2d96:	c0 e0       	ldi	r28, 0x00	; 0
    2d98:	e8 e5       	ldi	r30, 0x58	; 88
    2d9a:	f3 e0       	ldi	r31, 0x03	; 3
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d9c:	08 c0       	rjmp	.+16     	; 0x2dae <main+0x304>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2d9e:	8f 01       	movw	r16, r30
    2da0:	0f 5f       	subi	r16, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2da2:	1f 4f       	sbci	r17, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    2da4:	80 81       	ld	r24, Z
    2da6:	0e 94 81 38 	call	0x7102	; 0x7102 <serial3SER_ESPSend>
    2daa:	cf 5f       	subi	r28, 0xFF	; 255
    2dac:	f8 01       	movw	r30, r16
    2dae:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2db0:	b0 f3       	brcs	.-20     	; 0x2d9e <main+0x2f4>
				serial3SER_ESPSend(*pChar++);
    2db2:	80 e8       	ldi	r24, 0x80	; 128
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2db4:	0e 94 81 38 	call	0x7102	; 0x7102 <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2dbe:	0e 94 9f 35 	call	0x6b3e	; 0x6b3e <midi_CheckTxActiveSense>
    2dc2:	0e 94 5f 33 	call	0x66be	; 0x66be <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2dc6:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
    2dca:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    2dce:	81 11       	cpse	r24, r1
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP)){
    2dd0:	6b c0       	rjmp	.+214    	; 0x2ea8 <main+0x3fe>
    2dd2:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			if TIMER_NOTSTARTED(TIMER_MIDIIN_DISP) {
    2dd6:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <main+0x332>
    2dda:	66 c0       	rjmp	.+204    	; 0x2ea8 <main+0x3fe>
    2ddc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				// only if timer for midi in is not running at all (or just has elapsed)
				if ((midiLastInNote != MIDI_NOTE_NONE) && (prog_Display == PROGR_NONE)) {
    2de0:	8f 3f       	cpi	r24, 0xFF	; 255
    2de2:	b1 f1       	breq	.+108    	; 0x2e50 <main+0x3a6>
    2de4:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    2de8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dea:	91 f5       	brne	.+100    	; 0x2e50 <main+0x3a6>
    2dec:	80 e0       	ldi	r24, 0x00	; 0
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2dee:	1f dc       	rcall	.-1986   	; 0x262e <lcd_goto>
    2df0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
					if (midiLastInManual == MANUAL_NONE) {
    2df4:	8f 3f       	cpi	r24, 0xFF	; 255
    2df6:	69 f4       	brne	.+26     	; 0x2e12 <main+0x368>
    2df8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    2dfc:	0e 94 81 3b 	call	0x7702	; 0x7702 <lcd_ChannelOut>
						lcd_putc('?');
    2e00:	8f e3       	ldi	r24, 0x3F	; 63
    2e02:	3f dc       	rcall	.-1922   	; 0x2682 <lcd_putc>
						lcd_noteOut(midiLastInNote);
    2e04:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2e08:	0e 94 30 3b 	call	0x7660	; 0x7660 <lcd_noteOut>
						lcd_putc(' ');
    2e0c:	80 e2       	ldi	r24, 0x20	; 32
    2e0e:	39 dc       	rcall	.-1934   	; 0x2682 <lcd_putc>
    2e10:	0c c0       	rjmp	.+24     	; 0x2e2a <main+0x380>
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    2e12:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2e16:	0e 94 30 3b 	call	0x7660	; 0x7660 <lcd_noteOut>
						lcd_putc(MENU_MIDI_IO_SIGN);
    2e1a:	8e e7       	ldi	r24, 0x7E	; 126
    2e1c:	32 dc       	rcall	.-1948   	; 0x2682 <lcd_putc>
    2e1e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
						lcd_ManualOutDec(midiLastInManual);
    2e22:	0e 94 92 3b 	call	0x7724	; 0x7724 <lcd_ManualOutDec>
    2e26:	80 e2       	ldi	r24, 0x20	; 32
						lcd_putc(' ');
    2e28:	2c dc       	rcall	.-1960   	; 0x2682 <lcd_putc>
    2e2a:	8c 2f       	mov	r24, r28
    2e2c:	00 dc       	rcall	.-2048   	; 0x262e <lcd_goto>
					}
					lcd_goto(oldcursor);
    2e2e:	8f ef       	ldi	r24, 0xFF	; 255
    2e30:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
					midiLastInNote = MIDI_NOTE_NONE;
    2e34:	9f b7       	in	r25, 0x3f	; 63
					// now start timer 
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2e36:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	06 c0       	rjmp	.+12     	; 0x2e48 <main+0x39e>
    2e3c:	ef e2       	ldi	r30, 0x2F	; 47
    2e3e:	f2 e0       	ldi	r31, 0x02	; 2
    2e40:	83 e2       	ldi	r24, 0x23	; 35
    2e42:	80 87       	std	Z+8, r24	; 0x08
    2e44:	11 86       	std	Z+9, r1	; 0x09
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	81 11       	cpse	r24, r1
    2e4a:	f8 cf       	rjmp	.-16     	; 0x2e3c <main+0x392>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e4c:	9f bf       	out	0x3f, r25	; 63
    2e4e:	2c c0       	rjmp	.+88     	; 0x2ea8 <main+0x3fe>
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2e50:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2e54:	8f 3f       	cpi	r24, 0xFF	; 255
    2e56:	d9 f0       	breq	.+54     	; 0x2e8e <main+0x3e4>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	e9 db       	rcall	.-2094   	; 0x262e <lcd_goto>
    2e5c:	80 e7       	ldi	r24, 0x70	; 112
					lcd_putc('p');
    2e5e:	11 dc       	rcall	.-2014   	; 0x2682 <lcd_putc>
    2e60:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
					lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2e64:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <lcd_dec2out>
    2e68:	8e e7       	ldi	r24, 0x7E	; 126
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2e6a:	0b dc       	rcall	.-2026   	; 0x2682 <lcd_putc>
    2e6c:	8f ef       	ldi	r24, 0xFF	; 255
    2e6e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2e72:	9f b7       	in	r25, 0x3f	; 63
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2e74:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	06 c0       	rjmp	.+12     	; 0x2e86 <main+0x3dc>
    2e7a:	ef e2       	ldi	r30, 0x2F	; 47
    2e7c:	f2 e0       	ldi	r31, 0x02	; 2
    2e7e:	83 e2       	ldi	r24, 0x23	; 35
    2e80:	80 87       	std	Z+8, r24	; 0x08
    2e82:	11 86       	std	Z+9, r1	; 0x09
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	81 11       	cpse	r24, r1
    2e88:	f8 cf       	rjmp	.-16     	; 0x2e7a <main+0x3d0>
    2e8a:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e8c:	0d c0       	rjmp	.+26     	; 0x2ea8 <main+0x3fe>
    __asm__ volatile ("" ::: "memory");
    2e8e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2e92:	81 11       	cpse	r24, r1
    2e94:	09 c0       	rjmp	.+18     	; 0x2ea8 <main+0x3fe>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e96:	cb db       	rcall	.-2154   	; 0x262e <lcd_goto>
    2e98:	86 e0       	ldi	r24, 0x06	; 6
					lcd_blank(6);
    2e9a:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
					lcd_goto(oldcursor);
    2e9e:	8c 2f       	mov	r24, r28
    2ea0:	c6 db       	rcall	.-2164   	; 0x262e <lcd_goto>
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2ea4:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
				}
			}
		}
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2ea8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2eac:	8f 3f       	cpi	r24, 0xFF	; 255
    2eae:	21 f0       	breq	.+8      	; 0x2eb8 <main+0x40e>
    2eb0:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2eb4:	81 11       	cpse	r24, r1
    2eb6:	5b c0       	rjmp	.+182    	; 0x2f6e <main+0x4c4>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    2eb8:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
    2ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ebe:	f9 f0       	breq	.+62     	; 0x2efe <main+0x454>
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2ec0:	8f e0       	ldi	r24, 0x0F	; 15
    2ec2:	b5 db       	rcall	.-2198   	; 0x262e <lcd_goto>
    2ec4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
				lcd_ManualOutDec(midiLastOutManual);
    2ec8:	0e 94 92 3b 	call	0x7724	; 0x7724 <lcd_ManualOutDec>
    2ecc:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    2ece:	d9 db       	rcall	.-2126   	; 0x2682 <lcd_putc>
    2ed0:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
				lcd_noteOut(midiLastOutNote);
    2ed4:	0e 94 30 3b 	call	0x7660	; 0x7660 <lcd_noteOut>
				lcd_goto(oldcursor);
    2ed8:	8c 2f       	mov	r24, r28
    2eda:	a9 db       	rcall	.-2222   	; 0x262e <lcd_goto>
    2edc:	8f ef       	ldi	r24, 0xFF	; 255
				midiLastOutNote = MIDI_NOTE_NONE;
    2ede:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
    2ee2:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2ee4:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	06 c0       	rjmp	.+12     	; 0x2ef6 <main+0x44c>
    2eea:	ef e2       	ldi	r30, 0x2F	; 47
    2eec:	f2 e0       	ldi	r31, 0x02	; 2
    2eee:	88 e2       	ldi	r24, 0x28	; 40
    2ef0:	82 87       	std	Z+10, r24	; 0x0a
    2ef2:	13 86       	std	Z+11, r1	; 0x0b
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ef6:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    2ef8:	f8 cf       	rjmp	.-16     	; 0x2eea <main+0x440>
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    2efa:	9f bf       	out	0x3f, r25	; 63
    2efc:	38 c0       	rjmp	.+112    	; 0x2f6e <main+0x4c4>
    2efe:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2f02:	8f 3f       	cpi	r24, 0xFF	; 255
    2f04:	31 f1       	breq	.+76     	; 0x2f52 <main+0x4a8>
    2f06:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_putc('R');
    2f08:	92 db       	rcall	.-2268   	; 0x262e <lcd_goto>
    2f0a:	82 e5       	ldi	r24, 0x52	; 82
    2f0c:	ba db       	rcall	.-2188   	; 0x2682 <lcd_putc>
				lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2f0e:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2f12:	8f 77       	andi	r24, 0x7F	; 127
    2f14:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <lcd_dec2out>
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2f18:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2f1c:	88 23       	and	r24, r24
    2f1e:	14 f0       	brlt	.+4      	; 0x2f24 <main+0x47a>
    2f20:	88 e0       	ldi	r24, 0x08	; 8
    2f22:	01 c0       	rjmp	.+2      	; 0x2f26 <main+0x47c>
    2f24:	89 e0       	ldi	r24, 0x09	; 9
    2f26:	ad db       	rcall	.-2214   	; 0x2682 <lcd_putc>
				lcd_putc(' ');
    2f28:	80 e2       	ldi	r24, 0x20	; 32
    2f2a:	ab db       	rcall	.-2218   	; 0x2682 <lcd_putc>
    2f2c:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    2f2e:	7f db       	rcall	.-2306   	; 0x262e <lcd_goto>
    2f30:	8f ef       	ldi	r24, 0xFF	; 255
    2f32:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				midi_RegisterChanged = REGISTER_NONE;
    2f36:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2f38:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f3a:	81 e0       	ldi	r24, 0x01	; 1
    2f3c:	06 c0       	rjmp	.+12     	; 0x2f4a <main+0x4a0>
    2f3e:	ef e2       	ldi	r30, 0x2F	; 47
    2f40:	f2 e0       	ldi	r31, 0x02	; 2
    2f42:	88 e2       	ldi	r24, 0x28	; 40
    2f44:	82 87       	std	Z+10, r24	; 0x0a
    2f46:	13 86       	std	Z+11, r1	; 0x0b
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	f8 cf       	rjmp	.-16     	; 0x2f3e <main+0x494>
    2f4e:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f50:	0e c0       	rjmp	.+28     	; 0x2f6e <main+0x4c4>
    __asm__ volatile ("" ::: "memory");
    2f52:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2f56:	81 11       	cpse	r24, r1
    2f58:	0a c0       	rjmp	.+20     	; 0x2f6e <main+0x4c4>
    2f5a:	8f e0       	ldi	r24, 0x0F	; 15
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2f5c:	68 db       	rcall	.-2352   	; 0x262e <lcd_goto>
    2f5e:	85 e0       	ldi	r24, 0x05	; 5
    2f60:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
				lcd_blank(5);
    2f64:	8c 2f       	mov	r24, r28
    2f66:	63 db       	rcall	.-2362   	; 0x262e <lcd_goto>
				lcd_goto(oldcursor);
    2f68:	8f ef       	ldi	r24, 0xFF	; 255
    2f6a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2f6e:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <prog_UpdDisplay>
    2f72:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}
		#endif
		//----------------------- program display ------------------------
		if (prog_UpdDisplay == TRUE){
    2f74:	31 f4       	brne	.+12     	; 0x2f82 <main+0x4d8>
    2f76:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
			prog_UpdDisplay = FALSE;
    2f7c:	58 db       	rcall	.-2384   	; 0x262e <lcd_goto>
    2f7e:	0e 94 c5 30 	call	0x618a	; 0x618a <prog_toLcd>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    2f82:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
			prog_toLcd();
    2f86:	8f 3f       	cpi	r24, 0xFF	; 255
    2f88:	09 f0       	breq	.+2      	; 0x2f8c <main+0x4e2>
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2f8a:	7e c0       	rjmp	.+252    	; 0x3088 <main+0x5de>
    2f8c:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2f90:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2f94:	c0 91 db 18 	lds	r28, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2f98:	cf 3f       	cpi	r28, 0xFF	; 255
			uint8_t oldBlink = lcd_cursorIsOn;
    2f9a:	11 f4       	brne	.+4      	; 0x2fa0 <main+0x4f6>
			if (oldBlink == TRUE) {
    2f9c:	0e 94 ce 3b 	call	0x779c	; 0x779c <lcd_cursoroff>
				lcd_cursoroff();
    2fa0:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
			}
			char separator;
			if (*pTime == 0) {
    2fa4:	88 23       	and	r24, r24
    2fa6:	59 f0       	breq	.+22     	; 0x2fbe <main+0x514>
    2fa8:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2fac:	80 fd       	sbrc	r24, 0
    2fae:	0e c0       	rjmp	.+28     	; 0x2fcc <main+0x522>
    2fb0:	0f 2e       	mov	r0, r31
    2fb2:	fa e3       	ldi	r31, 0x3A	; 58
				// when displaying hr:min blink ":"
				separator = ':';
    2fb4:	ef 2e       	mov	r14, r31
    2fb6:	f0 2d       	mov	r31, r0
    2fb8:	04 e4       	ldi	r16, 0x44	; 68
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2fba:	12 e0       	ldi	r17, 0x02	; 2
    2fbc:	0c c0       	rjmp	.+24     	; 0x2fd6 <main+0x52c>
    2fbe:	0f 2e       	mov	r0, r31
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2fc0:	fa e3       	ldi	r31, 0x3A	; 58
    2fc2:	ef 2e       	mov	r14, r31
    2fc4:	f0 2d       	mov	r31, r0
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2fc6:	03 e4       	ldi	r16, 0x43	; 67
    2fc8:	12 e0       	ldi	r17, 0x02	; 2
    2fca:	05 c0       	rjmp	.+10     	; 0x2fd6 <main+0x52c>
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2fcc:	68 94       	set
    2fce:	ee 24       	eor	r14, r14
    2fd0:	e5 f8       	bld	r14, 5
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2fd2:	04 e4       	ldi	r16, 0x44	; 68
    2fd4:	12 e0       	ldi	r17, 0x02	; 2
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2fd6:	87 e0       	ldi	r24, 0x07	; 7
    2fd8:	2a db       	rcall	.-2476   	; 0x262e <lcd_goto>
			lcd_dec2out(*(pTime--));
    2fda:	f8 01       	movw	r30, r16
    2fdc:	80 81       	ld	r24, Z
    2fde:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <lcd_dec2out>
			lcd_putc(separator);
    2fe2:	8e 2d       	mov	r24, r14
    2fe4:	4e db       	rcall	.-2404   	; 0x2682 <lcd_putc>
			lcd_dec2out(*pTime);
    2fe6:	f8 01       	movw	r30, r16
    2fe8:	31 97       	sbiw	r30, 0x01	; 1
    2fea:	80 81       	ld	r24, Z
    2fec:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2ff0:	40 91 4f 16 	lds	r20, 0x164F	; 0x80164f <midiRxOvflCount>
			if (ovflCount > 0){
    2ff4:	44 23       	and	r20, r20
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2ff6:	31 f0       	breq	.+12     	; 0x3004 <main+0x55a>
    2ff8:	50 e0       	ldi	r21, 0x00	; 0
    2ffa:	60 e0       	ldi	r22, 0x00	; 0
    2ffc:	83 e0       	ldi	r24, 0x03	; 3
    2ffe:	3f dd       	rcall	.-1410   	; 0x2a7e <log_putError>
				midiRxOvflCount = 0;
    3000:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    3004:	40 91 56 16 	lds	r20, 0x1656	; 0x801656 <midiTxOvflCount>
			if (ovflCount > 0){
    3008:	44 23       	and	r20, r20
    300a:	31 f0       	breq	.+12     	; 0x3018 <main+0x56e>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    300c:	50 e0       	ldi	r21, 0x00	; 0
    300e:	61 e0       	ldi	r22, 0x01	; 1
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	35 dd       	rcall	.-1430   	; 0x2a7e <log_putError>
    3014:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
				midiTxOvflCount = 0;
    3018:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    301c:	84 ff       	sbrs	r24, 4
    301e:	02 c0       	rjmp	.+4      	; 0x3024 <main+0x57a>
    3020:	80 e2       	ldi	r24, 0x20	; 32
    3022:	01 c0       	rjmp	.+2      	; 0x3026 <main+0x57c>
    3024:	89 e0       	ldi	r24, 0x09	; 9
    3026:	2d db       	rcall	.-2470   	; 0x2682 <lcd_putc>
    3028:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    302c:	8f 3f       	cpi	r24, 0xFF	; 255
    302e:	11 f4       	brne	.+4      	; 0x3034 <main+0x58a>
    3030:	85 e4       	ldi	r24, 0x45	; 69
    3032:	01 c0       	rjmp	.+2      	; 0x3036 <main+0x58c>
    3034:	80 e2       	ldi	r24, 0x20	; 32
    3036:	25 db       	rcall	.-2486   	; 0x2682 <lcd_putc>
    3038:	8f 2d       	mov	r24, r15
    303a:	f9 da       	rcall	.-2574   	; 0x262e <lcd_goto>
    303c:	cf 3f       	cpi	r28, 0xFF	; 255
			// --- restore cursor ---
			lcd_goto(oldCursor);
    303e:	11 f4       	brne	.+4      	; 0x3044 <main+0x59a>
    3040:	0e 94 c7 3b 	call	0x778e	; 0x778e <lcd_cursosblink>
			if (oldBlink == TRUE) {
    3044:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				lcd_cursosblink();
    3048:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    304a:	69 f4       	brne	.+26     	; 0x3066 <main+0x5bc>
    304c:	9f b7       	in	r25, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    3052:	06 c0       	rjmp	.+12     	; 0x3060 <main+0x5b6>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3054:	ef e2       	ldi	r30, 0x2F	; 47
    3056:	f2 e0       	ldi	r31, 0x02	; 2
    3058:	8d e7       	ldi	r24, 0x7D	; 125
    305a:	80 87       	std	Z+8, r24	; 0x08
    305c:	11 86       	std	Z+9, r1	; 0x09
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	81 11       	cpse	r24, r1
    3062:	f8 cf       	rjmp	.-16     	; 0x3054 <main+0x5aa>
    3064:	9f bf       	out	0x3f, r25	; 63
    3066:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    306a:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    306c:	69 f4       	brne	.+26     	; 0x3088 <main+0x5de>
    306e:	9f b7       	in	r25, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    3074:	06 c0       	rjmp	.+12     	; 0x3082 <main+0x5d8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3076:	ef e2       	ldi	r30, 0x2F	; 47
    3078:	f2 e0       	ldi	r31, 0x02	; 2
    307a:	8d e7       	ldi	r24, 0x7D	; 125
    307c:	82 87       	std	Z+10, r24	; 0x0a
    307e:	13 86       	std	Z+11, r1	; 0x0b
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	81 11       	cpse	r24, r1
    3084:	f8 cf       	rjmp	.-16     	; 0x3076 <main+0x5cc>
    3086:	9f bf       	out	0x3f, r25	; 63
    3088:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    308c:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    308e:	39 f4       	brne	.+14     	; 0x309e <main+0x5f4>
    3090:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
    3094:	40 e0       	ldi	r20, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	60 e0       	ldi	r22, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    309a:	84 e0       	ldi	r24, 0x04	; 4
    309c:	f0 dc       	rcall	.-1568   	; 0x2a7e <log_putError>
    309e:	85 b1       	in	r24, 0x05	; 5
    30a0:	8f 7c       	andi	r24, 0xCF	; 207
    30a2:	80 62       	ori	r24, 0x20	; 32
    30a4:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MIDI
    30a6:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    30aa:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    30ae:	98 17       	cp	r25, r24
    30b0:	21 f0       	breq	.+8      	; 0x30ba <main+0x610>
    30b2:	0e 94 b7 36 	call	0x6d6e	; 0x6d6e <serial1MIDIReadRx>
    30b6:	0e 94 e8 33 	call	0x67d0	; 0x67d0 <midiIn_Process>
			midiIn_Process(serial1MIDIReadRx());
    30ba:	0e 94 8b 2d 	call	0x5b16	; 0x5b16 <pipeMsgStatus>
    30be:	8f 3f       	cpi	r24, 0xFF	; 255
    30c0:	09 f0       	breq	.+2      	; 0x30c4 <main+0x61a>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    30c2:	38 cd       	rjmp	.-1424   	; 0x2b34 <main+0x8a>
    30c4:	0e 94 76 2d 	call	0x5aec	; 0x5aec <pipeMsgGet>
    30c8:	0e 94 ad 34 	call	0x695a	; 0x695a <midiKeyPress_Process>
			midiKeyPress_Process(pipeMsgGet());
    30cc:	33 cd       	rjmp	.-1434   	; 0x2b34 <main+0x8a>

000030ce <menu_enterWriteModule>:
    30ce:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
    30d2:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    30d6:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
    30da:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <menu_enterWriteModule+0x1e>
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	0a 94       	dec	r0
    30ee:	e2 f7       	brpl	.-8      	; 0x30e8 <menu_enterWriteModule+0x1a>
    30f0:	48 2f       	mov	r20, r24
    30f2:	30 e0       	ldi	r19, 0x00	; 0
    30f4:	e1 e4       	ldi	r30, 0x41	; 65
    30f6:	f3 e0       	ldi	r31, 0x03	; 3
    30f8:	22 c0       	rjmp	.+68     	; 0x313e <menu_enterWriteModule+0x70>
    30fa:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    30fe:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    3102:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    3106:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	aa 1f       	adc	r26, r26
    3110:	bb 1f       	adc	r27, r27
    3112:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    3116:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    311a:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    311e:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    3122:	21 81       	ldd	r18, Z+1	; 0x01
    3124:	24 23       	and	r18, r20
    3126:	49 f0       	breq	.+18     	; 0x313a <menu_enterWriteModule+0x6c>
    3128:	81 60       	ori	r24, 0x01	; 1
    312a:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    312e:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    3132:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    3136:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    313a:	38 97       	sbiw	r30, 0x08	; 8
    313c:	3f 5f       	subi	r19, 0xFF	; 255
    313e:	30 32       	cpi	r19, 0x20	; 32
    3140:	e0 f2       	brcs	.-72     	; 0x30fa <menu_enterWriteModule+0x2c>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	08 95       	ret

00003146 <menu_exitWriteModule>:
    3146:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    314a:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    314e:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    3152:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    3156:	85 30       	cpi	r24, 0x05	; 5
    3158:	09 f5       	brne	.+66     	; 0x319c <menu_exitWriteModule+0x56>
    315a:	a1 e0       	ldi	r26, 0x01	; 1
    315c:	b0 e0       	ldi	r27, 0x00	; 0
    315e:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    3162:	02 c0       	rjmp	.+4      	; 0x3168 <menu_exitWriteModule+0x22>
    3164:	aa 0f       	add	r26, r26
    3166:	bb 1f       	adc	r27, r27
    3168:	0a 94       	dec	r0
    316a:	e2 f7       	brpl	.-8      	; 0x3164 <menu_exitWriteModule+0x1e>
    316c:	3a 2f       	mov	r19, r26
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	e1 e4       	ldi	r30, 0x41	; 65
    3172:	f3 e0       	ldi	r31, 0x03	; 3
    3174:	11 c0       	rjmp	.+34     	; 0x3198 <menu_exitWriteModule+0x52>
    3176:	77 23       	and	r23, r23
    3178:	24 f4       	brge	.+8      	; 0x3182 <menu_exitWriteModule+0x3c>
    317a:	81 81       	ldd	r24, Z+1	; 0x01
    317c:	83 2b       	or	r24, r19
    317e:	81 83       	std	Z+1, r24	; 0x01
    3180:	05 c0       	rjmp	.+10     	; 0x318c <menu_exitWriteModule+0x46>
    3182:	21 81       	ldd	r18, Z+1	; 0x01
    3184:	8a 2f       	mov	r24, r26
    3186:	80 95       	com	r24
    3188:	82 23       	and	r24, r18
    318a:	81 83       	std	Z+1, r24	; 0x01
    318c:	44 0f       	add	r20, r20
    318e:	55 1f       	adc	r21, r21
    3190:	66 1f       	adc	r22, r22
    3192:	77 1f       	adc	r23, r23
    3194:	38 97       	sbiw	r30, 0x08	; 8
    3196:	9f 5f       	subi	r25, 0xFF	; 255
    3198:	90 32       	cpi	r25, 0x20	; 32
    319a:	68 f3       	brcs	.-38     	; 0x3176 <menu_exitWriteModule+0x30>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	08 95       	ret

000031a0 <menuOnEnterModSel>:
    31a0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31a4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31a8:	3e 96       	adiw	r30, 0x0e	; 14
    31aa:	85 91       	lpm	r24, Z+
    31ac:	95 91       	lpm	r25, Z+
    31ae:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	08 95       	ret

000031b6 <menuOnEnterMidiInCh>:
    31b6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31ba:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31be:	3e 96       	adiw	r30, 0x0e	; 14
    31c0:	85 91       	lpm	r24, Z+
    31c2:	95 91       	lpm	r25, Z+
    31c4:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	08 95       	ret

000031cc <menuOnEnterMidiInSec>:
    31cc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31d0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31d4:	3e 96       	adiw	r30, 0x0e	; 14
    31d6:	25 91       	lpm	r18, Z+
    31d8:	35 91       	lpm	r19, Z+
    31da:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    31de:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    31e2:	8f 70       	andi	r24, 0x0F	; 15
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	23 70       	andi	r18, 0x03	; 3
    31e8:	88 0f       	add	r24, r24
    31ea:	99 1f       	adc	r25, r25
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	82 0f       	add	r24, r18
    31f2:	91 1d       	adc	r25, r1
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3200:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3204:	80 e0       	ldi	r24, 0x00	; 0
    3206:	08 95       	ret

00003208 <menuOnEnterModManual>:
    3208:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    320c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3210:	3e 96       	adiw	r30, 0x0e	; 14
    3212:	85 91       	lpm	r24, Z+
    3214:	95 91       	lpm	r25, Z+
    3216:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	08 95       	ret

0000321e <menuOnEnterModSec>:
    321e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3222:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3226:	3e 96       	adiw	r30, 0x0e	; 14
    3228:	85 91       	lpm	r24, Z+
    322a:	95 91       	lpm	r25, Z+
    322c:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    3230:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    3234:	2f 70       	andi	r18, 0x0F	; 15
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	83 70       	andi	r24, 0x03	; 3
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	a9 01       	movw	r20, r18
    323e:	44 0f       	add	r20, r20
    3240:	55 1f       	adc	r21, r21
    3242:	24 0f       	add	r18, r20
    3244:	35 1f       	adc	r19, r21
    3246:	22 0f       	add	r18, r18
    3248:	33 1f       	adc	r19, r19
    324a:	22 0f       	add	r18, r18
    324c:	33 1f       	adc	r19, r19
    324e:	ac 01       	movw	r20, r24
    3250:	44 0f       	add	r20, r20
    3252:	55 1f       	adc	r21, r21
    3254:	84 0f       	add	r24, r20
    3256:	95 1f       	adc	r25, r21
    3258:	82 0f       	add	r24, r18
    325a:	93 1f       	adc	r25, r19
    325c:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3260:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	08 95       	ret

00003268 <menuOnEnterModSecReg>:
    3268:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    326c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3270:	3e 96       	adiw	r30, 0x0e	; 14
    3272:	85 91       	lpm	r24, Z+
    3274:	95 91       	lpm	r25, Z+
    3276:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    327a:	87 70       	andi	r24, 0x07	; 7
    327c:	90 e0       	ldi	r25, 0x00	; 0
    327e:	9c 01       	movw	r18, r24
    3280:	22 0f       	add	r18, r18
    3282:	33 1f       	adc	r19, r19
    3284:	82 0f       	add	r24, r18
    3286:	93 1f       	adc	r25, r19
    3288:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    328c:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	08 95       	ret

00003294 <menuOnEnterKey>:
    3294:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3298:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    329c:	3e 96       	adiw	r30, 0x0e	; 14
    329e:	85 91       	lpm	r24, Z+
    32a0:	95 91       	lpm	r25, Z+
    32a2:	84 30       	cpi	r24, 0x04	; 4
    32a4:	60 f4       	brcc	.+24     	; 0x32be <menuOnEnterKey+0x2a>
    32a6:	fc 01       	movw	r30, r24
    32a8:	ff 27       	eor	r31, r31
    32aa:	ee 0f       	add	r30, r30
    32ac:	ff 1f       	adc	r31, r31
    32ae:	e6 54       	subi	r30, 0x46	; 70
    32b0:	fa 4f       	sbci	r31, 0xFA	; 250
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    32ba:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	08 95       	ret

000032c2 <menuOnExitMidiThrough>:
    32c2:	0e 94 9d 0c 	call	0x193a	; 0x193a <eeprom_UpdateMidiThrough>
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	08 95       	ret

000032ca <menuOnExitRegisterEdit>:
    32ca:	1f 93       	push	r17
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	86 30       	cpi	r24, 0x06	; 6
    32d2:	f1 f0       	breq	.+60     	; 0x3310 <menuOnExitRegisterEdit+0x46>
    32d4:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    32d8:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    32dc:	3e 96       	adiw	r30, 0x0e	; 14
    32de:	05 90       	lpm	r0, Z+
    32e0:	f4 91       	lpm	r31, Z
    32e2:	e0 2d       	mov	r30, r0
    32e4:	cf 01       	movw	r24, r30
    32e6:	8d 56       	subi	r24, 0x6D	; 109
    32e8:	95 40       	sbci	r25, 0x05	; 5
    32ea:	88 0f       	add	r24, r24
    32ec:	88 0f       	add	r24, r24
    32ee:	88 0f       	add	r24, r24
    32f0:	d0 81       	ld	r29, Z
    32f2:	c0 e0       	ldi	r28, 0x00	; 0
    32f4:	0b c0       	rjmp	.+22     	; 0x330c <menuOnExitRegisterEdit+0x42>
    32f6:	11 e0       	ldi	r17, 0x01	; 1
    32f8:	18 0f       	add	r17, r24
    32fa:	6d 2f       	mov	r22, r29
    32fc:	66 1f       	adc	r22, r22
    32fe:	66 27       	eor	r22, r22
    3300:	66 1f       	adc	r22, r22
    3302:	0e 94 65 2f 	call	0x5eca	; 0x5eca <register_onOff>
    3306:	dd 0f       	add	r29, r29
    3308:	cf 5f       	subi	r28, 0xFF	; 255
    330a:	81 2f       	mov	r24, r17
    330c:	c8 30       	cpi	r28, 0x08	; 8
    330e:	98 f3       	brcs	.-26     	; 0x32f6 <menuOnExitRegisterEdit+0x2c>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	1f 91       	pop	r17
    3318:	08 95       	ret

0000331a <softKeyRegOff>:
    331a:	81 11       	cpse	r24, r1
    331c:	0e 94 b6 30 	call	0x616c	; 0x616c <midi_resetRegisters>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	08 95       	ret

00003324 <menuOnExitCoupler>:
    3324:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3328:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    332c:	3e 96       	adiw	r30, 0x0e	; 14
    332e:	85 91       	lpm	r24, Z+
    3330:	95 91       	lpm	r25, Z+
    3332:	81 51       	subi	r24, 0x11	; 17
    3334:	98 40       	sbci	r25, 0x08	; 8
    3336:	fc 01       	movw	r30, r24
    3338:	ff 27       	eor	r31, r31
    333a:	ef 5e       	subi	r30, 0xEF	; 239
    333c:	f7 4f       	sbci	r31, 0xF7	; 247
    333e:	20 81       	ld	r18, Z
    3340:	21 11       	cpse	r18, r1
    3342:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <set_Coupler>
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	08 95       	ret

0000334a <menuOnExitSaveProgram>:
    334a:	86 30       	cpi	r24, 0x06	; 6
    334c:	39 f0       	breq	.+14     	; 0x335c <menuOnExitSaveProgram+0x12>
    334e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3352:	80 34       	cpi	r24, 0x40	; 64
    3354:	18 f4       	brcc	.+6      	; 0x335c <menuOnExitSaveProgram+0x12>
    3356:	6f ef       	ldi	r22, 0xFF	; 255
    3358:	0e 94 8a 2f 	call	0x5f14	; 0x5f14 <register_toProgram>
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	08 95       	ret

00003360 <menuOnExitKeys>:
    3360:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <eeprom_UpdateSoftkeys>
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	08 95       	ret

00003368 <menu_readModule>:
    3368:	cf 92       	push	r12
    336a:	df 92       	push	r13
    336c:	ef 92       	push	r14
    336e:	ff 92       	push	r15
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    3378:	02 c0       	rjmp	.+4      	; 0x337e <menu_readModule+0x16>
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	0a 94       	dec	r0
    3380:	e2 f7       	brpl	.-8      	; 0x337a <menu_readModule+0x12>
    3382:	28 2f       	mov	r18, r24
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	e1 e4       	ldi	r30, 0x41	; 65
    3388:	f3 e0       	ldi	r31, 0x03	; 3
    338a:	c1 2c       	mov	r12, r1
    338c:	d1 2c       	mov	r13, r1
    338e:	76 01       	movw	r14, r12
    3390:	0b c0       	rjmp	.+22     	; 0x33a8 <menu_readModule+0x40>
    3392:	cc 0c       	add	r12, r12
    3394:	dd 1c       	adc	r13, r13
    3396:	ee 1c       	adc	r14, r14
    3398:	ff 1c       	adc	r15, r15
    339a:	86 81       	ldd	r24, Z+6	; 0x06
    339c:	82 23       	and	r24, r18
    339e:	11 f0       	breq	.+4      	; 0x33a4 <menu_readModule+0x3c>
    33a0:	68 94       	set
    33a2:	c0 f8       	bld	r12, 0
    33a4:	38 97       	sbiw	r30, 0x08	; 8
    33a6:	9f 5f       	subi	r25, 0xFF	; 255
    33a8:	90 32       	cpi	r25, 0x20	; 32
    33aa:	98 f3       	brcs	.-26     	; 0x3392 <menu_readModule+0x2a>
    33ac:	8e e1       	ldi	r24, 0x1E	; 30
    33ae:	3f d9       	rcall	.-3458   	; 0x262e <lcd_goto>
    33b0:	c0 92 dd 18 	sts	0x18DD, r12	; 0x8018dd <editLong>
    33b4:	d0 92 de 18 	sts	0x18DE, r13	; 0x8018de <editLong+0x1>
    33b8:	e0 92 df 18 	sts	0x18DF, r14	; 0x8018df <editLong+0x2>
    33bc:	f0 92 e0 18 	sts	0x18E0, r15	; 0x8018e0 <editLong+0x3>
    33c0:	0e 94 b3 39 	call	0x7366	; 0x7366 <lcd_longout>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	ff 90       	pop	r15
    33c8:	ef 90       	pop	r14
    33ca:	df 90       	pop	r13
    33cc:	cf 90       	pop	r12
    33ce:	08 95       	ret

000033d0 <menu_testModule>:
    33d0:	8e e1       	ldi	r24, 0x1E	; 30
    33d2:	2d d9       	rcall	.-3494   	; 0x262e <lcd_goto>
    33d4:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    33d8:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <test_PipeModule>
    33dc:	60 93 dd 18 	sts	0x18DD, r22	; 0x8018dd <editLong>
    33e0:	70 93 de 18 	sts	0x18DE, r23	; 0x8018de <editLong+0x1>
    33e4:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <editLong+0x2>
    33e8:	90 93 e0 18 	sts	0x18E0, r25	; 0x8018e0 <editLong+0x3>
    33ec:	0e 94 b3 39 	call	0x7366	; 0x7366 <lcd_longout>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	08 95       	ret

000033f4 <menuOnEnterTune>:
    33f4:	cf 93       	push	r28
    33f6:	8f 3f       	cpi	r24, 0xFF	; 255
    33f8:	09 f0       	breq	.+2      	; 0x33fc <menuOnEnterTune+0x8>
    33fa:	77 c0       	rjmp	.+238    	; 0x34ea <menuOnEnterTune+0xf6>
    33fc:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.3009>
    3400:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.3010>
    3404:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3408:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    340c:	3e 96       	adiw	r30, 0x0e	; 14
    340e:	85 91       	lpm	r24, Z+
    3410:	95 91       	lpm	r25, Z+
    3412:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    3416:	84 30       	cpi	r24, 0x04	; 4
    3418:	10 f0       	brcs	.+4      	; 0x341e <menuOnEnterTune+0x2a>
    341a:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	39 c0       	rjmp	.+114    	; 0x3494 <menuOnEnterTune+0xa0>
    3422:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	e2 2f       	mov	r30, r18
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	df 01       	movw	r26, r30
    342e:	aa 0f       	add	r26, r26
    3430:	bb 1f       	adc	r27, r27
    3432:	ad 01       	movw	r20, r26
    3434:	4e 0f       	add	r20, r30
    3436:	5f 1f       	adc	r21, r31
    3438:	dc 01       	movw	r26, r24
    343a:	aa 0f       	add	r26, r26
    343c:	bb 1f       	adc	r27, r27
    343e:	a8 0f       	add	r26, r24
    3440:	b9 1f       	adc	r27, r25
    3442:	aa 0f       	add	r26, r26
    3444:	bb 1f       	adc	r27, r27
    3446:	aa 0f       	add	r26, r26
    3448:	bb 1f       	adc	r27, r27
    344a:	a4 0f       	add	r26, r20
    344c:	b5 1f       	adc	r27, r21
    344e:	ac 5c       	subi	r26, 0xCC	; 204
    3450:	b6 4f       	sbci	r27, 0xF6	; 246
    3452:	3c 91       	ld	r19, X
    3454:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.3009>
    3458:	34 17       	cp	r19, r20
    345a:	10 f4       	brcc	.+4      	; 0x3460 <menuOnEnterTune+0x6c>
    345c:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.3009>
    3460:	af 01       	movw	r20, r30
    3462:	44 0f       	add	r20, r20
    3464:	55 1f       	adc	r21, r21
    3466:	e4 0f       	add	r30, r20
    3468:	f5 1f       	adc	r31, r21
    346a:	ac 01       	movw	r20, r24
    346c:	44 0f       	add	r20, r20
    346e:	55 1f       	adc	r21, r21
    3470:	84 0f       	add	r24, r20
    3472:	95 1f       	adc	r25, r21
    3474:	88 0f       	add	r24, r24
    3476:	99 1f       	adc	r25, r25
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	e8 0f       	add	r30, r24
    347e:	f9 1f       	adc	r31, r25
    3480:	ec 5c       	subi	r30, 0xCC	; 204
    3482:	f6 4f       	sbci	r31, 0xF6	; 246
    3484:	81 81       	ldd	r24, Z+1	; 0x01
    3486:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.3010>
    348a:	98 17       	cp	r25, r24
    348c:	10 f4       	brcc	.+4      	; 0x3492 <menuOnEnterTune+0x9e>
    348e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.3010>
    3492:	2f 5f       	subi	r18, 0xFF	; 255
    3494:	24 30       	cpi	r18, 0x04	; 4
    3496:	28 f2       	brcs	.-118    	; 0x3422 <menuOnEnterTune+0x2e>
    3498:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.3009>
    349c:	88 23       	and	r24, r24
    349e:	4c f4       	brge	.+18     	; 0x34b2 <menuOnEnterTune+0xbe>
    34a0:	8e e1       	ldi	r24, 0x1E	; 30
    34a2:	c5 d8       	rcall	.-3702   	; 0x262e <lcd_goto>
    34a4:	80 ea       	ldi	r24, 0xA0	; 160
    34a6:	93 e0       	ldi	r25, 0x03	; 3
    34a8:	34 d9       	rcall	.-3480   	; 0x2712 <lcd_puts_P>
    34aa:	8f ef       	ldi	r24, 0xFF	; 255
    34ac:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    34b0:	04 c0       	rjmp	.+8      	; 0x34ba <menuOnEnterTune+0xc6>
    34b2:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    34b6:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.3011>
    34ba:	66 ec       	ldi	r22, 0xC6	; 198
    34bc:	72 e1       	ldi	r23, 0x12	; 18
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    34c4:	65 ed       	ldi	r22, 0xD5	; 213
    34c6:	72 e1       	ldi	r23, 0x12	; 18
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    34ce:	6a ed       	ldi	r22, 0xDA	; 218
    34d0:	72 e1       	ldi	r23, 0x12	; 18
    34d2:	82 e0       	ldi	r24, 0x02	; 2
    34d4:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    34d8:	6c ed       	ldi	r22, 0xDC	; 220
    34da:	72 e1       	ldi	r23, 0x12	; 18
    34dc:	83 e0       	ldi	r24, 0x03	; 3
    34de:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    34e2:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
    34e6:	cf ef       	ldi	r28, 0xFF	; 255
    34e8:	71 c0       	rjmp	.+226    	; 0x35cc <menuOnEnterTune+0x1d8>
    34ea:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    34ee:	6f 3f       	cpi	r22, 0xFF	; 255
    34f0:	09 f4       	brne	.+2      	; 0x34f4 <menuOnEnterTune+0x100>
    34f2:	61 c0       	rjmp	.+194    	; 0x35b6 <menuOnEnterTune+0x1c2>
    34f4:	81 30       	cpi	r24, 0x01	; 1
    34f6:	d9 f4       	brne	.+54     	; 0x352e <menuOnEnterTune+0x13a>
    34f8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.3010>
    34fc:	68 17       	cp	r22, r24
    34fe:	08 f0       	brcs	.+2      	; 0x3502 <menuOnEnterTune+0x10e>
    3500:	5c c0       	rjmp	.+184    	; 0x35ba <menuOnEnterTune+0x1c6>
    3502:	40 e0       	ldi	r20, 0x00	; 0
    3504:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3508:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <manual_NoteOnOff>
    350c:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3510:	6f 5f       	subi	r22, 0xFF	; 255
    3512:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3516:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    351a:	81 30       	cpi	r24, 0x01	; 1
    351c:	09 f0       	breq	.+2      	; 0x3520 <menuOnEnterTune+0x12c>
    351e:	4f c0       	rjmp	.+158    	; 0x35be <menuOnEnterTune+0x1ca>
    3520:	41 e0       	ldi	r20, 0x01	; 1
    3522:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3526:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <manual_NoteOnOff>
    352a:	cf ef       	ldi	r28, 0xFF	; 255
    352c:	4f c0       	rjmp	.+158    	; 0x35cc <menuOnEnterTune+0x1d8>
    352e:	84 30       	cpi	r24, 0x04	; 4
    3530:	d1 f4       	brne	.+52     	; 0x3566 <menuOnEnterTune+0x172>
    3532:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.3009>
    3536:	86 17       	cp	r24, r22
    3538:	08 f0       	brcs	.+2      	; 0x353c <menuOnEnterTune+0x148>
    353a:	43 c0       	rjmp	.+134    	; 0x35c2 <menuOnEnterTune+0x1ce>
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3542:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <manual_NoteOnOff>
    3546:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    354a:	61 50       	subi	r22, 0x01	; 1
    354c:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3550:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    3554:	81 30       	cpi	r24, 0x01	; 1
    3556:	b9 f5       	brne	.+110    	; 0x35c6 <menuOnEnterTune+0x1d2>
    3558:	41 e0       	ldi	r20, 0x01	; 1
    355a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    355e:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <manual_NoteOnOff>
    3562:	cf ef       	ldi	r28, 0xFF	; 255
    3564:	33 c0       	rjmp	.+102    	; 0x35cc <menuOnEnterTune+0x1d8>
    3566:	83 30       	cpi	r24, 0x03	; 3
    3568:	91 f4       	brne	.+36     	; 0x358e <menuOnEnterTune+0x19a>
    356a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    356e:	81 11       	cpse	r24, r1
    3570:	04 c0       	rjmp	.+8      	; 0x357a <menuOnEnterTune+0x186>
    3572:	81 e0       	ldi	r24, 0x01	; 1
    3574:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.3011>
    3578:	02 c0       	rjmp	.+4      	; 0x357e <menuOnEnterTune+0x18a>
    357a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.3011>
    357e:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.3011>
    3582:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3586:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <manual_NoteOnOff>
    358a:	cf ef       	ldi	r28, 0xFF	; 255
    358c:	1f c0       	rjmp	.+62     	; 0x35cc <menuOnEnterTune+0x1d8>
    358e:	82 30       	cpi	r24, 0x02	; 2
    3590:	11 f0       	breq	.+4      	; 0x3596 <menuOnEnterTune+0x1a2>
    3592:	86 30       	cpi	r24, 0x06	; 6
    3594:	39 f4       	brne	.+14     	; 0x35a4 <menuOnEnterTune+0x1b0>
    3596:	40 e0       	ldi	r20, 0x00	; 0
    3598:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    359c:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <manual_NoteOnOff>
    35a0:	c0 e0       	ldi	r28, 0x00	; 0
    35a2:	14 c0       	rjmp	.+40     	; 0x35cc <menuOnEnterTune+0x1d8>
    35a4:	85 30       	cpi	r24, 0x05	; 5
    35a6:	89 f4       	brne	.+34     	; 0x35ca <menuOnEnterTune+0x1d6>
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    35ae:	0e 94 5b 32 	call	0x64b6	; 0x64b6 <manual_NoteOnOff>
    35b2:	c0 e0       	ldi	r28, 0x00	; 0
    35b4:	0b c0       	rjmp	.+22     	; 0x35cc <menuOnEnterTune+0x1d8>
    35b6:	c0 e0       	ldi	r28, 0x00	; 0
    35b8:	09 c0       	rjmp	.+18     	; 0x35cc <menuOnEnterTune+0x1d8>
    35ba:	cf ef       	ldi	r28, 0xFF	; 255
    35bc:	07 c0       	rjmp	.+14     	; 0x35cc <menuOnEnterTune+0x1d8>
    35be:	cf ef       	ldi	r28, 0xFF	; 255
    35c0:	05 c0       	rjmp	.+10     	; 0x35cc <menuOnEnterTune+0x1d8>
    35c2:	cf ef       	ldi	r28, 0xFF	; 255
    35c4:	03 c0       	rjmp	.+6      	; 0x35cc <menuOnEnterTune+0x1d8>
    35c6:	cf ef       	ldi	r28, 0xFF	; 255
    35c8:	01 c0       	rjmp	.+2      	; 0x35cc <menuOnEnterTune+0x1d8>
    35ca:	cf ef       	ldi	r28, 0xFF	; 255
    35cc:	cf 3f       	cpi	r28, 0xFF	; 255
    35ce:	59 f5       	brne	.+86     	; 0x3626 <menuOnEnterTune+0x232>
    35d0:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    35d4:	8f 3f       	cpi	r24, 0xFF	; 255
    35d6:	29 f1       	breq	.+74     	; 0x3622 <menuOnEnterTune+0x22e>
    35d8:	8e e1       	ldi	r24, 0x1E	; 30
    35da:	29 d8       	rcall	.-4014   	; 0x262e <lcd_goto>
    35dc:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    35e0:	0e 94 30 3b 	call	0x7660	; 0x7660 <lcd_noteOut>
    35e4:	80 e2       	ldi	r24, 0x20	; 32
    35e6:	4d d8       	rcall	.-3942   	; 0x2682 <lcd_putc>
    35e8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    35ec:	81 11       	cpse	r24, r1
    35ee:	07 c0       	rjmp	.+14     	; 0x35fe <menuOnEnterTune+0x20a>
    35f0:	81 e6       	ldi	r24, 0x61	; 97
    35f2:	47 d8       	rcall	.-3954   	; 0x2682 <lcd_putc>
    35f4:	85 e7       	ldi	r24, 0x75	; 117
    35f6:	45 d8       	rcall	.-3958   	; 0x2682 <lcd_putc>
    35f8:	83 e7       	ldi	r24, 0x73	; 115
    35fa:	43 d8       	rcall	.-3962   	; 0x2682 <lcd_putc>
    35fc:	06 c0       	rjmp	.+12     	; 0x360a <menuOnEnterTune+0x216>
    35fe:	85 e6       	ldi	r24, 0x65	; 101
    3600:	40 d8       	rcall	.-3968   	; 0x2682 <lcd_putc>
    3602:	89 e6       	ldi	r24, 0x69	; 105
    3604:	3e d8       	rcall	.-3972   	; 0x2682 <lcd_putc>
    3606:	8e e6       	ldi	r24, 0x6E	; 110
    3608:	3c d8       	rcall	.-3976   	; 0x2682 <lcd_putc>
    360a:	61 e0       	ldi	r22, 0x01	; 1
    360c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3011>
    3610:	81 11       	cpse	r24, r1
    3612:	01 c0       	rjmp	.+2      	; 0x3616 <menuOnEnterTune+0x222>
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <keylabel_statcheck>
    361c:	81 11       	cpse	r24, r1
    361e:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
    3622:	8e e1       	ldi	r24, 0x1E	; 30
    3624:	04 d8       	rcall	.-4088   	; 0x262e <lcd_goto>
    3626:	8c 2f       	mov	r24, r28
    3628:	cf 91       	pop	r28
    362a:	08 95       	ret

0000362c <menuOnExitMidiActiveSense>:
    362c:	0e 94 23 0c 	call	0x1846	; 0x1846 <eeprom_UpdateMidiOutMap>
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	08 95       	ret

00003634 <menuOnExitMidiOut>:
    3634:	0e 94 23 0c 	call	0x1846	; 0x1846 <eeprom_UpdateMidiOutMap>
    3638:	80 e0       	ldi	r24, 0x00	; 0
    363a:	08 95       	ret

0000363c <menuOnExitMidiIn>:
    363c:	0e 94 01 0c 	call	0x1802	; 0x1802 <eeprom_UpdateMidiInMap>
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	08 95       	ret

00003644 <menuOnExitManual>:
    3644:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_UpdateManualMap>
    3648:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <registers_CalcCount>
    364c:	0e 94 bf 0c 	call	0x197e	; 0x197e <eeprom_UpdateReg>
    3650:	0e 94 60 31 	call	0x62c0	; 0x62c0 <Midi_updateManualRange>
    3654:	80 e0       	ldi	r24, 0x00	; 0
    3656:	08 95       	ret

00003658 <menuOnExitModules>:
    3658:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <eeprom_UpdateModules>
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	08 95       	ret

00003660 <menuOnEnterUSBprotokoll>:
    3660:	cf 93       	push	r28
    3662:	83 e8       	ldi	r24, 0x83	; 131
    3664:	93 e0       	ldi	r25, 0x03	; 3
    3666:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    366a:	6e d8       	rcall	.-3876   	; 0x2748 <log_count>
    366c:	81 11       	cpse	r24, r1
    366e:	17 c0       	rjmp	.+46     	; 0x369e <menuOnEnterUSBprotokoll+0x3e>
    3670:	89 e8       	ldi	r24, 0x89	; 137
    3672:	93 e0       	ldi	r25, 0x03	; 3
    3674:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3678:	16 c0       	rjmp	.+44     	; 0x36a6 <menuOnEnterUSBprotokoll+0x46>
    367a:	6f ef       	ldi	r22, 0xFF	; 255
    367c:	8c 2f       	mov	r24, r28
    367e:	05 da       	rcall	.-3062   	; 0x2a8a <log_getShortTextFromIndex>
    3680:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3684:	8e ef       	ldi	r24, 0xFE	; 254
    3686:	92 e1       	ldi	r25, 0x12	; 18
    3688:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    368c:	8c 2f       	mov	r24, r28
    368e:	a3 d8       	rcall	.-3770   	; 0x27d6 <log_getErrorText>
    3690:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3694:	8e ef       	ldi	r24, 0xFE	; 254
    3696:	92 e1       	ldi	r25, 0x12	; 18
    3698:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    369c:	8c 2f       	mov	r24, r28
    369e:	cf ef       	ldi	r28, 0xFF	; 255
    36a0:	c8 0f       	add	r28, r24
    36a2:	81 11       	cpse	r24, r1
    36a4:	ea cf       	rjmp	.-44     	; 0x367a <menuOnEnterUSBprotokoll+0x1a>
    36a6:	80 e0       	ldi	r24, 0x00	; 0
    36a8:	cf 91       	pop	r28
    36aa:	08 95       	ret

000036ac <menuOnExitUSBactive>:
    36ac:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <eeprom_UpdateUSB>
    36b0:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    36b4:	8f 3f       	cpi	r24, 0xFF	; 255
    36b6:	61 f4       	brne	.+24     	; 0x36d0 <menuOnExitUSBactive+0x24>
    36b8:	8a e6       	ldi	r24, 0x6A	; 106
    36ba:	93 e0       	ldi	r25, 0x03	; 3
    36bc:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    36c0:	8e e9       	ldi	r24, 0x9E	; 158
    36c2:	92 e1       	ldi	r25, 0x12	; 18
    36c4:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    36c8:	8e ef       	ldi	r24, 0xFE	; 254
    36ca:	92 e1       	ldi	r25, 0x12	; 18
    36cc:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	08 95       	ret

000036d4 <menuOnEnterUSBsendHW>:
    36d4:	9f 92       	push	r9
    36d6:	af 92       	push	r10
    36d8:	bf 92       	push	r11
    36da:	cf 92       	push	r12
    36dc:	df 92       	push	r13
    36de:	ef 92       	push	r14
    36e0:	ff 92       	push	r15
    36e2:	0f 93       	push	r16
    36e4:	1f 93       	push	r17
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	81 e5       	ldi	r24, 0x51	; 81
    36ec:	93 e0       	ldi	r25, 0x03	; 3
    36ee:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    36f2:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    36f6:	8e e3       	ldi	r24, 0x3E	; 62
    36f8:	93 e0       	ldi	r25, 0x03	; 3
    36fa:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    36fe:	c5 e5       	ldi	r28, 0x55	; 85
    3700:	d3 e0       	ldi	r29, 0x03	; 3
    3702:	61 ee       	ldi	r22, 0xE1	; 225
    3704:	78 e1       	ldi	r23, 0x18	; 24
    3706:	88 81       	ld	r24, Y
    3708:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    370c:	22 e7       	ldi	r18, 0x72	; 114
    370e:	fc 01       	movw	r30, r24
    3710:	20 83       	st	Z, r18
    3712:	bc 01       	movw	r22, r24
    3714:	6e 5f       	subi	r22, 0xFE	; 254
    3716:	7f 4f       	sbci	r23, 0xFF	; 255
    3718:	20 e2       	ldi	r18, 0x20	; 32
    371a:	21 83       	std	Z+1, r18	; 0x01
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    3722:	27 e7       	ldi	r18, 0x77	; 119
    3724:	fc 01       	movw	r30, r24
    3726:	20 83       	st	Z, r18
    3728:	81 ee       	ldi	r24, 0xE1	; 225
    372a:	98 e1       	ldi	r25, 0x18	; 24
    372c:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3730:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3734:	8c e2       	ldi	r24, 0x2C	; 44
    3736:	93 e0       	ldi	r25, 0x03	; 3
    3738:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    373c:	61 ee       	ldi	r22, 0xE1	; 225
    373e:	78 e1       	ldi	r23, 0x18	; 24
    3740:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    3744:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    3748:	81 ee       	ldi	r24, 0xE1	; 225
    374a:	98 e1       	ldi	r25, 0x18	; 24
    374c:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3750:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3754:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3758:	e1 2c       	mov	r14, r1
    375a:	d1 c0       	rjmp	.+418    	; 0x38fe <menuOnEnterUSBsendHW+0x22a>
    375c:	83 e2       	ldi	r24, 0x23	; 35
    375e:	93 e0       	ldi	r25, 0x03	; 3
    3760:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3764:	61 ee       	ldi	r22, 0xE1	; 225
    3766:	78 e1       	ldi	r23, 0x18	; 24
    3768:	8e 2d       	mov	r24, r14
    376a:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <putChar_Manual>
    376e:	81 ee       	ldi	r24, 0xE1	; 225
    3770:	98 e1       	ldi	r25, 0x18	; 24
    3772:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3776:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    377a:	f1 2c       	mov	r15, r1
    377c:	a4 c0       	rjmp	.+328    	; 0x38c6 <menuOnEnterUSBsendHW+0x1f2>
    377e:	8c e1       	ldi	r24, 0x1C	; 28
    3780:	93 e0       	ldi	r25, 0x03	; 3
    3782:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3786:	80 e3       	ldi	r24, 0x30	; 48
    3788:	8f 0d       	add	r24, r15
    378a:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    378e:	8a e3       	ldi	r24, 0x3A	; 58
    3790:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    3794:	80 e2       	ldi	r24, 0x20	; 32
    3796:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    379a:	0e 2d       	mov	r16, r14
    379c:	10 e0       	ldi	r17, 0x00	; 0
    379e:	cf 2c       	mov	r12, r15
    37a0:	d1 2c       	mov	r13, r1
    37a2:	e6 01       	movw	r28, r12
    37a4:	cc 0f       	add	r28, r28
    37a6:	dd 1f       	adc	r29, r29
    37a8:	ce 01       	movw	r24, r28
    37aa:	8c 0d       	add	r24, r12
    37ac:	9d 1d       	adc	r25, r13
    37ae:	e8 01       	movw	r28, r16
    37b0:	cc 0f       	add	r28, r28
    37b2:	dd 1f       	adc	r29, r29
    37b4:	c0 0f       	add	r28, r16
    37b6:	d1 1f       	adc	r29, r17
    37b8:	cc 0f       	add	r28, r28
    37ba:	dd 1f       	adc	r29, r29
    37bc:	cc 0f       	add	r28, r28
    37be:	dd 1f       	adc	r29, r29
    37c0:	c8 0f       	add	r28, r24
    37c2:	d9 1f       	adc	r29, r25
    37c4:	cc 5c       	subi	r28, 0xCC	; 204
    37c6:	d6 4f       	sbci	r29, 0xF6	; 246
    37c8:	61 ee       	ldi	r22, 0xE1	; 225
    37ca:	78 e1       	ldi	r23, 0x18	; 24
    37cc:	88 81       	ld	r24, Y
    37ce:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    37d2:	bc 01       	movw	r22, r24
    37d4:	6f 5f       	subi	r22, 0xFF	; 255
    37d6:	7f 4f       	sbci	r23, 0xFF	; 255
    37d8:	0f 2e       	mov	r0, r31
    37da:	fe e2       	ldi	r31, 0x2E	; 46
    37dc:	bf 2e       	mov	r11, r31
    37de:	f0 2d       	mov	r31, r0
    37e0:	fc 01       	movw	r30, r24
    37e2:	b0 82       	st	Z, r11
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    37ea:	bc 01       	movw	r22, r24
    37ec:	6f 5f       	subi	r22, 0xFF	; 255
    37ee:	7f 4f       	sbci	r23, 0xFF	; 255
    37f0:	fc 01       	movw	r30, r24
    37f2:	b0 82       	st	Z, r11
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    37fa:	fc 01       	movw	r30, r24
    37fc:	80 e2       	ldi	r24, 0x20	; 32
    37fe:	80 83       	st	Z, r24
    3800:	9d e3       	ldi	r25, 0x3D	; 61
    3802:	91 83       	std	Z+1, r25	; 0x01
    3804:	82 83       	std	Z+2, r24	; 0x02
    3806:	81 ee       	ldi	r24, 0xE1	; 225
    3808:	98 e1       	ldi	r25, 0x18	; 24
    380a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    380e:	88 81       	ld	r24, Y
    3810:	88 23       	and	r24, r24
    3812:	2c f4       	brge	.+10     	; 0x381e <menuOnEnterUSBsendHW+0x14a>
    3814:	8a e0       	ldi	r24, 0x0A	; 10
    3816:	93 e0       	ldi	r25, 0x03	; 3
    3818:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    381c:	51 c0       	rjmp	.+162    	; 0x38c0 <menuOnEnterUSBsendHW+0x1ec>
    381e:	61 ee       	ldi	r22, 0xE1	; 225
    3820:	78 e1       	ldi	r23, 0x18	; 24
    3822:	0e 94 8d 3a 	call	0x751a	; 0x751a <putChar_Note>
    3826:	bc 01       	movw	r22, r24
    3828:	6f 5f       	subi	r22, 0xFF	; 255
    382a:	7f 4f       	sbci	r23, 0xFF	; 255
    382c:	0f 2e       	mov	r0, r31
    382e:	fd e2       	ldi	r31, 0x2D	; 45
    3830:	9f 2e       	mov	r9, r31
    3832:	f0 2d       	mov	r31, r0
    3834:	fc 01       	movw	r30, r24
    3836:	90 82       	st	Z, r9
    3838:	f6 01       	movw	r30, r12
    383a:	ee 0f       	add	r30, r30
    383c:	ff 1f       	adc	r31, r31
    383e:	ce 0e       	add	r12, r30
    3840:	df 1e       	adc	r13, r31
    3842:	58 01       	movw	r10, r16
    3844:	aa 0c       	add	r10, r10
    3846:	bb 1c       	adc	r11, r11
    3848:	e5 01       	movw	r28, r10
    384a:	c0 0f       	add	r28, r16
    384c:	d1 1f       	adc	r29, r17
    384e:	cc 0f       	add	r28, r28
    3850:	dd 1f       	adc	r29, r29
    3852:	cc 0f       	add	r28, r28
    3854:	dd 1f       	adc	r29, r29
    3856:	cc 0d       	add	r28, r12
    3858:	dd 1d       	adc	r29, r13
    385a:	cc 5c       	subi	r28, 0xCC	; 204
    385c:	d6 4f       	sbci	r29, 0xF6	; 246
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	0e 94 8d 3a 	call	0x751a	; 0x751a <putChar_Note>
    3864:	20 e2       	ldi	r18, 0x20	; 32
    3866:	fc 01       	movw	r30, r24
    3868:	20 83       	st	Z, r18
    386a:	11 82       	std	Z+1, r1	; 0x01
    386c:	81 ee       	ldi	r24, 0xE1	; 225
    386e:	98 e1       	ldi	r25, 0x18	; 24
    3870:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3874:	82 e0       	ldi	r24, 0x02	; 2
    3876:	93 e0       	ldi	r25, 0x03	; 3
    3878:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    387c:	8a 81       	ldd	r24, Y+2	; 0x02
    387e:	82 95       	swap	r24
    3880:	86 95       	lsr	r24
    3882:	87 70       	andi	r24, 0x07	; 7
    3884:	80 5d       	subi	r24, 0xD0	; 208
    3886:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    388a:	8a ef       	ldi	r24, 0xFA	; 250
    388c:	92 e0       	ldi	r25, 0x02	; 2
    388e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3892:	8a 81       	ldd	r24, Y+2	; 0x02
    3894:	61 ee       	ldi	r22, 0xE1	; 225
    3896:	78 e1       	ldi	r23, 0x18	; 24
    3898:	8f 71       	andi	r24, 0x1F	; 31
    389a:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    389e:	bc 01       	movw	r22, r24
    38a0:	6f 5f       	subi	r22, 0xFF	; 255
    38a2:	7f 4f       	sbci	r23, 0xFF	; 255
    38a4:	fc 01       	movw	r30, r24
    38a6:	90 82       	st	Z, r9
    38a8:	8a 81       	ldd	r24, Y+2	; 0x02
    38aa:	99 81       	ldd	r25, Y+1	; 0x01
    38ac:	28 81       	ld	r18, Y
    38ae:	8f 71       	andi	r24, 0x1F	; 31
    38b0:	89 0f       	add	r24, r25
    38b2:	82 1b       	sub	r24, r18
    38b4:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    38b8:	81 ee       	ldi	r24, 0xE1	; 225
    38ba:	98 e1       	ldi	r25, 0x18	; 24
    38bc:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    38c0:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    38c4:	f3 94       	inc	r15
    38c6:	f3 e0       	ldi	r31, 0x03	; 3
    38c8:	ff 15       	cp	r31, r15
    38ca:	08 f0       	brcs	.+2      	; 0x38ce <menuOnEnterUSBsendHW+0x1fa>
    38cc:	58 cf       	rjmp	.-336    	; 0x377e <menuOnEnterUSBsendHW+0xaa>
    38ce:	88 ed       	ldi	r24, 0xD8	; 216
    38d0:	92 e0       	ldi	r25, 0x02	; 2
    38d2:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    38d6:	ee 2d       	mov	r30, r14
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	ee 0f       	add	r30, r30
    38dc:	ff 1f       	adc	r31, r31
    38de:	e8 5d       	subi	r30, 0xD8	; 216
    38e0:	f6 4f       	sbci	r31, 0xF6	; 246
    38e2:	61 ee       	ldi	r22, 0xE1	; 225
    38e4:	78 e1       	ldi	r23, 0x18	; 24
    38e6:	81 81       	ldd	r24, Z+1	; 0x01
    38e8:	0e 94 4d 3a 	call	0x749a	; 0x749a <putChar_MidiChan>
    38ec:	81 ee       	ldi	r24, 0xE1	; 225
    38ee:	98 e1       	ldi	r25, 0x18	; 24
    38f0:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    38f4:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    38f8:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    38fc:	e3 94       	inc	r14
    38fe:	83 e0       	ldi	r24, 0x03	; 3
    3900:	8e 15       	cp	r24, r14
    3902:	08 f0       	brcs	.+2      	; 0x3906 <menuOnEnterUSBsendHW+0x232>
    3904:	2b cf       	rjmp	.-426    	; 0x375c <menuOnEnterUSBsendHW+0x88>
    3906:	80 e1       	ldi	r24, 0x10	; 16
    3908:	93 e0       	ldi	r25, 0x03	; 3
    390a:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    390e:	f1 2c       	mov	r15, r1
    3910:	94 c0       	rjmp	.+296    	; 0x3a3a <menuOnEnterUSBsendHW+0x366>
    3912:	8c e1       	ldi	r24, 0x1C	; 28
    3914:	93 e0       	ldi	r25, 0x03	; 3
    3916:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    391a:	80 e3       	ldi	r24, 0x30	; 48
    391c:	8f 0d       	add	r24, r15
    391e:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    3922:	8a e3       	ldi	r24, 0x3A	; 58
    3924:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    3928:	80 e2       	ldi	r24, 0x20	; 32
    392a:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    392e:	cf 2d       	mov	r28, r15
    3930:	d0 e0       	ldi	r29, 0x00	; 0
    3932:	8e 01       	movw	r16, r28
    3934:	00 0f       	add	r16, r16
    3936:	11 1f       	adc	r17, r17
    3938:	0c 0f       	add	r16, r28
    393a:	1d 1f       	adc	r17, r29
    393c:	09 50       	subi	r16, 0x09	; 9
    393e:	18 4f       	sbci	r17, 0xF8	; 248
    3940:	61 ee       	ldi	r22, 0xE1	; 225
    3942:	78 e1       	ldi	r23, 0x18	; 24
    3944:	f8 01       	movw	r30, r16
    3946:	80 81       	ld	r24, Z
    3948:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    394c:	bc 01       	movw	r22, r24
    394e:	6f 5f       	subi	r22, 0xFF	; 255
    3950:	7f 4f       	sbci	r23, 0xFF	; 255
    3952:	0f 2e       	mov	r0, r31
    3954:	fe e2       	ldi	r31, 0x2E	; 46
    3956:	ef 2e       	mov	r14, r31
    3958:	f0 2d       	mov	r31, r0
    395a:	fc 01       	movw	r30, r24
    395c:	e0 82       	st	Z, r14
    395e:	f8 01       	movw	r30, r16
    3960:	81 81       	ldd	r24, Z+1	; 0x01
    3962:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    3966:	bc 01       	movw	r22, r24
    3968:	6f 5f       	subi	r22, 0xFF	; 255
    396a:	7f 4f       	sbci	r23, 0xFF	; 255
    396c:	fc 01       	movw	r30, r24
    396e:	e0 82       	st	Z, r14
    3970:	f8 01       	movw	r30, r16
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	0e 94 35 3a 	call	0x746a	; 0x746a <putChar_hex>
    3978:	fc 01       	movw	r30, r24
    397a:	80 e2       	ldi	r24, 0x20	; 32
    397c:	80 83       	st	Z, r24
    397e:	9d e3       	ldi	r25, 0x3D	; 61
    3980:	91 83       	std	Z+1, r25	; 0x01
    3982:	82 83       	std	Z+2, r24	; 0x02
    3984:	13 82       	std	Z+3, r1	; 0x03
    3986:	81 ee       	ldi	r24, 0xE1	; 225
    3988:	98 e1       	ldi	r25, 0x18	; 24
    398a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    398e:	f8 01       	movw	r30, r16
    3990:	80 81       	ld	r24, Z
    3992:	8f 3f       	cpi	r24, 0xFF	; 255
    3994:	29 f4       	brne	.+10     	; 0x39a0 <menuOnEnterUSBsendHW+0x2cc>
    3996:	8a e0       	ldi	r24, 0x0A	; 10
    3998:	93 e0       	ldi	r25, 0x03	; 3
    399a:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    399e:	4a c0       	rjmp	.+148    	; 0x3a34 <menuOnEnterUSBsendHW+0x360>
    39a0:	e1 ee       	ldi	r30, 0xE1	; 225
    39a2:	f8 e1       	ldi	r31, 0x18	; 24
    39a4:	92 e5       	ldi	r25, 0x52	; 82
    39a6:	90 83       	st	Z, r25
    39a8:	9e e2       	ldi	r25, 0x2E	; 46
    39aa:	91 83       	std	Z+1, r25	; 0x01
    39ac:	63 ee       	ldi	r22, 0xE3	; 227
    39ae:	78 e1       	ldi	r23, 0x18	; 24
    39b0:	8f 5f       	subi	r24, 0xFF	; 255
    39b2:	0e 94 0e 3a 	call	0x741c	; 0x741c <putChar_Dec>
    39b6:	bc 01       	movw	r22, r24
    39b8:	6f 5f       	subi	r22, 0xFF	; 255
    39ba:	7f 4f       	sbci	r23, 0xFF	; 255
    39bc:	1d e2       	ldi	r17, 0x2D	; 45
    39be:	fc 01       	movw	r30, r24
    39c0:	10 83       	st	Z, r17
    39c2:	ce 01       	movw	r24, r28
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	c8 0f       	add	r28, r24
    39ca:	d9 1f       	adc	r29, r25
    39cc:	c9 50       	subi	r28, 0x09	; 9
    39ce:	d8 4f       	sbci	r29, 0xF8	; 248
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	8f 5f       	subi	r24, 0xFF	; 255
    39d4:	0e 94 0e 3a 	call	0x741c	; 0x741c <putChar_Dec>
    39d8:	20 e2       	ldi	r18, 0x20	; 32
    39da:	fc 01       	movw	r30, r24
    39dc:	20 83       	st	Z, r18
    39de:	11 82       	std	Z+1, r1	; 0x01
    39e0:	81 ee       	ldi	r24, 0xE1	; 225
    39e2:	98 e1       	ldi	r25, 0x18	; 24
    39e4:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    39e8:	82 e0       	ldi	r24, 0x02	; 2
    39ea:	93 e0       	ldi	r25, 0x03	; 3
    39ec:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    39f0:	8a 81       	ldd	r24, Y+2	; 0x02
    39f2:	82 95       	swap	r24
    39f4:	86 95       	lsr	r24
    39f6:	87 70       	andi	r24, 0x07	; 7
    39f8:	80 5d       	subi	r24, 0xD0	; 208
    39fa:	0e 94 6e 36 	call	0x6cdc	; 0x6cdc <serial0SER_USBSend>
    39fe:	8a ef       	ldi	r24, 0xFA	; 250
    3a00:	92 e0       	ldi	r25, 0x02	; 2
    3a02:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3a06:	8a 81       	ldd	r24, Y+2	; 0x02
    3a08:	61 ee       	ldi	r22, 0xE1	; 225
    3a0a:	78 e1       	ldi	r23, 0x18	; 24
    3a0c:	8f 71       	andi	r24, 0x1F	; 31
    3a0e:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    3a12:	bc 01       	movw	r22, r24
    3a14:	6f 5f       	subi	r22, 0xFF	; 255
    3a16:	7f 4f       	sbci	r23, 0xFF	; 255
    3a18:	fc 01       	movw	r30, r24
    3a1a:	10 83       	st	Z, r17
    3a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1e:	99 81       	ldd	r25, Y+1	; 0x01
    3a20:	28 81       	ld	r18, Y
    3a22:	8f 71       	andi	r24, 0x1F	; 31
    3a24:	89 0f       	add	r24, r25
    3a26:	82 1b       	sub	r24, r18
    3a28:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <putChar_Dec2>
    3a2c:	81 ee       	ldi	r24, 0xE1	; 225
    3a2e:	98 e1       	ldi	r25, 0x18	; 24
    3a30:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3a34:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3a38:	f3 94       	inc	r15
    3a3a:	f7 e0       	ldi	r31, 0x07	; 7
    3a3c:	ff 15       	cp	r31, r15
    3a3e:	08 f0       	brcs	.+2      	; 0x3a42 <menuOnEnterUSBsendHW+0x36e>
    3a40:	68 cf       	rjmp	.-304    	; 0x3912 <menuOnEnterUSBsendHW+0x23e>
    3a42:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3a46:	8f ec       	ldi	r24, 0xCF	; 207
    3a48:	92 e0       	ldi	r25, 0x02	; 2
    3a4a:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3a4e:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3a52:	e1 2c       	mov	r14, r1
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	64 c0       	rjmp	.+200    	; 0x3b20 <menuOnEnterUSBsendHW+0x44c>
    3a58:	ce 2d       	mov	r28, r14
    3a5a:	d0 e0       	ldi	r29, 0x00	; 0
    3a5c:	0f 2d       	mov	r16, r15
    3a5e:	10 e0       	ldi	r17, 0x00	; 0
    3a60:	fe 01       	movw	r30, r28
    3a62:	ee 0f       	add	r30, r30
    3a64:	ff 1f       	adc	r31, r31
    3a66:	ee 0f       	add	r30, r30
    3a68:	ff 1f       	adc	r31, r31
    3a6a:	e0 0f       	add	r30, r16
    3a6c:	f1 1f       	adc	r31, r17
    3a6e:	ee 0f       	add	r30, r30
    3a70:	ff 1f       	adc	r31, r31
    3a72:	ee 0f       	add	r30, r30
    3a74:	ff 1f       	adc	r31, r31
    3a76:	e8 5d       	subi	r30, 0xD8	; 216
    3a78:	f7 4f       	sbci	r31, 0xF7	; 247
    3a7a:	80 81       	ld	r24, Z
    3a7c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a7e:	09 f4       	brne	.+2      	; 0x3a82 <menuOnEnterUSBsendHW+0x3ae>
    3a80:	47 c0       	rjmp	.+142    	; 0x3b10 <menuOnEnterUSBsendHW+0x43c>
    3a82:	61 ee       	ldi	r22, 0xE1	; 225
    3a84:	78 e1       	ldi	r23, 0x18	; 24
    3a86:	8e 2d       	mov	r24, r14
    3a88:	0e 94 4d 3a 	call	0x749a	; 0x749a <putChar_MidiChan>
    3a8c:	bc 01       	movw	r22, r24
    3a8e:	6f 5f       	subi	r22, 0xFF	; 255
    3a90:	7f 4f       	sbci	r23, 0xFF	; 255
    3a92:	0f 2e       	mov	r0, r31
    3a94:	f8 e2       	ldi	r31, 0x28	; 40
    3a96:	df 2e       	mov	r13, r31
    3a98:	f0 2d       	mov	r31, r0
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	d0 82       	st	Z, r13
    3a9e:	cc 0f       	add	r28, r28
    3aa0:	dd 1f       	adc	r29, r29
    3aa2:	cc 0f       	add	r28, r28
    3aa4:	dd 1f       	adc	r29, r29
    3aa6:	c0 0f       	add	r28, r16
    3aa8:	d1 1f       	adc	r29, r17
    3aaa:	cc 0f       	add	r28, r28
    3aac:	dd 1f       	adc	r29, r29
    3aae:	cc 0f       	add	r28, r28
    3ab0:	dd 1f       	adc	r29, r29
    3ab2:	c8 5d       	subi	r28, 0xD8	; 216
    3ab4:	d7 4f       	sbci	r29, 0xF7	; 247
    3ab6:	89 81       	ldd	r24, Y+1	; 0x01
    3ab8:	0e 94 8d 3a 	call	0x751a	; 0x751a <putChar_Note>
    3abc:	bc 01       	movw	r22, r24
    3abe:	6f 5f       	subi	r22, 0xFF	; 255
    3ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac2:	2d e2       	ldi	r18, 0x2D	; 45
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	20 83       	st	Z, r18
    3ac8:	99 81       	ldd	r25, Y+1	; 0x01
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	89 0f       	add	r24, r25
    3ace:	0e 94 8d 3a 	call	0x751a	; 0x751a <putChar_Note>
    3ad2:	fc 01       	movw	r30, r24
    3ad4:	19 e2       	ldi	r17, 0x29	; 41
    3ad6:	10 83       	st	Z, r17
    3ad8:	80 e2       	ldi	r24, 0x20	; 32
    3ada:	81 83       	std	Z+1, r24	; 0x01
    3adc:	bf 01       	movw	r22, r30
    3ade:	6d 5f       	subi	r22, 0xFD	; 253
    3ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    3ae2:	8e e3       	ldi	r24, 0x3E	; 62
    3ae4:	82 83       	std	Z+2, r24	; 0x02
    3ae6:	88 81       	ld	r24, Y
    3ae8:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <putChar_Manual>
    3aec:	bc 01       	movw	r22, r24
    3aee:	6f 5f       	subi	r22, 0xFF	; 255
    3af0:	7f 4f       	sbci	r23, 0xFF	; 255
    3af2:	fc 01       	movw	r30, r24
    3af4:	d0 82       	st	Z, r13
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	0e 94 8d 3a 	call	0x751a	; 0x751a <putChar_Note>
    3afc:	fc 01       	movw	r30, r24
    3afe:	10 83       	st	Z, r17
    3b00:	11 82       	std	Z+1, r1	; 0x01
    3b02:	81 ee       	ldi	r24, 0xE1	; 225
    3b04:	98 e1       	ldi	r25, 0x18	; 24
    3b06:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3b0a:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3b0e:	9f ef       	ldi	r25, 0xFF	; 255
    3b10:	f3 94       	inc	r15
    3b12:	01 c0       	rjmp	.+2      	; 0x3b16 <menuOnEnterUSBsendHW+0x442>
    3b14:	f1 2c       	mov	r15, r1
    3b16:	f3 e0       	ldi	r31, 0x03	; 3
    3b18:	ff 15       	cp	r31, r15
    3b1a:	08 f0       	brcs	.+2      	; 0x3b1e <menuOnEnterUSBsendHW+0x44a>
    3b1c:	9d cf       	rjmp	.-198    	; 0x3a58 <menuOnEnterUSBsendHW+0x384>
    3b1e:	e3 94       	inc	r14
    3b20:	8f e0       	ldi	r24, 0x0F	; 15
    3b22:	8e 15       	cp	r24, r14
    3b24:	b8 f7       	brcc	.-18     	; 0x3b14 <menuOnEnterUSBsendHW+0x440>
    3b26:	91 11       	cpse	r25, r1
    3b28:	06 c0       	rjmp	.+12     	; 0x3b36 <menuOnEnterUSBsendHW+0x462>
    3b2a:	84 eb       	ldi	r24, 0xB4	; 180
    3b2c:	92 e0       	ldi	r25, 0x02	; 2
    3b2e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3b32:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3b36:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3b3a:	85 ec       	ldi	r24, 0xC5	; 197
    3b3c:	92 e0       	ldi	r25, 0x02	; 2
    3b3e:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3b42:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3b46:	c0 e0       	ldi	r28, 0x00	; 0
    3b48:	25 c0       	rjmp	.+74     	; 0x3b94 <menuOnEnterUSBsendHW+0x4c0>
    3b4a:	61 ee       	ldi	r22, 0xE1	; 225
    3b4c:	78 e1       	ldi	r23, 0x18	; 24
    3b4e:	8c 2f       	mov	r24, r28
    3b50:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <putChar_Manual>
    3b54:	dc 01       	movw	r26, r24
    3b56:	bc 01       	movw	r22, r24
    3b58:	6f 5f       	subi	r22, 0xFF	; 255
    3b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b5c:	8a e3       	ldi	r24, 0x3A	; 58
    3b5e:	8c 93       	st	X, r24
    3b60:	ec 2f       	mov	r30, r28
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	ee 0f       	add	r30, r30
    3b66:	ff 1f       	adc	r31, r31
    3b68:	e8 5d       	subi	r30, 0xD8	; 216
    3b6a:	f6 4f       	sbci	r31, 0xF6	; 246
    3b6c:	80 81       	ld	r24, Z
    3b6e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b70:	19 f0       	breq	.+6      	; 0x3b78 <menuOnEnterUSBsendHW+0x4a4>
    3b72:	0e 94 4d 3a 	call	0x749a	; 0x749a <putChar_MidiChan>
    3b76:	05 c0       	rjmp	.+10     	; 0x3b82 <menuOnEnterUSBsendHW+0x4ae>
    3b78:	cd 01       	movw	r24, r26
    3b7a:	02 96       	adiw	r24, 0x02	; 2
    3b7c:	2d e2       	ldi	r18, 0x2D	; 45
    3b7e:	11 96       	adiw	r26, 0x01	; 1
    3b80:	2c 93       	st	X, r18
    3b82:	fc 01       	movw	r30, r24
    3b84:	10 82       	st	Z, r1
    3b86:	81 ee       	ldi	r24, 0xE1	; 225
    3b88:	98 e1       	ldi	r25, 0x18	; 24
    3b8a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3b8e:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3b92:	cf 5f       	subi	r28, 0xFF	; 255
    3b94:	c4 30       	cpi	r28, 0x04	; 4
    3b96:	c8 f2       	brcs	.-78     	; 0x3b4a <menuOnEnterUSBsendHW+0x476>
    3b98:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3b9c:	89 eb       	ldi	r24, 0xB9	; 185
    3b9e:	92 e0       	ldi	r25, 0x02	; 2
    3ba0:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <serial0SER_USB_sendStringP>
    3ba4:	c6 e2       	ldi	r28, 0x26	; 38
    3ba6:	d8 e0       	ldi	r29, 0x08	; 8
    3ba8:	61 ee       	ldi	r22, 0xE1	; 225
    3baa:	78 e1       	ldi	r23, 0x18	; 24
    3bac:	88 81       	ld	r24, Y
    3bae:	0e 94 4d 3a 	call	0x749a	; 0x749a <putChar_MidiChan>
    3bb2:	bc 01       	movw	r22, r24
    3bb4:	6f 5f       	subi	r22, 0xFF	; 255
    3bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb8:	2e e3       	ldi	r18, 0x3E	; 62
    3bba:	fc 01       	movw	r30, r24
    3bbc:	20 83       	st	Z, r18
    3bbe:	89 81       	ldd	r24, Y+1	; 0x01
    3bc0:	0e 94 4d 3a 	call	0x749a	; 0x749a <putChar_MidiChan>
    3bc4:	fc 01       	movw	r30, r24
    3bc6:	10 82       	st	Z, r1
    3bc8:	81 ee       	ldi	r24, 0xE1	; 225
    3bca:	98 e1       	ldi	r25, 0x18	; 24
    3bcc:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <serial0SER_USB_sendString>
    3bd0:	0e 94 76 37 	call	0x6eec	; 0x6eec <serial0SER_USB_sendCRLF>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	ff 90       	pop	r15
    3be0:	ef 90       	pop	r14
    3be2:	df 90       	pop	r13
    3be4:	cf 90       	pop	r12
    3be6:	bf 90       	pop	r11
    3be8:	af 90       	pop	r10
    3bea:	9f 90       	pop	r9
    3bec:	08 95       	ret

00003bee <reverseRegisterBits>:
    3bee:	1f 93       	push	r17
    3bf0:	cf 93       	push	r28
    3bf2:	df 93       	push	r29
    3bf4:	10 e0       	ldi	r17, 0x00	; 0
    3bf6:	09 c0       	rjmp	.+18     	; 0x3c0a <reverseRegisterBits+0x1c>
    3bf8:	c1 2f       	mov	r28, r17
    3bfa:	d0 e0       	ldi	r29, 0x00	; 0
    3bfc:	c3 59       	subi	r28, 0x93	; 147
    3bfe:	da 4f       	sbci	r29, 0xFA	; 250
    3c00:	88 81       	ld	r24, Y
    3c02:	0e 94 95 3c 	call	0x792a	; 0x792a <reverse_Bits>
    3c06:	88 83       	st	Y, r24
    3c08:	1f 5f       	subi	r17, 0xFF	; 255
    3c0a:	18 30       	cpi	r17, 0x08	; 8
    3c0c:	a8 f3       	brcs	.-22     	; 0x3bf8 <reverseRegisterBits+0xa>
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	08 95       	ret

00003c16 <menuOnUpdateRegister>:
    3c16:	8d e6       	ldi	r24, 0x6D	; 109
    3c18:	95 e0       	ldi	r25, 0x05	; 5
    3c1a:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <read_allRegister>
    3c1e:	e7 df       	rcall	.-50     	; 0x3bee <reverseRegisterBits>
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	08 95       	ret

00003c24 <menuOnEnterResetReg>:
    3c24:	0e 94 b6 30 	call	0x616c	; 0x616c <midi_resetRegisters>
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	f5 df       	rcall	.-22     	; 0x3c16 <menuOnUpdateRegister>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	08 95       	ret

00003c30 <menuOnExitLoadProgran>:
    3c30:	86 30       	cpi	r24, 0x06	; 6
    3c32:	31 f0       	breq	.+12     	; 0x3c40 <menuOnExitLoadProgran+0x10>
    3c34:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3c38:	80 34       	cpi	r24, 0x40	; 64
    3c3a:	10 f4       	brcc	.+4      	; 0x3c40 <menuOnExitLoadProgran+0x10>
    3c3c:	0e 94 24 30 	call	0x6048	; 0x6048 <program_toRegister>
    3c40:	80 e0       	ldi	r24, 0x00	; 0
    3c42:	e9 df       	rcall	.-46     	; 0x3c16 <menuOnUpdateRegister>
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	08 95       	ret

00003c48 <softkeyCoupler>:
    3c48:	cf 93       	push	r28
    3c4a:	c6 2f       	mov	r28, r22
    3c4c:	88 23       	and	r24, r24
    3c4e:	d9 f0       	breq	.+54     	; 0x3c86 <softkeyCoupler+0x3e>
    3c50:	e6 2f       	mov	r30, r22
    3c52:	f0 e0       	ldi	r31, 0x00	; 0
    3c54:	df 01       	movw	r26, r30
    3c56:	af 5e       	subi	r26, 0xEF	; 239
    3c58:	b7 4f       	sbci	r27, 0xF7	; 247
    3c5a:	8c 91       	ld	r24, X
    3c5c:	81 11       	cpse	r24, r1
    3c5e:	08 c0       	rjmp	.+16     	; 0x3c70 <softkeyCoupler+0x28>
    3c60:	86 2f       	mov	r24, r22
    3c62:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <set_Coupler>
    3c66:	88 23       	and	r24, r24
    3c68:	71 f0       	breq	.+28     	; 0x3c86 <softkeyCoupler+0x3e>
    3c6a:	0e 94 1a 33 	call	0x6634	; 0x6634 <midi_ManualOff>
    3c6e:	0b c0       	rjmp	.+22     	; 0x3c86 <softkeyCoupler+0x3e>
    3c70:	df 01       	movw	r26, r30
    3c72:	af 5e       	subi	r26, 0xEF	; 239
    3c74:	b7 4f       	sbci	r27, 0xF7	; 247
    3c76:	1c 92       	st	X, r1
    3c78:	ee 0f       	add	r30, r30
    3c7a:	ff 1f       	adc	r31, r31
    3c7c:	ec 55       	subi	r30, 0x5C	; 92
    3c7e:	fd 4e       	sbci	r31, 0xED	; 237
    3c80:	84 91       	lpm	r24, Z
    3c82:	0e 94 1a 33 	call	0x6634	; 0x6634 <midi_ManualOff>
    3c86:	ec 2f       	mov	r30, r28
    3c88:	f0 e0       	ldi	r31, 0x00	; 0
    3c8a:	ef 5e       	subi	r30, 0xEF	; 239
    3c8c:	f7 4f       	sbci	r31, 0xF7	; 247
    3c8e:	80 81       	ld	r24, Z
    3c90:	81 11       	cpse	r24, r1
    3c92:	02 c0       	rjmp	.+4      	; 0x3c98 <softkeyCoupler+0x50>
    3c94:	82 e8       	ldi	r24, 0x82	; 130
    3c96:	01 c0       	rjmp	.+2      	; 0x3c9a <softkeyCoupler+0x52>
    3c98:	81 e8       	ldi	r24, 0x81	; 129
    3c9a:	cf 91       	pop	r28
    3c9c:	08 95       	ret

00003c9e <softKeyCoupler2from3>:
    3c9e:	60 e0       	ldi	r22, 0x00	; 0
    3ca0:	d3 cf       	rjmp	.-90     	; 0x3c48 <softkeyCoupler>
    3ca2:	08 95       	ret

00003ca4 <softKeyCoupler1from3>:
    3ca4:	61 e0       	ldi	r22, 0x01	; 1
    3ca6:	d0 cf       	rjmp	.-96     	; 0x3c48 <softkeyCoupler>
    3ca8:	08 95       	ret

00003caa <softKeyCouplerPfrom3>:
    3caa:	63 e0       	ldi	r22, 0x03	; 3
    3cac:	cd cf       	rjmp	.-102    	; 0x3c48 <softkeyCoupler>
    3cae:	08 95       	ret

00003cb0 <softKeyCoupler1from2>:
    3cb0:	62 e0       	ldi	r22, 0x02	; 2
    3cb2:	ca cf       	rjmp	.-108    	; 0x3c48 <softkeyCoupler>
    3cb4:	08 95       	ret

00003cb6 <softKeyCouplerPfrom2>:
    3cb6:	64 e0       	ldi	r22, 0x04	; 4
    3cb8:	c7 cf       	rjmp	.-114    	; 0x3c48 <softkeyCoupler>
    3cba:	08 95       	ret

00003cbc <softKeyCouplerPfrom1>:
    3cbc:	65 e0       	ldi	r22, 0x05	; 5
    3cbe:	c4 cf       	rjmp	.-120    	; 0x3c48 <softkeyCoupler>
    3cc0:	08 95       	ret

00003cc2 <softKeyCoupler3from2>:
    3cc2:	66 e0       	ldi	r22, 0x06	; 6
    3cc4:	c1 cf       	rjmp	.-126    	; 0x3c48 <softkeyCoupler>
    3cc6:	08 95       	ret

00003cc8 <softKeyCoupler3from1>:
    3cc8:	67 e0       	ldi	r22, 0x07	; 7
    3cca:	be cf       	rjmp	.-132    	; 0x3c48 <softkeyCoupler>
    3ccc:	08 95       	ret

00003cce <softKeyCoupler3fromP>:
    3cce:	69 e0       	ldi	r22, 0x09	; 9
    3cd0:	bb cf       	rjmp	.-138    	; 0x3c48 <softkeyCoupler>
    3cd2:	08 95       	ret

00003cd4 <softKeyCoupler2from1>:
    3cd4:	68 e0       	ldi	r22, 0x08	; 8
    3cd6:	b8 cf       	rjmp	.-144    	; 0x3c48 <softkeyCoupler>
    3cd8:	08 95       	ret

00003cda <softKeyCoupler2fromP>:
    3cda:	6a e0       	ldi	r22, 0x0A	; 10
    3cdc:	b5 cf       	rjmp	.-150    	; 0x3c48 <softkeyCoupler>
    3cde:	08 95       	ret

00003ce0 <softKeyCoupler1fromP>:
    3ce0:	6b e0       	ldi	r22, 0x0B	; 11
    3ce2:	b2 cf       	rjmp	.-156    	; 0x3c48 <softkeyCoupler>
    3ce4:	08 95       	ret

00003ce6 <send_progrChange_toMidiThru>:
    3ce6:	cf 93       	push	r28
    3ce8:	80 34       	cpi	r24, 0x40	; 64
    3cea:	60 f4       	brcc	.+24     	; 0x3d04 <send_progrChange_toMidiThru+0x1e>
    3cec:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <midiThrough+0x1>
    3cf0:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf2:	41 f0       	breq	.+16     	; 0x3d04 <send_progrChange_toMidiThru+0x1e>
    3cf4:	c8 2f       	mov	r28, r24
    3cf6:	89 2f       	mov	r24, r25
    3cf8:	80 6c       	ori	r24, 0xC0	; 192
    3cfa:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <serial1MIDISend>
    3cfe:	8c 2f       	mov	r24, r28
    3d00:	0e 94 e3 36 	call	0x6dc6	; 0x6dc6 <serial1MIDISend>
    3d04:	cf 91       	pop	r28
    3d06:	08 95       	ret

00003d08 <softKeyPrM>:
    3d08:	88 23       	and	r24, r24
    3d0a:	34 f4       	brge	.+12     	; 0x3d18 <softKeyPrM+0x10>
    3d0c:	0e 94 b6 30 	call	0x616c	; 0x616c <midi_resetRegisters>
    3d10:	8f ef       	ldi	r24, 0xFF	; 255
    3d12:	0e 94 1a 30 	call	0x6034	; 0x6034 <prog_set>
    3d16:	13 c0       	rjmp	.+38     	; 0x3d3e <softKeyPrM+0x36>
    3d18:	88 23       	and	r24, r24
    3d1a:	89 f0       	breq	.+34     	; 0x3d3e <softKeyPrM+0x36>
    3d1c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d20:	8f 3f       	cpi	r24, 0xFF	; 255
    3d22:	21 f4       	brne	.+8      	; 0x3d2c <softKeyPrM+0x24>
    3d24:	8f e3       	ldi	r24, 0x3F	; 63
    3d26:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d2a:	03 c0       	rjmp	.+6      	; 0x3d32 <softKeyPrM+0x2a>
    3d2c:	81 50       	subi	r24, 0x01	; 1
    3d2e:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d32:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d36:	d7 df       	rcall	.-82     	; 0x3ce6 <send_progrChange_toMidiThru>
    3d38:	8f ef       	ldi	r24, 0xFF	; 255
    3d3a:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	08 95       	ret

00003d42 <softKeyPrInc>:
    3d42:	88 23       	and	r24, r24
    3d44:	e9 f0       	breq	.+58     	; 0x3d80 <softKeyPrInc+0x3e>
    3d46:	4c f4       	brge	.+18     	; 0x3d5a <softKeyPrInc+0x18>
    3d48:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d4c:	8f 3f       	cpi	r24, 0xFF	; 255
    3d4e:	91 f0       	breq	.+36     	; 0x3d74 <softKeyPrInc+0x32>
    3d50:	88 5f       	subi	r24, 0xF8	; 248
    3d52:	88 73       	andi	r24, 0x38	; 56
    3d54:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d58:	0d c0       	rjmp	.+26     	; 0x3d74 <softKeyPrInc+0x32>
    3d5a:	88 23       	and	r24, r24
    3d5c:	59 f0       	breq	.+22     	; 0x3d74 <softKeyPrInc+0x32>
    3d5e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d62:	8f 33       	cpi	r24, 0x3F	; 63
    3d64:	21 f4       	brne	.+8      	; 0x3d6e <softKeyPrInc+0x2c>
    3d66:	8f ef       	ldi	r24, 0xFF	; 255
    3d68:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d6c:	03 c0       	rjmp	.+6      	; 0x3d74 <softKeyPrInc+0x32>
    3d6e:	8f 5f       	subi	r24, 0xFF	; 255
    3d70:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d74:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d78:	b6 df       	rcall	.-148    	; 0x3ce6 <send_progrChange_toMidiThru>
    3d7a:	8f ef       	ldi	r24, 0xFF	; 255
    3d7c:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	08 95       	ret

00003d84 <softKeyPrDec>:
    3d84:	88 23       	and	r24, r24
    3d86:	e9 f0       	breq	.+58     	; 0x3dc2 <softKeyPrDec+0x3e>
    3d88:	4c f4       	brge	.+18     	; 0x3d9c <softKeyPrDec+0x18>
    3d8a:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d8e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d90:	91 f0       	breq	.+36     	; 0x3db6 <softKeyPrDec+0x32>
    3d92:	88 50       	subi	r24, 0x08	; 8
    3d94:	88 73       	andi	r24, 0x38	; 56
    3d96:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d9a:	0d c0       	rjmp	.+26     	; 0x3db6 <softKeyPrDec+0x32>
    3d9c:	88 23       	and	r24, r24
    3d9e:	59 f0       	breq	.+22     	; 0x3db6 <softKeyPrDec+0x32>
    3da0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3da4:	8f 3f       	cpi	r24, 0xFF	; 255
    3da6:	21 f4       	brne	.+8      	; 0x3db0 <softKeyPrDec+0x2c>
    3da8:	8f e3       	ldi	r24, 0x3F	; 63
    3daa:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3dae:	03 c0       	rjmp	.+6      	; 0x3db6 <softKeyPrDec+0x32>
    3db0:	81 50       	subi	r24, 0x01	; 1
    3db2:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3db6:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3dba:	95 df       	rcall	.-214    	; 0x3ce6 <send_progrChange_toMidiThru>
    3dbc:	8f ef       	ldi	r24, 0xFF	; 255
    3dbe:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	08 95       	ret

00003dc6 <softKeyPBInc>:
    3dc6:	88 23       	and	r24, r24
    3dc8:	61 f0       	breq	.+24     	; 0x3de2 <softKeyPBInc+0x1c>
    3dca:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3dce:	8f 3f       	cpi	r24, 0xFF	; 255
    3dd0:	41 f0       	breq	.+16     	; 0x3de2 <softKeyPBInc+0x1c>
    3dd2:	88 5f       	subi	r24, 0xF8	; 248
    3dd4:	88 73       	andi	r24, 0x38	; 56
    3dd6:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3dda:	85 df       	rcall	.-246    	; 0x3ce6 <send_progrChange_toMidiThru>
    3ddc:	8f ef       	ldi	r24, 0xFF	; 255
    3dde:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3de2:	80 e0       	ldi	r24, 0x00	; 0
    3de4:	08 95       	ret

00003de6 <softKeyPBDec>:
    3de6:	88 23       	and	r24, r24
    3de8:	61 f0       	breq	.+24     	; 0x3e02 <softKeyPBDec+0x1c>
    3dea:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3dee:	8f 3f       	cpi	r24, 0xFF	; 255
    3df0:	41 f0       	breq	.+16     	; 0x3e02 <softKeyPBDec+0x1c>
    3df2:	88 50       	subi	r24, 0x08	; 8
    3df4:	88 73       	andi	r24, 0x38	; 56
    3df6:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3dfa:	75 df       	rcall	.-278    	; 0x3ce6 <send_progrChange_toMidiThru>
    3dfc:	8f ef       	ldi	r24, 0xFF	; 255
    3dfe:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3e02:	80 e0       	ldi	r24, 0x00	; 0
    3e04:	08 95       	ret

00003e06 <menu_Init>:
    3e06:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    3e0a:	00 97       	sbiw	r24, 0x00	; 0
    3e0c:	69 f4       	brne	.+26     	; 0x3e28 <menu_Init+0x22>
    3e0e:	86 ed       	ldi	r24, 0xD6	; 214
    3e10:	97 e0       	ldi	r25, 0x07	; 7
    3e12:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3e16:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3e1a:	8f ed       	ldi	r24, 0xDF	; 223
    3e1c:	93 e0       	ldi	r25, 0x03	; 3
    3e1e:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    3e22:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    3e26:	08 c0       	rjmp	.+16     	; 0x3e38 <menu_Init+0x32>
    3e28:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3e2c:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3e30:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    3e34:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    3e38:	8f ef       	ldi	r24, 0xFF	; 255
    3e3a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    3e3e:	89 ee       	ldi	r24, 0xE9	; 233
    3e40:	93 e0       	ldi	r25, 0x03	; 3
    3e42:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    3e46:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    3e4a:	08 95       	ret

00003e4c <softkeyLeft>:
    3e4c:	6e ed       	ldi	r22, 0xDE	; 222
    3e4e:	72 e1       	ldi	r23, 0x12	; 18
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3e56:	08 95       	ret

00003e58 <softkeyRight>:
    3e58:	60 ee       	ldi	r22, 0xE0	; 224
    3e5a:	72 e1       	ldi	r23, 0x12	; 18
    3e5c:	83 e0       	ldi	r24, 0x03	; 3
    3e5e:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3e62:	08 95       	ret

00003e64 <softkeyDown>:
    3e64:	62 ee       	ldi	r22, 0xE2	; 226
    3e66:	72 e1       	ldi	r23, 0x12	; 18
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3e6e:	08 95       	ret

00003e70 <softkeyOn>:
    3e70:	60 ed       	ldi	r22, 0xD0	; 208
    3e72:	72 e1       	ldi	r23, 0x12	; 18
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3e7a:	08 95       	ret

00003e7c <softkeyOff>:
    3e7c:	6b ec       	ldi	r22, 0xCB	; 203
    3e7e:	72 e1       	ldi	r23, 0x12	; 18
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3e86:	08 95       	ret

00003e88 <softkeyUp>:
    3e88:	64 ee       	ldi	r22, 0xE4	; 228
    3e8a:	72 e1       	ldi	r23, 0x12	; 18
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3e92:	08 95       	ret

00003e94 <softkeyPlus>:
    3e94:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3e98:	8a 30       	cpi	r24, 0x0A	; 10
    3e9a:	11 f0       	breq	.+4      	; 0x3ea0 <softkeyPlus+0xc>
    3e9c:	8e 30       	cpi	r24, 0x0E	; 14
    3e9e:	31 f4       	brne	.+12     	; 0x3eac <softkeyPlus+0x18>
    3ea0:	6c eb       	ldi	r22, 0xBC	; 188
    3ea2:	72 e1       	ldi	r23, 0x12	; 18
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3eaa:	08 95       	ret
    3eac:	6c ed       	ldi	r22, 0xDC	; 220
    3eae:	72 e1       	ldi	r23, 0x12	; 18
    3eb0:	80 e0       	ldi	r24, 0x00	; 0
    3eb2:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3eb6:	08 95       	ret

00003eb8 <softkeyMinus>:
    3eb8:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3ebc:	8a 30       	cpi	r24, 0x0A	; 10
    3ebe:	11 f0       	breq	.+4      	; 0x3ec4 <softkeyMinus+0xc>
    3ec0:	8e 30       	cpi	r24, 0x0E	; 14
    3ec2:	31 f4       	brne	.+12     	; 0x3ed0 <softkeyMinus+0x18>
    3ec4:	6e eb       	ldi	r22, 0xBE	; 190
    3ec6:	72 e1       	ldi	r23, 0x12	; 18
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3ece:	08 95       	ret
    3ed0:	6a ed       	ldi	r22, 0xDA	; 218
    3ed2:	72 e1       	ldi	r23, 0x12	; 18
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	0c 94 f0 3b 	jmp	0x77e0	; 0x77e0 <keylabel_set>
    3eda:	08 95       	ret

00003edc <dataToNibbles>:
    3edc:	cf 93       	push	r28
    3ede:	df 93       	push	r29
    3ee0:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3ee4:	8e 2f       	mov	r24, r30
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	fc 01       	movw	r30, r24
    3eea:	32 97       	sbiw	r30, 0x02	; 2
    3eec:	ed 30       	cpi	r30, 0x0D	; 13
    3eee:	f1 05       	cpc	r31, r1
    3ef0:	08 f0       	brcs	.+2      	; 0x3ef4 <dataToNibbles+0x18>
    3ef2:	e4 c0       	rjmp	.+456    	; 0x40bc <dataToNibbles+0x1e0>
    3ef4:	88 27       	eor	r24, r24
    3ef6:	ee 58       	subi	r30, 0x8E	; 142
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	8f 4f       	sbci	r24, 0xFF	; 255
    3efc:	0c 94 a2 3c 	jmp	0x7944	; 0x7944 <__tablejump2__>
    3f00:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f04:	e4 ec       	ldi	r30, 0xC4	; 196
    3f06:	f5 e0       	ldi	r31, 0x05	; 5
    3f08:	98 2f       	mov	r25, r24
    3f0a:	92 95       	swap	r25
    3f0c:	9f 70       	andi	r25, 0x0F	; 15
    3f0e:	90 83       	st	Z, r25
    3f10:	8f 70       	andi	r24, 0x0F	; 15
    3f12:	81 83       	std	Z+1, r24	; 0x01
    3f14:	d3 c0       	rjmp	.+422    	; 0x40bc <dataToNibbles+0x1e0>
    3f16:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f1a:	80 31       	cpi	r24, 0x10	; 16
    3f1c:	20 f0       	brcs	.+8      	; 0x3f26 <dataToNibbles+0x4a>
    3f1e:	8f ef       	ldi	r24, 0xFF	; 255
    3f20:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f24:	cb c0       	rjmp	.+406    	; 0x40bc <dataToNibbles+0x1e0>
    3f26:	8f 5f       	subi	r24, 0xFF	; 255
    3f28:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f2c:	c7 c0       	rjmp	.+398    	; 0x40bc <dataToNibbles+0x1e0>
    3f2e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f32:	88 23       	and	r24, r24
    3f34:	34 f4       	brge	.+12     	; 0x3f42 <dataToNibbles+0x66>
    3f36:	e4 ec       	ldi	r30, 0xC4	; 196
    3f38:	f5 e0       	ldi	r31, 0x05	; 5
    3f3a:	10 82       	st	Z, r1
    3f3c:	8f ef       	ldi	r24, 0xFF	; 255
    3f3e:	81 83       	std	Z+1, r24	; 0x01
    3f40:	bd c0       	rjmp	.+378    	; 0x40bc <dataToNibbles+0x1e0>
    3f42:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    3f46:	08 c0       	rjmp	.+16     	; 0x3f58 <dataToNibbles+0x7c>
    3f48:	e4 ec       	ldi	r30, 0xC4	; 196
    3f4a:	f5 e0       	ldi	r31, 0x05	; 5
    3f4c:	91 81       	ldd	r25, Z+1	; 0x01
    3f4e:	9f 5f       	subi	r25, 0xFF	; 255
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	8c 50       	subi	r24, 0x0C	; 12
    3f54:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f58:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f5c:	8c 30       	cpi	r24, 0x0C	; 12
    3f5e:	a0 f7       	brcc	.-24     	; 0x3f48 <dataToNibbles+0x6c>
    3f60:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f64:	ab c0       	rjmp	.+342    	; 0x40bc <dataToNibbles+0x1e0>
    3f66:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f6a:	e4 ec       	ldi	r30, 0xC4	; 196
    3f6c:	f5 e0       	ldi	r31, 0x05	; 5
    3f6e:	98 2f       	mov	r25, r24
    3f70:	92 95       	swap	r25
    3f72:	96 95       	lsr	r25
    3f74:	97 70       	andi	r25, 0x07	; 7
    3f76:	90 83       	st	Z, r25
    3f78:	8f 71       	andi	r24, 0x1F	; 31
    3f7a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f7e:	11 82       	std	Z+1, r1	; 0x01
    3f80:	08 c0       	rjmp	.+16     	; 0x3f92 <dataToNibbles+0xb6>
    3f82:	e4 ec       	ldi	r30, 0xC4	; 196
    3f84:	f5 e0       	ldi	r31, 0x05	; 5
    3f86:	91 81       	ldd	r25, Z+1	; 0x01
    3f88:	9f 5f       	subi	r25, 0xFF	; 255
    3f8a:	91 83       	std	Z+1, r25	; 0x01
    3f8c:	8a 50       	subi	r24, 0x0A	; 10
    3f8e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f92:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f96:	8a 30       	cpi	r24, 0x0A	; 10
    3f98:	a0 f7       	brcc	.-24     	; 0x3f82 <dataToNibbles+0xa6>
    3f9a:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3f9e:	8e c0       	rjmp	.+284    	; 0x40bc <dataToNibbles+0x1e0>
    3fa0:	e4 ec       	ldi	r30, 0xC4	; 196
    3fa2:	f5 e0       	ldi	r31, 0x05	; 5
    3fa4:	10 82       	st	Z, r1
    3fa6:	11 82       	std	Z+1, r1	; 0x01
    3fa8:	08 c0       	rjmp	.+16     	; 0x3fba <dataToNibbles+0xde>
    3faa:	e4 ec       	ldi	r30, 0xC4	; 196
    3fac:	f5 e0       	ldi	r31, 0x05	; 5
    3fae:	90 81       	ld	r25, Z
    3fb0:	9f 5f       	subi	r25, 0xFF	; 255
    3fb2:	90 83       	st	Z, r25
    3fb4:	84 56       	subi	r24, 0x64	; 100
    3fb6:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fba:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fbe:	84 36       	cpi	r24, 0x64	; 100
    3fc0:	a0 f7       	brcc	.-24     	; 0x3faa <dataToNibbles+0xce>
    3fc2:	08 c0       	rjmp	.+16     	; 0x3fd4 <dataToNibbles+0xf8>
    3fc4:	e4 ec       	ldi	r30, 0xC4	; 196
    3fc6:	f5 e0       	ldi	r31, 0x05	; 5
    3fc8:	91 81       	ldd	r25, Z+1	; 0x01
    3fca:	9f 5f       	subi	r25, 0xFF	; 255
    3fcc:	91 83       	std	Z+1, r25	; 0x01
    3fce:	8a 50       	subi	r24, 0x0A	; 10
    3fd0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fd4:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fd8:	8a 30       	cpi	r24, 0x0A	; 10
    3fda:	a0 f7       	brcc	.-24     	; 0x3fc4 <dataToNibbles+0xe8>
    3fdc:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3fe0:	6d c0       	rjmp	.+218    	; 0x40bc <dataToNibbles+0x1e0>
    3fe2:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fe6:	84 30       	cpi	r24, 0x04	; 4
    3fe8:	20 f0       	brcs	.+8      	; 0x3ff2 <dataToNibbles+0x116>
    3fea:	8f ef       	ldi	r24, 0xFF	; 255
    3fec:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ff0:	65 c0       	rjmp	.+202    	; 0x40bc <dataToNibbles+0x1e0>
    3ff2:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ff6:	62 c0       	rjmp	.+196    	; 0x40bc <dataToNibbles+0x1e0>
    3ff8:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3ffc:	84 30       	cpi	r24, 0x04	; 4
    3ffe:	20 f0       	brcs	.+8      	; 0x4008 <dataToNibbles+0x12c>
    4000:	83 e0       	ldi	r24, 0x03	; 3
    4002:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4006:	5a c0       	rjmp	.+180    	; 0x40bc <dataToNibbles+0x1e0>
    4008:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    400c:	57 c0       	rjmp	.+174    	; 0x40bc <dataToNibbles+0x1e0>
    400e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4012:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4016:	52 c0       	rjmp	.+164    	; 0x40bc <dataToNibbles+0x1e0>
    4018:	e9 2f       	mov	r30, r25
    401a:	f0 e0       	ldi	r31, 0x00	; 0
    401c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4020:	28 2f       	mov	r18, r24
    4022:	22 1f       	adc	r18, r18
    4024:	22 27       	eor	r18, r18
    4026:	22 1f       	adc	r18, r18
    4028:	ec 53       	subi	r30, 0x3C	; 60
    402a:	fa 4f       	sbci	r31, 0xFA	; 250
    402c:	20 83       	st	Z, r18
    402e:	88 0f       	add	r24, r24
    4030:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4034:	9f 5f       	subi	r25, 0xFF	; 255
    4036:	01 c0       	rjmp	.+2      	; 0x403a <dataToNibbles+0x15e>
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	98 30       	cpi	r25, 0x08	; 8
    403c:	68 f3       	brcs	.-38     	; 0x4018 <dataToNibbles+0x13c>
    403e:	3e c0       	rjmp	.+124    	; 0x40bc <dataToNibbles+0x1e0>
    4040:	82 50       	subi	r24, 0x02	; 2
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	de 01       	movw	r26, r28
    4046:	9d 91       	ld	r25, X+
    4048:	ec 53       	subi	r30, 0x3C	; 60
    404a:	fa 4f       	sbci	r31, 0xFA	; 250
    404c:	9f 70       	andi	r25, 0x0F	; 15
    404e:	90 83       	st	Z, r25
    4050:	e8 2f       	mov	r30, r24
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	98 81       	ld	r25, Y
    4056:	ec 53       	subi	r30, 0x3C	; 60
    4058:	fa 4f       	sbci	r31, 0xFA	; 250
    405a:	92 95       	swap	r25
    405c:	9f 70       	andi	r25, 0x0F	; 15
    405e:	90 83       	st	Z, r25
    4060:	ed 01       	movw	r28, r26
    4062:	03 c0       	rjmp	.+6      	; 0x406a <dataToNibbles+0x18e>
    4064:	c2 ea       	ldi	r28, 0xA2	; 162
    4066:	d5 e0       	ldi	r29, 0x05	; 5
    4068:	88 e0       	ldi	r24, 0x08	; 8
    406a:	ef ef       	ldi	r30, 0xFF	; 255
    406c:	e8 0f       	add	r30, r24
    406e:	81 11       	cpse	r24, r1
    4070:	e7 cf       	rjmp	.-50     	; 0x4040 <dataToNibbles+0x164>
    4072:	24 c0       	rjmp	.+72     	; 0x40bc <dataToNibbles+0x1e0>
    4074:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4078:	e4 ec       	ldi	r30, 0xC4	; 196
    407a:	f5 e0       	ldi	r31, 0x05	; 5
    407c:	98 2f       	mov	r25, r24
    407e:	97 70       	andi	r25, 0x07	; 7
    4080:	9f 5f       	subi	r25, 0xFF	; 255
    4082:	90 83       	st	Z, r25
    4084:	86 95       	lsr	r24
    4086:	86 95       	lsr	r24
    4088:	86 95       	lsr	r24
    408a:	8f 5f       	subi	r24, 0xFF	; 255
    408c:	81 83       	std	Z+1, r24	; 0x01
    408e:	16 c0       	rjmp	.+44     	; 0x40bc <dataToNibbles+0x1e0>
    4090:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4094:	8f 5f       	subi	r24, 0xFF	; 255
    4096:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    409a:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    409e:	08 c0       	rjmp	.+16     	; 0x40b0 <dataToNibbles+0x1d4>
    40a0:	e4 ec       	ldi	r30, 0xC4	; 196
    40a2:	f5 e0       	ldi	r31, 0x05	; 5
    40a4:	90 81       	ld	r25, Z
    40a6:	9f 5f       	subi	r25, 0xFF	; 255
    40a8:	90 83       	st	Z, r25
    40aa:	8a 50       	subi	r24, 0x0A	; 10
    40ac:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    40b0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    40b4:	8a 30       	cpi	r24, 0x0A	; 10
    40b6:	a0 f7       	brcc	.-24     	; 0x40a0 <dataToNibbles+0x1c4>
    40b8:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	08 95       	ret

000040c2 <nibbleToLCDstring>:
    40c2:	0f 93       	push	r16
    40c4:	1f 93       	push	r17
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    40ce:	8e 2f       	mov	r24, r30
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	fc 01       	movw	r30, r24
    40d4:	32 97       	sbiw	r30, 0x02	; 2
    40d6:	ed 30       	cpi	r30, 0x0D	; 13
    40d8:	f1 05       	cpc	r31, r1
    40da:	08 f0       	brcs	.+2      	; 0x40de <nibbleToLCDstring+0x1c>
    40dc:	3b c1       	rjmp	.+630    	; 0x4354 <nibbleToLCDstring+0x292>
    40de:	88 27       	eor	r24, r24
    40e0:	e1 58       	subi	r30, 0x81	; 129
    40e2:	ff 4f       	sbci	r31, 0xFF	; 255
    40e4:	8f 4f       	sbci	r24, 0xFF	; 255
    40e6:	0c 94 a2 3c 	jmp	0x7944	; 0x7944 <__tablejump2__>
    40ea:	04 ec       	ldi	r16, 0xC4	; 196
    40ec:	15 e0       	ldi	r17, 0x05	; 5
    40ee:	f8 01       	movw	r30, r16
    40f0:	80 81       	ld	r24, Z
    40f2:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    40f6:	c5 e2       	ldi	r28, 0x25	; 37
    40f8:	d2 e0       	ldi	r29, 0x02	; 2
    40fa:	88 83       	st	Y, r24
    40fc:	f8 01       	movw	r30, r16
    40fe:	81 81       	ldd	r24, Z+1	; 0x01
    4100:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    4104:	89 83       	std	Y+1, r24	; 0x01
    4106:	1a 82       	std	Y+2, r1	; 0x02
    4108:	25 c1       	rjmp	.+586    	; 0x4354 <nibbleToLCDstring+0x292>
    410a:	e5 e2       	ldi	r30, 0x25	; 37
    410c:	f2 e0       	ldi	r31, 0x02	; 2
    410e:	83 e4       	ldi	r24, 0x43	; 67
    4110:	80 83       	st	Z, r24
    4112:	88 e6       	ldi	r24, 0x68	; 104
    4114:	81 83       	std	Z+1, r24	; 0x01
    4116:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    411a:	8f 3f       	cpi	r24, 0xFF	; 255
    411c:	29 f4       	brne	.+10     	; 0x4128 <nibbleToLCDstring+0x66>
    411e:	80 e2       	ldi	r24, 0x20	; 32
    4120:	82 83       	std	Z+2, r24	; 0x02
    4122:	8d e2       	ldi	r24, 0x2D	; 45
    4124:	83 83       	std	Z+3, r24	; 0x03
    4126:	12 c0       	rjmp	.+36     	; 0x414c <nibbleToLCDstring+0x8a>
    4128:	8a 30       	cpi	r24, 0x0A	; 10
    412a:	48 f0       	brcs	.+18     	; 0x413e <nibbleToLCDstring+0x7c>
    412c:	c5 e2       	ldi	r28, 0x25	; 37
    412e:	d2 e0       	ldi	r29, 0x02	; 2
    4130:	91 e3       	ldi	r25, 0x31	; 49
    4132:	9a 83       	std	Y+2, r25	; 0x02
    4134:	8a 50       	subi	r24, 0x0A	; 10
    4136:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    413a:	8b 83       	std	Y+3, r24	; 0x03
    413c:	07 c0       	rjmp	.+14     	; 0x414c <nibbleToLCDstring+0x8a>
    413e:	c5 e2       	ldi	r28, 0x25	; 37
    4140:	d2 e0       	ldi	r29, 0x02	; 2
    4142:	90 e2       	ldi	r25, 0x20	; 32
    4144:	9a 83       	std	Y+2, r25	; 0x02
    4146:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    414a:	8b 83       	std	Y+3, r24	; 0x03
    414c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    4150:	01 c1       	rjmp	.+514    	; 0x4354 <nibbleToLCDstring+0x292>
    4152:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4156:	8f 3f       	cpi	r24, 0xFF	; 255
    4158:	21 f0       	breq	.+8      	; 0x4162 <nibbleToLCDstring+0xa0>
    415a:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    415e:	9f 3f       	cpi	r25, 0xFF	; 255
    4160:	59 f4       	brne	.+22     	; 0x4178 <nibbleToLCDstring+0xb6>
    4162:	e5 e2       	ldi	r30, 0x25	; 37
    4164:	f2 e0       	ldi	r31, 0x02	; 2
    4166:	8e e6       	ldi	r24, 0x6E	; 110
    4168:	80 83       	st	Z, r24
    416a:	9f e6       	ldi	r25, 0x6F	; 111
    416c:	91 83       	std	Z+1, r25	; 0x01
    416e:	82 83       	std	Z+2, r24	; 0x02
    4170:	85 e6       	ldi	r24, 0x65	; 101
    4172:	83 83       	std	Z+3, r24	; 0x03
    4174:	14 82       	std	Z+4, r1	; 0x04
    4176:	ee c0       	rjmp	.+476    	; 0x4354 <nibbleToLCDstring+0x292>
    4178:	9f e5       	ldi	r25, 0x5F	; 95
    417a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    417e:	8b 30       	cpi	r24, 0x0B	; 11
    4180:	21 f4       	brne	.+8      	; 0x418a <nibbleToLCDstring+0xc8>
    4182:	88 e4       	ldi	r24, 0x48	; 72
    4184:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    4188:	20 c0       	rjmp	.+64     	; 0x41ca <nibbleToLCDstring+0x108>
    418a:	85 30       	cpi	r24, 0x05	; 5
    418c:	58 f4       	brcc	.+22     	; 0x41a4 <nibbleToLCDstring+0xe2>
    418e:	98 2f       	mov	r25, r24
    4190:	96 95       	lsr	r25
    4192:	9d 5b       	subi	r25, 0xBD	; 189
    4194:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    4198:	80 ff       	sbrs	r24, 0
    419a:	17 c0       	rjmp	.+46     	; 0x41ca <nibbleToLCDstring+0x108>
    419c:	83 e2       	ldi	r24, 0x23	; 35
    419e:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    41a2:	13 c0       	rjmp	.+38     	; 0x41ca <nibbleToLCDstring+0x108>
    41a4:	28 2f       	mov	r18, r24
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	25 50       	subi	r18, 0x05	; 5
    41aa:	31 09       	sbc	r19, r1
    41ac:	35 95       	asr	r19
    41ae:	27 95       	ror	r18
    41b0:	2a 5b       	subi	r18, 0xBA	; 186
    41b2:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    41b6:	80 fd       	sbrc	r24, 0
    41b8:	03 c0       	rjmp	.+6      	; 0x41c0 <nibbleToLCDstring+0xfe>
    41ba:	83 e2       	ldi	r24, 0x23	; 35
    41bc:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    41c0:	28 34       	cpi	r18, 0x48	; 72
    41c2:	19 f4       	brne	.+6      	; 0x41ca <nibbleToLCDstring+0x108>
    41c4:	81 e4       	ldi	r24, 0x41	; 65
    41c6:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    41ca:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    41ce:	81 11       	cpse	r24, r1
    41d0:	04 c0       	rjmp	.+8      	; 0x41da <nibbleToLCDstring+0x118>
    41d2:	8d e6       	ldi	r24, 0x6D	; 109
    41d4:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    41d8:	0b c0       	rjmp	.+22     	; 0x41f0 <nibbleToLCDstring+0x12e>
    41da:	8c 30       	cpi	r24, 0x0C	; 12
    41dc:	30 f4       	brcc	.+12     	; 0x41ea <nibbleToLCDstring+0x128>
    41de:	81 50       	subi	r24, 0x01	; 1
    41e0:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    41e4:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    41e8:	03 c0       	rjmp	.+6      	; 0x41f0 <nibbleToLCDstring+0x12e>
    41ea:	8d e2       	ldi	r24, 0x2D	; 45
    41ec:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    41f0:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    41f4:	af c0       	rjmp	.+350    	; 0x4354 <nibbleToLCDstring+0x292>
    41f6:	c5 e2       	ldi	r28, 0x25	; 37
    41f8:	d2 e0       	ldi	r29, 0x02	; 2
    41fa:	8d e4       	ldi	r24, 0x4D	; 77
    41fc:	88 83       	st	Y, r24
    41fe:	04 ec       	ldi	r16, 0xC4	; 196
    4200:	15 e0       	ldi	r17, 0x05	; 5
    4202:	f8 01       	movw	r30, r16
    4204:	80 81       	ld	r24, Z
    4206:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	82 e4       	ldi	r24, 0x42	; 66
    420e:	8a 83       	std	Y+2, r24	; 0x02
    4210:	f8 01       	movw	r30, r16
    4212:	81 81       	ldd	r24, Z+1	; 0x01
    4214:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    4218:	8b 83       	std	Y+3, r24	; 0x03
    421a:	f8 01       	movw	r30, r16
    421c:	82 81       	ldd	r24, Z+2	; 0x02
    421e:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    4222:	8c 83       	std	Y+4, r24	; 0x04
    4224:	1d 82       	std	Y+5, r1	; 0x05
    4226:	96 c0       	rjmp	.+300    	; 0x4354 <nibbleToLCDstring+0x292>
    4228:	04 ec       	ldi	r16, 0xC4	; 196
    422a:	15 e0       	ldi	r17, 0x05	; 5
    422c:	f8 01       	movw	r30, r16
    422e:	80 81       	ld	r24, Z
    4230:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    4234:	c5 e2       	ldi	r28, 0x25	; 37
    4236:	d2 e0       	ldi	r29, 0x02	; 2
    4238:	88 83       	st	Y, r24
    423a:	f8 01       	movw	r30, r16
    423c:	81 81       	ldd	r24, Z+1	; 0x01
    423e:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	f8 01       	movw	r30, r16
    4246:	82 81       	ldd	r24, Z+2	; 0x02
    4248:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    424c:	8a 83       	std	Y+2, r24	; 0x02
    424e:	1b 82       	std	Y+3, r1	; 0x03
    4250:	81 c0       	rjmp	.+258    	; 0x4354 <nibbleToLCDstring+0x292>
    4252:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4256:	83 30       	cpi	r24, 0x03	; 3
    4258:	38 f4       	brcc	.+14     	; 0x4268 <nibbleToLCDstring+0x1a6>
    425a:	e5 e2       	ldi	r30, 0x25	; 37
    425c:	f2 e0       	ldi	r31, 0x02	; 2
    425e:	93 e3       	ldi	r25, 0x33	; 51
    4260:	98 1b       	sub	r25, r24
    4262:	90 83       	st	Z, r25
    4264:	11 82       	std	Z+1, r1	; 0x01
    4266:	76 c0       	rjmp	.+236    	; 0x4354 <nibbleToLCDstring+0x292>
    4268:	83 30       	cpi	r24, 0x03	; 3
    426a:	31 f4       	brne	.+12     	; 0x4278 <nibbleToLCDstring+0x1b6>
    426c:	e5 e2       	ldi	r30, 0x25	; 37
    426e:	f2 e0       	ldi	r31, 0x02	; 2
    4270:	80 e5       	ldi	r24, 0x50	; 80
    4272:	80 83       	st	Z, r24
    4274:	11 82       	std	Z+1, r1	; 0x01
    4276:	6e c0       	rjmp	.+220    	; 0x4354 <nibbleToLCDstring+0x292>
    4278:	e5 e2       	ldi	r30, 0x25	; 37
    427a:	f2 e0       	ldi	r31, 0x02	; 2
    427c:	8d e2       	ldi	r24, 0x2D	; 45
    427e:	80 83       	st	Z, r24
    4280:	11 82       	std	Z+1, r1	; 0x01
    4282:	68 c0       	rjmp	.+208    	; 0x4354 <nibbleToLCDstring+0x292>
    4284:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4288:	e5 e2       	ldi	r30, 0x25	; 37
    428a:	f2 e0       	ldi	r31, 0x02	; 2
    428c:	80 5d       	subi	r24, 0xD0	; 208
    428e:	80 83       	st	Z, r24
    4290:	11 82       	std	Z+1, r1	; 0x01
    4292:	60 c0       	rjmp	.+192    	; 0x4354 <nibbleToLCDstring+0x292>
    4294:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4298:	81 11       	cpse	r24, r1
    429a:	09 c0       	rjmp	.+18     	; 0x42ae <nibbleToLCDstring+0x1ec>
    429c:	e5 e2       	ldi	r30, 0x25	; 37
    429e:	f2 e0       	ldi	r31, 0x02	; 2
    42a0:	81 e4       	ldi	r24, 0x41	; 65
    42a2:	80 83       	st	Z, r24
    42a4:	85 e7       	ldi	r24, 0x75	; 117
    42a6:	81 83       	std	Z+1, r24	; 0x01
    42a8:	83 e7       	ldi	r24, 0x73	; 115
    42aa:	82 83       	std	Z+2, r24	; 0x02
    42ac:	08 c0       	rjmp	.+16     	; 0x42be <nibbleToLCDstring+0x1fc>
    42ae:	e5 e2       	ldi	r30, 0x25	; 37
    42b0:	f2 e0       	ldi	r31, 0x02	; 2
    42b2:	85 e4       	ldi	r24, 0x45	; 69
    42b4:	80 83       	st	Z, r24
    42b6:	89 e6       	ldi	r24, 0x69	; 105
    42b8:	81 83       	std	Z+1, r24	; 0x01
    42ba:	8e e6       	ldi	r24, 0x6E	; 110
    42bc:	82 83       	std	Z+2, r24	; 0x02
    42be:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    42c2:	48 c0       	rjmp	.+144    	; 0x4354 <nibbleToLCDstring+0x292>
    42c4:	c1 2f       	mov	r28, r17
    42c6:	d0 e0       	ldi	r29, 0x00	; 0
    42c8:	fe 01       	movw	r30, r28
    42ca:	ec 53       	subi	r30, 0x3C	; 60
    42cc:	fa 4f       	sbci	r31, 0xFA	; 250
    42ce:	80 81       	ld	r24, Z
    42d0:	0e 94 65 39 	call	0x72ca	; 0x72ca <nibbleToChr>
    42d4:	cb 5d       	subi	r28, 0xDB	; 219
    42d6:	dd 4f       	sbci	r29, 0xFD	; 253
    42d8:	88 83       	st	Y, r24
    42da:	1f 5f       	subi	r17, 0xFF	; 255
    42dc:	01 c0       	rjmp	.+2      	; 0x42e0 <nibbleToLCDstring+0x21e>
    42de:	10 e0       	ldi	r17, 0x00	; 0
    42e0:	18 30       	cpi	r17, 0x08	; 8
    42e2:	80 f3       	brcs	.-32     	; 0x42c4 <nibbleToLCDstring+0x202>
    42e4:	37 c0       	rjmp	.+110    	; 0x4354 <nibbleToLCDstring+0x292>
    42e6:	82 2f       	mov	r24, r18
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	fc 01       	movw	r30, r24
    42ec:	ec 53       	subi	r30, 0x3C	; 60
    42ee:	fa 4f       	sbci	r31, 0xFA	; 250
    42f0:	30 81       	ld	r19, Z
    42f2:	31 11       	cpse	r19, r1
    42f4:	02 c0       	rjmp	.+4      	; 0x42fa <nibbleToLCDstring+0x238>
    42f6:	3f e6       	ldi	r19, 0x6F	; 111
    42f8:	01 c0       	rjmp	.+2      	; 0x42fc <nibbleToLCDstring+0x23a>
    42fa:	39 e4       	ldi	r19, 0x49	; 73
    42fc:	fc 01       	movw	r30, r24
    42fe:	eb 5d       	subi	r30, 0xDB	; 219
    4300:	fd 4f       	sbci	r31, 0xFD	; 253
    4302:	30 83       	st	Z, r19
    4304:	2f 5f       	subi	r18, 0xFF	; 255
    4306:	01 c0       	rjmp	.+2      	; 0x430a <nibbleToLCDstring+0x248>
    4308:	20 e0       	ldi	r18, 0x00	; 0
    430a:	28 30       	cpi	r18, 0x08	; 8
    430c:	60 f3       	brcs	.-40     	; 0x42e6 <nibbleToLCDstring+0x224>
    430e:	22 c0       	rjmp	.+68     	; 0x4354 <nibbleToLCDstring+0x292>
    4310:	a4 ec       	ldi	r26, 0xC4	; 196
    4312:	b5 e0       	ldi	r27, 0x05	; 5
    4314:	8c 91       	ld	r24, X
    4316:	e5 e2       	ldi	r30, 0x25	; 37
    4318:	f2 e0       	ldi	r31, 0x02	; 2
    431a:	80 5d       	subi	r24, 0xD0	; 208
    431c:	80 83       	st	Z, r24
    431e:	11 96       	adiw	r26, 0x01	; 1
    4320:	8c 91       	ld	r24, X
    4322:	80 5c       	subi	r24, 0xC0	; 192
    4324:	81 83       	std	Z+1, r24	; 0x01
    4326:	12 82       	std	Z+2, r1	; 0x02
    4328:	15 c0       	rjmp	.+42     	; 0x4354 <nibbleToLCDstring+0x292>
    432a:	e4 ec       	ldi	r30, 0xC4	; 196
    432c:	f5 e0       	ldi	r31, 0x05	; 5
    432e:	90 81       	ld	r25, Z
    4330:	81 81       	ldd	r24, Z+1	; 0x01
    4332:	29 2f       	mov	r18, r25
    4334:	28 2b       	or	r18, r24
    4336:	31 f4       	brne	.+12     	; 0x4344 <nibbleToLCDstring+0x282>
    4338:	e5 e2       	ldi	r30, 0x25	; 37
    433a:	f2 e0       	ldi	r31, 0x02	; 2
    433c:	8d e2       	ldi	r24, 0x2D	; 45
    433e:	80 83       	st	Z, r24
    4340:	81 83       	std	Z+1, r24	; 0x01
    4342:	06 c0       	rjmp	.+12     	; 0x4350 <nibbleToLCDstring+0x28e>
    4344:	e5 e2       	ldi	r30, 0x25	; 37
    4346:	f2 e0       	ldi	r31, 0x02	; 2
    4348:	90 5d       	subi	r25, 0xD0	; 208
    434a:	90 83       	st	Z, r25
    434c:	80 5d       	subi	r24, 0xD0	; 208
    434e:	81 83       	std	Z+1, r24	; 0x01
    4350:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    4354:	df 91       	pop	r29
    4356:	cf 91       	pop	r28
    4358:	1f 91       	pop	r17
    435a:	0f 91       	pop	r16
    435c:	08 95       	ret

0000435e <LCDStringOut>:
    435e:	0f 93       	push	r16
    4360:	1f 93       	push	r17
    4362:	cf 93       	push	r28
    4364:	8e e1       	ldi	r24, 0x1E	; 30
    4366:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    436a:	c0 e0       	ldi	r28, 0x00	; 0
    436c:	05 e2       	ldi	r16, 0x25	; 37
    436e:	12 e0       	ldi	r17, 0x02	; 2
    4370:	0b c0       	rjmp	.+22     	; 0x4388 <LCDStringOut+0x2a>
    4372:	f8 01       	movw	r30, r16
    4374:	80 81       	ld	r24, Z
    4376:	88 23       	and	r24, r24
    4378:	19 f0       	breq	.+6      	; 0x4380 <LCDStringOut+0x22>
    437a:	0f 5f       	subi	r16, 0xFF	; 255
    437c:	1f 4f       	sbci	r17, 0xFF	; 255
    437e:	01 c0       	rjmp	.+2      	; 0x4382 <LCDStringOut+0x24>
    4380:	80 e2       	ldi	r24, 0x20	; 32
    4382:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4386:	cf 5f       	subi	r28, 0xFF	; 255
    4388:	ca 30       	cpi	r28, 0x0A	; 10
    438a:	98 f3       	brcs	.-26     	; 0x4372 <LCDStringOut+0x14>
    438c:	cf 91       	pop	r28
    438e:	1f 91       	pop	r17
    4390:	0f 91       	pop	r16
    4392:	08 95       	ret

00004394 <nibbleCheckOvfl>:
    4394:	8a 30       	cpi	r24, 0x0A	; 10
    4396:	1c f4       	brge	.+6      	; 0x439e <nibbleCheckOvfl+0xa>
    4398:	88 23       	and	r24, r24
    439a:	1c f0       	brlt	.+6      	; 0x43a2 <nibbleCheckOvfl+0xe>
    439c:	08 95       	ret
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	08 95       	ret
    43a2:	89 e0       	ldi	r24, 0x09	; 9
    43a4:	08 95       	ret

000043a6 <nibbleChange>:
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	c8 2f       	mov	r28, r24
    43b0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    43b4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    43b8:	31 96       	adiw	r30, 0x01	; 1
    43ba:	84 91       	lpm	r24, Z
    43bc:	28 2f       	mov	r18, r24
    43be:	20 71       	andi	r18, 0x10	; 16
    43c0:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    43c4:	8e 2f       	mov	r24, r30
    43c6:	90 e0       	ldi	r25, 0x00	; 0
    43c8:	fc 01       	movw	r30, r24
    43ca:	32 97       	sbiw	r30, 0x02	; 2
    43cc:	ed 30       	cpi	r30, 0x0D	; 13
    43ce:	f1 05       	cpc	r31, r1
    43d0:	08 f0       	brcs	.+2      	; 0x43d4 <nibbleChange+0x2e>
    43d2:	93 c1       	rjmp	.+806    	; 0x46fa <nibbleChange+0x354>
    43d4:	88 27       	eor	r24, r24
    43d6:	e4 57       	subi	r30, 0x74	; 116
    43d8:	ff 4f       	sbci	r31, 0xFF	; 255
    43da:	8f 4f       	sbci	r24, 0xFF	; 255
    43dc:	0c 94 a2 3c 	jmp	0x7944	; 0x7944 <__tablejump2__>
    43e0:	d0 e0       	ldi	r29, 0x00	; 0
    43e2:	cc 53       	subi	r28, 0x3C	; 60
    43e4:	da 4f       	sbci	r29, 0xFA	; 250
    43e6:	88 81       	ld	r24, Y
    43e8:	68 0f       	add	r22, r24
    43ea:	6f 70       	andi	r22, 0x0F	; 15
    43ec:	68 83       	st	Y, r22
    43ee:	85 c1       	rjmp	.+778    	; 0x46fa <nibbleChange+0x354>
    43f0:	21 11       	cpse	r18, r1
    43f2:	1b c0       	rjmp	.+54     	; 0x442a <nibbleChange+0x84>
    43f4:	61 30       	cpi	r22, 0x01	; 1
    43f6:	41 f4       	brne	.+16     	; 0x4408 <nibbleChange+0x62>
    43f8:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43fc:	80 31       	cpi	r24, 0x10	; 16
    43fe:	20 f0       	brcs	.+8      	; 0x4408 <nibbleChange+0x62>
    4400:	81 e0       	ldi	r24, 0x01	; 1
    4402:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4406:	79 c1       	rjmp	.+754    	; 0x46fa <nibbleChange+0x354>
    4408:	6f 3f       	cpi	r22, 0xFF	; 255
    440a:	49 f4       	brne	.+18     	; 0x441e <nibbleChange+0x78>
    440c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4410:	82 50       	subi	r24, 0x02	; 2
    4412:	8f 30       	cpi	r24, 0x0F	; 15
    4414:	20 f0       	brcs	.+8      	; 0x441e <nibbleChange+0x78>
    4416:	80 e1       	ldi	r24, 0x10	; 16
    4418:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    441c:	6e c1       	rjmp	.+732    	; 0x46fa <nibbleChange+0x354>
    441e:	e4 ec       	ldi	r30, 0xC4	; 196
    4420:	f5 e0       	ldi	r31, 0x05	; 5
    4422:	80 81       	ld	r24, Z
    4424:	68 0f       	add	r22, r24
    4426:	60 83       	st	Z, r22
    4428:	68 c1       	rjmp	.+720    	; 0x46fa <nibbleChange+0x354>
    442a:	61 30       	cpi	r22, 0x01	; 1
    442c:	41 f4       	brne	.+16     	; 0x443e <nibbleChange+0x98>
    442e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4432:	80 31       	cpi	r24, 0x10	; 16
    4434:	21 f4       	brne	.+8      	; 0x443e <nibbleChange+0x98>
    4436:	8f ef       	ldi	r24, 0xFF	; 255
    4438:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    443c:	5e c1       	rjmp	.+700    	; 0x46fa <nibbleChange+0x354>
    443e:	61 30       	cpi	r22, 0x01	; 1
    4440:	41 f4       	brne	.+16     	; 0x4452 <nibbleChange+0xac>
    4442:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4446:	8f 3f       	cpi	r24, 0xFF	; 255
    4448:	21 f4       	brne	.+8      	; 0x4452 <nibbleChange+0xac>
    444a:	81 e0       	ldi	r24, 0x01	; 1
    444c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4450:	54 c1       	rjmp	.+680    	; 0x46fa <nibbleChange+0x354>
    4452:	6f 3f       	cpi	r22, 0xFF	; 255
    4454:	41 f4       	brne	.+16     	; 0x4466 <nibbleChange+0xc0>
    4456:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    445a:	8f 3f       	cpi	r24, 0xFF	; 255
    445c:	21 f4       	brne	.+8      	; 0x4466 <nibbleChange+0xc0>
    445e:	80 e1       	ldi	r24, 0x10	; 16
    4460:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4464:	4a c1       	rjmp	.+660    	; 0x46fa <nibbleChange+0x354>
    4466:	6f 3f       	cpi	r22, 0xFF	; 255
    4468:	41 f4       	brne	.+16     	; 0x447a <nibbleChange+0xd4>
    446a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    446e:	81 30       	cpi	r24, 0x01	; 1
    4470:	21 f4       	brne	.+8      	; 0x447a <nibbleChange+0xd4>
    4472:	8f ef       	ldi	r24, 0xFF	; 255
    4474:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4478:	40 c1       	rjmp	.+640    	; 0x46fa <nibbleChange+0x354>
    447a:	e4 ec       	ldi	r30, 0xC4	; 196
    447c:	f5 e0       	ldi	r31, 0x05	; 5
    447e:	80 81       	ld	r24, Z
    4480:	68 0f       	add	r22, r24
    4482:	60 83       	st	Z, r22
    4484:	3a c1       	rjmp	.+628    	; 0x46fa <nibbleChange+0x354>
    4486:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    448a:	8f 3f       	cpi	r24, 0xFF	; 255
    448c:	09 f4       	brne	.+2      	; 0x4490 <nibbleChange+0xea>
    448e:	c1 e0       	ldi	r28, 0x01	; 1
    4490:	c1 11       	cpse	r28, r1
    4492:	16 c0       	rjmp	.+44     	; 0x44c0 <nibbleChange+0x11a>
    4494:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4498:	8c 30       	cpi	r24, 0x0C	; 12
    449a:	50 f4       	brcc	.+20     	; 0x44b0 <nibbleChange+0x10a>
    449c:	8b 30       	cpi	r24, 0x0B	; 11
    449e:	11 f4       	brne	.+4      	; 0x44a4 <nibbleChange+0xfe>
    44a0:	61 30       	cpi	r22, 0x01	; 1
    44a2:	41 f0       	breq	.+16     	; 0x44b4 <nibbleChange+0x10e>
    44a4:	81 11       	cpse	r24, r1
    44a6:	02 c0       	rjmp	.+4      	; 0x44ac <nibbleChange+0x106>
    44a8:	6f 3f       	cpi	r22, 0xFF	; 255
    44aa:	31 f0       	breq	.+12     	; 0x44b8 <nibbleChange+0x112>
    44ac:	68 0f       	add	r22, r24
    44ae:	05 c0       	rjmp	.+10     	; 0x44ba <nibbleChange+0x114>
    44b0:	60 e0       	ldi	r22, 0x00	; 0
    44b2:	03 c0       	rjmp	.+6      	; 0x44ba <nibbleChange+0x114>
    44b4:	60 e0       	ldi	r22, 0x00	; 0
    44b6:	01 c0       	rjmp	.+2      	; 0x44ba <nibbleChange+0x114>
    44b8:	6b e0       	ldi	r22, 0x0B	; 11
    44ba:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    44be:	2b c0       	rjmp	.+86     	; 0x4516 <nibbleChange+0x170>
    44c0:	21 11       	cpse	r18, r1
    44c2:	0a c0       	rjmp	.+20     	; 0x44d8 <nibbleChange+0x132>
    44c4:	81 11       	cpse	r24, r1
    44c6:	02 c0       	rjmp	.+4      	; 0x44cc <nibbleChange+0x126>
    44c8:	6f 3f       	cpi	r22, 0xFF	; 255
    44ca:	c1 f0       	breq	.+48     	; 0x44fc <nibbleChange+0x156>
    44cc:	8a 30       	cpi	r24, 0x0A	; 10
    44ce:	11 f4       	brne	.+4      	; 0x44d4 <nibbleChange+0x12e>
    44d0:	61 30       	cpi	r22, 0x01	; 1
    44d2:	b1 f0       	breq	.+44     	; 0x4500 <nibbleChange+0x15a>
    44d4:	68 0f       	add	r22, r24
    44d6:	1d c0       	rjmp	.+58     	; 0x4512 <nibbleChange+0x16c>
    44d8:	81 11       	cpse	r24, r1
    44da:	02 c0       	rjmp	.+4      	; 0x44e0 <nibbleChange+0x13a>
    44dc:	6f 3f       	cpi	r22, 0xFF	; 255
    44de:	91 f0       	breq	.+36     	; 0x4504 <nibbleChange+0x15e>
    44e0:	8a 30       	cpi	r24, 0x0A	; 10
    44e2:	11 f4       	brne	.+4      	; 0x44e8 <nibbleChange+0x142>
    44e4:	61 30       	cpi	r22, 0x01	; 1
    44e6:	81 f0       	breq	.+32     	; 0x4508 <nibbleChange+0x162>
    44e8:	8f 3f       	cpi	r24, 0xFF	; 255
    44ea:	11 f4       	brne	.+4      	; 0x44f0 <nibbleChange+0x14a>
    44ec:	61 30       	cpi	r22, 0x01	; 1
    44ee:	71 f0       	breq	.+28     	; 0x450c <nibbleChange+0x166>
    44f0:	8f 3f       	cpi	r24, 0xFF	; 255
    44f2:	11 f4       	brne	.+4      	; 0x44f8 <nibbleChange+0x152>
    44f4:	6f 3f       	cpi	r22, 0xFF	; 255
    44f6:	61 f0       	breq	.+24     	; 0x4510 <nibbleChange+0x16a>
    44f8:	68 0f       	add	r22, r24
    44fa:	0b c0       	rjmp	.+22     	; 0x4512 <nibbleChange+0x16c>
    44fc:	6a e0       	ldi	r22, 0x0A	; 10
    44fe:	09 c0       	rjmp	.+18     	; 0x4512 <nibbleChange+0x16c>
    4500:	60 e0       	ldi	r22, 0x00	; 0
    4502:	07 c0       	rjmp	.+14     	; 0x4512 <nibbleChange+0x16c>
    4504:	6f ef       	ldi	r22, 0xFF	; 255
    4506:	05 c0       	rjmp	.+10     	; 0x4512 <nibbleChange+0x16c>
    4508:	6f ef       	ldi	r22, 0xFF	; 255
    450a:	03 c0       	rjmp	.+6      	; 0x4512 <nibbleChange+0x16c>
    450c:	60 e0       	ldi	r22, 0x00	; 0
    450e:	01 c0       	rjmp	.+2      	; 0x4512 <nibbleChange+0x16c>
    4510:	6a e0       	ldi	r22, 0x0A	; 10
    4512:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    4516:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    451a:	9f 3f       	cpi	r25, 0xFF	; 255
    451c:	09 f4       	brne	.+2      	; 0x4520 <nibbleChange+0x17a>
    451e:	ed c0       	rjmp	.+474    	; 0x46fa <nibbleChange+0x354>
    4520:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4524:	8f 3f       	cpi	r24, 0xFF	; 255
    4526:	09 f4       	brne	.+2      	; 0x452a <nibbleChange+0x184>
    4528:	e8 c0       	rjmp	.+464    	; 0x46fa <nibbleChange+0x354>
    452a:	28 2f       	mov	r18, r24
    452c:	22 0f       	add	r18, r18
    452e:	82 0f       	add	r24, r18
    4530:	28 2f       	mov	r18, r24
    4532:	22 0f       	add	r18, r18
    4534:	22 0f       	add	r18, r18
    4536:	92 0f       	add	r25, r18
    4538:	0a f0       	brmi	.+2      	; 0x453c <nibbleChange+0x196>
    453a:	df c0       	rjmp	.+446    	; 0x46fa <nibbleChange+0x354>
    453c:	e4 ec       	ldi	r30, 0xC4	; 196
    453e:	f5 e0       	ldi	r31, 0x05	; 5
    4540:	87 e0       	ldi	r24, 0x07	; 7
    4542:	80 83       	st	Z, r24
    4544:	8a e0       	ldi	r24, 0x0A	; 10
    4546:	81 83       	std	Z+1, r24	; 0x01
    4548:	d8 c0       	rjmp	.+432    	; 0x46fa <nibbleChange+0x354>
    454a:	c1 11       	cpse	r28, r1
    454c:	07 c0       	rjmp	.+14     	; 0x455c <nibbleChange+0x1b6>
    454e:	e4 ec       	ldi	r30, 0xC4	; 196
    4550:	f5 e0       	ldi	r31, 0x05	; 5
    4552:	80 81       	ld	r24, Z
    4554:	68 0f       	add	r22, r24
    4556:	67 70       	andi	r22, 0x07	; 7
    4558:	60 83       	st	Z, r22
    455a:	cf c0       	rjmp	.+414    	; 0x46fa <nibbleChange+0x354>
    455c:	d0 e0       	ldi	r29, 0x00	; 0
    455e:	04 ec       	ldi	r16, 0xC4	; 196
    4560:	15 e0       	ldi	r17, 0x05	; 5
    4562:	cc 53       	subi	r28, 0x3C	; 60
    4564:	da 4f       	sbci	r29, 0xFA	; 250
    4566:	88 81       	ld	r24, Y
    4568:	86 0f       	add	r24, r22
    456a:	14 df       	rcall	.-472    	; 0x4394 <nibbleCheckOvfl>
    456c:	88 83       	st	Y, r24
    456e:	f8 01       	movw	r30, r16
    4570:	81 81       	ldd	r24, Z+1	; 0x01
    4572:	92 81       	ldd	r25, Z+2	; 0x02
    4574:	88 0f       	add	r24, r24
    4576:	28 2f       	mov	r18, r24
    4578:	22 0f       	add	r18, r18
    457a:	22 0f       	add	r18, r18
    457c:	82 0f       	add	r24, r18
    457e:	89 0f       	add	r24, r25
    4580:	80 32       	cpi	r24, 0x20	; 32
    4582:	2c f0       	brlt	.+10     	; 0x458e <nibbleChange+0x1e8>
    4584:	83 e0       	ldi	r24, 0x03	; 3
    4586:	81 83       	std	Z+1, r24	; 0x01
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	82 83       	std	Z+2, r24	; 0x02
    458c:	b6 c0       	rjmp	.+364    	; 0x46fa <nibbleChange+0x354>
    458e:	88 23       	and	r24, r24
    4590:	0c f0       	brlt	.+2      	; 0x4594 <nibbleChange+0x1ee>
    4592:	b3 c0       	rjmp	.+358    	; 0x46fa <nibbleChange+0x354>
    4594:	e4 ec       	ldi	r30, 0xC4	; 196
    4596:	f5 e0       	ldi	r31, 0x05	; 5
    4598:	11 82       	std	Z+1, r1	; 0x01
    459a:	12 82       	std	Z+2, r1	; 0x02
    459c:	ae c0       	rjmp	.+348    	; 0x46fa <nibbleChange+0x354>
    459e:	d0 e0       	ldi	r29, 0x00	; 0
    45a0:	04 ec       	ldi	r16, 0xC4	; 196
    45a2:	15 e0       	ldi	r17, 0x05	; 5
    45a4:	cc 53       	subi	r28, 0x3C	; 60
    45a6:	da 4f       	sbci	r29, 0xFA	; 250
    45a8:	88 81       	ld	r24, Y
    45aa:	86 0f       	add	r24, r22
    45ac:	f3 de       	rcall	.-538    	; 0x4394 <nibbleCheckOvfl>
    45ae:	88 83       	st	Y, r24
    45b0:	f8 01       	movw	r30, r16
    45b2:	20 81       	ld	r18, Z
    45b4:	81 81       	ldd	r24, Z+1	; 0x01
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	ac 01       	movw	r20, r24
    45ba:	44 0f       	add	r20, r20
    45bc:	55 1f       	adc	r21, r21
    45be:	88 0f       	add	r24, r24
    45c0:	99 1f       	adc	r25, r25
    45c2:	88 0f       	add	r24, r24
    45c4:	99 1f       	adc	r25, r25
    45c6:	88 0f       	add	r24, r24
    45c8:	99 1f       	adc	r25, r25
    45ca:	84 0f       	add	r24, r20
    45cc:	95 1f       	adc	r25, r21
    45ce:	f4 e6       	ldi	r31, 0x64	; 100
    45d0:	2f 9f       	mul	r18, r31
    45d2:	80 0d       	add	r24, r0
    45d4:	91 1d       	adc	r25, r1
    45d6:	11 24       	eor	r1, r1
    45d8:	f8 01       	movw	r30, r16
    45da:	22 81       	ldd	r18, Z+2	; 0x02
    45dc:	82 0f       	add	r24, r18
    45de:	91 1d       	adc	r25, r1
    45e0:	8f 3f       	cpi	r24, 0xFF	; 255
    45e2:	91 05       	cpc	r25, r1
    45e4:	09 f0       	breq	.+2      	; 0x45e8 <nibbleChange+0x242>
    45e6:	0c f4       	brge	.+2      	; 0x45ea <nibbleChange+0x244>
    45e8:	88 c0       	rjmp	.+272    	; 0x46fa <nibbleChange+0x354>
    45ea:	82 e0       	ldi	r24, 0x02	; 2
    45ec:	80 83       	st	Z, r24
    45ee:	85 e0       	ldi	r24, 0x05	; 5
    45f0:	81 83       	std	Z+1, r24	; 0x01
    45f2:	82 83       	std	Z+2, r24	; 0x02
    45f4:	82 c0       	rjmp	.+260    	; 0x46fa <nibbleChange+0x354>
    45f6:	22 23       	and	r18, r18
    45f8:	a1 f0       	breq	.+40     	; 0x4622 <nibbleChange+0x27c>
    45fa:	d0 e0       	ldi	r29, 0x00	; 0
    45fc:	fe 01       	movw	r30, r28
    45fe:	ec 53       	subi	r30, 0x3C	; 60
    4600:	fa 4f       	sbci	r31, 0xFA	; 250
    4602:	80 81       	ld	r24, Z
    4604:	68 0f       	add	r22, r24
    4606:	60 83       	st	Z, r22
    4608:	64 30       	cpi	r22, 0x04	; 4
    460a:	19 f4       	brne	.+6      	; 0x4612 <nibbleChange+0x26c>
    460c:	8f ef       	ldi	r24, 0xFF	; 255
    460e:	80 83       	st	Z, r24
    4610:	74 c0       	rjmp	.+232    	; 0x46fa <nibbleChange+0x354>
    4612:	6e 3f       	cpi	r22, 0xFE	; 254
    4614:	09 f0       	breq	.+2      	; 0x4618 <nibbleChange+0x272>
    4616:	71 c0       	rjmp	.+226    	; 0x46fa <nibbleChange+0x354>
    4618:	cc 53       	subi	r28, 0x3C	; 60
    461a:	da 4f       	sbci	r29, 0xFA	; 250
    461c:	83 e0       	ldi	r24, 0x03	; 3
    461e:	88 83       	st	Y, r24
    4620:	6c c0       	rjmp	.+216    	; 0x46fa <nibbleChange+0x354>
    4622:	d0 e0       	ldi	r29, 0x00	; 0
    4624:	fe 01       	movw	r30, r28
    4626:	ec 53       	subi	r30, 0x3C	; 60
    4628:	fa 4f       	sbci	r31, 0xFA	; 250
    462a:	80 81       	ld	r24, Z
    462c:	81 11       	cpse	r24, r1
    462e:	05 c0       	rjmp	.+10     	; 0x463a <nibbleChange+0x294>
    4630:	6f 3f       	cpi	r22, 0xFF	; 255
    4632:	19 f4       	brne	.+6      	; 0x463a <nibbleChange+0x294>
    4634:	83 e0       	ldi	r24, 0x03	; 3
    4636:	80 83       	st	Z, r24
    4638:	60 c0       	rjmp	.+192    	; 0x46fa <nibbleChange+0x354>
    463a:	83 30       	cpi	r24, 0x03	; 3
    463c:	31 f4       	brne	.+12     	; 0x464a <nibbleChange+0x2a4>
    463e:	61 30       	cpi	r22, 0x01	; 1
    4640:	21 f4       	brne	.+8      	; 0x464a <nibbleChange+0x2a4>
    4642:	cc 53       	subi	r28, 0x3C	; 60
    4644:	da 4f       	sbci	r29, 0xFA	; 250
    4646:	18 82       	st	Y, r1
    4648:	58 c0       	rjmp	.+176    	; 0x46fa <nibbleChange+0x354>
    464a:	cc 53       	subi	r28, 0x3C	; 60
    464c:	da 4f       	sbci	r29, 0xFA	; 250
    464e:	68 0f       	add	r22, r24
    4650:	68 83       	st	Y, r22
    4652:	53 c0       	rjmp	.+166    	; 0x46fa <nibbleChange+0x354>
    4654:	d0 e0       	ldi	r29, 0x00	; 0
    4656:	cc 53       	subi	r28, 0x3C	; 60
    4658:	da 4f       	sbci	r29, 0xFA	; 250
    465a:	88 81       	ld	r24, Y
    465c:	68 0f       	add	r22, r24
    465e:	63 70       	andi	r22, 0x03	; 3
    4660:	68 83       	st	Y, r22
    4662:	4b c0       	rjmp	.+150    	; 0x46fa <nibbleChange+0x354>
    4664:	e4 ec       	ldi	r30, 0xC4	; 196
    4666:	f5 e0       	ldi	r31, 0x05	; 5
    4668:	80 81       	ld	r24, Z
    466a:	80 95       	com	r24
    466c:	80 83       	st	Z, r24
    466e:	45 c0       	rjmp	.+138    	; 0x46fa <nibbleChange+0x354>
    4670:	d0 e0       	ldi	r29, 0x00	; 0
    4672:	81 e0       	ldi	r24, 0x01	; 1
    4674:	61 fd       	sbrc	r22, 1
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	cc 53       	subi	r28, 0x3C	; 60
    467a:	da 4f       	sbci	r29, 0xFA	; 250
    467c:	88 83       	st	Y, r24
    467e:	3d c0       	rjmp	.+122    	; 0x46fa <nibbleChange+0x354>
    4680:	61 30       	cpi	r22, 0x01	; 1
    4682:	41 f4       	brne	.+16     	; 0x4694 <nibbleChange+0x2ee>
    4684:	d0 e0       	ldi	r29, 0x00	; 0
    4686:	cc 53       	subi	r28, 0x3C	; 60
    4688:	da 4f       	sbci	r29, 0xFA	; 250
    468a:	88 81       	ld	r24, Y
    468c:	87 70       	andi	r24, 0x07	; 7
    468e:	8f 5f       	subi	r24, 0xFF	; 255
    4690:	88 83       	st	Y, r24
    4692:	33 c0       	rjmp	.+102    	; 0x46fa <nibbleChange+0x354>
    4694:	ec 2f       	mov	r30, r28
    4696:	f0 e0       	ldi	r31, 0x00	; 0
    4698:	ec 53       	subi	r30, 0x3C	; 60
    469a:	fa 4f       	sbci	r31, 0xFA	; 250
    469c:	80 81       	ld	r24, Z
    469e:	82 50       	subi	r24, 0x02	; 2
    46a0:	87 70       	andi	r24, 0x07	; 7
    46a2:	8f 5f       	subi	r24, 0xFF	; 255
    46a4:	80 83       	st	Z, r24
    46a6:	29 c0       	rjmp	.+82     	; 0x46fa <nibbleChange+0x354>
    46a8:	e4 ec       	ldi	r30, 0xC4	; 196
    46aa:	f5 e0       	ldi	r31, 0x05	; 5
    46ac:	90 81       	ld	r25, Z
    46ae:	81 81       	ldd	r24, Z+1	; 0x01
    46b0:	99 0f       	add	r25, r25
    46b2:	29 2f       	mov	r18, r25
    46b4:	22 0f       	add	r18, r18
    46b6:	22 0f       	add	r18, r18
    46b8:	92 0f       	add	r25, r18
    46ba:	89 0f       	add	r24, r25
    46bc:	c1 11       	cpse	r28, r1
    46be:	07 c0       	rjmp	.+14     	; 0x46ce <nibbleChange+0x328>
    46c0:	66 0f       	add	r22, r22
    46c2:	96 2f       	mov	r25, r22
    46c4:	99 0f       	add	r25, r25
    46c6:	99 0f       	add	r25, r25
    46c8:	69 0f       	add	r22, r25
    46ca:	68 0f       	add	r22, r24
    46cc:	01 c0       	rjmp	.+2      	; 0x46d0 <nibbleChange+0x32a>
    46ce:	68 0f       	add	r22, r24
    46d0:	66 23       	and	r22, r22
    46d2:	1c f0       	brlt	.+6      	; 0x46da <nibbleChange+0x334>
    46d4:	61 34       	cpi	r22, 0x41	; 65
    46d6:	1c f4       	brge	.+6      	; 0x46de <nibbleChange+0x338>
    46d8:	03 c0       	rjmp	.+6      	; 0x46e0 <nibbleChange+0x33a>
    46da:	60 e0       	ldi	r22, 0x00	; 0
    46dc:	01 c0       	rjmp	.+2      	; 0x46e0 <nibbleChange+0x33a>
    46de:	60 e0       	ldi	r22, 0x00	; 0
    46e0:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    46e4:	06 c0       	rjmp	.+12     	; 0x46f2 <nibbleChange+0x34c>
    46e6:	e4 ec       	ldi	r30, 0xC4	; 196
    46e8:	f5 e0       	ldi	r31, 0x05	; 5
    46ea:	80 81       	ld	r24, Z
    46ec:	8f 5f       	subi	r24, 0xFF	; 255
    46ee:	80 83       	st	Z, r24
    46f0:	6a 50       	subi	r22, 0x0A	; 10
    46f2:	6a 30       	cpi	r22, 0x0A	; 10
    46f4:	c4 f7       	brge	.-16     	; 0x46e6 <nibbleChange+0x340>
    46f6:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    46fa:	df 91       	pop	r29
    46fc:	cf 91       	pop	r28
    46fe:	1f 91       	pop	r17
    4700:	0f 91       	pop	r16
    4702:	08 95       	ret

00004704 <nibbleToData>:
    4704:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4708:	8e 2f       	mov	r24, r30
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	fc 01       	movw	r30, r24
    470e:	32 97       	sbiw	r30, 0x02	; 2
    4710:	ed 30       	cpi	r30, 0x0D	; 13
    4712:	f1 05       	cpc	r31, r1
    4714:	08 f0       	brcs	.+2      	; 0x4718 <nibbleToData+0x14>
    4716:	da c0       	rjmp	.+436    	; 0x48cc <nibbleToData+0x1c8>
    4718:	88 27       	eor	r24, r24
    471a:	e7 56       	subi	r30, 0x67	; 103
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	8f 4f       	sbci	r24, 0xFF	; 255
    4720:	0c 94 a2 3c 	jmp	0x7944	; 0x7944 <__tablejump2__>
    4724:	e4 ec       	ldi	r30, 0xC4	; 196
    4726:	f5 e0       	ldi	r31, 0x05	; 5
    4728:	80 81       	ld	r24, Z
    472a:	20 e1       	ldi	r18, 0x10	; 16
    472c:	82 9f       	mul	r24, r18
    472e:	c0 01       	movw	r24, r0
    4730:	11 24       	eor	r1, r1
    4732:	91 81       	ldd	r25, Z+1	; 0x01
    4734:	9f 70       	andi	r25, 0x0F	; 15
    4736:	89 2b       	or	r24, r25
    4738:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    473c:	08 95       	ret
    473e:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    4742:	8f ef       	ldi	r24, 0xFF	; 255
    4744:	89 0f       	add	r24, r25
    4746:	80 31       	cpi	r24, 0x10	; 16
    4748:	18 f0       	brcs	.+6      	; 0x4750 <nibbleToData+0x4c>
    474a:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    474e:	08 95       	ret
    4750:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4754:	08 95       	ret
    4756:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    475a:	9f 3f       	cpi	r25, 0xFF	; 255
    475c:	21 f0       	breq	.+8      	; 0x4766 <nibbleToData+0x62>
    475e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4762:	8f 3f       	cpi	r24, 0xFF	; 255
    4764:	21 f4       	brne	.+8      	; 0x476e <nibbleToData+0x6a>
    4766:	8f ef       	ldi	r24, 0xFF	; 255
    4768:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    476c:	08 95       	ret
    476e:	28 2f       	mov	r18, r24
    4770:	22 0f       	add	r18, r18
    4772:	82 0f       	add	r24, r18
    4774:	88 0f       	add	r24, r24
    4776:	88 0f       	add	r24, r24
    4778:	89 0f       	add	r24, r25
    477a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    477e:	08 95       	ret
    4780:	e4 ec       	ldi	r30, 0xC4	; 196
    4782:	f5 e0       	ldi	r31, 0x05	; 5
    4784:	80 81       	ld	r24, Z
    4786:	30 e2       	ldi	r19, 0x20	; 32
    4788:	83 9f       	mul	r24, r19
    478a:	c0 01       	movw	r24, r0
    478c:	11 24       	eor	r1, r1
    478e:	21 81       	ldd	r18, Z+1	; 0x01
    4790:	32 81       	ldd	r19, Z+2	; 0x02
    4792:	22 0f       	add	r18, r18
    4794:	42 2f       	mov	r20, r18
    4796:	44 0f       	add	r20, r20
    4798:	44 0f       	add	r20, r20
    479a:	24 0f       	add	r18, r20
    479c:	23 0f       	add	r18, r19
    479e:	20 32       	cpi	r18, 0x20	; 32
    47a0:	20 f0       	brcs	.+8      	; 0x47aa <nibbleToData+0xa6>
    47a2:	8f 61       	ori	r24, 0x1F	; 31
    47a4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47a8:	08 95       	ret
    47aa:	82 2b       	or	r24, r18
    47ac:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47b0:	08 95       	ret
    47b2:	e4 ec       	ldi	r30, 0xC4	; 196
    47b4:	f5 e0       	ldi	r31, 0x05	; 5
    47b6:	20 81       	ld	r18, Z
    47b8:	81 81       	ldd	r24, Z+1	; 0x01
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	ac 01       	movw	r20, r24
    47be:	44 0f       	add	r20, r20
    47c0:	55 1f       	adc	r21, r21
    47c2:	88 0f       	add	r24, r24
    47c4:	99 1f       	adc	r25, r25
    47c6:	88 0f       	add	r24, r24
    47c8:	99 1f       	adc	r25, r25
    47ca:	88 0f       	add	r24, r24
    47cc:	99 1f       	adc	r25, r25
    47ce:	84 0f       	add	r24, r20
    47d0:	95 1f       	adc	r25, r21
    47d2:	34 e6       	ldi	r19, 0x64	; 100
    47d4:	23 9f       	mul	r18, r19
    47d6:	80 0d       	add	r24, r0
    47d8:	91 1d       	adc	r25, r1
    47da:	11 24       	eor	r1, r1
    47dc:	22 81       	ldd	r18, Z+2	; 0x02
    47de:	82 0f       	add	r24, r18
    47e0:	91 1d       	adc	r25, r1
    47e2:	8f 3f       	cpi	r24, 0xFF	; 255
    47e4:	91 05       	cpc	r25, r1
    47e6:	29 f0       	breq	.+10     	; 0x47f2 <nibbleToData+0xee>
    47e8:	20 f0       	brcs	.+8      	; 0x47f2 <nibbleToData+0xee>
    47ea:	8f ef       	ldi	r24, 0xFF	; 255
    47ec:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47f0:	08 95       	ret
    47f2:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47f6:	08 95       	ret
    47f8:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    47fc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4800:	84 30       	cpi	r24, 0x04	; 4
    4802:	08 f4       	brcc	.+2      	; 0x4806 <nibbleToData+0x102>
    4804:	63 c0       	rjmp	.+198    	; 0x48cc <nibbleToData+0x1c8>
    4806:	8f ef       	ldi	r24, 0xFF	; 255
    4808:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    480c:	08 95       	ret
    480e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4812:	83 70       	andi	r24, 0x03	; 3
    4814:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4818:	08 95       	ret
    481a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    481e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4822:	08 95       	ret
    4824:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	0c c0       	rjmp	.+24     	; 0x4844 <nibbleToData+0x140>
    482c:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    4830:	99 0f       	add	r25, r25
    4832:	e8 2f       	mov	r30, r24
    4834:	f0 e0       	ldi	r31, 0x00	; 0
    4836:	ec 53       	subi	r30, 0x3C	; 60
    4838:	fa 4f       	sbci	r31, 0xFA	; 250
    483a:	20 81       	ld	r18, Z
    483c:	92 0f       	add	r25, r18
    483e:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    4842:	8f 5f       	subi	r24, 0xFF	; 255
    4844:	88 30       	cpi	r24, 0x08	; 8
    4846:	90 f3       	brcs	.-28     	; 0x482c <nibbleToData+0x128>
    4848:	08 95       	ret
    484a:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    484e:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    4852:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    4856:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    485a:	a2 ea       	ldi	r26, 0xA2	; 162
    485c:	b5 e0       	ldi	r27, 0x05	; 5
    485e:	88 e0       	ldi	r24, 0x08	; 8
    4860:	10 c0       	rjmp	.+32     	; 0x4882 <nibbleToData+0x17e>
    4862:	82 50       	subi	r24, 0x02	; 2
    4864:	f0 e0       	ldi	r31, 0x00	; 0
    4866:	ec 53       	subi	r30, 0x3C	; 60
    4868:	fa 4f       	sbci	r31, 0xFA	; 250
    486a:	90 81       	ld	r25, Z
    486c:	e8 2f       	mov	r30, r24
    486e:	f0 e0       	ldi	r31, 0x00	; 0
    4870:	ec 53       	subi	r30, 0x3C	; 60
    4872:	fa 4f       	sbci	r31, 0xFA	; 250
    4874:	20 81       	ld	r18, Z
    4876:	30 e1       	ldi	r19, 0x10	; 16
    4878:	23 9f       	mul	r18, r19
    487a:	90 0d       	add	r25, r0
    487c:	11 24       	eor	r1, r1
    487e:	9c 93       	st	X, r25
    4880:	11 96       	adiw	r26, 0x01	; 1
    4882:	ef ef       	ldi	r30, 0xFF	; 255
    4884:	e8 0f       	add	r30, r24
    4886:	81 11       	cpse	r24, r1
    4888:	ec cf       	rjmp	.-40     	; 0x4862 <nibbleToData+0x15e>
    488a:	08 95       	ret
    488c:	e4 ec       	ldi	r30, 0xC4	; 196
    488e:	f5 e0       	ldi	r31, 0x05	; 5
    4890:	20 81       	ld	r18, Z
    4892:	91 81       	ldd	r25, Z+1	; 0x01
    4894:	89 2f       	mov	r24, r25
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	01 97       	sbiw	r24, 0x01	; 1
    489a:	88 0f       	add	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	88 0f       	add	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	88 0f       	add	r24, r24
    48a4:	99 1f       	adc	r25, r25
    48a6:	9f ef       	ldi	r25, 0xFF	; 255
    48a8:	92 0f       	add	r25, r18
    48aa:	89 2b       	or	r24, r25
    48ac:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    48b0:	08 95       	ret
    48b2:	e4 ec       	ldi	r30, 0xC4	; 196
    48b4:	f5 e0       	ldi	r31, 0x05	; 5
    48b6:	80 81       	ld	r24, Z
    48b8:	91 81       	ldd	r25, Z+1	; 0x01
    48ba:	88 0f       	add	r24, r24
    48bc:	28 2f       	mov	r18, r24
    48be:	22 0f       	add	r18, r18
    48c0:	22 0f       	add	r18, r18
    48c2:	82 0f       	add	r24, r18
    48c4:	89 0f       	add	r24, r25
    48c6:	81 50       	subi	r24, 0x01	; 1
    48c8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    48cc:	08 95       	ret

000048ce <menuTextOut>:
    48ce:	0f 93       	push	r16
    48d0:	1f 93       	push	r17
    48d2:	cf 93       	push	r28
    48d4:	df 93       	push	r29
    48d6:	8c 01       	movw	r16, r24
    48d8:	d6 2f       	mov	r29, r22
    48da:	c0 e0       	ldi	r28, 0x00	; 0
    48dc:	0c c0       	rjmp	.+24     	; 0x48f6 <menuTextOut+0x28>
    48de:	f8 01       	movw	r30, r16
    48e0:	84 91       	lpm	r24, Z
    48e2:	88 23       	and	r24, r24
    48e4:	19 f0       	breq	.+6      	; 0x48ec <menuTextOut+0x1e>
    48e6:	0f 5f       	subi	r16, 0xFF	; 255
    48e8:	1f 4f       	sbci	r17, 0xFF	; 255
    48ea:	02 c0       	rjmp	.+4      	; 0x48f0 <menuTextOut+0x22>
    48ec:	8d 2f       	mov	r24, r29
    48ee:	d0 e2       	ldi	r29, 0x20	; 32
    48f0:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    48f4:	cf 5f       	subi	r28, 0xFF	; 255
    48f6:	ca 30       	cpi	r28, 0x0A	; 10
    48f8:	90 f3       	brcs	.-28     	; 0x48de <menuTextOut+0x10>
    48fa:	df 91       	pop	r29
    48fc:	cf 91       	pop	r28
    48fe:	1f 91       	pop	r17
    4900:	0f 91       	pop	r16
    4902:	08 95       	ret

00004904 <menuParentMenuToLCD>:
    4904:	80 e4       	ldi	r24, 0x40	; 64
    4906:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    490a:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    490e:	e1 11       	cpse	r30, r1
    4910:	07 c0       	rjmp	.+14     	; 0x4920 <menuParentMenuToLCD+0x1c>
    4912:	6a e3       	ldi	r22, 0x3A	; 58
    4914:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    4918:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    491c:	d8 cf       	rjmp	.-80     	; 0x48ce <menuTextOut>
    491e:	08 95       	ret
    4920:	f0 e0       	ldi	r31, 0x00	; 0
    4922:	31 97       	sbiw	r30, 0x01	; 1
    4924:	ee 0f       	add	r30, r30
    4926:	ff 1f       	adc	r31, r31
    4928:	e5 58       	subi	r30, 0x85	; 133
    492a:	fa 4f       	sbci	r31, 0xFA	; 250
    492c:	80 81       	ld	r24, Z
    492e:	91 81       	ldd	r25, Z+1	; 0x01
    4930:	6a e3       	ldi	r22, 0x3A	; 58
    4932:	02 96       	adiw	r24, 0x02	; 2
    4934:	cc cf       	rjmp	.-104    	; 0x48ce <menuTextOut>
    4936:	08 95       	ret

00004938 <menuDisplayValue>:
    4938:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    493c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4940:	84 91       	lpm	r24, Z
    4942:	8f 73       	andi	r24, 0x3F	; 63
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	02 97       	sbiw	r24, 0x02	; 2
    4948:	1c f0       	brlt	.+6      	; 0x4950 <menuDisplayValue+0x18>
    494a:	c8 da       	rcall	.-2672   	; 0x3edc <dataToNibbles>
    494c:	ba db       	rcall	.-2188   	; 0x40c2 <nibbleToLCDstring>
    494e:	07 cd       	rjmp	.-1522   	; 0x435e <LCDStringOut>
    4950:	08 95       	ret

00004952 <menuCursorSetDataNibble>:
    4952:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4956:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    495a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    495e:	e8 0f       	add	r30, r24
    4960:	f1 1d       	adc	r31, r1
    4962:	31 96       	adiw	r30, 0x01	; 1
    4964:	84 91       	lpm	r24, Z
    4966:	82 5e       	subi	r24, 0xE2	; 226
    4968:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    496c:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4976:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    497a:	84 91       	lpm	r24, Z
    497c:	90 e0       	ldi	r25, 0x00	; 0
    497e:	01 97       	sbiw	r24, 0x01	; 1
    4980:	28 17       	cp	r18, r24
    4982:	39 07       	cpc	r19, r25
    4984:	14 f4       	brge	.+4      	; 0x498a <menuCursorSetDataNibble+0x38>
    4986:	68 da       	rcall	.-2864   	; 0x3e58 <softkeyRight>
    4988:	03 c0       	rjmp	.+6      	; 0x4990 <menuCursorSetDataNibble+0x3e>
    498a:	83 e0       	ldi	r24, 0x03	; 3
    498c:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4990:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4994:	88 23       	and	r24, r24
    4996:	11 f0       	breq	.+4      	; 0x499c <menuCursorSetDataNibble+0x4a>
    4998:	59 da       	rcall	.-2894   	; 0x3e4c <softkeyLeft>
    499a:	03 c0       	rjmp	.+6      	; 0x49a2 <menuCursorSetDataNibble+0x50>
    499c:	82 e0       	ldi	r24, 0x02	; 2
    499e:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    49a2:	78 da       	rcall	.-2832   	; 0x3e94 <softkeyPlus>
    49a4:	89 da       	rcall	.-2798   	; 0x3eb8 <softkeyMinus>
    49a6:	0c 94 3f 3c 	jmp	0x787e	; 0x787e <keylabel_toLCD>
    49aa:	08 95       	ret

000049ac <menuCursorSetExtra>:
    49ac:	84 e1       	ldi	r24, 0x14	; 20
    49ae:	0c 94 17 13 	jmp	0x262e	; 0x262e <lcd_goto>
    49b2:	08 95       	ret

000049b4 <menuOnEnterStatusMidiIn>:
    49b4:	0f 93       	push	r16
    49b6:	1f 93       	push	r17
    49b8:	cf 93       	push	r28
    49ba:	f8 df       	rcall	.-16     	; 0x49ac <menuCursorSetExtra>
    49bc:	8b ed       	ldi	r24, 0xDB	; 219
    49be:	93 e0       	ldi	r25, 0x03	; 3
    49c0:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    49c4:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    49c8:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    49cc:	0e 94 28 3b 	call	0x7650	; 0x7650 <lcd_wordout>
    49d0:	8d e2       	ldi	r24, 0x2D	; 45
    49d2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    49d6:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    49da:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    49de:	04 97       	sbiw	r24, 0x04	; 4
    49e0:	30 f4       	brcc	.+12     	; 0x49ee <menuOnEnterStatusMidiIn+0x3a>
    49e2:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    49e6:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    49ea:	c8 2f       	mov	r28, r24
    49ec:	01 c0       	rjmp	.+2      	; 0x49f0 <menuOnEnterStatusMidiIn+0x3c>
    49ee:	c4 e0       	ldi	r28, 0x04	; 4
    49f0:	00 91 44 16 	lds	r16, 0x1644	; 0x801644 <midiRxInIndex>
    49f4:	10 e0       	ldi	r17, 0x00	; 0
    49f6:	00 5c       	subi	r16, 0xC0	; 192
    49f8:	1b 4e       	sbci	r17, 0xEB	; 235
    49fa:	13 c0       	rjmp	.+38     	; 0x4a22 <menuOnEnterStatusMidiIn+0x6e>
    49fc:	84 e1       	ldi	r24, 0x14	; 20
    49fe:	01 34       	cpi	r16, 0x41	; 65
    4a00:	18 07       	cpc	r17, r24
    4a02:	10 f0       	brcs	.+4      	; 0x4a08 <menuOnEnterStatusMidiIn+0x54>
    4a04:	f8 01       	movw	r30, r16
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <menuOnEnterStatusMidiIn+0x58>
    4a08:	e0 e4       	ldi	r30, 0x40	; 64
    4a0a:	f5 e1       	ldi	r31, 0x15	; 21
    4a0c:	8f 01       	movw	r16, r30
    4a0e:	01 50       	subi	r16, 0x01	; 1
    4a10:	11 09       	sbc	r17, r1
    4a12:	80 81       	ld	r24, Z
    4a14:	0e 94 9c 39 	call	0x7338	; 0x7338 <lcd_hexout>
    4a18:	c1 50       	subi	r28, 0x01	; 1
    4a1a:	19 f0       	breq	.+6      	; 0x4a22 <menuOnEnterStatusMidiIn+0x6e>
    4a1c:	80 e2       	ldi	r24, 0x20	; 32
    4a1e:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4a22:	c1 11       	cpse	r28, r1
    4a24:	eb cf       	rjmp	.-42     	; 0x49fc <menuOnEnterStatusMidiIn+0x48>
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	cf 91       	pop	r28
    4a2a:	1f 91       	pop	r17
    4a2c:	0f 91       	pop	r16
    4a2e:	08 95       	ret

00004a30 <menuOnEnterStatusMidiOut>:
    4a30:	0f 93       	push	r16
    4a32:	1f 93       	push	r17
    4a34:	cf 93       	push	r28
    4a36:	ba df       	rcall	.-140    	; 0x49ac <menuCursorSetExtra>
    4a38:	86 ed       	ldi	r24, 0xD6	; 214
    4a3a:	93 e0       	ldi	r25, 0x03	; 3
    4a3c:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    4a40:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a44:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4a48:	0e 94 28 3b 	call	0x7650	; 0x7650 <lcd_wordout>
    4a4c:	8d e2       	ldi	r24, 0x2D	; 45
    4a4e:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4a52:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a56:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4a5a:	04 97       	sbiw	r24, 0x04	; 4
    4a5c:	30 f4       	brcc	.+12     	; 0x4a6a <menuOnEnterStatusMidiOut+0x3a>
    4a5e:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a62:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4a66:	c8 2f       	mov	r28, r24
    4a68:	01 c0       	rjmp	.+2      	; 0x4a6c <menuOnEnterStatusMidiOut+0x3c>
    4a6a:	c4 e0       	ldi	r28, 0x04	; 4
    4a6c:	00 91 ef 13 	lds	r16, 0x13EF	; 0x8013ef <midiTxInIndex>
    4a70:	10 e0       	ldi	r17, 0x00	; 0
    4a72:	0f 5b       	subi	r16, 0xBF	; 191
    4a74:	1a 4e       	sbci	r17, 0xEA	; 234
    4a76:	13 c0       	rjmp	.+38     	; 0x4a9e <menuOnEnterStatusMidiOut+0x6e>
    4a78:	85 e1       	ldi	r24, 0x15	; 21
    4a7a:	02 34       	cpi	r16, 0x42	; 66
    4a7c:	18 07       	cpc	r17, r24
    4a7e:	10 f0       	brcs	.+4      	; 0x4a84 <menuOnEnterStatusMidiOut+0x54>
    4a80:	f8 01       	movw	r30, r16
    4a82:	02 c0       	rjmp	.+4      	; 0x4a88 <menuOnEnterStatusMidiOut+0x58>
    4a84:	e1 e4       	ldi	r30, 0x41	; 65
    4a86:	f6 e1       	ldi	r31, 0x16	; 22
    4a88:	8f 01       	movw	r16, r30
    4a8a:	01 50       	subi	r16, 0x01	; 1
    4a8c:	11 09       	sbc	r17, r1
    4a8e:	80 81       	ld	r24, Z
    4a90:	0e 94 9c 39 	call	0x7338	; 0x7338 <lcd_hexout>
    4a94:	c1 50       	subi	r28, 0x01	; 1
    4a96:	19 f0       	breq	.+6      	; 0x4a9e <menuOnEnterStatusMidiOut+0x6e>
    4a98:	80 e2       	ldi	r24, 0x20	; 32
    4a9a:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4a9e:	c1 11       	cpse	r28, r1
    4aa0:	eb cf       	rjmp	.-42     	; 0x4a78 <menuOnEnterStatusMidiOut+0x48>
    4aa2:	80 e0       	ldi	r24, 0x00	; 0
    4aa4:	cf 91       	pop	r28
    4aa6:	1f 91       	pop	r17
    4aa8:	0f 91       	pop	r16
    4aaa:	08 95       	ret

00004aac <menuOnEnterLogDisp>:
    4aac:	0f 93       	push	r16
    4aae:	1f 93       	push	r17
    4ab0:	cf 93       	push	r28
    4ab2:	8f 3f       	cpi	r24, 0xFF	; 255
    4ab4:	a9 f4       	brne	.+42     	; 0x4ae0 <menuOnEnterLogDisp+0x34>
    4ab6:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4aba:	81 50       	subi	r24, 0x01	; 1
    4abc:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3052>
    4ac0:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.3053>
    4ac4:	66 ec       	ldi	r22, 0xC6	; 198
    4ac6:	72 e1       	ldi	r23, 0x12	; 18
    4ac8:	80 e0       	ldi	r24, 0x00	; 0
    4aca:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    4ace:	60 ec       	ldi	r22, 0xC0	; 192
    4ad0:	72 e1       	ldi	r23, 0x12	; 18
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    4ad8:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
    4adc:	cf ef       	ldi	r28, 0xFF	; 255
    4ade:	2f c0       	rjmp	.+94     	; 0x4b3e <menuOnEnterLogDisp+0x92>
    4ae0:	84 30       	cpi	r24, 0x04	; 4
    4ae2:	49 f4       	brne	.+18     	; 0x4af6 <menuOnEnterLogDisp+0x4a>
    4ae4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4ae8:	88 23       	and	r24, r24
    4aea:	21 f1       	breq	.+72     	; 0x4b34 <menuOnEnterLogDisp+0x88>
    4aec:	81 50       	subi	r24, 0x01	; 1
    4aee:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3052>
    4af2:	cf ef       	ldi	r28, 0xFF	; 255
    4af4:	24 c0       	rjmp	.+72     	; 0x4b3e <menuOnEnterLogDisp+0x92>
    4af6:	81 30       	cpi	r24, 0x01	; 1
    4af8:	91 f4       	brne	.+36     	; 0x4b1e <menuOnEnterLogDisp+0x72>
    4afa:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3052>
    4afe:	10 e0       	ldi	r17, 0x00	; 0
    4b00:	0f 5f       	subi	r16, 0xFF	; 255
    4b02:	1f 4f       	sbci	r17, 0xFF	; 255
    4b04:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	08 17       	cp	r16, r24
    4b0c:	19 07       	cpc	r17, r25
    4b0e:	a4 f4       	brge	.+40     	; 0x4b38 <menuOnEnterLogDisp+0x8c>
    4b10:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b14:	8f 5f       	subi	r24, 0xFF	; 255
    4b16:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3052>
    4b1a:	cf ef       	ldi	r28, 0xFF	; 255
    4b1c:	10 c0       	rjmp	.+32     	; 0x4b3e <menuOnEnterLogDisp+0x92>
    4b1e:	83 30       	cpi	r24, 0x03	; 3
    4b20:	11 f0       	breq	.+4      	; 0x4b26 <menuOnEnterLogDisp+0x7a>
    4b22:	85 30       	cpi	r24, 0x05	; 5
    4b24:	59 f4       	brne	.+22     	; 0x4b3c <menuOnEnterLogDisp+0x90>
    4b26:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3053>
    4b2a:	80 95       	com	r24
    4b2c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.3053>
    4b30:	cf ef       	ldi	r28, 0xFF	; 255
    4b32:	05 c0       	rjmp	.+10     	; 0x4b3e <menuOnEnterLogDisp+0x92>
    4b34:	cf ef       	ldi	r28, 0xFF	; 255
    4b36:	03 c0       	rjmp	.+6      	; 0x4b3e <menuOnEnterLogDisp+0x92>
    4b38:	cf ef       	ldi	r28, 0xFF	; 255
    4b3a:	01 c0       	rjmp	.+2      	; 0x4b3e <menuOnEnterLogDisp+0x92>
    4b3c:	c0 e0       	ldi	r28, 0x00	; 0
    4b3e:	cf 3f       	cpi	r28, 0xFF	; 255
    4b40:	09 f0       	breq	.+2      	; 0x4b44 <menuOnEnterLogDisp+0x98>
    4b42:	54 c0       	rjmp	.+168    	; 0x4bec <menuOnEnterLogDisp+0x140>
    4b44:	33 df       	rcall	.-410    	; 0x49ac <menuCursorSetExtra>
    4b46:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4b4a:	81 11       	cpse	r24, r1
    4b4c:	06 c0       	rjmp	.+12     	; 0x4b5a <menuOnEnterLogDisp+0xae>
    4b4e:	89 e9       	ldi	r24, 0x99	; 153
    4b50:	93 e0       	ldi	r25, 0x03	; 3
    4b52:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    4b56:	c0 e0       	ldi	r28, 0x00	; 0
    4b58:	1d c0       	rjmp	.+58     	; 0x4b94 <menuOnEnterLogDisp+0xe8>
    4b5a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b5e:	8f 5f       	subi	r24, 0xFF	; 255
    4b60:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <lcd_dec2out>
    4b64:	8a e3       	ldi	r24, 0x3A	; 58
    4b66:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4b6a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3053>
    4b6e:	81 11       	cpse	r24, r1
    4b70:	08 c0       	rjmp	.+16     	; 0x4b82 <menuOnEnterLogDisp+0xd6>
    4b72:	60 e2       	ldi	r22, 0x20	; 32
    4b74:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b78:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <log_getShortTextFromIndex>
    4b7c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <lcd_puts>
    4b80:	06 c0       	rjmp	.+12     	; 0x4b8e <menuOnEnterLogDisp+0xe2>
    4b82:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4b86:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <log_getErrorText>
    4b8a:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    4b8e:	0e 94 b0 3b 	call	0x7760	; 0x7760 <lcd_clrEol>
    4b92:	0c df       	rcall	.-488    	; 0x49ac <menuCursorSetExtra>
    4b94:	61 e0       	ldi	r22, 0x01	; 1
    4b96:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3053>
    4b9a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b9c:	09 f0       	breq	.+2      	; 0x4ba0 <menuOnEnterLogDisp+0xf4>
    4b9e:	60 e0       	ldi	r22, 0x00	; 0
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <keylabel_statcheck>
    4ba6:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3052>
    4baa:	10 e0       	ldi	r17, 0x00	; 0
    4bac:	0f 5f       	subi	r16, 0xFF	; 255
    4bae:	1f 4f       	sbci	r17, 0xFF	; 255
    4bb0:	0e 94 a4 13 	call	0x2748	; 0x2748 <log_count>
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	08 17       	cp	r16, r24
    4bb8:	19 07       	cpc	r17, r25
    4bba:	34 f4       	brge	.+12     	; 0x4bc8 <menuOnEnterLogDisp+0x11c>
    4bbc:	60 ee       	ldi	r22, 0xE0	; 224
    4bbe:	72 e1       	ldi	r23, 0x12	; 18
    4bc0:	83 e0       	ldi	r24, 0x03	; 3
    4bc2:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    4bc6:	03 c0       	rjmp	.+6      	; 0x4bce <menuOnEnterLogDisp+0x122>
    4bc8:	83 e0       	ldi	r24, 0x03	; 3
    4bca:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4bce:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3052>
    4bd2:	88 23       	and	r24, r24
    4bd4:	31 f0       	breq	.+12     	; 0x4be2 <menuOnEnterLogDisp+0x136>
    4bd6:	6e ed       	ldi	r22, 0xDE	; 222
    4bd8:	72 e1       	ldi	r23, 0x12	; 18
    4bda:	82 e0       	ldi	r24, 0x02	; 2
    4bdc:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
    4be0:	03 c0       	rjmp	.+6      	; 0x4be8 <menuOnEnterLogDisp+0x13c>
    4be2:	82 e0       	ldi	r24, 0x02	; 2
    4be4:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4be8:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
    4bec:	8c 2f       	mov	r24, r28
    4bee:	cf 91       	pop	r28
    4bf0:	1f 91       	pop	r17
    4bf2:	0f 91       	pop	r16
    4bf4:	08 95       	ret

00004bf6 <menuCursorSetMenu>:
    4bf6:	8a e4       	ldi	r24, 0x4A	; 74
    4bf8:	0c 94 17 13 	jmp	0x262e	; 0x262e <lcd_goto>
    4bfc:	08 95       	ret

00004bfe <menuClearExtraDisp>:
    4bfe:	d6 de       	rcall	.-596    	; 0x49ac <menuCursorSetExtra>
    4c00:	8a e0       	ldi	r24, 0x0A	; 10
    4c02:	0c 94 a4 3b 	jmp	0x7748	; 0x7748 <lcd_blank>
    4c06:	08 95       	ret

00004c08 <menu_ClearDataDisp>:
    4c08:	8e e1       	ldi	r24, 0x1E	; 30
    4c0a:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    4c0e:	8a e0       	ldi	r24, 0x0A	; 10
    4c10:	0c 94 a4 3b 	jmp	0x7748	; 0x7748 <lcd_blank>
    4c14:	08 95       	ret

00004c16 <menuClearMenuDisp>:
    4c16:	80 e4       	ldi	r24, 0x40	; 64
    4c18:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    4c1c:	8a e0       	ldi	r24, 0x0A	; 10
    4c1e:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
    4c22:	e9 df       	rcall	.-46     	; 0x4bf6 <menuCursorSetMenu>
    4c24:	8a e0       	ldi	r24, 0x0A	; 10
    4c26:	0c 94 a4 3b 	jmp	0x7748	; 0x7748 <lcd_blank>
    4c2a:	08 95       	ret

00004c2c <menu_ClearAllDisp>:
    4c2c:	f4 df       	rcall	.-24     	; 0x4c16 <menuClearMenuDisp>
    4c2e:	ec df       	rcall	.-40     	; 0x4c08 <menu_ClearDataDisp>
    4c30:	e6 cf       	rjmp	.-52     	; 0x4bfe <menuClearExtraDisp>
    4c32:	08 95       	ret

00004c34 <menuCheckArrowDown>:
    4c34:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c38:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c3c:	84 91       	lpm	r24, Z
    4c3e:	8f 73       	andi	r24, 0x3F	; 63
    4c40:	81 30       	cpi	r24, 0x01	; 1
    4c42:	11 f4       	brne	.+4      	; 0x4c48 <menuCheckArrowDown+0x14>
    4c44:	0f c9       	rjmp	.-3554   	; 0x3e64 <softkeyDown>
    4c46:	08 95       	ret
    4c48:	3e 96       	adiw	r30, 0x0e	; 14
    4c4a:	05 90       	lpm	r0, Z+
    4c4c:	f4 91       	lpm	r31, Z
    4c4e:	e0 2d       	mov	r30, r0
    4c50:	30 97       	sbiw	r30, 0x00	; 0
    4c52:	59 f0       	breq	.+22     	; 0x4c6a <menuCheckArrowDown+0x36>
    4c54:	89 30       	cpi	r24, 0x09	; 9
    4c56:	39 f4       	brne	.+14     	; 0x4c66 <menuCheckArrowDown+0x32>
    4c58:	80 81       	ld	r24, Z
    4c5a:	81 11       	cpse	r24, r1
    4c5c:	02 c0       	rjmp	.+4      	; 0x4c62 <menuCheckArrowDown+0x2e>
    4c5e:	08 c9       	rjmp	.-3568   	; 0x3e70 <softkeyOn>
    4c60:	08 95       	ret
    4c62:	0c c9       	rjmp	.-3560   	; 0x3e7c <softkeyOff>
    4c64:	08 95       	ret
    4c66:	fe c8       	rjmp	.-3588   	; 0x3e64 <softkeyDown>
    4c68:	08 95       	ret
    4c6a:	81 e0       	ldi	r24, 0x01	; 1
    4c6c:	0c 94 2b 3c 	jmp	0x7856	; 0x7856 <keylabel_clr>
    4c70:	08 95       	ret

00004c72 <menuCurrMenuToLCD>:
    4c72:	cf 93       	push	r28
    4c74:	89 e4       	ldi	r24, 0x49	; 73
    4c76:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    4c7a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c7e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c82:	c4 91       	lpm	r28, Z
    4c84:	c0 7c       	andi	r28, 0xC0	; 192
    4c86:	c0 38       	cpi	r28, 0x80	; 128
    4c88:	39 f4       	brne	.+14     	; 0x4c98 <menuCurrMenuToLCD+0x26>
    4c8a:	80 e2       	ldi	r24, 0x20	; 32
    4c8c:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4c96:	04 c0       	rjmp	.+8      	; 0x4ca0 <menuCurrMenuToLCD+0x2e>
    4c98:	8f e7       	ldi	r24, 0x7F	; 127
    4c9a:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    4c9e:	d6 d8       	rcall	.-3668   	; 0x3e4c <softkeyLeft>
    4ca0:	c0 3c       	cpi	r28, 0xC0	; 192
    4ca2:	29 f4       	brne	.+10     	; 0x4cae <menuCurrMenuToLCD+0x3c>
    4ca4:	83 e0       	ldi	r24, 0x03	; 3
    4ca6:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4caa:	c0 e2       	ldi	r28, 0x20	; 32
    4cac:	02 c0       	rjmp	.+4      	; 0x4cb2 <menuCurrMenuToLCD+0x40>
    4cae:	d4 d8       	rcall	.-3672   	; 0x3e58 <softkeyRight>
    4cb0:	ce e7       	ldi	r28, 0x7E	; 126
    4cb2:	ea d8       	rcall	.-3628   	; 0x3e88 <softkeyUp>
    4cb4:	bf df       	rcall	.-130    	; 0x4c34 <menuCheckArrowDown>
    4cb6:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4cba:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cbe:	6c 2f       	mov	r22, r28
    4cc0:	02 96       	adiw	r24, 0x02	; 2
    4cc2:	05 de       	rcall	.-1014   	; 0x48ce <menuTextOut>
    4cc4:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
    4cc8:	96 df       	rcall	.-212    	; 0x4bf6 <menuCursorSetMenu>
    4cca:	cf 91       	pop	r28
    4ccc:	08 95       	ret

00004cce <menuItemChanged>:
    4cce:	8f ef       	ldi	r24, 0xFF	; 255
    4cd0:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4cd4:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4cd8:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cdc:	fc 01       	movw	r30, r24
    4cde:	24 91       	lpm	r18, Z
    4ce0:	62 2f       	mov	r22, r18
    4ce2:	6f 73       	andi	r22, 0x3F	; 63
    4ce4:	62 30       	cpi	r22, 0x02	; 2
    4ce6:	08 f4       	brcc	.+2      	; 0x4cea <menuItemChanged+0x1c>
    4ce8:	49 c0       	rjmp	.+146    	; 0x4d7c <menuItemChanged+0xae>
    4cea:	9c 01       	movw	r18, r24
    4cec:	22 5f       	subi	r18, 0xF2	; 242
    4cee:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf0:	f9 01       	movw	r30, r18
    4cf2:	45 91       	lpm	r20, Z+
    4cf4:	55 91       	lpm	r21, Z+
    4cf6:	41 15       	cp	r20, r1
    4cf8:	51 05       	cpc	r21, r1
    4cfa:	09 f4       	brne	.+2      	; 0x4cfe <menuItemChanged+0x30>
    4cfc:	3f c0       	rjmp	.+126    	; 0x4d7c <menuItemChanged+0xae>
    4cfe:	e6 2f       	mov	r30, r22
    4d00:	f0 e0       	ldi	r31, 0x00	; 0
    4d02:	31 97       	sbiw	r30, 0x01	; 1
    4d04:	9f 01       	movw	r18, r30
    4d06:	22 0f       	add	r18, r18
    4d08:	33 1f       	adc	r19, r19
    4d0a:	22 0f       	add	r18, r18
    4d0c:	33 1f       	adc	r19, r19
    4d0e:	22 0f       	add	r18, r18
    4d10:	33 1f       	adc	r19, r19
    4d12:	e2 0f       	add	r30, r18
    4d14:	f3 1f       	adc	r31, r19
    4d16:	e7 51       	subi	r30, 0x17	; 23
    4d18:	fc 4f       	sbci	r31, 0xFC	; 252
    4d1a:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    4d1e:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    4d22:	24 91       	lpm	r18, Z
    4d24:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    4d28:	fc 01       	movw	r30, r24
    4d2a:	25 91       	lpm	r18, Z+
    4d2c:	2f 73       	andi	r18, 0x3F	; 63
    4d2e:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    4d32:	24 91       	lpm	r18, Z
    4d34:	22 23       	and	r18, r18
    4d36:	2c f4       	brge	.+10     	; 0x4d42 <menuItemChanged+0x74>
    4d38:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4d3c:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <menuItemChanged+0x78>
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	24 0f       	add	r18, r20
    4d48:	35 1f       	adc	r19, r21
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	84 91       	lpm	r24, Z
    4d4e:	8f 73       	andi	r24, 0x3F	; 63
    4d50:	8b 30       	cpi	r24, 0x0B	; 11
    4d52:	71 f4       	brne	.+28     	; 0x4d70 <menuItemChanged+0xa2>
    4d54:	f9 01       	movw	r30, r18
    4d56:	80 81       	ld	r24, Z
    4d58:	91 81       	ldd	r25, Z+1	; 0x01
    4d5a:	a2 81       	ldd	r26, Z+2	; 0x02
    4d5c:	b3 81       	ldd	r27, Z+3	; 0x03
    4d5e:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    4d62:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    4d66:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    4d6a:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    4d6e:	04 c0       	rjmp	.+8      	; 0x4d78 <menuItemChanged+0xaa>
    4d70:	f9 01       	movw	r30, r18
    4d72:	80 81       	ld	r24, Z
    4d74:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4d78:	df dd       	rcall	.-1090   	; 0x4938 <menuDisplayValue>
    4d7a:	07 c0       	rjmp	.+14     	; 0x4d8a <menuItemChanged+0xbc>
    4d7c:	45 df       	rcall	.-374    	; 0x4c08 <menu_ClearDataDisp>
    4d7e:	89 ee       	ldi	r24, 0xE9	; 233
    4d80:	93 e0       	ldi	r25, 0x03	; 3
    4d82:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    4d86:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4d8a:	54 df       	rcall	.-344    	; 0x4c34 <menuCheckArrowDown>
    4d8c:	34 cf       	rjmp	.-408    	; 0x4bf6 <menuCursorSetMenu>
    4d8e:	08 95       	ret

00004d90 <menu_InitLCD>:
    4d90:	36 df       	rcall	.-404    	; 0x4bfe <menuClearExtraDisp>
    4d92:	9d df       	rcall	.-198    	; 0x4cce <menuItemChanged>
    4d94:	b7 dd       	rcall	.-1170   	; 0x4904 <menuParentMenuToLCD>
    4d96:	6d df       	rcall	.-294    	; 0x4c72 <menuCurrMenuToLCD>
    4d98:	0c 94 c7 3b 	jmp	0x778e	; 0x778e <lcd_cursosblink>
    4d9c:	08 95       	ret

00004d9e <menu_ProcessMessage>:
    4d9e:	cf 93       	push	r28
    4da0:	c8 2f       	mov	r28, r24
    4da2:	0e 94 c7 3b 	call	0x778e	; 0x778e <lcd_cursosblink>
    4da6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4daa:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4dae:	84 91       	lpm	r24, Z
    4db0:	8f 73       	andi	r24, 0x3F	; 63
    4db2:	81 30       	cpi	r24, 0x01	; 1
    4db4:	29 f0       	breq	.+10     	; 0x4dc0 <menu_ProcessMessage+0x22>
    4db6:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4dba:	8f 3f       	cpi	r24, 0xFF	; 255
    4dbc:	09 f0       	breq	.+2      	; 0x4dc0 <menu_ProcessMessage+0x22>
    4dbe:	68 c1       	rjmp	.+720    	; 0x5090 <menu_ProcessMessage+0x2f2>
    4dc0:	31 96       	adiw	r30, 0x01	; 1
    4dc2:	84 91       	lpm	r24, Z
    4dc4:	86 ff       	sbrs	r24, 6
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <menu_ProcessMessage+0x2e>
    4dc8:	1a df       	rcall	.-460    	; 0x4bfe <menuClearExtraDisp>
    4dca:	15 df       	rcall	.-470    	; 0x4bf6 <menuCursorSetMenu>
    4dcc:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4dd0:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4dd4:	cb 01       	movw	r24, r22
    4dd6:	01 96       	adiw	r24, 0x01	; 1
    4dd8:	fc 01       	movw	r30, r24
    4dda:	84 91       	lpm	r24, Z
    4ddc:	98 2f       	mov	r25, r24
    4dde:	90 72       	andi	r25, 0x20	; 32
    4de0:	85 ff       	sbrs	r24, 5
    4de2:	1f c0       	rjmp	.+62     	; 0x4e22 <menu_ProcessMessage+0x84>
    4de4:	9b 01       	movw	r18, r22
    4de6:	20 5f       	subi	r18, 0xF0	; 240
    4de8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dea:	f9 01       	movw	r30, r18
    4dec:	25 91       	lpm	r18, Z+
    4dee:	35 91       	lpm	r19, Z+
    4df0:	21 15       	cp	r18, r1
    4df2:	31 05       	cpc	r19, r1
    4df4:	b1 f0       	breq	.+44     	; 0x4e22 <menu_ProcessMessage+0x84>
    4df6:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4dfa:	4f 3f       	cpi	r20, 0xFF	; 255
    4dfc:	91 f0       	breq	.+36     	; 0x4e22 <menu_ProcessMessage+0x84>
    4dfe:	8c 2f       	mov	r24, r28
    4e00:	f9 01       	movw	r30, r18
    4e02:	19 95       	eicall
    4e04:	8f 3f       	cpi	r24, 0xFF	; 255
    4e06:	21 f4       	brne	.+8      	; 0x4e10 <menu_ProcessMessage+0x72>
    4e08:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4e0c:	80 e0       	ldi	r24, 0x00	; 0
    4e0e:	04 c2       	rjmp	.+1032   	; 0x5218 <menu_ProcessMessage+0x47a>
    4e10:	f6 de       	rcall	.-532    	; 0x4bfe <menuClearExtraDisp>
    4e12:	fa de       	rcall	.-524    	; 0x4c08 <menu_ClearDataDisp>
    4e14:	f0 de       	rcall	.-544    	; 0x4bf6 <menuCursorSetMenu>
    4e16:	8f ef       	ldi	r24, 0xFF	; 255
    4e18:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4e1c:	2a df       	rcall	.-428    	; 0x4c72 <menuCurrMenuToLCD>
    4e1e:	80 e0       	ldi	r24, 0x00	; 0
    4e20:	fb c1       	rjmp	.+1014   	; 0x5218 <menu_ProcessMessage+0x47a>
    4e22:	c3 30       	cpi	r28, 0x03	; 3
    4e24:	09 f4       	brne	.+2      	; 0x4e28 <menu_ProcessMessage+0x8a>
    4e26:	64 c0       	rjmp	.+200    	; 0x4ef0 <menu_ProcessMessage+0x152>
    4e28:	28 f4       	brcc	.+10     	; 0x4e34 <menu_ProcessMessage+0x96>
    4e2a:	c1 30       	cpi	r28, 0x01	; 1
    4e2c:	51 f0       	breq	.+20     	; 0x4e42 <menu_ProcessMessage+0xa4>
    4e2e:	c2 30       	cpi	r28, 0x02	; 2
    4e30:	31 f1       	breq	.+76     	; 0x4e7e <menu_ProcessMessage+0xe0>
    4e32:	db c1       	rjmp	.+950    	; 0x51ea <menu_ProcessMessage+0x44c>
    4e34:	c5 30       	cpi	r28, 0x05	; 5
    4e36:	09 f4       	brne	.+2      	; 0x4e3a <menu_ProcessMessage+0x9c>
    4e38:	5b c0       	rjmp	.+182    	; 0x4ef0 <menu_ProcessMessage+0x152>
    4e3a:	90 f0       	brcs	.+36     	; 0x4e60 <menu_ProcessMessage+0xc2>
    4e3c:	c6 30       	cpi	r28, 0x06	; 6
    4e3e:	f9 f0       	breq	.+62     	; 0x4e7e <menu_ProcessMessage+0xe0>
    4e40:	d4 c1       	rjmp	.+936    	; 0x51ea <menu_ProcessMessage+0x44c>
    4e42:	fb 01       	movw	r30, r22
    4e44:	84 91       	lpm	r24, Z
    4e46:	80 7c       	andi	r24, 0xC0	; 192
    4e48:	80 3c       	cpi	r24, 0xC0	; 192
    4e4a:	09 f4       	brne	.+2      	; 0x4e4e <menu_ProcessMessage+0xb0>
    4e4c:	d0 c1       	rjmp	.+928    	; 0x51ee <menu_ProcessMessage+0x450>
    4e4e:	74 96       	adiw	r30, 0x14	; 20
    4e50:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4e54:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4e58:	3a df       	rcall	.-396    	; 0x4cce <menuItemChanged>
    4e5a:	0b df       	rcall	.-490    	; 0x4c72 <menuCurrMenuToLCD>
    4e5c:	80 e0       	ldi	r24, 0x00	; 0
    4e5e:	dc c1       	rjmp	.+952    	; 0x5218 <menu_ProcessMessage+0x47a>
    4e60:	fb 01       	movw	r30, r22
    4e62:	84 91       	lpm	r24, Z
    4e64:	80 7c       	andi	r24, 0xC0	; 192
    4e66:	80 38       	cpi	r24, 0x80	; 128
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <menu_ProcessMessage+0xce>
    4e6a:	c3 c1       	rjmp	.+902    	; 0x51f2 <menu_ProcessMessage+0x454>
    4e6c:	74 97       	sbiw	r30, 0x14	; 20
    4e6e:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4e72:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4e76:	2b df       	rcall	.-426    	; 0x4cce <menuItemChanged>
    4e78:	fc de       	rcall	.-520    	; 0x4c72 <menuCurrMenuToLCD>
    4e7a:	80 e0       	ldi	r24, 0x00	; 0
    4e7c:	cd c1       	rjmp	.+922    	; 0x5218 <menu_ProcessMessage+0x47a>
    4e7e:	84 ff       	sbrs	r24, 4
    4e80:	04 c0       	rjmp	.+8      	; 0x4e8a <menu_ProcessMessage+0xec>
    4e82:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4e86:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4e8a:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4e8e:	ee 23       	and	r30, r30
    4e90:	e9 f0       	breq	.+58     	; 0x4ecc <menu_ProcessMessage+0x12e>
    4e92:	e1 50       	subi	r30, 0x01	; 1
    4e94:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4e98:	f0 e0       	ldi	r31, 0x00	; 0
    4e9a:	ee 0f       	add	r30, r30
    4e9c:	ff 1f       	adc	r31, r31
    4e9e:	e5 58       	subi	r30, 0x85	; 133
    4ea0:	fa 4f       	sbci	r31, 0xFA	; 250
    4ea2:	01 90       	ld	r0, Z+
    4ea4:	f0 81       	ld	r31, Z
    4ea6:	e0 2d       	mov	r30, r0
    4ea8:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4eac:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4eb0:	72 96       	adiw	r30, 0x12	; 18
    4eb2:	05 90       	lpm	r0, Z+
    4eb4:	f4 91       	lpm	r31, Z
    4eb6:	e0 2d       	mov	r30, r0
    4eb8:	30 97       	sbiw	r30, 0x00	; 0
    4eba:	11 f0       	breq	.+4      	; 0x4ec0 <menu_ProcessMessage+0x122>
    4ebc:	80 e0       	ldi	r24, 0x00	; 0
    4ebe:	19 95       	eicall
    4ec0:	9e de       	rcall	.-708    	; 0x4bfe <menuClearExtraDisp>
    4ec2:	20 dd       	rcall	.-1472   	; 0x4904 <menuParentMenuToLCD>
    4ec4:	d6 de       	rcall	.-596    	; 0x4c72 <menuCurrMenuToLCD>
    4ec6:	03 df       	rcall	.-506    	; 0x4cce <menuItemChanged>
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	a6 c1       	rjmp	.+844    	; 0x5218 <menu_ProcessMessage+0x47a>
    4ecc:	80 e0       	ldi	r24, 0x00	; 0
    4ece:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4ed2:	81 e0       	ldi	r24, 0x01	; 1
    4ed4:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4ed8:	82 e0       	ldi	r24, 0x02	; 2
    4eda:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4ede:	83 e0       	ldi	r24, 0x03	; 3
    4ee0:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    4ee4:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
    4ee8:	0e 94 ce 3b 	call	0x779c	; 0x779c <lcd_cursoroff>
    4eec:	8f ef       	ldi	r24, 0xFF	; 255
    4eee:	94 c1       	rjmp	.+808    	; 0x5218 <menu_ProcessMessage+0x47a>
    4ef0:	fb 01       	movw	r30, r22
    4ef2:	24 91       	lpm	r18, Z
    4ef4:	2f 73       	andi	r18, 0x3F	; 63
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	22 30       	cpi	r18, 0x02	; 2
    4efa:	31 05       	cpc	r19, r1
    4efc:	0c f4       	brge	.+2      	; 0x4f00 <menu_ProcessMessage+0x162>
    4efe:	48 c0       	rjmp	.+144    	; 0x4f90 <menu_ProcessMessage+0x1f2>
    4f00:	70 96       	adiw	r30, 0x10	; 16
    4f02:	05 90       	lpm	r0, Z+
    4f04:	f4 91       	lpm	r31, Z
    4f06:	e0 2d       	mov	r30, r0
    4f08:	30 97       	sbiw	r30, 0x00	; 0
    4f0a:	19 f0       	breq	.+6      	; 0x4f12 <menu_ProcessMessage+0x174>
    4f0c:	8c 2f       	mov	r24, r28
    4f0e:	19 95       	eicall
    4f10:	de de       	rcall	.-580    	; 0x4cce <menuItemChanged>
    4f12:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4f16:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f1a:	c9 01       	movw	r24, r18
    4f1c:	01 96       	adiw	r24, 0x01	; 1
    4f1e:	fc 01       	movw	r30, r24
    4f20:	84 91       	lpm	r24, Z
    4f22:	83 fd       	sbrc	r24, 3
    4f24:	68 c1       	rjmp	.+720    	; 0x51f6 <menu_ProcessMessage+0x458>
    4f26:	c9 01       	movw	r24, r18
    4f28:	0e 96       	adiw	r24, 0x0e	; 14
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	85 91       	lpm	r24, Z+
    4f2e:	95 91       	lpm	r25, Z+
    4f30:	89 2b       	or	r24, r25
    4f32:	09 f4       	brne	.+2      	; 0x4f36 <menu_ProcessMessage+0x198>
    4f34:	62 c1       	rjmp	.+708    	; 0x51fa <menu_ProcessMessage+0x45c>
    4f36:	f9 01       	movw	r30, r18
    4f38:	84 91       	lpm	r24, Z
    4f3a:	8f 73       	andi	r24, 0x3F	; 63
    4f3c:	89 30       	cpi	r24, 0x09	; 9
    4f3e:	19 f5       	brne	.+70     	; 0x4f86 <menu_ProcessMessage+0x1e8>
    4f40:	61 e0       	ldi	r22, 0x01	; 1
    4f42:	80 e0       	ldi	r24, 0x00	; 0
    4f44:	30 da       	rcall	.-2976   	; 0x43a6 <nibbleChange>
    4f46:	de db       	rcall	.-2116   	; 0x4704 <nibbleToData>
    4f48:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4f4c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f50:	3e 96       	adiw	r30, 0x0e	; 14
    4f52:	05 90       	lpm	r0, Z+
    4f54:	f4 91       	lpm	r31, Z
    4f56:	e0 2d       	mov	r30, r0
    4f58:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4f5c:	80 83       	st	Z, r24
    4f5e:	ec dc       	rcall	.-1576   	; 0x4938 <menuDisplayValue>
    4f60:	69 de       	rcall	.-814    	; 0x4c34 <menuCheckArrowDown>
    4f62:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
    4f66:	47 de       	rcall	.-882    	; 0x4bf6 <menuCursorSetMenu>
    4f68:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4f6c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f70:	72 96       	adiw	r30, 0x12	; 18
    4f72:	05 90       	lpm	r0, Z+
    4f74:	f4 91       	lpm	r31, Z
    4f76:	e0 2d       	mov	r30, r0
    4f78:	30 97       	sbiw	r30, 0x00	; 0
    4f7a:	09 f4       	brne	.+2      	; 0x4f7e <menu_ProcessMessage+0x1e0>
    4f7c:	40 c1       	rjmp	.+640    	; 0x51fe <menu_ProcessMessage+0x460>
    4f7e:	80 e0       	ldi	r24, 0x00	; 0
    4f80:	19 95       	eicall
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	49 c1       	rjmp	.+658    	; 0x5218 <menu_ProcessMessage+0x47a>
    4f86:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4f8a:	e3 dc       	rcall	.-1594   	; 0x4952 <menuCursorSetDataNibble>
    4f8c:	80 e0       	ldi	r24, 0x00	; 0
    4f8e:	44 c1       	rjmp	.+648    	; 0x5218 <menu_ProcessMessage+0x47a>
    4f90:	2f ef       	ldi	r18, 0xFF	; 255
    4f92:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4f96:	84 ff       	sbrs	r24, 4
    4f98:	26 c0       	rjmp	.+76     	; 0x4fe6 <menu_ProcessMessage+0x248>
    4f9a:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4f9e:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4fa2:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4fa6:	ee 23       	and	r30, r30
    4fa8:	09 f4       	brne	.+2      	; 0x4fac <menu_ProcessMessage+0x20e>
    4faa:	2b c1       	rjmp	.+598    	; 0x5202 <menu_ProcessMessage+0x464>
    4fac:	e1 50       	subi	r30, 0x01	; 1
    4fae:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4fb2:	f0 e0       	ldi	r31, 0x00	; 0
    4fb4:	ee 0f       	add	r30, r30
    4fb6:	ff 1f       	adc	r31, r31
    4fb8:	e5 58       	subi	r30, 0x85	; 133
    4fba:	fa 4f       	sbci	r31, 0xFA	; 250
    4fbc:	01 90       	ld	r0, Z+
    4fbe:	f0 81       	ld	r31, Z
    4fc0:	e0 2d       	mov	r30, r0
    4fc2:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4fc6:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4fca:	72 96       	adiw	r30, 0x12	; 18
    4fcc:	05 90       	lpm	r0, Z+
    4fce:	f4 91       	lpm	r31, Z
    4fd0:	e0 2d       	mov	r30, r0
    4fd2:	30 97       	sbiw	r30, 0x00	; 0
    4fd4:	11 f0       	breq	.+4      	; 0x4fda <menu_ProcessMessage+0x23c>
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	19 95       	eicall
    4fda:	11 de       	rcall	.-990    	; 0x4bfe <menuClearExtraDisp>
    4fdc:	93 dc       	rcall	.-1754   	; 0x4904 <menuParentMenuToLCD>
    4fde:	49 de       	rcall	.-878    	; 0x4c72 <menuCurrMenuToLCD>
    4fe0:	76 de       	rcall	.-788    	; 0x4cce <menuItemChanged>
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	19 c1       	rjmp	.+562    	; 0x5218 <menu_ProcessMessage+0x47a>
    4fe6:	fb 01       	movw	r30, r22
    4fe8:	70 96       	adiw	r30, 0x10	; 16
    4fea:	05 90       	lpm	r0, Z+
    4fec:	f4 91       	lpm	r31, Z
    4fee:	e0 2d       	mov	r30, r0
    4ff0:	30 97       	sbiw	r30, 0x00	; 0
    4ff2:	99 f0       	breq	.+38     	; 0x501a <menu_ProcessMessage+0x27c>
    4ff4:	99 23       	and	r25, r25
    4ff6:	71 f0       	breq	.+28     	; 0x5014 <menu_ProcessMessage+0x276>
    4ff8:	8f ef       	ldi	r24, 0xFF	; 255
    4ffa:	19 95       	eicall
    4ffc:	8f 3f       	cpi	r24, 0xFF	; 255
    4ffe:	19 f4       	brne	.+6      	; 0x5006 <menu_ProcessMessage+0x268>
    5000:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    5004:	0a c0       	rjmp	.+20     	; 0x501a <menu_ProcessMessage+0x27c>
    5006:	fb dd       	rcall	.-1034   	; 0x4bfe <menuClearExtraDisp>
    5008:	ff dd       	rcall	.-1026   	; 0x4c08 <menu_ClearDataDisp>
    500a:	f5 dd       	rcall	.-1046   	; 0x4bf6 <menuCursorSetMenu>
    500c:	8f ef       	ldi	r24, 0xFF	; 255
    500e:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    5012:	03 c0       	rjmp	.+6      	; 0x501a <menu_ProcessMessage+0x27c>
    5014:	85 e0       	ldi	r24, 0x05	; 5
    5016:	19 95       	eicall
    5018:	ee dd       	rcall	.-1060   	; 0x4bf6 <menuCursorSetMenu>
    501a:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    501e:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5022:	c9 01       	movw	r24, r18
    5024:	0c 96       	adiw	r24, 0x0c	; 12
    5026:	fc 01       	movw	r30, r24
    5028:	85 91       	lpm	r24, Z+
    502a:	95 91       	lpm	r25, Z+
    502c:	89 2b       	or	r24, r25
    502e:	09 f4       	brne	.+2      	; 0x5032 <menu_ProcessMessage+0x294>
    5030:	ea c0       	rjmp	.+468    	; 0x5206 <menu_ProcessMessage+0x468>
    5032:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    5036:	a0 31       	cpi	r26, 0x10	; 16
    5038:	08 f0       	brcs	.+2      	; 0x503c <menu_ProcessMessage+0x29e>
    503a:	e7 c0       	rjmp	.+462    	; 0x520a <menu_ProcessMessage+0x46c>
    503c:	81 e0       	ldi	r24, 0x01	; 1
    503e:	8a 0f       	add	r24, r26
    5040:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    5044:	b0 e0       	ldi	r27, 0x00	; 0
    5046:	aa 0f       	add	r26, r26
    5048:	bb 1f       	adc	r27, r27
    504a:	a5 58       	subi	r26, 0x85	; 133
    504c:	ba 4f       	sbci	r27, 0xFA	; 250
    504e:	2d 93       	st	X+, r18
    5050:	3c 93       	st	X, r19
    5052:	c9 01       	movw	r24, r18
    5054:	01 96       	adiw	r24, 0x01	; 1
    5056:	fc 01       	movw	r30, r24
    5058:	84 91       	lpm	r24, Z
    505a:	83 ff       	sbrs	r24, 3
    505c:	0b c0       	rjmp	.+22     	; 0x5074 <menu_ProcessMessage+0x2d6>
    505e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5062:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    5066:	00 97       	sbiw	r24, 0x00	; 0
    5068:	29 f0       	breq	.+10     	; 0x5074 <menu_ProcessMessage+0x2d6>
    506a:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    506e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    5072:	08 c0       	rjmp	.+16     	; 0x5084 <menu_ProcessMessage+0x2e6>
    5074:	f9 01       	movw	r30, r18
    5076:	3c 96       	adiw	r30, 0x0c	; 12
    5078:	85 91       	lpm	r24, Z+
    507a:	95 91       	lpm	r25, Z+
    507c:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    5080:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    5084:	bc dd       	rcall	.-1160   	; 0x4bfe <menuClearExtraDisp>
    5086:	3e dc       	rcall	.-1924   	; 0x4904 <menuParentMenuToLCD>
    5088:	f4 dd       	rcall	.-1048   	; 0x4c72 <menuCurrMenuToLCD>
    508a:	21 de       	rcall	.-958    	; 0x4cce <menuItemChanged>
    508c:	80 e0       	ldi	r24, 0x00	; 0
    508e:	c4 c0       	rjmp	.+392    	; 0x5218 <menu_ProcessMessage+0x47a>
    5090:	c3 30       	cpi	r28, 0x03	; 3
    5092:	09 f4       	brne	.+2      	; 0x5096 <menu_ProcessMessage+0x2f8>
    5094:	49 c0       	rjmp	.+146    	; 0x5128 <menu_ProcessMessage+0x38a>
    5096:	28 f4       	brcc	.+10     	; 0x50a2 <menu_ProcessMessage+0x304>
    5098:	c1 30       	cpi	r28, 0x01	; 1
    509a:	59 f0       	breq	.+22     	; 0x50b2 <menu_ProcessMessage+0x314>
    509c:	c2 30       	cpi	r28, 0x02	; 2
    509e:	31 f1       	breq	.+76     	; 0x50ec <menu_ProcessMessage+0x34e>
    50a0:	b6 c0       	rjmp	.+364    	; 0x520e <menu_ProcessMessage+0x470>
    50a2:	c5 30       	cpi	r28, 0x05	; 5
    50a4:	09 f4       	brne	.+2      	; 0x50a8 <menu_ProcessMessage+0x30a>
    50a6:	5e c0       	rjmp	.+188    	; 0x5164 <menu_ProcessMessage+0x3c6>
    50a8:	c0 f0       	brcs	.+48     	; 0x50da <menu_ProcessMessage+0x33c>
    50aa:	c6 30       	cpi	r28, 0x06	; 6
    50ac:	09 f4       	brne	.+2      	; 0x50b0 <menu_ProcessMessage+0x312>
    50ae:	8a c0       	rjmp	.+276    	; 0x51c4 <menu_ProcessMessage+0x426>
    50b0:	ae c0       	rjmp	.+348    	; 0x520e <menu_ProcessMessage+0x470>
    50b2:	48 2f       	mov	r20, r24
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    50ba:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    50be:	24 91       	lpm	r18, Z
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	21 50       	subi	r18, 0x01	; 1
    50c4:	31 09       	sbc	r19, r1
    50c6:	42 17       	cp	r20, r18
    50c8:	53 07       	cpc	r21, r19
    50ca:	0c f0       	brlt	.+2      	; 0x50ce <menu_ProcessMessage+0x330>
    50cc:	a2 c0       	rjmp	.+324    	; 0x5212 <menu_ProcessMessage+0x474>
    50ce:	8f 5f       	subi	r24, 0xFF	; 255
    50d0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    50d4:	3e dc       	rcall	.-1924   	; 0x4952 <menuCursorSetDataNibble>
    50d6:	80 e0       	ldi	r24, 0x00	; 0
    50d8:	9f c0       	rjmp	.+318    	; 0x5218 <menu_ProcessMessage+0x47a>
    50da:	88 23       	and	r24, r24
    50dc:	09 f4       	brne	.+2      	; 0x50e0 <menu_ProcessMessage+0x342>
    50de:	9b c0       	rjmp	.+310    	; 0x5216 <menu_ProcessMessage+0x478>
    50e0:	81 50       	subi	r24, 0x01	; 1
    50e2:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    50e6:	35 dc       	rcall	.-1942   	; 0x4952 <menuCursorSetDataNibble>
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	96 c0       	rjmp	.+300    	; 0x5218 <menu_ProcessMessage+0x47a>
    50ec:	61 e0       	ldi	r22, 0x01	; 1
    50ee:	5b d9       	rcall	.-3402   	; 0x43a6 <nibbleChange>
    50f0:	09 db       	rcall	.-2542   	; 0x4704 <nibbleToData>
    50f2:	22 dc       	rcall	.-1980   	; 0x4938 <menuDisplayValue>
    50f4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    50f8:	8a 30       	cpi	r24, 0x0A	; 10
    50fa:	11 f0       	breq	.+4      	; 0x5100 <menu_ProcessMessage+0x362>
    50fc:	8e 30       	cpi	r24, 0x0E	; 14
    50fe:	89 f4       	brne	.+34     	; 0x5122 <menu_ProcessMessage+0x384>
    5100:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    5104:	42 2f       	mov	r20, r18
    5106:	50 e0       	ldi	r21, 0x00	; 0
    5108:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    510c:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    5110:	84 91       	lpm	r24, Z
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	01 97       	sbiw	r24, 0x01	; 1
    5116:	48 17       	cp	r20, r24
    5118:	59 07       	cpc	r21, r25
    511a:	1c f4       	brge	.+6      	; 0x5122 <menu_ProcessMessage+0x384>
    511c:	2f 5f       	subi	r18, 0xFF	; 255
    511e:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    5122:	17 dc       	rcall	.-2002   	; 0x4952 <menuCursorSetDataNibble>
    5124:	80 e0       	ldi	r24, 0x00	; 0
    5126:	78 c0       	rjmp	.+240    	; 0x5218 <menu_ProcessMessage+0x47a>
    5128:	6f ef       	ldi	r22, 0xFF	; 255
    512a:	3d d9       	rcall	.-3462   	; 0x43a6 <nibbleChange>
    512c:	eb da       	rcall	.-2602   	; 0x4704 <nibbleToData>
    512e:	04 dc       	rcall	.-2040   	; 0x4938 <menuDisplayValue>
    5130:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    5134:	8a 30       	cpi	r24, 0x0A	; 10
    5136:	11 f0       	breq	.+4      	; 0x513c <menu_ProcessMessage+0x39e>
    5138:	8e 30       	cpi	r24, 0x0E	; 14
    513a:	89 f4       	brne	.+34     	; 0x515e <menu_ProcessMessage+0x3c0>
    513c:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    5140:	42 2f       	mov	r20, r18
    5142:	50 e0       	ldi	r21, 0x00	; 0
    5144:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    5148:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    514c:	84 91       	lpm	r24, Z
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	01 97       	sbiw	r24, 0x01	; 1
    5152:	48 17       	cp	r20, r24
    5154:	59 07       	cpc	r21, r25
    5156:	1c f4       	brge	.+6      	; 0x515e <menu_ProcessMessage+0x3c0>
    5158:	2f 5f       	subi	r18, 0xFF	; 255
    515a:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    515e:	f9 db       	rcall	.-2062   	; 0x4952 <menuCursorSetDataNibble>
    5160:	80 e0       	ldi	r24, 0x00	; 0
    5162:	5a c0       	rjmp	.+180    	; 0x5218 <menu_ProcessMessage+0x47a>
    5164:	cf da       	rcall	.-2658   	; 0x4704 <nibbleToData>
    5166:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    516a:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    516e:	c9 01       	movw	r24, r18
    5170:	0e 96       	adiw	r24, 0x0e	; 14
    5172:	fc 01       	movw	r30, r24
    5174:	a5 91       	lpm	r26, Z+
    5176:	b5 91       	lpm	r27, Z+
    5178:	10 97       	sbiw	r26, 0x00	; 0
    517a:	21 f1       	breq	.+72     	; 0x51c4 <menu_ProcessMessage+0x426>
    517c:	0d 97       	sbiw	r24, 0x0d	; 13
    517e:	fc 01       	movw	r30, r24
    5180:	84 91       	lpm	r24, Z
    5182:	88 23       	and	r24, r24
    5184:	2c f4       	brge	.+10     	; 0x5190 <menu_ProcessMessage+0x3f2>
    5186:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    518a:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    518e:	02 c0       	rjmp	.+4      	; 0x5194 <menu_ProcessMessage+0x3f6>
    5190:	80 e0       	ldi	r24, 0x00	; 0
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	a8 0f       	add	r26, r24
    5196:	b9 1f       	adc	r27, r25
    5198:	f9 01       	movw	r30, r18
    519a:	84 91       	lpm	r24, Z
    519c:	8f 73       	andi	r24, 0x3F	; 63
    519e:	8b 30       	cpi	r24, 0x0B	; 11
    51a0:	71 f4       	brne	.+28     	; 0x51be <menu_ProcessMessage+0x420>
    51a2:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    51a6:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    51aa:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    51ae:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    51b2:	4d 93       	st	X+, r20
    51b4:	5d 93       	st	X+, r21
    51b6:	6d 93       	st	X+, r22
    51b8:	7c 93       	st	X, r23
    51ba:	13 97       	sbiw	r26, 0x03	; 3
    51bc:	03 c0       	rjmp	.+6      	; 0x51c4 <menu_ProcessMessage+0x426>
    51be:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    51c2:	8c 93       	st	X, r24
    51c4:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    51c8:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    51cc:	72 96       	adiw	r30, 0x12	; 18
    51ce:	05 90       	lpm	r0, Z+
    51d0:	f4 91       	lpm	r31, Z
    51d2:	e0 2d       	mov	r30, r0
    51d4:	30 97       	sbiw	r30, 0x00	; 0
    51d6:	11 f0       	breq	.+4      	; 0x51dc <menu_ProcessMessage+0x43e>
    51d8:	8c 2f       	mov	r24, r28
    51da:	19 95       	eicall
    51dc:	8f ef       	ldi	r24, 0xFF	; 255
    51de:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    51e2:	47 dd       	rcall	.-1394   	; 0x4c72 <menuCurrMenuToLCD>
    51e4:	74 dd       	rcall	.-1304   	; 0x4cce <menuItemChanged>
    51e6:	80 e0       	ldi	r24, 0x00	; 0
    51e8:	17 c0       	rjmp	.+46     	; 0x5218 <menu_ProcessMessage+0x47a>
    51ea:	80 e0       	ldi	r24, 0x00	; 0
    51ec:	15 c0       	rjmp	.+42     	; 0x5218 <menu_ProcessMessage+0x47a>
    51ee:	80 e0       	ldi	r24, 0x00	; 0
    51f0:	13 c0       	rjmp	.+38     	; 0x5218 <menu_ProcessMessage+0x47a>
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	11 c0       	rjmp	.+34     	; 0x5218 <menu_ProcessMessage+0x47a>
    51f6:	80 e0       	ldi	r24, 0x00	; 0
    51f8:	0f c0       	rjmp	.+30     	; 0x5218 <menu_ProcessMessage+0x47a>
    51fa:	80 e0       	ldi	r24, 0x00	; 0
    51fc:	0d c0       	rjmp	.+26     	; 0x5218 <menu_ProcessMessage+0x47a>
    51fe:	80 e0       	ldi	r24, 0x00	; 0
    5200:	0b c0       	rjmp	.+22     	; 0x5218 <menu_ProcessMessage+0x47a>
    5202:	80 e0       	ldi	r24, 0x00	; 0
    5204:	09 c0       	rjmp	.+18     	; 0x5218 <menu_ProcessMessage+0x47a>
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	07 c0       	rjmp	.+14     	; 0x5218 <menu_ProcessMessage+0x47a>
    520a:	80 e0       	ldi	r24, 0x00	; 0
    520c:	05 c0       	rjmp	.+10     	; 0x5218 <menu_ProcessMessage+0x47a>
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	03 c0       	rjmp	.+6      	; 0x5218 <menu_ProcessMessage+0x47a>
    5212:	80 e0       	ldi	r24, 0x00	; 0
    5214:	01 c0       	rjmp	.+2      	; 0x5218 <menu_ProcessMessage+0x47a>
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	cf 91       	pop	r28
    521a:	08 95       	ret

0000521c <displayMenuMessage_P>:
    521c:	0f 93       	push	r16
    521e:	1f 93       	push	r17
    5220:	cf 93       	push	r28
    5222:	df 93       	push	r29
    5224:	ec 01       	movw	r28, r24
    5226:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    522a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    522e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5232:	84 91       	lpm	r24, Z
    5234:	8f 73       	andi	r24, 0x3F	; 63
    5236:	81 30       	cpi	r24, 0x01	; 1
    5238:	91 f4       	brne	.+36     	; 0x525e <displayMenuMessage_P+0x42>
    523a:	ce 01       	movw	r24, r28
    523c:	0e 94 81 3c 	call	0x7902	; 0x7902 <get_StrLenP>
    5240:	24 e1       	ldi	r18, 0x14	; 20
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	a9 01       	movw	r20, r18
    5246:	48 1b       	sub	r20, r24
    5248:	51 09       	sbc	r21, r1
    524a:	ca 01       	movw	r24, r20
    524c:	95 95       	asr	r25
    524e:	87 95       	ror	r24
    5250:	8c 5e       	subi	r24, 0xEC	; 236
    5252:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5256:	83 e0       	ldi	r24, 0x03	; 3
    5258:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    525c:	05 c0       	rjmp	.+10     	; 0x5268 <displayMenuMessage_P+0x4c>
    525e:	84 e1       	ldi	r24, 0x14	; 20
    5260:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5264:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    5268:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    526c:	ce 01       	movw	r24, r28
    526e:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    5272:	80 2f       	mov	r24, r16
    5274:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5278:	9f b7       	in	r25, 0x3f	; 63
    527a:	f8 94       	cli
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	06 c0       	rjmp	.+12     	; 0x528c <displayMenuMessage_P+0x70>
    5280:	ef e2       	ldi	r30, 0x2F	; 47
    5282:	f2 e0       	ldi	r31, 0x02	; 2
    5284:	84 e6       	ldi	r24, 0x64	; 100
    5286:	86 87       	std	Z+14, r24	; 0x0e
    5288:	17 86       	std	Z+15, r1	; 0x0f
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	81 11       	cpse	r24, r1
    528e:	f8 cf       	rjmp	.-16     	; 0x5280 <displayMenuMessage_P+0x64>
    5290:	9f bf       	out	0x3f, r25	; 63
    5292:	81 2f       	mov	r24, r17
    5294:	df 91       	pop	r29
    5296:	cf 91       	pop	r28
    5298:	1f 91       	pop	r17
    529a:	0f 91       	pop	r16
    529c:	08 95       	ret

0000529e <menu_OnEnterMidiPanic>:
    529e:	88 eb       	ldi	r24, 0xB8	; 184
    52a0:	93 e0       	ldi	r25, 0x03	; 3
    52a2:	bc df       	rcall	.-136    	; 0x521c <displayMenuMessage_P>
    52a4:	0e 94 85 35 	call	0x6b0a	; 0x6b0a <midiSendAllNotesOff>
    52a8:	a6 dc       	rcall	.-1716   	; 0x4bf6 <menuCursorSetMenu>
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	08 95       	ret

000052ae <menu_ModuleTestExecute>:
    52ae:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    52b2:	8f 3f       	cpi	r24, 0xFF	; 255
    52b4:	11 f0       	breq	.+4      	; 0x52ba <menu_ModuleTestExecute+0xc>
    52b6:	8d 3f       	cpi	r24, 0xFD	; 253
    52b8:	71 f5       	brne	.+92     	; 0x5316 <menu_ModuleTestExecute+0x68>
    52ba:	0e 94 ce 3b 	call	0x779c	; 0x779c <lcd_cursoroff>
    52be:	a4 dc       	rcall	.-1720   	; 0x4c08 <menu_ClearDataDisp>
    52c0:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	e9 e4       	ldi	r30, 0x49	; 73
    52c8:	f2 e0       	ldi	r31, 0x02	; 2
    52ca:	07 c0       	rjmp	.+14     	; 0x52da <menu_ModuleTestExecute+0x2c>
    52cc:	21 81       	ldd	r18, Z+1	; 0x01
    52ce:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    52d2:	82 2b       	or	r24, r18
    52d4:	81 83       	std	Z+1, r24	; 0x01
    52d6:	38 96       	adiw	r30, 0x08	; 8
    52d8:	9f 5f       	subi	r25, 0xFF	; 255
    52da:	90 32       	cpi	r25, 0x20	; 32
    52dc:	b8 f3       	brcs	.-18     	; 0x52cc <menu_ModuleTestExecute+0x1e>
    52de:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    52e2:	8f 3f       	cpi	r24, 0xFF	; 255
    52e4:	19 f4       	brne	.+6      	; 0x52ec <menu_ModuleTestExecute+0x3e>
    52e6:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    52ea:	5b c0       	rjmp	.+182    	; 0x53a2 <menu_ModuleTestExecute+0xf4>
    52ec:	82 eb       	ldi	r24, 0xB2	; 178
    52ee:	93 e0       	ldi	r25, 0x03	; 3
    52f0:	95 df       	rcall	.-214    	; 0x521c <displayMenuMessage_P>
    52f2:	8e ef       	ldi	r24, 0xFE	; 254
    52f4:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    52f8:	9f b7       	in	r25, 0x3f	; 63
    52fa:	f8 94       	cli
    52fc:	81 e0       	ldi	r24, 0x01	; 1
    52fe:	06 c0       	rjmp	.+12     	; 0x530c <menu_ModuleTestExecute+0x5e>
    5300:	ef e2       	ldi	r30, 0x2F	; 47
    5302:	f2 e0       	ldi	r31, 0x02	; 2
    5304:	82 e0       	ldi	r24, 0x02	; 2
    5306:	84 87       	std	Z+12, r24	; 0x0c
    5308:	85 87       	std	Z+13, r24	; 0x0d
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	81 11       	cpse	r24, r1
    530e:	f8 cf       	rjmp	.-16     	; 0x5300 <menu_ModuleTestExecute+0x52>
    5310:	9f bf       	out	0x3f, r25	; 63
    5312:	71 dc       	rcall	.-1822   	; 0x4bf6 <menuCursorSetMenu>
    5314:	46 c0       	rjmp	.+140    	; 0x53a2 <menu_ModuleTestExecute+0xf4>
    5316:	8e 3f       	cpi	r24, 0xFE	; 254
    5318:	41 f4       	brne	.+16     	; 0x532a <menu_ModuleTestExecute+0x7c>
    531a:	8f ef       	ldi	r24, 0xFF	; 255
    531c:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    5320:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    5324:	0e 94 c7 3b 	call	0x778e	; 0x778e <lcd_cursosblink>
    5328:	3c c0       	rjmp	.+120    	; 0x53a2 <menu_ModuleTestExecute+0xf4>
    532a:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    532e:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    5332:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    5336:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    533a:	76 95       	lsr	r23
    533c:	67 95       	ror	r22
    533e:	57 95       	ror	r21
    5340:	47 95       	ror	r20
    5342:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    5346:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    534a:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    534e:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    5352:	e8 2f       	mov	r30, r24
    5354:	f0 e0       	ldi	r31, 0x00	; 0
    5356:	df 01       	movw	r26, r30
    5358:	aa 0f       	add	r26, r26
    535a:	bb 1f       	adc	r27, r27
    535c:	aa 0f       	add	r26, r26
    535e:	bb 1f       	adc	r27, r27
    5360:	aa 0f       	add	r26, r26
    5362:	bb 1f       	adc	r27, r27
    5364:	a7 5b       	subi	r26, 0xB7	; 183
    5366:	bd 4f       	sbci	r27, 0xFD	; 253
    5368:	16 96       	adiw	r26, 0x06	; 6
    536a:	2c 91       	ld	r18, X
    536c:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    5370:	29 23       	and	r18, r25
    5372:	49 f4       	brne	.+18     	; 0x5386 <menu_ModuleTestExecute+0xd8>
    5374:	70 68       	ori	r23, 0x80	; 128
    5376:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    537a:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    537e:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    5382:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    5386:	ee 0f       	add	r30, r30
    5388:	ff 1f       	adc	r31, r31
    538a:	ee 0f       	add	r30, r30
    538c:	ff 1f       	adc	r31, r31
    538e:	ee 0f       	add	r30, r30
    5390:	ff 1f       	adc	r31, r31
    5392:	e7 5b       	subi	r30, 0xB7	; 183
    5394:	fd 4f       	sbci	r31, 0xFD	; 253
    5396:	21 81       	ldd	r18, Z+1	; 0x01
    5398:	92 2b       	or	r25, r18
    539a:	91 83       	std	Z+1, r25	; 0x01
    539c:	8f 5f       	subi	r24, 0xFF	; 255
    539e:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    53a2:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    53a6:	e0 32       	cpi	r30, 0x20	; 32
    53a8:	28 f5       	brcc	.+74     	; 0x53f4 <menu_ModuleTestExecute+0x146>
    53aa:	f0 e0       	ldi	r31, 0x00	; 0
    53ac:	ee 0f       	add	r30, r30
    53ae:	ff 1f       	adc	r31, r31
    53b0:	ee 0f       	add	r30, r30
    53b2:	ff 1f       	adc	r31, r31
    53b4:	ee 0f       	add	r30, r30
    53b6:	ff 1f       	adc	r31, r31
    53b8:	e7 5b       	subi	r30, 0xB7	; 183
    53ba:	fd 4f       	sbci	r31, 0xFD	; 253
    53bc:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    53c0:	98 2f       	mov	r25, r24
    53c2:	90 95       	com	r25
    53c4:	81 81       	ldd	r24, Z+1	; 0x01
    53c6:	89 23       	and	r24, r25
    53c8:	81 83       	std	Z+1, r24	; 0x01
    53ca:	8e e1       	ldi	r24, 0x1E	; 30
    53cc:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    53d0:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    53d4:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <lcd_dec2out>
    53d8:	9f b7       	in	r25, 0x3f	; 63
    53da:	f8 94       	cli
    53dc:	81 e0       	ldi	r24, 0x01	; 1
    53de:	06 c0       	rjmp	.+12     	; 0x53ec <menu_ModuleTestExecute+0x13e>
    53e0:	ef e2       	ldi	r30, 0x2F	; 47
    53e2:	f2 e0       	ldi	r31, 0x02	; 2
    53e4:	88 e0       	ldi	r24, 0x08	; 8
    53e6:	84 87       	std	Z+12, r24	; 0x0c
    53e8:	15 86       	std	Z+13, r1	; 0x0d
    53ea:	80 e0       	ldi	r24, 0x00	; 0
    53ec:	81 11       	cpse	r24, r1
    53ee:	f8 cf       	rjmp	.-16     	; 0x53e0 <menu_ModuleTestExecute+0x132>
    53f0:	9f bf       	out	0x3f, r25	; 63
    53f2:	08 95       	ret
    53f4:	e0 32       	cpi	r30, 0x20	; 32
    53f6:	81 f5       	brne	.+96     	; 0x5458 <menu_ModuleTestExecute+0x1aa>
    53f8:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    53fc:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    5400:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    5404:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    5408:	00 97       	sbiw	r24, 0x00	; 0
    540a:	a1 05       	cpc	r26, r1
    540c:	b1 05       	cpc	r27, r1
    540e:	21 f4       	brne	.+8      	; 0x5418 <menu_ModuleTestExecute+0x16a>
    5410:	8e ea       	ldi	r24, 0xAE	; 174
    5412:	93 e0       	ldi	r25, 0x03	; 3
    5414:	03 df       	rcall	.-506    	; 0x521c <displayMenuMessage_P>
    5416:	0f c0       	rjmp	.+30     	; 0x5436 <menu_ModuleTestExecute+0x188>
    5418:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <editLong>
    541c:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <editLong+0x1>
    5420:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <editLong+0x2>
    5424:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <editLong+0x3>
    5428:	8b ea       	ldi	r24, 0xAB	; 171
    542a:	93 e0       	ldi	r25, 0x03	; 3
    542c:	f7 de       	rcall	.-530    	; 0x521c <displayMenuMessage_P>
    542e:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5432:	0e 94 b3 39 	call	0x7366	; 0x7366 <lcd_longout>
    5436:	8e ef       	ldi	r24, 0xFE	; 254
    5438:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    543c:	9f b7       	in	r25, 0x3f	; 63
    543e:	f8 94       	cli
    5440:	81 e0       	ldi	r24, 0x01	; 1
    5442:	06 c0       	rjmp	.+12     	; 0x5450 <menu_ModuleTestExecute+0x1a2>
    5444:	ef e2       	ldi	r30, 0x2F	; 47
    5446:	f2 e0       	ldi	r31, 0x02	; 2
    5448:	82 e0       	ldi	r24, 0x02	; 2
    544a:	84 87       	std	Z+12, r24	; 0x0c
    544c:	85 87       	std	Z+13, r24	; 0x0d
    544e:	80 e0       	ldi	r24, 0x00	; 0
    5450:	81 11       	cpse	r24, r1
    5452:	f8 cf       	rjmp	.-16     	; 0x5444 <menu_ModuleTestExecute+0x196>
    5454:	9f bf       	out	0x3f, r25	; 63
    5456:	cf cb       	rjmp	.-2146   	; 0x4bf6 <menuCursorSetMenu>
    5458:	08 95       	ret

0000545a <menu_ModuleTestPattern>:
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    5462:	02 c0       	rjmp	.+4      	; 0x5468 <menu_ModuleTestPattern+0xe>
    5464:	88 0f       	add	r24, r24
    5466:	99 1f       	adc	r25, r25
    5468:	0a 94       	dec	r0
    546a:	e2 f7       	brpl	.-8      	; 0x5464 <menu_ModuleTestPattern+0xa>
    546c:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    5470:	8f ef       	ldi	r24, 0xFF	; 255
    5472:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5476:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    547a:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    547e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    5482:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    5486:	13 df       	rcall	.-474    	; 0x52ae <menu_ModuleTestExecute>
    5488:	80 e0       	ldi	r24, 0x00	; 0
    548a:	08 95       	ret

0000548c <menuLCDwriteOK>:
    548c:	8e ea       	ldi	r24, 0xAE	; 174
    548e:	93 e0       	ldi	r25, 0x03	; 3
    5490:	c5 ce       	rjmp	.-630    	; 0x521c <displayMenuMessage_P>
    5492:	08 95       	ret

00005494 <menuOnEnterEEBackup>:
    5494:	8e e1       	ldi	r24, 0x1E	; 30
    5496:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    549a:	81 e9       	ldi	r24, 0x91	; 145
    549c:	93 e0       	ldi	r25, 0x03	; 3
    549e:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    54a2:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <eeprom_Backup>
    54a6:	f2 df       	rcall	.-28     	; 0x548c <menuLCDwriteOK>
    54a8:	80 e0       	ldi	r24, 0x00	; 0
    54aa:	08 95       	ret

000054ac <menuOnEnterEERestore>:
    54ac:	8e e1       	ldi	r24, 0x1E	; 30
    54ae:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54b2:	81 e9       	ldi	r24, 0x91	; 145
    54b4:	93 e0       	ldi	r25, 0x03	; 3
    54b6:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    54ba:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <eeprom_Restore>
    54be:	e6 df       	rcall	.-52     	; 0x548c <menuLCDwriteOK>
    54c0:	80 e0       	ldi	r24, 0x00	; 0
    54c2:	08 95       	ret

000054c4 <menuOnEnterEEUpdate>:
    54c4:	81 e9       	ldi	r24, 0x91	; 145
    54c6:	93 e0       	ldi	r25, 0x03	; 3
    54c8:	a9 de       	rcall	.-686    	; 0x521c <displayMenuMessage_P>
    54ca:	8e e1       	ldi	r24, 0x1E	; 30
    54cc:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54d0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <eeprom_UpdateALL>
    54d4:	db df       	rcall	.-74     	; 0x548c <menuLCDwriteOK>
    54d6:	80 e0       	ldi	r24, 0x00	; 0
    54d8:	08 95       	ret

000054da <menudeleteMainMessage>:
    54da:	cf 93       	push	r28
    54dc:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    54e0:	80 e4       	ldi	r24, 0x40	; 64
    54e2:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54e6:	84 e1       	ldi	r24, 0x14	; 20
    54e8:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
    54ec:	8c 2f       	mov	r24, r28
    54ee:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    54f2:	cf 91       	pop	r28
    54f4:	08 95       	ret

000054f6 <menu_deleteMessage>:
    54f6:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    54fa:	83 30       	cpi	r24, 0x03	; 3
    54fc:	19 f4       	brne	.+6      	; 0x5504 <menu_deleteMessage+0xe>
    54fe:	7f db       	rcall	.-2306   	; 0x4bfe <menuClearExtraDisp>
    5500:	83 cb       	rjmp	.-2298   	; 0x4c08 <menu_ClearDataDisp>
    5502:	08 95       	ret
    5504:	81 11       	cpse	r24, r1
    5506:	02 c0       	rjmp	.+4      	; 0x550c <menu_deleteMessage+0x16>
    5508:	7a cb       	rjmp	.-2316   	; 0x4bfe <menuClearExtraDisp>
    550a:	08 95       	ret
    550c:	81 30       	cpi	r24, 0x01	; 1
    550e:	11 f4       	brne	.+4      	; 0x5514 <menu_deleteMessage+0x1e>
    5510:	7b cb       	rjmp	.-2314   	; 0x4c08 <menu_ClearDataDisp>
    5512:	08 95       	ret
    5514:	e2 cf       	rjmp	.-60     	; 0x54da <menudeleteMainMessage>
    5516:	08 95       	ret

00005518 <menu_DisplayMainMessage_P>:
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
    551c:	cf 93       	push	r28
    551e:	df 93       	push	r29
    5520:	ec 01       	movw	r28, r24
    5522:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5526:	0e 94 81 3c 	call	0x7902	; 0x7902 <get_StrLenP>
    552a:	08 2f       	mov	r16, r24
    552c:	80 e4       	ldi	r24, 0x40	; 64
    552e:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    5532:	84 e1       	ldi	r24, 0x14	; 20
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	80 1b       	sub	r24, r16
    5538:	91 09       	sbc	r25, r1
    553a:	95 95       	asr	r25
    553c:	87 95       	ror	r24
    553e:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
    5542:	ce 01       	movw	r24, r28
    5544:	0e 94 89 13 	call	0x2712	; 0x2712 <lcd_puts_P>
    5548:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    554c:	84 e5       	ldi	r24, 0x54	; 84
    554e:	89 1b       	sub	r24, r25
    5550:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
    5554:	81 2f       	mov	r24, r17
    5556:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    555a:	9f b7       	in	r25, 0x3f	; 63
    555c:	f8 94       	cli
    555e:	81 e0       	ldi	r24, 0x01	; 1
    5560:	06 c0       	rjmp	.+12     	; 0x556e <menu_DisplayMainMessage_P+0x56>
    5562:	ef e2       	ldi	r30, 0x2F	; 47
    5564:	f2 e0       	ldi	r31, 0x02	; 2
    5566:	84 e6       	ldi	r24, 0x64	; 100
    5568:	86 87       	std	Z+14, r24	; 0x0e
    556a:	17 86       	std	Z+15, r1	; 0x0f
    556c:	80 e0       	ldi	r24, 0x00	; 0
    556e:	81 11       	cpse	r24, r1
    5570:	f8 cf       	rjmp	.-16     	; 0x5562 <menu_DisplayMainMessage_P+0x4a>
    5572:	9f bf       	out	0x3f, r25	; 63
    5574:	82 e0       	ldi	r24, 0x02	; 2
    5576:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    557a:	df 91       	pop	r29
    557c:	cf 91       	pop	r28
    557e:	1f 91       	pop	r17
    5580:	0f 91       	pop	r16
    5582:	08 95       	ret

00005584 <menu_DisplayMainMessage>:
    5584:	0f 93       	push	r16
    5586:	1f 93       	push	r17
    5588:	cf 93       	push	r28
    558a:	df 93       	push	r29
    558c:	ec 01       	movw	r28, r24
    558e:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5592:	0e 94 8b 3c 	call	0x7916	; 0x7916 <get_StrLen>
    5596:	08 2f       	mov	r16, r24
    5598:	80 e4       	ldi	r24, 0x40	; 64
    559a:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    559e:	84 e1       	ldi	r24, 0x14	; 20
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	80 1b       	sub	r24, r16
    55a4:	91 09       	sbc	r25, r1
    55a6:	95 95       	asr	r25
    55a8:	87 95       	ror	r24
    55aa:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
    55ae:	ce 01       	movw	r24, r28
    55b0:	0e 94 79 13 	call	0x26f2	; 0x26f2 <lcd_puts>
    55b4:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    55b8:	84 e5       	ldi	r24, 0x54	; 84
    55ba:	89 1b       	sub	r24, r25
    55bc:	0e 94 a4 3b 	call	0x7748	; 0x7748 <lcd_blank>
    55c0:	81 2f       	mov	r24, r17
    55c2:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    55c6:	9f b7       	in	r25, 0x3f	; 63
    55c8:	f8 94       	cli
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	06 c0       	rjmp	.+12     	; 0x55da <menu_DisplayMainMessage+0x56>
    55ce:	ef e2       	ldi	r30, 0x2F	; 47
    55d0:	f2 e0       	ldi	r31, 0x02	; 2
    55d2:	84 e6       	ldi	r24, 0x64	; 100
    55d4:	86 87       	std	Z+14, r24	; 0x0e
    55d6:	17 86       	std	Z+15, r1	; 0x0f
    55d8:	80 e0       	ldi	r24, 0x00	; 0
    55da:	81 11       	cpse	r24, r1
    55dc:	f8 cf       	rjmp	.-16     	; 0x55ce <menu_DisplayMainMessage+0x4a>
    55de:	9f bf       	out	0x3f, r25	; 63
    55e0:	82 e0       	ldi	r24, 0x02	; 2
    55e2:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    55e6:	df 91       	pop	r29
    55e8:	cf 91       	pop	r28
    55ea:	1f 91       	pop	r17
    55ec:	0f 91       	pop	r16
    55ee:	08 95       	ret

000055f0 <menuDisplaySaveMessage>:
    55f0:	cf 93       	push	r28
    55f2:	c6 2f       	mov	r28, r22
    55f4:	61 ee       	ldi	r22, 0xE1	; 225
    55f6:	78 e1       	ldi	r23, 0x18	; 24
    55f8:	0e 94 0e 3a 	call	0x741c	; 0x741c <putChar_Dec>
    55fc:	bc 01       	movw	r22, r24
    55fe:	8e ec       	ldi	r24, 0xCE	; 206
    5600:	93 e0       	ldi	r25, 0x03	; 3
    5602:	0e 94 02 3b 	call	0x7604	; 0x7604 <putString_P>
    5606:	6c 2f       	mov	r22, r28
    5608:	70 e0       	ldi	r23, 0x00	; 0
    560a:	0e 94 18 3b 	call	0x7630	; 0x7630 <putString_Prog>
    560e:	81 ee       	ldi	r24, 0xE1	; 225
    5610:	98 e1       	ldi	r25, 0x18	; 24
    5612:	b8 df       	rcall	.-144    	; 0x5584 <menu_DisplayMainMessage>
    5614:	cf 91       	pop	r28
    5616:	08 95       	ret

00005618 <softKeyPrP>:
    5618:	cf 93       	push	r28
    561a:	88 23       	and	r24, r24
    561c:	54 f4       	brge	.+20     	; 0x5632 <softKeyPrP+0x1a>
    561e:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    5622:	cf 3f       	cpi	r28, 0xFF	; 255
    5624:	d1 f0       	breq	.+52     	; 0x565a <softKeyPrP+0x42>
    5626:	6f ef       	ldi	r22, 0xFF	; 255
    5628:	8c 2f       	mov	r24, r28
    562a:	74 d4       	rcall	.+2280   	; 0x5f14 <register_toProgram>
    562c:	6c 2f       	mov	r22, r28
    562e:	e0 df       	rcall	.-64     	; 0x55f0 <menuDisplaySaveMessage>
    5630:	14 c0       	rjmp	.+40     	; 0x565a <softKeyPrP+0x42>
    5632:	88 23       	and	r24, r24
    5634:	91 f0       	breq	.+36     	; 0x565a <softKeyPrP+0x42>
    5636:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    563a:	8f 33       	cpi	r24, 0x3F	; 63
    563c:	21 f4       	brne	.+8      	; 0x5646 <softKeyPrP+0x2e>
    563e:	8f ef       	ldi	r24, 0xFF	; 255
    5640:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5644:	03 c0       	rjmp	.+6      	; 0x564c <softKeyPrP+0x34>
    5646:	8f 5f       	subi	r24, 0xFF	; 255
    5648:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    564c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    5650:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <send_progrChange_toMidiThru>
    5654:	8f ef       	ldi	r24, 0xFF	; 255
    5656:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    565a:	80 e0       	ldi	r24, 0x00	; 0
    565c:	cf 91       	pop	r28
    565e:	08 95       	ret

00005660 <softKeyPrSet>:
    5660:	cf 93       	push	r28
    5662:	88 23       	and	r24, r24
    5664:	49 f0       	breq	.+18     	; 0x5678 <softKeyPrSet+0x18>
    5666:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    566a:	cf 3f       	cpi	r28, 0xFF	; 255
    566c:	29 f0       	breq	.+10     	; 0x5678 <softKeyPrSet+0x18>
    566e:	6f ef       	ldi	r22, 0xFF	; 255
    5670:	8c 2f       	mov	r24, r28
    5672:	50 d4       	rcall	.+2208   	; 0x5f14 <register_toProgram>
    5674:	6c 2f       	mov	r22, r28
    5676:	bc df       	rcall	.-136    	; 0x55f0 <menuDisplaySaveMessage>
    5678:	80 e0       	ldi	r24, 0x00	; 0
    567a:	cf 91       	pop	r28
    567c:	08 95       	ret

0000567e <menuDisplayLoadMessage>:
    567e:	0f 93       	push	r16
    5680:	1f 93       	push	r17
    5682:	cf 93       	push	r28
    5684:	c8 2f       	mov	r28, r24
    5686:	70 e0       	ldi	r23, 0x00	; 0
    5688:	81 ee       	ldi	r24, 0xE1	; 225
    568a:	98 e1       	ldi	r25, 0x18	; 24
    568c:	0e 94 18 3b 	call	0x7630	; 0x7630 <putString_Prog>
    5690:	bc 01       	movw	r22, r24
    5692:	6f 5f       	subi	r22, 0xFF	; 255
    5694:	7f 4f       	sbci	r23, 0xFF	; 255
    5696:	2e e7       	ldi	r18, 0x7E	; 126
    5698:	fc 01       	movw	r30, r24
    569a:	20 83       	st	Z, r18
    569c:	8c 2f       	mov	r24, r28
    569e:	0e 94 0e 3a 	call	0x741c	; 0x741c <putChar_Dec>
    56a2:	bc 01       	movw	r22, r24
    56a4:	89 ec       	ldi	r24, 0xC9	; 201
    56a6:	93 e0       	ldi	r25, 0x03	; 3
    56a8:	0e 94 02 3b 	call	0x7604	; 0x7604 <putString_P>
    56ac:	8c 01       	movw	r16, r24
    56ae:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <module_WaitOutputInput2Cycles>
    56b2:	84 e0       	ldi	r24, 0x04	; 4
    56b4:	ca d3       	rcall	.+1940   	; 0x5e4a <count_Registers>
    56b6:	c8 2f       	mov	r28, r24
    56b8:	88 23       	and	r24, r24
    56ba:	49 f0       	breq	.+18     	; 0x56ce <menuDisplayLoadMessage+0x50>
    56bc:	b8 01       	movw	r22, r16
    56be:	87 ec       	ldi	r24, 0xC7	; 199
    56c0:	93 e0       	ldi	r25, 0x03	; 3
    56c2:	0e 94 02 3b 	call	0x7604	; 0x7604 <putString_P>
    56c6:	bc 01       	movw	r22, r24
    56c8:	8c 2f       	mov	r24, r28
    56ca:	0e 94 0e 3a 	call	0x741c	; 0x741c <putChar_Dec>
    56ce:	81 ee       	ldi	r24, 0xE1	; 225
    56d0:	98 e1       	ldi	r25, 0x18	; 24
    56d2:	58 df       	rcall	.-336    	; 0x5584 <menu_DisplayMainMessage>
    56d4:	cf 91       	pop	r28
    56d6:	1f 91       	pop	r17
    56d8:	0f 91       	pop	r16
    56da:	08 95       	ret

000056dc <handle_programKey>:
    56dc:	cf 93       	push	r28
    56de:	c6 2f       	mov	r28, r22
    56e0:	88 23       	and	r24, r24
    56e2:	34 f4       	brge	.+12     	; 0x56f0 <handle_programKey+0x14>
    56e4:	6f ef       	ldi	r22, 0xFF	; 255
    56e6:	8c 2f       	mov	r24, r28
    56e8:	15 d4       	rcall	.+2090   	; 0x5f14 <register_toProgram>
    56ea:	6c 2f       	mov	r22, r28
    56ec:	81 df       	rcall	.-254    	; 0x55f0 <menuDisplaySaveMessage>
    56ee:	09 c0       	rjmp	.+18     	; 0x5702 <handle_programKey+0x26>
    56f0:	88 23       	and	r24, r24
    56f2:	39 f0       	breq	.+14     	; 0x5702 <handle_programKey+0x26>
    56f4:	86 2f       	mov	r24, r22
    56f6:	a8 d4       	rcall	.+2384   	; 0x6048 <program_toRegister>
    56f8:	6c 2f       	mov	r22, r28
    56fa:	c1 df       	rcall	.-126    	; 0x567e <menuDisplayLoadMessage>
    56fc:	8c 2f       	mov	r24, r28
    56fe:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <send_progrChange_toMidiThru>
    5702:	8c 2f       	mov	r24, r28
    5704:	77 d4       	rcall	.+2286   	; 0x5ff4 <midi_CountRegisterInProgram>
    5706:	88 23       	and	r24, r24
    5708:	31 f0       	breq	.+12     	; 0x5716 <handle_programKey+0x3a>
    570a:	8c 2f       	mov	r24, r28
    570c:	38 d4       	rcall	.+2160   	; 0x5f7e <midi_RegisterMatchProgram>
    570e:	81 11       	cpse	r24, r1
    5710:	04 c0       	rjmp	.+8      	; 0x571a <handle_programKey+0x3e>
    5712:	81 e8       	ldi	r24, 0x81	; 129
    5714:	03 c0       	rjmp	.+6      	; 0x571c <handle_programKey+0x40>
    5716:	82 e8       	ldi	r24, 0x82	; 130
    5718:	01 c0       	rjmp	.+2      	; 0x571c <handle_programKey+0x40>
    571a:	82 e8       	ldi	r24, 0x82	; 130
    571c:	cf 91       	pop	r28
    571e:	08 95       	ret

00005720 <softKeyK1A>:
    5720:	60 e0       	ldi	r22, 0x00	; 0
    5722:	dc cf       	rjmp	.-72     	; 0x56dc <handle_programKey>
    5724:	08 95       	ret

00005726 <softKeyK2A>:
    5726:	61 e0       	ldi	r22, 0x01	; 1
    5728:	d9 cf       	rjmp	.-78     	; 0x56dc <handle_programKey>
    572a:	08 95       	ret

0000572c <softKeyK3A>:
    572c:	62 e0       	ldi	r22, 0x02	; 2
    572e:	d6 cf       	rjmp	.-84     	; 0x56dc <handle_programKey>
    5730:	08 95       	ret

00005732 <softKeyK4A>:
    5732:	63 e0       	ldi	r22, 0x03	; 3
    5734:	d3 cf       	rjmp	.-90     	; 0x56dc <handle_programKey>
    5736:	08 95       	ret

00005738 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5738:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    573a:	34 e0       	ldi	r19, 0x04	; 4
    573c:	80 37       	cpi	r24, 0x70	; 112
    573e:	93 07       	cpc	r25, r19
    5740:	49 f0       	breq	.+18     	; 0x5754 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5742:	34 e0       	ldi	r19, 0x04	; 4
    5744:	80 37       	cpi	r24, 0x70	; 112
    5746:	93 07       	cpc	r25, r19
    5748:	38 f0       	brcs	.+14     	; 0x5758 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    574a:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    574c:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    574e:	a9 f7       	brne	.-22     	; 0x573a <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5750:	80 e0       	ldi	r24, 0x00	; 0
    5752:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5754:	82 2f       	mov	r24, r18
    5756:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5758:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    575a:	08 95       	ret

0000575c <init_SoftKeys>:

void init_SoftKeys(){
    575c:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    575e:	0e 94 b2 0b 	call	0x1764	; 0x1764 <eeprom_ReadSoftkeys>
    5762:	8f 3f       	cpi	r24, 0xFF	; 255
    5764:	c9 f4       	brne	.+50     	; 0x5798 <init_SoftKeys+0x3c>
    5766:	0f c0       	rjmp	.+30     	; 0x5786 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5768:	82 2f       	mov	r24, r18
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	fc 01       	movw	r30, r24
    576e:	ed 54       	subi	r30, 0x4D	; 77
    5770:	fa 4f       	sbci	r31, 0xFA	; 250
    5772:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5774:	88 0f       	add	r24, r24
    5776:	99 1f       	adc	r25, r25
    5778:	fc 01       	movw	r30, r24
    577a:	e6 54       	subi	r30, 0x46	; 70
    577c:	fa 4f       	sbci	r31, 0xFA	; 250
    577e:	11 82       	std	Z+1, r1	; 0x01
    5780:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5782:	2f 5f       	subi	r18, 0xFF	; 255
    5784:	01 c0       	rjmp	.+2      	; 0x5788 <init_SoftKeys+0x2c>
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	24 30       	cpi	r18, 0x04	; 4
    578a:	70 f3       	brcs	.-36     	; 0x5768 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    578c:	40 e0       	ldi	r20, 0x00	; 0
    578e:	50 e0       	ldi	r21, 0x00	; 0
    5790:	67 e0       	ldi	r22, 0x07	; 7
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
    5798:	c0 e0       	ldi	r28, 0x00	; 0
    579a:	25 c0       	rjmp	.+74     	; 0x57e6 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    579c:	4c 2f       	mov	r20, r28
    579e:	50 e0       	ldi	r21, 0x00	; 0
    57a0:	fa 01       	movw	r30, r20
    57a2:	ed 54       	subi	r30, 0x4D	; 77
    57a4:	fa 4f       	sbci	r31, 0xFA	; 250
    57a6:	80 81       	ld	r24, Z
    57a8:	8d 31       	cpi	r24, 0x1D	; 29
    57aa:	70 f4       	brcc	.+28     	; 0x57c8 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    57ac:	24 e1       	ldi	r18, 0x14	; 20
    57ae:	82 9f       	mul	r24, r18
    57b0:	c0 01       	movw	r24, r0
    57b2:	11 24       	eor	r1, r1
    57b4:	80 59       	subi	r24, 0x90	; 144
    57b6:	9b 4f       	sbci	r25, 0xFB	; 251
    57b8:	44 0f       	add	r20, r20
    57ba:	55 1f       	adc	r21, r21
    57bc:	fa 01       	movw	r30, r20
    57be:	e6 54       	subi	r30, 0x46	; 70
    57c0:	fa 4f       	sbci	r31, 0xFA	; 250
    57c2:	91 83       	std	Z+1, r25	; 0x01
    57c4:	80 83       	st	Z, r24
    57c6:	0e c0       	rjmp	.+28     	; 0x57e4 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    57c8:	fa 01       	movw	r30, r20
    57ca:	ee 0f       	add	r30, r30
    57cc:	ff 1f       	adc	r31, r31
    57ce:	e6 54       	subi	r30, 0x46	; 70
    57d0:	fa 4f       	sbci	r31, 0xFA	; 250
    57d2:	11 82       	std	Z+1, r1	; 0x01
    57d4:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    57d6:	4f 5f       	subi	r20, 0xFF	; 255
    57d8:	5f 4f       	sbci	r21, 0xFF	; 255
    57da:	40 61       	ori	r20, 0x10	; 16
    57dc:	67 e0       	ldi	r22, 0x07	; 7
    57de:	81 e0       	ldi	r24, 0x01	; 1
    57e0:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    57e4:	cf 5f       	subi	r28, 0xFF	; 255
    57e6:	c4 30       	cpi	r28, 0x04	; 4
    57e8:	c8 f2       	brcs	.-78     	; 0x579c <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    57ea:	cf 91       	pop	r28
    57ec:	08 95       	ret

000057ee <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    57ee:	cf 93       	push	r28
    57f0:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    57f2:	64 30       	cpi	r22, 0x04	; 4
    57f4:	28 f5       	brcc	.+74     	; 0x5840 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    57f6:	00 97       	sbiw	r24, 0x00	; 0
    57f8:	b9 f0       	breq	.+46     	; 0x5828 <softKey_Set+0x3a>
    57fa:	fc 01       	movw	r30, r24
    57fc:	24 91       	lpm	r18, Z
    57fe:	2f 73       	andi	r18, 0x3F	; 63
    5800:	21 30       	cpi	r18, 0x01	; 1
    5802:	91 f4       	brne	.+36     	; 0x5828 <softKey_Set+0x3a>
    5804:	31 96       	adiw	r30, 0x01	; 1
    5806:	24 91       	lpm	r18, Z
    5808:	24 ff       	sbrs	r18, 4
    580a:	0e c0       	rjmp	.+28     	; 0x5828 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    580c:	c6 2f       	mov	r28, r22
    580e:	d0 e0       	ldi	r29, 0x00	; 0
    5810:	fe 01       	movw	r30, r28
    5812:	ee 0f       	add	r30, r30
    5814:	ff 1f       	adc	r31, r31
    5816:	e6 54       	subi	r30, 0x46	; 70
    5818:	fa 4f       	sbci	r31, 0xFA	; 250
    581a:	91 83       	std	Z+1, r25	; 0x01
    581c:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    581e:	8c df       	rcall	.-232    	; 0x5738 <getSoftKeyIndex>
    5820:	cd 54       	subi	r28, 0x4D	; 77
    5822:	da 4f       	sbci	r29, 0xFA	; 250
    5824:	88 83       	st	Y, r24
    5826:	0c c0       	rjmp	.+24     	; 0x5840 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5828:	70 e0       	ldi	r23, 0x00	; 0
    582a:	fb 01       	movw	r30, r22
    582c:	ee 0f       	add	r30, r30
    582e:	ff 1f       	adc	r31, r31
    5830:	e6 54       	subi	r30, 0x46	; 70
    5832:	fa 4f       	sbci	r31, 0xFA	; 250
    5834:	11 82       	std	Z+1, r1	; 0x01
    5836:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5838:	fb 01       	movw	r30, r22
    583a:	ed 54       	subi	r30, 0x4D	; 77
    583c:	fa 4f       	sbci	r31, 0xFA	; 250
    583e:	10 82       	st	Z, r1
		}
	}
}
    5840:	df 91       	pop	r29
    5842:	cf 91       	pop	r28
    5844:	08 95       	ret

00005846 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5846:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    584a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    584e:	3e 96       	adiw	r30, 0x0e	; 14
    5850:	65 91       	lpm	r22, Z+
    5852:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5854:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5858:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    585c:	c8 df       	rcall	.-112    	; 0x57ee <softKey_Set>
	eeprom_UpdateSoftkeys();
    585e:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <eeprom_UpdateSoftkeys>
	return 0;
}
    5862:	80 e0       	ldi	r24, 0x00	; 0
    5864:	08 95       	ret

00005866 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5866:	0f 93       	push	r16
    5868:	1f 93       	push	r17
    586a:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    586c:	c0 e0       	ldi	r28, 0x00	; 0
    586e:	32 c0       	rjmp	.+100    	; 0x58d4 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5870:	0c 2f       	mov	r16, r28
    5872:	10 e0       	ldi	r17, 0x00	; 0
    5874:	f8 01       	movw	r30, r16
    5876:	ee 0f       	add	r30, r30
    5878:	ff 1f       	adc	r31, r31
    587a:	e6 54       	subi	r30, 0x46	; 70
    587c:	fa 4f       	sbci	r31, 0xFA	; 250
    587e:	01 90       	ld	r0, Z+
    5880:	f0 81       	ld	r31, Z
    5882:	e0 2d       	mov	r30, r0
    5884:	30 97       	sbiw	r30, 0x00	; 0
    5886:	31 f0       	breq	.+12     	; 0x5894 <softKeys_toLCD+0x2e>
    5888:	3e 96       	adiw	r30, 0x0e	; 14
    588a:	65 91       	lpm	r22, Z+
    588c:	75 91       	lpm	r23, Z+
    588e:	61 15       	cp	r22, r1
    5890:	71 05       	cpc	r23, r1
    5892:	21 f4       	brne	.+8      	; 0x589c <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5894:	8c 2f       	mov	r24, r28
    5896:	0e 94 2b 3c 	call	0x7856	; 0x7856 <keylabel_clr>
    589a:	1b c0       	rjmp	.+54     	; 0x58d2 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    589c:	8c 2f       	mov	r24, r28
    589e:	0e 94 f0 3b 	call	0x77e0	; 0x77e0 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    58a2:	00 0f       	add	r16, r16
    58a4:	11 1f       	adc	r17, r17
    58a6:	f8 01       	movw	r30, r16
    58a8:	e6 54       	subi	r30, 0x46	; 70
    58aa:	fa 4f       	sbci	r31, 0xFA	; 250
    58ac:	01 90       	ld	r0, Z+
    58ae:	f0 81       	ld	r31, Z
    58b0:	e0 2d       	mov	r30, r0
    58b2:	70 96       	adiw	r30, 0x10	; 16
    58b4:	05 90       	lpm	r0, Z+
    58b6:	f4 91       	lpm	r31, Z
    58b8:	e0 2d       	mov	r30, r0
    58ba:	30 97       	sbiw	r30, 0x00	; 0
    58bc:	51 f0       	breq	.+20     	; 0x58d2 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    58be:	80 e0       	ldi	r24, 0x00	; 0
    58c0:	19 95       	eicall
    58c2:	81 38       	cpi	r24, 0x81	; 129
    58c4:	11 f4       	brne	.+4      	; 0x58ca <softKeys_toLCD+0x64>
    58c6:	6f ef       	ldi	r22, 0xFF	; 255
    58c8:	01 c0       	rjmp	.+2      	; 0x58cc <softKeys_toLCD+0x66>
    58ca:	60 e0       	ldi	r22, 0x00	; 0
    58cc:	8c 2f       	mov	r24, r28
    58ce:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    58d2:	cf 5f       	subi	r28, 0xFF	; 255
    58d4:	c4 30       	cpi	r28, 0x04	; 4
    58d6:	60 f2       	brcs	.-104    	; 0x5870 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    58d8:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
}
    58dc:	cf 91       	pop	r28
    58de:	1f 91       	pop	r17
    58e0:	0f 91       	pop	r16
    58e2:	08 95       	ret

000058e4 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    58e4:	82 30       	cpi	r24, 0x02	; 2
    58e6:	49 f0       	breq	.+18     	; 0x58fa <softKey_MessageKey_ToSoftKeyNr+0x16>
    58e8:	18 f4       	brcc	.+6      	; 0x58f0 <softKey_MessageKey_ToSoftKeyNr+0xc>
    58ea:	81 30       	cpi	r24, 0x01	; 1
    58ec:	51 f0       	breq	.+20     	; 0x5902 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    58ee:	0b c0       	rjmp	.+22     	; 0x5906 <softKey_MessageKey_ToSoftKeyNr+0x22>
    58f0:	83 30       	cpi	r24, 0x03	; 3
    58f2:	59 f0       	breq	.+22     	; 0x590a <softKey_MessageKey_ToSoftKeyNr+0x26>
    58f4:	84 30       	cpi	r24, 0x04	; 4
    58f6:	19 f0       	breq	.+6      	; 0x58fe <softKey_MessageKey_ToSoftKeyNr+0x1a>
    58f8:	06 c0       	rjmp	.+12     	; 0x5906 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    58fa:	80 e0       	ldi	r24, 0x00	; 0
    58fc:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    58fe:	82 e0       	ldi	r24, 0x02	; 2
    5900:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5902:	83 e0       	ldi	r24, 0x03	; 3
    5904:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5906:	8f ef       	ldi	r24, 0xFF	; 255
    5908:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    590a:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    590c:	08 95       	ret

0000590e <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    590e:	0f 93       	push	r16
    5910:	1f 93       	push	r17
    5912:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5914:	84 30       	cpi	r24, 0x04	; 4
    5916:	d0 f5       	brcc	.+116    	; 0x598c <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5918:	e8 2f       	mov	r30, r24
    591a:	f0 e0       	ldi	r31, 0x00	; 0
    591c:	ee 0f       	add	r30, r30
    591e:	ff 1f       	adc	r31, r31
    5920:	e6 54       	subi	r30, 0x46	; 70
    5922:	fa 4f       	sbci	r31, 0xFA	; 250
    5924:	00 81       	ld	r16, Z
    5926:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5928:	01 15       	cp	r16, r1
    592a:	11 05       	cpc	r17, r1
    592c:	89 f1       	breq	.+98     	; 0x5990 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    592e:	f8 01       	movw	r30, r16
    5930:	94 91       	lpm	r25, Z
    5932:	9f 73       	andi	r25, 0x3F	; 63
    5934:	91 30       	cpi	r25, 0x01	; 1
    5936:	71 f5       	brne	.+92     	; 0x5994 <softKey_Execute+0x86>
    5938:	31 96       	adiw	r30, 0x01	; 1
    593a:	94 91       	lpm	r25, Z
    593c:	94 ff       	sbrs	r25, 4
    593e:	2c c0       	rjmp	.+88     	; 0x5998 <softKey_Execute+0x8a>
    5940:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5942:	3f 96       	adiw	r30, 0x0f	; 15
    5944:	05 90       	lpm	r0, Z+
    5946:	f4 91       	lpm	r31, Z
    5948:	e0 2d       	mov	r30, r0
    594a:	30 97       	sbiw	r30, 0x00	; 0
    594c:	89 f0       	breq	.+34     	; 0x5970 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    594e:	86 2f       	mov	r24, r22
    5950:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5952:	82 38       	cpi	r24, 0x82	; 130
    5954:	29 f4       	brne	.+10     	; 0x5960 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5956:	60 e0       	ldi	r22, 0x00	; 0
    5958:	8c 2f       	mov	r24, r28
    595a:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <keylabel_statcheck>
    595e:	06 c0       	rjmp	.+12     	; 0x596c <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5960:	81 38       	cpi	r24, 0x81	; 129
    5962:	21 f4       	brne	.+8      	; 0x596c <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5964:	6f ef       	ldi	r22, 0xFF	; 255
    5966:	8c 2f       	mov	r24, r28
    5968:	0e 94 5e 3c 	call	0x78bc	; 0x78bc <keylabel_statcheck>
					}
					keylabel_toLCD();
    596c:	0e 94 3f 3c 	call	0x787e	; 0x787e <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5970:	f8 01       	movw	r30, r16
    5972:	3c 96       	adiw	r30, 0x0c	; 12
    5974:	85 91       	lpm	r24, Z+
    5976:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5978:	00 97       	sbiw	r24, 0x00	; 0
    597a:	81 f0       	breq	.+32     	; 0x599c <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    597c:	b8 01       	movw	r22, r16
    597e:	6e 5f       	subi	r22, 0xFE	; 254
    5980:	7f 4f       	sbci	r23, 0xFF	; 255
    5982:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <menu_Init>
					menu_InitLCD(); //display menu
    5986:	04 da       	rcall	.-3064   	; 0x4d90 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5988:	80 e0       	ldi	r24, 0x00	; 0
    598a:	09 c0       	rjmp	.+18     	; 0x599e <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    598c:	8f ef       	ldi	r24, 0xFF	; 255
    598e:	07 c0       	rjmp	.+14     	; 0x599e <softKey_Execute+0x90>
    5990:	8f ef       	ldi	r24, 0xFF	; 255
    5992:	05 c0       	rjmp	.+10     	; 0x599e <softKey_Execute+0x90>
    5994:	8f ef       	ldi	r24, 0xFF	; 255
    5996:	03 c0       	rjmp	.+6      	; 0x599e <softKey_Execute+0x90>
    5998:	8f ef       	ldi	r24, 0xFF	; 255
    599a:	01 c0       	rjmp	.+2      	; 0x599e <softKey_Execute+0x90>
    599c:	8f ef       	ldi	r24, 0xFF	; 255
}
    599e:	cf 91       	pop	r28
    59a0:	1f 91       	pop	r17
    59a2:	0f 91       	pop	r16
    59a4:	08 95       	ret

000059a6 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    59a6:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    59a8:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    59ac:	8c e0       	ldi	r24, 0x0C	; 12
    59ae:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    59b2:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    59b6:	84 ff       	sbrs	r24, 4
    59b8:	02 c0       	rjmp	.+4      	; 0x59be <menu_showPowerState+0x18>
    59ba:	80 e2       	ldi	r24, 0x20	; 32
    59bc:	01 c0       	rjmp	.+2      	; 0x59c0 <menu_showPowerState+0x1a>
    59be:	89 e0       	ldi	r24, 0x09	; 9
    59c0:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
	lcd_goto(saveCursor);
    59c4:	8c 2f       	mov	r24, r28
    59c6:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>

    59ca:	cf 91       	pop	r28
    59cc:	08 95       	ret

000059ce <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    59ce:	85 b1       	in	r24, 0x05	; 5
    59d0:	80 64       	ori	r24, 0x40	; 64
    59d2:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    59d4:	83 e1       	ldi	r24, 0x13	; 19
    59d6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    59da:	e5 df       	rcall	.-54     	; 0x59a6 <menu_showPowerState>
	return 0;
}
    59dc:	80 e0       	ldi	r24, 0x00	; 0
    59de:	08 95       	ret

000059e0 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    59e0:	85 b1       	in	r24, 0x05	; 5
    59e2:	8f 7b       	andi	r24, 0xBF	; 191
    59e4:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    59e6:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    59ea:	dd df       	rcall	.-70     	; 0x59a6 <menu_showPowerState>
	return 0;
}
    59ec:	80 e0       	ldi	r24, 0x00	; 0
    59ee:	08 95       	ret

000059f0 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    59f0:	85 b1       	in	r24, 0x05	; 5
    59f2:	8f 7b       	andi	r24, 0xBF	; 191
    59f4:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    59f6:	81 e0       	ldi	r24, 0x01	; 1
    59f8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    59fc:	d4 df       	rcall	.-88     	; 0x59a6 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    59fe:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5a00:	f8 94       	cli
    5a02:	81 e0       	ldi	r24, 0x01	; 1
    5a04:	06 c0       	rjmp	.+12     	; 0x5a12 <menuOnEnterPwrRest+0x22>
    5a06:	ef e2       	ldi	r30, 0x2F	; 47
    5a08:	f2 e0       	ldi	r31, 0x02	; 2
    5a0a:	88 e2       	ldi	r24, 0x28	; 40
    5a0c:	82 83       	std	Z+2, r24	; 0x02
    5a0e:	13 82       	std	Z+3, r1	; 0x03
    5a10:	80 e0       	ldi	r24, 0x00	; 0
    5a12:	81 11       	cpse	r24, r1
    5a14:	f8 cf       	rjmp	.-16     	; 0x5a06 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5a16:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5a18:	08 95       	ret

00005a1a <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5a1a:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    5a1e:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    5a22:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    5a26:	08 95       	ret

00005a28 <message_push>:
    5a28:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    5a2c:	e9 2f       	mov	r30, r25
    5a2e:	f0 e0       	ldi	r31, 0x00	; 0
    5a30:	ed 52       	subi	r30, 0x2D	; 45
    5a32:	f8 4f       	sbci	r31, 0xF8	; 248
    5a34:	80 83       	st	Z, r24
    5a36:	9f 5f       	subi	r25, 0xFF	; 255
    5a38:	9f 71       	andi	r25, 0x1F	; 31
    5a3a:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    5a3e:	98 13       	cpse	r25, r24
    5a40:	04 c0       	rjmp	.+8      	; 0x5a4a <message_push+0x22>
    5a42:	8f ef       	ldi	r24, 0xFF	; 255
    5a44:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    5a48:	08 95       	ret
    5a4a:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    5a4e:	08 95       	ret

00005a50 <message_get>:
    5a50:	4f b7       	in	r20, 0x3f	; 63
    5a52:	f8 94       	cli
    5a54:	21 e0       	ldi	r18, 0x01	; 1
    5a56:	11 c0       	rjmp	.+34     	; 0x5a7a <message_get+0x2a>
    5a58:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    5a5c:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    5a60:	8f ef       	ldi	r24, 0xFF	; 255
    5a62:	20 e0       	ldi	r18, 0x00	; 0
    5a64:	93 17       	cp	r25, r19
    5a66:	49 f0       	breq	.+18     	; 0x5a7a <message_get+0x2a>
    5a68:	e9 2f       	mov	r30, r25
    5a6a:	f0 e0       	ldi	r31, 0x00	; 0
    5a6c:	ed 52       	subi	r30, 0x2D	; 45
    5a6e:	f8 4f       	sbci	r31, 0xF8	; 248
    5a70:	80 81       	ld	r24, Z
    5a72:	9f 5f       	subi	r25, 0xFF	; 255
    5a74:	9f 71       	andi	r25, 0x1F	; 31
    5a76:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    5a7a:	21 11       	cpse	r18, r1
    5a7c:	ed cf       	rjmp	.-38     	; 0x5a58 <message_get+0x8>
    5a7e:	4f bf       	out	0x3f, r20	; 63
    5a80:	08 95       	ret

00005a82 <message_status>:
    5a82:	4f b7       	in	r20, 0x3f	; 63
    5a84:	f8 94       	cli
    5a86:	91 e0       	ldi	r25, 0x01	; 1
    5a88:	08 c0       	rjmp	.+16     	; 0x5a9a <message_status+0x18>
    5a8a:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    5a8e:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	80 e0       	ldi	r24, 0x00	; 0
    5a96:	32 17       	cp	r19, r18
    5a98:	11 f0       	breq	.+4      	; 0x5a9e <message_status+0x1c>
    5a9a:	8f ef       	ldi	r24, 0xFF	; 255
    5a9c:	01 c0       	rjmp	.+2      	; 0x5aa0 <message_status+0x1e>
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	91 11       	cpse	r25, r1
    5aa2:	f3 cf       	rjmp	.-26     	; 0x5a8a <message_status+0x8>
    5aa4:	4f bf       	out	0x3f, r20	; 63
    5aa6:	08 95       	ret

00005aa8 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5aa8:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5aaa:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    5aae:	99 23       	and	r25, r25
    5ab0:	e1 f0       	breq	.+56     	; 0x5aea <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5ab2:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5ab6:	21 e0       	ldi	r18, 0x01	; 1
    5ab8:	29 0f       	add	r18, r25
    5aba:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    5abe:	e9 2f       	mov	r30, r25
    5ac0:	f0 e0       	ldi	r31, 0x00	; 0
    5ac2:	ee 0f       	add	r30, r30
    5ac4:	ff 1f       	adc	r31, r31
    5ac6:	e0 53       	subi	r30, 0x30	; 48
    5ac8:	fa 4f       	sbci	r31, 0xFA	; 250
    5aca:	51 83       	std	Z+1, r21	; 0x01
    5acc:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5ace:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5ad2:	28 13       	cpse	r18, r24
    5ad4:	0a c0       	rjmp	.+20     	; 0x5aea <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5ad6:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5ada:	9f 3f       	cpi	r25, 0xFF	; 255
    5adc:	19 f4       	brne	.+6      	; 0x5ae4 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5ade:	8f ef       	ldi	r24, 0xFF	; 255
    5ae0:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5ae4:	8f ef       	ldi	r24, 0xFF	; 255
    5ae6:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    5aea:	08 95       	ret

00005aec <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5aec:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5af0:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5af4:	e8 13       	cpse	r30, r24
    5af6:	03 c0       	rjmp	.+6      	; 0x5afe <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5af8:	8f ef       	ldi	r24, 0xFF	; 255
    5afa:	9f ef       	ldi	r25, 0xFF	; 255
    5afc:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5afe:	81 e0       	ldi	r24, 0x01	; 1
    5b00:	8e 0f       	add	r24, r30
    5b02:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    5b06:	f0 e0       	ldi	r31, 0x00	; 0
    5b08:	ee 0f       	add	r30, r30
    5b0a:	ff 1f       	adc	r31, r31
    5b0c:	e0 53       	subi	r30, 0x30	; 48
    5b0e:	fa 4f       	sbci	r31, 0xFA	; 250
    5b10:	80 81       	ld	r24, Z
    5b12:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5b14:	08 95       	ret

00005b16 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5b16:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5b1a:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5b1e:	98 13       	cpse	r25, r24
    5b20:	02 c0       	rjmp	.+4      	; 0x5b26 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5b22:	80 e0       	ldi	r24, 0x00	; 0
    5b24:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5b26:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5b28:	08 95       	ret

00005b2a <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5b2a:	80 e0       	ldi	r24, 0x00	; 0
    5b2c:	e1 e1       	ldi	r30, 0x11	; 17
    5b2e:	f8 e0       	ldi	r31, 0x08	; 8
    5b30:	03 c0       	rjmp	.+6      	; 0x5b38 <midi_CouplerReset+0xe>
    5b32:	10 82       	st	Z, r1
    5b34:	8f 5f       	subi	r24, 0xFF	; 255
    5b36:	31 96       	adiw	r30, 0x01	; 1
    5b38:	8c 30       	cpi	r24, 0x0C	; 12
    5b3a:	d8 f3       	brcs	.-10     	; 0x5b32 <midi_CouplerReset+0x8>
    5b3c:	08 95       	ret

00005b3e <init_Midi>:
    5b3e:	f5 df       	rcall	.-22     	; 0x5b2a <midi_CouplerReset>
    5b40:	8f ef       	ldi	r24, 0xFF	; 255
    5b42:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5b46:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    5b4a:	08 95       	ret

00005b4c <set_Coupler>:
    5b4c:	8c 30       	cpi	r24, 0x0C	; 12
    5b4e:	e8 f4       	brcc	.+58     	; 0x5b8a <set_Coupler+0x3e>
    5b50:	e8 2f       	mov	r30, r24
    5b52:	f0 e0       	ldi	r31, 0x00	; 0
    5b54:	ef 5e       	subi	r30, 0xEF	; 239
    5b56:	f7 4f       	sbci	r31, 0xF7	; 247
    5b58:	9f ef       	ldi	r25, 0xFF	; 255
    5b5a:	90 83       	st	Z, r25
    5b5c:	86 30       	cpi	r24, 0x06	; 6
    5b5e:	10 f0       	brcs	.+4      	; 0x5b64 <set_Coupler+0x18>
    5b60:	86 50       	subi	r24, 0x06	; 6
    5b62:	01 c0       	rjmp	.+2      	; 0x5b66 <set_Coupler+0x1a>
    5b64:	8a 5f       	subi	r24, 0xFA	; 250
    5b66:	e8 2f       	mov	r30, r24
    5b68:	f0 e0       	ldi	r31, 0x00	; 0
    5b6a:	df 01       	movw	r26, r30
    5b6c:	af 5e       	subi	r26, 0xEF	; 239
    5b6e:	b7 4f       	sbci	r27, 0xF7	; 247
    5b70:	8c 91       	ld	r24, X
    5b72:	88 23       	and	r24, r24
    5b74:	59 f0       	breq	.+22     	; 0x5b8c <set_Coupler+0x40>
    5b76:	df 01       	movw	r26, r30
    5b78:	af 5e       	subi	r26, 0xEF	; 239
    5b7a:	b7 4f       	sbci	r27, 0xF7	; 247
    5b7c:	1c 92       	st	X, r1
    5b7e:	ee 0f       	add	r30, r30
    5b80:	ff 1f       	adc	r31, r31
    5b82:	ec 55       	subi	r30, 0x5C	; 92
    5b84:	fd 4e       	sbci	r31, 0xED	; 237
    5b86:	84 91       	lpm	r24, Z
    5b88:	08 95       	ret
    5b8a:	80 e0       	ldi	r24, 0x00	; 0
    5b8c:	08 95       	ret

00005b8e <getAllCouplers>:
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	4b e0       	ldi	r20, 0x0B	; 11
    5b94:	01 c0       	rjmp	.+2      	; 0x5b98 <getAllCouplers+0xa>
    5b96:	42 2f       	mov	r20, r18
    5b98:	28 2f       	mov	r18, r24
    5b9a:	39 2f       	mov	r19, r25
    5b9c:	22 0f       	add	r18, r18
    5b9e:	33 1f       	adc	r19, r19
    5ba0:	82 2f       	mov	r24, r18
    5ba2:	93 2f       	mov	r25, r19
    5ba4:	e4 2f       	mov	r30, r20
    5ba6:	f0 e0       	ldi	r31, 0x00	; 0
    5ba8:	ef 5e       	subi	r30, 0xEF	; 239
    5baa:	f7 4f       	sbci	r31, 0xF7	; 247
    5bac:	50 81       	ld	r21, Z
    5bae:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb0:	09 f4       	brne	.+2      	; 0x5bb4 <getAllCouplers+0x26>
    5bb2:	81 60       	ori	r24, 0x01	; 1
    5bb4:	2f ef       	ldi	r18, 0xFF	; 255
    5bb6:	24 0f       	add	r18, r20
    5bb8:	41 11       	cpse	r20, r1
    5bba:	ed cf       	rjmp	.-38     	; 0x5b96 <getAllCouplers+0x8>
    5bbc:	08 95       	ret

00005bbe <setAllCouplers>:
    5bbe:	40 e0       	ldi	r20, 0x00	; 0
    5bc0:	80 ff       	sbrs	r24, 0
    5bc2:	07 c0       	rjmp	.+14     	; 0x5bd2 <setAllCouplers+0x14>
    5bc4:	e4 2f       	mov	r30, r20
    5bc6:	f0 e0       	ldi	r31, 0x00	; 0
    5bc8:	ef 5e       	subi	r30, 0xEF	; 239
    5bca:	f7 4f       	sbci	r31, 0xF7	; 247
    5bcc:	2f ef       	ldi	r18, 0xFF	; 255
    5bce:	20 83       	st	Z, r18
    5bd0:	05 c0       	rjmp	.+10     	; 0x5bdc <setAllCouplers+0x1e>
    5bd2:	e4 2f       	mov	r30, r20
    5bd4:	f0 e0       	ldi	r31, 0x00	; 0
    5bd6:	ef 5e       	subi	r30, 0xEF	; 239
    5bd8:	f7 4f       	sbci	r31, 0xF7	; 247
    5bda:	10 82       	st	Z, r1
    5bdc:	28 2f       	mov	r18, r24
    5bde:	39 2f       	mov	r19, r25
    5be0:	36 95       	lsr	r19
    5be2:	27 95       	ror	r18
    5be4:	82 2f       	mov	r24, r18
    5be6:	93 2f       	mov	r25, r19
    5be8:	4f 5f       	subi	r20, 0xFF	; 255
    5bea:	4c 30       	cpi	r20, 0x0C	; 12
    5bec:	48 f3       	brcs	.-46     	; 0x5bc0 <setAllCouplers+0x2>
    5bee:	08 95       	ret

00005bf0 <midiAllReset>:
    5bf0:	80 e8       	ldi	r24, 0x80	; 128
    5bf2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    5bf6:	0c 94 cd 0d 	jmp	0x1b9a	; 0x1b9a <init_Pipe>
    5bfa:	08 95       	ret

00005bfc <registers_CalcCount>:
    5bfc:	20 e0       	ldi	r18, 0x00	; 0
    5bfe:	30 e0       	ldi	r19, 0x00	; 0
    5c00:	12 c0       	rjmp	.+36     	; 0x5c26 <registers_CalcCount+0x2a>
    5c02:	82 2f       	mov	r24, r18
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	fc 01       	movw	r30, r24
    5c08:	ee 0f       	add	r30, r30
    5c0a:	ff 1f       	adc	r31, r31
    5c0c:	8e 0f       	add	r24, r30
    5c0e:	9f 1f       	adc	r25, r31
    5c10:	fc 01       	movw	r30, r24
    5c12:	e9 50       	subi	r30, 0x09	; 9
    5c14:	f8 4f       	sbci	r31, 0xF8	; 248
    5c16:	81 81       	ldd	r24, Z+1	; 0x01
    5c18:	8f 3f       	cpi	r24, 0xFF	; 255
    5c1a:	21 f0       	breq	.+8      	; 0x5c24 <registers_CalcCount+0x28>
    5c1c:	83 17       	cp	r24, r19
    5c1e:	10 f0       	brcs	.+4      	; 0x5c24 <registers_CalcCount+0x28>
    5c20:	31 e0       	ldi	r19, 0x01	; 1
    5c22:	38 0f       	add	r19, r24
    5c24:	2f 5f       	subi	r18, 0xFF	; 255
    5c26:	28 30       	cpi	r18, 0x08	; 8
    5c28:	60 f3       	brcs	.-40     	; 0x5c02 <registers_CalcCount+0x6>
    5c2a:	30 93 10 08 	sts	0x0810, r19	; 0x800810 <registerCount>
    5c2e:	08 95       	ret

00005c30 <init_Registers>:
    5c30:	8f ef       	ldi	r24, 0xFF	; 255
    5c32:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
    5c36:	20 e0       	ldi	r18, 0x00	; 0
    5c38:	0e c0       	rjmp	.+28     	; 0x5c56 <init_Registers+0x26>
    5c3a:	82 2f       	mov	r24, r18
    5c3c:	90 e0       	ldi	r25, 0x00	; 0
    5c3e:	fc 01       	movw	r30, r24
    5c40:	ee 0f       	add	r30, r30
    5c42:	ff 1f       	adc	r31, r31
    5c44:	e8 0f       	add	r30, r24
    5c46:	f9 1f       	adc	r31, r25
    5c48:	e9 50       	subi	r30, 0x09	; 9
    5c4a:	f8 4f       	sbci	r31, 0xF8	; 248
    5c4c:	8f ef       	ldi	r24, 0xFF	; 255
    5c4e:	80 83       	st	Z, r24
    5c50:	81 83       	std	Z+1, r24	; 0x01
    5c52:	12 82       	std	Z+2, r1	; 0x02
    5c54:	2f 5f       	subi	r18, 0xFF	; 255
    5c56:	28 30       	cpi	r18, 0x08	; 8
    5c58:	80 f3       	brcs	.-32     	; 0x5c3a <init_Registers+0xa>
    5c5a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <eeprom_ReadReg>
    5c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    5c60:	49 f4       	brne	.+18     	; 0x5c74 <init_Registers+0x44>
    5c62:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <registerCount>
    5c66:	40 e0       	ldi	r20, 0x00	; 0
    5c68:	50 e0       	ldi	r21, 0x00	; 0
    5c6a:	65 e0       	ldi	r22, 0x05	; 5
    5c6c:	81 e0       	ldi	r24, 0x01	; 1
    5c6e:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
    5c72:	01 c0       	rjmp	.+2      	; 0x5c76 <init_Registers+0x46>
    5c74:	c3 df       	rcall	.-122    	; 0x5bfc <registers_CalcCount>
    5c76:	0e 94 8a 0b 	call	0x1714	; 0x1714 <eeprom_ReadProg>
    5c7a:	8f 3f       	cpi	r24, 0xFF	; 255
    5c7c:	a1 f5       	brne	.+104    	; 0x5ce6 <init_Registers+0xb6>
    5c7e:	2a c0       	rjmp	.+84     	; 0x5cd4 <init_Registers+0xa4>
    5c80:	83 2f       	mov	r24, r19
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	fc 01       	movw	r30, r24
    5c86:	ee 0f       	add	r30, r30
    5c88:	ff 1f       	adc	r31, r31
    5c8a:	88 0f       	add	r24, r24
    5c8c:	99 1f       	adc	r25, r25
    5c8e:	88 0f       	add	r24, r24
    5c90:	99 1f       	adc	r25, r25
    5c92:	88 0f       	add	r24, r24
    5c94:	99 1f       	adc	r25, r25
    5c96:	e8 0f       	add	r30, r24
    5c98:	f9 1f       	adc	r31, r25
    5c9a:	ec 59       	subi	r30, 0x9C	; 156
    5c9c:	f6 4f       	sbci	r31, 0xF6	; 246
    5c9e:	e2 0f       	add	r30, r18
    5ca0:	f1 1d       	adc	r31, r1
    5ca2:	10 82       	st	Z, r1
    5ca4:	2f 5f       	subi	r18, 0xFF	; 255
    5ca6:	01 c0       	rjmp	.+2      	; 0x5caa <init_Registers+0x7a>
    5ca8:	20 e0       	ldi	r18, 0x00	; 0
    5caa:	28 30       	cpi	r18, 0x08	; 8
    5cac:	48 f3       	brcs	.-46     	; 0x5c80 <init_Registers+0x50>
    5cae:	83 2f       	mov	r24, r19
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	ee 0f       	add	r30, r30
    5cb6:	ff 1f       	adc	r31, r31
    5cb8:	88 0f       	add	r24, r24
    5cba:	99 1f       	adc	r25, r25
    5cbc:	88 0f       	add	r24, r24
    5cbe:	99 1f       	adc	r25, r25
    5cc0:	88 0f       	add	r24, r24
    5cc2:	99 1f       	adc	r25, r25
    5cc4:	e8 0f       	add	r30, r24
    5cc6:	f9 1f       	adc	r31, r25
    5cc8:	ec 59       	subi	r30, 0x9C	; 156
    5cca:	f6 4f       	sbci	r31, 0xF6	; 246
    5ccc:	11 86       	std	Z+9, r1	; 0x09
    5cce:	10 86       	std	Z+8, r1	; 0x08
    5cd0:	3f 5f       	subi	r19, 0xFF	; 255
    5cd2:	01 c0       	rjmp	.+2      	; 0x5cd6 <init_Registers+0xa6>
    5cd4:	30 e0       	ldi	r19, 0x00	; 0
    5cd6:	30 34       	cpi	r19, 0x40	; 64
    5cd8:	38 f3       	brcs	.-50     	; 0x5ca8 <init_Registers+0x78>
    5cda:	40 e0       	ldi	r20, 0x00	; 0
    5cdc:	50 e0       	ldi	r21, 0x00	; 0
    5cde:	66 e0       	ldi	r22, 0x06	; 6
    5ce0:	81 e0       	ldi	r24, 0x01	; 1
    5ce2:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <log_putError>
    5ce6:	08 95       	ret

00005ce8 <regNr_to_moduleBit>:
    5ce8:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5cec:	89 17       	cp	r24, r25
    5cee:	a0 f4       	brcc	.+40     	; 0x5d18 <regNr_to_moduleBit+0x30>
    5cf0:	80 34       	cpi	r24, 0x40	; 64
    5cf2:	90 f4       	brcc	.+36     	; 0x5d18 <regNr_to_moduleBit+0x30>
    5cf4:	28 e0       	ldi	r18, 0x08	; 8
    5cf6:	e7 ef       	ldi	r30, 0xF7	; 247
    5cf8:	f7 e0       	ldi	r31, 0x07	; 7
    5cfa:	30 81       	ld	r19, Z
    5cfc:	83 17       	cp	r24, r19
    5cfe:	48 f0       	brcs	.+18     	; 0x5d12 <regNr_to_moduleBit+0x2a>
    5d00:	91 81       	ldd	r25, Z+1	; 0x01
    5d02:	98 17       	cp	r25, r24
    5d04:	30 f0       	brcs	.+12     	; 0x5d12 <regNr_to_moduleBit+0x2a>
    5d06:	22 81       	ldd	r18, Z+2	; 0x02
    5d08:	98 2f       	mov	r25, r24
    5d0a:	93 1b       	sub	r25, r19
    5d0c:	80 e0       	ldi	r24, 0x00	; 0
    5d0e:	92 0f       	add	r25, r18
    5d10:	08 95       	ret
    5d12:	33 96       	adiw	r30, 0x03	; 3
    5d14:	21 50       	subi	r18, 0x01	; 1
    5d16:	89 f7       	brne	.-30     	; 0x5cfa <regNr_to_moduleBit+0x12>
    5d18:	8f ef       	ldi	r24, 0xFF	; 255
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	08 95       	ret

00005d1e <moduleBit_to_registerNr>:
    5d1e:	90 e0       	ldi	r25, 0x00	; 0
    5d20:	16 c0       	rjmp	.+44     	; 0x5d4e <moduleBit_to_registerNr+0x30>
    5d22:	40 91 f9 07 	lds	r20, 0x07F9	; 0x8007f9 <registerMap+0x2>
    5d26:	84 17       	cp	r24, r20
    5d28:	88 f0       	brcs	.+34     	; 0x5d4c <moduleBit_to_registerNr+0x2e>
    5d2a:	68 2f       	mov	r22, r24
    5d2c:	70 e0       	ldi	r23, 0x00	; 0
    5d2e:	e7 ef       	ldi	r30, 0xF7	; 247
    5d30:	f7 e0       	ldi	r31, 0x07	; 7
    5d32:	21 81       	ldd	r18, Z+1	; 0x01
    5d34:	30 e0       	ldi	r19, 0x00	; 0
    5d36:	24 0f       	add	r18, r20
    5d38:	31 1d       	adc	r19, r1
    5d3a:	50 81       	ld	r21, Z
    5d3c:	25 1b       	sub	r18, r21
    5d3e:	31 09       	sbc	r19, r1
    5d40:	26 17       	cp	r18, r22
    5d42:	37 07       	cpc	r19, r23
    5d44:	1c f0       	brlt	.+6      	; 0x5d4c <moduleBit_to_registerNr+0x2e>
    5d46:	84 1b       	sub	r24, r20
    5d48:	85 0f       	add	r24, r21
    5d4a:	08 95       	ret
    5d4c:	9f 5f       	subi	r25, 0xFF	; 255
    5d4e:	98 30       	cpi	r25, 0x08	; 8
    5d50:	40 f3       	brcs	.-48     	; 0x5d22 <moduleBit_to_registerNr+0x4>
    5d52:	8f ef       	ldi	r24, 0xFF	; 255
    5d54:	08 95       	ret

00005d56 <read_Register>:
    5d56:	cf 93       	push	r28
    5d58:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5d5c:	89 17       	cp	r24, r25
    5d5e:	08 f0       	brcs	.+2      	; 0x5d62 <read_Register+0xc>
    5d60:	3c c0       	rjmp	.+120    	; 0x5dda <read_Register+0x84>
    5d62:	c6 2f       	mov	r28, r22
    5d64:	c1 df       	rcall	.-126    	; 0x5ce8 <regNr_to_moduleBit>
    5d66:	81 11       	cpse	r24, r1
    5d68:	30 c0       	rjmp	.+96     	; 0x5dca <read_Register+0x74>
    5d6a:	29 2f       	mov	r18, r25
    5d6c:	2f 71       	andi	r18, 0x1F	; 31
    5d6e:	92 95       	swap	r25
    5d70:	96 95       	lsr	r25
    5d72:	97 70       	andi	r25, 0x07	; 7
    5d74:	41 e0       	ldi	r20, 0x01	; 1
    5d76:	50 e0       	ldi	r21, 0x00	; 0
    5d78:	02 c0       	rjmp	.+4      	; 0x5d7e <read_Register+0x28>
    5d7a:	44 0f       	add	r20, r20
    5d7c:	55 1f       	adc	r21, r21
    5d7e:	9a 95       	dec	r25
    5d80:	e2 f7       	brpl	.-8      	; 0x5d7a <read_Register+0x24>
    5d82:	30 e0       	ldi	r19, 0x00	; 0
    5d84:	f9 01       	movw	r30, r18
    5d86:	ee 0f       	add	r30, r30
    5d88:	ff 1f       	adc	r31, r31
    5d8a:	ee 0f       	add	r30, r30
    5d8c:	ff 1f       	adc	r31, r31
    5d8e:	ee 0f       	add	r30, r30
    5d90:	ff 1f       	adc	r31, r31
    5d92:	e7 5b       	subi	r30, 0xB7	; 183
    5d94:	fd 4f       	sbci	r31, 0xFD	; 253
    5d96:	91 81       	ldd	r25, Z+1	; 0x01
    5d98:	94 23       	and	r25, r20
    5d9a:	11 f4       	brne	.+4      	; 0x5da0 <read_Register+0x4a>
    5d9c:	c1 fd       	sbrc	r28, 1
    5d9e:	17 c0       	rjmp	.+46     	; 0x5dce <read_Register+0x78>
    5da0:	22 0f       	add	r18, r18
    5da2:	33 1f       	adc	r19, r19
    5da4:	22 0f       	add	r18, r18
    5da6:	33 1f       	adc	r19, r19
    5da8:	22 0f       	add	r18, r18
    5daa:	33 1f       	adc	r19, r19
    5dac:	f9 01       	movw	r30, r18
    5dae:	e7 5b       	subi	r30, 0xB7	; 183
    5db0:	fd 4f       	sbci	r31, 0xFD	; 253
    5db2:	26 81       	ldd	r18, Z+6	; 0x06
    5db4:	42 23       	and	r20, r18
    5db6:	11 f0       	breq	.+4      	; 0x5dbc <read_Register+0x66>
    5db8:	c0 fd       	sbrc	r28, 0
    5dba:	0b c0       	rjmp	.+22     	; 0x5dd2 <read_Register+0x7c>
    5dbc:	99 23       	and	r25, r25
    5dbe:	71 f0       	breq	.+28     	; 0x5ddc <read_Register+0x86>
    5dc0:	44 23       	and	r20, r20
    5dc2:	61 f0       	breq	.+24     	; 0x5ddc <read_Register+0x86>
    5dc4:	c4 30       	cpi	r28, 0x04	; 4
    5dc6:	51 f4       	brne	.+20     	; 0x5ddc <read_Register+0x86>
    5dc8:	06 c0       	rjmp	.+12     	; 0x5dd6 <read_Register+0x80>
    5dca:	80 e0       	ldi	r24, 0x00	; 0
    5dcc:	07 c0       	rjmp	.+14     	; 0x5ddc <read_Register+0x86>
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	05 c0       	rjmp	.+10     	; 0x5ddc <read_Register+0x86>
    5dd2:	81 e0       	ldi	r24, 0x01	; 1
    5dd4:	03 c0       	rjmp	.+6      	; 0x5ddc <read_Register+0x86>
    5dd6:	81 e0       	ldi	r24, 0x01	; 1
    5dd8:	01 c0       	rjmp	.+2      	; 0x5ddc <read_Register+0x86>
    5dda:	80 e0       	ldi	r24, 0x00	; 0
    5ddc:	cf 91       	pop	r28
    5dde:	08 95       	ret

00005de0 <get_RegisterStatus>:
    5de0:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5de4:	89 17       	cp	r24, r25
    5de6:	78 f5       	brcc	.+94     	; 0x5e46 <get_RegisterStatus+0x66>
    5de8:	7f df       	rcall	.-258    	; 0x5ce8 <regNr_to_moduleBit>
    5dea:	81 11       	cpse	r24, r1
    5dec:	28 c0       	rjmp	.+80     	; 0x5e3e <get_RegisterStatus+0x5e>
    5dee:	29 2f       	mov	r18, r25
    5df0:	2f 71       	andi	r18, 0x1F	; 31
    5df2:	39 2f       	mov	r19, r25
    5df4:	32 95       	swap	r19
    5df6:	36 95       	lsr	r19
    5df8:	37 70       	andi	r19, 0x07	; 7
    5dfa:	81 e0       	ldi	r24, 0x01	; 1
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	02 c0       	rjmp	.+4      	; 0x5e04 <get_RegisterStatus+0x24>
    5e00:	88 0f       	add	r24, r24
    5e02:	99 1f       	adc	r25, r25
    5e04:	3a 95       	dec	r19
    5e06:	e2 f7       	brpl	.-8      	; 0x5e00 <get_RegisterStatus+0x20>
    5e08:	30 e0       	ldi	r19, 0x00	; 0
    5e0a:	f9 01       	movw	r30, r18
    5e0c:	ee 0f       	add	r30, r30
    5e0e:	ff 1f       	adc	r31, r31
    5e10:	ee 0f       	add	r30, r30
    5e12:	ff 1f       	adc	r31, r31
    5e14:	ee 0f       	add	r30, r30
    5e16:	ff 1f       	adc	r31, r31
    5e18:	e7 5b       	subi	r30, 0xB7	; 183
    5e1a:	fd 4f       	sbci	r31, 0xFD	; 253
    5e1c:	41 81       	ldd	r20, Z+1	; 0x01
    5e1e:	48 23       	and	r20, r24
    5e20:	81 f0       	breq	.+32     	; 0x5e42 <get_RegisterStatus+0x62>
    5e22:	22 0f       	add	r18, r18
    5e24:	33 1f       	adc	r19, r19
    5e26:	22 0f       	add	r18, r18
    5e28:	33 1f       	adc	r19, r19
    5e2a:	22 0f       	add	r18, r18
    5e2c:	33 1f       	adc	r19, r19
    5e2e:	f9 01       	movw	r30, r18
    5e30:	e7 5b       	subi	r30, 0xB7	; 183
    5e32:	fd 4f       	sbci	r31, 0xFD	; 253
    5e34:	96 81       	ldd	r25, Z+6	; 0x06
    5e36:	89 23       	and	r24, r25
    5e38:	39 f0       	breq	.+14     	; 0x5e48 <get_RegisterStatus+0x68>
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	08 95       	ret
    5e3e:	80 e0       	ldi	r24, 0x00	; 0
    5e40:	08 95       	ret
    5e42:	82 e0       	ldi	r24, 0x02	; 2
    5e44:	08 95       	ret
    5e46:	80 e0       	ldi	r24, 0x00	; 0
    5e48:	08 95       	ret

00005e4a <count_Registers>:
    5e4a:	1f 93       	push	r17
    5e4c:	cf 93       	push	r28
    5e4e:	df 93       	push	r29
    5e50:	18 2f       	mov	r17, r24
    5e52:	c0 e0       	ldi	r28, 0x00	; 0
    5e54:	d0 e0       	ldi	r29, 0x00	; 0
    5e56:	06 c0       	rjmp	.+12     	; 0x5e64 <count_Registers+0x1a>
    5e58:	61 2f       	mov	r22, r17
    5e5a:	8c 2f       	mov	r24, r28
    5e5c:	7c df       	rcall	.-264    	; 0x5d56 <read_Register>
    5e5e:	81 11       	cpse	r24, r1
    5e60:	df 5f       	subi	r29, 0xFF	; 255
    5e62:	cf 5f       	subi	r28, 0xFF	; 255
    5e64:	c0 34       	cpi	r28, 0x40	; 64
    5e66:	c0 f3       	brcs	.-16     	; 0x5e58 <count_Registers+0xe>
    5e68:	8d 2f       	mov	r24, r29
    5e6a:	df 91       	pop	r29
    5e6c:	cf 91       	pop	r28
    5e6e:	1f 91       	pop	r17
    5e70:	08 95       	ret

00005e72 <read_allRegister>:
    5e72:	ef 92       	push	r14
    5e74:	ff 92       	push	r15
    5e76:	0f 93       	push	r16
    5e78:	1f 93       	push	r17
    5e7a:	cf 93       	push	r28
    5e7c:	df 93       	push	r29
    5e7e:	7c 01       	movw	r14, r24
    5e80:	c0 e0       	ldi	r28, 0x00	; 0
    5e82:	d0 e0       	ldi	r29, 0x00	; 0
    5e84:	00 e0       	ldi	r16, 0x00	; 0
    5e86:	17 c0       	rjmp	.+46     	; 0x5eb6 <read_allRegister+0x44>
    5e88:	1c 2f       	mov	r17, r28
    5e8a:	17 70       	andi	r17, 0x07	; 7
    5e8c:	09 f4       	brne	.+2      	; 0x5e90 <read_allRegister+0x1e>
    5e8e:	d0 e0       	ldi	r29, 0x00	; 0
    5e90:	d6 95       	lsr	r29
    5e92:	63 e0       	ldi	r22, 0x03	; 3
    5e94:	8c 2f       	mov	r24, r28
    5e96:	5f df       	rcall	.-322    	; 0x5d56 <read_Register>
    5e98:	88 23       	and	r24, r24
    5e9a:	11 f0       	breq	.+4      	; 0x5ea0 <read_allRegister+0x2e>
    5e9c:	d0 68       	ori	r29, 0x80	; 128
    5e9e:	0f 5f       	subi	r16, 0xFF	; 255
    5ea0:	17 30       	cpi	r17, 0x07	; 7
    5ea2:	41 f4       	brne	.+16     	; 0x5eb4 <read_allRegister+0x42>
    5ea4:	e1 14       	cp	r14, r1
    5ea6:	f1 04       	cpc	r15, r1
    5ea8:	29 f0       	breq	.+10     	; 0x5eb4 <read_allRegister+0x42>
    5eaa:	f7 01       	movw	r30, r14
    5eac:	d0 83       	st	Z, r29
    5eae:	c7 01       	movw	r24, r14
    5eb0:	01 96       	adiw	r24, 0x01	; 1
    5eb2:	7c 01       	movw	r14, r24
    5eb4:	cf 5f       	subi	r28, 0xFF	; 255
    5eb6:	c0 34       	cpi	r28, 0x40	; 64
    5eb8:	38 f3       	brcs	.-50     	; 0x5e88 <read_allRegister+0x16>
    5eba:	80 2f       	mov	r24, r16
    5ebc:	df 91       	pop	r29
    5ebe:	cf 91       	pop	r28
    5ec0:	1f 91       	pop	r17
    5ec2:	0f 91       	pop	r16
    5ec4:	ff 90       	pop	r15
    5ec6:	ef 90       	pop	r14
    5ec8:	08 95       	ret

00005eca <register_onOff>:
    5eca:	cf 93       	push	r28
    5ecc:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5ed0:	89 17       	cp	r24, r25
    5ed2:	f0 f4       	brcc	.+60     	; 0x5f10 <register_onOff+0x46>
    5ed4:	c6 2f       	mov	r28, r22
    5ed6:	08 df       	rcall	.-496    	; 0x5ce8 <regNr_to_moduleBit>
    5ed8:	81 11       	cpse	r24, r1
    5eda:	1a c0       	rjmp	.+52     	; 0x5f10 <register_onOff+0x46>
    5edc:	89 2f       	mov	r24, r25
    5ede:	8f 71       	andi	r24, 0x1F	; 31
    5ee0:	92 95       	swap	r25
    5ee2:	96 95       	lsr	r25
    5ee4:	97 70       	andi	r25, 0x07	; 7
    5ee6:	c0 ff       	sbrs	r28, 0
    5ee8:	0a c0       	rjmp	.+20     	; 0x5efe <register_onOff+0x34>
    5eea:	61 e0       	ldi	r22, 0x01	; 1
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	02 c0       	rjmp	.+4      	; 0x5ef4 <register_onOff+0x2a>
    5ef0:	66 0f       	add	r22, r22
    5ef2:	77 1f       	adc	r23, r23
    5ef4:	9a 95       	dec	r25
    5ef6:	e2 f7       	brpl	.-8      	; 0x5ef0 <register_onOff+0x26>
    5ef8:	0e 94 ef 11 	call	0x23de	; 0x23de <pipe_on>
    5efc:	09 c0       	rjmp	.+18     	; 0x5f10 <register_onOff+0x46>
    5efe:	61 e0       	ldi	r22, 0x01	; 1
    5f00:	70 e0       	ldi	r23, 0x00	; 0
    5f02:	02 c0       	rjmp	.+4      	; 0x5f08 <register_onOff+0x3e>
    5f04:	66 0f       	add	r22, r22
    5f06:	77 1f       	adc	r23, r23
    5f08:	9a 95       	dec	r25
    5f0a:	e2 f7       	brpl	.-8      	; 0x5f04 <register_onOff+0x3a>
    5f0c:	0e 94 fe 11 	call	0x23fc	; 0x23fc <pipe_off>
    5f10:	cf 91       	pop	r28
    5f12:	08 95       	ret

00005f14 <register_toProgram>:
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5f14:	0f 93       	push	r16
    5f16:	1f 93       	push	r17
    5f18:	cf 93       	push	r28
    5f1a:	df 93       	push	r29
    5f1c:	c8 2f       	mov	r28, r24
    5f1e:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5f20:	80 34       	cpi	r24, 0x40	; 64
    5f22:	90 f4       	brcc	.+36     	; 0x5f48 <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5f24:	28 2f       	mov	r18, r24
    5f26:	30 e0       	ldi	r19, 0x00	; 0
    5f28:	c9 01       	movw	r24, r18
    5f2a:	88 0f       	add	r24, r24
    5f2c:	99 1f       	adc	r25, r25
    5f2e:	22 0f       	add	r18, r18
    5f30:	33 1f       	adc	r19, r19
    5f32:	22 0f       	add	r18, r18
    5f34:	33 1f       	adc	r19, r19
    5f36:	22 0f       	add	r18, r18
    5f38:	33 1f       	adc	r19, r19
    5f3a:	82 0f       	add	r24, r18
    5f3c:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5f3e:	8c 59       	subi	r24, 0x9C	; 156
    5f40:	96 4f       	sbci	r25, 0xF6	; 246
    5f42:	97 df       	rcall	.-210    	; 0x5e72 <read_allRegister>
    5f44:	18 2f       	mov	r17, r24
    5f46:	01 c0       	rjmp	.+2      	; 0x5f4a <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5f48:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5f4a:	d0 e0       	ldi	r29, 0x00	; 0
    5f4c:	20 de       	rcall	.-960    	; 0x5b8e <getAllCouplers>
    5f4e:	9e 01       	movw	r18, r28
    5f50:	22 0f       	add	r18, r18
    5f52:	33 1f       	adc	r19, r19
    5f54:	cc 0f       	add	r28, r28
    5f56:	dd 1f       	adc	r29, r29
    5f58:	cc 0f       	add	r28, r28
    5f5a:	dd 1f       	adc	r29, r29
    5f5c:	cc 0f       	add	r28, r28
    5f5e:	dd 1f       	adc	r29, r29
    5f60:	c2 0f       	add	r28, r18
    5f62:	d3 1f       	adc	r29, r19
    5f64:	cc 59       	subi	r28, 0x9C	; 156
    5f66:	d6 4f       	sbci	r29, 0xF6	; 246
    5f68:	99 87       	std	Y+9, r25	; 0x09
    5f6a:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5f6c:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5f6e:	0e 94 ed 0c 	call	0x19da	; 0x19da <eeprom_UpdateProg>
	}
	return result;
}
    5f72:	81 2f       	mov	r24, r17
    5f74:	df 91       	pop	r29
    5f76:	cf 91       	pop	r28
    5f78:	1f 91       	pop	r17
    5f7a:	0f 91       	pop	r16
    5f7c:	08 95       	ret

00005f7e <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5f7e:	ff 92       	push	r15
    5f80:	0f 93       	push	r16
    5f82:	1f 93       	push	r17
    5f84:	cf 93       	push	r28
    5f86:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	8c 01       	movw	r16, r24
    5f8c:	00 0f       	add	r16, r16
    5f8e:	11 1f       	adc	r17, r17
    5f90:	88 0f       	add	r24, r24
    5f92:	99 1f       	adc	r25, r25
    5f94:	88 0f       	add	r24, r24
    5f96:	99 1f       	adc	r25, r25
    5f98:	88 0f       	add	r24, r24
    5f9a:	99 1f       	adc	r25, r25
    5f9c:	08 0f       	add	r16, r24
    5f9e:	19 1f       	adc	r17, r25
    5fa0:	0c 59       	subi	r16, 0x9C	; 156
    5fa2:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5fa4:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5fa6:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5fa8:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5faa:	15 c0       	rjmp	.+42     	; 0x5fd6 <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5fac:	9c 2f       	mov	r25, r28
    5fae:	97 70       	andi	r25, 0x07	; 7
    5fb0:	21 f4       	brne	.+8      	; 0x5fba <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5fb2:	f8 01       	movw	r30, r16
    5fb4:	d0 81       	ld	r29, Z
    5fb6:	0f 5f       	subi	r16, 0xFF	; 255
    5fb8:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5fba:	8c 2f       	mov	r24, r28
    5fbc:	11 df       	rcall	.-478    	; 0x5de0 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5fbe:	d0 ff       	sbrs	r29, 0
    5fc0:	03 c0       	rjmp	.+6      	; 0x5fc8 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5fc2:	82 30       	cpi	r24, 0x02	; 2
    5fc4:	31 f0       	breq	.+12     	; 0x5fd2 <midi_RegisterMatchProgram+0x54>
    5fc6:	0d c0       	rjmp	.+26     	; 0x5fe2 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5fc8:	82 30       	cpi	r24, 0x02	; 2
    5fca:	69 f0       	breq	.+26     	; 0x5fe6 <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5fcc:	81 30       	cpi	r24, 0x01	; 1
    5fce:	09 f4       	brne	.+2      	; 0x5fd2 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5fd0:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5fd2:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5fd4:	cf 5f       	subi	r28, 0xFF	; 255
    5fd6:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5fda:	c9 17       	cp	r28, r25
    5fdc:	38 f3       	brcs	.-50     	; 0x5fac <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5fde:	8f 2d       	mov	r24, r15
    5fe0:	03 c0       	rjmp	.+6      	; 0x5fe8 <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5fe2:	8f ef       	ldi	r24, 0xFF	; 255
    5fe4:	01 c0       	rjmp	.+2      	; 0x5fe8 <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5fe6:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5fe8:	df 91       	pop	r29
    5fea:	cf 91       	pop	r28
    5fec:	1f 91       	pop	r17
    5fee:	0f 91       	pop	r16
    5ff0:	ff 90       	pop	r15
    5ff2:	08 95       	ret

00005ff4 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5ff4:	90 e0       	ldi	r25, 0x00	; 0
    5ff6:	fc 01       	movw	r30, r24
    5ff8:	ee 0f       	add	r30, r30
    5ffa:	ff 1f       	adc	r31, r31
    5ffc:	88 0f       	add	r24, r24
    5ffe:	99 1f       	adc	r25, r25
    6000:	88 0f       	add	r24, r24
    6002:	99 1f       	adc	r25, r25
    6004:	88 0f       	add	r24, r24
    6006:	99 1f       	adc	r25, r25
    6008:	e8 0f       	add	r30, r24
    600a:	f9 1f       	adc	r31, r25
    600c:	ec 59       	subi	r30, 0x9C	; 156
    600e:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6010:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    6012:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    6014:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6016:	09 c0       	rjmp	.+18     	; 0x602a <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    6018:	39 2f       	mov	r19, r25
    601a:	37 70       	andi	r19, 0x07	; 7
    601c:	11 f4       	brne	.+4      	; 0x6022 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    601e:	20 81       	ld	r18, Z
    6020:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    6022:	20 fd       	sbrc	r18, 0
			result++;
    6024:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    6026:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6028:	9f 5f       	subi	r25, 0xFF	; 255
    602a:	30 91 10 08 	lds	r19, 0x0810	; 0x800810 <registerCount>
    602e:	93 17       	cp	r25, r19
    6030:	98 f3       	brcs	.-26     	; 0x6018 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    6032:	08 95       	ret

00006034 <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    6034:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <prog_Display>
    6038:	98 17       	cp	r25, r24
    603a:	29 f0       	breq	.+10     	; 0x6046 <prog_set+0x12>
		prog_Display = prog;
    603c:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
		prog_UpdDisplay = TRUE;
    6040:	8f ef       	ldi	r24, 0xFF	; 255
    6042:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    6046:	08 95       	ret

00006048 <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    6048:	bf 92       	push	r11
    604a:	cf 92       	push	r12
    604c:	df 92       	push	r13
    604e:	ef 92       	push	r14
    6050:	ff 92       	push	r15
    6052:	0f 93       	push	r16
    6054:	1f 93       	push	r17
    6056:	cf 93       	push	r28
    6058:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    605a:	80 34       	cpi	r24, 0x40	; 64
    605c:	08 f0       	brcs	.+2      	; 0x6060 <program_toRegister+0x18>
    605e:	41 c0       	rjmp	.+130    	; 0x60e2 <program_toRegister+0x9a>
    6060:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    6062:	e8 df       	rcall	.-48     	; 0x6034 <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    6064:	f1 2c       	mov	r15, r1
    6066:	f7 01       	movw	r30, r14
    6068:	ee 0f       	add	r30, r30
    606a:	ff 1f       	adc	r31, r31
    606c:	c7 01       	movw	r24, r14
    606e:	88 0f       	add	r24, r24
    6070:	99 1f       	adc	r25, r25
    6072:	88 0f       	add	r24, r24
    6074:	99 1f       	adc	r25, r25
    6076:	88 0f       	add	r24, r24
    6078:	99 1f       	adc	r25, r25
    607a:	e8 0f       	add	r30, r24
    607c:	f9 1f       	adc	r31, r25
    607e:	ec 59       	subi	r30, 0x9C	; 156
    6080:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6082:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    6084:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    6086:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6088:	18 c0       	rjmp	.+48     	; 0x60ba <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    608a:	6f 01       	movw	r12, r30
    608c:	8f ef       	ldi	r24, 0xFF	; 255
    608e:	c8 1a       	sub	r12, r24
    6090:	d8 0a       	sbc	r13, r24
    6092:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    6094:	d0 e0       	ldi	r29, 0x00	; 0
    6096:	0d c0       	rjmp	.+26     	; 0x60b2 <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    6098:	8c 2f       	mov	r24, r28
    609a:	81 70       	andi	r24, 0x01	; 1
    609c:	c0 fd       	sbrc	r28, 0
					result++;
    609e:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    60a0:	61 e0       	ldi	r22, 0x01	; 1
    60a2:	81 11       	cpse	r24, r1
    60a4:	01 c0       	rjmp	.+2      	; 0x60a8 <program_toRegister+0x60>
    60a6:	60 e0       	ldi	r22, 0x00	; 0
    60a8:	81 2f       	mov	r24, r17
    60aa:	0f df       	rcall	.-482    	; 0x5eca <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    60ac:	c6 95       	lsr	r28
				regNr++;
    60ae:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    60b0:	df 5f       	subi	r29, 0xFF	; 255
    60b2:	d8 30       	cpi	r29, 0x08	; 8
    60b4:	88 f3       	brcs	.-30     	; 0x6098 <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    60b6:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    60b8:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    60ba:	87 e0       	ldi	r24, 0x07	; 7
    60bc:	8b 15       	cp	r24, r11
    60be:	28 f7       	brcc	.-54     	; 0x608a <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    60c0:	f7 01       	movw	r30, r14
    60c2:	ee 0f       	add	r30, r30
    60c4:	ff 1f       	adc	r31, r31
    60c6:	ee 0c       	add	r14, r14
    60c8:	ff 1c       	adc	r15, r15
    60ca:	ee 0c       	add	r14, r14
    60cc:	ff 1c       	adc	r15, r15
    60ce:	ee 0c       	add	r14, r14
    60d0:	ff 1c       	adc	r15, r15
    60d2:	ee 0d       	add	r30, r14
    60d4:	ff 1d       	adc	r31, r15
    60d6:	ec 59       	subi	r30, 0x9C	; 156
    60d8:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    60da:	80 85       	ldd	r24, Z+8	; 0x08
    60dc:	91 85       	ldd	r25, Z+9	; 0x09
    60de:	6f dd       	rcall	.-1314   	; 0x5bbe <setAllCouplers>
    60e0:	01 c0       	rjmp	.+2      	; 0x60e4 <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    60e2:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    60e4:	80 2f       	mov	r24, r16
    60e6:	df 91       	pop	r29
    60e8:	cf 91       	pop	r28
    60ea:	1f 91       	pop	r17
    60ec:	0f 91       	pop	r16
    60ee:	ff 90       	pop	r15
    60f0:	ef 90       	pop	r14
    60f2:	df 90       	pop	r13
    60f4:	cf 90       	pop	r12
    60f6:	bf 90       	pop	r11
    60f8:	08 95       	ret

000060fa <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    60fa:	cf 93       	push	r28
    60fc:	df 93       	push	r29
    60fe:	c8 2f       	mov	r28, r24
    6100:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6102:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <midi_Setting+0x2>
    6106:	81 11       	cpse	r24, r1
    6108:	14 c0       	rjmp	.+40     	; 0x6132 <midi_ProgramChange+0x38>
    610a:	21 c0       	rjmp	.+66     	; 0x614e <midi_ProgramChange+0x54>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    610c:	ec 2f       	mov	r30, r28
    610e:	f0 e0       	ldi	r31, 0x00	; 0
    6110:	ee 0f       	add	r30, r30
    6112:	ff 1f       	adc	r31, r31
    6114:	ee 0f       	add	r30, r30
    6116:	ff 1f       	adc	r31, r31
    6118:	e8 0f       	add	r30, r24
    611a:	f1 1d       	adc	r31, r1
    611c:	ee 0f       	add	r30, r30
    611e:	ff 1f       	adc	r31, r31
    6120:	ee 0f       	add	r30, r30
    6122:	ff 1f       	adc	r31, r31
    6124:	e8 5d       	subi	r30, 0xD8	; 216
    6126:	f7 4f       	sbci	r31, 0xF7	; 247
    6128:	90 81       	ld	r25, Z
    612a:	9f 3f       	cpi	r25, 0xFF	; 255
    612c:	39 f4       	brne	.+14     	; 0x613c <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    612e:	8f 5f       	subi	r24, 0xFF	; 255
    6130:	01 c0       	rjmp	.+2      	; 0x6134 <midi_ProgramChange+0x3a>
    6132:	80 e0       	ldi	r24, 0x00	; 0
    6134:	84 30       	cpi	r24, 0x04	; 4
    6136:	50 f3       	brcs	.-44     	; 0x610c <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    6138:	80 e0       	ldi	r24, 0x00	; 0
    613a:	01 c0       	rjmp	.+2      	; 0x613e <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    613c:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    613e:	8f 3f       	cpi	r24, 0xFF	; 255
    6140:	31 f4       	brne	.+12     	; 0x614e <midi_ProgramChange+0x54>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    6142:	8d 2f       	mov	r24, r29
    6144:	81 df       	rcall	.-254    	; 0x6048 <program_toRegister>
			prog_set(program);
    6146:	8d 2f       	mov	r24, r29
    6148:	75 df       	rcall	.-278    	; 0x6034 <prog_set>
			midiLastProgram = program;
    614a:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    614e:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    6152:	c8 13       	cpse	r28, r24
    6154:	08 c0       	rjmp	.+16     	; 0x6166 <midi_ProgramChange+0x6c>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6156:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    615a:	8f 3f       	cpi	r24, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    615c:	21 f0       	breq	.+8      	; 0x6166 <midi_ProgramChange+0x6c>
    615e:	80 6c       	ori	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    6160:	32 d6       	rcall	.+3172   	; 0x6dc6 <serial1MIDISend>
    6162:	8d 2f       	mov	r24, r29
    6164:	30 d6       	rcall	.+3168   	; 0x6dc6 <serial1MIDISend>
		}
	}
}
    6166:	df 91       	pop	r29
    6168:	cf 91       	pop	r28
    616a:	08 95       	ret

0000616c <midi_resetRegisters>:


void midi_resetRegisters(){
    616c:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    616e:	c0 e0       	ldi	r28, 0x00	; 0
    6170:	06 c0       	rjmp	.+12     	; 0x617e <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    6172:	8f ef       	ldi	r24, 0xFF	; 255
    6174:	5f df       	rcall	.-322    	; 0x6034 <prog_set>
		register_onOff(i,REGISTER_OFF);
    6176:	60 e0       	ldi	r22, 0x00	; 0
    6178:	8c 2f       	mov	r24, r28
    617a:	a7 de       	rcall	.-690    	; 0x5eca <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    617c:	cf 5f       	subi	r28, 0xFF	; 255
    617e:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <registerCount>
    6182:	c8 17       	cp	r28, r24
    6184:	b0 f3       	brcs	.-20     	; 0x6172 <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    6186:	cf 91       	pop	r28
    6188:	08 95       	ret

0000618a <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display != PROGR_NONE) {
    618a:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    618e:	8f 3f       	cpi	r24, 0xFF	; 255
    6190:	c9 f0       	breq	.+50     	; 0x61c4 <prog_toLcd+0x3a>
		lcd_putc('P');
    6192:	80 e5       	ldi	r24, 0x50	; 80
    6194:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc(' ');
    6198:	80 e2       	ldi	r24, 0x20	; 32
    619a:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    619e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    61a2:	86 95       	lsr	r24
    61a4:	86 95       	lsr	r24
    61a6:	86 95       	lsr	r24
    61a8:	87 70       	andi	r24, 0x07	; 7
    61aa:	8f 5b       	subi	r24, 0xBF	; 191
    61ac:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    61b0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    61b4:	87 70       	andi	r24, 0x07	; 7
    61b6:	8f 5c       	subi	r24, 0xCF	; 207
    61b8:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
		lcd_putc(' ');
    61bc:	80 e2       	ldi	r24, 0x20	; 32
    61be:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    61c2:	08 95       	ret
	} else {
		lcd_blank(5);
    61c4:	85 e0       	ldi	r24, 0x05	; 5
    61c6:	0c 94 a4 3b 	jmp	0x7748	; 0x7748 <lcd_blank>
    61ca:	08 95       	ret

000061cc <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    61cc:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    61ce:	e8 e2       	ldi	r30, 0x28	; 40
    61d0:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    61d2:	07 c0       	rjmp	.+14     	; 0x61e2 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    61d4:	8f ef       	ldi	r24, 0xFF	; 255
    61d6:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    61d8:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    61da:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    61dc:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    61de:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    61e0:	91 50       	subi	r25, 0x01	; 1
    61e2:	91 11       	cpse	r25, r1
    61e4:	f7 cf       	rjmp	.-18     	; 0x61d4 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    61e6:	0e 94 84 0a 	call	0x1508	; 0x1508 <eeprom_ReadMidiInMap>
    61ea:	8f 3f       	cpi	r24, 0xFF	; 255
    61ec:	01 f5       	brne	.+64     	; 0x622e <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    61ee:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    61f2:	e8 e2       	ldi	r30, 0x28	; 40
    61f4:	f8 e0       	ldi	r31, 0x08	; 8
    61f6:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    61f8:	84 e2       	ldi	r24, 0x24	; 36
    61fa:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    61fc:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    61fe:	98 e3       	ldi	r25, 0x38	; 56
    6200:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    6202:	21 e0       	ldi	r18, 0x01	; 1
    6204:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    6206:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    6208:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    620a:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    620c:	22 e0       	ldi	r18, 0x02	; 2
    620e:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    6210:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    6212:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6214:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    6216:	93 e0       	ldi	r25, 0x03	; 3
    6218:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    621a:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    621c:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    621e:	8e e1       	ldi	r24, 0x1E	; 30
    6220:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6222:	40 e0       	ldi	r20, 0x00	; 0
    6224:	50 e0       	ldi	r21, 0x00	; 0
    6226:	61 e0       	ldi	r22, 0x01	; 1
    6228:	81 e0       	ldi	r24, 0x01	; 1
    622a:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    622e:	0e 94 08 0b 	call	0x1610	; 0x1610 <eeprom_ReadMidiThrough>
    6232:	8f 3f       	cpi	r24, 0xFF	; 255
    6234:	51 f4       	brne	.+20     	; 0x624a <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    6236:	e6 e2       	ldi	r30, 0x26	; 38
    6238:	f8 e0       	ldi	r31, 0x08	; 8
    623a:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    623c:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    623e:	40 e0       	ldi	r20, 0x00	; 0
    6240:	50 e0       	ldi	r21, 0x00	; 0
    6242:	61 e0       	ldi	r22, 0x01	; 1
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <log_putError>
    624a:	08 95       	ret

0000624c <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    624c:	20 e0       	ldi	r18, 0x00	; 0
    624e:	09 c0       	rjmp	.+18     	; 0x6262 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    6250:	88 0f       	add	r24, r24
    6252:	99 1f       	adc	r25, r25
    6254:	fc 01       	movw	r30, r24
    6256:	e8 5d       	subi	r30, 0xD8	; 216
    6258:	f6 4f       	sbci	r31, 0xF6	; 246
    625a:	8f ef       	ldi	r24, 0xFF	; 255
    625c:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    625e:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6260:	2f 5f       	subi	r18, 0xFF	; 255
    6262:	82 2f       	mov	r24, r18
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	00 97       	sbiw	r24, 0x00	; 0
    6268:	99 f7       	brne	.-26     	; 0x6250 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    626a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <eeprom_ReadMidiOutMap>
    626e:	8f 3f       	cpi	r24, 0xFF	; 255
    6270:	b1 f4       	brne	.+44     	; 0x629e <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6272:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    6276:	e8 e2       	ldi	r30, 0x28	; 40
    6278:	f9 e0       	ldi	r31, 0x09	; 9
    627a:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    627c:	91 e0       	ldi	r25, 0x01	; 1
    627e:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    6280:	92 e0       	ldi	r25, 0x02	; 2
    6282:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    6284:	93 e0       	ldi	r25, 0x03	; 3
    6286:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    6288:	e0 e3       	ldi	r30, 0x30	; 48
    628a:	f9 e0       	ldi	r31, 0x09	; 9
    628c:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    628e:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    6290:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    6292:	40 e0       	ldi	r20, 0x00	; 0
    6294:	50 e0       	ldi	r21, 0x00	; 0
    6296:	62 e0       	ldi	r22, 0x02	; 2
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	0c 94 3f 15 	jmp	0x2a7e	; 0x2a7e <log_putError>
    629e:	08 95       	ret

000062a0 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    62a0:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    62a2:	8f ef       	ldi	r24, 0xFF	; 255
    62a4:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    62a6:	e4 30       	cpi	r30, 0x04	; 4
    62a8:	50 f4       	brcc	.+20     	; 0x62be <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    62aa:	f0 e0       	ldi	r31, 0x00	; 0
    62ac:	ee 0f       	add	r30, r30
    62ae:	ff 1f       	adc	r31, r31
    62b0:	e8 5d       	subi	r30, 0xD8	; 216
    62b2:	f6 4f       	sbci	r31, 0xF6	; 246
    62b4:	20 81       	ld	r18, Z
    62b6:	2f 3f       	cpi	r18, 0xFF	; 255
    62b8:	11 f0       	breq	.+4      	; 0x62be <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    62ba:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    62bc:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    62be:	08 95       	ret

000062c0 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    62c0:	70 e0       	ldi	r23, 0x00	; 0
    62c2:	52 c0       	rjmp	.+164    	; 0x6368 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    62c4:	87 2f       	mov	r24, r23
    62c6:	90 e0       	ldi	r25, 0x00	; 0
    62c8:	24 2f       	mov	r18, r20
    62ca:	30 e0       	ldi	r19, 0x00	; 0
    62cc:	f9 01       	movw	r30, r18
    62ce:	ee 0f       	add	r30, r30
    62d0:	ff 1f       	adc	r31, r31
    62d2:	df 01       	movw	r26, r30
    62d4:	a2 0f       	add	r26, r18
    62d6:	b3 1f       	adc	r27, r19
    62d8:	fc 01       	movw	r30, r24
    62da:	ee 0f       	add	r30, r30
    62dc:	ff 1f       	adc	r31, r31
    62de:	e8 0f       	add	r30, r24
    62e0:	f9 1f       	adc	r31, r25
    62e2:	ee 0f       	add	r30, r30
    62e4:	ff 1f       	adc	r31, r31
    62e6:	ee 0f       	add	r30, r30
    62e8:	ff 1f       	adc	r31, r31
    62ea:	ea 0f       	add	r30, r26
    62ec:	fb 1f       	adc	r31, r27
    62ee:	ec 5c       	subi	r30, 0xCC	; 204
    62f0:	f6 4f       	sbci	r31, 0xF6	; 246
    62f2:	a0 81       	ld	r26, Z
    62f4:	af 3f       	cpi	r26, 0xFF	; 255
    62f6:	d9 f0       	breq	.+54     	; 0x632e <Midi_updateManualRange+0x6e>
    62f8:	f9 01       	movw	r30, r18
    62fa:	ee 0f       	add	r30, r30
    62fc:	ff 1f       	adc	r31, r31
    62fe:	e2 0f       	add	r30, r18
    6300:	f3 1f       	adc	r31, r19
    6302:	9c 01       	movw	r18, r24
    6304:	22 0f       	add	r18, r18
    6306:	33 1f       	adc	r19, r19
    6308:	28 0f       	add	r18, r24
    630a:	39 1f       	adc	r19, r25
    630c:	22 0f       	add	r18, r18
    630e:	33 1f       	adc	r19, r19
    6310:	22 0f       	add	r18, r18
    6312:	33 1f       	adc	r19, r19
    6314:	e2 0f       	add	r30, r18
    6316:	f3 1f       	adc	r31, r19
    6318:	ec 5c       	subi	r30, 0xCC	; 204
    631a:	f6 4f       	sbci	r31, 0xF6	; 246
    631c:	21 81       	ldd	r18, Z+1	; 0x01
    631e:	2f 3f       	cpi	r18, 0xFF	; 255
    6320:	31 f0       	breq	.+12     	; 0x632e <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6322:	a6 17       	cp	r26, r22
    6324:	08 f4       	brcc	.+2      	; 0x6328 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    6326:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    6328:	52 17       	cp	r21, r18
    632a:	08 f4       	brcc	.+2      	; 0x632e <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    632c:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    632e:	55 23       	and	r21, r21
    6330:	11 f0       	breq	.+4      	; 0x6336 <Midi_updateManualRange+0x76>
    6332:	6f 3f       	cpi	r22, 0xFF	; 255
    6334:	49 f4       	brne	.+18     	; 0x6348 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    6336:	88 0f       	add	r24, r24
    6338:	99 1f       	adc	r25, r25
    633a:	fc 01       	movw	r30, r24
    633c:	e2 5e       	subi	r30, 0xE2	; 226
    633e:	f7 4f       	sbci	r31, 0xF7	; 247
    6340:	8f ef       	ldi	r24, 0xFF	; 255
    6342:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    6344:	81 83       	std	Z+1, r24	; 0x01
    6346:	07 c0       	rjmp	.+14     	; 0x6356 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    6348:	88 0f       	add	r24, r24
    634a:	99 1f       	adc	r25, r25
    634c:	fc 01       	movw	r30, r24
    634e:	e2 5e       	subi	r30, 0xE2	; 226
    6350:	f7 4f       	sbci	r31, 0xF7	; 247
    6352:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    6354:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    6356:	4f 5f       	subi	r20, 0xFF	; 255
    6358:	03 c0       	rjmp	.+6      	; 0x6360 <Midi_updateManualRange+0xa0>
    635a:	40 e0       	ldi	r20, 0x00	; 0
    635c:	6f ef       	ldi	r22, 0xFF	; 255
    635e:	50 e0       	ldi	r21, 0x00	; 0
    6360:	44 30       	cpi	r20, 0x04	; 4
    6362:	08 f4       	brcc	.+2      	; 0x6366 <Midi_updateManualRange+0xa6>
    6364:	af cf       	rjmp	.-162    	; 0x62c4 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6366:	7f 5f       	subi	r23, 0xFF	; 255
    6368:	74 30       	cpi	r23, 0x04	; 4
    636a:	b8 f3       	brcs	.-18     	; 0x635a <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    636c:	08 95       	ret

0000636e <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    636e:	63 e0       	ldi	r22, 0x03	; 3
    6370:	28 c0       	rjmp	.+80     	; 0x63c2 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    6372:	86 2f       	mov	r24, r22
    6374:	06 2e       	mov	r0, r22
    6376:	00 0c       	add	r0, r0
    6378:	99 0b       	sbc	r25, r25
    637a:	42 2f       	mov	r20, r18
    637c:	02 2e       	mov	r0, r18
    637e:	00 0c       	add	r0, r0
    6380:	55 0b       	sbc	r21, r21
    6382:	fa 01       	movw	r30, r20
    6384:	ee 0f       	add	r30, r30
    6386:	ff 1f       	adc	r31, r31
    6388:	e4 0f       	add	r30, r20
    638a:	f5 1f       	adc	r31, r21
    638c:	ac 01       	movw	r20, r24
    638e:	44 0f       	add	r20, r20
    6390:	55 1f       	adc	r21, r21
    6392:	da 01       	movw	r26, r20
    6394:	a8 0f       	add	r26, r24
    6396:	b9 1f       	adc	r27, r25
    6398:	aa 0f       	add	r26, r26
    639a:	bb 1f       	adc	r27, r27
    639c:	aa 0f       	add	r26, r26
    639e:	bb 1f       	adc	r27, r27
    63a0:	ae 0f       	add	r26, r30
    63a2:	bf 1f       	adc	r27, r31
    63a4:	ac 5c       	subi	r26, 0xCC	; 204
    63a6:	b6 4f       	sbci	r27, 0xF6	; 246
    63a8:	3f ef       	ldi	r19, 0xFF	; 255
    63aa:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    63ac:	11 96       	adiw	r26, 0x01	; 1
    63ae:	3c 93       	st	X, r19
    63b0:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    63b2:	fd 01       	movw	r30, r26
    63b4:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    63b6:	21 50       	subi	r18, 0x01	; 1
    63b8:	01 c0       	rjmp	.+2      	; 0x63bc <init_Manual2Module+0x4e>
    63ba:	23 e0       	ldi	r18, 0x03	; 3
    63bc:	22 23       	and	r18, r18
    63be:	cc f6       	brge	.-78     	; 0x6372 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    63c0:	61 50       	subi	r22, 0x01	; 1
    63c2:	66 23       	and	r22, r22
    63c4:	d4 f7       	brge	.-12     	; 0x63ba <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    63c6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <eeprom_ReadManualMap>
    63ca:	8f 3f       	cpi	r24, 0xFF	; 255
    63cc:	79 f5       	brne	.+94     	; 0x642c <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    63ce:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    63d2:	40 e0       	ldi	r20, 0x00	; 0
    63d4:	50 e0       	ldi	r21, 0x00	; 0
    63d6:	63 e0       	ldi	r22, 0x03	; 3
    63d8:	81 e0       	ldi	r24, 0x01	; 1
    63da:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    63de:	e4 e3       	ldi	r30, 0x34	; 52
    63e0:	f9 e0       	ldi	r31, 0x09	; 9
    63e2:	84 e2       	ldi	r24, 0x24	; 36
    63e4:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    63e6:	33 e4       	ldi	r19, 0x43	; 67
    63e8:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    63ea:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    63ec:	24 e4       	ldi	r18, 0x44	; 68
    63ee:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    63f0:	9b e5       	ldi	r25, 0x5B	; 91
    63f2:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    63f4:	40 e2       	ldi	r20, 0x20	; 32
    63f6:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    63f8:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    63fa:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    63fc:	40 e4       	ldi	r20, 0x40	; 64
    63fe:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    6400:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6402:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6404:	40 e6       	ldi	r20, 0x60	; 96
    6406:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    6408:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    640a:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    640c:	30 e8       	ldi	r19, 0x80	; 128
    640e:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    6410:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6412:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6414:	90 ea       	ldi	r25, 0xA0	; 160
    6416:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    6418:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    641a:	81 e4       	ldi	r24, 0x41	; 65
    641c:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    641e:	80 ec       	ldi	r24, 0xC0	; 192
    6420:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6422:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    6424:	8d e1       	ldi	r24, 0x1D	; 29
    6426:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    6428:	80 ee       	ldi	r24, 0xE0	; 224
    642a:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    642c:	49 cf       	rjmp	.-366    	; 0x62c0 <Midi_updateManualRange>
    642e:	08 95       	ret

00006430 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    6430:	84 30       	cpi	r24, 0x04	; 4
    6432:	d8 f4       	brcc	.+54     	; 0x646a <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	fc 01       	movw	r30, r24
    6438:	ee 0f       	add	r30, r30
    643a:	ff 1f       	adc	r31, r31
    643c:	e8 0f       	add	r30, r24
    643e:	f9 1f       	adc	r31, r25
    6440:	ee 0f       	add	r30, r30
    6442:	ff 1f       	adc	r31, r31
    6444:	ee 0f       	add	r30, r30
    6446:	ff 1f       	adc	r31, r31
    6448:	ec 5c       	subi	r30, 0xCC	; 204
    644a:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    644c:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    644e:	20 81       	ld	r18, Z
    6450:	62 17       	cp	r22, r18
    6452:	40 f0       	brcs	.+16     	; 0x6464 <manualNote_to_moduleBit+0x34>
    6454:	91 81       	ldd	r25, Z+1	; 0x01
    6456:	96 17       	cp	r25, r22
    6458:	28 f0       	brcs	.+10     	; 0x6464 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    645a:	92 81       	ldd	r25, Z+2	; 0x02
    645c:	62 1b       	sub	r22, r18
				return (result);
    645e:	80 e0       	ldi	r24, 0x00	; 0
    6460:	96 0f       	add	r25, r22
    6462:	08 95       	ret
			}
			pRange++;
    6464:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    6466:	81 50       	subi	r24, 0x01	; 1
    6468:	91 f7       	brne	.-28     	; 0x644e <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    646a:	8f ef       	ldi	r24, 0xFF	; 255
    646c:	90 e0       	ldi	r25, 0x00	; 0
}
    646e:	08 95       	ret

00006470 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    6470:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6472:	e4 e3       	ldi	r30, 0x34	; 52
    6474:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6476:	44 e0       	ldi	r20, 0x04	; 4
    6478:	16 c0       	rjmp	.+44     	; 0x64a6 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    647a:	52 81       	ldd	r21, Z+2	; 0x02
    647c:	85 17       	cp	r24, r21
    647e:	88 f0       	brcs	.+34     	; 0x64a2 <moduleBit_to_manualNote+0x32>
    6480:	68 2f       	mov	r22, r24
    6482:	70 e0       	ldi	r23, 0x00	; 0
    6484:	21 81       	ldd	r18, Z+1	; 0x01
    6486:	a0 81       	ld	r26, Z
    6488:	30 e0       	ldi	r19, 0x00	; 0
    648a:	2a 1b       	sub	r18, r26
    648c:	31 09       	sbc	r19, r1
    648e:	25 0f       	add	r18, r21
    6490:	31 1d       	adc	r19, r1
    6492:	26 17       	cp	r18, r22
    6494:	37 07       	cpc	r19, r23
    6496:	2c f0       	brlt	.+10     	; 0x64a2 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    6498:	98 2f       	mov	r25, r24
    649a:	95 1b       	sub	r25, r21
				return(result);
    649c:	8b 2f       	mov	r24, r27
    649e:	9a 0f       	add	r25, r26
    64a0:	08 95       	ret
			}
			pRange++;
    64a2:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    64a4:	41 50       	subi	r20, 0x01	; 1
    64a6:	41 11       	cpse	r20, r1
    64a8:	e8 cf       	rjmp	.-48     	; 0x647a <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    64aa:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    64ac:	b5 30       	cpi	r27, 0x05	; 5
    64ae:	18 f3       	brcs	.-58     	; 0x6476 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    64b0:	8f ef       	ldi	r24, 0xFF	; 255
    64b2:	90 e0       	ldi	r25, 0x00	; 0
}
    64b4:	08 95       	ret

000064b6 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    64b6:	ef 92       	push	r14
    64b8:	ff 92       	push	r15
    64ba:	0f 93       	push	r16
    64bc:	1f 93       	push	r17
    64be:	cf 93       	push	r28
    64c0:	df 93       	push	r29
    64c2:	c8 2f       	mov	r28, r24
    64c4:	06 2f       	mov	r16, r22
    64c6:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    64c8:	b3 df       	rcall	.-154    	; 0x6430 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    64ca:	49 2f       	mov	r20, r25
    64cc:	42 95       	swap	r20
    64ce:	46 95       	lsr	r20
    64d0:	47 70       	andi	r20, 0x07	; 7
    64d2:	21 e0       	ldi	r18, 0x01	; 1
    64d4:	30 e0       	ldi	r19, 0x00	; 0
    64d6:	79 01       	movw	r14, r18
    64d8:	02 c0       	rjmp	.+4      	; 0x64de <manual_NoteOnOff+0x28>
    64da:	ee 0c       	add	r14, r14
    64dc:	ff 1c       	adc	r15, r15
    64de:	4a 95       	dec	r20
    64e0:	e2 f7       	brpl	.-8      	; 0x64da <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    64e2:	19 2f       	mov	r17, r25
    64e4:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    64e6:	81 11       	cpse	r24, r1
    64e8:	1a c0       	rjmp	.+52     	; 0x651e <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    64ea:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    64ee:	8e 21       	and	r24, r14
    64f0:	59 f4       	brne	.+22     	; 0x6508 <manual_NoteOnOff+0x52>
    64f2:	dd 23       	and	r29, r29
    64f4:	4c f0       	brlt	.+18     	; 0x6508 <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    64f6:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    64f8:	d1 30       	cpi	r29, 0x01	; 1
    64fa:	11 f4       	brne	.+4      	; 0x6500 <manual_NoteOnOff+0x4a>
    64fc:	90 e2       	ldi	r25, 0x20	; 32
    64fe:	01 c0       	rjmp	.+2      	; 0x6502 <manual_NoteOnOff+0x4c>
    6500:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6502:	8e 2d       	mov	r24, r14
    6504:	91 2b       	or	r25, r17
    6506:	d0 da       	rcall	.-2656   	; 0x5aa8 <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6508:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    650a:	29 f4       	brne	.+10     	; 0x6516 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    650c:	6e 2d       	mov	r22, r14
    650e:	81 2f       	mov	r24, r17
    6510:	0e 94 fe 11 	call	0x23fc	; 0x23fc <pipe_off>
    6514:	04 c0       	rjmp	.+8      	; 0x651e <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6516:	6e 2d       	mov	r22, r14
    6518:	81 2f       	mov	r24, r17
    651a:	0e 94 ef 11 	call	0x23de	; 0x23de <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    651e:	ec 2f       	mov	r30, r28
    6520:	f0 e0       	ldi	r31, 0x00	; 0
    6522:	ee 0f       	add	r30, r30
    6524:	ff 1f       	adc	r31, r31
    6526:	e8 5d       	subi	r30, 0xD8	; 216
    6528:	f6 4f       	sbci	r31, 0xF6	; 246
    652a:	81 81       	ldd	r24, Z+1	; 0x01
    652c:	8f 3f       	cpi	r24, 0xFF	; 255
    652e:	a9 f0       	breq	.+42     	; 0x655a <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    6530:	d1 30       	cpi	r29, 0x01	; 1
    6532:	31 f0       	breq	.+12     	; 0x6540 <manual_NoteOnOff+0x8a>
    6534:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6538:	99 23       	and	r25, r25
    653a:	21 f0       	breq	.+8      	; 0x6544 <manual_NoteOnOff+0x8e>
    653c:	90 e9       	ldi	r25, 0x90	; 144
    653e:	03 c0       	rjmp	.+6      	; 0x6546 <manual_NoteOnOff+0x90>
    6540:	90 e9       	ldi	r25, 0x90	; 144
    6542:	01 c0       	rjmp	.+2      	; 0x6546 <manual_NoteOnOff+0x90>
    6544:	90 e8       	ldi	r25, 0x80	; 128
    6546:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    6548:	3e d4       	rcall	.+2172   	; 0x6dc6 <serial1MIDISend>
    654a:	80 2f       	mov	r24, r16
    654c:	3c d4       	rcall	.+2168   	; 0x6dc6 <serial1MIDISend>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    654e:	d1 11       	cpse	r29, r1
    6550:	02 c0       	rjmp	.+4      	; 0x6556 <manual_NoteOnOff+0xa0>
    6552:	80 e0       	ldi	r24, 0x00	; 0
    6554:	01 c0       	rjmp	.+2      	; 0x6558 <manual_NoteOnOff+0xa2>
    6556:	80 e4       	ldi	r24, 0x40	; 64
    6558:	36 d4       	rcall	.+2156   	; 0x6dc6 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    655a:	df 91       	pop	r29
    655c:	cf 91       	pop	r28
    655e:	1f 91       	pop	r17
    6560:	0f 91       	pop	r16
    6562:	ff 90       	pop	r15
    6564:	ef 90       	pop	r14
    6566:	08 95       	ret

00006568 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    6568:	bf 92       	push	r11
    656a:	cf 92       	push	r12
    656c:	df 92       	push	r13
    656e:	ef 92       	push	r14
    6570:	ff 92       	push	r15
    6572:	0f 93       	push	r16
    6574:	1f 93       	push	r17
    6576:	cf 93       	push	r28
    6578:	df 93       	push	r29
    657a:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    657c:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    657e:	4c c0       	rjmp	.+152    	; 0x6618 <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6580:	0c 2d       	mov	r16, r12
    6582:	10 e0       	ldi	r17, 0x00	; 0
    6584:	cd 2d       	mov	r28, r13
    6586:	d0 e0       	ldi	r29, 0x00	; 0
    6588:	f8 01       	movw	r30, r16
    658a:	ee 0f       	add	r30, r30
    658c:	ff 1f       	adc	r31, r31
    658e:	ee 0f       	add	r30, r30
    6590:	ff 1f       	adc	r31, r31
    6592:	ec 0f       	add	r30, r28
    6594:	fd 1f       	adc	r31, r29
    6596:	ee 0f       	add	r30, r30
    6598:	ff 1f       	adc	r31, r31
    659a:	ee 0f       	add	r30, r30
    659c:	ff 1f       	adc	r31, r31
    659e:	e8 5d       	subi	r30, 0xD8	; 216
    65a0:	f7 4f       	sbci	r31, 0xF7	; 247
    65a2:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    65a4:	83 e0       	ldi	r24, 0x03	; 3
    65a6:	8b 15       	cp	r24, r11
    65a8:	b0 f1       	brcs	.+108    	; 0x6616 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    65aa:	f8 01       	movw	r30, r16
    65ac:	ee 0f       	add	r30, r30
    65ae:	ff 1f       	adc	r31, r31
    65b0:	ee 0f       	add	r30, r30
    65b2:	ff 1f       	adc	r31, r31
    65b4:	ec 0f       	add	r30, r28
    65b6:	fd 1f       	adc	r31, r29
    65b8:	ee 0f       	add	r30, r30
    65ba:	ff 1f       	adc	r31, r31
    65bc:	ee 0f       	add	r30, r30
    65be:	ff 1f       	adc	r31, r31
    65c0:	e8 5d       	subi	r30, 0xD8	; 216
    65c2:	f7 4f       	sbci	r31, 0xF7	; 247
    65c4:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    65c6:	f2 80       	ldd	r15, Z+2	; 0x02
    65c8:	15 c0       	rjmp	.+42     	; 0x65f4 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    65ca:	ee 24       	eor	r14, r14
    65cc:	e3 94       	inc	r14
    65ce:	e6 0e       	add	r14, r22
    65d0:	f8 01       	movw	r30, r16
    65d2:	ee 0f       	add	r30, r30
    65d4:	ff 1f       	adc	r31, r31
    65d6:	ee 0f       	add	r30, r30
    65d8:	ff 1f       	adc	r31, r31
    65da:	ec 0f       	add	r30, r28
    65dc:	fd 1f       	adc	r31, r29
    65de:	ee 0f       	add	r30, r30
    65e0:	ff 1f       	adc	r31, r31
    65e2:	ee 0f       	add	r30, r30
    65e4:	ff 1f       	adc	r31, r31
    65e6:	e8 5d       	subi	r30, 0xD8	; 216
    65e8:	f7 4f       	sbci	r31, 0xF7	; 247
    65ea:	40 e8       	ldi	r20, 0x80	; 128
    65ec:	80 81       	ld	r24, Z
    65ee:	63 df       	rcall	.-314    	; 0x64b6 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    65f0:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    65f2:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    65f4:	f1 10       	cpse	r15, r1
    65f6:	e9 cf       	rjmp	.-46     	; 0x65ca <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    65f8:	eb 2d       	mov	r30, r11
    65fa:	f0 e0       	ldi	r31, 0x00	; 0
    65fc:	ee 0f       	add	r30, r30
    65fe:	ff 1f       	adc	r31, r31
    6600:	e8 5d       	subi	r30, 0xD8	; 216
    6602:	f6 4f       	sbci	r31, 0xF6	; 246
    6604:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6606:	80 31       	cpi	r24, 0x10	; 16
    6608:	30 f4       	brcc	.+12     	; 0x6616 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    660a:	80 6b       	ori	r24, 0xB0	; 176
    660c:	dc d3       	rcall	.+1976   	; 0x6dc6 <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    660e:	8b e7       	ldi	r24, 0x7B	; 123
    6610:	da d3       	rcall	.+1972   	; 0x6dc6 <serial1MIDISend>
				serial1MIDISend(0);
    6612:	80 e0       	ldi	r24, 0x00	; 0
    6614:	d8 d3       	rcall	.+1968   	; 0x6dc6 <serial1MIDISend>
    6616:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    6618:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    661a:	8d 15       	cp	r24, r13
    661c:	08 f0       	brcs	.+2      	; 0x6620 <midiAllNotesOff+0xb8>
    661e:	b0 cf       	rjmp	.-160    	; 0x6580 <midiAllNotesOff+0x18>
    6620:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6622:	cf 91       	pop	r28
    6624:	1f 91       	pop	r17
    6626:	0f 91       	pop	r16
    6628:	ff 90       	pop	r15
    662a:	ef 90       	pop	r14
    662c:	df 90       	pop	r13
    662e:	cf 90       	pop	r12
    6630:	bf 90       	pop	r11
    6632:	08 95       	ret

00006634 <midi_ManualOff>:
    6634:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6636:	1f 93       	push	r17
    6638:	cf 93       	push	r28
    663a:	df 93       	push	r29
    663c:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    663e:	84 30       	cpi	r24, 0x04	; 4
    6640:	00 f5       	brcc	.+64     	; 0x6682 <midi_ManualOff+0x4e>
    6642:	08 2f       	mov	r16, r24
    6644:	10 e0       	ldi	r17, 0x00	; 0
    6646:	f8 01       	movw	r30, r16
    6648:	ee 0f       	add	r30, r30
    664a:	ff 1f       	adc	r31, r31
    664c:	e2 5e       	subi	r30, 0xE2	; 226
    664e:	f7 4f       	sbci	r31, 0xF7	; 247
    6650:	d0 81       	ld	r29, Z
    6652:	df 3f       	cpi	r29, 0xFF	; 255
    6654:	b1 f0       	breq	.+44     	; 0x6682 <midi_ManualOff+0x4e>
    6656:	f8 01       	movw	r30, r16
    6658:	ee 0f       	add	r30, r30
    665a:	ff 1f       	adc	r31, r31
    665c:	e2 5e       	subi	r30, 0xE2	; 226
    665e:	f7 4f       	sbci	r31, 0xF7	; 247
    6660:	81 81       	ldd	r24, Z+1	; 0x01
    6662:	8f 3f       	cpi	r24, 0xFF	; 255
    6664:	31 f4       	brne	.+12     	; 0x6672 <midi_ManualOff+0x3e>
    6666:	0d c0       	rjmp	.+26     	; 0x6682 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    6668:	40 e8       	ldi	r20, 0x80	; 128
    666a:	6d 2f       	mov	r22, r29
    666c:	8c 2f       	mov	r24, r28
    666e:	23 df       	rcall	.-442    	; 0x64b6 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    6670:	df 5f       	subi	r29, 0xFF	; 255
    6672:	f8 01       	movw	r30, r16
    6674:	ee 0f       	add	r30, r30
    6676:	ff 1f       	adc	r31, r31
    6678:	e2 5e       	subi	r30, 0xE2	; 226
    667a:	f7 4f       	sbci	r31, 0xF7	; 247
    667c:	81 81       	ldd	r24, Z+1	; 0x01
    667e:	8d 17       	cp	r24, r29
    6680:	98 f7       	brcc	.-26     	; 0x6668 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6682:	ec 2f       	mov	r30, r28
    6684:	f0 e0       	ldi	r31, 0x00	; 0
    6686:	ee 0f       	add	r30, r30
    6688:	ff 1f       	adc	r31, r31
    668a:	e8 5d       	subi	r30, 0xD8	; 216
    668c:	f6 4f       	sbci	r31, 0xF6	; 246
    668e:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6690:	80 31       	cpi	r24, 0x10	; 16
    6692:	30 f4       	brcc	.+12     	; 0x66a0 <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6694:	80 6b       	ori	r24, 0xB0	; 176
    6696:	97 d3       	rcall	.+1838   	; 0x6dc6 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6698:	8b e7       	ldi	r24, 0x7B	; 123
    669a:	95 d3       	rcall	.+1834   	; 0x6dc6 <serial1MIDISend>
		serial1MIDISend(0);
    669c:	80 e0       	ldi	r24, 0x00	; 0
    669e:	93 d3       	rcall	.+1830   	; 0x6dc6 <serial1MIDISend>
    66a0:	df 91       	pop	r29

	}
}
    66a2:	cf 91       	pop	r28
    66a4:	1f 91       	pop	r17
    66a6:	0f 91       	pop	r16
    66a8:	08 95       	ret

000066aa <midi_AllManualsOff>:
    66aa:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    66ac:	c0 e0       	ldi	r28, 0x00	; 0
    66ae:	03 c0       	rjmp	.+6      	; 0x66b6 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    66b0:	8c 2f       	mov	r24, r28
    66b2:	c0 df       	rcall	.-128    	; 0x6634 <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    66b4:	cf 5f       	subi	r28, 0xFF	; 255
    66b6:	c4 30       	cpi	r28, 0x04	; 4
    66b8:	d8 f3       	brcs	.-10     	; 0x66b0 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    66ba:	cf 91       	pop	r28
    66bc:	08 95       	ret

000066be <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    66be:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    66c2:	88 23       	and	r24, r24
    66c4:	39 f0       	breq	.+14     	; 0x66d4 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    66c6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    66ca:	81 11       	cpse	r24, r1
    66cc:	03 c0       	rjmp	.+6      	; 0x66d4 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    66ce:	ed df       	rcall	.-38     	; 0x66aa <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    66d0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    66d4:	08 95       	ret

000066d6 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    66d6:	0f 93       	push	r16
    66d8:	1f 93       	push	r17
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	06 2f       	mov	r16, r22
    66e0:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    66e2:	d8 2f       	mov	r29, r24
    66e4:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    66e6:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    66e8:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    66ea:	3c c0       	rjmp	.+120    	; 0x6764 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    66ec:	4d 2f       	mov	r20, r29
    66ee:	50 e0       	ldi	r21, 0x00	; 0
    66f0:	2c 2f       	mov	r18, r28
    66f2:	30 e0       	ldi	r19, 0x00	; 0
    66f4:	fa 01       	movw	r30, r20
    66f6:	ee 0f       	add	r30, r30
    66f8:	ff 1f       	adc	r31, r31
    66fa:	ee 0f       	add	r30, r30
    66fc:	ff 1f       	adc	r31, r31
    66fe:	e2 0f       	add	r30, r18
    6700:	f3 1f       	adc	r31, r19
    6702:	ee 0f       	add	r30, r30
    6704:	ff 1f       	adc	r31, r31
    6706:	ee 0f       	add	r30, r30
    6708:	ff 1f       	adc	r31, r31
    670a:	e8 5d       	subi	r30, 0xD8	; 216
    670c:	f7 4f       	sbci	r31, 0xF7	; 247
    670e:	80 81       	ld	r24, Z
    6710:	84 30       	cpi	r24, 0x04	; 4
    6712:	38 f5       	brcc	.+78     	; 0x6762 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6714:	df 01       	movw	r26, r30
    6716:	61 81       	ldd	r22, Z+1	; 0x01
    6718:	70 2f       	mov	r23, r16
    671a:	76 1b       	sub	r23, r22
    671c:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    671e:	0a f1       	brmi	.+66     	; 0x6762 <midiNote_to_Manual+0x8c>
    6720:	fd 01       	movw	r30, r26
    6722:	e2 81       	ldd	r30, Z+2	; 0x02
    6724:	f0 e0       	ldi	r31, 0x00	; 0
    6726:	a7 2f       	mov	r26, r23
    6728:	77 0f       	add	r23, r23
    672a:	bb 0b       	sbc	r27, r27
    672c:	ae 17       	cp	r26, r30
    672e:	bf 07       	cpc	r27, r31
    6730:	c4 f4       	brge	.+48     	; 0x6762 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6732:	fa 01       	movw	r30, r20
    6734:	ee 0f       	add	r30, r30
    6736:	ff 1f       	adc	r31, r31
    6738:	ee 0f       	add	r30, r30
    673a:	ff 1f       	adc	r31, r31
    673c:	e2 0f       	add	r30, r18
    673e:	f3 1f       	adc	r31, r19
    6740:	ee 0f       	add	r30, r30
    6742:	ff 1f       	adc	r31, r31
    6744:	ee 0f       	add	r30, r30
    6746:	ff 1f       	adc	r31, r31
    6748:	e8 5d       	subi	r30, 0xD8	; 216
    674a:	f7 4f       	sbci	r31, 0xF7	; 247
    674c:	93 81       	ldd	r25, Z+3	; 0x03
    674e:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6750:	11 30       	cpi	r17, 0x01	; 1
    6752:	21 f4       	brne	.+8      	; 0x675c <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6754:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6758:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    675c:	41 2f       	mov	r20, r17
    675e:	ab de       	rcall	.-682    	; 0x64b6 <manual_NoteOnOff>
				found |= 0xFF;
    6760:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6762:	cf 5f       	subi	r28, 0xFF	; 255
    6764:	c4 30       	cpi	r28, 0x04	; 4
    6766:	08 f4       	brcc	.+2      	; 0x676a <midiNote_to_Manual+0x94>
    6768:	c1 cf       	rjmp	.-126    	; 0x66ec <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    676a:	11 30       	cpi	r17, 0x01	; 1
    676c:	49 f4       	brne	.+18     	; 0x6780 <midiNote_to_Manual+0xaa>
    676e:	91 11       	cpse	r25, r1
    6770:	07 c0       	rjmp	.+14     	; 0x6780 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6772:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    6776:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    677a:	8f ef       	ldi	r24, 0xFF	; 255
    677c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6780:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    6784:	d8 13       	cpse	r29, r24
    6786:	1f c0       	rjmp	.+62     	; 0x67c6 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6788:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    678c:	8f 3f       	cpi	r24, 0xFF	; 255
    678e:	d9 f0       	breq	.+54     	; 0x67c6 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    6790:	11 30       	cpi	r17, 0x01	; 1
    6792:	31 f0       	breq	.+12     	; 0x67a0 <midiNote_to_Manual+0xca>
    6794:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6798:	99 23       	and	r25, r25
    679a:	21 f0       	breq	.+8      	; 0x67a4 <midiNote_to_Manual+0xce>
    679c:	90 e9       	ldi	r25, 0x90	; 144
    679e:	03 c0       	rjmp	.+6      	; 0x67a6 <midiNote_to_Manual+0xd0>
    67a0:	90 e9       	ldi	r25, 0x90	; 144
    67a2:	01 c0       	rjmp	.+2      	; 0x67a6 <midiNote_to_Manual+0xd0>
    67a4:	90 e8       	ldi	r25, 0x80	; 128
    67a6:	89 2b       	or	r24, r25
    67a8:	0e d3       	rcall	.+1564   	; 0x6dc6 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    67aa:	80 2f       	mov	r24, r16
    67ac:	0c d3       	rcall	.+1560   	; 0x6dc6 <serial1MIDISend>
    67ae:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    67b0:	06 c0       	rjmp	.+12     	; 0x67be <midiNote_to_Manual+0xe8>
    67b2:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    67b6:	81 11       	cpse	r24, r1
    67b8:	04 c0       	rjmp	.+8      	; 0x67c2 <midiNote_to_Manual+0xec>
    67ba:	80 e4       	ldi	r24, 0x40	; 64
    67bc:	03 c0       	rjmp	.+6      	; 0x67c4 <midiNote_to_Manual+0xee>
    67be:	80 e4       	ldi	r24, 0x40	; 64
    67c0:	01 c0       	rjmp	.+2      	; 0x67c4 <midiNote_to_Manual+0xee>
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	00 d3       	rcall	.+1536   	; 0x6dc6 <serial1MIDISend>
    67c6:	df 91       	pop	r29
		}
	}
}
    67c8:	cf 91       	pop	r28
    67ca:	1f 91       	pop	r17
    67cc:	0f 91       	pop	r16
    67ce:	08 95       	ret

000067d0 <midiIn_Process>:
    67d0:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    67d2:	0c f0       	brlt	.+2      	; 0x67d6 <midiIn_Process+0x6>
    67d4:	4f c0       	rjmp	.+158    	; 0x6874 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    67d6:	88 3f       	cpi	r24, 0xF8	; 248
    67d8:	b8 f0       	brcs	.+46     	; 0x6808 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    67da:	8e 3f       	cpi	r24, 0xFE	; 254
    67dc:	81 f4       	brne	.+32     	; 0x67fe <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    67de:	81 e0       	ldi	r24, 0x01	; 1
    67e0:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    67e4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    67e6:	f8 94       	cli
    67e8:	06 c0       	rjmp	.+12     	; 0x67f6 <midiIn_Process+0x26>
    67ea:	ef e2       	ldi	r30, 0x2F	; 47
    67ec:	f2 e0       	ldi	r31, 0x02	; 2
    67ee:	89 e1       	ldi	r24, 0x19	; 25
    67f0:	86 83       	std	Z+6, r24	; 0x06
    67f2:	17 82       	std	Z+7, r1	; 0x07
    67f4:	80 e0       	ldi	r24, 0x00	; 0
    67f6:	81 11       	cpse	r24, r1
    67f8:	f8 cf       	rjmp	.-16     	; 0x67ea <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    67fa:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    67fc:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    67fe:	8f 3f       	cpi	r24, 0xFF	; 255
    6800:	09 f0       	breq	.+2      	; 0x6804 <midiIn_Process+0x34>
    6802:	79 c0       	rjmp	.+242    	; 0x68f6 <midiIn_Process+0x126>
				midiAllReset();
    6804:	f5 c9       	rjmp	.-3094   	; 0x5bf0 <midiAllReset>
    6806:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6808:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    680c:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6810:	90 e8       	ldi	r25, 0x80	; 128
    6812:	98 0f       	add	r25, r24
    6814:	90 34       	cpi	r25, 0x40	; 64
    6816:	20 f4       	brcc	.+8      	; 0x6820 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6818:	82 e0       	ldi	r24, 0x02	; 2
    681a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    681e:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6820:	90 e2       	ldi	r25, 0x20	; 32
    6822:	98 0f       	add	r25, r24
    6824:	90 31       	cpi	r25, 0x10	; 16
    6826:	20 f4       	brcc	.+8      	; 0x6830 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6828:	82 e0       	ldi	r24, 0x02	; 2
    682a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    682e:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6830:	82 3f       	cpi	r24, 0xF2	; 242
    6832:	21 f4       	brne	.+8      	; 0x683c <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6834:	82 e0       	ldi	r24, 0x02	; 2
    6836:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    683a:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    683c:	80 3f       	cpi	r24, 0xF0	; 240
    683e:	21 f4       	brne	.+8      	; 0x6848 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6840:	8f ef       	ldi	r24, 0xFF	; 255
    6842:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6846:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6848:	90 e4       	ldi	r25, 0x40	; 64
    684a:	98 0f       	add	r25, r24
    684c:	90 32       	cpi	r25, 0x20	; 32
    684e:	20 f4       	brcc	.+8      	; 0x6858 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    6850:	81 e0       	ldi	r24, 0x01	; 1
    6852:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6856:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6858:	81 3f       	cpi	r24, 0xF1	; 241
    685a:	11 f0       	breq	.+4      	; 0x6860 <midiIn_Process+0x90>
    685c:	83 3f       	cpi	r24, 0xF3	; 243
    685e:	21 f4       	brne	.+8      	; 0x6868 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    6860:	81 e0       	ldi	r24, 0x01	; 1
    6862:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6866:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    6868:	87 3f       	cpi	r24, 0xF7	; 247
    686a:	09 f4       	brne	.+2      	; 0x686e <midiIn_Process+0x9e>
    686c:	44 c0       	rjmp	.+136    	; 0x68f6 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    686e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    6872:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6874:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <midiDataByteCount>
    6878:	e8 30       	cpi	r30, 0x08	; 8
    687a:	40 f4       	brcc	.+16     	; 0x688c <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    687c:	91 e0       	ldi	r25, 0x01	; 1
    687e:	9e 0f       	add	r25, r30
    6880:	90 93 1d 08 	sts	0x081D, r25	; 0x80081d <midiDataByteCount>
    6884:	f0 e0       	ldi	r31, 0x00	; 0
    6886:	ec 51       	subi	r30, 0x1C	; 28
    6888:	f4 4f       	sbci	r31, 0xF4	; 244
    688a:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    688c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    6890:	8f 3f       	cpi	r24, 0xFF	; 255
    6892:	89 f1       	breq	.+98     	; 0x68f6 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6894:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <midiDataByteCount>
    6898:	98 17       	cp	r25, r24
    689a:	68 f1       	brcs	.+90     	; 0x68f6 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    689c:	90 91 ec 0b 	lds	r25, 0x0BEC	; 0x800bec <midiLastCommand>
    68a0:	90 3f       	cpi	r25, 0xF0	; 240
    68a2:	38 f5       	brcc	.+78     	; 0x68f2 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    68a4:	89 2f       	mov	r24, r25
    68a6:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    68a8:	90 7f       	andi	r25, 0xF0	; 240
    68aa:	90 39       	cpi	r25, 0x90	; 144
    68ac:	71 f0       	breq	.+28     	; 0x68ca <midiIn_Process+0xfa>
    68ae:	18 f4       	brcc	.+6      	; 0x68b6 <midiIn_Process+0xe6>
    68b0:	90 38       	cpi	r25, 0x80	; 128
    68b2:	31 f0       	breq	.+12     	; 0x68c0 <midiIn_Process+0xf0>
    68b4:	1e c0       	rjmp	.+60     	; 0x68f2 <midiIn_Process+0x122>
    68b6:	90 3b       	cpi	r25, 0xB0	; 176
    68b8:	99 f0       	breq	.+38     	; 0x68e0 <midiIn_Process+0x110>
    68ba:	90 3c       	cpi	r25, 0xC0	; 192
    68bc:	b9 f0       	breq	.+46     	; 0x68ec <midiIn_Process+0x11c>
    68be:	19 c0       	rjmp	.+50     	; 0x68f2 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    68c0:	40 e0       	ldi	r20, 0x00	; 0
    68c2:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    68c6:	07 df       	rcall	.-498    	; 0x66d6 <midiNote_to_Manual>
						break;
    68c8:	14 c0       	rjmp	.+40     	; 0x68f2 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    68ca:	90 91 e5 0b 	lds	r25, 0x0BE5	; 0x800be5 <midiDataByte+0x1>
    68ce:	91 11       	cpse	r25, r1
    68d0:	02 c0       	rjmp	.+4      	; 0x68d6 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    68d2:	40 e0       	ldi	r20, 0x00	; 0
    68d4:	01 c0       	rjmp	.+2      	; 0x68d8 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    68d6:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    68d8:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    68dc:	fc de       	rcall	.-520    	; 0x66d6 <midiNote_to_Manual>
						break;
    68de:	09 c0       	rjmp	.+18     	; 0x68f2 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    68e0:	90 91 e4 0b 	lds	r25, 0x0BE4	; 0x800be4 <midiDataByte>
    68e4:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    68e6:	29 f4       	brne	.+10     	; 0x68f2 <midiIn_Process+0x122>
    68e8:	3f de       	rcall	.-898    	; 0x6568 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    68ea:	03 c0       	rjmp	.+6      	; 0x68f2 <midiIn_Process+0x122>
    68ec:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    68f0:	04 dc       	rcall	.-2040   	; 0x60fa <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    68f2:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
    68f6:	08 95       	ret

000068f8 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    68f8:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <serESPMidiTmp+0x2>
    68fc:	89 2f       	mov	r24, r25
    68fe:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6900:	90 7f       	andi	r25, 0xF0	; 240
    6902:	90 38       	cpi	r25, 0x80	; 128
    6904:	49 f0       	breq	.+18     	; 0x6918 <proc_ESPmidi+0x20>
    6906:	18 f4       	brcc	.+6      	; 0x690e <proc_ESPmidi+0x16>
    6908:	99 23       	and	r25, r25
    690a:	e1 f0       	breq	.+56     	; 0x6944 <proc_ESPmidi+0x4c>
    690c:	08 95       	ret
    690e:	90 39       	cpi	r25, 0x90	; 144
    6910:	41 f0       	breq	.+16     	; 0x6922 <proc_ESPmidi+0x2a>
    6912:	90 3b       	cpi	r25, 0xB0	; 176
    6914:	89 f0       	breq	.+34     	; 0x6938 <proc_ESPmidi+0x40>
    6916:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6918:	40 e0       	ldi	r20, 0x00	; 0
    691a:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    691e:	db ce       	rjmp	.-586    	; 0x66d6 <midiNote_to_Manual>
		break;
    6920:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6922:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <serESPMidiTmp>
    6926:	91 11       	cpse	r25, r1
    6928:	02 c0       	rjmp	.+4      	; 0x692e <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    692a:	40 e0       	ldi	r20, 0x00	; 0
    692c:	01 c0       	rjmp	.+2      	; 0x6930 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    692e:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6930:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6934:	d0 ce       	rjmp	.-608    	; 0x66d6 <midiNote_to_Manual>
		break;
    6936:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6938:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    693c:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    693e:	61 f4       	brne	.+24     	; 0x6958 <proc_ESPmidi+0x60>
    6940:	13 ce       	rjmp	.-986    	; 0x6568 <midiAllNotesOff>
    6942:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6944:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6948:	89 2f       	mov	r24, r25
    694a:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    694c:	90 7f       	andi	r25, 0xF0	; 240
    694e:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6950:	19 f4       	brne	.+6      	; 0x6958 <proc_ESPmidi+0x60>
    6952:	60 91 4b 16 	lds	r22, 0x164B	; 0x80164b <serESPMidiTmp>
    6956:	d1 cb       	rjmp	.-2142   	; 0x60fa <midi_ProgramChange>
    6958:	08 95       	ret

0000695a <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    695a:	bf 92       	push	r11
    695c:	cf 92       	push	r12
    695e:	df 92       	push	r13
    6960:	ef 92       	push	r14
    6962:	ff 92       	push	r15
    6964:	0f 93       	push	r16
    6966:	1f 93       	push	r17
    6968:	cf 93       	push	r28
    696a:	df 93       	push	r29
    696c:	d8 2f       	mov	r29, r24
    696e:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6970:	8d d2       	rcall	.+1306   	; 0x6e8c <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6972:	0c 2f       	mov	r16, r28
    6974:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6976:	cf 71       	andi	r28, 0x1F	; 31
    6978:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    697a:	00 32       	cpi	r16, 0x20	; 32
    697c:	09 f4       	brne	.+2      	; 0x6980 <midiKeyPress_Process+0x26>
    697e:	b5 c0       	rjmp	.+362    	; 0x6aea <midiKeyPress_Process+0x190>
    6980:	00 23       	and	r16, r16
    6982:	09 f4       	brne	.+2      	; 0x6986 <midiKeyPress_Process+0x2c>
    6984:	b4 c0       	rjmp	.+360    	; 0x6aee <midiKeyPress_Process+0x194>
    6986:	b7 c0       	rjmp	.+366    	; 0x6af6 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6988:	d0 ff       	sbrs	r29, 0
    698a:	ac c0       	rjmp	.+344    	; 0x6ae4 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    698c:	20 e2       	ldi	r18, 0x20	; 32
    698e:	c2 9f       	mul	r28, r18
    6990:	c0 01       	movw	r24, r0
    6992:	11 24       	eor	r1, r1
    6994:	fb 2c       	mov	r15, r11
    6996:	f8 2a       	or	r15, r24
    6998:	8f 2d       	mov	r24, r15
    699a:	6a dd       	rcall	.-1324   	; 0x6470 <moduleBit_to_manualNote>
    699c:	c8 2e       	mov	r12, r24
    699e:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    69a0:	18 2f       	mov	r17, r24
    69a2:	8f 3f       	cpi	r24, 0xFF	; 255
    69a4:	09 f4       	brne	.+2      	; 0x69a8 <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    69a6:	94 c0       	rjmp	.+296    	; 0x6ad0 <midiKeyPress_Process+0x176>
    69a8:	69 2f       	mov	r22, r25
    69aa:	7a dc       	rcall	.-1804   	; 0x62a0 <Manual_to_MidiNote>
    69ac:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    69ae:	8f 3f       	cpi	r24, 0xFF	; 255
    69b0:	09 f1       	breq	.+66     	; 0x69f4 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    69b2:	00 32       	cpi	r16, 0x20	; 32
    69b4:	31 f0       	breq	.+12     	; 0x69c2 <midiKeyPress_Process+0x68>
    69b6:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    69ba:	99 23       	and	r25, r25
    69bc:	21 f0       	breq	.+8      	; 0x69c6 <midiKeyPress_Process+0x6c>
    69be:	90 e9       	ldi	r25, 0x90	; 144
    69c0:	03 c0       	rjmp	.+6      	; 0x69c8 <midiKeyPress_Process+0x6e>
    69c2:	90 e9       	ldi	r25, 0x90	; 144
    69c4:	01 c0       	rjmp	.+2      	; 0x69c8 <midiKeyPress_Process+0x6e>
    69c6:	90 e8       	ldi	r25, 0x80	; 128
    69c8:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    69ca:	fd d1       	rcall	.+1018   	; 0x6dc6 <serial1MIDISend>
    69cc:	8d 2d       	mov	r24, r13
    69ce:	fb d1       	rcall	.+1014   	; 0x6dc6 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    69d0:	01 11       	cpse	r16, r1
    69d2:	06 c0       	rjmp	.+12     	; 0x69e0 <midiKeyPress_Process+0x86>
    69d4:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    69d8:	81 11       	cpse	r24, r1
    69da:	04 c0       	rjmp	.+8      	; 0x69e4 <midiKeyPress_Process+0x8a>
    69dc:	80 e4       	ldi	r24, 0x40	; 64
    69de:	03 c0       	rjmp	.+6      	; 0x69e6 <midiKeyPress_Process+0x8c>
    69e0:	80 e4       	ldi	r24, 0x40	; 64
    69e2:	01 c0       	rjmp	.+2      	; 0x69e6 <midiKeyPress_Process+0x8c>
    69e4:	80 e0       	ldi	r24, 0x00	; 0
    69e6:	ef d1       	rcall	.+990    	; 0x6dc6 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    69e8:	00 32       	cpi	r16, 0x20	; 32
    69ea:	21 f4       	brne	.+8      	; 0x69f4 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    69ec:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    69f0:	e0 92 05 02 	sts	0x0205, r14	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    69f4:	41 e0       	ldi	r20, 0x01	; 1
    69f6:	00 32       	cpi	r16, 0x20	; 32
    69f8:	09 f0       	breq	.+2      	; 0x69fc <midiKeyPress_Process+0xa2>
    69fa:	40 e0       	ldi	r20, 0x00	; 0
    69fc:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    69fe:	11 11       	cpse	r17, r1
    6a00:	19 c0       	rjmp	.+50     	; 0x6a34 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6a02:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers>
    6a06:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6a08:	19 f4       	brne	.+6      	; 0x6a10 <midiKeyPress_Process+0xb6>
    6a0a:	6e 2d       	mov	r22, r14
    6a0c:	81 e0       	ldi	r24, 0x01	; 1
    6a0e:	53 dd       	rcall	.-1370   	; 0x64b6 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    6a10:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x1>
    6a14:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6a16:	21 f4       	brne	.+8      	; 0x6a20 <midiKeyPress_Process+0xc6>
    6a18:	4d 2d       	mov	r20, r13
    6a1a:	6e 2d       	mov	r22, r14
    6a1c:	82 e0       	ldi	r24, 0x02	; 2
    6a1e:	4b dd       	rcall	.-1386   	; 0x64b6 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    6a20:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x3>
    6a24:	8f 3f       	cpi	r24, 0xFF	; 255
    6a26:	09 f0       	breq	.+2      	; 0x6a2a <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6a28:	53 c0       	rjmp	.+166    	; 0x6ad0 <midiKeyPress_Process+0x176>
    6a2a:	4d 2d       	mov	r20, r13
    6a2c:	6e 2d       	mov	r22, r14
    6a2e:	83 e0       	ldi	r24, 0x03	; 3
    6a30:	42 dd       	rcall	.-1404   	; 0x64b6 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6a32:	4e c0       	rjmp	.+156    	; 0x6ad0 <midiKeyPress_Process+0x176>
    6a34:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6a36:	c9 f4       	brne	.+50     	; 0x6a6a <midiKeyPress_Process+0x110>
    6a38:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x2>
    6a3c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6a3e:	19 f4       	brne	.+6      	; 0x6a46 <midiKeyPress_Process+0xec>
    6a40:	6e 2d       	mov	r22, r14
    6a42:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6a44:	38 dd       	rcall	.-1424   	; 0x64b6 <manual_NoteOnOff>
    6a46:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x4>
    6a4a:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6a4c:	21 f4       	brne	.+8      	; 0x6a56 <midiKeyPress_Process+0xfc>
    6a4e:	4d 2d       	mov	r20, r13
    6a50:	6e 2d       	mov	r22, r14
    6a52:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6a54:	30 dd       	rcall	.-1440   	; 0x64b6 <manual_NoteOnOff>
    6a56:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x6>
    6a5a:	8f 3f       	cpi	r24, 0xFF	; 255
    6a5c:	09 f0       	breq	.+2      	; 0x6a60 <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6a5e:	38 c0       	rjmp	.+112    	; 0x6ad0 <midiKeyPress_Process+0x176>
    6a60:	4d 2d       	mov	r20, r13
    6a62:	6e 2d       	mov	r22, r14
    6a64:	80 e0       	ldi	r24, 0x00	; 0
    6a66:	27 dd       	rcall	.-1458   	; 0x64b6 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6a68:	33 c0       	rjmp	.+102    	; 0x6ad0 <midiKeyPress_Process+0x176>
    6a6a:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    6a6c:	c1 f4       	brne	.+48     	; 0x6a9e <midiKeyPress_Process+0x144>
    6a6e:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6a72:	8f 3f       	cpi	r24, 0xFF	; 255
    6a74:	19 f4       	brne	.+6      	; 0x6a7c <midiKeyPress_Process+0x122>
    6a76:	6e 2d       	mov	r22, r14
    6a78:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6a7a:	1d dd       	rcall	.-1478   	; 0x64b6 <manual_NoteOnOff>
    6a7c:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6a80:	8f 3f       	cpi	r24, 0xFF	; 255
    6a82:	21 f4       	brne	.+8      	; 0x6a8c <midiKeyPress_Process+0x132>
    6a84:	4d 2d       	mov	r20, r13
    6a86:	6e 2d       	mov	r22, r14
    6a88:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6a8a:	15 dd       	rcall	.-1494   	; 0x64b6 <manual_NoteOnOff>
    6a8c:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6a90:	8f 3f       	cpi	r24, 0xFF	; 255
    6a92:	f1 f4       	brne	.+60     	; 0x6ad0 <midiKeyPress_Process+0x176>
    6a94:	4d 2d       	mov	r20, r13
    6a96:	6e 2d       	mov	r22, r14
    6a98:	81 e0       	ldi	r24, 0x01	; 1
    6a9a:	0d dd       	rcall	.-1510   	; 0x64b6 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6a9c:	19 c0       	rjmp	.+50     	; 0x6ad0 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    6a9e:	13 30       	cpi	r17, 0x03	; 3
    6aa0:	b9 f4       	brne	.+46     	; 0x6ad0 <midiKeyPress_Process+0x176>
    6aa2:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    6aa8:	19 f4       	brne	.+6      	; 0x6ab0 <midiKeyPress_Process+0x156>
    6aaa:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    6aac:	80 e0       	ldi	r24, 0x00	; 0
    6aae:	03 dd       	rcall	.-1530   	; 0x64b6 <manual_NoteOnOff>
    6ab0:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6ab4:	8f 3f       	cpi	r24, 0xFF	; 255
    6ab6:	21 f4       	brne	.+8      	; 0x6ac0 <midiKeyPress_Process+0x166>
    6ab8:	4d 2d       	mov	r20, r13
    6aba:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    6abc:	81 e0       	ldi	r24, 0x01	; 1
    6abe:	fb dc       	rcall	.-1546   	; 0x64b6 <manual_NoteOnOff>
    6ac0:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    6ac6:	21 f4       	brne	.+8      	; 0x6ad0 <midiKeyPress_Process+0x176>
    6ac8:	4d 2d       	mov	r20, r13
    6aca:	6e 2d       	mov	r22, r14
    6acc:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    6ace:	f3 dc       	rcall	.-1562   	; 0x64b6 <manual_NoteOnOff>
    6ad0:	8f 2d       	mov	r24, r15
    6ad2:	25 d9       	rcall	.-3510   	; 0x5d1e <moduleBit_to_registerNr>
    6ad4:	00 32       	cpi	r16, 0x20	; 32
    6ad6:	11 f4       	brne	.+4      	; 0x6adc <midiKeyPress_Process+0x182>
    6ad8:	20 e8       	ldi	r18, 0x80	; 128
    6ada:	01 c0       	rjmp	.+2      	; 0x6ade <midiKeyPress_Process+0x184>
    6adc:	20 e0       	ldi	r18, 0x00	; 0
    6ade:	82 2b       	or	r24, r18
    6ae0:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6ae4:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6ae6:	cf 5f       	subi	r28, 0xFF	; 255
    6ae8:	03 c0       	rjmp	.+6      	; 0x6af0 <midiKeyPress_Process+0x196>
    6aea:	c0 e0       	ldi	r28, 0x00	; 0
    6aec:	01 c0       	rjmp	.+2      	; 0x6af0 <midiKeyPress_Process+0x196>
    6aee:	c0 e0       	ldi	r28, 0x00	; 0
    6af0:	c8 30       	cpi	r28, 0x08	; 8
    6af2:	08 f4       	brcc	.+2      	; 0x6af6 <midiKeyPress_Process+0x19c>
    6af4:	49 cf       	rjmp	.-366    	; 0x6988 <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6af6:	df 91       	pop	r29
    6af8:	cf 91       	pop	r28
    6afa:	1f 91       	pop	r17
    6afc:	0f 91       	pop	r16
    6afe:	ff 90       	pop	r15
    6b00:	ef 90       	pop	r14
    6b02:	df 90       	pop	r13
    6b04:	cf 90       	pop	r12
    6b06:	bf 90       	pop	r11
    6b08:	08 95       	ret

00006b0a <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    6b0a:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6b0c:	c0 e0       	ldi	r28, 0x00	; 0
    6b0e:	10 c0       	rjmp	.+32     	; 0x6b30 <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    6b10:	ec 2f       	mov	r30, r28
    6b12:	f0 e0       	ldi	r31, 0x00	; 0
    6b14:	ee 0f       	add	r30, r30
    6b16:	ff 1f       	adc	r31, r31
    6b18:	e8 5d       	subi	r30, 0xD8	; 216
    6b1a:	f6 4f       	sbci	r31, 0xF6	; 246
    6b1c:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    6b1e:	80 31       	cpi	r24, 0x10	; 16
    6b20:	30 f4       	brcc	.+12     	; 0x6b2e <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6b22:	80 6b       	ori	r24, 0xB0	; 176
    6b24:	50 d1       	rcall	.+672    	; 0x6dc6 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6b26:	8b e7       	ldi	r24, 0x7B	; 123
    6b28:	4e d1       	rcall	.+668    	; 0x6dc6 <serial1MIDISend>
			serial1MIDISend(0);
    6b2a:	80 e0       	ldi	r24, 0x00	; 0
    6b2c:	4c d1       	rcall	.+664    	; 0x6dc6 <serial1MIDISend>
    6b2e:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6b30:	c4 30       	cpi	r28, 0x04	; 4
    6b32:	70 f3       	brcs	.-36     	; 0x6b10 <midiSendAllNotesOff+0x6>
    6b34:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    6b36:	08 95       	ret

00006b38 <midi_SendActiveSense>:
    6b38:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6b3a:	45 c1       	rjmp	.+650    	; 0x6dc6 <serial1MIDISend>
    6b3c:	08 95       	ret

00006b3e <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    6b3e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6b42:	88 23       	and	r24, r24
    6b44:	21 f0       	breq	.+8      	; 0x6b4e <midi_CheckTxActiveSense+0x10>
    6b46:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6b4a:	8f 3f       	cpi	r24, 0xFF	; 255
    6b4c:	99 f4       	brne	.+38     	; 0x6b74 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    6b4e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6b50:	f8 94       	cli
    6b52:	81 e0       	ldi	r24, 0x01	; 1
    6b54:	06 c0       	rjmp	.+12     	; 0x6b62 <midi_CheckTxActiveSense+0x24>
    6b56:	ef e2       	ldi	r30, 0x2F	; 47
    6b58:	f2 e0       	ldi	r31, 0x02	; 2
    6b5a:	8a e0       	ldi	r24, 0x0A	; 10
    6b5c:	80 8b       	std	Z+16, r24	; 0x10
    6b5e:	11 8a       	std	Z+17, r1	; 0x11
    6b60:	80 e0       	ldi	r24, 0x00	; 0
    6b62:	81 11       	cpse	r24, r1
    6b64:	f8 cf       	rjmp	.-16     	; 0x6b56 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6b66:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    6b68:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting>
    6b6c:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    6b6e:	e4 df       	rcall	.-56     	; 0x6b38 <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    6b70:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6b74:	08 95       	ret

00006b76 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6b76:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6b7a:	8f e1       	ldi	r24, 0x1F	; 31
    6b7c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6b80:	e9 ec       	ldi	r30, 0xC9	; 201
    6b82:	f0 e0       	ldi	r31, 0x00	; 0
    6b84:	80 81       	ld	r24, Z
    6b86:	88 69       	ori	r24, 0x98	; 152
    6b88:	80 83       	st	Z, r24
    6b8a:	ea ec       	ldi	r30, 0xCA	; 202
    6b8c:	f0 e0       	ldi	r31, 0x00	; 0
    6b8e:	80 81       	ld	r24, Z
    6b90:	86 60       	ori	r24, 0x06	; 6
    6b92:	80 83       	st	Z, r24
    6b94:	10 92 44 16 	sts	0x1644, r1	; 0x801644 <midiRxInIndex>
    6b98:	10 92 53 16 	sts	0x1653, r1	; 0x801653 <midiRxOutIndex>
    6b9c:	10 92 ef 13 	sts	0x13EF, r1	; 0x8013ef <midiTxInIndex>
    6ba0:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <midiTxOutIndex>
    6ba4:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiRxOvfl>
    6ba8:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <midiTxOvfl>
    6bac:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
    6bb0:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
    6bb4:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
    6bb8:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
    6bbc:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6bc0:	08 95       	ret

00006bc2 <__vector_36>:
    6bc2:	1f 92       	push	r1
    6bc4:	0f 92       	push	r0
    6bc6:	0f b6       	in	r0, 0x3f	; 63
    6bc8:	0f 92       	push	r0
    6bca:	11 24       	eor	r1, r1
    6bcc:	0b b6       	in	r0, 0x3b	; 59
    6bce:	0f 92       	push	r0
    6bd0:	8f 93       	push	r24
    6bd2:	9f 93       	push	r25
    6bd4:	ef 93       	push	r30
    6bd6:	ff 93       	push	r31
    6bd8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6bdc:	e0 91 44 16 	lds	r30, 0x1644	; 0x801644 <midiRxInIndex>
    6be0:	f0 e0       	ldi	r31, 0x00	; 0
    6be2:	ef 5b       	subi	r30, 0xBF	; 191
    6be4:	fb 4e       	sbci	r31, 0xEB	; 235
    6be6:	80 83       	st	Z, r24
    6be8:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6bec:	8f 5f       	subi	r24, 0xFF	; 255
    6bee:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6bf2:	89 13       	cpse	r24, r25
    6bf4:	0e c0       	rjmp	.+28     	; 0x6c12 <__vector_36+0x50>
    6bf6:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOvflCount>
    6bfa:	88 23       	and	r24, r24
    6bfc:	31 f0       	breq	.+12     	; 0x6c0a <__vector_36+0x48>
    6bfe:	8f 3f       	cpi	r24, 0xFF	; 255
    6c00:	51 f0       	breq	.+20     	; 0x6c16 <__vector_36+0x54>
    6c02:	8f 5f       	subi	r24, 0xFF	; 255
    6c04:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6c08:	06 c0       	rjmp	.+12     	; 0x6c16 <__vector_36+0x54>
    6c0a:	81 e0       	ldi	r24, 0x01	; 1
    6c0c:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6c10:	02 c0       	rjmp	.+4      	; 0x6c16 <__vector_36+0x54>
    6c12:	80 93 44 16 	sts	0x1644, r24	; 0x801644 <midiRxInIndex>
    6c16:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6c1a:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6c1e:	89 17       	cp	r24, r25
    6c20:	30 f4       	brcc	.+12     	; 0x6c2e <__vector_36+0x6c>
    6c22:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6c26:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6c2a:	89 1b       	sub	r24, r25
    6c2c:	05 c0       	rjmp	.+10     	; 0x6c38 <__vector_36+0x76>
    6c2e:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6c32:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6c36:	89 1b       	sub	r24, r25
    6c38:	90 91 41 15 	lds	r25, 0x1541	; 0x801541 <midiRxBuffUsage>
    6c3c:	98 17       	cp	r25, r24
    6c3e:	10 f4       	brcc	.+4      	; 0x6c44 <__vector_36+0x82>
    6c40:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <midiRxBuffUsage>
    6c44:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    6c48:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    6c4c:	01 96       	adiw	r24, 0x01	; 1
    6c4e:	90 93 da 18 	sts	0x18DA, r25	; 0x8018da <midiRxBytesCount+0x1>
    6c52:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <midiRxBytesCount>
    6c56:	ff 91       	pop	r31
    6c58:	ef 91       	pop	r30
    6c5a:	9f 91       	pop	r25
    6c5c:	8f 91       	pop	r24
    6c5e:	0f 90       	pop	r0
    6c60:	0b be       	out	0x3b, r0	; 59
    6c62:	0f 90       	pop	r0
    6c64:	0f be       	out	0x3f, r0	; 63
    6c66:	0f 90       	pop	r0
    6c68:	1f 90       	pop	r1
    6c6a:	18 95       	reti

00006c6c <__vector_37>:
    6c6c:	1f 92       	push	r1
    6c6e:	0f 92       	push	r0
    6c70:	0f b6       	in	r0, 0x3f	; 63
    6c72:	0f 92       	push	r0
    6c74:	11 24       	eor	r1, r1
    6c76:	0b b6       	in	r0, 0x3b	; 59
    6c78:	0f 92       	push	r0
    6c7a:	8f 93       	push	r24
    6c7c:	9f 93       	push	r25
    6c7e:	ef 93       	push	r30
    6c80:	ff 93       	push	r31
    6c82:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c86:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c8a:	98 17       	cp	r25, r24
    6c8c:	b9 f0       	breq	.+46     	; 0x6cbc <__vector_37+0x50>
    6c8e:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c92:	f0 e0       	ldi	r31, 0x00	; 0
    6c94:	ee 5b       	subi	r30, 0xBE	; 190
    6c96:	fa 4e       	sbci	r31, 0xEA	; 234
    6c98:	80 81       	ld	r24, Z
    6c9a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6c9e:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6ca2:	8f 5f       	subi	r24, 0xFF	; 255
    6ca4:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <midiTxOutIndex>
    6ca8:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    6cac:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    6cb0:	01 96       	adiw	r24, 0x01	; 1
    6cb2:	90 93 51 16 	sts	0x1651, r25	; 0x801651 <midiTxBytesCount+0x1>
    6cb6:	80 93 50 16 	sts	0x1650, r24	; 0x801650 <midiTxBytesCount>
    6cba:	05 c0       	rjmp	.+10     	; 0x6cc6 <__vector_37+0x5a>
    6cbc:	e9 ec       	ldi	r30, 0xC9	; 201
    6cbe:	f0 e0       	ldi	r31, 0x00	; 0
    6cc0:	80 81       	ld	r24, Z
    6cc2:	8f 7d       	andi	r24, 0xDF	; 223
    6cc4:	80 83       	st	Z, r24
    6cc6:	ff 91       	pop	r31
    6cc8:	ef 91       	pop	r30
    6cca:	9f 91       	pop	r25
    6ccc:	8f 91       	pop	r24
    6cce:	0f 90       	pop	r0
    6cd0:	0b be       	out	0x3b, r0	; 59
    6cd2:	0f 90       	pop	r0
    6cd4:	0f be       	out	0x3f, r0	; 63
    6cd6:	0f 90       	pop	r0
    6cd8:	1f 90       	pop	r1
    6cda:	18 95       	reti

00006cdc <serial0SER_USBSend>:
    6cdc:	e0 91 d7 18 	lds	r30, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    6ce0:	f0 91 d8 18 	lds	r31, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    6ce4:	a1 ec       	ldi	r26, 0xC1	; 193
    6ce6:	b0 e0       	ldi	r27, 0x00	; 0
    6ce8:	9c 91       	ld	r25, X
    6cea:	9f 7d       	andi	r25, 0xDF	; 223
    6cec:	9c 93       	st	X, r25
    6cee:	af 01       	movw	r20, r30
    6cf0:	4f 5f       	subi	r20, 0xFF	; 255
    6cf2:	5f 4f       	sbci	r21, 0xFF	; 255
    6cf4:	80 83       	st	Z, r24
    6cf6:	83 e1       	ldi	r24, 0x13	; 19
    6cf8:	4c 3e       	cpi	r20, 0xEC	; 236
    6cfa:	58 07       	cpc	r21, r24
    6cfc:	19 f0       	breq	.+6      	; 0x6d04 <serial0SER_USBSend+0x28>
    6cfe:	10 f0       	brcs	.+4      	; 0x6d04 <serial0SER_USBSend+0x28>
    6d00:	4d ee       	ldi	r20, 0xED	; 237
    6d02:	5b e0       	ldi	r21, 0x0B	; 11
    6d04:	9f b7       	in	r25, 0x3f	; 63
    6d06:	f8 94       	cli
    6d08:	81 e0       	ldi	r24, 0x01	; 1
    6d0a:	05 c0       	rjmp	.+10     	; 0x6d16 <serial0SER_USBSend+0x3a>
    6d0c:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    6d10:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    6d14:	80 e0       	ldi	r24, 0x00	; 0
    6d16:	81 11       	cpse	r24, r1
    6d18:	f9 cf       	rjmp	.-14     	; 0x6d0c <serial0SER_USBSend+0x30>
    6d1a:	9f bf       	out	0x3f, r25	; 63
    6d1c:	42 17       	cp	r20, r18
    6d1e:	53 07       	cpc	r21, r19
    6d20:	49 f4       	brne	.+18     	; 0x6d34 <serial0SER_USBSend+0x58>
    6d22:	8f ef       	ldi	r24, 0xFF	; 255
    6d24:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    6d28:	e1 ec       	ldi	r30, 0xC1	; 193
    6d2a:	f0 e0       	ldi	r31, 0x00	; 0
    6d2c:	80 81       	ld	r24, Z
    6d2e:	80 62       	ori	r24, 0x20	; 32
    6d30:	80 83       	st	Z, r24
    6d32:	08 95       	ret
    6d34:	50 93 d8 18 	sts	0x18D8, r21	; 0x8018d8 <serUSBTxInIndex+0x1>
    6d38:	40 93 d7 18 	sts	0x18D7, r20	; 0x8018d7 <serUSBTxInIndex>
    6d3c:	e1 ec       	ldi	r30, 0xC1	; 193
    6d3e:	f0 e0       	ldi	r31, 0x00	; 0
    6d40:	80 81       	ld	r24, Z
    6d42:	80 62       	ori	r24, 0x20	; 32
    6d44:	80 83       	st	Z, r24
    6d46:	08 95       	ret

00006d48 <serial0USB_logMIDIin>:
    6d48:	cf 93       	push	r28
    6d4a:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6d4e:	99 23       	and	r25, r25
    6d50:	61 f0       	breq	.+24     	; 0x6d6a <serial0USB_logMIDIin+0x22>
    6d52:	c8 2f       	mov	r28, r24
    6d54:	89 e6       	ldi	r24, 0x69	; 105
    6d56:	c2 df       	rcall	.-124    	; 0x6cdc <serial0SER_USBSend>
    6d58:	8c 2f       	mov	r24, r28
    6d5a:	82 95       	swap	r24
    6d5c:	8f 70       	andi	r24, 0x0F	; 15
    6d5e:	b5 d2       	rcall	.+1386   	; 0x72ca <nibbleToChr>
    6d60:	bd df       	rcall	.-134    	; 0x6cdc <serial0SER_USBSend>
    6d62:	8c 2f       	mov	r24, r28
    6d64:	8f 70       	andi	r24, 0x0F	; 15
    6d66:	b1 d2       	rcall	.+1378   	; 0x72ca <nibbleToChr>
    6d68:	b9 df       	rcall	.-142    	; 0x6cdc <serial0SER_USBSend>
    6d6a:	cf 91       	pop	r28
    6d6c:	08 95       	ret

00006d6e <serial1MIDIReadRx>:
    6d6e:	cf 93       	push	r28
    6d70:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6d74:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6d78:	98 17       	cp	r25, r24
    6d7a:	71 f0       	breq	.+28     	; 0x6d98 <serial1MIDIReadRx+0x2a>
    6d7c:	e0 91 53 16 	lds	r30, 0x1653	; 0x801653 <midiRxOutIndex>
    6d80:	f0 e0       	ldi	r31, 0x00	; 0
    6d82:	ef 5b       	subi	r30, 0xBF	; 191
    6d84:	fb 4e       	sbci	r31, 0xEB	; 235
    6d86:	c0 81       	ld	r28, Z
    6d88:	8c 2f       	mov	r24, r28
    6d8a:	de df       	rcall	.-68     	; 0x6d48 <serial0USB_logMIDIin>
    6d8c:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6d90:	8f 5f       	subi	r24, 0xFF	; 255
    6d92:	80 93 53 16 	sts	0x1653, r24	; 0x801653 <midiRxOutIndex>
    6d96:	01 c0       	rjmp	.+2      	; 0x6d9a <serial1MIDIReadRx+0x2c>
    6d98:	cd ef       	ldi	r28, 0xFD	; 253
    6d9a:	8c 2f       	mov	r24, r28
    6d9c:	cf 91       	pop	r28
    6d9e:	08 95       	ret

00006da0 <serial0USB_logMIDIout>:
    6da0:	cf 93       	push	r28
    6da2:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6da6:	99 23       	and	r25, r25
    6da8:	61 f0       	breq	.+24     	; 0x6dc2 <serial0USB_logMIDIout+0x22>
    6daa:	c8 2f       	mov	r28, r24
    6dac:	8f e6       	ldi	r24, 0x6F	; 111
    6dae:	96 df       	rcall	.-212    	; 0x6cdc <serial0SER_USBSend>
    6db0:	8c 2f       	mov	r24, r28
    6db2:	82 95       	swap	r24
    6db4:	8f 70       	andi	r24, 0x0F	; 15
    6db6:	89 d2       	rcall	.+1298   	; 0x72ca <nibbleToChr>
    6db8:	91 df       	rcall	.-222    	; 0x6cdc <serial0SER_USBSend>
    6dba:	8c 2f       	mov	r24, r28
    6dbc:	8f 70       	andi	r24, 0x0F	; 15
    6dbe:	85 d2       	rcall	.+1290   	; 0x72ca <nibbleToChr>
    6dc0:	8d df       	rcall	.-230    	; 0x6cdc <serial0SER_USBSend>
    6dc2:	cf 91       	pop	r28
    6dc4:	08 95       	ret

00006dc6 <serial1MIDISend>:
    6dc6:	cf 93       	push	r28
    6dc8:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6dcc:	99 23       	and	r25, r25
    6dce:	71 f0       	breq	.+28     	; 0x6dec <serial1MIDISend+0x26>
    6dd0:	88 23       	and	r24, r24
    6dd2:	64 f4       	brge	.+24     	; 0x6dec <serial1MIDISend+0x26>
    6dd4:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <midiTxLastCmd>
    6dd8:	89 17       	cp	r24, r25
    6dda:	09 f4       	brne	.+2      	; 0x6dde <serial1MIDISend+0x18>
    6ddc:	55 c0       	rjmp	.+170    	; 0x6e88 <serial1MIDISend+0xc2>
    6dde:	80 3a       	cpi	r24, 0xA0	; 160
    6de0:	18 f4       	brcc	.+6      	; 0x6de8 <serial1MIDISend+0x22>
    6de2:	80 93 fd 13 	sts	0x13FD, r24	; 0x8013fd <midiTxLastCmd>
    6de6:	02 c0       	rjmp	.+4      	; 0x6dec <serial1MIDISend+0x26>
    6de8:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6dec:	2f b7       	in	r18, 0x3f	; 63
    6dee:	f8 94       	cli
    6df0:	91 e0       	ldi	r25, 0x01	; 1
    6df2:	06 c0       	rjmp	.+12     	; 0x6e00 <serial1MIDISend+0x3a>
    6df4:	ef e2       	ldi	r30, 0x2F	; 47
    6df6:	f2 e0       	ldi	r31, 0x02	; 2
    6df8:	9a e0       	ldi	r25, 0x0A	; 10
    6dfa:	90 8b       	std	Z+16, r25	; 0x10
    6dfc:	11 8a       	std	Z+17, r1	; 0x11
    6dfe:	90 e0       	ldi	r25, 0x00	; 0
    6e00:	91 11       	cpse	r25, r1
    6e02:	f8 cf       	rjmp	.-16     	; 0x6df4 <serial1MIDISend+0x2e>
    6e04:	c8 2f       	mov	r28, r24
    6e06:	2f bf       	out	0x3f, r18	; 63
    6e08:	e9 ec       	ldi	r30, 0xC9	; 201
    6e0a:	f0 e0       	ldi	r31, 0x00	; 0
    6e0c:	80 81       	ld	r24, Z
    6e0e:	8f 7d       	andi	r24, 0xDF	; 223
    6e10:	80 83       	st	Z, r24
    6e12:	8c 2f       	mov	r24, r28
    6e14:	c5 df       	rcall	.-118    	; 0x6da0 <serial0USB_logMIDIout>
    6e16:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e1a:	f0 e0       	ldi	r31, 0x00	; 0
    6e1c:	ee 5b       	subi	r30, 0xBE	; 190
    6e1e:	fa 4e       	sbci	r31, 0xEA	; 234
    6e20:	c0 83       	st	Z, r28
    6e22:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e26:	8f 5f       	subi	r24, 0xFF	; 255
    6e28:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e2c:	89 13       	cpse	r24, r25
    6e2e:	0e c0       	rjmp	.+28     	; 0x6e4c <serial1MIDISend+0x86>
    6e30:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <midiTxOvflCount>
    6e34:	88 23       	and	r24, r24
    6e36:	31 f0       	breq	.+12     	; 0x6e44 <serial1MIDISend+0x7e>
    6e38:	8f 3f       	cpi	r24, 0xFF	; 255
    6e3a:	51 f0       	breq	.+20     	; 0x6e50 <serial1MIDISend+0x8a>
    6e3c:	8f 5f       	subi	r24, 0xFF	; 255
    6e3e:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6e42:	06 c0       	rjmp	.+12     	; 0x6e50 <serial1MIDISend+0x8a>
    6e44:	81 e0       	ldi	r24, 0x01	; 1
    6e46:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6e4a:	02 c0       	rjmp	.+4      	; 0x6e50 <serial1MIDISend+0x8a>
    6e4c:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <midiTxInIndex>
    6e50:	90 91 ef 13 	lds	r25, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e54:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e58:	89 17       	cp	r24, r25
    6e5a:	30 f4       	brcc	.+12     	; 0x6e68 <serial1MIDISend+0xa2>
    6e5c:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e60:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e64:	89 1b       	sub	r24, r25
    6e66:	05 c0       	rjmp	.+10     	; 0x6e72 <serial1MIDISend+0xac>
    6e68:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6e6c:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6e70:	89 1b       	sub	r24, r25
    6e72:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <midiTxBuffUsage>
    6e76:	98 17       	cp	r25, r24
    6e78:	10 f4       	brcc	.+4      	; 0x6e7e <serial1MIDISend+0xb8>
    6e7a:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <midiTxBuffUsage>
    6e7e:	e9 ec       	ldi	r30, 0xC9	; 201
    6e80:	f0 e0       	ldi	r31, 0x00	; 0
    6e82:	80 81       	ld	r24, Z
    6e84:	80 62       	ori	r24, 0x20	; 32
    6e86:	80 83       	st	Z, r24
    6e88:	cf 91       	pop	r28
    6e8a:	08 95       	ret

00006e8c <serial0USB_logPipeIn>:
    6e8c:	cf 93       	push	r28
    6e8e:	df 93       	push	r29
    6e90:	20 91 52 16 	lds	r18, 0x1652	; 0x801652 <serUSB_Active>
    6e94:	22 23       	and	r18, r18
    6e96:	a9 f0       	breq	.+42     	; 0x6ec2 <serial0USB_logPipeIn+0x36>
    6e98:	c9 2f       	mov	r28, r25
    6e9a:	d8 2f       	mov	r29, r24
    6e9c:	8b e6       	ldi	r24, 0x6B	; 107
    6e9e:	1e df       	rcall	.-452    	; 0x6cdc <serial0SER_USBSend>
    6ea0:	8c 2f       	mov	r24, r28
    6ea2:	82 95       	swap	r24
    6ea4:	8f 70       	andi	r24, 0x0F	; 15
    6ea6:	11 d2       	rcall	.+1058   	; 0x72ca <nibbleToChr>
    6ea8:	19 df       	rcall	.-462    	; 0x6cdc <serial0SER_USBSend>
    6eaa:	cf 70       	andi	r28, 0x0F	; 15
    6eac:	8c 2f       	mov	r24, r28
    6eae:	0d d2       	rcall	.+1050   	; 0x72ca <nibbleToChr>
    6eb0:	15 df       	rcall	.-470    	; 0x6cdc <serial0SER_USBSend>
    6eb2:	8d 2f       	mov	r24, r29
    6eb4:	82 95       	swap	r24
    6eb6:	8f 70       	andi	r24, 0x0F	; 15
    6eb8:	08 d2       	rcall	.+1040   	; 0x72ca <nibbleToChr>
    6eba:	10 df       	rcall	.-480    	; 0x6cdc <serial0SER_USBSend>
    6ebc:	8c 2f       	mov	r24, r28
    6ebe:	05 d2       	rcall	.+1034   	; 0x72ca <nibbleToChr>
    6ec0:	0d df       	rcall	.-486    	; 0x6cdc <serial0SER_USBSend>
    6ec2:	df 91       	pop	r29
    6ec4:	cf 91       	pop	r28
    6ec6:	08 95       	ret

00006ec8 <serial0SER_USB_sendStringP>:
    6ec8:	cf 93       	push	r28
    6eca:	df 93       	push	r29
    6ecc:	fc 01       	movw	r30, r24
    6ece:	02 c0       	rjmp	.+4      	; 0x6ed4 <serial0SER_USB_sendStringP+0xc>
    6ed0:	05 df       	rcall	.-502    	; 0x6cdc <serial0SER_USBSend>
    6ed2:	fe 01       	movw	r30, r28
    6ed4:	ef 01       	movw	r28, r30
    6ed6:	21 96       	adiw	r28, 0x01	; 1
    6ed8:	84 91       	lpm	r24, Z
    6eda:	88 23       	and	r24, r24
    6edc:	21 f0       	breq	.+8      	; 0x6ee6 <serial0SER_USB_sendStringP+0x1e>
    6ede:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6ee2:	9f 3f       	cpi	r25, 0xFF	; 255
    6ee4:	a9 f7       	brne	.-22     	; 0x6ed0 <serial0SER_USB_sendStringP+0x8>
    6ee6:	df 91       	pop	r29
    6ee8:	cf 91       	pop	r28
    6eea:	08 95       	ret

00006eec <serial0SER_USB_sendCRLF>:
    6eec:	8e ef       	ldi	r24, 0xFE	; 254
    6eee:	92 e1       	ldi	r25, 0x12	; 18
    6ef0:	eb cf       	rjmp	.-42     	; 0x6ec8 <serial0SER_USB_sendStringP>
    6ef2:	08 95       	ret

00006ef4 <init_Serial0SerUSB>:
    6ef4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6ef8:	88 e0       	ldi	r24, 0x08	; 8
    6efa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    6efe:	e1 ec       	ldi	r30, 0xC1	; 193
    6f00:	f0 e0       	ldi	r31, 0x00	; 0
    6f02:	80 81       	ld	r24, Z
    6f04:	88 69       	ori	r24, 0x98	; 152
    6f06:	80 83       	st	Z, r24
    6f08:	e2 ec       	ldi	r30, 0xC2	; 194
    6f0a:	f0 e0       	ldi	r31, 0x00	; 0
    6f0c:	80 81       	ld	r24, Z
    6f0e:	86 60       	ori	r24, 0x06	; 6
    6f10:	80 83       	st	Z, r24
    6f12:	81 e0       	ldi	r24, 0x01	; 1
    6f14:	94 e1       	ldi	r25, 0x14	; 20
    6f16:	90 93 55 16 	sts	0x1655, r25	; 0x801655 <serUSBRxInIndex+0x1>
    6f1a:	80 93 54 16 	sts	0x1654, r24	; 0x801654 <serUSBRxInIndex>
    6f1e:	90 93 48 16 	sts	0x1648, r25	; 0x801648 <serUSBRxOutIndex+0x1>
    6f22:	80 93 47 16 	sts	0x1647, r24	; 0x801647 <serUSBRxOutIndex>
    6f26:	8d ee       	ldi	r24, 0xED	; 237
    6f28:	9b e0       	ldi	r25, 0x0B	; 11
    6f2a:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    6f2e:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    6f32:	90 93 d8 18 	sts	0x18D8, r25	; 0x8018d8 <serUSBTxInIndex+0x1>
    6f36:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <serUSBTxInIndex>
    6f3a:	10 92 49 16 	sts	0x1649, r1	; 0x801649 <serUSBOvflFlag>
    6f3e:	0e 94 30 0b 	call	0x1660	; 0x1660 <eeprom_ReadUSB>
    6f42:	8f 3f       	cpi	r24, 0xFF	; 255
    6f44:	41 f4       	brne	.+16     	; 0x6f56 <init_Serial0SerUSB+0x62>
    6f46:	10 92 52 16 	sts	0x1652, r1	; 0x801652 <serUSB_Active>
    6f4a:	40 e0       	ldi	r20, 0x00	; 0
    6f4c:	50 e0       	ldi	r21, 0x00	; 0
    6f4e:	64 e0       	ldi	r22, 0x04	; 4
    6f50:	81 e0       	ldi	r24, 0x01	; 1
    6f52:	0e 94 3f 15 	call	0x2a7e	; 0x2a7e <log_putError>
    6f56:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    6f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f5c:	41 f4       	brne	.+16     	; 0x6f6e <init_Serial0SerUSB+0x7a>
    6f5e:	8a e6       	ldi	r24, 0x6A	; 106
    6f60:	93 e0       	ldi	r25, 0x03	; 3
    6f62:	b2 df       	rcall	.-156    	; 0x6ec8 <serial0SER_USB_sendStringP>
    6f64:	8e e9       	ldi	r24, 0x9E	; 158
    6f66:	92 e1       	ldi	r25, 0x12	; 18
    6f68:	af df       	rcall	.-162    	; 0x6ec8 <serial0SER_USB_sendStringP>
    6f6a:	c0 df       	rcall	.-128    	; 0x6eec <serial0SER_USB_sendCRLF>
    6f6c:	bf cf       	rjmp	.-130    	; 0x6eec <serial0SER_USB_sendCRLF>
    6f6e:	08 95       	ret

00006f70 <serial0SER_USB_sendString>:
    6f70:	1f 93       	push	r17
    6f72:	cf 93       	push	r28
    6f74:	df 93       	push	r29
    6f76:	ec 01       	movw	r28, r24
    6f78:	10 e5       	ldi	r17, 0x50	; 80
    6f7a:	03 c0       	rjmp	.+6      	; 0x6f82 <serial0SER_USB_sendString+0x12>
    6f7c:	21 96       	adiw	r28, 0x01	; 1
    6f7e:	ae de       	rcall	.-676    	; 0x6cdc <serial0SER_USBSend>
    6f80:	11 50       	subi	r17, 0x01	; 1
    6f82:	88 81       	ld	r24, Y
    6f84:	88 23       	and	r24, r24
    6f86:	31 f0       	breq	.+12     	; 0x6f94 <serial0SER_USB_sendString+0x24>
    6f88:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6f8c:	9f 3f       	cpi	r25, 0xFF	; 255
    6f8e:	11 f0       	breq	.+4      	; 0x6f94 <serial0SER_USB_sendString+0x24>
    6f90:	11 11       	cpse	r17, r1
    6f92:	f4 cf       	rjmp	.-24     	; 0x6f7c <serial0SER_USB_sendString+0xc>
    6f94:	df 91       	pop	r29
    6f96:	cf 91       	pop	r28
    6f98:	1f 91       	pop	r17
    6f9a:	08 95       	ret

00006f9c <__vector_25>:
    6f9c:	1f 92       	push	r1
    6f9e:	0f 92       	push	r0
    6fa0:	0f b6       	in	r0, 0x3f	; 63
    6fa2:	0f 92       	push	r0
    6fa4:	11 24       	eor	r1, r1
    6fa6:	0b b6       	in	r0, 0x3b	; 59
    6fa8:	0f 92       	push	r0
    6faa:	2f 93       	push	r18
    6fac:	3f 93       	push	r19
    6fae:	4f 93       	push	r20
    6fb0:	5f 93       	push	r21
    6fb2:	8f 93       	push	r24
    6fb4:	9f 93       	push	r25
    6fb6:	ef 93       	push	r30
    6fb8:	ff 93       	push	r31
    6fba:	e0 91 54 16 	lds	r30, 0x1654	; 0x801654 <serUSBRxInIndex>
    6fbe:	f0 91 55 16 	lds	r31, 0x1655	; 0x801655 <serUSBRxInIndex+0x1>
    6fc2:	af 01       	movw	r20, r30
    6fc4:	4f 5f       	subi	r20, 0xFF	; 255
    6fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    6fc8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6fcc:	80 83       	st	Z, r24
    6fce:	84 e1       	ldi	r24, 0x14	; 20
    6fd0:	40 34       	cpi	r20, 0x40	; 64
    6fd2:	58 07       	cpc	r21, r24
    6fd4:	19 f0       	breq	.+6      	; 0x6fdc <__vector_25+0x40>
    6fd6:	10 f0       	brcs	.+4      	; 0x6fdc <__vector_25+0x40>
    6fd8:	41 e0       	ldi	r20, 0x01	; 1
    6fda:	54 e1       	ldi	r21, 0x14	; 20
    6fdc:	9f b7       	in	r25, 0x3f	; 63
    6fde:	f8 94       	cli
    6fe0:	81 e0       	ldi	r24, 0x01	; 1
    6fe2:	05 c0       	rjmp	.+10     	; 0x6fee <__vector_25+0x52>
    6fe4:	20 91 47 16 	lds	r18, 0x1647	; 0x801647 <serUSBRxOutIndex>
    6fe8:	30 91 48 16 	lds	r19, 0x1648	; 0x801648 <serUSBRxOutIndex+0x1>
    6fec:	80 e0       	ldi	r24, 0x00	; 0
    6fee:	81 11       	cpse	r24, r1
    6ff0:	f9 cf       	rjmp	.-14     	; 0x6fe4 <__vector_25+0x48>
    6ff2:	9f bf       	out	0x3f, r25	; 63
    6ff4:	42 17       	cp	r20, r18
    6ff6:	53 07       	cpc	r21, r19
    6ff8:	21 f4       	brne	.+8      	; 0x7002 <__vector_25+0x66>
    6ffa:	8f ef       	ldi	r24, 0xFF	; 255
    6ffc:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    7000:	04 c0       	rjmp	.+8      	; 0x700a <__vector_25+0x6e>
    7002:	50 93 55 16 	sts	0x1655, r21	; 0x801655 <serUSBRxInIndex+0x1>
    7006:	40 93 54 16 	sts	0x1654, r20	; 0x801654 <serUSBRxInIndex>
    700a:	ff 91       	pop	r31
    700c:	ef 91       	pop	r30
    700e:	9f 91       	pop	r25
    7010:	8f 91       	pop	r24
    7012:	5f 91       	pop	r21
    7014:	4f 91       	pop	r20
    7016:	3f 91       	pop	r19
    7018:	2f 91       	pop	r18
    701a:	0f 90       	pop	r0
    701c:	0b be       	out	0x3b, r0	; 59
    701e:	0f 90       	pop	r0
    7020:	0f be       	out	0x3f, r0	; 63
    7022:	0f 90       	pop	r0
    7024:	1f 90       	pop	r1
    7026:	18 95       	reti

00007028 <__vector_26>:
    7028:	1f 92       	push	r1
    702a:	0f 92       	push	r0
    702c:	0f b6       	in	r0, 0x3f	; 63
    702e:	0f 92       	push	r0
    7030:	11 24       	eor	r1, r1
    7032:	0b b6       	in	r0, 0x3b	; 59
    7034:	0f 92       	push	r0
    7036:	2f 93       	push	r18
    7038:	8f 93       	push	r24
    703a:	9f 93       	push	r25
    703c:	ef 93       	push	r30
    703e:	ff 93       	push	r31
    7040:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    7044:	f0 91 ee 13 	lds	r31, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    7048:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    704c:	90 91 d8 18 	lds	r25, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    7050:	e8 17       	cp	r30, r24
    7052:	f9 07       	cpc	r31, r25
    7054:	89 f0       	breq	.+34     	; 0x7078 <__vector_26+0x50>
    7056:	cf 01       	movw	r24, r30
    7058:	01 96       	adiw	r24, 0x01	; 1
    705a:	20 81       	ld	r18, Z
    705c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7060:	23 e1       	ldi	r18, 0x13	; 19
    7062:	8c 3e       	cpi	r24, 0xEC	; 236
    7064:	92 07       	cpc	r25, r18
    7066:	19 f0       	breq	.+6      	; 0x706e <__vector_26+0x46>
    7068:	10 f0       	brcs	.+4      	; 0x706e <__vector_26+0x46>
    706a:	8d ee       	ldi	r24, 0xED	; 237
    706c:	9b e0       	ldi	r25, 0x0B	; 11
    706e:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    7072:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    7076:	05 c0       	rjmp	.+10     	; 0x7082 <__vector_26+0x5a>
    7078:	e1 ec       	ldi	r30, 0xC1	; 193
    707a:	f0 e0       	ldi	r31, 0x00	; 0
    707c:	80 81       	ld	r24, Z
    707e:	8f 7d       	andi	r24, 0xDF	; 223
    7080:	80 83       	st	Z, r24
    7082:	ff 91       	pop	r31
    7084:	ef 91       	pop	r30
    7086:	9f 91       	pop	r25
    7088:	8f 91       	pop	r24
    708a:	2f 91       	pop	r18
    708c:	0f 90       	pop	r0
    708e:	0b be       	out	0x3b, r0	; 59
    7090:	0f 90       	pop	r0
    7092:	0f be       	out	0x3f, r0	; 63
    7094:	0f 90       	pop	r0
    7096:	1f 90       	pop	r1
    7098:	18 95       	reti

0000709a <init_Serial3SerESP>:
    709a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    709e:	88 e0       	ldi	r24, 0x08	; 8
    70a0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    70a4:	e1 e3       	ldi	r30, 0x31	; 49
    70a6:	f1 e0       	ldi	r31, 0x01	; 1
    70a8:	80 81       	ld	r24, Z
    70aa:	88 69       	ori	r24, 0x98	; 152
    70ac:	80 83       	st	Z, r24
    70ae:	e2 e3       	ldi	r30, 0x32	; 50
    70b0:	f1 e0       	ldi	r31, 0x01	; 1
    70b2:	80 81       	ld	r24, Z
    70b4:	86 60       	ori	r24, 0x06	; 6
    70b6:	80 83       	st	Z, r24
    70b8:	87 e5       	ldi	r24, 0x57	; 87
    70ba:	96 e1       	ldi	r25, 0x16	; 22
    70bc:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <serESPRxInIndex+0x1>
    70c0:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <serESPRxInIndex>
    70c4:	90 93 fa 13 	sts	0x13FA, r25	; 0x8013fa <serESPRxOutIndex+0x1>
    70c8:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <serESPRxOutIndex>
    70cc:	87 ed       	ldi	r24, 0xD7	; 215
    70ce:	96 e1       	ldi	r25, 0x16	; 22
    70d0:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    70d4:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    70d8:	90 93 46 16 	sts	0x1646, r25	; 0x801646 <serESPTxInIndex+0x1>
    70dc:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <serESPTxInIndex>
    70e0:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <serESPOvflFlag>
    70e4:	8f ef       	ldi	r24, 0xFF	; 255
    70e6:	80 93 4e 16 	sts	0x164E, r24	; 0x80164e <serESP_Active>
    70ea:	80 e0       	ldi	r24, 0x00	; 0
    70ec:	07 c0       	rjmp	.+14     	; 0x70fc <init_Serial3SerESP+0x62>
    70ee:	e8 2f       	mov	r30, r24
    70f0:	f0 e0       	ldi	r31, 0x00	; 0
    70f2:	ef 50       	subi	r30, 0x0F	; 15
    70f4:	fc 4e       	sbci	r31, 0xEC	; 236
    70f6:	9f ef       	ldi	r25, 0xFF	; 255
    70f8:	90 83       	st	Z, r25
    70fa:	8f 5f       	subi	r24, 0xFF	; 255
    70fc:	88 30       	cpi	r24, 0x08	; 8
    70fe:	b8 f3       	brcs	.-18     	; 0x70ee <init_Serial3SerESP+0x54>
    7100:	08 95       	ret

00007102 <serial3SER_ESPSend>:
    7102:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <serESPTxInIndex>
    7106:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    710a:	a1 e3       	ldi	r26, 0x31	; 49
    710c:	b1 e0       	ldi	r27, 0x01	; 1
    710e:	9c 91       	ld	r25, X
    7110:	9f 7d       	andi	r25, 0xDF	; 223
    7112:	9c 93       	st	X, r25
    7114:	af 01       	movw	r20, r30
    7116:	4f 5f       	subi	r20, 0xFF	; 255
    7118:	5f 4f       	sbci	r21, 0xFF	; 255
    711a:	80 83       	st	Z, r24
    711c:	88 e1       	ldi	r24, 0x18	; 24
    711e:	46 3d       	cpi	r20, 0xD6	; 214
    7120:	58 07       	cpc	r21, r24
    7122:	19 f0       	breq	.+6      	; 0x712a <serial3SER_ESPSend+0x28>
    7124:	10 f0       	brcs	.+4      	; 0x712a <serial3SER_ESPSend+0x28>
    7126:	47 ed       	ldi	r20, 0xD7	; 215
    7128:	56 e1       	ldi	r21, 0x16	; 22
    712a:	9f b7       	in	r25, 0x3f	; 63
    712c:	f8 94       	cli
    712e:	81 e0       	ldi	r24, 0x01	; 1
    7130:	05 c0       	rjmp	.+10     	; 0x713c <serial3SER_ESPSend+0x3a>
    7132:	20 91 42 16 	lds	r18, 0x1642	; 0x801642 <serESPTxOutIndex>
    7136:	30 91 43 16 	lds	r19, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
    713a:	80 e0       	ldi	r24, 0x00	; 0
    713c:	81 11       	cpse	r24, r1
    713e:	f9 cf       	rjmp	.-14     	; 0x7132 <serial3SER_ESPSend+0x30>
    7140:	9f bf       	out	0x3f, r25	; 63
    7142:	42 17       	cp	r20, r18
    7144:	53 07       	cpc	r21, r19
    7146:	49 f4       	brne	.+18     	; 0x715a <serial3SER_ESPSend+0x58>
    7148:	8f ef       	ldi	r24, 0xFF	; 255
    714a:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
    714e:	e1 e3       	ldi	r30, 0x31	; 49
    7150:	f1 e0       	ldi	r31, 0x01	; 1
    7152:	80 81       	ld	r24, Z
    7154:	80 62       	ori	r24, 0x20	; 32
    7156:	80 83       	st	Z, r24
    7158:	08 95       	ret
    715a:	50 93 46 16 	sts	0x1646, r21	; 0x801646 <serESPTxInIndex+0x1>
    715e:	40 93 45 16 	sts	0x1645, r20	; 0x801645 <serESPTxInIndex>
    7162:	e1 e3       	ldi	r30, 0x31	; 49
    7164:	f1 e0       	ldi	r31, 0x01	; 1
    7166:	80 81       	ld	r24, Z
    7168:	80 62       	ori	r24, 0x20	; 32
    716a:	80 83       	st	Z, r24
    716c:	08 95       	ret

0000716e <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    716e:	e0 91 f9 13 	lds	r30, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    7172:	f0 91 fa 13 	lds	r31, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    7176:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <serESPRxInIndex>
    717a:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
    717e:	e8 17       	cp	r30, r24
    7180:	f9 07       	cpc	r31, r25
    7182:	81 f0       	breq	.+32     	; 0x71a4 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    7184:	9f 01       	movw	r18, r30
    7186:	2f 5f       	subi	r18, 0xFF	; 255
    7188:	3f 4f       	sbci	r19, 0xFF	; 255
    718a:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    718c:	96 e1       	ldi	r25, 0x16	; 22
    718e:	26 3d       	cpi	r18, 0xD6	; 214
    7190:	39 07       	cpc	r19, r25
    7192:	19 f0       	breq	.+6      	; 0x719a <serial3SER_ESPReadRx+0x2c>
    7194:	10 f0       	brcs	.+4      	; 0x719a <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    7196:	27 e5       	ldi	r18, 0x57	; 87
    7198:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    719a:	30 93 fa 13 	sts	0x13FA, r19	; 0x8013fa <serESPRxOutIndex+0x1>
    719e:	20 93 f9 13 	sts	0x13F9, r18	; 0x8013f9 <serESPRxOutIndex>
    71a2:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    71a4:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    71a6:	08 95       	ret

000071a8 <__vector_54>:

ISR(USART3_RX_vect) {
    71a8:	1f 92       	push	r1
    71aa:	0f 92       	push	r0
    71ac:	0f b6       	in	r0, 0x3f	; 63
    71ae:	0f 92       	push	r0
    71b0:	11 24       	eor	r1, r1
    71b2:	0b b6       	in	r0, 0x3b	; 59
    71b4:	0f 92       	push	r0
    71b6:	2f 93       	push	r18
    71b8:	3f 93       	push	r19
    71ba:	4f 93       	push	r20
    71bc:	5f 93       	push	r21
    71be:	6f 93       	push	r22
    71c0:	8f 93       	push	r24
    71c2:	9f 93       	push	r25
    71c4:	af 93       	push	r26
    71c6:	bf 93       	push	r27
    71c8:	ef 93       	push	r30
    71ca:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    71cc:	e0 91 fe 13 	lds	r30, 0x13FE	; 0x8013fe <serESPRxInIndex>
    71d0:	f0 91 ff 13 	lds	r31, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    71d4:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    71d8:	af 01       	movw	r20, r30
    71da:	4f 5f       	subi	r20, 0xFF	; 255
    71dc:	5f 4f       	sbci	r21, 0xFF	; 255
    71de:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    71e0:	86 e1       	ldi	r24, 0x16	; 22
    71e2:	46 3d       	cpi	r20, 0xD6	; 214
    71e4:	58 07       	cpc	r21, r24
    71e6:	19 f0       	breq	.+6      	; 0x71ee <__vector_54+0x46>
    71e8:	10 f0       	brcs	.+4      	; 0x71ee <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    71ea:	47 e5       	ldi	r20, 0x57	; 87
    71ec:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    71ee:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    71f0:	f8 94       	cli
    71f2:	81 e0       	ldi	r24, 0x01	; 1
    71f4:	05 c0       	rjmp	.+10     	; 0x7200 <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    71f6:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    71fa:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    71fe:	80 e0       	ldi	r24, 0x00	; 0
    7200:	81 11       	cpse	r24, r1
    7202:	f9 cf       	rjmp	.-14     	; 0x71f6 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7204:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    7206:	42 17       	cp	r20, r18
    7208:	53 07       	cpc	r21, r19
    720a:	39 f4       	brne	.+14     	; 0x721a <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    720c:	8f ef       	ldi	r24, 0xFF	; 255
    720e:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7212:	80 e0       	ldi	r24, 0x00	; 0
    7214:	a8 ef       	ldi	r26, 0xF8	; 248
    7216:	b3 e1       	ldi	r27, 0x13	; 19
    7218:	0a c0       	rjmp	.+20     	; 0x722e <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    721a:	50 93 ff 13 	sts	0x13FF, r21	; 0x8013ff <serESPRxInIndex+0x1>
    721e:	40 93 fe 13 	sts	0x13FE, r20	; 0x8013fe <serESPRxInIndex>
    7222:	f7 cf       	rjmp	.-18     	; 0x7212 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    7224:	fd 01       	movw	r30, r26
    7226:	92 91       	ld	r25, -Z
    7228:	9c 93       	st	X, r25
		inpBufferPtr--;
    722a:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    722c:	8f 5f       	subi	r24, 0xFF	; 255
    722e:	87 30       	cpi	r24, 0x07	; 7
    7230:	c8 f3       	brcs	.-14     	; 0x7224 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    7232:	6c 93       	st	X, r22
}
    7234:	ff 91       	pop	r31
    7236:	ef 91       	pop	r30
    7238:	bf 91       	pop	r27
    723a:	af 91       	pop	r26
    723c:	9f 91       	pop	r25
    723e:	8f 91       	pop	r24
    7240:	6f 91       	pop	r22
    7242:	5f 91       	pop	r21
    7244:	4f 91       	pop	r20
    7246:	3f 91       	pop	r19
    7248:	2f 91       	pop	r18
    724a:	0f 90       	pop	r0
    724c:	0b be       	out	0x3b, r0	; 59
    724e:	0f 90       	pop	r0
    7250:	0f be       	out	0x3f, r0	; 63
    7252:	0f 90       	pop	r0
    7254:	1f 90       	pop	r1
    7256:	18 95       	reti

00007258 <__vector_55>:

ISR(USART3_UDRE_vect) {
    7258:	1f 92       	push	r1
    725a:	0f 92       	push	r0
    725c:	0f b6       	in	r0, 0x3f	; 63
    725e:	0f 92       	push	r0
    7260:	11 24       	eor	r1, r1
    7262:	0b b6       	in	r0, 0x3b	; 59
    7264:	0f 92       	push	r0
    7266:	2f 93       	push	r18
    7268:	8f 93       	push	r24
    726a:	9f 93       	push	r25
    726c:	ef 93       	push	r30
    726e:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    7270:	e0 91 42 16 	lds	r30, 0x1642	; 0x801642 <serESPTxOutIndex>
    7274:	f0 91 43 16 	lds	r31, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    7278:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <serESPTxInIndex>
    727c:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    7280:	e8 17       	cp	r30, r24
    7282:	f9 07       	cpc	r31, r25
    7284:	89 f0       	breq	.+34     	; 0x72a8 <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    7286:	cf 01       	movw	r24, r30
    7288:	01 96       	adiw	r24, 0x01	; 1
    728a:	20 81       	ld	r18, Z
    728c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    7290:	28 e1       	ldi	r18, 0x18	; 24
    7292:	86 3d       	cpi	r24, 0xD6	; 214
    7294:	92 07       	cpc	r25, r18
    7296:	19 f0       	breq	.+6      	; 0x729e <__vector_55+0x46>
    7298:	10 f0       	brcs	.+4      	; 0x729e <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    729a:	87 ed       	ldi	r24, 0xD7	; 215
    729c:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    729e:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    72a2:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    72a6:	05 c0       	rjmp	.+10     	; 0x72b2 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    72a8:	e1 e3       	ldi	r30, 0x31	; 49
    72aa:	f1 e0       	ldi	r31, 0x01	; 1
    72ac:	80 81       	ld	r24, Z
    72ae:	8f 7d       	andi	r24, 0xDF	; 223
    72b0:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    72b2:	ff 91       	pop	r31
    72b4:	ef 91       	pop	r30
    72b6:	9f 91       	pop	r25
    72b8:	8f 91       	pop	r24
    72ba:	2f 91       	pop	r18
    72bc:	0f 90       	pop	r0
    72be:	0b be       	out	0x3b, r0	; 59
    72c0:	0f 90       	pop	r0
    72c2:	0f be       	out	0x3f, r0	; 63
    72c4:	0f 90       	pop	r0
    72c6:	1f 90       	pop	r1
    72c8:	18 95       	reti

000072ca <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    72ca:	8a 30       	cpi	r24, 0x0A	; 10
    72cc:	10 f0       	brcs	.+4      	; 0x72d2 <nibbleToChr+0x8>
    72ce:	89 5c       	subi	r24, 0xC9	; 201
    72d0:	08 95       	ret
    72d2:	80 5d       	subi	r24, 0xD0	; 208
    72d4:	08 95       	ret

000072d6 <lcd_setCG>:
    72d6:	ef 92       	push	r14
    72d8:	ff 92       	push	r15
    72da:	1f 93       	push	r17
    72dc:	cf 93       	push	r28
    72de:	df 93       	push	r29
    72e0:	eb 01       	movw	r28, r22
    72e2:	90 e0       	ldi	r25, 0x00	; 0
    72e4:	88 0f       	add	r24, r24
    72e6:	99 1f       	adc	r25, r25
    72e8:	88 0f       	add	r24, r24
    72ea:	99 1f       	adc	r25, r25
    72ec:	88 0f       	add	r24, r24
    72ee:	99 1f       	adc	r25, r25
    72f0:	80 64       	ori	r24, 0x40	; 64
    72f2:	0e 94 8d 12 	call	0x251a	; 0x251a <lcd_write_command>
    72f6:	10 e0       	ldi	r17, 0x00	; 0
    72f8:	0a c0       	rjmp	.+20     	; 0x730e <lcd_setCG+0x38>
    72fa:	7e 01       	movw	r14, r28
    72fc:	8f ef       	ldi	r24, 0xFF	; 255
    72fe:	e8 1a       	sub	r14, r24
    7300:	f8 0a       	sbc	r15, r24
    7302:	fe 01       	movw	r30, r28
    7304:	84 91       	lpm	r24, Z
    7306:	0e 94 69 12 	call	0x24d2	; 0x24d2 <lcd_write_character>
    730a:	1f 5f       	subi	r17, 0xFF	; 255
    730c:	e7 01       	movw	r28, r14
    730e:	18 30       	cpi	r17, 0x08	; 8
    7310:	a0 f3       	brcs	.-24     	; 0x72fa <lcd_setCG+0x24>
    7312:	df 91       	pop	r29
    7314:	cf 91       	pop	r28
    7316:	1f 91       	pop	r17
    7318:	ff 90       	pop	r15
    731a:	ef 90       	pop	r14
    731c:	08 95       	ret

0000731e <lcd_initCG>:
    731e:	66 ef       	ldi	r22, 0xF6	; 246
    7320:	72 e1       	ldi	r23, 0x12	; 18
    7322:	80 e0       	ldi	r24, 0x00	; 0
    7324:	d8 df       	rcall	.-80     	; 0x72d6 <lcd_setCG>
    7326:	6e ee       	ldi	r22, 0xEE	; 238
    7328:	72 e1       	ldi	r23, 0x12	; 18
    732a:	81 e0       	ldi	r24, 0x01	; 1
    732c:	d4 df       	rcall	.-88     	; 0x72d6 <lcd_setCG>
    732e:	66 ee       	ldi	r22, 0xE6	; 230
    7330:	72 e1       	ldi	r23, 0x12	; 18
    7332:	82 e0       	ldi	r24, 0x02	; 2
    7334:	d0 cf       	rjmp	.-96     	; 0x72d6 <lcd_setCG>
    7336:	08 95       	ret

00007338 <lcd_hexout>:
    7338:	cf 93       	push	r28
    733a:	c8 2f       	mov	r28, r24
    733c:	82 95       	swap	r24
    733e:	8f 70       	andi	r24, 0x0F	; 15
    7340:	8a 30       	cpi	r24, 0x0A	; 10
    7342:	10 f0       	brcs	.+4      	; 0x7348 <lcd_hexout+0x10>
    7344:	89 5c       	subi	r24, 0xC9	; 201
    7346:	01 c0       	rjmp	.+2      	; 0x734a <lcd_hexout+0x12>
    7348:	80 5d       	subi	r24, 0xD0	; 208
    734a:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    734e:	cf 70       	andi	r28, 0x0F	; 15
    7350:	ca 30       	cpi	r28, 0x0A	; 10
    7352:	18 f0       	brcs	.+6      	; 0x735a <lcd_hexout+0x22>
    7354:	87 e3       	ldi	r24, 0x37	; 55
    7356:	8c 0f       	add	r24, r28
    7358:	02 c0       	rjmp	.+4      	; 0x735e <lcd_hexout+0x26>
    735a:	80 e3       	ldi	r24, 0x30	; 48
    735c:	8c 0f       	add	r24, r28
    735e:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7362:	cf 91       	pop	r28
    7364:	08 95       	ret

00007366 <lcd_longout>:
    7366:	cf 93       	push	r28
    7368:	df 93       	push	r29
    736a:	d3 e0       	ldi	r29, 0x03	; 3
    736c:	1c c0       	rjmp	.+56     	; 0x73a6 <lcd_longout+0x40>
    736e:	ed 2f       	mov	r30, r29
    7370:	0d 2e       	mov	r0, r29
    7372:	00 0c       	add	r0, r0
    7374:	ff 0b       	sbc	r31, r31
    7376:	e3 52       	subi	r30, 0x23	; 35
    7378:	f7 4e       	sbci	r31, 0xE7	; 231
    737a:	c0 81       	ld	r28, Z
    737c:	8c 2f       	mov	r24, r28
    737e:	82 95       	swap	r24
    7380:	8f 70       	andi	r24, 0x0F	; 15
    7382:	8a 30       	cpi	r24, 0x0A	; 10
    7384:	10 f0       	brcs	.+4      	; 0x738a <lcd_longout+0x24>
    7386:	89 5c       	subi	r24, 0xC9	; 201
    7388:	01 c0       	rjmp	.+2      	; 0x738c <lcd_longout+0x26>
    738a:	80 5d       	subi	r24, 0xD0	; 208
    738c:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7390:	cf 70       	andi	r28, 0x0F	; 15
    7392:	ca 30       	cpi	r28, 0x0A	; 10
    7394:	18 f0       	brcs	.+6      	; 0x739c <lcd_longout+0x36>
    7396:	87 e3       	ldi	r24, 0x37	; 55
    7398:	8c 0f       	add	r24, r28
    739a:	02 c0       	rjmp	.+4      	; 0x73a0 <lcd_longout+0x3a>
    739c:	80 e3       	ldi	r24, 0x30	; 48
    739e:	8c 0f       	add	r24, r28
    73a0:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73a4:	d1 50       	subi	r29, 0x01	; 1
    73a6:	dd 23       	and	r29, r29
    73a8:	14 f7       	brge	.-60     	; 0x736e <lcd_longout+0x8>
    73aa:	df 91       	pop	r29
    73ac:	cf 91       	pop	r28
    73ae:	08 95       	ret

000073b0 <lcd_dec2out>:
    73b0:	cf 93       	push	r28
    73b2:	c8 2f       	mov	r28, r24
    73b4:	84 36       	cpi	r24, 0x64	; 100
    73b6:	50 f0       	brcs	.+20     	; 0x73cc <lcd_dec2out+0x1c>
    73b8:	8d e2       	ldi	r24, 0x2D	; 45
    73ba:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73be:	8d e2       	ldi	r24, 0x2D	; 45
    73c0:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73c4:	0d c0       	rjmp	.+26     	; 0x73e0 <lcd_dec2out+0x30>
    73c6:	ca 50       	subi	r28, 0x0A	; 10
    73c8:	8f 5f       	subi	r24, 0xFF	; 255
    73ca:	01 c0       	rjmp	.+2      	; 0x73ce <lcd_dec2out+0x1e>
    73cc:	80 e0       	ldi	r24, 0x00	; 0
    73ce:	ca 30       	cpi	r28, 0x0A	; 10
    73d0:	d0 f7       	brcc	.-12     	; 0x73c6 <lcd_dec2out+0x16>
    73d2:	80 5d       	subi	r24, 0xD0	; 208
    73d4:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73d8:	80 e3       	ldi	r24, 0x30	; 48
    73da:	8c 0f       	add	r24, r28
    73dc:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    73e0:	cf 91       	pop	r28
    73e2:	08 95       	ret

000073e4 <putChar_Dec2>:
    73e4:	84 36       	cpi	r24, 0x64	; 100
    73e6:	58 f0       	brcs	.+22     	; 0x73fe <putChar_Dec2+0x1a>
    73e8:	8d e2       	ldi	r24, 0x2D	; 45
    73ea:	db 01       	movw	r26, r22
    73ec:	8c 93       	st	X, r24
    73ee:	fb 01       	movw	r30, r22
    73f0:	32 96       	adiw	r30, 0x02	; 2
    73f2:	11 96       	adiw	r26, 0x01	; 1
    73f4:	8c 93       	st	X, r24
    73f6:	0f c0       	rjmp	.+30     	; 0x7416 <putChar_Dec2+0x32>
    73f8:	8a 50       	subi	r24, 0x0A	; 10
    73fa:	9f 5f       	subi	r25, 0xFF	; 255
    73fc:	01 c0       	rjmp	.+2      	; 0x7400 <putChar_Dec2+0x1c>
    73fe:	90 e0       	ldi	r25, 0x00	; 0
    7400:	8a 30       	cpi	r24, 0x0A	; 10
    7402:	d0 f7       	brcc	.-12     	; 0x73f8 <putChar_Dec2+0x14>
    7404:	90 5d       	subi	r25, 0xD0	; 208
    7406:	fb 01       	movw	r30, r22
    7408:	90 83       	st	Z, r25
    740a:	32 96       	adiw	r30, 0x02	; 2
    740c:	90 e3       	ldi	r25, 0x30	; 48
    740e:	98 0f       	add	r25, r24
    7410:	db 01       	movw	r26, r22
    7412:	11 96       	adiw	r26, 0x01	; 1
    7414:	9c 93       	st	X, r25
    7416:	10 82       	st	Z, r1
    7418:	cf 01       	movw	r24, r30
    741a:	08 95       	ret

0000741c <putChar_Dec>:
    741c:	90 e0       	ldi	r25, 0x00	; 0
    741e:	02 c0       	rjmp	.+4      	; 0x7424 <putChar_Dec+0x8>
    7420:	84 56       	subi	r24, 0x64	; 100
    7422:	9f 5f       	subi	r25, 0xFF	; 255
    7424:	84 36       	cpi	r24, 0x64	; 100
    7426:	e0 f7       	brcc	.-8      	; 0x7420 <putChar_Dec+0x4>
    7428:	99 23       	and	r25, r25
    742a:	39 f0       	breq	.+14     	; 0x743a <putChar_Dec+0x1e>
    742c:	90 5d       	subi	r25, 0xD0	; 208
    742e:	db 01       	movw	r26, r22
    7430:	9c 93       	st	X, r25
    7432:	6f 5f       	subi	r22, 0xFF	; 255
    7434:	7f 4f       	sbci	r23, 0xFF	; 255
    7436:	2f ef       	ldi	r18, 0xFF	; 255
    7438:	01 c0       	rjmp	.+2      	; 0x743c <putChar_Dec+0x20>
    743a:	20 e0       	ldi	r18, 0x00	; 0
    743c:	90 e0       	ldi	r25, 0x00	; 0
    743e:	02 c0       	rjmp	.+4      	; 0x7444 <putChar_Dec+0x28>
    7440:	8a 50       	subi	r24, 0x0A	; 10
    7442:	9f 5f       	subi	r25, 0xFF	; 255
    7444:	8a 30       	cpi	r24, 0x0A	; 10
    7446:	e0 f7       	brcc	.-8      	; 0x7440 <putChar_Dec+0x24>
    7448:	91 11       	cpse	r25, r1
    744a:	02 c0       	rjmp	.+4      	; 0x7450 <putChar_Dec+0x34>
    744c:	2f 3f       	cpi	r18, 0xFF	; 255
    744e:	31 f4       	brne	.+12     	; 0x745c <putChar_Dec+0x40>
    7450:	fb 01       	movw	r30, r22
    7452:	31 96       	adiw	r30, 0x01	; 1
    7454:	90 5d       	subi	r25, 0xD0	; 208
    7456:	db 01       	movw	r26, r22
    7458:	9c 93       	st	X, r25
    745a:	01 c0       	rjmp	.+2      	; 0x745e <putChar_Dec+0x42>
    745c:	fb 01       	movw	r30, r22
    745e:	80 5d       	subi	r24, 0xD0	; 208
    7460:	80 83       	st	Z, r24
    7462:	11 82       	std	Z+1, r1	; 0x01
    7464:	cf 01       	movw	r24, r30
    7466:	01 96       	adiw	r24, 0x01	; 1
    7468:	08 95       	ret

0000746a <putChar_hex>:
    746a:	fb 01       	movw	r30, r22
    746c:	98 2f       	mov	r25, r24
    746e:	92 95       	swap	r25
    7470:	9f 70       	andi	r25, 0x0F	; 15
    7472:	9a 30       	cpi	r25, 0x0A	; 10
    7474:	10 f0       	brcs	.+4      	; 0x747a <putChar_hex+0x10>
    7476:	99 5c       	subi	r25, 0xC9	; 201
    7478:	01 c0       	rjmp	.+2      	; 0x747c <putChar_hex+0x12>
    747a:	90 5d       	subi	r25, 0xD0	; 208
    747c:	90 83       	st	Z, r25
    747e:	98 2f       	mov	r25, r24
    7480:	9f 70       	andi	r25, 0x0F	; 15
    7482:	9f 01       	movw	r18, r30
    7484:	2e 5f       	subi	r18, 0xFE	; 254
    7486:	3f 4f       	sbci	r19, 0xFF	; 255
    7488:	9a 30       	cpi	r25, 0x0A	; 10
    748a:	10 f0       	brcs	.+4      	; 0x7490 <putChar_hex+0x26>
    748c:	99 5c       	subi	r25, 0xC9	; 201
    748e:	01 c0       	rjmp	.+2      	; 0x7492 <putChar_hex+0x28>
    7490:	90 5d       	subi	r25, 0xD0	; 208
    7492:	91 83       	std	Z+1, r25	; 0x01
    7494:	12 82       	std	Z+2, r1	; 0x02
    7496:	c9 01       	movw	r24, r18
    7498:	08 95       	ret

0000749a <putChar_MidiChan>:
    749a:	80 31       	cpi	r24, 0x10	; 16
    749c:	48 f0       	brcs	.+18     	; 0x74b0 <putChar_MidiChan+0x16>
    749e:	8e e6       	ldi	r24, 0x6E	; 110
    74a0:	db 01       	movw	r26, r22
    74a2:	8c 93       	st	X, r24
    74a4:	fb 01       	movw	r30, r22
    74a6:	32 96       	adiw	r30, 0x02	; 2
    74a8:	8f e6       	ldi	r24, 0x6F	; 111
    74aa:	11 96       	adiw	r26, 0x01	; 1
    74ac:	8c 93       	st	X, r24
    74ae:	15 c0       	rjmp	.+42     	; 0x74da <putChar_MidiChan+0x40>
    74b0:	91 e0       	ldi	r25, 0x01	; 1
    74b2:	98 0f       	add	r25, r24
    74b4:	9a 30       	cpi	r25, 0x0A	; 10
    74b6:	40 f0       	brcs	.+16     	; 0x74c8 <putChar_MidiChan+0x2e>
    74b8:	db 01       	movw	r26, r22
    74ba:	11 96       	adiw	r26, 0x01	; 1
    74bc:	91 e3       	ldi	r25, 0x31	; 49
    74be:	fb 01       	movw	r30, r22
    74c0:	90 83       	st	Z, r25
    74c2:	97 ef       	ldi	r25, 0xF7	; 247
    74c4:	98 0f       	add	r25, r24
    74c6:	05 c0       	rjmp	.+10     	; 0x74d2 <putChar_MidiChan+0x38>
    74c8:	db 01       	movw	r26, r22
    74ca:	11 96       	adiw	r26, 0x01	; 1
    74cc:	80 e2       	ldi	r24, 0x20	; 32
    74ce:	fb 01       	movw	r30, r22
    74d0:	80 83       	st	Z, r24
    74d2:	fd 01       	movw	r30, r26
    74d4:	31 96       	adiw	r30, 0x01	; 1
    74d6:	90 5d       	subi	r25, 0xD0	; 208
    74d8:	9c 93       	st	X, r25
    74da:	10 82       	st	Z, r1
    74dc:	cf 01       	movw	r24, r30
    74de:	08 95       	ret

000074e0 <putChar_long>:
    74e0:	ac 01       	movw	r20, r24
    74e2:	fb 01       	movw	r30, r22
    74e4:	34 96       	adiw	r30, 0x04	; 4
    74e6:	db 01       	movw	r26, r22
    74e8:	14 96       	adiw	r26, 0x04	; 4
    74ea:	1c 92       	st	X, r1
    74ec:	20 e0       	ldi	r18, 0x00	; 0
    74ee:	10 c0       	rjmp	.+32     	; 0x7510 <putChar_long+0x30>
    74f0:	94 2f       	mov	r25, r20
    74f2:	9f 70       	andi	r25, 0x0F	; 15
    74f4:	31 97       	sbiw	r30, 0x01	; 1
    74f6:	9a 30       	cpi	r25, 0x0A	; 10
    74f8:	10 f0       	brcs	.+4      	; 0x74fe <putChar_long+0x1e>
    74fa:	99 5c       	subi	r25, 0xC9	; 201
    74fc:	01 c0       	rjmp	.+2      	; 0x7500 <putChar_long+0x20>
    74fe:	90 5d       	subi	r25, 0xD0	; 208
    7500:	90 83       	st	Z, r25
    7502:	52 95       	swap	r21
    7504:	42 95       	swap	r20
    7506:	4f 70       	andi	r20, 0x0F	; 15
    7508:	45 27       	eor	r20, r21
    750a:	5f 70       	andi	r21, 0x0F	; 15
    750c:	45 27       	eor	r20, r21
    750e:	2f 5f       	subi	r18, 0xFF	; 255
    7510:	24 30       	cpi	r18, 0x04	; 4
    7512:	70 f3       	brcs	.-36     	; 0x74f0 <putChar_long+0x10>
    7514:	cf 01       	movw	r24, r30
    7516:	04 96       	adiw	r24, 0x04	; 4
    7518:	08 95       	ret

0000751a <putChar_Note>:
    751a:	88 23       	and	r24, r24
    751c:	8c f4       	brge	.+34     	; 0x7540 <putChar_Note+0x26>
    751e:	8d e2       	ldi	r24, 0x2D	; 45
    7520:	db 01       	movw	r26, r22
    7522:	8c 93       	st	X, r24
    7524:	9e e6       	ldi	r25, 0x6E	; 110
    7526:	11 96       	adiw	r26, 0x01	; 1
    7528:	9c 93       	st	X, r25
    752a:	11 97       	sbiw	r26, 0x01	; 1
    752c:	12 96       	adiw	r26, 0x02	; 2
    752e:	8c 93       	st	X, r24
    7530:	12 97       	sbiw	r26, 0x02	; 2
    7532:	14 96       	adiw	r26, 0x04	; 4
    7534:	fb 01       	movw	r30, r22
    7536:	13 82       	std	Z+3, r1	; 0x03
    7538:	49 c0       	rjmp	.+146    	; 0x75cc <putChar_Note+0xb2>
    753a:	8c 50       	subi	r24, 0x0C	; 12
    753c:	9f 5f       	subi	r25, 0xFF	; 255
    753e:	01 c0       	rjmp	.+2      	; 0x7542 <putChar_Note+0x28>
    7540:	90 e0       	ldi	r25, 0x00	; 0
    7542:	8c 30       	cpi	r24, 0x0C	; 12
    7544:	d0 f7       	brcc	.-12     	; 0x753a <putChar_Note+0x20>
    7546:	8b 30       	cpi	r24, 0x0B	; 11
    7548:	39 f4       	brne	.+14     	; 0x7558 <putChar_Note+0x3e>
    754a:	fb 01       	movw	r30, r22
    754c:	31 96       	adiw	r30, 0x01	; 1
    754e:	88 e4       	ldi	r24, 0x48	; 72
    7550:	db 01       	movw	r26, r22
    7552:	8c 93       	st	X, r24
    7554:	8f e5       	ldi	r24, 0x5F	; 95
    7556:	27 c0       	rjmp	.+78     	; 0x75a6 <putChar_Note+0x8c>
    7558:	85 30       	cpi	r24, 0x05	; 5
    755a:	58 f4       	brcc	.+22     	; 0x7572 <putChar_Note+0x58>
    755c:	fb 01       	movw	r30, r22
    755e:	31 96       	adiw	r30, 0x01	; 1
    7560:	28 2f       	mov	r18, r24
    7562:	26 95       	lsr	r18
    7564:	2d 5b       	subi	r18, 0xBD	; 189
    7566:	db 01       	movw	r26, r22
    7568:	2c 93       	st	X, r18
    756a:	80 fd       	sbrc	r24, 0
    756c:	19 c0       	rjmp	.+50     	; 0x75a0 <putChar_Note+0x86>
    756e:	8f e5       	ldi	r24, 0x5F	; 95
    7570:	1a c0       	rjmp	.+52     	; 0x75a6 <putChar_Note+0x8c>
    7572:	89 30       	cpi	r24, 0x09	; 9
    7574:	30 f0       	brcs	.+12     	; 0x7582 <putChar_Note+0x68>
    7576:	fb 01       	movw	r30, r22
    7578:	31 96       	adiw	r30, 0x01	; 1
    757a:	21 e4       	ldi	r18, 0x41	; 65
    757c:	db 01       	movw	r26, r22
    757e:	2c 93       	st	X, r18
    7580:	0b c0       	rjmp	.+22     	; 0x7598 <putChar_Note+0x7e>
    7582:	fb 01       	movw	r30, r22
    7584:	31 96       	adiw	r30, 0x01	; 1
    7586:	28 2f       	mov	r18, r24
    7588:	30 e0       	ldi	r19, 0x00	; 0
    758a:	25 50       	subi	r18, 0x05	; 5
    758c:	31 09       	sbc	r19, r1
    758e:	35 95       	asr	r19
    7590:	27 95       	ror	r18
    7592:	2a 5b       	subi	r18, 0xBA	; 186
    7594:	db 01       	movw	r26, r22
    7596:	2c 93       	st	X, r18
    7598:	80 ff       	sbrs	r24, 0
    759a:	04 c0       	rjmp	.+8      	; 0x75a4 <putChar_Note+0x8a>
    759c:	8f e5       	ldi	r24, 0x5F	; 95
    759e:	03 c0       	rjmp	.+6      	; 0x75a6 <putChar_Note+0x8c>
    75a0:	83 e2       	ldi	r24, 0x23	; 35
    75a2:	01 c0       	rjmp	.+2      	; 0x75a6 <putChar_Note+0x8c>
    75a4:	83 e2       	ldi	r24, 0x23	; 35
    75a6:	80 83       	st	Z, r24
    75a8:	91 11       	cpse	r25, r1
    75aa:	05 c0       	rjmp	.+10     	; 0x75b6 <putChar_Note+0x9c>
    75ac:	df 01       	movw	r26, r30
    75ae:	12 96       	adiw	r26, 0x02	; 2
    75b0:	8d e6       	ldi	r24, 0x6D	; 109
    75b2:	81 83       	std	Z+1, r24	; 0x01
    75b4:	0b c0       	rjmp	.+22     	; 0x75cc <putChar_Note+0xb2>
    75b6:	9c 30       	cpi	r25, 0x0C	; 12
    75b8:	28 f4       	brcc	.+10     	; 0x75c4 <putChar_Note+0xaa>
    75ba:	df 01       	movw	r26, r30
    75bc:	12 96       	adiw	r26, 0x02	; 2
    75be:	91 5d       	subi	r25, 0xD1	; 209
    75c0:	91 83       	std	Z+1, r25	; 0x01
    75c2:	04 c0       	rjmp	.+8      	; 0x75cc <putChar_Note+0xb2>
    75c4:	df 01       	movw	r26, r30
    75c6:	12 96       	adiw	r26, 0x02	; 2
    75c8:	8d e2       	ldi	r24, 0x2D	; 45
    75ca:	81 83       	std	Z+1, r24	; 0x01
    75cc:	1c 92       	st	X, r1
    75ce:	cd 01       	movw	r24, r26
    75d0:	08 95       	ret

000075d2 <putChar_Manual>:
    75d2:	83 30       	cpi	r24, 0x03	; 3
    75d4:	38 f4       	brcc	.+14     	; 0x75e4 <putChar_Manual+0x12>
    75d6:	fb 01       	movw	r30, r22
    75d8:	31 96       	adiw	r30, 0x01	; 1
    75da:	93 e3       	ldi	r25, 0x33	; 51
    75dc:	98 1b       	sub	r25, r24
    75de:	db 01       	movw	r26, r22
    75e0:	9c 93       	st	X, r25
    75e2:	0d c0       	rjmp	.+26     	; 0x75fe <putChar_Manual+0x2c>
    75e4:	83 30       	cpi	r24, 0x03	; 3
    75e6:	31 f4       	brne	.+12     	; 0x75f4 <putChar_Manual+0x22>
    75e8:	fb 01       	movw	r30, r22
    75ea:	31 96       	adiw	r30, 0x01	; 1
    75ec:	80 e5       	ldi	r24, 0x50	; 80
    75ee:	db 01       	movw	r26, r22
    75f0:	8c 93       	st	X, r24
    75f2:	05 c0       	rjmp	.+10     	; 0x75fe <putChar_Manual+0x2c>
    75f4:	fb 01       	movw	r30, r22
    75f6:	31 96       	adiw	r30, 0x01	; 1
    75f8:	8d e2       	ldi	r24, 0x2D	; 45
    75fa:	db 01       	movw	r26, r22
    75fc:	8c 93       	st	X, r24
    75fe:	10 82       	st	Z, r1
    7600:	cf 01       	movw	r24, r30
    7602:	08 95       	ret

00007604 <putString_P>:
    7604:	fc 01       	movw	r30, r24
    7606:	db 01       	movw	r26, r22
    7608:	20 e0       	ldi	r18, 0x00	; 0
    760a:	02 c0       	rjmp	.+4      	; 0x7610 <putString_P+0xc>
    760c:	28 2f       	mov	r18, r24
    760e:	da 01       	movw	r26, r20
    7610:	94 91       	lpm	r25, Z
    7612:	99 23       	and	r25, r25
    7614:	51 f0       	breq	.+20     	; 0x762a <putString_P+0x26>
    7616:	ad 01       	movw	r20, r26
    7618:	4f 5f       	subi	r20, 0xFF	; 255
    761a:	5f 4f       	sbci	r21, 0xFF	; 255
    761c:	31 96       	adiw	r30, 0x01	; 1
    761e:	9c 93       	st	X, r25
    7620:	81 e0       	ldi	r24, 0x01	; 1
    7622:	82 0f       	add	r24, r18
    7624:	24 31       	cpi	r18, 0x14	; 20
    7626:	90 f3       	brcs	.-28     	; 0x760c <putString_P+0x8>
    7628:	01 c0       	rjmp	.+2      	; 0x762c <putString_P+0x28>
    762a:	ad 01       	movw	r20, r26
    762c:	ca 01       	movw	r24, r20
    762e:	08 95       	ret

00007630 <putString_Prog>:
    7630:	fc 01       	movw	r30, r24
    7632:	80 e5       	ldi	r24, 0x50	; 80
    7634:	80 83       	st	Z, r24
    7636:	96 2f       	mov	r25, r22
    7638:	96 95       	lsr	r25
    763a:	96 95       	lsr	r25
    763c:	96 95       	lsr	r25
    763e:	97 70       	andi	r25, 0x07	; 7
    7640:	9f 5b       	subi	r25, 0xBF	; 191
    7642:	91 83       	std	Z+1, r25	; 0x01
    7644:	67 70       	andi	r22, 0x07	; 7
    7646:	6f 5c       	subi	r22, 0xCF	; 207
    7648:	62 83       	std	Z+2, r22	; 0x02
    764a:	cf 01       	movw	r24, r30
    764c:	03 96       	adiw	r24, 0x03	; 3
    764e:	08 95       	ret

00007650 <lcd_wordout>:
    7650:	cf 93       	push	r28
    7652:	c8 2f       	mov	r28, r24
    7654:	89 2f       	mov	r24, r25
    7656:	70 de       	rcall	.-800    	; 0x7338 <lcd_hexout>
    7658:	8c 2f       	mov	r24, r28
    765a:	6e de       	rcall	.-804    	; 0x7338 <lcd_hexout>
    765c:	cf 91       	pop	r28
    765e:	08 95       	ret

00007660 <lcd_noteOut>:
    7660:	cf 93       	push	r28
    7662:	df 93       	push	r29
    7664:	88 23       	and	r24, r24
    7666:	e4 f1       	brlt	.+120    	; 0x76e0 <lcd_noteOut+0x80>
    7668:	90 e0       	ldi	r25, 0x00	; 0
    766a:	02 c0       	rjmp	.+4      	; 0x7670 <lcd_noteOut+0x10>
    766c:	9f 5f       	subi	r25, 0xFF	; 255
    766e:	8c 50       	subi	r24, 0x0C	; 12
    7670:	8c 30       	cpi	r24, 0x0C	; 12
    7672:	e0 f7       	brcc	.-8      	; 0x766c <lcd_noteOut+0xc>
    7674:	48 2f       	mov	r20, r24
    7676:	50 e0       	ldi	r21, 0x00	; 0
    7678:	4c 30       	cpi	r20, 0x0C	; 12
    767a:	51 05       	cpc	r21, r1
    767c:	30 f4       	brcc	.+12     	; 0x768a <lcd_noteOut+0x2a>
    767e:	fa 01       	movw	r30, r20
    7680:	88 27       	eor	r24, r24
    7682:	ea 55       	subi	r30, 0x5A	; 90
    7684:	ff 4f       	sbci	r31, 0xFF	; 255
    7686:	8f 4f       	sbci	r24, 0xFF	; 255
    7688:	5d c1       	rjmp	.+698    	; 0x7944 <__tablejump2__>
    768a:	d3 e2       	ldi	r29, 0x23	; 35
    768c:	80 e2       	ldi	r24, 0x20	; 32
    768e:	23 c0       	rjmp	.+70     	; 0x76d6 <lcd_noteOut+0x76>
    7690:	d3 e2       	ldi	r29, 0x23	; 35
    7692:	84 e4       	ldi	r24, 0x44	; 68
    7694:	20 c0       	rjmp	.+64     	; 0x76d6 <lcd_noteOut+0x76>
    7696:	d3 e2       	ldi	r29, 0x23	; 35
    7698:	86 e4       	ldi	r24, 0x46	; 70
    769a:	1d c0       	rjmp	.+58     	; 0x76d6 <lcd_noteOut+0x76>
    769c:	d3 e2       	ldi	r29, 0x23	; 35
    769e:	87 e4       	ldi	r24, 0x47	; 71
    76a0:	1a c0       	rjmp	.+52     	; 0x76d6 <lcd_noteOut+0x76>
    76a2:	d3 e2       	ldi	r29, 0x23	; 35
    76a4:	81 e4       	ldi	r24, 0x41	; 65
    76a6:	17 c0       	rjmp	.+46     	; 0x76d6 <lcd_noteOut+0x76>
    76a8:	d5 ea       	ldi	r29, 0xA5	; 165
    76aa:	83 e4       	ldi	r24, 0x43	; 67
    76ac:	14 c0       	rjmp	.+40     	; 0x76d6 <lcd_noteOut+0x76>
    76ae:	d5 ea       	ldi	r29, 0xA5	; 165
    76b0:	84 e4       	ldi	r24, 0x44	; 68
    76b2:	11 c0       	rjmp	.+34     	; 0x76d6 <lcd_noteOut+0x76>
    76b4:	d5 ea       	ldi	r29, 0xA5	; 165
    76b6:	85 e4       	ldi	r24, 0x45	; 69
    76b8:	0e c0       	rjmp	.+28     	; 0x76d6 <lcd_noteOut+0x76>
    76ba:	d5 ea       	ldi	r29, 0xA5	; 165
    76bc:	86 e4       	ldi	r24, 0x46	; 70
    76be:	0b c0       	rjmp	.+22     	; 0x76d6 <lcd_noteOut+0x76>
    76c0:	d5 ea       	ldi	r29, 0xA5	; 165
    76c2:	87 e4       	ldi	r24, 0x47	; 71
    76c4:	08 c0       	rjmp	.+16     	; 0x76d6 <lcd_noteOut+0x76>
    76c6:	d5 ea       	ldi	r29, 0xA5	; 165
    76c8:	81 e4       	ldi	r24, 0x41	; 65
    76ca:	05 c0       	rjmp	.+10     	; 0x76d6 <lcd_noteOut+0x76>
    76cc:	d5 ea       	ldi	r29, 0xA5	; 165
    76ce:	88 e4       	ldi	r24, 0x48	; 72
    76d0:	02 c0       	rjmp	.+4      	; 0x76d6 <lcd_noteOut+0x76>
    76d2:	d3 e2       	ldi	r29, 0x23	; 35
    76d4:	83 e4       	ldi	r24, 0x43	; 67
    76d6:	99 23       	and	r25, r25
    76d8:	39 f0       	breq	.+14     	; 0x76e8 <lcd_noteOut+0x88>
    76da:	cf e2       	ldi	r28, 0x2F	; 47
    76dc:	c9 0f       	add	r28, r25
    76de:	05 c0       	rjmp	.+10     	; 0x76ea <lcd_noteOut+0x8a>
    76e0:	cd e2       	ldi	r28, 0x2D	; 45
    76e2:	dd e2       	ldi	r29, 0x2D	; 45
    76e4:	8d e2       	ldi	r24, 0x2D	; 45
    76e6:	01 c0       	rjmp	.+2      	; 0x76ea <lcd_noteOut+0x8a>
    76e8:	cd e2       	ldi	r28, 0x2D	; 45
    76ea:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    76ee:	8d 2f       	mov	r24, r29
    76f0:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    76f4:	8c 2f       	mov	r24, r28
    76f6:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    76fa:	83 e0       	ldi	r24, 0x03	; 3
    76fc:	df 91       	pop	r29
    76fe:	cf 91       	pop	r28
    7700:	08 95       	ret

00007702 <lcd_ChannelOut>:
    7702:	cf 93       	push	r28
    7704:	c8 2f       	mov	r28, r24
    7706:	cf 70       	andi	r28, 0x0F	; 15
    7708:	81 e0       	ldi	r24, 0x01	; 1
    770a:	8c 0f       	add	r24, r28
    770c:	8a 30       	cpi	r24, 0x0A	; 10
    770e:	28 f0       	brcs	.+10     	; 0x771a <lcd_ChannelOut+0x18>
    7710:	81 e3       	ldi	r24, 0x31	; 49
    7712:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7716:	87 ef       	ldi	r24, 0xF7	; 247
    7718:	8c 0f       	add	r24, r28
    771a:	80 5d       	subi	r24, 0xD0	; 208
    771c:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7720:	cf 91       	pop	r28
    7722:	08 95       	ret

00007724 <lcd_ManualOutDec>:
    7724:	84 30       	cpi	r24, 0x04	; 4
    7726:	20 f0       	brcs	.+8      	; 0x7730 <lcd_ManualOutDec+0xc>
    7728:	8d e2       	ldi	r24, 0x2D	; 45
    772a:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    772e:	08 95       	ret
    7730:	83 30       	cpi	r24, 0x03	; 3
    7732:	21 f4       	brne	.+8      	; 0x773c <lcd_ManualOutDec+0x18>
    7734:	80 e5       	ldi	r24, 0x50	; 80
    7736:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    773a:	08 95       	ret
    773c:	93 e3       	ldi	r25, 0x33	; 51
    773e:	98 1b       	sub	r25, r24
    7740:	89 2f       	mov	r24, r25
    7742:	0c 94 41 13 	jmp	0x2682	; 0x2682 <lcd_putc>
    7746:	08 95       	ret

00007748 <lcd_blank>:
    7748:	cf 93       	push	r28
    774a:	04 c0       	rjmp	.+8      	; 0x7754 <lcd_blank+0xc>
    774c:	80 e2       	ldi	r24, 0x20	; 32
    774e:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    7752:	8c 2f       	mov	r24, r28
    7754:	cf ef       	ldi	r28, 0xFF	; 255
    7756:	c8 0f       	add	r28, r24
    7758:	81 11       	cpse	r24, r1
    775a:	f8 cf       	rjmp	.-16     	; 0x774c <lcd_blank+0x4>
    775c:	cf 91       	pop	r28
    775e:	08 95       	ret

00007760 <lcd_clrEol>:
    7760:	cf 93       	push	r28
    7762:	90 e0       	ldi	r25, 0x00	; 0
    7764:	04 c0       	rjmp	.+8      	; 0x776e <lcd_clrEol+0xe>
    7766:	80 e2       	ldi	r24, 0x20	; 32
    7768:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    776c:	9c 2f       	mov	r25, r28
    776e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7772:	84 31       	cpi	r24, 0x14	; 20
    7774:	51 f0       	breq	.+20     	; 0x778a <lcd_clrEol+0x2a>
    7776:	84 35       	cpi	r24, 0x54	; 84
    7778:	41 f0       	breq	.+16     	; 0x778a <lcd_clrEol+0x2a>
    777a:	88 32       	cpi	r24, 0x28	; 40
    777c:	31 f0       	breq	.+12     	; 0x778a <lcd_clrEol+0x2a>
    777e:	88 36       	cpi	r24, 0x68	; 104
    7780:	21 f0       	breq	.+8      	; 0x778a <lcd_clrEol+0x2a>
    7782:	c1 e0       	ldi	r28, 0x01	; 1
    7784:	c9 0f       	add	r28, r25
    7786:	94 31       	cpi	r25, 0x14	; 20
    7788:	70 f3       	brcs	.-36     	; 0x7766 <lcd_clrEol+0x6>
    778a:	cf 91       	pop	r28
    778c:	08 95       	ret

0000778e <lcd_cursosblink>:
    778e:	8d e0       	ldi	r24, 0x0D	; 13
    7790:	0e 94 8d 12 	call	0x251a	; 0x251a <lcd_write_command>
    7794:	8f ef       	ldi	r24, 0xFF	; 255
    7796:	80 93 db 18 	sts	0x18DB, r24	; 0x8018db <lcd_cursorIsOn>
    779a:	08 95       	ret

0000779c <lcd_cursoroff>:
    779c:	8c e0       	ldi	r24, 0x0C	; 12
    779e:	0e 94 8d 12 	call	0x251a	; 0x251a <lcd_write_command>
    77a2:	10 92 db 18 	sts	0x18DB, r1	; 0x8018db <lcd_cursorIsOn>
    77a6:	08 95       	ret

000077a8 <lcd_waitSymbolOn>:
    77a8:	cf 93       	push	r28
    77aa:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    77ae:	8c e0       	ldi	r24, 0x0C	; 12
    77b0:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77b4:	81 ea       	ldi	r24, 0xA1	; 161
    77b6:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    77ba:	8c 2f       	mov	r24, r28
    77bc:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77c0:	cf 91       	pop	r28
    77c2:	08 95       	ret

000077c4 <lcd_waitSymbolOff>:
    77c4:	cf 93       	push	r28
    77c6:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    77ca:	8c e0       	ldi	r24, 0x0C	; 12
    77cc:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77d0:	80 e2       	ldi	r24, 0x20	; 32
    77d2:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>
    77d6:	8c 2f       	mov	r24, r28
    77d8:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
    77dc:	cf 91       	pop	r28
    77de:	08 95       	ret

000077e0 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    77e0:	84 30       	cpi	r24, 0x04	; 4
    77e2:	28 f0       	brcs	.+10     	; 0x77ee <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    77e4:	20 e0       	ldi	r18, 0x00	; 0
    77e6:	0d c0       	rjmp	.+26     	; 0x7802 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    77e8:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    77ea:	fa 01       	movw	r30, r20
    77ec:	02 c0       	rjmp	.+4      	; 0x77f2 <keylabel_set+0x12>
    77ee:	fb 01       	movw	r30, r22
    77f0:	20 e0       	ldi	r18, 0x00	; 0
    77f2:	af 01       	movw	r20, r30
    77f4:	4f 5f       	subi	r20, 0xFF	; 255
    77f6:	5f 4f       	sbci	r21, 0xFF	; 255
    77f8:	94 91       	lpm	r25, Z
    77fa:	99 23       	and	r25, r25
    77fc:	11 f0       	breq	.+4      	; 0x7802 <keylabel_set+0x22>
    77fe:	25 30       	cpi	r18, 0x05	; 5
    7800:	98 f3       	brcs	.-26     	; 0x77e8 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	dc 01       	movw	r26, r24
    7806:	aa 0f       	add	r26, r26
    7808:	bb 1f       	adc	r27, r27
    780a:	aa 0f       	add	r26, r26
    780c:	bb 1f       	adc	r27, r27
    780e:	8a 0f       	add	r24, r26
    7810:	9b 1f       	adc	r25, r27
    7812:	dc 01       	movw	r26, r24
    7814:	af 5e       	subi	r26, 0xEF	; 239
    7816:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7818:	45 e0       	ldi	r20, 0x05	; 5
    781a:	50 e0       	ldi	r21, 0x00	; 0
    781c:	42 1b       	sub	r20, r18
    781e:	51 09       	sbc	r21, r1
    7820:	ca 01       	movw	r24, r20
    7822:	99 23       	and	r25, r25
    7824:	0c f4       	brge	.+2      	; 0x7828 <keylabel_set+0x48>
    7826:	01 96       	adiw	r24, 0x01	; 1
    7828:	95 95       	asr	r25
    782a:	87 95       	ror	r24
    782c:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    782e:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    7830:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7832:	0e c0       	rjmp	.+28     	; 0x7850 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7834:	93 17       	cp	r25, r19
    7836:	10 f0       	brcs	.+4      	; 0x783c <keylabel_set+0x5c>
    7838:	98 17       	cp	r25, r24
    783a:	18 f0       	brcs	.+6      	; 0x7842 <keylabel_set+0x62>
			*charBufPtr = ' ';
    783c:	20 e2       	ldi	r18, 0x20	; 32
    783e:	2c 93       	st	X, r18
    7840:	05 c0       	rjmp	.+10     	; 0x784c <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7842:	fb 01       	movw	r30, r22
    7844:	24 91       	lpm	r18, Z
    7846:	2c 93       	st	X, r18
    7848:	6f 5f       	subi	r22, 0xFF	; 255
    784a:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    784c:	11 96       	adiw	r26, 0x01	; 1
		i++;
    784e:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7850:	95 30       	cpi	r25, 0x05	; 5
    7852:	80 f3       	brcs	.-32     	; 0x7834 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7854:	08 95       	ret

00007856 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	fc 01       	movw	r30, r24
    785a:	ee 0f       	add	r30, r30
    785c:	ff 1f       	adc	r31, r31
    785e:	ee 0f       	add	r30, r30
    7860:	ff 1f       	adc	r31, r31
    7862:	8e 0f       	add	r24, r30
    7864:	9f 1f       	adc	r25, r31
    7866:	fc 01       	movw	r30, r24
    7868:	ef 5e       	subi	r30, 0xEF	; 239
    786a:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    786c:	80 e0       	ldi	r24, 0x00	; 0
    786e:	04 c0       	rjmp	.+8      	; 0x7878 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    7870:	90 e2       	ldi	r25, 0x20	; 32
    7872:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7874:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7876:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7878:	85 30       	cpi	r24, 0x05	; 5
    787a:	d0 f3       	brcs	.-12     	; 0x7870 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    787c:	08 95       	ret

0000787e <keylabel_toLCD>:

void keylabel_toLCD(){
    787e:	0f 93       	push	r16
    7880:	1f 93       	push	r17
    7882:	cf 93       	push	r28
    7884:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7886:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    788a:	84 e5       	ldi	r24, 0x54	; 84
    788c:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7890:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7892:	e1 e1       	ldi	r30, 0x11	; 17
    7894:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7896:	08 c0       	rjmp	.+16     	; 0x78a8 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    7898:	8f 01       	movw	r16, r30
    789a:	0f 5f       	subi	r16, 0xFF	; 255
    789c:	1f 4f       	sbci	r17, 0xFF	; 255
    789e:	80 81       	ld	r24, Z
    78a0:	0e 94 41 13 	call	0x2682	; 0x2682 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    78a4:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    78a6:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    78a8:	c4 31       	cpi	r28, 0x14	; 20
    78aa:	b0 f3       	brcs	.-20     	; 0x7898 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    78ac:	8d 2f       	mov	r24, r29
    78ae:	0e 94 17 13 	call	0x262e	; 0x262e <lcd_goto>
}
    78b2:	df 91       	pop	r29
    78b4:	cf 91       	pop	r28
    78b6:	1f 91       	pop	r17
    78b8:	0f 91       	pop	r16
    78ba:	08 95       	ret

000078bc <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    78bc:	90 e0       	ldi	r25, 0x00	; 0
    78be:	fc 01       	movw	r30, r24
    78c0:	ee 0f       	add	r30, r30
    78c2:	ff 1f       	adc	r31, r31
    78c4:	ee 0f       	add	r30, r30
    78c6:	ff 1f       	adc	r31, r31
    78c8:	8e 0f       	add	r24, r30
    78ca:	9f 1f       	adc	r25, r31
    78cc:	fc 01       	movw	r30, r24
    78ce:	ef 5e       	subi	r30, 0xEF	; 239
    78d0:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    78d2:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    78d4:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    78d6:	12 c0       	rjmp	.+36     	; 0x78fc <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    78d8:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    78da:	61 11       	cpse	r22, r1
    78dc:	06 c0       	rjmp	.+12     	; 0x78ea <keylabel_statcheck+0x2e>
    78de:	2a 30       	cpi	r18, 0x0A	; 10
    78e0:	21 f4       	brne	.+8      	; 0x78ea <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    78e2:	80 e8       	ldi	r24, 0x80	; 128
    78e4:	80 83       	st	Z, r24
			result = 0xFF;
    78e6:	8f ef       	ldi	r24, 0xFF	; 255
    78e8:	07 c0       	rjmp	.+14     	; 0x78f8 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    78ea:	66 23       	and	r22, r22
    78ec:	29 f0       	breq	.+10     	; 0x78f8 <keylabel_statcheck+0x3c>
    78ee:	20 38       	cpi	r18, 0x80	; 128
    78f0:	19 f4       	brne	.+6      	; 0x78f8 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    78f2:	8a e0       	ldi	r24, 0x0A	; 10
    78f4:	80 83       	st	Z, r24
			result = 0xFF;
    78f6:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    78f8:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    78fa:	9f 5f       	subi	r25, 0xFF	; 255
    78fc:	95 30       	cpi	r25, 0x05	; 5
    78fe:	60 f3       	brcs	.-40     	; 0x78d8 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7900:	08 95       	ret

00007902 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7902:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7904:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7906:	94 91       	lpm	r25, Z
    7908:	99 23       	and	r25, r25
    790a:	21 f0       	breq	.+8      	; 0x7914 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    790c:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    790e:	8f 5f       	subi	r24, 0xFF	; 255
    7910:	80 32       	cpi	r24, 0x20	; 32
    7912:	c8 f3       	brcs	.-14     	; 0x7906 <get_StrLenP+0x4>
	return result;
}
    7914:	08 95       	ret

00007916 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7916:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7918:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    791a:	90 81       	ld	r25, Z
    791c:	99 23       	and	r25, r25
    791e:	21 f0       	breq	.+8      	; 0x7928 <get_StrLen+0x12>
			return result;
		}
		pString++;
    7920:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7922:	8f 5f       	subi	r24, 0xFF	; 255
    7924:	80 32       	cpi	r24, 0x20	; 32
    7926:	c8 f3       	brcs	.-14     	; 0x791a <get_StrLen+0x4>
	return result;
}
    7928:	08 95       	ret

0000792a <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    792a:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    792c:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    792e:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7930:	06 c0       	rjmp	.+12     	; 0x793e <reverse_Bits+0x14>
		result = result << 1;
    7932:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7934:	32 2f       	mov	r19, r18
    7936:	31 70       	andi	r19, 0x01	; 1
    7938:	83 2b       	or	r24, r19
		val = val >> 1;
    793a:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    793c:	9f 5f       	subi	r25, 0xFF	; 255
    793e:	98 30       	cpi	r25, 0x08	; 8
    7940:	c0 f3       	brcs	.-16     	; 0x7932 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7942:	08 95       	ret

00007944 <__tablejump2__>:
    7944:	ee 0f       	add	r30, r30
    7946:	ff 1f       	adc	r31, r31
    7948:	88 1f       	adc	r24, r24
    794a:	8b bf       	out	0x3b, r24	; 59
    794c:	07 90       	elpm	r0, Z+
    794e:	f6 91       	elpm	r31, Z
    7950:	e0 2d       	mov	r30, r0
    7952:	19 94       	eijmp

00007954 <eeprom_read_block>:
    7954:	dc 01       	movw	r26, r24
    7956:	cb 01       	movw	r24, r22

00007958 <eeprom_read_blraw>:
    7958:	fc 01       	movw	r30, r24
    795a:	f9 99       	sbic	0x1f, 1	; 31
    795c:	fe cf       	rjmp	.-4      	; 0x795a <eeprom_read_blraw+0x2>
    795e:	06 c0       	rjmp	.+12     	; 0x796c <eeprom_read_blraw+0x14>
    7960:	f2 bd       	out	0x22, r31	; 34
    7962:	e1 bd       	out	0x21, r30	; 33
    7964:	f8 9a       	sbi	0x1f, 0	; 31
    7966:	31 96       	adiw	r30, 0x01	; 1
    7968:	00 b4       	in	r0, 0x20	; 32
    796a:	0d 92       	st	X+, r0
    796c:	41 50       	subi	r20, 0x01	; 1
    796e:	50 40       	sbci	r21, 0x00	; 0
    7970:	b8 f7       	brcc	.-18     	; 0x7960 <eeprom_read_blraw+0x8>
    7972:	08 95       	ret

00007974 <eeprom_read_byte>:
    7974:	f9 99       	sbic	0x1f, 1	; 31
    7976:	fe cf       	rjmp	.-4      	; 0x7974 <eeprom_read_byte>
    7978:	92 bd       	out	0x22, r25	; 34
    797a:	81 bd       	out	0x21, r24	; 33
    797c:	f8 9a       	sbi	0x1f, 0	; 31
    797e:	99 27       	eor	r25, r25
    7980:	80 b5       	in	r24, 0x20	; 32
    7982:	08 95       	ret

00007984 <eeprom_read_word>:
    7984:	a8 e1       	ldi	r26, 0x18	; 24
    7986:	b0 e0       	ldi	r27, 0x00	; 0
    7988:	42 e0       	ldi	r20, 0x02	; 2
    798a:	50 e0       	ldi	r21, 0x00	; 0
    798c:	e5 cf       	rjmp	.-54     	; 0x7958 <eeprom_read_blraw>

0000798e <eeprom_update_block>:
    798e:	dc 01       	movw	r26, r24
    7990:	a4 0f       	add	r26, r20
    7992:	b5 1f       	adc	r27, r21
    7994:	41 50       	subi	r20, 0x01	; 1
    7996:	50 40       	sbci	r21, 0x00	; 0
    7998:	40 f0       	brcs	.+16     	; 0x79aa <eeprom_update_block+0x1c>
    799a:	cb 01       	movw	r24, r22
    799c:	84 0f       	add	r24, r20
    799e:	95 1f       	adc	r25, r21
    79a0:	2e 91       	ld	r18, -X
    79a2:	05 d0       	rcall	.+10     	; 0x79ae <eeprom_update_r18>
    79a4:	41 50       	subi	r20, 0x01	; 1
    79a6:	50 40       	sbci	r21, 0x00	; 0
    79a8:	d8 f7       	brcc	.-10     	; 0x79a0 <eeprom_update_block+0x12>
    79aa:	08 95       	ret

000079ac <eeprom_update_byte>:
    79ac:	26 2f       	mov	r18, r22

000079ae <eeprom_update_r18>:
    79ae:	f9 99       	sbic	0x1f, 1	; 31
    79b0:	fe cf       	rjmp	.-4      	; 0x79ae <eeprom_update_r18>
    79b2:	92 bd       	out	0x22, r25	; 34
    79b4:	81 bd       	out	0x21, r24	; 33
    79b6:	f8 9a       	sbi	0x1f, 0	; 31
    79b8:	01 97       	sbiw	r24, 0x01	; 1
    79ba:	00 b4       	in	r0, 0x20	; 32
    79bc:	02 16       	cp	r0, r18
    79be:	39 f0       	breq	.+14     	; 0x79ce <eeprom_update_r18+0x20>
    79c0:	1f ba       	out	0x1f, r1	; 31
    79c2:	20 bd       	out	0x20, r18	; 32
    79c4:	0f b6       	in	r0, 0x3f	; 63
    79c6:	f8 94       	cli
    79c8:	fa 9a       	sbi	0x1f, 2	; 31
    79ca:	f9 9a       	sbi	0x1f, 1	; 31
    79cc:	0f be       	out	0x3f, r0	; 63
    79ce:	08 95       	ret

000079d0 <eeprom_update_word>:
    79d0:	01 96       	adiw	r24, 0x01	; 1
    79d2:	27 2f       	mov	r18, r23
    79d4:	ec df       	rcall	.-40     	; 0x79ae <eeprom_update_r18>
    79d6:	ea cf       	rjmp	.-44     	; 0x79ac <eeprom_update_byte>

000079d8 <_exit>:
    79d8:	f8 94       	cli

000079da <__stop_program>:
    79da:	ff cf       	rjmp	.-2      	; 0x79da <__stop_program>
