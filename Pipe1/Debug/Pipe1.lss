
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00007be8  00007c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007be8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000acf  0080020a  0080020a  00007ca6  2**0
                  ALLOC
  3 .eeprom       00000800  00810000  00810000  00007ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000084a6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000084d8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000858  00000000  00000000  00008518  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f313  00000000  00000000  00008d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002867  00000000  00000000  00018083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008ba1  00000000  00000000  0001a8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000014b8  00000000  00000000  0002348c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000026f7  00000000  00000000  00024944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ef95  00000000  00000000  0002703b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001c60  00000000  00000000  00035fd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	14 c6       	rjmp	.+3112   	; 0xc2a <__ctors_end>
       2:	00 00       	nop
       4:	33 c6       	rjmp	.+3174   	; 0xc6c <__bad_interrupt>
       6:	00 00       	nop
       8:	31 c6       	rjmp	.+3170   	; 0xc6c <__bad_interrupt>
       a:	00 00       	nop
       c:	2f c6       	rjmp	.+3166   	; 0xc6c <__bad_interrupt>
       e:	00 00       	nop
      10:	2d c6       	rjmp	.+3162   	; 0xc6c <__bad_interrupt>
      12:	00 00       	nop
      14:	2b c6       	rjmp	.+3158   	; 0xc6c <__bad_interrupt>
      16:	00 00       	nop
      18:	29 c6       	rjmp	.+3154   	; 0xc6c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	27 c6       	rjmp	.+3150   	; 0xc6c <__bad_interrupt>
      1e:	00 00       	nop
      20:	25 c6       	rjmp	.+3146   	; 0xc6c <__bad_interrupt>
      22:	00 00       	nop
      24:	23 c6       	rjmp	.+3142   	; 0xc6c <__bad_interrupt>
      26:	00 00       	nop
      28:	21 c6       	rjmp	.+3138   	; 0xc6c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1f c6       	rjmp	.+3134   	; 0xc6c <__bad_interrupt>
      2e:	00 00       	nop
      30:	1d c6       	rjmp	.+3130   	; 0xc6c <__bad_interrupt>
      32:	00 00       	nop
      34:	1b c6       	rjmp	.+3126   	; 0xc6c <__bad_interrupt>
      36:	00 00       	nop
      38:	19 c6       	rjmp	.+3122   	; 0xc6c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	17 c6       	rjmp	.+3118   	; 0xc6c <__bad_interrupt>
      3e:	00 00       	nop
      40:	15 c6       	rjmp	.+3114   	; 0xc6c <__bad_interrupt>
      42:	00 00       	nop
      44:	13 c6       	rjmp	.+3110   	; 0xc6c <__bad_interrupt>
      46:	00 00       	nop
      48:	11 c6       	rjmp	.+3106   	; 0xc6c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0f c6       	rjmp	.+3102   	; 0xc6c <__bad_interrupt>
      4e:	00 00       	nop
      50:	0d c6       	rjmp	.+3098   	; 0xc6c <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__vector_21>
      58:	09 c6       	rjmp	.+3090   	; 0xc6c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	07 c6       	rjmp	.+3086   	; 0xc6c <__bad_interrupt>
      5e:	00 00       	nop
      60:	05 c6       	rjmp	.+3082   	; 0xc6c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3d 39 	jmp	0x727a	; 0x727a <__vector_25>
      68:	0c 94 68 39 	jmp	0x72d0	; 0x72d0 <__vector_26>
      6c:	ff c5       	rjmp	.+3070   	; 0xc6c <__bad_interrupt>
      6e:	00 00       	nop
      70:	fd c5       	rjmp	.+3066   	; 0xc6c <__bad_interrupt>
      72:	00 00       	nop
      74:	fb c5       	rjmp	.+3062   	; 0xc6c <__bad_interrupt>
      76:	00 00       	nop
      78:	f9 c5       	rjmp	.+3058   	; 0xc6c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f7 c5       	rjmp	.+3054   	; 0xc6c <__bad_interrupt>
      7e:	00 00       	nop
      80:	f5 c5       	rjmp	.+3050   	; 0xc6c <__bad_interrupt>
      82:	00 00       	nop
      84:	f3 c5       	rjmp	.+3046   	; 0xc6c <__bad_interrupt>
      86:	00 00       	nop
      88:	f1 c5       	rjmp	.+3042   	; 0xc6c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ef c5       	rjmp	.+3038   	; 0xc6c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 02 37 	jmp	0x6e04	; 0x6e04 <__vector_36>
      94:	0c 94 43 37 	jmp	0x6e86	; 0x6e86 <__vector_37>
      98:	e9 c5       	rjmp	.+3026   	; 0xc6c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e7 c5       	rjmp	.+3022   	; 0xc6c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e5 c5       	rjmp	.+3018   	; 0xc6c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e3 c5       	rjmp	.+3014   	; 0xc6c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e1 c5       	rjmp	.+3010   	; 0xc6c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	df c5       	rjmp	.+3006   	; 0xc6c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	dd c5       	rjmp	.+3002   	; 0xc6c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	db c5       	rjmp	.+2998   	; 0xc6c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	d9 c5       	rjmp	.+2994   	; 0xc6c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	d7 c5       	rjmp	.+2990   	; 0xc6c <__bad_interrupt>
      be:	00 00       	nop
      c0:	d5 c5       	rjmp	.+2986   	; 0xc6c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d3 c5       	rjmp	.+2982   	; 0xc6c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d1 c5       	rjmp	.+2978   	; 0xc6c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	cf c5       	rjmp	.+2974   	; 0xc6c <__bad_interrupt>
      ce:	00 00       	nop
      d0:	cd c5       	rjmp	.+2970   	; 0xc6c <__bad_interrupt>
      d2:	00 00       	nop
      d4:	cb c5       	rjmp	.+2966   	; 0xc6c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	c9 c5       	rjmp	.+2962   	; 0xc6c <__bad_interrupt>
      da:	00 00       	nop
      dc:	c7 c5       	rjmp	.+2958   	; 0xc6c <__bad_interrupt>
      de:	00 00       	nop
      e0:	c5 c5       	rjmp	.+2954   	; 0xc6c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4e 24       	eor	r4, r14
      e6:	59 24       	eor	r5, r9
      e8:	62 24       	eor	r6, r2
      ea:	78 24       	eor	r7, r8
      ec:	96 24       	eor	r9, r6
      ee:	b0 24       	eor	r11, r0
      f0:	b6 24       	eor	r11, r6
      f2:	bf 24       	eor	r11, r15
      f4:	13 24       	eor	r1, r3
      f6:	ea 23       	and	r30, r26
      f8:	a4 25       	eor	r26, r4
      fa:	89 25       	eor	r24, r9
      fc:	e4 24       	eor	r14, r4
      fe:	2f 25       	eor	r18, r15
     100:	4e 25       	eor	r20, r14
     102:	67 25       	eor	r22, r7
     104:	7d 25       	eor	r23, r13
     106:	0d 25       	eor	r16, r13
     108:	1c 25       	eor	r17, r12
     10a:	1c 25       	eor	r17, r12
     10c:	3f 26       	eor	r3, r31
     10e:	48 26       	eor	r4, r24
     110:	15 26       	eor	r1, r21
     112:	58 26       	eor	r5, r24
     114:	78 26       	eor	r7, r24
     116:	a2 26       	eor	r10, r18
     118:	b2 26       	eor	r11, r18
     11a:	30 26       	eor	r3, r16
     11c:	36 26       	eor	r3, r22
     11e:	3f 26       	eor	r3, r31
     120:	a7 27       	eor	r26, r23
     122:	b4 27       	eor	r27, r20
     124:	bd 27       	eor	r27, r29
     126:	ce 27       	eor	r28, r30
     128:	e2 27       	eor	r30, r18
     12a:	fb 27       	eor	r31, r27
     12c:	02 28       	or	r0, r2
     12e:	08 28       	or	r0, r8
     130:	86 27       	eor	r24, r22
     132:	5d 27       	eor	r21, r29
     134:	e9 3b       	cpi	r30, 0xB9	; 185
     136:	0d 3c       	cpi	r16, 0xCD	; 205
     138:	09 3c       	cpi	r16, 0xC9	; 201
     13a:	05 3c       	cpi	r16, 0xC5	; 197
     13c:	fd 3b       	cpi	r31, 0xBD	; 189
     13e:	f9 3b       	cpi	r31, 0xB9	; 185
     140:	f5 3b       	cpi	r31, 0xB5	; 181
     142:	f1 3b       	cpi	r31, 0xB1	; 177
     144:	ed 3b       	cpi	r30, 0xBD	; 189
     146:	01 3c       	cpi	r16, 0xC1	; 193
     148:	1f 3c       	cpi	r17, 0xCF	; 207
     14a:	27 3c       	cpi	r18, 0xC7	; 199
     14c:	0c 3c       	cpi	r16, 0xCC	; 204
     14e:	08 3c       	cpi	r16, 0xC8	; 200
     150:	04 3c       	cpi	r16, 0xC4	; 196
     152:	fc 3b       	cpi	r31, 0xBC	; 188
     154:	f8 3b       	cpi	r31, 0xB8	; 184
     156:	f4 3b       	cpi	r31, 0xB4	; 180
     158:	f0 3b       	cpi	r31, 0xB0	; 176
     15a:	ec 3b       	cpi	r30, 0xBC	; 188
     15c:	00 3c       	cpi	r16, 0xC0	; 192
     15e:	1e 3c       	cpi	r17, 0xCE	; 206

00000160 <__trampolines_end>:
     160:	4c 6f       	ori	r20, 0xFC	; 252
     162:	67 3a       	cpi	r22, 0xA7	; 167
     164:	20 00       	.word	0x0020	; ????

00000166 <ErrorText>:
     166:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     176:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     186:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     196:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1a6:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1b6:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1c6:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1d6:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1e6:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1f6:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     206:	00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00 00 00     ....Mod:Fail....
     216:	00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e 6f 77     ......Mod:Unknow
     226:	49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d 69 64     Inp.....OVFL:Mid
     236:	69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c 3a 4d     iIn.......OVFL:M
     246:	69 64 69 4f 75 74 00 00 00 00 04 00 4f 56 46 4c     idiOut......OVFL
     256:	3a 50 69 70 65 4d 73 67 00 00 00 00 05 00 50 77     :PipeMsg......Pw
     266:	72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00           r:OuptutOn....

00000274 <releaseKeyString>:
     274:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     284:	6e 00                                               n.

00000286 <prog_name>:
     286:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

00000295 <usbHWBits>:
     295:	2c 42 69 74 73 3a 00                                ,Bits:.

0000029c <usbHWmodule>:
     29c:	4d 6f 64 75 6c 65 3a 00                             Module:.

000002a4 <usbHWempty>:
     2a4:	65 6d 70 74 79 00                                   empty.

000002aa <usbHWRange>:
     2aa:	52 61 6e 67 65 3a 20 00                             Range: .

000002b2 <usbHWManual>:
     2b2:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

000002bb <usbHWmodulCheck>:
     2bb:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     2cb:	20 00                                                .

000002cd <usbHWmodulInst>:
     2cd:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     2dd:	3a 20 00                                            : .

000002e0 <usbHWtitel>:
     2e0:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     2f0:	72 61 74 69 6f 6e 0d 0a 00                          ration...

000002f9 <HelloMsg>:
     2f9:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     309:	65 72 66 61 63 65 0d 0a 00                          erface...

00000312 <usbLog>:
     312:	4c 6f 67 0d 0a 00                                   Log...

00000318 <usbEmpty>:
     318:	65 6d 70 74 79 0d 0a 00                             empty...

00000320 <msg_programming2>:
     320:	6f 6b 20 20 20 20 20 00                             ok     .

00000328 <msg_programming1>:
     328:	73 61 76 65 2e 2e 2e 00                             save....

00000330 <logNone>:
     330:	3c 6e 6f 6e 65 3e 00                                <none>.

00000337 <stringNotAssigen>:
     337:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

00000342 <menuMessageMIDIpanic>:
     342:	4e 2e 6f 66 66 20 73 65 6e 74 00                    N.off sent.

0000034d <MenuMIDIOutText>:
     34d:	4f 75 74 3a 00                                      Out:.

00000352 <MenuMIDIInText>:
     352:	49 6e 3a 00                                         In:.

00000356 <initMenuText>:
     356:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

00000360 <nibbleInfo>:
	...
     368:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     378:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     388:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     398:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     3a8:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     3b8:	06 07 08 00 01 02 03 04 05 06 07 00 00 00 00 00     ................
     3c8:	00 00 00 00                                         ....

000003cc <menu_selFunc>:
     3cc:	81 10 4d 65 6e 75 00 00 00 00 00 00 f8 04 ee 04     ..Menu..........
     3dc:	00 00 00 00 01 10 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     3ec:	dc 07 e4 04 00 00 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     3fc:	32 3c 33 00 00 00 c6 04 c4 1c 00 00 01 10 4b 6f     2<3...........Ko
     40c:	70 70 65 6c 31 3c 33 00 00 00 bc 04 d5 1c 00 00     ppel1<3.........
     41c:	01 10 4b 6f 70 70 65 6c 50 3c 33 00 00 00 b2 04     ..KoppelP<3.....
     42c:	e6 1c 00 00 01 10 4b 6f 70 70 65 6c 31 3c 32 00     ......Koppel1<2.
     43c:	00 00 a8 04 f7 1c 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     44c:	50 3c 32 00 00 00 9e 04 08 1d 00 00 01 10 4b 6f     P<2...........Ko
     45c:	70 70 65 6c 50 3c 31 00 00 00 94 04 19 1d 00 00     ppelP<1.........
     46c:	01 10 4d 49 44 49 20 4f 66 66 00 00 00 00 d0 04     ..MIDI Off......
     47c:	f5 1d 00 00 c1 10 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     48c:	7c 08 da 04 00 00 00 00                             |.......

00000494 <shortKeyTextCplP1>:
     494:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

0000049e <shortKeyTextCplP2>:
     49e:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

000004a8 <shortKeyTextCpl12>:
     4a8:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000004b2 <shortKeyTextCplP3>:
     4b2:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000004bc <shortKeyTextCpl13>:
     4bc:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000004c6 <shortKeyTextCpl23>:
     4c6:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000004d0 <shortKeyTextMIDIoff>:
     4d0:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000004da <shortKeyTextSetup>:
     4da:	53 65 74 75 00 00 00 00 00 00                       Setu......

000004e4 <shortKeyTextStim>:
     4e4:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000004ee <shortKeyTextMenu>:
     4ee:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000004f8 <menu_main>:
     4f8:	81 00 4d 49 44 49 00 00 00 00 00 00 5c 05 00 00     ..MIDI......\...
     508:	00 00 00 00 01 00 54 61 73 74 65 6e 00 00 00 00     ......Tasten....
     518:	8c 07 00 00 00 00 f1 1d 01 00 53 74 69 6d 6d 65     ..........Stimme
     528:	6e 00 00 00 dc 07 00 00 00 00 00 00 01 00 53 74     n.............St
     538:	61 74 75 73 00 00 00 00 b0 0b 00 00 00 00 00 00     atus............
     548:	c1 00 53 65 74 75 70 00 00 00 00 00 7c 08 00 00     ..Setup.....|...
     558:	00 00 00 00                                         ....

0000055c <menu_midi>:
     55c:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     56c:	f5 1d 00 00 09 00 41 63 74 2e 53 65 6e 73 65 00     ......Act.Sense.
     57c:	00 00 99 07 00 00 ec 21 01 00 4d 49 44 49 69 6e     .......!..MIDIin
     58c:	00 00 00 00 ac 05 00 00 00 00 24 20 c1 00 4d 49     ..........$ ..MI
     59c:	44 49 6f 75 74 00 00 00 2c 08 00 00 00 00 9e 1f     DIout...,.......

000005ac <menu_midiIn>:
     5ac:	81 00 43 68 2e 31 00 00 00 00 00 00 ec 06 00 00     ..Ch.1..........
     5bc:	87 1d 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     5cc:	ec 06 01 00 87 1d 00 00 01 00 43 68 2e 33 00 00     ..........Ch.3..
     5dc:	00 00 00 00 ec 06 02 00 87 1d 00 00 01 00 43 68     ..............Ch
     5ec:	2e 34 00 00 00 00 00 00 ec 06 03 00 87 1d 00 00     .4..............
     5fc:	01 00 43 68 2e 35 00 00 00 00 00 00 ec 06 04 00     ..Ch.5..........
     60c:	87 1d 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     61c:	ec 06 05 00 87 1d 00 00 01 00 43 68 2e 37 00 00     ..........Ch.7..
     62c:	00 00 00 00 ec 06 06 00 87 1d 00 00 01 00 43 68     ..............Ch
     63c:	2e 38 00 00 00 00 00 00 ec 06 07 00 87 1d 00 00     .8..............
     64c:	01 00 43 68 2e 39 00 00 00 00 00 00 ec 06 08 00     ..Ch.9..........
     65c:	87 1d 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     66c:	ec 06 09 00 87 1d 00 00 01 00 43 68 2e 31 31 00     ..........Ch.11.
     67c:	00 00 00 00 ec 06 0a 00 87 1d 00 00 01 00 43 68     ..............Ch
     68c:	2e 31 32 00 00 00 00 00 ec 06 0b 00 87 1d 00 00     .12.............
     69c:	01 00 43 68 2e 31 33 00 00 00 00 00 ec 06 0c 00     ..Ch.13.........
     6ac:	87 1d 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     6bc:	ec 06 0d 00 87 1d 00 00 01 00 43 68 2e 31 35 00     ..........Ch.15.
     6cc:	00 00 00 00 ec 06 0e 00 87 1d 00 00 c1 00 43 68     ..............Ch
     6dc:	2e 31 36 00 00 00 00 00 ec 06 0f 00 87 1d 00 00     .16.............

000006ec <menu_midiInSec>:
     6ec:	81 00 53 65 63 74 2e 31 00 00 00 00 3c 07 00 00     ..Sect.1....<...
     6fc:	92 1d 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     70c:	3c 07 01 00 92 1d 00 00 01 00 53 65 63 74 2e 33     <.........Sect.3
     71c:	00 00 00 00 3c 07 02 00 92 1d 00 00 c1 00 53 65     ....<.........Se
     72c:	63 74 2e 34 00 00 00 00 3c 07 03 00 92 1d 00 00     ct.4....<.......

0000073c <menu_midiInVar>:
     73c:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 df 07     ..Manual........
     74c:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     75c:	00 00 e0 07 00 00 00 00 06 80 52 61 6e 67 65 00     ..........Range.
     76c:	00 00 00 00 00 00 e1 07 00 00 00 00 c4 90 4d 61     ..............Ma
     77c:	6e 4e 6f 74 65 00 00 00 00 00 e2 07 00 00 00 00     nNote...........

0000078c <menu_key>:
     78c:	81 08 54 61 73 74 65 31 00 00 00 00 cc 03 00 00     ..Taste1........
     79c:	da 1d be 21 01 08 54 61 73 74 65 32 00 00 00 00     ...!..Taste2....
     7ac:	cc 03 01 00 da 1d be 21 01 08 54 61 73 74 65 33     .......!..Taste3
     7bc:	00 00 00 00 cc 03 02 00 da 1d be 21 c1 08 54 61     ...........!..Ta
     7cc:	73 74 65 34 00 00 00 00 cc 03 03 00 da 1d be 21     ste4...........!

000007dc <menu_tune>:
     7dc:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     7ec:	65 1e 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     e.... Man.2.....
     7fc:	00 00 01 00 65 1e 00 00 01 20 4d 61 6e 2e 31 00     ....e.... Man.1.
     80c:	00 00 00 00 00 00 02 00 65 1e 00 00 c1 20 50 65     ........e.... Pe
     81c:	64 61 6c 00 00 00 00 00 00 00 03 00 65 1e 00 00     dal.........e...

0000082c <menu_midiOut>:
     82c:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 df 08     ..III...........
     83c:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     84c:	00 00 e0 08 00 00 00 00 03 10 49 00 00 00 00 00     ..........I.....
     85c:	00 00 00 00 00 00 e1 08 00 00 00 00 c3 10 50 00     ..............P.
	...
     874:	00 00 e2 08 00 00 00 00                             ........

0000087c <menu_setup>:
     87c:	81 00 4d 6f 64 75 6c 65 00 00 00 00 44 09 00 00     ..Module....D...
     88c:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     89c:	98 0a 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     ..........Power.
     8ac:	00 00 00 00 08 09 00 00 00 00 00 00 c1 00 45 45     ..............EE
     8bc:	70 72 6f 6d 00 00 00 00 cc 08 00 00 00 00 00 00     prom............

000008cc <menu_eeprom>:
     8cc:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     8dc:	63 22 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     c"....EEBackup..
     8ec:	00 00 00 00 2f 22 00 00 c1 00 45 45 52 65 73 74     ..../"....EERest
     8fc:	6f 72 65 00 00 00 00 00 49 22 00 00                 ore.....I"..

00000908 <menu_Power>:
     908:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     918:	f0 21 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .!....PowerOff..
     928:	00 00 00 00 10 22 00 00 c1 00 50 2e 52 65 73 74     ....."....P.Rest
     938:	61 72 74 00 00 00 00 00 7d 22 00 00                 art.....}"..

00000944 <menu_module>:
     944:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 52 03     ..ModRead.....R.
     954:	00 00 2c 20 0a 00 4d 6f 64 57 72 69 74 65 00 00     .., ..ModWrite..
     964:	00 00 51 03 00 00 2c 20 0a 08 4d 6f 64 4f 4b 00     ..Q..., ..ModOK.
     974:	00 00 00 00 00 00 4a 02 00 00 00 00 01 00 4d 6f     ......J.......Mo
     984:	64 54 65 73 74 00 00 00 a8 09 00 00 00 00 00 00     dTest...........
     994:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 d4 0a 00 00     ..ModAssign.....
     9a4:	00 00 28 20                                         ..( 

000009a8 <menu_ModeSel>:
     9a8:	81 00 4d 6f 64 2e 30 00 00 00 00 00 48 0a 00 00     ..Mod.0.....H...
     9b8:	7c 1d 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     |.....Mod.1.....
     9c8:	48 0a 01 00 7c 1d 00 00 01 00 4d 6f 64 2e 32 00     H...|.....Mod.2.
     9d8:	00 00 00 00 48 0a 02 00 7c 1d 00 00 01 00 4d 6f     ....H...|.....Mo
     9e8:	64 2e 33 00 00 00 00 00 48 0a 03 00 7c 1d 00 00     d.3.....H...|...
     9f8:	01 00 4d 6f 64 2e 34 00 00 00 00 00 48 0a 04 00     ..Mod.4.....H...
     a08:	7c 1d 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     |.....Mod.5.....
     a18:	48 0a 05 00 7c 1d 00 00 01 00 4d 6f 64 2e 36 00     H...|.....Mod.6.
     a28:	00 00 00 00 48 0a 06 00 7c 1d 00 00 c1 00 4d 6f     ....H...|.....Mo
     a38:	64 2e 37 00 00 00 00 00 48 0a 07 00 7c 1d 00 00     d.7.....H...|...

00000a48 <menu_ModTestSelcted>:
     a48:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     a58:	0b 1e 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
     a68:	00 00 5c 05 2a 1d 50 1d 01 00 54 65 73 74 50 74     ..\.*.P...TestPt
     a78:	72 6e 00 00 00 00 00 00 9f 23 00 00 c1 00 4c 6f     rn.......#....Lo
     a88:	6f 70 54 73 74 00 00 00 00 00 00 00 52 1e 00 00     opTst.......R...

00000a98 <menu_USBser>:
     a98:	89 00 41 63 74 69 76 65 00 00 00 00 00 00 5f 0b     ..Active......_.
     aa8:	00 00 a8 21 01 00 53 65 6e 64 4c 6f 67 00 00 00     ...!..SendLog...
     ab8:	00 00 00 00 b1 20 00 00 c1 00 53 6e 64 48 57 43     ..... ....SndHWC
     ac8:	66 67 00 00 00 00 00 00 d2 20 00 00                 fg....... ..

00000ad4 <menu_modAssign>:
     ad4:	81 00 4d 61 6e 2e 33 00 00 00 00 00 24 0b 00 00     ..Man.3.....$...
     ae4:	b0 1d 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
     af4:	24 0b 01 00 b0 1d 00 00 01 00 4d 61 6e 2e 31 00     $.........Man.1.
     b04:	00 00 00 00 24 0b 02 00 b0 1d 00 00 c1 00 50 65     ....$.........Pe
     b14:	64 61 6c 00 00 00 00 00 24 0b 03 00 b0 1d 00 00     dal.....$.......

00000b24 <menu_modSection>:
     b24:	81 00 53 65 63 74 2e 31 00 00 00 00 74 0b 00 00     ..Sect.1....t...
     b34:	bb 1d 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     b44:	74 0b 01 00 bb 1d 00 00 01 00 53 65 63 74 2e 33     t.........Sect.3
     b54:	00 00 00 00 74 0b 02 00 bb 1d 00 00 c1 00 53 65     ....t.........Se
     b64:	63 74 2e 34 00 00 00 00 74 0b 03 00 bb 1d 00 00     ct.4....t.......

00000b74 <menu_modDefine>:
     b74:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 e3 08     ..NoteBeg.......
     b84:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
     b94:	00 00 e4 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
     ba4:	2f 42 69 74 00 00 e5 08 00 00 00 00                 /Bit........

00000bb0 <menu_status>:
     bb0:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
     bc0:	30 20 00 00 02 40 4d 49 44 49 2d 49 6e 00 00 00     0 ...@MIDI-In...
     bd0:	00 00 00 00 a2 1f 00 00 c2 40 4d 49 44 49 2d 4f     .........@MIDI-O
     be0:	75 74 00 00 00 00 00 00 e3 1f 00 00                 ut..........

00000bec <sw_version>:
     bec:	56 30 2e 35 36 00                                   V0.56.

00000bf2 <keylabel_text>:
     bf2:	54 65 78 74 80 00                                   Text..

00000bf8 <keylabel_exit>:
     bf8:	45 78 69 74 00                                      Exit.

00000bfd <keylabel_onoff>:
     bfd:	45 69 6e 80 00                                      Ein..

00000c02 <keylabel_minus>:
     c02:	2d 00                                               -.

00000c04 <keylabel_plus>:
     c04:	2b 00                                               +.

00000c06 <keylabel_left>:
     c06:	7f 00                                               ..

00000c08 <keylabel_right>:
     c08:	7e 00                                               ~.

00000c0a <keylabel_down>:
     c0a:	09 00                                               ..

00000c0c <keylabel_up>:
     c0c:	08 00                                               ..

00000c0e <cgPattern_Block>:
     c0e:	00 00 0e 0e 0e 0e 00 00                             ........

00000c16 <cgPattern_Down>:
     c16:	04 04 04 04 15 0e 04 00                             ........

00000c1e <cgPattern_Up>:
     c1e:	04 0e 15 04 04 04 04 00                             ........

00000c26 <cr_lf>:
     c26:	0d 0a 00 00                                         ....

00000c2a <__ctors_end>:
     c2a:	11 24       	eor	r1, r1
     c2c:	1f be       	out	0x3f, r1	; 63
     c2e:	cf ef       	ldi	r28, 0xFF	; 255
     c30:	d1 e2       	ldi	r29, 0x21	; 33
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	cd bf       	out	0x3d, r28	; 61
     c36:	00 e0       	ldi	r16, 0x00	; 0
     c38:	0c bf       	out	0x3c, r16	; 60

00000c3a <__do_copy_data>:
     c3a:	12 e0       	ldi	r17, 0x02	; 2
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	b2 e0       	ldi	r27, 0x02	; 2
     c40:	e8 ee       	ldi	r30, 0xE8	; 232
     c42:	fb e7       	ldi	r31, 0x7B	; 123
     c44:	00 e0       	ldi	r16, 0x00	; 0
     c46:	0b bf       	out	0x3b, r16	; 59
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <__do_copy_data+0x14>
     c4a:	07 90       	elpm	r0, Z+
     c4c:	0d 92       	st	X+, r0
     c4e:	aa 30       	cpi	r26, 0x0A	; 10
     c50:	b1 07       	cpc	r27, r17
     c52:	d9 f7       	brne	.-10     	; 0xc4a <__do_copy_data+0x10>

00000c54 <__do_clear_bss>:
     c54:	2c e0       	ldi	r18, 0x0C	; 12
     c56:	aa e0       	ldi	r26, 0x0A	; 10
     c58:	b2 e0       	ldi	r27, 0x02	; 2
     c5a:	01 c0       	rjmp	.+2      	; 0xc5e <.do_clear_bss_start>

00000c5c <.do_clear_bss_loop>:
     c5c:	1d 92       	st	X+, r1

00000c5e <.do_clear_bss_start>:
     c5e:	a9 3d       	cpi	r26, 0xD9	; 217
     c60:	b2 07       	cpc	r27, r18
     c62:	e1 f7       	brne	.-8      	; 0xc5c <.do_clear_bss_loop>
     c64:	0e 94 cf 1a 	call	0x359e	; 0x359e <main>
     c68:	0c 94 f2 3d 	jmp	0x7be4	; 0x7be4 <_exit>

00000c6c <__bad_interrupt>:
     c6c:	c9 c9       	rjmp	.-3182   	; 0x0 <__vectors>

00000c6e <eeprom_ReadManualMap>:

void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	82 e3       	ldi	r24, 0x32	; 50
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <eeprom_read_word>
     c82:	7c 01       	movw	r14, r24
     c84:	cf ef       	ldi	r28, 0xFF	; 255
     c86:	df ef       	ldi	r29, 0xFF	; 255
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	8c 01       	movw	r16, r24
     c8e:	0f 5f       	subi	r16, 0xFF	; 255
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     c96:	9e 01       	movw	r18, r28
     c98:	28 27       	eor	r18, r24
     c9a:	82 2f       	mov	r24, r18
     c9c:	82 95       	swap	r24
     c9e:	82 27       	eor	r24, r18
     ca0:	08 2e       	mov	r0, r24
     ca2:	86 95       	lsr	r24
     ca4:	86 95       	lsr	r24
     ca6:	80 25       	eor	r24, r0
     ca8:	08 2e       	mov	r0, r24
     caa:	86 95       	lsr	r24
     cac:	80 25       	eor	r24, r0
     cae:	87 70       	andi	r24, 0x07	; 7
     cb0:	02 2e       	mov	r0, r18
     cb2:	23 2f       	mov	r18, r19
     cb4:	86 95       	lsr	r24
     cb6:	07 94       	ror	r0
     cb8:	87 95       	ror	r24
     cba:	30 2d       	mov	r19, r0
     cbc:	28 27       	eor	r18, r24
     cbe:	06 94       	lsr	r0
     cc0:	87 95       	ror	r24
     cc2:	30 25       	eor	r19, r0
     cc4:	28 27       	eor	r18, r24
     cc6:	e9 01       	movw	r28, r18
     cc8:	c8 01       	movw	r24, r16
     cca:	02 53       	subi	r16, 0x32	; 50
     ccc:	10 40       	sbci	r17, 0x00	; 0
     cce:	f1 f6       	brne	.-68     	; 0xc8c <eeprom_ReadManualMap+0x1e>
     cd0:	ec 16       	cp	r14, r28
     cd2:	fd 06       	cpc	r15, r29
     cd4:	69 f0       	breq	.+26     	; 0xcf0 <eeprom_ReadManualMap+0x82>
     cd6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	08 95       	ret
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     cf8:	8d 34       	cpi	r24, 0x4D	; 77
     cfa:	69 f7       	brne	.-38     	; 0xcd6 <eeprom_ReadManualMap+0x68>
     cfc:	40 e3       	ldi	r20, 0x30	; 48
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	62 e0       	ldi	r22, 0x02	; 2
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	83 ee       	ldi	r24, 0xE3	; 227
     d06:	98 e0       	ldi	r25, 0x08	; 8
     d08:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <eeprom_read_block>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	e9 cf       	rjmp	.-46     	; 0xce2 <eeprom_ReadManualMap+0x74>

00000d10 <eeprom_ReadMidiInMap>:
     d10:	ef 92       	push	r14
     d12:	ff 92       	push	r15
     d14:	0f 93       	push	r16
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	85 e3       	ldi	r24, 0x35	; 53
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <eeprom_read_word>
     d24:	7c 01       	movw	r14, r24
     d26:	cf ef       	ldi	r28, 0xFF	; 255
     d28:	df ef       	ldi	r29, 0xFF	; 255
     d2a:	85 e3       	ldi	r24, 0x35	; 53
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	8c 01       	movw	r16, r24
     d30:	0f 5f       	subi	r16, 0xFF	; 255
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     d38:	9e 01       	movw	r18, r28
     d3a:	28 27       	eor	r18, r24
     d3c:	82 2f       	mov	r24, r18
     d3e:	82 95       	swap	r24
     d40:	82 27       	eor	r24, r18
     d42:	08 2e       	mov	r0, r24
     d44:	86 95       	lsr	r24
     d46:	86 95       	lsr	r24
     d48:	80 25       	eor	r24, r0
     d4a:	08 2e       	mov	r0, r24
     d4c:	86 95       	lsr	r24
     d4e:	80 25       	eor	r24, r0
     d50:	87 70       	andi	r24, 0x07	; 7
     d52:	02 2e       	mov	r0, r18
     d54:	23 2f       	mov	r18, r19
     d56:	86 95       	lsr	r24
     d58:	07 94       	ror	r0
     d5a:	87 95       	ror	r24
     d5c:	30 2d       	mov	r19, r0
     d5e:	28 27       	eor	r18, r24
     d60:	06 94       	lsr	r0
     d62:	87 95       	ror	r24
     d64:	30 25       	eor	r19, r0
     d66:	28 27       	eor	r18, r24
     d68:	e9 01       	movw	r28, r18
     d6a:	c8 01       	movw	r24, r16
     d6c:	05 53       	subi	r16, 0x35	; 53
     d6e:	11 40       	sbci	r17, 0x01	; 1
     d70:	f1 f6       	brne	.-68     	; 0xd2e <eeprom_ReadMidiInMap+0x1e>
     d72:	ec 16       	cp	r14, r28
     d74:	fd 06       	cpc	r15, r29
     d76:	69 f0       	breq	.+26     	; 0xd92 <eeprom_ReadMidiInMap+0x82>
     d78:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     d7c:	82 60       	ori	r24, 0x02	; 2
     d7e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
     d82:	8f ef       	ldi	r24, 0xFF	; 255
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	ff 90       	pop	r15
     d8e:	ef 90       	pop	r14
     d90:	08 95       	ret
     d92:	84 e3       	ldi	r24, 0x34	; 52
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     d9a:	89 34       	cpi	r24, 0x49	; 73
     d9c:	69 f7       	brne	.-38     	; 0xd78 <eeprom_ReadMidiInMap+0x68>
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	51 e0       	ldi	r21, 0x01	; 1
     da2:	65 e3       	ldi	r22, 0x35	; 53
     da4:	70 e0       	ldi	r23, 0x00	; 0
     da6:	8f ed       	ldi	r24, 0xDF	; 223
     da8:	97 e0       	ldi	r25, 0x07	; 7
     daa:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <eeprom_read_block>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	e9 cf       	rjmp	.-46     	; 0xd84 <eeprom_ReadMidiInMap+0x74>

00000db2 <eeprom_ReadMidiOutMap>:
     db2:	ef 92       	push	r14
     db4:	ff 92       	push	r15
     db6:	0f 93       	push	r16
     db8:	1f 93       	push	r17
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	8d e3       	ldi	r24, 0x3D	; 61
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <eeprom_read_word>
     dc6:	7c 01       	movw	r14, r24
     dc8:	cf ef       	ldi	r28, 0xFF	; 255
     dca:	df ef       	ldi	r29, 0xFF	; 255
     dcc:	88 e3       	ldi	r24, 0x38	; 56
     dce:	91 e0       	ldi	r25, 0x01	; 1
     dd0:	8c 01       	movw	r16, r24
     dd2:	0f 5f       	subi	r16, 0xFF	; 255
     dd4:	1f 4f       	sbci	r17, 0xFF	; 255
     dd6:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     dda:	9e 01       	movw	r18, r28
     ddc:	28 27       	eor	r18, r24
     dde:	82 2f       	mov	r24, r18
     de0:	82 95       	swap	r24
     de2:	82 27       	eor	r24, r18
     de4:	08 2e       	mov	r0, r24
     de6:	86 95       	lsr	r24
     de8:	86 95       	lsr	r24
     dea:	80 25       	eor	r24, r0
     dec:	08 2e       	mov	r0, r24
     dee:	86 95       	lsr	r24
     df0:	80 25       	eor	r24, r0
     df2:	87 70       	andi	r24, 0x07	; 7
     df4:	02 2e       	mov	r0, r18
     df6:	23 2f       	mov	r18, r19
     df8:	86 95       	lsr	r24
     dfa:	07 94       	ror	r0
     dfc:	87 95       	ror	r24
     dfe:	30 2d       	mov	r19, r0
     e00:	28 27       	eor	r18, r24
     e02:	06 94       	lsr	r0
     e04:	87 95       	ror	r24
     e06:	30 25       	eor	r19, r0
     e08:	28 27       	eor	r18, r24
     e0a:	e9 01       	movw	r28, r18
     e0c:	c8 01       	movw	r24, r16
     e0e:	0d 53       	subi	r16, 0x3D	; 61
     e10:	11 40       	sbci	r17, 0x01	; 1
     e12:	f1 f6       	brne	.-68     	; 0xdd0 <eeprom_ReadMidiOutMap+0x1e>
     e14:	ec 16       	cp	r14, r28
     e16:	fd 06       	cpc	r15, r29
     e18:	69 f0       	breq	.+26     	; 0xe34 <eeprom_ReadMidiOutMap+0x82>
     e1a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     e1e:	84 60       	ori	r24, 0x04	; 4
     e20:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	08 95       	ret
     e34:	87 e3       	ldi	r24, 0x37	; 55
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     e3c:	8f 34       	cpi	r24, 0x4F	; 79
     e3e:	69 f7       	brne	.-38     	; 0xe1a <eeprom_ReadMidiOutMap+0x68>
     e40:	44 e0       	ldi	r20, 0x04	; 4
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	68 e3       	ldi	r22, 0x38	; 56
     e46:	71 e0       	ldi	r23, 0x01	; 1
     e48:	8f ed       	ldi	r24, 0xDF	; 223
     e4a:	98 e0       	ldi	r25, 0x08	; 8
     e4c:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <eeprom_read_block>
     e50:	8c e3       	ldi	r24, 0x3C	; 60
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     e58:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <midi_TxActivceSense>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	e3 cf       	rjmp	.-58     	; 0xe26 <eeprom_ReadMidiOutMap+0x74>

00000e60 <eeprom_ReadModules>:
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	82 e4       	ldi	r24, 0x42	; 66
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <eeprom_read_word>
     e6e:	8c 01       	movw	r16, r24
     e70:	80 e4       	ldi	r24, 0x40	; 64
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     e78:	c8 2f       	mov	r28, r24
     e7a:	8f ef       	ldi	r24, 0xFF	; 255
     e7c:	9f ef       	ldi	r25, 0xFF	; 255
     e7e:	8c 27       	eor	r24, r28
     e80:	28 2f       	mov	r18, r24
     e82:	22 95       	swap	r18
     e84:	28 27       	eor	r18, r24
     e86:	02 2e       	mov	r0, r18
     e88:	26 95       	lsr	r18
     e8a:	26 95       	lsr	r18
     e8c:	20 25       	eor	r18, r0
     e8e:	02 2e       	mov	r0, r18
     e90:	26 95       	lsr	r18
     e92:	20 25       	eor	r18, r0
     e94:	27 70       	andi	r18, 0x07	; 7
     e96:	08 2e       	mov	r0, r24
     e98:	89 2f       	mov	r24, r25
     e9a:	26 95       	lsr	r18
     e9c:	07 94       	ror	r0
     e9e:	27 95       	ror	r18
     ea0:	90 2d       	mov	r25, r0
     ea2:	82 27       	eor	r24, r18
     ea4:	06 94       	lsr	r0
     ea6:	27 95       	ror	r18
     ea8:	90 25       	eor	r25, r0
     eaa:	82 27       	eor	r24, r18
     eac:	08 17       	cp	r16, r24
     eae:	19 07       	cpc	r17, r25
     eb0:	51 f0       	breq	.+20     	; 0xec6 <eeprom_ReadModules+0x66>
     eb2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     eb6:	88 60       	ori	r24, 0x08	; 8
     eb8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	cf 91       	pop	r28
     ec0:	1f 91       	pop	r17
     ec2:	0f 91       	pop	r16
     ec4:	08 95       	ret
     ec6:	8f e3       	ldi	r24, 0x3F	; 63
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     ece:	89 36       	cpi	r24, 0x69	; 105
     ed0:	81 f7       	brne	.-32     	; 0xeb2 <eeprom_ReadModules+0x52>
     ed2:	c0 93 52 03 	sts	0x0352, r28	; 0x800352 <pipe_ModuleAssnRead>
     ed6:	81 e4       	ldi	r24, 0x41	; 65
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     ede:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <pipe_ModuleAssnWrite>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	ec cf       	rjmp	.-40     	; 0xebe <eeprom_ReadModules+0x5e>

00000ee6 <eeprom_ReadUSB>:
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	86 e4       	ldi	r24, 0x46	; 70
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <eeprom_read_word>
     ef4:	8c 01       	movw	r16, r24
     ef6:	85 e4       	ldi	r24, 0x45	; 69
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     efe:	c8 2f       	mov	r28, r24
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	9f ef       	ldi	r25, 0xFF	; 255
     f04:	8c 27       	eor	r24, r28
     f06:	28 2f       	mov	r18, r24
     f08:	22 95       	swap	r18
     f0a:	28 27       	eor	r18, r24
     f0c:	02 2e       	mov	r0, r18
     f0e:	26 95       	lsr	r18
     f10:	26 95       	lsr	r18
     f12:	20 25       	eor	r18, r0
     f14:	02 2e       	mov	r0, r18
     f16:	26 95       	lsr	r18
     f18:	20 25       	eor	r18, r0
     f1a:	27 70       	andi	r18, 0x07	; 7
     f1c:	08 2e       	mov	r0, r24
     f1e:	89 2f       	mov	r24, r25
     f20:	26 95       	lsr	r18
     f22:	07 94       	ror	r0
     f24:	27 95       	ror	r18
     f26:	90 2d       	mov	r25, r0
     f28:	82 27       	eor	r24, r18
     f2a:	06 94       	lsr	r0
     f2c:	27 95       	ror	r18
     f2e:	90 25       	eor	r25, r0
     f30:	82 27       	eor	r24, r18
     f32:	08 17       	cp	r16, r24
     f34:	19 07       	cpc	r17, r25
     f36:	51 f0       	breq	.+20     	; 0xf4c <eeprom_ReadUSB+0x66>
     f38:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     f3c:	88 60       	ori	r24, 0x08	; 8
     f3e:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	08 95       	ret
     f4c:	84 e4       	ldi	r24, 0x44	; 68
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     f54:	85 35       	cpi	r24, 0x55	; 85
     f56:	81 f7       	brne	.-32     	; 0xf38 <eeprom_ReadUSB+0x52>
     f58:	c0 93 5f 0b 	sts	0x0B5F, r28	; 0x800b5f <serusb_Active>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	f2 cf       	rjmp	.-28     	; 0xf44 <eeprom_ReadUSB+0x5e>

00000f60 <eeprom_ReadSoftkeys>:
     f60:	ef 92       	push	r14
     f62:	ff 92       	push	r15
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	88 e9       	ldi	r24, 0x98	; 152
     f6e:	93 e0       	ldi	r25, 0x03	; 3
     f70:	0e 94 c8 3d 	call	0x7b90	; 0x7b90 <eeprom_read_word>
     f74:	7c 01       	movw	r14, r24
     f76:	cf ef       	ldi	r28, 0xFF	; 255
     f78:	df ef       	ldi	r29, 0xFF	; 255
     f7a:	80 e9       	ldi	r24, 0x90	; 144
     f7c:	93 e0       	ldi	r25, 0x03	; 3
     f7e:	8c 01       	movw	r16, r24
     f80:	0f 5f       	subi	r16, 0xFF	; 255
     f82:	1f 4f       	sbci	r17, 0xFF	; 255
     f84:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
     f88:	9e 01       	movw	r18, r28
     f8a:	28 27       	eor	r18, r24
     f8c:	82 2f       	mov	r24, r18
     f8e:	82 95       	swap	r24
     f90:	82 27       	eor	r24, r18
     f92:	08 2e       	mov	r0, r24
     f94:	86 95       	lsr	r24
     f96:	86 95       	lsr	r24
     f98:	80 25       	eor	r24, r0
     f9a:	08 2e       	mov	r0, r24
     f9c:	86 95       	lsr	r24
     f9e:	80 25       	eor	r24, r0
     fa0:	87 70       	andi	r24, 0x07	; 7
     fa2:	02 2e       	mov	r0, r18
     fa4:	23 2f       	mov	r18, r19
     fa6:	86 95       	lsr	r24
     fa8:	07 94       	ror	r0
     faa:	87 95       	ror	r24
     fac:	30 2d       	mov	r19, r0
     fae:	28 27       	eor	r18, r24
     fb0:	06 94       	lsr	r0
     fb2:	87 95       	ror	r24
     fb4:	30 25       	eor	r19, r0
     fb6:	28 27       	eor	r18, r24
     fb8:	e9 01       	movw	r28, r18
     fba:	c8 01       	movw	r24, r16
     fbc:	08 59       	subi	r16, 0x98	; 152
     fbe:	13 40       	sbci	r17, 0x03	; 3
     fc0:	f1 f6       	brne	.-68     	; 0xf7e <eeprom_ReadSoftkeys+0x1e>
     fc2:	ec 16       	cp	r14, r28
     fc4:	fd 06       	cpc	r15, r29
     fc6:	69 f0       	breq	.+26     	; 0xfe2 <eeprom_ReadSoftkeys+0x82>
     fc8:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
     fcc:	80 68       	ori	r24, 0x80	; 128
     fce:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	08 95       	ret
     fe2:	48 e0       	ldi	r20, 0x08	; 8
     fe4:	50 e0       	ldi	r21, 0x00	; 0
     fe6:	60 e9       	ldi	r22, 0x90	; 144
     fe8:	73 e0       	ldi	r23, 0x03	; 3
     fea:	85 e4       	ldi	r24, 0x45	; 69
     fec:	95 e0       	ldi	r25, 0x05	; 5
     fee:	0e 94 b0 3d 	call	0x7b60	; 0x7b60 <eeprom_read_block>
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	ef cf       	rjmp	.-34     	; 0xfd4 <eeprom_ReadSoftkeys+0x74>

00000ff6 <eeprom_UpdateManualMap>:
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	e3 ee       	ldi	r30, 0xE3	; 227
     ffc:	f8 e0       	ldi	r31, 0x08	; 8
     ffe:	23 e1       	ldi	r18, 0x13	; 19
    1000:	39 e0       	ldi	r19, 0x09	; 9
    1002:	cf ef       	ldi	r28, 0xFF	; 255
    1004:	df ef       	ldi	r29, 0xFF	; 255
    1006:	81 91       	ld	r24, Z+
    1008:	be 01       	movw	r22, r28
    100a:	68 27       	eor	r22, r24
    100c:	86 2f       	mov	r24, r22
    100e:	82 95       	swap	r24
    1010:	86 27       	eor	r24, r22
    1012:	08 2e       	mov	r0, r24
    1014:	86 95       	lsr	r24
    1016:	86 95       	lsr	r24
    1018:	80 25       	eor	r24, r0
    101a:	08 2e       	mov	r0, r24
    101c:	86 95       	lsr	r24
    101e:	80 25       	eor	r24, r0
    1020:	87 70       	andi	r24, 0x07	; 7
    1022:	06 2e       	mov	r0, r22
    1024:	67 2f       	mov	r22, r23
    1026:	86 95       	lsr	r24
    1028:	07 94       	ror	r0
    102a:	87 95       	ror	r24
    102c:	70 2d       	mov	r23, r0
    102e:	68 27       	eor	r22, r24
    1030:	06 94       	lsr	r0
    1032:	87 95       	ror	r24
    1034:	70 25       	eor	r23, r0
    1036:	68 27       	eor	r22, r24
    1038:	eb 01       	movw	r28, r22
    103a:	2e 17       	cp	r18, r30
    103c:	3f 07       	cpc	r19, r31
    103e:	19 f7       	brne	.-58     	; 0x1006 <eeprom_UpdateManualMap+0x10>
    1040:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    1044:	6d e4       	ldi	r22, 0x4D	; 77
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    104e:	40 e3       	ldi	r20, 0x30	; 48
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	62 e0       	ldi	r22, 0x02	; 2
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	83 ee       	ldi	r24, 0xE3	; 227
    1058:	98 e0       	ldi	r25, 0x08	; 8
    105a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <eeprom_update_block>
    105e:	be 01       	movw	r22, r28
    1060:	82 e3       	ldi	r24, 0x32	; 50
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1072:	65 e6       	ldi	r22, 0x65	; 101
    1074:	8a e9       	ldi	r24, 0x9A	; 154
    1076:	93 e0       	ldi	r25, 0x03	; 3
    1078:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

00001084 <eeprom_UpdateMidiInMap>:
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	ef ed       	ldi	r30, 0xDF	; 223
    108a:	f7 e0       	ldi	r31, 0x07	; 7
    108c:	2f ed       	ldi	r18, 0xDF	; 223
    108e:	38 e0       	ldi	r19, 0x08	; 8
    1090:	cf ef       	ldi	r28, 0xFF	; 255
    1092:	df ef       	ldi	r29, 0xFF	; 255
    1094:	81 91       	ld	r24, Z+
    1096:	be 01       	movw	r22, r28
    1098:	68 27       	eor	r22, r24
    109a:	86 2f       	mov	r24, r22
    109c:	82 95       	swap	r24
    109e:	86 27       	eor	r24, r22
    10a0:	08 2e       	mov	r0, r24
    10a2:	86 95       	lsr	r24
    10a4:	86 95       	lsr	r24
    10a6:	80 25       	eor	r24, r0
    10a8:	08 2e       	mov	r0, r24
    10aa:	86 95       	lsr	r24
    10ac:	80 25       	eor	r24, r0
    10ae:	87 70       	andi	r24, 0x07	; 7
    10b0:	06 2e       	mov	r0, r22
    10b2:	67 2f       	mov	r22, r23
    10b4:	86 95       	lsr	r24
    10b6:	07 94       	ror	r0
    10b8:	87 95       	ror	r24
    10ba:	70 2d       	mov	r23, r0
    10bc:	68 27       	eor	r22, r24
    10be:	06 94       	lsr	r0
    10c0:	87 95       	ror	r24
    10c2:	70 25       	eor	r23, r0
    10c4:	68 27       	eor	r22, r24
    10c6:	eb 01       	movw	r28, r22
    10c8:	2e 17       	cp	r18, r30
    10ca:	3f 07       	cpc	r19, r31
    10cc:	19 f7       	brne	.-58     	; 0x1094 <eeprom_UpdateMidiInMap+0x10>
    10ce:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    10d2:	69 e4       	ldi	r22, 0x49	; 73
    10d4:	84 e3       	ldi	r24, 0x34	; 52
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	51 e0       	ldi	r21, 0x01	; 1
    10e0:	65 e3       	ldi	r22, 0x35	; 53
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	8f ed       	ldi	r24, 0xDF	; 223
    10e6:	97 e0       	ldi	r25, 0x07	; 7
    10e8:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <eeprom_update_block>
    10ec:	be 01       	movw	r22, r28
    10ee:	85 e3       	ldi	r24, 0x35	; 53
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    10f6:	60 e0       	ldi	r22, 0x00	; 0
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1100:	65 e6       	ldi	r22, 0x65	; 101
    1102:	8a e9       	ldi	r24, 0x9A	; 154
    1104:	93 e0       	ldi	r25, 0x03	; 3
    1106:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

00001112 <eeprom_UpdateMidiOutMap>:
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	ef ed       	ldi	r30, 0xDF	; 223
    1118:	f8 e0       	ldi	r31, 0x08	; 8
    111a:	80 81       	ld	r24, Z
    111c:	cf ef       	ldi	r28, 0xFF	; 255
    111e:	df ef       	ldi	r29, 0xFF	; 255
    1120:	c8 27       	eor	r28, r24
    1122:	8c 2f       	mov	r24, r28
    1124:	82 95       	swap	r24
    1126:	8c 27       	eor	r24, r28
    1128:	08 2e       	mov	r0, r24
    112a:	86 95       	lsr	r24
    112c:	86 95       	lsr	r24
    112e:	80 25       	eor	r24, r0
    1130:	08 2e       	mov	r0, r24
    1132:	86 95       	lsr	r24
    1134:	80 25       	eor	r24, r0
    1136:	87 70       	andi	r24, 0x07	; 7
    1138:	0c 2e       	mov	r0, r28
    113a:	cd 2f       	mov	r28, r29
    113c:	86 95       	lsr	r24
    113e:	07 94       	ror	r0
    1140:	87 95       	ror	r24
    1142:	d0 2d       	mov	r29, r0
    1144:	c8 27       	eor	r28, r24
    1146:	06 94       	lsr	r0
    1148:	87 95       	ror	r24
    114a:	d0 25       	eor	r29, r0
    114c:	c8 27       	eor	r28, r24
    114e:	81 81       	ldd	r24, Z+1	; 0x01
    1150:	c8 27       	eor	r28, r24
    1152:	8c 2f       	mov	r24, r28
    1154:	82 95       	swap	r24
    1156:	8c 27       	eor	r24, r28
    1158:	08 2e       	mov	r0, r24
    115a:	86 95       	lsr	r24
    115c:	86 95       	lsr	r24
    115e:	80 25       	eor	r24, r0
    1160:	08 2e       	mov	r0, r24
    1162:	86 95       	lsr	r24
    1164:	80 25       	eor	r24, r0
    1166:	87 70       	andi	r24, 0x07	; 7
    1168:	0c 2e       	mov	r0, r28
    116a:	cd 2f       	mov	r28, r29
    116c:	86 95       	lsr	r24
    116e:	07 94       	ror	r0
    1170:	87 95       	ror	r24
    1172:	d0 2d       	mov	r29, r0
    1174:	c8 27       	eor	r28, r24
    1176:	06 94       	lsr	r0
    1178:	87 95       	ror	r24
    117a:	d0 25       	eor	r29, r0
    117c:	c8 27       	eor	r28, r24
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	c8 27       	eor	r28, r24
    1182:	8c 2f       	mov	r24, r28
    1184:	82 95       	swap	r24
    1186:	8c 27       	eor	r24, r28
    1188:	08 2e       	mov	r0, r24
    118a:	86 95       	lsr	r24
    118c:	86 95       	lsr	r24
    118e:	80 25       	eor	r24, r0
    1190:	08 2e       	mov	r0, r24
    1192:	86 95       	lsr	r24
    1194:	80 25       	eor	r24, r0
    1196:	87 70       	andi	r24, 0x07	; 7
    1198:	0c 2e       	mov	r0, r28
    119a:	cd 2f       	mov	r28, r29
    119c:	86 95       	lsr	r24
    119e:	07 94       	ror	r0
    11a0:	87 95       	ror	r24
    11a2:	d0 2d       	mov	r29, r0
    11a4:	c8 27       	eor	r28, r24
    11a6:	06 94       	lsr	r0
    11a8:	87 95       	ror	r24
    11aa:	d0 25       	eor	r29, r0
    11ac:	c8 27       	eor	r28, r24
    11ae:	83 81       	ldd	r24, Z+3	; 0x03
    11b0:	c8 27       	eor	r28, r24
    11b2:	8c 2f       	mov	r24, r28
    11b4:	82 95       	swap	r24
    11b6:	8c 27       	eor	r24, r28
    11b8:	08 2e       	mov	r0, r24
    11ba:	86 95       	lsr	r24
    11bc:	86 95       	lsr	r24
    11be:	80 25       	eor	r24, r0
    11c0:	08 2e       	mov	r0, r24
    11c2:	86 95       	lsr	r24
    11c4:	80 25       	eor	r24, r0
    11c6:	87 70       	andi	r24, 0x07	; 7
    11c8:	0c 2e       	mov	r0, r28
    11ca:	cd 2f       	mov	r28, r29
    11cc:	86 95       	lsr	r24
    11ce:	07 94       	ror	r0
    11d0:	87 95       	ror	r24
    11d2:	d0 2d       	mov	r29, r0
    11d4:	c8 27       	eor	r28, r24
    11d6:	06 94       	lsr	r0
    11d8:	87 95       	ror	r24
    11da:	d0 25       	eor	r29, r0
    11dc:	c8 27       	eor	r28, r24
    11de:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <midi_TxActivceSense>
    11e2:	c8 27       	eor	r28, r24
    11e4:	8c 2f       	mov	r24, r28
    11e6:	82 95       	swap	r24
    11e8:	8c 27       	eor	r24, r28
    11ea:	08 2e       	mov	r0, r24
    11ec:	86 95       	lsr	r24
    11ee:	86 95       	lsr	r24
    11f0:	80 25       	eor	r24, r0
    11f2:	08 2e       	mov	r0, r24
    11f4:	86 95       	lsr	r24
    11f6:	80 25       	eor	r24, r0
    11f8:	87 70       	andi	r24, 0x07	; 7
    11fa:	0c 2e       	mov	r0, r28
    11fc:	cd 2f       	mov	r28, r29
    11fe:	86 95       	lsr	r24
    1200:	07 94       	ror	r0
    1202:	87 95       	ror	r24
    1204:	d0 2d       	mov	r29, r0
    1206:	c8 27       	eor	r28, r24
    1208:	06 94       	lsr	r0
    120a:	87 95       	ror	r24
    120c:	d0 25       	eor	r29, r0
    120e:	c8 27       	eor	r28, r24
    1210:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    1214:	6f e4       	ldi	r22, 0x4F	; 79
    1216:	87 e3       	ldi	r24, 0x37	; 55
    1218:	91 e0       	ldi	r25, 0x01	; 1
    121a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    121e:	44 e0       	ldi	r20, 0x04	; 4
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	68 e3       	ldi	r22, 0x38	; 56
    1224:	71 e0       	ldi	r23, 0x01	; 1
    1226:	8f ed       	ldi	r24, 0xDF	; 223
    1228:	98 e0       	ldi	r25, 0x08	; 8
    122a:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <eeprom_update_block>
    122e:	60 91 99 07 	lds	r22, 0x0799	; 0x800799 <midi_TxActivceSense>
    1232:	8c e3       	ldi	r24, 0x3C	; 60
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    123a:	be 01       	movw	r22, r28
    123c:	8d e3       	ldi	r24, 0x3D	; 61
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    124e:	65 e6       	ldi	r22, 0x65	; 101
    1250:	8a e9       	ldi	r24, 0x9A	; 154
    1252:	93 e0       	ldi	r25, 0x03	; 3
    1254:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

00001260 <eeprom_UpdateModules>:
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    1268:	cf ef       	ldi	r28, 0xFF	; 255
    126a:	df ef       	ldi	r29, 0xFF	; 255
    126c:	c8 27       	eor	r28, r24
    126e:	8c 2f       	mov	r24, r28
    1270:	82 95       	swap	r24
    1272:	8c 27       	eor	r24, r28
    1274:	08 2e       	mov	r0, r24
    1276:	86 95       	lsr	r24
    1278:	86 95       	lsr	r24
    127a:	80 25       	eor	r24, r0
    127c:	08 2e       	mov	r0, r24
    127e:	86 95       	lsr	r24
    1280:	80 25       	eor	r24, r0
    1282:	87 70       	andi	r24, 0x07	; 7
    1284:	0c 2e       	mov	r0, r28
    1286:	cd 2f       	mov	r28, r29
    1288:	86 95       	lsr	r24
    128a:	07 94       	ror	r0
    128c:	87 95       	ror	r24
    128e:	d0 2d       	mov	r29, r0
    1290:	c8 27       	eor	r28, r24
    1292:	06 94       	lsr	r0
    1294:	87 95       	ror	r24
    1296:	d0 25       	eor	r29, r0
    1298:	c8 27       	eor	r28, r24
    129a:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    129e:	69 e6       	ldi	r22, 0x69	; 105
    12a0:	8f e3       	ldi	r24, 0x3F	; 63
    12a2:	91 e0       	ldi	r25, 0x01	; 1
    12a4:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    12a8:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    12ac:	80 e4       	ldi	r24, 0x40	; 64
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    12b4:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <pipe_ModuleAssnWrite>
    12b8:	81 e4       	ldi	r24, 0x41	; 65
    12ba:	91 e0       	ldi	r25, 0x01	; 1
    12bc:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    12c0:	be 01       	movw	r22, r28
    12c2:	82 e4       	ldi	r24, 0x42	; 66
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    12d4:	65 e6       	ldi	r22, 0x65	; 101
    12d6:	8a e9       	ldi	r24, 0x9A	; 154
    12d8:	93 e0       	ldi	r25, 0x03	; 3
    12da:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

000012e6 <eeprom_UpdateUSB>:
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <serusb_Active>
    12ee:	cf ef       	ldi	r28, 0xFF	; 255
    12f0:	df ef       	ldi	r29, 0xFF	; 255
    12f2:	c8 27       	eor	r28, r24
    12f4:	8c 2f       	mov	r24, r28
    12f6:	82 95       	swap	r24
    12f8:	8c 27       	eor	r24, r28
    12fa:	08 2e       	mov	r0, r24
    12fc:	86 95       	lsr	r24
    12fe:	86 95       	lsr	r24
    1300:	80 25       	eor	r24, r0
    1302:	08 2e       	mov	r0, r24
    1304:	86 95       	lsr	r24
    1306:	80 25       	eor	r24, r0
    1308:	87 70       	andi	r24, 0x07	; 7
    130a:	0c 2e       	mov	r0, r28
    130c:	cd 2f       	mov	r28, r29
    130e:	86 95       	lsr	r24
    1310:	07 94       	ror	r0
    1312:	87 95       	ror	r24
    1314:	d0 2d       	mov	r29, r0
    1316:	c8 27       	eor	r28, r24
    1318:	06 94       	lsr	r0
    131a:	87 95       	ror	r24
    131c:	d0 25       	eor	r29, r0
    131e:	c8 27       	eor	r28, r24
    1320:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    1324:	65 e5       	ldi	r22, 0x55	; 85
    1326:	84 e4       	ldi	r24, 0x44	; 68
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    132e:	60 91 5f 0b 	lds	r22, 0x0B5F	; 0x800b5f <serusb_Active>
    1332:	85 e4       	ldi	r24, 0x45	; 69
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    133a:	be 01       	movw	r22, r28
    133c:	86 e4       	ldi	r24, 0x46	; 70
    133e:	91 e0       	ldi	r25, 0x01	; 1
    1340:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    134e:	65 e6       	ldi	r22, 0x65	; 101
    1350:	8a e9       	ldi	r24, 0x9A	; 154
    1352:	93 e0       	ldi	r25, 0x03	; 3
    1354:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

00001360 <eeprom_UpdateReg>:
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	80 91 db 07 	lds	r24, 0x07DB	; 0x8007db <registerCount>
    1368:	6f ef       	ldi	r22, 0xFF	; 255
    136a:	7f ef       	ldi	r23, 0xFF	; 255
    136c:	68 27       	eor	r22, r24
    136e:	86 2f       	mov	r24, r22
    1370:	82 95       	swap	r24
    1372:	86 27       	eor	r24, r22
    1374:	08 2e       	mov	r0, r24
    1376:	86 95       	lsr	r24
    1378:	86 95       	lsr	r24
    137a:	80 25       	eor	r24, r0
    137c:	08 2e       	mov	r0, r24
    137e:	86 95       	lsr	r24
    1380:	80 25       	eor	r24, r0
    1382:	87 70       	andi	r24, 0x07	; 7
    1384:	06 2e       	mov	r0, r22
    1386:	67 2f       	mov	r22, r23
    1388:	86 95       	lsr	r24
    138a:	07 94       	ror	r0
    138c:	87 95       	ror	r24
    138e:	70 2d       	mov	r23, r0
    1390:	68 27       	eor	r22, r24
    1392:	06 94       	lsr	r0
    1394:	87 95       	ror	r24
    1396:	70 25       	eor	r23, r0
    1398:	68 27       	eor	r22, r24
    139a:	eb 01       	movw	r28, r22
    139c:	ea e9       	ldi	r30, 0x9A	; 154
    139e:	f7 e0       	ldi	r31, 0x07	; 7
    13a0:	2a ed       	ldi	r18, 0xDA	; 218
    13a2:	37 e0       	ldi	r19, 0x07	; 7
    13a4:	81 91       	ld	r24, Z+
    13a6:	be 01       	movw	r22, r28
    13a8:	68 27       	eor	r22, r24
    13aa:	86 2f       	mov	r24, r22
    13ac:	82 95       	swap	r24
    13ae:	86 27       	eor	r24, r22
    13b0:	08 2e       	mov	r0, r24
    13b2:	86 95       	lsr	r24
    13b4:	86 95       	lsr	r24
    13b6:	80 25       	eor	r24, r0
    13b8:	08 2e       	mov	r0, r24
    13ba:	86 95       	lsr	r24
    13bc:	80 25       	eor	r24, r0
    13be:	87 70       	andi	r24, 0x07	; 7
    13c0:	06 2e       	mov	r0, r22
    13c2:	67 2f       	mov	r22, r23
    13c4:	86 95       	lsr	r24
    13c6:	07 94       	ror	r0
    13c8:	87 95       	ror	r24
    13ca:	70 2d       	mov	r23, r0
    13cc:	68 27       	eor	r22, r24
    13ce:	06 94       	lsr	r0
    13d0:	87 95       	ror	r24
    13d2:	70 25       	eor	r23, r0
    13d4:	68 27       	eor	r22, r24
    13d6:	eb 01       	movw	r28, r22
    13d8:	2e 17       	cp	r18, r30
    13da:	3f 07       	cpc	r19, r31
    13dc:	19 f7       	brne	.-58     	; 0x13a4 <eeprom_UpdateReg+0x44>
    13de:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    13e2:	62 e5       	ldi	r22, 0x52	; 82
    13e4:	88 e4       	ldi	r24, 0x48	; 72
    13e6:	91 e0       	ldi	r25, 0x01	; 1
    13e8:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    13ec:	60 91 db 07 	lds	r22, 0x07DB	; 0x8007db <registerCount>
    13f0:	89 e4       	ldi	r24, 0x49	; 73
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    13f8:	40 e4       	ldi	r20, 0x40	; 64
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	6a e4       	ldi	r22, 0x4A	; 74
    13fe:	71 e0       	ldi	r23, 0x01	; 1
    1400:	8a e9       	ldi	r24, 0x9A	; 154
    1402:	97 e0       	ldi	r25, 0x07	; 7
    1404:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <eeprom_update_block>
    1408:	be 01       	movw	r22, r28
    140a:	8a e8       	ldi	r24, 0x8A	; 138
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    1412:	60 e0       	ldi	r22, 0x00	; 0
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    141c:	65 e6       	ldi	r22, 0x65	; 101
    141e:	8a e9       	ldi	r24, 0x9A	; 154
    1420:	93 e0       	ldi	r25, 0x03	; 3
    1422:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

0000142e <eeprom_UpdateProg>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	e3 e1       	ldi	r30, 0x13	; 19
    1434:	f9 e0       	ldi	r31, 0x09	; 9
    1436:	23 e1       	ldi	r18, 0x13	; 19
    1438:	3b e0       	ldi	r19, 0x0B	; 11
    143a:	cf ef       	ldi	r28, 0xFF	; 255
    143c:	df ef       	ldi	r29, 0xFF	; 255
    143e:	81 91       	ld	r24, Z+
    1440:	be 01       	movw	r22, r28
    1442:	68 27       	eor	r22, r24
    1444:	86 2f       	mov	r24, r22
    1446:	82 95       	swap	r24
    1448:	86 27       	eor	r24, r22
    144a:	08 2e       	mov	r0, r24
    144c:	86 95       	lsr	r24
    144e:	86 95       	lsr	r24
    1450:	80 25       	eor	r24, r0
    1452:	08 2e       	mov	r0, r24
    1454:	86 95       	lsr	r24
    1456:	80 25       	eor	r24, r0
    1458:	87 70       	andi	r24, 0x07	; 7
    145a:	06 2e       	mov	r0, r22
    145c:	67 2f       	mov	r22, r23
    145e:	86 95       	lsr	r24
    1460:	07 94       	ror	r0
    1462:	87 95       	ror	r24
    1464:	70 2d       	mov	r23, r0
    1466:	68 27       	eor	r22, r24
    1468:	06 94       	lsr	r0
    146a:	87 95       	ror	r24
    146c:	70 25       	eor	r23, r0
    146e:	68 27       	eor	r22, r24
    1470:	eb 01       	movw	r28, r22
    1472:	2e 17       	cp	r18, r30
    1474:	3f 07       	cpc	r19, r31
    1476:	19 f7       	brne	.-58     	; 0x143e <eeprom_UpdateProg+0x10>
    1478:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    147c:	60 e5       	ldi	r22, 0x50	; 80
    147e:	8c e8       	ldi	r24, 0x8C	; 140
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	52 e0       	ldi	r21, 0x02	; 2
    148a:	6d e8       	ldi	r22, 0x8D	; 141
    148c:	71 e0       	ldi	r23, 0x01	; 1
    148e:	83 e1       	ldi	r24, 0x13	; 19
    1490:	99 e0       	ldi	r25, 0x09	; 9
    1492:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <eeprom_update_block>
    1496:	be 01       	movw	r22, r28
    1498:	8d e8       	ldi	r24, 0x8D	; 141
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    14aa:	65 e6       	ldi	r22, 0x65	; 101
    14ac:	8a e9       	ldi	r24, 0x9A	; 154
    14ae:	93 e0       	ldi	r25, 0x03	; 3
    14b0:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

000014bc <eeprom_UpdateSoftkeys>:
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	e5 e4       	ldi	r30, 0x45	; 69
    14c2:	f5 e0       	ldi	r31, 0x05	; 5
    14c4:	80 81       	ld	r24, Z
    14c6:	cf ef       	ldi	r28, 0xFF	; 255
    14c8:	df ef       	ldi	r29, 0xFF	; 255
    14ca:	c8 27       	eor	r28, r24
    14cc:	8c 2f       	mov	r24, r28
    14ce:	82 95       	swap	r24
    14d0:	8c 27       	eor	r24, r28
    14d2:	08 2e       	mov	r0, r24
    14d4:	86 95       	lsr	r24
    14d6:	86 95       	lsr	r24
    14d8:	80 25       	eor	r24, r0
    14da:	08 2e       	mov	r0, r24
    14dc:	86 95       	lsr	r24
    14de:	80 25       	eor	r24, r0
    14e0:	87 70       	andi	r24, 0x07	; 7
    14e2:	0c 2e       	mov	r0, r28
    14e4:	cd 2f       	mov	r28, r29
    14e6:	86 95       	lsr	r24
    14e8:	07 94       	ror	r0
    14ea:	87 95       	ror	r24
    14ec:	d0 2d       	mov	r29, r0
    14ee:	c8 27       	eor	r28, r24
    14f0:	06 94       	lsr	r0
    14f2:	87 95       	ror	r24
    14f4:	d0 25       	eor	r29, r0
    14f6:	c8 27       	eor	r28, r24
    14f8:	81 81       	ldd	r24, Z+1	; 0x01
    14fa:	c8 27       	eor	r28, r24
    14fc:	8c 2f       	mov	r24, r28
    14fe:	82 95       	swap	r24
    1500:	8c 27       	eor	r24, r28
    1502:	08 2e       	mov	r0, r24
    1504:	86 95       	lsr	r24
    1506:	86 95       	lsr	r24
    1508:	80 25       	eor	r24, r0
    150a:	08 2e       	mov	r0, r24
    150c:	86 95       	lsr	r24
    150e:	80 25       	eor	r24, r0
    1510:	87 70       	andi	r24, 0x07	; 7
    1512:	0c 2e       	mov	r0, r28
    1514:	cd 2f       	mov	r28, r29
    1516:	86 95       	lsr	r24
    1518:	07 94       	ror	r0
    151a:	87 95       	ror	r24
    151c:	d0 2d       	mov	r29, r0
    151e:	c8 27       	eor	r28, r24
    1520:	06 94       	lsr	r0
    1522:	87 95       	ror	r24
    1524:	d0 25       	eor	r29, r0
    1526:	c8 27       	eor	r28, r24
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	c8 27       	eor	r28, r24
    152c:	8c 2f       	mov	r24, r28
    152e:	82 95       	swap	r24
    1530:	8c 27       	eor	r24, r28
    1532:	08 2e       	mov	r0, r24
    1534:	86 95       	lsr	r24
    1536:	86 95       	lsr	r24
    1538:	80 25       	eor	r24, r0
    153a:	08 2e       	mov	r0, r24
    153c:	86 95       	lsr	r24
    153e:	80 25       	eor	r24, r0
    1540:	87 70       	andi	r24, 0x07	; 7
    1542:	0c 2e       	mov	r0, r28
    1544:	cd 2f       	mov	r28, r29
    1546:	86 95       	lsr	r24
    1548:	07 94       	ror	r0
    154a:	87 95       	ror	r24
    154c:	d0 2d       	mov	r29, r0
    154e:	c8 27       	eor	r28, r24
    1550:	06 94       	lsr	r0
    1552:	87 95       	ror	r24
    1554:	d0 25       	eor	r29, r0
    1556:	c8 27       	eor	r28, r24
    1558:	83 81       	ldd	r24, Z+3	; 0x03
    155a:	c8 27       	eor	r28, r24
    155c:	8c 2f       	mov	r24, r28
    155e:	82 95       	swap	r24
    1560:	8c 27       	eor	r24, r28
    1562:	08 2e       	mov	r0, r24
    1564:	86 95       	lsr	r24
    1566:	86 95       	lsr	r24
    1568:	80 25       	eor	r24, r0
    156a:	08 2e       	mov	r0, r24
    156c:	86 95       	lsr	r24
    156e:	80 25       	eor	r24, r0
    1570:	87 70       	andi	r24, 0x07	; 7
    1572:	0c 2e       	mov	r0, r28
    1574:	cd 2f       	mov	r28, r29
    1576:	86 95       	lsr	r24
    1578:	07 94       	ror	r0
    157a:	87 95       	ror	r24
    157c:	d0 2d       	mov	r29, r0
    157e:	c8 27       	eor	r28, r24
    1580:	06 94       	lsr	r0
    1582:	87 95       	ror	r24
    1584:	d0 25       	eor	r29, r0
    1586:	c8 27       	eor	r28, r24
    1588:	84 81       	ldd	r24, Z+4	; 0x04
    158a:	c8 27       	eor	r28, r24
    158c:	8c 2f       	mov	r24, r28
    158e:	82 95       	swap	r24
    1590:	8c 27       	eor	r24, r28
    1592:	08 2e       	mov	r0, r24
    1594:	86 95       	lsr	r24
    1596:	86 95       	lsr	r24
    1598:	80 25       	eor	r24, r0
    159a:	08 2e       	mov	r0, r24
    159c:	86 95       	lsr	r24
    159e:	80 25       	eor	r24, r0
    15a0:	87 70       	andi	r24, 0x07	; 7
    15a2:	0c 2e       	mov	r0, r28
    15a4:	cd 2f       	mov	r28, r29
    15a6:	86 95       	lsr	r24
    15a8:	07 94       	ror	r0
    15aa:	87 95       	ror	r24
    15ac:	d0 2d       	mov	r29, r0
    15ae:	c8 27       	eor	r28, r24
    15b0:	06 94       	lsr	r0
    15b2:	87 95       	ror	r24
    15b4:	d0 25       	eor	r29, r0
    15b6:	c8 27       	eor	r28, r24
    15b8:	85 81       	ldd	r24, Z+5	; 0x05
    15ba:	c8 27       	eor	r28, r24
    15bc:	8c 2f       	mov	r24, r28
    15be:	82 95       	swap	r24
    15c0:	8c 27       	eor	r24, r28
    15c2:	08 2e       	mov	r0, r24
    15c4:	86 95       	lsr	r24
    15c6:	86 95       	lsr	r24
    15c8:	80 25       	eor	r24, r0
    15ca:	08 2e       	mov	r0, r24
    15cc:	86 95       	lsr	r24
    15ce:	80 25       	eor	r24, r0
    15d0:	87 70       	andi	r24, 0x07	; 7
    15d2:	0c 2e       	mov	r0, r28
    15d4:	cd 2f       	mov	r28, r29
    15d6:	86 95       	lsr	r24
    15d8:	07 94       	ror	r0
    15da:	87 95       	ror	r24
    15dc:	d0 2d       	mov	r29, r0
    15de:	c8 27       	eor	r28, r24
    15e0:	06 94       	lsr	r0
    15e2:	87 95       	ror	r24
    15e4:	d0 25       	eor	r29, r0
    15e6:	c8 27       	eor	r28, r24
    15e8:	86 81       	ldd	r24, Z+6	; 0x06
    15ea:	c8 27       	eor	r28, r24
    15ec:	8c 2f       	mov	r24, r28
    15ee:	82 95       	swap	r24
    15f0:	8c 27       	eor	r24, r28
    15f2:	08 2e       	mov	r0, r24
    15f4:	86 95       	lsr	r24
    15f6:	86 95       	lsr	r24
    15f8:	80 25       	eor	r24, r0
    15fa:	08 2e       	mov	r0, r24
    15fc:	86 95       	lsr	r24
    15fe:	80 25       	eor	r24, r0
    1600:	87 70       	andi	r24, 0x07	; 7
    1602:	0c 2e       	mov	r0, r28
    1604:	cd 2f       	mov	r28, r29
    1606:	86 95       	lsr	r24
    1608:	07 94       	ror	r0
    160a:	87 95       	ror	r24
    160c:	d0 2d       	mov	r29, r0
    160e:	c8 27       	eor	r28, r24
    1610:	06 94       	lsr	r0
    1612:	87 95       	ror	r24
    1614:	d0 25       	eor	r29, r0
    1616:	c8 27       	eor	r28, r24
    1618:	87 81       	ldd	r24, Z+7	; 0x07
    161a:	c8 27       	eor	r28, r24
    161c:	8c 2f       	mov	r24, r28
    161e:	82 95       	swap	r24
    1620:	8c 27       	eor	r24, r28
    1622:	08 2e       	mov	r0, r24
    1624:	86 95       	lsr	r24
    1626:	86 95       	lsr	r24
    1628:	80 25       	eor	r24, r0
    162a:	08 2e       	mov	r0, r24
    162c:	86 95       	lsr	r24
    162e:	80 25       	eor	r24, r0
    1630:	87 70       	andi	r24, 0x07	; 7
    1632:	0c 2e       	mov	r0, r28
    1634:	cd 2f       	mov	r28, r29
    1636:	86 95       	lsr	r24
    1638:	07 94       	ror	r0
    163a:	87 95       	ror	r24
    163c:	d0 2d       	mov	r29, r0
    163e:	c8 27       	eor	r28, r24
    1640:	06 94       	lsr	r0
    1642:	87 95       	ror	r24
    1644:	d0 25       	eor	r29, r0
    1646:	c8 27       	eor	r28, r24
    1648:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    164c:	6b e4       	ldi	r22, 0x4B	; 75
    164e:	8f e8       	ldi	r24, 0x8F	; 143
    1650:	93 e0       	ldi	r25, 0x03	; 3
    1652:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1656:	48 e0       	ldi	r20, 0x08	; 8
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	60 e9       	ldi	r22, 0x90	; 144
    165c:	73 e0       	ldi	r23, 0x03	; 3
    165e:	85 e4       	ldi	r24, 0x45	; 69
    1660:	95 e0       	ldi	r25, 0x05	; 5
    1662:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <eeprom_update_block>
    1666:	be 01       	movw	r22, r28
    1668:	88 e9       	ldi	r24, 0x98	; 152
    166a:	93 e0       	ldi	r25, 0x03	; 3
    166c:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    167a:	65 e6       	ldi	r22, 0x65	; 101
    167c:	8a e9       	ldi	r24, 0x9A	; 154
    167e:	93 e0       	ldi	r25, 0x03	; 3
    1680:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1684:	df 91       	pop	r29
    1686:	cf 91       	pop	r28
    1688:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

0000168c <eeprom_UpdateALL>:
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	b0 dc       	rcall	.-1696   	; 0xff6 <eeprom_UpdateManualMap>
    1696:	f6 dc       	rcall	.-1556   	; 0x1084 <eeprom_UpdateMidiInMap>
    1698:	3c dd       	rcall	.-1416   	; 0x1112 <eeprom_UpdateMidiOutMap>
    169a:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    169e:	cf ef       	ldi	r28, 0xFF	; 255
    16a0:	df ef       	ldi	r29, 0xFF	; 255
    16a2:	8e 01       	movw	r16, r28
    16a4:	08 27       	eor	r16, r24
    16a6:	80 2f       	mov	r24, r16
    16a8:	82 95       	swap	r24
    16aa:	80 27       	eor	r24, r16
    16ac:	08 2e       	mov	r0, r24
    16ae:	86 95       	lsr	r24
    16b0:	86 95       	lsr	r24
    16b2:	80 25       	eor	r24, r0
    16b4:	08 2e       	mov	r0, r24
    16b6:	86 95       	lsr	r24
    16b8:	80 25       	eor	r24, r0
    16ba:	87 70       	andi	r24, 0x07	; 7
    16bc:	00 2e       	mov	r0, r16
    16be:	01 2f       	mov	r16, r17
    16c0:	86 95       	lsr	r24
    16c2:	07 94       	ror	r0
    16c4:	87 95       	ror	r24
    16c6:	10 2d       	mov	r17, r0
    16c8:	08 27       	eor	r16, r24
    16ca:	06 94       	lsr	r0
    16cc:	87 95       	ror	r24
    16ce:	10 25       	eor	r17, r0
    16d0:	08 27       	eor	r16, r24
    16d2:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    16d6:	69 e6       	ldi	r22, 0x69	; 105
    16d8:	8f e3       	ldi	r24, 0x3F	; 63
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    16e0:	60 91 52 03 	lds	r22, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    16e4:	80 e4       	ldi	r24, 0x40	; 64
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    16ec:	60 91 51 03 	lds	r22, 0x0351	; 0x800351 <pipe_ModuleAssnWrite>
    16f0:	81 e4       	ldi	r24, 0x41	; 65
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    16f8:	b8 01       	movw	r22, r16
    16fa:	82 e4       	ldi	r24, 0x42	; 66
    16fc:	91 e0       	ldi	r25, 0x01	; 1
    16fe:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    170c:	65 e6       	ldi	r22, 0x65	; 101
    170e:	8a e9       	ldi	r24, 0x9A	; 154
    1710:	93 e0       	ldi	r25, 0x03	; 3
    1712:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1716:	0e 94 86 3c 	call	0x790c	; 0x790c <lcd_waitSymbolOff>
    171a:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <serusb_Active>
    171e:	8e 01       	movw	r16, r28
    1720:	08 27       	eor	r16, r24
    1722:	80 2f       	mov	r24, r16
    1724:	82 95       	swap	r24
    1726:	80 27       	eor	r24, r16
    1728:	08 2e       	mov	r0, r24
    172a:	86 95       	lsr	r24
    172c:	86 95       	lsr	r24
    172e:	80 25       	eor	r24, r0
    1730:	08 2e       	mov	r0, r24
    1732:	86 95       	lsr	r24
    1734:	80 25       	eor	r24, r0
    1736:	87 70       	andi	r24, 0x07	; 7
    1738:	00 2e       	mov	r0, r16
    173a:	01 2f       	mov	r16, r17
    173c:	86 95       	lsr	r24
    173e:	07 94       	ror	r0
    1740:	87 95       	ror	r24
    1742:	10 2d       	mov	r17, r0
    1744:	08 27       	eor	r16, r24
    1746:	06 94       	lsr	r0
    1748:	87 95       	ror	r24
    174a:	10 25       	eor	r17, r0
    174c:	08 27       	eor	r16, r24
    174e:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    1752:	65 e5       	ldi	r22, 0x55	; 85
    1754:	84 e4       	ldi	r24, 0x44	; 68
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    175c:	60 91 5f 0b 	lds	r22, 0x0B5F	; 0x800b5f <serusb_Active>
    1760:	85 e4       	ldi	r24, 0x45	; 69
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1768:	b8 01       	movw	r22, r16
    176a:	86 e4       	ldi	r24, 0x46	; 70
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    1772:	60 e0       	ldi	r22, 0x00	; 0
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    177c:	65 e6       	ldi	r22, 0x65	; 101
    177e:	8a e9       	ldi	r24, 0x9A	; 154
    1780:	93 e0       	ldi	r25, 0x03	; 3
    1782:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1786:	0e 94 86 3c 	call	0x790c	; 0x790c <lcd_waitSymbolOff>
    178a:	ea dd       	rcall	.-1068   	; 0x1360 <eeprom_UpdateReg>
    178c:	50 de       	rcall	.-864    	; 0x142e <eeprom_UpdateProg>
    178e:	e5 e4       	ldi	r30, 0x45	; 69
    1790:	f5 e0       	ldi	r31, 0x05	; 5
    1792:	80 81       	ld	r24, Z
    1794:	c8 27       	eor	r28, r24
    1796:	8c 2f       	mov	r24, r28
    1798:	82 95       	swap	r24
    179a:	8c 27       	eor	r24, r28
    179c:	08 2e       	mov	r0, r24
    179e:	86 95       	lsr	r24
    17a0:	86 95       	lsr	r24
    17a2:	80 25       	eor	r24, r0
    17a4:	08 2e       	mov	r0, r24
    17a6:	86 95       	lsr	r24
    17a8:	80 25       	eor	r24, r0
    17aa:	87 70       	andi	r24, 0x07	; 7
    17ac:	0c 2e       	mov	r0, r28
    17ae:	cd 2f       	mov	r28, r29
    17b0:	86 95       	lsr	r24
    17b2:	07 94       	ror	r0
    17b4:	87 95       	ror	r24
    17b6:	d0 2d       	mov	r29, r0
    17b8:	c8 27       	eor	r28, r24
    17ba:	06 94       	lsr	r0
    17bc:	87 95       	ror	r24
    17be:	d0 25       	eor	r29, r0
    17c0:	c8 27       	eor	r28, r24
    17c2:	81 81       	ldd	r24, Z+1	; 0x01
    17c4:	c8 27       	eor	r28, r24
    17c6:	8c 2f       	mov	r24, r28
    17c8:	82 95       	swap	r24
    17ca:	8c 27       	eor	r24, r28
    17cc:	08 2e       	mov	r0, r24
    17ce:	86 95       	lsr	r24
    17d0:	86 95       	lsr	r24
    17d2:	80 25       	eor	r24, r0
    17d4:	08 2e       	mov	r0, r24
    17d6:	86 95       	lsr	r24
    17d8:	80 25       	eor	r24, r0
    17da:	87 70       	andi	r24, 0x07	; 7
    17dc:	0c 2e       	mov	r0, r28
    17de:	cd 2f       	mov	r28, r29
    17e0:	86 95       	lsr	r24
    17e2:	07 94       	ror	r0
    17e4:	87 95       	ror	r24
    17e6:	d0 2d       	mov	r29, r0
    17e8:	c8 27       	eor	r28, r24
    17ea:	06 94       	lsr	r0
    17ec:	87 95       	ror	r24
    17ee:	d0 25       	eor	r29, r0
    17f0:	c8 27       	eor	r28, r24
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	c8 27       	eor	r28, r24
    17f6:	8c 2f       	mov	r24, r28
    17f8:	82 95       	swap	r24
    17fa:	8c 27       	eor	r24, r28
    17fc:	08 2e       	mov	r0, r24
    17fe:	86 95       	lsr	r24
    1800:	86 95       	lsr	r24
    1802:	80 25       	eor	r24, r0
    1804:	08 2e       	mov	r0, r24
    1806:	86 95       	lsr	r24
    1808:	80 25       	eor	r24, r0
    180a:	87 70       	andi	r24, 0x07	; 7
    180c:	0c 2e       	mov	r0, r28
    180e:	cd 2f       	mov	r28, r29
    1810:	86 95       	lsr	r24
    1812:	07 94       	ror	r0
    1814:	87 95       	ror	r24
    1816:	d0 2d       	mov	r29, r0
    1818:	c8 27       	eor	r28, r24
    181a:	06 94       	lsr	r0
    181c:	87 95       	ror	r24
    181e:	d0 25       	eor	r29, r0
    1820:	c8 27       	eor	r28, r24
    1822:	83 81       	ldd	r24, Z+3	; 0x03
    1824:	c8 27       	eor	r28, r24
    1826:	8c 2f       	mov	r24, r28
    1828:	82 95       	swap	r24
    182a:	8c 27       	eor	r24, r28
    182c:	08 2e       	mov	r0, r24
    182e:	86 95       	lsr	r24
    1830:	86 95       	lsr	r24
    1832:	80 25       	eor	r24, r0
    1834:	08 2e       	mov	r0, r24
    1836:	86 95       	lsr	r24
    1838:	80 25       	eor	r24, r0
    183a:	87 70       	andi	r24, 0x07	; 7
    183c:	0c 2e       	mov	r0, r28
    183e:	cd 2f       	mov	r28, r29
    1840:	86 95       	lsr	r24
    1842:	07 94       	ror	r0
    1844:	87 95       	ror	r24
    1846:	d0 2d       	mov	r29, r0
    1848:	c8 27       	eor	r28, r24
    184a:	06 94       	lsr	r0
    184c:	87 95       	ror	r24
    184e:	d0 25       	eor	r29, r0
    1850:	c8 27       	eor	r28, r24
    1852:	84 81       	ldd	r24, Z+4	; 0x04
    1854:	c8 27       	eor	r28, r24
    1856:	8c 2f       	mov	r24, r28
    1858:	82 95       	swap	r24
    185a:	8c 27       	eor	r24, r28
    185c:	08 2e       	mov	r0, r24
    185e:	86 95       	lsr	r24
    1860:	86 95       	lsr	r24
    1862:	80 25       	eor	r24, r0
    1864:	08 2e       	mov	r0, r24
    1866:	86 95       	lsr	r24
    1868:	80 25       	eor	r24, r0
    186a:	87 70       	andi	r24, 0x07	; 7
    186c:	0c 2e       	mov	r0, r28
    186e:	cd 2f       	mov	r28, r29
    1870:	86 95       	lsr	r24
    1872:	07 94       	ror	r0
    1874:	87 95       	ror	r24
    1876:	d0 2d       	mov	r29, r0
    1878:	c8 27       	eor	r28, r24
    187a:	06 94       	lsr	r0
    187c:	87 95       	ror	r24
    187e:	d0 25       	eor	r29, r0
    1880:	c8 27       	eor	r28, r24
    1882:	85 81       	ldd	r24, Z+5	; 0x05
    1884:	c8 27       	eor	r28, r24
    1886:	8c 2f       	mov	r24, r28
    1888:	82 95       	swap	r24
    188a:	8c 27       	eor	r24, r28
    188c:	08 2e       	mov	r0, r24
    188e:	86 95       	lsr	r24
    1890:	86 95       	lsr	r24
    1892:	80 25       	eor	r24, r0
    1894:	08 2e       	mov	r0, r24
    1896:	86 95       	lsr	r24
    1898:	80 25       	eor	r24, r0
    189a:	87 70       	andi	r24, 0x07	; 7
    189c:	0c 2e       	mov	r0, r28
    189e:	cd 2f       	mov	r28, r29
    18a0:	86 95       	lsr	r24
    18a2:	07 94       	ror	r0
    18a4:	87 95       	ror	r24
    18a6:	d0 2d       	mov	r29, r0
    18a8:	c8 27       	eor	r28, r24
    18aa:	06 94       	lsr	r0
    18ac:	87 95       	ror	r24
    18ae:	d0 25       	eor	r29, r0
    18b0:	c8 27       	eor	r28, r24
    18b2:	86 81       	ldd	r24, Z+6	; 0x06
    18b4:	c8 27       	eor	r28, r24
    18b6:	8c 2f       	mov	r24, r28
    18b8:	82 95       	swap	r24
    18ba:	8c 27       	eor	r24, r28
    18bc:	08 2e       	mov	r0, r24
    18be:	86 95       	lsr	r24
    18c0:	86 95       	lsr	r24
    18c2:	80 25       	eor	r24, r0
    18c4:	08 2e       	mov	r0, r24
    18c6:	86 95       	lsr	r24
    18c8:	80 25       	eor	r24, r0
    18ca:	87 70       	andi	r24, 0x07	; 7
    18cc:	0c 2e       	mov	r0, r28
    18ce:	cd 2f       	mov	r28, r29
    18d0:	86 95       	lsr	r24
    18d2:	07 94       	ror	r0
    18d4:	87 95       	ror	r24
    18d6:	d0 2d       	mov	r29, r0
    18d8:	c8 27       	eor	r28, r24
    18da:	06 94       	lsr	r0
    18dc:	87 95       	ror	r24
    18de:	d0 25       	eor	r29, r0
    18e0:	c8 27       	eor	r28, r24
    18e2:	87 81       	ldd	r24, Z+7	; 0x07
    18e4:	c8 27       	eor	r28, r24
    18e6:	8c 2f       	mov	r24, r28
    18e8:	82 95       	swap	r24
    18ea:	8c 27       	eor	r24, r28
    18ec:	08 2e       	mov	r0, r24
    18ee:	86 95       	lsr	r24
    18f0:	86 95       	lsr	r24
    18f2:	80 25       	eor	r24, r0
    18f4:	08 2e       	mov	r0, r24
    18f6:	86 95       	lsr	r24
    18f8:	80 25       	eor	r24, r0
    18fa:	87 70       	andi	r24, 0x07	; 7
    18fc:	0c 2e       	mov	r0, r28
    18fe:	cd 2f       	mov	r28, r29
    1900:	86 95       	lsr	r24
    1902:	07 94       	ror	r0
    1904:	87 95       	ror	r24
    1906:	d0 2d       	mov	r29, r0
    1908:	c8 27       	eor	r28, r24
    190a:	06 94       	lsr	r0
    190c:	87 95       	ror	r24
    190e:	d0 25       	eor	r29, r0
    1910:	c8 27       	eor	r28, r24
    1912:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    1916:	6b e4       	ldi	r22, 0x4B	; 75
    1918:	8f e8       	ldi	r24, 0x8F	; 143
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1920:	48 e0       	ldi	r20, 0x08	; 8
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	60 e9       	ldi	r22, 0x90	; 144
    1926:	73 e0       	ldi	r23, 0x03	; 3
    1928:	85 e4       	ldi	r24, 0x45	; 69
    192a:	95 e0       	ldi	r25, 0x05	; 5
    192c:	0e 94 cd 3d 	call	0x7b9a	; 0x7b9a <eeprom_update_block>
    1930:	be 01       	movw	r22, r28
    1932:	88 e9       	ldi	r24, 0x98	; 152
    1934:	93 e0       	ldi	r25, 0x03	; 3
    1936:	0e 94 ee 3d 	call	0x7bdc	; 0x7bdc <eeprom_update_word>
    193a:	60 e0       	ldi	r22, 0x00	; 0
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1944:	65 e6       	ldi	r22, 0x65	; 101
    1946:	8a e9       	ldi	r24, 0x9A	; 154
    1948:	93 e0       	ldi	r25, 0x03	; 3
    194a:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

0000195a <eeprom_Backup>:

void eeprom_Backup(){
    195a:	0f 93       	push	r16
    195c:	1f 93       	push	r17
    195e:	cf 93       	push	r28
    1960:	df 93       	push	r29
	lcd_waitSymbolOn();
    1962:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    1966:	c0 e0       	ldi	r28, 0x00	; 0
    1968:	d0 e0       	ldi	r29, 0x00	; 0
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    196a:	8e 01       	movw	r16, r28
    196c:	0f 5f       	subi	r16, 0xFF	; 255
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	ce 01       	movw	r24, r28
    1972:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
    1976:	68 2f       	mov	r22, r24
    1978:	ce 01       	movw	r24, r28
    197a:	9c 5f       	subi	r25, 0xFC	; 252
    197c:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    1980:	e8 01       	movw	r28, r16
	eeprom_UpdateSoftkeys();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1982:	00 50       	subi	r16, 0x00	; 0
    1984:	14 40       	sbci	r17, 0x04	; 4
    1986:	89 f7       	brne	.-30     	; 0x196a <eeprom_Backup+0x10>

void eeprom_Backup(){
	lcd_waitSymbolOn();
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
	lcd_waitSymbolOff();
}
    1988:	df 91       	pop	r29
    198a:	cf 91       	pop	r28
    198c:	1f 91       	pop	r17
    198e:	0f 91       	pop	r16
}

void eeprom_Backup(){
	lcd_waitSymbolOn();
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
	lcd_waitSymbolOff();
    1990:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

00001994 <eeprom_Restore>:
}

void eeprom_Restore(){
    1994:	0f 93       	push	r16
    1996:	1f 93       	push	r17
    1998:	cf 93       	push	r28
    199a:	df 93       	push	r29
	lcd_waitSymbolOn();
    199c:	0e 94 79 3c 	call	0x78f2	; 0x78f2 <lcd_waitSymbolOn>
    19a0:	c0 e0       	ldi	r28, 0x00	; 0
    19a2:	d4 e0       	ldi	r29, 0x04	; 4
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    19a4:	8e 01       	movw	r16, r28
    19a6:	0f 5f       	subi	r16, 0xFF	; 255
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
    19aa:	ce 01       	movw	r24, r28
    19ac:	0e 94 c0 3d 	call	0x7b80	; 0x7b80 <eeprom_read_byte>
    19b0:	68 2f       	mov	r22, r24
    19b2:	ce 01       	movw	r24, r28
    19b4:	94 50       	subi	r25, 0x04	; 4
    19b6:	0e 94 dc 3d 	call	0x7bb8	; 0x7bb8 <eeprom_update_byte>
    19ba:	e8 01       	movw	r28, r16
	eeprom_UpdateSoftkeys();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    19bc:	00 50       	subi	r16, 0x00	; 0
    19be:	18 40       	sbci	r17, 0x08	; 8
    19c0:	89 f7       	brne	.-30     	; 0x19a4 <eeprom_Restore+0x10>

void eeprom_Restore(){
	lcd_waitSymbolOn();
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
	lcd_waitSymbolOff();
    19c2:	df 91       	pop	r29
    19c4:	cf 91       	pop	r28
    19c6:	1f 91       	pop	r17
    19c8:	0f 91       	pop	r16
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
	lcd_waitSymbolOff();
    19ca:	0c 94 86 3c 	jmp	0x790c	; 0x790c <lcd_waitSymbolOff>

000019ce <init_Timers>:
	}
	pipeProcessing = PIPE_IO_START;
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
		// wait for Data read back from input
	}
}
    19ce:	e1 e3       	ldi	r30, 0x31	; 49
    19d0:	f2 e0       	ldi	r31, 0x02	; 2
    19d2:	8f ef       	ldi	r24, 0xFF	; 255
    19d4:	80 83       	st	Z, r24
    19d6:	11 82       	std	Z+1, r1	; 0x01
    19d8:	82 83       	std	Z+2, r24	; 0x02
    19da:	13 82       	std	Z+3, r1	; 0x03
    19dc:	84 83       	std	Z+4, r24	; 0x04
    19de:	15 82       	std	Z+5, r1	; 0x05
    19e0:	86 83       	std	Z+6, r24	; 0x06
    19e2:	17 82       	std	Z+7, r1	; 0x07
    19e4:	80 87       	std	Z+8, r24	; 0x08
    19e6:	11 86       	std	Z+9, r1	; 0x09
    19e8:	82 87       	std	Z+10, r24	; 0x0a
    19ea:	13 86       	std	Z+11, r1	; 0x0b
    19ec:	84 87       	std	Z+12, r24	; 0x0c
    19ee:	15 86       	std	Z+13, r1	; 0x0d
    19f0:	86 87       	std	Z+14, r24	; 0x0e
    19f2:	17 86       	std	Z+15, r1	; 0x0f
    19f4:	80 8b       	std	Z+16, r24	; 0x10
    19f6:	11 8a       	std	Z+17, r1	; 0x11
    19f8:	e3 e4       	ldi	r30, 0x43	; 67
    19fa:	f2 e0       	ldi	r31, 0x02	; 2
    19fc:	10 82       	st	Z, r1
    19fe:	11 82       	std	Z+1, r1	; 0x01
    1a00:	12 82       	std	Z+2, r1	; 0x02
    1a02:	13 82       	std	Z+3, r1	; 0x03
    1a04:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <time_UpTimeUpdated>
    1a08:	08 95       	ret

00001a0a <init_HwTimer>:
    1a0a:	82 e0       	ldi	r24, 0x02	; 2
    1a0c:	84 bd       	out	0x24, r24	; 36
    1a0e:	93 e0       	ldi	r25, 0x03	; 3
    1a10:	95 bd       	out	0x25, r25	; 37
    1a12:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1a16:	89 ef       	ldi	r24, 0xF9	; 249
    1a18:	87 bd       	out	0x27, r24	; 39
    1a1a:	2f 98       	cbi	0x05, 7	; 5
    1a1c:	27 9a       	sbi	0x04, 7	; 4
    1a1e:	08 95       	ret

00001a20 <init_ADC>:
    1a20:	87 e8       	ldi	r24, 0x87	; 135
    1a22:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1a26:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1a2a:	8f e7       	ldi	r24, 0x7F	; 127
    1a2c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1a36:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1a3a:	eb e4       	ldi	r30, 0x4B	; 75
    1a3c:	f3 e0       	ldi	r31, 0x03	; 3
    1a3e:	10 82       	st	Z, r1
    1a40:	8f ef       	ldi	r24, 0xFF	; 255
    1a42:	81 83       	std	Z+1, r24	; 0x01
    1a44:	82 83       	std	Z+2, r24	; 0x02
    1a46:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcNr>
    1a4a:	e3 e5       	ldi	r30, 0x53	; 83
    1a4c:	f3 e0       	ldi	r31, 0x03	; 3
    1a4e:	8a e0       	ldi	r24, 0x0A	; 10
    1a50:	80 83       	st	Z, r24
    1a52:	81 83       	std	Z+1, r24	; 0x01
    1a54:	82 83       	std	Z+2, r24	; 0x02
    1a56:	83 83       	std	Z+3, r24	; 0x03
    1a58:	84 83       	std	Z+4, r24	; 0x04
    1a5a:	86 e0       	ldi	r24, 0x06	; 6
    1a5c:	85 83       	std	Z+5, r24	; 0x05
    1a5e:	08 95       	ret

00001a60 <init_Pipe>:
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	88 b9       	out	0x08, r24	; 8
    1a64:	87 b9       	out	0x07, r24	; 7
    1a66:	82 b9       	out	0x02, r24	; 2
    1a68:	11 b8       	out	0x01, r1	; 1
    1a6a:	84 b3       	in	r24, 0x14	; 20
    1a6c:	87 60       	ori	r24, 0x07	; 7
    1a6e:	84 bb       	out	0x14, r24	; 20
    1a70:	83 b3       	in	r24, 0x13	; 19
    1a72:	87 60       	ori	r24, 0x07	; 7
    1a74:	83 bb       	out	0x13, r24	; 19
    1a76:	5f 98       	cbi	0x0b, 7	; 11
    1a78:	57 9a       	sbi	0x0a, 7	; 10
    1a7a:	eb e4       	ldi	r30, 0x4B	; 75
    1a7c:	f2 e0       	ldi	r31, 0x02	; 2
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	81 83       	std	Z+1, r24	; 0x01
    1a82:	80 83       	st	Z, r24
    1a84:	38 96       	adiw	r30, 0x08	; 8
    1a86:	93 e0       	ldi	r25, 0x03	; 3
    1a88:	eb 34       	cpi	r30, 0x4B	; 75
    1a8a:	f9 07       	cpc	r31, r25
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <init_Pipe+0x20>
    1a8e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pipeProcessing>
    1a92:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <pipe_PowerStatus>
    1a96:	08 95       	ret

00001a98 <init_PipeModules>:
    1a98:	cf 93       	push	r28
    1a9a:	e2 d9       	rcall	.-3132   	; 0xe60 <eeprom_ReadModules>
    1a9c:	c8 2f       	mov	r28, r24
    1a9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <init_PipeModules+0xc>
    1aa2:	92 c0       	rjmp	.+292    	; 0x1bc8 <init_PipeModules+0x130>
    1aa4:	5f 98       	cbi	0x0b, 7	; 11
    1aa6:	84 b3       	in	r24, 0x14	; 20
    1aa8:	87 60       	ori	r24, 0x07	; 7
    1aaa:	84 bb       	out	0x14, r24	; 20
    1aac:	a2 98       	cbi	0x14, 2	; 20
    1aae:	85 e0       	ldi	r24, 0x05	; 5
    1ab0:	8a 95       	dec	r24
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <init_PipeModules+0x18>
    1ab4:	00 00       	nop
    1ab6:	a2 9a       	sbi	0x14, 2	; 20
    1ab8:	90 e2       	ldi	r25, 0x20	; 32
    1aba:	16 c0       	rjmp	.+44     	; 0x1ae8 <init_PipeModules+0x50>
    1abc:	8a ea       	ldi	r24, 0xAA	; 170
    1abe:	88 b9       	out	0x08, r24	; 8
    1ac0:	80 b1       	in	r24, 0x00	; 0
    1ac2:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <pipe+0xff>
    1ac6:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <pipe+0xfe>
    1aca:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xfd>
    1ace:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfc>
    1ad2:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfb>
    1ad6:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfa>
    1ada:	a0 98       	cbi	0x14, 0	; 20
    1adc:	85 e0       	ldi	r24, 0x05	; 5
    1ade:	8a 95       	dec	r24
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <init_PipeModules+0x46>
    1ae2:	00 00       	nop
    1ae4:	91 50       	subi	r25, 0x01	; 1
    1ae6:	29 f0       	breq	.+10     	; 0x1af2 <init_PipeModules+0x5a>
    1ae8:	a0 9a       	sbi	0x14, 0	; 20
    1aea:	90 fd       	sbrc	r25, 0
    1aec:	e7 cf       	rjmp	.-50     	; 0x1abc <init_PipeModules+0x24>
    1aee:	85 e5       	ldi	r24, 0x55	; 85
    1af0:	e6 cf       	rjmp	.-52     	; 0x1abe <init_PipeModules+0x26>
    1af2:	80 e2       	ldi	r24, 0x20	; 32
    1af4:	a0 9a       	sbi	0x14, 0	; 20
    1af6:	92 e0       	ldi	r25, 0x02	; 2
    1af8:	9a 95       	dec	r25
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <init_PipeModules+0x60>
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <init_PipeModules+0x66>
    1afe:	a0 98       	cbi	0x14, 0	; 20
    1b00:	92 e0       	ldi	r25, 0x02	; 2
    1b02:	9a 95       	dec	r25
    1b04:	f1 f7       	brne	.-4      	; 0x1b02 <init_PipeModules+0x6a>
    1b06:	00 c0       	rjmp	.+0      	; 0x1b08 <init_PipeModules+0x70>
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	a1 f7       	brne	.-24     	; 0x1af4 <init_PipeModules+0x5c>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pipe_ModuleTested>
    1b12:	90 e2       	ldi	r25, 0x20	; 32
    1b14:	3f ef       	ldi	r19, 0xFF	; 255
    1b16:	0e c0       	rjmp	.+28     	; 0x1b34 <init_PipeModules+0x9c>
    1b18:	85 e5       	ldi	r24, 0x55	; 85
    1b1a:	82 27       	eor	r24, r18
    1b1c:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <pipe_ModuleTested>
    1b20:	82 23       	and	r24, r18
    1b22:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <pipe_ModuleTested>
    1b26:	a0 98       	cbi	0x14, 0	; 20
    1b28:	85 e0       	ldi	r24, 0x05	; 5
    1b2a:	8a 95       	dec	r24
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <init_PipeModules+0x92>
    1b2e:	00 00       	nop
    1b30:	91 50       	subi	r25, 0x01	; 1
    1b32:	39 f0       	breq	.+14     	; 0x1b42 <init_PipeModules+0xaa>
    1b34:	a0 9a       	sbi	0x14, 0	; 20
    1b36:	38 b9       	out	0x08, r19	; 8
    1b38:	20 b1       	in	r18, 0x00	; 0
    1b3a:	90 fd       	sbrc	r25, 0
    1b3c:	ed cf       	rjmp	.-38     	; 0x1b18 <init_PipeModules+0x80>
    1b3e:	8a ea       	ldi	r24, 0xAA	; 170
    1b40:	ec cf       	rjmp	.-40     	; 0x1b1a <init_PipeModules+0x82>
    1b42:	00 00       	nop
    1b44:	00 00       	nop
    1b46:	a0 9a       	sbi	0x14, 0	; 20
    1b48:	84 b3       	in	r24, 0x14	; 20
    1b4a:	87 60       	ori	r24, 0x07	; 7
    1b4c:	84 bb       	out	0x14, r24	; 20
    1b4e:	a2 98       	cbi	0x14, 2	; 20
    1b50:	92 e0       	ldi	r25, 0x02	; 2
    1b52:	9a 95       	dec	r25
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <init_PipeModules+0xba>
    1b56:	00 c0       	rjmp	.+0      	; 0x1b58 <init_PipeModules+0xc0>
    1b58:	a2 9a       	sbi	0x14, 2	; 20
    1b5a:	e3 e4       	ldi	r30, 0x43	; 67
    1b5c:	f3 e0       	ldi	r31, 0x03	; 3
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	83 81       	ldd	r24, Z+3	; 0x03
    1b62:	82 83       	std	Z+2, r24	; 0x02
    1b64:	84 81       	ldd	r24, Z+4	; 0x04
    1b66:	83 83       	std	Z+3, r24	; 0x03
    1b68:	a0 9a       	sbi	0x14, 0	; 20
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	98 b9       	out	0x08, r25	; 8
    1b6e:	85 81       	ldd	r24, Z+5	; 0x05
    1b70:	84 83       	std	Z+4, r24	; 0x04
    1b72:	86 81       	ldd	r24, Z+6	; 0x06
    1b74:	85 83       	std	Z+5, r24	; 0x05
    1b76:	80 b1       	in	r24, 0x00	; 0
    1b78:	86 83       	std	Z+6, r24	; 0x06
    1b7a:	82 83       	std	Z+2, r24	; 0x02
    1b7c:	83 83       	std	Z+3, r24	; 0x03
    1b7e:	84 83       	std	Z+4, r24	; 0x04
    1b80:	85 83       	std	Z+5, r24	; 0x05
    1b82:	87 83       	std	Z+7, r24	; 0x07
    1b84:	a0 98       	cbi	0x14, 0	; 20
    1b86:	38 97       	sbiw	r30, 0x08	; 8
    1b88:	82 e0       	ldi	r24, 0x02	; 2
    1b8a:	e3 34       	cpi	r30, 0x43	; 67
    1b8c:	f8 07       	cpc	r31, r24
    1b8e:	41 f7       	brne	.-48     	; 0x1b60 <init_PipeModules+0xc8>
    1b90:	00 00       	nop
    1b92:	00 00       	nop
    1b94:	a0 9a       	sbi	0x14, 0	; 20
    1b96:	a1 98       	cbi	0x14, 1	; 20
    1b98:	18 b8       	out	0x08, r1	; 8
    1b9a:	95 e0       	ldi	r25, 0x05	; 5
    1b9c:	9a 95       	dec	r25
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <init_PipeModules+0x104>
    1ba0:	00 00       	nop
    1ba2:	a1 9a       	sbi	0x14, 1	; 20
    1ba4:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    1ba8:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <pipe_ModuleTested>
    1bac:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <pipe_ModuleAssnWrite>
    1bb0:	89 2b       	or	r24, r25
    1bb2:	84 17       	cp	r24, r20
    1bb4:	39 f0       	breq	.+14     	; 0x1bc4 <init_PipeModules+0x12c>
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	59 2b       	or	r21, r25
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	cf 91       	pop	r28
    1bc0:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <log_putError>
    1bc4:	cf 91       	pop	r28
    1bc6:	08 95       	ret
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <log_putError>
    1bd4:	c0 93 52 03 	sts	0x0352, r28	; 0x800352 <pipe_ModuleAssnRead>
    1bd8:	c0 93 51 03 	sts	0x0351, r28	; 0x800351 <pipe_ModuleAssnWrite>
    1bdc:	63 cf       	rjmp	.-314    	; 0x1aa4 <init_PipeModules+0xc>

00001bde <test_PipeModule>:
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	08 f0       	brcs	.+2      	; 0x1be4 <test_PipeModule+0x6>
    1be2:	56 c0       	rjmp	.+172    	; 0x1c90 <test_PipeModule+0xb2>
    1be4:	31 e0       	ldi	r19, 0x01	; 1
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <test_PipeModule+0xc>
    1be8:	33 0f       	add	r19, r19
    1bea:	8a 95       	dec	r24
    1bec:	ea f7       	brpl	.-6      	; 0x1be8 <test_PipeModule+0xa>
    1bee:	80 e8       	ldi	r24, 0x80	; 128
    1bf0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipeProcessing>
    1bf4:	5f 98       	cbi	0x0b, 7	; 11
    1bf6:	84 b3       	in	r24, 0x14	; 20
    1bf8:	87 60       	ori	r24, 0x07	; 7
    1bfa:	84 bb       	out	0x14, r24	; 20
    1bfc:	54 e0       	ldi	r21, 0x04	; 4
    1bfe:	43 2f       	mov	r20, r19
    1c00:	40 95       	com	r20
    1c02:	88 e0       	ldi	r24, 0x08	; 8
    1c04:	95 ea       	ldi	r25, 0xA5	; 165
    1c06:	2f ef       	ldi	r18, 0xFF	; 255
    1c08:	28 b9       	out	0x08, r18	; 8
    1c0a:	96 95       	lsr	r25
    1c0c:	22 e0       	ldi	r18, 0x02	; 2
    1c0e:	2a 95       	dec	r18
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <test_PipeModule+0x30>
    1c12:	00 c0       	rjmp	.+0      	; 0x1c14 <test_PipeModule+0x36>
    1c14:	a0 98       	cbi	0x14, 0	; 20
    1c16:	22 e0       	ldi	r18, 0x02	; 2
    1c18:	2a 95       	dec	r18
    1c1a:	f1 f7       	brne	.-4      	; 0x1c18 <test_PipeModule+0x3a>
    1c1c:	00 c0       	rjmp	.+0      	; 0x1c1e <test_PipeModule+0x40>
    1c1e:	a0 9a       	sbi	0x14, 0	; 20
    1c20:	81 50       	subi	r24, 0x01	; 1
    1c22:	31 f0       	breq	.+12     	; 0x1c30 <test_PipeModule+0x52>
    1c24:	90 fd       	sbrc	r25, 0
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <test_PipeModule+0x4e>
    1c28:	24 2f       	mov	r18, r20
    1c2a:	ee cf       	rjmp	.-36     	; 0x1c08 <test_PipeModule+0x2a>
    1c2c:	2f ef       	ldi	r18, 0xFF	; 255
    1c2e:	ec cf       	rjmp	.-40     	; 0x1c08 <test_PipeModule+0x2a>
    1c30:	51 50       	subi	r21, 0x01	; 1
    1c32:	39 f7       	brne	.-50     	; 0x1c02 <test_PipeModule+0x24>
    1c34:	80 e2       	ldi	r24, 0x20	; 32
    1c36:	92 e0       	ldi	r25, 0x02	; 2
    1c38:	9a 95       	dec	r25
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <test_PipeModule+0x5a>
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <test_PipeModule+0x60>
    1c3e:	a0 98       	cbi	0x14, 0	; 20
    1c40:	22 e0       	ldi	r18, 0x02	; 2
    1c42:	2a 95       	dec	r18
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <test_PipeModule+0x64>
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <test_PipeModule+0x6a>
    1c48:	a0 9a       	sbi	0x14, 0	; 20
    1c4a:	81 50       	subi	r24, 0x01	; 1
    1c4c:	a1 f7       	brne	.-24     	; 0x1c36 <test_PipeModule+0x58>
    1c4e:	90 e2       	ldi	r25, 0x20	; 32
    1c50:	40 e0       	ldi	r20, 0x00	; 0
    1c52:	50 e0       	ldi	r21, 0x00	; 0
    1c54:	ba 01       	movw	r22, r20
    1c56:	44 0f       	add	r20, r20
    1c58:	55 1f       	adc	r21, r21
    1c5a:	66 1f       	adc	r22, r22
    1c5c:	77 1f       	adc	r23, r23
    1c5e:	82 e0       	ldi	r24, 0x02	; 2
    1c60:	8a 95       	dec	r24
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <test_PipeModule+0x82>
    1c64:	00 c0       	rjmp	.+0      	; 0x1c66 <test_PipeModule+0x88>
    1c66:	a0 98       	cbi	0x14, 0	; 20
    1c68:	80 b1       	in	r24, 0x00	; 0
    1c6a:	83 23       	and	r24, r19
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <test_PipeModule+0x92>
    1c6e:	41 60       	ori	r20, 0x01	; 1
    1c70:	22 e0       	ldi	r18, 0x02	; 2
    1c72:	2a 95       	dec	r18
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <test_PipeModule+0x94>
    1c76:	00 c0       	rjmp	.+0      	; 0x1c78 <test_PipeModule+0x9a>
    1c78:	a0 9a       	sbi	0x14, 0	; 20
    1c7a:	91 50       	subi	r25, 0x01	; 1
    1c7c:	61 f7       	brne	.-40     	; 0x1c56 <test_PipeModule+0x78>
    1c7e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <pipeProcessing>
    1c82:	5f 9a       	sbi	0x0b, 7	; 11
    1c84:	34 2f       	mov	r19, r20
    1c86:	25 2f       	mov	r18, r21
    1c88:	cb 01       	movw	r24, r22
    1c8a:	63 2f       	mov	r22, r19
    1c8c:	72 2f       	mov	r23, r18
    1c8e:	08 95       	ret
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	63 2f       	mov	r22, r19
    1c9a:	72 2f       	mov	r23, r18
    1c9c:	08 95       	ret

00001c9e <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1ca4:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ca6:	f8 94       	cli
    1ca8:	e1 e3       	ldi	r30, 0x31	; 49
    1caa:	f2 e0       	ldi	r31, 0x02	; 2
    1cac:	92 e3       	ldi	r25, 0x32	; 50
    1cae:	92 83       	std	Z+2, r25	; 0x02
    1cb0:	13 82       	std	Z+3, r1	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1cb2:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    1cb4:	08 95       	ret

00001cb6 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1cb6:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <pipe_PowerStatus>
    1cba:	81 30       	cpi	r24, 0x01	; 1
    1cbc:	31 f0       	breq	.+12     	; 0x1cca <module_PowerControl+0x14>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
		} else {
			// keys are not released	
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1cbe:	82 31       	cpi	r24, 0x12	; 18
    1cc0:	59 f1       	breq	.+86     	; 0x1d18 <module_PowerControl+0x62>
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <swTimer+0x2>
    1cc8:	08 95       	ret
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	eb e4       	ldi	r30, 0x4B	; 75
    1cce:	f2 e0       	ldi	r31, 0x02	; 2
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read, 
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF; // outputs off
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn; 
    1cd4:	96 81       	ldd	r25, Z+6	; 0x06
    1cd6:	89 2b       	or	r24, r25
		pPipe++;
    1cd8:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read, 
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1cda:	93 e0       	ldi	r25, 0x03	; 3
    1cdc:	eb 34       	cpi	r30, 0x4B	; 75
    1cde:	f9 07       	cpc	r31, r25
    1ce0:	c1 f7       	brne	.-16     	; 0x1cd2 <module_PowerControl+0x1c>

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
		// now check inputs
		if (module_TestAllInputs() == 0){
    1ce2:	90 91 52 03 	lds	r25, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    1ce6:	89 23       	and	r24, r25
    1ce8:	69 f4       	brne	.+26     	; 0x1d04 <module_PowerControl+0x4e>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1cea:	2e 9a       	sbi	0x05, 6	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1cec:	82 e1       	ldi	r24, 0x12	; 18
    1cee:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1cf2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1cf4:	f8 94       	cli
    1cf6:	91 e0       	ldi	r25, 0x01	; 1
    1cf8:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <swTimer+0x2>
    1cfc:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <swTimer+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d00:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    1d02:	08 95       	ret
		} else {
			// keys are not released	
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1d04:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d06:	f8 94       	cli
    1d08:	9c e0       	ldi	r25, 0x0C	; 12
    1d0a:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <swTimer+0x2>
    1d0e:	92 e0       	ldi	r25, 0x02	; 2
    1d10:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <swTimer+0x3>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d14:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    1d16:	08 95       	ret
    1d18:	eb e4       	ldi	r30, 0x4B	; 75
    1d1a:	f2 e0       	ldi	r31, 0x02	; 2
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read, 
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF; // outputs off
    1d1e:	2f ef       	ldi	r18, 0xFF	; 255
    1d20:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn; 
    1d22:	96 81       	ldd	r25, Z+6	; 0x06
    1d24:	89 2b       	or	r24, r25
		pPipe++;
    1d26:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read, 
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d28:	93 e0       	ldi	r25, 0x03	; 3
    1d2a:	eb 34       	cpi	r30, 0x4B	; 75
    1d2c:	f9 07       	cpc	r31, r25
    1d2e:	c1 f7       	brne	.-16     	; 0x1d20 <module_PowerControl+0x6a>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn; 
		pPipe++;
	}
	return result & pipe_ModuleAssnRead; // modules unassgined to read will be ignored (return bit=0)
    1d30:	40 91 52 03 	lds	r20, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    1d34:	84 23       	and	r24, r20
			// keys are not released	
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
		uint8_t testResult = module_TestAllInputs();
		if (testResult == 0){
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <module_PowerControl+0x90>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1d38:	84 e1       	ldi	r24, 0x14	; 20
    1d3a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pipe_PowerStatus>
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <swTimer+0x2>
    1d44:	08 95       	ret
		if (testResult == 0){
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1d46:	48 2f       	mov	r20, r24
    1d48:	50 e0       	ldi	r21, 0x00	; 0
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	85 e0       	ldi	r24, 0x05	; 5
    1d4e:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <log_putError>
			POWER_OFF
    1d52:	2e 98       	cbi	0x05, 6	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1d54:	80 e8       	ldi	r24, 0x80	; 128
    1d56:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pipe_PowerStatus>
    1d5a:	b3 cf       	rjmp	.-154    	; 0x1cc2 <module_PowerControl+0xc>

00001d5c <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1d5c:	1f 92       	push	r1
    1d5e:	0f 92       	push	r0
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	0f 92       	push	r0
    1d64:	11 24       	eor	r1, r1
    1d66:	0b b6       	in	r0, 0x3b	; 59
    1d68:	0f 92       	push	r0
    1d6a:	ef 92       	push	r14
    1d6c:	ff 92       	push	r15
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	2f 93       	push	r18
    1d74:	3f 93       	push	r19
    1d76:	4f 93       	push	r20
    1d78:	5f 93       	push	r21
    1d7a:	6f 93       	push	r22
    1d7c:	7f 93       	push	r23
    1d7e:	8f 93       	push	r24
    1d80:	9f 93       	push	r25
    1d82:	af 93       	push	r26
    1d84:	bf 93       	push	r27
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1d8e:	2f 9a       	sbi	0x05, 7	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1d90:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <msecCtr>
    1d94:	8f 5f       	subi	r24, 0xFF	; 255
    1d96:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <msecCtr>
    1d9a:	83 70       	andi	r24, 0x03	; 3
    1d9c:	82 30       	cpi	r24, 0x02	; 2
    1d9e:	09 f4       	brne	.+2      	; 0x1da2 <__vector_21+0x46>
    1da0:	ae c0       	rjmp	.+348    	; 0x1efe <__vector_21+0x1a2>
    1da2:	83 30       	cpi	r24, 0x03	; 3
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <__vector_21+0x4c>
    1da6:	72 c0       	rjmp	.+228    	; 0x1e8c <__vector_21+0x130>
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	e9 f1       	breq	.+122    	; 0x1e26 <__vector_21+0xca>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1dac:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <adcNr>
    1db0:	99 23       	and	r25, r25
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <__vector_21+0x5a>
    1db4:	51 c1       	rjmp	.+674    	; 0x2058 <__vector_21+0x2fc>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    1db6:	9f 5f       	subi	r25, 0xFF	; 255
    1db8:	94 30       	cpi	r25, 0x04	; 4
    1dba:	08 f4       	brcc	.+2      	; 0x1dbe <__vector_21+0x62>
    1dbc:	a7 c1       	rjmp	.+846    	; 0x210c <__vector_21+0x3b0>
		adcNr = 0;
    1dbe:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
		newMux = adcKeys[adcNr].mux;
    1dc2:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <adcKeys>
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	2f 71       	andi	r18, 0x1F	; 31
    1dca:	20 66       	ori	r18, 0x60	; 96
    1dcc:	80 72       	andi	r24, 0x20	; 32
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	95 95       	asr	r25
    1dd2:	87 95       	ror	r24
    1dd4:	95 95       	asr	r25
    1dd6:	87 95       	ror	r24
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    1dd8:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    1ddc:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1de0:	9f 7d       	andi	r25, 0xDF	; 223
    1de2:	89 2b       	or	r24, r25
    1de4:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    1de8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1dec:	80 64       	ori	r24, 0x40	; 64
    1dee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    1df2:	2f 98       	cbi	0x05, 7	; 5

}
    1df4:	ff 91       	pop	r31
    1df6:	ef 91       	pop	r30
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	bf 91       	pop	r27
    1dfe:	af 91       	pop	r26
    1e00:	9f 91       	pop	r25
    1e02:	8f 91       	pop	r24
    1e04:	7f 91       	pop	r23
    1e06:	6f 91       	pop	r22
    1e08:	5f 91       	pop	r21
    1e0a:	4f 91       	pop	r20
    1e0c:	3f 91       	pop	r19
    1e0e:	2f 91       	pop	r18
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	0f 90       	pop	r0
    1e1a:	0b be       	out	0x3b, r0	; 59
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    1e26:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipeProcessing>
    1e2a:	80 38       	cpi	r24, 0x80	; 128
    1e2c:	11 f3       	breq	.-60     	; 0x1df2 <__vector_21+0x96>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    1e2e:	84 b3       	in	r24, 0x14	; 20
    1e30:	87 60       	ori	r24, 0x07	; 7
    1e32:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    1e34:	a2 98       	cbi	0x14, 2	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
    1e36:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <pipe_ModuleAssnWrite>
    1e3a:	90 95       	com	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1e3c:	f2 e0       	ldi	r31, 0x02	; 2
    1e3e:	fa 95       	dec	r31
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <__vector_21+0xe2>
    1e42:	00 c0       	rjmp	.+0      	; 0x1e44 <__vector_21+0xe8>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    1e44:	a2 9a       	sbi	0x14, 2	; 20

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    1e46:	e3 e4       	ldi	r30, 0x43	; 67
    1e48:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    1e4a:	83 81       	ldd	r24, Z+3	; 0x03
    1e4c:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    1e4e:	84 81       	ldd	r24, Z+4	; 0x04
    1e50:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    1e52:	a0 9a       	sbi	0x14, 0	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    1e54:	81 81       	ldd	r24, Z+1	; 0x01
    1e56:	89 2b       	or	r24, r25
    1e58:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    1e5a:	85 81       	ldd	r24, Z+5	; 0x05
    1e5c:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    1e5e:	86 81       	ldd	r24, Z+6	; 0x06
    1e60:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    1e62:	80 b1       	in	r24, 0x00	; 0
    1e64:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    1e66:	a0 98       	cbi	0x14, 0	; 20
		curPipe--; // proceed to next pipe
    1e68:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    1e6a:	32 e0       	ldi	r19, 0x02	; 2
    1e6c:	e3 34       	cpi	r30, 0x43	; 67
    1e6e:	f3 07       	cpc	r31, r19
    1e70:	61 f7       	brne	.-40     	; 0x1e4a <__vector_21+0xee>
	asm("nop");
    1e72:	00 00       	nop
	asm("nop");
    1e74:	00 00       	nop
	PIPE_CLOCK_H
    1e76:	a0 9a       	sbi	0x14, 0	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    1e78:	a1 98       	cbi	0x14, 1	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    1e7a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipeProcessing>
    1e7e:	82 60       	ori	r24, 0x02	; 2
    1e80:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    1e84:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    1e86:	5f 9a       	sbi	0x0b, 7	; 11
	PIPE_LATCH2PIPE_H
    1e88:	a1 9a       	sbi	0x14, 1	; 20
    1e8a:	b3 cf       	rjmp	.-154    	; 0x1df2 <__vector_21+0x96>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    1e8c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipeProcessing>
    1e90:	80 38       	cpi	r24, 0x80	; 128
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <__vector_21+0x13a>
    1e94:	ae cf       	rjmp	.-164    	; 0x1df2 <__vector_21+0x96>
    1e96:	e0 90 52 03 	lds	r14, 0x0352	; 0x800352 <pipe_ModuleAssnRead>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    1e9a:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    1e9c:	cb e4       	ldi	r28, 0x4B	; 75
    1e9e:	d2 e0       	ldi	r29, 0x02	; 2
    1ea0:	12 c0       	rjmp	.+36     	; 0x1ec6 <__vector_21+0x16a>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    1ea2:	1e 21       	and	r17, r14
    1ea4:	80 2f       	mov	r24, r16
    1ea6:	80 95       	com	r24
    1ea8:	81 23       	and	r24, r17
		if ((statChange)!= 0) {
    1eaa:	29 f5       	brne	.+74     	; 0x1ef6 <__vector_21+0x19a>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
		}
		curPipe->pipeInStat = newPipeStat;
    1eac:	0f 83       	std	Y+7, r16	; 0x07
		curPipe++;
    1eae:	28 96       	adiw	r28, 0x08	; 8
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    1eb0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipeProcessing>
    1eb4:	81 60       	ori	r24, 0x01	; 1
    1eb6:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipeProcessing>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    1eba:	f3 94       	inc	r15
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	cb 34       	cpi	r28, 0x4B	; 75
    1ec0:	d8 07       	cpc	r29, r24
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <__vector_21+0x16a>
    1ec4:	96 cf       	rjmp	.-212    	; 0x1df2 <__vector_21+0x96>
			PIPE_OE_L // turn off OE till next PipeIO cycle
		}
		#endif

		// Check new pipe status
		uint8_t newPipeStat = (pipeIn) | (curPipe->pipeInM4) | (curPipe->pipeInM8)
    1ec6:	0e 81       	ldd	r16, Y+6	; 0x06
    1ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eca:	08 2b       	or	r16, r24
    1ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ece:	08 2b       	or	r16, r24
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	08 2b       	or	r16, r24
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	08 2b       	or	r16, r24
			| (curPipe->pipeInM12) | (curPipe->pipeInM16) ; // 1 if key pressed at least onece in last 16m, 0 if key was never pressed
		uint8_t oldPipeStat = curPipe->pipeInStat;
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    1ed8:	1f 81       	ldd	r17, Y+7	; 0x07
    1eda:	81 2f       	mov	r24, r17
    1edc:	80 95       	com	r24
    1ede:	8e 21       	and	r24, r14
    1ee0:	80 23       	and	r24, r16
		if ((statChange)!= 0) {
    1ee2:	f9 f2       	breq	.-66     	; 0x1ea2 <__vector_21+0x146>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    1ee4:	9f 2d       	mov	r25, r15
    1ee6:	90 62       	ori	r25, 0x20	; 32
    1ee8:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    1eec:	1e 21       	and	r17, r14
    1eee:	80 2f       	mov	r24, r16
    1ef0:	80 95       	com	r24
    1ef2:	81 23       	and	r24, r17
		if ((statChange)!= 0) {
    1ef4:	d9 f2       	breq	.-74     	; 0x1eac <__vector_21+0x150>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    1ef6:	9f 2d       	mov	r25, r15
    1ef8:	0e 94 f3 2d 	call	0x5be6	; 0x5be6 <pipeMsgPush>
    1efc:	d7 cf       	rjmp	.-82     	; 0x1eac <__vector_21+0x150>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1efe:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer>
    1f02:	81 50       	subi	r24, 0x01	; 1
    1f04:	8e 3f       	cpi	r24, 0xFE	; 254
    1f06:	50 f4       	brcc	.+20     	; 0x1f1c <__vector_21+0x1c0>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1f08:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <swTimer+0x1>
    1f0c:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1f0e:	95 30       	cpi	r25, 0x05	; 5
    1f10:	18 f0       	brcs	.+6      	; 0x1f18 <__vector_21+0x1bc>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1f12:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1f16:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1f18:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <swTimer+0x1>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1f1c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <swTimer+0x2>
    1f20:	81 50       	subi	r24, 0x01	; 1
    1f22:	8e 3f       	cpi	r24, 0xFE	; 254
    1f24:	50 f4       	brcc	.+20     	; 0x1f3a <__vector_21+0x1de>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1f26:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <swTimer+0x3>
    1f2a:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1f2c:	95 30       	cpi	r25, 0x05	; 5
    1f2e:	18 f0       	brcs	.+6      	; 0x1f36 <__vector_21+0x1da>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1f30:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <swTimer+0x2>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1f34:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1f36:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <swTimer+0x3>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1f3a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x4>
    1f3e:	81 50       	subi	r24, 0x01	; 1
    1f40:	8e 3f       	cpi	r24, 0xFE	; 254
    1f42:	50 f4       	brcc	.+20     	; 0x1f58 <__vector_21+0x1fc>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1f44:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <swTimer+0x5>
    1f48:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1f4a:	95 30       	cpi	r25, 0x05	; 5
    1f4c:	18 f0       	brcs	.+6      	; 0x1f54 <__vector_21+0x1f8>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1f4e:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <swTimer+0x4>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1f52:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1f54:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <swTimer+0x5>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1f58:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x6>
    1f5c:	81 50       	subi	r24, 0x01	; 1
    1f5e:	8e 3f       	cpi	r24, 0xFE	; 254
    1f60:	50 f4       	brcc	.+20     	; 0x1f76 <__vector_21+0x21a>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1f62:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <swTimer+0x7>
    1f66:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1f68:	95 30       	cpi	r25, 0x05	; 5
    1f6a:	18 f0       	brcs	.+6      	; 0x1f72 <__vector_21+0x216>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1f6c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x6>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1f70:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1f72:	90 93 38 02 	sts	0x0238, r25	; 0x800238 <swTimer+0x7>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1f76:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0x8>
    1f7a:	81 50       	subi	r24, 0x01	; 1
    1f7c:	8e 3f       	cpi	r24, 0xFE	; 254
    1f7e:	50 f4       	brcc	.+20     	; 0x1f94 <__vector_21+0x238>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1f80:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <swTimer+0x9>
    1f84:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1f86:	95 30       	cpi	r25, 0x05	; 5
    1f88:	18 f0       	brcs	.+6      	; 0x1f90 <__vector_21+0x234>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1f8a:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0x8>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1f90:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <swTimer+0x9>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1f94:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xa>
    1f98:	81 50       	subi	r24, 0x01	; 1
    1f9a:	8e 3f       	cpi	r24, 0xFE	; 254
    1f9c:	50 f4       	brcc	.+20     	; 0x1fb2 <__vector_21+0x256>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1f9e:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <swTimer+0xb>
    1fa2:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1fa4:	95 30       	cpi	r25, 0x05	; 5
    1fa6:	18 f0       	brcs	.+6      	; 0x1fae <__vector_21+0x252>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1fa8:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xa>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1fac:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1fae:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <swTimer+0xb>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1fb2:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xc>
    1fb6:	81 50       	subi	r24, 0x01	; 1
    1fb8:	8e 3f       	cpi	r24, 0xFE	; 254
    1fba:	50 f4       	brcc	.+20     	; 0x1fd0 <__vector_21+0x274>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1fbc:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <swTimer+0xd>
    1fc0:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1fc2:	95 30       	cpi	r25, 0x05	; 5
    1fc4:	18 f0       	brcs	.+6      	; 0x1fcc <__vector_21+0x270>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1fc6:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xc>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1fca:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1fcc:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <swTimer+0xd>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1fd0:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0xe>
    1fd4:	81 50       	subi	r24, 0x01	; 1
    1fd6:	8e 3f       	cpi	r24, 0xFE	; 254
    1fd8:	50 f4       	brcc	.+20     	; 0x1fee <__vector_21+0x292>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1fda:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <swTimer+0xf>
    1fde:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1fe0:	95 30       	cpi	r25, 0x05	; 5
    1fe2:	18 f0       	brcs	.+6      	; 0x1fea <__vector_21+0x28e>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1fe4:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <swTimer+0xe>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1fea:	90 93 40 02 	sts	0x0240, r25	; 0x800240 <swTimer+0xf>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1fee:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <swTimer+0x10>
    1ff2:	81 50       	subi	r24, 0x01	; 1
    1ff4:	8e 3f       	cpi	r24, 0xFE	; 254
    1ff6:	50 f4       	brcc	.+20     	; 0x200c <__vector_21+0x2b0>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1ff8:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <swTimer+0x11>
    1ffc:	9f 5f       	subi	r25, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1ffe:	95 30       	cpi	r25, 0x05	; 5
    2000:	18 f0       	brcs	.+6      	; 0x2008 <__vector_21+0x2ac>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    2002:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <swTimer+0x10>
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    2006:	90 e0       	ldi	r25, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    2008:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <swTimer+0x11>
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    200c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <time_Uptime>
    2010:	8f 5f       	subi	r24, 0xFF	; 255
    2012:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <time_Uptime>
    2016:	8a 3f       	cpi	r24, 0xFA	; 250
    2018:	09 f0       	breq	.+2      	; 0x201c <__vector_21+0x2c0>
    201a:	eb ce       	rjmp	.-554    	; 0x1df2 <__vector_21+0x96>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    201c:	8f ef       	ldi	r24, 0xFF	; 255
    201e:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    2022:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <time_Uptime>
		if (++(*pTime) >= 60) {
    2026:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x1>
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	8c 33       	cpi	r24, 0x3C	; 60
    202e:	08 f4       	brcc	.+2      	; 0x2032 <__vector_21+0x2d6>
    2030:	50 c0       	rjmp	.+160    	; 0x20d2 <__vector_21+0x376>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    2032:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x1>
			if (++(*pTime) >= 60) {
    2036:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <time_Uptime+0x2>
    203a:	8f 5f       	subi	r24, 0xFF	; 255
    203c:	8c 33       	cpi	r24, 0x3C	; 60
    203e:	08 f4       	brcc	.+2      	; 0x2042 <__vector_21+0x2e6>
    2040:	5f c0       	rjmp	.+190    	; 0x2100 <__vector_21+0x3a4>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    2042:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <time_Uptime+0x2>
				if (++(*pTime) >= 100) {
    2046:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <time_Uptime+0x3>
    204a:	8f 5f       	subi	r24, 0xFF	; 255
    204c:	84 36       	cpi	r24, 0x64	; 100
    204e:	08 f4       	brcc	.+2      	; 0x2052 <__vector_21+0x2f6>
    2050:	5a c0       	rjmp	.+180    	; 0x2106 <__vector_21+0x3aa>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2052:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <time_Uptime+0x3>
    2056:	cd ce       	rjmp	.-614    	; 0x1df2 <__vector_21+0x96>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    2058:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    205c:	98 2f       	mov	r25, r24
    205e:	90 74       	andi	r25, 0x40	; 64
    2060:	86 fd       	sbrc	r24, 6
    2062:	31 c0       	rjmp	.+98     	; 0x20c6 <__vector_21+0x36a>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    2064:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <adcKeys+0x1>
		uint8_t newADC = ADCH;
    2068:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    206c:	20 93 4c 03 	sts	0x034C, r18	; 0x80034c <adcKeys+0x1>

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    2070:	28 17       	cp	r18, r24
    2072:	90 f1       	brcs	.+100    	; 0x20d8 <__vector_21+0x37c>
		return data1-data2;
	} else {
		return data2-data1;
    2074:	32 2f       	mov	r19, r18
    2076:	38 1b       	sub	r19, r24
    2078:	83 2f       	mov	r24, r19
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    207a:	84 30       	cpi	r24, 0x04	; 4
    207c:	20 f5       	brcc	.+72     	; 0x20c6 <__vector_21+0x36a>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    207e:	22 32       	cpi	r18, 0x22	; 34
    2080:	08 f4       	brcc	.+2      	; 0x2084 <__vector_21+0x328>
    2082:	4a c0       	rjmp	.+148    	; 0x2118 <__vector_21+0x3bc>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    2084:	2f 33       	cpi	r18, 0x3F	; 63
    2086:	08 f4       	brcc	.+2      	; 0x208a <__vector_21+0x32e>
    2088:	96 c0       	rjmp	.+300    	; 0x21b6 <__vector_21+0x45a>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    208a:	28 36       	cpi	r18, 0x68	; 104
    208c:	08 f4       	brcc	.+2      	; 0x2090 <__vector_21+0x334>
    208e:	97 c0       	rjmp	.+302    	; 0x21be <__vector_21+0x462>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    2090:	26 39       	cpi	r18, 0x96	; 150
    2092:	08 f4       	brcc	.+2      	; 0x2096 <__vector_21+0x33a>
    2094:	b4 c0       	rjmp	.+360    	; 0x21fe <__vector_21+0x4a2>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    2096:	2f 3b       	cpi	r18, 0xBF	; 191
    2098:	08 f4       	brcc	.+2      	; 0x209c <__vector_21+0x340>
    209a:	b9 c0       	rjmp	.+370    	; 0x220e <__stack+0xf>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    209c:	28 3e       	cpi	r18, 0xE8	; 232
    209e:	08 f4       	brcc	.+2      	; 0x20a2 <__vector_21+0x346>
    20a0:	b2 c0       	rjmp	.+356    	; 0x2206 <__stack+0x7>
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    20a2:	c0 91 4d 03 	lds	r28, 0x034D	; 0x80034d <adcKeys+0x2>
			if (oldKey != newKey){
    20a6:	cf 3f       	cpi	r28, 0xFF	; 255
    20a8:	71 f0       	breq	.+28     	; 0x20c6 <__vector_21+0x36a>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
				}
				adcKeys[adcNr].key = newKey;
    20aa:	8f ef       	ldi	r24, 0xFF	; 255
    20ac:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <adcKeys+0x2>
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
						message_push(MESSAGE_KEY_PRESSED | newKey);
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    20b0:	ec 2f       	mov	r30, r28
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	ee 5a       	subi	r30, 0xAE	; 174
    20b6:	fc 4f       	sbci	r31, 0xFC	; 252
    20b8:	80 81       	ld	r24, Z
    20ba:	81 ff       	sbrs	r24, 1
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <__vector_21+0x36a>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    20be:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <adcKeys+0x3>
    20c2:	83 70       	andi	r24, 0x03	; 3
    20c4:	b9 f0       	breq	.+46     	; 0x20f4 <__vector_21+0x398>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <adcNr>
		adcNr = 0;
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	2f e7       	ldi	r18, 0x7F	; 127
    20d0:	83 ce       	rjmp	.-762    	; 0x1dd8 <__vector_21+0x7c>
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
		*(pTime++) = 0; // reset prescaler and point to seconds
		if (++(*pTime) >= 60) {
    20d2:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <time_Uptime+0x1>
    20d6:	8d ce       	rjmp	.-742    	; 0x1df2 <__vector_21+0x96>
//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
		return data1-data2;
    20d8:	82 1b       	sub	r24, r18
    20da:	cf cf       	rjmp	.-98     	; 0x207a <__vector_21+0x31e>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
								adcKeys[adcNr].keyTimer = 0;
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    20dc:	83 81       	ldd	r24, Z+3	; 0x03
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <__vector_21+0x388>
    20e2:	69 ce       	rjmp	.-814    	; 0x1db6 <__vector_21+0x5a>
    20e4:	24 81       	ldd	r18, Z+4	; 0x04
    20e6:	35 81       	ldd	r19, Z+5	; 0x05
    20e8:	2c 30       	cpi	r18, 0x0C	; 12
    20ea:	31 05       	cpc	r19, r1
    20ec:	09 f0       	breq	.+2      	; 0x20f0 <__vector_21+0x394>
    20ee:	63 ce       	rjmp	.-826    	; 0x1db6 <__vector_21+0x5a>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    20f0:	15 82       	std	Z+5, r1	; 0x05
    20f2:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    20f4:	8c 2f       	mov	r24, r28
    20f6:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <message_push>
    20fa:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <adcNr>
    20fe:	5b ce       	rjmp	.-842    	; 0x1db6 <__vector_21+0x5a>
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
		*(pTime++) = 0; // reset prescaler and point to seconds
		if (++(*pTime) >= 60) {
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
			if (++(*pTime) >= 60) {
    2100:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <time_Uptime+0x2>
    2104:	76 ce       	rjmp	.-788    	; 0x1df2 <__vector_21+0x96>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
				if (++(*pTime) >= 100) {
    2106:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <time_Uptime+0x3>
    210a:	73 ce       	rjmp	.-794    	; 0x1df2 <__vector_21+0x96>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    210c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <adcNr>
		adcNr = 0;
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    2110:	99 23       	and	r25, r25
    2112:	09 f4       	brne	.+2      	; 0x2116 <__vector_21+0x3ba>
    2114:	56 ce       	rjmp	.-852    	; 0x1dc2 <__vector_21+0x66>
    2116:	da cf       	rjmp	.-76     	; 0x20cc <__vector_21+0x370>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    2118:	23 e0       	ldi	r18, 0x03	; 3
    211a:	30 e0       	ldi	r19, 0x00	; 0
					newKey = ADC_KEY5_FUNC;
    211c:	84 e0       	ldi	r24, 0x04	; 4
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    211e:	c0 91 4d 03 	lds	r28, 0x034D	; 0x80034d <adcKeys+0x2>
			if (oldKey != newKey){
    2122:	c8 17       	cp	r28, r24
    2124:	91 f0       	breq	.+36     	; 0x214a <__vector_21+0x3ee>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    2126:	cf 3f       	cpi	r28, 0xFF	; 255
    2128:	09 f0       	breq	.+2      	; 0x212c <__vector_21+0x3d0>
    212a:	bf cf       	rjmp	.-130    	; 0x20aa <__vector_21+0x34e>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
				}
				adcKeys[adcNr].key = newKey;
    212c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <adcKeys+0x2>
				if (oldKey == KEY_NOKEY) {
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    2130:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <adcKeys+0x5>
    2134:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <adcKeys+0x4>
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    2138:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <adcKeys+0x3>
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    213c:	f9 01       	movw	r30, r18
    213e:	ed 5a       	subi	r30, 0xAD	; 173
    2140:	fc 4f       	sbci	r31, 0xFC	; 252
    2142:	90 81       	ld	r25, Z
    2144:	90 ff       	sbrs	r25, 0
    2146:	bf cf       	rjmp	.-130    	; 0x20c6 <__vector_21+0x36a>
    2148:	d6 cf       	rjmp	.-84     	; 0x20f6 <__vector_21+0x39a>
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    214a:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <adcKeys+0x4>
    214e:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <adcKeys+0x5>
    2152:	2f 5f       	subi	r18, 0xFF	; 255
    2154:	3f 4f       	sbci	r19, 0xFF	; 255
    2156:	30 93 50 03 	sts	0x0350, r19	; 0x800350 <adcKeys+0x5>
    215a:	20 93 4f 03 	sts	0x034F, r18	; 0x80034f <adcKeys+0x4>
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    215e:	20 91 4f 03 	lds	r18, 0x034F	; 0x80034f <adcKeys+0x4>
    2162:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <adcKeys+0x5>
    2166:	2d 35       	cpi	r18, 0x5D	; 93
    2168:	31 05       	cpc	r19, r1
    216a:	69 f1       	breq	.+90     	; 0x21c6 <__vector_21+0x46a>
    216c:	e8 2f       	mov	r30, r24
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	ee 5a       	subi	r30, 0xAE	; 174
    2172:	fc 4f       	sbci	r31, 0xFC	; 252
    2174:	20 81       	ld	r18, Z
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    2176:	23 ff       	sbrs	r18, 3
    2178:	a6 cf       	rjmp	.-180    	; 0x20c6 <__vector_21+0x36a>
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    217e:	f9 01       	movw	r30, r18
    2180:	ee 0f       	add	r30, r30
    2182:	ff 1f       	adc	r31, r31
    2184:	e2 0f       	add	r30, r18
    2186:	f3 1f       	adc	r31, r19
    2188:	ee 0f       	add	r30, r30
    218a:	ff 1f       	adc	r31, r31
    218c:	e5 5b       	subi	r30, 0xB5	; 181
    218e:	fc 4f       	sbci	r31, 0xFC	; 252
    2190:	83 81       	ldd	r24, Z+3	; 0x03
    2192:	81 11       	cpse	r24, r1
    2194:	a3 cf       	rjmp	.-186    	; 0x20dc <__vector_21+0x380>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2196:	24 81       	ldd	r18, Z+4	; 0x04
    2198:	35 81       	ldd	r19, Z+5	; 0x05
    219a:	2b 34       	cpi	r18, 0x4B	; 75
    219c:	31 05       	cpc	r19, r1
    219e:	09 f0       	breq	.+2      	; 0x21a2 <__vector_21+0x446>
    21a0:	0a ce       	rjmp	.-1004   	; 0x1db6 <__vector_21+0x5a>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    21a6:	15 82       	std	Z+5, r1	; 0x05
    21a8:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    21aa:	8c 2f       	mov	r24, r28
    21ac:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <message_push>
    21b0:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <adcNr>
    21b4:	00 ce       	rjmp	.-1024   	; 0x1db6 <__vector_21+0x5a>
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    21b6:	22 e0       	ldi	r18, 0x02	; 2
    21b8:	30 e0       	ldi	r19, 0x00	; 0
					newKey = ADC_KEY4_FUNC;
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	b0 cf       	rjmp	.-160    	; 0x211e <__vector_21+0x3c2>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    21be:	24 e0       	ldi	r18, 0x04	; 4
    21c0:	30 e0       	ldi	r19, 0x00	; 0
					newKey = ADC_KEY3_FUNC;
    21c2:	85 e0       	ldi	r24, 0x05	; 5
    21c4:	ac cf       	rjmp	.-168    	; 0x211e <__vector_21+0x3c2>
				if (newKey != KEY_NOKEY) {
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    21c6:	08 2f       	mov	r16, r24
    21c8:	10 e0       	ldi	r17, 0x00	; 0
    21ca:	0e 5a       	subi	r16, 0xAE	; 174
    21cc:	1c 4f       	sbci	r17, 0xFC	; 252
    21ce:	f8 01       	movw	r30, r16
    21d0:	20 81       	ld	r18, Z
    21d2:	22 ff       	sbrs	r18, 2
    21d4:	d0 cf       	rjmp	.-96     	; 0x2176 <__vector_21+0x41a>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    21d6:	80 68       	ori	r24, 0x80	; 128
    21d8:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    21dc:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <adcNr>
    21e0:	29 2f       	mov	r18, r25
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	86 e0       	ldi	r24, 0x06	; 6
    21e6:	98 9f       	mul	r25, r24
    21e8:	f0 01       	movw	r30, r0
    21ea:	11 24       	eor	r1, r1
    21ec:	e5 5b       	subi	r30, 0xB5	; 181
    21ee:	fc 4f       	sbci	r31, 0xFC	; 252
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    21f4:	f8 01       	movw	r30, r16
    21f6:	80 81       	ld	r24, Z
    21f8:	83 ff       	sbrs	r24, 3
    21fa:	dd cd       	rjmp	.-1094   	; 0x1db6 <__vector_21+0x5a>
    21fc:	c0 cf       	rjmp	.-128    	; 0x217e <__vector_21+0x422>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
					newKey = ADC_KEY2_FUNC;
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	8c cf       	rjmp	.-232    	; 0x211e <__vector_21+0x3c2>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    2206:	25 e0       	ldi	r18, 0x05	; 5
    2208:	30 e0       	ldi	r19, 0x00	; 0
					newKey = ADC_KEY0_FUNC;
    220a:	86 e0       	ldi	r24, 0x06	; 6
    220c:	88 cf       	rjmp	.-240    	; 0x211e <__vector_21+0x3c2>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    220e:	21 e0       	ldi	r18, 0x01	; 1
    2210:	30 e0       	ldi	r19, 0x00	; 0
					newKey = ADC_KEY1_FUNC;
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	84 cf       	rjmp	.-248    	; 0x211e <__vector_21+0x3c2>

00002216 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2216:	8f ef       	ldi	r24, 0xFF	; 255
    2218:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    221a:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    221c:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    221e:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    2220:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    2222:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    2224:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    2226:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    222a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    222e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    2232:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    2236:	57 9a       	sbi	0x0a, 7	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2238:	5f 98       	cbi	0x0b, 7	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    223a:	26 9a       	sbi	0x04, 6	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    223c:	2e 98       	cbi	0x05, 6	; 5
    223e:	08 95       	ret

00002240 <lcd_init>:
    2240:	e1 e0       	ldi	r30, 0x01	; 1
    2242:	f1 e0       	ldi	r31, 0x01	; 1
    2244:	80 81       	ld	r24, Z
    2246:	80 61       	ori	r24, 0x10	; 16
    2248:	80 83       	st	Z, r24
    224a:	80 81       	ld	r24, Z
    224c:	88 60       	ori	r24, 0x08	; 8
    224e:	80 83       	st	Z, r24
    2250:	6b 9a       	sbi	0x0d, 3	; 13
    2252:	9d 9a       	sbi	0x13, 5	; 19
    2254:	80 81       	ld	r24, Z
    2256:	80 64       	ori	r24, 0x40	; 64
    2258:	80 83       	st	Z, r24
    225a:	80 81       	ld	r24, Z
    225c:	80 62       	ori	r24, 0x20	; 32
    225e:	80 83       	st	Z, r24
    2260:	2f ef       	ldi	r18, 0xFF	; 255
    2262:	81 ee       	ldi	r24, 0xE1	; 225
    2264:	94 e0       	ldi	r25, 0x04	; 4
    2266:	21 50       	subi	r18, 0x01	; 1
    2268:	80 40       	sbci	r24, 0x00	; 0
    226a:	90 40       	sbci	r25, 0x00	; 0
    226c:	e1 f7       	brne	.-8      	; 0x2266 <lcd_init+0x26>
    226e:	00 c0       	rjmp	.+0      	; 0x2270 <lcd_init+0x30>
    2270:	00 00       	nop
    2272:	e2 e0       	ldi	r30, 0x02	; 2
    2274:	f1 e0       	ldi	r31, 0x01	; 1
    2276:	80 81       	ld	r24, Z
    2278:	8f 7d       	andi	r24, 0xDF	; 223
    227a:	80 83       	st	Z, r24
    227c:	80 81       	ld	r24, Z
    227e:	8f 7b       	andi	r24, 0xBF	; 191
    2280:	80 83       	st	Z, r24
    2282:	80 81       	ld	r24, Z
    2284:	8f 7e       	andi	r24, 0xEF	; 239
    2286:	80 83       	st	Z, r24
    2288:	80 81       	ld	r24, Z
    228a:	87 7f       	andi	r24, 0xF7	; 247
    228c:	80 83       	st	Z, r24
    228e:	73 9a       	sbi	0x0e, 3	; 14
    2290:	a5 9a       	sbi	0x14, 5	; 20
    2292:	80 81       	ld	r24, Z
    2294:	80 64       	ori	r24, 0x40	; 64
    2296:	80 83       	st	Z, r24
    2298:	25 e0       	ldi	r18, 0x05	; 5
    229a:	2a 95       	dec	r18
    229c:	f1 f7       	brne	.-4      	; 0x229a <lcd_init+0x5a>
    229e:	00 00       	nop
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 7b       	andi	r24, 0xBF	; 191
    22a4:	80 83       	st	Z, r24
    22a6:	85 e0       	ldi	r24, 0x05	; 5
    22a8:	8a 95       	dec	r24
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <lcd_init+0x68>
    22ac:	00 00       	nop
    22ae:	8f e1       	ldi	r24, 0x1F	; 31
    22b0:	9e e4       	ldi	r25, 0x4E	; 78
    22b2:	01 97       	sbiw	r24, 0x01	; 1
    22b4:	f1 f7       	brne	.-4      	; 0x22b2 <lcd_init+0x72>
    22b6:	00 c0       	rjmp	.+0      	; 0x22b8 <lcd_init+0x78>
    22b8:	00 00       	nop
    22ba:	80 81       	ld	r24, Z
    22bc:	8f 7e       	andi	r24, 0xEF	; 239
    22be:	80 83       	st	Z, r24
    22c0:	80 81       	ld	r24, Z
    22c2:	87 7f       	andi	r24, 0xF7	; 247
    22c4:	80 83       	st	Z, r24
    22c6:	73 9a       	sbi	0x0e, 3	; 14
    22c8:	a5 9a       	sbi	0x14, 5	; 20
    22ca:	80 81       	ld	r24, Z
    22cc:	80 64       	ori	r24, 0x40	; 64
    22ce:	80 83       	st	Z, r24
    22d0:	95 e0       	ldi	r25, 0x05	; 5
    22d2:	9a 95       	dec	r25
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <lcd_init+0x92>
    22d6:	00 00       	nop
    22d8:	80 81       	ld	r24, Z
    22da:	8f 7b       	andi	r24, 0xBF	; 191
    22dc:	80 83       	st	Z, r24
    22de:	25 e0       	ldi	r18, 0x05	; 5
    22e0:	2a 95       	dec	r18
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <lcd_init+0xa0>
    22e4:	00 00       	nop
    22e6:	8f e1       	ldi	r24, 0x1F	; 31
    22e8:	9e e4       	ldi	r25, 0x4E	; 78
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <lcd_init+0xaa>
    22ee:	00 c0       	rjmp	.+0      	; 0x22f0 <lcd_init+0xb0>
    22f0:	00 00       	nop
    22f2:	80 81       	ld	r24, Z
    22f4:	8f 7e       	andi	r24, 0xEF	; 239
    22f6:	80 83       	st	Z, r24
    22f8:	80 81       	ld	r24, Z
    22fa:	87 7f       	andi	r24, 0xF7	; 247
    22fc:	80 83       	st	Z, r24
    22fe:	73 9a       	sbi	0x0e, 3	; 14
    2300:	a5 9a       	sbi	0x14, 5	; 20
    2302:	80 81       	ld	r24, Z
    2304:	80 64       	ori	r24, 0x40	; 64
    2306:	80 83       	st	Z, r24
    2308:	95 e0       	ldi	r25, 0x05	; 5
    230a:	9a 95       	dec	r25
    230c:	f1 f7       	brne	.-4      	; 0x230a <lcd_init+0xca>
    230e:	00 00       	nop
    2310:	80 81       	ld	r24, Z
    2312:	8f 7b       	andi	r24, 0xBF	; 191
    2314:	80 83       	st	Z, r24
    2316:	25 e0       	ldi	r18, 0x05	; 5
    2318:	2a 95       	dec	r18
    231a:	f1 f7       	brne	.-4      	; 0x2318 <lcd_init+0xd8>
    231c:	00 00       	nop
    231e:	8f e1       	ldi	r24, 0x1F	; 31
    2320:	9e e4       	ldi	r25, 0x4E	; 78
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <lcd_init+0xe2>
    2326:	00 c0       	rjmp	.+0      	; 0x2328 <lcd_init+0xe8>
    2328:	00 00       	nop
    232a:	80 81       	ld	r24, Z
    232c:	8f 7e       	andi	r24, 0xEF	; 239
    232e:	80 83       	st	Z, r24
    2330:	80 81       	ld	r24, Z
    2332:	87 7f       	andi	r24, 0xF7	; 247
    2334:	80 83       	st	Z, r24
    2336:	73 9a       	sbi	0x0e, 3	; 14
    2338:	a5 98       	cbi	0x14, 5	; 20
    233a:	80 81       	ld	r24, Z
    233c:	80 64       	ori	r24, 0x40	; 64
    233e:	80 83       	st	Z, r24
    2340:	95 e0       	ldi	r25, 0x05	; 5
    2342:	9a 95       	dec	r25
    2344:	f1 f7       	brne	.-4      	; 0x2342 <lcd_init+0x102>
    2346:	00 00       	nop
    2348:	80 81       	ld	r24, Z
    234a:	8f 7b       	andi	r24, 0xBF	; 191
    234c:	80 83       	st	Z, r24
    234e:	25 e0       	ldi	r18, 0x05	; 5
    2350:	2a 95       	dec	r18
    2352:	f1 f7       	brne	.-4      	; 0x2350 <lcd_init+0x110>
    2354:	00 00       	nop
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <lcd_init+0x11a>
    235e:	00 c0       	rjmp	.+0      	; 0x2360 <lcd_init+0x120>
    2360:	00 00       	nop
    2362:	80 81       	ld	r24, Z
    2364:	8f 7d       	andi	r24, 0xDF	; 223
    2366:	80 83       	st	Z, r24
    2368:	80 81       	ld	r24, Z
    236a:	8f 7b       	andi	r24, 0xBF	; 191
    236c:	80 83       	st	Z, r24
    236e:	80 81       	ld	r24, Z
    2370:	8f 7e       	andi	r24, 0xEF	; 239
    2372:	80 83       	st	Z, r24
    2374:	80 81       	ld	r24, Z
    2376:	87 7f       	andi	r24, 0xF7	; 247
    2378:	80 83       	st	Z, r24
    237a:	73 9a       	sbi	0x0e, 3	; 14
    237c:	a5 98       	cbi	0x14, 5	; 20
    237e:	80 81       	ld	r24, Z
    2380:	80 64       	ori	r24, 0x40	; 64
    2382:	80 83       	st	Z, r24
    2384:	95 e0       	ldi	r25, 0x05	; 5
    2386:	9a 95       	dec	r25
    2388:	f1 f7       	brne	.-4      	; 0x2386 <lcd_init+0x146>
    238a:	00 00       	nop
    238c:	80 81       	ld	r24, Z
    238e:	8f 7b       	andi	r24, 0xBF	; 191
    2390:	80 83       	st	Z, r24
    2392:	25 e0       	ldi	r18, 0x05	; 5
    2394:	2a 95       	dec	r18
    2396:	f1 f7       	brne	.-4      	; 0x2394 <lcd_init+0x154>
    2398:	00 00       	nop
    239a:	80 81       	ld	r24, Z
    239c:	80 61       	ori	r24, 0x10	; 16
    239e:	80 83       	st	Z, r24
    23a0:	80 81       	ld	r24, Z
    23a2:	87 7f       	andi	r24, 0xF7	; 247
    23a4:	80 83       	st	Z, r24
    23a6:	73 98       	cbi	0x0e, 3	; 14
    23a8:	a5 98       	cbi	0x14, 5	; 20
    23aa:	80 81       	ld	r24, Z
    23ac:	80 64       	ori	r24, 0x40	; 64
    23ae:	80 83       	st	Z, r24
    23b0:	85 e0       	ldi	r24, 0x05	; 5
    23b2:	8a 95       	dec	r24
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <lcd_init+0x172>
    23b6:	00 00       	nop
    23b8:	80 81       	ld	r24, Z
    23ba:	8f 7b       	andi	r24, 0xBF	; 191
    23bc:	80 83       	st	Z, r24
    23be:	95 e0       	ldi	r25, 0x05	; 5
    23c0:	9a 95       	dec	r25
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <lcd_init+0x180>
    23c4:	00 00       	nop
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <lcd_init+0x18a>
    23ce:	00 c0       	rjmp	.+0      	; 0x23d0 <lcd_init+0x190>
    23d0:	00 00       	nop
    23d2:	80 81       	ld	r24, Z
    23d4:	8f 7d       	andi	r24, 0xDF	; 223
    23d6:	80 83       	st	Z, r24
    23d8:	80 81       	ld	r24, Z
    23da:	8f 7b       	andi	r24, 0xBF	; 191
    23dc:	80 83       	st	Z, r24
    23de:	80 81       	ld	r24, Z
    23e0:	8f 7e       	andi	r24, 0xEF	; 239
    23e2:	80 83       	st	Z, r24
    23e4:	80 81       	ld	r24, Z
    23e6:	87 7f       	andi	r24, 0xF7	; 247
    23e8:	80 83       	st	Z, r24
    23ea:	73 98       	cbi	0x0e, 3	; 14
    23ec:	a5 98       	cbi	0x14, 5	; 20
    23ee:	80 81       	ld	r24, Z
    23f0:	80 64       	ori	r24, 0x40	; 64
    23f2:	80 83       	st	Z, r24
    23f4:	95 e0       	ldi	r25, 0x05	; 5
    23f6:	9a 95       	dec	r25
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <lcd_init+0x1b6>
    23fa:	00 00       	nop
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 7b       	andi	r24, 0xBF	; 191
    2400:	80 83       	st	Z, r24
    2402:	25 e0       	ldi	r18, 0x05	; 5
    2404:	2a 95       	dec	r18
    2406:	f1 f7       	brne	.-4      	; 0x2404 <lcd_init+0x1c4>
    2408:	00 00       	nop
    240a:	80 81       	ld	r24, Z
    240c:	80 61       	ori	r24, 0x10	; 16
    240e:	80 83       	st	Z, r24
    2410:	80 81       	ld	r24, Z
    2412:	87 7f       	andi	r24, 0xF7	; 247
    2414:	80 83       	st	Z, r24
    2416:	73 98       	cbi	0x0e, 3	; 14
    2418:	a5 98       	cbi	0x14, 5	; 20
    241a:	80 81       	ld	r24, Z
    241c:	80 64       	ori	r24, 0x40	; 64
    241e:	80 83       	st	Z, r24
    2420:	85 e0       	ldi	r24, 0x05	; 5
    2422:	8a 95       	dec	r24
    2424:	f1 f7       	brne	.-4      	; 0x2422 <lcd_init+0x1e2>
    2426:	00 00       	nop
    2428:	80 81       	ld	r24, Z
    242a:	8f 7b       	andi	r24, 0xBF	; 191
    242c:	80 83       	st	Z, r24
    242e:	95 e0       	ldi	r25, 0x05	; 5
    2430:	9a 95       	dec	r25
    2432:	f1 f7       	brne	.-4      	; 0x2430 <lcd_init+0x1f0>
    2434:	00 00       	nop
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <lcd_init+0x1fa>
    243e:	00 c0       	rjmp	.+0      	; 0x2440 <lcd_init+0x200>
    2440:	00 00       	nop
    2442:	80 81       	ld	r24, Z
    2444:	8f 7d       	andi	r24, 0xDF	; 223
    2446:	80 83       	st	Z, r24
    2448:	80 81       	ld	r24, Z
    244a:	8f 7b       	andi	r24, 0xBF	; 191
    244c:	80 83       	st	Z, r24
    244e:	80 81       	ld	r24, Z
    2450:	8f 7e       	andi	r24, 0xEF	; 239
    2452:	80 83       	st	Z, r24
    2454:	80 81       	ld	r24, Z
    2456:	87 7f       	andi	r24, 0xF7	; 247
    2458:	80 83       	st	Z, r24
    245a:	73 98       	cbi	0x0e, 3	; 14
    245c:	a5 98       	cbi	0x14, 5	; 20
    245e:	80 81       	ld	r24, Z
    2460:	80 64       	ori	r24, 0x40	; 64
    2462:	80 83       	st	Z, r24
    2464:	95 e0       	ldi	r25, 0x05	; 5
    2466:	9a 95       	dec	r25
    2468:	f1 f7       	brne	.-4      	; 0x2466 <lcd_init+0x226>
    246a:	00 00       	nop
    246c:	80 81       	ld	r24, Z
    246e:	8f 7b       	andi	r24, 0xBF	; 191
    2470:	80 83       	st	Z, r24
    2472:	25 e0       	ldi	r18, 0x05	; 5
    2474:	2a 95       	dec	r18
    2476:	f1 f7       	brne	.-4      	; 0x2474 <lcd_init+0x234>
    2478:	00 00       	nop
    247a:	80 81       	ld	r24, Z
    247c:	8f 7e       	andi	r24, 0xEF	; 239
    247e:	80 83       	st	Z, r24
    2480:	80 81       	ld	r24, Z
    2482:	87 7f       	andi	r24, 0xF7	; 247
    2484:	80 83       	st	Z, r24
    2486:	73 98       	cbi	0x0e, 3	; 14
    2488:	a5 9a       	sbi	0x14, 5	; 20
    248a:	80 81       	ld	r24, Z
    248c:	80 64       	ori	r24, 0x40	; 64
    248e:	80 83       	st	Z, r24
    2490:	85 e0       	ldi	r24, 0x05	; 5
    2492:	8a 95       	dec	r24
    2494:	f1 f7       	brne	.-4      	; 0x2492 <lcd_init+0x252>
    2496:	00 00       	nop
    2498:	80 81       	ld	r24, Z
    249a:	8f 7b       	andi	r24, 0xBF	; 191
    249c:	80 83       	st	Z, r24
    249e:	95 e0       	ldi	r25, 0x05	; 5
    24a0:	9a 95       	dec	r25
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <lcd_init+0x260>
    24a4:	00 00       	nop
    24a6:	8f e0       	ldi	r24, 0x0F	; 15
    24a8:	97 e2       	ldi	r25, 0x27	; 39
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <lcd_init+0x26a>
    24ae:	00 c0       	rjmp	.+0      	; 0x24b0 <lcd_init+0x270>
    24b0:	00 00       	nop
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 7d       	andi	r24, 0xDF	; 223
    24b6:	80 83       	st	Z, r24
    24b8:	80 81       	ld	r24, Z
    24ba:	8f 7b       	andi	r24, 0xBF	; 191
    24bc:	80 83       	st	Z, r24
    24be:	80 81       	ld	r24, Z
    24c0:	8f 7e       	andi	r24, 0xEF	; 239
    24c2:	80 83       	st	Z, r24
    24c4:	80 81       	ld	r24, Z
    24c6:	87 7f       	andi	r24, 0xF7	; 247
    24c8:	80 83       	st	Z, r24
    24ca:	73 98       	cbi	0x0e, 3	; 14
    24cc:	a5 98       	cbi	0x14, 5	; 20
    24ce:	80 81       	ld	r24, Z
    24d0:	80 64       	ori	r24, 0x40	; 64
    24d2:	80 83       	st	Z, r24
    24d4:	95 e0       	ldi	r25, 0x05	; 5
    24d6:	9a 95       	dec	r25
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <lcd_init+0x296>
    24da:	00 00       	nop
    24dc:	80 81       	ld	r24, Z
    24de:	8f 7b       	andi	r24, 0xBF	; 191
    24e0:	80 83       	st	Z, r24
    24e2:	25 e0       	ldi	r18, 0x05	; 5
    24e4:	2a 95       	dec	r18
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <lcd_init+0x2a4>
    24e8:	00 00       	nop
    24ea:	80 81       	ld	r24, Z
    24ec:	8f 7e       	andi	r24, 0xEF	; 239
    24ee:	80 83       	st	Z, r24
    24f0:	80 81       	ld	r24, Z
    24f2:	88 60       	ori	r24, 0x08	; 8
    24f4:	80 83       	st	Z, r24
    24f6:	73 9a       	sbi	0x0e, 3	; 14
    24f8:	a5 98       	cbi	0x14, 5	; 20
    24fa:	80 81       	ld	r24, Z
    24fc:	80 64       	ori	r24, 0x40	; 64
    24fe:	80 83       	st	Z, r24
    2500:	85 e0       	ldi	r24, 0x05	; 5
    2502:	8a 95       	dec	r24
    2504:	f1 f7       	brne	.-4      	; 0x2502 <lcd_init+0x2c2>
    2506:	00 00       	nop
    2508:	80 81       	ld	r24, Z
    250a:	8f 7b       	andi	r24, 0xBF	; 191
    250c:	80 83       	st	Z, r24
    250e:	95 e0       	ldi	r25, 0x05	; 5
    2510:	9a 95       	dec	r25
    2512:	f1 f7       	brne	.-4      	; 0x2510 <lcd_init+0x2d0>
    2514:	00 00       	nop
    2516:	8f ef       	ldi	r24, 0xFF	; 255
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <lcd_init+0x2da>
    251e:	00 c0       	rjmp	.+0      	; 0x2520 <lcd_init+0x2e0>
    2520:	00 00       	nop
    2522:	80 81       	ld	r24, Z
    2524:	8f 7d       	andi	r24, 0xDF	; 223
    2526:	80 83       	st	Z, r24
    2528:	80 81       	ld	r24, Z
    252a:	8f 7b       	andi	r24, 0xBF	; 191
    252c:	80 83       	st	Z, r24
    252e:	80 81       	ld	r24, Z
    2530:	8f 7e       	andi	r24, 0xEF	; 239
    2532:	80 83       	st	Z, r24
    2534:	80 81       	ld	r24, Z
    2536:	87 7f       	andi	r24, 0xF7	; 247
    2538:	80 83       	st	Z, r24
    253a:	73 98       	cbi	0x0e, 3	; 14
    253c:	a5 98       	cbi	0x14, 5	; 20
    253e:	80 81       	ld	r24, Z
    2540:	80 64       	ori	r24, 0x40	; 64
    2542:	80 83       	st	Z, r24
    2544:	95 e0       	ldi	r25, 0x05	; 5
    2546:	9a 95       	dec	r25
    2548:	f1 f7       	brne	.-4      	; 0x2546 <lcd_init+0x306>
    254a:	00 00       	nop
    254c:	80 81       	ld	r24, Z
    254e:	8f 7b       	andi	r24, 0xBF	; 191
    2550:	80 83       	st	Z, r24
    2552:	25 e0       	ldi	r18, 0x05	; 5
    2554:	2a 95       	dec	r18
    2556:	f1 f7       	brne	.-4      	; 0x2554 <lcd_init+0x314>
    2558:	00 00       	nop
    255a:	80 81       	ld	r24, Z
    255c:	80 61       	ori	r24, 0x10	; 16
    255e:	80 83       	st	Z, r24
    2560:	80 81       	ld	r24, Z
    2562:	88 60       	ori	r24, 0x08	; 8
    2564:	80 83       	st	Z, r24
    2566:	73 98       	cbi	0x0e, 3	; 14
    2568:	a5 98       	cbi	0x14, 5	; 20
    256a:	80 81       	ld	r24, Z
    256c:	80 64       	ori	r24, 0x40	; 64
    256e:	80 83       	st	Z, r24
    2570:	85 e0       	ldi	r24, 0x05	; 5
    2572:	8a 95       	dec	r24
    2574:	f1 f7       	brne	.-4      	; 0x2572 <lcd_init+0x332>
    2576:	00 00       	nop
    2578:	80 81       	ld	r24, Z
    257a:	8f 7b       	andi	r24, 0xBF	; 191
    257c:	80 83       	st	Z, r24
    257e:	95 e0       	ldi	r25, 0x05	; 5
    2580:	9a 95       	dec	r25
    2582:	f1 f7       	brne	.-4      	; 0x2580 <lcd_init+0x340>
    2584:	00 00       	nop
    2586:	8f ef       	ldi	r24, 0xFF	; 255
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <lcd_init+0x34a>
    258e:	00 c0       	rjmp	.+0      	; 0x2590 <lcd_init+0x350>
    2590:	00 00       	nop
    2592:	08 95       	ret

00002594 <lcd_write_character>:
    2594:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2598:	90 62       	ori	r25, 0x20	; 32
    259a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    259e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25a2:	9f 7b       	andi	r25, 0xBF	; 191
    25a4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25a8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25ac:	87 fd       	sbrc	r24, 7
    25ae:	65 c0       	rjmp	.+202    	; 0x267a <lcd_write_character+0xe6>
    25b0:	9f 7e       	andi	r25, 0xEF	; 239
    25b2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25b6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25ba:	86 ff       	sbrs	r24, 6
    25bc:	4b c0       	rjmp	.+150    	; 0x2654 <lcd_write_character+0xc0>
    25be:	98 60       	ori	r25, 0x08	; 8
    25c0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25c4:	85 ff       	sbrs	r24, 5
    25c6:	4b c0       	rjmp	.+150    	; 0x265e <lcd_write_character+0xca>
    25c8:	73 9a       	sbi	0x0e, 3	; 14
    25ca:	84 fd       	sbrc	r24, 4
    25cc:	4b c0       	rjmp	.+150    	; 0x2664 <lcd_write_character+0xd0>
    25ce:	a5 98       	cbi	0x14, 5	; 20
    25d0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25d4:	90 64       	ori	r25, 0x40	; 64
    25d6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25da:	95 e0       	ldi	r25, 0x05	; 5
    25dc:	9a 95       	dec	r25
    25de:	f1 f7       	brne	.-4      	; 0x25dc <lcd_write_character+0x48>
    25e0:	00 00       	nop
    25e2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25e6:	9f 7b       	andi	r25, 0xBF	; 191
    25e8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    25ec:	95 e0       	ldi	r25, 0x05	; 5
    25ee:	9a 95       	dec	r25
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <lcd_write_character+0x5a>
    25f2:	00 00       	nop
    25f4:	98 2f       	mov	r25, r24
    25f6:	92 95       	swap	r25
    25f8:	90 7f       	andi	r25, 0xF0	; 240
    25fa:	83 fd       	sbrc	r24, 3
    25fc:	42 c0       	rjmp	.+132    	; 0x2682 <lcd_write_character+0xee>
    25fe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2602:	8f 7e       	andi	r24, 0xEF	; 239
    2604:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2608:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    260c:	96 ff       	sbrs	r25, 6
    260e:	31 c0       	rjmp	.+98     	; 0x2672 <lcd_write_character+0xde>
    2610:	88 60       	ori	r24, 0x08	; 8
    2612:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2616:	95 ff       	sbrs	r25, 5
    2618:	27 c0       	rjmp	.+78     	; 0x2668 <lcd_write_character+0xd4>
    261a:	73 9a       	sbi	0x0e, 3	; 14
    261c:	94 fd       	sbrc	r25, 4
    261e:	27 c0       	rjmp	.+78     	; 0x266e <lcd_write_character+0xda>
    2620:	a5 98       	cbi	0x14, 5	; 20
    2622:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2626:	80 64       	ori	r24, 0x40	; 64
    2628:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    262c:	85 e0       	ldi	r24, 0x05	; 5
    262e:	8a 95       	dec	r24
    2630:	f1 f7       	brne	.-4      	; 0x262e <lcd_write_character+0x9a>
    2632:	00 00       	nop
    2634:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2638:	8f 7b       	andi	r24, 0xBF	; 191
    263a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    263e:	95 e0       	ldi	r25, 0x05	; 5
    2640:	9a 95       	dec	r25
    2642:	f1 f7       	brne	.-4      	; 0x2640 <lcd_write_character+0xac>
    2644:	00 00       	nop
    2646:	8f ef       	ldi	r24, 0xFF	; 255
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <lcd_write_character+0xb6>
    264e:	00 c0       	rjmp	.+0      	; 0x2650 <lcd_write_character+0xbc>
    2650:	00 00       	nop
    2652:	08 95       	ret
    2654:	97 7f       	andi	r25, 0xF7	; 247
    2656:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    265a:	85 fd       	sbrc	r24, 5
    265c:	b5 cf       	rjmp	.-150    	; 0x25c8 <lcd_write_character+0x34>
    265e:	73 98       	cbi	0x0e, 3	; 14
    2660:	84 ff       	sbrs	r24, 4
    2662:	b5 cf       	rjmp	.-150    	; 0x25ce <lcd_write_character+0x3a>
    2664:	a5 9a       	sbi	0x14, 5	; 20
    2666:	b4 cf       	rjmp	.-152    	; 0x25d0 <lcd_write_character+0x3c>
    2668:	73 98       	cbi	0x0e, 3	; 14
    266a:	94 ff       	sbrs	r25, 4
    266c:	d9 cf       	rjmp	.-78     	; 0x2620 <lcd_write_character+0x8c>
    266e:	a5 9a       	sbi	0x14, 5	; 20
    2670:	d8 cf       	rjmp	.-80     	; 0x2622 <lcd_write_character+0x8e>
    2672:	87 7f       	andi	r24, 0xF7	; 247
    2674:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2678:	ce cf       	rjmp	.-100    	; 0x2616 <lcd_write_character+0x82>
    267a:	90 61       	ori	r25, 0x10	; 16
    267c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2680:	9a cf       	rjmp	.-204    	; 0x25b6 <lcd_write_character+0x22>
    2682:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2686:	80 61       	ori	r24, 0x10	; 16
    2688:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    268c:	bd cf       	rjmp	.-134    	; 0x2608 <lcd_write_character+0x74>

0000268e <lcd_write_command>:
    268e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2692:	9f 7d       	andi	r25, 0xDF	; 223
    2694:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2698:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    269c:	9f 7b       	andi	r25, 0xBF	; 191
    269e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26a2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26a6:	87 fd       	sbrc	r24, 7
    26a8:	6c c0       	rjmp	.+216    	; 0x2782 <lcd_write_command+0xf4>
    26aa:	9f 7e       	andi	r25, 0xEF	; 239
    26ac:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26b0:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26b4:	86 ff       	sbrs	r24, 6
    26b6:	4e c0       	rjmp	.+156    	; 0x2754 <lcd_write_command+0xc6>
    26b8:	98 60       	ori	r25, 0x08	; 8
    26ba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26be:	85 ff       	sbrs	r24, 5
    26c0:	4e c0       	rjmp	.+156    	; 0x275e <lcd_write_command+0xd0>
    26c2:	73 9a       	sbi	0x0e, 3	; 14
    26c4:	84 fd       	sbrc	r24, 4
    26c6:	4e c0       	rjmp	.+156    	; 0x2764 <lcd_write_command+0xd6>
    26c8:	a5 98       	cbi	0x14, 5	; 20
    26ca:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26ce:	90 64       	ori	r25, 0x40	; 64
    26d0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26d4:	95 e0       	ldi	r25, 0x05	; 5
    26d6:	9a 95       	dec	r25
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <lcd_write_command+0x48>
    26da:	00 00       	nop
    26dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26e0:	9f 7b       	andi	r25, 0xBF	; 191
    26e2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26e6:	95 e0       	ldi	r25, 0x05	; 5
    26e8:	9a 95       	dec	r25
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <lcd_write_command+0x5a>
    26ec:	00 00       	nop
    26ee:	98 2f       	mov	r25, r24
    26f0:	92 95       	swap	r25
    26f2:	90 7f       	andi	r25, 0xF0	; 240
    26f4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    26f8:	83 fd       	sbrc	r24, 3
    26fa:	3f c0       	rjmp	.+126    	; 0x277a <lcd_write_command+0xec>
    26fc:	2f 7e       	andi	r18, 0xEF	; 239
    26fe:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2702:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2706:	96 ff       	sbrs	r25, 6
    2708:	34 c0       	rjmp	.+104    	; 0x2772 <lcd_write_command+0xe4>
    270a:	28 60       	ori	r18, 0x08	; 8
    270c:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2710:	95 ff       	sbrs	r25, 5
    2712:	2a c0       	rjmp	.+84     	; 0x2768 <lcd_write_command+0xda>
    2714:	73 9a       	sbi	0x0e, 3	; 14
    2716:	94 fd       	sbrc	r25, 4
    2718:	2a c0       	rjmp	.+84     	; 0x276e <lcd_write_command+0xe0>
    271a:	a5 98       	cbi	0x14, 5	; 20
    271c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2720:	90 64       	ori	r25, 0x40	; 64
    2722:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2726:	95 e0       	ldi	r25, 0x05	; 5
    2728:	9a 95       	dec	r25
    272a:	f1 f7       	brne	.-4      	; 0x2728 <lcd_write_command+0x9a>
    272c:	00 00       	nop
    272e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2732:	9f 7b       	andi	r25, 0xBF	; 191
    2734:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2738:	95 e0       	ldi	r25, 0x05	; 5
    273a:	9a 95       	dec	r25
    273c:	f1 f7       	brne	.-4      	; 0x273a <lcd_write_command+0xac>
    273e:	00 00       	nop
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	10 f1       	brcs	.+68     	; 0x278a <lcd_write_command+0xfc>
    2746:	8f ef       	ldi	r24, 0xFF	; 255
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <lcd_write_command+0xbc>
    274e:	00 c0       	rjmp	.+0      	; 0x2750 <lcd_write_command+0xc2>
    2750:	00 00       	nop
    2752:	08 95       	ret
    2754:	97 7f       	andi	r25, 0xF7	; 247
    2756:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    275a:	85 fd       	sbrc	r24, 5
    275c:	b2 cf       	rjmp	.-156    	; 0x26c2 <lcd_write_command+0x34>
    275e:	73 98       	cbi	0x0e, 3	; 14
    2760:	84 ff       	sbrs	r24, 4
    2762:	b2 cf       	rjmp	.-156    	; 0x26c8 <lcd_write_command+0x3a>
    2764:	a5 9a       	sbi	0x14, 5	; 20
    2766:	b1 cf       	rjmp	.-158    	; 0x26ca <lcd_write_command+0x3c>
    2768:	73 98       	cbi	0x0e, 3	; 14
    276a:	94 ff       	sbrs	r25, 4
    276c:	d6 cf       	rjmp	.-84     	; 0x271a <lcd_write_command+0x8c>
    276e:	a5 9a       	sbi	0x14, 5	; 20
    2770:	d5 cf       	rjmp	.-86     	; 0x271c <lcd_write_command+0x8e>
    2772:	27 7f       	andi	r18, 0xF7	; 247
    2774:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2778:	cb cf       	rjmp	.-106    	; 0x2710 <lcd_write_command+0x82>
    277a:	20 61       	ori	r18, 0x10	; 16
    277c:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2780:	c0 cf       	rjmp	.-128    	; 0x2702 <lcd_write_command+0x74>
    2782:	90 61       	ori	r25, 0x10	; 16
    2784:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2788:	93 cf       	rjmp	.-218    	; 0x26b0 <lcd_write_command+0x22>
    278a:	8f e0       	ldi	r24, 0x0F	; 15
    278c:	97 e2       	ldi	r25, 0x27	; 39
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <lcd_write_command+0x100>
    2792:	00 c0       	rjmp	.+0      	; 0x2794 <lcd_write_command+0x106>
    2794:	00 00       	nop
    2796:	08 95       	ret

00002798 <lcd_goto>:
    2798:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <lcd_cursorPos>
    279c:	90 e8       	ldi	r25, 0x80	; 128
    279e:	98 0f       	add	r25, r24
    27a0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27a4:	2f 7d       	andi	r18, 0xDF	; 223
    27a6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27aa:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27ae:	2f 7b       	andi	r18, 0xBF	; 191
    27b0:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27b8:	97 fd       	sbrc	r25, 7
    27ba:	6e c0       	rjmp	.+220    	; 0x2898 <lcd_goto+0x100>
    27bc:	2f 7e       	andi	r18, 0xEF	; 239
    27be:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27c2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27c6:	96 ff       	sbrs	r25, 6
    27c8:	4e c0       	rjmp	.+156    	; 0x2866 <lcd_goto+0xce>
    27ca:	28 60       	ori	r18, 0x08	; 8
    27cc:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27d0:	95 ff       	sbrs	r25, 5
    27d2:	4e c0       	rjmp	.+156    	; 0x2870 <lcd_goto+0xd8>
    27d4:	73 9a       	sbi	0x0e, 3	; 14
    27d6:	94 fd       	sbrc	r25, 4
    27d8:	4e c0       	rjmp	.+156    	; 0x2876 <lcd_goto+0xde>
    27da:	a5 98       	cbi	0x14, 5	; 20
    27dc:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27e0:	20 64       	ori	r18, 0x40	; 64
    27e2:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27e6:	25 e0       	ldi	r18, 0x05	; 5
    27e8:	2a 95       	dec	r18
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <lcd_goto+0x50>
    27ec:	00 00       	nop
    27ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27f2:	2f 7b       	andi	r18, 0xBF	; 191
    27f4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    27f8:	25 e0       	ldi	r18, 0x05	; 5
    27fa:	2a 95       	dec	r18
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <lcd_goto+0x62>
    27fe:	00 00       	nop
    2800:	29 2f       	mov	r18, r25
    2802:	22 95       	swap	r18
    2804:	20 7f       	andi	r18, 0xF0	; 240
    2806:	93 fd       	sbrc	r25, 3
    2808:	41 c0       	rjmp	.+130    	; 0x288c <lcd_goto+0xf4>
    280a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    280e:	9f 7e       	andi	r25, 0xEF	; 239
    2810:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2814:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2818:	26 ff       	sbrs	r18, 6
    281a:	34 c0       	rjmp	.+104    	; 0x2884 <lcd_goto+0xec>
    281c:	98 60       	ori	r25, 0x08	; 8
    281e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2822:	25 ff       	sbrs	r18, 5
    2824:	2a c0       	rjmp	.+84     	; 0x287a <lcd_goto+0xe2>
    2826:	73 9a       	sbi	0x0e, 3	; 14
    2828:	24 fd       	sbrc	r18, 4
    282a:	2a c0       	rjmp	.+84     	; 0x2880 <lcd_goto+0xe8>
    282c:	a5 98       	cbi	0x14, 5	; 20
    282e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2832:	90 64       	ori	r25, 0x40	; 64
    2834:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2838:	95 e0       	ldi	r25, 0x05	; 5
    283a:	9a 95       	dec	r25
    283c:	f1 f7       	brne	.-4      	; 0x283a <lcd_goto+0xa2>
    283e:	00 00       	nop
    2840:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2844:	9f 7b       	andi	r25, 0xBF	; 191
    2846:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    284a:	25 e0       	ldi	r18, 0x05	; 5
    284c:	2a 95       	dec	r18
    284e:	f1 f7       	brne	.-4      	; 0x284c <lcd_goto+0xb4>
    2850:	00 00       	nop
    2852:	81 58       	subi	r24, 0x81	; 129
    2854:	82 30       	cpi	r24, 0x02	; 2
    2856:	20 f1       	brcs	.+72     	; 0x28a0 <lcd_goto+0x108>
    2858:	8f ef       	ldi	r24, 0xFF	; 255
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <lcd_goto+0xc4>
    2860:	00 c0       	rjmp	.+0      	; 0x2862 <lcd_goto+0xca>
    2862:	00 00       	nop
    2864:	08 95       	ret
    2866:	27 7f       	andi	r18, 0xF7	; 247
    2868:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    286c:	95 fd       	sbrc	r25, 5
    286e:	b2 cf       	rjmp	.-156    	; 0x27d4 <lcd_goto+0x3c>
    2870:	73 98       	cbi	0x0e, 3	; 14
    2872:	94 ff       	sbrs	r25, 4
    2874:	b2 cf       	rjmp	.-156    	; 0x27da <lcd_goto+0x42>
    2876:	a5 9a       	sbi	0x14, 5	; 20
    2878:	b1 cf       	rjmp	.-158    	; 0x27dc <lcd_goto+0x44>
    287a:	73 98       	cbi	0x0e, 3	; 14
    287c:	24 ff       	sbrs	r18, 4
    287e:	d6 cf       	rjmp	.-84     	; 0x282c <lcd_goto+0x94>
    2880:	a5 9a       	sbi	0x14, 5	; 20
    2882:	d5 cf       	rjmp	.-86     	; 0x282e <lcd_goto+0x96>
    2884:	97 7f       	andi	r25, 0xF7	; 247
    2886:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    288a:	cb cf       	rjmp	.-106    	; 0x2822 <lcd_goto+0x8a>
    288c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2890:	90 61       	ori	r25, 0x10	; 16
    2892:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2896:	be cf       	rjmp	.-132    	; 0x2814 <lcd_goto+0x7c>
    2898:	20 61       	ori	r18, 0x10	; 16
    289a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    289e:	91 cf       	rjmp	.-222    	; 0x27c2 <lcd_goto+0x2a>
    28a0:	8f e0       	ldi	r24, 0x0F	; 15
    28a2:	97 e2       	ldi	r25, 0x27	; 39
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <lcd_goto+0x10c>
    28a8:	00 c0       	rjmp	.+0      	; 0x28aa <lcd_goto+0x112>
    28aa:	00 00       	nop
    28ac:	08 95       	ret

000028ae <lcd_clrscr>:
    28ae:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <lcd_cursorPos>
    28b2:	e2 e0       	ldi	r30, 0x02	; 2
    28b4:	f1 e0       	ldi	r31, 0x01	; 1
    28b6:	80 81       	ld	r24, Z
    28b8:	8f 7d       	andi	r24, 0xDF	; 223
    28ba:	80 83       	st	Z, r24
    28bc:	80 81       	ld	r24, Z
    28be:	8f 7b       	andi	r24, 0xBF	; 191
    28c0:	80 83       	st	Z, r24
    28c2:	80 81       	ld	r24, Z
    28c4:	8f 7e       	andi	r24, 0xEF	; 239
    28c6:	80 83       	st	Z, r24
    28c8:	80 81       	ld	r24, Z
    28ca:	87 7f       	andi	r24, 0xF7	; 247
    28cc:	80 83       	st	Z, r24
    28ce:	73 98       	cbi	0x0e, 3	; 14
    28d0:	a5 98       	cbi	0x14, 5	; 20
    28d2:	80 81       	ld	r24, Z
    28d4:	80 64       	ori	r24, 0x40	; 64
    28d6:	80 83       	st	Z, r24
    28d8:	85 e0       	ldi	r24, 0x05	; 5
    28da:	8a 95       	dec	r24
    28dc:	f1 f7       	brne	.-4      	; 0x28da <lcd_clrscr+0x2c>
    28de:	00 00       	nop
    28e0:	80 81       	ld	r24, Z
    28e2:	8f 7b       	andi	r24, 0xBF	; 191
    28e4:	80 83       	st	Z, r24
    28e6:	95 e0       	ldi	r25, 0x05	; 5
    28e8:	9a 95       	dec	r25
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <lcd_clrscr+0x3a>
    28ec:	00 00       	nop
    28ee:	80 81       	ld	r24, Z
    28f0:	8f 7e       	andi	r24, 0xEF	; 239
    28f2:	80 83       	st	Z, r24
    28f4:	80 81       	ld	r24, Z
    28f6:	87 7f       	andi	r24, 0xF7	; 247
    28f8:	80 83       	st	Z, r24
    28fa:	73 98       	cbi	0x0e, 3	; 14
    28fc:	a5 9a       	sbi	0x14, 5	; 20
    28fe:	80 81       	ld	r24, Z
    2900:	80 64       	ori	r24, 0x40	; 64
    2902:	80 83       	st	Z, r24
    2904:	85 e0       	ldi	r24, 0x05	; 5
    2906:	8a 95       	dec	r24
    2908:	f1 f7       	brne	.-4      	; 0x2906 <lcd_clrscr+0x58>
    290a:	00 00       	nop
    290c:	80 81       	ld	r24, Z
    290e:	8f 7b       	andi	r24, 0xBF	; 191
    2910:	80 83       	st	Z, r24
    2912:	95 e0       	ldi	r25, 0x05	; 5
    2914:	9a 95       	dec	r25
    2916:	f1 f7       	brne	.-4      	; 0x2914 <lcd_clrscr+0x66>
    2918:	00 00       	nop
    291a:	8f e0       	ldi	r24, 0x0F	; 15
    291c:	97 e2       	ldi	r25, 0x27	; 39
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <lcd_clrscr+0x70>
    2922:	00 c0       	rjmp	.+0      	; 0x2924 <lcd_clrscr+0x76>
    2924:	00 00       	nop
    2926:	08 95       	ret

00002928 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
	lcd_cursorPos =  (lcd_cursorPos+1) &0x3F;
    2928:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <lcd_cursorPos>
    292c:	9f 5f       	subi	r25, 0xFF	; 255
    292e:	9f 73       	andi	r25, 0x3F	; 63
    2930:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <lcd_cursorPos>
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character(uint8_t data)
{
    LCD_RS_PORT |= (1<<LCD_RS_BIT);                 // select the Data Register (RS high)
    2934:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2938:	90 62       	ori	r25, 0x20	; 32
    293a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // make sure E is initially low
    293e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2942:	9f 7b       	andi	r25, 0xBF	; 191
    2944:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
    2948:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
    294c:	87 fd       	sbrc	r24, 7
    294e:	65 c0       	rjmp	.+202    	; 0x2a1a <lcd_putc+0xf2>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
    2950:	9f 7e       	andi	r25, 0xEF	; 239
    2952:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2956:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
    295a:	86 ff       	sbrs	r24, 6
    295c:	4b c0       	rjmp	.+150    	; 0x29f4 <lcd_putc+0xcc>
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    295e:	98 60       	ori	r25, 0x08	; 8
    2960:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
    2964:	85 ff       	sbrs	r24, 5
    2966:	4b c0       	rjmp	.+150    	; 0x29fe <lcd_putc+0xd6>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
    2968:	73 9a       	sbi	0x0e, 3	; 14
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
	}
    if (data & 1<<4) {
    296a:	84 fd       	sbrc	r24, 4
    296c:	4b c0       	rjmp	.+150    	; 0x2a04 <lcd_putc+0xdc>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
	} else {
		LCD_D4_PORT &= ~(1<<LCD_D4_BIT);
    296e:	a5 98       	cbi	0x14, 5	; 20
	}
	// write the data
    LCD_E_PORT |= (1<<LCD_E_BIT);                   // Enable pin high
    2970:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2974:	90 64       	ori	r25, 0x40	; 64
    2976:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    297a:	95 e0       	ldi	r25, 0x05	; 5
    297c:	9a 95       	dec	r25
    297e:	f1 f7       	brne	.-4      	; 0x297c <lcd_putc+0x54>
    2980:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // Enable pin low
    2982:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2986:	9f 7b       	andi	r25, 0xBF	; 191
    2988:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    298c:	95 e0       	ldi	r25, 0x05	; 5
    298e:	9a 95       	dec	r25
    2990:	f1 f7       	brne	.-4      	; 0x298e <lcd_putc+0x66>
    2992:	00 00       	nop
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
    2994:	98 2f       	mov	r25, r24
    2996:	92 95       	swap	r25
    2998:	90 7f       	andi	r25, 0xF0	; 240
    299a:	83 fd       	sbrc	r24, 3
    299c:	42 c0       	rjmp	.+132    	; 0x2a22 <lcd_putc+0xfa>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
    299e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    29a2:	8f 7e       	andi	r24, 0xEF	; 239
    29a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    29a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
    29ac:	96 ff       	sbrs	r25, 6
    29ae:	31 c0       	rjmp	.+98     	; 0x2a12 <lcd_putc+0xea>
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    29b0:	88 60       	ori	r24, 0x08	; 8
    29b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
    29b6:	95 ff       	sbrs	r25, 5
    29b8:	27 c0       	rjmp	.+78     	; 0x2a08 <lcd_putc+0xe0>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
    29ba:	73 9a       	sbi	0x0e, 3	; 14
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
	}
    if (data & 1<<4) {
    29bc:	94 fd       	sbrc	r25, 4
    29be:	27 c0       	rjmp	.+78     	; 0x2a0e <lcd_putc+0xe6>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
	} else {
		LCD_D4_PORT &= ~(1<<LCD_D4_BIT);
    29c0:	a5 98       	cbi	0x14, 5	; 20
	}
	// write the data
    LCD_E_PORT |= (1<<LCD_E_BIT);                   // Enable pin high
    29c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    29c6:	80 64       	ori	r24, 0x40	; 64
    29c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    29cc:	85 e0       	ldi	r24, 0x05	; 5
    29ce:	8a 95       	dec	r24
    29d0:	f1 f7       	brne	.-4      	; 0x29ce <lcd_putc+0xa6>
    29d2:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // Enable pin low
    29d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    29d8:	8f 7b       	andi	r24, 0xBF	; 191
    29da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    29de:	95 e0       	ldi	r25, 0x05	; 5
    29e0:	9a 95       	dec	r25
    29e2:	f1 f7       	brne	.-4      	; 0x29e0 <lcd_putc+0xb8>
    29e4:	00 00       	nop
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <lcd_putc+0xc2>
    29ee:	00 c0       	rjmp	.+0      	; 0x29f0 <lcd_putc+0xc8>
    29f0:	00 00       	nop
    29f2:	08 95       	ret
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
    29f4:	97 7f       	andi	r25, 0xF7	; 247
    29f6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<5) {
    29fa:	85 fd       	sbrc	r24, 5
    29fc:	b5 cf       	rjmp	.-150    	; 0x2968 <lcd_putc+0x40>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
    29fe:	73 98       	cbi	0x0e, 3	; 14
	}
    if (data & 1<<4) {
    2a00:	84 ff       	sbrs	r24, 4
    2a02:	b5 cf       	rjmp	.-150    	; 0x296e <lcd_putc+0x46>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
    2a04:	a5 9a       	sbi	0x14, 5	; 20
    2a06:	b4 cf       	rjmp	.-152    	; 0x2970 <lcd_putc+0x48>
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
    2a08:	73 98       	cbi	0x0e, 3	; 14
	}
    if (data & 1<<4) {
    2a0a:	94 ff       	sbrs	r25, 4
    2a0c:	d9 cf       	rjmp	.-78     	; 0x29c0 <lcd_putc+0x98>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
    2a0e:	a5 9a       	sbi	0x14, 5	; 20
    2a10:	d8 cf       	rjmp	.-80     	; 0x29c2 <lcd_putc+0x9a>
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
    2a12:	87 7f       	andi	r24, 0xF7	; 247
    2a14:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a18:	ce cf       	rjmp	.-100    	; 0x29b6 <lcd_putc+0x8e>
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
    2a1a:	90 61       	ori	r25, 0x10	; 16
    2a1c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a20:	9a cf       	rjmp	.-204    	; 0x2956 <lcd_putc+0x2e>
    2a22:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a26:	80 61       	ori	r24, 0x10	; 16
    2a28:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a2c:	bd cf       	rjmp	.-134    	; 0x29a8 <lcd_putc+0x80>

00002a2e <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
	if (s != NULL){
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <lcd_puts+0x6>
    2a32:	8c c0       	rjmp	.+280    	; 0x2b4c <lcd_puts+0x11e>
		register char c;

		while ((c=*s++))
    2a34:	fc 01       	movw	r30, r24
    2a36:	31 96       	adiw	r30, 0x01	; 1
    2a38:	dc 01       	movw	r26, r24
    2a3a:	8c 91       	ld	r24, X
    2a3c:	81 11       	cpse	r24, r1
    2a3e:	4e c0       	rjmp	.+156    	; 0x2adc <lcd_puts+0xae>
    2a40:	85 c0       	rjmp	.+266    	; 0x2b4c <lcd_puts+0x11e>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2a42:	98 60       	ori	r25, 0x08	; 8
    2a44:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
    2a48:	85 ff       	sbrs	r24, 5
    2a4a:	68 c0       	rjmp	.+208    	; 0x2b1c <lcd_puts+0xee>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
    2a4c:	73 9a       	sbi	0x0e, 3	; 14
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
	}
    if (data & 1<<4) {
    2a4e:	84 fd       	sbrc	r24, 4
    2a50:	68 c0       	rjmp	.+208    	; 0x2b22 <lcd_puts+0xf4>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
	} else {
		LCD_D4_PORT &= ~(1<<LCD_D4_BIT);
    2a52:	a5 98       	cbi	0x14, 5	; 20
	}
	// write the data
    LCD_E_PORT |= (1<<LCD_E_BIT);                   // Enable pin high
    2a54:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a58:	90 64       	ori	r25, 0x40	; 64
    2a5a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a5e:	b5 e0       	ldi	r27, 0x05	; 5
    2a60:	ba 95       	dec	r27
    2a62:	f1 f7       	brne	.-4      	; 0x2a60 <lcd_puts+0x32>
    2a64:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // Enable pin low
    2a66:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a6a:	9f 7b       	andi	r25, 0xBF	; 191
    2a6c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a70:	95 e0       	ldi	r25, 0x05	; 5
    2a72:	9a 95       	dec	r25
    2a74:	f1 f7       	brne	.-4      	; 0x2a72 <lcd_puts+0x44>
    2a76:	00 00       	nop
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
    2a78:	98 2f       	mov	r25, r24
    2a7a:	92 95       	swap	r25
    2a7c:	90 7f       	andi	r25, 0xF0	; 240
    2a7e:	83 fd       	sbrc	r24, 3
    2a80:	5b c0       	rjmp	.+182    	; 0x2b38 <lcd_puts+0x10a>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
    2a82:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2a86:	8f 7e       	andi	r24, 0xEF	; 239
    2a88:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2a8c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
    2a90:	96 ff       	sbrs	r25, 6
    2a92:	4e c0       	rjmp	.+156    	; 0x2b30 <lcd_puts+0x102>
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2a94:	88 60       	ori	r24, 0x08	; 8
    2a96:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
    2a9a:	95 ff       	sbrs	r25, 5
    2a9c:	44 c0       	rjmp	.+136    	; 0x2b26 <lcd_puts+0xf8>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
    2a9e:	73 9a       	sbi	0x0e, 3	; 14
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
	}
    if (data & 1<<4) {
    2aa0:	94 fd       	sbrc	r25, 4
    2aa2:	44 c0       	rjmp	.+136    	; 0x2b2c <lcd_puts+0xfe>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
	} else {
		LCD_D4_PORT &= ~(1<<LCD_D4_BIT);
    2aa4:	a5 98       	cbi	0x14, 5	; 20
	}
	// write the data
    LCD_E_PORT |= (1<<LCD_E_BIT);                   // Enable pin high
    2aa6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2aaa:	80 64       	ori	r24, 0x40	; 64
    2aac:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2ab0:	a5 e0       	ldi	r26, 0x05	; 5
    2ab2:	aa 95       	dec	r26
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <lcd_puts+0x84>
    2ab6:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // Enable pin low
    2ab8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2abc:	8f 7b       	andi	r24, 0xBF	; 191
    2abe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2ac2:	b5 e0       	ldi	r27, 0x05	; 5
    2ac4:	ba 95       	dec	r27
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <lcd_puts+0x96>
    2ac8:	00 00       	nop
    2aca:	8f ef       	ldi	r24, 0xFF	; 255
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <lcd_puts+0xa0>
    2ad2:	00 c0       	rjmp	.+0      	; 0x2ad4 <lcd_puts+0xa6>
    2ad4:	00 00       	nop
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    2ad6:	81 91       	ld	r24, Z+
    2ad8:	88 23       	and	r24, r24
    2ada:	c1 f1       	breq	.+112    	; 0x2b4c <lcd_puts+0x11e>
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
	lcd_cursorPos =  (lcd_cursorPos+1) &0x3F;
    2adc:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <lcd_cursorPos>
    2ae0:	9f 5f       	subi	r25, 0xFF	; 255
    2ae2:	9f 73       	andi	r25, 0x3F	; 63
    2ae4:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <lcd_cursorPos>
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character(uint8_t data)
{
    LCD_RS_PORT |= (1<<LCD_RS_BIT);                 // select the Data Register (RS high)
    2ae8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2aec:	90 62       	ori	r25, 0x20	; 32
    2aee:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // make sure E is initially low
    2af2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2af6:	9f 7b       	andi	r25, 0xBF	; 191
    2af8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
    2afc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
    2b00:	87 fd       	sbrc	r24, 7
    2b02:	20 c0       	rjmp	.+64     	; 0x2b44 <lcd_puts+0x116>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
    2b04:	9f 7e       	andi	r25, 0xEF	; 239
    2b06:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2b0a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
    2b0e:	86 fd       	sbrc	r24, 6
    2b10:	98 cf       	rjmp	.-208    	; 0x2a42 <lcd_puts+0x14>
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
    2b12:	97 7f       	andi	r25, 0xF7	; 247
    2b14:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<5) {
    2b18:	85 fd       	sbrc	r24, 5
    2b1a:	98 cf       	rjmp	.-208    	; 0x2a4c <lcd_puts+0x1e>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
    2b1c:	73 98       	cbi	0x0e, 3	; 14
	}
    if (data & 1<<4) {
    2b1e:	84 ff       	sbrs	r24, 4
    2b20:	98 cf       	rjmp	.-208    	; 0x2a52 <lcd_puts+0x24>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
    2b22:	a5 9a       	sbi	0x14, 5	; 20
    2b24:	97 cf       	rjmp	.-210    	; 0x2a54 <lcd_puts+0x26>
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
    2b26:	73 98       	cbi	0x0e, 3	; 14
	}
    if (data & 1<<4) {
    2b28:	94 ff       	sbrs	r25, 4
    2b2a:	bc cf       	rjmp	.-136    	; 0x2aa4 <lcd_puts+0x76>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
    2b2c:	a5 9a       	sbi	0x14, 5	; 20
    2b2e:	bb cf       	rjmp	.-138    	; 0x2aa6 <lcd_puts+0x78>
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
    2b30:	87 7f       	andi	r24, 0xF7	; 247
    2b32:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b36:	b1 cf       	rjmp	.-158    	; 0x2a9a <lcd_puts+0x6c>
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
    2b38:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b3c:	80 61       	ori	r24, 0x10	; 16
    2b3e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b42:	a4 cf       	rjmp	.-184    	; 0x2a8c <lcd_puts+0x5e>
    2b44:	90 61       	ori	r25, 0x10	; 16
    2b46:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b4a:	df cf       	rjmp	.-66     	; 0x2b0a <lcd_puts+0xdc>
    2b4c:	08 95       	ret

00002b4e <lcd_puts_P>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	09 f4       	brne	.+2      	; 0x2b54 <lcd_puts_P+0x6>
    2b52:	90 c0       	rjmp	.+288    	; 0x2c74 <lcd_puts_P+0x126>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2b54:	9c 01       	movw	r18, r24
    2b56:	2f 5f       	subi	r18, 0xFF	; 255
    2b58:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5a:	fc 01       	movw	r30, r24
    2b5c:	84 91       	lpm	r24, Z
    2b5e:	88 23       	and	r24, r24
    2b60:	09 f4       	brne	.+2      	; 0x2b64 <lcd_puts_P+0x16>
    2b62:	88 c0       	rjmp	.+272    	; 0x2c74 <lcd_puts_P+0x126>
    2b64:	f9 01       	movw	r30, r18
    2b66:	4e c0       	rjmp	.+156    	; 0x2c04 <lcd_puts_P+0xb6>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2b68:	98 60       	ori	r25, 0x08	; 8
    2b6a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
    2b6e:	85 ff       	sbrs	r24, 5
    2b70:	69 c0       	rjmp	.+210    	; 0x2c44 <lcd_puts_P+0xf6>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
    2b72:	73 9a       	sbi	0x0e, 3	; 14
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
	}
    if (data & 1<<4) {
    2b74:	84 fd       	sbrc	r24, 4
    2b76:	69 c0       	rjmp	.+210    	; 0x2c4a <lcd_puts_P+0xfc>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
	} else {
		LCD_D4_PORT &= ~(1<<LCD_D4_BIT);
    2b78:	a5 98       	cbi	0x14, 5	; 20
	}
	// write the data
    LCD_E_PORT |= (1<<LCD_E_BIT);                   // Enable pin high
    2b7a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b7e:	90 64       	ori	r25, 0x40	; 64
    2b80:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b84:	95 e0       	ldi	r25, 0x05	; 5
    2b86:	9a 95       	dec	r25
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <lcd_puts_P+0x38>
    2b8a:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // Enable pin low
    2b8c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b90:	9f 7b       	andi	r25, 0xBF	; 191
    2b92:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2b96:	95 e0       	ldi	r25, 0x05	; 5
    2b98:	9a 95       	dec	r25
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <lcd_puts_P+0x4a>
    2b9c:	00 00       	nop
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
    2b9e:	98 2f       	mov	r25, r24
    2ba0:	92 95       	swap	r25
    2ba2:	90 7f       	andi	r25, 0xF0	; 240
    2ba4:	83 fd       	sbrc	r24, 3
    2ba6:	5c c0       	rjmp	.+184    	; 0x2c60 <lcd_puts_P+0x112>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
    2ba8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2bac:	8f 7e       	andi	r24, 0xEF	; 239
    2bae:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2bb2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
    2bb6:	96 ff       	sbrs	r25, 6
    2bb8:	4f c0       	rjmp	.+158    	; 0x2c58 <lcd_puts_P+0x10a>
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2bba:	88 60       	ori	r24, 0x08	; 8
    2bbc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
    2bc0:	95 ff       	sbrs	r25, 5
    2bc2:	45 c0       	rjmp	.+138    	; 0x2c4e <lcd_puts_P+0x100>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
    2bc4:	73 9a       	sbi	0x0e, 3	; 14
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
	}
    if (data & 1<<4) {
    2bc6:	94 fd       	sbrc	r25, 4
    2bc8:	45 c0       	rjmp	.+138    	; 0x2c54 <lcd_puts_P+0x106>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
	} else {
		LCD_D4_PORT &= ~(1<<LCD_D4_BIT);
    2bca:	a5 98       	cbi	0x14, 5	; 20
	}
	// write the data
    LCD_E_PORT |= (1<<LCD_E_BIT);                   // Enable pin high
    2bcc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2bd6:	85 e0       	ldi	r24, 0x05	; 5
    2bd8:	8a 95       	dec	r24
    2bda:	f1 f7       	brne	.-4      	; 0x2bd8 <lcd_puts_P+0x8a>
    2bdc:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // Enable pin low
    2bde:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2be2:	8f 7b       	andi	r24, 0xBF	; 191
    2be4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2be8:	95 e0       	ldi	r25, 0x05	; 5
    2bea:	9a 95       	dec	r25
    2bec:	f1 f7       	brne	.-4      	; 0x2bea <lcd_puts_P+0x9c>
    2bee:	00 00       	nop
    2bf0:	8f ef       	ldi	r24, 0xFF	; 255
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <lcd_puts_P+0xa6>
    2bf8:	00 c0       	rjmp	.+0      	; 0x2bfa <lcd_puts_P+0xac>
    2bfa:	00 00       	nop
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2bfc:	84 91       	lpm	r24, Z
    2bfe:	31 96       	adiw	r30, 0x01	; 1
    2c00:	88 23       	and	r24, r24
    2c02:	c1 f1       	breq	.+112    	; 0x2c74 <lcd_puts_P+0x126>
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
	lcd_cursorPos =  (lcd_cursorPos+1) &0x3F;
    2c04:	90 91 5a 03 	lds	r25, 0x035A	; 0x80035a <lcd_cursorPos>
    2c08:	9f 5f       	subi	r25, 0xFF	; 255
    2c0a:	9f 73       	andi	r25, 0x3F	; 63
    2c0c:	90 93 5a 03 	sts	0x035A, r25	; 0x80035a <lcd_cursorPos>
  Notes:    does not deal with RW (busy flag is not implemented)
*/

void lcd_write_character(uint8_t data)
{
    LCD_RS_PORT |= (1<<LCD_RS_BIT);                 // select the Data Register (RS high)
    2c10:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2c14:	90 62       	ori	r25, 0x20	; 32
    2c16:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    LCD_E_PORT &= ~(1<<LCD_E_BIT);                  // make sure E is initially low
    2c1a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2c1e:	9f 7b       	andi	r25, 0xBF	; 191
    2c20:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
    2c24:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
  Exit:     no parameters
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
    2c28:	87 fd       	sbrc	r24, 7
    2c2a:	20 c0       	rjmp	.+64     	; 0x2c6c <lcd_puts_P+0x11e>
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
    2c2c:	9f 7e       	andi	r25, 0xEF	; 239
    2c2e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
    2c32:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
	} else {
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
    2c36:	86 fd       	sbrc	r24, 6
    2c38:	97 cf       	rjmp	.-210    	; 0x2b68 <lcd_puts_P+0x1a>
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
    2c3a:	97 7f       	andi	r25, 0xF7	; 247
    2c3c:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	}
    if (data & 1<<5) {
    2c40:	85 fd       	sbrc	r24, 5
    2c42:	97 cf       	rjmp	.-210    	; 0x2b72 <lcd_puts_P+0x24>
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
    2c44:	73 98       	cbi	0x0e, 3	; 14
	}
    if (data & 1<<4) {
    2c46:	84 ff       	sbrs	r24, 4
    2c48:	97 cf       	rjmp	.-210    	; 0x2b78 <lcd_puts_P+0x2a>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
    2c4a:	a5 9a       	sbi	0x14, 5	; 20
    2c4c:	96 cf       	rjmp	.-212    	; 0x2b7a <lcd_puts_P+0x2c>
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
	}
    if (data & 1<<5) {
		LCD_D5_PORT |= (1<<LCD_D5_BIT);
	} else {
		LCD_D5_PORT &= ~(1<<LCD_D5_BIT);
    2c4e:	73 98       	cbi	0x0e, 3	; 14
	}
    if (data & 1<<4) {
    2c50:	94 ff       	sbrs	r25, 4
    2c52:	bb cf       	rjmp	.-138    	; 0x2bca <lcd_puts_P+0x7c>
		LCD_D4_PORT |= (1<<LCD_D4_BIT);
    2c54:	a5 9a       	sbi	0x14, 5	; 20
    2c56:	ba cf       	rjmp	.-140    	; 0x2bcc <lcd_puts_P+0x7e>
	    LCD_D7_PORT &= ~(1<<LCD_D7_BIT);                        // assume that data is '0'
	}
    if (data & 1<<6) {
		LCD_D6_PORT |= (1<<LCD_D6_BIT);
	} else {
		LCD_D6_PORT &= ~(1<<LCD_D6_BIT);                        // repeat for each data bit
    2c58:	87 7f       	andi	r24, 0xF7	; 247
    2c5a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2c5e:	b0 cf       	rjmp	.-160    	; 0x2bc0 <lcd_puts_P+0x72>
  Notes:    use either time delays or the busy flag
*/
void lcd_write_nibble(uint8_t data)
{
    if (data & 1<<7) {
		LCD_D7_PORT |= (1<<LCD_D7_BIT);     // make data = '1' if necessary
    2c60:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2c64:	80 61       	ori	r24, 0x10	; 16
    2c66:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2c6a:	a3 cf       	rjmp	.-186    	; 0x2bb2 <lcd_puts_P+0x64>
    2c6c:	90 61       	ori	r25, 0x10	; 16
    2c6e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
    2c72:	df cf       	rjmp	.-66     	; 0x2c32 <lcd_puts_P+0xe4>
    2c74:	08 95       	ret

00002c76 <init_log>:
		while (nrOfMEssage-- > 0) {
			pLog = log_getLog(nrOfMEssage);
			if ((pLog != NULL) && (pLog->logStatus != LOG_STATUS_READ) && (pLog->logType == LOG_TYPE_ERROR)) {
				// this is an unread error
				log_unreadErrors = TRUE;
				break;
    2c76:	84 e8       	ldi	r24, 0x84	; 132
    2c78:	93 e0       	ldi	r25, 0x03	; 3
    2c7a:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <pLogStart+0x1>
    2c7e:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <pLogStart>
    2c82:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <pLogEnd+0x1>
    2c86:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <pLogEnd>
    2c8a:	08 95       	ret

00002c8c <getErrorText>:
    2c8c:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <pLogEnd>
    2c90:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <pLogEnd+0x1>
    2c94:	40 91 16 05 	lds	r20, 0x0516	; 0x800516 <pLogStart>
    2c98:	50 91 17 05 	lds	r21, 0x0517	; 0x800517 <pLogStart+0x1>
    2c9c:	24 17       	cp	r18, r20
    2c9e:	35 07       	cpc	r19, r21
    2ca0:	10 f4       	brcc	.+4      	; 0x2ca6 <getErrorText+0x1a>
    2ca2:	20 57       	subi	r18, 0x70	; 112
    2ca4:	3e 4f       	sbci	r19, 0xFE	; 254
    2ca6:	24 1b       	sub	r18, r20
    2ca8:	35 0b       	sbc	r19, r21
    2caa:	35 95       	asr	r19
    2cac:	27 95       	ror	r18
    2cae:	9d ec       	ldi	r25, 0xCD	; 205
    2cb0:	29 9f       	mul	r18, r25
    2cb2:	20 2d       	mov	r18, r0
    2cb4:	11 24       	eor	r1, r1
    2cb6:	82 17       	cp	r24, r18
    2cb8:	e8 f4       	brcc	.+58     	; 0x2cf4 <getErrorText+0x68>
    2cba:	2a e0       	ldi	r18, 0x0A	; 10
    2cbc:	82 9f       	mul	r24, r18
    2cbe:	c0 01       	movw	r24, r0
    2cc0:	11 24       	eor	r1, r1
    2cc2:	fa 01       	movw	r30, r20
    2cc4:	e8 0f       	add	r30, r24
    2cc6:	f9 1f       	adc	r31, r25
    2cc8:	25 e0       	ldi	r18, 0x05	; 5
    2cca:	ea 30       	cpi	r30, 0x0A	; 10
    2ccc:	f2 07       	cpc	r31, r18
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <getErrorText+0x46>
    2cd0:	98 f5       	brcc	.+102    	; 0x2d38 <getErrorText+0xac>
    2cd2:	30 97       	sbiw	r30, 0x00	; 0
    2cd4:	79 f0       	breq	.+30     	; 0x2cf4 <getErrorText+0x68>
    2cd6:	86 81       	ldd	r24, Z+6	; 0x06
    2cd8:	97 81       	ldd	r25, Z+7	; 0x07
    2cda:	88 23       	and	r24, r24
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <getErrorText+0x54>
    2cde:	43 c0       	rjmp	.+134    	; 0x2d66 <getErrorText+0xda>
    2ce0:	81 30       	cpi	r24, 0x01	; 1
    2ce2:	59 f0       	breq	.+22     	; 0x2cfa <getErrorText+0x6e>
    2ce4:	82 30       	cpi	r24, 0x02	; 2
    2ce6:	01 f1       	breq	.+64     	; 0x2d28 <getErrorText+0x9c>
    2ce8:	83 30       	cpi	r24, 0x03	; 3
    2cea:	61 f1       	breq	.+88     	; 0x2d44 <getErrorText+0xb8>
    2cec:	84 30       	cpi	r24, 0x04	; 4
    2cee:	89 f1       	breq	.+98     	; 0x2d52 <getErrorText+0xc6>
    2cf0:	85 30       	cpi	r24, 0x05	; 5
    2cf2:	a1 f1       	breq	.+104    	; 0x2d5c <getErrorText+0xd0>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	08 95       	ret
    2cfa:	99 23       	and	r25, r25
    2cfc:	09 f4       	brne	.+2      	; 0x2d00 <getErrorText+0x74>
    2cfe:	4e c0       	rjmp	.+156    	; 0x2d9c <getErrorText+0x110>
    2d00:	91 30       	cpi	r25, 0x01	; 1
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <getErrorText+0x7a>
    2d04:	4e c0       	rjmp	.+156    	; 0x2da2 <getErrorText+0x116>
    2d06:	92 30       	cpi	r25, 0x02	; 2
    2d08:	09 f4       	brne	.+2      	; 0x2d0c <getErrorText+0x80>
    2d0a:	4e c0       	rjmp	.+156    	; 0x2da8 <getErrorText+0x11c>
    2d0c:	93 30       	cpi	r25, 0x03	; 3
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <getErrorText+0x86>
    2d10:	4e c0       	rjmp	.+156    	; 0x2dae <getErrorText+0x122>
    2d12:	94 30       	cpi	r25, 0x04	; 4
    2d14:	e9 f1       	breq	.+122    	; 0x2d90 <getErrorText+0x104>
    2d16:	95 30       	cpi	r25, 0x05	; 5
    2d18:	f1 f1       	breq	.+124    	; 0x2d96 <getErrorText+0x10a>
    2d1a:	96 30       	cpi	r25, 0x06	; 6
    2d1c:	b1 f1       	breq	.+108    	; 0x2d8a <getErrorText+0xfe>
    2d1e:	97 30       	cpi	r25, 0x07	; 7
    2d20:	49 f7       	brne	.-46     	; 0x2cf4 <getErrorText+0x68>
    2d22:	88 e0       	ldi	r24, 0x08	; 8
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	23 c0       	rjmp	.+70     	; 0x2d6e <getErrorText+0xe2>
    2d28:	99 23       	and	r25, r25
    2d2a:	09 f4       	brne	.+2      	; 0x2d2e <getErrorText+0xa2>
    2d2c:	46 c0       	rjmp	.+140    	; 0x2dba <getErrorText+0x12e>
    2d2e:	91 30       	cpi	r25, 0x01	; 1
    2d30:	09 f7       	brne	.-62     	; 0x2cf4 <getErrorText+0x68>
    2d32:	8a e0       	ldi	r24, 0x0A	; 10
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	1b c0       	rjmp	.+54     	; 0x2d6e <getErrorText+0xe2>
    2d38:	80 59       	subi	r24, 0x90	; 144
    2d3a:	91 40       	sbci	r25, 0x01	; 1
    2d3c:	fa 01       	movw	r30, r20
    2d3e:	e8 0f       	add	r30, r24
    2d40:	f9 1f       	adc	r31, r25
    2d42:	c7 cf       	rjmp	.-114    	; 0x2cd2 <getErrorText+0x46>
    2d44:	99 23       	and	r25, r25
    2d46:	b1 f1       	breq	.+108    	; 0x2db4 <getErrorText+0x128>
    2d48:	91 30       	cpi	r25, 0x01	; 1
    2d4a:	a1 f6       	brne	.-88     	; 0x2cf4 <getErrorText+0x68>
    2d4c:	8c e0       	ldi	r24, 0x0C	; 12
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	0e c0       	rjmp	.+28     	; 0x2d6e <getErrorText+0xe2>
    2d52:	91 11       	cpse	r25, r1
    2d54:	cf cf       	rjmp	.-98     	; 0x2cf4 <getErrorText+0x68>
    2d56:	8d e0       	ldi	r24, 0x0D	; 13
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	09 c0       	rjmp	.+18     	; 0x2d6e <getErrorText+0xe2>
    2d5c:	91 11       	cpse	r25, r1
    2d5e:	ca cf       	rjmp	.-108    	; 0x2cf4 <getErrorText+0x68>
    2d60:	8e e0       	ldi	r24, 0x0E	; 14
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	04 c0       	rjmp	.+8      	; 0x2d6e <getErrorText+0xe2>
    2d66:	91 11       	cpse	r25, r1
    2d68:	c5 cf       	rjmp	.-118    	; 0x2cf4 <getErrorText+0x68>
    2d6a:	80 e0       	ldi	r24, 0x00	; 0
    2d6c:	90 e0       	ldi	r25, 0x00	; 0
    2d6e:	88 0f       	add	r24, r24
    2d70:	99 1f       	adc	r25, r25
    2d72:	9c 01       	movw	r18, r24
    2d74:	22 0f       	add	r18, r18
    2d76:	33 1f       	adc	r19, r19
    2d78:	22 0f       	add	r18, r18
    2d7a:	33 1f       	adc	r19, r19
    2d7c:	22 0f       	add	r18, r18
    2d7e:	33 1f       	adc	r19, r19
    2d80:	82 0f       	add	r24, r18
    2d82:	93 1f       	adc	r25, r19
    2d84:	88 59       	subi	r24, 0x98	; 152
    2d86:	9e 4f       	sbci	r25, 0xFE	; 254
    2d88:	08 95       	ret
    2d8a:	87 e0       	ldi	r24, 0x07	; 7
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	ef cf       	rjmp	.-34     	; 0x2d6e <getErrorText+0xe2>
    2d90:	85 e0       	ldi	r24, 0x05	; 5
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	ec cf       	rjmp	.-40     	; 0x2d6e <getErrorText+0xe2>
    2d96:	86 e0       	ldi	r24, 0x06	; 6
    2d98:	90 e0       	ldi	r25, 0x00	; 0
    2d9a:	e9 cf       	rjmp	.-46     	; 0x2d6e <getErrorText+0xe2>
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	e6 cf       	rjmp	.-52     	; 0x2d6e <getErrorText+0xe2>
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	e3 cf       	rjmp	.-58     	; 0x2d6e <getErrorText+0xe2>
    2da8:	83 e0       	ldi	r24, 0x03	; 3
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	e0 cf       	rjmp	.-64     	; 0x2d6e <getErrorText+0xe2>
    2dae:	84 e0       	ldi	r24, 0x04	; 4
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	dd cf       	rjmp	.-70     	; 0x2d6e <getErrorText+0xe2>
    2db4:	8b e0       	ldi	r24, 0x0B	; 11
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	da cf       	rjmp	.-76     	; 0x2d6e <getErrorText+0xe2>
    2dba:	89 e0       	ldi	r24, 0x09	; 9
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	d7 cf       	rjmp	.-82     	; 0x2d6e <getErrorText+0xe2>

00002dc0 <log_putError>:
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	e0 91 14 05 	lds	r30, 0x0514	; 0x800514 <pLogEnd>
    2dc8:	f0 91 15 05 	lds	r31, 0x0515	; 0x800515 <pLogEnd+0x1>
    2dcc:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <time_Uptime>
    2dd0:	90 83       	st	Z, r25
    2dd2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <time_Uptime+0x1>
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <time_Uptime+0x2>
    2ddc:	92 83       	std	Z+2, r25	; 0x02
    2dde:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <time_Uptime+0x3>
    2de2:	93 83       	std	Z+3, r25	; 0x03
    2de4:	95 e4       	ldi	r25, 0x45	; 69
    2de6:	95 83       	std	Z+5, r25	; 0x05
    2de8:	86 83       	std	Z+6, r24	; 0x06
    2dea:	67 83       	std	Z+7, r22	; 0x07
    2dec:	51 87       	std	Z+9, r21	; 0x09
    2dee:	40 87       	std	Z+8, r20	; 0x08
    2df0:	80 e8       	ldi	r24, 0x80	; 128
    2df2:	84 83       	std	Z+4, r24	; 0x04
    2df4:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <serusb_Active>
    2df8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dfa:	e1 f1       	breq	.+120    	; 0x2e74 <log_putError+0xb4>
    2dfc:	3a 96       	adiw	r30, 0x0a	; 10
    2dfe:	85 e0       	ldi	r24, 0x05	; 5
    2e00:	ea 30       	cpi	r30, 0x0A	; 10
    2e02:	f8 07       	cpc	r31, r24
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <log_putError+0x48>
    2e06:	88 f4       	brcc	.+34     	; 0x2e2a <log_putError+0x6a>
    2e08:	f0 93 15 05 	sts	0x0515, r31	; 0x800515 <pLogEnd+0x1>
    2e0c:	e0 93 14 05 	sts	0x0514, r30	; 0x800514 <pLogEnd>
    2e10:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <pLogStart>
    2e14:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <pLogStart+0x1>
    2e18:	8e 17       	cp	r24, r30
    2e1a:	9f 07       	cpc	r25, r31
    2e1c:	a1 f0       	breq	.+40     	; 0x2e46 <log_putError+0x86>
    2e1e:	8f ef       	ldi	r24, 0xFF	; 255
    2e20:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <log_unreadErrors>
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	08 95       	ret
    2e2a:	84 e8       	ldi	r24, 0x84	; 132
    2e2c:	93 e0       	ldi	r25, 0x03	; 3
    2e2e:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <pLogEnd+0x1>
    2e32:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <pLogEnd>
    2e36:	fc 01       	movw	r30, r24
    2e38:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <pLogStart>
    2e3c:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <pLogStart+0x1>
    2e40:	8e 17       	cp	r24, r30
    2e42:	9f 07       	cpc	r25, r31
    2e44:	61 f7       	brne	.-40     	; 0x2e1e <log_putError+0x5e>
    2e46:	3a 96       	adiw	r30, 0x0a	; 10
    2e48:	85 e0       	ldi	r24, 0x05	; 5
    2e4a:	ea 30       	cpi	r30, 0x0A	; 10
    2e4c:	f8 07       	cpc	r31, r24
    2e4e:	69 f0       	breq	.+26     	; 0x2e6a <log_putError+0xaa>
    2e50:	60 f0       	brcs	.+24     	; 0x2e6a <log_putError+0xaa>
    2e52:	84 e8       	ldi	r24, 0x84	; 132
    2e54:	93 e0       	ldi	r25, 0x03	; 3
    2e56:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <pLogStart+0x1>
    2e5a:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <pLogStart>
    2e5e:	8f ef       	ldi	r24, 0xFF	; 255
    2e60:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <log_unreadErrors>
    2e64:	df 91       	pop	r29
    2e66:	cf 91       	pop	r28
    2e68:	08 95       	ret
    2e6a:	f0 93 17 05 	sts	0x0517, r31	; 0x800517 <pLogStart+0x1>
    2e6e:	e0 93 16 05 	sts	0x0516, r30	; 0x800516 <pLogStart>
    2e72:	d5 cf       	rjmp	.-86     	; 0x2e1e <log_putError+0x5e>
    2e74:	80 e6       	ldi	r24, 0x60	; 96
    2e76:	91 e0       	ldi	r25, 0x01	; 1
    2e78:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    2e7c:	c0 91 14 05 	lds	r28, 0x0514	; 0x800514 <pLogEnd>
    2e80:	d0 91 15 05 	lds	r29, 0x0515	; 0x800515 <pLogEnd+0x1>
    2e84:	20 97       	sbiw	r28, 0x00	; 0
    2e86:	09 f4       	brne	.+2      	; 0x2e8a <log_putError+0xca>
    2e88:	af c0       	rjmp	.+350    	; 0x2fe8 <log_putError+0x228>
    2e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e8c:	81 11       	cpse	r24, r1
    2e8e:	8f c0       	rjmp	.+286    	; 0x2fae <log_putError+0x1ee>
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	6c e5       	ldi	r22, 0x5C	; 92
    2e94:	73 e0       	ldi	r23, 0x03	; 3
    2e96:	81 11       	cpse	r24, r1
    2e98:	4d c0       	rjmp	.+154    	; 0x2f34 <log_putError+0x174>
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    2ea0:	fc 01       	movw	r30, r24
    2ea2:	83 e7       	ldi	r24, 0x73	; 115
    2ea4:	80 83       	st	Z, r24
    2ea6:	98 81       	ld	r25, Y
    2ea8:	99 0f       	add	r25, r25
    2eaa:	99 31       	cpi	r25, 0x19	; 25
    2eac:	08 f4       	brcc	.+2      	; 0x2eb0 <log_putError+0xf0>
    2eae:	a4 c0       	rjmp	.+328    	; 0x2ff8 <log_putError+0x238>
    2eb0:	87 ee       	ldi	r24, 0xE7	; 231
    2eb2:	89 0f       	add	r24, r25
    2eb4:	89 31       	cpi	r24, 0x19	; 25
    2eb6:	08 f4       	brcc	.+2      	; 0x2eba <log_putError+0xfa>
    2eb8:	a1 c0       	rjmp	.+322    	; 0x2ffc <log_putError+0x23c>
    2eba:	8e ec       	ldi	r24, 0xCE	; 206
    2ebc:	89 0f       	add	r24, r25
    2ebe:	89 31       	cpi	r24, 0x19	; 25
    2ec0:	08 f4       	brcc	.+2      	; 0x2ec4 <log_putError+0x104>
    2ec2:	a8 c0       	rjmp	.+336    	; 0x3014 <log_putError+0x254>
    2ec4:	85 eb       	ldi	r24, 0xB5	; 181
    2ec6:	89 0f       	add	r24, r25
    2ec8:	89 31       	cpi	r24, 0x19	; 25
    2eca:	08 f4       	brcc	.+2      	; 0x2ece <log_putError+0x10e>
    2ecc:	a0 c0       	rjmp	.+320    	; 0x300e <log_putError+0x24e>
    2ece:	8c e9       	ldi	r24, 0x9C	; 156
    2ed0:	89 0f       	add	r24, r25
    2ed2:	89 31       	cpi	r24, 0x19	; 25
    2ed4:	08 f4       	brcc	.+2      	; 0x2ed8 <log_putError+0x118>
    2ed6:	98 c0       	rjmp	.+304    	; 0x3008 <log_putError+0x248>
    2ed8:	83 e8       	ldi	r24, 0x83	; 131
    2eda:	89 0f       	add	r24, r25
    2edc:	89 31       	cpi	r24, 0x19	; 25
    2ede:	08 f4       	brcc	.+2      	; 0x2ee2 <log_putError+0x122>
    2ee0:	90 c0       	rjmp	.+288    	; 0x3002 <log_putError+0x242>
    2ee2:	8a e6       	ldi	r24, 0x6A	; 106
    2ee4:	89 0f       	add	r24, r25
    2ee6:	89 31       	cpi	r24, 0x19	; 25
    2ee8:	08 f4       	brcc	.+2      	; 0x2eec <log_putError+0x12c>
    2eea:	a0 c0       	rjmp	.+320    	; 0x302c <log_putError+0x26c>
    2eec:	81 e5       	ldi	r24, 0x51	; 81
    2eee:	89 0f       	add	r24, r25
    2ef0:	89 31       	cpi	r24, 0x19	; 25
    2ef2:	08 f4       	brcc	.+2      	; 0x2ef6 <log_putError+0x136>
    2ef4:	98 c0       	rjmp	.+304    	; 0x3026 <log_putError+0x266>
    2ef6:	88 e3       	ldi	r24, 0x38	; 56
    2ef8:	89 0f       	add	r24, r25
    2efa:	89 31       	cpi	r24, 0x19	; 25
    2efc:	08 f4       	brcc	.+2      	; 0x2f00 <log_putError+0x140>
    2efe:	90 c0       	rjmp	.+288    	; 0x3020 <log_putError+0x260>
    2f00:	8f e1       	ldi	r24, 0x1F	; 31
    2f02:	89 0f       	add	r24, r25
    2f04:	89 31       	cpi	r24, 0x19	; 25
    2f06:	08 f4       	brcc	.+2      	; 0x2f0a <log_putError+0x14a>
    2f08:	88 c0       	rjmp	.+272    	; 0x301a <log_putError+0x25a>
    2f0a:	9a 5f       	subi	r25, 0xFA	; 250
    2f0c:	8a e0       	ldi	r24, 0x0A	; 10
    2f0e:	80 5d       	subi	r24, 0xD0	; 208
    2f10:	81 83       	std	Z+1, r24	; 0x01
    2f12:	99 0f       	add	r25, r25
    2f14:	95 30       	cpi	r25, 0x05	; 5
    2f16:	08 f4       	brcc	.+2      	; 0x2f1a <log_putError+0x15a>
    2f18:	6d c0       	rjmp	.+218    	; 0x2ff4 <log_putError+0x234>
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <log_putError+0x160>
    2f1e:	23 2f       	mov	r18, r19
    2f20:	95 50       	subi	r25, 0x05	; 5
    2f22:	31 e0       	ldi	r19, 0x01	; 1
    2f24:	32 0f       	add	r19, r18
    2f26:	95 30       	cpi	r25, 0x05	; 5
    2f28:	d0 f7       	brcc	.-12     	; 0x2f1e <log_putError+0x15e>
    2f2a:	2f 5c       	subi	r18, 0xCF	; 207
    2f2c:	df 01       	movw	r26, r30
    2f2e:	13 96       	adiw	r26, 0x03	; 3
    2f30:	22 83       	std	Z+2, r18	; 0x02
    2f32:	0c c0       	rjmp	.+24     	; 0x2f4c <log_putError+0x18c>
    2f34:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    2f38:	bc 01       	movw	r22, r24
    2f3a:	6f 5f       	subi	r22, 0xFF	; 255
    2f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3e:	2d e6       	ldi	r18, 0x6D	; 109
    2f40:	fc 01       	movw	r30, r24
    2f42:	20 83       	st	Z, r18
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4e:	90 34       	cpi	r25, 0x40	; 64
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <log_putError+0x194>
    2f52:	45 c0       	rjmp	.+138    	; 0x2fde <log_putError+0x21e>
    2f54:	90 38       	cpi	r25, 0x80	; 128
    2f56:	f1 f1       	breq	.+124    	; 0x2fd4 <log_putError+0x214>
    2f58:	90 32       	cpi	r25, 0x20	; 32
    2f5a:	c1 f1       	breq	.+112    	; 0x2fcc <log_putError+0x20c>
    2f5c:	fd 01       	movw	r30, r26
    2f5e:	31 96       	adiw	r30, 0x01	; 1
    2f60:	8f e3       	ldi	r24, 0x3F	; 63
    2f62:	8c 93       	st	X, r24
    2f64:	bf 01       	movw	r22, r30
    2f66:	6f 5f       	subi	r22, 0xFF	; 255
    2f68:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	80 83       	st	Z, r24
    2f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f70:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    2f74:	bc 01       	movw	r22, r24
    2f76:	8f 81       	ldd	r24, Y+7	; 0x07
    2f78:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    2f7c:	bc 01       	movw	r22, r24
    2f7e:	6f 5f       	subi	r22, 0xFF	; 255
    2f80:	7f 4f       	sbci	r23, 0xFF	; 255
    2f82:	2d e2       	ldi	r18, 0x2D	; 45
    2f84:	fc 01       	movw	r30, r24
    2f86:	20 83       	st	Z, r18
    2f88:	88 85       	ldd	r24, Y+8	; 0x08
    2f8a:	99 85       	ldd	r25, Y+9	; 0x09
    2f8c:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <putChar_long>
    2f90:	fc 01       	movw	r30, r24
    2f92:	10 82       	st	Z, r1
    2f94:	8c e5       	ldi	r24, 0x5C	; 92
    2f96:	93 e0       	ldi	r25, 0x03	; 3
    2f98:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    2f9c:	86 e2       	ldi	r24, 0x26	; 38
    2f9e:	9c e0       	ldi	r25, 0x0C	; 12
    2fa0:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    2fa4:	e0 91 14 05 	lds	r30, 0x0514	; 0x800514 <pLogEnd>
    2fa8:	f0 91 15 05 	lds	r31, 0x0515	; 0x800515 <pLogEnd+0x1>
    2fac:	27 cf       	rjmp	.-434    	; 0x2dfc <log_putError+0x3c>
    2fae:	6c e5       	ldi	r22, 0x5C	; 92
    2fb0:	73 e0       	ldi	r23, 0x03	; 3
    2fb2:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	6f 5f       	subi	r22, 0xFF	; 255
    2fba:	7f 4f       	sbci	r23, 0xFF	; 255
    2fbc:	28 e6       	ldi	r18, 0x68	; 104
    2fbe:	fc 01       	movw	r30, r24
    2fc0:	20 83       	st	Z, r18
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	c0 cf       	rjmp	.-128    	; 0x2f4c <log_putError+0x18c>
    2fcc:	fd 01       	movw	r30, r26
    2fce:	31 96       	adiw	r30, 0x01	; 1
    2fd0:	9c 93       	st	X, r25
    2fd2:	c8 cf       	rjmp	.-112    	; 0x2f64 <log_putError+0x1a4>
    2fd4:	fd 01       	movw	r30, r26
    2fd6:	31 96       	adiw	r30, 0x01	; 1
    2fd8:	8a e2       	ldi	r24, 0x2A	; 42
    2fda:	8c 93       	st	X, r24
    2fdc:	c3 cf       	rjmp	.-122    	; 0x2f64 <log_putError+0x1a4>
    2fde:	fd 01       	movw	r30, r26
    2fe0:	31 96       	adiw	r30, 0x01	; 1
    2fe2:	85 ea       	ldi	r24, 0xA5	; 165
    2fe4:	8c 93       	st	X, r24
    2fe6:	be cf       	rjmp	.-132    	; 0x2f64 <log_putError+0x1a4>
    2fe8:	8d e2       	ldi	r24, 0x2D	; 45
    2fea:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <Log_TextBuff>
    2fee:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <Log_TextBuff+0x1>
    2ff2:	d0 cf       	rjmp	.-96     	; 0x2f94 <log_putError+0x1d4>
    2ff4:	20 e3       	ldi	r18, 0x30	; 48
    2ff6:	9a cf       	rjmp	.-204    	; 0x2f2c <log_putError+0x16c>
    2ff8:	80 e3       	ldi	r24, 0x30	; 48
    2ffa:	8a cf       	rjmp	.-236    	; 0x2f10 <log_putError+0x150>
    2ffc:	98 2f       	mov	r25, r24
    2ffe:	81 e0       	ldi	r24, 0x01	; 1
    3000:	86 cf       	rjmp	.-244    	; 0x2f0e <log_putError+0x14e>
    3002:	98 2f       	mov	r25, r24
    3004:	85 e0       	ldi	r24, 0x05	; 5
    3006:	83 cf       	rjmp	.-250    	; 0x2f0e <log_putError+0x14e>
    3008:	98 2f       	mov	r25, r24
    300a:	84 e0       	ldi	r24, 0x04	; 4
    300c:	80 cf       	rjmp	.-256    	; 0x2f0e <log_putError+0x14e>
    300e:	98 2f       	mov	r25, r24
    3010:	83 e0       	ldi	r24, 0x03	; 3
    3012:	7d cf       	rjmp	.-262    	; 0x2f0e <log_putError+0x14e>
    3014:	98 2f       	mov	r25, r24
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	7a cf       	rjmp	.-268    	; 0x2f0e <log_putError+0x14e>
    301a:	98 2f       	mov	r25, r24
    301c:	89 e0       	ldi	r24, 0x09	; 9
    301e:	77 cf       	rjmp	.-274    	; 0x2f0e <log_putError+0x14e>
    3020:	98 2f       	mov	r25, r24
    3022:	88 e0       	ldi	r24, 0x08	; 8
    3024:	74 cf       	rjmp	.-280    	; 0x2f0e <log_putError+0x14e>
    3026:	98 2f       	mov	r25, r24
    3028:	87 e0       	ldi	r24, 0x07	; 7
    302a:	71 cf       	rjmp	.-286    	; 0x2f0e <log_putError+0x14e>
    302c:	98 2f       	mov	r25, r24
    302e:	86 e0       	ldi	r24, 0x06	; 6
    3030:	6e cf       	rjmp	.-292    	; 0x2f0e <log_putError+0x14e>

00003032 <log_putWarning>:
    3032:	cf 93       	push	r28
    3034:	df 93       	push	r29
    3036:	e0 91 14 05 	lds	r30, 0x0514	; 0x800514 <pLogEnd>
    303a:	f0 91 15 05 	lds	r31, 0x0515	; 0x800515 <pLogEnd+0x1>
    303e:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <time_Uptime>
    3042:	90 83       	st	Z, r25
    3044:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <time_Uptime+0x1>
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	90 91 45 02 	lds	r25, 0x0245	; 0x800245 <time_Uptime+0x2>
    304e:	92 83       	std	Z+2, r25	; 0x02
    3050:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <time_Uptime+0x3>
    3054:	93 83       	std	Z+3, r25	; 0x03
    3056:	97 e5       	ldi	r25, 0x57	; 87
    3058:	95 83       	std	Z+5, r25	; 0x05
    305a:	86 83       	std	Z+6, r24	; 0x06
    305c:	67 83       	std	Z+7, r22	; 0x07
    305e:	51 87       	std	Z+9, r21	; 0x09
    3060:	40 87       	std	Z+8, r20	; 0x08
    3062:	80 e8       	ldi	r24, 0x80	; 128
    3064:	84 83       	std	Z+4, r24	; 0x04
    3066:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <serusb_Active>
    306a:	8f 3f       	cpi	r24, 0xFF	; 255
    306c:	b1 f1       	breq	.+108    	; 0x30da <log_putWarning+0xa8>
    306e:	3a 96       	adiw	r30, 0x0a	; 10
    3070:	85 e0       	ldi	r24, 0x05	; 5
    3072:	ea 30       	cpi	r30, 0x0A	; 10
    3074:	f8 07       	cpc	r31, r24
    3076:	09 f0       	breq	.+2      	; 0x307a <log_putWarning+0x48>
    3078:	70 f4       	brcc	.+28     	; 0x3096 <log_putWarning+0x64>
    307a:	f0 93 15 05 	sts	0x0515, r31	; 0x800515 <pLogEnd+0x1>
    307e:	e0 93 14 05 	sts	0x0514, r30	; 0x800514 <pLogEnd>
    3082:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <pLogStart>
    3086:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <pLogStart+0x1>
    308a:	8e 17       	cp	r24, r30
    308c:	9f 07       	cpc	r25, r31
    308e:	89 f0       	breq	.+34     	; 0x30b2 <log_putWarning+0x80>
    3090:	df 91       	pop	r29
    3092:	cf 91       	pop	r28
    3094:	08 95       	ret
    3096:	84 e8       	ldi	r24, 0x84	; 132
    3098:	93 e0       	ldi	r25, 0x03	; 3
    309a:	90 93 15 05 	sts	0x0515, r25	; 0x800515 <pLogEnd+0x1>
    309e:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <pLogEnd>
    30a2:	fc 01       	movw	r30, r24
    30a4:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <pLogStart>
    30a8:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <pLogStart+0x1>
    30ac:	8e 17       	cp	r24, r30
    30ae:	9f 07       	cpc	r25, r31
    30b0:	79 f7       	brne	.-34     	; 0x3090 <log_putWarning+0x5e>
    30b2:	3a 96       	adiw	r30, 0x0a	; 10
    30b4:	85 e0       	ldi	r24, 0x05	; 5
    30b6:	ea 30       	cpi	r30, 0x0A	; 10
    30b8:	f8 07       	cpc	r31, r24
    30ba:	51 f0       	breq	.+20     	; 0x30d0 <log_putWarning+0x9e>
    30bc:	48 f0       	brcs	.+18     	; 0x30d0 <log_putWarning+0x9e>
    30be:	84 e8       	ldi	r24, 0x84	; 132
    30c0:	93 e0       	ldi	r25, 0x03	; 3
    30c2:	90 93 17 05 	sts	0x0517, r25	; 0x800517 <pLogStart+0x1>
    30c6:	80 93 16 05 	sts	0x0516, r24	; 0x800516 <pLogStart>
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	08 95       	ret
    30d0:	f0 93 17 05 	sts	0x0517, r31	; 0x800517 <pLogStart+0x1>
    30d4:	e0 93 16 05 	sts	0x0516, r30	; 0x800516 <pLogStart>
    30d8:	db cf       	rjmp	.-74     	; 0x3090 <log_putWarning+0x5e>
    30da:	80 e6       	ldi	r24, 0x60	; 96
    30dc:	91 e0       	ldi	r25, 0x01	; 1
    30de:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    30e2:	c0 91 14 05 	lds	r28, 0x0514	; 0x800514 <pLogEnd>
    30e6:	d0 91 15 05 	lds	r29, 0x0515	; 0x800515 <pLogEnd+0x1>
    30ea:	20 97       	sbiw	r28, 0x00	; 0
    30ec:	09 f4       	brne	.+2      	; 0x30f0 <log_putWarning+0xbe>
    30ee:	af c0       	rjmp	.+350    	; 0x324e <log_putWarning+0x21c>
    30f0:	8b 81       	ldd	r24, Y+3	; 0x03
    30f2:	81 11       	cpse	r24, r1
    30f4:	8f c0       	rjmp	.+286    	; 0x3214 <log_putWarning+0x1e2>
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	6c e5       	ldi	r22, 0x5C	; 92
    30fa:	73 e0       	ldi	r23, 0x03	; 3
    30fc:	81 11       	cpse	r24, r1
    30fe:	4d c0       	rjmp	.+154    	; 0x319a <log_putWarning+0x168>
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    3106:	fc 01       	movw	r30, r24
    3108:	83 e7       	ldi	r24, 0x73	; 115
    310a:	80 83       	st	Z, r24
    310c:	98 81       	ld	r25, Y
    310e:	99 0f       	add	r25, r25
    3110:	99 31       	cpi	r25, 0x19	; 25
    3112:	08 f4       	brcc	.+2      	; 0x3116 <log_putWarning+0xe4>
    3114:	a4 c0       	rjmp	.+328    	; 0x325e <log_putWarning+0x22c>
    3116:	87 ee       	ldi	r24, 0xE7	; 231
    3118:	89 0f       	add	r24, r25
    311a:	89 31       	cpi	r24, 0x19	; 25
    311c:	08 f4       	brcc	.+2      	; 0x3120 <log_putWarning+0xee>
    311e:	a1 c0       	rjmp	.+322    	; 0x3262 <log_putWarning+0x230>
    3120:	8e ec       	ldi	r24, 0xCE	; 206
    3122:	89 0f       	add	r24, r25
    3124:	89 31       	cpi	r24, 0x19	; 25
    3126:	08 f4       	brcc	.+2      	; 0x312a <log_putWarning+0xf8>
    3128:	a8 c0       	rjmp	.+336    	; 0x327a <log_putWarning+0x248>
    312a:	85 eb       	ldi	r24, 0xB5	; 181
    312c:	89 0f       	add	r24, r25
    312e:	89 31       	cpi	r24, 0x19	; 25
    3130:	08 f4       	brcc	.+2      	; 0x3134 <log_putWarning+0x102>
    3132:	a0 c0       	rjmp	.+320    	; 0x3274 <log_putWarning+0x242>
    3134:	8c e9       	ldi	r24, 0x9C	; 156
    3136:	89 0f       	add	r24, r25
    3138:	89 31       	cpi	r24, 0x19	; 25
    313a:	08 f4       	brcc	.+2      	; 0x313e <log_putWarning+0x10c>
    313c:	98 c0       	rjmp	.+304    	; 0x326e <log_putWarning+0x23c>
    313e:	83 e8       	ldi	r24, 0x83	; 131
    3140:	89 0f       	add	r24, r25
    3142:	89 31       	cpi	r24, 0x19	; 25
    3144:	08 f4       	brcc	.+2      	; 0x3148 <log_putWarning+0x116>
    3146:	90 c0       	rjmp	.+288    	; 0x3268 <log_putWarning+0x236>
    3148:	8a e6       	ldi	r24, 0x6A	; 106
    314a:	89 0f       	add	r24, r25
    314c:	89 31       	cpi	r24, 0x19	; 25
    314e:	08 f4       	brcc	.+2      	; 0x3152 <log_putWarning+0x120>
    3150:	a0 c0       	rjmp	.+320    	; 0x3292 <log_putWarning+0x260>
    3152:	81 e5       	ldi	r24, 0x51	; 81
    3154:	89 0f       	add	r24, r25
    3156:	89 31       	cpi	r24, 0x19	; 25
    3158:	08 f4       	brcc	.+2      	; 0x315c <log_putWarning+0x12a>
    315a:	98 c0       	rjmp	.+304    	; 0x328c <log_putWarning+0x25a>
    315c:	88 e3       	ldi	r24, 0x38	; 56
    315e:	89 0f       	add	r24, r25
    3160:	89 31       	cpi	r24, 0x19	; 25
    3162:	08 f4       	brcc	.+2      	; 0x3166 <log_putWarning+0x134>
    3164:	90 c0       	rjmp	.+288    	; 0x3286 <log_putWarning+0x254>
    3166:	8f e1       	ldi	r24, 0x1F	; 31
    3168:	89 0f       	add	r24, r25
    316a:	89 31       	cpi	r24, 0x19	; 25
    316c:	08 f4       	brcc	.+2      	; 0x3170 <log_putWarning+0x13e>
    316e:	88 c0       	rjmp	.+272    	; 0x3280 <log_putWarning+0x24e>
    3170:	9a 5f       	subi	r25, 0xFA	; 250
    3172:	8a e0       	ldi	r24, 0x0A	; 10
    3174:	80 5d       	subi	r24, 0xD0	; 208
    3176:	81 83       	std	Z+1, r24	; 0x01
    3178:	99 0f       	add	r25, r25
    317a:	95 30       	cpi	r25, 0x05	; 5
    317c:	08 f4       	brcc	.+2      	; 0x3180 <log_putWarning+0x14e>
    317e:	6d c0       	rjmp	.+218    	; 0x325a <log_putWarning+0x228>
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	01 c0       	rjmp	.+2      	; 0x3186 <log_putWarning+0x154>
    3184:	23 2f       	mov	r18, r19
    3186:	95 50       	subi	r25, 0x05	; 5
    3188:	31 e0       	ldi	r19, 0x01	; 1
    318a:	32 0f       	add	r19, r18
    318c:	95 30       	cpi	r25, 0x05	; 5
    318e:	d0 f7       	brcc	.-12     	; 0x3184 <log_putWarning+0x152>
    3190:	2f 5c       	subi	r18, 0xCF	; 207
    3192:	df 01       	movw	r26, r30
    3194:	13 96       	adiw	r26, 0x03	; 3
    3196:	22 83       	std	Z+2, r18	; 0x02
    3198:	0c c0       	rjmp	.+24     	; 0x31b2 <log_putWarning+0x180>
    319a:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    319e:	bc 01       	movw	r22, r24
    31a0:	6f 5f       	subi	r22, 0xFF	; 255
    31a2:	7f 4f       	sbci	r23, 0xFF	; 255
    31a4:	2d e6       	ldi	r18, 0x6D	; 109
    31a6:	fc 01       	movw	r30, r24
    31a8:	20 83       	st	Z, r18
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    31b0:	dc 01       	movw	r26, r24
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	90 34       	cpi	r25, 0x40	; 64
    31b6:	09 f4       	brne	.+2      	; 0x31ba <log_putWarning+0x188>
    31b8:	45 c0       	rjmp	.+138    	; 0x3244 <log_putWarning+0x212>
    31ba:	90 38       	cpi	r25, 0x80	; 128
    31bc:	f1 f1       	breq	.+124    	; 0x323a <log_putWarning+0x208>
    31be:	90 32       	cpi	r25, 0x20	; 32
    31c0:	c1 f1       	breq	.+112    	; 0x3232 <log_putWarning+0x200>
    31c2:	fd 01       	movw	r30, r26
    31c4:	31 96       	adiw	r30, 0x01	; 1
    31c6:	8f e3       	ldi	r24, 0x3F	; 63
    31c8:	8c 93       	st	X, r24
    31ca:	bf 01       	movw	r22, r30
    31cc:	6f 5f       	subi	r22, 0xFF	; 255
    31ce:	7f 4f       	sbci	r23, 0xFF	; 255
    31d0:	8d 81       	ldd	r24, Y+5	; 0x05
    31d2:	80 83       	st	Z, r24
    31d4:	8e 81       	ldd	r24, Y+6	; 0x06
    31d6:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    31da:	bc 01       	movw	r22, r24
    31dc:	8f 81       	ldd	r24, Y+7	; 0x07
    31de:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    31e2:	bc 01       	movw	r22, r24
    31e4:	6f 5f       	subi	r22, 0xFF	; 255
    31e6:	7f 4f       	sbci	r23, 0xFF	; 255
    31e8:	2d e2       	ldi	r18, 0x2D	; 45
    31ea:	fc 01       	movw	r30, r24
    31ec:	20 83       	st	Z, r18
    31ee:	88 85       	ldd	r24, Y+8	; 0x08
    31f0:	99 85       	ldd	r25, Y+9	; 0x09
    31f2:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <putChar_long>
    31f6:	fc 01       	movw	r30, r24
    31f8:	10 82       	st	Z, r1
    31fa:	8c e5       	ldi	r24, 0x5C	; 92
    31fc:	93 e0       	ldi	r25, 0x03	; 3
    31fe:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    3202:	86 e2       	ldi	r24, 0x26	; 38
    3204:	9c e0       	ldi	r25, 0x0C	; 12
    3206:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    320a:	e0 91 14 05 	lds	r30, 0x0514	; 0x800514 <pLogEnd>
    320e:	f0 91 15 05 	lds	r31, 0x0515	; 0x800515 <pLogEnd+0x1>
    3212:	2d cf       	rjmp	.-422    	; 0x306e <log_putWarning+0x3c>
    3214:	6c e5       	ldi	r22, 0x5C	; 92
    3216:	73 e0       	ldi	r23, 0x03	; 3
    3218:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    321c:	bc 01       	movw	r22, r24
    321e:	6f 5f       	subi	r22, 0xFF	; 255
    3220:	7f 4f       	sbci	r23, 0xFF	; 255
    3222:	28 e6       	ldi	r18, 0x68	; 104
    3224:	fc 01       	movw	r30, r24
    3226:	20 83       	st	Z, r18
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    322e:	dc 01       	movw	r26, r24
    3230:	c0 cf       	rjmp	.-128    	; 0x31b2 <log_putWarning+0x180>
    3232:	fd 01       	movw	r30, r26
    3234:	31 96       	adiw	r30, 0x01	; 1
    3236:	9c 93       	st	X, r25
    3238:	c8 cf       	rjmp	.-112    	; 0x31ca <log_putWarning+0x198>
    323a:	fd 01       	movw	r30, r26
    323c:	31 96       	adiw	r30, 0x01	; 1
    323e:	8a e2       	ldi	r24, 0x2A	; 42
    3240:	8c 93       	st	X, r24
    3242:	c3 cf       	rjmp	.-122    	; 0x31ca <log_putWarning+0x198>
    3244:	fd 01       	movw	r30, r26
    3246:	31 96       	adiw	r30, 0x01	; 1
    3248:	85 ea       	ldi	r24, 0xA5	; 165
    324a:	8c 93       	st	X, r24
    324c:	be cf       	rjmp	.-132    	; 0x31ca <log_putWarning+0x198>
    324e:	8d e2       	ldi	r24, 0x2D	; 45
    3250:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <Log_TextBuff>
    3254:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <Log_TextBuff+0x1>
    3258:	d0 cf       	rjmp	.-96     	; 0x31fa <log_putWarning+0x1c8>
    325a:	20 e3       	ldi	r18, 0x30	; 48
    325c:	9a cf       	rjmp	.-204    	; 0x3192 <log_putWarning+0x160>
    325e:	80 e3       	ldi	r24, 0x30	; 48
    3260:	8a cf       	rjmp	.-236    	; 0x3176 <log_putWarning+0x144>
    3262:	98 2f       	mov	r25, r24
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	86 cf       	rjmp	.-244    	; 0x3174 <log_putWarning+0x142>
    3268:	98 2f       	mov	r25, r24
    326a:	85 e0       	ldi	r24, 0x05	; 5
    326c:	83 cf       	rjmp	.-250    	; 0x3174 <log_putWarning+0x142>
    326e:	98 2f       	mov	r25, r24
    3270:	84 e0       	ldi	r24, 0x04	; 4
    3272:	80 cf       	rjmp	.-256    	; 0x3174 <log_putWarning+0x142>
    3274:	98 2f       	mov	r25, r24
    3276:	83 e0       	ldi	r24, 0x03	; 3
    3278:	7d cf       	rjmp	.-262    	; 0x3174 <log_putWarning+0x142>
    327a:	98 2f       	mov	r25, r24
    327c:	82 e0       	ldi	r24, 0x02	; 2
    327e:	7a cf       	rjmp	.-268    	; 0x3174 <log_putWarning+0x142>
    3280:	98 2f       	mov	r25, r24
    3282:	89 e0       	ldi	r24, 0x09	; 9
    3284:	77 cf       	rjmp	.-274    	; 0x3174 <log_putWarning+0x142>
    3286:	98 2f       	mov	r25, r24
    3288:	88 e0       	ldi	r24, 0x08	; 8
    328a:	74 cf       	rjmp	.-280    	; 0x3174 <log_putWarning+0x142>
    328c:	98 2f       	mov	r25, r24
    328e:	87 e0       	ldi	r24, 0x07	; 7
    3290:	71 cf       	rjmp	.-286    	; 0x3174 <log_putWarning+0x142>
    3292:	98 2f       	mov	r25, r24
    3294:	86 e0       	ldi	r24, 0x06	; 6
    3296:	6e cf       	rjmp	.-292    	; 0x3174 <log_putWarning+0x142>

00003298 <log_count>:
    3298:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <pLogEnd>
    329c:	90 91 15 05 	lds	r25, 0x0515	; 0x800515 <pLogEnd+0x1>
    32a0:	20 91 16 05 	lds	r18, 0x0516	; 0x800516 <pLogStart>
    32a4:	30 91 17 05 	lds	r19, 0x0517	; 0x800517 <pLogStart+0x1>
    32a8:	82 17       	cp	r24, r18
    32aa:	93 07       	cpc	r25, r19
    32ac:	10 f4       	brcc	.+4      	; 0x32b2 <log_count+0x1a>
    32ae:	80 57       	subi	r24, 0x70	; 112
    32b0:	9e 4f       	sbci	r25, 0xFE	; 254
    32b2:	82 1b       	sub	r24, r18
    32b4:	93 0b       	sbc	r25, r19
    32b6:	95 95       	asr	r25
    32b8:	87 95       	ror	r24
    32ba:	9d ec       	ldi	r25, 0xCD	; 205
    32bc:	89 9f       	mul	r24, r25
    32be:	80 2d       	mov	r24, r0
    32c0:	11 24       	eor	r1, r1
    32c2:	08 95       	ret

000032c4 <log_getShortTextFromPtr>:
			}
		} // while
	}
}

char* log_getShortTextFromPtr(LogList_t* pLogEntry,  char changeNotifyStatus){
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
	char* pChar;
	pChar = &(Log_TextBuff[0]);
	if (pLogEntry != NULL){
    32ca:	00 97       	sbiw	r24, 0x00	; 0
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <log_getShortTextFromPtr+0xc>
    32ce:	05 c1       	rjmp	.+522    	; 0x34da <log_getShortTextFromPtr+0x216>
    32d0:	16 2f       	mov	r17, r22
    32d2:	ec 01       	movw	r28, r24
		// 0..4: xxhxx, xxmxx, xxsxx
		if (pLogEntry->uptime[3] != 0) {
    32d4:	8b 81       	ldd	r24, Y+3	; 0x03
    32d6:	81 11       	cpse	r24, r1
    32d8:	df c0       	rjmp	.+446    	; 0x3498 <log_getShortTextFromPtr+0x1d4>
			// hout entry
			pChar = putChar_Dec2(pLogEntry->uptime[3], pChar);
			*(pChar++) = 'h';
			pChar = putChar_Dec2(pLogEntry->uptime[2], pChar);
		} else if (pLogEntry->uptime[2] != 0) {
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
			// minute entry
			pChar = putChar_Dec2(pLogEntry->uptime[2], pChar);
    32dc:	6c e5       	ldi	r22, 0x5C	; 92
    32de:	73 e0       	ldi	r23, 0x03	; 3
		if (pLogEntry->uptime[3] != 0) {
			// hout entry
			pChar = putChar_Dec2(pLogEntry->uptime[3], pChar);
			*(pChar++) = 'h';
			pChar = putChar_Dec2(pLogEntry->uptime[2], pChar);
		} else if (pLogEntry->uptime[2] != 0) {
    32e0:	81 11       	cpse	r24, r1
    32e2:	54 c0       	rjmp	.+168    	; 0x338c <log_getShortTextFromPtr+0xc8>
			// minute entry
			pChar = putChar_Dec2(pLogEntry->uptime[2], pChar);
			*(pChar++) = 'm';
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
    32e6:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    32ea:	fc 01       	movw	r30, r24
			*(pChar++) = 's';
    32ec:	83 e7       	ldi	r24, 0x73	; 115
    32ee:	80 83       	st	Z, r24
			uint8_t val = pLogEntry->uptime[0] << 1;
    32f0:	98 81       	ld	r25, Y
    32f2:	99 0f       	add	r25, r25
			uint8_t digit = 0;
			while (val >= 25){
    32f4:	99 31       	cpi	r25, 0x19	; 25
    32f6:	08 f4       	brcc	.+2      	; 0x32fa <log_getShortTextFromPtr+0x36>
    32f8:	01 c1       	rjmp	.+514    	; 0x34fc <log_getShortTextFromPtr+0x238>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    32fa:	87 ee       	ldi	r24, 0xE7	; 231
    32fc:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    32fe:	89 31       	cpi	r24, 0x19	; 25
    3300:	08 f4       	brcc	.+2      	; 0x3304 <log_getShortTextFromPtr+0x40>
    3302:	fe c0       	rjmp	.+508    	; 0x3500 <log_getShortTextFromPtr+0x23c>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    3304:	8e ec       	ldi	r24, 0xCE	; 206
    3306:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3308:	89 31       	cpi	r24, 0x19	; 25
    330a:	08 f4       	brcc	.+2      	; 0x330e <log_getShortTextFromPtr+0x4a>
    330c:	fc c0       	rjmp	.+504    	; 0x3506 <log_getShortTextFromPtr+0x242>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    330e:	85 eb       	ldi	r24, 0xB5	; 181
    3310:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3312:	89 31       	cpi	r24, 0x19	; 25
    3314:	08 f4       	brcc	.+2      	; 0x3318 <log_getShortTextFromPtr+0x54>
    3316:	fa c0       	rjmp	.+500    	; 0x350c <log_getShortTextFromPtr+0x248>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    3318:	8c e9       	ldi	r24, 0x9C	; 156
    331a:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    331c:	89 31       	cpi	r24, 0x19	; 25
    331e:	08 f4       	brcc	.+2      	; 0x3322 <log_getShortTextFromPtr+0x5e>
    3320:	fe c0       	rjmp	.+508    	; 0x351e <log_getShortTextFromPtr+0x25a>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    3322:	83 e8       	ldi	r24, 0x83	; 131
    3324:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3326:	89 31       	cpi	r24, 0x19	; 25
    3328:	08 f4       	brcc	.+2      	; 0x332c <log_getShortTextFromPtr+0x68>
    332a:	fc c0       	rjmp	.+504    	; 0x3524 <log_getShortTextFromPtr+0x260>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    332c:	8a e6       	ldi	r24, 0x6A	; 106
    332e:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3330:	89 31       	cpi	r24, 0x19	; 25
    3332:	08 f4       	brcc	.+2      	; 0x3336 <log_getShortTextFromPtr+0x72>
    3334:	fa c0       	rjmp	.+500    	; 0x352a <log_getShortTextFromPtr+0x266>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    3336:	81 e5       	ldi	r24, 0x51	; 81
    3338:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    333a:	89 31       	cpi	r24, 0x19	; 25
    333c:	08 f4       	brcc	.+2      	; 0x3340 <log_getShortTextFromPtr+0x7c>
    333e:	f8 c0       	rjmp	.+496    	; 0x3530 <log_getShortTextFromPtr+0x26c>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    3340:	88 e3       	ldi	r24, 0x38	; 56
    3342:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3344:	89 31       	cpi	r24, 0x19	; 25
    3346:	08 f4       	brcc	.+2      	; 0x334a <log_getShortTextFromPtr+0x86>
    3348:	e4 c0       	rjmp	.+456    	; 0x3512 <log_getShortTextFromPtr+0x24e>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    334a:	8f e1       	ldi	r24, 0x1F	; 31
    334c:	89 0f       	add	r24, r25
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    334e:	89 31       	cpi	r24, 0x19	; 25
    3350:	08 f4       	brcc	.+2      	; 0x3354 <log_getShortTextFromPtr+0x90>
    3352:	e2 c0       	rjmp	.+452    	; 0x3518 <log_getShortTextFromPtr+0x254>
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    3354:	9a 5f       	subi	r25, 0xFA	; 250
				digit++;
    3356:	8a e0       	ldi	r24, 0x0A	; 10
    3358:	80 5d       	subi	r24, 0xD0	; 208
			}
			*(pChar++) = '0'+digit;
    335a:	81 83       	std	Z+1, r24	; 0x01
			digit = 0;
			val = val << 1; // divide by 2.5 = * 2 div 5
    335c:	99 0f       	add	r25, r25
			while (val >= 5){
    335e:	95 30       	cpi	r25, 0x05	; 5
    3360:	08 f4       	brcc	.+2      	; 0x3364 <log_getShortTextFromPtr+0xa0>
    3362:	ca c0       	rjmp	.+404    	; 0x34f8 <log_getShortTextFromPtr+0x234>
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	01 c0       	rjmp	.+2      	; 0x336a <log_getShortTextFromPtr+0xa6>
				val = val - 5; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    3368:	23 2f       	mov	r18, r19
			}
			*(pChar++) = '0'+digit;
			digit = 0;
			val = val << 1; // divide by 2.5 = * 2 div 5
			while (val >= 5){
				val = val - 5; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
    336a:	95 50       	subi	r25, 0x05	; 5
				digit++;
    336c:	31 e0       	ldi	r19, 0x01	; 1
    336e:	32 0f       	add	r19, r18
				digit++;
			}
			*(pChar++) = '0'+digit;
			digit = 0;
			val = val << 1; // divide by 2.5 = * 2 div 5
			while (val >= 5){
    3370:	95 30       	cpi	r25, 0x05	; 5
    3372:	d0 f7       	brcc	.-12     	; 0x3368 <log_getShortTextFromPtr+0xa4>
    3374:	2f 5c       	subi	r18, 0xCF	; 207
				val = val - 5; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
			}
			*(pChar++) = '0'+digit;
    3376:	df 01       	movw	r26, r30
    3378:	13 96       	adiw	r26, 0x03	; 3
    337a:	22 83       	std	Z+2, r18	; 0x02
		}
		// 5: status
		switch (pLogEntry->logStatus) {
    337c:	9c 81       	ldd	r25, Y+4	; 0x04
    337e:	90 34       	cpi	r25, 0x40	; 64
    3380:	a1 f4       	brne	.+40     	; 0x33aa <log_getShortTextFromPtr+0xe6>
		case LOG_STATUS_ACTIVVE:
			*(pChar++) = LOG_CHAR_ACTIVE;
			break;
		case LOG_STATUS_NOTIFYIED:
			*(pChar++) = LOG_CHAR_NOTIFYED;
    3382:	fd 01       	movw	r30, r26
    3384:	31 96       	adiw	r30, 0x01	; 1
    3386:	85 ea       	ldi	r24, 0xA5	; 165
    3388:	8c 93       	st	X, r24
			break;
    338a:	19 c0       	rjmp	.+50     	; 0x33be <log_getShortTextFromPtr+0xfa>
			pChar = putChar_Dec2(pLogEntry->uptime[3], pChar);
			*(pChar++) = 'h';
			pChar = putChar_Dec2(pLogEntry->uptime[2], pChar);
		} else if (pLogEntry->uptime[2] != 0) {
			// minute entry
			pChar = putChar_Dec2(pLogEntry->uptime[2], pChar);
    338c:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
			*(pChar++) = 'm';
    3390:	bc 01       	movw	r22, r24
    3392:	6f 5f       	subi	r22, 0xFF	; 255
    3394:	7f 4f       	sbci	r23, 0xFF	; 255
    3396:	2d e6       	ldi	r18, 0x6D	; 109
    3398:	fc 01       	movw	r30, r24
    339a:	20 83       	st	Z, r18
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    33a2:	dc 01       	movw	r26, r24
				digit++;
			}
			*(pChar++) = '0'+digit;
		}
		// 5: status
		switch (pLogEntry->logStatus) {
    33a4:	9c 81       	ldd	r25, Y+4	; 0x04
    33a6:	90 34       	cpi	r25, 0x40	; 64
    33a8:	61 f3       	breq	.-40     	; 0x3382 <log_getShortTextFromPtr+0xbe>
    33aa:	90 38       	cpi	r25, 0x80	; 128
    33ac:	09 f4       	brne	.+2      	; 0x33b0 <log_getShortTextFromPtr+0xec>
    33ae:	87 c0       	rjmp	.+270    	; 0x34be <log_getShortTextFromPtr+0x1fa>
    33b0:	90 32       	cpi	r25, 0x20	; 32
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <log_getShortTextFromPtr+0xf2>
    33b4:	80 c0       	rjmp	.+256    	; 0x34b6 <log_getShortTextFromPtr+0x1f2>
			break;
		case LOG_STATUS_READ:
			*(pChar++) = LOG_CHAR_READ;
			break;
		default:
			*(pChar++) = LOG_CHAR_UNKNOWN;
    33b6:	fd 01       	movw	r30, r26
    33b8:	31 96       	adiw	r30, 0x01	; 1
    33ba:	8f e3       	ldi	r24, 0x3F	; 63
    33bc:	8c 93       	st	X, r24
			break;
		}
		// 6: type
		*(pChar++) = pLogEntry->logType;
    33be:	bf 01       	movw	r22, r30
    33c0:	6f 5f       	subi	r22, 0xFF	; 255
    33c2:	7f 4f       	sbci	r23, 0xFF	; 255
    33c4:	8d 81       	ldd	r24, Y+5	; 0x05
    33c6:	80 83       	st	Z, r24
		// 7..11
		pChar = putChar_hex(pLogEntry->logCategory, pChar);
    33c8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ca:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
		pChar = putChar_hex(pLogEntry->logNr, pChar);
    33ce:	bc 01       	movw	r22, r24
    33d0:	8f 81       	ldd	r24, Y+7	; 0x07
    33d2:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
		*(pChar++) = '-';
    33d6:	bc 01       	movw	r22, r24
    33d8:	6f 5f       	subi	r22, 0xFF	; 255
    33da:	7f 4f       	sbci	r23, 0xFF	; 255
    33dc:	2d e2       	ldi	r18, 0x2D	; 45
    33de:	fc 01       	movw	r30, r24
    33e0:	20 83       	st	Z, r18
		pChar = putChar_long(pLogEntry->logInfo, pChar);
    33e2:	88 85       	ldd	r24, Y+8	; 0x08
    33e4:	99 85       	ldd	r25, Y+9	; 0x09
    33e6:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <putChar_long>
		*pChar = '\0';
    33ea:	fc 01       	movw	r30, r24
    33ec:	10 82       	st	Z, r1
		if (changeNotifyStatus != LOG_CHANGENOTIFYNO){
    33ee:	1f 3f       	cpi	r17, 0xFF	; 255
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <log_getShortTextFromPtr+0x130>
    33f2:	4c c0       	rjmp	.+152    	; 0x348c <log_getShortTextFromPtr+0x1c8>
			// when Status is to be changed (to read)
			pLogEntry->logStatus = changeNotifyStatus;
    33f4:	1c 83       	std	Y+4, r17	; 0x04
		}
	}
}

uint8_t log_count(){
	if (pLogEnd >= pLogStart){
    33f6:	60 91 14 05 	lds	r22, 0x0514	; 0x800514 <pLogEnd>
    33fa:	70 91 15 05 	lds	r23, 0x0515	; 0x800515 <pLogEnd+0x1>
    33fe:	40 91 16 05 	lds	r20, 0x0516	; 0x800516 <pLogStart>
    3402:	50 91 17 05 	lds	r21, 0x0517	; 0x800517 <pLogStart+0x1>
		return pLogEnd - pLogStart;
    3406:	cb 01       	movw	r24, r22
		}
	}
}

uint8_t log_count(){
	if (pLogEnd >= pLogStart){
    3408:	64 17       	cp	r22, r20
    340a:	75 07       	cpc	r23, r21
    340c:	10 f4       	brcc	.+4      	; 0x3412 <log_getShortTextFromPtr+0x14e>
		return pLogEnd - pLogStart;
	} else {
		return LOG_LIST_LEN + pLogEnd - pLogStart;
    340e:	80 57       	subi	r24, 0x70	; 112
    3410:	9e 4f       	sbci	r25, 0xFE	; 254
    3412:	84 1b       	sub	r24, r20
    3414:	95 0b       	sbc	r25, r21
    3416:	95 95       	asr	r25
    3418:	87 95       	ror	r24
    341a:	9d ec       	ldi	r25, 0xCD	; 205
    341c:	89 9f       	mul	r24, r25
    341e:	80 2d       	mov	r24, r0
    3420:	11 24       	eor	r1, r1
}

void logCheckUnreadErrorLogs(){
	uint8_t nrOfMEssage = log_count();
	LogList_t* pLog;
	log_unreadErrors = FALSE;
    3422:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <log_unreadErrors>
	if (nrOfMEssage > 0) {
    3426:	88 23       	and	r24, r24
    3428:	89 f1       	breq	.+98     	; 0x348c <log_getShortTextFromPtr+0x1c8>
		// check all messages
		while (nrOfMEssage-- > 0) {
    342a:	81 50       	subi	r24, 0x01	; 1

uint8_t log_count(){
	if (pLogEnd >= pLogStart){
		return pLogEnd - pLogStart;
	} else {
		return LOG_LIST_LEN + pLogEnd - pLogStart;
    342c:	9b 01       	movw	r18, r22
    342e:	20 57       	subi	r18, 0x70	; 112
    3430:	3e 4f       	sbci	r19, 0xFE	; 254
    3432:	64 17       	cp	r22, r20
    3434:	75 07       	cpc	r23, r21
    3436:	08 f4       	brcc	.+2      	; 0x343a <log_getShortTextFromPtr+0x176>
    3438:	47 c0       	rjmp	.+142    	; 0x34c8 <log_getShortTextFromPtr+0x204>
    343a:	64 1b       	sub	r22, r20
    343c:	75 0b       	sbc	r23, r21
    343e:	75 95       	asr	r23
    3440:	67 95       	ror	r22
    3442:	9d ec       	ldi	r25, 0xCD	; 205
    3444:	69 9f       	mul	r22, r25
    3446:	60 2d       	mov	r22, r0
    3448:	11 24       	eor	r1, r1
    344a:	01 c0       	rjmp	.+2      	; 0x344e <log_getShortTextFromPtr+0x18a>
	uint8_t nrOfMEssage = log_count();
	LogList_t* pLog;
	log_unreadErrors = FALSE;
	if (nrOfMEssage > 0) {
		// check all messages
		while (nrOfMEssage-- > 0) {
    344c:	89 2f       	mov	r24, r25
		return LOG_LIST_LEN + pLogEnd - pLogStart;
	}
}

LogList_t* log_getLog(uint8_t index) {
	if (index >= log_count()) {
    344e:	86 17       	cp	r24, r22
    3450:	c8 f4       	brcc	.+50     	; 0x3484 <log_getShortTextFromPtr+0x1c0>
		// index more than possible
		return NULL;
	} else {
		if (pLogStart + index <= &(log_List[LOG_LIST_LEN-1])) {
    3452:	fa e0       	ldi	r31, 0x0A	; 10
    3454:	8f 9f       	mul	r24, r31
    3456:	90 01       	movw	r18, r0
    3458:	11 24       	eor	r1, r1
    345a:	fa 01       	movw	r30, r20
    345c:	e2 0f       	add	r30, r18
    345e:	f3 1f       	adc	r31, r19
    3460:	95 e0       	ldi	r25, 0x05	; 5
    3462:	ea 30       	cpi	r30, 0x0A	; 10
    3464:	f9 07       	cpc	r31, r25
    3466:	31 f0       	breq	.+12     	; 0x3474 <log_getShortTextFromPtr+0x1b0>
    3468:	28 f0       	brcs	.+10     	; 0x3474 <log_getShortTextFromPtr+0x1b0>
			return (pLogStart + index);
		} else {
			return (pLogStart + index - LOG_LIST_LEN);
    346a:	f9 01       	movw	r30, r18
    346c:	e0 59       	subi	r30, 0x90	; 144
    346e:	f1 40       	sbci	r31, 0x01	; 1
    3470:	e4 0f       	add	r30, r20
    3472:	f5 1f       	adc	r31, r21
	log_unreadErrors = FALSE;
	if (nrOfMEssage > 0) {
		// check all messages
		while (nrOfMEssage-- > 0) {
			pLog = log_getLog(nrOfMEssage);
			if ((pLog != NULL) && (pLog->logStatus != LOG_STATUS_READ) && (pLog->logType == LOG_TYPE_ERROR)) {
    3474:	30 97       	sbiw	r30, 0x00	; 0
    3476:	31 f0       	breq	.+12     	; 0x3484 <log_getShortTextFromPtr+0x1c0>
    3478:	94 81       	ldd	r25, Z+4	; 0x04
    347a:	90 32       	cpi	r25, 0x20	; 32
    347c:	19 f0       	breq	.+6      	; 0x3484 <log_getShortTextFromPtr+0x1c0>
    347e:	95 81       	ldd	r25, Z+5	; 0x05
    3480:	95 34       	cpi	r25, 0x45	; 69
    3482:	b1 f1       	breq	.+108    	; 0x34f0 <log_getShortTextFromPtr+0x22c>
	uint8_t nrOfMEssage = log_count();
	LogList_t* pLog;
	log_unreadErrors = FALSE;
	if (nrOfMEssage > 0) {
		// check all messages
		while (nrOfMEssage-- > 0) {
    3484:	9f ef       	ldi	r25, 0xFF	; 255
    3486:	98 0f       	add	r25, r24
    3488:	81 11       	cpse	r24, r1
    348a:	e0 cf       	rjmp	.-64     	; 0x344c <log_getShortTextFromPtr+0x188>
	} else {
		Log_TextBuff[0] = '-';
		Log_TextBuff[1] = '\0';
	}
	return Log_TextBuff;
}
    348c:	8c e5       	ldi	r24, 0x5C	; 92
    348e:	93 e0       	ldi	r25, 0x03	; 3
    3490:	df 91       	pop	r29
    3492:	cf 91       	pop	r28
    3494:	1f 91       	pop	r17
    3496:	08 95       	ret
	pChar = &(Log_TextBuff[0]);
	if (pLogEntry != NULL){
		// 0..4: xxhxx, xxmxx, xxsxx
		if (pLogEntry->uptime[3] != 0) {
			// hout entry
			pChar = putChar_Dec2(pLogEntry->uptime[3], pChar);
    3498:	6c e5       	ldi	r22, 0x5C	; 92
    349a:	73 e0       	ldi	r23, 0x03	; 3
    349c:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
			*(pChar++) = 'h';
    34a0:	bc 01       	movw	r22, r24
    34a2:	6f 5f       	subi	r22, 0xFF	; 255
    34a4:	7f 4f       	sbci	r23, 0xFF	; 255
    34a6:	28 e6       	ldi	r18, 0x68	; 104
    34a8:	fc 01       	movw	r30, r24
    34aa:	20 83       	st	Z, r18
			pChar = putChar_Dec2(pLogEntry->uptime[2], pChar);
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    34b2:	dc 01       	movw	r26, r24
    34b4:	77 cf       	rjmp	.-274    	; 0x33a4 <log_getShortTextFromPtr+0xe0>
			break;
		case LOG_STATUS_NOTIFYIED:
			*(pChar++) = LOG_CHAR_NOTIFYED;
			break;
		case LOG_STATUS_READ:
			*(pChar++) = LOG_CHAR_READ;
    34b6:	fd 01       	movw	r30, r26
    34b8:	31 96       	adiw	r30, 0x01	; 1
    34ba:	9c 93       	st	X, r25
			break;
    34bc:	80 cf       	rjmp	.-256    	; 0x33be <log_getShortTextFromPtr+0xfa>
			*(pChar++) = '0'+digit;
		}
		// 5: status
		switch (pLogEntry->logStatus) {
		case LOG_STATUS_ACTIVVE:
			*(pChar++) = LOG_CHAR_ACTIVE;
    34be:	fd 01       	movw	r30, r26
    34c0:	31 96       	adiw	r30, 0x01	; 1
    34c2:	8a e2       	ldi	r24, 0x2A	; 42
    34c4:	8c 93       	st	X, r24
			break;
    34c6:	7b cf       	rjmp	.-266    	; 0x33be <log_getShortTextFromPtr+0xfa>
    34c8:	24 1b       	sub	r18, r20
    34ca:	35 0b       	sbc	r19, r21
    34cc:	35 95       	asr	r19
    34ce:	27 95       	ror	r18
    34d0:	6d ec       	ldi	r22, 0xCD	; 205
    34d2:	26 9f       	mul	r18, r22
    34d4:	60 2d       	mov	r22, r0
    34d6:	11 24       	eor	r1, r1
    34d8:	ba cf       	rjmp	.-140    	; 0x344e <log_getShortTextFromPtr+0x18a>
			pLogEntry->logStatus = changeNotifyStatus;
			// then also check if there are still unread errors
			logCheckUnreadErrorLogs();
		}
	} else {
		Log_TextBuff[0] = '-';
    34da:	8d e2       	ldi	r24, 0x2D	; 45
    34dc:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <Log_TextBuff>
		Log_TextBuff[1] = '\0';
    34e0:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <Log_TextBuff+0x1>
	}
	return Log_TextBuff;
}
    34e4:	8c e5       	ldi	r24, 0x5C	; 92
    34e6:	93 e0       	ldi	r25, 0x03	; 3
    34e8:	df 91       	pop	r29
    34ea:	cf 91       	pop	r28
    34ec:	1f 91       	pop	r17
    34ee:	08 95       	ret
		// check all messages
		while (nrOfMEssage-- > 0) {
			pLog = log_getLog(nrOfMEssage);
			if ((pLog != NULL) && (pLog->logStatus != LOG_STATUS_READ) && (pLog->logType == LOG_TYPE_ERROR)) {
				// this is an unread error
				log_unreadErrors = TRUE;
    34f0:	8f ef       	ldi	r24, 0xFF	; 255
    34f2:	80 93 5b 03 	sts	0x035B, r24	; 0x80035b <log_unreadErrors>
    34f6:	ca cf       	rjmp	.-108    	; 0x348c <log_getShortTextFromPtr+0x1c8>
				digit++;
			}
			*(pChar++) = '0'+digit;
			digit = 0;
			val = val << 1; // divide by 2.5 = * 2 div 5
			while (val >= 5){
    34f8:	20 e3       	ldi	r18, 0x30	; 48
    34fa:	3d cf       	rjmp	.-390    	; 0x3376 <log_getShortTextFromPtr+0xb2>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    34fc:	80 e3       	ldi	r24, 0x30	; 48
    34fe:	2d cf       	rjmp	.-422    	; 0x335a <log_getShortTextFromPtr+0x96>
    3500:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	29 cf       	rjmp	.-430    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3506:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    3508:	82 e0       	ldi	r24, 0x02	; 2
    350a:	26 cf       	rjmp	.-436    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    350c:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    350e:	83 e0       	ldi	r24, 0x03	; 3
    3510:	23 cf       	rjmp	.-442    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3512:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    3514:	88 e0       	ldi	r24, 0x08	; 8
    3516:	20 cf       	rjmp	.-448    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3518:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    351a:	89 e0       	ldi	r24, 0x09	; 9
    351c:	1d cf       	rjmp	.-454    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    351e:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    3520:	84 e0       	ldi	r24, 0x04	; 4
    3522:	1a cf       	rjmp	.-460    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3524:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    3526:	85 e0       	ldi	r24, 0x05	; 5
    3528:	17 cf       	rjmp	.-466    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    352a:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    352c:	86 e0       	ldi	r24, 0x06	; 6
    352e:	14 cf       	rjmp	.-472    	; 0x3358 <log_getShortTextFromPtr+0x94>
		} else {
			pChar = putChar_Dec2(pLogEntry->uptime[1], pChar);
			*(pChar++) = 's';
			uint8_t val = pLogEntry->uptime[0] << 1;
			uint8_t digit = 0;
			while (val >= 25){
    3530:	98 2f       	mov	r25, r24
				val = val - 25; // 0..249 = 0..999 ms, also 25 divisor ergibt zehner
				digit++;
    3532:	87 e0       	ldi	r24, 0x07	; 7
    3534:	11 cf       	rjmp	.-478    	; 0x3358 <log_getShortTextFromPtr+0x94>

00003536 <log_getShortTextFromIndex>:
		}
	}
}

uint8_t log_count(){
	if (pLogEnd >= pLogStart){
    3536:	20 91 14 05 	lds	r18, 0x0514	; 0x800514 <pLogEnd>
    353a:	30 91 15 05 	lds	r19, 0x0515	; 0x800515 <pLogEnd+0x1>
    353e:	40 91 16 05 	lds	r20, 0x0516	; 0x800516 <pLogStart>
    3542:	50 91 17 05 	lds	r21, 0x0517	; 0x800517 <pLogStart+0x1>
    3546:	24 17       	cp	r18, r20
    3548:	35 07       	cpc	r19, r21
    354a:	10 f4       	brcc	.+4      	; 0x3550 <log_getShortTextFromIndex+0x1a>
		return pLogEnd - pLogStart;
	} else {
		return LOG_LIST_LEN + pLogEnd - pLogStart;
    354c:	20 57       	subi	r18, 0x70	; 112
    354e:	3e 4f       	sbci	r19, 0xFE	; 254
    3550:	24 1b       	sub	r18, r20
    3552:	35 0b       	sbc	r19, r21
    3554:	35 95       	asr	r19
    3556:	27 95       	ror	r18
    3558:	9d ec       	ldi	r25, 0xCD	; 205
    355a:	29 9f       	mul	r18, r25
    355c:	20 2d       	mov	r18, r0
    355e:	11 24       	eor	r1, r1
	}
}

LogList_t* log_getLog(uint8_t index) {
	if (index >= log_count()) {
    3560:	82 17       	cp	r24, r18
    3562:	40 f0       	brcs	.+16     	; 0x3574 <log_getShortTextFromIndex+0x3e>
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
	if (pLogEntry != NULL){
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
	} else {
		Log_TextBuff[0] = '-';
    3564:	8d e2       	ldi	r24, 0x2D	; 45
    3566:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <Log_TextBuff>
		Log_TextBuff[1] = '\0';
    356a:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <Log_TextBuff+0x1>
		return Log_TextBuff;
	}
    356e:	8c e5       	ldi	r24, 0x5C	; 92
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	08 95       	ret
LogList_t* log_getLog(uint8_t index) {
	if (index >= log_count()) {
		// index more than possible
		return NULL;
	} else {
		if (pLogStart + index <= &(log_List[LOG_LIST_LEN-1])) {
    3574:	7a e0       	ldi	r23, 0x0A	; 10
    3576:	87 9f       	mul	r24, r23
    3578:	90 01       	movw	r18, r0
    357a:	11 24       	eor	r1, r1
    357c:	ca 01       	movw	r24, r20
    357e:	82 0f       	add	r24, r18
    3580:	93 1f       	adc	r25, r19
    3582:	75 e0       	ldi	r23, 0x05	; 5
    3584:	8a 30       	cpi	r24, 0x0A	; 10
    3586:	97 07       	cpc	r25, r23
    3588:	09 f0       	breq	.+2      	; 0x358c <log_getShortTextFromIndex+0x56>
    358a:	18 f4       	brcc	.+6      	; 0x3592 <log_getShortTextFromIndex+0x5c>
const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
	if (pLogEntry != NULL){
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	51 f3       	breq	.-44     	; 0x3564 <log_getShortTextFromIndex+0x2e>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    3590:	99 ce       	rjmp	.-718    	; 0x32c4 <log_getShortTextFromPtr>
		return NULL;
	} else {
		if (pLogStart + index <= &(log_List[LOG_LIST_LEN-1])) {
			return (pLogStart + index);
		} else {
			return (pLogStart + index - LOG_LIST_LEN);
    3592:	20 59       	subi	r18, 0x90	; 144
    3594:	31 40       	sbci	r19, 0x01	; 1
    3596:	ca 01       	movw	r24, r20
    3598:	82 0f       	add	r24, r18
    359a:	93 1f       	adc	r25, r19
    359c:	f7 cf       	rjmp	.-18     	; 0x358c <log_getShortTextFromIndex+0x56>

0000359e <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    359e:	0e 94 0b 11 	call	0x2216	; 0x2216 <init_iopins>
	init_log();
    35a2:	69 db       	rcall	.-2350   	; 0x2c76 <init_log>
	init_Serial0SerUSB();
    35a4:	0e 94 7c 37 	call	0x6ef8	; 0x6ef8 <init_Serial0SerUSB>
	init_message();
    35a8:	0e 94 b5 2d 	call	0x5b6a	; 0x5b6a <init_message>
	init_HwTimer();
    35ac:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <init_HwTimer>
	init_Timers();
    35b0:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <init_Timers>
	init_ADC();
    35b4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <init_ADC>
	init_Pipe();
    35b8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <init_Pipe>
	init_Serial1MIDI();
    35bc:	0e 94 98 36 	call	0x6d30	; 0x6d30 <init_Serial1MIDI>
	init_PipeModules();
    35c0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <init_PipeModules>
	init_Midi2Manual();
    35c4:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <init_Midi2Manual>
	init_Manual2Midi();
    35c8:	0e 94 3e 2f 	call	0x5e7c	; 0x5e7c <init_Manual2Midi>
	init_Midi();
    35cc:	0e 94 31 2e 	call	0x5c62	; 0x5c62 <init_Midi>
	init_Manual2Module();
    35d0:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <init_Manual2Module>
	init_SoftKeys();
    35d4:	0e 94 84 2c 	call	0x5908	; 0x5908 <init_SoftKeys>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    35d8:	0e 94 46 0b 	call	0x168c	; 0x168c <eeprom_UpdateALL>
	INIT_MENU
    35dc:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <menu_TestModulePattern>


	// BOOT MESSAGE

	lcd_init ();
    35e0:	0e 94 20 11 	call	0x2240	; 0x2240 <lcd_init>
	lcd_initCG();
    35e4:	0e 94 9e 39 	call	0x733c	; 0x733c <lcd_initCG>
	lcd_clrscr ();
	lcd_goto(LCD_LINE1+3);
    35e8:	62 d9       	rcall	.-3388   	; 0x28ae <lcd_clrscr>
    35ea:	83 e4       	ldi	r24, 0x43	; 67
	lcd_puts_P(prog_name);
    35ec:	d5 d8       	rcall	.-3670   	; 0x2798 <lcd_goto>
    35ee:	86 e8       	ldi	r24, 0x86	; 134
    35f0:	92 e0       	ldi	r25, 0x02	; 2
	lcd_goto(LCD_LINE2+7);
    35f2:	ad da       	rcall	.-2726   	; 0x2b4e <lcd_puts_P>
    35f4:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_puts_P(sw_version);
    35f6:	d0 d8       	rcall	.-3680   	; 0x2798 <lcd_goto>
    35f8:	8c ee       	ldi	r24, 0xEC	; 236
    35fa:	9b e0       	ldi	r25, 0x0B	; 11
    35fc:	a8 da       	rcall	.-2736   	; 0x2b4e <lcd_puts_P>
	sei();
    35fe:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3600:	2f ef       	ldi	r18, 0xFF	; 255
    3602:	87 ea       	ldi	r24, 0xA7	; 167
    3604:	91 e6       	ldi	r25, 0x61	; 97
    3606:	21 50       	subi	r18, 0x01	; 1
    3608:	80 40       	sbci	r24, 0x00	; 0
    360a:	90 40       	sbci	r25, 0x00	; 0
    360c:	e1 f7       	brne	.-8      	; 0x3606 <main+0x68>
    360e:	00 c0       	rjmp	.+0      	; 0x3610 <main+0x72>
	_delay_ms(2000);
	lcd_clrscr ();
    3610:	00 00       	nop
    3612:	4d d9       	rcall	.-3430   	; 0x28ae <lcd_clrscr>
	
	// TURN ON POWER
	
	module_StartPowerOn();
    3614:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <module_StartPowerOn>
	MESSAGE_PIPE_HANDLING_ON
    3618:	8f ef       	ldi	r24, 0xFF	; 255
    361a:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <msgPipe_Handling>

	menuNotActive = TRUE;
    361e:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <menuNotActive>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    3622:	ff 24       	eor	r15, r15
    3624:	fa 94       	dec	r15
				softKeys_toLCD();
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    3626:	df ef       	ldi	r29, 0xFF	; 255
				if (menu_TestModulePattern == 0){
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    3628:	6d ef       	ldi	r22, 0xFD	; 253
    362a:	e6 2e       	mov	r14, r22
				lcd_ManualOutDec(midiLastInManual);
				lcd_putc(' ');
			}
			lcd_goto(oldcursor);
			midiLastInNote = MIDI_NOTE_NONE;
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    362c:	12 e3       	ldi	r17, 0x32	; 50
    362e:	67 c0       	rjmp	.+206    	; 0x36fe <main+0x160>
    3630:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <menuNotActive>
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
					menu_ModuleTestExecute(); // start abort, on next timer finish
				}
			}
		}
		if (menuNotActive == TRUE) {
    3634:	8f 3f       	cpi	r24, 0xFF	; 255
    3636:	09 f4       	brne	.+2      	; 0x363a <main+0x9c>
    3638:	7e c0       	rjmp	.+252    	; 0x3736 <main+0x198>
				softKeys_toLCD();
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    363a:	ff 24       	eor	r15, r15
    363c:	fa 94       	dec	r15
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    363e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0xe>
    3642:	88 23       	and	r24, r24
    3644:	09 f4       	brne	.+2      	; 0x3648 <main+0xaa>
    3646:	80 c0       	rjmp	.+256    	; 0x3748 <main+0x1aa>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    3648:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xc>
    364c:	81 11       	cpse	r24, r1
    364e:	06 c0       	rjmp	.+12     	; 0x365c <main+0xbe>
			if (menu_TestModulePattern != 0){
    3650:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <menu_TestModulePattern>
    3654:	81 11       	cpse	r24, r1
    3656:	35 c1       	rjmp	.+618    	; 0x38c2 <main+0x324>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    3658:	d0 93 3d 02 	sts	0x023D, r29	; 0x80023d <swTimer+0xc>
			}
		}
		
		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    365c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <swTimer+0x2>
    3660:	88 23       	and	r24, r24
    3662:	09 f4       	brne	.+2      	; 0x3666 <main+0xc8>
    3664:	e6 c0       	rjmp	.+460    	; 0x3832 <main+0x294>
				lcd_goto(saveCursor);
			}
		}
		
		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    3666:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <midi_CheckTxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
    366a:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <midi_CheckRxActiveSense>
		
		// ------------------------ TOP STATUS LINE --------------------------
		uint8_t oldcursor = lcd_cursorPos;
    366e:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
		if (midiLastInNote != MIDI_NOTE_NONE){
    3672:	00 91 02 02 	lds	r16, 0x0202	; 0x800202 <midiLastInNote>
    3676:	0f 3f       	cpi	r16, 0xFF	; 255
    3678:	09 f4       	brne	.+2      	; 0x367c <main+0xde>
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    367a:	f5 c0       	rjmp	.+490    	; 0x3866 <main+0x2c8>
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	8c d8       	rcall	.-3816   	; 0x2798 <lcd_goto>
			if (midiLastInManual == MANUAL_NONE) {
    3680:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    3684:	8f 3f       	cpi	r24, 0xFF	; 255
    3686:	09 f4       	brne	.+2      	; 0x368a <main+0xec>
				lcd_noteOut(midiLastInNote);
				lcd_putc(' ');
			} else {
				// midi input to assigned manual
				// nnn>m
				lcd_noteOut(midiLastInNote);
    3688:	0f c1       	rjmp	.+542    	; 0x38a8 <main+0x30a>
    368a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
    368e:	0e 94 bf 3b 	call	0x777e	; 0x777e <lcd_noteOut>
				lcd_putc(MENU_MIDI_IO_SIGN);
				lcd_ManualOutDec(midiLastInManual);
    3692:	8e e7       	ldi	r24, 0x7E	; 126
    3694:	49 d9       	rcall	.-3438   	; 0x2928 <lcd_putc>
    3696:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				lcd_putc(' ');
    369a:	0e 94 3b 3c 	call	0x7876	; 0x7876 <lcd_ManualOutDec>
    369e:	80 e2       	ldi	r24, 0x20	; 32
			}
			lcd_goto(oldcursor);
    36a0:	43 d9       	rcall	.-3450   	; 0x2928 <lcd_putc>
    36a2:	8c 2f       	mov	r24, r28
    36a4:	79 d8       	rcall	.-3854   	; 0x2798 <lcd_goto>
			midiLastInNote = MIDI_NOTE_NONE;
    36a6:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInNote>
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    36aa:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    36ac:	f8 94       	cli
    36ae:	10 93 39 02 	sts	0x0239, r17	; 0x800239 <swTimer+0x8>
    36b2:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <swTimer+0x9>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    36b6:	8f bf       	out	0x3f, r24	; 63
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
			lcd_blank(6);
			lcd_goto(oldcursor);
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
    36b8:	00 91 04 02 	lds	r16, 0x0204	; 0x800204 <midiLastOutNote>
    36bc:	0f 3f       	cpi	r16, 0xFF	; 255
    36be:	09 f0       	breq	.+2      	; 0x36c2 <main+0x124>
    36c0:	4c c0       	rjmp	.+152    	; 0x375a <main+0x1bc>
			lcd_putc(MENU_MIDI_IO_SIGN);
			lcd_noteOut(midiLastOutNote);
			lcd_goto(oldcursor);
			midiLastOutNote = MIDI_NOTE_NONE;
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
		} else if TIMER_ELAPSED(TIMER_MIDIOUT_DISP) {
    36c2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xa>
    36c6:	88 23       	and	r24, r24
    36c8:	09 f4       	brne	.+2      	; 0x36cc <main+0x12e>
    36ca:	e2 c0       	rjmp	.+452    	; 0x3890 <main+0x2f2>
			lcd_goto(oldcursor);
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    36cc:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <time_UpTimeUpdated>
    36d0:	8f 3f       	cpi	r24, 0xFF	; 255
    36d2:	09 f4       	brne	.+2      	; 0x36d6 <main+0x138>
    36d4:	5e c0       	rjmp	.+188    	; 0x3792 <main+0x1f4>
				lcd_cursosblink();
			}
		}
		
		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    36d6:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <msgPipeOverflow>
    36da:	8f 3f       	cpi	r24, 0xFF	; 255
    36dc:	09 f4       	brne	.+2      	; 0x36e0 <main+0x142>
    36de:	a1 c0       	rjmp	.+322    	; 0x3822 <main+0x284>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
		}

		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    36e0:	90 91 5e 0b 	lds	r25, 0x0B5E	; 0x800b5e <midiRxInIndex>
    36e4:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <midiRxOutIndex>
    36e8:	98 17       	cp	r25, r24
    36ea:	21 f0       	breq	.+8      	; 0x36f4 <main+0x156>
			midiIn_Process(serial1MIDIReadRx());
    36ec:	0e 94 ed 36 	call	0x6dda	; 0x6dda <serial1MIDIReadRx>
    36f0:	0e 94 0c 30 	call	0x6018	; 0x6018 <midiIn_Process>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    36f4:	0e 94 25 2e 	call	0x5c4a	; 0x5c4a <pipeMsgStatus>
    36f8:	8f 3f       	cpi	r24, 0xFF	; 255
    36fa:	09 f4       	brne	.+2      	; 0x36fe <main+0x160>
    36fc:	f4 c0       	rjmp	.+488    	; 0x38e6 <main+0x348>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    while (1)
    {
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    36fe:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <message_status>
    3702:	88 23       	and	r24, r24
    3704:	09 f4       	brne	.+2      	; 0x3708 <main+0x16a>
    3706:	94 cf       	rjmp	.-216    	; 0x3630 <main+0x92>
			uint8_t keyMessage = message_get();
    3708:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <message_get>
    370c:	c8 2f       	mov	r28, r24
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    370e:	86 38       	cpi	r24, 0x86	; 134
    3710:	09 f4       	brne	.+2      	; 0x3714 <main+0x176>
    3712:	18 c1       	rjmp	.+560    	; 0x3944 <main+0x3a6>
				menu_OnEnterMidiPanic(0);
			}
			if (menuNotActive == TRUE) {
    3714:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <menuNotActive>
    3718:	8f 3f       	cpi	r24, 0xFF	; 255
    371a:	09 f4       	brne	.+2      	; 0x371e <main+0x180>
    371c:	02 c1       	rjmp	.+516    	; 0x3922 <main+0x384>
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    371e:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <menu_TestModulePattern>
    3722:	81 11       	cpse	r24, r1
    3724:	e5 c0       	rjmp	.+458    	; 0x38f0 <main+0x352>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    3726:	8c 2f       	mov	r24, r28
    3728:	0e 94 4e 29 	call	0x529c	; 0x529c <menu_ProcessMessage>
    372c:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <menuNotActive>
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
					menu_ModuleTestExecute(); // start abort, on next timer finish
				}
			}
		}
		if (menuNotActive == TRUE) {
    3730:	8f 3f       	cpi	r24, 0xFF	; 255
    3732:	09 f0       	breq	.+2      	; 0x3736 <main+0x198>
    3734:	82 cf       	rjmp	.-252    	; 0x363a <main+0x9c>
			// Startpage is beeing displayed
			if (updateStatus == TRUE) {
    3736:	ef ef       	ldi	r30, 0xFF	; 255
    3738:	fe 16       	cp	r15, r30
    373a:	09 f4       	brne	.+2      	; 0x373e <main+0x1a0>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
				softKeys_toLCD();
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    373c:	a3 c0       	rjmp	.+326    	; 0x3884 <main+0x2e6>
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    373e:	f1 2c       	mov	r15, r1
    3740:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0xe>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    3744:	81 11       	cpse	r24, r1
    3746:	80 cf       	rjmp	.-256    	; 0x3648 <main+0xaa>
				menu_ClearDataDisp();
    3748:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
				lcd_goto(saveCursor);
    374c:	0e 94 68 28 	call	0x50d0	; 0x50d0 <menu_ClearDataDisp>
    3750:	8c 2f       	mov	r24, r28
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    3752:	22 d8       	rcall	.-4028   	; 0x2798 <lcd_goto>
    3754:	d0 93 3f 02 	sts	0x023F, r29	; 0x80023f <swTimer+0xe>
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
			// there is a midi in note to be displayed in status
			// m>nnn
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3758:	77 cf       	rjmp	.-274    	; 0x3648 <main+0xaa>
			lcd_ManualOutDec(midiLastOutManual);
    375a:	8f e0       	ldi	r24, 0x0F	; 15
    375c:	1d d8       	rcall	.-4038   	; 0x2798 <lcd_goto>
    375e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastOutManual>
			lcd_putc(MENU_MIDI_IO_SIGN);
    3762:	0e 94 3b 3c 	call	0x7876	; 0x7876 <lcd_ManualOutDec>
    3766:	8e e7       	ldi	r24, 0x7E	; 126
			lcd_noteOut(midiLastOutNote);
    3768:	df d8       	rcall	.-3650   	; 0x2928 <lcd_putc>
    376a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutNote>
    376e:	0e 94 bf 3b 	call	0x777e	; 0x777e <lcd_noteOut>
			lcd_goto(oldcursor);
    3772:	8c 2f       	mov	r24, r28
    3774:	11 d8       	rcall	.-4062   	; 0x2798 <lcd_goto>
			midiLastOutNote = MIDI_NOTE_NONE;
    3776:	d0 93 04 02 	sts	0x0204, r29	; 0x800204 <midiLastOutNote>
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    377a:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    377c:	f8 94       	cli
    377e:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <swTimer+0xa>
    3782:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <swTimer+0xb>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3786:	8f bf       	out	0x3f, r24	; 63
			lcd_goto(oldcursor);
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    3788:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <time_UpTimeUpdated>
    378c:	8f 3f       	cpi	r24, 0xFF	; 255
    378e:	09 f0       	breq	.+2      	; 0x3792 <main+0x1f4>
    3790:	a2 cf       	rjmp	.-188    	; 0x36d6 <main+0x138>
			time_UpTimeUpdated = FALSE;
    3792:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <time_UpTimeUpdated>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    3796:	00 91 5a 03 	lds	r16, 0x035A	; 0x80035a <lcd_cursorPos>
			uint8_t oldBlink = lcd_cursorIsOn;
    379a:	c0 91 ab 0c 	lds	r28, 0x0CAB	; 0x800cab <lcd_cursorIsOn>
			if (oldBlink == TRUE) {
    379e:	cf 3f       	cpi	r28, 0xFF	; 255
    37a0:	09 f4       	brne	.+2      	; 0x37a4 <main+0x206>
    37a2:	db c0       	rjmp	.+438    	; 0x395a <main+0x3bc>
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
    37a4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <time_Uptime+0x3>
    37a8:	88 23       	and	r24, r24
    37aa:	09 f4       	brne	.+2      	; 0x37ae <main+0x210>
    37ac:	95 c0       	rjmp	.+298    	; 0x38d8 <main+0x33a>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    37ae:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x1>
    37b2:	80 fd       	sbrc	r24, 0
				// when displaying hr:min blink ":"
				separator = ':';
    37b4:	af c0       	rjmp	.+350    	; 0x3914 <main+0x376>
    37b6:	4a e3       	ldi	r20, 0x3A	; 58

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    37b8:	b4 2e       	mov	r11, r20
    37ba:	56 e4       	ldi	r21, 0x46	; 70
    37bc:	c5 2e       	mov	r12, r21
    37be:	52 e0       	ldi	r21, 0x02	; 2
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    37c0:	d5 2e       	mov	r13, r21
    37c2:	87 e0       	ldi	r24, 0x07	; 7
    37c4:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
			lcd_dec2out(*(pTime--));
    37c8:	f6 01       	movw	r30, r12
    37ca:	80 81       	ld	r24, Z
    37cc:	0e 94 12 3a 	call	0x7424	; 0x7424 <lcd_dec2out>
			lcd_putc(separator);
    37d0:	8b 2d       	mov	r24, r11
    37d2:	aa d8       	rcall	.-3756   	; 0x2928 <lcd_putc>
			lcd_dec2out(*pTime);
    37d4:	f6 01       	movw	r30, r12
    37d6:	31 97       	sbiw	r30, 0x01	; 1
    37d8:	80 81       	ld	r24, Z
    37da:	0e 94 12 3a 	call	0x7424	; 0x7424 <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    37de:	40 91 a2 0b 	lds	r20, 0x0BA2	; 0x800ba2 <midiRxOvflCount>
			if (ovflCount > 0){
    37e2:	41 11       	cpse	r20, r1
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
				midiRxOvflCount = 0;
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    37e4:	90 c0       	rjmp	.+288    	; 0x3906 <main+0x368>
			if (ovflCount > 0){
    37e6:	40 91 a7 0c 	lds	r20, 0x0CA7	; 0x800ca7 <midiTxOvflCount>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
				midiTxOvflCount = 0;
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    37ea:	41 11       	cpse	r20, r1
    37ec:	85 c0       	rjmp	.+266    	; 0x38f8 <main+0x35a>
    37ee:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <pipe_PowerStatus>
    37f2:	84 ff       	sbrs	r24, 4
    37f4:	68 c0       	rjmp	.+208    	; 0x38c6 <main+0x328>
    37f6:	80 e2       	ldi	r24, 0x20	; 32
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    37f8:	97 d8       	rcall	.-3794   	; 0x2928 <lcd_putc>
    37fa:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <log_unreadErrors>
    37fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3800:	09 f4       	brne	.+2      	; 0x3804 <main+0x266>
    3802:	68 c0       	rjmp	.+208    	; 0x38d4 <main+0x336>
    3804:	80 e2       	ldi	r24, 0x20	; 32
    3806:	90 d8       	rcall	.-3808   	; 0x2928 <lcd_putc>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    3808:	80 2f       	mov	r24, r16
    380a:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
			if (oldBlink == TRUE) {
    380e:	cf 3f       	cpi	r28, 0xFF	; 255
    3810:	09 f0       	breq	.+2      	; 0x3814 <main+0x276>
    3812:	61 cf       	rjmp	.-318    	; 0x36d6 <main+0x138>
				lcd_cursosblink();
    3814:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <lcd_cursosblink>
			}
		}
		
		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    3818:	80 91 97 07 	lds	r24, 0x0797	; 0x800797 <msgPipeOverflow>
    381c:	8f 3f       	cpi	r24, 0xFF	; 255
    381e:	09 f0       	breq	.+2      	; 0x3822 <main+0x284>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    3820:	5f cf       	rjmp	.-322    	; 0x36e0 <main+0x142>
    3822:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <msgPipeOverflow>
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    3826:	40 e0       	ldi	r20, 0x00	; 0
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	84 e0       	ldi	r24, 0x04	; 4
    382e:	c8 da       	rcall	.-2672   	; 0x2dc0 <log_putError>
    3830:	57 cf       	rjmp	.-338    	; 0x36e0 <main+0x142>
		}
		
		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
			module_PowerControl();
    3832:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <module_PowerControl>
			menu_showPowerState();
    3836:	0e 94 9d 2d 	call	0x5b3a	; 0x5b3a <menu_showPowerState>
			if (menuNotActive == TRUE) {
    383a:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <menuNotActive>
    383e:	8f 3f       	cpi	r24, 0xFF	; 255
    3840:	09 f0       	breq	.+2      	; 0x3844 <main+0x2a6>
    3842:	11 cf       	rjmp	.-478    	; 0x3666 <main+0xc8>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    3844:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
				lcd_goto(LCD_LINE2);
    3848:	84 e1       	ldi	r24, 0x14	; 20
    384a:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    384e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <pipe_PowerStatus>
    3852:	81 30       	cpi	r24, 0x01	; 1
    3854:	09 f4       	brne	.+2      	; 0x3858 <main+0x2ba>
    3856:	90 c0       	rjmp	.+288    	; 0x3978 <main+0x3da>
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    3858:	82 31       	cpi	r24, 0x12	; 18
    385a:	09 f4       	brne	.+2      	; 0x385e <main+0x2c0>
    385c:	91 c0       	rjmp	.+290    	; 0x3980 <main+0x3e2>
					uint8_t saveCursor = lcd_cursorPos;
					lcd_blank(LCD_LINELEN);
				}
				lcd_goto(saveCursor);
    385e:	8c 2f       	mov	r24, r28
    3860:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3864:	00 cf       	rjmp	.-512    	; 0x3666 <main+0xc8>
				lcd_putc(' ');
			}
			lcd_goto(oldcursor);
			midiLastInNote = MIDI_NOTE_NONE;
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
		} else if TIMER_ELAPSED(TIMER_MIDIIN_DISP) {
    3866:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0x8>
    386a:	81 11       	cpse	r24, r1
    386c:	25 cf       	rjmp	.-438    	; 0x36b8 <main+0x11a>
			// timer for showing note has elapsed
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    386e:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
			lcd_blank(6);
    3872:	86 e0       	ldi	r24, 0x06	; 6
    3874:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
			lcd_goto(oldcursor);
    3878:	8c 2f       	mov	r24, r28
    387a:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    387e:	00 93 39 02 	sts	0x0239, r16	; 0x800239 <swTimer+0x8>
    3882:	1a cf       	rjmp	.-460    	; 0x36b8 <main+0x11a>
		}
		if (menuNotActive == TRUE) {
			// Startpage is beeing displayed
			if (updateStatus == TRUE) {
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    3884:	0e 94 6e 28 	call	0x50dc	; 0x50dc <menu_ClearAllDisp>
				softKeys_toLCD();
    3888:	0e 94 ca 2c 	call	0x5994	; 0x5994 <softKeys_toLCD>
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    388c:	f1 2c       	mov	r15, r1
			lcd_goto(oldcursor);
			midiLastOutNote = MIDI_NOTE_NONE;
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
		} else if TIMER_ELAPSED(TIMER_MIDIOUT_DISP) {
			// timer for showing note has elapsed
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    388e:	58 cf       	rjmp	.-336    	; 0x3740 <main+0x1a2>
    3890:	8f e0       	ldi	r24, 0x0F	; 15
    3892:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
			lcd_blank(5);
    3896:	85 e0       	ldi	r24, 0x05	; 5
			lcd_goto(oldcursor);
    3898:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    389c:	8c 2f       	mov	r24, r28
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    389e:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
			if (midiLastInManual == MANUAL_NONE) {
				// there was no manual assigned to midi in note
				// cc?nnn
				lcd_ChannelOut(midiLastInChannel);
    38a2:	00 93 3b 02 	sts	0x023B, r16	; 0x80023b <swTimer+0xa>
    38a6:	12 cf       	rjmp	.-476    	; 0x36cc <main+0x12e>
    38a8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInChannel>
				lcd_putc('?');
    38ac:	0e 94 2b 3c 	call	0x7856	; 0x7856 <lcd_ChannelOut>
				lcd_noteOut(midiLastInNote);
    38b0:	8f e3       	ldi	r24, 0x3F	; 63
    38b2:	3a d8       	rcall	.-3980   	; 0x2928 <lcd_putc>
    38b4:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
				lcd_putc(' ');
    38b8:	0e 94 bf 3b 	call	0x777e	; 0x777e <lcd_noteOut>
    38bc:	80 e2       	ldi	r24, 0x20	; 32
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
			if (menu_TestModulePattern != 0){
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    38be:	34 d8       	rcall	.-3992   	; 0x2928 <lcd_putc>
    38c0:	f0 ce       	rjmp	.-544    	; 0x36a2 <main+0x104>
    38c2:	3c d6       	rcall	.+3192   	; 0x453c <menu_ModuleTestExecute>
			if (ovflCount > 0){
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
				midiTxOvflCount = 0;
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    38c4:	cb ce       	rjmp	.-618    	; 0x365c <main+0xbe>
    38c6:	89 e0       	ldi	r24, 0x09	; 9
    38c8:	2f d8       	rcall	.-4002   	; 0x2928 <lcd_putc>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    38ca:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <log_unreadErrors>
    38ce:	8f 3f       	cpi	r24, 0xFF	; 255
    38d0:	09 f0       	breq	.+2      	; 0x38d4 <main+0x336>
    38d2:	98 cf       	rjmp	.-208    	; 0x3804 <main+0x266>
    38d4:	85 e4       	ldi	r24, 0x45	; 69
    38d6:	97 cf       	rjmp	.-210    	; 0x3806 <main+0x268>
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    38d8:	2a e3       	ldi	r18, 0x3A	; 58
    38da:	b2 2e       	mov	r11, r18
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    38dc:	35 e4       	ldi	r19, 0x45	; 69
    38de:	c3 2e       	mov	r12, r19
    38e0:	32 e0       	ldi	r19, 0x02	; 2
    38e2:	d3 2e       	mov	r13, r19
		if MIDI_RX_BUFFER_NONEMPTY {
			midiIn_Process(serial1MIDIReadRx());
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
			midiKeyPress_Process(pipeMsgGet());
    38e4:	6e cf       	rjmp	.-292    	; 0x37c2 <main+0x224>
    38e6:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <pipeMsgGet>
    38ea:	0e 94 3e 32 	call	0x647c	; 0x647c <midiKeyPress_Process>
				if (menu_TestModulePattern == 0){
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    38ee:	07 cf       	rjmp	.-498    	; 0x36fe <main+0x160>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    38f0:	e0 92 56 05 	sts	0x0556, r14	; 0x800556 <menu_TestModuleBitCounter>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
				midiRxOvflCount = 0;
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
			if (ovflCount > 0){
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    38f4:	23 d6       	rcall	.+3142   	; 0x453c <menu_ModuleTestExecute>
    38f6:	9c ce       	rjmp	.-712    	; 0x3630 <main+0x92>
    38f8:	50 e0       	ldi	r21, 0x00	; 0
    38fa:	61 e0       	ldi	r22, 0x01	; 1
    38fc:	83 e0       	ldi	r24, 0x03	; 3
				midiTxOvflCount = 0;
    38fe:	60 da       	rcall	.-2880   	; 0x2dc0 <log_putError>
    3900:	10 92 a7 0c 	sts	0x0CA7, r1	; 0x800ca7 <midiTxOvflCount>
			lcd_putc(separator);
			lcd_dec2out(*pTime);
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
			if (ovflCount > 0){
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    3904:	74 cf       	rjmp	.-280    	; 0x37ee <main+0x250>
    3906:	50 e0       	ldi	r21, 0x00	; 0
    3908:	60 e0       	ldi	r22, 0x00	; 0
    390a:	83 e0       	ldi	r24, 0x03	; 3
    390c:	59 da       	rcall	.-2894   	; 0x2dc0 <log_putError>
				midiRxOvflCount = 0;
    390e:	10 92 a2 0b 	sts	0x0BA2, r1	; 0x800ba2 <midiRxOvflCount>
    3912:	69 cf       	rjmp	.-302    	; 0x37e6 <main+0x248>
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    3914:	80 e2       	ldi	r24, 0x20	; 32
    3916:	b8 2e       	mov	r11, r24

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3918:	96 e4       	ldi	r25, 0x46	; 70
    391a:	c9 2e       	mov	r12, r25
    391c:	92 e0       	ldi	r25, 0x02	; 2
    391e:	d9 2e       	mov	r13, r25
    3920:	50 cf       	rjmp	.-352    	; 0x37c2 <main+0x224>
				menu_OnEnterMidiPanic(0);
			}
			if (menuNotActive == TRUE) {
				// --- MESSAGE 
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    3922:	8c 2f       	mov	r24, r28
    3924:	8f 73       	andi	r24, 0x3F	; 63
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    3926:	c5 30       	cpi	r28, 0x05	; 5
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
					menu_InitLCD(); //display menu
					menuNotActive = FALSE; // notify that menu is displayed
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    3928:	d9 f0       	breq	.+54     	; 0x3960 <main+0x3c2>
    392a:	9f ef       	ldi	r25, 0xFF	; 255
    392c:	98 0f       	add	r25, r24
    392e:	94 30       	cpi	r25, 0x04	; 4
    3930:	08 f0       	brcs	.+2      	; 0x3934 <main+0x396>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    3932:	01 cf       	rjmp	.-510    	; 0x3736 <main+0x198>
    3934:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <softKey_MessageKey_ToSoftKeyNr>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    3938:	6c 2f       	mov	r22, r28
    393a:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <softKey_Execute>
    393e:	80 93 18 05 	sts	0x0518, r24	; 0x800518 <menuNotActive>
    {
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
			uint8_t keyMessage = message_get();
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
				menu_OnEnterMidiPanic(0);
    3942:	78 ce       	rjmp	.-784    	; 0x3634 <main+0x96>
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	51 d1       	rcall	.+674    	; 0x3bea <menu_OnEnterMidiPanic>
			}
			if (menuNotActive == TRUE) {
    3948:	80 91 18 05 	lds	r24, 0x0518	; 0x800518 <menuNotActive>
    394c:	8f 3f       	cpi	r24, 0xFF	; 255
    394e:	09 f0       	breq	.+2      	; 0x3952 <main+0x3b4>
				}
			}
		}
		if (menuNotActive == TRUE) {
			// Startpage is beeing displayed
			if (updateStatus == TRUE) {
    3950:	e6 ce       	rjmp	.-564    	; 0x371e <main+0x180>
    3952:	ef ef       	ldi	r30, 0xFF	; 255
    3954:	fe 12       	cpse	r15, r30
    3956:	f3 ce       	rjmp	.-538    	; 0x373e <main+0x1a0>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
			uint8_t oldBlink = lcd_cursorIsOn;
			if (oldBlink == TRUE) {
				lcd_cursoroff();
    3958:	95 cf       	rjmp	.-214    	; 0x3884 <main+0x2e6>
    395a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <lcd_cursoroff>
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
				if 	(keyMessage == MESSAGE_KEY_SEL) {
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    395e:	22 cf       	rjmp	.-444    	; 0x37a4 <main+0x206>
    3960:	60 e0       	ldi	r22, 0x00	; 0
    3962:	70 e0       	ldi	r23, 0x00	; 0
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
					menu_InitLCD(); //display menu
    3968:	03 d7       	rcall	.+3590   	; 0x4770 <menu_Init>
    396a:	0e 94 05 29 	call	0x520a	; 0x520a <menu_InitLCD>
					menuNotActive = FALSE; // notify that menu is displayed
    396e:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <menuNotActive>
				softKeys_toLCD();
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    3972:	ff 24       	eor	r15, r15
    3974:	fa 94       	dec	r15
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
				lcd_goto(LCD_LINE2);
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    3976:	63 ce       	rjmp	.-826    	; 0x363e <main+0xa0>
    3978:	84 e7       	ldi	r24, 0x74	; 116
    397a:	92 e0       	ldi	r25, 0x02	; 2
    397c:	e8 d8       	rcall	.-3632   	; 0x2b4e <lcd_puts_P>
    397e:	6f cf       	rjmp	.-290    	; 0x385e <main+0x2c0>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
					uint8_t saveCursor = lcd_cursorPos;
					lcd_blank(LCD_LINELEN);
    3980:	84 e1       	ldi	r24, 0x14	; 20
    3982:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    3986:	6b cf       	rjmp	.-298    	; 0x385e <main+0x2c0>

00003988 <softKeyCoupler2from3>:
}

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
			soft_Key[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    3988:	81 11       	cpse	r24, r1
    398a:	06 c0       	rjmp	.+12     	; 0x3998 <softKeyCoupler2from3+0x10>
    398c:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <midiCoupler_2from3>
    3990:	88 23       	and	r24, r24
    3992:	49 f0       	breq	.+18     	; 0x39a6 <softKeyCoupler2from3+0x1e>
    3994:	81 e8       	ldi	r24, 0x81	; 129
    3996:	08 95       	ret
    3998:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <midiCoupler_2from3>
    399c:	80 95       	com	r24
    399e:	80 93 dd 07 	sts	0x07DD, r24	; 0x8007dd <midiCoupler_2from3>
    39a2:	81 11       	cpse	r24, r1
    39a4:	f7 cf       	rjmp	.-18     	; 0x3994 <softKeyCoupler2from3+0xc>
    39a6:	82 e8       	ldi	r24, 0x82	; 130
    39a8:	08 95       	ret

000039aa <softKeyCoupler1from3>:
    39aa:	81 11       	cpse	r24, r1
    39ac:	06 c0       	rjmp	.+12     	; 0x39ba <softKeyCoupler1from3+0x10>
    39ae:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <midiCoupler_1from3>
    39b2:	88 23       	and	r24, r24
    39b4:	49 f0       	breq	.+18     	; 0x39c8 <softKeyCoupler1from3+0x1e>
    39b6:	81 e8       	ldi	r24, 0x81	; 129
    39b8:	08 95       	ret
    39ba:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <midiCoupler_1from3>
    39be:	80 95       	com	r24
    39c0:	80 93 17 0b 	sts	0x0B17, r24	; 0x800b17 <midiCoupler_1from3>
    39c4:	81 11       	cpse	r24, r1
    39c6:	f7 cf       	rjmp	.-18     	; 0x39b6 <softKeyCoupler1from3+0xc>
    39c8:	82 e8       	ldi	r24, 0x82	; 130
    39ca:	08 95       	ret

000039cc <softKeyCouplerPfrom3>:
    39cc:	81 11       	cpse	r24, r1
    39ce:	06 c0       	rjmp	.+12     	; 0x39dc <softKeyCouplerPfrom3+0x10>
    39d0:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <midiCoupler_Pfrom3>
    39d4:	88 23       	and	r24, r24
    39d6:	49 f0       	breq	.+18     	; 0x39ea <softKeyCouplerPfrom3+0x1e>
    39d8:	81 e8       	ldi	r24, 0x81	; 129
    39da:	08 95       	ret
    39dc:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <midiCoupler_Pfrom3>
    39e0:	80 95       	com	r24
    39e2:	80 93 15 0b 	sts	0x0B15, r24	; 0x800b15 <midiCoupler_Pfrom3>
    39e6:	81 11       	cpse	r24, r1
    39e8:	f7 cf       	rjmp	.-18     	; 0x39d8 <softKeyCouplerPfrom3+0xc>
    39ea:	82 e8       	ldi	r24, 0x82	; 130
    39ec:	08 95       	ret

000039ee <softKeyCoupler1from2>:
    39ee:	81 11       	cpse	r24, r1
    39f0:	06 c0       	rjmp	.+12     	; 0x39fe <softKeyCoupler1from2+0x10>
    39f2:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <midiCoupler_1from2>
    39f6:	88 23       	and	r24, r24
    39f8:	49 f0       	breq	.+18     	; 0x3a0c <softKeyCoupler1from2+0x1e>
    39fa:	81 e8       	ldi	r24, 0x81	; 129
    39fc:	08 95       	ret
    39fe:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <midiCoupler_1from2>
    3a02:	80 95       	com	r24
    3a04:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <midiCoupler_1from2>
    3a08:	81 11       	cpse	r24, r1
    3a0a:	f7 cf       	rjmp	.-18     	; 0x39fa <softKeyCoupler1from2+0xc>
    3a0c:	82 e8       	ldi	r24, 0x82	; 130
    3a0e:	08 95       	ret

00003a10 <softKeyCouplerPfrom2>:
    3a10:	81 11       	cpse	r24, r1
    3a12:	06 c0       	rjmp	.+12     	; 0x3a20 <softKeyCouplerPfrom2+0x10>
    3a14:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <midiCoupler_Pfrom2>
    3a18:	88 23       	and	r24, r24
    3a1a:	49 f0       	breq	.+18     	; 0x3a2e <softKeyCouplerPfrom2+0x1e>
    3a1c:	81 e8       	ldi	r24, 0x81	; 129
    3a1e:	08 95       	ret
    3a20:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <midiCoupler_Pfrom2>
    3a24:	80 95       	com	r24
    3a26:	80 93 de 07 	sts	0x07DE, r24	; 0x8007de <midiCoupler_Pfrom2>
    3a2a:	81 11       	cpse	r24, r1
    3a2c:	f7 cf       	rjmp	.-18     	; 0x3a1c <softKeyCouplerPfrom2+0xc>
    3a2e:	82 e8       	ldi	r24, 0x82	; 130
    3a30:	08 95       	ret

00003a32 <softKeyCouplerPfrom1>:
    3a32:	81 11       	cpse	r24, r1
    3a34:	06 c0       	rjmp	.+12     	; 0x3a42 <softKeyCouplerPfrom1+0x10>
    3a36:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <midiCoupler_Pfrom1>
    3a3a:	88 23       	and	r24, r24
    3a3c:	49 f0       	breq	.+18     	; 0x3a50 <softKeyCouplerPfrom1+0x1e>
    3a3e:	81 e8       	ldi	r24, 0x81	; 129
    3a40:	08 95       	ret
    3a42:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <midiCoupler_Pfrom1>
    3a46:	80 95       	com	r24
    3a48:	80 93 16 0b 	sts	0x0B16, r24	; 0x800b16 <midiCoupler_Pfrom1>
    3a4c:	81 11       	cpse	r24, r1
    3a4e:	f7 cf       	rjmp	.-18     	; 0x3a3e <softKeyCouplerPfrom1+0xc>
    3a50:	82 e8       	ldi	r24, 0x82	; 130
    3a52:	08 95       	ret

00003a54 <menu_enterWriteModule>:
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	00 90 21 05 	lds	r0, 0x0521	; 0x800521 <menuVmodule>
    3a5c:	02 c0       	rjmp	.+4      	; 0x3a62 <menu_enterWriteModule+0xe>
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	0a 94       	dec	r0
    3a64:	e2 f7       	brpl	.-8      	; 0x3a5e <menu_enterWriteModule+0xa>
    3a66:	98 2f       	mov	r25, r24
    3a68:	40 e0       	ldi	r20, 0x00	; 0
    3a6a:	50 e0       	ldi	r21, 0x00	; 0
    3a6c:	ba 01       	movw	r22, r20
    3a6e:	e3 e4       	ldi	r30, 0x43	; 67
    3a70:	f3 e0       	ldi	r31, 0x03	; 3
    3a72:	44 0f       	add	r20, r20
    3a74:	55 1f       	adc	r21, r21
    3a76:	66 1f       	adc	r22, r22
    3a78:	77 1f       	adc	r23, r23
    3a7a:	81 81       	ldd	r24, Z+1	; 0x01
    3a7c:	89 23       	and	r24, r25
    3a7e:	09 f0       	breq	.+2      	; 0x3a82 <menu_enterWriteModule+0x2e>
    3a80:	41 60       	ori	r20, 0x01	; 1
    3a82:	38 97       	sbiw	r30, 0x08	; 8
    3a84:	82 e0       	ldi	r24, 0x02	; 2
    3a86:	e3 34       	cpi	r30, 0x43	; 67
    3a88:	f8 07       	cpc	r31, r24
    3a8a:	99 f7       	brne	.-26     	; 0x3a72 <menu_enterWriteModule+0x1e>
    3a8c:	40 93 5c 05 	sts	0x055C, r20	; 0x80055c <menuModVal>
    3a90:	50 93 5d 05 	sts	0x055D, r21	; 0x80055d <menuModVal+0x1>
    3a94:	60 93 5e 05 	sts	0x055E, r22	; 0x80055e <menuModVal+0x2>
    3a98:	70 93 5f 05 	sts	0x055F, r23	; 0x80055f <menuModVal+0x3>
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	08 95       	ret

00003aa0 <menu_exitWriteModule>:
    3aa0:	85 30       	cpi	r24, 0x05	; 5
    3aa2:	11 f0       	breq	.+4      	; 0x3aa8 <menu_exitWriteModule+0x8>
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	08 95       	ret
    3aa8:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <menuModVal>
    3aac:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <menuModVal+0x1>
    3ab0:	a0 91 5e 05 	lds	r26, 0x055E	; 0x80055e <menuModVal+0x2>
    3ab4:	b0 91 5f 05 	lds	r27, 0x055F	; 0x80055f <menuModVal+0x3>
    3ab8:	21 e0       	ldi	r18, 0x01	; 1
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	00 90 21 05 	lds	r0, 0x0521	; 0x800521 <menuVmodule>
    3ac0:	02 c0       	rjmp	.+4      	; 0x3ac6 <menu_exitWriteModule+0x26>
    3ac2:	22 0f       	add	r18, r18
    3ac4:	33 1f       	adc	r19, r19
    3ac6:	0a 94       	dec	r0
    3ac8:	e2 f7       	brpl	.-8      	; 0x3ac2 <menu_exitWriteModule+0x22>
    3aca:	42 2f       	mov	r20, r18
    3acc:	e3 e4       	ldi	r30, 0x43	; 67
    3ace:	f3 e0       	ldi	r31, 0x03	; 3
    3ad0:	32 2f       	mov	r19, r18
    3ad2:	30 95       	com	r19
    3ad4:	0b c0       	rjmp	.+22     	; 0x3aec <menu_exitWriteModule+0x4c>
    3ad6:	23 23       	and	r18, r19
    3ad8:	21 83       	std	Z+1, r18	; 0x01
    3ada:	88 0f       	add	r24, r24
    3adc:	99 1f       	adc	r25, r25
    3ade:	aa 1f       	adc	r26, r26
    3ae0:	bb 1f       	adc	r27, r27
    3ae2:	38 97       	sbiw	r30, 0x08	; 8
    3ae4:	22 e0       	ldi	r18, 0x02	; 2
    3ae6:	e3 34       	cpi	r30, 0x43	; 67
    3ae8:	f2 07       	cpc	r31, r18
    3aea:	e1 f2       	breq	.-72     	; 0x3aa4 <menu_exitWriteModule+0x4>
    3aec:	21 81       	ldd	r18, Z+1	; 0x01
    3aee:	b7 ff       	sbrs	r27, 7
    3af0:	f2 cf       	rjmp	.-28     	; 0x3ad6 <menu_exitWriteModule+0x36>
    3af2:	24 2b       	or	r18, r20
    3af4:	21 83       	std	Z+1, r18	; 0x01
    3af6:	f1 cf       	rjmp	.-30     	; 0x3ada <menu_exitWriteModule+0x3a>

00003af8 <menuOnEnterModSel>:
    3af8:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3afc:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3b00:	3e 96       	adiw	r30, 0x0e	; 14
    3b02:	85 91       	lpm	r24, Z+
    3b04:	95 91       	lpm	r25, Z+
    3b06:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <menuVmodule>
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	08 95       	ret

00003b0e <menuOnEnterMidiInCh>:
    3b0e:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3b12:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3b16:	3e 96       	adiw	r30, 0x0e	; 14
    3b18:	85 91       	lpm	r24, Z+
    3b1a:	95 91       	lpm	r25, Z+
    3b1c:	80 93 57 05 	sts	0x0557, r24	; 0x800557 <menuVmidiChan>
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	08 95       	ret

00003b24 <menuOnEnterMidiInSec>:
    3b24:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3b28:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3b2c:	3e 96       	adiw	r30, 0x0e	; 14
    3b2e:	25 91       	lpm	r18, Z+
    3b30:	35 91       	lpm	r19, Z+
    3b32:	20 93 62 05 	sts	0x0562, r18	; 0x800562 <menuVsection>
    3b36:	80 91 57 05 	lds	r24, 0x0557	; 0x800557 <menuVmidiChan>
    3b3a:	8f 70       	andi	r24, 0x0F	; 15
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	23 70       	andi	r18, 0x03	; 3
    3b48:	82 0f       	add	r24, r18
    3b4a:	91 1d       	adc	r25, r1
    3b4c:	88 0f       	add	r24, r24
    3b4e:	99 1f       	adc	r25, r25
    3b50:	88 0f       	add	r24, r24
    3b52:	99 1f       	adc	r25, r25
    3b54:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <DataAdressOffset+0x1>
    3b58:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <DataAdressOffset>
    3b5c:	80 e0       	ldi	r24, 0x00	; 0
    3b5e:	08 95       	ret

00003b60 <menuOnEnterModManual>:
    3b60:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3b64:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3b68:	3e 96       	adiw	r30, 0x0e	; 14
    3b6a:	85 91       	lpm	r24, Z+
    3b6c:	95 91       	lpm	r25, Z+
    3b6e:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <menuVmanual>
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	08 95       	ret

00003b76 <menuOnEnterModSec>:
    3b76:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3b7a:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3b7e:	3e 96       	adiw	r30, 0x0e	; 14
    3b80:	25 91       	lpm	r18, Z+
    3b82:	35 91       	lpm	r19, Z+
    3b84:	20 93 62 05 	sts	0x0562, r18	; 0x800562 <menuVsection>
    3b88:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <menuVmanual>
    3b8c:	8f 70       	andi	r24, 0x0F	; 15
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	88 0f       	add	r24, r24
    3b92:	99 1f       	adc	r25, r25
    3b94:	88 0f       	add	r24, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	23 70       	andi	r18, 0x03	; 3
    3b9a:	82 0f       	add	r24, r18
    3b9c:	91 1d       	adc	r25, r1
    3b9e:	9c 01       	movw	r18, r24
    3ba0:	22 0f       	add	r18, r18
    3ba2:	33 1f       	adc	r19, r19
    3ba4:	82 0f       	add	r24, r18
    3ba6:	93 1f       	adc	r25, r19
    3ba8:	90 93 61 05 	sts	0x0561, r25	; 0x800561 <DataAdressOffset+0x1>
    3bac:	80 93 60 05 	sts	0x0560, r24	; 0x800560 <DataAdressOffset>
    3bb0:	80 e0       	ldi	r24, 0x00	; 0
    3bb2:	08 95       	ret

00003bb4 <menuOnEnterKey>:
    3bb4:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3bb8:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3bbc:	3e 96       	adiw	r30, 0x0e	; 14
    3bbe:	85 91       	lpm	r24, Z+
    3bc0:	95 91       	lpm	r25, Z+
    3bc2:	84 30       	cpi	r24, 0x04	; 4
    3bc4:	60 f4       	brcc	.+24     	; 0x3bde <menuOnEnterKey+0x2a>
    3bc6:	fc 01       	movw	r30, r24
    3bc8:	ff 27       	eor	r31, r31
    3bca:	ee 0f       	add	r30, r30
    3bcc:	ff 1f       	adc	r31, r31
    3bce:	eb 5b       	subi	r30, 0xBB	; 187
    3bd0:	fa 4f       	sbci	r31, 0xFA	; 250
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <menuVMenuSoftKey+0x1>
    3bda:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <menuVMenuSoftKey>
    3bde:	80 e0       	ldi	r24, 0x00	; 0
    3be0:	08 95       	ret

00003be2 <menuOnExitKeys>:
    3be2:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <eeprom_UpdateSoftkeys>
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	08 95       	ret

00003bea <menu_OnEnterMidiPanic>:
    3bea:	8e e1       	ldi	r24, 0x1E	; 30
    3bec:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3bf0:	82 e4       	ldi	r24, 0x42	; 66
    3bf2:	93 e0       	ldi	r25, 0x03	; 3
    3bf4:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    3bf8:	8f b7       	in	r24, 0x3f	; 63
    3bfa:	f8 94       	cli
    3bfc:	e1 e3       	ldi	r30, 0x31	; 49
    3bfe:	f2 e0       	ldi	r31, 0x02	; 2
    3c00:	94 e6       	ldi	r25, 0x64	; 100
    3c02:	96 87       	std	Z+14, r25	; 0x0e
    3c04:	17 86       	std	Z+15, r1	; 0x0f
    3c06:	8f bf       	out	0x3f, r24	; 63
    3c08:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <midiSendAllNotesOff>
    3c0c:	8a e4       	ldi	r24, 0x4A	; 74
    3c0e:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	08 95       	ret

00003c16 <menu_readModule>:
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	00 90 21 05 	lds	r0, 0x0521	; 0x800521 <menuVmodule>
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <menu_readModule+0x16>
    3c28:	88 0f       	add	r24, r24
    3c2a:	99 1f       	adc	r25, r25
    3c2c:	0a 94       	dec	r0
    3c2e:	e2 f7       	brpl	.-8      	; 0x3c28 <menu_readModule+0x12>
    3c30:	38 2f       	mov	r19, r24
    3c32:	e3 e4       	ldi	r30, 0x43	; 67
    3c34:	f3 e0       	ldi	r31, 0x03	; 3
    3c36:	80 e0       	ldi	r24, 0x00	; 0
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	dc 01       	movw	r26, r24
    3c3c:	0b c0       	rjmp	.+22     	; 0x3c54 <menu_readModule+0x3e>
    3c3e:	8c 01       	movw	r16, r24
    3c40:	da 2f       	mov	r29, r26
    3c42:	cb 2f       	mov	r28, r27
    3c44:	c8 01       	movw	r24, r16
    3c46:	ad 2f       	mov	r26, r29
    3c48:	bc 2f       	mov	r27, r28
    3c4a:	38 97       	sbiw	r30, 0x08	; 8
    3c4c:	22 e0       	ldi	r18, 0x02	; 2
    3c4e:	e3 34       	cpi	r30, 0x43	; 67
    3c50:	f2 07       	cpc	r31, r18
    3c52:	a9 f0       	breq	.+42     	; 0x3c7e <menu_readModule+0x68>
    3c54:	88 0f       	add	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	aa 1f       	adc	r26, r26
    3c5a:	bb 1f       	adc	r27, r27
    3c5c:	ac 01       	movw	r20, r24
    3c5e:	bd 01       	movw	r22, r26
    3c60:	41 60       	ori	r20, 0x01	; 1
    3c62:	26 81       	ldd	r18, Z+6	; 0x06
    3c64:	23 23       	and	r18, r19
    3c66:	59 f3       	breq	.-42     	; 0x3c3e <menu_readModule+0x28>
    3c68:	8a 01       	movw	r16, r20
    3c6a:	d6 2f       	mov	r29, r22
    3c6c:	c7 2f       	mov	r28, r23
    3c6e:	c8 01       	movw	r24, r16
    3c70:	ad 2f       	mov	r26, r29
    3c72:	bc 2f       	mov	r27, r28
    3c74:	38 97       	sbiw	r30, 0x08	; 8
    3c76:	22 e0       	ldi	r18, 0x02	; 2
    3c78:	e3 34       	cpi	r30, 0x43	; 67
    3c7a:	f2 07       	cpc	r31, r18
    3c7c:	59 f7       	brne	.-42     	; 0x3c54 <menu_readModule+0x3e>
    3c7e:	8e e1       	ldi	r24, 0x1E	; 30
    3c80:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3c84:	00 93 ad 0c 	sts	0x0CAD, r16	; 0x800cad <editLong>
    3c88:	10 93 ae 0c 	sts	0x0CAE, r17	; 0x800cae <editLong+0x1>
    3c8c:	d0 93 af 0c 	sts	0x0CAF, r29	; 0x800caf <editLong+0x2>
    3c90:	c0 93 b0 0c 	sts	0x0CB0, r28	; 0x800cb0 <editLong+0x3>
    3c94:	0e 94 ee 39 	call	0x73dc	; 0x73dc <lcd_longout>
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	df 91       	pop	r29
    3c9c:	cf 91       	pop	r28
    3c9e:	1f 91       	pop	r17
    3ca0:	0f 91       	pop	r16
    3ca2:	08 95       	ret

00003ca4 <menu_testModule>:
    3ca4:	8e e1       	ldi	r24, 0x1E	; 30
    3ca6:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3caa:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <menuVmodule>
    3cae:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <test_PipeModule>
    3cb2:	60 93 ad 0c 	sts	0x0CAD, r22	; 0x800cad <editLong>
    3cb6:	70 93 ae 0c 	sts	0x0CAE, r23	; 0x800cae <editLong+0x1>
    3cba:	80 93 af 0c 	sts	0x0CAF, r24	; 0x800caf <editLong+0x2>
    3cbe:	90 93 b0 0c 	sts	0x0CB0, r25	; 0x800cb0 <editLong+0x3>
    3cc2:	0e 94 ee 39 	call	0x73dc	; 0x73dc <lcd_longout>
    3cc6:	80 e0       	ldi	r24, 0x00	; 0
    3cc8:	08 95       	ret

00003cca <menuOnEnterTune>:
    3cca:	8f 3f       	cpi	r24, 0xFF	; 255
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <menuOnEnterTune+0x6>
    3cce:	40 c0       	rjmp	.+128    	; 0x3d50 <menuOnEnterTune+0x86>
    3cd0:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <menuNote>
    3cd4:	6f 3f       	cpi	r22, 0xFF	; 255
    3cd6:	d1 f1       	breq	.+116    	; 0x3d4c <menuOnEnterTune+0x82>
    3cd8:	81 30       	cpi	r24, 0x01	; 1
    3cda:	09 f4       	brne	.+2      	; 0x3cde <menuOnEnterTune+0x14>
    3cdc:	e5 c0       	rjmp	.+458    	; 0x3ea8 <menuOnEnterTune+0x1de>
    3cde:	84 30       	cpi	r24, 0x04	; 4
    3ce0:	09 f4       	brne	.+2      	; 0x3ce4 <menuOnEnterTune+0x1a>
    3ce2:	07 c1       	rjmp	.+526    	; 0x3ef2 <menuOnEnterTune+0x228>
    3ce4:	83 30       	cpi	r24, 0x03	; 3
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <menuOnEnterTune+0x20>
    3ce8:	d0 c0       	rjmp	.+416    	; 0x3e8a <menuOnEnterTune+0x1c0>
    3cea:	98 2f       	mov	r25, r24
    3cec:	9b 7f       	andi	r25, 0xFB	; 251
    3cee:	92 30       	cpi	r25, 0x02	; 2
    3cf0:	41 f1       	breq	.+80     	; 0x3d42 <menuOnEnterTune+0x78>
    3cf2:	85 30       	cpi	r24, 0x05	; 5
    3cf4:	31 f1       	breq	.+76     	; 0x3d42 <menuOnEnterTune+0x78>
    3cf6:	8e e1       	ldi	r24, 0x1E	; 30
    3cf8:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3cfc:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <menuNote>
    3d00:	0e 94 bf 3b 	call	0x777e	; 0x777e <lcd_noteOut>
    3d04:	80 e2       	ldi	r24, 0x20	; 32
    3d06:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3d0a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <notOnOff.2654>
    3d0e:	81 11       	cpse	r24, r1
    3d10:	e6 c0       	rjmp	.+460    	; 0x3ede <menuOnEnterTune+0x214>
    3d12:	81 e6       	ldi	r24, 0x61	; 97
    3d14:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3d18:	85 e7       	ldi	r24, 0x75	; 117
    3d1a:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3d1e:	83 e7       	ldi	r24, 0x73	; 115
    3d20:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3d24:	61 e0       	ldi	r22, 0x01	; 1
    3d26:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <notOnOff.2654>
    3d2a:	88 23       	and	r24, r24
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <menuOnEnterTune+0x66>
    3d2e:	ab c0       	rjmp	.+342    	; 0x3e86 <menuOnEnterTune+0x1bc>
    3d30:	81 e0       	ldi	r24, 0x01	; 1
    3d32:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <keylabel_statcheck>
    3d36:	88 23       	and	r24, r24
    3d38:	09 f4       	brne	.+2      	; 0x3d3c <menuOnEnterTune+0x72>
    3d3a:	9b c0       	rjmp	.+310    	; 0x3e72 <menuOnEnterTune+0x1a8>
    3d3c:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
    3d40:	98 c0       	rjmp	.+304    	; 0x3e72 <menuOnEnterTune+0x1a8>
    3d42:	40 e0       	ldi	r20, 0x00	; 0
    3d44:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <menuVmanual>
    3d48:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <manual_NoteOnOff>
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	08 95       	ret
    3d50:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <minManNote.2652>
    3d54:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <maxManNote.2653>
    3d58:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    3d5c:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    3d60:	3e 96       	adiw	r30, 0x0e	; 14
    3d62:	85 91       	lpm	r24, Z+
    3d64:	95 91       	lpm	r25, Z+
    3d66:	84 30       	cpi	r24, 0x04	; 4
    3d68:	08 f0       	brcs	.+2      	; 0x3d6c <menuOnEnterTune+0xa2>
    3d6a:	88 c0       	rjmp	.+272    	; 0x3e7c <menuOnEnterTune+0x1b2>
    3d6c:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <menuVmanual>
    3d70:	99 27       	eor	r25, r25
    3d72:	fc 01       	movw	r30, r24
    3d74:	ee 0f       	add	r30, r30
    3d76:	ff 1f       	adc	r31, r31
    3d78:	df 01       	movw	r26, r30
    3d7a:	a8 0f       	add	r26, r24
    3d7c:	b9 1f       	adc	r27, r25
    3d7e:	aa 0f       	add	r26, r26
    3d80:	bb 1f       	adc	r27, r27
    3d82:	aa 0f       	add	r26, r26
    3d84:	bb 1f       	adc	r27, r27
    3d86:	ad 51       	subi	r26, 0x1D	; 29
    3d88:	b7 4f       	sbci	r27, 0xF7	; 247
    3d8a:	13 96       	adiw	r26, 0x03	; 3
    3d8c:	3c 91       	ld	r19, X
    3d8e:	13 97       	sbiw	r26, 0x03	; 3
    3d90:	2c 91       	ld	r18, X
    3d92:	32 17       	cp	r19, r18
    3d94:	08 f4       	brcc	.+2      	; 0x3d98 <menuOnEnterTune+0xce>
    3d96:	23 2f       	mov	r18, r19
    3d98:	df 01       	movw	r26, r30
    3d9a:	a8 0f       	add	r26, r24
    3d9c:	b9 1f       	adc	r27, r25
    3d9e:	aa 0f       	add	r26, r26
    3da0:	bb 1f       	adc	r27, r27
    3da2:	aa 0f       	add	r26, r26
    3da4:	bb 1f       	adc	r27, r27
    3da6:	ad 51       	subi	r26, 0x1D	; 29
    3da8:	b7 4f       	sbci	r27, 0xF7	; 247
    3daa:	16 96       	adiw	r26, 0x06	; 6
    3dac:	3c 91       	ld	r19, X
    3dae:	32 17       	cp	r19, r18
    3db0:	08 f4       	brcc	.+2      	; 0x3db4 <menuOnEnterTune+0xea>
    3db2:	23 2f       	mov	r18, r19
    3db4:	df 01       	movw	r26, r30
    3db6:	a8 0f       	add	r26, r24
    3db8:	b9 1f       	adc	r27, r25
    3dba:	aa 0f       	add	r26, r26
    3dbc:	bb 1f       	adc	r27, r27
    3dbe:	aa 0f       	add	r26, r26
    3dc0:	bb 1f       	adc	r27, r27
    3dc2:	ad 51       	subi	r26, 0x1D	; 29
    3dc4:	b7 4f       	sbci	r27, 0xF7	; 247
    3dc6:	19 96       	adiw	r26, 0x09	; 9
    3dc8:	3c 91       	ld	r19, X
    3dca:	32 17       	cp	r19, r18
    3dcc:	08 f4       	brcc	.+2      	; 0x3dd0 <menuOnEnterTune+0x106>
    3dce:	23 2f       	mov	r18, r19
    3dd0:	df 01       	movw	r26, r30
    3dd2:	a8 0f       	add	r26, r24
    3dd4:	b9 1f       	adc	r27, r25
    3dd6:	aa 0f       	add	r26, r26
    3dd8:	bb 1f       	adc	r27, r27
    3dda:	aa 0f       	add	r26, r26
    3ddc:	bb 1f       	adc	r27, r27
    3dde:	ad 51       	subi	r26, 0x1D	; 29
    3de0:	b7 4f       	sbci	r27, 0xF7	; 247
    3de2:	14 96       	adiw	r26, 0x04	; 4
    3de4:	4c 91       	ld	r20, X
    3de6:	14 97       	sbiw	r26, 0x04	; 4
    3de8:	11 96       	adiw	r26, 0x01	; 1
    3dea:	3c 91       	ld	r19, X
    3dec:	34 17       	cp	r19, r20
    3dee:	08 f4       	brcc	.+2      	; 0x3df2 <menuOnEnterTune+0x128>
    3df0:	34 2f       	mov	r19, r20
    3df2:	df 01       	movw	r26, r30
    3df4:	a8 0f       	add	r26, r24
    3df6:	b9 1f       	adc	r27, r25
    3df8:	aa 0f       	add	r26, r26
    3dfa:	bb 1f       	adc	r27, r27
    3dfc:	aa 0f       	add	r26, r26
    3dfe:	bb 1f       	adc	r27, r27
    3e00:	ad 51       	subi	r26, 0x1D	; 29
    3e02:	b7 4f       	sbci	r27, 0xF7	; 247
    3e04:	17 96       	adiw	r26, 0x07	; 7
    3e06:	4c 91       	ld	r20, X
    3e08:	34 17       	cp	r19, r20
    3e0a:	08 f4       	brcc	.+2      	; 0x3e0e <menuOnEnterTune+0x144>
    3e0c:	34 2f       	mov	r19, r20
    3e0e:	e8 0f       	add	r30, r24
    3e10:	f9 1f       	adc	r31, r25
    3e12:	ee 0f       	add	r30, r30
    3e14:	ff 1f       	adc	r31, r31
    3e16:	ee 0f       	add	r30, r30
    3e18:	ff 1f       	adc	r31, r31
    3e1a:	ed 51       	subi	r30, 0x1D	; 29
    3e1c:	f7 4f       	sbci	r31, 0xF7	; 247
    3e1e:	92 85       	ldd	r25, Z+10	; 0x0a
    3e20:	83 2f       	mov	r24, r19
    3e22:	39 17       	cp	r19, r25
    3e24:	08 f4       	brcc	.+2      	; 0x3e28 <menuOnEnterTune+0x15e>
    3e26:	89 2f       	mov	r24, r25
    3e28:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <minManNote.2652>
    3e2c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <maxManNote.2653>
    3e30:	27 fd       	sbrc	r18, 7
    3e32:	74 c0       	rjmp	.+232    	; 0x3f1c <menuOnEnterTune+0x252>
    3e34:	20 93 4f 05 	sts	0x054F, r18	; 0x80054f <menuNote>
    3e38:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <notOnOff.2654>
    3e3c:	68 ef       	ldi	r22, 0xF8	; 248
    3e3e:	7b e0       	ldi	r23, 0x0B	; 11
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    3e46:	6d ef       	ldi	r22, 0xFD	; 253
    3e48:	7b e0       	ldi	r23, 0x0B	; 11
    3e4a:	81 e0       	ldi	r24, 0x01	; 1
    3e4c:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    3e50:	62 e0       	ldi	r22, 0x02	; 2
    3e52:	7c e0       	ldi	r23, 0x0C	; 12
    3e54:	82 e0       	ldi	r24, 0x02	; 2
    3e56:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    3e5a:	64 e0       	ldi	r22, 0x04	; 4
    3e5c:	7c e0       	ldi	r23, 0x0C	; 12
    3e5e:	83 e0       	ldi	r24, 0x03	; 3
    3e60:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    3e64:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
    3e68:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <menuNote>
    3e6c:	6f 3f       	cpi	r22, 0xFF	; 255
    3e6e:	09 f0       	breq	.+2      	; 0x3e72 <menuOnEnterTune+0x1a8>
    3e70:	42 cf       	rjmp	.-380    	; 0x3cf6 <menuOnEnterTune+0x2c>
    3e72:	8e e1       	ldi	r24, 0x1E	; 30
    3e74:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3e78:	8f ef       	ldi	r24, 0xFF	; 255
    3e7a:	08 95       	ret
    3e7c:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <menuVmanual>
    3e80:	80 e0       	ldi	r24, 0x00	; 0
    3e82:	90 e0       	ldi	r25, 0x00	; 0
    3e84:	76 cf       	rjmp	.-276    	; 0x3d72 <menuOnEnterTune+0xa8>
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	53 cf       	rjmp	.-346    	; 0x3d30 <menuOnEnterTune+0x66>
    3e8a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <notOnOff.2654>
    3e8e:	88 23       	and	r24, r24
    3e90:	09 f4       	brne	.+2      	; 0x3e94 <menuOnEnterTune+0x1ca>
    3e92:	4f c0       	rjmp	.+158    	; 0x3f32 <menuOnEnterTune+0x268>
    3e94:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <notOnOff.2654>
    3e98:	40 e0       	ldi	r20, 0x00	; 0
    3e9a:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <menuVmanual>
    3e9e:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <manual_NoteOnOff>
    3ea2:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <menuNote>
    3ea6:	e2 cf       	rjmp	.-60     	; 0x3e6c <menuOnEnterTune+0x1a2>
    3ea8:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <maxManNote.2653>
    3eac:	68 17       	cp	r22, r24
    3eae:	08 f0       	brcs	.+2      	; 0x3eb2 <menuOnEnterTune+0x1e8>
    3eb0:	22 cf       	rjmp	.-444    	; 0x3cf6 <menuOnEnterTune+0x2c>
    3eb2:	40 e0       	ldi	r20, 0x00	; 0
    3eb4:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <menuVmanual>
    3eb8:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <manual_NoteOnOff>
    3ebc:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <menuNote>
    3ec0:	6f 5f       	subi	r22, 0xFF	; 255
    3ec2:	60 93 4f 05 	sts	0x054F, r22	; 0x80054f <menuNote>
    3ec6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <notOnOff.2654>
    3eca:	81 30       	cpi	r24, 0x01	; 1
    3ecc:	79 f6       	brne	.-98     	; 0x3e6c <menuOnEnterTune+0x1a2>
    3ece:	41 e0       	ldi	r20, 0x01	; 1
    3ed0:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <menuVmanual>
    3ed4:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <manual_NoteOnOff>
    3ed8:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <menuNote>
    3edc:	c7 cf       	rjmp	.-114    	; 0x3e6c <menuOnEnterTune+0x1a2>
    3ede:	85 e6       	ldi	r24, 0x65	; 101
    3ee0:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3ee4:	89 e6       	ldi	r24, 0x69	; 105
    3ee6:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3eea:	8e e6       	ldi	r24, 0x6E	; 110
    3eec:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3ef0:	19 cf       	rjmp	.-462    	; 0x3d24 <menuOnEnterTune+0x5a>
    3ef2:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <minManNote.2652>
    3ef6:	86 17       	cp	r24, r22
    3ef8:	08 f0       	brcs	.+2      	; 0x3efc <menuOnEnterTune+0x232>
    3efa:	fd ce       	rjmp	.-518    	; 0x3cf6 <menuOnEnterTune+0x2c>
    3efc:	40 e0       	ldi	r20, 0x00	; 0
    3efe:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <menuVmanual>
    3f02:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <manual_NoteOnOff>
    3f06:	60 91 4f 05 	lds	r22, 0x054F	; 0x80054f <menuNote>
    3f0a:	61 50       	subi	r22, 0x01	; 1
    3f0c:	60 93 4f 05 	sts	0x054F, r22	; 0x80054f <menuNote>
    3f10:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <notOnOff.2654>
    3f14:	81 30       	cpi	r24, 0x01	; 1
    3f16:	09 f0       	breq	.+2      	; 0x3f1a <menuOnEnterTune+0x250>
    3f18:	a9 cf       	rjmp	.-174    	; 0x3e6c <menuOnEnterTune+0x1a2>
    3f1a:	d9 cf       	rjmp	.-78     	; 0x3ece <menuOnEnterTune+0x204>
    3f1c:	8e e1       	ldi	r24, 0x1E	; 30
    3f1e:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3f22:	87 e3       	ldi	r24, 0x37	; 55
    3f24:	93 e0       	ldi	r25, 0x03	; 3
    3f26:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    3f2a:	8f ef       	ldi	r24, 0xFF	; 255
    3f2c:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <menuNote>
    3f30:	85 cf       	rjmp	.-246    	; 0x3e3c <menuOnEnterTune+0x172>
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <notOnOff.2654>
    3f38:	41 e0       	ldi	r20, 0x01	; 1
    3f3a:	af cf       	rjmp	.-162    	; 0x3e9a <menuOnEnterTune+0x1d0>

00003f3c <menuOnExitMidiOut>:
    3f3c:	0e 94 89 08 	call	0x1112	; 0x1112 <eeprom_UpdateMidiOutMap>
    3f40:	80 e0       	ldi	r24, 0x00	; 0
    3f42:	08 95       	ret

00003f44 <menuOnEnterStatusMidiIn>:
    3f44:	1f 93       	push	r17
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	84 e1       	ldi	r24, 0x14	; 20
    3f4c:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3f50:	82 e5       	ldi	r24, 0x52	; 82
    3f52:	93 e0       	ldi	r25, 0x03	; 3
    3f54:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    3f58:	80 91 a8 0c 	lds	r24, 0x0CA8	; 0x800ca8 <midiRxBytesCount>
    3f5c:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <midiRxBytesCount+0x1>
    3f60:	0e 94 81 3b 	call	0x7702	; 0x7702 <lcd_wordout>
    3f64:	8d e2       	ldi	r24, 0x2D	; 45
    3f66:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3f6a:	80 91 a8 0c 	lds	r24, 0x0CA8	; 0x800ca8 <midiRxBytesCount>
    3f6e:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <midiRxBytesCount+0x1>
    3f72:	04 97       	sbiw	r24, 0x04	; 4
    3f74:	08 f5       	brcc	.+66     	; 0x3fb8 <menuOnEnterStatusMidiIn+0x74>
    3f76:	80 91 a8 0c 	lds	r24, 0x0CA8	; 0x800ca8 <midiRxBytesCount>
    3f7a:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <midiRxBytesCount+0x1>
    3f7e:	18 2f       	mov	r17, r24
    3f80:	c0 91 5e 0b 	lds	r28, 0x0B5E	; 0x800b5e <midiRxInIndex>
    3f84:	d0 e0       	ldi	r29, 0x00	; 0
    3f86:	c3 5e       	subi	r28, 0xE3	; 227
    3f88:	d4 4f       	sbci	r29, 0xF4	; 244
    3f8a:	88 23       	and	r24, r24
    3f8c:	59 f0       	breq	.+22     	; 0x3fa4 <menuOnEnterStatusMidiIn+0x60>
    3f8e:	8b e0       	ldi	r24, 0x0B	; 11
    3f90:	ce 31       	cpi	r28, 0x1E	; 30
    3f92:	d8 07       	cpc	r29, r24
    3f94:	10 f4       	brcc	.+4      	; 0x3f9a <menuOnEnterStatusMidiIn+0x56>
    3f96:	cd e3       	ldi	r28, 0x3D	; 61
    3f98:	db e0       	ldi	r29, 0x0B	; 11
    3f9a:	88 81       	ld	r24, Y
    3f9c:	0e 94 d2 39 	call	0x73a4	; 0x73a4 <lcd_hexout>
    3fa0:	11 50       	subi	r17, 0x01	; 1
    3fa2:	29 f4       	brne	.+10     	; 0x3fae <menuOnEnterStatusMidiIn+0x6a>
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	df 91       	pop	r29
    3fa8:	cf 91       	pop	r28
    3faa:	1f 91       	pop	r17
    3fac:	08 95       	ret
    3fae:	21 97       	sbiw	r28, 0x01	; 1
    3fb0:	80 e2       	ldi	r24, 0x20	; 32
    3fb2:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3fb6:	eb cf       	rjmp	.-42     	; 0x3f8e <menuOnEnterStatusMidiIn+0x4a>
    3fb8:	c0 91 5e 0b 	lds	r28, 0x0B5E	; 0x800b5e <midiRxInIndex>
    3fbc:	d0 e0       	ldi	r29, 0x00	; 0
    3fbe:	c3 5e       	subi	r28, 0xE3	; 227
    3fc0:	d4 4f       	sbci	r29, 0xF4	; 244
    3fc2:	14 e0       	ldi	r17, 0x04	; 4
    3fc4:	e4 cf       	rjmp	.-56     	; 0x3f8e <menuOnEnterStatusMidiIn+0x4a>

00003fc6 <menuOnEnterStatusMidiOut>:
    3fc6:	1f 93       	push	r17
    3fc8:	cf 93       	push	r28
    3fca:	df 93       	push	r29
    3fcc:	84 e1       	ldi	r24, 0x14	; 20
    3fce:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    3fd2:	8d e4       	ldi	r24, 0x4D	; 77
    3fd4:	93 e0       	ldi	r25, 0x03	; 3
    3fd6:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    3fda:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <midiTxBytesCount>
    3fde:	90 91 a4 0b 	lds	r25, 0x0BA4	; 0x800ba4 <midiTxBytesCount+0x1>
    3fe2:	0e 94 81 3b 	call	0x7702	; 0x7702 <lcd_wordout>
    3fe6:	8d e2       	ldi	r24, 0x2D	; 45
    3fe8:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    3fec:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <midiTxBytesCount>
    3ff0:	90 91 a4 0b 	lds	r25, 0x0BA4	; 0x800ba4 <midiTxBytesCount+0x1>
    3ff4:	04 97       	sbiw	r24, 0x04	; 4
    3ff6:	08 f5       	brcc	.+66     	; 0x403a <menuOnEnterStatusMidiOut+0x74>
    3ff8:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <midiTxBytesCount>
    3ffc:	90 91 a4 0b 	lds	r25, 0x0BA4	; 0x800ba4 <midiTxBytesCount+0x1>
    4000:	18 2f       	mov	r17, r24
    4002:	c0 91 19 0b 	lds	r28, 0x0B19	; 0x800b19 <midiTxInIndex>
    4006:	d0 e0       	ldi	r29, 0x00	; 0
    4008:	c3 5c       	subi	r28, 0xC3	; 195
    400a:	d4 4f       	sbci	r29, 0xF4	; 244
    400c:	88 23       	and	r24, r24
    400e:	59 f0       	breq	.+22     	; 0x4026 <menuOnEnterStatusMidiOut+0x60>
    4010:	8b e0       	ldi	r24, 0x0B	; 11
    4012:	ce 33       	cpi	r28, 0x3E	; 62
    4014:	d8 07       	cpc	r29, r24
    4016:	10 f4       	brcc	.+4      	; 0x401c <menuOnEnterStatusMidiOut+0x56>
    4018:	cd e5       	ldi	r28, 0x5D	; 93
    401a:	db e0       	ldi	r29, 0x0B	; 11
    401c:	88 81       	ld	r24, Y
    401e:	0e 94 d2 39 	call	0x73a4	; 0x73a4 <lcd_hexout>
    4022:	11 50       	subi	r17, 0x01	; 1
    4024:	29 f4       	brne	.+10     	; 0x4030 <menuOnEnterStatusMidiOut+0x6a>
    4026:	80 e0       	ldi	r24, 0x00	; 0
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	1f 91       	pop	r17
    402e:	08 95       	ret
    4030:	21 97       	sbiw	r28, 0x01	; 1
    4032:	80 e2       	ldi	r24, 0x20	; 32
    4034:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4038:	eb cf       	rjmp	.-42     	; 0x4010 <menuOnEnterStatusMidiOut+0x4a>
    403a:	c0 91 19 0b 	lds	r28, 0x0B19	; 0x800b19 <midiTxInIndex>
    403e:	d0 e0       	ldi	r29, 0x00	; 0
    4040:	c3 5c       	subi	r28, 0xC3	; 195
    4042:	d4 4f       	sbci	r29, 0xF4	; 244
    4044:	14 e0       	ldi	r17, 0x04	; 4
    4046:	e4 cf       	rjmp	.-56     	; 0x4010 <menuOnEnterStatusMidiOut+0x4a>

00004048 <menuOnExitMidiIn>:
    4048:	0e 94 42 08 	call	0x1084	; 0x1084 <eeprom_UpdateMidiInMap>
    404c:	80 e0       	ldi	r24, 0x00	; 0
    404e:	08 95       	ret

00004050 <menuOnExitManual>:
    4050:	0e 94 fb 07 	call	0xff6	; 0xff6 <eeprom_UpdateManualMap>
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	08 95       	ret

00004058 <menuOnExitModules>:
    4058:	0e 94 30 09 	call	0x1260	; 0x1260 <eeprom_UpdateModules>
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	08 95       	ret

00004060 <menuOnEnterLogDisp>:
    4060:	cf 93       	push	r28
    4062:	df 93       	push	r29
    4064:	8f 3f       	cpi	r24, 0xFF	; 255
    4066:	09 f4       	brne	.+2      	; 0x406a <menuOnEnterLogDisp+0xa>
    4068:	52 c0       	rjmp	.+164    	; 0x410e <menuOnEnterLogDisp+0xae>
    406a:	84 30       	cpi	r24, 0x04	; 4
    406c:	51 f1       	breq	.+84     	; 0x40c2 <menuOnEnterLogDisp+0x62>
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	09 f4       	brne	.+2      	; 0x4074 <menuOnEnterLogDisp+0x14>
    4072:	60 c0       	rjmp	.+192    	; 0x4134 <menuOnEnterLogDisp+0xd4>
    4074:	83 30       	cpi	r24, 0x03	; 3
    4076:	39 f0       	breq	.+14     	; 0x4086 <menuOnEnterLogDisp+0x26>
    4078:	85 30       	cpi	r24, 0x05	; 5
    407a:	29 f0       	breq	.+10     	; 0x4086 <menuOnEnterLogDisp+0x26>
    407c:	c0 e0       	ldi	r28, 0x00	; 0
    407e:	8c 2f       	mov	r24, r28
    4080:	df 91       	pop	r29
    4082:	cf 91       	pop	r28
    4084:	08 95       	ret
    4086:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <showText.2696>
    408a:	80 95       	com	r24
    408c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <showText.2696>
    4090:	84 e1       	ldi	r24, 0x14	; 20
    4092:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4096:	00 d9       	rcall	.-3584   	; 0x3298 <log_count>
    4098:	81 11       	cpse	r24, r1
    409a:	20 c0       	rjmp	.+64     	; 0x40dc <menuOnEnterLogDisp+0x7c>
    409c:	80 e3       	ldi	r24, 0x30	; 48
    409e:	93 e0       	ldi	r25, 0x03	; 3
    40a0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    40a4:	c0 e0       	ldi	r28, 0x00	; 0
    40a6:	61 e0       	ldi	r22, 0x01	; 1
    40a8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <showText.2696>
    40ac:	8f 3f       	cpi	r24, 0xFF	; 255
    40ae:	09 f0       	breq	.+2      	; 0x40b2 <menuOnEnterLogDisp+0x52>
    40b0:	60 e0       	ldi	r22, 0x00	; 0
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <keylabel_statcheck>
    40b8:	88 23       	and	r24, r24
    40ba:	09 f3       	breq	.-62     	; 0x407e <menuOnEnterLogDisp+0x1e>
    40bc:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
    40c0:	de cf       	rjmp	.-68     	; 0x407e <menuOnEnterLogDisp+0x1e>
    40c2:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <logEntryNr.2695>
    40c6:	88 23       	and	r24, r24
    40c8:	19 f3       	breq	.-58     	; 0x4090 <menuOnEnterLogDisp+0x30>
    40ca:	81 50       	subi	r24, 0x01	; 1
    40cc:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <logEntryNr.2695>
    40d0:	84 e1       	ldi	r24, 0x14	; 20
    40d2:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    40d6:	e0 d8       	rcall	.-3648   	; 0x3298 <log_count>
    40d8:	88 23       	and	r24, r24
    40da:	01 f3       	breq	.-64     	; 0x409c <menuOnEnterLogDisp+0x3c>
    40dc:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <logEntryNr.2695>
    40e0:	8f 5f       	subi	r24, 0xFF	; 255
    40e2:	0e 94 12 3a 	call	0x7424	; 0x7424 <lcd_dec2out>
    40e6:	8a e3       	ldi	r24, 0x3A	; 58
    40e8:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    40ec:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <showText.2696>
    40f0:	88 23       	and	r24, r24
    40f2:	81 f1       	breq	.+96     	; 0x4154 <menuOnEnterLogDisp+0xf4>
    40f4:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <logEntryNr.2695>
    40f8:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <getErrorText>
    40fc:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    4100:	0e 94 55 3c 	call	0x78aa	; 0x78aa <lcd_clrEol>
    4104:	84 e1       	ldi	r24, 0x14	; 20
    4106:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    410a:	cf ef       	ldi	r28, 0xFF	; 255
    410c:	cc cf       	rjmp	.-104    	; 0x40a6 <menuOnEnterLogDisp+0x46>
    410e:	c4 d8       	rcall	.-3704   	; 0x3298 <log_count>
    4110:	81 50       	subi	r24, 0x01	; 1
    4112:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <logEntryNr.2695>
    4116:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <showText.2696>
    411a:	68 ef       	ldi	r22, 0xF8	; 248
    411c:	7b e0       	ldi	r23, 0x0B	; 11
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    4124:	62 ef       	ldi	r22, 0xF2	; 242
    4126:	7b e0       	ldi	r23, 0x0B	; 11
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    412e:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
    4132:	ae cf       	rjmp	.-164    	; 0x4090 <menuOnEnterLogDisp+0x30>
    4134:	c0 91 0d 02 	lds	r28, 0x020D	; 0x80020d <logEntryNr.2695>
    4138:	d0 e0       	ldi	r29, 0x00	; 0
    413a:	21 96       	adiw	r28, 0x01	; 1
    413c:	ad d8       	rcall	.-3750   	; 0x3298 <log_count>
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	c8 17       	cp	r28, r24
    4142:	d9 07       	cpc	r29, r25
    4144:	0c f0       	brlt	.+2      	; 0x4148 <menuOnEnterLogDisp+0xe8>
    4146:	a4 cf       	rjmp	.-184    	; 0x4090 <menuOnEnterLogDisp+0x30>
    4148:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <logEntryNr.2695>
    414c:	8f 5f       	subi	r24, 0xFF	; 255
    414e:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <logEntryNr.2695>
    4152:	9e cf       	rjmp	.-196    	; 0x4090 <menuOnEnterLogDisp+0x30>
    4154:	60 e2       	ldi	r22, 0x20	; 32
    4156:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <logEntryNr.2695>
    415a:	ed d9       	rcall	.-3110   	; 0x3536 <log_getShortTextFromIndex>
    415c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <lcd_puts>
    4160:	cf cf       	rjmp	.-98     	; 0x4100 <menuOnEnterLogDisp+0xa0>

00004162 <menuOnEnterUSBprotokoll>:
    4162:	cf 93       	push	r28
    4164:	82 e1       	ldi	r24, 0x12	; 18
    4166:	93 e0       	ldi	r25, 0x03	; 3
    4168:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    416c:	95 d8       	rcall	.-3798   	; 0x3298 <log_count>
    416e:	88 23       	and	r24, r24
    4170:	91 f0       	breq	.+36     	; 0x4196 <menuOnEnterUSBprotokoll+0x34>
    4172:	cf ef       	ldi	r28, 0xFF	; 255
    4174:	c8 0f       	add	r28, r24
    4176:	6f ef       	ldi	r22, 0xFF	; 255
    4178:	8c 2f       	mov	r24, r28
    417a:	dd d9       	rcall	.-3142   	; 0x3536 <log_getShortTextFromIndex>
    417c:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    4180:	86 e2       	ldi	r24, 0x26	; 38
    4182:	9c e0       	ldi	r25, 0x0C	; 12
    4184:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    4188:	8c 2f       	mov	r24, r28
    418a:	c1 50       	subi	r28, 0x01	; 1
    418c:	81 11       	cpse	r24, r1
    418e:	f3 cf       	rjmp	.-26     	; 0x4176 <menuOnEnterUSBprotokoll+0x14>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	cf 91       	pop	r28
    4194:	08 95       	ret
    4196:	88 e1       	ldi	r24, 0x18	; 24
    4198:	93 e0       	ldi	r25, 0x03	; 3
    419a:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    419e:	80 e0       	ldi	r24, 0x00	; 0
    41a0:	cf 91       	pop	r28
    41a2:	08 95       	ret

000041a4 <menuOnEnterUSBsendHW>:
    41a4:	bf 92       	push	r11
    41a6:	cf 92       	push	r12
    41a8:	df 92       	push	r13
    41aa:	ef 92       	push	r14
    41ac:	ff 92       	push	r15
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	80 ee       	ldi	r24, 0xE0	; 224
    41b8:	92 e0       	ldi	r25, 0x02	; 2
    41ba:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    41be:	8d ec       	ldi	r24, 0xCD	; 205
    41c0:	92 e0       	ldi	r25, 0x02	; 2
    41c2:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    41c6:	61 eb       	ldi	r22, 0xB1	; 177
    41c8:	7c e0       	ldi	r23, 0x0C	; 12
    41ca:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <pipe_ModuleAssnRead>
    41ce:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    41d2:	22 e7       	ldi	r18, 0x72	; 114
    41d4:	fc 01       	movw	r30, r24
    41d6:	20 83       	st	Z, r18
    41d8:	bc 01       	movw	r22, r24
    41da:	6e 5f       	subi	r22, 0xFE	; 254
    41dc:	7f 4f       	sbci	r23, 0xFF	; 255
    41de:	20 e2       	ldi	r18, 0x20	; 32
    41e0:	21 83       	std	Z+1, r18	; 0x01
    41e2:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <pipe_ModuleAssnWrite>
    41e6:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    41ea:	27 e7       	ldi	r18, 0x77	; 119
    41ec:	fc 01       	movw	r30, r24
    41ee:	20 83       	st	Z, r18
    41f0:	81 eb       	ldi	r24, 0xB1	; 177
    41f2:	9c e0       	ldi	r25, 0x0C	; 12
    41f4:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    41f8:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <serial0SER_USB_sendCRLF>
    41fc:	8b eb       	ldi	r24, 0xBB	; 187
    41fe:	92 e0       	ldi	r25, 0x02	; 2
    4200:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    4204:	61 eb       	ldi	r22, 0xB1	; 177
    4206:	7c e0       	ldi	r23, 0x0C	; 12
    4208:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <pipe_ModuleTested>
    420c:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    4210:	81 eb       	ldi	r24, 0xB1	; 177
    4212:	9c e0       	ldi	r25, 0x0C	; 12
    4214:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    4218:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <serial0SER_USB_sendCRLF>
    421c:	33 ee       	ldi	r19, 0xE3	; 227
    421e:	e3 2e       	mov	r14, r19
    4220:	38 e0       	ldi	r19, 0x08	; 8
    4222:	f3 2e       	mov	r15, r19
    4224:	c1 2c       	mov	r12, r1
    4226:	4d e3       	ldi	r20, 0x3D	; 61
    4228:	d4 2e       	mov	r13, r20
    422a:	82 eb       	ldi	r24, 0xB2	; 178
    422c:	92 e0       	ldi	r25, 0x02	; 2
    422e:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    4232:	61 eb       	ldi	r22, 0xB1	; 177
    4234:	7c e0       	ldi	r23, 0x0C	; 12
    4236:	8c 2d       	mov	r24, r12
    4238:	0e 94 68 3b 	call	0x76d0	; 0x76d0 <putChar_Manual>
    423c:	81 eb       	ldi	r24, 0xB1	; 177
    423e:	9c e0       	ldi	r25, 0x0C	; 12
    4240:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    4244:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <serial0SER_USB_sendCRLF>
    4248:	e7 01       	movw	r28, r14
    424a:	10 e3       	ldi	r17, 0x30	; 48
    424c:	8a ea       	ldi	r24, 0xAA	; 170
    424e:	92 e0       	ldi	r25, 0x02	; 2
    4250:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    4254:	81 2f       	mov	r24, r17
    4256:	0e 94 17 39 	call	0x722e	; 0x722e <serial0SER_USBSend>
    425a:	8d e2       	ldi	r24, 0x2D	; 45
    425c:	0e 94 17 39 	call	0x722e	; 0x722e <serial0SER_USBSend>
    4260:	80 e2       	ldi	r24, 0x20	; 32
    4262:	0e 94 17 39 	call	0x722e	; 0x722e <serial0SER_USBSend>
    4266:	61 eb       	ldi	r22, 0xB1	; 177
    4268:	7c e0       	ldi	r23, 0x0C	; 12
    426a:	88 81       	ld	r24, Y
    426c:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    4270:	bc 01       	movw	r22, r24
    4272:	6f 5f       	subi	r22, 0xFF	; 255
    4274:	7f 4f       	sbci	r23, 0xFF	; 255
    4276:	00 e2       	ldi	r16, 0x20	; 32
    4278:	fc 01       	movw	r30, r24
    427a:	00 83       	st	Z, r16
    427c:	89 81       	ldd	r24, Y+1	; 0x01
    427e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    4282:	bc 01       	movw	r22, r24
    4284:	6f 5f       	subi	r22, 0xFF	; 255
    4286:	7f 4f       	sbci	r23, 0xFF	; 255
    4288:	fc 01       	movw	r30, r24
    428a:	00 83       	st	Z, r16
    428c:	8a 81       	ldd	r24, Y+2	; 0x02
    428e:	0e 94 bb 3a 	call	0x7576	; 0x7576 <putChar_hex>
    4292:	fc 01       	movw	r30, r24
    4294:	d0 82       	st	Z, r13
    4296:	81 eb       	ldi	r24, 0xB1	; 177
    4298:	9c e0       	ldi	r25, 0x0C	; 12
    429a:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    429e:	88 81       	ld	r24, Y
    42a0:	87 fd       	sbrc	r24, 7
    42a2:	51 c0       	rjmp	.+162    	; 0x4346 <menuOnEnterUSBsendHW+0x1a2>
    42a4:	61 eb       	ldi	r22, 0xB1	; 177
    42a6:	7c e0       	ldi	r23, 0x0C	; 12
    42a8:	0e 94 0f 3b 	call	0x761e	; 0x761e <putChar_Note>
    42ac:	bc 01       	movw	r22, r24
    42ae:	6f 5f       	subi	r22, 0xFF	; 255
    42b0:	7f 4f       	sbci	r23, 0xFF	; 255
    42b2:	2d e2       	ldi	r18, 0x2D	; 45
    42b4:	b2 2e       	mov	r11, r18
    42b6:	fc 01       	movw	r30, r24
    42b8:	b0 82       	st	Z, r11
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	0e 94 0f 3b 	call	0x761e	; 0x761e <putChar_Note>
    42c0:	fc 01       	movw	r30, r24
    42c2:	00 83       	st	Z, r16
    42c4:	81 eb       	ldi	r24, 0xB1	; 177
    42c6:	9c e0       	ldi	r25, 0x0C	; 12
    42c8:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    42cc:	8c e9       	ldi	r24, 0x9C	; 156
    42ce:	92 e0       	ldi	r25, 0x02	; 2
    42d0:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    42d4:	8a 81       	ldd	r24, Y+2	; 0x02
    42d6:	82 95       	swap	r24
    42d8:	86 95       	lsr	r24
    42da:	87 70       	andi	r24, 0x07	; 7
    42dc:	80 5d       	subi	r24, 0xD0	; 208
    42de:	0e 94 17 39 	call	0x722e	; 0x722e <serial0SER_USBSend>
    42e2:	85 e9       	ldi	r24, 0x95	; 149
    42e4:	92 e0       	ldi	r25, 0x02	; 2
    42e6:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    42ea:	8a 81       	ldd	r24, Y+2	; 0x02
    42ec:	61 eb       	ldi	r22, 0xB1	; 177
    42ee:	7c e0       	ldi	r23, 0x0C	; 12
    42f0:	8f 71       	andi	r24, 0x1F	; 31
    42f2:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    42f6:	fc 01       	movw	r30, r24
    42f8:	b1 92       	st	Z+, r11
    42fa:	bf 01       	movw	r22, r30
    42fc:	9a 81       	ldd	r25, Y+2	; 0x02
    42fe:	9f 71       	andi	r25, 0x1F	; 31
    4300:	88 81       	ld	r24, Y
    4302:	98 1b       	sub	r25, r24
    4304:	89 81       	ldd	r24, Y+1	; 0x01
    4306:	89 0f       	add	r24, r25
    4308:	0e 94 64 3a 	call	0x74c8	; 0x74c8 <putChar_Dec2>
    430c:	81 eb       	ldi	r24, 0xB1	; 177
    430e:	9c e0       	ldi	r25, 0x0C	; 12
    4310:	0e 94 a5 38 	call	0x714a	; 0x714a <serial0SER_USB_sendString>
    4314:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <serial0SER_USB_sendCRLF>
    4318:	1f 5f       	subi	r17, 0xFF	; 255
    431a:	23 96       	adiw	r28, 0x03	; 3
    431c:	14 33       	cpi	r17, 0x34	; 52
    431e:	09 f0       	breq	.+2      	; 0x4322 <menuOnEnterUSBsendHW+0x17e>
    4320:	95 cf       	rjmp	.-214    	; 0x424c <menuOnEnterUSBsendHW+0xa8>
    4322:	c3 94       	inc	r12
    4324:	fc e0       	ldi	r31, 0x0C	; 12
    4326:	ef 0e       	add	r14, r31
    4328:	f1 1c       	adc	r15, r1
    432a:	84 e0       	ldi	r24, 0x04	; 4
    432c:	c8 12       	cpse	r12, r24
    432e:	7d cf       	rjmp	.-262    	; 0x422a <menuOnEnterUSBsendHW+0x86>
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	df 91       	pop	r29
    4334:	cf 91       	pop	r28
    4336:	1f 91       	pop	r17
    4338:	0f 91       	pop	r16
    433a:	ff 90       	pop	r15
    433c:	ef 90       	pop	r14
    433e:	df 90       	pop	r13
    4340:	cf 90       	pop	r12
    4342:	bf 90       	pop	r11
    4344:	08 95       	ret
    4346:	84 ea       	ldi	r24, 0xA4	; 164
    4348:	92 e0       	ldi	r25, 0x02	; 2
    434a:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    434e:	e2 cf       	rjmp	.-60     	; 0x4314 <menuOnEnterUSBsendHW+0x170>

00004350 <menuOnExitUSBactive>:
    4350:	0e 94 73 09 	call	0x12e6	; 0x12e6 <eeprom_UpdateUSB>
    4354:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <serusb_Active>
    4358:	8f 3f       	cpi	r24, 0xFF	; 255
    435a:	11 f0       	breq	.+4      	; 0x4360 <menuOnExitUSBactive+0x10>
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	08 95       	ret
    4360:	89 ef       	ldi	r24, 0xF9	; 249
    4362:	92 e0       	ldi	r25, 0x02	; 2
    4364:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    4368:	8c ee       	ldi	r24, 0xEC	; 236
    436a:	9b e0       	ldi	r25, 0x0B	; 11
    436c:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    4370:	86 e2       	ldi	r24, 0x26	; 38
    4372:	9c e0       	ldi	r25, 0x0C	; 12
    4374:	0e 94 73 38 	call	0x70e6	; 0x70e6 <serial0SER_USB_sendStringP>
    4378:	80 e0       	ldi	r24, 0x00	; 0
    437a:	08 95       	ret

0000437c <menuOnExitKey>:
    437c:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    4380:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    4384:	3e 96       	adiw	r30, 0x0e	; 14
    4386:	85 91       	lpm	r24, Z+
    4388:	95 91       	lpm	r25, Z+
    438a:	84 30       	cpi	r24, 0x04	; 4
    438c:	10 f0       	brcs	.+4      	; 0x4392 <menuOnExitKey+0x16>
    438e:	80 e0       	ldi	r24, 0x00	; 0
    4390:	08 95       	ret
    4392:	40 91 70 05 	lds	r20, 0x0570	; 0x800570 <menuVMenuSoftKey>
    4396:	50 91 71 05 	lds	r21, 0x0571	; 0x800571 <menuVMenuSoftKey+0x1>
    439a:	41 15       	cp	r20, r1
    439c:	51 05       	cpc	r21, r1
    439e:	29 f0       	breq	.+10     	; 0x43aa <menuOnExitKey+0x2e>
    43a0:	fa 01       	movw	r30, r20
    43a2:	24 91       	lpm	r18, Z
    43a4:	2f 73       	andi	r18, 0x3F	; 63
    43a6:	21 30       	cpi	r18, 0x01	; 1
    43a8:	51 f0       	breq	.+20     	; 0x43be <menuOnExitKey+0x42>
    43aa:	fc 01       	movw	r30, r24
    43ac:	ff 27       	eor	r31, r31
    43ae:	ee 0f       	add	r30, r30
    43b0:	ff 1f       	adc	r31, r31
    43b2:	eb 5b       	subi	r30, 0xBB	; 187
    43b4:	fa 4f       	sbci	r31, 0xFA	; 250
    43b6:	11 82       	std	Z+1, r1	; 0x01
    43b8:	10 82       	st	Z, r1
    43ba:	80 e0       	ldi	r24, 0x00	; 0
    43bc:	08 95       	ret
    43be:	31 96       	adiw	r30, 0x01	; 1
    43c0:	24 91       	lpm	r18, Z
    43c2:	24 ff       	sbrs	r18, 4
    43c4:	f2 cf       	rjmp	.-28     	; 0x43aa <menuOnExitKey+0x2e>
    43c6:	fc 01       	movw	r30, r24
    43c8:	ff 27       	eor	r31, r31
    43ca:	ee 0f       	add	r30, r30
    43cc:	ff 1f       	adc	r31, r31
    43ce:	eb 5b       	subi	r30, 0xBB	; 187
    43d0:	fa 4f       	sbci	r31, 0xFA	; 250
    43d2:	51 83       	std	Z+1, r21	; 0x01
    43d4:	40 83       	st	Z, r20
    43d6:	db cf       	rjmp	.-74     	; 0x438e <menuOnExitKey+0x12>

000043d8 <menuOnExitMidiActiveSense>:
    43d8:	0e 94 89 08 	call	0x1112	; 0x1112 <eeprom_UpdateMidiOutMap>
    43dc:	80 e0       	ldi	r24, 0x00	; 0
    43de:	08 95       	ret

000043e0 <menuOnEnterPwrOn>:
    43e0:	cf 93       	push	r28
    43e2:	2e 9a       	sbi	0x05, 6	; 5
    43e4:	83 e1       	ldi	r24, 0x13	; 19
    43e6:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pipe_PowerStatus>
    43ea:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
    43ee:	8c e0       	ldi	r24, 0x0C	; 12
    43f0:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    43f4:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <pipe_PowerStatus>
    43f8:	84 fd       	sbrc	r24, 4
    43fa:	09 c0       	rjmp	.+18     	; 0x440e <menuOnEnterPwrOn+0x2e>
    43fc:	89 e0       	ldi	r24, 0x09	; 9
    43fe:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4402:	8c 2f       	mov	r24, r28
    4404:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	cf 91       	pop	r28
    440c:	08 95       	ret
    440e:	80 e2       	ldi	r24, 0x20	; 32
    4410:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4414:	8c 2f       	mov	r24, r28
    4416:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    441a:	80 e0       	ldi	r24, 0x00	; 0
    441c:	cf 91       	pop	r28
    441e:	08 95       	ret

00004420 <menuOnEnterPwrOff>:
    4420:	cf 93       	push	r28
    4422:	2e 98       	cbi	0x05, 6	; 5
    4424:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <pipe_PowerStatus>
    4428:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
    442c:	8c e0       	ldi	r24, 0x0C	; 12
    442e:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4432:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <pipe_PowerStatus>
    4436:	84 fd       	sbrc	r24, 4
    4438:	09 c0       	rjmp	.+18     	; 0x444c <menuOnEnterPwrOff+0x2c>
    443a:	89 e0       	ldi	r24, 0x09	; 9
    443c:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4440:	8c 2f       	mov	r24, r28
    4442:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	cf 91       	pop	r28
    444a:	08 95       	ret
    444c:	80 e2       	ldi	r24, 0x20	; 32
    444e:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4452:	8c 2f       	mov	r24, r28
    4454:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	cf 91       	pop	r28
    445c:	08 95       	ret

0000445e <menuOnEnterEEBackup>:
    445e:	8e e1       	ldi	r24, 0x1E	; 30
    4460:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4464:	88 e2       	ldi	r24, 0x28	; 40
    4466:	93 e0       	ldi	r25, 0x03	; 3
    4468:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    446c:	0e 94 ad 0c 	call	0x195a	; 0x195a <eeprom_Backup>
    4470:	8e e1       	ldi	r24, 0x1E	; 30
    4472:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4476:	80 e2       	ldi	r24, 0x20	; 32
    4478:	93 e0       	ldi	r25, 0x03	; 3
    447a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    447e:	8f b7       	in	r24, 0x3f	; 63
    4480:	f8 94       	cli
    4482:	e1 e3       	ldi	r30, 0x31	; 49
    4484:	f2 e0       	ldi	r31, 0x02	; 2
    4486:	94 e6       	ldi	r25, 0x64	; 100
    4488:	96 87       	std	Z+14, r25	; 0x0e
    448a:	17 86       	std	Z+15, r1	; 0x0f
    448c:	8f bf       	out	0x3f, r24	; 63
    448e:	80 e0       	ldi	r24, 0x00	; 0
    4490:	08 95       	ret

00004492 <menuOnEnterEERestore>:
    4492:	8e e1       	ldi	r24, 0x1E	; 30
    4494:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4498:	88 e2       	ldi	r24, 0x28	; 40
    449a:	93 e0       	ldi	r25, 0x03	; 3
    449c:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    44a0:	0e 94 ca 0c 	call	0x1994	; 0x1994 <eeprom_Restore>
    44a4:	8e e1       	ldi	r24, 0x1E	; 30
    44a6:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    44aa:	80 e2       	ldi	r24, 0x20	; 32
    44ac:	93 e0       	ldi	r25, 0x03	; 3
    44ae:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    44b2:	8f b7       	in	r24, 0x3f	; 63
    44b4:	f8 94       	cli
    44b6:	e1 e3       	ldi	r30, 0x31	; 49
    44b8:	f2 e0       	ldi	r31, 0x02	; 2
    44ba:	94 e6       	ldi	r25, 0x64	; 100
    44bc:	96 87       	std	Z+14, r25	; 0x0e
    44be:	17 86       	std	Z+15, r1	; 0x0f
    44c0:	8f bf       	out	0x3f, r24	; 63
    44c2:	80 e0       	ldi	r24, 0x00	; 0
    44c4:	08 95       	ret

000044c6 <menuOnEnterEEUpdate>:
    44c6:	8e e1       	ldi	r24, 0x1E	; 30
    44c8:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    44cc:	88 e2       	ldi	r24, 0x28	; 40
    44ce:	93 e0       	ldi	r25, 0x03	; 3
    44d0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    44d4:	0e 94 46 0b 	call	0x168c	; 0x168c <eeprom_UpdateALL>
    44d8:	8e e1       	ldi	r24, 0x1E	; 30
    44da:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    44de:	80 e2       	ldi	r24, 0x20	; 32
    44e0:	93 e0       	ldi	r25, 0x03	; 3
    44e2:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <lcd_puts_P>
    44e6:	8f b7       	in	r24, 0x3f	; 63
    44e8:	f8 94       	cli
    44ea:	e1 e3       	ldi	r30, 0x31	; 49
    44ec:	f2 e0       	ldi	r31, 0x02	; 2
    44ee:	94 e6       	ldi	r25, 0x64	; 100
    44f0:	96 87       	std	Z+14, r25	; 0x0e
    44f2:	17 86       	std	Z+15, r1	; 0x0f
    44f4:	8f bf       	out	0x3f, r24	; 63
    44f6:	80 e0       	ldi	r24, 0x00	; 0
    44f8:	08 95       	ret

000044fa <menuOnEnterPwrRest>:
    44fa:	cf 93       	push	r28
    44fc:	2e 98       	cbi	0x05, 6	; 5
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <pipe_PowerStatus>
    4504:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
    4508:	8c e0       	ldi	r24, 0x0C	; 12
    450a:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    450e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <pipe_PowerStatus>
    4512:	84 fd       	sbrc	r24, 4
    4514:	11 c0       	rjmp	.+34     	; 0x4538 <menuOnEnterPwrRest+0x3e>
    4516:	89 e0       	ldi	r24, 0x09	; 9
    4518:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    451c:	8c 2f       	mov	r24, r28
    451e:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4522:	8f b7       	in	r24, 0x3f	; 63
    4524:	f8 94       	cli
    4526:	92 e3       	ldi	r25, 0x32	; 50
    4528:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <swTimer+0x2>
    452c:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <swTimer+0x3>
    4530:	8f bf       	out	0x3f, r24	; 63
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	cf 91       	pop	r28
    4536:	08 95       	ret
    4538:	80 e2       	ldi	r24, 0x20	; 32
    453a:	ee cf       	rjmp	.-36     	; 0x4518 <menuOnEnterPwrRest+0x1e>

0000453c <menu_ModuleTestExecute>:
    453c:	cf 93       	push	r28
    453e:	df 93       	push	r29
    4540:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <menu_TestModuleBitCounter>
    4544:	8e 2f       	mov	r24, r30
    4546:	8d 7f       	andi	r24, 0xFD	; 253
    4548:	8d 3f       	cpi	r24, 0xFD	; 253
    454a:	09 f4       	brne	.+2      	; 0x454e <menu_ModuleTestExecute+0x12>
    454c:	45 c0       	rjmp	.+138    	; 0x45d8 <menu_ModuleTestExecute+0x9c>
    454e:	ee 3f       	cpi	r30, 0xFE	; 254
    4550:	09 f4       	brne	.+2      	; 0x4554 <menu_ModuleTestExecute+0x18>
    4552:	a9 c0       	rjmp	.+338    	; 0x46a6 <menu_ModuleTestExecute+0x16a>
    4554:	40 91 1a 05 	lds	r20, 0x051A	; 0x80051a <menu_TestModuleErrorList>
    4558:	50 91 1b 05 	lds	r21, 0x051B	; 0x80051b <menu_TestModuleErrorList+0x1>
    455c:	60 91 1c 05 	lds	r22, 0x051C	; 0x80051c <menu_TestModuleErrorList+0x2>
    4560:	70 91 1d 05 	lds	r23, 0x051D	; 0x80051d <menu_TestModuleErrorList+0x3>
    4564:	76 95       	lsr	r23
    4566:	67 95       	ror	r22
    4568:	57 95       	ror	r21
    456a:	47 95       	ror	r20
    456c:	40 93 1a 05 	sts	0x051A, r20	; 0x80051a <menu_TestModuleErrorList>
    4570:	50 93 1b 05 	sts	0x051B, r21	; 0x80051b <menu_TestModuleErrorList+0x1>
    4574:	60 93 1c 05 	sts	0x051C, r22	; 0x80051c <menu_TestModuleErrorList+0x2>
    4578:	70 93 1d 05 	sts	0x051D, r23	; 0x80051d <menu_TestModuleErrorList+0x3>
    457c:	ae 2f       	mov	r26, r30
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <menu_TestModulePattern>
    4584:	aa 0f       	add	r26, r26
    4586:	bb 1f       	adc	r27, r27
    4588:	aa 0f       	add	r26, r26
    458a:	bb 1f       	adc	r27, r27
    458c:	aa 0f       	add	r26, r26
    458e:	bb 1f       	adc	r27, r27
    4590:	ed 01       	movw	r28, r26
    4592:	c5 5b       	subi	r28, 0xB5	; 181
    4594:	dd 4f       	sbci	r29, 0xFD	; 253
    4596:	9e 81       	ldd	r25, Y+6	; 0x06
    4598:	98 23       	and	r25, r24
    459a:	a1 f0       	breq	.+40     	; 0x45c4 <menu_ModuleTestExecute+0x88>
    459c:	a5 5b       	subi	r26, 0xB5	; 181
    459e:	bd 4f       	sbci	r27, 0xFD	; 253
    45a0:	11 96       	adiw	r26, 0x01	; 1
    45a2:	9c 91       	ld	r25, X
    45a4:	11 97       	sbiw	r26, 0x01	; 1
    45a6:	89 2b       	or	r24, r25
    45a8:	11 96       	adiw	r26, 0x01	; 1
    45aa:	8c 93       	st	X, r24
    45ac:	ef 5f       	subi	r30, 0xFF	; 255
    45ae:	e0 93 56 05 	sts	0x0556, r30	; 0x800556 <menu_TestModuleBitCounter>
    45b2:	e0 32       	cpi	r30, 0x20	; 32
    45b4:	08 f4       	brcc	.+2      	; 0x45b8 <menu_ModuleTestExecute+0x7c>
    45b6:	bf c0       	rjmp	.+382    	; 0x4736 <menu_ModuleTestExecute+0x1fa>
    45b8:	e0 32       	cpi	r30, 0x20	; 32
    45ba:	09 f4       	brne	.+2      	; 0x45be <menu_ModuleTestExecute+0x82>
    45bc:	7e c0       	rjmp	.+252    	; 0x46ba <menu_ModuleTestExecute+0x17e>
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	08 95       	ret
    45c4:	70 68       	ori	r23, 0x80	; 128
    45c6:	40 93 1a 05 	sts	0x051A, r20	; 0x80051a <menu_TestModuleErrorList>
    45ca:	50 93 1b 05 	sts	0x051B, r21	; 0x80051b <menu_TestModuleErrorList+0x1>
    45ce:	60 93 1c 05 	sts	0x051C, r22	; 0x80051c <menu_TestModuleErrorList+0x2>
    45d2:	70 93 1d 05 	sts	0x051D, r23	; 0x80051d <menu_TestModuleErrorList+0x3>
    45d6:	e2 cf       	rjmp	.-60     	; 0x459c <menu_ModuleTestExecute+0x60>
    45d8:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <lcd_cursoroff>
    45dc:	8e e1       	ldi	r24, 0x1E	; 30
    45de:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    45e2:	8a e0       	ldi	r24, 0x0A	; 10
    45e4:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    45e8:	10 92 96 07 	sts	0x0796, r1	; 0x800796 <msgPipe_Handling>
    45ec:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <menu_TestModulePattern>
    45f0:	eb e4       	ldi	r30, 0x4B	; 75
    45f2:	f2 e0       	ldi	r31, 0x02	; 2
    45f4:	81 81       	ldd	r24, Z+1	; 0x01
    45f6:	89 2b       	or	r24, r25
    45f8:	81 83       	std	Z+1, r24	; 0x01
    45fa:	38 96       	adiw	r30, 0x08	; 8
    45fc:	83 e0       	ldi	r24, 0x03	; 3
    45fe:	eb 34       	cpi	r30, 0x4B	; 75
    4600:	f8 07       	cpc	r31, r24
    4602:	c1 f7       	brne	.-16     	; 0x45f4 <menu_ModuleTestExecute+0xb8>
    4604:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <menu_TestModuleBitCounter>
    4608:	8f 3f       	cpi	r24, 0xFF	; 255
    460a:	11 f5       	brne	.+68     	; 0x4650 <menu_ModuleTestExecute+0x114>
    460c:	10 92 56 05 	sts	0x0556, r1	; 0x800556 <menu_TestModuleBitCounter>
    4610:	e0 e0       	ldi	r30, 0x00	; 0
    4612:	f0 e0       	ldi	r31, 0x00	; 0
    4614:	ee 0f       	add	r30, r30
    4616:	ff 1f       	adc	r31, r31
    4618:	ee 0f       	add	r30, r30
    461a:	ff 1f       	adc	r31, r31
    461c:	ee 0f       	add	r30, r30
    461e:	ff 1f       	adc	r31, r31
    4620:	e5 5b       	subi	r30, 0xB5	; 181
    4622:	fd 4f       	sbci	r31, 0xFD	; 253
    4624:	90 95       	com	r25
    4626:	81 81       	ldd	r24, Z+1	; 0x01
    4628:	98 23       	and	r25, r24
    462a:	91 83       	std	Z+1, r25	; 0x01
    462c:	8e e1       	ldi	r24, 0x1E	; 30
    462e:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4632:	80 91 56 05 	lds	r24, 0x0556	; 0x800556 <menu_TestModuleBitCounter>
    4636:	0e 94 12 3a 	call	0x7424	; 0x7424 <lcd_dec2out>
    463a:	8f b7       	in	r24, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	98 e0       	ldi	r25, 0x08	; 8
    4640:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <swTimer+0xc>
    4644:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <swTimer+0xd>
    4648:	8f bf       	out	0x3f, r24	; 63
    464a:	df 91       	pop	r29
    464c:	cf 91       	pop	r28
    464e:	08 95       	ret
    4650:	8e e1       	ldi	r24, 0x1E	; 30
    4652:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    4656:	81 e6       	ldi	r24, 0x61	; 97
    4658:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    465c:	82 e6       	ldi	r24, 0x62	; 98
    465e:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4662:	8f e6       	ldi	r24, 0x6F	; 111
    4664:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4668:	82 e7       	ldi	r24, 0x72	; 114
    466a:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    466e:	84 e7       	ldi	r24, 0x74	; 116
    4670:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4674:	8e ef       	ldi	r24, 0xFE	; 254
    4676:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <menu_TestModuleBitCounter>
    467a:	9f b7       	in	r25, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	82 e0       	ldi	r24, 0x02	; 2
    4680:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xc>
    4684:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <swTimer+0xd>
    4688:	9f bf       	out	0x3f, r25	; 63
    468a:	8f b7       	in	r24, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	94 e6       	ldi	r25, 0x64	; 100
    4690:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <swTimer+0xe>
    4694:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <swTimer+0xf>
    4698:	8f bf       	out	0x3f, r24	; 63
    469a:	8a e4       	ldi	r24, 0x4A	; 74
    469c:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    46a0:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <menu_TestModuleBitCounter>
    46a4:	86 cf       	rjmp	.-244    	; 0x45b2 <menu_ModuleTestExecute+0x76>
    46a6:	8f ef       	ldi	r24, 0xFF	; 255
    46a8:	80 93 96 07 	sts	0x0796, r24	; 0x800796 <msgPipe_Handling>
    46ac:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <menu_TestModulePattern>
    46b0:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <lcd_cursosblink>
    46b4:	e0 91 56 05 	lds	r30, 0x0556	; 0x800556 <menu_TestModuleBitCounter>
    46b8:	7c cf       	rjmp	.-264    	; 0x45b2 <menu_ModuleTestExecute+0x76>
    46ba:	8e e1       	ldi	r24, 0x1E	; 30
    46bc:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    46c0:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <menu_TestModuleErrorList>
    46c4:	90 91 1b 05 	lds	r25, 0x051B	; 0x80051b <menu_TestModuleErrorList+0x1>
    46c8:	a0 91 1c 05 	lds	r26, 0x051C	; 0x80051c <menu_TestModuleErrorList+0x2>
    46cc:	b0 91 1d 05 	lds	r27, 0x051D	; 0x80051d <menu_TestModuleErrorList+0x3>
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	a1 05       	cpc	r26, r1
    46d4:	b1 05       	cpc	r27, r1
    46d6:	41 f1       	breq	.+80     	; 0x4728 <menu_ModuleTestExecute+0x1ec>
    46d8:	80 93 ad 0c 	sts	0x0CAD, r24	; 0x800cad <editLong>
    46dc:	90 93 ae 0c 	sts	0x0CAE, r25	; 0x800cae <editLong+0x1>
    46e0:	a0 93 af 0c 	sts	0x0CAF, r26	; 0x800caf <editLong+0x2>
    46e4:	b0 93 b0 0c 	sts	0x0CB0, r27	; 0x800cb0 <editLong+0x3>
    46e8:	85 e4       	ldi	r24, 0x45	; 69
    46ea:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    46ee:	8a e3       	ldi	r24, 0x3A	; 58
    46f0:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    46f4:	0e 94 ee 39 	call	0x73dc	; 0x73dc <lcd_longout>
    46f8:	8e ef       	ldi	r24, 0xFE	; 254
    46fa:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <menu_TestModuleBitCounter>
    46fe:	9f b7       	in	r25, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	82 e0       	ldi	r24, 0x02	; 2
    4704:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xc>
    4708:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <swTimer+0xd>
    470c:	9f bf       	out	0x3f, r25	; 63
    470e:	8f b7       	in	r24, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	94 e6       	ldi	r25, 0x64	; 100
    4714:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <swTimer+0xe>
    4718:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <swTimer+0xf>
    471c:	8f bf       	out	0x3f, r24	; 63
    471e:	8a e4       	ldi	r24, 0x4A	; 74
    4720:	df 91       	pop	r29
    4722:	cf 91       	pop	r28
    4724:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>
    4728:	8f e6       	ldi	r24, 0x6F	; 111
    472a:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    472e:	8b e6       	ldi	r24, 0x6B	; 107
    4730:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    4734:	e1 cf       	rjmp	.-62     	; 0x46f8 <menu_ModuleTestExecute+0x1bc>
    4736:	f0 e0       	ldi	r31, 0x00	; 0
    4738:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <menu_TestModulePattern>
    473c:	6b cf       	rjmp	.-298    	; 0x4614 <menu_ModuleTestExecute+0xd8>

0000473e <menu_ModuleTestPattern>:
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	00 90 21 05 	lds	r0, 0x0521	; 0x800521 <menuVmodule>
    4746:	02 c0       	rjmp	.+4      	; 0x474c <menu_ModuleTestPattern+0xe>
    4748:	88 0f       	add	r24, r24
    474a:	99 1f       	adc	r25, r25
    474c:	0a 94       	dec	r0
    474e:	e2 f7       	brpl	.-8      	; 0x4748 <menu_ModuleTestPattern+0xa>
    4750:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <menu_TestModulePattern>
    4754:	8f ef       	ldi	r24, 0xFF	; 255
    4756:	80 93 56 05 	sts	0x0556, r24	; 0x800556 <menu_TestModuleBitCounter>
    475a:	10 92 1a 05 	sts	0x051A, r1	; 0x80051a <menu_TestModuleErrorList>
    475e:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <menu_TestModuleErrorList+0x1>
    4762:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <menu_TestModuleErrorList+0x2>
    4766:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <menu_TestModuleErrorList+0x3>
    476a:	e8 de       	rcall	.-560    	; 0x453c <menu_ModuleTestExecute>
    476c:	80 e0       	ldi	r24, 0x00	; 0
    476e:	08 95       	ret

00004770 <menu_Init>:
    4770:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <menuStackIndex>
    4774:	00 97       	sbiw	r24, 0x00	; 0
    4776:	91 f0       	breq	.+36     	; 0x479c <menu_Init+0x2c>
    4778:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    477c:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
    4780:	70 93 4e 05 	sts	0x054E, r23	; 0x80054e <pMenuTopTitle+0x1>
    4784:	60 93 4d 05 	sts	0x054D, r22	; 0x80054d <pMenuTopTitle>
    4788:	8f ef       	ldi	r24, 0xFF	; 255
    478a:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <nibbleIndex>
    478e:	80 e6       	ldi	r24, 0x60	; 96
    4790:	93 e0       	ldi	r25, 0x03	; 3
    4792:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <pNibbleInfo+0x1>
    4796:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <pNibbleInfo>
    479a:	08 95       	ret
    479c:	88 ef       	ldi	r24, 0xF8	; 248
    479e:	94 e0       	ldi	r25, 0x04	; 4
    47a0:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    47a4:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
    47a8:	86 e5       	ldi	r24, 0x56	; 86
    47aa:	93 e0       	ldi	r25, 0x03	; 3
    47ac:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <pMenuTopTitle+0x1>
    47b0:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <pMenuTopTitle>
    47b4:	e9 cf       	rjmp	.-46     	; 0x4788 <menu_Init+0x18>

000047b6 <dataToNibbles>:
    47b6:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <dataType>
    47ba:	8e 2f       	mov	r24, r30
    47bc:	90 e0       	ldi	r25, 0x00	; 0
    47be:	fc 01       	movw	r30, r24
    47c0:	32 97       	sbiw	r30, 0x02	; 2
    47c2:	ea 30       	cpi	r30, 0x0A	; 10
    47c4:	f1 05       	cpc	r31, r1
    47c6:	70 f5       	brcc	.+92     	; 0x4824 <dataToNibbles+0x6e>
    47c8:	88 27       	eor	r24, r24
    47ca:	ee 58       	subi	r30, 0x8E	; 142
    47cc:	ff 4f       	sbci	r31, 0xFF	; 255
    47ce:	8f 4f       	sbci	r24, 0xFF	; 255
    47d0:	0c 94 a1 3d 	jmp	0x7b42	; 0x7b42 <__tablejump2__>
    47d4:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <dataEntry32>
    47d8:	98 2f       	mov	r25, r24
    47da:	9f 70       	andi	r25, 0x0F	; 15
    47dc:	90 93 6e 05 	sts	0x056E, r25	; 0x80056e <nibble+0x7>
    47e0:	82 95       	swap	r24
    47e2:	8f 70       	andi	r24, 0x0F	; 15
    47e4:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <nibble+0x6>
    47e8:	80 91 53 05 	lds	r24, 0x0553	; 0x800553 <dataEntry32+0x1>
    47ec:	98 2f       	mov	r25, r24
    47ee:	9f 70       	andi	r25, 0x0F	; 15
    47f0:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <nibble+0x5>
    47f4:	82 95       	swap	r24
    47f6:	8f 70       	andi	r24, 0x0F	; 15
    47f8:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <nibble+0x4>
    47fc:	80 91 54 05 	lds	r24, 0x0554	; 0x800554 <dataEntry32+0x2>
    4800:	98 2f       	mov	r25, r24
    4802:	9f 70       	andi	r25, 0x0F	; 15
    4804:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <nibble+0x3>
    4808:	82 95       	swap	r24
    480a:	8f 70       	andi	r24, 0x0F	; 15
    480c:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <nibble+0x2>
    4810:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <dataEntry32+0x3>
    4814:	98 2f       	mov	r25, r24
    4816:	9f 70       	andi	r25, 0x0F	; 15
    4818:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <nibble+0x1>
    481c:	82 95       	swap	r24
    481e:	8f 70       	andi	r24, 0x0F	; 15
    4820:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4824:	08 95       	ret
    4826:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    482a:	98 2f       	mov	r25, r24
    482c:	99 1f       	adc	r25, r25
    482e:	99 27       	eor	r25, r25
    4830:	99 1f       	adc	r25, r25
    4832:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <nibble>
    4836:	88 0f       	add	r24, r24
    4838:	98 2f       	mov	r25, r24
    483a:	99 1f       	adc	r25, r25
    483c:	99 27       	eor	r25, r25
    483e:	99 1f       	adc	r25, r25
    4840:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <nibble+0x1>
    4844:	88 0f       	add	r24, r24
    4846:	98 2f       	mov	r25, r24
    4848:	99 1f       	adc	r25, r25
    484a:	99 27       	eor	r25, r25
    484c:	99 1f       	adc	r25, r25
    484e:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <nibble+0x2>
    4852:	88 0f       	add	r24, r24
    4854:	98 2f       	mov	r25, r24
    4856:	99 1f       	adc	r25, r25
    4858:	99 27       	eor	r25, r25
    485a:	99 1f       	adc	r25, r25
    485c:	90 93 6a 05 	sts	0x056A, r25	; 0x80056a <nibble+0x3>
    4860:	88 0f       	add	r24, r24
    4862:	98 2f       	mov	r25, r24
    4864:	99 1f       	adc	r25, r25
    4866:	99 27       	eor	r25, r25
    4868:	99 1f       	adc	r25, r25
    486a:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <nibble+0x4>
    486e:	88 0f       	add	r24, r24
    4870:	98 2f       	mov	r25, r24
    4872:	99 1f       	adc	r25, r25
    4874:	99 27       	eor	r25, r25
    4876:	99 1f       	adc	r25, r25
    4878:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <nibble+0x5>
    487c:	88 0f       	add	r24, r24
    487e:	98 2f       	mov	r25, r24
    4880:	99 1f       	adc	r25, r25
    4882:	99 27       	eor	r25, r25
    4884:	99 1f       	adc	r25, r25
    4886:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <nibble+0x6>
    488a:	88 0f       	add	r24, r24
    488c:	88 1f       	adc	r24, r24
    488e:	88 27       	eor	r24, r24
    4890:	88 1f       	adc	r24, r24
    4892:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <nibble+0x7>
    4896:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <dataEntry>
    489a:	08 95       	ret
    489c:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    48a0:	98 2f       	mov	r25, r24
    48a2:	92 95       	swap	r25
    48a4:	9f 70       	andi	r25, 0x0F	; 15
    48a6:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <nibble>
    48aa:	8f 70       	andi	r24, 0x0F	; 15
    48ac:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble+0x1>
    48b0:	08 95       	ret
    48b2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    48b6:	80 31       	cpi	r24, 0x10	; 16
    48b8:	08 f4       	brcc	.+2      	; 0x48bc <dataToNibbles+0x106>
    48ba:	66 c0       	rjmp	.+204    	; 0x4988 <dataToNibbles+0x1d2>
    48bc:	8f ef       	ldi	r24, 0xFF	; 255
    48be:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    48c2:	08 95       	ret
    48c4:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    48c8:	87 fd       	sbrc	r24, 7
    48ca:	62 c0       	rjmp	.+196    	; 0x4990 <dataToNibbles+0x1da>
    48cc:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <nibble+0x1>
    48d0:	8c 30       	cpi	r24, 0x0C	; 12
    48d2:	08 f4       	brcc	.+2      	; 0x48d6 <dataToNibbles+0x120>
    48d4:	a5 cf       	rjmp	.-182    	; 0x4820 <dataToNibbles+0x6a>
    48d6:	91 e0       	ldi	r25, 0x01	; 1
    48d8:	01 c0       	rjmp	.+2      	; 0x48dc <dataToNibbles+0x126>
    48da:	92 2f       	mov	r25, r18
    48dc:	8c 50       	subi	r24, 0x0C	; 12
    48de:	21 e0       	ldi	r18, 0x01	; 1
    48e0:	29 0f       	add	r18, r25
    48e2:	8c 30       	cpi	r24, 0x0C	; 12
    48e4:	d0 f7       	brcc	.-12     	; 0x48da <dataToNibbles+0x124>
    48e6:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <nibble+0x1>
    48ea:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    48ee:	98 cf       	rjmp	.-208    	; 0x4820 <dataToNibbles+0x6a>
    48f0:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    48f4:	98 2f       	mov	r25, r24
    48f6:	92 95       	swap	r25
    48f8:	96 95       	lsr	r25
    48fa:	97 70       	andi	r25, 0x07	; 7
    48fc:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <nibble>
    4900:	8f 71       	andi	r24, 0x1F	; 31
    4902:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4906:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <nibble+0x1>
    490a:	8a 30       	cpi	r24, 0x0A	; 10
    490c:	60 f0       	brcs	.+24     	; 0x4926 <dataToNibbles+0x170>
    490e:	91 e0       	ldi	r25, 0x01	; 1
    4910:	01 c0       	rjmp	.+2      	; 0x4914 <dataToNibbles+0x15e>
    4912:	92 2f       	mov	r25, r18
    4914:	8a 50       	subi	r24, 0x0A	; 10
    4916:	21 e0       	ldi	r18, 0x01	; 1
    4918:	29 0f       	add	r18, r25
    491a:	8a 30       	cpi	r24, 0x0A	; 10
    491c:	d0 f7       	brcc	.-12     	; 0x4912 <dataToNibbles+0x15c>
    491e:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <nibble+0x1>
    4922:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4926:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <nibble+0x2>
    492a:	08 95       	ret
    492c:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <nibble>
    4930:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <nibble+0x1>
    4934:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    4938:	84 36       	cpi	r24, 0x64	; 100
    493a:	50 f0       	brcs	.+20     	; 0x4950 <dataToNibbles+0x19a>
    493c:	9c e9       	ldi	r25, 0x9C	; 156
    493e:	98 0f       	add	r25, r24
    4940:	94 36       	cpi	r25, 0x64	; 100
    4942:	60 f1       	brcs	.+88     	; 0x499c <dataToNibbles+0x1e6>
    4944:	88 5c       	subi	r24, 0xC8	; 200
    4946:	92 e0       	ldi	r25, 0x02	; 2
    4948:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    494c:	90 93 67 05 	sts	0x0567, r25	; 0x800567 <nibble>
    4950:	8a 30       	cpi	r24, 0x0A	; 10
    4952:	48 f3       	brcs	.-46     	; 0x4926 <dataToNibbles+0x170>
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	9f 5f       	subi	r25, 0xFF	; 255
    4958:	8a 50       	subi	r24, 0x0A	; 10
    495a:	8a 30       	cpi	r24, 0x0A	; 10
    495c:	e0 f7       	brcc	.-8      	; 0x4956 <dataToNibbles+0x1a0>
    495e:	df cf       	rjmp	.-66     	; 0x491e <dataToNibbles+0x168>
    4960:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    4964:	84 30       	cpi	r24, 0x04	; 4
    4966:	08 f0       	brcs	.+2      	; 0x496a <dataToNibbles+0x1b4>
    4968:	a9 cf       	rjmp	.-174    	; 0x48bc <dataToNibbles+0x106>
    496a:	5a cf       	rjmp	.-332    	; 0x4820 <dataToNibbles+0x6a>
    496c:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    4970:	84 30       	cpi	r24, 0x04	; 4
    4972:	08 f4       	brcc	.+2      	; 0x4976 <dataToNibbles+0x1c0>
    4974:	55 cf       	rjmp	.-342    	; 0x4820 <dataToNibbles+0x6a>
    4976:	83 e0       	ldi	r24, 0x03	; 3
    4978:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    497c:	08 95       	ret
    497e:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    4982:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4986:	08 95       	ret
    4988:	8f 5f       	subi	r24, 0xFF	; 255
    498a:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    498e:	08 95       	ret
    4990:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <nibble>
    4994:	8f ef       	ldi	r24, 0xFF	; 255
    4996:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble+0x1>
    499a:	08 95       	ret
    499c:	89 2f       	mov	r24, r25
    499e:	91 e0       	ldi	r25, 0x01	; 1
    49a0:	d3 cf       	rjmp	.-90     	; 0x4948 <dataToNibbles+0x192>

000049a2 <nibbleToLCDstring>:
    49a2:	0f 93       	push	r16
    49a4:	1f 93       	push	r17
    49a6:	cf 93       	push	r28
    49a8:	df 93       	push	r29
    49aa:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <dataType>
    49ae:	8e 2f       	mov	r24, r30
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	fc 01       	movw	r30, r24
    49b4:	32 97       	sbiw	r30, 0x02	; 2
    49b6:	ea 30       	cpi	r30, 0x0A	; 10
    49b8:	f1 05       	cpc	r31, r1
    49ba:	50 f5       	brcc	.+84     	; 0x4a10 <nibbleToLCDstring+0x6e>
    49bc:	88 27       	eor	r24, r24
    49be:	e4 58       	subi	r30, 0x84	; 132
    49c0:	ff 4f       	sbci	r31, 0xFF	; 255
    49c2:	8f 4f       	sbci	r24, 0xFF	; 255
    49c4:	0c 94 a1 3d 	jmp	0x7b42	; 0x7b42 <__tablejump2__>
    49c8:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <nibble>
    49cc:	9f 3f       	cpi	r25, 0xFF	; 255
    49ce:	09 f4       	brne	.+2      	; 0x49d2 <nibbleToLCDstring+0x30>
    49d0:	86 c0       	rjmp	.+268    	; 0x4ade <nibbleToLCDstring+0x13c>
    49d2:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    49d6:	8f 3f       	cpi	r24, 0xFF	; 255
    49d8:	09 f4       	brne	.+2      	; 0x49dc <nibbleToLCDstring+0x3a>
    49da:	81 c0       	rjmp	.+258    	; 0x4ade <nibbleToLCDstring+0x13c>
    49dc:	2f e5       	ldi	r18, 0x5F	; 95
    49de:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <lcdData+0x1>
    49e2:	9b 30       	cpi	r25, 0x0B	; 11
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <nibbleToLCDstring+0x46>
    49e6:	d2 c0       	rjmp	.+420    	; 0x4b8c <nibbleToLCDstring+0x1ea>
    49e8:	29 2f       	mov	r18, r25
    49ea:	95 30       	cpi	r25, 0x05	; 5
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <nibbleToLCDstring+0x4e>
    49ee:	eb c0       	rjmp	.+470    	; 0x4bc6 <nibbleToLCDstring+0x224>
    49f0:	26 95       	lsr	r18
    49f2:	2d 5b       	subi	r18, 0xBD	; 189
    49f4:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <lcdData>
    49f8:	90 ff       	sbrs	r25, 0
    49fa:	03 c0       	rjmp	.+6      	; 0x4a02 <nibbleToLCDstring+0x60>
    49fc:	93 e2       	ldi	r25, 0x23	; 35
    49fe:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <lcdData+0x1>
    4a02:	81 11       	cpse	r24, r1
    4a04:	d4 c0       	rjmp	.+424    	; 0x4bae <nibbleToLCDstring+0x20c>
    4a06:	8d e6       	ldi	r24, 0x6D	; 109
    4a08:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4a0c:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <lcdData+0x3>
    4a10:	df 91       	pop	r29
    4a12:	cf 91       	pop	r28
    4a14:	1f 91       	pop	r17
    4a16:	0f 91       	pop	r16
    4a18:	08 95       	ret
    4a1a:	8f e6       	ldi	r24, 0x6F	; 111
    4a1c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4a20:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4a24:	81 11       	cpse	r24, r1
    4a26:	a3 c0       	rjmp	.+326    	; 0x4b6e <nibbleToLCDstring+0x1cc>
    4a28:	86 e6       	ldi	r24, 0x66	; 102
    4a2a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <lcdData+0x1>
    4a2e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4a32:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <lcdData+0x3>
    4a36:	ec cf       	rjmp	.-40     	; 0x4a10 <nibbleToLCDstring+0x6e>
    4a38:	c7 e6       	ldi	r28, 0x67	; 103
    4a3a:	d5 e0       	ldi	r29, 0x05	; 5
    4a3c:	07 e2       	ldi	r16, 0x27	; 39
    4a3e:	12 e0       	ldi	r17, 0x02	; 2
    4a40:	89 91       	ld	r24, Y+
    4a42:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4a46:	f8 01       	movw	r30, r16
    4a48:	81 93       	st	Z+, r24
    4a4a:	8f 01       	movw	r16, r30
    4a4c:	f5 e0       	ldi	r31, 0x05	; 5
    4a4e:	cf 36       	cpi	r28, 0x6F	; 111
    4a50:	df 07       	cpc	r29, r31
    4a52:	b1 f7       	brne	.-20     	; 0x4a40 <nibbleToLCDstring+0x9e>
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	1f 91       	pop	r17
    4a5a:	0f 91       	pop	r16
    4a5c:	08 95       	ret
    4a5e:	8d e4       	ldi	r24, 0x4D	; 77
    4a60:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4a64:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4a68:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4a6c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <lcdData+0x1>
    4a70:	82 e4       	ldi	r24, 0x42	; 66
    4a72:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4a76:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4a7a:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4a7e:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdData+0x3>
    4a82:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <nibble+0x2>
    4a86:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4a8a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <lcdData+0x4>
    4a8e:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <lcdData+0x5>
    4a92:	df 91       	pop	r29
    4a94:	cf 91       	pop	r28
    4a96:	1f 91       	pop	r17
    4a98:	0f 91       	pop	r16
    4a9a:	08 95       	ret
    4a9c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4aa0:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4aa4:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4aa8:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4aac:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4ab0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <lcdData+0x1>
    4ab4:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <nibble+0x2>
    4ab8:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4abc:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4ac0:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <lcdData+0x3>
    4ac4:	df 91       	pop	r29
    4ac6:	cf 91       	pop	r28
    4ac8:	1f 91       	pop	r17
    4aca:	0f 91       	pop	r16
    4acc:	08 95       	ret
    4ace:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4ad2:	83 30       	cpi	r24, 0x03	; 3
    4ad4:	08 f4       	brcc	.+2      	; 0x4ad8 <nibbleToLCDstring+0x136>
    4ad6:	64 c0       	rjmp	.+200    	; 0x4ba0 <nibbleToLCDstring+0x1fe>
    4ad8:	83 30       	cpi	r24, 0x03	; 3
    4ada:	09 f4       	brne	.+2      	; 0x4ade <nibbleToLCDstring+0x13c>
    4adc:	5b c0       	rjmp	.+182    	; 0x4b94 <nibbleToLCDstring+0x1f2>
    4ade:	8e e6       	ldi	r24, 0x6E	; 110
    4ae0:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4ae4:	9f e6       	ldi	r25, 0x6F	; 111
    4ae6:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <lcdData+0x1>
    4aea:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4aee:	85 e6       	ldi	r24, 0x65	; 101
    4af0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdData+0x3>
    4af4:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <lcdData+0x4>
    4af8:	8b cf       	rjmp	.-234    	; 0x4a10 <nibbleToLCDstring+0x6e>
    4afa:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4afe:	80 5d       	subi	r24, 0xD0	; 208
    4b00:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4b04:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x1>
    4b08:	df 91       	pop	r29
    4b0a:	cf 91       	pop	r28
    4b0c:	1f 91       	pop	r17
    4b0e:	0f 91       	pop	r16
    4b10:	08 95       	ret
    4b12:	83 e4       	ldi	r24, 0x43	; 67
    4b14:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4b18:	88 e6       	ldi	r24, 0x68	; 104
    4b1a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <lcdData+0x1>
    4b1e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4b22:	8f 3f       	cpi	r24, 0xFF	; 255
    4b24:	09 f4       	brne	.+2      	; 0x4b28 <nibbleToLCDstring+0x186>
    4b26:	49 c0       	rjmp	.+146    	; 0x4bba <nibbleToLCDstring+0x218>
    4b28:	8a 30       	cpi	r24, 0x0A	; 10
    4b2a:	38 f5       	brcc	.+78     	; 0x4b7a <nibbleToLCDstring+0x1d8>
    4b2c:	90 e3       	ldi	r25, 0x30	; 48
    4b2e:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <lcdData+0x2>
    4b32:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4b36:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdData+0x3>
    4b3a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <lcdData+0x4>
    4b3e:	df 91       	pop	r29
    4b40:	cf 91       	pop	r28
    4b42:	1f 91       	pop	r17
    4b44:	0f 91       	pop	r16
    4b46:	08 95       	ret
    4b48:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4b4c:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4b50:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4b54:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4b58:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4b5c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <lcdData+0x1>
    4b60:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x2>
    4b64:	df 91       	pop	r29
    4b66:	cf 91       	pop	r28
    4b68:	1f 91       	pop	r17
    4b6a:	0f 91       	pop	r16
    4b6c:	08 95       	ret
    4b6e:	8e e6       	ldi	r24, 0x6E	; 110
    4b70:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <lcdData+0x1>
    4b74:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x2>
    4b78:	4b cf       	rjmp	.-362    	; 0x4a10 <nibbleToLCDstring+0x6e>
    4b7a:	91 e3       	ldi	r25, 0x31	; 49
    4b7c:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <lcdData+0x2>
    4b80:	8a 50       	subi	r24, 0x0A	; 10
    4b82:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4b86:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdData+0x3>
    4b8a:	d7 cf       	rjmp	.-82     	; 0x4b3a <nibbleToLCDstring+0x198>
    4b8c:	98 e4       	ldi	r25, 0x48	; 72
    4b8e:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <lcdData>
    4b92:	37 cf       	rjmp	.-402    	; 0x4a02 <nibbleToLCDstring+0x60>
    4b94:	80 e5       	ldi	r24, 0x50	; 80
    4b96:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData>
    4b9a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x1>
    4b9e:	38 cf       	rjmp	.-400    	; 0x4a10 <nibbleToLCDstring+0x6e>
    4ba0:	93 e3       	ldi	r25, 0x33	; 51
    4ba2:	98 1b       	sub	r25, r24
    4ba4:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <lcdData>
    4ba8:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x1>
    4bac:	31 cf       	rjmp	.-414    	; 0x4a10 <nibbleToLCDstring+0x6e>
    4bae:	8c 30       	cpi	r24, 0x0C	; 12
    4bb0:	f0 f0       	brcs	.+60     	; 0x4bee <nibbleToLCDstring+0x24c>
    4bb2:	8d e2       	ldi	r24, 0x2D	; 45
    4bb4:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4bb8:	29 cf       	rjmp	.-430    	; 0x4a0c <nibbleToLCDstring+0x6a>
    4bba:	8d e2       	ldi	r24, 0x2D	; 45
    4bbc:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4bc0:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <lcdData+0x3>
    4bc4:	ba cf       	rjmp	.-140    	; 0x4b3a <nibbleToLCDstring+0x198>
    4bc6:	30 e0       	ldi	r19, 0x00	; 0
    4bc8:	25 50       	subi	r18, 0x05	; 5
    4bca:	31 09       	sbc	r19, r1
    4bcc:	35 95       	asr	r19
    4bce:	27 95       	ror	r18
    4bd0:	2a 5b       	subi	r18, 0xBA	; 186
    4bd2:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <lcdData>
    4bd6:	90 fd       	sbrc	r25, 0
    4bd8:	03 c0       	rjmp	.+6      	; 0x4be0 <nibbleToLCDstring+0x23e>
    4bda:	93 e2       	ldi	r25, 0x23	; 35
    4bdc:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <lcdData+0x1>
    4be0:	28 34       	cpi	r18, 0x48	; 72
    4be2:	09 f0       	breq	.+2      	; 0x4be6 <nibbleToLCDstring+0x244>
    4be4:	0e cf       	rjmp	.-484    	; 0x4a02 <nibbleToLCDstring+0x60>
    4be6:	91 e4       	ldi	r25, 0x41	; 65
    4be8:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <lcdData>
    4bec:	0a cf       	rjmp	.-492    	; 0x4a02 <nibbleToLCDstring+0x60>
    4bee:	81 50       	subi	r24, 0x01	; 1
    4bf0:	0e 94 98 39 	call	0x7330	; 0x7330 <nibbleToChr>
    4bf4:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <lcdData+0x2>
    4bf8:	09 cf       	rjmp	.-494    	; 0x4a0c <nibbleToLCDstring+0x6a>

00004bfa <nibbleChange>:
    4bfa:	28 2f       	mov	r18, r24
    4bfc:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    4c00:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    4c04:	31 96       	adiw	r30, 0x01	; 1
    4c06:	84 91       	lpm	r24, Z
    4c08:	38 2f       	mov	r19, r24
    4c0a:	30 71       	andi	r19, 0x10	; 16
    4c0c:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <dataType>
    4c10:	8e 2f       	mov	r24, r30
    4c12:	90 e0       	ldi	r25, 0x00	; 0
    4c14:	fc 01       	movw	r30, r24
    4c16:	32 97       	sbiw	r30, 0x02	; 2
    4c18:	ea 30       	cpi	r30, 0x0A	; 10
    4c1a:	f1 05       	cpc	r31, r1
    4c1c:	00 f5       	brcc	.+64     	; 0x4c5e <nibbleChange+0x64>
    4c1e:	88 27       	eor	r24, r24
    4c20:	ea 57       	subi	r30, 0x7A	; 122
    4c22:	ff 4f       	sbci	r31, 0xFF	; 255
    4c24:	8f 4f       	sbci	r24, 0xFF	; 255
    4c26:	0c 94 a1 3d 	jmp	0x7b42	; 0x7b42 <__tablejump2__>
    4c2a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4c2e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c30:	09 f4       	brne	.+2      	; 0x4c34 <nibbleChange+0x3a>
    4c32:	f3 c0       	rjmp	.+486    	; 0x4e1a <nibbleChange+0x220>
    4c34:	21 11       	cpse	r18, r1
    4c36:	0b c1       	rjmp	.+534    	; 0x4e4e <nibbleChange+0x254>
    4c38:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <nibble>
    4c3c:	2c 30       	cpi	r18, 0x0C	; 12
    4c3e:	08 f0       	brcs	.+2      	; 0x4c42 <nibbleChange+0x48>
    4c40:	ba c0       	rjmp	.+372    	; 0x4db6 <nibbleChange+0x1bc>
    4c42:	2b 30       	cpi	r18, 0x0B	; 11
    4c44:	09 f4       	brne	.+2      	; 0x4c48 <nibbleChange+0x4e>
    4c46:	b4 c0       	rjmp	.+360    	; 0x4db0 <nibbleChange+0x1b6>
    4c48:	21 11       	cpse	r18, r1
    4c4a:	03 c0       	rjmp	.+6      	; 0x4c52 <nibbleChange+0x58>
    4c4c:	6f 3f       	cpi	r22, 0xFF	; 255
    4c4e:	09 f4       	brne	.+2      	; 0x4c52 <nibbleChange+0x58>
    4c50:	1e c1       	rjmp	.+572    	; 0x4e8e <nibbleChange+0x294>
    4c52:	26 0f       	add	r18, r22
    4c54:	20 93 67 05 	sts	0x0567, r18	; 0x800567 <nibble>
    4c58:	2f 3f       	cpi	r18, 0xFF	; 255
    4c5a:	09 f0       	breq	.+2      	; 0x4c5e <nibbleChange+0x64>
    4c5c:	af c0       	rjmp	.+350    	; 0x4dbc <nibbleChange+0x1c2>
    4c5e:	08 95       	ret
    4c60:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4c64:	80 95       	com	r24
    4c66:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4c6a:	08 95       	ret
    4c6c:	e2 2f       	mov	r30, r18
    4c6e:	f0 e0       	ldi	r31, 0x00	; 0
    4c70:	e9 59       	subi	r30, 0x99	; 153
    4c72:	fa 4f       	sbci	r31, 0xFA	; 250
    4c74:	80 81       	ld	r24, Z
    4c76:	68 0f       	add	r22, r24
    4c78:	61 70       	andi	r22, 0x01	; 1
    4c7a:	60 83       	st	Z, r22
    4c7c:	08 95       	ret
    4c7e:	e2 2f       	mov	r30, r18
    4c80:	f0 e0       	ldi	r31, 0x00	; 0
    4c82:	e9 59       	subi	r30, 0x99	; 153
    4c84:	fa 4f       	sbci	r31, 0xFA	; 250
    4c86:	80 81       	ld	r24, Z
    4c88:	68 0f       	add	r22, r24
    4c8a:	6f 70       	andi	r22, 0x0F	; 15
    4c8c:	60 83       	st	Z, r22
    4c8e:	08 95       	ret
    4c90:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4c94:	31 11       	cpse	r19, r1
    4c96:	71 c0       	rjmp	.+226    	; 0x4d7a <nibbleChange+0x180>
    4c98:	61 30       	cpi	r22, 0x01	; 1
    4c9a:	09 f4       	brne	.+2      	; 0x4c9e <nibbleChange+0xa4>
    4c9c:	a3 c0       	rjmp	.+326    	; 0x4de4 <nibbleChange+0x1ea>
    4c9e:	6f 3f       	cpi	r22, 0xFF	; 255
    4ca0:	19 f4       	brne	.+6      	; 0x4ca8 <nibbleChange+0xae>
    4ca2:	81 30       	cpi	r24, 0x01	; 1
    4ca4:	09 f4       	brne	.+2      	; 0x4ca8 <nibbleChange+0xae>
    4ca6:	e5 c0       	rjmp	.+458    	; 0x4e72 <nibbleChange+0x278>
    4ca8:	68 0f       	add	r22, r24
    4caa:	60 93 67 05 	sts	0x0567, r22	; 0x800567 <nibble>
    4cae:	08 95       	ret
    4cb0:	22 23       	and	r18, r18
    4cb2:	09 f4       	brne	.+2      	; 0x4cb6 <nibbleChange+0xbc>
    4cb4:	ab c0       	rjmp	.+342    	; 0x4e0c <nibbleChange+0x212>
    4cb6:	e2 2f       	mov	r30, r18
    4cb8:	f0 e0       	ldi	r31, 0x00	; 0
    4cba:	e9 59       	subi	r30, 0x99	; 153
    4cbc:	fa 4f       	sbci	r31, 0xFA	; 250
    4cbe:	80 81       	ld	r24, Z
    4cc0:	68 0f       	add	r22, r24
    4cc2:	6a 30       	cpi	r22, 0x0A	; 10
    4cc4:	0c f4       	brge	.+2      	; 0x4cc8 <nibbleChange+0xce>
    4cc6:	70 c0       	rjmp	.+224    	; 0x4da8 <nibbleChange+0x1ae>
    4cc8:	60 e0       	ldi	r22, 0x00	; 0
    4cca:	60 83       	st	Z, r22
    4ccc:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <nibble+0x1>
    4cd0:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <nibble+0x2>
    4cd4:	2a e0       	ldi	r18, 0x0A	; 10
    4cd6:	92 9f       	mul	r25, r18
    4cd8:	80 0d       	add	r24, r0
    4cda:	11 24       	eor	r1, r1
    4cdc:	80 32       	cpi	r24, 0x20	; 32
    4cde:	0c f0       	brlt	.+2      	; 0x4ce2 <nibbleChange+0xe8>
    4ce0:	af c0       	rjmp	.+350    	; 0x4e40 <nibbleChange+0x246>
    4ce2:	87 ff       	sbrs	r24, 7
    4ce4:	bc cf       	rjmp	.-136    	; 0x4c5e <nibbleChange+0x64>
    4ce6:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <nibble+0x1>
    4cea:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <nibble+0x2>
    4cee:	08 95       	ret
    4cf0:	e2 2f       	mov	r30, r18
    4cf2:	f0 e0       	ldi	r31, 0x00	; 0
    4cf4:	e9 59       	subi	r30, 0x99	; 153
    4cf6:	fa 4f       	sbci	r31, 0xFA	; 250
    4cf8:	80 81       	ld	r24, Z
    4cfa:	68 0f       	add	r22, r24
    4cfc:	6a 30       	cpi	r22, 0x0A	; 10
    4cfe:	dc f5       	brge	.+118    	; 0x4d76 <nibbleChange+0x17c>
    4d00:	67 fd       	sbrc	r22, 7
    4d02:	7d c0       	rjmp	.+250    	; 0x4dfe <nibbleChange+0x204>
    4d04:	60 83       	st	Z, r22
    4d06:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <nibble>
    4d0a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4d0e:	3a e0       	ldi	r19, 0x0A	; 10
    4d10:	83 9f       	mul	r24, r19
    4d12:	c0 01       	movw	r24, r0
    4d14:	11 24       	eor	r1, r1
    4d16:	34 e6       	ldi	r19, 0x64	; 100
    4d18:	23 9f       	mul	r18, r19
    4d1a:	80 0d       	add	r24, r0
    4d1c:	91 1d       	adc	r25, r1
    4d1e:	11 24       	eor	r1, r1
    4d20:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <nibble+0x2>
    4d24:	82 0f       	add	r24, r18
    4d26:	91 1d       	adc	r25, r1
    4d28:	8f 3f       	cpi	r24, 0xFF	; 255
    4d2a:	91 05       	cpc	r25, r1
    4d2c:	09 f0       	breq	.+2      	; 0x4d30 <nibbleChange+0x136>
    4d2e:	0c f4       	brge	.+2      	; 0x4d32 <nibbleChange+0x138>
    4d30:	96 cf       	rjmp	.-212    	; 0x4c5e <nibbleChange+0x64>
    4d32:	82 e0       	ldi	r24, 0x02	; 2
    4d34:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4d38:	85 e0       	ldi	r24, 0x05	; 5
    4d3a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble+0x1>
    4d3e:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <nibble+0x2>
    4d42:	08 95       	ret
    4d44:	e2 2f       	mov	r30, r18
    4d46:	f0 e0       	ldi	r31, 0x00	; 0
    4d48:	e9 59       	subi	r30, 0x99	; 153
    4d4a:	fa 4f       	sbci	r31, 0xFA	; 250
    4d4c:	80 81       	ld	r24, Z
    4d4e:	33 23       	and	r19, r19
    4d50:	19 f1       	breq	.+70     	; 0x4d98 <nibbleChange+0x19e>
    4d52:	68 0f       	add	r22, r24
    4d54:	64 30       	cpi	r22, 0x04	; 4
    4d56:	09 f4       	brne	.+2      	; 0x4d5a <nibbleChange+0x160>
    4d58:	54 c0       	rjmp	.+168    	; 0x4e02 <nibbleChange+0x208>
    4d5a:	6e 3f       	cpi	r22, 0xFE	; 254
    4d5c:	09 f4       	brne	.+2      	; 0x4d60 <nibbleChange+0x166>
    4d5e:	3f c0       	rjmp	.+126    	; 0x4dde <nibbleChange+0x1e4>
    4d60:	60 83       	st	Z, r22
    4d62:	08 95       	ret
    4d64:	e2 2f       	mov	r30, r18
    4d66:	f0 e0       	ldi	r31, 0x00	; 0
    4d68:	e9 59       	subi	r30, 0x99	; 153
    4d6a:	fa 4f       	sbci	r31, 0xFA	; 250
    4d6c:	80 81       	ld	r24, Z
    4d6e:	68 0f       	add	r22, r24
    4d70:	63 70       	andi	r22, 0x03	; 3
    4d72:	60 83       	st	Z, r22
    4d74:	08 95       	ret
    4d76:	60 e0       	ldi	r22, 0x00	; 0
    4d78:	c5 cf       	rjmp	.-118    	; 0x4d04 <nibbleChange+0x10a>
    4d7a:	61 30       	cpi	r22, 0x01	; 1
    4d7c:	d1 f1       	breq	.+116    	; 0x4df2 <nibbleChange+0x1f8>
    4d7e:	6f 3f       	cpi	r22, 0xFF	; 255
    4d80:	09 f0       	breq	.+2      	; 0x4d84 <nibbleChange+0x18a>
    4d82:	92 cf       	rjmp	.-220    	; 0x4ca8 <nibbleChange+0xae>
    4d84:	8f 3f       	cpi	r24, 0xFF	; 255
    4d86:	09 f4       	brne	.+2      	; 0x4d8a <nibbleChange+0x190>
    4d88:	74 c0       	rjmp	.+232    	; 0x4e72 <nibbleChange+0x278>
    4d8a:	81 30       	cpi	r24, 0x01	; 1
    4d8c:	09 f0       	breq	.+2      	; 0x4d90 <nibbleChange+0x196>
    4d8e:	8c cf       	rjmp	.-232    	; 0x4ca8 <nibbleChange+0xae>
    4d90:	8f ef       	ldi	r24, 0xFF	; 255
    4d92:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4d96:	08 95       	ret
    4d98:	88 23       	and	r24, r24
    4d9a:	f9 f0       	breq	.+62     	; 0x4dda <nibbleChange+0x1e0>
    4d9c:	83 30       	cpi	r24, 0x03	; 3
    4d9e:	11 f4       	brne	.+4      	; 0x4da4 <nibbleChange+0x1aa>
    4da0:	61 30       	cpi	r22, 0x01	; 1
    4da2:	91 f1       	breq	.+100    	; 0x4e08 <nibbleChange+0x20e>
    4da4:	68 0f       	add	r22, r24
    4da6:	dc cf       	rjmp	.-72     	; 0x4d60 <nibbleChange+0x166>
    4da8:	67 ff       	sbrs	r22, 7
    4daa:	8f cf       	rjmp	.-226    	; 0x4cca <nibbleChange+0xd0>
    4dac:	69 e0       	ldi	r22, 0x09	; 9
    4dae:	8d cf       	rjmp	.-230    	; 0x4cca <nibbleChange+0xd0>
    4db0:	61 30       	cpi	r22, 0x01	; 1
    4db2:	09 f0       	breq	.+2      	; 0x4db6 <nibbleChange+0x1bc>
    4db4:	4e cf       	rjmp	.-356    	; 0x4c52 <nibbleChange+0x58>
    4db6:	20 e0       	ldi	r18, 0x00	; 0
    4db8:	20 93 67 05 	sts	0x0567, r18	; 0x800567 <nibble>
    4dbc:	68 2f       	mov	r22, r24
    4dbe:	66 0f       	add	r22, r22
    4dc0:	86 0f       	add	r24, r22
    4dc2:	88 0f       	add	r24, r24
    4dc4:	88 0f       	add	r24, r24
    4dc6:	82 0f       	add	r24, r18
    4dc8:	87 ff       	sbrs	r24, 7
    4dca:	49 cf       	rjmp	.-366    	; 0x4c5e <nibbleChange+0x64>
    4dcc:	87 e0       	ldi	r24, 0x07	; 7
    4dce:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4dd2:	8a e0       	ldi	r24, 0x0A	; 10
    4dd4:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble+0x1>
    4dd8:	08 95       	ret
    4dda:	6f 3f       	cpi	r22, 0xFF	; 255
    4ddc:	19 f7       	brne	.-58     	; 0x4da4 <nibbleChange+0x1aa>
    4dde:	83 e0       	ldi	r24, 0x03	; 3
    4de0:	80 83       	st	Z, r24
    4de2:	08 95       	ret
    4de4:	80 31       	cpi	r24, 0x10	; 16
    4de6:	09 f0       	breq	.+2      	; 0x4dea <nibbleChange+0x1f0>
    4de8:	5f cf       	rjmp	.-322    	; 0x4ca8 <nibbleChange+0xae>
    4dea:	81 e0       	ldi	r24, 0x01	; 1
    4dec:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4df0:	08 95       	ret
    4df2:	80 31       	cpi	r24, 0x10	; 16
    4df4:	69 f2       	breq	.-102    	; 0x4d90 <nibbleChange+0x196>
    4df6:	8f 3f       	cpi	r24, 0xFF	; 255
    4df8:	09 f0       	breq	.+2      	; 0x4dfc <nibbleChange+0x202>
    4dfa:	56 cf       	rjmp	.-340    	; 0x4ca8 <nibbleChange+0xae>
    4dfc:	f6 cf       	rjmp	.-20     	; 0x4dea <nibbleChange+0x1f0>
    4dfe:	69 e0       	ldi	r22, 0x09	; 9
    4e00:	81 cf       	rjmp	.-254    	; 0x4d04 <nibbleChange+0x10a>
    4e02:	8f ef       	ldi	r24, 0xFF	; 255
    4e04:	80 83       	st	Z, r24
    4e06:	08 95       	ret
    4e08:	10 82       	st	Z, r1
    4e0a:	08 95       	ret
    4e0c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4e10:	68 0f       	add	r22, r24
    4e12:	67 70       	andi	r22, 0x07	; 7
    4e14:	60 93 67 05 	sts	0x0567, r22	; 0x800567 <nibble>
    4e18:	08 95       	ret
    4e1a:	33 23       	and	r19, r19
    4e1c:	21 f0       	breq	.+8      	; 0x4e26 <nibbleChange+0x22c>
    4e1e:	61 30       	cpi	r22, 0x01	; 1
    4e20:	f1 f0       	breq	.+60     	; 0x4e5e <nibbleChange+0x264>
    4e22:	6f 3f       	cpi	r22, 0xFF	; 255
    4e24:	51 f1       	breq	.+84     	; 0x4e7a <nibbleChange+0x280>
    4e26:	68 0f       	add	r22, r24
    4e28:	60 93 68 05 	sts	0x0568, r22	; 0x800568 <nibble+0x1>
    4e2c:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <nibble>
    4e30:	2f 3f       	cpi	r18, 0xFF	; 255
    4e32:	09 f4       	brne	.+2      	; 0x4e36 <nibbleChange+0x23c>
    4e34:	14 cf       	rjmp	.-472    	; 0x4c5e <nibbleChange+0x64>
    4e36:	6f 3f       	cpi	r22, 0xFF	; 255
    4e38:	09 f4       	brne	.+2      	; 0x4e3c <nibbleChange+0x242>
    4e3a:	11 cf       	rjmp	.-478    	; 0x4c5e <nibbleChange+0x64>
    4e3c:	86 2f       	mov	r24, r22
    4e3e:	be cf       	rjmp	.-132    	; 0x4dbc <nibbleChange+0x1c2>
    4e40:	83 e0       	ldi	r24, 0x03	; 3
    4e42:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble+0x1>
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <nibble+0x2>
    4e4c:	08 95       	ret
    4e4e:	31 11       	cpse	r19, r1
    4e50:	16 c0       	rjmp	.+44     	; 0x4e7e <nibbleChange+0x284>
    4e52:	88 23       	and	r24, r24
    4e54:	31 f3       	breq	.-52     	; 0x4e22 <nibbleChange+0x228>
    4e56:	8a 30       	cpi	r24, 0x0A	; 10
    4e58:	31 f7       	brne	.-52     	; 0x4e26 <nibbleChange+0x22c>
    4e5a:	61 30       	cpi	r22, 0x01	; 1
    4e5c:	21 f7       	brne	.-56     	; 0x4e26 <nibbleChange+0x22c>
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	90 93 68 05 	sts	0x0568, r25	; 0x800568 <nibble+0x1>
    4e64:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <nibble>
    4e68:	2f 3f       	cpi	r18, 0xFF	; 255
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <nibbleChange+0x274>
    4e6c:	f8 ce       	rjmp	.-528    	; 0x4c5e <nibbleChange+0x64>
    4e6e:	89 2f       	mov	r24, r25
    4e70:	a5 cf       	rjmp	.-182    	; 0x4dbc <nibbleChange+0x1c2>
    4e72:	80 e1       	ldi	r24, 0x10	; 16
    4e74:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <nibble>
    4e78:	08 95       	ret
    4e7a:	9a e0       	ldi	r25, 0x0A	; 10
    4e7c:	f1 cf       	rjmp	.-30     	; 0x4e60 <nibbleChange+0x266>
    4e7e:	81 11       	cpse	r24, r1
    4e80:	08 c0       	rjmp	.+16     	; 0x4e92 <nibbleChange+0x298>
    4e82:	6f 3f       	cpi	r22, 0xFF	; 255
    4e84:	81 f6       	brne	.-96     	; 0x4e26 <nibbleChange+0x22c>
    4e86:	8f ef       	ldi	r24, 0xFF	; 255
    4e88:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble+0x1>
    4e8c:	08 95       	ret
    4e8e:	2b e0       	ldi	r18, 0x0B	; 11
    4e90:	93 cf       	rjmp	.-218    	; 0x4db8 <nibbleChange+0x1be>
    4e92:	8a 30       	cpi	r24, 0x0A	; 10
    4e94:	41 f6       	brne	.-112    	; 0x4e26 <nibbleChange+0x22c>
    4e96:	61 30       	cpi	r22, 0x01	; 1
    4e98:	31 f6       	brne	.-116    	; 0x4e26 <nibbleChange+0x22c>
    4e9a:	f5 cf       	rjmp	.-22     	; 0x4e86 <nibbleChange+0x28c>

00004e9c <nibbleToData>:
    4e9c:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <dataType>
    4ea0:	8e 2f       	mov	r24, r30
    4ea2:	90 e0       	ldi	r25, 0x00	; 0
    4ea4:	fc 01       	movw	r30, r24
    4ea6:	32 97       	sbiw	r30, 0x02	; 2
    4ea8:	ea 30       	cpi	r30, 0x0A	; 10
    4eaa:	f1 05       	cpc	r31, r1
    4eac:	70 f5       	brcc	.+92     	; 0x4f0a <nibbleToData+0x6e>
    4eae:	88 27       	eor	r24, r24
    4eb0:	e0 57       	subi	r30, 0x70	; 112
    4eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    4eb6:	0c 94 a1 3d 	jmp	0x7b42	; 0x7b42 <__tablejump2__>
    4eba:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <nibble+0x7>
    4ebe:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <nibble+0x6>
    4ec2:	20 e1       	ldi	r18, 0x10	; 16
    4ec4:	92 9f       	mul	r25, r18
    4ec6:	80 0d       	add	r24, r0
    4ec8:	11 24       	eor	r1, r1
    4eca:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <dataEntry32>
    4ece:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <nibble+0x5>
    4ed2:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <nibble+0x4>
    4ed6:	30 e1       	ldi	r19, 0x10	; 16
    4ed8:	93 9f       	mul	r25, r19
    4eda:	80 0d       	add	r24, r0
    4edc:	11 24       	eor	r1, r1
    4ede:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <dataEntry32+0x1>
    4ee2:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <nibble+0x3>
    4ee6:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <nibble+0x2>
    4eea:	40 e1       	ldi	r20, 0x10	; 16
    4eec:	94 9f       	mul	r25, r20
    4eee:	80 0d       	add	r24, r0
    4ef0:	11 24       	eor	r1, r1
    4ef2:	80 93 54 05 	sts	0x0554, r24	; 0x800554 <dataEntry32+0x2>
    4ef6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4efa:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <nibble>
    4efe:	20 e1       	ldi	r18, 0x10	; 16
    4f00:	92 9f       	mul	r25, r18
    4f02:	80 0d       	add	r24, r0
    4f04:	11 24       	eor	r1, r1
    4f06:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <dataEntry32+0x3>
    4f0a:	08 95       	ret
    4f0c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4f10:	88 0f       	add	r24, r24
    4f12:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <nibble+0x1>
    4f16:	89 0f       	add	r24, r25
    4f18:	88 0f       	add	r24, r24
    4f1a:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <nibble+0x2>
    4f1e:	89 0f       	add	r24, r25
    4f20:	88 0f       	add	r24, r24
    4f22:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <nibble+0x3>
    4f26:	89 0f       	add	r24, r25
    4f28:	88 0f       	add	r24, r24
    4f2a:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <nibble+0x4>
    4f2e:	89 0f       	add	r24, r25
    4f30:	88 0f       	add	r24, r24
    4f32:	90 91 6c 05 	lds	r25, 0x056C	; 0x80056c <nibble+0x5>
    4f36:	89 0f       	add	r24, r25
    4f38:	88 0f       	add	r24, r24
    4f3a:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <nibble+0x6>
    4f3e:	89 0f       	add	r24, r25
    4f40:	88 0f       	add	r24, r24
    4f42:	90 91 6e 05 	lds	r25, 0x056E	; 0x80056e <nibble+0x7>
    4f46:	89 0f       	add	r24, r25
    4f48:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4f4c:	08 95       	ret
    4f4e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4f52:	20 e1       	ldi	r18, 0x10	; 16
    4f54:	82 9f       	mul	r24, r18
    4f56:	c0 01       	movw	r24, r0
    4f58:	11 24       	eor	r1, r1
    4f5a:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <nibble+0x1>
    4f5e:	9f 70       	andi	r25, 0x0F	; 15
    4f60:	89 2b       	or	r24, r25
    4f62:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4f66:	08 95       	ret
    4f68:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    4f6e:	09 f4       	brne	.+2      	; 0x4f72 <nibbleToData+0xd6>
    4f70:	3e c0       	rjmp	.+124    	; 0x4fee <nibbleToData+0x152>
    4f72:	81 50       	subi	r24, 0x01	; 1
    4f74:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4f78:	08 95       	ret
    4f7a:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <nibble>
    4f7e:	9f 3f       	cpi	r25, 0xFF	; 255
    4f80:	b1 f1       	breq	.+108    	; 0x4fee <nibbleToData+0x152>
    4f82:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4f86:	8f 3f       	cpi	r24, 0xFF	; 255
    4f88:	91 f1       	breq	.+100    	; 0x4fee <nibbleToData+0x152>
    4f8a:	28 2f       	mov	r18, r24
    4f8c:	22 0f       	add	r18, r18
    4f8e:	82 0f       	add	r24, r18
    4f90:	88 0f       	add	r24, r24
    4f92:	88 0f       	add	r24, r24
    4f94:	89 0f       	add	r24, r25
    4f96:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4f9a:	08 95       	ret
    4f9c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4fa0:	30 e2       	ldi	r19, 0x20	; 32
    4fa2:	83 9f       	mul	r24, r19
    4fa4:	c0 01       	movw	r24, r0
    4fa6:	11 24       	eor	r1, r1
    4fa8:	30 91 68 05 	lds	r19, 0x0568	; 0x800568 <nibble+0x1>
    4fac:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <nibble+0x2>
    4fb0:	4a e0       	ldi	r20, 0x0A	; 10
    4fb2:	34 9f       	mul	r19, r20
    4fb4:	20 0d       	add	r18, r0
    4fb6:	11 24       	eor	r1, r1
    4fb8:	20 32       	cpi	r18, 0x20	; 32
    4fba:	78 f1       	brcs	.+94     	; 0x501a <nibbleToData+0x17e>
    4fbc:	8f 61       	ori	r24, 0x1F	; 31
    4fbe:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4fc2:	08 95       	ret
    4fc4:	20 91 67 05 	lds	r18, 0x0567	; 0x800567 <nibble>
    4fc8:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble+0x1>
    4fcc:	3a e0       	ldi	r19, 0x0A	; 10
    4fce:	83 9f       	mul	r24, r19
    4fd0:	c0 01       	movw	r24, r0
    4fd2:	11 24       	eor	r1, r1
    4fd4:	44 e6       	ldi	r20, 0x64	; 100
    4fd6:	24 9f       	mul	r18, r20
    4fd8:	80 0d       	add	r24, r0
    4fda:	91 1d       	adc	r25, r1
    4fdc:	11 24       	eor	r1, r1
    4fde:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <nibble+0x2>
    4fe2:	82 0f       	add	r24, r18
    4fe4:	91 1d       	adc	r25, r1
    4fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    4fe8:	91 05       	cpc	r25, r1
    4fea:	a1 f0       	breq	.+40     	; 0x5014 <nibbleToData+0x178>
    4fec:	9c f0       	brlt	.+38     	; 0x5014 <nibbleToData+0x178>
    4fee:	8f ef       	ldi	r24, 0xFF	; 255
    4ff0:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4ff4:	08 95       	ret
    4ff6:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    4ffa:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    4ffe:	84 30       	cpi	r24, 0x04	; 4
    5000:	b0 f7       	brcc	.-20     	; 0x4fee <nibbleToData+0x152>
    5002:	08 95       	ret
    5004:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    5008:	83 70       	andi	r24, 0x03	; 3
    500a:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    500e:	08 95       	ret
    5010:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <nibble>
    5014:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    5018:	08 95       	ret
    501a:	82 2b       	or	r24, r18
    501c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    5020:	08 95       	ret

00005022 <menuCurrMenuToLCD>:
    5022:	0f 93       	push	r16
    5024:	1f 93       	push	r17
    5026:	cf 93       	push	r28
    5028:	df 93       	push	r29
    502a:	89 e4       	ldi	r24, 0x49	; 73
    502c:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5030:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    5034:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    5038:	c4 91       	lpm	r28, Z
    503a:	c0 7c       	andi	r28, 0xC0	; 192
    503c:	c0 38       	cpi	r28, 0x80	; 128
    503e:	09 f4       	brne	.+2      	; 0x5042 <menuCurrMenuToLCD+0x20>
    5040:	40 c0       	rjmp	.+128    	; 0x50c2 <menuCurrMenuToLCD+0xa0>
    5042:	8f e7       	ldi	r24, 0x7F	; 127
    5044:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    5048:	66 e0       	ldi	r22, 0x06	; 6
    504a:	7c e0       	ldi	r23, 0x0C	; 12
    504c:	82 e0       	ldi	r24, 0x02	; 2
    504e:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    5052:	c0 3c       	cpi	r28, 0xC0	; 192
    5054:	89 f1       	breq	.+98     	; 0x50b8 <menuCurrMenuToLCD+0x96>
    5056:	68 e0       	ldi	r22, 0x08	; 8
    5058:	7c e0       	ldi	r23, 0x0C	; 12
    505a:	83 e0       	ldi	r24, 0x03	; 3
    505c:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    5060:	de e7       	ldi	r29, 0x7E	; 126
    5062:	6c e0       	ldi	r22, 0x0C	; 12
    5064:	7c e0       	ldi	r23, 0x0C	; 12
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    506c:	6a e0       	ldi	r22, 0x0A	; 10
    506e:	7c e0       	ldi	r23, 0x0C	; 12
    5070:	81 e0       	ldi	r24, 0x01	; 1
    5072:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    5076:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    507a:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    507e:	0e 5f       	subi	r16, 0xFE	; 254
    5080:	1f 4f       	sbci	r17, 0xFF	; 255
    5082:	ca e0       	ldi	r28, 0x0A	; 10
    5084:	06 c0       	rjmp	.+12     	; 0x5092 <menuCurrMenuToLCD+0x70>
    5086:	0f 5f       	subi	r16, 0xFF	; 255
    5088:	1f 4f       	sbci	r17, 0xFF	; 255
    508a:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    508e:	c1 50       	subi	r28, 0x01	; 1
    5090:	51 f0       	breq	.+20     	; 0x50a6 <menuCurrMenuToLCD+0x84>
    5092:	f8 01       	movw	r30, r16
    5094:	84 91       	lpm	r24, Z
    5096:	81 11       	cpse	r24, r1
    5098:	f6 cf       	rjmp	.-20     	; 0x5086 <menuCurrMenuToLCD+0x64>
    509a:	8d 2f       	mov	r24, r29
    509c:	d0 e2       	ldi	r29, 0x20	; 32
    509e:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    50a2:	c1 50       	subi	r28, 0x01	; 1
    50a4:	b1 f7       	brne	.-20     	; 0x5092 <menuCurrMenuToLCD+0x70>
    50a6:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
    50aa:	8a e4       	ldi	r24, 0x4A	; 74
    50ac:	df 91       	pop	r29
    50ae:	cf 91       	pop	r28
    50b0:	1f 91       	pop	r17
    50b2:	0f 91       	pop	r16
    50b4:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>
    50b8:	83 e0       	ldi	r24, 0x03	; 3
    50ba:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    50be:	d0 e2       	ldi	r29, 0x20	; 32
    50c0:	d0 cf       	rjmp	.-96     	; 0x5062 <menuCurrMenuToLCD+0x40>
    50c2:	80 e2       	ldi	r24, 0x20	; 32
    50c4:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    50c8:	82 e0       	ldi	r24, 0x02	; 2
    50ca:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    50ce:	c3 cf       	rjmp	.-122    	; 0x5056 <menuCurrMenuToLCD+0x34>

000050d0 <menu_ClearDataDisp>:
    50d0:	8e e1       	ldi	r24, 0x1E	; 30
    50d2:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    50d6:	8a e0       	ldi	r24, 0x0A	; 10
    50d8:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <lcd_blank>

000050dc <menu_ClearAllDisp>:
    50dc:	80 e4       	ldi	r24, 0x40	; 64
    50de:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    50e2:	8a e0       	ldi	r24, 0x0A	; 10
    50e4:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    50e8:	8a e4       	ldi	r24, 0x4A	; 74
    50ea:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    50ee:	8a e0       	ldi	r24, 0x0A	; 10
    50f0:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    50f4:	8e e1       	ldi	r24, 0x1E	; 30
    50f6:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    50fa:	8a e0       	ldi	r24, 0x0A	; 10
    50fc:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    5100:	84 e1       	ldi	r24, 0x14	; 20
    5102:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5106:	8a e0       	ldi	r24, 0x0A	; 10
    5108:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <lcd_blank>

0000510c <menuItemChanged>:
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	cf 93       	push	r28
    5112:	8f ef       	ldi	r24, 0xFF	; 255
    5114:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <swTimer+0xe>
    5118:	40 91 58 05 	lds	r20, 0x0558	; 0x800558 <currentMenu>
    511c:	50 91 59 05 	lds	r21, 0x0559	; 0x800559 <currentMenu+0x1>
    5120:	fa 01       	movw	r30, r20
    5122:	24 91       	lpm	r18, Z
    5124:	2f 73       	andi	r18, 0x3F	; 63
    5126:	22 30       	cpi	r18, 0x02	; 2
    5128:	08 f4       	brcc	.+2      	; 0x512c <menuItemChanged+0x20>
    512a:	4b c0       	rjmp	.+150    	; 0x51c2 <menuItemChanged+0xb6>
    512c:	3e 96       	adiw	r30, 0x0e	; 14
    512e:	65 91       	lpm	r22, Z+
    5130:	75 91       	lpm	r23, Z+
    5132:	61 15       	cp	r22, r1
    5134:	71 05       	cpc	r23, r1
    5136:	09 f4       	brne	.+2      	; 0x513a <menuItemChanged+0x2e>
    5138:	44 c0       	rjmp	.+136    	; 0x51c2 <menuItemChanged+0xb6>
    513a:	82 2f       	mov	r24, r18
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	01 97       	sbiw	r24, 0x01	; 1
    5140:	fc 01       	movw	r30, r24
    5142:	ee 0f       	add	r30, r30
    5144:	ff 1f       	adc	r31, r31
    5146:	ee 0f       	add	r30, r30
    5148:	ff 1f       	adc	r31, r31
    514a:	ee 0f       	add	r30, r30
    514c:	ff 1f       	adc	r31, r31
    514e:	e8 0f       	add	r30, r24
    5150:	f9 1f       	adc	r31, r25
    5152:	e0 5a       	subi	r30, 0xA0	; 160
    5154:	fc 4f       	sbci	r31, 0xFC	; 252
    5156:	f0 93 23 05 	sts	0x0523, r31	; 0x800523 <pNibbleInfo+0x1>
    515a:	e0 93 22 05 	sts	0x0522, r30	; 0x800522 <pNibbleInfo>
    515e:	84 91       	lpm	r24, Z
    5160:	80 93 50 05 	sts	0x0550, r24	; 0x800550 <nibbleCount>
    5164:	20 93 1e 05 	sts	0x051E, r18	; 0x80051e <dataType>
    5168:	fa 01       	movw	r30, r20
    516a:	31 96       	adiw	r30, 0x01	; 1
    516c:	84 91       	lpm	r24, Z
    516e:	87 fd       	sbrc	r24, 7
    5170:	47 c0       	rjmp	.+142    	; 0x5200 <menuItemChanged+0xf4>
    5172:	80 e0       	ldi	r24, 0x00	; 0
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	fb 01       	movw	r30, r22
    5178:	e8 0f       	add	r30, r24
    517a:	f9 1f       	adc	r31, r25
    517c:	2b 30       	cpi	r18, 0x0B	; 11
    517e:	99 f1       	breq	.+102    	; 0x51e6 <menuItemChanged+0xda>
    5180:	80 81       	ld	r24, Z
    5182:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <dataEntry>
    5186:	17 db       	rcall	.-2514   	; 0x47b6 <dataToNibbles>
    5188:	0c dc       	rcall	.-2024   	; 0x49a2 <nibbleToLCDstring>
    518a:	8e e1       	ldi	r24, 0x1E	; 30
    518c:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5190:	ca e0       	ldi	r28, 0x0A	; 10
    5192:	07 e2       	ldi	r16, 0x27	; 39
    5194:	12 e0       	ldi	r17, 0x02	; 2
    5196:	06 c0       	rjmp	.+12     	; 0x51a4 <menuItemChanged+0x98>
    5198:	0f 5f       	subi	r16, 0xFF	; 255
    519a:	1f 4f       	sbci	r17, 0xFF	; 255
    519c:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    51a0:	c1 50       	subi	r28, 0x01	; 1
    51a2:	49 f0       	breq	.+18     	; 0x51b6 <menuItemChanged+0xaa>
    51a4:	f8 01       	movw	r30, r16
    51a6:	80 81       	ld	r24, Z
    51a8:	81 11       	cpse	r24, r1
    51aa:	f6 cf       	rjmp	.-20     	; 0x5198 <menuItemChanged+0x8c>
    51ac:	80 e2       	ldi	r24, 0x20	; 32
    51ae:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    51b2:	c1 50       	subi	r28, 0x01	; 1
    51b4:	b9 f7       	brne	.-18     	; 0x51a4 <menuItemChanged+0x98>
    51b6:	8a e4       	ldi	r24, 0x4A	; 74
    51b8:	cf 91       	pop	r28
    51ba:	1f 91       	pop	r17
    51bc:	0f 91       	pop	r16
    51be:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>
    51c2:	8e e1       	ldi	r24, 0x1E	; 30
    51c4:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    51c8:	8a e0       	ldi	r24, 0x0A	; 10
    51ca:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    51ce:	80 e6       	ldi	r24, 0x60	; 96
    51d0:	93 e0       	ldi	r25, 0x03	; 3
    51d2:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <pNibbleInfo+0x1>
    51d6:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <pNibbleInfo>
    51da:	8a e4       	ldi	r24, 0x4A	; 74
    51dc:	cf 91       	pop	r28
    51de:	1f 91       	pop	r17
    51e0:	0f 91       	pop	r16
    51e2:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>
    51e6:	80 81       	ld	r24, Z
    51e8:	91 81       	ldd	r25, Z+1	; 0x01
    51ea:	a2 81       	ldd	r26, Z+2	; 0x02
    51ec:	b3 81       	ldd	r27, Z+3	; 0x03
    51ee:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <dataEntry32>
    51f2:	90 93 53 05 	sts	0x0553, r25	; 0x800553 <dataEntry32+0x1>
    51f6:	a0 93 54 05 	sts	0x0554, r26	; 0x800554 <dataEntry32+0x2>
    51fa:	b0 93 55 05 	sts	0x0555, r27	; 0x800555 <dataEntry32+0x3>
    51fe:	c3 cf       	rjmp	.-122    	; 0x5186 <menuItemChanged+0x7a>
    5200:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <DataAdressOffset>
    5204:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <DataAdressOffset+0x1>
    5208:	b6 cf       	rjmp	.-148    	; 0x5176 <menuItemChanged+0x6a>

0000520a <menu_InitLCD>:
    520a:	0f 93       	push	r16
    520c:	1f 93       	push	r17
    520e:	cf 93       	push	r28
    5210:	df 93       	push	r29
    5212:	84 e1       	ldi	r24, 0x14	; 20
    5214:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5218:	8a e0       	ldi	r24, 0x0A	; 10
    521a:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    521e:	76 df       	rcall	.-276    	; 0x510c <menuItemChanged>
    5220:	80 e4       	ldi	r24, 0x40	; 64
    5222:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5226:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <menuStackIndex>
    522a:	e1 11       	cpse	r30, r1
    522c:	1e c0       	rjmp	.+60     	; 0x526a <menu_InitLCD+0x60>
    522e:	00 91 4d 05 	lds	r16, 0x054D	; 0x80054d <pMenuTopTitle>
    5232:	10 91 4e 05 	lds	r17, 0x054E	; 0x80054e <pMenuTopTitle+0x1>
    5236:	ca e0       	ldi	r28, 0x0A	; 10
    5238:	da e3       	ldi	r29, 0x3A	; 58
    523a:	06 c0       	rjmp	.+12     	; 0x5248 <menu_InitLCD+0x3e>
    523c:	0f 5f       	subi	r16, 0xFF	; 255
    523e:	1f 4f       	sbci	r17, 0xFF	; 255
    5240:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    5244:	c1 50       	subi	r28, 0x01	; 1
    5246:	51 f0       	breq	.+20     	; 0x525c <menu_InitLCD+0x52>
    5248:	f8 01       	movw	r30, r16
    524a:	84 91       	lpm	r24, Z
    524c:	81 11       	cpse	r24, r1
    524e:	f6 cf       	rjmp	.-20     	; 0x523c <menu_InitLCD+0x32>
    5250:	8d 2f       	mov	r24, r29
    5252:	d0 e2       	ldi	r29, 0x20	; 32
    5254:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    5258:	c1 50       	subi	r28, 0x01	; 1
    525a:	b1 f7       	brne	.-20     	; 0x5248 <menu_InitLCD+0x3e>
    525c:	e2 de       	rcall	.-572    	; 0x5022 <menuCurrMenuToLCD>
    525e:	df 91       	pop	r29
    5260:	cf 91       	pop	r28
    5262:	1f 91       	pop	r17
    5264:	0f 91       	pop	r16
    5266:	0c 94 6c 3c 	jmp	0x78d8	; 0x78d8 <lcd_cursosblink>
    526a:	f0 e0       	ldi	r31, 0x00	; 0
    526c:	ee 0f       	add	r30, r30
    526e:	ff 1f       	adc	r31, r31
    5270:	ee 5d       	subi	r30, 0xDE	; 222
    5272:	fa 4f       	sbci	r31, 0xFA	; 250
    5274:	00 81       	ld	r16, Z
    5276:	11 81       	ldd	r17, Z+1	; 0x01
    5278:	0e 5f       	subi	r16, 0xFE	; 254
    527a:	1f 4f       	sbci	r17, 0xFF	; 255
    527c:	ca e0       	ldi	r28, 0x0A	; 10
    527e:	da e3       	ldi	r29, 0x3A	; 58
    5280:	06 c0       	rjmp	.+12     	; 0x528e <menu_InitLCD+0x84>
    5282:	0f 5f       	subi	r16, 0xFF	; 255
    5284:	1f 4f       	sbci	r17, 0xFF	; 255
    5286:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    528a:	c1 50       	subi	r28, 0x01	; 1
    528c:	39 f3       	breq	.-50     	; 0x525c <menu_InitLCD+0x52>
    528e:	f8 01       	movw	r30, r16
    5290:	84 91       	lpm	r24, Z
    5292:	81 11       	cpse	r24, r1
    5294:	f6 cf       	rjmp	.-20     	; 0x5282 <menu_InitLCD+0x78>
    5296:	8d 2f       	mov	r24, r29
    5298:	d0 e2       	ldi	r29, 0x20	; 32
    529a:	f5 cf       	rjmp	.-22     	; 0x5286 <menu_InitLCD+0x7c>

0000529c <menu_ProcessMessage>:
    529c:	0f 93       	push	r16
    529e:	1f 93       	push	r17
    52a0:	cf 93       	push	r28
    52a2:	df 93       	push	r29
    52a4:	c8 2f       	mov	r28, r24
    52a6:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <lcd_cursosblink>
    52aa:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    52ae:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    52b2:	f8 01       	movw	r30, r16
    52b4:	84 91       	lpm	r24, Z
    52b6:	8f 73       	andi	r24, 0x3F	; 63
    52b8:	81 30       	cpi	r24, 0x01	; 1
    52ba:	29 f1       	breq	.+74     	; 0x5306 <menu_ProcessMessage+0x6a>
    52bc:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <nibbleIndex>
    52c0:	8f 3f       	cpi	r24, 0xFF	; 255
    52c2:	09 f1       	breq	.+66     	; 0x5306 <menu_ProcessMessage+0x6a>
    52c4:	c3 30       	cpi	r28, 0x03	; 3
    52c6:	09 f4       	brne	.+2      	; 0x52ca <menu_ProcessMessage+0x2e>
    52c8:	9c c0       	rjmp	.+312    	; 0x5402 <menu_ProcessMessage+0x166>
    52ca:	08 f4       	brcc	.+2      	; 0x52ce <menu_ProcessMessage+0x32>
    52cc:	e0 c0       	rjmp	.+448    	; 0x548e <menu_ProcessMessage+0x1f2>
    52ce:	c5 30       	cpi	r28, 0x05	; 5
    52d0:	09 f4       	brne	.+2      	; 0x52d4 <menu_ProcessMessage+0x38>
    52d2:	b9 c0       	rjmp	.+370    	; 0x5446 <menu_ProcessMessage+0x1aa>
    52d4:	08 f4       	brcc	.+2      	; 0x52d8 <menu_ProcessMessage+0x3c>
    52d6:	8b c1       	rjmp	.+790    	; 0x55ee <menu_ProcessMessage+0x352>
    52d8:	c6 30       	cpi	r28, 0x06	; 6
    52da:	09 f0       	breq	.+2      	; 0x52de <menu_ProcessMessage+0x42>
    52dc:	8c c0       	rjmp	.+280    	; 0x53f6 <menu_ProcessMessage+0x15a>
    52de:	f8 01       	movw	r30, r16
    52e0:	72 96       	adiw	r30, 0x12	; 18
    52e2:	05 90       	lpm	r0, Z+
    52e4:	f4 91       	lpm	r31, Z
    52e6:	e0 2d       	mov	r30, r0
    52e8:	30 97       	sbiw	r30, 0x00	; 0
    52ea:	11 f0       	breq	.+4      	; 0x52f0 <menu_ProcessMessage+0x54>
    52ec:	8c 2f       	mov	r24, r28
    52ee:	19 95       	eicall
    52f0:	8f ef       	ldi	r24, 0xFF	; 255
    52f2:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <nibbleIndex>
    52f6:	95 de       	rcall	.-726    	; 0x5022 <menuCurrMenuToLCD>
    52f8:	09 df       	rcall	.-494    	; 0x510c <menuItemChanged>
    52fa:	80 e0       	ldi	r24, 0x00	; 0
    52fc:	df 91       	pop	r29
    52fe:	cf 91       	pop	r28
    5300:	1f 91       	pop	r17
    5302:	0f 91       	pop	r16
    5304:	08 95       	ret
    5306:	c8 01       	movw	r24, r16
    5308:	01 96       	adiw	r24, 0x01	; 1
    530a:	fc 01       	movw	r30, r24
    530c:	84 91       	lpm	r24, Z
    530e:	86 fd       	sbrc	r24, 6
    5310:	08 c1       	rjmp	.+528    	; 0x5522 <menu_ProcessMessage+0x286>
    5312:	98 2f       	mov	r25, r24
    5314:	90 72       	andi	r25, 0x20	; 32
    5316:	85 ff       	sbrs	r24, 5
    5318:	17 c0       	rjmp	.+46     	; 0x5348 <menu_ProcessMessage+0xac>
    531a:	98 01       	movw	r18, r16
    531c:	20 5f       	subi	r18, 0xF0	; 240
    531e:	3f 4f       	sbci	r19, 0xFF	; 255
    5320:	f9 01       	movw	r30, r18
    5322:	25 91       	lpm	r18, Z+
    5324:	35 91       	lpm	r19, Z+
    5326:	21 15       	cp	r18, r1
    5328:	31 05       	cpc	r19, r1
    532a:	71 f0       	breq	.+28     	; 0x5348 <menu_ProcessMessage+0xac>
    532c:	40 91 1f 05 	lds	r20, 0x051F	; 0x80051f <nibbleIndex>
    5330:	4f 3f       	cpi	r20, 0xFF	; 255
    5332:	51 f0       	breq	.+20     	; 0x5348 <menu_ProcessMessage+0xac>
    5334:	8c 2f       	mov	r24, r28
    5336:	f9 01       	movw	r30, r18
    5338:	19 95       	eicall
    533a:	8f 3f       	cpi	r24, 0xFF	; 255
    533c:	09 f0       	breq	.+2      	; 0x5340 <menu_ProcessMessage+0xa4>
    533e:	74 c1       	rjmp	.+744    	; 0x5628 <menu_ProcessMessage+0x38c>
    5340:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <nibbleIndex>
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	da cf       	rjmp	.-76     	; 0x52fc <menu_ProcessMessage+0x60>
    5348:	c3 30       	cpi	r28, 0x03	; 3
    534a:	09 f4       	brne	.+2      	; 0x534e <menu_ProcessMessage+0xb2>
    534c:	15 c1       	rjmp	.+554    	; 0x5578 <menu_ProcessMessage+0x2dc>
    534e:	08 f4       	brcc	.+2      	; 0x5352 <menu_ProcessMessage+0xb6>
    5350:	4c c0       	rjmp	.+152    	; 0x53ea <menu_ProcessMessage+0x14e>
    5352:	c5 30       	cpi	r28, 0x05	; 5
    5354:	09 f4       	brne	.+2      	; 0x5358 <menu_ProcessMessage+0xbc>
    5356:	10 c1       	rjmp	.+544    	; 0x5578 <menu_ProcessMessage+0x2dc>
    5358:	08 f4       	brcc	.+2      	; 0x535c <menu_ProcessMessage+0xc0>
    535a:	ff c0       	rjmp	.+510    	; 0x555a <menu_ProcessMessage+0x2be>
    535c:	c6 30       	cpi	r28, 0x06	; 6
    535e:	09 f0       	breq	.+2      	; 0x5362 <menu_ProcessMessage+0xc6>
    5360:	4a c0       	rjmp	.+148    	; 0x53f6 <menu_ProcessMessage+0x15a>
    5362:	84 ff       	sbrs	r24, 4
    5364:	04 c0       	rjmp	.+8      	; 0x536e <menu_ProcessMessage+0xd2>
    5366:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <menuVMenuSoftKey+0x1>
    536a:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <menuVMenuSoftKey>
    536e:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <menuStackIndex>
    5372:	ee 23       	and	r30, r30
    5374:	09 f4       	brne	.+2      	; 0x5378 <menu_ProcessMessage+0xdc>
    5376:	83 c1       	rjmp	.+774    	; 0x567e <menu_ProcessMessage+0x3e2>
    5378:	e1 50       	subi	r30, 0x01	; 1
    537a:	e0 93 19 05 	sts	0x0519, r30	; 0x800519 <menuStackIndex>
    537e:	f0 e0       	ldi	r31, 0x00	; 0
    5380:	ee 0f       	add	r30, r30
    5382:	ff 1f       	adc	r31, r31
    5384:	ec 5d       	subi	r30, 0xDC	; 220
    5386:	fa 4f       	sbci	r31, 0xFA	; 250
    5388:	01 90       	ld	r0, Z+
    538a:	f0 81       	ld	r31, Z
    538c:	e0 2d       	mov	r30, r0
    538e:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    5392:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    5396:	72 96       	adiw	r30, 0x12	; 18
    5398:	05 90       	lpm	r0, Z+
    539a:	f4 91       	lpm	r31, Z
    539c:	e0 2d       	mov	r30, r0
    539e:	30 97       	sbiw	r30, 0x00	; 0
    53a0:	11 f0       	breq	.+4      	; 0x53a6 <menu_ProcessMessage+0x10a>
    53a2:	80 e0       	ldi	r24, 0x00	; 0
    53a4:	19 95       	eicall
    53a6:	84 e1       	ldi	r24, 0x14	; 20
    53a8:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    53ac:	8a e0       	ldi	r24, 0x0A	; 10
    53ae:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    53b2:	80 e4       	ldi	r24, 0x40	; 64
    53b4:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    53b8:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <menuStackIndex>
    53bc:	e1 11       	cpse	r30, r1
    53be:	76 c1       	rjmp	.+748    	; 0x56ac <menu_ProcessMessage+0x410>
    53c0:	00 91 4d 05 	lds	r16, 0x054D	; 0x80054d <pMenuTopTitle>
    53c4:	10 91 4e 05 	lds	r17, 0x054E	; 0x80054e <pMenuTopTitle+0x1>
    53c8:	ca e0       	ldi	r28, 0x0A	; 10
    53ca:	da e3       	ldi	r29, 0x3A	; 58
    53cc:	07 c0       	rjmp	.+14     	; 0x53dc <menu_ProcessMessage+0x140>
    53ce:	0f 5f       	subi	r16, 0xFF	; 255
    53d0:	1f 4f       	sbci	r17, 0xFF	; 255
    53d2:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    53d6:	c1 50       	subi	r28, 0x01	; 1
    53d8:	09 f4       	brne	.+2      	; 0x53dc <menu_ProcessMessage+0x140>
    53da:	8d cf       	rjmp	.-230    	; 0x52f6 <menu_ProcessMessage+0x5a>
    53dc:	f8 01       	movw	r30, r16
    53de:	84 91       	lpm	r24, Z
    53e0:	81 11       	cpse	r24, r1
    53e2:	f5 cf       	rjmp	.-22     	; 0x53ce <menu_ProcessMessage+0x132>
    53e4:	8d 2f       	mov	r24, r29
    53e6:	d0 e2       	ldi	r29, 0x20	; 32
    53e8:	f4 cf       	rjmp	.-24     	; 0x53d2 <menu_ProcessMessage+0x136>
    53ea:	c1 30       	cpi	r28, 0x01	; 1
    53ec:	09 f4       	brne	.+2      	; 0x53f0 <menu_ProcessMessage+0x154>
    53ee:	ef c0       	rjmp	.+478    	; 0x55ce <menu_ProcessMessage+0x332>
    53f0:	c2 30       	cpi	r28, 0x02	; 2
    53f2:	09 f4       	brne	.+2      	; 0x53f6 <menu_ProcessMessage+0x15a>
    53f4:	b6 cf       	rjmp	.-148    	; 0x5362 <menu_ProcessMessage+0xc6>
    53f6:	80 e0       	ldi	r24, 0x00	; 0
    53f8:	df 91       	pop	r29
    53fa:	cf 91       	pop	r28
    53fc:	1f 91       	pop	r17
    53fe:	0f 91       	pop	r16
    5400:	08 95       	ret
    5402:	6f ef       	ldi	r22, 0xFF	; 255
    5404:	fa db       	rcall	.-2060   	; 0x4bfa <nibbleChange>
    5406:	4a dd       	rcall	.-1388   	; 0x4e9c <nibbleToData>
    5408:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    540c:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    5410:	84 91       	lpm	r24, Z
    5412:	8f 73       	andi	r24, 0x3F	; 63
    5414:	82 30       	cpi	r24, 0x02	; 2
    5416:	08 f4       	brcc	.+2      	; 0x541a <menu_ProcessMessage+0x17e>
    5418:	4c c0       	rjmp	.+152    	; 0x54b2 <menu_ProcessMessage+0x216>
    541a:	cd d9       	rcall	.-3174   	; 0x47b6 <dataToNibbles>
    541c:	c2 da       	rcall	.-2684   	; 0x49a2 <nibbleToLCDstring>
    541e:	8e e1       	ldi	r24, 0x1E	; 30
    5420:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5424:	ca e0       	ldi	r28, 0x0A	; 10
    5426:	07 e2       	ldi	r16, 0x27	; 39
    5428:	12 e0       	ldi	r17, 0x02	; 2
    542a:	07 c0       	rjmp	.+14     	; 0x543a <menu_ProcessMessage+0x19e>
    542c:	0f 5f       	subi	r16, 0xFF	; 255
    542e:	1f 4f       	sbci	r17, 0xFF	; 255
    5430:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    5434:	c1 50       	subi	r28, 0x01	; 1
    5436:	09 f4       	brne	.+2      	; 0x543a <menu_ProcessMessage+0x19e>
    5438:	3c c0       	rjmp	.+120    	; 0x54b2 <menu_ProcessMessage+0x216>
    543a:	f8 01       	movw	r30, r16
    543c:	80 81       	ld	r24, Z
    543e:	81 11       	cpse	r24, r1
    5440:	f5 cf       	rjmp	.-22     	; 0x542c <menu_ProcessMessage+0x190>
    5442:	80 e2       	ldi	r24, 0x20	; 32
    5444:	f5 cf       	rjmp	.-22     	; 0x5430 <menu_ProcessMessage+0x194>
    5446:	2a dd       	rcall	.-1452   	; 0x4e9c <nibbleToData>
    5448:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    544c:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    5450:	c8 01       	movw	r24, r16
    5452:	0e 96       	adiw	r24, 0x0e	; 14
    5454:	fc 01       	movw	r30, r24
    5456:	a5 91       	lpm	r26, Z+
    5458:	b5 91       	lpm	r27, Z+
    545a:	10 97       	sbiw	r26, 0x00	; 0
    545c:	09 f4       	brne	.+2      	; 0x5460 <menu_ProcessMessage+0x1c4>
    545e:	3f cf       	rjmp	.-386    	; 0x52de <menu_ProcessMessage+0x42>
    5460:	0d 97       	sbiw	r24, 0x0d	; 13
    5462:	fc 01       	movw	r30, r24
    5464:	84 91       	lpm	r24, Z
    5466:	87 fd       	sbrc	r24, 7
    5468:	1c c1       	rjmp	.+568    	; 0x56a2 <menu_ProcessMessage+0x406>
    546a:	80 e0       	ldi	r24, 0x00	; 0
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	a8 0f       	add	r26, r24
    5470:	b9 1f       	adc	r27, r25
    5472:	f8 01       	movw	r30, r16
    5474:	84 91       	lpm	r24, Z
    5476:	8f 73       	andi	r24, 0x3F	; 63
    5478:	8b 30       	cpi	r24, 0x0B	; 11
    547a:	09 f4       	brne	.+2      	; 0x547e <menu_ProcessMessage+0x1e2>
    547c:	78 c1       	rjmp	.+752    	; 0x576e <menu_ProcessMessage+0x4d2>
    547e:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <dataEntry>
    5482:	8c 93       	st	X, r24
    5484:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    5488:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    548c:	28 cf       	rjmp	.-432    	; 0x52de <menu_ProcessMessage+0x42>
    548e:	c1 30       	cpi	r28, 0x01	; 1
    5490:	09 f4       	brne	.+2      	; 0x5494 <menu_ProcessMessage+0x1f8>
    5492:	b8 c0       	rjmp	.+368    	; 0x5604 <menu_ProcessMessage+0x368>
    5494:	c2 30       	cpi	r28, 0x02	; 2
    5496:	09 f0       	breq	.+2      	; 0x549a <menu_ProcessMessage+0x1fe>
    5498:	ae cf       	rjmp	.-164    	; 0x53f6 <menu_ProcessMessage+0x15a>
    549a:	61 e0       	ldi	r22, 0x01	; 1
    549c:	ae db       	rcall	.-2212   	; 0x4bfa <nibbleChange>
    549e:	fe dc       	rcall	.-1540   	; 0x4e9c <nibbleToData>
    54a0:	e0 91 58 05 	lds	r30, 0x0558	; 0x800558 <currentMenu>
    54a4:	f0 91 59 05 	lds	r31, 0x0559	; 0x800559 <currentMenu+0x1>
    54a8:	84 91       	lpm	r24, Z
    54aa:	8f 73       	andi	r24, 0x3F	; 63
    54ac:	82 30       	cpi	r24, 0x02	; 2
    54ae:	08 f0       	brcs	.+2      	; 0x54b2 <menu_ProcessMessage+0x216>
    54b0:	d0 c0       	rjmp	.+416    	; 0x5652 <menu_ProcessMessage+0x3b6>
    54b2:	e0 91 22 05 	lds	r30, 0x0522	; 0x800522 <pNibbleInfo>
    54b6:	f0 91 23 05 	lds	r31, 0x0523	; 0x800523 <pNibbleInfo+0x1>
    54ba:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <nibbleIndex>
    54be:	e8 0f       	add	r30, r24
    54c0:	f1 1d       	adc	r31, r1
    54c2:	31 96       	adiw	r30, 0x01	; 1
    54c4:	84 91       	lpm	r24, Z
    54c6:	82 5e       	subi	r24, 0xE2	; 226
    54c8:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    54cc:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <nibbleIndex>
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	e0 91 22 05 	lds	r30, 0x0522	; 0x800522 <pNibbleInfo>
    54d6:	f0 91 23 05 	lds	r31, 0x0523	; 0x800523 <pNibbleInfo+0x1>
    54da:	84 91       	lpm	r24, Z
    54dc:	90 e0       	ldi	r25, 0x00	; 0
    54de:	01 97       	sbiw	r24, 0x01	; 1
    54e0:	28 17       	cp	r18, r24
    54e2:	39 07       	cpc	r19, r25
    54e4:	84 f5       	brge	.+96     	; 0x5546 <menu_ProcessMessage+0x2aa>
    54e6:	68 e0       	ldi	r22, 0x08	; 8
    54e8:	7c e0       	ldi	r23, 0x0C	; 12
    54ea:	83 e0       	ldi	r24, 0x03	; 3
    54ec:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    54f0:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <nibbleIndex>
    54f4:	81 11       	cpse	r24, r1
    54f6:	2b c0       	rjmp	.+86     	; 0x554e <menu_ProcessMessage+0x2b2>
    54f8:	82 e0       	ldi	r24, 0x02	; 2
    54fa:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    54fe:	64 e0       	ldi	r22, 0x04	; 4
    5500:	7c e0       	ldi	r23, 0x0C	; 12
    5502:	80 e0       	ldi	r24, 0x00	; 0
    5504:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    5508:	62 e0       	ldi	r22, 0x02	; 2
    550a:	7c e0       	ldi	r23, 0x0C	; 12
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    5512:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
    5516:	80 e0       	ldi	r24, 0x00	; 0
    5518:	df 91       	pop	r29
    551a:	cf 91       	pop	r28
    551c:	1f 91       	pop	r17
    551e:	0f 91       	pop	r16
    5520:	08 95       	ret
    5522:	84 e1       	ldi	r24, 0x14	; 20
    5524:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5528:	8a e0       	ldi	r24, 0x0A	; 10
    552a:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    552e:	8a e4       	ldi	r24, 0x4A	; 74
    5530:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5534:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    5538:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    553c:	c8 01       	movw	r24, r16
    553e:	01 96       	adiw	r24, 0x01	; 1
    5540:	fc 01       	movw	r30, r24
    5542:	84 91       	lpm	r24, Z
    5544:	e6 ce       	rjmp	.-564    	; 0x5312 <menu_ProcessMessage+0x76>
    5546:	83 e0       	ldi	r24, 0x03	; 3
    5548:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    554c:	d1 cf       	rjmp	.-94     	; 0x54f0 <menu_ProcessMessage+0x254>
    554e:	66 e0       	ldi	r22, 0x06	; 6
    5550:	7c e0       	ldi	r23, 0x0C	; 12
    5552:	82 e0       	ldi	r24, 0x02	; 2
    5554:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
    5558:	d2 cf       	rjmp	.-92     	; 0x54fe <menu_ProcessMessage+0x262>
    555a:	f8 01       	movw	r30, r16
    555c:	84 91       	lpm	r24, Z
    555e:	80 7c       	andi	r24, 0xC0	; 192
    5560:	80 38       	cpi	r24, 0x80	; 128
    5562:	09 f4       	brne	.+2      	; 0x5566 <menu_ProcessMessage+0x2ca>
    5564:	48 cf       	rjmp	.-368    	; 0x53f6 <menu_ProcessMessage+0x15a>
    5566:	74 97       	sbiw	r30, 0x14	; 20
    5568:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    556c:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    5570:	cd dd       	rcall	.-1126   	; 0x510c <menuItemChanged>
    5572:	57 dd       	rcall	.-1362   	; 0x5022 <menuCurrMenuToLCD>
    5574:	80 e0       	ldi	r24, 0x00	; 0
    5576:	c2 ce       	rjmp	.-636    	; 0x52fc <menu_ProcessMessage+0x60>
    5578:	f8 01       	movw	r30, r16
    557a:	24 91       	lpm	r18, Z
    557c:	2f 73       	andi	r18, 0x3F	; 63
    557e:	22 30       	cpi	r18, 0x02	; 2
    5580:	08 f4       	brcc	.+2      	; 0x5584 <menu_ProcessMessage+0x2e8>
    5582:	ae c0       	rjmp	.+348    	; 0x56e0 <menu_ProcessMessage+0x444>
    5584:	98 01       	movw	r18, r16
    5586:	20 5f       	subi	r18, 0xF0	; 240
    5588:	3f 4f       	sbci	r19, 0xFF	; 255
    558a:	f9 01       	movw	r30, r18
    558c:	25 91       	lpm	r18, Z+
    558e:	35 91       	lpm	r19, Z+
    5590:	21 15       	cp	r18, r1
    5592:	31 05       	cpc	r19, r1
    5594:	61 f0       	breq	.+24     	; 0x55ae <menu_ProcessMessage+0x312>
    5596:	8c 2f       	mov	r24, r28
    5598:	f9 01       	movw	r30, r18
    559a:	19 95       	eicall
    559c:	b7 dd       	rcall	.-1170   	; 0x510c <menuItemChanged>
    559e:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    55a2:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    55a6:	c8 01       	movw	r24, r16
    55a8:	01 96       	adiw	r24, 0x01	; 1
    55aa:	fc 01       	movw	r30, r24
    55ac:	84 91       	lpm	r24, Z
    55ae:	83 fd       	sbrc	r24, 3
    55b0:	22 cf       	rjmp	.-444    	; 0x53f6 <menu_ProcessMessage+0x15a>
    55b2:	f8 01       	movw	r30, r16
    55b4:	3e 96       	adiw	r30, 0x0e	; 14
    55b6:	85 91       	lpm	r24, Z+
    55b8:	95 91       	lpm	r25, Z+
    55ba:	89 2b       	or	r24, r25
    55bc:	09 f4       	brne	.+2      	; 0x55c0 <menu_ProcessMessage+0x324>
    55be:	1b cf       	rjmp	.-458    	; 0x53f6 <menu_ProcessMessage+0x15a>
    55c0:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <nibbleIndex>
    55c4:	e0 91 22 05 	lds	r30, 0x0522	; 0x800522 <pNibbleInfo>
    55c8:	f0 91 23 05 	lds	r31, 0x0523	; 0x800523 <pNibbleInfo+0x1>
    55cc:	7a cf       	rjmp	.-268    	; 0x54c2 <menu_ProcessMessage+0x226>
    55ce:	f8 01       	movw	r30, r16
    55d0:	84 91       	lpm	r24, Z
    55d2:	80 7c       	andi	r24, 0xC0	; 192
    55d4:	80 3c       	cpi	r24, 0xC0	; 192
    55d6:	09 f4       	brne	.+2      	; 0x55da <menu_ProcessMessage+0x33e>
    55d8:	0e cf       	rjmp	.-484    	; 0x53f6 <menu_ProcessMessage+0x15a>
    55da:	f8 01       	movw	r30, r16
    55dc:	74 96       	adiw	r30, 0x14	; 20
    55de:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    55e2:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    55e6:	92 dd       	rcall	.-1244   	; 0x510c <menuItemChanged>
    55e8:	1c dd       	rcall	.-1480   	; 0x5022 <menuCurrMenuToLCD>
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	87 ce       	rjmp	.-754    	; 0x52fc <menu_ProcessMessage+0x60>
    55ee:	88 23       	and	r24, r24
    55f0:	09 f4       	brne	.+2      	; 0x55f4 <menu_ProcessMessage+0x358>
    55f2:	01 cf       	rjmp	.-510    	; 0x53f6 <menu_ProcessMessage+0x15a>
    55f4:	81 50       	subi	r24, 0x01	; 1
    55f6:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <nibbleIndex>
    55fa:	e0 91 22 05 	lds	r30, 0x0522	; 0x800522 <pNibbleInfo>
    55fe:	f0 91 23 05 	lds	r31, 0x0523	; 0x800523 <pNibbleInfo+0x1>
    5602:	5d cf       	rjmp	.-326    	; 0x54be <menu_ProcessMessage+0x222>
    5604:	e0 91 22 05 	lds	r30, 0x0522	; 0x800522 <pNibbleInfo>
    5608:	f0 91 23 05 	lds	r31, 0x0523	; 0x800523 <pNibbleInfo+0x1>
    560c:	48 2f       	mov	r20, r24
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	24 91       	lpm	r18, Z
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	21 50       	subi	r18, 0x01	; 1
    5616:	31 09       	sbc	r19, r1
    5618:	42 17       	cp	r20, r18
    561a:	53 07       	cpc	r21, r19
    561c:	0c f0       	brlt	.+2      	; 0x5620 <menu_ProcessMessage+0x384>
    561e:	eb ce       	rjmp	.-554    	; 0x53f6 <menu_ProcessMessage+0x15a>
    5620:	8f 5f       	subi	r24, 0xFF	; 255
    5622:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <nibbleIndex>
    5626:	4b cf       	rjmp	.-362    	; 0x54be <menu_ProcessMessage+0x222>
    5628:	84 e1       	ldi	r24, 0x14	; 20
    562a:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    562e:	8a e0       	ldi	r24, 0x0A	; 10
    5630:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    5634:	8e e1       	ldi	r24, 0x1E	; 30
    5636:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    563a:	8a e0       	ldi	r24, 0x0A	; 10
    563c:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    5640:	8a e4       	ldi	r24, 0x4A	; 74
    5642:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5646:	8f ef       	ldi	r24, 0xFF	; 255
    5648:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <nibbleIndex>
    564c:	ea dc       	rcall	.-1580   	; 0x5022 <menuCurrMenuToLCD>
    564e:	80 e0       	ldi	r24, 0x00	; 0
    5650:	55 ce       	rjmp	.-854    	; 0x52fc <menu_ProcessMessage+0x60>
    5652:	b1 d8       	rcall	.-3742   	; 0x47b6 <dataToNibbles>
    5654:	a6 d9       	rcall	.-3252   	; 0x49a2 <nibbleToLCDstring>
    5656:	8e e1       	ldi	r24, 0x1E	; 30
    5658:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    565c:	ca e0       	ldi	r28, 0x0A	; 10
    565e:	07 e2       	ldi	r16, 0x27	; 39
    5660:	12 e0       	ldi	r17, 0x02	; 2
    5662:	07 c0       	rjmp	.+14     	; 0x5672 <menu_ProcessMessage+0x3d6>
    5664:	0f 5f       	subi	r16, 0xFF	; 255
    5666:	1f 4f       	sbci	r17, 0xFF	; 255
    5668:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    566c:	c1 50       	subi	r28, 0x01	; 1
    566e:	09 f4       	brne	.+2      	; 0x5672 <menu_ProcessMessage+0x3d6>
    5670:	20 cf       	rjmp	.-448    	; 0x54b2 <menu_ProcessMessage+0x216>
    5672:	f8 01       	movw	r30, r16
    5674:	80 81       	ld	r24, Z
    5676:	81 11       	cpse	r24, r1
    5678:	f5 cf       	rjmp	.-22     	; 0x5664 <menu_ProcessMessage+0x3c8>
    567a:	80 e2       	ldi	r24, 0x20	; 32
    567c:	f5 cf       	rjmp	.-22     	; 0x5668 <menu_ProcessMessage+0x3cc>
    567e:	80 e0       	ldi	r24, 0x00	; 0
    5680:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    5684:	81 e0       	ldi	r24, 0x01	; 1
    5686:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    568a:	82 e0       	ldi	r24, 0x02	; 2
    568c:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    5690:	83 e0       	ldi	r24, 0x03	; 3
    5692:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    5696:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
    569a:	0e 94 73 3c 	call	0x78e6	; 0x78e6 <lcd_cursoroff>
    569e:	8f ef       	ldi	r24, 0xFF	; 255
    56a0:	2d ce       	rjmp	.-934    	; 0x52fc <menu_ProcessMessage+0x60>
    56a2:	80 91 60 05 	lds	r24, 0x0560	; 0x800560 <DataAdressOffset>
    56a6:	90 91 61 05 	lds	r25, 0x0561	; 0x800561 <DataAdressOffset+0x1>
    56aa:	e1 ce       	rjmp	.-574    	; 0x546e <menu_ProcessMessage+0x1d2>
    56ac:	f0 e0       	ldi	r31, 0x00	; 0
    56ae:	ee 0f       	add	r30, r30
    56b0:	ff 1f       	adc	r31, r31
    56b2:	ee 5d       	subi	r30, 0xDE	; 222
    56b4:	fa 4f       	sbci	r31, 0xFA	; 250
    56b6:	00 81       	ld	r16, Z
    56b8:	11 81       	ldd	r17, Z+1	; 0x01
    56ba:	0e 5f       	subi	r16, 0xFE	; 254
    56bc:	1f 4f       	sbci	r17, 0xFF	; 255
    56be:	ca e0       	ldi	r28, 0x0A	; 10
    56c0:	da e3       	ldi	r29, 0x3A	; 58
    56c2:	07 c0       	rjmp	.+14     	; 0x56d2 <menu_ProcessMessage+0x436>
    56c4:	0f 5f       	subi	r16, 0xFF	; 255
    56c6:	1f 4f       	sbci	r17, 0xFF	; 255
    56c8:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    56cc:	c1 50       	subi	r28, 0x01	; 1
    56ce:	09 f4       	brne	.+2      	; 0x56d2 <menu_ProcessMessage+0x436>
    56d0:	12 ce       	rjmp	.-988    	; 0x52f6 <menu_ProcessMessage+0x5a>
    56d2:	f8 01       	movw	r30, r16
    56d4:	84 91       	lpm	r24, Z
    56d6:	81 11       	cpse	r24, r1
    56d8:	f5 cf       	rjmp	.-22     	; 0x56c4 <menu_ProcessMessage+0x428>
    56da:	8d 2f       	mov	r24, r29
    56dc:	d0 e2       	ldi	r29, 0x20	; 32
    56de:	f4 cf       	rjmp	.-24     	; 0x56c8 <menu_ProcessMessage+0x42c>
    56e0:	cf ef       	ldi	r28, 0xFF	; 255
    56e2:	c0 93 1f 05 	sts	0x051F, r28	; 0x80051f <nibbleIndex>
    56e6:	84 ff       	sbrs	r24, 4
    56e8:	50 c0       	rjmp	.+160    	; 0x578a <menu_ProcessMessage+0x4ee>
    56ea:	10 93 71 05 	sts	0x0571, r17	; 0x800571 <menuVMenuSoftKey+0x1>
    56ee:	00 93 70 05 	sts	0x0570, r16	; 0x800570 <menuVMenuSoftKey>
    56f2:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <menuStackIndex>
    56f6:	ee 23       	and	r30, r30
    56f8:	09 f4       	brne	.+2      	; 0x56fc <menu_ProcessMessage+0x460>
    56fa:	7d ce       	rjmp	.-774    	; 0x53f6 <menu_ProcessMessage+0x15a>
    56fc:	e1 50       	subi	r30, 0x01	; 1
    56fe:	e0 93 19 05 	sts	0x0519, r30	; 0x800519 <menuStackIndex>
    5702:	f0 e0       	ldi	r31, 0x00	; 0
    5704:	ee 0f       	add	r30, r30
    5706:	ff 1f       	adc	r31, r31
    5708:	ec 5d       	subi	r30, 0xDC	; 220
    570a:	fa 4f       	sbci	r31, 0xFA	; 250
    570c:	01 90       	ld	r0, Z+
    570e:	f0 81       	ld	r31, Z
    5710:	e0 2d       	mov	r30, r0
    5712:	f0 93 59 05 	sts	0x0559, r31	; 0x800559 <currentMenu+0x1>
    5716:	e0 93 58 05 	sts	0x0558, r30	; 0x800558 <currentMenu>
    571a:	72 96       	adiw	r30, 0x12	; 18
    571c:	05 90       	lpm	r0, Z+
    571e:	f4 91       	lpm	r31, Z
    5720:	e0 2d       	mov	r30, r0
    5722:	30 97       	sbiw	r30, 0x00	; 0
    5724:	11 f0       	breq	.+4      	; 0x572a <menu_ProcessMessage+0x48e>
    5726:	80 e0       	ldi	r24, 0x00	; 0
    5728:	19 95       	eicall
    572a:	84 e1       	ldi	r24, 0x14	; 20
    572c:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5730:	8a e0       	ldi	r24, 0x0A	; 10
    5732:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    5736:	80 e4       	ldi	r24, 0x40	; 64
    5738:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    573c:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <menuStackIndex>
    5740:	e1 11       	cpse	r30, r1
    5742:	98 c0       	rjmp	.+304    	; 0x5874 <menu_ProcessMessage+0x5d8>
    5744:	00 91 4d 05 	lds	r16, 0x054D	; 0x80054d <pMenuTopTitle>
    5748:	10 91 4e 05 	lds	r17, 0x054E	; 0x80054e <pMenuTopTitle+0x1>
    574c:	ca e0       	ldi	r28, 0x0A	; 10
    574e:	da e3       	ldi	r29, 0x3A	; 58
    5750:	07 c0       	rjmp	.+14     	; 0x5760 <menu_ProcessMessage+0x4c4>
    5752:	0f 5f       	subi	r16, 0xFF	; 255
    5754:	1f 4f       	sbci	r17, 0xFF	; 255
    5756:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    575a:	c1 50       	subi	r28, 0x01	; 1
    575c:	09 f4       	brne	.+2      	; 0x5760 <menu_ProcessMessage+0x4c4>
    575e:	cb cd       	rjmp	.-1130   	; 0x52f6 <menu_ProcessMessage+0x5a>
    5760:	f8 01       	movw	r30, r16
    5762:	84 91       	lpm	r24, Z
    5764:	81 11       	cpse	r24, r1
    5766:	f5 cf       	rjmp	.-22     	; 0x5752 <menu_ProcessMessage+0x4b6>
    5768:	8d 2f       	mov	r24, r29
    576a:	d0 e2       	ldi	r29, 0x20	; 32
    576c:	f4 cf       	rjmp	.-24     	; 0x5756 <menu_ProcessMessage+0x4ba>
    576e:	40 91 52 05 	lds	r20, 0x0552	; 0x800552 <dataEntry32>
    5772:	50 91 53 05 	lds	r21, 0x0553	; 0x800553 <dataEntry32+0x1>
    5776:	60 91 54 05 	lds	r22, 0x0554	; 0x800554 <dataEntry32+0x2>
    577a:	70 91 55 05 	lds	r23, 0x0555	; 0x800555 <dataEntry32+0x3>
    577e:	4d 93       	st	X+, r20
    5780:	5d 93       	st	X+, r21
    5782:	6d 93       	st	X+, r22
    5784:	7c 93       	st	X, r23
    5786:	13 97       	sbiw	r26, 0x03	; 3
    5788:	aa cd       	rjmp	.-1196   	; 0x52de <menu_ProcessMessage+0x42>
    578a:	98 01       	movw	r18, r16
    578c:	20 5f       	subi	r18, 0xF0	; 240
    578e:	3f 4f       	sbci	r19, 0xFF	; 255
    5790:	f9 01       	movw	r30, r18
    5792:	25 91       	lpm	r18, Z+
    5794:	35 91       	lpm	r19, Z+
    5796:	21 15       	cp	r18, r1
    5798:	31 05       	cpc	r19, r1
    579a:	79 f0       	breq	.+30     	; 0x57ba <menu_ProcessMessage+0x51e>
    579c:	99 23       	and	r25, r25
    579e:	09 f4       	brne	.+2      	; 0x57a2 <menu_ProcessMessage+0x506>
    57a0:	56 c0       	rjmp	.+172    	; 0x584e <menu_ProcessMessage+0x5b2>
    57a2:	8f ef       	ldi	r24, 0xFF	; 255
    57a4:	f9 01       	movw	r30, r18
    57a6:	19 95       	eicall
    57a8:	8f 3f       	cpi	r24, 0xFF	; 255
    57aa:	09 f0       	breq	.+2      	; 0x57ae <menu_ProcessMessage+0x512>
    57ac:	97 c0       	rjmp	.+302    	; 0x58dc <menu_ProcessMessage+0x640>
    57ae:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <nibbleIndex>
    57b2:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    57b6:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    57ba:	c8 01       	movw	r24, r16
    57bc:	0c 96       	adiw	r24, 0x0c	; 12
    57be:	fc 01       	movw	r30, r24
    57c0:	25 91       	lpm	r18, Z+
    57c2:	35 91       	lpm	r19, Z+
    57c4:	32 97       	sbiw	r30, 0x02	; 2
    57c6:	23 2b       	or	r18, r19
    57c8:	09 f4       	brne	.+2      	; 0x57cc <menu_ProcessMessage+0x530>
    57ca:	15 ce       	rjmp	.-982    	; 0x53f6 <menu_ProcessMessage+0x15a>
    57cc:	a0 91 19 05 	lds	r26, 0x0519	; 0x800519 <menuStackIndex>
    57d0:	a0 31       	cpi	r26, 0x10	; 16
    57d2:	08 f0       	brcs	.+2      	; 0x57d6 <menu_ProcessMessage+0x53a>
    57d4:	10 ce       	rjmp	.-992    	; 0x53f6 <menu_ProcessMessage+0x15a>
    57d6:	21 e0       	ldi	r18, 0x01	; 1
    57d8:	2a 0f       	add	r18, r26
    57da:	20 93 19 05 	sts	0x0519, r18	; 0x800519 <menuStackIndex>
    57de:	b0 e0       	ldi	r27, 0x00	; 0
    57e0:	aa 0f       	add	r26, r26
    57e2:	bb 1f       	adc	r27, r27
    57e4:	ac 5d       	subi	r26, 0xDC	; 220
    57e6:	ba 4f       	sbci	r27, 0xFA	; 250
    57e8:	0d 93       	st	X+, r16
    57ea:	1c 93       	st	X, r17
    57ec:	3b 97       	sbiw	r30, 0x0b	; 11
    57ee:	24 91       	lpm	r18, Z
    57f0:	23 ff       	sbrs	r18, 3
    57f2:	38 c0       	rjmp	.+112    	; 0x5864 <menu_ProcessMessage+0x5c8>
    57f4:	20 91 70 05 	lds	r18, 0x0570	; 0x800570 <menuVMenuSoftKey>
    57f8:	30 91 71 05 	lds	r19, 0x0571	; 0x800571 <menuVMenuSoftKey+0x1>
    57fc:	21 15       	cp	r18, r1
    57fe:	31 05       	cpc	r19, r1
    5800:	89 f1       	breq	.+98     	; 0x5864 <menu_ProcessMessage+0x5c8>
    5802:	30 93 59 05 	sts	0x0559, r19	; 0x800559 <currentMenu+0x1>
    5806:	20 93 58 05 	sts	0x0558, r18	; 0x800558 <currentMenu>
    580a:	84 e1       	ldi	r24, 0x14	; 20
    580c:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    5810:	8a e0       	ldi	r24, 0x0A	; 10
    5812:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    5816:	80 e4       	ldi	r24, 0x40	; 64
    5818:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    581c:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <menuStackIndex>
    5820:	e1 11       	cpse	r30, r1
    5822:	42 c0       	rjmp	.+132    	; 0x58a8 <menu_ProcessMessage+0x60c>
    5824:	00 91 4d 05 	lds	r16, 0x054D	; 0x80054d <pMenuTopTitle>
    5828:	10 91 4e 05 	lds	r17, 0x054E	; 0x80054e <pMenuTopTitle+0x1>
    582c:	ca e0       	ldi	r28, 0x0A	; 10
    582e:	da e3       	ldi	r29, 0x3A	; 58
    5830:	07 c0       	rjmp	.+14     	; 0x5840 <menu_ProcessMessage+0x5a4>
    5832:	0f 5f       	subi	r16, 0xFF	; 255
    5834:	1f 4f       	sbci	r17, 0xFF	; 255
    5836:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    583a:	c1 50       	subi	r28, 0x01	; 1
    583c:	09 f4       	brne	.+2      	; 0x5840 <menu_ProcessMessage+0x5a4>
    583e:	5b cd       	rjmp	.-1354   	; 0x52f6 <menu_ProcessMessage+0x5a>
    5840:	f8 01       	movw	r30, r16
    5842:	84 91       	lpm	r24, Z
    5844:	81 11       	cpse	r24, r1
    5846:	f5 cf       	rjmp	.-22     	; 0x5832 <menu_ProcessMessage+0x596>
    5848:	8d 2f       	mov	r24, r29
    584a:	d0 e2       	ldi	r29, 0x20	; 32
    584c:	f4 cf       	rjmp	.-24     	; 0x5836 <menu_ProcessMessage+0x59a>
    584e:	85 e0       	ldi	r24, 0x05	; 5
    5850:	f9 01       	movw	r30, r18
    5852:	19 95       	eicall
    5854:	8a e4       	ldi	r24, 0x4A	; 74
    5856:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    585a:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    585e:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    5862:	ab cf       	rjmp	.-170    	; 0x57ba <menu_ProcessMessage+0x51e>
    5864:	fc 01       	movw	r30, r24
    5866:	85 91       	lpm	r24, Z+
    5868:	95 91       	lpm	r25, Z+
    586a:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    586e:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
    5872:	cb cf       	rjmp	.-106    	; 0x580a <menu_ProcessMessage+0x56e>
    5874:	f0 e0       	ldi	r31, 0x00	; 0
    5876:	ee 0f       	add	r30, r30
    5878:	ff 1f       	adc	r31, r31
    587a:	ee 5d       	subi	r30, 0xDE	; 222
    587c:	fa 4f       	sbci	r31, 0xFA	; 250
    587e:	00 81       	ld	r16, Z
    5880:	11 81       	ldd	r17, Z+1	; 0x01
    5882:	0e 5f       	subi	r16, 0xFE	; 254
    5884:	1f 4f       	sbci	r17, 0xFF	; 255
    5886:	ca e0       	ldi	r28, 0x0A	; 10
    5888:	da e3       	ldi	r29, 0x3A	; 58
    588a:	07 c0       	rjmp	.+14     	; 0x589a <menu_ProcessMessage+0x5fe>
    588c:	0f 5f       	subi	r16, 0xFF	; 255
    588e:	1f 4f       	sbci	r17, 0xFF	; 255
    5890:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    5894:	c1 50       	subi	r28, 0x01	; 1
    5896:	09 f4       	brne	.+2      	; 0x589a <menu_ProcessMessage+0x5fe>
    5898:	2e cd       	rjmp	.-1444   	; 0x52f6 <menu_ProcessMessage+0x5a>
    589a:	f8 01       	movw	r30, r16
    589c:	84 91       	lpm	r24, Z
    589e:	81 11       	cpse	r24, r1
    58a0:	f5 cf       	rjmp	.-22     	; 0x588c <menu_ProcessMessage+0x5f0>
    58a2:	8d 2f       	mov	r24, r29
    58a4:	d0 e2       	ldi	r29, 0x20	; 32
    58a6:	f4 cf       	rjmp	.-24     	; 0x5890 <menu_ProcessMessage+0x5f4>
    58a8:	f0 e0       	ldi	r31, 0x00	; 0
    58aa:	ee 0f       	add	r30, r30
    58ac:	ff 1f       	adc	r31, r31
    58ae:	ee 5d       	subi	r30, 0xDE	; 222
    58b0:	fa 4f       	sbci	r31, 0xFA	; 250
    58b2:	00 81       	ld	r16, Z
    58b4:	11 81       	ldd	r17, Z+1	; 0x01
    58b6:	0e 5f       	subi	r16, 0xFE	; 254
    58b8:	1f 4f       	sbci	r17, 0xFF	; 255
    58ba:	ca e0       	ldi	r28, 0x0A	; 10
    58bc:	da e3       	ldi	r29, 0x3A	; 58
    58be:	07 c0       	rjmp	.+14     	; 0x58ce <menu_ProcessMessage+0x632>
    58c0:	0f 5f       	subi	r16, 0xFF	; 255
    58c2:	1f 4f       	sbci	r17, 0xFF	; 255
    58c4:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    58c8:	c1 50       	subi	r28, 0x01	; 1
    58ca:	09 f4       	brne	.+2      	; 0x58ce <menu_ProcessMessage+0x632>
    58cc:	14 cd       	rjmp	.-1496   	; 0x52f6 <menu_ProcessMessage+0x5a>
    58ce:	f8 01       	movw	r30, r16
    58d0:	84 91       	lpm	r24, Z
    58d2:	81 11       	cpse	r24, r1
    58d4:	f5 cf       	rjmp	.-22     	; 0x58c0 <menu_ProcessMessage+0x624>
    58d6:	8d 2f       	mov	r24, r29
    58d8:	d0 e2       	ldi	r29, 0x20	; 32
    58da:	f4 cf       	rjmp	.-24     	; 0x58c4 <menu_ProcessMessage+0x628>
    58dc:	84 e1       	ldi	r24, 0x14	; 20
    58de:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    58e2:	8a e0       	ldi	r24, 0x0A	; 10
    58e4:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    58e8:	8e e1       	ldi	r24, 0x1E	; 30
    58ea:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    58ee:	8a e0       	ldi	r24, 0x0A	; 10
    58f0:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
    58f4:	8a e4       	ldi	r24, 0x4A	; 74
    58f6:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    58fa:	c0 93 1f 05 	sts	0x051F, r28	; 0x80051f <nibbleIndex>
    58fe:	00 91 58 05 	lds	r16, 0x0558	; 0x800558 <currentMenu>
    5902:	10 91 59 05 	lds	r17, 0x0559	; 0x800559 <currentMenu+0x1>
    5906:	59 cf       	rjmp	.-334    	; 0x57ba <menu_ProcessMessage+0x51e>

00005908 <init_SoftKeys>:
    5908:	0f 93       	push	r16
    590a:	1f 93       	push	r17
    590c:	cf 93       	push	r28
    590e:	df 93       	push	r29
    5910:	0e 94 b0 07 	call	0xf60	; 0xf60 <eeprom_ReadSoftkeys>
    5914:	8f 3f       	cpi	r24, 0xFF	; 255
    5916:	21 f1       	breq	.+72     	; 0x5960 <init_SoftKeys+0x58>
    5918:	05 e4       	ldi	r16, 0x45	; 69
    591a:	15 e0       	ldi	r17, 0x05	; 5
    591c:	c1 e0       	ldi	r28, 0x01	; 1
    591e:	d0 e0       	ldi	r29, 0x00	; 0
    5920:	d8 01       	movw	r26, r16
    5922:	ed 91       	ld	r30, X+
    5924:	fd 91       	ld	r31, X+
    5926:	8d 01       	movw	r16, r26
    5928:	30 97       	sbiw	r30, 0x00	; 0
    592a:	89 f0       	breq	.+34     	; 0x594e <init_SoftKeys+0x46>
    592c:	84 91       	lpm	r24, Z
    592e:	8f 73       	andi	r24, 0x3F	; 63
    5930:	81 30       	cpi	r24, 0x01	; 1
    5932:	21 f4       	brne	.+8      	; 0x593c <init_SoftKeys+0x34>
    5934:	31 96       	adiw	r30, 0x01	; 1
    5936:	84 91       	lpm	r24, Z
    5938:	84 fd       	sbrc	r24, 4
    593a:	09 c0       	rjmp	.+18     	; 0x594e <init_SoftKeys+0x46>
    593c:	ae 01       	movw	r20, r28
    593e:	67 e0       	ldi	r22, 0x07	; 7
    5940:	81 e0       	ldi	r24, 0x01	; 1
    5942:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <log_putError>
    5946:	f8 01       	movw	r30, r16
    5948:	32 97       	sbiw	r30, 0x02	; 2
    594a:	11 82       	std	Z+1, r1	; 0x01
    594c:	10 82       	st	Z, r1
    594e:	21 96       	adiw	r28, 0x01	; 1
    5950:	c5 30       	cpi	r28, 0x05	; 5
    5952:	d1 05       	cpc	r29, r1
    5954:	29 f7       	brne	.-54     	; 0x5920 <init_SoftKeys+0x18>
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	1f 91       	pop	r17
    595c:	0f 91       	pop	r16
    595e:	08 95       	ret
    5960:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <soft_Key+0x1>
    5964:	10 92 45 05 	sts	0x0545, r1	; 0x800545 <soft_Key>
    5968:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <soft_Key+0x3>
    596c:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <soft_Key+0x2>
    5970:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <soft_Key+0x5>
    5974:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <soft_Key+0x4>
    5978:	10 92 4c 05 	sts	0x054C, r1	; 0x80054c <soft_Key+0x7>
    597c:	10 92 4b 05 	sts	0x054B, r1	; 0x80054b <soft_Key+0x6>
    5980:	40 e0       	ldi	r20, 0x00	; 0
    5982:	50 e0       	ldi	r21, 0x00	; 0
    5984:	67 e0       	ldi	r22, 0x07	; 7
    5986:	81 e0       	ldi	r24, 0x01	; 1
    5988:	df 91       	pop	r29
    598a:	cf 91       	pop	r28
    598c:	1f 91       	pop	r17
    598e:	0f 91       	pop	r16
    5990:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <log_putError>

00005994 <softKeys_toLCD>:
			soft_Key[nrSoftKey].pSelMenu = NULL;
		}
	}
}

void softKeys_toLCD(){
    5994:	0f 93       	push	r16
    5996:	1f 93       	push	r17
    5998:	cf 93       	push	r28
    599a:	05 e4       	ldi	r16, 0x45	; 69
    599c:	15 e0       	ldi	r17, 0x05	; 5
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    599e:	c0 e0       	ldi	r28, 0x00	; 0
		if (soft_Key[i].pSelMenu->pVar == NULL){
    59a0:	d8 01       	movw	r26, r16
    59a2:	ed 91       	ld	r30, X+
    59a4:	fc 91       	ld	r31, X
    59a6:	3e 96       	adiw	r30, 0x0e	; 14
    59a8:	65 91       	lpm	r22, Z+
    59aa:	75 91       	lpm	r23, Z+
			keylabel_clr(i);
    59ac:	8c 2f       	mov	r24, r28
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		if (soft_Key[i].pSelMenu->pVar == NULL){
    59ae:	61 15       	cp	r22, r1
    59b0:	71 05       	cpc	r23, r1
    59b2:	f9 f0       	breq	.+62     	; 0x59f2 <softKeys_toLCD+0x5e>
			keylabel_clr(i);
		} else {
			keylabel_set(i,(soft_Key[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    59b4:	0e 94 93 3c 	call	0x7926	; 0x7926 <keylabel_set>
			if (soft_Key[i].pSelMenu->pFunc != NULL){
    59b8:	d8 01       	movw	r26, r16
    59ba:	ed 91       	ld	r30, X+
    59bc:	fc 91       	ld	r31, X
    59be:	70 96       	adiw	r30, 0x10	; 16
    59c0:	05 90       	lpm	r0, Z+
    59c2:	f4 91       	lpm	r31, Z
    59c4:	e0 2d       	mov	r30, r0
    59c6:	30 97       	sbiw	r30, 0x00	; 0
    59c8:	51 f0       	breq	.+20     	; 0x59de <softKeys_toLCD+0x4a>
				// function can be called
				keylabel_statcheck(i,soft_Key[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    59ca:	80 e0       	ldi	r24, 0x00	; 0
    59cc:	19 95       	eicall
    59ce:	61 e0       	ldi	r22, 0x01	; 1
    59d0:	81 38       	cpi	r24, 0x81	; 129
    59d2:	09 f0       	breq	.+2      	; 0x59d6 <softKeys_toLCD+0x42>
    59d4:	60 e0       	ldi	r22, 0x00	; 0
    59d6:	61 95       	neg	r22
    59d8:	8c 2f       	mov	r24, r28
    59da:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    59de:	cf 5f       	subi	r28, 0xFF	; 255
    59e0:	0e 5f       	subi	r16, 0xFE	; 254
    59e2:	1f 4f       	sbci	r17, 0xFF	; 255
    59e4:	c4 30       	cpi	r28, 0x04	; 4
    59e6:	e1 f6       	brne	.-72     	; 0x59a0 <softKeys_toLCD+0xc>
				keylabel_statcheck(i,soft_Key[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
}
    59e8:	cf 91       	pop	r28
    59ea:	1f 91       	pop	r17
    59ec:	0f 91       	pop	r16
				// function can be called
				keylabel_statcheck(i,soft_Key[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    59ee:	0c 94 34 3d 	jmp	0x7a68	; 0x7a68 <keylabel_toLCD>
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		if (soft_Key[i].pSelMenu->pVar == NULL){
			keylabel_clr(i);
    59f2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <keylabel_clr>
    59f6:	f3 cf       	rjmp	.-26     	; 0x59de <softKeys_toLCD+0x4a>

000059f8 <softKey_MessageKey_ToSoftKeyNr>:
		}
	}
	keylabel_toLCD();
}

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
    59f8:	81 50       	subi	r24, 0x01	; 1
    59fa:	84 30       	cpi	r24, 0x04	; 4
    59fc:	30 f4       	brcc	.+12     	; 0x5a0a <softKey_MessageKey_ToSoftKeyNr+0x12>
    59fe:	e8 2f       	mov	r30, r24
    5a00:	f0 e0       	ldi	r31, 0x00	; 0
    5a02:	ea 5f       	subi	r30, 0xFA	; 250
    5a04:	fd 4f       	sbci	r31, 0xFD	; 253
    5a06:	80 81       	ld	r24, Z
    5a08:	08 95       	ret
    5a0a:	8f ef       	ldi	r24, 0xFF	; 255
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5a0c:	08 95       	ret

00005a0e <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5a0e:	0f 93       	push	r16
    5a10:	1f 93       	push	r17
    5a12:	cf 93       	push	r28
    5a14:	df 93       	push	r29
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5a16:	84 30       	cpi	r24, 0x04	; 4
    5a18:	30 f0       	brcs	.+12     	; 0x5a26 <softKey_Execute+0x18>
					return FALSE; // show that we are in menu processing now
				}
			}
		}
	}
	return TRUE;
    5a1a:	8f ef       	ldi	r24, 0xFF	; 255
}
    5a1c:	df 91       	pop	r29
    5a1e:	cf 91       	pop	r28
    5a20:	1f 91       	pop	r17
    5a22:	0f 91       	pop	r16
    5a24:	08 95       	ret

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_Key[nrSoftKey].pSelMenu;
    5a26:	e8 2f       	mov	r30, r24
    5a28:	f0 e0       	ldi	r31, 0x00	; 0
    5a2a:	ee 0f       	add	r30, r30
    5a2c:	ff 1f       	adc	r31, r31
    5a2e:	eb 5b       	subi	r30, 0xBB	; 187
    5a30:	fa 4f       	sbci	r31, 0xFA	; 250
    5a32:	00 81       	ld	r16, Z
    5a34:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5a36:	01 15       	cp	r16, r1
    5a38:	11 05       	cpc	r17, r1
    5a3a:	79 f3       	breq	.-34     	; 0x5a1a <softKey_Execute+0xc>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5a3c:	f8 01       	movw	r30, r16
    5a3e:	94 91       	lpm	r25, Z
    5a40:	9f 73       	andi	r25, 0x3F	; 63
    5a42:	91 30       	cpi	r25, 0x01	; 1
    5a44:	51 f7       	brne	.-44     	; 0x5a1a <softKey_Execute+0xc>
    5a46:	31 96       	adiw	r30, 0x01	; 1
    5a48:	94 91       	lpm	r25, Z
    5a4a:	94 ff       	sbrs	r25, 4
    5a4c:	e6 cf       	rjmp	.-52     	; 0x5a1a <softKey_Execute+0xc>
    5a4e:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5a50:	3f 96       	adiw	r30, 0x0f	; 15
    5a52:	05 90       	lpm	r0, Z+
    5a54:	f4 91       	lpm	r31, Z
    5a56:	e0 2d       	mov	r30, r0
    5a58:	30 97       	sbiw	r30, 0x00	; 0
    5a5a:	51 f0       	breq	.+20     	; 0x5a70 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5a5c:	86 2f       	mov	r24, r22
    5a5e:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5a60:	82 38       	cpi	r24, 0x82	; 130
    5a62:	09 f4       	brne	.+2      	; 0x5a66 <softKey_Execute+0x58>
    5a64:	60 c0       	rjmp	.+192    	; 0x5b26 <softKey_Execute+0x118>
						keylabel_statcheck(nrSoftKey, FALSE);
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5a66:	81 38       	cpi	r24, 0x81	; 129
    5a68:	09 f4       	brne	.+2      	; 0x5a6c <softKey_Execute+0x5e>
    5a6a:	62 c0       	rjmp	.+196    	; 0x5b30 <softKey_Execute+0x122>
						keylabel_statcheck(nrSoftKey, TRUE);
					}
					keylabel_toLCD();
    5a6c:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5a70:	f8 01       	movw	r30, r16
    5a72:	3c 96       	adiw	r30, 0x0c	; 12
    5a74:	85 91       	lpm	r24, Z+
    5a76:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5a78:	00 97       	sbiw	r24, 0x00	; 0
    5a7a:	79 f2       	breq	.-98     	; 0x5a1a <softKey_Execute+0xc>

//*********************************************** F U N C T I O N S ******************************
// Public

void menu_Init(const __flash Menu_t* newMenu, const __flash char* pTitle){
	menuStackIndex = 0; // no parent
    5a7c:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <menuStackIndex>
	if (newMenu == NULL){
		currentMenu = menu_main; // Main Menu
		pMenuTopTitle = initMenuText;
	} else {
		currentMenu = newMenu;
    5a80:	90 93 59 05 	sts	0x0559, r25	; 0x800559 <currentMenu+0x1>
    5a84:	80 93 58 05 	sts	0x0558, r24	; 0x800558 <currentMenu>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
				if (pSoftKeyExeMenu != NULL) {
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5a88:	0e 5f       	subi	r16, 0xFE	; 254
    5a8a:	1f 4f       	sbci	r17, 0xFF	; 255
	if (newMenu == NULL){
		currentMenu = menu_main; // Main Menu
		pMenuTopTitle = initMenuText;
	} else {
		currentMenu = newMenu;
		pMenuTopTitle = pTitle;
    5a8c:	10 93 4e 05 	sts	0x054E, r17	; 0x80054e <pMenuTopTitle+0x1>
    5a90:	00 93 4d 05 	sts	0x054D, r16	; 0x80054d <pMenuTopTitle>
	}
	nibbleIndex = NIBBLE_NONE; // not editing
    5a94:	8f ef       	ldi	r24, 0xFF	; 255
    5a96:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <nibbleIndex>
	pNibbleInfo = &(nibbleInfo[0]); // entry for MENU_T_MENU
    5a9a:	80 e6       	ldi	r24, 0x60	; 96
    5a9c:	93 e0       	ldi	r25, 0x03	; 3
    5a9e:	90 93 23 05 	sts	0x0523, r25	; 0x800523 <pNibbleInfo+0x1>
    5aa2:	80 93 22 05 	sts	0x0522, r24	; 0x800522 <pNibbleInfo>
	//}
}

void menuCursorSetExtra(){
	// position for extra Data while editing Menu
	lcd_goto(MENU_LCD_CURSOR_EXTRA);
    5aa6:	84 e1       	ldi	r24, 0x14	; 20
    5aa8:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
	lcd_goto(MENU_LCD_CURSOR_PARENT);
}

void menuClearExtraDisp(){
	menuCursorSetExtra();
	lcd_blank(MENU_LCD_EXTRALEN);
    5aac:	8a e0       	ldi	r24, 0x0A	; 10
    5aae:	0e 94 4a 3c 	call	0x7894	; 0x7894 <lcd_blank>
	pNibbleInfo = &(nibbleInfo[0]); // entry for MENU_T_MENU
}

void menu_InitLCD(){
	menuClearExtraDisp(); // V0.56
	menuItemChanged(); // init pNibbleInfo, dataType, dataEntry and print Data or clear data space
    5ab2:	2c db       	rcall	.-2472   	; 0x510c <menuItemChanged>
		lcd_putc(outChar);
	}
}

void menuParentMenuToLCD(){
	lcd_goto(MENU_LCD_CURSOR_PARENT);
    5ab4:	80 e4       	ldi	r24, 0x40	; 64
    5ab6:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
	if (menuStackIndex == 0) {
    5aba:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <menuStackIndex>
    5abe:	e1 11       	cpse	r30, r1
    5ac0:	19 c0       	rjmp	.+50     	; 0x5af4 <softKey_Execute+0xe6>
		// Topmenu
		menuTextOut(pMenuTopTitle, MENU_PARENTMENU_DELIM) ;
    5ac2:	00 91 4d 05 	lds	r16, 0x054D	; 0x80054d <pMenuTopTitle>
    5ac6:	10 91 4e 05 	lds	r17, 0x054E	; 0x80054e <pMenuTopTitle+0x1>
    5aca:	ca e0       	ldi	r28, 0x0A	; 10
    5acc:	da e3       	ldi	r29, 0x3A	; 58
    5ace:	06 c0       	rjmp	.+12     	; 0x5adc <softKey_Execute+0xce>
		uint8_t outChar = *pChar;
		if (outChar == '\0'){
			outChar = finalChar; // text is finished, print finalChar
			finalChar = ' '; // after that clear with spaces
		} else {
			pChar++; // proceed to next char only if it was not \0
    5ad0:	0f 5f       	subi	r16, 0xFF	; 255
    5ad2:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		lcd_putc(outChar);
    5ad4:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    5ad8:	c1 50       	subi	r28, 0x01	; 1
}


void menuTextOut(const __flash char* pChar, char finalChar){
	// output text and space up to MENU_TEXTLEN but first char after text is finalChar (for arrow)
	for (uint8_t i = 0; i < MENU_LCD_MENUTEXTLEN; i++){
    5ada:	39 f0       	breq	.+14     	; 0x5aea <softKey_Execute+0xdc>
		uint8_t outChar = *pChar;
    5adc:	f8 01       	movw	r30, r16
    5ade:	84 91       	lpm	r24, Z
		if (outChar == '\0'){
    5ae0:	81 11       	cpse	r24, r1
    5ae2:	f6 cf       	rjmp	.-20     	; 0x5ad0 <softKey_Execute+0xc2>
    5ae4:	8d 2f       	mov	r24, r29
			outChar = finalChar; // text is finished, print finalChar
			finalChar = ' '; // after that clear with spaces
    5ae6:	d0 e2       	ldi	r29, 0x20	; 32

void menu_InitLCD(){
	menuClearExtraDisp(); // V0.56
	menuItemChanged(); // init pNibbleInfo, dataType, dataEntry and print Data or clear data space
	menuParentMenuToLCD(); // print name of parent menu
	menuCurrMenuToLCD();
    5ae8:	f5 cf       	rjmp	.-22     	; 0x5ad4 <softKey_Execute+0xc6>
    5aea:	9b da       	rcall	.-2762   	; 0x5022 <menuCurrMenuToLCD>
	lcd_cursosblink(); // start blinking
    5aec:	0e 94 6c 3c 	call	0x78d8	; 0x78d8 <lcd_cursosblink>
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
				if (pSoftKeyExeMenu != NULL) {
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
					menu_InitLCD(); //display menu
					return FALSE; // show that we are in menu processing now
    5af0:	80 e0       	ldi	r24, 0x00	; 0
    5af2:	94 cf       	rjmp	.-216    	; 0x5a1c <softKey_Execute+0xe>
	if (menuStackIndex == 0) {
		// Topmenu
		menuTextOut(pMenuTopTitle, MENU_PARENTMENU_DELIM) ;
	} else {
		// Menu with parent
		const __flash Menu_t* pTopMenu = menuStack[menuStackIndex-1];
    5af4:	f0 e0       	ldi	r31, 0x00	; 0
    5af6:	ee 0f       	add	r30, r30
    5af8:	ff 1f       	adc	r31, r31
    5afa:	ee 5d       	subi	r30, 0xDE	; 222
    5afc:	fa 4f       	sbci	r31, 0xFA	; 250
		menuTextOut(pTopMenu->text, MENU_PARENTMENU_DELIM ); // ':'
    5afe:	00 81       	ld	r16, Z
    5b00:	11 81       	ldd	r17, Z+1	; 0x01
    5b02:	0e 5f       	subi	r16, 0xFE	; 254
    5b04:	1f 4f       	sbci	r17, 0xFF	; 255
    5b06:	ca e0       	ldi	r28, 0x0A	; 10
    5b08:	da e3       	ldi	r29, 0x3A	; 58
    5b0a:	06 c0       	rjmp	.+12     	; 0x5b18 <softKey_Execute+0x10a>
		uint8_t outChar = *pChar;
		if (outChar == '\0'){
			outChar = finalChar; // text is finished, print finalChar
			finalChar = ' '; // after that clear with spaces
		} else {
			pChar++; // proceed to next char only if it was not \0
    5b0c:	0f 5f       	subi	r16, 0xFF	; 255
    5b0e:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		lcd_putc(outChar);
    5b10:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    5b14:	c1 50       	subi	r28, 0x01	; 1
}


void menuTextOut(const __flash char* pChar, char finalChar){
	// output text and space up to MENU_TEXTLEN but first char after text is finalChar (for arrow)
	for (uint8_t i = 0; i < MENU_LCD_MENUTEXTLEN; i++){
    5b16:	49 f3       	breq	.-46     	; 0x5aea <softKey_Execute+0xdc>
		uint8_t outChar = *pChar;
    5b18:	f8 01       	movw	r30, r16
    5b1a:	84 91       	lpm	r24, Z
		if (outChar == '\0'){
    5b1c:	81 11       	cpse	r24, r1
    5b1e:	f6 cf       	rjmp	.-20     	; 0x5b0c <softKey_Execute+0xfe>
    5b20:	8d 2f       	mov	r24, r29
			outChar = finalChar; // text is finished, print finalChar
			finalChar = ' '; // after that clear with spaces
    5b22:	d0 e2       	ldi	r29, 0x20	; 32
    5b24:	f5 cf       	rjmp	.-22     	; 0x5b10 <softKey_Execute+0x102>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
						keylabel_statcheck(nrSoftKey, FALSE);
    5b26:	60 e0       	ldi	r22, 0x00	; 0
    5b28:	8c 2f       	mov	r24, r28
    5b2a:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <keylabel_statcheck>
    5b2e:	9e cf       	rjmp	.-196    	; 0x5a6c <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
						keylabel_statcheck(nrSoftKey, TRUE);
    5b30:	6f ef       	ldi	r22, 0xFF	; 255
    5b32:	8c 2f       	mov	r24, r28
    5b34:	0e 94 50 3d 	call	0x7aa0	; 0x7aa0 <keylabel_statcheck>
    5b38:	99 cf       	rjmp	.-206    	; 0x5a6c <softKey_Execute+0x5e>

00005b3a <menu_showPowerState>:
	return TRUE;
}

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5b3a:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5b3c:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    5b40:	8c e0       	ldi	r24, 0x0C	; 12
    5b42:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5b46:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <pipe_PowerStatus>
    5b4a:	84 fd       	sbrc	r24, 4
    5b4c:	07 c0       	rjmp	.+14     	; 0x5b5c <menu_showPowerState+0x22>
    5b4e:	89 e0       	ldi	r24, 0x09	; 9
    5b50:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
	lcd_goto(saveCursor);
    5b54:	8c 2f       	mov	r24, r28

    5b56:	cf 91       	pop	r28

void menu_showPowerState(){
	uint8_t saveCursor = lcd_cursorPos;
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
	lcd_putc(POWERSTAT_CHAR);
	lcd_goto(saveCursor);
    5b58:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>
//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
	uint8_t saveCursor = lcd_cursorPos;
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
	lcd_putc(POWERSTAT_CHAR);
    5b5c:	80 e2       	ldi	r24, 0x20	; 32
    5b5e:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
	lcd_goto(saveCursor);
    5b62:	8c 2f       	mov	r24, r28

    5b64:	cf 91       	pop	r28

void menu_showPowerState(){
	uint8_t saveCursor = lcd_cursorPos;
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
	lcd_putc(POWERSTAT_CHAR);
	lcd_goto(saveCursor);
    5b66:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>

00005b6a <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5b6a:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <msgInIndex>
    5b6e:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <msgOutIndex>
    5b72:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <msgOverflow>
    5b76:	08 95       	ret

00005b78 <message_push>:
    5b78:	90 91 75 07 	lds	r25, 0x0775	; 0x800775 <msgInIndex>
    5b7c:	e9 2f       	mov	r30, r25
    5b7e:	f0 e0       	ldi	r31, 0x00	; 0
    5b80:	ea 58       	subi	r30, 0x8A	; 138
    5b82:	f8 4f       	sbci	r31, 0xF8	; 248
    5b84:	80 83       	st	Z, r24
    5b86:	9f 5f       	subi	r25, 0xFF	; 255
    5b88:	9f 71       	andi	r25, 0x1F	; 31
    5b8a:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <msgOutIndex>
    5b8e:	98 17       	cp	r25, r24
    5b90:	19 f0       	breq	.+6      	; 0x5b98 <message_push+0x20>
    5b92:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <msgInIndex>
    5b96:	08 95       	ret
    5b98:	8f ef       	ldi	r24, 0xFF	; 255
    5b9a:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <msgOverflow>
    5b9e:	08 95       	ret

00005ba0 <message_get>:
    5ba0:	2f b7       	in	r18, 0x3f	; 63
    5ba2:	f8 94       	cli
    5ba4:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <msgOutIndex>
    5ba8:	80 91 75 07 	lds	r24, 0x0775	; 0x800775 <msgInIndex>
    5bac:	98 17       	cp	r25, r24
    5bae:	59 f0       	breq	.+22     	; 0x5bc6 <message_get+0x26>
    5bb0:	e9 2f       	mov	r30, r25
    5bb2:	f0 e0       	ldi	r31, 0x00	; 0
    5bb4:	ea 58       	subi	r30, 0x8A	; 138
    5bb6:	f8 4f       	sbci	r31, 0xF8	; 248
    5bb8:	80 81       	ld	r24, Z
    5bba:	9f 5f       	subi	r25, 0xFF	; 255
    5bbc:	9f 71       	andi	r25, 0x1F	; 31
    5bbe:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <msgOutIndex>
    5bc2:	2f bf       	out	0x3f, r18	; 63
    5bc4:	08 95       	ret
    5bc6:	8f ef       	ldi	r24, 0xFF	; 255
    5bc8:	2f bf       	out	0x3f, r18	; 63
    5bca:	08 95       	ret

00005bcc <message_status>:
    5bcc:	9f b7       	in	r25, 0x3f	; 63
    5bce:	f8 94       	cli
    5bd0:	81 e0       	ldi	r24, 0x01	; 1
    5bd2:	30 91 72 05 	lds	r19, 0x0572	; 0x800572 <msgOutIndex>
    5bd6:	20 91 75 07 	lds	r18, 0x0775	; 0x800775 <msgInIndex>
    5bda:	32 13       	cpse	r19, r18
    5bdc:	01 c0       	rjmp	.+2      	; 0x5be0 <message_status+0x14>
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	81 95       	neg	r24
    5be2:	9f bf       	out	0x3f, r25	; 63
    5be4:	08 95       	ret

00005be6 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5be6:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5be8:	90 91 96 07 	lds	r25, 0x0796	; 0x800796 <msgPipe_Handling>
    5bec:	99 23       	and	r25, r25
    5bee:	89 f0       	breq	.+34     	; 0x5c12 <pipeMsgPush+0x2c>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5bf0:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pipeMsgInIndex>
    5bf4:	21 e0       	ldi	r18, 0x01	; 1
    5bf6:	29 0f       	add	r18, r25
    5bf8:	20 93 73 07 	sts	0x0773, r18	; 0x800773 <pipeMsgInIndex>
    5bfc:	e9 2f       	mov	r30, r25
    5bfe:	f0 e0       	ldi	r31, 0x00	; 0
    5c00:	ee 0f       	add	r30, r30
    5c02:	ff 1f       	adc	r31, r31
    5c04:	ed 58       	subi	r30, 0x8D	; 141
    5c06:	fa 4f       	sbci	r31, 0xFA	; 250
    5c08:	51 83       	std	Z+1, r21	; 0x01
    5c0a:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5c0c:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <pipeMsgOutIndex>
    5c10:	28 13       	cpse	r18, r24
    5c12:	08 95       	ret
			// overflow: reverse
			pipeMsgInIndex--;
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5c14:	90 93 73 07 	sts	0x0773, r25	; 0x800773 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5c18:	8f ef       	ldi	r24, 0xFF	; 255
    5c1a:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <msgPipeOverflow>
    5c1e:	08 95       	ret

00005c20 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5c20:	e0 91 98 07 	lds	r30, 0x0798	; 0x800798 <pipeMsgOutIndex>
    5c24:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <pipeMsgInIndex>
    5c28:	e8 17       	cp	r30, r24
    5c2a:	61 f0       	breq	.+24     	; 0x5c44 <pipeMsgGet+0x24>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5c2c:	81 e0       	ldi	r24, 0x01	; 1
    5c2e:	8e 0f       	add	r24, r30
    5c30:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <pipeMsgOutIndex>
    5c34:	f0 e0       	ldi	r31, 0x00	; 0
    5c36:	ee 0f       	add	r30, r30
    5c38:	ff 1f       	adc	r31, r31
    5c3a:	ed 58       	subi	r30, 0x8D	; 141
    5c3c:	fa 4f       	sbci	r31, 0xFA	; 250
    5c3e:	80 81       	ld	r24, Z
    5c40:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5c42:	08 95       	ret

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5c44:	8f ef       	ldi	r24, 0xFF	; 255
    5c46:	9f ef       	ldi	r25, 0xFF	; 255
    5c48:	08 95       	ret

00005c4a <pipeMsgStatus>:
		}
		return mess;
	}
};

uint8_t pipeMsgStatus (void) {
    5c4a:	81 e0       	ldi	r24, 0x01	; 1
    5c4c:	20 91 98 07 	lds	r18, 0x0798	; 0x800798 <pipeMsgOutIndex>
    5c50:	90 91 73 07 	lds	r25, 0x0773	; 0x800773 <pipeMsgInIndex>
    5c54:	29 17       	cp	r18, r25
    5c56:	11 f0       	breq	.+4      	; 0x5c5c <pipeMsgStatus+0x12>
	if (pipeMsgOutIndex == pipeMsgInIndex) {
		return MESSAGE_STAT_EMPTY;
	} else {
		return MESSAGE_STAT_NONEMPTY;
	}
}
    5c58:	81 95       	neg	r24
    5c5a:	08 95       	ret
    5c5c:	80 e0       	ldi	r24, 0x00	; 0
    5c5e:	81 95       	neg	r24
    5c60:	08 95       	ret

00005c62 <init_Midi>:
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    5c62:	10 92 dd 07 	sts	0x07DD, r1	; 0x8007dd <midiCoupler_2from3>
    5c66:	10 92 17 0b 	sts	0x0B17, r1	; 0x800b17 <midiCoupler_1from3>
    5c6a:	10 92 da 07 	sts	0x07DA, r1	; 0x8007da <midiCoupler_1from2>
    5c6e:	10 92 15 0b 	sts	0x0B15, r1	; 0x800b15 <midiCoupler_Pfrom3>
    5c72:	10 92 de 07 	sts	0x07DE, r1	; 0x8007de <midiCoupler_Pfrom2>
    5c76:	10 92 16 0b 	sts	0x0B16, r1	; 0x800b16 <midiCoupler_Pfrom1>
    5c7a:	08 95       	ret

00005c7c <midiAllNotesOff>:
    5c7c:	8f 92       	push	r8
    5c7e:	9f 92       	push	r9
    5c80:	af 92       	push	r10
    5c82:	bf 92       	push	r11
    5c84:	cf 92       	push	r12
    5c86:	df 92       	push	r13
    5c88:	ef 92       	push	r14
    5c8a:	ff 92       	push	r15
    5c8c:	0f 93       	push	r16
    5c8e:	1f 93       	push	r17
    5c90:	cf 93       	push	r28
    5c92:	df 93       	push	r29
    5c94:	20 e1       	ldi	r18, 0x10	; 16
    5c96:	82 9f       	mul	r24, r18
    5c98:	c0 01       	movw	r24, r0
    5c9a:	11 24       	eor	r1, r1
    5c9c:	ec 01       	movw	r28, r24
    5c9e:	c1 52       	subi	r28, 0x21	; 33
    5ca0:	d8 4f       	sbci	r29, 0xF8	; 248
    5ca2:	e4 e0       	ldi	r30, 0x04	; 4
    5ca4:	ae 2e       	mov	r10, r30
    5ca6:	41 e0       	ldi	r20, 0x01	; 1
    5ca8:	50 e0       	ldi	r21, 0x00	; 0
    5caa:	28 81       	ld	r18, Y
    5cac:	24 30       	cpi	r18, 0x04	; 4
    5cae:	08 f0       	brcs	.+2      	; 0x5cb2 <midiAllNotesOff+0x36>
    5cb0:	4a c0       	rjmp	.+148    	; 0x5d46 <midiAllNotesOff+0xca>
    5cb2:	9b 81       	ldd	r25, Y+3	; 0x03
    5cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    5cb6:	88 23       	and	r24, r24
    5cb8:	09 f4       	brne	.+2      	; 0x5cbc <midiAllNotesOff+0x40>
    5cba:	45 c0       	rjmp	.+138    	; 0x5d46 <midiAllNotesOff+0xca>
    5cbc:	30 e0       	ldi	r19, 0x00	; 0
    5cbe:	d9 01       	movw	r26, r18
    5cc0:	aa 0f       	add	r26, r26
    5cc2:	bb 1f       	adc	r27, r27
    5cc4:	a2 0f       	add	r26, r18
    5cc6:	b3 1f       	adc	r27, r19
    5cc8:	aa 0f       	add	r26, r26
    5cca:	bb 1f       	adc	r27, r27
    5ccc:	aa 0f       	add	r26, r26
    5cce:	bb 1f       	adc	r27, r27
    5cd0:	ad 51       	subi	r26, 0x1D	; 29
    5cd2:	b7 4f       	sbci	r27, 0xF7	; 247
    5cd4:	bc 90       	ld	r11, X
    5cd6:	89 0f       	add	r24, r25
    5cd8:	6d 01       	movw	r12, r26
    5cda:	e9 e0       	ldi	r30, 0x09	; 9
    5cdc:	ce 0e       	add	r12, r30
    5cde:	d1 1c       	adc	r13, r1
    5ce0:	7d 01       	movw	r14, r26
    5ce2:	f6 e0       	ldi	r31, 0x06	; 6
    5ce4:	ef 0e       	add	r14, r31
    5ce6:	f1 1c       	adc	r15, r1
    5ce8:	8d 01       	movw	r16, r26
    5cea:	0d 5f       	subi	r16, 0xFD	; 253
    5cec:	1f 4f       	sbci	r17, 0xFF	; 255
    5cee:	bd 01       	movw	r22, r26
    5cf0:	6f 5f       	subi	r22, 0xFF	; 255
    5cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cf4:	9b 15       	cp	r25, r11
    5cf6:	20 f0       	brcs	.+8      	; 0x5d00 <midiAllNotesOff+0x84>
    5cf8:	fb 01       	movw	r30, r22
    5cfa:	20 81       	ld	r18, Z
    5cfc:	29 17       	cp	r18, r25
    5cfe:	a0 f5       	brcc	.+104    	; 0x5d68 <midiAllNotesOff+0xec>
    5d00:	13 96       	adiw	r26, 0x03	; 3
    5d02:	3c 91       	ld	r19, X
    5d04:	13 97       	sbiw	r26, 0x03	; 3
    5d06:	93 17       	cp	r25, r19
    5d08:	30 f0       	brcs	.+12     	; 0x5d16 <midiAllNotesOff+0x9a>
    5d0a:	14 96       	adiw	r26, 0x04	; 4
    5d0c:	2c 91       	ld	r18, X
    5d0e:	14 97       	sbiw	r26, 0x04	; 4
    5d10:	29 17       	cp	r18, r25
    5d12:	08 f0       	brcs	.+2      	; 0x5d16 <midiAllNotesOff+0x9a>
    5d14:	47 c0       	rjmp	.+142    	; 0x5da4 <midiAllNotesOff+0x128>
    5d16:	16 96       	adiw	r26, 0x06	; 6
    5d18:	3c 91       	ld	r19, X
    5d1a:	16 97       	sbiw	r26, 0x06	; 6
    5d1c:	93 17       	cp	r25, r19
    5d1e:	30 f0       	brcs	.+12     	; 0x5d2c <midiAllNotesOff+0xb0>
    5d20:	17 96       	adiw	r26, 0x07	; 7
    5d22:	2c 91       	ld	r18, X
    5d24:	17 97       	sbiw	r26, 0x07	; 7
    5d26:	29 17       	cp	r18, r25
    5d28:	08 f0       	brcs	.+2      	; 0x5d2c <midiAllNotesOff+0xb0>
    5d2a:	3e c0       	rjmp	.+124    	; 0x5da8 <midiAllNotesOff+0x12c>
    5d2c:	19 96       	adiw	r26, 0x09	; 9
    5d2e:	3c 91       	ld	r19, X
    5d30:	19 97       	sbiw	r26, 0x09	; 9
    5d32:	93 17       	cp	r25, r19
    5d34:	28 f0       	brcs	.+10     	; 0x5d40 <midiAllNotesOff+0xc4>
    5d36:	1a 96       	adiw	r26, 0x0a	; 10
    5d38:	2c 91       	ld	r18, X
    5d3a:	1a 97       	sbiw	r26, 0x0a	; 10
    5d3c:	29 17       	cp	r18, r25
    5d3e:	b0 f5       	brcc	.+108    	; 0x5dac <midiAllNotesOff+0x130>
    5d40:	9f 5f       	subi	r25, 0xFF	; 255
    5d42:	89 13       	cpse	r24, r25
    5d44:	d7 cf       	rjmp	.-82     	; 0x5cf4 <midiAllNotesOff+0x78>
    5d46:	aa 94       	dec	r10
    5d48:	24 96       	adiw	r28, 0x04	; 4
    5d4a:	a1 10       	cpse	r10, r1
    5d4c:	ae cf       	rjmp	.-164    	; 0x5caa <midiAllNotesOff+0x2e>
    5d4e:	df 91       	pop	r29
    5d50:	cf 91       	pop	r28
    5d52:	1f 91       	pop	r17
    5d54:	0f 91       	pop	r16
    5d56:	ff 90       	pop	r15
    5d58:	ef 90       	pop	r14
    5d5a:	df 90       	pop	r13
    5d5c:	cf 90       	pop	r12
    5d5e:	bf 90       	pop	r11
    5d60:	af 90       	pop	r10
    5d62:	9f 90       	pop	r9
    5d64:	8f 90       	pop	r8
    5d66:	08 95       	ret
    5d68:	3b 2d       	mov	r19, r11
    5d6a:	fd 01       	movw	r30, r26
    5d6c:	22 81       	ldd	r18, Z+2	; 0x02
    5d6e:	29 0f       	add	r18, r25
    5d70:	23 1b       	sub	r18, r19
    5d72:	e2 2f       	mov	r30, r18
    5d74:	ef 71       	andi	r30, 0x1F	; 31
    5d76:	f0 e0       	ldi	r31, 0x00	; 0
    5d78:	ee 0f       	add	r30, r30
    5d7a:	ff 1f       	adc	r31, r31
    5d7c:	ee 0f       	add	r30, r30
    5d7e:	ff 1f       	adc	r31, r31
    5d80:	ee 0f       	add	r30, r30
    5d82:	ff 1f       	adc	r31, r31
    5d84:	e5 5b       	subi	r30, 0xB5	; 181
    5d86:	fd 4f       	sbci	r31, 0xFD	; 253
    5d88:	22 95       	swap	r18
    5d8a:	26 95       	lsr	r18
    5d8c:	27 70       	andi	r18, 0x07	; 7
    5d8e:	4a 01       	movw	r8, r20
    5d90:	02 c0       	rjmp	.+4      	; 0x5d96 <midiAllNotesOff+0x11a>
    5d92:	88 0c       	add	r8, r8
    5d94:	99 1c       	adc	r9, r9
    5d96:	2a 95       	dec	r18
    5d98:	e2 f7       	brpl	.-8      	; 0x5d92 <midiAllNotesOff+0x116>
    5d9a:	94 01       	movw	r18, r8
    5d9c:	31 81       	ldd	r19, Z+1	; 0x01
    5d9e:	23 2b       	or	r18, r19
    5da0:	21 83       	std	Z+1, r18	; 0x01
    5da2:	ce cf       	rjmp	.-100    	; 0x5d40 <midiAllNotesOff+0xc4>
    5da4:	f8 01       	movw	r30, r16
    5da6:	e2 cf       	rjmp	.-60     	; 0x5d6c <midiAllNotesOff+0xf0>
    5da8:	f7 01       	movw	r30, r14
    5daa:	e0 cf       	rjmp	.-64     	; 0x5d6c <midiAllNotesOff+0xf0>
    5dac:	f6 01       	movw	r30, r12
    5dae:	de cf       	rjmp	.-68     	; 0x5d6c <midiAllNotesOff+0xf0>

00005db0 <midi_CheckRxActiveSense>:
    5db0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <midiRxActivceSensing>
    5db4:	88 23       	and	r24, r24
    5db6:	19 f0       	breq	.+6      	; 0x5dbe <midi_CheckRxActiveSense+0xe>
    5db8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x6>
    5dbc:	81 11       	cpse	r24, r1
    5dbe:	08 95       	ret
    5dc0:	80 e8       	ldi	r24, 0x80	; 128
    5dc2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipeProcessing>
    5dc6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <init_Pipe>
    5dca:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <midiRxActivceSensing>
    5dce:	08 95       	ret

00005dd0 <midi_CheckTxActiveSense>:
    5dd0:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <midi_TxActivceSense>
    5dd4:	88 23       	and	r24, r24
    5dd6:	41 f0       	breq	.+16     	; 0x5de8 <midi_CheckTxActiveSense+0x18>
    5dd8:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <swTimer+0x10>
    5ddc:	88 23       	and	r24, r24
    5dde:	29 f0       	breq	.+10     	; 0x5dea <midi_CheckTxActiveSense+0x1a>
    5de0:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <swTimer+0x10>
    5de4:	8f 3f       	cpi	r24, 0xFF	; 255
    5de6:	09 f0       	breq	.+2      	; 0x5dea <midi_CheckTxActiveSense+0x1a>
    5de8:	08 95       	ret
    5dea:	8f b7       	in	r24, 0x3f	; 63
    5dec:	f8 94       	cli
    5dee:	9a e0       	ldi	r25, 0x0A	; 10
    5df0:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <swTimer+0x10>
    5df4:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <swTimer+0x11>
    5df8:	8f bf       	out	0x3f, r24	; 63
    5dfa:	8e ef       	ldi	r24, 0xFE	; 254
    5dfc:	b9 c7       	rjmp	.+3954   	; 0x6d70 <serial1MIDISend>

00005dfe <init_Midi2Manual>:
    5dfe:	ef ed       	ldi	r30, 0xDF	; 223
    5e00:	f7 e0       	ldi	r31, 0x07	; 7
    5e02:	8f ef       	ldi	r24, 0xFF	; 255
    5e04:	80 83       	st	Z, r24
    5e06:	81 83       	std	Z+1, r24	; 0x01
    5e08:	83 83       	std	Z+3, r24	; 0x03
    5e0a:	12 82       	std	Z+2, r1	; 0x02
    5e0c:	34 96       	adiw	r30, 0x04	; 4
    5e0e:	98 e0       	ldi	r25, 0x08	; 8
    5e10:	ef 3d       	cpi	r30, 0xDF	; 223
    5e12:	f9 07       	cpc	r31, r25
    5e14:	b9 f7       	brne	.-18     	; 0x5e04 <init_Midi2Manual+0x6>
    5e16:	0e 94 88 06 	call	0xd10	; 0xd10 <eeprom_ReadMidiInMap>
    5e1a:	8f 3f       	cpi	r24, 0xFF	; 255
    5e1c:	09 f0       	breq	.+2      	; 0x5e20 <init_Midi2Manual+0x22>
    5e1e:	08 95       	ret
    5e20:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <midiEEPromLoadError>
    5e24:	10 92 df 07 	sts	0x07DF, r1	; 0x8007df <midiInMap>
    5e28:	84 e2       	ldi	r24, 0x24	; 36
    5e2a:	80 93 e0 07 	sts	0x07E0, r24	; 0x8007e0 <midiInMap+0x1>
    5e2e:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <midiInMap+0x3>
    5e32:	98 e3       	ldi	r25, 0x38	; 56
    5e34:	90 93 e1 07 	sts	0x07E1, r25	; 0x8007e1 <midiInMap+0x2>
    5e38:	21 e0       	ldi	r18, 0x01	; 1
    5e3a:	20 93 ef 07 	sts	0x07EF, r18	; 0x8007ef <midiInMap+0x10>
    5e3e:	80 93 f0 07 	sts	0x07F0, r24	; 0x8007f0 <midiInMap+0x11>
    5e42:	80 93 f2 07 	sts	0x07F2, r24	; 0x8007f2 <midiInMap+0x13>
    5e46:	90 93 f1 07 	sts	0x07F1, r25	; 0x8007f1 <midiInMap+0x12>
    5e4a:	22 e0       	ldi	r18, 0x02	; 2
    5e4c:	20 93 ff 07 	sts	0x07FF, r18	; 0x8007ff <midiInMap+0x20>
    5e50:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <midiInMap+0x21>
    5e54:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <midiInMap+0x23>
    5e58:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <midiInMap+0x22>
    5e5c:	93 e0       	ldi	r25, 0x03	; 3
    5e5e:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <midiInMap+0x30>
    5e62:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <midiInMap+0x31>
    5e66:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <midiInMap+0x33>
    5e6a:	8e e1       	ldi	r24, 0x1E	; 30
    5e6c:	80 93 11 08 	sts	0x0811, r24	; 0x800811 <midiInMap+0x32>
    5e70:	40 e0       	ldi	r20, 0x00	; 0
    5e72:	50 e0       	ldi	r21, 0x00	; 0
    5e74:	61 e0       	ldi	r22, 0x01	; 1
    5e76:	81 e0       	ldi	r24, 0x01	; 1
    5e78:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <log_putError>

00005e7c <init_Manual2Midi>:
    5e7c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <eeprom_ReadMidiOutMap>
    5e80:	8f 3f       	cpi	r24, 0xFF	; 255
    5e82:	09 f0       	breq	.+2      	; 0x5e86 <init_Manual2Midi+0xa>
    5e84:	08 95       	ret
    5e86:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <midiEEPromLoadError>
    5e8a:	10 92 df 08 	sts	0x08DF, r1	; 0x8008df <midiOutMap>
    5e8e:	81 e0       	ldi	r24, 0x01	; 1
    5e90:	80 93 e0 08 	sts	0x08E0, r24	; 0x8008e0 <midiOutMap+0x1>
    5e94:	82 e0       	ldi	r24, 0x02	; 2
    5e96:	80 93 e1 08 	sts	0x08E1, r24	; 0x8008e1 <midiOutMap+0x2>
    5e9a:	83 e0       	ldi	r24, 0x03	; 3
    5e9c:	80 93 e2 08 	sts	0x08E2, r24	; 0x8008e2 <midiOutMap+0x3>
    5ea0:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <midi_TxActivceSense>
    5ea4:	40 e0       	ldi	r20, 0x00	; 0
    5ea6:	50 e0       	ldi	r21, 0x00	; 0
    5ea8:	62 e0       	ldi	r22, 0x02	; 2
    5eaa:	81 e0       	ldi	r24, 0x01	; 1
    5eac:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <log_putError>

00005eb0 <midiNote_to_Manual>:
    5eb0:	ff 92       	push	r15
    5eb2:	0f 93       	push	r16
    5eb4:	1f 93       	push	r17
    5eb6:	cf 93       	push	r28
    5eb8:	df 93       	push	r29
    5eba:	8f 70       	andi	r24, 0x0F	; 15
    5ebc:	f0 90 00 02 	lds	r15, 0x0200	; 0x800200 <__data_start>
    5ec0:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <midiLastInNote>
    5ec4:	00 e1       	ldi	r16, 0x10	; 16
    5ec6:	80 9f       	mul	r24, r16
    5ec8:	f0 01       	movw	r30, r0
    5eca:	11 24       	eor	r1, r1
    5ecc:	e1 52       	subi	r30, 0x21	; 33
    5ece:	f8 4f       	sbci	r31, 0xF8	; 248
    5ed0:	94 e0       	ldi	r25, 0x04	; 4
    5ed2:	50 e0       	ldi	r21, 0x00	; 0
    5ed4:	c1 e0       	ldi	r28, 0x01	; 1
    5ed6:	d0 e0       	ldi	r29, 0x00	; 0
    5ed8:	20 81       	ld	r18, Z
    5eda:	24 30       	cpi	r18, 0x04	; 4
    5edc:	08 f0       	brcs	.+2      	; 0x5ee0 <midiNote_to_Manual+0x30>
    5ede:	49 c0       	rjmp	.+146    	; 0x5f72 <midiNote_to_Manual+0xc2>
    5ee0:	31 81       	ldd	r19, Z+1	; 0x01
    5ee2:	16 2f       	mov	r17, r22
    5ee4:	13 1b       	sub	r17, r19
    5ee6:	31 2f       	mov	r19, r17
    5ee8:	17 fd       	sbrc	r17, 7
    5eea:	43 c0       	rjmp	.+134    	; 0x5f72 <midiNote_to_Manual+0xc2>
    5eec:	a2 81       	ldd	r26, Z+2	; 0x02
    5eee:	b0 e0       	ldi	r27, 0x00	; 0
    5ef0:	01 2f       	mov	r16, r17
    5ef2:	11 0f       	add	r17, r17
    5ef4:	11 0b       	sbc	r17, r17
    5ef6:	0a 17       	cp	r16, r26
    5ef8:	1b 07       	cpc	r17, r27
    5efa:	dc f5       	brge	.+118    	; 0x5f72 <midiNote_to_Manual+0xc2>
    5efc:	53 81       	ldd	r21, Z+3	; 0x03
    5efe:	53 0f       	add	r21, r19
    5f00:	41 30       	cpi	r20, 0x01	; 1
    5f02:	09 f4       	brne	.+2      	; 0x5f06 <midiNote_to_Manual+0x56>
    5f04:	55 c0       	rjmp	.+170    	; 0x5fb0 <midiNote_to_Manual+0x100>
    5f06:	30 e0       	ldi	r19, 0x00	; 0
    5f08:	d9 01       	movw	r26, r18
    5f0a:	aa 0f       	add	r26, r26
    5f0c:	bb 1f       	adc	r27, r27
    5f0e:	a2 0f       	add	r26, r18
    5f10:	b3 1f       	adc	r27, r19
    5f12:	aa 0f       	add	r26, r26
    5f14:	bb 1f       	adc	r27, r27
    5f16:	aa 0f       	add	r26, r26
    5f18:	bb 1f       	adc	r27, r27
    5f1a:	ad 51       	subi	r26, 0x1D	; 29
    5f1c:	b7 4f       	sbci	r27, 0xF7	; 247
    5f1e:	2c 91       	ld	r18, X
    5f20:	52 17       	cp	r21, r18
    5f22:	30 f0       	brcs	.+12     	; 0x5f30 <midiNote_to_Manual+0x80>
    5f24:	11 96       	adiw	r26, 0x01	; 1
    5f26:	3c 91       	ld	r19, X
    5f28:	11 97       	sbiw	r26, 0x01	; 1
    5f2a:	35 17       	cp	r19, r21
    5f2c:	08 f0       	brcs	.+2      	; 0x5f30 <midiNote_to_Manual+0x80>
    5f2e:	44 c0       	rjmp	.+136    	; 0x5fb8 <midiNote_to_Manual+0x108>
    5f30:	13 96       	adiw	r26, 0x03	; 3
    5f32:	2c 91       	ld	r18, X
    5f34:	13 97       	sbiw	r26, 0x03	; 3
    5f36:	52 17       	cp	r21, r18
    5f38:	30 f0       	brcs	.+12     	; 0x5f46 <midiNote_to_Manual+0x96>
    5f3a:	14 96       	adiw	r26, 0x04	; 4
    5f3c:	3c 91       	ld	r19, X
    5f3e:	14 97       	sbiw	r26, 0x04	; 4
    5f40:	35 17       	cp	r19, r21
    5f42:	08 f0       	brcs	.+2      	; 0x5f46 <midiNote_to_Manual+0x96>
    5f44:	67 c0       	rjmp	.+206    	; 0x6014 <midiNote_to_Manual+0x164>
    5f46:	16 96       	adiw	r26, 0x06	; 6
    5f48:	2c 91       	ld	r18, X
    5f4a:	16 97       	sbiw	r26, 0x06	; 6
    5f4c:	52 17       	cp	r21, r18
    5f4e:	30 f0       	brcs	.+12     	; 0x5f5c <midiNote_to_Manual+0xac>
    5f50:	17 96       	adiw	r26, 0x07	; 7
    5f52:	3c 91       	ld	r19, X
    5f54:	17 97       	sbiw	r26, 0x07	; 7
    5f56:	35 17       	cp	r19, r21
    5f58:	08 f0       	brcs	.+2      	; 0x5f5c <midiNote_to_Manual+0xac>
    5f5a:	5a c0       	rjmp	.+180    	; 0x6010 <midiNote_to_Manual+0x160>
    5f5c:	19 96       	adiw	r26, 0x09	; 9
    5f5e:	2c 91       	ld	r18, X
    5f60:	19 97       	sbiw	r26, 0x09	; 9
    5f62:	52 17       	cp	r21, r18
    5f64:	28 f0       	brcs	.+10     	; 0x5f70 <midiNote_to_Manual+0xc0>
    5f66:	1a 96       	adiw	r26, 0x0a	; 10
    5f68:	3c 91       	ld	r19, X
    5f6a:	1a 97       	sbiw	r26, 0x0a	; 10
    5f6c:	35 17       	cp	r19, r21
    5f6e:	18 f5       	brcc	.+70     	; 0x5fb6 <midiNote_to_Manual+0x106>
    5f70:	5f ef       	ldi	r21, 0xFF	; 255
    5f72:	91 50       	subi	r25, 0x01	; 1
    5f74:	34 96       	adiw	r30, 0x04	; 4
    5f76:	91 11       	cpse	r25, r1
    5f78:	af cf       	rjmp	.-162    	; 0x5ed8 <midiNote_to_Manual+0x28>
    5f7a:	f0 92 00 02 	sts	0x0200, r15	; 0x800200 <__data_start>
    5f7e:	70 93 02 02 	sts	0x0202, r23	; 0x800202 <midiLastInNote>
    5f82:	41 30       	cpi	r20, 0x01	; 1
    5f84:	31 f0       	breq	.+12     	; 0x5f92 <midiNote_to_Manual+0xe2>
    5f86:	df 91       	pop	r29
    5f88:	cf 91       	pop	r28
    5f8a:	1f 91       	pop	r17
    5f8c:	0f 91       	pop	r16
    5f8e:	ff 90       	pop	r15
    5f90:	08 95       	ret
    5f92:	51 11       	cpse	r21, r1
    5f94:	f8 cf       	rjmp	.-16     	; 0x5f86 <midiNote_to_Manual+0xd6>
    5f96:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <midiLastInNote>
    5f9a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInChannel>
    5f9e:	8f ef       	ldi	r24, 0xFF	; 255
    5fa0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    5fa4:	df 91       	pop	r29
    5fa6:	cf 91       	pop	r28
    5fa8:	1f 91       	pop	r17
    5faa:	0f 91       	pop	r16
    5fac:	ff 90       	pop	r15
    5fae:	08 95       	ret
    5fb0:	75 2f       	mov	r23, r21
    5fb2:	f2 2e       	mov	r15, r18
    5fb4:	a8 cf       	rjmp	.-176    	; 0x5f06 <midiNote_to_Manual+0x56>
    5fb6:	19 96       	adiw	r26, 0x09	; 9
    5fb8:	12 96       	adiw	r26, 0x02	; 2
    5fba:	3c 91       	ld	r19, X
    5fbc:	35 0f       	add	r19, r21
    5fbe:	32 1b       	sub	r19, r18
    5fc0:	a3 2f       	mov	r26, r19
    5fc2:	af 71       	andi	r26, 0x1F	; 31
    5fc4:	32 95       	swap	r19
    5fc6:	36 95       	lsr	r19
    5fc8:	37 70       	andi	r19, 0x07	; 7
    5fca:	b0 e0       	ldi	r27, 0x00	; 0
    5fcc:	aa 0f       	add	r26, r26
    5fce:	bb 1f       	adc	r27, r27
    5fd0:	aa 0f       	add	r26, r26
    5fd2:	bb 1f       	adc	r27, r27
    5fd4:	aa 0f       	add	r26, r26
    5fd6:	bb 1f       	adc	r27, r27
    5fd8:	a5 5b       	subi	r26, 0xB5	; 181
    5fda:	bd 4f       	sbci	r27, 0xFD	; 253
    5fdc:	8e 01       	movw	r16, r28
    5fde:	02 c0       	rjmp	.+4      	; 0x5fe4 <midiNote_to_Manual+0x134>
    5fe0:	00 0f       	add	r16, r16
    5fe2:	11 1f       	adc	r17, r17
    5fe4:	3a 95       	dec	r19
    5fe6:	e2 f7       	brpl	.-8      	; 0x5fe0 <midiNote_to_Manual+0x130>
    5fe8:	98 01       	movw	r18, r16
    5fea:	44 23       	and	r20, r20
    5fec:	49 f0       	breq	.+18     	; 0x6000 <midiNote_to_Manual+0x150>
    5fee:	20 95       	com	r18
    5ff0:	11 96       	adiw	r26, 0x01	; 1
    5ff2:	3c 91       	ld	r19, X
    5ff4:	11 97       	sbiw	r26, 0x01	; 1
    5ff6:	23 23       	and	r18, r19
    5ff8:	11 96       	adiw	r26, 0x01	; 1
    5ffa:	2c 93       	st	X, r18
    5ffc:	5f ef       	ldi	r21, 0xFF	; 255
    5ffe:	b9 cf       	rjmp	.-142    	; 0x5f72 <midiNote_to_Manual+0xc2>
    6000:	11 96       	adiw	r26, 0x01	; 1
    6002:	3c 91       	ld	r19, X
    6004:	11 97       	sbiw	r26, 0x01	; 1
    6006:	23 2b       	or	r18, r19
    6008:	11 96       	adiw	r26, 0x01	; 1
    600a:	2c 93       	st	X, r18
    600c:	5f ef       	ldi	r21, 0xFF	; 255
    600e:	b1 cf       	rjmp	.-158    	; 0x5f72 <midiNote_to_Manual+0xc2>
    6010:	16 96       	adiw	r26, 0x06	; 6
    6012:	d2 cf       	rjmp	.-92     	; 0x5fb8 <midiNote_to_Manual+0x108>
    6014:	13 96       	adiw	r26, 0x03	; 3
    6016:	d0 cf       	rjmp	.-96     	; 0x5fb8 <midiNote_to_Manual+0x108>

00006018 <midiIn_Process>:
    6018:	8f 92       	push	r8
    601a:	9f 92       	push	r9
    601c:	af 92       	push	r10
    601e:	bf 92       	push	r11
    6020:	cf 92       	push	r12
    6022:	df 92       	push	r13
    6024:	ef 92       	push	r14
    6026:	ff 92       	push	r15
    6028:	0f 93       	push	r16
    602a:	1f 93       	push	r17
    602c:	cf 93       	push	r28
    602e:	df 93       	push	r29
    6030:	87 fd       	sbrc	r24, 7
    6032:	d1 c0       	rjmp	.+418    	; 0x61d6 <midiIn_Process+0x1be>
    6034:	e0 91 dc 07 	lds	r30, 0x07DC	; 0x8007dc <midiDataByteCount>
    6038:	e2 30       	cpi	r30, 0x02	; 2
    603a:	08 f4       	brcc	.+2      	; 0x603e <midiIn_Process+0x26>
    603c:	fe c0       	rjmp	.+508    	; 0x623a <midiIn_Process+0x222>
    603e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiDataByteExpected>
    6042:	8f 3f       	cpi	r24, 0xFF	; 255
    6044:	09 f4       	brne	.+2      	; 0x6048 <midiIn_Process+0x30>
    6046:	df c0       	rjmp	.+446    	; 0x6206 <midiIn_Process+0x1ee>
    6048:	e8 17       	cp	r30, r24
    604a:	08 f4       	brcc	.+2      	; 0x604e <midiIn_Process+0x36>
    604c:	dc c0       	rjmp	.+440    	; 0x6206 <midiIn_Process+0x1ee>
    604e:	90 91 18 0b 	lds	r25, 0x0B18	; 0x800b18 <midiLastCommand>
    6052:	90 3f       	cpi	r25, 0xF0	; 240
    6054:	08 f0       	brcs	.+2      	; 0x6058 <midiIn_Process+0x40>
    6056:	ea c0       	rjmp	.+468    	; 0x622c <midiIn_Process+0x214>
    6058:	89 2f       	mov	r24, r25
    605a:	8f 70       	andi	r24, 0x0F	; 15
    605c:	90 7f       	andi	r25, 0xF0	; 240
    605e:	90 39       	cpi	r25, 0x90	; 144
    6060:	09 f4       	brne	.+2      	; 0x6064 <midiIn_Process+0x4c>
    6062:	16 c1       	rjmp	.+556    	; 0x6290 <midiIn_Process+0x278>
    6064:	08 f4       	brcc	.+2      	; 0x6068 <midiIn_Process+0x50>
    6066:	dc c0       	rjmp	.+440    	; 0x6220 <midiIn_Process+0x208>
    6068:	90 3b       	cpi	r25, 0xB0	; 176
    606a:	09 f4       	brne	.+2      	; 0x606e <midiIn_Process+0x56>
    606c:	0b c1       	rjmp	.+534    	; 0x6284 <midiIn_Process+0x26c>
    606e:	90 3c       	cpi	r25, 0xC0	; 192
    6070:	09 f0       	breq	.+2      	; 0x6074 <midiIn_Process+0x5c>
    6072:	dc c0       	rjmp	.+440    	; 0x622c <midiIn_Process+0x214>
    6074:	e0 91 13 0b 	lds	r30, 0x0B13	; 0x800b13 <midiDataByte>
    6078:	e0 34       	cpi	r30, 0x40	; 64
    607a:	08 f0       	brcs	.+2      	; 0x607e <midiIn_Process+0x66>
    607c:	d7 c0       	rjmp	.+430    	; 0x622c <midiIn_Process+0x214>
    607e:	d0 91 db 07 	lds	r29, 0x07DB	; 0x8007db <registerCount>
    6082:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <registerMap+0x1>
    6086:	48 2f       	mov	r20, r24
    6088:	4f 71       	andi	r20, 0x1F	; 31
    608a:	50 e0       	ldi	r21, 0x00	; 0
    608c:	28 2f       	mov	r18, r24
    608e:	22 95       	swap	r18
    6090:	26 95       	lsr	r18
    6092:	27 70       	andi	r18, 0x07	; 7
    6094:	81 e0       	ldi	r24, 0x01	; 1
    6096:	90 e0       	ldi	r25, 0x00	; 0
    6098:	01 c0       	rjmp	.+2      	; 0x609c <midiIn_Process+0x84>
    609a:	88 0f       	add	r24, r24
    609c:	2a 95       	dec	r18
    609e:	ea f7       	brpl	.-6      	; 0x609a <midiIn_Process+0x82>
    60a0:	18 2f       	mov	r17, r24
    60a2:	c8 2f       	mov	r28, r24
    60a4:	c0 95       	com	r28
    60a6:	f0 e0       	ldi	r31, 0x00	; 0
    60a8:	ee 0f       	add	r30, r30
    60aa:	ff 1f       	adc	r31, r31
    60ac:	ee 0f       	add	r30, r30
    60ae:	ff 1f       	adc	r31, r31
    60b0:	ee 0f       	add	r30, r30
    60b2:	ff 1f       	adc	r31, r31
    60b4:	ed 5e       	subi	r30, 0xED	; 237
    60b6:	f6 4f       	sbci	r31, 0xF6	; 246
    60b8:	20 e0       	ldi	r18, 0x00	; 0
    60ba:	30 e0       	ldi	r19, 0x00	; 0
    60bc:	44 0f       	add	r20, r20
    60be:	55 1f       	adc	r21, r21
    60c0:	44 0f       	add	r20, r20
    60c2:	55 1f       	adc	r21, r21
    60c4:	44 0f       	add	r20, r20
    60c6:	55 1f       	adc	r21, r21
    60c8:	ba 01       	movw	r22, r20
    60ca:	64 5b       	subi	r22, 0xB4	; 180
    60cc:	7d 4f       	sbci	r23, 0xFD	; 253
    60ce:	5b 01       	movw	r10, r22
    60d0:	88 24       	eor	r8, r8
    60d2:	83 94       	inc	r8
    60d4:	91 2c       	mov	r9, r1
    60d6:	07 c0       	rjmp	.+14     	; 0x60e6 <midiIn_Process+0xce>
    60d8:	2f 5f       	subi	r18, 0xFF	; 255
    60da:	3f 4f       	sbci	r19, 0xFF	; 255
    60dc:	31 96       	adiw	r30, 0x01	; 1
    60de:	28 30       	cpi	r18, 0x08	; 8
    60e0:	31 05       	cpc	r19, r1
    60e2:	09 f4       	brne	.+2      	; 0x60e6 <midiIn_Process+0xce>
    60e4:	a3 c0       	rjmp	.+326    	; 0x622c <midiIn_Process+0x214>
    60e6:	01 e0       	ldi	r16, 0x01	; 1
    60e8:	c9 01       	movw	r24, r18
    60ea:	88 0f       	add	r24, r24
    60ec:	99 1f       	adc	r25, r25
    60ee:	88 0f       	add	r24, r24
    60f0:	99 1f       	adc	r25, r25
    60f2:	88 0f       	add	r24, r24
    60f4:	99 1f       	adc	r25, r25
    60f6:	89 2b       	or	r24, r25
    60f8:	09 f4       	brne	.+2      	; 0x60fc <midiIn_Process+0xe4>
    60fa:	00 e0       	ldi	r16, 0x00	; 0
    60fc:	0d 17       	cp	r16, r29
    60fe:	60 f7       	brcc	.-40     	; 0x60d8 <midiIn_Process+0xc0>
    6100:	80 81       	ld	r24, Z
    6102:	e0 2e       	mov	r14, r16
    6104:	f1 2c       	mov	r15, r1
    6106:	d7 01       	movw	r26, r14
    6108:	a6 56       	subi	r26, 0x66	; 102
    610a:	b8 4f       	sbci	r27, 0xF8	; 248
    610c:	0c 91       	ld	r16, X
    610e:	90 2f       	mov	r25, r16
    6110:	9f 71       	andi	r25, 0x1F	; 31
    6112:	02 95       	swap	r16
    6114:	06 95       	lsr	r16
    6116:	07 70       	andi	r16, 0x07	; 7
    6118:	e9 2e       	mov	r14, r25
    611a:	f1 2c       	mov	r15, r1
    611c:	ee 0c       	add	r14, r14
    611e:	ff 1c       	adc	r15, r15
    6120:	ee 0c       	add	r14, r14
    6122:	ff 1c       	adc	r15, r15
    6124:	ee 0c       	add	r14, r14
    6126:	ff 1c       	adc	r15, r15
    6128:	b7 01       	movw	r22, r14
    612a:	65 5b       	subi	r22, 0xB5	; 181
    612c:	7d 4f       	sbci	r23, 0xFD	; 253
    612e:	64 01       	movw	r12, r8
    6130:	01 c0       	rjmp	.+2      	; 0x6134 <midiIn_Process+0x11c>
    6132:	cc 0c       	add	r12, r12
    6134:	0a 95       	dec	r16
    6136:	ea f7       	brpl	.-6      	; 0x6132 <midiIn_Process+0x11a>
    6138:	80 fd       	sbrc	r24, 0
    613a:	d5 c0       	rjmp	.+426    	; 0x62e6 <midiIn_Process+0x2ce>
    613c:	db 01       	movw	r26, r22
    613e:	11 96       	adiw	r26, 0x01	; 1
    6140:	9c 91       	ld	r25, X
    6142:	11 97       	sbiw	r26, 0x01	; 1
    6144:	c9 2a       	or	r12, r25
    6146:	11 96       	adiw	r26, 0x01	; 1
    6148:	cc 92       	st	X, r12
    614a:	86 95       	lsr	r24
    614c:	d1 30       	cpi	r29, 0x01	; 1
    614e:	21 f2       	breq	.-120    	; 0x60d8 <midiIn_Process+0xc0>
    6150:	d5 01       	movw	r26, r10
    6152:	9c 91       	ld	r25, X
    6154:	80 fd       	sbrc	r24, 0
    6156:	c4 c0       	rjmp	.+392    	; 0x62e0 <midiIn_Process+0x2c8>
    6158:	91 2b       	or	r25, r17
    615a:	9c 93       	st	X, r25
    615c:	86 95       	lsr	r24
    615e:	80 fd       	sbrc	r24, 0
    6160:	bd c0       	rjmp	.+378    	; 0x62dc <midiIn_Process+0x2c4>
    6162:	91 2b       	or	r25, r17
    6164:	ba 01       	movw	r22, r20
    6166:	65 5b       	subi	r22, 0xB5	; 181
    6168:	7d 4f       	sbci	r23, 0xFD	; 253
    616a:	db 01       	movw	r26, r22
    616c:	11 96       	adiw	r26, 0x01	; 1
    616e:	9c 93       	st	X, r25
    6170:	86 95       	lsr	r24
    6172:	80 fd       	sbrc	r24, 0
    6174:	b1 c0       	rjmp	.+354    	; 0x62d8 <midiIn_Process+0x2c0>
    6176:	91 2b       	or	r25, r17
    6178:	ba 01       	movw	r22, r20
    617a:	65 5b       	subi	r22, 0xB5	; 181
    617c:	7d 4f       	sbci	r23, 0xFD	; 253
    617e:	db 01       	movw	r26, r22
    6180:	11 96       	adiw	r26, 0x01	; 1
    6182:	9c 93       	st	X, r25
    6184:	86 95       	lsr	r24
    6186:	80 fd       	sbrc	r24, 0
    6188:	a5 c0       	rjmp	.+330    	; 0x62d4 <midiIn_Process+0x2bc>
    618a:	91 2b       	or	r25, r17
    618c:	ba 01       	movw	r22, r20
    618e:	65 5b       	subi	r22, 0xB5	; 181
    6190:	7d 4f       	sbci	r23, 0xFD	; 253
    6192:	db 01       	movw	r26, r22
    6194:	11 96       	adiw	r26, 0x01	; 1
    6196:	9c 93       	st	X, r25
    6198:	86 95       	lsr	r24
    619a:	80 fd       	sbrc	r24, 0
    619c:	99 c0       	rjmp	.+306    	; 0x62d0 <midiIn_Process+0x2b8>
    619e:	91 2b       	or	r25, r17
    61a0:	ba 01       	movw	r22, r20
    61a2:	65 5b       	subi	r22, 0xB5	; 181
    61a4:	7d 4f       	sbci	r23, 0xFD	; 253
    61a6:	db 01       	movw	r26, r22
    61a8:	11 96       	adiw	r26, 0x01	; 1
    61aa:	9c 93       	st	X, r25
    61ac:	86 95       	lsr	r24
    61ae:	80 fd       	sbrc	r24, 0
    61b0:	8d c0       	rjmp	.+282    	; 0x62cc <midiIn_Process+0x2b4>
    61b2:	91 2b       	or	r25, r17
    61b4:	ba 01       	movw	r22, r20
    61b6:	65 5b       	subi	r22, 0xB5	; 181
    61b8:	7d 4f       	sbci	r23, 0xFD	; 253
    61ba:	db 01       	movw	r26, r22
    61bc:	11 96       	adiw	r26, 0x01	; 1
    61be:	9c 93       	st	X, r25
    61c0:	86 95       	lsr	r24
    61c2:	09 f0       	breq	.+2      	; 0x61c6 <midiIn_Process+0x1ae>
    61c4:	7b c0       	rjmp	.+246    	; 0x62bc <midiIn_Process+0x2a4>
    61c6:	ba 01       	movw	r22, r20
    61c8:	65 5b       	subi	r22, 0xB5	; 181
    61ca:	7d 4f       	sbci	r23, 0xFD	; 253
    61cc:	91 2b       	or	r25, r17
    61ce:	db 01       	movw	r26, r22
    61d0:	11 96       	adiw	r26, 0x01	; 1
    61d2:	9c 93       	st	X, r25
    61d4:	81 cf       	rjmp	.-254    	; 0x60d8 <midiIn_Process+0xc0>
    61d6:	80 93 18 0b 	sts	0x0B18, r24	; 0x800b18 <midiLastCommand>
    61da:	10 92 dc 07 	sts	0x07DC, r1	; 0x8007dc <midiDataByteCount>
    61de:	90 e8       	ldi	r25, 0x80	; 128
    61e0:	98 0f       	add	r25, r24
    61e2:	90 34       	cpi	r25, 0x40	; 64
    61e4:	30 f1       	brcs	.+76     	; 0x6232 <midiIn_Process+0x21a>
    61e6:	90 e2       	ldi	r25, 0x20	; 32
    61e8:	98 0f       	add	r25, r24
    61ea:	90 31       	cpi	r25, 0x10	; 16
    61ec:	10 f1       	brcs	.+68     	; 0x6232 <midiIn_Process+0x21a>
    61ee:	82 3f       	cpi	r24, 0xF2	; 242
    61f0:	01 f1       	breq	.+64     	; 0x6232 <midiIn_Process+0x21a>
    61f2:	80 3f       	cpi	r24, 0xF0	; 240
    61f4:	09 f4       	brne	.+2      	; 0x61f8 <midiIn_Process+0x1e0>
    61f6:	5e c0       	rjmp	.+188    	; 0x62b4 <midiIn_Process+0x29c>
    61f8:	90 e4       	ldi	r25, 0x40	; 64
    61fa:	98 0f       	add	r25, r24
    61fc:	90 32       	cpi	r25, 0x20	; 32
    61fe:	38 f5       	brcc	.+78     	; 0x624e <midiIn_Process+0x236>
    6200:	81 e0       	ldi	r24, 0x01	; 1
    6202:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    6206:	df 91       	pop	r29
    6208:	cf 91       	pop	r28
    620a:	1f 91       	pop	r17
    620c:	0f 91       	pop	r16
    620e:	ff 90       	pop	r15
    6210:	ef 90       	pop	r14
    6212:	df 90       	pop	r13
    6214:	cf 90       	pop	r12
    6216:	bf 90       	pop	r11
    6218:	af 90       	pop	r10
    621a:	9f 90       	pop	r9
    621c:	8f 90       	pop	r8
    621e:	08 95       	ret
    6220:	90 38       	cpi	r25, 0x80	; 128
    6222:	21 f4       	brne	.+8      	; 0x622c <midiIn_Process+0x214>
    6224:	40 e0       	ldi	r20, 0x00	; 0
    6226:	60 91 13 0b 	lds	r22, 0x0B13	; 0x800b13 <midiDataByte>
    622a:	42 de       	rcall	.-892    	; 0x5eb0 <midiNote_to_Manual>
    622c:	10 92 dc 07 	sts	0x07DC, r1	; 0x8007dc <midiDataByteCount>
    6230:	ea cf       	rjmp	.-44     	; 0x6206 <midiIn_Process+0x1ee>
    6232:	82 e0       	ldi	r24, 0x02	; 2
    6234:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    6238:	e6 cf       	rjmp	.-52     	; 0x6206 <midiIn_Process+0x1ee>
    623a:	91 e0       	ldi	r25, 0x01	; 1
    623c:	9e 0f       	add	r25, r30
    623e:	90 93 dc 07 	sts	0x07DC, r25	; 0x8007dc <midiDataByteCount>
    6242:	f0 e0       	ldi	r31, 0x00	; 0
    6244:	ed 5e       	subi	r30, 0xED	; 237
    6246:	f4 4f       	sbci	r31, 0xF4	; 244
    6248:	80 83       	st	Z, r24
    624a:	e9 2f       	mov	r30, r25
    624c:	f8 ce       	rjmp	.-528    	; 0x603e <midiIn_Process+0x26>
    624e:	98 2f       	mov	r25, r24
    6250:	9d 7f       	andi	r25, 0xFD	; 253
    6252:	91 3f       	cpi	r25, 0xF1	; 241
    6254:	a9 f2       	breq	.-86     	; 0x6200 <midiIn_Process+0x1e8>
    6256:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <midiDataByteExpected>
    625a:	8e 3f       	cpi	r24, 0xFE	; 254
    625c:	f9 f0       	breq	.+62     	; 0x629c <midiIn_Process+0x284>
    625e:	8f 3f       	cpi	r24, 0xFF	; 255
    6260:	91 f6       	brne	.-92     	; 0x6206 <midiIn_Process+0x1ee>
    6262:	80 e8       	ldi	r24, 0x80	; 128
    6264:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipeProcessing>
    6268:	df 91       	pop	r29
    626a:	cf 91       	pop	r28
    626c:	1f 91       	pop	r17
    626e:	0f 91       	pop	r16
    6270:	ff 90       	pop	r15
    6272:	ef 90       	pop	r14
    6274:	df 90       	pop	r13
    6276:	cf 90       	pop	r12
    6278:	bf 90       	pop	r11
    627a:	af 90       	pop	r10
    627c:	9f 90       	pop	r9
    627e:	8f 90       	pop	r8
    6280:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <init_Pipe>
    6284:	90 91 13 0b 	lds	r25, 0x0B13	; 0x800b13 <midiDataByte>
    6288:	9b 37       	cpi	r25, 0x7B	; 123
    628a:	81 f6       	brne	.-96     	; 0x622c <midiIn_Process+0x214>
    628c:	f7 dc       	rcall	.-1554   	; 0x5c7c <midiAllNotesOff>
    628e:	ce cf       	rjmp	.-100    	; 0x622c <midiIn_Process+0x214>
    6290:	41 e0       	ldi	r20, 0x01	; 1
    6292:	90 91 14 0b 	lds	r25, 0x0B14	; 0x800b14 <midiDataByte+0x1>
    6296:	91 11       	cpse	r25, r1
    6298:	c6 cf       	rjmp	.-116    	; 0x6226 <midiIn_Process+0x20e>
    629a:	c4 cf       	rjmp	.-120    	; 0x6224 <midiIn_Process+0x20c>
    629c:	81 e0       	ldi	r24, 0x01	; 1
    629e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <midiRxActivceSensing>
    62a2:	8f b7       	in	r24, 0x3f	; 63
    62a4:	f8 94       	cli
    62a6:	99 e1       	ldi	r25, 0x19	; 25
    62a8:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <swTimer+0x6>
    62ac:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <swTimer+0x7>
    62b0:	8f bf       	out	0x3f, r24	; 63
    62b2:	a9 cf       	rjmp	.-174    	; 0x6206 <midiIn_Process+0x1ee>
    62b4:	8f ef       	ldi	r24, 0xFF	; 255
    62b6:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    62ba:	a5 cf       	rjmp	.-182    	; 0x6206 <midiIn_Process+0x1ee>
    62bc:	ba 01       	movw	r22, r20
    62be:	65 5b       	subi	r22, 0xB5	; 181
    62c0:	7d 4f       	sbci	r23, 0xFD	; 253
    62c2:	9c 23       	and	r25, r28
    62c4:	db 01       	movw	r26, r22
    62c6:	11 96       	adiw	r26, 0x01	; 1
    62c8:	9c 93       	st	X, r25
    62ca:	06 cf       	rjmp	.-500    	; 0x60d8 <midiIn_Process+0xc0>
    62cc:	9c 23       	and	r25, r28
    62ce:	72 cf       	rjmp	.-284    	; 0x61b4 <midiIn_Process+0x19c>
    62d0:	9c 23       	and	r25, r28
    62d2:	66 cf       	rjmp	.-308    	; 0x61a0 <midiIn_Process+0x188>
    62d4:	9c 23       	and	r25, r28
    62d6:	5a cf       	rjmp	.-332    	; 0x618c <midiIn_Process+0x174>
    62d8:	9c 23       	and	r25, r28
    62da:	4e cf       	rjmp	.-356    	; 0x6178 <midiIn_Process+0x160>
    62dc:	9c 23       	and	r25, r28
    62de:	42 cf       	rjmp	.-380    	; 0x6164 <midiIn_Process+0x14c>
    62e0:	9c 23       	and	r25, r28
    62e2:	9c 93       	st	X, r25
    62e4:	3b cf       	rjmp	.-394    	; 0x615c <midiIn_Process+0x144>
    62e6:	c0 94       	com	r12
    62e8:	db 01       	movw	r26, r22
    62ea:	11 96       	adiw	r26, 0x01	; 1
    62ec:	9c 91       	ld	r25, X
    62ee:	11 97       	sbiw	r26, 0x01	; 1
    62f0:	9c 21       	and	r25, r12
    62f2:	11 96       	adiw	r26, 0x01	; 1
    62f4:	9c 93       	st	X, r25
    62f6:	29 cf       	rjmp	.-430    	; 0x614a <midiIn_Process+0x132>

000062f8 <init_Manual2Module>:
    62f8:	8f ef       	ldi	r24, 0xFF	; 255
    62fa:	80 93 10 09 	sts	0x0910, r24	; 0x800910 <manualMap+0x2d>
    62fe:	80 93 11 09 	sts	0x0911, r24	; 0x800911 <manualMap+0x2e>
    6302:	10 92 12 09 	sts	0x0912, r1	; 0x800912 <manualMap+0x2f>
    6306:	80 93 0d 09 	sts	0x090D, r24	; 0x80090d <manualMap+0x2a>
    630a:	80 93 0e 09 	sts	0x090E, r24	; 0x80090e <manualMap+0x2b>
    630e:	10 92 0f 09 	sts	0x090F, r1	; 0x80090f <manualMap+0x2c>
    6312:	80 93 0a 09 	sts	0x090A, r24	; 0x80090a <manualMap+0x27>
    6316:	80 93 0b 09 	sts	0x090B, r24	; 0x80090b <manualMap+0x28>
    631a:	10 92 0c 09 	sts	0x090C, r1	; 0x80090c <manualMap+0x29>
    631e:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <manualMap+0x24>
    6322:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <manualMap+0x25>
    6326:	10 92 09 09 	sts	0x0909, r1	; 0x800909 <manualMap+0x26>
    632a:	80 93 04 09 	sts	0x0904, r24	; 0x800904 <manualMap+0x21>
    632e:	80 93 05 09 	sts	0x0905, r24	; 0x800905 <manualMap+0x22>
    6332:	10 92 06 09 	sts	0x0906, r1	; 0x800906 <manualMap+0x23>
    6336:	80 93 01 09 	sts	0x0901, r24	; 0x800901 <manualMap+0x1e>
    633a:	80 93 02 09 	sts	0x0902, r24	; 0x800902 <manualMap+0x1f>
    633e:	10 92 03 09 	sts	0x0903, r1	; 0x800903 <manualMap+0x20>
    6342:	80 93 fe 08 	sts	0x08FE, r24	; 0x8008fe <manualMap+0x1b>
    6346:	80 93 ff 08 	sts	0x08FF, r24	; 0x8008ff <manualMap+0x1c>
    634a:	10 92 00 09 	sts	0x0900, r1	; 0x800900 <manualMap+0x1d>
    634e:	80 93 fb 08 	sts	0x08FB, r24	; 0x8008fb <manualMap+0x18>
    6352:	80 93 fc 08 	sts	0x08FC, r24	; 0x8008fc <manualMap+0x19>
    6356:	10 92 fd 08 	sts	0x08FD, r1	; 0x8008fd <manualMap+0x1a>
    635a:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <manualMap+0x15>
    635e:	80 93 f9 08 	sts	0x08F9, r24	; 0x8008f9 <manualMap+0x16>
    6362:	10 92 fa 08 	sts	0x08FA, r1	; 0x8008fa <manualMap+0x17>
    6366:	80 93 f5 08 	sts	0x08F5, r24	; 0x8008f5 <manualMap+0x12>
    636a:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <manualMap+0x13>
    636e:	10 92 f7 08 	sts	0x08F7, r1	; 0x8008f7 <manualMap+0x14>
    6372:	80 93 f2 08 	sts	0x08F2, r24	; 0x8008f2 <manualMap+0xf>
    6376:	80 93 f3 08 	sts	0x08F3, r24	; 0x8008f3 <manualMap+0x10>
    637a:	10 92 f4 08 	sts	0x08F4, r1	; 0x8008f4 <manualMap+0x11>
    637e:	80 93 ef 08 	sts	0x08EF, r24	; 0x8008ef <manualMap+0xc>
    6382:	80 93 f0 08 	sts	0x08F0, r24	; 0x8008f0 <manualMap+0xd>
    6386:	10 92 f1 08 	sts	0x08F1, r1	; 0x8008f1 <manualMap+0xe>
    638a:	80 93 ec 08 	sts	0x08EC, r24	; 0x8008ec <manualMap+0x9>
    638e:	80 93 ed 08 	sts	0x08ED, r24	; 0x8008ed <manualMap+0xa>
    6392:	10 92 ee 08 	sts	0x08EE, r1	; 0x8008ee <manualMap+0xb>
    6396:	80 93 e9 08 	sts	0x08E9, r24	; 0x8008e9 <manualMap+0x6>
    639a:	80 93 ea 08 	sts	0x08EA, r24	; 0x8008ea <manualMap+0x7>
    639e:	10 92 eb 08 	sts	0x08EB, r1	; 0x8008eb <manualMap+0x8>
    63a2:	80 93 e6 08 	sts	0x08E6, r24	; 0x8008e6 <manualMap+0x3>
    63a6:	80 93 e7 08 	sts	0x08E7, r24	; 0x8008e7 <manualMap+0x4>
    63aa:	10 92 e8 08 	sts	0x08E8, r1	; 0x8008e8 <manualMap+0x5>
    63ae:	80 93 e3 08 	sts	0x08E3, r24	; 0x8008e3 <manualMap>
    63b2:	80 93 e4 08 	sts	0x08E4, r24	; 0x8008e4 <manualMap+0x1>
    63b6:	10 92 e5 08 	sts	0x08E5, r1	; 0x8008e5 <manualMap+0x2>
    63ba:	0e 94 37 06 	call	0xc6e	; 0xc6e <eeprom_ReadManualMap>
    63be:	8f 3f       	cpi	r24, 0xFF	; 255
    63c0:	09 f0       	breq	.+2      	; 0x63c4 <init_Manual2Module+0xcc>
    63c2:	08 95       	ret
    63c4:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <midiEEPromLoadError>
    63c8:	40 e0       	ldi	r20, 0x00	; 0
    63ca:	50 e0       	ldi	r21, 0x00	; 0
    63cc:	63 e0       	ldi	r22, 0x03	; 3
    63ce:	81 e0       	ldi	r24, 0x01	; 1
    63d0:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <log_putError>

000063d4 <manual_NoteOnOff>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    63d4:	84 30       	cpi	r24, 0x04	; 4
    63d6:	50 f5       	brcc	.+84     	; 0x642c <manual_NoteOnOff+0x58>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    63d8:	90 e0       	ldi	r25, 0x00	; 0
    63da:	fc 01       	movw	r30, r24
    63dc:	ee 0f       	add	r30, r30
    63de:	ff 1f       	adc	r31, r31
    63e0:	e8 0f       	add	r30, r24
    63e2:	f9 1f       	adc	r31, r25
    63e4:	ee 0f       	add	r30, r30
    63e6:	ff 1f       	adc	r31, r31
    63e8:	ee 0f       	add	r30, r30
    63ea:	ff 1f       	adc	r31, r31
    63ec:	ed 51       	subi	r30, 0x1D	; 29
    63ee:	f7 4f       	sbci	r31, 0xF7	; 247
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    63f0:	90 81       	ld	r25, Z
    63f2:	69 17       	cp	r22, r25
    63f4:	e0 f4       	brcc	.+56     	; 0x642e <manual_NoteOnOff+0x5a>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    63f6:	9f 01       	movw	r18, r30
    63f8:	2d 5f       	subi	r18, 0xFD	; 253
    63fa:	3f 4f       	sbci	r19, 0xFF	; 255
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    63fc:	93 81       	ldd	r25, Z+3	; 0x03
    63fe:	69 17       	cp	r22, r25
    6400:	18 f0       	brcs	.+6      	; 0x6408 <manual_NoteOnOff+0x34>
    6402:	84 81       	ldd	r24, Z+4	; 0x04
    6404:	86 17       	cp	r24, r22
    6406:	c0 f5       	brcc	.+112    	; 0x6478 <manual_NoteOnOff+0xa4>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6408:	9f 01       	movw	r18, r30
    640a:	2a 5f       	subi	r18, 0xFA	; 250
    640c:	3f 4f       	sbci	r19, 0xFF	; 255
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    640e:	96 81       	ldd	r25, Z+6	; 0x06
    6410:	69 17       	cp	r22, r25
    6412:	18 f0       	brcs	.+6      	; 0x641a <manual_NoteOnOff+0x46>
    6414:	87 81       	ldd	r24, Z+7	; 0x07
    6416:	86 17       	cp	r24, r22
    6418:	78 f5       	brcc	.+94     	; 0x6478 <manual_NoteOnOff+0xa4>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    641a:	9f 01       	movw	r18, r30
    641c:	27 5f       	subi	r18, 0xF7	; 247
    641e:	3f 4f       	sbci	r19, 0xFF	; 255
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6420:	91 85       	ldd	r25, Z+9	; 0x09
    6422:	69 17       	cp	r22, r25
    6424:	18 f0       	brcs	.+6      	; 0x642c <manual_NoteOnOff+0x58>
    6426:	82 85       	ldd	r24, Z+10	; 0x0a
    6428:	86 17       	cp	r24, r22
    642a:	30 f5       	brcc	.+76     	; 0x6478 <manual_NoteOnOff+0xa4>
    642c:	08 95       	ret
    642e:	81 81       	ldd	r24, Z+1	; 0x01
    6430:	86 17       	cp	r24, r22
    6432:	08 f3       	brcs	.-62     	; 0x63f6 <manual_NoteOnOff+0x22>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6434:	82 81       	ldd	r24, Z+2	; 0x02
    6436:	68 0f       	add	r22, r24
    6438:	69 1b       	sub	r22, r25
void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    643a:	e6 2f       	mov	r30, r22
    643c:	ef 71       	andi	r30, 0x1F	; 31
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    643e:	62 95       	swap	r22
    6440:	66 95       	lsr	r22
    6442:	67 70       	andi	r22, 0x07	; 7
		if (onOff == NOTE_OFF) {
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    6444:	f0 e0       	ldi	r31, 0x00	; 0
    6446:	ee 0f       	add	r30, r30
    6448:	ff 1f       	adc	r31, r31
    644a:	ee 0f       	add	r30, r30
    644c:	ff 1f       	adc	r31, r31
    644e:	ee 0f       	add	r30, r30
    6450:	ff 1f       	adc	r31, r31
    6452:	e5 5b       	subi	r30, 0xB5	; 181
    6454:	fd 4f       	sbci	r31, 0xFD	; 253
    6456:	81 e0       	ldi	r24, 0x01	; 1
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	01 c0       	rjmp	.+2      	; 0x645e <manual_NoteOnOff+0x8a>
    645c:	88 0f       	add	r24, r24
    645e:	6a 95       	dec	r22
    6460:	ea f7       	brpl	.-6      	; 0x645c <manual_NoteOnOff+0x88>
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
    6462:	44 23       	and	r20, r20
    6464:	29 f0       	breq	.+10     	; 0x6470 <manual_NoteOnOff+0x9c>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    6466:	80 95       	com	r24
    6468:	91 81       	ldd	r25, Z+1	; 0x01
    646a:	89 23       	and	r24, r25
    646c:	81 83       	std	Z+1, r24	; 0x01
    646e:	08 95       	ret
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    6470:	91 81       	ldd	r25, Z+1	; 0x01
    6472:	89 2b       	or	r24, r25
    6474:	81 83       	std	Z+1, r24	; 0x01
    6476:	08 95       	ret
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6478:	f9 01       	movw	r30, r18
    647a:	dc cf       	rjmp	.-72     	; 0x6434 <manual_NoteOnOff+0x60>

0000647c <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   M I D I   O U T *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    647c:	af 92       	push	r10
    647e:	bf 92       	push	r11
    6480:	cf 92       	push	r12
    6482:	df 92       	push	r13
    6484:	ef 92       	push	r14
    6486:	ff 92       	push	r15
    6488:	0f 93       	push	r16
    648a:	1f 93       	push	r17
    648c:	cf 93       	push	r28
    648e:	df 93       	push	r29
    6490:	00 d0       	rcall	.+0      	; 0x6492 <midiKeyPress_Process+0x16>
    6492:	cd b7       	in	r28, 0x3d	; 61
    6494:	de b7       	in	r29, 0x3e	; 62
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H;
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H;
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS];
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6496:	29 2f       	mov	r18, r25
    6498:	20 7c       	andi	r18, 0xC0	; 192
    649a:	09 f0       	breq	.+2      	; 0x649e <midiKeyPress_Process+0x22>
    649c:	72 c1       	rjmp	.+740    	; 0x6782 <midiKeyPress_Process+0x306>
//********************************************* P R O C E S S   M I D I   O U T *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H;
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H;
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS];
    649e:	8b 83       	std	Y+3, r24	; 0x03
}

//********************************************* P R O C E S S   M I D I   O U T *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H;
    64a0:	29 2f       	mov	r18, r25
    64a2:	20 7e       	andi	r18, 0xE0	; 224
    64a4:	29 83       	std	Y+1, r18	; 0x01
    64a6:	e1 2c       	mov	r14, r1
    64a8:	f1 2c       	mov	r15, r1
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules
			if ((moduleBits & 0x01) != 0) {
				// LSB==1 -> Module has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit));
    64aa:	9f 71       	andi	r25, 0x1F	; 31
    64ac:	d9 2e       	mov	r13, r25
		if (onOff == NOTE_OFF) {
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    64ae:	01 e0       	ldi	r16, 0x01	; 1
    64b0:	10 e0       	ldi	r17, 0x00	; 0
    64b2:	38 2f       	mov	r19, r24
    64b4:	0b c0       	rjmp	.+22     	; 0x64cc <midiKeyPress_Process+0x50>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
						}
					}
				} // if
			}
			moduleBits >>= 1; // next module
    64b6:	3b 81       	ldd	r19, Y+3	; 0x03
    64b8:	36 95       	lsr	r19
    64ba:	3b 83       	std	Y+3, r19	; 0x03
    64bc:	8f ef       	ldi	r24, 0xFF	; 255
    64be:	e8 1a       	sub	r14, r24
    64c0:	f8 0a       	sbc	r15, r24
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS];
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    64c2:	98 e0       	ldi	r25, 0x08	; 8
    64c4:	e9 16       	cp	r14, r25
    64c6:	f1 04       	cpc	r15, r1
    64c8:	09 f4       	brne	.+2      	; 0x64cc <midiKeyPress_Process+0x50>
    64ca:	5b c1       	rjmp	.+694    	; 0x6782 <midiKeyPress_Process+0x306>
			// check all 8 bits for 8 modules
			if ((moduleBits & 0x01) != 0) {
    64cc:	30 ff       	sbrs	r19, 0
    64ce:	f3 cf       	rjmp	.-26     	; 0x64b6 <midiKeyPress_Process+0x3a>
				// LSB==1 -> Module has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit));
    64d0:	97 01       	movw	r18, r14
    64d2:	22 0f       	add	r18, r18
    64d4:	33 1f       	adc	r19, r19
    64d6:	22 95       	swap	r18
    64d8:	32 95       	swap	r19
    64da:	30 7f       	andi	r19, 0xF0	; 240
    64dc:	32 27       	eor	r19, r18
    64de:	20 7f       	andi	r18, 0xF0	; 240
    64e0:	32 27       	eor	r19, r18
    64e2:	2d 29       	or	r18, r13
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    64e4:	90 91 e5 08 	lds	r25, 0x08E5	; 0x8008e5 <manualMap+0x2>
    64e8:	29 17       	cp	r18, r25
    64ea:	08 f0       	brcs	.+2      	; 0x64ee <midiKeyPress_Process+0x72>
    64ec:	58 c1       	rjmp	.+688    	; 0x679e <midiKeyPress_Process+0x322>
    64ee:	42 2f       	mov	r20, r18
    64f0:	50 e0       	ldi	r21, 0x00	; 0
    64f2:	90 91 e8 08 	lds	r25, 0x08E8	; 0x8008e8 <manualMap+0x5>
    64f6:	29 17       	cp	r18, r25
    64f8:	68 f0       	brcs	.+26     	; 0x6514 <midiKeyPress_Process+0x98>
    64fa:	30 91 e6 08 	lds	r19, 0x08E6	; 0x8008e6 <manualMap+0x3>
    64fe:	60 91 e7 08 	lds	r22, 0x08E7	; 0x8008e7 <manualMap+0x4>
    6502:	70 e0       	ldi	r23, 0x00	; 0
    6504:	63 1b       	sub	r22, r19
    6506:	71 09       	sbc	r23, r1
    6508:	69 0f       	add	r22, r25
    650a:	71 1d       	adc	r23, r1
    650c:	64 17       	cp	r22, r20
    650e:	75 07       	cpc	r23, r21
    6510:	0c f0       	brlt	.+2      	; 0x6514 <midiKeyPress_Process+0x98>
    6512:	54 c1       	rjmp	.+680    	; 0x67bc <midiKeyPress_Process+0x340>
    6514:	90 91 eb 08 	lds	r25, 0x08EB	; 0x8008eb <manualMap+0x8>
    6518:	29 17       	cp	r18, r25
    651a:	68 f0       	brcs	.+26     	; 0x6536 <midiKeyPress_Process+0xba>
    651c:	30 91 e9 08 	lds	r19, 0x08E9	; 0x8008e9 <manualMap+0x6>
    6520:	60 91 ea 08 	lds	r22, 0x08EA	; 0x8008ea <manualMap+0x7>
    6524:	70 e0       	ldi	r23, 0x00	; 0
    6526:	63 1b       	sub	r22, r19
    6528:	71 09       	sbc	r23, r1
    652a:	69 0f       	add	r22, r25
    652c:	71 1d       	adc	r23, r1
    652e:	64 17       	cp	r22, r20
    6530:	75 07       	cpc	r23, r21
    6532:	0c f0       	brlt	.+2      	; 0x6536 <midiKeyPress_Process+0xba>
    6534:	43 c1       	rjmp	.+646    	; 0x67bc <midiKeyPress_Process+0x340>
    6536:	90 91 ee 08 	lds	r25, 0x08EE	; 0x8008ee <manualMap+0xb>
    653a:	29 17       	cp	r18, r25
    653c:	68 f0       	brcs	.+26     	; 0x6558 <midiKeyPress_Process+0xdc>
    653e:	30 91 ec 08 	lds	r19, 0x08EC	; 0x8008ec <manualMap+0x9>
    6542:	60 91 ed 08 	lds	r22, 0x08ED	; 0x8008ed <manualMap+0xa>
    6546:	70 e0       	ldi	r23, 0x00	; 0
    6548:	63 1b       	sub	r22, r19
    654a:	71 09       	sbc	r23, r1
    654c:	69 0f       	add	r22, r25
    654e:	71 1d       	adc	r23, r1
    6550:	64 17       	cp	r22, r20
    6552:	75 07       	cpc	r23, r21
    6554:	0c f0       	brlt	.+2      	; 0x6558 <midiKeyPress_Process+0xdc>
    6556:	32 c1       	rjmp	.+612    	; 0x67bc <midiKeyPress_Process+0x340>
    6558:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <manualMap+0xe>
    655c:	29 17       	cp	r18, r25
    655e:	68 f0       	brcs	.+26     	; 0x657a <midiKeyPress_Process+0xfe>
    6560:	30 91 ef 08 	lds	r19, 0x08EF	; 0x8008ef <manualMap+0xc>
    6564:	60 91 f0 08 	lds	r22, 0x08F0	; 0x8008f0 <manualMap+0xd>
    6568:	70 e0       	ldi	r23, 0x00	; 0
    656a:	63 1b       	sub	r22, r19
    656c:	71 09       	sbc	r23, r1
    656e:	69 0f       	add	r22, r25
    6570:	71 1d       	adc	r23, r1
    6572:	64 17       	cp	r22, r20
    6574:	75 07       	cpc	r23, r21
    6576:	0c f0       	brlt	.+2      	; 0x657a <midiKeyPress_Process+0xfe>
    6578:	b1 c1       	rjmp	.+866    	; 0x68dc <midiKeyPress_Process+0x460>
    657a:	90 91 f4 08 	lds	r25, 0x08F4	; 0x8008f4 <manualMap+0x11>
    657e:	29 17       	cp	r18, r25
    6580:	68 f0       	brcs	.+26     	; 0x659c <midiKeyPress_Process+0x120>
    6582:	30 91 f2 08 	lds	r19, 0x08F2	; 0x8008f2 <manualMap+0xf>
    6586:	60 91 f3 08 	lds	r22, 0x08F3	; 0x8008f3 <manualMap+0x10>
    658a:	70 e0       	ldi	r23, 0x00	; 0
    658c:	63 1b       	sub	r22, r19
    658e:	71 09       	sbc	r23, r1
    6590:	69 0f       	add	r22, r25
    6592:	71 1d       	adc	r23, r1
    6594:	64 17       	cp	r22, r20
    6596:	75 07       	cpc	r23, r21
    6598:	0c f0       	brlt	.+2      	; 0x659c <midiKeyPress_Process+0x120>
    659a:	a0 c1       	rjmp	.+832    	; 0x68dc <midiKeyPress_Process+0x460>
    659c:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <manualMap+0x14>
    65a0:	29 17       	cp	r18, r25
    65a2:	68 f0       	brcs	.+26     	; 0x65be <midiKeyPress_Process+0x142>
    65a4:	30 91 f5 08 	lds	r19, 0x08F5	; 0x8008f5 <manualMap+0x12>
    65a8:	60 91 f6 08 	lds	r22, 0x08F6	; 0x8008f6 <manualMap+0x13>
    65ac:	70 e0       	ldi	r23, 0x00	; 0
    65ae:	63 1b       	sub	r22, r19
    65b0:	71 09       	sbc	r23, r1
    65b2:	69 0f       	add	r22, r25
    65b4:	71 1d       	adc	r23, r1
    65b6:	64 17       	cp	r22, r20
    65b8:	75 07       	cpc	r23, r21
    65ba:	0c f0       	brlt	.+2      	; 0x65be <midiKeyPress_Process+0x142>
    65bc:	8f c1       	rjmp	.+798    	; 0x68dc <midiKeyPress_Process+0x460>
    65be:	90 91 fa 08 	lds	r25, 0x08FA	; 0x8008fa <manualMap+0x17>
    65c2:	29 17       	cp	r18, r25
    65c4:	68 f0       	brcs	.+26     	; 0x65e0 <midiKeyPress_Process+0x164>
    65c6:	30 91 f8 08 	lds	r19, 0x08F8	; 0x8008f8 <manualMap+0x15>
    65ca:	60 91 f9 08 	lds	r22, 0x08F9	; 0x8008f9 <manualMap+0x16>
    65ce:	70 e0       	ldi	r23, 0x00	; 0
    65d0:	63 1b       	sub	r22, r19
    65d2:	71 09       	sbc	r23, r1
    65d4:	69 0f       	add	r22, r25
    65d6:	71 1d       	adc	r23, r1
    65d8:	64 17       	cp	r22, r20
    65da:	75 07       	cpc	r23, r21
    65dc:	0c f0       	brlt	.+2      	; 0x65e0 <midiKeyPress_Process+0x164>
    65de:	7e c1       	rjmp	.+764    	; 0x68dc <midiKeyPress_Process+0x460>
    65e0:	90 91 fd 08 	lds	r25, 0x08FD	; 0x8008fd <manualMap+0x1a>
    65e4:	29 17       	cp	r18, r25
    65e6:	68 f0       	brcs	.+26     	; 0x6602 <midiKeyPress_Process+0x186>
    65e8:	30 91 fb 08 	lds	r19, 0x08FB	; 0x8008fb <manualMap+0x18>
    65ec:	60 91 fc 08 	lds	r22, 0x08FC	; 0x8008fc <manualMap+0x19>
    65f0:	70 e0       	ldi	r23, 0x00	; 0
    65f2:	63 1b       	sub	r22, r19
    65f4:	71 09       	sbc	r23, r1
    65f6:	69 0f       	add	r22, r25
    65f8:	71 1d       	adc	r23, r1
    65fa:	64 17       	cp	r22, r20
    65fc:	75 07       	cpc	r23, r21
    65fe:	0c f0       	brlt	.+2      	; 0x6602 <midiKeyPress_Process+0x186>
    6600:	72 c1       	rjmp	.+740    	; 0x68e6 <midiKeyPress_Process+0x46a>
    6602:	90 91 00 09 	lds	r25, 0x0900	; 0x800900 <manualMap+0x1d>
    6606:	29 17       	cp	r18, r25
    6608:	68 f0       	brcs	.+26     	; 0x6624 <midiKeyPress_Process+0x1a8>
    660a:	30 91 fe 08 	lds	r19, 0x08FE	; 0x8008fe <manualMap+0x1b>
    660e:	60 91 ff 08 	lds	r22, 0x08FF	; 0x8008ff <manualMap+0x1c>
    6612:	70 e0       	ldi	r23, 0x00	; 0
    6614:	63 1b       	sub	r22, r19
    6616:	71 09       	sbc	r23, r1
    6618:	69 0f       	add	r22, r25
    661a:	71 1d       	adc	r23, r1
    661c:	64 17       	cp	r22, r20
    661e:	75 07       	cpc	r23, r21
    6620:	0c f0       	brlt	.+2      	; 0x6624 <midiKeyPress_Process+0x1a8>
    6622:	61 c1       	rjmp	.+706    	; 0x68e6 <midiKeyPress_Process+0x46a>
    6624:	90 91 03 09 	lds	r25, 0x0903	; 0x800903 <manualMap+0x20>
    6628:	29 17       	cp	r18, r25
    662a:	68 f0       	brcs	.+26     	; 0x6646 <midiKeyPress_Process+0x1ca>
    662c:	30 91 01 09 	lds	r19, 0x0901	; 0x800901 <manualMap+0x1e>
    6630:	60 91 02 09 	lds	r22, 0x0902	; 0x800902 <manualMap+0x1f>
    6634:	70 e0       	ldi	r23, 0x00	; 0
    6636:	63 1b       	sub	r22, r19
    6638:	71 09       	sbc	r23, r1
    663a:	69 0f       	add	r22, r25
    663c:	71 1d       	adc	r23, r1
    663e:	64 17       	cp	r22, r20
    6640:	75 07       	cpc	r23, r21
    6642:	0c f0       	brlt	.+2      	; 0x6646 <midiKeyPress_Process+0x1ca>
    6644:	50 c1       	rjmp	.+672    	; 0x68e6 <midiKeyPress_Process+0x46a>
    6646:	90 91 06 09 	lds	r25, 0x0906	; 0x800906 <manualMap+0x23>
    664a:	29 17       	cp	r18, r25
    664c:	68 f0       	brcs	.+26     	; 0x6668 <midiKeyPress_Process+0x1ec>
    664e:	30 91 04 09 	lds	r19, 0x0904	; 0x800904 <manualMap+0x21>
    6652:	60 91 05 09 	lds	r22, 0x0905	; 0x800905 <manualMap+0x22>
    6656:	70 e0       	ldi	r23, 0x00	; 0
    6658:	63 1b       	sub	r22, r19
    665a:	71 09       	sbc	r23, r1
    665c:	69 0f       	add	r22, r25
    665e:	71 1d       	adc	r23, r1
    6660:	64 17       	cp	r22, r20
    6662:	75 07       	cpc	r23, r21
    6664:	0c f0       	brlt	.+2      	; 0x6668 <midiKeyPress_Process+0x1ec>
    6666:	3f c1       	rjmp	.+638    	; 0x68e6 <midiKeyPress_Process+0x46a>
    6668:	90 91 09 09 	lds	r25, 0x0909	; 0x800909 <manualMap+0x26>
    666c:	29 17       	cp	r18, r25
    666e:	68 f0       	brcs	.+26     	; 0x668a <midiKeyPress_Process+0x20e>
    6670:	30 91 07 09 	lds	r19, 0x0907	; 0x800907 <manualMap+0x24>
    6674:	60 91 08 09 	lds	r22, 0x0908	; 0x800908 <manualMap+0x25>
    6678:	70 e0       	ldi	r23, 0x00	; 0
    667a:	63 1b       	sub	r22, r19
    667c:	71 09       	sbc	r23, r1
    667e:	69 0f       	add	r22, r25
    6680:	71 1d       	adc	r23, r1
    6682:	64 17       	cp	r22, r20
    6684:	75 07       	cpc	r23, r21
    6686:	0c f0       	brlt	.+2      	; 0x668a <midiKeyPress_Process+0x20e>
    6688:	33 c1       	rjmp	.+614    	; 0x68f0 <midiKeyPress_Process+0x474>
    668a:	90 91 0c 09 	lds	r25, 0x090C	; 0x80090c <manualMap+0x29>
    668e:	29 17       	cp	r18, r25
    6690:	68 f0       	brcs	.+26     	; 0x66ac <midiKeyPress_Process+0x230>
    6692:	30 91 0a 09 	lds	r19, 0x090A	; 0x80090a <manualMap+0x27>
    6696:	60 91 0b 09 	lds	r22, 0x090B	; 0x80090b <manualMap+0x28>
    669a:	70 e0       	ldi	r23, 0x00	; 0
    669c:	63 1b       	sub	r22, r19
    669e:	71 09       	sbc	r23, r1
    66a0:	69 0f       	add	r22, r25
    66a2:	71 1d       	adc	r23, r1
    66a4:	64 17       	cp	r22, r20
    66a6:	75 07       	cpc	r23, r21
    66a8:	0c f0       	brlt	.+2      	; 0x66ac <midiKeyPress_Process+0x230>
    66aa:	22 c1       	rjmp	.+580    	; 0x68f0 <midiKeyPress_Process+0x474>
    66ac:	90 91 0f 09 	lds	r25, 0x090F	; 0x80090f <manualMap+0x2c>
    66b0:	29 17       	cp	r18, r25
    66b2:	68 f0       	brcs	.+26     	; 0x66ce <midiKeyPress_Process+0x252>
    66b4:	30 91 0d 09 	lds	r19, 0x090D	; 0x80090d <manualMap+0x2a>
    66b8:	60 91 0e 09 	lds	r22, 0x090E	; 0x80090e <manualMap+0x2b>
    66bc:	70 e0       	ldi	r23, 0x00	; 0
    66be:	63 1b       	sub	r22, r19
    66c0:	71 09       	sbc	r23, r1
    66c2:	69 0f       	add	r22, r25
    66c4:	71 1d       	adc	r23, r1
    66c6:	64 17       	cp	r22, r20
    66c8:	75 07       	cpc	r23, r21
    66ca:	0c f0       	brlt	.+2      	; 0x66ce <midiKeyPress_Process+0x252>
    66cc:	11 c1       	rjmp	.+546    	; 0x68f0 <midiKeyPress_Process+0x474>
    66ce:	90 91 12 09 	lds	r25, 0x0912	; 0x800912 <manualMap+0x2f>
    66d2:	29 17       	cp	r18, r25
    66d4:	68 f0       	brcs	.+26     	; 0x66f0 <midiKeyPress_Process+0x274>
    66d6:	30 91 10 09 	lds	r19, 0x0910	; 0x800910 <manualMap+0x2d>
    66da:	60 91 11 09 	lds	r22, 0x0911	; 0x800911 <manualMap+0x2e>
    66de:	70 e0       	ldi	r23, 0x00	; 0
    66e0:	63 1b       	sub	r22, r19
    66e2:	71 09       	sbc	r23, r1
    66e4:	69 0f       	add	r22, r25
    66e6:	71 1d       	adc	r23, r1
    66e8:	64 17       	cp	r22, r20
    66ea:	75 07       	cpc	r23, r21
    66ec:	0c f0       	brlt	.+2      	; 0x66f0 <midiKeyPress_Process+0x274>
    66ee:	00 c1       	rjmp	.+512    	; 0x68f0 <midiKeyPress_Process+0x474>
    66f0:	80 91 15 09 	lds	r24, 0x0915	; 0x800915 <programMap+0x2>
    66f4:	28 17       	cp	r18, r24
    66f6:	68 f0       	brcs	.+26     	; 0x6712 <midiKeyPress_Process+0x296>
    66f8:	90 91 13 09 	lds	r25, 0x0913	; 0x800913 <programMap>
    66fc:	60 91 14 09 	lds	r22, 0x0914	; 0x800914 <programMap+0x1>
    6700:	70 e0       	ldi	r23, 0x00	; 0
    6702:	69 1b       	sub	r22, r25
    6704:	71 09       	sbc	r23, r1
    6706:	68 0f       	add	r22, r24
    6708:	71 1d       	adc	r23, r1
    670a:	64 17       	cp	r22, r20
    670c:	75 07       	cpc	r23, r21
    670e:	0c f0       	brlt	.+2      	; 0x6712 <midiKeyPress_Process+0x296>
    6710:	f4 c0       	rjmp	.+488    	; 0x68fa <midiKeyPress_Process+0x47e>
    6712:	80 91 18 09 	lds	r24, 0x0918	; 0x800918 <programMap+0x5>
    6716:	28 17       	cp	r18, r24
    6718:	68 f0       	brcs	.+26     	; 0x6734 <midiKeyPress_Process+0x2b8>
    671a:	90 91 16 09 	lds	r25, 0x0916	; 0x800916 <programMap+0x3>
    671e:	60 91 17 09 	lds	r22, 0x0917	; 0x800917 <programMap+0x4>
    6722:	70 e0       	ldi	r23, 0x00	; 0
    6724:	69 1b       	sub	r22, r25
    6726:	71 09       	sbc	r23, r1
    6728:	68 0f       	add	r22, r24
    672a:	71 1d       	adc	r23, r1
    672c:	64 17       	cp	r22, r20
    672e:	75 07       	cpc	r23, r21
    6730:	0c f0       	brlt	.+2      	; 0x6734 <midiKeyPress_Process+0x2b8>
    6732:	e3 c0       	rjmp	.+454    	; 0x68fa <midiKeyPress_Process+0x47e>
    6734:	80 91 1b 09 	lds	r24, 0x091B	; 0x80091b <programMap+0x8>
    6738:	28 17       	cp	r18, r24
    673a:	68 f0       	brcs	.+26     	; 0x6756 <midiKeyPress_Process+0x2da>
    673c:	90 91 19 09 	lds	r25, 0x0919	; 0x800919 <programMap+0x6>
    6740:	60 91 1a 09 	lds	r22, 0x091A	; 0x80091a <programMap+0x7>
    6744:	70 e0       	ldi	r23, 0x00	; 0
    6746:	69 1b       	sub	r22, r25
    6748:	71 09       	sbc	r23, r1
    674a:	68 0f       	add	r22, r24
    674c:	71 1d       	adc	r23, r1
    674e:	64 17       	cp	r22, r20
    6750:	75 07       	cpc	r23, r21
    6752:	0c f0       	brlt	.+2      	; 0x6756 <midiKeyPress_Process+0x2da>
    6754:	d2 c0       	rjmp	.+420    	; 0x68fa <midiKeyPress_Process+0x47e>
    6756:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <programMap+0xb>
    675a:	28 17       	cp	r18, r24
    675c:	68 f0       	brcs	.+26     	; 0x6778 <midiKeyPress_Process+0x2fc>
    675e:	90 91 1c 09 	lds	r25, 0x091C	; 0x80091c <programMap+0x9>
    6762:	60 91 1d 09 	lds	r22, 0x091D	; 0x80091d <programMap+0xa>
    6766:	70 e0       	ldi	r23, 0x00	; 0
    6768:	69 1b       	sub	r22, r25
    676a:	71 09       	sbc	r23, r1
    676c:	68 0f       	add	r22, r24
    676e:	71 1d       	adc	r23, r1
    6770:	64 17       	cp	r22, r20
    6772:	75 07       	cpc	r23, r21
    6774:	0c f0       	brlt	.+2      	; 0x6778 <midiKeyPress_Process+0x2fc>
    6776:	c1 c0       	rjmp	.+386    	; 0x68fa <midiKeyPress_Process+0x47e>
			pRange++;
		}
		manual++;
	} while (manual <= MANUAL_COUNT);
	result.manual = MANUAL_NONE;
	log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
    6778:	61 e0       	ldi	r22, 0x01	; 1
    677a:	82 e0       	ldi	r24, 0x02	; 2
    677c:	0e 94 19 18 	call	0x3032	; 0x3032 <log_putWarning>
    6780:	9a ce       	rjmp	.-716    	; 0x64b6 <midiKeyPress_Process+0x3a>
				} // if
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6782:	0f 90       	pop	r0
    6784:	0f 90       	pop	r0
    6786:	0f 90       	pop	r0
    6788:	df 91       	pop	r29
    678a:	cf 91       	pop	r28
    678c:	1f 91       	pop	r17
    678e:	0f 91       	pop	r16
    6790:	ff 90       	pop	r15
    6792:	ef 90       	pop	r14
    6794:	df 90       	pop	r13
    6796:	cf 90       	pop	r12
    6798:	bf 90       	pop	r11
    679a:	af 90       	pop	r10
    679c:	08 95       	ret
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    679e:	30 91 e3 08 	lds	r19, 0x08E3	; 0x8008e3 <manualMap>
    67a2:	42 2f       	mov	r20, r18
    67a4:	50 e0       	ldi	r21, 0x00	; 0
    67a6:	60 91 e4 08 	lds	r22, 0x08E4	; 0x8008e4 <manualMap+0x1>
    67aa:	70 e0       	ldi	r23, 0x00	; 0
    67ac:	63 1b       	sub	r22, r19
    67ae:	71 09       	sbc	r23, r1
    67b0:	69 0f       	add	r22, r25
    67b2:	71 1d       	adc	r23, r1
    67b4:	64 17       	cp	r22, r20
    67b6:	75 07       	cpc	r23, r21
    67b8:	0c f4       	brge	.+2      	; 0x67bc <midiKeyPress_Process+0x340>
    67ba:	9b ce       	rjmp	.-714    	; 0x64f2 <midiKeyPress_Process+0x76>
    67bc:	40 e0       	ldi	r20, 0x00	; 0
    67be:	50 e0       	ldi	r21, 0x00	; 0
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    67c0:	a1 2c       	mov	r10, r1
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    67c2:	23 0f       	add	r18, r19
    67c4:	29 1b       	sub	r18, r25
    67c6:	2a 83       	std	Y+2, r18	; 0x02
				// LSB==1 -> Module has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit));
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					if (command == MESSAGE_PIPE_ON_HI) {
    67c8:	99 81       	ldd	r25, Y+1	; 0x01
    67ca:	90 32       	cpi	r25, 0x20	; 32
    67cc:	09 f4       	brne	.+2      	; 0x67d0 <midiKeyPress_Process+0x354>
    67ce:	78 c0       	rjmp	.+240    	; 0x68c0 <midiKeyPress_Process+0x444>
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
	ChannelNote_t result;
	if (manual < MANUAL_COUNT) {
		if (midiOutMap[manual].channel != MIDI_CHANNEL_NONE) {
    67d0:	fa 01       	movw	r30, r20
    67d2:	e1 52       	subi	r30, 0x21	; 33
    67d4:	f7 4f       	sbci	r31, 0xF7	; 247
    67d6:	c0 80       	ld	r12, Z
    67d8:	2f ef       	ldi	r18, 0xFF	; 255
    67da:	c2 12       	cpse	r12, r18
    67dc:	45 c0       	rjmp	.+138    	; 0x6868 <midiKeyPress_Process+0x3ec>
					}
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
					if (chanNote.channel != MIDI_CHANNEL_NONE){
						// note on/off can be sent
						serial1MIDISend((command == MESSAGE_PIPE_ON_HI ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.channel);
    67de:	80 e8       	ldi	r24, 0x80	; 128
    67e0:	8c 29       	or	r24, r12
    67e2:	c6 d2       	rcall	.+1420   	; 0x6d70 <serial1MIDISend>
						serial1MIDISend(chanNote.note);
    67e4:	8b 2d       	mov	r24, r11
    67e6:	c4 d2       	rcall	.+1416   	; 0x6d70 <serial1MIDISend>
						serial1MIDISend(MIDI_DEFAULT_VELOCITY);
    67e8:	80 e4       	ldi	r24, 0x40	; 64
    67ea:	c2 d2       	rcall	.+1412   	; 0x6d70 <serial1MIDISend>
    67ec:	a1 10       	cpse	r10, r1
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
					if (manualNote.manual == MANUAL_III){
    67ee:	5c c1       	rjmp	.+696    	; 0x6aa8 <midiKeyPress_Process+0x62c>
    67f0:	80 91 dd 07 	lds	r24, 0x07DD	; 0x8007dd <midiCoupler_2from3>
						if (midiCoupler_2from3 == TRUE){
    67f4:	8f 3f       	cpi	r24, 0xFF	; 255
    67f6:	09 f4       	brne	.+2      	; 0x67fa <midiKeyPress_Process+0x37e>
    67f8:	e5 c0       	rjmp	.+458    	; 0x69c4 <midiKeyPress_Process+0x548>
    67fa:	80 91 17 0b 	lds	r24, 0x0B17	; 0x800b17 <midiCoupler_1from3>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
						}
						if (midiCoupler_1from3 == TRUE){
    67fe:	8f 3f       	cpi	r24, 0xFF	; 255
    6800:	09 f4       	brne	.+2      	; 0x6804 <midiKeyPress_Process+0x388>
    6802:	89 c0       	rjmp	.+274    	; 0x6916 <midiKeyPress_Process+0x49a>
    6804:	80 91 15 0b 	lds	r24, 0x0B15	; 0x800b15 <midiCoupler_Pfrom3>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
						}
						if (midiCoupler_Pfrom3 == TRUE){
    6808:	8f 3f       	cpi	r24, 0xFF	; 255
    680a:	09 f0       	breq	.+2      	; 0x680e <midiKeyPress_Process+0x392>
    680c:	54 ce       	rjmp	.-856    	; 0x64b6 <midiKeyPress_Process+0x3a>
    680e:	80 91 07 09 	lds	r24, 0x0907	; 0x800907 <manualMap+0x24>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6812:	3a 81       	ldd	r19, Y+2	; 0x02
    6814:	38 17       	cp	r19, r24
    6816:	50 f1       	brcs	.+84     	; 0x686c <midiKeyPress_Process+0x3f0>
    6818:	90 91 08 09 	lds	r25, 0x0908	; 0x800908 <manualMap+0x25>
    681c:	93 17       	cp	r25, r19
    681e:	30 f1       	brcs	.+76     	; 0x686c <midiKeyPress_Process+0x3f0>
    6820:	e7 e0       	ldi	r30, 0x07	; 7
    6822:	f9 e0       	ldi	r31, 0x09	; 9
    6824:	92 81       	ldd	r25, Z+2	; 0x02
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6826:	39 0f       	add	r19, r25
    6828:	38 1b       	sub	r19, r24
    682a:	83 2f       	mov	r24, r19
    682c:	e8 2f       	mov	r30, r24
void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    682e:	ef 71       	andi	r30, 0x1F	; 31
    6830:	82 95       	swap	r24
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    6832:	86 95       	lsr	r24
    6834:	87 70       	andi	r24, 0x07	; 7
    6836:	99 81       	ldd	r25, Y+1	; 0x01
		if (onOff == NOTE_OFF) {
    6838:	f0 e0       	ldi	r31, 0x00	; 0
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    683a:	ee 0f       	add	r30, r30
    683c:	ff 1f       	adc	r31, r31
    683e:	ee 0f       	add	r30, r30
    6840:	ff 1f       	adc	r31, r31
    6842:	ee 0f       	add	r30, r30
    6844:	ff 1f       	adc	r31, r31
    6846:	e5 5b       	subi	r30, 0xB5	; 181
    6848:	fd 4f       	sbci	r31, 0xFD	; 253
    684a:	98 01       	movw	r18, r16
    684c:	02 c0       	rjmp	.+4      	; 0x6852 <midiKeyPress_Process+0x3d6>
    684e:	22 0f       	add	r18, r18
    6850:	33 1f       	adc	r19, r19
    6852:	8a 95       	dec	r24
    6854:	e2 f7       	brpl	.-8      	; 0x684e <midiKeyPress_Process+0x3d2>
    6856:	90 32       	cpi	r25, 0x20	; 32
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
    6858:	09 f0       	breq	.+2      	; 0x685c <midiKeyPress_Process+0x3e0>
    685a:	11 c1       	rjmp	.+546    	; 0x6a7e <midiKeyPress_Process+0x602>
    685c:	92 2f       	mov	r25, r18
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    685e:	90 95       	com	r25
    6860:	81 81       	ldd	r24, Z+1	; 0x01
    6862:	89 23       	and	r24, r25
    6864:	81 83       	std	Z+1, r24	; 0x01
    6866:	27 ce       	rjmp	.-946    	; 0x64b6 <midiKeyPress_Process+0x3a>
    6868:	ba 80       	ldd	r11, Y+2	; 0x02
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
	ChannelNote_t result;
	if (manual < MANUAL_COUNT) {
		if (midiOutMap[manual].channel != MIDI_CHANNEL_NONE) {
    686a:	b9 cf       	rjmp	.-142    	; 0x67de <midiKeyPress_Process+0x362>
    686c:	80 91 0a 09 	lds	r24, 0x090A	; 0x80090a <manualMap+0x27>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6870:	9a 81       	ldd	r25, Y+2	; 0x02
    6872:	98 17       	cp	r25, r24
    6874:	48 f0       	brcs	.+18     	; 0x6888 <midiKeyPress_Process+0x40c>
    6876:	29 2f       	mov	r18, r25
    6878:	90 91 0b 09 	lds	r25, 0x090B	; 0x80090b <manualMap+0x28>
    687c:	92 17       	cp	r25, r18
    687e:	20 f0       	brcs	.+8      	; 0x6888 <midiKeyPress_Process+0x40c>
    6880:	ea e0       	ldi	r30, 0x0A	; 10
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6882:	f9 e0       	ldi	r31, 0x09	; 9
    6884:	32 2f       	mov	r19, r18
    6886:	ce cf       	rjmp	.-100    	; 0x6824 <midiKeyPress_Process+0x3a8>
    6888:	80 91 0d 09 	lds	r24, 0x090D	; 0x80090d <manualMap+0x2a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    688c:	3a 81       	ldd	r19, Y+2	; 0x02
    688e:	38 17       	cp	r19, r24
    6890:	38 f0       	brcs	.+14     	; 0x68a0 <midiKeyPress_Process+0x424>
    6892:	90 91 0e 09 	lds	r25, 0x090E	; 0x80090e <manualMap+0x2b>
    6896:	93 17       	cp	r25, r19
    6898:	18 f0       	brcs	.+6      	; 0x68a0 <midiKeyPress_Process+0x424>
    689a:	ed e0       	ldi	r30, 0x0D	; 13
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    689c:	f9 e0       	ldi	r31, 0x09	; 9
    689e:	c2 cf       	rjmp	.-124    	; 0x6824 <midiKeyPress_Process+0x3a8>
    68a0:	80 91 10 09 	lds	r24, 0x0910	; 0x800910 <manualMap+0x2d>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    68a4:	9a 81       	ldd	r25, Y+2	; 0x02
    68a6:	98 17       	cp	r25, r24
    68a8:	08 f4       	brcc	.+2      	; 0x68ac <midiKeyPress_Process+0x430>
    68aa:	05 ce       	rjmp	.-1014   	; 0x64b6 <midiKeyPress_Process+0x3a>
    68ac:	29 2f       	mov	r18, r25
    68ae:	90 91 11 09 	lds	r25, 0x0911	; 0x800911 <manualMap+0x2e>
    68b2:	92 17       	cp	r25, r18
    68b4:	08 f4       	brcc	.+2      	; 0x68b8 <midiKeyPress_Process+0x43c>
    68b6:	ff cd       	rjmp	.-1026   	; 0x64b6 <midiKeyPress_Process+0x3a>
    68b8:	e0 e1       	ldi	r30, 0x10	; 16
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    68ba:	f9 e0       	ldi	r31, 0x09	; 9
    68bc:	32 2f       	mov	r19, r18
    68be:	b2 cf       	rjmp	.-156    	; 0x6824 <midiKeyPress_Process+0x3a8>
    68c0:	a0 92 03 02 	sts	0x0203, r10	; 0x800203 <midiLastOutManual>
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					if (command == MESSAGE_PIPE_ON_HI) {
						// note on -> save this info for status display
						midiLastOutManual = manualNote.manual;
    68c4:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <midiLastOutNote>
						midiLastOutNote = manualNote.note;
    68c8:	fa 01       	movw	r30, r20
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
	ChannelNote_t result;
	if (manual < MANUAL_COUNT) {
		if (midiOutMap[manual].channel != MIDI_CHANNEL_NONE) {
    68ca:	e1 52       	subi	r30, 0x21	; 33
    68cc:	f7 4f       	sbci	r31, 0xF7	; 247
    68ce:	80 81       	ld	r24, Z
    68d0:	8f 3f       	cpi	r24, 0xFF	; 255
    68d2:	11 f0       	breq	.+4      	; 0x68d8 <midiKeyPress_Process+0x45c>
    68d4:	b2 2e       	mov	r11, r18
    68d6:	c8 2e       	mov	r12, r24
    68d8:	80 e9       	ldi	r24, 0x90	; 144
					}
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
					if (chanNote.channel != MIDI_CHANNEL_NONE){
						// note on/off can be sent
						serial1MIDISend((command == MESSAGE_PIPE_ON_HI ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.channel);
    68da:	82 cf       	rjmp	.-252    	; 0x67e0 <midiKeyPress_Process+0x364>
    68dc:	41 e0       	ldi	r20, 0x01	; 1
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    68de:	50 e0       	ldi	r21, 0x00	; 0
    68e0:	aa 24       	eor	r10, r10
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    68e2:	a3 94       	inc	r10
    68e4:	6e cf       	rjmp	.-292    	; 0x67c2 <midiKeyPress_Process+0x346>
    68e6:	42 e0       	ldi	r20, 0x02	; 2
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    68e8:	50 e0       	ldi	r21, 0x00	; 0
    68ea:	62 e0       	ldi	r22, 0x02	; 2
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    68ec:	a6 2e       	mov	r10, r22
    68ee:	69 cf       	rjmp	.-302    	; 0x67c2 <midiKeyPress_Process+0x346>
    68f0:	43 e0       	ldi	r20, 0x03	; 3
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    68f2:	50 e0       	ldi	r21, 0x00	; 0
    68f4:	83 e0       	ldi	r24, 0x03	; 3
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    68f6:	a8 2e       	mov	r10, r24
    68f8:	64 cf       	rjmp	.-312    	; 0x67c2 <midiKeyPress_Process+0x346>
    68fa:	29 0f       	add	r18, r25
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    68fc:	28 1b       	sub	r18, r24
    68fe:	39 81       	ldd	r19, Y+1	; 0x01
				// LSB==1 -> Module has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit));
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					if (command == MESSAGE_PIPE_ON_HI) {
    6900:	30 32       	cpi	r19, 0x20	; 32
    6902:	09 f4       	brne	.+2      	; 0x6906 <midiKeyPress_Process+0x48a>
    6904:	c9 c1       	rjmp	.+914    	; 0x6c98 <midiKeyPress_Process+0x81c>
					}
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
					if (chanNote.channel != MIDI_CHANNEL_NONE){
						// note on/off can be sent
						serial1MIDISend((command == MESSAGE_PIPE_ON_HI ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.channel);
    6906:	80 e8       	ldi	r24, 0x80	; 128
    6908:	8c 29       	or	r24, r12
    690a:	32 d2       	rcall	.+1124   	; 0x6d70 <serial1MIDISend>
						serial1MIDISend(chanNote.note);
    690c:	8b 2d       	mov	r24, r11
    690e:	30 d2       	rcall	.+1120   	; 0x6d70 <serial1MIDISend>
    6910:	80 e4       	ldi	r24, 0x40	; 64
						serial1MIDISend(MIDI_DEFAULT_VELOCITY);
    6912:	2e d2       	rcall	.+1116   	; 0x6d70 <serial1MIDISend>
    6914:	d0 cd       	rjmp	.-1120   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6916:	80 91 fb 08 	lds	r24, 0x08FB	; 0x8008fb <manualMap+0x18>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    691a:	3a 81       	ldd	r19, Y+2	; 0x02
    691c:	38 17       	cp	r19, r24
    691e:	40 f1       	brcs	.+80     	; 0x6970 <midiKeyPress_Process+0x4f4>
    6920:	90 91 fc 08 	lds	r25, 0x08FC	; 0x8008fc <manualMap+0x19>
    6924:	93 17       	cp	r25, r19
    6926:	20 f1       	brcs	.+72     	; 0x6970 <midiKeyPress_Process+0x4f4>
    6928:	eb ef       	ldi	r30, 0xFB	; 251
    692a:	f8 e0       	ldi	r31, 0x08	; 8
    692c:	92 81       	ldd	r25, Z+2	; 0x02
    692e:	93 0f       	add	r25, r19
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6930:	98 1b       	sub	r25, r24
    6932:	89 2f       	mov	r24, r25
    6934:	e9 2f       	mov	r30, r25
    6936:	ef 71       	andi	r30, 0x1F	; 31
void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6938:	82 95       	swap	r24
    693a:	86 95       	lsr	r24
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    693c:	87 70       	andi	r24, 0x07	; 7
    693e:	99 81       	ldd	r25, Y+1	; 0x01
    6940:	f0 e0       	ldi	r31, 0x00	; 0
		if (onOff == NOTE_OFF) {
    6942:	ee 0f       	add	r30, r30
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    6944:	ff 1f       	adc	r31, r31
    6946:	ee 0f       	add	r30, r30
    6948:	ff 1f       	adc	r31, r31
    694a:	ee 0f       	add	r30, r30
    694c:	ff 1f       	adc	r31, r31
    694e:	e5 5b       	subi	r30, 0xB5	; 181
    6950:	fd 4f       	sbci	r31, 0xFD	; 253
    6952:	98 01       	movw	r18, r16
    6954:	02 c0       	rjmp	.+4      	; 0x695a <midiKeyPress_Process+0x4de>
    6956:	22 0f       	add	r18, r18
    6958:	33 1f       	adc	r19, r19
    695a:	8a 95       	dec	r24
    695c:	e2 f7       	brpl	.-8      	; 0x6956 <midiKeyPress_Process+0x4da>
    695e:	90 32       	cpi	r25, 0x20	; 32
    6960:	09 f0       	breq	.+2      	; 0x6964 <midiKeyPress_Process+0x4e8>
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
    6962:	92 c0       	rjmp	.+292    	; 0x6a88 <midiKeyPress_Process+0x60c>
    6964:	92 2f       	mov	r25, r18
    6966:	90 95       	com	r25
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    6968:	81 81       	ldd	r24, Z+1	; 0x01
    696a:	89 23       	and	r24, r25
    696c:	81 83       	std	Z+1, r24	; 0x01
    696e:	4a cf       	rjmp	.-364    	; 0x6804 <midiKeyPress_Process+0x388>
    6970:	80 91 fe 08 	lds	r24, 0x08FE	; 0x8008fe <manualMap+0x1b>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6974:	9a 81       	ldd	r25, Y+2	; 0x02
    6976:	98 17       	cp	r25, r24
    6978:	48 f0       	brcs	.+18     	; 0x698c <midiKeyPress_Process+0x510>
    697a:	29 2f       	mov	r18, r25
    697c:	90 91 ff 08 	lds	r25, 0x08FF	; 0x8008ff <manualMap+0x1c>
    6980:	92 17       	cp	r25, r18
    6982:	20 f0       	brcs	.+8      	; 0x698c <midiKeyPress_Process+0x510>
    6984:	ee ef       	ldi	r30, 0xFE	; 254
    6986:	f8 e0       	ldi	r31, 0x08	; 8
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6988:	32 2f       	mov	r19, r18
    698a:	d0 cf       	rjmp	.-96     	; 0x692c <midiKeyPress_Process+0x4b0>
    698c:	80 91 01 09 	lds	r24, 0x0901	; 0x800901 <manualMap+0x1e>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6990:	3a 81       	ldd	r19, Y+2	; 0x02
    6992:	38 17       	cp	r19, r24
    6994:	38 f0       	brcs	.+14     	; 0x69a4 <midiKeyPress_Process+0x528>
    6996:	90 91 02 09 	lds	r25, 0x0902	; 0x800902 <manualMap+0x1f>
    699a:	93 17       	cp	r25, r19
    699c:	18 f0       	brcs	.+6      	; 0x69a4 <midiKeyPress_Process+0x528>
    699e:	e1 e0       	ldi	r30, 0x01	; 1
    69a0:	f9 e0       	ldi	r31, 0x09	; 9
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    69a2:	c4 cf       	rjmp	.-120    	; 0x692c <midiKeyPress_Process+0x4b0>
    69a4:	80 91 04 09 	lds	r24, 0x0904	; 0x800904 <manualMap+0x21>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    69a8:	9a 81       	ldd	r25, Y+2	; 0x02
    69aa:	98 17       	cp	r25, r24
    69ac:	08 f4       	brcc	.+2      	; 0x69b0 <midiKeyPress_Process+0x534>
    69ae:	2a cf       	rjmp	.-428    	; 0x6804 <midiKeyPress_Process+0x388>
    69b0:	29 2f       	mov	r18, r25
    69b2:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <manualMap+0x22>
    69b6:	92 17       	cp	r25, r18
    69b8:	08 f4       	brcc	.+2      	; 0x69bc <midiKeyPress_Process+0x540>
    69ba:	24 cf       	rjmp	.-440    	; 0x6804 <midiKeyPress_Process+0x388>
    69bc:	e4 e0       	ldi	r30, 0x04	; 4
    69be:	f9 e0       	ldi	r31, 0x09	; 9
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    69c0:	32 2f       	mov	r19, r18
    69c2:	b4 cf       	rjmp	.-152    	; 0x692c <midiKeyPress_Process+0x4b0>
    69c4:	80 91 ef 08 	lds	r24, 0x08EF	; 0x8008ef <manualMap+0xc>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    69c8:	9a 81       	ldd	r25, Y+2	; 0x02
    69ca:	98 17       	cp	r25, r24
    69cc:	48 f1       	brcs	.+82     	; 0x6a20 <midiKeyPress_Process+0x5a4>
    69ce:	29 2f       	mov	r18, r25
    69d0:	90 91 f0 08 	lds	r25, 0x08F0	; 0x8008f0 <manualMap+0xd>
    69d4:	92 17       	cp	r25, r18
    69d6:	20 f1       	brcs	.+72     	; 0x6a20 <midiKeyPress_Process+0x5a4>
    69d8:	ef ee       	ldi	r30, 0xEF	; 239
    69da:	f8 e0       	ldi	r31, 0x08	; 8
    69dc:	92 81       	ldd	r25, Z+2	; 0x02
    69de:	92 0f       	add	r25, r18
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    69e0:	98 1b       	sub	r25, r24
    69e2:	89 2f       	mov	r24, r25
    69e4:	e9 2f       	mov	r30, r25
    69e6:	ef 71       	andi	r30, 0x1F	; 31
void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    69e8:	82 95       	swap	r24
    69ea:	86 95       	lsr	r24
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    69ec:	87 70       	andi	r24, 0x07	; 7
    69ee:	39 81       	ldd	r19, Y+1	; 0x01
    69f0:	f0 e0       	ldi	r31, 0x00	; 0
		if (onOff == NOTE_OFF) {
    69f2:	ee 0f       	add	r30, r30
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    69f4:	ff 1f       	adc	r31, r31
    69f6:	ee 0f       	add	r30, r30
    69f8:	ff 1f       	adc	r31, r31
    69fa:	ee 0f       	add	r30, r30
    69fc:	ff 1f       	adc	r31, r31
    69fe:	e5 5b       	subi	r30, 0xB5	; 181
    6a00:	fd 4f       	sbci	r31, 0xFD	; 253
    6a02:	30 32       	cpi	r19, 0x20	; 32
    6a04:	09 f0       	breq	.+2      	; 0x6a08 <midiKeyPress_Process+0x58c>
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
    6a06:	45 c0       	rjmp	.+138    	; 0x6a92 <midiKeyPress_Process+0x616>
    6a08:	98 01       	movw	r18, r16
    6a0a:	02 c0       	rjmp	.+4      	; 0x6a10 <midiKeyPress_Process+0x594>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    6a0c:	22 0f       	add	r18, r18
    6a0e:	33 1f       	adc	r19, r19
    6a10:	8a 95       	dec	r24
    6a12:	e2 f7       	brpl	.-8      	; 0x6a0c <midiKeyPress_Process+0x590>
    6a14:	92 2f       	mov	r25, r18
    6a16:	90 95       	com	r25
    6a18:	81 81       	ldd	r24, Z+1	; 0x01
    6a1a:	89 23       	and	r24, r25
    6a1c:	81 83       	std	Z+1, r24	; 0x01
    6a1e:	ed ce       	rjmp	.-550    	; 0x67fa <midiKeyPress_Process+0x37e>
    6a20:	80 91 f2 08 	lds	r24, 0x08F2	; 0x8008f2 <manualMap+0xf>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6a24:	3a 81       	ldd	r19, Y+2	; 0x02
    6a26:	38 17       	cp	r19, r24
    6a28:	40 f0       	brcs	.+16     	; 0x6a3a <midiKeyPress_Process+0x5be>
    6a2a:	90 91 f3 08 	lds	r25, 0x08F3	; 0x8008f3 <manualMap+0x10>
    6a2e:	93 17       	cp	r25, r19
    6a30:	20 f0       	brcs	.+8      	; 0x6a3a <midiKeyPress_Process+0x5be>
    6a32:	e2 ef       	ldi	r30, 0xF2	; 242
    6a34:	f8 e0       	ldi	r31, 0x08	; 8
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6a36:	23 2f       	mov	r18, r19
    6a38:	d1 cf       	rjmp	.-94     	; 0x69dc <midiKeyPress_Process+0x560>
    6a3a:	80 91 f5 08 	lds	r24, 0x08F5	; 0x8008f5 <manualMap+0x12>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6a40:	98 17       	cp	r25, r24
    6a42:	40 f0       	brcs	.+16     	; 0x6a54 <midiKeyPress_Process+0x5d8>
    6a44:	29 2f       	mov	r18, r25
    6a46:	90 91 f6 08 	lds	r25, 0x08F6	; 0x8008f6 <manualMap+0x13>
    6a4a:	92 17       	cp	r25, r18
    6a4c:	18 f0       	brcs	.+6      	; 0x6a54 <midiKeyPress_Process+0x5d8>
    6a4e:	e5 ef       	ldi	r30, 0xF5	; 245
    6a50:	f8 e0       	ldi	r31, 0x08	; 8
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6a52:	c4 cf       	rjmp	.-120    	; 0x69dc <midiKeyPress_Process+0x560>
    6a54:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <manualMap+0x15>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6a58:	3a 81       	ldd	r19, Y+2	; 0x02
    6a5a:	38 17       	cp	r19, r24
    6a5c:	08 f4       	brcc	.+2      	; 0x6a60 <midiKeyPress_Process+0x5e4>
    6a5e:	cd ce       	rjmp	.-614    	; 0x67fa <midiKeyPress_Process+0x37e>
    6a60:	90 91 f9 08 	lds	r25, 0x08F9	; 0x8008f9 <manualMap+0x16>
    6a64:	93 17       	cp	r25, r19
    6a66:	08 f4       	brcc	.+2      	; 0x6a6a <midiKeyPress_Process+0x5ee>
    6a68:	c8 ce       	rjmp	.-624    	; 0x67fa <midiKeyPress_Process+0x37e>
    6a6a:	e8 ef       	ldi	r30, 0xF8	; 248
    6a6c:	f8 e0       	ldi	r31, 0x08	; 8
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6a6e:	23 2f       	mov	r18, r19
    6a70:	b5 cf       	rjmp	.-150    	; 0x69dc <midiKeyPress_Process+0x560>
    6a72:	98 01       	movw	r18, r16
    6a74:	02 c0       	rjmp	.+4      	; 0x6a7a <midiKeyPress_Process+0x5fe>
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    6a76:	22 0f       	add	r18, r18
    6a78:	33 1f       	adc	r19, r19
    6a7a:	8a 95       	dec	r24
    6a7c:	e2 f7       	brpl	.-8      	; 0x6a76 <midiKeyPress_Process+0x5fa>
    6a7e:	c9 01       	movw	r24, r18
    6a80:	91 81       	ldd	r25, Z+1	; 0x01
    6a82:	89 2b       	or	r24, r25
    6a84:	81 83       	std	Z+1, r24	; 0x01
    6a86:	17 cd       	rjmp	.-1490   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6a88:	c9 01       	movw	r24, r18
    6a8a:	91 81       	ldd	r25, Z+1	; 0x01
    6a8c:	89 2b       	or	r24, r25
    6a8e:	81 83       	std	Z+1, r24	; 0x01
    6a90:	b9 ce       	rjmp	.-654    	; 0x6804 <midiKeyPress_Process+0x388>
    6a92:	98 01       	movw	r18, r16
    6a94:	02 c0       	rjmp	.+4      	; 0x6a9a <midiKeyPress_Process+0x61e>
    6a96:	22 0f       	add	r18, r18
    6a98:	33 1f       	adc	r19, r19
    6a9a:	8a 95       	dec	r24
    6a9c:	e2 f7       	brpl	.-8      	; 0x6a96 <midiKeyPress_Process+0x61a>
    6a9e:	c9 01       	movw	r24, r18
    6aa0:	91 81       	ldd	r25, Z+1	; 0x01
    6aa2:	89 2b       	or	r24, r25
    6aa4:	81 83       	std	Z+1, r24	; 0x01
    6aa6:	a9 ce       	rjmp	.-686    	; 0x67fa <midiKeyPress_Process+0x37e>
    6aa8:	31 e0       	ldi	r19, 0x01	; 1
    6aaa:	a3 16       	cp	r10, r19
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
						}
						if (midiCoupler_Pfrom3 == TRUE){
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6aac:	09 f4       	brne	.+2      	; 0x6ab0 <midiKeyPress_Process+0x634>
    6aae:	52 c0       	rjmp	.+164    	; 0x6b54 <midiKeyPress_Process+0x6d8>
    6ab0:	32 e0       	ldi	r19, 0x02	; 2
    6ab2:	a3 12       	cpse	r10, r19
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
						}
						if (midiCoupler_Pfrom2 == TRUE){
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6ab4:	00 cd       	rjmp	.-1536   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6ab6:	80 91 16 0b 	lds	r24, 0x0B16	; 0x800b16 <midiCoupler_Pfrom1>
						if (midiCoupler_Pfrom1 == TRUE){
    6aba:	8f 3f       	cpi	r24, 0xFF	; 255
    6abc:	09 f0       	breq	.+2      	; 0x6ac0 <midiKeyPress_Process+0x644>
    6abe:	fb cc       	rjmp	.-1546   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6ac0:	90 91 07 09 	lds	r25, 0x0907	; 0x800907 <manualMap+0x24>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    6ac6:	89 17       	cp	r24, r25
    6ac8:	30 f0       	brcs	.+12     	; 0x6ad6 <midiKeyPress_Process+0x65a>
    6aca:	28 2f       	mov	r18, r24
    6acc:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <manualMap+0x25>
    6ad0:	82 17       	cp	r24, r18
    6ad2:	08 f0       	brcs	.+2      	; 0x6ad6 <midiKeyPress_Process+0x65a>
    6ad4:	e8 c0       	rjmp	.+464    	; 0x6ca6 <midiKeyPress_Process+0x82a>
    6ad6:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <manualMap+0x27>
    6ada:	3a 81       	ldd	r19, Y+2	; 0x02
    6adc:	39 17       	cp	r19, r25
    6ade:	28 f0       	brcs	.+10     	; 0x6aea <midiKeyPress_Process+0x66e>
    6ae0:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <manualMap+0x28>
    6ae4:	83 17       	cp	r24, r19
    6ae6:	08 f0       	brcs	.+2      	; 0x6aea <midiKeyPress_Process+0x66e>
    6ae8:	d3 c0       	rjmp	.+422    	; 0x6c90 <midiKeyPress_Process+0x814>
    6aea:	90 91 0d 09 	lds	r25, 0x090D	; 0x80090d <manualMap+0x2a>
    6aee:	8a 81       	ldd	r24, Y+2	; 0x02
    6af0:	89 17       	cp	r24, r25
    6af2:	30 f0       	brcs	.+12     	; 0x6b00 <midiKeyPress_Process+0x684>
    6af4:	28 2f       	mov	r18, r24
    6af6:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <manualMap+0x2b>
    6afa:	82 17       	cp	r24, r18
    6afc:	08 f0       	brcs	.+2      	; 0x6b00 <midiKeyPress_Process+0x684>
    6afe:	dd c0       	rjmp	.+442    	; 0x6cba <midiKeyPress_Process+0x83e>
    6b00:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <manualMap+0x2d>
    6b04:	3a 81       	ldd	r19, Y+2	; 0x02
    6b06:	39 17       	cp	r19, r25
    6b08:	08 f4       	brcc	.+2      	; 0x6b0c <midiKeyPress_Process+0x690>
    6b0a:	d5 cc       	rjmp	.-1622   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6b0c:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <manualMap+0x2e>
    6b10:	83 17       	cp	r24, r19
    6b12:	08 f4       	brcc	.+2      	; 0x6b16 <midiKeyPress_Process+0x69a>
    6b14:	d0 cc       	rjmp	.-1632   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6b16:	e0 e1       	ldi	r30, 0x10	; 16
    6b18:	f9 e0       	ldi	r31, 0x09	; 9
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6b1a:	23 2f       	mov	r18, r19
    6b1c:	82 81       	ldd	r24, Z+2	; 0x02
    6b1e:	82 0f       	add	r24, r18
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6b20:	89 1b       	sub	r24, r25
    6b22:	e8 2f       	mov	r30, r24
    6b24:	ef 71       	andi	r30, 0x1F	; 31
void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6b26:	82 95       	swap	r24
    6b28:	86 95       	lsr	r24
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    6b2a:	87 70       	andi	r24, 0x07	; 7
    6b2c:	39 81       	ldd	r19, Y+1	; 0x01
    6b2e:	f0 e0       	ldi	r31, 0x00	; 0
		if (onOff == NOTE_OFF) {
    6b30:	ee 0f       	add	r30, r30
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    6b32:	ff 1f       	adc	r31, r31
    6b34:	ee 0f       	add	r30, r30
    6b36:	ff 1f       	adc	r31, r31
    6b38:	ee 0f       	add	r30, r30
    6b3a:	ff 1f       	adc	r31, r31
    6b3c:	e5 5b       	subi	r30, 0xB5	; 181
    6b3e:	fd 4f       	sbci	r31, 0xFD	; 253
    6b40:	30 32       	cpi	r19, 0x20	; 32
    6b42:	09 f0       	breq	.+2      	; 0x6b46 <midiKeyPress_Process+0x6ca>
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
    6b44:	96 cf       	rjmp	.-212    	; 0x6a72 <midiKeyPress_Process+0x5f6>
    6b46:	98 01       	movw	r18, r16
    6b48:	02 c0       	rjmp	.+4      	; 0x6b4e <midiKeyPress_Process+0x6d2>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    6b4a:	22 0f       	add	r18, r18
    6b4c:	33 1f       	adc	r19, r19
    6b4e:	8a 95       	dec	r24
    6b50:	e2 f7       	brpl	.-8      	; 0x6b4a <midiKeyPress_Process+0x6ce>
    6b52:	84 ce       	rjmp	.-760    	; 0x685c <midiKeyPress_Process+0x3e0>
    6b54:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <midiCoupler_1from2>
						}
						if (midiCoupler_Pfrom3 == TRUE){
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
						}
					} else 	if (manualNote.manual == MANUAL_II) {
						if (midiCoupler_1from2 == TRUE){
    6b58:	8f 3f       	cpi	r24, 0xFF	; 255
    6b5a:	b9 f1       	breq	.+110    	; 0x6bca <midiKeyPress_Process+0x74e>
    6b5c:	80 91 de 07 	lds	r24, 0x07DE	; 0x8007de <midiCoupler_Pfrom2>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
						}
						if (midiCoupler_Pfrom2 == TRUE){
    6b60:	8f 3f       	cpi	r24, 0xFF	; 255
    6b62:	09 f0       	breq	.+2      	; 0x6b66 <midiKeyPress_Process+0x6ea>
    6b64:	a8 cc       	rjmp	.-1712   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6b66:	90 91 07 09 	lds	r25, 0x0907	; 0x800907 <manualMap+0x24>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6b6a:	3a 81       	ldd	r19, Y+2	; 0x02
    6b6c:	39 17       	cp	r19, r25
    6b6e:	28 f0       	brcs	.+10     	; 0x6b7a <midiKeyPress_Process+0x6fe>
    6b70:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <manualMap+0x25>
    6b74:	83 17       	cp	r24, r19
    6b76:	08 f0       	brcs	.+2      	; 0x6b7a <midiKeyPress_Process+0x6fe>
    6b78:	a3 c0       	rjmp	.+326    	; 0x6cc0 <midiKeyPress_Process+0x844>
    6b7a:	90 91 0a 09 	lds	r25, 0x090A	; 0x80090a <manualMap+0x27>
    6b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b80:	89 17       	cp	r24, r25
    6b82:	30 f0       	brcs	.+12     	; 0x6b90 <midiKeyPress_Process+0x714>
    6b84:	28 2f       	mov	r18, r24
    6b86:	80 91 0b 09 	lds	r24, 0x090B	; 0x80090b <manualMap+0x28>
    6b8a:	82 17       	cp	r24, r18
    6b8c:	08 f0       	brcs	.+2      	; 0x6b90 <midiKeyPress_Process+0x714>
    6b8e:	91 c0       	rjmp	.+290    	; 0x6cb2 <midiKeyPress_Process+0x836>
    6b90:	90 91 0d 09 	lds	r25, 0x090D	; 0x80090d <manualMap+0x2a>
    6b94:	3a 81       	ldd	r19, Y+2	; 0x02
    6b96:	39 17       	cp	r19, r25
    6b98:	28 f0       	brcs	.+10     	; 0x6ba4 <midiKeyPress_Process+0x728>
    6b9a:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <manualMap+0x2b>
    6b9e:	83 17       	cp	r24, r19
    6ba0:	08 f0       	brcs	.+2      	; 0x6ba4 <midiKeyPress_Process+0x728>
    6ba2:	84 c0       	rjmp	.+264    	; 0x6cac <midiKeyPress_Process+0x830>
    6ba4:	90 91 10 09 	lds	r25, 0x0910	; 0x800910 <manualMap+0x2d>
    6ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    6baa:	89 17       	cp	r24, r25
    6bac:	08 f4       	brcc	.+2      	; 0x6bb0 <midiKeyPress_Process+0x734>
    6bae:	83 cc       	rjmp	.-1786   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6bb0:	28 2f       	mov	r18, r24
    6bb2:	80 91 11 09 	lds	r24, 0x0911	; 0x800911 <manualMap+0x2e>
    6bb6:	82 17       	cp	r24, r18
    6bb8:	08 f4       	brcc	.+2      	; 0x6bbc <midiKeyPress_Process+0x740>
    6bba:	7d cc       	rjmp	.-1798   	; 0x64b6 <midiKeyPress_Process+0x3a>
    6bbc:	e0 e1       	ldi	r30, 0x10	; 16
    6bbe:	f9 e0       	ldi	r31, 0x09	; 9
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6bc0:	32 2f       	mov	r19, r18
    6bc2:	82 81       	ldd	r24, Z+2	; 0x02
    6bc4:	83 0f       	add	r24, r19
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6bc6:	89 1b       	sub	r24, r25
    6bc8:	31 ce       	rjmp	.-926    	; 0x682c <midiKeyPress_Process+0x3b0>
    6bca:	90 91 fb 08 	lds	r25, 0x08FB	; 0x8008fb <manualMap+0x18>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6bce:	8a 81       	ldd	r24, Y+2	; 0x02
    6bd0:	89 17       	cp	r24, r25
    6bd2:	30 f0       	brcs	.+12     	; 0x6be0 <midiKeyPress_Process+0x764>
    6bd4:	28 2f       	mov	r18, r24
    6bd6:	80 91 fc 08 	lds	r24, 0x08FC	; 0x8008fc <manualMap+0x19>
    6bda:	82 17       	cp	r24, r18
    6bdc:	08 f0       	brcs	.+2      	; 0x6be0 <midiKeyPress_Process+0x764>
    6bde:	4e c0       	rjmp	.+156    	; 0x6c7c <midiKeyPress_Process+0x800>
    6be0:	90 91 fe 08 	lds	r25, 0x08FE	; 0x8008fe <manualMap+0x1b>
    6be4:	3a 81       	ldd	r19, Y+2	; 0x02
    6be6:	39 17       	cp	r19, r25
    6be8:	28 f0       	brcs	.+10     	; 0x6bf4 <midiKeyPress_Process+0x778>
    6bea:	80 91 ff 08 	lds	r24, 0x08FF	; 0x8008ff <manualMap+0x1c>
    6bee:	83 17       	cp	r24, r19
    6bf0:	08 f0       	brcs	.+2      	; 0x6bf4 <midiKeyPress_Process+0x778>
    6bf2:	47 c0       	rjmp	.+142    	; 0x6c82 <midiKeyPress_Process+0x806>
    6bf4:	90 91 01 09 	lds	r25, 0x0901	; 0x800901 <manualMap+0x1e>
    6bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    6bfa:	89 17       	cp	r24, r25
    6bfc:	30 f0       	brcs	.+12     	; 0x6c0a <midiKeyPress_Process+0x78e>
    6bfe:	28 2f       	mov	r18, r24
    6c00:	80 91 02 09 	lds	r24, 0x0902	; 0x800902 <manualMap+0x1f>
    6c04:	82 17       	cp	r24, r18
    6c06:	08 f0       	brcs	.+2      	; 0x6c0a <midiKeyPress_Process+0x78e>
    6c08:	40 c0       	rjmp	.+128    	; 0x6c8a <midiKeyPress_Process+0x80e>
    6c0a:	90 91 04 09 	lds	r25, 0x0904	; 0x800904 <manualMap+0x21>
    6c0e:	3a 81       	ldd	r19, Y+2	; 0x02
    6c10:	39 17       	cp	r19, r25
    6c12:	08 f4       	brcc	.+2      	; 0x6c16 <midiKeyPress_Process+0x79a>
    6c14:	a3 cf       	rjmp	.-186    	; 0x6b5c <midiKeyPress_Process+0x6e0>
    6c16:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <manualMap+0x22>
    6c1a:	83 17       	cp	r24, r19
    6c1c:	08 f4       	brcc	.+2      	; 0x6c20 <midiKeyPress_Process+0x7a4>
    6c1e:	9e cf       	rjmp	.-196    	; 0x6b5c <midiKeyPress_Process+0x6e0>
    6c20:	e4 e0       	ldi	r30, 0x04	; 4
    6c22:	f9 e0       	ldi	r31, 0x09	; 9
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6c24:	23 2f       	mov	r18, r19
    6c26:	82 81       	ldd	r24, Z+2	; 0x02
    6c28:	82 0f       	add	r24, r18
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6c2a:	89 1b       	sub	r24, r25
    6c2c:	e8 2f       	mov	r30, r24
    6c2e:	ef 71       	andi	r30, 0x1F	; 31
void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6c30:	82 95       	swap	r24
    6c32:	86 95       	lsr	r24
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    6c34:	87 70       	andi	r24, 0x07	; 7
    6c36:	39 81       	ldd	r19, Y+1	; 0x01
    6c38:	f0 e0       	ldi	r31, 0x00	; 0
		if (onOff == NOTE_OFF) {
    6c3a:	ee 0f       	add	r30, r30
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    6c3c:	ff 1f       	adc	r31, r31
    6c3e:	ee 0f       	add	r30, r30
    6c40:	ff 1f       	adc	r31, r31
    6c42:	ee 0f       	add	r30, r30
    6c44:	ff 1f       	adc	r31, r31
    6c46:	e5 5b       	subi	r30, 0xB5	; 181
    6c48:	fd 4f       	sbci	r31, 0xFD	; 253
    6c4a:	30 32       	cpi	r19, 0x20	; 32
    6c4c:	61 f4       	brne	.+24     	; 0x6c66 <midiKeyPress_Process+0x7ea>
	moduleInfo = manualNote_to_moduleBit(manual, note);
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
    6c4e:	98 01       	movw	r18, r16
    6c50:	02 c0       	rjmp	.+4      	; 0x6c56 <midiKeyPress_Process+0x7da>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    6c52:	22 0f       	add	r18, r18
    6c54:	33 1f       	adc	r19, r19
    6c56:	8a 95       	dec	r24
    6c58:	e2 f7       	brpl	.-8      	; 0x6c52 <midiKeyPress_Process+0x7d6>
    6c5a:	92 2f       	mov	r25, r18
    6c5c:	90 95       	com	r25
    6c5e:	81 81       	ldd	r24, Z+1	; 0x01
    6c60:	89 23       	and	r24, r25
    6c62:	81 83       	std	Z+1, r24	; 0x01
    6c64:	7b cf       	rjmp	.-266    	; 0x6b5c <midiKeyPress_Process+0x6e0>
    6c66:	98 01       	movw	r18, r16
    6c68:	02 c0       	rjmp	.+4      	; 0x6c6e <midiKeyPress_Process+0x7f2>
	if (moduleInfo.error == MODULE_NOERROR) {
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
		if (onOff == NOTE_OFF) {
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    6c6a:	22 0f       	add	r18, r18
    6c6c:	33 1f       	adc	r19, r19
    6c6e:	8a 95       	dec	r24
    6c70:	e2 f7       	brpl	.-8      	; 0x6c6a <midiKeyPress_Process+0x7ee>
    6c72:	c9 01       	movw	r24, r18
    6c74:	91 81       	ldd	r25, Z+1	; 0x01
    6c76:	89 2b       	or	r24, r25
    6c78:	81 83       	std	Z+1, r24	; 0x01
    6c7a:	70 cf       	rjmp	.-288    	; 0x6b5c <midiKeyPress_Process+0x6e0>
    6c7c:	eb ef       	ldi	r30, 0xFB	; 251
    6c7e:	f8 e0       	ldi	r31, 0x08	; 8
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6c80:	d2 cf       	rjmp	.-92     	; 0x6c26 <midiKeyPress_Process+0x7aa>
    6c82:	ee ef       	ldi	r30, 0xFE	; 254
    6c84:	f8 e0       	ldi	r31, 0x08	; 8
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6c86:	23 2f       	mov	r18, r19
    6c88:	ce cf       	rjmp	.-100    	; 0x6c26 <midiKeyPress_Process+0x7aa>
    6c8a:	e1 e0       	ldi	r30, 0x01	; 1
    6c8c:	f9 e0       	ldi	r31, 0x09	; 9
    6c8e:	cb cf       	rjmp	.-106    	; 0x6c26 <midiKeyPress_Process+0x7aa>
    6c90:	ea e0       	ldi	r30, 0x0A	; 10
    6c92:	f9 e0       	ldi	r31, 0x09	; 9
    6c94:	23 2f       	mov	r18, r19
    6c96:	42 cf       	rjmp	.-380    	; 0x6b1c <midiKeyPress_Process+0x6a0>
    6c98:	84 e0       	ldi	r24, 0x04	; 4
    6c9a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastOutManual>
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
					// manual is assigned
					if (command == MESSAGE_PIPE_ON_HI) {
						// note on -> save this info for status display
						midiLastOutManual = manualNote.manual;
    6c9e:	20 93 04 02 	sts	0x0204, r18	; 0x800204 <midiLastOutNote>
						midiLastOutNote = manualNote.note;
    6ca2:	80 e9       	ldi	r24, 0x90	; 144
    6ca4:	31 ce       	rjmp	.-926    	; 0x6908 <midiKeyPress_Process+0x48c>
					}
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
					if (chanNote.channel != MIDI_CHANNEL_NONE){
						// note on/off can be sent
						serial1MIDISend((command == MESSAGE_PIPE_ON_HI ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.channel);
    6ca6:	e7 e0       	ldi	r30, 0x07	; 7
    6ca8:	f9 e0       	ldi	r31, 0x09	; 9
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6caa:	38 cf       	rjmp	.-400    	; 0x6b1c <midiKeyPress_Process+0x6a0>
    6cac:	ed e0       	ldi	r30, 0x0D	; 13
    6cae:	f9 e0       	ldi	r31, 0x09	; 9
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
				return (result);
			}
			pRange++;
    6cb0:	88 cf       	rjmp	.-240    	; 0x6bc2 <midiKeyPress_Process+0x746>
    6cb2:	ea e0       	ldi	r30, 0x0A	; 10
    6cb4:	f9 e0       	ldi	r31, 0x09	; 9
    6cb6:	32 2f       	mov	r19, r18
    6cb8:	84 cf       	rjmp	.-248    	; 0x6bc2 <midiKeyPress_Process+0x746>
    6cba:	ed e0       	ldi	r30, 0x0D	; 13
    6cbc:	f9 e0       	ldi	r31, 0x09	; 9
    6cbe:	2e cf       	rjmp	.-420    	; 0x6b1c <midiKeyPress_Process+0x6a0>
    6cc0:	e7 e0       	ldi	r30, 0x07	; 7
    6cc2:	f9 e0       	ldi	r31, 0x09	; 9
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
		uint8_t i = RANGE_COUNT;
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6cc4:	7e cf       	rjmp	.-260    	; 0x6bc2 <midiKeyPress_Process+0x746>

00006cc6 <midiSendAllNotesOff>:
    6cc6:	80 91 df 08 	lds	r24, 0x08DF	; 0x8008df <midiOutMap>
//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t chan = midiOutMap[i].channel;
		if (chan <= MIDI_CHANNEL_16) {
    6cca:	80 31       	cpi	r24, 0x10	; 16
    6ccc:	68 f0       	brcs	.+26     	; 0x6ce8 <midiSendAllNotesOff+0x22>

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t chan = midiOutMap[i].channel;
    6cce:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <midiOutMap+0x1>
		if (chan <= MIDI_CHANNEL_16) {
    6cd2:	80 31       	cpi	r24, 0x10	; 16
    6cd4:	98 f0       	brcs	.+38     	; 0x6cfc <midiSendAllNotesOff+0x36>

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t chan = midiOutMap[i].channel;
    6cd6:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <midiOutMap+0x2>
		if (chan <= MIDI_CHANNEL_16) {
    6cda:	80 31       	cpi	r24, 0x10	; 16
    6cdc:	c8 f0       	brcs	.+50     	; 0x6d10 <midiSendAllNotesOff+0x4a>

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t chan = midiOutMap[i].channel;
    6cde:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <midiOutMap+0x3>
		if (chan <= MIDI_CHANNEL_16) {
    6ce2:	80 31       	cpi	r24, 0x10	; 16
    6ce4:	f8 f0       	brcs	.+62     	; 0x6d24 <midiSendAllNotesOff+0x5e>
    6ce6:	08 95       	ret
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6ce8:	80 6b       	ori	r24, 0xB0	; 176
    6cea:	42 d0       	rcall	.+132    	; 0x6d70 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6cec:	8b e7       	ldi	r24, 0x7B	; 123
    6cee:	40 d0       	rcall	.+128    	; 0x6d70 <serial1MIDISend>
			serial1MIDISend(0);
    6cf0:	80 e0       	ldi	r24, 0x00	; 0
    6cf2:	3e d0       	rcall	.+124    	; 0x6d70 <serial1MIDISend>
    6cf4:	80 91 e0 08 	lds	r24, 0x08E0	; 0x8008e0 <midiOutMap+0x1>

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t chan = midiOutMap[i].channel;
    6cf8:	80 31       	cpi	r24, 0x10	; 16
		if (chan <= MIDI_CHANNEL_16) {
    6cfa:	68 f7       	brcc	.-38     	; 0x6cd6 <midiSendAllNotesOff+0x10>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6cfc:	80 6b       	ori	r24, 0xB0	; 176
    6cfe:	38 d0       	rcall	.+112    	; 0x6d70 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6d00:	8b e7       	ldi	r24, 0x7B	; 123
    6d02:	36 d0       	rcall	.+108    	; 0x6d70 <serial1MIDISend>
    6d04:	80 e0       	ldi	r24, 0x00	; 0
			serial1MIDISend(0);
    6d06:	34 d0       	rcall	.+104    	; 0x6d70 <serial1MIDISend>
    6d08:	80 91 e1 08 	lds	r24, 0x08E1	; 0x8008e1 <midiOutMap+0x2>
//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t chan = midiOutMap[i].channel;
		if (chan <= MIDI_CHANNEL_16) {
    6d0c:	80 31       	cpi	r24, 0x10	; 16
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6d0e:	38 f7       	brcc	.-50     	; 0x6cde <midiSendAllNotesOff+0x18>
    6d10:	80 6b       	ori	r24, 0xB0	; 176
    6d12:	2e d0       	rcall	.+92     	; 0x6d70 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6d14:	8b e7       	ldi	r24, 0x7B	; 123
    6d16:	2c d0       	rcall	.+88     	; 0x6d70 <serial1MIDISend>
			serial1MIDISend(0);
    6d18:	80 e0       	ldi	r24, 0x00	; 0
    6d1a:	2a d0       	rcall	.+84     	; 0x6d70 <serial1MIDISend>

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t chan = midiOutMap[i].channel;
    6d1c:	80 91 e2 08 	lds	r24, 0x08E2	; 0x8008e2 <midiOutMap+0x3>
		if (chan <= MIDI_CHANNEL_16) {
    6d20:	80 31       	cpi	r24, 0x10	; 16
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6d22:	08 f7       	brcc	.-62     	; 0x6ce6 <midiSendAllNotesOff+0x20>
    6d24:	80 6b       	ori	r24, 0xB0	; 176
    6d26:	24 d0       	rcall	.+72     	; 0x6d70 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6d28:	8b e7       	ldi	r24, 0x7B	; 123
    6d2a:	22 d0       	rcall	.+68     	; 0x6d70 <serial1MIDISend>
    6d2c:	80 e0       	ldi	r24, 0x00	; 0
			serial1MIDISend(0);
    6d2e:	20 c0       	rjmp	.+64     	; 0x6d70 <serial1MIDISend>

00006d30 <init_Serial1MIDI>:
    6d30:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	} else {
		result = serUsbRxBuffer[index++];
		serusbRxOutIndex = index & SER_USB_RX_BUFFER_MASK;
	}
	return result;
}
    6d34:	8f e1       	ldi	r24, 0x1F	; 31
    6d36:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6d3a:	e9 ec       	ldi	r30, 0xC9	; 201
    6d3c:	f0 e0       	ldi	r31, 0x00	; 0
    6d3e:	80 81       	ld	r24, Z
    6d40:	88 69       	ori	r24, 0x98	; 152
    6d42:	80 83       	st	Z, r24
    6d44:	ea ec       	ldi	r30, 0xCA	; 202
    6d46:	f0 e0       	ldi	r31, 0x00	; 0
    6d48:	80 81       	ld	r24, Z
    6d4a:	86 60       	ori	r24, 0x06	; 6
    6d4c:	80 83       	st	Z, r24
    6d4e:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <midiRxInIndex>
    6d52:	10 92 a6 0c 	sts	0x0CA6, r1	; 0x800ca6 <midiRxOutIndex>
    6d56:	10 92 19 0b 	sts	0x0B19, r1	; 0x800b19 <midiTxInIndex>
    6d5a:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <midiTxOutIndex>
    6d5e:	10 92 1a 0b 	sts	0x0B1A, r1	; 0x800b1a <midiRxOvfl>
    6d62:	10 92 1d 0b 	sts	0x0B1D, r1	; 0x800b1d <midiTxOvfl>
    6d66:	10 92 a2 0b 	sts	0x0BA2, r1	; 0x800ba2 <midiRxOvflCount>
    6d6a:	10 92 a7 0c 	sts	0x0CA7, r1	; 0x800ca7 <midiTxOvflCount>
    6d6e:	08 95       	ret

00006d70 <serial1MIDISend>:
    6d70:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6d74:	9f 7d       	andi	r25, 0xDF	; 223
    6d76:	90 93 c9 00 	sts	0x00C9, r25	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6d7a:	e0 91 19 0b 	lds	r30, 0x0B19	; 0x800b19 <midiTxInIndex>
    6d7e:	f0 e0       	ldi	r31, 0x00	; 0
    6d80:	e2 5c       	subi	r30, 0xC2	; 194
    6d82:	f4 4f       	sbci	r31, 0xF4	; 244
    6d84:	80 83       	st	Z, r24
    6d86:	80 91 19 0b 	lds	r24, 0x0B19	; 0x800b19 <midiTxInIndex>
    6d8a:	8f 5f       	subi	r24, 0xFF	; 255
    6d8c:	8f 71       	andi	r24, 0x1F	; 31
    6d8e:	80 93 19 0b 	sts	0x0B19, r24	; 0x800b19 <midiTxInIndex>
    6d92:	90 91 19 0b 	lds	r25, 0x0B19	; 0x800b19 <midiTxInIndex>
    6d96:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <midiTxOutIndex>
    6d9a:	98 17       	cp	r25, r24
    6d9c:	31 f0       	breq	.+12     	; 0x6daa <serial1MIDISend+0x3a>
    6d9e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6da2:	80 62       	ori	r24, 0x20	; 32
    6da4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6da8:	08 95       	ret
    6daa:	80 91 a7 0c 	lds	r24, 0x0CA7	; 0x800ca7 <midiTxOvflCount>
    6dae:	88 23       	and	r24, r24
    6db0:	59 f0       	breq	.+22     	; 0x6dc8 <serial1MIDISend+0x58>
    6db2:	8f 3f       	cpi	r24, 0xFF	; 255
    6db4:	a1 f3       	breq	.-24     	; 0x6d9e <serial1MIDISend+0x2e>
    6db6:	8f 5f       	subi	r24, 0xFF	; 255
    6db8:	80 93 a7 0c 	sts	0x0CA7, r24	; 0x800ca7 <midiTxOvflCount>
    6dbc:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6dc0:	80 62       	ori	r24, 0x20	; 32
    6dc2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6dc6:	08 95       	ret
    6dc8:	81 e0       	ldi	r24, 0x01	; 1
    6dca:	80 93 a7 0c 	sts	0x0CA7, r24	; 0x800ca7 <midiTxOvflCount>
    6dce:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6dd2:	80 62       	ori	r24, 0x20	; 32
    6dd4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6dd8:	08 95       	ret

00006dda <serial1MIDIReadRx>:
    6dda:	90 91 5e 0b 	lds	r25, 0x0B5E	; 0x800b5e <midiRxInIndex>
    6dde:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <midiRxOutIndex>
    6de2:	98 17       	cp	r25, r24
    6de4:	69 f0       	breq	.+26     	; 0x6e00 <serial1MIDIReadRx+0x26>
    6de6:	e0 91 a6 0c 	lds	r30, 0x0CA6	; 0x800ca6 <midiRxOutIndex>
    6dea:	f0 e0       	ldi	r31, 0x00	; 0
    6dec:	e2 5e       	subi	r30, 0xE2	; 226
    6dee:	f4 4f       	sbci	r31, 0xF4	; 244
    6df0:	80 81       	ld	r24, Z
    6df2:	90 91 a6 0c 	lds	r25, 0x0CA6	; 0x800ca6 <midiRxOutIndex>
    6df6:	9f 5f       	subi	r25, 0xFF	; 255
    6df8:	9f 71       	andi	r25, 0x1F	; 31
    6dfa:	90 93 a6 0c 	sts	0x0CA6, r25	; 0x800ca6 <midiRxOutIndex>
    6dfe:	08 95       	ret
    6e00:	8d ef       	ldi	r24, 0xFD	; 253
    6e02:	08 95       	ret

00006e04 <__vector_36>:
    6e04:	1f 92       	push	r1
    6e06:	0f 92       	push	r0
    6e08:	0f b6       	in	r0, 0x3f	; 63
    6e0a:	0f 92       	push	r0
    6e0c:	11 24       	eor	r1, r1
    6e0e:	0b b6       	in	r0, 0x3b	; 59
    6e10:	0f 92       	push	r0
    6e12:	8f 93       	push	r24
    6e14:	9f 93       	push	r25
    6e16:	ef 93       	push	r30
    6e18:	ff 93       	push	r31
    6e1a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6e1e:	e0 91 5e 0b 	lds	r30, 0x0B5E	; 0x800b5e <midiRxInIndex>
    6e22:	f0 e0       	ldi	r31, 0x00	; 0
    6e24:	e2 5e       	subi	r30, 0xE2	; 226
    6e26:	f4 4f       	sbci	r31, 0xF4	; 244
    6e28:	80 83       	st	Z, r24
    6e2a:	80 91 5e 0b 	lds	r24, 0x0B5E	; 0x800b5e <midiRxInIndex>
    6e2e:	8f 5f       	subi	r24, 0xFF	; 255
    6e30:	8f 71       	andi	r24, 0x1F	; 31
    6e32:	80 93 5e 0b 	sts	0x0B5E, r24	; 0x800b5e <midiRxInIndex>
    6e36:	90 91 5e 0b 	lds	r25, 0x0B5E	; 0x800b5e <midiRxInIndex>
    6e3a:	80 91 a6 0c 	lds	r24, 0x0CA6	; 0x800ca6 <midiRxOutIndex>
    6e3e:	98 17       	cp	r25, r24
    6e40:	a1 f0       	breq	.+40     	; 0x6e6a <__vector_36+0x66>
    6e42:	80 91 a8 0c 	lds	r24, 0x0CA8	; 0x800ca8 <midiRxBytesCount>
    6e46:	90 91 a9 0c 	lds	r25, 0x0CA9	; 0x800ca9 <midiRxBytesCount+0x1>
    6e4a:	01 96       	adiw	r24, 0x01	; 1
    6e4c:	90 93 a9 0c 	sts	0x0CA9, r25	; 0x800ca9 <midiRxBytesCount+0x1>
    6e50:	80 93 a8 0c 	sts	0x0CA8, r24	; 0x800ca8 <midiRxBytesCount>
    6e54:	ff 91       	pop	r31
    6e56:	ef 91       	pop	r30
    6e58:	9f 91       	pop	r25
    6e5a:	8f 91       	pop	r24
    6e5c:	0f 90       	pop	r0
    6e5e:	0b be       	out	0x3b, r0	; 59
    6e60:	0f 90       	pop	r0
    6e62:	0f be       	out	0x3f, r0	; 63
    6e64:	0f 90       	pop	r0
    6e66:	1f 90       	pop	r1
    6e68:	18 95       	reti
    6e6a:	80 91 a2 0b 	lds	r24, 0x0BA2	; 0x800ba2 <midiRxOvflCount>
    6e6e:	88 23       	and	r24, r24
    6e70:	31 f0       	breq	.+12     	; 0x6e7e <__vector_36+0x7a>
    6e72:	8f 3f       	cpi	r24, 0xFF	; 255
    6e74:	31 f3       	breq	.-52     	; 0x6e42 <__vector_36+0x3e>
    6e76:	8f 5f       	subi	r24, 0xFF	; 255
    6e78:	80 93 a2 0b 	sts	0x0BA2, r24	; 0x800ba2 <midiRxOvflCount>
    6e7c:	e2 cf       	rjmp	.-60     	; 0x6e42 <__vector_36+0x3e>
    6e7e:	81 e0       	ldi	r24, 0x01	; 1
    6e80:	80 93 a2 0b 	sts	0x0BA2, r24	; 0x800ba2 <midiRxOvflCount>
    6e84:	de cf       	rjmp	.-68     	; 0x6e42 <__vector_36+0x3e>

00006e86 <__vector_37>:
    6e86:	1f 92       	push	r1
    6e88:	0f 92       	push	r0
    6e8a:	0f b6       	in	r0, 0x3f	; 63
    6e8c:	0f 92       	push	r0
    6e8e:	11 24       	eor	r1, r1
    6e90:	0b b6       	in	r0, 0x3b	; 59
    6e92:	0f 92       	push	r0
    6e94:	8f 93       	push	r24
    6e96:	9f 93       	push	r25
    6e98:	ef 93       	push	r30
    6e9a:	ff 93       	push	r31
    6e9c:	90 91 1b 0b 	lds	r25, 0x0B1B	; 0x800b1b <midiTxOutIndex>
    6ea0:	80 91 19 0b 	lds	r24, 0x0B19	; 0x800b19 <midiTxInIndex>
    6ea4:	98 17       	cp	r25, r24
    6ea6:	11 f1       	breq	.+68     	; 0x6eec <__vector_37+0x66>
    6ea8:	e0 91 1b 0b 	lds	r30, 0x0B1B	; 0x800b1b <midiTxOutIndex>
    6eac:	f0 e0       	ldi	r31, 0x00	; 0
    6eae:	e2 5c       	subi	r30, 0xC2	; 194
    6eb0:	f4 4f       	sbci	r31, 0xF4	; 244
    6eb2:	80 81       	ld	r24, Z
    6eb4:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6eb8:	80 91 1b 0b 	lds	r24, 0x0B1B	; 0x800b1b <midiTxOutIndex>
    6ebc:	8f 5f       	subi	r24, 0xFF	; 255
    6ebe:	8f 71       	andi	r24, 0x1F	; 31
    6ec0:	80 93 1b 0b 	sts	0x0B1B, r24	; 0x800b1b <midiTxOutIndex>
    6ec4:	80 91 a3 0b 	lds	r24, 0x0BA3	; 0x800ba3 <midiTxBytesCount>
    6ec8:	90 91 a4 0b 	lds	r25, 0x0BA4	; 0x800ba4 <midiTxBytesCount+0x1>
    6ecc:	01 96       	adiw	r24, 0x01	; 1
    6ece:	90 93 a4 0b 	sts	0x0BA4, r25	; 0x800ba4 <midiTxBytesCount+0x1>
    6ed2:	80 93 a3 0b 	sts	0x0BA3, r24	; 0x800ba3 <midiTxBytesCount>
    6ed6:	ff 91       	pop	r31
    6ed8:	ef 91       	pop	r30
    6eda:	9f 91       	pop	r25
    6edc:	8f 91       	pop	r24
    6ede:	0f 90       	pop	r0
    6ee0:	0b be       	out	0x3b, r0	; 59
    6ee2:	0f 90       	pop	r0
    6ee4:	0f be       	out	0x3f, r0	; 63
    6ee6:	0f 90       	pop	r0
    6ee8:	1f 90       	pop	r1
    6eea:	18 95       	reti
    6eec:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6ef0:	8f 7d       	andi	r24, 0xDF	; 223
    6ef2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
    6ef6:	ef cf       	rjmp	.-34     	; 0x6ed6 <__vector_37+0x50>

00006ef8 <init_Serial0SerUSB>:
    6ef8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6efc:	83 e3       	ldi	r24, 0x33	; 51
    6efe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    6f02:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6f06:	88 69       	ori	r24, 0x98	; 152
    6f08:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6f0c:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    6f10:	86 60       	ori	r24, 0x06	; 6
    6f12:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
    6f16:	10 92 5e 0b 	sts	0x0B5E, r1	; 0x800b5e <midiRxInIndex>
    6f1a:	10 92 a6 0c 	sts	0x0CA6, r1	; 0x800ca6 <midiRxOutIndex>
    6f1e:	10 92 19 0b 	sts	0x0B19, r1	; 0x800b19 <midiTxInIndex>
    6f22:	10 92 1b 0b 	sts	0x0B1B, r1	; 0x800b1b <midiTxOutIndex>
    6f26:	10 92 a5 0c 	sts	0x0CA5, r1	; 0x800ca5 <serusbOvflFlag>
    6f2a:	0e 94 73 07 	call	0xee6	; 0xee6 <eeprom_ReadUSB>
    6f2e:	8f 3f       	cpi	r24, 0xFF	; 255
    6f30:	09 f4       	brne	.+2      	; 0x6f34 <init_Serial0SerUSB+0x3c>
    6f32:	d0 c0       	rjmp	.+416    	; 0x70d4 <init_Serial0SerUSB+0x1dc>
    6f34:	80 91 5f 0b 	lds	r24, 0x0B5F	; 0x800b5f <serusb_Active>
    6f38:	8f 3f       	cpi	r24, 0xFF	; 255
    6f3a:	09 f0       	breq	.+2      	; 0x6f3e <init_Serial0SerUSB+0x46>
    6f3c:	08 95       	ret
    6f3e:	e9 ef       	ldi	r30, 0xF9	; 249
    6f40:	f2 e0       	ldi	r31, 0x02	; 2
    6f42:	24 91       	lpm	r18, Z
    6f44:	22 23       	and	r18, r18
    6f46:	09 f1       	breq	.+66     	; 0x6f8a <init_Serial0SerUSB+0x92>
    6f48:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    6f4c:	8f 3f       	cpi	r24, 0xFF	; 255
    6f4e:	e9 f0       	breq	.+58     	; 0x6f8a <init_Serial0SerUSB+0x92>
    6f50:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <serusbTxInIndex>
    6f54:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6f58:	9f 7d       	andi	r25, 0xDF	; 223
    6f5a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6f5e:	a8 2f       	mov	r26, r24
    6f60:	b0 e0       	ldi	r27, 0x00	; 0
    6f62:	ab 55       	subi	r26, 0x5B	; 91
    6f64:	b4 4f       	sbci	r27, 0xF4	; 244
    6f66:	2c 93       	st	X, r18
    6f68:	8f 5f       	subi	r24, 0xFF	; 255
    6f6a:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    6f6e:	89 17       	cp	r24, r25
    6f70:	09 f4       	brne	.+2      	; 0x6f74 <init_Serial0SerUSB+0x7c>
    6f72:	7c c0       	rjmp	.+248    	; 0x706c <init_Serial0SerUSB+0x174>
    6f74:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    6f78:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6f7c:	80 62       	ori	r24, 0x20	; 32
    6f7e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6f82:	31 96       	adiw	r30, 0x01	; 1
    6f84:	24 91       	lpm	r18, Z
    6f86:	21 11       	cpse	r18, r1
    6f88:	df cf       	rjmp	.-66     	; 0x6f48 <init_Serial0SerUSB+0x50>
    6f8a:	ec ee       	ldi	r30, 0xEC	; 236
    6f8c:	fb e0       	ldi	r31, 0x0B	; 11
    6f8e:	24 91       	lpm	r18, Z
    6f90:	22 23       	and	r18, r18
    6f92:	09 f1       	breq	.+66     	; 0x6fd6 <init_Serial0SerUSB+0xde>
    6f94:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    6f98:	8f 3f       	cpi	r24, 0xFF	; 255
    6f9a:	e9 f0       	breq	.+58     	; 0x6fd6 <init_Serial0SerUSB+0xde>
    6f9c:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <serusbTxInIndex>
    6fa0:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6fa4:	9f 7d       	andi	r25, 0xDF	; 223
    6fa6:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6faa:	a8 2f       	mov	r26, r24
    6fac:	b0 e0       	ldi	r27, 0x00	; 0
    6fae:	ab 55       	subi	r26, 0x5B	; 91
    6fb0:	b4 4f       	sbci	r27, 0xF4	; 244
    6fb2:	2c 93       	st	X, r18
    6fb4:	8f 5f       	subi	r24, 0xFF	; 255
    6fb6:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    6fba:	89 17       	cp	r24, r25
    6fbc:	09 f4       	brne	.+2      	; 0x6fc0 <init_Serial0SerUSB+0xc8>
    6fbe:	63 c0       	rjmp	.+198    	; 0x7086 <init_Serial0SerUSB+0x18e>
    6fc0:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    6fc4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6fc8:	80 62       	ori	r24, 0x20	; 32
    6fca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6fce:	31 96       	adiw	r30, 0x01	; 1
    6fd0:	24 91       	lpm	r18, Z
    6fd2:	21 11       	cpse	r18, r1
    6fd4:	df cf       	rjmp	.-66     	; 0x6f94 <init_Serial0SerUSB+0x9c>
    6fd6:	e6 e2       	ldi	r30, 0x26	; 38
    6fd8:	fc e0       	ldi	r31, 0x0C	; 12
    6fda:	24 91       	lpm	r18, Z
    6fdc:	22 23       	and	r18, r18
    6fde:	09 f1       	breq	.+66     	; 0x7022 <init_Serial0SerUSB+0x12a>
    6fe0:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    6fe4:	8f 3f       	cpi	r24, 0xFF	; 255
    6fe6:	e9 f0       	breq	.+58     	; 0x7022 <init_Serial0SerUSB+0x12a>
    6fe8:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <serusbTxInIndex>
    6fec:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6ff0:	9f 7d       	andi	r25, 0xDF	; 223
    6ff2:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6ff6:	a8 2f       	mov	r26, r24
    6ff8:	b0 e0       	ldi	r27, 0x00	; 0
    6ffa:	ab 55       	subi	r26, 0x5B	; 91
    6ffc:	b4 4f       	sbci	r27, 0xF4	; 244
    6ffe:	2c 93       	st	X, r18
    7000:	8f 5f       	subi	r24, 0xFF	; 255
    7002:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    7006:	89 17       	cp	r24, r25
    7008:	09 f4       	brne	.+2      	; 0x700c <init_Serial0SerUSB+0x114>
    700a:	4a c0       	rjmp	.+148    	; 0x70a0 <init_Serial0SerUSB+0x1a8>
    700c:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    7010:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7014:	80 62       	ori	r24, 0x20	; 32
    7016:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    701a:	31 96       	adiw	r30, 0x01	; 1
    701c:	24 91       	lpm	r18, Z
    701e:	21 11       	cpse	r18, r1
    7020:	df cf       	rjmp	.-66     	; 0x6fe0 <init_Serial0SerUSB+0xe8>
    7022:	e6 e2       	ldi	r30, 0x26	; 38
    7024:	fc e0       	ldi	r31, 0x0C	; 12
    7026:	24 91       	lpm	r18, Z
    7028:	22 23       	and	r18, r18
    702a:	09 f4       	brne	.+2      	; 0x702e <init_Serial0SerUSB+0x136>
    702c:	87 cf       	rjmp	.-242    	; 0x6f3c <init_Serial0SerUSB+0x44>
    702e:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    7032:	8f 3f       	cpi	r24, 0xFF	; 255
    7034:	09 f4       	brne	.+2      	; 0x7038 <init_Serial0SerUSB+0x140>
    7036:	82 cf       	rjmp	.-252    	; 0x6f3c <init_Serial0SerUSB+0x44>
    7038:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <serusbTxInIndex>
    703c:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7040:	9f 7d       	andi	r25, 0xDF	; 223
    7042:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7046:	a8 2f       	mov	r26, r24
    7048:	b0 e0       	ldi	r27, 0x00	; 0
    704a:	ab 55       	subi	r26, 0x5B	; 91
    704c:	b4 4f       	sbci	r27, 0xF4	; 244
    704e:	2c 93       	st	X, r18
    7050:	8f 5f       	subi	r24, 0xFF	; 255
    7052:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    7056:	89 17       	cp	r24, r25
    7058:	81 f1       	breq	.+96     	; 0x70ba <init_Serial0SerUSB+0x1c2>
    705a:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    705e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7062:	80 62       	ori	r24, 0x20	; 32
    7064:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7068:	31 96       	adiw	r30, 0x01	; 1
    706a:	dd cf       	rjmp	.-70     	; 0x7026 <init_Serial0SerUSB+0x12e>
    706c:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7070:	90 62       	ori	r25, 0x20	; 32
    7072:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7076:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    707a:	89 17       	cp	r24, r25
    707c:	e1 f3       	breq	.-8      	; 0x7076 <init_Serial0SerUSB+0x17e>
    707e:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    7082:	31 96       	adiw	r30, 0x01	; 1
    7084:	7f cf       	rjmp	.-258    	; 0x6f84 <init_Serial0SerUSB+0x8c>
    7086:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    708a:	90 62       	ori	r25, 0x20	; 32
    708c:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7090:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    7094:	89 17       	cp	r24, r25
    7096:	e1 f3       	breq	.-8      	; 0x7090 <init_Serial0SerUSB+0x198>
    7098:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    709c:	31 96       	adiw	r30, 0x01	; 1
    709e:	98 cf       	rjmp	.-208    	; 0x6fd0 <init_Serial0SerUSB+0xd8>
    70a0:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    70a4:	90 62       	ori	r25, 0x20	; 32
    70a6:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    70aa:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    70ae:	89 17       	cp	r24, r25
    70b0:	e1 f3       	breq	.-8      	; 0x70aa <init_Serial0SerUSB+0x1b2>
    70b2:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    70b6:	31 96       	adiw	r30, 0x01	; 1
    70b8:	b1 cf       	rjmp	.-158    	; 0x701c <init_Serial0SerUSB+0x124>
    70ba:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    70be:	90 62       	ori	r25, 0x20	; 32
    70c0:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    70c4:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    70c8:	89 17       	cp	r24, r25
    70ca:	e1 f3       	breq	.-8      	; 0x70c4 <init_Serial0SerUSB+0x1cc>
    70cc:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    70d0:	31 96       	adiw	r30, 0x01	; 1
    70d2:	a9 cf       	rjmp	.-174    	; 0x7026 <init_Serial0SerUSB+0x12e>
    70d4:	10 92 5f 0b 	sts	0x0B5F, r1	; 0x800b5f <serusb_Active>
    70d8:	40 e0       	ldi	r20, 0x00	; 0
    70da:	50 e0       	ldi	r21, 0x00	; 0
    70dc:	64 e0       	ldi	r22, 0x04	; 4
    70de:	81 e0       	ldi	r24, 0x01	; 1
    70e0:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <log_putError>
    70e4:	27 cf       	rjmp	.-434    	; 0x6f34 <init_Serial0SerUSB+0x3c>

000070e6 <serial0SER_USB_sendStringP>:
    70e6:	fc 01       	movw	r30, r24
    70e8:	84 91       	lpm	r24, Z
    70ea:	88 23       	and	r24, r24
    70ec:	01 f1       	breq	.+64     	; 0x712e <serial0SER_USB_sendStringP+0x48>
    70ee:	90 91 a5 0c 	lds	r25, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    70f2:	9f 3f       	cpi	r25, 0xFF	; 255
    70f4:	e1 f0       	breq	.+56     	; 0x712e <serial0SER_USB_sendStringP+0x48>
    70f6:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <serusbTxInIndex>
    70fa:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    70fe:	2f 7d       	andi	r18, 0xDF	; 223
    7100:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7104:	a9 2f       	mov	r26, r25
    7106:	b0 e0       	ldi	r27, 0x00	; 0
    7108:	ab 55       	subi	r26, 0x5B	; 91
    710a:	b4 4f       	sbci	r27, 0xF4	; 244
    710c:	8c 93       	st	X, r24
    710e:	9f 5f       	subi	r25, 0xFF	; 255
    7110:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    7114:	98 17       	cp	r25, r24
    7116:	61 f0       	breq	.+24     	; 0x7130 <serial0SER_USB_sendStringP+0x4a>
    7118:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <serusbTxInIndex>
    711c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7120:	80 62       	ori	r24, 0x20	; 32
    7122:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7126:	31 96       	adiw	r30, 0x01	; 1
    7128:	84 91       	lpm	r24, Z
    712a:	81 11       	cpse	r24, r1
    712c:	e0 cf       	rjmp	.-64     	; 0x70ee <serial0SER_USB_sendStringP+0x8>
    712e:	08 95       	ret
    7130:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7134:	80 62       	ori	r24, 0x20	; 32
    7136:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    713a:	20 91 1c 0b 	lds	r18, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    713e:	92 17       	cp	r25, r18
    7140:	e1 f3       	breq	.-8      	; 0x713a <serial0SER_USB_sendStringP+0x54>
    7142:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <serusbTxInIndex>
    7146:	31 96       	adiw	r30, 0x01	; 1
    7148:	ef cf       	rjmp	.-34     	; 0x7128 <serial0SER_USB_sendStringP+0x42>

0000714a <serial0SER_USB_sendString>:
    714a:	fc 01       	movw	r30, r24
    714c:	30 81       	ld	r19, Z
    714e:	33 23       	and	r19, r19
    7150:	d1 f1       	breq	.+116    	; 0x71c6 <serial0SER_USB_sendString+0x7c>
    7152:	20 91 a5 0c 	lds	r18, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    7156:	2f 3f       	cpi	r18, 0xFF	; 255
    7158:	b1 f1       	breq	.+108    	; 0x71c6 <serial0SER_USB_sendString+0x7c>
    715a:	dc 01       	movw	r26, r24
    715c:	11 96       	adiw	r26, 0x01	; 1
    715e:	ac 01       	movw	r20, r24
    7160:	4f 5a       	subi	r20, 0xAF	; 175
    7162:	5f 4f       	sbci	r21, 0xFF	; 255
    7164:	11 c0       	rjmp	.+34     	; 0x7188 <serial0SER_USB_sendString+0x3e>
    7166:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <serusbTxInIndex>
    716a:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    716e:	90 62       	ori	r25, 0x20	; 32
    7170:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7174:	3d 91       	ld	r19, X+
    7176:	33 23       	and	r19, r19
    7178:	31 f1       	breq	.+76     	; 0x71c6 <serial0SER_USB_sendString+0x7c>
    717a:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    717e:	8f 3f       	cpi	r24, 0xFF	; 255
    7180:	11 f1       	breq	.+68     	; 0x71c6 <serial0SER_USB_sendString+0x7c>
    7182:	a4 17       	cp	r26, r20
    7184:	b5 07       	cpc	r27, r21
    7186:	f9 f0       	breq	.+62     	; 0x71c6 <serial0SER_USB_sendString+0x7c>
    7188:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <serusbTxInIndex>
    718c:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7190:	2f 7d       	andi	r18, 0xDF	; 223
    7192:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7196:	e9 2f       	mov	r30, r25
    7198:	f0 e0       	ldi	r31, 0x00	; 0
    719a:	eb 55       	subi	r30, 0x5B	; 91
    719c:	f4 4f       	sbci	r31, 0xF4	; 244
    719e:	30 83       	st	Z, r19
    71a0:	9f 5f       	subi	r25, 0xFF	; 255
    71a2:	20 91 1c 0b 	lds	r18, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    71a6:	92 13       	cpse	r25, r18
    71a8:	de cf       	rjmp	.-68     	; 0x7166 <serial0SER_USB_sendString+0x1c>
    71aa:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    71ae:	80 62       	ori	r24, 0x20	; 32
    71b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    71b4:	20 91 1c 0b 	lds	r18, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    71b8:	92 17       	cp	r25, r18
    71ba:	e1 f3       	breq	.-8      	; 0x71b4 <serial0SER_USB_sendString+0x6a>
    71bc:	90 93 60 0b 	sts	0x0B60, r25	; 0x800b60 <serusbTxInIndex>
    71c0:	3d 91       	ld	r19, X+
    71c2:	31 11       	cpse	r19, r1
    71c4:	da cf       	rjmp	.-76     	; 0x717a <serial0SER_USB_sendString+0x30>
    71c6:	08 95       	ret

000071c8 <serial0SER_USB_sendCRLF>:
    71c8:	e6 e2       	ldi	r30, 0x26	; 38
    71ca:	fc e0       	ldi	r31, 0x0C	; 12
    71cc:	24 91       	lpm	r18, Z
    71ce:	22 23       	and	r18, r18
    71d0:	01 f1       	breq	.+64     	; 0x7212 <serial0SER_USB_sendCRLF+0x4a>
    71d2:	80 91 a5 0c 	lds	r24, 0x0CA5	; 0x800ca5 <serusbOvflFlag>
    71d6:	8f 3f       	cpi	r24, 0xFF	; 255
    71d8:	e1 f0       	breq	.+56     	; 0x7212 <serial0SER_USB_sendCRLF+0x4a>
    71da:	80 91 60 0b 	lds	r24, 0x0B60	; 0x800b60 <serusbTxInIndex>
    71de:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    71e2:	9f 7d       	andi	r25, 0xDF	; 223
    71e4:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    71e8:	a8 2f       	mov	r26, r24
    71ea:	b0 e0       	ldi	r27, 0x00	; 0
    71ec:	ab 55       	subi	r26, 0x5B	; 91
    71ee:	b4 4f       	sbci	r27, 0xF4	; 244
    71f0:	2c 93       	st	X, r18
    71f2:	8f 5f       	subi	r24, 0xFF	; 255
    71f4:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    71f8:	89 17       	cp	r24, r25
    71fa:	61 f0       	breq	.+24     	; 0x7214 <serial0SER_USB_sendCRLF+0x4c>
    71fc:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    7200:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7204:	80 62       	ori	r24, 0x20	; 32
    7206:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    720a:	31 96       	adiw	r30, 0x01	; 1
    720c:	24 91       	lpm	r18, Z
    720e:	21 11       	cpse	r18, r1
    7210:	e0 cf       	rjmp	.-64     	; 0x71d2 <serial0SER_USB_sendCRLF+0xa>
    7212:	08 95       	ret
    7214:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7218:	90 62       	ori	r25, 0x20	; 32
    721a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    721e:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    7222:	89 17       	cp	r24, r25
    7224:	e1 f3       	breq	.-8      	; 0x721e <serial0SER_USB_sendCRLF+0x56>
    7226:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    722a:	31 96       	adiw	r30, 0x01	; 1
    722c:	ef cf       	rjmp	.-34     	; 0x720c <serial0SER_USB_sendCRLF+0x44>

0000722e <serial0SER_USBSend>:
    722e:	90 91 60 0b 	lds	r25, 0x0B60	; 0x800b60 <serusbTxInIndex>
    7232:	20 91 c1 00 	lds	r18, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7236:	2f 7d       	andi	r18, 0xDF	; 223
    7238:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    723c:	e9 2f       	mov	r30, r25
    723e:	f0 e0       	ldi	r31, 0x00	; 0
    7240:	eb 55       	subi	r30, 0x5B	; 91
    7242:	f4 4f       	sbci	r31, 0xF4	; 244
    7244:	80 83       	st	Z, r24
    7246:	81 e0       	ldi	r24, 0x01	; 1
    7248:	89 0f       	add	r24, r25
    724a:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    724e:	89 17       	cp	r24, r25
    7250:	41 f0       	breq	.+16     	; 0x7262 <serial0SER_USBSend+0x34>
    7252:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    7256:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    725a:	80 62       	ori	r24, 0x20	; 32
    725c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7260:	08 95       	ret
    7262:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7266:	90 62       	ori	r25, 0x20	; 32
    7268:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    726c:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    7270:	89 17       	cp	r24, r25
    7272:	e1 f3       	breq	.-8      	; 0x726c <serial0SER_USBSend+0x3e>
    7274:	80 93 60 0b 	sts	0x0B60, r24	; 0x800b60 <serusbTxInIndex>
    7278:	08 95       	ret

0000727a <__vector_25>:

ISR(USART0_RX_vect) {
    727a:	1f 92       	push	r1
    727c:	0f 92       	push	r0
    727e:	0f b6       	in	r0, 0x3f	; 63
    7280:	0f 92       	push	r0
    7282:	11 24       	eor	r1, r1
    7284:	0b b6       	in	r0, 0x3b	; 59
    7286:	0f 92       	push	r0
    7288:	8f 93       	push	r24
    728a:	9f 93       	push	r25
    728c:	ef 93       	push	r30
    728e:	ff 93       	push	r31
	uint8_t received_byte;
	uint8_t index = serusbRxInIndex;
    7290:	e0 91 aa 0c 	lds	r30, 0x0CAA	; 0x800caa <serusbRxInIndex>
	received_byte = UDR0;
    7294:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	serUsbRxBuffer[index++] =  received_byte; // Fetch the received byte value
    7298:	81 e0       	ldi	r24, 0x01	; 1
    729a:	8e 0f       	add	r24, r30
    729c:	f0 e0       	ldi	r31, 0x00	; 0
    729e:	ee 59       	subi	r30, 0x9E	; 158
    72a0:	f4 4f       	sbci	r31, 0xF4	; 244
    72a2:	90 83       	st	Z, r25
	index &= SER_USB_RX_BUFFER_MASK;
    72a4:	8f 73       	andi	r24, 0x3F	; 63
	if (index == serusbRxOutIndex) {
    72a6:	90 91 61 0b 	lds	r25, 0x0B61	; 0x800b61 <serusbRxOutIndex>
    72aa:	89 17       	cp	r24, r25
    72ac:	69 f0       	breq	.+26     	; 0x72c8 <__vector_25+0x4e>
		// overflow!
		serusbOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serusbRxInIndex = index;
    72ae:	80 93 aa 0c 	sts	0x0CAA, r24	; 0x800caa <serusbRxInIndex>
	}
}
    72b2:	ff 91       	pop	r31
    72b4:	ef 91       	pop	r30
    72b6:	9f 91       	pop	r25
    72b8:	8f 91       	pop	r24
    72ba:	0f 90       	pop	r0
    72bc:	0b be       	out	0x3b, r0	; 59
    72be:	0f 90       	pop	r0
    72c0:	0f be       	out	0x3f, r0	; 63
    72c2:	0f 90       	pop	r0
    72c4:	1f 90       	pop	r1
    72c6:	18 95       	reti
	received_byte = UDR0;
	serUsbRxBuffer[index++] =  received_byte; // Fetch the received byte value
	index &= SER_USB_RX_BUFFER_MASK;
	if (index == serusbRxOutIndex) {
		// overflow!
		serusbOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    72c8:	8f ef       	ldi	r24, 0xFF	; 255
    72ca:	80 93 a5 0c 	sts	0x0CA5, r24	; 0x800ca5 <serusbOvflFlag>
    72ce:	f1 cf       	rjmp	.-30     	; 0x72b2 <__vector_25+0x38>

000072d0 <__vector_26>:
	} else {
		serusbRxInIndex = index;
	}
}

ISR(USART0_UDRE_vect) {
    72d0:	1f 92       	push	r1
    72d2:	0f 92       	push	r0
    72d4:	0f b6       	in	r0, 0x3f	; 63
    72d6:	0f 92       	push	r0
    72d8:	11 24       	eor	r1, r1
    72da:	0b b6       	in	r0, 0x3b	; 59
    72dc:	0f 92       	push	r0
    72de:	2f 93       	push	r18
    72e0:	8f 93       	push	r24
    72e2:	9f 93       	push	r25
    72e4:	ef 93       	push	r30
    72e6:	ff 93       	push	r31
	uint8_t index = serusbTxOutIndex;
    72e8:	80 91 1c 0b 	lds	r24, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
	if (SER_USB_TX_BUFFER_NONEMPTY){
    72ec:	20 91 60 0b 	lds	r18, 0x0B60	; 0x800b60 <serusbTxInIndex>
    72f0:	90 91 1c 0b 	lds	r25, 0x0B1C	; 0x800b1c <serusbTxOutIndex>
    72f4:	29 17       	cp	r18, r25
    72f6:	b1 f0       	breq	.+44     	; 0x7324 <__vector_26+0x54>
		// es ist was zu senden da
		UDR0 = serUsbTxBuffer[index];
    72f8:	e8 2f       	mov	r30, r24
    72fa:	f0 e0       	ldi	r31, 0x00	; 0
    72fc:	eb 55       	subi	r30, 0x5B	; 91
    72fe:	f4 4f       	sbci	r31, 0xF4	; 244
    7300:	90 81       	ld	r25, Z
    7302:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serusbTxOutIndex = (index+1) & SER_USB_TX_BUFFER_MASK;
    7306:	8f 5f       	subi	r24, 0xFF	; 255
    7308:	80 93 1c 0b 	sts	0x0B1C, r24	; 0x800b1c <serusbTxOutIndex>
	} else {
		// nothing to send
		UCSR0B &= ~(1 << UDRIE0);
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
}
    730c:	ff 91       	pop	r31
    730e:	ef 91       	pop	r30
    7310:	9f 91       	pop	r25
    7312:	8f 91       	pop	r24
    7314:	2f 91       	pop	r18
    7316:	0f 90       	pop	r0
    7318:	0b be       	out	0x3b, r0	; 59
    731a:	0f 90       	pop	r0
    731c:	0f be       	out	0x3f, r0	; 63
    731e:	0f 90       	pop	r0
    7320:	1f 90       	pop	r1
    7322:	18 95       	reti
		// es ist was zu senden da
		UDR0 = serUsbTxBuffer[index];
		serusbTxOutIndex = (index+1) & SER_USB_TX_BUFFER_MASK;
	} else {
		// nothing to send
		UCSR0B &= ~(1 << UDRIE0);
    7324:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    7328:	8f 7d       	andi	r24, 0xDF	; 223
    732a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
}
    732e:	ee cf       	rjmp	.-36     	; 0x730c <__vector_26+0x3c>

00007330 <nibbleToChr>:
uint8_t mod12(uint8_t num){
	while (num >= 12){
		num = num - 12;
	}
	return(num);
}
    7330:	8a 30       	cpi	r24, 0x0A	; 10
    7332:	10 f4       	brcc	.+4      	; 0x7338 <nibbleToChr+0x8>
    7334:	80 5d       	subi	r24, 0xD0	; 208
    7336:	08 95       	ret
    7338:	89 5c       	subi	r24, 0xC9	; 201
    733a:	08 95       	ret

0000733c <lcd_initCG>:
    733c:	0f 93       	push	r16
    733e:	1f 93       	push	r17
    7340:	cf 93       	push	r28
    7342:	df 93       	push	r29
    7344:	80 e4       	ldi	r24, 0x40	; 64
    7346:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_write_command>
    734a:	ce e1       	ldi	r28, 0x1E	; 30
    734c:	dc e0       	ldi	r29, 0x0C	; 12
    734e:	fe 01       	movw	r30, r28
    7350:	84 91       	lpm	r24, Z
    7352:	0e 94 ca 12 	call	0x2594	; 0x2594 <lcd_write_character>
    7356:	21 96       	adiw	r28, 0x01	; 1
    7358:	fc e0       	ldi	r31, 0x0C	; 12
    735a:	c6 32       	cpi	r28, 0x26	; 38
    735c:	df 07       	cpc	r29, r31
    735e:	b9 f7       	brne	.-18     	; 0x734e <lcd_initCG+0x12>
    7360:	88 e4       	ldi	r24, 0x48	; 72
    7362:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_write_command>
    7366:	0e e1       	ldi	r16, 0x1E	; 30
    7368:	1c e0       	ldi	r17, 0x0C	; 12
    736a:	c6 e1       	ldi	r28, 0x16	; 22
    736c:	dc e0       	ldi	r29, 0x0C	; 12
    736e:	fe 01       	movw	r30, r28
    7370:	84 91       	lpm	r24, Z
    7372:	0e 94 ca 12 	call	0x2594	; 0x2594 <lcd_write_character>
    7376:	21 96       	adiw	r28, 0x01	; 1
    7378:	0c 17       	cp	r16, r28
    737a:	1d 07       	cpc	r17, r29
    737c:	c1 f7       	brne	.-16     	; 0x736e <lcd_initCG+0x32>
    737e:	80 e5       	ldi	r24, 0x50	; 80
    7380:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_write_command>
    7384:	ce e0       	ldi	r28, 0x0E	; 14
    7386:	dc e0       	ldi	r29, 0x0C	; 12
    7388:	fe 01       	movw	r30, r28
    738a:	84 91       	lpm	r24, Z
    738c:	0e 94 ca 12 	call	0x2594	; 0x2594 <lcd_write_character>
    7390:	21 96       	adiw	r28, 0x01	; 1
    7392:	fc e0       	ldi	r31, 0x0C	; 12
    7394:	c6 31       	cpi	r28, 0x16	; 22
    7396:	df 07       	cpc	r29, r31
    7398:	b9 f7       	brne	.-18     	; 0x7388 <lcd_initCG+0x4c>
    739a:	df 91       	pop	r29
    739c:	cf 91       	pop	r28
    739e:	1f 91       	pop	r17
    73a0:	0f 91       	pop	r16
    73a2:	08 95       	ret

000073a4 <lcd_hexout>:
    73a4:	cf 93       	push	r28
    73a6:	c8 2f       	mov	r28, r24
    73a8:	82 95       	swap	r24
    73aa:	8f 70       	andi	r24, 0x0F	; 15
    73ac:	8a 30       	cpi	r24, 0x0A	; 10
    73ae:	58 f0       	brcs	.+22     	; 0x73c6 <lcd_hexout+0x22>
    73b0:	89 5c       	subi	r24, 0xC9	; 201
    73b2:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    73b6:	cf 70       	andi	r28, 0x0F	; 15
    73b8:	ca 30       	cpi	r28, 0x0A	; 10
    73ba:	58 f4       	brcc	.+22     	; 0x73d2 <lcd_hexout+0x2e>
    73bc:	80 e3       	ldi	r24, 0x30	; 48
    73be:	8c 0f       	add	r24, r28
    73c0:	cf 91       	pop	r28
    73c2:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>
    73c6:	80 5d       	subi	r24, 0xD0	; 208
    73c8:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    73cc:	cf 70       	andi	r28, 0x0F	; 15
    73ce:	ca 30       	cpi	r28, 0x0A	; 10
    73d0:	a8 f3       	brcs	.-22     	; 0x73bc <lcd_hexout+0x18>
    73d2:	87 e3       	ldi	r24, 0x37	; 55
    73d4:	8c 0f       	add	r24, r28
    73d6:	cf 91       	pop	r28
    73d8:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>

000073dc <lcd_longout>:
    73dc:	0f 93       	push	r16
    73de:	1f 93       	push	r17
    73e0:	cf 93       	push	r28
    73e2:	01 eb       	ldi	r16, 0xB1	; 177
    73e4:	1c e0       	ldi	r17, 0x0C	; 12
    73e6:	f8 01       	movw	r30, r16
    73e8:	c2 91       	ld	r28, -Z
    73ea:	8f 01       	movw	r16, r30
    73ec:	8c 2f       	mov	r24, r28
    73ee:	82 95       	swap	r24
    73f0:	8f 70       	andi	r24, 0x0F	; 15
    73f2:	8a 30       	cpi	r24, 0x0A	; 10
    73f4:	a8 f0       	brcs	.+42     	; 0x7420 <lcd_longout+0x44>
    73f6:	89 5c       	subi	r24, 0xC9	; 201
    73f8:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    73fc:	cf 70       	andi	r28, 0x0F	; 15
    73fe:	ca 30       	cpi	r28, 0x0A	; 10
    7400:	60 f0       	brcs	.+24     	; 0x741a <lcd_longout+0x3e>
    7402:	87 e3       	ldi	r24, 0x37	; 55
    7404:	8c 0f       	add	r24, r28
    7406:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    740a:	fc e0       	ldi	r31, 0x0C	; 12
    740c:	0d 3a       	cpi	r16, 0xAD	; 173
    740e:	1f 07       	cpc	r17, r31
    7410:	51 f7       	brne	.-44     	; 0x73e6 <lcd_longout+0xa>
    7412:	cf 91       	pop	r28
    7414:	1f 91       	pop	r17
    7416:	0f 91       	pop	r16
    7418:	08 95       	ret
    741a:	80 e3       	ldi	r24, 0x30	; 48
    741c:	8c 0f       	add	r24, r28
    741e:	f3 cf       	rjmp	.-26     	; 0x7406 <lcd_longout+0x2a>
    7420:	80 5d       	subi	r24, 0xD0	; 208
    7422:	ea cf       	rjmp	.-44     	; 0x73f8 <lcd_longout+0x1c>

00007424 <lcd_dec2out>:
    7424:	cf 93       	push	r28
    7426:	c8 2f       	mov	r28, r24
    7428:	84 36       	cpi	r24, 0x64	; 100
    742a:	68 f5       	brcc	.+90     	; 0x7486 <lcd_dec2out+0x62>
    742c:	8a 30       	cpi	r24, 0x0A	; 10
    742e:	90 f1       	brcs	.+100    	; 0x7494 <lcd_dec2out+0x70>
    7430:	86 ef       	ldi	r24, 0xF6	; 246
    7432:	8c 0f       	add	r24, r28
    7434:	8a 30       	cpi	r24, 0x0A	; 10
    7436:	08 f4       	brcc	.+2      	; 0x743a <lcd_dec2out+0x16>
    7438:	41 c0       	rjmp	.+130    	; 0x74bc <lcd_dec2out+0x98>
    743a:	8c ee       	ldi	r24, 0xEC	; 236
    743c:	8c 0f       	add	r24, r28
    743e:	8a 30       	cpi	r24, 0x0A	; 10
    7440:	b8 f1       	brcs	.+110    	; 0x74b0 <lcd_dec2out+0x8c>
    7442:	82 ee       	ldi	r24, 0xE2	; 226
    7444:	8c 0f       	add	r24, r28
    7446:	8a 30       	cpi	r24, 0x0A	; 10
    7448:	b0 f1       	brcs	.+108    	; 0x74b6 <lcd_dec2out+0x92>
    744a:	88 ed       	ldi	r24, 0xD8	; 216
    744c:	8c 0f       	add	r24, r28
    744e:	8a 30       	cpi	r24, 0x0A	; 10
    7450:	18 f1       	brcs	.+70     	; 0x7498 <lcd_dec2out+0x74>
    7452:	8e ec       	ldi	r24, 0xCE	; 206
    7454:	8c 0f       	add	r24, r28
    7456:	8a 30       	cpi	r24, 0x0A	; 10
    7458:	10 f1       	brcs	.+68     	; 0x749e <lcd_dec2out+0x7a>
    745a:	84 ec       	ldi	r24, 0xC4	; 196
    745c:	8c 0f       	add	r24, r28
    745e:	8a 30       	cpi	r24, 0x0A	; 10
    7460:	08 f1       	brcs	.+66     	; 0x74a4 <lcd_dec2out+0x80>
    7462:	8a eb       	ldi	r24, 0xBA	; 186
    7464:	8c 0f       	add	r24, r28
    7466:	8a 30       	cpi	r24, 0x0A	; 10
    7468:	00 f1       	brcs	.+64     	; 0x74aa <lcd_dec2out+0x86>
    746a:	80 eb       	ldi	r24, 0xB0	; 176
    746c:	8c 0f       	add	r24, r28
    746e:	8a 30       	cpi	r24, 0x0A	; 10
    7470:	40 f1       	brcs	.+80     	; 0x74c2 <lcd_dec2out+0x9e>
    7472:	ca 55       	subi	r28, 0x5A	; 90
    7474:	89 e0       	ldi	r24, 0x09	; 9
    7476:	80 5d       	subi	r24, 0xD0	; 208
    7478:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    747c:	80 e3       	ldi	r24, 0x30	; 48
    747e:	8c 0f       	add	r24, r28
    7480:	cf 91       	pop	r28
    7482:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>
    7486:	8d e2       	ldi	r24, 0x2D	; 45
    7488:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    748c:	8d e2       	ldi	r24, 0x2D	; 45
    748e:	cf 91       	pop	r28
    7490:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>
    7494:	80 e3       	ldi	r24, 0x30	; 48
    7496:	f0 cf       	rjmp	.-32     	; 0x7478 <lcd_dec2out+0x54>
    7498:	c8 2f       	mov	r28, r24
    749a:	84 e0       	ldi	r24, 0x04	; 4
    749c:	ec cf       	rjmp	.-40     	; 0x7476 <lcd_dec2out+0x52>
    749e:	c8 2f       	mov	r28, r24
    74a0:	85 e0       	ldi	r24, 0x05	; 5
    74a2:	e9 cf       	rjmp	.-46     	; 0x7476 <lcd_dec2out+0x52>
    74a4:	c8 2f       	mov	r28, r24
    74a6:	86 e0       	ldi	r24, 0x06	; 6
    74a8:	e6 cf       	rjmp	.-52     	; 0x7476 <lcd_dec2out+0x52>
    74aa:	c8 2f       	mov	r28, r24
    74ac:	87 e0       	ldi	r24, 0x07	; 7
    74ae:	e3 cf       	rjmp	.-58     	; 0x7476 <lcd_dec2out+0x52>
    74b0:	c8 2f       	mov	r28, r24
    74b2:	82 e0       	ldi	r24, 0x02	; 2
    74b4:	e0 cf       	rjmp	.-64     	; 0x7476 <lcd_dec2out+0x52>
    74b6:	c8 2f       	mov	r28, r24
    74b8:	83 e0       	ldi	r24, 0x03	; 3
    74ba:	dd cf       	rjmp	.-70     	; 0x7476 <lcd_dec2out+0x52>
    74bc:	c8 2f       	mov	r28, r24
    74be:	81 e0       	ldi	r24, 0x01	; 1
    74c0:	da cf       	rjmp	.-76     	; 0x7476 <lcd_dec2out+0x52>
    74c2:	c8 2f       	mov	r28, r24
    74c4:	88 e0       	ldi	r24, 0x08	; 8
    74c6:	d7 cf       	rjmp	.-82     	; 0x7476 <lcd_dec2out+0x52>

000074c8 <putChar_Dec2>:
    74c8:	84 36       	cpi	r24, 0x64	; 100
    74ca:	88 f5       	brcc	.+98     	; 0x752e <putChar_Dec2+0x66>
    74cc:	8a 30       	cpi	r24, 0x0A	; 10
    74ce:	c8 f1       	brcs	.+114    	; 0x7542 <putChar_Dec2+0x7a>
    74d0:	96 ef       	ldi	r25, 0xF6	; 246
    74d2:	98 0f       	add	r25, r24
    74d4:	9a 30       	cpi	r25, 0x0A	; 10
    74d6:	08 f4       	brcc	.+2      	; 0x74da <putChar_Dec2+0x12>
    74d8:	48 c0       	rjmp	.+144    	; 0x756a <putChar_Dec2+0xa2>
    74da:	9c ee       	ldi	r25, 0xEC	; 236
    74dc:	98 0f       	add	r25, r24
    74de:	9a 30       	cpi	r25, 0x0A	; 10
    74e0:	f0 f1       	brcs	.+124    	; 0x755e <putChar_Dec2+0x96>
    74e2:	92 ee       	ldi	r25, 0xE2	; 226
    74e4:	98 0f       	add	r25, r24
    74e6:	9a 30       	cpi	r25, 0x0A	; 10
    74e8:	e8 f1       	brcs	.+122    	; 0x7564 <putChar_Dec2+0x9c>
    74ea:	98 ed       	ldi	r25, 0xD8	; 216
    74ec:	98 0f       	add	r25, r24
    74ee:	9a 30       	cpi	r25, 0x0A	; 10
    74f0:	50 f1       	brcs	.+84     	; 0x7546 <putChar_Dec2+0x7e>
    74f2:	9e ec       	ldi	r25, 0xCE	; 206
    74f4:	98 0f       	add	r25, r24
    74f6:	9a 30       	cpi	r25, 0x0A	; 10
    74f8:	48 f1       	brcs	.+82     	; 0x754c <putChar_Dec2+0x84>
    74fa:	94 ec       	ldi	r25, 0xC4	; 196
    74fc:	98 0f       	add	r25, r24
    74fe:	9a 30       	cpi	r25, 0x0A	; 10
    7500:	40 f1       	brcs	.+80     	; 0x7552 <putChar_Dec2+0x8a>
    7502:	9a eb       	ldi	r25, 0xBA	; 186
    7504:	98 0f       	add	r25, r24
    7506:	9a 30       	cpi	r25, 0x0A	; 10
    7508:	38 f1       	brcs	.+78     	; 0x7558 <putChar_Dec2+0x90>
    750a:	90 eb       	ldi	r25, 0xB0	; 176
    750c:	98 0f       	add	r25, r24
    750e:	9a 30       	cpi	r25, 0x0A	; 10
    7510:	78 f1       	brcs	.+94     	; 0x7570 <putChar_Dec2+0xa8>
    7512:	8a 55       	subi	r24, 0x5A	; 90
    7514:	99 e0       	ldi	r25, 0x09	; 9
    7516:	90 5d       	subi	r25, 0xD0	; 208
    7518:	fb 01       	movw	r30, r22
    751a:	90 83       	st	Z, r25
    751c:	32 96       	adiw	r30, 0x02	; 2
    751e:	90 e3       	ldi	r25, 0x30	; 48
    7520:	98 0f       	add	r25, r24
    7522:	db 01       	movw	r26, r22
    7524:	11 96       	adiw	r26, 0x01	; 1
    7526:	9c 93       	st	X, r25
    7528:	10 82       	st	Z, r1
    752a:	cf 01       	movw	r24, r30
    752c:	08 95       	ret
    752e:	8d e2       	ldi	r24, 0x2D	; 45
    7530:	db 01       	movw	r26, r22
    7532:	8c 93       	st	X, r24
    7534:	fb 01       	movw	r30, r22
    7536:	32 96       	adiw	r30, 0x02	; 2
    7538:	11 96       	adiw	r26, 0x01	; 1
    753a:	8c 93       	st	X, r24
    753c:	10 82       	st	Z, r1
    753e:	cf 01       	movw	r24, r30
    7540:	08 95       	ret
    7542:	90 e3       	ldi	r25, 0x30	; 48
    7544:	e9 cf       	rjmp	.-46     	; 0x7518 <putChar_Dec2+0x50>
    7546:	89 2f       	mov	r24, r25
    7548:	94 e0       	ldi	r25, 0x04	; 4
    754a:	e5 cf       	rjmp	.-54     	; 0x7516 <putChar_Dec2+0x4e>
    754c:	89 2f       	mov	r24, r25
    754e:	95 e0       	ldi	r25, 0x05	; 5
    7550:	e2 cf       	rjmp	.-60     	; 0x7516 <putChar_Dec2+0x4e>
    7552:	89 2f       	mov	r24, r25
    7554:	96 e0       	ldi	r25, 0x06	; 6
    7556:	df cf       	rjmp	.-66     	; 0x7516 <putChar_Dec2+0x4e>
    7558:	89 2f       	mov	r24, r25
    755a:	97 e0       	ldi	r25, 0x07	; 7
    755c:	dc cf       	rjmp	.-72     	; 0x7516 <putChar_Dec2+0x4e>
    755e:	89 2f       	mov	r24, r25
    7560:	92 e0       	ldi	r25, 0x02	; 2
    7562:	d9 cf       	rjmp	.-78     	; 0x7516 <putChar_Dec2+0x4e>
    7564:	89 2f       	mov	r24, r25
    7566:	93 e0       	ldi	r25, 0x03	; 3
    7568:	d6 cf       	rjmp	.-84     	; 0x7516 <putChar_Dec2+0x4e>
    756a:	89 2f       	mov	r24, r25
    756c:	91 e0       	ldi	r25, 0x01	; 1
    756e:	d3 cf       	rjmp	.-90     	; 0x7516 <putChar_Dec2+0x4e>
    7570:	89 2f       	mov	r24, r25
    7572:	98 e0       	ldi	r25, 0x08	; 8
    7574:	d0 cf       	rjmp	.-96     	; 0x7516 <putChar_Dec2+0x4e>

00007576 <putChar_hex>:
    7576:	fb 01       	movw	r30, r22
    7578:	98 2f       	mov	r25, r24
    757a:	92 95       	swap	r25
    757c:	9f 70       	andi	r25, 0x0F	; 15
    757e:	9a 30       	cpi	r25, 0x0A	; 10
    7580:	70 f0       	brcs	.+28     	; 0x759e <putChar_hex+0x28>
    7582:	99 5c       	subi	r25, 0xC9	; 201
    7584:	90 83       	st	Z, r25
    7586:	98 2f       	mov	r25, r24
    7588:	9f 70       	andi	r25, 0x0F	; 15
    758a:	9f 01       	movw	r18, r30
    758c:	2e 5f       	subi	r18, 0xFE	; 254
    758e:	3f 4f       	sbci	r19, 0xFF	; 255
    7590:	9a 30       	cpi	r25, 0x0A	; 10
    7592:	38 f4       	brcc	.+14     	; 0x75a2 <putChar_hex+0x2c>
    7594:	90 5d       	subi	r25, 0xD0	; 208
    7596:	91 83       	std	Z+1, r25	; 0x01
    7598:	12 82       	std	Z+2, r1	; 0x02
    759a:	c9 01       	movw	r24, r18
    759c:	08 95       	ret
    759e:	90 5d       	subi	r25, 0xD0	; 208
    75a0:	f1 cf       	rjmp	.-30     	; 0x7584 <putChar_hex+0xe>
    75a2:	99 5c       	subi	r25, 0xC9	; 201
    75a4:	91 83       	std	Z+1, r25	; 0x01
    75a6:	12 82       	std	Z+2, r1	; 0x02
    75a8:	c9 01       	movw	r24, r18
    75aa:	08 95       	ret

000075ac <putChar_long>:
    75ac:	fb 01       	movw	r30, r22
    75ae:	14 82       	std	Z+4, r1	; 0x04
    75b0:	28 2f       	mov	r18, r24
    75b2:	2f 70       	andi	r18, 0x0F	; 15
    75b4:	2a 30       	cpi	r18, 0x0A	; 10
    75b6:	40 f1       	brcs	.+80     	; 0x7608 <putChar_long+0x5c>
    75b8:	29 5c       	subi	r18, 0xC9	; 201
    75ba:	23 83       	std	Z+3, r18	; 0x03
    75bc:	9c 01       	movw	r18, r24
    75be:	32 95       	swap	r19
    75c0:	22 95       	swap	r18
    75c2:	2f 70       	andi	r18, 0x0F	; 15
    75c4:	23 27       	eor	r18, r19
    75c6:	3f 70       	andi	r19, 0x0F	; 15
    75c8:	23 27       	eor	r18, r19
    75ca:	82 2f       	mov	r24, r18
    75cc:	8f 70       	andi	r24, 0x0F	; 15
    75ce:	8a 30       	cpi	r24, 0x0A	; 10
    75d0:	20 f1       	brcs	.+72     	; 0x761a <putChar_long+0x6e>
    75d2:	89 5c       	subi	r24, 0xC9	; 201
    75d4:	82 83       	std	Z+2, r24	; 0x02
    75d6:	32 95       	swap	r19
    75d8:	22 95       	swap	r18
    75da:	2f 70       	andi	r18, 0x0F	; 15
    75dc:	23 27       	eor	r18, r19
    75de:	3f 70       	andi	r19, 0x0F	; 15
    75e0:	23 27       	eor	r18, r19
    75e2:	82 2f       	mov	r24, r18
    75e4:	8f 70       	andi	r24, 0x0F	; 15
    75e6:	8a 30       	cpi	r24, 0x0A	; 10
    75e8:	b0 f0       	brcs	.+44     	; 0x7616 <putChar_long+0x6a>
    75ea:	89 5c       	subi	r24, 0xC9	; 201
    75ec:	81 83       	std	Z+1, r24	; 0x01
    75ee:	32 95       	swap	r19
    75f0:	22 95       	swap	r18
    75f2:	2f 70       	andi	r18, 0x0F	; 15
    75f4:	23 27       	eor	r18, r19
    75f6:	3f 70       	andi	r19, 0x0F	; 15
    75f8:	23 27       	eor	r18, r19
    75fa:	2a 30       	cpi	r18, 0x0A	; 10
    75fc:	38 f0       	brcs	.+14     	; 0x760c <putChar_long+0x60>
    75fe:	29 5c       	subi	r18, 0xC9	; 201
    7600:	20 83       	st	Z, r18
    7602:	cf 01       	movw	r24, r30
    7604:	04 96       	adiw	r24, 0x04	; 4
    7606:	08 95       	ret
    7608:	20 5d       	subi	r18, 0xD0	; 208
    760a:	d7 cf       	rjmp	.-82     	; 0x75ba <putChar_long+0xe>
    760c:	20 5d       	subi	r18, 0xD0	; 208
    760e:	20 83       	st	Z, r18
    7610:	cf 01       	movw	r24, r30
    7612:	04 96       	adiw	r24, 0x04	; 4
    7614:	08 95       	ret
    7616:	80 5d       	subi	r24, 0xD0	; 208
    7618:	e9 cf       	rjmp	.-46     	; 0x75ec <putChar_long+0x40>
    761a:	80 5d       	subi	r24, 0xD0	; 208
    761c:	db cf       	rjmp	.-74     	; 0x75d4 <putChar_long+0x28>

0000761e <putChar_Note>:
    761e:	87 fd       	sbrc	r24, 7
    7620:	47 c0       	rjmp	.+142    	; 0x76b0 <putChar_Note+0x92>
    7622:	90 e0       	ldi	r25, 0x00	; 0
    7624:	8c 30       	cpi	r24, 0x0C	; 12
    7626:	20 f0       	brcs	.+8      	; 0x7630 <putChar_Note+0x12>
    7628:	8c 50       	subi	r24, 0x0C	; 12
    762a:	9f 5f       	subi	r25, 0xFF	; 255
    762c:	8c 30       	cpi	r24, 0x0C	; 12
    762e:	e0 f7       	brcc	.-8      	; 0x7628 <putChar_Note+0xa>
    7630:	fb 01       	movw	r30, r22
    7632:	31 96       	adiw	r30, 0x01	; 1
    7634:	8b 30       	cpi	r24, 0x0B	; 11
    7636:	71 f1       	breq	.+92     	; 0x7694 <putChar_Note+0x76>
    7638:	85 30       	cpi	r24, 0x05	; 5
    763a:	a0 f4       	brcc	.+40     	; 0x7664 <putChar_Note+0x46>
    763c:	28 2f       	mov	r18, r24
    763e:	26 95       	lsr	r18
    7640:	2d 5b       	subi	r18, 0xBD	; 189
    7642:	db 01       	movw	r26, r22
    7644:	2c 93       	st	X, r18
    7646:	80 fd       	sbrc	r24, 0
    7648:	1a c0       	rjmp	.+52     	; 0x767e <putChar_Note+0x60>
    764a:	8f e5       	ldi	r24, 0x5F	; 95
    764c:	80 83       	st	Z, r24
    764e:	df 01       	movw	r26, r30
    7650:	12 96       	adiw	r26, 0x02	; 2
    7652:	99 23       	and	r25, r25
    7654:	d1 f0       	breq	.+52     	; 0x768a <putChar_Note+0x6c>
    7656:	9c 30       	cpi	r25, 0x0C	; 12
    7658:	30 f1       	brcs	.+76     	; 0x76a6 <putChar_Note+0x88>
    765a:	8d e2       	ldi	r24, 0x2D	; 45
    765c:	81 83       	std	Z+1, r24	; 0x01
    765e:	1c 92       	st	X, r1
    7660:	cd 01       	movw	r24, r26
    7662:	08 95       	ret
    7664:	89 30       	cpi	r24, 0x09	; 9
    7666:	d8 f4       	brcc	.+54     	; 0x769e <putChar_Note+0x80>
    7668:	28 2f       	mov	r18, r24
    766a:	30 e0       	ldi	r19, 0x00	; 0
    766c:	25 50       	subi	r18, 0x05	; 5
    766e:	31 09       	sbc	r19, r1
    7670:	35 95       	asr	r19
    7672:	27 95       	ror	r18
    7674:	2a 5b       	subi	r18, 0xBA	; 186
    7676:	db 01       	movw	r26, r22
    7678:	2c 93       	st	X, r18
    767a:	80 fd       	sbrc	r24, 0
    767c:	e6 cf       	rjmp	.-52     	; 0x764a <putChar_Note+0x2c>
    767e:	83 e2       	ldi	r24, 0x23	; 35
    7680:	80 83       	st	Z, r24
    7682:	df 01       	movw	r26, r30
    7684:	12 96       	adiw	r26, 0x02	; 2
    7686:	91 11       	cpse	r25, r1
    7688:	e6 cf       	rjmp	.-52     	; 0x7656 <putChar_Note+0x38>
    768a:	8d e6       	ldi	r24, 0x6D	; 109
    768c:	81 83       	std	Z+1, r24	; 0x01
    768e:	1c 92       	st	X, r1
    7690:	cd 01       	movw	r24, r26
    7692:	08 95       	ret
    7694:	88 e4       	ldi	r24, 0x48	; 72
    7696:	db 01       	movw	r26, r22
    7698:	8c 93       	st	X, r24
    769a:	8f e5       	ldi	r24, 0x5F	; 95
    769c:	d7 cf       	rjmp	.-82     	; 0x764c <putChar_Note+0x2e>
    769e:	21 e4       	ldi	r18, 0x41	; 65
    76a0:	db 01       	movw	r26, r22
    76a2:	2c 93       	st	X, r18
    76a4:	ea cf       	rjmp	.-44     	; 0x767a <putChar_Note+0x5c>
    76a6:	91 5d       	subi	r25, 0xD1	; 209
    76a8:	91 83       	std	Z+1, r25	; 0x01
    76aa:	1c 92       	st	X, r1
    76ac:	cd 01       	movw	r24, r26
    76ae:	08 95       	ret
    76b0:	8d e2       	ldi	r24, 0x2D	; 45
    76b2:	db 01       	movw	r26, r22
    76b4:	8c 93       	st	X, r24
    76b6:	9e e6       	ldi	r25, 0x6E	; 110
    76b8:	11 96       	adiw	r26, 0x01	; 1
    76ba:	9c 93       	st	X, r25
    76bc:	11 97       	sbiw	r26, 0x01	; 1
    76be:	12 96       	adiw	r26, 0x02	; 2
    76c0:	8c 93       	st	X, r24
    76c2:	12 97       	sbiw	r26, 0x02	; 2
    76c4:	14 96       	adiw	r26, 0x04	; 4
    76c6:	fb 01       	movw	r30, r22
    76c8:	13 82       	std	Z+3, r1	; 0x03
    76ca:	1c 92       	st	X, r1
    76cc:	cd 01       	movw	r24, r26
    76ce:	08 95       	ret

000076d0 <putChar_Manual>:
    76d0:	fb 01       	movw	r30, r22
    76d2:	31 96       	adiw	r30, 0x01	; 1
    76d4:	83 30       	cpi	r24, 0x03	; 3
    76d6:	40 f0       	brcs	.+16     	; 0x76e8 <putChar_Manual+0x18>
    76d8:	83 30       	cpi	r24, 0x03	; 3
    76da:	69 f0       	breq	.+26     	; 0x76f6 <putChar_Manual+0x26>
    76dc:	8d e2       	ldi	r24, 0x2D	; 45
    76de:	db 01       	movw	r26, r22
    76e0:	8c 93       	st	X, r24
    76e2:	10 82       	st	Z, r1
    76e4:	cf 01       	movw	r24, r30
    76e6:	08 95       	ret
    76e8:	93 e3       	ldi	r25, 0x33	; 51
    76ea:	98 1b       	sub	r25, r24
    76ec:	db 01       	movw	r26, r22
    76ee:	9c 93       	st	X, r25
    76f0:	10 82       	st	Z, r1
    76f2:	cf 01       	movw	r24, r30
    76f4:	08 95       	ret
    76f6:	80 e5       	ldi	r24, 0x50	; 80
    76f8:	db 01       	movw	r26, r22
    76fa:	8c 93       	st	X, r24
    76fc:	10 82       	st	Z, r1
    76fe:	cf 01       	movw	r24, r30
    7700:	08 95       	ret

00007702 <lcd_wordout>:
    7702:	cf 93       	push	r28
    7704:	df 93       	push	r29
    7706:	ec 01       	movw	r28, r24
    7708:	8d 2f       	mov	r24, r29
    770a:	82 95       	swap	r24
    770c:	8f 70       	andi	r24, 0x0F	; 15
    770e:	8a 30       	cpi	r24, 0x0A	; 10
    7710:	d8 f0       	brcs	.+54     	; 0x7748 <lcd_wordout+0x46>
    7712:	89 5c       	subi	r24, 0xC9	; 201
    7714:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    7718:	df 70       	andi	r29, 0x0F	; 15
    771a:	da 30       	cpi	r29, 0x0A	; 10
    771c:	d8 f4       	brcc	.+54     	; 0x7754 <lcd_wordout+0x52>
    771e:	80 e3       	ldi	r24, 0x30	; 48
    7720:	8d 0f       	add	r24, r29
    7722:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    7726:	8c 2f       	mov	r24, r28
    7728:	82 95       	swap	r24
    772a:	8f 70       	andi	r24, 0x0F	; 15
    772c:	8a 30       	cpi	r24, 0x0A	; 10
    772e:	d8 f0       	brcs	.+54     	; 0x7766 <lcd_wordout+0x64>
    7730:	89 5c       	subi	r24, 0xC9	; 201
    7732:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    7736:	cf 70       	andi	r28, 0x0F	; 15
    7738:	ca 30       	cpi	r28, 0x0A	; 10
    773a:	d8 f4       	brcc	.+54     	; 0x7772 <lcd_wordout+0x70>
    773c:	80 e3       	ldi	r24, 0x30	; 48
    773e:	8c 0f       	add	r24, r28
    7740:	df 91       	pop	r29
    7742:	cf 91       	pop	r28
    7744:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>
    7748:	80 5d       	subi	r24, 0xD0	; 208
    774a:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    774e:	df 70       	andi	r29, 0x0F	; 15
    7750:	da 30       	cpi	r29, 0x0A	; 10
    7752:	28 f3       	brcs	.-54     	; 0x771e <lcd_wordout+0x1c>
    7754:	87 e3       	ldi	r24, 0x37	; 55
    7756:	8d 0f       	add	r24, r29
    7758:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    775c:	8c 2f       	mov	r24, r28
    775e:	82 95       	swap	r24
    7760:	8f 70       	andi	r24, 0x0F	; 15
    7762:	8a 30       	cpi	r24, 0x0A	; 10
    7764:	28 f7       	brcc	.-54     	; 0x7730 <lcd_wordout+0x2e>
    7766:	80 5d       	subi	r24, 0xD0	; 208
    7768:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    776c:	cf 70       	andi	r28, 0x0F	; 15
    776e:	ca 30       	cpi	r28, 0x0A	; 10
    7770:	28 f3       	brcs	.-54     	; 0x773c <lcd_wordout+0x3a>
    7772:	87 e3       	ldi	r24, 0x37	; 55
    7774:	8c 0f       	add	r24, r28
    7776:	df 91       	pop	r29
    7778:	cf 91       	pop	r28
    777a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>

0000777e <lcd_noteOut>:
    777e:	cf 93       	push	r28
    7780:	df 93       	push	r29
    7782:	87 fd       	sbrc	r24, 7
    7784:	4f c0       	rjmp	.+158    	; 0x7824 <lcd_noteOut+0xa6>
    7786:	8c 30       	cpi	r24, 0x0C	; 12
    7788:	08 f4       	brcc	.+2      	; 0x778c <lcd_noteOut+0xe>
    778a:	50 c0       	rjmp	.+160    	; 0x782c <lcd_noteOut+0xae>
    778c:	90 e0       	ldi	r25, 0x00	; 0
    778e:	9f 5f       	subi	r25, 0xFF	; 255
    7790:	8c 50       	subi	r24, 0x0C	; 12
    7792:	8c 30       	cpi	r24, 0x0C	; 12
    7794:	e0 f7       	brcc	.-8      	; 0x778e <lcd_noteOut+0x10>
    7796:	48 2f       	mov	r20, r24
    7798:	50 e0       	ldi	r21, 0x00	; 0
    779a:	fa 01       	movw	r30, r20
    779c:	31 97       	sbiw	r30, 0x01	; 1
    779e:	eb 30       	cpi	r30, 0x0B	; 11
    77a0:	f1 05       	cpc	r31, r1
    77a2:	90 f0       	brcs	.+36     	; 0x77c8 <lcd_noteOut+0x4a>
    77a4:	d5 ea       	ldi	r29, 0xA5	; 165
    77a6:	83 e4       	ldi	r24, 0x43	; 67
    77a8:	99 23       	and	r25, r25
    77aa:	d1 f1       	breq	.+116    	; 0x7820 <lcd_noteOut+0xa2>
    77ac:	cf e2       	ldi	r28, 0x2F	; 47
    77ae:	c9 0f       	add	r28, r25
    77b0:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    77b4:	8d 2f       	mov	r24, r29
    77b6:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    77ba:	8c 2f       	mov	r24, r28
    77bc:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    77c0:	83 e0       	ldi	r24, 0x03	; 3
    77c2:	df 91       	pop	r29
    77c4:	cf 91       	pop	r28
    77c6:	08 95       	ret
    77c8:	88 27       	eor	r24, r24
    77ca:	e6 56       	subi	r30, 0x66	; 102
    77cc:	ff 4f       	sbci	r31, 0xFF	; 255
    77ce:	8f 4f       	sbci	r24, 0xFF	; 255
    77d0:	b8 c1       	rjmp	.+880    	; 0x7b42 <__tablejump2__>
    77d2:	d3 e2       	ldi	r29, 0x23	; 35
    77d4:	83 e4       	ldi	r24, 0x43	; 67
    77d6:	ea cf       	rjmp	.-44     	; 0x77ac <lcd_noteOut+0x2e>
    77d8:	90 e0       	ldi	r25, 0x00	; 0
    77da:	d5 ea       	ldi	r29, 0xA5	; 165
    77dc:	81 e4       	ldi	r24, 0x41	; 65
    77de:	e4 cf       	rjmp	.-56     	; 0x77a8 <lcd_noteOut+0x2a>
    77e0:	90 e0       	ldi	r25, 0x00	; 0
    77e2:	d3 e2       	ldi	r29, 0x23	; 35
    77e4:	87 e4       	ldi	r24, 0x47	; 71
    77e6:	e0 cf       	rjmp	.-64     	; 0x77a8 <lcd_noteOut+0x2a>
    77e8:	90 e0       	ldi	r25, 0x00	; 0
    77ea:	d5 ea       	ldi	r29, 0xA5	; 165
    77ec:	87 e4       	ldi	r24, 0x47	; 71
    77ee:	dc cf       	rjmp	.-72     	; 0x77a8 <lcd_noteOut+0x2a>
    77f0:	90 e0       	ldi	r25, 0x00	; 0
    77f2:	d3 e2       	ldi	r29, 0x23	; 35
    77f4:	86 e4       	ldi	r24, 0x46	; 70
    77f6:	d8 cf       	rjmp	.-80     	; 0x77a8 <lcd_noteOut+0x2a>
    77f8:	90 e0       	ldi	r25, 0x00	; 0
    77fa:	d5 ea       	ldi	r29, 0xA5	; 165
    77fc:	86 e4       	ldi	r24, 0x46	; 70
    77fe:	d4 cf       	rjmp	.-88     	; 0x77a8 <lcd_noteOut+0x2a>
    7800:	90 e0       	ldi	r25, 0x00	; 0
    7802:	d3 e2       	ldi	r29, 0x23	; 35
    7804:	81 e4       	ldi	r24, 0x41	; 65
    7806:	d0 cf       	rjmp	.-96     	; 0x77a8 <lcd_noteOut+0x2a>
    7808:	90 e0       	ldi	r25, 0x00	; 0
    780a:	d5 ea       	ldi	r29, 0xA5	; 165
    780c:	85 e4       	ldi	r24, 0x45	; 69
    780e:	cc cf       	rjmp	.-104    	; 0x77a8 <lcd_noteOut+0x2a>
    7810:	90 e0       	ldi	r25, 0x00	; 0
    7812:	d3 e2       	ldi	r29, 0x23	; 35
    7814:	84 e4       	ldi	r24, 0x44	; 68
    7816:	c8 cf       	rjmp	.-112    	; 0x77a8 <lcd_noteOut+0x2a>
    7818:	90 e0       	ldi	r25, 0x00	; 0
    781a:	d5 ea       	ldi	r29, 0xA5	; 165
    781c:	84 e4       	ldi	r24, 0x44	; 68
    781e:	c4 cf       	rjmp	.-120    	; 0x77a8 <lcd_noteOut+0x2a>
    7820:	cd e2       	ldi	r28, 0x2D	; 45
    7822:	c6 cf       	rjmp	.-116    	; 0x77b0 <lcd_noteOut+0x32>
    7824:	cd e2       	ldi	r28, 0x2D	; 45
    7826:	dd e2       	ldi	r29, 0x2D	; 45
    7828:	8d e2       	ldi	r24, 0x2D	; 45
    782a:	c2 cf       	rjmp	.-124    	; 0x77b0 <lcd_noteOut+0x32>
    782c:	90 e0       	ldi	r25, 0x00	; 0
    782e:	fc 01       	movw	r30, r24
    7830:	31 97       	sbiw	r30, 0x01	; 1
    7832:	eb 30       	cpi	r30, 0x0B	; 11
    7834:	f1 05       	cpc	r31, r1
    7836:	30 f0       	brcs	.+12     	; 0x7844 <lcd_noteOut+0xc6>
    7838:	90 e0       	ldi	r25, 0x00	; 0
    783a:	b4 cf       	rjmp	.-152    	; 0x77a4 <lcd_noteOut+0x26>
    783c:	90 e0       	ldi	r25, 0x00	; 0
    783e:	d5 ea       	ldi	r29, 0xA5	; 165
    7840:	88 e4       	ldi	r24, 0x48	; 72
    7842:	b2 cf       	rjmp	.-156    	; 0x77a8 <lcd_noteOut+0x2a>
    7844:	88 27       	eor	r24, r24
    7846:	eb 55       	subi	r30, 0x5B	; 91
    7848:	ff 4f       	sbci	r31, 0xFF	; 255
    784a:	8f 4f       	sbci	r24, 0xFF	; 255
    784c:	7a c1       	rjmp	.+756    	; 0x7b42 <__tablejump2__>
    784e:	cd e2       	ldi	r28, 0x2D	; 45
    7850:	d3 e2       	ldi	r29, 0x23	; 35
    7852:	83 e4       	ldi	r24, 0x43	; 67
    7854:	ad cf       	rjmp	.-166    	; 0x77b0 <lcd_noteOut+0x32>

00007856 <lcd_ChannelOut>:
    7856:	cf 93       	push	r28
    7858:	c8 2f       	mov	r28, r24
    785a:	cf 70       	andi	r28, 0x0F	; 15
    785c:	81 e0       	ldi	r24, 0x01	; 1
    785e:	8c 0f       	add	r24, r28
    7860:	8a 30       	cpi	r24, 0x0A	; 10
    7862:	28 f0       	brcs	.+10     	; 0x786e <lcd_ChannelOut+0x18>
    7864:	81 e3       	ldi	r24, 0x31	; 49
    7866:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    786a:	87 ef       	ldi	r24, 0xF7	; 247
    786c:	8c 0f       	add	r24, r28
    786e:	80 5d       	subi	r24, 0xD0	; 208
    7870:	cf 91       	pop	r28
    7872:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>

00007876 <lcd_ManualOutDec>:
    7876:	84 30       	cpi	r24, 0x04	; 4
    7878:	38 f4       	brcc	.+14     	; 0x7888 <lcd_ManualOutDec+0x12>
    787a:	83 30       	cpi	r24, 0x03	; 3
    787c:	41 f0       	breq	.+16     	; 0x788e <lcd_ManualOutDec+0x18>
    787e:	93 e3       	ldi	r25, 0x33	; 51
    7880:	98 1b       	sub	r25, r24
    7882:	89 2f       	mov	r24, r25
    7884:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>
    7888:	8d e2       	ldi	r24, 0x2D	; 45
    788a:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>
    788e:	80 e5       	ldi	r24, 0x50	; 80
    7890:	0c 94 94 14 	jmp	0x2928	; 0x2928 <lcd_putc>

00007894 <lcd_blank>:
    7894:	cf 93       	push	r28
    7896:	88 23       	and	r24, r24
    7898:	31 f0       	breq	.+12     	; 0x78a6 <lcd_blank+0x12>
    789a:	c8 2f       	mov	r28, r24
    789c:	80 e2       	ldi	r24, 0x20	; 32
    789e:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    78a2:	c1 50       	subi	r28, 0x01	; 1
    78a4:	d9 f7       	brne	.-10     	; 0x789c <lcd_blank+0x8>
    78a6:	cf 91       	pop	r28
    78a8:	08 95       	ret

000078aa <lcd_clrEol>:
    78aa:	cf 93       	push	r28
    78ac:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <lcd_cursorPos>
    78b0:	8f 7b       	andi	r24, 0xBF	; 191
    78b2:	84 31       	cpi	r24, 0x14	; 20
    78b4:	79 f0       	breq	.+30     	; 0x78d4 <lcd_clrEol+0x2a>
    78b6:	88 32       	cpi	r24, 0x28	; 40
    78b8:	69 f0       	breq	.+26     	; 0x78d4 <lcd_clrEol+0x2a>
    78ba:	c4 e1       	ldi	r28, 0x14	; 20
    78bc:	80 e2       	ldi	r24, 0x20	; 32
    78be:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    78c2:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <lcd_cursorPos>
    78c6:	8f 7b       	andi	r24, 0xBF	; 191
    78c8:	84 31       	cpi	r24, 0x14	; 20
    78ca:	21 f0       	breq	.+8      	; 0x78d4 <lcd_clrEol+0x2a>
    78cc:	88 32       	cpi	r24, 0x28	; 40
    78ce:	11 f0       	breq	.+4      	; 0x78d4 <lcd_clrEol+0x2a>
    78d0:	c1 50       	subi	r28, 0x01	; 1
    78d2:	a1 f7       	brne	.-24     	; 0x78bc <lcd_clrEol+0x12>
    78d4:	cf 91       	pop	r28
    78d6:	08 95       	ret

000078d8 <lcd_cursosblink>:
    78d8:	8d e0       	ldi	r24, 0x0D	; 13
    78da:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_write_command>
    78de:	8f ef       	ldi	r24, 0xFF	; 255
    78e0:	80 93 ab 0c 	sts	0x0CAB, r24	; 0x800cab <lcd_cursorIsOn>
    78e4:	08 95       	ret

000078e6 <lcd_cursoroff>:
    78e6:	8c e0       	ldi	r24, 0x0C	; 12
    78e8:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_write_command>
    78ec:	10 92 ab 0c 	sts	0x0CAB, r1	; 0x800cab <lcd_cursorIsOn>
    78f0:	08 95       	ret

000078f2 <lcd_waitSymbolOn>:
    78f2:	cf 93       	push	r28
    78f4:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
    78f8:	8c e0       	ldi	r24, 0x0C	; 12
    78fa:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    78fe:	81 ea       	ldi	r24, 0xA1	; 161
    7900:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    7904:	8c 2f       	mov	r24, r28
    7906:	cf 91       	pop	r28
    7908:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>

0000790c <lcd_waitSymbolOff>:
    790c:	cf 93       	push	r28
    790e:	c0 91 5a 03 	lds	r28, 0x035A	; 0x80035a <lcd_cursorPos>
    7912:	8c e0       	ldi	r24, 0x0C	; 12
    7914:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    7918:	80 e2       	ldi	r24, 0x20	; 32
    791a:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>
    791e:	8c 2f       	mov	r24, r28
    7920:	cf 91       	pop	r28
    7922:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>

00007926 <keylabel_set>:
const char __flash keylabel_exit []  = "Exit";
const char __flash keylabel_text []  = "Text" LCD_STATEONOFF; // \x80 KEYLABEL_STATEOFF_CHAR

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
    7926:	cf 93       	push	r28
    7928:	df 93       	push	r29
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    792a:	84 30       	cpi	r24, 0x04	; 4
    792c:	08 f0       	brcs	.+2      	; 0x7930 <keylabel_set+0xa>
    792e:	51 c0       	rjmp	.+162    	; 0x79d2 <keylabel_set+0xac>
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    7930:	fb 01       	movw	r30, r22
    7932:	44 91       	lpm	r20, Z
    7934:	44 23       	and	r20, r20
    7936:	09 f4       	brne	.+2      	; 0x793a <keylabel_set+0x14>
    7938:	4c c0       	rjmp	.+152    	; 0x79d2 <keylabel_set+0xac>
    793a:	eb 01       	movw	r28, r22
    793c:	21 96       	adiw	r28, 0x01	; 1
    793e:	fe 01       	movw	r30, r28
    7940:	94 91       	lpm	r25, Z
    7942:	99 23       	and	r25, r25
    7944:	09 f4       	brne	.+2      	; 0x7948 <keylabel_set+0x22>
    7946:	6a c0       	rjmp	.+212    	; 0x7a1c <keylabel_set+0xf6>
    7948:	9b 01       	movw	r18, r22
    794a:	2e 5f       	subi	r18, 0xFE	; 254
    794c:	3f 4f       	sbci	r19, 0xFF	; 255
    794e:	f9 01       	movw	r30, r18
    7950:	94 91       	lpm	r25, Z
    7952:	99 23       	and	r25, r25
    7954:	09 f4       	brne	.+2      	; 0x7958 <keylabel_set+0x32>
    7956:	75 c0       	rjmp	.+234    	; 0x7a42 <keylabel_set+0x11c>
    7958:	2f 5f       	subi	r18, 0xFF	; 255
    795a:	3f 4f       	sbci	r19, 0xFF	; 255
    795c:	f9 01       	movw	r30, r18
    795e:	94 91       	lpm	r25, Z
    7960:	99 23       	and	r25, r25
    7962:	09 f4       	brne	.+2      	; 0x7966 <keylabel_set+0x40>
    7964:	70 c0       	rjmp	.+224    	; 0x7a46 <keylabel_set+0x120>
    7966:	2f 5f       	subi	r18, 0xFF	; 255
    7968:	3f 4f       	sbci	r19, 0xFF	; 255
    796a:	f9 01       	movw	r30, r18
    796c:	94 91       	lpm	r25, Z
    796e:	99 23       	and	r25, r25
    7970:	09 f4       	brne	.+2      	; 0x7974 <keylabel_set+0x4e>
    7972:	6b c0       	rjmp	.+214    	; 0x7a4a <keylabel_set+0x124>
    7974:	2f 5f       	subi	r18, 0xFF	; 255
    7976:	3f 4f       	sbci	r19, 0xFF	; 255
    7978:	f9 01       	movw	r30, r18
    797a:	94 91       	lpm	r25, Z
    797c:	99 23       	and	r25, r25
    797e:	09 f4       	brne	.+2      	; 0x7982 <keylabel_set+0x5c>
    7980:	66 c0       	rjmp	.+204    	; 0x7a4e <keylabel_set+0x128>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7982:	35 e0       	ldi	r19, 0x05	; 5
    7984:	83 9f       	mul	r24, r19
    7986:	d0 01       	movw	r26, r0
    7988:	11 24       	eor	r1, r1
    798a:	ad 5e       	subi	r26, 0xED	; 237
    798c:	bd 4f       	sbci	r27, 0xFD	; 253
    798e:	25 e0       	ldi	r18, 0x05	; 5
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
			*charBufPtr = ' ';
		} else {
			*charBufPtr = *labelPStr++;
    7990:	4d 93       	st	X+, r20
    7992:	be 01       	movw	r22, r28
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    7994:	21 30       	cpi	r18, 0x01	; 1
    7996:	49 f1       	breq	.+82     	; 0x79ea <keylabel_set+0xc4>
			*charBufPtr = ' ';
		} else {
			*charBufPtr = *labelPStr++;
    7998:	fb 01       	movw	r30, r22
    799a:	84 91       	lpm	r24, Z
    799c:	8c 93       	st	X, r24
    799e:	6f 5f       	subi	r22, 0xFF	; 255
    79a0:	7f 4f       	sbci	r23, 0xFF	; 255
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    79a2:	23 30       	cpi	r18, 0x03	; 3
    79a4:	30 f5       	brcc	.+76     	; 0x79f2 <keylabel_set+0xcc>
			*charBufPtr = ' ';
    79a6:	80 e2       	ldi	r24, 0x20	; 32
    79a8:	11 96       	adiw	r26, 0x01	; 1
    79aa:	8c 93       	st	X, r24
    79ac:	11 97       	sbiw	r26, 0x01	; 1
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    79ae:	24 30       	cpi	r18, 0x04	; 4
    79b0:	48 f1       	brcs	.+82     	; 0x7a04 <keylabel_set+0xde>
			*charBufPtr = ' ';
		} else {
			*charBufPtr = *labelPStr++;
    79b2:	fb 01       	movw	r30, r22
    79b4:	84 91       	lpm	r24, Z
    79b6:	12 96       	adiw	r26, 0x02	; 2
    79b8:	8c 93       	st	X, r24
    79ba:	12 97       	sbiw	r26, 0x02	; 2
    79bc:	6f 5f       	subi	r22, 0xFF	; 255
    79be:	7f 4f       	sbci	r23, 0xFF	; 255
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    79c0:	25 30       	cpi	r18, 0x05	; 5
    79c2:	30 f1       	brcs	.+76     	; 0x7a10 <keylabel_set+0xea>
			*charBufPtr = ' ';
		} else {
			*charBufPtr = *labelPStr++;
    79c4:	fb 01       	movw	r30, r22
    79c6:	84 91       	lpm	r24, Z
    79c8:	13 96       	adiw	r26, 0x03	; 3
    79ca:	8c 93       	st	X, r24
		}
		charBufPtr++;
		i++;
	}
}
    79cc:	df 91       	pop	r29
    79ce:	cf 91       	pop	r28
    79d0:	08 95       	ret
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    79d2:	f5 e0       	ldi	r31, 0x05	; 5
    79d4:	8f 9f       	mul	r24, r31
    79d6:	d0 01       	movw	r26, r0
    79d8:	11 24       	eor	r1, r1
    79da:	ad 5e       	subi	r26, 0xED	; 237
    79dc:	bd 4f       	sbci	r27, 0xFD	; 253
    79de:	22 e0       	ldi	r18, 0x02	; 2
    79e0:	92 e0       	ldi	r25, 0x02	; 2
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
			*charBufPtr = ' ';
    79e2:	80 e2       	ldi	r24, 0x20	; 32
    79e4:	8d 93       	st	X+, r24
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    79e6:	92 30       	cpi	r25, 0x02	; 2
    79e8:	a9 f6       	brne	.-86     	; 0x7994 <keylabel_set+0x6e>
			*charBufPtr = ' ';
    79ea:	80 e2       	ldi	r24, 0x20	; 32
    79ec:	8c 93       	st	X, r24
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    79ee:	23 30       	cpi	r18, 0x03	; 3
    79f0:	d0 f2       	brcs	.-76     	; 0x79a6 <keylabel_set+0x80>
			*charBufPtr = ' ';
		} else {
			*charBufPtr = *labelPStr++;
    79f2:	fb 01       	movw	r30, r22
    79f4:	84 91       	lpm	r24, Z
    79f6:	11 96       	adiw	r26, 0x01	; 1
    79f8:	8c 93       	st	X, r24
    79fa:	11 97       	sbiw	r26, 0x01	; 1
    79fc:	6f 5f       	subi	r22, 0xFF	; 255
    79fe:	7f 4f       	sbci	r23, 0xFF	; 255
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    7a00:	24 30       	cpi	r18, 0x04	; 4
    7a02:	b8 f6       	brcc	.-82     	; 0x79b2 <keylabel_set+0x8c>
			*charBufPtr = ' ';
    7a04:	80 e2       	ldi	r24, 0x20	; 32
    7a06:	12 96       	adiw	r26, 0x02	; 2
    7a08:	8c 93       	st	X, r24
    7a0a:	12 97       	sbiw	r26, 0x02	; 2
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    7a0c:	25 30       	cpi	r18, 0x05	; 5
    7a0e:	d0 f6       	brcc	.-76     	; 0x79c4 <keylabel_set+0x9e>
			*charBufPtr = ' ';
    7a10:	80 e2       	ldi	r24, 0x20	; 32
    7a12:	13 96       	adiw	r26, 0x03	; 3
    7a14:	8c 93       	st	X, r24
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7a16:	df 91       	pop	r29
    7a18:	cf 91       	pop	r28
    7a1a:	08 95       	ret
void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7a1c:	51 e0       	ldi	r21, 0x01	; 1
    7a1e:	25 e0       	ldi	r18, 0x05	; 5
    7a20:	30 e0       	ldi	r19, 0x00	; 0
    7a22:	25 1b       	sub	r18, r21
    7a24:	31 09       	sbc	r19, r1
    7a26:	35 95       	asr	r19
    7a28:	27 95       	ror	r18
    7a2a:	92 2f       	mov	r25, r18
    7a2c:	25 0f       	add	r18, r21
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7a2e:	f5 e0       	ldi	r31, 0x05	; 5
    7a30:	8f 9f       	mul	r24, r31
    7a32:	d0 01       	movw	r26, r0
    7a34:	11 24       	eor	r1, r1
    7a36:	ad 5e       	subi	r26, 0xED	; 237
    7a38:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
		if ((i < startText) || (i >= startEndSpaces)){
    7a3a:	99 23       	and	r25, r25
    7a3c:	09 f4       	brne	.+2      	; 0x7a40 <keylabel_set+0x11a>
    7a3e:	a8 cf       	rjmp	.-176    	; 0x7990 <keylabel_set+0x6a>
    7a40:	d0 cf       	rjmp	.-96     	; 0x79e2 <keylabel_set+0xbc>
void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7a42:	52 e0       	ldi	r21, 0x02	; 2
    7a44:	ec cf       	rjmp	.-40     	; 0x7a1e <keylabel_set+0xf8>
    7a46:	53 e0       	ldi	r21, 0x03	; 3
    7a48:	ea cf       	rjmp	.-44     	; 0x7a1e <keylabel_set+0xf8>
    7a4a:	54 e0       	ldi	r21, 0x04	; 4
    7a4c:	e8 cf       	rjmp	.-48     	; 0x7a1e <keylabel_set+0xf8>
    7a4e:	55 e0       	ldi	r21, 0x05	; 5
    7a50:	e6 cf       	rjmp	.-52     	; 0x7a1e <keylabel_set+0xf8>

00007a52 <keylabel_clr>:
		charBufPtr++;
		i++;
	}
}

void keylabel_clr(uint8_t keyNr){
    7a52:	25 e0       	ldi	r18, 0x05	; 5
    7a54:	82 9f       	mul	r24, r18
    7a56:	c0 01       	movw	r24, r0
    7a58:	11 24       	eor	r1, r1
    7a5a:	45 e0       	ldi	r20, 0x05	; 5
    7a5c:	50 e0       	ldi	r21, 0x00	; 0
    7a5e:	60 e2       	ldi	r22, 0x20	; 32
    7a60:	70 e0       	ldi	r23, 0x00	; 0
    7a62:	8d 5e       	subi	r24, 0xED	; 237
    7a64:	9d 4f       	sbci	r25, 0xFD	; 253
    7a66:	75 c0       	rjmp	.+234    	; 0x7b52 <memset>

00007a68 <keylabel_toLCD>:
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		*charPtr++ = ' ';
	}
}

void keylabel_toLCD(){
    7a68:	ff 92       	push	r15
    7a6a:	0f 93       	push	r16
    7a6c:	1f 93       	push	r17
    7a6e:	cf 93       	push	r28
    7a70:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7a72:	f0 90 5a 03 	lds	r15, 0x035A	; 0x80035a <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    7a76:	84 e5       	ldi	r24, 0x54	; 84
    7a78:	0e 94 cc 13 	call	0x2798	; 0x2798 <lcd_goto>
    7a7c:	c3 e1       	ldi	r28, 0x13	; 19
    7a7e:	d2 e0       	ldi	r29, 0x02	; 2
    7a80:	07 e2       	ldi	r16, 0x27	; 39
    7a82:	12 e0       	ldi	r17, 0x02	; 2
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
		lcd_putc(*pChar++);
    7a84:	89 91       	ld	r24, Y+
    7a86:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7a8a:	0c 17       	cp	r16, r28
    7a8c:	1d 07       	cpc	r17, r29
    7a8e:	d1 f7       	brne	.-12     	; 0x7a84 <keylabel_toLCD+0x1c>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    7a90:	8f 2d       	mov	r24, r15
}
    7a92:	df 91       	pop	r29
    7a94:	cf 91       	pop	r28
    7a96:	1f 91       	pop	r17
    7a98:	0f 91       	pop	r16
    7a9a:	ff 90       	pop	r15
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    7a9c:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <lcd_goto>

00007aa0 <keylabel_statcheck>:
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7aa0:	25 e0       	ldi	r18, 0x05	; 5
    7aa2:	82 9f       	mul	r24, r18
    7aa4:	c0 01       	movw	r24, r0
    7aa6:	11 24       	eor	r1, r1
    7aa8:	fc 01       	movw	r30, r24
    7aaa:	ed 5e       	subi	r30, 0xED	; 237
    7aac:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
			result = 0xFF;
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7aae:	80 81       	ld	r24, Z
    7ab0:	66 23       	and	r22, r22
    7ab2:	81 f0       	breq	.+32     	; 0x7ad4 <keylabel_statcheck+0x34>
    7ab4:	80 38       	cpi	r24, 0x80	; 128
    7ab6:	29 f1       	breq	.+74     	; 0x7b02 <keylabel_statcheck+0x62>
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7ab8:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
			result = 0xFF;
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7aba:	91 81       	ldd	r25, Z+1	; 0x01
    7abc:	90 38       	cpi	r25, 0x80	; 128
    7abe:	e9 f1       	breq	.+122    	; 0x7b3a <keylabel_statcheck+0x9a>
    7ac0:	92 81       	ldd	r25, Z+2	; 0x02
    7ac2:	90 38       	cpi	r25, 0x80	; 128
    7ac4:	b1 f1       	breq	.+108    	; 0x7b32 <keylabel_statcheck+0x92>
    7ac6:	93 81       	ldd	r25, Z+3	; 0x03
    7ac8:	90 38       	cpi	r25, 0x80	; 128
    7aca:	79 f1       	breq	.+94     	; 0x7b2a <keylabel_statcheck+0x8a>
    7acc:	94 81       	ldd	r25, Z+4	; 0x04
    7ace:	90 38       	cpi	r25, 0x80	; 128
    7ad0:	e1 f0       	breq	.+56     	; 0x7b0a <keylabel_statcheck+0x6a>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7ad2:	08 95       	ret
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7ad4:	8a 30       	cpi	r24, 0x0A	; 10
    7ad6:	89 f0       	breq	.+34     	; 0x7afa <keylabel_statcheck+0x5a>
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7ad8:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7ada:	91 81       	ldd	r25, Z+1	; 0x01
    7adc:	9a 30       	cpi	r25, 0x0A	; 10
    7ade:	e9 f0       	breq	.+58     	; 0x7b1a <keylabel_statcheck+0x7a>
    7ae0:	92 81       	ldd	r25, Z+2	; 0x02
    7ae2:	9a 30       	cpi	r25, 0x0A	; 10
    7ae4:	b1 f0       	breq	.+44     	; 0x7b12 <keylabel_statcheck+0x72>
    7ae6:	93 81       	ldd	r25, Z+3	; 0x03
    7ae8:	9a 30       	cpi	r25, 0x0A	; 10
    7aea:	d9 f0       	breq	.+54     	; 0x7b22 <keylabel_statcheck+0x82>
    7aec:	94 81       	ldd	r25, Z+4	; 0x04
    7aee:	9a 30       	cpi	r25, 0x0A	; 10
    7af0:	81 f7       	brne	.-32     	; 0x7ad2 <keylabel_statcheck+0x32>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7af2:	80 e8       	ldi	r24, 0x80	; 128
    7af4:	84 83       	std	Z+4, r24	; 0x04
			result = 0xFF;
    7af6:	8f ef       	ldi	r24, 0xFF	; 255
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7af8:	08 95       	ret
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7afa:	80 e8       	ldi	r24, 0x80	; 128
    7afc:	80 83       	st	Z, r24
			result = 0xFF;
    7afe:	8f ef       	ldi	r24, 0xFF	; 255
    7b00:	ec cf       	rjmp	.-40     	; 0x7ada <keylabel_statcheck+0x3a>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
			*charPtr = KEYLABEL_STATEON_CHAR;
    7b02:	8a e0       	ldi	r24, 0x0A	; 10
    7b04:	80 83       	st	Z, r24
			result = 0xFF;
    7b06:	8f ef       	ldi	r24, 0xFF	; 255
    7b08:	d8 cf       	rjmp	.-80     	; 0x7aba <keylabel_statcheck+0x1a>
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
			result = 0xFF;
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
			*charPtr = KEYLABEL_STATEON_CHAR;
    7b0a:	8a e0       	ldi	r24, 0x0A	; 10
    7b0c:	84 83       	std	Z+4, r24	; 0x04
			result = 0xFF;
    7b0e:	8f ef       	ldi	r24, 0xFF	; 255
    7b10:	08 95       	ret
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7b12:	80 e8       	ldi	r24, 0x80	; 128
    7b14:	82 83       	std	Z+2, r24	; 0x02
			result = 0xFF;
    7b16:	8f ef       	ldi	r24, 0xFF	; 255
    7b18:	e6 cf       	rjmp	.-52     	; 0x7ae6 <keylabel_statcheck+0x46>
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7b1a:	80 e8       	ldi	r24, 0x80	; 128
    7b1c:	81 83       	std	Z+1, r24	; 0x01
			result = 0xFF;
    7b1e:	8f ef       	ldi	r24, 0xFF	; 255
    7b20:	df cf       	rjmp	.-66     	; 0x7ae0 <keylabel_statcheck+0x40>
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7b22:	80 e8       	ldi	r24, 0x80	; 128
    7b24:	83 83       	std	Z+3, r24	; 0x03
			result = 0xFF;
    7b26:	8f ef       	ldi	r24, 0xFF	; 255
    7b28:	e1 cf       	rjmp	.-62     	; 0x7aec <keylabel_statcheck+0x4c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
			*charPtr = KEYLABEL_STATEON_CHAR;
    7b2a:	8a e0       	ldi	r24, 0x0A	; 10
    7b2c:	83 83       	std	Z+3, r24	; 0x03
			result = 0xFF;
    7b2e:	8f ef       	ldi	r24, 0xFF	; 255
    7b30:	cd cf       	rjmp	.-102    	; 0x7acc <keylabel_statcheck+0x2c>
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
			result = 0xFF;
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
			*charPtr = KEYLABEL_STATEON_CHAR;
    7b32:	8a e0       	ldi	r24, 0x0A	; 10
    7b34:	82 83       	std	Z+2, r24	; 0x02
			result = 0xFF;
    7b36:	8f ef       	ldi	r24, 0xFF	; 255
    7b38:	c6 cf       	rjmp	.-116    	; 0x7ac6 <keylabel_statcheck+0x26>
		uint8_t tempChar = *charPtr;
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
			*charPtr = KEYLABEL_STATEOFF_CHAR;
			result = 0xFF;
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
			*charPtr = KEYLABEL_STATEON_CHAR;
    7b3a:	8a e0       	ldi	r24, 0x0A	; 10
    7b3c:	81 83       	std	Z+1, r24	; 0x01
			result = 0xFF;
    7b3e:	8f ef       	ldi	r24, 0xFF	; 255
    7b40:	bf cf       	rjmp	.-130    	; 0x7ac0 <keylabel_statcheck+0x20>

00007b42 <__tablejump2__>:
    7b42:	ee 0f       	add	r30, r30
    7b44:	ff 1f       	adc	r31, r31
    7b46:	88 1f       	adc	r24, r24
    7b48:	8b bf       	out	0x3b, r24	; 59
    7b4a:	07 90       	elpm	r0, Z+
    7b4c:	f6 91       	elpm	r31, Z
    7b4e:	e0 2d       	mov	r30, r0
    7b50:	19 94       	eijmp

00007b52 <memset>:
    7b52:	dc 01       	movw	r26, r24
    7b54:	01 c0       	rjmp	.+2      	; 0x7b58 <memset+0x6>
    7b56:	6d 93       	st	X+, r22
    7b58:	41 50       	subi	r20, 0x01	; 1
    7b5a:	50 40       	sbci	r21, 0x00	; 0
    7b5c:	e0 f7       	brcc	.-8      	; 0x7b56 <memset+0x4>
    7b5e:	08 95       	ret

00007b60 <eeprom_read_block>:
    7b60:	dc 01       	movw	r26, r24
    7b62:	cb 01       	movw	r24, r22

00007b64 <eeprom_read_blraw>:
    7b64:	fc 01       	movw	r30, r24
    7b66:	f9 99       	sbic	0x1f, 1	; 31
    7b68:	fe cf       	rjmp	.-4      	; 0x7b66 <eeprom_read_blraw+0x2>
    7b6a:	06 c0       	rjmp	.+12     	; 0x7b78 <eeprom_read_blraw+0x14>
    7b6c:	f2 bd       	out	0x22, r31	; 34
    7b6e:	e1 bd       	out	0x21, r30	; 33
    7b70:	f8 9a       	sbi	0x1f, 0	; 31
    7b72:	31 96       	adiw	r30, 0x01	; 1
    7b74:	00 b4       	in	r0, 0x20	; 32
    7b76:	0d 92       	st	X+, r0
    7b78:	41 50       	subi	r20, 0x01	; 1
    7b7a:	50 40       	sbci	r21, 0x00	; 0
    7b7c:	b8 f7       	brcc	.-18     	; 0x7b6c <eeprom_read_blraw+0x8>
    7b7e:	08 95       	ret

00007b80 <eeprom_read_byte>:
    7b80:	f9 99       	sbic	0x1f, 1	; 31
    7b82:	fe cf       	rjmp	.-4      	; 0x7b80 <eeprom_read_byte>
    7b84:	92 bd       	out	0x22, r25	; 34
    7b86:	81 bd       	out	0x21, r24	; 33
    7b88:	f8 9a       	sbi	0x1f, 0	; 31
    7b8a:	99 27       	eor	r25, r25
    7b8c:	80 b5       	in	r24, 0x20	; 32
    7b8e:	08 95       	ret

00007b90 <eeprom_read_word>:
    7b90:	a8 e1       	ldi	r26, 0x18	; 24
    7b92:	b0 e0       	ldi	r27, 0x00	; 0
    7b94:	42 e0       	ldi	r20, 0x02	; 2
    7b96:	50 e0       	ldi	r21, 0x00	; 0
    7b98:	e5 cf       	rjmp	.-54     	; 0x7b64 <eeprom_read_blraw>

00007b9a <eeprom_update_block>:
    7b9a:	dc 01       	movw	r26, r24
    7b9c:	a4 0f       	add	r26, r20
    7b9e:	b5 1f       	adc	r27, r21
    7ba0:	41 50       	subi	r20, 0x01	; 1
    7ba2:	50 40       	sbci	r21, 0x00	; 0
    7ba4:	40 f0       	brcs	.+16     	; 0x7bb6 <eeprom_update_block+0x1c>
    7ba6:	cb 01       	movw	r24, r22
    7ba8:	84 0f       	add	r24, r20
    7baa:	95 1f       	adc	r25, r21
    7bac:	2e 91       	ld	r18, -X
    7bae:	05 d0       	rcall	.+10     	; 0x7bba <eeprom_update_r18>
    7bb0:	41 50       	subi	r20, 0x01	; 1
    7bb2:	50 40       	sbci	r21, 0x00	; 0
    7bb4:	d8 f7       	brcc	.-10     	; 0x7bac <eeprom_update_block+0x12>
    7bb6:	08 95       	ret

00007bb8 <eeprom_update_byte>:
    7bb8:	26 2f       	mov	r18, r22

00007bba <eeprom_update_r18>:
    7bba:	f9 99       	sbic	0x1f, 1	; 31
    7bbc:	fe cf       	rjmp	.-4      	; 0x7bba <eeprom_update_r18>
    7bbe:	92 bd       	out	0x22, r25	; 34
    7bc0:	81 bd       	out	0x21, r24	; 33
    7bc2:	f8 9a       	sbi	0x1f, 0	; 31
    7bc4:	01 97       	sbiw	r24, 0x01	; 1
    7bc6:	00 b4       	in	r0, 0x20	; 32
    7bc8:	02 16       	cp	r0, r18
    7bca:	39 f0       	breq	.+14     	; 0x7bda <eeprom_update_r18+0x20>
    7bcc:	1f ba       	out	0x1f, r1	; 31
    7bce:	20 bd       	out	0x20, r18	; 32
    7bd0:	0f b6       	in	r0, 0x3f	; 63
    7bd2:	f8 94       	cli
    7bd4:	fa 9a       	sbi	0x1f, 2	; 31
    7bd6:	f9 9a       	sbi	0x1f, 1	; 31
    7bd8:	0f be       	out	0x3f, r0	; 63
    7bda:	08 95       	ret

00007bdc <eeprom_update_word>:
    7bdc:	01 96       	adiw	r24, 0x01	; 1
    7bde:	27 2f       	mov	r18, r23
    7be0:	ec df       	rcall	.-40     	; 0x7bba <eeprom_update_r18>
    7be2:	ea cf       	rjmp	.-44     	; 0x7bb8 <eeprom_update_byte>

00007be4 <_exit>:
    7be4:	f8 94       	cli

00007be6 <__stop_program>:
    7be6:	ff cf       	rjmp	.-2      	; 0x7be6 <__stop_program>
