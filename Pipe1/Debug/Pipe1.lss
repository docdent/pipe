
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000070bc  00007170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000070bc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f0e  00800208  00800208  00007178  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008178  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000081a8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000a90  00000000  00000000  000081e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000dcad  00000000  00000000  00008c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000025e1  00000000  00000000  00016925  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008279  00000000  00000000  00018f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019d0  00000000  00000000  00021180  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003197  00000000  00000000  00022b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008c22  00000000  00000000  00025ce7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e00  00000000  00000000  0002e909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__ctors_end>
       4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
       8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
       c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      10:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      14:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      18:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      1c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      20:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      24:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      28:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      2c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      30:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      34:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      38:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      3c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      40:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      44:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      48:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      4c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      50:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      54:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__vector_21>
      58:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      5c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      60:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      64:	0c 94 90 33 	jmp	0x6720	; 0x6720 <__vector_25>
      68:	0c 94 bb 33 	jmp	0x6776	; 0x6776 <__vector_26>
      6c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      70:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      74:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      78:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      7c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      80:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      84:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      88:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      8c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      90:	0c 94 9d 32 	jmp	0x653a	; 0x653a <__vector_36>
      94:	0c 94 dd 32 	jmp	0x65ba	; 0x65ba <__vector_37>
      98:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      9c:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      a0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      a4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      a8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      ac:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      b0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      b4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      b8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      bc:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      c0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      c4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      c8:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      cc:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      d0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      d4:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      d8:	0c 94 67 34 	jmp	0x68ce	; 0x68ce <__vector_54>
      dc:	0c 94 ad 34 	jmp	0x695a	; 0x695a <__vector_55>
      e0:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__bad_interrupt>
      e4:	c6 1c       	adc	r12, r6
      e6:	d1 1c       	adc	r13, r1
      e8:	dd 1c       	adc	r13, r13
      ea:	f9 1c       	adc	r15, r9
      ec:	16 1d       	adc	r17, r6
      ee:	37 1d       	adc	r19, r7
      f0:	42 1d       	adc	r20, r2
      f2:	4d 1d       	adc	r20, r13
      f4:	62 1d       	adc	r22, r2
      f6:	78 1d       	adc	r23, r8
      f8:	80 1d       	adc	r24, r0
      fa:	8e 1d       	adc	r24, r14
      fc:	62 1d       	adc	r22, r2
      fe:	bb 1d       	adc	r27, r11
     100:	cb 1d       	adc	r28, r11
     102:	ef 1d       	adc	r30, r15
     104:	41 1e       	adc	r4, r17
     106:	5a 1e       	adc	r5, r26
     108:	6f 1e       	adc	r6, r31
     10a:	88 1e       	adc	r8, r24
     10c:	90 1e       	adc	r9, r16
     10e:	b5 1e       	adc	r11, r21
     110:	b5 1e       	adc	r11, r21
     112:	ce 1e       	adc	r12, r30
     114:	db 1e       	adc	r13, r27
     116:	ca 1e       	adc	r12, r26
     118:	36 1f       	adc	r19, r22
     11a:	3e 1f       	adc	r19, r30
     11c:	89 1f       	adc	r24, r25
     11e:	eb 1f       	adc	r30, r27
     120:	15 20       	and	r1, r5
     122:	41 20       	and	r4, r1
     124:	70 20       	and	r7, r0
     126:	78 20       	and	r7, r8
     128:	7e 20       	and	r7, r14
     12a:	36 1f       	adc	r19, r22
     12c:	86 20       	and	r8, r6
     12e:	9a 20       	and	r9, r10
     130:	7e 20       	and	r7, r14
     132:	d8 20       	and	r13, r8
     134:	e5 20       	and	r14, r5
     136:	f1 20       	and	r15, r1
     138:	06 21       	and	r16, r6
     13a:	1f 21       	and	r17, r15
     13c:	42 21       	and	r20, r2
     13e:	4d 21       	and	r20, r13
     140:	53 21       	and	r21, r3
     142:	58 21       	and	r21, r8
     144:	6b 21       	and	r22, r11
     146:	8c 21       	and	r24, r12
     148:	9f 21       	and	r25, r15
     14a:	58 21       	and	r21, r8
     14c:	c4 36       	cpi	r28, 0x64	; 100
     14e:	d9 36       	cpi	r29, 0x69	; 105
     150:	c7 36       	cpi	r28, 0x67	; 103
     152:	b8 36       	cpi	r27, 0x68	; 104
     154:	ca 36       	cpi	r28, 0x6A	; 106
     156:	cd 36       	cpi	r28, 0x6D	; 109
     158:	bb 36       	cpi	r27, 0x6B	; 107
     15a:	d0 36       	cpi	r29, 0x60	; 96
     15c:	be 36       	cpi	r27, 0x6E	; 110
     15e:	d3 36       	cpi	r29, 0x63	; 99
     160:	c1 36       	cpi	r28, 0x61	; 97
     162:	d6 36       	cpi	r29, 0x66	; 102

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWmidichanSW>:
     2b4:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2c4:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2d4:	20 00                                                .

000002d6 <usbHWBits>:
     2d6:	2c 20 42 69 74 73 3a 00                             , Bits:.

000002de <usbHWmodule>:
     2de:	4d 6f 64 75 6c 65 3a 00                             Module:.

000002e6 <usbHWempty>:
     2e6:	65 6d 70 74 79 00                                   empty.

000002ec <usbHWRegister>:
     2ec:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

000002f8 <usbHWRange>:
     2f8:	52 61 6e 67 65 20 00                                Range .

000002ff <usbHWManual>:
     2ff:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

00000308 <usbHWmodulCheck>:
     308:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     318:	20 00                                                .

0000031a <usbHWmodulInst>:
     31a:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     32a:	3a 20 00                                            : .

0000032d <usbHWtitel>:
     32d:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     33d:	72 61 74 69 6f 6e 0d 0a 00                          ration...

00000346 <HelloMsg>:
     346:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     356:	65 72 66 61 63 65 0d 0a 00                          erface...

0000035f <usbLog>:
     35f:	4c 6f 67 0d 0a 00                                   Log...

00000365 <usbEmpty>:
     365:	65 6d 70 74 79 0d 0a 00                             empty...

0000036d <msg_programming1>:
     36d:	73 61 76 65 2e 2e 2e 00                             save....

00000375 <logNone>:
     375:	3c 6e 6f 6e 65 3e 00                                <none>.

0000037c <stringNotAssigen>:
     37c:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

00000387 <menuMessageE>:
     387:	45 3a 00                                            E:.

0000038a <menuMessageOK>:
     38a:	6f 6b 20 00                                         ok .

0000038e <menuMessageAbort>:
     38e:	61 62 6f 72 74 00                                   abort.

00000394 <menuMessageMIDIpanic>:
     394:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003a3 <messageRegisterMan>:
     3a3:	2b 00                                               +.

000003a5 <messageLoaded>:
     3a5:	20 52 65 67 2e 67 65 73 65 74 7a 74 00               Reg.gesetzt.

000003b2 <messageSaved>:
     3b2:	20 52 65 67 2e 69 6e 20 4b 6f 6d 62 2e 67 65 73      Reg.in Komb.ges
     3c2:	70 2e 00                                            p..

000003c5 <MenuMIDIOutText>:
     3c5:	4f 75 74 3a 00                                      Out:.

000003ca <MenuMIDIInText>:
     3ca:	49 6e 3a 00                                         In:.

000003ce <initMenuText>:
     3ce:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003d8 <nibbleInfo>:
	...
     3e0:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     3f0:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     400:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     410:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     420:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     430:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     440:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     450:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

0000045f <menu_selFunc>:
     45f:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 e9 06     ..<none>........
     46f:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     47f:	f3 06 df 06 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     48f:	6e 00 00 00 2f 0c d5 06 00 00 00 00 01 10 4b 6f     n.../.........Ko
     49f:	70 70 65 6c 32 3c 33 00 00 00 b7 06 25 1c 00 00     ppel2<3.....%...
     4af:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 ad 06     ..Koppel1<3.....
     4bf:	28 1c 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     (.....KoppelP<3.
     4cf:	00 00 a3 06 2b 1c 00 00 01 10 4b 6f 70 70 65 6c     ....+.....Koppel
     4df:	31 3c 32 00 00 00 99 06 2e 1c 00 00 01 10 4b 6f     1<2...........Ko
     4ef:	70 70 65 6c 50 3c 32 00 00 00 8f 06 31 1c 00 00     ppelP<2.....1...
     4ff:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 85 06     ..KoppelP<1.....
     50f:	34 1c 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     4.....Koppel3<2.
     51f:	00 00 7b 06 37 1c 00 00 01 10 4b 6f 70 70 65 6c     ..{.7.....Koppel
     52f:	33 3c 31 00 00 00 71 06 3a 1c 00 00 01 10 4b 6f     3<1...q.:.....Ko
     53f:	70 70 65 6c 33 3c 50 00 00 00 67 06 3d 1c 00 00     ppel3<P...g.=...
     54f:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 5d 06     ..Koppel2<1...].
     55f:	40 1c 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     @.....Koppel2<P.
     56f:	00 00 53 06 43 1c 00 00 01 10 4b 6f 70 70 65 6c     ..S.C.....Koppel
     57f:	31 3c 50 00 00 00 49 06 46 1c 00 00 01 10 4b 6f     1<P...I.F.....Ko
     58f:	6d 62 69 6e 20 31 41 00 00 00 3f 06 8c 28 00 00     mbin 1A...?..(..
     59f:	01 10 4b 6f 6d 62 69 6e 20 32 41 00 00 00 35 06     ..Kombin 2A...5.
     5af:	8f 28 00 00 01 10 4b 6f 6d 62 69 6e 20 33 41 00     .(....Kombin 3A.
     5bf:	00 00 2b 06 92 28 00 00 01 10 4b 6f 6d 62 69 6e     ..+..(....Kombin
     5cf:	20 34 41 00 00 00 21 06 95 28 00 00 01 10 52 65      4A...!..(....Re
     5df:	67 2e 61 75 73 00 00 00 00 00 17 06 2c 18 00 00     g.aus.......,...
     5ef:	01 10 4d 49 44 49 20 4f 66 66 00 00 00 00 c1 06     ..MIDI Off......
     5ff:	95 26 00 00 c1 10 53 65 74 75 70 00 00 00 00 00     .&....Setup.....
     60f:	1f 0d cb 06 00 00 00 00                             ........

00000617 <shortKeyTextRegOff>:
     617:	52 65 67 09 00 00 00 00 00 00                       Reg.......

00000621 <shortKeyTextK4A>:
     621:	4b 62 34 41 80 00 00 00 00 00                       Kb4A......

0000062b <shortKeyTextK3A>:
     62b:	4b 62 33 41 80 00 00 00 00 00                       Kb3A......

00000635 <shortKeyTextK2A>:
     635:	4b 62 32 41 80 00 00 00 00 00                       Kb2A......

0000063f <shortKeyTextK1A>:
     63f:	4b 62 31 41 80 00 00 00 00 00                       Kb1A......

00000649 <shortKeyTextCpl1P>:
     649:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000653 <shortKeyTextCpl2P>:
     653:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

0000065d <shortKeyTextCpl21>:
     65d:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

00000667 <shortKeyTextCpl3P>:
     667:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000671 <shortKeyTextCpl31>:
     671:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000067b <shortKeyTextCpl32>:
     67b:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000685 <shortKeyTextCplP1>:
     685:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

0000068f <shortKeyTextCplP2>:
     68f:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

00000699 <shortKeyTextCpl12>:
     699:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000006a3 <shortKeyTextCplP3>:
     6a3:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000006ad <shortKeyTextCpl13>:
     6ad:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000006b7 <shortKeyTextCpl23>:
     6b7:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000006c1 <shortKeyTextMIDIoff>:
     6c1:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000006cb <shortKeyTextSetup>:
     6cb:	53 65 74 75 00 00 00 00 00 00                       Setu......

000006d5 <shortKeyTextStim>:
     6d5:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000006df <shortKeyTextMenu>:
     6df:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000006e9 <shortKeyTextNone>:
	...

000006f3 <menu_main>:
     6f3:	81 00 4d 61 6e 75 61 6c 00 00 00 00 6b 07 00 00     ..Manual....k...
     703:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     713:	93 07 00 00 e1 1b 00 00 01 00 4d 49 44 49 00 00     ..........MIDI..
     723:	00 00 00 00 5f 09 00 00 00 00 00 00 01 00 54 61     ...._.........Ta
     733:	73 74 65 6e 00 00 00 00 df 0b 00 00 00 00 4f 18     sten..........O.
     743:	01 00 53 74 61 74 75 73 00 00 00 00 43 11 00 00     ..Status....C...
     753:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     763:	1f 0d 00 00 00 00 00 00                             ........

0000076b <menu_manual>:
     76b:	81 00 4b 6f 70 70 65 6c 00 00 00 00 6f 08 00 00     ..Koppel....o...
     77b:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     78b:	2f 0c 00 00 00 00 00 00                             /.......

00000793 <menu_register>:
     793:	8c 00 4b 6f 6d 62 2e 6c 61 64 2e 00 00 00 a8 05     ..Komb.lad......
     7a3:	00 00 ee 1b 0c 00 4b 6f 6d 62 2e 73 70 2e 00 00     ......Komb.sp...
     7b3:	00 00 a8 05 00 00 44 18 01 00 61 75 73 00 00 00     ......D...aus...
	...
     7cb:	e8 1b 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     7db:	00 00 6d 05 00 00 04 18 0e 00 52 65 67 2e 39 2d     ..m.......Reg.9-
     7eb:	31 36 00 00 00 00 6e 05 00 00 04 18 0e 00 52 65     16....n.......Re
     7fb:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 04 18     g.17-24...o.....
     80b:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     81b:	00 00 04 18 0e 00 52 65 67 2e 33 33 2d 34 30 00     ......Reg.33-40.
     82b:	00 00 71 05 00 00 04 18 0e 00 52 65 67 2e 34 31     ..q.......Reg.41
     83b:	2d 34 38 00 00 00 72 05 00 00 04 18 0e 00 52 65     -48...r.......Re
     84b:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 04 18     g.49-54...s.....
     85b:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     86b:	00 00 04 18                                         ....

0000086f <menu_coupler>:
     86f:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 0f 08     ..2<3...........
     87f:	00 00 31 18 09 00 31 3c 33 00 00 00 00 00 00 00     ..1...1<3.......
     88f:	00 00 10 08 00 00 31 18 09 00 31 3c 32 00 00 00     ......1...1<2...
     89f:	00 00 00 00 00 00 11 08 00 00 31 18 09 00 50 3c     ..........1...P<
     8af:	33 00 00 00 00 00 00 00 00 00 12 08 00 00 31 18     3.............1.
     8bf:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 13 08     ..P<2...........
     8cf:	00 00 31 18 09 00 50 3c 31 00 00 00 00 00 00 00     ..1...P<1.......
     8df:	00 00 14 08 00 00 31 18 09 00 33 3c 32 00 00 00     ......1...3<2...
     8ef:	00 00 00 00 00 00 15 08 00 00 31 18 09 00 33 3c     ..........1...3<
     8ff:	31 00 00 00 00 00 00 00 00 00 16 08 00 00 31 18     1.............1.
     90f:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 17 08     ..3<P...........
     91f:	00 00 31 18 09 00 32 3c 31 00 00 00 00 00 00 00     ..1...2<1.......
     92f:	00 00 18 08 00 00 31 18 09 00 32 3c 50 00 00 00     ......1...2<P...
     93f:	00 00 00 00 00 00 19 08 00 00 31 18 c9 00 31 3c     ..........1...1<
     94f:	50 00 00 00 00 00 00 00 00 00 1a 08 00 00 31 18     P.............1.

0000095f <menu_midi>:
     95f:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     96f:	95 26 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .&....MIDIin....
     97f:	ff 09 00 00 00 00 bd 19 01 00 4d 49 44 49 6f 75     ..........MIDIou
     98f:	74 00 00 00 7f 0c 00 00 00 00 b9 19 03 10 54 68     t.............Th
     99f:	72 75 2d 49 6e 00 00 00 00 00 24 08 00 00 00 18     ru-In.....$.....
     9af:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 25 08     ..Thru-Out....%.
     9bf:	00 00 00 18 09 00 41 63 63 65 70 74 20 50 43 00     ......Accept PC.
     9cf:	00 00 30 09 00 00 b5 19 09 00 41 63 74 2e 53 65     ..0.......Act.Se
     9df:	6e 73 65 00 00 00 2e 09 00 00 b5 19 c9 00 56 65     nse...........Ve
     9ef:	6c 30 34 4f 66 66 00 00 00 00 2f 09 00 00 b5 19     l04Off..../.....

000009ff <menu_midiIn>:
     9ff:	81 00 43 68 2e 31 00 00 00 00 00 00 3f 0b 00 00     ..Ch.1......?...
     a0f:	7a 17 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     z.....Ch.2......
     a1f:	3f 0b 01 00 7a 17 00 00 01 00 43 68 2e 33 00 00     ?...z.....Ch.3..
     a2f:	00 00 00 00 3f 0b 02 00 7a 17 00 00 01 00 43 68     ....?...z.....Ch
     a3f:	2e 34 00 00 00 00 00 00 3f 0b 03 00 7a 17 00 00     .4......?...z...
     a4f:	01 00 43 68 2e 35 00 00 00 00 00 00 3f 0b 04 00     ..Ch.5......?...
     a5f:	7a 17 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     z.....Ch.6......
     a6f:	3f 0b 05 00 7a 17 00 00 01 00 43 68 2e 37 00 00     ?...z.....Ch.7..
     a7f:	00 00 00 00 3f 0b 06 00 7a 17 00 00 01 00 43 68     ....?...z.....Ch
     a8f:	2e 38 00 00 00 00 00 00 3f 0b 07 00 7a 17 00 00     .8......?...z...
     a9f:	01 00 43 68 2e 39 00 00 00 00 00 00 3f 0b 08 00     ..Ch.9......?...
     aaf:	7a 17 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     z.....Ch.10.....
     abf:	3f 0b 09 00 7a 17 00 00 01 00 43 68 2e 31 31 00     ?...z.....Ch.11.
     acf:	00 00 00 00 3f 0b 0a 00 7a 17 00 00 01 00 43 68     ....?...z.....Ch
     adf:	2e 31 32 00 00 00 00 00 3f 0b 0b 00 7a 17 00 00     .12.....?...z...
     aef:	01 00 43 68 2e 31 33 00 00 00 00 00 3f 0b 0c 00     ..Ch.13.....?...
     aff:	7a 17 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     z.....Ch.14.....
     b0f:	3f 0b 0d 00 7a 17 00 00 01 00 43 68 2e 31 35 00     ?...z.....Ch.15.
     b1f:	00 00 00 00 3f 0b 0e 00 7a 17 00 00 c1 00 43 68     ....?...z.....Ch
     b2f:	2e 31 36 00 00 00 00 00 3f 0b 0f 00 7a 17 00 00     .16.....?...z...

00000b3f <menu_midiInSec>:
     b3f:	81 00 53 65 63 74 2e 31 00 00 00 00 8f 0b 00 00     ..Sect.1........
     b4f:	85 17 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     b5f:	8f 0b 01 00 85 17 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     b6f:	00 00 00 00 8f 0b 02 00 85 17 00 00 c1 00 53 65     ..............Se
     b7f:	63 74 2e 34 00 00 00 00 8f 0b 03 00 85 17 00 00     ct.4............

00000b8f <menu_midiInVar>:
     b8f:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 26 08     ..Manual......&.
     b9f:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     baf:	00 00 27 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..'.......Range.
     bbf:	00 00 00 00 00 00 28 08 00 00 00 00 c4 90 4d 61     ......(.......Ma
     bcf:	6e 4e 6f 74 65 00 00 00 00 00 29 08 00 00 00 00     nNote.....).....

00000bdf <menu_key>:
     bdf:	81 08 54 61 73 74 65 31 00 00 00 00 5f 04 00 00     ..Taste1...._...
     bef:	e9 17 1f 29 01 08 54 61 73 74 65 32 00 00 00 00     ...)..Taste2....
     bff:	5f 04 01 00 e9 17 1f 29 01 08 54 61 73 74 65 33     _......)..Taste3
     c0f:	00 00 00 00 5f 04 02 00 e9 17 1f 29 c1 08 54 61     ...._......)..Ta
     c1f:	73 74 65 34 00 00 00 00 5f 04 03 00 e9 17 1f 29     ste4...._......)

00000c2f <menu_tune>:
     c2f:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     c3f:	99 18 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     c4f:	00 00 01 00 99 18 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     c5f:	00 00 00 00 00 00 02 00 99 18 00 00 c1 20 50 65     ............. Pe
     c6f:	64 61 6c 00 00 00 00 00 00 00 03 00 99 18 00 00     dal.............

00000c7f <menu_midiOut>:
     c7f:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 26 09     ..III.........&.
     c8f:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     c9f:	00 00 28 09 00 00 00 00 03 10 49 00 00 00 00 00     ..(.......I.....
     caf:	00 00 00 00 00 00 2a 09 00 00 00 00 03 10 50 00     ......*.......P.
	...
     cc7:	00 00 2c 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..,.......III(in
     cd7:	74 29 00 00 00 00 27 09 00 00 00 00 03 10 49 49     t)....'.......II
     ce7:	28 69 6e 74 29 00 00 00 00 00 29 09 00 00 00 00     (int).....).....
     cf7:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2b 09     ..I(int)......+.
     d07:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     d17:	00 00 2d 09 00 00 00 00                             ..-.....

00000d1f <menu_setup>:
     d1f:	81 00 4d 6f 64 75 6c 65 00 00 00 00 e7 0d 00 00     ..Module........
     d2f:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     d3f:	3b 0f 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     ;.........Power.
     d4f:	00 00 00 00 ab 0d 00 00 00 00 00 00 c1 00 45 45     ..............EE
     d5f:	70 72 6f 6d 00 00 00 00 6f 0d 00 00 00 00 00 00     prom....o.......

00000d6f <menu_eeprom>:
     d6f:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     d7f:	a8 27 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     .'....EEBackup..
     d8f:	00 00 00 00 90 27 00 00 c1 00 45 45 52 65 73 74     .....'....EERest
     d9f:	6f 72 65 00 00 00 00 00 9c 27 00 00                 ore......'..

00000dab <menu_Power>:
     dab:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     dbb:	e3 29 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .)....PowerOff..
     dcb:	00 00 00 00 ec 29 00 00 c1 00 50 2e 52 65 73 74     .....)....P.Rest
     ddb:	61 72 74 00 00 00 00 00 f4 29 00 00                 art......)..

00000de7 <menu_module>:
     de7:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     df7:	00 00 cb 19 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     e07:	00 00 56 03 00 00 cb 19 0a 08 4d 6f 64 4f 4b 00     ..V.......ModOK.
     e17:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     e27:	64 54 65 73 74 00 00 00 4b 0e 00 00 00 00 00 00     dTest...K.......
     e37:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 77 0f 00 00     ..ModAssign.w...
     e47:	00 00 c1 19                                         ....

00000e4b <menu_ModeSel>:
     e4b:	81 00 4d 6f 64 2e 30 00 00 00 00 00 eb 0e 00 00     ..Mod.0.........
     e5b:	6f 17 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     o.....Mod.1.....
     e6b:	eb 0e 01 00 6f 17 00 00 01 00 4d 6f 64 2e 32 00     ....o.....Mod.2.
     e7b:	00 00 00 00 eb 0e 02 00 6f 17 00 00 01 00 4d 6f     ........o.....Mo
     e8b:	64 2e 33 00 00 00 00 00 eb 0e 03 00 6f 17 00 00     d.3.........o...
     e9b:	01 00 4d 6f 64 2e 34 00 00 00 00 00 eb 0e 04 00     ..Mod.4.........
     eab:	6f 17 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     o.....Mod.5.....
     ebb:	eb 0e 05 00 6f 17 00 00 01 00 4d 6f 64 2e 36 00     ....o.....Mod.6.
     ecb:	00 00 00 00 eb 0e 06 00 6f 17 00 00 c1 00 4d 6f     ........o.....Mo
     edb:	64 2e 37 00 00 00 00 00 eb 0e 07 00 6f 17 00 00     d.7.........o...

00000eeb <menu_ModTestSelcted>:
     eeb:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     efb:	53 18 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     S.....Write.....
     f0b:	00 00 ad 05 06 17 42 17 01 00 54 65 73 74 50 74     ......B...TestPt
     f1b:	72 6e 00 00 00 00 00 00 73 27 00 00 c1 00 4c 6f     rn......s'....Lo
     f2b:	6f 70 54 73 74 00 00 00 00 00 00 00 87 18 00 00     opTst...........

00000f3b <menu_USBser>:
     f3b:	89 00 41 63 74 69 76 65 00 00 00 00 00 00 1b 0d     ..Active........
     f4b:	00 00 f5 19 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
     f5b:	00 00 00 00 cf 19 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
     f6b:	66 67 00 00 00 00 00 00 09 1a 00 00                 fg..........

00000f77 <menu_modAssign>:
     f77:	81 00 4d 61 6e 2e 33 00 00 00 00 00 7b 10 00 00     ..Man.3.....{...
     f87:	a3 17 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
     f97:	7b 10 01 00 a3 17 00 00 01 00 4d 61 6e 2e 31 00     {.........Man.1.
     fa7:	00 00 00 00 7b 10 02 00 a3 17 00 00 01 00 50 65     ....{.........Pe
     fb7:	64 61 6c 00 00 00 00 00 7b 10 03 00 a3 17 00 00     dal.....{.......
     fc7:	c1 00 52 65 67 69 73 74 65 72 00 00 db 0f 04 00     ..Register......
     fd7:	00 00 00 00                                         ....

00000fdb <menu_modSection8>:
     fdb:	81 00 53 65 63 74 2e 31 00 00 00 00 cb 10 00 00     ..Sect.1........
     feb:	d3 17 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     ffb:	cb 10 01 00 d3 17 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    100b:	00 00 00 00 cb 10 02 00 d3 17 00 00 01 00 53 65     ..............Se
    101b:	63 74 2e 34 00 00 00 00 cb 10 03 00 d3 17 00 00     ct.4............
    102b:	01 00 53 65 63 74 2e 35 00 00 00 00 cb 10 04 00     ..Sect.5........
    103b:	d3 17 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    104b:	cb 10 05 00 d3 17 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
    105b:	00 00 00 00 cb 10 06 00 d3 17 00 00 c1 00 53 65     ..............Se
    106b:	63 74 2e 38 00 00 00 00 cb 10 07 00 d3 17 00 00     ct.8............

0000107b <menu_modSection>:
    107b:	81 00 53 65 63 74 2e 31 00 00 00 00 07 11 00 00     ..Sect.1........
    108b:	ae 17 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    109b:	07 11 01 00 ae 17 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    10ab:	00 00 00 00 07 11 02 00 ae 17 00 00 c1 00 53 65     ..............Se
    10bb:	63 74 2e 34 00 00 00 00 07 11 03 00 ae 17 00 00     ct.4............

000010cb <menu_modDefineReg>:
    10cb:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f6 07     ..RegBeg........
    10db:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    10eb:	00 00 f7 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    10fb:	2f 42 69 74 00 00 f8 07 00 00 00 00                 /Bit........

00001107 <menu_modDefine>:
    1107:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 32 09     ..NoteBeg.....2.
    1117:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    1127:	00 00 33 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..3.......Module
    1137:	2f 42 69 74 00 00 34 09 00 00 00 00                 /Bit..4.....

00001143 <menu_status>:
    1143:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1153:	9c 22 00 00 02 40 4d 49 44 49 2d 49 6e 00 00 00     ."...@MIDI-In...
    1163:	00 00 00 00 20 22 00 00 c2 40 4d 49 44 49 2d 4f     .... "...@MIDI-O
    1173:	75 74 00 00 00 00 00 00 5e 22 00 00                 ut......^"..

0000117f <sw_version>:
    117f:	56 30 2e 36 33 00                                   V0.63.

00001185 <cplInfo>:
    1185:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    1195:	01 02 00 03 01 03 02 03                             ........

0000119d <keylabel_1>:
    119d:	31 00                                               1.

0000119f <keylabel_0>:
    119f:	30 00                                               0.

000011a1 <keylabel_text>:
    11a1:	54 65 78 74 80 00                                   Text..

000011a7 <keylabel_exit>:
    11a7:	45 78 69 74 00                                      Exit.

000011ac <keylabel_off>:
    11ac:	7e 61 75 73 00                                      ~aus.

000011b1 <keylabel_on>:
    11b1:	7e 65 69 6e 00                                      ~ein.

000011b6 <keylabel_onoff>:
    11b6:	45 69 6e 80 00                                      Ein..

000011bb <keylabel_minus>:
    11bb:	2d 00                                               -.

000011bd <keylabel_plus>:
    11bd:	2b 00                                               +.

000011bf <keylabel_left>:
    11bf:	7f 00                                               ..

000011c1 <keylabel_right>:
    11c1:	7e 00                                               ~.

000011c3 <keylabel_down>:
    11c3:	09 00                                               ..

000011c5 <keylabel_up>:
    11c5:	08 00                                               ..

000011c7 <cgPattern_Block>:
    11c7:	00 00 0e 0e 0e 0e 00 00                             ........

000011cf <cgPattern_Down>:
    11cf:	04 04 04 04 15 0e 04 00                             ........

000011d7 <cgPattern_Up>:
    11d7:	04 0e 15 04 04 04 04 00                             ........

000011df <cr_lf>:
    11df:	0d 0a 00                                            ...

000011e2 <__ctors_end>:
    11e2:	11 24       	eor	r1, r1
    11e4:	1f be       	out	0x3f, r1	; 63
    11e6:	cf ef       	ldi	r28, 0xFF	; 255
    11e8:	d1 e2       	ldi	r29, 0x21	; 33
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	00 e0       	ldi	r16, 0x00	; 0
    11f0:	0c bf       	out	0x3c, r16	; 60

000011f2 <__do_copy_data>:
    11f2:	12 e0       	ldi	r17, 0x02	; 2
    11f4:	a0 e0       	ldi	r26, 0x00	; 0
    11f6:	b2 e0       	ldi	r27, 0x02	; 2
    11f8:	ec eb       	ldi	r30, 0xBC	; 188
    11fa:	f0 e7       	ldi	r31, 0x70	; 112
    11fc:	00 e0       	ldi	r16, 0x00	; 0
    11fe:	0b bf       	out	0x3b, r16	; 59
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <__do_copy_data+0x14>
    1202:	07 90       	elpm	r0, Z+
    1204:	0d 92       	st	X+, r0
    1206:	a8 30       	cpi	r26, 0x08	; 8
    1208:	b1 07       	cpc	r27, r17
    120a:	d9 f7       	brne	.-10     	; 0x1202 <__do_copy_data+0x10>

0000120c <__do_clear_bss>:
    120c:	21 e1       	ldi	r18, 0x11	; 17
    120e:	a8 e0       	ldi	r26, 0x08	; 8
    1210:	b2 e0       	ldi	r27, 0x02	; 2
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <.do_clear_bss_start>

00001214 <.do_clear_bss_loop>:
    1214:	1d 92       	st	X+, r1

00001216 <.do_clear_bss_start>:
    1216:	a6 31       	cpi	r26, 0x16	; 22
    1218:	b2 07       	cpc	r27, r18
    121a:	e1 f7       	brne	.-8      	; 0x1214 <.do_clear_bss_loop>
    121c:	0e 94 8a 14 	call	0x2914	; 0x2914 <main>
    1220:	0c 94 5c 38 	jmp	0x70b8	; 0x70b8 <_exit>

00001224 <__bad_interrupt>:
    1224:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001228 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    1228:	fc 01       	movw	r30, r24
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	9f ef       	ldi	r25, 0xFF	; 255
    122e:	1c c0       	rjmp	.+56     	; 0x1268 <crc16_ram+0x40>
    1230:	df 01       	movw	r26, r30
    1232:	11 96       	adiw	r26, 0x01	; 1
    1234:	20 81       	ld	r18, Z
    1236:	82 27       	eor	r24, r18
    1238:	28 2f       	mov	r18, r24
    123a:	22 95       	swap	r18
    123c:	28 27       	eor	r18, r24
    123e:	02 2e       	mov	r0, r18
    1240:	26 95       	lsr	r18
    1242:	26 95       	lsr	r18
    1244:	20 25       	eor	r18, r0
    1246:	02 2e       	mov	r0, r18
    1248:	26 95       	lsr	r18
    124a:	20 25       	eor	r18, r0
    124c:	27 70       	andi	r18, 0x07	; 7
    124e:	08 2e       	mov	r0, r24
    1250:	89 2f       	mov	r24, r25
    1252:	26 95       	lsr	r18
    1254:	07 94       	ror	r0
    1256:	27 95       	ror	r18
    1258:	90 2d       	mov	r25, r0
    125a:	82 27       	eor	r24, r18
    125c:	06 94       	lsr	r0
    125e:	27 95       	ror	r18
    1260:	90 25       	eor	r25, r0
    1262:	82 27       	eor	r24, r18
    1264:	ba 01       	movw	r22, r20
    1266:	fd 01       	movw	r30, r26
    1268:	ab 01       	movw	r20, r22
    126a:	41 50       	subi	r20, 0x01	; 1
    126c:	51 09       	sbc	r21, r1
    126e:	67 2b       	or	r22, r23
    1270:	f9 f6       	brne	.-66     	; 0x1230 <crc16_ram+0x8>
    1272:	08 95       	ret

00001274 <crc16_eeprom>:
    1274:	ef 92       	push	r14
    1276:	ff 92       	push	r15
    1278:	0f 93       	push	r16
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	cf ef       	ldi	r28, 0xFF	; 255
    1282:	df ef       	ldi	r29, 0xFF	; 255
    1284:	21 c0       	rjmp	.+66     	; 0x12c8 <crc16_eeprom+0x54>
    1286:	7c 01       	movw	r14, r24
    1288:	2f ef       	ldi	r18, 0xFF	; 255
    128a:	e2 1a       	sub	r14, r18
    128c:	f2 0a       	sbc	r15, r18
    128e:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    1292:	9e 01       	movw	r18, r28
    1294:	28 27       	eor	r18, r24
    1296:	82 2f       	mov	r24, r18
    1298:	82 95       	swap	r24
    129a:	82 27       	eor	r24, r18
    129c:	08 2e       	mov	r0, r24
    129e:	86 95       	lsr	r24
    12a0:	86 95       	lsr	r24
    12a2:	80 25       	eor	r24, r0
    12a4:	08 2e       	mov	r0, r24
    12a6:	86 95       	lsr	r24
    12a8:	80 25       	eor	r24, r0
    12aa:	87 70       	andi	r24, 0x07	; 7
    12ac:	02 2e       	mov	r0, r18
    12ae:	23 2f       	mov	r18, r19
    12b0:	86 95       	lsr	r24
    12b2:	07 94       	ror	r0
    12b4:	87 95       	ror	r24
    12b6:	30 2d       	mov	r19, r0
    12b8:	28 27       	eor	r18, r24
    12ba:	06 94       	lsr	r0
    12bc:	87 95       	ror	r24
    12be:	30 25       	eor	r19, r0
    12c0:	28 27       	eor	r18, r24
    12c2:	e9 01       	movw	r28, r18
    12c4:	b8 01       	movw	r22, r16
    12c6:	c7 01       	movw	r24, r14
    12c8:	8b 01       	movw	r16, r22
    12ca:	01 50       	subi	r16, 0x01	; 1
    12cc:	11 09       	sbc	r17, r1
    12ce:	67 2b       	or	r22, r23
    12d0:	d1 f6       	brne	.-76     	; 0x1286 <crc16_eeprom+0x12>
    12d2:	ce 01       	movw	r24, r28
    12d4:	df 91       	pop	r29
    12d6:	cf 91       	pop	r28
    12d8:	1f 91       	pop	r17
    12da:	0f 91       	pop	r16
    12dc:	ff 90       	pop	r15
    12de:	ef 90       	pop	r14
    12e0:	08 95       	ret

000012e2 <crc16_ram_startVal>:
    12e2:	fc 01       	movw	r30, r24
    12e4:	ca 01       	movw	r24, r20
    12e6:	1c c0       	rjmp	.+56     	; 0x1320 <crc16_ram_startVal+0x3e>
    12e8:	df 01       	movw	r26, r30
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	20 81       	ld	r18, Z
    12ee:	82 27       	eor	r24, r18
    12f0:	28 2f       	mov	r18, r24
    12f2:	22 95       	swap	r18
    12f4:	28 27       	eor	r18, r24
    12f6:	02 2e       	mov	r0, r18
    12f8:	26 95       	lsr	r18
    12fa:	26 95       	lsr	r18
    12fc:	20 25       	eor	r18, r0
    12fe:	02 2e       	mov	r0, r18
    1300:	26 95       	lsr	r18
    1302:	20 25       	eor	r18, r0
    1304:	27 70       	andi	r18, 0x07	; 7
    1306:	08 2e       	mov	r0, r24
    1308:	89 2f       	mov	r24, r25
    130a:	26 95       	lsr	r18
    130c:	07 94       	ror	r0
    130e:	27 95       	ror	r18
    1310:	90 2d       	mov	r25, r0
    1312:	82 27       	eor	r24, r18
    1314:	06 94       	lsr	r0
    1316:	27 95       	ror	r18
    1318:	90 25       	eor	r25, r0
    131a:	82 27       	eor	r24, r18
    131c:	ba 01       	movw	r22, r20
    131e:	fd 01       	movw	r30, r26
    1320:	ab 01       	movw	r20, r22
    1322:	41 50       	subi	r20, 0x01	; 1
    1324:	51 09       	sbc	r21, r1
    1326:	67 2b       	or	r22, r23
    1328:	f9 f6       	brne	.-66     	; 0x12e8 <crc16_ram_startVal+0x6>
    132a:	08 95       	ret

0000132c <crc16_eeprom_startVal>:
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ea 01       	movw	r28, r20
    133a:	21 c0       	rjmp	.+66     	; 0x137e <crc16_eeprom_startVal+0x52>
    133c:	7c 01       	movw	r14, r24
    133e:	2f ef       	ldi	r18, 0xFF	; 255
    1340:	e2 1a       	sub	r14, r18
    1342:	f2 0a       	sbc	r15, r18
    1344:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    1348:	ae 01       	movw	r20, r28
    134a:	48 27       	eor	r20, r24
    134c:	84 2f       	mov	r24, r20
    134e:	82 95       	swap	r24
    1350:	84 27       	eor	r24, r20
    1352:	08 2e       	mov	r0, r24
    1354:	86 95       	lsr	r24
    1356:	86 95       	lsr	r24
    1358:	80 25       	eor	r24, r0
    135a:	08 2e       	mov	r0, r24
    135c:	86 95       	lsr	r24
    135e:	80 25       	eor	r24, r0
    1360:	87 70       	andi	r24, 0x07	; 7
    1362:	04 2e       	mov	r0, r20
    1364:	45 2f       	mov	r20, r21
    1366:	86 95       	lsr	r24
    1368:	07 94       	ror	r0
    136a:	87 95       	ror	r24
    136c:	50 2d       	mov	r21, r0
    136e:	48 27       	eor	r20, r24
    1370:	06 94       	lsr	r0
    1372:	87 95       	ror	r24
    1374:	50 25       	eor	r21, r0
    1376:	48 27       	eor	r20, r24
    1378:	ea 01       	movw	r28, r20
    137a:	b8 01       	movw	r22, r16
    137c:	c7 01       	movw	r24, r14
    137e:	8b 01       	movw	r16, r22
    1380:	01 50       	subi	r16, 0x01	; 1
    1382:	11 09       	sbc	r17, r1
    1384:	67 2b       	or	r22, r23
    1386:	d1 f6       	brne	.-76     	; 0x133c <crc16_eeprom_startVal+0x10>
    1388:	ce 01       	movw	r24, r28
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	1f 91       	pop	r17
    1390:	0f 91       	pop	r16
    1392:	ff 90       	pop	r15
    1394:	ef 90       	pop	r14
    1396:	08 95       	ret

00001398 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    139c:	82 e3       	ldi	r24, 0x32	; 50
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    13a4:	ec 01       	movw	r28, r24
    13a6:	60 e3       	ldi	r22, 0x30	; 48
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	62 df       	rcall	.-316    	; 0x1274 <crc16_eeprom>
    13b0:	c8 17       	cp	r28, r24
    13b2:	d9 07       	cpc	r29, r25
    13b4:	81 f4       	brne	.+32     	; 0x13d6 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    13be:	8d 34       	cpi	r24, 0x4D	; 77
    13c0:	51 f4       	brne	.+20     	; 0x13d6 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    13c2:	40 e3       	ldi	r20, 0x30	; 48
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	70 e0       	ldi	r23, 0x00	; 0
    13ca:	82 e3       	ldi	r24, 0x32	; 50
    13cc:	99 e0       	ldi	r25, 0x09	; 9
    13ce:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		return (EE_LOAD_OK);
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    13d6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    13da:	81 60       	ori	r24, 0x01	; 1
    13dc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	08 95       	ret

000013e8 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    13ec:	85 e3       	ldi	r24, 0x35	; 53
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    13f4:	ec 01       	movw	r28, r24
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	71 e0       	ldi	r23, 0x01	; 1
    13fa:	85 e3       	ldi	r24, 0x35	; 53
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	3a df       	rcall	.-396    	; 0x1274 <crc16_eeprom>
    1400:	c8 17       	cp	r28, r24
    1402:	d9 07       	cpc	r29, r25
    1404:	81 f4       	brne	.+32     	; 0x1426 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1406:	84 e3       	ldi	r24, 0x34	; 52
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    140e:	89 34       	cpi	r24, 0x49	; 73
    1410:	51 f4       	brne	.+20     	; 0x1426 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	51 e0       	ldi	r21, 0x01	; 1
    1416:	65 e3       	ldi	r22, 0x35	; 53
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	86 e2       	ldi	r24, 0x26	; 38
    141c:	98 e0       	ldi	r25, 0x08	; 8
    141e:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		return (EE_LOAD_OK);
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1426:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    142a:	82 60       	ori	r24, 0x02	; 2
    142c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1430:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	08 95       	ret

00001438 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1438:	cf 93       	push	r28
    143a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    143c:	83 e4       	ldi	r24, 0x43	; 67
    143e:	91 e0       	ldi	r25, 0x01	; 1
    1440:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    1444:	ec 01       	movw	r28, r24
    1446:	6b e0       	ldi	r22, 0x0B	; 11
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	88 e3       	ldi	r24, 0x38	; 56
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	12 df       	rcall	.-476    	; 0x1274 <crc16_eeprom>
    1450:	c8 17       	cp	r28, r24
    1452:	d9 07       	cpc	r29, r25
    1454:	c1 f4       	brne	.+48     	; 0x1486 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    1456:	87 e3       	ldi	r24, 0x37	; 55
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    145e:	8f 34       	cpi	r24, 0x4F	; 79
    1460:	91 f4       	brne	.+36     	; 0x1486 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1462:	48 e0       	ldi	r20, 0x08	; 8
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	68 e3       	ldi	r22, 0x38	; 56
    1468:	71 e0       	ldi	r23, 0x01	; 1
    146a:	86 e2       	ldi	r24, 0x26	; 38
    146c:	99 e0       	ldi	r25, 0x09	; 9
    146e:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1472:	43 e0       	ldi	r20, 0x03	; 3
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	60 e4       	ldi	r22, 0x40	; 64
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	8e e2       	ldi	r24, 0x2E	; 46
    147c:	99 e0       	ldi	r25, 0x09	; 9
    147e:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		return (EE_LOAD_OK);
    1482:	80 e0       	ldi	r24, 0x00	; 0
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    1486:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    148a:	84 60       	ori	r24, 0x04	; 4
    148c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1490:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    149c:	88 e4       	ldi	r24, 0x48	; 72
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    14a4:	ec 01       	movw	r28, r24
    14a6:	61 e0       	ldi	r22, 0x01	; 1
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	86 e4       	ldi	r24, 0x46	; 70
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	e2 de       	rcall	.-572    	; 0x1274 <crc16_eeprom>
    14b0:	c8 17       	cp	r28, r24
    14b2:	d9 07       	cpc	r29, r25
    14b4:	a1 f4       	brne	.+40     	; 0x14de <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    14b6:	85 e4       	ldi	r24, 0x45	; 69
    14b8:	91 e0       	ldi	r25, 0x01	; 1
    14ba:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    14be:	89 36       	cpi	r24, 0x69	; 105
    14c0:	71 f4       	brne	.+28     	; 0x14de <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    14c2:	86 e4       	ldi	r24, 0x46	; 70
    14c4:	91 e0       	ldi	r25, 0x01	; 1
    14c6:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    14ca:	c5 e5       	ldi	r28, 0x55	; 85
    14cc:	d3 e0       	ldi	r29, 0x03	; 3
    14ce:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    14d0:	87 e4       	ldi	r24, 0x47	; 71
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    14d8:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    14de:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14e2:	88 60       	ori	r24, 0x08	; 8
    14e4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	08 95       	ret

000014f0 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    14f4:	87 ef       	ldi	r24, 0xF7	; 247
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    14fc:	ec 01       	movw	r28, r24
    14fe:	62 e0       	ldi	r22, 0x02	; 2
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	85 ef       	ldi	r24, 0xF5	; 245
    1504:	93 e0       	ldi	r25, 0x03	; 3
    1506:	b6 de       	rcall	.-660    	; 0x1274 <crc16_eeprom>
    1508:	c8 17       	cp	r28, r24
    150a:	d9 07       	cpc	r29, r25
    150c:	81 f4       	brne	.+32     	; 0x152e <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    150e:	84 ef       	ldi	r24, 0xF4	; 244
    1510:	93 e0       	ldi	r25, 0x03	; 3
    1512:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    1516:	84 35       	cpi	r24, 0x54	; 84
    1518:	51 f4       	brne	.+20     	; 0x152e <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    151a:	42 e0       	ldi	r20, 0x02	; 2
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	65 ef       	ldi	r22, 0xF5	; 245
    1520:	73 e0       	ldi	r23, 0x03	; 3
    1522:	84 e2       	ldi	r24, 0x24	; 36
    1524:	98 e0       	ldi	r25, 0x08	; 8
    1526:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		return (EE_LOAD_OK);
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	06 c0       	rjmp	.+12     	; 0x153a <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    152e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1538:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1544:	8c e4       	ldi	r24, 0x4C	; 76
    1546:	91 e0       	ldi	r25, 0x01	; 1
    1548:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    154c:	ec 01       	movw	r28, r24
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	8b e4       	ldi	r24, 0x4B	; 75
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	8e de       	rcall	.-740    	; 0x1274 <crc16_eeprom>
    1558:	c8 17       	cp	r28, r24
    155a:	d9 07       	cpc	r29, r25
    155c:	71 f4       	brne	.+28     	; 0x157a <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    155e:	8a e4       	ldi	r24, 0x4A	; 74
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    1566:	85 35       	cpi	r24, 0x55	; 85
    1568:	41 f4       	brne	.+16     	; 0x157a <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serusb_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    156a:	8b e4       	ldi	r24, 0x4B	; 75
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    1572:	80 93 1b 0d 	sts	0x0D1B, r24	; 0x800d1b <serusb_Active>
		return (EE_LOAD_OK);
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    157a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    157e:	88 60       	ori	r24, 0x08	; 8
    1580:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1584:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    1590:	61 e0       	ldi	r22, 0x01	; 1
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	8f e4       	ldi	r24, 0x4F	; 79
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	6d de       	rcall	.-806    	; 0x1274 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    159a:	ac 01       	movw	r20, r24
    159c:	68 e1       	ldi	r22, 0x18	; 24
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	80 e5       	ldi	r24, 0x50	; 80
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	c3 de       	rcall	.-634    	; 0x132c <crc16_eeprom_startVal>
    15a6:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    15a8:	88 e6       	ldi	r24, 0x68	; 104
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    15b0:	c8 17       	cp	r28, r24
    15b2:	d9 07       	cpc	r29, r25
    15b4:	b1 f4       	brne	.+44     	; 0x15e2 <eeprom_ReadReg+0x56>
    15b6:	8e e4       	ldi	r24, 0x4E	; 78
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    15be:	82 35       	cpi	r24, 0x52	; 82
    15c0:	81 f4       	brne	.+32     	; 0x15e2 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    15c2:	8f e4       	ldi	r24, 0x4F	; 79
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    15ca:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    15ce:	48 e1       	ldi	r20, 0x18	; 24
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	60 e5       	ldi	r22, 0x50	; 80
    15d4:	71 e0       	ldi	r23, 0x01	; 1
    15d6:	86 ef       	ldi	r24, 0xF6	; 246
    15d8:	97 e0       	ldi	r25, 0x07	; 7
    15da:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		return(EE_LOAD_OK);
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	06 c0       	rjmp	.+12     	; 0x15ee <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    15e2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15e6:	80 62       	ori	r24, 0x20	; 32
    15e8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15ec:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	08 95       	ret

000015f4 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    15f4:	cf 93       	push	r28
    15f6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    15f8:	8b ee       	ldi	r24, 0xEB	; 235
    15fa:	93 e0       	ldi	r25, 0x03	; 3
    15fc:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    1600:	ec 01       	movw	r28, r24
    1602:	60 e8       	ldi	r22, 0x80	; 128
    1604:	72 e0       	ldi	r23, 0x02	; 2
    1606:	8b e6       	ldi	r24, 0x6B	; 107
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	34 de       	rcall	.-920    	; 0x1274 <crc16_eeprom>
    160c:	c8 17       	cp	r28, r24
    160e:	d9 07       	cpc	r29, r25
    1610:	81 f4       	brne	.+32     	; 0x1632 <eeprom_ReadProg+0x3e>
    1612:	8a e6       	ldi	r24, 0x6A	; 106
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    161a:	80 35       	cpi	r24, 0x50	; 80
    161c:	51 f4       	brne	.+20     	; 0x1632 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	52 e0       	ldi	r21, 0x02	; 2
    1622:	6b e6       	ldi	r22, 0x6B	; 107
    1624:	71 e0       	ldi	r23, 0x01	; 1
    1626:	82 e6       	ldi	r24, 0x62	; 98
    1628:	99 e0       	ldi	r25, 0x09	; 9
    162a:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		return(EE_LOAD_OK);
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	06 c0       	rjmp	.+12     	; 0x163e <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1632:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1636:	80 64       	ori	r24, 0x40	; 64
    1638:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    163c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    1648:	82 ef       	ldi	r24, 0xF2	; 242
    164a:	93 e0       	ldi	r25, 0x03	; 3
    164c:	0e 94 32 38 	call	0x7064	; 0x7064 <eeprom_read_word>
    1650:	ec 01       	movw	r28, r24
    1652:	64 e0       	ldi	r22, 0x04	; 4
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	8e ee       	ldi	r24, 0xEE	; 238
    1658:	93 e0       	ldi	r25, 0x03	; 3
    165a:	0c de       	rcall	.-1000   	; 0x1274 <crc16_eeprom>
    165c:	c8 17       	cp	r28, r24
    165e:	d9 07       	cpc	r29, r25
    1660:	51 f4       	brne	.+20     	; 0x1676 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1662:	44 e0       	ldi	r20, 0x04	; 4
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	6e ee       	ldi	r22, 0xEE	; 238
    1668:	73 e0       	ldi	r23, 0x03	; 3
    166a:	83 eb       	ldi	r24, 0xB3	; 179
    166c:	95 e0       	ldi	r25, 0x05	; 5
    166e:	0e 94 1a 38 	call	0x7034	; 0x7034 <eeprom_read_block>
		return(EE_LOAD_OK);
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	06 c0       	rjmp	.+12     	; 0x1682 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    1676:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    167a:	80 68       	ori	r24, 0x80	; 128
    167c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1680:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	08 95       	ret

00001688 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1692:	65 e6       	ldi	r22, 0x65	; 101
    1694:	89 ef       	ldi	r24, 0xF9	; 249
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	0c 94 46 38 	jmp	0x708c	; 0x708c <eeprom_update_byte>
    169c:	08 95       	ret

0000169e <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    16a2:	60 e3       	ldi	r22, 0x30	; 48
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	82 e3       	ldi	r24, 0x32	; 50
    16a8:	99 e0       	ldi	r25, 0x09	; 9
    16aa:	be dd       	rcall	.-1156   	; 0x1228 <crc16_ram>
    16ac:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    16ae:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    16b2:	6d e4       	ldi	r22, 0x4D	; 77
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    16bc:	40 e3       	ldi	r20, 0x30	; 48
    16be:	50 e0       	ldi	r21, 0x00	; 0
    16c0:	62 e0       	ldi	r22, 0x02	; 2
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	82 e3       	ldi	r24, 0x32	; 50
    16c6:	99 e0       	ldi	r25, 0x09	; 9
    16c8:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    16cc:	be 01       	movw	r22, r28
    16ce:	82 e3       	ldi	r24, 0x32	; 50
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    16d6:	d8 df       	rcall	.-80     	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    16d8:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	08 95       	ret

000016e2 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	71 e0       	ldi	r23, 0x01	; 1
    16ea:	86 e2       	ldi	r24, 0x26	; 38
    16ec:	98 e0       	ldi	r25, 0x08	; 8
    16ee:	9c dd       	rcall	.-1224   	; 0x1228 <crc16_ram>
    16f0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    16f2:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    16f6:	69 e4       	ldi	r22, 0x49	; 73
    16f8:	84 e3       	ldi	r24, 0x34	; 52
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1700:	40 e0       	ldi	r20, 0x00	; 0
    1702:	51 e0       	ldi	r21, 0x01	; 1
    1704:	65 e3       	ldi	r22, 0x35	; 53
    1706:	70 e0       	ldi	r23, 0x00	; 0
    1708:	86 e2       	ldi	r24, 0x26	; 38
    170a:	98 e0       	ldi	r25, 0x08	; 8
    170c:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1710:	be 01       	movw	r22, r28
    1712:	85 e3       	ldi	r24, 0x35	; 53
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    171a:	b6 df       	rcall	.-148    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    171c:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	08 95       	ret

00001726 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    172a:	68 e0       	ldi	r22, 0x08	; 8
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	86 e2       	ldi	r24, 0x26	; 38
    1730:	99 e0       	ldi	r25, 0x09	; 9
    1732:	7a dd       	rcall	.-1292   	; 0x1228 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1734:	ac 01       	movw	r20, r24
    1736:	63 e0       	ldi	r22, 0x03	; 3
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	8e e2       	ldi	r24, 0x2E	; 46
    173c:	99 e0       	ldi	r25, 0x09	; 9
    173e:	d1 dd       	rcall	.-1118   	; 0x12e2 <crc16_ram_startVal>
    1740:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1742:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    1746:	6f e4       	ldi	r22, 0x4F	; 79
    1748:	87 e3       	ldi	r24, 0x37	; 55
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1750:	48 e0       	ldi	r20, 0x08	; 8
    1752:	50 e0       	ldi	r21, 0x00	; 0
    1754:	68 e3       	ldi	r22, 0x38	; 56
    1756:	71 e0       	ldi	r23, 0x01	; 1
    1758:	86 e2       	ldi	r24, 0x26	; 38
    175a:	99 e0       	ldi	r25, 0x09	; 9
    175c:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1760:	43 e0       	ldi	r20, 0x03	; 3
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	60 e4       	ldi	r22, 0x40	; 64
    1766:	71 e0       	ldi	r23, 0x01	; 1
    1768:	8e e2       	ldi	r24, 0x2E	; 46
    176a:	99 e0       	ldi	r25, 0x09	; 9
    176c:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1770:	be 01       	movw	r22, r28
    1772:	83 e4       	ldi	r24, 0x43	; 67
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    177a:	86 df       	rcall	.-244    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    177c:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    1780:	df 91       	pop	r29
    1782:	cf 91       	pop	r28
    1784:	08 95       	ret

00001786 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1786:	0f 93       	push	r16
    1788:	1f 93       	push	r17
    178a:	cf 93       	push	r28
    178c:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	85 e5       	ldi	r24, 0x55	; 85
    1794:	93 e0       	ldi	r25, 0x03	; 3
    1796:	48 dd       	rcall	.-1392   	; 0x1228 <crc16_ram>
    1798:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    179a:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    179e:	69 e6       	ldi	r22, 0x69	; 105
    17a0:	85 e4       	ldi	r24, 0x45	; 69
    17a2:	91 e0       	ldi	r25, 0x01	; 1
    17a4:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    17a8:	c5 e5       	ldi	r28, 0x55	; 85
    17aa:	d3 e0       	ldi	r29, 0x03	; 3
    17ac:	68 81       	ld	r22, Y
    17ae:	86 e4       	ldi	r24, 0x46	; 70
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    17b6:	69 81       	ldd	r22, Y+1	; 0x01
    17b8:	87 e4       	ldi	r24, 0x47	; 71
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    17c0:	b8 01       	movw	r22, r16
    17c2:	88 e4       	ldi	r24, 0x48	; 72
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    17ca:	5e df       	rcall	.-324    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    17cc:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	08 95       	ret

000017da <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serusb_Active, sizeof(serusb_Active));
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	8b e1       	ldi	r24, 0x1B	; 27
    17e4:	9d e0       	ldi	r25, 0x0D	; 13
    17e6:	20 dd       	rcall	.-1472   	; 0x1228 <crc16_ram>
    17e8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17ea:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    17ee:	65 e5       	ldi	r22, 0x55	; 85
    17f0:	8a e4       	ldi	r24, 0x4A	; 74
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serusb_Active);
    17f8:	60 91 1b 0d 	lds	r22, 0x0D1B	; 0x800d1b <serusb_Active>
    17fc:	8b e4       	ldi	r24, 0x4B	; 75
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1804:	be 01       	movw	r22, r28
    1806:	8c e4       	ldi	r24, 0x4C	; 76
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    180e:	3c df       	rcall	.-392    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1810:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    181e:	62 e0       	ldi	r22, 0x02	; 2
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	84 e2       	ldi	r24, 0x24	; 36
    1824:	98 e0       	ldi	r25, 0x08	; 8
    1826:	00 dd       	rcall	.-1536   	; 0x1228 <crc16_ram>
    1828:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    182a:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    182e:	64 e5       	ldi	r22, 0x54	; 84
    1830:	84 ef       	ldi	r24, 0xF4	; 244
    1832:	93 e0       	ldi	r25, 0x03	; 3
    1834:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1838:	42 e0       	ldi	r20, 0x02	; 2
    183a:	50 e0       	ldi	r21, 0x00	; 0
    183c:	65 ef       	ldi	r22, 0xF5	; 245
    183e:	73 e0       	ldi	r23, 0x03	; 3
    1840:	84 e2       	ldi	r24, 0x24	; 36
    1842:	98 e0       	ldi	r25, 0x08	; 8
    1844:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1848:	be 01       	movw	r22, r28
    184a:	87 ef       	ldi	r24, 0xF7	; 247
    184c:	93 e0       	ldi	r25, 0x03	; 3
    184e:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    1852:	1a df       	rcall	.-460    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1854:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    185e:	cf 93       	push	r28
    1860:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1862:	61 e0       	ldi	r22, 0x01	; 1
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	8e e0       	ldi	r24, 0x0E	; 14
    1868:	98 e0       	ldi	r25, 0x08	; 8
    186a:	de dc       	rcall	.-1604   	; 0x1228 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    186c:	ac 01       	movw	r20, r24
    186e:	68 e1       	ldi	r22, 0x18	; 24
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	86 ef       	ldi	r24, 0xF6	; 246
    1874:	97 e0       	ldi	r25, 0x07	; 7
    1876:	35 dd       	rcall	.-1430   	; 0x12e2 <crc16_ram_startVal>
    1878:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    187a:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    187e:	62 e5       	ldi	r22, 0x52	; 82
    1880:	8e e4       	ldi	r24, 0x4E	; 78
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1888:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <registerCount>
    188c:	8f e4       	ldi	r24, 0x4F	; 79
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1894:	48 e1       	ldi	r20, 0x18	; 24
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	60 e5       	ldi	r22, 0x50	; 80
    189a:	71 e0       	ldi	r23, 0x01	; 1
    189c:	86 ef       	ldi	r24, 0xF6	; 246
    189e:	97 e0       	ldi	r25, 0x07	; 7
    18a0:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    18a4:	be 01       	movw	r22, r28
    18a6:	88 e6       	ldi	r24, 0x68	; 104
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    18ae:	ec de       	rcall	.-552    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18b0:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    18be:	60 e8       	ldi	r22, 0x80	; 128
    18c0:	72 e0       	ldi	r23, 0x02	; 2
    18c2:	82 e6       	ldi	r24, 0x62	; 98
    18c4:	99 e0       	ldi	r25, 0x09	; 9
    18c6:	b0 dc       	rcall	.-1696   	; 0x1228 <crc16_ram>
    18c8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    18ca:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    18ce:	60 e5       	ldi	r22, 0x50	; 80
    18d0:	8a e6       	ldi	r24, 0x6A	; 106
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	52 e0       	ldi	r21, 0x02	; 2
    18dc:	6b e6       	ldi	r22, 0x6B	; 107
    18de:	71 e0       	ldi	r23, 0x01	; 1
    18e0:	82 e6       	ldi	r24, 0x62	; 98
    18e2:	99 e0       	ldi	r25, 0x09	; 9
    18e4:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    18e8:	be 01       	movw	r22, r28
    18ea:	8b ee       	ldi	r24, 0xEB	; 235
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    18f2:	ca de       	rcall	.-620    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18f4:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1902:	64 e0       	ldi	r22, 0x04	; 4
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	83 eb       	ldi	r24, 0xB3	; 179
    1908:	95 e0       	ldi	r25, 0x05	; 5
    190a:	8e dc       	rcall	.-1764   	; 0x1228 <crc16_ram>
    190c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    190e:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1912:	6b e4       	ldi	r22, 0x4B	; 75
    1914:	8d ee       	ldi	r24, 0xED	; 237
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    191c:	44 e0       	ldi	r20, 0x04	; 4
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	6e ee       	ldi	r22, 0xEE	; 238
    1922:	73 e0       	ldi	r23, 0x03	; 3
    1924:	83 eb       	ldi	r24, 0xB3	; 179
    1926:	95 e0       	ldi	r25, 0x05	; 5
    1928:	0e 94 37 38 	call	0x706e	; 0x706e <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    192c:	be 01       	movw	r22, r28
    192e:	82 ef       	ldi	r24, 0xF2	; 242
    1930:	93 e0       	ldi	r25, 0x03	; 3
    1932:	0e 94 58 38 	call	0x70b0	; 0x70b0 <eeprom_update_word>
	eepromWriteSignature();
    1936:	a8 de       	rcall	.-688    	; 0x1688 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1938:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1942:	ad de       	rcall	.-678    	; 0x169e <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1944:	ce de       	rcall	.-612    	; 0x16e2 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1946:	ef de       	rcall	.-546    	; 0x1726 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1948:	1e df       	rcall	.-452    	; 0x1786 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    194a:	47 df       	rcall	.-370    	; 0x17da <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    194c:	88 df       	rcall	.-240    	; 0x185e <eeprom_UpdateReg>
    194e:	b5 df       	rcall	.-150    	; 0x18ba <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1950:	d6 df       	rcall	.-84     	; 0x18fe <eeprom_UpdateSoftkeys>
    1952:	63 cf       	rjmp	.-314    	; 0x181a <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1954:	08 95       	ret

00001956 <eepromCopy>:
    1956:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    1958:	df 92       	push	r13
    195a:	ef 92       	push	r14
    195c:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    195e:	0f 93       	push	r16
    1960:	1f 93       	push	r17
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1968:	11 c0       	rjmp	.+34     	; 0x198c <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    196a:	7c 01       	movw	r14, r24
    196c:	2f ef       	ldi	r18, 0xFF	; 255
    196e:	e2 1a       	sub	r14, r18
    1970:	f2 0a       	sbc	r15, r18
    1972:	0e 94 2a 38 	call	0x7054	; 0x7054 <eeprom_read_byte>
    1976:	6e 01       	movw	r12, r28
    1978:	9f ef       	ldi	r25, 0xFF	; 255
    197a:	c9 1a       	sub	r12, r25
    197c:	d9 0a       	sbc	r13, r25
    197e:	68 2f       	mov	r22, r24
    1980:	ce 01       	movw	r24, r28
    1982:	0e 94 46 38 	call	0x708c	; 0x708c <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1986:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1988:	e6 01       	movw	r28, r12
    198a:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    198c:	8a 01       	movw	r16, r20
    198e:	01 50       	subi	r16, 0x01	; 1
    1990:	11 09       	sbc	r17, r1
    1992:	45 2b       	or	r20, r21
    1994:	51 f7       	brne	.-44     	; 0x196a <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	ff 90       	pop	r15
    19a0:	ef 90       	pop	r14
    19a2:	df 90       	pop	r13
    19a4:	cf 90       	pop	r12
    19a6:	08 95       	ret

000019a8 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    19a8:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	58 e0       	ldi	r21, 0x08	; 8
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	78 e0       	ldi	r23, 0x08	; 8
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	ce df       	rcall	.-100    	; 0x1956 <eepromCopy>
	lcd_waitSymbolOff();
    19ba:	0c 94 52 37 	jmp	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
    19be:	08 95       	ret

000019c0 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    19c0:	0e 94 44 37 	call	0x6e88	; 0x6e88 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    19c4:	40 e0       	ldi	r20, 0x00	; 0
    19c6:	58 e0       	ldi	r21, 0x08	; 8
    19c8:	60 e0       	ldi	r22, 0x00	; 0
    19ca:	70 e0       	ldi	r23, 0x00	; 0
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	98 e0       	ldi	r25, 0x08	; 8
    19d0:	c2 df       	rcall	.-124    	; 0x1956 <eepromCopy>
	lcd_waitSymbolOff();
    19d2:	0c 94 52 37 	jmp	0x6ea4	; 0x6ea4 <lcd_waitSymbolOff>
    19d6:	08 95       	ret

000019d8 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	0a c0       	rjmp	.+20     	; 0x19f0 <init_Timers+0x18>
    19dc:	e8 2f       	mov	r30, r24
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	ee 0f       	add	r30, r30
    19e2:	ff 1f       	adc	r31, r31
    19e4:	e1 5d       	subi	r30, 0xD1	; 209
    19e6:	fd 4f       	sbci	r31, 0xFD	; 253
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	90 83       	st	Z, r25
    19ec:	11 82       	std	Z+1, r1	; 0x01
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	89 30       	cpi	r24, 0x09	; 9
    19f2:	a0 f3       	brcs	.-24     	; 0x19dc <init_Timers+0x4>
    19f4:	e1 e4       	ldi	r30, 0x41	; 65
    19f6:	f2 e0       	ldi	r31, 0x02	; 2
    19f8:	10 82       	st	Z, r1
    19fa:	11 82       	std	Z+1, r1	; 0x01
    19fc:	12 82       	std	Z+2, r1	; 0x02
    19fe:	13 82       	std	Z+3, r1	; 0x03
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1a06:	08 95       	ret

00001a08 <init_HwTimer>:
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	84 bd       	out	0x24, r24	; 36
    1a0c:	93 e0       	ldi	r25, 0x03	; 3
    1a0e:	95 bd       	out	0x25, r25	; 37
    1a10:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1a14:	89 ef       	ldi	r24, 0xF9	; 249
    1a16:	87 bd       	out	0x27, r24	; 39
    1a18:	85 b1       	in	r24, 0x05	; 5
    1a1a:	8f 77       	andi	r24, 0x7F	; 127
    1a1c:	85 b9       	out	0x05, r24	; 5
    1a1e:	84 b1       	in	r24, 0x04	; 4
    1a20:	80 68       	ori	r24, 0x80	; 128
    1a22:	84 b9       	out	0x04, r24	; 4
    1a24:	08 95       	ret

00001a26 <init_ADC>:
    1a26:	87 e8       	ldi	r24, 0x87	; 135
    1a28:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1a2c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1a30:	8f e7       	ldi	r24, 0x7F	; 127
    1a32:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1a3c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1a40:	e9 e4       	ldi	r30, 0x49	; 73
    1a42:	f3 e0       	ldi	r31, 0x03	; 3
    1a44:	10 82       	st	Z, r1
    1a46:	8f ef       	ldi	r24, 0xFF	; 255
    1a48:	81 83       	std	Z+1, r24	; 0x01
    1a4a:	82 83       	std	Z+2, r24	; 0x02
    1a4c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	10 c0       	rjmp	.+32     	; 0x1a74 <init_ADC+0x4e>
    1a54:	85 30       	cpi	r24, 0x05	; 5
    1a56:	39 f4       	brne	.+14     	; 0x1a66 <init_ADC+0x40>
    1a58:	e8 2f       	mov	r30, r24
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	e1 5b       	subi	r30, 0xB1	; 177
    1a5e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a60:	96 e0       	ldi	r25, 0x06	; 6
    1a62:	90 83       	st	Z, r25
    1a64:	06 c0       	rjmp	.+12     	; 0x1a72 <init_ADC+0x4c>
    1a66:	e8 2f       	mov	r30, r24
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	e1 5b       	subi	r30, 0xB1	; 177
    1a6c:	fc 4f       	sbci	r31, 0xFC	; 252
    1a6e:	9a e0       	ldi	r25, 0x0A	; 10
    1a70:	90 83       	st	Z, r25
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	86 30       	cpi	r24, 0x06	; 6
    1a76:	70 f3       	brcs	.-36     	; 0x1a54 <init_ADC+0x2e>
    1a78:	08 95       	ret

00001a7a <init_Pipe>:
    1a7a:	8f ef       	ldi	r24, 0xFF	; 255
    1a7c:	88 b9       	out	0x08, r24	; 8
    1a7e:	87 b9       	out	0x07, r24	; 7
    1a80:	82 b9       	out	0x02, r24	; 2
    1a82:	11 b8       	out	0x01, r1	; 1
    1a84:	84 b3       	in	r24, 0x14	; 20
    1a86:	87 60       	ori	r24, 0x07	; 7
    1a88:	84 bb       	out	0x14, r24	; 20
    1a8a:	83 b3       	in	r24, 0x13	; 19
    1a8c:	87 60       	ori	r24, 0x07	; 7
    1a8e:	83 bb       	out	0x13, r24	; 19
    1a90:	8b b1       	in	r24, 0x0b	; 11
    1a92:	8f 77       	andi	r24, 0x7F	; 127
    1a94:	8b b9       	out	0x0b, r24	; 11
    1a96:	8a b1       	in	r24, 0x0a	; 10
    1a98:	80 68       	ori	r24, 0x80	; 128
    1a9a:	8a b9       	out	0x0a, r24	; 10
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	0e c0       	rjmp	.+28     	; 0x1abc <init_Pipe+0x42>
    1aa0:	e8 2f       	mov	r30, r24
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	e7 5b       	subi	r30, 0xB7	; 183
    1ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ab4:	9f ef       	ldi	r25, 0xFF	; 255
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	90 83       	st	Z, r25
    1aba:	8f 5f       	subi	r24, 0xFF	; 255
    1abc:	80 32       	cpi	r24, 0x20	; 32
    1abe:	80 f3       	brcs	.-32     	; 0x1aa0 <init_Pipe+0x26>
    1ac0:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1ac4:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1ac8:	08 95       	ret

00001aca <init_PipeModules>:
    1aca:	e6 dc       	rcall	.-1588   	; 0x1498 <eeprom_ReadModules>
    1acc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ace:	51 f4       	brne	.+20     	; 0x1ae4 <init_PipeModules+0x1a>
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	50 e0       	ldi	r21, 0x00	; 0
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	07 d7       	rcall	.+3598   	; 0x28e8 <log_putError>
    1ada:	e5 e5       	ldi	r30, 0x55	; 85
    1adc:	f3 e0       	ldi	r31, 0x03	; 3
    1ade:	8f ef       	ldi	r24, 0xFF	; 255
    1ae0:	80 83       	st	Z, r24
    1ae2:	81 83       	std	Z+1, r24	; 0x01
    1ae4:	8b b1       	in	r24, 0x0b	; 11
    1ae6:	8f 77       	andi	r24, 0x7F	; 127
    1ae8:	8b b9       	out	0x0b, r24	; 11
    1aea:	84 b3       	in	r24, 0x14	; 20
    1aec:	87 60       	ori	r24, 0x07	; 7
    1aee:	84 bb       	out	0x14, r24	; 20
    1af0:	84 b3       	in	r24, 0x14	; 20
    1af2:	8b 7f       	andi	r24, 0xFB	; 251
    1af4:	84 bb       	out	0x14, r24	; 20
    1af6:	85 e0       	ldi	r24, 0x05	; 5
    1af8:	8a 95       	dec	r24
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <init_PipeModules+0x2e>
    1afc:	00 00       	nop
    1afe:	84 b3       	in	r24, 0x14	; 20
    1b00:	84 60       	ori	r24, 0x04	; 4
    1b02:	84 bb       	out	0x14, r24	; 20
    1b04:	90 e2       	ldi	r25, 0x20	; 32
    1b06:	84 b3       	in	r24, 0x14	; 20
    1b08:	81 60       	ori	r24, 0x01	; 1
    1b0a:	84 bb       	out	0x14, r24	; 20
    1b0c:	90 fd       	sbrc	r25, 0
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <init_PipeModules+0x4a>
    1b10:	85 e5       	ldi	r24, 0x55	; 85
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <init_PipeModules+0x4c>
    1b14:	8a ea       	ldi	r24, 0xAA	; 170
    1b16:	88 b9       	out	0x08, r24	; 8
    1b18:	80 b1       	in	r24, 0x00	; 0
    1b1a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1b1e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1b22:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1b26:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1b2a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1b2e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1b32:	84 b3       	in	r24, 0x14	; 20
    1b34:	8e 7f       	andi	r24, 0xFE	; 254
    1b36:	84 bb       	out	0x14, r24	; 20
    1b38:	85 e0       	ldi	r24, 0x05	; 5
    1b3a:	8a 95       	dec	r24
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <init_PipeModules+0x70>
    1b3e:	00 00       	nop
    1b40:	91 50       	subi	r25, 0x01	; 1
    1b42:	09 f7       	brne	.-62     	; 0x1b06 <init_PipeModules+0x3c>
    1b44:	90 e2       	ldi	r25, 0x20	; 32
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <init_PipeModules+0x9c>
    1b48:	84 b3       	in	r24, 0x14	; 20
    1b4a:	81 60       	ori	r24, 0x01	; 1
    1b4c:	84 bb       	out	0x14, r24	; 20
    1b4e:	82 e0       	ldi	r24, 0x02	; 2
    1b50:	8a 95       	dec	r24
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <init_PipeModules+0x86>
    1b54:	00 c0       	rjmp	.+0      	; 0x1b56 <init_PipeModules+0x8c>
    1b56:	84 b3       	in	r24, 0x14	; 20
    1b58:	8e 7f       	andi	r24, 0xFE	; 254
    1b5a:	84 bb       	out	0x14, r24	; 20
    1b5c:	82 e0       	ldi	r24, 0x02	; 2
    1b5e:	8a 95       	dec	r24
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <init_PipeModules+0x94>
    1b62:	00 c0       	rjmp	.+0      	; 0x1b64 <init_PipeModules+0x9a>
    1b64:	91 50       	subi	r25, 0x01	; 1
    1b66:	91 11       	cpse	r25, r1
    1b68:	ef cf       	rjmp	.-34     	; 0x1b48 <init_PipeModules+0x7e>
    1b6a:	8f ef       	ldi	r24, 0xFF	; 255
    1b6c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1b70:	90 e2       	ldi	r25, 0x20	; 32
    1b72:	84 b3       	in	r24, 0x14	; 20
    1b74:	81 60       	ori	r24, 0x01	; 1
    1b76:	84 bb       	out	0x14, r24	; 20
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	88 b9       	out	0x08, r24	; 8
    1b7c:	20 b1       	in	r18, 0x00	; 0
    1b7e:	90 fd       	sbrc	r25, 0
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <init_PipeModules+0xbc>
    1b82:	8a ea       	ldi	r24, 0xAA	; 170
    1b84:	01 c0       	rjmp	.+2      	; 0x1b88 <init_PipeModules+0xbe>
    1b86:	85 e5       	ldi	r24, 0x55	; 85
    1b88:	82 27       	eor	r24, r18
    1b8a:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1b8e:	82 23       	and	r24, r18
    1b90:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1b94:	84 b3       	in	r24, 0x14	; 20
    1b96:	8e 7f       	andi	r24, 0xFE	; 254
    1b98:	84 bb       	out	0x14, r24	; 20
    1b9a:	85 e0       	ldi	r24, 0x05	; 5
    1b9c:	8a 95       	dec	r24
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <init_PipeModules+0xd2>
    1ba0:	00 00       	nop
    1ba2:	91 50       	subi	r25, 0x01	; 1
    1ba4:	31 f7       	brne	.-52     	; 0x1b72 <init_PipeModules+0xa8>
    1ba6:	00 00       	nop
    1ba8:	00 00       	nop
    1baa:	84 b3       	in	r24, 0x14	; 20
    1bac:	81 60       	ori	r24, 0x01	; 1
    1bae:	84 bb       	out	0x14, r24	; 20
    1bb0:	84 b3       	in	r24, 0x14	; 20
    1bb2:	87 60       	ori	r24, 0x07	; 7
    1bb4:	84 bb       	out	0x14, r24	; 20
    1bb6:	84 b3       	in	r24, 0x14	; 20
    1bb8:	8b 7f       	andi	r24, 0xFB	; 251
    1bba:	84 bb       	out	0x14, r24	; 20
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	8a 95       	dec	r24
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <init_PipeModules+0xf4>
    1bc2:	00 c0       	rjmp	.+0      	; 0x1bc4 <init_PipeModules+0xfa>
    1bc4:	84 b3       	in	r24, 0x14	; 20
    1bc6:	84 60       	ori	r24, 0x04	; 4
    1bc8:	84 bb       	out	0x14, r24	; 20
    1bca:	90 e2       	ldi	r25, 0x20	; 32
    1bcc:	e1 e4       	ldi	r30, 0x41	; 65
    1bce:	f3 e0       	ldi	r31, 0x03	; 3
    1bd0:	83 81       	ldd	r24, Z+3	; 0x03
    1bd2:	82 83       	std	Z+2, r24	; 0x02
    1bd4:	84 81       	ldd	r24, Z+4	; 0x04
    1bd6:	83 83       	std	Z+3, r24	; 0x03
    1bd8:	84 b3       	in	r24, 0x14	; 20
    1bda:	81 60       	ori	r24, 0x01	; 1
    1bdc:	84 bb       	out	0x14, r24	; 20
    1bde:	8f ef       	ldi	r24, 0xFF	; 255
    1be0:	81 83       	std	Z+1, r24	; 0x01
    1be2:	88 b9       	out	0x08, r24	; 8
    1be4:	85 81       	ldd	r24, Z+5	; 0x05
    1be6:	84 83       	std	Z+4, r24	; 0x04
    1be8:	86 81       	ldd	r24, Z+6	; 0x06
    1bea:	85 83       	std	Z+5, r24	; 0x05
    1bec:	80 b1       	in	r24, 0x00	; 0
    1bee:	86 83       	std	Z+6, r24	; 0x06
    1bf0:	82 83       	std	Z+2, r24	; 0x02
    1bf2:	83 83       	std	Z+3, r24	; 0x03
    1bf4:	84 83       	std	Z+4, r24	; 0x04
    1bf6:	85 83       	std	Z+5, r24	; 0x05
    1bf8:	87 83       	std	Z+7, r24	; 0x07
    1bfa:	84 b3       	in	r24, 0x14	; 20
    1bfc:	8e 7f       	andi	r24, 0xFE	; 254
    1bfe:	84 bb       	out	0x14, r24	; 20
    1c00:	38 97       	sbiw	r30, 0x08	; 8
    1c02:	91 50       	subi	r25, 0x01	; 1
    1c04:	29 f7       	brne	.-54     	; 0x1bd0 <init_PipeModules+0x106>
    1c06:	00 00       	nop
    1c08:	00 00       	nop
    1c0a:	84 b3       	in	r24, 0x14	; 20
    1c0c:	81 60       	ori	r24, 0x01	; 1
    1c0e:	84 bb       	out	0x14, r24	; 20
    1c10:	84 b3       	in	r24, 0x14	; 20
    1c12:	8d 7f       	andi	r24, 0xFD	; 253
    1c14:	84 bb       	out	0x14, r24	; 20
    1c16:	18 b8       	out	0x08, r1	; 8
    1c18:	85 e0       	ldi	r24, 0x05	; 5
    1c1a:	8a 95       	dec	r24
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <init_PipeModules+0x150>
    1c1e:	00 00       	nop
    1c20:	84 b3       	in	r24, 0x14	; 20
    1c22:	82 60       	ori	r24, 0x02	; 2
    1c24:	84 bb       	out	0x14, r24	; 20
    1c26:	e5 e5       	ldi	r30, 0x55	; 85
    1c28:	f3 e0       	ldi	r31, 0x03	; 3
    1c2a:	81 81       	ldd	r24, Z+1	; 0x01
    1c2c:	40 81       	ld	r20, Z
    1c2e:	84 2b       	or	r24, r20
    1c30:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
    1c34:	89 17       	cp	r24, r25
    1c36:	39 f0       	breq	.+14     	; 0x1c46 <init_PipeModules+0x17c>
    1c38:	50 e0       	ldi	r21, 0x00	; 0
    1c3a:	54 2f       	mov	r21, r20
    1c3c:	44 27       	eor	r20, r20
    1c3e:	49 2b       	or	r20, r25
    1c40:	60 e0       	ldi	r22, 0x00	; 0
    1c42:	82 e0       	ldi	r24, 0x02	; 2
    1c44:	51 c6       	rjmp	.+3234   	; 0x28e8 <log_putError>
    1c46:	08 95       	ret

00001c48 <test_PipeModule>:
    1c48:	88 30       	cpi	r24, 0x08	; 8
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <test_PipeModule+0x6>
    1c4c:	6a c0       	rjmp	.+212    	; 0x1d22 <test_PipeModule+0xda>
    1c4e:	31 e0       	ldi	r19, 0x01	; 1
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <test_PipeModule+0xc>
    1c52:	33 0f       	add	r19, r19
    1c54:	8a 95       	dec	r24
    1c56:	ea f7       	brpl	.-6      	; 0x1c52 <test_PipeModule+0xa>
    1c58:	80 e8       	ldi	r24, 0x80	; 128
    1c5a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1c5e:	8b b1       	in	r24, 0x0b	; 11
    1c60:	8f 77       	andi	r24, 0x7F	; 127
    1c62:	8b b9       	out	0x0b, r24	; 11
    1c64:	84 b3       	in	r24, 0x14	; 20
    1c66:	87 60       	ori	r24, 0x07	; 7
    1c68:	84 bb       	out	0x14, r24	; 20
    1c6a:	40 e0       	ldi	r20, 0x00	; 0
    1c6c:	1d c0       	rjmp	.+58     	; 0x1ca8 <test_PipeModule+0x60>
    1c6e:	20 fd       	sbrc	r18, 0
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <test_PipeModule+0x30>
    1c72:	83 2f       	mov	r24, r19
    1c74:	80 95       	com	r24
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <test_PipeModule+0x32>
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	88 b9       	out	0x08, r24	; 8
    1c7c:	26 95       	lsr	r18
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	8a 95       	dec	r24
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <test_PipeModule+0x38>
    1c84:	00 c0       	rjmp	.+0      	; 0x1c86 <test_PipeModule+0x3e>
    1c86:	84 b3       	in	r24, 0x14	; 20
    1c88:	8e 7f       	andi	r24, 0xFE	; 254
    1c8a:	84 bb       	out	0x14, r24	; 20
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	8a 95       	dec	r24
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <test_PipeModule+0x46>
    1c92:	00 c0       	rjmp	.+0      	; 0x1c94 <test_PipeModule+0x4c>
    1c94:	84 b3       	in	r24, 0x14	; 20
    1c96:	81 60       	ori	r24, 0x01	; 1
    1c98:	84 bb       	out	0x14, r24	; 20
    1c9a:	9f 5f       	subi	r25, 0xFF	; 255
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <test_PipeModule+0x5a>
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	25 ea       	ldi	r18, 0xA5	; 165
    1ca2:	98 30       	cpi	r25, 0x08	; 8
    1ca4:	20 f3       	brcs	.-56     	; 0x1c6e <test_PipeModule+0x26>
    1ca6:	4f 5f       	subi	r20, 0xFF	; 255
    1ca8:	44 30       	cpi	r20, 0x04	; 4
    1caa:	c8 f3       	brcs	.-14     	; 0x1c9e <test_PipeModule+0x56>
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <test_PipeModule+0x86>
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	8a 95       	dec	r24
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <test_PipeModule+0x6a>
    1cb6:	00 c0       	rjmp	.+0      	; 0x1cb8 <test_PipeModule+0x70>
    1cb8:	84 b3       	in	r24, 0x14	; 20
    1cba:	8e 7f       	andi	r24, 0xFE	; 254
    1cbc:	84 bb       	out	0x14, r24	; 20
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	8a 95       	dec	r24
    1cc2:	f1 f7       	brne	.-4      	; 0x1cc0 <test_PipeModule+0x78>
    1cc4:	00 c0       	rjmp	.+0      	; 0x1cc6 <test_PipeModule+0x7e>
    1cc6:	84 b3       	in	r24, 0x14	; 20
    1cc8:	81 60       	ori	r24, 0x01	; 1
    1cca:	84 bb       	out	0x14, r24	; 20
    1ccc:	9f 5f       	subi	r25, 0xFF	; 255
    1cce:	90 32       	cpi	r25, 0x20	; 32
    1cd0:	78 f3       	brcs	.-34     	; 0x1cb0 <test_PipeModule+0x68>
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	50 e0       	ldi	r21, 0x00	; 0
    1cd8:	ba 01       	movw	r22, r20
    1cda:	17 c0       	rjmp	.+46     	; 0x1d0a <test_PipeModule+0xc2>
    1cdc:	44 0f       	add	r20, r20
    1cde:	55 1f       	adc	r21, r21
    1ce0:	66 1f       	adc	r22, r22
    1ce2:	77 1f       	adc	r23, r23
    1ce4:	82 e0       	ldi	r24, 0x02	; 2
    1ce6:	8a 95       	dec	r24
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <test_PipeModule+0x9e>
    1cea:	00 c0       	rjmp	.+0      	; 0x1cec <test_PipeModule+0xa4>
    1cec:	84 b3       	in	r24, 0x14	; 20
    1cee:	8e 7f       	andi	r24, 0xFE	; 254
    1cf0:	84 bb       	out	0x14, r24	; 20
    1cf2:	80 b1       	in	r24, 0x00	; 0
    1cf4:	83 23       	and	r24, r19
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <test_PipeModule+0xb2>
    1cf8:	41 60       	ori	r20, 0x01	; 1
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	8a 95       	dec	r24
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <test_PipeModule+0xb4>
    1d00:	00 c0       	rjmp	.+0      	; 0x1d02 <test_PipeModule+0xba>
    1d02:	84 b3       	in	r24, 0x14	; 20
    1d04:	81 60       	ori	r24, 0x01	; 1
    1d06:	84 bb       	out	0x14, r24	; 20
    1d08:	9f 5f       	subi	r25, 0xFF	; 255
    1d0a:	90 32       	cpi	r25, 0x20	; 32
    1d0c:	38 f3       	brcs	.-50     	; 0x1cdc <test_PipeModule+0x94>
    1d0e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1d12:	8b b1       	in	r24, 0x0b	; 11
    1d14:	80 68       	ori	r24, 0x80	; 128
    1d16:	8b b9       	out	0x0b, r24	; 11
    1d18:	34 2f       	mov	r19, r20
    1d1a:	25 2f       	mov	r18, r21
    1d1c:	86 2f       	mov	r24, r22
    1d1e:	97 2f       	mov	r25, r23
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <test_PipeModule+0xe2>
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	63 2f       	mov	r22, r19
    1d2c:	72 2f       	mov	r23, r18
    1d2e:	08 95       	ret

00001d30 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d30:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1d32:	e9 e4       	ldi	r30, 0x49	; 73
    1d34:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1d36:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d38:	06 c0       	rjmp	.+12     	; 0x1d46 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1d3a:	2f ef       	ldi	r18, 0xFF	; 255
    1d3c:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1d3e:	26 81       	ldd	r18, Z+6	; 0x06
    1d40:	82 2b       	or	r24, r18
		pPipe++;
    1d42:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d44:	9f 5f       	subi	r25, 0xFF	; 255
    1d46:	90 32       	cpi	r25, 0x20	; 32
    1d48:	c0 f3       	brcs	.-16     	; 0x1d3a <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	return result & pipe_Module.AssnRead; // modules unassgined to read will be ignored (return bit=0)
    1d4a:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
}
    1d4e:	89 23       	and	r24, r25
    1d50:	08 95       	ret

00001d52 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1d52:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d56:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d5a:	81 ff       	sbrs	r24, 1
    1d5c:	fc cf       	rjmp	.-8      	; 0x1d56 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1d5e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d62:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d66:	81 ff       	sbrs	r24, 1
    1d68:	fc cf       	rjmp	.-8      	; 0x1d62 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1d6a:	08 95       	ret

00001d6c <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1d72:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d74:	f8 94       	cli
    1d76:	06 c0       	rjmp	.+12     	; 0x1d84 <module_StartPowerOn+0x18>
    1d78:	ef e2       	ldi	r30, 0x2F	; 47
    1d7a:	f2 e0       	ldi	r31, 0x02	; 2
    1d7c:	88 e2       	ldi	r24, 0x28	; 40
    1d7e:	82 83       	std	Z+2, r24	; 0x02
    1d80:	13 82       	std	Z+3, r1	; 0x03
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	81 11       	cpse	r24, r1
    1d86:	f8 cf       	rjmp	.-16     	; 0x1d78 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1d88:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1d8a:	08 95       	ret

00001d8c <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1d8c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	31 f5       	brne	.+76     	; 0x1de0 <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1d94:	cd df       	rcall	.-102    	; 0x1d30 <module_TestAllInputs>
    1d96:	81 11       	cpse	r24, r1
    1d98:	14 c0       	rjmp	.+40     	; 0x1dc2 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1d9a:	85 b1       	in	r24, 0x05	; 5
    1d9c:	80 64       	ori	r24, 0x40	; 64
    1d9e:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1da0:	82 e1       	ldi	r24, 0x12	; 18
    1da2:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1da6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1da8:	f8 94       	cli
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <module_PowerControl+0x2e>
    1dae:	ef e2       	ldi	r30, 0x2F	; 47
    1db0:	f2 e0       	ldi	r31, 0x02	; 2
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	82 83       	std	Z+2, r24	; 0x02
    1db6:	13 82       	std	Z+3, r1	; 0x03
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	81 11       	cpse	r24, r1
    1dbc:	f8 cf       	rjmp	.-16     	; 0x1dae <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1dbe:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1dc0:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1dc2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1dc4:	f8 94       	cli
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <module_PowerControl+0x4c>
    1dca:	ef e2       	ldi	r30, 0x2F	; 47
    1dcc:	f2 e0       	ldi	r31, 0x02	; 2
    1dce:	8c e0       	ldi	r24, 0x0C	; 12
    1dd0:	82 83       	std	Z+2, r24	; 0x02
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	83 83       	std	Z+3, r24	; 0x03
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	81 11       	cpse	r24, r1
    1dda:	f7 cf       	rjmp	.-18     	; 0x1dca <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ddc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1dde:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1de0:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1de2:	b1 f4       	brne	.+44     	; 0x1e10 <module_PowerControl+0x84>
    1de4:	a5 df       	rcall	.-182    	; 0x1d30 <module_TestAllInputs>
		if (testResult == 0){
    1de6:	81 11       	cpse	r24, r1
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1dea:	84 e1       	ldi	r24, 0x14	; 20
    1dec:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1df0:	0b c0       	rjmp	.+22     	; 0x1e08 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1df2:	48 2f       	mov	r20, r24
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	85 e0       	ldi	r24, 0x05	; 5
    1dfa:	76 d5       	rcall	.+2796   	; 0x28e8 <log_putError>
			POWER_OFF
    1dfc:	85 b1       	in	r24, 0x05	; 5
    1dfe:	8f 7b       	andi	r24, 0xBF	; 191
    1e00:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1e02:	80 e8       	ldi	r24, 0x80	; 128
    1e04:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1e08:	8f ef       	ldi	r24, 0xFF	; 255
    1e0a:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e0e:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e16:	08 95       	ret

00001e18 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0d c0       	rjmp	.+26     	; 0x1e36 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1e1c:	94 30       	cpi	r25, 0x04	; 4
    1e1e:	50 f4       	brcc	.+20     	; 0x1e34 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1e20:	e9 2f       	mov	r30, r25
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	81 11       	cpse	r24, r1
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <softKey_WantLong+0x14>
    1e28:	2a e0       	ldi	r18, 0x0A	; 10
    1e2a:	01 c0       	rjmp	.+2      	; 0x1e2e <softKey_WantLong+0x16>
    1e2c:	26 e0       	ldi	r18, 0x06	; 6
    1e2e:	e1 5b       	subi	r30, 0xB1	; 177
    1e30:	fc 4f       	sbci	r31, 0xFC	; 252
    1e32:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e34:	9f 5f       	subi	r25, 0xFF	; 255
    1e36:	96 30       	cpi	r25, 0x06	; 6
    1e38:	88 f3       	brcs	.-30     	; 0x1e1c <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1e3a:	08 95       	ret

00001e3c <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1e3c:	1f 92       	push	r1
    1e3e:	0f 92       	push	r0
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	0f 92       	push	r0
    1e44:	11 24       	eor	r1, r1
    1e46:	0b b6       	in	r0, 0x3b	; 59
    1e48:	0f 92       	push	r0
    1e4a:	ef 92       	push	r14
    1e4c:	ff 92       	push	r15
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	2f 93       	push	r18
    1e54:	3f 93       	push	r19
    1e56:	4f 93       	push	r20
    1e58:	5f 93       	push	r21
    1e5a:	6f 93       	push	r22
    1e5c:	7f 93       	push	r23
    1e5e:	8f 93       	push	r24
    1e60:	9f 93       	push	r25
    1e62:	af 93       	push	r26
    1e64:	bf 93       	push	r27
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	ef 93       	push	r30
    1e6c:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1e6e:	85 b1       	in	r24, 0x05	; 5
    1e70:	80 68       	ori	r24, 0x80	; 128
    1e72:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1e74:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1e78:	8f 5f       	subi	r24, 0xFF	; 255
    1e7a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1e7e:	83 70       	andi	r24, 0x03	; 3
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <__vector_21+0x4a>
    1e84:	58 c1       	rjmp	.+688    	; 0x2136 <__vector_21+0x2fa>
    1e86:	38 f0       	brcs	.+14     	; 0x1e96 <__vector_21+0x5a>
    1e88:	82 30       	cpi	r24, 0x02	; 2
    1e8a:	09 f4       	brne	.+2      	; 0x1e8e <__vector_21+0x52>
    1e8c:	a5 c1       	rjmp	.+842    	; 0x21d8 <__vector_21+0x39c>
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <__vector_21+0x58>
    1e92:	c9 c1       	rjmp	.+914    	; 0x2226 <__stack+0x27>
    1e94:	01 c2       	rjmp	.+1026   	; 0x2298 <__stack+0x99>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1e96:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1e9a:	81 11       	cpse	r24, r1
    1e9c:	1a c1       	rjmp	.+564    	; 0x20d2 <__vector_21+0x296>
    1e9e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1ea2:	96 fd       	sbrc	r25, 6
    1ea4:	16 c1       	rjmp	.+556    	; 0x20d2 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	f9 01       	movw	r30, r18
    1eac:	ee 0f       	add	r30, r30
    1eae:	ff 1f       	adc	r31, r31
    1eb0:	e2 0f       	add	r30, r18
    1eb2:	f3 1f       	adc	r31, r19
    1eb4:	ee 0f       	add	r30, r30
    1eb6:	ff 1f       	adc	r31, r31
    1eb8:	e7 5b       	subi	r30, 0xB7	; 183
    1eba:	fc 4f       	sbci	r31, 0xFC	; 252
    1ebc:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1ebe:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1ec2:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1ec4:	49 17       	cp	r20, r25
    1ec6:	10 f4       	brcc	.+4      	; 0x1ecc <__vector_21+0x90>
		return data1-data2;
    1ec8:	94 1b       	sub	r25, r20
    1eca:	03 c0       	rjmp	.+6      	; 0x1ed2 <__vector_21+0x96>
	} else {
		return data2-data1;
    1ecc:	54 2f       	mov	r21, r20
    1ece:	59 1b       	sub	r21, r25
    1ed0:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1ed2:	94 30       	cpi	r25, 0x04	; 4
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <__vector_21+0x9c>
    1ed6:	fd c0       	rjmp	.+506    	; 0x20d2 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1ed8:	81 11       	cpse	r24, r1
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1edc:	42 32       	cpi	r20, 0x22	; 34
    1ede:	70 f0       	brcs	.+28     	; 0x1efc <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1ee0:	4f 33       	cpi	r20, 0x3F	; 63
    1ee2:	70 f0       	brcs	.+28     	; 0x1f00 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1ee4:	48 36       	cpi	r20, 0x68	; 104
    1ee6:	70 f0       	brcs	.+28     	; 0x1f04 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1ee8:	46 39       	cpi	r20, 0x96	; 150
    1eea:	70 f0       	brcs	.+28     	; 0x1f08 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1eec:	4f 3b       	cpi	r20, 0xBF	; 191
    1eee:	70 f0       	brcs	.+28     	; 0x1f0c <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1ef0:	48 3e       	cpi	r20, 0xE8	; 232
    1ef2:	70 f4       	brcc	.+28     	; 0x1f10 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1ef4:	c6 e0       	ldi	r28, 0x06	; 6
    1ef6:	0d c0       	rjmp	.+26     	; 0x1f12 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1ef8:	cf ef       	ldi	r28, 0xFF	; 255
    1efa:	0b c0       	rjmp	.+22     	; 0x1f12 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1efc:	c4 e0       	ldi	r28, 0x04	; 4
    1efe:	09 c0       	rjmp	.+18     	; 0x1f12 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1f00:	c3 e0       	ldi	r28, 0x03	; 3
    1f02:	07 c0       	rjmp	.+14     	; 0x1f12 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1f04:	c5 e0       	ldi	r28, 0x05	; 5
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1f08:	c1 e0       	ldi	r28, 0x01	; 1
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1f0c:	c2 e0       	ldi	r28, 0x02	; 2
    1f0e:	01 c0       	rjmp	.+2      	; 0x1f12 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1f10:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1f12:	f9 01       	movw	r30, r18
    1f14:	ee 0f       	add	r30, r30
    1f16:	ff 1f       	adc	r31, r31
    1f18:	e2 0f       	add	r30, r18
    1f1a:	f3 1f       	adc	r31, r19
    1f1c:	ee 0f       	add	r30, r30
    1f1e:	ff 1f       	adc	r31, r31
    1f20:	e7 5b       	subi	r30, 0xB7	; 183
    1f22:	fc 4f       	sbci	r31, 0xFC	; 252
    1f24:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1f26:	dc 17       	cp	r29, r28
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <__vector_21+0xf0>
    1f2a:	48 c0       	rjmp	.+144    	; 0x1fbc <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1f2c:	df 3f       	cpi	r29, 0xFF	; 255
    1f2e:	19 f0       	breq	.+6      	; 0x1f36 <__vector_21+0xfa>
    1f30:	cf 3f       	cpi	r28, 0xFF	; 255
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1f34:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1f36:	f9 01       	movw	r30, r18
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	e7 5b       	subi	r30, 0xB7	; 183
    1f46:	fc 4f       	sbci	r31, 0xFC	; 252
    1f48:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1f4a:	df 3f       	cpi	r29, 0xFF	; 255
    1f4c:	f9 f4       	brne	.+62     	; 0x1f8c <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    1f4e:	c9 01       	movw	r24, r18
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	fc 01       	movw	r30, r24
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	e7 5b       	subi	r30, 0xB7	; 183
    1f60:	fc 4f       	sbci	r31, 0xFC	; 252
    1f62:	15 82       	std	Z+5, r1	; 0x05
    1f64:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1f66:	fc 01       	movw	r30, r24
    1f68:	e2 0f       	add	r30, r18
    1f6a:	f3 1f       	adc	r31, r19
    1f6c:	ee 0f       	add	r30, r30
    1f6e:	ff 1f       	adc	r31, r31
    1f70:	e7 5b       	subi	r30, 0xB7	; 183
    1f72:	fc 4f       	sbci	r31, 0xFC	; 252
    1f74:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1f76:	ec 2f       	mov	r30, r28
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	e2 5b       	subi	r30, 0xB2	; 178
    1f7c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f7e:	80 81       	ld	r24, Z
    1f80:	80 ff       	sbrs	r24, 0
    1f82:	a7 c0       	rjmp	.+334    	; 0x20d2 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    1f84:	8c 2f       	mov	r24, r28
    1f86:	0e 94 10 2a 	call	0x5420	; 0x5420 <message_push>
    1f8a:	a3 c0       	rjmp	.+326    	; 0x20d2 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    1f8c:	ed 2f       	mov	r30, r29
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	e2 5b       	subi	r30, 0xB2	; 178
    1f92:	fc 4f       	sbci	r31, 0xFC	; 252
    1f94:	80 81       	ld	r24, Z
    1f96:	81 ff       	sbrs	r24, 1
    1f98:	9c c0       	rjmp	.+312    	; 0x20d2 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    1f9a:	f9 01       	movw	r30, r18
    1f9c:	ee 0f       	add	r30, r30
    1f9e:	ff 1f       	adc	r31, r31
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	e7 5b       	subi	r30, 0xB7	; 183
    1faa:	fc 4f       	sbci	r31, 0xFC	; 252
    1fac:	83 81       	ldd	r24, Z+3	; 0x03
    1fae:	83 70       	andi	r24, 0x03	; 3
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <__vector_21+0x178>
    1fb2:	8f c0       	rjmp	.+286    	; 0x20d2 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    1fb4:	8d 2f       	mov	r24, r29
    1fb6:	0e 94 10 2a 	call	0x5420	; 0x5420 <message_push>
    1fba:	8b c0       	rjmp	.+278    	; 0x20d2 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    1fbc:	cf 3f       	cpi	r28, 0xFF	; 255
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <__vector_21+0x186>
    1fc0:	88 c0       	rjmp	.+272    	; 0x20d2 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    1fc2:	f9 01       	movw	r30, r18
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	df 01       	movw	r26, r30
    1fca:	a2 0f       	add	r26, r18
    1fcc:	b3 1f       	adc	r27, r19
    1fce:	aa 0f       	add	r26, r26
    1fd0:	bb 1f       	adc	r27, r27
    1fd2:	a7 5b       	subi	r26, 0xB7	; 183
    1fd4:	bc 4f       	sbci	r27, 0xFC	; 252
    1fd6:	14 96       	adiw	r26, 0x04	; 4
    1fd8:	8d 91       	ld	r24, X+
    1fda:	9c 91       	ld	r25, X
    1fdc:	15 97       	sbiw	r26, 0x05	; 5
    1fde:	01 96       	adiw	r24, 0x01	; 1
    1fe0:	15 96       	adiw	r26, 0x05	; 5
    1fe2:	9c 93       	st	X, r25
    1fe4:	8e 93       	st	-X, r24
    1fe6:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    1fe8:	fd 01       	movw	r30, r26
    1fea:	84 81       	ldd	r24, Z+4	; 0x04
    1fec:	95 81       	ldd	r25, Z+5	; 0x05
    1fee:	8b 34       	cpi	r24, 0x4B	; 75
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	a9 f4       	brne	.+42     	; 0x201e <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    1ff4:	ed 2f       	mov	r30, r29
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	e2 5b       	subi	r30, 0xB2	; 178
    1ffa:	fc 4f       	sbci	r31, 0xFC	; 252
    1ffc:	80 81       	ld	r24, Z
    1ffe:	82 ff       	sbrs	r24, 2
    2000:	0e c0       	rjmp	.+28     	; 0x201e <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    2002:	8c 2f       	mov	r24, r28
    2004:	80 68       	ori	r24, 0x80	; 128
    2006:	0e 94 10 2a 	call	0x5420	; 0x5420 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    200a:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    200e:	86 e0       	ldi	r24, 0x06	; 6
    2010:	e8 9f       	mul	r30, r24
    2012:	f0 01       	movw	r30, r0
    2014:	11 24       	eor	r1, r1
    2016:	e7 5b       	subi	r30, 0xB7	; 183
    2018:	fc 4f       	sbci	r31, 0xFC	; 252
    201a:	82 e0       	ldi	r24, 0x02	; 2
    201c:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    201e:	ed 2f       	mov	r30, r29
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	e2 5b       	subi	r30, 0xB2	; 178
    2024:	fc 4f       	sbci	r31, 0xFC	; 252
    2026:	80 81       	ld	r24, Z
    2028:	83 ff       	sbrs	r24, 3
    202a:	53 c0       	rjmp	.+166    	; 0x20d2 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    202c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	fc 01       	movw	r30, r24
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	e8 0f       	add	r30, r24
    203a:	f9 1f       	adc	r31, r25
    203c:	ee 0f       	add	r30, r30
    203e:	ff 1f       	adc	r31, r31
    2040:	e7 5b       	subi	r30, 0xB7	; 183
    2042:	fc 4f       	sbci	r31, 0xFC	; 252
    2044:	23 81       	ldd	r18, Z+3	; 0x03
    2046:	21 11       	cpse	r18, r1
    2048:	1e c0       	rjmp	.+60     	; 0x2086 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    204a:	fc 01       	movw	r30, r24
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	e8 0f       	add	r30, r24
    2052:	f9 1f       	adc	r31, r25
    2054:	ee 0f       	add	r30, r30
    2056:	ff 1f       	adc	r31, r31
    2058:	e7 5b       	subi	r30, 0xB7	; 183
    205a:	fc 4f       	sbci	r31, 0xFC	; 252
    205c:	24 81       	ldd	r18, Z+4	; 0x04
    205e:	35 81       	ldd	r19, Z+5	; 0x05
    2060:	22 33       	cpi	r18, 0x32	; 50
    2062:	31 05       	cpc	r19, r1
    2064:	b1 f5       	brne	.+108    	; 0x20d2 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2066:	26 e0       	ldi	r18, 0x06	; 6
    2068:	28 9f       	mul	r18, r24
    206a:	f0 01       	movw	r30, r0
    206c:	29 9f       	mul	r18, r25
    206e:	f0 0d       	add	r31, r0
    2070:	11 24       	eor	r1, r1
    2072:	e7 5b       	subi	r30, 0xB7	; 183
    2074:	fc 4f       	sbci	r31, 0xFC	; 252
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    207a:	15 82       	std	Z+5, r1	; 0x05
    207c:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    207e:	8c 2f       	mov	r24, r28
    2080:	0e 94 10 2a 	call	0x5420	; 0x5420 <message_push>
    2084:	26 c0       	rjmp	.+76     	; 0x20d2 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2086:	fc 01       	movw	r30, r24
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	e8 0f       	add	r30, r24
    208e:	f9 1f       	adc	r31, r25
    2090:	ee 0f       	add	r30, r30
    2092:	ff 1f       	adc	r31, r31
    2094:	e7 5b       	subi	r30, 0xB7	; 183
    2096:	fc 4f       	sbci	r31, 0xFC	; 252
    2098:	23 81       	ldd	r18, Z+3	; 0x03
    209a:	21 30       	cpi	r18, 0x01	; 1
    209c:	d1 f4       	brne	.+52     	; 0x20d2 <__vector_21+0x296>
    209e:	26 e0       	ldi	r18, 0x06	; 6
    20a0:	28 9f       	mul	r18, r24
    20a2:	f0 01       	movw	r30, r0
    20a4:	29 9f       	mul	r18, r25
    20a6:	f0 0d       	add	r31, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	e7 5b       	subi	r30, 0xB7	; 183
    20ac:	fc 4f       	sbci	r31, 0xFC	; 252
    20ae:	24 81       	ldd	r18, Z+4	; 0x04
    20b0:	35 81       	ldd	r19, Z+5	; 0x05
    20b2:	2c 30       	cpi	r18, 0x0C	; 12
    20b4:	31 05       	cpc	r19, r1
    20b6:	69 f4       	brne	.+26     	; 0x20d2 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    20b8:	26 e0       	ldi	r18, 0x06	; 6
    20ba:	28 9f       	mul	r18, r24
    20bc:	f0 01       	movw	r30, r0
    20be:	29 9f       	mul	r18, r25
    20c0:	f0 0d       	add	r31, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	e7 5b       	subi	r30, 0xB7	; 183
    20c6:	fc 4f       	sbci	r31, 0xFC	; 252
    20c8:	15 82       	std	Z+5, r1	; 0x05
    20ca:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    20cc:	8c 2f       	mov	r24, r28
    20ce:	0e 94 10 2a 	call	0x5420	; 0x5420 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    20d2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20d6:	8f 5f       	subi	r24, 0xFF	; 255
    20d8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    20dc:	84 30       	cpi	r24, 0x04	; 4
    20de:	10 f0       	brcs	.+4      	; 0x20e4 <__vector_21+0x2a8>
		adcNr = 0;
    20e0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    20e4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20e8:	81 11       	cpse	r24, r1
    20ea:	0c c0       	rjmp	.+24     	; 0x2104 <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	fc 01       	movw	r30, r24
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	e8 0f       	add	r30, r24
    20f6:	f9 1f       	adc	r31, r25
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	e7 5b       	subi	r30, 0xB7	; 183
    20fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2100:	80 81       	ld	r24, Z
    2102:	01 c0       	rjmp	.+2      	; 0x2106 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    2104:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    2106:	98 2f       	mov	r25, r24
    2108:	9f 71       	andi	r25, 0x1F	; 31
    210a:	90 66       	ori	r25, 0x60	; 96
    210c:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2110:	eb e7       	ldi	r30, 0x7B	; 123
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	20 81       	ld	r18, Z
    2116:	80 72       	andi	r24, 0x20	; 32
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	95 95       	asr	r25
    211c:	87 95       	ror	r24
    211e:	95 95       	asr	r25
    2120:	87 95       	ror	r24
    2122:	92 2f       	mov	r25, r18
    2124:	9f 7d       	andi	r25, 0xDF	; 223
    2126:	89 2b       	or	r24, r25
    2128:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    212a:	ea e7       	ldi	r30, 0x7A	; 122
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	80 64       	ori	r24, 0x40	; 64
    2132:	80 83       	st	Z, r24
    2134:	b1 c0       	rjmp	.+354    	; 0x2298 <__stack+0x99>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    2136:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    213a:	80 38       	cpi	r24, 0x80	; 128
    213c:	09 f4       	brne	.+2      	; 0x2140 <__vector_21+0x304>
    213e:	ac c0       	rjmp	.+344    	; 0x2298 <__stack+0x99>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    2140:	84 b3       	in	r24, 0x14	; 20
    2142:	87 60       	ori	r24, 0x07	; 7
    2144:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2146:	84 b3       	in	r24, 0x14	; 20
    2148:	8b 7f       	andi	r24, 0xFB	; 251
    214a:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    214c:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    2150:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2152:	e2 e0       	ldi	r30, 0x02	; 2
    2154:	ea 95       	dec	r30
    2156:	f1 f7       	brne	.-4      	; 0x2154 <__vector_21+0x318>
    2158:	00 c0       	rjmp	.+0      	; 0x215a <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    215a:	84 b3       	in	r24, 0x14	; 20
    215c:	84 60       	ori	r24, 0x04	; 4
    215e:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    2160:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2162:	e1 e4       	ldi	r30, 0x41	; 65
    2164:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2166:	83 81       	ldd	r24, Z+3	; 0x03
    2168:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    216a:	84 81       	ldd	r24, Z+4	; 0x04
    216c:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    216e:	84 b3       	in	r24, 0x14	; 20
    2170:	81 60       	ori	r24, 0x01	; 1
    2172:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    2174:	81 81       	ldd	r24, Z+1	; 0x01
    2176:	82 2b       	or	r24, r18
    2178:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    217a:	85 81       	ldd	r24, Z+5	; 0x05
    217c:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    217e:	86 81       	ldd	r24, Z+6	; 0x06
    2180:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2182:	80 b1       	in	r24, 0x00	; 0
    2184:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2186:	84 b3       	in	r24, 0x14	; 20
    2188:	8e 7f       	andi	r24, 0xFE	; 254
    218a:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    218c:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    218e:	91 50       	subi	r25, 0x01	; 1
    2190:	51 f7       	brne	.-44     	; 0x2166 <__vector_21+0x32a>
	asm("nop");
    2192:	00 00       	nop
	asm("nop");
    2194:	00 00       	nop
	PIPE_CLOCK_H
    2196:	84 b3       	in	r24, 0x14	; 20
    2198:	81 60       	ori	r24, 0x01	; 1
    219a:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    219c:	84 b3       	in	r24, 0x14	; 20
    219e:	8d 7f       	andi	r24, 0xFD	; 253
    21a0:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    21a2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    21a6:	82 60       	ori	r24, 0x02	; 2
    21a8:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    21ac:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    21ae:	8b b1       	in	r24, 0x0b	; 11
    21b0:	80 68       	ori	r24, 0x80	; 128
    21b2:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    21b4:	84 b3       	in	r24, 0x14	; 20
    21b6:	82 60       	ori	r24, 0x02	; 2
    21b8:	84 bb       	out	0x14, r24	; 20
    21ba:	6e c0       	rjmp	.+220    	; 0x2298 <__stack+0x99>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    21bc:	80 81       	ld	r24, Z
    21be:	81 50       	subi	r24, 0x01	; 1
    21c0:	8e 3f       	cpi	r24, 0xFE	; 254
    21c2:	38 f4       	brcc	.+14     	; 0x21d2 <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    21c4:	21 81       	ldd	r18, Z+1	; 0x01
    21c6:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    21c8:	25 30       	cpi	r18, 0x05	; 5
    21ca:	10 f0       	brcs	.+4      	; 0x21d0 <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    21cc:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    21ce:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    21d0:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    21d2:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21d4:	9f 5f       	subi	r25, 0xFF	; 255
    21d6:	03 c0       	rjmp	.+6      	; 0x21de <__vector_21+0x3a2>
    21d8:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    21da:	ef e2       	ldi	r30, 0x2F	; 47
    21dc:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21de:	99 30       	cpi	r25, 0x09	; 9
    21e0:	68 f3       	brcs	.-38     	; 0x21bc <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    21e2:	e1 e4       	ldi	r30, 0x41	; 65
    21e4:	f2 e0       	ldi	r31, 0x02	; 2
    21e6:	80 81       	ld	r24, Z
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	80 83       	st	Z, r24
    21ec:	8a 3f       	cpi	r24, 0xFA	; 250
    21ee:	09 f0       	breq	.+2      	; 0x21f2 <__vector_21+0x3b6>
    21f0:	53 c0       	rjmp	.+166    	; 0x2298 <__stack+0x99>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    21f2:	8f ef       	ldi	r24, 0xFF	; 255
    21f4:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    21f8:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    21fa:	81 81       	ldd	r24, Z+1	; 0x01
    21fc:	8f 5f       	subi	r24, 0xFF	; 255
    21fe:	81 83       	std	Z+1, r24	; 0x01
    2200:	8c 33       	cpi	r24, 0x3C	; 60
    2202:	08 f4       	brcc	.+2      	; 0x2206 <__stack+0x7>
    2204:	49 c0       	rjmp	.+146    	; 0x2298 <__stack+0x99>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    2206:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    2208:	82 81       	ldd	r24, Z+2	; 0x02
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	82 83       	std	Z+2, r24	; 0x02
    220e:	8c 33       	cpi	r24, 0x3C	; 60
    2210:	08 f4       	brcc	.+2      	; 0x2214 <__stack+0x15>
    2212:	42 c0       	rjmp	.+132    	; 0x2298 <__stack+0x99>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    2214:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    2216:	83 81       	ldd	r24, Z+3	; 0x03
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	83 83       	std	Z+3, r24	; 0x03
    221c:	84 36       	cpi	r24, 0x64	; 100
    221e:	e0 f1       	brcs	.+120    	; 0x2298 <__stack+0x99>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2220:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    2224:	39 c0       	rjmp	.+114    	; 0x2298 <__stack+0x99>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    2226:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    222a:	80 38       	cpi	r24, 0x80	; 128
    222c:	a9 f1       	breq	.+106    	; 0x2298 <__stack+0x99>
//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead; // 1= module message processeced
    222e:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2232:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    2234:	09 e4       	ldi	r16, 0x49	; 73
    2236:	12 e0       	ldi	r17, 0x02	; 2
    2238:	2c c0       	rjmp	.+88     	; 0x2292 <__stack+0x93>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    223a:	f8 01       	movw	r30, r16
    223c:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    223e:	83 81       	ldd	r24, Z+3	; 0x03
    2240:	9c 2f       	mov	r25, r28
    2242:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2244:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    2246:	84 81       	ldd	r24, Z+4	; 0x04
    2248:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    224a:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    224c:	25 81       	ldd	r18, Z+5	; 0x05
    224e:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2250:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2252:	86 81       	ldd	r24, Z+6	; 0x06
    2254:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    2256:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    2258:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    225a:	cd 23       	and	r28, r29
    225c:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    225e:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2260:	8d 2f       	mov	r24, r29
    2262:	80 95       	com	r24
    2264:	8c 23       	and	r24, r28
    2266:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2268:	21 f0       	breq	.+8      	; 0x2272 <__stack+0x73>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    226a:	9f 2d       	mov	r25, r15
    226c:	90 62       	ori	r25, 0x20	; 32
    226e:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2272:	c0 95       	com	r28
    2274:	cd 23       	and	r28, r29
    2276:	8c 2f       	mov	r24, r28
    2278:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    227a:	19 f0       	breq	.+6      	; 0x2282 <__stack+0x83>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    227c:	9f 2d       	mov	r25, r15
    227e:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <pipeMsgPush>
		}
		curPipe++;
    2282:	08 5f       	subi	r16, 0xF8	; 248
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    2286:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    228a:	81 60       	ori	r24, 0x01	; 1
    228c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2290:	f3 94       	inc	r15
    2292:	ff e1       	ldi	r31, 0x1F	; 31
    2294:	ff 15       	cp	r31, r15
    2296:	88 f6       	brcc	.-94     	; 0x223a <__stack+0x3b>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    2298:	85 b1       	in	r24, 0x05	; 5
    229a:	8f 77       	andi	r24, 0x7F	; 127
    229c:	85 b9       	out	0x05, r24	; 5

}
    229e:	ff 91       	pop	r31
    22a0:	ef 91       	pop	r30
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	bf 91       	pop	r27
    22a8:	af 91       	pop	r26
    22aa:	9f 91       	pop	r25
    22ac:	8f 91       	pop	r24
    22ae:	7f 91       	pop	r23
    22b0:	6f 91       	pop	r22
    22b2:	5f 91       	pop	r21
    22b4:	4f 91       	pop	r20
    22b6:	3f 91       	pop	r19
    22b8:	2f 91       	pop	r18
    22ba:	1f 91       	pop	r17
    22bc:	0f 91       	pop	r16
    22be:	ff 90       	pop	r15
    22c0:	ef 90       	pop	r14
    22c2:	0f 90       	pop	r0
    22c4:	0b be       	out	0x3b, r0	; 59
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	0f 90       	pop	r0
    22cc:	1f 90       	pop	r1
    22ce:	18 95       	reti

000022d0 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    22d4:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    22d6:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    22d8:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    22da:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    22dc:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    22de:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    22e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    22e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    22e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    22ec:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    22f0:	8a b1       	in	r24, 0x0a	; 10
    22f2:	80 68       	ori	r24, 0x80	; 128
    22f4:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    22f6:	8b b1       	in	r24, 0x0b	; 11
    22f8:	8f 77       	andi	r24, 0x7F	; 127
    22fa:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    22fc:	84 b1       	in	r24, 0x04	; 4
    22fe:	80 64       	ori	r24, 0x40	; 64
    2300:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    2302:	85 b1       	in	r24, 0x05	; 5
    2304:	8f 7b       	andi	r24, 0xBF	; 191
    2306:	85 b9       	out	0x05, r24	; 5
    2308:	08 95       	ret

0000230a <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    230a:	88 23       	and	r24, r24
    230c:	34 f4       	brge	.+12     	; 0x231a <lcd_write_nibble+0x10>
    230e:	e2 e0       	ldi	r30, 0x02	; 2
    2310:	f1 e0       	ldi	r31, 0x01	; 1
    2312:	90 81       	ld	r25, Z
    2314:	90 61       	ori	r25, 0x10	; 16
    2316:	90 83       	st	Z, r25
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <lcd_write_nibble+0x1a>
    231a:	e2 e0       	ldi	r30, 0x02	; 2
    231c:	f1 e0       	ldi	r31, 0x01	; 1
    231e:	90 81       	ld	r25, Z
    2320:	9f 7e       	andi	r25, 0xEF	; 239
    2322:	90 83       	st	Z, r25
    2324:	86 ff       	sbrs	r24, 6
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <lcd_write_nibble+0x2a>
    2328:	e2 e0       	ldi	r30, 0x02	; 2
    232a:	f1 e0       	ldi	r31, 0x01	; 1
    232c:	90 81       	ld	r25, Z
    232e:	98 60       	ori	r25, 0x08	; 8
    2330:	90 83       	st	Z, r25
    2332:	05 c0       	rjmp	.+10     	; 0x233e <lcd_write_nibble+0x34>
    2334:	e2 e0       	ldi	r30, 0x02	; 2
    2336:	f1 e0       	ldi	r31, 0x01	; 1
    2338:	90 81       	ld	r25, Z
    233a:	97 7f       	andi	r25, 0xF7	; 247
    233c:	90 83       	st	Z, r25
    233e:	85 ff       	sbrs	r24, 5
    2340:	04 c0       	rjmp	.+8      	; 0x234a <lcd_write_nibble+0x40>
    2342:	9e b1       	in	r25, 0x0e	; 14
    2344:	98 60       	ori	r25, 0x08	; 8
    2346:	9e b9       	out	0x0e, r25	; 14
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <lcd_write_nibble+0x46>
    234a:	9e b1       	in	r25, 0x0e	; 14
    234c:	97 7f       	andi	r25, 0xF7	; 247
    234e:	9e b9       	out	0x0e, r25	; 14
    2350:	84 ff       	sbrs	r24, 4
    2352:	04 c0       	rjmp	.+8      	; 0x235c <lcd_write_nibble+0x52>
    2354:	84 b3       	in	r24, 0x14	; 20
    2356:	80 62       	ori	r24, 0x20	; 32
    2358:	84 bb       	out	0x14, r24	; 20
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <lcd_write_nibble+0x58>
    235c:	84 b3       	in	r24, 0x14	; 20
    235e:	8f 7d       	andi	r24, 0xDF	; 223
    2360:	84 bb       	out	0x14, r24	; 20
    2362:	e2 e0       	ldi	r30, 0x02	; 2
    2364:	f1 e0       	ldi	r31, 0x01	; 1
    2366:	80 81       	ld	r24, Z
    2368:	80 64       	ori	r24, 0x40	; 64
    236a:	80 83       	st	Z, r24
    236c:	85 e0       	ldi	r24, 0x05	; 5
    236e:	8a 95       	dec	r24
    2370:	f1 f7       	brne	.-4      	; 0x236e <lcd_write_nibble+0x64>
    2372:	00 00       	nop
    2374:	80 81       	ld	r24, Z
    2376:	8f 7b       	andi	r24, 0xBF	; 191
    2378:	80 83       	st	Z, r24
    237a:	85 e0       	ldi	r24, 0x05	; 5
    237c:	8a 95       	dec	r24
    237e:	f1 f7       	brne	.-4      	; 0x237c <lcd_write_nibble+0x72>
    2380:	00 00       	nop
    2382:	08 95       	ret

00002384 <lcd_write_character>:
    2384:	cf 93       	push	r28
    2386:	c8 2f       	mov	r28, r24
    2388:	e2 e0       	ldi	r30, 0x02	; 2
    238a:	f1 e0       	ldi	r31, 0x01	; 1
    238c:	80 81       	ld	r24, Z
    238e:	80 62       	ori	r24, 0x20	; 32
    2390:	80 83       	st	Z, r24
    2392:	80 81       	ld	r24, Z
    2394:	8f 7b       	andi	r24, 0xBF	; 191
    2396:	80 83       	st	Z, r24
    2398:	8c 2f       	mov	r24, r28
    239a:	b7 df       	rcall	.-146    	; 0x230a <lcd_write_nibble>
    239c:	8c 2f       	mov	r24, r28
    239e:	82 95       	swap	r24
    23a0:	80 7f       	andi	r24, 0xF0	; 240
    23a2:	b3 df       	rcall	.-154    	; 0x230a <lcd_write_nibble>
    23a4:	8f ef       	ldi	r24, 0xFF	; 255
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <lcd_write_character+0x24>
    23ac:	00 c0       	rjmp	.+0      	; 0x23ae <lcd_write_character+0x2a>
    23ae:	00 00       	nop
    23b0:	cf 91       	pop	r28
    23b2:	08 95       	ret

000023b4 <lcd_write_command>:
    23b4:	cf 93       	push	r28
    23b6:	c8 2f       	mov	r28, r24
    23b8:	e2 e0       	ldi	r30, 0x02	; 2
    23ba:	f1 e0       	ldi	r31, 0x01	; 1
    23bc:	80 81       	ld	r24, Z
    23be:	8f 7d       	andi	r24, 0xDF	; 223
    23c0:	80 83       	st	Z, r24
    23c2:	80 81       	ld	r24, Z
    23c4:	8f 7b       	andi	r24, 0xBF	; 191
    23c6:	80 83       	st	Z, r24
    23c8:	8c 2f       	mov	r24, r28
    23ca:	9f df       	rcall	.-194    	; 0x230a <lcd_write_nibble>
    23cc:	8c 2f       	mov	r24, r28
    23ce:	82 95       	swap	r24
    23d0:	80 7f       	andi	r24, 0xF0	; 240
    23d2:	9b df       	rcall	.-202    	; 0x230a <lcd_write_nibble>
    23d4:	c1 50       	subi	r28, 0x01	; 1
    23d6:	c2 30       	cpi	r28, 0x02	; 2
    23d8:	38 f4       	brcc	.+14     	; 0x23e8 <lcd_write_command+0x34>
    23da:	8f e0       	ldi	r24, 0x0F	; 15
    23dc:	97 e2       	ldi	r25, 0x27	; 39
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <lcd_write_command+0x2a>
    23e2:	00 c0       	rjmp	.+0      	; 0x23e4 <lcd_write_command+0x30>
    23e4:	00 00       	nop
    23e6:	06 c0       	rjmp	.+12     	; 0x23f4 <lcd_write_command+0x40>
    23e8:	8f ef       	ldi	r24, 0xFF	; 255
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	f1 f7       	brne	.-4      	; 0x23ec <lcd_write_command+0x38>
    23f0:	00 c0       	rjmp	.+0      	; 0x23f2 <lcd_write_command+0x3e>
    23f2:	00 00       	nop
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

000023f8 <lcd_init>:
    23f8:	e1 e0       	ldi	r30, 0x01	; 1
    23fa:	f1 e0       	ldi	r31, 0x01	; 1
    23fc:	80 81       	ld	r24, Z
    23fe:	80 61       	ori	r24, 0x10	; 16
    2400:	80 83       	st	Z, r24
    2402:	80 81       	ld	r24, Z
    2404:	88 60       	ori	r24, 0x08	; 8
    2406:	80 83       	st	Z, r24
    2408:	8d b1       	in	r24, 0x0d	; 13
    240a:	88 60       	ori	r24, 0x08	; 8
    240c:	8d b9       	out	0x0d, r24	; 13
    240e:	83 b3       	in	r24, 0x13	; 19
    2410:	80 62       	ori	r24, 0x20	; 32
    2412:	83 bb       	out	0x13, r24	; 19
    2414:	80 81       	ld	r24, Z
    2416:	80 64       	ori	r24, 0x40	; 64
    2418:	80 83       	st	Z, r24
    241a:	80 81       	ld	r24, Z
    241c:	80 62       	ori	r24, 0x20	; 32
    241e:	80 83       	st	Z, r24
    2420:	2f ef       	ldi	r18, 0xFF	; 255
    2422:	81 ee       	ldi	r24, 0xE1	; 225
    2424:	94 e0       	ldi	r25, 0x04	; 4
    2426:	21 50       	subi	r18, 0x01	; 1
    2428:	80 40       	sbci	r24, 0x00	; 0
    242a:	90 40       	sbci	r25, 0x00	; 0
    242c:	e1 f7       	brne	.-8      	; 0x2426 <lcd_init+0x2e>
    242e:	00 c0       	rjmp	.+0      	; 0x2430 <lcd_init+0x38>
    2430:	00 00       	nop
    2432:	e2 e0       	ldi	r30, 0x02	; 2
    2434:	f1 e0       	ldi	r31, 0x01	; 1
    2436:	80 81       	ld	r24, Z
    2438:	8f 7d       	andi	r24, 0xDF	; 223
    243a:	80 83       	st	Z, r24
    243c:	80 81       	ld	r24, Z
    243e:	8f 7b       	andi	r24, 0xBF	; 191
    2440:	80 83       	st	Z, r24
    2442:	80 e3       	ldi	r24, 0x30	; 48
    2444:	62 df       	rcall	.-316    	; 0x230a <lcd_write_nibble>
    2446:	8f e1       	ldi	r24, 0x1F	; 31
    2448:	9e e4       	ldi	r25, 0x4E	; 78
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <lcd_init+0x52>
    244e:	00 c0       	rjmp	.+0      	; 0x2450 <lcd_init+0x58>
    2450:	00 00       	nop
    2452:	80 e3       	ldi	r24, 0x30	; 48
    2454:	5a df       	rcall	.-332    	; 0x230a <lcd_write_nibble>
    2456:	8f e1       	ldi	r24, 0x1F	; 31
    2458:	9e e4       	ldi	r25, 0x4E	; 78
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <lcd_init+0x62>
    245e:	00 c0       	rjmp	.+0      	; 0x2460 <lcd_init+0x68>
    2460:	00 00       	nop
    2462:	80 e3       	ldi	r24, 0x30	; 48
    2464:	52 df       	rcall	.-348    	; 0x230a <lcd_write_nibble>
    2466:	8f e1       	ldi	r24, 0x1F	; 31
    2468:	9e e4       	ldi	r25, 0x4E	; 78
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <lcd_init+0x72>
    246e:	00 c0       	rjmp	.+0      	; 0x2470 <lcd_init+0x78>
    2470:	00 00       	nop
    2472:	88 e2       	ldi	r24, 0x28	; 40
    2474:	4a df       	rcall	.-364    	; 0x230a <lcd_write_nibble>
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <lcd_init+0x82>
    247e:	00 c0       	rjmp	.+0      	; 0x2480 <lcd_init+0x88>
    2480:	00 00       	nop
    2482:	88 e2       	ldi	r24, 0x28	; 40
    2484:	97 df       	rcall	.-210    	; 0x23b4 <lcd_write_command>
    2486:	88 e0       	ldi	r24, 0x08	; 8
    2488:	95 df       	rcall	.-214    	; 0x23b4 <lcd_write_command>
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	93 df       	rcall	.-218    	; 0x23b4 <lcd_write_command>
    248e:	86 e0       	ldi	r24, 0x06	; 6
    2490:	91 df       	rcall	.-222    	; 0x23b4 <lcd_write_command>
    2492:	8c e0       	ldi	r24, 0x0C	; 12
    2494:	8f cf       	rjmp	.-226    	; 0x23b4 <lcd_write_command>
    2496:	08 95       	ret

00002498 <lcd_goto>:
    2498:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    249c:	80 58       	subi	r24, 0x80	; 128
    249e:	8a cf       	rjmp	.-236    	; 0x23b4 <lcd_write_command>
    24a0:	08 95       	ret

000024a2 <lcd_clrscr>:
    24a2:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	85 df       	rcall	.-246    	; 0x23b4 <lcd_write_command>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	e8 e5       	ldi	r30, 0x58	; 88
    24ae:	f3 e0       	ldi	r31, 0x03	; 3
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <lcd_clrscr+0x18>
    24b2:	90 e2       	ldi	r25, 0x20	; 32
    24b4:	90 83       	st	Z, r25
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	31 96       	adiw	r30, 0x01	; 1
    24ba:	80 35       	cpi	r24, 0x50	; 80
    24bc:	d0 f3       	brcs	.-12     	; 0x24b2 <lcd_clrscr+0x10>
    24be:	08 95       	ret

000024c0 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    24c0:	84 31       	cpi	r24, 0x14	; 20
    24c2:	98 f0       	brcs	.+38     	; 0x24ea <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    24c4:	90 ec       	ldi	r25, 0xC0	; 192
    24c6:	98 0f       	add	r25, r24
    24c8:	94 31       	cpi	r25, 0x14	; 20
    24ca:	10 f4       	brcc	.+4      	; 0x24d0 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    24cc:	8c 52       	subi	r24, 0x2C	; 44
    24ce:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    24d0:	9c ee       	ldi	r25, 0xEC	; 236
    24d2:	98 0f       	add	r25, r24
    24d4:	94 31       	cpi	r25, 0x14	; 20
    24d6:	10 f4       	brcc	.+4      	; 0x24dc <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    24d8:	8c 5e       	subi	r24, 0xEC	; 236
    24da:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    24dc:	9c ea       	ldi	r25, 0xAC	; 172
    24de:	98 0f       	add	r25, r24
    24e0:	94 31       	cpi	r25, 0x14	; 20
    24e2:	10 f4       	brcc	.+4      	; 0x24e8 <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    24e4:	88 51       	subi	r24, 0x18	; 24
    24e6:	08 95       	ret
	}
	return 0xFF;
    24e8:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    24ea:	08 95       	ret

000024ec <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    24ec:	cf 93       	push	r28
    24ee:	df 93       	push	r29
    24f0:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    24f2:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    24f6:	8c 2f       	mov	r24, r28
    24f8:	e3 df       	rcall	.-58     	; 0x24c0 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    24fa:	8f 3f       	cpi	r24, 0xFF	; 255
    24fc:	31 f1       	breq	.+76     	; 0x254a <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    24fe:	d1 3a       	cpi	r29, 0xA1	; 161
    2500:	81 f0       	breq	.+32     	; 0x2522 <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    2502:	d0 38       	cpi	r29, 0x80	; 128
    2504:	81 f0       	breq	.+32     	; 0x2526 <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2506:	d5 3a       	cpi	r29, 0xA5	; 165
    2508:	81 f0       	breq	.+32     	; 0x252a <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    250a:	da 30       	cpi	r29, 0x0A	; 10
    250c:	81 f0       	breq	.+32     	; 0x252e <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    250e:	d2 3e       	cpi	r29, 0xE2	; 226
    2510:	81 f0       	breq	.+32     	; 0x2532 <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    2512:	d5 3f       	cpi	r29, 0xF5	; 245
    2514:	81 f0       	breq	.+32     	; 0x2536 <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2516:	df 3e       	cpi	r29, 0xEF	; 239
    2518:	81 f0       	breq	.+32     	; 0x253a <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    251a:	d1 3e       	cpi	r29, 0xE1	; 225
    251c:	81 f0       	breq	.+32     	; 0x253e <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    251e:	9d 2f       	mov	r25, r29
    2520:	0f c0       	rjmp	.+30     	; 0x2540 <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    2522:	90 e2       	ldi	r25, 0x20	; 32
    2524:	0d c0       	rjmp	.+26     	; 0x2540 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    2526:	90 e2       	ldi	r25, 0x20	; 32
    2528:	0b c0       	rjmp	.+22     	; 0x2540 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    252a:	94 e1       	ldi	r25, 0x14	; 20
    252c:	09 c0       	rjmp	.+18     	; 0x2540 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    252e:	95 e1       	ldi	r25, 0x15	; 21
    2530:	07 c0       	rjmp	.+14     	; 0x2540 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    2532:	93 e1       	ldi	r25, 0x13	; 19
    2534:	05 c0       	rjmp	.+10     	; 0x2540 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    2536:	92 e1       	ldi	r25, 0x12	; 18
    2538:	03 c0       	rjmp	.+6      	; 0x2540 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    253a:	91 e1       	ldi	r25, 0x11	; 17
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    253e:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    2540:	e8 2f       	mov	r30, r24
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	e8 5a       	subi	r30, 0xA8	; 168
    2546:	fc 4f       	sbci	r31, 0xFC	; 252
    2548:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    254a:	cf 5f       	subi	r28, 0xFF	; 255
    254c:	cf 77       	andi	r28, 0x7F	; 127
    254e:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    2552:	8d 2f       	mov	r24, r29
    2554:	17 df       	rcall	.-466    	; 0x2384 <lcd_write_character>
}
    2556:	df 91       	pop	r29
    2558:	cf 91       	pop	r28
    255a:	08 95       	ret

0000255c <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	fc 01       	movw	r30, r24
	if (s != NULL){
    2562:	89 2b       	or	r24, r25
    2564:	19 f4       	brne	.+6      	; 0x256c <lcd_puts+0x10>
    2566:	07 c0       	rjmp	.+14     	; 0x2576 <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    2568:	c1 df       	rcall	.-126    	; 0x24ec <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    256a:	fe 01       	movw	r30, r28
    256c:	ef 01       	movw	r28, r30
    256e:	21 96       	adiw	r28, 0x01	; 1
    2570:	80 81       	ld	r24, Z
    2572:	81 11       	cpse	r24, r1
    2574:	f9 cf       	rjmp	.-14     	; 0x2568 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	08 95       	ret

0000257c <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    257c:	cf 93       	push	r28
    257e:	df 93       	push	r29
    2580:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    2582:	89 2b       	or	r24, r25
    2584:	19 f4       	brne	.+6      	; 0x258c <lcd_puts_P+0x10>
    2586:	07 c0       	rjmp	.+14     	; 0x2596 <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    2588:	b1 df       	rcall	.-158    	; 0x24ec <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    258a:	fe 01       	movw	r30, r28
    258c:	ef 01       	movw	r28, r30
    258e:	21 96       	adiw	r28, 0x01	; 1
    2590:	84 91       	lpm	r24, Z
    2592:	81 11       	cpse	r24, r1
    2594:	f9 cf       	rjmp	.-14     	; 0x2588 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    2596:	df 91       	pop	r29
    2598:	cf 91       	pop	r28
    259a:	08 95       	ret

0000259c <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    259c:	82 ed       	ldi	r24, 0xD2	; 210
    259e:	93 e0       	ldi	r25, 0x03	; 3
    25a0:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    25a4:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    25a8:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    25ac:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    25b0:	08 95       	ret

000025b2 <log_count>:
    25b2:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    25b6:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    25ba:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    25be:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    25c2:	82 17       	cp	r24, r18
    25c4:	93 07       	cpc	r25, r19
    25c6:	48 f0       	brcs	.+18     	; 0x25da <log_count+0x28>
    25c8:	82 1b       	sub	r24, r18
    25ca:	93 0b       	sbc	r25, r19
    25cc:	95 95       	asr	r25
    25ce:	87 95       	ror	r24
    25d0:	9d ec       	ldi	r25, 0xCD	; 205
    25d2:	89 9f       	mul	r24, r25
    25d4:	80 2d       	mov	r24, r0
    25d6:	11 24       	eor	r1, r1
    25d8:	08 95       	ret
    25da:	80 57       	subi	r24, 0x70	; 112
    25dc:	9e 4f       	sbci	r25, 0xFE	; 254
    25de:	82 1b       	sub	r24, r18
    25e0:	93 0b       	sbc	r25, r19
    25e2:	95 95       	asr	r25
    25e4:	87 95       	ror	r24
    25e6:	9d ec       	ldi	r25, 0xCD	; 205
    25e8:	89 9f       	mul	r24, r25
    25ea:	80 2d       	mov	r24, r0
    25ec:	11 24       	eor	r1, r1
    25ee:	08 95       	ret

000025f0 <log_getLog>:
    25f0:	cf 93       	push	r28
    25f2:	c8 2f       	mov	r28, r24
    25f4:	de df       	rcall	.-68     	; 0x25b2 <log_count>
    25f6:	c8 17       	cp	r28, r24
    25f8:	f8 f4       	brcc	.+62     	; 0x2638 <log_getLog+0x48>
    25fa:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    25fe:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    2602:	8c 2f       	mov	r24, r28
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9c 01       	movw	r18, r24
    2608:	22 0f       	add	r18, r18
    260a:	33 1f       	adc	r19, r19
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	88 0f       	add	r24, r24
    2616:	99 1f       	adc	r25, r25
    2618:	28 0f       	add	r18, r24
    261a:	39 1f       	adc	r19, r25
    261c:	ca 01       	movw	r24, r20
    261e:	82 0f       	add	r24, r18
    2620:	93 1f       	adc	r25, r19
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	88 35       	cpi	r24, 0x58	; 88
    2626:	96 07       	cpc	r25, r22
    2628:	49 f0       	breq	.+18     	; 0x263c <log_getLog+0x4c>
    262a:	40 f0       	brcs	.+16     	; 0x263c <log_getLog+0x4c>
    262c:	20 59       	subi	r18, 0x90	; 144
    262e:	31 40       	sbci	r19, 0x01	; 1
    2630:	ca 01       	movw	r24, r20
    2632:	82 0f       	add	r24, r18
    2634:	93 1f       	adc	r25, r19
    2636:	02 c0       	rjmp	.+4      	; 0x263c <log_getLog+0x4c>
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <log_getErrorText>:
    2640:	d7 df       	rcall	.-82     	; 0x25f0 <log_getLog>
    2642:	00 97       	sbiw	r24, 0x00	; 0
    2644:	f1 f1       	breq	.+124    	; 0x26c2 <log_getErrorText+0x82>
    2646:	fc 01       	movw	r30, r24
    2648:	36 81       	ldd	r19, Z+6	; 0x06
    264a:	67 81       	ldd	r22, Z+7	; 0x07
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	34 c0       	rjmp	.+104    	; 0x26b8 <log_getErrorText+0x78>
    2650:	42 2f       	mov	r20, r18
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	fa 01       	movw	r30, r20
    2656:	ee 0f       	add	r30, r30
    2658:	ff 1f       	adc	r31, r31
    265a:	cf 01       	movw	r24, r30
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	e8 0f       	add	r30, r24
    266a:	f9 1f       	adc	r31, r25
    266c:	e6 59       	subi	r30, 0x96	; 150
    266e:	fe 4f       	sbci	r31, 0xFE	; 254
    2670:	84 91       	lpm	r24, Z
    2672:	38 13       	cpse	r19, r24
    2674:	20 c0       	rjmp	.+64     	; 0x26b6 <log_getErrorText+0x76>
    2676:	fa 01       	movw	r30, r20
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	cf 01       	movw	r24, r30
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	e8 0f       	add	r30, r24
    268c:	f9 1f       	adc	r31, r25
    268e:	e5 59       	subi	r30, 0x95	; 149
    2690:	fe 4f       	sbci	r31, 0xFE	; 254
    2692:	84 91       	lpm	r24, Z
    2694:	68 13       	cpse	r22, r24
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <log_getErrorText+0x76>
    2698:	44 0f       	add	r20, r20
    269a:	55 1f       	adc	r21, r21
    269c:	ca 01       	movw	r24, r20
    269e:	88 0f       	add	r24, r24
    26a0:	99 1f       	adc	r25, r25
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	48 0f       	add	r20, r24
    26ac:	59 1f       	adc	r21, r25
    26ae:	ca 01       	movw	r24, r20
    26b0:	84 59       	subi	r24, 0x94	; 148
    26b2:	9e 4f       	sbci	r25, 0xFE	; 254
    26b4:	08 95       	ret
    26b6:	2f 5f       	subi	r18, 0xFF	; 255
    26b8:	20 31       	cpi	r18, 0x10	; 16
    26ba:	50 f2       	brcs	.-108    	; 0x2650 <log_getErrorText+0x10>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	08 95       	ret
    26c2:	80 e0       	ldi	r24, 0x00	; 0
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	08 95       	ret

000026c8 <logCheckUnreadErrorLogs>:
    26c8:	cf 93       	push	r28
    26ca:	73 df       	rcall	.-282    	; 0x25b2 <log_count>
    26cc:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    26d0:	81 11       	cpse	r24, r1
    26d2:	14 c0       	rjmp	.+40     	; 0x26fc <logCheckUnreadErrorLogs+0x34>
    26d4:	17 c0       	rjmp	.+46     	; 0x2704 <logCheckUnreadErrorLogs+0x3c>
    26d6:	8c 2f       	mov	r24, r28
    26d8:	8b df       	rcall	.-234    	; 0x25f0 <log_getLog>
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	61 f0       	breq	.+24     	; 0x26f6 <logCheckUnreadErrorLogs+0x2e>
    26de:	fc 01       	movw	r30, r24
    26e0:	24 81       	ldd	r18, Z+4	; 0x04
    26e2:	20 32       	cpi	r18, 0x20	; 32
    26e4:	51 f0       	breq	.+20     	; 0x26fa <logCheckUnreadErrorLogs+0x32>
    26e6:	95 81       	ldd	r25, Z+5	; 0x05
    26e8:	8c 2f       	mov	r24, r28
    26ea:	95 34       	cpi	r25, 0x45	; 69
    26ec:	39 f4       	brne	.+14     	; 0x26fc <logCheckUnreadErrorLogs+0x34>
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    26f0:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    26f4:	07 c0       	rjmp	.+14     	; 0x2704 <logCheckUnreadErrorLogs+0x3c>
    26f6:	8c 2f       	mov	r24, r28
    26f8:	01 c0       	rjmp	.+2      	; 0x26fc <logCheckUnreadErrorLogs+0x34>
    26fa:	8c 2f       	mov	r24, r28
    26fc:	cf ef       	ldi	r28, 0xFF	; 255
    26fe:	c8 0f       	add	r28, r24
    2700:	81 11       	cpse	r24, r1
    2702:	e9 cf       	rjmp	.-46     	; 0x26d6 <logCheckUnreadErrorLogs+0xe>
    2704:	cf 91       	pop	r28
    2706:	08 95       	ret

00002708 <log_getShortTextFromPtr>:
    2708:	1f 93       	push	r17
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	09 f4       	brne	.+2      	; 0x2714 <log_getShortTextFromPtr+0xc>
    2712:	7b c0       	rjmp	.+246    	; 0x280a <log_getShortTextFromPtr+0x102>
    2714:	16 2f       	mov	r17, r22
    2716:	ec 01       	movw	r28, r24
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	88 23       	and	r24, r24
    271c:	79 f0       	breq	.+30     	; 0x273c <log_getShortTextFromPtr+0x34>
    271e:	6a ea       	ldi	r22, 0xAA	; 170
    2720:	73 e0       	ldi	r23, 0x03	; 3
    2722:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    2726:	bc 01       	movw	r22, r24
    2728:	6f 5f       	subi	r22, 0xFF	; 255
    272a:	7f 4f       	sbci	r23, 0xFF	; 255
    272c:	28 e6       	ldi	r18, 0x68	; 104
    272e:	fc 01       	movw	r30, r24
    2730:	20 83       	st	Z, r18
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    2738:	dc 01       	movw	r26, r24
    273a:	2f c0       	rjmp	.+94     	; 0x279a <log_getShortTextFromPtr+0x92>
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	88 23       	and	r24, r24
    2740:	79 f0       	breq	.+30     	; 0x2760 <log_getShortTextFromPtr+0x58>
    2742:	6a ea       	ldi	r22, 0xAA	; 170
    2744:	73 e0       	ldi	r23, 0x03	; 3
    2746:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    274a:	bc 01       	movw	r22, r24
    274c:	6f 5f       	subi	r22, 0xFF	; 255
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	2d e6       	ldi	r18, 0x6D	; 109
    2752:	fc 01       	movw	r30, r24
    2754:	20 83       	st	Z, r18
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    275c:	dc 01       	movw	r26, r24
    275e:	1d c0       	rjmp	.+58     	; 0x279a <log_getShortTextFromPtr+0x92>
    2760:	6a ea       	ldi	r22, 0xAA	; 170
    2762:	73 e0       	ldi	r23, 0x03	; 3
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    276a:	fc 01       	movw	r30, r24
    276c:	83 e7       	ldi	r24, 0x73	; 115
    276e:	80 83       	st	Z, r24
    2770:	98 81       	ld	r25, Y
    2772:	99 0f       	add	r25, r25
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	02 c0       	rjmp	.+4      	; 0x277c <log_getShortTextFromPtr+0x74>
    2778:	99 51       	subi	r25, 0x19	; 25
    277a:	2f 5f       	subi	r18, 0xFF	; 255
    277c:	99 31       	cpi	r25, 0x19	; 25
    277e:	e0 f7       	brcc	.-8      	; 0x2778 <log_getShortTextFromPtr+0x70>
    2780:	20 5d       	subi	r18, 0xD0	; 208
    2782:	21 83       	std	Z+1, r18	; 0x01
    2784:	99 0f       	add	r25, r25
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	02 c0       	rjmp	.+4      	; 0x278e <log_getShortTextFromPtr+0x86>
    278a:	95 50       	subi	r25, 0x05	; 5
    278c:	2f 5f       	subi	r18, 0xFF	; 255
    278e:	95 30       	cpi	r25, 0x05	; 5
    2790:	e0 f7       	brcc	.-8      	; 0x278a <log_getShortTextFromPtr+0x82>
    2792:	df 01       	movw	r26, r30
    2794:	13 96       	adiw	r26, 0x03	; 3
    2796:	20 5d       	subi	r18, 0xD0	; 208
    2798:	22 83       	std	Z+2, r18	; 0x02
    279a:	9c 81       	ldd	r25, Y+4	; 0x04
    279c:	90 34       	cpi	r25, 0x40	; 64
    279e:	51 f0       	breq	.+20     	; 0x27b4 <log_getShortTextFromPtr+0xac>
    27a0:	90 38       	cpi	r25, 0x80	; 128
    27a2:	19 f0       	breq	.+6      	; 0x27aa <log_getShortTextFromPtr+0xa2>
    27a4:	90 32       	cpi	r25, 0x20	; 32
    27a6:	81 f4       	brne	.+32     	; 0x27c8 <log_getShortTextFromPtr+0xc0>
    27a8:	0a c0       	rjmp	.+20     	; 0x27be <log_getShortTextFromPtr+0xb6>
    27aa:	fd 01       	movw	r30, r26
    27ac:	31 96       	adiw	r30, 0x01	; 1
    27ae:	8a e2       	ldi	r24, 0x2A	; 42
    27b0:	8c 93       	st	X, r24
    27b2:	0e c0       	rjmp	.+28     	; 0x27d0 <log_getShortTextFromPtr+0xc8>
    27b4:	fd 01       	movw	r30, r26
    27b6:	31 96       	adiw	r30, 0x01	; 1
    27b8:	85 ea       	ldi	r24, 0xA5	; 165
    27ba:	8c 93       	st	X, r24
    27bc:	09 c0       	rjmp	.+18     	; 0x27d0 <log_getShortTextFromPtr+0xc8>
    27be:	fd 01       	movw	r30, r26
    27c0:	31 96       	adiw	r30, 0x01	; 1
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	8c 93       	st	X, r24
    27c6:	04 c0       	rjmp	.+8      	; 0x27d0 <log_getShortTextFromPtr+0xc8>
    27c8:	fd 01       	movw	r30, r26
    27ca:	31 96       	adiw	r30, 0x01	; 1
    27cc:	8f e3       	ldi	r24, 0x3F	; 63
    27ce:	8c 93       	st	X, r24
    27d0:	bf 01       	movw	r22, r30
    27d2:	6f 5f       	subi	r22, 0xFF	; 255
    27d4:	7f 4f       	sbci	r23, 0xFF	; 255
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	80 83       	st	Z, r24
    27da:	8e 81       	ldd	r24, Y+6	; 0x06
    27dc:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    27e0:	bc 01       	movw	r22, r24
    27e2:	8f 81       	ldd	r24, Y+7	; 0x07
    27e4:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    27e8:	bc 01       	movw	r22, r24
    27ea:	6f 5f       	subi	r22, 0xFF	; 255
    27ec:	7f 4f       	sbci	r23, 0xFF	; 255
    27ee:	2d e2       	ldi	r18, 0x2D	; 45
    27f0:	fc 01       	movw	r30, r24
    27f2:	20 83       	st	Z, r18
    27f4:	88 85       	ldd	r24, Y+8	; 0x08
    27f6:	99 85       	ldd	r25, Y+9	; 0x09
    27f8:	0e 94 f0 35 	call	0x6be0	; 0x6be0 <putChar_long>
    27fc:	fc 01       	movw	r30, r24
    27fe:	10 82       	st	Z, r1
    2800:	1f 3f       	cpi	r17, 0xFF	; 255
    2802:	41 f0       	breq	.+16     	; 0x2814 <log_getShortTextFromPtr+0x10c>
    2804:	1c 83       	std	Y+4, r17	; 0x04
    2806:	60 df       	rcall	.-320    	; 0x26c8 <logCheckUnreadErrorLogs>
    2808:	05 c0       	rjmp	.+10     	; 0x2814 <log_getShortTextFromPtr+0x10c>
    280a:	ea ea       	ldi	r30, 0xAA	; 170
    280c:	f3 e0       	ldi	r31, 0x03	; 3
    280e:	8d e2       	ldi	r24, 0x2D	; 45
    2810:	80 83       	st	Z, r24
    2812:	11 82       	std	Z+1, r1	; 0x01
    2814:	8a ea       	ldi	r24, 0xAA	; 170
    2816:	93 e0       	ldi	r25, 0x03	; 3
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	08 95       	ret

00002820 <log_put>:
    2820:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2824:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2828:	a1 e4       	ldi	r26, 0x41	; 65
    282a:	b2 e0       	ldi	r27, 0x02	; 2
    282c:	9c 91       	ld	r25, X
    282e:	90 83       	st	Z, r25
    2830:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2834:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2838:	11 96       	adiw	r26, 0x01	; 1
    283a:	9c 91       	ld	r25, X
    283c:	11 97       	sbiw	r26, 0x01	; 1
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2844:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2848:	12 96       	adiw	r26, 0x02	; 2
    284a:	9c 91       	ld	r25, X
    284c:	12 97       	sbiw	r26, 0x02	; 2
    284e:	92 83       	std	Z+2, r25	; 0x02
    2850:	13 96       	adiw	r26, 0x03	; 3
    2852:	9c 91       	ld	r25, X
    2854:	93 83       	std	Z+3, r25	; 0x03
    2856:	25 83       	std	Z+5, r18	; 0x05
    2858:	86 83       	std	Z+6, r24	; 0x06
    285a:	67 83       	std	Z+7, r22	; 0x07
    285c:	51 87       	std	Z+9, r21	; 0x09
    285e:	40 87       	std	Z+8, r20	; 0x08
    2860:	80 e8       	ldi	r24, 0x80	; 128
    2862:	84 83       	std	Z+4, r24	; 0x04
    2864:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <serusb_Active>
    2868:	8f 3f       	cpi	r24, 0xFF	; 255
    286a:	81 f4       	brne	.+32     	; 0x288c <log_put+0x6c>
    286c:	84 e6       	ldi	r24, 0x64	; 100
    286e:	91 e0       	ldi	r25, 0x01	; 1
    2870:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    2874:	6f ef       	ldi	r22, 0xFF	; 255
    2876:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    287a:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    287e:	44 df       	rcall	.-376    	; 0x2708 <log_getShortTextFromPtr>
    2880:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    2884:	8f ed       	ldi	r24, 0xDF	; 223
    2886:	91 e1       	ldi	r25, 0x11	; 17
    2888:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    288c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2890:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2894:	0a 96       	adiw	r24, 0x0a	; 10
    2896:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    289a:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    289e:	88 55       	subi	r24, 0x58	; 88
    28a0:	95 40       	sbci	r25, 0x05	; 5
    28a2:	39 f0       	breq	.+14     	; 0x28b2 <log_put+0x92>
    28a4:	30 f0       	brcs	.+12     	; 0x28b2 <log_put+0x92>
    28a6:	82 ed       	ldi	r24, 0xD2	; 210
    28a8:	93 e0       	ldi	r25, 0x03	; 3
    28aa:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    28ae:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    28b2:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    28b6:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    28ba:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    28be:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    28c2:	28 17       	cp	r18, r24
    28c4:	39 07       	cpc	r19, r25
    28c6:	79 f4       	brne	.+30     	; 0x28e6 <log_put+0xc6>
    28c8:	0a 96       	adiw	r24, 0x0a	; 10
    28ca:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    28ce:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    28d2:	88 55       	subi	r24, 0x58	; 88
    28d4:	95 40       	sbci	r25, 0x05	; 5
    28d6:	39 f0       	breq	.+14     	; 0x28e6 <log_put+0xc6>
    28d8:	30 f0       	brcs	.+12     	; 0x28e6 <log_put+0xc6>
    28da:	82 ed       	ldi	r24, 0xD2	; 210
    28dc:	93 e0       	ldi	r25, 0x03	; 3
    28de:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    28e2:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    28e6:	08 95       	ret

000028e8 <log_putError>:
    28e8:	25 e4       	ldi	r18, 0x45	; 69
    28ea:	9a df       	rcall	.-204    	; 0x2820 <log_put>
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    28f2:	08 95       	ret

000028f4 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    28f4:	cf 93       	push	r28
    28f6:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    28f8:	7b de       	rcall	.-778    	; 0x25f0 <log_getLog>
	if (pLogEntry != NULL){
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	19 f0       	breq	.+6      	; 0x2904 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    28fe:	6c 2f       	mov	r22, r28
    2900:	03 df       	rcall	.-506    	; 0x2708 <log_getShortTextFromPtr>
    2902:	06 c0       	rjmp	.+12     	; 0x2910 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2904:	ea ea       	ldi	r30, 0xAA	; 170
    2906:	f3 e0       	ldi	r31, 0x03	; 3
    2908:	8d e2       	ldi	r24, 0x2D	; 45
    290a:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    290c:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    290e:	cf 01       	movw	r24, r30
	}
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret

00002914 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2914:	dd dc       	rcall	.-1606   	; 0x22d0 <init_iopins>
	init_log();
    2916:	42 de       	rcall	.-892    	; 0x259c <init_log>
    2918:	0e 94 48 33 	call	0x6690	; 0x6690 <init_Serial0SerUSB>
	init_Serial0SerUSB();
    291c:	0e 94 09 2a 	call	0x5412	; 0x5412 <init_message>
	init_message();
	init_HwTimer();
    2920:	73 d8       	rcall	.-3866   	; 0x1a08 <init_HwTimer>
	init_Timers();
    2922:	5a d8       	rcall	.-3916   	; 0x19d8 <init_Timers>
    2924:	80 d8       	rcall	.-3840   	; 0x1a26 <init_ADC>
	init_ADC();
    2926:	a9 d8       	rcall	.-3758   	; 0x1a7a <init_Pipe>
	init_Pipe();
    2928:	0e 94 30 32 	call	0x6460	; 0x6460 <init_Serial1MIDI>
	init_Serial1MIDI();
    292c:	ce d8       	rcall	.-3684   	; 0x1aca <init_PipeModules>
    292e:	0e 94 c6 2d 	call	0x5b8c	; 0x5b8c <init_Midi2Manual>
	init_PipeModules();
    2932:	0e 94 06 2e 	call	0x5c0c	; 0x5c0c <init_Manual2Midi>
	init_Midi2Manual();
    2936:	0e 94 9b 2a 	call	0x5536	; 0x5536 <init_Midi>
	init_Manual2Midi();
    293a:	0e 94 0f 2b 	call	0x561e	; 0x561e <init_Registers>
	init_Midi();
    293e:	0e 94 97 2e 	call	0x5d2e	; 0x5d2e <init_Manual2Module>
	init_Registers();
    2942:	0e 94 aa 28 	call	0x5154	; 0x5154 <init_SoftKeys>
	init_Manual2Module();
    2946:	0e 94 a1 0c 	call	0x1942	; 0x1942 <eeprom_UpdateALL>
	init_SoftKeys();
    294a:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    294e:	54 dd       	rcall	.-1368   	; 0x23f8 <lcd_init>
	INIT_MENU
    2950:	0e 94 10 35 	call	0x6a20	; 0x6a20 <lcd_initCG>


	// BOOT MESSAGE

	lcd_init ();
	lcd_initCG();
    2954:	a6 dd       	rcall	.-1204   	; 0x24a2 <lcd_clrscr>
	lcd_clrscr ();
    2956:	83 e4       	ldi	r24, 0x43	; 67
    2958:	9f dd       	rcall	.-1218   	; 0x2498 <lcd_goto>
	lcd_goto(LCD_LINE1+3);
    295a:	85 ea       	ldi	r24, 0xA5	; 165
    295c:	92 e0       	ldi	r25, 0x02	; 2
	lcd_puts_P(prog_name);
    295e:	0e de       	rcall	.-996    	; 0x257c <lcd_puts_P>
    2960:	8b e1       	ldi	r24, 0x1B	; 27
    2962:	9a dd       	rcall	.-1228   	; 0x2498 <lcd_goto>
	lcd_goto(LCD_LINE2+7);
    2964:	8f e7       	ldi	r24, 0x7F	; 127
    2966:	91 e1       	ldi	r25, 0x11	; 17
    2968:	09 de       	rcall	.-1006   	; 0x257c <lcd_puts_P>
	lcd_puts_P(sw_version);
    296a:	78 94       	sei
    296c:	2f ef       	ldi	r18, 0xFF	; 255
    296e:	87 e9       	ldi	r24, 0x97	; 151
    2970:	9a e3       	ldi	r25, 0x3A	; 58
	sei();
    2972:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2974:	80 40       	sbci	r24, 0x00	; 0
    2976:	90 40       	sbci	r25, 0x00	; 0
    2978:	e1 f7       	brne	.-8      	; 0x2972 <main+0x5e>
    297a:	00 c0       	rjmp	.+0      	; 0x297c <main+0x68>
    297c:	00 00       	nop
    297e:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2982:	8f dd       	rcall	.-1250   	; 0x24a2 <lcd_clrscr>
    2984:	f3 d9       	rcall	.-3098   	; 0x1d6c <module_StartPowerOn>
	lcd_clrscr ();
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>

	// TURN ON POWER

	module_StartPowerOn();
    298c:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
	MESSAGE_PIPE_HANDLING_ON
    2990:	8e ef       	ldi	r24, 0xFE	; 254
    2992:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>

	menuNotActive = TRUE;
    2996:	df ef       	ldi	r29, 0xFF	; 255
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2998:	20 91 f3 0b 	lds	r18, 0x0BF3	; 0x800bf3 <serESPRxInIndex>
    299c:	30 91 f4 0b 	lds	r19, 0x0BF4	; 0x800bf4 <serESPRxInIndex+0x1>
    while (1)
    {
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    29a0:	80 91 ed 0b 	lds	r24, 0x0BED	; 0x800bed <serESPRxOutIndex>
    29a4:	90 91 ee 0b 	lds	r25, 0x0BEE	; 0x800bee <serESPRxOutIndex+0x1>
    29a8:	28 17       	cp	r18, r24
    29aa:	39 07       	cpc	r19, r25
    29ac:	79 f0       	breq	.+30     	; 0x29cc <main+0xb8>
    29ae:	0e 94 4a 34 	call	0x6894	; 0x6894 <serial3SER_ESPReadRx>
    29b2:	c8 2f       	mov	r28, r24
    29b4:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
			uint8_t esp_message = serial3SER_ESPReadRx();
    29b8:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    29bc:	8f e7       	ldi	r24, 0x7F	; 127
    29be:	8c 0f       	add	r24, r28
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    29c0:	86 30       	cpi	r24, 0x06	; 6
    29c2:	20 f4       	brcc	.+8      	; 0x29cc <main+0xb8>
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    29c4:	80 e8       	ldi	r24, 0x80	; 128
    29c6:	8c 0f       	add	r24, r28
    29c8:	0e 94 10 2a 	call	0x5420	; 0x5420 <message_push>
				// push message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    29cc:	0e 94 3d 2a 	call	0x547a	; 0x547a <message_status>
    29d0:	88 23       	and	r24, r24
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <main+0xc2>
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    29d4:	42 c0       	rjmp	.+132    	; 0x2a5a <main+0x146>
    29d6:	0e 94 24 2a 	call	0x5448	; 0x5448 <message_get>
    29da:	c8 2f       	mov	r28, r24
    29dc:	86 38       	cpi	r24, 0x86	; 134
			uint8_t keyMessage = message_get();
    29de:	61 f4       	brne	.+24     	; 0x29f8 <main+0xe4>
    29e0:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    29e4:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <midi_AllManualsOff>
				// PANIC BUTTON
				midiSendAllNotesOff();
    29e8:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <midi_resetRegisters>
				midi_AllManualsOff();
    29ec:	0e 94 91 2a 	call	0x5522	; 0x5522 <midi_CouplerReset>
				midi_resetRegisters();
    29f0:	8a e8       	ldi	r24, 0x8A	; 138
    29f2:	92 e0       	ldi	r25, 0x02	; 2
				midi_CouplerReset();
    29f4:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    29f8:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    29fc:	8f 3f       	cpi	r24, 0xFF	; 255
    29fe:	f1 f4       	brne	.+60     	; 0x2a3c <main+0x128>
			}
			if (menuNotActive == TRUE) {
    2a00:	8c 2f       	mov	r24, r28
    2a02:	8f 73       	andi	r24, 0x3F	; 63
    2a04:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2a06:	61 f4       	brne	.+24     	; 0x2a20 <main+0x10c>
    2a08:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	40 d7       	rcall	.+3712   	; 0x3892 <menu_Init>
    2a12:	0e 94 0e 24 	call	0x481c	; 0x481c <menu_InitLCD>
    2a16:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menu_InitLCD(); //display menu
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
					menuNotActive = FALSE; // notify that menu is displayed
    2a1c:	fd d9       	rcall	.-3078   	; 0x1e18 <softKey_WantLong>
    2a1e:	1d c0       	rjmp	.+58     	; 0x2a5a <main+0x146>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2a20:	9f ef       	ldi	r25, 0xFF	; 255
    2a22:	98 0f       	add	r25, r24
    2a24:	94 30       	cpi	r25, 0x04	; 4
    2a26:	c8 f4       	brcc	.+50     	; 0x2a5a <main+0x146>
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2a28:	0e 94 6e 29 	call	0x52dc	; 0x52dc <softKey_MessageKey_ToSoftKeyNr>
    2a2c:	6c 2f       	mov	r22, r28
    2a2e:	0e 94 83 29 	call	0x5306	; 0x5306 <softKey_Execute>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2a32:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2a36:	0e 94 2f 29 	call	0x525e	; 0x525e <softKeys_toLCD>
    2a3a:	0f c0       	rjmp	.+30     	; 0x2a5a <main+0x146>
    2a3c:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
					softKeys_toLCD();
    2a40:	81 11       	cpse	r24, r1
    2a42:	06 c0       	rjmp	.+12     	; 0x2a50 <main+0x13c>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2a44:	8c 2f       	mov	r24, r28
    2a46:	0e 94 15 24 	call	0x482a	; 0x482a <menu_ProcessMessage>
    2a4a:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <main+0x146>
    2a50:	8d ef       	ldi	r24, 0xFD	; 253
    2a52:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    2a56:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <menu_ModuleTestExecute>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2a5a:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2a5e:	8f 3f       	cpi	r24, 0xFF	; 255
				}
			}
		}
		if (menuNotActive == TRUE) {
    2a60:	51 f4       	brne	.+20     	; 0x2a76 <main+0x162>
    2a62:	df 3f       	cpi	r29, 0xFF	; 255
    2a64:	49 f4       	brne	.+18     	; 0x2a78 <main+0x164>
    2a66:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <menu_ClearAllDisp>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2a6a:	0e 94 2f 29 	call	0x525e	; 0x525e <softKeys_toLCD>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2a6e:	8f ef       	ldi	r24, 0xFF	; 255
				softKeys_toLCD();
    2a70:	d3 d9       	rcall	.-3162   	; 0x1e18 <softKey_WantLong>
    2a72:	d0 e0       	ldi	r29, 0x00	; 0
				softKey_WantLong(TRUE);
    2a74:	01 c0       	rjmp	.+2      	; 0x2a78 <main+0x164>
    2a76:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2a78:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2a7c:	81 11       	cpse	r24, r1
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2a7e:	09 c0       	rjmp	.+18     	; 0x2a92 <main+0x17e>
    2a80:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2a84:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <menu_deleteMessage>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2a88:	8c 2f       	mov	r24, r28
				menu_deleteMessage();
    2a8a:	06 dd       	rcall	.-1524   	; 0x2498 <lcd_goto>
    2a8c:	8f ef       	ldi	r24, 0xFF	; 255
				lcd_goto(saveCursor);
    2a8e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    2a92:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2a96:	81 11       	cpse	r24, r1
    2a98:	0a c0       	rjmp	.+20     	; 0x2aae <main+0x19a>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2a9a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2a9e:	88 23       	and	r24, r24
    2aa0:	19 f0       	breq	.+6      	; 0x2aa8 <main+0x194>
			if (menu_TestModulePattern != 0){
    2aa2:	0e 94 9d 26 	call	0x4d3a	; 0x4d3a <menu_ModuleTestExecute>
    2aa6:	03 c0       	rjmp	.+6      	; 0x2aae <main+0x19a>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2aae:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
    2ab2:	81 11       	cpse	r24, r1
			}
		}

		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    2ab4:	1a c0       	rjmp	.+52     	; 0x2aea <main+0x1d6>
    2ab6:	6a d9       	rcall	.-3372   	; 0x1d8c <module_PowerControl>
    2ab8:	0e 94 cf 29 	call	0x539e	; 0x539e <menu_showPowerState>
			module_PowerControl();
    2abc:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			menu_showPowerState();
			if (menuNotActive == TRUE) {
    2ac0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ac2:	99 f4       	brne	.+38     	; 0x2aea <main+0x1d6>
    2ac4:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2ac8:	84 e1       	ldi	r24, 0x14	; 20
    2aca:	e6 dc       	rcall	.-1588   	; 0x2498 <lcd_goto>
				lcd_goto(LCD_LINE2);
    2acc:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	21 f4       	brne	.+8      	; 0x2adc <main+0x1c8>
    2ad4:	83 e9       	ldi	r24, 0x93	; 147
    2ad6:	92 e0       	ldi	r25, 0x02	; 2
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2ad8:	51 dd       	rcall	.-1374   	; 0x257c <lcd_puts_P>
    2ada:	05 c0       	rjmp	.+10     	; 0x2ae6 <main+0x1d2>
    2adc:	82 31       	cpi	r24, 0x12	; 18
    2ade:	19 f4       	brne	.+6      	; 0x2ae6 <main+0x1d2>
    2ae0:	84 e1       	ldi	r24, 0x14	; 20
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2ae2:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2ae6:	8c 2f       	mov	r24, r28
    2ae8:	d7 dc       	rcall	.-1618   	; 0x2498 <lcd_goto>
				}
				lcd_goto(saveCursor);
    2aea:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
    2aee:	9f e7       	ldi	r25, 0x7F	; 127
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2af0:	98 0f       	add	r25, r24
    2af2:	96 30       	cpi	r25, 0x06	; 6
    2af4:	10 f0       	brcs	.+4      	; 0x2afa <main+0x1e6>
    2af6:	8e 3f       	cpi	r24, 0xFE	; 254
    2af8:	09 f5       	brne	.+66     	; 0x2b3c <main+0x228>
    2afa:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <lcd_cursorIsOn>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2afe:	8f 3f       	cpi	r24, 0xFF	; 255
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2b00:	31 f4       	brne	.+12     	; 0x2b0e <main+0x1fa>
    2b02:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2b06:	dc dc       	rcall	.-1608   	; 0x24c0 <getCursorFromLCDRAMcursor>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2b08:	0e 94 14 34 	call	0x6828	; 0x6828 <serial3SER_ESPSend>
    2b0c:	03 c0       	rjmp	.+6      	; 0x2b14 <main+0x200>
    2b0e:	8f e7       	ldi	r24, 0x7F	; 127
    2b10:	0e 94 14 34 	call	0x6828	; 0x6828 <serial3SER_ESPSend>
    2b14:	81 e8       	ldi	r24, 0x81	; 129
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2b16:	0e 94 14 34 	call	0x6828	; 0x6828 <serial3SER_ESPSend>
    2b1a:	c0 e0       	ldi	r28, 0x00	; 0
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2b1c:	e8 e5       	ldi	r30, 0x58	; 88
    2b1e:	f3 e0       	ldi	r31, 0x03	; 3
    2b20:	08 c0       	rjmp	.+16     	; 0x2b32 <main+0x21e>
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2b22:	8f 01       	movw	r16, r30
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2b24:	0f 5f       	subi	r16, 0xFF	; 255
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2b28:	80 81       	ld	r24, Z
				serial3SER_ESPSend(*pChar++);
    2b2a:	0e 94 14 34 	call	0x6828	; 0x6828 <serial3SER_ESPSend>
    2b2e:	cf 5f       	subi	r28, 0xFF	; 255
    2b30:	f8 01       	movw	r30, r16
    2b32:	c0 35       	cpi	r28, 0x50	; 80
    2b34:	b0 f3       	brcs	.-20     	; 0x2b22 <main+0x20e>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2b36:	80 e8       	ldi	r24, 0x80	; 128
				serial3SER_ESPSend(*pChar++);
    2b38:	0e 94 14 34 	call	0x6828	; 0x6828 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2b3c:	8f ef       	ldi	r24, 0xFF	; 255
    2b3e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2b42:	0e 94 15 32 	call	0x642a	; 0x642a <midi_CheckTxActiveSense>
    2b46:	0e 94 08 30 	call	0x6010	; 0x6010 <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2b4a:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense

		// ------------------------ TOP STATUS LINE --------------------------
		uint8_t oldcursor = lcd_cursorPos;
    2b4e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
		if (midiLastInNote != MIDI_NOTE_NONE){
    2b52:	8f 3f       	cpi	r24, 0xFF	; 255
    2b54:	91 f1       	breq	.+100    	; 0x2bba <main+0x2a6>
    2b56:	80 e0       	ldi	r24, 0x00	; 0
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2b58:	9f dc       	rcall	.-1730   	; 0x2498 <lcd_goto>
    2b5a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
			if (midiLastInManual == MANUAL_NONE) {
    2b5e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b60:	69 f4       	brne	.+26     	; 0x2b7c <main+0x268>
    2b62:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
				// there was no manual assigned to midi in note
				// cc?nnn
				lcd_ChannelOut(midiLastInChannel);
    2b66:	0e 94 f1 36 	call	0x6de2	; 0x6de2 <lcd_ChannelOut>
    2b6a:	8f e3       	ldi	r24, 0x3F	; 63
				lcd_putc('?');
    2b6c:	bf dc       	rcall	.-1666   	; 0x24ec <lcd_putc>
    2b6e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				lcd_noteOut(midiLastInNote);
    2b72:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <lcd_noteOut>
    2b76:	80 e2       	ldi	r24, 0x20	; 32
				lcd_putc(' ');
    2b78:	b9 dc       	rcall	.-1678   	; 0x24ec <lcd_putc>
    2b7a:	0c c0       	rjmp	.+24     	; 0x2b94 <main+0x280>
    2b7c:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
			} else {
				// midi input to assigned manual
				// nnn>m
				lcd_noteOut(midiLastInNote);
    2b80:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <lcd_noteOut>
    2b84:	8e e7       	ldi	r24, 0x7E	; 126
    2b86:	b2 dc       	rcall	.-1692   	; 0x24ec <lcd_putc>
				lcd_putc(MENU_MIDI_IO_SIGN);
    2b88:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
    2b8c:	0e 94 02 37 	call	0x6e04	; 0x6e04 <lcd_ManualOutDec>
				lcd_ManualOutDec(midiLastInManual);
    2b90:	80 e2       	ldi	r24, 0x20	; 32
    2b92:	ac dc       	rcall	.-1704   	; 0x24ec <lcd_putc>
    2b94:	8c 2f       	mov	r24, r28
				lcd_putc(' ');
    2b96:	80 dc       	rcall	.-1792   	; 0x2498 <lcd_goto>
    2b98:	8f ef       	ldi	r24, 0xFF	; 255
    2b9a:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
			}
			lcd_goto(oldcursor);
    2b9e:	9f b7       	in	r25, 0x3f	; 63
			midiLastInNote = MIDI_NOTE_NONE;
    2ba0:	f8 94       	cli
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	06 c0       	rjmp	.+12     	; 0x2bb2 <main+0x29e>
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2ba6:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ba8:	f2 e0       	ldi	r31, 0x02	; 2
    2baa:	82 e3       	ldi	r24, 0x32	; 50
    2bac:	80 87       	std	Z+8, r24	; 0x08
    2bae:	11 86       	std	Z+9, r1	; 0x09
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	81 11       	cpse	r24, r1
    2bb4:	f8 cf       	rjmp	.-16     	; 0x2ba6 <main+0x292>
    2bb6:	9f bf       	out	0x3f, r25	; 63
    2bb8:	2c c0       	rjmp	.+88     	; 0x2c12 <main+0x2fe>
    2bba:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    2bbe:	8f 3f       	cpi	r24, 0xFF	; 255
		} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2bc0:	d9 f0       	breq	.+54     	; 0x2bf8 <main+0x2e4>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	69 dc       	rcall	.-1838   	; 0x2498 <lcd_goto>
    2bc6:	80 e7       	ldi	r24, 0x70	; 112
			// no midi not but a program change
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2bc8:	91 dc       	rcall	.-1758   	; 0x24ec <lcd_putc>
    2bca:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			lcd_putc('p');
    2bce:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <lcd_dec2out>
    2bd2:	8e e7       	ldi	r24, 0x7E	; 126
			lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2bd4:	8b dc       	rcall	.-1770   	; 0x24ec <lcd_putc>
    2bd6:	8f ef       	ldi	r24, 0xFF	; 255
    2bd8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2bdc:	9f b7       	in	r25, 0x3f	; 63
			midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2bde:	f8 94       	cli
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	06 c0       	rjmp	.+12     	; 0x2bf0 <main+0x2dc>
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2be4:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2be6:	f2 e0       	ldi	r31, 0x02	; 2
    2be8:	82 e3       	ldi	r24, 0x32	; 50
    2bea:	80 87       	std	Z+8, r24	; 0x08
    2bec:	11 86       	std	Z+9, r1	; 0x09
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	81 11       	cpse	r24, r1
    2bf2:	f8 cf       	rjmp	.-16     	; 0x2be4 <main+0x2d0>
    2bf4:	9f bf       	out	0x3f, r25	; 63
    2bf6:	0d c0       	rjmp	.+26     	; 0x2c12 <main+0x2fe>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2bf8:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
		} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2bfc:	81 11       	cpse	r24, r1
    2bfe:	09 c0       	rjmp	.+18     	; 0x2c12 <main+0x2fe>
    2c00:	4b dc       	rcall	.-1898   	; 0x2498 <lcd_goto>
			// timer for showing note has elapsed
			// removed or about every 2.5 second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2c02:	86 e0       	ldi	r24, 0x06	; 6
    2c04:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
			lcd_blank(6);
    2c08:	8c 2f       	mov	r24, r28
    2c0a:	46 dc       	rcall	.-1908   	; 0x2498 <lcd_goto>
			lcd_goto(oldcursor);
    2c0c:	8f ef       	ldi	r24, 0xFF	; 255
    2c0e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2c12:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
    2c16:	8f 3f       	cpi	r24, 0xFF	; 255
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
    2c18:	f9 f0       	breq	.+62     	; 0x2c58 <main+0x344>
    2c1a:	8f e0       	ldi	r24, 0x0F	; 15
    2c1c:	3d dc       	rcall	.-1926   	; 0x2498 <lcd_goto>
    2c1e:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
			// there is a midi in note to be displayed in status
			// m>nnn
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2c22:	0e 94 02 37 	call	0x6e04	; 0x6e04 <lcd_ManualOutDec>
			lcd_ManualOutDec(midiLastOutManual);
    2c26:	8e e7       	ldi	r24, 0x7E	; 126
    2c28:	61 dc       	rcall	.-1854   	; 0x24ec <lcd_putc>
    2c2a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
			lcd_putc(MENU_MIDI_IO_SIGN);
    2c2e:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <lcd_noteOut>
			lcd_noteOut(midiLastOutNote);
    2c32:	8c 2f       	mov	r24, r28
    2c34:	31 dc       	rcall	.-1950   	; 0x2498 <lcd_goto>
    2c36:	8f ef       	ldi	r24, 0xFF	; 255
			lcd_goto(oldcursor);
    2c38:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
    2c3c:	9f b7       	in	r25, 0x3f	; 63
			midiLastOutNote = MIDI_NOTE_NONE;
    2c3e:	f8 94       	cli
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	06 c0       	rjmp	.+12     	; 0x2c50 <main+0x33c>
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2c44:	ef e2       	ldi	r30, 0x2F	; 47
    2c46:	f2 e0       	ldi	r31, 0x02	; 2
    2c48:	82 e3       	ldi	r24, 0x32	; 50
    2c4a:	82 87       	std	Z+10, r24	; 0x0a
    2c4c:	13 86       	std	Z+11, r1	; 0x0b
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	81 11       	cpse	r24, r1
    2c52:	f8 cf       	rjmp	.-16     	; 0x2c44 <main+0x330>
    2c54:	9f bf       	out	0x3f, r25	; 63
    2c56:	38 c0       	rjmp	.+112    	; 0x2cc8 <main+0x3b4>
    __asm__ volatile ("" ::: "memory");
    2c58:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
		} else if (midi_RegisterChanged != REGISTER_NONE) {
    2c5c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c5e:	31 f1       	breq	.+76     	; 0x2cac <main+0x398>
    2c60:	8f e0       	ldi	r24, 0x0F	; 15
			// register change has top priority in display so it is processed later (!) and will overwrite previos note display
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2c62:	1a dc       	rcall	.-1996   	; 0x2498 <lcd_goto>
    2c64:	82 e5       	ldi	r24, 0x52	; 82
    2c66:	42 dc       	rcall	.-1916   	; 0x24ec <lcd_putc>
			lcd_putc('R');
    2c68:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
    2c6c:	8f 77       	andi	r24, 0x7F	; 127
			lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2c6e:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <lcd_dec2out>
    2c72:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
			// V 0.60 changed: down = Register ON!
			lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2c76:	88 23       	and	r24, r24
    2c78:	14 f0       	brlt	.+4      	; 0x2c7e <main+0x36a>
    2c7a:	88 e0       	ldi	r24, 0x08	; 8
    2c7c:	01 c0       	rjmp	.+2      	; 0x2c80 <main+0x36c>
    2c7e:	89 e0       	ldi	r24, 0x09	; 9
    2c80:	35 dc       	rcall	.-1942   	; 0x24ec <lcd_putc>
    2c82:	80 e2       	ldi	r24, 0x20	; 32
    2c84:	33 dc       	rcall	.-1946   	; 0x24ec <lcd_putc>
			lcd_putc(' ');
    2c86:	8c 2f       	mov	r24, r28
    2c88:	07 dc       	rcall	.-2034   	; 0x2498 <lcd_goto>
    2c8a:	8f ef       	ldi	r24, 0xFF	; 255
			lcd_goto(oldcursor);
    2c8c:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
    2c90:	9f b7       	in	r25, 0x3f	; 63
			midi_RegisterChanged = REGISTER_NONE;
    2c92:	f8 94       	cli
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	06 c0       	rjmp	.+12     	; 0x2ca4 <main+0x390>
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2c98:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2c9a:	f2 e0       	ldi	r31, 0x02	; 2
    2c9c:	82 e3       	ldi	r24, 0x32	; 50
    2c9e:	82 87       	std	Z+10, r24	; 0x0a
    2ca0:	13 86       	std	Z+11, r1	; 0x0b
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	f8 cf       	rjmp	.-16     	; 0x2c98 <main+0x384>
    2ca8:	9f bf       	out	0x3f, r25	; 63
    2caa:	0e c0       	rjmp	.+28     	; 0x2cc8 <main+0x3b4>
    2cac:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cb0:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    2cb2:	0a c0       	rjmp	.+20     	; 0x2cc8 <main+0x3b4>
		} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2cb4:	8f e0       	ldi	r24, 0x0F	; 15
    2cb6:	f0 db       	rcall	.-2080   	; 0x2498 <lcd_goto>
    2cb8:	85 e0       	ldi	r24, 0x05	; 5
    2cba:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
			// timer for showing note has elapsed
			// removed V0.59: or about every second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2cbe:	8c 2f       	mov	r24, r28
    2cc0:	eb db       	rcall	.-2090   	; 0x2498 <lcd_goto>
			lcd_blank(5);
    2cc2:	8f ef       	ldi	r24, 0xFF	; 255
    2cc4:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
			lcd_goto(oldcursor);
    2cc8:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
    2ccc:	8f 3f       	cpi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <main+0x3be>
    2cd0:	7e c0       	rjmp	.+252    	; 0x2dce <main+0x4ba>
    2cd2:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2cd6:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2cda:	c0 91 e8 10 	lds	r28, 0x10E8	; 0x8010e8 <lcd_cursorIsOn>
			time_UpTimeUpdated = FALSE;
    2cde:	cf 3f       	cpi	r28, 0xFF	; 255
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2ce0:	11 f4       	brne	.+4      	; 0x2ce6 <main+0x3d2>
    2ce2:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <lcd_cursoroff>
			uint8_t oldBlink = lcd_cursorIsOn;
			if (oldBlink == TRUE) {
    2ce6:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
				lcd_cursoroff();
    2cea:	88 23       	and	r24, r24
    2cec:	59 f0       	breq	.+22     	; 0x2d04 <main+0x3f0>
			}
			char separator;
			if (*pTime == 0) {
    2cee:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
    2cf2:	80 fd       	sbrc	r24, 0
    2cf4:	0e c0       	rjmp	.+28     	; 0x2d12 <main+0x3fe>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2cf6:	0f 2e       	mov	r0, r31
    2cf8:	fa e3       	ldi	r31, 0x3A	; 58
    2cfa:	ef 2e       	mov	r14, r31
				// when displaying hr:min blink ":"
				separator = ':';
    2cfc:	f0 2d       	mov	r31, r0
    2cfe:	04 e4       	ldi	r16, 0x44	; 68
    2d00:	12 e0       	ldi	r17, 0x02	; 2
    2d02:	0c c0       	rjmp	.+24     	; 0x2d1c <main+0x408>

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2d04:	0f 2e       	mov	r0, r31
    2d06:	fa e3       	ldi	r31, 0x3A	; 58
    2d08:	ef 2e       	mov	r14, r31
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2d0a:	f0 2d       	mov	r31, r0
    2d0c:	03 e4       	ldi	r16, 0x43	; 67
    2d0e:	12 e0       	ldi	r17, 0x02	; 2
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2d10:	05 c0       	rjmp	.+10     	; 0x2d1c <main+0x408>
    2d12:	68 94       	set
    2d14:	ee 24       	eor	r14, r14
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2d16:	e5 f8       	bld	r14, 5
    2d18:	04 e4       	ldi	r16, 0x44	; 68
    2d1a:	12 e0       	ldi	r17, 0x02	; 2

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2d1c:	87 e0       	ldi	r24, 0x07	; 7
    2d1e:	bc db       	rcall	.-2184   	; 0x2498 <lcd_goto>
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2d20:	f8 01       	movw	r30, r16
    2d22:	80 81       	ld	r24, Z
			lcd_dec2out(*(pTime--));
    2d24:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <lcd_dec2out>
    2d28:	8e 2d       	mov	r24, r14
    2d2a:	e0 db       	rcall	.-2112   	; 0x24ec <lcd_putc>
			lcd_putc(separator);
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	31 97       	sbiw	r30, 0x01	; 1
			lcd_dec2out(*pTime);
    2d30:	80 81       	ld	r24, Z
    2d32:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <lcd_dec2out>
    2d36:	40 91 5f 0d 	lds	r20, 0x0D5F	; 0x800d5f <midiRxOvflCount>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2d3a:	44 23       	and	r20, r20
			if (ovflCount > 0){
    2d3c:	31 f0       	breq	.+12     	; 0x2d4a <main+0x436>
    2d3e:	50 e0       	ldi	r21, 0x00	; 0
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	83 e0       	ldi	r24, 0x03	; 3
    2d44:	d1 dd       	rcall	.-1118   	; 0x28e8 <log_putError>
    2d46:	10 92 5f 0d 	sts	0x0D5F, r1	; 0x800d5f <midiRxOvflCount>
				midiRxOvflCount = 0;
    2d4a:	40 91 64 0e 	lds	r20, 0x0E64	; 0x800e64 <midiTxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2d4e:	44 23       	and	r20, r20
    2d50:	31 f0       	breq	.+12     	; 0x2d5e <main+0x44a>
			if (ovflCount > 0){
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	61 e0       	ldi	r22, 0x01	; 1
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2d56:	83 e0       	ldi	r24, 0x03	; 3
    2d58:	c7 dd       	rcall	.-1138   	; 0x28e8 <log_putError>
    2d5a:	10 92 64 0e 	sts	0x0E64, r1	; 0x800e64 <midiTxOvflCount>
    2d5e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				midiTxOvflCount = 0;
    2d62:	84 ff       	sbrs	r24, 4
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <main+0x456>
    2d66:	80 e2       	ldi	r24, 0x20	; 32
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <main+0x458>
    2d6a:	89 e0       	ldi	r24, 0x09	; 9
    2d6c:	bf db       	rcall	.-2178   	; 0x24ec <lcd_putc>
    2d6e:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
    2d72:	8f 3f       	cpi	r24, 0xFF	; 255
    2d74:	11 f4       	brne	.+4      	; 0x2d7a <main+0x466>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2d76:	85 e4       	ldi	r24, 0x45	; 69
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <main+0x468>
    2d7a:	80 e2       	ldi	r24, 0x20	; 32
    2d7c:	b7 db       	rcall	.-2194   	; 0x24ec <lcd_putc>
    2d7e:	8f 2d       	mov	r24, r15
    2d80:	8b db       	rcall	.-2282   	; 0x2498 <lcd_goto>
    2d82:	cf 3f       	cpi	r28, 0xFF	; 255
    2d84:	11 f4       	brne	.+4      	; 0x2d8a <main+0x476>
    2d86:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <lcd_cursosblink>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    2d8a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			if (oldBlink == TRUE) {
    2d8e:	8f 3f       	cpi	r24, 0xFF	; 255
				lcd_cursosblink();
    2d90:	69 f4       	brne	.+26     	; 0x2dac <main+0x498>
    2d92:	9f b7       	in	r25, 0x3f	; 63
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    2d94:	f8 94       	cli
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	06 c0       	rjmp	.+12     	; 0x2da6 <main+0x492>
    2d9a:	ef e2       	ldi	r30, 0x2F	; 47
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2d9c:	f2 e0       	ldi	r31, 0x02	; 2
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d9e:	8d e7       	ldi	r24, 0x7D	; 125
    2da0:	80 87       	std	Z+8, r24	; 0x08
    2da2:	11 86       	std	Z+9, r1	; 0x09
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	81 11       	cpse	r24, r1
    2da8:	f8 cf       	rjmp	.-16     	; 0x2d9a <main+0x486>
    2daa:	9f bf       	out	0x3f, r25	; 63
    2dac:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2db0:	8f 3f       	cpi	r24, 0xFF	; 255
    2db2:	69 f4       	brne	.+26     	; 0x2dce <main+0x4ba>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2db4:	9f b7       	in	r25, 0x3f	; 63
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    2db6:	f8 94       	cli
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <main+0x4b4>
    2dbc:	ef e2       	ldi	r30, 0x2F	; 47
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2dbe:	f2 e0       	ldi	r31, 0x02	; 2
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dc0:	8d e7       	ldi	r24, 0x7D	; 125
    2dc2:	82 87       	std	Z+10, r24	; 0x0a
    2dc4:	13 86       	std	Z+11, r1	; 0x0b
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	81 11       	cpse	r24, r1
    2dca:	f8 cf       	rjmp	.-16     	; 0x2dbc <main+0x4a8>
    2dcc:	9f bf       	out	0x3f, r25	; 63
    2dce:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    2dd2:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd4:	39 f4       	brne	.+14     	; 0x2de4 <main+0x4d0>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dd6:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	60 e0       	ldi	r22, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    2de0:	84 e0       	ldi	r24, 0x04	; 4
    2de2:	82 dd       	rcall	.-1276   	; 0x28e8 <log_putError>
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    2de4:	90 91 18 0d 	lds	r25, 0x0D18	; 0x800d18 <midiRxInIndex>
    2de8:	80 91 63 0e 	lds	r24, 0x0E63	; 0x800e63 <midiRxOutIndex>
    2dec:	98 17       	cp	r25, r24
    2dee:	21 f0       	breq	.+8      	; 0x2df8 <main+0x4e4>
		}

		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    2df0:	0e 94 88 32 	call	0x6510	; 0x6510 <serial1MIDIReadRx>
    2df4:	0e 94 91 30 	call	0x6122	; 0x6122 <midiIn_Process>
    2df8:	0e 94 87 2a 	call	0x550e	; 0x550e <pipeMsgStatus>
			midiIn_Process(serial1MIDIReadRx());
    2dfc:	8f 3f       	cpi	r24, 0xFF	; 255
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <main+0x4ee>
    2e00:	cb cd       	rjmp	.-1130   	; 0x2998 <main+0x84>
    2e02:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <pipeMsgGet>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    2e06:	0e 94 25 31 	call	0x624a	; 0x624a <midiKeyPress_Process>
    2e0a:	c6 cd       	rjmp	.-1140   	; 0x2998 <main+0x84>

00002e0c <menu_enterWriteModule>:
    2e0c:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
			midiKeyPress_Process(pipeMsgGet());
    2e10:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
    2e14:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    2e18:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <menu_enterWriteModule+0x1e>
    2e26:	88 0f       	add	r24, r24
    2e28:	99 1f       	adc	r25, r25
    2e2a:	0a 94       	dec	r0
    2e2c:	e2 f7       	brpl	.-8      	; 0x2e26 <menu_enterWriteModule+0x1a>
    2e2e:	48 2f       	mov	r20, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	e1 e4       	ldi	r30, 0x41	; 65
    2e34:	f3 e0       	ldi	r31, 0x03	; 3
    2e36:	22 c0       	rjmp	.+68     	; 0x2e7c <menu_enterWriteModule+0x70>
    2e38:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    2e3c:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    2e40:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    2e44:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    2e48:	88 0f       	add	r24, r24
    2e4a:	99 1f       	adc	r25, r25
    2e4c:	aa 1f       	adc	r26, r26
    2e4e:	bb 1f       	adc	r27, r27
    2e50:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    2e54:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    2e58:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    2e5c:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    2e60:	21 81       	ldd	r18, Z+1	; 0x01
    2e62:	24 23       	and	r18, r20
    2e64:	49 f0       	breq	.+18     	; 0x2e78 <menu_enterWriteModule+0x6c>
    2e66:	81 60       	ori	r24, 0x01	; 1
    2e68:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    2e6c:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    2e70:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    2e74:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    2e78:	38 97       	sbiw	r30, 0x08	; 8
    2e7a:	3f 5f       	subi	r19, 0xFF	; 255
    2e7c:	30 32       	cpi	r19, 0x20	; 32
    2e7e:	e0 f2       	brcs	.-72     	; 0x2e38 <menu_enterWriteModule+0x2c>
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	08 95       	ret

00002e84 <menu_exitWriteModule>:
    2e84:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    2e88:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    2e8c:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    2e90:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    2e94:	85 30       	cpi	r24, 0x05	; 5
    2e96:	09 f5       	brne	.+66     	; 0x2eda <menu_exitWriteModule+0x56>
    2e98:	a1 e0       	ldi	r26, 0x01	; 1
    2e9a:	b0 e0       	ldi	r27, 0x00	; 0
    2e9c:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <menu_exitWriteModule+0x22>
    2ea2:	aa 0f       	add	r26, r26
    2ea4:	bb 1f       	adc	r27, r27
    2ea6:	0a 94       	dec	r0
    2ea8:	e2 f7       	brpl	.-8      	; 0x2ea2 <menu_exitWriteModule+0x1e>
    2eaa:	3a 2f       	mov	r19, r26
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	e1 e4       	ldi	r30, 0x41	; 65
    2eb0:	f3 e0       	ldi	r31, 0x03	; 3
    2eb2:	11 c0       	rjmp	.+34     	; 0x2ed6 <menu_exitWriteModule+0x52>
    2eb4:	77 23       	and	r23, r23
    2eb6:	24 f4       	brge	.+8      	; 0x2ec0 <menu_exitWriteModule+0x3c>
    2eb8:	81 81       	ldd	r24, Z+1	; 0x01
    2eba:	83 2b       	or	r24, r19
    2ebc:	81 83       	std	Z+1, r24	; 0x01
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <menu_exitWriteModule+0x46>
    2ec0:	21 81       	ldd	r18, Z+1	; 0x01
    2ec2:	8a 2f       	mov	r24, r26
    2ec4:	80 95       	com	r24
    2ec6:	82 23       	and	r24, r18
    2ec8:	81 83       	std	Z+1, r24	; 0x01
    2eca:	44 0f       	add	r20, r20
    2ecc:	55 1f       	adc	r21, r21
    2ece:	66 1f       	adc	r22, r22
    2ed0:	77 1f       	adc	r23, r23
    2ed2:	38 97       	sbiw	r30, 0x08	; 8
    2ed4:	9f 5f       	subi	r25, 0xFF	; 255
    2ed6:	90 32       	cpi	r25, 0x20	; 32
    2ed8:	68 f3       	brcs	.-38     	; 0x2eb4 <menu_exitWriteModule+0x30>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	08 95       	ret

00002ede <menuOnEnterModSel>:
    2ede:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2ee2:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2ee6:	3e 96       	adiw	r30, 0x0e	; 14
    2ee8:	85 91       	lpm	r24, Z+
    2eea:	95 91       	lpm	r25, Z+
    2eec:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	08 95       	ret

00002ef4 <menuOnEnterMidiInCh>:
    2ef4:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2ef8:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2efc:	3e 96       	adiw	r30, 0x0e	; 14
    2efe:	85 91       	lpm	r24, Z+
    2f00:	95 91       	lpm	r25, Z+
    2f02:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	08 95       	ret

00002f0a <menuOnEnterMidiInSec>:
    2f0a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2f0e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2f12:	3e 96       	adiw	r30, 0x0e	; 14
    2f14:	25 91       	lpm	r18, Z+
    2f16:	35 91       	lpm	r19, Z+
    2f18:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    2f1c:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    2f20:	8f 70       	andi	r24, 0x0F	; 15
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	23 70       	andi	r18, 0x03	; 3
    2f26:	88 0f       	add	r24, r24
    2f28:	99 1f       	adc	r25, r25
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	82 0f       	add	r24, r18
    2f30:	91 1d       	adc	r25, r1
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    2f3e:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	08 95       	ret

00002f46 <menuOnEnterModManual>:
    2f46:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2f4a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2f4e:	3e 96       	adiw	r30, 0x0e	; 14
    2f50:	85 91       	lpm	r24, Z+
    2f52:	95 91       	lpm	r25, Z+
    2f54:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    2f58:	80 e0       	ldi	r24, 0x00	; 0
    2f5a:	08 95       	ret

00002f5c <menuOnEnterModSec>:
    2f5c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2f60:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2f64:	3e 96       	adiw	r30, 0x0e	; 14
    2f66:	85 91       	lpm	r24, Z+
    2f68:	95 91       	lpm	r25, Z+
    2f6a:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    2f6e:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    2f72:	2f 70       	andi	r18, 0x0F	; 15
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	83 70       	andi	r24, 0x03	; 3
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	a9 01       	movw	r20, r18
    2f7c:	44 0f       	add	r20, r20
    2f7e:	55 1f       	adc	r21, r21
    2f80:	24 0f       	add	r18, r20
    2f82:	35 1f       	adc	r19, r21
    2f84:	22 0f       	add	r18, r18
    2f86:	33 1f       	adc	r19, r19
    2f88:	22 0f       	add	r18, r18
    2f8a:	33 1f       	adc	r19, r19
    2f8c:	ac 01       	movw	r20, r24
    2f8e:	44 0f       	add	r20, r20
    2f90:	55 1f       	adc	r21, r21
    2f92:	84 0f       	add	r24, r20
    2f94:	95 1f       	adc	r25, r21
    2f96:	82 0f       	add	r24, r18
    2f98:	93 1f       	adc	r25, r19
    2f9a:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    2f9e:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	08 95       	ret

00002fa6 <menuOnEnterModSecReg>:
    2fa6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2faa:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2fae:	3e 96       	adiw	r30, 0x0e	; 14
    2fb0:	85 91       	lpm	r24, Z+
    2fb2:	95 91       	lpm	r25, Z+
    2fb4:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    2fb8:	87 70       	andi	r24, 0x07	; 7
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	9c 01       	movw	r18, r24
    2fbe:	22 0f       	add	r18, r18
    2fc0:	33 1f       	adc	r19, r19
    2fc2:	82 0f       	add	r24, r18
    2fc4:	93 1f       	adc	r25, r19
    2fc6:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    2fca:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	08 95       	ret

00002fd2 <menuOnEnterKey>:
    2fd2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2fd6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2fda:	3e 96       	adiw	r30, 0x0e	; 14
    2fdc:	85 91       	lpm	r24, Z+
    2fde:	95 91       	lpm	r25, Z+
    2fe0:	84 30       	cpi	r24, 0x04	; 4
    2fe2:	60 f4       	brcc	.+24     	; 0x2ffc <menuOnEnterKey+0x2a>
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	ff 27       	eor	r31, r31
    2fe8:	ee 0f       	add	r30, r30
    2fea:	ff 1f       	adc	r31, r31
    2fec:	e6 54       	subi	r30, 0x46	; 70
    2fee:	fa 4f       	sbci	r31, 0xFA	; 250
    2ff0:	80 81       	ld	r24, Z
    2ff2:	91 81       	ldd	r25, Z+1	; 0x01
    2ff4:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    2ff8:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	08 95       	ret

00003000 <menuOnExitMidiThrough>:
    3000:	0e 94 0d 0c 	call	0x181a	; 0x181a <eeprom_UpdateMidiThrough>
    3004:	80 e0       	ldi	r24, 0x00	; 0
    3006:	08 95       	ret

00003008 <menuOnExitRegisterEdit>:
    3008:	1f 93       	push	r17
    300a:	cf 93       	push	r28
    300c:	df 93       	push	r29
    300e:	86 30       	cpi	r24, 0x06	; 6
    3010:	f1 f0       	breq	.+60     	; 0x304e <menuOnExitRegisterEdit+0x46>
    3012:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3016:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    301a:	3e 96       	adiw	r30, 0x0e	; 14
    301c:	05 90       	lpm	r0, Z+
    301e:	f4 91       	lpm	r31, Z
    3020:	e0 2d       	mov	r30, r0
    3022:	cf 01       	movw	r24, r30
    3024:	8d 56       	subi	r24, 0x6D	; 109
    3026:	95 40       	sbci	r25, 0x05	; 5
    3028:	88 0f       	add	r24, r24
    302a:	88 0f       	add	r24, r24
    302c:	88 0f       	add	r24, r24
    302e:	d0 81       	ld	r29, Z
    3030:	c0 e0       	ldi	r28, 0x00	; 0
    3032:	0b c0       	rjmp	.+22     	; 0x304a <menuOnExitRegisterEdit+0x42>
    3034:	11 e0       	ldi	r17, 0x01	; 1
    3036:	18 0f       	add	r17, r24
    3038:	6d 2f       	mov	r22, r29
    303a:	66 1f       	adc	r22, r22
    303c:	66 27       	eor	r22, r22
    303e:	66 1f       	adc	r22, r22
    3040:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <register_onOff>
    3044:	dd 0f       	add	r29, r29
    3046:	cf 5f       	subi	r28, 0xFF	; 255
    3048:	81 2f       	mov	r24, r17
    304a:	c8 30       	cpi	r28, 0x08	; 8
    304c:	98 f3       	brcs	.-26     	; 0x3034 <menuOnExitRegisterEdit+0x2c>
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	1f 91       	pop	r17
    3056:	08 95       	ret

00003058 <softKeyRegOff>:
    3058:	81 11       	cpse	r24, r1
    305a:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <midi_resetRegisters>
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	08 95       	ret

00003062 <menuOnExitCoupler>:
    3062:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3066:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    306a:	3e 96       	adiw	r30, 0x0e	; 14
    306c:	85 91       	lpm	r24, Z+
    306e:	95 91       	lpm	r25, Z+
    3070:	8f 50       	subi	r24, 0x0F	; 15
    3072:	98 40       	sbci	r25, 0x08	; 8
    3074:	fc 01       	movw	r30, r24
    3076:	ff 27       	eor	r31, r31
    3078:	e1 5f       	subi	r30, 0xF1	; 241
    307a:	f7 4f       	sbci	r31, 0xF7	; 247
    307c:	20 81       	ld	r18, Z
    307e:	21 11       	cpse	r18, r1
    3080:	0e 94 9d 2a 	call	0x553a	; 0x553a <set_Coupler>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	08 95       	ret

00003088 <menuOnExitSaveProgram>:
    3088:	86 30       	cpi	r24, 0x06	; 6
    308a:	39 f0       	breq	.+14     	; 0x309a <menuOnExitSaveProgram+0x12>
    308c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3090:	80 34       	cpi	r24, 0x40	; 64
    3092:	18 f4       	brcc	.+6      	; 0x309a <menuOnExitSaveProgram+0x12>
    3094:	6f ef       	ldi	r22, 0xFF	; 255
    3096:	0e 94 36 2d 	call	0x5a6c	; 0x5a6c <register_toProgram>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	08 95       	ret

0000309e <menuOnExitKeys>:
    309e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <eeprom_UpdateSoftkeys>
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	08 95       	ret

000030a6 <menu_readModule>:
    30a6:	cf 92       	push	r12
    30a8:	df 92       	push	r13
    30aa:	ef 92       	push	r14
    30ac:	ff 92       	push	r15
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <menu_readModule+0x16>
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	0a 94       	dec	r0
    30be:	e2 f7       	brpl	.-8      	; 0x30b8 <menu_readModule+0x12>
    30c0:	28 2f       	mov	r18, r24
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	e1 e4       	ldi	r30, 0x41	; 65
    30c6:	f3 e0       	ldi	r31, 0x03	; 3
    30c8:	c1 2c       	mov	r12, r1
    30ca:	d1 2c       	mov	r13, r1
    30cc:	76 01       	movw	r14, r12
    30ce:	0b c0       	rjmp	.+22     	; 0x30e6 <menu_readModule+0x40>
    30d0:	cc 0c       	add	r12, r12
    30d2:	dd 1c       	adc	r13, r13
    30d4:	ee 1c       	adc	r14, r14
    30d6:	ff 1c       	adc	r15, r15
    30d8:	86 81       	ldd	r24, Z+6	; 0x06
    30da:	82 23       	and	r24, r18
    30dc:	11 f0       	breq	.+4      	; 0x30e2 <menu_readModule+0x3c>
    30de:	68 94       	set
    30e0:	c0 f8       	bld	r12, 0
    30e2:	38 97       	sbiw	r30, 0x08	; 8
    30e4:	9f 5f       	subi	r25, 0xFF	; 255
    30e6:	90 32       	cpi	r25, 0x20	; 32
    30e8:	98 f3       	brcs	.-26     	; 0x30d0 <menu_readModule+0x2a>
    30ea:	8e e1       	ldi	r24, 0x1E	; 30
    30ec:	d5 d9       	rcall	.-3158   	; 0x2498 <lcd_goto>
    30ee:	c0 92 ea 10 	sts	0x10EA, r12	; 0x8010ea <editLong>
    30f2:	d0 92 eb 10 	sts	0x10EB, r13	; 0x8010eb <editLong+0x1>
    30f6:	e0 92 ec 10 	sts	0x10EC, r14	; 0x8010ec <editLong+0x2>
    30fa:	f0 92 ed 10 	sts	0x10ED, r15	; 0x8010ed <editLong+0x3>
    30fe:	0e 94 34 35 	call	0x6a68	; 0x6a68 <lcd_longout>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	df 90       	pop	r13
    310a:	cf 90       	pop	r12
    310c:	08 95       	ret

0000310e <menu_testModule>:
    310e:	8e e1       	ldi	r24, 0x1E	; 30
    3110:	c3 d9       	rcall	.-3194   	; 0x2498 <lcd_goto>
    3112:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    3116:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <test_PipeModule>
    311a:	60 93 ea 10 	sts	0x10EA, r22	; 0x8010ea <editLong>
    311e:	70 93 eb 10 	sts	0x10EB, r23	; 0x8010eb <editLong+0x1>
    3122:	80 93 ec 10 	sts	0x10EC, r24	; 0x8010ec <editLong+0x2>
    3126:	90 93 ed 10 	sts	0x10ED, r25	; 0x8010ed <editLong+0x3>
    312a:	0e 94 34 35 	call	0x6a68	; 0x6a68 <lcd_longout>
    312e:	80 e0       	ldi	r24, 0x00	; 0
    3130:	08 95       	ret

00003132 <menuOnEnterTune>:
    3132:	cf 93       	push	r28
    3134:	8f 3f       	cpi	r24, 0xFF	; 255
    3136:	09 f0       	breq	.+2      	; 0x313a <menuOnEnterTune+0x8>
    3138:	77 c0       	rjmp	.+238    	; 0x3228 <menuOnEnterTune+0xf6>
    313a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.2929>
    313e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.2930>
    3142:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3146:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    314a:	3e 96       	adiw	r30, 0x0e	; 14
    314c:	85 91       	lpm	r24, Z+
    314e:	95 91       	lpm	r25, Z+
    3150:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    3154:	84 30       	cpi	r24, 0x04	; 4
    3156:	10 f0       	brcs	.+4      	; 0x315c <menuOnEnterTune+0x2a>
    3158:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	39 c0       	rjmp	.+114    	; 0x31d2 <menuOnEnterTune+0xa0>
    3160:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	e2 2f       	mov	r30, r18
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	df 01       	movw	r26, r30
    316c:	aa 0f       	add	r26, r26
    316e:	bb 1f       	adc	r27, r27
    3170:	ad 01       	movw	r20, r26
    3172:	4e 0f       	add	r20, r30
    3174:	5f 1f       	adc	r21, r31
    3176:	dc 01       	movw	r26, r24
    3178:	aa 0f       	add	r26, r26
    317a:	bb 1f       	adc	r27, r27
    317c:	a8 0f       	add	r26, r24
    317e:	b9 1f       	adc	r27, r25
    3180:	aa 0f       	add	r26, r26
    3182:	bb 1f       	adc	r27, r27
    3184:	aa 0f       	add	r26, r26
    3186:	bb 1f       	adc	r27, r27
    3188:	a4 0f       	add	r26, r20
    318a:	b5 1f       	adc	r27, r21
    318c:	ae 5c       	subi	r26, 0xCE	; 206
    318e:	b6 4f       	sbci	r27, 0xF6	; 246
    3190:	3c 91       	ld	r19, X
    3192:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.2929>
    3196:	34 17       	cp	r19, r20
    3198:	10 f4       	brcc	.+4      	; 0x319e <menuOnEnterTune+0x6c>
    319a:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.2929>
    319e:	af 01       	movw	r20, r30
    31a0:	44 0f       	add	r20, r20
    31a2:	55 1f       	adc	r21, r21
    31a4:	e4 0f       	add	r30, r20
    31a6:	f5 1f       	adc	r31, r21
    31a8:	ac 01       	movw	r20, r24
    31aa:	44 0f       	add	r20, r20
    31ac:	55 1f       	adc	r21, r21
    31ae:	84 0f       	add	r24, r20
    31b0:	95 1f       	adc	r25, r21
    31b2:	88 0f       	add	r24, r24
    31b4:	99 1f       	adc	r25, r25
    31b6:	88 0f       	add	r24, r24
    31b8:	99 1f       	adc	r25, r25
    31ba:	e8 0f       	add	r30, r24
    31bc:	f9 1f       	adc	r31, r25
    31be:	ee 5c       	subi	r30, 0xCE	; 206
    31c0:	f6 4f       	sbci	r31, 0xF6	; 246
    31c2:	81 81       	ldd	r24, Z+1	; 0x01
    31c4:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.2930>
    31c8:	98 17       	cp	r25, r24
    31ca:	10 f4       	brcc	.+4      	; 0x31d0 <menuOnEnterTune+0x9e>
    31cc:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.2930>
    31d0:	2f 5f       	subi	r18, 0xFF	; 255
    31d2:	24 30       	cpi	r18, 0x04	; 4
    31d4:	28 f2       	brcs	.-118    	; 0x3160 <menuOnEnterTune+0x2e>
    31d6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2929>
    31da:	88 23       	and	r24, r24
    31dc:	4c f4       	brge	.+18     	; 0x31f0 <menuOnEnterTune+0xbe>
    31de:	8e e1       	ldi	r24, 0x1E	; 30
    31e0:	5b d9       	rcall	.-3402   	; 0x2498 <lcd_goto>
    31e2:	8c e7       	ldi	r24, 0x7C	; 124
    31e4:	93 e0       	ldi	r25, 0x03	; 3
    31e6:	ca d9       	rcall	.-3180   	; 0x257c <lcd_puts_P>
    31e8:	8f ef       	ldi	r24, 0xFF	; 255
    31ea:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    31ee:	04 c0       	rjmp	.+8      	; 0x31f8 <menuOnEnterTune+0xc6>
    31f0:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    31f4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2931>
    31f8:	67 ea       	ldi	r22, 0xA7	; 167
    31fa:	71 e1       	ldi	r23, 0x11	; 17
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    3202:	66 eb       	ldi	r22, 0xB6	; 182
    3204:	71 e1       	ldi	r23, 0x11	; 17
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    320c:	6b eb       	ldi	r22, 0xBB	; 187
    320e:	71 e1       	ldi	r23, 0x11	; 17
    3210:	82 e0       	ldi	r24, 0x02	; 2
    3212:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    3216:	6d eb       	ldi	r22, 0xBD	; 189
    3218:	71 e1       	ldi	r23, 0x11	; 17
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    3220:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
    3224:	cf ef       	ldi	r28, 0xFF	; 255
    3226:	71 c0       	rjmp	.+226    	; 0x330a <menuOnEnterTune+0x1d8>
    3228:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    322c:	6f 3f       	cpi	r22, 0xFF	; 255
    322e:	09 f4       	brne	.+2      	; 0x3232 <menuOnEnterTune+0x100>
    3230:	61 c0       	rjmp	.+194    	; 0x32f4 <menuOnEnterTune+0x1c2>
    3232:	81 30       	cpi	r24, 0x01	; 1
    3234:	d9 f4       	brne	.+54     	; 0x326c <menuOnEnterTune+0x13a>
    3236:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.2930>
    323a:	68 17       	cp	r22, r24
    323c:	08 f0       	brcs	.+2      	; 0x3240 <menuOnEnterTune+0x10e>
    323e:	5c c0       	rjmp	.+184    	; 0x32f8 <menuOnEnterTune+0x1c6>
    3240:	40 e0       	ldi	r20, 0x00	; 0
    3242:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3246:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <manual_NoteOnOff>
    324a:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    324e:	6f 5f       	subi	r22, 0xFF	; 255
    3250:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3254:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2931>
    3258:	81 30       	cpi	r24, 0x01	; 1
    325a:	09 f0       	breq	.+2      	; 0x325e <menuOnEnterTune+0x12c>
    325c:	4f c0       	rjmp	.+158    	; 0x32fc <menuOnEnterTune+0x1ca>
    325e:	41 e0       	ldi	r20, 0x01	; 1
    3260:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3264:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <manual_NoteOnOff>
    3268:	cf ef       	ldi	r28, 0xFF	; 255
    326a:	4f c0       	rjmp	.+158    	; 0x330a <menuOnEnterTune+0x1d8>
    326c:	84 30       	cpi	r24, 0x04	; 4
    326e:	d1 f4       	brne	.+52     	; 0x32a4 <menuOnEnterTune+0x172>
    3270:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2929>
    3274:	86 17       	cp	r24, r22
    3276:	08 f0       	brcs	.+2      	; 0x327a <menuOnEnterTune+0x148>
    3278:	43 c0       	rjmp	.+134    	; 0x3300 <menuOnEnterTune+0x1ce>
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3280:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <manual_NoteOnOff>
    3284:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3288:	61 50       	subi	r22, 0x01	; 1
    328a:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    328e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2931>
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	b9 f5       	brne	.+110    	; 0x3304 <menuOnEnterTune+0x1d2>
    3296:	41 e0       	ldi	r20, 0x01	; 1
    3298:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    329c:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <manual_NoteOnOff>
    32a0:	cf ef       	ldi	r28, 0xFF	; 255
    32a2:	33 c0       	rjmp	.+102    	; 0x330a <menuOnEnterTune+0x1d8>
    32a4:	83 30       	cpi	r24, 0x03	; 3
    32a6:	91 f4       	brne	.+36     	; 0x32cc <menuOnEnterTune+0x19a>
    32a8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2931>
    32ac:	81 11       	cpse	r24, r1
    32ae:	04 c0       	rjmp	.+8      	; 0x32b8 <menuOnEnterTune+0x186>
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.2931>
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <menuOnEnterTune+0x18a>
    32b8:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2931>
    32bc:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.2931>
    32c0:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    32c4:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <manual_NoteOnOff>
    32c8:	cf ef       	ldi	r28, 0xFF	; 255
    32ca:	1f c0       	rjmp	.+62     	; 0x330a <menuOnEnterTune+0x1d8>
    32cc:	82 30       	cpi	r24, 0x02	; 2
    32ce:	11 f0       	breq	.+4      	; 0x32d4 <menuOnEnterTune+0x1a2>
    32d0:	86 30       	cpi	r24, 0x06	; 6
    32d2:	39 f4       	brne	.+14     	; 0x32e2 <menuOnEnterTune+0x1b0>
    32d4:	40 e0       	ldi	r20, 0x00	; 0
    32d6:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    32da:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <manual_NoteOnOff>
    32de:	c0 e0       	ldi	r28, 0x00	; 0
    32e0:	14 c0       	rjmp	.+40     	; 0x330a <menuOnEnterTune+0x1d8>
    32e2:	85 30       	cpi	r24, 0x05	; 5
    32e4:	89 f4       	brne	.+34     	; 0x3308 <menuOnEnterTune+0x1d6>
    32e6:	40 e0       	ldi	r20, 0x00	; 0
    32e8:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    32ec:	0e 94 14 2f 	call	0x5e28	; 0x5e28 <manual_NoteOnOff>
    32f0:	c0 e0       	ldi	r28, 0x00	; 0
    32f2:	0b c0       	rjmp	.+22     	; 0x330a <menuOnEnterTune+0x1d8>
    32f4:	c0 e0       	ldi	r28, 0x00	; 0
    32f6:	09 c0       	rjmp	.+18     	; 0x330a <menuOnEnterTune+0x1d8>
    32f8:	cf ef       	ldi	r28, 0xFF	; 255
    32fa:	07 c0       	rjmp	.+14     	; 0x330a <menuOnEnterTune+0x1d8>
    32fc:	cf ef       	ldi	r28, 0xFF	; 255
    32fe:	05 c0       	rjmp	.+10     	; 0x330a <menuOnEnterTune+0x1d8>
    3300:	cf ef       	ldi	r28, 0xFF	; 255
    3302:	03 c0       	rjmp	.+6      	; 0x330a <menuOnEnterTune+0x1d8>
    3304:	cf ef       	ldi	r28, 0xFF	; 255
    3306:	01 c0       	rjmp	.+2      	; 0x330a <menuOnEnterTune+0x1d8>
    3308:	cf ef       	ldi	r28, 0xFF	; 255
    330a:	cf 3f       	cpi	r28, 0xFF	; 255
    330c:	59 f5       	brne	.+86     	; 0x3364 <menuOnEnterTune+0x232>
    330e:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    3312:	8f 3f       	cpi	r24, 0xFF	; 255
    3314:	29 f1       	breq	.+74     	; 0x3360 <menuOnEnterTune+0x22e>
    3316:	8e e1       	ldi	r24, 0x1E	; 30
    3318:	bf d8       	rcall	.-3714   	; 0x2498 <lcd_goto>
    331a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    331e:	0e 94 a0 36 	call	0x6d40	; 0x6d40 <lcd_noteOut>
    3322:	80 e2       	ldi	r24, 0x20	; 32
    3324:	e3 d8       	rcall	.-3642   	; 0x24ec <lcd_putc>
    3326:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2931>
    332a:	81 11       	cpse	r24, r1
    332c:	07 c0       	rjmp	.+14     	; 0x333c <menuOnEnterTune+0x20a>
    332e:	81 e6       	ldi	r24, 0x61	; 97
    3330:	dd d8       	rcall	.-3654   	; 0x24ec <lcd_putc>
    3332:	85 e7       	ldi	r24, 0x75	; 117
    3334:	db d8       	rcall	.-3658   	; 0x24ec <lcd_putc>
    3336:	83 e7       	ldi	r24, 0x73	; 115
    3338:	d9 d8       	rcall	.-3662   	; 0x24ec <lcd_putc>
    333a:	06 c0       	rjmp	.+12     	; 0x3348 <menuOnEnterTune+0x216>
    333c:	85 e6       	ldi	r24, 0x65	; 101
    333e:	d6 d8       	rcall	.-3668   	; 0x24ec <lcd_putc>
    3340:	89 e6       	ldi	r24, 0x69	; 105
    3342:	d4 d8       	rcall	.-3672   	; 0x24ec <lcd_putc>
    3344:	8e e6       	ldi	r24, 0x6E	; 110
    3346:	d2 d8       	rcall	.-3676   	; 0x24ec <lcd_putc>
    3348:	61 e0       	ldi	r22, 0x01	; 1
    334a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2931>
    334e:	81 11       	cpse	r24, r1
    3350:	01 c0       	rjmp	.+2      	; 0x3354 <menuOnEnterTune+0x222>
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <keylabel_statcheck>
    335a:	81 11       	cpse	r24, r1
    335c:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
    3360:	8e e1       	ldi	r24, 0x1E	; 30
    3362:	9a d8       	rcall	.-3788   	; 0x2498 <lcd_goto>
    3364:	8c 2f       	mov	r24, r28
    3366:	cf 91       	pop	r28
    3368:	08 95       	ret

0000336a <menuOnExitMidiActiveSense>:
    336a:	0e 94 93 0b 	call	0x1726	; 0x1726 <eeprom_UpdateMidiOutMap>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	08 95       	ret

00003372 <menuOnExitMidiOut>:
    3372:	0e 94 93 0b 	call	0x1726	; 0x1726 <eeprom_UpdateMidiOutMap>
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	08 95       	ret

0000337a <menuOnExitMidiIn>:
    337a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <eeprom_UpdateMidiInMap>
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	08 95       	ret

00003382 <menuOnExitManual>:
    3382:	0e 94 4f 0b 	call	0x169e	; 0x169e <eeprom_UpdateManualMap>
    3386:	0e 94 f5 2a 	call	0x55ea	; 0x55ea <registers_CalcCount>
    338a:	0e 94 2f 0c 	call	0x185e	; 0x185e <eeprom_UpdateReg>
    338e:	0e 94 40 2e 	call	0x5c80	; 0x5c80 <Midi_updateManualRange>
    3392:	80 e0       	ldi	r24, 0x00	; 0
    3394:	08 95       	ret

00003396 <menuOnExitModules>:
    3396:	0e 94 c3 0b 	call	0x1786	; 0x1786 <eeprom_UpdateModules>
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	08 95       	ret

0000339e <menuOnEnterUSBprotokoll>:
    339e:	cf 93       	push	r28
    33a0:	8f e5       	ldi	r24, 0x5F	; 95
    33a2:	93 e0       	ldi	r25, 0x03	; 3
    33a4:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    33a8:	04 d9       	rcall	.-3576   	; 0x25b2 <log_count>
    33aa:	81 11       	cpse	r24, r1
    33ac:	17 c0       	rjmp	.+46     	; 0x33dc <menuOnEnterUSBprotokoll+0x3e>
    33ae:	85 e6       	ldi	r24, 0x65	; 101
    33b0:	93 e0       	ldi	r25, 0x03	; 3
    33b2:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    33b6:	16 c0       	rjmp	.+44     	; 0x33e4 <menuOnEnterUSBprotokoll+0x46>
    33b8:	6f ef       	ldi	r22, 0xFF	; 255
    33ba:	8c 2f       	mov	r24, r28
    33bc:	9b da       	rcall	.-2762   	; 0x28f4 <log_getShortTextFromIndex>
    33be:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    33c2:	8f ed       	ldi	r24, 0xDF	; 223
    33c4:	91 e1       	ldi	r25, 0x11	; 17
    33c6:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    33ca:	8c 2f       	mov	r24, r28
    33cc:	39 d9       	rcall	.-3470   	; 0x2640 <log_getErrorText>
    33ce:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    33d2:	8f ed       	ldi	r24, 0xDF	; 223
    33d4:	91 e1       	ldi	r25, 0x11	; 17
    33d6:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    33da:	8c 2f       	mov	r24, r28
    33dc:	cf ef       	ldi	r28, 0xFF	; 255
    33de:	c8 0f       	add	r28, r24
    33e0:	81 11       	cpse	r24, r1
    33e2:	ea cf       	rjmp	.-44     	; 0x33b8 <menuOnEnterUSBprotokoll+0x1a>
    33e4:	80 e0       	ldi	r24, 0x00	; 0
    33e6:	cf 91       	pop	r28
    33e8:	08 95       	ret

000033ea <menuOnExitUSBactive>:
    33ea:	0e 94 ed 0b 	call	0x17da	; 0x17da <eeprom_UpdateUSB>
    33ee:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <serusb_Active>
    33f2:	8f 3f       	cpi	r24, 0xFF	; 255
    33f4:	61 f4       	brne	.+24     	; 0x340e <menuOnExitUSBactive+0x24>
    33f6:	86 e4       	ldi	r24, 0x46	; 70
    33f8:	93 e0       	ldi	r25, 0x03	; 3
    33fa:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    33fe:	8f e7       	ldi	r24, 0x7F	; 127
    3400:	91 e1       	ldi	r25, 0x11	; 17
    3402:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    3406:	8f ed       	ldi	r24, 0xDF	; 223
    3408:	91 e1       	ldi	r25, 0x11	; 17
    340a:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	08 95       	ret

00003412 <menuOnEnterUSBsendHW>:
    3412:	9f 92       	push	r9
    3414:	af 92       	push	r10
    3416:	bf 92       	push	r11
    3418:	cf 92       	push	r12
    341a:	df 92       	push	r13
    341c:	ef 92       	push	r14
    341e:	ff 92       	push	r15
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	8d e2       	ldi	r24, 0x2D	; 45
    342a:	93 e0       	ldi	r25, 0x03	; 3
    342c:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    3430:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    3434:	8a e1       	ldi	r24, 0x1A	; 26
    3436:	93 e0       	ldi	r25, 0x03	; 3
    3438:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    343c:	c5 e5       	ldi	r28, 0x55	; 85
    343e:	d3 e0       	ldi	r29, 0x03	; 3
    3440:	6e ee       	ldi	r22, 0xEE	; 238
    3442:	70 e1       	ldi	r23, 0x10	; 16
    3444:	88 81       	ld	r24, Y
    3446:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    344a:	22 e7       	ldi	r18, 0x72	; 114
    344c:	fc 01       	movw	r30, r24
    344e:	20 83       	st	Z, r18
    3450:	bc 01       	movw	r22, r24
    3452:	6e 5f       	subi	r22, 0xFE	; 254
    3454:	7f 4f       	sbci	r23, 0xFF	; 255
    3456:	20 e2       	ldi	r18, 0x20	; 32
    3458:	21 83       	std	Z+1, r18	; 0x01
    345a:	89 81       	ldd	r24, Y+1	; 0x01
    345c:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    3460:	27 e7       	ldi	r18, 0x77	; 119
    3462:	fc 01       	movw	r30, r24
    3464:	20 83       	st	Z, r18
    3466:	8e ee       	ldi	r24, 0xEE	; 238
    3468:	90 e1       	ldi	r25, 0x10	; 16
    346a:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    346e:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    3472:	88 e0       	ldi	r24, 0x08	; 8
    3474:	93 e0       	ldi	r25, 0x03	; 3
    3476:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    347a:	6e ee       	ldi	r22, 0xEE	; 238
    347c:	70 e1       	ldi	r23, 0x10	; 16
    347e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    3482:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    3486:	8e ee       	ldi	r24, 0xEE	; 238
    3488:	90 e1       	ldi	r25, 0x10	; 16
    348a:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    348e:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    3492:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    3496:	e1 2c       	mov	r14, r1
    3498:	d1 c0       	rjmp	.+418    	; 0x363c <menuOnEnterUSBsendHW+0x22a>
    349a:	8f ef       	ldi	r24, 0xFF	; 255
    349c:	92 e0       	ldi	r25, 0x02	; 2
    349e:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    34a2:	6e ee       	ldi	r22, 0xEE	; 238
    34a4:	70 e1       	ldi	r23, 0x10	; 16
    34a6:	8e 2d       	mov	r24, r14
    34a8:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <putChar_Manual>
    34ac:	8e ee       	ldi	r24, 0xEE	; 238
    34ae:	90 e1       	ldi	r25, 0x10	; 16
    34b0:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    34b4:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    34b8:	f1 2c       	mov	r15, r1
    34ba:	a4 c0       	rjmp	.+328    	; 0x3604 <menuOnEnterUSBsendHW+0x1f2>
    34bc:	88 ef       	ldi	r24, 0xF8	; 248
    34be:	92 e0       	ldi	r25, 0x02	; 2
    34c0:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    34c4:	80 e3       	ldi	r24, 0x30	; 48
    34c6:	8f 0d       	add	r24, r15
    34c8:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    34cc:	8a e3       	ldi	r24, 0x3A	; 58
    34ce:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    34d2:	80 e2       	ldi	r24, 0x20	; 32
    34d4:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    34d8:	0e 2d       	mov	r16, r14
    34da:	10 e0       	ldi	r17, 0x00	; 0
    34dc:	cf 2c       	mov	r12, r15
    34de:	d1 2c       	mov	r13, r1
    34e0:	e6 01       	movw	r28, r12
    34e2:	cc 0f       	add	r28, r28
    34e4:	dd 1f       	adc	r29, r29
    34e6:	ce 01       	movw	r24, r28
    34e8:	8c 0d       	add	r24, r12
    34ea:	9d 1d       	adc	r25, r13
    34ec:	e8 01       	movw	r28, r16
    34ee:	cc 0f       	add	r28, r28
    34f0:	dd 1f       	adc	r29, r29
    34f2:	c0 0f       	add	r28, r16
    34f4:	d1 1f       	adc	r29, r17
    34f6:	cc 0f       	add	r28, r28
    34f8:	dd 1f       	adc	r29, r29
    34fa:	cc 0f       	add	r28, r28
    34fc:	dd 1f       	adc	r29, r29
    34fe:	c8 0f       	add	r28, r24
    3500:	d9 1f       	adc	r29, r25
    3502:	ce 5c       	subi	r28, 0xCE	; 206
    3504:	d6 4f       	sbci	r29, 0xF6	; 246
    3506:	6e ee       	ldi	r22, 0xEE	; 238
    3508:	70 e1       	ldi	r23, 0x10	; 16
    350a:	88 81       	ld	r24, Y
    350c:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    3510:	bc 01       	movw	r22, r24
    3512:	6f 5f       	subi	r22, 0xFF	; 255
    3514:	7f 4f       	sbci	r23, 0xFF	; 255
    3516:	0f 2e       	mov	r0, r31
    3518:	fe e2       	ldi	r31, 0x2E	; 46
    351a:	bf 2e       	mov	r11, r31
    351c:	f0 2d       	mov	r31, r0
    351e:	fc 01       	movw	r30, r24
    3520:	b0 82       	st	Z, r11
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    3528:	bc 01       	movw	r22, r24
    352a:	6f 5f       	subi	r22, 0xFF	; 255
    352c:	7f 4f       	sbci	r23, 0xFF	; 255
    352e:	fc 01       	movw	r30, r24
    3530:	b0 82       	st	Z, r11
    3532:	8a 81       	ldd	r24, Y+2	; 0x02
    3534:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    3538:	fc 01       	movw	r30, r24
    353a:	80 e2       	ldi	r24, 0x20	; 32
    353c:	80 83       	st	Z, r24
    353e:	9d e3       	ldi	r25, 0x3D	; 61
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	82 83       	std	Z+2, r24	; 0x02
    3544:	8e ee       	ldi	r24, 0xEE	; 238
    3546:	90 e1       	ldi	r25, 0x10	; 16
    3548:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    354c:	88 81       	ld	r24, Y
    354e:	88 23       	and	r24, r24
    3550:	2c f4       	brge	.+10     	; 0x355c <menuOnEnterUSBsendHW+0x14a>
    3552:	86 ee       	ldi	r24, 0xE6	; 230
    3554:	92 e0       	ldi	r25, 0x02	; 2
    3556:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    355a:	51 c0       	rjmp	.+162    	; 0x35fe <menuOnEnterUSBsendHW+0x1ec>
    355c:	6e ee       	ldi	r22, 0xEE	; 238
    355e:	70 e1       	ldi	r23, 0x10	; 16
    3560:	0e 94 0d 36 	call	0x6c1a	; 0x6c1a <putChar_Note>
    3564:	bc 01       	movw	r22, r24
    3566:	6f 5f       	subi	r22, 0xFF	; 255
    3568:	7f 4f       	sbci	r23, 0xFF	; 255
    356a:	0f 2e       	mov	r0, r31
    356c:	fd e2       	ldi	r31, 0x2D	; 45
    356e:	9f 2e       	mov	r9, r31
    3570:	f0 2d       	mov	r31, r0
    3572:	fc 01       	movw	r30, r24
    3574:	90 82       	st	Z, r9
    3576:	f6 01       	movw	r30, r12
    3578:	ee 0f       	add	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	ce 0e       	add	r12, r30
    357e:	df 1e       	adc	r13, r31
    3580:	58 01       	movw	r10, r16
    3582:	aa 0c       	add	r10, r10
    3584:	bb 1c       	adc	r11, r11
    3586:	e5 01       	movw	r28, r10
    3588:	c0 0f       	add	r28, r16
    358a:	d1 1f       	adc	r29, r17
    358c:	cc 0f       	add	r28, r28
    358e:	dd 1f       	adc	r29, r29
    3590:	cc 0f       	add	r28, r28
    3592:	dd 1f       	adc	r29, r29
    3594:	cc 0d       	add	r28, r12
    3596:	dd 1d       	adc	r29, r13
    3598:	ce 5c       	subi	r28, 0xCE	; 206
    359a:	d6 4f       	sbci	r29, 0xF6	; 246
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	0e 94 0d 36 	call	0x6c1a	; 0x6c1a <putChar_Note>
    35a2:	20 e2       	ldi	r18, 0x20	; 32
    35a4:	fc 01       	movw	r30, r24
    35a6:	20 83       	st	Z, r18
    35a8:	11 82       	std	Z+1, r1	; 0x01
    35aa:	8e ee       	ldi	r24, 0xEE	; 238
    35ac:	90 e1       	ldi	r25, 0x10	; 16
    35ae:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    35b2:	8e ed       	ldi	r24, 0xDE	; 222
    35b4:	92 e0       	ldi	r25, 0x02	; 2
    35b6:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	82 95       	swap	r24
    35be:	86 95       	lsr	r24
    35c0:	87 70       	andi	r24, 0x07	; 7
    35c2:	80 5d       	subi	r24, 0xD0	; 208
    35c4:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    35c8:	86 ed       	ldi	r24, 0xD6	; 214
    35ca:	92 e0       	ldi	r25, 0x02	; 2
    35cc:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	6e ee       	ldi	r22, 0xEE	; 238
    35d4:	70 e1       	ldi	r23, 0x10	; 16
    35d6:	8f 71       	andi	r24, 0x1F	; 31
    35d8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    35dc:	bc 01       	movw	r22, r24
    35de:	6f 5f       	subi	r22, 0xFF	; 255
    35e0:	7f 4f       	sbci	r23, 0xFF	; 255
    35e2:	fc 01       	movw	r30, r24
    35e4:	90 82       	st	Z, r9
    35e6:	8a 81       	ldd	r24, Y+2	; 0x02
    35e8:	99 81       	ldd	r25, Y+1	; 0x01
    35ea:	28 81       	ld	r18, Y
    35ec:	8f 71       	andi	r24, 0x1F	; 31
    35ee:	89 0f       	add	r24, r25
    35f0:	82 1b       	sub	r24, r18
    35f2:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    35f6:	8e ee       	ldi	r24, 0xEE	; 238
    35f8:	90 e1       	ldi	r25, 0x10	; 16
    35fa:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    35fe:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    3602:	f3 94       	inc	r15
    3604:	f3 e0       	ldi	r31, 0x03	; 3
    3606:	ff 15       	cp	r31, r15
    3608:	08 f0       	brcs	.+2      	; 0x360c <menuOnEnterUSBsendHW+0x1fa>
    360a:	58 cf       	rjmp	.-336    	; 0x34bc <menuOnEnterUSBsendHW+0xaa>
    360c:	84 eb       	ldi	r24, 0xB4	; 180
    360e:	92 e0       	ldi	r25, 0x02	; 2
    3610:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    3614:	ee 2d       	mov	r30, r14
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	ee 0f       	add	r30, r30
    361a:	ff 1f       	adc	r31, r31
    361c:	ea 5d       	subi	r30, 0xDA	; 218
    361e:	f6 4f       	sbci	r31, 0xF6	; 246
    3620:	6e ee       	ldi	r22, 0xEE	; 238
    3622:	70 e1       	ldi	r23, 0x10	; 16
    3624:	81 81       	ldd	r24, Z+1	; 0x01
    3626:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <putChar_MidiChan>
    362a:	8e ee       	ldi	r24, 0xEE	; 238
    362c:	90 e1       	ldi	r25, 0x10	; 16
    362e:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    3632:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    3636:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    363a:	e3 94       	inc	r14
    363c:	83 e0       	ldi	r24, 0x03	; 3
    363e:	8e 15       	cp	r24, r14
    3640:	08 f0       	brcs	.+2      	; 0x3644 <menuOnEnterUSBsendHW+0x232>
    3642:	2b cf       	rjmp	.-426    	; 0x349a <menuOnEnterUSBsendHW+0x88>
    3644:	8c ee       	ldi	r24, 0xEC	; 236
    3646:	92 e0       	ldi	r25, 0x02	; 2
    3648:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    364c:	f1 2c       	mov	r15, r1
    364e:	94 c0       	rjmp	.+296    	; 0x3778 <menuOnEnterUSBsendHW+0x366>
    3650:	88 ef       	ldi	r24, 0xF8	; 248
    3652:	92 e0       	ldi	r25, 0x02	; 2
    3654:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    3658:	80 e3       	ldi	r24, 0x30	; 48
    365a:	8f 0d       	add	r24, r15
    365c:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    3660:	8a e3       	ldi	r24, 0x3A	; 58
    3662:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    3666:	80 e2       	ldi	r24, 0x20	; 32
    3668:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    366c:	cf 2d       	mov	r28, r15
    366e:	d0 e0       	ldi	r29, 0x00	; 0
    3670:	8e 01       	movw	r16, r28
    3672:	00 0f       	add	r16, r16
    3674:	11 1f       	adc	r17, r17
    3676:	0c 0f       	add	r16, r28
    3678:	1d 1f       	adc	r17, r29
    367a:	0a 50       	subi	r16, 0x0A	; 10
    367c:	18 4f       	sbci	r17, 0xF8	; 248
    367e:	6e ee       	ldi	r22, 0xEE	; 238
    3680:	70 e1       	ldi	r23, 0x10	; 16
    3682:	f8 01       	movw	r30, r16
    3684:	80 81       	ld	r24, Z
    3686:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    368a:	bc 01       	movw	r22, r24
    368c:	6f 5f       	subi	r22, 0xFF	; 255
    368e:	7f 4f       	sbci	r23, 0xFF	; 255
    3690:	0f 2e       	mov	r0, r31
    3692:	fe e2       	ldi	r31, 0x2E	; 46
    3694:	ef 2e       	mov	r14, r31
    3696:	f0 2d       	mov	r31, r0
    3698:	fc 01       	movw	r30, r24
    369a:	e0 82       	st	Z, r14
    369c:	f8 01       	movw	r30, r16
    369e:	81 81       	ldd	r24, Z+1	; 0x01
    36a0:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    36a4:	bc 01       	movw	r22, r24
    36a6:	6f 5f       	subi	r22, 0xFF	; 255
    36a8:	7f 4f       	sbci	r23, 0xFF	; 255
    36aa:	fc 01       	movw	r30, r24
    36ac:	e0 82       	st	Z, r14
    36ae:	f8 01       	movw	r30, r16
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	0e 94 b6 35 	call	0x6b6c	; 0x6b6c <putChar_hex>
    36b6:	fc 01       	movw	r30, r24
    36b8:	80 e2       	ldi	r24, 0x20	; 32
    36ba:	80 83       	st	Z, r24
    36bc:	9d e3       	ldi	r25, 0x3D	; 61
    36be:	91 83       	std	Z+1, r25	; 0x01
    36c0:	82 83       	std	Z+2, r24	; 0x02
    36c2:	13 82       	std	Z+3, r1	; 0x03
    36c4:	8e ee       	ldi	r24, 0xEE	; 238
    36c6:	90 e1       	ldi	r25, 0x10	; 16
    36c8:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    36cc:	f8 01       	movw	r30, r16
    36ce:	80 81       	ld	r24, Z
    36d0:	8f 3f       	cpi	r24, 0xFF	; 255
    36d2:	29 f4       	brne	.+10     	; 0x36de <menuOnEnterUSBsendHW+0x2cc>
    36d4:	86 ee       	ldi	r24, 0xE6	; 230
    36d6:	92 e0       	ldi	r25, 0x02	; 2
    36d8:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    36dc:	4a c0       	rjmp	.+148    	; 0x3772 <menuOnEnterUSBsendHW+0x360>
    36de:	ee ee       	ldi	r30, 0xEE	; 238
    36e0:	f0 e1       	ldi	r31, 0x10	; 16
    36e2:	92 e5       	ldi	r25, 0x52	; 82
    36e4:	90 83       	st	Z, r25
    36e6:	9e e2       	ldi	r25, 0x2E	; 46
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	60 ef       	ldi	r22, 0xF0	; 240
    36ec:	70 e1       	ldi	r23, 0x10	; 16
    36ee:	8f 5f       	subi	r24, 0xFF	; 255
    36f0:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <putChar_Dec>
    36f4:	bc 01       	movw	r22, r24
    36f6:	6f 5f       	subi	r22, 0xFF	; 255
    36f8:	7f 4f       	sbci	r23, 0xFF	; 255
    36fa:	1d e2       	ldi	r17, 0x2D	; 45
    36fc:	fc 01       	movw	r30, r24
    36fe:	10 83       	st	Z, r17
    3700:	ce 01       	movw	r24, r28
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	c8 0f       	add	r28, r24
    3708:	d9 1f       	adc	r29, r25
    370a:	ca 50       	subi	r28, 0x0A	; 10
    370c:	d8 4f       	sbci	r29, 0xF8	; 248
    370e:	89 81       	ldd	r24, Y+1	; 0x01
    3710:	8f 5f       	subi	r24, 0xFF	; 255
    3712:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <putChar_Dec>
    3716:	20 e2       	ldi	r18, 0x20	; 32
    3718:	fc 01       	movw	r30, r24
    371a:	20 83       	st	Z, r18
    371c:	11 82       	std	Z+1, r1	; 0x01
    371e:	8e ee       	ldi	r24, 0xEE	; 238
    3720:	90 e1       	ldi	r25, 0x10	; 16
    3722:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    3726:	8e ed       	ldi	r24, 0xDE	; 222
    3728:	92 e0       	ldi	r25, 0x02	; 2
    372a:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	82 95       	swap	r24
    3732:	86 95       	lsr	r24
    3734:	87 70       	andi	r24, 0x07	; 7
    3736:	80 5d       	subi	r24, 0xD0	; 208
    3738:	0e 94 15 33 	call	0x662a	; 0x662a <serial0SER_USBSend>
    373c:	86 ed       	ldi	r24, 0xD6	; 214
    373e:	92 e0       	ldi	r25, 0x02	; 2
    3740:	0e 94 32 33 	call	0x6664	; 0x6664 <serial0SER_USB_sendStringP>
    3744:	8a 81       	ldd	r24, Y+2	; 0x02
    3746:	6e ee       	ldi	r22, 0xEE	; 238
    3748:	70 e1       	ldi	r23, 0x10	; 16
    374a:	8f 71       	andi	r24, 0x1F	; 31
    374c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    3750:	bc 01       	movw	r22, r24
    3752:	6f 5f       	subi	r22, 0xFF	; 255
    3754:	7f 4f       	sbci	r23, 0xFF	; 255
    3756:	fc 01       	movw	r30, r24
    3758:	10 83       	st	Z, r17
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	99 81       	ldd	r25, Y+1	; 0x01
    375e:	28 81       	ld	r18, Y
    3760:	8f 71       	andi	r24, 0x1F	; 31
    3762:	89 0f       	add	r24, r25
    3764:	82 1b       	sub	r24, r18
    3766:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <putChar_Dec2>
    376a:	8e ee       	ldi	r24, 0xEE	; 238
    376c:	90 e1       	ldi	r25, 0x10	; 16
    376e:	0e 94 7a 33 	call	0x66f4	; 0x66f4 <serial0SER_USB_sendString>
    3772:	0e 94 44 33 	call	0x6688	; 0x6688 <serial0SER_USB_sendCRLF>
    3776:	f3 94       	inc	r15
    3778:	f7 e0       	ldi	r31, 0x07	; 7
    377a:	ff 15       	cp	r31, r15
    377c:	08 f0       	brcs	.+2      	; 0x3780 <menuOnEnterUSBsendHW+0x36e>
    377e:	68 cf       	rjmp	.-304    	; 0x3650 <menuOnEnterUSBsendHW+0x23e>
    3780:	80 e0       	ldi	r24, 0x00	; 0
    3782:	df 91       	pop	r29
    3784:	cf 91       	pop	r28
    3786:	1f 91       	pop	r17
    3788:	0f 91       	pop	r16
    378a:	ff 90       	pop	r15
    378c:	ef 90       	pop	r14
    378e:	df 90       	pop	r13
    3790:	cf 90       	pop	r12
    3792:	bf 90       	pop	r11
    3794:	af 90       	pop	r10
    3796:	9f 90       	pop	r9
    3798:	08 95       	ret

0000379a <reverseRegisterBits>:
    379a:	1f 93       	push	r17
    379c:	cf 93       	push	r28
    379e:	df 93       	push	r29
    37a0:	10 e0       	ldi	r17, 0x00	; 0
    37a2:	09 c0       	rjmp	.+18     	; 0x37b6 <reverseRegisterBits+0x1c>
    37a4:	c1 2f       	mov	r28, r17
    37a6:	d0 e0       	ldi	r29, 0x00	; 0
    37a8:	c3 59       	subi	r28, 0x93	; 147
    37aa:	da 4f       	sbci	r29, 0xFA	; 250
    37ac:	88 81       	ld	r24, Y
    37ae:	0e 94 05 38 	call	0x700a	; 0x700a <reverse_Bits>
    37b2:	88 83       	st	Y, r24
    37b4:	1f 5f       	subi	r17, 0xFF	; 255
    37b6:	18 30       	cpi	r17, 0x08	; 8
    37b8:	a8 f3       	brcs	.-22     	; 0x37a4 <reverseRegisterBits+0xa>
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	1f 91       	pop	r17
    37c0:	08 95       	ret

000037c2 <menuOnUpdateRegister>:
    37c2:	8d e6       	ldi	r24, 0x6D	; 109
    37c4:	95 e0       	ldi	r25, 0x05	; 5
    37c6:	0e 94 30 2c 	call	0x5860	; 0x5860 <read_allRegister>
    37ca:	e7 df       	rcall	.-50     	; 0x379a <reverseRegisterBits>
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	08 95       	ret

000037d0 <menuOnEnterResetReg>:
    37d0:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <midi_resetRegisters>
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	f5 df       	rcall	.-22     	; 0x37c2 <menuOnUpdateRegister>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	08 95       	ret

000037dc <menuOnExitLoadProgran>:
    37dc:	86 30       	cpi	r24, 0x06	; 6
    37de:	31 f0       	breq	.+12     	; 0x37ec <menuOnExitLoadProgran+0x10>
    37e0:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    37e4:	80 34       	cpi	r24, 0x40	; 64
    37e6:	10 f4       	brcc	.+4      	; 0x37ec <menuOnExitLoadProgran+0x10>
    37e8:	0e 94 9a 2c 	call	0x5934	; 0x5934 <program_toRegister>
    37ec:	80 e0       	ldi	r24, 0x00	; 0
    37ee:	e9 df       	rcall	.-46     	; 0x37c2 <menuOnUpdateRegister>
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	08 95       	ret

000037f4 <softkeyCoupler>:
    37f4:	cf 93       	push	r28
    37f6:	c6 2f       	mov	r28, r22
    37f8:	88 23       	and	r24, r24
    37fa:	d9 f0       	breq	.+54     	; 0x3832 <softkeyCoupler+0x3e>
    37fc:	e6 2f       	mov	r30, r22
    37fe:	f0 e0       	ldi	r31, 0x00	; 0
    3800:	df 01       	movw	r26, r30
    3802:	a1 5f       	subi	r26, 0xF1	; 241
    3804:	b7 4f       	sbci	r27, 0xF7	; 247
    3806:	8c 91       	ld	r24, X
    3808:	81 11       	cpse	r24, r1
    380a:	08 c0       	rjmp	.+16     	; 0x381c <softkeyCoupler+0x28>
    380c:	86 2f       	mov	r24, r22
    380e:	0e 94 9d 2a 	call	0x553a	; 0x553a <set_Coupler>
    3812:	88 23       	and	r24, r24
    3814:	71 f0       	breq	.+28     	; 0x3832 <softkeyCoupler+0x3e>
    3816:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <midi_ManualOff>
    381a:	0b c0       	rjmp	.+22     	; 0x3832 <softkeyCoupler+0x3e>
    381c:	df 01       	movw	r26, r30
    381e:	a1 5f       	subi	r26, 0xF1	; 241
    3820:	b7 4f       	sbci	r27, 0xF7	; 247
    3822:	1c 92       	st	X, r1
    3824:	ee 0f       	add	r30, r30
    3826:	ff 1f       	adc	r31, r31
    3828:	eb 57       	subi	r30, 0x7B	; 123
    382a:	fe 4e       	sbci	r31, 0xEE	; 238
    382c:	84 91       	lpm	r24, Z
    382e:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <midi_ManualOff>
    3832:	ec 2f       	mov	r30, r28
    3834:	f0 e0       	ldi	r31, 0x00	; 0
    3836:	e1 5f       	subi	r30, 0xF1	; 241
    3838:	f7 4f       	sbci	r31, 0xF7	; 247
    383a:	80 81       	ld	r24, Z
    383c:	81 11       	cpse	r24, r1
    383e:	02 c0       	rjmp	.+4      	; 0x3844 <softkeyCoupler+0x50>
    3840:	82 e8       	ldi	r24, 0x82	; 130
    3842:	01 c0       	rjmp	.+2      	; 0x3846 <softkeyCoupler+0x52>
    3844:	81 e8       	ldi	r24, 0x81	; 129
    3846:	cf 91       	pop	r28
    3848:	08 95       	ret

0000384a <softKeyCoupler2from3>:
    384a:	60 e0       	ldi	r22, 0x00	; 0
    384c:	d3 cf       	rjmp	.-90     	; 0x37f4 <softkeyCoupler>
    384e:	08 95       	ret

00003850 <softKeyCoupler1from3>:
    3850:	61 e0       	ldi	r22, 0x01	; 1
    3852:	d0 cf       	rjmp	.-96     	; 0x37f4 <softkeyCoupler>
    3854:	08 95       	ret

00003856 <softKeyCouplerPfrom3>:
    3856:	63 e0       	ldi	r22, 0x03	; 3
    3858:	cd cf       	rjmp	.-102    	; 0x37f4 <softkeyCoupler>
    385a:	08 95       	ret

0000385c <softKeyCoupler1from2>:
    385c:	62 e0       	ldi	r22, 0x02	; 2
    385e:	ca cf       	rjmp	.-108    	; 0x37f4 <softkeyCoupler>
    3860:	08 95       	ret

00003862 <softKeyCouplerPfrom2>:
    3862:	64 e0       	ldi	r22, 0x04	; 4
    3864:	c7 cf       	rjmp	.-114    	; 0x37f4 <softkeyCoupler>
    3866:	08 95       	ret

00003868 <softKeyCouplerPfrom1>:
    3868:	65 e0       	ldi	r22, 0x05	; 5
    386a:	c4 cf       	rjmp	.-120    	; 0x37f4 <softkeyCoupler>
    386c:	08 95       	ret

0000386e <softKeyCoupler3from2>:
    386e:	66 e0       	ldi	r22, 0x06	; 6
    3870:	c1 cf       	rjmp	.-126    	; 0x37f4 <softkeyCoupler>
    3872:	08 95       	ret

00003874 <softKeyCoupler3from1>:
    3874:	67 e0       	ldi	r22, 0x07	; 7
    3876:	be cf       	rjmp	.-132    	; 0x37f4 <softkeyCoupler>
    3878:	08 95       	ret

0000387a <softKeyCoupler3fromP>:
    387a:	69 e0       	ldi	r22, 0x09	; 9
    387c:	bb cf       	rjmp	.-138    	; 0x37f4 <softkeyCoupler>
    387e:	08 95       	ret

00003880 <softKeyCoupler2from1>:
    3880:	68 e0       	ldi	r22, 0x08	; 8
    3882:	b8 cf       	rjmp	.-144    	; 0x37f4 <softkeyCoupler>
    3884:	08 95       	ret

00003886 <softKeyCoupler2fromP>:
    3886:	6a e0       	ldi	r22, 0x0A	; 10
    3888:	b5 cf       	rjmp	.-150    	; 0x37f4 <softkeyCoupler>
    388a:	08 95       	ret

0000388c <softKeyCoupler1fromP>:
    388c:	6b e0       	ldi	r22, 0x0B	; 11
    388e:	b2 cf       	rjmp	.-156    	; 0x37f4 <softkeyCoupler>
    3890:	08 95       	ret

00003892 <menu_Init>:
    3892:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    3896:	00 97       	sbiw	r24, 0x00	; 0
    3898:	69 f4       	brne	.+26     	; 0x38b4 <menu_Init+0x22>
    389a:	83 ef       	ldi	r24, 0xF3	; 243
    389c:	96 e0       	ldi	r25, 0x06	; 6
    389e:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    38a2:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    38a6:	8e ec       	ldi	r24, 0xCE	; 206
    38a8:	93 e0       	ldi	r25, 0x03	; 3
    38aa:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    38ae:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    38b2:	08 c0       	rjmp	.+16     	; 0x38c4 <menu_Init+0x32>
    38b4:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    38b8:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    38bc:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    38c0:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    38c4:	8f ef       	ldi	r24, 0xFF	; 255
    38c6:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    38ca:	88 ed       	ldi	r24, 0xD8	; 216
    38cc:	93 e0       	ldi	r25, 0x03	; 3
    38ce:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    38d2:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    38d6:	08 95       	ret

000038d8 <softkeyLeft>:
    38d8:	6f eb       	ldi	r22, 0xBF	; 191
    38da:	71 e1       	ldi	r23, 0x11	; 17
    38dc:	82 e0       	ldi	r24, 0x02	; 2
    38de:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    38e2:	08 95       	ret

000038e4 <softkeyRight>:
    38e4:	61 ec       	ldi	r22, 0xC1	; 193
    38e6:	71 e1       	ldi	r23, 0x11	; 17
    38e8:	83 e0       	ldi	r24, 0x03	; 3
    38ea:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    38ee:	08 95       	ret

000038f0 <softkeyDown>:
    38f0:	63 ec       	ldi	r22, 0xC3	; 195
    38f2:	71 e1       	ldi	r23, 0x11	; 17
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    38fa:	08 95       	ret

000038fc <softkeyOn>:
    38fc:	61 eb       	ldi	r22, 0xB1	; 177
    38fe:	71 e1       	ldi	r23, 0x11	; 17
    3900:	81 e0       	ldi	r24, 0x01	; 1
    3902:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    3906:	08 95       	ret

00003908 <softkeyOff>:
    3908:	6c ea       	ldi	r22, 0xAC	; 172
    390a:	71 e1       	ldi	r23, 0x11	; 17
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    3912:	08 95       	ret

00003914 <softkeyUp>:
    3914:	65 ec       	ldi	r22, 0xC5	; 197
    3916:	71 e1       	ldi	r23, 0x11	; 17
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    391e:	08 95       	ret

00003920 <softkeyPlus>:
    3920:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3924:	8a 30       	cpi	r24, 0x0A	; 10
    3926:	11 f0       	breq	.+4      	; 0x392c <softkeyPlus+0xc>
    3928:	8e 30       	cpi	r24, 0x0E	; 14
    392a:	31 f4       	brne	.+12     	; 0x3938 <softkeyPlus+0x18>
    392c:	6d e9       	ldi	r22, 0x9D	; 157
    392e:	71 e1       	ldi	r23, 0x11	; 17
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    3936:	08 95       	ret
    3938:	6d eb       	ldi	r22, 0xBD	; 189
    393a:	71 e1       	ldi	r23, 0x11	; 17
    393c:	80 e0       	ldi	r24, 0x00	; 0
    393e:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    3942:	08 95       	ret

00003944 <softkeyMinus>:
    3944:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3948:	8a 30       	cpi	r24, 0x0A	; 10
    394a:	11 f0       	breq	.+4      	; 0x3950 <softkeyMinus+0xc>
    394c:	8e 30       	cpi	r24, 0x0E	; 14
    394e:	31 f4       	brne	.+12     	; 0x395c <softkeyMinus+0x18>
    3950:	6f e9       	ldi	r22, 0x9F	; 159
    3952:	71 e1       	ldi	r23, 0x11	; 17
    3954:	81 e0       	ldi	r24, 0x01	; 1
    3956:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    395a:	08 95       	ret
    395c:	6b eb       	ldi	r22, 0xBB	; 187
    395e:	71 e1       	ldi	r23, 0x11	; 17
    3960:	81 e0       	ldi	r24, 0x01	; 1
    3962:	0c 94 60 37 	jmp	0x6ec0	; 0x6ec0 <keylabel_set>
    3966:	08 95       	ret

00003968 <dataToNibbles>:
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3970:	8e 2f       	mov	r24, r30
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	fc 01       	movw	r30, r24
    3976:	32 97       	sbiw	r30, 0x02	; 2
    3978:	ed 30       	cpi	r30, 0x0D	; 13
    397a:	f1 05       	cpc	r31, r1
    397c:	08 f0       	brcs	.+2      	; 0x3980 <dataToNibbles+0x18>
    397e:	e4 c0       	rjmp	.+456    	; 0x3b48 <dataToNibbles+0x1e0>
    3980:	88 27       	eor	r24, r24
    3982:	ee 58       	subi	r30, 0x8E	; 142
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	8f 4f       	sbci	r24, 0xFF	; 255
    3988:	0c 94 12 38 	jmp	0x7024	; 0x7024 <__tablejump2__>
    398c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3990:	e4 ec       	ldi	r30, 0xC4	; 196
    3992:	f5 e0       	ldi	r31, 0x05	; 5
    3994:	98 2f       	mov	r25, r24
    3996:	92 95       	swap	r25
    3998:	9f 70       	andi	r25, 0x0F	; 15
    399a:	90 83       	st	Z, r25
    399c:	8f 70       	andi	r24, 0x0F	; 15
    399e:	81 83       	std	Z+1, r24	; 0x01
    39a0:	d3 c0       	rjmp	.+422    	; 0x3b48 <dataToNibbles+0x1e0>
    39a2:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    39a6:	80 31       	cpi	r24, 0x10	; 16
    39a8:	20 f0       	brcs	.+8      	; 0x39b2 <dataToNibbles+0x4a>
    39aa:	8f ef       	ldi	r24, 0xFF	; 255
    39ac:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    39b0:	cb c0       	rjmp	.+406    	; 0x3b48 <dataToNibbles+0x1e0>
    39b2:	8f 5f       	subi	r24, 0xFF	; 255
    39b4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    39b8:	c7 c0       	rjmp	.+398    	; 0x3b48 <dataToNibbles+0x1e0>
    39ba:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    39be:	88 23       	and	r24, r24
    39c0:	34 f4       	brge	.+12     	; 0x39ce <dataToNibbles+0x66>
    39c2:	e4 ec       	ldi	r30, 0xC4	; 196
    39c4:	f5 e0       	ldi	r31, 0x05	; 5
    39c6:	10 82       	st	Z, r1
    39c8:	8f ef       	ldi	r24, 0xFF	; 255
    39ca:	81 83       	std	Z+1, r24	; 0x01
    39cc:	bd c0       	rjmp	.+378    	; 0x3b48 <dataToNibbles+0x1e0>
    39ce:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    39d2:	08 c0       	rjmp	.+16     	; 0x39e4 <dataToNibbles+0x7c>
    39d4:	e4 ec       	ldi	r30, 0xC4	; 196
    39d6:	f5 e0       	ldi	r31, 0x05	; 5
    39d8:	91 81       	ldd	r25, Z+1	; 0x01
    39da:	9f 5f       	subi	r25, 0xFF	; 255
    39dc:	91 83       	std	Z+1, r25	; 0x01
    39de:	8c 50       	subi	r24, 0x0C	; 12
    39e0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    39e4:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    39e8:	8c 30       	cpi	r24, 0x0C	; 12
    39ea:	a0 f7       	brcc	.-24     	; 0x39d4 <dataToNibbles+0x6c>
    39ec:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    39f0:	ab c0       	rjmp	.+342    	; 0x3b48 <dataToNibbles+0x1e0>
    39f2:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    39f6:	e4 ec       	ldi	r30, 0xC4	; 196
    39f8:	f5 e0       	ldi	r31, 0x05	; 5
    39fa:	98 2f       	mov	r25, r24
    39fc:	92 95       	swap	r25
    39fe:	96 95       	lsr	r25
    3a00:	97 70       	andi	r25, 0x07	; 7
    3a02:	90 83       	st	Z, r25
    3a04:	8f 71       	andi	r24, 0x1F	; 31
    3a06:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a0a:	11 82       	std	Z+1, r1	; 0x01
    3a0c:	08 c0       	rjmp	.+16     	; 0x3a1e <dataToNibbles+0xb6>
    3a0e:	e4 ec       	ldi	r30, 0xC4	; 196
    3a10:	f5 e0       	ldi	r31, 0x05	; 5
    3a12:	91 81       	ldd	r25, Z+1	; 0x01
    3a14:	9f 5f       	subi	r25, 0xFF	; 255
    3a16:	91 83       	std	Z+1, r25	; 0x01
    3a18:	8a 50       	subi	r24, 0x0A	; 10
    3a1a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a1e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a22:	8a 30       	cpi	r24, 0x0A	; 10
    3a24:	a0 f7       	brcc	.-24     	; 0x3a0e <dataToNibbles+0xa6>
    3a26:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3a2a:	8e c0       	rjmp	.+284    	; 0x3b48 <dataToNibbles+0x1e0>
    3a2c:	e4 ec       	ldi	r30, 0xC4	; 196
    3a2e:	f5 e0       	ldi	r31, 0x05	; 5
    3a30:	10 82       	st	Z, r1
    3a32:	11 82       	std	Z+1, r1	; 0x01
    3a34:	08 c0       	rjmp	.+16     	; 0x3a46 <dataToNibbles+0xde>
    3a36:	e4 ec       	ldi	r30, 0xC4	; 196
    3a38:	f5 e0       	ldi	r31, 0x05	; 5
    3a3a:	90 81       	ld	r25, Z
    3a3c:	9f 5f       	subi	r25, 0xFF	; 255
    3a3e:	90 83       	st	Z, r25
    3a40:	84 56       	subi	r24, 0x64	; 100
    3a42:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a46:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a4a:	84 36       	cpi	r24, 0x64	; 100
    3a4c:	a0 f7       	brcc	.-24     	; 0x3a36 <dataToNibbles+0xce>
    3a4e:	08 c0       	rjmp	.+16     	; 0x3a60 <dataToNibbles+0xf8>
    3a50:	e4 ec       	ldi	r30, 0xC4	; 196
    3a52:	f5 e0       	ldi	r31, 0x05	; 5
    3a54:	91 81       	ldd	r25, Z+1	; 0x01
    3a56:	9f 5f       	subi	r25, 0xFF	; 255
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	8a 50       	subi	r24, 0x0A	; 10
    3a5c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3a60:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a64:	8a 30       	cpi	r24, 0x0A	; 10
    3a66:	a0 f7       	brcc	.-24     	; 0x3a50 <dataToNibbles+0xe8>
    3a68:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3a6c:	6d c0       	rjmp	.+218    	; 0x3b48 <dataToNibbles+0x1e0>
    3a6e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a72:	84 30       	cpi	r24, 0x04	; 4
    3a74:	20 f0       	brcs	.+8      	; 0x3a7e <dataToNibbles+0x116>
    3a76:	8f ef       	ldi	r24, 0xFF	; 255
    3a78:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a7c:	65 c0       	rjmp	.+202    	; 0x3b48 <dataToNibbles+0x1e0>
    3a7e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a82:	62 c0       	rjmp	.+196    	; 0x3b48 <dataToNibbles+0x1e0>
    3a84:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a88:	84 30       	cpi	r24, 0x04	; 4
    3a8a:	20 f0       	brcs	.+8      	; 0x3a94 <dataToNibbles+0x12c>
    3a8c:	83 e0       	ldi	r24, 0x03	; 3
    3a8e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a92:	5a c0       	rjmp	.+180    	; 0x3b48 <dataToNibbles+0x1e0>
    3a94:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3a98:	57 c0       	rjmp	.+174    	; 0x3b48 <dataToNibbles+0x1e0>
    3a9a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a9e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3aa2:	52 c0       	rjmp	.+164    	; 0x3b48 <dataToNibbles+0x1e0>
    3aa4:	e9 2f       	mov	r30, r25
    3aa6:	f0 e0       	ldi	r31, 0x00	; 0
    3aa8:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3aac:	28 2f       	mov	r18, r24
    3aae:	22 1f       	adc	r18, r18
    3ab0:	22 27       	eor	r18, r18
    3ab2:	22 1f       	adc	r18, r18
    3ab4:	ec 53       	subi	r30, 0x3C	; 60
    3ab6:	fa 4f       	sbci	r31, 0xFA	; 250
    3ab8:	20 83       	st	Z, r18
    3aba:	88 0f       	add	r24, r24
    3abc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3ac0:	9f 5f       	subi	r25, 0xFF	; 255
    3ac2:	01 c0       	rjmp	.+2      	; 0x3ac6 <dataToNibbles+0x15e>
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	98 30       	cpi	r25, 0x08	; 8
    3ac8:	68 f3       	brcs	.-38     	; 0x3aa4 <dataToNibbles+0x13c>
    3aca:	3e c0       	rjmp	.+124    	; 0x3b48 <dataToNibbles+0x1e0>
    3acc:	82 50       	subi	r24, 0x02	; 2
    3ace:	f0 e0       	ldi	r31, 0x00	; 0
    3ad0:	de 01       	movw	r26, r28
    3ad2:	9d 91       	ld	r25, X+
    3ad4:	ec 53       	subi	r30, 0x3C	; 60
    3ad6:	fa 4f       	sbci	r31, 0xFA	; 250
    3ad8:	9f 70       	andi	r25, 0x0F	; 15
    3ada:	90 83       	st	Z, r25
    3adc:	e8 2f       	mov	r30, r24
    3ade:	f0 e0       	ldi	r31, 0x00	; 0
    3ae0:	98 81       	ld	r25, Y
    3ae2:	ec 53       	subi	r30, 0x3C	; 60
    3ae4:	fa 4f       	sbci	r31, 0xFA	; 250
    3ae6:	92 95       	swap	r25
    3ae8:	9f 70       	andi	r25, 0x0F	; 15
    3aea:	90 83       	st	Z, r25
    3aec:	ed 01       	movw	r28, r26
    3aee:	03 c0       	rjmp	.+6      	; 0x3af6 <dataToNibbles+0x18e>
    3af0:	c2 ea       	ldi	r28, 0xA2	; 162
    3af2:	d5 e0       	ldi	r29, 0x05	; 5
    3af4:	88 e0       	ldi	r24, 0x08	; 8
    3af6:	ef ef       	ldi	r30, 0xFF	; 255
    3af8:	e8 0f       	add	r30, r24
    3afa:	81 11       	cpse	r24, r1
    3afc:	e7 cf       	rjmp	.-50     	; 0x3acc <dataToNibbles+0x164>
    3afe:	24 c0       	rjmp	.+72     	; 0x3b48 <dataToNibbles+0x1e0>
    3b00:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b04:	e4 ec       	ldi	r30, 0xC4	; 196
    3b06:	f5 e0       	ldi	r31, 0x05	; 5
    3b08:	98 2f       	mov	r25, r24
    3b0a:	97 70       	andi	r25, 0x07	; 7
    3b0c:	9f 5f       	subi	r25, 0xFF	; 255
    3b0e:	90 83       	st	Z, r25
    3b10:	86 95       	lsr	r24
    3b12:	86 95       	lsr	r24
    3b14:	86 95       	lsr	r24
    3b16:	8f 5f       	subi	r24, 0xFF	; 255
    3b18:	81 83       	std	Z+1, r24	; 0x01
    3b1a:	16 c0       	rjmp	.+44     	; 0x3b48 <dataToNibbles+0x1e0>
    3b1c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b26:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    3b2a:	08 c0       	rjmp	.+16     	; 0x3b3c <dataToNibbles+0x1d4>
    3b2c:	e4 ec       	ldi	r30, 0xC4	; 196
    3b2e:	f5 e0       	ldi	r31, 0x05	; 5
    3b30:	90 81       	ld	r25, Z
    3b32:	9f 5f       	subi	r25, 0xFF	; 255
    3b34:	90 83       	st	Z, r25
    3b36:	8a 50       	subi	r24, 0x0A	; 10
    3b38:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b3c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b40:	8a 30       	cpi	r24, 0x0A	; 10
    3b42:	a0 f7       	brcc	.-24     	; 0x3b2c <dataToNibbles+0x1c4>
    3b44:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	08 95       	ret

00003b4e <nibbleToLCDstring>:
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3b5a:	8e 2f       	mov	r24, r30
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	fc 01       	movw	r30, r24
    3b60:	32 97       	sbiw	r30, 0x02	; 2
    3b62:	ed 30       	cpi	r30, 0x0D	; 13
    3b64:	f1 05       	cpc	r31, r1
    3b66:	08 f0       	brcs	.+2      	; 0x3b6a <nibbleToLCDstring+0x1c>
    3b68:	3b c1       	rjmp	.+630    	; 0x3de0 <nibbleToLCDstring+0x292>
    3b6a:	88 27       	eor	r24, r24
    3b6c:	e1 58       	subi	r30, 0x81	; 129
    3b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b70:	8f 4f       	sbci	r24, 0xFF	; 255
    3b72:	0c 94 12 38 	jmp	0x7024	; 0x7024 <__tablejump2__>
    3b76:	04 ec       	ldi	r16, 0xC4	; 196
    3b78:	15 e0       	ldi	r17, 0x05	; 5
    3b7a:	f8 01       	movw	r30, r16
    3b7c:	80 81       	ld	r24, Z
    3b7e:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3b82:	c5 e2       	ldi	r28, 0x25	; 37
    3b84:	d2 e0       	ldi	r29, 0x02	; 2
    3b86:	88 83       	st	Y, r24
    3b88:	f8 01       	movw	r30, r16
    3b8a:	81 81       	ldd	r24, Z+1	; 0x01
    3b8c:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3b90:	89 83       	std	Y+1, r24	; 0x01
    3b92:	1a 82       	std	Y+2, r1	; 0x02
    3b94:	25 c1       	rjmp	.+586    	; 0x3de0 <nibbleToLCDstring+0x292>
    3b96:	e5 e2       	ldi	r30, 0x25	; 37
    3b98:	f2 e0       	ldi	r31, 0x02	; 2
    3b9a:	83 e4       	ldi	r24, 0x43	; 67
    3b9c:	80 83       	st	Z, r24
    3b9e:	88 e6       	ldi	r24, 0x68	; 104
    3ba0:	81 83       	std	Z+1, r24	; 0x01
    3ba2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ba6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba8:	29 f4       	brne	.+10     	; 0x3bb4 <nibbleToLCDstring+0x66>
    3baa:	80 e2       	ldi	r24, 0x20	; 32
    3bac:	82 83       	std	Z+2, r24	; 0x02
    3bae:	8d e2       	ldi	r24, 0x2D	; 45
    3bb0:	83 83       	std	Z+3, r24	; 0x03
    3bb2:	12 c0       	rjmp	.+36     	; 0x3bd8 <nibbleToLCDstring+0x8a>
    3bb4:	8a 30       	cpi	r24, 0x0A	; 10
    3bb6:	48 f0       	brcs	.+18     	; 0x3bca <nibbleToLCDstring+0x7c>
    3bb8:	c5 e2       	ldi	r28, 0x25	; 37
    3bba:	d2 e0       	ldi	r29, 0x02	; 2
    3bbc:	91 e3       	ldi	r25, 0x31	; 49
    3bbe:	9a 83       	std	Y+2, r25	; 0x02
    3bc0:	8a 50       	subi	r24, 0x0A	; 10
    3bc2:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3bc6:	8b 83       	std	Y+3, r24	; 0x03
    3bc8:	07 c0       	rjmp	.+14     	; 0x3bd8 <nibbleToLCDstring+0x8a>
    3bca:	c5 e2       	ldi	r28, 0x25	; 37
    3bcc:	d2 e0       	ldi	r29, 0x02	; 2
    3bce:	90 e2       	ldi	r25, 0x20	; 32
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3bd6:	8b 83       	std	Y+3, r24	; 0x03
    3bd8:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    3bdc:	01 c1       	rjmp	.+514    	; 0x3de0 <nibbleToLCDstring+0x292>
    3bde:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3be2:	8f 3f       	cpi	r24, 0xFF	; 255
    3be4:	21 f0       	breq	.+8      	; 0x3bee <nibbleToLCDstring+0xa0>
    3be6:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    3bea:	9f 3f       	cpi	r25, 0xFF	; 255
    3bec:	59 f4       	brne	.+22     	; 0x3c04 <nibbleToLCDstring+0xb6>
    3bee:	e5 e2       	ldi	r30, 0x25	; 37
    3bf0:	f2 e0       	ldi	r31, 0x02	; 2
    3bf2:	8e e6       	ldi	r24, 0x6E	; 110
    3bf4:	80 83       	st	Z, r24
    3bf6:	9f e6       	ldi	r25, 0x6F	; 111
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	82 83       	std	Z+2, r24	; 0x02
    3bfc:	85 e6       	ldi	r24, 0x65	; 101
    3bfe:	83 83       	std	Z+3, r24	; 0x03
    3c00:	14 82       	std	Z+4, r1	; 0x04
    3c02:	ee c0       	rjmp	.+476    	; 0x3de0 <nibbleToLCDstring+0x292>
    3c04:	9f e5       	ldi	r25, 0x5F	; 95
    3c06:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    3c0a:	8b 30       	cpi	r24, 0x0B	; 11
    3c0c:	21 f4       	brne	.+8      	; 0x3c16 <nibbleToLCDstring+0xc8>
    3c0e:	88 e4       	ldi	r24, 0x48	; 72
    3c10:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3c14:	20 c0       	rjmp	.+64     	; 0x3c56 <nibbleToLCDstring+0x108>
    3c16:	85 30       	cpi	r24, 0x05	; 5
    3c18:	58 f4       	brcc	.+22     	; 0x3c30 <nibbleToLCDstring+0xe2>
    3c1a:	98 2f       	mov	r25, r24
    3c1c:	96 95       	lsr	r25
    3c1e:	9d 5b       	subi	r25, 0xBD	; 189
    3c20:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    3c24:	80 ff       	sbrs	r24, 0
    3c26:	17 c0       	rjmp	.+46     	; 0x3c56 <nibbleToLCDstring+0x108>
    3c28:	83 e2       	ldi	r24, 0x23	; 35
    3c2a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3c2e:	13 c0       	rjmp	.+38     	; 0x3c56 <nibbleToLCDstring+0x108>
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	25 50       	subi	r18, 0x05	; 5
    3c36:	31 09       	sbc	r19, r1
    3c38:	35 95       	asr	r19
    3c3a:	27 95       	ror	r18
    3c3c:	2a 5b       	subi	r18, 0xBA	; 186
    3c3e:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    3c42:	80 fd       	sbrc	r24, 0
    3c44:	03 c0       	rjmp	.+6      	; 0x3c4c <nibbleToLCDstring+0xfe>
    3c46:	83 e2       	ldi	r24, 0x23	; 35
    3c48:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3c4c:	28 34       	cpi	r18, 0x48	; 72
    3c4e:	19 f4       	brne	.+6      	; 0x3c56 <nibbleToLCDstring+0x108>
    3c50:	81 e4       	ldi	r24, 0x41	; 65
    3c52:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3c56:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3c5a:	81 11       	cpse	r24, r1
    3c5c:	04 c0       	rjmp	.+8      	; 0x3c66 <nibbleToLCDstring+0x118>
    3c5e:	8d e6       	ldi	r24, 0x6D	; 109
    3c60:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3c64:	0b c0       	rjmp	.+22     	; 0x3c7c <nibbleToLCDstring+0x12e>
    3c66:	8c 30       	cpi	r24, 0x0C	; 12
    3c68:	30 f4       	brcc	.+12     	; 0x3c76 <nibbleToLCDstring+0x128>
    3c6a:	81 50       	subi	r24, 0x01	; 1
    3c6c:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3c70:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3c74:	03 c0       	rjmp	.+6      	; 0x3c7c <nibbleToLCDstring+0x12e>
    3c76:	8d e2       	ldi	r24, 0x2D	; 45
    3c78:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3c7c:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3c80:	af c0       	rjmp	.+350    	; 0x3de0 <nibbleToLCDstring+0x292>
    3c82:	c5 e2       	ldi	r28, 0x25	; 37
    3c84:	d2 e0       	ldi	r29, 0x02	; 2
    3c86:	8d e4       	ldi	r24, 0x4D	; 77
    3c88:	88 83       	st	Y, r24
    3c8a:	04 ec       	ldi	r16, 0xC4	; 196
    3c8c:	15 e0       	ldi	r17, 0x05	; 5
    3c8e:	f8 01       	movw	r30, r16
    3c90:	80 81       	ld	r24, Z
    3c92:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3c96:	89 83       	std	Y+1, r24	; 0x01
    3c98:	82 e4       	ldi	r24, 0x42	; 66
    3c9a:	8a 83       	std	Y+2, r24	; 0x02
    3c9c:	f8 01       	movw	r30, r16
    3c9e:	81 81       	ldd	r24, Z+1	; 0x01
    3ca0:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3ca4:	8b 83       	std	Y+3, r24	; 0x03
    3ca6:	f8 01       	movw	r30, r16
    3ca8:	82 81       	ldd	r24, Z+2	; 0x02
    3caa:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3cae:	8c 83       	std	Y+4, r24	; 0x04
    3cb0:	1d 82       	std	Y+5, r1	; 0x05
    3cb2:	96 c0       	rjmp	.+300    	; 0x3de0 <nibbleToLCDstring+0x292>
    3cb4:	04 ec       	ldi	r16, 0xC4	; 196
    3cb6:	15 e0       	ldi	r17, 0x05	; 5
    3cb8:	f8 01       	movw	r30, r16
    3cba:	80 81       	ld	r24, Z
    3cbc:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3cc0:	c5 e2       	ldi	r28, 0x25	; 37
    3cc2:	d2 e0       	ldi	r29, 0x02	; 2
    3cc4:	88 83       	st	Y, r24
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	81 81       	ldd	r24, Z+1	; 0x01
    3cca:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3cce:	89 83       	std	Y+1, r24	; 0x01
    3cd0:	f8 01       	movw	r30, r16
    3cd2:	82 81       	ldd	r24, Z+2	; 0x02
    3cd4:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3cd8:	8a 83       	std	Y+2, r24	; 0x02
    3cda:	1b 82       	std	Y+3, r1	; 0x03
    3cdc:	81 c0       	rjmp	.+258    	; 0x3de0 <nibbleToLCDstring+0x292>
    3cde:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ce2:	83 30       	cpi	r24, 0x03	; 3
    3ce4:	38 f4       	brcc	.+14     	; 0x3cf4 <nibbleToLCDstring+0x1a6>
    3ce6:	e5 e2       	ldi	r30, 0x25	; 37
    3ce8:	f2 e0       	ldi	r31, 0x02	; 2
    3cea:	93 e3       	ldi	r25, 0x33	; 51
    3cec:	98 1b       	sub	r25, r24
    3cee:	90 83       	st	Z, r25
    3cf0:	11 82       	std	Z+1, r1	; 0x01
    3cf2:	76 c0       	rjmp	.+236    	; 0x3de0 <nibbleToLCDstring+0x292>
    3cf4:	83 30       	cpi	r24, 0x03	; 3
    3cf6:	31 f4       	brne	.+12     	; 0x3d04 <nibbleToLCDstring+0x1b6>
    3cf8:	e5 e2       	ldi	r30, 0x25	; 37
    3cfa:	f2 e0       	ldi	r31, 0x02	; 2
    3cfc:	80 e5       	ldi	r24, 0x50	; 80
    3cfe:	80 83       	st	Z, r24
    3d00:	11 82       	std	Z+1, r1	; 0x01
    3d02:	6e c0       	rjmp	.+220    	; 0x3de0 <nibbleToLCDstring+0x292>
    3d04:	e5 e2       	ldi	r30, 0x25	; 37
    3d06:	f2 e0       	ldi	r31, 0x02	; 2
    3d08:	8d e2       	ldi	r24, 0x2D	; 45
    3d0a:	80 83       	st	Z, r24
    3d0c:	11 82       	std	Z+1, r1	; 0x01
    3d0e:	68 c0       	rjmp	.+208    	; 0x3de0 <nibbleToLCDstring+0x292>
    3d10:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3d14:	e5 e2       	ldi	r30, 0x25	; 37
    3d16:	f2 e0       	ldi	r31, 0x02	; 2
    3d18:	80 5d       	subi	r24, 0xD0	; 208
    3d1a:	80 83       	st	Z, r24
    3d1c:	11 82       	std	Z+1, r1	; 0x01
    3d1e:	60 c0       	rjmp	.+192    	; 0x3de0 <nibbleToLCDstring+0x292>
    3d20:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3d24:	81 11       	cpse	r24, r1
    3d26:	09 c0       	rjmp	.+18     	; 0x3d3a <nibbleToLCDstring+0x1ec>
    3d28:	e5 e2       	ldi	r30, 0x25	; 37
    3d2a:	f2 e0       	ldi	r31, 0x02	; 2
    3d2c:	81 e4       	ldi	r24, 0x41	; 65
    3d2e:	80 83       	st	Z, r24
    3d30:	85 e7       	ldi	r24, 0x75	; 117
    3d32:	81 83       	std	Z+1, r24	; 0x01
    3d34:	83 e7       	ldi	r24, 0x73	; 115
    3d36:	82 83       	std	Z+2, r24	; 0x02
    3d38:	08 c0       	rjmp	.+16     	; 0x3d4a <nibbleToLCDstring+0x1fc>
    3d3a:	e5 e2       	ldi	r30, 0x25	; 37
    3d3c:	f2 e0       	ldi	r31, 0x02	; 2
    3d3e:	85 e4       	ldi	r24, 0x45	; 69
    3d40:	80 83       	st	Z, r24
    3d42:	89 e6       	ldi	r24, 0x69	; 105
    3d44:	81 83       	std	Z+1, r24	; 0x01
    3d46:	8e e6       	ldi	r24, 0x6E	; 110
    3d48:	82 83       	std	Z+2, r24	; 0x02
    3d4a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3d4e:	48 c0       	rjmp	.+144    	; 0x3de0 <nibbleToLCDstring+0x292>
    3d50:	c1 2f       	mov	r28, r17
    3d52:	d0 e0       	ldi	r29, 0x00	; 0
    3d54:	fe 01       	movw	r30, r28
    3d56:	ec 53       	subi	r30, 0x3C	; 60
    3d58:	fa 4f       	sbci	r31, 0xFA	; 250
    3d5a:	80 81       	ld	r24, Z
    3d5c:	0e 94 e6 34 	call	0x69cc	; 0x69cc <nibbleToChr>
    3d60:	cb 5d       	subi	r28, 0xDB	; 219
    3d62:	dd 4f       	sbci	r29, 0xFD	; 253
    3d64:	88 83       	st	Y, r24
    3d66:	1f 5f       	subi	r17, 0xFF	; 255
    3d68:	01 c0       	rjmp	.+2      	; 0x3d6c <nibbleToLCDstring+0x21e>
    3d6a:	10 e0       	ldi	r17, 0x00	; 0
    3d6c:	18 30       	cpi	r17, 0x08	; 8
    3d6e:	80 f3       	brcs	.-32     	; 0x3d50 <nibbleToLCDstring+0x202>
    3d70:	37 c0       	rjmp	.+110    	; 0x3de0 <nibbleToLCDstring+0x292>
    3d72:	82 2f       	mov	r24, r18
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	fc 01       	movw	r30, r24
    3d78:	ec 53       	subi	r30, 0x3C	; 60
    3d7a:	fa 4f       	sbci	r31, 0xFA	; 250
    3d7c:	30 81       	ld	r19, Z
    3d7e:	31 11       	cpse	r19, r1
    3d80:	02 c0       	rjmp	.+4      	; 0x3d86 <nibbleToLCDstring+0x238>
    3d82:	3f e6       	ldi	r19, 0x6F	; 111
    3d84:	01 c0       	rjmp	.+2      	; 0x3d88 <nibbleToLCDstring+0x23a>
    3d86:	39 e4       	ldi	r19, 0x49	; 73
    3d88:	fc 01       	movw	r30, r24
    3d8a:	eb 5d       	subi	r30, 0xDB	; 219
    3d8c:	fd 4f       	sbci	r31, 0xFD	; 253
    3d8e:	30 83       	st	Z, r19
    3d90:	2f 5f       	subi	r18, 0xFF	; 255
    3d92:	01 c0       	rjmp	.+2      	; 0x3d96 <nibbleToLCDstring+0x248>
    3d94:	20 e0       	ldi	r18, 0x00	; 0
    3d96:	28 30       	cpi	r18, 0x08	; 8
    3d98:	60 f3       	brcs	.-40     	; 0x3d72 <nibbleToLCDstring+0x224>
    3d9a:	22 c0       	rjmp	.+68     	; 0x3de0 <nibbleToLCDstring+0x292>
    3d9c:	a4 ec       	ldi	r26, 0xC4	; 196
    3d9e:	b5 e0       	ldi	r27, 0x05	; 5
    3da0:	8c 91       	ld	r24, X
    3da2:	e5 e2       	ldi	r30, 0x25	; 37
    3da4:	f2 e0       	ldi	r31, 0x02	; 2
    3da6:	80 5d       	subi	r24, 0xD0	; 208
    3da8:	80 83       	st	Z, r24
    3daa:	11 96       	adiw	r26, 0x01	; 1
    3dac:	8c 91       	ld	r24, X
    3dae:	80 5c       	subi	r24, 0xC0	; 192
    3db0:	81 83       	std	Z+1, r24	; 0x01
    3db2:	12 82       	std	Z+2, r1	; 0x02
    3db4:	15 c0       	rjmp	.+42     	; 0x3de0 <nibbleToLCDstring+0x292>
    3db6:	e4 ec       	ldi	r30, 0xC4	; 196
    3db8:	f5 e0       	ldi	r31, 0x05	; 5
    3dba:	90 81       	ld	r25, Z
    3dbc:	81 81       	ldd	r24, Z+1	; 0x01
    3dbe:	29 2f       	mov	r18, r25
    3dc0:	28 2b       	or	r18, r24
    3dc2:	31 f4       	brne	.+12     	; 0x3dd0 <nibbleToLCDstring+0x282>
    3dc4:	e5 e2       	ldi	r30, 0x25	; 37
    3dc6:	f2 e0       	ldi	r31, 0x02	; 2
    3dc8:	8d e2       	ldi	r24, 0x2D	; 45
    3dca:	80 83       	st	Z, r24
    3dcc:	81 83       	std	Z+1, r24	; 0x01
    3dce:	06 c0       	rjmp	.+12     	; 0x3ddc <nibbleToLCDstring+0x28e>
    3dd0:	e5 e2       	ldi	r30, 0x25	; 37
    3dd2:	f2 e0       	ldi	r31, 0x02	; 2
    3dd4:	90 5d       	subi	r25, 0xD0	; 208
    3dd6:	90 83       	st	Z, r25
    3dd8:	80 5d       	subi	r24, 0xD0	; 208
    3dda:	81 83       	std	Z+1, r24	; 0x01
    3ddc:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	1f 91       	pop	r17
    3de6:	0f 91       	pop	r16
    3de8:	08 95       	ret

00003dea <LCDStringOut>:
    3dea:	0f 93       	push	r16
    3dec:	1f 93       	push	r17
    3dee:	cf 93       	push	r28
    3df0:	8e e1       	ldi	r24, 0x1E	; 30
    3df2:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    3df6:	c0 e0       	ldi	r28, 0x00	; 0
    3df8:	05 e2       	ldi	r16, 0x25	; 37
    3dfa:	12 e0       	ldi	r17, 0x02	; 2
    3dfc:	0b c0       	rjmp	.+22     	; 0x3e14 <LCDStringOut+0x2a>
    3dfe:	f8 01       	movw	r30, r16
    3e00:	80 81       	ld	r24, Z
    3e02:	88 23       	and	r24, r24
    3e04:	19 f0       	breq	.+6      	; 0x3e0c <LCDStringOut+0x22>
    3e06:	0f 5f       	subi	r16, 0xFF	; 255
    3e08:	1f 4f       	sbci	r17, 0xFF	; 255
    3e0a:	01 c0       	rjmp	.+2      	; 0x3e0e <LCDStringOut+0x24>
    3e0c:	80 e2       	ldi	r24, 0x20	; 32
    3e0e:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    3e12:	cf 5f       	subi	r28, 0xFF	; 255
    3e14:	ca 30       	cpi	r28, 0x0A	; 10
    3e16:	98 f3       	brcs	.-26     	; 0x3dfe <LCDStringOut+0x14>
    3e18:	cf 91       	pop	r28
    3e1a:	1f 91       	pop	r17
    3e1c:	0f 91       	pop	r16
    3e1e:	08 95       	ret

00003e20 <nibbleCheckOvfl>:
    3e20:	8a 30       	cpi	r24, 0x0A	; 10
    3e22:	1c f4       	brge	.+6      	; 0x3e2a <nibbleCheckOvfl+0xa>
    3e24:	88 23       	and	r24, r24
    3e26:	1c f0       	brlt	.+6      	; 0x3e2e <nibbleCheckOvfl+0xe>
    3e28:	08 95       	ret
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	08 95       	ret
    3e2e:	89 e0       	ldi	r24, 0x09	; 9
    3e30:	08 95       	ret

00003e32 <nibbleChange>:
    3e32:	0f 93       	push	r16
    3e34:	1f 93       	push	r17
    3e36:	cf 93       	push	r28
    3e38:	df 93       	push	r29
    3e3a:	c8 2f       	mov	r28, r24
    3e3c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3e40:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3e44:	31 96       	adiw	r30, 0x01	; 1
    3e46:	84 91       	lpm	r24, Z
    3e48:	28 2f       	mov	r18, r24
    3e4a:	20 71       	andi	r18, 0x10	; 16
    3e4c:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3e50:	8e 2f       	mov	r24, r30
    3e52:	90 e0       	ldi	r25, 0x00	; 0
    3e54:	fc 01       	movw	r30, r24
    3e56:	32 97       	sbiw	r30, 0x02	; 2
    3e58:	ed 30       	cpi	r30, 0x0D	; 13
    3e5a:	f1 05       	cpc	r31, r1
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <nibbleChange+0x2e>
    3e5e:	93 c1       	rjmp	.+806    	; 0x4186 <nibbleChange+0x354>
    3e60:	88 27       	eor	r24, r24
    3e62:	e4 57       	subi	r30, 0x74	; 116
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	8f 4f       	sbci	r24, 0xFF	; 255
    3e68:	0c 94 12 38 	jmp	0x7024	; 0x7024 <__tablejump2__>
    3e6c:	d0 e0       	ldi	r29, 0x00	; 0
    3e6e:	cc 53       	subi	r28, 0x3C	; 60
    3e70:	da 4f       	sbci	r29, 0xFA	; 250
    3e72:	88 81       	ld	r24, Y
    3e74:	68 0f       	add	r22, r24
    3e76:	6f 70       	andi	r22, 0x0F	; 15
    3e78:	68 83       	st	Y, r22
    3e7a:	85 c1       	rjmp	.+778    	; 0x4186 <nibbleChange+0x354>
    3e7c:	21 11       	cpse	r18, r1
    3e7e:	1b c0       	rjmp	.+54     	; 0x3eb6 <nibbleChange+0x84>
    3e80:	61 30       	cpi	r22, 0x01	; 1
    3e82:	41 f4       	brne	.+16     	; 0x3e94 <nibbleChange+0x62>
    3e84:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3e88:	80 31       	cpi	r24, 0x10	; 16
    3e8a:	20 f0       	brcs	.+8      	; 0x3e94 <nibbleChange+0x62>
    3e8c:	81 e0       	ldi	r24, 0x01	; 1
    3e8e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3e92:	79 c1       	rjmp	.+754    	; 0x4186 <nibbleChange+0x354>
    3e94:	6f 3f       	cpi	r22, 0xFF	; 255
    3e96:	49 f4       	brne	.+18     	; 0x3eaa <nibbleChange+0x78>
    3e98:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3e9c:	82 50       	subi	r24, 0x02	; 2
    3e9e:	8f 30       	cpi	r24, 0x0F	; 15
    3ea0:	20 f0       	brcs	.+8      	; 0x3eaa <nibbleChange+0x78>
    3ea2:	80 e1       	ldi	r24, 0x10	; 16
    3ea4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ea8:	6e c1       	rjmp	.+732    	; 0x4186 <nibbleChange+0x354>
    3eaa:	e4 ec       	ldi	r30, 0xC4	; 196
    3eac:	f5 e0       	ldi	r31, 0x05	; 5
    3eae:	80 81       	ld	r24, Z
    3eb0:	68 0f       	add	r22, r24
    3eb2:	60 83       	st	Z, r22
    3eb4:	68 c1       	rjmp	.+720    	; 0x4186 <nibbleChange+0x354>
    3eb6:	61 30       	cpi	r22, 0x01	; 1
    3eb8:	41 f4       	brne	.+16     	; 0x3eca <nibbleChange+0x98>
    3eba:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ebe:	80 31       	cpi	r24, 0x10	; 16
    3ec0:	21 f4       	brne	.+8      	; 0x3eca <nibbleChange+0x98>
    3ec2:	8f ef       	ldi	r24, 0xFF	; 255
    3ec4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ec8:	5e c1       	rjmp	.+700    	; 0x4186 <nibbleChange+0x354>
    3eca:	61 30       	cpi	r22, 0x01	; 1
    3ecc:	41 f4       	brne	.+16     	; 0x3ede <nibbleChange+0xac>
    3ece:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ed2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ed4:	21 f4       	brne	.+8      	; 0x3ede <nibbleChange+0xac>
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3edc:	54 c1       	rjmp	.+680    	; 0x4186 <nibbleChange+0x354>
    3ede:	6f 3f       	cpi	r22, 0xFF	; 255
    3ee0:	41 f4       	brne	.+16     	; 0x3ef2 <nibbleChange+0xc0>
    3ee2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ee6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ee8:	21 f4       	brne	.+8      	; 0x3ef2 <nibbleChange+0xc0>
    3eea:	80 e1       	ldi	r24, 0x10	; 16
    3eec:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ef0:	4a c1       	rjmp	.+660    	; 0x4186 <nibbleChange+0x354>
    3ef2:	6f 3f       	cpi	r22, 0xFF	; 255
    3ef4:	41 f4       	brne	.+16     	; 0x3f06 <nibbleChange+0xd4>
    3ef6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3efa:	81 30       	cpi	r24, 0x01	; 1
    3efc:	21 f4       	brne	.+8      	; 0x3f06 <nibbleChange+0xd4>
    3efe:	8f ef       	ldi	r24, 0xFF	; 255
    3f00:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f04:	40 c1       	rjmp	.+640    	; 0x4186 <nibbleChange+0x354>
    3f06:	e4 ec       	ldi	r30, 0xC4	; 196
    3f08:	f5 e0       	ldi	r31, 0x05	; 5
    3f0a:	80 81       	ld	r24, Z
    3f0c:	68 0f       	add	r22, r24
    3f0e:	60 83       	st	Z, r22
    3f10:	3a c1       	rjmp	.+628    	; 0x4186 <nibbleChange+0x354>
    3f12:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3f16:	8f 3f       	cpi	r24, 0xFF	; 255
    3f18:	09 f4       	brne	.+2      	; 0x3f1c <nibbleChange+0xea>
    3f1a:	c1 e0       	ldi	r28, 0x01	; 1
    3f1c:	c1 11       	cpse	r28, r1
    3f1e:	16 c0       	rjmp	.+44     	; 0x3f4c <nibbleChange+0x11a>
    3f20:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3f24:	8c 30       	cpi	r24, 0x0C	; 12
    3f26:	50 f4       	brcc	.+20     	; 0x3f3c <nibbleChange+0x10a>
    3f28:	8b 30       	cpi	r24, 0x0B	; 11
    3f2a:	11 f4       	brne	.+4      	; 0x3f30 <nibbleChange+0xfe>
    3f2c:	61 30       	cpi	r22, 0x01	; 1
    3f2e:	41 f0       	breq	.+16     	; 0x3f40 <nibbleChange+0x10e>
    3f30:	81 11       	cpse	r24, r1
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <nibbleChange+0x106>
    3f34:	6f 3f       	cpi	r22, 0xFF	; 255
    3f36:	31 f0       	breq	.+12     	; 0x3f44 <nibbleChange+0x112>
    3f38:	68 0f       	add	r22, r24
    3f3a:	05 c0       	rjmp	.+10     	; 0x3f46 <nibbleChange+0x114>
    3f3c:	60 e0       	ldi	r22, 0x00	; 0
    3f3e:	03 c0       	rjmp	.+6      	; 0x3f46 <nibbleChange+0x114>
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	01 c0       	rjmp	.+2      	; 0x3f46 <nibbleChange+0x114>
    3f44:	6b e0       	ldi	r22, 0x0B	; 11
    3f46:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    3f4a:	2b c0       	rjmp	.+86     	; 0x3fa2 <nibbleChange+0x170>
    3f4c:	21 11       	cpse	r18, r1
    3f4e:	0a c0       	rjmp	.+20     	; 0x3f64 <nibbleChange+0x132>
    3f50:	81 11       	cpse	r24, r1
    3f52:	02 c0       	rjmp	.+4      	; 0x3f58 <nibbleChange+0x126>
    3f54:	6f 3f       	cpi	r22, 0xFF	; 255
    3f56:	c1 f0       	breq	.+48     	; 0x3f88 <nibbleChange+0x156>
    3f58:	8a 30       	cpi	r24, 0x0A	; 10
    3f5a:	11 f4       	brne	.+4      	; 0x3f60 <nibbleChange+0x12e>
    3f5c:	61 30       	cpi	r22, 0x01	; 1
    3f5e:	b1 f0       	breq	.+44     	; 0x3f8c <nibbleChange+0x15a>
    3f60:	68 0f       	add	r22, r24
    3f62:	1d c0       	rjmp	.+58     	; 0x3f9e <nibbleChange+0x16c>
    3f64:	81 11       	cpse	r24, r1
    3f66:	02 c0       	rjmp	.+4      	; 0x3f6c <nibbleChange+0x13a>
    3f68:	6f 3f       	cpi	r22, 0xFF	; 255
    3f6a:	91 f0       	breq	.+36     	; 0x3f90 <nibbleChange+0x15e>
    3f6c:	8a 30       	cpi	r24, 0x0A	; 10
    3f6e:	11 f4       	brne	.+4      	; 0x3f74 <nibbleChange+0x142>
    3f70:	61 30       	cpi	r22, 0x01	; 1
    3f72:	81 f0       	breq	.+32     	; 0x3f94 <nibbleChange+0x162>
    3f74:	8f 3f       	cpi	r24, 0xFF	; 255
    3f76:	11 f4       	brne	.+4      	; 0x3f7c <nibbleChange+0x14a>
    3f78:	61 30       	cpi	r22, 0x01	; 1
    3f7a:	71 f0       	breq	.+28     	; 0x3f98 <nibbleChange+0x166>
    3f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    3f7e:	11 f4       	brne	.+4      	; 0x3f84 <nibbleChange+0x152>
    3f80:	6f 3f       	cpi	r22, 0xFF	; 255
    3f82:	61 f0       	breq	.+24     	; 0x3f9c <nibbleChange+0x16a>
    3f84:	68 0f       	add	r22, r24
    3f86:	0b c0       	rjmp	.+22     	; 0x3f9e <nibbleChange+0x16c>
    3f88:	6a e0       	ldi	r22, 0x0A	; 10
    3f8a:	09 c0       	rjmp	.+18     	; 0x3f9e <nibbleChange+0x16c>
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	07 c0       	rjmp	.+14     	; 0x3f9e <nibbleChange+0x16c>
    3f90:	6f ef       	ldi	r22, 0xFF	; 255
    3f92:	05 c0       	rjmp	.+10     	; 0x3f9e <nibbleChange+0x16c>
    3f94:	6f ef       	ldi	r22, 0xFF	; 255
    3f96:	03 c0       	rjmp	.+6      	; 0x3f9e <nibbleChange+0x16c>
    3f98:	60 e0       	ldi	r22, 0x00	; 0
    3f9a:	01 c0       	rjmp	.+2      	; 0x3f9e <nibbleChange+0x16c>
    3f9c:	6a e0       	ldi	r22, 0x0A	; 10
    3f9e:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    3fa2:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    3fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    3fa8:	09 f4       	brne	.+2      	; 0x3fac <nibbleChange+0x17a>
    3faa:	ed c0       	rjmp	.+474    	; 0x4186 <nibbleChange+0x354>
    3fac:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3fb0:	8f 3f       	cpi	r24, 0xFF	; 255
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <nibbleChange+0x184>
    3fb4:	e8 c0       	rjmp	.+464    	; 0x4186 <nibbleChange+0x354>
    3fb6:	28 2f       	mov	r18, r24
    3fb8:	22 0f       	add	r18, r18
    3fba:	82 0f       	add	r24, r18
    3fbc:	28 2f       	mov	r18, r24
    3fbe:	22 0f       	add	r18, r18
    3fc0:	22 0f       	add	r18, r18
    3fc2:	92 0f       	add	r25, r18
    3fc4:	0a f0       	brmi	.+2      	; 0x3fc8 <nibbleChange+0x196>
    3fc6:	df c0       	rjmp	.+446    	; 0x4186 <nibbleChange+0x354>
    3fc8:	e4 ec       	ldi	r30, 0xC4	; 196
    3fca:	f5 e0       	ldi	r31, 0x05	; 5
    3fcc:	87 e0       	ldi	r24, 0x07	; 7
    3fce:	80 83       	st	Z, r24
    3fd0:	8a e0       	ldi	r24, 0x0A	; 10
    3fd2:	81 83       	std	Z+1, r24	; 0x01
    3fd4:	d8 c0       	rjmp	.+432    	; 0x4186 <nibbleChange+0x354>
    3fd6:	c1 11       	cpse	r28, r1
    3fd8:	07 c0       	rjmp	.+14     	; 0x3fe8 <nibbleChange+0x1b6>
    3fda:	e4 ec       	ldi	r30, 0xC4	; 196
    3fdc:	f5 e0       	ldi	r31, 0x05	; 5
    3fde:	80 81       	ld	r24, Z
    3fe0:	68 0f       	add	r22, r24
    3fe2:	67 70       	andi	r22, 0x07	; 7
    3fe4:	60 83       	st	Z, r22
    3fe6:	cf c0       	rjmp	.+414    	; 0x4186 <nibbleChange+0x354>
    3fe8:	d0 e0       	ldi	r29, 0x00	; 0
    3fea:	04 ec       	ldi	r16, 0xC4	; 196
    3fec:	15 e0       	ldi	r17, 0x05	; 5
    3fee:	cc 53       	subi	r28, 0x3C	; 60
    3ff0:	da 4f       	sbci	r29, 0xFA	; 250
    3ff2:	88 81       	ld	r24, Y
    3ff4:	86 0f       	add	r24, r22
    3ff6:	14 df       	rcall	.-472    	; 0x3e20 <nibbleCheckOvfl>
    3ff8:	88 83       	st	Y, r24
    3ffa:	f8 01       	movw	r30, r16
    3ffc:	81 81       	ldd	r24, Z+1	; 0x01
    3ffe:	92 81       	ldd	r25, Z+2	; 0x02
    4000:	88 0f       	add	r24, r24
    4002:	28 2f       	mov	r18, r24
    4004:	22 0f       	add	r18, r18
    4006:	22 0f       	add	r18, r18
    4008:	82 0f       	add	r24, r18
    400a:	89 0f       	add	r24, r25
    400c:	80 32       	cpi	r24, 0x20	; 32
    400e:	2c f0       	brlt	.+10     	; 0x401a <nibbleChange+0x1e8>
    4010:	83 e0       	ldi	r24, 0x03	; 3
    4012:	81 83       	std	Z+1, r24	; 0x01
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	82 83       	std	Z+2, r24	; 0x02
    4018:	b6 c0       	rjmp	.+364    	; 0x4186 <nibbleChange+0x354>
    401a:	88 23       	and	r24, r24
    401c:	0c f0       	brlt	.+2      	; 0x4020 <nibbleChange+0x1ee>
    401e:	b3 c0       	rjmp	.+358    	; 0x4186 <nibbleChange+0x354>
    4020:	e4 ec       	ldi	r30, 0xC4	; 196
    4022:	f5 e0       	ldi	r31, 0x05	; 5
    4024:	11 82       	std	Z+1, r1	; 0x01
    4026:	12 82       	std	Z+2, r1	; 0x02
    4028:	ae c0       	rjmp	.+348    	; 0x4186 <nibbleChange+0x354>
    402a:	d0 e0       	ldi	r29, 0x00	; 0
    402c:	04 ec       	ldi	r16, 0xC4	; 196
    402e:	15 e0       	ldi	r17, 0x05	; 5
    4030:	cc 53       	subi	r28, 0x3C	; 60
    4032:	da 4f       	sbci	r29, 0xFA	; 250
    4034:	88 81       	ld	r24, Y
    4036:	86 0f       	add	r24, r22
    4038:	f3 de       	rcall	.-538    	; 0x3e20 <nibbleCheckOvfl>
    403a:	88 83       	st	Y, r24
    403c:	f8 01       	movw	r30, r16
    403e:	20 81       	ld	r18, Z
    4040:	81 81       	ldd	r24, Z+1	; 0x01
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	ac 01       	movw	r20, r24
    4046:	44 0f       	add	r20, r20
    4048:	55 1f       	adc	r21, r21
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	88 0f       	add	r24, r24
    4050:	99 1f       	adc	r25, r25
    4052:	88 0f       	add	r24, r24
    4054:	99 1f       	adc	r25, r25
    4056:	84 0f       	add	r24, r20
    4058:	95 1f       	adc	r25, r21
    405a:	f4 e6       	ldi	r31, 0x64	; 100
    405c:	2f 9f       	mul	r18, r31
    405e:	80 0d       	add	r24, r0
    4060:	91 1d       	adc	r25, r1
    4062:	11 24       	eor	r1, r1
    4064:	f8 01       	movw	r30, r16
    4066:	22 81       	ldd	r18, Z+2	; 0x02
    4068:	82 0f       	add	r24, r18
    406a:	91 1d       	adc	r25, r1
    406c:	8f 3f       	cpi	r24, 0xFF	; 255
    406e:	91 05       	cpc	r25, r1
    4070:	09 f0       	breq	.+2      	; 0x4074 <nibbleChange+0x242>
    4072:	0c f4       	brge	.+2      	; 0x4076 <nibbleChange+0x244>
    4074:	88 c0       	rjmp	.+272    	; 0x4186 <nibbleChange+0x354>
    4076:	82 e0       	ldi	r24, 0x02	; 2
    4078:	80 83       	st	Z, r24
    407a:	85 e0       	ldi	r24, 0x05	; 5
    407c:	81 83       	std	Z+1, r24	; 0x01
    407e:	82 83       	std	Z+2, r24	; 0x02
    4080:	82 c0       	rjmp	.+260    	; 0x4186 <nibbleChange+0x354>
    4082:	22 23       	and	r18, r18
    4084:	a1 f0       	breq	.+40     	; 0x40ae <nibbleChange+0x27c>
    4086:	d0 e0       	ldi	r29, 0x00	; 0
    4088:	fe 01       	movw	r30, r28
    408a:	ec 53       	subi	r30, 0x3C	; 60
    408c:	fa 4f       	sbci	r31, 0xFA	; 250
    408e:	80 81       	ld	r24, Z
    4090:	68 0f       	add	r22, r24
    4092:	60 83       	st	Z, r22
    4094:	64 30       	cpi	r22, 0x04	; 4
    4096:	19 f4       	brne	.+6      	; 0x409e <nibbleChange+0x26c>
    4098:	8f ef       	ldi	r24, 0xFF	; 255
    409a:	80 83       	st	Z, r24
    409c:	74 c0       	rjmp	.+232    	; 0x4186 <nibbleChange+0x354>
    409e:	6e 3f       	cpi	r22, 0xFE	; 254
    40a0:	09 f0       	breq	.+2      	; 0x40a4 <nibbleChange+0x272>
    40a2:	71 c0       	rjmp	.+226    	; 0x4186 <nibbleChange+0x354>
    40a4:	cc 53       	subi	r28, 0x3C	; 60
    40a6:	da 4f       	sbci	r29, 0xFA	; 250
    40a8:	83 e0       	ldi	r24, 0x03	; 3
    40aa:	88 83       	st	Y, r24
    40ac:	6c c0       	rjmp	.+216    	; 0x4186 <nibbleChange+0x354>
    40ae:	d0 e0       	ldi	r29, 0x00	; 0
    40b0:	fe 01       	movw	r30, r28
    40b2:	ec 53       	subi	r30, 0x3C	; 60
    40b4:	fa 4f       	sbci	r31, 0xFA	; 250
    40b6:	80 81       	ld	r24, Z
    40b8:	81 11       	cpse	r24, r1
    40ba:	05 c0       	rjmp	.+10     	; 0x40c6 <nibbleChange+0x294>
    40bc:	6f 3f       	cpi	r22, 0xFF	; 255
    40be:	19 f4       	brne	.+6      	; 0x40c6 <nibbleChange+0x294>
    40c0:	83 e0       	ldi	r24, 0x03	; 3
    40c2:	80 83       	st	Z, r24
    40c4:	60 c0       	rjmp	.+192    	; 0x4186 <nibbleChange+0x354>
    40c6:	83 30       	cpi	r24, 0x03	; 3
    40c8:	31 f4       	brne	.+12     	; 0x40d6 <nibbleChange+0x2a4>
    40ca:	61 30       	cpi	r22, 0x01	; 1
    40cc:	21 f4       	brne	.+8      	; 0x40d6 <nibbleChange+0x2a4>
    40ce:	cc 53       	subi	r28, 0x3C	; 60
    40d0:	da 4f       	sbci	r29, 0xFA	; 250
    40d2:	18 82       	st	Y, r1
    40d4:	58 c0       	rjmp	.+176    	; 0x4186 <nibbleChange+0x354>
    40d6:	cc 53       	subi	r28, 0x3C	; 60
    40d8:	da 4f       	sbci	r29, 0xFA	; 250
    40da:	68 0f       	add	r22, r24
    40dc:	68 83       	st	Y, r22
    40de:	53 c0       	rjmp	.+166    	; 0x4186 <nibbleChange+0x354>
    40e0:	d0 e0       	ldi	r29, 0x00	; 0
    40e2:	cc 53       	subi	r28, 0x3C	; 60
    40e4:	da 4f       	sbci	r29, 0xFA	; 250
    40e6:	88 81       	ld	r24, Y
    40e8:	68 0f       	add	r22, r24
    40ea:	63 70       	andi	r22, 0x03	; 3
    40ec:	68 83       	st	Y, r22
    40ee:	4b c0       	rjmp	.+150    	; 0x4186 <nibbleChange+0x354>
    40f0:	e4 ec       	ldi	r30, 0xC4	; 196
    40f2:	f5 e0       	ldi	r31, 0x05	; 5
    40f4:	80 81       	ld	r24, Z
    40f6:	80 95       	com	r24
    40f8:	80 83       	st	Z, r24
    40fa:	45 c0       	rjmp	.+138    	; 0x4186 <nibbleChange+0x354>
    40fc:	d0 e0       	ldi	r29, 0x00	; 0
    40fe:	81 e0       	ldi	r24, 0x01	; 1
    4100:	61 fd       	sbrc	r22, 1
    4102:	80 e0       	ldi	r24, 0x00	; 0
    4104:	cc 53       	subi	r28, 0x3C	; 60
    4106:	da 4f       	sbci	r29, 0xFA	; 250
    4108:	88 83       	st	Y, r24
    410a:	3d c0       	rjmp	.+122    	; 0x4186 <nibbleChange+0x354>
    410c:	61 30       	cpi	r22, 0x01	; 1
    410e:	41 f4       	brne	.+16     	; 0x4120 <nibbleChange+0x2ee>
    4110:	d0 e0       	ldi	r29, 0x00	; 0
    4112:	cc 53       	subi	r28, 0x3C	; 60
    4114:	da 4f       	sbci	r29, 0xFA	; 250
    4116:	88 81       	ld	r24, Y
    4118:	87 70       	andi	r24, 0x07	; 7
    411a:	8f 5f       	subi	r24, 0xFF	; 255
    411c:	88 83       	st	Y, r24
    411e:	33 c0       	rjmp	.+102    	; 0x4186 <nibbleChange+0x354>
    4120:	ec 2f       	mov	r30, r28
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	ec 53       	subi	r30, 0x3C	; 60
    4126:	fa 4f       	sbci	r31, 0xFA	; 250
    4128:	80 81       	ld	r24, Z
    412a:	82 50       	subi	r24, 0x02	; 2
    412c:	87 70       	andi	r24, 0x07	; 7
    412e:	8f 5f       	subi	r24, 0xFF	; 255
    4130:	80 83       	st	Z, r24
    4132:	29 c0       	rjmp	.+82     	; 0x4186 <nibbleChange+0x354>
    4134:	e4 ec       	ldi	r30, 0xC4	; 196
    4136:	f5 e0       	ldi	r31, 0x05	; 5
    4138:	90 81       	ld	r25, Z
    413a:	81 81       	ldd	r24, Z+1	; 0x01
    413c:	99 0f       	add	r25, r25
    413e:	29 2f       	mov	r18, r25
    4140:	22 0f       	add	r18, r18
    4142:	22 0f       	add	r18, r18
    4144:	92 0f       	add	r25, r18
    4146:	89 0f       	add	r24, r25
    4148:	c1 11       	cpse	r28, r1
    414a:	07 c0       	rjmp	.+14     	; 0x415a <nibbleChange+0x328>
    414c:	66 0f       	add	r22, r22
    414e:	96 2f       	mov	r25, r22
    4150:	99 0f       	add	r25, r25
    4152:	99 0f       	add	r25, r25
    4154:	69 0f       	add	r22, r25
    4156:	68 0f       	add	r22, r24
    4158:	01 c0       	rjmp	.+2      	; 0x415c <nibbleChange+0x32a>
    415a:	68 0f       	add	r22, r24
    415c:	66 23       	and	r22, r22
    415e:	1c f0       	brlt	.+6      	; 0x4166 <nibbleChange+0x334>
    4160:	61 34       	cpi	r22, 0x41	; 65
    4162:	1c f4       	brge	.+6      	; 0x416a <nibbleChange+0x338>
    4164:	03 c0       	rjmp	.+6      	; 0x416c <nibbleChange+0x33a>
    4166:	60 e0       	ldi	r22, 0x00	; 0
    4168:	01 c0       	rjmp	.+2      	; 0x416c <nibbleChange+0x33a>
    416a:	60 e0       	ldi	r22, 0x00	; 0
    416c:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    4170:	06 c0       	rjmp	.+12     	; 0x417e <nibbleChange+0x34c>
    4172:	e4 ec       	ldi	r30, 0xC4	; 196
    4174:	f5 e0       	ldi	r31, 0x05	; 5
    4176:	80 81       	ld	r24, Z
    4178:	8f 5f       	subi	r24, 0xFF	; 255
    417a:	80 83       	st	Z, r24
    417c:	6a 50       	subi	r22, 0x0A	; 10
    417e:	6a 30       	cpi	r22, 0x0A	; 10
    4180:	c4 f7       	brge	.-16     	; 0x4172 <nibbleChange+0x340>
    4182:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    4186:	df 91       	pop	r29
    4188:	cf 91       	pop	r28
    418a:	1f 91       	pop	r17
    418c:	0f 91       	pop	r16
    418e:	08 95       	ret

00004190 <nibbleToData>:
    4190:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4194:	8e 2f       	mov	r24, r30
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	fc 01       	movw	r30, r24
    419a:	32 97       	sbiw	r30, 0x02	; 2
    419c:	ed 30       	cpi	r30, 0x0D	; 13
    419e:	f1 05       	cpc	r31, r1
    41a0:	08 f0       	brcs	.+2      	; 0x41a4 <nibbleToData+0x14>
    41a2:	da c0       	rjmp	.+436    	; 0x4358 <nibbleToData+0x1c8>
    41a4:	88 27       	eor	r24, r24
    41a6:	e7 56       	subi	r30, 0x67	; 103
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	8f 4f       	sbci	r24, 0xFF	; 255
    41ac:	0c 94 12 38 	jmp	0x7024	; 0x7024 <__tablejump2__>
    41b0:	e4 ec       	ldi	r30, 0xC4	; 196
    41b2:	f5 e0       	ldi	r31, 0x05	; 5
    41b4:	80 81       	ld	r24, Z
    41b6:	20 e1       	ldi	r18, 0x10	; 16
    41b8:	82 9f       	mul	r24, r18
    41ba:	c0 01       	movw	r24, r0
    41bc:	11 24       	eor	r1, r1
    41be:	91 81       	ldd	r25, Z+1	; 0x01
    41c0:	9f 70       	andi	r25, 0x0F	; 15
    41c2:	89 2b       	or	r24, r25
    41c4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    41c8:	08 95       	ret
    41ca:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    41ce:	8f ef       	ldi	r24, 0xFF	; 255
    41d0:	89 0f       	add	r24, r25
    41d2:	80 31       	cpi	r24, 0x10	; 16
    41d4:	18 f0       	brcs	.+6      	; 0x41dc <nibbleToData+0x4c>
    41d6:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    41da:	08 95       	ret
    41dc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    41e0:	08 95       	ret
    41e2:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    41e6:	9f 3f       	cpi	r25, 0xFF	; 255
    41e8:	21 f0       	breq	.+8      	; 0x41f2 <nibbleToData+0x62>
    41ea:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    41ee:	8f 3f       	cpi	r24, 0xFF	; 255
    41f0:	21 f4       	brne	.+8      	; 0x41fa <nibbleToData+0x6a>
    41f2:	8f ef       	ldi	r24, 0xFF	; 255
    41f4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    41f8:	08 95       	ret
    41fa:	28 2f       	mov	r18, r24
    41fc:	22 0f       	add	r18, r18
    41fe:	82 0f       	add	r24, r18
    4200:	88 0f       	add	r24, r24
    4202:	88 0f       	add	r24, r24
    4204:	89 0f       	add	r24, r25
    4206:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    420a:	08 95       	ret
    420c:	e4 ec       	ldi	r30, 0xC4	; 196
    420e:	f5 e0       	ldi	r31, 0x05	; 5
    4210:	80 81       	ld	r24, Z
    4212:	30 e2       	ldi	r19, 0x20	; 32
    4214:	83 9f       	mul	r24, r19
    4216:	c0 01       	movw	r24, r0
    4218:	11 24       	eor	r1, r1
    421a:	21 81       	ldd	r18, Z+1	; 0x01
    421c:	32 81       	ldd	r19, Z+2	; 0x02
    421e:	22 0f       	add	r18, r18
    4220:	42 2f       	mov	r20, r18
    4222:	44 0f       	add	r20, r20
    4224:	44 0f       	add	r20, r20
    4226:	24 0f       	add	r18, r20
    4228:	23 0f       	add	r18, r19
    422a:	20 32       	cpi	r18, 0x20	; 32
    422c:	20 f0       	brcs	.+8      	; 0x4236 <nibbleToData+0xa6>
    422e:	8f 61       	ori	r24, 0x1F	; 31
    4230:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4234:	08 95       	ret
    4236:	82 2b       	or	r24, r18
    4238:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    423c:	08 95       	ret
    423e:	e4 ec       	ldi	r30, 0xC4	; 196
    4240:	f5 e0       	ldi	r31, 0x05	; 5
    4242:	20 81       	ld	r18, Z
    4244:	81 81       	ldd	r24, Z+1	; 0x01
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	ac 01       	movw	r20, r24
    424a:	44 0f       	add	r20, r20
    424c:	55 1f       	adc	r21, r21
    424e:	88 0f       	add	r24, r24
    4250:	99 1f       	adc	r25, r25
    4252:	88 0f       	add	r24, r24
    4254:	99 1f       	adc	r25, r25
    4256:	88 0f       	add	r24, r24
    4258:	99 1f       	adc	r25, r25
    425a:	84 0f       	add	r24, r20
    425c:	95 1f       	adc	r25, r21
    425e:	34 e6       	ldi	r19, 0x64	; 100
    4260:	23 9f       	mul	r18, r19
    4262:	80 0d       	add	r24, r0
    4264:	91 1d       	adc	r25, r1
    4266:	11 24       	eor	r1, r1
    4268:	22 81       	ldd	r18, Z+2	; 0x02
    426a:	82 0f       	add	r24, r18
    426c:	91 1d       	adc	r25, r1
    426e:	8f 3f       	cpi	r24, 0xFF	; 255
    4270:	91 05       	cpc	r25, r1
    4272:	29 f0       	breq	.+10     	; 0x427e <nibbleToData+0xee>
    4274:	20 f0       	brcs	.+8      	; 0x427e <nibbleToData+0xee>
    4276:	8f ef       	ldi	r24, 0xFF	; 255
    4278:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    427c:	08 95       	ret
    427e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4282:	08 95       	ret
    4284:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4288:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    428c:	84 30       	cpi	r24, 0x04	; 4
    428e:	08 f4       	brcc	.+2      	; 0x4292 <nibbleToData+0x102>
    4290:	63 c0       	rjmp	.+198    	; 0x4358 <nibbleToData+0x1c8>
    4292:	8f ef       	ldi	r24, 0xFF	; 255
    4294:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4298:	08 95       	ret
    429a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    429e:	83 70       	andi	r24, 0x03	; 3
    42a0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    42a4:	08 95       	ret
    42a6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42aa:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    42ae:	08 95       	ret
    42b0:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    42b4:	80 e0       	ldi	r24, 0x00	; 0
    42b6:	0c c0       	rjmp	.+24     	; 0x42d0 <nibbleToData+0x140>
    42b8:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    42bc:	99 0f       	add	r25, r25
    42be:	e8 2f       	mov	r30, r24
    42c0:	f0 e0       	ldi	r31, 0x00	; 0
    42c2:	ec 53       	subi	r30, 0x3C	; 60
    42c4:	fa 4f       	sbci	r31, 0xFA	; 250
    42c6:	20 81       	ld	r18, Z
    42c8:	92 0f       	add	r25, r18
    42ca:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    42ce:	8f 5f       	subi	r24, 0xFF	; 255
    42d0:	88 30       	cpi	r24, 0x08	; 8
    42d2:	90 f3       	brcs	.-28     	; 0x42b8 <nibbleToData+0x128>
    42d4:	08 95       	ret
    42d6:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    42da:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    42de:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    42e2:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    42e6:	a2 ea       	ldi	r26, 0xA2	; 162
    42e8:	b5 e0       	ldi	r27, 0x05	; 5
    42ea:	88 e0       	ldi	r24, 0x08	; 8
    42ec:	10 c0       	rjmp	.+32     	; 0x430e <nibbleToData+0x17e>
    42ee:	82 50       	subi	r24, 0x02	; 2
    42f0:	f0 e0       	ldi	r31, 0x00	; 0
    42f2:	ec 53       	subi	r30, 0x3C	; 60
    42f4:	fa 4f       	sbci	r31, 0xFA	; 250
    42f6:	90 81       	ld	r25, Z
    42f8:	e8 2f       	mov	r30, r24
    42fa:	f0 e0       	ldi	r31, 0x00	; 0
    42fc:	ec 53       	subi	r30, 0x3C	; 60
    42fe:	fa 4f       	sbci	r31, 0xFA	; 250
    4300:	20 81       	ld	r18, Z
    4302:	30 e1       	ldi	r19, 0x10	; 16
    4304:	23 9f       	mul	r18, r19
    4306:	90 0d       	add	r25, r0
    4308:	11 24       	eor	r1, r1
    430a:	9c 93       	st	X, r25
    430c:	11 96       	adiw	r26, 0x01	; 1
    430e:	ef ef       	ldi	r30, 0xFF	; 255
    4310:	e8 0f       	add	r30, r24
    4312:	81 11       	cpse	r24, r1
    4314:	ec cf       	rjmp	.-40     	; 0x42ee <nibbleToData+0x15e>
    4316:	08 95       	ret
    4318:	e4 ec       	ldi	r30, 0xC4	; 196
    431a:	f5 e0       	ldi	r31, 0x05	; 5
    431c:	20 81       	ld	r18, Z
    431e:	91 81       	ldd	r25, Z+1	; 0x01
    4320:	89 2f       	mov	r24, r25
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	01 97       	sbiw	r24, 0x01	; 1
    4326:	88 0f       	add	r24, r24
    4328:	99 1f       	adc	r25, r25
    432a:	88 0f       	add	r24, r24
    432c:	99 1f       	adc	r25, r25
    432e:	88 0f       	add	r24, r24
    4330:	99 1f       	adc	r25, r25
    4332:	9f ef       	ldi	r25, 0xFF	; 255
    4334:	92 0f       	add	r25, r18
    4336:	89 2b       	or	r24, r25
    4338:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    433c:	08 95       	ret
    433e:	e4 ec       	ldi	r30, 0xC4	; 196
    4340:	f5 e0       	ldi	r31, 0x05	; 5
    4342:	80 81       	ld	r24, Z
    4344:	91 81       	ldd	r25, Z+1	; 0x01
    4346:	88 0f       	add	r24, r24
    4348:	28 2f       	mov	r18, r24
    434a:	22 0f       	add	r18, r18
    434c:	22 0f       	add	r18, r18
    434e:	82 0f       	add	r24, r18
    4350:	89 0f       	add	r24, r25
    4352:	81 50       	subi	r24, 0x01	; 1
    4354:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4358:	08 95       	ret

0000435a <menuTextOut>:
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
    4362:	8c 01       	movw	r16, r24
    4364:	d6 2f       	mov	r29, r22
    4366:	c0 e0       	ldi	r28, 0x00	; 0
    4368:	0c c0       	rjmp	.+24     	; 0x4382 <menuTextOut+0x28>
    436a:	f8 01       	movw	r30, r16
    436c:	84 91       	lpm	r24, Z
    436e:	88 23       	and	r24, r24
    4370:	19 f0       	breq	.+6      	; 0x4378 <menuTextOut+0x1e>
    4372:	0f 5f       	subi	r16, 0xFF	; 255
    4374:	1f 4f       	sbci	r17, 0xFF	; 255
    4376:	02 c0       	rjmp	.+4      	; 0x437c <menuTextOut+0x22>
    4378:	8d 2f       	mov	r24, r29
    437a:	d0 e2       	ldi	r29, 0x20	; 32
    437c:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    4380:	cf 5f       	subi	r28, 0xFF	; 255
    4382:	ca 30       	cpi	r28, 0x0A	; 10
    4384:	90 f3       	brcs	.-28     	; 0x436a <menuTextOut+0x10>
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	08 95       	ret

00004390 <menuParentMenuToLCD>:
    4390:	80 e4       	ldi	r24, 0x40	; 64
    4392:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4396:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    439a:	e1 11       	cpse	r30, r1
    439c:	07 c0       	rjmp	.+14     	; 0x43ac <menuParentMenuToLCD+0x1c>
    439e:	6a e3       	ldi	r22, 0x3A	; 58
    43a0:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    43a4:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    43a8:	d8 cf       	rjmp	.-80     	; 0x435a <menuTextOut>
    43aa:	08 95       	ret
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	31 97       	sbiw	r30, 0x01	; 1
    43b0:	ee 0f       	add	r30, r30
    43b2:	ff 1f       	adc	r31, r31
    43b4:	e5 58       	subi	r30, 0x85	; 133
    43b6:	fa 4f       	sbci	r31, 0xFA	; 250
    43b8:	80 81       	ld	r24, Z
    43ba:	91 81       	ldd	r25, Z+1	; 0x01
    43bc:	6a e3       	ldi	r22, 0x3A	; 58
    43be:	02 96       	adiw	r24, 0x02	; 2
    43c0:	cc cf       	rjmp	.-104    	; 0x435a <menuTextOut>
    43c2:	08 95       	ret

000043c4 <menuDisplayValue>:
    43c4:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    43c8:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    43cc:	84 91       	lpm	r24, Z
    43ce:	8f 73       	andi	r24, 0x3F	; 63
    43d0:	90 e0       	ldi	r25, 0x00	; 0
    43d2:	02 97       	sbiw	r24, 0x02	; 2
    43d4:	1c f0       	brlt	.+6      	; 0x43dc <menuDisplayValue+0x18>
    43d6:	c8 da       	rcall	.-2672   	; 0x3968 <dataToNibbles>
    43d8:	ba db       	rcall	.-2188   	; 0x3b4e <nibbleToLCDstring>
    43da:	07 cd       	rjmp	.-1522   	; 0x3dea <LCDStringOut>
    43dc:	08 95       	ret

000043de <menuCursorSetDataNibble>:
    43de:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    43e2:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    43e6:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    43ea:	e8 0f       	add	r30, r24
    43ec:	f1 1d       	adc	r31, r1
    43ee:	31 96       	adiw	r30, 0x01	; 1
    43f0:	84 91       	lpm	r24, Z
    43f2:	82 5e       	subi	r24, 0xE2	; 226
    43f4:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    43f8:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4402:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4406:	84 91       	lpm	r24, Z
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	28 17       	cp	r18, r24
    440e:	39 07       	cpc	r19, r25
    4410:	14 f4       	brge	.+4      	; 0x4416 <menuCursorSetDataNibble+0x38>
    4412:	68 da       	rcall	.-2864   	; 0x38e4 <softkeyRight>
    4414:	03 c0       	rjmp	.+6      	; 0x441c <menuCursorSetDataNibble+0x3e>
    4416:	83 e0       	ldi	r24, 0x03	; 3
    4418:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    441c:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4420:	88 23       	and	r24, r24
    4422:	11 f0       	breq	.+4      	; 0x4428 <menuCursorSetDataNibble+0x4a>
    4424:	59 da       	rcall	.-2894   	; 0x38d8 <softkeyLeft>
    4426:	03 c0       	rjmp	.+6      	; 0x442e <menuCursorSetDataNibble+0x50>
    4428:	82 e0       	ldi	r24, 0x02	; 2
    442a:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    442e:	78 da       	rcall	.-2832   	; 0x3920 <softkeyPlus>
    4430:	89 da       	rcall	.-2798   	; 0x3944 <softkeyMinus>
    4432:	0c 94 af 37 	jmp	0x6f5e	; 0x6f5e <keylabel_toLCD>
    4436:	08 95       	ret

00004438 <menuCursorSetExtra>:
    4438:	84 e1       	ldi	r24, 0x14	; 20
    443a:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <lcd_goto>
    443e:	08 95       	ret

00004440 <menuOnEnterStatusMidiIn>:
    4440:	0f 93       	push	r16
    4442:	1f 93       	push	r17
    4444:	cf 93       	push	r28
    4446:	f8 df       	rcall	.-16     	; 0x4438 <menuCursorSetExtra>
    4448:	8a ec       	ldi	r24, 0xCA	; 202
    444a:	93 e0       	ldi	r25, 0x03	; 3
    444c:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    4450:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <midiRxBytesCount>
    4454:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <midiRxBytesCount+0x1>
    4458:	0e 94 98 36 	call	0x6d30	; 0x6d30 <lcd_wordout>
    445c:	8d e2       	ldi	r24, 0x2D	; 45
    445e:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    4462:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <midiRxBytesCount>
    4466:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <midiRxBytesCount+0x1>
    446a:	04 97       	sbiw	r24, 0x04	; 4
    446c:	30 f4       	brcc	.+12     	; 0x447a <menuOnEnterStatusMidiIn+0x3a>
    446e:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <midiRxBytesCount>
    4472:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <midiRxBytesCount+0x1>
    4476:	c8 2f       	mov	r28, r24
    4478:	01 c0       	rjmp	.+2      	; 0x447c <menuOnEnterStatusMidiIn+0x3c>
    447a:	c4 e0       	ldi	r28, 0x04	; 4
    447c:	00 91 18 0d 	lds	r16, 0x0D18	; 0x800d18 <midiRxInIndex>
    4480:	10 e0       	ldi	r17, 0x00	; 0
    4482:	0b 50       	subi	r16, 0x0B	; 11
    4484:	14 4f       	sbci	r17, 0xF4	; 244
    4486:	13 c0       	rjmp	.+38     	; 0x44ae <menuOnEnterStatusMidiIn+0x6e>
    4488:	8b e0       	ldi	r24, 0x0B	; 11
    448a:	06 3f       	cpi	r16, 0xF6	; 246
    448c:	18 07       	cpc	r17, r24
    448e:	10 f0       	brcs	.+4      	; 0x4494 <menuOnEnterStatusMidiIn+0x54>
    4490:	f8 01       	movw	r30, r16
    4492:	02 c0       	rjmp	.+4      	; 0x4498 <menuOnEnterStatusMidiIn+0x58>
    4494:	e5 e1       	ldi	r30, 0x15	; 21
    4496:	fc e0       	ldi	r31, 0x0C	; 12
    4498:	8f 01       	movw	r16, r30
    449a:	01 50       	subi	r16, 0x01	; 1
    449c:	11 09       	sbc	r17, r1
    449e:	80 81       	ld	r24, Z
    44a0:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <lcd_hexout>
    44a4:	c1 50       	subi	r28, 0x01	; 1
    44a6:	19 f0       	breq	.+6      	; 0x44ae <menuOnEnterStatusMidiIn+0x6e>
    44a8:	80 e2       	ldi	r24, 0x20	; 32
    44aa:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    44ae:	c1 11       	cpse	r28, r1
    44b0:	eb cf       	rjmp	.-42     	; 0x4488 <menuOnEnterStatusMidiIn+0x48>
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	cf 91       	pop	r28
    44b6:	1f 91       	pop	r17
    44b8:	0f 91       	pop	r16
    44ba:	08 95       	ret

000044bc <menuOnEnterStatusMidiOut>:
    44bc:	0f 93       	push	r16
    44be:	1f 93       	push	r17
    44c0:	cf 93       	push	r28
    44c2:	ba df       	rcall	.-140    	; 0x4438 <menuCursorSetExtra>
    44c4:	85 ec       	ldi	r24, 0xC5	; 197
    44c6:	93 e0       	ldi	r25, 0x03	; 3
    44c8:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    44cc:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <midiTxBytesCount>
    44d0:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <midiTxBytesCount+0x1>
    44d4:	0e 94 98 36 	call	0x6d30	; 0x6d30 <lcd_wordout>
    44d8:	8d e2       	ldi	r24, 0x2D	; 45
    44da:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    44de:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <midiTxBytesCount>
    44e2:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <midiTxBytesCount+0x1>
    44e6:	04 97       	sbiw	r24, 0x04	; 4
    44e8:	30 f4       	brcc	.+12     	; 0x44f6 <menuOnEnterStatusMidiOut+0x3a>
    44ea:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <midiTxBytesCount>
    44ee:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <midiTxBytesCount+0x1>
    44f2:	c8 2f       	mov	r28, r24
    44f4:	01 c0       	rjmp	.+2      	; 0x44f8 <menuOnEnterStatusMidiOut+0x3c>
    44f6:	c4 e0       	ldi	r28, 0x04	; 4
    44f8:	00 91 eb 0b 	lds	r16, 0x0BEB	; 0x800beb <midiTxInIndex>
    44fc:	10 e0       	ldi	r17, 0x00	; 0
    44fe:	0b 5e       	subi	r16, 0xEB	; 235
    4500:	13 4f       	sbci	r17, 0xF3	; 243
    4502:	13 c0       	rjmp	.+38     	; 0x452a <menuOnEnterStatusMidiOut+0x6e>
    4504:	8c e0       	ldi	r24, 0x0C	; 12
    4506:	06 31       	cpi	r16, 0x16	; 22
    4508:	18 07       	cpc	r17, r24
    450a:	10 f0       	brcs	.+4      	; 0x4510 <menuOnEnterStatusMidiOut+0x54>
    450c:	f8 01       	movw	r30, r16
    450e:	02 c0       	rjmp	.+4      	; 0x4514 <menuOnEnterStatusMidiOut+0x58>
    4510:	e5 e1       	ldi	r30, 0x15	; 21
    4512:	fd e0       	ldi	r31, 0x0D	; 13
    4514:	8f 01       	movw	r16, r30
    4516:	01 50       	subi	r16, 0x01	; 1
    4518:	11 09       	sbc	r17, r1
    451a:	80 81       	ld	r24, Z
    451c:	0e 94 1d 35 	call	0x6a3a	; 0x6a3a <lcd_hexout>
    4520:	c1 50       	subi	r28, 0x01	; 1
    4522:	19 f0       	breq	.+6      	; 0x452a <menuOnEnterStatusMidiOut+0x6e>
    4524:	80 e2       	ldi	r24, 0x20	; 32
    4526:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    452a:	c1 11       	cpse	r28, r1
    452c:	eb cf       	rjmp	.-42     	; 0x4504 <menuOnEnterStatusMidiOut+0x48>
    452e:	80 e0       	ldi	r24, 0x00	; 0
    4530:	cf 91       	pop	r28
    4532:	1f 91       	pop	r17
    4534:	0f 91       	pop	r16
    4536:	08 95       	ret

00004538 <menuOnEnterLogDisp>:
    4538:	0f 93       	push	r16
    453a:	1f 93       	push	r17
    453c:	cf 93       	push	r28
    453e:	8f 3f       	cpi	r24, 0xFF	; 255
    4540:	a9 f4       	brne	.+42     	; 0x456c <menuOnEnterLogDisp+0x34>
    4542:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <log_count>
    4546:	81 50       	subi	r24, 0x01	; 1
    4548:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2972>
    454c:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.2973>
    4550:	67 ea       	ldi	r22, 0xA7	; 167
    4552:	71 e1       	ldi	r23, 0x11	; 17
    4554:	80 e0       	ldi	r24, 0x00	; 0
    4556:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    455a:	61 ea       	ldi	r22, 0xA1	; 161
    455c:	71 e1       	ldi	r23, 0x11	; 17
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    4564:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
    4568:	cf ef       	ldi	r28, 0xFF	; 255
    456a:	2f c0       	rjmp	.+94     	; 0x45ca <menuOnEnterLogDisp+0x92>
    456c:	84 30       	cpi	r24, 0x04	; 4
    456e:	49 f4       	brne	.+18     	; 0x4582 <menuOnEnterLogDisp+0x4a>
    4570:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2972>
    4574:	88 23       	and	r24, r24
    4576:	21 f1       	breq	.+72     	; 0x45c0 <menuOnEnterLogDisp+0x88>
    4578:	81 50       	subi	r24, 0x01	; 1
    457a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2972>
    457e:	cf ef       	ldi	r28, 0xFF	; 255
    4580:	24 c0       	rjmp	.+72     	; 0x45ca <menuOnEnterLogDisp+0x92>
    4582:	81 30       	cpi	r24, 0x01	; 1
    4584:	91 f4       	brne	.+36     	; 0x45aa <menuOnEnterLogDisp+0x72>
    4586:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2972>
    458a:	10 e0       	ldi	r17, 0x00	; 0
    458c:	0f 5f       	subi	r16, 0xFF	; 255
    458e:	1f 4f       	sbci	r17, 0xFF	; 255
    4590:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <log_count>
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	08 17       	cp	r16, r24
    4598:	19 07       	cpc	r17, r25
    459a:	a4 f4       	brge	.+40     	; 0x45c4 <menuOnEnterLogDisp+0x8c>
    459c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2972>
    45a0:	8f 5f       	subi	r24, 0xFF	; 255
    45a2:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2972>
    45a6:	cf ef       	ldi	r28, 0xFF	; 255
    45a8:	10 c0       	rjmp	.+32     	; 0x45ca <menuOnEnterLogDisp+0x92>
    45aa:	83 30       	cpi	r24, 0x03	; 3
    45ac:	11 f0       	breq	.+4      	; 0x45b2 <menuOnEnterLogDisp+0x7a>
    45ae:	85 30       	cpi	r24, 0x05	; 5
    45b0:	59 f4       	brne	.+22     	; 0x45c8 <menuOnEnterLogDisp+0x90>
    45b2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2973>
    45b6:	80 95       	com	r24
    45b8:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.2973>
    45bc:	cf ef       	ldi	r28, 0xFF	; 255
    45be:	05 c0       	rjmp	.+10     	; 0x45ca <menuOnEnterLogDisp+0x92>
    45c0:	cf ef       	ldi	r28, 0xFF	; 255
    45c2:	03 c0       	rjmp	.+6      	; 0x45ca <menuOnEnterLogDisp+0x92>
    45c4:	cf ef       	ldi	r28, 0xFF	; 255
    45c6:	01 c0       	rjmp	.+2      	; 0x45ca <menuOnEnterLogDisp+0x92>
    45c8:	c0 e0       	ldi	r28, 0x00	; 0
    45ca:	cf 3f       	cpi	r28, 0xFF	; 255
    45cc:	09 f0       	breq	.+2      	; 0x45d0 <menuOnEnterLogDisp+0x98>
    45ce:	54 c0       	rjmp	.+168    	; 0x4678 <menuOnEnterLogDisp+0x140>
    45d0:	33 df       	rcall	.-410    	; 0x4438 <menuCursorSetExtra>
    45d2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <log_count>
    45d6:	81 11       	cpse	r24, r1
    45d8:	06 c0       	rjmp	.+12     	; 0x45e6 <menuOnEnterLogDisp+0xae>
    45da:	85 e7       	ldi	r24, 0x75	; 117
    45dc:	93 e0       	ldi	r25, 0x03	; 3
    45de:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    45e2:	c0 e0       	ldi	r28, 0x00	; 0
    45e4:	1d c0       	rjmp	.+58     	; 0x4620 <menuOnEnterLogDisp+0xe8>
    45e6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2972>
    45ea:	8f 5f       	subi	r24, 0xFF	; 255
    45ec:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <lcd_dec2out>
    45f0:	8a e3       	ldi	r24, 0x3A	; 58
    45f2:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    45f6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2973>
    45fa:	81 11       	cpse	r24, r1
    45fc:	08 c0       	rjmp	.+16     	; 0x460e <menuOnEnterLogDisp+0xd6>
    45fe:	60 e2       	ldi	r22, 0x20	; 32
    4600:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2972>
    4604:	0e 94 7a 14 	call	0x28f4	; 0x28f4 <log_getShortTextFromIndex>
    4608:	0e 94 ae 12 	call	0x255c	; 0x255c <lcd_puts>
    460c:	06 c0       	rjmp	.+12     	; 0x461a <menuOnEnterLogDisp+0xe2>
    460e:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2972>
    4612:	0e 94 20 13 	call	0x2640	; 0x2640 <log_getErrorText>
    4616:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    461a:	0e 94 20 37 	call	0x6e40	; 0x6e40 <lcd_clrEol>
    461e:	0c df       	rcall	.-488    	; 0x4438 <menuCursorSetExtra>
    4620:	61 e0       	ldi	r22, 0x01	; 1
    4622:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2973>
    4626:	8f 3f       	cpi	r24, 0xFF	; 255
    4628:	09 f0       	breq	.+2      	; 0x462c <menuOnEnterLogDisp+0xf4>
    462a:	60 e0       	ldi	r22, 0x00	; 0
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <keylabel_statcheck>
    4632:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2972>
    4636:	10 e0       	ldi	r17, 0x00	; 0
    4638:	0f 5f       	subi	r16, 0xFF	; 255
    463a:	1f 4f       	sbci	r17, 0xFF	; 255
    463c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <log_count>
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	08 17       	cp	r16, r24
    4644:	19 07       	cpc	r17, r25
    4646:	34 f4       	brge	.+12     	; 0x4654 <menuOnEnterLogDisp+0x11c>
    4648:	61 ec       	ldi	r22, 0xC1	; 193
    464a:	71 e1       	ldi	r23, 0x11	; 17
    464c:	83 e0       	ldi	r24, 0x03	; 3
    464e:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    4652:	03 c0       	rjmp	.+6      	; 0x465a <menuOnEnterLogDisp+0x122>
    4654:	83 e0       	ldi	r24, 0x03	; 3
    4656:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    465a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2972>
    465e:	88 23       	and	r24, r24
    4660:	31 f0       	breq	.+12     	; 0x466e <menuOnEnterLogDisp+0x136>
    4662:	6f eb       	ldi	r22, 0xBF	; 191
    4664:	71 e1       	ldi	r23, 0x11	; 17
    4666:	82 e0       	ldi	r24, 0x02	; 2
    4668:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
    466c:	03 c0       	rjmp	.+6      	; 0x4674 <menuOnEnterLogDisp+0x13c>
    466e:	82 e0       	ldi	r24, 0x02	; 2
    4670:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    4674:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
    4678:	8c 2f       	mov	r24, r28
    467a:	cf 91       	pop	r28
    467c:	1f 91       	pop	r17
    467e:	0f 91       	pop	r16
    4680:	08 95       	ret

00004682 <menuCursorSetMenu>:
    4682:	8a e4       	ldi	r24, 0x4A	; 74
    4684:	0c 94 4c 12 	jmp	0x2498	; 0x2498 <lcd_goto>
    4688:	08 95       	ret

0000468a <menuClearExtraDisp>:
    468a:	d6 de       	rcall	.-596    	; 0x4438 <menuCursorSetExtra>
    468c:	8a e0       	ldi	r24, 0x0A	; 10
    468e:	0c 94 14 37 	jmp	0x6e28	; 0x6e28 <lcd_blank>
    4692:	08 95       	ret

00004694 <menu_ClearDataDisp>:
    4694:	8e e1       	ldi	r24, 0x1E	; 30
    4696:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    469a:	8a e0       	ldi	r24, 0x0A	; 10
    469c:	0c 94 14 37 	jmp	0x6e28	; 0x6e28 <lcd_blank>
    46a0:	08 95       	ret

000046a2 <menuClearMenuDisp>:
    46a2:	80 e4       	ldi	r24, 0x40	; 64
    46a4:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    46a8:	8a e0       	ldi	r24, 0x0A	; 10
    46aa:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
    46ae:	e9 df       	rcall	.-46     	; 0x4682 <menuCursorSetMenu>
    46b0:	8a e0       	ldi	r24, 0x0A	; 10
    46b2:	0c 94 14 37 	jmp	0x6e28	; 0x6e28 <lcd_blank>
    46b6:	08 95       	ret

000046b8 <menu_ClearAllDisp>:
    46b8:	f4 df       	rcall	.-24     	; 0x46a2 <menuClearMenuDisp>
    46ba:	ec df       	rcall	.-40     	; 0x4694 <menu_ClearDataDisp>
    46bc:	e6 cf       	rjmp	.-52     	; 0x468a <menuClearExtraDisp>
    46be:	08 95       	ret

000046c0 <menuCheckArrowDown>:
    46c0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    46c4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    46c8:	84 91       	lpm	r24, Z
    46ca:	8f 73       	andi	r24, 0x3F	; 63
    46cc:	81 30       	cpi	r24, 0x01	; 1
    46ce:	11 f4       	brne	.+4      	; 0x46d4 <menuCheckArrowDown+0x14>
    46d0:	0f c9       	rjmp	.-3554   	; 0x38f0 <softkeyDown>
    46d2:	08 95       	ret
    46d4:	3e 96       	adiw	r30, 0x0e	; 14
    46d6:	05 90       	lpm	r0, Z+
    46d8:	f4 91       	lpm	r31, Z
    46da:	e0 2d       	mov	r30, r0
    46dc:	30 97       	sbiw	r30, 0x00	; 0
    46de:	59 f0       	breq	.+22     	; 0x46f6 <menuCheckArrowDown+0x36>
    46e0:	89 30       	cpi	r24, 0x09	; 9
    46e2:	39 f4       	brne	.+14     	; 0x46f2 <menuCheckArrowDown+0x32>
    46e4:	80 81       	ld	r24, Z
    46e6:	81 11       	cpse	r24, r1
    46e8:	02 c0       	rjmp	.+4      	; 0x46ee <menuCheckArrowDown+0x2e>
    46ea:	08 c9       	rjmp	.-3568   	; 0x38fc <softkeyOn>
    46ec:	08 95       	ret
    46ee:	0c c9       	rjmp	.-3560   	; 0x3908 <softkeyOff>
    46f0:	08 95       	ret
    46f2:	fe c8       	rjmp	.-3588   	; 0x38f0 <softkeyDown>
    46f4:	08 95       	ret
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <keylabel_clr>
    46fc:	08 95       	ret

000046fe <menuCurrMenuToLCD>:
    46fe:	cf 93       	push	r28
    4700:	89 e4       	ldi	r24, 0x49	; 73
    4702:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4706:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    470a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    470e:	c4 91       	lpm	r28, Z
    4710:	c0 7c       	andi	r28, 0xC0	; 192
    4712:	c0 38       	cpi	r28, 0x80	; 128
    4714:	39 f4       	brne	.+14     	; 0x4724 <menuCurrMenuToLCD+0x26>
    4716:	80 e2       	ldi	r24, 0x20	; 32
    4718:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    471c:	82 e0       	ldi	r24, 0x02	; 2
    471e:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    4722:	04 c0       	rjmp	.+8      	; 0x472c <menuCurrMenuToLCD+0x2e>
    4724:	8f e7       	ldi	r24, 0x7F	; 127
    4726:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    472a:	d6 d8       	rcall	.-3668   	; 0x38d8 <softkeyLeft>
    472c:	c0 3c       	cpi	r28, 0xC0	; 192
    472e:	29 f4       	brne	.+10     	; 0x473a <menuCurrMenuToLCD+0x3c>
    4730:	83 e0       	ldi	r24, 0x03	; 3
    4732:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    4736:	c0 e2       	ldi	r28, 0x20	; 32
    4738:	02 c0       	rjmp	.+4      	; 0x473e <menuCurrMenuToLCD+0x40>
    473a:	d4 d8       	rcall	.-3672   	; 0x38e4 <softkeyRight>
    473c:	ce e7       	ldi	r28, 0x7E	; 126
    473e:	ea d8       	rcall	.-3628   	; 0x3914 <softkeyUp>
    4740:	bf df       	rcall	.-130    	; 0x46c0 <menuCheckArrowDown>
    4742:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4746:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    474a:	6c 2f       	mov	r22, r28
    474c:	02 96       	adiw	r24, 0x02	; 2
    474e:	05 de       	rcall	.-1014   	; 0x435a <menuTextOut>
    4750:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
    4754:	96 df       	rcall	.-212    	; 0x4682 <menuCursorSetMenu>
    4756:	cf 91       	pop	r28
    4758:	08 95       	ret

0000475a <menuItemChanged>:
    475a:	8f ef       	ldi	r24, 0xFF	; 255
    475c:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4760:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4764:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4768:	fc 01       	movw	r30, r24
    476a:	24 91       	lpm	r18, Z
    476c:	62 2f       	mov	r22, r18
    476e:	6f 73       	andi	r22, 0x3F	; 63
    4770:	62 30       	cpi	r22, 0x02	; 2
    4772:	08 f4       	brcc	.+2      	; 0x4776 <menuItemChanged+0x1c>
    4774:	49 c0       	rjmp	.+146    	; 0x4808 <menuItemChanged+0xae>
    4776:	9c 01       	movw	r18, r24
    4778:	22 5f       	subi	r18, 0xF2	; 242
    477a:	3f 4f       	sbci	r19, 0xFF	; 255
    477c:	f9 01       	movw	r30, r18
    477e:	45 91       	lpm	r20, Z+
    4780:	55 91       	lpm	r21, Z+
    4782:	41 15       	cp	r20, r1
    4784:	51 05       	cpc	r21, r1
    4786:	09 f4       	brne	.+2      	; 0x478a <menuItemChanged+0x30>
    4788:	3f c0       	rjmp	.+126    	; 0x4808 <menuItemChanged+0xae>
    478a:	e6 2f       	mov	r30, r22
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	31 97       	sbiw	r30, 0x01	; 1
    4790:	9f 01       	movw	r18, r30
    4792:	22 0f       	add	r18, r18
    4794:	33 1f       	adc	r19, r19
    4796:	22 0f       	add	r18, r18
    4798:	33 1f       	adc	r19, r19
    479a:	22 0f       	add	r18, r18
    479c:	33 1f       	adc	r19, r19
    479e:	e2 0f       	add	r30, r18
    47a0:	f3 1f       	adc	r31, r19
    47a2:	e8 52       	subi	r30, 0x28	; 40
    47a4:	fc 4f       	sbci	r31, 0xFC	; 252
    47a6:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    47aa:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    47ae:	24 91       	lpm	r18, Z
    47b0:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    47b4:	fc 01       	movw	r30, r24
    47b6:	25 91       	lpm	r18, Z+
    47b8:	2f 73       	andi	r18, 0x3F	; 63
    47ba:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    47be:	24 91       	lpm	r18, Z
    47c0:	22 23       	and	r18, r18
    47c2:	2c f4       	brge	.+10     	; 0x47ce <menuItemChanged+0x74>
    47c4:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    47c8:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    47cc:	02 c0       	rjmp	.+4      	; 0x47d2 <menuItemChanged+0x78>
    47ce:	20 e0       	ldi	r18, 0x00	; 0
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	24 0f       	add	r18, r20
    47d4:	35 1f       	adc	r19, r21
    47d6:	fc 01       	movw	r30, r24
    47d8:	84 91       	lpm	r24, Z
    47da:	8f 73       	andi	r24, 0x3F	; 63
    47dc:	8b 30       	cpi	r24, 0x0B	; 11
    47de:	71 f4       	brne	.+28     	; 0x47fc <menuItemChanged+0xa2>
    47e0:	f9 01       	movw	r30, r18
    47e2:	80 81       	ld	r24, Z
    47e4:	91 81       	ldd	r25, Z+1	; 0x01
    47e6:	a2 81       	ldd	r26, Z+2	; 0x02
    47e8:	b3 81       	ldd	r27, Z+3	; 0x03
    47ea:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    47ee:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    47f2:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    47f6:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    47fa:	04 c0       	rjmp	.+8      	; 0x4804 <menuItemChanged+0xaa>
    47fc:	f9 01       	movw	r30, r18
    47fe:	80 81       	ld	r24, Z
    4800:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4804:	df dd       	rcall	.-1090   	; 0x43c4 <menuDisplayValue>
    4806:	07 c0       	rjmp	.+14     	; 0x4816 <menuItemChanged+0xbc>
    4808:	45 df       	rcall	.-374    	; 0x4694 <menu_ClearDataDisp>
    480a:	88 ed       	ldi	r24, 0xD8	; 216
    480c:	93 e0       	ldi	r25, 0x03	; 3
    480e:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    4812:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4816:	54 df       	rcall	.-344    	; 0x46c0 <menuCheckArrowDown>
    4818:	34 cf       	rjmp	.-408    	; 0x4682 <menuCursorSetMenu>
    481a:	08 95       	ret

0000481c <menu_InitLCD>:
    481c:	36 df       	rcall	.-404    	; 0x468a <menuClearExtraDisp>
    481e:	9d df       	rcall	.-198    	; 0x475a <menuItemChanged>
    4820:	b7 dd       	rcall	.-1170   	; 0x4390 <menuParentMenuToLCD>
    4822:	6d df       	rcall	.-294    	; 0x46fe <menuCurrMenuToLCD>
    4824:	0c 94 37 37 	jmp	0x6e6e	; 0x6e6e <lcd_cursosblink>
    4828:	08 95       	ret

0000482a <menu_ProcessMessage>:
    482a:	cf 93       	push	r28
    482c:	c8 2f       	mov	r28, r24
    482e:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <lcd_cursosblink>
    4832:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4836:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    483a:	84 91       	lpm	r24, Z
    483c:	8f 73       	andi	r24, 0x3F	; 63
    483e:	81 30       	cpi	r24, 0x01	; 1
    4840:	29 f0       	breq	.+10     	; 0x484c <menu_ProcessMessage+0x22>
    4842:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4846:	8f 3f       	cpi	r24, 0xFF	; 255
    4848:	09 f0       	breq	.+2      	; 0x484c <menu_ProcessMessage+0x22>
    484a:	68 c1       	rjmp	.+720    	; 0x4b1c <menu_ProcessMessage+0x2f2>
    484c:	31 96       	adiw	r30, 0x01	; 1
    484e:	84 91       	lpm	r24, Z
    4850:	86 ff       	sbrs	r24, 6
    4852:	02 c0       	rjmp	.+4      	; 0x4858 <menu_ProcessMessage+0x2e>
    4854:	1a df       	rcall	.-460    	; 0x468a <menuClearExtraDisp>
    4856:	15 df       	rcall	.-470    	; 0x4682 <menuCursorSetMenu>
    4858:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    485c:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4860:	cb 01       	movw	r24, r22
    4862:	01 96       	adiw	r24, 0x01	; 1
    4864:	fc 01       	movw	r30, r24
    4866:	84 91       	lpm	r24, Z
    4868:	98 2f       	mov	r25, r24
    486a:	90 72       	andi	r25, 0x20	; 32
    486c:	85 ff       	sbrs	r24, 5
    486e:	1f c0       	rjmp	.+62     	; 0x48ae <menu_ProcessMessage+0x84>
    4870:	9b 01       	movw	r18, r22
    4872:	20 5f       	subi	r18, 0xF0	; 240
    4874:	3f 4f       	sbci	r19, 0xFF	; 255
    4876:	f9 01       	movw	r30, r18
    4878:	25 91       	lpm	r18, Z+
    487a:	35 91       	lpm	r19, Z+
    487c:	21 15       	cp	r18, r1
    487e:	31 05       	cpc	r19, r1
    4880:	b1 f0       	breq	.+44     	; 0x48ae <menu_ProcessMessage+0x84>
    4882:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4886:	4f 3f       	cpi	r20, 0xFF	; 255
    4888:	91 f0       	breq	.+36     	; 0x48ae <menu_ProcessMessage+0x84>
    488a:	8c 2f       	mov	r24, r28
    488c:	f9 01       	movw	r30, r18
    488e:	19 95       	eicall
    4890:	8f 3f       	cpi	r24, 0xFF	; 255
    4892:	21 f4       	brne	.+8      	; 0x489c <menu_ProcessMessage+0x72>
    4894:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4898:	80 e0       	ldi	r24, 0x00	; 0
    489a:	04 c2       	rjmp	.+1032   	; 0x4ca4 <menu_ProcessMessage+0x47a>
    489c:	f6 de       	rcall	.-532    	; 0x468a <menuClearExtraDisp>
    489e:	fa de       	rcall	.-524    	; 0x4694 <menu_ClearDataDisp>
    48a0:	f0 de       	rcall	.-544    	; 0x4682 <menuCursorSetMenu>
    48a2:	8f ef       	ldi	r24, 0xFF	; 255
    48a4:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    48a8:	2a df       	rcall	.-428    	; 0x46fe <menuCurrMenuToLCD>
    48aa:	80 e0       	ldi	r24, 0x00	; 0
    48ac:	fb c1       	rjmp	.+1014   	; 0x4ca4 <menu_ProcessMessage+0x47a>
    48ae:	c3 30       	cpi	r28, 0x03	; 3
    48b0:	09 f4       	brne	.+2      	; 0x48b4 <menu_ProcessMessage+0x8a>
    48b2:	64 c0       	rjmp	.+200    	; 0x497c <menu_ProcessMessage+0x152>
    48b4:	28 f4       	brcc	.+10     	; 0x48c0 <menu_ProcessMessage+0x96>
    48b6:	c1 30       	cpi	r28, 0x01	; 1
    48b8:	51 f0       	breq	.+20     	; 0x48ce <menu_ProcessMessage+0xa4>
    48ba:	c2 30       	cpi	r28, 0x02	; 2
    48bc:	31 f1       	breq	.+76     	; 0x490a <menu_ProcessMessage+0xe0>
    48be:	db c1       	rjmp	.+950    	; 0x4c76 <menu_ProcessMessage+0x44c>
    48c0:	c5 30       	cpi	r28, 0x05	; 5
    48c2:	09 f4       	brne	.+2      	; 0x48c6 <menu_ProcessMessage+0x9c>
    48c4:	5b c0       	rjmp	.+182    	; 0x497c <menu_ProcessMessage+0x152>
    48c6:	90 f0       	brcs	.+36     	; 0x48ec <menu_ProcessMessage+0xc2>
    48c8:	c6 30       	cpi	r28, 0x06	; 6
    48ca:	f9 f0       	breq	.+62     	; 0x490a <menu_ProcessMessage+0xe0>
    48cc:	d4 c1       	rjmp	.+936    	; 0x4c76 <menu_ProcessMessage+0x44c>
    48ce:	fb 01       	movw	r30, r22
    48d0:	84 91       	lpm	r24, Z
    48d2:	80 7c       	andi	r24, 0xC0	; 192
    48d4:	80 3c       	cpi	r24, 0xC0	; 192
    48d6:	09 f4       	brne	.+2      	; 0x48da <menu_ProcessMessage+0xb0>
    48d8:	d0 c1       	rjmp	.+928    	; 0x4c7a <menu_ProcessMessage+0x450>
    48da:	74 96       	adiw	r30, 0x14	; 20
    48dc:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    48e0:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    48e4:	3a df       	rcall	.-396    	; 0x475a <menuItemChanged>
    48e6:	0b df       	rcall	.-490    	; 0x46fe <menuCurrMenuToLCD>
    48e8:	80 e0       	ldi	r24, 0x00	; 0
    48ea:	dc c1       	rjmp	.+952    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    48ec:	fb 01       	movw	r30, r22
    48ee:	84 91       	lpm	r24, Z
    48f0:	80 7c       	andi	r24, 0xC0	; 192
    48f2:	80 38       	cpi	r24, 0x80	; 128
    48f4:	09 f4       	brne	.+2      	; 0x48f8 <menu_ProcessMessage+0xce>
    48f6:	c3 c1       	rjmp	.+902    	; 0x4c7e <menu_ProcessMessage+0x454>
    48f8:	74 97       	sbiw	r30, 0x14	; 20
    48fa:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    48fe:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4902:	2b df       	rcall	.-426    	; 0x475a <menuItemChanged>
    4904:	fc de       	rcall	.-520    	; 0x46fe <menuCurrMenuToLCD>
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	cd c1       	rjmp	.+922    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    490a:	84 ff       	sbrs	r24, 4
    490c:	04 c0       	rjmp	.+8      	; 0x4916 <menu_ProcessMessage+0xec>
    490e:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4912:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4916:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    491a:	ee 23       	and	r30, r30
    491c:	e9 f0       	breq	.+58     	; 0x4958 <menu_ProcessMessage+0x12e>
    491e:	e1 50       	subi	r30, 0x01	; 1
    4920:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4924:	f0 e0       	ldi	r31, 0x00	; 0
    4926:	ee 0f       	add	r30, r30
    4928:	ff 1f       	adc	r31, r31
    492a:	e5 58       	subi	r30, 0x85	; 133
    492c:	fa 4f       	sbci	r31, 0xFA	; 250
    492e:	01 90       	ld	r0, Z+
    4930:	f0 81       	ld	r31, Z
    4932:	e0 2d       	mov	r30, r0
    4934:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4938:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    493c:	72 96       	adiw	r30, 0x12	; 18
    493e:	05 90       	lpm	r0, Z+
    4940:	f4 91       	lpm	r31, Z
    4942:	e0 2d       	mov	r30, r0
    4944:	30 97       	sbiw	r30, 0x00	; 0
    4946:	11 f0       	breq	.+4      	; 0x494c <menu_ProcessMessage+0x122>
    4948:	80 e0       	ldi	r24, 0x00	; 0
    494a:	19 95       	eicall
    494c:	9e de       	rcall	.-708    	; 0x468a <menuClearExtraDisp>
    494e:	20 dd       	rcall	.-1472   	; 0x4390 <menuParentMenuToLCD>
    4950:	d6 de       	rcall	.-596    	; 0x46fe <menuCurrMenuToLCD>
    4952:	03 df       	rcall	.-506    	; 0x475a <menuItemChanged>
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	a6 c1       	rjmp	.+844    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    4964:	82 e0       	ldi	r24, 0x02	; 2
    4966:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    496a:	83 e0       	ldi	r24, 0x03	; 3
    496c:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    4970:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
    4974:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <lcd_cursoroff>
    4978:	8f ef       	ldi	r24, 0xFF	; 255
    497a:	94 c1       	rjmp	.+808    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    497c:	fb 01       	movw	r30, r22
    497e:	24 91       	lpm	r18, Z
    4980:	2f 73       	andi	r18, 0x3F	; 63
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	22 30       	cpi	r18, 0x02	; 2
    4986:	31 05       	cpc	r19, r1
    4988:	0c f4       	brge	.+2      	; 0x498c <menu_ProcessMessage+0x162>
    498a:	48 c0       	rjmp	.+144    	; 0x4a1c <menu_ProcessMessage+0x1f2>
    498c:	70 96       	adiw	r30, 0x10	; 16
    498e:	05 90       	lpm	r0, Z+
    4990:	f4 91       	lpm	r31, Z
    4992:	e0 2d       	mov	r30, r0
    4994:	30 97       	sbiw	r30, 0x00	; 0
    4996:	19 f0       	breq	.+6      	; 0x499e <menu_ProcessMessage+0x174>
    4998:	8c 2f       	mov	r24, r28
    499a:	19 95       	eicall
    499c:	de de       	rcall	.-580    	; 0x475a <menuItemChanged>
    499e:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    49a2:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    49a6:	c9 01       	movw	r24, r18
    49a8:	01 96       	adiw	r24, 0x01	; 1
    49aa:	fc 01       	movw	r30, r24
    49ac:	84 91       	lpm	r24, Z
    49ae:	83 fd       	sbrc	r24, 3
    49b0:	68 c1       	rjmp	.+720    	; 0x4c82 <menu_ProcessMessage+0x458>
    49b2:	c9 01       	movw	r24, r18
    49b4:	0e 96       	adiw	r24, 0x0e	; 14
    49b6:	fc 01       	movw	r30, r24
    49b8:	85 91       	lpm	r24, Z+
    49ba:	95 91       	lpm	r25, Z+
    49bc:	89 2b       	or	r24, r25
    49be:	09 f4       	brne	.+2      	; 0x49c2 <menu_ProcessMessage+0x198>
    49c0:	62 c1       	rjmp	.+708    	; 0x4c86 <menu_ProcessMessage+0x45c>
    49c2:	f9 01       	movw	r30, r18
    49c4:	84 91       	lpm	r24, Z
    49c6:	8f 73       	andi	r24, 0x3F	; 63
    49c8:	89 30       	cpi	r24, 0x09	; 9
    49ca:	19 f5       	brne	.+70     	; 0x4a12 <menu_ProcessMessage+0x1e8>
    49cc:	61 e0       	ldi	r22, 0x01	; 1
    49ce:	80 e0       	ldi	r24, 0x00	; 0
    49d0:	30 da       	rcall	.-2976   	; 0x3e32 <nibbleChange>
    49d2:	de db       	rcall	.-2116   	; 0x4190 <nibbleToData>
    49d4:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    49d8:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    49dc:	3e 96       	adiw	r30, 0x0e	; 14
    49de:	05 90       	lpm	r0, Z+
    49e0:	f4 91       	lpm	r31, Z
    49e2:	e0 2d       	mov	r30, r0
    49e4:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    49e8:	80 83       	st	Z, r24
    49ea:	ec dc       	rcall	.-1576   	; 0x43c4 <menuDisplayValue>
    49ec:	69 de       	rcall	.-814    	; 0x46c0 <menuCheckArrowDown>
    49ee:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
    49f2:	47 de       	rcall	.-882    	; 0x4682 <menuCursorSetMenu>
    49f4:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    49f8:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    49fc:	72 96       	adiw	r30, 0x12	; 18
    49fe:	05 90       	lpm	r0, Z+
    4a00:	f4 91       	lpm	r31, Z
    4a02:	e0 2d       	mov	r30, r0
    4a04:	30 97       	sbiw	r30, 0x00	; 0
    4a06:	09 f4       	brne	.+2      	; 0x4a0a <menu_ProcessMessage+0x1e0>
    4a08:	40 c1       	rjmp	.+640    	; 0x4c8a <menu_ProcessMessage+0x460>
    4a0a:	80 e0       	ldi	r24, 0x00	; 0
    4a0c:	19 95       	eicall
    4a0e:	80 e0       	ldi	r24, 0x00	; 0
    4a10:	49 c1       	rjmp	.+658    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4a12:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4a16:	e3 dc       	rcall	.-1594   	; 0x43de <menuCursorSetDataNibble>
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	44 c1       	rjmp	.+648    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4a1c:	2f ef       	ldi	r18, 0xFF	; 255
    4a1e:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4a22:	84 ff       	sbrs	r24, 4
    4a24:	26 c0       	rjmp	.+76     	; 0x4a72 <menu_ProcessMessage+0x248>
    4a26:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4a2a:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4a2e:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4a32:	ee 23       	and	r30, r30
    4a34:	09 f4       	brne	.+2      	; 0x4a38 <menu_ProcessMessage+0x20e>
    4a36:	2b c1       	rjmp	.+598    	; 0x4c8e <menu_ProcessMessage+0x464>
    4a38:	e1 50       	subi	r30, 0x01	; 1
    4a3a:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4a3e:	f0 e0       	ldi	r31, 0x00	; 0
    4a40:	ee 0f       	add	r30, r30
    4a42:	ff 1f       	adc	r31, r31
    4a44:	e5 58       	subi	r30, 0x85	; 133
    4a46:	fa 4f       	sbci	r31, 0xFA	; 250
    4a48:	01 90       	ld	r0, Z+
    4a4a:	f0 81       	ld	r31, Z
    4a4c:	e0 2d       	mov	r30, r0
    4a4e:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4a52:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4a56:	72 96       	adiw	r30, 0x12	; 18
    4a58:	05 90       	lpm	r0, Z+
    4a5a:	f4 91       	lpm	r31, Z
    4a5c:	e0 2d       	mov	r30, r0
    4a5e:	30 97       	sbiw	r30, 0x00	; 0
    4a60:	11 f0       	breq	.+4      	; 0x4a66 <menu_ProcessMessage+0x23c>
    4a62:	80 e0       	ldi	r24, 0x00	; 0
    4a64:	19 95       	eicall
    4a66:	11 de       	rcall	.-990    	; 0x468a <menuClearExtraDisp>
    4a68:	93 dc       	rcall	.-1754   	; 0x4390 <menuParentMenuToLCD>
    4a6a:	49 de       	rcall	.-878    	; 0x46fe <menuCurrMenuToLCD>
    4a6c:	76 de       	rcall	.-788    	; 0x475a <menuItemChanged>
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	19 c1       	rjmp	.+562    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4a72:	fb 01       	movw	r30, r22
    4a74:	70 96       	adiw	r30, 0x10	; 16
    4a76:	05 90       	lpm	r0, Z+
    4a78:	f4 91       	lpm	r31, Z
    4a7a:	e0 2d       	mov	r30, r0
    4a7c:	30 97       	sbiw	r30, 0x00	; 0
    4a7e:	99 f0       	breq	.+38     	; 0x4aa6 <menu_ProcessMessage+0x27c>
    4a80:	99 23       	and	r25, r25
    4a82:	71 f0       	breq	.+28     	; 0x4aa0 <menu_ProcessMessage+0x276>
    4a84:	8f ef       	ldi	r24, 0xFF	; 255
    4a86:	19 95       	eicall
    4a88:	8f 3f       	cpi	r24, 0xFF	; 255
    4a8a:	19 f4       	brne	.+6      	; 0x4a92 <menu_ProcessMessage+0x268>
    4a8c:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4a90:	0a c0       	rjmp	.+20     	; 0x4aa6 <menu_ProcessMessage+0x27c>
    4a92:	fb dd       	rcall	.-1034   	; 0x468a <menuClearExtraDisp>
    4a94:	ff dd       	rcall	.-1026   	; 0x4694 <menu_ClearDataDisp>
    4a96:	f5 dd       	rcall	.-1046   	; 0x4682 <menuCursorSetMenu>
    4a98:	8f ef       	ldi	r24, 0xFF	; 255
    4a9a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4a9e:	03 c0       	rjmp	.+6      	; 0x4aa6 <menu_ProcessMessage+0x27c>
    4aa0:	85 e0       	ldi	r24, 0x05	; 5
    4aa2:	19 95       	eicall
    4aa4:	ee dd       	rcall	.-1060   	; 0x4682 <menuCursorSetMenu>
    4aa6:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4aaa:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4aae:	c9 01       	movw	r24, r18
    4ab0:	0c 96       	adiw	r24, 0x0c	; 12
    4ab2:	fc 01       	movw	r30, r24
    4ab4:	85 91       	lpm	r24, Z+
    4ab6:	95 91       	lpm	r25, Z+
    4ab8:	89 2b       	or	r24, r25
    4aba:	09 f4       	brne	.+2      	; 0x4abe <menu_ProcessMessage+0x294>
    4abc:	ea c0       	rjmp	.+468    	; 0x4c92 <menu_ProcessMessage+0x468>
    4abe:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    4ac2:	a0 31       	cpi	r26, 0x10	; 16
    4ac4:	08 f0       	brcs	.+2      	; 0x4ac8 <menu_ProcessMessage+0x29e>
    4ac6:	e7 c0       	rjmp	.+462    	; 0x4c96 <menu_ProcessMessage+0x46c>
    4ac8:	81 e0       	ldi	r24, 0x01	; 1
    4aca:	8a 0f       	add	r24, r26
    4acc:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    4ad0:	b0 e0       	ldi	r27, 0x00	; 0
    4ad2:	aa 0f       	add	r26, r26
    4ad4:	bb 1f       	adc	r27, r27
    4ad6:	a5 58       	subi	r26, 0x85	; 133
    4ad8:	ba 4f       	sbci	r27, 0xFA	; 250
    4ada:	2d 93       	st	X+, r18
    4adc:	3c 93       	st	X, r19
    4ade:	c9 01       	movw	r24, r18
    4ae0:	01 96       	adiw	r24, 0x01	; 1
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	84 91       	lpm	r24, Z
    4ae6:	83 ff       	sbrs	r24, 3
    4ae8:	0b c0       	rjmp	.+22     	; 0x4b00 <menu_ProcessMessage+0x2d6>
    4aea:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    4aee:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    4af2:	00 97       	sbiw	r24, 0x00	; 0
    4af4:	29 f0       	breq	.+10     	; 0x4b00 <menu_ProcessMessage+0x2d6>
    4af6:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4afa:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4afe:	08 c0       	rjmp	.+16     	; 0x4b10 <menu_ProcessMessage+0x2e6>
    4b00:	f9 01       	movw	r30, r18
    4b02:	3c 96       	adiw	r30, 0x0c	; 12
    4b04:	85 91       	lpm	r24, Z+
    4b06:	95 91       	lpm	r25, Z+
    4b08:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4b0c:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4b10:	bc dd       	rcall	.-1160   	; 0x468a <menuClearExtraDisp>
    4b12:	3e dc       	rcall	.-1924   	; 0x4390 <menuParentMenuToLCD>
    4b14:	f4 dd       	rcall	.-1048   	; 0x46fe <menuCurrMenuToLCD>
    4b16:	21 de       	rcall	.-958    	; 0x475a <menuItemChanged>
    4b18:	80 e0       	ldi	r24, 0x00	; 0
    4b1a:	c4 c0       	rjmp	.+392    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4b1c:	c3 30       	cpi	r28, 0x03	; 3
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <menu_ProcessMessage+0x2f8>
    4b20:	49 c0       	rjmp	.+146    	; 0x4bb4 <menu_ProcessMessage+0x38a>
    4b22:	28 f4       	brcc	.+10     	; 0x4b2e <menu_ProcessMessage+0x304>
    4b24:	c1 30       	cpi	r28, 0x01	; 1
    4b26:	59 f0       	breq	.+22     	; 0x4b3e <menu_ProcessMessage+0x314>
    4b28:	c2 30       	cpi	r28, 0x02	; 2
    4b2a:	31 f1       	breq	.+76     	; 0x4b78 <menu_ProcessMessage+0x34e>
    4b2c:	b6 c0       	rjmp	.+364    	; 0x4c9a <menu_ProcessMessage+0x470>
    4b2e:	c5 30       	cpi	r28, 0x05	; 5
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <menu_ProcessMessage+0x30a>
    4b32:	5e c0       	rjmp	.+188    	; 0x4bf0 <menu_ProcessMessage+0x3c6>
    4b34:	c0 f0       	brcs	.+48     	; 0x4b66 <menu_ProcessMessage+0x33c>
    4b36:	c6 30       	cpi	r28, 0x06	; 6
    4b38:	09 f4       	brne	.+2      	; 0x4b3c <menu_ProcessMessage+0x312>
    4b3a:	8a c0       	rjmp	.+276    	; 0x4c50 <menu_ProcessMessage+0x426>
    4b3c:	ae c0       	rjmp	.+348    	; 0x4c9a <menu_ProcessMessage+0x470>
    4b3e:	48 2f       	mov	r20, r24
    4b40:	50 e0       	ldi	r21, 0x00	; 0
    4b42:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4b46:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4b4a:	24 91       	lpm	r18, Z
    4b4c:	30 e0       	ldi	r19, 0x00	; 0
    4b4e:	21 50       	subi	r18, 0x01	; 1
    4b50:	31 09       	sbc	r19, r1
    4b52:	42 17       	cp	r20, r18
    4b54:	53 07       	cpc	r21, r19
    4b56:	0c f0       	brlt	.+2      	; 0x4b5a <menu_ProcessMessage+0x330>
    4b58:	a2 c0       	rjmp	.+324    	; 0x4c9e <menu_ProcessMessage+0x474>
    4b5a:	8f 5f       	subi	r24, 0xFF	; 255
    4b5c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4b60:	3e dc       	rcall	.-1924   	; 0x43de <menuCursorSetDataNibble>
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	9f c0       	rjmp	.+318    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4b66:	88 23       	and	r24, r24
    4b68:	09 f4       	brne	.+2      	; 0x4b6c <menu_ProcessMessage+0x342>
    4b6a:	9b c0       	rjmp	.+310    	; 0x4ca2 <menu_ProcessMessage+0x478>
    4b6c:	81 50       	subi	r24, 0x01	; 1
    4b6e:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4b72:	35 dc       	rcall	.-1942   	; 0x43de <menuCursorSetDataNibble>
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	96 c0       	rjmp	.+300    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4b78:	61 e0       	ldi	r22, 0x01	; 1
    4b7a:	5b d9       	rcall	.-3402   	; 0x3e32 <nibbleChange>
    4b7c:	09 db       	rcall	.-2542   	; 0x4190 <nibbleToData>
    4b7e:	22 dc       	rcall	.-1980   	; 0x43c4 <menuDisplayValue>
    4b80:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4b84:	8a 30       	cpi	r24, 0x0A	; 10
    4b86:	11 f0       	breq	.+4      	; 0x4b8c <menu_ProcessMessage+0x362>
    4b88:	8e 30       	cpi	r24, 0x0E	; 14
    4b8a:	89 f4       	brne	.+34     	; 0x4bae <menu_ProcessMessage+0x384>
    4b8c:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4b90:	42 2f       	mov	r20, r18
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4b98:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4b9c:	84 91       	lpm	r24, Z
    4b9e:	90 e0       	ldi	r25, 0x00	; 0
    4ba0:	01 97       	sbiw	r24, 0x01	; 1
    4ba2:	48 17       	cp	r20, r24
    4ba4:	59 07       	cpc	r21, r25
    4ba6:	1c f4       	brge	.+6      	; 0x4bae <menu_ProcessMessage+0x384>
    4ba8:	2f 5f       	subi	r18, 0xFF	; 255
    4baa:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4bae:	17 dc       	rcall	.-2002   	; 0x43de <menuCursorSetDataNibble>
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	78 c0       	rjmp	.+240    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4bb4:	6f ef       	ldi	r22, 0xFF	; 255
    4bb6:	3d d9       	rcall	.-3462   	; 0x3e32 <nibbleChange>
    4bb8:	eb da       	rcall	.-2602   	; 0x4190 <nibbleToData>
    4bba:	04 dc       	rcall	.-2040   	; 0x43c4 <menuDisplayValue>
    4bbc:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4bc0:	8a 30       	cpi	r24, 0x0A	; 10
    4bc2:	11 f0       	breq	.+4      	; 0x4bc8 <menu_ProcessMessage+0x39e>
    4bc4:	8e 30       	cpi	r24, 0x0E	; 14
    4bc6:	89 f4       	brne	.+34     	; 0x4bea <menu_ProcessMessage+0x3c0>
    4bc8:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4bcc:	42 2f       	mov	r20, r18
    4bce:	50 e0       	ldi	r21, 0x00	; 0
    4bd0:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4bd4:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4bd8:	84 91       	lpm	r24, Z
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	01 97       	sbiw	r24, 0x01	; 1
    4bde:	48 17       	cp	r20, r24
    4be0:	59 07       	cpc	r21, r25
    4be2:	1c f4       	brge	.+6      	; 0x4bea <menu_ProcessMessage+0x3c0>
    4be4:	2f 5f       	subi	r18, 0xFF	; 255
    4be6:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4bea:	f9 db       	rcall	.-2062   	; 0x43de <menuCursorSetDataNibble>
    4bec:	80 e0       	ldi	r24, 0x00	; 0
    4bee:	5a c0       	rjmp	.+180    	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4bf0:	cf da       	rcall	.-2658   	; 0x4190 <nibbleToData>
    4bf2:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4bf6:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4bfa:	c9 01       	movw	r24, r18
    4bfc:	0e 96       	adiw	r24, 0x0e	; 14
    4bfe:	fc 01       	movw	r30, r24
    4c00:	a5 91       	lpm	r26, Z+
    4c02:	b5 91       	lpm	r27, Z+
    4c04:	10 97       	sbiw	r26, 0x00	; 0
    4c06:	21 f1       	breq	.+72     	; 0x4c50 <menu_ProcessMessage+0x426>
    4c08:	0d 97       	sbiw	r24, 0x0d	; 13
    4c0a:	fc 01       	movw	r30, r24
    4c0c:	84 91       	lpm	r24, Z
    4c0e:	88 23       	and	r24, r24
    4c10:	2c f4       	brge	.+10     	; 0x4c1c <menu_ProcessMessage+0x3f2>
    4c12:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4c16:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4c1a:	02 c0       	rjmp	.+4      	; 0x4c20 <menu_ProcessMessage+0x3f6>
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	a8 0f       	add	r26, r24
    4c22:	b9 1f       	adc	r27, r25
    4c24:	f9 01       	movw	r30, r18
    4c26:	84 91       	lpm	r24, Z
    4c28:	8f 73       	andi	r24, 0x3F	; 63
    4c2a:	8b 30       	cpi	r24, 0x0B	; 11
    4c2c:	71 f4       	brne	.+28     	; 0x4c4a <menu_ProcessMessage+0x420>
    4c2e:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    4c32:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    4c36:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    4c3a:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    4c3e:	4d 93       	st	X+, r20
    4c40:	5d 93       	st	X+, r21
    4c42:	6d 93       	st	X+, r22
    4c44:	7c 93       	st	X, r23
    4c46:	13 97       	sbiw	r26, 0x03	; 3
    4c48:	03 c0       	rjmp	.+6      	; 0x4c50 <menu_ProcessMessage+0x426>
    4c4a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4c4e:	8c 93       	st	X, r24
    4c50:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c54:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c58:	72 96       	adiw	r30, 0x12	; 18
    4c5a:	05 90       	lpm	r0, Z+
    4c5c:	f4 91       	lpm	r31, Z
    4c5e:	e0 2d       	mov	r30, r0
    4c60:	30 97       	sbiw	r30, 0x00	; 0
    4c62:	11 f0       	breq	.+4      	; 0x4c68 <menu_ProcessMessage+0x43e>
    4c64:	8c 2f       	mov	r24, r28
    4c66:	19 95       	eicall
    4c68:	8f ef       	ldi	r24, 0xFF	; 255
    4c6a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4c6e:	47 dd       	rcall	.-1394   	; 0x46fe <menuCurrMenuToLCD>
    4c70:	74 dd       	rcall	.-1304   	; 0x475a <menuItemChanged>
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	17 c0       	rjmp	.+46     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c76:	80 e0       	ldi	r24, 0x00	; 0
    4c78:	15 c0       	rjmp	.+42     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	13 c0       	rjmp	.+38     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c7e:	80 e0       	ldi	r24, 0x00	; 0
    4c80:	11 c0       	rjmp	.+34     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c82:	80 e0       	ldi	r24, 0x00	; 0
    4c84:	0f c0       	rjmp	.+30     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	0d c0       	rjmp	.+26     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	0b c0       	rjmp	.+22     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	09 c0       	rjmp	.+18     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	07 c0       	rjmp	.+14     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c96:	80 e0       	ldi	r24, 0x00	; 0
    4c98:	05 c0       	rjmp	.+10     	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	03 c0       	rjmp	.+6      	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4c9e:	80 e0       	ldi	r24, 0x00	; 0
    4ca0:	01 c0       	rjmp	.+2      	; 0x4ca4 <menu_ProcessMessage+0x47a>
    4ca2:	80 e0       	ldi	r24, 0x00	; 0
    4ca4:	cf 91       	pop	r28
    4ca6:	08 95       	ret

00004ca8 <displayMenuMessage_P>:
    4ca8:	0f 93       	push	r16
    4caa:	1f 93       	push	r17
    4cac:	cf 93       	push	r28
    4cae:	df 93       	push	r29
    4cb0:	ec 01       	movw	r28, r24
    4cb2:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4cb6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4cba:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cbe:	84 91       	lpm	r24, Z
    4cc0:	8f 73       	andi	r24, 0x3F	; 63
    4cc2:	81 30       	cpi	r24, 0x01	; 1
    4cc4:	91 f4       	brne	.+36     	; 0x4cea <displayMenuMessage_P+0x42>
    4cc6:	ce 01       	movw	r24, r28
    4cc8:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <get_StrLenP>
    4ccc:	24 e1       	ldi	r18, 0x14	; 20
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	a9 01       	movw	r20, r18
    4cd2:	48 1b       	sub	r20, r24
    4cd4:	51 09       	sbc	r21, r1
    4cd6:	ca 01       	movw	r24, r20
    4cd8:	95 95       	asr	r25
    4cda:	87 95       	ror	r24
    4cdc:	8c 5e       	subi	r24, 0xEC	; 236
    4cde:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4ce2:	83 e0       	ldi	r24, 0x03	; 3
    4ce4:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    4ce8:	05 c0       	rjmp	.+10     	; 0x4cf4 <displayMenuMessage_P+0x4c>
    4cea:	84 e1       	ldi	r24, 0x14	; 20
    4cec:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4cf0:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    4cf4:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4cf8:	ce 01       	movw	r24, r28
    4cfa:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    4cfe:	80 2f       	mov	r24, r16
    4d00:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4d04:	9f b7       	in	r25, 0x3f	; 63
    4d06:	f8 94       	cli
    4d08:	81 e0       	ldi	r24, 0x01	; 1
    4d0a:	06 c0       	rjmp	.+12     	; 0x4d18 <displayMenuMessage_P+0x70>
    4d0c:	ef e2       	ldi	r30, 0x2F	; 47
    4d0e:	f2 e0       	ldi	r31, 0x02	; 2
    4d10:	84 e6       	ldi	r24, 0x64	; 100
    4d12:	86 87       	std	Z+14, r24	; 0x0e
    4d14:	17 86       	std	Z+15, r1	; 0x0f
    4d16:	80 e0       	ldi	r24, 0x00	; 0
    4d18:	81 11       	cpse	r24, r1
    4d1a:	f8 cf       	rjmp	.-16     	; 0x4d0c <displayMenuMessage_P+0x64>
    4d1c:	9f bf       	out	0x3f, r25	; 63
    4d1e:	81 2f       	mov	r24, r17
    4d20:	df 91       	pop	r29
    4d22:	cf 91       	pop	r28
    4d24:	1f 91       	pop	r17
    4d26:	0f 91       	pop	r16
    4d28:	08 95       	ret

00004d2a <menu_OnEnterMidiPanic>:
    4d2a:	84 e9       	ldi	r24, 0x94	; 148
    4d2c:	93 e0       	ldi	r25, 0x03	; 3
    4d2e:	bc df       	rcall	.-136    	; 0x4ca8 <displayMenuMessage_P>
    4d30:	0e 94 fb 31 	call	0x63f6	; 0x63f6 <midiSendAllNotesOff>
    4d34:	a6 dc       	rcall	.-1716   	; 0x4682 <menuCursorSetMenu>
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	08 95       	ret

00004d3a <menu_ModuleTestExecute>:
    4d3a:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d40:	11 f0       	breq	.+4      	; 0x4d46 <menu_ModuleTestExecute+0xc>
    4d42:	8d 3f       	cpi	r24, 0xFD	; 253
    4d44:	71 f5       	brne	.+92     	; 0x4da2 <menu_ModuleTestExecute+0x68>
    4d46:	0e 94 3e 37 	call	0x6e7c	; 0x6e7c <lcd_cursoroff>
    4d4a:	a4 dc       	rcall	.-1720   	; 0x4694 <menu_ClearDataDisp>
    4d4c:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	e9 e4       	ldi	r30, 0x49	; 73
    4d54:	f2 e0       	ldi	r31, 0x02	; 2
    4d56:	07 c0       	rjmp	.+14     	; 0x4d66 <menu_ModuleTestExecute+0x2c>
    4d58:	21 81       	ldd	r18, Z+1	; 0x01
    4d5a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4d5e:	82 2b       	or	r24, r18
    4d60:	81 83       	std	Z+1, r24	; 0x01
    4d62:	38 96       	adiw	r30, 0x08	; 8
    4d64:	9f 5f       	subi	r25, 0xFF	; 255
    4d66:	90 32       	cpi	r25, 0x20	; 32
    4d68:	b8 f3       	brcs	.-18     	; 0x4d58 <menu_ModuleTestExecute+0x1e>
    4d6a:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4d6e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d70:	19 f4       	brne	.+6      	; 0x4d78 <menu_ModuleTestExecute+0x3e>
    4d72:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    4d76:	5b c0       	rjmp	.+182    	; 0x4e2e <menu_ModuleTestExecute+0xf4>
    4d78:	8e e8       	ldi	r24, 0x8E	; 142
    4d7a:	93 e0       	ldi	r25, 0x03	; 3
    4d7c:	95 df       	rcall	.-214    	; 0x4ca8 <displayMenuMessage_P>
    4d7e:	8e ef       	ldi	r24, 0xFE	; 254
    4d80:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4d84:	9f b7       	in	r25, 0x3f	; 63
    4d86:	f8 94       	cli
    4d88:	81 e0       	ldi	r24, 0x01	; 1
    4d8a:	06 c0       	rjmp	.+12     	; 0x4d98 <menu_ModuleTestExecute+0x5e>
    4d8c:	ef e2       	ldi	r30, 0x2F	; 47
    4d8e:	f2 e0       	ldi	r31, 0x02	; 2
    4d90:	82 e0       	ldi	r24, 0x02	; 2
    4d92:	84 87       	std	Z+12, r24	; 0x0c
    4d94:	85 87       	std	Z+13, r24	; 0x0d
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	81 11       	cpse	r24, r1
    4d9a:	f8 cf       	rjmp	.-16     	; 0x4d8c <menu_ModuleTestExecute+0x52>
    4d9c:	9f bf       	out	0x3f, r25	; 63
    4d9e:	71 dc       	rcall	.-1822   	; 0x4682 <menuCursorSetMenu>
    4da0:	46 c0       	rjmp	.+140    	; 0x4e2e <menu_ModuleTestExecute+0xf4>
    4da2:	8e 3f       	cpi	r24, 0xFE	; 254
    4da4:	41 f4       	brne	.+16     	; 0x4db6 <menu_ModuleTestExecute+0x7c>
    4da6:	8f ef       	ldi	r24, 0xFF	; 255
    4da8:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    4dac:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    4db0:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <lcd_cursosblink>
    4db4:	3c c0       	rjmp	.+120    	; 0x4e2e <menu_ModuleTestExecute+0xf4>
    4db6:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    4dba:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    4dbe:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    4dc2:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    4dc6:	76 95       	lsr	r23
    4dc8:	67 95       	ror	r22
    4dca:	57 95       	ror	r21
    4dcc:	47 95       	ror	r20
    4dce:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    4dd2:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    4dd6:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    4dda:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    4dde:	e8 2f       	mov	r30, r24
    4de0:	f0 e0       	ldi	r31, 0x00	; 0
    4de2:	df 01       	movw	r26, r30
    4de4:	aa 0f       	add	r26, r26
    4de6:	bb 1f       	adc	r27, r27
    4de8:	aa 0f       	add	r26, r26
    4dea:	bb 1f       	adc	r27, r27
    4dec:	aa 0f       	add	r26, r26
    4dee:	bb 1f       	adc	r27, r27
    4df0:	a7 5b       	subi	r26, 0xB7	; 183
    4df2:	bd 4f       	sbci	r27, 0xFD	; 253
    4df4:	16 96       	adiw	r26, 0x06	; 6
    4df6:	2c 91       	ld	r18, X
    4df8:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4dfc:	29 23       	and	r18, r25
    4dfe:	49 f4       	brne	.+18     	; 0x4e12 <menu_ModuleTestExecute+0xd8>
    4e00:	70 68       	ori	r23, 0x80	; 128
    4e02:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    4e06:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    4e0a:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    4e0e:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    4e12:	ee 0f       	add	r30, r30
    4e14:	ff 1f       	adc	r31, r31
    4e16:	ee 0f       	add	r30, r30
    4e18:	ff 1f       	adc	r31, r31
    4e1a:	ee 0f       	add	r30, r30
    4e1c:	ff 1f       	adc	r31, r31
    4e1e:	e7 5b       	subi	r30, 0xB7	; 183
    4e20:	fd 4f       	sbci	r31, 0xFD	; 253
    4e22:	21 81       	ldd	r18, Z+1	; 0x01
    4e24:	92 2b       	or	r25, r18
    4e26:	91 83       	std	Z+1, r25	; 0x01
    4e28:	8f 5f       	subi	r24, 0xFF	; 255
    4e2a:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4e2e:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4e32:	e0 32       	cpi	r30, 0x20	; 32
    4e34:	28 f5       	brcc	.+74     	; 0x4e80 <menu_ModuleTestExecute+0x146>
    4e36:	f0 e0       	ldi	r31, 0x00	; 0
    4e38:	ee 0f       	add	r30, r30
    4e3a:	ff 1f       	adc	r31, r31
    4e3c:	ee 0f       	add	r30, r30
    4e3e:	ff 1f       	adc	r31, r31
    4e40:	ee 0f       	add	r30, r30
    4e42:	ff 1f       	adc	r31, r31
    4e44:	e7 5b       	subi	r30, 0xB7	; 183
    4e46:	fd 4f       	sbci	r31, 0xFD	; 253
    4e48:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4e4c:	98 2f       	mov	r25, r24
    4e4e:	90 95       	com	r25
    4e50:	81 81       	ldd	r24, Z+1	; 0x01
    4e52:	89 23       	and	r24, r25
    4e54:	81 83       	std	Z+1, r24	; 0x01
    4e56:	8e e1       	ldi	r24, 0x1E	; 30
    4e58:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4e5c:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4e60:	0e 94 59 35 	call	0x6ab2	; 0x6ab2 <lcd_dec2out>
    4e64:	9f b7       	in	r25, 0x3f	; 63
    4e66:	f8 94       	cli
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	06 c0       	rjmp	.+12     	; 0x4e78 <menu_ModuleTestExecute+0x13e>
    4e6c:	ef e2       	ldi	r30, 0x2F	; 47
    4e6e:	f2 e0       	ldi	r31, 0x02	; 2
    4e70:	88 e0       	ldi	r24, 0x08	; 8
    4e72:	84 87       	std	Z+12, r24	; 0x0c
    4e74:	15 86       	std	Z+13, r1	; 0x0d
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	81 11       	cpse	r24, r1
    4e7a:	f8 cf       	rjmp	.-16     	; 0x4e6c <menu_ModuleTestExecute+0x132>
    4e7c:	9f bf       	out	0x3f, r25	; 63
    4e7e:	08 95       	ret
    4e80:	e0 32       	cpi	r30, 0x20	; 32
    4e82:	81 f5       	brne	.+96     	; 0x4ee4 <menu_ModuleTestExecute+0x1aa>
    4e84:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    4e88:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    4e8c:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    4e90:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    4e94:	00 97       	sbiw	r24, 0x00	; 0
    4e96:	a1 05       	cpc	r26, r1
    4e98:	b1 05       	cpc	r27, r1
    4e9a:	21 f4       	brne	.+8      	; 0x4ea4 <menu_ModuleTestExecute+0x16a>
    4e9c:	8a e8       	ldi	r24, 0x8A	; 138
    4e9e:	93 e0       	ldi	r25, 0x03	; 3
    4ea0:	03 df       	rcall	.-506    	; 0x4ca8 <displayMenuMessage_P>
    4ea2:	0f c0       	rjmp	.+30     	; 0x4ec2 <menu_ModuleTestExecute+0x188>
    4ea4:	80 93 ea 10 	sts	0x10EA, r24	; 0x8010ea <editLong>
    4ea8:	90 93 eb 10 	sts	0x10EB, r25	; 0x8010eb <editLong+0x1>
    4eac:	a0 93 ec 10 	sts	0x10EC, r26	; 0x8010ec <editLong+0x2>
    4eb0:	b0 93 ed 10 	sts	0x10ED, r27	; 0x8010ed <editLong+0x3>
    4eb4:	87 e8       	ldi	r24, 0x87	; 135
    4eb6:	93 e0       	ldi	r25, 0x03	; 3
    4eb8:	f7 de       	rcall	.-530    	; 0x4ca8 <displayMenuMessage_P>
    4eba:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4ebe:	0e 94 34 35 	call	0x6a68	; 0x6a68 <lcd_longout>
    4ec2:	8e ef       	ldi	r24, 0xFE	; 254
    4ec4:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4ec8:	9f b7       	in	r25, 0x3f	; 63
    4eca:	f8 94       	cli
    4ecc:	81 e0       	ldi	r24, 0x01	; 1
    4ece:	06 c0       	rjmp	.+12     	; 0x4edc <menu_ModuleTestExecute+0x1a2>
    4ed0:	ef e2       	ldi	r30, 0x2F	; 47
    4ed2:	f2 e0       	ldi	r31, 0x02	; 2
    4ed4:	82 e0       	ldi	r24, 0x02	; 2
    4ed6:	84 87       	std	Z+12, r24	; 0x0c
    4ed8:	85 87       	std	Z+13, r24	; 0x0d
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	81 11       	cpse	r24, r1
    4ede:	f8 cf       	rjmp	.-16     	; 0x4ed0 <menu_ModuleTestExecute+0x196>
    4ee0:	9f bf       	out	0x3f, r25	; 63
    4ee2:	cf cb       	rjmp	.-2146   	; 0x4682 <menuCursorSetMenu>
    4ee4:	08 95       	ret

00004ee6 <menu_ModuleTestPattern>:
    4ee6:	81 e0       	ldi	r24, 0x01	; 1
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    4eee:	02 c0       	rjmp	.+4      	; 0x4ef4 <menu_ModuleTestPattern+0xe>
    4ef0:	88 0f       	add	r24, r24
    4ef2:	99 1f       	adc	r25, r25
    4ef4:	0a 94       	dec	r0
    4ef6:	e2 f7       	brpl	.-8      	; 0x4ef0 <menu_ModuleTestPattern+0xa>
    4ef8:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    4efc:	8f ef       	ldi	r24, 0xFF	; 255
    4efe:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4f02:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    4f06:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    4f0a:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    4f0e:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    4f12:	13 df       	rcall	.-474    	; 0x4d3a <menu_ModuleTestExecute>
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	08 95       	ret

00004f18 <menuLCDwriteOK>:
    4f18:	8a e8       	ldi	r24, 0x8A	; 138
    4f1a:	93 e0       	ldi	r25, 0x03	; 3
    4f1c:	c5 ce       	rjmp	.-630    	; 0x4ca8 <displayMenuMessage_P>
    4f1e:	08 95       	ret

00004f20 <menuOnEnterEEBackup>:
    4f20:	8e e1       	ldi	r24, 0x1E	; 30
    4f22:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4f26:	8d e6       	ldi	r24, 0x6D	; 109
    4f28:	93 e0       	ldi	r25, 0x03	; 3
    4f2a:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    4f2e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <eeprom_Backup>
    4f32:	f2 df       	rcall	.-28     	; 0x4f18 <menuLCDwriteOK>
    4f34:	80 e0       	ldi	r24, 0x00	; 0
    4f36:	08 95       	ret

00004f38 <menuOnEnterEERestore>:
    4f38:	8e e1       	ldi	r24, 0x1E	; 30
    4f3a:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4f3e:	8d e6       	ldi	r24, 0x6D	; 109
    4f40:	93 e0       	ldi	r25, 0x03	; 3
    4f42:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    4f46:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <eeprom_Restore>
    4f4a:	e6 df       	rcall	.-52     	; 0x4f18 <menuLCDwriteOK>
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	08 95       	ret

00004f50 <menuOnEnterEEUpdate>:
    4f50:	8d e6       	ldi	r24, 0x6D	; 109
    4f52:	93 e0       	ldi	r25, 0x03	; 3
    4f54:	a9 de       	rcall	.-686    	; 0x4ca8 <displayMenuMessage_P>
    4f56:	8e e1       	ldi	r24, 0x1E	; 30
    4f58:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4f5c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <eeprom_UpdateALL>
    4f60:	db df       	rcall	.-74     	; 0x4f18 <menuLCDwriteOK>
    4f62:	80 e0       	ldi	r24, 0x00	; 0
    4f64:	08 95       	ret

00004f66 <menudeleteMainMessage>:
    4f66:	cf 93       	push	r28
    4f68:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4f6c:	80 e4       	ldi	r24, 0x40	; 64
    4f6e:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4f72:	84 e1       	ldi	r24, 0x14	; 20
    4f74:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
    4f78:	8c 2f       	mov	r24, r28
    4f7a:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4f7e:	cf 91       	pop	r28
    4f80:	08 95       	ret

00004f82 <menu_deleteMessage>:
    4f82:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    4f86:	83 30       	cpi	r24, 0x03	; 3
    4f88:	19 f4       	brne	.+6      	; 0x4f90 <menu_deleteMessage+0xe>
    4f8a:	7f db       	rcall	.-2306   	; 0x468a <menuClearExtraDisp>
    4f8c:	83 cb       	rjmp	.-2298   	; 0x4694 <menu_ClearDataDisp>
    4f8e:	08 95       	ret
    4f90:	81 11       	cpse	r24, r1
    4f92:	02 c0       	rjmp	.+4      	; 0x4f98 <menu_deleteMessage+0x16>
    4f94:	7a cb       	rjmp	.-2316   	; 0x468a <menuClearExtraDisp>
    4f96:	08 95       	ret
    4f98:	81 30       	cpi	r24, 0x01	; 1
    4f9a:	11 f4       	brne	.+4      	; 0x4fa0 <menu_deleteMessage+0x1e>
    4f9c:	7b cb       	rjmp	.-2314   	; 0x4694 <menu_ClearDataDisp>
    4f9e:	08 95       	ret
    4fa0:	e2 cf       	rjmp	.-60     	; 0x4f66 <menudeleteMainMessage>
    4fa2:	08 95       	ret

00004fa4 <menu_DisplayMainMessage_P>:
    4fa4:	0f 93       	push	r16
    4fa6:	1f 93       	push	r17
    4fa8:	cf 93       	push	r28
    4faa:	df 93       	push	r29
    4fac:	ec 01       	movw	r28, r24
    4fae:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4fb2:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <get_StrLenP>
    4fb6:	08 2f       	mov	r16, r24
    4fb8:	80 e4       	ldi	r24, 0x40	; 64
    4fba:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4fbe:	84 e1       	ldi	r24, 0x14	; 20
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	80 1b       	sub	r24, r16
    4fc4:	91 09       	sbc	r25, r1
    4fc6:	95 95       	asr	r25
    4fc8:	87 95       	ror	r24
    4fca:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
    4fce:	ce 01       	movw	r24, r28
    4fd0:	0e 94 be 12 	call	0x257c	; 0x257c <lcd_puts_P>
    4fd4:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4fd8:	84 e5       	ldi	r24, 0x54	; 84
    4fda:	89 1b       	sub	r24, r25
    4fdc:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
    4fe0:	81 2f       	mov	r24, r17
    4fe2:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    4fe6:	9f b7       	in	r25, 0x3f	; 63
    4fe8:	f8 94       	cli
    4fea:	81 e0       	ldi	r24, 0x01	; 1
    4fec:	06 c0       	rjmp	.+12     	; 0x4ffa <menu_DisplayMainMessage_P+0x56>
    4fee:	ef e2       	ldi	r30, 0x2F	; 47
    4ff0:	f2 e0       	ldi	r31, 0x02	; 2
    4ff2:	84 e6       	ldi	r24, 0x64	; 100
    4ff4:	86 87       	std	Z+14, r24	; 0x0e
    4ff6:	17 86       	std	Z+15, r1	; 0x0f
    4ff8:	80 e0       	ldi	r24, 0x00	; 0
    4ffa:	81 11       	cpse	r24, r1
    4ffc:	f8 cf       	rjmp	.-16     	; 0x4fee <menu_DisplayMainMessage_P+0x4a>
    4ffe:	9f bf       	out	0x3f, r25	; 63
    5000:	82 e0       	ldi	r24, 0x02	; 2
    5002:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    5006:	df 91       	pop	r29
    5008:	cf 91       	pop	r28
    500a:	1f 91       	pop	r17
    500c:	0f 91       	pop	r16
    500e:	08 95       	ret

00005010 <menu_DisplayMainMessage>:
    5010:	0f 93       	push	r16
    5012:	1f 93       	push	r17
    5014:	cf 93       	push	r28
    5016:	df 93       	push	r29
    5018:	ec 01       	movw	r28, r24
    501a:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    501e:	0e 94 fb 37 	call	0x6ff6	; 0x6ff6 <get_StrLen>
    5022:	08 2f       	mov	r16, r24
    5024:	80 e4       	ldi	r24, 0x40	; 64
    5026:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    502a:	84 e1       	ldi	r24, 0x14	; 20
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	80 1b       	sub	r24, r16
    5030:	91 09       	sbc	r25, r1
    5032:	95 95       	asr	r25
    5034:	87 95       	ror	r24
    5036:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
    503a:	ce 01       	movw	r24, r28
    503c:	0e 94 ae 12 	call	0x255c	; 0x255c <lcd_puts>
    5040:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5044:	84 e5       	ldi	r24, 0x54	; 84
    5046:	89 1b       	sub	r24, r25
    5048:	0e 94 14 37 	call	0x6e28	; 0x6e28 <lcd_blank>
    504c:	81 2f       	mov	r24, r17
    504e:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    5052:	9f b7       	in	r25, 0x3f	; 63
    5054:	f8 94       	cli
    5056:	81 e0       	ldi	r24, 0x01	; 1
    5058:	06 c0       	rjmp	.+12     	; 0x5066 <menu_DisplayMainMessage+0x56>
    505a:	ef e2       	ldi	r30, 0x2F	; 47
    505c:	f2 e0       	ldi	r31, 0x02	; 2
    505e:	84 e6       	ldi	r24, 0x64	; 100
    5060:	86 87       	std	Z+14, r24	; 0x0e
    5062:	17 86       	std	Z+15, r1	; 0x0f
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	81 11       	cpse	r24, r1
    5068:	f8 cf       	rjmp	.-16     	; 0x505a <menu_DisplayMainMessage+0x4a>
    506a:	9f bf       	out	0x3f, r25	; 63
    506c:	82 e0       	ldi	r24, 0x02	; 2
    506e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    5072:	df 91       	pop	r29
    5074:	cf 91       	pop	r28
    5076:	1f 91       	pop	r17
    5078:	0f 91       	pop	r16
    507a:	08 95       	ret

0000507c <menuDisplaySaveMessage>:
    507c:	6e ee       	ldi	r22, 0xEE	; 238
    507e:	70 e1       	ldi	r23, 0x10	; 16
    5080:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <putChar_Dec>
    5084:	bc 01       	movw	r22, r24
    5086:	82 eb       	ldi	r24, 0xB2	; 178
    5088:	93 e0       	ldi	r25, 0x03	; 3
    508a:	0e 94 82 36 	call	0x6d04	; 0x6d04 <putString_P>
    508e:	8e ee       	ldi	r24, 0xEE	; 238
    5090:	90 e1       	ldi	r25, 0x10	; 16
    5092:	be cf       	rjmp	.-132    	; 0x5010 <menu_DisplayMainMessage>
    5094:	08 95       	ret

00005096 <menuDisplayLoadMessage>:
    5096:	0f 93       	push	r16
    5098:	1f 93       	push	r17
    509a:	cf 93       	push	r28
    509c:	6e ee       	ldi	r22, 0xEE	; 238
    509e:	70 e1       	ldi	r23, 0x10	; 16
    50a0:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <putChar_Dec>
    50a4:	bc 01       	movw	r22, r24
    50a6:	85 ea       	ldi	r24, 0xA5	; 165
    50a8:	93 e0       	ldi	r25, 0x03	; 3
    50aa:	0e 94 82 36 	call	0x6d04	; 0x6d04 <putString_P>
    50ae:	8c 01       	movw	r16, r24
    50b0:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <module_WaitOutputInput2Cycles>
    50b4:	84 e0       	ldi	r24, 0x04	; 4
    50b6:	c0 d3       	rcall	.+1920   	; 0x5838 <count_Registers>
    50b8:	c8 2f       	mov	r28, r24
    50ba:	88 23       	and	r24, r24
    50bc:	49 f0       	breq	.+18     	; 0x50d0 <menuDisplayLoadMessage+0x3a>
    50be:	b8 01       	movw	r22, r16
    50c0:	83 ea       	ldi	r24, 0xA3	; 163
    50c2:	93 e0       	ldi	r25, 0x03	; 3
    50c4:	0e 94 82 36 	call	0x6d04	; 0x6d04 <putString_P>
    50c8:	bc 01       	movw	r22, r24
    50ca:	8c 2f       	mov	r24, r28
    50cc:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <putChar_Dec>
    50d0:	8e ee       	ldi	r24, 0xEE	; 238
    50d2:	90 e1       	ldi	r25, 0x10	; 16
    50d4:	9d df       	rcall	.-198    	; 0x5010 <menu_DisplayMainMessage>
    50d6:	cf 91       	pop	r28
    50d8:	1f 91       	pop	r17
    50da:	0f 91       	pop	r16
    50dc:	08 95       	ret

000050de <handle_programKey>:
    50de:	cf 93       	push	r28
    50e0:	c6 2f       	mov	r28, r22
    50e2:	88 23       	and	r24, r24
    50e4:	2c f4       	brge	.+10     	; 0x50f0 <handle_programKey+0x12>
    50e6:	6f ef       	ldi	r22, 0xFF	; 255
    50e8:	8c 2f       	mov	r24, r28
    50ea:	c0 d4       	rcall	.+2432   	; 0x5a6c <register_toProgram>
    50ec:	c7 df       	rcall	.-114    	; 0x507c <menuDisplaySaveMessage>
    50ee:	05 c0       	rjmp	.+10     	; 0x50fa <handle_programKey+0x1c>
    50f0:	88 23       	and	r24, r24
    50f2:	19 f0       	breq	.+6      	; 0x50fa <handle_programKey+0x1c>
    50f4:	86 2f       	mov	r24, r22
    50f6:	1e d4       	rcall	.+2108   	; 0x5934 <program_toRegister>
    50f8:	ce df       	rcall	.-100    	; 0x5096 <menuDisplayLoadMessage>
    50fa:	8c 2f       	mov	r24, r28
    50fc:	27 d5       	rcall	.+2638   	; 0x5b4c <midi_CountRegisterInProgram>
    50fe:	88 23       	and	r24, r24
    5100:	31 f0       	breq	.+12     	; 0x510e <handle_programKey+0x30>
    5102:	8c 2f       	mov	r24, r28
    5104:	e8 d4       	rcall	.+2512   	; 0x5ad6 <midi_RegisterMatchProgram>
    5106:	81 11       	cpse	r24, r1
    5108:	04 c0       	rjmp	.+8      	; 0x5112 <handle_programKey+0x34>
    510a:	81 e8       	ldi	r24, 0x81	; 129
    510c:	03 c0       	rjmp	.+6      	; 0x5114 <handle_programKey+0x36>
    510e:	82 e8       	ldi	r24, 0x82	; 130
    5110:	01 c0       	rjmp	.+2      	; 0x5114 <handle_programKey+0x36>
    5112:	82 e8       	ldi	r24, 0x82	; 130
    5114:	cf 91       	pop	r28
    5116:	08 95       	ret

00005118 <softKeyK1A>:
    5118:	60 e0       	ldi	r22, 0x00	; 0
    511a:	e1 cf       	rjmp	.-62     	; 0x50de <handle_programKey>
    511c:	08 95       	ret

0000511e <softKeyK2A>:
    511e:	61 e0       	ldi	r22, 0x01	; 1
    5120:	de cf       	rjmp	.-68     	; 0x50de <handle_programKey>
    5122:	08 95       	ret

00005124 <softKeyK3A>:
    5124:	62 e0       	ldi	r22, 0x02	; 2
    5126:	db cf       	rjmp	.-74     	; 0x50de <handle_programKey>
    5128:	08 95       	ret

0000512a <softKeyK4A>:
    512a:	63 e0       	ldi	r22, 0x03	; 3
    512c:	d8 cf       	rjmp	.-80     	; 0x50de <handle_programKey>
    512e:	08 95       	ret

00005130 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5130:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5132:	34 e0       	ldi	r19, 0x04	; 4
    5134:	8f 35       	cpi	r24, 0x5F	; 95
    5136:	93 07       	cpc	r25, r19
    5138:	49 f0       	breq	.+18     	; 0x514c <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    513a:	34 e0       	ldi	r19, 0x04	; 4
    513c:	8f 35       	cpi	r24, 0x5F	; 95
    513e:	93 07       	cpc	r25, r19
    5140:	38 f0       	brcs	.+14     	; 0x5150 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5142:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5144:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5146:	a9 f7       	brne	.-22     	; 0x5132 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5148:	80 e0       	ldi	r24, 0x00	; 0
    514a:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    514c:	82 2f       	mov	r24, r18
    514e:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5150:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5152:	08 95       	ret

00005154 <init_SoftKeys>:

void init_SoftKeys(){
    5154:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5156:	0e 94 22 0b 	call	0x1644	; 0x1644 <eeprom_ReadSoftkeys>
    515a:	8f 3f       	cpi	r24, 0xFF	; 255
    515c:	c9 f4       	brne	.+50     	; 0x5190 <init_SoftKeys+0x3c>
    515e:	0f c0       	rjmp	.+30     	; 0x517e <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5160:	82 2f       	mov	r24, r18
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	fc 01       	movw	r30, r24
    5166:	ed 54       	subi	r30, 0x4D	; 77
    5168:	fa 4f       	sbci	r31, 0xFA	; 250
    516a:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    516c:	88 0f       	add	r24, r24
    516e:	99 1f       	adc	r25, r25
    5170:	fc 01       	movw	r30, r24
    5172:	e6 54       	subi	r30, 0x46	; 70
    5174:	fa 4f       	sbci	r31, 0xFA	; 250
    5176:	11 82       	std	Z+1, r1	; 0x01
    5178:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    517a:	2f 5f       	subi	r18, 0xFF	; 255
    517c:	01 c0       	rjmp	.+2      	; 0x5180 <init_SoftKeys+0x2c>
    517e:	20 e0       	ldi	r18, 0x00	; 0
    5180:	24 30       	cpi	r18, 0x04	; 4
    5182:	70 f3       	brcs	.-36     	; 0x5160 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    5184:	40 e0       	ldi	r20, 0x00	; 0
    5186:	50 e0       	ldi	r21, 0x00	; 0
    5188:	67 e0       	ldi	r22, 0x07	; 7
    518a:	81 e0       	ldi	r24, 0x01	; 1
    518c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <log_putError>
    5190:	c0 e0       	ldi	r28, 0x00	; 0
    5192:	25 c0       	rjmp	.+74     	; 0x51de <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    5194:	4c 2f       	mov	r20, r28
    5196:	50 e0       	ldi	r21, 0x00	; 0
    5198:	fa 01       	movw	r30, r20
    519a:	ed 54       	subi	r30, 0x4D	; 77
    519c:	fa 4f       	sbci	r31, 0xFA	; 250
    519e:	80 81       	ld	r24, Z
    51a0:	86 31       	cpi	r24, 0x16	; 22
    51a2:	70 f4       	brcc	.+28     	; 0x51c0 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    51a4:	24 e1       	ldi	r18, 0x14	; 20
    51a6:	82 9f       	mul	r24, r18
    51a8:	c0 01       	movw	r24, r0
    51aa:	11 24       	eor	r1, r1
    51ac:	81 5a       	subi	r24, 0xA1	; 161
    51ae:	9b 4f       	sbci	r25, 0xFB	; 251
    51b0:	44 0f       	add	r20, r20
    51b2:	55 1f       	adc	r21, r21
    51b4:	fa 01       	movw	r30, r20
    51b6:	e6 54       	subi	r30, 0x46	; 70
    51b8:	fa 4f       	sbci	r31, 0xFA	; 250
    51ba:	91 83       	std	Z+1, r25	; 0x01
    51bc:	80 83       	st	Z, r24
    51be:	0e c0       	rjmp	.+28     	; 0x51dc <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    51c0:	fa 01       	movw	r30, r20
    51c2:	ee 0f       	add	r30, r30
    51c4:	ff 1f       	adc	r31, r31
    51c6:	e6 54       	subi	r30, 0x46	; 70
    51c8:	fa 4f       	sbci	r31, 0xFA	; 250
    51ca:	11 82       	std	Z+1, r1	; 0x01
    51cc:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    51ce:	4f 5f       	subi	r20, 0xFF	; 255
    51d0:	5f 4f       	sbci	r21, 0xFF	; 255
    51d2:	40 61       	ori	r20, 0x10	; 16
    51d4:	67 e0       	ldi	r22, 0x07	; 7
    51d6:	81 e0       	ldi	r24, 0x01	; 1
    51d8:	0e 94 74 14 	call	0x28e8	; 0x28e8 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    51dc:	cf 5f       	subi	r28, 0xFF	; 255
    51de:	c4 30       	cpi	r28, 0x04	; 4
    51e0:	c8 f2       	brcs	.-78     	; 0x5194 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    51e2:	cf 91       	pop	r28
    51e4:	08 95       	ret

000051e6 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    51e6:	cf 93       	push	r28
    51e8:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    51ea:	64 30       	cpi	r22, 0x04	; 4
    51ec:	28 f5       	brcc	.+74     	; 0x5238 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    51ee:	00 97       	sbiw	r24, 0x00	; 0
    51f0:	b9 f0       	breq	.+46     	; 0x5220 <softKey_Set+0x3a>
    51f2:	fc 01       	movw	r30, r24
    51f4:	24 91       	lpm	r18, Z
    51f6:	2f 73       	andi	r18, 0x3F	; 63
    51f8:	21 30       	cpi	r18, 0x01	; 1
    51fa:	91 f4       	brne	.+36     	; 0x5220 <softKey_Set+0x3a>
    51fc:	31 96       	adiw	r30, 0x01	; 1
    51fe:	24 91       	lpm	r18, Z
    5200:	24 ff       	sbrs	r18, 4
    5202:	0e c0       	rjmp	.+28     	; 0x5220 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5204:	c6 2f       	mov	r28, r22
    5206:	d0 e0       	ldi	r29, 0x00	; 0
    5208:	fe 01       	movw	r30, r28
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	e6 54       	subi	r30, 0x46	; 70
    5210:	fa 4f       	sbci	r31, 0xFA	; 250
    5212:	91 83       	std	Z+1, r25	; 0x01
    5214:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5216:	8c df       	rcall	.-232    	; 0x5130 <getSoftKeyIndex>
    5218:	cd 54       	subi	r28, 0x4D	; 77
    521a:	da 4f       	sbci	r29, 0xFA	; 250
    521c:	88 83       	st	Y, r24
    521e:	0c c0       	rjmp	.+24     	; 0x5238 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5220:	70 e0       	ldi	r23, 0x00	; 0
    5222:	fb 01       	movw	r30, r22
    5224:	ee 0f       	add	r30, r30
    5226:	ff 1f       	adc	r31, r31
    5228:	e6 54       	subi	r30, 0x46	; 70
    522a:	fa 4f       	sbci	r31, 0xFA	; 250
    522c:	11 82       	std	Z+1, r1	; 0x01
    522e:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5230:	fb 01       	movw	r30, r22
    5232:	ed 54       	subi	r30, 0x4D	; 77
    5234:	fa 4f       	sbci	r31, 0xFA	; 250
    5236:	10 82       	st	Z, r1
		}
	}
}
    5238:	df 91       	pop	r29
    523a:	cf 91       	pop	r28
    523c:	08 95       	ret

0000523e <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    523e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5242:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5246:	3e 96       	adiw	r30, 0x0e	; 14
    5248:	65 91       	lpm	r22, Z+
    524a:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    524c:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5250:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    5254:	c8 df       	rcall	.-112    	; 0x51e6 <softKey_Set>
	eeprom_UpdateSoftkeys();
    5256:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <eeprom_UpdateSoftkeys>
	return 0;
}
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	08 95       	ret

0000525e <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    525e:	0f 93       	push	r16
    5260:	1f 93       	push	r17
    5262:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5264:	c0 e0       	ldi	r28, 0x00	; 0
    5266:	32 c0       	rjmp	.+100    	; 0x52cc <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5268:	0c 2f       	mov	r16, r28
    526a:	10 e0       	ldi	r17, 0x00	; 0
    526c:	f8 01       	movw	r30, r16
    526e:	ee 0f       	add	r30, r30
    5270:	ff 1f       	adc	r31, r31
    5272:	e6 54       	subi	r30, 0x46	; 70
    5274:	fa 4f       	sbci	r31, 0xFA	; 250
    5276:	01 90       	ld	r0, Z+
    5278:	f0 81       	ld	r31, Z
    527a:	e0 2d       	mov	r30, r0
    527c:	30 97       	sbiw	r30, 0x00	; 0
    527e:	31 f0       	breq	.+12     	; 0x528c <softKeys_toLCD+0x2e>
    5280:	3e 96       	adiw	r30, 0x0e	; 14
    5282:	65 91       	lpm	r22, Z+
    5284:	75 91       	lpm	r23, Z+
    5286:	61 15       	cp	r22, r1
    5288:	71 05       	cpc	r23, r1
    528a:	21 f4       	brne	.+8      	; 0x5294 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    528c:	8c 2f       	mov	r24, r28
    528e:	0e 94 9b 37 	call	0x6f36	; 0x6f36 <keylabel_clr>
    5292:	1b c0       	rjmp	.+54     	; 0x52ca <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    5294:	8c 2f       	mov	r24, r28
    5296:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    529a:	00 0f       	add	r16, r16
    529c:	11 1f       	adc	r17, r17
    529e:	f8 01       	movw	r30, r16
    52a0:	e6 54       	subi	r30, 0x46	; 70
    52a2:	fa 4f       	sbci	r31, 0xFA	; 250
    52a4:	01 90       	ld	r0, Z+
    52a6:	f0 81       	ld	r31, Z
    52a8:	e0 2d       	mov	r30, r0
    52aa:	70 96       	adiw	r30, 0x10	; 16
    52ac:	05 90       	lpm	r0, Z+
    52ae:	f4 91       	lpm	r31, Z
    52b0:	e0 2d       	mov	r30, r0
    52b2:	30 97       	sbiw	r30, 0x00	; 0
    52b4:	51 f0       	breq	.+20     	; 0x52ca <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    52b6:	80 e0       	ldi	r24, 0x00	; 0
    52b8:	19 95       	eicall
    52ba:	81 38       	cpi	r24, 0x81	; 129
    52bc:	11 f4       	brne	.+4      	; 0x52c2 <softKeys_toLCD+0x64>
    52be:	6f ef       	ldi	r22, 0xFF	; 255
    52c0:	01 c0       	rjmp	.+2      	; 0x52c4 <softKeys_toLCD+0x66>
    52c2:	60 e0       	ldi	r22, 0x00	; 0
    52c4:	8c 2f       	mov	r24, r28
    52c6:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    52ca:	cf 5f       	subi	r28, 0xFF	; 255
    52cc:	c4 30       	cpi	r28, 0x04	; 4
    52ce:	60 f2       	brcs	.-104    	; 0x5268 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    52d0:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
}
    52d4:	cf 91       	pop	r28
    52d6:	1f 91       	pop	r17
    52d8:	0f 91       	pop	r16
    52da:	08 95       	ret

000052dc <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    52dc:	82 30       	cpi	r24, 0x02	; 2
    52de:	49 f0       	breq	.+18     	; 0x52f2 <softKey_MessageKey_ToSoftKeyNr+0x16>
    52e0:	18 f4       	brcc	.+6      	; 0x52e8 <softKey_MessageKey_ToSoftKeyNr+0xc>
    52e2:	81 30       	cpi	r24, 0x01	; 1
    52e4:	51 f0       	breq	.+20     	; 0x52fa <softKey_MessageKey_ToSoftKeyNr+0x1e>
    52e6:	0b c0       	rjmp	.+22     	; 0x52fe <softKey_MessageKey_ToSoftKeyNr+0x22>
    52e8:	83 30       	cpi	r24, 0x03	; 3
    52ea:	59 f0       	breq	.+22     	; 0x5302 <softKey_MessageKey_ToSoftKeyNr+0x26>
    52ec:	84 30       	cpi	r24, 0x04	; 4
    52ee:	19 f0       	breq	.+6      	; 0x52f6 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    52f0:	06 c0       	rjmp	.+12     	; 0x52fe <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    52f2:	80 e0       	ldi	r24, 0x00	; 0
    52f4:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    52f6:	82 e0       	ldi	r24, 0x02	; 2
    52f8:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    52fa:	83 e0       	ldi	r24, 0x03	; 3
    52fc:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    52fe:	8f ef       	ldi	r24, 0xFF	; 255
    5300:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5302:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5304:	08 95       	ret

00005306 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5306:	0f 93       	push	r16
    5308:	1f 93       	push	r17
    530a:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    530c:	84 30       	cpi	r24, 0x04	; 4
    530e:	d0 f5       	brcc	.+116    	; 0x5384 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5310:	e8 2f       	mov	r30, r24
    5312:	f0 e0       	ldi	r31, 0x00	; 0
    5314:	ee 0f       	add	r30, r30
    5316:	ff 1f       	adc	r31, r31
    5318:	e6 54       	subi	r30, 0x46	; 70
    531a:	fa 4f       	sbci	r31, 0xFA	; 250
    531c:	00 81       	ld	r16, Z
    531e:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5320:	01 15       	cp	r16, r1
    5322:	11 05       	cpc	r17, r1
    5324:	89 f1       	breq	.+98     	; 0x5388 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5326:	f8 01       	movw	r30, r16
    5328:	94 91       	lpm	r25, Z
    532a:	9f 73       	andi	r25, 0x3F	; 63
    532c:	91 30       	cpi	r25, 0x01	; 1
    532e:	71 f5       	brne	.+92     	; 0x538c <softKey_Execute+0x86>
    5330:	31 96       	adiw	r30, 0x01	; 1
    5332:	94 91       	lpm	r25, Z
    5334:	94 ff       	sbrs	r25, 4
    5336:	2c c0       	rjmp	.+88     	; 0x5390 <softKey_Execute+0x8a>
    5338:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    533a:	3f 96       	adiw	r30, 0x0f	; 15
    533c:	05 90       	lpm	r0, Z+
    533e:	f4 91       	lpm	r31, Z
    5340:	e0 2d       	mov	r30, r0
    5342:	30 97       	sbiw	r30, 0x00	; 0
    5344:	89 f0       	breq	.+34     	; 0x5368 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5346:	86 2f       	mov	r24, r22
    5348:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    534a:	82 38       	cpi	r24, 0x82	; 130
    534c:	29 f4       	brne	.+10     	; 0x5358 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    534e:	60 e0       	ldi	r22, 0x00	; 0
    5350:	8c 2f       	mov	r24, r28
    5352:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <keylabel_statcheck>
    5356:	06 c0       	rjmp	.+12     	; 0x5364 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5358:	81 38       	cpi	r24, 0x81	; 129
    535a:	21 f4       	brne	.+8      	; 0x5364 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    535c:	6f ef       	ldi	r22, 0xFF	; 255
    535e:	8c 2f       	mov	r24, r28
    5360:	0e 94 ce 37 	call	0x6f9c	; 0x6f9c <keylabel_statcheck>
					}
					keylabel_toLCD();
    5364:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5368:	f8 01       	movw	r30, r16
    536a:	3c 96       	adiw	r30, 0x0c	; 12
    536c:	85 91       	lpm	r24, Z+
    536e:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5370:	00 97       	sbiw	r24, 0x00	; 0
    5372:	81 f0       	breq	.+32     	; 0x5394 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5374:	b8 01       	movw	r22, r16
    5376:	6e 5f       	subi	r22, 0xFE	; 254
    5378:	7f 4f       	sbci	r23, 0xFF	; 255
    537a:	0e 94 49 1c 	call	0x3892	; 0x3892 <menu_Init>
					menu_InitLCD(); //display menu
    537e:	4e da       	rcall	.-2916   	; 0x481c <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5380:	80 e0       	ldi	r24, 0x00	; 0
    5382:	09 c0       	rjmp	.+18     	; 0x5396 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5384:	8f ef       	ldi	r24, 0xFF	; 255
    5386:	07 c0       	rjmp	.+14     	; 0x5396 <softKey_Execute+0x90>
    5388:	8f ef       	ldi	r24, 0xFF	; 255
    538a:	05 c0       	rjmp	.+10     	; 0x5396 <softKey_Execute+0x90>
    538c:	8f ef       	ldi	r24, 0xFF	; 255
    538e:	03 c0       	rjmp	.+6      	; 0x5396 <softKey_Execute+0x90>
    5390:	8f ef       	ldi	r24, 0xFF	; 255
    5392:	01 c0       	rjmp	.+2      	; 0x5396 <softKey_Execute+0x90>
    5394:	8f ef       	ldi	r24, 0xFF	; 255
}
    5396:	cf 91       	pop	r28
    5398:	1f 91       	pop	r17
    539a:	0f 91       	pop	r16
    539c:	08 95       	ret

0000539e <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    539e:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    53a0:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    53a4:	8c e0       	ldi	r24, 0x0C	; 12
    53a6:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    53aa:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    53ae:	84 ff       	sbrs	r24, 4
    53b0:	02 c0       	rjmp	.+4      	; 0x53b6 <menu_showPowerState+0x18>
    53b2:	80 e2       	ldi	r24, 0x20	; 32
    53b4:	01 c0       	rjmp	.+2      	; 0x53b8 <menu_showPowerState+0x1a>
    53b6:	89 e0       	ldi	r24, 0x09	; 9
    53b8:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
	lcd_goto(saveCursor);
    53bc:	8c 2f       	mov	r24, r28
    53be:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>

    53c2:	cf 91       	pop	r28
    53c4:	08 95       	ret

000053c6 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    53c6:	85 b1       	in	r24, 0x05	; 5
    53c8:	80 64       	ori	r24, 0x40	; 64
    53ca:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    53cc:	83 e1       	ldi	r24, 0x13	; 19
    53ce:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    53d2:	e5 df       	rcall	.-54     	; 0x539e <menu_showPowerState>
	return 0;
}
    53d4:	80 e0       	ldi	r24, 0x00	; 0
    53d6:	08 95       	ret

000053d8 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    53d8:	85 b1       	in	r24, 0x05	; 5
    53da:	8f 7b       	andi	r24, 0xBF	; 191
    53dc:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    53de:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    53e2:	dd df       	rcall	.-70     	; 0x539e <menu_showPowerState>
	return 0;
}
    53e4:	80 e0       	ldi	r24, 0x00	; 0
    53e6:	08 95       	ret

000053e8 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    53e8:	85 b1       	in	r24, 0x05	; 5
    53ea:	8f 7b       	andi	r24, 0xBF	; 191
    53ec:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    53ee:	81 e0       	ldi	r24, 0x01	; 1
    53f0:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    53f4:	d4 df       	rcall	.-88     	; 0x539e <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    53f6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    53f8:	f8 94       	cli
    53fa:	81 e0       	ldi	r24, 0x01	; 1
    53fc:	06 c0       	rjmp	.+12     	; 0x540a <menuOnEnterPwrRest+0x22>
    53fe:	ef e2       	ldi	r30, 0x2F	; 47
    5400:	f2 e0       	ldi	r31, 0x02	; 2
    5402:	88 e2       	ldi	r24, 0x28	; 40
    5404:	82 83       	std	Z+2, r24	; 0x02
    5406:	13 82       	std	Z+3, r1	; 0x03
    5408:	80 e0       	ldi	r24, 0x00	; 0
    540a:	81 11       	cpse	r24, r1
    540c:	f8 cf       	rjmp	.-16     	; 0x53fe <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    540e:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5410:	08 95       	ret

00005412 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5412:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    5416:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    541a:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    541e:	08 95       	ret

00005420 <message_push>:
    5420:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    5424:	e9 2f       	mov	r30, r25
    5426:	f0 e0       	ldi	r31, 0x00	; 0
    5428:	ed 52       	subi	r30, 0x2D	; 45
    542a:	f8 4f       	sbci	r31, 0xF8	; 248
    542c:	80 83       	st	Z, r24
    542e:	9f 5f       	subi	r25, 0xFF	; 255
    5430:	9f 71       	andi	r25, 0x1F	; 31
    5432:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    5436:	98 13       	cpse	r25, r24
    5438:	04 c0       	rjmp	.+8      	; 0x5442 <message_push+0x22>
    543a:	8f ef       	ldi	r24, 0xFF	; 255
    543c:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    5440:	08 95       	ret
    5442:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    5446:	08 95       	ret

00005448 <message_get>:
    5448:	4f b7       	in	r20, 0x3f	; 63
    544a:	f8 94       	cli
    544c:	21 e0       	ldi	r18, 0x01	; 1
    544e:	11 c0       	rjmp	.+34     	; 0x5472 <message_get+0x2a>
    5450:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    5454:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    5458:	8f ef       	ldi	r24, 0xFF	; 255
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	93 17       	cp	r25, r19
    545e:	49 f0       	breq	.+18     	; 0x5472 <message_get+0x2a>
    5460:	e9 2f       	mov	r30, r25
    5462:	f0 e0       	ldi	r31, 0x00	; 0
    5464:	ed 52       	subi	r30, 0x2D	; 45
    5466:	f8 4f       	sbci	r31, 0xF8	; 248
    5468:	80 81       	ld	r24, Z
    546a:	9f 5f       	subi	r25, 0xFF	; 255
    546c:	9f 71       	andi	r25, 0x1F	; 31
    546e:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    5472:	21 11       	cpse	r18, r1
    5474:	ed cf       	rjmp	.-38     	; 0x5450 <message_get+0x8>
    5476:	4f bf       	out	0x3f, r20	; 63
    5478:	08 95       	ret

0000547a <message_status>:
    547a:	4f b7       	in	r20, 0x3f	; 63
    547c:	f8 94       	cli
    547e:	91 e0       	ldi	r25, 0x01	; 1
    5480:	08 c0       	rjmp	.+16     	; 0x5492 <message_status+0x18>
    5482:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    5486:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    548a:	90 e0       	ldi	r25, 0x00	; 0
    548c:	80 e0       	ldi	r24, 0x00	; 0
    548e:	32 17       	cp	r19, r18
    5490:	11 f0       	breq	.+4      	; 0x5496 <message_status+0x1c>
    5492:	8f ef       	ldi	r24, 0xFF	; 255
    5494:	01 c0       	rjmp	.+2      	; 0x5498 <message_status+0x1e>
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	91 11       	cpse	r25, r1
    549a:	f3 cf       	rjmp	.-26     	; 0x5482 <message_status+0x8>
    549c:	4f bf       	out	0x3f, r20	; 63
    549e:	08 95       	ret

000054a0 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    54a0:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    54a2:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    54a6:	99 23       	and	r25, r25
    54a8:	e1 f0       	breq	.+56     	; 0x54e2 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    54aa:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    54ae:	21 e0       	ldi	r18, 0x01	; 1
    54b0:	29 0f       	add	r18, r25
    54b2:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    54b6:	e9 2f       	mov	r30, r25
    54b8:	f0 e0       	ldi	r31, 0x00	; 0
    54ba:	ee 0f       	add	r30, r30
    54bc:	ff 1f       	adc	r31, r31
    54be:	e0 53       	subi	r30, 0x30	; 48
    54c0:	fa 4f       	sbci	r31, 0xFA	; 250
    54c2:	51 83       	std	Z+1, r21	; 0x01
    54c4:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    54c6:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    54ca:	28 13       	cpse	r18, r24
    54cc:	0a c0       	rjmp	.+20     	; 0x54e2 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    54ce:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    54d2:	9f 3f       	cpi	r25, 0xFF	; 255
    54d4:	19 f4       	brne	.+6      	; 0x54dc <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    54d6:	8f ef       	ldi	r24, 0xFF	; 255
    54d8:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    54dc:	8f ef       	ldi	r24, 0xFF	; 255
    54de:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    54e2:	08 95       	ret

000054e4 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    54e4:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    54e8:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    54ec:	e8 13       	cpse	r30, r24
    54ee:	03 c0       	rjmp	.+6      	; 0x54f6 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    54f0:	8f ef       	ldi	r24, 0xFF	; 255
    54f2:	9f ef       	ldi	r25, 0xFF	; 255
    54f4:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    54f6:	81 e0       	ldi	r24, 0x01	; 1
    54f8:	8e 0f       	add	r24, r30
    54fa:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    54fe:	f0 e0       	ldi	r31, 0x00	; 0
    5500:	ee 0f       	add	r30, r30
    5502:	ff 1f       	adc	r31, r31
    5504:	e0 53       	subi	r30, 0x30	; 48
    5506:	fa 4f       	sbci	r31, 0xFA	; 250
    5508:	80 81       	ld	r24, Z
    550a:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    550c:	08 95       	ret

0000550e <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    550e:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5512:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5516:	98 13       	cpse	r25, r24
    5518:	02 c0       	rjmp	.+4      	; 0x551e <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    551e:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5520:	08 95       	ret

00005522 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	ef e0       	ldi	r30, 0x0F	; 15
    5526:	f8 e0       	ldi	r31, 0x08	; 8
    5528:	03 c0       	rjmp	.+6      	; 0x5530 <midi_CouplerReset+0xe>
    552a:	10 82       	st	Z, r1
    552c:	8f 5f       	subi	r24, 0xFF	; 255
    552e:	31 96       	adiw	r30, 0x01	; 1
    5530:	8c 30       	cpi	r24, 0x0C	; 12
    5532:	d8 f3       	brcs	.-10     	; 0x552a <midi_CouplerReset+0x8>
    5534:	08 95       	ret

00005536 <init_Midi>:
    5536:	f5 cf       	rjmp	.-22     	; 0x5522 <midi_CouplerReset>
    5538:	08 95       	ret

0000553a <set_Coupler>:
    553a:	8c 30       	cpi	r24, 0x0C	; 12
    553c:	e8 f4       	brcc	.+58     	; 0x5578 <set_Coupler+0x3e>
    553e:	e8 2f       	mov	r30, r24
    5540:	f0 e0       	ldi	r31, 0x00	; 0
    5542:	e1 5f       	subi	r30, 0xF1	; 241
    5544:	f7 4f       	sbci	r31, 0xF7	; 247
    5546:	9f ef       	ldi	r25, 0xFF	; 255
    5548:	90 83       	st	Z, r25
    554a:	86 30       	cpi	r24, 0x06	; 6
    554c:	10 f0       	brcs	.+4      	; 0x5552 <set_Coupler+0x18>
    554e:	86 50       	subi	r24, 0x06	; 6
    5550:	01 c0       	rjmp	.+2      	; 0x5554 <set_Coupler+0x1a>
    5552:	8a 5f       	subi	r24, 0xFA	; 250
    5554:	e8 2f       	mov	r30, r24
    5556:	f0 e0       	ldi	r31, 0x00	; 0
    5558:	df 01       	movw	r26, r30
    555a:	a1 5f       	subi	r26, 0xF1	; 241
    555c:	b7 4f       	sbci	r27, 0xF7	; 247
    555e:	8c 91       	ld	r24, X
    5560:	88 23       	and	r24, r24
    5562:	59 f0       	breq	.+22     	; 0x557a <set_Coupler+0x40>
    5564:	df 01       	movw	r26, r30
    5566:	a1 5f       	subi	r26, 0xF1	; 241
    5568:	b7 4f       	sbci	r27, 0xF7	; 247
    556a:	1c 92       	st	X, r1
    556c:	ee 0f       	add	r30, r30
    556e:	ff 1f       	adc	r31, r31
    5570:	eb 57       	subi	r30, 0x7B	; 123
    5572:	fe 4e       	sbci	r31, 0xEE	; 238
    5574:	84 91       	lpm	r24, Z
    5576:	08 95       	ret
    5578:	80 e0       	ldi	r24, 0x00	; 0
    557a:	08 95       	ret

0000557c <getAllCouplers>:
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	90 e0       	ldi	r25, 0x00	; 0
    5580:	4b e0       	ldi	r20, 0x0B	; 11
    5582:	01 c0       	rjmp	.+2      	; 0x5586 <getAllCouplers+0xa>
    5584:	42 2f       	mov	r20, r18
    5586:	28 2f       	mov	r18, r24
    5588:	39 2f       	mov	r19, r25
    558a:	22 0f       	add	r18, r18
    558c:	33 1f       	adc	r19, r19
    558e:	82 2f       	mov	r24, r18
    5590:	93 2f       	mov	r25, r19
    5592:	e4 2f       	mov	r30, r20
    5594:	f0 e0       	ldi	r31, 0x00	; 0
    5596:	e1 5f       	subi	r30, 0xF1	; 241
    5598:	f7 4f       	sbci	r31, 0xF7	; 247
    559a:	50 81       	ld	r21, Z
    559c:	5f 3f       	cpi	r21, 0xFF	; 255
    559e:	09 f4       	brne	.+2      	; 0x55a2 <getAllCouplers+0x26>
    55a0:	81 60       	ori	r24, 0x01	; 1
    55a2:	2f ef       	ldi	r18, 0xFF	; 255
    55a4:	24 0f       	add	r18, r20
    55a6:	41 11       	cpse	r20, r1
    55a8:	ed cf       	rjmp	.-38     	; 0x5584 <getAllCouplers+0x8>
    55aa:	08 95       	ret

000055ac <setAllCouplers>:
    55ac:	40 e0       	ldi	r20, 0x00	; 0
    55ae:	80 ff       	sbrs	r24, 0
    55b0:	07 c0       	rjmp	.+14     	; 0x55c0 <setAllCouplers+0x14>
    55b2:	e4 2f       	mov	r30, r20
    55b4:	f0 e0       	ldi	r31, 0x00	; 0
    55b6:	e1 5f       	subi	r30, 0xF1	; 241
    55b8:	f7 4f       	sbci	r31, 0xF7	; 247
    55ba:	2f ef       	ldi	r18, 0xFF	; 255
    55bc:	20 83       	st	Z, r18
    55be:	05 c0       	rjmp	.+10     	; 0x55ca <setAllCouplers+0x1e>
    55c0:	e4 2f       	mov	r30, r20
    55c2:	f0 e0       	ldi	r31, 0x00	; 0
    55c4:	e1 5f       	subi	r30, 0xF1	; 241
    55c6:	f7 4f       	sbci	r31, 0xF7	; 247
    55c8:	10 82       	st	Z, r1
    55ca:	28 2f       	mov	r18, r24
    55cc:	39 2f       	mov	r19, r25
    55ce:	36 95       	lsr	r19
    55d0:	27 95       	ror	r18
    55d2:	82 2f       	mov	r24, r18
    55d4:	93 2f       	mov	r25, r19
    55d6:	4f 5f       	subi	r20, 0xFF	; 255
    55d8:	4c 30       	cpi	r20, 0x0C	; 12
    55da:	48 f3       	brcs	.-46     	; 0x55ae <setAllCouplers+0x2>
    55dc:	08 95       	ret

000055de <midiAllReset>:
    55de:	80 e8       	ldi	r24, 0x80	; 128
    55e0:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    55e4:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <init_Pipe>
    55e8:	08 95       	ret

000055ea <registers_CalcCount>:
    55ea:	20 e0       	ldi	r18, 0x00	; 0
    55ec:	30 e0       	ldi	r19, 0x00	; 0
    55ee:	12 c0       	rjmp	.+36     	; 0x5614 <registers_CalcCount+0x2a>
    55f0:	82 2f       	mov	r24, r18
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	fc 01       	movw	r30, r24
    55f6:	ee 0f       	add	r30, r30
    55f8:	ff 1f       	adc	r31, r31
    55fa:	8e 0f       	add	r24, r30
    55fc:	9f 1f       	adc	r25, r31
    55fe:	fc 01       	movw	r30, r24
    5600:	ea 50       	subi	r30, 0x0A	; 10
    5602:	f8 4f       	sbci	r31, 0xF8	; 248
    5604:	81 81       	ldd	r24, Z+1	; 0x01
    5606:	8f 3f       	cpi	r24, 0xFF	; 255
    5608:	21 f0       	breq	.+8      	; 0x5612 <registers_CalcCount+0x28>
    560a:	83 17       	cp	r24, r19
    560c:	10 f0       	brcs	.+4      	; 0x5612 <registers_CalcCount+0x28>
    560e:	31 e0       	ldi	r19, 0x01	; 1
    5610:	38 0f       	add	r19, r24
    5612:	2f 5f       	subi	r18, 0xFF	; 255
    5614:	28 30       	cpi	r18, 0x08	; 8
    5616:	60 f3       	brcs	.-40     	; 0x55f0 <registers_CalcCount+0x6>
    5618:	30 93 0e 08 	sts	0x080E, r19	; 0x80080e <registerCount>
    561c:	08 95       	ret

0000561e <init_Registers>:
    561e:	8f ef       	ldi	r24, 0xFF	; 255
    5620:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
    5624:	20 e0       	ldi	r18, 0x00	; 0
    5626:	0e c0       	rjmp	.+28     	; 0x5644 <init_Registers+0x26>
    5628:	82 2f       	mov	r24, r18
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	fc 01       	movw	r30, r24
    562e:	ee 0f       	add	r30, r30
    5630:	ff 1f       	adc	r31, r31
    5632:	e8 0f       	add	r30, r24
    5634:	f9 1f       	adc	r31, r25
    5636:	ea 50       	subi	r30, 0x0A	; 10
    5638:	f8 4f       	sbci	r31, 0xF8	; 248
    563a:	8f ef       	ldi	r24, 0xFF	; 255
    563c:	80 83       	st	Z, r24
    563e:	81 83       	std	Z+1, r24	; 0x01
    5640:	12 82       	std	Z+2, r1	; 0x02
    5642:	2f 5f       	subi	r18, 0xFF	; 255
    5644:	28 30       	cpi	r18, 0x08	; 8
    5646:	80 f3       	brcs	.-32     	; 0x5628 <init_Registers+0xa>
    5648:	0e 94 c6 0a 	call	0x158c	; 0x158c <eeprom_ReadReg>
    564c:	8f 3f       	cpi	r24, 0xFF	; 255
    564e:	49 f4       	brne	.+18     	; 0x5662 <init_Registers+0x44>
    5650:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <registerCount>
    5654:	40 e0       	ldi	r20, 0x00	; 0
    5656:	50 e0       	ldi	r21, 0x00	; 0
    5658:	65 e0       	ldi	r22, 0x05	; 5
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <log_putError>
    5660:	01 c0       	rjmp	.+2      	; 0x5664 <init_Registers+0x46>
    5662:	c3 df       	rcall	.-122    	; 0x55ea <registers_CalcCount>
    5664:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <eeprom_ReadProg>
    5668:	8f 3f       	cpi	r24, 0xFF	; 255
    566a:	a1 f5       	brne	.+104    	; 0x56d4 <init_Registers+0xb6>
    566c:	2a c0       	rjmp	.+84     	; 0x56c2 <init_Registers+0xa4>
    566e:	83 2f       	mov	r24, r19
    5670:	90 e0       	ldi	r25, 0x00	; 0
    5672:	fc 01       	movw	r30, r24
    5674:	ee 0f       	add	r30, r30
    5676:	ff 1f       	adc	r31, r31
    5678:	88 0f       	add	r24, r24
    567a:	99 1f       	adc	r25, r25
    567c:	88 0f       	add	r24, r24
    567e:	99 1f       	adc	r25, r25
    5680:	88 0f       	add	r24, r24
    5682:	99 1f       	adc	r25, r25
    5684:	e8 0f       	add	r30, r24
    5686:	f9 1f       	adc	r31, r25
    5688:	ee 59       	subi	r30, 0x9E	; 158
    568a:	f6 4f       	sbci	r31, 0xF6	; 246
    568c:	e2 0f       	add	r30, r18
    568e:	f1 1d       	adc	r31, r1
    5690:	10 82       	st	Z, r1
    5692:	2f 5f       	subi	r18, 0xFF	; 255
    5694:	01 c0       	rjmp	.+2      	; 0x5698 <init_Registers+0x7a>
    5696:	20 e0       	ldi	r18, 0x00	; 0
    5698:	28 30       	cpi	r18, 0x08	; 8
    569a:	48 f3       	brcs	.-46     	; 0x566e <init_Registers+0x50>
    569c:	83 2f       	mov	r24, r19
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	fc 01       	movw	r30, r24
    56a2:	ee 0f       	add	r30, r30
    56a4:	ff 1f       	adc	r31, r31
    56a6:	88 0f       	add	r24, r24
    56a8:	99 1f       	adc	r25, r25
    56aa:	88 0f       	add	r24, r24
    56ac:	99 1f       	adc	r25, r25
    56ae:	88 0f       	add	r24, r24
    56b0:	99 1f       	adc	r25, r25
    56b2:	e8 0f       	add	r30, r24
    56b4:	f9 1f       	adc	r31, r25
    56b6:	ee 59       	subi	r30, 0x9E	; 158
    56b8:	f6 4f       	sbci	r31, 0xF6	; 246
    56ba:	11 86       	std	Z+9, r1	; 0x09
    56bc:	10 86       	std	Z+8, r1	; 0x08
    56be:	3f 5f       	subi	r19, 0xFF	; 255
    56c0:	01 c0       	rjmp	.+2      	; 0x56c4 <init_Registers+0xa6>
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	30 34       	cpi	r19, 0x40	; 64
    56c6:	38 f3       	brcs	.-50     	; 0x5696 <init_Registers+0x78>
    56c8:	40 e0       	ldi	r20, 0x00	; 0
    56ca:	50 e0       	ldi	r21, 0x00	; 0
    56cc:	66 e0       	ldi	r22, 0x06	; 6
    56ce:	81 e0       	ldi	r24, 0x01	; 1
    56d0:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <log_putError>
    56d4:	08 95       	ret

000056d6 <regNr_to_moduleBit>:
    56d6:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    56da:	89 17       	cp	r24, r25
    56dc:	a0 f4       	brcc	.+40     	; 0x5706 <regNr_to_moduleBit+0x30>
    56de:	80 34       	cpi	r24, 0x40	; 64
    56e0:	90 f4       	brcc	.+36     	; 0x5706 <regNr_to_moduleBit+0x30>
    56e2:	28 e0       	ldi	r18, 0x08	; 8
    56e4:	e6 ef       	ldi	r30, 0xF6	; 246
    56e6:	f7 e0       	ldi	r31, 0x07	; 7
    56e8:	30 81       	ld	r19, Z
    56ea:	83 17       	cp	r24, r19
    56ec:	48 f0       	brcs	.+18     	; 0x5700 <regNr_to_moduleBit+0x2a>
    56ee:	91 81       	ldd	r25, Z+1	; 0x01
    56f0:	98 17       	cp	r25, r24
    56f2:	30 f0       	brcs	.+12     	; 0x5700 <regNr_to_moduleBit+0x2a>
    56f4:	22 81       	ldd	r18, Z+2	; 0x02
    56f6:	98 2f       	mov	r25, r24
    56f8:	93 1b       	sub	r25, r19
    56fa:	80 e0       	ldi	r24, 0x00	; 0
    56fc:	92 0f       	add	r25, r18
    56fe:	08 95       	ret
    5700:	33 96       	adiw	r30, 0x03	; 3
    5702:	21 50       	subi	r18, 0x01	; 1
    5704:	89 f7       	brne	.-30     	; 0x56e8 <regNr_to_moduleBit+0x12>
    5706:	8f ef       	ldi	r24, 0xFF	; 255
    5708:	90 e0       	ldi	r25, 0x00	; 0
    570a:	08 95       	ret

0000570c <moduleBit_to_registerNr>:
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	16 c0       	rjmp	.+44     	; 0x573c <moduleBit_to_registerNr+0x30>
    5710:	40 91 f8 07 	lds	r20, 0x07F8	; 0x8007f8 <registerMap+0x2>
    5714:	84 17       	cp	r24, r20
    5716:	88 f0       	brcs	.+34     	; 0x573a <moduleBit_to_registerNr+0x2e>
    5718:	68 2f       	mov	r22, r24
    571a:	70 e0       	ldi	r23, 0x00	; 0
    571c:	e6 ef       	ldi	r30, 0xF6	; 246
    571e:	f7 e0       	ldi	r31, 0x07	; 7
    5720:	21 81       	ldd	r18, Z+1	; 0x01
    5722:	30 e0       	ldi	r19, 0x00	; 0
    5724:	24 0f       	add	r18, r20
    5726:	31 1d       	adc	r19, r1
    5728:	50 81       	ld	r21, Z
    572a:	25 1b       	sub	r18, r21
    572c:	31 09       	sbc	r19, r1
    572e:	26 17       	cp	r18, r22
    5730:	37 07       	cpc	r19, r23
    5732:	1c f0       	brlt	.+6      	; 0x573a <moduleBit_to_registerNr+0x2e>
    5734:	84 1b       	sub	r24, r20
    5736:	85 0f       	add	r24, r21
    5738:	08 95       	ret
    573a:	9f 5f       	subi	r25, 0xFF	; 255
    573c:	98 30       	cpi	r25, 0x08	; 8
    573e:	40 f3       	brcs	.-48     	; 0x5710 <moduleBit_to_registerNr+0x4>
    5740:	8f ef       	ldi	r24, 0xFF	; 255
    5742:	08 95       	ret

00005744 <read_Register>:
    5744:	cf 93       	push	r28
    5746:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    574a:	89 17       	cp	r24, r25
    574c:	08 f0       	brcs	.+2      	; 0x5750 <read_Register+0xc>
    574e:	3c c0       	rjmp	.+120    	; 0x57c8 <read_Register+0x84>
    5750:	c6 2f       	mov	r28, r22
    5752:	c1 df       	rcall	.-126    	; 0x56d6 <regNr_to_moduleBit>
    5754:	81 11       	cpse	r24, r1
    5756:	30 c0       	rjmp	.+96     	; 0x57b8 <read_Register+0x74>
    5758:	29 2f       	mov	r18, r25
    575a:	2f 71       	andi	r18, 0x1F	; 31
    575c:	92 95       	swap	r25
    575e:	96 95       	lsr	r25
    5760:	97 70       	andi	r25, 0x07	; 7
    5762:	41 e0       	ldi	r20, 0x01	; 1
    5764:	50 e0       	ldi	r21, 0x00	; 0
    5766:	02 c0       	rjmp	.+4      	; 0x576c <read_Register+0x28>
    5768:	44 0f       	add	r20, r20
    576a:	55 1f       	adc	r21, r21
    576c:	9a 95       	dec	r25
    576e:	e2 f7       	brpl	.-8      	; 0x5768 <read_Register+0x24>
    5770:	30 e0       	ldi	r19, 0x00	; 0
    5772:	f9 01       	movw	r30, r18
    5774:	ee 0f       	add	r30, r30
    5776:	ff 1f       	adc	r31, r31
    5778:	ee 0f       	add	r30, r30
    577a:	ff 1f       	adc	r31, r31
    577c:	ee 0f       	add	r30, r30
    577e:	ff 1f       	adc	r31, r31
    5780:	e7 5b       	subi	r30, 0xB7	; 183
    5782:	fd 4f       	sbci	r31, 0xFD	; 253
    5784:	91 81       	ldd	r25, Z+1	; 0x01
    5786:	94 23       	and	r25, r20
    5788:	11 f4       	brne	.+4      	; 0x578e <read_Register+0x4a>
    578a:	c1 fd       	sbrc	r28, 1
    578c:	17 c0       	rjmp	.+46     	; 0x57bc <read_Register+0x78>
    578e:	22 0f       	add	r18, r18
    5790:	33 1f       	adc	r19, r19
    5792:	22 0f       	add	r18, r18
    5794:	33 1f       	adc	r19, r19
    5796:	22 0f       	add	r18, r18
    5798:	33 1f       	adc	r19, r19
    579a:	f9 01       	movw	r30, r18
    579c:	e7 5b       	subi	r30, 0xB7	; 183
    579e:	fd 4f       	sbci	r31, 0xFD	; 253
    57a0:	26 81       	ldd	r18, Z+6	; 0x06
    57a2:	42 23       	and	r20, r18
    57a4:	11 f0       	breq	.+4      	; 0x57aa <read_Register+0x66>
    57a6:	c0 fd       	sbrc	r28, 0
    57a8:	0b c0       	rjmp	.+22     	; 0x57c0 <read_Register+0x7c>
    57aa:	99 23       	and	r25, r25
    57ac:	71 f0       	breq	.+28     	; 0x57ca <read_Register+0x86>
    57ae:	44 23       	and	r20, r20
    57b0:	61 f0       	breq	.+24     	; 0x57ca <read_Register+0x86>
    57b2:	c4 30       	cpi	r28, 0x04	; 4
    57b4:	51 f4       	brne	.+20     	; 0x57ca <read_Register+0x86>
    57b6:	06 c0       	rjmp	.+12     	; 0x57c4 <read_Register+0x80>
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	07 c0       	rjmp	.+14     	; 0x57ca <read_Register+0x86>
    57bc:	81 e0       	ldi	r24, 0x01	; 1
    57be:	05 c0       	rjmp	.+10     	; 0x57ca <read_Register+0x86>
    57c0:	81 e0       	ldi	r24, 0x01	; 1
    57c2:	03 c0       	rjmp	.+6      	; 0x57ca <read_Register+0x86>
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	01 c0       	rjmp	.+2      	; 0x57ca <read_Register+0x86>
    57c8:	80 e0       	ldi	r24, 0x00	; 0
    57ca:	cf 91       	pop	r28
    57cc:	08 95       	ret

000057ce <get_RegisterStatus>:
    57ce:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    57d2:	89 17       	cp	r24, r25
    57d4:	78 f5       	brcc	.+94     	; 0x5834 <get_RegisterStatus+0x66>
    57d6:	7f df       	rcall	.-258    	; 0x56d6 <regNr_to_moduleBit>
    57d8:	81 11       	cpse	r24, r1
    57da:	28 c0       	rjmp	.+80     	; 0x582c <get_RegisterStatus+0x5e>
    57dc:	29 2f       	mov	r18, r25
    57de:	2f 71       	andi	r18, 0x1F	; 31
    57e0:	39 2f       	mov	r19, r25
    57e2:	32 95       	swap	r19
    57e4:	36 95       	lsr	r19
    57e6:	37 70       	andi	r19, 0x07	; 7
    57e8:	81 e0       	ldi	r24, 0x01	; 1
    57ea:	90 e0       	ldi	r25, 0x00	; 0
    57ec:	02 c0       	rjmp	.+4      	; 0x57f2 <get_RegisterStatus+0x24>
    57ee:	88 0f       	add	r24, r24
    57f0:	99 1f       	adc	r25, r25
    57f2:	3a 95       	dec	r19
    57f4:	e2 f7       	brpl	.-8      	; 0x57ee <get_RegisterStatus+0x20>
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	f9 01       	movw	r30, r18
    57fa:	ee 0f       	add	r30, r30
    57fc:	ff 1f       	adc	r31, r31
    57fe:	ee 0f       	add	r30, r30
    5800:	ff 1f       	adc	r31, r31
    5802:	ee 0f       	add	r30, r30
    5804:	ff 1f       	adc	r31, r31
    5806:	e7 5b       	subi	r30, 0xB7	; 183
    5808:	fd 4f       	sbci	r31, 0xFD	; 253
    580a:	41 81       	ldd	r20, Z+1	; 0x01
    580c:	48 23       	and	r20, r24
    580e:	81 f0       	breq	.+32     	; 0x5830 <get_RegisterStatus+0x62>
    5810:	22 0f       	add	r18, r18
    5812:	33 1f       	adc	r19, r19
    5814:	22 0f       	add	r18, r18
    5816:	33 1f       	adc	r19, r19
    5818:	22 0f       	add	r18, r18
    581a:	33 1f       	adc	r19, r19
    581c:	f9 01       	movw	r30, r18
    581e:	e7 5b       	subi	r30, 0xB7	; 183
    5820:	fd 4f       	sbci	r31, 0xFD	; 253
    5822:	96 81       	ldd	r25, Z+6	; 0x06
    5824:	89 23       	and	r24, r25
    5826:	39 f0       	breq	.+14     	; 0x5836 <get_RegisterStatus+0x68>
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	08 95       	ret
    582c:	80 e0       	ldi	r24, 0x00	; 0
    582e:	08 95       	ret
    5830:	82 e0       	ldi	r24, 0x02	; 2
    5832:	08 95       	ret
    5834:	80 e0       	ldi	r24, 0x00	; 0
    5836:	08 95       	ret

00005838 <count_Registers>:
    5838:	1f 93       	push	r17
    583a:	cf 93       	push	r28
    583c:	df 93       	push	r29
    583e:	18 2f       	mov	r17, r24
    5840:	c0 e0       	ldi	r28, 0x00	; 0
    5842:	d0 e0       	ldi	r29, 0x00	; 0
    5844:	06 c0       	rjmp	.+12     	; 0x5852 <count_Registers+0x1a>
    5846:	61 2f       	mov	r22, r17
    5848:	8c 2f       	mov	r24, r28
    584a:	7c df       	rcall	.-264    	; 0x5744 <read_Register>
    584c:	81 11       	cpse	r24, r1
    584e:	df 5f       	subi	r29, 0xFF	; 255
    5850:	cf 5f       	subi	r28, 0xFF	; 255
    5852:	c0 34       	cpi	r28, 0x40	; 64
    5854:	c0 f3       	brcs	.-16     	; 0x5846 <count_Registers+0xe>
    5856:	8d 2f       	mov	r24, r29
    5858:	df 91       	pop	r29
    585a:	cf 91       	pop	r28
    585c:	1f 91       	pop	r17
    585e:	08 95       	ret

00005860 <read_allRegister>:
    5860:	ef 92       	push	r14
    5862:	ff 92       	push	r15
    5864:	0f 93       	push	r16
    5866:	1f 93       	push	r17
    5868:	cf 93       	push	r28
    586a:	df 93       	push	r29
    586c:	7c 01       	movw	r14, r24
    586e:	c0 e0       	ldi	r28, 0x00	; 0
    5870:	d0 e0       	ldi	r29, 0x00	; 0
    5872:	00 e0       	ldi	r16, 0x00	; 0
    5874:	17 c0       	rjmp	.+46     	; 0x58a4 <read_allRegister+0x44>
    5876:	1c 2f       	mov	r17, r28
    5878:	17 70       	andi	r17, 0x07	; 7
    587a:	09 f4       	brne	.+2      	; 0x587e <read_allRegister+0x1e>
    587c:	d0 e0       	ldi	r29, 0x00	; 0
    587e:	d6 95       	lsr	r29
    5880:	63 e0       	ldi	r22, 0x03	; 3
    5882:	8c 2f       	mov	r24, r28
    5884:	5f df       	rcall	.-322    	; 0x5744 <read_Register>
    5886:	88 23       	and	r24, r24
    5888:	11 f0       	breq	.+4      	; 0x588e <read_allRegister+0x2e>
    588a:	d0 68       	ori	r29, 0x80	; 128
    588c:	0f 5f       	subi	r16, 0xFF	; 255
    588e:	17 30       	cpi	r17, 0x07	; 7
    5890:	41 f4       	brne	.+16     	; 0x58a2 <read_allRegister+0x42>
    5892:	e1 14       	cp	r14, r1
    5894:	f1 04       	cpc	r15, r1
    5896:	29 f0       	breq	.+10     	; 0x58a2 <read_allRegister+0x42>
    5898:	f7 01       	movw	r30, r14
    589a:	d0 83       	st	Z, r29
    589c:	c7 01       	movw	r24, r14
    589e:	01 96       	adiw	r24, 0x01	; 1
    58a0:	7c 01       	movw	r14, r24
    58a2:	cf 5f       	subi	r28, 0xFF	; 255
    58a4:	c0 34       	cpi	r28, 0x40	; 64
    58a6:	38 f3       	brcs	.-50     	; 0x5876 <read_allRegister+0x16>
    58a8:	80 2f       	mov	r24, r16
    58aa:	df 91       	pop	r29
    58ac:	cf 91       	pop	r28
    58ae:	1f 91       	pop	r17
    58b0:	0f 91       	pop	r16
    58b2:	ff 90       	pop	r15
    58b4:	ef 90       	pop	r14
    58b6:	08 95       	ret

000058b8 <register_onOff>:
    58b8:	cf 93       	push	r28
    58ba:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    58be:	89 17       	cp	r24, r25
    58c0:	b8 f5       	brcc	.+110    	; 0x5930 <register_onOff+0x78>
    58c2:	c6 2f       	mov	r28, r22
    58c4:	08 df       	rcall	.-496    	; 0x56d6 <regNr_to_moduleBit>
    58c6:	81 11       	cpse	r24, r1
    58c8:	33 c0       	rjmp	.+102    	; 0x5930 <register_onOff+0x78>
    58ca:	e9 2f       	mov	r30, r25
    58cc:	ef 71       	andi	r30, 0x1F	; 31
    58ce:	92 95       	swap	r25
    58d0:	96 95       	lsr	r25
    58d2:	97 70       	andi	r25, 0x07	; 7
    58d4:	c0 ff       	sbrs	r28, 0
    58d6:	17 c0       	rjmp	.+46     	; 0x5906 <register_onOff+0x4e>
    58d8:	f0 e0       	ldi	r31, 0x00	; 0
    58da:	21 e0       	ldi	r18, 0x01	; 1
    58dc:	30 e0       	ldi	r19, 0x00	; 0
    58de:	a9 01       	movw	r20, r18
    58e0:	02 c0       	rjmp	.+4      	; 0x58e6 <register_onOff+0x2e>
    58e2:	44 0f       	add	r20, r20
    58e4:	55 1f       	adc	r21, r21
    58e6:	9a 95       	dec	r25
    58e8:	e2 f7       	brpl	.-8      	; 0x58e2 <register_onOff+0x2a>
    58ea:	ca 01       	movw	r24, r20
    58ec:	ee 0f       	add	r30, r30
    58ee:	ff 1f       	adc	r31, r31
    58f0:	ee 0f       	add	r30, r30
    58f2:	ff 1f       	adc	r31, r31
    58f4:	ee 0f       	add	r30, r30
    58f6:	ff 1f       	adc	r31, r31
    58f8:	e7 5b       	subi	r30, 0xB7	; 183
    58fa:	fd 4f       	sbci	r31, 0xFD	; 253
    58fc:	80 95       	com	r24
    58fe:	91 81       	ldd	r25, Z+1	; 0x01
    5900:	89 23       	and	r24, r25
    5902:	81 83       	std	Z+1, r24	; 0x01
    5904:	15 c0       	rjmp	.+42     	; 0x5930 <register_onOff+0x78>
    5906:	f0 e0       	ldi	r31, 0x00	; 0
    5908:	21 e0       	ldi	r18, 0x01	; 1
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	a9 01       	movw	r20, r18
    590e:	02 c0       	rjmp	.+4      	; 0x5914 <register_onOff+0x5c>
    5910:	44 0f       	add	r20, r20
    5912:	55 1f       	adc	r21, r21
    5914:	9a 95       	dec	r25
    5916:	e2 f7       	brpl	.-8      	; 0x5910 <register_onOff+0x58>
    5918:	ca 01       	movw	r24, r20
    591a:	ee 0f       	add	r30, r30
    591c:	ff 1f       	adc	r31, r31
    591e:	ee 0f       	add	r30, r30
    5920:	ff 1f       	adc	r31, r31
    5922:	ee 0f       	add	r30, r30
    5924:	ff 1f       	adc	r31, r31
    5926:	e7 5b       	subi	r30, 0xB7	; 183
    5928:	fd 4f       	sbci	r31, 0xFD	; 253
    592a:	91 81       	ldd	r25, Z+1	; 0x01
    592c:	89 2b       	or	r24, r25
    592e:	81 83       	std	Z+1, r24	; 0x01
    5930:	cf 91       	pop	r28
    5932:	08 95       	ret

00005934 <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    5934:	bf 92       	push	r11
    5936:	cf 92       	push	r12
    5938:	df 92       	push	r13
    593a:	ef 92       	push	r14
    593c:	ff 92       	push	r15
    593e:	0f 93       	push	r16
    5940:	1f 93       	push	r17
    5942:	cf 93       	push	r28
    5944:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    5946:	80 34       	cpi	r24, 0x40	; 64
    5948:	08 f0       	brcs	.+2      	; 0x594c <program_toRegister+0x18>
    594a:	40 c0       	rjmp	.+128    	; 0x59cc <program_toRegister+0x98>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    594c:	e8 2e       	mov	r14, r24
    594e:	f1 2c       	mov	r15, r1
    5950:	f7 01       	movw	r30, r14
    5952:	ee 0f       	add	r30, r30
    5954:	ff 1f       	adc	r31, r31
    5956:	c7 01       	movw	r24, r14
    5958:	88 0f       	add	r24, r24
    595a:	99 1f       	adc	r25, r25
    595c:	88 0f       	add	r24, r24
    595e:	99 1f       	adc	r25, r25
    5960:	88 0f       	add	r24, r24
    5962:	99 1f       	adc	r25, r25
    5964:	e8 0f       	add	r30, r24
    5966:	f9 1f       	adc	r31, r25
    5968:	ee 59       	subi	r30, 0x9E	; 158
    596a:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    596c:	b1 2c       	mov	r11, r1
uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
    596e:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5970:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5972:	18 c0       	rjmp	.+48     	; 0x59a4 <program_toRegister+0x70>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5974:	6f 01       	movw	r12, r30
    5976:	8f ef       	ldi	r24, 0xFF	; 255
    5978:	c8 1a       	sub	r12, r24
    597a:	d8 0a       	sbc	r13, r24
    597c:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    597e:	d0 e0       	ldi	r29, 0x00	; 0
    5980:	0d c0       	rjmp	.+26     	; 0x599c <program_toRegister+0x68>
				if ((regBits & 0x01) != 0) {
    5982:	8c 2f       	mov	r24, r28
    5984:	81 70       	andi	r24, 0x01	; 1
    5986:	c0 fd       	sbrc	r28, 0
					result++;
    5988:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    598a:	61 e0       	ldi	r22, 0x01	; 1
    598c:	81 11       	cpse	r24, r1
    598e:	01 c0       	rjmp	.+2      	; 0x5992 <program_toRegister+0x5e>
    5990:	60 e0       	ldi	r22, 0x00	; 0
    5992:	81 2f       	mov	r24, r17
    5994:	91 df       	rcall	.-222    	; 0x58b8 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    5996:	c6 95       	lsr	r28
				regNr++;
    5998:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    599a:	df 5f       	subi	r29, 0xFF	; 255
    599c:	d8 30       	cpi	r29, 0x08	; 8
    599e:	88 f3       	brcs	.-30     	; 0x5982 <program_toRegister+0x4e>
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    59a0:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    59a2:	f6 01       	movw	r30, r12
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    59a4:	87 e0       	ldi	r24, 0x07	; 7
    59a6:	8b 15       	cp	r24, r11
    59a8:	28 f7       	brcc	.-54     	; 0x5974 <program_toRegister+0x40>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    59aa:	f7 01       	movw	r30, r14
    59ac:	ee 0f       	add	r30, r30
    59ae:	ff 1f       	adc	r31, r31
    59b0:	ee 0c       	add	r14, r14
    59b2:	ff 1c       	adc	r15, r15
    59b4:	ee 0c       	add	r14, r14
    59b6:	ff 1c       	adc	r15, r15
    59b8:	ee 0c       	add	r14, r14
    59ba:	ff 1c       	adc	r15, r15
    59bc:	ee 0d       	add	r30, r14
    59be:	ff 1d       	adc	r31, r15
    59c0:	ee 59       	subi	r30, 0x9E	; 158
    59c2:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    59c4:	80 85       	ldd	r24, Z+8	; 0x08
    59c6:	91 85       	ldd	r25, Z+9	; 0x09
    59c8:	f1 dd       	rcall	.-1054   	; 0x55ac <setAllCouplers>
    59ca:	01 c0       	rjmp	.+2      	; 0x59ce <program_toRegister+0x9a>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    59cc:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    59ce:	80 2f       	mov	r24, r16
    59d0:	df 91       	pop	r29
    59d2:	cf 91       	pop	r28
    59d4:	1f 91       	pop	r17
    59d6:	0f 91       	pop	r16
    59d8:	ff 90       	pop	r15
    59da:	ef 90       	pop	r14
    59dc:	df 90       	pop	r13
    59de:	cf 90       	pop	r12
    59e0:	bf 90       	pop	r11
    59e2:	08 95       	ret

000059e4 <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    59e4:	cf 93       	push	r28
    59e6:	df 93       	push	r29
    59e8:	c8 2f       	mov	r28, r24
    59ea:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    59ec:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting+0x2>
    59f0:	81 11       	cpse	r24, r1
    59f2:	14 c0       	rjmp	.+40     	; 0x5a1c <midi_ProgramChange+0x38>
    59f4:	1f c0       	rjmp	.+62     	; 0x5a34 <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    59f6:	ec 2f       	mov	r30, r28
    59f8:	f0 e0       	ldi	r31, 0x00	; 0
    59fa:	ee 0f       	add	r30, r30
    59fc:	ff 1f       	adc	r31, r31
    59fe:	ee 0f       	add	r30, r30
    5a00:	ff 1f       	adc	r31, r31
    5a02:	e8 0f       	add	r30, r24
    5a04:	f1 1d       	adc	r31, r1
    5a06:	ee 0f       	add	r30, r30
    5a08:	ff 1f       	adc	r31, r31
    5a0a:	ee 0f       	add	r30, r30
    5a0c:	ff 1f       	adc	r31, r31
    5a0e:	ea 5d       	subi	r30, 0xDA	; 218
    5a10:	f7 4f       	sbci	r31, 0xF7	; 247
    5a12:	90 81       	ld	r25, Z
    5a14:	9f 3f       	cpi	r25, 0xFF	; 255
    5a16:	39 f4       	brne	.+14     	; 0x5a26 <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    5a18:	8f 5f       	subi	r24, 0xFF	; 255
    5a1a:	01 c0       	rjmp	.+2      	; 0x5a1e <midi_ProgramChange+0x3a>
    5a1c:	80 e0       	ldi	r24, 0x00	; 0
    5a1e:	84 30       	cpi	r24, 0x04	; 4
    5a20:	50 f3       	brcs	.-44     	; 0x59f6 <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    5a22:	80 e0       	ldi	r24, 0x00	; 0
    5a24:	01 c0       	rjmp	.+2      	; 0x5a28 <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    5a26:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    5a28:	8f 3f       	cpi	r24, 0xFF	; 255
    5a2a:	21 f4       	brne	.+8      	; 0x5a34 <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    5a2c:	8d 2f       	mov	r24, r29
    5a2e:	82 df       	rcall	.-252    	; 0x5934 <program_toRegister>
			midiLastProgram = program;
    5a30:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    5a34:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    5a38:	c8 13       	cpse	r28, r24
    5a3a:	08 c0       	rjmp	.+16     	; 0x5a4c <midi_ProgramChange+0x68>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    5a3c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    5a40:	8f 3f       	cpi	r24, 0xFF	; 255
    5a42:	21 f0       	breq	.+8      	; 0x5a4c <midi_ProgramChange+0x68>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    5a44:	80 6c       	ori	r24, 0xC0	; 192
    5a46:	2e d5       	rcall	.+2652   	; 0x64a4 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    5a48:	8d 2f       	mov	r24, r29
    5a4a:	2c d5       	rcall	.+2648   	; 0x64a4 <serial1MIDISend>
    5a4c:	df 91       	pop	r29
		}
	}
}
    5a4e:	cf 91       	pop	r28
    5a50:	08 95       	ret

00005a52 <midi_resetRegisters>:
    5a52:	cf 93       	push	r28


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5a54:	c0 e0       	ldi	r28, 0x00	; 0
    5a56:	04 c0       	rjmp	.+8      	; 0x5a60 <midi_resetRegisters+0xe>
		register_onOff(i,REGISTER_OFF);
    5a58:	60 e0       	ldi	r22, 0x00	; 0
    5a5a:	8c 2f       	mov	r24, r28
    5a5c:	2d df       	rcall	.-422    	; 0x58b8 <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5a5e:	cf 5f       	subi	r28, 0xFF	; 255
    5a60:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <registerCount>
    5a64:	c8 17       	cp	r28, r24
    5a66:	c0 f3       	brcs	.-16     	; 0x5a58 <midi_resetRegisters+0x6>
		register_onOff(i,REGISTER_OFF);
	}
}
    5a68:	cf 91       	pop	r28
    5a6a:	08 95       	ret

00005a6c <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5a6c:	0f 93       	push	r16
    5a6e:	1f 93       	push	r17
    5a70:	cf 93       	push	r28
    5a72:	df 93       	push	r29
    5a74:	c8 2f       	mov	r28, r24
    5a76:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5a78:	80 34       	cpi	r24, 0x40	; 64
    5a7a:	90 f4       	brcc	.+36     	; 0x5aa0 <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5a7c:	28 2f       	mov	r18, r24
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	c9 01       	movw	r24, r18
    5a82:	88 0f       	add	r24, r24
    5a84:	99 1f       	adc	r25, r25
    5a86:	22 0f       	add	r18, r18
    5a88:	33 1f       	adc	r19, r19
    5a8a:	22 0f       	add	r18, r18
    5a8c:	33 1f       	adc	r19, r19
    5a8e:	22 0f       	add	r18, r18
    5a90:	33 1f       	adc	r19, r19
    5a92:	82 0f       	add	r24, r18
    5a94:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5a96:	8e 59       	subi	r24, 0x9E	; 158
    5a98:	96 4f       	sbci	r25, 0xF6	; 246
    5a9a:	e2 de       	rcall	.-572    	; 0x5860 <read_allRegister>
    5a9c:	18 2f       	mov	r17, r24
    5a9e:	01 c0       	rjmp	.+2      	; 0x5aa2 <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5aa0:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5aa2:	d0 e0       	ldi	r29, 0x00	; 0
    5aa4:	6b dd       	rcall	.-1322   	; 0x557c <getAllCouplers>
    5aa6:	9e 01       	movw	r18, r28
    5aa8:	22 0f       	add	r18, r18
    5aaa:	33 1f       	adc	r19, r19
    5aac:	cc 0f       	add	r28, r28
    5aae:	dd 1f       	adc	r29, r29
    5ab0:	cc 0f       	add	r28, r28
    5ab2:	dd 1f       	adc	r29, r29
    5ab4:	cc 0f       	add	r28, r28
    5ab6:	dd 1f       	adc	r29, r29
    5ab8:	c2 0f       	add	r28, r18
    5aba:	d3 1f       	adc	r29, r19
    5abc:	ce 59       	subi	r28, 0x9E	; 158
    5abe:	d6 4f       	sbci	r29, 0xF6	; 246
    5ac0:	99 87       	std	Y+9, r25	; 0x09
    5ac2:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5ac4:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5ac6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <eeprom_UpdateProg>
	}
	return result;
}
    5aca:	81 2f       	mov	r24, r17
    5acc:	df 91       	pop	r29
    5ace:	cf 91       	pop	r28
    5ad0:	1f 91       	pop	r17
    5ad2:	0f 91       	pop	r16
    5ad4:	08 95       	ret

00005ad6 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5ad6:	ff 92       	push	r15
    5ad8:	0f 93       	push	r16
    5ada:	1f 93       	push	r17
    5adc:	cf 93       	push	r28
    5ade:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	8c 01       	movw	r16, r24
    5ae4:	00 0f       	add	r16, r16
    5ae6:	11 1f       	adc	r17, r17
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	88 0f       	add	r24, r24
    5af2:	99 1f       	adc	r25, r25
    5af4:	08 0f       	add	r16, r24
    5af6:	19 1f       	adc	r17, r25
    5af8:	0e 59       	subi	r16, 0x9E	; 158
    5afa:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5afc:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5afe:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5b00:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5b02:	15 c0       	rjmp	.+42     	; 0x5b2e <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5b04:	9c 2f       	mov	r25, r28
    5b06:	97 70       	andi	r25, 0x07	; 7
    5b08:	21 f4       	brne	.+8      	; 0x5b12 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5b0a:	f8 01       	movw	r30, r16
    5b0c:	d0 81       	ld	r29, Z
    5b0e:	0f 5f       	subi	r16, 0xFF	; 255
    5b10:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5b12:	8c 2f       	mov	r24, r28
    5b14:	5c de       	rcall	.-840    	; 0x57ce <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5b16:	d0 ff       	sbrs	r29, 0
    5b18:	03 c0       	rjmp	.+6      	; 0x5b20 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5b1a:	82 30       	cpi	r24, 0x02	; 2
    5b1c:	31 f0       	breq	.+12     	; 0x5b2a <midi_RegisterMatchProgram+0x54>
    5b1e:	0d c0       	rjmp	.+26     	; 0x5b3a <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5b20:	82 30       	cpi	r24, 0x02	; 2
    5b22:	69 f0       	breq	.+26     	; 0x5b3e <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5b24:	81 30       	cpi	r24, 0x01	; 1
    5b26:	09 f4       	brne	.+2      	; 0x5b2a <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5b28:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5b2a:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5b2c:	cf 5f       	subi	r28, 0xFF	; 255
    5b2e:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5b32:	c9 17       	cp	r28, r25
    5b34:	38 f3       	brcs	.-50     	; 0x5b04 <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5b36:	8f 2d       	mov	r24, r15
    5b38:	03 c0       	rjmp	.+6      	; 0x5b40 <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5b3a:	8f ef       	ldi	r24, 0xFF	; 255
    5b3c:	01 c0       	rjmp	.+2      	; 0x5b40 <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5b3e:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5b40:	df 91       	pop	r29
    5b42:	cf 91       	pop	r28
    5b44:	1f 91       	pop	r17
    5b46:	0f 91       	pop	r16
    5b48:	ff 90       	pop	r15
    5b4a:	08 95       	ret

00005b4c <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	fc 01       	movw	r30, r24
    5b50:	ee 0f       	add	r30, r30
    5b52:	ff 1f       	adc	r31, r31
    5b54:	88 0f       	add	r24, r24
    5b56:	99 1f       	adc	r25, r25
    5b58:	88 0f       	add	r24, r24
    5b5a:	99 1f       	adc	r25, r25
    5b5c:	88 0f       	add	r24, r24
    5b5e:	99 1f       	adc	r25, r25
    5b60:	e8 0f       	add	r30, r24
    5b62:	f9 1f       	adc	r31, r25
    5b64:	ee 59       	subi	r30, 0x9E	; 158
    5b66:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5b68:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5b6a:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    5b6c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5b6e:	09 c0       	rjmp	.+18     	; 0x5b82 <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    5b70:	39 2f       	mov	r19, r25
    5b72:	37 70       	andi	r19, 0x07	; 7
    5b74:	11 f4       	brne	.+4      	; 0x5b7a <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    5b76:	20 81       	ld	r18, Z
    5b78:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    5b7a:	20 fd       	sbrc	r18, 0
			result++;
    5b7c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    5b7e:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5b80:	9f 5f       	subi	r25, 0xFF	; 255
    5b82:	30 91 0e 08 	lds	r19, 0x080E	; 0x80080e <registerCount>
    5b86:	93 17       	cp	r25, r19
    5b88:	98 f3       	brcs	.-26     	; 0x5b70 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    5b8a:	08 95       	ret

00005b8c <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5b8c:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    5b8e:	e6 e2       	ldi	r30, 0x26	; 38
    5b90:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5b92:	07 c0       	rjmp	.+14     	; 0x5ba2 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    5b94:	8f ef       	ldi	r24, 0xFF	; 255
    5b96:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    5b98:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    5b9a:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    5b9c:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    5b9e:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5ba0:	91 50       	subi	r25, 0x01	; 1
    5ba2:	91 11       	cpse	r25, r1
    5ba4:	f7 cf       	rjmp	.-18     	; 0x5b94 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    5ba6:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <eeprom_ReadMidiInMap>
    5baa:	8f 3f       	cpi	r24, 0xFF	; 255
    5bac:	01 f5       	brne	.+64     	; 0x5bee <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5bae:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    5bb2:	e6 e2       	ldi	r30, 0x26	; 38
    5bb4:	f8 e0       	ldi	r31, 0x08	; 8
    5bb6:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    5bb8:	84 e2       	ldi	r24, 0x24	; 36
    5bba:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    5bbc:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5bbe:	98 e3       	ldi	r25, 0x38	; 56
    5bc0:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    5bc2:	21 e0       	ldi	r18, 0x01	; 1
    5bc4:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    5bc6:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    5bc8:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5bca:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    5bcc:	22 e0       	ldi	r18, 0x02	; 2
    5bce:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    5bd0:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    5bd2:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5bd4:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    5bd6:	93 e0       	ldi	r25, 0x03	; 3
    5bd8:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    5bda:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    5bdc:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    5bde:	8e e1       	ldi	r24, 0x1E	; 30
    5be0:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5be2:	40 e0       	ldi	r20, 0x00	; 0
    5be4:	50 e0       	ldi	r21, 0x00	; 0
    5be6:	61 e0       	ldi	r22, 0x01	; 1
    5be8:	81 e0       	ldi	r24, 0x01	; 1
    5bea:	0e 94 74 14 	call	0x28e8	; 0x28e8 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    5bee:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <eeprom_ReadMidiThrough>
    5bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    5bf4:	51 f4       	brne	.+20     	; 0x5c0a <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    5bf6:	e4 e2       	ldi	r30, 0x24	; 36
    5bf8:	f8 e0       	ldi	r31, 0x08	; 8
    5bfa:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    5bfc:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5bfe:	40 e0       	ldi	r20, 0x00	; 0
    5c00:	50 e0       	ldi	r21, 0x00	; 0
    5c02:	61 e0       	ldi	r22, 0x01	; 1
    5c04:	81 e0       	ldi	r24, 0x01	; 1
    5c06:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <log_putError>
    5c0a:	08 95       	ret

00005c0c <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5c0c:	20 e0       	ldi	r18, 0x00	; 0
    5c0e:	09 c0       	rjmp	.+18     	; 0x5c22 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    5c10:	88 0f       	add	r24, r24
    5c12:	99 1f       	adc	r25, r25
    5c14:	fc 01       	movw	r30, r24
    5c16:	ea 5d       	subi	r30, 0xDA	; 218
    5c18:	f6 4f       	sbci	r31, 0xF6	; 246
    5c1a:	8f ef       	ldi	r24, 0xFF	; 255
    5c1c:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    5c1e:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5c20:	2f 5f       	subi	r18, 0xFF	; 255
    5c22:	82 2f       	mov	r24, r18
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	00 97       	sbiw	r24, 0x00	; 0
    5c28:	99 f7       	brne	.-26     	; 0x5c10 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    5c2a:	0e 94 1c 0a 	call	0x1438	; 0x1438 <eeprom_ReadMidiOutMap>
    5c2e:	8f 3f       	cpi	r24, 0xFF	; 255
    5c30:	b1 f4       	brne	.+44     	; 0x5c5e <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5c32:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    5c36:	e6 e2       	ldi	r30, 0x26	; 38
    5c38:	f9 e0       	ldi	r31, 0x09	; 9
    5c3a:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    5c3c:	91 e0       	ldi	r25, 0x01	; 1
    5c3e:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    5c40:	92 e0       	ldi	r25, 0x02	; 2
    5c42:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    5c44:	93 e0       	ldi	r25, 0x03	; 3
    5c46:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    5c48:	ee e2       	ldi	r30, 0x2E	; 46
    5c4a:	f9 e0       	ldi	r31, 0x09	; 9
    5c4c:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    5c4e:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    5c50:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    5c52:	40 e0       	ldi	r20, 0x00	; 0
    5c54:	50 e0       	ldi	r21, 0x00	; 0
    5c56:	62 e0       	ldi	r22, 0x02	; 2
    5c58:	81 e0       	ldi	r24, 0x01	; 1
    5c5a:	0c 94 74 14 	jmp	0x28e8	; 0x28e8 <log_putError>
    5c5e:	08 95       	ret

00005c60 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    5c60:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    5c62:	8f ef       	ldi	r24, 0xFF	; 255
    5c64:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    5c66:	e4 30       	cpi	r30, 0x04	; 4
    5c68:	50 f4       	brcc	.+20     	; 0x5c7e <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    5c6a:	f0 e0       	ldi	r31, 0x00	; 0
    5c6c:	ee 0f       	add	r30, r30
    5c6e:	ff 1f       	adc	r31, r31
    5c70:	ea 5d       	subi	r30, 0xDA	; 218
    5c72:	f6 4f       	sbci	r31, 0xF6	; 246
    5c74:	20 81       	ld	r18, Z
    5c76:	2f 3f       	cpi	r18, 0xFF	; 255
    5c78:	11 f0       	breq	.+4      	; 0x5c7e <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    5c7a:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    5c7c:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    5c7e:	08 95       	ret

00005c80 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    5c80:	70 e0       	ldi	r23, 0x00	; 0
    5c82:	52 c0       	rjmp	.+164    	; 0x5d28 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    5c84:	87 2f       	mov	r24, r23
    5c86:	90 e0       	ldi	r25, 0x00	; 0
    5c88:	24 2f       	mov	r18, r20
    5c8a:	30 e0       	ldi	r19, 0x00	; 0
    5c8c:	f9 01       	movw	r30, r18
    5c8e:	ee 0f       	add	r30, r30
    5c90:	ff 1f       	adc	r31, r31
    5c92:	df 01       	movw	r26, r30
    5c94:	a2 0f       	add	r26, r18
    5c96:	b3 1f       	adc	r27, r19
    5c98:	fc 01       	movw	r30, r24
    5c9a:	ee 0f       	add	r30, r30
    5c9c:	ff 1f       	adc	r31, r31
    5c9e:	e8 0f       	add	r30, r24
    5ca0:	f9 1f       	adc	r31, r25
    5ca2:	ee 0f       	add	r30, r30
    5ca4:	ff 1f       	adc	r31, r31
    5ca6:	ee 0f       	add	r30, r30
    5ca8:	ff 1f       	adc	r31, r31
    5caa:	ea 0f       	add	r30, r26
    5cac:	fb 1f       	adc	r31, r27
    5cae:	ee 5c       	subi	r30, 0xCE	; 206
    5cb0:	f6 4f       	sbci	r31, 0xF6	; 246
    5cb2:	a0 81       	ld	r26, Z
    5cb4:	af 3f       	cpi	r26, 0xFF	; 255
    5cb6:	d9 f0       	breq	.+54     	; 0x5cee <Midi_updateManualRange+0x6e>
    5cb8:	f9 01       	movw	r30, r18
    5cba:	ee 0f       	add	r30, r30
    5cbc:	ff 1f       	adc	r31, r31
    5cbe:	e2 0f       	add	r30, r18
    5cc0:	f3 1f       	adc	r31, r19
    5cc2:	9c 01       	movw	r18, r24
    5cc4:	22 0f       	add	r18, r18
    5cc6:	33 1f       	adc	r19, r19
    5cc8:	28 0f       	add	r18, r24
    5cca:	39 1f       	adc	r19, r25
    5ccc:	22 0f       	add	r18, r18
    5cce:	33 1f       	adc	r19, r19
    5cd0:	22 0f       	add	r18, r18
    5cd2:	33 1f       	adc	r19, r19
    5cd4:	e2 0f       	add	r30, r18
    5cd6:	f3 1f       	adc	r31, r19
    5cd8:	ee 5c       	subi	r30, 0xCE	; 206
    5cda:	f6 4f       	sbci	r31, 0xF6	; 246
    5cdc:	21 81       	ldd	r18, Z+1	; 0x01
    5cde:	2f 3f       	cpi	r18, 0xFF	; 255
    5ce0:	31 f0       	breq	.+12     	; 0x5cee <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    5ce2:	a6 17       	cp	r26, r22
    5ce4:	08 f4       	brcc	.+2      	; 0x5ce8 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    5ce6:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    5ce8:	52 17       	cp	r21, r18
    5cea:	08 f4       	brcc	.+2      	; 0x5cee <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    5cec:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    5cee:	55 23       	and	r21, r21
    5cf0:	11 f0       	breq	.+4      	; 0x5cf6 <Midi_updateManualRange+0x76>
    5cf2:	6f 3f       	cpi	r22, 0xFF	; 255
    5cf4:	49 f4       	brne	.+18     	; 0x5d08 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    5cf6:	88 0f       	add	r24, r24
    5cf8:	99 1f       	adc	r25, r25
    5cfa:	fc 01       	movw	r30, r24
    5cfc:	e4 5e       	subi	r30, 0xE4	; 228
    5cfe:	f7 4f       	sbci	r31, 0xF7	; 247
    5d00:	8f ef       	ldi	r24, 0xFF	; 255
    5d02:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    5d04:	81 83       	std	Z+1, r24	; 0x01
    5d06:	07 c0       	rjmp	.+14     	; 0x5d16 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    5d08:	88 0f       	add	r24, r24
    5d0a:	99 1f       	adc	r25, r25
    5d0c:	fc 01       	movw	r30, r24
    5d0e:	e4 5e       	subi	r30, 0xE4	; 228
    5d10:	f7 4f       	sbci	r31, 0xF7	; 247
    5d12:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    5d14:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    5d16:	4f 5f       	subi	r20, 0xFF	; 255
    5d18:	03 c0       	rjmp	.+6      	; 0x5d20 <Midi_updateManualRange+0xa0>
    5d1a:	40 e0       	ldi	r20, 0x00	; 0
    5d1c:	6f ef       	ldi	r22, 0xFF	; 255
    5d1e:	50 e0       	ldi	r21, 0x00	; 0
    5d20:	44 30       	cpi	r20, 0x04	; 4
    5d22:	08 f4       	brcc	.+2      	; 0x5d26 <Midi_updateManualRange+0xa6>
    5d24:	af cf       	rjmp	.-162    	; 0x5c84 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    5d26:	7f 5f       	subi	r23, 0xFF	; 255
    5d28:	74 30       	cpi	r23, 0x04	; 4
    5d2a:	b8 f3       	brcs	.-18     	; 0x5d1a <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    5d2c:	08 95       	ret

00005d2e <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    5d2e:	63 e0       	ldi	r22, 0x03	; 3
    5d30:	28 c0       	rjmp	.+80     	; 0x5d82 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    5d32:	86 2f       	mov	r24, r22
    5d34:	06 2e       	mov	r0, r22
    5d36:	00 0c       	add	r0, r0
    5d38:	99 0b       	sbc	r25, r25
    5d3a:	42 2f       	mov	r20, r18
    5d3c:	02 2e       	mov	r0, r18
    5d3e:	00 0c       	add	r0, r0
    5d40:	55 0b       	sbc	r21, r21
    5d42:	fa 01       	movw	r30, r20
    5d44:	ee 0f       	add	r30, r30
    5d46:	ff 1f       	adc	r31, r31
    5d48:	e4 0f       	add	r30, r20
    5d4a:	f5 1f       	adc	r31, r21
    5d4c:	ac 01       	movw	r20, r24
    5d4e:	44 0f       	add	r20, r20
    5d50:	55 1f       	adc	r21, r21
    5d52:	da 01       	movw	r26, r20
    5d54:	a8 0f       	add	r26, r24
    5d56:	b9 1f       	adc	r27, r25
    5d58:	aa 0f       	add	r26, r26
    5d5a:	bb 1f       	adc	r27, r27
    5d5c:	aa 0f       	add	r26, r26
    5d5e:	bb 1f       	adc	r27, r27
    5d60:	ae 0f       	add	r26, r30
    5d62:	bf 1f       	adc	r27, r31
    5d64:	ae 5c       	subi	r26, 0xCE	; 206
    5d66:	b6 4f       	sbci	r27, 0xF6	; 246
    5d68:	3f ef       	ldi	r19, 0xFF	; 255
    5d6a:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    5d6c:	11 96       	adiw	r26, 0x01	; 1
    5d6e:	3c 93       	st	X, r19
    5d70:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    5d72:	fd 01       	movw	r30, r26
    5d74:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    5d76:	21 50       	subi	r18, 0x01	; 1
    5d78:	01 c0       	rjmp	.+2      	; 0x5d7c <init_Manual2Module+0x4e>
    5d7a:	23 e0       	ldi	r18, 0x03	; 3
    5d7c:	22 23       	and	r18, r18
    5d7e:	cc f6       	brge	.-78     	; 0x5d32 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    5d80:	61 50       	subi	r22, 0x01	; 1
    5d82:	66 23       	and	r22, r22
    5d84:	d4 f7       	brge	.-12     	; 0x5d7a <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    5d86:	0e 94 cc 09 	call	0x1398	; 0x1398 <eeprom_ReadManualMap>
    5d8a:	8f 3f       	cpi	r24, 0xFF	; 255
    5d8c:	41 f4       	brne	.+16     	; 0x5d9e <init_Manual2Module+0x70>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    5d8e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    5d92:	40 e0       	ldi	r20, 0x00	; 0
    5d94:	50 e0       	ldi	r21, 0x00	; 0
    5d96:	63 e0       	ldi	r22, 0x03	; 3
    5d98:	81 e0       	ldi	r24, 0x01	; 1
    5d9a:	0e 94 74 14 	call	0x28e8	; 0x28e8 <log_putError>
	}
	Midi_updateManualRange();
    5d9e:	70 cf       	rjmp	.-288    	; 0x5c80 <Midi_updateManualRange>
    5da0:	08 95       	ret

00005da2 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    5da2:	84 30       	cpi	r24, 0x04	; 4
    5da4:	d8 f4       	brcc	.+54     	; 0x5ddc <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    5da6:	90 e0       	ldi	r25, 0x00	; 0
    5da8:	fc 01       	movw	r30, r24
    5daa:	ee 0f       	add	r30, r30
    5dac:	ff 1f       	adc	r31, r31
    5dae:	e8 0f       	add	r30, r24
    5db0:	f9 1f       	adc	r31, r25
    5db2:	ee 0f       	add	r30, r30
    5db4:	ff 1f       	adc	r31, r31
    5db6:	ee 0f       	add	r30, r30
    5db8:	ff 1f       	adc	r31, r31
    5dba:	ee 5c       	subi	r30, 0xCE	; 206
    5dbc:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    5dbe:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    5dc0:	20 81       	ld	r18, Z
    5dc2:	62 17       	cp	r22, r18
    5dc4:	40 f0       	brcs	.+16     	; 0x5dd6 <manualNote_to_moduleBit+0x34>
    5dc6:	91 81       	ldd	r25, Z+1	; 0x01
    5dc8:	96 17       	cp	r25, r22
    5dca:	28 f0       	brcs	.+10     	; 0x5dd6 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    5dcc:	92 81       	ldd	r25, Z+2	; 0x02
    5dce:	62 1b       	sub	r22, r18
				return (result);
    5dd0:	80 e0       	ldi	r24, 0x00	; 0
    5dd2:	96 0f       	add	r25, r22
    5dd4:	08 95       	ret
			}
			pRange++;
    5dd6:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    5dd8:	81 50       	subi	r24, 0x01	; 1
    5dda:	91 f7       	brne	.-28     	; 0x5dc0 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    5ddc:	8f ef       	ldi	r24, 0xFF	; 255
    5dde:	90 e0       	ldi	r25, 0x00	; 0
}
    5de0:	08 95       	ret

00005de2 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    5de2:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    5de4:	e2 e3       	ldi	r30, 0x32	; 50
    5de6:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5de8:	44 e0       	ldi	r20, 0x04	; 4
    5dea:	16 c0       	rjmp	.+44     	; 0x5e18 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    5dec:	52 81       	ldd	r21, Z+2	; 0x02
    5dee:	85 17       	cp	r24, r21
    5df0:	88 f0       	brcs	.+34     	; 0x5e14 <moduleBit_to_manualNote+0x32>
    5df2:	68 2f       	mov	r22, r24
    5df4:	70 e0       	ldi	r23, 0x00	; 0
    5df6:	21 81       	ldd	r18, Z+1	; 0x01
    5df8:	a0 81       	ld	r26, Z
    5dfa:	30 e0       	ldi	r19, 0x00	; 0
    5dfc:	2a 1b       	sub	r18, r26
    5dfe:	31 09       	sbc	r19, r1
    5e00:	25 0f       	add	r18, r21
    5e02:	31 1d       	adc	r19, r1
    5e04:	26 17       	cp	r18, r22
    5e06:	37 07       	cpc	r19, r23
    5e08:	2c f0       	brlt	.+10     	; 0x5e14 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    5e0a:	98 2f       	mov	r25, r24
    5e0c:	95 1b       	sub	r25, r21
				return(result);
    5e0e:	8b 2f       	mov	r24, r27
    5e10:	9a 0f       	add	r25, r26
    5e12:	08 95       	ret
			}
			pRange++;
    5e14:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5e16:	41 50       	subi	r20, 0x01	; 1
    5e18:	41 11       	cpse	r20, r1
    5e1a:	e8 cf       	rjmp	.-48     	; 0x5dec <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    5e1c:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    5e1e:	b5 30       	cpi	r27, 0x05	; 5
    5e20:	18 f3       	brcs	.-58     	; 0x5de8 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    5e22:	8f ef       	ldi	r24, 0xFF	; 255
    5e24:	90 e0       	ldi	r25, 0x00	; 0
}
    5e26:	08 95       	ret

00005e28 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    5e28:	1f 93       	push	r17
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	c8 2f       	mov	r28, r24
    5e30:	16 2f       	mov	r17, r22
    5e32:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    5e34:	b6 df       	rcall	.-148    	; 0x5da2 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    5e36:	39 2f       	mov	r19, r25
    5e38:	32 95       	swap	r19
    5e3a:	36 95       	lsr	r19
    5e3c:	37 70       	andi	r19, 0x07	; 7
    5e3e:	41 e0       	ldi	r20, 0x01	; 1
    5e40:	50 e0       	ldi	r21, 0x00	; 0
    5e42:	ba 01       	movw	r22, r20
    5e44:	02 c0       	rjmp	.+4      	; 0x5e4a <manual_NoteOnOff+0x22>
    5e46:	66 0f       	add	r22, r22
    5e48:	77 1f       	adc	r23, r23
    5e4a:	3a 95       	dec	r19
    5e4c:	e2 f7       	brpl	.-8      	; 0x5e46 <manual_NoteOnOff+0x1e>
    5e4e:	9b 01       	movw	r18, r22
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    5e50:	9f 71       	andi	r25, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    5e52:	81 11       	cpse	r24, r1
    5e54:	2b c0       	rjmp	.+86     	; 0x5eac <manual_NoteOnOff+0x84>
		if (onOff == NOTE_OFF) {
    5e56:	d1 11       	cpse	r29, r1
    5e58:	0e c0       	rjmp	.+28     	; 0x5e76 <manual_NoteOnOff+0x4e>
			// note off -> write 1 to pipe mosfet
			pipe[bitNr].pipeOut |= modulNrMask;
    5e5a:	e9 2f       	mov	r30, r25
    5e5c:	f0 e0       	ldi	r31, 0x00	; 0
    5e5e:	ee 0f       	add	r30, r30
    5e60:	ff 1f       	adc	r31, r31
    5e62:	ee 0f       	add	r30, r30
    5e64:	ff 1f       	adc	r31, r31
    5e66:	ee 0f       	add	r30, r30
    5e68:	ff 1f       	adc	r31, r31
    5e6a:	e7 5b       	subi	r30, 0xB7	; 183
    5e6c:	fd 4f       	sbci	r31, 0xFD	; 253
    5e6e:	81 81       	ldd	r24, Z+1	; 0x01
    5e70:	86 2b       	or	r24, r22
    5e72:	81 83       	std	Z+1, r24	; 0x01
    5e74:	0f c0       	rjmp	.+30     	; 0x5e94 <manual_NoteOnOff+0x6c>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe[bitNr].pipeOut &= ~(modulNrMask);
    5e76:	e9 2f       	mov	r30, r25
    5e78:	f0 e0       	ldi	r31, 0x00	; 0
    5e7a:	ee 0f       	add	r30, r30
    5e7c:	ff 1f       	adc	r31, r31
    5e7e:	ee 0f       	add	r30, r30
    5e80:	ff 1f       	adc	r31, r31
    5e82:	ee 0f       	add	r30, r30
    5e84:	ff 1f       	adc	r31, r31
    5e86:	e7 5b       	subi	r30, 0xB7	; 183
    5e88:	fd 4f       	sbci	r31, 0xFD	; 253
    5e8a:	41 81       	ldd	r20, Z+1	; 0x01
    5e8c:	86 2f       	mov	r24, r22
    5e8e:	80 95       	com	r24
    5e90:	84 23       	and	r24, r20
    5e92:	81 83       	std	Z+1, r24	; 0x01
		}
		// V0.62 direct pipe message if module can't be written
		if ((modulNrMask & pipe_Module.AssnWrite) == 0){
    5e94:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    5e98:	82 23       	and	r24, r18
    5e9a:	41 f4       	brne	.+16     	; 0x5eac <manual_NoteOnOff+0x84>
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    5e9c:	d1 30       	cpi	r29, 0x01	; 1
    5e9e:	11 f4       	brne	.+4      	; 0x5ea4 <manual_NoteOnOff+0x7c>
    5ea0:	40 e2       	ldi	r20, 0x20	; 32
    5ea2:	01 c0       	rjmp	.+2      	; 0x5ea6 <manual_NoteOnOff+0x7e>
    5ea4:	40 e0       	ldi	r20, 0x00	; 0
			pipeMsgPush(myMessage);
    5ea6:	82 2f       	mov	r24, r18
    5ea8:	94 2b       	or	r25, r20
    5eaa:	fa da       	rcall	.-2572   	; 0x54a0 <pipeMsgPush>
		}
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    5eac:	ec 2f       	mov	r30, r28
    5eae:	f0 e0       	ldi	r31, 0x00	; 0
    5eb0:	ee 0f       	add	r30, r30
    5eb2:	ff 1f       	adc	r31, r31
    5eb4:	ea 5d       	subi	r30, 0xDA	; 218
    5eb6:	f6 4f       	sbci	r31, 0xF6	; 246
    5eb8:	81 81       	ldd	r24, Z+1	; 0x01
    5eba:	8f 3f       	cpi	r24, 0xFF	; 255
    5ebc:	d9 f0       	breq	.+54     	; 0x5ef4 <manual_NoteOnOff+0xcc>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    5ebe:	d1 30       	cpi	r29, 0x01	; 1
    5ec0:	31 f0       	breq	.+12     	; 0x5ece <manual_NoteOnOff+0xa6>
    5ec2:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    5ec6:	99 23       	and	r25, r25
    5ec8:	21 f0       	breq	.+8      	; 0x5ed2 <manual_NoteOnOff+0xaa>
    5eca:	90 e9       	ldi	r25, 0x90	; 144
    5ecc:	03 c0       	rjmp	.+6      	; 0x5ed4 <manual_NoteOnOff+0xac>
    5ece:	90 e9       	ldi	r25, 0x90	; 144
    5ed0:	01 c0       	rjmp	.+2      	; 0x5ed4 <manual_NoteOnOff+0xac>
    5ed2:	90 e8       	ldi	r25, 0x80	; 128
    5ed4:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    5ed6:	e6 d2       	rcall	.+1484   	; 0x64a4 <serial1MIDISend>
    5ed8:	81 2f       	mov	r24, r17
    5eda:	e4 d2       	rcall	.+1480   	; 0x64a4 <serial1MIDISend>
		serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    5edc:	d1 11       	cpse	r29, r1
    5ede:	06 c0       	rjmp	.+12     	; 0x5eec <manual_NoteOnOff+0xc4>
    5ee0:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    5ee4:	81 11       	cpse	r24, r1
    5ee6:	04 c0       	rjmp	.+8      	; 0x5ef0 <manual_NoteOnOff+0xc8>
    5ee8:	80 e4       	ldi	r24, 0x40	; 64
    5eea:	03 c0       	rjmp	.+6      	; 0x5ef2 <manual_NoteOnOff+0xca>
    5eec:	80 e4       	ldi	r24, 0x40	; 64
    5eee:	01 c0       	rjmp	.+2      	; 0x5ef2 <manual_NoteOnOff+0xca>
    5ef0:	80 e0       	ldi	r24, 0x00	; 0
    5ef2:	d8 d2       	rcall	.+1456   	; 0x64a4 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    5ef4:	df 91       	pop	r29
    5ef6:	cf 91       	pop	r28
    5ef8:	1f 91       	pop	r17
    5efa:	08 95       	ret

00005efc <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    5efc:	cf 92       	push	r12
    5efe:	df 92       	push	r13
    5f00:	ef 92       	push	r14
    5f02:	ff 92       	push	r15
    5f04:	0f 93       	push	r16
    5f06:	1f 93       	push	r17
    5f08:	cf 93       	push	r28
    5f0a:	df 93       	push	r29
    5f0c:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    5f0e:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    5f10:	3c c0       	rjmp	.+120    	; 0x5f8a <midiAllNotesOff+0x8e>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
    5f12:	0c 2d       	mov	r16, r12
    5f14:	10 e0       	ldi	r17, 0x00	; 0
    5f16:	cd 2d       	mov	r28, r13
    5f18:	d0 e0       	ldi	r29, 0x00	; 0
    5f1a:	f8 01       	movw	r30, r16
    5f1c:	ee 0f       	add	r30, r30
    5f1e:	ff 1f       	adc	r31, r31
    5f20:	ee 0f       	add	r30, r30
    5f22:	ff 1f       	adc	r31, r31
    5f24:	ec 0f       	add	r30, r28
    5f26:	fd 1f       	adc	r31, r29
    5f28:	ee 0f       	add	r30, r30
    5f2a:	ff 1f       	adc	r31, r31
    5f2c:	ee 0f       	add	r30, r30
    5f2e:	ff 1f       	adc	r31, r31
    5f30:	ea 5d       	subi	r30, 0xDA	; 218
    5f32:	f7 4f       	sbci	r31, 0xF7	; 247
    5f34:	80 81       	ld	r24, Z
    5f36:	84 30       	cpi	r24, 0x04	; 4
    5f38:	38 f5       	brcc	.+78     	; 0x5f88 <midiAllNotesOff+0x8c>
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    5f3a:	f8 01       	movw	r30, r16
    5f3c:	ee 0f       	add	r30, r30
    5f3e:	ff 1f       	adc	r31, r31
    5f40:	ee 0f       	add	r30, r30
    5f42:	ff 1f       	adc	r31, r31
    5f44:	ec 0f       	add	r30, r28
    5f46:	fd 1f       	adc	r31, r29
    5f48:	ee 0f       	add	r30, r30
    5f4a:	ff 1f       	adc	r31, r31
    5f4c:	ee 0f       	add	r30, r30
    5f4e:	ff 1f       	adc	r31, r31
    5f50:	ea 5d       	subi	r30, 0xDA	; 218
    5f52:	f7 4f       	sbci	r31, 0xF7	; 247
    5f54:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5f56:	f2 80       	ldd	r15, Z+2	; 0x02
    5f58:	15 c0       	rjmp	.+42     	; 0x5f84 <midiAllNotesOff+0x88>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    5f5a:	ee 24       	eor	r14, r14
    5f5c:	e3 94       	inc	r14
    5f5e:	e6 0e       	add	r14, r22
    5f60:	f8 01       	movw	r30, r16
    5f62:	ee 0f       	add	r30, r30
    5f64:	ff 1f       	adc	r31, r31
    5f66:	ee 0f       	add	r30, r30
    5f68:	ff 1f       	adc	r31, r31
    5f6a:	ec 0f       	add	r30, r28
    5f6c:	fd 1f       	adc	r31, r29
    5f6e:	ee 0f       	add	r30, r30
    5f70:	ff 1f       	adc	r31, r31
    5f72:	ee 0f       	add	r30, r30
    5f74:	ff 1f       	adc	r31, r31
    5f76:	ea 5d       	subi	r30, 0xDA	; 218
    5f78:	f7 4f       	sbci	r31, 0xF7	; 247
    5f7a:	40 e0       	ldi	r20, 0x00	; 0
    5f7c:	80 81       	ld	r24, Z
    5f7e:	54 df       	rcall	.-344    	; 0x5e28 <manual_NoteOnOff>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5f80:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    5f82:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5f84:	f1 10       	cpse	r15, r1
    5f86:	e9 cf       	rjmp	.-46     	; 0x5f5a <midiAllNotesOff+0x5e>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
    5f88:	d3 94       	inc	r13
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    5f8a:	83 e0       	ldi	r24, 0x03	; 3
    5f8c:	8d 15       	cp	r24, r13
    5f8e:	08 f0       	brcs	.+2      	; 0x5f92 <midiAllNotesOff+0x96>
    5f90:	c0 cf       	rjmp	.-128    	; 0x5f12 <midiAllNotesOff+0x16>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
	}
}
    5f92:	df 91       	pop	r29
    5f94:	cf 91       	pop	r28
    5f96:	1f 91       	pop	r17
    5f98:	0f 91       	pop	r16
    5f9a:	ff 90       	pop	r15
    5f9c:	ef 90       	pop	r14
    5f9e:	df 90       	pop	r13
    5fa0:	cf 90       	pop	r12
    5fa2:	08 95       	ret

00005fa4 <midi_ManualOff>:

void midi_ManualOff(uint8_t manual){
    5fa4:	0f 93       	push	r16
    5fa6:	1f 93       	push	r17
    5fa8:	cf 93       	push	r28
    5faa:	df 93       	push	r29
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    5fac:	84 30       	cpi	r24, 0x04	; 4
    5fae:	08 f5       	brcc	.+66     	; 0x5ff2 <midi_ManualOff+0x4e>
    5fb0:	08 2f       	mov	r16, r24
    5fb2:	10 e0       	ldi	r17, 0x00	; 0
    5fb4:	f8 01       	movw	r30, r16
    5fb6:	ee 0f       	add	r30, r30
    5fb8:	ff 1f       	adc	r31, r31
    5fba:	e4 5e       	subi	r30, 0xE4	; 228
    5fbc:	f7 4f       	sbci	r31, 0xF7	; 247
    5fbe:	c0 81       	ld	r28, Z
    5fc0:	cf 3f       	cpi	r28, 0xFF	; 255
    5fc2:	b9 f0       	breq	.+46     	; 0x5ff2 <midi_ManualOff+0x4e>
    5fc4:	d8 2f       	mov	r29, r24
    5fc6:	f8 01       	movw	r30, r16
    5fc8:	ee 0f       	add	r30, r30
    5fca:	ff 1f       	adc	r31, r31
    5fcc:	e4 5e       	subi	r30, 0xE4	; 228
    5fce:	f7 4f       	sbci	r31, 0xF7	; 247
    5fd0:	81 81       	ldd	r24, Z+1	; 0x01
    5fd2:	8f 3f       	cpi	r24, 0xFF	; 255
    5fd4:	31 f4       	brne	.+12     	; 0x5fe2 <midi_ManualOff+0x3e>
    5fd6:	0d c0       	rjmp	.+26     	; 0x5ff2 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF);
    5fd8:	40 e0       	ldi	r20, 0x00	; 0
    5fda:	6c 2f       	mov	r22, r28
    5fdc:	8d 2f       	mov	r24, r29
    5fde:	24 df       	rcall	.-440    	; 0x5e28 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    5fe0:	cf 5f       	subi	r28, 0xFF	; 255
    5fe2:	f8 01       	movw	r30, r16
    5fe4:	ee 0f       	add	r30, r30
    5fe6:	ff 1f       	adc	r31, r31
    5fe8:	e4 5e       	subi	r30, 0xE4	; 228
    5fea:	f7 4f       	sbci	r31, 0xF7	; 247
    5fec:	91 81       	ldd	r25, Z+1	; 0x01
    5fee:	9c 17       	cp	r25, r28
    5ff0:	98 f7       	brcc	.-26     	; 0x5fd8 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF);
		}
	}
}
    5ff2:	df 91       	pop	r29
    5ff4:	cf 91       	pop	r28
    5ff6:	1f 91       	pop	r17
    5ff8:	0f 91       	pop	r16
    5ffa:	08 95       	ret

00005ffc <midi_AllManualsOff>:

void midi_AllManualsOff(){
    5ffc:	cf 93       	push	r28
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    5ffe:	c0 e0       	ldi	r28, 0x00	; 0
    6000:	03 c0       	rjmp	.+6      	; 0x6008 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6002:	8c 2f       	mov	r24, r28
    6004:	cf df       	rcall	.-98     	; 0x5fa4 <midi_ManualOff>
		}
	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6006:	cf 5f       	subi	r28, 0xFF	; 255
    6008:	c4 30       	cpi	r28, 0x04	; 4
    600a:	d8 f3       	brcs	.-10     	; 0x6002 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    600c:	cf 91       	pop	r28
    600e:	08 95       	ret

00006010 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6010:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    6014:	88 23       	and	r24, r24
    6016:	39 f0       	breq	.+14     	; 0x6026 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6018:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    601c:	81 11       	cpse	r24, r1
    601e:	03 c0       	rjmp	.+6      	; 0x6026 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6020:	ed df       	rcall	.-38     	; 0x5ffc <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6022:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    6026:	08 95       	ret

00006028 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6028:	0f 93       	push	r16
    602a:	1f 93       	push	r17
    602c:	cf 93       	push	r28
    602e:	df 93       	push	r29
    6030:	06 2f       	mov	r16, r22
    6032:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6034:	d8 2f       	mov	r29, r24
    6036:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6038:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    603a:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    603c:	3c c0       	rjmp	.+120    	; 0x60b6 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    603e:	4d 2f       	mov	r20, r29
    6040:	50 e0       	ldi	r21, 0x00	; 0
    6042:	2c 2f       	mov	r18, r28
    6044:	30 e0       	ldi	r19, 0x00	; 0
    6046:	fa 01       	movw	r30, r20
    6048:	ee 0f       	add	r30, r30
    604a:	ff 1f       	adc	r31, r31
    604c:	ee 0f       	add	r30, r30
    604e:	ff 1f       	adc	r31, r31
    6050:	e2 0f       	add	r30, r18
    6052:	f3 1f       	adc	r31, r19
    6054:	ee 0f       	add	r30, r30
    6056:	ff 1f       	adc	r31, r31
    6058:	ee 0f       	add	r30, r30
    605a:	ff 1f       	adc	r31, r31
    605c:	ea 5d       	subi	r30, 0xDA	; 218
    605e:	f7 4f       	sbci	r31, 0xF7	; 247
    6060:	80 81       	ld	r24, Z
    6062:	84 30       	cpi	r24, 0x04	; 4
    6064:	38 f5       	brcc	.+78     	; 0x60b4 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6066:	df 01       	movw	r26, r30
    6068:	61 81       	ldd	r22, Z+1	; 0x01
    606a:	70 2f       	mov	r23, r16
    606c:	76 1b       	sub	r23, r22
    606e:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6070:	0a f1       	brmi	.+66     	; 0x60b4 <midiNote_to_Manual+0x8c>
    6072:	fd 01       	movw	r30, r26
    6074:	e2 81       	ldd	r30, Z+2	; 0x02
    6076:	f0 e0       	ldi	r31, 0x00	; 0
    6078:	a7 2f       	mov	r26, r23
    607a:	77 0f       	add	r23, r23
    607c:	bb 0b       	sbc	r27, r27
    607e:	ae 17       	cp	r26, r30
    6080:	bf 07       	cpc	r27, r31
    6082:	c4 f4       	brge	.+48     	; 0x60b4 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6084:	fa 01       	movw	r30, r20
    6086:	ee 0f       	add	r30, r30
    6088:	ff 1f       	adc	r31, r31
    608a:	ee 0f       	add	r30, r30
    608c:	ff 1f       	adc	r31, r31
    608e:	e2 0f       	add	r30, r18
    6090:	f3 1f       	adc	r31, r19
    6092:	ee 0f       	add	r30, r30
    6094:	ff 1f       	adc	r31, r31
    6096:	ee 0f       	add	r30, r30
    6098:	ff 1f       	adc	r31, r31
    609a:	ea 5d       	subi	r30, 0xDA	; 218
    609c:	f7 4f       	sbci	r31, 0xF7	; 247
    609e:	93 81       	ldd	r25, Z+3	; 0x03
    60a0:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    60a2:	11 30       	cpi	r17, 0x01	; 1
    60a4:	21 f4       	brne	.+8      	; 0x60ae <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    60a6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    60aa:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    60ae:	41 2f       	mov	r20, r17
    60b0:	bb de       	rcall	.-650    	; 0x5e28 <manual_NoteOnOff>
				found |= 0xFF;
    60b2:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    60b4:	cf 5f       	subi	r28, 0xFF	; 255
    60b6:	c4 30       	cpi	r28, 0x04	; 4
    60b8:	08 f4       	brcc	.+2      	; 0x60bc <midiNote_to_Manual+0x94>
    60ba:	c1 cf       	rjmp	.-126    	; 0x603e <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    60bc:	11 30       	cpi	r17, 0x01	; 1
    60be:	49 f4       	brne	.+18     	; 0x60d2 <midiNote_to_Manual+0xaa>
    60c0:	91 11       	cpse	r25, r1
    60c2:	07 c0       	rjmp	.+14     	; 0x60d2 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    60c4:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    60c8:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    60cc:	8f ef       	ldi	r24, 0xFF	; 255
    60ce:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    60d2:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    60d6:	d8 13       	cpse	r29, r24
    60d8:	1f c0       	rjmp	.+62     	; 0x6118 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    60da:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    60de:	8f 3f       	cpi	r24, 0xFF	; 255
    60e0:	d9 f0       	breq	.+54     	; 0x6118 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    60e2:	11 30       	cpi	r17, 0x01	; 1
    60e4:	31 f0       	breq	.+12     	; 0x60f2 <midiNote_to_Manual+0xca>
    60e6:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    60ea:	99 23       	and	r25, r25
    60ec:	21 f0       	breq	.+8      	; 0x60f6 <midiNote_to_Manual+0xce>
    60ee:	90 e9       	ldi	r25, 0x90	; 144
    60f0:	03 c0       	rjmp	.+6      	; 0x60f8 <midiNote_to_Manual+0xd0>
    60f2:	90 e9       	ldi	r25, 0x90	; 144
    60f4:	01 c0       	rjmp	.+2      	; 0x60f8 <midiNote_to_Manual+0xd0>
    60f6:	90 e8       	ldi	r25, 0x80	; 128
    60f8:	89 2b       	or	r24, r25
    60fa:	d4 d1       	rcall	.+936    	; 0x64a4 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    60fc:	80 2f       	mov	r24, r16
    60fe:	d2 d1       	rcall	.+932    	; 0x64a4 <serial1MIDISend>
    6100:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6102:	06 c0       	rjmp	.+12     	; 0x6110 <midiNote_to_Manual+0xe8>
    6104:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    6108:	81 11       	cpse	r24, r1
    610a:	04 c0       	rjmp	.+8      	; 0x6114 <midiNote_to_Manual+0xec>
    610c:	80 e4       	ldi	r24, 0x40	; 64
    610e:	03 c0       	rjmp	.+6      	; 0x6116 <midiNote_to_Manual+0xee>
    6110:	80 e4       	ldi	r24, 0x40	; 64
    6112:	01 c0       	rjmp	.+2      	; 0x6116 <midiNote_to_Manual+0xee>
    6114:	80 e0       	ldi	r24, 0x00	; 0
    6116:	c6 d1       	rcall	.+908    	; 0x64a4 <serial1MIDISend>
    6118:	df 91       	pop	r29
		}
	}
}
    611a:	cf 91       	pop	r28
    611c:	1f 91       	pop	r17
    611e:	0f 91       	pop	r16
    6120:	08 95       	ret

00006122 <midiIn_Process>:
    6122:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6124:	0c f0       	brlt	.+2      	; 0x6128 <midiIn_Process+0x6>
    6126:	4f c0       	rjmp	.+158    	; 0x61c6 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6128:	88 3f       	cpi	r24, 0xF8	; 248
    612a:	b8 f0       	brcs	.+46     	; 0x615a <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    612c:	8e 3f       	cpi	r24, 0xFE	; 254
    612e:	81 f4       	brne	.+32     	; 0x6150 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6130:	81 e0       	ldi	r24, 0x01	; 1
    6132:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6136:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6138:	f8 94       	cli
    613a:	06 c0       	rjmp	.+12     	; 0x6148 <midiIn_Process+0x26>
    613c:	ef e2       	ldi	r30, 0x2F	; 47
    613e:	f2 e0       	ldi	r31, 0x02	; 2
    6140:	89 e1       	ldi	r24, 0x19	; 25
    6142:	86 83       	std	Z+6, r24	; 0x06
    6144:	17 82       	std	Z+7, r1	; 0x07
    6146:	80 e0       	ldi	r24, 0x00	; 0
    6148:	81 11       	cpse	r24, r1
    614a:	f8 cf       	rjmp	.-16     	; 0x613c <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    614c:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    614e:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6150:	8f 3f       	cpi	r24, 0xFF	; 255
    6152:	09 f0       	breq	.+2      	; 0x6156 <midiIn_Process+0x34>
    6154:	79 c0       	rjmp	.+242    	; 0x6248 <midiIn_Process+0x126>
				midiAllReset();
    6156:	43 ca       	rjmp	.-2938   	; 0x55de <midiAllReset>
    6158:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    615a:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    615e:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6162:	90 e8       	ldi	r25, 0x80	; 128
    6164:	98 0f       	add	r25, r24
    6166:	90 34       	cpi	r25, 0x40	; 64
    6168:	20 f4       	brcc	.+8      	; 0x6172 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    616a:	82 e0       	ldi	r24, 0x02	; 2
    616c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6170:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6172:	90 e2       	ldi	r25, 0x20	; 32
    6174:	98 0f       	add	r25, r24
    6176:	90 31       	cpi	r25, 0x10	; 16
    6178:	20 f4       	brcc	.+8      	; 0x6182 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    617a:	82 e0       	ldi	r24, 0x02	; 2
    617c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6180:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6182:	82 3f       	cpi	r24, 0xF2	; 242
    6184:	21 f4       	brne	.+8      	; 0x618e <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6186:	82 e0       	ldi	r24, 0x02	; 2
    6188:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    618c:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    618e:	80 3f       	cpi	r24, 0xF0	; 240
    6190:	21 f4       	brne	.+8      	; 0x619a <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6192:	8f ef       	ldi	r24, 0xFF	; 255
    6194:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6198:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    619a:	90 e4       	ldi	r25, 0x40	; 64
    619c:	98 0f       	add	r25, r24
    619e:	90 32       	cpi	r25, 0x20	; 32
    61a0:	20 f4       	brcc	.+8      	; 0x61aa <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    61a8:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    61aa:	81 3f       	cpi	r24, 0xF1	; 241
    61ac:	11 f0       	breq	.+4      	; 0x61b2 <midiIn_Process+0x90>
    61ae:	83 3f       	cpi	r24, 0xF3	; 243
    61b0:	21 f4       	brne	.+8      	; 0x61ba <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    61b8:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    61ba:	87 3f       	cpi	r24, 0xF7	; 247
    61bc:	09 f4       	brne	.+2      	; 0x61c0 <midiIn_Process+0x9e>
    61be:	44 c0       	rjmp	.+136    	; 0x6248 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    61c0:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    61c4:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    61c6:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <midiDataByteCount>
    61ca:	e8 30       	cpi	r30, 0x08	; 8
    61cc:	40 f4       	brcc	.+16     	; 0x61de <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    61ce:	91 e0       	ldi	r25, 0x01	; 1
    61d0:	9e 0f       	add	r25, r30
    61d2:	90 93 1b 08 	sts	0x081B, r25	; 0x80081b <midiDataByteCount>
    61d6:	f0 e0       	ldi	r31, 0x00	; 0
    61d8:	ee 51       	subi	r30, 0x1E	; 30
    61da:	f4 4f       	sbci	r31, 0xF4	; 244
    61dc:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    61de:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    61e2:	8f 3f       	cpi	r24, 0xFF	; 255
    61e4:	89 f1       	breq	.+98     	; 0x6248 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    61e6:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <midiDataByteCount>
    61ea:	98 17       	cp	r25, r24
    61ec:	68 f1       	brcs	.+90     	; 0x6248 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    61ee:	90 91 ea 0b 	lds	r25, 0x0BEA	; 0x800bea <midiLastCommand>
    61f2:	90 3f       	cpi	r25, 0xF0	; 240
    61f4:	38 f5       	brcc	.+78     	; 0x6244 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    61f6:	89 2f       	mov	r24, r25
    61f8:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    61fa:	90 7f       	andi	r25, 0xF0	; 240
    61fc:	90 39       	cpi	r25, 0x90	; 144
    61fe:	71 f0       	breq	.+28     	; 0x621c <midiIn_Process+0xfa>
    6200:	18 f4       	brcc	.+6      	; 0x6208 <midiIn_Process+0xe6>
    6202:	90 38       	cpi	r25, 0x80	; 128
    6204:	31 f0       	breq	.+12     	; 0x6212 <midiIn_Process+0xf0>
    6206:	1e c0       	rjmp	.+60     	; 0x6244 <midiIn_Process+0x122>
    6208:	90 3b       	cpi	r25, 0xB0	; 176
    620a:	99 f0       	breq	.+38     	; 0x6232 <midiIn_Process+0x110>
    620c:	90 3c       	cpi	r25, 0xC0	; 192
    620e:	b9 f0       	breq	.+46     	; 0x623e <midiIn_Process+0x11c>
    6210:	19 c0       	rjmp	.+50     	; 0x6244 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6212:	40 e0       	ldi	r20, 0x00	; 0
    6214:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    6218:	07 df       	rcall	.-498    	; 0x6028 <midiNote_to_Manual>
						break;
    621a:	14 c0       	rjmp	.+40     	; 0x6244 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    621c:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <midiDataByte+0x1>
    6220:	91 11       	cpse	r25, r1
    6222:	02 c0       	rjmp	.+4      	; 0x6228 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6224:	40 e0       	ldi	r20, 0x00	; 0
    6226:	01 c0       	rjmp	.+2      	; 0x622a <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6228:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    622a:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    622e:	fc de       	rcall	.-520    	; 0x6028 <midiNote_to_Manual>
						break;
    6230:	09 c0       	rjmp	.+18     	; 0x6244 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6232:	90 91 e2 0b 	lds	r25, 0x0BE2	; 0x800be2 <midiDataByte>
    6236:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6238:	29 f4       	brne	.+10     	; 0x6244 <midiIn_Process+0x122>
    623a:	60 de       	rcall	.-832    	; 0x5efc <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    623c:	03 c0       	rjmp	.+6      	; 0x6244 <midiIn_Process+0x122>
    623e:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    6242:	d0 db       	rcall	.-2144   	; 0x59e4 <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6244:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
    6248:	08 95       	ret

0000624a <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    624a:	bf 92       	push	r11
    624c:	cf 92       	push	r12
    624e:	df 92       	push	r13
    6250:	ef 92       	push	r14
    6252:	ff 92       	push	r15
    6254:	0f 93       	push	r16
    6256:	1f 93       	push	r17
    6258:	cf 93       	push	r28
    625a:	df 93       	push	r29
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    625c:	09 2f       	mov	r16, r25
    625e:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6260:	9f 71       	andi	r25, 0x1F	; 31
    6262:	d9 2e       	mov	r13, r25
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
    6264:	d8 2f       	mov	r29, r24
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6266:	00 32       	cpi	r16, 0x20	; 32
    6268:	09 f4       	brne	.+2      	; 0x626c <midiKeyPress_Process+0x22>
    626a:	b5 c0       	rjmp	.+362    	; 0x63d6 <midiKeyPress_Process+0x18c>
    626c:	00 23       	and	r16, r16
    626e:	09 f4       	brne	.+2      	; 0x6272 <midiKeyPress_Process+0x28>
    6270:	b4 c0       	rjmp	.+360    	; 0x63da <midiKeyPress_Process+0x190>
    6272:	b7 c0       	rjmp	.+366    	; 0x63e2 <midiKeyPress_Process+0x198>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6274:	d0 ff       	sbrs	r29, 0
    6276:	ac c0       	rjmp	.+344    	; 0x63d0 <midiKeyPress_Process+0x186>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6278:	20 e2       	ldi	r18, 0x20	; 32
    627a:	c2 9f       	mul	r28, r18
    627c:	c0 01       	movw	r24, r0
    627e:	11 24       	eor	r1, r1
    6280:	fd 2c       	mov	r15, r13
    6282:	f8 2a       	or	r15, r24
    6284:	8f 2d       	mov	r24, r15
    6286:	ad dd       	rcall	.-1190   	; 0x5de2 <moduleBit_to_manualNote>
    6288:	e8 2e       	mov	r14, r24
    628a:	c9 2e       	mov	r12, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    628c:	18 2f       	mov	r17, r24
    628e:	8f 3f       	cpi	r24, 0xFF	; 255
    6290:	09 f4       	brne	.+2      	; 0x6294 <midiKeyPress_Process+0x4a>
    6292:	94 c0       	rjmp	.+296    	; 0x63bc <midiKeyPress_Process+0x172>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6294:	69 2f       	mov	r22, r25
    6296:	e4 dc       	rcall	.-1592   	; 0x5c60 <Manual_to_MidiNote>
    6298:	b9 2e       	mov	r11, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    629a:	8f 3f       	cpi	r24, 0xFF	; 255
    629c:	09 f1       	breq	.+66     	; 0x62e0 <midiKeyPress_Process+0x96>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    629e:	00 32       	cpi	r16, 0x20	; 32
    62a0:	31 f0       	breq	.+12     	; 0x62ae <midiKeyPress_Process+0x64>
    62a2:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    62a6:	99 23       	and	r25, r25
    62a8:	21 f0       	breq	.+8      	; 0x62b2 <midiKeyPress_Process+0x68>
    62aa:	90 e9       	ldi	r25, 0x90	; 144
    62ac:	03 c0       	rjmp	.+6      	; 0x62b4 <midiKeyPress_Process+0x6a>
    62ae:	90 e9       	ldi	r25, 0x90	; 144
    62b0:	01 c0       	rjmp	.+2      	; 0x62b4 <midiKeyPress_Process+0x6a>
    62b2:	90 e8       	ldi	r25, 0x80	; 128
    62b4:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    62b6:	f6 d0       	rcall	.+492    	; 0x64a4 <serial1MIDISend>
    62b8:	8b 2d       	mov	r24, r11
    62ba:	f4 d0       	rcall	.+488    	; 0x64a4 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    62bc:	01 11       	cpse	r16, r1
    62be:	06 c0       	rjmp	.+12     	; 0x62cc <midiKeyPress_Process+0x82>
    62c0:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    62c4:	81 11       	cpse	r24, r1
    62c6:	04 c0       	rjmp	.+8      	; 0x62d0 <midiKeyPress_Process+0x86>
    62c8:	80 e4       	ldi	r24, 0x40	; 64
    62ca:	03 c0       	rjmp	.+6      	; 0x62d2 <midiKeyPress_Process+0x88>
    62cc:	80 e4       	ldi	r24, 0x40	; 64
    62ce:	01 c0       	rjmp	.+2      	; 0x62d2 <midiKeyPress_Process+0x88>
    62d0:	80 e0       	ldi	r24, 0x00	; 0
    62d2:	e8 d0       	rcall	.+464    	; 0x64a4 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    62d4:	00 32       	cpi	r16, 0x20	; 32
    62d6:	21 f4       	brne	.+8      	; 0x62e0 <midiKeyPress_Process+0x96>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    62d8:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    62dc:	c0 92 05 02 	sts	0x0205, r12	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    62e0:	41 e0       	ldi	r20, 0x01	; 1
    62e2:	00 32       	cpi	r16, 0x20	; 32
    62e4:	09 f0       	breq	.+2      	; 0x62e8 <midiKeyPress_Process+0x9e>
    62e6:	40 e0       	ldi	r20, 0x00	; 0
    62e8:	e4 2e       	mov	r14, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    62ea:	11 11       	cpse	r17, r1
    62ec:	19 c0       	rjmp	.+50     	; 0x6320 <midiKeyPress_Process+0xd6>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    62ee:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <midi_Couplers>
    62f2:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    62f4:	19 f4       	brne	.+6      	; 0x62fc <midiKeyPress_Process+0xb2>
    62f6:	6c 2d       	mov	r22, r12
    62f8:	81 e0       	ldi	r24, 0x01	; 1
    62fa:	96 dd       	rcall	.-1236   	; 0x5e28 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    62fc:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <midi_Couplers+0x1>
    6300:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6302:	21 f4       	brne	.+8      	; 0x630c <midiKeyPress_Process+0xc2>
    6304:	4e 2d       	mov	r20, r14
    6306:	6c 2d       	mov	r22, r12
    6308:	82 e0       	ldi	r24, 0x02	; 2
    630a:	8e dd       	rcall	.-1252   	; 0x5e28 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    630c:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x3>
    6310:	8f 3f       	cpi	r24, 0xFF	; 255
    6312:	09 f0       	breq	.+2      	; 0x6316 <midiKeyPress_Process+0xcc>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6314:	53 c0       	rjmp	.+166    	; 0x63bc <midiKeyPress_Process+0x172>
    6316:	4e 2d       	mov	r20, r14
    6318:	6c 2d       	mov	r22, r12
    631a:	83 e0       	ldi	r24, 0x03	; 3
    631c:	85 dd       	rcall	.-1270   	; 0x5e28 <manual_NoteOnOff>
    631e:	4e c0       	rjmp	.+156    	; 0x63bc <midiKeyPress_Process+0x172>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6320:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6322:	c9 f4       	brne	.+50     	; 0x6356 <midiKeyPress_Process+0x10c>
    6324:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers+0x2>
    6328:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    632a:	19 f4       	brne	.+6      	; 0x6332 <midiKeyPress_Process+0xe8>
    632c:	6c 2d       	mov	r22, r12
    632e:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6330:	7b dd       	rcall	.-1290   	; 0x5e28 <manual_NoteOnOff>
    6332:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x4>
    6336:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6338:	21 f4       	brne	.+8      	; 0x6342 <midiKeyPress_Process+0xf8>
    633a:	4e 2d       	mov	r20, r14
    633c:	6c 2d       	mov	r22, r12
    633e:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6340:	73 dd       	rcall	.-1306   	; 0x5e28 <manual_NoteOnOff>
    6342:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x6>
    6346:	8f 3f       	cpi	r24, 0xFF	; 255
    6348:	09 f0       	breq	.+2      	; 0x634c <midiKeyPress_Process+0x102>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    634a:	38 c0       	rjmp	.+112    	; 0x63bc <midiKeyPress_Process+0x172>
    634c:	4e 2d       	mov	r20, r14
    634e:	6c 2d       	mov	r22, r12
    6350:	80 e0       	ldi	r24, 0x00	; 0
    6352:	6a dd       	rcall	.-1324   	; 0x5e28 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6354:	33 c0       	rjmp	.+102    	; 0x63bc <midiKeyPress_Process+0x172>
    6356:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    6358:	c1 f4       	brne	.+48     	; 0x638a <midiKeyPress_Process+0x140>
    635a:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    635e:	8f 3f       	cpi	r24, 0xFF	; 255
    6360:	19 f4       	brne	.+6      	; 0x6368 <midiKeyPress_Process+0x11e>
    6362:	6c 2d       	mov	r22, r12
    6364:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6366:	60 dd       	rcall	.-1344   	; 0x5e28 <manual_NoteOnOff>
    6368:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    636c:	8f 3f       	cpi	r24, 0xFF	; 255
    636e:	21 f4       	brne	.+8      	; 0x6378 <midiKeyPress_Process+0x12e>
    6370:	4e 2d       	mov	r20, r14
    6372:	6c 2d       	mov	r22, r12
    6374:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6376:	58 dd       	rcall	.-1360   	; 0x5e28 <manual_NoteOnOff>
    6378:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x8>
    637c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    637e:	f1 f4       	brne	.+60     	; 0x63bc <midiKeyPress_Process+0x172>
    6380:	4e 2d       	mov	r20, r14
    6382:	6c 2d       	mov	r22, r12
    6384:	81 e0       	ldi	r24, 0x01	; 1
    6386:	50 dd       	rcall	.-1376   	; 0x5e28 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6388:	19 c0       	rjmp	.+50     	; 0x63bc <midiKeyPress_Process+0x172>
    638a:	13 30       	cpi	r17, 0x03	; 3
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    638c:	b9 f4       	brne	.+46     	; 0x63bc <midiKeyPress_Process+0x172>
    638e:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6392:	8f 3f       	cpi	r24, 0xFF	; 255
    6394:	19 f4       	brne	.+6      	; 0x639c <midiKeyPress_Process+0x152>
    6396:	6c 2d       	mov	r22, r12
    6398:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    639a:	46 dd       	rcall	.-1396   	; 0x5e28 <manual_NoteOnOff>
    639c:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    63a0:	8f 3f       	cpi	r24, 0xFF	; 255
    63a2:	21 f4       	brne	.+8      	; 0x63ac <midiKeyPress_Process+0x162>
    63a4:	4e 2d       	mov	r20, r14
    63a6:	6c 2d       	mov	r22, r12
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    63a8:	81 e0       	ldi	r24, 0x01	; 1
    63aa:	3e dd       	rcall	.-1412   	; 0x5e28 <manual_NoteOnOff>
    63ac:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    63b0:	8f 3f       	cpi	r24, 0xFF	; 255
    63b2:	21 f4       	brne	.+8      	; 0x63bc <midiKeyPress_Process+0x172>
    63b4:	4e 2d       	mov	r20, r14
    63b6:	6c 2d       	mov	r22, r12
    63b8:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    63ba:	36 dd       	rcall	.-1428   	; 0x5e28 <manual_NoteOnOff>
    63bc:	8f 2d       	mov	r24, r15
    63be:	a6 d9       	rcall	.-3252   	; 0x570c <moduleBit_to_registerNr>
    63c0:	00 32       	cpi	r16, 0x20	; 32
    63c2:	11 f4       	brne	.+4      	; 0x63c8 <midiKeyPress_Process+0x17e>
    63c4:	20 e8       	ldi	r18, 0x80	; 128
    63c6:	01 c0       	rjmp	.+2      	; 0x63ca <midiKeyPress_Process+0x180>
    63c8:	20 e0       	ldi	r18, 0x00	; 0
    63ca:	82 2b       	or	r24, r18
    63cc:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    63d0:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    63d2:	cf 5f       	subi	r28, 0xFF	; 255
    63d4:	03 c0       	rjmp	.+6      	; 0x63dc <midiKeyPress_Process+0x192>
    63d6:	c0 e0       	ldi	r28, 0x00	; 0
    63d8:	01 c0       	rjmp	.+2      	; 0x63dc <midiKeyPress_Process+0x192>
    63da:	c0 e0       	ldi	r28, 0x00	; 0
    63dc:	c8 30       	cpi	r28, 0x08	; 8
    63de:	08 f4       	brcc	.+2      	; 0x63e2 <midiKeyPress_Process+0x198>
    63e0:	49 cf       	rjmp	.-366    	; 0x6274 <midiKeyPress_Process+0x2a>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	1f 91       	pop	r17
    63e8:	0f 91       	pop	r16
    63ea:	ff 90       	pop	r15
    63ec:	ef 90       	pop	r14
    63ee:	df 90       	pop	r13
    63f0:	cf 90       	pop	r12
    63f2:	bf 90       	pop	r11
    63f4:	08 95       	ret

000063f6 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    63f6:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    63f8:	c0 e0       	ldi	r28, 0x00	; 0
    63fa:	10 c0       	rjmp	.+32     	; 0x641c <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    63fc:	ec 2f       	mov	r30, r28
    63fe:	f0 e0       	ldi	r31, 0x00	; 0
    6400:	ee 0f       	add	r30, r30
    6402:	ff 1f       	adc	r31, r31
    6404:	ea 5d       	subi	r30, 0xDA	; 218
    6406:	f6 4f       	sbci	r31, 0xF6	; 246
    6408:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    640a:	80 31       	cpi	r24, 0x10	; 16
    640c:	30 f4       	brcc	.+12     	; 0x641a <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    640e:	80 6b       	ori	r24, 0xB0	; 176
    6410:	49 d0       	rcall	.+146    	; 0x64a4 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6412:	8b e7       	ldi	r24, 0x7B	; 123
    6414:	47 d0       	rcall	.+142    	; 0x64a4 <serial1MIDISend>
			serial1MIDISend(0);
    6416:	80 e0       	ldi	r24, 0x00	; 0
    6418:	45 d0       	rcall	.+138    	; 0x64a4 <serial1MIDISend>
    641a:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    641c:	c4 30       	cpi	r28, 0x04	; 4
    641e:	70 f3       	brcs	.-36     	; 0x63fc <midiSendAllNotesOff+0x6>
    6420:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    6422:	08 95       	ret

00006424 <midi_SendActiveSense>:
    6424:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6426:	3e c0       	rjmp	.+124    	; 0x64a4 <serial1MIDISend>
    6428:	08 95       	ret

0000642a <midi_CheckTxActiveSense>:
		}
	}
}

void midi_CheckTxActiveSense(){
	if (midi_Setting.TxActivceSense) {
    642a:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <midi_Setting>
    642e:	88 23       	and	r24, r24
    6430:	b1 f0       	breq	.+44     	; 0x645e <midi_CheckTxActiveSense+0x34>
		if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    6432:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6436:	88 23       	and	r24, r24
    6438:	21 f0       	breq	.+8      	; 0x6442 <midi_CheckTxActiveSense+0x18>
    643a:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    643e:	8f 3f       	cpi	r24, 0xFF	; 255
    6440:	71 f4       	brne	.+28     	; 0x645e <midi_CheckTxActiveSense+0x34>
			// timer ended or not yet running
			TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    6442:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6444:	f8 94       	cli
    6446:	81 e0       	ldi	r24, 0x01	; 1
    6448:	06 c0       	rjmp	.+12     	; 0x6456 <midi_CheckTxActiveSense+0x2c>
    644a:	ef e2       	ldi	r30, 0x2F	; 47
    644c:	f2 e0       	ldi	r31, 0x02	; 2
    644e:	8a e0       	ldi	r24, 0x0A	; 10
    6450:	80 8b       	std	Z+16, r24	; 0x10
    6452:	11 8a       	std	Z+17, r1	; 0x11
    6454:	80 e0       	ldi	r24, 0x00	; 0
    6456:	81 11       	cpse	r24, r1
    6458:	f8 cf       	rjmp	.-16     	; 0x644a <midi_CheckTxActiveSense+0x20>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    645a:	9f bf       	out	0x3f, r25	; 63
			midi_SendActiveSense();
    645c:	e3 cf       	rjmp	.-58     	; 0x6424 <midi_SendActiveSense>
    645e:	08 95       	ret

00006460 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6460:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6464:	8f e1       	ldi	r24, 0x1F	; 31
    6466:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    646a:	e9 ec       	ldi	r30, 0xC9	; 201
    646c:	f0 e0       	ldi	r31, 0x00	; 0
    646e:	80 81       	ld	r24, Z
    6470:	88 69       	ori	r24, 0x98	; 152
    6472:	80 83       	st	Z, r24
    6474:	ea ec       	ldi	r30, 0xCA	; 202
    6476:	f0 e0       	ldi	r31, 0x00	; 0
    6478:	80 81       	ld	r24, Z
    647a:	86 60       	ori	r24, 0x06	; 6
    647c:	80 83       	st	Z, r24
    647e:	10 92 18 0d 	sts	0x0D18, r1	; 0x800d18 <midiRxInIndex>
    6482:	10 92 63 0e 	sts	0x0E63, r1	; 0x800e63 <midiRxOutIndex>
    6486:	10 92 eb 0b 	sts	0x0BEB, r1	; 0x800beb <midiTxInIndex>
    648a:	10 92 f0 0b 	sts	0x0BF0, r1	; 0x800bf0 <midiTxOutIndex>
    648e:	10 92 ef 0b 	sts	0x0BEF, r1	; 0x800bef <midiRxOvfl>
    6492:	10 92 f5 0b 	sts	0x0BF5, r1	; 0x800bf5 <midiTxOvfl>
    6496:	10 92 5f 0d 	sts	0x0D5F, r1	; 0x800d5f <midiRxOvflCount>
    649a:	10 92 64 0e 	sts	0x0E64, r1	; 0x800e64 <midiTxOvflCount>
    649e:	10 92 f1 0b 	sts	0x0BF1, r1	; 0x800bf1 <midiTxLastCmd>
    64a2:	08 95       	ret

000064a4 <serial1MIDISend>:
    64a4:	88 23       	and	r24, r24
    64a6:	5c f4       	brge	.+22     	; 0x64be <serial1MIDISend+0x1a>
    64a8:	90 91 f1 0b 	lds	r25, 0x0BF1	; 0x800bf1 <midiTxLastCmd>
    64ac:	89 17       	cp	r24, r25
    64ae:	79 f1       	breq	.+94     	; 0x650e <serial1MIDISend+0x6a>
    64b0:	80 3a       	cpi	r24, 0xA0	; 160
    64b2:	18 f4       	brcc	.+6      	; 0x64ba <serial1MIDISend+0x16>
    64b4:	80 93 f1 0b 	sts	0x0BF1, r24	; 0x800bf1 <midiTxLastCmd>
    64b8:	02 c0       	rjmp	.+4      	; 0x64be <serial1MIDISend+0x1a>
    64ba:	10 92 f1 0b 	sts	0x0BF1, r1	; 0x800bf1 <midiTxLastCmd>
    64be:	e9 ec       	ldi	r30, 0xC9	; 201
    64c0:	f0 e0       	ldi	r31, 0x00	; 0
    64c2:	90 81       	ld	r25, Z
    64c4:	9f 7d       	andi	r25, 0xDF	; 223
    64c6:	90 83       	st	Z, r25
    64c8:	e0 91 eb 0b 	lds	r30, 0x0BEB	; 0x800beb <midiTxInIndex>
    64cc:	f0 e0       	ldi	r31, 0x00	; 0
    64ce:	ea 5e       	subi	r30, 0xEA	; 234
    64d0:	f3 4f       	sbci	r31, 0xF3	; 243
    64d2:	80 83       	st	Z, r24
    64d4:	80 91 eb 0b 	lds	r24, 0x0BEB	; 0x800beb <midiTxInIndex>
    64d8:	8f 5f       	subi	r24, 0xFF	; 255
    64da:	80 93 eb 0b 	sts	0x0BEB, r24	; 0x800beb <midiTxInIndex>
    64de:	90 91 eb 0b 	lds	r25, 0x0BEB	; 0x800beb <midiTxInIndex>
    64e2:	80 91 f0 0b 	lds	r24, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    64e6:	98 13       	cpse	r25, r24
    64e8:	0d c0       	rjmp	.+26     	; 0x6504 <serial1MIDISend+0x60>
    64ea:	80 91 64 0e 	lds	r24, 0x0E64	; 0x800e64 <midiTxOvflCount>
    64ee:	88 23       	and	r24, r24
    64f0:	31 f0       	breq	.+12     	; 0x64fe <serial1MIDISend+0x5a>
    64f2:	8f 3f       	cpi	r24, 0xFF	; 255
    64f4:	39 f0       	breq	.+14     	; 0x6504 <serial1MIDISend+0x60>
    64f6:	8f 5f       	subi	r24, 0xFF	; 255
    64f8:	80 93 64 0e 	sts	0x0E64, r24	; 0x800e64 <midiTxOvflCount>
    64fc:	03 c0       	rjmp	.+6      	; 0x6504 <serial1MIDISend+0x60>
    64fe:	81 e0       	ldi	r24, 0x01	; 1
    6500:	80 93 64 0e 	sts	0x0E64, r24	; 0x800e64 <midiTxOvflCount>
    6504:	e9 ec       	ldi	r30, 0xC9	; 201
    6506:	f0 e0       	ldi	r31, 0x00	; 0
    6508:	80 81       	ld	r24, Z
    650a:	80 62       	ori	r24, 0x20	; 32
    650c:	80 83       	st	Z, r24
    650e:	08 95       	ret

00006510 <serial1MIDIReadRx>:
    6510:	90 91 18 0d 	lds	r25, 0x0D18	; 0x800d18 <midiRxInIndex>
    6514:	80 91 63 0e 	lds	r24, 0x0E63	; 0x800e63 <midiRxOutIndex>
    6518:	98 17       	cp	r25, r24
    651a:	69 f0       	breq	.+26     	; 0x6536 <serial1MIDIReadRx+0x26>
    651c:	e0 91 63 0e 	lds	r30, 0x0E63	; 0x800e63 <midiRxOutIndex>
    6520:	f0 e0       	ldi	r31, 0x00	; 0
    6522:	ea 50       	subi	r30, 0x0A	; 10
    6524:	f4 4f       	sbci	r31, 0xF4	; 244
    6526:	80 81       	ld	r24, Z
    6528:	90 91 63 0e 	lds	r25, 0x0E63	; 0x800e63 <midiRxOutIndex>
    652c:	9f 5f       	subi	r25, 0xFF	; 255
    652e:	9f 71       	andi	r25, 0x1F	; 31
    6530:	90 93 63 0e 	sts	0x0E63, r25	; 0x800e63 <midiRxOutIndex>
    6534:	08 95       	ret
    6536:	8d ef       	ldi	r24, 0xFD	; 253
    6538:	08 95       	ret

0000653a <__vector_36>:
    653a:	1f 92       	push	r1
    653c:	0f 92       	push	r0
    653e:	0f b6       	in	r0, 0x3f	; 63
    6540:	0f 92       	push	r0
    6542:	11 24       	eor	r1, r1
    6544:	0b b6       	in	r0, 0x3b	; 59
    6546:	0f 92       	push	r0
    6548:	8f 93       	push	r24
    654a:	9f 93       	push	r25
    654c:	ef 93       	push	r30
    654e:	ff 93       	push	r31
    6550:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6554:	e0 91 18 0d 	lds	r30, 0x0D18	; 0x800d18 <midiRxInIndex>
    6558:	f0 e0       	ldi	r31, 0x00	; 0
    655a:	ea 50       	subi	r30, 0x0A	; 10
    655c:	f4 4f       	sbci	r31, 0xF4	; 244
    655e:	80 83       	st	Z, r24
    6560:	80 91 18 0d 	lds	r24, 0x0D18	; 0x800d18 <midiRxInIndex>
    6564:	8f 5f       	subi	r24, 0xFF	; 255
    6566:	8f 71       	andi	r24, 0x1F	; 31
    6568:	80 93 18 0d 	sts	0x0D18, r24	; 0x800d18 <midiRxInIndex>
    656c:	90 91 18 0d 	lds	r25, 0x0D18	; 0x800d18 <midiRxInIndex>
    6570:	80 91 63 0e 	lds	r24, 0x0E63	; 0x800e63 <midiRxOutIndex>
    6574:	98 13       	cpse	r25, r24
    6576:	0d c0       	rjmp	.+26     	; 0x6592 <__vector_36+0x58>
    6578:	80 91 5f 0d 	lds	r24, 0x0D5F	; 0x800d5f <midiRxOvflCount>
    657c:	88 23       	and	r24, r24
    657e:	31 f0       	breq	.+12     	; 0x658c <__vector_36+0x52>
    6580:	8f 3f       	cpi	r24, 0xFF	; 255
    6582:	39 f0       	breq	.+14     	; 0x6592 <__vector_36+0x58>
    6584:	8f 5f       	subi	r24, 0xFF	; 255
    6586:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <midiRxOvflCount>
    658a:	03 c0       	rjmp	.+6      	; 0x6592 <__vector_36+0x58>
    658c:	81 e0       	ldi	r24, 0x01	; 1
    658e:	80 93 5f 0d 	sts	0x0D5F, r24	; 0x800d5f <midiRxOvflCount>
    6592:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <midiRxBytesCount>
    6596:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <midiRxBytesCount+0x1>
    659a:	01 96       	adiw	r24, 0x01	; 1
    659c:	90 93 e6 10 	sts	0x10E6, r25	; 0x8010e6 <midiRxBytesCount+0x1>
    65a0:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <midiRxBytesCount>
    65a4:	ff 91       	pop	r31
    65a6:	ef 91       	pop	r30
    65a8:	9f 91       	pop	r25
    65aa:	8f 91       	pop	r24
    65ac:	0f 90       	pop	r0
    65ae:	0b be       	out	0x3b, r0	; 59
    65b0:	0f 90       	pop	r0
    65b2:	0f be       	out	0x3f, r0	; 63
    65b4:	0f 90       	pop	r0
    65b6:	1f 90       	pop	r1
    65b8:	18 95       	reti

000065ba <__vector_37>:
    65ba:	1f 92       	push	r1
    65bc:	0f 92       	push	r0
    65be:	0f b6       	in	r0, 0x3f	; 63
    65c0:	0f 92       	push	r0
    65c2:	11 24       	eor	r1, r1
    65c4:	0b b6       	in	r0, 0x3b	; 59
    65c6:	0f 92       	push	r0
    65c8:	8f 93       	push	r24
    65ca:	9f 93       	push	r25
    65cc:	ef 93       	push	r30
    65ce:	ff 93       	push	r31
    65d0:	90 91 f0 0b 	lds	r25, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    65d4:	80 91 eb 0b 	lds	r24, 0x0BEB	; 0x800beb <midiTxInIndex>
    65d8:	98 17       	cp	r25, r24
    65da:	b9 f0       	breq	.+46     	; 0x660a <__vector_37+0x50>
    65dc:	e0 91 f0 0b 	lds	r30, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    65e0:	f0 e0       	ldi	r31, 0x00	; 0
    65e2:	ea 5e       	subi	r30, 0xEA	; 234
    65e4:	f3 4f       	sbci	r31, 0xF3	; 243
    65e6:	80 81       	ld	r24, Z
    65e8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    65ec:	80 91 f0 0b 	lds	r24, 0x0BF0	; 0x800bf0 <midiTxOutIndex>
    65f0:	8f 5f       	subi	r24, 0xFF	; 255
    65f2:	80 93 f0 0b 	sts	0x0BF0, r24	; 0x800bf0 <midiTxOutIndex>
    65f6:	80 91 60 0d 	lds	r24, 0x0D60	; 0x800d60 <midiTxBytesCount>
    65fa:	90 91 61 0d 	lds	r25, 0x0D61	; 0x800d61 <midiTxBytesCount+0x1>
    65fe:	01 96       	adiw	r24, 0x01	; 1
    6600:	90 93 61 0d 	sts	0x0D61, r25	; 0x800d61 <midiTxBytesCount+0x1>
    6604:	80 93 60 0d 	sts	0x0D60, r24	; 0x800d60 <midiTxBytesCount>
    6608:	05 c0       	rjmp	.+10     	; 0x6614 <__vector_37+0x5a>
    660a:	e9 ec       	ldi	r30, 0xC9	; 201
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	80 81       	ld	r24, Z
    6610:	8f 7d       	andi	r24, 0xDF	; 223
    6612:	80 83       	st	Z, r24
    6614:	ff 91       	pop	r31
    6616:	ef 91       	pop	r30
    6618:	9f 91       	pop	r25
    661a:	8f 91       	pop	r24
    661c:	0f 90       	pop	r0
    661e:	0b be       	out	0x3b, r0	; 59
    6620:	0f 90       	pop	r0
    6622:	0f be       	out	0x3f, r0	; 63
    6624:	0f 90       	pop	r0
    6626:	1f 90       	pop	r1
    6628:	18 95       	reti

0000662a <serial0SER_USBSend>:
    662a:	90 91 1c 0d 	lds	r25, 0x0D1C	; 0x800d1c <serusbTxInIndex>
    662e:	e1 ec       	ldi	r30, 0xC1	; 193
    6630:	f0 e0       	ldi	r31, 0x00	; 0
    6632:	20 81       	ld	r18, Z
    6634:	2f 7d       	andi	r18, 0xDF	; 223
    6636:	20 83       	st	Z, r18
    6638:	e9 2f       	mov	r30, r25
    663a:	f0 e0       	ldi	r31, 0x00	; 0
    663c:	ee 59       	subi	r30, 0x9E	; 158
    663e:	f2 4f       	sbci	r31, 0xF2	; 242
    6640:	80 83       	st	Z, r24
    6642:	9f 5f       	subi	r25, 0xFF	; 255
    6644:	80 91 f2 0b 	lds	r24, 0x0BF2	; 0x800bf2 <serusbTxOutIndex>
    6648:	98 13       	cpse	r25, r24
    664a:	04 c0       	rjmp	.+8      	; 0x6654 <serial0SER_USBSend+0x2a>
    664c:	8f ef       	ldi	r24, 0xFF	; 255
    664e:	80 93 62 0e 	sts	0x0E62, r24	; 0x800e62 <serusbOvflFlag>
    6652:	08 95       	ret
    6654:	90 93 1c 0d 	sts	0x0D1C, r25	; 0x800d1c <serusbTxInIndex>
    6658:	e1 ec       	ldi	r30, 0xC1	; 193
    665a:	f0 e0       	ldi	r31, 0x00	; 0
    665c:	80 81       	ld	r24, Z
    665e:	80 62       	ori	r24, 0x20	; 32
    6660:	80 83       	st	Z, r24
    6662:	08 95       	ret

00006664 <serial0SER_USB_sendStringP>:
    6664:	cf 93       	push	r28
    6666:	df 93       	push	r29
    6668:	fc 01       	movw	r30, r24
    666a:	02 c0       	rjmp	.+4      	; 0x6670 <serial0SER_USB_sendStringP+0xc>
    666c:	de df       	rcall	.-68     	; 0x662a <serial0SER_USBSend>
    666e:	fe 01       	movw	r30, r28
    6670:	ef 01       	movw	r28, r30
    6672:	21 96       	adiw	r28, 0x01	; 1
    6674:	84 91       	lpm	r24, Z
    6676:	88 23       	and	r24, r24
    6678:	21 f0       	breq	.+8      	; 0x6682 <serial0SER_USB_sendStringP+0x1e>
    667a:	90 91 62 0e 	lds	r25, 0x0E62	; 0x800e62 <serusbOvflFlag>
    667e:	9f 3f       	cpi	r25, 0xFF	; 255
    6680:	a9 f7       	brne	.-22     	; 0x666c <serial0SER_USB_sendStringP+0x8>
    6682:	df 91       	pop	r29
    6684:	cf 91       	pop	r28
    6686:	08 95       	ret

00006688 <serial0SER_USB_sendCRLF>:
    6688:	8f ed       	ldi	r24, 0xDF	; 223
    668a:	91 e1       	ldi	r25, 0x11	; 17
    668c:	eb cf       	rjmp	.-42     	; 0x6664 <serial0SER_USB_sendStringP>
    668e:	08 95       	ret

00006690 <init_Serial0SerUSB>:
    6690:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6694:	88 e0       	ldi	r24, 0x08	; 8
    6696:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    669a:	e1 ec       	ldi	r30, 0xC1	; 193
    669c:	f0 e0       	ldi	r31, 0x00	; 0
    669e:	80 81       	ld	r24, Z
    66a0:	88 69       	ori	r24, 0x98	; 152
    66a2:	80 83       	st	Z, r24
    66a4:	e2 ec       	ldi	r30, 0xC2	; 194
    66a6:	f0 e0       	ldi	r31, 0x00	; 0
    66a8:	80 81       	ld	r24, Z
    66aa:	86 60       	ori	r24, 0x06	; 6
    66ac:	80 83       	st	Z, r24
    66ae:	10 92 18 0d 	sts	0x0D18, r1	; 0x800d18 <midiRxInIndex>
    66b2:	10 92 63 0e 	sts	0x0E63, r1	; 0x800e63 <midiRxOutIndex>
    66b6:	10 92 eb 0b 	sts	0x0BEB, r1	; 0x800beb <midiTxInIndex>
    66ba:	10 92 f0 0b 	sts	0x0BF0, r1	; 0x800bf0 <midiTxOutIndex>
    66be:	10 92 62 0e 	sts	0x0E62, r1	; 0x800e62 <serusbOvflFlag>
    66c2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <eeprom_ReadUSB>
    66c6:	8f 3f       	cpi	r24, 0xFF	; 255
    66c8:	41 f4       	brne	.+16     	; 0x66da <init_Serial0SerUSB+0x4a>
    66ca:	10 92 1b 0d 	sts	0x0D1B, r1	; 0x800d1b <serusb_Active>
    66ce:	40 e0       	ldi	r20, 0x00	; 0
    66d0:	50 e0       	ldi	r21, 0x00	; 0
    66d2:	64 e0       	ldi	r22, 0x04	; 4
    66d4:	81 e0       	ldi	r24, 0x01	; 1
    66d6:	0e 94 74 14 	call	0x28e8	; 0x28e8 <log_putError>
    66da:	80 91 1b 0d 	lds	r24, 0x0D1B	; 0x800d1b <serusb_Active>
    66de:	8f 3f       	cpi	r24, 0xFF	; 255
    66e0:	41 f4       	brne	.+16     	; 0x66f2 <init_Serial0SerUSB+0x62>
    66e2:	86 e4       	ldi	r24, 0x46	; 70
    66e4:	93 e0       	ldi	r25, 0x03	; 3
    66e6:	be df       	rcall	.-132    	; 0x6664 <serial0SER_USB_sendStringP>
    66e8:	8f e7       	ldi	r24, 0x7F	; 127
    66ea:	91 e1       	ldi	r25, 0x11	; 17
    66ec:	bb df       	rcall	.-138    	; 0x6664 <serial0SER_USB_sendStringP>
    66ee:	cc df       	rcall	.-104    	; 0x6688 <serial0SER_USB_sendCRLF>
    66f0:	cb cf       	rjmp	.-106    	; 0x6688 <serial0SER_USB_sendCRLF>
    66f2:	08 95       	ret

000066f4 <serial0SER_USB_sendString>:
    66f4:	1f 93       	push	r17
    66f6:	cf 93       	push	r28
    66f8:	df 93       	push	r29
    66fa:	ec 01       	movw	r28, r24
    66fc:	10 e5       	ldi	r17, 0x50	; 80
    66fe:	03 c0       	rjmp	.+6      	; 0x6706 <serial0SER_USB_sendString+0x12>
    6700:	21 96       	adiw	r28, 0x01	; 1
    6702:	93 df       	rcall	.-218    	; 0x662a <serial0SER_USBSend>
    6704:	11 50       	subi	r17, 0x01	; 1
    6706:	88 81       	ld	r24, Y
    6708:	88 23       	and	r24, r24
    670a:	31 f0       	breq	.+12     	; 0x6718 <serial0SER_USB_sendString+0x24>
    670c:	90 91 62 0e 	lds	r25, 0x0E62	; 0x800e62 <serusbOvflFlag>
    6710:	9f 3f       	cpi	r25, 0xFF	; 255
    6712:	11 f0       	breq	.+4      	; 0x6718 <serial0SER_USB_sendString+0x24>
    6714:	11 11       	cpse	r17, r1
    6716:	f4 cf       	rjmp	.-24     	; 0x6700 <serial0SER_USB_sendString+0xc>
    6718:	df 91       	pop	r29
    671a:	cf 91       	pop	r28
    671c:	1f 91       	pop	r17
    671e:	08 95       	ret

00006720 <__vector_25>:
    6720:	1f 92       	push	r1
    6722:	0f 92       	push	r0
    6724:	0f b6       	in	r0, 0x3f	; 63
    6726:	0f 92       	push	r0
    6728:	11 24       	eor	r1, r1
    672a:	0b b6       	in	r0, 0x3b	; 59
    672c:	0f 92       	push	r0
    672e:	8f 93       	push	r24
    6730:	9f 93       	push	r25
    6732:	ef 93       	push	r30
    6734:	ff 93       	push	r31
    6736:	e0 91 e7 10 	lds	r30, 0x10E7	; 0x8010e7 <serusbRxInIndex>
    673a:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    673e:	81 e0       	ldi	r24, 0x01	; 1
    6740:	8e 0f       	add	r24, r30
    6742:	f0 e0       	ldi	r31, 0x00	; 0
    6744:	e2 5e       	subi	r30, 0xE2	; 226
    6746:	f2 4f       	sbci	r31, 0xF2	; 242
    6748:	90 83       	st	Z, r25
    674a:	8f 73       	andi	r24, 0x3F	; 63
    674c:	90 91 1d 0d 	lds	r25, 0x0D1D	; 0x800d1d <serusbRxOutIndex>
    6750:	89 13       	cpse	r24, r25
    6752:	04 c0       	rjmp	.+8      	; 0x675c <__vector_25+0x3c>
    6754:	8f ef       	ldi	r24, 0xFF	; 255
    6756:	80 93 62 0e 	sts	0x0E62, r24	; 0x800e62 <serusbOvflFlag>
    675a:	02 c0       	rjmp	.+4      	; 0x6760 <__vector_25+0x40>
    675c:	80 93 e7 10 	sts	0x10E7, r24	; 0x8010e7 <serusbRxInIndex>
    6760:	ff 91       	pop	r31
    6762:	ef 91       	pop	r30
    6764:	9f 91       	pop	r25
    6766:	8f 91       	pop	r24
    6768:	0f 90       	pop	r0
    676a:	0b be       	out	0x3b, r0	; 59
    676c:	0f 90       	pop	r0
    676e:	0f be       	out	0x3f, r0	; 63
    6770:	0f 90       	pop	r0
    6772:	1f 90       	pop	r1
    6774:	18 95       	reti

00006776 <__vector_26>:
    6776:	1f 92       	push	r1
    6778:	0f 92       	push	r0
    677a:	0f b6       	in	r0, 0x3f	; 63
    677c:	0f 92       	push	r0
    677e:	11 24       	eor	r1, r1
    6780:	0b b6       	in	r0, 0x3b	; 59
    6782:	0f 92       	push	r0
    6784:	2f 93       	push	r18
    6786:	8f 93       	push	r24
    6788:	9f 93       	push	r25
    678a:	ef 93       	push	r30
    678c:	ff 93       	push	r31
    678e:	80 91 f2 0b 	lds	r24, 0x0BF2	; 0x800bf2 <serusbTxOutIndex>
    6792:	20 91 1c 0d 	lds	r18, 0x0D1C	; 0x800d1c <serusbTxInIndex>
    6796:	90 91 f2 0b 	lds	r25, 0x0BF2	; 0x800bf2 <serusbTxOutIndex>
    679a:	29 17       	cp	r18, r25
    679c:	59 f0       	breq	.+22     	; 0x67b4 <__vector_26+0x3e>
    679e:	e8 2f       	mov	r30, r24
    67a0:	f0 e0       	ldi	r31, 0x00	; 0
    67a2:	ee 59       	subi	r30, 0x9E	; 158
    67a4:	f2 4f       	sbci	r31, 0xF2	; 242
    67a6:	90 81       	ld	r25, Z
    67a8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    67ac:	8f 5f       	subi	r24, 0xFF	; 255
    67ae:	80 93 f2 0b 	sts	0x0BF2, r24	; 0x800bf2 <serusbTxOutIndex>
    67b2:	05 c0       	rjmp	.+10     	; 0x67be <__vector_26+0x48>
    67b4:	e1 ec       	ldi	r30, 0xC1	; 193
    67b6:	f0 e0       	ldi	r31, 0x00	; 0
    67b8:	80 81       	ld	r24, Z
    67ba:	8f 7d       	andi	r24, 0xDF	; 223
    67bc:	80 83       	st	Z, r24
    67be:	ff 91       	pop	r31
    67c0:	ef 91       	pop	r30
    67c2:	9f 91       	pop	r25
    67c4:	8f 91       	pop	r24
    67c6:	2f 91       	pop	r18
    67c8:	0f 90       	pop	r0
    67ca:	0b be       	out	0x3b, r0	; 59
    67cc:	0f 90       	pop	r0
    67ce:	0f be       	out	0x3f, r0	; 63
    67d0:	0f 90       	pop	r0
    67d2:	1f 90       	pop	r1
    67d4:	18 95       	reti

000067d6 <init_Serial3SerESP>:
    67d6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    67da:	88 e0       	ldi	r24, 0x08	; 8
    67dc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    67e0:	e1 e3       	ldi	r30, 0x31	; 49
    67e2:	f1 e0       	ldi	r31, 0x01	; 1
    67e4:	80 81       	ld	r24, Z
    67e6:	88 69       	ori	r24, 0x98	; 152
    67e8:	80 83       	st	Z, r24
    67ea:	e2 e3       	ldi	r30, 0x32	; 50
    67ec:	f1 e0       	ldi	r31, 0x01	; 1
    67ee:	80 81       	ld	r24, Z
    67f0:	86 60       	ori	r24, 0x06	; 6
    67f2:	80 83       	st	Z, r24
    67f4:	85 e6       	ldi	r24, 0x65	; 101
    67f6:	9e e0       	ldi	r25, 0x0E	; 14
    67f8:	90 93 f4 0b 	sts	0x0BF4, r25	; 0x800bf4 <serESPRxInIndex+0x1>
    67fc:	80 93 f3 0b 	sts	0x0BF3, r24	; 0x800bf3 <serESPRxInIndex>
    6800:	90 93 ee 0b 	sts	0x0BEE, r25	; 0x800bee <serESPRxOutIndex+0x1>
    6804:	80 93 ed 0b 	sts	0x0BED, r24	; 0x800bed <serESPRxOutIndex>
    6808:	85 ee       	ldi	r24, 0xE5	; 229
    680a:	9e e0       	ldi	r25, 0x0E	; 14
    680c:	90 93 17 0d 	sts	0x0D17, r25	; 0x800d17 <serESPTxOutIndex+0x1>
    6810:	80 93 16 0d 	sts	0x0D16, r24	; 0x800d16 <serESPTxOutIndex>
    6814:	90 93 1a 0d 	sts	0x0D1A, r25	; 0x800d1a <serESPTxInIndex+0x1>
    6818:	80 93 19 0d 	sts	0x0D19, r24	; 0x800d19 <serESPTxInIndex>
    681c:	10 92 ec 0b 	sts	0x0BEC, r1	; 0x800bec <serESPOvflFlag>
    6820:	8f ef       	ldi	r24, 0xFF	; 255
    6822:	80 93 5e 0d 	sts	0x0D5E, r24	; 0x800d5e <serESP_Active>
    6826:	08 95       	ret

00006828 <serial3SER_ESPSend>:
    6828:	e0 91 19 0d 	lds	r30, 0x0D19	; 0x800d19 <serESPTxInIndex>
    682c:	f0 91 1a 0d 	lds	r31, 0x0D1A	; 0x800d1a <serESPTxInIndex+0x1>
    6830:	a1 e3       	ldi	r26, 0x31	; 49
    6832:	b1 e0       	ldi	r27, 0x01	; 1
    6834:	9c 91       	ld	r25, X
    6836:	9f 7d       	andi	r25, 0xDF	; 223
    6838:	9c 93       	st	X, r25
    683a:	af 01       	movw	r20, r30
    683c:	4f 5f       	subi	r20, 0xFF	; 255
    683e:	5f 4f       	sbci	r21, 0xFF	; 255
    6840:	80 83       	st	Z, r24
    6842:	80 e1       	ldi	r24, 0x10	; 16
    6844:	44 3e       	cpi	r20, 0xE4	; 228
    6846:	58 07       	cpc	r21, r24
    6848:	19 f0       	breq	.+6      	; 0x6850 <serial3SER_ESPSend+0x28>
    684a:	10 f0       	brcs	.+4      	; 0x6850 <serial3SER_ESPSend+0x28>
    684c:	45 ee       	ldi	r20, 0xE5	; 229
    684e:	5e e0       	ldi	r21, 0x0E	; 14
    6850:	9f b7       	in	r25, 0x3f	; 63
    6852:	f8 94       	cli
    6854:	81 e0       	ldi	r24, 0x01	; 1
    6856:	05 c0       	rjmp	.+10     	; 0x6862 <serial3SER_ESPSend+0x3a>
    6858:	20 91 16 0d 	lds	r18, 0x0D16	; 0x800d16 <serESPTxOutIndex>
    685c:	30 91 17 0d 	lds	r19, 0x0D17	; 0x800d17 <serESPTxOutIndex+0x1>
    6860:	80 e0       	ldi	r24, 0x00	; 0
    6862:	81 11       	cpse	r24, r1
    6864:	f9 cf       	rjmp	.-14     	; 0x6858 <serial3SER_ESPSend+0x30>
    6866:	9f bf       	out	0x3f, r25	; 63
    6868:	42 17       	cp	r20, r18
    686a:	53 07       	cpc	r21, r19
    686c:	49 f4       	brne	.+18     	; 0x6880 <serial3SER_ESPSend+0x58>
    686e:	8f ef       	ldi	r24, 0xFF	; 255
    6870:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <serESPOvflFlag>
    6874:	e1 e3       	ldi	r30, 0x31	; 49
    6876:	f1 e0       	ldi	r31, 0x01	; 1
    6878:	80 81       	ld	r24, Z
    687a:	80 62       	ori	r24, 0x20	; 32
    687c:	80 83       	st	Z, r24
    687e:	08 95       	ret
    6880:	50 93 1a 0d 	sts	0x0D1A, r21	; 0x800d1a <serESPTxInIndex+0x1>
    6884:	40 93 19 0d 	sts	0x0D19, r20	; 0x800d19 <serESPTxInIndex>
    6888:	e1 e3       	ldi	r30, 0x31	; 49
    688a:	f1 e0       	ldi	r31, 0x01	; 1
    688c:	80 81       	ld	r24, Z
    688e:	80 62       	ori	r24, 0x20	; 32
    6890:	80 83       	st	Z, r24
    6892:	08 95       	ret

00006894 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    6894:	e0 91 ed 0b 	lds	r30, 0x0BED	; 0x800bed <serESPRxOutIndex>
    6898:	f0 91 ee 0b 	lds	r31, 0x0BEE	; 0x800bee <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    689c:	80 91 f3 0b 	lds	r24, 0x0BF3	; 0x800bf3 <serESPRxInIndex>
    68a0:	90 91 f4 0b 	lds	r25, 0x0BF4	; 0x800bf4 <serESPRxInIndex+0x1>
    68a4:	e8 17       	cp	r30, r24
    68a6:	f9 07       	cpc	r31, r25
    68a8:	81 f0       	breq	.+32     	; 0x68ca <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    68aa:	9f 01       	movw	r18, r30
    68ac:	2f 5f       	subi	r18, 0xFF	; 255
    68ae:	3f 4f       	sbci	r19, 0xFF	; 255
    68b0:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    68b2:	9e e0       	ldi	r25, 0x0E	; 14
    68b4:	24 3e       	cpi	r18, 0xE4	; 228
    68b6:	39 07       	cpc	r19, r25
    68b8:	19 f0       	breq	.+6      	; 0x68c0 <serial3SER_ESPReadRx+0x2c>
    68ba:	10 f0       	brcs	.+4      	; 0x68c0 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    68bc:	25 e6       	ldi	r18, 0x65	; 101
    68be:	3e e0       	ldi	r19, 0x0E	; 14
		}
		serESPRxOutIndex = index;
    68c0:	30 93 ee 0b 	sts	0x0BEE, r19	; 0x800bee <serESPRxOutIndex+0x1>
    68c4:	20 93 ed 0b 	sts	0x0BED, r18	; 0x800bed <serESPRxOutIndex>
    68c8:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    68ca:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    68cc:	08 95       	ret

000068ce <__vector_54>:

ISR(USART3_RX_vect) {
    68ce:	1f 92       	push	r1
    68d0:	0f 92       	push	r0
    68d2:	0f b6       	in	r0, 0x3f	; 63
    68d4:	0f 92       	push	r0
    68d6:	11 24       	eor	r1, r1
    68d8:	0b b6       	in	r0, 0x3b	; 59
    68da:	0f 92       	push	r0
    68dc:	2f 93       	push	r18
    68de:	3f 93       	push	r19
    68e0:	4f 93       	push	r20
    68e2:	5f 93       	push	r21
    68e4:	8f 93       	push	r24
    68e6:	9f 93       	push	r25
    68e8:	ef 93       	push	r30
    68ea:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    68ec:	e0 91 f3 0b 	lds	r30, 0x0BF3	; 0x800bf3 <serESPRxInIndex>
    68f0:	f0 91 f4 0b 	lds	r31, 0x0BF4	; 0x800bf4 <serESPRxInIndex+0x1>
	*index++ = UDR3; // store in receive buffer
    68f4:	af 01       	movw	r20, r30
    68f6:	4f 5f       	subi	r20, 0xFF	; 255
    68f8:	5f 4f       	sbci	r21, 0xFF	; 255
    68fa:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    68fe:	80 83       	st	Z, r24
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    6900:	8e e0       	ldi	r24, 0x0E	; 14
    6902:	44 3e       	cpi	r20, 0xE4	; 228
    6904:	58 07       	cpc	r21, r24
    6906:	19 f0       	breq	.+6      	; 0x690e <__vector_54+0x40>
    6908:	10 f0       	brcs	.+4      	; 0x690e <__vector_54+0x40>
		// wrap around
		index = serESPRxBuffer;
    690a:	45 e6       	ldi	r20, 0x65	; 101
    690c:	5e e0       	ldi	r21, 0x0E	; 14
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    690e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6910:	f8 94       	cli
    6912:	81 e0       	ldi	r24, 0x01	; 1
    6914:	05 c0       	rjmp	.+10     	; 0x6920 <__vector_54+0x52>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    6916:	20 91 ed 0b 	lds	r18, 0x0BED	; 0x800bed <serESPRxOutIndex>
    691a:	30 91 ee 0b 	lds	r19, 0x0BEE	; 0x800bee <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    691e:	80 e0       	ldi	r24, 0x00	; 0
    6920:	81 11       	cpse	r24, r1
    6922:	f9 cf       	rjmp	.-14     	; 0x6916 <__vector_54+0x48>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6924:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    6926:	42 17       	cp	r20, r18
    6928:	53 07       	cpc	r21, r19
    692a:	21 f4       	brne	.+8      	; 0x6934 <__vector_54+0x66>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    692c:	8f ef       	ldi	r24, 0xFF	; 255
    692e:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <serESPOvflFlag>
    6932:	04 c0       	rjmp	.+8      	; 0x693c <__vector_54+0x6e>
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    6934:	50 93 f4 0b 	sts	0x0BF4, r21	; 0x800bf4 <serESPRxInIndex+0x1>
    6938:	40 93 f3 0b 	sts	0x0BF3, r20	; 0x800bf3 <serESPRxInIndex>
	}
}
    693c:	ff 91       	pop	r31
    693e:	ef 91       	pop	r30
    6940:	9f 91       	pop	r25
    6942:	8f 91       	pop	r24
    6944:	5f 91       	pop	r21
    6946:	4f 91       	pop	r20
    6948:	3f 91       	pop	r19
    694a:	2f 91       	pop	r18
    694c:	0f 90       	pop	r0
    694e:	0b be       	out	0x3b, r0	; 59
    6950:	0f 90       	pop	r0
    6952:	0f be       	out	0x3f, r0	; 63
    6954:	0f 90       	pop	r0
    6956:	1f 90       	pop	r1
    6958:	18 95       	reti

0000695a <__vector_55>:

ISR(USART3_UDRE_vect) {
    695a:	1f 92       	push	r1
    695c:	0f 92       	push	r0
    695e:	0f b6       	in	r0, 0x3f	; 63
    6960:	0f 92       	push	r0
    6962:	11 24       	eor	r1, r1
    6964:	0b b6       	in	r0, 0x3b	; 59
    6966:	0f 92       	push	r0
    6968:	2f 93       	push	r18
    696a:	8f 93       	push	r24
    696c:	9f 93       	push	r25
    696e:	ef 93       	push	r30
    6970:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    6972:	e0 91 16 0d 	lds	r30, 0x0D16	; 0x800d16 <serESPTxOutIndex>
    6976:	f0 91 17 0d 	lds	r31, 0x0D17	; 0x800d17 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    697a:	80 91 19 0d 	lds	r24, 0x0D19	; 0x800d19 <serESPTxInIndex>
    697e:	90 91 1a 0d 	lds	r25, 0x0D1A	; 0x800d1a <serESPTxInIndex+0x1>
    6982:	e8 17       	cp	r30, r24
    6984:	f9 07       	cpc	r31, r25
    6986:	89 f0       	breq	.+34     	; 0x69aa <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    6988:	cf 01       	movw	r24, r30
    698a:	01 96       	adiw	r24, 0x01	; 1
    698c:	20 81       	ld	r18, Z
    698e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    6992:	20 e1       	ldi	r18, 0x10	; 16
    6994:	84 3e       	cpi	r24, 0xE4	; 228
    6996:	92 07       	cpc	r25, r18
    6998:	19 f0       	breq	.+6      	; 0x69a0 <__vector_55+0x46>
    699a:	10 f0       	brcs	.+4      	; 0x69a0 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    699c:	85 ee       	ldi	r24, 0xE5	; 229
    699e:	9e e0       	ldi	r25, 0x0E	; 14
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    69a0:	90 93 17 0d 	sts	0x0D17, r25	; 0x800d17 <serESPTxOutIndex+0x1>
    69a4:	80 93 16 0d 	sts	0x0D16, r24	; 0x800d16 <serESPTxOutIndex>
    69a8:	05 c0       	rjmp	.+10     	; 0x69b4 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    69aa:	e1 e3       	ldi	r30, 0x31	; 49
    69ac:	f1 e0       	ldi	r31, 0x01	; 1
    69ae:	80 81       	ld	r24, Z
    69b0:	8f 7d       	andi	r24, 0xDF	; 223
    69b2:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    69b4:	ff 91       	pop	r31
    69b6:	ef 91       	pop	r30
    69b8:	9f 91       	pop	r25
    69ba:	8f 91       	pop	r24
    69bc:	2f 91       	pop	r18
    69be:	0f 90       	pop	r0
    69c0:	0b be       	out	0x3b, r0	; 59
    69c2:	0f 90       	pop	r0
    69c4:	0f be       	out	0x3f, r0	; 63
    69c6:	0f 90       	pop	r0
    69c8:	1f 90       	pop	r1
    69ca:	18 95       	reti

000069cc <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    69cc:	8a 30       	cpi	r24, 0x0A	; 10
    69ce:	10 f0       	brcs	.+4      	; 0x69d4 <nibbleToChr+0x8>
    69d0:	89 5c       	subi	r24, 0xC9	; 201
    69d2:	08 95       	ret
    69d4:	80 5d       	subi	r24, 0xD0	; 208
    69d6:	08 95       	ret

000069d8 <lcd_setCG>:
    69d8:	ef 92       	push	r14
    69da:	ff 92       	push	r15
    69dc:	1f 93       	push	r17
    69de:	cf 93       	push	r28
    69e0:	df 93       	push	r29
    69e2:	eb 01       	movw	r28, r22
    69e4:	90 e0       	ldi	r25, 0x00	; 0
    69e6:	88 0f       	add	r24, r24
    69e8:	99 1f       	adc	r25, r25
    69ea:	88 0f       	add	r24, r24
    69ec:	99 1f       	adc	r25, r25
    69ee:	88 0f       	add	r24, r24
    69f0:	99 1f       	adc	r25, r25
    69f2:	80 64       	ori	r24, 0x40	; 64
    69f4:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_write_command>
    69f8:	10 e0       	ldi	r17, 0x00	; 0
    69fa:	0a c0       	rjmp	.+20     	; 0x6a10 <lcd_setCG+0x38>
    69fc:	7e 01       	movw	r14, r28
    69fe:	8f ef       	ldi	r24, 0xFF	; 255
    6a00:	e8 1a       	sub	r14, r24
    6a02:	f8 0a       	sbc	r15, r24
    6a04:	fe 01       	movw	r30, r28
    6a06:	84 91       	lpm	r24, Z
    6a08:	0e 94 c2 11 	call	0x2384	; 0x2384 <lcd_write_character>
    6a0c:	1f 5f       	subi	r17, 0xFF	; 255
    6a0e:	e7 01       	movw	r28, r14
    6a10:	18 30       	cpi	r17, 0x08	; 8
    6a12:	a0 f3       	brcs	.-24     	; 0x69fc <lcd_setCG+0x24>
    6a14:	df 91       	pop	r29
    6a16:	cf 91       	pop	r28
    6a18:	1f 91       	pop	r17
    6a1a:	ff 90       	pop	r15
    6a1c:	ef 90       	pop	r14
    6a1e:	08 95       	ret

00006a20 <lcd_initCG>:
    6a20:	67 ed       	ldi	r22, 0xD7	; 215
    6a22:	71 e1       	ldi	r23, 0x11	; 17
    6a24:	80 e0       	ldi	r24, 0x00	; 0
    6a26:	d8 df       	rcall	.-80     	; 0x69d8 <lcd_setCG>
    6a28:	6f ec       	ldi	r22, 0xCF	; 207
    6a2a:	71 e1       	ldi	r23, 0x11	; 17
    6a2c:	81 e0       	ldi	r24, 0x01	; 1
    6a2e:	d4 df       	rcall	.-88     	; 0x69d8 <lcd_setCG>
    6a30:	67 ec       	ldi	r22, 0xC7	; 199
    6a32:	71 e1       	ldi	r23, 0x11	; 17
    6a34:	82 e0       	ldi	r24, 0x02	; 2
    6a36:	d0 cf       	rjmp	.-96     	; 0x69d8 <lcd_setCG>
    6a38:	08 95       	ret

00006a3a <lcd_hexout>:
    6a3a:	cf 93       	push	r28
    6a3c:	c8 2f       	mov	r28, r24
    6a3e:	82 95       	swap	r24
    6a40:	8f 70       	andi	r24, 0x0F	; 15
    6a42:	8a 30       	cpi	r24, 0x0A	; 10
    6a44:	10 f0       	brcs	.+4      	; 0x6a4a <lcd_hexout+0x10>
    6a46:	89 5c       	subi	r24, 0xC9	; 201
    6a48:	01 c0       	rjmp	.+2      	; 0x6a4c <lcd_hexout+0x12>
    6a4a:	80 5d       	subi	r24, 0xD0	; 208
    6a4c:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6a50:	cf 70       	andi	r28, 0x0F	; 15
    6a52:	ca 30       	cpi	r28, 0x0A	; 10
    6a54:	18 f0       	brcs	.+6      	; 0x6a5c <lcd_hexout+0x22>
    6a56:	87 e3       	ldi	r24, 0x37	; 55
    6a58:	8c 0f       	add	r24, r28
    6a5a:	02 c0       	rjmp	.+4      	; 0x6a60 <lcd_hexout+0x26>
    6a5c:	80 e3       	ldi	r24, 0x30	; 48
    6a5e:	8c 0f       	add	r24, r28
    6a60:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6a64:	cf 91       	pop	r28
    6a66:	08 95       	ret

00006a68 <lcd_longout>:
    6a68:	cf 93       	push	r28
    6a6a:	df 93       	push	r29
    6a6c:	d3 e0       	ldi	r29, 0x03	; 3
    6a6e:	1c c0       	rjmp	.+56     	; 0x6aa8 <lcd_longout+0x40>
    6a70:	ed 2f       	mov	r30, r29
    6a72:	0d 2e       	mov	r0, r29
    6a74:	00 0c       	add	r0, r0
    6a76:	ff 0b       	sbc	r31, r31
    6a78:	e6 51       	subi	r30, 0x16	; 22
    6a7a:	ff 4e       	sbci	r31, 0xEF	; 239
    6a7c:	c0 81       	ld	r28, Z
    6a7e:	8c 2f       	mov	r24, r28
    6a80:	82 95       	swap	r24
    6a82:	8f 70       	andi	r24, 0x0F	; 15
    6a84:	8a 30       	cpi	r24, 0x0A	; 10
    6a86:	10 f0       	brcs	.+4      	; 0x6a8c <lcd_longout+0x24>
    6a88:	89 5c       	subi	r24, 0xC9	; 201
    6a8a:	01 c0       	rjmp	.+2      	; 0x6a8e <lcd_longout+0x26>
    6a8c:	80 5d       	subi	r24, 0xD0	; 208
    6a8e:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6a92:	cf 70       	andi	r28, 0x0F	; 15
    6a94:	ca 30       	cpi	r28, 0x0A	; 10
    6a96:	18 f0       	brcs	.+6      	; 0x6a9e <lcd_longout+0x36>
    6a98:	87 e3       	ldi	r24, 0x37	; 55
    6a9a:	8c 0f       	add	r24, r28
    6a9c:	02 c0       	rjmp	.+4      	; 0x6aa2 <lcd_longout+0x3a>
    6a9e:	80 e3       	ldi	r24, 0x30	; 48
    6aa0:	8c 0f       	add	r24, r28
    6aa2:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6aa6:	d1 50       	subi	r29, 0x01	; 1
    6aa8:	dd 23       	and	r29, r29
    6aaa:	14 f7       	brge	.-60     	; 0x6a70 <lcd_longout+0x8>
    6aac:	df 91       	pop	r29
    6aae:	cf 91       	pop	r28
    6ab0:	08 95       	ret

00006ab2 <lcd_dec2out>:
    6ab2:	cf 93       	push	r28
    6ab4:	c8 2f       	mov	r28, r24
    6ab6:	84 36       	cpi	r24, 0x64	; 100
    6ab8:	50 f0       	brcs	.+20     	; 0x6ace <lcd_dec2out+0x1c>
    6aba:	8d e2       	ldi	r24, 0x2D	; 45
    6abc:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6ac0:	8d e2       	ldi	r24, 0x2D	; 45
    6ac2:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6ac6:	0d c0       	rjmp	.+26     	; 0x6ae2 <lcd_dec2out+0x30>
    6ac8:	ca 50       	subi	r28, 0x0A	; 10
    6aca:	8f 5f       	subi	r24, 0xFF	; 255
    6acc:	01 c0       	rjmp	.+2      	; 0x6ad0 <lcd_dec2out+0x1e>
    6ace:	80 e0       	ldi	r24, 0x00	; 0
    6ad0:	ca 30       	cpi	r28, 0x0A	; 10
    6ad2:	d0 f7       	brcc	.-12     	; 0x6ac8 <lcd_dec2out+0x16>
    6ad4:	80 5d       	subi	r24, 0xD0	; 208
    6ad6:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6ada:	80 e3       	ldi	r24, 0x30	; 48
    6adc:	8c 0f       	add	r24, r28
    6ade:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6ae2:	cf 91       	pop	r28
    6ae4:	08 95       	ret

00006ae6 <putChar_Dec2>:
    6ae6:	84 36       	cpi	r24, 0x64	; 100
    6ae8:	58 f0       	brcs	.+22     	; 0x6b00 <putChar_Dec2+0x1a>
    6aea:	8d e2       	ldi	r24, 0x2D	; 45
    6aec:	db 01       	movw	r26, r22
    6aee:	8c 93       	st	X, r24
    6af0:	fb 01       	movw	r30, r22
    6af2:	32 96       	adiw	r30, 0x02	; 2
    6af4:	11 96       	adiw	r26, 0x01	; 1
    6af6:	8c 93       	st	X, r24
    6af8:	0f c0       	rjmp	.+30     	; 0x6b18 <putChar_Dec2+0x32>
    6afa:	8a 50       	subi	r24, 0x0A	; 10
    6afc:	9f 5f       	subi	r25, 0xFF	; 255
    6afe:	01 c0       	rjmp	.+2      	; 0x6b02 <putChar_Dec2+0x1c>
    6b00:	90 e0       	ldi	r25, 0x00	; 0
    6b02:	8a 30       	cpi	r24, 0x0A	; 10
    6b04:	d0 f7       	brcc	.-12     	; 0x6afa <putChar_Dec2+0x14>
    6b06:	90 5d       	subi	r25, 0xD0	; 208
    6b08:	fb 01       	movw	r30, r22
    6b0a:	90 83       	st	Z, r25
    6b0c:	32 96       	adiw	r30, 0x02	; 2
    6b0e:	90 e3       	ldi	r25, 0x30	; 48
    6b10:	98 0f       	add	r25, r24
    6b12:	db 01       	movw	r26, r22
    6b14:	11 96       	adiw	r26, 0x01	; 1
    6b16:	9c 93       	st	X, r25
    6b18:	10 82       	st	Z, r1
    6b1a:	cf 01       	movw	r24, r30
    6b1c:	08 95       	ret

00006b1e <putChar_Dec>:
    6b1e:	90 e0       	ldi	r25, 0x00	; 0
    6b20:	02 c0       	rjmp	.+4      	; 0x6b26 <putChar_Dec+0x8>
    6b22:	84 56       	subi	r24, 0x64	; 100
    6b24:	9f 5f       	subi	r25, 0xFF	; 255
    6b26:	84 36       	cpi	r24, 0x64	; 100
    6b28:	e0 f7       	brcc	.-8      	; 0x6b22 <putChar_Dec+0x4>
    6b2a:	99 23       	and	r25, r25
    6b2c:	39 f0       	breq	.+14     	; 0x6b3c <putChar_Dec+0x1e>
    6b2e:	90 5d       	subi	r25, 0xD0	; 208
    6b30:	db 01       	movw	r26, r22
    6b32:	9c 93       	st	X, r25
    6b34:	6f 5f       	subi	r22, 0xFF	; 255
    6b36:	7f 4f       	sbci	r23, 0xFF	; 255
    6b38:	2f ef       	ldi	r18, 0xFF	; 255
    6b3a:	01 c0       	rjmp	.+2      	; 0x6b3e <putChar_Dec+0x20>
    6b3c:	20 e0       	ldi	r18, 0x00	; 0
    6b3e:	90 e0       	ldi	r25, 0x00	; 0
    6b40:	02 c0       	rjmp	.+4      	; 0x6b46 <putChar_Dec+0x28>
    6b42:	8a 50       	subi	r24, 0x0A	; 10
    6b44:	9f 5f       	subi	r25, 0xFF	; 255
    6b46:	8a 30       	cpi	r24, 0x0A	; 10
    6b48:	e0 f7       	brcc	.-8      	; 0x6b42 <putChar_Dec+0x24>
    6b4a:	91 11       	cpse	r25, r1
    6b4c:	02 c0       	rjmp	.+4      	; 0x6b52 <putChar_Dec+0x34>
    6b4e:	2f 3f       	cpi	r18, 0xFF	; 255
    6b50:	31 f4       	brne	.+12     	; 0x6b5e <putChar_Dec+0x40>
    6b52:	fb 01       	movw	r30, r22
    6b54:	31 96       	adiw	r30, 0x01	; 1
    6b56:	90 5d       	subi	r25, 0xD0	; 208
    6b58:	db 01       	movw	r26, r22
    6b5a:	9c 93       	st	X, r25
    6b5c:	01 c0       	rjmp	.+2      	; 0x6b60 <putChar_Dec+0x42>
    6b5e:	fb 01       	movw	r30, r22
    6b60:	80 5d       	subi	r24, 0xD0	; 208
    6b62:	80 83       	st	Z, r24
    6b64:	11 82       	std	Z+1, r1	; 0x01
    6b66:	cf 01       	movw	r24, r30
    6b68:	01 96       	adiw	r24, 0x01	; 1
    6b6a:	08 95       	ret

00006b6c <putChar_hex>:
    6b6c:	fb 01       	movw	r30, r22
    6b6e:	98 2f       	mov	r25, r24
    6b70:	92 95       	swap	r25
    6b72:	9f 70       	andi	r25, 0x0F	; 15
    6b74:	9a 30       	cpi	r25, 0x0A	; 10
    6b76:	10 f0       	brcs	.+4      	; 0x6b7c <putChar_hex+0x10>
    6b78:	99 5c       	subi	r25, 0xC9	; 201
    6b7a:	01 c0       	rjmp	.+2      	; 0x6b7e <putChar_hex+0x12>
    6b7c:	90 5d       	subi	r25, 0xD0	; 208
    6b7e:	90 83       	st	Z, r25
    6b80:	98 2f       	mov	r25, r24
    6b82:	9f 70       	andi	r25, 0x0F	; 15
    6b84:	9f 01       	movw	r18, r30
    6b86:	2e 5f       	subi	r18, 0xFE	; 254
    6b88:	3f 4f       	sbci	r19, 0xFF	; 255
    6b8a:	9a 30       	cpi	r25, 0x0A	; 10
    6b8c:	10 f0       	brcs	.+4      	; 0x6b92 <putChar_hex+0x26>
    6b8e:	99 5c       	subi	r25, 0xC9	; 201
    6b90:	01 c0       	rjmp	.+2      	; 0x6b94 <putChar_hex+0x28>
    6b92:	90 5d       	subi	r25, 0xD0	; 208
    6b94:	91 83       	std	Z+1, r25	; 0x01
    6b96:	12 82       	std	Z+2, r1	; 0x02
    6b98:	c9 01       	movw	r24, r18
    6b9a:	08 95       	ret

00006b9c <putChar_MidiChan>:
    6b9c:	80 31       	cpi	r24, 0x10	; 16
    6b9e:	48 f0       	brcs	.+18     	; 0x6bb2 <putChar_MidiChan+0x16>
    6ba0:	8e e6       	ldi	r24, 0x6E	; 110
    6ba2:	db 01       	movw	r26, r22
    6ba4:	8c 93       	st	X, r24
    6ba6:	fb 01       	movw	r30, r22
    6ba8:	32 96       	adiw	r30, 0x02	; 2
    6baa:	8f e6       	ldi	r24, 0x6F	; 111
    6bac:	11 96       	adiw	r26, 0x01	; 1
    6bae:	8c 93       	st	X, r24
    6bb0:	14 c0       	rjmp	.+40     	; 0x6bda <putChar_MidiChan+0x3e>
    6bb2:	91 e0       	ldi	r25, 0x01	; 1
    6bb4:	98 0f       	add	r25, r24
    6bb6:	9a 30       	cpi	r25, 0x0A	; 10
    6bb8:	38 f0       	brcs	.+14     	; 0x6bc8 <putChar_MidiChan+0x2c>
    6bba:	db 01       	movw	r26, r22
    6bbc:	11 96       	adiw	r26, 0x01	; 1
    6bbe:	81 e3       	ldi	r24, 0x31	; 49
    6bc0:	fb 01       	movw	r30, r22
    6bc2:	80 83       	st	Z, r24
    6bc4:	96 ef       	ldi	r25, 0xF6	; 246
    6bc6:	05 c0       	rjmp	.+10     	; 0x6bd2 <putChar_MidiChan+0x36>
    6bc8:	db 01       	movw	r26, r22
    6bca:	11 96       	adiw	r26, 0x01	; 1
    6bcc:	80 e2       	ldi	r24, 0x20	; 32
    6bce:	fb 01       	movw	r30, r22
    6bd0:	80 83       	st	Z, r24
    6bd2:	fd 01       	movw	r30, r26
    6bd4:	31 96       	adiw	r30, 0x01	; 1
    6bd6:	90 5d       	subi	r25, 0xD0	; 208
    6bd8:	9c 93       	st	X, r25
    6bda:	10 82       	st	Z, r1
    6bdc:	cf 01       	movw	r24, r30
    6bde:	08 95       	ret

00006be0 <putChar_long>:
    6be0:	ac 01       	movw	r20, r24
    6be2:	fb 01       	movw	r30, r22
    6be4:	34 96       	adiw	r30, 0x04	; 4
    6be6:	db 01       	movw	r26, r22
    6be8:	14 96       	adiw	r26, 0x04	; 4
    6bea:	1c 92       	st	X, r1
    6bec:	20 e0       	ldi	r18, 0x00	; 0
    6bee:	10 c0       	rjmp	.+32     	; 0x6c10 <putChar_long+0x30>
    6bf0:	94 2f       	mov	r25, r20
    6bf2:	9f 70       	andi	r25, 0x0F	; 15
    6bf4:	31 97       	sbiw	r30, 0x01	; 1
    6bf6:	9a 30       	cpi	r25, 0x0A	; 10
    6bf8:	10 f0       	brcs	.+4      	; 0x6bfe <putChar_long+0x1e>
    6bfa:	99 5c       	subi	r25, 0xC9	; 201
    6bfc:	01 c0       	rjmp	.+2      	; 0x6c00 <putChar_long+0x20>
    6bfe:	90 5d       	subi	r25, 0xD0	; 208
    6c00:	90 83       	st	Z, r25
    6c02:	52 95       	swap	r21
    6c04:	42 95       	swap	r20
    6c06:	4f 70       	andi	r20, 0x0F	; 15
    6c08:	45 27       	eor	r20, r21
    6c0a:	5f 70       	andi	r21, 0x0F	; 15
    6c0c:	45 27       	eor	r20, r21
    6c0e:	2f 5f       	subi	r18, 0xFF	; 255
    6c10:	24 30       	cpi	r18, 0x04	; 4
    6c12:	70 f3       	brcs	.-36     	; 0x6bf0 <putChar_long+0x10>
    6c14:	cf 01       	movw	r24, r30
    6c16:	04 96       	adiw	r24, 0x04	; 4
    6c18:	08 95       	ret

00006c1a <putChar_Note>:
    6c1a:	88 23       	and	r24, r24
    6c1c:	8c f4       	brge	.+34     	; 0x6c40 <putChar_Note+0x26>
    6c1e:	8d e2       	ldi	r24, 0x2D	; 45
    6c20:	db 01       	movw	r26, r22
    6c22:	8c 93       	st	X, r24
    6c24:	9e e6       	ldi	r25, 0x6E	; 110
    6c26:	11 96       	adiw	r26, 0x01	; 1
    6c28:	9c 93       	st	X, r25
    6c2a:	11 97       	sbiw	r26, 0x01	; 1
    6c2c:	12 96       	adiw	r26, 0x02	; 2
    6c2e:	8c 93       	st	X, r24
    6c30:	12 97       	sbiw	r26, 0x02	; 2
    6c32:	14 96       	adiw	r26, 0x04	; 4
    6c34:	fb 01       	movw	r30, r22
    6c36:	13 82       	std	Z+3, r1	; 0x03
    6c38:	49 c0       	rjmp	.+146    	; 0x6ccc <putChar_Note+0xb2>
    6c3a:	8c 50       	subi	r24, 0x0C	; 12
    6c3c:	9f 5f       	subi	r25, 0xFF	; 255
    6c3e:	01 c0       	rjmp	.+2      	; 0x6c42 <putChar_Note+0x28>
    6c40:	90 e0       	ldi	r25, 0x00	; 0
    6c42:	8c 30       	cpi	r24, 0x0C	; 12
    6c44:	d0 f7       	brcc	.-12     	; 0x6c3a <putChar_Note+0x20>
    6c46:	8b 30       	cpi	r24, 0x0B	; 11
    6c48:	39 f4       	brne	.+14     	; 0x6c58 <putChar_Note+0x3e>
    6c4a:	fb 01       	movw	r30, r22
    6c4c:	31 96       	adiw	r30, 0x01	; 1
    6c4e:	88 e4       	ldi	r24, 0x48	; 72
    6c50:	db 01       	movw	r26, r22
    6c52:	8c 93       	st	X, r24
    6c54:	8f e5       	ldi	r24, 0x5F	; 95
    6c56:	27 c0       	rjmp	.+78     	; 0x6ca6 <putChar_Note+0x8c>
    6c58:	85 30       	cpi	r24, 0x05	; 5
    6c5a:	58 f4       	brcc	.+22     	; 0x6c72 <putChar_Note+0x58>
    6c5c:	fb 01       	movw	r30, r22
    6c5e:	31 96       	adiw	r30, 0x01	; 1
    6c60:	28 2f       	mov	r18, r24
    6c62:	26 95       	lsr	r18
    6c64:	2d 5b       	subi	r18, 0xBD	; 189
    6c66:	db 01       	movw	r26, r22
    6c68:	2c 93       	st	X, r18
    6c6a:	80 fd       	sbrc	r24, 0
    6c6c:	19 c0       	rjmp	.+50     	; 0x6ca0 <putChar_Note+0x86>
    6c6e:	8f e5       	ldi	r24, 0x5F	; 95
    6c70:	1a c0       	rjmp	.+52     	; 0x6ca6 <putChar_Note+0x8c>
    6c72:	89 30       	cpi	r24, 0x09	; 9
    6c74:	30 f0       	brcs	.+12     	; 0x6c82 <putChar_Note+0x68>
    6c76:	fb 01       	movw	r30, r22
    6c78:	31 96       	adiw	r30, 0x01	; 1
    6c7a:	21 e4       	ldi	r18, 0x41	; 65
    6c7c:	db 01       	movw	r26, r22
    6c7e:	2c 93       	st	X, r18
    6c80:	0b c0       	rjmp	.+22     	; 0x6c98 <putChar_Note+0x7e>
    6c82:	fb 01       	movw	r30, r22
    6c84:	31 96       	adiw	r30, 0x01	; 1
    6c86:	28 2f       	mov	r18, r24
    6c88:	30 e0       	ldi	r19, 0x00	; 0
    6c8a:	25 50       	subi	r18, 0x05	; 5
    6c8c:	31 09       	sbc	r19, r1
    6c8e:	35 95       	asr	r19
    6c90:	27 95       	ror	r18
    6c92:	2a 5b       	subi	r18, 0xBA	; 186
    6c94:	db 01       	movw	r26, r22
    6c96:	2c 93       	st	X, r18
    6c98:	80 ff       	sbrs	r24, 0
    6c9a:	04 c0       	rjmp	.+8      	; 0x6ca4 <putChar_Note+0x8a>
    6c9c:	8f e5       	ldi	r24, 0x5F	; 95
    6c9e:	03 c0       	rjmp	.+6      	; 0x6ca6 <putChar_Note+0x8c>
    6ca0:	83 e2       	ldi	r24, 0x23	; 35
    6ca2:	01 c0       	rjmp	.+2      	; 0x6ca6 <putChar_Note+0x8c>
    6ca4:	83 e2       	ldi	r24, 0x23	; 35
    6ca6:	80 83       	st	Z, r24
    6ca8:	91 11       	cpse	r25, r1
    6caa:	05 c0       	rjmp	.+10     	; 0x6cb6 <putChar_Note+0x9c>
    6cac:	df 01       	movw	r26, r30
    6cae:	12 96       	adiw	r26, 0x02	; 2
    6cb0:	8d e6       	ldi	r24, 0x6D	; 109
    6cb2:	81 83       	std	Z+1, r24	; 0x01
    6cb4:	0b c0       	rjmp	.+22     	; 0x6ccc <putChar_Note+0xb2>
    6cb6:	9c 30       	cpi	r25, 0x0C	; 12
    6cb8:	28 f4       	brcc	.+10     	; 0x6cc4 <putChar_Note+0xaa>
    6cba:	df 01       	movw	r26, r30
    6cbc:	12 96       	adiw	r26, 0x02	; 2
    6cbe:	91 5d       	subi	r25, 0xD1	; 209
    6cc0:	91 83       	std	Z+1, r25	; 0x01
    6cc2:	04 c0       	rjmp	.+8      	; 0x6ccc <putChar_Note+0xb2>
    6cc4:	df 01       	movw	r26, r30
    6cc6:	12 96       	adiw	r26, 0x02	; 2
    6cc8:	8d e2       	ldi	r24, 0x2D	; 45
    6cca:	81 83       	std	Z+1, r24	; 0x01
    6ccc:	1c 92       	st	X, r1
    6cce:	cd 01       	movw	r24, r26
    6cd0:	08 95       	ret

00006cd2 <putChar_Manual>:
    6cd2:	83 30       	cpi	r24, 0x03	; 3
    6cd4:	38 f4       	brcc	.+14     	; 0x6ce4 <putChar_Manual+0x12>
    6cd6:	fb 01       	movw	r30, r22
    6cd8:	31 96       	adiw	r30, 0x01	; 1
    6cda:	93 e3       	ldi	r25, 0x33	; 51
    6cdc:	98 1b       	sub	r25, r24
    6cde:	db 01       	movw	r26, r22
    6ce0:	9c 93       	st	X, r25
    6ce2:	0d c0       	rjmp	.+26     	; 0x6cfe <putChar_Manual+0x2c>
    6ce4:	83 30       	cpi	r24, 0x03	; 3
    6ce6:	31 f4       	brne	.+12     	; 0x6cf4 <putChar_Manual+0x22>
    6ce8:	fb 01       	movw	r30, r22
    6cea:	31 96       	adiw	r30, 0x01	; 1
    6cec:	80 e5       	ldi	r24, 0x50	; 80
    6cee:	db 01       	movw	r26, r22
    6cf0:	8c 93       	st	X, r24
    6cf2:	05 c0       	rjmp	.+10     	; 0x6cfe <putChar_Manual+0x2c>
    6cf4:	fb 01       	movw	r30, r22
    6cf6:	31 96       	adiw	r30, 0x01	; 1
    6cf8:	8d e2       	ldi	r24, 0x2D	; 45
    6cfa:	db 01       	movw	r26, r22
    6cfc:	8c 93       	st	X, r24
    6cfe:	10 82       	st	Z, r1
    6d00:	cf 01       	movw	r24, r30
    6d02:	08 95       	ret

00006d04 <putString_P>:
    6d04:	fc 01       	movw	r30, r24
    6d06:	db 01       	movw	r26, r22
    6d08:	20 e0       	ldi	r18, 0x00	; 0
    6d0a:	02 c0       	rjmp	.+4      	; 0x6d10 <putString_P+0xc>
    6d0c:	28 2f       	mov	r18, r24
    6d0e:	da 01       	movw	r26, r20
    6d10:	94 91       	lpm	r25, Z
    6d12:	99 23       	and	r25, r25
    6d14:	51 f0       	breq	.+20     	; 0x6d2a <putString_P+0x26>
    6d16:	ad 01       	movw	r20, r26
    6d18:	4f 5f       	subi	r20, 0xFF	; 255
    6d1a:	5f 4f       	sbci	r21, 0xFF	; 255
    6d1c:	31 96       	adiw	r30, 0x01	; 1
    6d1e:	9c 93       	st	X, r25
    6d20:	81 e0       	ldi	r24, 0x01	; 1
    6d22:	82 0f       	add	r24, r18
    6d24:	24 31       	cpi	r18, 0x14	; 20
    6d26:	90 f3       	brcs	.-28     	; 0x6d0c <putString_P+0x8>
    6d28:	01 c0       	rjmp	.+2      	; 0x6d2c <putString_P+0x28>
    6d2a:	ad 01       	movw	r20, r26
    6d2c:	ca 01       	movw	r24, r20
    6d2e:	08 95       	ret

00006d30 <lcd_wordout>:
    6d30:	cf 93       	push	r28
    6d32:	c8 2f       	mov	r28, r24
    6d34:	89 2f       	mov	r24, r25
    6d36:	81 de       	rcall	.-766    	; 0x6a3a <lcd_hexout>
    6d38:	8c 2f       	mov	r24, r28
    6d3a:	7f de       	rcall	.-770    	; 0x6a3a <lcd_hexout>
    6d3c:	cf 91       	pop	r28
    6d3e:	08 95       	ret

00006d40 <lcd_noteOut>:
    6d40:	cf 93       	push	r28
    6d42:	df 93       	push	r29
    6d44:	88 23       	and	r24, r24
    6d46:	e4 f1       	brlt	.+120    	; 0x6dc0 <lcd_noteOut+0x80>
    6d48:	90 e0       	ldi	r25, 0x00	; 0
    6d4a:	02 c0       	rjmp	.+4      	; 0x6d50 <lcd_noteOut+0x10>
    6d4c:	9f 5f       	subi	r25, 0xFF	; 255
    6d4e:	8c 50       	subi	r24, 0x0C	; 12
    6d50:	8c 30       	cpi	r24, 0x0C	; 12
    6d52:	e0 f7       	brcc	.-8      	; 0x6d4c <lcd_noteOut+0xc>
    6d54:	48 2f       	mov	r20, r24
    6d56:	50 e0       	ldi	r21, 0x00	; 0
    6d58:	4c 30       	cpi	r20, 0x0C	; 12
    6d5a:	51 05       	cpc	r21, r1
    6d5c:	30 f4       	brcc	.+12     	; 0x6d6a <lcd_noteOut+0x2a>
    6d5e:	fa 01       	movw	r30, r20
    6d60:	88 27       	eor	r24, r24
    6d62:	ea 55       	subi	r30, 0x5A	; 90
    6d64:	ff 4f       	sbci	r31, 0xFF	; 255
    6d66:	8f 4f       	sbci	r24, 0xFF	; 255
    6d68:	5d c1       	rjmp	.+698    	; 0x7024 <__tablejump2__>
    6d6a:	d3 e2       	ldi	r29, 0x23	; 35
    6d6c:	80 e2       	ldi	r24, 0x20	; 32
    6d6e:	23 c0       	rjmp	.+70     	; 0x6db6 <lcd_noteOut+0x76>
    6d70:	d3 e2       	ldi	r29, 0x23	; 35
    6d72:	84 e4       	ldi	r24, 0x44	; 68
    6d74:	20 c0       	rjmp	.+64     	; 0x6db6 <lcd_noteOut+0x76>
    6d76:	d3 e2       	ldi	r29, 0x23	; 35
    6d78:	86 e4       	ldi	r24, 0x46	; 70
    6d7a:	1d c0       	rjmp	.+58     	; 0x6db6 <lcd_noteOut+0x76>
    6d7c:	d3 e2       	ldi	r29, 0x23	; 35
    6d7e:	87 e4       	ldi	r24, 0x47	; 71
    6d80:	1a c0       	rjmp	.+52     	; 0x6db6 <lcd_noteOut+0x76>
    6d82:	d3 e2       	ldi	r29, 0x23	; 35
    6d84:	81 e4       	ldi	r24, 0x41	; 65
    6d86:	17 c0       	rjmp	.+46     	; 0x6db6 <lcd_noteOut+0x76>
    6d88:	d5 ea       	ldi	r29, 0xA5	; 165
    6d8a:	83 e4       	ldi	r24, 0x43	; 67
    6d8c:	14 c0       	rjmp	.+40     	; 0x6db6 <lcd_noteOut+0x76>
    6d8e:	d5 ea       	ldi	r29, 0xA5	; 165
    6d90:	84 e4       	ldi	r24, 0x44	; 68
    6d92:	11 c0       	rjmp	.+34     	; 0x6db6 <lcd_noteOut+0x76>
    6d94:	d5 ea       	ldi	r29, 0xA5	; 165
    6d96:	85 e4       	ldi	r24, 0x45	; 69
    6d98:	0e c0       	rjmp	.+28     	; 0x6db6 <lcd_noteOut+0x76>
    6d9a:	d5 ea       	ldi	r29, 0xA5	; 165
    6d9c:	86 e4       	ldi	r24, 0x46	; 70
    6d9e:	0b c0       	rjmp	.+22     	; 0x6db6 <lcd_noteOut+0x76>
    6da0:	d5 ea       	ldi	r29, 0xA5	; 165
    6da2:	87 e4       	ldi	r24, 0x47	; 71
    6da4:	08 c0       	rjmp	.+16     	; 0x6db6 <lcd_noteOut+0x76>
    6da6:	d5 ea       	ldi	r29, 0xA5	; 165
    6da8:	81 e4       	ldi	r24, 0x41	; 65
    6daa:	05 c0       	rjmp	.+10     	; 0x6db6 <lcd_noteOut+0x76>
    6dac:	d5 ea       	ldi	r29, 0xA5	; 165
    6dae:	88 e4       	ldi	r24, 0x48	; 72
    6db0:	02 c0       	rjmp	.+4      	; 0x6db6 <lcd_noteOut+0x76>
    6db2:	d3 e2       	ldi	r29, 0x23	; 35
    6db4:	83 e4       	ldi	r24, 0x43	; 67
    6db6:	99 23       	and	r25, r25
    6db8:	39 f0       	breq	.+14     	; 0x6dc8 <lcd_noteOut+0x88>
    6dba:	cf e2       	ldi	r28, 0x2F	; 47
    6dbc:	c9 0f       	add	r28, r25
    6dbe:	05 c0       	rjmp	.+10     	; 0x6dca <lcd_noteOut+0x8a>
    6dc0:	cd e2       	ldi	r28, 0x2D	; 45
    6dc2:	dd e2       	ldi	r29, 0x2D	; 45
    6dc4:	8d e2       	ldi	r24, 0x2D	; 45
    6dc6:	01 c0       	rjmp	.+2      	; 0x6dca <lcd_noteOut+0x8a>
    6dc8:	cd e2       	ldi	r28, 0x2D	; 45
    6dca:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6dce:	8d 2f       	mov	r24, r29
    6dd0:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6dd4:	8c 2f       	mov	r24, r28
    6dd6:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6dda:	83 e0       	ldi	r24, 0x03	; 3
    6ddc:	df 91       	pop	r29
    6dde:	cf 91       	pop	r28
    6de0:	08 95       	ret

00006de2 <lcd_ChannelOut>:
    6de2:	cf 93       	push	r28
    6de4:	c8 2f       	mov	r28, r24
    6de6:	cf 70       	andi	r28, 0x0F	; 15
    6de8:	81 e0       	ldi	r24, 0x01	; 1
    6dea:	8c 0f       	add	r24, r28
    6dec:	8a 30       	cpi	r24, 0x0A	; 10
    6dee:	28 f0       	brcs	.+10     	; 0x6dfa <lcd_ChannelOut+0x18>
    6df0:	81 e3       	ldi	r24, 0x31	; 49
    6df2:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6df6:	87 ef       	ldi	r24, 0xF7	; 247
    6df8:	8c 0f       	add	r24, r28
    6dfa:	80 5d       	subi	r24, 0xD0	; 208
    6dfc:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6e00:	cf 91       	pop	r28
    6e02:	08 95       	ret

00006e04 <lcd_ManualOutDec>:
    6e04:	84 30       	cpi	r24, 0x04	; 4
    6e06:	20 f0       	brcs	.+8      	; 0x6e10 <lcd_ManualOutDec+0xc>
    6e08:	8d e2       	ldi	r24, 0x2D	; 45
    6e0a:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <lcd_putc>
    6e0e:	08 95       	ret
    6e10:	83 30       	cpi	r24, 0x03	; 3
    6e12:	21 f4       	brne	.+8      	; 0x6e1c <lcd_ManualOutDec+0x18>
    6e14:	80 e5       	ldi	r24, 0x50	; 80
    6e16:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <lcd_putc>
    6e1a:	08 95       	ret
    6e1c:	93 e3       	ldi	r25, 0x33	; 51
    6e1e:	98 1b       	sub	r25, r24
    6e20:	89 2f       	mov	r24, r25
    6e22:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <lcd_putc>
    6e26:	08 95       	ret

00006e28 <lcd_blank>:
    6e28:	cf 93       	push	r28
    6e2a:	04 c0       	rjmp	.+8      	; 0x6e34 <lcd_blank+0xc>
    6e2c:	80 e2       	ldi	r24, 0x20	; 32
    6e2e:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6e32:	8c 2f       	mov	r24, r28
    6e34:	cf ef       	ldi	r28, 0xFF	; 255
    6e36:	c8 0f       	add	r28, r24
    6e38:	81 11       	cpse	r24, r1
    6e3a:	f8 cf       	rjmp	.-16     	; 0x6e2c <lcd_blank+0x4>
    6e3c:	cf 91       	pop	r28
    6e3e:	08 95       	ret

00006e40 <lcd_clrEol>:
    6e40:	cf 93       	push	r28
    6e42:	90 e0       	ldi	r25, 0x00	; 0
    6e44:	04 c0       	rjmp	.+8      	; 0x6e4e <lcd_clrEol+0xe>
    6e46:	80 e2       	ldi	r24, 0x20	; 32
    6e48:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6e4c:	9c 2f       	mov	r25, r28
    6e4e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    6e52:	84 31       	cpi	r24, 0x14	; 20
    6e54:	51 f0       	breq	.+20     	; 0x6e6a <lcd_clrEol+0x2a>
    6e56:	84 35       	cpi	r24, 0x54	; 84
    6e58:	41 f0       	breq	.+16     	; 0x6e6a <lcd_clrEol+0x2a>
    6e5a:	88 32       	cpi	r24, 0x28	; 40
    6e5c:	31 f0       	breq	.+12     	; 0x6e6a <lcd_clrEol+0x2a>
    6e5e:	88 36       	cpi	r24, 0x68	; 104
    6e60:	21 f0       	breq	.+8      	; 0x6e6a <lcd_clrEol+0x2a>
    6e62:	c1 e0       	ldi	r28, 0x01	; 1
    6e64:	c9 0f       	add	r28, r25
    6e66:	94 31       	cpi	r25, 0x14	; 20
    6e68:	70 f3       	brcs	.-36     	; 0x6e46 <lcd_clrEol+0x6>
    6e6a:	cf 91       	pop	r28
    6e6c:	08 95       	ret

00006e6e <lcd_cursosblink>:
    6e6e:	8d e0       	ldi	r24, 0x0D	; 13
    6e70:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_write_command>
    6e74:	8f ef       	ldi	r24, 0xFF	; 255
    6e76:	80 93 e8 10 	sts	0x10E8, r24	; 0x8010e8 <lcd_cursorIsOn>
    6e7a:	08 95       	ret

00006e7c <lcd_cursoroff>:
    6e7c:	8c e0       	ldi	r24, 0x0C	; 12
    6e7e:	0e 94 da 11 	call	0x23b4	; 0x23b4 <lcd_write_command>
    6e82:	10 92 e8 10 	sts	0x10E8, r1	; 0x8010e8 <lcd_cursorIsOn>
    6e86:	08 95       	ret

00006e88 <lcd_waitSymbolOn>:
    6e88:	cf 93       	push	r28
    6e8a:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    6e8e:	8c e0       	ldi	r24, 0x0C	; 12
    6e90:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    6e94:	81 ea       	ldi	r24, 0xA1	; 161
    6e96:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6e9a:	8c 2f       	mov	r24, r28
    6e9c:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    6ea0:	cf 91       	pop	r28
    6ea2:	08 95       	ret

00006ea4 <lcd_waitSymbolOff>:
    6ea4:	cf 93       	push	r28
    6ea6:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    6eaa:	8c e0       	ldi	r24, 0x0C	; 12
    6eac:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    6eb0:	80 e2       	ldi	r24, 0x20	; 32
    6eb2:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>
    6eb6:	8c 2f       	mov	r24, r28
    6eb8:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
    6ebc:	cf 91       	pop	r28
    6ebe:	08 95       	ret

00006ec0 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    6ec0:	84 30       	cpi	r24, 0x04	; 4
    6ec2:	28 f0       	brcs	.+10     	; 0x6ece <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    6ec4:	20 e0       	ldi	r18, 0x00	; 0
    6ec6:	0d c0       	rjmp	.+26     	; 0x6ee2 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    6ec8:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    6eca:	fa 01       	movw	r30, r20
    6ecc:	02 c0       	rjmp	.+4      	; 0x6ed2 <keylabel_set+0x12>
    6ece:	fb 01       	movw	r30, r22
    6ed0:	20 e0       	ldi	r18, 0x00	; 0
    6ed2:	af 01       	movw	r20, r30
    6ed4:	4f 5f       	subi	r20, 0xFF	; 255
    6ed6:	5f 4f       	sbci	r21, 0xFF	; 255
    6ed8:	94 91       	lpm	r25, Z
    6eda:	99 23       	and	r25, r25
    6edc:	11 f0       	breq	.+4      	; 0x6ee2 <keylabel_set+0x22>
    6ede:	25 30       	cpi	r18, 0x05	; 5
    6ee0:	98 f3       	brcs	.-26     	; 0x6ec8 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    6ee2:	90 e0       	ldi	r25, 0x00	; 0
    6ee4:	dc 01       	movw	r26, r24
    6ee6:	aa 0f       	add	r26, r26
    6ee8:	bb 1f       	adc	r27, r27
    6eea:	aa 0f       	add	r26, r26
    6eec:	bb 1f       	adc	r27, r27
    6eee:	8a 0f       	add	r24, r26
    6ef0:	9b 1f       	adc	r25, r27
    6ef2:	dc 01       	movw	r26, r24
    6ef4:	af 5e       	subi	r26, 0xEF	; 239
    6ef6:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    6ef8:	45 e0       	ldi	r20, 0x05	; 5
    6efa:	50 e0       	ldi	r21, 0x00	; 0
    6efc:	42 1b       	sub	r20, r18
    6efe:	51 09       	sbc	r21, r1
    6f00:	ca 01       	movw	r24, r20
    6f02:	99 23       	and	r25, r25
    6f04:	0c f4       	brge	.+2      	; 0x6f08 <keylabel_set+0x48>
    6f06:	01 96       	adiw	r24, 0x01	; 1
    6f08:	95 95       	asr	r25
    6f0a:	87 95       	ror	r24
    6f0c:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    6f0e:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    6f10:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    6f12:	0e c0       	rjmp	.+28     	; 0x6f30 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    6f14:	93 17       	cp	r25, r19
    6f16:	10 f0       	brcs	.+4      	; 0x6f1c <keylabel_set+0x5c>
    6f18:	98 17       	cp	r25, r24
    6f1a:	18 f0       	brcs	.+6      	; 0x6f22 <keylabel_set+0x62>
			*charBufPtr = ' ';
    6f1c:	20 e2       	ldi	r18, 0x20	; 32
    6f1e:	2c 93       	st	X, r18
    6f20:	05 c0       	rjmp	.+10     	; 0x6f2c <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    6f22:	fb 01       	movw	r30, r22
    6f24:	24 91       	lpm	r18, Z
    6f26:	2c 93       	st	X, r18
    6f28:	6f 5f       	subi	r22, 0xFF	; 255
    6f2a:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    6f2c:	11 96       	adiw	r26, 0x01	; 1
		i++;
    6f2e:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    6f30:	95 30       	cpi	r25, 0x05	; 5
    6f32:	80 f3       	brcs	.-32     	; 0x6f14 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    6f34:	08 95       	ret

00006f36 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    6f36:	90 e0       	ldi	r25, 0x00	; 0
    6f38:	fc 01       	movw	r30, r24
    6f3a:	ee 0f       	add	r30, r30
    6f3c:	ff 1f       	adc	r31, r31
    6f3e:	ee 0f       	add	r30, r30
    6f40:	ff 1f       	adc	r31, r31
    6f42:	8e 0f       	add	r24, r30
    6f44:	9f 1f       	adc	r25, r31
    6f46:	fc 01       	movw	r30, r24
    6f48:	ef 5e       	subi	r30, 0xEF	; 239
    6f4a:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f4c:	80 e0       	ldi	r24, 0x00	; 0
    6f4e:	04 c0       	rjmp	.+8      	; 0x6f58 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    6f50:	90 e2       	ldi	r25, 0x20	; 32
    6f52:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f54:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    6f56:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6f58:	85 30       	cpi	r24, 0x05	; 5
    6f5a:	d0 f3       	brcs	.-12     	; 0x6f50 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    6f5c:	08 95       	ret

00006f5e <keylabel_toLCD>:

void keylabel_toLCD(){
    6f5e:	0f 93       	push	r16
    6f60:	1f 93       	push	r17
    6f62:	cf 93       	push	r28
    6f64:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    6f66:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    6f6a:	84 e5       	ldi	r24, 0x54	; 84
    6f6c:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f70:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    6f72:	e1 e1       	ldi	r30, 0x11	; 17
    6f74:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f76:	08 c0       	rjmp	.+16     	; 0x6f88 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    6f78:	8f 01       	movw	r16, r30
    6f7a:	0f 5f       	subi	r16, 0xFF	; 255
    6f7c:	1f 4f       	sbci	r17, 0xFF	; 255
    6f7e:	80 81       	ld	r24, Z
    6f80:	0e 94 76 12 	call	0x24ec	; 0x24ec <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f84:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    6f86:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    6f88:	c4 31       	cpi	r28, 0x14	; 20
    6f8a:	b0 f3       	brcs	.-20     	; 0x6f78 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    6f8c:	8d 2f       	mov	r24, r29
    6f8e:	0e 94 4c 12 	call	0x2498	; 0x2498 <lcd_goto>
}
    6f92:	df 91       	pop	r29
    6f94:	cf 91       	pop	r28
    6f96:	1f 91       	pop	r17
    6f98:	0f 91       	pop	r16
    6f9a:	08 95       	ret

00006f9c <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    6f9c:	90 e0       	ldi	r25, 0x00	; 0
    6f9e:	fc 01       	movw	r30, r24
    6fa0:	ee 0f       	add	r30, r30
    6fa2:	ff 1f       	adc	r31, r31
    6fa4:	ee 0f       	add	r30, r30
    6fa6:	ff 1f       	adc	r31, r31
    6fa8:	8e 0f       	add	r24, r30
    6faa:	9f 1f       	adc	r25, r31
    6fac:	fc 01       	movw	r30, r24
    6fae:	ef 5e       	subi	r30, 0xEF	; 239
    6fb0:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6fb2:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    6fb4:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6fb6:	12 c0       	rjmp	.+36     	; 0x6fdc <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    6fb8:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    6fba:	61 11       	cpse	r22, r1
    6fbc:	06 c0       	rjmp	.+12     	; 0x6fca <keylabel_statcheck+0x2e>
    6fbe:	2a 30       	cpi	r18, 0x0A	; 10
    6fc0:	21 f4       	brne	.+8      	; 0x6fca <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    6fc2:	80 e8       	ldi	r24, 0x80	; 128
    6fc4:	80 83       	st	Z, r24
			result = 0xFF;
    6fc6:	8f ef       	ldi	r24, 0xFF	; 255
    6fc8:	07 c0       	rjmp	.+14     	; 0x6fd8 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    6fca:	66 23       	and	r22, r22
    6fcc:	29 f0       	breq	.+10     	; 0x6fd8 <keylabel_statcheck+0x3c>
    6fce:	20 38       	cpi	r18, 0x80	; 128
    6fd0:	19 f4       	brne	.+6      	; 0x6fd8 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    6fd2:	8a e0       	ldi	r24, 0x0A	; 10
    6fd4:	80 83       	st	Z, r24
			result = 0xFF;
    6fd6:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    6fd8:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    6fda:	9f 5f       	subi	r25, 0xFF	; 255
    6fdc:	95 30       	cpi	r25, 0x05	; 5
    6fde:	60 f3       	brcs	.-40     	; 0x6fb8 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    6fe0:	08 95       	ret

00006fe2 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    6fe2:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    6fe4:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    6fe6:	94 91       	lpm	r25, Z
    6fe8:	99 23       	and	r25, r25
    6fea:	21 f0       	breq	.+8      	; 0x6ff4 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    6fec:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    6fee:	8f 5f       	subi	r24, 0xFF	; 255
    6ff0:	80 32       	cpi	r24, 0x20	; 32
    6ff2:	c8 f3       	brcs	.-14     	; 0x6fe6 <get_StrLenP+0x4>
	return result;
}
    6ff4:	08 95       	ret

00006ff6 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    6ff6:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    6ff8:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    6ffa:	90 81       	ld	r25, Z
    6ffc:	99 23       	and	r25, r25
    6ffe:	21 f0       	breq	.+8      	; 0x7008 <get_StrLen+0x12>
			return result;
		}
		pString++;
    7000:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7002:	8f 5f       	subi	r24, 0xFF	; 255
    7004:	80 32       	cpi	r24, 0x20	; 32
    7006:	c8 f3       	brcs	.-14     	; 0x6ffa <get_StrLen+0x4>
	return result;
}
    7008:	08 95       	ret

0000700a <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    700a:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    700c:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    700e:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7010:	06 c0       	rjmp	.+12     	; 0x701e <reverse_Bits+0x14>
		result = result << 1;
    7012:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7014:	32 2f       	mov	r19, r18
    7016:	31 70       	andi	r19, 0x01	; 1
    7018:	83 2b       	or	r24, r19
		val = val >> 1;
    701a:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    701c:	9f 5f       	subi	r25, 0xFF	; 255
    701e:	98 30       	cpi	r25, 0x08	; 8
    7020:	c0 f3       	brcs	.-16     	; 0x7012 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7022:	08 95       	ret

00007024 <__tablejump2__>:
    7024:	ee 0f       	add	r30, r30
    7026:	ff 1f       	adc	r31, r31
    7028:	88 1f       	adc	r24, r24
    702a:	8b bf       	out	0x3b, r24	; 59
    702c:	07 90       	elpm	r0, Z+
    702e:	f6 91       	elpm	r31, Z
    7030:	e0 2d       	mov	r30, r0
    7032:	19 94       	eijmp

00007034 <eeprom_read_block>:
    7034:	dc 01       	movw	r26, r24
    7036:	cb 01       	movw	r24, r22

00007038 <eeprom_read_blraw>:
    7038:	fc 01       	movw	r30, r24
    703a:	f9 99       	sbic	0x1f, 1	; 31
    703c:	fe cf       	rjmp	.-4      	; 0x703a <eeprom_read_blraw+0x2>
    703e:	06 c0       	rjmp	.+12     	; 0x704c <eeprom_read_blraw+0x14>
    7040:	f2 bd       	out	0x22, r31	; 34
    7042:	e1 bd       	out	0x21, r30	; 33
    7044:	f8 9a       	sbi	0x1f, 0	; 31
    7046:	31 96       	adiw	r30, 0x01	; 1
    7048:	00 b4       	in	r0, 0x20	; 32
    704a:	0d 92       	st	X+, r0
    704c:	41 50       	subi	r20, 0x01	; 1
    704e:	50 40       	sbci	r21, 0x00	; 0
    7050:	b8 f7       	brcc	.-18     	; 0x7040 <eeprom_read_blraw+0x8>
    7052:	08 95       	ret

00007054 <eeprom_read_byte>:
    7054:	f9 99       	sbic	0x1f, 1	; 31
    7056:	fe cf       	rjmp	.-4      	; 0x7054 <eeprom_read_byte>
    7058:	92 bd       	out	0x22, r25	; 34
    705a:	81 bd       	out	0x21, r24	; 33
    705c:	f8 9a       	sbi	0x1f, 0	; 31
    705e:	99 27       	eor	r25, r25
    7060:	80 b5       	in	r24, 0x20	; 32
    7062:	08 95       	ret

00007064 <eeprom_read_word>:
    7064:	a8 e1       	ldi	r26, 0x18	; 24
    7066:	b0 e0       	ldi	r27, 0x00	; 0
    7068:	42 e0       	ldi	r20, 0x02	; 2
    706a:	50 e0       	ldi	r21, 0x00	; 0
    706c:	e5 cf       	rjmp	.-54     	; 0x7038 <eeprom_read_blraw>

0000706e <eeprom_update_block>:
    706e:	dc 01       	movw	r26, r24
    7070:	a4 0f       	add	r26, r20
    7072:	b5 1f       	adc	r27, r21
    7074:	41 50       	subi	r20, 0x01	; 1
    7076:	50 40       	sbci	r21, 0x00	; 0
    7078:	40 f0       	brcs	.+16     	; 0x708a <eeprom_update_block+0x1c>
    707a:	cb 01       	movw	r24, r22
    707c:	84 0f       	add	r24, r20
    707e:	95 1f       	adc	r25, r21
    7080:	2e 91       	ld	r18, -X
    7082:	05 d0       	rcall	.+10     	; 0x708e <eeprom_update_r18>
    7084:	41 50       	subi	r20, 0x01	; 1
    7086:	50 40       	sbci	r21, 0x00	; 0
    7088:	d8 f7       	brcc	.-10     	; 0x7080 <eeprom_update_block+0x12>
    708a:	08 95       	ret

0000708c <eeprom_update_byte>:
    708c:	26 2f       	mov	r18, r22

0000708e <eeprom_update_r18>:
    708e:	f9 99       	sbic	0x1f, 1	; 31
    7090:	fe cf       	rjmp	.-4      	; 0x708e <eeprom_update_r18>
    7092:	92 bd       	out	0x22, r25	; 34
    7094:	81 bd       	out	0x21, r24	; 33
    7096:	f8 9a       	sbi	0x1f, 0	; 31
    7098:	01 97       	sbiw	r24, 0x01	; 1
    709a:	00 b4       	in	r0, 0x20	; 32
    709c:	02 16       	cp	r0, r18
    709e:	39 f0       	breq	.+14     	; 0x70ae <eeprom_update_r18+0x20>
    70a0:	1f ba       	out	0x1f, r1	; 31
    70a2:	20 bd       	out	0x20, r18	; 32
    70a4:	0f b6       	in	r0, 0x3f	; 63
    70a6:	f8 94       	cli
    70a8:	fa 9a       	sbi	0x1f, 2	; 31
    70aa:	f9 9a       	sbi	0x1f, 1	; 31
    70ac:	0f be       	out	0x3f, r0	; 63
    70ae:	08 95       	ret

000070b0 <eeprom_update_word>:
    70b0:	01 96       	adiw	r24, 0x01	; 1
    70b2:	27 2f       	mov	r18, r23
    70b4:	ec df       	rcall	.-40     	; 0x708e <eeprom_update_r18>
    70b6:	ea cf       	rjmp	.-44     	; 0x708c <eeprom_update_byte>

000070b8 <_exit>:
    70b8:	f8 94       	cli

000070ba <__stop_program>:
    70ba:	ff cf       	rjmp	.-2      	; 0x70ba <__stop_program>
