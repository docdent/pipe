
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000077da  0000788e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000077da  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001719  00800208  00800208  00007896  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008896  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000088c8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000af0  00000000  00000000  00008908  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000eb00  00000000  00000000  000093f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002622  00000000  00000000  00017ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008afa  00000000  00000000  0001a51a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001b20  00000000  00000000  00023014  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003383  00000000  00000000  00024b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000095f6  00000000  00000000  00027eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ea8  00000000  00000000  000314ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__ctors_end>
       4:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
       8:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
       c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      10:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      14:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      18:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      1c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      20:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      24:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      28:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      2c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      30:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      34:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      38:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      3c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      40:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      44:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      48:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      4c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      50:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      54:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__vector_21>
      58:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      5c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      60:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      64:	0c 94 dd 36 	jmp	0x6dba	; 0x6dba <__vector_25>
      68:	0c 94 23 37 	jmp	0x6e46	; 0x6e46 <__vector_26>
      6c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      70:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      74:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      78:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      7c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      80:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      84:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      88:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      8c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      90:	0c 94 f0 34 	jmp	0x69e0	; 0x69e0 <__vector_36>
      94:	0c 94 45 35 	jmp	0x6a8a	; 0x6a8a <__vector_37>
      98:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      9c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      a0:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      a4:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      a8:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      ac:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      b0:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      b4:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      b8:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      bc:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      c0:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      c4:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      c8:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      cc:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      d0:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      d4:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      d8:	0c 94 e3 37 	jmp	0x6fc6	; 0x6fc6 <__vector_54>
      dc:	0c 94 3b 38 	jmp	0x7076	; 0x7076 <__vector_55>
      e0:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__bad_interrupt>
      e4:	c4 1e       	adc	r12, r20
      e6:	cf 1e       	adc	r12, r31
      e8:	db 1e       	adc	r13, r27
      ea:	f7 1e       	adc	r15, r23
      ec:	14 1f       	adc	r17, r20
      ee:	35 1f       	adc	r19, r21
      f0:	40 1f       	adc	r20, r16
      f2:	4b 1f       	adc	r20, r27
      f4:	60 1f       	adc	r22, r16
      f6:	76 1f       	adc	r23, r22
      f8:	7e 1f       	adc	r23, r30
      fa:	8c 1f       	adc	r24, r28
      fc:	60 1f       	adc	r22, r16
      fe:	b9 1f       	adc	r27, r25
     100:	c9 1f       	adc	r28, r25
     102:	ed 1f       	adc	r30, r29
     104:	3f 20       	and	r3, r15
     106:	58 20       	and	r5, r8
     108:	6d 20       	and	r6, r13
     10a:	86 20       	and	r8, r6
     10c:	8e 20       	and	r8, r14
     10e:	b3 20       	and	r11, r3
     110:	b3 20       	and	r11, r3
     112:	cc 20       	and	r12, r12
     114:	d9 20       	and	r13, r9
     116:	c8 20       	and	r12, r8
     118:	34 21       	and	r19, r4
     11a:	3c 21       	and	r19, r12
     11c:	87 21       	and	r24, r7
     11e:	e9 21       	and	r30, r9
     120:	13 22       	and	r1, r19
     122:	3f 22       	and	r3, r31
     124:	6e 22       	and	r6, r30
     126:	76 22       	and	r7, r22
     128:	7c 22       	and	r7, r28
     12a:	34 21       	and	r19, r4
     12c:	84 22       	and	r8, r20
     12e:	98 22       	and	r9, r24
     130:	7c 22       	and	r7, r28
     132:	d6 22       	and	r13, r22
     134:	e3 22       	and	r14, r19
     136:	ef 22       	and	r14, r31
     138:	04 23       	and	r16, r20
     13a:	1d 23       	and	r17, r29
     13c:	40 23       	and	r20, r16
     13e:	4b 23       	and	r20, r27
     140:	51 23       	and	r21, r17
     142:	56 23       	and	r21, r22
     144:	69 23       	and	r22, r25
     146:	8a 23       	and	r24, r26
     148:	9d 23       	and	r25, r29
     14a:	56 23       	and	r21, r22
     14c:	53 3a       	cpi	r21, 0xA3	; 163
     14e:	68 3a       	cpi	r22, 0xA8	; 168
     150:	56 3a       	cpi	r21, 0xA6	; 166
     152:	47 3a       	cpi	r20, 0xA7	; 167
     154:	59 3a       	cpi	r21, 0xA9	; 169
     156:	5c 3a       	cpi	r21, 0xAC	; 172
     158:	4a 3a       	cpi	r20, 0xAA	; 170
     15a:	5f 3a       	cpi	r21, 0xAF	; 175
     15c:	4d 3a       	cpi	r20, 0xAD	; 173
     15e:	62 3a       	cpi	r22, 0xA2	; 162
     160:	50 3a       	cpi	r21, 0xA0	; 160
     162:	65 3a       	cpi	r22, 0xA5	; 165

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWnone>:
     2b4:	6e 6f 6e 65 00                                      none.

000002b9 <usbHWmidiThru>:
     2b9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

000002c5 <usbHWmidiOut>:
     2c5:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

000002cf <usbHWmidiIn>:
     2cf:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

000002d8 <usbHWmidichanSW>:
     2d8:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2e8:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2f8:	20 00                                                .

000002fa <usbHWBits>:
     2fa:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000302 <usbHWmodule>:
     302:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000030a <usbHWempty>:
     30a:	65 6d 70 74 79 00                                   empty.

00000310 <usbHWRegister>:
     310:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000031c <usbHWRange>:
     31c:	52 61 6e 67 65 20 00                                Range .

00000323 <usbHWManual>:
     323:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000032c <usbHWmodulCheck>:
     32c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     33c:	20 00                                                .

0000033e <usbHWmodulInst>:
     33e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     34e:	3a 20 00                                            : .

00000351 <usbHWtitel>:
     351:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     361:	72 61 74 69 6f 6e 0d 0a 00                          ration...

0000036a <HelloMsg>:
     36a:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     37a:	65 72 66 61 63 65 0d 0a 00                          erface...

00000383 <usbLog>:
     383:	4c 6f 67 0d 0a 00                                   Log...

00000389 <usbEmpty>:
     389:	65 6d 70 74 79 0d 0a 00                             empty...

00000391 <msg_programming1>:
     391:	73 61 76 65 2e 2e 2e 00                             save....

00000399 <logNone>:
     399:	3c 6e 6f 6e 65 3e 00                                <none>.

000003a0 <stringNotAssigen>:
     3a0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003ab <menuMessageE>:
     3ab:	45 3a 00                                            E:.

000003ae <menuMessageOK>:
     3ae:	6f 6b 20 00                                         ok .

000003b2 <menuMessageAbort>:
     3b2:	61 62 6f 72 74 00                                   abort.

000003b8 <menuMessageMIDIpanic>:
     3b8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003c7 <messageRegisterMan>:
     3c7:	2b 00                                               +.

000003c9 <messageLoaded>:
     3c9:	20 52 65 67 2e 67 65 73 65 74 7a 74 00               Reg.gesetzt.

000003d6 <messageSaved>:
     3d6:	20 52 65 67 2e 69 6e 20 4b 6f 6d 62 2e 67 65 73      Reg.in Komb.ges
     3e6:	70 2e 00                                            p..

000003e9 <MenuMIDIOutText>:
     3e9:	4f 75 74 3a 00                                      Out:.

000003ee <MenuMIDIInText>:
     3ee:	49 6e 3a 00                                         In:.

000003f2 <initMenuText>:
     3f2:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003fc <nibbleInfo>:
	...
     404:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     414:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     424:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     434:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     444:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     454:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     464:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     474:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000483 <menu_selFunc>:
     483:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 49 07     ..<none>......I.
     493:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     4a3:	53 07 3f 07 00 00 00 00 01 10 53 74 69 6d 6d 65     S.?.......Stimme
     4b3:	6e 00 00 00 b7 0c 35 07 00 00 00 00 01 10 4b 6f     n.....5.......Ko
     4c3:	70 70 65 6c 32 3c 33 00 00 00 17 07 23 1e 00 00     ppel2<3.....#...
     4d3:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 0d 07     ..Koppel1<3.....
     4e3:	26 1e 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     &.....KoppelP<3.
     4f3:	00 00 03 07 29 1e 00 00 01 10 4b 6f 70 70 65 6c     ....).....Koppel
     503:	31 3c 32 00 00 00 f9 06 2c 1e 00 00 01 10 4b 6f     1<2.....,.....Ko
     513:	70 70 65 6c 50 3c 32 00 00 00 ef 06 2f 1e 00 00     ppelP<2...../...
     523:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 e5 06     ..KoppelP<1.....
     533:	32 1e 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     2.....Koppel3<2.
     543:	00 00 db 06 35 1e 00 00 01 10 4b 6f 70 70 65 6c     ....5.....Koppel
     553:	33 3c 31 00 00 00 d1 06 38 1e 00 00 01 10 4b 6f     3<1.....8.....Ko
     563:	70 70 65 6c 33 3c 50 00 00 00 c7 06 3b 1e 00 00     ppel3<P.....;...
     573:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 bd 06     ..Koppel2<1.....
     583:	3e 1e 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     >.....Koppel2<P.
     593:	00 00 b3 06 41 1e 00 00 01 10 4b 6f 70 70 65 6c     ....A.....Koppel
     5a3:	31 3c 50 00 00 00 a9 06 44 1e 00 00 01 10 50 72     1<P.....D.....Pr
     5b3:	2e 2b 2f 73 65 74 00 00 00 00 77 06 49 2a 00 00     .+/set....w.I*..
     5c3:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 6d 06     ..Pr.-/clr....m.
     5d3:	69 19 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     i.....Prog. 1A..
     5e3:	00 00 9f 06 a6 2a 00 00 01 10 50 72 6f 67 2e 20     .....*....Prog. 
     5f3:	32 41 00 00 00 00 95 06 a9 2a 00 00 01 10 50 72     2A.......*....Pr
     603:	6f 67 2e 20 33 41 00 00 00 00 8b 06 ac 2a 00 00     og. 3A.......*..
     613:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 81 06     ..Prog. 4A......
     623:	af 2a 00 00 01 10 52 65 67 2e 61 75 73 00 00 00     .*....Reg.aus...
     633:	00 00 63 06 46 19 00 00 01 10 4d 49 44 49 20 4f     ..c.F.....MIDI O
     643:	66 66 00 00 00 00 21 07 93 28 00 00 c1 10 53 65     ff....!..(....Se
     653:	74 75 70 00 00 00 00 00 a7 0d 2b 07 00 00 00 00     tup.......+.....

00000663 <shortKeyTextRegOff>:
     663:	52 65 67 09 00 00 00 00 00 00                       Reg.......

0000066d <shortKeyTextPRM>:
     66d:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

00000677 <shortKeyTextPRP>:
     677:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000681 <shortKeyTextK4A>:
     681:	50 72 34 41 80 00 00 00 00 00                       Pr4A......

0000068b <shortKeyTextK3A>:
     68b:	50 72 33 41 80 00 00 00 00 00                       Pr3A......

00000695 <shortKeyTextK2A>:
     695:	50 72 32 41 80 00 00 00 00 00                       Pr2A......

0000069f <shortKeyTextK1A>:
     69f:	50 72 31 41 80 00 00 00 00 00                       Pr1A......

000006a9 <shortKeyTextCpl1P>:
     6a9:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

000006b3 <shortKeyTextCpl2P>:
     6b3:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

000006bd <shortKeyTextCpl21>:
     6bd:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

000006c7 <shortKeyTextCpl3P>:
     6c7:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

000006d1 <shortKeyTextCpl31>:
     6d1:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

000006db <shortKeyTextCpl32>:
     6db:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

000006e5 <shortKeyTextCplP1>:
     6e5:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

000006ef <shortKeyTextCplP2>:
     6ef:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

000006f9 <shortKeyTextCpl12>:
     6f9:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

00000703 <shortKeyTextCplP3>:
     703:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

0000070d <shortKeyTextCpl13>:
     70d:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

00000717 <shortKeyTextCpl23>:
     717:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

00000721 <shortKeyTextMIDIoff>:
     721:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

0000072b <shortKeyTextSetup>:
     72b:	53 65 74 75 00 00 00 00 00 00                       Setu......

00000735 <shortKeyTextStim>:
     735:	53 74 69 6d 00 00 00 00 00 00                       Stim......

0000073f <shortKeyTextMenu>:
     73f:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

00000749 <shortKeyTextNone>:
	...

00000753 <menu_main>:
     753:	81 00 4d 61 6e 75 61 6c 00 00 00 00 cb 07 00 00     ..Manual........
     763:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     773:	f3 07 00 00 df 1d 00 00 01 00 4d 49 44 49 00 00     ..........MIDI..
     783:	00 00 00 00 bf 09 00 00 00 00 00 00 01 00 54 61     ..............Ta
     793:	73 74 65 6e 00 00 00 00 67 0c 00 00 00 00 83 19     sten....g.......
     7a3:	01 00 53 74 61 74 75 73 00 00 00 00 8f 11 00 00     ..Status........
     7b3:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     7c3:	a7 0d 00 00 00 00 00 00                             ........

000007cb <menu_manual>:
     7cb:	81 00 4b 6f 70 70 65 6c 00 00 00 00 cf 08 00 00     ..Koppel........
     7db:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     7eb:	b7 0c 00 00 00 00 00 00                             ........

000007f3 <menu_register>:
     7f3:	8c 00 4b 6f 6d 62 2e 6c 61 64 2e 00 00 00 a8 05     ..Komb.lad......
     803:	00 00 ec 1d 0c 00 4b 6f 6d 62 2e 73 70 2e 00 00     ......Komb.sp...
     813:	00 00 a8 05 00 00 5e 19 01 00 61 75 73 00 00 00     ......^...aus...
	...
     82b:	e6 1d 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     83b:	00 00 6d 05 00 00 1e 19 0e 00 52 65 67 2e 39 2d     ..m.......Reg.9-
     84b:	31 36 00 00 00 00 6e 05 00 00 1e 19 0e 00 52 65     16....n.......Re
     85b:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 1e 19     g.17-24...o.....
     86b:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     87b:	00 00 1e 19 0e 00 52 65 67 2e 33 33 2d 34 30 00     ......Reg.33-40.
     88b:	00 00 71 05 00 00 1e 19 0e 00 52 65 67 2e 34 31     ..q.......Reg.41
     89b:	2d 34 38 00 00 00 72 05 00 00 1e 19 0e 00 52 65     -48...r.......Re
     8ab:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 1e 19     g.49-54...s.....
     8bb:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     8cb:	00 00 1e 19                                         ....

000008cf <menu_coupler>:
     8cf:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 11 08     ..2<3...........
     8df:	00 00 4b 19 09 00 31 3c 33 00 00 00 00 00 00 00     ..K...1<3.......
     8ef:	00 00 12 08 00 00 4b 19 09 00 31 3c 32 00 00 00     ......K...1<2...
     8ff:	00 00 00 00 00 00 13 08 00 00 4b 19 09 00 50 3c     ..........K...P<
     90f:	33 00 00 00 00 00 00 00 00 00 14 08 00 00 4b 19     3.............K.
     91f:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 15 08     ..P<2...........
     92f:	00 00 4b 19 09 00 50 3c 31 00 00 00 00 00 00 00     ..K...P<1.......
     93f:	00 00 16 08 00 00 4b 19 09 00 33 3c 32 00 00 00     ......K...3<2...
     94f:	00 00 00 00 00 00 17 08 00 00 4b 19 09 00 33 3c     ..........K...3<
     95f:	31 00 00 00 00 00 00 00 00 00 18 08 00 00 4b 19     1.............K.
     96f:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 19 08     ..3<P...........
     97f:	00 00 4b 19 09 00 32 3c 31 00 00 00 00 00 00 00     ..K...2<1.......
     98f:	00 00 1a 08 00 00 4b 19 09 00 32 3c 50 00 00 00     ......K...2<P...
     99f:	00 00 00 00 00 00 1b 08 00 00 4b 19 c9 00 31 3c     ..........K...1<
     9af:	50 00 00 00 00 00 00 00 00 00 1c 08 00 00 4b 19     P.............K.

000009bf <menu_midi>:
     9bf:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     9cf:	93 28 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .(....MIDIin....
     9df:	87 0a 00 00 00 00 f2 1a 01 00 4d 49 44 49 6f 75     ..........MIDIou
     9ef:	74 00 00 00 07 0d 00 00 00 00 ee 1a 03 10 54 68     t.............Th
     9ff:	72 75 2d 49 6e 00 00 00 00 00 26 08 00 00 1a 19     ru-In.....&.....
     a0f:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 27 08     ..Thru-Out....'.
     a1f:	00 00 1a 19 09 00 41 63 63 65 70 74 20 50 43 00     ......Accept PC.
     a2f:	00 00 32 09 00 00 ea 1a 09 00 41 63 74 2e 53 65     ..2.......Act.Se
     a3f:	6e 73 65 00 00 00 30 09 00 00 ea 1a 09 00 56 65     nse...0.......Ve
     a4f:	6c 5a 34 4f 66 66 00 00 00 00 31 09 00 00 ea 1a     lZ4Off....1.....
     a5f:	06 08 52 78 42 75 66 55 73 65 00 00 00 00 41 15     ..RxBufUse....A.
     a6f:	00 00 00 00 c6 08 54 78 42 75 66 55 73 65 00 00     ......TxBufUse..
     a7f:	00 00 4a 16 00 00 00 00                             ..J.....

00000a87 <menu_midiIn>:
     a87:	81 00 43 68 2e 31 00 00 00 00 00 00 c7 0b 00 00     ..Ch.1..........
     a97:	94 18 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     aa7:	c7 0b 01 00 94 18 00 00 01 00 43 68 2e 33 00 00     ..........Ch.3..
     ab7:	00 00 00 00 c7 0b 02 00 94 18 00 00 01 00 43 68     ..............Ch
     ac7:	2e 34 00 00 00 00 00 00 c7 0b 03 00 94 18 00 00     .4..............
     ad7:	01 00 43 68 2e 35 00 00 00 00 00 00 c7 0b 04 00     ..Ch.5..........
     ae7:	94 18 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     af7:	c7 0b 05 00 94 18 00 00 01 00 43 68 2e 37 00 00     ..........Ch.7..
     b07:	00 00 00 00 c7 0b 06 00 94 18 00 00 01 00 43 68     ..............Ch
     b17:	2e 38 00 00 00 00 00 00 c7 0b 07 00 94 18 00 00     .8..............
     b27:	01 00 43 68 2e 39 00 00 00 00 00 00 c7 0b 08 00     ..Ch.9..........
     b37:	94 18 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     b47:	c7 0b 09 00 94 18 00 00 01 00 43 68 2e 31 31 00     ..........Ch.11.
     b57:	00 00 00 00 c7 0b 0a 00 94 18 00 00 01 00 43 68     ..............Ch
     b67:	2e 31 32 00 00 00 00 00 c7 0b 0b 00 94 18 00 00     .12.............
     b77:	01 00 43 68 2e 31 33 00 00 00 00 00 c7 0b 0c 00     ..Ch.13.........
     b87:	94 18 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     b97:	c7 0b 0d 00 94 18 00 00 01 00 43 68 2e 31 35 00     ..........Ch.15.
     ba7:	00 00 00 00 c7 0b 0e 00 94 18 00 00 c1 00 43 68     ..............Ch
     bb7:	2e 31 36 00 00 00 00 00 c7 0b 0f 00 94 18 00 00     .16.............

00000bc7 <menu_midiInSec>:
     bc7:	81 00 53 65 63 74 2e 31 00 00 00 00 17 0c 00 00     ..Sect.1........
     bd7:	9f 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     be7:	17 0c 01 00 9f 18 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     bf7:	00 00 00 00 17 0c 02 00 9f 18 00 00 c1 00 53 65     ..............Se
     c07:	63 74 2e 34 00 00 00 00 17 0c 03 00 9f 18 00 00     ct.4............

00000c17 <menu_midiInVar>:
     c17:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 28 08     ..Manual......(.
     c27:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     c37:	00 00 29 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..).......Range.
     c47:	00 00 00 00 00 00 2a 08 00 00 00 00 c4 90 4d 61     ......*.......Ma
     c57:	6e 4e 6f 74 65 00 00 00 00 00 2b 08 00 00 00 00     nNote.....+.....

00000c67 <menu_key>:
     c67:	81 08 54 61 73 74 65 31 00 00 00 00 83 04 00 00     ..Taste1........
     c77:	03 19 39 2b 01 08 54 61 73 74 65 32 00 00 00 00     ..9+..Taste2....
     c87:	83 04 01 00 03 19 39 2b 01 08 54 61 73 74 65 33     ......9+..Taste3
     c97:	00 00 00 00 83 04 02 00 03 19 39 2b c1 08 54 61     ..........9+..Ta
     ca7:	73 74 65 34 00 00 00 00 83 04 03 00 03 19 39 2b     ste4..........9+

00000cb7 <menu_tune>:
     cb7:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     cc7:	cd 19 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     cd7:	00 00 01 00 cd 19 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     ce7:	00 00 00 00 00 00 02 00 cd 19 00 00 c1 20 50 65     ............. Pe
     cf7:	64 61 6c 00 00 00 00 00 00 00 03 00 cd 19 00 00     dal.............

00000d07 <menu_midiOut>:
     d07:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 28 09     ..III.........(.
     d17:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     d27:	00 00 2a 09 00 00 00 00 03 10 49 00 00 00 00 00     ..*.......I.....
     d37:	00 00 00 00 00 00 2c 09 00 00 00 00 03 10 50 00     ......,.......P.
	...
     d4f:	00 00 2e 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..........III(in
     d5f:	74 29 00 00 00 00 29 09 00 00 00 00 03 10 49 49     t)....).......II
     d6f:	28 69 6e 74 29 00 00 00 00 00 2b 09 00 00 00 00     (int).....+.....
     d7f:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2d 09     ..I(int)......-.
     d8f:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     d9f:	00 00 2f 09 00 00 00 00                             ../.....

00000da7 <menu_setup>:
     da7:	81 00 4d 6f 64 75 6c 65 00 00 00 00 6f 0e 00 00     ..Module....o...
     db7:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     dc7:	df 11 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     ..........Power.
     dd7:	00 00 00 00 33 0e 00 00 00 00 00 00 c1 00 45 45     ....3.........EE
     de7:	70 72 6f 6d 00 00 00 00 f7 0d 00 00 00 00 00 00     prom............

00000df7 <menu_eeprom>:
     df7:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     e07:	a6 29 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     .)....EEBackup..
     e17:	00 00 00 00 8e 29 00 00 c1 00 45 45 52 65 73 74     .....)....EERest
     e27:	6f 72 65 00 00 00 00 00 9a 29 00 00                 ore......)..

00000e33 <menu_Power>:
     e33:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     e43:	fd 2b 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .+....PowerOff..
     e53:	00 00 00 00 06 2c 00 00 c1 00 50 2e 52 65 73 74     .....,....P.Rest
     e63:	61 72 74 00 00 00 00 00 0e 2c 00 00                 art......,..

00000e6f <menu_module>:
     e6f:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     e7f:	00 00 00 1b 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     e8f:	00 00 56 03 00 00 00 1b 0a 08 4d 6f 64 4f 4b 00     ..V.......ModOK.
     e9f:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     eaf:	64 54 65 73 74 00 00 00 d3 0e 00 00 00 00 00 00     dTest...........
     ebf:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 c3 0f 00 00     ..ModAssign.....
     ecf:	00 00 f6 1a                                         ....

00000ed3 <menu_ModeSel>:
     ed3:	81 00 4d 6f 64 2e 30 00 00 00 00 00 73 0f 00 00     ..Mod.0.....s...
     ee3:	89 18 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     ef3:	73 0f 01 00 89 18 00 00 01 00 4d 6f 64 2e 32 00     s.........Mod.2.
     f03:	00 00 00 00 73 0f 02 00 89 18 00 00 01 00 4d 6f     ....s.........Mo
     f13:	64 2e 33 00 00 00 00 00 73 0f 03 00 89 18 00 00     d.3.....s.......
     f23:	01 00 4d 6f 64 2e 34 00 00 00 00 00 73 0f 04 00     ..Mod.4.....s...
     f33:	89 18 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     f43:	73 0f 05 00 89 18 00 00 01 00 4d 6f 64 2e 36 00     s.........Mod.6.
     f53:	00 00 00 00 73 0f 06 00 89 18 00 00 c1 00 4d 6f     ....s.........Mo
     f63:	64 2e 37 00 00 00 00 00 73 0f 07 00 89 18 00 00     d.7.....s.......

00000f73 <menu_ModTestSelcted>:
     f73:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     f83:	87 19 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
     f93:	00 00 ad 05 20 18 5c 18 01 00 54 65 73 74 50 74     .... .\...TestPt
     fa3:	72 6e 00 00 00 00 00 00 71 29 00 00 c1 00 4c 6f     rn......q)....Lo
     fb3:	6f 70 54 73 74 00 00 00 00 00 00 00 bb 19 00 00     opTst...........

00000fc3 <menu_modAssign>:
     fc3:	81 00 4d 61 6e 2e 33 00 00 00 00 00 c7 10 00 00     ..Man.3.........
     fd3:	bd 18 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
     fe3:	c7 10 01 00 bd 18 00 00 01 00 4d 61 6e 2e 31 00     ..........Man.1.
     ff3:	00 00 00 00 c7 10 02 00 bd 18 00 00 01 00 50 65     ..............Pe
    1003:	64 61 6c 00 00 00 00 00 c7 10 03 00 bd 18 00 00     dal.............
    1013:	c1 00 52 65 67 69 73 74 65 72 00 00 27 10 04 00     ..Register..'...
    1023:	00 00 00 00                                         ....

00001027 <menu_modSection8>:
    1027:	81 00 53 65 63 74 2e 31 00 00 00 00 17 11 00 00     ..Sect.1........
    1037:	ed 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    1047:	17 11 01 00 ed 18 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    1057:	00 00 00 00 17 11 02 00 ed 18 00 00 01 00 53 65     ..............Se
    1067:	63 74 2e 34 00 00 00 00 17 11 03 00 ed 18 00 00     ct.4............
    1077:	01 00 53 65 63 74 2e 35 00 00 00 00 17 11 04 00     ..Sect.5........
    1087:	ed 18 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    1097:	17 11 05 00 ed 18 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
    10a7:	00 00 00 00 17 11 06 00 ed 18 00 00 c1 00 53 65     ..............Se
    10b7:	63 74 2e 38 00 00 00 00 17 11 07 00 ed 18 00 00     ct.8............

000010c7 <menu_modSection>:
    10c7:	81 00 53 65 63 74 2e 31 00 00 00 00 53 11 00 00     ..Sect.1....S...
    10d7:	c8 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    10e7:	53 11 01 00 c8 18 00 00 01 00 53 65 63 74 2e 33     S.........Sect.3
    10f7:	00 00 00 00 53 11 02 00 c8 18 00 00 c1 00 53 65     ....S.........Se
    1107:	63 74 2e 34 00 00 00 00 53 11 03 00 c8 18 00 00     ct.4....S.......

00001117 <menu_modDefineReg>:
    1117:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f7 07     ..RegBeg........
    1127:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    1137:	00 00 f8 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    1147:	2f 42 69 74 00 00 f9 07 00 00 00 00                 /Bit........

00001153 <menu_modDefine>:
    1153:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 34 09     ..NoteBeg.....4.
    1163:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    1173:	00 00 35 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..5.......Module
    1183:	2f 42 69 74 00 00 36 09 00 00 00 00                 /Bit..6.....

0000118f <menu_status>:
    118f:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    119f:	9a 24 00 00 01 00 55 53 42 00 00 00 00 00 00 00     .$....USB.......
    11af:	df 11 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     .........@MIDI-I
    11bf:	6e 00 00 00 00 00 00 00 1e 24 00 00 c2 40 4d 49     n........$...@MI
    11cf:	44 49 2d 4f 75 74 00 00 00 00 00 00 5c 24 00 00     DI-Out......\$..

000011df <menu_USBser>:
    11df:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 52 16     ..EventLog....R.
    11ef:	00 00 2a 1b 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..*...SendLog...
    11ff:	00 00 00 00 04 1b 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
    120f:	66 67 00 00 00 00 00 00 3e 1b 00 00                 fg......>...

0000121b <sw_version>:
    121b:	56 30 2e 37 31 00                                   V0.71.

00001221 <cplInfo>:
    1221:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    1231:	01 02 00 03 01 03 02 03                             ........

00001239 <keylabel_1>:
    1239:	31 00                                               1.

0000123b <keylabel_0>:
    123b:	30 00                                               0.

0000123d <keylabel_text>:
    123d:	54 65 78 74 80 00                                   Text..

00001243 <keylabel_exit>:
    1243:	45 78 69 74 00                                      Exit.

00001248 <keylabel_off>:
    1248:	7e 61 75 73 00                                      ~aus.

0000124d <keylabel_on>:
    124d:	7e 65 69 6e 00                                      ~ein.

00001252 <keylabel_onoff>:
    1252:	45 69 6e 80 00                                      Ein..

00001257 <keylabel_minus>:
    1257:	2d 00                                               -.

00001259 <keylabel_plus>:
    1259:	2b 00                                               +.

0000125b <keylabel_left>:
    125b:	7f 00                                               ..

0000125d <keylabel_right>:
    125d:	7e 00                                               ~.

0000125f <keylabel_down>:
    125f:	09 00                                               ..

00001261 <keylabel_up>:
    1261:	08 00                                               ..

00001263 <cgPattern_Block>:
    1263:	00 00 0e 0e 0e 0e 00 00                             ........

0000126b <cgPattern_Down>:
    126b:	04 04 04 04 15 0e 04 00                             ........

00001273 <cgPattern_Up>:
    1273:	04 0e 15 04 04 04 04 00                             ........

0000127b <cr_lf>:
    127b:	0d 0a 00                                            ...

0000127e <__ctors_end>:
    127e:	11 24       	eor	r1, r1
    1280:	1f be       	out	0x3f, r1	; 63
    1282:	cf ef       	ldi	r28, 0xFF	; 255
    1284:	d1 e2       	ldi	r29, 0x21	; 33
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	00 e0       	ldi	r16, 0x00	; 0
    128c:	0c bf       	out	0x3c, r16	; 60

0000128e <__do_copy_data>:
    128e:	12 e0       	ldi	r17, 0x02	; 2
    1290:	a0 e0       	ldi	r26, 0x00	; 0
    1292:	b2 e0       	ldi	r27, 0x02	; 2
    1294:	ea ed       	ldi	r30, 0xDA	; 218
    1296:	f7 e7       	ldi	r31, 0x77	; 119
    1298:	00 e0       	ldi	r16, 0x00	; 0
    129a:	0b bf       	out	0x3b, r16	; 59
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <__do_copy_data+0x14>
    129e:	07 90       	elpm	r0, Z+
    12a0:	0d 92       	st	X+, r0
    12a2:	a8 30       	cpi	r26, 0x08	; 8
    12a4:	b1 07       	cpc	r27, r17
    12a6:	d9 f7       	brne	.-10     	; 0x129e <__do_copy_data+0x10>

000012a8 <__do_clear_bss>:
    12a8:	29 e1       	ldi	r18, 0x19	; 25
    12aa:	a8 e0       	ldi	r26, 0x08	; 8
    12ac:	b2 e0       	ldi	r27, 0x02	; 2
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <.do_clear_bss_start>

000012b0 <.do_clear_bss_loop>:
    12b0:	1d 92       	st	X+, r1

000012b2 <.do_clear_bss_start>:
    12b2:	a1 32       	cpi	r26, 0x21	; 33
    12b4:	b2 07       	cpc	r27, r18
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <.do_clear_bss_loop>
    12b8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <main>
    12bc:	0c 94 eb 3b 	jmp	0x77d6	; 0x77d6 <_exit>

000012c0 <__bad_interrupt>:
    12c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000012c4 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    12c4:	fc 01       	movw	r30, r24
    12c6:	8f ef       	ldi	r24, 0xFF	; 255
    12c8:	9f ef       	ldi	r25, 0xFF	; 255
    12ca:	1c c0       	rjmp	.+56     	; 0x1304 <crc16_ram+0x40>
    12cc:	df 01       	movw	r26, r30
    12ce:	11 96       	adiw	r26, 0x01	; 1
    12d0:	20 81       	ld	r18, Z
    12d2:	82 27       	eor	r24, r18
    12d4:	28 2f       	mov	r18, r24
    12d6:	22 95       	swap	r18
    12d8:	28 27       	eor	r18, r24
    12da:	02 2e       	mov	r0, r18
    12dc:	26 95       	lsr	r18
    12de:	26 95       	lsr	r18
    12e0:	20 25       	eor	r18, r0
    12e2:	02 2e       	mov	r0, r18
    12e4:	26 95       	lsr	r18
    12e6:	20 25       	eor	r18, r0
    12e8:	27 70       	andi	r18, 0x07	; 7
    12ea:	08 2e       	mov	r0, r24
    12ec:	89 2f       	mov	r24, r25
    12ee:	26 95       	lsr	r18
    12f0:	07 94       	ror	r0
    12f2:	27 95       	ror	r18
    12f4:	90 2d       	mov	r25, r0
    12f6:	82 27       	eor	r24, r18
    12f8:	06 94       	lsr	r0
    12fa:	27 95       	ror	r18
    12fc:	90 25       	eor	r25, r0
    12fe:	82 27       	eor	r24, r18
    1300:	ba 01       	movw	r22, r20
    1302:	fd 01       	movw	r30, r26
    1304:	ab 01       	movw	r20, r22
    1306:	41 50       	subi	r20, 0x01	; 1
    1308:	51 09       	sbc	r21, r1
    130a:	67 2b       	or	r22, r23
    130c:	f9 f6       	brne	.-66     	; 0x12cc <crc16_ram+0x8>
    130e:	08 95       	ret

00001310 <crc16_eeprom>:
    1310:	ef 92       	push	r14
    1312:	ff 92       	push	r15
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cf ef       	ldi	r28, 0xFF	; 255
    131e:	df ef       	ldi	r29, 0xFF	; 255
    1320:	21 c0       	rjmp	.+66     	; 0x1364 <crc16_eeprom+0x54>
    1322:	7c 01       	movw	r14, r24
    1324:	2f ef       	ldi	r18, 0xFF	; 255
    1326:	e2 1a       	sub	r14, r18
    1328:	f2 0a       	sbc	r15, r18
    132a:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    132e:	9e 01       	movw	r18, r28
    1330:	28 27       	eor	r18, r24
    1332:	82 2f       	mov	r24, r18
    1334:	82 95       	swap	r24
    1336:	82 27       	eor	r24, r18
    1338:	08 2e       	mov	r0, r24
    133a:	86 95       	lsr	r24
    133c:	86 95       	lsr	r24
    133e:	80 25       	eor	r24, r0
    1340:	08 2e       	mov	r0, r24
    1342:	86 95       	lsr	r24
    1344:	80 25       	eor	r24, r0
    1346:	87 70       	andi	r24, 0x07	; 7
    1348:	02 2e       	mov	r0, r18
    134a:	23 2f       	mov	r18, r19
    134c:	86 95       	lsr	r24
    134e:	07 94       	ror	r0
    1350:	87 95       	ror	r24
    1352:	30 2d       	mov	r19, r0
    1354:	28 27       	eor	r18, r24
    1356:	06 94       	lsr	r0
    1358:	87 95       	ror	r24
    135a:	30 25       	eor	r19, r0
    135c:	28 27       	eor	r18, r24
    135e:	e9 01       	movw	r28, r18
    1360:	b8 01       	movw	r22, r16
    1362:	c7 01       	movw	r24, r14
    1364:	8b 01       	movw	r16, r22
    1366:	01 50       	subi	r16, 0x01	; 1
    1368:	11 09       	sbc	r17, r1
    136a:	67 2b       	or	r22, r23
    136c:	d1 f6       	brne	.-76     	; 0x1322 <crc16_eeprom+0x12>
    136e:	ce 01       	movw	r24, r28
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	08 95       	ret

0000137e <crc16_ram_startVal>:
    137e:	fc 01       	movw	r30, r24
    1380:	ca 01       	movw	r24, r20
    1382:	1c c0       	rjmp	.+56     	; 0x13bc <crc16_ram_startVal+0x3e>
    1384:	df 01       	movw	r26, r30
    1386:	11 96       	adiw	r26, 0x01	; 1
    1388:	20 81       	ld	r18, Z
    138a:	82 27       	eor	r24, r18
    138c:	28 2f       	mov	r18, r24
    138e:	22 95       	swap	r18
    1390:	28 27       	eor	r18, r24
    1392:	02 2e       	mov	r0, r18
    1394:	26 95       	lsr	r18
    1396:	26 95       	lsr	r18
    1398:	20 25       	eor	r18, r0
    139a:	02 2e       	mov	r0, r18
    139c:	26 95       	lsr	r18
    139e:	20 25       	eor	r18, r0
    13a0:	27 70       	andi	r18, 0x07	; 7
    13a2:	08 2e       	mov	r0, r24
    13a4:	89 2f       	mov	r24, r25
    13a6:	26 95       	lsr	r18
    13a8:	07 94       	ror	r0
    13aa:	27 95       	ror	r18
    13ac:	90 2d       	mov	r25, r0
    13ae:	82 27       	eor	r24, r18
    13b0:	06 94       	lsr	r0
    13b2:	27 95       	ror	r18
    13b4:	90 25       	eor	r25, r0
    13b6:	82 27       	eor	r24, r18
    13b8:	ba 01       	movw	r22, r20
    13ba:	fd 01       	movw	r30, r26
    13bc:	ab 01       	movw	r20, r22
    13be:	41 50       	subi	r20, 0x01	; 1
    13c0:	51 09       	sbc	r21, r1
    13c2:	67 2b       	or	r22, r23
    13c4:	f9 f6       	brne	.-66     	; 0x1384 <crc16_ram_startVal+0x6>
    13c6:	08 95       	ret

000013c8 <crc16_eeprom_startVal>:
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ea 01       	movw	r28, r20
    13d6:	21 c0       	rjmp	.+66     	; 0x141a <crc16_eeprom_startVal+0x52>
    13d8:	7c 01       	movw	r14, r24
    13da:	2f ef       	ldi	r18, 0xFF	; 255
    13dc:	e2 1a       	sub	r14, r18
    13de:	f2 0a       	sbc	r15, r18
    13e0:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    13e4:	ae 01       	movw	r20, r28
    13e6:	48 27       	eor	r20, r24
    13e8:	84 2f       	mov	r24, r20
    13ea:	82 95       	swap	r24
    13ec:	84 27       	eor	r24, r20
    13ee:	08 2e       	mov	r0, r24
    13f0:	86 95       	lsr	r24
    13f2:	86 95       	lsr	r24
    13f4:	80 25       	eor	r24, r0
    13f6:	08 2e       	mov	r0, r24
    13f8:	86 95       	lsr	r24
    13fa:	80 25       	eor	r24, r0
    13fc:	87 70       	andi	r24, 0x07	; 7
    13fe:	04 2e       	mov	r0, r20
    1400:	45 2f       	mov	r20, r21
    1402:	86 95       	lsr	r24
    1404:	07 94       	ror	r0
    1406:	87 95       	ror	r24
    1408:	50 2d       	mov	r21, r0
    140a:	48 27       	eor	r20, r24
    140c:	06 94       	lsr	r0
    140e:	87 95       	ror	r24
    1410:	50 25       	eor	r21, r0
    1412:	48 27       	eor	r20, r24
    1414:	ea 01       	movw	r28, r20
    1416:	b8 01       	movw	r22, r16
    1418:	c7 01       	movw	r24, r14
    141a:	8b 01       	movw	r16, r22
    141c:	01 50       	subi	r16, 0x01	; 1
    141e:	11 09       	sbc	r17, r1
    1420:	67 2b       	or	r22, r23
    1422:	d1 f6       	brne	.-76     	; 0x13d8 <crc16_eeprom_startVal+0x10>
    1424:	ce 01       	movw	r24, r28
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	08 95       	ret

00001434 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    1434:	cf 93       	push	r28
    1436:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    1438:	82 e3       	ldi	r24, 0x32	; 50
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    1440:	ec 01       	movw	r28, r24
    1442:	60 e3       	ldi	r22, 0x30	; 48
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	62 df       	rcall	.-316    	; 0x1310 <crc16_eeprom>
    144c:	c8 17       	cp	r28, r24
    144e:	d9 07       	cpc	r29, r25
    1450:	81 f4       	brne	.+32     	; 0x1472 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    145a:	8d 34       	cpi	r24, 0x4D	; 77
    145c:	51 f4       	brne	.+20     	; 0x1472 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    145e:	40 e3       	ldi	r20, 0x30	; 48
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	62 e0       	ldi	r22, 0x02	; 2
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	84 e3       	ldi	r24, 0x34	; 52
    1468:	99 e0       	ldi	r25, 0x09	; 9
    146a:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		return (EE_LOAD_OK);
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	06 c0       	rjmp	.+12     	; 0x147e <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    1472:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1476:	81 60       	ori	r24, 0x01	; 1
    1478:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    147c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

00001484 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    1484:	cf 93       	push	r28
    1486:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    1488:	85 e3       	ldi	r24, 0x35	; 53
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    1490:	ec 01       	movw	r28, r24
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	71 e0       	ldi	r23, 0x01	; 1
    1496:	85 e3       	ldi	r24, 0x35	; 53
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	3a df       	rcall	.-396    	; 0x1310 <crc16_eeprom>
    149c:	c8 17       	cp	r28, r24
    149e:	d9 07       	cpc	r29, r25
    14a0:	81 f4       	brne	.+32     	; 0x14c2 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    14a2:	84 e3       	ldi	r24, 0x34	; 52
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    14aa:	89 34       	cpi	r24, 0x49	; 73
    14ac:	51 f4       	brne	.+20     	; 0x14c2 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    14ae:	40 e0       	ldi	r20, 0x00	; 0
    14b0:	51 e0       	ldi	r21, 0x01	; 1
    14b2:	65 e3       	ldi	r22, 0x35	; 53
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	88 e2       	ldi	r24, 0x28	; 40
    14b8:	98 e0       	ldi	r25, 0x08	; 8
    14ba:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		return (EE_LOAD_OK);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    14c2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14c6:	82 60       	ori	r24, 0x02	; 2
    14c8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14cc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    14d8:	83 e4       	ldi	r24, 0x43	; 67
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    14e0:	ec 01       	movw	r28, r24
    14e2:	6b e0       	ldi	r22, 0x0B	; 11
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	88 e3       	ldi	r24, 0x38	; 56
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	12 df       	rcall	.-476    	; 0x1310 <crc16_eeprom>
    14ec:	c8 17       	cp	r28, r24
    14ee:	d9 07       	cpc	r29, r25
    14f0:	c1 f4       	brne	.+48     	; 0x1522 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    14f2:	87 e3       	ldi	r24, 0x37	; 55
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    14fa:	8f 34       	cpi	r24, 0x4F	; 79
    14fc:	91 f4       	brne	.+36     	; 0x1522 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    14fe:	48 e0       	ldi	r20, 0x08	; 8
    1500:	50 e0       	ldi	r21, 0x00	; 0
    1502:	68 e3       	ldi	r22, 0x38	; 56
    1504:	71 e0       	ldi	r23, 0x01	; 1
    1506:	88 e2       	ldi	r24, 0x28	; 40
    1508:	99 e0       	ldi	r25, 0x09	; 9
    150a:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    150e:	43 e0       	ldi	r20, 0x03	; 3
    1510:	50 e0       	ldi	r21, 0x00	; 0
    1512:	60 e4       	ldi	r22, 0x40	; 64
    1514:	71 e0       	ldi	r23, 0x01	; 1
    1516:	80 e3       	ldi	r24, 0x30	; 48
    1518:	99 e0       	ldi	r25, 0x09	; 9
    151a:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		return (EE_LOAD_OK);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	06 c0       	rjmp	.+12     	; 0x152e <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    1522:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1526:	84 60       	ori	r24, 0x04	; 4
    1528:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    152c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    1538:	88 e4       	ldi	r24, 0x48	; 72
    153a:	91 e0       	ldi	r25, 0x01	; 1
    153c:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    1540:	ec 01       	movw	r28, r24
    1542:	61 e0       	ldi	r22, 0x01	; 1
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	86 e4       	ldi	r24, 0x46	; 70
    1548:	91 e0       	ldi	r25, 0x01	; 1
    154a:	e2 de       	rcall	.-572    	; 0x1310 <crc16_eeprom>
    154c:	c8 17       	cp	r28, r24
    154e:	d9 07       	cpc	r29, r25
    1550:	a1 f4       	brne	.+40     	; 0x157a <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    1552:	85 e4       	ldi	r24, 0x45	; 69
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    155a:	89 36       	cpi	r24, 0x69	; 105
    155c:	71 f4       	brne	.+28     	; 0x157a <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    155e:	86 e4       	ldi	r24, 0x46	; 70
    1560:	91 e0       	ldi	r25, 0x01	; 1
    1562:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    1566:	c5 e5       	ldi	r28, 0x55	; 85
    1568:	d3 e0       	ldi	r29, 0x03	; 3
    156a:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    156c:	87 e4       	ldi	r24, 0x47	; 71
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    1574:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	06 c0       	rjmp	.+12     	; 0x1586 <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    157a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    157e:	88 60       	ori	r24, 0x08	; 8
    1580:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1584:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1590:	87 ef       	ldi	r24, 0xF7	; 247
    1592:	93 e0       	ldi	r25, 0x03	; 3
    1594:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    1598:	ec 01       	movw	r28, r24
    159a:	62 e0       	ldi	r22, 0x02	; 2
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	85 ef       	ldi	r24, 0xF5	; 245
    15a0:	93 e0       	ldi	r25, 0x03	; 3
    15a2:	b6 de       	rcall	.-660    	; 0x1310 <crc16_eeprom>
    15a4:	c8 17       	cp	r28, r24
    15a6:	d9 07       	cpc	r29, r25
    15a8:	81 f4       	brne	.+32     	; 0x15ca <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    15aa:	84 ef       	ldi	r24, 0xF4	; 244
    15ac:	93 e0       	ldi	r25, 0x03	; 3
    15ae:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    15b2:	84 35       	cpi	r24, 0x54	; 84
    15b4:	51 f4       	brne	.+20     	; 0x15ca <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    15b6:	42 e0       	ldi	r20, 0x02	; 2
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	65 ef       	ldi	r22, 0xF5	; 245
    15bc:	73 e0       	ldi	r23, 0x03	; 3
    15be:	86 e2       	ldi	r24, 0x26	; 38
    15c0:	98 e0       	ldi	r25, 0x08	; 8
    15c2:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		return (EE_LOAD_OK);
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    15ca:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15ce:	82 60       	ori	r24, 0x02	; 2
    15d0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15d4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    15e0:	8c e4       	ldi	r24, 0x4C	; 76
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    15e8:	ec 01       	movw	r28, r24
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	8b e4       	ldi	r24, 0x4B	; 75
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	8e de       	rcall	.-740    	; 0x1310 <crc16_eeprom>
    15f4:	c8 17       	cp	r28, r24
    15f6:	d9 07       	cpc	r29, r25
    15f8:	71 f4       	brne	.+28     	; 0x1616 <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    15fa:	8a e4       	ldi	r24, 0x4A	; 74
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    1602:	85 35       	cpi	r24, 0x55	; 85
    1604:	41 f4       	brne	.+16     	; 0x1616 <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    1606:	8b e4       	ldi	r24, 0x4B	; 75
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    160e:	80 93 52 16 	sts	0x1652, r24	; 0x801652 <serUSB_Active>
		return (EE_LOAD_OK);
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    1616:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    161a:	88 60       	ori	r24, 0x08	; 8
    161c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1620:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	08 95       	ret

00001628 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	8f e4       	ldi	r24, 0x4F	; 79
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	6d de       	rcall	.-806    	; 0x1310 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    1636:	ac 01       	movw	r20, r24
    1638:	68 e1       	ldi	r22, 0x18	; 24
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	80 e5       	ldi	r24, 0x50	; 80
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	c3 de       	rcall	.-634    	; 0x13c8 <crc16_eeprom_startVal>
    1642:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    1644:	88 e6       	ldi	r24, 0x68	; 104
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    164c:	c8 17       	cp	r28, r24
    164e:	d9 07       	cpc	r29, r25
    1650:	b1 f4       	brne	.+44     	; 0x167e <eeprom_ReadReg+0x56>
    1652:	8e e4       	ldi	r24, 0x4E	; 78
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    165a:	82 35       	cpi	r24, 0x52	; 82
    165c:	81 f4       	brne	.+32     	; 0x167e <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    165e:	8f e4       	ldi	r24, 0x4F	; 79
    1660:	91 e0       	ldi	r25, 0x01	; 1
    1662:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    1666:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    166a:	48 e1       	ldi	r20, 0x18	; 24
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	60 e5       	ldi	r22, 0x50	; 80
    1670:	71 e0       	ldi	r23, 0x01	; 1
    1672:	87 ef       	ldi	r24, 0xF7	; 247
    1674:	97 e0       	ldi	r25, 0x07	; 7
    1676:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		return(EE_LOAD_OK);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	06 c0       	rjmp	.+12     	; 0x168a <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    167e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1682:	80 62       	ori	r24, 0x20	; 32
    1684:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1688:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    1694:	8b ee       	ldi	r24, 0xEB	; 235
    1696:	93 e0       	ldi	r25, 0x03	; 3
    1698:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    169c:	ec 01       	movw	r28, r24
    169e:	60 e8       	ldi	r22, 0x80	; 128
    16a0:	72 e0       	ldi	r23, 0x02	; 2
    16a2:	8b e6       	ldi	r24, 0x6B	; 107
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	34 de       	rcall	.-920    	; 0x1310 <crc16_eeprom>
    16a8:	c8 17       	cp	r28, r24
    16aa:	d9 07       	cpc	r29, r25
    16ac:	81 f4       	brne	.+32     	; 0x16ce <eeprom_ReadProg+0x3e>
    16ae:	8a e6       	ldi	r24, 0x6A	; 106
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    16b6:	80 35       	cpi	r24, 0x50	; 80
    16b8:	51 f4       	brne	.+20     	; 0x16ce <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	52 e0       	ldi	r21, 0x02	; 2
    16be:	6b e6       	ldi	r22, 0x6B	; 107
    16c0:	71 e0       	ldi	r23, 0x01	; 1
    16c2:	84 e6       	ldi	r24, 0x64	; 100
    16c4:	99 e0       	ldi	r25, 0x09	; 9
    16c6:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		return(EE_LOAD_OK);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    16ce:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    16d2:	80 64       	ori	r24, 0x40	; 64
    16d4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	08 95       	ret

000016e0 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    16e4:	82 ef       	ldi	r24, 0xF2	; 242
    16e6:	93 e0       	ldi	r25, 0x03	; 3
    16e8:	0e 94 c1 3b 	call	0x7782	; 0x7782 <eeprom_read_word>
    16ec:	ec 01       	movw	r28, r24
    16ee:	64 e0       	ldi	r22, 0x04	; 4
    16f0:	70 e0       	ldi	r23, 0x00	; 0
    16f2:	8e ee       	ldi	r24, 0xEE	; 238
    16f4:	93 e0       	ldi	r25, 0x03	; 3
    16f6:	0c de       	rcall	.-1000   	; 0x1310 <crc16_eeprom>
    16f8:	c8 17       	cp	r28, r24
    16fa:	d9 07       	cpc	r29, r25
    16fc:	51 f4       	brne	.+20     	; 0x1712 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    16fe:	44 e0       	ldi	r20, 0x04	; 4
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	6e ee       	ldi	r22, 0xEE	; 238
    1704:	73 e0       	ldi	r23, 0x03	; 3
    1706:	83 eb       	ldi	r24, 0xB3	; 179
    1708:	95 e0       	ldi	r25, 0x05	; 5
    170a:	0e 94 a9 3b 	call	0x7752	; 0x7752 <eeprom_read_block>
		return(EE_LOAD_OK);
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	06 c0       	rjmp	.+12     	; 0x171e <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    1712:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1716:	80 68       	ori	r24, 0x80	; 128
    1718:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    171c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	08 95       	ret

00001724 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    172e:	65 e6       	ldi	r22, 0x65	; 101
    1730:	89 ef       	ldi	r24, 0xF9	; 249
    1732:	93 e0       	ldi	r25, 0x03	; 3
    1734:	0c 94 d5 3b 	jmp	0x77aa	; 0x77aa <eeprom_update_byte>
    1738:	08 95       	ret

0000173a <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    173e:	60 e3       	ldi	r22, 0x30	; 48
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	84 e3       	ldi	r24, 0x34	; 52
    1744:	99 e0       	ldi	r25, 0x09	; 9
    1746:	be dd       	rcall	.-1156   	; 0x12c4 <crc16_ram>
    1748:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    174a:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    174e:	6d e4       	ldi	r22, 0x4D	; 77
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    1758:	40 e3       	ldi	r20, 0x30	; 48
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	62 e0       	ldi	r22, 0x02	; 2
    175e:	70 e0       	ldi	r23, 0x00	; 0
    1760:	84 e3       	ldi	r24, 0x34	; 52
    1762:	99 e0       	ldi	r25, 0x09	; 9
    1764:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    1768:	be 01       	movw	r22, r28
    176a:	82 e3       	ldi	r24, 0x32	; 50
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    1772:	d8 df       	rcall	.-80     	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1774:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    1778:	df 91       	pop	r29
    177a:	cf 91       	pop	r28
    177c:	08 95       	ret

0000177e <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	71 e0       	ldi	r23, 0x01	; 1
    1786:	88 e2       	ldi	r24, 0x28	; 40
    1788:	98 e0       	ldi	r25, 0x08	; 8
    178a:	9c dd       	rcall	.-1224   	; 0x12c4 <crc16_ram>
    178c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    178e:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1792:	69 e4       	ldi	r22, 0x49	; 73
    1794:	84 e3       	ldi	r24, 0x34	; 52
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	51 e0       	ldi	r21, 0x01	; 1
    17a0:	65 e3       	ldi	r22, 0x35	; 53
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	88 e2       	ldi	r24, 0x28	; 40
    17a6:	98 e0       	ldi	r25, 0x08	; 8
    17a8:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    17ac:	be 01       	movw	r22, r28
    17ae:	85 e3       	ldi	r24, 0x35	; 53
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    17b6:	b6 df       	rcall	.-148    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    17b8:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    17c6:	68 e0       	ldi	r22, 0x08	; 8
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	88 e2       	ldi	r24, 0x28	; 40
    17cc:	99 e0       	ldi	r25, 0x09	; 9
    17ce:	7a dd       	rcall	.-1292   	; 0x12c4 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    17d0:	ac 01       	movw	r20, r24
    17d2:	63 e0       	ldi	r22, 0x03	; 3
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	80 e3       	ldi	r24, 0x30	; 48
    17d8:	99 e0       	ldi	r25, 0x09	; 9
    17da:	d1 dd       	rcall	.-1118   	; 0x137e <crc16_ram_startVal>
    17dc:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17de:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    17e2:	6f e4       	ldi	r22, 0x4F	; 79
    17e4:	87 e3       	ldi	r24, 0x37	; 55
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    17ec:	48 e0       	ldi	r20, 0x08	; 8
    17ee:	50 e0       	ldi	r21, 0x00	; 0
    17f0:	68 e3       	ldi	r22, 0x38	; 56
    17f2:	71 e0       	ldi	r23, 0x01	; 1
    17f4:	88 e2       	ldi	r24, 0x28	; 40
    17f6:	99 e0       	ldi	r25, 0x09	; 9
    17f8:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    17fc:	43 e0       	ldi	r20, 0x03	; 3
    17fe:	50 e0       	ldi	r21, 0x00	; 0
    1800:	60 e4       	ldi	r22, 0x40	; 64
    1802:	71 e0       	ldi	r23, 0x01	; 1
    1804:	80 e3       	ldi	r24, 0x30	; 48
    1806:	99 e0       	ldi	r25, 0x09	; 9
    1808:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    180c:	be 01       	movw	r22, r28
    180e:	83 e4       	ldi	r24, 0x43	; 67
    1810:	91 e0       	ldi	r25, 0x01	; 1
    1812:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    1816:	86 df       	rcall	.-244    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1818:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	08 95       	ret

00001822 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	85 e5       	ldi	r24, 0x55	; 85
    1830:	93 e0       	ldi	r25, 0x03	; 3
    1832:	48 dd       	rcall	.-1392   	; 0x12c4 <crc16_ram>
    1834:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    1836:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    183a:	69 e6       	ldi	r22, 0x69	; 105
    183c:	85 e4       	ldi	r24, 0x45	; 69
    183e:	91 e0       	ldi	r25, 0x01	; 1
    1840:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    1844:	c5 e5       	ldi	r28, 0x55	; 85
    1846:	d3 e0       	ldi	r29, 0x03	; 3
    1848:	68 81       	ld	r22, Y
    184a:	86 e4       	ldi	r24, 0x46	; 70
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    1852:	69 81       	ldd	r22, Y+1	; 0x01
    1854:	87 e4       	ldi	r24, 0x47	; 71
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    185c:	b8 01       	movw	r22, r16
    185e:	88 e4       	ldi	r24, 0x48	; 72
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    1866:	5e df       	rcall	.-324    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1868:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	08 95       	ret

00001876 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    187a:	61 e0       	ldi	r22, 0x01	; 1
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	82 e5       	ldi	r24, 0x52	; 82
    1880:	96 e1       	ldi	r25, 0x16	; 22
    1882:	20 dd       	rcall	.-1472   	; 0x12c4 <crc16_ram>
    1884:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1886:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    188a:	65 e5       	ldi	r22, 0x55	; 85
    188c:	8a e4       	ldi	r24, 0x4A	; 74
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1894:	60 91 52 16 	lds	r22, 0x1652	; 0x801652 <serUSB_Active>
    1898:	8b e4       	ldi	r24, 0x4B	; 75
    189a:	91 e0       	ldi	r25, 0x01	; 1
    189c:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    18a0:	be 01       	movw	r22, r28
    18a2:	8c e4       	ldi	r24, 0x4C	; 76
    18a4:	91 e0       	ldi	r25, 0x01	; 1
    18a6:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    18aa:	3c df       	rcall	.-392    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18ac:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	08 95       	ret

000018b6 <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    18ba:	62 e0       	ldi	r22, 0x02	; 2
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	86 e2       	ldi	r24, 0x26	; 38
    18c0:	98 e0       	ldi	r25, 0x08	; 8
    18c2:	00 dd       	rcall	.-1536   	; 0x12c4 <crc16_ram>
    18c4:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    18c6:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    18ca:	64 e5       	ldi	r22, 0x54	; 84
    18cc:	84 ef       	ldi	r24, 0xF4	; 244
    18ce:	93 e0       	ldi	r25, 0x03	; 3
    18d0:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    18d4:	42 e0       	ldi	r20, 0x02	; 2
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	65 ef       	ldi	r22, 0xF5	; 245
    18da:	73 e0       	ldi	r23, 0x03	; 3
    18dc:	86 e2       	ldi	r24, 0x26	; 38
    18de:	98 e0       	ldi	r25, 0x08	; 8
    18e0:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    18e4:	be 01       	movw	r22, r28
    18e6:	87 ef       	ldi	r24, 0xF7	; 247
    18e8:	93 e0       	ldi	r25, 0x03	; 3
    18ea:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    18ee:	1a df       	rcall	.-460    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18f0:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	80 e1       	ldi	r24, 0x10	; 16
    1904:	98 e0       	ldi	r25, 0x08	; 8
    1906:	de dc       	rcall	.-1604   	; 0x12c4 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1908:	ac 01       	movw	r20, r24
    190a:	68 e1       	ldi	r22, 0x18	; 24
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	87 ef       	ldi	r24, 0xF7	; 247
    1910:	97 e0       	ldi	r25, 0x07	; 7
    1912:	35 dd       	rcall	.-1430   	; 0x137e <crc16_ram_startVal>
    1914:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1916:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    191a:	62 e5       	ldi	r22, 0x52	; 82
    191c:	8e e4       	ldi	r24, 0x4E	; 78
    191e:	91 e0       	ldi	r25, 0x01	; 1
    1920:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1924:	60 91 10 08 	lds	r22, 0x0810	; 0x800810 <registerCount>
    1928:	8f e4       	ldi	r24, 0x4F	; 79
    192a:	91 e0       	ldi	r25, 0x01	; 1
    192c:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1930:	48 e1       	ldi	r20, 0x18	; 24
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	60 e5       	ldi	r22, 0x50	; 80
    1936:	71 e0       	ldi	r23, 0x01	; 1
    1938:	87 ef       	ldi	r24, 0xF7	; 247
    193a:	97 e0       	ldi	r25, 0x07	; 7
    193c:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1940:	be 01       	movw	r22, r28
    1942:	88 e6       	ldi	r24, 0x68	; 104
    1944:	91 e0       	ldi	r25, 0x01	; 1
    1946:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    194a:	ec de       	rcall	.-552    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    194c:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    195a:	60 e8       	ldi	r22, 0x80	; 128
    195c:	72 e0       	ldi	r23, 0x02	; 2
    195e:	84 e6       	ldi	r24, 0x64	; 100
    1960:	99 e0       	ldi	r25, 0x09	; 9
    1962:	b0 dc       	rcall	.-1696   	; 0x12c4 <crc16_ram>
    1964:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1966:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    196a:	60 e5       	ldi	r22, 0x50	; 80
    196c:	8a e6       	ldi	r24, 0x6A	; 106
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	52 e0       	ldi	r21, 0x02	; 2
    1978:	6b e6       	ldi	r22, 0x6B	; 107
    197a:	71 e0       	ldi	r23, 0x01	; 1
    197c:	84 e6       	ldi	r24, 0x64	; 100
    197e:	99 e0       	ldi	r25, 0x09	; 9
    1980:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1984:	be 01       	movw	r22, r28
    1986:	8b ee       	ldi	r24, 0xEB	; 235
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    198e:	ca de       	rcall	.-620    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1990:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	08 95       	ret

0000199a <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    199e:	64 e0       	ldi	r22, 0x04	; 4
    19a0:	70 e0       	ldi	r23, 0x00	; 0
    19a2:	83 eb       	ldi	r24, 0xB3	; 179
    19a4:	95 e0       	ldi	r25, 0x05	; 5
    19a6:	8e dc       	rcall	.-1764   	; 0x12c4 <crc16_ram>
    19a8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19aa:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    19ae:	6b e4       	ldi	r22, 0x4B	; 75
    19b0:	8d ee       	ldi	r24, 0xED	; 237
    19b2:	93 e0       	ldi	r25, 0x03	; 3
    19b4:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    19b8:	44 e0       	ldi	r20, 0x04	; 4
    19ba:	50 e0       	ldi	r21, 0x00	; 0
    19bc:	6e ee       	ldi	r22, 0xEE	; 238
    19be:	73 e0       	ldi	r23, 0x03	; 3
    19c0:	83 eb       	ldi	r24, 0xB3	; 179
    19c2:	95 e0       	ldi	r25, 0x05	; 5
    19c4:	0e 94 c6 3b 	call	0x778c	; 0x778c <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    19c8:	be 01       	movw	r22, r28
    19ca:	82 ef       	ldi	r24, 0xF2	; 242
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	0e 94 e7 3b 	call	0x77ce	; 0x77ce <eeprom_update_word>
	eepromWriteSignature();
    19d2:	a8 de       	rcall	.-688    	; 0x1724 <eepromWriteSignature>
	lcd_waitSymbolOff();
    19d4:	0e 94 e1 3a 	call	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    19de:	ad de       	rcall	.-678    	; 0x173a <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    19e0:	ce de       	rcall	.-612    	; 0x177e <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    19e2:	ef de       	rcall	.-546    	; 0x17c2 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    19e4:	1e df       	rcall	.-452    	; 0x1822 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    19e6:	47 df       	rcall	.-370    	; 0x1876 <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    19e8:	88 df       	rcall	.-240    	; 0x18fa <eeprom_UpdateReg>
    19ea:	b5 df       	rcall	.-150    	; 0x1956 <eeprom_UpdateProg>
	eeprom_UpdateProg();
    19ec:	d6 df       	rcall	.-84     	; 0x199a <eeprom_UpdateSoftkeys>
    19ee:	63 cf       	rjmp	.-314    	; 0x18b6 <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    19f0:	08 95       	ret

000019f2 <eepromCopy>:
    19f2:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    19f4:	df 92       	push	r13
    19f6:	ef 92       	push	r14
    19f8:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    19fa:	0f 93       	push	r16
    19fc:	1f 93       	push	r17
    19fe:	cf 93       	push	r28
    1a00:	df 93       	push	r29
    1a02:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1a04:	11 c0       	rjmp	.+34     	; 0x1a28 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1a06:	7c 01       	movw	r14, r24
    1a08:	2f ef       	ldi	r18, 0xFF	; 255
    1a0a:	e2 1a       	sub	r14, r18
    1a0c:	f2 0a       	sbc	r15, r18
    1a0e:	0e 94 b9 3b 	call	0x7772	; 0x7772 <eeprom_read_byte>
    1a12:	6e 01       	movw	r12, r28
    1a14:	9f ef       	ldi	r25, 0xFF	; 255
    1a16:	c9 1a       	sub	r12, r25
    1a18:	d9 0a       	sbc	r13, r25
    1a1a:	68 2f       	mov	r22, r24
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1a22:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1a24:	e6 01       	movw	r28, r12
    1a26:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1a28:	8a 01       	movw	r16, r20
    1a2a:	01 50       	subi	r16, 0x01	; 1
    1a2c:	11 09       	sbc	r17, r1
    1a2e:	45 2b       	or	r20, r21
    1a30:	51 f7       	brne	.-44     	; 0x1a06 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	08 95       	ret

00001a44 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1a44:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1a48:	40 e0       	ldi	r20, 0x00	; 0
    1a4a:	58 e0       	ldi	r21, 0x08	; 8
    1a4c:	60 e0       	ldi	r22, 0x00	; 0
    1a4e:	78 e0       	ldi	r23, 0x08	; 8
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	ce df       	rcall	.-100    	; 0x19f2 <eepromCopy>
	lcd_waitSymbolOff();
    1a56:	0c 94 e1 3a 	jmp	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
    1a5a:	08 95       	ret

00001a5c <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1a5c:	0e 94 d3 3a 	call	0x75a6	; 0x75a6 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	58 e0       	ldi	r21, 0x08	; 8
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	98 e0       	ldi	r25, 0x08	; 8
    1a6c:	c2 df       	rcall	.-124    	; 0x19f2 <eepromCopy>
	lcd_waitSymbolOff();
    1a6e:	0c 94 e1 3a 	jmp	0x75c2	; 0x75c2 <lcd_waitSymbolOff>
    1a72:	08 95       	ret

00001a74 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	0a c0       	rjmp	.+20     	; 0x1a8c <init_Timers+0x18>
    1a78:	e8 2f       	mov	r30, r24
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	ee 0f       	add	r30, r30
    1a7e:	ff 1f       	adc	r31, r31
    1a80:	e1 5d       	subi	r30, 0xD1	; 209
    1a82:	fd 4f       	sbci	r31, 0xFD	; 253
    1a84:	9f ef       	ldi	r25, 0xFF	; 255
    1a86:	90 83       	st	Z, r25
    1a88:	11 82       	std	Z+1, r1	; 0x01
    1a8a:	8f 5f       	subi	r24, 0xFF	; 255
    1a8c:	89 30       	cpi	r24, 0x09	; 9
    1a8e:	a0 f3       	brcs	.-24     	; 0x1a78 <init_Timers+0x4>
    1a90:	e1 e4       	ldi	r30, 0x41	; 65
    1a92:	f2 e0       	ldi	r31, 0x02	; 2
    1a94:	10 82       	st	Z, r1
    1a96:	11 82       	std	Z+1, r1	; 0x01
    1a98:	12 82       	std	Z+2, r1	; 0x02
    1a9a:	13 82       	std	Z+3, r1	; 0x03
    1a9c:	8f ef       	ldi	r24, 0xFF	; 255
    1a9e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1aa2:	08 95       	ret

00001aa4 <init_HwTimer>:
    1aa4:	82 e0       	ldi	r24, 0x02	; 2
    1aa6:	84 bd       	out	0x24, r24	; 36
    1aa8:	93 e0       	ldi	r25, 0x03	; 3
    1aaa:	95 bd       	out	0x25, r25	; 37
    1aac:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1ab0:	89 ef       	ldi	r24, 0xF9	; 249
    1ab2:	87 bd       	out	0x27, r24	; 39
    1ab4:	85 b1       	in	r24, 0x05	; 5
    1ab6:	8f 77       	andi	r24, 0x7F	; 127
    1ab8:	85 b9       	out	0x05, r24	; 5
    1aba:	84 b1       	in	r24, 0x04	; 4
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	84 b9       	out	0x04, r24	; 4
    1ac0:	08 95       	ret

00001ac2 <init_ADC>:
    1ac2:	87 e8       	ldi	r24, 0x87	; 135
    1ac4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1ac8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1acc:	8f e7       	ldi	r24, 0x7F	; 127
    1ace:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1ad8:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1adc:	e9 e4       	ldi	r30, 0x49	; 73
    1ade:	f3 e0       	ldi	r31, 0x03	; 3
    1ae0:	10 82       	st	Z, r1
    1ae2:	8f ef       	ldi	r24, 0xFF	; 255
    1ae4:	81 83       	std	Z+1, r24	; 0x01
    1ae6:	82 83       	std	Z+2, r24	; 0x02
    1ae8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	10 c0       	rjmp	.+32     	; 0x1b10 <init_ADC+0x4e>
    1af0:	85 30       	cpi	r24, 0x05	; 5
    1af2:	39 f4       	brne	.+14     	; 0x1b02 <init_ADC+0x40>
    1af4:	e8 2f       	mov	r30, r24
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	e1 5b       	subi	r30, 0xB1	; 177
    1afa:	fc 4f       	sbci	r31, 0xFC	; 252
    1afc:	96 e0       	ldi	r25, 0x06	; 6
    1afe:	90 83       	st	Z, r25
    1b00:	06 c0       	rjmp	.+12     	; 0x1b0e <init_ADC+0x4c>
    1b02:	e8 2f       	mov	r30, r24
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	e1 5b       	subi	r30, 0xB1	; 177
    1b08:	fc 4f       	sbci	r31, 0xFC	; 252
    1b0a:	9a e0       	ldi	r25, 0x0A	; 10
    1b0c:	90 83       	st	Z, r25
    1b0e:	8f 5f       	subi	r24, 0xFF	; 255
    1b10:	86 30       	cpi	r24, 0x06	; 6
    1b12:	70 f3       	brcs	.-36     	; 0x1af0 <init_ADC+0x2e>
    1b14:	08 95       	ret

00001b16 <init_Pipe>:
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	88 b9       	out	0x08, r24	; 8
    1b1a:	87 b9       	out	0x07, r24	; 7
    1b1c:	82 b9       	out	0x02, r24	; 2
    1b1e:	11 b8       	out	0x01, r1	; 1
    1b20:	84 b3       	in	r24, 0x14	; 20
    1b22:	87 60       	ori	r24, 0x07	; 7
    1b24:	84 bb       	out	0x14, r24	; 20
    1b26:	83 b3       	in	r24, 0x13	; 19
    1b28:	87 60       	ori	r24, 0x07	; 7
    1b2a:	83 bb       	out	0x13, r24	; 19
    1b2c:	8b b1       	in	r24, 0x0b	; 11
    1b2e:	8f 77       	andi	r24, 0x7F	; 127
    1b30:	8b b9       	out	0x0b, r24	; 11
    1b32:	8a b1       	in	r24, 0x0a	; 10
    1b34:	80 68       	ori	r24, 0x80	; 128
    1b36:	8a b9       	out	0x0a, r24	; 10
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0e c0       	rjmp	.+28     	; 0x1b58 <init_Pipe+0x42>
    1b3c:	e8 2f       	mov	r30, r24
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	e7 5b       	subi	r30, 0xB7	; 183
    1b4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	91 83       	std	Z+1, r25	; 0x01
    1b54:	90 83       	st	Z, r25
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	80 32       	cpi	r24, 0x20	; 32
    1b5a:	80 f3       	brcs	.-32     	; 0x1b3c <init_Pipe+0x26>
    1b5c:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1b60:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1b64:	08 95       	ret

00001b66 <init_PipeModules>:
    1b66:	e6 dc       	rcall	.-1588   	; 0x1534 <eeprom_ReadModules>
    1b68:	8f 3f       	cpi	r24, 0xFF	; 255
    1b6a:	51 f4       	brne	.+20     	; 0x1b80 <init_PipeModules+0x1a>
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	42 d7       	rcall	.+3716   	; 0x29fa <log_putError>
    1b76:	e5 e5       	ldi	r30, 0x55	; 85
    1b78:	f3 e0       	ldi	r31, 0x03	; 3
    1b7a:	8f ef       	ldi	r24, 0xFF	; 255
    1b7c:	80 83       	st	Z, r24
    1b7e:	81 83       	std	Z+1, r24	; 0x01
    1b80:	8b b1       	in	r24, 0x0b	; 11
    1b82:	8f 77       	andi	r24, 0x7F	; 127
    1b84:	8b b9       	out	0x0b, r24	; 11
    1b86:	84 b3       	in	r24, 0x14	; 20
    1b88:	87 60       	ori	r24, 0x07	; 7
    1b8a:	84 bb       	out	0x14, r24	; 20
    1b8c:	84 b3       	in	r24, 0x14	; 20
    1b8e:	8b 7f       	andi	r24, 0xFB	; 251
    1b90:	84 bb       	out	0x14, r24	; 20
    1b92:	85 e0       	ldi	r24, 0x05	; 5
    1b94:	8a 95       	dec	r24
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <init_PipeModules+0x2e>
    1b98:	00 00       	nop
    1b9a:	84 b3       	in	r24, 0x14	; 20
    1b9c:	84 60       	ori	r24, 0x04	; 4
    1b9e:	84 bb       	out	0x14, r24	; 20
    1ba0:	90 e2       	ldi	r25, 0x20	; 32
    1ba2:	84 b3       	in	r24, 0x14	; 20
    1ba4:	81 60       	ori	r24, 0x01	; 1
    1ba6:	84 bb       	out	0x14, r24	; 20
    1ba8:	90 fd       	sbrc	r25, 0
    1baa:	02 c0       	rjmp	.+4      	; 0x1bb0 <init_PipeModules+0x4a>
    1bac:	85 e5       	ldi	r24, 0x55	; 85
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <init_PipeModules+0x4c>
    1bb0:	8a ea       	ldi	r24, 0xAA	; 170
    1bb2:	88 b9       	out	0x08, r24	; 8
    1bb4:	80 b1       	in	r24, 0x00	; 0
    1bb6:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1bba:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1bbe:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1bc2:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1bc6:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1bca:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1bce:	84 b3       	in	r24, 0x14	; 20
    1bd0:	8e 7f       	andi	r24, 0xFE	; 254
    1bd2:	84 bb       	out	0x14, r24	; 20
    1bd4:	85 e0       	ldi	r24, 0x05	; 5
    1bd6:	8a 95       	dec	r24
    1bd8:	f1 f7       	brne	.-4      	; 0x1bd6 <init_PipeModules+0x70>
    1bda:	00 00       	nop
    1bdc:	91 50       	subi	r25, 0x01	; 1
    1bde:	09 f7       	brne	.-62     	; 0x1ba2 <init_PipeModules+0x3c>
    1be0:	90 e2       	ldi	r25, 0x20	; 32
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <init_PipeModules+0x9c>
    1be4:	84 b3       	in	r24, 0x14	; 20
    1be6:	81 60       	ori	r24, 0x01	; 1
    1be8:	84 bb       	out	0x14, r24	; 20
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	8a 95       	dec	r24
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <init_PipeModules+0x86>
    1bf0:	00 c0       	rjmp	.+0      	; 0x1bf2 <init_PipeModules+0x8c>
    1bf2:	84 b3       	in	r24, 0x14	; 20
    1bf4:	8e 7f       	andi	r24, 0xFE	; 254
    1bf6:	84 bb       	out	0x14, r24	; 20
    1bf8:	82 e0       	ldi	r24, 0x02	; 2
    1bfa:	8a 95       	dec	r24
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <init_PipeModules+0x94>
    1bfe:	00 c0       	rjmp	.+0      	; 0x1c00 <init_PipeModules+0x9a>
    1c00:	91 50       	subi	r25, 0x01	; 1
    1c02:	91 11       	cpse	r25, r1
    1c04:	ef cf       	rjmp	.-34     	; 0x1be4 <init_PipeModules+0x7e>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1c0c:	90 e2       	ldi	r25, 0x20	; 32
    1c0e:	84 b3       	in	r24, 0x14	; 20
    1c10:	81 60       	ori	r24, 0x01	; 1
    1c12:	84 bb       	out	0x14, r24	; 20
    1c14:	8f ef       	ldi	r24, 0xFF	; 255
    1c16:	88 b9       	out	0x08, r24	; 8
    1c18:	20 b1       	in	r18, 0x00	; 0
    1c1a:	90 fd       	sbrc	r25, 0
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <init_PipeModules+0xbc>
    1c1e:	8a ea       	ldi	r24, 0xAA	; 170
    1c20:	01 c0       	rjmp	.+2      	; 0x1c24 <init_PipeModules+0xbe>
    1c22:	85 e5       	ldi	r24, 0x55	; 85
    1c24:	82 27       	eor	r24, r18
    1c26:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1c2a:	82 23       	and	r24, r18
    1c2c:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1c30:	84 b3       	in	r24, 0x14	; 20
    1c32:	8e 7f       	andi	r24, 0xFE	; 254
    1c34:	84 bb       	out	0x14, r24	; 20
    1c36:	85 e0       	ldi	r24, 0x05	; 5
    1c38:	8a 95       	dec	r24
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <init_PipeModules+0xd2>
    1c3c:	00 00       	nop
    1c3e:	91 50       	subi	r25, 0x01	; 1
    1c40:	31 f7       	brne	.-52     	; 0x1c0e <init_PipeModules+0xa8>
    1c42:	00 00       	nop
    1c44:	00 00       	nop
    1c46:	84 b3       	in	r24, 0x14	; 20
    1c48:	81 60       	ori	r24, 0x01	; 1
    1c4a:	84 bb       	out	0x14, r24	; 20
    1c4c:	84 b3       	in	r24, 0x14	; 20
    1c4e:	87 60       	ori	r24, 0x07	; 7
    1c50:	84 bb       	out	0x14, r24	; 20
    1c52:	84 b3       	in	r24, 0x14	; 20
    1c54:	8b 7f       	andi	r24, 0xFB	; 251
    1c56:	84 bb       	out	0x14, r24	; 20
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	8a 95       	dec	r24
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <init_PipeModules+0xf4>
    1c5e:	00 c0       	rjmp	.+0      	; 0x1c60 <init_PipeModules+0xfa>
    1c60:	84 b3       	in	r24, 0x14	; 20
    1c62:	84 60       	ori	r24, 0x04	; 4
    1c64:	84 bb       	out	0x14, r24	; 20
    1c66:	90 e2       	ldi	r25, 0x20	; 32
    1c68:	e1 e4       	ldi	r30, 0x41	; 65
    1c6a:	f3 e0       	ldi	r31, 0x03	; 3
    1c6c:	83 81       	ldd	r24, Z+3	; 0x03
    1c6e:	82 83       	std	Z+2, r24	; 0x02
    1c70:	84 81       	ldd	r24, Z+4	; 0x04
    1c72:	83 83       	std	Z+3, r24	; 0x03
    1c74:	84 b3       	in	r24, 0x14	; 20
    1c76:	81 60       	ori	r24, 0x01	; 1
    1c78:	84 bb       	out	0x14, r24	; 20
    1c7a:	8f ef       	ldi	r24, 0xFF	; 255
    1c7c:	81 83       	std	Z+1, r24	; 0x01
    1c7e:	88 b9       	out	0x08, r24	; 8
    1c80:	85 81       	ldd	r24, Z+5	; 0x05
    1c82:	84 83       	std	Z+4, r24	; 0x04
    1c84:	86 81       	ldd	r24, Z+6	; 0x06
    1c86:	85 83       	std	Z+5, r24	; 0x05
    1c88:	80 b1       	in	r24, 0x00	; 0
    1c8a:	86 83       	std	Z+6, r24	; 0x06
    1c8c:	82 83       	std	Z+2, r24	; 0x02
    1c8e:	83 83       	std	Z+3, r24	; 0x03
    1c90:	84 83       	std	Z+4, r24	; 0x04
    1c92:	85 83       	std	Z+5, r24	; 0x05
    1c94:	87 83       	std	Z+7, r24	; 0x07
    1c96:	84 b3       	in	r24, 0x14	; 20
    1c98:	8e 7f       	andi	r24, 0xFE	; 254
    1c9a:	84 bb       	out	0x14, r24	; 20
    1c9c:	38 97       	sbiw	r30, 0x08	; 8
    1c9e:	91 50       	subi	r25, 0x01	; 1
    1ca0:	29 f7       	brne	.-54     	; 0x1c6c <init_PipeModules+0x106>
    1ca2:	00 00       	nop
    1ca4:	00 00       	nop
    1ca6:	84 b3       	in	r24, 0x14	; 20
    1ca8:	81 60       	ori	r24, 0x01	; 1
    1caa:	84 bb       	out	0x14, r24	; 20
    1cac:	84 b3       	in	r24, 0x14	; 20
    1cae:	8d 7f       	andi	r24, 0xFD	; 253
    1cb0:	84 bb       	out	0x14, r24	; 20
    1cb2:	18 b8       	out	0x08, r1	; 8
    1cb4:	85 e0       	ldi	r24, 0x05	; 5
    1cb6:	8a 95       	dec	r24
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <init_PipeModules+0x150>
    1cba:	00 00       	nop
    1cbc:	84 b3       	in	r24, 0x14	; 20
    1cbe:	82 60       	ori	r24, 0x02	; 2
    1cc0:	84 bb       	out	0x14, r24	; 20
    1cc2:	08 95       	ret

00001cc4 <test_PipeModule>:
    1cc4:	88 30       	cpi	r24, 0x08	; 8
    1cc6:	08 f0       	brcs	.+2      	; 0x1cca <test_PipeModule+0x6>
    1cc8:	6a c0       	rjmp	.+212    	; 0x1d9e <test_PipeModule+0xda>
    1cca:	31 e0       	ldi	r19, 0x01	; 1
    1ccc:	01 c0       	rjmp	.+2      	; 0x1cd0 <test_PipeModule+0xc>
    1cce:	33 0f       	add	r19, r19
    1cd0:	8a 95       	dec	r24
    1cd2:	ea f7       	brpl	.-6      	; 0x1cce <test_PipeModule+0xa>
    1cd4:	80 e8       	ldi	r24, 0x80	; 128
    1cd6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1cda:	8b b1       	in	r24, 0x0b	; 11
    1cdc:	8f 77       	andi	r24, 0x7F	; 127
    1cde:	8b b9       	out	0x0b, r24	; 11
    1ce0:	84 b3       	in	r24, 0x14	; 20
    1ce2:	87 60       	ori	r24, 0x07	; 7
    1ce4:	84 bb       	out	0x14, r24	; 20
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	1d c0       	rjmp	.+58     	; 0x1d24 <test_PipeModule+0x60>
    1cea:	20 fd       	sbrc	r18, 0
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <test_PipeModule+0x30>
    1cee:	83 2f       	mov	r24, r19
    1cf0:	80 95       	com	r24
    1cf2:	01 c0       	rjmp	.+2      	; 0x1cf6 <test_PipeModule+0x32>
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	88 b9       	out	0x08, r24	; 8
    1cf8:	26 95       	lsr	r18
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	8a 95       	dec	r24
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <test_PipeModule+0x38>
    1d00:	00 c0       	rjmp	.+0      	; 0x1d02 <test_PipeModule+0x3e>
    1d02:	84 b3       	in	r24, 0x14	; 20
    1d04:	8e 7f       	andi	r24, 0xFE	; 254
    1d06:	84 bb       	out	0x14, r24	; 20
    1d08:	82 e0       	ldi	r24, 0x02	; 2
    1d0a:	8a 95       	dec	r24
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <test_PipeModule+0x46>
    1d0e:	00 c0       	rjmp	.+0      	; 0x1d10 <test_PipeModule+0x4c>
    1d10:	84 b3       	in	r24, 0x14	; 20
    1d12:	81 60       	ori	r24, 0x01	; 1
    1d14:	84 bb       	out	0x14, r24	; 20
    1d16:	9f 5f       	subi	r25, 0xFF	; 255
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <test_PipeModule+0x5a>
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	25 ea       	ldi	r18, 0xA5	; 165
    1d1e:	98 30       	cpi	r25, 0x08	; 8
    1d20:	20 f3       	brcs	.-56     	; 0x1cea <test_PipeModule+0x26>
    1d22:	4f 5f       	subi	r20, 0xFF	; 255
    1d24:	44 30       	cpi	r20, 0x04	; 4
    1d26:	c8 f3       	brcs	.-14     	; 0x1d1a <test_PipeModule+0x56>
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0f c0       	rjmp	.+30     	; 0x1d4a <test_PipeModule+0x86>
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	8a 95       	dec	r24
    1d30:	f1 f7       	brne	.-4      	; 0x1d2e <test_PipeModule+0x6a>
    1d32:	00 c0       	rjmp	.+0      	; 0x1d34 <test_PipeModule+0x70>
    1d34:	84 b3       	in	r24, 0x14	; 20
    1d36:	8e 7f       	andi	r24, 0xFE	; 254
    1d38:	84 bb       	out	0x14, r24	; 20
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	8a 95       	dec	r24
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <test_PipeModule+0x78>
    1d40:	00 c0       	rjmp	.+0      	; 0x1d42 <test_PipeModule+0x7e>
    1d42:	84 b3       	in	r24, 0x14	; 20
    1d44:	81 60       	ori	r24, 0x01	; 1
    1d46:	84 bb       	out	0x14, r24	; 20
    1d48:	9f 5f       	subi	r25, 0xFF	; 255
    1d4a:	90 32       	cpi	r25, 0x20	; 32
    1d4c:	78 f3       	brcs	.-34     	; 0x1d2c <test_PipeModule+0x68>
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	ba 01       	movw	r22, r20
    1d56:	17 c0       	rjmp	.+46     	; 0x1d86 <test_PipeModule+0xc2>
    1d58:	44 0f       	add	r20, r20
    1d5a:	55 1f       	adc	r21, r21
    1d5c:	66 1f       	adc	r22, r22
    1d5e:	77 1f       	adc	r23, r23
    1d60:	82 e0       	ldi	r24, 0x02	; 2
    1d62:	8a 95       	dec	r24
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <test_PipeModule+0x9e>
    1d66:	00 c0       	rjmp	.+0      	; 0x1d68 <test_PipeModule+0xa4>
    1d68:	84 b3       	in	r24, 0x14	; 20
    1d6a:	8e 7f       	andi	r24, 0xFE	; 254
    1d6c:	84 bb       	out	0x14, r24	; 20
    1d6e:	80 b1       	in	r24, 0x00	; 0
    1d70:	83 23       	and	r24, r19
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <test_PipeModule+0xb2>
    1d74:	41 60       	ori	r20, 0x01	; 1
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	8a 95       	dec	r24
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <test_PipeModule+0xb4>
    1d7c:	00 c0       	rjmp	.+0      	; 0x1d7e <test_PipeModule+0xba>
    1d7e:	84 b3       	in	r24, 0x14	; 20
    1d80:	81 60       	ori	r24, 0x01	; 1
    1d82:	84 bb       	out	0x14, r24	; 20
    1d84:	9f 5f       	subi	r25, 0xFF	; 255
    1d86:	90 32       	cpi	r25, 0x20	; 32
    1d88:	38 f3       	brcs	.-50     	; 0x1d58 <test_PipeModule+0x94>
    1d8a:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1d8e:	8b b1       	in	r24, 0x0b	; 11
    1d90:	80 68       	ori	r24, 0x80	; 128
    1d92:	8b b9       	out	0x0b, r24	; 11
    1d94:	34 2f       	mov	r19, r20
    1d96:	25 2f       	mov	r18, r21
    1d98:	86 2f       	mov	r24, r22
    1d9a:	97 2f       	mov	r25, r23
    1d9c:	04 c0       	rjmp	.+8      	; 0x1da6 <test_PipeModule+0xe2>
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	63 2f       	mov	r22, r19
    1da8:	72 2f       	mov	r23, r18
    1daa:	08 95       	ret

00001dac <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1dac:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1dae:	e9 e4       	ldi	r30, 0x49	; 73
    1db0:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1db2:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1db4:	06 c0       	rjmp	.+12     	; 0x1dc2 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1db6:	2f ef       	ldi	r18, 0xFF	; 255
    1db8:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1dba:	26 81       	ldd	r18, Z+6	; 0x06
    1dbc:	82 2b       	or	r24, r18
		pPipe++;
    1dbe:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1dc0:	9f 5f       	subi	r25, 0xFF	; 255
    1dc2:	90 32       	cpi	r25, 0x20	; 32
    1dc4:	c0 f3       	brcs	.-16     	; 0x1db6 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    1dc6:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    1dca:	89 23       	and	r24, r25
    1dcc:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
}
    1dd0:	89 23       	and	r24, r25
    1dd2:	08 95       	ret

00001dd4 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1dd4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1dd8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1ddc:	81 ff       	sbrs	r24, 1
    1dde:	fc cf       	rjmp	.-8      	; 0x1dd8 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1de0:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1de4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1de8:	81 ff       	sbrs	r24, 1
    1dea:	fc cf       	rjmp	.-8      	; 0x1de4 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1dec:	08 95       	ret

00001dee <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1df4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1df6:	f8 94       	cli
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <module_StartPowerOn+0x18>
    1dfa:	ef e2       	ldi	r30, 0x2F	; 47
    1dfc:	f2 e0       	ldi	r31, 0x02	; 2
    1dfe:	88 e2       	ldi	r24, 0x28	; 40
    1e00:	82 83       	std	Z+2, r24	; 0x02
    1e02:	13 82       	std	Z+3, r1	; 0x03
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	81 11       	cpse	r24, r1
    1e08:	f8 cf       	rjmp	.-16     	; 0x1dfa <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e0a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e0c:	08 95       	ret

00001e0e <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1e0e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1e12:	81 30       	cpi	r24, 0x01	; 1
    1e14:	31 f5       	brne	.+76     	; 0x1e62 <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1e16:	ca df       	rcall	.-108    	; 0x1dac <module_TestAllInputs>
    1e18:	81 11       	cpse	r24, r1
    1e1a:	14 c0       	rjmp	.+40     	; 0x1e44 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1e1c:	85 b1       	in	r24, 0x05	; 5
    1e1e:	80 64       	ori	r24, 0x40	; 64
    1e20:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1e22:	82 e1       	ldi	r24, 0x12	; 18
    1e24:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1e28:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e2a:	f8 94       	cli
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <module_PowerControl+0x2e>
    1e30:	ef e2       	ldi	r30, 0x2F	; 47
    1e32:	f2 e0       	ldi	r31, 0x02	; 2
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	13 82       	std	Z+3, r1	; 0x03
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	81 11       	cpse	r24, r1
    1e3e:	f8 cf       	rjmp	.-16     	; 0x1e30 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e40:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e42:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1e44:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e46:	f8 94       	cli
    1e48:	81 e0       	ldi	r24, 0x01	; 1
    1e4a:	07 c0       	rjmp	.+14     	; 0x1e5a <module_PowerControl+0x4c>
    1e4c:	ef e2       	ldi	r30, 0x2F	; 47
    1e4e:	f2 e0       	ldi	r31, 0x02	; 2
    1e50:	8c e0       	ldi	r24, 0x0C	; 12
    1e52:	82 83       	std	Z+2, r24	; 0x02
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	83 83       	std	Z+3, r24	; 0x03
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	81 11       	cpse	r24, r1
    1e5c:	f7 cf       	rjmp	.-18     	; 0x1e4c <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e5e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e60:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1e62:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1e64:	b1 f4       	brne	.+44     	; 0x1e92 <module_PowerControl+0x84>
    1e66:	a2 df       	rcall	.-188    	; 0x1dac <module_TestAllInputs>
		if (testResult == 0){
    1e68:	81 11       	cpse	r24, r1
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1e6c:	84 e1       	ldi	r24, 0x14	; 20
    1e6e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1e72:	0b c0       	rjmp	.+22     	; 0x1e8a <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1e74:	48 2f       	mov	r20, r24
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	85 e0       	ldi	r24, 0x05	; 5
    1e7c:	be d5       	rcall	.+2940   	; 0x29fa <log_putError>
			POWER_OFF
    1e7e:	85 b1       	in	r24, 0x05	; 5
    1e80:	8f 7b       	andi	r24, 0xBF	; 191
    1e82:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1e84:	80 e8       	ldi	r24, 0x80	; 128
    1e86:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1e8a:	8f ef       	ldi	r24, 0xFF	; 255
    1e8c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e90:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1e92:	8f ef       	ldi	r24, 0xFF	; 255
    1e94:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e98:	08 95       	ret

00001e9a <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0d c0       	rjmp	.+26     	; 0x1eb8 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1e9e:	94 30       	cpi	r25, 0x04	; 4
    1ea0:	50 f4       	brcc	.+20     	; 0x1eb6 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1ea2:	e9 2f       	mov	r30, r25
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	81 11       	cpse	r24, r1
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <softKey_WantLong+0x14>
    1eaa:	2a e0       	ldi	r18, 0x0A	; 10
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <softKey_WantLong+0x16>
    1eae:	26 e0       	ldi	r18, 0x06	; 6
    1eb0:	e1 5b       	subi	r30, 0xB1	; 177
    1eb2:	fc 4f       	sbci	r31, 0xFC	; 252
    1eb4:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1eb6:	9f 5f       	subi	r25, 0xFF	; 255
    1eb8:	96 30       	cpi	r25, 0x06	; 6
    1eba:	88 f3       	brcs	.-30     	; 0x1e9e <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1ebc:	08 95       	ret

00001ebe <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1ebe:	1f 92       	push	r1
    1ec0:	0f 92       	push	r0
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	0f 92       	push	r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	0b b6       	in	r0, 0x3b	; 59
    1eca:	0f 92       	push	r0
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	ef 93       	push	r30
    1eee:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1ef0:	85 b1       	in	r24, 0x05	; 5
    1ef2:	80 68       	ori	r24, 0x80	; 128
    1ef4:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1ef6:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1efa:	8f 5f       	subi	r24, 0xFF	; 255
    1efc:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1f00:	83 70       	andi	r24, 0x03	; 3
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <__vector_21+0x4a>
    1f06:	58 c1       	rjmp	.+688    	; 0x21b8 <__vector_21+0x2fa>
    1f08:	38 f0       	brcs	.+14     	; 0x1f18 <__vector_21+0x5a>
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <__vector_21+0x52>
    1f0e:	a5 c1       	rjmp	.+842    	; 0x225a <__stack+0x5b>
    1f10:	83 30       	cpi	r24, 0x03	; 3
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <__vector_21+0x58>
    1f14:	ca c1       	rjmp	.+916    	; 0x22aa <__stack+0xab>
    1f16:	05 c2       	rjmp	.+1034   	; 0x2322 <__stack+0x123>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1f18:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1f1c:	81 11       	cpse	r24, r1
    1f1e:	1a c1       	rjmp	.+564    	; 0x2154 <__vector_21+0x296>
    1f20:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1f24:	96 fd       	sbrc	r25, 6
    1f26:	16 c1       	rjmp	.+556    	; 0x2154 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	e7 5b       	subi	r30, 0xB7	; 183
    1f3c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f3e:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1f40:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1f44:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1f46:	49 17       	cp	r20, r25
    1f48:	10 f4       	brcc	.+4      	; 0x1f4e <__vector_21+0x90>
		return data1-data2;
    1f4a:	94 1b       	sub	r25, r20
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <__vector_21+0x96>
	} else {
		return data2-data1;
    1f4e:	54 2f       	mov	r21, r20
    1f50:	59 1b       	sub	r21, r25
    1f52:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1f54:	94 30       	cpi	r25, 0x04	; 4
    1f56:	08 f0       	brcs	.+2      	; 0x1f5a <__vector_21+0x9c>
    1f58:	fd c0       	rjmp	.+506    	; 0x2154 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1f5a:	81 11       	cpse	r24, r1
    1f5c:	0e c0       	rjmp	.+28     	; 0x1f7a <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1f5e:	42 32       	cpi	r20, 0x22	; 34
    1f60:	70 f0       	brcs	.+28     	; 0x1f7e <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1f62:	4f 33       	cpi	r20, 0x3F	; 63
    1f64:	70 f0       	brcs	.+28     	; 0x1f82 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1f66:	48 36       	cpi	r20, 0x68	; 104
    1f68:	70 f0       	brcs	.+28     	; 0x1f86 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1f6a:	46 39       	cpi	r20, 0x96	; 150
    1f6c:	70 f0       	brcs	.+28     	; 0x1f8a <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1f6e:	4f 3b       	cpi	r20, 0xBF	; 191
    1f70:	70 f0       	brcs	.+28     	; 0x1f8e <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1f72:	48 3e       	cpi	r20, 0xE8	; 232
    1f74:	70 f4       	brcc	.+28     	; 0x1f92 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1f76:	c6 e0       	ldi	r28, 0x06	; 6
    1f78:	0d c0       	rjmp	.+26     	; 0x1f94 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1f7a:	cf ef       	ldi	r28, 0xFF	; 255
    1f7c:	0b c0       	rjmp	.+22     	; 0x1f94 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1f7e:	c4 e0       	ldi	r28, 0x04	; 4
    1f80:	09 c0       	rjmp	.+18     	; 0x1f94 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1f82:	c3 e0       	ldi	r28, 0x03	; 3
    1f84:	07 c0       	rjmp	.+14     	; 0x1f94 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1f86:	c5 e0       	ldi	r28, 0x05	; 5
    1f88:	05 c0       	rjmp	.+10     	; 0x1f94 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1f8a:	c1 e0       	ldi	r28, 0x01	; 1
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1f8e:	c2 e0       	ldi	r28, 0x02	; 2
    1f90:	01 c0       	rjmp	.+2      	; 0x1f94 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1f92:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1f94:	f9 01       	movw	r30, r18
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e2 0f       	add	r30, r18
    1f9c:	f3 1f       	adc	r31, r19
    1f9e:	ee 0f       	add	r30, r30
    1fa0:	ff 1f       	adc	r31, r31
    1fa2:	e7 5b       	subi	r30, 0xB7	; 183
    1fa4:	fc 4f       	sbci	r31, 0xFC	; 252
    1fa6:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1fa8:	dc 17       	cp	r29, r28
    1faa:	09 f4       	brne	.+2      	; 0x1fae <__vector_21+0xf0>
    1fac:	48 c0       	rjmp	.+144    	; 0x203e <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1fae:	df 3f       	cpi	r29, 0xFF	; 255
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <__vector_21+0xfa>
    1fb2:	cf 3f       	cpi	r28, 0xFF	; 255
    1fb4:	09 f0       	breq	.+2      	; 0x1fb8 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1fb6:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1fb8:	f9 01       	movw	r30, r18
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e2 0f       	add	r30, r18
    1fc0:	f3 1f       	adc	r31, r19
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	e7 5b       	subi	r30, 0xB7	; 183
    1fc8:	fc 4f       	sbci	r31, 0xFC	; 252
    1fca:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1fcc:	df 3f       	cpi	r29, 0xFF	; 255
    1fce:	f9 f4       	brne	.+62     	; 0x200e <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    1fd0:	c9 01       	movw	r24, r18
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	fc 01       	movw	r30, r24
    1fd8:	e2 0f       	add	r30, r18
    1fda:	f3 1f       	adc	r31, r19
    1fdc:	ee 0f       	add	r30, r30
    1fde:	ff 1f       	adc	r31, r31
    1fe0:	e7 5b       	subi	r30, 0xB7	; 183
    1fe2:	fc 4f       	sbci	r31, 0xFC	; 252
    1fe4:	15 82       	std	Z+5, r1	; 0x05
    1fe6:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1fe8:	fc 01       	movw	r30, r24
    1fea:	e2 0f       	add	r30, r18
    1fec:	f3 1f       	adc	r31, r19
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	e7 5b       	subi	r30, 0xB7	; 183
    1ff4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ff6:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1ff8:	ec 2f       	mov	r30, r28
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	e2 5b       	subi	r30, 0xB2	; 178
    1ffe:	fc 4f       	sbci	r31, 0xFC	; 252
    2000:	80 81       	ld	r24, Z
    2002:	80 ff       	sbrs	r24, 0
    2004:	a7 c0       	rjmp	.+334    	; 0x2154 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    2006:	8c 2f       	mov	r24, r28
    2008:	0e 94 2a 2c 	call	0x5854	; 0x5854 <message_push>
    200c:	a3 c0       	rjmp	.+326    	; 0x2154 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    200e:	ed 2f       	mov	r30, r29
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	e2 5b       	subi	r30, 0xB2	; 178
    2014:	fc 4f       	sbci	r31, 0xFC	; 252
    2016:	80 81       	ld	r24, Z
    2018:	81 ff       	sbrs	r24, 1
    201a:	9c c0       	rjmp	.+312    	; 0x2154 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    201c:	f9 01       	movw	r30, r18
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	e2 0f       	add	r30, r18
    2024:	f3 1f       	adc	r31, r19
    2026:	ee 0f       	add	r30, r30
    2028:	ff 1f       	adc	r31, r31
    202a:	e7 5b       	subi	r30, 0xB7	; 183
    202c:	fc 4f       	sbci	r31, 0xFC	; 252
    202e:	83 81       	ldd	r24, Z+3	; 0x03
    2030:	83 70       	andi	r24, 0x03	; 3
    2032:	09 f0       	breq	.+2      	; 0x2036 <__vector_21+0x178>
    2034:	8f c0       	rjmp	.+286    	; 0x2154 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    2036:	8d 2f       	mov	r24, r29
    2038:	0e 94 2a 2c 	call	0x5854	; 0x5854 <message_push>
    203c:	8b c0       	rjmp	.+278    	; 0x2154 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    203e:	cf 3f       	cpi	r28, 0xFF	; 255
    2040:	09 f4       	brne	.+2      	; 0x2044 <__vector_21+0x186>
    2042:	88 c0       	rjmp	.+272    	; 0x2154 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    2044:	f9 01       	movw	r30, r18
    2046:	ee 0f       	add	r30, r30
    2048:	ff 1f       	adc	r31, r31
    204a:	df 01       	movw	r26, r30
    204c:	a2 0f       	add	r26, r18
    204e:	b3 1f       	adc	r27, r19
    2050:	aa 0f       	add	r26, r26
    2052:	bb 1f       	adc	r27, r27
    2054:	a7 5b       	subi	r26, 0xB7	; 183
    2056:	bc 4f       	sbci	r27, 0xFC	; 252
    2058:	14 96       	adiw	r26, 0x04	; 4
    205a:	8d 91       	ld	r24, X+
    205c:	9c 91       	ld	r25, X
    205e:	15 97       	sbiw	r26, 0x05	; 5
    2060:	01 96       	adiw	r24, 0x01	; 1
    2062:	15 96       	adiw	r26, 0x05	; 5
    2064:	9c 93       	st	X, r25
    2066:	8e 93       	st	-X, r24
    2068:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    206a:	fd 01       	movw	r30, r26
    206c:	84 81       	ldd	r24, Z+4	; 0x04
    206e:	95 81       	ldd	r25, Z+5	; 0x05
    2070:	8b 34       	cpi	r24, 0x4B	; 75
    2072:	91 05       	cpc	r25, r1
    2074:	a9 f4       	brne	.+42     	; 0x20a0 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    2076:	ed 2f       	mov	r30, r29
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	e2 5b       	subi	r30, 0xB2	; 178
    207c:	fc 4f       	sbci	r31, 0xFC	; 252
    207e:	80 81       	ld	r24, Z
    2080:	82 ff       	sbrs	r24, 2
    2082:	0e c0       	rjmp	.+28     	; 0x20a0 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    2084:	8c 2f       	mov	r24, r28
    2086:	80 68       	ori	r24, 0x80	; 128
    2088:	0e 94 2a 2c 	call	0x5854	; 0x5854 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    208c:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    2090:	86 e0       	ldi	r24, 0x06	; 6
    2092:	e8 9f       	mul	r30, r24
    2094:	f0 01       	movw	r30, r0
    2096:	11 24       	eor	r1, r1
    2098:	e7 5b       	subi	r30, 0xB7	; 183
    209a:	fc 4f       	sbci	r31, 0xFC	; 252
    209c:	82 e0       	ldi	r24, 0x02	; 2
    209e:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    20a0:	ed 2f       	mov	r30, r29
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	e2 5b       	subi	r30, 0xB2	; 178
    20a6:	fc 4f       	sbci	r31, 0xFC	; 252
    20a8:	80 81       	ld	r24, Z
    20aa:	83 ff       	sbrs	r24, 3
    20ac:	53 c0       	rjmp	.+166    	; 0x2154 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    20ae:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	fc 01       	movw	r30, r24
    20b6:	ee 0f       	add	r30, r30
    20b8:	ff 1f       	adc	r31, r31
    20ba:	e8 0f       	add	r30, r24
    20bc:	f9 1f       	adc	r31, r25
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	e7 5b       	subi	r30, 0xB7	; 183
    20c4:	fc 4f       	sbci	r31, 0xFC	; 252
    20c6:	23 81       	ldd	r18, Z+3	; 0x03
    20c8:	21 11       	cpse	r18, r1
    20ca:	1e c0       	rjmp	.+60     	; 0x2108 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    20cc:	fc 01       	movw	r30, r24
    20ce:	ee 0f       	add	r30, r30
    20d0:	ff 1f       	adc	r31, r31
    20d2:	e8 0f       	add	r30, r24
    20d4:	f9 1f       	adc	r31, r25
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	e7 5b       	subi	r30, 0xB7	; 183
    20dc:	fc 4f       	sbci	r31, 0xFC	; 252
    20de:	24 81       	ldd	r18, Z+4	; 0x04
    20e0:	35 81       	ldd	r19, Z+5	; 0x05
    20e2:	22 33       	cpi	r18, 0x32	; 50
    20e4:	31 05       	cpc	r19, r1
    20e6:	b1 f5       	brne	.+108    	; 0x2154 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    20e8:	26 e0       	ldi	r18, 0x06	; 6
    20ea:	28 9f       	mul	r18, r24
    20ec:	f0 01       	movw	r30, r0
    20ee:	29 9f       	mul	r18, r25
    20f0:	f0 0d       	add	r31, r0
    20f2:	11 24       	eor	r1, r1
    20f4:	e7 5b       	subi	r30, 0xB7	; 183
    20f6:	fc 4f       	sbci	r31, 0xFC	; 252
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    20fc:	15 82       	std	Z+5, r1	; 0x05
    20fe:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2100:	8c 2f       	mov	r24, r28
    2102:	0e 94 2a 2c 	call	0x5854	; 0x5854 <message_push>
    2106:	26 c0       	rjmp	.+76     	; 0x2154 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2108:	fc 01       	movw	r30, r24
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e8 0f       	add	r30, r24
    2110:	f9 1f       	adc	r31, r25
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	e7 5b       	subi	r30, 0xB7	; 183
    2118:	fc 4f       	sbci	r31, 0xFC	; 252
    211a:	23 81       	ldd	r18, Z+3	; 0x03
    211c:	21 30       	cpi	r18, 0x01	; 1
    211e:	d1 f4       	brne	.+52     	; 0x2154 <__vector_21+0x296>
    2120:	26 e0       	ldi	r18, 0x06	; 6
    2122:	28 9f       	mul	r18, r24
    2124:	f0 01       	movw	r30, r0
    2126:	29 9f       	mul	r18, r25
    2128:	f0 0d       	add	r31, r0
    212a:	11 24       	eor	r1, r1
    212c:	e7 5b       	subi	r30, 0xB7	; 183
    212e:	fc 4f       	sbci	r31, 0xFC	; 252
    2130:	24 81       	ldd	r18, Z+4	; 0x04
    2132:	35 81       	ldd	r19, Z+5	; 0x05
    2134:	2c 30       	cpi	r18, 0x0C	; 12
    2136:	31 05       	cpc	r19, r1
    2138:	69 f4       	brne	.+26     	; 0x2154 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    213a:	26 e0       	ldi	r18, 0x06	; 6
    213c:	28 9f       	mul	r18, r24
    213e:	f0 01       	movw	r30, r0
    2140:	29 9f       	mul	r18, r25
    2142:	f0 0d       	add	r31, r0
    2144:	11 24       	eor	r1, r1
    2146:	e7 5b       	subi	r30, 0xB7	; 183
    2148:	fc 4f       	sbci	r31, 0xFC	; 252
    214a:	15 82       	std	Z+5, r1	; 0x05
    214c:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    214e:	8c 2f       	mov	r24, r28
    2150:	0e 94 2a 2c 	call	0x5854	; 0x5854 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    2154:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2158:	8f 5f       	subi	r24, 0xFF	; 255
    215a:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    215e:	84 30       	cpi	r24, 0x04	; 4
    2160:	10 f0       	brcs	.+4      	; 0x2166 <__vector_21+0x2a8>
		adcNr = 0;
    2162:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    2166:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    216a:	81 11       	cpse	r24, r1
    216c:	0c c0       	rjmp	.+24     	; 0x2186 <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	fc 01       	movw	r30, r24
    2172:	ee 0f       	add	r30, r30
    2174:	ff 1f       	adc	r31, r31
    2176:	e8 0f       	add	r30, r24
    2178:	f9 1f       	adc	r31, r25
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e7 5b       	subi	r30, 0xB7	; 183
    2180:	fc 4f       	sbci	r31, 0xFC	; 252
    2182:	80 81       	ld	r24, Z
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    2186:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    2188:	98 2f       	mov	r25, r24
    218a:	9f 71       	andi	r25, 0x1F	; 31
    218c:	90 66       	ori	r25, 0x60	; 96
    218e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2192:	eb e7       	ldi	r30, 0x7B	; 123
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	20 81       	ld	r18, Z
    2198:	80 72       	andi	r24, 0x20	; 32
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	95 95       	asr	r25
    219e:	87 95       	ror	r24
    21a0:	95 95       	asr	r25
    21a2:	87 95       	ror	r24
    21a4:	92 2f       	mov	r25, r18
    21a6:	9f 7d       	andi	r25, 0xDF	; 223
    21a8:	89 2b       	or	r24, r25
    21aa:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    21ac:	ea e7       	ldi	r30, 0x7A	; 122
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	80 64       	ori	r24, 0x40	; 64
    21b4:	80 83       	st	Z, r24
    21b6:	b5 c0       	rjmp	.+362    	; 0x2322 <__stack+0x123>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    21b8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    21bc:	80 38       	cpi	r24, 0x80	; 128
    21be:	09 f4       	brne	.+2      	; 0x21c2 <__vector_21+0x304>
    21c0:	b0 c0       	rjmp	.+352    	; 0x2322 <__stack+0x123>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    21c2:	84 b3       	in	r24, 0x14	; 20
    21c4:	87 60       	ori	r24, 0x07	; 7
    21c6:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    21c8:	84 b3       	in	r24, 0x14	; 20
    21ca:	8b 7f       	andi	r24, 0xFB	; 251
    21cc:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    21ce:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    21d2:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    21d4:	e2 e0       	ldi	r30, 0x02	; 2
    21d6:	ea 95       	dec	r30
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <__vector_21+0x318>
    21da:	00 c0       	rjmp	.+0      	; 0x21dc <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    21dc:	84 b3       	in	r24, 0x14	; 20
    21de:	84 60       	ori	r24, 0x04	; 4
    21e0:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    21e2:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    21e4:	e1 e4       	ldi	r30, 0x41	; 65
    21e6:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    21e8:	83 81       	ldd	r24, Z+3	; 0x03
    21ea:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    21ec:	84 81       	ldd	r24, Z+4	; 0x04
    21ee:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    21f0:	84 b3       	in	r24, 0x14	; 20
    21f2:	81 60       	ori	r24, 0x01	; 1
    21f4:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    21f6:	81 81       	ldd	r24, Z+1	; 0x01
    21f8:	82 2b       	or	r24, r18
    21fa:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    21fc:	85 81       	ldd	r24, Z+5	; 0x05
    21fe:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    2200:	86 81       	ldd	r24, Z+6	; 0x06
    2202:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2204:	80 b1       	in	r24, 0x00	; 0
    2206:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2208:	84 b3       	in	r24, 0x14	; 20
    220a:	8e 7f       	andi	r24, 0xFE	; 254
    220c:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    220e:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    2210:	91 50       	subi	r25, 0x01	; 1
    2212:	51 f7       	brne	.-44     	; 0x21e8 <__vector_21+0x32a>
	asm("nop");
    2214:	00 00       	nop
	asm("nop");
    2216:	00 00       	nop
	PIPE_CLOCK_H
    2218:	84 b3       	in	r24, 0x14	; 20
    221a:	81 60       	ori	r24, 0x01	; 1
    221c:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    221e:	84 b3       	in	r24, 0x14	; 20
    2220:	8d 7f       	andi	r24, 0xFD	; 253
    2222:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    2224:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2228:	82 60       	ori	r24, 0x02	; 2
    222a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    222e:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    2230:	8b b1       	in	r24, 0x0b	; 11
    2232:	80 68       	ori	r24, 0x80	; 128
    2234:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    2236:	84 b3       	in	r24, 0x14	; 20
    2238:	82 60       	ori	r24, 0x02	; 2
    223a:	84 bb       	out	0x14, r24	; 20
    223c:	72 c0       	rjmp	.+228    	; 0x2322 <__stack+0x123>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    223e:	80 81       	ld	r24, Z
    2240:	81 50       	subi	r24, 0x01	; 1
    2242:	8e 3f       	cpi	r24, 0xFE	; 254
    2244:	38 f4       	brcc	.+14     	; 0x2254 <__stack+0x55>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    2246:	21 81       	ldd	r18, Z+1	; 0x01
    2248:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    224a:	25 30       	cpi	r18, 0x05	; 5
    224c:	10 f0       	brcs	.+4      	; 0x2252 <__stack+0x53>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    224e:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    2250:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    2252:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    2254:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2256:	9f 5f       	subi	r25, 0xFF	; 255
    2258:	03 c0       	rjmp	.+6      	; 0x2260 <__stack+0x61>
    225a:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    225c:	ef e2       	ldi	r30, 0x2F	; 47
    225e:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2260:	99 30       	cpi	r25, 0x09	; 9
    2262:	68 f3       	brcs	.-38     	; 0x223e <__stack+0x3f>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    2264:	e1 e4       	ldi	r30, 0x41	; 65
    2266:	f2 e0       	ldi	r31, 0x02	; 2
    2268:	80 81       	ld	r24, Z
    226a:	8f 5f       	subi	r24, 0xFF	; 255
    226c:	80 83       	st	Z, r24
    226e:	8a 3f       	cpi	r24, 0xFA	; 250
    2270:	09 f0       	breq	.+2      	; 0x2274 <__stack+0x75>
    2272:	57 c0       	rjmp	.+174    	; 0x2322 <__stack+0x123>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    2274:	8f ef       	ldi	r24, 0xFF	; 255
    2276:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    227a:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    227c:	81 81       	ldd	r24, Z+1	; 0x01
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	81 83       	std	Z+1, r24	; 0x01
    2282:	8c 33       	cpi	r24, 0x3C	; 60
    2284:	08 f4       	brcc	.+2      	; 0x2288 <__stack+0x89>
    2286:	4d c0       	rjmp	.+154    	; 0x2322 <__stack+0x123>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    2288:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    228a:	82 81       	ldd	r24, Z+2	; 0x02
    228c:	8f 5f       	subi	r24, 0xFF	; 255
    228e:	82 83       	std	Z+2, r24	; 0x02
    2290:	8c 33       	cpi	r24, 0x3C	; 60
    2292:	08 f4       	brcc	.+2      	; 0x2296 <__stack+0x97>
    2294:	46 c0       	rjmp	.+140    	; 0x2322 <__stack+0x123>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    2296:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    2298:	83 81       	ldd	r24, Z+3	; 0x03
    229a:	8f 5f       	subi	r24, 0xFF	; 255
    229c:	83 83       	std	Z+3, r24	; 0x03
    229e:	84 36       	cpi	r24, 0x64	; 100
    22a0:	08 f4       	brcc	.+2      	; 0x22a4 <__stack+0xa5>
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <__stack+0x123>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    22a4:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    22a8:	3c c0       	rjmp	.+120    	; 0x2322 <__stack+0x123>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    22aa:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    22ae:	80 38       	cpi	r24, 0x80	; 128
    22b0:	c1 f1       	breq	.+112    	; 0x2322 <__stack+0x123>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    22b2:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
    22b6:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    22ba:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    22bc:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    22be:	09 e4       	ldi	r16, 0x49	; 73
    22c0:	12 e0       	ldi	r17, 0x02	; 2
    22c2:	2c c0       	rjmp	.+88     	; 0x231c <__stack+0x11d>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    22c4:	f8 01       	movw	r30, r16
    22c6:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    22c8:	83 81       	ldd	r24, Z+3	; 0x03
    22ca:	9c 2f       	mov	r25, r28
    22cc:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    22ce:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    22d0:	84 81       	ldd	r24, Z+4	; 0x04
    22d2:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    22d4:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    22d6:	25 81       	ldd	r18, Z+5	; 0x05
    22d8:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    22da:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    22dc:	86 81       	ldd	r24, Z+6	; 0x06
    22de:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    22e0:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    22e2:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    22e4:	cd 23       	and	r28, r29
    22e6:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    22e8:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    22ea:	8d 2f       	mov	r24, r29
    22ec:	80 95       	com	r24
    22ee:	8c 23       	and	r24, r28
    22f0:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    22f2:	21 f0       	breq	.+8      	; 0x22fc <__stack+0xfd>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    22f4:	9f 2d       	mov	r25, r15
    22f6:	90 62       	ori	r25, 0x20	; 32
    22f8:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    22fc:	c0 95       	com	r28
    22fe:	cd 23       	and	r28, r29
    2300:	8c 2f       	mov	r24, r28
    2302:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2304:	19 f0       	breq	.+6      	; 0x230c <__stack+0x10d>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2306:	9f 2d       	mov	r25, r15
    2308:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <pipeMsgPush>
		}
		curPipe++;
    230c:	08 5f       	subi	r16, 0xF8	; 248
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    2310:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2314:	81 60       	ori	r24, 0x01	; 1
    2316:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    231a:	f3 94       	inc	r15
    231c:	ff e1       	ldi	r31, 0x1F	; 31
    231e:	ff 15       	cp	r31, r15
    2320:	88 f6       	brcc	.-94     	; 0x22c4 <__stack+0xc5>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    2322:	85 b1       	in	r24, 0x05	; 5
    2324:	8f 77       	andi	r24, 0x7F	; 127
    2326:	85 b9       	out	0x05, r24	; 5

}
    2328:	ff 91       	pop	r31
    232a:	ef 91       	pop	r30
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	bf 91       	pop	r27
    2332:	af 91       	pop	r26
    2334:	9f 91       	pop	r25
    2336:	8f 91       	pop	r24
    2338:	7f 91       	pop	r23
    233a:	6f 91       	pop	r22
    233c:	5f 91       	pop	r21
    233e:	4f 91       	pop	r20
    2340:	3f 91       	pop	r19
    2342:	2f 91       	pop	r18
    2344:	1f 91       	pop	r17
    2346:	0f 91       	pop	r16
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	0f 90       	pop	r0
    234e:	0b be       	out	0x3b, r0	; 59
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	0f 90       	pop	r0
    2356:	1f 90       	pop	r1
    2358:	18 95       	reti

0000235a <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    235a:	e8 2f       	mov	r30, r24
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	ee 0f       	add	r30, r30
    2360:	ff 1f       	adc	r31, r31
    2362:	ee 0f       	add	r30, r30
    2364:	ff 1f       	adc	r31, r31
    2366:	ee 0f       	add	r30, r30
    2368:	ff 1f       	adc	r31, r31
    236a:	e7 5b       	subi	r30, 0xB7	; 183
    236c:	fd 4f       	sbci	r31, 0xFD	; 253
    236e:	60 95       	com	r22
    2370:	81 81       	ldd	r24, Z+1	; 0x01
    2372:	68 23       	and	r22, r24
    2374:	61 83       	std	Z+1, r22	; 0x01
    2376:	08 95       	ret

00002378 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    2378:	e8 2f       	mov	r30, r24
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	ee 0f       	add	r30, r30
    237e:	ff 1f       	adc	r31, r31
    2380:	ee 0f       	add	r30, r30
    2382:	ff 1f       	adc	r31, r31
    2384:	ee 0f       	add	r30, r30
    2386:	ff 1f       	adc	r31, r31
    2388:	e7 5b       	subi	r30, 0xB7	; 183
    238a:	fd 4f       	sbci	r31, 0xFD	; 253
    238c:	81 81       	ldd	r24, Z+1	; 0x01
    238e:	68 2b       	or	r22, r24
    2390:	61 83       	std	Z+1, r22	; 0x01
    2392:	08 95       	ret

00002394 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2394:	8f ef       	ldi	r24, 0xFF	; 255
    2396:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    2398:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    239a:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    239c:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    239e:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    23a0:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    23a2:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    23a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    23a8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    23ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    23b0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    23b4:	8a b1       	in	r24, 0x0a	; 10
    23b6:	80 68       	ori	r24, 0x80	; 128
    23b8:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    23ba:	8b b1       	in	r24, 0x0b	; 11
    23bc:	8f 77       	andi	r24, 0x7F	; 127
    23be:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    23c0:	84 b1       	in	r24, 0x04	; 4
    23c2:	80 64       	ori	r24, 0x40	; 64
    23c4:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    23c6:	85 b1       	in	r24, 0x05	; 5
    23c8:	8f 7b       	andi	r24, 0xBF	; 191
    23ca:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    23cc:	84 b1       	in	r24, 0x04	; 4
    23ce:	80 63       	ori	r24, 0x30	; 48
    23d0:	84 b9       	out	0x04, r24	; 4
    23d2:	08 95       	ret

000023d4 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    23d4:	88 23       	and	r24, r24
    23d6:	34 f4       	brge	.+12     	; 0x23e4 <lcd_write_nibble+0x10>
    23d8:	e2 e0       	ldi	r30, 0x02	; 2
    23da:	f1 e0       	ldi	r31, 0x01	; 1
    23dc:	90 81       	ld	r25, Z
    23de:	90 61       	ori	r25, 0x10	; 16
    23e0:	90 83       	st	Z, r25
    23e2:	05 c0       	rjmp	.+10     	; 0x23ee <lcd_write_nibble+0x1a>
    23e4:	e2 e0       	ldi	r30, 0x02	; 2
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
    23e8:	90 81       	ld	r25, Z
    23ea:	9f 7e       	andi	r25, 0xEF	; 239
    23ec:	90 83       	st	Z, r25
    23ee:	86 ff       	sbrs	r24, 6
    23f0:	06 c0       	rjmp	.+12     	; 0x23fe <lcd_write_nibble+0x2a>
    23f2:	e2 e0       	ldi	r30, 0x02	; 2
    23f4:	f1 e0       	ldi	r31, 0x01	; 1
    23f6:	90 81       	ld	r25, Z
    23f8:	98 60       	ori	r25, 0x08	; 8
    23fa:	90 83       	st	Z, r25
    23fc:	05 c0       	rjmp	.+10     	; 0x2408 <lcd_write_nibble+0x34>
    23fe:	e2 e0       	ldi	r30, 0x02	; 2
    2400:	f1 e0       	ldi	r31, 0x01	; 1
    2402:	90 81       	ld	r25, Z
    2404:	97 7f       	andi	r25, 0xF7	; 247
    2406:	90 83       	st	Z, r25
    2408:	85 ff       	sbrs	r24, 5
    240a:	04 c0       	rjmp	.+8      	; 0x2414 <lcd_write_nibble+0x40>
    240c:	9e b1       	in	r25, 0x0e	; 14
    240e:	98 60       	ori	r25, 0x08	; 8
    2410:	9e b9       	out	0x0e, r25	; 14
    2412:	03 c0       	rjmp	.+6      	; 0x241a <lcd_write_nibble+0x46>
    2414:	9e b1       	in	r25, 0x0e	; 14
    2416:	97 7f       	andi	r25, 0xF7	; 247
    2418:	9e b9       	out	0x0e, r25	; 14
    241a:	84 ff       	sbrs	r24, 4
    241c:	04 c0       	rjmp	.+8      	; 0x2426 <lcd_write_nibble+0x52>
    241e:	84 b3       	in	r24, 0x14	; 20
    2420:	80 62       	ori	r24, 0x20	; 32
    2422:	84 bb       	out	0x14, r24	; 20
    2424:	03 c0       	rjmp	.+6      	; 0x242c <lcd_write_nibble+0x58>
    2426:	84 b3       	in	r24, 0x14	; 20
    2428:	8f 7d       	andi	r24, 0xDF	; 223
    242a:	84 bb       	out	0x14, r24	; 20
    242c:	e2 e0       	ldi	r30, 0x02	; 2
    242e:	f1 e0       	ldi	r31, 0x01	; 1
    2430:	80 81       	ld	r24, Z
    2432:	80 64       	ori	r24, 0x40	; 64
    2434:	80 83       	st	Z, r24
    2436:	85 e0       	ldi	r24, 0x05	; 5
    2438:	8a 95       	dec	r24
    243a:	f1 f7       	brne	.-4      	; 0x2438 <lcd_write_nibble+0x64>
    243c:	00 00       	nop
    243e:	80 81       	ld	r24, Z
    2440:	8f 7b       	andi	r24, 0xBF	; 191
    2442:	80 83       	st	Z, r24
    2444:	85 e0       	ldi	r24, 0x05	; 5
    2446:	8a 95       	dec	r24
    2448:	f1 f7       	brne	.-4      	; 0x2446 <lcd_write_nibble+0x72>
    244a:	00 00       	nop
    244c:	08 95       	ret

0000244e <lcd_write_character>:
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	d8 2f       	mov	r29, r24
    2454:	c5 b1       	in	r28, 0x05	; 5
    2456:	c0 73       	andi	r28, 0x30	; 48
    2458:	85 b1       	in	r24, 0x05	; 5
    245a:	8f 7c       	andi	r24, 0xCF	; 207
    245c:	80 61       	ori	r24, 0x10	; 16
    245e:	85 b9       	out	0x05, r24	; 5
    2460:	e2 e0       	ldi	r30, 0x02	; 2
    2462:	f1 e0       	ldi	r31, 0x01	; 1
    2464:	80 81       	ld	r24, Z
    2466:	80 62       	ori	r24, 0x20	; 32
    2468:	80 83       	st	Z, r24
    246a:	80 81       	ld	r24, Z
    246c:	8f 7b       	andi	r24, 0xBF	; 191
    246e:	80 83       	st	Z, r24
    2470:	8d 2f       	mov	r24, r29
    2472:	b0 df       	rcall	.-160    	; 0x23d4 <lcd_write_nibble>
    2474:	8d 2f       	mov	r24, r29
    2476:	82 95       	swap	r24
    2478:	80 7f       	andi	r24, 0xF0	; 240
    247a:	ac df       	rcall	.-168    	; 0x23d4 <lcd_write_nibble>
    247c:	8f ef       	ldi	r24, 0xFF	; 255
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <lcd_write_character+0x32>
    2484:	00 c0       	rjmp	.+0      	; 0x2486 <lcd_write_character+0x38>
    2486:	00 00       	nop
    2488:	85 b1       	in	r24, 0x05	; 5
    248a:	80 73       	andi	r24, 0x30	; 48
    248c:	c8 2b       	or	r28, r24
    248e:	c5 b9       	out	0x05, r28	; 5
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	08 95       	ret

00002496 <lcd_write_command>:
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	d8 2f       	mov	r29, r24
    249c:	c5 b1       	in	r28, 0x05	; 5
    249e:	c0 73       	andi	r28, 0x30	; 48
    24a0:	85 b1       	in	r24, 0x05	; 5
    24a2:	8f 7c       	andi	r24, 0xCF	; 207
    24a4:	80 61       	ori	r24, 0x10	; 16
    24a6:	85 b9       	out	0x05, r24	; 5
    24a8:	e2 e0       	ldi	r30, 0x02	; 2
    24aa:	f1 e0       	ldi	r31, 0x01	; 1
    24ac:	80 81       	ld	r24, Z
    24ae:	8f 7d       	andi	r24, 0xDF	; 223
    24b0:	80 83       	st	Z, r24
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 7b       	andi	r24, 0xBF	; 191
    24b6:	80 83       	st	Z, r24
    24b8:	8d 2f       	mov	r24, r29
    24ba:	8c df       	rcall	.-232    	; 0x23d4 <lcd_write_nibble>
    24bc:	8d 2f       	mov	r24, r29
    24be:	82 95       	swap	r24
    24c0:	80 7f       	andi	r24, 0xF0	; 240
    24c2:	88 df       	rcall	.-240    	; 0x23d4 <lcd_write_nibble>
    24c4:	d1 50       	subi	r29, 0x01	; 1
    24c6:	d2 30       	cpi	r29, 0x02	; 2
    24c8:	38 f4       	brcc	.+14     	; 0x24d8 <lcd_write_command+0x42>
    24ca:	8f e0       	ldi	r24, 0x0F	; 15
    24cc:	97 e2       	ldi	r25, 0x27	; 39
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <lcd_write_command+0x38>
    24d2:	00 c0       	rjmp	.+0      	; 0x24d4 <lcd_write_command+0x3e>
    24d4:	00 00       	nop
    24d6:	06 c0       	rjmp	.+12     	; 0x24e4 <lcd_write_command+0x4e>
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	01 97       	sbiw	r24, 0x01	; 1
    24de:	f1 f7       	brne	.-4      	; 0x24dc <lcd_write_command+0x46>
    24e0:	00 c0       	rjmp	.+0      	; 0x24e2 <lcd_write_command+0x4c>
    24e2:	00 00       	nop
    24e4:	85 b1       	in	r24, 0x05	; 5
    24e6:	80 73       	andi	r24, 0x30	; 48
    24e8:	c8 2b       	or	r28, r24
    24ea:	c5 b9       	out	0x05, r28	; 5
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <lcd_init>:
    24f2:	cf 93       	push	r28
    24f4:	c5 b1       	in	r28, 0x05	; 5
    24f6:	c0 73       	andi	r28, 0x30	; 48
    24f8:	85 b1       	in	r24, 0x05	; 5
    24fa:	8f 7c       	andi	r24, 0xCF	; 207
    24fc:	80 61       	ori	r24, 0x10	; 16
    24fe:	85 b9       	out	0x05, r24	; 5
    2500:	e1 e0       	ldi	r30, 0x01	; 1
    2502:	f1 e0       	ldi	r31, 0x01	; 1
    2504:	80 81       	ld	r24, Z
    2506:	80 61       	ori	r24, 0x10	; 16
    2508:	80 83       	st	Z, r24
    250a:	80 81       	ld	r24, Z
    250c:	88 60       	ori	r24, 0x08	; 8
    250e:	80 83       	st	Z, r24
    2510:	8d b1       	in	r24, 0x0d	; 13
    2512:	88 60       	ori	r24, 0x08	; 8
    2514:	8d b9       	out	0x0d, r24	; 13
    2516:	83 b3       	in	r24, 0x13	; 19
    2518:	80 62       	ori	r24, 0x20	; 32
    251a:	83 bb       	out	0x13, r24	; 19
    251c:	80 81       	ld	r24, Z
    251e:	80 64       	ori	r24, 0x40	; 64
    2520:	80 83       	st	Z, r24
    2522:	80 81       	ld	r24, Z
    2524:	80 62       	ori	r24, 0x20	; 32
    2526:	80 83       	st	Z, r24
    2528:	2f ef       	ldi	r18, 0xFF	; 255
    252a:	81 ee       	ldi	r24, 0xE1	; 225
    252c:	94 e0       	ldi	r25, 0x04	; 4
    252e:	21 50       	subi	r18, 0x01	; 1
    2530:	80 40       	sbci	r24, 0x00	; 0
    2532:	90 40       	sbci	r25, 0x00	; 0
    2534:	e1 f7       	brne	.-8      	; 0x252e <lcd_init+0x3c>
    2536:	00 c0       	rjmp	.+0      	; 0x2538 <lcd_init+0x46>
    2538:	00 00       	nop
    253a:	e2 e0       	ldi	r30, 0x02	; 2
    253c:	f1 e0       	ldi	r31, 0x01	; 1
    253e:	80 81       	ld	r24, Z
    2540:	8f 7d       	andi	r24, 0xDF	; 223
    2542:	80 83       	st	Z, r24
    2544:	80 81       	ld	r24, Z
    2546:	8f 7b       	andi	r24, 0xBF	; 191
    2548:	80 83       	st	Z, r24
    254a:	80 e3       	ldi	r24, 0x30	; 48
    254c:	43 df       	rcall	.-378    	; 0x23d4 <lcd_write_nibble>
    254e:	8f e1       	ldi	r24, 0x1F	; 31
    2550:	9e e4       	ldi	r25, 0x4E	; 78
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	f1 f7       	brne	.-4      	; 0x2552 <lcd_init+0x60>
    2556:	00 c0       	rjmp	.+0      	; 0x2558 <lcd_init+0x66>
    2558:	00 00       	nop
    255a:	80 e3       	ldi	r24, 0x30	; 48
    255c:	3b df       	rcall	.-394    	; 0x23d4 <lcd_write_nibble>
    255e:	8f e1       	ldi	r24, 0x1F	; 31
    2560:	9e e4       	ldi	r25, 0x4E	; 78
    2562:	01 97       	sbiw	r24, 0x01	; 1
    2564:	f1 f7       	brne	.-4      	; 0x2562 <lcd_init+0x70>
    2566:	00 c0       	rjmp	.+0      	; 0x2568 <lcd_init+0x76>
    2568:	00 00       	nop
    256a:	80 e3       	ldi	r24, 0x30	; 48
    256c:	33 df       	rcall	.-410    	; 0x23d4 <lcd_write_nibble>
    256e:	8f e1       	ldi	r24, 0x1F	; 31
    2570:	9e e4       	ldi	r25, 0x4E	; 78
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <lcd_init+0x80>
    2576:	00 c0       	rjmp	.+0      	; 0x2578 <lcd_init+0x86>
    2578:	00 00       	nop
    257a:	88 e2       	ldi	r24, 0x28	; 40
    257c:	2b df       	rcall	.-426    	; 0x23d4 <lcd_write_nibble>
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <lcd_init+0x90>
    2586:	00 c0       	rjmp	.+0      	; 0x2588 <lcd_init+0x96>
    2588:	00 00       	nop
    258a:	88 e2       	ldi	r24, 0x28	; 40
    258c:	84 df       	rcall	.-248    	; 0x2496 <lcd_write_command>
    258e:	88 e0       	ldi	r24, 0x08	; 8
    2590:	82 df       	rcall	.-252    	; 0x2496 <lcd_write_command>
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	80 df       	rcall	.-256    	; 0x2496 <lcd_write_command>
    2596:	86 e0       	ldi	r24, 0x06	; 6
    2598:	7e df       	rcall	.-260    	; 0x2496 <lcd_write_command>
    259a:	8c e0       	ldi	r24, 0x0C	; 12
    259c:	7c df       	rcall	.-264    	; 0x2496 <lcd_write_command>
    259e:	85 b1       	in	r24, 0x05	; 5
    25a0:	80 73       	andi	r24, 0x30	; 48
    25a2:	c8 2b       	or	r28, r24
    25a4:	c5 b9       	out	0x05, r28	; 5
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <lcd_goto>:
    25aa:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    25ae:	80 58       	subi	r24, 0x80	; 128
    25b0:	72 cf       	rjmp	.-284    	; 0x2496 <lcd_write_command>
    25b2:	08 95       	ret

000025b4 <lcd_clrscr>:
    25b4:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	6d df       	rcall	.-294    	; 0x2496 <lcd_write_command>
    25bc:	80 e0       	ldi	r24, 0x00	; 0
    25be:	e8 e5       	ldi	r30, 0x58	; 88
    25c0:	f3 e0       	ldi	r31, 0x03	; 3
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <lcd_clrscr+0x18>
    25c4:	90 e2       	ldi	r25, 0x20	; 32
    25c6:	90 83       	st	Z, r25
    25c8:	8f 5f       	subi	r24, 0xFF	; 255
    25ca:	31 96       	adiw	r30, 0x01	; 1
    25cc:	80 35       	cpi	r24, 0x50	; 80
    25ce:	d0 f3       	brcs	.-12     	; 0x25c4 <lcd_clrscr+0x10>
    25d0:	08 95       	ret

000025d2 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    25d2:	84 31       	cpi	r24, 0x14	; 20
    25d4:	98 f0       	brcs	.+38     	; 0x25fc <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    25d6:	90 ec       	ldi	r25, 0xC0	; 192
    25d8:	98 0f       	add	r25, r24
    25da:	94 31       	cpi	r25, 0x14	; 20
    25dc:	10 f4       	brcc	.+4      	; 0x25e2 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    25de:	8c 52       	subi	r24, 0x2C	; 44
    25e0:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    25e2:	9c ee       	ldi	r25, 0xEC	; 236
    25e4:	98 0f       	add	r25, r24
    25e6:	94 31       	cpi	r25, 0x14	; 20
    25e8:	10 f4       	brcc	.+4      	; 0x25ee <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    25ea:	8c 5e       	subi	r24, 0xEC	; 236
    25ec:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    25ee:	9c ea       	ldi	r25, 0xAC	; 172
    25f0:	98 0f       	add	r25, r24
    25f2:	94 31       	cpi	r25, 0x14	; 20
    25f4:	10 f4       	brcc	.+4      	; 0x25fa <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    25f6:	88 51       	subi	r24, 0x18	; 24
    25f8:	08 95       	ret
	}
	return 0xFF;
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    25fc:	08 95       	ret

000025fe <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    2604:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2608:	8c 2f       	mov	r24, r28
    260a:	e3 df       	rcall	.-58     	; 0x25d2 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    260c:	8f 3f       	cpi	r24, 0xFF	; 255
    260e:	31 f1       	breq	.+76     	; 0x265c <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    2610:	d1 3a       	cpi	r29, 0xA1	; 161
    2612:	81 f0       	breq	.+32     	; 0x2634 <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    2614:	d0 38       	cpi	r29, 0x80	; 128
    2616:	81 f0       	breq	.+32     	; 0x2638 <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2618:	d5 3a       	cpi	r29, 0xA5	; 165
    261a:	81 f0       	breq	.+32     	; 0x263c <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    261c:	da 30       	cpi	r29, 0x0A	; 10
    261e:	81 f0       	breq	.+32     	; 0x2640 <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    2620:	d2 3e       	cpi	r29, 0xE2	; 226
    2622:	81 f0       	breq	.+32     	; 0x2644 <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    2624:	d5 3f       	cpi	r29, 0xF5	; 245
    2626:	81 f0       	breq	.+32     	; 0x2648 <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2628:	df 3e       	cpi	r29, 0xEF	; 239
    262a:	81 f0       	breq	.+32     	; 0x264c <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    262c:	d1 3e       	cpi	r29, 0xE1	; 225
    262e:	81 f0       	breq	.+32     	; 0x2650 <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    2630:	9d 2f       	mov	r25, r29
    2632:	0f c0       	rjmp	.+30     	; 0x2652 <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    2634:	90 e2       	ldi	r25, 0x20	; 32
    2636:	0d c0       	rjmp	.+26     	; 0x2652 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    2638:	90 e2       	ldi	r25, 0x20	; 32
    263a:	0b c0       	rjmp	.+22     	; 0x2652 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    263c:	94 e1       	ldi	r25, 0x14	; 20
    263e:	09 c0       	rjmp	.+18     	; 0x2652 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    2640:	95 e1       	ldi	r25, 0x15	; 21
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    2644:	93 e1       	ldi	r25, 0x13	; 19
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    2648:	92 e1       	ldi	r25, 0x12	; 18
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    264c:	91 e1       	ldi	r25, 0x11	; 17
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    2650:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    2652:	e8 2f       	mov	r30, r24
    2654:	f0 e0       	ldi	r31, 0x00	; 0
    2656:	e8 5a       	subi	r30, 0xA8	; 168
    2658:	fc 4f       	sbci	r31, 0xFC	; 252
    265a:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    265c:	cf 5f       	subi	r28, 0xFF	; 255
    265e:	cf 77       	andi	r28, 0x7F	; 127
    2660:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    2664:	8d 2f       	mov	r24, r29
    2666:	f3 de       	rcall	.-538    	; 0x244e <lcd_write_character>
}
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	08 95       	ret

0000266e <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    266e:	cf 93       	push	r28
    2670:	df 93       	push	r29
    2672:	fc 01       	movw	r30, r24
	if (s != NULL){
    2674:	89 2b       	or	r24, r25
    2676:	19 f4       	brne	.+6      	; 0x267e <lcd_puts+0x10>
    2678:	07 c0       	rjmp	.+14     	; 0x2688 <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    267a:	c1 df       	rcall	.-126    	; 0x25fe <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    267c:	fe 01       	movw	r30, r28
    267e:	ef 01       	movw	r28, r30
    2680:	21 96       	adiw	r28, 0x01	; 1
    2682:	80 81       	ld	r24, Z
    2684:	81 11       	cpse	r24, r1
    2686:	f9 cf       	rjmp	.-14     	; 0x267a <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	08 95       	ret

0000268e <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    2694:	89 2b       	or	r24, r25
    2696:	19 f4       	brne	.+6      	; 0x269e <lcd_puts_P+0x10>
    2698:	07 c0       	rjmp	.+14     	; 0x26a8 <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    269a:	b1 df       	rcall	.-158    	; 0x25fe <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    269c:	fe 01       	movw	r30, r28
    269e:	ef 01       	movw	r28, r30
    26a0:	21 96       	adiw	r28, 0x01	; 1
    26a2:	84 91       	lpm	r24, Z
    26a4:	81 11       	cpse	r24, r1
    26a6:	f9 cf       	rjmp	.-14     	; 0x269a <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	08 95       	ret

000026ae <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    26ae:	82 ed       	ldi	r24, 0xD2	; 210
    26b0:	93 e0       	ldi	r25, 0x03	; 3
    26b2:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    26b6:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    26ba:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    26be:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    26c2:	08 95       	ret

000026c4 <log_count>:
    26c4:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    26c8:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    26cc:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    26d0:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    26d4:	82 17       	cp	r24, r18
    26d6:	93 07       	cpc	r25, r19
    26d8:	48 f0       	brcs	.+18     	; 0x26ec <log_count+0x28>
    26da:	82 1b       	sub	r24, r18
    26dc:	93 0b       	sbc	r25, r19
    26de:	95 95       	asr	r25
    26e0:	87 95       	ror	r24
    26e2:	9d ec       	ldi	r25, 0xCD	; 205
    26e4:	89 9f       	mul	r24, r25
    26e6:	80 2d       	mov	r24, r0
    26e8:	11 24       	eor	r1, r1
    26ea:	08 95       	ret
    26ec:	80 57       	subi	r24, 0x70	; 112
    26ee:	9e 4f       	sbci	r25, 0xFE	; 254
    26f0:	82 1b       	sub	r24, r18
    26f2:	93 0b       	sbc	r25, r19
    26f4:	95 95       	asr	r25
    26f6:	87 95       	ror	r24
    26f8:	9d ec       	ldi	r25, 0xCD	; 205
    26fa:	89 9f       	mul	r24, r25
    26fc:	80 2d       	mov	r24, r0
    26fe:	11 24       	eor	r1, r1
    2700:	08 95       	ret

00002702 <log_getLog>:
    2702:	cf 93       	push	r28
    2704:	c8 2f       	mov	r28, r24
    2706:	de df       	rcall	.-68     	; 0x26c4 <log_count>
    2708:	c8 17       	cp	r28, r24
    270a:	f8 f4       	brcc	.+62     	; 0x274a <log_getLog+0x48>
    270c:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    2710:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    2714:	8c 2f       	mov	r24, r28
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9c 01       	movw	r18, r24
    271a:	22 0f       	add	r18, r18
    271c:	33 1f       	adc	r19, r19
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	28 0f       	add	r18, r24
    272c:	39 1f       	adc	r19, r25
    272e:	ca 01       	movw	r24, r20
    2730:	82 0f       	add	r24, r18
    2732:	93 1f       	adc	r25, r19
    2734:	65 e0       	ldi	r22, 0x05	; 5
    2736:	88 35       	cpi	r24, 0x58	; 88
    2738:	96 07       	cpc	r25, r22
    273a:	49 f0       	breq	.+18     	; 0x274e <log_getLog+0x4c>
    273c:	40 f0       	brcs	.+16     	; 0x274e <log_getLog+0x4c>
    273e:	20 59       	subi	r18, 0x90	; 144
    2740:	31 40       	sbci	r19, 0x01	; 1
    2742:	ca 01       	movw	r24, r20
    2744:	82 0f       	add	r24, r18
    2746:	93 1f       	adc	r25, r19
    2748:	02 c0       	rjmp	.+4      	; 0x274e <log_getLog+0x4c>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	cf 91       	pop	r28
    2750:	08 95       	ret

00002752 <log_getErrorText>:
    2752:	d7 df       	rcall	.-82     	; 0x2702 <log_getLog>
    2754:	00 97       	sbiw	r24, 0x00	; 0
    2756:	f1 f1       	breq	.+124    	; 0x27d4 <log_getErrorText+0x82>
    2758:	fc 01       	movw	r30, r24
    275a:	36 81       	ldd	r19, Z+6	; 0x06
    275c:	67 81       	ldd	r22, Z+7	; 0x07
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	34 c0       	rjmp	.+104    	; 0x27ca <log_getErrorText+0x78>
    2762:	42 2f       	mov	r20, r18
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	fa 01       	movw	r30, r20
    2768:	ee 0f       	add	r30, r30
    276a:	ff 1f       	adc	r31, r31
    276c:	cf 01       	movw	r24, r30
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	e8 0f       	add	r30, r24
    277c:	f9 1f       	adc	r31, r25
    277e:	e6 59       	subi	r30, 0x96	; 150
    2780:	fe 4f       	sbci	r31, 0xFE	; 254
    2782:	84 91       	lpm	r24, Z
    2784:	38 13       	cpse	r19, r24
    2786:	20 c0       	rjmp	.+64     	; 0x27c8 <log_getErrorText+0x76>
    2788:	fa 01       	movw	r30, r20
    278a:	ee 0f       	add	r30, r30
    278c:	ff 1f       	adc	r31, r31
    278e:	cf 01       	movw	r24, r30
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	e8 0f       	add	r30, r24
    279e:	f9 1f       	adc	r31, r25
    27a0:	e5 59       	subi	r30, 0x95	; 149
    27a2:	fe 4f       	sbci	r31, 0xFE	; 254
    27a4:	84 91       	lpm	r24, Z
    27a6:	68 13       	cpse	r22, r24
    27a8:	0f c0       	rjmp	.+30     	; 0x27c8 <log_getErrorText+0x76>
    27aa:	44 0f       	add	r20, r20
    27ac:	55 1f       	adc	r21, r21
    27ae:	ca 01       	movw	r24, r20
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	88 0f       	add	r24, r24
    27b6:	99 1f       	adc	r25, r25
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	48 0f       	add	r20, r24
    27be:	59 1f       	adc	r21, r25
    27c0:	ca 01       	movw	r24, r20
    27c2:	84 59       	subi	r24, 0x94	; 148
    27c4:	9e 4f       	sbci	r25, 0xFE	; 254
    27c6:	08 95       	ret
    27c8:	2f 5f       	subi	r18, 0xFF	; 255
    27ca:	20 31       	cpi	r18, 0x10	; 16
    27cc:	50 f2       	brcs	.-108    	; 0x2762 <log_getErrorText+0x10>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	08 95       	ret
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	08 95       	ret

000027da <logCheckUnreadErrorLogs>:
    27da:	cf 93       	push	r28
    27dc:	73 df       	rcall	.-282    	; 0x26c4 <log_count>
    27de:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    27e2:	81 11       	cpse	r24, r1
    27e4:	14 c0       	rjmp	.+40     	; 0x280e <logCheckUnreadErrorLogs+0x34>
    27e6:	17 c0       	rjmp	.+46     	; 0x2816 <logCheckUnreadErrorLogs+0x3c>
    27e8:	8c 2f       	mov	r24, r28
    27ea:	8b df       	rcall	.-234    	; 0x2702 <log_getLog>
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	61 f0       	breq	.+24     	; 0x2808 <logCheckUnreadErrorLogs+0x2e>
    27f0:	fc 01       	movw	r30, r24
    27f2:	24 81       	ldd	r18, Z+4	; 0x04
    27f4:	20 32       	cpi	r18, 0x20	; 32
    27f6:	51 f0       	breq	.+20     	; 0x280c <logCheckUnreadErrorLogs+0x32>
    27f8:	95 81       	ldd	r25, Z+5	; 0x05
    27fa:	8c 2f       	mov	r24, r28
    27fc:	95 34       	cpi	r25, 0x45	; 69
    27fe:	39 f4       	brne	.+14     	; 0x280e <logCheckUnreadErrorLogs+0x34>
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <logCheckUnreadErrorLogs+0x3c>
    2808:	8c 2f       	mov	r24, r28
    280a:	01 c0       	rjmp	.+2      	; 0x280e <logCheckUnreadErrorLogs+0x34>
    280c:	8c 2f       	mov	r24, r28
    280e:	cf ef       	ldi	r28, 0xFF	; 255
    2810:	c8 0f       	add	r28, r24
    2812:	81 11       	cpse	r24, r1
    2814:	e9 cf       	rjmp	.-46     	; 0x27e8 <logCheckUnreadErrorLogs+0xe>
    2816:	cf 91       	pop	r28
    2818:	08 95       	ret

0000281a <log_getShortTextFromPtr>:
    281a:	1f 93       	push	r17
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	09 f4       	brne	.+2      	; 0x2826 <log_getShortTextFromPtr+0xc>
    2824:	7b c0       	rjmp	.+246    	; 0x291c <log_getShortTextFromPtr+0x102>
    2826:	16 2f       	mov	r17, r22
    2828:	ec 01       	movw	r28, r24
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	88 23       	and	r24, r24
    282e:	79 f0       	breq	.+30     	; 0x284e <log_getShortTextFromPtr+0x34>
    2830:	6a ea       	ldi	r22, 0xAA	; 170
    2832:	73 e0       	ldi	r23, 0x03	; 3
    2834:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    2838:	bc 01       	movw	r22, r24
    283a:	6f 5f       	subi	r22, 0xFF	; 255
    283c:	7f 4f       	sbci	r23, 0xFF	; 255
    283e:	28 e6       	ldi	r18, 0x68	; 104
    2840:	fc 01       	movw	r30, r24
    2842:	20 83       	st	Z, r18
    2844:	8a 81       	ldd	r24, Y+2	; 0x02
    2846:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    284a:	dc 01       	movw	r26, r24
    284c:	2f c0       	rjmp	.+94     	; 0x28ac <log_getShortTextFromPtr+0x92>
    284e:	8a 81       	ldd	r24, Y+2	; 0x02
    2850:	88 23       	and	r24, r24
    2852:	79 f0       	breq	.+30     	; 0x2872 <log_getShortTextFromPtr+0x58>
    2854:	6a ea       	ldi	r22, 0xAA	; 170
    2856:	73 e0       	ldi	r23, 0x03	; 3
    2858:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    285c:	bc 01       	movw	r22, r24
    285e:	6f 5f       	subi	r22, 0xFF	; 255
    2860:	7f 4f       	sbci	r23, 0xFF	; 255
    2862:	2d e6       	ldi	r18, 0x6D	; 109
    2864:	fc 01       	movw	r30, r24
    2866:	20 83       	st	Z, r18
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    286e:	dc 01       	movw	r26, r24
    2870:	1d c0       	rjmp	.+58     	; 0x28ac <log_getShortTextFromPtr+0x92>
    2872:	6a ea       	ldi	r22, 0xAA	; 170
    2874:	73 e0       	ldi	r23, 0x03	; 3
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    287c:	fc 01       	movw	r30, r24
    287e:	83 e7       	ldi	r24, 0x73	; 115
    2880:	80 83       	st	Z, r24
    2882:	98 81       	ld	r25, Y
    2884:	99 0f       	add	r25, r25
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	02 c0       	rjmp	.+4      	; 0x288e <log_getShortTextFromPtr+0x74>
    288a:	99 51       	subi	r25, 0x19	; 25
    288c:	2f 5f       	subi	r18, 0xFF	; 255
    288e:	99 31       	cpi	r25, 0x19	; 25
    2890:	e0 f7       	brcc	.-8      	; 0x288a <log_getShortTextFromPtr+0x70>
    2892:	20 5d       	subi	r18, 0xD0	; 208
    2894:	21 83       	std	Z+1, r18	; 0x01
    2896:	99 0f       	add	r25, r25
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	02 c0       	rjmp	.+4      	; 0x28a0 <log_getShortTextFromPtr+0x86>
    289c:	95 50       	subi	r25, 0x05	; 5
    289e:	2f 5f       	subi	r18, 0xFF	; 255
    28a0:	95 30       	cpi	r25, 0x05	; 5
    28a2:	e0 f7       	brcc	.-8      	; 0x289c <log_getShortTextFromPtr+0x82>
    28a4:	df 01       	movw	r26, r30
    28a6:	13 96       	adiw	r26, 0x03	; 3
    28a8:	20 5d       	subi	r18, 0xD0	; 208
    28aa:	22 83       	std	Z+2, r18	; 0x02
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	90 34       	cpi	r25, 0x40	; 64
    28b0:	51 f0       	breq	.+20     	; 0x28c6 <log_getShortTextFromPtr+0xac>
    28b2:	90 38       	cpi	r25, 0x80	; 128
    28b4:	19 f0       	breq	.+6      	; 0x28bc <log_getShortTextFromPtr+0xa2>
    28b6:	90 32       	cpi	r25, 0x20	; 32
    28b8:	81 f4       	brne	.+32     	; 0x28da <log_getShortTextFromPtr+0xc0>
    28ba:	0a c0       	rjmp	.+20     	; 0x28d0 <log_getShortTextFromPtr+0xb6>
    28bc:	fd 01       	movw	r30, r26
    28be:	31 96       	adiw	r30, 0x01	; 1
    28c0:	8a e2       	ldi	r24, 0x2A	; 42
    28c2:	8c 93       	st	X, r24
    28c4:	0e c0       	rjmp	.+28     	; 0x28e2 <log_getShortTextFromPtr+0xc8>
    28c6:	fd 01       	movw	r30, r26
    28c8:	31 96       	adiw	r30, 0x01	; 1
    28ca:	85 ea       	ldi	r24, 0xA5	; 165
    28cc:	8c 93       	st	X, r24
    28ce:	09 c0       	rjmp	.+18     	; 0x28e2 <log_getShortTextFromPtr+0xc8>
    28d0:	fd 01       	movw	r30, r26
    28d2:	31 96       	adiw	r30, 0x01	; 1
    28d4:	80 e2       	ldi	r24, 0x20	; 32
    28d6:	8c 93       	st	X, r24
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <log_getShortTextFromPtr+0xc8>
    28da:	fd 01       	movw	r30, r26
    28dc:	31 96       	adiw	r30, 0x01	; 1
    28de:	8f e3       	ldi	r24, 0x3F	; 63
    28e0:	8c 93       	st	X, r24
    28e2:	bf 01       	movw	r22, r30
    28e4:	6f 5f       	subi	r22, 0xFF	; 255
    28e6:	7f 4f       	sbci	r23, 0xFF	; 255
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	80 83       	st	Z, r24
    28ec:	8e 81       	ldd	r24, Y+6	; 0x06
    28ee:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    28f2:	bc 01       	movw	r22, r24
    28f4:	8f 81       	ldd	r24, Y+7	; 0x07
    28f6:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    28fa:	bc 01       	movw	r22, r24
    28fc:	6f 5f       	subi	r22, 0xFF	; 255
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	2d e2       	ldi	r18, 0x2D	; 45
    2902:	fc 01       	movw	r30, r24
    2904:	20 83       	st	Z, r18
    2906:	88 85       	ldd	r24, Y+8	; 0x08
    2908:	99 85       	ldd	r25, Y+9	; 0x09
    290a:	0e 94 7f 39 	call	0x72fe	; 0x72fe <putChar_long>
    290e:	fc 01       	movw	r30, r24
    2910:	10 82       	st	Z, r1
    2912:	1f 3f       	cpi	r17, 0xFF	; 255
    2914:	41 f0       	breq	.+16     	; 0x2926 <log_getShortTextFromPtr+0x10c>
    2916:	1c 83       	std	Y+4, r17	; 0x04
    2918:	60 df       	rcall	.-320    	; 0x27da <logCheckUnreadErrorLogs>
    291a:	05 c0       	rjmp	.+10     	; 0x2926 <log_getShortTextFromPtr+0x10c>
    291c:	ea ea       	ldi	r30, 0xAA	; 170
    291e:	f3 e0       	ldi	r31, 0x03	; 3
    2920:	8d e2       	ldi	r24, 0x2D	; 45
    2922:	80 83       	st	Z, r24
    2924:	11 82       	std	Z+1, r1	; 0x01
    2926:	8a ea       	ldi	r24, 0xAA	; 170
    2928:	93 e0       	ldi	r25, 0x03	; 3
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	08 95       	ret

00002932 <log_put>:
    2932:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2936:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    293a:	a1 e4       	ldi	r26, 0x41	; 65
    293c:	b2 e0       	ldi	r27, 0x02	; 2
    293e:	9c 91       	ld	r25, X
    2940:	90 83       	st	Z, r25
    2942:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2946:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    294a:	11 96       	adiw	r26, 0x01	; 1
    294c:	9c 91       	ld	r25, X
    294e:	11 97       	sbiw	r26, 0x01	; 1
    2950:	91 83       	std	Z+1, r25	; 0x01
    2952:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2956:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    295a:	12 96       	adiw	r26, 0x02	; 2
    295c:	9c 91       	ld	r25, X
    295e:	12 97       	sbiw	r26, 0x02	; 2
    2960:	92 83       	std	Z+2, r25	; 0x02
    2962:	13 96       	adiw	r26, 0x03	; 3
    2964:	9c 91       	ld	r25, X
    2966:	93 83       	std	Z+3, r25	; 0x03
    2968:	25 83       	std	Z+5, r18	; 0x05
    296a:	86 83       	std	Z+6, r24	; 0x06
    296c:	67 83       	std	Z+7, r22	; 0x07
    296e:	51 87       	std	Z+9, r21	; 0x09
    2970:	40 87       	std	Z+8, r20	; 0x08
    2972:	80 e8       	ldi	r24, 0x80	; 128
    2974:	84 83       	std	Z+4, r24	; 0x04
    2976:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    297a:	8f 3f       	cpi	r24, 0xFF	; 255
    297c:	81 f4       	brne	.+32     	; 0x299e <log_put+0x6c>
    297e:	84 e6       	ldi	r24, 0x64	; 100
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    2986:	6f ef       	ldi	r22, 0xFF	; 255
    2988:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    298c:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2990:	44 df       	rcall	.-376    	; 0x281a <log_getShortTextFromPtr>
    2992:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    2996:	8b e7       	ldi	r24, 0x7B	; 123
    2998:	92 e1       	ldi	r25, 0x12	; 18
    299a:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    299e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    29a2:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    29a6:	0a 96       	adiw	r24, 0x0a	; 10
    29a8:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    29ac:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    29b0:	88 55       	subi	r24, 0x58	; 88
    29b2:	95 40       	sbci	r25, 0x05	; 5
    29b4:	39 f0       	breq	.+14     	; 0x29c4 <log_put+0x92>
    29b6:	30 f0       	brcs	.+12     	; 0x29c4 <log_put+0x92>
    29b8:	82 ed       	ldi	r24, 0xD2	; 210
    29ba:	93 e0       	ldi	r25, 0x03	; 3
    29bc:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    29c0:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    29c4:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    29c8:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    29cc:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    29d0:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    29d4:	28 17       	cp	r18, r24
    29d6:	39 07       	cpc	r19, r25
    29d8:	79 f4       	brne	.+30     	; 0x29f8 <log_put+0xc6>
    29da:	0a 96       	adiw	r24, 0x0a	; 10
    29dc:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    29e0:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    29e4:	88 55       	subi	r24, 0x58	; 88
    29e6:	95 40       	sbci	r25, 0x05	; 5
    29e8:	39 f0       	breq	.+14     	; 0x29f8 <log_put+0xc6>
    29ea:	30 f0       	brcs	.+12     	; 0x29f8 <log_put+0xc6>
    29ec:	82 ed       	ldi	r24, 0xD2	; 210
    29ee:	93 e0       	ldi	r25, 0x03	; 3
    29f0:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    29f4:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    29f8:	08 95       	ret

000029fa <log_putError>:
    29fa:	25 e4       	ldi	r18, 0x45	; 69
    29fc:	9a df       	rcall	.-204    	; 0x2932 <log_put>
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    2a04:	08 95       	ret

00002a06 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2a06:	cf 93       	push	r28
    2a08:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2a0a:	7b de       	rcall	.-778    	; 0x2702 <log_getLog>
	if (pLogEntry != NULL){
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	19 f0       	breq	.+6      	; 0x2a16 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2a10:	6c 2f       	mov	r22, r28
    2a12:	03 df       	rcall	.-506    	; 0x281a <log_getShortTextFromPtr>
    2a14:	06 c0       	rjmp	.+12     	; 0x2a22 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2a16:	ea ea       	ldi	r30, 0xAA	; 170
    2a18:	f3 e0       	ldi	r31, 0x03	; 3
    2a1a:	8d e2       	ldi	r24, 0x2D	; 45
    2a1c:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2a1e:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2a20:	cf 01       	movw	r24, r30
	}
    2a22:	cf 91       	pop	r28
    2a24:	08 95       	ret

00002a26 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2a26:	b6 dc       	rcall	.-1684   	; 0x2394 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2a28:	85 b1       	in	r24, 0x05	; 5
    2a2a:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();
    2a2c:	85 b9       	out	0x05, r24	; 5
    2a2e:	3f de       	rcall	.-898    	; 0x26ae <init_log>
	init_Serial0SerUSB();
    2a30:	0e 94 89 36 	call	0x6d12	; 0x6d12 <init_Serial0SerUSB>
	init_message();
    2a34:	0e 94 23 2c 	call	0x5846	; 0x5846 <init_message>
	init_HwTimer();
	init_Timers();
    2a38:	35 d8       	rcall	.-3990   	; 0x1aa4 <init_HwTimer>
    2a3a:	1c d8       	rcall	.-4040   	; 0x1a74 <init_Timers>
	init_ADC();
    2a3c:	42 d8       	rcall	.-3964   	; 0x1ac2 <init_ADC>
	init_Pipe();
    2a3e:	6b d8       	rcall	.-3882   	; 0x1b16 <init_Pipe>
    2a40:	0e 94 ca 34 	call	0x6994	; 0x6994 <init_Serial1MIDI>
	init_Serial1MIDI();
    2a44:	90 d8       	rcall	.-3808   	; 0x1b66 <init_PipeModules>
	init_PipeModules();
    2a46:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <init_Midi2Manual>
	init_Midi2Manual();
    2a4a:	0e 94 35 30 	call	0x606a	; 0x606a <init_Manual2Midi>
	init_Manual2Midi();
    2a4e:	0e 94 b5 2c 	call	0x596a	; 0x596a <init_Midi>
	init_Midi();
    2a52:	0e 94 2e 2d 	call	0x5a5c	; 0x5a5c <init_Registers>
	init_Registers();
    2a56:	0e 94 c6 30 	call	0x618c	; 0x618c <init_Manual2Module>
	init_Manual2Module();
    2a5a:	0e 94 c4 2a 	call	0x5588	; 0x5588 <init_SoftKeys>
	init_SoftKeys();
    2a5e:	0e 94 ef 0c 	call	0x19de	; 0x19de <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2a62:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	INIT_MENU
    2a66:	45 dd       	rcall	.-1398   	; 0x24f2 <lcd_init>


	// BOOT MESSAGE

	lcd_init ();
    2a68:	0e 94 9e 38 	call	0x713c	; 0x713c <lcd_initCG>
	lcd_initCG();
	lcd_clrscr ();
    2a6c:	a3 dd       	rcall	.-1210   	; 0x25b4 <lcd_clrscr>
    2a6e:	83 e4       	ldi	r24, 0x43	; 67
	lcd_goto(LCD_LINE1+3);
    2a70:	9c dd       	rcall	.-1224   	; 0x25aa <lcd_goto>
    2a72:	85 ea       	ldi	r24, 0xA5	; 165
	lcd_puts_P(prog_name);
    2a74:	92 e0       	ldi	r25, 0x02	; 2
    2a76:	0b de       	rcall	.-1002   	; 0x268e <lcd_puts_P>
    2a78:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_goto(LCD_LINE2+7);
    2a7a:	97 dd       	rcall	.-1234   	; 0x25aa <lcd_goto>
    2a7c:	8b e1       	ldi	r24, 0x1B	; 27
    2a7e:	92 e1       	ldi	r25, 0x12	; 18
	lcd_puts_P(sw_version);
    2a80:	06 de       	rcall	.-1012   	; 0x268e <lcd_puts_P>
    2a82:	78 94       	sei
    2a84:	2f ef       	ldi	r18, 0xFF	; 255
    2a86:	47 e9       	ldi	r20, 0x97	; 151
	sei();
    2a88:	8a e3       	ldi	r24, 0x3A	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a8a:	21 50       	subi	r18, 0x01	; 1
    2a8c:	40 40       	sbci	r20, 0x00	; 0
    2a8e:	80 40       	sbci	r24, 0x00	; 0
    2a90:	e1 f7       	brne	.-8      	; 0x2a8a <main+0x64>
    2a92:	00 c0       	rjmp	.+0      	; 0x2a94 <main+0x6e>
    2a94:	00 00       	nop
    2a96:	0e 94 5c 37 	call	0x6eb8	; 0x6eb8 <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2a9a:	8c dd       	rcall	.-1256   	; 0x25b4 <lcd_clrscr>
	lcd_clrscr ();
    2a9c:	a8 d9       	rcall	.-3248   	; 0x1dee <module_StartPowerOn>
    2a9e:	8f ef       	ldi	r24, 0xFF	; 255

	// TURN ON POWER

	module_StartPowerOn();
    2aa0:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    2aa4:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2aa8:	8e ef       	ldi	r24, 0xFE	; 254

	menuNotActive = TRUE;
    2aaa:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2aae:	df ef       	ldi	r29, 0xFF	; 255
    2ab0:	85 b1       	in	r24, 0x05	; 5
    2ab2:	8f 7c       	andi	r24, 0xCF	; 207
	module_StartPowerOn();
	MESSAGE_PIPE_HANDLING_ON

	menuNotActive = TRUE;
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2ab4:	85 b9       	out	0x05, r24	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		DEBUG_OUT_MAIN
    2ab6:	20 91 fe 13 	lds	r18, 0x13FE	; 0x8013fe <serESPRxInIndex>
    2aba:	30 91 ff 13 	lds	r19, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2abe:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    2ac2:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
    2ac6:	28 17       	cp	r18, r24
    2ac8:	39 07       	cpc	r19, r25
    2aca:	09 f4       	brne	.+2      	; 0x2ace <main+0xa8>
    2acc:	66 c0       	rjmp	.+204    	; 0x2b9a <main+0x174>
    2ace:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <serial3SER_ESPReadRx>
    2ad2:	c8 2f       	mov	r28, r24
			uint8_t esp_message = serial3SER_ESPReadRx();
    2ad4:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
    2ad8:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    2adc:	8f e7       	ldi	r24, 0x7F	; 127
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2ade:	8c 0f       	add	r24, r28
    2ae0:	86 30       	cpi	r24, 0x06	; 6
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2ae2:	28 f4       	brcc	.+10     	; 0x2aee <main+0xc8>
    2ae4:	80 e8       	ldi	r24, 0x80	; 128
    2ae6:	8c 0f       	add	r24, r28
    2ae8:	0e 94 2a 2c 	call	0x5854	; 0x5854 <message_push>
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2aec:	56 c0       	rjmp	.+172    	; 0x2b9a <main+0x174>
    2aee:	c0 39       	cpi	r28, 0x90	; 144
    2af0:	09 f0       	breq	.+2      	; 0x2af4 <main+0xce>
    2af2:	53 c0       	rjmp	.+166    	; 0x2b9a <main+0x174>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2af4:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <serESPInBuffer>
    2af8:	80 39       	cpi	r24, 0x90	; 144
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2afa:	09 f0       	breq	.+2      	; 0x2afe <main+0xd8>
    2afc:	4e c0       	rjmp	.+156    	; 0x2b9a <main+0x174>
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	e9 2f       	mov	r30, r25
    2b02:	09 2e       	mov	r0, r25
    2b04:	00 0c       	add	r0, r0
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2b06:	ff 0b       	sbc	r31, r31
    2b08:	ef 50       	subi	r30, 0x0F	; 15
    2b0a:	fc 4e       	sbci	r31, 0xEC	; 236
    2b0c:	80 81       	ld	r24, Z
    2b0e:	8d 33       	cpi	r24, 0x3D	; 61
    2b10:	19 f0       	breq	.+6      	; 0x2b18 <main+0xf2>
    2b12:	9f 5f       	subi	r25, 0xFF	; 255
    2b14:	98 30       	cpi	r25, 0x08	; 8
    2b16:	a4 f3       	brlt	.-24     	; 0x2b00 <main+0xda>
							break;
						}
						i++;
    2b18:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2b1a:	0c f0       	brlt	.+2      	; 0x2b1e <main+0xf8>
    2b1c:	3e c0       	rjmp	.+124    	; 0x2b9a <main+0x174>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2b1e:	89 2f       	mov	r24, r25
    2b20:	85 95       	asr	r24
    2b22:	20 e0       	ldi	r18, 0x00	; 0
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2b24:	06 c0       	rjmp	.+12     	; 0x2b32 <main+0x10c>
    2b26:	e2 2f       	mov	r30, r18
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2b28:	f0 e0       	ldi	r31, 0x00	; 0
    2b2a:	e5 5b       	subi	r30, 0xB5	; 181
							serESPMidiTmp[j] = 0;
    2b2c:	f9 4e       	sbci	r31, 0xE9	; 233
    2b2e:	10 82       	st	Z, r1
    2b30:	2f 5f       	subi	r18, 0xFF	; 255
    2b32:	23 30       	cpi	r18, 0x03	; 3
    2b34:	c0 f3       	brcs	.-16     	; 0x2b26 <main+0x100>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2b36:	2c c0       	rjmp	.+88     	; 0x2b90 <main+0x16a>
    2b38:	e9 2f       	mov	r30, r25
    2b3a:	09 2e       	mov	r0, r25
    2b3c:	00 0c       	add	r0, r0
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2b3e:	ff 0b       	sbc	r31, r31
    2b40:	ef 50       	subi	r30, 0x0F	; 15
    2b42:	fc 4e       	sbci	r31, 0xEC	; 236
    2b44:	30 81       	ld	r19, Z
    2b46:	20 ed       	ldi	r18, 0xD0	; 208
    2b48:	23 0f       	add	r18, r19
    2b4a:	2a 30       	cpi	r18, 0x0A	; 10
    2b4c:	10 f0       	brcs	.+4      	; 0x2b52 <main+0x12c>
    2b4e:	27 ed       	ldi	r18, 0xD7	; 215
							if (asciiData > 9){
    2b50:	23 0f       	add	r18, r19
    2b52:	a2 2f       	mov	r26, r18
								asciiData = asciiData - (0x0A - 'A' + '0');
    2b54:	af 70       	andi	r26, 0x0F	; 15
    2b56:	eb e4       	ldi	r30, 0x4B	; 75
							}
							asciiData &= 0x0F;
    2b58:	f6 e1       	ldi	r31, 0x16	; 22
    2b5a:	62 81       	ldd	r22, Z+2	; 0x02
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2b5c:	20 e1       	ldi	r18, 0x10	; 16
    2b5e:	62 9f       	mul	r22, r18
    2b60:	b0 01       	movw	r22, r0
    2b62:	11 24       	eor	r1, r1
    2b64:	41 81       	ldd	r20, Z+1	; 0x01
    2b66:	24 2f       	mov	r18, r20
    2b68:	22 95       	swap	r18
    2b6a:	2f 70       	andi	r18, 0x0F	; 15
    2b6c:	62 2b       	or	r22, r18
    2b6e:	62 83       	std	Z+2, r22	; 0x02
    2b70:	20 e1       	ldi	r18, 0x10	; 16
    2b72:	42 9f       	mul	r20, r18
    2b74:	a0 01       	movw	r20, r0
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2b76:	11 24       	eor	r1, r1
    2b78:	20 81       	ld	r18, Z
    2b7a:	32 2f       	mov	r19, r18
    2b7c:	32 95       	swap	r19
    2b7e:	3f 70       	andi	r19, 0x0F	; 15
    2b80:	43 2b       	or	r20, r19
    2b82:	41 83       	std	Z+1, r20	; 0x01
    2b84:	40 e1       	ldi	r20, 0x10	; 16
    2b86:	24 9f       	mul	r18, r20
    2b88:	90 01       	movw	r18, r0
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2b8a:	11 24       	eor	r1, r1
    2b8c:	2a 2b       	or	r18, r26
    2b8e:	20 83       	st	Z, r18
    2b90:	91 50       	subi	r25, 0x01	; 1
    2b92:	19 16       	cp	r1, r25
    2b94:	8c f2       	brlt	.-94     	; 0x2b38 <main+0x112>
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2b96:	0e 94 8b 33 	call	0x6716	; 0x6716 <proc_ESPmidi>
    2b9a:	0e 94 57 2c 	call	0x58ae	; 0x58ae <message_status>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2b9e:	88 23       	and	r24, r24
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <main+0x17e>
    2ba2:	51 c0       	rjmp	.+162    	; 0x2c46 <main+0x220>
    2ba4:	85 b1       	in	r24, 0x05	; 5
    2ba6:	80 63       	ori	r24, 0x30	; 48
    2ba8:	85 b9       	out	0x05, r24	; 5
			DEBUG_OUT_MENU
    2baa:	0e 94 3e 2c 	call	0x587c	; 0x587c <message_get>
    2bae:	c8 2f       	mov	r28, r24
			uint8_t keyMessage = message_get();
    2bb0:	86 38       	cpi	r24, 0x86	; 134
    2bb2:	b9 f4       	brne	.+46     	; 0x2be2 <main+0x1bc>
    2bb4:	0e 94 94 34 	call	0x6928	; 0x6928 <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
				// PANIC BUTTON
				midiSendAllNotesOff();
    2bb8:	0e 94 64 32 	call	0x64c8	; 0x64c8 <midi_AllManualsOff>
				midi_AllManualsOff();
    2bbc:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <midi_resetRegisters>
				midi_resetRegisters();
    2bc0:	0e 94 ab 2c 	call	0x5956	; 0x5956 <midi_CouplerReset>
				midi_CouplerReset();
    2bc4:	74 dd       	rcall	.-1304   	; 0x26ae <init_log>
    2bc6:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
				init_log(); // clear log V 0.70
    2bca:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    2bce:	85 b1       	in	r24, 0x05	; 5
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    2bd0:	80 64       	ori	r24, 0x40	; 64
    2bd2:	85 b9       	out	0x05, r24	; 5
				POWER_ON
    2bd4:	83 e1       	ldi	r24, 0x13	; 19
    2bd6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    2bda:	8a e8       	ldi	r24, 0x8A	; 138
    2bdc:	92 e0       	ldi	r25, 0x02	; 2
    2bde:	0e 94 d0 29 	call	0x53a0	; 0x53a0 <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2be2:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    2be6:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (menuNotActive == TRUE) {
    2be8:	f9 f4       	brne	.+62     	; 0x2c28 <main+0x202>
    2bea:	8c 2f       	mov	r24, r28
    2bec:	8f 73       	andi	r24, 0x3F	; 63
    2bee:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2bf0:	69 f4       	brne	.+26     	; 0x2c0c <main+0x1e6>
    2bf2:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2bf4:	70 e0       	ldi	r23, 0x00	; 0
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <menu_Init>
    2bfe:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <menu_InitLCD>
					menu_InitLCD(); //display menu
    2c02:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	48 d9       	rcall	.-3440   	; 0x1e9a <softKey_WantLong>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2c0a:	1d c0       	rjmp	.+58     	; 0x2c46 <main+0x220>
    2c0c:	9f ef       	ldi	r25, 0xFF	; 255
    2c0e:	98 0f       	add	r25, r24
    2c10:	94 30       	cpi	r25, 0x04	; 4
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2c12:	c8 f4       	brcc	.+50     	; 0x2c46 <main+0x220>
    2c14:	0e 94 88 2b 	call	0x5710	; 0x5710 <softKey_MessageKey_ToSoftKeyNr>
    2c18:	6c 2f       	mov	r22, r28
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2c1a:	0e 94 9d 2b 	call	0x573a	; 0x573a <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2c1e:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2c22:	0e 94 49 2b 	call	0x5692	; 0x5692 <softKeys_toLCD>
    2c26:	0f c0       	rjmp	.+30     	; 0x2c46 <main+0x220>
					softKeys_toLCD();
    2c28:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2c2c:	81 11       	cpse	r24, r1
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2c2e:	06 c0       	rjmp	.+12     	; 0x2c3c <main+0x216>
    2c30:	8c 2f       	mov	r24, r28
    2c32:	0e 94 13 26 	call	0x4c26	; 0x4c26 <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2c36:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2c3a:	05 c0       	rjmp	.+10     	; 0x2c46 <main+0x220>
    2c3c:	8d ef       	ldi	r24, 0xFD	; 253
    2c3e:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2c42:	0e 94 9b 28 	call	0x5136	; 0x5136 <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2c46:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    2c4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4c:	69 f4       	brne	.+26     	; 0x2c68 <main+0x242>
    2c4e:	df 3f       	cpi	r29, 0xFF	; 255
    2c50:	61 f4       	brne	.+24     	; 0x2c6a <main+0x244>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2c52:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2c56:	0e 94 49 2b 	call	0x5692	; 0x5692 <softKeys_toLCD>
				softKeys_toLCD();
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	1e d9       	rcall	.-3524   	; 0x1e9a <softKey_WantLong>
				softKey_WantLong(TRUE);
    2c5e:	8f ef       	ldi	r24, 0xFF	; 255
    2c60:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
				prog_UpdDisplay = TRUE; // update program display 
    2c64:	d0 e0       	ldi	r29, 0x00	; 0
    2c66:	01 c0       	rjmp	.+2      	; 0x2c6a <main+0x244>
    2c68:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2c6a:	85 b1       	in	r24, 0x05	; 5
    2c6c:	8f 7c       	andi	r24, 0xCF	; 207
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2c6e:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MAIN
    2c70:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2c74:	81 11       	cpse	r24, r1
    2c76:	09 c0       	rjmp	.+18     	; 0x2c8a <main+0x264>
    2c78:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2c7c:	0e 94 bf 29 	call	0x537e	; 0x537e <menu_deleteMessage>
				menu_deleteMessage();
    2c80:	8c 2f       	mov	r24, r28
    2c82:	93 dc       	rcall	.-1754   	; 0x25aa <lcd_goto>
				lcd_goto(saveCursor);
    2c84:	8f ef       	ldi	r24, 0xFF	; 255
    2c86:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2c8a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2c8e:	81 11       	cpse	r24, r1
    2c90:	0a c0       	rjmp	.+20     	; 0x2ca6 <main+0x280>
    2c92:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2c96:	88 23       	and	r24, r24
    2c98:	19 f0       	breq	.+6      	; 0x2ca0 <main+0x27a>
    2c9a:	0e 94 9b 28 	call	0x5136	; 0x5136 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2c9e:	03 c0       	rjmp	.+6      	; 0x2ca6 <main+0x280>
    2ca0:	8f ef       	ldi	r24, 0xFF	; 255
    2ca2:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2ca6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    2caa:	81 11       	cpse	r24, r1
    2cac:	1a c0       	rjmp	.+52     	; 0x2ce2 <main+0x2bc>
    2cae:	af d8       	rcall	.-3746   	; 0x1e0e <module_PowerControl>
			module_PowerControl();
    2cb0:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <menu_showPowerState>
			menu_showPowerState();
    2cb4:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			if (menuNotActive == TRUE) {
    2cb8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cba:	99 f4       	brne	.+38     	; 0x2ce2 <main+0x2bc>
    2cbc:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2cc0:	84 e1       	ldi	r24, 0x14	; 20
				lcd_goto(LCD_LINE2);
    2cc2:	73 dc       	rcall	.-1818   	; 0x25aa <lcd_goto>
    2cc4:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2cc8:	81 30       	cpi	r24, 0x01	; 1
    2cca:	21 f4       	brne	.+8      	; 0x2cd4 <main+0x2ae>
    2ccc:	83 e9       	ldi	r24, 0x93	; 147
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2cce:	92 e0       	ldi	r25, 0x02	; 2
    2cd0:	de dc       	rcall	.-1604   	; 0x268e <lcd_puts_P>
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <main+0x2b8>
    2cd4:	82 31       	cpi	r24, 0x12	; 18
    2cd6:	19 f4       	brne	.+6      	; 0x2cde <main+0x2b8>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2cd8:	84 e1       	ldi	r24, 0x14	; 20
    2cda:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2cde:	8c 2f       	mov	r24, r28
    2ce0:	64 dc       	rcall	.-1848   	; 0x25aa <lcd_goto>
				}
				lcd_goto(saveCursor);
    2ce2:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2ce6:	9f e7       	ldi	r25, 0x7F	; 127
    2ce8:	98 0f       	add	r25, r24
    2cea:	96 30       	cpi	r25, 0x06	; 6
    2cec:	10 f0       	brcs	.+4      	; 0x2cf2 <main+0x2cc>
    2cee:	8e 3f       	cpi	r24, 0xFE	; 254
    2cf0:	09 f5       	brne	.+66     	; 0x2d34 <main+0x30e>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2cf2:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2cf6:	8f 3f       	cpi	r24, 0xFF	; 255
    2cf8:	31 f4       	brne	.+12     	; 0x2d06 <main+0x2e0>
    2cfa:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2cfe:	69 dc       	rcall	.-1838   	; 0x25d2 <getCursorFromLCDRAMcursor>
    2d00:	0e 94 90 37 	call	0x6f20	; 0x6f20 <serial3SER_ESPSend>
    2d04:	03 c0       	rjmp	.+6      	; 0x2d0c <main+0x2e6>
    2d06:	8f e7       	ldi	r24, 0x7F	; 127
    2d08:	0e 94 90 37 	call	0x6f20	; 0x6f20 <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2d0c:	81 e8       	ldi	r24, 0x81	; 129
    2d0e:	0e 94 90 37 	call	0x6f20	; 0x6f20 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2d12:	c0 e0       	ldi	r28, 0x00	; 0
    2d14:	e8 e5       	ldi	r30, 0x58	; 88
    2d16:	f3 e0       	ldi	r31, 0x03	; 3
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d18:	08 c0       	rjmp	.+16     	; 0x2d2a <main+0x304>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2d1a:	8f 01       	movw	r16, r30
    2d1c:	0f 5f       	subi	r16, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d1e:	1f 4f       	sbci	r17, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    2d20:	80 81       	ld	r24, Z
    2d22:	0e 94 90 37 	call	0x6f20	; 0x6f20 <serial3SER_ESPSend>
    2d26:	cf 5f       	subi	r28, 0xFF	; 255
    2d28:	f8 01       	movw	r30, r16
    2d2a:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d2c:	b0 f3       	brcs	.-20     	; 0x2d1a <main+0x2f4>
				serial3SER_ESPSend(*pChar++);
    2d2e:	80 e8       	ldi	r24, 0x80	; 128
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d30:	0e 94 90 37 	call	0x6f20	; 0x6f20 <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2d34:	8f ef       	ldi	r24, 0xFF	; 255
    2d36:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2d3a:	0e 94 ae 34 	call	0x695c	; 0x695c <midi_CheckTxActiveSense>
    2d3e:	0e 94 6e 32 	call	0x64dc	; 0x64dc <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2d42:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    2d46:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP) || TIMER_ELAPSED(TIMER_MIDIIN_DISP)) {
    2d4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d4c:	21 f0       	breq	.+8      	; 0x2d56 <main+0x330>
    2d4e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
    2d52:	81 11       	cpse	r24, r1
    2d54:	62 c0       	rjmp	.+196    	; 0x2e1a <main+0x3f4>
    2d56:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
			// only if timer for midi in is not running at all (or just has elapsed)
			if (midiLastInNote != MIDI_NOTE_NONE){
    2d5a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d5c:	91 f1       	breq	.+100    	; 0x2dc2 <main+0x39c>
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
				// there is a midi in note to be displayed in status
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2d60:	24 dc       	rcall	.-1976   	; 0x25aa <lcd_goto>
    2d62:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
				if (midiLastInManual == MANUAL_NONE) {
    2d66:	8f 3f       	cpi	r24, 0xFF	; 255
    2d68:	69 f4       	brne	.+26     	; 0x2d84 <main+0x35e>
    2d6a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
					// there was no manual assigned to midi in note
					// cc?nnn
					lcd_ChannelOut(midiLastInChannel);
    2d6e:	0e 94 80 3a 	call	0x7500	; 0x7500 <lcd_ChannelOut>
					lcd_putc('?');
    2d72:	8f e3       	ldi	r24, 0x3F	; 63
    2d74:	44 dc       	rcall	.-1912   	; 0x25fe <lcd_putc>
					lcd_noteOut(midiLastInNote);
    2d76:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2d7a:	0e 94 2f 3a 	call	0x745e	; 0x745e <lcd_noteOut>
					lcd_putc(' ');
    2d7e:	80 e2       	ldi	r24, 0x20	; 32
    2d80:	3e dc       	rcall	.-1924   	; 0x25fe <lcd_putc>
    2d82:	0c c0       	rjmp	.+24     	; 0x2d9c <main+0x376>
				} else {
					// midi input to assigned manual
					// nnn>m
					lcd_noteOut(midiLastInNote);
    2d84:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2d88:	0e 94 2f 3a 	call	0x745e	; 0x745e <lcd_noteOut>
					lcd_putc(MENU_MIDI_IO_SIGN);
    2d8c:	8e e7       	ldi	r24, 0x7E	; 126
    2d8e:	37 dc       	rcall	.-1938   	; 0x25fe <lcd_putc>
    2d90:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
					lcd_ManualOutDec(midiLastInManual);
    2d94:	0e 94 91 3a 	call	0x7522	; 0x7522 <lcd_ManualOutDec>
    2d98:	80 e2       	ldi	r24, 0x20	; 32
					lcd_putc(' ');
    2d9a:	31 dc       	rcall	.-1950   	; 0x25fe <lcd_putc>
    2d9c:	8c 2f       	mov	r24, r28
    2d9e:	05 dc       	rcall	.-2038   	; 0x25aa <lcd_goto>
				}
				lcd_goto(oldcursor);
    2da0:	8f ef       	ldi	r24, 0xFF	; 255
    2da2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
				midiLastInNote = MIDI_NOTE_NONE;
    2da6:	9f b7       	in	r25, 0x3f	; 63
				// now start timer 
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2da8:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	06 c0       	rjmp	.+12     	; 0x2dba <main+0x394>
    2dae:	ef e2       	ldi	r30, 0x2F	; 47
    2db0:	f2 e0       	ldi	r31, 0x02	; 2
    2db2:	83 e2       	ldi	r24, 0x23	; 35
    2db4:	80 87       	std	Z+8, r24	; 0x08
    2db6:	11 86       	std	Z+9, r1	; 0x09
    2db8:	80 e0       	ldi	r24, 0x00	; 0
    2dba:	81 11       	cpse	r24, r1
    2dbc:	f8 cf       	rjmp	.-16     	; 0x2dae <main+0x388>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dbe:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2dc0:	2c c0       	rjmp	.+88     	; 0x2e1a <main+0x3f4>
			} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2dc2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2dc6:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc8:	d9 f0       	breq	.+54     	; 0x2e00 <main+0x3da>
				// no midi not but a program change to be displayed
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	ee db       	rcall	.-2084   	; 0x25aa <lcd_goto>
    2dce:	80 e7       	ldi	r24, 0x70	; 112
				lcd_putc('p');
    2dd0:	16 dc       	rcall	.-2004   	; 0x25fe <lcd_putc>
    2dd2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2dd6:	0e 94 e7 38 	call	0x71ce	; 0x71ce <lcd_dec2out>
    2dda:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2ddc:	10 dc       	rcall	.-2016   	; 0x25fe <lcd_putc>
    2dde:	8f ef       	ldi	r24, 0xFF	; 255
    2de0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2de4:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2de6:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2de8:	81 e0       	ldi	r24, 0x01	; 1
    2dea:	06 c0       	rjmp	.+12     	; 0x2df8 <main+0x3d2>
    2dec:	ef e2       	ldi	r30, 0x2F	; 47
    2dee:	f2 e0       	ldi	r31, 0x02	; 2
    2df0:	83 e2       	ldi	r24, 0x23	; 35
    2df2:	80 87       	std	Z+8, r24	; 0x08
    2df4:	11 86       	std	Z+9, r1	; 0x09
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	81 11       	cpse	r24, r1
    2dfa:	f8 cf       	rjmp	.-16     	; 0x2dec <main+0x3c6>
    2dfc:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dfe:	0d c0       	rjmp	.+26     	; 0x2e1a <main+0x3f4>
    __asm__ volatile ("" ::: "memory");
    2e00:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2e04:	81 11       	cpse	r24, r1
    2e06:	09 c0       	rjmp	.+18     	; 0x2e1a <main+0x3f4>
				// timer for showing note has elapsed
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e08:	d0 db       	rcall	.-2144   	; 0x25aa <lcd_goto>
    2e0a:	86 e0       	ldi	r24, 0x06	; 6
				lcd_blank(6);
    2e0c:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
				lcd_goto(oldcursor);
    2e10:	8c 2f       	mov	r24, r28
    2e12:	cb db       	rcall	.-2154   	; 0x25aa <lcd_goto>
    2e14:	8f ef       	ldi	r24, 0xFF	; 255
				TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2e16:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
			}
		}
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2e1a:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2e1e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e20:	21 f0       	breq	.+8      	; 0x2e2a <main+0x404>
    2e22:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2e26:	81 11       	cpse	r24, r1
    2e28:	5b c0       	rjmp	.+182    	; 0x2ee0 <main+0x4ba>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    2e2a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
    2e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e30:	f9 f0       	breq	.+62     	; 0x2e70 <main+0x44a>
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2e32:	8f e0       	ldi	r24, 0x0F	; 15
    2e34:	ba db       	rcall	.-2188   	; 0x25aa <lcd_goto>
    2e36:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
				lcd_ManualOutDec(midiLastOutManual);
    2e3a:	0e 94 91 3a 	call	0x7522	; 0x7522 <lcd_ManualOutDec>
    2e3e:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    2e40:	de db       	rcall	.-2116   	; 0x25fe <lcd_putc>
    2e42:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
				lcd_noteOut(midiLastOutNote);
    2e46:	0e 94 2f 3a 	call	0x745e	; 0x745e <lcd_noteOut>
				lcd_goto(oldcursor);
    2e4a:	8c 2f       	mov	r24, r28
    2e4c:	ae db       	rcall	.-2212   	; 0x25aa <lcd_goto>
    2e4e:	8f ef       	ldi	r24, 0xFF	; 255
				midiLastOutNote = MIDI_NOTE_NONE;
    2e50:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
    2e54:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2e56:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	06 c0       	rjmp	.+12     	; 0x2e68 <main+0x442>
    2e5c:	ef e2       	ldi	r30, 0x2F	; 47
    2e5e:	f2 e0       	ldi	r31, 0x02	; 2
    2e60:	88 e2       	ldi	r24, 0x28	; 40
    2e62:	82 87       	std	Z+10, r24	; 0x0a
    2e64:	13 86       	std	Z+11, r1	; 0x0b
    2e66:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e68:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    2e6a:	f8 cf       	rjmp	.-16     	; 0x2e5c <main+0x436>
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    2e6c:	9f bf       	out	0x3f, r25	; 63
    2e6e:	38 c0       	rjmp	.+112    	; 0x2ee0 <main+0x4ba>
    2e70:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2e74:	8f 3f       	cpi	r24, 0xFF	; 255
    2e76:	31 f1       	breq	.+76     	; 0x2ec4 <main+0x49e>
    2e78:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_putc('R');
    2e7a:	97 db       	rcall	.-2258   	; 0x25aa <lcd_goto>
    2e7c:	82 e5       	ldi	r24, 0x52	; 82
    2e7e:	bf db       	rcall	.-2178   	; 0x25fe <lcd_putc>
				lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2e80:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2e84:	8f 77       	andi	r24, 0x7F	; 127
    2e86:	0e 94 e7 38 	call	0x71ce	; 0x71ce <lcd_dec2out>
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2e8a:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2e8e:	88 23       	and	r24, r24
    2e90:	14 f0       	brlt	.+4      	; 0x2e96 <main+0x470>
    2e92:	88 e0       	ldi	r24, 0x08	; 8
    2e94:	01 c0       	rjmp	.+2      	; 0x2e98 <main+0x472>
    2e96:	89 e0       	ldi	r24, 0x09	; 9
    2e98:	b2 db       	rcall	.-2204   	; 0x25fe <lcd_putc>
				lcd_putc(' ');
    2e9a:	80 e2       	ldi	r24, 0x20	; 32
    2e9c:	b0 db       	rcall	.-2208   	; 0x25fe <lcd_putc>
    2e9e:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    2ea0:	84 db       	rcall	.-2296   	; 0x25aa <lcd_goto>
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
    2ea4:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				midi_RegisterChanged = REGISTER_NONE;
    2ea8:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2eaa:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	06 c0       	rjmp	.+12     	; 0x2ebc <main+0x496>
    2eb0:	ef e2       	ldi	r30, 0x2F	; 47
    2eb2:	f2 e0       	ldi	r31, 0x02	; 2
    2eb4:	88 e2       	ldi	r24, 0x28	; 40
    2eb6:	82 87       	std	Z+10, r24	; 0x0a
    2eb8:	13 86       	std	Z+11, r1	; 0x0b
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	81 11       	cpse	r24, r1
    2ebe:	f8 cf       	rjmp	.-16     	; 0x2eb0 <main+0x48a>
    2ec0:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ec2:	0e c0       	rjmp	.+28     	; 0x2ee0 <main+0x4ba>
    __asm__ volatile ("" ::: "memory");
    2ec4:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2ec8:	81 11       	cpse	r24, r1
    2eca:	0a c0       	rjmp	.+20     	; 0x2ee0 <main+0x4ba>
    2ecc:	8f e0       	ldi	r24, 0x0F	; 15
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2ece:	6d db       	rcall	.-2342   	; 0x25aa <lcd_goto>
    2ed0:	85 e0       	ldi	r24, 0x05	; 5
    2ed2:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
				lcd_blank(5);
    2ed6:	8c 2f       	mov	r24, r28
    2ed8:	68 db       	rcall	.-2352   	; 0x25aa <lcd_goto>
				lcd_goto(oldcursor);
    2eda:	8f ef       	ldi	r24, 0xFF	; 255
    2edc:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2ee0:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <prog_UpdDisplay>
    2ee4:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}
		#endif
		//----------------------- program display ------------------------
		if (prog_UpdDisplay == TRUE){
    2ee6:	31 f4       	brne	.+12     	; 0x2ef4 <main+0x4ce>
    2ee8:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    2eec:	8c e1       	ldi	r24, 0x1C	; 28
			prog_UpdDisplay = FALSE;
    2eee:	5d db       	rcall	.-2374   	; 0x25aa <lcd_goto>
    2ef0:	0e 94 d7 2f 	call	0x5fae	; 0x5fae <prog_toLcd>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    2ef4:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
			prog_toLcd();
    2ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    2efa:	09 f0       	breq	.+2      	; 0x2efe <main+0x4d8>
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2efc:	7e c0       	rjmp	.+252    	; 0x2ffa <main+0x5d4>
    2efe:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2f02:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2f06:	c0 91 db 18 	lds	r28, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2f0a:	cf 3f       	cpi	r28, 0xFF	; 255
			uint8_t oldBlink = lcd_cursorIsOn;
    2f0c:	11 f4       	brne	.+4      	; 0x2f12 <main+0x4ec>
			if (oldBlink == TRUE) {
    2f0e:	0e 94 cd 3a 	call	0x759a	; 0x759a <lcd_cursoroff>
				lcd_cursoroff();
    2f12:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
			}
			char separator;
			if (*pTime == 0) {
    2f16:	88 23       	and	r24, r24
    2f18:	59 f0       	breq	.+22     	; 0x2f30 <main+0x50a>
    2f1a:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2f1e:	80 fd       	sbrc	r24, 0
    2f20:	0e c0       	rjmp	.+28     	; 0x2f3e <main+0x518>
    2f22:	0f 2e       	mov	r0, r31
    2f24:	fa e3       	ldi	r31, 0x3A	; 58
				// when displaying hr:min blink ":"
				separator = ':';
    2f26:	ef 2e       	mov	r14, r31
    2f28:	f0 2d       	mov	r31, r0
    2f2a:	04 e4       	ldi	r16, 0x44	; 68
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2f2c:	12 e0       	ldi	r17, 0x02	; 2
    2f2e:	0c c0       	rjmp	.+24     	; 0x2f48 <main+0x522>
    2f30:	0f 2e       	mov	r0, r31
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2f32:	fa e3       	ldi	r31, 0x3A	; 58
    2f34:	ef 2e       	mov	r14, r31
    2f36:	f0 2d       	mov	r31, r0
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2f38:	03 e4       	ldi	r16, 0x43	; 67
    2f3a:	12 e0       	ldi	r17, 0x02	; 2
    2f3c:	05 c0       	rjmp	.+10     	; 0x2f48 <main+0x522>
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2f3e:	68 94       	set
    2f40:	ee 24       	eor	r14, r14
    2f42:	e5 f8       	bld	r14, 5
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2f44:	04 e4       	ldi	r16, 0x44	; 68
    2f46:	12 e0       	ldi	r17, 0x02	; 2
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2f48:	87 e0       	ldi	r24, 0x07	; 7
    2f4a:	2f db       	rcall	.-2466   	; 0x25aa <lcd_goto>
			lcd_dec2out(*(pTime--));
    2f4c:	f8 01       	movw	r30, r16
    2f4e:	80 81       	ld	r24, Z
    2f50:	0e 94 e7 38 	call	0x71ce	; 0x71ce <lcd_dec2out>
			lcd_putc(separator);
    2f54:	8e 2d       	mov	r24, r14
    2f56:	53 db       	rcall	.-2394   	; 0x25fe <lcd_putc>
			lcd_dec2out(*pTime);
    2f58:	f8 01       	movw	r30, r16
    2f5a:	31 97       	sbiw	r30, 0x01	; 1
    2f5c:	80 81       	ld	r24, Z
    2f5e:	0e 94 e7 38 	call	0x71ce	; 0x71ce <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2f62:	40 91 4f 16 	lds	r20, 0x164F	; 0x80164f <midiRxOvflCount>
			if (ovflCount > 0){
    2f66:	44 23       	and	r20, r20
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2f68:	31 f0       	breq	.+12     	; 0x2f76 <main+0x550>
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	83 e0       	ldi	r24, 0x03	; 3
    2f70:	44 dd       	rcall	.-1400   	; 0x29fa <log_putError>
				midiRxOvflCount = 0;
    2f72:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2f76:	40 91 56 16 	lds	r20, 0x1656	; 0x801656 <midiTxOvflCount>
			if (ovflCount > 0){
    2f7a:	44 23       	and	r20, r20
    2f7c:	31 f0       	breq	.+12     	; 0x2f8a <main+0x564>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2f7e:	50 e0       	ldi	r21, 0x00	; 0
    2f80:	61 e0       	ldi	r22, 0x01	; 1
    2f82:	83 e0       	ldi	r24, 0x03	; 3
    2f84:	3a dd       	rcall	.-1420   	; 0x29fa <log_putError>
    2f86:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
				midiTxOvflCount = 0;
    2f8a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2f8e:	84 ff       	sbrs	r24, 4
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <main+0x570>
    2f92:	80 e2       	ldi	r24, 0x20	; 32
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <main+0x572>
    2f96:	89 e0       	ldi	r24, 0x09	; 9
    2f98:	32 db       	rcall	.-2460   	; 0x25fe <lcd_putc>
    2f9a:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2f9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2fa0:	11 f4       	brne	.+4      	; 0x2fa6 <main+0x580>
    2fa2:	85 e4       	ldi	r24, 0x45	; 69
    2fa4:	01 c0       	rjmp	.+2      	; 0x2fa8 <main+0x582>
    2fa6:	80 e2       	ldi	r24, 0x20	; 32
    2fa8:	2a db       	rcall	.-2476   	; 0x25fe <lcd_putc>
    2faa:	8f 2d       	mov	r24, r15
    2fac:	fe da       	rcall	.-2564   	; 0x25aa <lcd_goto>
    2fae:	cf 3f       	cpi	r28, 0xFF	; 255
			// --- restore cursor ---
			lcd_goto(oldCursor);
    2fb0:	11 f4       	brne	.+4      	; 0x2fb6 <main+0x590>
    2fb2:	0e 94 c6 3a 	call	0x758c	; 0x758c <lcd_cursosblink>
			if (oldBlink == TRUE) {
    2fb6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				lcd_cursosblink();
    2fba:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    2fbc:	69 f4       	brne	.+26     	; 0x2fd8 <main+0x5b2>
    2fbe:	9f b7       	in	r25, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2fc4:	06 c0       	rjmp	.+12     	; 0x2fd2 <main+0x5ac>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2fc6:	ef e2       	ldi	r30, 0x2F	; 47
    2fc8:	f2 e0       	ldi	r31, 0x02	; 2
    2fca:	8d e7       	ldi	r24, 0x7D	; 125
    2fcc:	80 87       	std	Z+8, r24	; 0x08
    2fce:	11 86       	std	Z+9, r1	; 0x09
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	81 11       	cpse	r24, r1
    2fd4:	f8 cf       	rjmp	.-16     	; 0x2fc6 <main+0x5a0>
    2fd6:	9f bf       	out	0x3f, r25	; 63
    2fd8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2fdc:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    2fde:	69 f4       	brne	.+26     	; 0x2ffa <main+0x5d4>
    2fe0:	9f b7       	in	r25, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2fe6:	06 c0       	rjmp	.+12     	; 0x2ff4 <main+0x5ce>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2fe8:	ef e2       	ldi	r30, 0x2F	; 47
    2fea:	f2 e0       	ldi	r31, 0x02	; 2
    2fec:	8d e7       	ldi	r24, 0x7D	; 125
    2fee:	82 87       	std	Z+10, r24	; 0x0a
    2ff0:	13 86       	std	Z+11, r1	; 0x0b
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	81 11       	cpse	r24, r1
    2ff6:	f8 cf       	rjmp	.-16     	; 0x2fe8 <main+0x5c2>
    2ff8:	9f bf       	out	0x3f, r25	; 63
    2ffa:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ffe:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    3000:	39 f4       	brne	.+14     	; 0x3010 <main+0x5ea>
    3002:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
    3006:	40 e0       	ldi	r20, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	60 e0       	ldi	r22, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    300c:	84 e0       	ldi	r24, 0x04	; 4
    300e:	f5 dc       	rcall	.-1558   	; 0x29fa <log_putError>
    3010:	85 b1       	in	r24, 0x05	; 5
    3012:	8f 7c       	andi	r24, 0xCF	; 207
    3014:	80 62       	ori	r24, 0x20	; 32
    3016:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MIDI
    3018:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    301c:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    3020:	98 17       	cp	r25, r24
    3022:	21 f0       	breq	.+8      	; 0x302c <main+0x606>
    3024:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <serial1MIDIReadRx>
    3028:	0e 94 f7 32 	call	0x65ee	; 0x65ee <midiIn_Process>
			midiIn_Process(serial1MIDIReadRx());
    302c:	0e 94 a1 2c 	call	0x5942	; 0x5942 <pipeMsgStatus>
    3030:	8f 3f       	cpi	r24, 0xFF	; 255
    3032:	09 f0       	breq	.+2      	; 0x3036 <main+0x610>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    3034:	3d cd       	rjmp	.-1414   	; 0x2ab0 <main+0x8a>
    3036:	0e 94 8c 2c 	call	0x5918	; 0x5918 <pipeMsgGet>
    303a:	0e 94 bc 33 	call	0x6778	; 0x6778 <midiKeyPress_Process>
			midiKeyPress_Process(pipeMsgGet());
    303e:	38 cd       	rjmp	.-1424   	; 0x2ab0 <main+0x8a>

00003040 <menu_enterWriteModule>:
    3040:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
    3044:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    3048:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
    304c:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    3050:	81 e0       	ldi	r24, 0x01	; 1
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    3058:	02 c0       	rjmp	.+4      	; 0x305e <menu_enterWriteModule+0x1e>
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	0a 94       	dec	r0
    3060:	e2 f7       	brpl	.-8      	; 0x305a <menu_enterWriteModule+0x1a>
    3062:	48 2f       	mov	r20, r24
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	e1 e4       	ldi	r30, 0x41	; 65
    3068:	f3 e0       	ldi	r31, 0x03	; 3
    306a:	22 c0       	rjmp	.+68     	; 0x30b0 <menu_enterWriteModule+0x70>
    306c:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    3070:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    3074:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    3078:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    307c:	88 0f       	add	r24, r24
    307e:	99 1f       	adc	r25, r25
    3080:	aa 1f       	adc	r26, r26
    3082:	bb 1f       	adc	r27, r27
    3084:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    3088:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    308c:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    3090:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    3094:	21 81       	ldd	r18, Z+1	; 0x01
    3096:	24 23       	and	r18, r20
    3098:	49 f0       	breq	.+18     	; 0x30ac <menu_enterWriteModule+0x6c>
    309a:	81 60       	ori	r24, 0x01	; 1
    309c:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    30a0:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    30a4:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    30a8:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    30ac:	38 97       	sbiw	r30, 0x08	; 8
    30ae:	3f 5f       	subi	r19, 0xFF	; 255
    30b0:	30 32       	cpi	r19, 0x20	; 32
    30b2:	e0 f2       	brcs	.-72     	; 0x306c <menu_enterWriteModule+0x2c>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	08 95       	ret

000030b8 <menu_exitWriteModule>:
    30b8:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    30bc:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    30c0:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    30c4:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    30c8:	85 30       	cpi	r24, 0x05	; 5
    30ca:	09 f5       	brne	.+66     	; 0x310e <menu_exitWriteModule+0x56>
    30cc:	a1 e0       	ldi	r26, 0x01	; 1
    30ce:	b0 e0       	ldi	r27, 0x00	; 0
    30d0:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    30d4:	02 c0       	rjmp	.+4      	; 0x30da <menu_exitWriteModule+0x22>
    30d6:	aa 0f       	add	r26, r26
    30d8:	bb 1f       	adc	r27, r27
    30da:	0a 94       	dec	r0
    30dc:	e2 f7       	brpl	.-8      	; 0x30d6 <menu_exitWriteModule+0x1e>
    30de:	3a 2f       	mov	r19, r26
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	e1 e4       	ldi	r30, 0x41	; 65
    30e4:	f3 e0       	ldi	r31, 0x03	; 3
    30e6:	11 c0       	rjmp	.+34     	; 0x310a <menu_exitWriteModule+0x52>
    30e8:	77 23       	and	r23, r23
    30ea:	24 f4       	brge	.+8      	; 0x30f4 <menu_exitWriteModule+0x3c>
    30ec:	81 81       	ldd	r24, Z+1	; 0x01
    30ee:	83 2b       	or	r24, r19
    30f0:	81 83       	std	Z+1, r24	; 0x01
    30f2:	05 c0       	rjmp	.+10     	; 0x30fe <menu_exitWriteModule+0x46>
    30f4:	21 81       	ldd	r18, Z+1	; 0x01
    30f6:	8a 2f       	mov	r24, r26
    30f8:	80 95       	com	r24
    30fa:	82 23       	and	r24, r18
    30fc:	81 83       	std	Z+1, r24	; 0x01
    30fe:	44 0f       	add	r20, r20
    3100:	55 1f       	adc	r21, r21
    3102:	66 1f       	adc	r22, r22
    3104:	77 1f       	adc	r23, r23
    3106:	38 97       	sbiw	r30, 0x08	; 8
    3108:	9f 5f       	subi	r25, 0xFF	; 255
    310a:	90 32       	cpi	r25, 0x20	; 32
    310c:	68 f3       	brcs	.-38     	; 0x30e8 <menu_exitWriteModule+0x30>
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	08 95       	ret

00003112 <menuOnEnterModSel>:
    3112:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3116:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    311a:	3e 96       	adiw	r30, 0x0e	; 14
    311c:	85 91       	lpm	r24, Z+
    311e:	95 91       	lpm	r25, Z+
    3120:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	08 95       	ret

00003128 <menuOnEnterMidiInCh>:
    3128:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    312c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3130:	3e 96       	adiw	r30, 0x0e	; 14
    3132:	85 91       	lpm	r24, Z+
    3134:	95 91       	lpm	r25, Z+
    3136:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    313a:	80 e0       	ldi	r24, 0x00	; 0
    313c:	08 95       	ret

0000313e <menuOnEnterMidiInSec>:
    313e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3142:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3146:	3e 96       	adiw	r30, 0x0e	; 14
    3148:	25 91       	lpm	r18, Z+
    314a:	35 91       	lpm	r19, Z+
    314c:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    3150:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    3154:	8f 70       	andi	r24, 0x0F	; 15
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	23 70       	andi	r18, 0x03	; 3
    315a:	88 0f       	add	r24, r24
    315c:	99 1f       	adc	r25, r25
    315e:	88 0f       	add	r24, r24
    3160:	99 1f       	adc	r25, r25
    3162:	82 0f       	add	r24, r18
    3164:	91 1d       	adc	r25, r1
    3166:	88 0f       	add	r24, r24
    3168:	99 1f       	adc	r25, r25
    316a:	88 0f       	add	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3172:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	08 95       	ret

0000317a <menuOnEnterModManual>:
    317a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    317e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3182:	3e 96       	adiw	r30, 0x0e	; 14
    3184:	85 91       	lpm	r24, Z+
    3186:	95 91       	lpm	r25, Z+
    3188:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	08 95       	ret

00003190 <menuOnEnterModSec>:
    3190:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3194:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3198:	3e 96       	adiw	r30, 0x0e	; 14
    319a:	85 91       	lpm	r24, Z+
    319c:	95 91       	lpm	r25, Z+
    319e:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    31a2:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    31a6:	2f 70       	andi	r18, 0x0F	; 15
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	83 70       	andi	r24, 0x03	; 3
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	a9 01       	movw	r20, r18
    31b0:	44 0f       	add	r20, r20
    31b2:	55 1f       	adc	r21, r21
    31b4:	24 0f       	add	r18, r20
    31b6:	35 1f       	adc	r19, r21
    31b8:	22 0f       	add	r18, r18
    31ba:	33 1f       	adc	r19, r19
    31bc:	22 0f       	add	r18, r18
    31be:	33 1f       	adc	r19, r19
    31c0:	ac 01       	movw	r20, r24
    31c2:	44 0f       	add	r20, r20
    31c4:	55 1f       	adc	r21, r21
    31c6:	84 0f       	add	r24, r20
    31c8:	95 1f       	adc	r25, r21
    31ca:	82 0f       	add	r24, r18
    31cc:	93 1f       	adc	r25, r19
    31ce:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    31d2:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	08 95       	ret

000031da <menuOnEnterModSecReg>:
    31da:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31de:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31e2:	3e 96       	adiw	r30, 0x0e	; 14
    31e4:	85 91       	lpm	r24, Z+
    31e6:	95 91       	lpm	r25, Z+
    31e8:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    31ec:	87 70       	andi	r24, 0x07	; 7
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c 01       	movw	r18, r24
    31f2:	22 0f       	add	r18, r18
    31f4:	33 1f       	adc	r19, r19
    31f6:	82 0f       	add	r24, r18
    31f8:	93 1f       	adc	r25, r19
    31fa:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    31fe:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	08 95       	ret

00003206 <menuOnEnterKey>:
    3206:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    320a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    320e:	3e 96       	adiw	r30, 0x0e	; 14
    3210:	85 91       	lpm	r24, Z+
    3212:	95 91       	lpm	r25, Z+
    3214:	84 30       	cpi	r24, 0x04	; 4
    3216:	60 f4       	brcc	.+24     	; 0x3230 <menuOnEnterKey+0x2a>
    3218:	fc 01       	movw	r30, r24
    321a:	ff 27       	eor	r31, r31
    321c:	ee 0f       	add	r30, r30
    321e:	ff 1f       	adc	r31, r31
    3220:	e6 54       	subi	r30, 0x46	; 70
    3222:	fa 4f       	sbci	r31, 0xFA	; 250
    3224:	80 81       	ld	r24, Z
    3226:	91 81       	ldd	r25, Z+1	; 0x01
    3228:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    322c:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	08 95       	ret

00003234 <menuOnExitMidiThrough>:
    3234:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <eeprom_UpdateMidiThrough>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	08 95       	ret

0000323c <menuOnExitRegisterEdit>:
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    3242:	86 30       	cpi	r24, 0x06	; 6
    3244:	f1 f0       	breq	.+60     	; 0x3282 <menuOnExitRegisterEdit+0x46>
    3246:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    324a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    324e:	3e 96       	adiw	r30, 0x0e	; 14
    3250:	05 90       	lpm	r0, Z+
    3252:	f4 91       	lpm	r31, Z
    3254:	e0 2d       	mov	r30, r0
    3256:	cf 01       	movw	r24, r30
    3258:	8d 56       	subi	r24, 0x6D	; 109
    325a:	95 40       	sbci	r25, 0x05	; 5
    325c:	88 0f       	add	r24, r24
    325e:	88 0f       	add	r24, r24
    3260:	88 0f       	add	r24, r24
    3262:	d0 81       	ld	r29, Z
    3264:	c0 e0       	ldi	r28, 0x00	; 0
    3266:	0b c0       	rjmp	.+22     	; 0x327e <menuOnExitRegisterEdit+0x42>
    3268:	11 e0       	ldi	r17, 0x01	; 1
    326a:	18 0f       	add	r17, r24
    326c:	6d 2f       	mov	r22, r29
    326e:	66 1f       	adc	r22, r22
    3270:	66 27       	eor	r22, r22
    3272:	66 1f       	adc	r22, r22
    3274:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <register_onOff>
    3278:	dd 0f       	add	r29, r29
    327a:	cf 5f       	subi	r28, 0xFF	; 255
    327c:	81 2f       	mov	r24, r17
    327e:	c8 30       	cpi	r28, 0x08	; 8
    3280:	98 f3       	brcs	.-26     	; 0x3268 <menuOnExitRegisterEdit+0x2c>
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	1f 91       	pop	r17
    328a:	08 95       	ret

0000328c <softKeyRegOff>:
    328c:	81 11       	cpse	r24, r1
    328e:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <midi_resetRegisters>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	08 95       	ret

00003296 <menuOnExitCoupler>:
    3296:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    329a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    329e:	3e 96       	adiw	r30, 0x0e	; 14
    32a0:	85 91       	lpm	r24, Z+
    32a2:	95 91       	lpm	r25, Z+
    32a4:	81 51       	subi	r24, 0x11	; 17
    32a6:	98 40       	sbci	r25, 0x08	; 8
    32a8:	fc 01       	movw	r30, r24
    32aa:	ff 27       	eor	r31, r31
    32ac:	ef 5e       	subi	r30, 0xEF	; 239
    32ae:	f7 4f       	sbci	r31, 0xF7	; 247
    32b0:	20 81       	ld	r18, Z
    32b2:	21 11       	cpse	r18, r1
    32b4:	0e 94 bc 2c 	call	0x5978	; 0x5978 <set_Coupler>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	08 95       	ret

000032bc <menuOnExitSaveProgram>:
    32bc:	86 30       	cpi	r24, 0x06	; 6
    32be:	39 f0       	breq	.+14     	; 0x32ce <menuOnExitSaveProgram+0x12>
    32c0:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    32c4:	80 34       	cpi	r24, 0x40	; 64
    32c6:	18 f4       	brcc	.+6      	; 0x32ce <menuOnExitSaveProgram+0x12>
    32c8:	6f ef       	ldi	r22, 0xFF	; 255
    32ca:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <register_toProgram>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	08 95       	ret

000032d2 <softKeyPrM>:
    32d2:	88 23       	and	r24, r24
    32d4:	34 f4       	brge	.+12     	; 0x32e2 <softKeyPrM+0x10>
    32d6:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <midi_resetRegisters>
    32da:	8f ef       	ldi	r24, 0xFF	; 255
    32dc:	0e 94 3d 2f 	call	0x5e7a	; 0x5e7a <prog_set>
    32e0:	10 c0       	rjmp	.+32     	; 0x3302 <softKeyPrM+0x30>
    32e2:	88 23       	and	r24, r24
    32e4:	71 f0       	breq	.+28     	; 0x3302 <softKeyPrM+0x30>
    32e6:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    32ea:	8f 3f       	cpi	r24, 0xFF	; 255
    32ec:	21 f4       	brne	.+8      	; 0x32f6 <softKeyPrM+0x24>
    32ee:	8f e3       	ldi	r24, 0x3F	; 63
    32f0:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    32f4:	03 c0       	rjmp	.+6      	; 0x32fc <softKeyPrM+0x2a>
    32f6:	81 50       	subi	r24, 0x01	; 1
    32f8:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    32fc:	8f ef       	ldi	r24, 0xFF	; 255
    32fe:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	08 95       	ret

00003306 <menuOnExitKeys>:
    3306:	0e 94 cd 0c 	call	0x199a	; 0x199a <eeprom_UpdateSoftkeys>
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	08 95       	ret

0000330e <menu_readModule>:
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <menu_readModule+0x16>
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	0a 94       	dec	r0
    3326:	e2 f7       	brpl	.-8      	; 0x3320 <menu_readModule+0x12>
    3328:	28 2f       	mov	r18, r24
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	e1 e4       	ldi	r30, 0x41	; 65
    332e:	f3 e0       	ldi	r31, 0x03	; 3
    3330:	c1 2c       	mov	r12, r1
    3332:	d1 2c       	mov	r13, r1
    3334:	76 01       	movw	r14, r12
    3336:	0b c0       	rjmp	.+22     	; 0x334e <menu_readModule+0x40>
    3338:	cc 0c       	add	r12, r12
    333a:	dd 1c       	adc	r13, r13
    333c:	ee 1c       	adc	r14, r14
    333e:	ff 1c       	adc	r15, r15
    3340:	86 81       	ldd	r24, Z+6	; 0x06
    3342:	82 23       	and	r24, r18
    3344:	11 f0       	breq	.+4      	; 0x334a <menu_readModule+0x3c>
    3346:	68 94       	set
    3348:	c0 f8       	bld	r12, 0
    334a:	38 97       	sbiw	r30, 0x08	; 8
    334c:	9f 5f       	subi	r25, 0xFF	; 255
    334e:	90 32       	cpi	r25, 0x20	; 32
    3350:	98 f3       	brcs	.-26     	; 0x3338 <menu_readModule+0x2a>
    3352:	8e e1       	ldi	r24, 0x1E	; 30
    3354:	2a d9       	rcall	.-3500   	; 0x25aa <lcd_goto>
    3356:	c0 92 dd 18 	sts	0x18DD, r12	; 0x8018dd <editLong>
    335a:	d0 92 de 18 	sts	0x18DE, r13	; 0x8018de <editLong+0x1>
    335e:	e0 92 df 18 	sts	0x18DF, r14	; 0x8018df <editLong+0x2>
    3362:	f0 92 e0 18 	sts	0x18E0, r15	; 0x8018e0 <editLong+0x3>
    3366:	0e 94 c2 38 	call	0x7184	; 0x7184 <lcd_longout>
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	ff 90       	pop	r15
    336e:	ef 90       	pop	r14
    3370:	df 90       	pop	r13
    3372:	cf 90       	pop	r12
    3374:	08 95       	ret

00003376 <menu_testModule>:
    3376:	8e e1       	ldi	r24, 0x1E	; 30
    3378:	18 d9       	rcall	.-3536   	; 0x25aa <lcd_goto>
    337a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    337e:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <test_PipeModule>
    3382:	60 93 dd 18 	sts	0x18DD, r22	; 0x8018dd <editLong>
    3386:	70 93 de 18 	sts	0x18DE, r23	; 0x8018de <editLong+0x1>
    338a:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <editLong+0x2>
    338e:	90 93 e0 18 	sts	0x18E0, r25	; 0x8018e0 <editLong+0x3>
    3392:	0e 94 c2 38 	call	0x7184	; 0x7184 <lcd_longout>
    3396:	80 e0       	ldi	r24, 0x00	; 0
    3398:	08 95       	ret

0000339a <menuOnEnterTune>:
    339a:	cf 93       	push	r28
    339c:	8f 3f       	cpi	r24, 0xFF	; 255
    339e:	09 f0       	breq	.+2      	; 0x33a2 <menuOnEnterTune+0x8>
    33a0:	77 c0       	rjmp	.+238    	; 0x3490 <menuOnEnterTune+0xf6>
    33a2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.2971>
    33a6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.2972>
    33aa:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    33ae:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    33b2:	3e 96       	adiw	r30, 0x0e	; 14
    33b4:	85 91       	lpm	r24, Z+
    33b6:	95 91       	lpm	r25, Z+
    33b8:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    33bc:	84 30       	cpi	r24, 0x04	; 4
    33be:	10 f0       	brcs	.+4      	; 0x33c4 <menuOnEnterTune+0x2a>
    33c0:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    33c4:	20 e0       	ldi	r18, 0x00	; 0
    33c6:	39 c0       	rjmp	.+114    	; 0x343a <menuOnEnterTune+0xa0>
    33c8:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	e2 2f       	mov	r30, r18
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	df 01       	movw	r26, r30
    33d4:	aa 0f       	add	r26, r26
    33d6:	bb 1f       	adc	r27, r27
    33d8:	ad 01       	movw	r20, r26
    33da:	4e 0f       	add	r20, r30
    33dc:	5f 1f       	adc	r21, r31
    33de:	dc 01       	movw	r26, r24
    33e0:	aa 0f       	add	r26, r26
    33e2:	bb 1f       	adc	r27, r27
    33e4:	a8 0f       	add	r26, r24
    33e6:	b9 1f       	adc	r27, r25
    33e8:	aa 0f       	add	r26, r26
    33ea:	bb 1f       	adc	r27, r27
    33ec:	aa 0f       	add	r26, r26
    33ee:	bb 1f       	adc	r27, r27
    33f0:	a4 0f       	add	r26, r20
    33f2:	b5 1f       	adc	r27, r21
    33f4:	ac 5c       	subi	r26, 0xCC	; 204
    33f6:	b6 4f       	sbci	r27, 0xF6	; 246
    33f8:	3c 91       	ld	r19, X
    33fa:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.2971>
    33fe:	34 17       	cp	r19, r20
    3400:	10 f4       	brcc	.+4      	; 0x3406 <menuOnEnterTune+0x6c>
    3402:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.2971>
    3406:	af 01       	movw	r20, r30
    3408:	44 0f       	add	r20, r20
    340a:	55 1f       	adc	r21, r21
    340c:	e4 0f       	add	r30, r20
    340e:	f5 1f       	adc	r31, r21
    3410:	ac 01       	movw	r20, r24
    3412:	44 0f       	add	r20, r20
    3414:	55 1f       	adc	r21, r21
    3416:	84 0f       	add	r24, r20
    3418:	95 1f       	adc	r25, r21
    341a:	88 0f       	add	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	88 0f       	add	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	e8 0f       	add	r30, r24
    3424:	f9 1f       	adc	r31, r25
    3426:	ec 5c       	subi	r30, 0xCC	; 204
    3428:	f6 4f       	sbci	r31, 0xF6	; 246
    342a:	81 81       	ldd	r24, Z+1	; 0x01
    342c:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.2972>
    3430:	98 17       	cp	r25, r24
    3432:	10 f4       	brcc	.+4      	; 0x3438 <menuOnEnterTune+0x9e>
    3434:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.2972>
    3438:	2f 5f       	subi	r18, 0xFF	; 255
    343a:	24 30       	cpi	r18, 0x04	; 4
    343c:	28 f2       	brcs	.-118    	; 0x33c8 <menuOnEnterTune+0x2e>
    343e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2971>
    3442:	88 23       	and	r24, r24
    3444:	4c f4       	brge	.+18     	; 0x3458 <menuOnEnterTune+0xbe>
    3446:	8e e1       	ldi	r24, 0x1E	; 30
    3448:	b0 d8       	rcall	.-3744   	; 0x25aa <lcd_goto>
    344a:	80 ea       	ldi	r24, 0xA0	; 160
    344c:	93 e0       	ldi	r25, 0x03	; 3
    344e:	1f d9       	rcall	.-3522   	; 0x268e <lcd_puts_P>
    3450:	8f ef       	ldi	r24, 0xFF	; 255
    3452:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    3456:	04 c0       	rjmp	.+8      	; 0x3460 <menuOnEnterTune+0xc6>
    3458:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    345c:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2973>
    3460:	63 e4       	ldi	r22, 0x43	; 67
    3462:	72 e1       	ldi	r23, 0x12	; 18
    3464:	80 e0       	ldi	r24, 0x00	; 0
    3466:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    346a:	62 e5       	ldi	r22, 0x52	; 82
    346c:	72 e1       	ldi	r23, 0x12	; 18
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    3474:	67 e5       	ldi	r22, 0x57	; 87
    3476:	72 e1       	ldi	r23, 0x12	; 18
    3478:	82 e0       	ldi	r24, 0x02	; 2
    347a:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    347e:	69 e5       	ldi	r22, 0x59	; 89
    3480:	72 e1       	ldi	r23, 0x12	; 18
    3482:	83 e0       	ldi	r24, 0x03	; 3
    3484:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    3488:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
    348c:	cf ef       	ldi	r28, 0xFF	; 255
    348e:	71 c0       	rjmp	.+226    	; 0x3572 <menuOnEnterTune+0x1d8>
    3490:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3494:	6f 3f       	cpi	r22, 0xFF	; 255
    3496:	09 f4       	brne	.+2      	; 0x349a <menuOnEnterTune+0x100>
    3498:	61 c0       	rjmp	.+194    	; 0x355c <menuOnEnterTune+0x1c2>
    349a:	81 30       	cpi	r24, 0x01	; 1
    349c:	d9 f4       	brne	.+54     	; 0x34d4 <menuOnEnterTune+0x13a>
    349e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.2972>
    34a2:	68 17       	cp	r22, r24
    34a4:	08 f0       	brcs	.+2      	; 0x34a8 <menuOnEnterTune+0x10e>
    34a6:	5c c0       	rjmp	.+184    	; 0x3560 <menuOnEnterTune+0x1c6>
    34a8:	40 e0       	ldi	r20, 0x00	; 0
    34aa:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    34ae:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <manual_NoteOnOff>
    34b2:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    34b6:	6f 5f       	subi	r22, 0xFF	; 255
    34b8:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    34bc:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2973>
    34c0:	81 30       	cpi	r24, 0x01	; 1
    34c2:	09 f0       	breq	.+2      	; 0x34c6 <menuOnEnterTune+0x12c>
    34c4:	4f c0       	rjmp	.+158    	; 0x3564 <menuOnEnterTune+0x1ca>
    34c6:	41 e0       	ldi	r20, 0x01	; 1
    34c8:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    34cc:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <manual_NoteOnOff>
    34d0:	cf ef       	ldi	r28, 0xFF	; 255
    34d2:	4f c0       	rjmp	.+158    	; 0x3572 <menuOnEnterTune+0x1d8>
    34d4:	84 30       	cpi	r24, 0x04	; 4
    34d6:	d1 f4       	brne	.+52     	; 0x350c <menuOnEnterTune+0x172>
    34d8:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2971>
    34dc:	86 17       	cp	r24, r22
    34de:	08 f0       	brcs	.+2      	; 0x34e2 <menuOnEnterTune+0x148>
    34e0:	43 c0       	rjmp	.+134    	; 0x3568 <menuOnEnterTune+0x1ce>
    34e2:	40 e0       	ldi	r20, 0x00	; 0
    34e4:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    34e8:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <manual_NoteOnOff>
    34ec:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    34f0:	61 50       	subi	r22, 0x01	; 1
    34f2:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    34f6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2973>
    34fa:	81 30       	cpi	r24, 0x01	; 1
    34fc:	b9 f5       	brne	.+110    	; 0x356c <menuOnEnterTune+0x1d2>
    34fe:	41 e0       	ldi	r20, 0x01	; 1
    3500:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3504:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <manual_NoteOnOff>
    3508:	cf ef       	ldi	r28, 0xFF	; 255
    350a:	33 c0       	rjmp	.+102    	; 0x3572 <menuOnEnterTune+0x1d8>
    350c:	83 30       	cpi	r24, 0x03	; 3
    350e:	91 f4       	brne	.+36     	; 0x3534 <menuOnEnterTune+0x19a>
    3510:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2973>
    3514:	81 11       	cpse	r24, r1
    3516:	04 c0       	rjmp	.+8      	; 0x3520 <menuOnEnterTune+0x186>
    3518:	81 e0       	ldi	r24, 0x01	; 1
    351a:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.2973>
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <menuOnEnterTune+0x18a>
    3520:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2973>
    3524:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.2973>
    3528:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    352c:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <manual_NoteOnOff>
    3530:	cf ef       	ldi	r28, 0xFF	; 255
    3532:	1f c0       	rjmp	.+62     	; 0x3572 <menuOnEnterTune+0x1d8>
    3534:	82 30       	cpi	r24, 0x02	; 2
    3536:	11 f0       	breq	.+4      	; 0x353c <menuOnEnterTune+0x1a2>
    3538:	86 30       	cpi	r24, 0x06	; 6
    353a:	39 f4       	brne	.+14     	; 0x354a <menuOnEnterTune+0x1b0>
    353c:	40 e0       	ldi	r20, 0x00	; 0
    353e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3542:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <manual_NoteOnOff>
    3546:	c0 e0       	ldi	r28, 0x00	; 0
    3548:	14 c0       	rjmp	.+40     	; 0x3572 <menuOnEnterTune+0x1d8>
    354a:	85 30       	cpi	r24, 0x05	; 5
    354c:	89 f4       	brne	.+34     	; 0x3570 <menuOnEnterTune+0x1d6>
    354e:	40 e0       	ldi	r20, 0x00	; 0
    3550:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3554:	0e 94 6a 31 	call	0x62d4	; 0x62d4 <manual_NoteOnOff>
    3558:	c0 e0       	ldi	r28, 0x00	; 0
    355a:	0b c0       	rjmp	.+22     	; 0x3572 <menuOnEnterTune+0x1d8>
    355c:	c0 e0       	ldi	r28, 0x00	; 0
    355e:	09 c0       	rjmp	.+18     	; 0x3572 <menuOnEnterTune+0x1d8>
    3560:	cf ef       	ldi	r28, 0xFF	; 255
    3562:	07 c0       	rjmp	.+14     	; 0x3572 <menuOnEnterTune+0x1d8>
    3564:	cf ef       	ldi	r28, 0xFF	; 255
    3566:	05 c0       	rjmp	.+10     	; 0x3572 <menuOnEnterTune+0x1d8>
    3568:	cf ef       	ldi	r28, 0xFF	; 255
    356a:	03 c0       	rjmp	.+6      	; 0x3572 <menuOnEnterTune+0x1d8>
    356c:	cf ef       	ldi	r28, 0xFF	; 255
    356e:	01 c0       	rjmp	.+2      	; 0x3572 <menuOnEnterTune+0x1d8>
    3570:	cf ef       	ldi	r28, 0xFF	; 255
    3572:	cf 3f       	cpi	r28, 0xFF	; 255
    3574:	61 f5       	brne	.+88     	; 0x35ce <menuOnEnterTune+0x234>
    3576:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    357a:	8f 3f       	cpi	r24, 0xFF	; 255
    357c:	29 f1       	breq	.+74     	; 0x35c8 <menuOnEnterTune+0x22e>
    357e:	8e e1       	ldi	r24, 0x1E	; 30
    3580:	14 d8       	rcall	.-4056   	; 0x25aa <lcd_goto>
    3582:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    3586:	0e 94 2f 3a 	call	0x745e	; 0x745e <lcd_noteOut>
    358a:	80 e2       	ldi	r24, 0x20	; 32
    358c:	38 d8       	rcall	.-3984   	; 0x25fe <lcd_putc>
    358e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2973>
    3592:	81 11       	cpse	r24, r1
    3594:	07 c0       	rjmp	.+14     	; 0x35a4 <menuOnEnterTune+0x20a>
    3596:	81 e6       	ldi	r24, 0x61	; 97
    3598:	32 d8       	rcall	.-3996   	; 0x25fe <lcd_putc>
    359a:	85 e7       	ldi	r24, 0x75	; 117
    359c:	30 d8       	rcall	.-4000   	; 0x25fe <lcd_putc>
    359e:	83 e7       	ldi	r24, 0x73	; 115
    35a0:	2e d8       	rcall	.-4004   	; 0x25fe <lcd_putc>
    35a2:	06 c0       	rjmp	.+12     	; 0x35b0 <menuOnEnterTune+0x216>
    35a4:	85 e6       	ldi	r24, 0x65	; 101
    35a6:	2b d8       	rcall	.-4010   	; 0x25fe <lcd_putc>
    35a8:	89 e6       	ldi	r24, 0x69	; 105
    35aa:	29 d8       	rcall	.-4014   	; 0x25fe <lcd_putc>
    35ac:	8e e6       	ldi	r24, 0x6E	; 110
    35ae:	27 d8       	rcall	.-4018   	; 0x25fe <lcd_putc>
    35b0:	61 e0       	ldi	r22, 0x01	; 1
    35b2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2973>
    35b6:	81 11       	cpse	r24, r1
    35b8:	01 c0       	rjmp	.+2      	; 0x35bc <menuOnEnterTune+0x222>
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <keylabel_statcheck>
    35c2:	81 11       	cpse	r24, r1
    35c4:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
    35c8:	8e e1       	ldi	r24, 0x1E	; 30
    35ca:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    35ce:	8c 2f       	mov	r24, r28
    35d0:	cf 91       	pop	r28
    35d2:	08 95       	ret

000035d4 <menuOnExitMidiActiveSense>:
    35d4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <eeprom_UpdateMidiOutMap>
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	08 95       	ret

000035dc <menuOnExitMidiOut>:
    35dc:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <eeprom_UpdateMidiOutMap>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	08 95       	ret

000035e4 <menuOnExitMidiIn>:
    35e4:	0e 94 bf 0b 	call	0x177e	; 0x177e <eeprom_UpdateMidiInMap>
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	08 95       	ret

000035ec <menuOnExitManual>:
    35ec:	0e 94 9d 0b 	call	0x173a	; 0x173a <eeprom_UpdateManualMap>
    35f0:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <registers_CalcCount>
    35f4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <eeprom_UpdateReg>
    35f8:	0e 94 6f 30 	call	0x60de	; 0x60de <Midi_updateManualRange>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	08 95       	ret

00003600 <menuOnExitModules>:
    3600:	0e 94 11 0c 	call	0x1822	; 0x1822 <eeprom_UpdateModules>
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	08 95       	ret

00003608 <menuOnEnterUSBprotokoll>:
    3608:	cf 93       	push	r28
    360a:	83 e8       	ldi	r24, 0x83	; 131
    360c:	93 e0       	ldi	r25, 0x03	; 3
    360e:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3612:	58 d8       	rcall	.-3920   	; 0x26c4 <log_count>
    3614:	81 11       	cpse	r24, r1
    3616:	17 c0       	rjmp	.+46     	; 0x3646 <menuOnEnterUSBprotokoll+0x3e>
    3618:	89 e8       	ldi	r24, 0x89	; 137
    361a:	93 e0       	ldi	r25, 0x03	; 3
    361c:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3620:	16 c0       	rjmp	.+44     	; 0x364e <menuOnEnterUSBprotokoll+0x46>
    3622:	6f ef       	ldi	r22, 0xFF	; 255
    3624:	8c 2f       	mov	r24, r28
    3626:	ef d9       	rcall	.-3106   	; 0x2a06 <log_getShortTextFromIndex>
    3628:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    362c:	8b e7       	ldi	r24, 0x7B	; 123
    362e:	92 e1       	ldi	r25, 0x12	; 18
    3630:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3634:	8c 2f       	mov	r24, r28
    3636:	8d d8       	rcall	.-3814   	; 0x2752 <log_getErrorText>
    3638:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    363c:	8b e7       	ldi	r24, 0x7B	; 123
    363e:	92 e1       	ldi	r25, 0x12	; 18
    3640:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3644:	8c 2f       	mov	r24, r28
    3646:	cf ef       	ldi	r28, 0xFF	; 255
    3648:	c8 0f       	add	r28, r24
    364a:	81 11       	cpse	r24, r1
    364c:	ea cf       	rjmp	.-44     	; 0x3622 <menuOnEnterUSBprotokoll+0x1a>
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	cf 91       	pop	r28
    3652:	08 95       	ret

00003654 <menuOnExitUSBactive>:
    3654:	0e 94 3b 0c 	call	0x1876	; 0x1876 <eeprom_UpdateUSB>
    3658:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    365c:	8f 3f       	cpi	r24, 0xFF	; 255
    365e:	61 f4       	brne	.+24     	; 0x3678 <menuOnExitUSBactive+0x24>
    3660:	8a e6       	ldi	r24, 0x6A	; 106
    3662:	93 e0       	ldi	r25, 0x03	; 3
    3664:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3668:	8b e1       	ldi	r24, 0x1B	; 27
    366a:	92 e1       	ldi	r25, 0x12	; 18
    366c:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3670:	8b e7       	ldi	r24, 0x7B	; 123
    3672:	92 e1       	ldi	r25, 0x12	; 18
    3674:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	08 95       	ret

0000367c <menuOnEnterUSBsendHW>:
    367c:	9f 92       	push	r9
    367e:	af 92       	push	r10
    3680:	bf 92       	push	r11
    3682:	cf 92       	push	r12
    3684:	df 92       	push	r13
    3686:	ef 92       	push	r14
    3688:	ff 92       	push	r15
    368a:	0f 93       	push	r16
    368c:	1f 93       	push	r17
    368e:	cf 93       	push	r28
    3690:	df 93       	push	r29
    3692:	81 e5       	ldi	r24, 0x51	; 81
    3694:	93 e0       	ldi	r25, 0x03	; 3
    3696:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    369a:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    369e:	8e e3       	ldi	r24, 0x3E	; 62
    36a0:	93 e0       	ldi	r25, 0x03	; 3
    36a2:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    36a6:	c5 e5       	ldi	r28, 0x55	; 85
    36a8:	d3 e0       	ldi	r29, 0x03	; 3
    36aa:	61 ee       	ldi	r22, 0xE1	; 225
    36ac:	78 e1       	ldi	r23, 0x18	; 24
    36ae:	88 81       	ld	r24, Y
    36b0:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    36b4:	22 e7       	ldi	r18, 0x72	; 114
    36b6:	fc 01       	movw	r30, r24
    36b8:	20 83       	st	Z, r18
    36ba:	bc 01       	movw	r22, r24
    36bc:	6e 5f       	subi	r22, 0xFE	; 254
    36be:	7f 4f       	sbci	r23, 0xFF	; 255
    36c0:	20 e2       	ldi	r18, 0x20	; 32
    36c2:	21 83       	std	Z+1, r18	; 0x01
    36c4:	89 81       	ldd	r24, Y+1	; 0x01
    36c6:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    36ca:	27 e7       	ldi	r18, 0x77	; 119
    36cc:	fc 01       	movw	r30, r24
    36ce:	20 83       	st	Z, r18
    36d0:	81 ee       	ldi	r24, 0xE1	; 225
    36d2:	98 e1       	ldi	r25, 0x18	; 24
    36d4:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    36d8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    36dc:	8c e2       	ldi	r24, 0x2C	; 44
    36de:	93 e0       	ldi	r25, 0x03	; 3
    36e0:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    36e4:	61 ee       	ldi	r22, 0xE1	; 225
    36e6:	78 e1       	ldi	r23, 0x18	; 24
    36e8:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    36ec:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    36f0:	81 ee       	ldi	r24, 0xE1	; 225
    36f2:	98 e1       	ldi	r25, 0x18	; 24
    36f4:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    36f8:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    36fc:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3700:	e1 2c       	mov	r14, r1
    3702:	d1 c0       	rjmp	.+418    	; 0x38a6 <menuOnEnterUSBsendHW+0x22a>
    3704:	83 e2       	ldi	r24, 0x23	; 35
    3706:	93 e0       	ldi	r25, 0x03	; 3
    3708:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    370c:	61 ee       	ldi	r22, 0xE1	; 225
    370e:	78 e1       	ldi	r23, 0x18	; 24
    3710:	8e 2d       	mov	r24, r14
    3712:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <putChar_Manual>
    3716:	81 ee       	ldi	r24, 0xE1	; 225
    3718:	98 e1       	ldi	r25, 0x18	; 24
    371a:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    371e:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3722:	f1 2c       	mov	r15, r1
    3724:	a4 c0       	rjmp	.+328    	; 0x386e <menuOnEnterUSBsendHW+0x1f2>
    3726:	8c e1       	ldi	r24, 0x1C	; 28
    3728:	93 e0       	ldi	r25, 0x03	; 3
    372a:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    372e:	80 e3       	ldi	r24, 0x30	; 48
    3730:	8f 0d       	add	r24, r15
    3732:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    3736:	8a e3       	ldi	r24, 0x3A	; 58
    3738:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    373c:	80 e2       	ldi	r24, 0x20	; 32
    373e:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    3742:	0e 2d       	mov	r16, r14
    3744:	10 e0       	ldi	r17, 0x00	; 0
    3746:	cf 2c       	mov	r12, r15
    3748:	d1 2c       	mov	r13, r1
    374a:	e6 01       	movw	r28, r12
    374c:	cc 0f       	add	r28, r28
    374e:	dd 1f       	adc	r29, r29
    3750:	ce 01       	movw	r24, r28
    3752:	8c 0d       	add	r24, r12
    3754:	9d 1d       	adc	r25, r13
    3756:	e8 01       	movw	r28, r16
    3758:	cc 0f       	add	r28, r28
    375a:	dd 1f       	adc	r29, r29
    375c:	c0 0f       	add	r28, r16
    375e:	d1 1f       	adc	r29, r17
    3760:	cc 0f       	add	r28, r28
    3762:	dd 1f       	adc	r29, r29
    3764:	cc 0f       	add	r28, r28
    3766:	dd 1f       	adc	r29, r29
    3768:	c8 0f       	add	r28, r24
    376a:	d9 1f       	adc	r29, r25
    376c:	cc 5c       	subi	r28, 0xCC	; 204
    376e:	d6 4f       	sbci	r29, 0xF6	; 246
    3770:	61 ee       	ldi	r22, 0xE1	; 225
    3772:	78 e1       	ldi	r23, 0x18	; 24
    3774:	88 81       	ld	r24, Y
    3776:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    377a:	bc 01       	movw	r22, r24
    377c:	6f 5f       	subi	r22, 0xFF	; 255
    377e:	7f 4f       	sbci	r23, 0xFF	; 255
    3780:	0f 2e       	mov	r0, r31
    3782:	fe e2       	ldi	r31, 0x2E	; 46
    3784:	bf 2e       	mov	r11, r31
    3786:	f0 2d       	mov	r31, r0
    3788:	fc 01       	movw	r30, r24
    378a:	b0 82       	st	Z, r11
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    3792:	bc 01       	movw	r22, r24
    3794:	6f 5f       	subi	r22, 0xFF	; 255
    3796:	7f 4f       	sbci	r23, 0xFF	; 255
    3798:	fc 01       	movw	r30, r24
    379a:	b0 82       	st	Z, r11
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    37a2:	fc 01       	movw	r30, r24
    37a4:	80 e2       	ldi	r24, 0x20	; 32
    37a6:	80 83       	st	Z, r24
    37a8:	9d e3       	ldi	r25, 0x3D	; 61
    37aa:	91 83       	std	Z+1, r25	; 0x01
    37ac:	82 83       	std	Z+2, r24	; 0x02
    37ae:	81 ee       	ldi	r24, 0xE1	; 225
    37b0:	98 e1       	ldi	r25, 0x18	; 24
    37b2:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    37b6:	88 81       	ld	r24, Y
    37b8:	88 23       	and	r24, r24
    37ba:	2c f4       	brge	.+10     	; 0x37c6 <menuOnEnterUSBsendHW+0x14a>
    37bc:	8a e0       	ldi	r24, 0x0A	; 10
    37be:	93 e0       	ldi	r25, 0x03	; 3
    37c0:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    37c4:	51 c0       	rjmp	.+162    	; 0x3868 <menuOnEnterUSBsendHW+0x1ec>
    37c6:	61 ee       	ldi	r22, 0xE1	; 225
    37c8:	78 e1       	ldi	r23, 0x18	; 24
    37ca:	0e 94 9c 39 	call	0x7338	; 0x7338 <putChar_Note>
    37ce:	bc 01       	movw	r22, r24
    37d0:	6f 5f       	subi	r22, 0xFF	; 255
    37d2:	7f 4f       	sbci	r23, 0xFF	; 255
    37d4:	0f 2e       	mov	r0, r31
    37d6:	fd e2       	ldi	r31, 0x2D	; 45
    37d8:	9f 2e       	mov	r9, r31
    37da:	f0 2d       	mov	r31, r0
    37dc:	fc 01       	movw	r30, r24
    37de:	90 82       	st	Z, r9
    37e0:	f6 01       	movw	r30, r12
    37e2:	ee 0f       	add	r30, r30
    37e4:	ff 1f       	adc	r31, r31
    37e6:	ce 0e       	add	r12, r30
    37e8:	df 1e       	adc	r13, r31
    37ea:	58 01       	movw	r10, r16
    37ec:	aa 0c       	add	r10, r10
    37ee:	bb 1c       	adc	r11, r11
    37f0:	e5 01       	movw	r28, r10
    37f2:	c0 0f       	add	r28, r16
    37f4:	d1 1f       	adc	r29, r17
    37f6:	cc 0f       	add	r28, r28
    37f8:	dd 1f       	adc	r29, r29
    37fa:	cc 0f       	add	r28, r28
    37fc:	dd 1f       	adc	r29, r29
    37fe:	cc 0d       	add	r28, r12
    3800:	dd 1d       	adc	r29, r13
    3802:	cc 5c       	subi	r28, 0xCC	; 204
    3804:	d6 4f       	sbci	r29, 0xF6	; 246
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	0e 94 9c 39 	call	0x7338	; 0x7338 <putChar_Note>
    380c:	20 e2       	ldi	r18, 0x20	; 32
    380e:	fc 01       	movw	r30, r24
    3810:	20 83       	st	Z, r18
    3812:	11 82       	std	Z+1, r1	; 0x01
    3814:	81 ee       	ldi	r24, 0xE1	; 225
    3816:	98 e1       	ldi	r25, 0x18	; 24
    3818:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    381c:	82 e0       	ldi	r24, 0x02	; 2
    381e:	93 e0       	ldi	r25, 0x03	; 3
    3820:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	82 95       	swap	r24
    3828:	86 95       	lsr	r24
    382a:	87 70       	andi	r24, 0x07	; 7
    382c:	80 5d       	subi	r24, 0xD0	; 208
    382e:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    3832:	8a ef       	ldi	r24, 0xFA	; 250
    3834:	92 e0       	ldi	r25, 0x02	; 2
    3836:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	61 ee       	ldi	r22, 0xE1	; 225
    383e:	78 e1       	ldi	r23, 0x18	; 24
    3840:	8f 71       	andi	r24, 0x1F	; 31
    3842:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    3846:	bc 01       	movw	r22, r24
    3848:	6f 5f       	subi	r22, 0xFF	; 255
    384a:	7f 4f       	sbci	r23, 0xFF	; 255
    384c:	fc 01       	movw	r30, r24
    384e:	90 82       	st	Z, r9
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	99 81       	ldd	r25, Y+1	; 0x01
    3854:	28 81       	ld	r18, Y
    3856:	8f 71       	andi	r24, 0x1F	; 31
    3858:	89 0f       	add	r24, r25
    385a:	82 1b       	sub	r24, r18
    385c:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    3860:	81 ee       	ldi	r24, 0xE1	; 225
    3862:	98 e1       	ldi	r25, 0x18	; 24
    3864:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    3868:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    386c:	f3 94       	inc	r15
    386e:	f3 e0       	ldi	r31, 0x03	; 3
    3870:	ff 15       	cp	r31, r15
    3872:	08 f0       	brcs	.+2      	; 0x3876 <menuOnEnterUSBsendHW+0x1fa>
    3874:	58 cf       	rjmp	.-336    	; 0x3726 <menuOnEnterUSBsendHW+0xaa>
    3876:	88 ed       	ldi	r24, 0xD8	; 216
    3878:	92 e0       	ldi	r25, 0x02	; 2
    387a:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    387e:	ee 2d       	mov	r30, r14
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	ee 0f       	add	r30, r30
    3884:	ff 1f       	adc	r31, r31
    3886:	e8 5d       	subi	r30, 0xD8	; 216
    3888:	f6 4f       	sbci	r31, 0xF6	; 246
    388a:	61 ee       	ldi	r22, 0xE1	; 225
    388c:	78 e1       	ldi	r23, 0x18	; 24
    388e:	81 81       	ldd	r24, Z+1	; 0x01
    3890:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <putChar_MidiChan>
    3894:	81 ee       	ldi	r24, 0xE1	; 225
    3896:	98 e1       	ldi	r25, 0x18	; 24
    3898:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    389c:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    38a0:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    38a4:	e3 94       	inc	r14
    38a6:	83 e0       	ldi	r24, 0x03	; 3
    38a8:	8e 15       	cp	r24, r14
    38aa:	08 f0       	brcs	.+2      	; 0x38ae <menuOnEnterUSBsendHW+0x232>
    38ac:	2b cf       	rjmp	.-426    	; 0x3704 <menuOnEnterUSBsendHW+0x88>
    38ae:	80 e1       	ldi	r24, 0x10	; 16
    38b0:	93 e0       	ldi	r25, 0x03	; 3
    38b2:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    38b6:	f1 2c       	mov	r15, r1
    38b8:	94 c0       	rjmp	.+296    	; 0x39e2 <menuOnEnterUSBsendHW+0x366>
    38ba:	8c e1       	ldi	r24, 0x1C	; 28
    38bc:	93 e0       	ldi	r25, 0x03	; 3
    38be:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    38c2:	80 e3       	ldi	r24, 0x30	; 48
    38c4:	8f 0d       	add	r24, r15
    38c6:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    38ca:	8a e3       	ldi	r24, 0x3A	; 58
    38cc:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    38d0:	80 e2       	ldi	r24, 0x20	; 32
    38d2:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    38d6:	cf 2d       	mov	r28, r15
    38d8:	d0 e0       	ldi	r29, 0x00	; 0
    38da:	8e 01       	movw	r16, r28
    38dc:	00 0f       	add	r16, r16
    38de:	11 1f       	adc	r17, r17
    38e0:	0c 0f       	add	r16, r28
    38e2:	1d 1f       	adc	r17, r29
    38e4:	09 50       	subi	r16, 0x09	; 9
    38e6:	18 4f       	sbci	r17, 0xF8	; 248
    38e8:	61 ee       	ldi	r22, 0xE1	; 225
    38ea:	78 e1       	ldi	r23, 0x18	; 24
    38ec:	f8 01       	movw	r30, r16
    38ee:	80 81       	ld	r24, Z
    38f0:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    38f4:	bc 01       	movw	r22, r24
    38f6:	6f 5f       	subi	r22, 0xFF	; 255
    38f8:	7f 4f       	sbci	r23, 0xFF	; 255
    38fa:	0f 2e       	mov	r0, r31
    38fc:	fe e2       	ldi	r31, 0x2E	; 46
    38fe:	ef 2e       	mov	r14, r31
    3900:	f0 2d       	mov	r31, r0
    3902:	fc 01       	movw	r30, r24
    3904:	e0 82       	st	Z, r14
    3906:	f8 01       	movw	r30, r16
    3908:	81 81       	ldd	r24, Z+1	; 0x01
    390a:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    390e:	bc 01       	movw	r22, r24
    3910:	6f 5f       	subi	r22, 0xFF	; 255
    3912:	7f 4f       	sbci	r23, 0xFF	; 255
    3914:	fc 01       	movw	r30, r24
    3916:	e0 82       	st	Z, r14
    3918:	f8 01       	movw	r30, r16
    391a:	82 81       	ldd	r24, Z+2	; 0x02
    391c:	0e 94 44 39 	call	0x7288	; 0x7288 <putChar_hex>
    3920:	fc 01       	movw	r30, r24
    3922:	80 e2       	ldi	r24, 0x20	; 32
    3924:	80 83       	st	Z, r24
    3926:	9d e3       	ldi	r25, 0x3D	; 61
    3928:	91 83       	std	Z+1, r25	; 0x01
    392a:	82 83       	std	Z+2, r24	; 0x02
    392c:	13 82       	std	Z+3, r1	; 0x03
    392e:	81 ee       	ldi	r24, 0xE1	; 225
    3930:	98 e1       	ldi	r25, 0x18	; 24
    3932:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    3936:	f8 01       	movw	r30, r16
    3938:	80 81       	ld	r24, Z
    393a:	8f 3f       	cpi	r24, 0xFF	; 255
    393c:	29 f4       	brne	.+10     	; 0x3948 <menuOnEnterUSBsendHW+0x2cc>
    393e:	8a e0       	ldi	r24, 0x0A	; 10
    3940:	93 e0       	ldi	r25, 0x03	; 3
    3942:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3946:	4a c0       	rjmp	.+148    	; 0x39dc <menuOnEnterUSBsendHW+0x360>
    3948:	e1 ee       	ldi	r30, 0xE1	; 225
    394a:	f8 e1       	ldi	r31, 0x18	; 24
    394c:	92 e5       	ldi	r25, 0x52	; 82
    394e:	90 83       	st	Z, r25
    3950:	9e e2       	ldi	r25, 0x2E	; 46
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	63 ee       	ldi	r22, 0xE3	; 227
    3956:	78 e1       	ldi	r23, 0x18	; 24
    3958:	8f 5f       	subi	r24, 0xFF	; 255
    395a:	0e 94 1d 39 	call	0x723a	; 0x723a <putChar_Dec>
    395e:	bc 01       	movw	r22, r24
    3960:	6f 5f       	subi	r22, 0xFF	; 255
    3962:	7f 4f       	sbci	r23, 0xFF	; 255
    3964:	1d e2       	ldi	r17, 0x2D	; 45
    3966:	fc 01       	movw	r30, r24
    3968:	10 83       	st	Z, r17
    396a:	ce 01       	movw	r24, r28
    396c:	88 0f       	add	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	c8 0f       	add	r28, r24
    3972:	d9 1f       	adc	r29, r25
    3974:	c9 50       	subi	r28, 0x09	; 9
    3976:	d8 4f       	sbci	r29, 0xF8	; 248
    3978:	89 81       	ldd	r24, Y+1	; 0x01
    397a:	8f 5f       	subi	r24, 0xFF	; 255
    397c:	0e 94 1d 39 	call	0x723a	; 0x723a <putChar_Dec>
    3980:	20 e2       	ldi	r18, 0x20	; 32
    3982:	fc 01       	movw	r30, r24
    3984:	20 83       	st	Z, r18
    3986:	11 82       	std	Z+1, r1	; 0x01
    3988:	81 ee       	ldi	r24, 0xE1	; 225
    398a:	98 e1       	ldi	r25, 0x18	; 24
    398c:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    3990:	82 e0       	ldi	r24, 0x02	; 2
    3992:	93 e0       	ldi	r25, 0x03	; 3
    3994:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3998:	8a 81       	ldd	r24, Y+2	; 0x02
    399a:	82 95       	swap	r24
    399c:	86 95       	lsr	r24
    399e:	87 70       	andi	r24, 0x07	; 7
    39a0:	80 5d       	subi	r24, 0xD0	; 208
    39a2:	0e 94 7d 35 	call	0x6afa	; 0x6afa <serial0SER_USBSend>
    39a6:	8a ef       	ldi	r24, 0xFA	; 250
    39a8:	92 e0       	ldi	r25, 0x02	; 2
    39aa:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	61 ee       	ldi	r22, 0xE1	; 225
    39b2:	78 e1       	ldi	r23, 0x18	; 24
    39b4:	8f 71       	andi	r24, 0x1F	; 31
    39b6:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    39ba:	bc 01       	movw	r22, r24
    39bc:	6f 5f       	subi	r22, 0xFF	; 255
    39be:	7f 4f       	sbci	r23, 0xFF	; 255
    39c0:	fc 01       	movw	r30, r24
    39c2:	10 83       	st	Z, r17
    39c4:	8a 81       	ldd	r24, Y+2	; 0x02
    39c6:	99 81       	ldd	r25, Y+1	; 0x01
    39c8:	28 81       	ld	r18, Y
    39ca:	8f 71       	andi	r24, 0x1F	; 31
    39cc:	89 0f       	add	r24, r25
    39ce:	82 1b       	sub	r24, r18
    39d0:	0e 94 01 39 	call	0x7202	; 0x7202 <putChar_Dec2>
    39d4:	81 ee       	ldi	r24, 0xE1	; 225
    39d6:	98 e1       	ldi	r25, 0x18	; 24
    39d8:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    39dc:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    39e0:	f3 94       	inc	r15
    39e2:	f7 e0       	ldi	r31, 0x07	; 7
    39e4:	ff 15       	cp	r31, r15
    39e6:	08 f0       	brcs	.+2      	; 0x39ea <menuOnEnterUSBsendHW+0x36e>
    39e8:	68 cf       	rjmp	.-304    	; 0x38ba <menuOnEnterUSBsendHW+0x23e>
    39ea:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    39ee:	8f ec       	ldi	r24, 0xCF	; 207
    39f0:	92 e0       	ldi	r25, 0x02	; 2
    39f2:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    39f6:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    39fa:	e1 2c       	mov	r14, r1
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	64 c0       	rjmp	.+200    	; 0x3ac8 <menuOnEnterUSBsendHW+0x44c>
    3a00:	ce 2d       	mov	r28, r14
    3a02:	d0 e0       	ldi	r29, 0x00	; 0
    3a04:	0f 2d       	mov	r16, r15
    3a06:	10 e0       	ldi	r17, 0x00	; 0
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ee 0f       	add	r30, r30
    3a0c:	ff 1f       	adc	r31, r31
    3a0e:	ee 0f       	add	r30, r30
    3a10:	ff 1f       	adc	r31, r31
    3a12:	e0 0f       	add	r30, r16
    3a14:	f1 1f       	adc	r31, r17
    3a16:	ee 0f       	add	r30, r30
    3a18:	ff 1f       	adc	r31, r31
    3a1a:	ee 0f       	add	r30, r30
    3a1c:	ff 1f       	adc	r31, r31
    3a1e:	e8 5d       	subi	r30, 0xD8	; 216
    3a20:	f7 4f       	sbci	r31, 0xF7	; 247
    3a22:	80 81       	ld	r24, Z
    3a24:	8f 3f       	cpi	r24, 0xFF	; 255
    3a26:	09 f4       	brne	.+2      	; 0x3a2a <menuOnEnterUSBsendHW+0x3ae>
    3a28:	47 c0       	rjmp	.+142    	; 0x3ab8 <menuOnEnterUSBsendHW+0x43c>
    3a2a:	61 ee       	ldi	r22, 0xE1	; 225
    3a2c:	78 e1       	ldi	r23, 0x18	; 24
    3a2e:	8e 2d       	mov	r24, r14
    3a30:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <putChar_MidiChan>
    3a34:	bc 01       	movw	r22, r24
    3a36:	6f 5f       	subi	r22, 0xFF	; 255
    3a38:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3a:	0f 2e       	mov	r0, r31
    3a3c:	f8 e2       	ldi	r31, 0x28	; 40
    3a3e:	df 2e       	mov	r13, r31
    3a40:	f0 2d       	mov	r31, r0
    3a42:	fc 01       	movw	r30, r24
    3a44:	d0 82       	st	Z, r13
    3a46:	cc 0f       	add	r28, r28
    3a48:	dd 1f       	adc	r29, r29
    3a4a:	cc 0f       	add	r28, r28
    3a4c:	dd 1f       	adc	r29, r29
    3a4e:	c0 0f       	add	r28, r16
    3a50:	d1 1f       	adc	r29, r17
    3a52:	cc 0f       	add	r28, r28
    3a54:	dd 1f       	adc	r29, r29
    3a56:	cc 0f       	add	r28, r28
    3a58:	dd 1f       	adc	r29, r29
    3a5a:	c8 5d       	subi	r28, 0xD8	; 216
    3a5c:	d7 4f       	sbci	r29, 0xF7	; 247
    3a5e:	89 81       	ldd	r24, Y+1	; 0x01
    3a60:	0e 94 9c 39 	call	0x7338	; 0x7338 <putChar_Note>
    3a64:	bc 01       	movw	r22, r24
    3a66:	6f 5f       	subi	r22, 0xFF	; 255
    3a68:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6a:	2d e2       	ldi	r18, 0x2D	; 45
    3a6c:	fc 01       	movw	r30, r24
    3a6e:	20 83       	st	Z, r18
    3a70:	99 81       	ldd	r25, Y+1	; 0x01
    3a72:	8a 81       	ldd	r24, Y+2	; 0x02
    3a74:	89 0f       	add	r24, r25
    3a76:	0e 94 9c 39 	call	0x7338	; 0x7338 <putChar_Note>
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	19 e2       	ldi	r17, 0x29	; 41
    3a7e:	10 83       	st	Z, r17
    3a80:	80 e2       	ldi	r24, 0x20	; 32
    3a82:	81 83       	std	Z+1, r24	; 0x01
    3a84:	bf 01       	movw	r22, r30
    3a86:	6d 5f       	subi	r22, 0xFD	; 253
    3a88:	7f 4f       	sbci	r23, 0xFF	; 255
    3a8a:	8e e3       	ldi	r24, 0x3E	; 62
    3a8c:	82 83       	std	Z+2, r24	; 0x02
    3a8e:	88 81       	ld	r24, Y
    3a90:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <putChar_Manual>
    3a94:	bc 01       	movw	r22, r24
    3a96:	6f 5f       	subi	r22, 0xFF	; 255
    3a98:	7f 4f       	sbci	r23, 0xFF	; 255
    3a9a:	fc 01       	movw	r30, r24
    3a9c:	d0 82       	st	Z, r13
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa0:	0e 94 9c 39 	call	0x7338	; 0x7338 <putChar_Note>
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	10 83       	st	Z, r17
    3aa8:	11 82       	std	Z+1, r1	; 0x01
    3aaa:	81 ee       	ldi	r24, 0xE1	; 225
    3aac:	98 e1       	ldi	r25, 0x18	; 24
    3aae:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    3ab2:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3ab6:	9f ef       	ldi	r25, 0xFF	; 255
    3ab8:	f3 94       	inc	r15
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <menuOnEnterUSBsendHW+0x442>
    3abc:	f1 2c       	mov	r15, r1
    3abe:	f3 e0       	ldi	r31, 0x03	; 3
    3ac0:	ff 15       	cp	r31, r15
    3ac2:	08 f0       	brcs	.+2      	; 0x3ac6 <menuOnEnterUSBsendHW+0x44a>
    3ac4:	9d cf       	rjmp	.-198    	; 0x3a00 <menuOnEnterUSBsendHW+0x384>
    3ac6:	e3 94       	inc	r14
    3ac8:	8f e0       	ldi	r24, 0x0F	; 15
    3aca:	8e 15       	cp	r24, r14
    3acc:	b8 f7       	brcc	.-18     	; 0x3abc <menuOnEnterUSBsendHW+0x440>
    3ace:	91 11       	cpse	r25, r1
    3ad0:	06 c0       	rjmp	.+12     	; 0x3ade <menuOnEnterUSBsendHW+0x462>
    3ad2:	84 eb       	ldi	r24, 0xB4	; 180
    3ad4:	92 e0       	ldi	r25, 0x02	; 2
    3ad6:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3ada:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3ade:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3ae2:	85 ec       	ldi	r24, 0xC5	; 197
    3ae4:	92 e0       	ldi	r25, 0x02	; 2
    3ae6:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3aea:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3aee:	c0 e0       	ldi	r28, 0x00	; 0
    3af0:	25 c0       	rjmp	.+74     	; 0x3b3c <menuOnEnterUSBsendHW+0x4c0>
    3af2:	61 ee       	ldi	r22, 0xE1	; 225
    3af4:	78 e1       	ldi	r23, 0x18	; 24
    3af6:	8c 2f       	mov	r24, r28
    3af8:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <putChar_Manual>
    3afc:	dc 01       	movw	r26, r24
    3afe:	bc 01       	movw	r22, r24
    3b00:	6f 5f       	subi	r22, 0xFF	; 255
    3b02:	7f 4f       	sbci	r23, 0xFF	; 255
    3b04:	8a e3       	ldi	r24, 0x3A	; 58
    3b06:	8c 93       	st	X, r24
    3b08:	ec 2f       	mov	r30, r28
    3b0a:	f0 e0       	ldi	r31, 0x00	; 0
    3b0c:	ee 0f       	add	r30, r30
    3b0e:	ff 1f       	adc	r31, r31
    3b10:	e8 5d       	subi	r30, 0xD8	; 216
    3b12:	f6 4f       	sbci	r31, 0xF6	; 246
    3b14:	80 81       	ld	r24, Z
    3b16:	8f 3f       	cpi	r24, 0xFF	; 255
    3b18:	19 f0       	breq	.+6      	; 0x3b20 <menuOnEnterUSBsendHW+0x4a4>
    3b1a:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <putChar_MidiChan>
    3b1e:	05 c0       	rjmp	.+10     	; 0x3b2a <menuOnEnterUSBsendHW+0x4ae>
    3b20:	cd 01       	movw	r24, r26
    3b22:	02 96       	adiw	r24, 0x02	; 2
    3b24:	2d e2       	ldi	r18, 0x2D	; 45
    3b26:	11 96       	adiw	r26, 0x01	; 1
    3b28:	2c 93       	st	X, r18
    3b2a:	fc 01       	movw	r30, r24
    3b2c:	10 82       	st	Z, r1
    3b2e:	81 ee       	ldi	r24, 0xE1	; 225
    3b30:	98 e1       	ldi	r25, 0x18	; 24
    3b32:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    3b36:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3b3a:	cf 5f       	subi	r28, 0xFF	; 255
    3b3c:	c4 30       	cpi	r28, 0x04	; 4
    3b3e:	c8 f2       	brcs	.-78     	; 0x3af2 <menuOnEnterUSBsendHW+0x476>
    3b40:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3b44:	89 eb       	ldi	r24, 0xB9	; 185
    3b46:	92 e0       	ldi	r25, 0x02	; 2
    3b48:	0e 94 73 36 	call	0x6ce6	; 0x6ce6 <serial0SER_USB_sendStringP>
    3b4c:	c6 e2       	ldi	r28, 0x26	; 38
    3b4e:	d8 e0       	ldi	r29, 0x08	; 8
    3b50:	61 ee       	ldi	r22, 0xE1	; 225
    3b52:	78 e1       	ldi	r23, 0x18	; 24
    3b54:	88 81       	ld	r24, Y
    3b56:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <putChar_MidiChan>
    3b5a:	bc 01       	movw	r22, r24
    3b5c:	6f 5f       	subi	r22, 0xFF	; 255
    3b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b60:	2e e3       	ldi	r18, 0x3E	; 62
    3b62:	fc 01       	movw	r30, r24
    3b64:	20 83       	st	Z, r18
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	0e 94 5c 39 	call	0x72b8	; 0x72b8 <putChar_MidiChan>
    3b6c:	fc 01       	movw	r30, r24
    3b6e:	10 82       	st	Z, r1
    3b70:	81 ee       	ldi	r24, 0xE1	; 225
    3b72:	98 e1       	ldi	r25, 0x18	; 24
    3b74:	0e 94 c7 36 	call	0x6d8e	; 0x6d8e <serial0SER_USB_sendString>
    3b78:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <serial0SER_USB_sendCRLF>
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	df 91       	pop	r29
    3b80:	cf 91       	pop	r28
    3b82:	1f 91       	pop	r17
    3b84:	0f 91       	pop	r16
    3b86:	ff 90       	pop	r15
    3b88:	ef 90       	pop	r14
    3b8a:	df 90       	pop	r13
    3b8c:	cf 90       	pop	r12
    3b8e:	bf 90       	pop	r11
    3b90:	af 90       	pop	r10
    3b92:	9f 90       	pop	r9
    3b94:	08 95       	ret

00003b96 <reverseRegisterBits>:
    3b96:	1f 93       	push	r17
    3b98:	cf 93       	push	r28
    3b9a:	df 93       	push	r29
    3b9c:	10 e0       	ldi	r17, 0x00	; 0
    3b9e:	09 c0       	rjmp	.+18     	; 0x3bb2 <reverseRegisterBits+0x1c>
    3ba0:	c1 2f       	mov	r28, r17
    3ba2:	d0 e0       	ldi	r29, 0x00	; 0
    3ba4:	c3 59       	subi	r28, 0x93	; 147
    3ba6:	da 4f       	sbci	r29, 0xFA	; 250
    3ba8:	88 81       	ld	r24, Y
    3baa:	0e 94 94 3b 	call	0x7728	; 0x7728 <reverse_Bits>
    3bae:	88 83       	st	Y, r24
    3bb0:	1f 5f       	subi	r17, 0xFF	; 255
    3bb2:	18 30       	cpi	r17, 0x08	; 8
    3bb4:	a8 f3       	brcs	.-22     	; 0x3ba0 <reverseRegisterBits+0xa>
    3bb6:	df 91       	pop	r29
    3bb8:	cf 91       	pop	r28
    3bba:	1f 91       	pop	r17
    3bbc:	08 95       	ret

00003bbe <menuOnUpdateRegister>:
    3bbe:	8d e6       	ldi	r24, 0x6D	; 109
    3bc0:	95 e0       	ldi	r25, 0x05	; 5
    3bc2:	0e 94 4f 2e 	call	0x5c9e	; 0x5c9e <read_allRegister>
    3bc6:	e7 df       	rcall	.-50     	; 0x3b96 <reverseRegisterBits>
    3bc8:	80 e0       	ldi	r24, 0x00	; 0
    3bca:	08 95       	ret

00003bcc <menuOnEnterResetReg>:
    3bcc:	0e 94 a0 2e 	call	0x5d40	; 0x5d40 <midi_resetRegisters>
    3bd0:	80 e0       	ldi	r24, 0x00	; 0
    3bd2:	f5 df       	rcall	.-22     	; 0x3bbe <menuOnUpdateRegister>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	08 95       	ret

00003bd8 <menuOnExitLoadProgran>:
    3bd8:	86 30       	cpi	r24, 0x06	; 6
    3bda:	31 f0       	breq	.+12     	; 0x3be8 <menuOnExitLoadProgran+0x10>
    3bdc:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3be0:	80 34       	cpi	r24, 0x40	; 64
    3be2:	10 f4       	brcc	.+4      	; 0x3be8 <menuOnExitLoadProgran+0x10>
    3be4:	0e 94 47 2f 	call	0x5e8e	; 0x5e8e <program_toRegister>
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	e9 df       	rcall	.-46     	; 0x3bbe <menuOnUpdateRegister>
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	08 95       	ret

00003bf0 <softkeyCoupler>:
    3bf0:	cf 93       	push	r28
    3bf2:	c6 2f       	mov	r28, r22
    3bf4:	88 23       	and	r24, r24
    3bf6:	d9 f0       	breq	.+54     	; 0x3c2e <softkeyCoupler+0x3e>
    3bf8:	e6 2f       	mov	r30, r22
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	df 01       	movw	r26, r30
    3bfe:	af 5e       	subi	r26, 0xEF	; 239
    3c00:	b7 4f       	sbci	r27, 0xF7	; 247
    3c02:	8c 91       	ld	r24, X
    3c04:	81 11       	cpse	r24, r1
    3c06:	08 c0       	rjmp	.+16     	; 0x3c18 <softkeyCoupler+0x28>
    3c08:	86 2f       	mov	r24, r22
    3c0a:	0e 94 bc 2c 	call	0x5978	; 0x5978 <set_Coupler>
    3c0e:	88 23       	and	r24, r24
    3c10:	71 f0       	breq	.+28     	; 0x3c2e <softkeyCoupler+0x3e>
    3c12:	0e 94 29 32 	call	0x6452	; 0x6452 <midi_ManualOff>
    3c16:	0b c0       	rjmp	.+22     	; 0x3c2e <softkeyCoupler+0x3e>
    3c18:	df 01       	movw	r26, r30
    3c1a:	af 5e       	subi	r26, 0xEF	; 239
    3c1c:	b7 4f       	sbci	r27, 0xF7	; 247
    3c1e:	1c 92       	st	X, r1
    3c20:	ee 0f       	add	r30, r30
    3c22:	ff 1f       	adc	r31, r31
    3c24:	ef 5d       	subi	r30, 0xDF	; 223
    3c26:	fd 4e       	sbci	r31, 0xED	; 237
    3c28:	84 91       	lpm	r24, Z
    3c2a:	0e 94 29 32 	call	0x6452	; 0x6452 <midi_ManualOff>
    3c2e:	ec 2f       	mov	r30, r28
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	ef 5e       	subi	r30, 0xEF	; 239
    3c34:	f7 4f       	sbci	r31, 0xF7	; 247
    3c36:	80 81       	ld	r24, Z
    3c38:	81 11       	cpse	r24, r1
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <softkeyCoupler+0x50>
    3c3c:	82 e8       	ldi	r24, 0x82	; 130
    3c3e:	01 c0       	rjmp	.+2      	; 0x3c42 <softkeyCoupler+0x52>
    3c40:	81 e8       	ldi	r24, 0x81	; 129
    3c42:	cf 91       	pop	r28
    3c44:	08 95       	ret

00003c46 <softKeyCoupler2from3>:
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	d3 cf       	rjmp	.-90     	; 0x3bf0 <softkeyCoupler>
    3c4a:	08 95       	ret

00003c4c <softKeyCoupler1from3>:
    3c4c:	61 e0       	ldi	r22, 0x01	; 1
    3c4e:	d0 cf       	rjmp	.-96     	; 0x3bf0 <softkeyCoupler>
    3c50:	08 95       	ret

00003c52 <softKeyCouplerPfrom3>:
    3c52:	63 e0       	ldi	r22, 0x03	; 3
    3c54:	cd cf       	rjmp	.-102    	; 0x3bf0 <softkeyCoupler>
    3c56:	08 95       	ret

00003c58 <softKeyCoupler1from2>:
    3c58:	62 e0       	ldi	r22, 0x02	; 2
    3c5a:	ca cf       	rjmp	.-108    	; 0x3bf0 <softkeyCoupler>
    3c5c:	08 95       	ret

00003c5e <softKeyCouplerPfrom2>:
    3c5e:	64 e0       	ldi	r22, 0x04	; 4
    3c60:	c7 cf       	rjmp	.-114    	; 0x3bf0 <softkeyCoupler>
    3c62:	08 95       	ret

00003c64 <softKeyCouplerPfrom1>:
    3c64:	65 e0       	ldi	r22, 0x05	; 5
    3c66:	c4 cf       	rjmp	.-120    	; 0x3bf0 <softkeyCoupler>
    3c68:	08 95       	ret

00003c6a <softKeyCoupler3from2>:
    3c6a:	66 e0       	ldi	r22, 0x06	; 6
    3c6c:	c1 cf       	rjmp	.-126    	; 0x3bf0 <softkeyCoupler>
    3c6e:	08 95       	ret

00003c70 <softKeyCoupler3from1>:
    3c70:	67 e0       	ldi	r22, 0x07	; 7
    3c72:	be cf       	rjmp	.-132    	; 0x3bf0 <softkeyCoupler>
    3c74:	08 95       	ret

00003c76 <softKeyCoupler3fromP>:
    3c76:	69 e0       	ldi	r22, 0x09	; 9
    3c78:	bb cf       	rjmp	.-138    	; 0x3bf0 <softkeyCoupler>
    3c7a:	08 95       	ret

00003c7c <softKeyCoupler2from1>:
    3c7c:	68 e0       	ldi	r22, 0x08	; 8
    3c7e:	b8 cf       	rjmp	.-144    	; 0x3bf0 <softkeyCoupler>
    3c80:	08 95       	ret

00003c82 <softKeyCoupler2fromP>:
    3c82:	6a e0       	ldi	r22, 0x0A	; 10
    3c84:	b5 cf       	rjmp	.-150    	; 0x3bf0 <softkeyCoupler>
    3c86:	08 95       	ret

00003c88 <softKeyCoupler1fromP>:
    3c88:	6b e0       	ldi	r22, 0x0B	; 11
    3c8a:	b2 cf       	rjmp	.-156    	; 0x3bf0 <softkeyCoupler>
    3c8c:	08 95       	ret

00003c8e <menu_Init>:
    3c8e:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    3c92:	00 97       	sbiw	r24, 0x00	; 0
    3c94:	69 f4       	brne	.+26     	; 0x3cb0 <menu_Init+0x22>
    3c96:	83 e5       	ldi	r24, 0x53	; 83
    3c98:	97 e0       	ldi	r25, 0x07	; 7
    3c9a:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3c9e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3ca2:	82 ef       	ldi	r24, 0xF2	; 242
    3ca4:	93 e0       	ldi	r25, 0x03	; 3
    3ca6:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    3caa:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    3cae:	08 c0       	rjmp	.+16     	; 0x3cc0 <menu_Init+0x32>
    3cb0:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3cb4:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3cb8:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    3cbc:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    3cc0:	8f ef       	ldi	r24, 0xFF	; 255
    3cc2:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    3cc6:	8c ef       	ldi	r24, 0xFC	; 252
    3cc8:	93 e0       	ldi	r25, 0x03	; 3
    3cca:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    3cce:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    3cd2:	08 95       	ret

00003cd4 <softkeyLeft>:
    3cd4:	6b e5       	ldi	r22, 0x5B	; 91
    3cd6:	72 e1       	ldi	r23, 0x12	; 18
    3cd8:	82 e0       	ldi	r24, 0x02	; 2
    3cda:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3cde:	08 95       	ret

00003ce0 <softkeyRight>:
    3ce0:	6d e5       	ldi	r22, 0x5D	; 93
    3ce2:	72 e1       	ldi	r23, 0x12	; 18
    3ce4:	83 e0       	ldi	r24, 0x03	; 3
    3ce6:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3cea:	08 95       	ret

00003cec <softkeyDown>:
    3cec:	6f e5       	ldi	r22, 0x5F	; 95
    3cee:	72 e1       	ldi	r23, 0x12	; 18
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3cf6:	08 95       	ret

00003cf8 <softkeyOn>:
    3cf8:	6d e4       	ldi	r22, 0x4D	; 77
    3cfa:	72 e1       	ldi	r23, 0x12	; 18
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3d02:	08 95       	ret

00003d04 <softkeyOff>:
    3d04:	68 e4       	ldi	r22, 0x48	; 72
    3d06:	72 e1       	ldi	r23, 0x12	; 18
    3d08:	81 e0       	ldi	r24, 0x01	; 1
    3d0a:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3d0e:	08 95       	ret

00003d10 <softkeyUp>:
    3d10:	61 e6       	ldi	r22, 0x61	; 97
    3d12:	72 e1       	ldi	r23, 0x12	; 18
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3d1a:	08 95       	ret

00003d1c <softkeyPlus>:
    3d1c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3d20:	8a 30       	cpi	r24, 0x0A	; 10
    3d22:	11 f0       	breq	.+4      	; 0x3d28 <softkeyPlus+0xc>
    3d24:	8e 30       	cpi	r24, 0x0E	; 14
    3d26:	31 f4       	brne	.+12     	; 0x3d34 <softkeyPlus+0x18>
    3d28:	69 e3       	ldi	r22, 0x39	; 57
    3d2a:	72 e1       	ldi	r23, 0x12	; 18
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3d32:	08 95       	ret
    3d34:	69 e5       	ldi	r22, 0x59	; 89
    3d36:	72 e1       	ldi	r23, 0x12	; 18
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3d3e:	08 95       	ret

00003d40 <softkeyMinus>:
    3d40:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3d44:	8a 30       	cpi	r24, 0x0A	; 10
    3d46:	11 f0       	breq	.+4      	; 0x3d4c <softkeyMinus+0xc>
    3d48:	8e 30       	cpi	r24, 0x0E	; 14
    3d4a:	31 f4       	brne	.+12     	; 0x3d58 <softkeyMinus+0x18>
    3d4c:	6b e3       	ldi	r22, 0x3B	; 59
    3d4e:	72 e1       	ldi	r23, 0x12	; 18
    3d50:	81 e0       	ldi	r24, 0x01	; 1
    3d52:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3d56:	08 95       	ret
    3d58:	67 e5       	ldi	r22, 0x57	; 87
    3d5a:	72 e1       	ldi	r23, 0x12	; 18
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	0c 94 ef 3a 	jmp	0x75de	; 0x75de <keylabel_set>
    3d62:	08 95       	ret

00003d64 <dataToNibbles>:
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3d6c:	8e 2f       	mov	r24, r30
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	fc 01       	movw	r30, r24
    3d72:	32 97       	sbiw	r30, 0x02	; 2
    3d74:	ed 30       	cpi	r30, 0x0D	; 13
    3d76:	f1 05       	cpc	r31, r1
    3d78:	08 f0       	brcs	.+2      	; 0x3d7c <dataToNibbles+0x18>
    3d7a:	e4 c0       	rjmp	.+456    	; 0x3f44 <dataToNibbles+0x1e0>
    3d7c:	88 27       	eor	r24, r24
    3d7e:	ee 58       	subi	r30, 0x8E	; 142
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	8f 4f       	sbci	r24, 0xFF	; 255
    3d84:	0c 94 a1 3b 	jmp	0x7742	; 0x7742 <__tablejump2__>
    3d88:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3d8c:	e4 ec       	ldi	r30, 0xC4	; 196
    3d8e:	f5 e0       	ldi	r31, 0x05	; 5
    3d90:	98 2f       	mov	r25, r24
    3d92:	92 95       	swap	r25
    3d94:	9f 70       	andi	r25, 0x0F	; 15
    3d96:	90 83       	st	Z, r25
    3d98:	8f 70       	andi	r24, 0x0F	; 15
    3d9a:	81 83       	std	Z+1, r24	; 0x01
    3d9c:	d3 c0       	rjmp	.+422    	; 0x3f44 <dataToNibbles+0x1e0>
    3d9e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3da2:	80 31       	cpi	r24, 0x10	; 16
    3da4:	20 f0       	brcs	.+8      	; 0x3dae <dataToNibbles+0x4a>
    3da6:	8f ef       	ldi	r24, 0xFF	; 255
    3da8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3dac:	cb c0       	rjmp	.+406    	; 0x3f44 <dataToNibbles+0x1e0>
    3dae:	8f 5f       	subi	r24, 0xFF	; 255
    3db0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3db4:	c7 c0       	rjmp	.+398    	; 0x3f44 <dataToNibbles+0x1e0>
    3db6:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3dba:	88 23       	and	r24, r24
    3dbc:	34 f4       	brge	.+12     	; 0x3dca <dataToNibbles+0x66>
    3dbe:	e4 ec       	ldi	r30, 0xC4	; 196
    3dc0:	f5 e0       	ldi	r31, 0x05	; 5
    3dc2:	10 82       	st	Z, r1
    3dc4:	8f ef       	ldi	r24, 0xFF	; 255
    3dc6:	81 83       	std	Z+1, r24	; 0x01
    3dc8:	bd c0       	rjmp	.+378    	; 0x3f44 <dataToNibbles+0x1e0>
    3dca:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    3dce:	08 c0       	rjmp	.+16     	; 0x3de0 <dataToNibbles+0x7c>
    3dd0:	e4 ec       	ldi	r30, 0xC4	; 196
    3dd2:	f5 e0       	ldi	r31, 0x05	; 5
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	9f 5f       	subi	r25, 0xFF	; 255
    3dd8:	91 83       	std	Z+1, r25	; 0x01
    3dda:	8c 50       	subi	r24, 0x0C	; 12
    3ddc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3de0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3de4:	8c 30       	cpi	r24, 0x0C	; 12
    3de6:	a0 f7       	brcc	.-24     	; 0x3dd0 <dataToNibbles+0x6c>
    3de8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3dec:	ab c0       	rjmp	.+342    	; 0x3f44 <dataToNibbles+0x1e0>
    3dee:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3df2:	e4 ec       	ldi	r30, 0xC4	; 196
    3df4:	f5 e0       	ldi	r31, 0x05	; 5
    3df6:	98 2f       	mov	r25, r24
    3df8:	92 95       	swap	r25
    3dfa:	96 95       	lsr	r25
    3dfc:	97 70       	andi	r25, 0x07	; 7
    3dfe:	90 83       	st	Z, r25
    3e00:	8f 71       	andi	r24, 0x1F	; 31
    3e02:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3e06:	11 82       	std	Z+1, r1	; 0x01
    3e08:	08 c0       	rjmp	.+16     	; 0x3e1a <dataToNibbles+0xb6>
    3e0a:	e4 ec       	ldi	r30, 0xC4	; 196
    3e0c:	f5 e0       	ldi	r31, 0x05	; 5
    3e0e:	91 81       	ldd	r25, Z+1	; 0x01
    3e10:	9f 5f       	subi	r25, 0xFF	; 255
    3e12:	91 83       	std	Z+1, r25	; 0x01
    3e14:	8a 50       	subi	r24, 0x0A	; 10
    3e16:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3e1a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e1e:	8a 30       	cpi	r24, 0x0A	; 10
    3e20:	a0 f7       	brcc	.-24     	; 0x3e0a <dataToNibbles+0xa6>
    3e22:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3e26:	8e c0       	rjmp	.+284    	; 0x3f44 <dataToNibbles+0x1e0>
    3e28:	e4 ec       	ldi	r30, 0xC4	; 196
    3e2a:	f5 e0       	ldi	r31, 0x05	; 5
    3e2c:	10 82       	st	Z, r1
    3e2e:	11 82       	std	Z+1, r1	; 0x01
    3e30:	08 c0       	rjmp	.+16     	; 0x3e42 <dataToNibbles+0xde>
    3e32:	e4 ec       	ldi	r30, 0xC4	; 196
    3e34:	f5 e0       	ldi	r31, 0x05	; 5
    3e36:	90 81       	ld	r25, Z
    3e38:	9f 5f       	subi	r25, 0xFF	; 255
    3e3a:	90 83       	st	Z, r25
    3e3c:	84 56       	subi	r24, 0x64	; 100
    3e3e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3e42:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e46:	84 36       	cpi	r24, 0x64	; 100
    3e48:	a0 f7       	brcc	.-24     	; 0x3e32 <dataToNibbles+0xce>
    3e4a:	08 c0       	rjmp	.+16     	; 0x3e5c <dataToNibbles+0xf8>
    3e4c:	e4 ec       	ldi	r30, 0xC4	; 196
    3e4e:	f5 e0       	ldi	r31, 0x05	; 5
    3e50:	91 81       	ldd	r25, Z+1	; 0x01
    3e52:	9f 5f       	subi	r25, 0xFF	; 255
    3e54:	91 83       	std	Z+1, r25	; 0x01
    3e56:	8a 50       	subi	r24, 0x0A	; 10
    3e58:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3e5c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e60:	8a 30       	cpi	r24, 0x0A	; 10
    3e62:	a0 f7       	brcc	.-24     	; 0x3e4c <dataToNibbles+0xe8>
    3e64:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3e68:	6d c0       	rjmp	.+218    	; 0x3f44 <dataToNibbles+0x1e0>
    3e6a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e6e:	84 30       	cpi	r24, 0x04	; 4
    3e70:	20 f0       	brcs	.+8      	; 0x3e7a <dataToNibbles+0x116>
    3e72:	8f ef       	ldi	r24, 0xFF	; 255
    3e74:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3e78:	65 c0       	rjmp	.+202    	; 0x3f44 <dataToNibbles+0x1e0>
    3e7a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3e7e:	62 c0       	rjmp	.+196    	; 0x3f44 <dataToNibbles+0x1e0>
    3e80:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e84:	84 30       	cpi	r24, 0x04	; 4
    3e86:	20 f0       	brcs	.+8      	; 0x3e90 <dataToNibbles+0x12c>
    3e88:	83 e0       	ldi	r24, 0x03	; 3
    3e8a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3e8e:	5a c0       	rjmp	.+180    	; 0x3f44 <dataToNibbles+0x1e0>
    3e90:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3e94:	57 c0       	rjmp	.+174    	; 0x3f44 <dataToNibbles+0x1e0>
    3e96:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e9a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3e9e:	52 c0       	rjmp	.+164    	; 0x3f44 <dataToNibbles+0x1e0>
    3ea0:	e9 2f       	mov	r30, r25
    3ea2:	f0 e0       	ldi	r31, 0x00	; 0
    3ea4:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3ea8:	28 2f       	mov	r18, r24
    3eaa:	22 1f       	adc	r18, r18
    3eac:	22 27       	eor	r18, r18
    3eae:	22 1f       	adc	r18, r18
    3eb0:	ec 53       	subi	r30, 0x3C	; 60
    3eb2:	fa 4f       	sbci	r31, 0xFA	; 250
    3eb4:	20 83       	st	Z, r18
    3eb6:	88 0f       	add	r24, r24
    3eb8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3ebc:	9f 5f       	subi	r25, 0xFF	; 255
    3ebe:	01 c0       	rjmp	.+2      	; 0x3ec2 <dataToNibbles+0x15e>
    3ec0:	90 e0       	ldi	r25, 0x00	; 0
    3ec2:	98 30       	cpi	r25, 0x08	; 8
    3ec4:	68 f3       	brcs	.-38     	; 0x3ea0 <dataToNibbles+0x13c>
    3ec6:	3e c0       	rjmp	.+124    	; 0x3f44 <dataToNibbles+0x1e0>
    3ec8:	82 50       	subi	r24, 0x02	; 2
    3eca:	f0 e0       	ldi	r31, 0x00	; 0
    3ecc:	de 01       	movw	r26, r28
    3ece:	9d 91       	ld	r25, X+
    3ed0:	ec 53       	subi	r30, 0x3C	; 60
    3ed2:	fa 4f       	sbci	r31, 0xFA	; 250
    3ed4:	9f 70       	andi	r25, 0x0F	; 15
    3ed6:	90 83       	st	Z, r25
    3ed8:	e8 2f       	mov	r30, r24
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	98 81       	ld	r25, Y
    3ede:	ec 53       	subi	r30, 0x3C	; 60
    3ee0:	fa 4f       	sbci	r31, 0xFA	; 250
    3ee2:	92 95       	swap	r25
    3ee4:	9f 70       	andi	r25, 0x0F	; 15
    3ee6:	90 83       	st	Z, r25
    3ee8:	ed 01       	movw	r28, r26
    3eea:	03 c0       	rjmp	.+6      	; 0x3ef2 <dataToNibbles+0x18e>
    3eec:	c2 ea       	ldi	r28, 0xA2	; 162
    3eee:	d5 e0       	ldi	r29, 0x05	; 5
    3ef0:	88 e0       	ldi	r24, 0x08	; 8
    3ef2:	ef ef       	ldi	r30, 0xFF	; 255
    3ef4:	e8 0f       	add	r30, r24
    3ef6:	81 11       	cpse	r24, r1
    3ef8:	e7 cf       	rjmp	.-50     	; 0x3ec8 <dataToNibbles+0x164>
    3efa:	24 c0       	rjmp	.+72     	; 0x3f44 <dataToNibbles+0x1e0>
    3efc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f00:	e4 ec       	ldi	r30, 0xC4	; 196
    3f02:	f5 e0       	ldi	r31, 0x05	; 5
    3f04:	98 2f       	mov	r25, r24
    3f06:	97 70       	andi	r25, 0x07	; 7
    3f08:	9f 5f       	subi	r25, 0xFF	; 255
    3f0a:	90 83       	st	Z, r25
    3f0c:	86 95       	lsr	r24
    3f0e:	86 95       	lsr	r24
    3f10:	86 95       	lsr	r24
    3f12:	8f 5f       	subi	r24, 0xFF	; 255
    3f14:	81 83       	std	Z+1, r24	; 0x01
    3f16:	16 c0       	rjmp	.+44     	; 0x3f44 <dataToNibbles+0x1e0>
    3f18:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f1c:	8f 5f       	subi	r24, 0xFF	; 255
    3f1e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f22:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    3f26:	08 c0       	rjmp	.+16     	; 0x3f38 <dataToNibbles+0x1d4>
    3f28:	e4 ec       	ldi	r30, 0xC4	; 196
    3f2a:	f5 e0       	ldi	r31, 0x05	; 5
    3f2c:	90 81       	ld	r25, Z
    3f2e:	9f 5f       	subi	r25, 0xFF	; 255
    3f30:	90 83       	st	Z, r25
    3f32:	8a 50       	subi	r24, 0x0A	; 10
    3f34:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f38:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f3c:	8a 30       	cpi	r24, 0x0A	; 10
    3f3e:	a0 f7       	brcc	.-24     	; 0x3f28 <dataToNibbles+0x1c4>
    3f40:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    3f44:	df 91       	pop	r29
    3f46:	cf 91       	pop	r28
    3f48:	08 95       	ret

00003f4a <nibbleToLCDstring>:
    3f4a:	0f 93       	push	r16
    3f4c:	1f 93       	push	r17
    3f4e:	cf 93       	push	r28
    3f50:	df 93       	push	r29
    3f52:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3f56:	8e 2f       	mov	r24, r30
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	32 97       	sbiw	r30, 0x02	; 2
    3f5e:	ed 30       	cpi	r30, 0x0D	; 13
    3f60:	f1 05       	cpc	r31, r1
    3f62:	08 f0       	brcs	.+2      	; 0x3f66 <nibbleToLCDstring+0x1c>
    3f64:	3b c1       	rjmp	.+630    	; 0x41dc <nibbleToLCDstring+0x292>
    3f66:	88 27       	eor	r24, r24
    3f68:	e1 58       	subi	r30, 0x81	; 129
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f6e:	0c 94 a1 3b 	jmp	0x7742	; 0x7742 <__tablejump2__>
    3f72:	04 ec       	ldi	r16, 0xC4	; 196
    3f74:	15 e0       	ldi	r17, 0x05	; 5
    3f76:	f8 01       	movw	r30, r16
    3f78:	80 81       	ld	r24, Z
    3f7a:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    3f7e:	c5 e2       	ldi	r28, 0x25	; 37
    3f80:	d2 e0       	ldi	r29, 0x02	; 2
    3f82:	88 83       	st	Y, r24
    3f84:	f8 01       	movw	r30, r16
    3f86:	81 81       	ldd	r24, Z+1	; 0x01
    3f88:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    3f8c:	89 83       	std	Y+1, r24	; 0x01
    3f8e:	1a 82       	std	Y+2, r1	; 0x02
    3f90:	25 c1       	rjmp	.+586    	; 0x41dc <nibbleToLCDstring+0x292>
    3f92:	e5 e2       	ldi	r30, 0x25	; 37
    3f94:	f2 e0       	ldi	r31, 0x02	; 2
    3f96:	83 e4       	ldi	r24, 0x43	; 67
    3f98:	80 83       	st	Z, r24
    3f9a:	88 e6       	ldi	r24, 0x68	; 104
    3f9c:	81 83       	std	Z+1, r24	; 0x01
    3f9e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3fa2:	8f 3f       	cpi	r24, 0xFF	; 255
    3fa4:	29 f4       	brne	.+10     	; 0x3fb0 <nibbleToLCDstring+0x66>
    3fa6:	80 e2       	ldi	r24, 0x20	; 32
    3fa8:	82 83       	std	Z+2, r24	; 0x02
    3faa:	8d e2       	ldi	r24, 0x2D	; 45
    3fac:	83 83       	std	Z+3, r24	; 0x03
    3fae:	12 c0       	rjmp	.+36     	; 0x3fd4 <nibbleToLCDstring+0x8a>
    3fb0:	8a 30       	cpi	r24, 0x0A	; 10
    3fb2:	48 f0       	brcs	.+18     	; 0x3fc6 <nibbleToLCDstring+0x7c>
    3fb4:	c5 e2       	ldi	r28, 0x25	; 37
    3fb6:	d2 e0       	ldi	r29, 0x02	; 2
    3fb8:	91 e3       	ldi	r25, 0x31	; 49
    3fba:	9a 83       	std	Y+2, r25	; 0x02
    3fbc:	8a 50       	subi	r24, 0x0A	; 10
    3fbe:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    3fc2:	8b 83       	std	Y+3, r24	; 0x03
    3fc4:	07 c0       	rjmp	.+14     	; 0x3fd4 <nibbleToLCDstring+0x8a>
    3fc6:	c5 e2       	ldi	r28, 0x25	; 37
    3fc8:	d2 e0       	ldi	r29, 0x02	; 2
    3fca:	90 e2       	ldi	r25, 0x20	; 32
    3fcc:	9a 83       	std	Y+2, r25	; 0x02
    3fce:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    3fd2:	8b 83       	std	Y+3, r24	; 0x03
    3fd4:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    3fd8:	01 c1       	rjmp	.+514    	; 0x41dc <nibbleToLCDstring+0x292>
    3fda:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3fde:	8f 3f       	cpi	r24, 0xFF	; 255
    3fe0:	21 f0       	breq	.+8      	; 0x3fea <nibbleToLCDstring+0xa0>
    3fe2:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    3fe6:	9f 3f       	cpi	r25, 0xFF	; 255
    3fe8:	59 f4       	brne	.+22     	; 0x4000 <nibbleToLCDstring+0xb6>
    3fea:	e5 e2       	ldi	r30, 0x25	; 37
    3fec:	f2 e0       	ldi	r31, 0x02	; 2
    3fee:	8e e6       	ldi	r24, 0x6E	; 110
    3ff0:	80 83       	st	Z, r24
    3ff2:	9f e6       	ldi	r25, 0x6F	; 111
    3ff4:	91 83       	std	Z+1, r25	; 0x01
    3ff6:	82 83       	std	Z+2, r24	; 0x02
    3ff8:	85 e6       	ldi	r24, 0x65	; 101
    3ffa:	83 83       	std	Z+3, r24	; 0x03
    3ffc:	14 82       	std	Z+4, r1	; 0x04
    3ffe:	ee c0       	rjmp	.+476    	; 0x41dc <nibbleToLCDstring+0x292>
    4000:	9f e5       	ldi	r25, 0x5F	; 95
    4002:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    4006:	8b 30       	cpi	r24, 0x0B	; 11
    4008:	21 f4       	brne	.+8      	; 0x4012 <nibbleToLCDstring+0xc8>
    400a:	88 e4       	ldi	r24, 0x48	; 72
    400c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    4010:	20 c0       	rjmp	.+64     	; 0x4052 <nibbleToLCDstring+0x108>
    4012:	85 30       	cpi	r24, 0x05	; 5
    4014:	58 f4       	brcc	.+22     	; 0x402c <nibbleToLCDstring+0xe2>
    4016:	98 2f       	mov	r25, r24
    4018:	96 95       	lsr	r25
    401a:	9d 5b       	subi	r25, 0xBD	; 189
    401c:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    4020:	80 ff       	sbrs	r24, 0
    4022:	17 c0       	rjmp	.+46     	; 0x4052 <nibbleToLCDstring+0x108>
    4024:	83 e2       	ldi	r24, 0x23	; 35
    4026:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    402a:	13 c0       	rjmp	.+38     	; 0x4052 <nibbleToLCDstring+0x108>
    402c:	28 2f       	mov	r18, r24
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	25 50       	subi	r18, 0x05	; 5
    4032:	31 09       	sbc	r19, r1
    4034:	35 95       	asr	r19
    4036:	27 95       	ror	r18
    4038:	2a 5b       	subi	r18, 0xBA	; 186
    403a:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    403e:	80 fd       	sbrc	r24, 0
    4040:	03 c0       	rjmp	.+6      	; 0x4048 <nibbleToLCDstring+0xfe>
    4042:	83 e2       	ldi	r24, 0x23	; 35
    4044:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    4048:	28 34       	cpi	r18, 0x48	; 72
    404a:	19 f4       	brne	.+6      	; 0x4052 <nibbleToLCDstring+0x108>
    404c:	81 e4       	ldi	r24, 0x41	; 65
    404e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    4052:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4056:	81 11       	cpse	r24, r1
    4058:	04 c0       	rjmp	.+8      	; 0x4062 <nibbleToLCDstring+0x118>
    405a:	8d e6       	ldi	r24, 0x6D	; 109
    405c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    4060:	0b c0       	rjmp	.+22     	; 0x4078 <nibbleToLCDstring+0x12e>
    4062:	8c 30       	cpi	r24, 0x0C	; 12
    4064:	30 f4       	brcc	.+12     	; 0x4072 <nibbleToLCDstring+0x128>
    4066:	81 50       	subi	r24, 0x01	; 1
    4068:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    406c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    4070:	03 c0       	rjmp	.+6      	; 0x4078 <nibbleToLCDstring+0x12e>
    4072:	8d e2       	ldi	r24, 0x2D	; 45
    4074:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    4078:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    407c:	af c0       	rjmp	.+350    	; 0x41dc <nibbleToLCDstring+0x292>
    407e:	c5 e2       	ldi	r28, 0x25	; 37
    4080:	d2 e0       	ldi	r29, 0x02	; 2
    4082:	8d e4       	ldi	r24, 0x4D	; 77
    4084:	88 83       	st	Y, r24
    4086:	04 ec       	ldi	r16, 0xC4	; 196
    4088:	15 e0       	ldi	r17, 0x05	; 5
    408a:	f8 01       	movw	r30, r16
    408c:	80 81       	ld	r24, Z
    408e:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    4092:	89 83       	std	Y+1, r24	; 0x01
    4094:	82 e4       	ldi	r24, 0x42	; 66
    4096:	8a 83       	std	Y+2, r24	; 0x02
    4098:	f8 01       	movw	r30, r16
    409a:	81 81       	ldd	r24, Z+1	; 0x01
    409c:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    40a0:	8b 83       	std	Y+3, r24	; 0x03
    40a2:	f8 01       	movw	r30, r16
    40a4:	82 81       	ldd	r24, Z+2	; 0x02
    40a6:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    40aa:	8c 83       	std	Y+4, r24	; 0x04
    40ac:	1d 82       	std	Y+5, r1	; 0x05
    40ae:	96 c0       	rjmp	.+300    	; 0x41dc <nibbleToLCDstring+0x292>
    40b0:	04 ec       	ldi	r16, 0xC4	; 196
    40b2:	15 e0       	ldi	r17, 0x05	; 5
    40b4:	f8 01       	movw	r30, r16
    40b6:	80 81       	ld	r24, Z
    40b8:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    40bc:	c5 e2       	ldi	r28, 0x25	; 37
    40be:	d2 e0       	ldi	r29, 0x02	; 2
    40c0:	88 83       	st	Y, r24
    40c2:	f8 01       	movw	r30, r16
    40c4:	81 81       	ldd	r24, Z+1	; 0x01
    40c6:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    40ca:	89 83       	std	Y+1, r24	; 0x01
    40cc:	f8 01       	movw	r30, r16
    40ce:	82 81       	ldd	r24, Z+2	; 0x02
    40d0:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    40d4:	8a 83       	std	Y+2, r24	; 0x02
    40d6:	1b 82       	std	Y+3, r1	; 0x03
    40d8:	81 c0       	rjmp	.+258    	; 0x41dc <nibbleToLCDstring+0x292>
    40da:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    40de:	83 30       	cpi	r24, 0x03	; 3
    40e0:	38 f4       	brcc	.+14     	; 0x40f0 <nibbleToLCDstring+0x1a6>
    40e2:	e5 e2       	ldi	r30, 0x25	; 37
    40e4:	f2 e0       	ldi	r31, 0x02	; 2
    40e6:	93 e3       	ldi	r25, 0x33	; 51
    40e8:	98 1b       	sub	r25, r24
    40ea:	90 83       	st	Z, r25
    40ec:	11 82       	std	Z+1, r1	; 0x01
    40ee:	76 c0       	rjmp	.+236    	; 0x41dc <nibbleToLCDstring+0x292>
    40f0:	83 30       	cpi	r24, 0x03	; 3
    40f2:	31 f4       	brne	.+12     	; 0x4100 <nibbleToLCDstring+0x1b6>
    40f4:	e5 e2       	ldi	r30, 0x25	; 37
    40f6:	f2 e0       	ldi	r31, 0x02	; 2
    40f8:	80 e5       	ldi	r24, 0x50	; 80
    40fa:	80 83       	st	Z, r24
    40fc:	11 82       	std	Z+1, r1	; 0x01
    40fe:	6e c0       	rjmp	.+220    	; 0x41dc <nibbleToLCDstring+0x292>
    4100:	e5 e2       	ldi	r30, 0x25	; 37
    4102:	f2 e0       	ldi	r31, 0x02	; 2
    4104:	8d e2       	ldi	r24, 0x2D	; 45
    4106:	80 83       	st	Z, r24
    4108:	11 82       	std	Z+1, r1	; 0x01
    410a:	68 c0       	rjmp	.+208    	; 0x41dc <nibbleToLCDstring+0x292>
    410c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4110:	e5 e2       	ldi	r30, 0x25	; 37
    4112:	f2 e0       	ldi	r31, 0x02	; 2
    4114:	80 5d       	subi	r24, 0xD0	; 208
    4116:	80 83       	st	Z, r24
    4118:	11 82       	std	Z+1, r1	; 0x01
    411a:	60 c0       	rjmp	.+192    	; 0x41dc <nibbleToLCDstring+0x292>
    411c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4120:	81 11       	cpse	r24, r1
    4122:	09 c0       	rjmp	.+18     	; 0x4136 <nibbleToLCDstring+0x1ec>
    4124:	e5 e2       	ldi	r30, 0x25	; 37
    4126:	f2 e0       	ldi	r31, 0x02	; 2
    4128:	81 e4       	ldi	r24, 0x41	; 65
    412a:	80 83       	st	Z, r24
    412c:	85 e7       	ldi	r24, 0x75	; 117
    412e:	81 83       	std	Z+1, r24	; 0x01
    4130:	83 e7       	ldi	r24, 0x73	; 115
    4132:	82 83       	std	Z+2, r24	; 0x02
    4134:	08 c0       	rjmp	.+16     	; 0x4146 <nibbleToLCDstring+0x1fc>
    4136:	e5 e2       	ldi	r30, 0x25	; 37
    4138:	f2 e0       	ldi	r31, 0x02	; 2
    413a:	85 e4       	ldi	r24, 0x45	; 69
    413c:	80 83       	st	Z, r24
    413e:	89 e6       	ldi	r24, 0x69	; 105
    4140:	81 83       	std	Z+1, r24	; 0x01
    4142:	8e e6       	ldi	r24, 0x6E	; 110
    4144:	82 83       	std	Z+2, r24	; 0x02
    4146:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    414a:	48 c0       	rjmp	.+144    	; 0x41dc <nibbleToLCDstring+0x292>
    414c:	c1 2f       	mov	r28, r17
    414e:	d0 e0       	ldi	r29, 0x00	; 0
    4150:	fe 01       	movw	r30, r28
    4152:	ec 53       	subi	r30, 0x3C	; 60
    4154:	fa 4f       	sbci	r31, 0xFA	; 250
    4156:	80 81       	ld	r24, Z
    4158:	0e 94 74 38 	call	0x70e8	; 0x70e8 <nibbleToChr>
    415c:	cb 5d       	subi	r28, 0xDB	; 219
    415e:	dd 4f       	sbci	r29, 0xFD	; 253
    4160:	88 83       	st	Y, r24
    4162:	1f 5f       	subi	r17, 0xFF	; 255
    4164:	01 c0       	rjmp	.+2      	; 0x4168 <nibbleToLCDstring+0x21e>
    4166:	10 e0       	ldi	r17, 0x00	; 0
    4168:	18 30       	cpi	r17, 0x08	; 8
    416a:	80 f3       	brcs	.-32     	; 0x414c <nibbleToLCDstring+0x202>
    416c:	37 c0       	rjmp	.+110    	; 0x41dc <nibbleToLCDstring+0x292>
    416e:	82 2f       	mov	r24, r18
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	fc 01       	movw	r30, r24
    4174:	ec 53       	subi	r30, 0x3C	; 60
    4176:	fa 4f       	sbci	r31, 0xFA	; 250
    4178:	30 81       	ld	r19, Z
    417a:	31 11       	cpse	r19, r1
    417c:	02 c0       	rjmp	.+4      	; 0x4182 <nibbleToLCDstring+0x238>
    417e:	3f e6       	ldi	r19, 0x6F	; 111
    4180:	01 c0       	rjmp	.+2      	; 0x4184 <nibbleToLCDstring+0x23a>
    4182:	39 e4       	ldi	r19, 0x49	; 73
    4184:	fc 01       	movw	r30, r24
    4186:	eb 5d       	subi	r30, 0xDB	; 219
    4188:	fd 4f       	sbci	r31, 0xFD	; 253
    418a:	30 83       	st	Z, r19
    418c:	2f 5f       	subi	r18, 0xFF	; 255
    418e:	01 c0       	rjmp	.+2      	; 0x4192 <nibbleToLCDstring+0x248>
    4190:	20 e0       	ldi	r18, 0x00	; 0
    4192:	28 30       	cpi	r18, 0x08	; 8
    4194:	60 f3       	brcs	.-40     	; 0x416e <nibbleToLCDstring+0x224>
    4196:	22 c0       	rjmp	.+68     	; 0x41dc <nibbleToLCDstring+0x292>
    4198:	a4 ec       	ldi	r26, 0xC4	; 196
    419a:	b5 e0       	ldi	r27, 0x05	; 5
    419c:	8c 91       	ld	r24, X
    419e:	e5 e2       	ldi	r30, 0x25	; 37
    41a0:	f2 e0       	ldi	r31, 0x02	; 2
    41a2:	80 5d       	subi	r24, 0xD0	; 208
    41a4:	80 83       	st	Z, r24
    41a6:	11 96       	adiw	r26, 0x01	; 1
    41a8:	8c 91       	ld	r24, X
    41aa:	80 5c       	subi	r24, 0xC0	; 192
    41ac:	81 83       	std	Z+1, r24	; 0x01
    41ae:	12 82       	std	Z+2, r1	; 0x02
    41b0:	15 c0       	rjmp	.+42     	; 0x41dc <nibbleToLCDstring+0x292>
    41b2:	e4 ec       	ldi	r30, 0xC4	; 196
    41b4:	f5 e0       	ldi	r31, 0x05	; 5
    41b6:	90 81       	ld	r25, Z
    41b8:	81 81       	ldd	r24, Z+1	; 0x01
    41ba:	29 2f       	mov	r18, r25
    41bc:	28 2b       	or	r18, r24
    41be:	31 f4       	brne	.+12     	; 0x41cc <nibbleToLCDstring+0x282>
    41c0:	e5 e2       	ldi	r30, 0x25	; 37
    41c2:	f2 e0       	ldi	r31, 0x02	; 2
    41c4:	8d e2       	ldi	r24, 0x2D	; 45
    41c6:	80 83       	st	Z, r24
    41c8:	81 83       	std	Z+1, r24	; 0x01
    41ca:	06 c0       	rjmp	.+12     	; 0x41d8 <nibbleToLCDstring+0x28e>
    41cc:	e5 e2       	ldi	r30, 0x25	; 37
    41ce:	f2 e0       	ldi	r31, 0x02	; 2
    41d0:	90 5d       	subi	r25, 0xD0	; 208
    41d2:	90 83       	st	Z, r25
    41d4:	80 5d       	subi	r24, 0xD0	; 208
    41d6:	81 83       	std	Z+1, r24	; 0x01
    41d8:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	1f 91       	pop	r17
    41e2:	0f 91       	pop	r16
    41e4:	08 95       	ret

000041e6 <LCDStringOut>:
    41e6:	0f 93       	push	r16
    41e8:	1f 93       	push	r17
    41ea:	cf 93       	push	r28
    41ec:	8e e1       	ldi	r24, 0x1E	; 30
    41ee:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    41f2:	c0 e0       	ldi	r28, 0x00	; 0
    41f4:	05 e2       	ldi	r16, 0x25	; 37
    41f6:	12 e0       	ldi	r17, 0x02	; 2
    41f8:	0b c0       	rjmp	.+22     	; 0x4210 <LCDStringOut+0x2a>
    41fa:	f8 01       	movw	r30, r16
    41fc:	80 81       	ld	r24, Z
    41fe:	88 23       	and	r24, r24
    4200:	19 f0       	breq	.+6      	; 0x4208 <LCDStringOut+0x22>
    4202:	0f 5f       	subi	r16, 0xFF	; 255
    4204:	1f 4f       	sbci	r17, 0xFF	; 255
    4206:	01 c0       	rjmp	.+2      	; 0x420a <LCDStringOut+0x24>
    4208:	80 e2       	ldi	r24, 0x20	; 32
    420a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    420e:	cf 5f       	subi	r28, 0xFF	; 255
    4210:	ca 30       	cpi	r28, 0x0A	; 10
    4212:	98 f3       	brcs	.-26     	; 0x41fa <LCDStringOut+0x14>
    4214:	cf 91       	pop	r28
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	08 95       	ret

0000421c <nibbleCheckOvfl>:
    421c:	8a 30       	cpi	r24, 0x0A	; 10
    421e:	1c f4       	brge	.+6      	; 0x4226 <nibbleCheckOvfl+0xa>
    4220:	88 23       	and	r24, r24
    4222:	1c f0       	brlt	.+6      	; 0x422a <nibbleCheckOvfl+0xe>
    4224:	08 95       	ret
    4226:	80 e0       	ldi	r24, 0x00	; 0
    4228:	08 95       	ret
    422a:	89 e0       	ldi	r24, 0x09	; 9
    422c:	08 95       	ret

0000422e <nibbleChange>:
    422e:	0f 93       	push	r16
    4230:	1f 93       	push	r17
    4232:	cf 93       	push	r28
    4234:	df 93       	push	r29
    4236:	c8 2f       	mov	r28, r24
    4238:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    423c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4240:	31 96       	adiw	r30, 0x01	; 1
    4242:	84 91       	lpm	r24, Z
    4244:	28 2f       	mov	r18, r24
    4246:	20 71       	andi	r18, 0x10	; 16
    4248:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    424c:	8e 2f       	mov	r24, r30
    424e:	90 e0       	ldi	r25, 0x00	; 0
    4250:	fc 01       	movw	r30, r24
    4252:	32 97       	sbiw	r30, 0x02	; 2
    4254:	ed 30       	cpi	r30, 0x0D	; 13
    4256:	f1 05       	cpc	r31, r1
    4258:	08 f0       	brcs	.+2      	; 0x425c <nibbleChange+0x2e>
    425a:	93 c1       	rjmp	.+806    	; 0x4582 <nibbleChange+0x354>
    425c:	88 27       	eor	r24, r24
    425e:	e4 57       	subi	r30, 0x74	; 116
    4260:	ff 4f       	sbci	r31, 0xFF	; 255
    4262:	8f 4f       	sbci	r24, 0xFF	; 255
    4264:	0c 94 a1 3b 	jmp	0x7742	; 0x7742 <__tablejump2__>
    4268:	d0 e0       	ldi	r29, 0x00	; 0
    426a:	cc 53       	subi	r28, 0x3C	; 60
    426c:	da 4f       	sbci	r29, 0xFA	; 250
    426e:	88 81       	ld	r24, Y
    4270:	68 0f       	add	r22, r24
    4272:	6f 70       	andi	r22, 0x0F	; 15
    4274:	68 83       	st	Y, r22
    4276:	85 c1       	rjmp	.+778    	; 0x4582 <nibbleChange+0x354>
    4278:	21 11       	cpse	r18, r1
    427a:	1b c0       	rjmp	.+54     	; 0x42b2 <nibbleChange+0x84>
    427c:	61 30       	cpi	r22, 0x01	; 1
    427e:	41 f4       	brne	.+16     	; 0x4290 <nibbleChange+0x62>
    4280:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4284:	80 31       	cpi	r24, 0x10	; 16
    4286:	20 f0       	brcs	.+8      	; 0x4290 <nibbleChange+0x62>
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    428e:	79 c1       	rjmp	.+754    	; 0x4582 <nibbleChange+0x354>
    4290:	6f 3f       	cpi	r22, 0xFF	; 255
    4292:	49 f4       	brne	.+18     	; 0x42a6 <nibbleChange+0x78>
    4294:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4298:	82 50       	subi	r24, 0x02	; 2
    429a:	8f 30       	cpi	r24, 0x0F	; 15
    429c:	20 f0       	brcs	.+8      	; 0x42a6 <nibbleChange+0x78>
    429e:	80 e1       	ldi	r24, 0x10	; 16
    42a0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    42a4:	6e c1       	rjmp	.+732    	; 0x4582 <nibbleChange+0x354>
    42a6:	e4 ec       	ldi	r30, 0xC4	; 196
    42a8:	f5 e0       	ldi	r31, 0x05	; 5
    42aa:	80 81       	ld	r24, Z
    42ac:	68 0f       	add	r22, r24
    42ae:	60 83       	st	Z, r22
    42b0:	68 c1       	rjmp	.+720    	; 0x4582 <nibbleChange+0x354>
    42b2:	61 30       	cpi	r22, 0x01	; 1
    42b4:	41 f4       	brne	.+16     	; 0x42c6 <nibbleChange+0x98>
    42b6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42ba:	80 31       	cpi	r24, 0x10	; 16
    42bc:	21 f4       	brne	.+8      	; 0x42c6 <nibbleChange+0x98>
    42be:	8f ef       	ldi	r24, 0xFF	; 255
    42c0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    42c4:	5e c1       	rjmp	.+700    	; 0x4582 <nibbleChange+0x354>
    42c6:	61 30       	cpi	r22, 0x01	; 1
    42c8:	41 f4       	brne	.+16     	; 0x42da <nibbleChange+0xac>
    42ca:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42ce:	8f 3f       	cpi	r24, 0xFF	; 255
    42d0:	21 f4       	brne	.+8      	; 0x42da <nibbleChange+0xac>
    42d2:	81 e0       	ldi	r24, 0x01	; 1
    42d4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    42d8:	54 c1       	rjmp	.+680    	; 0x4582 <nibbleChange+0x354>
    42da:	6f 3f       	cpi	r22, 0xFF	; 255
    42dc:	41 f4       	brne	.+16     	; 0x42ee <nibbleChange+0xc0>
    42de:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42e2:	8f 3f       	cpi	r24, 0xFF	; 255
    42e4:	21 f4       	brne	.+8      	; 0x42ee <nibbleChange+0xc0>
    42e6:	80 e1       	ldi	r24, 0x10	; 16
    42e8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    42ec:	4a c1       	rjmp	.+660    	; 0x4582 <nibbleChange+0x354>
    42ee:	6f 3f       	cpi	r22, 0xFF	; 255
    42f0:	41 f4       	brne	.+16     	; 0x4302 <nibbleChange+0xd4>
    42f2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42f6:	81 30       	cpi	r24, 0x01	; 1
    42f8:	21 f4       	brne	.+8      	; 0x4302 <nibbleChange+0xd4>
    42fa:	8f ef       	ldi	r24, 0xFF	; 255
    42fc:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4300:	40 c1       	rjmp	.+640    	; 0x4582 <nibbleChange+0x354>
    4302:	e4 ec       	ldi	r30, 0xC4	; 196
    4304:	f5 e0       	ldi	r31, 0x05	; 5
    4306:	80 81       	ld	r24, Z
    4308:	68 0f       	add	r22, r24
    430a:	60 83       	st	Z, r22
    430c:	3a c1       	rjmp	.+628    	; 0x4582 <nibbleChange+0x354>
    430e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4312:	8f 3f       	cpi	r24, 0xFF	; 255
    4314:	09 f4       	brne	.+2      	; 0x4318 <nibbleChange+0xea>
    4316:	c1 e0       	ldi	r28, 0x01	; 1
    4318:	c1 11       	cpse	r28, r1
    431a:	16 c0       	rjmp	.+44     	; 0x4348 <nibbleChange+0x11a>
    431c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4320:	8c 30       	cpi	r24, 0x0C	; 12
    4322:	50 f4       	brcc	.+20     	; 0x4338 <nibbleChange+0x10a>
    4324:	8b 30       	cpi	r24, 0x0B	; 11
    4326:	11 f4       	brne	.+4      	; 0x432c <nibbleChange+0xfe>
    4328:	61 30       	cpi	r22, 0x01	; 1
    432a:	41 f0       	breq	.+16     	; 0x433c <nibbleChange+0x10e>
    432c:	81 11       	cpse	r24, r1
    432e:	02 c0       	rjmp	.+4      	; 0x4334 <nibbleChange+0x106>
    4330:	6f 3f       	cpi	r22, 0xFF	; 255
    4332:	31 f0       	breq	.+12     	; 0x4340 <nibbleChange+0x112>
    4334:	68 0f       	add	r22, r24
    4336:	05 c0       	rjmp	.+10     	; 0x4342 <nibbleChange+0x114>
    4338:	60 e0       	ldi	r22, 0x00	; 0
    433a:	03 c0       	rjmp	.+6      	; 0x4342 <nibbleChange+0x114>
    433c:	60 e0       	ldi	r22, 0x00	; 0
    433e:	01 c0       	rjmp	.+2      	; 0x4342 <nibbleChange+0x114>
    4340:	6b e0       	ldi	r22, 0x0B	; 11
    4342:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    4346:	2b c0       	rjmp	.+86     	; 0x439e <nibbleChange+0x170>
    4348:	21 11       	cpse	r18, r1
    434a:	0a c0       	rjmp	.+20     	; 0x4360 <nibbleChange+0x132>
    434c:	81 11       	cpse	r24, r1
    434e:	02 c0       	rjmp	.+4      	; 0x4354 <nibbleChange+0x126>
    4350:	6f 3f       	cpi	r22, 0xFF	; 255
    4352:	c1 f0       	breq	.+48     	; 0x4384 <nibbleChange+0x156>
    4354:	8a 30       	cpi	r24, 0x0A	; 10
    4356:	11 f4       	brne	.+4      	; 0x435c <nibbleChange+0x12e>
    4358:	61 30       	cpi	r22, 0x01	; 1
    435a:	b1 f0       	breq	.+44     	; 0x4388 <nibbleChange+0x15a>
    435c:	68 0f       	add	r22, r24
    435e:	1d c0       	rjmp	.+58     	; 0x439a <nibbleChange+0x16c>
    4360:	81 11       	cpse	r24, r1
    4362:	02 c0       	rjmp	.+4      	; 0x4368 <nibbleChange+0x13a>
    4364:	6f 3f       	cpi	r22, 0xFF	; 255
    4366:	91 f0       	breq	.+36     	; 0x438c <nibbleChange+0x15e>
    4368:	8a 30       	cpi	r24, 0x0A	; 10
    436a:	11 f4       	brne	.+4      	; 0x4370 <nibbleChange+0x142>
    436c:	61 30       	cpi	r22, 0x01	; 1
    436e:	81 f0       	breq	.+32     	; 0x4390 <nibbleChange+0x162>
    4370:	8f 3f       	cpi	r24, 0xFF	; 255
    4372:	11 f4       	brne	.+4      	; 0x4378 <nibbleChange+0x14a>
    4374:	61 30       	cpi	r22, 0x01	; 1
    4376:	71 f0       	breq	.+28     	; 0x4394 <nibbleChange+0x166>
    4378:	8f 3f       	cpi	r24, 0xFF	; 255
    437a:	11 f4       	brne	.+4      	; 0x4380 <nibbleChange+0x152>
    437c:	6f 3f       	cpi	r22, 0xFF	; 255
    437e:	61 f0       	breq	.+24     	; 0x4398 <nibbleChange+0x16a>
    4380:	68 0f       	add	r22, r24
    4382:	0b c0       	rjmp	.+22     	; 0x439a <nibbleChange+0x16c>
    4384:	6a e0       	ldi	r22, 0x0A	; 10
    4386:	09 c0       	rjmp	.+18     	; 0x439a <nibbleChange+0x16c>
    4388:	60 e0       	ldi	r22, 0x00	; 0
    438a:	07 c0       	rjmp	.+14     	; 0x439a <nibbleChange+0x16c>
    438c:	6f ef       	ldi	r22, 0xFF	; 255
    438e:	05 c0       	rjmp	.+10     	; 0x439a <nibbleChange+0x16c>
    4390:	6f ef       	ldi	r22, 0xFF	; 255
    4392:	03 c0       	rjmp	.+6      	; 0x439a <nibbleChange+0x16c>
    4394:	60 e0       	ldi	r22, 0x00	; 0
    4396:	01 c0       	rjmp	.+2      	; 0x439a <nibbleChange+0x16c>
    4398:	6a e0       	ldi	r22, 0x0A	; 10
    439a:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    439e:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    43a2:	9f 3f       	cpi	r25, 0xFF	; 255
    43a4:	09 f4       	brne	.+2      	; 0x43a8 <nibbleChange+0x17a>
    43a6:	ed c0       	rjmp	.+474    	; 0x4582 <nibbleChange+0x354>
    43a8:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    43ac:	8f 3f       	cpi	r24, 0xFF	; 255
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <nibbleChange+0x184>
    43b0:	e8 c0       	rjmp	.+464    	; 0x4582 <nibbleChange+0x354>
    43b2:	28 2f       	mov	r18, r24
    43b4:	22 0f       	add	r18, r18
    43b6:	82 0f       	add	r24, r18
    43b8:	28 2f       	mov	r18, r24
    43ba:	22 0f       	add	r18, r18
    43bc:	22 0f       	add	r18, r18
    43be:	92 0f       	add	r25, r18
    43c0:	0a f0       	brmi	.+2      	; 0x43c4 <nibbleChange+0x196>
    43c2:	df c0       	rjmp	.+446    	; 0x4582 <nibbleChange+0x354>
    43c4:	e4 ec       	ldi	r30, 0xC4	; 196
    43c6:	f5 e0       	ldi	r31, 0x05	; 5
    43c8:	87 e0       	ldi	r24, 0x07	; 7
    43ca:	80 83       	st	Z, r24
    43cc:	8a e0       	ldi	r24, 0x0A	; 10
    43ce:	81 83       	std	Z+1, r24	; 0x01
    43d0:	d8 c0       	rjmp	.+432    	; 0x4582 <nibbleChange+0x354>
    43d2:	c1 11       	cpse	r28, r1
    43d4:	07 c0       	rjmp	.+14     	; 0x43e4 <nibbleChange+0x1b6>
    43d6:	e4 ec       	ldi	r30, 0xC4	; 196
    43d8:	f5 e0       	ldi	r31, 0x05	; 5
    43da:	80 81       	ld	r24, Z
    43dc:	68 0f       	add	r22, r24
    43de:	67 70       	andi	r22, 0x07	; 7
    43e0:	60 83       	st	Z, r22
    43e2:	cf c0       	rjmp	.+414    	; 0x4582 <nibbleChange+0x354>
    43e4:	d0 e0       	ldi	r29, 0x00	; 0
    43e6:	04 ec       	ldi	r16, 0xC4	; 196
    43e8:	15 e0       	ldi	r17, 0x05	; 5
    43ea:	cc 53       	subi	r28, 0x3C	; 60
    43ec:	da 4f       	sbci	r29, 0xFA	; 250
    43ee:	88 81       	ld	r24, Y
    43f0:	86 0f       	add	r24, r22
    43f2:	14 df       	rcall	.-472    	; 0x421c <nibbleCheckOvfl>
    43f4:	88 83       	st	Y, r24
    43f6:	f8 01       	movw	r30, r16
    43f8:	81 81       	ldd	r24, Z+1	; 0x01
    43fa:	92 81       	ldd	r25, Z+2	; 0x02
    43fc:	88 0f       	add	r24, r24
    43fe:	28 2f       	mov	r18, r24
    4400:	22 0f       	add	r18, r18
    4402:	22 0f       	add	r18, r18
    4404:	82 0f       	add	r24, r18
    4406:	89 0f       	add	r24, r25
    4408:	80 32       	cpi	r24, 0x20	; 32
    440a:	2c f0       	brlt	.+10     	; 0x4416 <nibbleChange+0x1e8>
    440c:	83 e0       	ldi	r24, 0x03	; 3
    440e:	81 83       	std	Z+1, r24	; 0x01
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	82 83       	std	Z+2, r24	; 0x02
    4414:	b6 c0       	rjmp	.+364    	; 0x4582 <nibbleChange+0x354>
    4416:	88 23       	and	r24, r24
    4418:	0c f0       	brlt	.+2      	; 0x441c <nibbleChange+0x1ee>
    441a:	b3 c0       	rjmp	.+358    	; 0x4582 <nibbleChange+0x354>
    441c:	e4 ec       	ldi	r30, 0xC4	; 196
    441e:	f5 e0       	ldi	r31, 0x05	; 5
    4420:	11 82       	std	Z+1, r1	; 0x01
    4422:	12 82       	std	Z+2, r1	; 0x02
    4424:	ae c0       	rjmp	.+348    	; 0x4582 <nibbleChange+0x354>
    4426:	d0 e0       	ldi	r29, 0x00	; 0
    4428:	04 ec       	ldi	r16, 0xC4	; 196
    442a:	15 e0       	ldi	r17, 0x05	; 5
    442c:	cc 53       	subi	r28, 0x3C	; 60
    442e:	da 4f       	sbci	r29, 0xFA	; 250
    4430:	88 81       	ld	r24, Y
    4432:	86 0f       	add	r24, r22
    4434:	f3 de       	rcall	.-538    	; 0x421c <nibbleCheckOvfl>
    4436:	88 83       	st	Y, r24
    4438:	f8 01       	movw	r30, r16
    443a:	20 81       	ld	r18, Z
    443c:	81 81       	ldd	r24, Z+1	; 0x01
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	ac 01       	movw	r20, r24
    4442:	44 0f       	add	r20, r20
    4444:	55 1f       	adc	r21, r21
    4446:	88 0f       	add	r24, r24
    4448:	99 1f       	adc	r25, r25
    444a:	88 0f       	add	r24, r24
    444c:	99 1f       	adc	r25, r25
    444e:	88 0f       	add	r24, r24
    4450:	99 1f       	adc	r25, r25
    4452:	84 0f       	add	r24, r20
    4454:	95 1f       	adc	r25, r21
    4456:	f4 e6       	ldi	r31, 0x64	; 100
    4458:	2f 9f       	mul	r18, r31
    445a:	80 0d       	add	r24, r0
    445c:	91 1d       	adc	r25, r1
    445e:	11 24       	eor	r1, r1
    4460:	f8 01       	movw	r30, r16
    4462:	22 81       	ldd	r18, Z+2	; 0x02
    4464:	82 0f       	add	r24, r18
    4466:	91 1d       	adc	r25, r1
    4468:	8f 3f       	cpi	r24, 0xFF	; 255
    446a:	91 05       	cpc	r25, r1
    446c:	09 f0       	breq	.+2      	; 0x4470 <nibbleChange+0x242>
    446e:	0c f4       	brge	.+2      	; 0x4472 <nibbleChange+0x244>
    4470:	88 c0       	rjmp	.+272    	; 0x4582 <nibbleChange+0x354>
    4472:	82 e0       	ldi	r24, 0x02	; 2
    4474:	80 83       	st	Z, r24
    4476:	85 e0       	ldi	r24, 0x05	; 5
    4478:	81 83       	std	Z+1, r24	; 0x01
    447a:	82 83       	std	Z+2, r24	; 0x02
    447c:	82 c0       	rjmp	.+260    	; 0x4582 <nibbleChange+0x354>
    447e:	22 23       	and	r18, r18
    4480:	a1 f0       	breq	.+40     	; 0x44aa <nibbleChange+0x27c>
    4482:	d0 e0       	ldi	r29, 0x00	; 0
    4484:	fe 01       	movw	r30, r28
    4486:	ec 53       	subi	r30, 0x3C	; 60
    4488:	fa 4f       	sbci	r31, 0xFA	; 250
    448a:	80 81       	ld	r24, Z
    448c:	68 0f       	add	r22, r24
    448e:	60 83       	st	Z, r22
    4490:	64 30       	cpi	r22, 0x04	; 4
    4492:	19 f4       	brne	.+6      	; 0x449a <nibbleChange+0x26c>
    4494:	8f ef       	ldi	r24, 0xFF	; 255
    4496:	80 83       	st	Z, r24
    4498:	74 c0       	rjmp	.+232    	; 0x4582 <nibbleChange+0x354>
    449a:	6e 3f       	cpi	r22, 0xFE	; 254
    449c:	09 f0       	breq	.+2      	; 0x44a0 <nibbleChange+0x272>
    449e:	71 c0       	rjmp	.+226    	; 0x4582 <nibbleChange+0x354>
    44a0:	cc 53       	subi	r28, 0x3C	; 60
    44a2:	da 4f       	sbci	r29, 0xFA	; 250
    44a4:	83 e0       	ldi	r24, 0x03	; 3
    44a6:	88 83       	st	Y, r24
    44a8:	6c c0       	rjmp	.+216    	; 0x4582 <nibbleChange+0x354>
    44aa:	d0 e0       	ldi	r29, 0x00	; 0
    44ac:	fe 01       	movw	r30, r28
    44ae:	ec 53       	subi	r30, 0x3C	; 60
    44b0:	fa 4f       	sbci	r31, 0xFA	; 250
    44b2:	80 81       	ld	r24, Z
    44b4:	81 11       	cpse	r24, r1
    44b6:	05 c0       	rjmp	.+10     	; 0x44c2 <nibbleChange+0x294>
    44b8:	6f 3f       	cpi	r22, 0xFF	; 255
    44ba:	19 f4       	brne	.+6      	; 0x44c2 <nibbleChange+0x294>
    44bc:	83 e0       	ldi	r24, 0x03	; 3
    44be:	80 83       	st	Z, r24
    44c0:	60 c0       	rjmp	.+192    	; 0x4582 <nibbleChange+0x354>
    44c2:	83 30       	cpi	r24, 0x03	; 3
    44c4:	31 f4       	brne	.+12     	; 0x44d2 <nibbleChange+0x2a4>
    44c6:	61 30       	cpi	r22, 0x01	; 1
    44c8:	21 f4       	brne	.+8      	; 0x44d2 <nibbleChange+0x2a4>
    44ca:	cc 53       	subi	r28, 0x3C	; 60
    44cc:	da 4f       	sbci	r29, 0xFA	; 250
    44ce:	18 82       	st	Y, r1
    44d0:	58 c0       	rjmp	.+176    	; 0x4582 <nibbleChange+0x354>
    44d2:	cc 53       	subi	r28, 0x3C	; 60
    44d4:	da 4f       	sbci	r29, 0xFA	; 250
    44d6:	68 0f       	add	r22, r24
    44d8:	68 83       	st	Y, r22
    44da:	53 c0       	rjmp	.+166    	; 0x4582 <nibbleChange+0x354>
    44dc:	d0 e0       	ldi	r29, 0x00	; 0
    44de:	cc 53       	subi	r28, 0x3C	; 60
    44e0:	da 4f       	sbci	r29, 0xFA	; 250
    44e2:	88 81       	ld	r24, Y
    44e4:	68 0f       	add	r22, r24
    44e6:	63 70       	andi	r22, 0x03	; 3
    44e8:	68 83       	st	Y, r22
    44ea:	4b c0       	rjmp	.+150    	; 0x4582 <nibbleChange+0x354>
    44ec:	e4 ec       	ldi	r30, 0xC4	; 196
    44ee:	f5 e0       	ldi	r31, 0x05	; 5
    44f0:	80 81       	ld	r24, Z
    44f2:	80 95       	com	r24
    44f4:	80 83       	st	Z, r24
    44f6:	45 c0       	rjmp	.+138    	; 0x4582 <nibbleChange+0x354>
    44f8:	d0 e0       	ldi	r29, 0x00	; 0
    44fa:	81 e0       	ldi	r24, 0x01	; 1
    44fc:	61 fd       	sbrc	r22, 1
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	cc 53       	subi	r28, 0x3C	; 60
    4502:	da 4f       	sbci	r29, 0xFA	; 250
    4504:	88 83       	st	Y, r24
    4506:	3d c0       	rjmp	.+122    	; 0x4582 <nibbleChange+0x354>
    4508:	61 30       	cpi	r22, 0x01	; 1
    450a:	41 f4       	brne	.+16     	; 0x451c <nibbleChange+0x2ee>
    450c:	d0 e0       	ldi	r29, 0x00	; 0
    450e:	cc 53       	subi	r28, 0x3C	; 60
    4510:	da 4f       	sbci	r29, 0xFA	; 250
    4512:	88 81       	ld	r24, Y
    4514:	87 70       	andi	r24, 0x07	; 7
    4516:	8f 5f       	subi	r24, 0xFF	; 255
    4518:	88 83       	st	Y, r24
    451a:	33 c0       	rjmp	.+102    	; 0x4582 <nibbleChange+0x354>
    451c:	ec 2f       	mov	r30, r28
    451e:	f0 e0       	ldi	r31, 0x00	; 0
    4520:	ec 53       	subi	r30, 0x3C	; 60
    4522:	fa 4f       	sbci	r31, 0xFA	; 250
    4524:	80 81       	ld	r24, Z
    4526:	82 50       	subi	r24, 0x02	; 2
    4528:	87 70       	andi	r24, 0x07	; 7
    452a:	8f 5f       	subi	r24, 0xFF	; 255
    452c:	80 83       	st	Z, r24
    452e:	29 c0       	rjmp	.+82     	; 0x4582 <nibbleChange+0x354>
    4530:	e4 ec       	ldi	r30, 0xC4	; 196
    4532:	f5 e0       	ldi	r31, 0x05	; 5
    4534:	90 81       	ld	r25, Z
    4536:	81 81       	ldd	r24, Z+1	; 0x01
    4538:	99 0f       	add	r25, r25
    453a:	29 2f       	mov	r18, r25
    453c:	22 0f       	add	r18, r18
    453e:	22 0f       	add	r18, r18
    4540:	92 0f       	add	r25, r18
    4542:	89 0f       	add	r24, r25
    4544:	c1 11       	cpse	r28, r1
    4546:	07 c0       	rjmp	.+14     	; 0x4556 <nibbleChange+0x328>
    4548:	66 0f       	add	r22, r22
    454a:	96 2f       	mov	r25, r22
    454c:	99 0f       	add	r25, r25
    454e:	99 0f       	add	r25, r25
    4550:	69 0f       	add	r22, r25
    4552:	68 0f       	add	r22, r24
    4554:	01 c0       	rjmp	.+2      	; 0x4558 <nibbleChange+0x32a>
    4556:	68 0f       	add	r22, r24
    4558:	66 23       	and	r22, r22
    455a:	1c f0       	brlt	.+6      	; 0x4562 <nibbleChange+0x334>
    455c:	61 34       	cpi	r22, 0x41	; 65
    455e:	1c f4       	brge	.+6      	; 0x4566 <nibbleChange+0x338>
    4560:	03 c0       	rjmp	.+6      	; 0x4568 <nibbleChange+0x33a>
    4562:	60 e0       	ldi	r22, 0x00	; 0
    4564:	01 c0       	rjmp	.+2      	; 0x4568 <nibbleChange+0x33a>
    4566:	60 e0       	ldi	r22, 0x00	; 0
    4568:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    456c:	06 c0       	rjmp	.+12     	; 0x457a <nibbleChange+0x34c>
    456e:	e4 ec       	ldi	r30, 0xC4	; 196
    4570:	f5 e0       	ldi	r31, 0x05	; 5
    4572:	80 81       	ld	r24, Z
    4574:	8f 5f       	subi	r24, 0xFF	; 255
    4576:	80 83       	st	Z, r24
    4578:	6a 50       	subi	r22, 0x0A	; 10
    457a:	6a 30       	cpi	r22, 0x0A	; 10
    457c:	c4 f7       	brge	.-16     	; 0x456e <nibbleChange+0x340>
    457e:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    4582:	df 91       	pop	r29
    4584:	cf 91       	pop	r28
    4586:	1f 91       	pop	r17
    4588:	0f 91       	pop	r16
    458a:	08 95       	ret

0000458c <nibbleToData>:
    458c:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4590:	8e 2f       	mov	r24, r30
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	fc 01       	movw	r30, r24
    4596:	32 97       	sbiw	r30, 0x02	; 2
    4598:	ed 30       	cpi	r30, 0x0D	; 13
    459a:	f1 05       	cpc	r31, r1
    459c:	08 f0       	brcs	.+2      	; 0x45a0 <nibbleToData+0x14>
    459e:	da c0       	rjmp	.+436    	; 0x4754 <nibbleToData+0x1c8>
    45a0:	88 27       	eor	r24, r24
    45a2:	e7 56       	subi	r30, 0x67	; 103
    45a4:	ff 4f       	sbci	r31, 0xFF	; 255
    45a6:	8f 4f       	sbci	r24, 0xFF	; 255
    45a8:	0c 94 a1 3b 	jmp	0x7742	; 0x7742 <__tablejump2__>
    45ac:	e4 ec       	ldi	r30, 0xC4	; 196
    45ae:	f5 e0       	ldi	r31, 0x05	; 5
    45b0:	80 81       	ld	r24, Z
    45b2:	20 e1       	ldi	r18, 0x10	; 16
    45b4:	82 9f       	mul	r24, r18
    45b6:	c0 01       	movw	r24, r0
    45b8:	11 24       	eor	r1, r1
    45ba:	91 81       	ldd	r25, Z+1	; 0x01
    45bc:	9f 70       	andi	r25, 0x0F	; 15
    45be:	89 2b       	or	r24, r25
    45c0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45c4:	08 95       	ret
    45c6:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    45ca:	8f ef       	ldi	r24, 0xFF	; 255
    45cc:	89 0f       	add	r24, r25
    45ce:	80 31       	cpi	r24, 0x10	; 16
    45d0:	18 f0       	brcs	.+6      	; 0x45d8 <nibbleToData+0x4c>
    45d2:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    45d6:	08 95       	ret
    45d8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45dc:	08 95       	ret
    45de:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    45e2:	9f 3f       	cpi	r25, 0xFF	; 255
    45e4:	21 f0       	breq	.+8      	; 0x45ee <nibbleToData+0x62>
    45e6:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    45ea:	8f 3f       	cpi	r24, 0xFF	; 255
    45ec:	21 f4       	brne	.+8      	; 0x45f6 <nibbleToData+0x6a>
    45ee:	8f ef       	ldi	r24, 0xFF	; 255
    45f0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45f4:	08 95       	ret
    45f6:	28 2f       	mov	r18, r24
    45f8:	22 0f       	add	r18, r18
    45fa:	82 0f       	add	r24, r18
    45fc:	88 0f       	add	r24, r24
    45fe:	88 0f       	add	r24, r24
    4600:	89 0f       	add	r24, r25
    4602:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4606:	08 95       	ret
    4608:	e4 ec       	ldi	r30, 0xC4	; 196
    460a:	f5 e0       	ldi	r31, 0x05	; 5
    460c:	80 81       	ld	r24, Z
    460e:	30 e2       	ldi	r19, 0x20	; 32
    4610:	83 9f       	mul	r24, r19
    4612:	c0 01       	movw	r24, r0
    4614:	11 24       	eor	r1, r1
    4616:	21 81       	ldd	r18, Z+1	; 0x01
    4618:	32 81       	ldd	r19, Z+2	; 0x02
    461a:	22 0f       	add	r18, r18
    461c:	42 2f       	mov	r20, r18
    461e:	44 0f       	add	r20, r20
    4620:	44 0f       	add	r20, r20
    4622:	24 0f       	add	r18, r20
    4624:	23 0f       	add	r18, r19
    4626:	20 32       	cpi	r18, 0x20	; 32
    4628:	20 f0       	brcs	.+8      	; 0x4632 <nibbleToData+0xa6>
    462a:	8f 61       	ori	r24, 0x1F	; 31
    462c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4630:	08 95       	ret
    4632:	82 2b       	or	r24, r18
    4634:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4638:	08 95       	ret
    463a:	e4 ec       	ldi	r30, 0xC4	; 196
    463c:	f5 e0       	ldi	r31, 0x05	; 5
    463e:	20 81       	ld	r18, Z
    4640:	81 81       	ldd	r24, Z+1	; 0x01
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	ac 01       	movw	r20, r24
    4646:	44 0f       	add	r20, r20
    4648:	55 1f       	adc	r21, r21
    464a:	88 0f       	add	r24, r24
    464c:	99 1f       	adc	r25, r25
    464e:	88 0f       	add	r24, r24
    4650:	99 1f       	adc	r25, r25
    4652:	88 0f       	add	r24, r24
    4654:	99 1f       	adc	r25, r25
    4656:	84 0f       	add	r24, r20
    4658:	95 1f       	adc	r25, r21
    465a:	34 e6       	ldi	r19, 0x64	; 100
    465c:	23 9f       	mul	r18, r19
    465e:	80 0d       	add	r24, r0
    4660:	91 1d       	adc	r25, r1
    4662:	11 24       	eor	r1, r1
    4664:	22 81       	ldd	r18, Z+2	; 0x02
    4666:	82 0f       	add	r24, r18
    4668:	91 1d       	adc	r25, r1
    466a:	8f 3f       	cpi	r24, 0xFF	; 255
    466c:	91 05       	cpc	r25, r1
    466e:	29 f0       	breq	.+10     	; 0x467a <nibbleToData+0xee>
    4670:	20 f0       	brcs	.+8      	; 0x467a <nibbleToData+0xee>
    4672:	8f ef       	ldi	r24, 0xFF	; 255
    4674:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4678:	08 95       	ret
    467a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    467e:	08 95       	ret
    4680:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4684:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4688:	84 30       	cpi	r24, 0x04	; 4
    468a:	08 f4       	brcc	.+2      	; 0x468e <nibbleToData+0x102>
    468c:	63 c0       	rjmp	.+198    	; 0x4754 <nibbleToData+0x1c8>
    468e:	8f ef       	ldi	r24, 0xFF	; 255
    4690:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4694:	08 95       	ret
    4696:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    469a:	83 70       	andi	r24, 0x03	; 3
    469c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    46a0:	08 95       	ret
    46a2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    46a6:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    46aa:	08 95       	ret
    46ac:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    46b0:	80 e0       	ldi	r24, 0x00	; 0
    46b2:	0c c0       	rjmp	.+24     	; 0x46cc <nibbleToData+0x140>
    46b4:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    46b8:	99 0f       	add	r25, r25
    46ba:	e8 2f       	mov	r30, r24
    46bc:	f0 e0       	ldi	r31, 0x00	; 0
    46be:	ec 53       	subi	r30, 0x3C	; 60
    46c0:	fa 4f       	sbci	r31, 0xFA	; 250
    46c2:	20 81       	ld	r18, Z
    46c4:	92 0f       	add	r25, r18
    46c6:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    46ca:	8f 5f       	subi	r24, 0xFF	; 255
    46cc:	88 30       	cpi	r24, 0x08	; 8
    46ce:	90 f3       	brcs	.-28     	; 0x46b4 <nibbleToData+0x128>
    46d0:	08 95       	ret
    46d2:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    46d6:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    46da:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    46de:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    46e2:	a2 ea       	ldi	r26, 0xA2	; 162
    46e4:	b5 e0       	ldi	r27, 0x05	; 5
    46e6:	88 e0       	ldi	r24, 0x08	; 8
    46e8:	10 c0       	rjmp	.+32     	; 0x470a <nibbleToData+0x17e>
    46ea:	82 50       	subi	r24, 0x02	; 2
    46ec:	f0 e0       	ldi	r31, 0x00	; 0
    46ee:	ec 53       	subi	r30, 0x3C	; 60
    46f0:	fa 4f       	sbci	r31, 0xFA	; 250
    46f2:	90 81       	ld	r25, Z
    46f4:	e8 2f       	mov	r30, r24
    46f6:	f0 e0       	ldi	r31, 0x00	; 0
    46f8:	ec 53       	subi	r30, 0x3C	; 60
    46fa:	fa 4f       	sbci	r31, 0xFA	; 250
    46fc:	20 81       	ld	r18, Z
    46fe:	30 e1       	ldi	r19, 0x10	; 16
    4700:	23 9f       	mul	r18, r19
    4702:	90 0d       	add	r25, r0
    4704:	11 24       	eor	r1, r1
    4706:	9c 93       	st	X, r25
    4708:	11 96       	adiw	r26, 0x01	; 1
    470a:	ef ef       	ldi	r30, 0xFF	; 255
    470c:	e8 0f       	add	r30, r24
    470e:	81 11       	cpse	r24, r1
    4710:	ec cf       	rjmp	.-40     	; 0x46ea <nibbleToData+0x15e>
    4712:	08 95       	ret
    4714:	e4 ec       	ldi	r30, 0xC4	; 196
    4716:	f5 e0       	ldi	r31, 0x05	; 5
    4718:	20 81       	ld	r18, Z
    471a:	91 81       	ldd	r25, Z+1	; 0x01
    471c:	89 2f       	mov	r24, r25
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	88 0f       	add	r24, r24
    4724:	99 1f       	adc	r25, r25
    4726:	88 0f       	add	r24, r24
    4728:	99 1f       	adc	r25, r25
    472a:	88 0f       	add	r24, r24
    472c:	99 1f       	adc	r25, r25
    472e:	9f ef       	ldi	r25, 0xFF	; 255
    4730:	92 0f       	add	r25, r18
    4732:	89 2b       	or	r24, r25
    4734:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4738:	08 95       	ret
    473a:	e4 ec       	ldi	r30, 0xC4	; 196
    473c:	f5 e0       	ldi	r31, 0x05	; 5
    473e:	80 81       	ld	r24, Z
    4740:	91 81       	ldd	r25, Z+1	; 0x01
    4742:	88 0f       	add	r24, r24
    4744:	28 2f       	mov	r18, r24
    4746:	22 0f       	add	r18, r18
    4748:	22 0f       	add	r18, r18
    474a:	82 0f       	add	r24, r18
    474c:	89 0f       	add	r24, r25
    474e:	81 50       	subi	r24, 0x01	; 1
    4750:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4754:	08 95       	ret

00004756 <menuTextOut>:
    4756:	0f 93       	push	r16
    4758:	1f 93       	push	r17
    475a:	cf 93       	push	r28
    475c:	df 93       	push	r29
    475e:	8c 01       	movw	r16, r24
    4760:	d6 2f       	mov	r29, r22
    4762:	c0 e0       	ldi	r28, 0x00	; 0
    4764:	0c c0       	rjmp	.+24     	; 0x477e <menuTextOut+0x28>
    4766:	f8 01       	movw	r30, r16
    4768:	84 91       	lpm	r24, Z
    476a:	88 23       	and	r24, r24
    476c:	19 f0       	breq	.+6      	; 0x4774 <menuTextOut+0x1e>
    476e:	0f 5f       	subi	r16, 0xFF	; 255
    4770:	1f 4f       	sbci	r17, 0xFF	; 255
    4772:	02 c0       	rjmp	.+4      	; 0x4778 <menuTextOut+0x22>
    4774:	8d 2f       	mov	r24, r29
    4776:	d0 e2       	ldi	r29, 0x20	; 32
    4778:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    477c:	cf 5f       	subi	r28, 0xFF	; 255
    477e:	ca 30       	cpi	r28, 0x0A	; 10
    4780:	90 f3       	brcs	.-28     	; 0x4766 <menuTextOut+0x10>
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	1f 91       	pop	r17
    4788:	0f 91       	pop	r16
    478a:	08 95       	ret

0000478c <menuParentMenuToLCD>:
    478c:	80 e4       	ldi	r24, 0x40	; 64
    478e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    4792:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4796:	e1 11       	cpse	r30, r1
    4798:	07 c0       	rjmp	.+14     	; 0x47a8 <menuParentMenuToLCD+0x1c>
    479a:	6a e3       	ldi	r22, 0x3A	; 58
    479c:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    47a0:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    47a4:	d8 cf       	rjmp	.-80     	; 0x4756 <menuTextOut>
    47a6:	08 95       	ret
    47a8:	f0 e0       	ldi	r31, 0x00	; 0
    47aa:	31 97       	sbiw	r30, 0x01	; 1
    47ac:	ee 0f       	add	r30, r30
    47ae:	ff 1f       	adc	r31, r31
    47b0:	e5 58       	subi	r30, 0x85	; 133
    47b2:	fa 4f       	sbci	r31, 0xFA	; 250
    47b4:	80 81       	ld	r24, Z
    47b6:	91 81       	ldd	r25, Z+1	; 0x01
    47b8:	6a e3       	ldi	r22, 0x3A	; 58
    47ba:	02 96       	adiw	r24, 0x02	; 2
    47bc:	cc cf       	rjmp	.-104    	; 0x4756 <menuTextOut>
    47be:	08 95       	ret

000047c0 <menuDisplayValue>:
    47c0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    47c4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    47c8:	84 91       	lpm	r24, Z
    47ca:	8f 73       	andi	r24, 0x3F	; 63
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	02 97       	sbiw	r24, 0x02	; 2
    47d0:	1c f0       	brlt	.+6      	; 0x47d8 <menuDisplayValue+0x18>
    47d2:	c8 da       	rcall	.-2672   	; 0x3d64 <dataToNibbles>
    47d4:	ba db       	rcall	.-2188   	; 0x3f4a <nibbleToLCDstring>
    47d6:	07 cd       	rjmp	.-1522   	; 0x41e6 <LCDStringOut>
    47d8:	08 95       	ret

000047da <menuCursorSetDataNibble>:
    47da:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    47de:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    47e2:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    47e6:	e8 0f       	add	r30, r24
    47e8:	f1 1d       	adc	r31, r1
    47ea:	31 96       	adiw	r30, 0x01	; 1
    47ec:	84 91       	lpm	r24, Z
    47ee:	82 5e       	subi	r24, 0xE2	; 226
    47f0:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    47f4:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    47f8:	30 e0       	ldi	r19, 0x00	; 0
    47fa:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    47fe:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4802:	84 91       	lpm	r24, Z
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	28 17       	cp	r18, r24
    480a:	39 07       	cpc	r19, r25
    480c:	14 f4       	brge	.+4      	; 0x4812 <menuCursorSetDataNibble+0x38>
    480e:	68 da       	rcall	.-2864   	; 0x3ce0 <softkeyRight>
    4810:	03 c0       	rjmp	.+6      	; 0x4818 <menuCursorSetDataNibble+0x3e>
    4812:	83 e0       	ldi	r24, 0x03	; 3
    4814:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4818:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    481c:	88 23       	and	r24, r24
    481e:	11 f0       	breq	.+4      	; 0x4824 <menuCursorSetDataNibble+0x4a>
    4820:	59 da       	rcall	.-2894   	; 0x3cd4 <softkeyLeft>
    4822:	03 c0       	rjmp	.+6      	; 0x482a <menuCursorSetDataNibble+0x50>
    4824:	82 e0       	ldi	r24, 0x02	; 2
    4826:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    482a:	78 da       	rcall	.-2832   	; 0x3d1c <softkeyPlus>
    482c:	89 da       	rcall	.-2798   	; 0x3d40 <softkeyMinus>
    482e:	0c 94 3e 3b 	jmp	0x767c	; 0x767c <keylabel_toLCD>
    4832:	08 95       	ret

00004834 <menuCursorSetExtra>:
    4834:	84 e1       	ldi	r24, 0x14	; 20
    4836:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <lcd_goto>
    483a:	08 95       	ret

0000483c <menuOnEnterStatusMidiIn>:
    483c:	0f 93       	push	r16
    483e:	1f 93       	push	r17
    4840:	cf 93       	push	r28
    4842:	f8 df       	rcall	.-16     	; 0x4834 <menuCursorSetExtra>
    4844:	8e ee       	ldi	r24, 0xEE	; 238
    4846:	93 e0       	ldi	r25, 0x03	; 3
    4848:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    484c:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    4850:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4854:	0e 94 27 3a 	call	0x744e	; 0x744e <lcd_wordout>
    4858:	8d e2       	ldi	r24, 0x2D	; 45
    485a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    485e:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    4862:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4866:	04 97       	sbiw	r24, 0x04	; 4
    4868:	30 f4       	brcc	.+12     	; 0x4876 <menuOnEnterStatusMidiIn+0x3a>
    486a:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    486e:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4872:	c8 2f       	mov	r28, r24
    4874:	01 c0       	rjmp	.+2      	; 0x4878 <menuOnEnterStatusMidiIn+0x3c>
    4876:	c4 e0       	ldi	r28, 0x04	; 4
    4878:	00 91 44 16 	lds	r16, 0x1644	; 0x801644 <midiRxInIndex>
    487c:	10 e0       	ldi	r17, 0x00	; 0
    487e:	00 5c       	subi	r16, 0xC0	; 192
    4880:	1b 4e       	sbci	r17, 0xEB	; 235
    4882:	13 c0       	rjmp	.+38     	; 0x48aa <menuOnEnterStatusMidiIn+0x6e>
    4884:	84 e1       	ldi	r24, 0x14	; 20
    4886:	01 34       	cpi	r16, 0x41	; 65
    4888:	18 07       	cpc	r17, r24
    488a:	10 f0       	brcs	.+4      	; 0x4890 <menuOnEnterStatusMidiIn+0x54>
    488c:	f8 01       	movw	r30, r16
    488e:	02 c0       	rjmp	.+4      	; 0x4894 <menuOnEnterStatusMidiIn+0x58>
    4890:	e0 e4       	ldi	r30, 0x40	; 64
    4892:	f5 e1       	ldi	r31, 0x15	; 21
    4894:	8f 01       	movw	r16, r30
    4896:	01 50       	subi	r16, 0x01	; 1
    4898:	11 09       	sbc	r17, r1
    489a:	80 81       	ld	r24, Z
    489c:	0e 94 ab 38 	call	0x7156	; 0x7156 <lcd_hexout>
    48a0:	c1 50       	subi	r28, 0x01	; 1
    48a2:	19 f0       	breq	.+6      	; 0x48aa <menuOnEnterStatusMidiIn+0x6e>
    48a4:	80 e2       	ldi	r24, 0x20	; 32
    48a6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    48aa:	c1 11       	cpse	r28, r1
    48ac:	eb cf       	rjmp	.-42     	; 0x4884 <menuOnEnterStatusMidiIn+0x48>
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	cf 91       	pop	r28
    48b2:	1f 91       	pop	r17
    48b4:	0f 91       	pop	r16
    48b6:	08 95       	ret

000048b8 <menuOnEnterStatusMidiOut>:
    48b8:	0f 93       	push	r16
    48ba:	1f 93       	push	r17
    48bc:	cf 93       	push	r28
    48be:	ba df       	rcall	.-140    	; 0x4834 <menuCursorSetExtra>
    48c0:	89 ee       	ldi	r24, 0xE9	; 233
    48c2:	93 e0       	ldi	r25, 0x03	; 3
    48c4:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    48c8:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    48cc:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    48d0:	0e 94 27 3a 	call	0x744e	; 0x744e <lcd_wordout>
    48d4:	8d e2       	ldi	r24, 0x2D	; 45
    48d6:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    48da:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    48de:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    48e2:	04 97       	sbiw	r24, 0x04	; 4
    48e4:	30 f4       	brcc	.+12     	; 0x48f2 <menuOnEnterStatusMidiOut+0x3a>
    48e6:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    48ea:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    48ee:	c8 2f       	mov	r28, r24
    48f0:	01 c0       	rjmp	.+2      	; 0x48f4 <menuOnEnterStatusMidiOut+0x3c>
    48f2:	c4 e0       	ldi	r28, 0x04	; 4
    48f4:	00 91 ef 13 	lds	r16, 0x13EF	; 0x8013ef <midiTxInIndex>
    48f8:	10 e0       	ldi	r17, 0x00	; 0
    48fa:	0f 5b       	subi	r16, 0xBF	; 191
    48fc:	1a 4e       	sbci	r17, 0xEA	; 234
    48fe:	13 c0       	rjmp	.+38     	; 0x4926 <menuOnEnterStatusMidiOut+0x6e>
    4900:	85 e1       	ldi	r24, 0x15	; 21
    4902:	02 34       	cpi	r16, 0x42	; 66
    4904:	18 07       	cpc	r17, r24
    4906:	10 f0       	brcs	.+4      	; 0x490c <menuOnEnterStatusMidiOut+0x54>
    4908:	f8 01       	movw	r30, r16
    490a:	02 c0       	rjmp	.+4      	; 0x4910 <menuOnEnterStatusMidiOut+0x58>
    490c:	e1 e4       	ldi	r30, 0x41	; 65
    490e:	f6 e1       	ldi	r31, 0x16	; 22
    4910:	8f 01       	movw	r16, r30
    4912:	01 50       	subi	r16, 0x01	; 1
    4914:	11 09       	sbc	r17, r1
    4916:	80 81       	ld	r24, Z
    4918:	0e 94 ab 38 	call	0x7156	; 0x7156 <lcd_hexout>
    491c:	c1 50       	subi	r28, 0x01	; 1
    491e:	19 f0       	breq	.+6      	; 0x4926 <menuOnEnterStatusMidiOut+0x6e>
    4920:	80 e2       	ldi	r24, 0x20	; 32
    4922:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    4926:	c1 11       	cpse	r28, r1
    4928:	eb cf       	rjmp	.-42     	; 0x4900 <menuOnEnterStatusMidiOut+0x48>
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	cf 91       	pop	r28
    492e:	1f 91       	pop	r17
    4930:	0f 91       	pop	r16
    4932:	08 95       	ret

00004934 <menuOnEnterLogDisp>:
    4934:	0f 93       	push	r16
    4936:	1f 93       	push	r17
    4938:	cf 93       	push	r28
    493a:	8f 3f       	cpi	r24, 0xFF	; 255
    493c:	a9 f4       	brne	.+42     	; 0x4968 <menuOnEnterLogDisp+0x34>
    493e:	0e 94 62 13 	call	0x26c4	; 0x26c4 <log_count>
    4942:	81 50       	subi	r24, 0x01	; 1
    4944:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3014>
    4948:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.3015>
    494c:	63 e4       	ldi	r22, 0x43	; 67
    494e:	72 e1       	ldi	r23, 0x12	; 18
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    4956:	6d e3       	ldi	r22, 0x3D	; 61
    4958:	72 e1       	ldi	r23, 0x12	; 18
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    4960:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
    4964:	cf ef       	ldi	r28, 0xFF	; 255
    4966:	2f c0       	rjmp	.+94     	; 0x49c6 <menuOnEnterLogDisp+0x92>
    4968:	84 30       	cpi	r24, 0x04	; 4
    496a:	49 f4       	brne	.+18     	; 0x497e <menuOnEnterLogDisp+0x4a>
    496c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3014>
    4970:	88 23       	and	r24, r24
    4972:	21 f1       	breq	.+72     	; 0x49bc <menuOnEnterLogDisp+0x88>
    4974:	81 50       	subi	r24, 0x01	; 1
    4976:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3014>
    497a:	cf ef       	ldi	r28, 0xFF	; 255
    497c:	24 c0       	rjmp	.+72     	; 0x49c6 <menuOnEnterLogDisp+0x92>
    497e:	81 30       	cpi	r24, 0x01	; 1
    4980:	91 f4       	brne	.+36     	; 0x49a6 <menuOnEnterLogDisp+0x72>
    4982:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3014>
    4986:	10 e0       	ldi	r17, 0x00	; 0
    4988:	0f 5f       	subi	r16, 0xFF	; 255
    498a:	1f 4f       	sbci	r17, 0xFF	; 255
    498c:	0e 94 62 13 	call	0x26c4	; 0x26c4 <log_count>
    4990:	90 e0       	ldi	r25, 0x00	; 0
    4992:	08 17       	cp	r16, r24
    4994:	19 07       	cpc	r17, r25
    4996:	a4 f4       	brge	.+40     	; 0x49c0 <menuOnEnterLogDisp+0x8c>
    4998:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3014>
    499c:	8f 5f       	subi	r24, 0xFF	; 255
    499e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3014>
    49a2:	cf ef       	ldi	r28, 0xFF	; 255
    49a4:	10 c0       	rjmp	.+32     	; 0x49c6 <menuOnEnterLogDisp+0x92>
    49a6:	83 30       	cpi	r24, 0x03	; 3
    49a8:	11 f0       	breq	.+4      	; 0x49ae <menuOnEnterLogDisp+0x7a>
    49aa:	85 30       	cpi	r24, 0x05	; 5
    49ac:	59 f4       	brne	.+22     	; 0x49c4 <menuOnEnterLogDisp+0x90>
    49ae:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3015>
    49b2:	80 95       	com	r24
    49b4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.3015>
    49b8:	cf ef       	ldi	r28, 0xFF	; 255
    49ba:	05 c0       	rjmp	.+10     	; 0x49c6 <menuOnEnterLogDisp+0x92>
    49bc:	cf ef       	ldi	r28, 0xFF	; 255
    49be:	03 c0       	rjmp	.+6      	; 0x49c6 <menuOnEnterLogDisp+0x92>
    49c0:	cf ef       	ldi	r28, 0xFF	; 255
    49c2:	01 c0       	rjmp	.+2      	; 0x49c6 <menuOnEnterLogDisp+0x92>
    49c4:	c0 e0       	ldi	r28, 0x00	; 0
    49c6:	cf 3f       	cpi	r28, 0xFF	; 255
    49c8:	09 f0       	breq	.+2      	; 0x49cc <menuOnEnterLogDisp+0x98>
    49ca:	54 c0       	rjmp	.+168    	; 0x4a74 <menuOnEnterLogDisp+0x140>
    49cc:	33 df       	rcall	.-410    	; 0x4834 <menuCursorSetExtra>
    49ce:	0e 94 62 13 	call	0x26c4	; 0x26c4 <log_count>
    49d2:	81 11       	cpse	r24, r1
    49d4:	06 c0       	rjmp	.+12     	; 0x49e2 <menuOnEnterLogDisp+0xae>
    49d6:	89 e9       	ldi	r24, 0x99	; 153
    49d8:	93 e0       	ldi	r25, 0x03	; 3
    49da:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    49de:	c0 e0       	ldi	r28, 0x00	; 0
    49e0:	1d c0       	rjmp	.+58     	; 0x4a1c <menuOnEnterLogDisp+0xe8>
    49e2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3014>
    49e6:	8f 5f       	subi	r24, 0xFF	; 255
    49e8:	0e 94 e7 38 	call	0x71ce	; 0x71ce <lcd_dec2out>
    49ec:	8a e3       	ldi	r24, 0x3A	; 58
    49ee:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    49f2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3015>
    49f6:	81 11       	cpse	r24, r1
    49f8:	08 c0       	rjmp	.+16     	; 0x4a0a <menuOnEnterLogDisp+0xd6>
    49fa:	60 e2       	ldi	r22, 0x20	; 32
    49fc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3014>
    4a00:	0e 94 03 15 	call	0x2a06	; 0x2a06 <log_getShortTextFromIndex>
    4a04:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_puts>
    4a08:	06 c0       	rjmp	.+12     	; 0x4a16 <menuOnEnterLogDisp+0xe2>
    4a0a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3014>
    4a0e:	0e 94 a9 13 	call	0x2752	; 0x2752 <log_getErrorText>
    4a12:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    4a16:	0e 94 af 3a 	call	0x755e	; 0x755e <lcd_clrEol>
    4a1a:	0c df       	rcall	.-488    	; 0x4834 <menuCursorSetExtra>
    4a1c:	61 e0       	ldi	r22, 0x01	; 1
    4a1e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3015>
    4a22:	8f 3f       	cpi	r24, 0xFF	; 255
    4a24:	09 f0       	breq	.+2      	; 0x4a28 <menuOnEnterLogDisp+0xf4>
    4a26:	60 e0       	ldi	r22, 0x00	; 0
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <keylabel_statcheck>
    4a2e:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3014>
    4a32:	10 e0       	ldi	r17, 0x00	; 0
    4a34:	0f 5f       	subi	r16, 0xFF	; 255
    4a36:	1f 4f       	sbci	r17, 0xFF	; 255
    4a38:	0e 94 62 13 	call	0x26c4	; 0x26c4 <log_count>
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	08 17       	cp	r16, r24
    4a40:	19 07       	cpc	r17, r25
    4a42:	34 f4       	brge	.+12     	; 0x4a50 <menuOnEnterLogDisp+0x11c>
    4a44:	6d e5       	ldi	r22, 0x5D	; 93
    4a46:	72 e1       	ldi	r23, 0x12	; 18
    4a48:	83 e0       	ldi	r24, 0x03	; 3
    4a4a:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    4a4e:	03 c0       	rjmp	.+6      	; 0x4a56 <menuOnEnterLogDisp+0x122>
    4a50:	83 e0       	ldi	r24, 0x03	; 3
    4a52:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4a56:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3014>
    4a5a:	88 23       	and	r24, r24
    4a5c:	31 f0       	breq	.+12     	; 0x4a6a <menuOnEnterLogDisp+0x136>
    4a5e:	6b e5       	ldi	r22, 0x5B	; 91
    4a60:	72 e1       	ldi	r23, 0x12	; 18
    4a62:	82 e0       	ldi	r24, 0x02	; 2
    4a64:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
    4a68:	03 c0       	rjmp	.+6      	; 0x4a70 <menuOnEnterLogDisp+0x13c>
    4a6a:	82 e0       	ldi	r24, 0x02	; 2
    4a6c:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4a70:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
    4a74:	8c 2f       	mov	r24, r28
    4a76:	cf 91       	pop	r28
    4a78:	1f 91       	pop	r17
    4a7a:	0f 91       	pop	r16
    4a7c:	08 95       	ret

00004a7e <menuCursorSetMenu>:
    4a7e:	8a e4       	ldi	r24, 0x4A	; 74
    4a80:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <lcd_goto>
    4a84:	08 95       	ret

00004a86 <menuClearExtraDisp>:
    4a86:	d6 de       	rcall	.-596    	; 0x4834 <menuCursorSetExtra>
    4a88:	8a e0       	ldi	r24, 0x0A	; 10
    4a8a:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <lcd_blank>
    4a8e:	08 95       	ret

00004a90 <menu_ClearDataDisp>:
    4a90:	8e e1       	ldi	r24, 0x1E	; 30
    4a92:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    4a96:	8a e0       	ldi	r24, 0x0A	; 10
    4a98:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <lcd_blank>
    4a9c:	08 95       	ret

00004a9e <menuClearMenuDisp>:
    4a9e:	80 e4       	ldi	r24, 0x40	; 64
    4aa0:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    4aa4:	8a e0       	ldi	r24, 0x0A	; 10
    4aa6:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
    4aaa:	e9 df       	rcall	.-46     	; 0x4a7e <menuCursorSetMenu>
    4aac:	8a e0       	ldi	r24, 0x0A	; 10
    4aae:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <lcd_blank>
    4ab2:	08 95       	ret

00004ab4 <menu_ClearAllDisp>:
    4ab4:	f4 df       	rcall	.-24     	; 0x4a9e <menuClearMenuDisp>
    4ab6:	ec df       	rcall	.-40     	; 0x4a90 <menu_ClearDataDisp>
    4ab8:	e6 cf       	rjmp	.-52     	; 0x4a86 <menuClearExtraDisp>
    4aba:	08 95       	ret

00004abc <menuCheckArrowDown>:
    4abc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4ac0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4ac4:	84 91       	lpm	r24, Z
    4ac6:	8f 73       	andi	r24, 0x3F	; 63
    4ac8:	81 30       	cpi	r24, 0x01	; 1
    4aca:	11 f4       	brne	.+4      	; 0x4ad0 <menuCheckArrowDown+0x14>
    4acc:	0f c9       	rjmp	.-3554   	; 0x3cec <softkeyDown>
    4ace:	08 95       	ret
    4ad0:	3e 96       	adiw	r30, 0x0e	; 14
    4ad2:	05 90       	lpm	r0, Z+
    4ad4:	f4 91       	lpm	r31, Z
    4ad6:	e0 2d       	mov	r30, r0
    4ad8:	30 97       	sbiw	r30, 0x00	; 0
    4ada:	59 f0       	breq	.+22     	; 0x4af2 <menuCheckArrowDown+0x36>
    4adc:	89 30       	cpi	r24, 0x09	; 9
    4ade:	39 f4       	brne	.+14     	; 0x4aee <menuCheckArrowDown+0x32>
    4ae0:	80 81       	ld	r24, Z
    4ae2:	81 11       	cpse	r24, r1
    4ae4:	02 c0       	rjmp	.+4      	; 0x4aea <menuCheckArrowDown+0x2e>
    4ae6:	08 c9       	rjmp	.-3568   	; 0x3cf8 <softkeyOn>
    4ae8:	08 95       	ret
    4aea:	0c c9       	rjmp	.-3560   	; 0x3d04 <softkeyOff>
    4aec:	08 95       	ret
    4aee:	fe c8       	rjmp	.-3588   	; 0x3cec <softkeyDown>
    4af0:	08 95       	ret
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	0c 94 2a 3b 	jmp	0x7654	; 0x7654 <keylabel_clr>
    4af8:	08 95       	ret

00004afa <menuCurrMenuToLCD>:
    4afa:	cf 93       	push	r28
    4afc:	89 e4       	ldi	r24, 0x49	; 73
    4afe:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    4b02:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4b06:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4b0a:	c4 91       	lpm	r28, Z
    4b0c:	c0 7c       	andi	r28, 0xC0	; 192
    4b0e:	c0 38       	cpi	r28, 0x80	; 128
    4b10:	39 f4       	brne	.+14     	; 0x4b20 <menuCurrMenuToLCD+0x26>
    4b12:	80 e2       	ldi	r24, 0x20	; 32
    4b14:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    4b18:	82 e0       	ldi	r24, 0x02	; 2
    4b1a:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4b1e:	04 c0       	rjmp	.+8      	; 0x4b28 <menuCurrMenuToLCD+0x2e>
    4b20:	8f e7       	ldi	r24, 0x7F	; 127
    4b22:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    4b26:	d6 d8       	rcall	.-3668   	; 0x3cd4 <softkeyLeft>
    4b28:	c0 3c       	cpi	r28, 0xC0	; 192
    4b2a:	29 f4       	brne	.+10     	; 0x4b36 <menuCurrMenuToLCD+0x3c>
    4b2c:	83 e0       	ldi	r24, 0x03	; 3
    4b2e:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4b32:	c0 e2       	ldi	r28, 0x20	; 32
    4b34:	02 c0       	rjmp	.+4      	; 0x4b3a <menuCurrMenuToLCD+0x40>
    4b36:	d4 d8       	rcall	.-3672   	; 0x3ce0 <softkeyRight>
    4b38:	ce e7       	ldi	r28, 0x7E	; 126
    4b3a:	ea d8       	rcall	.-3628   	; 0x3d10 <softkeyUp>
    4b3c:	bf df       	rcall	.-130    	; 0x4abc <menuCheckArrowDown>
    4b3e:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4b42:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4b46:	6c 2f       	mov	r22, r28
    4b48:	02 96       	adiw	r24, 0x02	; 2
    4b4a:	05 de       	rcall	.-1014   	; 0x4756 <menuTextOut>
    4b4c:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
    4b50:	96 df       	rcall	.-212    	; 0x4a7e <menuCursorSetMenu>
    4b52:	cf 91       	pop	r28
    4b54:	08 95       	ret

00004b56 <menuItemChanged>:
    4b56:	8f ef       	ldi	r24, 0xFF	; 255
    4b58:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4b5c:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4b60:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4b64:	fc 01       	movw	r30, r24
    4b66:	24 91       	lpm	r18, Z
    4b68:	62 2f       	mov	r22, r18
    4b6a:	6f 73       	andi	r22, 0x3F	; 63
    4b6c:	62 30       	cpi	r22, 0x02	; 2
    4b6e:	08 f4       	brcc	.+2      	; 0x4b72 <menuItemChanged+0x1c>
    4b70:	49 c0       	rjmp	.+146    	; 0x4c04 <menuItemChanged+0xae>
    4b72:	9c 01       	movw	r18, r24
    4b74:	22 5f       	subi	r18, 0xF2	; 242
    4b76:	3f 4f       	sbci	r19, 0xFF	; 255
    4b78:	f9 01       	movw	r30, r18
    4b7a:	45 91       	lpm	r20, Z+
    4b7c:	55 91       	lpm	r21, Z+
    4b7e:	41 15       	cp	r20, r1
    4b80:	51 05       	cpc	r21, r1
    4b82:	09 f4       	brne	.+2      	; 0x4b86 <menuItemChanged+0x30>
    4b84:	3f c0       	rjmp	.+126    	; 0x4c04 <menuItemChanged+0xae>
    4b86:	e6 2f       	mov	r30, r22
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	31 97       	sbiw	r30, 0x01	; 1
    4b8c:	9f 01       	movw	r18, r30
    4b8e:	22 0f       	add	r18, r18
    4b90:	33 1f       	adc	r19, r19
    4b92:	22 0f       	add	r18, r18
    4b94:	33 1f       	adc	r19, r19
    4b96:	22 0f       	add	r18, r18
    4b98:	33 1f       	adc	r19, r19
    4b9a:	e2 0f       	add	r30, r18
    4b9c:	f3 1f       	adc	r31, r19
    4b9e:	e4 50       	subi	r30, 0x04	; 4
    4ba0:	fc 4f       	sbci	r31, 0xFC	; 252
    4ba2:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    4ba6:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    4baa:	24 91       	lpm	r18, Z
    4bac:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    4bb0:	fc 01       	movw	r30, r24
    4bb2:	25 91       	lpm	r18, Z+
    4bb4:	2f 73       	andi	r18, 0x3F	; 63
    4bb6:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    4bba:	24 91       	lpm	r18, Z
    4bbc:	22 23       	and	r18, r18
    4bbe:	2c f4       	brge	.+10     	; 0x4bca <menuItemChanged+0x74>
    4bc0:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4bc4:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4bc8:	02 c0       	rjmp	.+4      	; 0x4bce <menuItemChanged+0x78>
    4bca:	20 e0       	ldi	r18, 0x00	; 0
    4bcc:	30 e0       	ldi	r19, 0x00	; 0
    4bce:	24 0f       	add	r18, r20
    4bd0:	35 1f       	adc	r19, r21
    4bd2:	fc 01       	movw	r30, r24
    4bd4:	84 91       	lpm	r24, Z
    4bd6:	8f 73       	andi	r24, 0x3F	; 63
    4bd8:	8b 30       	cpi	r24, 0x0B	; 11
    4bda:	71 f4       	brne	.+28     	; 0x4bf8 <menuItemChanged+0xa2>
    4bdc:	f9 01       	movw	r30, r18
    4bde:	80 81       	ld	r24, Z
    4be0:	91 81       	ldd	r25, Z+1	; 0x01
    4be2:	a2 81       	ldd	r26, Z+2	; 0x02
    4be4:	b3 81       	ldd	r27, Z+3	; 0x03
    4be6:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    4bea:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    4bee:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    4bf2:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    4bf6:	04 c0       	rjmp	.+8      	; 0x4c00 <menuItemChanged+0xaa>
    4bf8:	f9 01       	movw	r30, r18
    4bfa:	80 81       	ld	r24, Z
    4bfc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4c00:	df dd       	rcall	.-1090   	; 0x47c0 <menuDisplayValue>
    4c02:	07 c0       	rjmp	.+14     	; 0x4c12 <menuItemChanged+0xbc>
    4c04:	45 df       	rcall	.-374    	; 0x4a90 <menu_ClearDataDisp>
    4c06:	8c ef       	ldi	r24, 0xFC	; 252
    4c08:	93 e0       	ldi	r25, 0x03	; 3
    4c0a:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    4c0e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4c12:	54 df       	rcall	.-344    	; 0x4abc <menuCheckArrowDown>
    4c14:	34 cf       	rjmp	.-408    	; 0x4a7e <menuCursorSetMenu>
    4c16:	08 95       	ret

00004c18 <menu_InitLCD>:
    4c18:	36 df       	rcall	.-404    	; 0x4a86 <menuClearExtraDisp>
    4c1a:	9d df       	rcall	.-198    	; 0x4b56 <menuItemChanged>
    4c1c:	b7 dd       	rcall	.-1170   	; 0x478c <menuParentMenuToLCD>
    4c1e:	6d df       	rcall	.-294    	; 0x4afa <menuCurrMenuToLCD>
    4c20:	0c 94 c6 3a 	jmp	0x758c	; 0x758c <lcd_cursosblink>
    4c24:	08 95       	ret

00004c26 <menu_ProcessMessage>:
    4c26:	cf 93       	push	r28
    4c28:	c8 2f       	mov	r28, r24
    4c2a:	0e 94 c6 3a 	call	0x758c	; 0x758c <lcd_cursosblink>
    4c2e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c32:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c36:	84 91       	lpm	r24, Z
    4c38:	8f 73       	andi	r24, 0x3F	; 63
    4c3a:	81 30       	cpi	r24, 0x01	; 1
    4c3c:	29 f0       	breq	.+10     	; 0x4c48 <menu_ProcessMessage+0x22>
    4c3e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4c42:	8f 3f       	cpi	r24, 0xFF	; 255
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <menu_ProcessMessage+0x22>
    4c46:	68 c1       	rjmp	.+720    	; 0x4f18 <menu_ProcessMessage+0x2f2>
    4c48:	31 96       	adiw	r30, 0x01	; 1
    4c4a:	84 91       	lpm	r24, Z
    4c4c:	86 ff       	sbrs	r24, 6
    4c4e:	02 c0       	rjmp	.+4      	; 0x4c54 <menu_ProcessMessage+0x2e>
    4c50:	1a df       	rcall	.-460    	; 0x4a86 <menuClearExtraDisp>
    4c52:	15 df       	rcall	.-470    	; 0x4a7e <menuCursorSetMenu>
    4c54:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4c58:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c5c:	cb 01       	movw	r24, r22
    4c5e:	01 96       	adiw	r24, 0x01	; 1
    4c60:	fc 01       	movw	r30, r24
    4c62:	84 91       	lpm	r24, Z
    4c64:	98 2f       	mov	r25, r24
    4c66:	90 72       	andi	r25, 0x20	; 32
    4c68:	85 ff       	sbrs	r24, 5
    4c6a:	1f c0       	rjmp	.+62     	; 0x4caa <menu_ProcessMessage+0x84>
    4c6c:	9b 01       	movw	r18, r22
    4c6e:	20 5f       	subi	r18, 0xF0	; 240
    4c70:	3f 4f       	sbci	r19, 0xFF	; 255
    4c72:	f9 01       	movw	r30, r18
    4c74:	25 91       	lpm	r18, Z+
    4c76:	35 91       	lpm	r19, Z+
    4c78:	21 15       	cp	r18, r1
    4c7a:	31 05       	cpc	r19, r1
    4c7c:	b1 f0       	breq	.+44     	; 0x4caa <menu_ProcessMessage+0x84>
    4c7e:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4c82:	4f 3f       	cpi	r20, 0xFF	; 255
    4c84:	91 f0       	breq	.+36     	; 0x4caa <menu_ProcessMessage+0x84>
    4c86:	8c 2f       	mov	r24, r28
    4c88:	f9 01       	movw	r30, r18
    4c8a:	19 95       	eicall
    4c8c:	8f 3f       	cpi	r24, 0xFF	; 255
    4c8e:	21 f4       	brne	.+8      	; 0x4c98 <menu_ProcessMessage+0x72>
    4c90:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4c94:	80 e0       	ldi	r24, 0x00	; 0
    4c96:	04 c2       	rjmp	.+1032   	; 0x50a0 <menu_ProcessMessage+0x47a>
    4c98:	f6 de       	rcall	.-532    	; 0x4a86 <menuClearExtraDisp>
    4c9a:	fa de       	rcall	.-524    	; 0x4a90 <menu_ClearDataDisp>
    4c9c:	f0 de       	rcall	.-544    	; 0x4a7e <menuCursorSetMenu>
    4c9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ca0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4ca4:	2a df       	rcall	.-428    	; 0x4afa <menuCurrMenuToLCD>
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	fb c1       	rjmp	.+1014   	; 0x50a0 <menu_ProcessMessage+0x47a>
    4caa:	c3 30       	cpi	r28, 0x03	; 3
    4cac:	09 f4       	brne	.+2      	; 0x4cb0 <menu_ProcessMessage+0x8a>
    4cae:	64 c0       	rjmp	.+200    	; 0x4d78 <menu_ProcessMessage+0x152>
    4cb0:	28 f4       	brcc	.+10     	; 0x4cbc <menu_ProcessMessage+0x96>
    4cb2:	c1 30       	cpi	r28, 0x01	; 1
    4cb4:	51 f0       	breq	.+20     	; 0x4cca <menu_ProcessMessage+0xa4>
    4cb6:	c2 30       	cpi	r28, 0x02	; 2
    4cb8:	31 f1       	breq	.+76     	; 0x4d06 <menu_ProcessMessage+0xe0>
    4cba:	db c1       	rjmp	.+950    	; 0x5072 <menu_ProcessMessage+0x44c>
    4cbc:	c5 30       	cpi	r28, 0x05	; 5
    4cbe:	09 f4       	brne	.+2      	; 0x4cc2 <menu_ProcessMessage+0x9c>
    4cc0:	5b c0       	rjmp	.+182    	; 0x4d78 <menu_ProcessMessage+0x152>
    4cc2:	90 f0       	brcs	.+36     	; 0x4ce8 <menu_ProcessMessage+0xc2>
    4cc4:	c6 30       	cpi	r28, 0x06	; 6
    4cc6:	f9 f0       	breq	.+62     	; 0x4d06 <menu_ProcessMessage+0xe0>
    4cc8:	d4 c1       	rjmp	.+936    	; 0x5072 <menu_ProcessMessage+0x44c>
    4cca:	fb 01       	movw	r30, r22
    4ccc:	84 91       	lpm	r24, Z
    4cce:	80 7c       	andi	r24, 0xC0	; 192
    4cd0:	80 3c       	cpi	r24, 0xC0	; 192
    4cd2:	09 f4       	brne	.+2      	; 0x4cd6 <menu_ProcessMessage+0xb0>
    4cd4:	d0 c1       	rjmp	.+928    	; 0x5076 <menu_ProcessMessage+0x450>
    4cd6:	74 96       	adiw	r30, 0x14	; 20
    4cd8:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4cdc:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4ce0:	3a df       	rcall	.-396    	; 0x4b56 <menuItemChanged>
    4ce2:	0b df       	rcall	.-490    	; 0x4afa <menuCurrMenuToLCD>
    4ce4:	80 e0       	ldi	r24, 0x00	; 0
    4ce6:	dc c1       	rjmp	.+952    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4ce8:	fb 01       	movw	r30, r22
    4cea:	84 91       	lpm	r24, Z
    4cec:	80 7c       	andi	r24, 0xC0	; 192
    4cee:	80 38       	cpi	r24, 0x80	; 128
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <menu_ProcessMessage+0xce>
    4cf2:	c3 c1       	rjmp	.+902    	; 0x507a <menu_ProcessMessage+0x454>
    4cf4:	74 97       	sbiw	r30, 0x14	; 20
    4cf6:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4cfa:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4cfe:	2b df       	rcall	.-426    	; 0x4b56 <menuItemChanged>
    4d00:	fc de       	rcall	.-520    	; 0x4afa <menuCurrMenuToLCD>
    4d02:	80 e0       	ldi	r24, 0x00	; 0
    4d04:	cd c1       	rjmp	.+922    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4d06:	84 ff       	sbrs	r24, 4
    4d08:	04 c0       	rjmp	.+8      	; 0x4d12 <menu_ProcessMessage+0xec>
    4d0a:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4d0e:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4d12:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4d16:	ee 23       	and	r30, r30
    4d18:	e9 f0       	breq	.+58     	; 0x4d54 <menu_ProcessMessage+0x12e>
    4d1a:	e1 50       	subi	r30, 0x01	; 1
    4d1c:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4d20:	f0 e0       	ldi	r31, 0x00	; 0
    4d22:	ee 0f       	add	r30, r30
    4d24:	ff 1f       	adc	r31, r31
    4d26:	e5 58       	subi	r30, 0x85	; 133
    4d28:	fa 4f       	sbci	r31, 0xFA	; 250
    4d2a:	01 90       	ld	r0, Z+
    4d2c:	f0 81       	ld	r31, Z
    4d2e:	e0 2d       	mov	r30, r0
    4d30:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4d34:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4d38:	72 96       	adiw	r30, 0x12	; 18
    4d3a:	05 90       	lpm	r0, Z+
    4d3c:	f4 91       	lpm	r31, Z
    4d3e:	e0 2d       	mov	r30, r0
    4d40:	30 97       	sbiw	r30, 0x00	; 0
    4d42:	11 f0       	breq	.+4      	; 0x4d48 <menu_ProcessMessage+0x122>
    4d44:	80 e0       	ldi	r24, 0x00	; 0
    4d46:	19 95       	eicall
    4d48:	9e de       	rcall	.-708    	; 0x4a86 <menuClearExtraDisp>
    4d4a:	20 dd       	rcall	.-1472   	; 0x478c <menuParentMenuToLCD>
    4d4c:	d6 de       	rcall	.-596    	; 0x4afa <menuCurrMenuToLCD>
    4d4e:	03 df       	rcall	.-506    	; 0x4b56 <menuItemChanged>
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	a6 c1       	rjmp	.+844    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4d5a:	81 e0       	ldi	r24, 0x01	; 1
    4d5c:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4d60:	82 e0       	ldi	r24, 0x02	; 2
    4d62:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4d66:	83 e0       	ldi	r24, 0x03	; 3
    4d68:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    4d6c:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
    4d70:	0e 94 cd 3a 	call	0x759a	; 0x759a <lcd_cursoroff>
    4d74:	8f ef       	ldi	r24, 0xFF	; 255
    4d76:	94 c1       	rjmp	.+808    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4d78:	fb 01       	movw	r30, r22
    4d7a:	24 91       	lpm	r18, Z
    4d7c:	2f 73       	andi	r18, 0x3F	; 63
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	22 30       	cpi	r18, 0x02	; 2
    4d82:	31 05       	cpc	r19, r1
    4d84:	0c f4       	brge	.+2      	; 0x4d88 <menu_ProcessMessage+0x162>
    4d86:	48 c0       	rjmp	.+144    	; 0x4e18 <menu_ProcessMessage+0x1f2>
    4d88:	70 96       	adiw	r30, 0x10	; 16
    4d8a:	05 90       	lpm	r0, Z+
    4d8c:	f4 91       	lpm	r31, Z
    4d8e:	e0 2d       	mov	r30, r0
    4d90:	30 97       	sbiw	r30, 0x00	; 0
    4d92:	19 f0       	breq	.+6      	; 0x4d9a <menu_ProcessMessage+0x174>
    4d94:	8c 2f       	mov	r24, r28
    4d96:	19 95       	eicall
    4d98:	de de       	rcall	.-580    	; 0x4b56 <menuItemChanged>
    4d9a:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4d9e:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4da2:	c9 01       	movw	r24, r18
    4da4:	01 96       	adiw	r24, 0x01	; 1
    4da6:	fc 01       	movw	r30, r24
    4da8:	84 91       	lpm	r24, Z
    4daa:	83 fd       	sbrc	r24, 3
    4dac:	68 c1       	rjmp	.+720    	; 0x507e <menu_ProcessMessage+0x458>
    4dae:	c9 01       	movw	r24, r18
    4db0:	0e 96       	adiw	r24, 0x0e	; 14
    4db2:	fc 01       	movw	r30, r24
    4db4:	85 91       	lpm	r24, Z+
    4db6:	95 91       	lpm	r25, Z+
    4db8:	89 2b       	or	r24, r25
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <menu_ProcessMessage+0x198>
    4dbc:	62 c1       	rjmp	.+708    	; 0x5082 <menu_ProcessMessage+0x45c>
    4dbe:	f9 01       	movw	r30, r18
    4dc0:	84 91       	lpm	r24, Z
    4dc2:	8f 73       	andi	r24, 0x3F	; 63
    4dc4:	89 30       	cpi	r24, 0x09	; 9
    4dc6:	19 f5       	brne	.+70     	; 0x4e0e <menu_ProcessMessage+0x1e8>
    4dc8:	61 e0       	ldi	r22, 0x01	; 1
    4dca:	80 e0       	ldi	r24, 0x00	; 0
    4dcc:	30 da       	rcall	.-2976   	; 0x422e <nibbleChange>
    4dce:	de db       	rcall	.-2116   	; 0x458c <nibbleToData>
    4dd0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4dd4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4dd8:	3e 96       	adiw	r30, 0x0e	; 14
    4dda:	05 90       	lpm	r0, Z+
    4ddc:	f4 91       	lpm	r31, Z
    4dde:	e0 2d       	mov	r30, r0
    4de0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4de4:	80 83       	st	Z, r24
    4de6:	ec dc       	rcall	.-1576   	; 0x47c0 <menuDisplayValue>
    4de8:	69 de       	rcall	.-814    	; 0x4abc <menuCheckArrowDown>
    4dea:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
    4dee:	47 de       	rcall	.-882    	; 0x4a7e <menuCursorSetMenu>
    4df0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4df4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4df8:	72 96       	adiw	r30, 0x12	; 18
    4dfa:	05 90       	lpm	r0, Z+
    4dfc:	f4 91       	lpm	r31, Z
    4dfe:	e0 2d       	mov	r30, r0
    4e00:	30 97       	sbiw	r30, 0x00	; 0
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <menu_ProcessMessage+0x1e0>
    4e04:	40 c1       	rjmp	.+640    	; 0x5086 <menu_ProcessMessage+0x460>
    4e06:	80 e0       	ldi	r24, 0x00	; 0
    4e08:	19 95       	eicall
    4e0a:	80 e0       	ldi	r24, 0x00	; 0
    4e0c:	49 c1       	rjmp	.+658    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4e0e:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4e12:	e3 dc       	rcall	.-1594   	; 0x47da <menuCursorSetDataNibble>
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	44 c1       	rjmp	.+648    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4e18:	2f ef       	ldi	r18, 0xFF	; 255
    4e1a:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4e1e:	84 ff       	sbrs	r24, 4
    4e20:	26 c0       	rjmp	.+76     	; 0x4e6e <menu_ProcessMessage+0x248>
    4e22:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4e26:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4e2a:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4e2e:	ee 23       	and	r30, r30
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <menu_ProcessMessage+0x20e>
    4e32:	2b c1       	rjmp	.+598    	; 0x508a <menu_ProcessMessage+0x464>
    4e34:	e1 50       	subi	r30, 0x01	; 1
    4e36:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4e3a:	f0 e0       	ldi	r31, 0x00	; 0
    4e3c:	ee 0f       	add	r30, r30
    4e3e:	ff 1f       	adc	r31, r31
    4e40:	e5 58       	subi	r30, 0x85	; 133
    4e42:	fa 4f       	sbci	r31, 0xFA	; 250
    4e44:	01 90       	ld	r0, Z+
    4e46:	f0 81       	ld	r31, Z
    4e48:	e0 2d       	mov	r30, r0
    4e4a:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4e4e:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4e52:	72 96       	adiw	r30, 0x12	; 18
    4e54:	05 90       	lpm	r0, Z+
    4e56:	f4 91       	lpm	r31, Z
    4e58:	e0 2d       	mov	r30, r0
    4e5a:	30 97       	sbiw	r30, 0x00	; 0
    4e5c:	11 f0       	breq	.+4      	; 0x4e62 <menu_ProcessMessage+0x23c>
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	19 95       	eicall
    4e62:	11 de       	rcall	.-990    	; 0x4a86 <menuClearExtraDisp>
    4e64:	93 dc       	rcall	.-1754   	; 0x478c <menuParentMenuToLCD>
    4e66:	49 de       	rcall	.-878    	; 0x4afa <menuCurrMenuToLCD>
    4e68:	76 de       	rcall	.-788    	; 0x4b56 <menuItemChanged>
    4e6a:	80 e0       	ldi	r24, 0x00	; 0
    4e6c:	19 c1       	rjmp	.+562    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4e6e:	fb 01       	movw	r30, r22
    4e70:	70 96       	adiw	r30, 0x10	; 16
    4e72:	05 90       	lpm	r0, Z+
    4e74:	f4 91       	lpm	r31, Z
    4e76:	e0 2d       	mov	r30, r0
    4e78:	30 97       	sbiw	r30, 0x00	; 0
    4e7a:	99 f0       	breq	.+38     	; 0x4ea2 <menu_ProcessMessage+0x27c>
    4e7c:	99 23       	and	r25, r25
    4e7e:	71 f0       	breq	.+28     	; 0x4e9c <menu_ProcessMessage+0x276>
    4e80:	8f ef       	ldi	r24, 0xFF	; 255
    4e82:	19 95       	eicall
    4e84:	8f 3f       	cpi	r24, 0xFF	; 255
    4e86:	19 f4       	brne	.+6      	; 0x4e8e <menu_ProcessMessage+0x268>
    4e88:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4e8c:	0a c0       	rjmp	.+20     	; 0x4ea2 <menu_ProcessMessage+0x27c>
    4e8e:	fb dd       	rcall	.-1034   	; 0x4a86 <menuClearExtraDisp>
    4e90:	ff dd       	rcall	.-1026   	; 0x4a90 <menu_ClearDataDisp>
    4e92:	f5 dd       	rcall	.-1046   	; 0x4a7e <menuCursorSetMenu>
    4e94:	8f ef       	ldi	r24, 0xFF	; 255
    4e96:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4e9a:	03 c0       	rjmp	.+6      	; 0x4ea2 <menu_ProcessMessage+0x27c>
    4e9c:	85 e0       	ldi	r24, 0x05	; 5
    4e9e:	19 95       	eicall
    4ea0:	ee dd       	rcall	.-1060   	; 0x4a7e <menuCursorSetMenu>
    4ea2:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4ea6:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4eaa:	c9 01       	movw	r24, r18
    4eac:	0c 96       	adiw	r24, 0x0c	; 12
    4eae:	fc 01       	movw	r30, r24
    4eb0:	85 91       	lpm	r24, Z+
    4eb2:	95 91       	lpm	r25, Z+
    4eb4:	89 2b       	or	r24, r25
    4eb6:	09 f4       	brne	.+2      	; 0x4eba <menu_ProcessMessage+0x294>
    4eb8:	ea c0       	rjmp	.+468    	; 0x508e <menu_ProcessMessage+0x468>
    4eba:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    4ebe:	a0 31       	cpi	r26, 0x10	; 16
    4ec0:	08 f0       	brcs	.+2      	; 0x4ec4 <menu_ProcessMessage+0x29e>
    4ec2:	e7 c0       	rjmp	.+462    	; 0x5092 <menu_ProcessMessage+0x46c>
    4ec4:	81 e0       	ldi	r24, 0x01	; 1
    4ec6:	8a 0f       	add	r24, r26
    4ec8:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    4ecc:	b0 e0       	ldi	r27, 0x00	; 0
    4ece:	aa 0f       	add	r26, r26
    4ed0:	bb 1f       	adc	r27, r27
    4ed2:	a5 58       	subi	r26, 0x85	; 133
    4ed4:	ba 4f       	sbci	r27, 0xFA	; 250
    4ed6:	2d 93       	st	X+, r18
    4ed8:	3c 93       	st	X, r19
    4eda:	c9 01       	movw	r24, r18
    4edc:	01 96       	adiw	r24, 0x01	; 1
    4ede:	fc 01       	movw	r30, r24
    4ee0:	84 91       	lpm	r24, Z
    4ee2:	83 ff       	sbrs	r24, 3
    4ee4:	0b c0       	rjmp	.+22     	; 0x4efc <menu_ProcessMessage+0x2d6>
    4ee6:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    4eea:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    4eee:	00 97       	sbiw	r24, 0x00	; 0
    4ef0:	29 f0       	breq	.+10     	; 0x4efc <menu_ProcessMessage+0x2d6>
    4ef2:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4ef6:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4efa:	08 c0       	rjmp	.+16     	; 0x4f0c <menu_ProcessMessage+0x2e6>
    4efc:	f9 01       	movw	r30, r18
    4efe:	3c 96       	adiw	r30, 0x0c	; 12
    4f00:	85 91       	lpm	r24, Z+
    4f02:	95 91       	lpm	r25, Z+
    4f04:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4f08:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4f0c:	bc dd       	rcall	.-1160   	; 0x4a86 <menuClearExtraDisp>
    4f0e:	3e dc       	rcall	.-1924   	; 0x478c <menuParentMenuToLCD>
    4f10:	f4 dd       	rcall	.-1048   	; 0x4afa <menuCurrMenuToLCD>
    4f12:	21 de       	rcall	.-958    	; 0x4b56 <menuItemChanged>
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	c4 c0       	rjmp	.+392    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4f18:	c3 30       	cpi	r28, 0x03	; 3
    4f1a:	09 f4       	brne	.+2      	; 0x4f1e <menu_ProcessMessage+0x2f8>
    4f1c:	49 c0       	rjmp	.+146    	; 0x4fb0 <menu_ProcessMessage+0x38a>
    4f1e:	28 f4       	brcc	.+10     	; 0x4f2a <menu_ProcessMessage+0x304>
    4f20:	c1 30       	cpi	r28, 0x01	; 1
    4f22:	59 f0       	breq	.+22     	; 0x4f3a <menu_ProcessMessage+0x314>
    4f24:	c2 30       	cpi	r28, 0x02	; 2
    4f26:	31 f1       	breq	.+76     	; 0x4f74 <menu_ProcessMessage+0x34e>
    4f28:	b6 c0       	rjmp	.+364    	; 0x5096 <menu_ProcessMessage+0x470>
    4f2a:	c5 30       	cpi	r28, 0x05	; 5
    4f2c:	09 f4       	brne	.+2      	; 0x4f30 <menu_ProcessMessage+0x30a>
    4f2e:	5e c0       	rjmp	.+188    	; 0x4fec <menu_ProcessMessage+0x3c6>
    4f30:	c0 f0       	brcs	.+48     	; 0x4f62 <menu_ProcessMessage+0x33c>
    4f32:	c6 30       	cpi	r28, 0x06	; 6
    4f34:	09 f4       	brne	.+2      	; 0x4f38 <menu_ProcessMessage+0x312>
    4f36:	8a c0       	rjmp	.+276    	; 0x504c <menu_ProcessMessage+0x426>
    4f38:	ae c0       	rjmp	.+348    	; 0x5096 <menu_ProcessMessage+0x470>
    4f3a:	48 2f       	mov	r20, r24
    4f3c:	50 e0       	ldi	r21, 0x00	; 0
    4f3e:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4f42:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4f46:	24 91       	lpm	r18, Z
    4f48:	30 e0       	ldi	r19, 0x00	; 0
    4f4a:	21 50       	subi	r18, 0x01	; 1
    4f4c:	31 09       	sbc	r19, r1
    4f4e:	42 17       	cp	r20, r18
    4f50:	53 07       	cpc	r21, r19
    4f52:	0c f0       	brlt	.+2      	; 0x4f56 <menu_ProcessMessage+0x330>
    4f54:	a2 c0       	rjmp	.+324    	; 0x509a <menu_ProcessMessage+0x474>
    4f56:	8f 5f       	subi	r24, 0xFF	; 255
    4f58:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4f5c:	3e dc       	rcall	.-1924   	; 0x47da <menuCursorSetDataNibble>
    4f5e:	80 e0       	ldi	r24, 0x00	; 0
    4f60:	9f c0       	rjmp	.+318    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4f62:	88 23       	and	r24, r24
    4f64:	09 f4       	brne	.+2      	; 0x4f68 <menu_ProcessMessage+0x342>
    4f66:	9b c0       	rjmp	.+310    	; 0x509e <menu_ProcessMessage+0x478>
    4f68:	81 50       	subi	r24, 0x01	; 1
    4f6a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4f6e:	35 dc       	rcall	.-1942   	; 0x47da <menuCursorSetDataNibble>
    4f70:	80 e0       	ldi	r24, 0x00	; 0
    4f72:	96 c0       	rjmp	.+300    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4f74:	61 e0       	ldi	r22, 0x01	; 1
    4f76:	5b d9       	rcall	.-3402   	; 0x422e <nibbleChange>
    4f78:	09 db       	rcall	.-2542   	; 0x458c <nibbleToData>
    4f7a:	22 dc       	rcall	.-1980   	; 0x47c0 <menuDisplayValue>
    4f7c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4f80:	8a 30       	cpi	r24, 0x0A	; 10
    4f82:	11 f0       	breq	.+4      	; 0x4f88 <menu_ProcessMessage+0x362>
    4f84:	8e 30       	cpi	r24, 0x0E	; 14
    4f86:	89 f4       	brne	.+34     	; 0x4faa <menu_ProcessMessage+0x384>
    4f88:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4f8c:	42 2f       	mov	r20, r18
    4f8e:	50 e0       	ldi	r21, 0x00	; 0
    4f90:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4f94:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4f98:	84 91       	lpm	r24, Z
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	01 97       	sbiw	r24, 0x01	; 1
    4f9e:	48 17       	cp	r20, r24
    4fa0:	59 07       	cpc	r21, r25
    4fa2:	1c f4       	brge	.+6      	; 0x4faa <menu_ProcessMessage+0x384>
    4fa4:	2f 5f       	subi	r18, 0xFF	; 255
    4fa6:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4faa:	17 dc       	rcall	.-2002   	; 0x47da <menuCursorSetDataNibble>
    4fac:	80 e0       	ldi	r24, 0x00	; 0
    4fae:	78 c0       	rjmp	.+240    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4fb0:	6f ef       	ldi	r22, 0xFF	; 255
    4fb2:	3d d9       	rcall	.-3462   	; 0x422e <nibbleChange>
    4fb4:	eb da       	rcall	.-2602   	; 0x458c <nibbleToData>
    4fb6:	04 dc       	rcall	.-2040   	; 0x47c0 <menuDisplayValue>
    4fb8:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4fbc:	8a 30       	cpi	r24, 0x0A	; 10
    4fbe:	11 f0       	breq	.+4      	; 0x4fc4 <menu_ProcessMessage+0x39e>
    4fc0:	8e 30       	cpi	r24, 0x0E	; 14
    4fc2:	89 f4       	brne	.+34     	; 0x4fe6 <menu_ProcessMessage+0x3c0>
    4fc4:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4fc8:	42 2f       	mov	r20, r18
    4fca:	50 e0       	ldi	r21, 0x00	; 0
    4fcc:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4fd0:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4fd4:	84 91       	lpm	r24, Z
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	01 97       	sbiw	r24, 0x01	; 1
    4fda:	48 17       	cp	r20, r24
    4fdc:	59 07       	cpc	r21, r25
    4fde:	1c f4       	brge	.+6      	; 0x4fe6 <menu_ProcessMessage+0x3c0>
    4fe0:	2f 5f       	subi	r18, 0xFF	; 255
    4fe2:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4fe6:	f9 db       	rcall	.-2062   	; 0x47da <menuCursorSetDataNibble>
    4fe8:	80 e0       	ldi	r24, 0x00	; 0
    4fea:	5a c0       	rjmp	.+180    	; 0x50a0 <menu_ProcessMessage+0x47a>
    4fec:	cf da       	rcall	.-2658   	; 0x458c <nibbleToData>
    4fee:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4ff2:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4ff6:	c9 01       	movw	r24, r18
    4ff8:	0e 96       	adiw	r24, 0x0e	; 14
    4ffa:	fc 01       	movw	r30, r24
    4ffc:	a5 91       	lpm	r26, Z+
    4ffe:	b5 91       	lpm	r27, Z+
    5000:	10 97       	sbiw	r26, 0x00	; 0
    5002:	21 f1       	breq	.+72     	; 0x504c <menu_ProcessMessage+0x426>
    5004:	0d 97       	sbiw	r24, 0x0d	; 13
    5006:	fc 01       	movw	r30, r24
    5008:	84 91       	lpm	r24, Z
    500a:	88 23       	and	r24, r24
    500c:	2c f4       	brge	.+10     	; 0x5018 <menu_ProcessMessage+0x3f2>
    500e:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    5012:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    5016:	02 c0       	rjmp	.+4      	; 0x501c <menu_ProcessMessage+0x3f6>
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	a8 0f       	add	r26, r24
    501e:	b9 1f       	adc	r27, r25
    5020:	f9 01       	movw	r30, r18
    5022:	84 91       	lpm	r24, Z
    5024:	8f 73       	andi	r24, 0x3F	; 63
    5026:	8b 30       	cpi	r24, 0x0B	; 11
    5028:	71 f4       	brne	.+28     	; 0x5046 <menu_ProcessMessage+0x420>
    502a:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    502e:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    5032:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    5036:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    503a:	4d 93       	st	X+, r20
    503c:	5d 93       	st	X+, r21
    503e:	6d 93       	st	X+, r22
    5040:	7c 93       	st	X, r23
    5042:	13 97       	sbiw	r26, 0x03	; 3
    5044:	03 c0       	rjmp	.+6      	; 0x504c <menu_ProcessMessage+0x426>
    5046:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    504a:	8c 93       	st	X, r24
    504c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5050:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5054:	72 96       	adiw	r30, 0x12	; 18
    5056:	05 90       	lpm	r0, Z+
    5058:	f4 91       	lpm	r31, Z
    505a:	e0 2d       	mov	r30, r0
    505c:	30 97       	sbiw	r30, 0x00	; 0
    505e:	11 f0       	breq	.+4      	; 0x5064 <menu_ProcessMessage+0x43e>
    5060:	8c 2f       	mov	r24, r28
    5062:	19 95       	eicall
    5064:	8f ef       	ldi	r24, 0xFF	; 255
    5066:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    506a:	47 dd       	rcall	.-1394   	; 0x4afa <menuCurrMenuToLCD>
    506c:	74 dd       	rcall	.-1304   	; 0x4b56 <menuItemChanged>
    506e:	80 e0       	ldi	r24, 0x00	; 0
    5070:	17 c0       	rjmp	.+46     	; 0x50a0 <menu_ProcessMessage+0x47a>
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	15 c0       	rjmp	.+42     	; 0x50a0 <menu_ProcessMessage+0x47a>
    5076:	80 e0       	ldi	r24, 0x00	; 0
    5078:	13 c0       	rjmp	.+38     	; 0x50a0 <menu_ProcessMessage+0x47a>
    507a:	80 e0       	ldi	r24, 0x00	; 0
    507c:	11 c0       	rjmp	.+34     	; 0x50a0 <menu_ProcessMessage+0x47a>
    507e:	80 e0       	ldi	r24, 0x00	; 0
    5080:	0f c0       	rjmp	.+30     	; 0x50a0 <menu_ProcessMessage+0x47a>
    5082:	80 e0       	ldi	r24, 0x00	; 0
    5084:	0d c0       	rjmp	.+26     	; 0x50a0 <menu_ProcessMessage+0x47a>
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	0b c0       	rjmp	.+22     	; 0x50a0 <menu_ProcessMessage+0x47a>
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	09 c0       	rjmp	.+18     	; 0x50a0 <menu_ProcessMessage+0x47a>
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	07 c0       	rjmp	.+14     	; 0x50a0 <menu_ProcessMessage+0x47a>
    5092:	80 e0       	ldi	r24, 0x00	; 0
    5094:	05 c0       	rjmp	.+10     	; 0x50a0 <menu_ProcessMessage+0x47a>
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	03 c0       	rjmp	.+6      	; 0x50a0 <menu_ProcessMessage+0x47a>
    509a:	80 e0       	ldi	r24, 0x00	; 0
    509c:	01 c0       	rjmp	.+2      	; 0x50a0 <menu_ProcessMessage+0x47a>
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	cf 91       	pop	r28
    50a2:	08 95       	ret

000050a4 <displayMenuMessage_P>:
    50a4:	0f 93       	push	r16
    50a6:	1f 93       	push	r17
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	ec 01       	movw	r28, r24
    50ae:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    50b2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    50b6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    50ba:	84 91       	lpm	r24, Z
    50bc:	8f 73       	andi	r24, 0x3F	; 63
    50be:	81 30       	cpi	r24, 0x01	; 1
    50c0:	91 f4       	brne	.+36     	; 0x50e6 <displayMenuMessage_P+0x42>
    50c2:	ce 01       	movw	r24, r28
    50c4:	0e 94 80 3b 	call	0x7700	; 0x7700 <get_StrLenP>
    50c8:	24 e1       	ldi	r18, 0x14	; 20
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	a9 01       	movw	r20, r18
    50ce:	48 1b       	sub	r20, r24
    50d0:	51 09       	sbc	r21, r1
    50d2:	ca 01       	movw	r24, r20
    50d4:	95 95       	asr	r25
    50d6:	87 95       	ror	r24
    50d8:	8c 5e       	subi	r24, 0xEC	; 236
    50da:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    50de:	83 e0       	ldi	r24, 0x03	; 3
    50e0:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    50e4:	05 c0       	rjmp	.+10     	; 0x50f0 <displayMenuMessage_P+0x4c>
    50e6:	84 e1       	ldi	r24, 0x14	; 20
    50e8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    50ec:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    50f0:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    50f4:	ce 01       	movw	r24, r28
    50f6:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    50fa:	80 2f       	mov	r24, r16
    50fc:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    5100:	9f b7       	in	r25, 0x3f	; 63
    5102:	f8 94       	cli
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	06 c0       	rjmp	.+12     	; 0x5114 <displayMenuMessage_P+0x70>
    5108:	ef e2       	ldi	r30, 0x2F	; 47
    510a:	f2 e0       	ldi	r31, 0x02	; 2
    510c:	84 e6       	ldi	r24, 0x64	; 100
    510e:	86 87       	std	Z+14, r24	; 0x0e
    5110:	17 86       	std	Z+15, r1	; 0x0f
    5112:	80 e0       	ldi	r24, 0x00	; 0
    5114:	81 11       	cpse	r24, r1
    5116:	f8 cf       	rjmp	.-16     	; 0x5108 <displayMenuMessage_P+0x64>
    5118:	9f bf       	out	0x3f, r25	; 63
    511a:	81 2f       	mov	r24, r17
    511c:	df 91       	pop	r29
    511e:	cf 91       	pop	r28
    5120:	1f 91       	pop	r17
    5122:	0f 91       	pop	r16
    5124:	08 95       	ret

00005126 <menu_OnEnterMidiPanic>:
    5126:	88 eb       	ldi	r24, 0xB8	; 184
    5128:	93 e0       	ldi	r25, 0x03	; 3
    512a:	bc df       	rcall	.-136    	; 0x50a4 <displayMenuMessage_P>
    512c:	0e 94 94 34 	call	0x6928	; 0x6928 <midiSendAllNotesOff>
    5130:	a6 dc       	rcall	.-1716   	; 0x4a7e <menuCursorSetMenu>
    5132:	80 e0       	ldi	r24, 0x00	; 0
    5134:	08 95       	ret

00005136 <menu_ModuleTestExecute>:
    5136:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    513a:	8f 3f       	cpi	r24, 0xFF	; 255
    513c:	11 f0       	breq	.+4      	; 0x5142 <menu_ModuleTestExecute+0xc>
    513e:	8d 3f       	cpi	r24, 0xFD	; 253
    5140:	71 f5       	brne	.+92     	; 0x519e <menu_ModuleTestExecute+0x68>
    5142:	0e 94 cd 3a 	call	0x759a	; 0x759a <lcd_cursoroff>
    5146:	a4 dc       	rcall	.-1720   	; 0x4a90 <menu_ClearDataDisp>
    5148:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	e9 e4       	ldi	r30, 0x49	; 73
    5150:	f2 e0       	ldi	r31, 0x02	; 2
    5152:	07 c0       	rjmp	.+14     	; 0x5162 <menu_ModuleTestExecute+0x2c>
    5154:	21 81       	ldd	r18, Z+1	; 0x01
    5156:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    515a:	82 2b       	or	r24, r18
    515c:	81 83       	std	Z+1, r24	; 0x01
    515e:	38 96       	adiw	r30, 0x08	; 8
    5160:	9f 5f       	subi	r25, 0xFF	; 255
    5162:	90 32       	cpi	r25, 0x20	; 32
    5164:	b8 f3       	brcs	.-18     	; 0x5154 <menu_ModuleTestExecute+0x1e>
    5166:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    516a:	8f 3f       	cpi	r24, 0xFF	; 255
    516c:	19 f4       	brne	.+6      	; 0x5174 <menu_ModuleTestExecute+0x3e>
    516e:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    5172:	5b c0       	rjmp	.+182    	; 0x522a <menu_ModuleTestExecute+0xf4>
    5174:	82 eb       	ldi	r24, 0xB2	; 178
    5176:	93 e0       	ldi	r25, 0x03	; 3
    5178:	95 df       	rcall	.-214    	; 0x50a4 <displayMenuMessage_P>
    517a:	8e ef       	ldi	r24, 0xFE	; 254
    517c:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5180:	9f b7       	in	r25, 0x3f	; 63
    5182:	f8 94       	cli
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	06 c0       	rjmp	.+12     	; 0x5194 <menu_ModuleTestExecute+0x5e>
    5188:	ef e2       	ldi	r30, 0x2F	; 47
    518a:	f2 e0       	ldi	r31, 0x02	; 2
    518c:	82 e0       	ldi	r24, 0x02	; 2
    518e:	84 87       	std	Z+12, r24	; 0x0c
    5190:	85 87       	std	Z+13, r24	; 0x0d
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	81 11       	cpse	r24, r1
    5196:	f8 cf       	rjmp	.-16     	; 0x5188 <menu_ModuleTestExecute+0x52>
    5198:	9f bf       	out	0x3f, r25	; 63
    519a:	71 dc       	rcall	.-1822   	; 0x4a7e <menuCursorSetMenu>
    519c:	46 c0       	rjmp	.+140    	; 0x522a <menu_ModuleTestExecute+0xf4>
    519e:	8e 3f       	cpi	r24, 0xFE	; 254
    51a0:	41 f4       	brne	.+16     	; 0x51b2 <menu_ModuleTestExecute+0x7c>
    51a2:	8f ef       	ldi	r24, 0xFF	; 255
    51a4:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    51a8:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    51ac:	0e 94 c6 3a 	call	0x758c	; 0x758c <lcd_cursosblink>
    51b0:	3c c0       	rjmp	.+120    	; 0x522a <menu_ModuleTestExecute+0xf4>
    51b2:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    51b6:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    51ba:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    51be:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    51c2:	76 95       	lsr	r23
    51c4:	67 95       	ror	r22
    51c6:	57 95       	ror	r21
    51c8:	47 95       	ror	r20
    51ca:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    51ce:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    51d2:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    51d6:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    51da:	e8 2f       	mov	r30, r24
    51dc:	f0 e0       	ldi	r31, 0x00	; 0
    51de:	df 01       	movw	r26, r30
    51e0:	aa 0f       	add	r26, r26
    51e2:	bb 1f       	adc	r27, r27
    51e4:	aa 0f       	add	r26, r26
    51e6:	bb 1f       	adc	r27, r27
    51e8:	aa 0f       	add	r26, r26
    51ea:	bb 1f       	adc	r27, r27
    51ec:	a7 5b       	subi	r26, 0xB7	; 183
    51ee:	bd 4f       	sbci	r27, 0xFD	; 253
    51f0:	16 96       	adiw	r26, 0x06	; 6
    51f2:	2c 91       	ld	r18, X
    51f4:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    51f8:	29 23       	and	r18, r25
    51fa:	49 f4       	brne	.+18     	; 0x520e <menu_ModuleTestExecute+0xd8>
    51fc:	70 68       	ori	r23, 0x80	; 128
    51fe:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    5202:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    5206:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    520a:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    520e:	ee 0f       	add	r30, r30
    5210:	ff 1f       	adc	r31, r31
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	ee 0f       	add	r30, r30
    5218:	ff 1f       	adc	r31, r31
    521a:	e7 5b       	subi	r30, 0xB7	; 183
    521c:	fd 4f       	sbci	r31, 0xFD	; 253
    521e:	21 81       	ldd	r18, Z+1	; 0x01
    5220:	92 2b       	or	r25, r18
    5222:	91 83       	std	Z+1, r25	; 0x01
    5224:	8f 5f       	subi	r24, 0xFF	; 255
    5226:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    522a:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    522e:	e0 32       	cpi	r30, 0x20	; 32
    5230:	28 f5       	brcc	.+74     	; 0x527c <menu_ModuleTestExecute+0x146>
    5232:	f0 e0       	ldi	r31, 0x00	; 0
    5234:	ee 0f       	add	r30, r30
    5236:	ff 1f       	adc	r31, r31
    5238:	ee 0f       	add	r30, r30
    523a:	ff 1f       	adc	r31, r31
    523c:	ee 0f       	add	r30, r30
    523e:	ff 1f       	adc	r31, r31
    5240:	e7 5b       	subi	r30, 0xB7	; 183
    5242:	fd 4f       	sbci	r31, 0xFD	; 253
    5244:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    5248:	98 2f       	mov	r25, r24
    524a:	90 95       	com	r25
    524c:	81 81       	ldd	r24, Z+1	; 0x01
    524e:	89 23       	and	r24, r25
    5250:	81 83       	std	Z+1, r24	; 0x01
    5252:	8e e1       	ldi	r24, 0x1E	; 30
    5254:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    5258:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    525c:	0e 94 e7 38 	call	0x71ce	; 0x71ce <lcd_dec2out>
    5260:	9f b7       	in	r25, 0x3f	; 63
    5262:	f8 94       	cli
    5264:	81 e0       	ldi	r24, 0x01	; 1
    5266:	06 c0       	rjmp	.+12     	; 0x5274 <menu_ModuleTestExecute+0x13e>
    5268:	ef e2       	ldi	r30, 0x2F	; 47
    526a:	f2 e0       	ldi	r31, 0x02	; 2
    526c:	88 e0       	ldi	r24, 0x08	; 8
    526e:	84 87       	std	Z+12, r24	; 0x0c
    5270:	15 86       	std	Z+13, r1	; 0x0d
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	81 11       	cpse	r24, r1
    5276:	f8 cf       	rjmp	.-16     	; 0x5268 <menu_ModuleTestExecute+0x132>
    5278:	9f bf       	out	0x3f, r25	; 63
    527a:	08 95       	ret
    527c:	e0 32       	cpi	r30, 0x20	; 32
    527e:	81 f5       	brne	.+96     	; 0x52e0 <menu_ModuleTestExecute+0x1aa>
    5280:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    5284:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    5288:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    528c:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    5290:	00 97       	sbiw	r24, 0x00	; 0
    5292:	a1 05       	cpc	r26, r1
    5294:	b1 05       	cpc	r27, r1
    5296:	21 f4       	brne	.+8      	; 0x52a0 <menu_ModuleTestExecute+0x16a>
    5298:	8e ea       	ldi	r24, 0xAE	; 174
    529a:	93 e0       	ldi	r25, 0x03	; 3
    529c:	03 df       	rcall	.-506    	; 0x50a4 <displayMenuMessage_P>
    529e:	0f c0       	rjmp	.+30     	; 0x52be <menu_ModuleTestExecute+0x188>
    52a0:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <editLong>
    52a4:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <editLong+0x1>
    52a8:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <editLong+0x2>
    52ac:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <editLong+0x3>
    52b0:	8b ea       	ldi	r24, 0xAB	; 171
    52b2:	93 e0       	ldi	r25, 0x03	; 3
    52b4:	f7 de       	rcall	.-530    	; 0x50a4 <displayMenuMessage_P>
    52b6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    52ba:	0e 94 c2 38 	call	0x7184	; 0x7184 <lcd_longout>
    52be:	8e ef       	ldi	r24, 0xFE	; 254
    52c0:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    52c4:	9f b7       	in	r25, 0x3f	; 63
    52c6:	f8 94       	cli
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	06 c0       	rjmp	.+12     	; 0x52d8 <menu_ModuleTestExecute+0x1a2>
    52cc:	ef e2       	ldi	r30, 0x2F	; 47
    52ce:	f2 e0       	ldi	r31, 0x02	; 2
    52d0:	82 e0       	ldi	r24, 0x02	; 2
    52d2:	84 87       	std	Z+12, r24	; 0x0c
    52d4:	85 87       	std	Z+13, r24	; 0x0d
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	81 11       	cpse	r24, r1
    52da:	f8 cf       	rjmp	.-16     	; 0x52cc <menu_ModuleTestExecute+0x196>
    52dc:	9f bf       	out	0x3f, r25	; 63
    52de:	cf cb       	rjmp	.-2146   	; 0x4a7e <menuCursorSetMenu>
    52e0:	08 95       	ret

000052e2 <menu_ModuleTestPattern>:
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    52ea:	02 c0       	rjmp	.+4      	; 0x52f0 <menu_ModuleTestPattern+0xe>
    52ec:	88 0f       	add	r24, r24
    52ee:	99 1f       	adc	r25, r25
    52f0:	0a 94       	dec	r0
    52f2:	e2 f7       	brpl	.-8      	; 0x52ec <menu_ModuleTestPattern+0xa>
    52f4:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    52f8:	8f ef       	ldi	r24, 0xFF	; 255
    52fa:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    52fe:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    5302:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    5306:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    530a:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    530e:	13 df       	rcall	.-474    	; 0x5136 <menu_ModuleTestExecute>
    5310:	80 e0       	ldi	r24, 0x00	; 0
    5312:	08 95       	ret

00005314 <menuLCDwriteOK>:
    5314:	8e ea       	ldi	r24, 0xAE	; 174
    5316:	93 e0       	ldi	r25, 0x03	; 3
    5318:	c5 ce       	rjmp	.-630    	; 0x50a4 <displayMenuMessage_P>
    531a:	08 95       	ret

0000531c <menuOnEnterEEBackup>:
    531c:	8e e1       	ldi	r24, 0x1E	; 30
    531e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    5322:	81 e9       	ldi	r24, 0x91	; 145
    5324:	93 e0       	ldi	r25, 0x03	; 3
    5326:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    532a:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <eeprom_Backup>
    532e:	f2 df       	rcall	.-28     	; 0x5314 <menuLCDwriteOK>
    5330:	80 e0       	ldi	r24, 0x00	; 0
    5332:	08 95       	ret

00005334 <menuOnEnterEERestore>:
    5334:	8e e1       	ldi	r24, 0x1E	; 30
    5336:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    533a:	81 e9       	ldi	r24, 0x91	; 145
    533c:	93 e0       	ldi	r25, 0x03	; 3
    533e:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    5342:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <eeprom_Restore>
    5346:	e6 df       	rcall	.-52     	; 0x5314 <menuLCDwriteOK>
    5348:	80 e0       	ldi	r24, 0x00	; 0
    534a:	08 95       	ret

0000534c <menuOnEnterEEUpdate>:
    534c:	81 e9       	ldi	r24, 0x91	; 145
    534e:	93 e0       	ldi	r25, 0x03	; 3
    5350:	a9 de       	rcall	.-686    	; 0x50a4 <displayMenuMessage_P>
    5352:	8e e1       	ldi	r24, 0x1E	; 30
    5354:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    5358:	0e 94 ef 0c 	call	0x19de	; 0x19de <eeprom_UpdateALL>
    535c:	db df       	rcall	.-74     	; 0x5314 <menuLCDwriteOK>
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	08 95       	ret

00005362 <menudeleteMainMessage>:
    5362:	cf 93       	push	r28
    5364:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5368:	80 e4       	ldi	r24, 0x40	; 64
    536a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    536e:	84 e1       	ldi	r24, 0x14	; 20
    5370:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
    5374:	8c 2f       	mov	r24, r28
    5376:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    537a:	cf 91       	pop	r28
    537c:	08 95       	ret

0000537e <menu_deleteMessage>:
    537e:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    5382:	83 30       	cpi	r24, 0x03	; 3
    5384:	19 f4       	brne	.+6      	; 0x538c <menu_deleteMessage+0xe>
    5386:	7f db       	rcall	.-2306   	; 0x4a86 <menuClearExtraDisp>
    5388:	83 cb       	rjmp	.-2298   	; 0x4a90 <menu_ClearDataDisp>
    538a:	08 95       	ret
    538c:	81 11       	cpse	r24, r1
    538e:	02 c0       	rjmp	.+4      	; 0x5394 <menu_deleteMessage+0x16>
    5390:	7a cb       	rjmp	.-2316   	; 0x4a86 <menuClearExtraDisp>
    5392:	08 95       	ret
    5394:	81 30       	cpi	r24, 0x01	; 1
    5396:	11 f4       	brne	.+4      	; 0x539c <menu_deleteMessage+0x1e>
    5398:	7b cb       	rjmp	.-2314   	; 0x4a90 <menu_ClearDataDisp>
    539a:	08 95       	ret
    539c:	e2 cf       	rjmp	.-60     	; 0x5362 <menudeleteMainMessage>
    539e:	08 95       	ret

000053a0 <menu_DisplayMainMessage_P>:
    53a0:	0f 93       	push	r16
    53a2:	1f 93       	push	r17
    53a4:	cf 93       	push	r28
    53a6:	df 93       	push	r29
    53a8:	ec 01       	movw	r28, r24
    53aa:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    53ae:	0e 94 80 3b 	call	0x7700	; 0x7700 <get_StrLenP>
    53b2:	08 2f       	mov	r16, r24
    53b4:	80 e4       	ldi	r24, 0x40	; 64
    53b6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    53ba:	84 e1       	ldi	r24, 0x14	; 20
    53bc:	90 e0       	ldi	r25, 0x00	; 0
    53be:	80 1b       	sub	r24, r16
    53c0:	91 09       	sbc	r25, r1
    53c2:	95 95       	asr	r25
    53c4:	87 95       	ror	r24
    53c6:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
    53ca:	ce 01       	movw	r24, r28
    53cc:	0e 94 47 13 	call	0x268e	; 0x268e <lcd_puts_P>
    53d0:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    53d4:	84 e5       	ldi	r24, 0x54	; 84
    53d6:	89 1b       	sub	r24, r25
    53d8:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
    53dc:	81 2f       	mov	r24, r17
    53de:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    53e2:	9f b7       	in	r25, 0x3f	; 63
    53e4:	f8 94       	cli
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	06 c0       	rjmp	.+12     	; 0x53f6 <menu_DisplayMainMessage_P+0x56>
    53ea:	ef e2       	ldi	r30, 0x2F	; 47
    53ec:	f2 e0       	ldi	r31, 0x02	; 2
    53ee:	84 e6       	ldi	r24, 0x64	; 100
    53f0:	86 87       	std	Z+14, r24	; 0x0e
    53f2:	17 86       	std	Z+15, r1	; 0x0f
    53f4:	80 e0       	ldi	r24, 0x00	; 0
    53f6:	81 11       	cpse	r24, r1
    53f8:	f8 cf       	rjmp	.-16     	; 0x53ea <menu_DisplayMainMessage_P+0x4a>
    53fa:	9f bf       	out	0x3f, r25	; 63
    53fc:	82 e0       	ldi	r24, 0x02	; 2
    53fe:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    5402:	df 91       	pop	r29
    5404:	cf 91       	pop	r28
    5406:	1f 91       	pop	r17
    5408:	0f 91       	pop	r16
    540a:	08 95       	ret

0000540c <menu_DisplayMainMessage>:
    540c:	0f 93       	push	r16
    540e:	1f 93       	push	r17
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	ec 01       	movw	r28, r24
    5416:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    541a:	0e 94 8a 3b 	call	0x7714	; 0x7714 <get_StrLen>
    541e:	08 2f       	mov	r16, r24
    5420:	80 e4       	ldi	r24, 0x40	; 64
    5422:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    5426:	84 e1       	ldi	r24, 0x14	; 20
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	80 1b       	sub	r24, r16
    542c:	91 09       	sbc	r25, r1
    542e:	95 95       	asr	r25
    5430:	87 95       	ror	r24
    5432:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
    5436:	ce 01       	movw	r24, r28
    5438:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_puts>
    543c:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5440:	84 e5       	ldi	r24, 0x54	; 84
    5442:	89 1b       	sub	r24, r25
    5444:	0e 94 a3 3a 	call	0x7546	; 0x7546 <lcd_blank>
    5448:	81 2f       	mov	r24, r17
    544a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    544e:	9f b7       	in	r25, 0x3f	; 63
    5450:	f8 94       	cli
    5452:	81 e0       	ldi	r24, 0x01	; 1
    5454:	06 c0       	rjmp	.+12     	; 0x5462 <menu_DisplayMainMessage+0x56>
    5456:	ef e2       	ldi	r30, 0x2F	; 47
    5458:	f2 e0       	ldi	r31, 0x02	; 2
    545a:	84 e6       	ldi	r24, 0x64	; 100
    545c:	86 87       	std	Z+14, r24	; 0x0e
    545e:	17 86       	std	Z+15, r1	; 0x0f
    5460:	80 e0       	ldi	r24, 0x00	; 0
    5462:	81 11       	cpse	r24, r1
    5464:	f8 cf       	rjmp	.-16     	; 0x5456 <menu_DisplayMainMessage+0x4a>
    5466:	9f bf       	out	0x3f, r25	; 63
    5468:	82 e0       	ldi	r24, 0x02	; 2
    546a:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	1f 91       	pop	r17
    5474:	0f 91       	pop	r16
    5476:	08 95       	ret

00005478 <menuDisplaySaveMessage>:
    5478:	61 ee       	ldi	r22, 0xE1	; 225
    547a:	78 e1       	ldi	r23, 0x18	; 24
    547c:	0e 94 1d 39 	call	0x723a	; 0x723a <putChar_Dec>
    5480:	bc 01       	movw	r22, r24
    5482:	86 ed       	ldi	r24, 0xD6	; 214
    5484:	93 e0       	ldi	r25, 0x03	; 3
    5486:	0e 94 11 3a 	call	0x7422	; 0x7422 <putString_P>
    548a:	81 ee       	ldi	r24, 0xE1	; 225
    548c:	98 e1       	ldi	r25, 0x18	; 24
    548e:	be cf       	rjmp	.-132    	; 0x540c <menu_DisplayMainMessage>
    5490:	08 95       	ret

00005492 <softKeyPrP>:
    5492:	88 23       	and	r24, r24
    5494:	44 f4       	brge	.+16     	; 0x54a6 <softKeyPrP+0x14>
    5496:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    549a:	8f 3f       	cpi	r24, 0xFF	; 255
    549c:	a1 f0       	breq	.+40     	; 0x54c6 <softKeyPrP+0x34>
    549e:	6f ef       	ldi	r22, 0xFF	; 255
    54a0:	5c d4       	rcall	.+2232   	; 0x5d5a <register_toProgram>
    54a2:	ea df       	rcall	.-44     	; 0x5478 <menuDisplaySaveMessage>
    54a4:	10 c0       	rjmp	.+32     	; 0x54c6 <softKeyPrP+0x34>
    54a6:	88 23       	and	r24, r24
    54a8:	71 f0       	breq	.+28     	; 0x54c6 <softKeyPrP+0x34>
    54aa:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    54ae:	8f 33       	cpi	r24, 0x3F	; 63
    54b0:	21 f4       	brne	.+8      	; 0x54ba <softKeyPrP+0x28>
    54b2:	8f ef       	ldi	r24, 0xFF	; 255
    54b4:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    54b8:	03 c0       	rjmp	.+6      	; 0x54c0 <softKeyPrP+0x2e>
    54ba:	8f 5f       	subi	r24, 0xFF	; 255
    54bc:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    54c0:	8f ef       	ldi	r24, 0xFF	; 255
    54c2:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    54c6:	80 e0       	ldi	r24, 0x00	; 0
    54c8:	08 95       	ret

000054ca <menuDisplayLoadMessage>:
    54ca:	0f 93       	push	r16
    54cc:	1f 93       	push	r17
    54ce:	cf 93       	push	r28
    54d0:	61 ee       	ldi	r22, 0xE1	; 225
    54d2:	78 e1       	ldi	r23, 0x18	; 24
    54d4:	0e 94 1d 39 	call	0x723a	; 0x723a <putChar_Dec>
    54d8:	bc 01       	movw	r22, r24
    54da:	89 ec       	ldi	r24, 0xC9	; 201
    54dc:	93 e0       	ldi	r25, 0x03	; 3
    54de:	0e 94 11 3a 	call	0x7422	; 0x7422 <putString_P>
    54e2:	8c 01       	movw	r16, r24
    54e4:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <module_WaitOutputInput2Cycles>
    54e8:	84 e0       	ldi	r24, 0x04	; 4
    54ea:	c5 d3       	rcall	.+1930   	; 0x5c76 <count_Registers>
    54ec:	c8 2f       	mov	r28, r24
    54ee:	88 23       	and	r24, r24
    54f0:	49 f0       	breq	.+18     	; 0x5504 <menuDisplayLoadMessage+0x3a>
    54f2:	b8 01       	movw	r22, r16
    54f4:	87 ec       	ldi	r24, 0xC7	; 199
    54f6:	93 e0       	ldi	r25, 0x03	; 3
    54f8:	0e 94 11 3a 	call	0x7422	; 0x7422 <putString_P>
    54fc:	bc 01       	movw	r22, r24
    54fe:	8c 2f       	mov	r24, r28
    5500:	0e 94 1d 39 	call	0x723a	; 0x723a <putChar_Dec>
    5504:	81 ee       	ldi	r24, 0xE1	; 225
    5506:	98 e1       	ldi	r25, 0x18	; 24
    5508:	81 df       	rcall	.-254    	; 0x540c <menu_DisplayMainMessage>
    550a:	cf 91       	pop	r28
    550c:	1f 91       	pop	r17
    550e:	0f 91       	pop	r16
    5510:	08 95       	ret

00005512 <handle_programKey>:
    5512:	cf 93       	push	r28
    5514:	c6 2f       	mov	r28, r22
    5516:	88 23       	and	r24, r24
    5518:	2c f4       	brge	.+10     	; 0x5524 <handle_programKey+0x12>
    551a:	6f ef       	ldi	r22, 0xFF	; 255
    551c:	8c 2f       	mov	r24, r28
    551e:	1d d4       	rcall	.+2106   	; 0x5d5a <register_toProgram>
    5520:	ab df       	rcall	.-170    	; 0x5478 <menuDisplaySaveMessage>
    5522:	05 c0       	rjmp	.+10     	; 0x552e <handle_programKey+0x1c>
    5524:	88 23       	and	r24, r24
    5526:	19 f0       	breq	.+6      	; 0x552e <handle_programKey+0x1c>
    5528:	86 2f       	mov	r24, r22
    552a:	b1 d4       	rcall	.+2402   	; 0x5e8e <program_toRegister>
    552c:	ce df       	rcall	.-100    	; 0x54ca <menuDisplayLoadMessage>
    552e:	8c 2f       	mov	r24, r28
    5530:	84 d4       	rcall	.+2312   	; 0x5e3a <midi_CountRegisterInProgram>
    5532:	88 23       	and	r24, r24
    5534:	31 f0       	breq	.+12     	; 0x5542 <handle_programKey+0x30>
    5536:	8c 2f       	mov	r24, r28
    5538:	45 d4       	rcall	.+2186   	; 0x5dc4 <midi_RegisterMatchProgram>
    553a:	81 11       	cpse	r24, r1
    553c:	04 c0       	rjmp	.+8      	; 0x5546 <handle_programKey+0x34>
    553e:	81 e8       	ldi	r24, 0x81	; 129
    5540:	03 c0       	rjmp	.+6      	; 0x5548 <handle_programKey+0x36>
    5542:	82 e8       	ldi	r24, 0x82	; 130
    5544:	01 c0       	rjmp	.+2      	; 0x5548 <handle_programKey+0x36>
    5546:	82 e8       	ldi	r24, 0x82	; 130
    5548:	cf 91       	pop	r28
    554a:	08 95       	ret

0000554c <softKeyK1A>:
    554c:	60 e0       	ldi	r22, 0x00	; 0
    554e:	e1 cf       	rjmp	.-62     	; 0x5512 <handle_programKey>
    5550:	08 95       	ret

00005552 <softKeyK2A>:
    5552:	61 e0       	ldi	r22, 0x01	; 1
    5554:	de cf       	rjmp	.-68     	; 0x5512 <handle_programKey>
    5556:	08 95       	ret

00005558 <softKeyK3A>:
    5558:	62 e0       	ldi	r22, 0x02	; 2
    555a:	db cf       	rjmp	.-74     	; 0x5512 <handle_programKey>
    555c:	08 95       	ret

0000555e <softKeyK4A>:
    555e:	63 e0       	ldi	r22, 0x03	; 3
    5560:	d8 cf       	rjmp	.-80     	; 0x5512 <handle_programKey>
    5562:	08 95       	ret

00005564 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5564:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5566:	34 e0       	ldi	r19, 0x04	; 4
    5568:	83 38       	cpi	r24, 0x83	; 131
    556a:	93 07       	cpc	r25, r19
    556c:	49 f0       	breq	.+18     	; 0x5580 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    556e:	34 e0       	ldi	r19, 0x04	; 4
    5570:	83 38       	cpi	r24, 0x83	; 131
    5572:	93 07       	cpc	r25, r19
    5574:	38 f0       	brcs	.+14     	; 0x5584 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5576:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5578:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    557a:	a9 f7       	brne	.-22     	; 0x5566 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    557c:	80 e0       	ldi	r24, 0x00	; 0
    557e:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5580:	82 2f       	mov	r24, r18
    5582:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5584:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5586:	08 95       	ret

00005588 <init_SoftKeys>:

void init_SoftKeys(){
    5588:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    558a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <eeprom_ReadSoftkeys>
    558e:	8f 3f       	cpi	r24, 0xFF	; 255
    5590:	c9 f4       	brne	.+50     	; 0x55c4 <init_SoftKeys+0x3c>
    5592:	0f c0       	rjmp	.+30     	; 0x55b2 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5594:	82 2f       	mov	r24, r18
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	fc 01       	movw	r30, r24
    559a:	ed 54       	subi	r30, 0x4D	; 77
    559c:	fa 4f       	sbci	r31, 0xFA	; 250
    559e:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    55a0:	88 0f       	add	r24, r24
    55a2:	99 1f       	adc	r25, r25
    55a4:	fc 01       	movw	r30, r24
    55a6:	e6 54       	subi	r30, 0x46	; 70
    55a8:	fa 4f       	sbci	r31, 0xFA	; 250
    55aa:	11 82       	std	Z+1, r1	; 0x01
    55ac:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    55ae:	2f 5f       	subi	r18, 0xFF	; 255
    55b0:	01 c0       	rjmp	.+2      	; 0x55b4 <init_SoftKeys+0x2c>
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	24 30       	cpi	r18, 0x04	; 4
    55b6:	70 f3       	brcs	.-36     	; 0x5594 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    55b8:	40 e0       	ldi	r20, 0x00	; 0
    55ba:	50 e0       	ldi	r21, 0x00	; 0
    55bc:	67 e0       	ldi	r22, 0x07	; 7
    55be:	81 e0       	ldi	r24, 0x01	; 1
    55c0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <log_putError>
    55c4:	c0 e0       	ldi	r28, 0x00	; 0
    55c6:	25 c0       	rjmp	.+74     	; 0x5612 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    55c8:	4c 2f       	mov	r20, r28
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	fa 01       	movw	r30, r20
    55ce:	ed 54       	subi	r30, 0x4D	; 77
    55d0:	fa 4f       	sbci	r31, 0xFA	; 250
    55d2:	80 81       	ld	r24, Z
    55d4:	88 31       	cpi	r24, 0x18	; 24
    55d6:	70 f4       	brcc	.+28     	; 0x55f4 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    55d8:	24 e1       	ldi	r18, 0x14	; 20
    55da:	82 9f       	mul	r24, r18
    55dc:	c0 01       	movw	r24, r0
    55de:	11 24       	eor	r1, r1
    55e0:	8d 57       	subi	r24, 0x7D	; 125
    55e2:	9b 4f       	sbci	r25, 0xFB	; 251
    55e4:	44 0f       	add	r20, r20
    55e6:	55 1f       	adc	r21, r21
    55e8:	fa 01       	movw	r30, r20
    55ea:	e6 54       	subi	r30, 0x46	; 70
    55ec:	fa 4f       	sbci	r31, 0xFA	; 250
    55ee:	91 83       	std	Z+1, r25	; 0x01
    55f0:	80 83       	st	Z, r24
    55f2:	0e c0       	rjmp	.+28     	; 0x5610 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    55f4:	fa 01       	movw	r30, r20
    55f6:	ee 0f       	add	r30, r30
    55f8:	ff 1f       	adc	r31, r31
    55fa:	e6 54       	subi	r30, 0x46	; 70
    55fc:	fa 4f       	sbci	r31, 0xFA	; 250
    55fe:	11 82       	std	Z+1, r1	; 0x01
    5600:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5602:	4f 5f       	subi	r20, 0xFF	; 255
    5604:	5f 4f       	sbci	r21, 0xFF	; 255
    5606:	40 61       	ori	r20, 0x10	; 16
    5608:	67 e0       	ldi	r22, 0x07	; 7
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5610:	cf 5f       	subi	r28, 0xFF	; 255
    5612:	c4 30       	cpi	r28, 0x04	; 4
    5614:	c8 f2       	brcs	.-78     	; 0x55c8 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5616:	cf 91       	pop	r28
    5618:	08 95       	ret

0000561a <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    561a:	cf 93       	push	r28
    561c:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    561e:	64 30       	cpi	r22, 0x04	; 4
    5620:	28 f5       	brcc	.+74     	; 0x566c <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5622:	00 97       	sbiw	r24, 0x00	; 0
    5624:	b9 f0       	breq	.+46     	; 0x5654 <softKey_Set+0x3a>
    5626:	fc 01       	movw	r30, r24
    5628:	24 91       	lpm	r18, Z
    562a:	2f 73       	andi	r18, 0x3F	; 63
    562c:	21 30       	cpi	r18, 0x01	; 1
    562e:	91 f4       	brne	.+36     	; 0x5654 <softKey_Set+0x3a>
    5630:	31 96       	adiw	r30, 0x01	; 1
    5632:	24 91       	lpm	r18, Z
    5634:	24 ff       	sbrs	r18, 4
    5636:	0e c0       	rjmp	.+28     	; 0x5654 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5638:	c6 2f       	mov	r28, r22
    563a:	d0 e0       	ldi	r29, 0x00	; 0
    563c:	fe 01       	movw	r30, r28
    563e:	ee 0f       	add	r30, r30
    5640:	ff 1f       	adc	r31, r31
    5642:	e6 54       	subi	r30, 0x46	; 70
    5644:	fa 4f       	sbci	r31, 0xFA	; 250
    5646:	91 83       	std	Z+1, r25	; 0x01
    5648:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    564a:	8c df       	rcall	.-232    	; 0x5564 <getSoftKeyIndex>
    564c:	cd 54       	subi	r28, 0x4D	; 77
    564e:	da 4f       	sbci	r29, 0xFA	; 250
    5650:	88 83       	st	Y, r24
    5652:	0c c0       	rjmp	.+24     	; 0x566c <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5654:	70 e0       	ldi	r23, 0x00	; 0
    5656:	fb 01       	movw	r30, r22
    5658:	ee 0f       	add	r30, r30
    565a:	ff 1f       	adc	r31, r31
    565c:	e6 54       	subi	r30, 0x46	; 70
    565e:	fa 4f       	sbci	r31, 0xFA	; 250
    5660:	11 82       	std	Z+1, r1	; 0x01
    5662:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5664:	fb 01       	movw	r30, r22
    5666:	ed 54       	subi	r30, 0x4D	; 77
    5668:	fa 4f       	sbci	r31, 0xFA	; 250
    566a:	10 82       	st	Z, r1
		}
	}
}
    566c:	df 91       	pop	r29
    566e:	cf 91       	pop	r28
    5670:	08 95       	ret

00005672 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5672:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5676:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    567a:	3e 96       	adiw	r30, 0x0e	; 14
    567c:	65 91       	lpm	r22, Z+
    567e:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5680:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5684:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    5688:	c8 df       	rcall	.-112    	; 0x561a <softKey_Set>
	eeprom_UpdateSoftkeys();
    568a:	0e 94 cd 0c 	call	0x199a	; 0x199a <eeprom_UpdateSoftkeys>
	return 0;
}
    568e:	80 e0       	ldi	r24, 0x00	; 0
    5690:	08 95       	ret

00005692 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5692:	0f 93       	push	r16
    5694:	1f 93       	push	r17
    5696:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5698:	c0 e0       	ldi	r28, 0x00	; 0
    569a:	32 c0       	rjmp	.+100    	; 0x5700 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    569c:	0c 2f       	mov	r16, r28
    569e:	10 e0       	ldi	r17, 0x00	; 0
    56a0:	f8 01       	movw	r30, r16
    56a2:	ee 0f       	add	r30, r30
    56a4:	ff 1f       	adc	r31, r31
    56a6:	e6 54       	subi	r30, 0x46	; 70
    56a8:	fa 4f       	sbci	r31, 0xFA	; 250
    56aa:	01 90       	ld	r0, Z+
    56ac:	f0 81       	ld	r31, Z
    56ae:	e0 2d       	mov	r30, r0
    56b0:	30 97       	sbiw	r30, 0x00	; 0
    56b2:	31 f0       	breq	.+12     	; 0x56c0 <softKeys_toLCD+0x2e>
    56b4:	3e 96       	adiw	r30, 0x0e	; 14
    56b6:	65 91       	lpm	r22, Z+
    56b8:	75 91       	lpm	r23, Z+
    56ba:	61 15       	cp	r22, r1
    56bc:	71 05       	cpc	r23, r1
    56be:	21 f4       	brne	.+8      	; 0x56c8 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    56c0:	8c 2f       	mov	r24, r28
    56c2:	0e 94 2a 3b 	call	0x7654	; 0x7654 <keylabel_clr>
    56c6:	1b c0       	rjmp	.+54     	; 0x56fe <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    56c8:	8c 2f       	mov	r24, r28
    56ca:	0e 94 ef 3a 	call	0x75de	; 0x75de <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    56ce:	00 0f       	add	r16, r16
    56d0:	11 1f       	adc	r17, r17
    56d2:	f8 01       	movw	r30, r16
    56d4:	e6 54       	subi	r30, 0x46	; 70
    56d6:	fa 4f       	sbci	r31, 0xFA	; 250
    56d8:	01 90       	ld	r0, Z+
    56da:	f0 81       	ld	r31, Z
    56dc:	e0 2d       	mov	r30, r0
    56de:	70 96       	adiw	r30, 0x10	; 16
    56e0:	05 90       	lpm	r0, Z+
    56e2:	f4 91       	lpm	r31, Z
    56e4:	e0 2d       	mov	r30, r0
    56e6:	30 97       	sbiw	r30, 0x00	; 0
    56e8:	51 f0       	breq	.+20     	; 0x56fe <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    56ea:	80 e0       	ldi	r24, 0x00	; 0
    56ec:	19 95       	eicall
    56ee:	81 38       	cpi	r24, 0x81	; 129
    56f0:	11 f4       	brne	.+4      	; 0x56f6 <softKeys_toLCD+0x64>
    56f2:	6f ef       	ldi	r22, 0xFF	; 255
    56f4:	01 c0       	rjmp	.+2      	; 0x56f8 <softKeys_toLCD+0x66>
    56f6:	60 e0       	ldi	r22, 0x00	; 0
    56f8:	8c 2f       	mov	r24, r28
    56fa:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    56fe:	cf 5f       	subi	r28, 0xFF	; 255
    5700:	c4 30       	cpi	r28, 0x04	; 4
    5702:	60 f2       	brcs	.-104    	; 0x569c <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5704:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
}
    5708:	cf 91       	pop	r28
    570a:	1f 91       	pop	r17
    570c:	0f 91       	pop	r16
    570e:	08 95       	ret

00005710 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    5710:	82 30       	cpi	r24, 0x02	; 2
    5712:	49 f0       	breq	.+18     	; 0x5726 <softKey_MessageKey_ToSoftKeyNr+0x16>
    5714:	18 f4       	brcc	.+6      	; 0x571c <softKey_MessageKey_ToSoftKeyNr+0xc>
    5716:	81 30       	cpi	r24, 0x01	; 1
    5718:	51 f0       	breq	.+20     	; 0x572e <softKey_MessageKey_ToSoftKeyNr+0x1e>
    571a:	0b c0       	rjmp	.+22     	; 0x5732 <softKey_MessageKey_ToSoftKeyNr+0x22>
    571c:	83 30       	cpi	r24, 0x03	; 3
    571e:	59 f0       	breq	.+22     	; 0x5736 <softKey_MessageKey_ToSoftKeyNr+0x26>
    5720:	84 30       	cpi	r24, 0x04	; 4
    5722:	19 f0       	breq	.+6      	; 0x572a <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5724:	06 c0       	rjmp	.+12     	; 0x5732 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5726:	80 e0       	ldi	r24, 0x00	; 0
    5728:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    572a:	82 e0       	ldi	r24, 0x02	; 2
    572c:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    572e:	83 e0       	ldi	r24, 0x03	; 3
    5730:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5732:	8f ef       	ldi	r24, 0xFF	; 255
    5734:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5736:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5738:	08 95       	ret

0000573a <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    573a:	0f 93       	push	r16
    573c:	1f 93       	push	r17
    573e:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5740:	84 30       	cpi	r24, 0x04	; 4
    5742:	d0 f5       	brcc	.+116    	; 0x57b8 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5744:	e8 2f       	mov	r30, r24
    5746:	f0 e0       	ldi	r31, 0x00	; 0
    5748:	ee 0f       	add	r30, r30
    574a:	ff 1f       	adc	r31, r31
    574c:	e6 54       	subi	r30, 0x46	; 70
    574e:	fa 4f       	sbci	r31, 0xFA	; 250
    5750:	00 81       	ld	r16, Z
    5752:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5754:	01 15       	cp	r16, r1
    5756:	11 05       	cpc	r17, r1
    5758:	89 f1       	breq	.+98     	; 0x57bc <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    575a:	f8 01       	movw	r30, r16
    575c:	94 91       	lpm	r25, Z
    575e:	9f 73       	andi	r25, 0x3F	; 63
    5760:	91 30       	cpi	r25, 0x01	; 1
    5762:	71 f5       	brne	.+92     	; 0x57c0 <softKey_Execute+0x86>
    5764:	31 96       	adiw	r30, 0x01	; 1
    5766:	94 91       	lpm	r25, Z
    5768:	94 ff       	sbrs	r25, 4
    576a:	2c c0       	rjmp	.+88     	; 0x57c4 <softKey_Execute+0x8a>
    576c:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    576e:	3f 96       	adiw	r30, 0x0f	; 15
    5770:	05 90       	lpm	r0, Z+
    5772:	f4 91       	lpm	r31, Z
    5774:	e0 2d       	mov	r30, r0
    5776:	30 97       	sbiw	r30, 0x00	; 0
    5778:	89 f0       	breq	.+34     	; 0x579c <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    577a:	86 2f       	mov	r24, r22
    577c:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    577e:	82 38       	cpi	r24, 0x82	; 130
    5780:	29 f4       	brne	.+10     	; 0x578c <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5782:	60 e0       	ldi	r22, 0x00	; 0
    5784:	8c 2f       	mov	r24, r28
    5786:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <keylabel_statcheck>
    578a:	06 c0       	rjmp	.+12     	; 0x5798 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    578c:	81 38       	cpi	r24, 0x81	; 129
    578e:	21 f4       	brne	.+8      	; 0x5798 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5790:	6f ef       	ldi	r22, 0xFF	; 255
    5792:	8c 2f       	mov	r24, r28
    5794:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <keylabel_statcheck>
					}
					keylabel_toLCD();
    5798:	0e 94 3e 3b 	call	0x767c	; 0x767c <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    579c:	f8 01       	movw	r30, r16
    579e:	3c 96       	adiw	r30, 0x0c	; 12
    57a0:	85 91       	lpm	r24, Z+
    57a2:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    57a4:	00 97       	sbiw	r24, 0x00	; 0
    57a6:	81 f0       	breq	.+32     	; 0x57c8 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    57a8:	b8 01       	movw	r22, r16
    57aa:	6e 5f       	subi	r22, 0xFE	; 254
    57ac:	7f 4f       	sbci	r23, 0xFF	; 255
    57ae:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <menu_Init>
					menu_InitLCD(); //display menu
    57b2:	32 da       	rcall	.-2972   	; 0x4c18 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    57b4:	80 e0       	ldi	r24, 0x00	; 0
    57b6:	09 c0       	rjmp	.+18     	; 0x57ca <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    57b8:	8f ef       	ldi	r24, 0xFF	; 255
    57ba:	07 c0       	rjmp	.+14     	; 0x57ca <softKey_Execute+0x90>
    57bc:	8f ef       	ldi	r24, 0xFF	; 255
    57be:	05 c0       	rjmp	.+10     	; 0x57ca <softKey_Execute+0x90>
    57c0:	8f ef       	ldi	r24, 0xFF	; 255
    57c2:	03 c0       	rjmp	.+6      	; 0x57ca <softKey_Execute+0x90>
    57c4:	8f ef       	ldi	r24, 0xFF	; 255
    57c6:	01 c0       	rjmp	.+2      	; 0x57ca <softKey_Execute+0x90>
    57c8:	8f ef       	ldi	r24, 0xFF	; 255
}
    57ca:	cf 91       	pop	r28
    57cc:	1f 91       	pop	r17
    57ce:	0f 91       	pop	r16
    57d0:	08 95       	ret

000057d2 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    57d2:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    57d4:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    57d8:	8c e0       	ldi	r24, 0x0C	; 12
    57da:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    57de:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    57e2:	84 ff       	sbrs	r24, 4
    57e4:	02 c0       	rjmp	.+4      	; 0x57ea <menu_showPowerState+0x18>
    57e6:	80 e2       	ldi	r24, 0x20	; 32
    57e8:	01 c0       	rjmp	.+2      	; 0x57ec <menu_showPowerState+0x1a>
    57ea:	89 e0       	ldi	r24, 0x09	; 9
    57ec:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
	lcd_goto(saveCursor);
    57f0:	8c 2f       	mov	r24, r28
    57f2:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>

    57f6:	cf 91       	pop	r28
    57f8:	08 95       	ret

000057fa <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    57fa:	85 b1       	in	r24, 0x05	; 5
    57fc:	80 64       	ori	r24, 0x40	; 64
    57fe:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5800:	83 e1       	ldi	r24, 0x13	; 19
    5802:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5806:	e5 df       	rcall	.-54     	; 0x57d2 <menu_showPowerState>
	return 0;
}
    5808:	80 e0       	ldi	r24, 0x00	; 0
    580a:	08 95       	ret

0000580c <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    580c:	85 b1       	in	r24, 0x05	; 5
    580e:	8f 7b       	andi	r24, 0xBF	; 191
    5810:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5812:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5816:	dd df       	rcall	.-70     	; 0x57d2 <menu_showPowerState>
	return 0;
}
    5818:	80 e0       	ldi	r24, 0x00	; 0
    581a:	08 95       	ret

0000581c <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    581c:	85 b1       	in	r24, 0x05	; 5
    581e:	8f 7b       	andi	r24, 0xBF	; 191
    5820:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5822:	81 e0       	ldi	r24, 0x01	; 1
    5824:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5828:	d4 df       	rcall	.-88     	; 0x57d2 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    582a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    582c:	f8 94       	cli
    582e:	81 e0       	ldi	r24, 0x01	; 1
    5830:	06 c0       	rjmp	.+12     	; 0x583e <menuOnEnterPwrRest+0x22>
    5832:	ef e2       	ldi	r30, 0x2F	; 47
    5834:	f2 e0       	ldi	r31, 0x02	; 2
    5836:	88 e2       	ldi	r24, 0x28	; 40
    5838:	82 83       	std	Z+2, r24	; 0x02
    583a:	13 82       	std	Z+3, r1	; 0x03
    583c:	80 e0       	ldi	r24, 0x00	; 0
    583e:	81 11       	cpse	r24, r1
    5840:	f8 cf       	rjmp	.-16     	; 0x5832 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5842:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5844:	08 95       	ret

00005846 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5846:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    584a:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    584e:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    5852:	08 95       	ret

00005854 <message_push>:
    5854:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    5858:	e9 2f       	mov	r30, r25
    585a:	f0 e0       	ldi	r31, 0x00	; 0
    585c:	ed 52       	subi	r30, 0x2D	; 45
    585e:	f8 4f       	sbci	r31, 0xF8	; 248
    5860:	80 83       	st	Z, r24
    5862:	9f 5f       	subi	r25, 0xFF	; 255
    5864:	9f 71       	andi	r25, 0x1F	; 31
    5866:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    586a:	98 13       	cpse	r25, r24
    586c:	04 c0       	rjmp	.+8      	; 0x5876 <message_push+0x22>
    586e:	8f ef       	ldi	r24, 0xFF	; 255
    5870:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    5874:	08 95       	ret
    5876:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    587a:	08 95       	ret

0000587c <message_get>:
    587c:	4f b7       	in	r20, 0x3f	; 63
    587e:	f8 94       	cli
    5880:	21 e0       	ldi	r18, 0x01	; 1
    5882:	11 c0       	rjmp	.+34     	; 0x58a6 <message_get+0x2a>
    5884:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    5888:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    588c:	8f ef       	ldi	r24, 0xFF	; 255
    588e:	20 e0       	ldi	r18, 0x00	; 0
    5890:	93 17       	cp	r25, r19
    5892:	49 f0       	breq	.+18     	; 0x58a6 <message_get+0x2a>
    5894:	e9 2f       	mov	r30, r25
    5896:	f0 e0       	ldi	r31, 0x00	; 0
    5898:	ed 52       	subi	r30, 0x2D	; 45
    589a:	f8 4f       	sbci	r31, 0xF8	; 248
    589c:	80 81       	ld	r24, Z
    589e:	9f 5f       	subi	r25, 0xFF	; 255
    58a0:	9f 71       	andi	r25, 0x1F	; 31
    58a2:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    58a6:	21 11       	cpse	r18, r1
    58a8:	ed cf       	rjmp	.-38     	; 0x5884 <message_get+0x8>
    58aa:	4f bf       	out	0x3f, r20	; 63
    58ac:	08 95       	ret

000058ae <message_status>:
    58ae:	4f b7       	in	r20, 0x3f	; 63
    58b0:	f8 94       	cli
    58b2:	91 e0       	ldi	r25, 0x01	; 1
    58b4:	08 c0       	rjmp	.+16     	; 0x58c6 <message_status+0x18>
    58b6:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    58ba:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	32 17       	cp	r19, r18
    58c4:	11 f0       	breq	.+4      	; 0x58ca <message_status+0x1c>
    58c6:	8f ef       	ldi	r24, 0xFF	; 255
    58c8:	01 c0       	rjmp	.+2      	; 0x58cc <message_status+0x1e>
    58ca:	90 e0       	ldi	r25, 0x00	; 0
    58cc:	91 11       	cpse	r25, r1
    58ce:	f3 cf       	rjmp	.-26     	; 0x58b6 <message_status+0x8>
    58d0:	4f bf       	out	0x3f, r20	; 63
    58d2:	08 95       	ret

000058d4 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    58d4:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    58d6:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    58da:	99 23       	and	r25, r25
    58dc:	e1 f0       	breq	.+56     	; 0x5916 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    58de:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    58e2:	21 e0       	ldi	r18, 0x01	; 1
    58e4:	29 0f       	add	r18, r25
    58e6:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    58ea:	e9 2f       	mov	r30, r25
    58ec:	f0 e0       	ldi	r31, 0x00	; 0
    58ee:	ee 0f       	add	r30, r30
    58f0:	ff 1f       	adc	r31, r31
    58f2:	e0 53       	subi	r30, 0x30	; 48
    58f4:	fa 4f       	sbci	r31, 0xFA	; 250
    58f6:	51 83       	std	Z+1, r21	; 0x01
    58f8:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    58fa:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    58fe:	28 13       	cpse	r18, r24
    5900:	0a c0       	rjmp	.+20     	; 0x5916 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5902:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5906:	9f 3f       	cpi	r25, 0xFF	; 255
    5908:	19 f4       	brne	.+6      	; 0x5910 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    590a:	8f ef       	ldi	r24, 0xFF	; 255
    590c:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5910:	8f ef       	ldi	r24, 0xFF	; 255
    5912:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    5916:	08 95       	ret

00005918 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5918:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    591c:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5920:	e8 13       	cpse	r30, r24
    5922:	03 c0       	rjmp	.+6      	; 0x592a <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5924:	8f ef       	ldi	r24, 0xFF	; 255
    5926:	9f ef       	ldi	r25, 0xFF	; 255
    5928:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	8e 0f       	add	r24, r30
    592e:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    5932:	f0 e0       	ldi	r31, 0x00	; 0
    5934:	ee 0f       	add	r30, r30
    5936:	ff 1f       	adc	r31, r31
    5938:	e0 53       	subi	r30, 0x30	; 48
    593a:	fa 4f       	sbci	r31, 0xFA	; 250
    593c:	80 81       	ld	r24, Z
    593e:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5940:	08 95       	ret

00005942 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5942:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5946:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    594a:	98 13       	cpse	r25, r24
    594c:	02 c0       	rjmp	.+4      	; 0x5952 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    594e:	80 e0       	ldi	r24, 0x00	; 0
    5950:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5952:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5954:	08 95       	ret

00005956 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5956:	80 e0       	ldi	r24, 0x00	; 0
    5958:	e1 e1       	ldi	r30, 0x11	; 17
    595a:	f8 e0       	ldi	r31, 0x08	; 8
    595c:	03 c0       	rjmp	.+6      	; 0x5964 <midi_CouplerReset+0xe>
    595e:	10 82       	st	Z, r1
    5960:	8f 5f       	subi	r24, 0xFF	; 255
    5962:	31 96       	adiw	r30, 0x01	; 1
    5964:	8c 30       	cpi	r24, 0x0C	; 12
    5966:	d8 f3       	brcs	.-10     	; 0x595e <midi_CouplerReset+0x8>
    5968:	08 95       	ret

0000596a <init_Midi>:
    596a:	f5 df       	rcall	.-22     	; 0x5956 <midi_CouplerReset>
    596c:	8f ef       	ldi	r24, 0xFF	; 255
    596e:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5972:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    5976:	08 95       	ret

00005978 <set_Coupler>:
    5978:	8c 30       	cpi	r24, 0x0C	; 12
    597a:	e8 f4       	brcc	.+58     	; 0x59b6 <set_Coupler+0x3e>
    597c:	e8 2f       	mov	r30, r24
    597e:	f0 e0       	ldi	r31, 0x00	; 0
    5980:	ef 5e       	subi	r30, 0xEF	; 239
    5982:	f7 4f       	sbci	r31, 0xF7	; 247
    5984:	9f ef       	ldi	r25, 0xFF	; 255
    5986:	90 83       	st	Z, r25
    5988:	86 30       	cpi	r24, 0x06	; 6
    598a:	10 f0       	brcs	.+4      	; 0x5990 <set_Coupler+0x18>
    598c:	86 50       	subi	r24, 0x06	; 6
    598e:	01 c0       	rjmp	.+2      	; 0x5992 <set_Coupler+0x1a>
    5990:	8a 5f       	subi	r24, 0xFA	; 250
    5992:	e8 2f       	mov	r30, r24
    5994:	f0 e0       	ldi	r31, 0x00	; 0
    5996:	df 01       	movw	r26, r30
    5998:	af 5e       	subi	r26, 0xEF	; 239
    599a:	b7 4f       	sbci	r27, 0xF7	; 247
    599c:	8c 91       	ld	r24, X
    599e:	88 23       	and	r24, r24
    59a0:	59 f0       	breq	.+22     	; 0x59b8 <set_Coupler+0x40>
    59a2:	df 01       	movw	r26, r30
    59a4:	af 5e       	subi	r26, 0xEF	; 239
    59a6:	b7 4f       	sbci	r27, 0xF7	; 247
    59a8:	1c 92       	st	X, r1
    59aa:	ee 0f       	add	r30, r30
    59ac:	ff 1f       	adc	r31, r31
    59ae:	ef 5d       	subi	r30, 0xDF	; 223
    59b0:	fd 4e       	sbci	r31, 0xED	; 237
    59b2:	84 91       	lpm	r24, Z
    59b4:	08 95       	ret
    59b6:	80 e0       	ldi	r24, 0x00	; 0
    59b8:	08 95       	ret

000059ba <getAllCouplers>:
    59ba:	80 e0       	ldi	r24, 0x00	; 0
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	4b e0       	ldi	r20, 0x0B	; 11
    59c0:	01 c0       	rjmp	.+2      	; 0x59c4 <getAllCouplers+0xa>
    59c2:	42 2f       	mov	r20, r18
    59c4:	28 2f       	mov	r18, r24
    59c6:	39 2f       	mov	r19, r25
    59c8:	22 0f       	add	r18, r18
    59ca:	33 1f       	adc	r19, r19
    59cc:	82 2f       	mov	r24, r18
    59ce:	93 2f       	mov	r25, r19
    59d0:	e4 2f       	mov	r30, r20
    59d2:	f0 e0       	ldi	r31, 0x00	; 0
    59d4:	ef 5e       	subi	r30, 0xEF	; 239
    59d6:	f7 4f       	sbci	r31, 0xF7	; 247
    59d8:	50 81       	ld	r21, Z
    59da:	5f 3f       	cpi	r21, 0xFF	; 255
    59dc:	09 f4       	brne	.+2      	; 0x59e0 <getAllCouplers+0x26>
    59de:	81 60       	ori	r24, 0x01	; 1
    59e0:	2f ef       	ldi	r18, 0xFF	; 255
    59e2:	24 0f       	add	r18, r20
    59e4:	41 11       	cpse	r20, r1
    59e6:	ed cf       	rjmp	.-38     	; 0x59c2 <getAllCouplers+0x8>
    59e8:	08 95       	ret

000059ea <setAllCouplers>:
    59ea:	40 e0       	ldi	r20, 0x00	; 0
    59ec:	80 ff       	sbrs	r24, 0
    59ee:	07 c0       	rjmp	.+14     	; 0x59fe <setAllCouplers+0x14>
    59f0:	e4 2f       	mov	r30, r20
    59f2:	f0 e0       	ldi	r31, 0x00	; 0
    59f4:	ef 5e       	subi	r30, 0xEF	; 239
    59f6:	f7 4f       	sbci	r31, 0xF7	; 247
    59f8:	2f ef       	ldi	r18, 0xFF	; 255
    59fa:	20 83       	st	Z, r18
    59fc:	05 c0       	rjmp	.+10     	; 0x5a08 <setAllCouplers+0x1e>
    59fe:	e4 2f       	mov	r30, r20
    5a00:	f0 e0       	ldi	r31, 0x00	; 0
    5a02:	ef 5e       	subi	r30, 0xEF	; 239
    5a04:	f7 4f       	sbci	r31, 0xF7	; 247
    5a06:	10 82       	st	Z, r1
    5a08:	28 2f       	mov	r18, r24
    5a0a:	39 2f       	mov	r19, r25
    5a0c:	36 95       	lsr	r19
    5a0e:	27 95       	ror	r18
    5a10:	82 2f       	mov	r24, r18
    5a12:	93 2f       	mov	r25, r19
    5a14:	4f 5f       	subi	r20, 0xFF	; 255
    5a16:	4c 30       	cpi	r20, 0x0C	; 12
    5a18:	48 f3       	brcs	.-46     	; 0x59ec <setAllCouplers+0x2>
    5a1a:	08 95       	ret

00005a1c <midiAllReset>:
    5a1c:	80 e8       	ldi	r24, 0x80	; 128
    5a1e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    5a22:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <init_Pipe>
    5a26:	08 95       	ret

00005a28 <registers_CalcCount>:
    5a28:	20 e0       	ldi	r18, 0x00	; 0
    5a2a:	30 e0       	ldi	r19, 0x00	; 0
    5a2c:	12 c0       	rjmp	.+36     	; 0x5a52 <registers_CalcCount+0x2a>
    5a2e:	82 2f       	mov	r24, r18
    5a30:	90 e0       	ldi	r25, 0x00	; 0
    5a32:	fc 01       	movw	r30, r24
    5a34:	ee 0f       	add	r30, r30
    5a36:	ff 1f       	adc	r31, r31
    5a38:	8e 0f       	add	r24, r30
    5a3a:	9f 1f       	adc	r25, r31
    5a3c:	fc 01       	movw	r30, r24
    5a3e:	e9 50       	subi	r30, 0x09	; 9
    5a40:	f8 4f       	sbci	r31, 0xF8	; 248
    5a42:	81 81       	ldd	r24, Z+1	; 0x01
    5a44:	8f 3f       	cpi	r24, 0xFF	; 255
    5a46:	21 f0       	breq	.+8      	; 0x5a50 <registers_CalcCount+0x28>
    5a48:	83 17       	cp	r24, r19
    5a4a:	10 f0       	brcs	.+4      	; 0x5a50 <registers_CalcCount+0x28>
    5a4c:	31 e0       	ldi	r19, 0x01	; 1
    5a4e:	38 0f       	add	r19, r24
    5a50:	2f 5f       	subi	r18, 0xFF	; 255
    5a52:	28 30       	cpi	r18, 0x08	; 8
    5a54:	60 f3       	brcs	.-40     	; 0x5a2e <registers_CalcCount+0x6>
    5a56:	30 93 10 08 	sts	0x0810, r19	; 0x800810 <registerCount>
    5a5a:	08 95       	ret

00005a5c <init_Registers>:
    5a5c:	8f ef       	ldi	r24, 0xFF	; 255
    5a5e:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
    5a62:	20 e0       	ldi	r18, 0x00	; 0
    5a64:	0e c0       	rjmp	.+28     	; 0x5a82 <init_Registers+0x26>
    5a66:	82 2f       	mov	r24, r18
    5a68:	90 e0       	ldi	r25, 0x00	; 0
    5a6a:	fc 01       	movw	r30, r24
    5a6c:	ee 0f       	add	r30, r30
    5a6e:	ff 1f       	adc	r31, r31
    5a70:	e8 0f       	add	r30, r24
    5a72:	f9 1f       	adc	r31, r25
    5a74:	e9 50       	subi	r30, 0x09	; 9
    5a76:	f8 4f       	sbci	r31, 0xF8	; 248
    5a78:	8f ef       	ldi	r24, 0xFF	; 255
    5a7a:	80 83       	st	Z, r24
    5a7c:	81 83       	std	Z+1, r24	; 0x01
    5a7e:	12 82       	std	Z+2, r1	; 0x02
    5a80:	2f 5f       	subi	r18, 0xFF	; 255
    5a82:	28 30       	cpi	r18, 0x08	; 8
    5a84:	80 f3       	brcs	.-32     	; 0x5a66 <init_Registers+0xa>
    5a86:	0e 94 14 0b 	call	0x1628	; 0x1628 <eeprom_ReadReg>
    5a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    5a8c:	49 f4       	brne	.+18     	; 0x5aa0 <init_Registers+0x44>
    5a8e:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <registerCount>
    5a92:	40 e0       	ldi	r20, 0x00	; 0
    5a94:	50 e0       	ldi	r21, 0x00	; 0
    5a96:	65 e0       	ldi	r22, 0x05	; 5
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <log_putError>
    5a9e:	01 c0       	rjmp	.+2      	; 0x5aa2 <init_Registers+0x46>
    5aa0:	c3 df       	rcall	.-122    	; 0x5a28 <registers_CalcCount>
    5aa2:	0e 94 48 0b 	call	0x1690	; 0x1690 <eeprom_ReadProg>
    5aa6:	8f 3f       	cpi	r24, 0xFF	; 255
    5aa8:	a1 f5       	brne	.+104    	; 0x5b12 <init_Registers+0xb6>
    5aaa:	2a c0       	rjmp	.+84     	; 0x5b00 <init_Registers+0xa4>
    5aac:	83 2f       	mov	r24, r19
    5aae:	90 e0       	ldi	r25, 0x00	; 0
    5ab0:	fc 01       	movw	r30, r24
    5ab2:	ee 0f       	add	r30, r30
    5ab4:	ff 1f       	adc	r31, r31
    5ab6:	88 0f       	add	r24, r24
    5ab8:	99 1f       	adc	r25, r25
    5aba:	88 0f       	add	r24, r24
    5abc:	99 1f       	adc	r25, r25
    5abe:	88 0f       	add	r24, r24
    5ac0:	99 1f       	adc	r25, r25
    5ac2:	e8 0f       	add	r30, r24
    5ac4:	f9 1f       	adc	r31, r25
    5ac6:	ec 59       	subi	r30, 0x9C	; 156
    5ac8:	f6 4f       	sbci	r31, 0xF6	; 246
    5aca:	e2 0f       	add	r30, r18
    5acc:	f1 1d       	adc	r31, r1
    5ace:	10 82       	st	Z, r1
    5ad0:	2f 5f       	subi	r18, 0xFF	; 255
    5ad2:	01 c0       	rjmp	.+2      	; 0x5ad6 <init_Registers+0x7a>
    5ad4:	20 e0       	ldi	r18, 0x00	; 0
    5ad6:	28 30       	cpi	r18, 0x08	; 8
    5ad8:	48 f3       	brcs	.-46     	; 0x5aac <init_Registers+0x50>
    5ada:	83 2f       	mov	r24, r19
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	fc 01       	movw	r30, r24
    5ae0:	ee 0f       	add	r30, r30
    5ae2:	ff 1f       	adc	r31, r31
    5ae4:	88 0f       	add	r24, r24
    5ae6:	99 1f       	adc	r25, r25
    5ae8:	88 0f       	add	r24, r24
    5aea:	99 1f       	adc	r25, r25
    5aec:	88 0f       	add	r24, r24
    5aee:	99 1f       	adc	r25, r25
    5af0:	e8 0f       	add	r30, r24
    5af2:	f9 1f       	adc	r31, r25
    5af4:	ec 59       	subi	r30, 0x9C	; 156
    5af6:	f6 4f       	sbci	r31, 0xF6	; 246
    5af8:	11 86       	std	Z+9, r1	; 0x09
    5afa:	10 86       	std	Z+8, r1	; 0x08
    5afc:	3f 5f       	subi	r19, 0xFF	; 255
    5afe:	01 c0       	rjmp	.+2      	; 0x5b02 <init_Registers+0xa6>
    5b00:	30 e0       	ldi	r19, 0x00	; 0
    5b02:	30 34       	cpi	r19, 0x40	; 64
    5b04:	38 f3       	brcs	.-50     	; 0x5ad4 <init_Registers+0x78>
    5b06:	40 e0       	ldi	r20, 0x00	; 0
    5b08:	50 e0       	ldi	r21, 0x00	; 0
    5b0a:	66 e0       	ldi	r22, 0x06	; 6
    5b0c:	81 e0       	ldi	r24, 0x01	; 1
    5b0e:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <log_putError>
    5b12:	08 95       	ret

00005b14 <regNr_to_moduleBit>:
    5b14:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5b18:	89 17       	cp	r24, r25
    5b1a:	a0 f4       	brcc	.+40     	; 0x5b44 <regNr_to_moduleBit+0x30>
    5b1c:	80 34       	cpi	r24, 0x40	; 64
    5b1e:	90 f4       	brcc	.+36     	; 0x5b44 <regNr_to_moduleBit+0x30>
    5b20:	28 e0       	ldi	r18, 0x08	; 8
    5b22:	e7 ef       	ldi	r30, 0xF7	; 247
    5b24:	f7 e0       	ldi	r31, 0x07	; 7
    5b26:	30 81       	ld	r19, Z
    5b28:	83 17       	cp	r24, r19
    5b2a:	48 f0       	brcs	.+18     	; 0x5b3e <regNr_to_moduleBit+0x2a>
    5b2c:	91 81       	ldd	r25, Z+1	; 0x01
    5b2e:	98 17       	cp	r25, r24
    5b30:	30 f0       	brcs	.+12     	; 0x5b3e <regNr_to_moduleBit+0x2a>
    5b32:	22 81       	ldd	r18, Z+2	; 0x02
    5b34:	98 2f       	mov	r25, r24
    5b36:	93 1b       	sub	r25, r19
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	92 0f       	add	r25, r18
    5b3c:	08 95       	ret
    5b3e:	33 96       	adiw	r30, 0x03	; 3
    5b40:	21 50       	subi	r18, 0x01	; 1
    5b42:	89 f7       	brne	.-30     	; 0x5b26 <regNr_to_moduleBit+0x12>
    5b44:	8f ef       	ldi	r24, 0xFF	; 255
    5b46:	90 e0       	ldi	r25, 0x00	; 0
    5b48:	08 95       	ret

00005b4a <moduleBit_to_registerNr>:
    5b4a:	90 e0       	ldi	r25, 0x00	; 0
    5b4c:	16 c0       	rjmp	.+44     	; 0x5b7a <moduleBit_to_registerNr+0x30>
    5b4e:	40 91 f9 07 	lds	r20, 0x07F9	; 0x8007f9 <registerMap+0x2>
    5b52:	84 17       	cp	r24, r20
    5b54:	88 f0       	brcs	.+34     	; 0x5b78 <moduleBit_to_registerNr+0x2e>
    5b56:	68 2f       	mov	r22, r24
    5b58:	70 e0       	ldi	r23, 0x00	; 0
    5b5a:	e7 ef       	ldi	r30, 0xF7	; 247
    5b5c:	f7 e0       	ldi	r31, 0x07	; 7
    5b5e:	21 81       	ldd	r18, Z+1	; 0x01
    5b60:	30 e0       	ldi	r19, 0x00	; 0
    5b62:	24 0f       	add	r18, r20
    5b64:	31 1d       	adc	r19, r1
    5b66:	50 81       	ld	r21, Z
    5b68:	25 1b       	sub	r18, r21
    5b6a:	31 09       	sbc	r19, r1
    5b6c:	26 17       	cp	r18, r22
    5b6e:	37 07       	cpc	r19, r23
    5b70:	1c f0       	brlt	.+6      	; 0x5b78 <moduleBit_to_registerNr+0x2e>
    5b72:	84 1b       	sub	r24, r20
    5b74:	85 0f       	add	r24, r21
    5b76:	08 95       	ret
    5b78:	9f 5f       	subi	r25, 0xFF	; 255
    5b7a:	98 30       	cpi	r25, 0x08	; 8
    5b7c:	40 f3       	brcs	.-48     	; 0x5b4e <moduleBit_to_registerNr+0x4>
    5b7e:	8f ef       	ldi	r24, 0xFF	; 255
    5b80:	08 95       	ret

00005b82 <read_Register>:
    5b82:	cf 93       	push	r28
    5b84:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5b88:	89 17       	cp	r24, r25
    5b8a:	08 f0       	brcs	.+2      	; 0x5b8e <read_Register+0xc>
    5b8c:	3c c0       	rjmp	.+120    	; 0x5c06 <read_Register+0x84>
    5b8e:	c6 2f       	mov	r28, r22
    5b90:	c1 df       	rcall	.-126    	; 0x5b14 <regNr_to_moduleBit>
    5b92:	81 11       	cpse	r24, r1
    5b94:	30 c0       	rjmp	.+96     	; 0x5bf6 <read_Register+0x74>
    5b96:	29 2f       	mov	r18, r25
    5b98:	2f 71       	andi	r18, 0x1F	; 31
    5b9a:	92 95       	swap	r25
    5b9c:	96 95       	lsr	r25
    5b9e:	97 70       	andi	r25, 0x07	; 7
    5ba0:	41 e0       	ldi	r20, 0x01	; 1
    5ba2:	50 e0       	ldi	r21, 0x00	; 0
    5ba4:	02 c0       	rjmp	.+4      	; 0x5baa <read_Register+0x28>
    5ba6:	44 0f       	add	r20, r20
    5ba8:	55 1f       	adc	r21, r21
    5baa:	9a 95       	dec	r25
    5bac:	e2 f7       	brpl	.-8      	; 0x5ba6 <read_Register+0x24>
    5bae:	30 e0       	ldi	r19, 0x00	; 0
    5bb0:	f9 01       	movw	r30, r18
    5bb2:	ee 0f       	add	r30, r30
    5bb4:	ff 1f       	adc	r31, r31
    5bb6:	ee 0f       	add	r30, r30
    5bb8:	ff 1f       	adc	r31, r31
    5bba:	ee 0f       	add	r30, r30
    5bbc:	ff 1f       	adc	r31, r31
    5bbe:	e7 5b       	subi	r30, 0xB7	; 183
    5bc0:	fd 4f       	sbci	r31, 0xFD	; 253
    5bc2:	91 81       	ldd	r25, Z+1	; 0x01
    5bc4:	94 23       	and	r25, r20
    5bc6:	11 f4       	brne	.+4      	; 0x5bcc <read_Register+0x4a>
    5bc8:	c1 fd       	sbrc	r28, 1
    5bca:	17 c0       	rjmp	.+46     	; 0x5bfa <read_Register+0x78>
    5bcc:	22 0f       	add	r18, r18
    5bce:	33 1f       	adc	r19, r19
    5bd0:	22 0f       	add	r18, r18
    5bd2:	33 1f       	adc	r19, r19
    5bd4:	22 0f       	add	r18, r18
    5bd6:	33 1f       	adc	r19, r19
    5bd8:	f9 01       	movw	r30, r18
    5bda:	e7 5b       	subi	r30, 0xB7	; 183
    5bdc:	fd 4f       	sbci	r31, 0xFD	; 253
    5bde:	26 81       	ldd	r18, Z+6	; 0x06
    5be0:	42 23       	and	r20, r18
    5be2:	11 f0       	breq	.+4      	; 0x5be8 <read_Register+0x66>
    5be4:	c0 fd       	sbrc	r28, 0
    5be6:	0b c0       	rjmp	.+22     	; 0x5bfe <read_Register+0x7c>
    5be8:	99 23       	and	r25, r25
    5bea:	71 f0       	breq	.+28     	; 0x5c08 <read_Register+0x86>
    5bec:	44 23       	and	r20, r20
    5bee:	61 f0       	breq	.+24     	; 0x5c08 <read_Register+0x86>
    5bf0:	c4 30       	cpi	r28, 0x04	; 4
    5bf2:	51 f4       	brne	.+20     	; 0x5c08 <read_Register+0x86>
    5bf4:	06 c0       	rjmp	.+12     	; 0x5c02 <read_Register+0x80>
    5bf6:	80 e0       	ldi	r24, 0x00	; 0
    5bf8:	07 c0       	rjmp	.+14     	; 0x5c08 <read_Register+0x86>
    5bfa:	81 e0       	ldi	r24, 0x01	; 1
    5bfc:	05 c0       	rjmp	.+10     	; 0x5c08 <read_Register+0x86>
    5bfe:	81 e0       	ldi	r24, 0x01	; 1
    5c00:	03 c0       	rjmp	.+6      	; 0x5c08 <read_Register+0x86>
    5c02:	81 e0       	ldi	r24, 0x01	; 1
    5c04:	01 c0       	rjmp	.+2      	; 0x5c08 <read_Register+0x86>
    5c06:	80 e0       	ldi	r24, 0x00	; 0
    5c08:	cf 91       	pop	r28
    5c0a:	08 95       	ret

00005c0c <get_RegisterStatus>:
    5c0c:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5c10:	89 17       	cp	r24, r25
    5c12:	78 f5       	brcc	.+94     	; 0x5c72 <get_RegisterStatus+0x66>
    5c14:	7f df       	rcall	.-258    	; 0x5b14 <regNr_to_moduleBit>
    5c16:	81 11       	cpse	r24, r1
    5c18:	28 c0       	rjmp	.+80     	; 0x5c6a <get_RegisterStatus+0x5e>
    5c1a:	29 2f       	mov	r18, r25
    5c1c:	2f 71       	andi	r18, 0x1F	; 31
    5c1e:	39 2f       	mov	r19, r25
    5c20:	32 95       	swap	r19
    5c22:	36 95       	lsr	r19
    5c24:	37 70       	andi	r19, 0x07	; 7
    5c26:	81 e0       	ldi	r24, 0x01	; 1
    5c28:	90 e0       	ldi	r25, 0x00	; 0
    5c2a:	02 c0       	rjmp	.+4      	; 0x5c30 <get_RegisterStatus+0x24>
    5c2c:	88 0f       	add	r24, r24
    5c2e:	99 1f       	adc	r25, r25
    5c30:	3a 95       	dec	r19
    5c32:	e2 f7       	brpl	.-8      	; 0x5c2c <get_RegisterStatus+0x20>
    5c34:	30 e0       	ldi	r19, 0x00	; 0
    5c36:	f9 01       	movw	r30, r18
    5c38:	ee 0f       	add	r30, r30
    5c3a:	ff 1f       	adc	r31, r31
    5c3c:	ee 0f       	add	r30, r30
    5c3e:	ff 1f       	adc	r31, r31
    5c40:	ee 0f       	add	r30, r30
    5c42:	ff 1f       	adc	r31, r31
    5c44:	e7 5b       	subi	r30, 0xB7	; 183
    5c46:	fd 4f       	sbci	r31, 0xFD	; 253
    5c48:	41 81       	ldd	r20, Z+1	; 0x01
    5c4a:	48 23       	and	r20, r24
    5c4c:	81 f0       	breq	.+32     	; 0x5c6e <get_RegisterStatus+0x62>
    5c4e:	22 0f       	add	r18, r18
    5c50:	33 1f       	adc	r19, r19
    5c52:	22 0f       	add	r18, r18
    5c54:	33 1f       	adc	r19, r19
    5c56:	22 0f       	add	r18, r18
    5c58:	33 1f       	adc	r19, r19
    5c5a:	f9 01       	movw	r30, r18
    5c5c:	e7 5b       	subi	r30, 0xB7	; 183
    5c5e:	fd 4f       	sbci	r31, 0xFD	; 253
    5c60:	96 81       	ldd	r25, Z+6	; 0x06
    5c62:	89 23       	and	r24, r25
    5c64:	39 f0       	breq	.+14     	; 0x5c74 <get_RegisterStatus+0x68>
    5c66:	81 e0       	ldi	r24, 0x01	; 1
    5c68:	08 95       	ret
    5c6a:	80 e0       	ldi	r24, 0x00	; 0
    5c6c:	08 95       	ret
    5c6e:	82 e0       	ldi	r24, 0x02	; 2
    5c70:	08 95       	ret
    5c72:	80 e0       	ldi	r24, 0x00	; 0
    5c74:	08 95       	ret

00005c76 <count_Registers>:
    5c76:	1f 93       	push	r17
    5c78:	cf 93       	push	r28
    5c7a:	df 93       	push	r29
    5c7c:	18 2f       	mov	r17, r24
    5c7e:	c0 e0       	ldi	r28, 0x00	; 0
    5c80:	d0 e0       	ldi	r29, 0x00	; 0
    5c82:	06 c0       	rjmp	.+12     	; 0x5c90 <count_Registers+0x1a>
    5c84:	61 2f       	mov	r22, r17
    5c86:	8c 2f       	mov	r24, r28
    5c88:	7c df       	rcall	.-264    	; 0x5b82 <read_Register>
    5c8a:	81 11       	cpse	r24, r1
    5c8c:	df 5f       	subi	r29, 0xFF	; 255
    5c8e:	cf 5f       	subi	r28, 0xFF	; 255
    5c90:	c0 34       	cpi	r28, 0x40	; 64
    5c92:	c0 f3       	brcs	.-16     	; 0x5c84 <count_Registers+0xe>
    5c94:	8d 2f       	mov	r24, r29
    5c96:	df 91       	pop	r29
    5c98:	cf 91       	pop	r28
    5c9a:	1f 91       	pop	r17
    5c9c:	08 95       	ret

00005c9e <read_allRegister>:
    5c9e:	ef 92       	push	r14
    5ca0:	ff 92       	push	r15
    5ca2:	0f 93       	push	r16
    5ca4:	1f 93       	push	r17
    5ca6:	cf 93       	push	r28
    5ca8:	df 93       	push	r29
    5caa:	7c 01       	movw	r14, r24
    5cac:	c0 e0       	ldi	r28, 0x00	; 0
    5cae:	d0 e0       	ldi	r29, 0x00	; 0
    5cb0:	00 e0       	ldi	r16, 0x00	; 0
    5cb2:	17 c0       	rjmp	.+46     	; 0x5ce2 <read_allRegister+0x44>
    5cb4:	1c 2f       	mov	r17, r28
    5cb6:	17 70       	andi	r17, 0x07	; 7
    5cb8:	09 f4       	brne	.+2      	; 0x5cbc <read_allRegister+0x1e>
    5cba:	d0 e0       	ldi	r29, 0x00	; 0
    5cbc:	d6 95       	lsr	r29
    5cbe:	63 e0       	ldi	r22, 0x03	; 3
    5cc0:	8c 2f       	mov	r24, r28
    5cc2:	5f df       	rcall	.-322    	; 0x5b82 <read_Register>
    5cc4:	88 23       	and	r24, r24
    5cc6:	11 f0       	breq	.+4      	; 0x5ccc <read_allRegister+0x2e>
    5cc8:	d0 68       	ori	r29, 0x80	; 128
    5cca:	0f 5f       	subi	r16, 0xFF	; 255
    5ccc:	17 30       	cpi	r17, 0x07	; 7
    5cce:	41 f4       	brne	.+16     	; 0x5ce0 <read_allRegister+0x42>
    5cd0:	e1 14       	cp	r14, r1
    5cd2:	f1 04       	cpc	r15, r1
    5cd4:	29 f0       	breq	.+10     	; 0x5ce0 <read_allRegister+0x42>
    5cd6:	f7 01       	movw	r30, r14
    5cd8:	d0 83       	st	Z, r29
    5cda:	c7 01       	movw	r24, r14
    5cdc:	01 96       	adiw	r24, 0x01	; 1
    5cde:	7c 01       	movw	r14, r24
    5ce0:	cf 5f       	subi	r28, 0xFF	; 255
    5ce2:	c0 34       	cpi	r28, 0x40	; 64
    5ce4:	38 f3       	brcs	.-50     	; 0x5cb4 <read_allRegister+0x16>
    5ce6:	80 2f       	mov	r24, r16
    5ce8:	df 91       	pop	r29
    5cea:	cf 91       	pop	r28
    5cec:	1f 91       	pop	r17
    5cee:	0f 91       	pop	r16
    5cf0:	ff 90       	pop	r15
    5cf2:	ef 90       	pop	r14
    5cf4:	08 95       	ret

00005cf6 <register_onOff>:
    5cf6:	cf 93       	push	r28
    5cf8:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5cfc:	89 17       	cp	r24, r25
    5cfe:	f0 f4       	brcc	.+60     	; 0x5d3c <register_onOff+0x46>
    5d00:	c6 2f       	mov	r28, r22
    5d02:	08 df       	rcall	.-496    	; 0x5b14 <regNr_to_moduleBit>
    5d04:	81 11       	cpse	r24, r1
    5d06:	1a c0       	rjmp	.+52     	; 0x5d3c <register_onOff+0x46>
    5d08:	89 2f       	mov	r24, r25
    5d0a:	8f 71       	andi	r24, 0x1F	; 31
    5d0c:	92 95       	swap	r25
    5d0e:	96 95       	lsr	r25
    5d10:	97 70       	andi	r25, 0x07	; 7
    5d12:	c0 ff       	sbrs	r28, 0
    5d14:	0a c0       	rjmp	.+20     	; 0x5d2a <register_onOff+0x34>
    5d16:	61 e0       	ldi	r22, 0x01	; 1
    5d18:	70 e0       	ldi	r23, 0x00	; 0
    5d1a:	02 c0       	rjmp	.+4      	; 0x5d20 <register_onOff+0x2a>
    5d1c:	66 0f       	add	r22, r22
    5d1e:	77 1f       	adc	r23, r23
    5d20:	9a 95       	dec	r25
    5d22:	e2 f7       	brpl	.-8      	; 0x5d1c <register_onOff+0x26>
    5d24:	0e 94 ad 11 	call	0x235a	; 0x235a <pipe_on>
    5d28:	09 c0       	rjmp	.+18     	; 0x5d3c <register_onOff+0x46>
    5d2a:	61 e0       	ldi	r22, 0x01	; 1
    5d2c:	70 e0       	ldi	r23, 0x00	; 0
    5d2e:	02 c0       	rjmp	.+4      	; 0x5d34 <register_onOff+0x3e>
    5d30:	66 0f       	add	r22, r22
    5d32:	77 1f       	adc	r23, r23
    5d34:	9a 95       	dec	r25
    5d36:	e2 f7       	brpl	.-8      	; 0x5d30 <register_onOff+0x3a>
    5d38:	0e 94 bc 11 	call	0x2378	; 0x2378 <pipe_off>
    5d3c:	cf 91       	pop	r28
    5d3e:	08 95       	ret

00005d40 <midi_resetRegisters>:
		}
	}
}


void midi_resetRegisters(){
    5d40:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    5d42:	c0 e0       	ldi	r28, 0x00	; 0
    5d44:	04 c0       	rjmp	.+8      	; 0x5d4e <midi_resetRegisters+0xe>
		register_onOff(i,REGISTER_OFF);
    5d46:	60 e0       	ldi	r22, 0x00	; 0
    5d48:	8c 2f       	mov	r24, r28
    5d4a:	d5 df       	rcall	.-86     	; 0x5cf6 <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5d4c:	cf 5f       	subi	r28, 0xFF	; 255
    5d4e:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <registerCount>
    5d52:	c8 17       	cp	r28, r24
    5d54:	c0 f3       	brcs	.-16     	; 0x5d46 <midi_resetRegisters+0x6>
		register_onOff(i,REGISTER_OFF);
	}
}
    5d56:	cf 91       	pop	r28
    5d58:	08 95       	ret

00005d5a <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5d5a:	0f 93       	push	r16
    5d5c:	1f 93       	push	r17
    5d5e:	cf 93       	push	r28
    5d60:	df 93       	push	r29
    5d62:	c8 2f       	mov	r28, r24
    5d64:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5d66:	80 34       	cpi	r24, 0x40	; 64
    5d68:	90 f4       	brcc	.+36     	; 0x5d8e <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5d6a:	28 2f       	mov	r18, r24
    5d6c:	30 e0       	ldi	r19, 0x00	; 0
    5d6e:	c9 01       	movw	r24, r18
    5d70:	88 0f       	add	r24, r24
    5d72:	99 1f       	adc	r25, r25
    5d74:	22 0f       	add	r18, r18
    5d76:	33 1f       	adc	r19, r19
    5d78:	22 0f       	add	r18, r18
    5d7a:	33 1f       	adc	r19, r19
    5d7c:	22 0f       	add	r18, r18
    5d7e:	33 1f       	adc	r19, r19
    5d80:	82 0f       	add	r24, r18
    5d82:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5d84:	8c 59       	subi	r24, 0x9C	; 156
    5d86:	96 4f       	sbci	r25, 0xF6	; 246
    5d88:	8a df       	rcall	.-236    	; 0x5c9e <read_allRegister>
    5d8a:	18 2f       	mov	r17, r24
    5d8c:	01 c0       	rjmp	.+2      	; 0x5d90 <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5d8e:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5d90:	d0 e0       	ldi	r29, 0x00	; 0
    5d92:	13 de       	rcall	.-986    	; 0x59ba <getAllCouplers>
    5d94:	9e 01       	movw	r18, r28
    5d96:	22 0f       	add	r18, r18
    5d98:	33 1f       	adc	r19, r19
    5d9a:	cc 0f       	add	r28, r28
    5d9c:	dd 1f       	adc	r29, r29
    5d9e:	cc 0f       	add	r28, r28
    5da0:	dd 1f       	adc	r29, r29
    5da2:	cc 0f       	add	r28, r28
    5da4:	dd 1f       	adc	r29, r29
    5da6:	c2 0f       	add	r28, r18
    5da8:	d3 1f       	adc	r29, r19
    5daa:	cc 59       	subi	r28, 0x9C	; 156
    5dac:	d6 4f       	sbci	r29, 0xF6	; 246
    5dae:	99 87       	std	Y+9, r25	; 0x09
    5db0:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5db2:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5db4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <eeprom_UpdateProg>
	}
	return result;
}
    5db8:	81 2f       	mov	r24, r17
    5dba:	df 91       	pop	r29
    5dbc:	cf 91       	pop	r28
    5dbe:	1f 91       	pop	r17
    5dc0:	0f 91       	pop	r16
    5dc2:	08 95       	ret

00005dc4 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5dc4:	ff 92       	push	r15
    5dc6:	0f 93       	push	r16
    5dc8:	1f 93       	push	r17
    5dca:	cf 93       	push	r28
    5dcc:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	8c 01       	movw	r16, r24
    5dd2:	00 0f       	add	r16, r16
    5dd4:	11 1f       	adc	r17, r17
    5dd6:	88 0f       	add	r24, r24
    5dd8:	99 1f       	adc	r25, r25
    5dda:	88 0f       	add	r24, r24
    5ddc:	99 1f       	adc	r25, r25
    5dde:	88 0f       	add	r24, r24
    5de0:	99 1f       	adc	r25, r25
    5de2:	08 0f       	add	r16, r24
    5de4:	19 1f       	adc	r17, r25
    5de6:	0c 59       	subi	r16, 0x9C	; 156
    5de8:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5dea:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5dec:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5dee:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5df0:	15 c0       	rjmp	.+42     	; 0x5e1c <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5df2:	9c 2f       	mov	r25, r28
    5df4:	97 70       	andi	r25, 0x07	; 7
    5df6:	21 f4       	brne	.+8      	; 0x5e00 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5df8:	f8 01       	movw	r30, r16
    5dfa:	d0 81       	ld	r29, Z
    5dfc:	0f 5f       	subi	r16, 0xFF	; 255
    5dfe:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5e00:	8c 2f       	mov	r24, r28
    5e02:	04 df       	rcall	.-504    	; 0x5c0c <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5e04:	d0 ff       	sbrs	r29, 0
    5e06:	03 c0       	rjmp	.+6      	; 0x5e0e <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5e08:	82 30       	cpi	r24, 0x02	; 2
    5e0a:	31 f0       	breq	.+12     	; 0x5e18 <midi_RegisterMatchProgram+0x54>
    5e0c:	0d c0       	rjmp	.+26     	; 0x5e28 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5e0e:	82 30       	cpi	r24, 0x02	; 2
    5e10:	69 f0       	breq	.+26     	; 0x5e2c <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5e12:	81 30       	cpi	r24, 0x01	; 1
    5e14:	09 f4       	brne	.+2      	; 0x5e18 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5e16:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5e18:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5e1a:	cf 5f       	subi	r28, 0xFF	; 255
    5e1c:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5e20:	c9 17       	cp	r28, r25
    5e22:	38 f3       	brcs	.-50     	; 0x5df2 <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5e24:	8f 2d       	mov	r24, r15
    5e26:	03 c0       	rjmp	.+6      	; 0x5e2e <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5e28:	8f ef       	ldi	r24, 0xFF	; 255
    5e2a:	01 c0       	rjmp	.+2      	; 0x5e2e <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5e2c:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5e2e:	df 91       	pop	r29
    5e30:	cf 91       	pop	r28
    5e32:	1f 91       	pop	r17
    5e34:	0f 91       	pop	r16
    5e36:	ff 90       	pop	r15
    5e38:	08 95       	ret

00005e3a <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5e3a:	90 e0       	ldi	r25, 0x00	; 0
    5e3c:	fc 01       	movw	r30, r24
    5e3e:	ee 0f       	add	r30, r30
    5e40:	ff 1f       	adc	r31, r31
    5e42:	88 0f       	add	r24, r24
    5e44:	99 1f       	adc	r25, r25
    5e46:	88 0f       	add	r24, r24
    5e48:	99 1f       	adc	r25, r25
    5e4a:	88 0f       	add	r24, r24
    5e4c:	99 1f       	adc	r25, r25
    5e4e:	e8 0f       	add	r30, r24
    5e50:	f9 1f       	adc	r31, r25
    5e52:	ec 59       	subi	r30, 0x9C	; 156
    5e54:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5e56:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5e58:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    5e5a:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5e5c:	09 c0       	rjmp	.+18     	; 0x5e70 <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    5e5e:	39 2f       	mov	r19, r25
    5e60:	37 70       	andi	r19, 0x07	; 7
    5e62:	11 f4       	brne	.+4      	; 0x5e68 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    5e64:	20 81       	ld	r18, Z
    5e66:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    5e68:	20 fd       	sbrc	r18, 0
			result++;
    5e6a:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    5e6c:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5e6e:	9f 5f       	subi	r25, 0xFF	; 255
    5e70:	30 91 10 08 	lds	r19, 0x0810	; 0x800810 <registerCount>
    5e74:	93 17       	cp	r25, r19
    5e76:	98 f3       	brcs	.-26     	; 0x5e5e <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    5e78:	08 95       	ret

00005e7a <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    5e7a:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <prog_Display>
    5e7e:	98 17       	cp	r25, r24
    5e80:	29 f0       	breq	.+10     	; 0x5e8c <prog_set+0x12>
		prog_Display = prog;
    5e82:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
		prog_UpdDisplay = TRUE;
    5e86:	8f ef       	ldi	r24, 0xFF	; 255
    5e88:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    5e8c:	08 95       	ret

00005e8e <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    5e8e:	bf 92       	push	r11
    5e90:	cf 92       	push	r12
    5e92:	df 92       	push	r13
    5e94:	ef 92       	push	r14
    5e96:	ff 92       	push	r15
    5e98:	0f 93       	push	r16
    5e9a:	1f 93       	push	r17
    5e9c:	cf 93       	push	r28
    5e9e:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    5ea0:	80 34       	cpi	r24, 0x40	; 64
    5ea2:	08 f0       	brcs	.+2      	; 0x5ea6 <program_toRegister+0x18>
    5ea4:	41 c0       	rjmp	.+130    	; 0x5f28 <program_toRegister+0x9a>
    5ea6:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    5ea8:	e8 df       	rcall	.-48     	; 0x5e7a <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5eaa:	f1 2c       	mov	r15, r1
    5eac:	f7 01       	movw	r30, r14
    5eae:	ee 0f       	add	r30, r30
    5eb0:	ff 1f       	adc	r31, r31
    5eb2:	c7 01       	movw	r24, r14
    5eb4:	88 0f       	add	r24, r24
    5eb6:	99 1f       	adc	r25, r25
    5eb8:	88 0f       	add	r24, r24
    5eba:	99 1f       	adc	r25, r25
    5ebc:	88 0f       	add	r24, r24
    5ebe:	99 1f       	adc	r25, r25
    5ec0:	e8 0f       	add	r30, r24
    5ec2:	f9 1f       	adc	r31, r25
    5ec4:	ec 59       	subi	r30, 0x9C	; 156
    5ec6:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5ec8:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    5eca:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5ecc:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5ece:	18 c0       	rjmp	.+48     	; 0x5f00 <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5ed0:	6f 01       	movw	r12, r30
    5ed2:	8f ef       	ldi	r24, 0xFF	; 255
    5ed4:	c8 1a       	sub	r12, r24
    5ed6:	d8 0a       	sbc	r13, r24
    5ed8:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5eda:	d0 e0       	ldi	r29, 0x00	; 0
    5edc:	0d c0       	rjmp	.+26     	; 0x5ef8 <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    5ede:	8c 2f       	mov	r24, r28
    5ee0:	81 70       	andi	r24, 0x01	; 1
    5ee2:	c0 fd       	sbrc	r28, 0
					result++;
    5ee4:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    5ee6:	61 e0       	ldi	r22, 0x01	; 1
    5ee8:	81 11       	cpse	r24, r1
    5eea:	01 c0       	rjmp	.+2      	; 0x5eee <program_toRegister+0x60>
    5eec:	60 e0       	ldi	r22, 0x00	; 0
    5eee:	81 2f       	mov	r24, r17
    5ef0:	02 df       	rcall	.-508    	; 0x5cf6 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    5ef2:	c6 95       	lsr	r28
				regNr++;
    5ef4:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5ef6:	df 5f       	subi	r29, 0xFF	; 255
    5ef8:	d8 30       	cpi	r29, 0x08	; 8
    5efa:	88 f3       	brcs	.-30     	; 0x5ede <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5efc:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5efe:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5f00:	87 e0       	ldi	r24, 0x07	; 7
    5f02:	8b 15       	cp	r24, r11
    5f04:	28 f7       	brcc	.-54     	; 0x5ed0 <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    5f06:	f7 01       	movw	r30, r14
    5f08:	ee 0f       	add	r30, r30
    5f0a:	ff 1f       	adc	r31, r31
    5f0c:	ee 0c       	add	r14, r14
    5f0e:	ff 1c       	adc	r15, r15
    5f10:	ee 0c       	add	r14, r14
    5f12:	ff 1c       	adc	r15, r15
    5f14:	ee 0c       	add	r14, r14
    5f16:	ff 1c       	adc	r15, r15
    5f18:	ee 0d       	add	r30, r14
    5f1a:	ff 1d       	adc	r31, r15
    5f1c:	ec 59       	subi	r30, 0x9C	; 156
    5f1e:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    5f20:	80 85       	ldd	r24, Z+8	; 0x08
    5f22:	91 85       	ldd	r25, Z+9	; 0x09
    5f24:	62 dd       	rcall	.-1340   	; 0x59ea <setAllCouplers>
    5f26:	01 c0       	rjmp	.+2      	; 0x5f2a <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5f28:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    5f2a:	80 2f       	mov	r24, r16
    5f2c:	df 91       	pop	r29
    5f2e:	cf 91       	pop	r28
    5f30:	1f 91       	pop	r17
    5f32:	0f 91       	pop	r16
    5f34:	ff 90       	pop	r15
    5f36:	ef 90       	pop	r14
    5f38:	df 90       	pop	r13
    5f3a:	cf 90       	pop	r12
    5f3c:	bf 90       	pop	r11
    5f3e:	08 95       	ret

00005f40 <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    5f40:	cf 93       	push	r28
    5f42:	df 93       	push	r29
    5f44:	c8 2f       	mov	r28, r24
    5f46:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    5f48:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <midi_Setting+0x2>
    5f4c:	81 11       	cpse	r24, r1
    5f4e:	14 c0       	rjmp	.+40     	; 0x5f78 <midi_ProgramChange+0x38>
    5f50:	1f c0       	rjmp	.+62     	; 0x5f90 <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    5f52:	ec 2f       	mov	r30, r28
    5f54:	f0 e0       	ldi	r31, 0x00	; 0
    5f56:	ee 0f       	add	r30, r30
    5f58:	ff 1f       	adc	r31, r31
    5f5a:	ee 0f       	add	r30, r30
    5f5c:	ff 1f       	adc	r31, r31
    5f5e:	e8 0f       	add	r30, r24
    5f60:	f1 1d       	adc	r31, r1
    5f62:	ee 0f       	add	r30, r30
    5f64:	ff 1f       	adc	r31, r31
    5f66:	ee 0f       	add	r30, r30
    5f68:	ff 1f       	adc	r31, r31
    5f6a:	e8 5d       	subi	r30, 0xD8	; 216
    5f6c:	f7 4f       	sbci	r31, 0xF7	; 247
    5f6e:	90 81       	ld	r25, Z
    5f70:	9f 3f       	cpi	r25, 0xFF	; 255
    5f72:	39 f4       	brne	.+14     	; 0x5f82 <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    5f74:	8f 5f       	subi	r24, 0xFF	; 255
    5f76:	01 c0       	rjmp	.+2      	; 0x5f7a <midi_ProgramChange+0x3a>
    5f78:	80 e0       	ldi	r24, 0x00	; 0
    5f7a:	84 30       	cpi	r24, 0x04	; 4
    5f7c:	50 f3       	brcs	.-44     	; 0x5f52 <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    5f7e:	80 e0       	ldi	r24, 0x00	; 0
    5f80:	01 c0       	rjmp	.+2      	; 0x5f84 <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    5f82:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    5f84:	8f 3f       	cpi	r24, 0xFF	; 255
    5f86:	21 f4       	brne	.+8      	; 0x5f90 <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    5f88:	8d 2f       	mov	r24, r29
    5f8a:	81 df       	rcall	.-254    	; 0x5e8e <program_toRegister>
			midiLastProgram = program;
    5f8c:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    5f90:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    5f94:	c8 13       	cpse	r28, r24
    5f96:	08 c0       	rjmp	.+16     	; 0x5fa8 <midi_ProgramChange+0x68>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    5f98:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    5f9c:	8f 3f       	cpi	r24, 0xFF	; 255
    5f9e:	21 f0       	breq	.+8      	; 0x5fa8 <midi_ProgramChange+0x68>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    5fa0:	80 6c       	ori	r24, 0xC0	; 192
    5fa2:	20 d6       	rcall	.+3136   	; 0x6be4 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    5fa4:	8d 2f       	mov	r24, r29
    5fa6:	1e d6       	rcall	.+3132   	; 0x6be4 <serial1MIDISend>
    5fa8:	df 91       	pop	r29
		}
	}
}
    5faa:	cf 91       	pop	r28
    5fac:	08 95       	ret

00005fae <prog_toLcd>:
    5fae:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display != PROGR_NONE) {
    5fb2:	8f 3f       	cpi	r24, 0xFF	; 255
    5fb4:	b1 f0       	breq	.+44     	; 0x5fe2 <prog_toLcd+0x34>
		lcd_putc('P');
    5fb6:	80 e5       	ldi	r24, 0x50	; 80
    5fb8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
		lcd_putc(':');
    5fbc:	8a e3       	ldi	r24, 0x3A	; 58
    5fbe:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    5fc2:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    5fc6:	87 70       	andi	r24, 0x07	; 7
    5fc8:	8f 5c       	subi	r24, 0xCF	; 207
    5fca:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    5fce:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    5fd2:	86 95       	lsr	r24
    5fd4:	86 95       	lsr	r24
    5fd6:	86 95       	lsr	r24
    5fd8:	87 70       	andi	r24, 0x07	; 7
    5fda:	8f 5b       	subi	r24, 0xBF	; 191
    5fdc:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <lcd_putc>
    5fe0:	08 95       	ret
	} else {
		lcd_blank(4);
    5fe2:	84 e0       	ldi	r24, 0x04	; 4
    5fe4:	0c 94 a3 3a 	jmp	0x7546	; 0x7546 <lcd_blank>
    5fe8:	08 95       	ret

00005fea <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5fea:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    5fec:	e8 e2       	ldi	r30, 0x28	; 40
    5fee:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5ff0:	07 c0       	rjmp	.+14     	; 0x6000 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    5ff2:	8f ef       	ldi	r24, 0xFF	; 255
    5ff4:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    5ff6:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    5ff8:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    5ffa:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    5ffc:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5ffe:	91 50       	subi	r25, 0x01	; 1
    6000:	91 11       	cpse	r25, r1
    6002:	f7 cf       	rjmp	.-18     	; 0x5ff2 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    6004:	0e 94 42 0a 	call	0x1484	; 0x1484 <eeprom_ReadMidiInMap>
    6008:	8f 3f       	cpi	r24, 0xFF	; 255
    600a:	01 f5       	brne	.+64     	; 0x604c <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    600c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    6010:	e8 e2       	ldi	r30, 0x28	; 40
    6012:	f8 e0       	ldi	r31, 0x08	; 8
    6014:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    6016:	84 e2       	ldi	r24, 0x24	; 36
    6018:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    601a:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    601c:	98 e3       	ldi	r25, 0x38	; 56
    601e:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    6020:	21 e0       	ldi	r18, 0x01	; 1
    6022:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    6024:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    6026:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6028:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    602a:	22 e0       	ldi	r18, 0x02	; 2
    602c:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    602e:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    6030:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6032:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    6034:	93 e0       	ldi	r25, 0x03	; 3
    6036:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    6038:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    603a:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    603c:	8e e1       	ldi	r24, 0x1E	; 30
    603e:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6040:	40 e0       	ldi	r20, 0x00	; 0
    6042:	50 e0       	ldi	r21, 0x00	; 0
    6044:	61 e0       	ldi	r22, 0x01	; 1
    6046:	81 e0       	ldi	r24, 0x01	; 1
    6048:	0e 94 fd 14 	call	0x29fa	; 0x29fa <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    604c:	0e 94 c6 0a 	call	0x158c	; 0x158c <eeprom_ReadMidiThrough>
    6050:	8f 3f       	cpi	r24, 0xFF	; 255
    6052:	51 f4       	brne	.+20     	; 0x6068 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    6054:	e6 e2       	ldi	r30, 0x26	; 38
    6056:	f8 e0       	ldi	r31, 0x08	; 8
    6058:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    605a:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    605c:	40 e0       	ldi	r20, 0x00	; 0
    605e:	50 e0       	ldi	r21, 0x00	; 0
    6060:	61 e0       	ldi	r22, 0x01	; 1
    6062:	81 e0       	ldi	r24, 0x01	; 1
    6064:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <log_putError>
    6068:	08 95       	ret

0000606a <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    606a:	20 e0       	ldi	r18, 0x00	; 0
    606c:	09 c0       	rjmp	.+18     	; 0x6080 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    606e:	88 0f       	add	r24, r24
    6070:	99 1f       	adc	r25, r25
    6072:	fc 01       	movw	r30, r24
    6074:	e8 5d       	subi	r30, 0xD8	; 216
    6076:	f6 4f       	sbci	r31, 0xF6	; 246
    6078:	8f ef       	ldi	r24, 0xFF	; 255
    607a:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    607c:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    607e:	2f 5f       	subi	r18, 0xFF	; 255
    6080:	82 2f       	mov	r24, r18
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	00 97       	sbiw	r24, 0x00	; 0
    6086:	99 f7       	brne	.-26     	; 0x606e <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    6088:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <eeprom_ReadMidiOutMap>
    608c:	8f 3f       	cpi	r24, 0xFF	; 255
    608e:	b1 f4       	brne	.+44     	; 0x60bc <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6090:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    6094:	e8 e2       	ldi	r30, 0x28	; 40
    6096:	f9 e0       	ldi	r31, 0x09	; 9
    6098:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    609a:	91 e0       	ldi	r25, 0x01	; 1
    609c:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    609e:	92 e0       	ldi	r25, 0x02	; 2
    60a0:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    60a2:	93 e0       	ldi	r25, 0x03	; 3
    60a4:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    60a6:	e0 e3       	ldi	r30, 0x30	; 48
    60a8:	f9 e0       	ldi	r31, 0x09	; 9
    60aa:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    60ac:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    60ae:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    60b0:	40 e0       	ldi	r20, 0x00	; 0
    60b2:	50 e0       	ldi	r21, 0x00	; 0
    60b4:	62 e0       	ldi	r22, 0x02	; 2
    60b6:	81 e0       	ldi	r24, 0x01	; 1
    60b8:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <log_putError>
    60bc:	08 95       	ret

000060be <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    60be:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    60c0:	8f ef       	ldi	r24, 0xFF	; 255
    60c2:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    60c4:	e4 30       	cpi	r30, 0x04	; 4
    60c6:	50 f4       	brcc	.+20     	; 0x60dc <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    60c8:	f0 e0       	ldi	r31, 0x00	; 0
    60ca:	ee 0f       	add	r30, r30
    60cc:	ff 1f       	adc	r31, r31
    60ce:	e8 5d       	subi	r30, 0xD8	; 216
    60d0:	f6 4f       	sbci	r31, 0xF6	; 246
    60d2:	20 81       	ld	r18, Z
    60d4:	2f 3f       	cpi	r18, 0xFF	; 255
    60d6:	11 f0       	breq	.+4      	; 0x60dc <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    60d8:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    60da:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    60dc:	08 95       	ret

000060de <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    60de:	70 e0       	ldi	r23, 0x00	; 0
    60e0:	52 c0       	rjmp	.+164    	; 0x6186 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    60e2:	87 2f       	mov	r24, r23
    60e4:	90 e0       	ldi	r25, 0x00	; 0
    60e6:	24 2f       	mov	r18, r20
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	f9 01       	movw	r30, r18
    60ec:	ee 0f       	add	r30, r30
    60ee:	ff 1f       	adc	r31, r31
    60f0:	df 01       	movw	r26, r30
    60f2:	a2 0f       	add	r26, r18
    60f4:	b3 1f       	adc	r27, r19
    60f6:	fc 01       	movw	r30, r24
    60f8:	ee 0f       	add	r30, r30
    60fa:	ff 1f       	adc	r31, r31
    60fc:	e8 0f       	add	r30, r24
    60fe:	f9 1f       	adc	r31, r25
    6100:	ee 0f       	add	r30, r30
    6102:	ff 1f       	adc	r31, r31
    6104:	ee 0f       	add	r30, r30
    6106:	ff 1f       	adc	r31, r31
    6108:	ea 0f       	add	r30, r26
    610a:	fb 1f       	adc	r31, r27
    610c:	ec 5c       	subi	r30, 0xCC	; 204
    610e:	f6 4f       	sbci	r31, 0xF6	; 246
    6110:	a0 81       	ld	r26, Z
    6112:	af 3f       	cpi	r26, 0xFF	; 255
    6114:	d9 f0       	breq	.+54     	; 0x614c <Midi_updateManualRange+0x6e>
    6116:	f9 01       	movw	r30, r18
    6118:	ee 0f       	add	r30, r30
    611a:	ff 1f       	adc	r31, r31
    611c:	e2 0f       	add	r30, r18
    611e:	f3 1f       	adc	r31, r19
    6120:	9c 01       	movw	r18, r24
    6122:	22 0f       	add	r18, r18
    6124:	33 1f       	adc	r19, r19
    6126:	28 0f       	add	r18, r24
    6128:	39 1f       	adc	r19, r25
    612a:	22 0f       	add	r18, r18
    612c:	33 1f       	adc	r19, r19
    612e:	22 0f       	add	r18, r18
    6130:	33 1f       	adc	r19, r19
    6132:	e2 0f       	add	r30, r18
    6134:	f3 1f       	adc	r31, r19
    6136:	ec 5c       	subi	r30, 0xCC	; 204
    6138:	f6 4f       	sbci	r31, 0xF6	; 246
    613a:	21 81       	ldd	r18, Z+1	; 0x01
    613c:	2f 3f       	cpi	r18, 0xFF	; 255
    613e:	31 f0       	breq	.+12     	; 0x614c <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6140:	a6 17       	cp	r26, r22
    6142:	08 f4       	brcc	.+2      	; 0x6146 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    6144:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    6146:	52 17       	cp	r21, r18
    6148:	08 f4       	brcc	.+2      	; 0x614c <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    614a:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    614c:	55 23       	and	r21, r21
    614e:	11 f0       	breq	.+4      	; 0x6154 <Midi_updateManualRange+0x76>
    6150:	6f 3f       	cpi	r22, 0xFF	; 255
    6152:	49 f4       	brne	.+18     	; 0x6166 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    6154:	88 0f       	add	r24, r24
    6156:	99 1f       	adc	r25, r25
    6158:	fc 01       	movw	r30, r24
    615a:	e2 5e       	subi	r30, 0xE2	; 226
    615c:	f7 4f       	sbci	r31, 0xF7	; 247
    615e:	8f ef       	ldi	r24, 0xFF	; 255
    6160:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    6162:	81 83       	std	Z+1, r24	; 0x01
    6164:	07 c0       	rjmp	.+14     	; 0x6174 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    6166:	88 0f       	add	r24, r24
    6168:	99 1f       	adc	r25, r25
    616a:	fc 01       	movw	r30, r24
    616c:	e2 5e       	subi	r30, 0xE2	; 226
    616e:	f7 4f       	sbci	r31, 0xF7	; 247
    6170:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    6172:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    6174:	4f 5f       	subi	r20, 0xFF	; 255
    6176:	03 c0       	rjmp	.+6      	; 0x617e <Midi_updateManualRange+0xa0>
    6178:	40 e0       	ldi	r20, 0x00	; 0
    617a:	6f ef       	ldi	r22, 0xFF	; 255
    617c:	50 e0       	ldi	r21, 0x00	; 0
    617e:	44 30       	cpi	r20, 0x04	; 4
    6180:	08 f4       	brcc	.+2      	; 0x6184 <Midi_updateManualRange+0xa6>
    6182:	af cf       	rjmp	.-162    	; 0x60e2 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6184:	7f 5f       	subi	r23, 0xFF	; 255
    6186:	74 30       	cpi	r23, 0x04	; 4
    6188:	b8 f3       	brcs	.-18     	; 0x6178 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    618a:	08 95       	ret

0000618c <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    618c:	63 e0       	ldi	r22, 0x03	; 3
    618e:	28 c0       	rjmp	.+80     	; 0x61e0 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    6190:	86 2f       	mov	r24, r22
    6192:	06 2e       	mov	r0, r22
    6194:	00 0c       	add	r0, r0
    6196:	99 0b       	sbc	r25, r25
    6198:	42 2f       	mov	r20, r18
    619a:	02 2e       	mov	r0, r18
    619c:	00 0c       	add	r0, r0
    619e:	55 0b       	sbc	r21, r21
    61a0:	fa 01       	movw	r30, r20
    61a2:	ee 0f       	add	r30, r30
    61a4:	ff 1f       	adc	r31, r31
    61a6:	e4 0f       	add	r30, r20
    61a8:	f5 1f       	adc	r31, r21
    61aa:	ac 01       	movw	r20, r24
    61ac:	44 0f       	add	r20, r20
    61ae:	55 1f       	adc	r21, r21
    61b0:	da 01       	movw	r26, r20
    61b2:	a8 0f       	add	r26, r24
    61b4:	b9 1f       	adc	r27, r25
    61b6:	aa 0f       	add	r26, r26
    61b8:	bb 1f       	adc	r27, r27
    61ba:	aa 0f       	add	r26, r26
    61bc:	bb 1f       	adc	r27, r27
    61be:	ae 0f       	add	r26, r30
    61c0:	bf 1f       	adc	r27, r31
    61c2:	ac 5c       	subi	r26, 0xCC	; 204
    61c4:	b6 4f       	sbci	r27, 0xF6	; 246
    61c6:	3f ef       	ldi	r19, 0xFF	; 255
    61c8:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    61ca:	11 96       	adiw	r26, 0x01	; 1
    61cc:	3c 93       	st	X, r19
    61ce:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    61d0:	fd 01       	movw	r30, r26
    61d2:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    61d4:	21 50       	subi	r18, 0x01	; 1
    61d6:	01 c0       	rjmp	.+2      	; 0x61da <init_Manual2Module+0x4e>
    61d8:	23 e0       	ldi	r18, 0x03	; 3
    61da:	22 23       	and	r18, r18
    61dc:	cc f6       	brge	.-78     	; 0x6190 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    61de:	61 50       	subi	r22, 0x01	; 1
    61e0:	66 23       	and	r22, r22
    61e2:	d4 f7       	brge	.-12     	; 0x61d8 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    61e4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <eeprom_ReadManualMap>
    61e8:	8f 3f       	cpi	r24, 0xFF	; 255
    61ea:	79 f5       	brne	.+94     	; 0x624a <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    61ec:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    61f0:	40 e0       	ldi	r20, 0x00	; 0
    61f2:	50 e0       	ldi	r21, 0x00	; 0
    61f4:	63 e0       	ldi	r22, 0x03	; 3
    61f6:	81 e0       	ldi	r24, 0x01	; 1
    61f8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    61fc:	e4 e3       	ldi	r30, 0x34	; 52
    61fe:	f9 e0       	ldi	r31, 0x09	; 9
    6200:	84 e2       	ldi	r24, 0x24	; 36
    6202:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    6204:	33 e4       	ldi	r19, 0x43	; 67
    6206:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    6208:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    620a:	24 e4       	ldi	r18, 0x44	; 68
    620c:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    620e:	9b e5       	ldi	r25, 0x5B	; 91
    6210:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    6212:	40 e2       	ldi	r20, 0x20	; 32
    6214:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    6216:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    6218:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    621a:	40 e4       	ldi	r20, 0x40	; 64
    621c:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    621e:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6220:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6222:	40 e6       	ldi	r20, 0x60	; 96
    6224:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    6226:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    6228:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    622a:	30 e8       	ldi	r19, 0x80	; 128
    622c:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    622e:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6230:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6232:	90 ea       	ldi	r25, 0xA0	; 160
    6234:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    6236:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    6238:	81 e4       	ldi	r24, 0x41	; 65
    623a:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    623c:	80 ec       	ldi	r24, 0xC0	; 192
    623e:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6240:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    6242:	8d e1       	ldi	r24, 0x1D	; 29
    6244:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    6246:	80 ee       	ldi	r24, 0xE0	; 224
    6248:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    624a:	49 cf       	rjmp	.-366    	; 0x60de <Midi_updateManualRange>
    624c:	08 95       	ret

0000624e <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    624e:	84 30       	cpi	r24, 0x04	; 4
    6250:	d8 f4       	brcc	.+54     	; 0x6288 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    6252:	90 e0       	ldi	r25, 0x00	; 0
    6254:	fc 01       	movw	r30, r24
    6256:	ee 0f       	add	r30, r30
    6258:	ff 1f       	adc	r31, r31
    625a:	e8 0f       	add	r30, r24
    625c:	f9 1f       	adc	r31, r25
    625e:	ee 0f       	add	r30, r30
    6260:	ff 1f       	adc	r31, r31
    6262:	ee 0f       	add	r30, r30
    6264:	ff 1f       	adc	r31, r31
    6266:	ec 5c       	subi	r30, 0xCC	; 204
    6268:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    626a:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    626c:	20 81       	ld	r18, Z
    626e:	62 17       	cp	r22, r18
    6270:	40 f0       	brcs	.+16     	; 0x6282 <manualNote_to_moduleBit+0x34>
    6272:	91 81       	ldd	r25, Z+1	; 0x01
    6274:	96 17       	cp	r25, r22
    6276:	28 f0       	brcs	.+10     	; 0x6282 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6278:	92 81       	ldd	r25, Z+2	; 0x02
    627a:	62 1b       	sub	r22, r18
				return (result);
    627c:	80 e0       	ldi	r24, 0x00	; 0
    627e:	96 0f       	add	r25, r22
    6280:	08 95       	ret
			}
			pRange++;
    6282:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    6284:	81 50       	subi	r24, 0x01	; 1
    6286:	91 f7       	brne	.-28     	; 0x626c <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    6288:	8f ef       	ldi	r24, 0xFF	; 255
    628a:	90 e0       	ldi	r25, 0x00	; 0
}
    628c:	08 95       	ret

0000628e <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    628e:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6290:	e4 e3       	ldi	r30, 0x34	; 52
    6292:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6294:	44 e0       	ldi	r20, 0x04	; 4
    6296:	16 c0       	rjmp	.+44     	; 0x62c4 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    6298:	52 81       	ldd	r21, Z+2	; 0x02
    629a:	85 17       	cp	r24, r21
    629c:	88 f0       	brcs	.+34     	; 0x62c0 <moduleBit_to_manualNote+0x32>
    629e:	68 2f       	mov	r22, r24
    62a0:	70 e0       	ldi	r23, 0x00	; 0
    62a2:	21 81       	ldd	r18, Z+1	; 0x01
    62a4:	a0 81       	ld	r26, Z
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	2a 1b       	sub	r18, r26
    62aa:	31 09       	sbc	r19, r1
    62ac:	25 0f       	add	r18, r21
    62ae:	31 1d       	adc	r19, r1
    62b0:	26 17       	cp	r18, r22
    62b2:	37 07       	cpc	r19, r23
    62b4:	2c f0       	brlt	.+10     	; 0x62c0 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    62b6:	98 2f       	mov	r25, r24
    62b8:	95 1b       	sub	r25, r21
				return(result);
    62ba:	8b 2f       	mov	r24, r27
    62bc:	9a 0f       	add	r25, r26
    62be:	08 95       	ret
			}
			pRange++;
    62c0:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    62c2:	41 50       	subi	r20, 0x01	; 1
    62c4:	41 11       	cpse	r20, r1
    62c6:	e8 cf       	rjmp	.-48     	; 0x6298 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    62c8:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    62ca:	b5 30       	cpi	r27, 0x05	; 5
    62cc:	18 f3       	brcs	.-58     	; 0x6294 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    62ce:	8f ef       	ldi	r24, 0xFF	; 255
    62d0:	90 e0       	ldi	r25, 0x00	; 0
}
    62d2:	08 95       	ret

000062d4 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    62d4:	ef 92       	push	r14
    62d6:	ff 92       	push	r15
    62d8:	0f 93       	push	r16
    62da:	1f 93       	push	r17
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
    62e0:	c8 2f       	mov	r28, r24
    62e2:	06 2f       	mov	r16, r22
    62e4:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    62e6:	b3 df       	rcall	.-154    	; 0x624e <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    62e8:	49 2f       	mov	r20, r25
    62ea:	42 95       	swap	r20
    62ec:	46 95       	lsr	r20
    62ee:	47 70       	andi	r20, 0x07	; 7
    62f0:	21 e0       	ldi	r18, 0x01	; 1
    62f2:	30 e0       	ldi	r19, 0x00	; 0
    62f4:	79 01       	movw	r14, r18
    62f6:	02 c0       	rjmp	.+4      	; 0x62fc <manual_NoteOnOff+0x28>
    62f8:	ee 0c       	add	r14, r14
    62fa:	ff 1c       	adc	r15, r15
    62fc:	4a 95       	dec	r20
    62fe:	e2 f7       	brpl	.-8      	; 0x62f8 <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6300:	19 2f       	mov	r17, r25
    6302:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    6304:	81 11       	cpse	r24, r1
    6306:	1a c0       	rjmp	.+52     	; 0x633c <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    6308:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    630c:	8e 21       	and	r24, r14
    630e:	59 f4       	brne	.+22     	; 0x6326 <manual_NoteOnOff+0x52>
    6310:	dd 23       	and	r29, r29
    6312:	4c f0       	brlt	.+18     	; 0x6326 <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6314:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    6316:	d1 30       	cpi	r29, 0x01	; 1
    6318:	11 f4       	brne	.+4      	; 0x631e <manual_NoteOnOff+0x4a>
    631a:	90 e2       	ldi	r25, 0x20	; 32
    631c:	01 c0       	rjmp	.+2      	; 0x6320 <manual_NoteOnOff+0x4c>
    631e:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6320:	8e 2d       	mov	r24, r14
    6322:	91 2b       	or	r25, r17
    6324:	d7 da       	rcall	.-2642   	; 0x58d4 <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6326:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    6328:	29 f4       	brne	.+10     	; 0x6334 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    632a:	6e 2d       	mov	r22, r14
    632c:	81 2f       	mov	r24, r17
    632e:	0e 94 bc 11 	call	0x2378	; 0x2378 <pipe_off>
    6332:	04 c0       	rjmp	.+8      	; 0x633c <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6334:	6e 2d       	mov	r22, r14
    6336:	81 2f       	mov	r24, r17
    6338:	0e 94 ad 11 	call	0x235a	; 0x235a <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    633c:	ec 2f       	mov	r30, r28
    633e:	f0 e0       	ldi	r31, 0x00	; 0
    6340:	ee 0f       	add	r30, r30
    6342:	ff 1f       	adc	r31, r31
    6344:	e8 5d       	subi	r30, 0xD8	; 216
    6346:	f6 4f       	sbci	r31, 0xF6	; 246
    6348:	81 81       	ldd	r24, Z+1	; 0x01
    634a:	8f 3f       	cpi	r24, 0xFF	; 255
    634c:	a9 f0       	breq	.+42     	; 0x6378 <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    634e:	d1 30       	cpi	r29, 0x01	; 1
    6350:	31 f0       	breq	.+12     	; 0x635e <manual_NoteOnOff+0x8a>
    6352:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6356:	99 23       	and	r25, r25
    6358:	21 f0       	breq	.+8      	; 0x6362 <manual_NoteOnOff+0x8e>
    635a:	90 e9       	ldi	r25, 0x90	; 144
    635c:	03 c0       	rjmp	.+6      	; 0x6364 <manual_NoteOnOff+0x90>
    635e:	90 e9       	ldi	r25, 0x90	; 144
    6360:	01 c0       	rjmp	.+2      	; 0x6364 <manual_NoteOnOff+0x90>
    6362:	90 e8       	ldi	r25, 0x80	; 128
    6364:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    6366:	3e d4       	rcall	.+2172   	; 0x6be4 <serial1MIDISend>
    6368:	80 2f       	mov	r24, r16
    636a:	3c d4       	rcall	.+2168   	; 0x6be4 <serial1MIDISend>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    636c:	d1 11       	cpse	r29, r1
    636e:	02 c0       	rjmp	.+4      	; 0x6374 <manual_NoteOnOff+0xa0>
    6370:	80 e0       	ldi	r24, 0x00	; 0
    6372:	01 c0       	rjmp	.+2      	; 0x6376 <manual_NoteOnOff+0xa2>
    6374:	80 e4       	ldi	r24, 0x40	; 64
    6376:	36 d4       	rcall	.+2156   	; 0x6be4 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    6378:	df 91       	pop	r29
    637a:	cf 91       	pop	r28
    637c:	1f 91       	pop	r17
    637e:	0f 91       	pop	r16
    6380:	ff 90       	pop	r15
    6382:	ef 90       	pop	r14
    6384:	08 95       	ret

00006386 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    6386:	bf 92       	push	r11
    6388:	cf 92       	push	r12
    638a:	df 92       	push	r13
    638c:	ef 92       	push	r14
    638e:	ff 92       	push	r15
    6390:	0f 93       	push	r16
    6392:	1f 93       	push	r17
    6394:	cf 93       	push	r28
    6396:	df 93       	push	r29
    6398:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    639a:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    639c:	4c c0       	rjmp	.+152    	; 0x6436 <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    639e:	0c 2d       	mov	r16, r12
    63a0:	10 e0       	ldi	r17, 0x00	; 0
    63a2:	cd 2d       	mov	r28, r13
    63a4:	d0 e0       	ldi	r29, 0x00	; 0
    63a6:	f8 01       	movw	r30, r16
    63a8:	ee 0f       	add	r30, r30
    63aa:	ff 1f       	adc	r31, r31
    63ac:	ee 0f       	add	r30, r30
    63ae:	ff 1f       	adc	r31, r31
    63b0:	ec 0f       	add	r30, r28
    63b2:	fd 1f       	adc	r31, r29
    63b4:	ee 0f       	add	r30, r30
    63b6:	ff 1f       	adc	r31, r31
    63b8:	ee 0f       	add	r30, r30
    63ba:	ff 1f       	adc	r31, r31
    63bc:	e8 5d       	subi	r30, 0xD8	; 216
    63be:	f7 4f       	sbci	r31, 0xF7	; 247
    63c0:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    63c2:	83 e0       	ldi	r24, 0x03	; 3
    63c4:	8b 15       	cp	r24, r11
    63c6:	b0 f1       	brcs	.+108    	; 0x6434 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    63c8:	f8 01       	movw	r30, r16
    63ca:	ee 0f       	add	r30, r30
    63cc:	ff 1f       	adc	r31, r31
    63ce:	ee 0f       	add	r30, r30
    63d0:	ff 1f       	adc	r31, r31
    63d2:	ec 0f       	add	r30, r28
    63d4:	fd 1f       	adc	r31, r29
    63d6:	ee 0f       	add	r30, r30
    63d8:	ff 1f       	adc	r31, r31
    63da:	ee 0f       	add	r30, r30
    63dc:	ff 1f       	adc	r31, r31
    63de:	e8 5d       	subi	r30, 0xD8	; 216
    63e0:	f7 4f       	sbci	r31, 0xF7	; 247
    63e2:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    63e4:	f2 80       	ldd	r15, Z+2	; 0x02
    63e6:	15 c0       	rjmp	.+42     	; 0x6412 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    63e8:	ee 24       	eor	r14, r14
    63ea:	e3 94       	inc	r14
    63ec:	e6 0e       	add	r14, r22
    63ee:	f8 01       	movw	r30, r16
    63f0:	ee 0f       	add	r30, r30
    63f2:	ff 1f       	adc	r31, r31
    63f4:	ee 0f       	add	r30, r30
    63f6:	ff 1f       	adc	r31, r31
    63f8:	ec 0f       	add	r30, r28
    63fa:	fd 1f       	adc	r31, r29
    63fc:	ee 0f       	add	r30, r30
    63fe:	ff 1f       	adc	r31, r31
    6400:	ee 0f       	add	r30, r30
    6402:	ff 1f       	adc	r31, r31
    6404:	e8 5d       	subi	r30, 0xD8	; 216
    6406:	f7 4f       	sbci	r31, 0xF7	; 247
    6408:	40 e8       	ldi	r20, 0x80	; 128
    640a:	80 81       	ld	r24, Z
    640c:	63 df       	rcall	.-314    	; 0x62d4 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    640e:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6410:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6412:	f1 10       	cpse	r15, r1
    6414:	e9 cf       	rjmp	.-46     	; 0x63e8 <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6416:	eb 2d       	mov	r30, r11
    6418:	f0 e0       	ldi	r31, 0x00	; 0
    641a:	ee 0f       	add	r30, r30
    641c:	ff 1f       	adc	r31, r31
    641e:	e8 5d       	subi	r30, 0xD8	; 216
    6420:	f6 4f       	sbci	r31, 0xF6	; 246
    6422:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6424:	80 31       	cpi	r24, 0x10	; 16
    6426:	30 f4       	brcc	.+12     	; 0x6434 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6428:	80 6b       	ori	r24, 0xB0	; 176
    642a:	dc d3       	rcall	.+1976   	; 0x6be4 <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    642c:	8b e7       	ldi	r24, 0x7B	; 123
    642e:	da d3       	rcall	.+1972   	; 0x6be4 <serial1MIDISend>
				serial1MIDISend(0);
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	d8 d3       	rcall	.+1968   	; 0x6be4 <serial1MIDISend>
    6434:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    6436:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    6438:	8d 15       	cp	r24, r13
    643a:	08 f0       	brcs	.+2      	; 0x643e <midiAllNotesOff+0xb8>
    643c:	b0 cf       	rjmp	.-160    	; 0x639e <midiAllNotesOff+0x18>
    643e:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6440:	cf 91       	pop	r28
    6442:	1f 91       	pop	r17
    6444:	0f 91       	pop	r16
    6446:	ff 90       	pop	r15
    6448:	ef 90       	pop	r14
    644a:	df 90       	pop	r13
    644c:	cf 90       	pop	r12
    644e:	bf 90       	pop	r11
    6450:	08 95       	ret

00006452 <midi_ManualOff>:
    6452:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    645c:	84 30       	cpi	r24, 0x04	; 4
    645e:	00 f5       	brcc	.+64     	; 0x64a0 <midi_ManualOff+0x4e>
    6460:	08 2f       	mov	r16, r24
    6462:	10 e0       	ldi	r17, 0x00	; 0
    6464:	f8 01       	movw	r30, r16
    6466:	ee 0f       	add	r30, r30
    6468:	ff 1f       	adc	r31, r31
    646a:	e2 5e       	subi	r30, 0xE2	; 226
    646c:	f7 4f       	sbci	r31, 0xF7	; 247
    646e:	d0 81       	ld	r29, Z
    6470:	df 3f       	cpi	r29, 0xFF	; 255
    6472:	b1 f0       	breq	.+44     	; 0x64a0 <midi_ManualOff+0x4e>
    6474:	f8 01       	movw	r30, r16
    6476:	ee 0f       	add	r30, r30
    6478:	ff 1f       	adc	r31, r31
    647a:	e2 5e       	subi	r30, 0xE2	; 226
    647c:	f7 4f       	sbci	r31, 0xF7	; 247
    647e:	81 81       	ldd	r24, Z+1	; 0x01
    6480:	8f 3f       	cpi	r24, 0xFF	; 255
    6482:	31 f4       	brne	.+12     	; 0x6490 <midi_ManualOff+0x3e>
    6484:	0d c0       	rjmp	.+26     	; 0x64a0 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    6486:	40 e8       	ldi	r20, 0x80	; 128
    6488:	6d 2f       	mov	r22, r29
    648a:	8c 2f       	mov	r24, r28
    648c:	23 df       	rcall	.-442    	; 0x62d4 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    648e:	df 5f       	subi	r29, 0xFF	; 255
    6490:	f8 01       	movw	r30, r16
    6492:	ee 0f       	add	r30, r30
    6494:	ff 1f       	adc	r31, r31
    6496:	e2 5e       	subi	r30, 0xE2	; 226
    6498:	f7 4f       	sbci	r31, 0xF7	; 247
    649a:	81 81       	ldd	r24, Z+1	; 0x01
    649c:	8d 17       	cp	r24, r29
    649e:	98 f7       	brcc	.-26     	; 0x6486 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    64a0:	ec 2f       	mov	r30, r28
    64a2:	f0 e0       	ldi	r31, 0x00	; 0
    64a4:	ee 0f       	add	r30, r30
    64a6:	ff 1f       	adc	r31, r31
    64a8:	e8 5d       	subi	r30, 0xD8	; 216
    64aa:	f6 4f       	sbci	r31, 0xF6	; 246
    64ac:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    64ae:	80 31       	cpi	r24, 0x10	; 16
    64b0:	30 f4       	brcc	.+12     	; 0x64be <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    64b2:	80 6b       	ori	r24, 0xB0	; 176
    64b4:	97 d3       	rcall	.+1838   	; 0x6be4 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    64b6:	8b e7       	ldi	r24, 0x7B	; 123
    64b8:	95 d3       	rcall	.+1834   	; 0x6be4 <serial1MIDISend>
		serial1MIDISend(0);
    64ba:	80 e0       	ldi	r24, 0x00	; 0
    64bc:	93 d3       	rcall	.+1830   	; 0x6be4 <serial1MIDISend>
    64be:	df 91       	pop	r29

	}
}
    64c0:	cf 91       	pop	r28
    64c2:	1f 91       	pop	r17
    64c4:	0f 91       	pop	r16
    64c6:	08 95       	ret

000064c8 <midi_AllManualsOff>:
    64c8:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    64ca:	c0 e0       	ldi	r28, 0x00	; 0
    64cc:	03 c0       	rjmp	.+6      	; 0x64d4 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    64ce:	8c 2f       	mov	r24, r28
    64d0:	c0 df       	rcall	.-128    	; 0x6452 <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    64d2:	cf 5f       	subi	r28, 0xFF	; 255
    64d4:	c4 30       	cpi	r28, 0x04	; 4
    64d6:	d8 f3       	brcs	.-10     	; 0x64ce <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    64d8:	cf 91       	pop	r28
    64da:	08 95       	ret

000064dc <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    64dc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    64e0:	88 23       	and	r24, r24
    64e2:	39 f0       	breq	.+14     	; 0x64f2 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    64e4:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    64e8:	81 11       	cpse	r24, r1
    64ea:	03 c0       	rjmp	.+6      	; 0x64f2 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    64ec:	ed df       	rcall	.-38     	; 0x64c8 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    64ee:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    64f2:	08 95       	ret

000064f4 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    64f4:	0f 93       	push	r16
    64f6:	1f 93       	push	r17
    64f8:	cf 93       	push	r28
    64fa:	df 93       	push	r29
    64fc:	06 2f       	mov	r16, r22
    64fe:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6500:	d8 2f       	mov	r29, r24
    6502:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6504:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6506:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6508:	3c c0       	rjmp	.+120    	; 0x6582 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    650a:	4d 2f       	mov	r20, r29
    650c:	50 e0       	ldi	r21, 0x00	; 0
    650e:	2c 2f       	mov	r18, r28
    6510:	30 e0       	ldi	r19, 0x00	; 0
    6512:	fa 01       	movw	r30, r20
    6514:	ee 0f       	add	r30, r30
    6516:	ff 1f       	adc	r31, r31
    6518:	ee 0f       	add	r30, r30
    651a:	ff 1f       	adc	r31, r31
    651c:	e2 0f       	add	r30, r18
    651e:	f3 1f       	adc	r31, r19
    6520:	ee 0f       	add	r30, r30
    6522:	ff 1f       	adc	r31, r31
    6524:	ee 0f       	add	r30, r30
    6526:	ff 1f       	adc	r31, r31
    6528:	e8 5d       	subi	r30, 0xD8	; 216
    652a:	f7 4f       	sbci	r31, 0xF7	; 247
    652c:	80 81       	ld	r24, Z
    652e:	84 30       	cpi	r24, 0x04	; 4
    6530:	38 f5       	brcc	.+78     	; 0x6580 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6532:	df 01       	movw	r26, r30
    6534:	61 81       	ldd	r22, Z+1	; 0x01
    6536:	70 2f       	mov	r23, r16
    6538:	76 1b       	sub	r23, r22
    653a:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    653c:	0a f1       	brmi	.+66     	; 0x6580 <midiNote_to_Manual+0x8c>
    653e:	fd 01       	movw	r30, r26
    6540:	e2 81       	ldd	r30, Z+2	; 0x02
    6542:	f0 e0       	ldi	r31, 0x00	; 0
    6544:	a7 2f       	mov	r26, r23
    6546:	77 0f       	add	r23, r23
    6548:	bb 0b       	sbc	r27, r27
    654a:	ae 17       	cp	r26, r30
    654c:	bf 07       	cpc	r27, r31
    654e:	c4 f4       	brge	.+48     	; 0x6580 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6550:	fa 01       	movw	r30, r20
    6552:	ee 0f       	add	r30, r30
    6554:	ff 1f       	adc	r31, r31
    6556:	ee 0f       	add	r30, r30
    6558:	ff 1f       	adc	r31, r31
    655a:	e2 0f       	add	r30, r18
    655c:	f3 1f       	adc	r31, r19
    655e:	ee 0f       	add	r30, r30
    6560:	ff 1f       	adc	r31, r31
    6562:	ee 0f       	add	r30, r30
    6564:	ff 1f       	adc	r31, r31
    6566:	e8 5d       	subi	r30, 0xD8	; 216
    6568:	f7 4f       	sbci	r31, 0xF7	; 247
    656a:	93 81       	ldd	r25, Z+3	; 0x03
    656c:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    656e:	11 30       	cpi	r17, 0x01	; 1
    6570:	21 f4       	brne	.+8      	; 0x657a <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6572:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6576:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    657a:	41 2f       	mov	r20, r17
    657c:	ab de       	rcall	.-682    	; 0x62d4 <manual_NoteOnOff>
				found |= 0xFF;
    657e:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6580:	cf 5f       	subi	r28, 0xFF	; 255
    6582:	c4 30       	cpi	r28, 0x04	; 4
    6584:	08 f4       	brcc	.+2      	; 0x6588 <midiNote_to_Manual+0x94>
    6586:	c1 cf       	rjmp	.-126    	; 0x650a <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    6588:	11 30       	cpi	r17, 0x01	; 1
    658a:	49 f4       	brne	.+18     	; 0x659e <midiNote_to_Manual+0xaa>
    658c:	91 11       	cpse	r25, r1
    658e:	07 c0       	rjmp	.+14     	; 0x659e <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6590:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    6594:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    6598:	8f ef       	ldi	r24, 0xFF	; 255
    659a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    659e:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    65a2:	d8 13       	cpse	r29, r24
    65a4:	1f c0       	rjmp	.+62     	; 0x65e4 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    65a6:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    65aa:	8f 3f       	cpi	r24, 0xFF	; 255
    65ac:	d9 f0       	breq	.+54     	; 0x65e4 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    65ae:	11 30       	cpi	r17, 0x01	; 1
    65b0:	31 f0       	breq	.+12     	; 0x65be <midiNote_to_Manual+0xca>
    65b2:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    65b6:	99 23       	and	r25, r25
    65b8:	21 f0       	breq	.+8      	; 0x65c2 <midiNote_to_Manual+0xce>
    65ba:	90 e9       	ldi	r25, 0x90	; 144
    65bc:	03 c0       	rjmp	.+6      	; 0x65c4 <midiNote_to_Manual+0xd0>
    65be:	90 e9       	ldi	r25, 0x90	; 144
    65c0:	01 c0       	rjmp	.+2      	; 0x65c4 <midiNote_to_Manual+0xd0>
    65c2:	90 e8       	ldi	r25, 0x80	; 128
    65c4:	89 2b       	or	r24, r25
    65c6:	0e d3       	rcall	.+1564   	; 0x6be4 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    65c8:	80 2f       	mov	r24, r16
    65ca:	0c d3       	rcall	.+1560   	; 0x6be4 <serial1MIDISend>
    65cc:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    65ce:	06 c0       	rjmp	.+12     	; 0x65dc <midiNote_to_Manual+0xe8>
    65d0:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    65d4:	81 11       	cpse	r24, r1
    65d6:	04 c0       	rjmp	.+8      	; 0x65e0 <midiNote_to_Manual+0xec>
    65d8:	80 e4       	ldi	r24, 0x40	; 64
    65da:	03 c0       	rjmp	.+6      	; 0x65e2 <midiNote_to_Manual+0xee>
    65dc:	80 e4       	ldi	r24, 0x40	; 64
    65de:	01 c0       	rjmp	.+2      	; 0x65e2 <midiNote_to_Manual+0xee>
    65e0:	80 e0       	ldi	r24, 0x00	; 0
    65e2:	00 d3       	rcall	.+1536   	; 0x6be4 <serial1MIDISend>
    65e4:	df 91       	pop	r29
		}
	}
}
    65e6:	cf 91       	pop	r28
    65e8:	1f 91       	pop	r17
    65ea:	0f 91       	pop	r16
    65ec:	08 95       	ret

000065ee <midiIn_Process>:
    65ee:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    65f0:	0c f0       	brlt	.+2      	; 0x65f4 <midiIn_Process+0x6>
    65f2:	4f c0       	rjmp	.+158    	; 0x6692 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    65f4:	88 3f       	cpi	r24, 0xF8	; 248
    65f6:	b8 f0       	brcs	.+46     	; 0x6626 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    65f8:	8e 3f       	cpi	r24, 0xFE	; 254
    65fa:	81 f4       	brne	.+32     	; 0x661c <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    65fc:	81 e0       	ldi	r24, 0x01	; 1
    65fe:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6602:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6604:	f8 94       	cli
    6606:	06 c0       	rjmp	.+12     	; 0x6614 <midiIn_Process+0x26>
    6608:	ef e2       	ldi	r30, 0x2F	; 47
    660a:	f2 e0       	ldi	r31, 0x02	; 2
    660c:	89 e1       	ldi	r24, 0x19	; 25
    660e:	86 83       	std	Z+6, r24	; 0x06
    6610:	17 82       	std	Z+7, r1	; 0x07
    6612:	80 e0       	ldi	r24, 0x00	; 0
    6614:	81 11       	cpse	r24, r1
    6616:	f8 cf       	rjmp	.-16     	; 0x6608 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6618:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    661a:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    661c:	8f 3f       	cpi	r24, 0xFF	; 255
    661e:	09 f0       	breq	.+2      	; 0x6622 <midiIn_Process+0x34>
    6620:	79 c0       	rjmp	.+242    	; 0x6714 <midiIn_Process+0x126>
				midiAllReset();
    6622:	fc c9       	rjmp	.-3080   	; 0x5a1c <midiAllReset>
    6624:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6626:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    662a:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    662e:	90 e8       	ldi	r25, 0x80	; 128
    6630:	98 0f       	add	r25, r24
    6632:	90 34       	cpi	r25, 0x40	; 64
    6634:	20 f4       	brcc	.+8      	; 0x663e <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6636:	82 e0       	ldi	r24, 0x02	; 2
    6638:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    663c:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    663e:	90 e2       	ldi	r25, 0x20	; 32
    6640:	98 0f       	add	r25, r24
    6642:	90 31       	cpi	r25, 0x10	; 16
    6644:	20 f4       	brcc	.+8      	; 0x664e <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6646:	82 e0       	ldi	r24, 0x02	; 2
    6648:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    664c:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    664e:	82 3f       	cpi	r24, 0xF2	; 242
    6650:	21 f4       	brne	.+8      	; 0x665a <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6652:	82 e0       	ldi	r24, 0x02	; 2
    6654:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6658:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    665a:	80 3f       	cpi	r24, 0xF0	; 240
    665c:	21 f4       	brne	.+8      	; 0x6666 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    665e:	8f ef       	ldi	r24, 0xFF	; 255
    6660:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6664:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6666:	90 e4       	ldi	r25, 0x40	; 64
    6668:	98 0f       	add	r25, r24
    666a:	90 32       	cpi	r25, 0x20	; 32
    666c:	20 f4       	brcc	.+8      	; 0x6676 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    666e:	81 e0       	ldi	r24, 0x01	; 1
    6670:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6674:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6676:	81 3f       	cpi	r24, 0xF1	; 241
    6678:	11 f0       	breq	.+4      	; 0x667e <midiIn_Process+0x90>
    667a:	83 3f       	cpi	r24, 0xF3	; 243
    667c:	21 f4       	brne	.+8      	; 0x6686 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    667e:	81 e0       	ldi	r24, 0x01	; 1
    6680:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6684:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    6686:	87 3f       	cpi	r24, 0xF7	; 247
    6688:	09 f4       	brne	.+2      	; 0x668c <midiIn_Process+0x9e>
    668a:	44 c0       	rjmp	.+136    	; 0x6714 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    668c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    6690:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6692:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <midiDataByteCount>
    6696:	e8 30       	cpi	r30, 0x08	; 8
    6698:	40 f4       	brcc	.+16     	; 0x66aa <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    669a:	91 e0       	ldi	r25, 0x01	; 1
    669c:	9e 0f       	add	r25, r30
    669e:	90 93 1d 08 	sts	0x081D, r25	; 0x80081d <midiDataByteCount>
    66a2:	f0 e0       	ldi	r31, 0x00	; 0
    66a4:	ec 51       	subi	r30, 0x1C	; 28
    66a6:	f4 4f       	sbci	r31, 0xF4	; 244
    66a8:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    66aa:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    66ae:	8f 3f       	cpi	r24, 0xFF	; 255
    66b0:	89 f1       	breq	.+98     	; 0x6714 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    66b2:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <midiDataByteCount>
    66b6:	98 17       	cp	r25, r24
    66b8:	68 f1       	brcs	.+90     	; 0x6714 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    66ba:	90 91 ec 0b 	lds	r25, 0x0BEC	; 0x800bec <midiLastCommand>
    66be:	90 3f       	cpi	r25, 0xF0	; 240
    66c0:	38 f5       	brcc	.+78     	; 0x6710 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    66c2:	89 2f       	mov	r24, r25
    66c4:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    66c6:	90 7f       	andi	r25, 0xF0	; 240
    66c8:	90 39       	cpi	r25, 0x90	; 144
    66ca:	71 f0       	breq	.+28     	; 0x66e8 <midiIn_Process+0xfa>
    66cc:	18 f4       	brcc	.+6      	; 0x66d4 <midiIn_Process+0xe6>
    66ce:	90 38       	cpi	r25, 0x80	; 128
    66d0:	31 f0       	breq	.+12     	; 0x66de <midiIn_Process+0xf0>
    66d2:	1e c0       	rjmp	.+60     	; 0x6710 <midiIn_Process+0x122>
    66d4:	90 3b       	cpi	r25, 0xB0	; 176
    66d6:	99 f0       	breq	.+38     	; 0x66fe <midiIn_Process+0x110>
    66d8:	90 3c       	cpi	r25, 0xC0	; 192
    66da:	b9 f0       	breq	.+46     	; 0x670a <midiIn_Process+0x11c>
    66dc:	19 c0       	rjmp	.+50     	; 0x6710 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    66de:	40 e0       	ldi	r20, 0x00	; 0
    66e0:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    66e4:	07 df       	rcall	.-498    	; 0x64f4 <midiNote_to_Manual>
						break;
    66e6:	14 c0       	rjmp	.+40     	; 0x6710 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    66e8:	90 91 e5 0b 	lds	r25, 0x0BE5	; 0x800be5 <midiDataByte+0x1>
    66ec:	91 11       	cpse	r25, r1
    66ee:	02 c0       	rjmp	.+4      	; 0x66f4 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    66f0:	40 e0       	ldi	r20, 0x00	; 0
    66f2:	01 c0       	rjmp	.+2      	; 0x66f6 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    66f4:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    66f6:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    66fa:	fc de       	rcall	.-520    	; 0x64f4 <midiNote_to_Manual>
						break;
    66fc:	09 c0       	rjmp	.+18     	; 0x6710 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    66fe:	90 91 e4 0b 	lds	r25, 0x0BE4	; 0x800be4 <midiDataByte>
    6702:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6704:	29 f4       	brne	.+10     	; 0x6710 <midiIn_Process+0x122>
    6706:	3f de       	rcall	.-898    	; 0x6386 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    6708:	03 c0       	rjmp	.+6      	; 0x6710 <midiIn_Process+0x122>
    670a:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    670e:	18 dc       	rcall	.-2000   	; 0x5f40 <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6710:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
    6714:	08 95       	ret

00006716 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    6716:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <serESPMidiTmp+0x2>
    671a:	89 2f       	mov	r24, r25
    671c:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    671e:	90 7f       	andi	r25, 0xF0	; 240
    6720:	90 38       	cpi	r25, 0x80	; 128
    6722:	49 f0       	breq	.+18     	; 0x6736 <proc_ESPmidi+0x20>
    6724:	18 f4       	brcc	.+6      	; 0x672c <proc_ESPmidi+0x16>
    6726:	99 23       	and	r25, r25
    6728:	e1 f0       	breq	.+56     	; 0x6762 <proc_ESPmidi+0x4c>
    672a:	08 95       	ret
    672c:	90 39       	cpi	r25, 0x90	; 144
    672e:	41 f0       	breq	.+16     	; 0x6740 <proc_ESPmidi+0x2a>
    6730:	90 3b       	cpi	r25, 0xB0	; 176
    6732:	89 f0       	breq	.+34     	; 0x6756 <proc_ESPmidi+0x40>
    6734:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6736:	40 e0       	ldi	r20, 0x00	; 0
    6738:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    673c:	db ce       	rjmp	.-586    	; 0x64f4 <midiNote_to_Manual>
		break;
    673e:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6740:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <serESPMidiTmp>
    6744:	91 11       	cpse	r25, r1
    6746:	02 c0       	rjmp	.+4      	; 0x674c <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    6748:	40 e0       	ldi	r20, 0x00	; 0
    674a:	01 c0       	rjmp	.+2      	; 0x674e <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    674c:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    674e:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6752:	d0 ce       	rjmp	.-608    	; 0x64f4 <midiNote_to_Manual>
		break;
    6754:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6756:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    675a:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    675c:	61 f4       	brne	.+24     	; 0x6776 <proc_ESPmidi+0x60>
    675e:	13 ce       	rjmp	.-986    	; 0x6386 <midiAllNotesOff>
    6760:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6762:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6766:	89 2f       	mov	r24, r25
    6768:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    676a:	90 7f       	andi	r25, 0xF0	; 240
    676c:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    676e:	19 f4       	brne	.+6      	; 0x6776 <proc_ESPmidi+0x60>
    6770:	60 91 4b 16 	lds	r22, 0x164B	; 0x80164b <serESPMidiTmp>
    6774:	e5 cb       	rjmp	.-2102   	; 0x5f40 <midi_ProgramChange>
    6776:	08 95       	ret

00006778 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    6778:	bf 92       	push	r11
    677a:	cf 92       	push	r12
    677c:	df 92       	push	r13
    677e:	ef 92       	push	r14
    6780:	ff 92       	push	r15
    6782:	0f 93       	push	r16
    6784:	1f 93       	push	r17
    6786:	cf 93       	push	r28
    6788:	df 93       	push	r29
    678a:	d8 2f       	mov	r29, r24
    678c:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    678e:	8d d2       	rcall	.+1306   	; 0x6caa <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6790:	0c 2f       	mov	r16, r28
    6792:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6794:	cf 71       	andi	r28, 0x1F	; 31
    6796:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6798:	00 32       	cpi	r16, 0x20	; 32
    679a:	09 f4       	brne	.+2      	; 0x679e <midiKeyPress_Process+0x26>
    679c:	b5 c0       	rjmp	.+362    	; 0x6908 <midiKeyPress_Process+0x190>
    679e:	00 23       	and	r16, r16
    67a0:	09 f4       	brne	.+2      	; 0x67a4 <midiKeyPress_Process+0x2c>
    67a2:	b4 c0       	rjmp	.+360    	; 0x690c <midiKeyPress_Process+0x194>
    67a4:	b7 c0       	rjmp	.+366    	; 0x6914 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    67a6:	d0 ff       	sbrs	r29, 0
    67a8:	ac c0       	rjmp	.+344    	; 0x6902 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    67aa:	20 e2       	ldi	r18, 0x20	; 32
    67ac:	c2 9f       	mul	r28, r18
    67ae:	c0 01       	movw	r24, r0
    67b0:	11 24       	eor	r1, r1
    67b2:	fb 2c       	mov	r15, r11
    67b4:	f8 2a       	or	r15, r24
    67b6:	8f 2d       	mov	r24, r15
    67b8:	6a dd       	rcall	.-1324   	; 0x628e <moduleBit_to_manualNote>
    67ba:	c8 2e       	mov	r12, r24
    67bc:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    67be:	18 2f       	mov	r17, r24
    67c0:	8f 3f       	cpi	r24, 0xFF	; 255
    67c2:	09 f4       	brne	.+2      	; 0x67c6 <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    67c4:	94 c0       	rjmp	.+296    	; 0x68ee <midiKeyPress_Process+0x176>
    67c6:	69 2f       	mov	r22, r25
    67c8:	7a dc       	rcall	.-1804   	; 0x60be <Manual_to_MidiNote>
    67ca:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    67cc:	8f 3f       	cpi	r24, 0xFF	; 255
    67ce:	09 f1       	breq	.+66     	; 0x6812 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    67d0:	00 32       	cpi	r16, 0x20	; 32
    67d2:	31 f0       	breq	.+12     	; 0x67e0 <midiKeyPress_Process+0x68>
    67d4:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    67d8:	99 23       	and	r25, r25
    67da:	21 f0       	breq	.+8      	; 0x67e4 <midiKeyPress_Process+0x6c>
    67dc:	90 e9       	ldi	r25, 0x90	; 144
    67de:	03 c0       	rjmp	.+6      	; 0x67e6 <midiKeyPress_Process+0x6e>
    67e0:	90 e9       	ldi	r25, 0x90	; 144
    67e2:	01 c0       	rjmp	.+2      	; 0x67e6 <midiKeyPress_Process+0x6e>
    67e4:	90 e8       	ldi	r25, 0x80	; 128
    67e6:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    67e8:	fd d1       	rcall	.+1018   	; 0x6be4 <serial1MIDISend>
    67ea:	8d 2d       	mov	r24, r13
    67ec:	fb d1       	rcall	.+1014   	; 0x6be4 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    67ee:	01 11       	cpse	r16, r1
    67f0:	06 c0       	rjmp	.+12     	; 0x67fe <midiKeyPress_Process+0x86>
    67f2:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    67f6:	81 11       	cpse	r24, r1
    67f8:	04 c0       	rjmp	.+8      	; 0x6802 <midiKeyPress_Process+0x8a>
    67fa:	80 e4       	ldi	r24, 0x40	; 64
    67fc:	03 c0       	rjmp	.+6      	; 0x6804 <midiKeyPress_Process+0x8c>
    67fe:	80 e4       	ldi	r24, 0x40	; 64
    6800:	01 c0       	rjmp	.+2      	; 0x6804 <midiKeyPress_Process+0x8c>
    6802:	80 e0       	ldi	r24, 0x00	; 0
    6804:	ef d1       	rcall	.+990    	; 0x6be4 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    6806:	00 32       	cpi	r16, 0x20	; 32
    6808:	21 f4       	brne	.+8      	; 0x6812 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    680a:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    680e:	e0 92 05 02 	sts	0x0205, r14	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    6812:	41 e0       	ldi	r20, 0x01	; 1
    6814:	00 32       	cpi	r16, 0x20	; 32
    6816:	09 f0       	breq	.+2      	; 0x681a <midiKeyPress_Process+0xa2>
    6818:	40 e0       	ldi	r20, 0x00	; 0
    681a:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    681c:	11 11       	cpse	r17, r1
    681e:	19 c0       	rjmp	.+50     	; 0x6852 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6820:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers>
    6824:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6826:	19 f4       	brne	.+6      	; 0x682e <midiKeyPress_Process+0xb6>
    6828:	6e 2d       	mov	r22, r14
    682a:	81 e0       	ldi	r24, 0x01	; 1
    682c:	53 dd       	rcall	.-1370   	; 0x62d4 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    682e:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x1>
    6832:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6834:	21 f4       	brne	.+8      	; 0x683e <midiKeyPress_Process+0xc6>
    6836:	4d 2d       	mov	r20, r13
    6838:	6e 2d       	mov	r22, r14
    683a:	82 e0       	ldi	r24, 0x02	; 2
    683c:	4b dd       	rcall	.-1386   	; 0x62d4 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    683e:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x3>
    6842:	8f 3f       	cpi	r24, 0xFF	; 255
    6844:	09 f0       	breq	.+2      	; 0x6848 <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6846:	53 c0       	rjmp	.+166    	; 0x68ee <midiKeyPress_Process+0x176>
    6848:	4d 2d       	mov	r20, r13
    684a:	6e 2d       	mov	r22, r14
    684c:	83 e0       	ldi	r24, 0x03	; 3
    684e:	42 dd       	rcall	.-1404   	; 0x62d4 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6850:	4e c0       	rjmp	.+156    	; 0x68ee <midiKeyPress_Process+0x176>
    6852:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6854:	c9 f4       	brne	.+50     	; 0x6888 <midiKeyPress_Process+0x110>
    6856:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x2>
    685a:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    685c:	19 f4       	brne	.+6      	; 0x6864 <midiKeyPress_Process+0xec>
    685e:	6e 2d       	mov	r22, r14
    6860:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6862:	38 dd       	rcall	.-1424   	; 0x62d4 <manual_NoteOnOff>
    6864:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x4>
    6868:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    686a:	21 f4       	brne	.+8      	; 0x6874 <midiKeyPress_Process+0xfc>
    686c:	4d 2d       	mov	r20, r13
    686e:	6e 2d       	mov	r22, r14
    6870:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6872:	30 dd       	rcall	.-1440   	; 0x62d4 <manual_NoteOnOff>
    6874:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x6>
    6878:	8f 3f       	cpi	r24, 0xFF	; 255
    687a:	09 f0       	breq	.+2      	; 0x687e <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    687c:	38 c0       	rjmp	.+112    	; 0x68ee <midiKeyPress_Process+0x176>
    687e:	4d 2d       	mov	r20, r13
    6880:	6e 2d       	mov	r22, r14
    6882:	80 e0       	ldi	r24, 0x00	; 0
    6884:	27 dd       	rcall	.-1458   	; 0x62d4 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6886:	33 c0       	rjmp	.+102    	; 0x68ee <midiKeyPress_Process+0x176>
    6888:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    688a:	c1 f4       	brne	.+48     	; 0x68bc <midiKeyPress_Process+0x144>
    688c:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6890:	8f 3f       	cpi	r24, 0xFF	; 255
    6892:	19 f4       	brne	.+6      	; 0x689a <midiKeyPress_Process+0x122>
    6894:	6e 2d       	mov	r22, r14
    6896:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6898:	1d dd       	rcall	.-1478   	; 0x62d4 <manual_NoteOnOff>
    689a:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    689e:	8f 3f       	cpi	r24, 0xFF	; 255
    68a0:	21 f4       	brne	.+8      	; 0x68aa <midiKeyPress_Process+0x132>
    68a2:	4d 2d       	mov	r20, r13
    68a4:	6e 2d       	mov	r22, r14
    68a6:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    68a8:	15 dd       	rcall	.-1494   	; 0x62d4 <manual_NoteOnOff>
    68aa:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    68ae:	8f 3f       	cpi	r24, 0xFF	; 255
    68b0:	f1 f4       	brne	.+60     	; 0x68ee <midiKeyPress_Process+0x176>
    68b2:	4d 2d       	mov	r20, r13
    68b4:	6e 2d       	mov	r22, r14
    68b6:	81 e0       	ldi	r24, 0x01	; 1
    68b8:	0d dd       	rcall	.-1510   	; 0x62d4 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    68ba:	19 c0       	rjmp	.+50     	; 0x68ee <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    68bc:	13 30       	cpi	r17, 0x03	; 3
    68be:	b9 f4       	brne	.+46     	; 0x68ee <midiKeyPress_Process+0x176>
    68c0:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    68c4:	8f 3f       	cpi	r24, 0xFF	; 255
    68c6:	19 f4       	brne	.+6      	; 0x68ce <midiKeyPress_Process+0x156>
    68c8:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    68ca:	80 e0       	ldi	r24, 0x00	; 0
    68cc:	03 dd       	rcall	.-1530   	; 0x62d4 <manual_NoteOnOff>
    68ce:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    68d2:	8f 3f       	cpi	r24, 0xFF	; 255
    68d4:	21 f4       	brne	.+8      	; 0x68de <midiKeyPress_Process+0x166>
    68d6:	4d 2d       	mov	r20, r13
    68d8:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    68da:	81 e0       	ldi	r24, 0x01	; 1
    68dc:	fb dc       	rcall	.-1546   	; 0x62d4 <manual_NoteOnOff>
    68de:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    68e2:	8f 3f       	cpi	r24, 0xFF	; 255
    68e4:	21 f4       	brne	.+8      	; 0x68ee <midiKeyPress_Process+0x176>
    68e6:	4d 2d       	mov	r20, r13
    68e8:	6e 2d       	mov	r22, r14
    68ea:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    68ec:	f3 dc       	rcall	.-1562   	; 0x62d4 <manual_NoteOnOff>
    68ee:	8f 2d       	mov	r24, r15
    68f0:	2c d9       	rcall	.-3496   	; 0x5b4a <moduleBit_to_registerNr>
    68f2:	00 32       	cpi	r16, 0x20	; 32
    68f4:	11 f4       	brne	.+4      	; 0x68fa <midiKeyPress_Process+0x182>
    68f6:	20 e8       	ldi	r18, 0x80	; 128
    68f8:	01 c0       	rjmp	.+2      	; 0x68fc <midiKeyPress_Process+0x184>
    68fa:	20 e0       	ldi	r18, 0x00	; 0
    68fc:	82 2b       	or	r24, r18
    68fe:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6902:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6904:	cf 5f       	subi	r28, 0xFF	; 255
    6906:	03 c0       	rjmp	.+6      	; 0x690e <midiKeyPress_Process+0x196>
    6908:	c0 e0       	ldi	r28, 0x00	; 0
    690a:	01 c0       	rjmp	.+2      	; 0x690e <midiKeyPress_Process+0x196>
    690c:	c0 e0       	ldi	r28, 0x00	; 0
    690e:	c8 30       	cpi	r28, 0x08	; 8
    6910:	08 f4       	brcc	.+2      	; 0x6914 <midiKeyPress_Process+0x19c>
    6912:	49 cf       	rjmp	.-366    	; 0x67a6 <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6914:	df 91       	pop	r29
    6916:	cf 91       	pop	r28
    6918:	1f 91       	pop	r17
    691a:	0f 91       	pop	r16
    691c:	ff 90       	pop	r15
    691e:	ef 90       	pop	r14
    6920:	df 90       	pop	r13
    6922:	cf 90       	pop	r12
    6924:	bf 90       	pop	r11
    6926:	08 95       	ret

00006928 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    6928:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    692a:	c0 e0       	ldi	r28, 0x00	; 0
    692c:	10 c0       	rjmp	.+32     	; 0x694e <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    692e:	ec 2f       	mov	r30, r28
    6930:	f0 e0       	ldi	r31, 0x00	; 0
    6932:	ee 0f       	add	r30, r30
    6934:	ff 1f       	adc	r31, r31
    6936:	e8 5d       	subi	r30, 0xD8	; 216
    6938:	f6 4f       	sbci	r31, 0xF6	; 246
    693a:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    693c:	80 31       	cpi	r24, 0x10	; 16
    693e:	30 f4       	brcc	.+12     	; 0x694c <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6940:	80 6b       	ori	r24, 0xB0	; 176
    6942:	50 d1       	rcall	.+672    	; 0x6be4 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6944:	8b e7       	ldi	r24, 0x7B	; 123
    6946:	4e d1       	rcall	.+668    	; 0x6be4 <serial1MIDISend>
			serial1MIDISend(0);
    6948:	80 e0       	ldi	r24, 0x00	; 0
    694a:	4c d1       	rcall	.+664    	; 0x6be4 <serial1MIDISend>
    694c:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    694e:	c4 30       	cpi	r28, 0x04	; 4
    6950:	70 f3       	brcs	.-36     	; 0x692e <midiSendAllNotesOff+0x6>
    6952:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    6954:	08 95       	ret

00006956 <midi_SendActiveSense>:
    6956:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6958:	45 c1       	rjmp	.+650    	; 0x6be4 <serial1MIDISend>
    695a:	08 95       	ret

0000695c <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    695c:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6960:	88 23       	and	r24, r24
    6962:	21 f0       	breq	.+8      	; 0x696c <midi_CheckTxActiveSense+0x10>
    6964:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6968:	8f 3f       	cpi	r24, 0xFF	; 255
    696a:	99 f4       	brne	.+38     	; 0x6992 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    696c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    696e:	f8 94       	cli
    6970:	81 e0       	ldi	r24, 0x01	; 1
    6972:	06 c0       	rjmp	.+12     	; 0x6980 <midi_CheckTxActiveSense+0x24>
    6974:	ef e2       	ldi	r30, 0x2F	; 47
    6976:	f2 e0       	ldi	r31, 0x02	; 2
    6978:	8a e0       	ldi	r24, 0x0A	; 10
    697a:	80 8b       	std	Z+16, r24	; 0x10
    697c:	11 8a       	std	Z+17, r1	; 0x11
    697e:	80 e0       	ldi	r24, 0x00	; 0
    6980:	81 11       	cpse	r24, r1
    6982:	f8 cf       	rjmp	.-16     	; 0x6974 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6984:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    6986:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting>
    698a:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    698c:	e4 df       	rcall	.-56     	; 0x6956 <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    698e:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6992:	08 95       	ret

00006994 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6994:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6998:	8f e1       	ldi	r24, 0x1F	; 31
    699a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    699e:	e9 ec       	ldi	r30, 0xC9	; 201
    69a0:	f0 e0       	ldi	r31, 0x00	; 0
    69a2:	80 81       	ld	r24, Z
    69a4:	88 69       	ori	r24, 0x98	; 152
    69a6:	80 83       	st	Z, r24
    69a8:	ea ec       	ldi	r30, 0xCA	; 202
    69aa:	f0 e0       	ldi	r31, 0x00	; 0
    69ac:	80 81       	ld	r24, Z
    69ae:	86 60       	ori	r24, 0x06	; 6
    69b0:	80 83       	st	Z, r24
    69b2:	10 92 44 16 	sts	0x1644, r1	; 0x801644 <midiRxInIndex>
    69b6:	10 92 53 16 	sts	0x1653, r1	; 0x801653 <midiRxOutIndex>
    69ba:	10 92 ef 13 	sts	0x13EF, r1	; 0x8013ef <midiTxInIndex>
    69be:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <midiTxOutIndex>
    69c2:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiRxOvfl>
    69c6:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <midiTxOvfl>
    69ca:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
    69ce:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
    69d2:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
    69d6:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
    69da:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    69de:	08 95       	ret

000069e0 <__vector_36>:
    69e0:	1f 92       	push	r1
    69e2:	0f 92       	push	r0
    69e4:	0f b6       	in	r0, 0x3f	; 63
    69e6:	0f 92       	push	r0
    69e8:	11 24       	eor	r1, r1
    69ea:	0b b6       	in	r0, 0x3b	; 59
    69ec:	0f 92       	push	r0
    69ee:	8f 93       	push	r24
    69f0:	9f 93       	push	r25
    69f2:	ef 93       	push	r30
    69f4:	ff 93       	push	r31
    69f6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    69fa:	e0 91 44 16 	lds	r30, 0x1644	; 0x801644 <midiRxInIndex>
    69fe:	f0 e0       	ldi	r31, 0x00	; 0
    6a00:	ef 5b       	subi	r30, 0xBF	; 191
    6a02:	fb 4e       	sbci	r31, 0xEB	; 235
    6a04:	80 83       	st	Z, r24
    6a06:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6a0a:	8f 5f       	subi	r24, 0xFF	; 255
    6a0c:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6a10:	89 13       	cpse	r24, r25
    6a12:	0e c0       	rjmp	.+28     	; 0x6a30 <__vector_36+0x50>
    6a14:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOvflCount>
    6a18:	88 23       	and	r24, r24
    6a1a:	31 f0       	breq	.+12     	; 0x6a28 <__vector_36+0x48>
    6a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    6a1e:	51 f0       	breq	.+20     	; 0x6a34 <__vector_36+0x54>
    6a20:	8f 5f       	subi	r24, 0xFF	; 255
    6a22:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6a26:	06 c0       	rjmp	.+12     	; 0x6a34 <__vector_36+0x54>
    6a28:	81 e0       	ldi	r24, 0x01	; 1
    6a2a:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6a2e:	02 c0       	rjmp	.+4      	; 0x6a34 <__vector_36+0x54>
    6a30:	80 93 44 16 	sts	0x1644, r24	; 0x801644 <midiRxInIndex>
    6a34:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6a38:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6a3c:	89 17       	cp	r24, r25
    6a3e:	30 f4       	brcc	.+12     	; 0x6a4c <__vector_36+0x6c>
    6a40:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6a44:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6a48:	89 1b       	sub	r24, r25
    6a4a:	05 c0       	rjmp	.+10     	; 0x6a56 <__vector_36+0x76>
    6a4c:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6a50:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6a54:	89 1b       	sub	r24, r25
    6a56:	90 91 41 15 	lds	r25, 0x1541	; 0x801541 <midiRxBuffUsage>
    6a5a:	98 17       	cp	r25, r24
    6a5c:	10 f4       	brcc	.+4      	; 0x6a62 <__vector_36+0x82>
    6a5e:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <midiRxBuffUsage>
    6a62:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    6a66:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    6a6a:	01 96       	adiw	r24, 0x01	; 1
    6a6c:	90 93 da 18 	sts	0x18DA, r25	; 0x8018da <midiRxBytesCount+0x1>
    6a70:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <midiRxBytesCount>
    6a74:	ff 91       	pop	r31
    6a76:	ef 91       	pop	r30
    6a78:	9f 91       	pop	r25
    6a7a:	8f 91       	pop	r24
    6a7c:	0f 90       	pop	r0
    6a7e:	0b be       	out	0x3b, r0	; 59
    6a80:	0f 90       	pop	r0
    6a82:	0f be       	out	0x3f, r0	; 63
    6a84:	0f 90       	pop	r0
    6a86:	1f 90       	pop	r1
    6a88:	18 95       	reti

00006a8a <__vector_37>:
    6a8a:	1f 92       	push	r1
    6a8c:	0f 92       	push	r0
    6a8e:	0f b6       	in	r0, 0x3f	; 63
    6a90:	0f 92       	push	r0
    6a92:	11 24       	eor	r1, r1
    6a94:	0b b6       	in	r0, 0x3b	; 59
    6a96:	0f 92       	push	r0
    6a98:	8f 93       	push	r24
    6a9a:	9f 93       	push	r25
    6a9c:	ef 93       	push	r30
    6a9e:	ff 93       	push	r31
    6aa0:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6aa4:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6aa8:	98 17       	cp	r25, r24
    6aaa:	b9 f0       	breq	.+46     	; 0x6ada <__vector_37+0x50>
    6aac:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6ab0:	f0 e0       	ldi	r31, 0x00	; 0
    6ab2:	ee 5b       	subi	r30, 0xBE	; 190
    6ab4:	fa 4e       	sbci	r31, 0xEA	; 234
    6ab6:	80 81       	ld	r24, Z
    6ab8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6abc:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6ac0:	8f 5f       	subi	r24, 0xFF	; 255
    6ac2:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <midiTxOutIndex>
    6ac6:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    6aca:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    6ace:	01 96       	adiw	r24, 0x01	; 1
    6ad0:	90 93 51 16 	sts	0x1651, r25	; 0x801651 <midiTxBytesCount+0x1>
    6ad4:	80 93 50 16 	sts	0x1650, r24	; 0x801650 <midiTxBytesCount>
    6ad8:	05 c0       	rjmp	.+10     	; 0x6ae4 <__vector_37+0x5a>
    6ada:	e9 ec       	ldi	r30, 0xC9	; 201
    6adc:	f0 e0       	ldi	r31, 0x00	; 0
    6ade:	80 81       	ld	r24, Z
    6ae0:	8f 7d       	andi	r24, 0xDF	; 223
    6ae2:	80 83       	st	Z, r24
    6ae4:	ff 91       	pop	r31
    6ae6:	ef 91       	pop	r30
    6ae8:	9f 91       	pop	r25
    6aea:	8f 91       	pop	r24
    6aec:	0f 90       	pop	r0
    6aee:	0b be       	out	0x3b, r0	; 59
    6af0:	0f 90       	pop	r0
    6af2:	0f be       	out	0x3f, r0	; 63
    6af4:	0f 90       	pop	r0
    6af6:	1f 90       	pop	r1
    6af8:	18 95       	reti

00006afa <serial0SER_USBSend>:
    6afa:	e0 91 d7 18 	lds	r30, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    6afe:	f0 91 d8 18 	lds	r31, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    6b02:	a1 ec       	ldi	r26, 0xC1	; 193
    6b04:	b0 e0       	ldi	r27, 0x00	; 0
    6b06:	9c 91       	ld	r25, X
    6b08:	9f 7d       	andi	r25, 0xDF	; 223
    6b0a:	9c 93       	st	X, r25
    6b0c:	af 01       	movw	r20, r30
    6b0e:	4f 5f       	subi	r20, 0xFF	; 255
    6b10:	5f 4f       	sbci	r21, 0xFF	; 255
    6b12:	80 83       	st	Z, r24
    6b14:	83 e1       	ldi	r24, 0x13	; 19
    6b16:	4c 3e       	cpi	r20, 0xEC	; 236
    6b18:	58 07       	cpc	r21, r24
    6b1a:	19 f0       	breq	.+6      	; 0x6b22 <serial0SER_USBSend+0x28>
    6b1c:	10 f0       	brcs	.+4      	; 0x6b22 <serial0SER_USBSend+0x28>
    6b1e:	4d ee       	ldi	r20, 0xED	; 237
    6b20:	5b e0       	ldi	r21, 0x0B	; 11
    6b22:	9f b7       	in	r25, 0x3f	; 63
    6b24:	f8 94       	cli
    6b26:	81 e0       	ldi	r24, 0x01	; 1
    6b28:	05 c0       	rjmp	.+10     	; 0x6b34 <serial0SER_USBSend+0x3a>
    6b2a:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    6b2e:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    6b32:	80 e0       	ldi	r24, 0x00	; 0
    6b34:	81 11       	cpse	r24, r1
    6b36:	f9 cf       	rjmp	.-14     	; 0x6b2a <serial0SER_USBSend+0x30>
    6b38:	9f bf       	out	0x3f, r25	; 63
    6b3a:	42 17       	cp	r20, r18
    6b3c:	53 07       	cpc	r21, r19
    6b3e:	49 f4       	brne	.+18     	; 0x6b52 <serial0SER_USBSend+0x58>
    6b40:	8f ef       	ldi	r24, 0xFF	; 255
    6b42:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    6b46:	e1 ec       	ldi	r30, 0xC1	; 193
    6b48:	f0 e0       	ldi	r31, 0x00	; 0
    6b4a:	80 81       	ld	r24, Z
    6b4c:	80 62       	ori	r24, 0x20	; 32
    6b4e:	80 83       	st	Z, r24
    6b50:	08 95       	ret
    6b52:	50 93 d8 18 	sts	0x18D8, r21	; 0x8018d8 <serUSBTxInIndex+0x1>
    6b56:	40 93 d7 18 	sts	0x18D7, r20	; 0x8018d7 <serUSBTxInIndex>
    6b5a:	e1 ec       	ldi	r30, 0xC1	; 193
    6b5c:	f0 e0       	ldi	r31, 0x00	; 0
    6b5e:	80 81       	ld	r24, Z
    6b60:	80 62       	ori	r24, 0x20	; 32
    6b62:	80 83       	st	Z, r24
    6b64:	08 95       	ret

00006b66 <serial0USB_logMIDIin>:
    6b66:	cf 93       	push	r28
    6b68:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6b6c:	99 23       	and	r25, r25
    6b6e:	61 f0       	breq	.+24     	; 0x6b88 <serial0USB_logMIDIin+0x22>
    6b70:	c8 2f       	mov	r28, r24
    6b72:	89 e6       	ldi	r24, 0x69	; 105
    6b74:	c2 df       	rcall	.-124    	; 0x6afa <serial0SER_USBSend>
    6b76:	8c 2f       	mov	r24, r28
    6b78:	82 95       	swap	r24
    6b7a:	8f 70       	andi	r24, 0x0F	; 15
    6b7c:	b5 d2       	rcall	.+1386   	; 0x70e8 <nibbleToChr>
    6b7e:	bd df       	rcall	.-134    	; 0x6afa <serial0SER_USBSend>
    6b80:	8c 2f       	mov	r24, r28
    6b82:	8f 70       	andi	r24, 0x0F	; 15
    6b84:	b1 d2       	rcall	.+1378   	; 0x70e8 <nibbleToChr>
    6b86:	b9 df       	rcall	.-142    	; 0x6afa <serial0SER_USBSend>
    6b88:	cf 91       	pop	r28
    6b8a:	08 95       	ret

00006b8c <serial1MIDIReadRx>:
    6b8c:	cf 93       	push	r28
    6b8e:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6b92:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6b96:	98 17       	cp	r25, r24
    6b98:	71 f0       	breq	.+28     	; 0x6bb6 <serial1MIDIReadRx+0x2a>
    6b9a:	e0 91 53 16 	lds	r30, 0x1653	; 0x801653 <midiRxOutIndex>
    6b9e:	f0 e0       	ldi	r31, 0x00	; 0
    6ba0:	ef 5b       	subi	r30, 0xBF	; 191
    6ba2:	fb 4e       	sbci	r31, 0xEB	; 235
    6ba4:	c0 81       	ld	r28, Z
    6ba6:	8c 2f       	mov	r24, r28
    6ba8:	de df       	rcall	.-68     	; 0x6b66 <serial0USB_logMIDIin>
    6baa:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6bae:	8f 5f       	subi	r24, 0xFF	; 255
    6bb0:	80 93 53 16 	sts	0x1653, r24	; 0x801653 <midiRxOutIndex>
    6bb4:	01 c0       	rjmp	.+2      	; 0x6bb8 <serial1MIDIReadRx+0x2c>
    6bb6:	cd ef       	ldi	r28, 0xFD	; 253
    6bb8:	8c 2f       	mov	r24, r28
    6bba:	cf 91       	pop	r28
    6bbc:	08 95       	ret

00006bbe <serial0USB_logMIDIout>:
    6bbe:	cf 93       	push	r28
    6bc0:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6bc4:	99 23       	and	r25, r25
    6bc6:	61 f0       	breq	.+24     	; 0x6be0 <serial0USB_logMIDIout+0x22>
    6bc8:	c8 2f       	mov	r28, r24
    6bca:	8f e6       	ldi	r24, 0x6F	; 111
    6bcc:	96 df       	rcall	.-212    	; 0x6afa <serial0SER_USBSend>
    6bce:	8c 2f       	mov	r24, r28
    6bd0:	82 95       	swap	r24
    6bd2:	8f 70       	andi	r24, 0x0F	; 15
    6bd4:	89 d2       	rcall	.+1298   	; 0x70e8 <nibbleToChr>
    6bd6:	91 df       	rcall	.-222    	; 0x6afa <serial0SER_USBSend>
    6bd8:	8c 2f       	mov	r24, r28
    6bda:	8f 70       	andi	r24, 0x0F	; 15
    6bdc:	85 d2       	rcall	.+1290   	; 0x70e8 <nibbleToChr>
    6bde:	8d df       	rcall	.-230    	; 0x6afa <serial0SER_USBSend>
    6be0:	cf 91       	pop	r28
    6be2:	08 95       	ret

00006be4 <serial1MIDISend>:
    6be4:	cf 93       	push	r28
    6be6:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6bea:	99 23       	and	r25, r25
    6bec:	71 f0       	breq	.+28     	; 0x6c0a <serial1MIDISend+0x26>
    6bee:	88 23       	and	r24, r24
    6bf0:	64 f4       	brge	.+24     	; 0x6c0a <serial1MIDISend+0x26>
    6bf2:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <midiTxLastCmd>
    6bf6:	89 17       	cp	r24, r25
    6bf8:	09 f4       	brne	.+2      	; 0x6bfc <serial1MIDISend+0x18>
    6bfa:	55 c0       	rjmp	.+170    	; 0x6ca6 <serial1MIDISend+0xc2>
    6bfc:	80 3a       	cpi	r24, 0xA0	; 160
    6bfe:	18 f4       	brcc	.+6      	; 0x6c06 <serial1MIDISend+0x22>
    6c00:	80 93 fd 13 	sts	0x13FD, r24	; 0x8013fd <midiTxLastCmd>
    6c04:	02 c0       	rjmp	.+4      	; 0x6c0a <serial1MIDISend+0x26>
    6c06:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6c0a:	2f b7       	in	r18, 0x3f	; 63
    6c0c:	f8 94       	cli
    6c0e:	91 e0       	ldi	r25, 0x01	; 1
    6c10:	06 c0       	rjmp	.+12     	; 0x6c1e <serial1MIDISend+0x3a>
    6c12:	ef e2       	ldi	r30, 0x2F	; 47
    6c14:	f2 e0       	ldi	r31, 0x02	; 2
    6c16:	9a e0       	ldi	r25, 0x0A	; 10
    6c18:	90 8b       	std	Z+16, r25	; 0x10
    6c1a:	11 8a       	std	Z+17, r1	; 0x11
    6c1c:	90 e0       	ldi	r25, 0x00	; 0
    6c1e:	91 11       	cpse	r25, r1
    6c20:	f8 cf       	rjmp	.-16     	; 0x6c12 <serial1MIDISend+0x2e>
    6c22:	c8 2f       	mov	r28, r24
    6c24:	2f bf       	out	0x3f, r18	; 63
    6c26:	e9 ec       	ldi	r30, 0xC9	; 201
    6c28:	f0 e0       	ldi	r31, 0x00	; 0
    6c2a:	80 81       	ld	r24, Z
    6c2c:	8f 7d       	andi	r24, 0xDF	; 223
    6c2e:	80 83       	st	Z, r24
    6c30:	8c 2f       	mov	r24, r28
    6c32:	c5 df       	rcall	.-118    	; 0x6bbe <serial0USB_logMIDIout>
    6c34:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c38:	f0 e0       	ldi	r31, 0x00	; 0
    6c3a:	ee 5b       	subi	r30, 0xBE	; 190
    6c3c:	fa 4e       	sbci	r31, 0xEA	; 234
    6c3e:	c0 83       	st	Z, r28
    6c40:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c44:	8f 5f       	subi	r24, 0xFF	; 255
    6c46:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c4a:	89 13       	cpse	r24, r25
    6c4c:	0e c0       	rjmp	.+28     	; 0x6c6a <serial1MIDISend+0x86>
    6c4e:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <midiTxOvflCount>
    6c52:	88 23       	and	r24, r24
    6c54:	31 f0       	breq	.+12     	; 0x6c62 <serial1MIDISend+0x7e>
    6c56:	8f 3f       	cpi	r24, 0xFF	; 255
    6c58:	51 f0       	breq	.+20     	; 0x6c6e <serial1MIDISend+0x8a>
    6c5a:	8f 5f       	subi	r24, 0xFF	; 255
    6c5c:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6c60:	06 c0       	rjmp	.+12     	; 0x6c6e <serial1MIDISend+0x8a>
    6c62:	81 e0       	ldi	r24, 0x01	; 1
    6c64:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6c68:	02 c0       	rjmp	.+4      	; 0x6c6e <serial1MIDISend+0x8a>
    6c6a:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <midiTxInIndex>
    6c6e:	90 91 ef 13 	lds	r25, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c72:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c76:	89 17       	cp	r24, r25
    6c78:	30 f4       	brcc	.+12     	; 0x6c86 <serial1MIDISend+0xa2>
    6c7a:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c7e:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c82:	89 1b       	sub	r24, r25
    6c84:	05 c0       	rjmp	.+10     	; 0x6c90 <serial1MIDISend+0xac>
    6c86:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c8a:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c8e:	89 1b       	sub	r24, r25
    6c90:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <midiTxBuffUsage>
    6c94:	98 17       	cp	r25, r24
    6c96:	10 f4       	brcc	.+4      	; 0x6c9c <serial1MIDISend+0xb8>
    6c98:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <midiTxBuffUsage>
    6c9c:	e9 ec       	ldi	r30, 0xC9	; 201
    6c9e:	f0 e0       	ldi	r31, 0x00	; 0
    6ca0:	80 81       	ld	r24, Z
    6ca2:	80 62       	ori	r24, 0x20	; 32
    6ca4:	80 83       	st	Z, r24
    6ca6:	cf 91       	pop	r28
    6ca8:	08 95       	ret

00006caa <serial0USB_logPipeIn>:
    6caa:	cf 93       	push	r28
    6cac:	df 93       	push	r29
    6cae:	20 91 52 16 	lds	r18, 0x1652	; 0x801652 <serUSB_Active>
    6cb2:	22 23       	and	r18, r18
    6cb4:	a9 f0       	breq	.+42     	; 0x6ce0 <serial0USB_logPipeIn+0x36>
    6cb6:	c9 2f       	mov	r28, r25
    6cb8:	d8 2f       	mov	r29, r24
    6cba:	8b e6       	ldi	r24, 0x6B	; 107
    6cbc:	1e df       	rcall	.-452    	; 0x6afa <serial0SER_USBSend>
    6cbe:	8c 2f       	mov	r24, r28
    6cc0:	82 95       	swap	r24
    6cc2:	8f 70       	andi	r24, 0x0F	; 15
    6cc4:	11 d2       	rcall	.+1058   	; 0x70e8 <nibbleToChr>
    6cc6:	19 df       	rcall	.-462    	; 0x6afa <serial0SER_USBSend>
    6cc8:	cf 70       	andi	r28, 0x0F	; 15
    6cca:	8c 2f       	mov	r24, r28
    6ccc:	0d d2       	rcall	.+1050   	; 0x70e8 <nibbleToChr>
    6cce:	15 df       	rcall	.-470    	; 0x6afa <serial0SER_USBSend>
    6cd0:	8d 2f       	mov	r24, r29
    6cd2:	82 95       	swap	r24
    6cd4:	8f 70       	andi	r24, 0x0F	; 15
    6cd6:	08 d2       	rcall	.+1040   	; 0x70e8 <nibbleToChr>
    6cd8:	10 df       	rcall	.-480    	; 0x6afa <serial0SER_USBSend>
    6cda:	8c 2f       	mov	r24, r28
    6cdc:	05 d2       	rcall	.+1034   	; 0x70e8 <nibbleToChr>
    6cde:	0d df       	rcall	.-486    	; 0x6afa <serial0SER_USBSend>
    6ce0:	df 91       	pop	r29
    6ce2:	cf 91       	pop	r28
    6ce4:	08 95       	ret

00006ce6 <serial0SER_USB_sendStringP>:
    6ce6:	cf 93       	push	r28
    6ce8:	df 93       	push	r29
    6cea:	fc 01       	movw	r30, r24
    6cec:	02 c0       	rjmp	.+4      	; 0x6cf2 <serial0SER_USB_sendStringP+0xc>
    6cee:	05 df       	rcall	.-502    	; 0x6afa <serial0SER_USBSend>
    6cf0:	fe 01       	movw	r30, r28
    6cf2:	ef 01       	movw	r28, r30
    6cf4:	21 96       	adiw	r28, 0x01	; 1
    6cf6:	84 91       	lpm	r24, Z
    6cf8:	88 23       	and	r24, r24
    6cfa:	21 f0       	breq	.+8      	; 0x6d04 <serial0SER_USB_sendStringP+0x1e>
    6cfc:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6d00:	9f 3f       	cpi	r25, 0xFF	; 255
    6d02:	a9 f7       	brne	.-22     	; 0x6cee <serial0SER_USB_sendStringP+0x8>
    6d04:	df 91       	pop	r29
    6d06:	cf 91       	pop	r28
    6d08:	08 95       	ret

00006d0a <serial0SER_USB_sendCRLF>:
    6d0a:	8b e7       	ldi	r24, 0x7B	; 123
    6d0c:	92 e1       	ldi	r25, 0x12	; 18
    6d0e:	eb cf       	rjmp	.-42     	; 0x6ce6 <serial0SER_USB_sendStringP>
    6d10:	08 95       	ret

00006d12 <init_Serial0SerUSB>:
    6d12:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6d16:	88 e0       	ldi	r24, 0x08	; 8
    6d18:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    6d1c:	e1 ec       	ldi	r30, 0xC1	; 193
    6d1e:	f0 e0       	ldi	r31, 0x00	; 0
    6d20:	80 81       	ld	r24, Z
    6d22:	88 69       	ori	r24, 0x98	; 152
    6d24:	80 83       	st	Z, r24
    6d26:	e2 ec       	ldi	r30, 0xC2	; 194
    6d28:	f0 e0       	ldi	r31, 0x00	; 0
    6d2a:	80 81       	ld	r24, Z
    6d2c:	86 60       	ori	r24, 0x06	; 6
    6d2e:	80 83       	st	Z, r24
    6d30:	81 e0       	ldi	r24, 0x01	; 1
    6d32:	94 e1       	ldi	r25, 0x14	; 20
    6d34:	90 93 55 16 	sts	0x1655, r25	; 0x801655 <serUSBRxInIndex+0x1>
    6d38:	80 93 54 16 	sts	0x1654, r24	; 0x801654 <serUSBRxInIndex>
    6d3c:	90 93 48 16 	sts	0x1648, r25	; 0x801648 <serUSBRxOutIndex+0x1>
    6d40:	80 93 47 16 	sts	0x1647, r24	; 0x801647 <serUSBRxOutIndex>
    6d44:	8d ee       	ldi	r24, 0xED	; 237
    6d46:	9b e0       	ldi	r25, 0x0B	; 11
    6d48:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    6d4c:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    6d50:	90 93 d8 18 	sts	0x18D8, r25	; 0x8018d8 <serUSBTxInIndex+0x1>
    6d54:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <serUSBTxInIndex>
    6d58:	10 92 49 16 	sts	0x1649, r1	; 0x801649 <serUSBOvflFlag>
    6d5c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <eeprom_ReadUSB>
    6d60:	8f 3f       	cpi	r24, 0xFF	; 255
    6d62:	41 f4       	brne	.+16     	; 0x6d74 <init_Serial0SerUSB+0x62>
    6d64:	10 92 52 16 	sts	0x1652, r1	; 0x801652 <serUSB_Active>
    6d68:	40 e0       	ldi	r20, 0x00	; 0
    6d6a:	50 e0       	ldi	r21, 0x00	; 0
    6d6c:	64 e0       	ldi	r22, 0x04	; 4
    6d6e:	81 e0       	ldi	r24, 0x01	; 1
    6d70:	0e 94 fd 14 	call	0x29fa	; 0x29fa <log_putError>
    6d74:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    6d78:	8f 3f       	cpi	r24, 0xFF	; 255
    6d7a:	41 f4       	brne	.+16     	; 0x6d8c <init_Serial0SerUSB+0x7a>
    6d7c:	8a e6       	ldi	r24, 0x6A	; 106
    6d7e:	93 e0       	ldi	r25, 0x03	; 3
    6d80:	b2 df       	rcall	.-156    	; 0x6ce6 <serial0SER_USB_sendStringP>
    6d82:	8b e1       	ldi	r24, 0x1B	; 27
    6d84:	92 e1       	ldi	r25, 0x12	; 18
    6d86:	af df       	rcall	.-162    	; 0x6ce6 <serial0SER_USB_sendStringP>
    6d88:	c0 df       	rcall	.-128    	; 0x6d0a <serial0SER_USB_sendCRLF>
    6d8a:	bf cf       	rjmp	.-130    	; 0x6d0a <serial0SER_USB_sendCRLF>
    6d8c:	08 95       	ret

00006d8e <serial0SER_USB_sendString>:
    6d8e:	1f 93       	push	r17
    6d90:	cf 93       	push	r28
    6d92:	df 93       	push	r29
    6d94:	ec 01       	movw	r28, r24
    6d96:	10 e5       	ldi	r17, 0x50	; 80
    6d98:	03 c0       	rjmp	.+6      	; 0x6da0 <serial0SER_USB_sendString+0x12>
    6d9a:	21 96       	adiw	r28, 0x01	; 1
    6d9c:	ae de       	rcall	.-676    	; 0x6afa <serial0SER_USBSend>
    6d9e:	11 50       	subi	r17, 0x01	; 1
    6da0:	88 81       	ld	r24, Y
    6da2:	88 23       	and	r24, r24
    6da4:	31 f0       	breq	.+12     	; 0x6db2 <serial0SER_USB_sendString+0x24>
    6da6:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6daa:	9f 3f       	cpi	r25, 0xFF	; 255
    6dac:	11 f0       	breq	.+4      	; 0x6db2 <serial0SER_USB_sendString+0x24>
    6dae:	11 11       	cpse	r17, r1
    6db0:	f4 cf       	rjmp	.-24     	; 0x6d9a <serial0SER_USB_sendString+0xc>
    6db2:	df 91       	pop	r29
    6db4:	cf 91       	pop	r28
    6db6:	1f 91       	pop	r17
    6db8:	08 95       	ret

00006dba <__vector_25>:
    6dba:	1f 92       	push	r1
    6dbc:	0f 92       	push	r0
    6dbe:	0f b6       	in	r0, 0x3f	; 63
    6dc0:	0f 92       	push	r0
    6dc2:	11 24       	eor	r1, r1
    6dc4:	0b b6       	in	r0, 0x3b	; 59
    6dc6:	0f 92       	push	r0
    6dc8:	2f 93       	push	r18
    6dca:	3f 93       	push	r19
    6dcc:	4f 93       	push	r20
    6dce:	5f 93       	push	r21
    6dd0:	8f 93       	push	r24
    6dd2:	9f 93       	push	r25
    6dd4:	ef 93       	push	r30
    6dd6:	ff 93       	push	r31
    6dd8:	e0 91 54 16 	lds	r30, 0x1654	; 0x801654 <serUSBRxInIndex>
    6ddc:	f0 91 55 16 	lds	r31, 0x1655	; 0x801655 <serUSBRxInIndex+0x1>
    6de0:	af 01       	movw	r20, r30
    6de2:	4f 5f       	subi	r20, 0xFF	; 255
    6de4:	5f 4f       	sbci	r21, 0xFF	; 255
    6de6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6dea:	80 83       	st	Z, r24
    6dec:	84 e1       	ldi	r24, 0x14	; 20
    6dee:	40 34       	cpi	r20, 0x40	; 64
    6df0:	58 07       	cpc	r21, r24
    6df2:	19 f0       	breq	.+6      	; 0x6dfa <__vector_25+0x40>
    6df4:	10 f0       	brcs	.+4      	; 0x6dfa <__vector_25+0x40>
    6df6:	41 e0       	ldi	r20, 0x01	; 1
    6df8:	54 e1       	ldi	r21, 0x14	; 20
    6dfa:	9f b7       	in	r25, 0x3f	; 63
    6dfc:	f8 94       	cli
    6dfe:	81 e0       	ldi	r24, 0x01	; 1
    6e00:	05 c0       	rjmp	.+10     	; 0x6e0c <__vector_25+0x52>
    6e02:	20 91 47 16 	lds	r18, 0x1647	; 0x801647 <serUSBRxOutIndex>
    6e06:	30 91 48 16 	lds	r19, 0x1648	; 0x801648 <serUSBRxOutIndex+0x1>
    6e0a:	80 e0       	ldi	r24, 0x00	; 0
    6e0c:	81 11       	cpse	r24, r1
    6e0e:	f9 cf       	rjmp	.-14     	; 0x6e02 <__vector_25+0x48>
    6e10:	9f bf       	out	0x3f, r25	; 63
    6e12:	42 17       	cp	r20, r18
    6e14:	53 07       	cpc	r21, r19
    6e16:	21 f4       	brne	.+8      	; 0x6e20 <__vector_25+0x66>
    6e18:	8f ef       	ldi	r24, 0xFF	; 255
    6e1a:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    6e1e:	04 c0       	rjmp	.+8      	; 0x6e28 <__vector_25+0x6e>
    6e20:	50 93 55 16 	sts	0x1655, r21	; 0x801655 <serUSBRxInIndex+0x1>
    6e24:	40 93 54 16 	sts	0x1654, r20	; 0x801654 <serUSBRxInIndex>
    6e28:	ff 91       	pop	r31
    6e2a:	ef 91       	pop	r30
    6e2c:	9f 91       	pop	r25
    6e2e:	8f 91       	pop	r24
    6e30:	5f 91       	pop	r21
    6e32:	4f 91       	pop	r20
    6e34:	3f 91       	pop	r19
    6e36:	2f 91       	pop	r18
    6e38:	0f 90       	pop	r0
    6e3a:	0b be       	out	0x3b, r0	; 59
    6e3c:	0f 90       	pop	r0
    6e3e:	0f be       	out	0x3f, r0	; 63
    6e40:	0f 90       	pop	r0
    6e42:	1f 90       	pop	r1
    6e44:	18 95       	reti

00006e46 <__vector_26>:
    6e46:	1f 92       	push	r1
    6e48:	0f 92       	push	r0
    6e4a:	0f b6       	in	r0, 0x3f	; 63
    6e4c:	0f 92       	push	r0
    6e4e:	11 24       	eor	r1, r1
    6e50:	0b b6       	in	r0, 0x3b	; 59
    6e52:	0f 92       	push	r0
    6e54:	2f 93       	push	r18
    6e56:	8f 93       	push	r24
    6e58:	9f 93       	push	r25
    6e5a:	ef 93       	push	r30
    6e5c:	ff 93       	push	r31
    6e5e:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    6e62:	f0 91 ee 13 	lds	r31, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    6e66:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    6e6a:	90 91 d8 18 	lds	r25, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    6e6e:	e8 17       	cp	r30, r24
    6e70:	f9 07       	cpc	r31, r25
    6e72:	89 f0       	breq	.+34     	; 0x6e96 <__vector_26+0x50>
    6e74:	cf 01       	movw	r24, r30
    6e76:	01 96       	adiw	r24, 0x01	; 1
    6e78:	20 81       	ld	r18, Z
    6e7a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6e7e:	23 e1       	ldi	r18, 0x13	; 19
    6e80:	8c 3e       	cpi	r24, 0xEC	; 236
    6e82:	92 07       	cpc	r25, r18
    6e84:	19 f0       	breq	.+6      	; 0x6e8c <__vector_26+0x46>
    6e86:	10 f0       	brcs	.+4      	; 0x6e8c <__vector_26+0x46>
    6e88:	8d ee       	ldi	r24, 0xED	; 237
    6e8a:	9b e0       	ldi	r25, 0x0B	; 11
    6e8c:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    6e90:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    6e94:	05 c0       	rjmp	.+10     	; 0x6ea0 <__vector_26+0x5a>
    6e96:	e1 ec       	ldi	r30, 0xC1	; 193
    6e98:	f0 e0       	ldi	r31, 0x00	; 0
    6e9a:	80 81       	ld	r24, Z
    6e9c:	8f 7d       	andi	r24, 0xDF	; 223
    6e9e:	80 83       	st	Z, r24
    6ea0:	ff 91       	pop	r31
    6ea2:	ef 91       	pop	r30
    6ea4:	9f 91       	pop	r25
    6ea6:	8f 91       	pop	r24
    6ea8:	2f 91       	pop	r18
    6eaa:	0f 90       	pop	r0
    6eac:	0b be       	out	0x3b, r0	; 59
    6eae:	0f 90       	pop	r0
    6eb0:	0f be       	out	0x3f, r0	; 63
    6eb2:	0f 90       	pop	r0
    6eb4:	1f 90       	pop	r1
    6eb6:	18 95       	reti

00006eb8 <init_Serial3SerESP>:
    6eb8:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    6ebc:	88 e0       	ldi	r24, 0x08	; 8
    6ebe:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    6ec2:	e1 e3       	ldi	r30, 0x31	; 49
    6ec4:	f1 e0       	ldi	r31, 0x01	; 1
    6ec6:	80 81       	ld	r24, Z
    6ec8:	88 69       	ori	r24, 0x98	; 152
    6eca:	80 83       	st	Z, r24
    6ecc:	e2 e3       	ldi	r30, 0x32	; 50
    6ece:	f1 e0       	ldi	r31, 0x01	; 1
    6ed0:	80 81       	ld	r24, Z
    6ed2:	86 60       	ori	r24, 0x06	; 6
    6ed4:	80 83       	st	Z, r24
    6ed6:	87 e5       	ldi	r24, 0x57	; 87
    6ed8:	96 e1       	ldi	r25, 0x16	; 22
    6eda:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <serESPRxInIndex+0x1>
    6ede:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <serESPRxInIndex>
    6ee2:	90 93 fa 13 	sts	0x13FA, r25	; 0x8013fa <serESPRxOutIndex+0x1>
    6ee6:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <serESPRxOutIndex>
    6eea:	87 ed       	ldi	r24, 0xD7	; 215
    6eec:	96 e1       	ldi	r25, 0x16	; 22
    6eee:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    6ef2:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    6ef6:	90 93 46 16 	sts	0x1646, r25	; 0x801646 <serESPTxInIndex+0x1>
    6efa:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <serESPTxInIndex>
    6efe:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <serESPOvflFlag>
    6f02:	8f ef       	ldi	r24, 0xFF	; 255
    6f04:	80 93 4e 16 	sts	0x164E, r24	; 0x80164e <serESP_Active>
    6f08:	80 e0       	ldi	r24, 0x00	; 0
    6f0a:	07 c0       	rjmp	.+14     	; 0x6f1a <init_Serial3SerESP+0x62>
    6f0c:	e8 2f       	mov	r30, r24
    6f0e:	f0 e0       	ldi	r31, 0x00	; 0
    6f10:	ef 50       	subi	r30, 0x0F	; 15
    6f12:	fc 4e       	sbci	r31, 0xEC	; 236
    6f14:	9f ef       	ldi	r25, 0xFF	; 255
    6f16:	90 83       	st	Z, r25
    6f18:	8f 5f       	subi	r24, 0xFF	; 255
    6f1a:	88 30       	cpi	r24, 0x08	; 8
    6f1c:	b8 f3       	brcs	.-18     	; 0x6f0c <init_Serial3SerESP+0x54>
    6f1e:	08 95       	ret

00006f20 <serial3SER_ESPSend>:
    6f20:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <serESPTxInIndex>
    6f24:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    6f28:	a1 e3       	ldi	r26, 0x31	; 49
    6f2a:	b1 e0       	ldi	r27, 0x01	; 1
    6f2c:	9c 91       	ld	r25, X
    6f2e:	9f 7d       	andi	r25, 0xDF	; 223
    6f30:	9c 93       	st	X, r25
    6f32:	af 01       	movw	r20, r30
    6f34:	4f 5f       	subi	r20, 0xFF	; 255
    6f36:	5f 4f       	sbci	r21, 0xFF	; 255
    6f38:	80 83       	st	Z, r24
    6f3a:	88 e1       	ldi	r24, 0x18	; 24
    6f3c:	46 3d       	cpi	r20, 0xD6	; 214
    6f3e:	58 07       	cpc	r21, r24
    6f40:	19 f0       	breq	.+6      	; 0x6f48 <serial3SER_ESPSend+0x28>
    6f42:	10 f0       	brcs	.+4      	; 0x6f48 <serial3SER_ESPSend+0x28>
    6f44:	47 ed       	ldi	r20, 0xD7	; 215
    6f46:	56 e1       	ldi	r21, 0x16	; 22
    6f48:	9f b7       	in	r25, 0x3f	; 63
    6f4a:	f8 94       	cli
    6f4c:	81 e0       	ldi	r24, 0x01	; 1
    6f4e:	05 c0       	rjmp	.+10     	; 0x6f5a <serial3SER_ESPSend+0x3a>
    6f50:	20 91 42 16 	lds	r18, 0x1642	; 0x801642 <serESPTxOutIndex>
    6f54:	30 91 43 16 	lds	r19, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
    6f58:	80 e0       	ldi	r24, 0x00	; 0
    6f5a:	81 11       	cpse	r24, r1
    6f5c:	f9 cf       	rjmp	.-14     	; 0x6f50 <serial3SER_ESPSend+0x30>
    6f5e:	9f bf       	out	0x3f, r25	; 63
    6f60:	42 17       	cp	r20, r18
    6f62:	53 07       	cpc	r21, r19
    6f64:	49 f4       	brne	.+18     	; 0x6f78 <serial3SER_ESPSend+0x58>
    6f66:	8f ef       	ldi	r24, 0xFF	; 255
    6f68:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
    6f6c:	e1 e3       	ldi	r30, 0x31	; 49
    6f6e:	f1 e0       	ldi	r31, 0x01	; 1
    6f70:	80 81       	ld	r24, Z
    6f72:	80 62       	ori	r24, 0x20	; 32
    6f74:	80 83       	st	Z, r24
    6f76:	08 95       	ret
    6f78:	50 93 46 16 	sts	0x1646, r21	; 0x801646 <serESPTxInIndex+0x1>
    6f7c:	40 93 45 16 	sts	0x1645, r20	; 0x801645 <serESPTxInIndex>
    6f80:	e1 e3       	ldi	r30, 0x31	; 49
    6f82:	f1 e0       	ldi	r31, 0x01	; 1
    6f84:	80 81       	ld	r24, Z
    6f86:	80 62       	ori	r24, 0x20	; 32
    6f88:	80 83       	st	Z, r24
    6f8a:	08 95       	ret

00006f8c <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    6f8c:	e0 91 f9 13 	lds	r30, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    6f90:	f0 91 fa 13 	lds	r31, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    6f94:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <serESPRxInIndex>
    6f98:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
    6f9c:	e8 17       	cp	r30, r24
    6f9e:	f9 07       	cpc	r31, r25
    6fa0:	81 f0       	breq	.+32     	; 0x6fc2 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    6fa2:	9f 01       	movw	r18, r30
    6fa4:	2f 5f       	subi	r18, 0xFF	; 255
    6fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    6fa8:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    6faa:	96 e1       	ldi	r25, 0x16	; 22
    6fac:	26 3d       	cpi	r18, 0xD6	; 214
    6fae:	39 07       	cpc	r19, r25
    6fb0:	19 f0       	breq	.+6      	; 0x6fb8 <serial3SER_ESPReadRx+0x2c>
    6fb2:	10 f0       	brcs	.+4      	; 0x6fb8 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    6fb4:	27 e5       	ldi	r18, 0x57	; 87
    6fb6:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    6fb8:	30 93 fa 13 	sts	0x13FA, r19	; 0x8013fa <serESPRxOutIndex+0x1>
    6fbc:	20 93 f9 13 	sts	0x13F9, r18	; 0x8013f9 <serESPRxOutIndex>
    6fc0:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    6fc2:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    6fc4:	08 95       	ret

00006fc6 <__vector_54>:

ISR(USART3_RX_vect) {
    6fc6:	1f 92       	push	r1
    6fc8:	0f 92       	push	r0
    6fca:	0f b6       	in	r0, 0x3f	; 63
    6fcc:	0f 92       	push	r0
    6fce:	11 24       	eor	r1, r1
    6fd0:	0b b6       	in	r0, 0x3b	; 59
    6fd2:	0f 92       	push	r0
    6fd4:	2f 93       	push	r18
    6fd6:	3f 93       	push	r19
    6fd8:	4f 93       	push	r20
    6fda:	5f 93       	push	r21
    6fdc:	6f 93       	push	r22
    6fde:	8f 93       	push	r24
    6fe0:	9f 93       	push	r25
    6fe2:	af 93       	push	r26
    6fe4:	bf 93       	push	r27
    6fe6:	ef 93       	push	r30
    6fe8:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    6fea:	e0 91 fe 13 	lds	r30, 0x13FE	; 0x8013fe <serESPRxInIndex>
    6fee:	f0 91 ff 13 	lds	r31, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    6ff2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    6ff6:	af 01       	movw	r20, r30
    6ff8:	4f 5f       	subi	r20, 0xFF	; 255
    6ffa:	5f 4f       	sbci	r21, 0xFF	; 255
    6ffc:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    6ffe:	86 e1       	ldi	r24, 0x16	; 22
    7000:	46 3d       	cpi	r20, 0xD6	; 214
    7002:	58 07       	cpc	r21, r24
    7004:	19 f0       	breq	.+6      	; 0x700c <__vector_54+0x46>
    7006:	10 f0       	brcs	.+4      	; 0x700c <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    7008:	47 e5       	ldi	r20, 0x57	; 87
    700a:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    700c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    700e:	f8 94       	cli
    7010:	81 e0       	ldi	r24, 0x01	; 1
    7012:	05 c0       	rjmp	.+10     	; 0x701e <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    7014:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    7018:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    701c:	80 e0       	ldi	r24, 0x00	; 0
    701e:	81 11       	cpse	r24, r1
    7020:	f9 cf       	rjmp	.-14     	; 0x7014 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7022:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    7024:	42 17       	cp	r20, r18
    7026:	53 07       	cpc	r21, r19
    7028:	39 f4       	brne	.+14     	; 0x7038 <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    702a:	8f ef       	ldi	r24, 0xFF	; 255
    702c:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7030:	80 e0       	ldi	r24, 0x00	; 0
    7032:	a8 ef       	ldi	r26, 0xF8	; 248
    7034:	b3 e1       	ldi	r27, 0x13	; 19
    7036:	0a c0       	rjmp	.+20     	; 0x704c <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    7038:	50 93 ff 13 	sts	0x13FF, r21	; 0x8013ff <serESPRxInIndex+0x1>
    703c:	40 93 fe 13 	sts	0x13FE, r20	; 0x8013fe <serESPRxInIndex>
    7040:	f7 cf       	rjmp	.-18     	; 0x7030 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    7042:	fd 01       	movw	r30, r26
    7044:	92 91       	ld	r25, -Z
    7046:	9c 93       	st	X, r25
		inpBufferPtr--;
    7048:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    704a:	8f 5f       	subi	r24, 0xFF	; 255
    704c:	87 30       	cpi	r24, 0x07	; 7
    704e:	c8 f3       	brcs	.-14     	; 0x7042 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    7050:	6c 93       	st	X, r22
}
    7052:	ff 91       	pop	r31
    7054:	ef 91       	pop	r30
    7056:	bf 91       	pop	r27
    7058:	af 91       	pop	r26
    705a:	9f 91       	pop	r25
    705c:	8f 91       	pop	r24
    705e:	6f 91       	pop	r22
    7060:	5f 91       	pop	r21
    7062:	4f 91       	pop	r20
    7064:	3f 91       	pop	r19
    7066:	2f 91       	pop	r18
    7068:	0f 90       	pop	r0
    706a:	0b be       	out	0x3b, r0	; 59
    706c:	0f 90       	pop	r0
    706e:	0f be       	out	0x3f, r0	; 63
    7070:	0f 90       	pop	r0
    7072:	1f 90       	pop	r1
    7074:	18 95       	reti

00007076 <__vector_55>:

ISR(USART3_UDRE_vect) {
    7076:	1f 92       	push	r1
    7078:	0f 92       	push	r0
    707a:	0f b6       	in	r0, 0x3f	; 63
    707c:	0f 92       	push	r0
    707e:	11 24       	eor	r1, r1
    7080:	0b b6       	in	r0, 0x3b	; 59
    7082:	0f 92       	push	r0
    7084:	2f 93       	push	r18
    7086:	8f 93       	push	r24
    7088:	9f 93       	push	r25
    708a:	ef 93       	push	r30
    708c:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    708e:	e0 91 42 16 	lds	r30, 0x1642	; 0x801642 <serESPTxOutIndex>
    7092:	f0 91 43 16 	lds	r31, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    7096:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <serESPTxInIndex>
    709a:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    709e:	e8 17       	cp	r30, r24
    70a0:	f9 07       	cpc	r31, r25
    70a2:	89 f0       	breq	.+34     	; 0x70c6 <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    70a4:	cf 01       	movw	r24, r30
    70a6:	01 96       	adiw	r24, 0x01	; 1
    70a8:	20 81       	ld	r18, Z
    70aa:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    70ae:	28 e1       	ldi	r18, 0x18	; 24
    70b0:	86 3d       	cpi	r24, 0xD6	; 214
    70b2:	92 07       	cpc	r25, r18
    70b4:	19 f0       	breq	.+6      	; 0x70bc <__vector_55+0x46>
    70b6:	10 f0       	brcs	.+4      	; 0x70bc <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    70b8:	87 ed       	ldi	r24, 0xD7	; 215
    70ba:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    70bc:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    70c0:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    70c4:	05 c0       	rjmp	.+10     	; 0x70d0 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    70c6:	e1 e3       	ldi	r30, 0x31	; 49
    70c8:	f1 e0       	ldi	r31, 0x01	; 1
    70ca:	80 81       	ld	r24, Z
    70cc:	8f 7d       	andi	r24, 0xDF	; 223
    70ce:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    70d0:	ff 91       	pop	r31
    70d2:	ef 91       	pop	r30
    70d4:	9f 91       	pop	r25
    70d6:	8f 91       	pop	r24
    70d8:	2f 91       	pop	r18
    70da:	0f 90       	pop	r0
    70dc:	0b be       	out	0x3b, r0	; 59
    70de:	0f 90       	pop	r0
    70e0:	0f be       	out	0x3f, r0	; 63
    70e2:	0f 90       	pop	r0
    70e4:	1f 90       	pop	r1
    70e6:	18 95       	reti

000070e8 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    70e8:	8a 30       	cpi	r24, 0x0A	; 10
    70ea:	10 f0       	brcs	.+4      	; 0x70f0 <nibbleToChr+0x8>
    70ec:	89 5c       	subi	r24, 0xC9	; 201
    70ee:	08 95       	ret
    70f0:	80 5d       	subi	r24, 0xD0	; 208
    70f2:	08 95       	ret

000070f4 <lcd_setCG>:
    70f4:	ef 92       	push	r14
    70f6:	ff 92       	push	r15
    70f8:	1f 93       	push	r17
    70fa:	cf 93       	push	r28
    70fc:	df 93       	push	r29
    70fe:	eb 01       	movw	r28, r22
    7100:	90 e0       	ldi	r25, 0x00	; 0
    7102:	88 0f       	add	r24, r24
    7104:	99 1f       	adc	r25, r25
    7106:	88 0f       	add	r24, r24
    7108:	99 1f       	adc	r25, r25
    710a:	88 0f       	add	r24, r24
    710c:	99 1f       	adc	r25, r25
    710e:	80 64       	ori	r24, 0x40	; 64
    7110:	0e 94 4b 12 	call	0x2496	; 0x2496 <lcd_write_command>
    7114:	10 e0       	ldi	r17, 0x00	; 0
    7116:	0a c0       	rjmp	.+20     	; 0x712c <lcd_setCG+0x38>
    7118:	7e 01       	movw	r14, r28
    711a:	8f ef       	ldi	r24, 0xFF	; 255
    711c:	e8 1a       	sub	r14, r24
    711e:	f8 0a       	sbc	r15, r24
    7120:	fe 01       	movw	r30, r28
    7122:	84 91       	lpm	r24, Z
    7124:	0e 94 27 12 	call	0x244e	; 0x244e <lcd_write_character>
    7128:	1f 5f       	subi	r17, 0xFF	; 255
    712a:	e7 01       	movw	r28, r14
    712c:	18 30       	cpi	r17, 0x08	; 8
    712e:	a0 f3       	brcs	.-24     	; 0x7118 <lcd_setCG+0x24>
    7130:	df 91       	pop	r29
    7132:	cf 91       	pop	r28
    7134:	1f 91       	pop	r17
    7136:	ff 90       	pop	r15
    7138:	ef 90       	pop	r14
    713a:	08 95       	ret

0000713c <lcd_initCG>:
    713c:	63 e7       	ldi	r22, 0x73	; 115
    713e:	72 e1       	ldi	r23, 0x12	; 18
    7140:	80 e0       	ldi	r24, 0x00	; 0
    7142:	d8 df       	rcall	.-80     	; 0x70f4 <lcd_setCG>
    7144:	6b e6       	ldi	r22, 0x6B	; 107
    7146:	72 e1       	ldi	r23, 0x12	; 18
    7148:	81 e0       	ldi	r24, 0x01	; 1
    714a:	d4 df       	rcall	.-88     	; 0x70f4 <lcd_setCG>
    714c:	63 e6       	ldi	r22, 0x63	; 99
    714e:	72 e1       	ldi	r23, 0x12	; 18
    7150:	82 e0       	ldi	r24, 0x02	; 2
    7152:	d0 cf       	rjmp	.-96     	; 0x70f4 <lcd_setCG>
    7154:	08 95       	ret

00007156 <lcd_hexout>:
    7156:	cf 93       	push	r28
    7158:	c8 2f       	mov	r28, r24
    715a:	82 95       	swap	r24
    715c:	8f 70       	andi	r24, 0x0F	; 15
    715e:	8a 30       	cpi	r24, 0x0A	; 10
    7160:	10 f0       	brcs	.+4      	; 0x7166 <lcd_hexout+0x10>
    7162:	89 5c       	subi	r24, 0xC9	; 201
    7164:	01 c0       	rjmp	.+2      	; 0x7168 <lcd_hexout+0x12>
    7166:	80 5d       	subi	r24, 0xD0	; 208
    7168:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    716c:	cf 70       	andi	r28, 0x0F	; 15
    716e:	ca 30       	cpi	r28, 0x0A	; 10
    7170:	18 f0       	brcs	.+6      	; 0x7178 <lcd_hexout+0x22>
    7172:	87 e3       	ldi	r24, 0x37	; 55
    7174:	8c 0f       	add	r24, r28
    7176:	02 c0       	rjmp	.+4      	; 0x717c <lcd_hexout+0x26>
    7178:	80 e3       	ldi	r24, 0x30	; 48
    717a:	8c 0f       	add	r24, r28
    717c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    7180:	cf 91       	pop	r28
    7182:	08 95       	ret

00007184 <lcd_longout>:
    7184:	cf 93       	push	r28
    7186:	df 93       	push	r29
    7188:	d3 e0       	ldi	r29, 0x03	; 3
    718a:	1c c0       	rjmp	.+56     	; 0x71c4 <lcd_longout+0x40>
    718c:	ed 2f       	mov	r30, r29
    718e:	0d 2e       	mov	r0, r29
    7190:	00 0c       	add	r0, r0
    7192:	ff 0b       	sbc	r31, r31
    7194:	e3 52       	subi	r30, 0x23	; 35
    7196:	f7 4e       	sbci	r31, 0xE7	; 231
    7198:	c0 81       	ld	r28, Z
    719a:	8c 2f       	mov	r24, r28
    719c:	82 95       	swap	r24
    719e:	8f 70       	andi	r24, 0x0F	; 15
    71a0:	8a 30       	cpi	r24, 0x0A	; 10
    71a2:	10 f0       	brcs	.+4      	; 0x71a8 <lcd_longout+0x24>
    71a4:	89 5c       	subi	r24, 0xC9	; 201
    71a6:	01 c0       	rjmp	.+2      	; 0x71aa <lcd_longout+0x26>
    71a8:	80 5d       	subi	r24, 0xD0	; 208
    71aa:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    71ae:	cf 70       	andi	r28, 0x0F	; 15
    71b0:	ca 30       	cpi	r28, 0x0A	; 10
    71b2:	18 f0       	brcs	.+6      	; 0x71ba <lcd_longout+0x36>
    71b4:	87 e3       	ldi	r24, 0x37	; 55
    71b6:	8c 0f       	add	r24, r28
    71b8:	02 c0       	rjmp	.+4      	; 0x71be <lcd_longout+0x3a>
    71ba:	80 e3       	ldi	r24, 0x30	; 48
    71bc:	8c 0f       	add	r24, r28
    71be:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    71c2:	d1 50       	subi	r29, 0x01	; 1
    71c4:	dd 23       	and	r29, r29
    71c6:	14 f7       	brge	.-60     	; 0x718c <lcd_longout+0x8>
    71c8:	df 91       	pop	r29
    71ca:	cf 91       	pop	r28
    71cc:	08 95       	ret

000071ce <lcd_dec2out>:
    71ce:	cf 93       	push	r28
    71d0:	c8 2f       	mov	r28, r24
    71d2:	84 36       	cpi	r24, 0x64	; 100
    71d4:	50 f0       	brcs	.+20     	; 0x71ea <lcd_dec2out+0x1c>
    71d6:	8d e2       	ldi	r24, 0x2D	; 45
    71d8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    71dc:	8d e2       	ldi	r24, 0x2D	; 45
    71de:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    71e2:	0d c0       	rjmp	.+26     	; 0x71fe <lcd_dec2out+0x30>
    71e4:	ca 50       	subi	r28, 0x0A	; 10
    71e6:	8f 5f       	subi	r24, 0xFF	; 255
    71e8:	01 c0       	rjmp	.+2      	; 0x71ec <lcd_dec2out+0x1e>
    71ea:	80 e0       	ldi	r24, 0x00	; 0
    71ec:	ca 30       	cpi	r28, 0x0A	; 10
    71ee:	d0 f7       	brcc	.-12     	; 0x71e4 <lcd_dec2out+0x16>
    71f0:	80 5d       	subi	r24, 0xD0	; 208
    71f2:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    71f6:	80 e3       	ldi	r24, 0x30	; 48
    71f8:	8c 0f       	add	r24, r28
    71fa:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    71fe:	cf 91       	pop	r28
    7200:	08 95       	ret

00007202 <putChar_Dec2>:
    7202:	84 36       	cpi	r24, 0x64	; 100
    7204:	58 f0       	brcs	.+22     	; 0x721c <putChar_Dec2+0x1a>
    7206:	8d e2       	ldi	r24, 0x2D	; 45
    7208:	db 01       	movw	r26, r22
    720a:	8c 93       	st	X, r24
    720c:	fb 01       	movw	r30, r22
    720e:	32 96       	adiw	r30, 0x02	; 2
    7210:	11 96       	adiw	r26, 0x01	; 1
    7212:	8c 93       	st	X, r24
    7214:	0f c0       	rjmp	.+30     	; 0x7234 <putChar_Dec2+0x32>
    7216:	8a 50       	subi	r24, 0x0A	; 10
    7218:	9f 5f       	subi	r25, 0xFF	; 255
    721a:	01 c0       	rjmp	.+2      	; 0x721e <putChar_Dec2+0x1c>
    721c:	90 e0       	ldi	r25, 0x00	; 0
    721e:	8a 30       	cpi	r24, 0x0A	; 10
    7220:	d0 f7       	brcc	.-12     	; 0x7216 <putChar_Dec2+0x14>
    7222:	90 5d       	subi	r25, 0xD0	; 208
    7224:	fb 01       	movw	r30, r22
    7226:	90 83       	st	Z, r25
    7228:	32 96       	adiw	r30, 0x02	; 2
    722a:	90 e3       	ldi	r25, 0x30	; 48
    722c:	98 0f       	add	r25, r24
    722e:	db 01       	movw	r26, r22
    7230:	11 96       	adiw	r26, 0x01	; 1
    7232:	9c 93       	st	X, r25
    7234:	10 82       	st	Z, r1
    7236:	cf 01       	movw	r24, r30
    7238:	08 95       	ret

0000723a <putChar_Dec>:
    723a:	90 e0       	ldi	r25, 0x00	; 0
    723c:	02 c0       	rjmp	.+4      	; 0x7242 <putChar_Dec+0x8>
    723e:	84 56       	subi	r24, 0x64	; 100
    7240:	9f 5f       	subi	r25, 0xFF	; 255
    7242:	84 36       	cpi	r24, 0x64	; 100
    7244:	e0 f7       	brcc	.-8      	; 0x723e <putChar_Dec+0x4>
    7246:	99 23       	and	r25, r25
    7248:	39 f0       	breq	.+14     	; 0x7258 <putChar_Dec+0x1e>
    724a:	90 5d       	subi	r25, 0xD0	; 208
    724c:	db 01       	movw	r26, r22
    724e:	9c 93       	st	X, r25
    7250:	6f 5f       	subi	r22, 0xFF	; 255
    7252:	7f 4f       	sbci	r23, 0xFF	; 255
    7254:	2f ef       	ldi	r18, 0xFF	; 255
    7256:	01 c0       	rjmp	.+2      	; 0x725a <putChar_Dec+0x20>
    7258:	20 e0       	ldi	r18, 0x00	; 0
    725a:	90 e0       	ldi	r25, 0x00	; 0
    725c:	02 c0       	rjmp	.+4      	; 0x7262 <putChar_Dec+0x28>
    725e:	8a 50       	subi	r24, 0x0A	; 10
    7260:	9f 5f       	subi	r25, 0xFF	; 255
    7262:	8a 30       	cpi	r24, 0x0A	; 10
    7264:	e0 f7       	brcc	.-8      	; 0x725e <putChar_Dec+0x24>
    7266:	91 11       	cpse	r25, r1
    7268:	02 c0       	rjmp	.+4      	; 0x726e <putChar_Dec+0x34>
    726a:	2f 3f       	cpi	r18, 0xFF	; 255
    726c:	31 f4       	brne	.+12     	; 0x727a <putChar_Dec+0x40>
    726e:	fb 01       	movw	r30, r22
    7270:	31 96       	adiw	r30, 0x01	; 1
    7272:	90 5d       	subi	r25, 0xD0	; 208
    7274:	db 01       	movw	r26, r22
    7276:	9c 93       	st	X, r25
    7278:	01 c0       	rjmp	.+2      	; 0x727c <putChar_Dec+0x42>
    727a:	fb 01       	movw	r30, r22
    727c:	80 5d       	subi	r24, 0xD0	; 208
    727e:	80 83       	st	Z, r24
    7280:	11 82       	std	Z+1, r1	; 0x01
    7282:	cf 01       	movw	r24, r30
    7284:	01 96       	adiw	r24, 0x01	; 1
    7286:	08 95       	ret

00007288 <putChar_hex>:
    7288:	fb 01       	movw	r30, r22
    728a:	98 2f       	mov	r25, r24
    728c:	92 95       	swap	r25
    728e:	9f 70       	andi	r25, 0x0F	; 15
    7290:	9a 30       	cpi	r25, 0x0A	; 10
    7292:	10 f0       	brcs	.+4      	; 0x7298 <putChar_hex+0x10>
    7294:	99 5c       	subi	r25, 0xC9	; 201
    7296:	01 c0       	rjmp	.+2      	; 0x729a <putChar_hex+0x12>
    7298:	90 5d       	subi	r25, 0xD0	; 208
    729a:	90 83       	st	Z, r25
    729c:	98 2f       	mov	r25, r24
    729e:	9f 70       	andi	r25, 0x0F	; 15
    72a0:	9f 01       	movw	r18, r30
    72a2:	2e 5f       	subi	r18, 0xFE	; 254
    72a4:	3f 4f       	sbci	r19, 0xFF	; 255
    72a6:	9a 30       	cpi	r25, 0x0A	; 10
    72a8:	10 f0       	brcs	.+4      	; 0x72ae <putChar_hex+0x26>
    72aa:	99 5c       	subi	r25, 0xC9	; 201
    72ac:	01 c0       	rjmp	.+2      	; 0x72b0 <putChar_hex+0x28>
    72ae:	90 5d       	subi	r25, 0xD0	; 208
    72b0:	91 83       	std	Z+1, r25	; 0x01
    72b2:	12 82       	std	Z+2, r1	; 0x02
    72b4:	c9 01       	movw	r24, r18
    72b6:	08 95       	ret

000072b8 <putChar_MidiChan>:
    72b8:	80 31       	cpi	r24, 0x10	; 16
    72ba:	48 f0       	brcs	.+18     	; 0x72ce <putChar_MidiChan+0x16>
    72bc:	8e e6       	ldi	r24, 0x6E	; 110
    72be:	db 01       	movw	r26, r22
    72c0:	8c 93       	st	X, r24
    72c2:	fb 01       	movw	r30, r22
    72c4:	32 96       	adiw	r30, 0x02	; 2
    72c6:	8f e6       	ldi	r24, 0x6F	; 111
    72c8:	11 96       	adiw	r26, 0x01	; 1
    72ca:	8c 93       	st	X, r24
    72cc:	15 c0       	rjmp	.+42     	; 0x72f8 <putChar_MidiChan+0x40>
    72ce:	91 e0       	ldi	r25, 0x01	; 1
    72d0:	98 0f       	add	r25, r24
    72d2:	9a 30       	cpi	r25, 0x0A	; 10
    72d4:	40 f0       	brcs	.+16     	; 0x72e6 <putChar_MidiChan+0x2e>
    72d6:	db 01       	movw	r26, r22
    72d8:	11 96       	adiw	r26, 0x01	; 1
    72da:	91 e3       	ldi	r25, 0x31	; 49
    72dc:	fb 01       	movw	r30, r22
    72de:	90 83       	st	Z, r25
    72e0:	97 ef       	ldi	r25, 0xF7	; 247
    72e2:	98 0f       	add	r25, r24
    72e4:	05 c0       	rjmp	.+10     	; 0x72f0 <putChar_MidiChan+0x38>
    72e6:	db 01       	movw	r26, r22
    72e8:	11 96       	adiw	r26, 0x01	; 1
    72ea:	80 e2       	ldi	r24, 0x20	; 32
    72ec:	fb 01       	movw	r30, r22
    72ee:	80 83       	st	Z, r24
    72f0:	fd 01       	movw	r30, r26
    72f2:	31 96       	adiw	r30, 0x01	; 1
    72f4:	90 5d       	subi	r25, 0xD0	; 208
    72f6:	9c 93       	st	X, r25
    72f8:	10 82       	st	Z, r1
    72fa:	cf 01       	movw	r24, r30
    72fc:	08 95       	ret

000072fe <putChar_long>:
    72fe:	ac 01       	movw	r20, r24
    7300:	fb 01       	movw	r30, r22
    7302:	34 96       	adiw	r30, 0x04	; 4
    7304:	db 01       	movw	r26, r22
    7306:	14 96       	adiw	r26, 0x04	; 4
    7308:	1c 92       	st	X, r1
    730a:	20 e0       	ldi	r18, 0x00	; 0
    730c:	10 c0       	rjmp	.+32     	; 0x732e <putChar_long+0x30>
    730e:	94 2f       	mov	r25, r20
    7310:	9f 70       	andi	r25, 0x0F	; 15
    7312:	31 97       	sbiw	r30, 0x01	; 1
    7314:	9a 30       	cpi	r25, 0x0A	; 10
    7316:	10 f0       	brcs	.+4      	; 0x731c <putChar_long+0x1e>
    7318:	99 5c       	subi	r25, 0xC9	; 201
    731a:	01 c0       	rjmp	.+2      	; 0x731e <putChar_long+0x20>
    731c:	90 5d       	subi	r25, 0xD0	; 208
    731e:	90 83       	st	Z, r25
    7320:	52 95       	swap	r21
    7322:	42 95       	swap	r20
    7324:	4f 70       	andi	r20, 0x0F	; 15
    7326:	45 27       	eor	r20, r21
    7328:	5f 70       	andi	r21, 0x0F	; 15
    732a:	45 27       	eor	r20, r21
    732c:	2f 5f       	subi	r18, 0xFF	; 255
    732e:	24 30       	cpi	r18, 0x04	; 4
    7330:	70 f3       	brcs	.-36     	; 0x730e <putChar_long+0x10>
    7332:	cf 01       	movw	r24, r30
    7334:	04 96       	adiw	r24, 0x04	; 4
    7336:	08 95       	ret

00007338 <putChar_Note>:
    7338:	88 23       	and	r24, r24
    733a:	8c f4       	brge	.+34     	; 0x735e <putChar_Note+0x26>
    733c:	8d e2       	ldi	r24, 0x2D	; 45
    733e:	db 01       	movw	r26, r22
    7340:	8c 93       	st	X, r24
    7342:	9e e6       	ldi	r25, 0x6E	; 110
    7344:	11 96       	adiw	r26, 0x01	; 1
    7346:	9c 93       	st	X, r25
    7348:	11 97       	sbiw	r26, 0x01	; 1
    734a:	12 96       	adiw	r26, 0x02	; 2
    734c:	8c 93       	st	X, r24
    734e:	12 97       	sbiw	r26, 0x02	; 2
    7350:	14 96       	adiw	r26, 0x04	; 4
    7352:	fb 01       	movw	r30, r22
    7354:	13 82       	std	Z+3, r1	; 0x03
    7356:	49 c0       	rjmp	.+146    	; 0x73ea <putChar_Note+0xb2>
    7358:	8c 50       	subi	r24, 0x0C	; 12
    735a:	9f 5f       	subi	r25, 0xFF	; 255
    735c:	01 c0       	rjmp	.+2      	; 0x7360 <putChar_Note+0x28>
    735e:	90 e0       	ldi	r25, 0x00	; 0
    7360:	8c 30       	cpi	r24, 0x0C	; 12
    7362:	d0 f7       	brcc	.-12     	; 0x7358 <putChar_Note+0x20>
    7364:	8b 30       	cpi	r24, 0x0B	; 11
    7366:	39 f4       	brne	.+14     	; 0x7376 <putChar_Note+0x3e>
    7368:	fb 01       	movw	r30, r22
    736a:	31 96       	adiw	r30, 0x01	; 1
    736c:	88 e4       	ldi	r24, 0x48	; 72
    736e:	db 01       	movw	r26, r22
    7370:	8c 93       	st	X, r24
    7372:	8f e5       	ldi	r24, 0x5F	; 95
    7374:	27 c0       	rjmp	.+78     	; 0x73c4 <putChar_Note+0x8c>
    7376:	85 30       	cpi	r24, 0x05	; 5
    7378:	58 f4       	brcc	.+22     	; 0x7390 <putChar_Note+0x58>
    737a:	fb 01       	movw	r30, r22
    737c:	31 96       	adiw	r30, 0x01	; 1
    737e:	28 2f       	mov	r18, r24
    7380:	26 95       	lsr	r18
    7382:	2d 5b       	subi	r18, 0xBD	; 189
    7384:	db 01       	movw	r26, r22
    7386:	2c 93       	st	X, r18
    7388:	80 fd       	sbrc	r24, 0
    738a:	19 c0       	rjmp	.+50     	; 0x73be <putChar_Note+0x86>
    738c:	8f e5       	ldi	r24, 0x5F	; 95
    738e:	1a c0       	rjmp	.+52     	; 0x73c4 <putChar_Note+0x8c>
    7390:	89 30       	cpi	r24, 0x09	; 9
    7392:	30 f0       	brcs	.+12     	; 0x73a0 <putChar_Note+0x68>
    7394:	fb 01       	movw	r30, r22
    7396:	31 96       	adiw	r30, 0x01	; 1
    7398:	21 e4       	ldi	r18, 0x41	; 65
    739a:	db 01       	movw	r26, r22
    739c:	2c 93       	st	X, r18
    739e:	0b c0       	rjmp	.+22     	; 0x73b6 <putChar_Note+0x7e>
    73a0:	fb 01       	movw	r30, r22
    73a2:	31 96       	adiw	r30, 0x01	; 1
    73a4:	28 2f       	mov	r18, r24
    73a6:	30 e0       	ldi	r19, 0x00	; 0
    73a8:	25 50       	subi	r18, 0x05	; 5
    73aa:	31 09       	sbc	r19, r1
    73ac:	35 95       	asr	r19
    73ae:	27 95       	ror	r18
    73b0:	2a 5b       	subi	r18, 0xBA	; 186
    73b2:	db 01       	movw	r26, r22
    73b4:	2c 93       	st	X, r18
    73b6:	80 ff       	sbrs	r24, 0
    73b8:	04 c0       	rjmp	.+8      	; 0x73c2 <putChar_Note+0x8a>
    73ba:	8f e5       	ldi	r24, 0x5F	; 95
    73bc:	03 c0       	rjmp	.+6      	; 0x73c4 <putChar_Note+0x8c>
    73be:	83 e2       	ldi	r24, 0x23	; 35
    73c0:	01 c0       	rjmp	.+2      	; 0x73c4 <putChar_Note+0x8c>
    73c2:	83 e2       	ldi	r24, 0x23	; 35
    73c4:	80 83       	st	Z, r24
    73c6:	91 11       	cpse	r25, r1
    73c8:	05 c0       	rjmp	.+10     	; 0x73d4 <putChar_Note+0x9c>
    73ca:	df 01       	movw	r26, r30
    73cc:	12 96       	adiw	r26, 0x02	; 2
    73ce:	8d e6       	ldi	r24, 0x6D	; 109
    73d0:	81 83       	std	Z+1, r24	; 0x01
    73d2:	0b c0       	rjmp	.+22     	; 0x73ea <putChar_Note+0xb2>
    73d4:	9c 30       	cpi	r25, 0x0C	; 12
    73d6:	28 f4       	brcc	.+10     	; 0x73e2 <putChar_Note+0xaa>
    73d8:	df 01       	movw	r26, r30
    73da:	12 96       	adiw	r26, 0x02	; 2
    73dc:	91 5d       	subi	r25, 0xD1	; 209
    73de:	91 83       	std	Z+1, r25	; 0x01
    73e0:	04 c0       	rjmp	.+8      	; 0x73ea <putChar_Note+0xb2>
    73e2:	df 01       	movw	r26, r30
    73e4:	12 96       	adiw	r26, 0x02	; 2
    73e6:	8d e2       	ldi	r24, 0x2D	; 45
    73e8:	81 83       	std	Z+1, r24	; 0x01
    73ea:	1c 92       	st	X, r1
    73ec:	cd 01       	movw	r24, r26
    73ee:	08 95       	ret

000073f0 <putChar_Manual>:
    73f0:	83 30       	cpi	r24, 0x03	; 3
    73f2:	38 f4       	brcc	.+14     	; 0x7402 <putChar_Manual+0x12>
    73f4:	fb 01       	movw	r30, r22
    73f6:	31 96       	adiw	r30, 0x01	; 1
    73f8:	93 e3       	ldi	r25, 0x33	; 51
    73fa:	98 1b       	sub	r25, r24
    73fc:	db 01       	movw	r26, r22
    73fe:	9c 93       	st	X, r25
    7400:	0d c0       	rjmp	.+26     	; 0x741c <putChar_Manual+0x2c>
    7402:	83 30       	cpi	r24, 0x03	; 3
    7404:	31 f4       	brne	.+12     	; 0x7412 <putChar_Manual+0x22>
    7406:	fb 01       	movw	r30, r22
    7408:	31 96       	adiw	r30, 0x01	; 1
    740a:	80 e5       	ldi	r24, 0x50	; 80
    740c:	db 01       	movw	r26, r22
    740e:	8c 93       	st	X, r24
    7410:	05 c0       	rjmp	.+10     	; 0x741c <putChar_Manual+0x2c>
    7412:	fb 01       	movw	r30, r22
    7414:	31 96       	adiw	r30, 0x01	; 1
    7416:	8d e2       	ldi	r24, 0x2D	; 45
    7418:	db 01       	movw	r26, r22
    741a:	8c 93       	st	X, r24
    741c:	10 82       	st	Z, r1
    741e:	cf 01       	movw	r24, r30
    7420:	08 95       	ret

00007422 <putString_P>:
    7422:	fc 01       	movw	r30, r24
    7424:	db 01       	movw	r26, r22
    7426:	20 e0       	ldi	r18, 0x00	; 0
    7428:	02 c0       	rjmp	.+4      	; 0x742e <putString_P+0xc>
    742a:	28 2f       	mov	r18, r24
    742c:	da 01       	movw	r26, r20
    742e:	94 91       	lpm	r25, Z
    7430:	99 23       	and	r25, r25
    7432:	51 f0       	breq	.+20     	; 0x7448 <putString_P+0x26>
    7434:	ad 01       	movw	r20, r26
    7436:	4f 5f       	subi	r20, 0xFF	; 255
    7438:	5f 4f       	sbci	r21, 0xFF	; 255
    743a:	31 96       	adiw	r30, 0x01	; 1
    743c:	9c 93       	st	X, r25
    743e:	81 e0       	ldi	r24, 0x01	; 1
    7440:	82 0f       	add	r24, r18
    7442:	24 31       	cpi	r18, 0x14	; 20
    7444:	90 f3       	brcs	.-28     	; 0x742a <putString_P+0x8>
    7446:	01 c0       	rjmp	.+2      	; 0x744a <putString_P+0x28>
    7448:	ad 01       	movw	r20, r26
    744a:	ca 01       	movw	r24, r20
    744c:	08 95       	ret

0000744e <lcd_wordout>:
    744e:	cf 93       	push	r28
    7450:	c8 2f       	mov	r28, r24
    7452:	89 2f       	mov	r24, r25
    7454:	80 de       	rcall	.-768    	; 0x7156 <lcd_hexout>
    7456:	8c 2f       	mov	r24, r28
    7458:	7e de       	rcall	.-772    	; 0x7156 <lcd_hexout>
    745a:	cf 91       	pop	r28
    745c:	08 95       	ret

0000745e <lcd_noteOut>:
    745e:	cf 93       	push	r28
    7460:	df 93       	push	r29
    7462:	88 23       	and	r24, r24
    7464:	e4 f1       	brlt	.+120    	; 0x74de <lcd_noteOut+0x80>
    7466:	90 e0       	ldi	r25, 0x00	; 0
    7468:	02 c0       	rjmp	.+4      	; 0x746e <lcd_noteOut+0x10>
    746a:	9f 5f       	subi	r25, 0xFF	; 255
    746c:	8c 50       	subi	r24, 0x0C	; 12
    746e:	8c 30       	cpi	r24, 0x0C	; 12
    7470:	e0 f7       	brcc	.-8      	; 0x746a <lcd_noteOut+0xc>
    7472:	48 2f       	mov	r20, r24
    7474:	50 e0       	ldi	r21, 0x00	; 0
    7476:	4c 30       	cpi	r20, 0x0C	; 12
    7478:	51 05       	cpc	r21, r1
    747a:	30 f4       	brcc	.+12     	; 0x7488 <lcd_noteOut+0x2a>
    747c:	fa 01       	movw	r30, r20
    747e:	88 27       	eor	r24, r24
    7480:	ea 55       	subi	r30, 0x5A	; 90
    7482:	ff 4f       	sbci	r31, 0xFF	; 255
    7484:	8f 4f       	sbci	r24, 0xFF	; 255
    7486:	5d c1       	rjmp	.+698    	; 0x7742 <__tablejump2__>
    7488:	d3 e2       	ldi	r29, 0x23	; 35
    748a:	80 e2       	ldi	r24, 0x20	; 32
    748c:	23 c0       	rjmp	.+70     	; 0x74d4 <lcd_noteOut+0x76>
    748e:	d3 e2       	ldi	r29, 0x23	; 35
    7490:	84 e4       	ldi	r24, 0x44	; 68
    7492:	20 c0       	rjmp	.+64     	; 0x74d4 <lcd_noteOut+0x76>
    7494:	d3 e2       	ldi	r29, 0x23	; 35
    7496:	86 e4       	ldi	r24, 0x46	; 70
    7498:	1d c0       	rjmp	.+58     	; 0x74d4 <lcd_noteOut+0x76>
    749a:	d3 e2       	ldi	r29, 0x23	; 35
    749c:	87 e4       	ldi	r24, 0x47	; 71
    749e:	1a c0       	rjmp	.+52     	; 0x74d4 <lcd_noteOut+0x76>
    74a0:	d3 e2       	ldi	r29, 0x23	; 35
    74a2:	81 e4       	ldi	r24, 0x41	; 65
    74a4:	17 c0       	rjmp	.+46     	; 0x74d4 <lcd_noteOut+0x76>
    74a6:	d5 ea       	ldi	r29, 0xA5	; 165
    74a8:	83 e4       	ldi	r24, 0x43	; 67
    74aa:	14 c0       	rjmp	.+40     	; 0x74d4 <lcd_noteOut+0x76>
    74ac:	d5 ea       	ldi	r29, 0xA5	; 165
    74ae:	84 e4       	ldi	r24, 0x44	; 68
    74b0:	11 c0       	rjmp	.+34     	; 0x74d4 <lcd_noteOut+0x76>
    74b2:	d5 ea       	ldi	r29, 0xA5	; 165
    74b4:	85 e4       	ldi	r24, 0x45	; 69
    74b6:	0e c0       	rjmp	.+28     	; 0x74d4 <lcd_noteOut+0x76>
    74b8:	d5 ea       	ldi	r29, 0xA5	; 165
    74ba:	86 e4       	ldi	r24, 0x46	; 70
    74bc:	0b c0       	rjmp	.+22     	; 0x74d4 <lcd_noteOut+0x76>
    74be:	d5 ea       	ldi	r29, 0xA5	; 165
    74c0:	87 e4       	ldi	r24, 0x47	; 71
    74c2:	08 c0       	rjmp	.+16     	; 0x74d4 <lcd_noteOut+0x76>
    74c4:	d5 ea       	ldi	r29, 0xA5	; 165
    74c6:	81 e4       	ldi	r24, 0x41	; 65
    74c8:	05 c0       	rjmp	.+10     	; 0x74d4 <lcd_noteOut+0x76>
    74ca:	d5 ea       	ldi	r29, 0xA5	; 165
    74cc:	88 e4       	ldi	r24, 0x48	; 72
    74ce:	02 c0       	rjmp	.+4      	; 0x74d4 <lcd_noteOut+0x76>
    74d0:	d3 e2       	ldi	r29, 0x23	; 35
    74d2:	83 e4       	ldi	r24, 0x43	; 67
    74d4:	99 23       	and	r25, r25
    74d6:	39 f0       	breq	.+14     	; 0x74e6 <lcd_noteOut+0x88>
    74d8:	cf e2       	ldi	r28, 0x2F	; 47
    74da:	c9 0f       	add	r28, r25
    74dc:	05 c0       	rjmp	.+10     	; 0x74e8 <lcd_noteOut+0x8a>
    74de:	cd e2       	ldi	r28, 0x2D	; 45
    74e0:	dd e2       	ldi	r29, 0x2D	; 45
    74e2:	8d e2       	ldi	r24, 0x2D	; 45
    74e4:	01 c0       	rjmp	.+2      	; 0x74e8 <lcd_noteOut+0x8a>
    74e6:	cd e2       	ldi	r28, 0x2D	; 45
    74e8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    74ec:	8d 2f       	mov	r24, r29
    74ee:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    74f2:	8c 2f       	mov	r24, r28
    74f4:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    74f8:	83 e0       	ldi	r24, 0x03	; 3
    74fa:	df 91       	pop	r29
    74fc:	cf 91       	pop	r28
    74fe:	08 95       	ret

00007500 <lcd_ChannelOut>:
    7500:	cf 93       	push	r28
    7502:	c8 2f       	mov	r28, r24
    7504:	cf 70       	andi	r28, 0x0F	; 15
    7506:	81 e0       	ldi	r24, 0x01	; 1
    7508:	8c 0f       	add	r24, r28
    750a:	8a 30       	cpi	r24, 0x0A	; 10
    750c:	28 f0       	brcs	.+10     	; 0x7518 <lcd_ChannelOut+0x18>
    750e:	81 e3       	ldi	r24, 0x31	; 49
    7510:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    7514:	87 ef       	ldi	r24, 0xF7	; 247
    7516:	8c 0f       	add	r24, r28
    7518:	80 5d       	subi	r24, 0xD0	; 208
    751a:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    751e:	cf 91       	pop	r28
    7520:	08 95       	ret

00007522 <lcd_ManualOutDec>:
    7522:	84 30       	cpi	r24, 0x04	; 4
    7524:	20 f0       	brcs	.+8      	; 0x752e <lcd_ManualOutDec+0xc>
    7526:	8d e2       	ldi	r24, 0x2D	; 45
    7528:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <lcd_putc>
    752c:	08 95       	ret
    752e:	83 30       	cpi	r24, 0x03	; 3
    7530:	21 f4       	brne	.+8      	; 0x753a <lcd_ManualOutDec+0x18>
    7532:	80 e5       	ldi	r24, 0x50	; 80
    7534:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <lcd_putc>
    7538:	08 95       	ret
    753a:	93 e3       	ldi	r25, 0x33	; 51
    753c:	98 1b       	sub	r25, r24
    753e:	89 2f       	mov	r24, r25
    7540:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <lcd_putc>
    7544:	08 95       	ret

00007546 <lcd_blank>:
    7546:	cf 93       	push	r28
    7548:	04 c0       	rjmp	.+8      	; 0x7552 <lcd_blank+0xc>
    754a:	80 e2       	ldi	r24, 0x20	; 32
    754c:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    7550:	8c 2f       	mov	r24, r28
    7552:	cf ef       	ldi	r28, 0xFF	; 255
    7554:	c8 0f       	add	r28, r24
    7556:	81 11       	cpse	r24, r1
    7558:	f8 cf       	rjmp	.-16     	; 0x754a <lcd_blank+0x4>
    755a:	cf 91       	pop	r28
    755c:	08 95       	ret

0000755e <lcd_clrEol>:
    755e:	cf 93       	push	r28
    7560:	90 e0       	ldi	r25, 0x00	; 0
    7562:	04 c0       	rjmp	.+8      	; 0x756c <lcd_clrEol+0xe>
    7564:	80 e2       	ldi	r24, 0x20	; 32
    7566:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    756a:	9c 2f       	mov	r25, r28
    756c:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7570:	84 31       	cpi	r24, 0x14	; 20
    7572:	51 f0       	breq	.+20     	; 0x7588 <lcd_clrEol+0x2a>
    7574:	84 35       	cpi	r24, 0x54	; 84
    7576:	41 f0       	breq	.+16     	; 0x7588 <lcd_clrEol+0x2a>
    7578:	88 32       	cpi	r24, 0x28	; 40
    757a:	31 f0       	breq	.+12     	; 0x7588 <lcd_clrEol+0x2a>
    757c:	88 36       	cpi	r24, 0x68	; 104
    757e:	21 f0       	breq	.+8      	; 0x7588 <lcd_clrEol+0x2a>
    7580:	c1 e0       	ldi	r28, 0x01	; 1
    7582:	c9 0f       	add	r28, r25
    7584:	94 31       	cpi	r25, 0x14	; 20
    7586:	70 f3       	brcs	.-36     	; 0x7564 <lcd_clrEol+0x6>
    7588:	cf 91       	pop	r28
    758a:	08 95       	ret

0000758c <lcd_cursosblink>:
    758c:	8d e0       	ldi	r24, 0x0D	; 13
    758e:	0e 94 4b 12 	call	0x2496	; 0x2496 <lcd_write_command>
    7592:	8f ef       	ldi	r24, 0xFF	; 255
    7594:	80 93 db 18 	sts	0x18DB, r24	; 0x8018db <lcd_cursorIsOn>
    7598:	08 95       	ret

0000759a <lcd_cursoroff>:
    759a:	8c e0       	ldi	r24, 0x0C	; 12
    759c:	0e 94 4b 12 	call	0x2496	; 0x2496 <lcd_write_command>
    75a0:	10 92 db 18 	sts	0x18DB, r1	; 0x8018db <lcd_cursorIsOn>
    75a4:	08 95       	ret

000075a6 <lcd_waitSymbolOn>:
    75a6:	cf 93       	push	r28
    75a8:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    75ac:	8c e0       	ldi	r24, 0x0C	; 12
    75ae:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    75b2:	81 ea       	ldi	r24, 0xA1	; 161
    75b4:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    75b8:	8c 2f       	mov	r24, r28
    75ba:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    75be:	cf 91       	pop	r28
    75c0:	08 95       	ret

000075c2 <lcd_waitSymbolOff>:
    75c2:	cf 93       	push	r28
    75c4:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    75c8:	8c e0       	ldi	r24, 0x0C	; 12
    75ca:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    75ce:	80 e2       	ldi	r24, 0x20	; 32
    75d0:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>
    75d4:	8c 2f       	mov	r24, r28
    75d6:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
    75da:	cf 91       	pop	r28
    75dc:	08 95       	ret

000075de <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    75de:	84 30       	cpi	r24, 0x04	; 4
    75e0:	28 f0       	brcs	.+10     	; 0x75ec <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    75e2:	20 e0       	ldi	r18, 0x00	; 0
    75e4:	0d c0       	rjmp	.+26     	; 0x7600 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    75e6:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    75e8:	fa 01       	movw	r30, r20
    75ea:	02 c0       	rjmp	.+4      	; 0x75f0 <keylabel_set+0x12>
    75ec:	fb 01       	movw	r30, r22
    75ee:	20 e0       	ldi	r18, 0x00	; 0
    75f0:	af 01       	movw	r20, r30
    75f2:	4f 5f       	subi	r20, 0xFF	; 255
    75f4:	5f 4f       	sbci	r21, 0xFF	; 255
    75f6:	94 91       	lpm	r25, Z
    75f8:	99 23       	and	r25, r25
    75fa:	11 f0       	breq	.+4      	; 0x7600 <keylabel_set+0x22>
    75fc:	25 30       	cpi	r18, 0x05	; 5
    75fe:	98 f3       	brcs	.-26     	; 0x75e6 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7600:	90 e0       	ldi	r25, 0x00	; 0
    7602:	dc 01       	movw	r26, r24
    7604:	aa 0f       	add	r26, r26
    7606:	bb 1f       	adc	r27, r27
    7608:	aa 0f       	add	r26, r26
    760a:	bb 1f       	adc	r27, r27
    760c:	8a 0f       	add	r24, r26
    760e:	9b 1f       	adc	r25, r27
    7610:	dc 01       	movw	r26, r24
    7612:	af 5e       	subi	r26, 0xEF	; 239
    7614:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7616:	45 e0       	ldi	r20, 0x05	; 5
    7618:	50 e0       	ldi	r21, 0x00	; 0
    761a:	42 1b       	sub	r20, r18
    761c:	51 09       	sbc	r21, r1
    761e:	ca 01       	movw	r24, r20
    7620:	99 23       	and	r25, r25
    7622:	0c f4       	brge	.+2      	; 0x7626 <keylabel_set+0x48>
    7624:	01 96       	adiw	r24, 0x01	; 1
    7626:	95 95       	asr	r25
    7628:	87 95       	ror	r24
    762a:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    762c:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    762e:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7630:	0e c0       	rjmp	.+28     	; 0x764e <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7632:	93 17       	cp	r25, r19
    7634:	10 f0       	brcs	.+4      	; 0x763a <keylabel_set+0x5c>
    7636:	98 17       	cp	r25, r24
    7638:	18 f0       	brcs	.+6      	; 0x7640 <keylabel_set+0x62>
			*charBufPtr = ' ';
    763a:	20 e2       	ldi	r18, 0x20	; 32
    763c:	2c 93       	st	X, r18
    763e:	05 c0       	rjmp	.+10     	; 0x764a <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7640:	fb 01       	movw	r30, r22
    7642:	24 91       	lpm	r18, Z
    7644:	2c 93       	st	X, r18
    7646:	6f 5f       	subi	r22, 0xFF	; 255
    7648:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    764a:	11 96       	adiw	r26, 0x01	; 1
		i++;
    764c:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    764e:	95 30       	cpi	r25, 0x05	; 5
    7650:	80 f3       	brcs	.-32     	; 0x7632 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7652:	08 95       	ret

00007654 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	fc 01       	movw	r30, r24
    7658:	ee 0f       	add	r30, r30
    765a:	ff 1f       	adc	r31, r31
    765c:	ee 0f       	add	r30, r30
    765e:	ff 1f       	adc	r31, r31
    7660:	8e 0f       	add	r24, r30
    7662:	9f 1f       	adc	r25, r31
    7664:	fc 01       	movw	r30, r24
    7666:	ef 5e       	subi	r30, 0xEF	; 239
    7668:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    766a:	80 e0       	ldi	r24, 0x00	; 0
    766c:	04 c0       	rjmp	.+8      	; 0x7676 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    766e:	90 e2       	ldi	r25, 0x20	; 32
    7670:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7672:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7674:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7676:	85 30       	cpi	r24, 0x05	; 5
    7678:	d0 f3       	brcs	.-12     	; 0x766e <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    767a:	08 95       	ret

0000767c <keylabel_toLCD>:

void keylabel_toLCD(){
    767c:	0f 93       	push	r16
    767e:	1f 93       	push	r17
    7680:	cf 93       	push	r28
    7682:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7684:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    7688:	84 e5       	ldi	r24, 0x54	; 84
    768a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    768e:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7690:	e1 e1       	ldi	r30, 0x11	; 17
    7692:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7694:	08 c0       	rjmp	.+16     	; 0x76a6 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    7696:	8f 01       	movw	r16, r30
    7698:	0f 5f       	subi	r16, 0xFF	; 255
    769a:	1f 4f       	sbci	r17, 0xFF	; 255
    769c:	80 81       	ld	r24, Z
    769e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    76a2:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    76a4:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    76a6:	c4 31       	cpi	r28, 0x14	; 20
    76a8:	b0 f3       	brcs	.-20     	; 0x7696 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    76aa:	8d 2f       	mov	r24, r29
    76ac:	0e 94 d5 12 	call	0x25aa	; 0x25aa <lcd_goto>
}
    76b0:	df 91       	pop	r29
    76b2:	cf 91       	pop	r28
    76b4:	1f 91       	pop	r17
    76b6:	0f 91       	pop	r16
    76b8:	08 95       	ret

000076ba <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    76ba:	90 e0       	ldi	r25, 0x00	; 0
    76bc:	fc 01       	movw	r30, r24
    76be:	ee 0f       	add	r30, r30
    76c0:	ff 1f       	adc	r31, r31
    76c2:	ee 0f       	add	r30, r30
    76c4:	ff 1f       	adc	r31, r31
    76c6:	8e 0f       	add	r24, r30
    76c8:	9f 1f       	adc	r25, r31
    76ca:	fc 01       	movw	r30, r24
    76cc:	ef 5e       	subi	r30, 0xEF	; 239
    76ce:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    76d0:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    76d2:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    76d4:	12 c0       	rjmp	.+36     	; 0x76fa <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    76d6:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    76d8:	61 11       	cpse	r22, r1
    76da:	06 c0       	rjmp	.+12     	; 0x76e8 <keylabel_statcheck+0x2e>
    76dc:	2a 30       	cpi	r18, 0x0A	; 10
    76de:	21 f4       	brne	.+8      	; 0x76e8 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    76e0:	80 e8       	ldi	r24, 0x80	; 128
    76e2:	80 83       	st	Z, r24
			result = 0xFF;
    76e4:	8f ef       	ldi	r24, 0xFF	; 255
    76e6:	07 c0       	rjmp	.+14     	; 0x76f6 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    76e8:	66 23       	and	r22, r22
    76ea:	29 f0       	breq	.+10     	; 0x76f6 <keylabel_statcheck+0x3c>
    76ec:	20 38       	cpi	r18, 0x80	; 128
    76ee:	19 f4       	brne	.+6      	; 0x76f6 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    76f0:	8a e0       	ldi	r24, 0x0A	; 10
    76f2:	80 83       	st	Z, r24
			result = 0xFF;
    76f4:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    76f6:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    76f8:	9f 5f       	subi	r25, 0xFF	; 255
    76fa:	95 30       	cpi	r25, 0x05	; 5
    76fc:	60 f3       	brcs	.-40     	; 0x76d6 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    76fe:	08 95       	ret

00007700 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7700:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7702:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7704:	94 91       	lpm	r25, Z
    7706:	99 23       	and	r25, r25
    7708:	21 f0       	breq	.+8      	; 0x7712 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    770a:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    770c:	8f 5f       	subi	r24, 0xFF	; 255
    770e:	80 32       	cpi	r24, 0x20	; 32
    7710:	c8 f3       	brcs	.-14     	; 0x7704 <get_StrLenP+0x4>
	return result;
}
    7712:	08 95       	ret

00007714 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7714:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7716:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7718:	90 81       	ld	r25, Z
    771a:	99 23       	and	r25, r25
    771c:	21 f0       	breq	.+8      	; 0x7726 <get_StrLen+0x12>
			return result;
		}
		pString++;
    771e:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7720:	8f 5f       	subi	r24, 0xFF	; 255
    7722:	80 32       	cpi	r24, 0x20	; 32
    7724:	c8 f3       	brcs	.-14     	; 0x7718 <get_StrLen+0x4>
	return result;
}
    7726:	08 95       	ret

00007728 <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    7728:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    772a:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    772c:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    772e:	06 c0       	rjmp	.+12     	; 0x773c <reverse_Bits+0x14>
		result = result << 1;
    7730:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7732:	32 2f       	mov	r19, r18
    7734:	31 70       	andi	r19, 0x01	; 1
    7736:	83 2b       	or	r24, r19
		val = val >> 1;
    7738:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    773a:	9f 5f       	subi	r25, 0xFF	; 255
    773c:	98 30       	cpi	r25, 0x08	; 8
    773e:	c0 f3       	brcs	.-16     	; 0x7730 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7740:	08 95       	ret

00007742 <__tablejump2__>:
    7742:	ee 0f       	add	r30, r30
    7744:	ff 1f       	adc	r31, r31
    7746:	88 1f       	adc	r24, r24
    7748:	8b bf       	out	0x3b, r24	; 59
    774a:	07 90       	elpm	r0, Z+
    774c:	f6 91       	elpm	r31, Z
    774e:	e0 2d       	mov	r30, r0
    7750:	19 94       	eijmp

00007752 <eeprom_read_block>:
    7752:	dc 01       	movw	r26, r24
    7754:	cb 01       	movw	r24, r22

00007756 <eeprom_read_blraw>:
    7756:	fc 01       	movw	r30, r24
    7758:	f9 99       	sbic	0x1f, 1	; 31
    775a:	fe cf       	rjmp	.-4      	; 0x7758 <eeprom_read_blraw+0x2>
    775c:	06 c0       	rjmp	.+12     	; 0x776a <eeprom_read_blraw+0x14>
    775e:	f2 bd       	out	0x22, r31	; 34
    7760:	e1 bd       	out	0x21, r30	; 33
    7762:	f8 9a       	sbi	0x1f, 0	; 31
    7764:	31 96       	adiw	r30, 0x01	; 1
    7766:	00 b4       	in	r0, 0x20	; 32
    7768:	0d 92       	st	X+, r0
    776a:	41 50       	subi	r20, 0x01	; 1
    776c:	50 40       	sbci	r21, 0x00	; 0
    776e:	b8 f7       	brcc	.-18     	; 0x775e <eeprom_read_blraw+0x8>
    7770:	08 95       	ret

00007772 <eeprom_read_byte>:
    7772:	f9 99       	sbic	0x1f, 1	; 31
    7774:	fe cf       	rjmp	.-4      	; 0x7772 <eeprom_read_byte>
    7776:	92 bd       	out	0x22, r25	; 34
    7778:	81 bd       	out	0x21, r24	; 33
    777a:	f8 9a       	sbi	0x1f, 0	; 31
    777c:	99 27       	eor	r25, r25
    777e:	80 b5       	in	r24, 0x20	; 32
    7780:	08 95       	ret

00007782 <eeprom_read_word>:
    7782:	a8 e1       	ldi	r26, 0x18	; 24
    7784:	b0 e0       	ldi	r27, 0x00	; 0
    7786:	42 e0       	ldi	r20, 0x02	; 2
    7788:	50 e0       	ldi	r21, 0x00	; 0
    778a:	e5 cf       	rjmp	.-54     	; 0x7756 <eeprom_read_blraw>

0000778c <eeprom_update_block>:
    778c:	dc 01       	movw	r26, r24
    778e:	a4 0f       	add	r26, r20
    7790:	b5 1f       	adc	r27, r21
    7792:	41 50       	subi	r20, 0x01	; 1
    7794:	50 40       	sbci	r21, 0x00	; 0
    7796:	40 f0       	brcs	.+16     	; 0x77a8 <eeprom_update_block+0x1c>
    7798:	cb 01       	movw	r24, r22
    779a:	84 0f       	add	r24, r20
    779c:	95 1f       	adc	r25, r21
    779e:	2e 91       	ld	r18, -X
    77a0:	05 d0       	rcall	.+10     	; 0x77ac <eeprom_update_r18>
    77a2:	41 50       	subi	r20, 0x01	; 1
    77a4:	50 40       	sbci	r21, 0x00	; 0
    77a6:	d8 f7       	brcc	.-10     	; 0x779e <eeprom_update_block+0x12>
    77a8:	08 95       	ret

000077aa <eeprom_update_byte>:
    77aa:	26 2f       	mov	r18, r22

000077ac <eeprom_update_r18>:
    77ac:	f9 99       	sbic	0x1f, 1	; 31
    77ae:	fe cf       	rjmp	.-4      	; 0x77ac <eeprom_update_r18>
    77b0:	92 bd       	out	0x22, r25	; 34
    77b2:	81 bd       	out	0x21, r24	; 33
    77b4:	f8 9a       	sbi	0x1f, 0	; 31
    77b6:	01 97       	sbiw	r24, 0x01	; 1
    77b8:	00 b4       	in	r0, 0x20	; 32
    77ba:	02 16       	cp	r0, r18
    77bc:	39 f0       	breq	.+14     	; 0x77cc <eeprom_update_r18+0x20>
    77be:	1f ba       	out	0x1f, r1	; 31
    77c0:	20 bd       	out	0x20, r18	; 32
    77c2:	0f b6       	in	r0, 0x3f	; 63
    77c4:	f8 94       	cli
    77c6:	fa 9a       	sbi	0x1f, 2	; 31
    77c8:	f9 9a       	sbi	0x1f, 1	; 31
    77ca:	0f be       	out	0x3f, r0	; 63
    77cc:	08 95       	ret

000077ce <eeprom_update_word>:
    77ce:	01 96       	adiw	r24, 0x01	; 1
    77d0:	27 2f       	mov	r18, r23
    77d2:	ec df       	rcall	.-40     	; 0x77ac <eeprom_update_r18>
    77d4:	ea cf       	rjmp	.-44     	; 0x77aa <eeprom_update_byte>

000077d6 <_exit>:
    77d6:	f8 94       	cli

000077d8 <__stop_program>:
    77d8:	ff cf       	rjmp	.-2      	; 0x77d8 <__stop_program>
