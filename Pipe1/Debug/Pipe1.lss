
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00008014  000080c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00008014  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001722  00800228  00800228  000080f0  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  000080f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000090f0  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009120  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000bc0  00000000  00000000  00009160  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000feb1  00000000  00000000  00009d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002714  00000000  00000000  00019bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000929f  00000000  00000000  0001c2e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d6c  00000000  00000000  00025584  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000036f0  00000000  00000000  000272f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a123  00000000  00000000  0002a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fa8  00000000  00000000  00034b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5b 0a 	jmp	0x14b6	; 0x14b6 <__ctors_end>
       4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
       8:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
       c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      10:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      14:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      18:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      1c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      20:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      24:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      28:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      2c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      30:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      34:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      38:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      3c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      40:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      44:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      48:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      4c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      50:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      54:	0c 94 16 11 	jmp	0x222c	; 0x222c <__vector_21>
      58:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      5c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      60:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      64:	0c 94 04 3b 	jmp	0x7608	; 0x7608 <__vector_25>
      68:	0c 94 4a 3b 	jmp	0x7694	; 0x7694 <__vector_26>
      6c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      70:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      74:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      78:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      7c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      80:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      84:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      88:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      8c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      90:	0c 94 0d 39 	jmp	0x721a	; 0x721a <__vector_36>
      94:	0c 94 62 39 	jmp	0x72c4	; 0x72c4 <__vector_37>
      98:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      9c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      a0:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      a4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      a8:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      ac:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      b0:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      b4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      b8:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      bc:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      c0:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      c4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      c8:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      cc:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      d0:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      d4:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      d8:	0c 94 0a 3c 	jmp	0x7814	; 0x7814 <__vector_54>
      dc:	0c 94 62 3c 	jmp	0x78c4	; 0x78c4 <__vector_55>
      e0:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__bad_interrupt>
      e4:	27 23       	and	r18, r23
      e6:	32 23       	and	r19, r18
      e8:	3e 23       	and	r19, r30
      ea:	5a 23       	and	r21, r26
      ec:	77 23       	and	r23, r23
      ee:	98 23       	and	r25, r24
      f0:	a3 23       	and	r26, r19
      f2:	ae 23       	and	r26, r30
      f4:	c3 23       	and	r28, r19
      f6:	d9 23       	and	r29, r25
      f8:	e1 23       	and	r30, r17
      fa:	ef 23       	and	r30, r31
      fc:	c3 23       	and	r28, r19
      fe:	1c 24       	eor	r1, r12
     100:	2c 24       	eor	r2, r12
     102:	50 24       	eor	r5, r0
     104:	a2 24       	eor	r10, r2
     106:	bb 24       	eor	r11, r11
     108:	d0 24       	eor	r13, r0
     10a:	e9 24       	eor	r14, r9
     10c:	f1 24       	eor	r15, r1
     10e:	16 25       	eor	r17, r6
     110:	16 25       	eor	r17, r6
     112:	2f 25       	eor	r18, r15
     114:	3c 25       	eor	r19, r12
     116:	2b 25       	eor	r18, r11
     118:	97 25       	eor	r25, r7
     11a:	9f 25       	eor	r25, r15
     11c:	ea 25       	eor	r30, r10
     11e:	4c 26       	eor	r4, r28
     120:	76 26       	eor	r7, r22
     122:	a2 26       	eor	r10, r18
     124:	d1 26       	eor	r13, r17
     126:	d9 26       	eor	r13, r25
     128:	df 26       	eor	r13, r31
     12a:	97 25       	eor	r25, r7
     12c:	e7 26       	eor	r14, r23
     12e:	fb 26       	eor	r15, r27
     130:	df 26       	eor	r13, r31
     132:	39 27       	eor	r19, r25
     134:	46 27       	eor	r20, r22
     136:	52 27       	eor	r21, r18
     138:	67 27       	eor	r22, r23
     13a:	80 27       	eor	r24, r16
     13c:	a3 27       	eor	r26, r19
     13e:	ae 27       	eor	r26, r30
     140:	b4 27       	eor	r27, r20
     142:	b9 27       	eor	r27, r25
     144:	cc 27       	eor	r28, r28
     146:	ed 27       	eor	r30, r29
     148:	00 28       	or	r0, r0
     14a:	b9 27       	eor	r27, r25
     14c:	7d 3e       	cpi	r23, 0xED	; 237
     14e:	92 3e       	cpi	r25, 0xE2	; 226
     150:	80 3e       	cpi	r24, 0xE0	; 224
     152:	71 3e       	cpi	r23, 0xE1	; 225
     154:	83 3e       	cpi	r24, 0xE3	; 227
     156:	86 3e       	cpi	r24, 0xE6	; 230
     158:	74 3e       	cpi	r23, 0xE4	; 228
     15a:	89 3e       	cpi	r24, 0xE9	; 233
     15c:	77 3e       	cpi	r23, 0xE7	; 231
     15e:	8c 3e       	cpi	r24, 0xEC	; 236
     160:	7a 3e       	cpi	r23, 0xEA	; 234
     162:	8f 3e       	cpi	r24, 0xEF	; 239

00000164 <__trampolines_end>:
     164:	1b 1b       	sub	r17, r27
     166:	1b 1b       	sub	r17, r27
     168:	1b 1b       	sub	r17, r27
     16a:	1b 00       	.word	0x001b	; ????

0000016c <cgPattern_RegOnOff>:
     16c:	1b 1b 18 18 18 18 18 00                             ........

00000174 <cgPattern_RegOffOn>:
     174:	1b 1b 03 03 03 03 03 00                             ........

0000017c <cgPattern_RegOffOff>:
     17c:	1b 1b 00 00 00 00 00 00                             ........

00000184 <cgPattern_RegOn>:
     184:	18 18 18 18 18 18 18 00                             ........

0000018c <cgPattern_RegOff>:
     18c:	18 18 00 00 00 00 00 00                             ........

00000194 <cgPattern_Down>:
     194:	04 04 04 04 15 0e 04 00                             ........

0000019c <cgPattern_Up>:
     19c:	04 0e 15 04 04 04 04 00                             ........

000001a4 <stringLog>:
     1a4:	4c 6f 67 3a 20 00                                   Log: .

000001aa <ErrorText>:
     1aa:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     1ba:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     1ca:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     1da:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1ea:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1fa:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     20a:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     21a:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     22a:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     23a:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     24a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     25a:	00 00 00 00 01 09 45 45 3a 52 65 67 4f 75 74 00     ......EE:RegOut.
     26a:	00 00 00 00 00 00 01 0a 45 45 3a 4d 69 64 69 52     ........EE:MidiR
     27a:	65 67 43 43 00 00 00 00 02 00 4d 6f 64 3a 46 61     egCC......Mod:Fa
     28a:	69 6c 00 00 00 00 00 00 00 00 02 01 4d 6f 64 3a     il..........Mod:
     29a:	55 6e 6b 6e 6f 77 49 6e 70 00 00 00 03 00 4f 56     UnknowInp.....OV
     2aa:	46 4c 3a 4d 69 64 69 49 6e 00 00 00 00 00 03 01     FL:MidiIn.......
     2ba:	4f 56 46 4c 3a 4d 69 64 69 4f 75 74 00 00 00 00     OVFL:MidiOut....
     2ca:	04 00 4f 56 46 4c 3a 50 69 70 65 4d 73 67 00 00     ..OVFL:PipeMsg..
     2da:	00 00 05 00 50 77 72 3a 4f 75 70 74 75 74 4f 6e     ....Pwr:OuptutOn
     2ea:	00 00 00 00                                         ....

000002ee <panicString>:
     2ee:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

000002f7 <releaseKeyString>:
     2f7:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     307:	6e 00                                               n.

00000309 <prog_name>:
     309:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

00000318 <usbHWnone>:
     318:	6e 6f 6e 65 00                                      none.

0000031d <usbHWmidiThru>:
     31d:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

00000329 <usbHWmidiOut>:
     329:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

00000333 <usbHWmidiIn>:
     333:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

0000033c <usbHWmidichanSW>:
     33c:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     34c:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     35c:	20 00                                                .

0000035e <usbHWBits>:
     35e:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000366 <usbHWmodule>:
     366:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000036e <usbHWempty>:
     36e:	65 6d 70 74 79 00                                   empty.

00000374 <usbHWRegister>:
     374:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

00000380 <usbHWRange>:
     380:	52 61 6e 67 65 20 00                                Range .

00000387 <usbHWManual>:
     387:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

00000390 <usbHWmodulCheck>:
     390:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     3a0:	20 00                                                .

000003a2 <usbHWmodulInst>:
     3a2:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     3b2:	3a 20 00                                            : .

000003b5 <usbHWtitel>:
     3b5:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     3c5:	72 61 74 69 6f 6e 0d 0a 00                          ration...

000003ce <HelloMsg>:
     3ce:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     3de:	65 72 66 61 63 65 0d 0a 00                          erface...

000003e7 <usbLog>:
     3e7:	4c 6f 67 0d 0a 00                                   Log...

000003ed <usbEmpty>:
     3ed:	65 6d 70 74 79 0d 0a 00                             empty...

000003f5 <msg_programming1>:
     3f5:	73 61 76 65 2e 2e 2e 00                             save....

000003fd <logNone>:
     3fd:	3c 6e 6f 6e 65 3e 00                                <none>.

00000404 <stringNotAssigen>:
     404:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

0000040f <menuMessageE>:
     40f:	45 3a 00                                            E:.

00000412 <menuMessageOK>:
     412:	6f 6b 20 00                                         ok .

00000416 <menuMessageAbort>:
     416:	61 62 6f 72 74 00                                   abort.

0000041c <menuMessageMIDIpanic>:
     41c:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

0000042b <messageRegisterMan>:
     42b:	2b 00                                               +.

0000042d <messageLoaded>:
     42d:	20 52 65 67 00                                       Reg.

00000432 <messageSaved>:
     432:	20 52 65 67 20 7e 20 00                              Reg ~ .

0000043a <MenuMIDIOutText>:
     43a:	4f 75 74 3a 00                                      Out:.

0000043f <MenuMIDIInText>:
     43f:	49 6e 3a 00                                         In:.

00000443 <initMenuText>:
     443:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

0000044d <nibbleInfo>:
	...
     455:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     465:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     475:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     485:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     495:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     4a5:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     4b5:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     4c5:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

000004d4 <menu_selFunc>:
     4d4:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 30 08     ..<none>......0.
     4e4:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     4f4:	3a 08 26 08 00 00 00 00 01 10 53 74 69 6d 6d 65     :.&.......Stimme
     504:	6e 00 00 00 02 0e 1c 08 00 00 00 00 01 10 4b 6f     n.............Ko
     514:	70 70 65 6c 32 3c 33 00 00 00 fe 07 21 21 00 00     ppel2<3.....!!..
     524:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 f4 07     ..Koppel1<3.....
     534:	24 21 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     $!....KoppelP<3.
     544:	00 00 ea 07 27 21 00 00 01 10 4b 6f 70 70 65 6c     ....'!....Koppel
     554:	31 3c 32 00 00 00 e0 07 2a 21 00 00 01 10 4b 6f     1<2.....*!....Ko
     564:	70 70 65 6c 50 3c 32 00 00 00 d6 07 2d 21 00 00     ppelP<2.....-!..
     574:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 cc 07     ..KoppelP<1.....
     584:	30 21 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     0!....Koppel3<2.
     594:	00 00 c2 07 33 21 00 00 01 10 4b 6f 70 70 65 6c     ....3!....Koppel
     5a4:	33 3c 31 00 00 00 b8 07 36 21 00 00 01 10 4b 6f     3<1.....6!....Ko
     5b4:	70 70 65 6c 33 3c 50 00 00 00 ae 07 39 21 00 00     ppel3<P.....9!..
     5c4:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 a4 07     ..Koppel2<1.....
     5d4:	3c 21 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     <!....Koppel2<P.
     5e4:	00 00 9a 07 3f 21 00 00 01 10 4b 6f 70 70 65 6c     ....?!....Koppel
     5f4:	31 3c 50 00 00 00 90 07 42 21 00 00 01 10 50 72     1<P.....B!....Pr
     604:	2e 2b 2f 73 65 74 00 00 00 00 5e 07 54 22 00 00     .+/set....^.T"..
     614:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 54 07     ..Pr.-/clr....T.
     624:	19 22 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     ."....Prog. 1A..
     634:	00 00 86 07 d5 21 00 00 01 10 50 72 6f 67 2e 20     .....!....Prog. 
     644:	32 41 00 00 00 00 7c 07 d8 21 00 00 01 10 50 72     2A....|..!....Pr
     654:	6f 67 2e 20 33 41 00 00 00 00 72 07 db 21 00 00     og. 3A....r..!..
     664:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 68 07     ..Prog. 4A....h.
     674:	de 21 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     .!....Prog.clr..
     684:	00 00 18 07 52 1c 00 00 01 10 50 72 6f 67 2e 73     ....R.....Prog.s
     694:	65 74 00 00 00 00 22 07 59 21 00 00 01 10 50 72     et....".Y!....Pr
     6a4:	6f 67 2e 2b 00 00 00 00 00 00 4a 07 70 22 00 00     og.+......J.p"..
     6b4:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 40 07     ..Prog.-......@.
     6c4:	2c 22 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     ,"....PrBank+...
     6d4:	00 00 36 07 f1 21 00 00 01 10 50 72 42 61 6e 6b     ..6..!....PrBank
     6e4:	2e 2d 00 00 00 00 2c 07 fc 21 00 00 01 10 4d 49     .-....,..!....MI
     6f4:	44 49 20 4f 66 66 00 00 00 00 08 08 a6 29 00 00     DI Off.......)..
     704:	c1 10 53 65 74 75 70 00 00 00 00 00 f2 0e 12 08     ..Setup.........
     714:	00 00 00 00                                         ....

00000718 <shortKeyTextRegOff>:
     718:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

00000722 <shortKeyTextPRS>:
     722:	50 73 65 74 00 00 00 00 00 00                       Pset......

0000072c <shortKeyTextPBD>:
     72c:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

00000736 <shortKeyTextPBI>:
     736:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

00000740 <shortKeyTextPRD>:
     740:	50 2d 00 00 00 00 00 00 00 00                       P-........

0000074a <shortKeyTextPRI>:
     74a:	50 2b 00 00 00 00 00 00 00 00                       P+........

00000754 <shortKeyTextPRM>:
     754:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

0000075e <shortKeyTextPRP>:
     75e:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000768 <shortKeyTextK4A>:
     768:	50 41 34 00 00 00 00 00 00 00                       PA4.......

00000772 <shortKeyTextK3A>:
     772:	50 41 33 00 00 00 00 00 00 00                       PA3.......

0000077c <shortKeyTextK2A>:
     77c:	50 41 32 00 00 00 00 00 00 00                       PA2.......

00000786 <shortKeyTextK1A>:
     786:	50 41 31 00 00 00 00 00 00 00                       PA1.......

00000790 <shortKeyTextCpl1P>:
     790:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

0000079a <shortKeyTextCpl2P>:
     79a:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

000007a4 <shortKeyTextCpl21>:
     7a4:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

000007ae <shortKeyTextCpl3P>:
     7ae:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

000007b8 <shortKeyTextCpl31>:
     7b8:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

000007c2 <shortKeyTextCpl32>:
     7c2:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

000007cc <shortKeyTextCplP1>:
     7cc:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

000007d6 <shortKeyTextCplP2>:
     7d6:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

000007e0 <shortKeyTextCpl12>:
     7e0:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000007ea <shortKeyTextCplP3>:
     7ea:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000007f4 <shortKeyTextCpl13>:
     7f4:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000007fe <shortKeyTextCpl23>:
     7fe:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

00000808 <shortKeyTextMIDIoff>:
     808:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

00000812 <shortKeyTextSetup>:
     812:	53 65 74 75 00 00 00 00 00 00                       Setu......

0000081c <shortKeyTextStim>:
     81c:	53 74 69 6d 00 00 00 00 00 00                       Stim......

00000826 <shortKeyTextMenu>:
     826:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

00000830 <shortKeyTextNone>:
	...

0000083a <menu_main>:
     83a:	81 00 4d 61 6e 75 61 6c 00 00 00 00 b2 08 00 00     ..Manual........
     84a:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     85a:	da 08 00 00 dd 20 00 00 01 00 4d 49 44 49 00 00     ..... ....MIDI..
     86a:	00 00 00 00 a6 0a 00 00 00 00 00 00 01 00 54 61     ..............Ta
     87a:	73 74 65 6e 00 00 00 00 b2 0d 00 00 00 00 75 1c     sten..........u.
     88a:	01 00 53 74 61 74 75 73 00 00 00 00 de 13 00 00     ..Status........
     89a:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     8aa:	f2 0e 00 00 00 00 00 00                             ........

000008b2 <menu_manual>:
     8b2:	81 00 4b 6f 70 70 65 6c 00 00 00 00 b6 09 00 00     ..Koppel........
     8c2:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     8d2:	02 0e 00 00 00 00 00 00                             ........

000008da <menu_register>:
     8da:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 ce 05     ..Prog.lad......
     8ea:	00 00 ea 20 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ... ..Prog.sp...
     8fa:	00 00 ce 05 00 00 6a 1c 01 00 61 75 73 00 00 00     ......j...aus...
	...
     912:	e4 20 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     . ....Reg.1-8...
     922:	00 00 93 05 00 00 2a 1c 0e 00 52 65 67 2e 39 2d     ......*...Reg.9-
     932:	31 36 00 00 00 00 94 05 00 00 2a 1c 0e 00 52 65     16........*...Re
     942:	67 2e 31 37 2d 32 34 00 00 00 95 05 00 00 2a 1c     g.17-24.......*.
     952:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 96 05     ..Reg.25-32.....
     962:	00 00 2a 1c 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..*...Reg.33-40.
     972:	00 00 97 05 00 00 2a 1c 0e 00 52 65 67 2e 34 31     ......*...Reg.41
     982:	2d 34 38 00 00 00 98 05 00 00 2a 1c 0e 00 52 65     -48.......*...Re
     992:	67 2e 34 39 2d 35 34 00 00 00 99 05 00 00 2a 1c     g.49-54.......*.
     9a2:	ce 00 52 65 67 2e 35 35 2d 36 34 00 00 00 9a 05     ..Reg.55-64.....
     9b2:	00 00 2a 1c                                         ..*.

000009b6 <menu_coupler>:
     9b6:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 37 08     ..2<3.........7.
     9c6:	00 00 57 1c 09 00 31 3c 33 00 00 00 00 00 00 00     ..W...1<3.......
     9d6:	00 00 38 08 00 00 57 1c 09 00 31 3c 32 00 00 00     ..8...W...1<2...
     9e6:	00 00 00 00 00 00 39 08 00 00 57 1c 09 00 50 3c     ......9...W...P<
     9f6:	33 00 00 00 00 00 00 00 00 00 3a 08 00 00 57 1c     3.........:...W.
     a06:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 3b 08     ..P<2.........;.
     a16:	00 00 57 1c 09 00 50 3c 31 00 00 00 00 00 00 00     ..W...P<1.......
     a26:	00 00 3c 08 00 00 57 1c 09 00 33 3c 32 00 00 00     ..<...W...3<2...
     a36:	00 00 00 00 00 00 3d 08 00 00 57 1c 09 00 33 3c     ......=...W...3<
     a46:	31 00 00 00 00 00 00 00 00 00 3e 08 00 00 57 1c     1.........>...W.
     a56:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 3f 08     ..3<P.........?.
     a66:	00 00 57 1c 09 00 32 3c 31 00 00 00 00 00 00 00     ..W...2<1.......
     a76:	00 00 40 08 00 00 57 1c 09 00 32 3c 50 00 00 00     ..@...W...2<P...
     a86:	00 00 00 00 00 00 41 08 00 00 57 1c c9 00 31 3c     ......A...W...1<
     a96:	50 00 00 00 00 00 00 00 00 00 42 08 00 00 57 1c     P.........B...W.

00000aa6 <menu_midi>:
     aa6:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     ab6:	a6 29 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .)....MIDIin....
     ac6:	82 0b 00 00 00 00 f0 1d 01 00 4d 49 44 49 6f 75     ..........MIDIou
     ad6:	74 00 00 00 52 0e 00 00 00 00 ec 1d 03 10 54 68     t...R.........Th
     ae6:	72 75 2d 49 6e 00 00 00 00 00 4c 08 00 00 26 1c     ru-In.....L...&.
     af6:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 4d 08     ..Thru-Out....M.
     b06:	00 00 26 1c 09 00 41 63 63 65 70 74 20 50 43 00     ..&...Accept PC.
     b16:	00 00 58 09 00 00 e8 1d 09 00 41 63 74 2e 53 65     ..X.......Act.Se
     b26:	6e 73 65 00 00 00 56 09 00 00 e8 1d 09 00 56 65     nse...V.......Ve
     b36:	6c 5a 34 4f 66 66 00 00 00 00 57 09 00 00 e8 1d     lZ4Off....W.....
     b46:	01 00 4d 49 44 49 2d 43 43 00 00 00 62 0d 00 00     ..MIDI-CC...b...
     b56:	00 00 1e 1c 06 08 52 78 42 75 66 55 73 65 00 00     ......RxBufUse..
     b66:	00 00 6b 15 00 00 00 00 c6 08 54 78 42 75 66 55     ..k.......TxBufU
     b76:	73 65 00 00 00 00 74 16 00 00 00 00                 se....t.....

00000b82 <menu_midiIn>:
     b82:	81 00 43 68 2e 31 00 00 00 00 00 00 c2 0c 00 00     ..Ch.1..........
     b92:	83 1b 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     ba2:	c2 0c 01 00 83 1b 00 00 01 00 43 68 2e 33 00 00     ..........Ch.3..
     bb2:	00 00 00 00 c2 0c 02 00 83 1b 00 00 01 00 43 68     ..............Ch
     bc2:	2e 34 00 00 00 00 00 00 c2 0c 03 00 83 1b 00 00     .4..............
     bd2:	01 00 43 68 2e 35 00 00 00 00 00 00 c2 0c 04 00     ..Ch.5..........
     be2:	83 1b 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     bf2:	c2 0c 05 00 83 1b 00 00 01 00 43 68 2e 37 00 00     ..........Ch.7..
     c02:	00 00 00 00 c2 0c 06 00 83 1b 00 00 01 00 43 68     ..............Ch
     c12:	2e 38 00 00 00 00 00 00 c2 0c 07 00 83 1b 00 00     .8..............
     c22:	01 00 43 68 2e 39 00 00 00 00 00 00 c2 0c 08 00     ..Ch.9..........
     c32:	83 1b 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     c42:	c2 0c 09 00 83 1b 00 00 01 00 43 68 2e 31 31 00     ..........Ch.11.
     c52:	00 00 00 00 c2 0c 0a 00 83 1b 00 00 01 00 43 68     ..............Ch
     c62:	2e 31 32 00 00 00 00 00 c2 0c 0b 00 83 1b 00 00     .12.............
     c72:	01 00 43 68 2e 31 33 00 00 00 00 00 c2 0c 0c 00     ..Ch.13.........
     c82:	83 1b 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     c92:	c2 0c 0d 00 83 1b 00 00 01 00 43 68 2e 31 35 00     ..........Ch.15.
     ca2:	00 00 00 00 c2 0c 0e 00 83 1b 00 00 c1 00 43 68     ..............Ch
     cb2:	2e 31 36 00 00 00 00 00 c2 0c 0f 00 83 1b 00 00     .16.............

00000cc2 <menu_midiInSec>:
     cc2:	81 00 53 65 63 74 2e 31 00 00 00 00 12 0d 00 00     ..Sect.1........
     cd2:	8e 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     ce2:	12 0d 01 00 8e 1b 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     cf2:	00 00 00 00 12 0d 02 00 8e 1b 00 00 c1 00 53 65     ..............Se
     d02:	63 74 2e 34 00 00 00 00 12 0d 03 00 8e 1b 00 00     ct.4............

00000d12 <menu_midiInVar>:
     d12:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 4e 08     ..Manual......N.
     d22:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     d32:	00 00 4f 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..O.......Range.
     d42:	00 00 00 00 00 00 50 08 00 00 00 00 c4 90 4d 61     ......P.......Ma
     d52:	6e 4e 6f 74 65 00 00 00 00 00 51 08 00 00 00 00     nNote.....Q.....

00000d62 <menu_midiCCreg>:
     d62:	82 00 52 65 67 4f 6e 5f 49 00 00 00 00 00 5a 09     ..RegOn_I.....Z.
     d72:	00 00 00 00 02 00 52 65 67 4f 66 66 5f 49 00 00     ......RegOff_I..
     d82:	00 00 5b 09 00 00 00 00 02 00 52 65 67 4f 6e 5f     ..[.......RegOn_
     d92:	4f 00 00 00 00 00 5c 09 00 00 00 00 c2 00 52 65     O.....\.......Re
     da2:	67 4f 66 66 5f 4f 00 00 00 00 5d 09 00 00 00 00     gOff_O....].....

00000db2 <menu_key>:
     db2:	81 08 54 61 73 74 65 31 00 00 00 00 d4 04 00 00     ..Taste1........
     dc2:	07 1c 49 2e 01 08 54 61 73 74 65 32 00 00 00 00     ..I...Taste2....
     dd2:	d4 04 01 00 07 1c 49 2e 01 08 54 61 73 74 65 33     ......I...Taste3
     de2:	00 00 00 00 d4 04 02 00 07 1c 49 2e c1 08 54 61     ..........I...Ta
     df2:	73 74 65 34 00 00 00 00 d4 04 03 00 07 1c 49 2e     ste4..........I.

00000e02 <menu_tune>:
     e02:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     e12:	c1 1c 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     e22:	00 00 01 00 c1 1c 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     e32:	00 00 00 00 00 00 02 00 c1 1c 00 00 c1 20 50 65     ............. Pe
     e42:	64 61 6c 00 00 00 00 00 00 00 03 00 c1 1c 00 00     dal.............

00000e52 <menu_midiOut>:
     e52:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 4e 09     ..III.........N.
     e62:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     e72:	00 00 50 09 00 00 00 00 03 10 49 00 00 00 00 00     ..P.......I.....
     e82:	00 00 00 00 00 00 52 09 00 00 00 00 03 10 50 00     ......R.......P.
	...
     e9a:	00 00 54 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..T.......III(in
     eaa:	74 29 00 00 00 00 4f 09 00 00 00 00 03 10 49 49     t)....O.......II
     eba:	28 69 6e 74 29 00 00 00 00 00 51 09 00 00 00 00     (int).....Q.....
     eca:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 53 09     ..I(int)......S.
     eda:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     eea:	00 00 55 09 00 00 00 00                             ..U.....

00000ef2 <menu_setup>:
     ef2:	81 00 4d 6f 64 75 6c 65 00 00 00 00 be 10 00 00     ..Module........
     f02:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     f12:	56 0f 00 00 00 00 22 1c 01 00 55 53 42 00 00 00     V....."...USB...
     f22:	00 00 00 00 2e 14 00 00 00 00 00 00 01 00 50 6f     ..............Po
     f32:	77 65 72 00 00 00 00 00 82 10 00 00 00 00 00 00     wer.............
     f42:	c1 00 45 45 70 72 6f 6d 00 00 00 00 46 10 00 00     ..EEprom....F...
     f52:	00 00 00 00                                         ....

00000f56 <menu_regout>:
     f56:	81 00 53 65 63 74 2e 31 00 00 00 00 f6 0f 00 00     ..Sect.1........
     f66:	f2 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     f76:	f6 0f 01 00 f2 1b 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     f86:	00 00 00 00 f6 0f 02 00 f2 1b 00 00 01 00 53 65     ..............Se
     f96:	63 74 2e 34 00 00 00 00 f6 0f 03 00 f2 1b 00 00     ct.4............
     fa6:	01 00 53 65 63 74 2e 35 00 00 00 00 f6 0f 04 00     ..Sect.5........
     fb6:	f2 1b 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
     fc6:	f6 0f 05 00 f2 1b 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
     fd6:	00 00 00 00 f6 0f 06 00 f2 1b 00 00 c1 00 53 65     ..............Se
     fe6:	63 74 2e 38 00 00 00 00 f6 0f 07 00 f2 1b 00 00     ct.8............

00000ff6 <menu_regoutSec>:
     ff6:	82 80 43 75 72 73 6f 72 00 00 00 00 00 00 00 02     ..Cursor........
    1006:	00 00 00 00 02 80 43 68 61 72 00 00 00 00 00 00     ......Char......
    1016:	00 00 01 02 00 00 00 00 0d 80 52 65 67 42 65 67     ..........RegBeg
    1026:	00 00 00 00 00 00 02 02 00 00 00 00 cd 80 52 65     ..............Re
    1036:	67 45 6e 64 00 00 00 00 00 00 03 02 00 00 00 00     gEnd............

00001046 <menu_eeprom>:
    1046:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
    1056:	9e 22 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     ."....EEBackup..
    1066:	00 00 00 00 86 22 00 00 c1 00 45 45 52 65 73 74     ....."....EERest
    1076:	6f 72 65 00 00 00 00 00 92 22 00 00                 ore......"..

00001082 <menu_Power>:
    1082:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
    1092:	0d 2f 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     ./....PowerOff..
    10a2:	00 00 00 00 16 2f 00 00 c1 00 50 2e 52 65 73 74     ...../....P.Rest
    10b2:	61 72 74 00 00 00 00 00 1e 2f 00 00                 art....../..

000010be <menu_module>:
    10be:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 78 03     ..ModRead.....x.
    10ce:	00 00 fe 1d 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
    10de:	00 00 79 03 00 00 fe 1d 0a 08 4d 6f 64 4f 4b 00     ..y.......ModOK.
    10ee:	00 00 00 00 00 00 6b 02 00 00 00 00 01 00 4d 6f     ......k.......Mo
    10fe:	64 54 65 73 74 00 00 00 22 11 00 00 00 00 00 00     dTest...".......
    110e:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 12 12 00 00     ..ModAssign.....
    111e:	00 00 f4 1d                                         ....

00001122 <menu_ModeSel>:
    1122:	81 00 4d 6f 64 2e 30 00 00 00 00 00 c2 11 00 00     ..Mod.0.........
    1132:	78 1b 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     x.....Mod.1.....
    1142:	c2 11 01 00 78 1b 00 00 01 00 4d 6f 64 2e 32 00     ....x.....Mod.2.
    1152:	00 00 00 00 c2 11 02 00 78 1b 00 00 01 00 4d 6f     ........x.....Mo
    1162:	64 2e 33 00 00 00 00 00 c2 11 03 00 78 1b 00 00     d.3.........x...
    1172:	01 00 4d 6f 64 2e 34 00 00 00 00 00 c2 11 04 00     ..Mod.4.........
    1182:	78 1b 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     x.....Mod.5.....
    1192:	c2 11 05 00 78 1b 00 00 01 00 4d 6f 64 2e 36 00     ....x.....Mod.6.
    11a2:	00 00 00 00 c2 11 06 00 78 1b 00 00 c1 00 4d 6f     ........x.....Mo
    11b2:	64 2e 37 00 00 00 00 00 c2 11 07 00 78 1b 00 00     d.7.........x...

000011c2 <menu_ModTestSelcted>:
    11c2:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    11d2:	79 1c 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     y.....Write.....
    11e2:	00 00 d3 05 0f 1b 4b 1b 01 00 54 65 73 74 50 74     ......K...TestPt
    11f2:	72 6e 00 00 00 00 00 00 a4 2a 00 00 c1 00 4c 6f     rn.......*....Lo
    1202:	6f 70 54 73 74 00 00 00 00 00 00 00 ae 1c 00 00     opTst...........

00001212 <menu_modAssign>:
    1212:	81 00 4d 61 6e 2e 33 00 00 00 00 00 16 13 00 00     ..Man.3.........
    1222:	ac 1b 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
    1232:	16 13 01 00 ac 1b 00 00 01 00 4d 61 6e 2e 31 00     ..........Man.1.
    1242:	00 00 00 00 16 13 02 00 ac 1b 00 00 01 00 50 65     ..............Pe
    1252:	64 61 6c 00 00 00 00 00 16 13 03 00 ac 1b 00 00     dal.............
    1262:	c1 00 52 65 67 69 73 74 65 72 00 00 76 12 04 00     ..Register..v...
    1272:	00 00 00 00                                         ....

00001276 <menu_modSection8>:
    1276:	81 00 53 65 63 74 2e 31 00 00 00 00 66 13 00 00     ..Sect.1....f...
    1286:	dc 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    1296:	66 13 01 00 dc 1b 00 00 01 00 53 65 63 74 2e 33     f.........Sect.3
    12a6:	00 00 00 00 66 13 02 00 dc 1b 00 00 01 00 53 65     ....f.........Se
    12b6:	63 74 2e 34 00 00 00 00 66 13 03 00 dc 1b 00 00     ct.4....f.......
    12c6:	01 00 53 65 63 74 2e 35 00 00 00 00 66 13 04 00     ..Sect.5....f...
    12d6:	dc 1b 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    12e6:	66 13 05 00 dc 1b 00 00 01 00 53 65 63 74 2e 37     f.........Sect.7
    12f6:	00 00 00 00 66 13 06 00 dc 1b 00 00 c1 00 53 65     ....f.........Se
    1306:	63 74 2e 38 00 00 00 00 66 13 07 00 dc 1b 00 00     ct.8....f.......

00001316 <menu_modSection>:
    1316:	81 00 53 65 63 74 2e 31 00 00 00 00 a2 13 00 00     ..Sect.1........
    1326:	b7 1b 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    1336:	a2 13 01 00 b7 1b 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    1346:	00 00 00 00 a2 13 02 00 b7 1b 00 00 c1 00 53 65     ..............Se
    1356:	63 74 2e 34 00 00 00 00 a2 13 03 00 b7 1b 00 00     ct.4............

00001366 <menu_modDefineReg>:
    1366:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 1d 08     ..RegBeg........
    1376:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    1386:	00 00 1e 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    1396:	2f 42 69 74 00 00 1f 08 00 00 00 00                 /Bit........

000013a2 <menu_modDefine>:
    13a2:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 5e 09     ..NoteBeg.....^.
    13b2:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    13c2:	00 00 5f 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     .._.......Module
    13d2:	2f 42 69 74 00 00 60 09 00 00 00 00                 /Bit..`.....

000013de <menu_status>:
    13de:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    13ee:	fd 28 00 00 01 00 55 53 42 00 00 00 00 00 00 00     .(....USB.......
    13fe:	2e 14 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     .........@MIDI-I
    140e:	6e 00 00 00 00 00 00 00 81 28 00 00 c2 40 4d 49     n........(...@MI
    141e:	44 49 2d 4f 75 74 00 00 00 00 00 00 bf 28 00 00     DI-Out.......(..

0000142e <menu_USBser>:
    142e:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 7c 16     ..EventLog....|.
    143e:	00 00 28 1e 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..(...SendLog...
    144e:	00 00 00 00 02 1e 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
    145e:	66 67 00 00 00 00 00 00 3c 1e 00 00                 fg......<...

0000146a <sw_version>:
    146a:	56 30 2e 38 33 00                                   V0.83.

00001470 <cplInfo>:
    1470:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    1480:	01 02 00 03 01 03 02 03                             ........

00001488 <keylabel_1>:
    1488:	31 00                                               1.

0000148a <keylabel_0>:
    148a:	30 00                                               0.

0000148c <keylabel_text>:
    148c:	54 65 78 74 80 00                                   Text..

00001492 <keylabel_exit>:
    1492:	45 78 69 74 00                                      Exit.

00001497 <keylabel_off>:
    1497:	7e 61 75 73 00                                      ~aus.

0000149c <keylabel_on>:
    149c:	7e 65 69 6e 00                                      ~ein.

000014a1 <keylabel_onoff>:
    14a1:	45 69 6e 80 00                                      Ein..

000014a6 <keylabel_minus>:
    14a6:	2d 00                                               -.

000014a8 <keylabel_plus>:
    14a8:	2b 00                                               +.

000014aa <keylabel_left>:
    14aa:	7f 00                                               ..

000014ac <keylabel_right>:
    14ac:	7e 00                                               ~.

000014ae <keylabel_down>:
    14ae:	09 00                                               ..

000014b0 <keylabel_up>:
    14b0:	08 00                                               ..

000014b2 <cr_lf>:
    14b2:	0d 0a 00 00                                         ....

000014b6 <__ctors_end>:
    14b6:	11 24       	eor	r1, r1
    14b8:	1f be       	out	0x3f, r1	; 63
    14ba:	cf ef       	ldi	r28, 0xFF	; 255
    14bc:	d1 e2       	ldi	r29, 0x21	; 33
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	0c bf       	out	0x3c, r16	; 60

000014c6 <__do_copy_data>:
    14c6:	12 e0       	ldi	r17, 0x02	; 2
    14c8:	a0 e0       	ldi	r26, 0x00	; 0
    14ca:	b2 e0       	ldi	r27, 0x02	; 2
    14cc:	e4 e1       	ldi	r30, 0x14	; 20
    14ce:	f0 e8       	ldi	r31, 0x80	; 128
    14d0:	00 e0       	ldi	r16, 0x00	; 0
    14d2:	0b bf       	out	0x3b, r16	; 59
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <__do_copy_data+0x14>
    14d6:	07 90       	elpm	r0, Z+
    14d8:	0d 92       	st	X+, r0
    14da:	a8 32       	cpi	r26, 0x28	; 40
    14dc:	b1 07       	cpc	r27, r17
    14de:	d9 f7       	brne	.-10     	; 0x14d6 <__do_copy_data+0x10>

000014e0 <__do_clear_bss>:
    14e0:	29 e1       	ldi	r18, 0x19	; 25
    14e2:	a8 e2       	ldi	r26, 0x28	; 40
    14e4:	b2 e0       	ldi	r27, 0x02	; 2
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <.do_clear_bss_start>

000014e8 <.do_clear_bss_loop>:
    14e8:	1d 92       	st	X+, r1

000014ea <.do_clear_bss_start>:
    14ea:	aa 34       	cpi	r26, 0x4A	; 74
    14ec:	b2 07       	cpc	r27, r18
    14ee:	e1 f7       	brne	.-8      	; 0x14e8 <.do_clear_bss_loop>
    14f0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <main>
    14f4:	0c 94 08 40 	jmp	0x8010	; 0x8010 <_exit>

000014f8 <__bad_interrupt>:
    14f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000014fc <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    14fc:	fc 01       	movw	r30, r24
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	1c c0       	rjmp	.+56     	; 0x153c <crc16_ram+0x40>
    1504:	df 01       	movw	r26, r30
    1506:	11 96       	adiw	r26, 0x01	; 1
    1508:	20 81       	ld	r18, Z
    150a:	82 27       	eor	r24, r18
    150c:	28 2f       	mov	r18, r24
    150e:	22 95       	swap	r18
    1510:	28 27       	eor	r18, r24
    1512:	02 2e       	mov	r0, r18
    1514:	26 95       	lsr	r18
    1516:	26 95       	lsr	r18
    1518:	20 25       	eor	r18, r0
    151a:	02 2e       	mov	r0, r18
    151c:	26 95       	lsr	r18
    151e:	20 25       	eor	r18, r0
    1520:	27 70       	andi	r18, 0x07	; 7
    1522:	08 2e       	mov	r0, r24
    1524:	89 2f       	mov	r24, r25
    1526:	26 95       	lsr	r18
    1528:	07 94       	ror	r0
    152a:	27 95       	ror	r18
    152c:	90 2d       	mov	r25, r0
    152e:	82 27       	eor	r24, r18
    1530:	06 94       	lsr	r0
    1532:	27 95       	ror	r18
    1534:	90 25       	eor	r25, r0
    1536:	82 27       	eor	r24, r18
    1538:	ba 01       	movw	r22, r20
    153a:	fd 01       	movw	r30, r26
    153c:	ab 01       	movw	r20, r22
    153e:	41 50       	subi	r20, 0x01	; 1
    1540:	51 09       	sbc	r21, r1
    1542:	67 2b       	or	r22, r23
    1544:	f9 f6       	brne	.-66     	; 0x1504 <crc16_ram+0x8>
    1546:	08 95       	ret

00001548 <crc16_eeprom>:
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	cf 93       	push	r28
    1552:	df 93       	push	r29
    1554:	cf ef       	ldi	r28, 0xFF	; 255
    1556:	df ef       	ldi	r29, 0xFF	; 255
    1558:	21 c0       	rjmp	.+66     	; 0x159c <crc16_eeprom+0x54>
    155a:	7c 01       	movw	r14, r24
    155c:	2f ef       	ldi	r18, 0xFF	; 255
    155e:	e2 1a       	sub	r14, r18
    1560:	f2 0a       	sbc	r15, r18
    1562:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    1566:	9e 01       	movw	r18, r28
    1568:	28 27       	eor	r18, r24
    156a:	82 2f       	mov	r24, r18
    156c:	82 95       	swap	r24
    156e:	82 27       	eor	r24, r18
    1570:	08 2e       	mov	r0, r24
    1572:	86 95       	lsr	r24
    1574:	86 95       	lsr	r24
    1576:	80 25       	eor	r24, r0
    1578:	08 2e       	mov	r0, r24
    157a:	86 95       	lsr	r24
    157c:	80 25       	eor	r24, r0
    157e:	87 70       	andi	r24, 0x07	; 7
    1580:	02 2e       	mov	r0, r18
    1582:	23 2f       	mov	r18, r19
    1584:	86 95       	lsr	r24
    1586:	07 94       	ror	r0
    1588:	87 95       	ror	r24
    158a:	30 2d       	mov	r19, r0
    158c:	28 27       	eor	r18, r24
    158e:	06 94       	lsr	r0
    1590:	87 95       	ror	r24
    1592:	30 25       	eor	r19, r0
    1594:	28 27       	eor	r18, r24
    1596:	e9 01       	movw	r28, r18
    1598:	b8 01       	movw	r22, r16
    159a:	c7 01       	movw	r24, r14
    159c:	8b 01       	movw	r16, r22
    159e:	01 50       	subi	r16, 0x01	; 1
    15a0:	11 09       	sbc	r17, r1
    15a2:	67 2b       	or	r22, r23
    15a4:	d1 f6       	brne	.-76     	; 0x155a <crc16_eeprom+0x12>
    15a6:	ce 01       	movw	r24, r28
    15a8:	df 91       	pop	r29
    15aa:	cf 91       	pop	r28
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	ff 90       	pop	r15
    15b2:	ef 90       	pop	r14
    15b4:	08 95       	ret

000015b6 <crc16_ram_startVal>:
    15b6:	fc 01       	movw	r30, r24
    15b8:	ca 01       	movw	r24, r20
    15ba:	1c c0       	rjmp	.+56     	; 0x15f4 <crc16_ram_startVal+0x3e>
    15bc:	df 01       	movw	r26, r30
    15be:	11 96       	adiw	r26, 0x01	; 1
    15c0:	20 81       	ld	r18, Z
    15c2:	82 27       	eor	r24, r18
    15c4:	28 2f       	mov	r18, r24
    15c6:	22 95       	swap	r18
    15c8:	28 27       	eor	r18, r24
    15ca:	02 2e       	mov	r0, r18
    15cc:	26 95       	lsr	r18
    15ce:	26 95       	lsr	r18
    15d0:	20 25       	eor	r18, r0
    15d2:	02 2e       	mov	r0, r18
    15d4:	26 95       	lsr	r18
    15d6:	20 25       	eor	r18, r0
    15d8:	27 70       	andi	r18, 0x07	; 7
    15da:	08 2e       	mov	r0, r24
    15dc:	89 2f       	mov	r24, r25
    15de:	26 95       	lsr	r18
    15e0:	07 94       	ror	r0
    15e2:	27 95       	ror	r18
    15e4:	90 2d       	mov	r25, r0
    15e6:	82 27       	eor	r24, r18
    15e8:	06 94       	lsr	r0
    15ea:	27 95       	ror	r18
    15ec:	90 25       	eor	r25, r0
    15ee:	82 27       	eor	r24, r18
    15f0:	ba 01       	movw	r22, r20
    15f2:	fd 01       	movw	r30, r26
    15f4:	ab 01       	movw	r20, r22
    15f6:	41 50       	subi	r20, 0x01	; 1
    15f8:	51 09       	sbc	r21, r1
    15fa:	67 2b       	or	r22, r23
    15fc:	f9 f6       	brne	.-66     	; 0x15bc <crc16_ram_startVal+0x6>
    15fe:	08 95       	ret

00001600 <crc16_eeprom_startVal>:
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	ea 01       	movw	r28, r20
    160e:	21 c0       	rjmp	.+66     	; 0x1652 <crc16_eeprom_startVal+0x52>
    1610:	7c 01       	movw	r14, r24
    1612:	2f ef       	ldi	r18, 0xFF	; 255
    1614:	e2 1a       	sub	r14, r18
    1616:	f2 0a       	sbc	r15, r18
    1618:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    161c:	ae 01       	movw	r20, r28
    161e:	48 27       	eor	r20, r24
    1620:	84 2f       	mov	r24, r20
    1622:	82 95       	swap	r24
    1624:	84 27       	eor	r24, r20
    1626:	08 2e       	mov	r0, r24
    1628:	86 95       	lsr	r24
    162a:	86 95       	lsr	r24
    162c:	80 25       	eor	r24, r0
    162e:	08 2e       	mov	r0, r24
    1630:	86 95       	lsr	r24
    1632:	80 25       	eor	r24, r0
    1634:	87 70       	andi	r24, 0x07	; 7
    1636:	04 2e       	mov	r0, r20
    1638:	45 2f       	mov	r20, r21
    163a:	86 95       	lsr	r24
    163c:	07 94       	ror	r0
    163e:	87 95       	ror	r24
    1640:	50 2d       	mov	r21, r0
    1642:	48 27       	eor	r20, r24
    1644:	06 94       	lsr	r0
    1646:	87 95       	ror	r24
    1648:	50 25       	eor	r21, r0
    164a:	48 27       	eor	r20, r24
    164c:	ea 01       	movw	r28, r20
    164e:	b8 01       	movw	r22, r16
    1650:	c7 01       	movw	r24, r14
    1652:	8b 01       	movw	r16, r22
    1654:	01 50       	subi	r16, 0x01	; 1
    1656:	11 09       	sbc	r17, r1
    1658:	67 2b       	or	r22, r23
    165a:	d1 f6       	brne	.-76     	; 0x1610 <crc16_eeprom_startVal+0x10>
    165c:	ce 01       	movw	r24, r28
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ff 90       	pop	r15
    1668:	ef 90       	pop	r14
    166a:	08 95       	ret

0000166c <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    1670:	82 e3       	ldi	r24, 0x32	; 50
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    1678:	ec 01       	movw	r28, r24
    167a:	60 e3       	ldi	r22, 0x30	; 48
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	62 df       	rcall	.-316    	; 0x1548 <crc16_eeprom>
    1684:	c8 17       	cp	r28, r24
    1686:	d9 07       	cpc	r29, r25
    1688:	81 f4       	brne	.+32     	; 0x16aa <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    1692:	8d 34       	cpi	r24, 0x4D	; 77
    1694:	51 f4       	brne	.+20     	; 0x16aa <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    1696:	40 e3       	ldi	r20, 0x30	; 48
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	70 e0       	ldi	r23, 0x00	; 0
    169e:	8e e5       	ldi	r24, 0x5E	; 94
    16a0:	99 e0       	ldi	r25, 0x09	; 9
    16a2:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return (EE_LOAD_OK);
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    16aa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    16ae:	81 60       	ori	r24, 0x01	; 1
    16b0:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    16b4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16b6:	df 91       	pop	r29
    16b8:	cf 91       	pop	r28
    16ba:	08 95       	ret

000016bc <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    16c0:	85 e3       	ldi	r24, 0x35	; 53
    16c2:	91 e0       	ldi	r25, 0x01	; 1
    16c4:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    16c8:	ec 01       	movw	r28, r24
    16ca:	60 e0       	ldi	r22, 0x00	; 0
    16cc:	71 e0       	ldi	r23, 0x01	; 1
    16ce:	85 e3       	ldi	r24, 0x35	; 53
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	3a df       	rcall	.-396    	; 0x1548 <crc16_eeprom>
    16d4:	c8 17       	cp	r28, r24
    16d6:	d9 07       	cpc	r29, r25
    16d8:	81 f4       	brne	.+32     	; 0x16fa <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    16da:	84 e3       	ldi	r24, 0x34	; 52
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    16e2:	89 34       	cpi	r24, 0x49	; 73
    16e4:	51 f4       	brne	.+20     	; 0x16fa <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	51 e0       	ldi	r21, 0x01	; 1
    16ea:	65 e3       	ldi	r22, 0x35	; 53
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	8e e4       	ldi	r24, 0x4E	; 78
    16f0:	98 e0       	ldi	r25, 0x08	; 8
    16f2:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return (EE_LOAD_OK);
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	06 c0       	rjmp	.+12     	; 0x1706 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    16fa:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    16fe:	82 60       	ori	r24, 0x02	; 2
    1700:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1704:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    1710:	83 e4       	ldi	r24, 0x43	; 67
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    1718:	ec 01       	movw	r28, r24
    171a:	6b e0       	ldi	r22, 0x0B	; 11
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	88 e3       	ldi	r24, 0x38	; 56
    1720:	91 e0       	ldi	r25, 0x01	; 1
    1722:	12 df       	rcall	.-476    	; 0x1548 <crc16_eeprom>
    1724:	c8 17       	cp	r28, r24
    1726:	d9 07       	cpc	r29, r25
    1728:	c1 f4       	brne	.+48     	; 0x175a <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    172a:	87 e3       	ldi	r24, 0x37	; 55
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    1732:	8f 34       	cpi	r24, 0x4F	; 79
    1734:	91 f4       	brne	.+36     	; 0x175a <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1736:	48 e0       	ldi	r20, 0x08	; 8
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	68 e3       	ldi	r22, 0x38	; 56
    173c:	71 e0       	ldi	r23, 0x01	; 1
    173e:	8e e4       	ldi	r24, 0x4E	; 78
    1740:	99 e0       	ldi	r25, 0x09	; 9
    1742:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1746:	43 e0       	ldi	r20, 0x03	; 3
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	60 e4       	ldi	r22, 0x40	; 64
    174c:	71 e0       	ldi	r23, 0x01	; 1
    174e:	86 e5       	ldi	r24, 0x56	; 86
    1750:	99 e0       	ldi	r25, 0x09	; 9
    1752:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return (EE_LOAD_OK);
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    175a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    175e:	84 60       	ori	r24, 0x04	; 4
    1760:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1764:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    176c:	cf 93       	push	r28
    176e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    1770:	88 e4       	ldi	r24, 0x48	; 72
    1772:	91 e0       	ldi	r25, 0x01	; 1
    1774:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    1778:	ec 01       	movw	r28, r24
    177a:	61 e0       	ldi	r22, 0x01	; 1
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	86 e4       	ldi	r24, 0x46	; 70
    1780:	91 e0       	ldi	r25, 0x01	; 1
    1782:	e2 de       	rcall	.-572    	; 0x1548 <crc16_eeprom>
    1784:	c8 17       	cp	r28, r24
    1786:	d9 07       	cpc	r29, r25
    1788:	a1 f4       	brne	.+40     	; 0x17b2 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    178a:	85 e4       	ldi	r24, 0x45	; 69
    178c:	91 e0       	ldi	r25, 0x01	; 1
    178e:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    1792:	89 36       	cpi	r24, 0x69	; 105
    1794:	71 f4       	brne	.+28     	; 0x17b2 <eeprom_ReadModules+0x46>
		// flaw: crc ist for moduleAssignRead only ?
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    1796:	86 e4       	ldi	r24, 0x46	; 70
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    179e:	c8 e7       	ldi	r28, 0x78	; 120
    17a0:	d3 e0       	ldi	r29, 0x03	; 3
    17a2:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    17a4:	87 e4       	ldi	r24, 0x47	; 71
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    17ac:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	06 c0       	rjmp	.+12     	; 0x17be <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    17b2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    17b6:	88 60       	ori	r24, 0x08	; 8
    17b8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    17bc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17be:	df 91       	pop	r29
    17c0:	cf 91       	pop	r28
    17c2:	08 95       	ret

000017c4 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    17c8:	87 ef       	ldi	r24, 0xF7	; 247
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    17d0:	ec 01       	movw	r28, r24
    17d2:	62 e0       	ldi	r22, 0x02	; 2
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	85 ef       	ldi	r24, 0xF5	; 245
    17d8:	93 e0       	ldi	r25, 0x03	; 3
    17da:	b6 de       	rcall	.-660    	; 0x1548 <crc16_eeprom>
    17dc:	c8 17       	cp	r28, r24
    17de:	d9 07       	cpc	r29, r25
    17e0:	81 f4       	brne	.+32     	; 0x1802 <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    17e2:	84 ef       	ldi	r24, 0xF4	; 244
    17e4:	93 e0       	ldi	r25, 0x03	; 3
    17e6:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    17ea:	84 35       	cpi	r24, 0x54	; 84
    17ec:	51 f4       	brne	.+20     	; 0x1802 <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    17ee:	42 e0       	ldi	r20, 0x02	; 2
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	65 ef       	ldi	r22, 0xF5	; 245
    17f4:	73 e0       	ldi	r23, 0x03	; 3
    17f6:	8c e4       	ldi	r24, 0x4C	; 76
    17f8:	98 e0       	ldi	r25, 0x08	; 8
    17fa:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return (EE_LOAD_OK);
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	06 c0       	rjmp	.+12     	; 0x180e <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1802:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1806:	82 60       	ori	r24, 0x02	; 2
    1808:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    180c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1818:	8c e4       	ldi	r24, 0x4C	; 76
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    1820:	ec 01       	movw	r28, r24
    1822:	61 e0       	ldi	r22, 0x01	; 1
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	8b e4       	ldi	r24, 0x4B	; 75
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	8e de       	rcall	.-740    	; 0x1548 <crc16_eeprom>
    182c:	c8 17       	cp	r28, r24
    182e:	d9 07       	cpc	r29, r25
    1830:	71 f4       	brne	.+28     	; 0x184e <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    1832:	8a e4       	ldi	r24, 0x4A	; 74
    1834:	91 e0       	ldi	r25, 0x01	; 1
    1836:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    183a:	85 35       	cpi	r24, 0x55	; 85
    183c:	41 f4       	brne	.+16     	; 0x184e <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    183e:	8b e4       	ldi	r24, 0x4B	; 75
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    1846:	80 93 7c 16 	sts	0x167C, r24	; 0x80167c <serUSB_Active>
		return (EE_LOAD_OK);
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	06 c0       	rjmp	.+12     	; 0x185a <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    184e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1852:	88 60       	ori	r24, 0x08	; 8
    1854:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1858:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret

00001860 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	8f e4       	ldi	r24, 0x4F	; 79
    186a:	91 e0       	ldi	r25, 0x01	; 1
    186c:	6d de       	rcall	.-806    	; 0x1548 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    186e:	ac 01       	movw	r20, r24
    1870:	68 e1       	ldi	r22, 0x18	; 24
    1872:	70 e0       	ldi	r23, 0x00	; 0
    1874:	80 e5       	ldi	r24, 0x50	; 80
    1876:	91 e0       	ldi	r25, 0x01	; 1
    1878:	c3 de       	rcall	.-634    	; 0x1600 <crc16_eeprom_startVal>
    187a:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    187c:	88 e6       	ldi	r24, 0x68	; 104
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    1884:	c8 17       	cp	r28, r24
    1886:	d9 07       	cpc	r29, r25
    1888:	b1 f4       	brne	.+44     	; 0x18b6 <eeprom_ReadReg+0x56>
    188a:	8e e4       	ldi	r24, 0x4E	; 78
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    1892:	82 35       	cpi	r24, 0x52	; 82
    1894:	81 f4       	brne	.+32     	; 0x18b6 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    1896:	8f e4       	ldi	r24, 0x4F	; 79
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    189e:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    18a2:	48 e1       	ldi	r20, 0x18	; 24
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	60 e5       	ldi	r22, 0x50	; 80
    18a8:	71 e0       	ldi	r23, 0x01	; 1
    18aa:	8d e1       	ldi	r24, 0x1D	; 29
    18ac:	98 e0       	ldi	r25, 0x08	; 8
    18ae:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return(EE_LOAD_OK);
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    18b6:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    18ba:	80 62       	ori	r24, 0x20	; 32
    18bc:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    18cc:	8b ee       	ldi	r24, 0xEB	; 235
    18ce:	93 e0       	ldi	r25, 0x03	; 3
    18d0:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    18d4:	ec 01       	movw	r28, r24
    18d6:	60 e8       	ldi	r22, 0x80	; 128
    18d8:	72 e0       	ldi	r23, 0x02	; 2
    18da:	8b e6       	ldi	r24, 0x6B	; 107
    18dc:	91 e0       	ldi	r25, 0x01	; 1
    18de:	34 de       	rcall	.-920    	; 0x1548 <crc16_eeprom>
    18e0:	c8 17       	cp	r28, r24
    18e2:	d9 07       	cpc	r29, r25
    18e4:	81 f4       	brne	.+32     	; 0x1906 <eeprom_ReadProg+0x3e>
    18e6:	8a e6       	ldi	r24, 0x6A	; 106
    18e8:	91 e0       	ldi	r25, 0x01	; 1
    18ea:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    18ee:	80 35       	cpi	r24, 0x50	; 80
    18f0:	51 f4       	brne	.+20     	; 0x1906 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    18f2:	40 e8       	ldi	r20, 0x80	; 128
    18f4:	52 e0       	ldi	r21, 0x02	; 2
    18f6:	6b e6       	ldi	r22, 0x6B	; 107
    18f8:	71 e0       	ldi	r23, 0x01	; 1
    18fa:	8e e8       	ldi	r24, 0x8E	; 142
    18fc:	99 e0       	ldi	r25, 0x09	; 9
    18fe:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return(EE_LOAD_OK);
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	06 c0       	rjmp	.+12     	; 0x1912 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1906:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    190a:	80 64       	ori	r24, 0x40	; 64
    190c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1910:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    191c:	82 ef       	ldi	r24, 0xF2	; 242
    191e:	93 e0       	ldi	r25, 0x03	; 3
    1920:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    1924:	ec 01       	movw	r28, r24
    1926:	64 e0       	ldi	r22, 0x04	; 4
    1928:	70 e0       	ldi	r23, 0x00	; 0
    192a:	8e ee       	ldi	r24, 0xEE	; 238
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	0c de       	rcall	.-1000   	; 0x1548 <crc16_eeprom>
    1930:	c8 17       	cp	r28, r24
    1932:	d9 07       	cpc	r29, r25
    1934:	51 f4       	brne	.+20     	; 0x194a <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1936:	44 e0       	ldi	r20, 0x04	; 4
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	6e ee       	ldi	r22, 0xEE	; 238
    193c:	73 e0       	ldi	r23, 0x03	; 3
    193e:	89 ed       	ldi	r24, 0xD9	; 217
    1940:	95 e0       	ldi	r25, 0x05	; 5
    1942:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return(EE_LOAD_OK);
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	06 c0       	rjmp	.+12     	; 0x1956 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    194a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    194e:	80 68       	ori	r24, 0x80	; 128
    1950:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1954:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <eeprom_ReadRegOut>:

uint8_t eeprom_ReadRegOut(){
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.regOut_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.reg_Out, sizeof (reg_Out)))){
    1960:	8a e1       	ldi	r24, 0x1A	; 26
    1962:	94 e0       	ldi	r25, 0x04	; 4
    1964:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    1968:	ec 01       	movw	r28, r24
    196a:	60 e2       	ldi	r22, 0x20	; 32
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	8a ef       	ldi	r24, 0xFA	; 250
    1970:	93 e0       	ldi	r25, 0x03	; 3
    1972:	ea dd       	rcall	.-1068   	; 0x1548 <crc16_eeprom>
    1974:	c8 17       	cp	r28, r24
    1976:	d9 07       	cpc	r29, r25
    1978:	51 f4       	brne	.+20     	; 0x198e <eeprom_ReadRegOut+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof (ee.eeData.ee.reg_Out));
    197a:	40 e2       	ldi	r20, 0x20	; 32
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	6a ef       	ldi	r22, 0xFA	; 250
    1980:	73 e0       	ldi	r23, 0x03	; 3
    1982:	80 e0       	ldi	r24, 0x00	; 0
    1984:	92 e0       	ldi	r25, 0x02	; 2
    1986:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return(EE_LOAD_OK);
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	06 c0       	rjmp	.+12     	; 0x199a <eeprom_ReadRegOut+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    198e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    1992:	80 62       	ori	r24, 0x20	; 32
    1994:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    1998:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	08 95       	ret

000019a0 <eeprom_ReadCCreg>:

uint8_t eeprom_ReadCCreg(){
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiCCreg_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof (midi_ccReg)))){
    19a4:	81 e2       	ldi	r24, 0x21	; 33
    19a6:	94 e0       	ldi	r25, 0x04	; 4
    19a8:	0e 94 de 3f 	call	0x7fbc	; 0x7fbc <eeprom_read_word>
    19ac:	ec 01       	movw	r28, r24
    19ae:	64 e0       	ldi	r22, 0x04	; 4
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	8d e1       	ldi	r24, 0x1D	; 29
    19b4:	94 e0       	ldi	r25, 0x04	; 4
    19b6:	c8 dd       	rcall	.-1136   	; 0x1548 <crc16_eeprom>
    19b8:	c8 17       	cp	r28, r24
    19ba:	d9 07       	cpc	r29, r25
    19bc:	51 f4       	brne	.+20     	; 0x19d2 <eeprom_ReadCCreg+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) &midi_ccReg, (uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof (ee.eeData.ee.midi_CCreg));
    19be:	44 e0       	ldi	r20, 0x04	; 4
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	6d e1       	ldi	r22, 0x1D	; 29
    19c4:	74 e0       	ldi	r23, 0x04	; 4
    19c6:	8a e5       	ldi	r24, 0x5A	; 90
    19c8:	99 e0       	ldi	r25, 0x09	; 9
    19ca:	0e 94 c6 3f 	call	0x7f8c	; 0x7f8c <eeprom_read_block>
		return(EE_LOAD_OK);
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	06 c0       	rjmp	.+12     	; 0x19de <eeprom_ReadCCreg+0x3e>
	} else {
		ee_initError |= EE_ERROR_REG;
    19d2:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
    19d6:	80 62       	ori	r24, 0x20	; 32
    19d8:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
		return (EE_LOAD_ERROR);
    19dc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	08 95       	ret

000019e4 <eepromWriteSignature>:


void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    19ee:	65 e6       	ldi	r22, 0x65	; 101
    19f0:	83 e2       	ldi	r24, 0x23	; 35
    19f2:	94 e0       	ldi	r25, 0x04	; 4
    19f4:	0c 94 f2 3f 	jmp	0x7fe4	; 0x7fe4 <eeprom_update_byte>
    19f8:	08 95       	ret

000019fa <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    19fe:	60 e3       	ldi	r22, 0x30	; 48
    1a00:	70 e0       	ldi	r23, 0x00	; 0
    1a02:	8e e5       	ldi	r24, 0x5E	; 94
    1a04:	99 e0       	ldi	r25, 0x09	; 9
    1a06:	7a dd       	rcall	.-1292   	; 0x14fc <crc16_ram>
    1a08:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a0a:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1a0e:	6d e4       	ldi	r22, 0x4D	; 77
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    1a18:	40 e3       	ldi	r20, 0x30	; 48
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	62 e0       	ldi	r22, 0x02	; 2
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
    1a20:	8e e5       	ldi	r24, 0x5E	; 94
    1a22:	99 e0       	ldi	r25, 0x09	; 9
    1a24:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    1a28:	be 01       	movw	r22, r28
    1a2a:	82 e3       	ldi	r24, 0x32	; 50
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1a32:	d8 df       	rcall	.-80     	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a34:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	71 e0       	ldi	r23, 0x01	; 1
    1a46:	8e e4       	ldi	r24, 0x4E	; 78
    1a48:	98 e0       	ldi	r25, 0x08	; 8
    1a4a:	58 dd       	rcall	.-1360   	; 0x14fc <crc16_ram>
    1a4c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a4e:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1a52:	69 e4       	ldi	r22, 0x49	; 73
    1a54:	84 e3       	ldi	r24, 0x34	; 52
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	51 e0       	ldi	r21, 0x01	; 1
    1a60:	65 e3       	ldi	r22, 0x35	; 53
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	8e e4       	ldi	r24, 0x4E	; 78
    1a66:	98 e0       	ldi	r25, 0x08	; 8
    1a68:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1a6c:	be 01       	movw	r22, r28
    1a6e:	85 e3       	ldi	r24, 0x35	; 53
    1a70:	91 e0       	ldi	r25, 0x01	; 1
    1a72:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1a76:	b6 df       	rcall	.-148    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a78:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	08 95       	ret

00001a82 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1a82:	cf 93       	push	r28
    1a84:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    1a86:	68 e0       	ldi	r22, 0x08	; 8
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	8e e4       	ldi	r24, 0x4E	; 78
    1a8c:	99 e0       	ldi	r25, 0x09	; 9
    1a8e:	36 dd       	rcall	.-1428   	; 0x14fc <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1a90:	ac 01       	movw	r20, r24
    1a92:	63 e0       	ldi	r22, 0x03	; 3
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	86 e5       	ldi	r24, 0x56	; 86
    1a98:	99 e0       	ldi	r25, 0x09	; 9
    1a9a:	8d dd       	rcall	.-1254   	; 0x15b6 <crc16_ram_startVal>
    1a9c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a9e:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    1aa2:	6f e4       	ldi	r22, 0x4F	; 79
    1aa4:	87 e3       	ldi	r24, 0x37	; 55
    1aa6:	91 e0       	ldi	r25, 0x01	; 1
    1aa8:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1aac:	48 e0       	ldi	r20, 0x08	; 8
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	68 e3       	ldi	r22, 0x38	; 56
    1ab2:	71 e0       	ldi	r23, 0x01	; 1
    1ab4:	8e e4       	ldi	r24, 0x4E	; 78
    1ab6:	99 e0       	ldi	r25, 0x09	; 9
    1ab8:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1abc:	43 e0       	ldi	r20, 0x03	; 3
    1abe:	50 e0       	ldi	r21, 0x00	; 0
    1ac0:	60 e4       	ldi	r22, 0x40	; 64
    1ac2:	71 e0       	ldi	r23, 0x01	; 1
    1ac4:	86 e5       	ldi	r24, 0x56	; 86
    1ac6:	99 e0       	ldi	r25, 0x09	; 9
    1ac8:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1acc:	be 01       	movw	r22, r28
    1ace:	83 e4       	ldi	r24, 0x43	; 67
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1ad6:	86 df       	rcall	.-244    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1ad8:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    1ae2:	0f 93       	push	r16
    1ae4:	1f 93       	push	r17
    1ae6:	cf 93       	push	r28
    1ae8:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	88 e7       	ldi	r24, 0x78	; 120
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	04 dd       	rcall	.-1528   	; 0x14fc <crc16_ram>
    1af4:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    1af6:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    1afa:	69 e6       	ldi	r22, 0x69	; 105
    1afc:	85 e4       	ldi	r24, 0x45	; 69
    1afe:	91 e0       	ldi	r25, 0x01	; 1
    1b00:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    1b04:	c8 e7       	ldi	r28, 0x78	; 120
    1b06:	d3 e0       	ldi	r29, 0x03	; 3
    1b08:	68 81       	ld	r22, Y
    1b0a:	86 e4       	ldi	r24, 0x46	; 70
    1b0c:	91 e0       	ldi	r25, 0x01	; 1
    1b0e:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    1b12:	69 81       	ldd	r22, Y+1	; 0x01
    1b14:	87 e4       	ldi	r24, 0x47	; 71
    1b16:	91 e0       	ldi	r25, 0x01	; 1
    1b18:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1b1c:	b8 01       	movw	r22, r16
    1b1e:	88 e4       	ldi	r24, 0x48	; 72
    1b20:	91 e0       	ldi	r25, 0x01	; 1
    1b22:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1b26:	5e df       	rcall	.-324    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b28:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	1f 91       	pop	r17
    1b32:	0f 91       	pop	r16
    1b34:	08 95       	ret

00001b36 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	8c e7       	ldi	r24, 0x7C	; 124
    1b40:	96 e1       	ldi	r25, 0x16	; 22
    1b42:	dc dc       	rcall	.-1608   	; 0x14fc <crc16_ram>
    1b44:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b46:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1b4a:	65 e5       	ldi	r22, 0x55	; 85
    1b4c:	8a e4       	ldi	r24, 0x4A	; 74
    1b4e:	91 e0       	ldi	r25, 0x01	; 1
    1b50:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1b54:	60 91 7c 16 	lds	r22, 0x167C	; 0x80167c <serUSB_Active>
    1b58:	8b e4       	ldi	r24, 0x4B	; 75
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1b60:	be 01       	movw	r22, r28
    1b62:	8c e4       	ldi	r24, 0x4C	; 76
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1b6a:	3c df       	rcall	.-392    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1b6c:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	08 95       	ret

00001b76 <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1b76:	cf 93       	push	r28
    1b78:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	8c e4       	ldi	r24, 0x4C	; 76
    1b80:	98 e0       	ldi	r25, 0x08	; 8
    1b82:	bc dc       	rcall	.-1672   	; 0x14fc <crc16_ram>
    1b84:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1b86:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1b8a:	64 e5       	ldi	r22, 0x54	; 84
    1b8c:	84 ef       	ldi	r24, 0xF4	; 244
    1b8e:	93 e0       	ldi	r25, 0x03	; 3
    1b90:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1b94:	42 e0       	ldi	r20, 0x02	; 2
    1b96:	50 e0       	ldi	r21, 0x00	; 0
    1b98:	65 ef       	ldi	r22, 0xF5	; 245
    1b9a:	73 e0       	ldi	r23, 0x03	; 3
    1b9c:	8c e4       	ldi	r24, 0x4C	; 76
    1b9e:	98 e0       	ldi	r25, 0x08	; 8
    1ba0:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1ba4:	be 01       	movw	r22, r28
    1ba6:	87 ef       	ldi	r24, 0xF7	; 247
    1ba8:	93 e0       	ldi	r25, 0x03	; 3
    1baa:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1bae:	1a df       	rcall	.-460    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1bb0:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	08 95       	ret

00001bba <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1bbe:	61 e0       	ldi	r22, 0x01	; 1
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	86 e3       	ldi	r24, 0x36	; 54
    1bc4:	98 e0       	ldi	r25, 0x08	; 8
    1bc6:	9a dc       	rcall	.-1740   	; 0x14fc <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1bc8:	ac 01       	movw	r20, r24
    1bca:	68 e1       	ldi	r22, 0x18	; 24
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	8d e1       	ldi	r24, 0x1D	; 29
    1bd0:	98 e0       	ldi	r25, 0x08	; 8
    1bd2:	f1 dc       	rcall	.-1566   	; 0x15b6 <crc16_ram_startVal>
    1bd4:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1bd6:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1bda:	62 e5       	ldi	r22, 0x52	; 82
    1bdc:	8e e4       	ldi	r24, 0x4E	; 78
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1be4:	60 91 36 08 	lds	r22, 0x0836	; 0x800836 <registerCount>
    1be8:	8f e4       	ldi	r24, 0x4F	; 79
    1bea:	91 e0       	ldi	r25, 0x01	; 1
    1bec:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1bf0:	48 e1       	ldi	r20, 0x18	; 24
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	60 e5       	ldi	r22, 0x50	; 80
    1bf6:	71 e0       	ldi	r23, 0x01	; 1
    1bf8:	8d e1       	ldi	r24, 0x1D	; 29
    1bfa:	98 e0       	ldi	r25, 0x08	; 8
    1bfc:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1c00:	be 01       	movw	r22, r28
    1c02:	88 e6       	ldi	r24, 0x68	; 104
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1c0a:	ec de       	rcall	.-552    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c0c:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	08 95       	ret

00001c16 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1c1a:	60 e8       	ldi	r22, 0x80	; 128
    1c1c:	72 e0       	ldi	r23, 0x02	; 2
    1c1e:	8e e8       	ldi	r24, 0x8E	; 142
    1c20:	99 e0       	ldi	r25, 0x09	; 9
    1c22:	6c dc       	rcall	.-1832   	; 0x14fc <crc16_ram>
    1c24:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1c26:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1c2a:	60 e5       	ldi	r22, 0x50	; 80
    1c2c:	8a e6       	ldi	r24, 0x6A	; 106
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	52 e0       	ldi	r21, 0x02	; 2
    1c38:	6b e6       	ldi	r22, 0x6B	; 107
    1c3a:	71 e0       	ldi	r23, 0x01	; 1
    1c3c:	8e e8       	ldi	r24, 0x8E	; 142
    1c3e:	99 e0       	ldi	r25, 0x09	; 9
    1c40:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1c44:	be 01       	movw	r22, r28
    1c46:	8b ee       	ldi	r24, 0xEB	; 235
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1c4e:	ca de       	rcall	.-620    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c50:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	08 95       	ret

00001c5a <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1c5e:	64 e0       	ldi	r22, 0x04	; 4
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	89 ed       	ldi	r24, 0xD9	; 217
    1c64:	95 e0       	ldi	r25, 0x05	; 5
    1c66:	4a dc       	rcall	.-1900   	; 0x14fc <crc16_ram>
    1c68:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1c6a:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1c6e:	6b e4       	ldi	r22, 0x4B	; 75
    1c70:	8d ee       	ldi	r24, 0xED	; 237
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1c78:	44 e0       	ldi	r20, 0x04	; 4
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	6e ee       	ldi	r22, 0xEE	; 238
    1c7e:	73 e0       	ldi	r23, 0x03	; 3
    1c80:	89 ed       	ldi	r24, 0xD9	; 217
    1c82:	95 e0       	ldi	r25, 0x05	; 5
    1c84:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1c88:	be 01       	movw	r22, r28
    1c8a:	82 ef       	ldi	r24, 0xF2	; 242
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1c92:	a8 de       	rcall	.-688    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1c94:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1c98:	df 91       	pop	r29
    1c9a:	cf 91       	pop	r28
    1c9c:	08 95       	ret

00001c9e <eeprom_UpdateRegOut>:

void eeprom_UpdateRegOut(){
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) reg_Out, sizeof(reg_Out));
    1ca2:	60 e2       	ldi	r22, 0x20	; 32
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	92 e0       	ldi	r25, 0x02	; 2
    1caa:	28 dc       	rcall	.-1968   	; 0x14fc <crc16_ram>
    1cac:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1cae:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charRegOut), EE_CHAR_REGOUT);
    1cb2:	62 e7       	ldi	r22, 0x72	; 114
    1cb4:	89 ef       	ldi	r24, 0xF9	; 249
    1cb6:	93 e0       	ldi	r25, 0x03	; 3
    1cb8:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) reg_Out, (uint8_t*) &ee.eeData.ee.reg_Out, sizeof(reg_Out));
    1cbc:	40 e2       	ldi	r20, 0x20	; 32
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	6a ef       	ldi	r22, 0xFA	; 250
    1cc2:	73 e0       	ldi	r23, 0x03	; 3
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	92 e0       	ldi	r25, 0x02	; 2
    1cc8:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.regOut_crc), crc);
    1ccc:	be 01       	movw	r22, r28
    1cce:	8a e1       	ldi	r24, 0x1A	; 26
    1cd0:	94 e0       	ldi	r25, 0x04	; 4
    1cd2:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1cd6:	86 de       	rcall	.-756    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1cd8:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	08 95       	ret

00001ce2 <eeprom_UpdateCCreg>:

void eeprom_UpdateCCreg(){
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midi_ccReg, sizeof(midi_ccReg));
    1ce6:	64 e0       	ldi	r22, 0x04	; 4
    1ce8:	70 e0       	ldi	r23, 0x00	; 0
    1cea:	8a e5       	ldi	r24, 0x5A	; 90
    1cec:	99 e0       	ldi	r25, 0x09	; 9
    1cee:	06 dc       	rcall	.-2036   	; 0x14fc <crc16_ram>
    1cf0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1cf2:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiCCreg), EE_CHAR_CC);
    1cf6:	63 e4       	ldi	r22, 0x43	; 67
    1cf8:	8c e1       	ldi	r24, 0x1C	; 28
    1cfa:	94 e0       	ldi	r25, 0x04	; 4
    1cfc:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midi_ccReg, (uint8_t*) &ee.eeData.ee.midi_CCreg, sizeof(midi_ccReg));
    1d00:	44 e0       	ldi	r20, 0x04	; 4
    1d02:	50 e0       	ldi	r21, 0x00	; 0
    1d04:	6d e1       	ldi	r22, 0x1D	; 29
    1d06:	74 e0       	ldi	r23, 0x04	; 4
    1d08:	8a e5       	ldi	r24, 0x5A	; 90
    1d0a:	99 e0       	ldi	r25, 0x09	; 9
    1d0c:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiCCreg_crc), crc);
    1d10:	be 01       	movw	r22, r28
    1d12:	81 e2       	ldi	r24, 0x21	; 33
    1d14:	94 e0       	ldi	r25, 0x04	; 4
    1d16:	0e 94 04 40 	call	0x8008	; 0x8008 <eeprom_update_word>
	eepromWriteSignature();
    1d1a:	64 de       	rcall	.-824    	; 0x19e4 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1d1c:	0e 94 fe 3e 	call	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
}
    1d20:	df 91       	pop	r29
    1d22:	cf 91       	pop	r28
    1d24:	08 95       	ret

00001d26 <eeprom_UpdateALL>:


void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1d26:	69 de       	rcall	.-814    	; 0x19fa <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1d28:	8a de       	rcall	.-748    	; 0x1a3e <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1d2a:	ab de       	rcall	.-682    	; 0x1a82 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1d2c:	da de       	rcall	.-588    	; 0x1ae2 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1d2e:	03 df       	rcall	.-506    	; 0x1b36 <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1d30:	44 df       	rcall	.-376    	; 0x1bba <eeprom_UpdateReg>
	eeprom_UpdateProg();
    1d32:	71 df       	rcall	.-286    	; 0x1c16 <eeprom_UpdateProg>
    1d34:	92 df       	rcall	.-220    	; 0x1c5a <eeprom_UpdateSoftkeys>
	eeprom_UpdateSoftkeys();
    1d36:	1f df       	rcall	.-450    	; 0x1b76 <eeprom_UpdateMidiThrough>
    1d38:	b2 df       	rcall	.-156    	; 0x1c9e <eeprom_UpdateRegOut>
	eeprom_UpdateMidiThrough();
    1d3a:	d3 cf       	rjmp	.-90     	; 0x1ce2 <eeprom_UpdateCCreg>
    1d3c:	08 95       	ret

00001d3e <eepromCopy>:
	eeprom_UpdateRegOut();
    1d3e:	cf 92       	push	r12
    1d40:	df 92       	push	r13
	eeprom_UpdateCCreg();
    1d42:	ef 92       	push	r14
    1d44:	ff 92       	push	r15
    1d46:	0f 93       	push	r16
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1d48:	1f 93       	push	r17
    1d4a:	cf 93       	push	r28
    1d4c:	df 93       	push	r29
    1d4e:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1d50:	11 c0       	rjmp	.+34     	; 0x1d74 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1d52:	7c 01       	movw	r14, r24
    1d54:	2f ef       	ldi	r18, 0xFF	; 255
    1d56:	e2 1a       	sub	r14, r18
    1d58:	f2 0a       	sbc	r15, r18
    1d5a:	0e 94 d6 3f 	call	0x7fac	; 0x7fac <eeprom_read_byte>
    1d5e:	6e 01       	movw	r12, r28
    1d60:	9f ef       	ldi	r25, 0xFF	; 255
    1d62:	c9 1a       	sub	r12, r25
    1d64:	d9 0a       	sbc	r13, r25
    1d66:	68 2f       	mov	r22, r24
    1d68:	ce 01       	movw	r24, r28
    1d6a:	0e 94 f2 3f 	call	0x7fe4	; 0x7fe4 <eeprom_update_byte>
	eeprom_UpdateCCreg();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1d6e:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1d70:	e6 01       	movw	r28, r12
    1d72:	c7 01       	movw	r24, r14
	eeprom_UpdateCCreg();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1d74:	8a 01       	movw	r16, r20
    1d76:	01 50       	subi	r16, 0x01	; 1
    1d78:	11 09       	sbc	r17, r1
    1d7a:	45 2b       	or	r20, r21
    1d7c:	51 f7       	brne	.-44     	; 0x1d52 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1d7e:	df 91       	pop	r29
    1d80:	cf 91       	pop	r28
    1d82:	1f 91       	pop	r17
    1d84:	0f 91       	pop	r16
    1d86:	ff 90       	pop	r15
    1d88:	ef 90       	pop	r14
    1d8a:	df 90       	pop	r13
    1d8c:	cf 90       	pop	r12
    1d8e:	08 95       	ret

00001d90 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1d90:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	58 e0       	ldi	r21, 0x08	; 8
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	78 e0       	ldi	r23, 0x08	; 8
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	ce df       	rcall	.-100    	; 0x1d3e <eepromCopy>
	lcd_waitSymbolOff();
    1da2:	0c 94 fe 3e 	jmp	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
    1da6:	08 95       	ret

00001da8 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1da8:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1dac:	40 e0       	ldi	r20, 0x00	; 0
    1dae:	58 e0       	ldi	r21, 0x08	; 8
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	98 e0       	ldi	r25, 0x08	; 8
    1db8:	c2 df       	rcall	.-124    	; 0x1d3e <eepromCopy>
	lcd_waitSymbolOff();
    1dba:	0c 94 fe 3e 	jmp	0x7dfc	; 0x7dfc <lcd_waitSymbolOff>
    1dbe:	08 95       	ret

00001dc0 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	0a c0       	rjmp	.+20     	; 0x1dd8 <init_Timers+0x18>
    1dc4:	e8 2f       	mov	r30, r24
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	ee 0f       	add	r30, r30
    1dca:	ff 1f       	adc	r31, r31
    1dcc:	e0 5b       	subi	r30, 0xB0	; 176
    1dce:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd0:	9f ef       	ldi	r25, 0xFF	; 255
    1dd2:	90 83       	st	Z, r25
    1dd4:	11 82       	std	Z+1, r1	; 0x01
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	8a 30       	cpi	r24, 0x0A	; 10
    1dda:	a0 f3       	brcs	.-24     	; 0x1dc4 <init_Timers+0x4>
    1ddc:	e4 e6       	ldi	r30, 0x64	; 100
    1dde:	f2 e0       	ldi	r31, 0x02	; 2
    1de0:	10 82       	st	Z, r1
    1de2:	11 82       	std	Z+1, r1	; 0x01
    1de4:	12 82       	std	Z+2, r1	; 0x02
    1de6:	13 82       	std	Z+3, r1	; 0x03
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_UpTimeUpdated>
    1dee:	08 95       	ret

00001df0 <init_HwTimer>:
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	84 bd       	out	0x24, r24	; 36
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	95 bd       	out	0x25, r25	; 37
    1df8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1dfc:	89 ef       	ldi	r24, 0xF9	; 249
    1dfe:	87 bd       	out	0x27, r24	; 39
    1e00:	85 b1       	in	r24, 0x05	; 5
    1e02:	8f 77       	andi	r24, 0x7F	; 127
    1e04:	85 b9       	out	0x05, r24	; 5
    1e06:	84 b1       	in	r24, 0x04	; 4
    1e08:	80 68       	ori	r24, 0x80	; 128
    1e0a:	84 b9       	out	0x04, r24	; 4
    1e0c:	08 95       	ret

00001e0e <init_ADC>:
    1e0e:	87 e8       	ldi	r24, 0x87	; 135
    1e10:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1e14:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1e18:	8f e7       	ldi	r24, 0x7F	; 127
    1e1a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1e24:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1e28:	ec e6       	ldi	r30, 0x6C	; 108
    1e2a:	f3 e0       	ldi	r31, 0x03	; 3
    1e2c:	10 82       	st	Z, r1
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	81 83       	std	Z+1, r24	; 0x01
    1e32:	82 83       	std	Z+2, r24	; 0x02
    1e34:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	10 c0       	rjmp	.+32     	; 0x1e5c <init_ADC+0x4e>
    1e3c:	85 30       	cpi	r24, 0x05	; 5
    1e3e:	39 f4       	brne	.+14     	; 0x1e4e <init_ADC+0x40>
    1e40:	e8 2f       	mov	r30, r24
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	ee 58       	subi	r30, 0x8E	; 142
    1e46:	fc 4f       	sbci	r31, 0xFC	; 252
    1e48:	96 e0       	ldi	r25, 0x06	; 6
    1e4a:	90 83       	st	Z, r25
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <init_ADC+0x4c>
    1e4e:	e8 2f       	mov	r30, r24
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	ee 58       	subi	r30, 0x8E	; 142
    1e54:	fc 4f       	sbci	r31, 0xFC	; 252
    1e56:	9a e0       	ldi	r25, 0x0A	; 10
    1e58:	90 83       	st	Z, r25
    1e5a:	8f 5f       	subi	r24, 0xFF	; 255
    1e5c:	86 30       	cpi	r24, 0x06	; 6
    1e5e:	70 f3       	brcs	.-36     	; 0x1e3c <init_ADC+0x2e>
    1e60:	08 95       	ret

00001e62 <init_Pipe>:
    1e62:	8f ef       	ldi	r24, 0xFF	; 255
    1e64:	88 b9       	out	0x08, r24	; 8
    1e66:	87 b9       	out	0x07, r24	; 7
    1e68:	82 b9       	out	0x02, r24	; 2
    1e6a:	11 b8       	out	0x01, r1	; 1
    1e6c:	84 b3       	in	r24, 0x14	; 20
    1e6e:	87 60       	ori	r24, 0x07	; 7
    1e70:	84 bb       	out	0x14, r24	; 20
    1e72:	83 b3       	in	r24, 0x13	; 19
    1e74:	87 60       	ori	r24, 0x07	; 7
    1e76:	83 bb       	out	0x13, r24	; 19
    1e78:	8b b1       	in	r24, 0x0b	; 11
    1e7a:	8f 77       	andi	r24, 0x7F	; 127
    1e7c:	8b b9       	out	0x0b, r24	; 11
    1e7e:	8a b1       	in	r24, 0x0a	; 10
    1e80:	80 68       	ori	r24, 0x80	; 128
    1e82:	8a b9       	out	0x0a, r24	; 10
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	0e c0       	rjmp	.+28     	; 0x1ea4 <init_Pipe+0x42>
    1e88:	e8 2f       	mov	r30, r24
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	ee 0f       	add	r30, r30
    1e8e:	ff 1f       	adc	r31, r31
    1e90:	ee 0f       	add	r30, r30
    1e92:	ff 1f       	adc	r31, r31
    1e94:	ee 0f       	add	r30, r30
    1e96:	ff 1f       	adc	r31, r31
    1e98:	e4 59       	subi	r30, 0x94	; 148
    1e9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e9c:	9f ef       	ldi	r25, 0xFF	; 255
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	90 83       	st	Z, r25
    1ea2:	8f 5f       	subi	r24, 0xFF	; 255
    1ea4:	80 32       	cpi	r24, 0x20	; 32
    1ea6:	80 f3       	brcs	.-32     	; 0x1e88 <init_Pipe+0x26>
    1ea8:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
    1eac:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pipe_PowerStatus>
    1eb0:	08 95       	ret

00001eb2 <init_PipeModules>:
    1eb2:	5c dc       	rcall	.-1864   	; 0x176c <eeprom_ReadModules>
    1eb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb6:	59 f4       	brne	.+22     	; 0x1ece <init_PipeModules+0x1c>
    1eb8:	40 e0       	ldi	r20, 0x00	; 0
    1eba:	50 e0       	ldi	r21, 0x00	; 0
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
    1ec4:	e8 e7       	ldi	r30, 0x78	; 120
    1ec6:	f3 e0       	ldi	r31, 0x03	; 3
    1ec8:	8f ef       	ldi	r24, 0xFF	; 255
    1eca:	80 83       	st	Z, r24
    1ecc:	81 83       	std	Z+1, r24	; 0x01
    1ece:	8b b1       	in	r24, 0x0b	; 11
    1ed0:	8f 77       	andi	r24, 0x7F	; 127
    1ed2:	8b b9       	out	0x0b, r24	; 11
    1ed4:	84 b3       	in	r24, 0x14	; 20
    1ed6:	87 60       	ori	r24, 0x07	; 7
    1ed8:	84 bb       	out	0x14, r24	; 20
    1eda:	84 b3       	in	r24, 0x14	; 20
    1edc:	8b 7f       	andi	r24, 0xFB	; 251
    1ede:	84 bb       	out	0x14, r24	; 20
    1ee0:	85 e0       	ldi	r24, 0x05	; 5
    1ee2:	8a 95       	dec	r24
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <init_PipeModules+0x30>
    1ee6:	00 00       	nop
    1ee8:	84 b3       	in	r24, 0x14	; 20
    1eea:	84 60       	ori	r24, 0x04	; 4
    1eec:	84 bb       	out	0x14, r24	; 20
    1eee:	90 e2       	ldi	r25, 0x20	; 32
    1ef0:	84 b3       	in	r24, 0x14	; 20
    1ef2:	81 60       	ori	r24, 0x01	; 1
    1ef4:	84 bb       	out	0x14, r24	; 20
    1ef6:	90 fd       	sbrc	r25, 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <init_PipeModules+0x4c>
    1efa:	85 e5       	ldi	r24, 0x55	; 85
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <init_PipeModules+0x4e>
    1efe:	8a ea       	ldi	r24, 0xAA	; 170
    1f00:	88 b9       	out	0x08, r24	; 8
    1f02:	80 b1       	in	r24, 0x00	; 0
    1f04:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <pipe+0xff>
    1f08:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <pipe+0xfe>
    1f0c:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <pipe+0xfd>
    1f10:	80 93 68 03 	sts	0x0368, r24	; 0x800368 <pipe+0xfc>
    1f14:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <pipe+0xfb>
    1f18:	80 93 66 03 	sts	0x0366, r24	; 0x800366 <pipe+0xfa>
    1f1c:	84 b3       	in	r24, 0x14	; 20
    1f1e:	8e 7f       	andi	r24, 0xFE	; 254
    1f20:	84 bb       	out	0x14, r24	; 20
    1f22:	85 e0       	ldi	r24, 0x05	; 5
    1f24:	8a 95       	dec	r24
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <init_PipeModules+0x72>
    1f28:	00 00       	nop
    1f2a:	91 50       	subi	r25, 0x01	; 1
    1f2c:	09 f7       	brne	.-62     	; 0x1ef0 <init_PipeModules+0x3e>
    1f2e:	90 e2       	ldi	r25, 0x20	; 32
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <init_PipeModules+0x9e>
    1f32:	84 b3       	in	r24, 0x14	; 20
    1f34:	81 60       	ori	r24, 0x01	; 1
    1f36:	84 bb       	out	0x14, r24	; 20
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	8a 95       	dec	r24
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <init_PipeModules+0x88>
    1f3e:	00 c0       	rjmp	.+0      	; 0x1f40 <init_PipeModules+0x8e>
    1f40:	84 b3       	in	r24, 0x14	; 20
    1f42:	8e 7f       	andi	r24, 0xFE	; 254
    1f44:	84 bb       	out	0x14, r24	; 20
    1f46:	82 e0       	ldi	r24, 0x02	; 2
    1f48:	8a 95       	dec	r24
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <init_PipeModules+0x96>
    1f4c:	00 c0       	rjmp	.+0      	; 0x1f4e <init_PipeModules+0x9c>
    1f4e:	91 50       	subi	r25, 0x01	; 1
    1f50:	91 11       	cpse	r25, r1
    1f52:	ef cf       	rjmp	.-34     	; 0x1f32 <init_PipeModules+0x80>
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipe_ModuleTested>
    1f5a:	90 e2       	ldi	r25, 0x20	; 32
    1f5c:	84 b3       	in	r24, 0x14	; 20
    1f5e:	81 60       	ori	r24, 0x01	; 1
    1f60:	84 bb       	out	0x14, r24	; 20
    1f62:	8f ef       	ldi	r24, 0xFF	; 255
    1f64:	88 b9       	out	0x08, r24	; 8
    1f66:	20 b1       	in	r18, 0x00	; 0
    1f68:	90 fd       	sbrc	r25, 0
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <init_PipeModules+0xbe>
    1f6c:	8a ea       	ldi	r24, 0xAA	; 170
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <init_PipeModules+0xc0>
    1f70:	85 e5       	ldi	r24, 0x55	; 85
    1f72:	82 27       	eor	r24, r18
    1f74:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <pipe_ModuleTested>
    1f78:	82 23       	and	r24, r18
    1f7a:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <pipe_ModuleTested>
    1f7e:	84 b3       	in	r24, 0x14	; 20
    1f80:	8e 7f       	andi	r24, 0xFE	; 254
    1f82:	84 bb       	out	0x14, r24	; 20
    1f84:	85 e0       	ldi	r24, 0x05	; 5
    1f86:	8a 95       	dec	r24
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <init_PipeModules+0xd4>
    1f8a:	00 00       	nop
    1f8c:	91 50       	subi	r25, 0x01	; 1
    1f8e:	31 f7       	brne	.-52     	; 0x1f5c <init_PipeModules+0xaa>
    1f90:	00 00       	nop
    1f92:	00 00       	nop
    1f94:	84 b3       	in	r24, 0x14	; 20
    1f96:	81 60       	ori	r24, 0x01	; 1
    1f98:	84 bb       	out	0x14, r24	; 20
    1f9a:	84 b3       	in	r24, 0x14	; 20
    1f9c:	87 60       	ori	r24, 0x07	; 7
    1f9e:	84 bb       	out	0x14, r24	; 20
    1fa0:	84 b3       	in	r24, 0x14	; 20
    1fa2:	8b 7f       	andi	r24, 0xFB	; 251
    1fa4:	84 bb       	out	0x14, r24	; 20
    1fa6:	82 e0       	ldi	r24, 0x02	; 2
    1fa8:	8a 95       	dec	r24
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <init_PipeModules+0xf6>
    1fac:	00 c0       	rjmp	.+0      	; 0x1fae <init_PipeModules+0xfc>
    1fae:	84 b3       	in	r24, 0x14	; 20
    1fb0:	84 60       	ori	r24, 0x04	; 4
    1fb2:	84 bb       	out	0x14, r24	; 20
    1fb4:	90 e2       	ldi	r25, 0x20	; 32
    1fb6:	e4 e6       	ldi	r30, 0x64	; 100
    1fb8:	f3 e0       	ldi	r31, 0x03	; 3
    1fba:	83 81       	ldd	r24, Z+3	; 0x03
    1fbc:	82 83       	std	Z+2, r24	; 0x02
    1fbe:	84 81       	ldd	r24, Z+4	; 0x04
    1fc0:	83 83       	std	Z+3, r24	; 0x03
    1fc2:	84 b3       	in	r24, 0x14	; 20
    1fc4:	81 60       	ori	r24, 0x01	; 1
    1fc6:	84 bb       	out	0x14, r24	; 20
    1fc8:	8f ef       	ldi	r24, 0xFF	; 255
    1fca:	81 83       	std	Z+1, r24	; 0x01
    1fcc:	88 b9       	out	0x08, r24	; 8
    1fce:	85 81       	ldd	r24, Z+5	; 0x05
    1fd0:	84 83       	std	Z+4, r24	; 0x04
    1fd2:	86 81       	ldd	r24, Z+6	; 0x06
    1fd4:	85 83       	std	Z+5, r24	; 0x05
    1fd6:	80 b1       	in	r24, 0x00	; 0
    1fd8:	86 83       	std	Z+6, r24	; 0x06
    1fda:	82 83       	std	Z+2, r24	; 0x02
    1fdc:	83 83       	std	Z+3, r24	; 0x03
    1fde:	84 83       	std	Z+4, r24	; 0x04
    1fe0:	85 83       	std	Z+5, r24	; 0x05
    1fe2:	87 83       	std	Z+7, r24	; 0x07
    1fe4:	84 b3       	in	r24, 0x14	; 20
    1fe6:	8e 7f       	andi	r24, 0xFE	; 254
    1fe8:	84 bb       	out	0x14, r24	; 20
    1fea:	38 97       	sbiw	r30, 0x08	; 8
    1fec:	91 50       	subi	r25, 0x01	; 1
    1fee:	29 f7       	brne	.-54     	; 0x1fba <init_PipeModules+0x108>
    1ff0:	00 00       	nop
    1ff2:	00 00       	nop
    1ff4:	84 b3       	in	r24, 0x14	; 20
    1ff6:	81 60       	ori	r24, 0x01	; 1
    1ff8:	84 bb       	out	0x14, r24	; 20
    1ffa:	84 b3       	in	r24, 0x14	; 20
    1ffc:	8d 7f       	andi	r24, 0xFD	; 253
    1ffe:	84 bb       	out	0x14, r24	; 20
    2000:	18 b8       	out	0x08, r1	; 8
    2002:	85 e0       	ldi	r24, 0x05	; 5
    2004:	8a 95       	dec	r24
    2006:	f1 f7       	brne	.-4      	; 0x2004 <init_PipeModules+0x152>
    2008:	00 00       	nop
    200a:	84 b3       	in	r24, 0x14	; 20
    200c:	82 60       	ori	r24, 0x02	; 2
    200e:	84 bb       	out	0x14, r24	; 20
    2010:	e8 e7       	ldi	r30, 0x78	; 120
    2012:	f3 e0       	ldi	r31, 0x03	; 3
    2014:	81 81       	ldd	r24, Z+1	; 0x01
    2016:	40 81       	ld	r20, Z
    2018:	84 2b       	or	r24, r20
    201a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <pipe_ModuleTested>
    201e:	89 17       	cp	r24, r25
    2020:	39 f0       	breq	.+14     	; 0x2030 <init_PipeModules+0x17e>
    2022:	50 e0       	ldi	r21, 0x00	; 0
    2024:	54 2f       	mov	r21, r20
    2026:	44 27       	eor	r20, r20
    2028:	49 2b       	or	r20, r25
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	a8 c7       	rjmp	.+3920   	; 0x2f80 <log_putError>
    2030:	08 95       	ret

00002032 <test_PipeModule>:
    2032:	88 30       	cpi	r24, 0x08	; 8
    2034:	08 f0       	brcs	.+2      	; 0x2038 <test_PipeModule+0x6>
    2036:	6a c0       	rjmp	.+212    	; 0x210c <test_PipeModule+0xda>
    2038:	31 e0       	ldi	r19, 0x01	; 1
    203a:	01 c0       	rjmp	.+2      	; 0x203e <test_PipeModule+0xc>
    203c:	33 0f       	add	r19, r19
    203e:	8a 95       	dec	r24
    2040:	ea f7       	brpl	.-6      	; 0x203c <test_PipeModule+0xa>
    2042:	80 e8       	ldi	r24, 0x80	; 128
    2044:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
    2048:	8b b1       	in	r24, 0x0b	; 11
    204a:	8f 77       	andi	r24, 0x7F	; 127
    204c:	8b b9       	out	0x0b, r24	; 11
    204e:	84 b3       	in	r24, 0x14	; 20
    2050:	87 60       	ori	r24, 0x07	; 7
    2052:	84 bb       	out	0x14, r24	; 20
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	1d c0       	rjmp	.+58     	; 0x2092 <test_PipeModule+0x60>
    2058:	20 fd       	sbrc	r18, 0
    205a:	03 c0       	rjmp	.+6      	; 0x2062 <test_PipeModule+0x30>
    205c:	83 2f       	mov	r24, r19
    205e:	80 95       	com	r24
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <test_PipeModule+0x32>
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	88 b9       	out	0x08, r24	; 8
    2066:	26 95       	lsr	r18
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	8a 95       	dec	r24
    206c:	f1 f7       	brne	.-4      	; 0x206a <test_PipeModule+0x38>
    206e:	00 c0       	rjmp	.+0      	; 0x2070 <test_PipeModule+0x3e>
    2070:	84 b3       	in	r24, 0x14	; 20
    2072:	8e 7f       	andi	r24, 0xFE	; 254
    2074:	84 bb       	out	0x14, r24	; 20
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	8a 95       	dec	r24
    207a:	f1 f7       	brne	.-4      	; 0x2078 <test_PipeModule+0x46>
    207c:	00 c0       	rjmp	.+0      	; 0x207e <test_PipeModule+0x4c>
    207e:	84 b3       	in	r24, 0x14	; 20
    2080:	81 60       	ori	r24, 0x01	; 1
    2082:	84 bb       	out	0x14, r24	; 20
    2084:	9f 5f       	subi	r25, 0xFF	; 255
    2086:	02 c0       	rjmp	.+4      	; 0x208c <test_PipeModule+0x5a>
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	25 ea       	ldi	r18, 0xA5	; 165
    208c:	98 30       	cpi	r25, 0x08	; 8
    208e:	20 f3       	brcs	.-56     	; 0x2058 <test_PipeModule+0x26>
    2090:	4f 5f       	subi	r20, 0xFF	; 255
    2092:	44 30       	cpi	r20, 0x04	; 4
    2094:	c8 f3       	brcs	.-14     	; 0x2088 <test_PipeModule+0x56>
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <test_PipeModule+0x86>
    209a:	82 e0       	ldi	r24, 0x02	; 2
    209c:	8a 95       	dec	r24
    209e:	f1 f7       	brne	.-4      	; 0x209c <test_PipeModule+0x6a>
    20a0:	00 c0       	rjmp	.+0      	; 0x20a2 <test_PipeModule+0x70>
    20a2:	84 b3       	in	r24, 0x14	; 20
    20a4:	8e 7f       	andi	r24, 0xFE	; 254
    20a6:	84 bb       	out	0x14, r24	; 20
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	8a 95       	dec	r24
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <test_PipeModule+0x78>
    20ae:	00 c0       	rjmp	.+0      	; 0x20b0 <test_PipeModule+0x7e>
    20b0:	84 b3       	in	r24, 0x14	; 20
    20b2:	81 60       	ori	r24, 0x01	; 1
    20b4:	84 bb       	out	0x14, r24	; 20
    20b6:	9f 5f       	subi	r25, 0xFF	; 255
    20b8:	90 32       	cpi	r25, 0x20	; 32
    20ba:	78 f3       	brcs	.-34     	; 0x209a <test_PipeModule+0x68>
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	ba 01       	movw	r22, r20
    20c4:	17 c0       	rjmp	.+46     	; 0x20f4 <test_PipeModule+0xc2>
    20c6:	44 0f       	add	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	66 1f       	adc	r22, r22
    20cc:	77 1f       	adc	r23, r23
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	8a 95       	dec	r24
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <test_PipeModule+0x9e>
    20d4:	00 c0       	rjmp	.+0      	; 0x20d6 <test_PipeModule+0xa4>
    20d6:	84 b3       	in	r24, 0x14	; 20
    20d8:	8e 7f       	andi	r24, 0xFE	; 254
    20da:	84 bb       	out	0x14, r24	; 20
    20dc:	80 b1       	in	r24, 0x00	; 0
    20de:	83 23       	and	r24, r19
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <test_PipeModule+0xb2>
    20e2:	41 60       	ori	r20, 0x01	; 1
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	8a 95       	dec	r24
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <test_PipeModule+0xb4>
    20ea:	00 c0       	rjmp	.+0      	; 0x20ec <test_PipeModule+0xba>
    20ec:	84 b3       	in	r24, 0x14	; 20
    20ee:	81 60       	ori	r24, 0x01	; 1
    20f0:	84 bb       	out	0x14, r24	; 20
    20f2:	9f 5f       	subi	r25, 0xFF	; 255
    20f4:	90 32       	cpi	r25, 0x20	; 32
    20f6:	38 f3       	brcs	.-50     	; 0x20c6 <test_PipeModule+0x94>
    20f8:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
    20fc:	8b b1       	in	r24, 0x0b	; 11
    20fe:	80 68       	ori	r24, 0x80	; 128
    2100:	8b b9       	out	0x0b, r24	; 11
    2102:	34 2f       	mov	r19, r20
    2104:	25 2f       	mov	r18, r21
    2106:	86 2f       	mov	r24, r22
    2108:	97 2f       	mov	r25, r23
    210a:	04 c0       	rjmp	.+8      	; 0x2114 <test_PipeModule+0xe2>
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	63 2f       	mov	r22, r19
    2116:	72 2f       	mov	r23, r18
    2118:	08 95       	ret

0000211a <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    211a:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    211c:	ec e6       	ldi	r30, 0x6C	; 108
    211e:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    2120:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    2122:	06 c0       	rjmp	.+12     	; 0x2130 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    2124:	2f ef       	ldi	r18, 0xFF	; 255
    2126:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    2128:	26 81       	ldd	r18, Z+6	; 0x06
    212a:	82 2b       	or	r24, r18
		pPipe++;
    212c:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    212e:	9f 5f       	subi	r25, 0xFF	; 255
    2130:	90 32       	cpi	r25, 0x20	; 32
    2132:	c0 f3       	brcs	.-16     	; 0x2124 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    2134:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pipe_Module>
    2138:	89 23       	and	r24, r25
    213a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <pipe_ModuleTested>
}
    213e:	89 23       	and	r24, r25
    2140:	08 95       	ret

00002142 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    2142:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2146:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    214a:	81 ff       	sbrs	r24, 1
    214c:	fc cf       	rjmp	.-8      	; 0x2146 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    214e:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    2152:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2156:	81 ff       	sbrs	r24, 1
    2158:	fc cf       	rjmp	.-8      	; 0x2152 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    215a:	08 95       	ret

0000215c <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    2162:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2164:	f8 94       	cli
    2166:	06 c0       	rjmp	.+12     	; 0x2174 <module_StartPowerOn+0x18>
    2168:	e0 e5       	ldi	r30, 0x50	; 80
    216a:	f2 e0       	ldi	r31, 0x02	; 2
    216c:	88 e2       	ldi	r24, 0x28	; 40
    216e:	82 83       	std	Z+2, r24	; 0x02
    2170:	13 82       	std	Z+3, r1	; 0x03
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	81 11       	cpse	r24, r1
    2176:	f8 cf       	rjmp	.-16     	; 0x2168 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2178:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    217a:	08 95       	ret

0000217c <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    217c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    2180:	81 30       	cpi	r24, 0x01	; 1
    2182:	31 f5       	brne	.+76     	; 0x21d0 <module_PowerControl+0x54>
		// part1: now check inputs
		if (module_TestAllInputs() == 0){
    2184:	ca df       	rcall	.-108    	; 0x211a <module_TestAllInputs>
    2186:	81 11       	cpse	r24, r1
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <module_PowerControl+0x36>
			// all inputs are low, no key is pressed, no register active, start power on and wait a little bit
			POWER_ON
    218a:	85 b1       	in	r24, 0x05	; 5
    218c:	80 64       	ori	r24, 0x40	; 64
    218e:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    2190:	82 e1       	ldi	r24, 0x12	; 18
    2192:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    2196:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2198:	f8 94       	cli
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <module_PowerControl+0x2e>
    219e:	e0 e5       	ldi	r30, 0x50	; 80
    21a0:	f2 e0       	ldi	r31, 0x02	; 2
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	82 83       	std	Z+2, r24	; 0x02
    21a6:	13 82       	std	Z+3, r1	; 0x03
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	81 11       	cpse	r24, r1
    21ac:	f8 cf       	rjmp	.-16     	; 0x219e <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    21ae:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    21b0:	08 95       	ret
		} else {
			// keys are not released: wait some time and then test again
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    21b2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    21b4:	f8 94       	cli
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	07 c0       	rjmp	.+14     	; 0x21c8 <module_PowerControl+0x4c>
    21ba:	e0 e5       	ldi	r30, 0x50	; 80
    21bc:	f2 e0       	ldi	r31, 0x02	; 2
    21be:	8c e0       	ldi	r24, 0x0C	; 12
    21c0:	82 83       	std	Z+2, r24	; 0x02
    21c2:	82 e0       	ldi	r24, 0x02	; 2
    21c4:	83 83       	std	Z+3, r24	; 0x03
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	81 11       	cpse	r24, r1
    21ca:	f7 cf       	rjmp	.-18     	; 0x21ba <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    21cc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    21ce:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    21d0:	82 31       	cpi	r24, 0x12	; 18
		// part2: power is on for some time, test if every input is still inactive
		uint8_t testResult = module_TestAllInputs();
    21d2:	b1 f4       	brne	.+44     	; 0x2200 <__stack+0x1>
    21d4:	a2 df       	rcall	.-188    	; 0x211a <module_TestAllInputs>
		if (testResult == 0){
    21d6:	81 11       	cpse	r24, r1
    21d8:	04 c0       	rjmp	.+8      	; 0x21e2 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    21da:	84 e1       	ldi	r24, 0x14	; 20
    21dc:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
    21e0:	0b c0       	rjmp	.+22     	; 0x21f8 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    21e2:	48 2f       	mov	r20, r24
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	85 e0       	ldi	r24, 0x05	; 5
    21ea:	ca d6       	rcall	.+3476   	; 0x2f80 <log_putError>
			POWER_OFF
    21ec:	85 b1       	in	r24, 0x05	; 5
    21ee:	8f 7b       	andi	r24, 0xBF	; 191
    21f0:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    21f2:	80 e8       	ldi	r24, 0x80	; 128
    21f4:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    21f8:	8f ef       	ldi	r24, 0xFF	; 255
    21fa:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    21fe:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    2200:	8f ef       	ldi	r24, 0xFF	; 255
    2202:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <swTimer+0x2>
    2206:	08 95       	ret

00002208 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	0d c0       	rjmp	.+26     	; 0x2226 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    220c:	94 30       	cpi	r25, 0x04	; 4
    220e:	50 f4       	brcc	.+20     	; 0x2224 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    2210:	e9 2f       	mov	r30, r25
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	81 11       	cpse	r24, r1
    2216:	02 c0       	rjmp	.+4      	; 0x221c <softKey_WantLong+0x14>
    2218:	2a e0       	ldi	r18, 0x0A	; 10
    221a:	01 c0       	rjmp	.+2      	; 0x221e <softKey_WantLong+0x16>
    221c:	26 e0       	ldi	r18, 0x06	; 6
    221e:	ee 58       	subi	r30, 0x8E	; 142
    2220:	fc 4f       	sbci	r31, 0xFC	; 252
    2222:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    2224:	9f 5f       	subi	r25, 0xFF	; 255
    2226:	96 30       	cpi	r25, 0x06	; 6
    2228:	88 f3       	brcs	.-30     	; 0x220c <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    222a:	08 95       	ret

0000222c <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    222c:	1f 92       	push	r1
    222e:	0f 92       	push	r0
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	0f 92       	push	r0
    2234:	11 24       	eor	r1, r1
    2236:	0b b6       	in	r0, 0x3b	; 59
    2238:	0f 92       	push	r0
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	2f 93       	push	r18
    2244:	3f 93       	push	r19
    2246:	4f 93       	push	r20
    2248:	5f 93       	push	r21
    224a:	6f 93       	push	r22
    224c:	7f 93       	push	r23
    224e:	8f 93       	push	r24
    2250:	9f 93       	push	r25
    2252:	af 93       	push	r26
    2254:	bf 93       	push	r27
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	ef 93       	push	r30
    225c:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    225e:	85 b1       	in	r24, 0x05	; 5
    2260:	80 68       	ori	r24, 0x80	; 128
    2262:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    2264:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <msecCtr>
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <msecCtr>
    226e:	83 70       	andi	r24, 0x03	; 3
    2270:	81 30       	cpi	r24, 0x01	; 1
    2272:	09 f4       	brne	.+2      	; 0x2276 <__vector_21+0x4a>
    2274:	58 c1       	rjmp	.+688    	; 0x2526 <__vector_21+0x2fa>
    2276:	38 f0       	brcs	.+14     	; 0x2286 <__vector_21+0x5a>
    2278:	82 30       	cpi	r24, 0x02	; 2
    227a:	09 f4       	brne	.+2      	; 0x227e <__vector_21+0x52>
    227c:	a5 c1       	rjmp	.+842    	; 0x25c8 <__vector_21+0x39c>
    227e:	83 30       	cpi	r24, 0x03	; 3
    2280:	09 f4       	brne	.+2      	; 0x2284 <__vector_21+0x58>
    2282:	ca c1       	rjmp	.+916    	; 0x2618 <__vector_21+0x3ec>
    2284:	05 c2       	rjmp	.+1034   	; 0x2690 <__vector_21+0x464>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    2286:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    228a:	81 11       	cpse	r24, r1
    228c:	1a c1       	rjmp	.+564    	; 0x24c2 <__vector_21+0x296>
    228e:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    2292:	96 fd       	sbrc	r25, 6
    2294:	16 c1       	rjmp	.+556    	; 0x24c2 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    2296:	28 2f       	mov	r18, r24
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	f9 01       	movw	r30, r18
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	e2 0f       	add	r30, r18
    22a2:	f3 1f       	adc	r31, r19
    22a4:	ee 0f       	add	r30, r30
    22a6:	ff 1f       	adc	r31, r31
    22a8:	e4 59       	subi	r30, 0x94	; 148
    22aa:	fc 4f       	sbci	r31, 0xFC	; 252
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    22ae:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    22b2:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    22b4:	49 17       	cp	r20, r25
    22b6:	10 f4       	brcc	.+4      	; 0x22bc <__vector_21+0x90>
		return data1-data2;
    22b8:	94 1b       	sub	r25, r20
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <__vector_21+0x96>
	} else {
		return data2-data1;
    22bc:	54 2f       	mov	r21, r20
    22be:	59 1b       	sub	r21, r25
    22c0:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    22c2:	94 30       	cpi	r25, 0x04	; 4
    22c4:	08 f0       	brcs	.+2      	; 0x22c8 <__vector_21+0x9c>
    22c6:	fd c0       	rjmp	.+506    	; 0x24c2 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    22c8:	81 11       	cpse	r24, r1
    22ca:	0e c0       	rjmp	.+28     	; 0x22e8 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    22cc:	42 32       	cpi	r20, 0x22	; 34
    22ce:	70 f0       	brcs	.+28     	; 0x22ec <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    22d0:	4f 33       	cpi	r20, 0x3F	; 63
    22d2:	70 f0       	brcs	.+28     	; 0x22f0 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    22d4:	48 36       	cpi	r20, 0x68	; 104
    22d6:	70 f0       	brcs	.+28     	; 0x22f4 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    22d8:	46 39       	cpi	r20, 0x96	; 150
    22da:	70 f0       	brcs	.+28     	; 0x22f8 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    22dc:	4f 3b       	cpi	r20, 0xBF	; 191
    22de:	70 f0       	brcs	.+28     	; 0x22fc <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    22e0:	48 3e       	cpi	r20, 0xE8	; 232
    22e2:	70 f4       	brcc	.+28     	; 0x2300 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    22e4:	c6 e0       	ldi	r28, 0x06	; 6
    22e6:	0d c0       	rjmp	.+26     	; 0x2302 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    22e8:	cf ef       	ldi	r28, 0xFF	; 255
    22ea:	0b c0       	rjmp	.+22     	; 0x2302 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    22ec:	c4 e0       	ldi	r28, 0x04	; 4
    22ee:	09 c0       	rjmp	.+18     	; 0x2302 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    22f0:	c3 e0       	ldi	r28, 0x03	; 3
    22f2:	07 c0       	rjmp	.+14     	; 0x2302 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    22f4:	c5 e0       	ldi	r28, 0x05	; 5
    22f6:	05 c0       	rjmp	.+10     	; 0x2302 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    22f8:	c1 e0       	ldi	r28, 0x01	; 1
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    22fc:	c2 e0       	ldi	r28, 0x02	; 2
    22fe:	01 c0       	rjmp	.+2      	; 0x2302 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    2300:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    2302:	f9 01       	movw	r30, r18
    2304:	ee 0f       	add	r30, r30
    2306:	ff 1f       	adc	r31, r31
    2308:	e2 0f       	add	r30, r18
    230a:	f3 1f       	adc	r31, r19
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31
    2310:	e4 59       	subi	r30, 0x94	; 148
    2312:	fc 4f       	sbci	r31, 0xFC	; 252
    2314:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    2316:	dc 17       	cp	r29, r28
    2318:	09 f4       	brne	.+2      	; 0x231c <__vector_21+0xf0>
    231a:	48 c0       	rjmp	.+144    	; 0x23ac <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    231c:	df 3f       	cpi	r29, 0xFF	; 255
    231e:	19 f0       	breq	.+6      	; 0x2326 <__vector_21+0xfa>
    2320:	cf 3f       	cpi	r28, 0xFF	; 255
    2322:	09 f0       	breq	.+2      	; 0x2326 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    2324:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    2326:	f9 01       	movw	r30, r18
    2328:	ee 0f       	add	r30, r30
    232a:	ff 1f       	adc	r31, r31
    232c:	e2 0f       	add	r30, r18
    232e:	f3 1f       	adc	r31, r19
    2330:	ee 0f       	add	r30, r30
    2332:	ff 1f       	adc	r31, r31
    2334:	e4 59       	subi	r30, 0x94	; 148
    2336:	fc 4f       	sbci	r31, 0xFC	; 252
    2338:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    233a:	df 3f       	cpi	r29, 0xFF	; 255
    233c:	f9 f4       	brne	.+62     	; 0x237c <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    233e:	c9 01       	movw	r24, r18
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	fc 01       	movw	r30, r24
    2346:	e2 0f       	add	r30, r18
    2348:	f3 1f       	adc	r31, r19
    234a:	ee 0f       	add	r30, r30
    234c:	ff 1f       	adc	r31, r31
    234e:	e4 59       	subi	r30, 0x94	; 148
    2350:	fc 4f       	sbci	r31, 0xFC	; 252
    2352:	15 82       	std	Z+5, r1	; 0x05
    2354:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    2356:	fc 01       	movw	r30, r24
    2358:	e2 0f       	add	r30, r18
    235a:	f3 1f       	adc	r31, r19
    235c:	ee 0f       	add	r30, r30
    235e:	ff 1f       	adc	r31, r31
    2360:	e4 59       	subi	r30, 0x94	; 148
    2362:	fc 4f       	sbci	r31, 0xFC	; 252
    2364:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    2366:	ec 2f       	mov	r30, r28
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	ef 58       	subi	r30, 0x8F	; 143
    236c:	fc 4f       	sbci	r31, 0xFC	; 252
    236e:	80 81       	ld	r24, Z
    2370:	80 ff       	sbrs	r24, 0
    2372:	a7 c0       	rjmp	.+334    	; 0x24c2 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    2374:	8c 2f       	mov	r24, r28
    2376:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <message_push>
    237a:	a3 c0       	rjmp	.+326    	; 0x24c2 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    237c:	ed 2f       	mov	r30, r29
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	ef 58       	subi	r30, 0x8F	; 143
    2382:	fc 4f       	sbci	r31, 0xFC	; 252
    2384:	80 81       	ld	r24, Z
    2386:	81 ff       	sbrs	r24, 1
    2388:	9c c0       	rjmp	.+312    	; 0x24c2 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    238a:	f9 01       	movw	r30, r18
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	e2 0f       	add	r30, r18
    2392:	f3 1f       	adc	r31, r19
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	e4 59       	subi	r30, 0x94	; 148
    239a:	fc 4f       	sbci	r31, 0xFC	; 252
    239c:	83 81       	ldd	r24, Z+3	; 0x03
    239e:	83 70       	andi	r24, 0x03	; 3
    23a0:	09 f0       	breq	.+2      	; 0x23a4 <__vector_21+0x178>
    23a2:	8f c0       	rjmp	.+286    	; 0x24c2 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    23a4:	8d 2f       	mov	r24, r29
    23a6:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <message_push>
    23aa:	8b c0       	rjmp	.+278    	; 0x24c2 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    23ac:	cf 3f       	cpi	r28, 0xFF	; 255
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <__vector_21+0x186>
    23b0:	88 c0       	rjmp	.+272    	; 0x24c2 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    23b2:	f9 01       	movw	r30, r18
    23b4:	ee 0f       	add	r30, r30
    23b6:	ff 1f       	adc	r31, r31
    23b8:	df 01       	movw	r26, r30
    23ba:	a2 0f       	add	r26, r18
    23bc:	b3 1f       	adc	r27, r19
    23be:	aa 0f       	add	r26, r26
    23c0:	bb 1f       	adc	r27, r27
    23c2:	a4 59       	subi	r26, 0x94	; 148
    23c4:	bc 4f       	sbci	r27, 0xFC	; 252
    23c6:	14 96       	adiw	r26, 0x04	; 4
    23c8:	8d 91       	ld	r24, X+
    23ca:	9c 91       	ld	r25, X
    23cc:	15 97       	sbiw	r26, 0x05	; 5
    23ce:	01 96       	adiw	r24, 0x01	; 1
    23d0:	15 96       	adiw	r26, 0x05	; 5
    23d2:	9c 93       	st	X, r25
    23d4:	8e 93       	st	-X, r24
    23d6:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    23d8:	fd 01       	movw	r30, r26
    23da:	84 81       	ldd	r24, Z+4	; 0x04
    23dc:	95 81       	ldd	r25, Z+5	; 0x05
    23de:	8b 34       	cpi	r24, 0x4B	; 75
    23e0:	91 05       	cpc	r25, r1
    23e2:	a9 f4       	brne	.+42     	; 0x240e <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    23e4:	ed 2f       	mov	r30, r29
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	ef 58       	subi	r30, 0x8F	; 143
    23ea:	fc 4f       	sbci	r31, 0xFC	; 252
    23ec:	80 81       	ld	r24, Z
    23ee:	82 ff       	sbrs	r24, 2
    23f0:	0e c0       	rjmp	.+28     	; 0x240e <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    23f2:	8c 2f       	mov	r24, r28
    23f4:	80 68       	ori	r24, 0x80	; 128
    23f6:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    23fa:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <adcNr>
    23fe:	86 e0       	ldi	r24, 0x06	; 6
    2400:	e8 9f       	mul	r30, r24
    2402:	f0 01       	movw	r30, r0
    2404:	11 24       	eor	r1, r1
    2406:	e4 59       	subi	r30, 0x94	; 148
    2408:	fc 4f       	sbci	r31, 0xFC	; 252
    240a:	82 e0       	ldi	r24, 0x02	; 2
    240c:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    240e:	ed 2f       	mov	r30, r29
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	ef 58       	subi	r30, 0x8F	; 143
    2414:	fc 4f       	sbci	r31, 0xFC	; 252
    2416:	80 81       	ld	r24, Z
    2418:	83 ff       	sbrs	r24, 3
    241a:	53 c0       	rjmp	.+166    	; 0x24c2 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    241c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	fc 01       	movw	r30, r24
    2424:	ee 0f       	add	r30, r30
    2426:	ff 1f       	adc	r31, r31
    2428:	e8 0f       	add	r30, r24
    242a:	f9 1f       	adc	r31, r25
    242c:	ee 0f       	add	r30, r30
    242e:	ff 1f       	adc	r31, r31
    2430:	e4 59       	subi	r30, 0x94	; 148
    2432:	fc 4f       	sbci	r31, 0xFC	; 252
    2434:	23 81       	ldd	r18, Z+3	; 0x03
    2436:	21 11       	cpse	r18, r1
    2438:	1e c0       	rjmp	.+60     	; 0x2476 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    243a:	fc 01       	movw	r30, r24
    243c:	ee 0f       	add	r30, r30
    243e:	ff 1f       	adc	r31, r31
    2440:	e8 0f       	add	r30, r24
    2442:	f9 1f       	adc	r31, r25
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	e4 59       	subi	r30, 0x94	; 148
    244a:	fc 4f       	sbci	r31, 0xFC	; 252
    244c:	24 81       	ldd	r18, Z+4	; 0x04
    244e:	35 81       	ldd	r19, Z+5	; 0x05
    2450:	22 33       	cpi	r18, 0x32	; 50
    2452:	31 05       	cpc	r19, r1
    2454:	b1 f5       	brne	.+108    	; 0x24c2 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2456:	26 e0       	ldi	r18, 0x06	; 6
    2458:	28 9f       	mul	r18, r24
    245a:	f0 01       	movw	r30, r0
    245c:	29 9f       	mul	r18, r25
    245e:	f0 0d       	add	r31, r0
    2460:	11 24       	eor	r1, r1
    2462:	e4 59       	subi	r30, 0x94	; 148
    2464:	fc 4f       	sbci	r31, 0xFC	; 252
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    246a:	15 82       	std	Z+5, r1	; 0x05
    246c:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    246e:	8c 2f       	mov	r24, r28
    2470:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <message_push>
    2474:	26 c0       	rjmp	.+76     	; 0x24c2 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2476:	fc 01       	movw	r30, r24
    2478:	ee 0f       	add	r30, r30
    247a:	ff 1f       	adc	r31, r31
    247c:	e8 0f       	add	r30, r24
    247e:	f9 1f       	adc	r31, r25
    2480:	ee 0f       	add	r30, r30
    2482:	ff 1f       	adc	r31, r31
    2484:	e4 59       	subi	r30, 0x94	; 148
    2486:	fc 4f       	sbci	r31, 0xFC	; 252
    2488:	23 81       	ldd	r18, Z+3	; 0x03
    248a:	21 30       	cpi	r18, 0x01	; 1
    248c:	d1 f4       	brne	.+52     	; 0x24c2 <__vector_21+0x296>
    248e:	26 e0       	ldi	r18, 0x06	; 6
    2490:	28 9f       	mul	r18, r24
    2492:	f0 01       	movw	r30, r0
    2494:	29 9f       	mul	r18, r25
    2496:	f0 0d       	add	r31, r0
    2498:	11 24       	eor	r1, r1
    249a:	e4 59       	subi	r30, 0x94	; 148
    249c:	fc 4f       	sbci	r31, 0xFC	; 252
    249e:	24 81       	ldd	r18, Z+4	; 0x04
    24a0:	35 81       	ldd	r19, Z+5	; 0x05
    24a2:	2c 30       	cpi	r18, 0x0C	; 12
    24a4:	31 05       	cpc	r19, r1
    24a6:	69 f4       	brne	.+26     	; 0x24c2 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    24a8:	26 e0       	ldi	r18, 0x06	; 6
    24aa:	28 9f       	mul	r18, r24
    24ac:	f0 01       	movw	r30, r0
    24ae:	29 9f       	mul	r18, r25
    24b0:	f0 0d       	add	r31, r0
    24b2:	11 24       	eor	r1, r1
    24b4:	e4 59       	subi	r30, 0x94	; 148
    24b6:	fc 4f       	sbci	r31, 0xFC	; 252
    24b8:	15 82       	std	Z+5, r1	; 0x05
    24ba:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    24bc:	8c 2f       	mov	r24, r28
    24be:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    24c2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <adcNr>
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	10 f0       	brcs	.+4      	; 0x24d4 <__vector_21+0x2a8>
		adcNr = 0;
    24d0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    24d4:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <adcNr>
    24d8:	81 11       	cpse	r24, r1
    24da:	0c c0       	rjmp	.+24     	; 0x24f4 <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	fc 01       	movw	r30, r24
    24e0:	ee 0f       	add	r30, r30
    24e2:	ff 1f       	adc	r31, r31
    24e4:	e8 0f       	add	r30, r24
    24e6:	f9 1f       	adc	r31, r25
    24e8:	ee 0f       	add	r30, r30
    24ea:	ff 1f       	adc	r31, r31
    24ec:	e4 59       	subi	r30, 0x94	; 148
    24ee:	fc 4f       	sbci	r31, 0xFC	; 252
    24f0:	80 81       	ld	r24, Z
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    24f4:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    24f6:	98 2f       	mov	r25, r24
    24f8:	9f 71       	andi	r25, 0x1F	; 31
    24fa:	90 66       	ori	r25, 0x60	; 96
    24fc:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2500:	eb e7       	ldi	r30, 0x7B	; 123
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	20 81       	ld	r18, Z
    2506:	80 72       	andi	r24, 0x20	; 32
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	95 95       	asr	r25
    250c:	87 95       	ror	r24
    250e:	95 95       	asr	r25
    2510:	87 95       	ror	r24
    2512:	92 2f       	mov	r25, r18
    2514:	9f 7d       	andi	r25, 0xDF	; 223
    2516:	89 2b       	or	r24, r25
    2518:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    251a:	ea e7       	ldi	r30, 0x7A	; 122
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	80 81       	ld	r24, Z
    2520:	80 64       	ori	r24, 0x40	; 64
    2522:	80 83       	st	Z, r24
    2524:	b5 c0       	rjmp	.+362    	; 0x2690 <__vector_21+0x464>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    2526:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    252a:	80 38       	cpi	r24, 0x80	; 128
    252c:	09 f4       	brne	.+2      	; 0x2530 <__vector_21+0x304>
    252e:	b0 c0       	rjmp	.+352    	; 0x2690 <__vector_21+0x464>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    2530:	84 b3       	in	r24, 0x14	; 20
    2532:	87 60       	ori	r24, 0x07	; 7
    2534:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2536:	84 b3       	in	r24, 0x14	; 20
    2538:	8b 7f       	andi	r24, 0xFB	; 251
    253a:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    253c:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <pipe_Module+0x1>
    2540:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2542:	e2 e0       	ldi	r30, 0x02	; 2
    2544:	ea 95       	dec	r30
    2546:	f1 f7       	brne	.-4      	; 0x2544 <__vector_21+0x318>
    2548:	00 c0       	rjmp	.+0      	; 0x254a <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    254a:	84 b3       	in	r24, 0x14	; 20
    254c:	84 60       	ori	r24, 0x04	; 4
    254e:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    2550:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2552:	e4 e6       	ldi	r30, 0x64	; 100
    2554:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2556:	83 81       	ldd	r24, Z+3	; 0x03
    2558:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    255a:	84 81       	ldd	r24, Z+4	; 0x04
    255c:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    255e:	84 b3       	in	r24, 0x14	; 20
    2560:	81 60       	ori	r24, 0x01	; 1
    2562:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    2564:	81 81       	ldd	r24, Z+1	; 0x01
    2566:	82 2b       	or	r24, r18
    2568:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    256a:	85 81       	ldd	r24, Z+5	; 0x05
    256c:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    256e:	86 81       	ldd	r24, Z+6	; 0x06
    2570:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    2572:	80 b1       	in	r24, 0x00	; 0
    2574:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2576:	84 b3       	in	r24, 0x14	; 20
    2578:	8e 7f       	andi	r24, 0xFE	; 254
    257a:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    257c:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    257e:	91 50       	subi	r25, 0x01	; 1
    2580:	51 f7       	brne	.-44     	; 0x2556 <__vector_21+0x32a>
	asm("nop");
    2582:	00 00       	nop
	asm("nop");
    2584:	00 00       	nop
	PIPE_CLOCK_H
    2586:	84 b3       	in	r24, 0x14	; 20
    2588:	81 60       	ori	r24, 0x01	; 1
    258a:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    258c:	84 b3       	in	r24, 0x14	; 20
    258e:	8d 7f       	andi	r24, 0xFD	; 253
    2590:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    2592:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2596:	82 60       	ori	r24, 0x02	; 2
    2598:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    259c:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    259e:	8b b1       	in	r24, 0x0b	; 11
    25a0:	80 68       	ori	r24, 0x80	; 128
    25a2:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    25a4:	84 b3       	in	r24, 0x14	; 20
    25a6:	82 60       	ori	r24, 0x02	; 2
    25a8:	84 bb       	out	0x14, r24	; 20
    25aa:	72 c0       	rjmp	.+228    	; 0x2690 <__vector_21+0x464>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    25ac:	80 81       	ld	r24, Z
    25ae:	81 50       	subi	r24, 0x01	; 1
    25b0:	8e 3f       	cpi	r24, 0xFE	; 254
    25b2:	38 f4       	brcc	.+14     	; 0x25c2 <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    25b4:	21 81       	ldd	r18, Z+1	; 0x01
    25b6:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    25b8:	25 30       	cpi	r18, 0x05	; 5
    25ba:	10 f0       	brcs	.+4      	; 0x25c0 <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    25bc:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    25be:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    25c0:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    25c2:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    25c4:	9f 5f       	subi	r25, 0xFF	; 255
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <__vector_21+0x3a2>
    25c8:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    25ca:	e0 e5       	ldi	r30, 0x50	; 80
    25cc:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    25ce:	9a 30       	cpi	r25, 0x0A	; 10
    25d0:	68 f3       	brcs	.-38     	; 0x25ac <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    25d2:	e4 e6       	ldi	r30, 0x64	; 100
    25d4:	f2 e0       	ldi	r31, 0x02	; 2
    25d6:	80 81       	ld	r24, Z
    25d8:	8f 5f       	subi	r24, 0xFF	; 255
    25da:	80 83       	st	Z, r24
    25dc:	8a 3f       	cpi	r24, 0xFA	; 250
    25de:	09 f0       	breq	.+2      	; 0x25e2 <__vector_21+0x3b6>
    25e0:	57 c0       	rjmp	.+174    	; 0x2690 <__vector_21+0x464>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    25e2:	8f ef       	ldi	r24, 0xFF	; 255
    25e4:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    25e8:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    25ea:	81 81       	ldd	r24, Z+1	; 0x01
    25ec:	8f 5f       	subi	r24, 0xFF	; 255
    25ee:	81 83       	std	Z+1, r24	; 0x01
    25f0:	8c 33       	cpi	r24, 0x3C	; 60
    25f2:	08 f4       	brcc	.+2      	; 0x25f6 <__vector_21+0x3ca>
    25f4:	4d c0       	rjmp	.+154    	; 0x2690 <__vector_21+0x464>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    25f6:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	8f 5f       	subi	r24, 0xFF	; 255
    25fc:	82 83       	std	Z+2, r24	; 0x02
    25fe:	8c 33       	cpi	r24, 0x3C	; 60
    2600:	08 f4       	brcc	.+2      	; 0x2604 <__vector_21+0x3d8>
    2602:	46 c0       	rjmp	.+140    	; 0x2690 <__vector_21+0x464>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    2604:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    2606:	83 81       	ldd	r24, Z+3	; 0x03
    2608:	8f 5f       	subi	r24, 0xFF	; 255
    260a:	83 83       	std	Z+3, r24	; 0x03
    260c:	84 36       	cpi	r24, 0x64	; 100
    260e:	08 f4       	brcc	.+2      	; 0x2612 <__vector_21+0x3e6>
    2610:	3f c0       	rjmp	.+126    	; 0x2690 <__vector_21+0x464>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2612:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <time_Uptime+0x3>
    2616:	3c c0       	rjmp	.+120    	; 0x2690 <__vector_21+0x464>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    2618:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    261c:	80 38       	cpi	r24, 0x80	; 128
    261e:	c1 f1       	breq	.+112    	; 0x2690 <__vector_21+0x464>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    2620:	e0 90 78 03 	lds	r14, 0x0378	; 0x800378 <pipe_Module>
    2624:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipe_ModuleTested>
    2628:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    262a:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    262c:	0c e6       	ldi	r16, 0x6C	; 108
    262e:	12 e0       	ldi	r17, 0x02	; 2
    2630:	2c c0       	rjmp	.+88     	; 0x268a <__vector_21+0x45e>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2632:	f8 01       	movw	r30, r16
    2634:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2636:	83 81       	ldd	r24, Z+3	; 0x03
    2638:	9c 2f       	mov	r25, r28
    263a:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    263c:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    263e:	84 81       	ldd	r24, Z+4	; 0x04
    2640:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2642:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    2644:	25 81       	ldd	r18, Z+5	; 0x05
    2646:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2648:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    264a:	86 81       	ldd	r24, Z+6	; 0x06
    264c:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    264e:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    2650:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2652:	cd 23       	and	r28, r29
    2654:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2656:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2658:	8d 2f       	mov	r24, r29
    265a:	80 95       	com	r24
    265c:	8c 23       	and	r24, r28
    265e:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2660:	21 f0       	breq	.+8      	; 0x266a <__vector_21+0x43e>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2662:	9f 2d       	mov	r25, r15
    2664:	90 62       	ori	r25, 0x20	; 32
    2666:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    266a:	c0 95       	com	r28
    266c:	cd 23       	and	r28, r29
    266e:	8c 2f       	mov	r24, r28
    2670:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    2672:	19 f0       	breq	.+6      	; 0x267a <__vector_21+0x44e>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2674:	9f 2d       	mov	r25, r15
    2676:	0e 94 7a 2f 	call	0x5ef4	; 0x5ef4 <pipeMsgPush>
		}
		curPipe++;
    267a:	08 5f       	subi	r16, 0xF8	; 248
    267c:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    267e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <pipeProcessing>
    2682:	81 60       	ori	r24, 0x01	; 1
    2684:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2688:	f3 94       	inc	r15
    268a:	ff e1       	ldi	r31, 0x1F	; 31
    268c:	ff 15       	cp	r31, r15
    268e:	88 f6       	brcc	.-94     	; 0x2632 <__vector_21+0x406>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    2690:	85 b1       	in	r24, 0x05	; 5
    2692:	8f 77       	andi	r24, 0x7F	; 127
    2694:	85 b9       	out	0x05, r24	; 5

}
    2696:	ff 91       	pop	r31
    2698:	ef 91       	pop	r30
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	bf 91       	pop	r27
    26a0:	af 91       	pop	r26
    26a2:	9f 91       	pop	r25
    26a4:	8f 91       	pop	r24
    26a6:	7f 91       	pop	r23
    26a8:	6f 91       	pop	r22
    26aa:	5f 91       	pop	r21
    26ac:	4f 91       	pop	r20
    26ae:	3f 91       	pop	r19
    26b0:	2f 91       	pop	r18
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	0f 90       	pop	r0
    26bc:	0b be       	out	0x3b, r0	; 59
    26be:	0f 90       	pop	r0
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	0f 90       	pop	r0
    26c4:	1f 90       	pop	r1
    26c6:	18 95       	reti

000026c8 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    26c8:	e8 2f       	mov	r30, r24
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	ee 0f       	add	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	ee 0f       	add	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	e4 59       	subi	r30, 0x94	; 148
    26da:	fd 4f       	sbci	r31, 0xFD	; 253
    26dc:	60 95       	com	r22
    26de:	81 81       	ldd	r24, Z+1	; 0x01
    26e0:	68 23       	and	r22, r24
    26e2:	61 83       	std	Z+1, r22	; 0x01
    26e4:	08 95       	ret

000026e6 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    26e6:	e8 2f       	mov	r30, r24
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	ee 0f       	add	r30, r30
    26ec:	ff 1f       	adc	r31, r31
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	ee 0f       	add	r30, r30
    26f4:	ff 1f       	adc	r31, r31
    26f6:	e4 59       	subi	r30, 0x94	; 148
    26f8:	fd 4f       	sbci	r31, 0xFD	; 253
    26fa:	81 81       	ldd	r24, Z+1	; 0x01
    26fc:	68 2b       	or	r22, r24
    26fe:	61 83       	std	Z+1, r22	; 0x01
    2700:	08 95       	ret

00002702 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2702:	8f ef       	ldi	r24, 0xFF	; 255
    2704:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    2706:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    2708:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    270a:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    270c:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    270e:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    2710:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    2712:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    2716:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    271a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    271e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    2722:	8a b1       	in	r24, 0x0a	; 10
    2724:	80 68       	ori	r24, 0x80	; 128
    2726:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2728:	8b b1       	in	r24, 0x0b	; 11
    272a:	8f 77       	andi	r24, 0x7F	; 127
    272c:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    272e:	84 b1       	in	r24, 0x04	; 4
    2730:	80 64       	ori	r24, 0x40	; 64
    2732:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    2734:	85 b1       	in	r24, 0x05	; 5
    2736:	8f 7b       	andi	r24, 0xBF	; 191
    2738:	85 b9       	out	0x05, r24	; 5
    273a:	08 95       	ret

0000273c <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    273c:	88 23       	and	r24, r24
    273e:	34 f4       	brge	.+12     	; 0x274c <lcd_write_nibble+0x10>
    2740:	e2 e0       	ldi	r30, 0x02	; 2
    2742:	f1 e0       	ldi	r31, 0x01	; 1
    2744:	90 81       	ld	r25, Z
    2746:	90 61       	ori	r25, 0x10	; 16
    2748:	90 83       	st	Z, r25
    274a:	05 c0       	rjmp	.+10     	; 0x2756 <lcd_write_nibble+0x1a>
    274c:	e2 e0       	ldi	r30, 0x02	; 2
    274e:	f1 e0       	ldi	r31, 0x01	; 1
    2750:	90 81       	ld	r25, Z
    2752:	9f 7e       	andi	r25, 0xEF	; 239
    2754:	90 83       	st	Z, r25
    2756:	86 ff       	sbrs	r24, 6
    2758:	06 c0       	rjmp	.+12     	; 0x2766 <lcd_write_nibble+0x2a>
    275a:	e2 e0       	ldi	r30, 0x02	; 2
    275c:	f1 e0       	ldi	r31, 0x01	; 1
    275e:	90 81       	ld	r25, Z
    2760:	98 60       	ori	r25, 0x08	; 8
    2762:	90 83       	st	Z, r25
    2764:	05 c0       	rjmp	.+10     	; 0x2770 <lcd_write_nibble+0x34>
    2766:	e2 e0       	ldi	r30, 0x02	; 2
    2768:	f1 e0       	ldi	r31, 0x01	; 1
    276a:	90 81       	ld	r25, Z
    276c:	97 7f       	andi	r25, 0xF7	; 247
    276e:	90 83       	st	Z, r25
    2770:	85 ff       	sbrs	r24, 5
    2772:	04 c0       	rjmp	.+8      	; 0x277c <lcd_write_nibble+0x40>
    2774:	9e b1       	in	r25, 0x0e	; 14
    2776:	98 60       	ori	r25, 0x08	; 8
    2778:	9e b9       	out	0x0e, r25	; 14
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <lcd_write_nibble+0x46>
    277c:	9e b1       	in	r25, 0x0e	; 14
    277e:	97 7f       	andi	r25, 0xF7	; 247
    2780:	9e b9       	out	0x0e, r25	; 14
    2782:	84 ff       	sbrs	r24, 4
    2784:	04 c0       	rjmp	.+8      	; 0x278e <lcd_write_nibble+0x52>
    2786:	84 b3       	in	r24, 0x14	; 20
    2788:	80 62       	ori	r24, 0x20	; 32
    278a:	84 bb       	out	0x14, r24	; 20
    278c:	03 c0       	rjmp	.+6      	; 0x2794 <lcd_write_nibble+0x58>
    278e:	84 b3       	in	r24, 0x14	; 20
    2790:	8f 7d       	andi	r24, 0xDF	; 223
    2792:	84 bb       	out	0x14, r24	; 20
    2794:	e2 e0       	ldi	r30, 0x02	; 2
    2796:	f1 e0       	ldi	r31, 0x01	; 1
    2798:	80 81       	ld	r24, Z
    279a:	80 64       	ori	r24, 0x40	; 64
    279c:	80 83       	st	Z, r24
    279e:	85 e0       	ldi	r24, 0x05	; 5
    27a0:	8a 95       	dec	r24
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <lcd_write_nibble+0x64>
    27a4:	00 00       	nop
    27a6:	80 81       	ld	r24, Z
    27a8:	8f 7b       	andi	r24, 0xBF	; 191
    27aa:	80 83       	st	Z, r24
    27ac:	85 e0       	ldi	r24, 0x05	; 5
    27ae:	8a 95       	dec	r24
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <lcd_write_nibble+0x72>
    27b2:	00 00       	nop
    27b4:	08 95       	ret

000027b6 <lcd_write_character>:
    27b6:	cf 93       	push	r28
    27b8:	c8 2f       	mov	r28, r24
    27ba:	e2 e0       	ldi	r30, 0x02	; 2
    27bc:	f1 e0       	ldi	r31, 0x01	; 1
    27be:	80 81       	ld	r24, Z
    27c0:	80 62       	ori	r24, 0x20	; 32
    27c2:	80 83       	st	Z, r24
    27c4:	80 81       	ld	r24, Z
    27c6:	8f 7b       	andi	r24, 0xBF	; 191
    27c8:	80 83       	st	Z, r24
    27ca:	8c 2f       	mov	r24, r28
    27cc:	b7 df       	rcall	.-146    	; 0x273c <lcd_write_nibble>
    27ce:	8c 2f       	mov	r24, r28
    27d0:	82 95       	swap	r24
    27d2:	80 7f       	andi	r24, 0xF0	; 240
    27d4:	b3 df       	rcall	.-154    	; 0x273c <lcd_write_nibble>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <lcd_write_character+0x24>
    27de:	00 c0       	rjmp	.+0      	; 0x27e0 <lcd_write_character+0x2a>
    27e0:	00 00       	nop
    27e2:	cf 91       	pop	r28
    27e4:	08 95       	ret

000027e6 <lcd_write_command>:
    27e6:	cf 93       	push	r28
    27e8:	c8 2f       	mov	r28, r24
    27ea:	e2 e0       	ldi	r30, 0x02	; 2
    27ec:	f1 e0       	ldi	r31, 0x01	; 1
    27ee:	80 81       	ld	r24, Z
    27f0:	8f 7d       	andi	r24, 0xDF	; 223
    27f2:	80 83       	st	Z, r24
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 7b       	andi	r24, 0xBF	; 191
    27f8:	80 83       	st	Z, r24
    27fa:	8c 2f       	mov	r24, r28
    27fc:	9f df       	rcall	.-194    	; 0x273c <lcd_write_nibble>
    27fe:	8c 2f       	mov	r24, r28
    2800:	82 95       	swap	r24
    2802:	80 7f       	andi	r24, 0xF0	; 240
    2804:	9b df       	rcall	.-202    	; 0x273c <lcd_write_nibble>
    2806:	c1 50       	subi	r28, 0x01	; 1
    2808:	c2 30       	cpi	r28, 0x02	; 2
    280a:	38 f4       	brcc	.+14     	; 0x281a <lcd_write_command+0x34>
    280c:	8f e0       	ldi	r24, 0x0F	; 15
    280e:	97 e2       	ldi	r25, 0x27	; 39
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	f1 f7       	brne	.-4      	; 0x2810 <lcd_write_command+0x2a>
    2814:	00 c0       	rjmp	.+0      	; 0x2816 <lcd_write_command+0x30>
    2816:	00 00       	nop
    2818:	06 c0       	rjmp	.+12     	; 0x2826 <lcd_write_command+0x40>
    281a:	8f ef       	ldi	r24, 0xFF	; 255
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <lcd_write_command+0x38>
    2822:	00 c0       	rjmp	.+0      	; 0x2824 <lcd_write_command+0x3e>
    2824:	00 00       	nop
    2826:	cf 91       	pop	r28
    2828:	08 95       	ret

0000282a <lcd_init>:
    282a:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <lcd_displayingMessage>
    282e:	e1 e0       	ldi	r30, 0x01	; 1
    2830:	f1 e0       	ldi	r31, 0x01	; 1
    2832:	80 81       	ld	r24, Z
    2834:	80 61       	ori	r24, 0x10	; 16
    2836:	80 83       	st	Z, r24
    2838:	80 81       	ld	r24, Z
    283a:	88 60       	ori	r24, 0x08	; 8
    283c:	80 83       	st	Z, r24
    283e:	8d b1       	in	r24, 0x0d	; 13
    2840:	88 60       	ori	r24, 0x08	; 8
    2842:	8d b9       	out	0x0d, r24	; 13
    2844:	83 b3       	in	r24, 0x13	; 19
    2846:	80 62       	ori	r24, 0x20	; 32
    2848:	83 bb       	out	0x13, r24	; 19
    284a:	80 81       	ld	r24, Z
    284c:	80 64       	ori	r24, 0x40	; 64
    284e:	80 83       	st	Z, r24
    2850:	80 81       	ld	r24, Z
    2852:	80 62       	ori	r24, 0x20	; 32
    2854:	80 83       	st	Z, r24
    2856:	2f ef       	ldi	r18, 0xFF	; 255
    2858:	81 ee       	ldi	r24, 0xE1	; 225
    285a:	94 e0       	ldi	r25, 0x04	; 4
    285c:	21 50       	subi	r18, 0x01	; 1
    285e:	80 40       	sbci	r24, 0x00	; 0
    2860:	90 40       	sbci	r25, 0x00	; 0
    2862:	e1 f7       	brne	.-8      	; 0x285c <lcd_init+0x32>
    2864:	00 c0       	rjmp	.+0      	; 0x2866 <lcd_init+0x3c>
    2866:	00 00       	nop
    2868:	e2 e0       	ldi	r30, 0x02	; 2
    286a:	f1 e0       	ldi	r31, 0x01	; 1
    286c:	80 81       	ld	r24, Z
    286e:	8f 7d       	andi	r24, 0xDF	; 223
    2870:	80 83       	st	Z, r24
    2872:	80 81       	ld	r24, Z
    2874:	8f 7b       	andi	r24, 0xBF	; 191
    2876:	80 83       	st	Z, r24
    2878:	80 e3       	ldi	r24, 0x30	; 48
    287a:	60 df       	rcall	.-320    	; 0x273c <lcd_write_nibble>
    287c:	8f e1       	ldi	r24, 0x1F	; 31
    287e:	9e e4       	ldi	r25, 0x4E	; 78
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <lcd_init+0x56>
    2884:	00 c0       	rjmp	.+0      	; 0x2886 <lcd_init+0x5c>
    2886:	00 00       	nop
    2888:	80 e3       	ldi	r24, 0x30	; 48
    288a:	58 df       	rcall	.-336    	; 0x273c <lcd_write_nibble>
    288c:	8f e1       	ldi	r24, 0x1F	; 31
    288e:	9e e4       	ldi	r25, 0x4E	; 78
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	f1 f7       	brne	.-4      	; 0x2890 <lcd_init+0x66>
    2894:	00 c0       	rjmp	.+0      	; 0x2896 <lcd_init+0x6c>
    2896:	00 00       	nop
    2898:	80 e3       	ldi	r24, 0x30	; 48
    289a:	50 df       	rcall	.-352    	; 0x273c <lcd_write_nibble>
    289c:	8f e1       	ldi	r24, 0x1F	; 31
    289e:	9e e4       	ldi	r25, 0x4E	; 78
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <lcd_init+0x76>
    28a4:	00 c0       	rjmp	.+0      	; 0x28a6 <lcd_init+0x7c>
    28a6:	00 00       	nop
    28a8:	88 e2       	ldi	r24, 0x28	; 40
    28aa:	48 df       	rcall	.-368    	; 0x273c <lcd_write_nibble>
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <lcd_init+0x86>
    28b4:	00 c0       	rjmp	.+0      	; 0x28b6 <lcd_init+0x8c>
    28b6:	00 00       	nop
    28b8:	88 e2       	ldi	r24, 0x28	; 40
    28ba:	95 df       	rcall	.-214    	; 0x27e6 <lcd_write_command>
    28bc:	88 e0       	ldi	r24, 0x08	; 8
    28be:	93 df       	rcall	.-218    	; 0x27e6 <lcd_write_command>
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	91 df       	rcall	.-222    	; 0x27e6 <lcd_write_command>
    28c4:	86 e0       	ldi	r24, 0x06	; 6
    28c6:	8f df       	rcall	.-226    	; 0x27e6 <lcd_write_command>
    28c8:	8c e0       	ldi	r24, 0x0C	; 12
    28ca:	8d cf       	rjmp	.-230    	; 0x27e6 <lcd_write_command>
    28cc:	08 95       	ret

000028ce <lcd_goto>:
    28ce:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <lcd_cursorPos>
    28d2:	80 58       	subi	r24, 0x80	; 128
    28d4:	88 cf       	rjmp	.-240    	; 0x27e6 <lcd_write_command>
    28d6:	08 95       	ret

000028d8 <lcd_clrscr>:
    28d8:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <lcd_cursorPos>
    28dc:	81 e0       	ldi	r24, 0x01	; 1
    28de:	83 df       	rcall	.-250    	; 0x27e6 <lcd_write_command>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	ec e7       	ldi	r30, 0x7C	; 124
    28e4:	f3 e0       	ldi	r31, 0x03	; 3
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <lcd_clrscr+0x18>
    28e8:	90 e2       	ldi	r25, 0x20	; 32
    28ea:	90 83       	st	Z, r25
    28ec:	8f 5f       	subi	r24, 0xFF	; 255
    28ee:	31 96       	adiw	r30, 0x01	; 1
    28f0:	80 35       	cpi	r24, 0x50	; 80
    28f2:	d0 f3       	brcs	.-12     	; 0x28e8 <lcd_clrscr+0x10>
    28f4:	08 95       	ret

000028f6 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	// convert non linear LCD-Cursor to linear Cursor 0..19 = line 0, 20..39 = line 1... for buffer
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    28f6:	84 31       	cpi	r24, 0x14	; 20
    28f8:	98 f0       	brcs	.+38     	; 0x2920 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    28fa:	90 ec       	ldi	r25, 0xC0	; 192
    28fc:	98 0f       	add	r25, r24
    28fe:	94 31       	cpi	r25, 0x14	; 20
    2900:	10 f4       	brcc	.+4      	; 0x2906 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    2902:	8c 52       	subi	r24, 0x2C	; 44
    2904:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    2906:	9c ee       	ldi	r25, 0xEC	; 236
    2908:	98 0f       	add	r25, r24
    290a:	94 31       	cpi	r25, 0x14	; 20
    290c:	10 f4       	brcc	.+4      	; 0x2912 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    290e:	8c 5e       	subi	r24, 0xEC	; 236
    2910:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    2912:	9c ea       	ldi	r25, 0xAC	; 172
    2914:	98 0f       	add	r25, r24
    2916:	94 31       	cpi	r25, 0x14	; 20
    2918:	10 f4       	brcc	.+4      	; 0x291e <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    291a:	88 51       	subi	r24, 0x18	; 24
    291c:	08 95       	ret
	}
	return 0xFF; // default should not occure
    291e:	8f ef       	ldi	r24, 0xFF	; 255

}
    2920:	08 95       	ret

00002922 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	d8 2f       	mov	r29, r24
	// V 0.76 no output if displaying message
	if ((lcd_displayingMessage == FALSE) || (lcd_cursorPos < MENU_LCD_CURSOR_MAINMESSAGE)
    2928:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd_displayingMessage>
    292c:	88 23       	and	r24, r24
    292e:	31 f0       	breq	.+12     	; 0x293c <lcd_putc+0x1a>
    2930:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    2934:	80 34       	cpi	r24, 0x40	; 64
    2936:	10 f0       	brcs	.+4      	; 0x293c <lcd_putc+0x1a>
		|| (lcd_cursorPos >= MENU_LCD_CURSOR_MAINMESSAGE+MENU_LCD_LEN_MAINMESSAGE)) {
    2938:	84 35       	cpi	r24, 0x54	; 84
    293a:	10 f0       	brcs	.+4      	; 0x2940 <lcd_putc+0x1e>
		lcd_write_character(c);
    293c:	8d 2f       	mov	r24, r29
    293e:	3b df       	rcall	.-394    	; 0x27b6 <lcd_write_character>
	}
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    2940:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    2944:	8c 2f       	mov	r24, r28
    2946:	d7 df       	rcall	.-82     	; 0x28f6 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2948:	8f 3f       	cpi	r24, 0xFF	; 255
    294a:	29 f1       	breq	.+74     	; 0x2996 <lcd_putc+0x74>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    294c:	d1 3a       	cpi	r29, 0xA1	; 161
    294e:	79 f0       	breq	.+30     	; 0x296e <lcd_putc+0x4c>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    2950:	d0 38       	cpi	r29, 0x80	; 128
    2952:	79 f0       	breq	.+30     	; 0x2972 <lcd_putc+0x50>
			stored_char = LCD_CHARREPL_STATEONOFF;
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2954:	d5 3a       	cpi	r29, 0xA5	; 165
    2956:	79 f0       	breq	.+30     	; 0x2976 <lcd_putc+0x54>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHAR_STATEON){
    2958:	da 32       	cpi	r29, 0x2A	; 42
    295a:	79 f0       	breq	.+30     	; 0x297a <lcd_putc+0x58>
			stored_char = LCD_CHARREPL_STATEON;
		} else if (stored_char == LCD_CHAR_SZ){
    295c:	d2 3e       	cpi	r29, 0xE2	; 226
    295e:	79 f0       	breq	.+30     	; 0x297e <lcd_putc+0x5c>
			stored_char = LCD_CHARREPL_SZ;
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    2960:	d5 3f       	cpi	r29, 0xF5	; 245
    2962:	79 f0       	breq	.+30     	; 0x2982 <lcd_putc+0x60>
			stored_char = LCD_CHARREPL_UMLAUTU;
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2964:	df 3e       	cpi	r29, 0xEF	; 239
    2966:	79 f0       	breq	.+30     	; 0x2986 <lcd_putc+0x64>
			stored_char = LCD_CHARREPL_UMLAUTO;
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    2968:	d1 3e       	cpi	r29, 0xE1	; 225
    296a:	81 f4       	brne	.+32     	; 0x298c <lcd_putc+0x6a>
    296c:	0e c0       	rjmp	.+28     	; 0x298a <lcd_putc+0x68>
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL;
    296e:	d0 e2       	ldi	r29, 0x20	; 32
    2970:	0d c0       	rjmp	.+26     	; 0x298c <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF;
    2972:	d0 e2       	ldi	r29, 0x20	; 32
    2974:	0b c0       	rjmp	.+22     	; 0x298c <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM;
    2976:	d4 e1       	ldi	r29, 0x14	; 20
    2978:	09 c0       	rjmp	.+18     	; 0x298c <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON;
    297a:	d5 e1       	ldi	r29, 0x15	; 21
    297c:	07 c0       	rjmp	.+14     	; 0x298c <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ;
    297e:	d3 e1       	ldi	r29, 0x13	; 19
    2980:	05 c0       	rjmp	.+10     	; 0x298c <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU;
    2982:	d2 e1       	ldi	r29, 0x12	; 18
    2984:	03 c0       	rjmp	.+6      	; 0x298c <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO;
    2986:	d1 e1       	ldi	r29, 0x11	; 17
    2988:	01 c0       	rjmp	.+2      	; 0x298c <lcd_putc+0x6a>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA;
    298a:	d0 e1       	ldi	r29, 0x10	; 16
		}
		lcd_buffer[cursor] = stored_char;
    298c:	e8 2f       	mov	r30, r24
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	e4 58       	subi	r30, 0x84	; 132
    2992:	fc 4f       	sbci	r31, 0xFC	; 252
    2994:	d0 83       	st	Z, r29
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    2996:	cf 5f       	subi	r28, 0xFF	; 255
    2998:	cf 77       	andi	r28, 0x7F	; 127
    299a:	c0 93 cd 03 	sts	0x03CD, r28	; 0x8003cd <lcd_cursorPos>
}
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	fc 01       	movw	r30, r24
	if (s != NULL){
    29aa:	89 2b       	or	r24, r25
    29ac:	19 f4       	brne	.+6      	; 0x29b4 <lcd_puts+0x10>
    29ae:	07 c0       	rjmp	.+14     	; 0x29be <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    29b0:	b8 df       	rcall	.-144    	; 0x2922 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    29b2:	fe 01       	movw	r30, r28
    29b4:	ef 01       	movw	r28, r30
    29b6:	21 96       	adiw	r28, 0x01	; 1
    29b8:	80 81       	ld	r24, Z
    29ba:	81 11       	cpse	r24, r1
    29bc:	f9 cf       	rjmp	.-14     	; 0x29b0 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    29ca:	89 2b       	or	r24, r25
    29cc:	19 f4       	brne	.+6      	; 0x29d4 <lcd_puts_P+0x10>
    29ce:	07 c0       	rjmp	.+14     	; 0x29de <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    29d0:	a8 df       	rcall	.-176    	; 0x2922 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    29d2:	fe 01       	movw	r30, r28
    29d4:	ef 01       	movw	r28, r30
    29d6:	21 96       	adiw	r28, 0x01	; 1
    29d8:	84 91       	lpm	r24, Z
    29da:	81 11       	cpse	r24, r1
    29dc:	f9 cf       	rjmp	.-14     	; 0x29d0 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
}
    29de:	df 91       	pop	r29
    29e0:	cf 91       	pop	r28
    29e2:	08 95       	ret

000029e4 <lcd_message>:
//------------------------------ MESSAGE ------------------------------

uint8_t lcd_displayingMessage; // TRUE when a message is beeing displayed. Then all lcd outputs are wirten to buffer only
uint8_t lcd_saveCursorIsOn;

void lcd_message(const char *pMessage){
    29e4:	ff 92       	push	r15
    29e6:	0f 93       	push	r16
    29e8:	1f 93       	push	r17
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	8c 01       	movw	r16, r24
	// clear message area and display message, start timer
	uint8_t saveCursor = lcd_cursorPos;
    29f0:	f0 90 cd 03 	lds	r15, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    29f4:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    29f8:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLen(pMessage);
    29fc:	c8 01       	movw	r24, r16
    29fe:	0e 94 a7 3f 	call	0x7f4e	; 0x7f4e <get_StrLen>
    2a02:	d8 2f       	mov	r29, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2a04:	80 e4       	ldi	r24, 0x40	; 64
    2a06:	63 df       	rcall	.-314    	; 0x28ce <lcd_goto>
	uint8_t pos = 0;
    2a08:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2a0a:	03 c0       	rjmp	.+6      	; 0x2a12 <lcd_message+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    2a0c:	80 e2       	ldi	r24, 0x20	; 32
    2a0e:	d3 de       	rcall	.-602    	; 0x27b6 <lcd_write_character>
		pos++;
    2a10:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLen(pMessage);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2a12:	2c 2f       	mov	r18, r28
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	84 e1       	ldi	r24, 0x14	; 20
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	8d 1b       	sub	r24, r29
    2a1c:	91 09       	sbc	r25, r1
    2a1e:	95 95       	asr	r25
    2a20:	87 95       	ror	r24
    2a22:	28 17       	cp	r18, r24
    2a24:	39 07       	cpc	r19, r25
    2a26:	94 f3       	brlt	.-28     	; 0x2a0c <lcd_message+0x28>
    2a28:	04 c0       	rjmp	.+8      	; 0x2a32 <lcd_message+0x4e>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
    2a2a:	0f 5f       	subi	r16, 0xFF	; 255
    2a2c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2e:	c3 de       	rcall	.-634    	; 0x27b6 <lcd_write_character>
		pos++;
    2a30:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (*pMessage != 0){
    2a32:	f8 01       	movw	r30, r16
    2a34:	80 81       	ld	r24, Z
    2a36:	81 11       	cpse	r24, r1
    2a38:	f8 cf       	rjmp	.-16     	; 0x2a2a <lcd_message+0x46>
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    2a3a:	03 c0       	rjmp	.+6      	; 0x2a42 <lcd_message+0x5e>
    2a3c:	80 e2       	ldi	r24, 0x20	; 32
    2a3e:	bb de       	rcall	.-650    	; 0x27b6 <lcd_write_character>
	}
	while (*pMessage != 0){
		lcd_write_character(*pMessage++);
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    2a40:	c1 2f       	mov	r28, r17
    2a42:	11 e0       	ldi	r17, 0x01	; 1
    2a44:	1c 0f       	add	r17, r28
    2a46:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2a48:	c8 f3       	brcs	.-14     	; 0x2a3c <lcd_message+0x58>
    2a4a:	8f 2d       	mov	r24, r15
    2a4c:	40 df       	rcall	.-384    	; 0x28ce <lcd_goto>
	lcd_displayingMessage = TRUE;
    2a4e:	8f ef       	ldi	r24, 0xFF	; 255
    2a50:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2a54:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a56:	f8 94       	cli
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	06 c0       	rjmp	.+12     	; 0x2a68 <lcd_message+0x84>
    2a5c:	e0 e5       	ldi	r30, 0x50	; 80
    2a5e:	f2 e0       	ldi	r31, 0x02	; 2
    2a60:	84 e6       	ldi	r24, 0x64	; 100
    2a62:	86 87       	std	Z+14, r24	; 0x0e
    2a64:	17 86       	std	Z+15, r1	; 0x0f
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	81 11       	cpse	r24, r1
    2a6a:	f8 cf       	rjmp	.-16     	; 0x2a5c <lcd_message+0x78>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a6c:	9f bf       	out	0x3f, r25	; 63
}
    2a6e:	df 91       	pop	r29
    2a70:	cf 91       	pop	r28
    2a72:	1f 91       	pop	r17
    2a74:	0f 91       	pop	r16
    2a76:	ff 90       	pop	r15
    2a78:	08 95       	ret

00002a7a <lcd_message_P>:

void lcd_message_P(const char *pMessage_P){
    2a7a:	ff 92       	push	r15
    2a7c:	0f 93       	push	r16
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	8c 01       	movw	r16, r24
	uint8_t saveCursor = lcd_cursorPos;
    2a86:	d0 91 cd 03 	lds	r29, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_saveCursorIsOn = lcd_cursorIsOn;
    2a8a:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
    2a8e:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <lcd_saveCursorIsOn>
	uint8_t textLen = get_StrLenP(pMessage_P);
    2a92:	c8 01       	movw	r24, r16
    2a94:	0e 94 9d 3f 	call	0x7f3a	; 0x7f3a <get_StrLenP>
    2a98:	f8 2e       	mov	r15, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2a9a:	80 e4       	ldi	r24, 0x40	; 64
    2a9c:	18 df       	rcall	.-464    	; 0x28ce <lcd_goto>
	uint8_t pos = 0;
    2a9e:	c0 e0       	ldi	r28, 0x00	; 0
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2aa0:	03 c0       	rjmp	.+6      	; 0x2aa8 <lcd_message_P+0x2e>
		lcd_write_character(' '); // blank but do not write to buffer
    2aa2:	80 e2       	ldi	r24, 0x20	; 32
    2aa4:	88 de       	rcall	.-752    	; 0x27b6 <lcd_write_character>
		pos++;
    2aa6:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t saveCursor = lcd_cursorPos;
	lcd_saveCursorIsOn = lcd_cursorIsOn;
	uint8_t textLen = get_StrLenP(pMessage_P);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
    2aa8:	2c 2f       	mov	r18, r28
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	84 e1       	ldi	r24, 0x14	; 20
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	8f 19       	sub	r24, r15
    2ab2:	91 09       	sbc	r25, r1
    2ab4:	95 95       	asr	r25
    2ab6:	87 95       	ror	r24
    2ab8:	28 17       	cp	r18, r24
    2aba:	39 07       	cpc	r19, r25
    2abc:	94 f3       	brlt	.-28     	; 0x2aa2 <lcd_message_P+0x28>
    2abe:	06 c0       	rjmp	.+12     	; 0x2acc <lcd_message_P+0x52>
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
    2ac0:	0f 5f       	subi	r16, 0xFF	; 255
    2ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac4:	fc 01       	movw	r30, r24
    2ac6:	84 91       	lpm	r24, Z
    2ac8:	76 de       	rcall	.-788    	; 0x27b6 <lcd_write_character>
		pos++;
    2aca:	cf 5f       	subi	r28, 0xFF	; 255
	uint8_t pos = 0;
	while (pos < ((MENU_LCD_LEN_MAINMESSAGE - textLen) >> 1)) {
		lcd_write_character(' '); // blank but do not write to buffer
		pos++;
	}
	while (pgm_read_byte(pMessage_P) != 0){
    2acc:	c8 01       	movw	r24, r16
    2ace:	f8 01       	movw	r30, r16
    2ad0:	24 91       	lpm	r18, Z
    2ad2:	21 11       	cpse	r18, r1
    2ad4:	f5 cf       	rjmp	.-22     	; 0x2ac0 <lcd_message_P+0x46>
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
		lcd_write_character(' ');
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <lcd_message_P+0x64>
    2ad8:	80 e2       	ldi	r24, 0x20	; 32
    2ada:	6d de       	rcall	.-806    	; 0x27b6 <lcd_write_character>
	}
	while (pgm_read_byte(pMessage_P) != 0){
		lcd_write_character(pgm_read_byte(pMessage_P++));
		pos++;
	}
	while (pos++ < MENU_LCD_LEN_MAINMESSAGE){
    2adc:	c1 2f       	mov	r28, r17
    2ade:	11 e0       	ldi	r17, 0x01	; 1
    2ae0:	1c 0f       	add	r17, r28
    2ae2:	c4 31       	cpi	r28, 0x14	; 20
		lcd_write_character(' ');
	}
	lcd_goto(saveCursor);
    2ae4:	c8 f3       	brcs	.-14     	; 0x2ad8 <lcd_message_P+0x5e>
    2ae6:	8d 2f       	mov	r24, r29
    2ae8:	f2 de       	rcall	.-540    	; 0x28ce <lcd_goto>
	lcd_displayingMessage = TRUE;
    2aea:	8f ef       	ldi	r24, 0xFF	; 255
    2aec:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <lcd_displayingMessage>
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
    2af0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2af2:	f8 94       	cli
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	06 c0       	rjmp	.+12     	; 0x2b04 <lcd_message_P+0x8a>
    2af8:	e0 e5       	ldi	r30, 0x50	; 80
    2afa:	f2 e0       	ldi	r31, 0x02	; 2
    2afc:	84 e6       	ldi	r24, 0x64	; 100
    2afe:	86 87       	std	Z+14, r24	; 0x0e
    2b00:	17 86       	std	Z+15, r1	; 0x0f
    2b02:	80 e0       	ldi	r24, 0x00	; 0
    2b04:	81 11       	cpse	r24, r1
    2b06:	f8 cf       	rjmp	.-16     	; 0x2af8 <lcd_message_P+0x7e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b08:	9f bf       	out	0x3f, r25	; 63
}
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	08 95       	ret

00002b16 <lcd_setCG>:
	0b00011011,
	0b00011011,
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	1f 93       	push	r17
    2b1c:	cf 93       	push	r28
    2b1e:	df 93       	push	r29
    2b20:	eb 01       	movw	r28, r22
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	80 64       	ori	r24, 0x40	; 64
    2b32:	59 de       	rcall	.-846    	; 0x27e6 <lcd_write_command>
	for (uint8_t i = 0; i < 8; i++){
    2b34:	10 e0       	ldi	r17, 0x00	; 0
    2b36:	09 c0       	rjmp	.+18     	; 0x2b4a <lcd_setCG+0x34>
		lcd_write_character(pgm_read_byte(patternPtr++));
    2b38:	7e 01       	movw	r14, r28
    2b3a:	8f ef       	ldi	r24, 0xFF	; 255
    2b3c:	e8 1a       	sub	r14, r24
    2b3e:	f8 0a       	sbc	r15, r24
    2b40:	fe 01       	movw	r30, r28
    2b42:	84 91       	lpm	r24, Z
    2b44:	38 de       	rcall	.-912    	; 0x27b6 <lcd_write_character>
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2b46:	1f 5f       	subi	r17, 0xFF	; 255
		lcd_write_character(pgm_read_byte(patternPtr++));
    2b48:	e7 01       	movw	r28, r14
	0
};

void lcd_setCG(uint8_t charNr, const uint8_t* patternPtr){
	lcd_write_command(LCD_SETCGRAMADR | (charNr << 3));
	for (uint8_t i = 0; i < 8; i++){
    2b4a:	18 30       	cpi	r17, 0x08	; 8
    2b4c:	a8 f3       	brcs	.-22     	; 0x2b38 <lcd_setCG+0x22>
		lcd_write_character(pgm_read_byte(patternPtr++));
	}
}
    2b4e:	df 91       	pop	r29
    2b50:	cf 91       	pop	r28
    2b52:	1f 91       	pop	r17
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	08 95       	ret

00002b5a <lcd_initCG>:

void lcd_initCG(){
	lcd_setCG(0,cgPattern_Up); // 0x08 = Arrow Up
    2b5a:	6c e9       	ldi	r22, 0x9C	; 156
    2b5c:	71 e0       	ldi	r23, 0x01	; 1
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	da df       	rcall	.-76     	; 0x2b16 <lcd_setCG>
	lcd_setCG(1,cgPattern_Down); // 0x09 = Arrow Down
    2b62:	64 e9       	ldi	r22, 0x94	; 148
    2b64:	71 e0       	ldi	r23, 0x01	; 1
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	d6 df       	rcall	.-84     	; 0x2b16 <lcd_setCG>
	// old: 0x0A = Block = State On
	lcd_setCG(2,cgPattern_RegOff); // 0x0A = Single Reg Off
    2b6a:	6c e8       	ldi	r22, 0x8C	; 140
    2b6c:	71 e0       	ldi	r23, 0x01	; 1
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	d2 df       	rcall	.-92     	; 0x2b16 <lcd_setCG>
	lcd_setCG(3,cgPattern_RegOn); // 0x0B = Single Reg Off
    2b72:	64 e8       	ldi	r22, 0x84	; 132
    2b74:	71 e0       	ldi	r23, 0x01	; 1
    2b76:	83 e0       	ldi	r24, 0x03	; 3
    2b78:	ce df       	rcall	.-100    	; 0x2b16 <lcd_setCG>
	lcd_setCG(4,cgPattern_RegOffOff); // 0x0C = 2 Reg Off Off
    2b7a:	6c e7       	ldi	r22, 0x7C	; 124
    2b7c:	71 e0       	ldi	r23, 0x01	; 1
    2b7e:	84 e0       	ldi	r24, 0x04	; 4
    2b80:	ca df       	rcall	.-108    	; 0x2b16 <lcd_setCG>
	lcd_setCG(5,cgPattern_RegOffOn); // 0x0D = 2 Reg Off On
    2b82:	64 e7       	ldi	r22, 0x74	; 116
    2b84:	71 e0       	ldi	r23, 0x01	; 1
    2b86:	85 e0       	ldi	r24, 0x05	; 5
    2b88:	c6 df       	rcall	.-116    	; 0x2b16 <lcd_setCG>
	lcd_setCG(6,cgPattern_RegOnOff); // 0x0E = 2 Reg On Off
    2b8a:	6c e6       	ldi	r22, 0x6C	; 108
    2b8c:	71 e0       	ldi	r23, 0x01	; 1
    2b8e:	86 e0       	ldi	r24, 0x06	; 6
    2b90:	c2 df       	rcall	.-124    	; 0x2b16 <lcd_setCG>
	lcd_setCG(7,cgPattern_RegOnOn); // 0x0F = 2 Reg On On
    2b92:	64 e6       	ldi	r22, 0x64	; 100
    2b94:	71 e0       	ldi	r23, 0x01	; 1
    2b96:	87 e0       	ldi	r24, 0x07	; 7
    2b98:	be cf       	rjmp	.-132    	; 0x2b16 <lcd_setCG>
    2b9a:	08 95       	ret

00002b9c <lcd_cursosblink>:
    2b9c:	8d e0       	ldi	r24, 0x0D	; 13
}

//----------------------------------- CURSOR -------------------------#

void lcd_cursosblink(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON) | (1 << LCD_DISPLAYMODE_BLINK));
    2b9e:	23 de       	rcall	.-954    	; 0x27e6 <lcd_write_command>
	lcd_cursorIsOn = TRUE;
    2ba0:	8f ef       	ldi	r24, 0xFF	; 255
    2ba2:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <lcd_cursorIsOn>
    2ba6:	08 95       	ret

00002ba8 <lcd_cursoroff>:
}

void lcd_cursoroff(){
	lcd_write_command((1 << LCD_DISPLAYMODE) | (1 << LCD_DISPLAYMODE_ON));
    2ba8:	8c e0       	ldi	r24, 0x0C	; 12
    2baa:	1d de       	rcall	.-966    	; 0x27e6 <lcd_write_command>
	lcd_cursorIsOn = FALSE;
    2bac:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <lcd_cursorIsOn>
    2bb0:	08 95       	ret

00002bb2 <lcd_message_clear>:
	lcd_displayingMessage = TRUE;
	TIMER_SET(TIMER_MESSAGE_LCDCLEAR,TIMER_MENUDATA_LCDCLEAR_MS);
}


void lcd_message_clear(){
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
    2bba:	00 91 cd 03 	lds	r16, 0x03CD	; 0x8003cd <lcd_cursorPos>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
    2bbe:	80 e4       	ldi	r24, 0x40	; 64
    2bc0:	9a de       	rcall	.-716    	; 0x28f6 <getCursorFromLCDRAMcursor>
    2bc2:	c8 2f       	mov	r28, r24
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
    2bc4:	80 e4       	ldi	r24, 0x40	; 64
    2bc6:	83 de       	rcall	.-762    	; 0x28ce <lcd_goto>
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2bc8:	d0 e0       	ldi	r29, 0x00	; 0
    2bca:	22 c0       	rjmp	.+68     	; 0x2c10 <lcd_message_clear+0x5e>
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2bcc:	11 e0       	ldi	r17, 0x01	; 1
    2bce:	1c 0f       	add	r17, r28
    2bd0:	ec 2f       	mov	r30, r28
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	e4 58       	subi	r30, 0x84	; 132
    2bd6:	fc 4f       	sbci	r31, 0xFC	; 252
    2bd8:	80 81       	ld	r24, Z
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
    2bda:	84 31       	cpi	r24, 0x14	; 20
    2bdc:	59 f0       	breq	.+22     	; 0x2bf4 <lcd_message_clear+0x42>
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
		} else if (stored_char == LCD_CHARREPL_STATEON){
    2bde:	85 31       	cpi	r24, 0x15	; 21
    2be0:	59 f0       	breq	.+22     	; 0x2bf8 <lcd_message_clear+0x46>
			stored_char = LCD_CHAR_STATEON;
		} else if (stored_char == LCD_CHARREPL_SZ){
    2be2:	83 31       	cpi	r24, 0x13	; 19
    2be4:	59 f0       	breq	.+22     	; 0x2bfc <lcd_message_clear+0x4a>
			stored_char = LCD_CHAR_SZ;
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
    2be6:	82 31       	cpi	r24, 0x12	; 18
    2be8:	59 f0       	breq	.+22     	; 0x2c00 <lcd_message_clear+0x4e>
			stored_char = LCD_CHAR_UMLAUTU;
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
    2bea:	81 31       	cpi	r24, 0x11	; 17
    2bec:	59 f0       	breq	.+22     	; 0x2c04 <lcd_message_clear+0x52>
			stored_char = LCD_CHAR_UMLAUTO;
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
    2bee:	80 31       	cpi	r24, 0x10	; 16
    2bf0:	61 f4       	brne	.+24     	; 0x2c0a <lcd_message_clear+0x58>
    2bf2:	0a c0       	rjmp	.+20     	; 0x2c08 <lcd_message_clear+0x56>
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
		if (stored_char == LCD_CHARREPL_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHAR_NOTESTRAIGHT_SYM;
    2bf4:	85 ea       	ldi	r24, 0xA5	; 165
    2bf6:	09 c0       	rjmp	.+18     	; 0x2c0a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_STATEON){
			stored_char = LCD_CHAR_STATEON;
    2bf8:	8a e2       	ldi	r24, 0x2A	; 42
    2bfa:	07 c0       	rjmp	.+14     	; 0x2c0a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_SZ){
			stored_char = LCD_CHAR_SZ;
    2bfc:	82 ee       	ldi	r24, 0xE2	; 226
    2bfe:	05 c0       	rjmp	.+10     	; 0x2c0a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTU){
			stored_char = LCD_CHAR_UMLAUTU;
    2c00:	85 ef       	ldi	r24, 0xF5	; 245
    2c02:	03 c0       	rjmp	.+6      	; 0x2c0a <lcd_message_clear+0x58>
		} else if (stored_char == LCD_CHARREPL_UMLAUTO){
			stored_char = LCD_CHAR_UMLAUTO;
    2c04:	8f ee       	ldi	r24, 0xEF	; 239
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
    2c06:	01 c0       	rjmp	.+2      	; 0x2c0a <lcd_message_clear+0x58>
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
    2c08:	81 ee       	ldi	r24, 0xE1	; 225
    2c0a:	d5 dd       	rcall	.-1110   	; 0x27b6 <lcd_write_character>
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2c0c:	df 5f       	subi	r29, 0xFF	; 255
		uint8_t stored_char = lcd_buffer[lcdBufferPos++];
    2c0e:	c1 2f       	mov	r28, r17
void lcd_message_clear(){
	// restores lcd content from buffer. Used after message has been displayed some time
	uint8_t saveCursor = lcd_cursorPos;
	uint8_t lcdBufferPos = getCursorFromLCDRAMcursor(MENU_LCD_CURSOR_MAINMESSAGE);
	lcd_goto(MENU_LCD_CURSOR_MAINMESSAGE);
	for (uint8_t i = 0; i < MENU_LCD_LEN_MAINMESSAGE; i++){
    2c10:	d4 31       	cpi	r29, 0x14	; 20
		} else if (stored_char == LCD_CHARREPL_UMLAUTA){
			stored_char = LCD_CHAR_UMLAUTA;
		} // other chars replaced by  ' ' are not translated back
		lcd_write_character(stored_char);
	}
	lcd_goto(saveCursor);
    2c12:	e0 f2       	brcs	.-72     	; 0x2bcc <lcd_message_clear+0x1a>
    2c14:	80 2f       	mov	r24, r16
    2c16:	5b de       	rcall	.-842    	; 0x28ce <lcd_goto>
	if 	(lcd_saveCursorIsOn == TRUE){
    2c18:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <lcd_saveCursorIsOn>
		lcd_cursosblink();
    2c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c1e:	11 f4       	brne	.+4      	; 0x2c24 <lcd_message_clear+0x72>
    2c20:	bd df       	rcall	.-134    	; 0x2b9c <lcd_cursosblink>
	} else {
		lcd_cursoroff();
    2c22:	01 c0       	rjmp	.+2      	; 0x2c26 <lcd_message_clear+0x74>
    2c24:	c1 df       	rcall	.-126    	; 0x2ba8 <lcd_cursoroff>
	}
	lcd_displayingMessage = FALSE;
    2c26:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <lcd_displayingMessage>
}
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	08 95       	ret

00002c34 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2c34:	88 ef       	ldi	r24, 0xF8	; 248
    2c36:	93 e0       	ldi	r25, 0x03	; 3
    2c38:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2c3c:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2c40:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2c44:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2c48:	08 95       	ret

00002c4a <log_count>:
    2c4a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2c4e:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2c52:	20 91 8a 05 	lds	r18, 0x058A	; 0x80058a <pLogStart>
    2c56:	30 91 8b 05 	lds	r19, 0x058B	; 0x80058b <pLogStart+0x1>
    2c5a:	82 17       	cp	r24, r18
    2c5c:	93 07       	cpc	r25, r19
    2c5e:	48 f0       	brcs	.+18     	; 0x2c72 <log_count+0x28>
    2c60:	82 1b       	sub	r24, r18
    2c62:	93 0b       	sbc	r25, r19
    2c64:	95 95       	asr	r25
    2c66:	87 95       	ror	r24
    2c68:	9d ec       	ldi	r25, 0xCD	; 205
    2c6a:	89 9f       	mul	r24, r25
    2c6c:	80 2d       	mov	r24, r0
    2c6e:	11 24       	eor	r1, r1
    2c70:	08 95       	ret
    2c72:	80 57       	subi	r24, 0x70	; 112
    2c74:	9e 4f       	sbci	r25, 0xFE	; 254
    2c76:	82 1b       	sub	r24, r18
    2c78:	93 0b       	sbc	r25, r19
    2c7a:	95 95       	asr	r25
    2c7c:	87 95       	ror	r24
    2c7e:	9d ec       	ldi	r25, 0xCD	; 205
    2c80:	89 9f       	mul	r24, r25
    2c82:	80 2d       	mov	r24, r0
    2c84:	11 24       	eor	r1, r1
    2c86:	08 95       	ret

00002c88 <log_getLog>:
    2c88:	cf 93       	push	r28
    2c8a:	c8 2f       	mov	r28, r24
    2c8c:	de df       	rcall	.-68     	; 0x2c4a <log_count>
    2c8e:	c8 17       	cp	r28, r24
    2c90:	f8 f4       	brcc	.+62     	; 0x2cd0 <log_getLog+0x48>
    2c92:	40 91 8a 05 	lds	r20, 0x058A	; 0x80058a <pLogStart>
    2c96:	50 91 8b 05 	lds	r21, 0x058B	; 0x80058b <pLogStart+0x1>
    2c9a:	8c 2f       	mov	r24, r28
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	9c 01       	movw	r18, r24
    2ca0:	22 0f       	add	r18, r18
    2ca2:	33 1f       	adc	r19, r19
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	28 0f       	add	r18, r24
    2cb2:	39 1f       	adc	r19, r25
    2cb4:	ca 01       	movw	r24, r20
    2cb6:	82 0f       	add	r24, r18
    2cb8:	93 1f       	adc	r25, r19
    2cba:	65 e0       	ldi	r22, 0x05	; 5
    2cbc:	8e 37       	cpi	r24, 0x7E	; 126
    2cbe:	96 07       	cpc	r25, r22
    2cc0:	49 f0       	breq	.+18     	; 0x2cd4 <log_getLog+0x4c>
    2cc2:	40 f0       	brcs	.+16     	; 0x2cd4 <log_getLog+0x4c>
    2cc4:	20 59       	subi	r18, 0x90	; 144
    2cc6:	31 40       	sbci	r19, 0x01	; 1
    2cc8:	ca 01       	movw	r24, r20
    2cca:	82 0f       	add	r24, r18
    2ccc:	93 1f       	adc	r25, r19
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <log_getLog+0x4c>
    2cd0:	80 e0       	ldi	r24, 0x00	; 0
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	cf 91       	pop	r28
    2cd6:	08 95       	ret

00002cd8 <log_getErrorText>:
    2cd8:	d7 df       	rcall	.-82     	; 0x2c88 <log_getLog>
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	f1 f1       	breq	.+124    	; 0x2d5a <log_getErrorText+0x82>
    2cde:	fc 01       	movw	r30, r24
    2ce0:	36 81       	ldd	r19, Z+6	; 0x06
    2ce2:	67 81       	ldd	r22, Z+7	; 0x07
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	34 c0       	rjmp	.+104    	; 0x2d50 <log_getErrorText+0x78>
    2ce8:	42 2f       	mov	r20, r18
    2cea:	50 e0       	ldi	r21, 0x00	; 0
    2cec:	fa 01       	movw	r30, r20
    2cee:	ee 0f       	add	r30, r30
    2cf0:	ff 1f       	adc	r31, r31
    2cf2:	cf 01       	movw	r24, r30
    2cf4:	88 0f       	add	r24, r24
    2cf6:	99 1f       	adc	r25, r25
    2cf8:	88 0f       	add	r24, r24
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	e8 0f       	add	r30, r24
    2d02:	f9 1f       	adc	r31, r25
    2d04:	e6 55       	subi	r30, 0x56	; 86
    2d06:	fe 4f       	sbci	r31, 0xFE	; 254
    2d08:	84 91       	lpm	r24, Z
    2d0a:	38 13       	cpse	r19, r24
    2d0c:	20 c0       	rjmp	.+64     	; 0x2d4e <log_getErrorText+0x76>
    2d0e:	fa 01       	movw	r30, r20
    2d10:	ee 0f       	add	r30, r30
    2d12:	ff 1f       	adc	r31, r31
    2d14:	cf 01       	movw	r24, r30
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	e8 0f       	add	r30, r24
    2d24:	f9 1f       	adc	r31, r25
    2d26:	e5 55       	subi	r30, 0x55	; 85
    2d28:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2a:	84 91       	lpm	r24, Z
    2d2c:	68 13       	cpse	r22, r24
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <log_getErrorText+0x76>
    2d30:	44 0f       	add	r20, r20
    2d32:	55 1f       	adc	r21, r21
    2d34:	ca 01       	movw	r24, r20
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	48 0f       	add	r20, r24
    2d44:	59 1f       	adc	r21, r25
    2d46:	ca 01       	movw	r24, r20
    2d48:	84 55       	subi	r24, 0x54	; 84
    2d4a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d4c:	08 95       	ret
    2d4e:	2f 5f       	subi	r18, 0xFF	; 255
    2d50:	22 31       	cpi	r18, 0x12	; 18
    2d52:	50 f2       	brcs	.-108    	; 0x2ce8 <log_getErrorText+0x10>
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	08 95       	ret
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	08 95       	ret

00002d60 <logCheckUnreadErrorLogs>:
    2d60:	cf 93       	push	r28
    2d62:	73 df       	rcall	.-282    	; 0x2c4a <log_count>
    2d64:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <log_unreadErrors>
    2d68:	81 11       	cpse	r24, r1
    2d6a:	14 c0       	rjmp	.+40     	; 0x2d94 <logCheckUnreadErrorLogs+0x34>
    2d6c:	17 c0       	rjmp	.+46     	; 0x2d9c <logCheckUnreadErrorLogs+0x3c>
    2d6e:	8c 2f       	mov	r24, r28
    2d70:	8b df       	rcall	.-234    	; 0x2c88 <log_getLog>
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	61 f0       	breq	.+24     	; 0x2d8e <logCheckUnreadErrorLogs+0x2e>
    2d76:	fc 01       	movw	r30, r24
    2d78:	24 81       	ldd	r18, Z+4	; 0x04
    2d7a:	20 32       	cpi	r18, 0x20	; 32
    2d7c:	51 f0       	breq	.+20     	; 0x2d92 <logCheckUnreadErrorLogs+0x32>
    2d7e:	95 81       	ldd	r25, Z+5	; 0x05
    2d80:	8c 2f       	mov	r24, r28
    2d82:	95 34       	cpi	r25, 0x45	; 69
    2d84:	39 f4       	brne	.+14     	; 0x2d94 <logCheckUnreadErrorLogs+0x34>
    2d86:	8f ef       	ldi	r24, 0xFF	; 255
    2d88:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <log_unreadErrors>
    2d8c:	07 c0       	rjmp	.+14     	; 0x2d9c <logCheckUnreadErrorLogs+0x3c>
    2d8e:	8c 2f       	mov	r24, r28
    2d90:	01 c0       	rjmp	.+2      	; 0x2d94 <logCheckUnreadErrorLogs+0x34>
    2d92:	8c 2f       	mov	r24, r28
    2d94:	cf ef       	ldi	r28, 0xFF	; 255
    2d96:	c8 0f       	add	r28, r24
    2d98:	81 11       	cpse	r24, r1
    2d9a:	e9 cf       	rjmp	.-46     	; 0x2d6e <logCheckUnreadErrorLogs+0xe>
    2d9c:	cf 91       	pop	r28
    2d9e:	08 95       	ret

00002da0 <log_getShortTextFromPtr>:
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	09 f4       	brne	.+2      	; 0x2dac <log_getShortTextFromPtr+0xc>
    2daa:	7b c0       	rjmp	.+246    	; 0x2ea2 <log_getShortTextFromPtr+0x102>
    2dac:	16 2f       	mov	r17, r22
    2dae:	ec 01       	movw	r28, r24
    2db0:	8b 81       	ldd	r24, Y+3	; 0x03
    2db2:	88 23       	and	r24, r24
    2db4:	79 f0       	breq	.+30     	; 0x2dd4 <log_getShortTextFromPtr+0x34>
    2db6:	60 ed       	ldi	r22, 0xD0	; 208
    2db8:	73 e0       	ldi	r23, 0x03	; 3
    2dba:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	6f 5f       	subi	r22, 0xFF	; 255
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	28 e6       	ldi	r18, 0x68	; 104
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	20 83       	st	Z, r18
    2dca:	8a 81       	ldd	r24, Y+2	; 0x02
    2dcc:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	2f c0       	rjmp	.+94     	; 0x2e32 <log_getShortTextFromPtr+0x92>
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	88 23       	and	r24, r24
    2dd8:	79 f0       	breq	.+30     	; 0x2df8 <log_getShortTextFromPtr+0x58>
    2dda:	60 ed       	ldi	r22, 0xD0	; 208
    2ddc:	73 e0       	ldi	r23, 0x03	; 3
    2dde:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    2de2:	bc 01       	movw	r22, r24
    2de4:	6f 5f       	subi	r22, 0xFF	; 255
    2de6:	7f 4f       	sbci	r23, 0xFF	; 255
    2de8:	2d e6       	ldi	r18, 0x6D	; 109
    2dea:	fc 01       	movw	r30, r24
    2dec:	20 83       	st	Z, r18
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    2df4:	dc 01       	movw	r26, r24
    2df6:	1d c0       	rjmp	.+58     	; 0x2e32 <log_getShortTextFromPtr+0x92>
    2df8:	60 ed       	ldi	r22, 0xD0	; 208
    2dfa:	73 e0       	ldi	r23, 0x03	; 3
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    2e02:	fc 01       	movw	r30, r24
    2e04:	83 e7       	ldi	r24, 0x73	; 115
    2e06:	80 83       	st	Z, r24
    2e08:	98 81       	ld	r25, Y
    2e0a:	99 0f       	add	r25, r25
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	02 c0       	rjmp	.+4      	; 0x2e14 <log_getShortTextFromPtr+0x74>
    2e10:	99 51       	subi	r25, 0x19	; 25
    2e12:	2f 5f       	subi	r18, 0xFF	; 255
    2e14:	99 31       	cpi	r25, 0x19	; 25
    2e16:	e0 f7       	brcc	.-8      	; 0x2e10 <log_getShortTextFromPtr+0x70>
    2e18:	20 5d       	subi	r18, 0xD0	; 208
    2e1a:	21 83       	std	Z+1, r18	; 0x01
    2e1c:	99 0f       	add	r25, r25
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <log_getShortTextFromPtr+0x86>
    2e22:	95 50       	subi	r25, 0x05	; 5
    2e24:	2f 5f       	subi	r18, 0xFF	; 255
    2e26:	95 30       	cpi	r25, 0x05	; 5
    2e28:	e0 f7       	brcc	.-8      	; 0x2e22 <log_getShortTextFromPtr+0x82>
    2e2a:	df 01       	movw	r26, r30
    2e2c:	13 96       	adiw	r26, 0x03	; 3
    2e2e:	20 5d       	subi	r18, 0xD0	; 208
    2e30:	22 83       	std	Z+2, r18	; 0x02
    2e32:	9c 81       	ldd	r25, Y+4	; 0x04
    2e34:	90 34       	cpi	r25, 0x40	; 64
    2e36:	51 f0       	breq	.+20     	; 0x2e4c <log_getShortTextFromPtr+0xac>
    2e38:	90 38       	cpi	r25, 0x80	; 128
    2e3a:	19 f0       	breq	.+6      	; 0x2e42 <log_getShortTextFromPtr+0xa2>
    2e3c:	90 32       	cpi	r25, 0x20	; 32
    2e3e:	81 f4       	brne	.+32     	; 0x2e60 <log_getShortTextFromPtr+0xc0>
    2e40:	0a c0       	rjmp	.+20     	; 0x2e56 <log_getShortTextFromPtr+0xb6>
    2e42:	fd 01       	movw	r30, r26
    2e44:	31 96       	adiw	r30, 0x01	; 1
    2e46:	8a e2       	ldi	r24, 0x2A	; 42
    2e48:	8c 93       	st	X, r24
    2e4a:	0e c0       	rjmp	.+28     	; 0x2e68 <log_getShortTextFromPtr+0xc8>
    2e4c:	fd 01       	movw	r30, r26
    2e4e:	31 96       	adiw	r30, 0x01	; 1
    2e50:	85 ea       	ldi	r24, 0xA5	; 165
    2e52:	8c 93       	st	X, r24
    2e54:	09 c0       	rjmp	.+18     	; 0x2e68 <log_getShortTextFromPtr+0xc8>
    2e56:	fd 01       	movw	r30, r26
    2e58:	31 96       	adiw	r30, 0x01	; 1
    2e5a:	80 e2       	ldi	r24, 0x20	; 32
    2e5c:	8c 93       	st	X, r24
    2e5e:	04 c0       	rjmp	.+8      	; 0x2e68 <log_getShortTextFromPtr+0xc8>
    2e60:	fd 01       	movw	r30, r26
    2e62:	31 96       	adiw	r30, 0x01	; 1
    2e64:	8f e3       	ldi	r24, 0x3F	; 63
    2e66:	8c 93       	st	X, r24
    2e68:	bf 01       	movw	r22, r30
    2e6a:	6f 5f       	subi	r22, 0xFF	; 255
    2e6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	80 83       	st	Z, r24
    2e72:	8e 81       	ldd	r24, Y+6	; 0x06
    2e74:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    2e78:	bc 01       	movw	r22, r24
    2e7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e7c:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    2e80:	bc 01       	movw	r22, r24
    2e82:	6f 5f       	subi	r22, 0xFF	; 255
    2e84:	7f 4f       	sbci	r23, 0xFF	; 255
    2e86:	2d e2       	ldi	r18, 0x2D	; 45
    2e88:	fc 01       	movw	r30, r24
    2e8a:	20 83       	st	Z, r18
    2e8c:	88 85       	ldd	r24, Y+8	; 0x08
    2e8e:	99 85       	ldd	r25, Y+9	; 0x09
    2e90:	0e 94 75 3d 	call	0x7aea	; 0x7aea <putChar_word>
    2e94:	fc 01       	movw	r30, r24
    2e96:	10 82       	st	Z, r1
    2e98:	1f 3f       	cpi	r17, 0xFF	; 255
    2e9a:	41 f0       	breq	.+16     	; 0x2eac <log_getShortTextFromPtr+0x10c>
    2e9c:	1c 83       	std	Y+4, r17	; 0x04
    2e9e:	60 df       	rcall	.-320    	; 0x2d60 <logCheckUnreadErrorLogs>
    2ea0:	05 c0       	rjmp	.+10     	; 0x2eac <log_getShortTextFromPtr+0x10c>
    2ea2:	e0 ed       	ldi	r30, 0xD0	; 208
    2ea4:	f3 e0       	ldi	r31, 0x03	; 3
    2ea6:	8d e2       	ldi	r24, 0x2D	; 45
    2ea8:	80 83       	st	Z, r24
    2eaa:	11 82       	std	Z+1, r1	; 0x01
    2eac:	80 ed       	ldi	r24, 0xD0	; 208
    2eae:	93 e0       	ldi	r25, 0x03	; 3
    2eb0:	df 91       	pop	r29
    2eb2:	cf 91       	pop	r28
    2eb4:	1f 91       	pop	r17
    2eb6:	08 95       	ret

00002eb8 <log_put>:
    2eb8:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2ebc:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2ec0:	a4 e6       	ldi	r26, 0x64	; 100
    2ec2:	b2 e0       	ldi	r27, 0x02	; 2
    2ec4:	9c 91       	ld	r25, X
    2ec6:	90 83       	st	Z, r25
    2ec8:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2ecc:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2ed0:	11 96       	adiw	r26, 0x01	; 1
    2ed2:	9c 91       	ld	r25, X
    2ed4:	11 97       	sbiw	r26, 0x01	; 1
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <pLogEnd>
    2edc:	f0 91 89 05 	lds	r31, 0x0589	; 0x800589 <pLogEnd+0x1>
    2ee0:	12 96       	adiw	r26, 0x02	; 2
    2ee2:	9c 91       	ld	r25, X
    2ee4:	12 97       	sbiw	r26, 0x02	; 2
    2ee6:	92 83       	std	Z+2, r25	; 0x02
    2ee8:	13 96       	adiw	r26, 0x03	; 3
    2eea:	9c 91       	ld	r25, X
    2eec:	93 83       	std	Z+3, r25	; 0x03
    2eee:	25 83       	std	Z+5, r18	; 0x05
    2ef0:	86 83       	std	Z+6, r24	; 0x06
    2ef2:	67 83       	std	Z+7, r22	; 0x07
    2ef4:	51 87       	std	Z+9, r21	; 0x09
    2ef6:	40 87       	std	Z+8, r20	; 0x08
    2ef8:	80 e8       	ldi	r24, 0x80	; 128
    2efa:	84 83       	std	Z+4, r24	; 0x04
    2efc:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <serUSB_Active>
    2f00:	8f 3f       	cpi	r24, 0xFF	; 255
    2f02:	81 f4       	brne	.+32     	; 0x2f24 <log_put+0x6c>
    2f04:	84 ea       	ldi	r24, 0xA4	; 164
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    2f0c:	6f ef       	ldi	r22, 0xFF	; 255
    2f0e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2f12:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2f16:	44 df       	rcall	.-376    	; 0x2da0 <log_getShortTextFromPtr>
    2f18:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    2f1c:	82 eb       	ldi	r24, 0xB2	; 178
    2f1e:	94 e1       	ldi	r25, 0x14	; 20
    2f20:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    2f24:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pLogEnd>
    2f28:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pLogEnd+0x1>
    2f2c:	0a 96       	adiw	r24, 0x0a	; 10
    2f2e:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2f32:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2f36:	8e 57       	subi	r24, 0x7E	; 126
    2f38:	95 40       	sbci	r25, 0x05	; 5
    2f3a:	39 f0       	breq	.+14     	; 0x2f4a <log_put+0x92>
    2f3c:	30 f0       	brcs	.+12     	; 0x2f4a <log_put+0x92>
    2f3e:	88 ef       	ldi	r24, 0xF8	; 248
    2f40:	93 e0       	ldi	r25, 0x03	; 3
    2f42:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pLogEnd+0x1>
    2f46:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pLogEnd>
    2f4a:	20 91 88 05 	lds	r18, 0x0588	; 0x800588 <pLogEnd>
    2f4e:	30 91 89 05 	lds	r19, 0x0589	; 0x800589 <pLogEnd+0x1>
    2f52:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pLogStart>
    2f56:	90 91 8b 05 	lds	r25, 0x058B	; 0x80058b <pLogStart+0x1>
    2f5a:	28 17       	cp	r18, r24
    2f5c:	39 07       	cpc	r19, r25
    2f5e:	79 f4       	brne	.+30     	; 0x2f7e <log_put+0xc6>
    2f60:	0a 96       	adiw	r24, 0x0a	; 10
    2f62:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2f66:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2f6a:	8e 57       	subi	r24, 0x7E	; 126
    2f6c:	95 40       	sbci	r25, 0x05	; 5
    2f6e:	39 f0       	breq	.+14     	; 0x2f7e <log_put+0xc6>
    2f70:	30 f0       	brcs	.+12     	; 0x2f7e <log_put+0xc6>
    2f72:	88 ef       	ldi	r24, 0xF8	; 248
    2f74:	93 e0       	ldi	r25, 0x03	; 3
    2f76:	90 93 8b 05 	sts	0x058B, r25	; 0x80058b <pLogStart+0x1>
    2f7a:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <pLogStart>
    2f7e:	08 95       	ret

00002f80 <log_putError>:
    2f80:	25 e4       	ldi	r18, 0x45	; 69
    2f82:	9a df       	rcall	.-204    	; 0x2eb8 <log_put>
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <log_unreadErrors>
    2f8a:	08 95       	ret

00002f8c <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2f8c:	cf 93       	push	r28
    2f8e:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2f90:	7b de       	rcall	.-778    	; 0x2c88 <log_getLog>
	if (pLogEntry != NULL){
    2f92:	00 97       	sbiw	r24, 0x00	; 0
    2f94:	19 f0       	breq	.+6      	; 0x2f9c <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2f96:	6c 2f       	mov	r22, r28
    2f98:	03 df       	rcall	.-506    	; 0x2da0 <log_getShortTextFromPtr>
    2f9a:	06 c0       	rjmp	.+12     	; 0x2fa8 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2f9c:	e0 ed       	ldi	r30, 0xD0	; 208
    2f9e:	f3 e0       	ldi	r31, 0x03	; 3
    2fa0:	8d e2       	ldi	r24, 0x2D	; 45
    2fa2:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2fa4:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2fa6:	cf 01       	movw	r24, r30
	}
    2fa8:	cf 91       	pop	r28
    2faa:	08 95       	ret

00002fac <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2fac:	aa db       	rcall	.-2220   	; 0x2702 <init_iopins>
	DEBUG_OUT_MAIN
	init_log();	// init error and event log
    2fae:	42 de       	rcall	.-892    	; 0x2c34 <init_log>
    2fb0:	0e 94 b0 3a 	call	0x7560	; 0x7560 <init_Serial0SerUSB>
	init_Serial0SerUSB(); // serial port to PC
    2fb4:	0e 94 33 2f 	call	0x5e66	; 0x5e66 <init_message>
	init_message(); // init keyboard message handling
    2fb8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <init_HwTimer>
	init_HwTimer(); // init timer interrupts and ports for module IO
    2fbc:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <init_Timers>
	init_Timers(); // init timers
    2fc0:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <init_ADC>
	init_ADC(); // init ADC variable and ports (for keyboard polling)
    2fc4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <init_Pipe>
	init_Pipe(); // init ports and vars for module IO
    2fc8:	0e 94 e7 38 	call	0x71ce	; 0x71ce <init_Serial1MIDI>
	init_Serial1MIDI(); // init serial IO for MIDI
    2fcc:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <init_PipeModules>
	init_PipeModules(); // find out which modules are working
    2fd0:	0e 94 01 34 	call	0x6802	; 0x6802 <init_Midi2Manual>
	init_Midi2Manual(); // init mapping midi in -> manuals
    2fd4:	0e 94 41 34 	call	0x6882	; 0x6882 <init_Manual2Midi>
	init_Manual2Midi(); // init mapping manuals -> midi out
    2fd8:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <init_Midi>
	init_Midi(); //  init midi handling
    2fdc:	0e 94 3e 30 	call	0x607c	; 0x607c <init_Registers>
	init_Registers(); // init mapping registers - modules
    2fe0:	0e 94 49 33 	call	0x6692	; 0x6692 <init_RegOut>
	init_RegOut(); // init mapping registers - display of registers
    2fe4:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <init_Manual2Module>
	init_Manual2Module(); // init mapping manuals - modules
    2fe8:	0e 94 d4 2d 	call	0x5ba8	; 0x5ba8 <init_SoftKeys>
	init_SoftKeys(); // init softkeys
    2fec:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2ff0:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <menu_TestModulePattern>
	INIT_MENU // reset menu


	// BOOT MESSAGE

	lcd_init (); // init lcd
    2ff4:	1a dc       	rcall	.-1996   	; 0x282a <lcd_init>
	lcd_initCG(); // init Character generator RAM in LCD
    2ff6:	b1 dd       	rcall	.-1182   	; 0x2b5a <lcd_initCG>
	lcd_clrscr (); // display boot message
    2ff8:	6f dc       	rcall	.-1826   	; 0x28d8 <lcd_clrscr>
	lcd_goto(LCD_LINE1+3);
    2ffa:	83 e4       	ldi	r24, 0x43	; 67
    2ffc:	68 dc       	rcall	.-1840   	; 0x28ce <lcd_goto>
	lcd_puts_P(prog_name);
    2ffe:	89 e0       	ldi	r24, 0x09	; 9
    3000:	93 e0       	ldi	r25, 0x03	; 3
    3002:	e0 dc       	rcall	.-1600   	; 0x29c4 <lcd_puts_P>
	lcd_goto(LCD_LINE2+7);
    3004:	8b e1       	ldi	r24, 0x1B	; 27
    3006:	63 dc       	rcall	.-1850   	; 0x28ce <lcd_goto>
    3008:	8a e6       	ldi	r24, 0x6A	; 106
	lcd_puts_P(sw_version);
    300a:	94 e1       	ldi	r25, 0x14	; 20
    300c:	db dc       	rcall	.-1610   	; 0x29c4 <lcd_puts_P>
    300e:	78 94       	sei
    3010:	2f ef       	ldi	r18, 0xFF	; 255
	sei(); // start timer, module handling, keyboard polling
    3012:	47 e9       	ldi	r20, 0x97	; 151
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3014:	8a e3       	ldi	r24, 0x3A	; 58
    3016:	21 50       	subi	r18, 0x01	; 1
    3018:	40 40       	sbci	r20, 0x00	; 0
    301a:	80 40       	sbci	r24, 0x00	; 0
    301c:	e1 f7       	brne	.-8      	; 0x3016 <main+0x6a>
    301e:	00 c0       	rjmp	.+0      	; 0x3020 <main+0x74>
    3020:	00 00       	nop
	_delay_ms(1200); // time to show booot message
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    3022:	0e 94 83 3b 	call	0x7706	; 0x7706 <init_Serial3SerESP>
	lcd_clrscr ();
    3026:	58 dc       	rcall	.-1872   	; 0x28d8 <lcd_clrscr>
    3028:	99 d8       	rcall	.-3790   	; 0x215c <module_StartPowerOn>

	// TURN ON POWER

	module_StartPowerOn(); // does not turn power on, but start power on cycle
    302a:	8f ef       	ldi	r24, 0xFF	; 255
    302c:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON // from now handle events of modules (key press etc)
    3030:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>

	menuNotActive = TRUE; // showing main screen
    3034:	8e ef       	ldi	r24, 0xFE	; 254
    3036:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    303a:	df ef       	ldi	r29, 0xFF	; 255
    303c:	20 91 28 14 	lds	r18, 0x1428	; 0x801428 <serESPRxInIndex>
    while (1)
    {
		DEBUG_OUT_MAIN
		// V0.60 read message from usart3 (esp)
		// --------------------------- ESP MESSAGE HANDLING --------------------------------------
		if SER_ESP_RX_BUFFER_NONEMPTY {
    3040:	30 91 29 14 	lds	r19, 0x1429	; 0x801429 <serESPRxInIndex+0x1>
    3044:	80 91 23 14 	lds	r24, 0x1423	; 0x801423 <serESPRxOutIndex>
    3048:	90 91 24 14 	lds	r25, 0x1424	; 0x801424 <serESPRxOutIndex+0x1>
    304c:	28 17       	cp	r18, r24
    304e:	39 07       	cpc	r19, r25
    3050:	09 f4       	brne	.+2      	; 0x3054 <main+0xa8>
    3052:	66 c0       	rjmp	.+204    	; 0x3120 <main+0x174>
    3054:	0e 94 ed 3b 	call	0x77da	; 0x77da <serial3SER_ESPReadRx>
			uint8_t esp_message = serial3SER_ESPReadRx();
    3058:	c8 2f       	mov	r28, r24
    305a:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
			messageFromESP = esp_message; // save for later transfer of LCD
    305e:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    3062:	8f e7       	ldi	r24, 0x7F	; 127
    3064:	8c 0f       	add	r24, r28
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    3066:	86 30       	cpi	r24, 0x06	; 6
    3068:	28 f4       	brcc	.+10     	; 0x3074 <main+0xc8>
    306a:	80 e8       	ldi	r24, 0x80	; 128
    306c:	8c 0f       	add	r24, r28
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    306e:	0e 94 3a 2f 	call	0x5e74	; 0x5e74 <message_push>
    3072:	56 c0       	rjmp	.+172    	; 0x3120 <main+0x174>
    3074:	c0 39       	cpi	r28, 0x90	; 144
    3076:	09 f0       	breq	.+2      	; 0x307a <main+0xce>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    3078:	53 c0       	rjmp	.+166    	; 0x3120 <main+0x174>
    307a:	80 91 1b 14 	lds	r24, 0x141B	; 0x80141b <serESPInBuffer>
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    307e:	80 39       	cpi	r24, 0x90	; 144
    3080:	09 f0       	breq	.+2      	; 0x3084 <main+0xd8>
    3082:	4e c0       	rjmp	.+156    	; 0x3120 <main+0x174>
    3084:	91 e0       	ldi	r25, 0x01	; 1
    3086:	e9 2f       	mov	r30, r25
    3088:	09 2e       	mov	r0, r25
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    308a:	00 0c       	add	r0, r0
    308c:	ff 0b       	sbc	r31, r31
    308e:	e5 5e       	subi	r30, 0xE5	; 229
    3090:	fb 4e       	sbci	r31, 0xEB	; 235
    3092:	80 81       	ld	r24, Z
    3094:	8d 33       	cpi	r24, 0x3D	; 61
    3096:	19 f0       	breq	.+6      	; 0x309e <main+0xf2>
    3098:	9f 5f       	subi	r25, 0xFF	; 255
    309a:	98 30       	cpi	r25, 0x08	; 8
							break;
						}
						i++;
    309c:	a4 f3       	brlt	.-24     	; 0x3086 <main+0xda>
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    309e:	98 30       	cpi	r25, 0x08	; 8
    30a0:	0c f0       	brlt	.+2      	; 0x30a4 <main+0xf8>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    30a2:	3e c0       	rjmp	.+124    	; 0x3120 <main+0x174>
    30a4:	89 2f       	mov	r24, r25
    30a6:	85 95       	asr	r24
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	06 c0       	rjmp	.+12     	; 0x30b8 <main+0x10c>
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    30ac:	e2 2f       	mov	r30, r18
    30ae:	f0 e0       	ldi	r31, 0x00	; 0
							serESPMidiTmp[j] = 0;
    30b0:	eb 58       	subi	r30, 0x8B	; 139
    30b2:	f9 4e       	sbci	r31, 0xE9	; 233
    30b4:	10 82       	st	Z, r1
    30b6:	2f 5f       	subi	r18, 0xFF	; 255
    30b8:	23 30       	cpi	r18, 0x03	; 3
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    30ba:	c0 f3       	brcs	.-16     	; 0x30ac <main+0x100>
    30bc:	2c c0       	rjmp	.+88     	; 0x3116 <main+0x16a>
    30be:	e9 2f       	mov	r30, r25
    30c0:	09 2e       	mov	r0, r25
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    30c2:	00 0c       	add	r0, r0
    30c4:	ff 0b       	sbc	r31, r31
    30c6:	e5 5e       	subi	r30, 0xE5	; 229
    30c8:	fb 4e       	sbci	r31, 0xEB	; 235
    30ca:	30 81       	ld	r19, Z
    30cc:	20 ed       	ldi	r18, 0xD0	; 208
    30ce:	23 0f       	add	r18, r19
    30d0:	2a 30       	cpi	r18, 0x0A	; 10
    30d2:	10 f0       	brcs	.+4      	; 0x30d8 <main+0x12c>
							if (asciiData > 9){
    30d4:	27 ed       	ldi	r18, 0xD7	; 215
    30d6:	23 0f       	add	r18, r19
								asciiData = asciiData - (0x0A - 'A' + '0');
    30d8:	a2 2f       	mov	r26, r18
    30da:	af 70       	andi	r26, 0x0F	; 15
							}
							asciiData &= 0x0F;
    30dc:	e5 e7       	ldi	r30, 0x75	; 117
    30de:	f6 e1       	ldi	r31, 0x16	; 22
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    30e0:	62 81       	ldd	r22, Z+2	; 0x02
    30e2:	20 e1       	ldi	r18, 0x10	; 16
    30e4:	62 9f       	mul	r22, r18
    30e6:	b0 01       	movw	r22, r0
    30e8:	11 24       	eor	r1, r1
    30ea:	41 81       	ldd	r20, Z+1	; 0x01
    30ec:	24 2f       	mov	r18, r20
    30ee:	22 95       	swap	r18
    30f0:	2f 70       	andi	r18, 0x0F	; 15
    30f2:	62 2b       	or	r22, r18
    30f4:	62 83       	std	Z+2, r22	; 0x02
    30f6:	20 e1       	ldi	r18, 0x10	; 16
    30f8:	42 9f       	mul	r20, r18
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    30fa:	a0 01       	movw	r20, r0
    30fc:	11 24       	eor	r1, r1
    30fe:	20 81       	ld	r18, Z
    3100:	32 2f       	mov	r19, r18
    3102:	32 95       	swap	r19
    3104:	3f 70       	andi	r19, 0x0F	; 15
    3106:	43 2b       	or	r20, r19
    3108:	41 83       	std	Z+1, r20	; 0x01
    310a:	40 e1       	ldi	r20, 0x10	; 16
    310c:	24 9f       	mul	r18, r20
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    310e:	90 01       	movw	r18, r0
    3110:	11 24       	eor	r1, r1
    3112:	2a 2b       	or	r18, r26
    3114:	20 83       	st	Z, r18
    3116:	91 50       	subi	r25, 0x01	; 1
    3118:	19 16       	cp	r1, r25
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    311a:	8c f2       	brlt	.-94     	; 0x30be <main+0x112>
    311c:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <proc_ESPmidi>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    3120:	0e 94 67 2f 	call	0x5ece	; 0x5ece <message_status>
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU HANDLING ----------------------
		if MESSAGE_PENDING {
    3124:	88 23       	and	r24, r24
    3126:	09 f4       	brne	.+2      	; 0x312a <main+0x17e>
    3128:	52 c0       	rjmp	.+164    	; 0x31ce <main+0x222>
    312a:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <lcd_displayingMessage>
			// key press has to be processed
			DEBUG_OUT_MENU
			if (lcd_displayingMessage == TRUE) {
    312e:	8f 3f       	cpi	r24, 0xFF	; 255
    3130:	09 f4       	brne	.+2      	; 0x3134 <main+0x188>
    3132:	3f dd       	rcall	.-1410   	; 0x2bb2 <lcd_message_clear>
				// if message is beeing displayed: first clear message
				lcd_message_clear();
    3134:	0e 94 4e 2f 	call	0x5e9c	; 0x5e9c <message_get>
			}
			uint8_t keyMessage = message_get();
    3138:	c8 2f       	mov	r28, r24
    313a:	86 38       	cpi	r24, 0x86	; 134
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    313c:	b1 f4       	brne	.+44     	; 0x316a <main+0x1be>
    313e:	0e 94 bc 38 	call	0x7178	; 0x7178 <midiSendAllNotesOff>
				// PANIC BUTTON
				midiSendAllNotesOff();
    3142:	0e 94 71 36 	call	0x6ce2	; 0x6ce2 <midi_AllManualsOff>
				midi_AllManualsOff();
    3146:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <midi_resetRegisters>
				midi_resetRegisters();
    314a:	0e 94 bb 2f 	call	0x5f76	; 0x5f76 <midi_CouplerReset>
				midi_CouplerReset();
    314e:	72 dd       	rcall	.-1308   	; 0x2c34 <init_log>
				init_log(); // clear log V 0.70
    3150:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <midiRxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    3154:	10 92 74 16 	sts	0x1674, r1	; 0x801674 <midiTxBuffUsage>
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    3158:	85 b1       	in	r24, 0x05	; 5
				POWER_ON
    315a:	80 64       	ori	r24, 0x40	; 64
    315c:	85 b9       	out	0x05, r24	; 5
    315e:	83 e1       	ldi	r24, 0x13	; 19
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    3160:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
    3164:	8e ee       	ldi	r24, 0xEE	; 238
				lcd_message_P(panicString);
    3166:	92 e0       	ldi	r25, 0x02	; 2
    3168:	88 dc       	rcall	.-1776   	; 0x2a7a <lcd_message_P>
    316a:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
			}
			if (menuNotActive == TRUE) {
    316e:	8f 3f       	cpi	r24, 0xFF	; 255
    3170:	f9 f4       	brne	.+62     	; 0x31b0 <main+0x204>
    3172:	8c 2f       	mov	r24, r28
    3174:	8f 73       	andi	r24, 0x3F	; 63
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    3176:	c5 30       	cpi	r28, 0x05	; 5
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    3178:	69 f4       	brne	.+26     	; 0x3194 <main+0x1e8>
    317a:	60 e0       	ldi	r22, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    317c:	70 e0       	ldi	r23, 0x00	; 0
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	0e 94 aa 22 	call	0x4554	; 0x4554 <menu_Init>
    3186:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <menu_InitLCD>
					menu_InitLCD(); //display menu
    318a:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    318e:	80 e0       	ldi	r24, 0x00	; 0
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    3190:	3b d8       	rcall	.-3978   	; 0x2208 <softKey_WantLong>
    3192:	1d c0       	rjmp	.+58     	; 0x31ce <main+0x222>
    3194:	9f ef       	ldi	r25, 0xFF	; 255
    3196:	98 0f       	add	r25, r24
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    3198:	94 30       	cpi	r25, 0x04	; 4
    319a:	c8 f4       	brcc	.+50     	; 0x31ce <main+0x222>
    319c:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <softKey_MessageKey_ToSoftKeyNr>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    31a0:	6c 2f       	mov	r22, r28
    31a2:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    31a6:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>
    31aa:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <softKeys_toLCD>
					softKeys_toLCD();
    31ae:	0f c0       	rjmp	.+30     	; 0x31ce <main+0x222>
    31b0:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    31b4:	81 11       	cpse	r24, r1
    31b6:	06 c0       	rjmp	.+12     	; 0x31c4 <main+0x218>
    31b8:	8c 2f       	mov	r24, r28
    31ba:	0e 94 83 2b 	call	0x5706	; 0x5706 <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    31be:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <menuNotActive>
    31c2:	05 c0       	rjmp	.+10     	; 0x31ce <main+0x222>
    31c4:	8d ef       	ldi	r24, 0xFD	; 253
    31c6:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    31ca:	0e 94 bb 29 	call	0x5376	; 0x5376 <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    31ce:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    31d2:	8f 3f       	cpi	r24, 0xFF	; 255
    31d4:	69 f4       	brne	.+26     	; 0x31f0 <main+0x244>
    31d6:	df 3f       	cpi	r29, 0xFF	; 255
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    31d8:	61 f4       	brne	.+24     	; 0x31f2 <main+0x246>
    31da:	0e 94 c8 2a 	call	0x5590	; 0x5590 <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    31de:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <softKeys_toLCD>
				softKeys_toLCD();
    31e2:	8f ef       	ldi	r24, 0xFF	; 255
				softKey_WantLong(TRUE);
    31e4:	11 d8       	rcall	.-4062   	; 0x2208 <softKey_WantLong>
    31e6:	8f ef       	ldi	r24, 0xFF	; 255
				prog_UpdDisplay = TRUE; // update program display
    31e8:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
    31ec:	d0 e0       	ldi	r29, 0x00	; 0
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    31ee:	01 c0       	rjmp	.+2      	; 0x31f2 <main+0x246>
    31f0:	df ef       	ldi	r29, 0xFF	; 255
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventually after next menu exit
    31f2:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <swTimer+0xe>
		}
		DEBUG_OUT_MAIN
		// ------------------------- TIMER_MESSAGE_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MESSAGE_LCDCLEAR) {
    31f6:	81 11       	cpse	r24, r1
    31f8:	04 c0       	rjmp	.+8      	; 0x3202 <main+0x256>
    31fa:	db dc       	rcall	.-1610   	; 0x2bb2 <lcd_message_clear>
			lcd_message_clear();
    31fc:	8f ef       	ldi	r24, 0xFF	; 255
    31fe:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <swTimer+0xe>
			TIMER_DEACTIVATE(TIMER_MESSAGE_LCDCLEAR)
    3202:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    3206:	81 11       	cpse	r24, r1
    3208:	0a c0       	rjmp	.+20     	; 0x321e <main+0x272>
    320a:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    320e:	88 23       	and	r24, r24
    3210:	19 f0       	breq	.+6      	; 0x3218 <main+0x26c>
    3212:	0e 94 bb 29 	call	0x5376	; 0x5376 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    3216:	03 c0       	rjmp	.+6      	; 0x321e <main+0x272>
    3218:	8f ef       	ldi	r24, 0xFF	; 255
    321a:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    321e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    3222:	81 11       	cpse	r24, r1
    3224:	1b c0       	rjmp	.+54     	; 0x325c <main+0x2b0>
    3226:	0e 94 be 10 	call	0x217c	; 0x217c <module_PowerControl>
			module_PowerControl(); //
    322a:	0e 94 f9 2e 	call	0x5df2	; 0x5df2 <menu_showPowerState>
			menu_showPowerState();
    322e:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
			if (menuNotActive == TRUE) {
    3232:	8f 3f       	cpi	r24, 0xFF	; 255
    3234:	99 f4       	brne	.+38     	; 0x325c <main+0x2b0>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    3236:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
				lcd_goto(LCD_LINE2);
    323a:	84 e1       	ldi	r24, 0x14	; 20
    323c:	48 db       	rcall	.-2416   	; 0x28ce <lcd_goto>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    323e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	21 f4       	brne	.+8      	; 0x324e <main+0x2a2>
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    3246:	87 ef       	ldi	r24, 0xF7	; 247
    3248:	92 e0       	ldi	r25, 0x02	; 2
    324a:	bc db       	rcall	.-2184   	; 0x29c4 <lcd_puts_P>
    324c:	05 c0       	rjmp	.+10     	; 0x3258 <main+0x2ac>
    324e:	82 31       	cpi	r24, 0x12	; 18
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    3250:	19 f4       	brne	.+6      	; 0x3258 <main+0x2ac>
    3252:	84 e1       	ldi	r24, 0x14	; 20
					lcd_blank(LCD_LINELEN);
    3254:	0e 94 cd 3e 	call	0x7d9a	; 0x7d9a <lcd_blank>
    3258:	8c 2f       	mov	r24, r28
				}
				lcd_goto(saveCursor);
    325a:	39 db       	rcall	.-2446   	; 0x28ce <lcd_goto>
    325c:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    3260:	9f e7       	ldi	r25, 0x7F	; 127
    3262:	98 0f       	add	r25, r24
    3264:	96 30       	cpi	r25, 0x06	; 6
    3266:	10 f0       	brcs	.+4      	; 0x326c <main+0x2c0>
    3268:	8e 3f       	cpi	r24, 0xFE	; 254
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    326a:	09 f5       	brne	.+66     	; 0x32ae <main+0x302>
    326c:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    3270:	8f 3f       	cpi	r24, 0xFF	; 255
    3272:	31 f4       	brne	.+12     	; 0x3280 <main+0x2d4>
    3274:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    3278:	3e db       	rcall	.-2436   	; 0x28f6 <getCursorFromLCDRAMcursor>
    327a:	0e 94 b7 3b 	call	0x776e	; 0x776e <serial3SER_ESPSend>
    327e:	03 c0       	rjmp	.+6      	; 0x3286 <main+0x2da>
    3280:	8f e7       	ldi	r24, 0x7F	; 127
    3282:	0e 94 b7 3b 	call	0x776e	; 0x776e <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    3286:	81 e8       	ldi	r24, 0x81	; 129
    3288:	0e 94 b7 3b 	call	0x776e	; 0x776e <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    328c:	c0 e0       	ldi	r28, 0x00	; 0
    328e:	ec e7       	ldi	r30, 0x7C	; 124
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    3290:	f3 e0       	ldi	r31, 0x03	; 3
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    3292:	08 c0       	rjmp	.+16     	; 0x32a4 <main+0x2f8>
    3294:	8f 01       	movw	r16, r30
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    3296:	0f 5f       	subi	r16, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    3298:	1f 4f       	sbci	r17, 0xFF	; 255
    329a:	80 81       	ld	r24, Z
    329c:	0e 94 b7 3b 	call	0x776e	; 0x776e <serial3SER_ESPSend>
    32a0:	cf 5f       	subi	r28, 0xFF	; 255
    32a2:	f8 01       	movw	r30, r16
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32a4:	c0 35       	cpi	r28, 0x50	; 80
				serial3SER_ESPSend(*pChar++);
    32a6:	b0 f3       	brcs	.-20     	; 0x3294 <main+0x2e8>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    32a8:	80 e8       	ldi	r24, 0x80	; 128
    32aa:	0e 94 b7 3b 	call	0x776e	; 0x776e <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    32ae:	8f ef       	ldi	r24, 0xFF	; 255
    32b0:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    32b4:	0e 94 cb 38 	call	0x7196	; 0x7196 <midi_CheckTxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // must we send active Sense if midi out was inactive for some time?
    32b8:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <midi_CheckRxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of missing incoming Active Sense
    32bc:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    32c0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
		// status line lin0 left corner: midi in display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)){
    32c4:	88 23       	and	r24, r24
    32c6:	29 f0       	breq	.+10     	; 0x32d2 <main+0x326>
    32c8:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
    32cc:	8f 3f       	cpi	r24, 0xFF	; 255
    32ce:	09 f0       	breq	.+2      	; 0x32d2 <main+0x326>
    32d0:	70 c0       	rjmp	.+224    	; 0x33b2 <main+0x406>
    32d2:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
			if (prog_Display > PROGR_MAX) {
    32d6:	80 34       	cpi	r24, 0x40	; 64
    32d8:	08 f4       	brcc	.+2      	; 0x32dc <main+0x330>
    32da:	6b c0       	rjmp	.+214    	; 0x33b2 <main+0x406>
				// only if timer for midi in is not running at all (or just has elapsed)
				if (midiLastInNote != MIDI_NOTE_NONE) {
    32dc:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
    32e0:	8f 3f       	cpi	r24, 0xFF	; 255
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    32e2:	91 f1       	breq	.+100    	; 0x3348 <main+0x39c>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	f3 da       	rcall	.-2586   	; 0x28ce <lcd_goto>
					if (midiLastInManual == MANUAL_NONE) {
    32e8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    32ec:	8f 3f       	cpi	r24, 0xFF	; 255
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    32ee:	69 f4       	brne	.+26     	; 0x330a <main+0x35e>
    32f0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <midiLastInChannel>
    32f4:	0e 94 aa 3e 	call	0x7d54	; 0x7d54 <lcd_ChannelOut>
						lcd_putc('?');
    32f8:	8f e3       	ldi	r24, 0x3F	; 63
						lcd_noteOut(midiLastInNote);
    32fa:	13 db       	rcall	.-2522   	; 0x2922 <lcd_putc>
    32fc:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
						lcd_putc(' ');
    3300:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <lcd_noteOut>
    3304:	80 e2       	ldi	r24, 0x20	; 32
    3306:	0d db       	rcall	.-2534   	; 0x2922 <lcd_putc>
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    3308:	0c c0       	rjmp	.+24     	; 0x3322 <main+0x376>
    330a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <midiLastInNote>
    330e:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <lcd_noteOut>
						lcd_putc(MENU_MIDI_IO_SIGN);
    3312:	8e e7       	ldi	r24, 0x7E	; 126
    3314:	06 db       	rcall	.-2548   	; 0x2922 <lcd_putc>
						lcd_ManualOutDec(midiLastInManual);
    3316:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <midiLastInManual>
    331a:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <lcd_ManualOutDec>
						lcd_putc(' ');
    331e:	80 e2       	ldi	r24, 0x20	; 32
    3320:	00 db       	rcall	.-2560   	; 0x2922 <lcd_putc>
    3322:	8c 2f       	mov	r24, r28
					}
					lcd_goto(oldcursor);
    3324:	d4 da       	rcall	.-2648   	; 0x28ce <lcd_goto>
    3326:	8f ef       	ldi	r24, 0xFF	; 255
					midiLastInNote = MIDI_NOTE_NONE;
    3328:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <midiLastInNote>
					// now start timer
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    332c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    332e:	f8 94       	cli
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	06 c0       	rjmp	.+12     	; 0x3340 <main+0x394>
    3334:	e0 e5       	ldi	r30, 0x50	; 80
    3336:	f2 e0       	ldi	r31, 0x02	; 2
    3338:	83 e2       	ldi	r24, 0x23	; 35
    333a:	80 87       	std	Z+8, r24	; 0x08
    333c:	11 86       	std	Z+9, r1	; 0x09
    333e:	80 e0       	ldi	r24, 0x00	; 0
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    3340:	81 11       	cpse	r24, r1
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    3342:	f8 cf       	rjmp	.-16     	; 0x3334 <main+0x388>
    3344:	9f bf       	out	0x3f, r25	; 63
    3346:	35 c0       	rjmp	.+106    	; 0x33b2 <main+0x406>
    3348:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    334c:	8f 3f       	cpi	r24, 0xFF	; 255
    334e:	21 f1       	breq	.+72     	; 0x3398 <main+0x3ec>
					lcd_putc('p');
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	bd da       	rcall	.-2694   	; 0x28ce <lcd_goto>
    3354:	80 e7       	ldi	r24, 0x70	; 112
					lcd_putc('A'+((midiLastProgram >> 3) & 0x07));
    3356:	e5 da       	rcall	.-2614   	; 0x2922 <lcd_putc>
    3358:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    335c:	86 95       	lsr	r24
    335e:	86 95       	lsr	r24
    3360:	86 95       	lsr	r24
    3362:	87 70       	andi	r24, 0x07	; 7
    3364:	8f 5b       	subi	r24, 0xBF	; 191
    3366:	dd da       	rcall	.-2630   	; 0x2922 <lcd_putc>
					lcd_putc('1'+(midiLastProgram & 0x07)); // V 0.81 show Prog Nr and Bank
    3368:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <midiLastProgram>
    336c:	87 70       	andi	r24, 0x07	; 7
    336e:	8f 5c       	subi	r24, 0xCF	; 207
    3370:	d8 da       	rcall	.-2640   	; 0x2922 <lcd_putc>
					//lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    3372:	8e e7       	ldi	r24, 0x7E	; 126
    3374:	d6 da       	rcall	.-2644   	; 0x2922 <lcd_putc>
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    3376:	8f ef       	ldi	r24, 0xFF	; 255
    3378:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <midiLastProgram>
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    337c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    337e:	f8 94       	cli
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	06 c0       	rjmp	.+12     	; 0x3390 <main+0x3e4>
    3384:	e0 e5       	ldi	r30, 0x50	; 80
    3386:	f2 e0       	ldi	r31, 0x02	; 2
    3388:	83 e2       	ldi	r24, 0x23	; 35
    338a:	80 87       	std	Z+8, r24	; 0x08
    338c:	11 86       	std	Z+9, r1	; 0x09
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	81 11       	cpse	r24, r1
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3392:	f8 cf       	rjmp	.-16     	; 0x3384 <main+0x3d8>
    __asm__ volatile ("" ::: "memory");
    3394:	9f bf       	out	0x3f, r25	; 63
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    3396:	0d c0       	rjmp	.+26     	; 0x33b2 <main+0x406>
    3398:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    339c:	81 11       	cpse	r24, r1
    339e:	09 c0       	rjmp	.+18     	; 0x33b2 <main+0x406>
					lcd_blank(6);
    33a0:	96 da       	rcall	.-2772   	; 0x28ce <lcd_goto>
    33a2:	86 e0       	ldi	r24, 0x06	; 6
    33a4:	0e 94 cd 3e 	call	0x7d9a	; 0x7d9a <lcd_blank>
					lcd_goto(oldcursor);
    33a8:	8c 2f       	mov	r24, r28
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    33aa:	91 da       	rcall	.-2782   	; 0x28ce <lcd_goto>
    33ac:	8f ef       	ldi	r24, 0xFF	; 255
    33ae:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <swTimer+0x8>
				}
			}
		}
		// status line lin0 right corner: midi out display
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    33b2:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    33b6:	8f 3f       	cpi	r24, 0xFF	; 255
    33b8:	21 f0       	breq	.+8      	; 0x33c2 <main+0x416>
    33ba:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    33be:	81 11       	cpse	r24, r1
			if (midiLastOutNote != MIDI_NOTE_NONE){
    33c0:	5c c0       	rjmp	.+184    	; 0x347a <main+0x4ce>
    33c2:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
    33c6:	8f 3f       	cpi	r24, 0xFF	; 255
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    33c8:	f9 f0       	breq	.+62     	; 0x3408 <main+0x45c>
    33ca:	8f e0       	ldi	r24, 0x0F	; 15
    33cc:	80 da       	rcall	.-2816   	; 0x28ce <lcd_goto>
				lcd_ManualOutDec(midiLastOutManual);
    33ce:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <midiLastOutManual>
    33d2:	0e 94 bb 3e 	call	0x7d76	; 0x7d76 <lcd_ManualOutDec>
				lcd_putc(MENU_MIDI_IO_SIGN);
    33d6:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_noteOut(midiLastOutNote);
    33d8:	a4 da       	rcall	.-2744   	; 0x2922 <lcd_putc>
    33da:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <midiLastOutNote>
    33de:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <lcd_noteOut>
				lcd_goto(oldcursor);
    33e2:	8c 2f       	mov	r24, r28
    33e4:	74 da       	rcall	.-2840   	; 0x28ce <lcd_goto>
				midiLastOutNote = MIDI_NOTE_NONE;
    33e6:	8f ef       	ldi	r24, 0xFF	; 255
    33e8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <midiLastOutNote>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    33ec:	9f b7       	in	r25, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	06 c0       	rjmp	.+12     	; 0x3400 <main+0x454>
    33f4:	e0 e5       	ldi	r30, 0x50	; 80
    33f6:	f2 e0       	ldi	r31, 0x02	; 2
    33f8:	88 e2       	ldi	r24, 0x28	; 40
    33fa:	82 87       	std	Z+10, r24	; 0x0a
    33fc:	13 86       	std	Z+11, r1	; 0x0b
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    __asm__ volatile ("" ::: "memory");
    3400:	81 11       	cpse	r24, r1
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    3402:	f8 cf       	rjmp	.-16     	; 0x33f4 <main+0x448>
    3404:	9f bf       	out	0x3f, r25	; 63
    3406:	39 c0       	rjmp	.+114    	; 0x347a <main+0x4ce>
    3408:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    340c:	8f 3f       	cpi	r24, 0xFF	; 255
    340e:	39 f1       	breq	.+78     	; 0x345e <main+0x4b2>
				lcd_putc('R');
    3410:	8f e0       	ldi	r24, 0x0F	; 15
    3412:	5d da       	rcall	.-2886   	; 0x28ce <lcd_goto>
    3414:	82 e5       	ldi	r24, 0x52	; 82
				lcd_dec2out((midi_RegisterChanged & ~REGISTER_WAS_SET)+1); // remove MSB, add 1 for user register numbers
    3416:	85 da       	rcall	.-2806   	; 0x2922 <lcd_putc>
    3418:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    341c:	8f 77       	andi	r24, 0x7F	; 127
    341e:	8f 5f       	subi	r24, 0xFF	; 255
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_REG_OFF : LCD_CHAR_REG_ON); // MSB = register was set
    3420:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <lcd_dec2out>
    3424:	80 91 59 09 	lds	r24, 0x0959	; 0x800959 <midi_RegisterChanged>
    3428:	88 23       	and	r24, r24
    342a:	14 f0       	brlt	.+4      	; 0x3430 <main+0x484>
    342c:	8a e0       	ldi	r24, 0x0A	; 10
    342e:	01 c0       	rjmp	.+2      	; 0x3432 <main+0x486>
				lcd_putc(' ');
    3430:	8b e0       	ldi	r24, 0x0B	; 11
    3432:	77 da       	rcall	.-2834   	; 0x2922 <lcd_putc>
    3434:	80 e2       	ldi	r24, 0x20	; 32
				lcd_goto(oldcursor);
    3436:	75 da       	rcall	.-2838   	; 0x2922 <lcd_putc>
    3438:	8c 2f       	mov	r24, r28
    343a:	49 da       	rcall	.-2926   	; 0x28ce <lcd_goto>
				midi_RegisterChanged = REGISTER_NONE;
    343c:	8f ef       	ldi	r24, 0xFF	; 255
    343e:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    3442:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3444:	f8 94       	cli
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	06 c0       	rjmp	.+12     	; 0x3456 <main+0x4aa>
    344a:	e0 e5       	ldi	r30, 0x50	; 80
    344c:	f2 e0       	ldi	r31, 0x02	; 2
    344e:	88 e2       	ldi	r24, 0x28	; 40
    3450:	82 87       	std	Z+10, r24	; 0x0a
    3452:	13 86       	std	Z+11, r1	; 0x0b
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	81 11       	cpse	r24, r1
    3458:	f8 cf       	rjmp	.-16     	; 0x344a <main+0x49e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    345a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    345c:	0e c0       	rjmp	.+28     	; 0x347a <main+0x4ce>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    345e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
    3462:	81 11       	cpse	r24, r1
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    3464:	0a c0       	rjmp	.+20     	; 0x347a <main+0x4ce>
    3466:	8f e0       	ldi	r24, 0x0F	; 15
    3468:	32 da       	rcall	.-2972   	; 0x28ce <lcd_goto>
				lcd_blank(5);
    346a:	85 e0       	ldi	r24, 0x05	; 5
    346c:	0e 94 cd 3e 	call	0x7d9a	; 0x7d9a <lcd_blank>
				lcd_goto(oldcursor);
    3470:	8c 2f       	mov	r24, r28
    3472:	2d da       	rcall	.-2982   	; 0x28ce <lcd_goto>
    3474:	8f ef       	ldi	r24, 0xFF	; 255
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    3476:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <swTimer+0xa>
    347a:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <menuNotActive>
			}
		}
		#endif
		//----------------------- program display line0 left corner------------------------
		if ((menuNotActive == TRUE) &&((prog_UpdDisplay == TRUE) || (TIMER_ELAPSED(TIMER_REGDISPLAY)))) {
    347e:	8f 3f       	cpi	r24, 0xFF	; 255
    3480:	71 f5       	brne	.+92     	; 0x34de <main+0x532>
    3482:	80 91 35 08 	lds	r24, 0x0835	; 0x800835 <prog_UpdDisplay>
    3486:	8f 3f       	cpi	r24, 0xFF	; 255
    3488:	21 f0       	breq	.+8      	; 0x3492 <main+0x4e6>
    348a:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <swTimer+0x12>
    348e:	81 11       	cpse	r24, r1
    3490:	26 c0       	rjmp	.+76     	; 0x34de <main+0x532>
    3492:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <prog_UpdDisplay>
			// 0.77: only if menu is not active!
			prog_UpdDisplay = FALSE;
    3496:	9f b7       	in	r25, 0x3f	; 63
			TIMER_SET(TIMER_REGDISPLAY,TIMER_REGDISPLAY_MS)
    3498:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	06 c0       	rjmp	.+12     	; 0x34aa <main+0x4fe>
    349e:	e0 e5       	ldi	r30, 0x50	; 80
    34a0:	f2 e0       	ldi	r31, 0x02	; 2
    34a2:	84 e1       	ldi	r24, 0x14	; 20
    34a4:	82 8b       	std	Z+18, r24	; 0x12
    34a6:	13 8a       	std	Z+19, r1	; 0x13
    34a8:	80 e0       	ldi	r24, 0x00	; 0
    34aa:	81 11       	cpse	r24, r1
    34ac:	f8 cf       	rjmp	.-16     	; 0x349e <main+0x4f2>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    34ae:	9f bf       	out	0x3f, r25	; 63
			lcd_goto(MENU_LCD_CURSOR_PROG);
    34b0:	0e da       	rcall	.-3044   	; 0x28ce <lcd_goto>
    34b2:	0e 94 28 33 	call	0x6650	; 0x6650 <prog_toLcd>
			prog_toLcd();
    34b6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
			if (pipe_PowerStatus != POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    34ba:	81 30       	cpi	r24, 0x01	; 1
    34bc:	81 f0       	breq	.+32     	; 0x34de <main+0x532>
    34be:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
				// only if not displaying message to release keys
				if (prog_Display <= PROGR_MAX) {
    34c2:	80 34       	cpi	r24, 0x40	; 64
    34c4:	50 f4       	brcc	.+20     	; 0x34da <main+0x52e>
    34c6:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
					// show register settings
					reg_toLCD(regShowHW);
    34ca:	0e 94 54 33 	call	0x66a8	; 0x66a8 <reg_toLCD>
    34ce:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <regShowHW>
					regShowHW = ~regShowHW; // alternate between SW output and HW read registers
    34d2:	80 95       	com	r24
    34d4:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <regShowHW>
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <main+0x532>
    34da:	0e 94 d8 33 	call	0x67b0	; 0x67b0 <reg_ClearOnLCD>
				} else {
					reg_ClearOnLCD();
    34de:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <time_UpTimeUpdated>
				}
			}
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    34e2:	8f 3f       	cpi	r24, 0xFF	; 255
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <main+0x53c>
    34e6:	7c c0       	rjmp	.+248    	; 0x35e0 <main+0x634>
			time_UpTimeUpdated = FALSE;
    34e8:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <time_UpTimeUpdated>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    34ec:	f0 90 cd 03 	lds	r15, 0x03CD	; 0x8003cd <lcd_cursorPos>
			uint8_t oldBlink = lcd_cursorIsOn;
    34f0:	c0 91 7b 03 	lds	r28, 0x037B	; 0x80037b <lcd_cursorIsOn>
			if (oldBlink == TRUE) {
    34f4:	cf 3f       	cpi	r28, 0xFF	; 255
				lcd_cursoroff();
    34f6:	09 f4       	brne	.+2      	; 0x34fa <main+0x54e>
    34f8:	57 db       	rcall	.-2386   	; 0x2ba8 <lcd_cursoroff>
			}
			char separator;
			if (*pTime == 0) {
    34fa:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <time_Uptime+0x3>
    34fe:	88 23       	and	r24, r24
    3500:	59 f0       	breq	.+22     	; 0x3518 <main+0x56c>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    3502:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <time_Uptime+0x1>
    3506:	80 fd       	sbrc	r24, 0
				// when displaying hr:min blink ":"
				separator = ':';
    3508:	0e c0       	rjmp	.+28     	; 0x3526 <main+0x57a>
    350a:	0f 2e       	mov	r0, r31
    350c:	fa e3       	ldi	r31, 0x3A	; 58
    350e:	ef 2e       	mov	r14, r31
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3510:	f0 2d       	mov	r31, r0
    3512:	07 e6       	ldi	r16, 0x67	; 103
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    3514:	12 e0       	ldi	r17, 0x02	; 2
    3516:	0c c0       	rjmp	.+24     	; 0x3530 <main+0x584>
    3518:	0f 2e       	mov	r0, r31
    351a:	fa e3       	ldi	r31, 0x3A	; 58
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    351c:	ef 2e       	mov	r14, r31
    351e:	f0 2d       	mov	r31, r0
    3520:	06 e6       	ldi	r16, 0x66	; 102
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    3522:	12 e0       	ldi	r17, 0x02	; 2
    3524:	05 c0       	rjmp	.+10     	; 0x3530 <main+0x584>
		}
		//------------------------- every second clock update line0 center ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3526:	68 94       	set
    3528:	ee 24       	eor	r14, r14
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    352a:	e5 f8       	bld	r14, 5
    352c:	07 e6       	ldi	r16, 0x67	; 103
    352e:	12 e0       	ldi	r17, 0x02	; 2
			lcd_dec2out(*(pTime--));
    3530:	87 e0       	ldi	r24, 0x07	; 7
    3532:	cd d9       	rcall	.-3174   	; 0x28ce <lcd_goto>
    3534:	f8 01       	movw	r30, r16
			lcd_putc(separator);
    3536:	80 81       	ld	r24, Z
    3538:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <lcd_dec2out>
			lcd_dec2out(*pTime);
    353c:	8e 2d       	mov	r24, r14
    353e:	f1 d9       	rcall	.-3102   	; 0x2922 <lcd_putc>
    3540:	f8 01       	movw	r30, r16
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    3542:	31 97       	sbiw	r30, 0x01	; 1
    3544:	80 81       	ld	r24, Z
			if (ovflCount > 0){
    3546:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <lcd_dec2out>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    354a:	40 91 79 16 	lds	r20, 0x1679	; 0x801679 <midiRxOvflCount>
    354e:	44 23       	and	r20, r20
    3550:	31 f0       	breq	.+12     	; 0x355e <main+0x5b2>
    3552:	50 e0       	ldi	r21, 0x00	; 0
				midiRxOvflCount = 0;
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	83 e0       	ldi	r24, 0x03	; 3
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    3558:	13 dd       	rcall	.-1498   	; 0x2f80 <log_putError>
    355a:	10 92 79 16 	sts	0x1679, r1	; 0x801679 <midiRxOvflCount>
			if (ovflCount > 0){
    355e:	40 91 80 16 	lds	r20, 0x1680	; 0x801680 <midiTxOvflCount>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    3562:	44 23       	and	r20, r20
    3564:	31 f0       	breq	.+12     	; 0x3572 <main+0x5c6>
    3566:	50 e0       	ldi	r21, 0x00	; 0
    3568:	61 e0       	ldi	r22, 0x01	; 1
				midiTxOvflCount = 0;
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	09 dd       	rcall	.-1518   	; 0x2f80 <log_putError>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    356e:	10 92 80 16 	sts	0x1680, r1	; 0x801680 <midiTxOvflCount>
    3572:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    3576:	84 ff       	sbrs	r24, 4
    3578:	02 c0       	rjmp	.+4      	; 0x357e <main+0x5d2>
    357a:	80 e2       	ldi	r24, 0x20	; 32
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <main+0x5d4>
    357e:	89 e0       	ldi	r24, 0x09	; 9
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    3580:	d0 d9       	rcall	.-3168   	; 0x2922 <lcd_putc>
    3582:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <log_unreadErrors>
    3586:	8f 3f       	cpi	r24, 0xFF	; 255
    3588:	11 f4       	brne	.+4      	; 0x358e <main+0x5e2>
    358a:	85 e4       	ldi	r24, 0x45	; 69
    358c:	01 c0       	rjmp	.+2      	; 0x3590 <main+0x5e4>
    358e:	80 e2       	ldi	r24, 0x20	; 32
    3590:	c8 d9       	rcall	.-3184   	; 0x2922 <lcd_putc>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    3592:	8f 2d       	mov	r24, r15
    3594:	9c d9       	rcall	.-3272   	; 0x28ce <lcd_goto>
			if (oldBlink == TRUE) {
    3596:	cf 3f       	cpi	r28, 0xFF	; 255
    3598:	09 f4       	brne	.+2      	; 0x359c <main+0x5f0>
				lcd_cursosblink();
    359a:	00 db       	rcall	.-2560   	; 0x2b9c <lcd_cursosblink>
    359c:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <swTimer+0x8>
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    35a0:	8f 3f       	cpi	r24, 0xFF	; 255
    35a2:	69 f4       	brne	.+26     	; 0x35be <main+0x612>
    35a4:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    35a6:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	06 c0       	rjmp	.+12     	; 0x35b8 <main+0x60c>
    35ac:	e0 e5       	ldi	r30, 0x50	; 80
    35ae:	f2 e0       	ldi	r31, 0x02	; 2
    35b0:	8d e7       	ldi	r24, 0x7D	; 125
    35b2:	80 87       	std	Z+8, r24	; 0x08
    35b4:	11 86       	std	Z+9, r1	; 0x09
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	81 11       	cpse	r24, r1
    35ba:	f8 cf       	rjmp	.-16     	; 0x35ac <main+0x600>
    35bc:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    35be:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <swTimer+0xa>
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    35c2:	8f 3f       	cpi	r24, 0xFF	; 255
    35c4:	69 f4       	brne	.+26     	; 0x35e0 <main+0x634>
    35c6:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    35c8:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	06 c0       	rjmp	.+12     	; 0x35da <main+0x62e>
    35ce:	e0 e5       	ldi	r30, 0x50	; 80
    35d0:	f2 e0       	ldi	r31, 0x02	; 2
    35d2:	8d e7       	ldi	r24, 0x7D	; 125
    35d4:	82 87       	std	Z+10, r24	; 0x0a
    35d6:	13 86       	std	Z+11, r1	; 0x0b
    35d8:	80 e0       	ldi	r24, 0x00	; 0
    35da:	81 11       	cpse	r24, r1
    35dc:	f8 cf       	rjmp	.-16     	; 0x35ce <main+0x622>
    35de:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    35e0:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <msgPipeOverflow>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    35e4:	8f 3f       	cpi	r24, 0xFF	; 255
    35e6:	39 f4       	brne	.+14     	; 0x35f6 <main+0x64a>
    35e8:	10 92 1a 08 	sts	0x081A, r1	; 0x80081a <msgPipeOverflow>
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    35ec:	40 e0       	ldi	r20, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	60 e0       	ldi	r22, 0x00	; 0
    35f2:	84 e0       	ldi	r24, 0x04	; 4
    35f4:	c5 dc       	rcall	.-1654   	; 0x2f80 <log_putError>
    35f6:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <midiRxInIndex>
		}
		DEBUG_OUT_MIDI
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    35fa:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    35fe:	98 17       	cp	r25, r24
    3600:	21 f0       	breq	.+8      	; 0x360a <main+0x65e>
    3602:	0e 94 e3 39 	call	0x73c6	; 0x73c6 <serial1MIDIReadRx>
			midiIn_Process(serial1MIDIReadRx());
    3606:	0e 94 03 37 	call	0x6e06	; 0x6e06 <midiIn_Process>
    360a:	0e 94 b1 2f 	call	0x5f62	; 0x5f62 <pipeMsgStatus>
		}
		//----------------------- PIPE KEY PROCESSING -> MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    360e:	8f 3f       	cpi	r24, 0xFF	; 255
    3610:	09 f0       	breq	.+2      	; 0x3614 <main+0x668>
    3612:	14 cd       	rjmp	.-1496   	; 0x303c <main+0x90>
    3614:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <pipeMsgGet>
			midiKeyPress_Process(pipeMsgGet()); // events from module read (->midi out, couplers)
    3618:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <midiKeyPress_Process>
    361c:	0f cd       	rjmp	.-1506   	; 0x303c <main+0x90>

0000361e <menu_enterWriteModule>:
    361e:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <menuModVal>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    3622:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <menuModVal+0x1>
    3626:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <menuModVal+0x2>
    362a:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <menuModVal+0x3>
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    3636:	02 c0       	rjmp	.+4      	; 0x363c <menu_enterWriteModule+0x1e>
    3638:	88 0f       	add	r24, r24
    363a:	99 1f       	adc	r25, r25
    363c:	0a 94       	dec	r0
    363e:	e2 f7       	brpl	.-8      	; 0x3638 <menu_enterWriteModule+0x1a>
    3640:	48 2f       	mov	r20, r24
    3642:	30 e0       	ldi	r19, 0x00	; 0
    3644:	e4 e6       	ldi	r30, 0x64	; 100
    3646:	f3 e0       	ldi	r31, 0x03	; 3
    3648:	22 c0       	rjmp	.+68     	; 0x368e <menu_enterWriteModule+0x70>
    364a:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <menuModVal>
    364e:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <menuModVal+0x1>
    3652:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <menuModVal+0x2>
    3656:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <menuModVal+0x3>
    365a:	88 0f       	add	r24, r24
    365c:	99 1f       	adc	r25, r25
    365e:	aa 1f       	adc	r26, r26
    3660:	bb 1f       	adc	r27, r27
    3662:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <menuModVal>
    3666:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <menuModVal+0x1>
    366a:	a0 93 d5 05 	sts	0x05D5, r26	; 0x8005d5 <menuModVal+0x2>
    366e:	b0 93 d6 05 	sts	0x05D6, r27	; 0x8005d6 <menuModVal+0x3>
    3672:	21 81       	ldd	r18, Z+1	; 0x01
    3674:	24 23       	and	r18, r20
    3676:	49 f0       	breq	.+18     	; 0x368a <menu_enterWriteModule+0x6c>
    3678:	81 60       	ori	r24, 0x01	; 1
    367a:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <menuModVal>
    367e:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <menuModVal+0x1>
    3682:	a0 93 d5 05 	sts	0x05D5, r26	; 0x8005d5 <menuModVal+0x2>
    3686:	b0 93 d6 05 	sts	0x05D6, r27	; 0x8005d6 <menuModVal+0x3>
    368a:	38 97       	sbiw	r30, 0x08	; 8
    368c:	3f 5f       	subi	r19, 0xFF	; 255
    368e:	30 32       	cpi	r19, 0x20	; 32
    3690:	e0 f2       	brcs	.-72     	; 0x364a <menu_enterWriteModule+0x2c>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	08 95       	ret

00003696 <menu_exitWriteModule>:
    3696:	40 91 d3 05 	lds	r20, 0x05D3	; 0x8005d3 <menuModVal>
    369a:	50 91 d4 05 	lds	r21, 0x05D4	; 0x8005d4 <menuModVal+0x1>
    369e:	60 91 d5 05 	lds	r22, 0x05D5	; 0x8005d5 <menuModVal+0x2>
    36a2:	70 91 d6 05 	lds	r23, 0x05D6	; 0x8005d6 <menuModVal+0x3>
    36a6:	85 30       	cpi	r24, 0x05	; 5
    36a8:	09 f5       	brne	.+66     	; 0x36ec <menu_exitWriteModule+0x56>
    36aa:	a1 e0       	ldi	r26, 0x01	; 1
    36ac:	b0 e0       	ldi	r27, 0x00	; 0
    36ae:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    36b2:	02 c0       	rjmp	.+4      	; 0x36b8 <menu_exitWriteModule+0x22>
    36b4:	aa 0f       	add	r26, r26
    36b6:	bb 1f       	adc	r27, r27
    36b8:	0a 94       	dec	r0
    36ba:	e2 f7       	brpl	.-8      	; 0x36b4 <menu_exitWriteModule+0x1e>
    36bc:	3a 2f       	mov	r19, r26
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	e4 e6       	ldi	r30, 0x64	; 100
    36c2:	f3 e0       	ldi	r31, 0x03	; 3
    36c4:	11 c0       	rjmp	.+34     	; 0x36e8 <menu_exitWriteModule+0x52>
    36c6:	77 23       	and	r23, r23
    36c8:	24 f4       	brge	.+8      	; 0x36d2 <menu_exitWriteModule+0x3c>
    36ca:	81 81       	ldd	r24, Z+1	; 0x01
    36cc:	83 2b       	or	r24, r19
    36ce:	81 83       	std	Z+1, r24	; 0x01
    36d0:	05 c0       	rjmp	.+10     	; 0x36dc <menu_exitWriteModule+0x46>
    36d2:	21 81       	ldd	r18, Z+1	; 0x01
    36d4:	8a 2f       	mov	r24, r26
    36d6:	80 95       	com	r24
    36d8:	82 23       	and	r24, r18
    36da:	81 83       	std	Z+1, r24	; 0x01
    36dc:	44 0f       	add	r20, r20
    36de:	55 1f       	adc	r21, r21
    36e0:	66 1f       	adc	r22, r22
    36e2:	77 1f       	adc	r23, r23
    36e4:	38 97       	sbiw	r30, 0x08	; 8
    36e6:	9f 5f       	subi	r25, 0xFF	; 255
    36e8:	90 32       	cpi	r25, 0x20	; 32
    36ea:	68 f3       	brcs	.-38     	; 0x36c6 <menu_exitWriteModule+0x30>
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	08 95       	ret

000036f0 <menuOnEnterModSel>:
    36f0:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    36f4:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    36f8:	3e 96       	adiw	r30, 0x0e	; 14
    36fa:	85 91       	lpm	r24, Z+
    36fc:	95 91       	lpm	r25, Z+
    36fe:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <menuVmodule>
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	08 95       	ret

00003706 <menuOnEnterMidiInCh>:
    3706:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    370a:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    370e:	3e 96       	adiw	r30, 0x0e	; 14
    3710:	85 91       	lpm	r24, Z+
    3712:	95 91       	lpm	r25, Z+
    3714:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVmidiChan>
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	08 95       	ret

0000371c <menuOnEnterMidiInSec>:
    371c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3720:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3724:	3e 96       	adiw	r30, 0x0e	; 14
    3726:	25 91       	lpm	r18, Z+
    3728:	35 91       	lpm	r19, Z+
    372a:	20 93 dd 05 	sts	0x05DD, r18	; 0x8005dd <menuVsection>
    372e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVmidiChan>
    3732:	8f 70       	andi	r24, 0x0F	; 15
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	23 70       	andi	r18, 0x03	; 3
    3738:	88 0f       	add	r24, r24
    373a:	99 1f       	adc	r25, r25
    373c:	88 0f       	add	r24, r24
    373e:	99 1f       	adc	r25, r25
    3740:	82 0f       	add	r24, r18
    3742:	91 1d       	adc	r25, r1
    3744:	88 0f       	add	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	88 0f       	add	r24, r24
    374a:	99 1f       	adc	r25, r25
    374c:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    3750:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    3754:	80 e0       	ldi	r24, 0x00	; 0
    3756:	08 95       	ret

00003758 <menuOnEnterModManual>:
    3758:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    375c:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3760:	3e 96       	adiw	r30, 0x0e	; 14
    3762:	85 91       	lpm	r24, Z+
    3764:	95 91       	lpm	r25, Z+
    3766:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <menuVmanual>
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	08 95       	ret

0000376e <menuOnEnterModSec>:
    376e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3772:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3776:	3e 96       	adiw	r30, 0x0e	; 14
    3778:	85 91       	lpm	r24, Z+
    377a:	95 91       	lpm	r25, Z+
    377c:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    3780:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <menuVmanual>
    3784:	2f 70       	andi	r18, 0x0F	; 15
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	83 70       	andi	r24, 0x03	; 3
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	a9 01       	movw	r20, r18
    378e:	44 0f       	add	r20, r20
    3790:	55 1f       	adc	r21, r21
    3792:	24 0f       	add	r18, r20
    3794:	35 1f       	adc	r19, r21
    3796:	22 0f       	add	r18, r18
    3798:	33 1f       	adc	r19, r19
    379a:	22 0f       	add	r18, r18
    379c:	33 1f       	adc	r19, r19
    379e:	ac 01       	movw	r20, r24
    37a0:	44 0f       	add	r20, r20
    37a2:	55 1f       	adc	r21, r21
    37a4:	84 0f       	add	r24, r20
    37a6:	95 1f       	adc	r25, r21
    37a8:	82 0f       	add	r24, r18
    37aa:	93 1f       	adc	r25, r19
    37ac:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    37b0:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	08 95       	ret

000037b8 <menuOnEnterModSecReg>:
    37b8:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    37bc:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    37c0:	3e 96       	adiw	r30, 0x0e	; 14
    37c2:	85 91       	lpm	r24, Z+
    37c4:	95 91       	lpm	r25, Z+
    37c6:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    37ca:	87 70       	andi	r24, 0x07	; 7
    37cc:	90 e0       	ldi	r25, 0x00	; 0
    37ce:	9c 01       	movw	r18, r24
    37d0:	22 0f       	add	r18, r18
    37d2:	33 1f       	adc	r19, r19
    37d4:	82 0f       	add	r24, r18
    37d6:	93 1f       	adc	r25, r19
    37d8:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    37dc:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	08 95       	ret

000037e4 <menuOnEnterRegOut>:
    37e4:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    37e8:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    37ec:	3e 96       	adiw	r30, 0x0e	; 14
    37ee:	85 91       	lpm	r24, Z+
    37f0:	95 91       	lpm	r25, Z+
    37f2:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <menuVsection>
    37f6:	87 70       	andi	r24, 0x07	; 7
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	90 93 d8 05 	sts	0x05D8, r25	; 0x8005d8 <DataAdressOffset+0x1>
    3806:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <DataAdressOffset>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	08 95       	ret

0000380e <menuOnEnterKey>:
    380e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3812:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3816:	3e 96       	adiw	r30, 0x0e	; 14
    3818:	85 91       	lpm	r24, Z+
    381a:	95 91       	lpm	r25, Z+
    381c:	84 30       	cpi	r24, 0x04	; 4
    381e:	60 f4       	brcc	.+24     	; 0x3838 <menuOnEnterKey+0x2a>
    3820:	fc 01       	movw	r30, r24
    3822:	ff 27       	eor	r31, r31
    3824:	ee 0f       	add	r30, r30
    3826:	ff 1f       	adc	r31, r31
    3828:	e0 52       	subi	r30, 0x20	; 32
    382a:	fa 4f       	sbci	r31, 0xFA	; 250
    382c:	80 81       	ld	r24, Z
    382e:	91 81       	ldd	r25, Z+1	; 0x01
    3830:	90 93 f4 05 	sts	0x05F4, r25	; 0x8005f4 <menuVMenuSoftKey+0x1>
    3834:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <menuVMenuSoftKey>
    3838:	80 e0       	ldi	r24, 0x00	; 0
    383a:	08 95       	ret

0000383c <menuOnExitMidiCCreg>:
    383c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <eeprom_UpdateCCreg>
    3840:	80 e0       	ldi	r24, 0x00	; 0
    3842:	08 95       	ret

00003844 <menuOnExitRegisterOut>:
    3844:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <eeprom_UpdateRegOut>
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	08 95       	ret

0000384c <menuOnExitMidiThrough>:
    384c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <eeprom_UpdateMidiThrough>
    3850:	80 e0       	ldi	r24, 0x00	; 0
    3852:	08 95       	ret

00003854 <menuOnExitRegisterEdit>:
    3854:	1f 93       	push	r17
    3856:	cf 93       	push	r28
    3858:	df 93       	push	r29
    385a:	86 30       	cpi	r24, 0x06	; 6
    385c:	f1 f0       	breq	.+60     	; 0x389a <menuOnExitRegisterEdit+0x46>
    385e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3862:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    3866:	3e 96       	adiw	r30, 0x0e	; 14
    3868:	05 90       	lpm	r0, Z+
    386a:	f4 91       	lpm	r31, Z
    386c:	e0 2d       	mov	r30, r0
    386e:	cf 01       	movw	r24, r30
    3870:	83 59       	subi	r24, 0x93	; 147
    3872:	95 40       	sbci	r25, 0x05	; 5
    3874:	88 0f       	add	r24, r24
    3876:	88 0f       	add	r24, r24
    3878:	88 0f       	add	r24, r24
    387a:	d0 81       	ld	r29, Z
    387c:	c0 e0       	ldi	r28, 0x00	; 0
    387e:	0b c0       	rjmp	.+22     	; 0x3896 <menuOnExitRegisterEdit+0x42>
    3880:	11 e0       	ldi	r17, 0x01	; 1
    3882:	18 0f       	add	r17, r24
    3884:	6d 2f       	mov	r22, r29
    3886:	66 1f       	adc	r22, r22
    3888:	66 27       	eor	r22, r22
    388a:	66 1f       	adc	r22, r22
    388c:	0e 94 a1 31 	call	0x6342	; 0x6342 <register_onOff>
    3890:	dd 0f       	add	r29, r29
    3892:	cf 5f       	subi	r28, 0xFF	; 255
    3894:	81 2f       	mov	r24, r17
    3896:	c8 30       	cpi	r28, 0x08	; 8
    3898:	98 f3       	brcs	.-26     	; 0x3880 <menuOnExitRegisterEdit+0x2c>
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	08 95       	ret

000038a4 <softKeyRegOff>:
    38a4:	81 11       	cpse	r24, r1
    38a6:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <midi_resetRegisters>
    38aa:	80 e0       	ldi	r24, 0x00	; 0
    38ac:	08 95       	ret

000038ae <menuOnExitCoupler>:
    38ae:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    38b2:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    38b6:	3e 96       	adiw	r30, 0x0e	; 14
    38b8:	85 91       	lpm	r24, Z+
    38ba:	95 91       	lpm	r25, Z+
    38bc:	87 53       	subi	r24, 0x37	; 55
    38be:	98 40       	sbci	r25, 0x08	; 8
    38c0:	fc 01       	movw	r30, r24
    38c2:	ff 27       	eor	r31, r31
    38c4:	e9 5c       	subi	r30, 0xC9	; 201
    38c6:	f7 4f       	sbci	r31, 0xF7	; 247
    38c8:	20 81       	ld	r18, Z
    38ca:	21 11       	cpse	r18, r1
    38cc:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <set_Coupler>
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	08 95       	ret

000038d4 <menuOnExitSaveProgram>:
    38d4:	86 30       	cpi	r24, 0x06	; 6
    38d6:	39 f0       	breq	.+14     	; 0x38e6 <menuOnExitSaveProgram+0x12>
    38d8:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menuVKombination>
    38dc:	80 34       	cpi	r24, 0x40	; 64
    38de:	18 f4       	brcc	.+6      	; 0x38e6 <menuOnExitSaveProgram+0x12>
    38e0:	6f ef       	ldi	r22, 0xFF	; 255
    38e2:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <register_toProgram>
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	08 95       	ret

000038ea <menuOnExitKeys>:
    38ea:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_UpdateSoftkeys>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	08 95       	ret

000038f2 <menu_readModule>:
    38f2:	cf 92       	push	r12
    38f4:	df 92       	push	r13
    38f6:	ef 92       	push	r14
    38f8:	ff 92       	push	r15
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <menu_readModule+0x16>
    3904:	88 0f       	add	r24, r24
    3906:	99 1f       	adc	r25, r25
    3908:	0a 94       	dec	r0
    390a:	e2 f7       	brpl	.-8      	; 0x3904 <menu_readModule+0x12>
    390c:	28 2f       	mov	r18, r24
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	e4 e6       	ldi	r30, 0x64	; 100
    3912:	f3 e0       	ldi	r31, 0x03	; 3
    3914:	c1 2c       	mov	r12, r1
    3916:	d1 2c       	mov	r13, r1
    3918:	76 01       	movw	r14, r12
    391a:	0b c0       	rjmp	.+22     	; 0x3932 <menu_readModule+0x40>
    391c:	cc 0c       	add	r12, r12
    391e:	dd 1c       	adc	r13, r13
    3920:	ee 1c       	adc	r14, r14
    3922:	ff 1c       	adc	r15, r15
    3924:	86 81       	ldd	r24, Z+6	; 0x06
    3926:	82 23       	and	r24, r18
    3928:	11 f0       	breq	.+4      	; 0x392e <menu_readModule+0x3c>
    392a:	68 94       	set
    392c:	c0 f8       	bld	r12, 0
    392e:	38 97       	sbiw	r30, 0x08	; 8
    3930:	9f 5f       	subi	r25, 0xFF	; 255
    3932:	90 32       	cpi	r25, 0x20	; 32
    3934:	98 f3       	brcs	.-26     	; 0x391c <menu_readModule+0x2a>
    3936:	8e e1       	ldi	r24, 0x1E	; 30
    3938:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    393c:	c0 92 06 19 	sts	0x1906, r12	; 0x801906 <editLong>
    3940:	d0 92 07 19 	sts	0x1907, r13	; 0x801907 <editLong+0x1>
    3944:	e0 92 08 19 	sts	0x1908, r14	; 0x801908 <editLong+0x2>
    3948:	f0 92 09 19 	sts	0x1909, r15	; 0x801909 <editLong+0x3>
    394c:	0e 94 b8 3c 	call	0x7970	; 0x7970 <lcd_longout>
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	ff 90       	pop	r15
    3954:	ef 90       	pop	r14
    3956:	df 90       	pop	r13
    3958:	cf 90       	pop	r12
    395a:	08 95       	ret

0000395c <menu_testModule>:
    395c:	8e e1       	ldi	r24, 0x1E	; 30
    395e:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    3962:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <menuVmodule>
    3966:	0e 94 19 10 	call	0x2032	; 0x2032 <test_PipeModule>
    396a:	60 93 06 19 	sts	0x1906, r22	; 0x801906 <editLong>
    396e:	70 93 07 19 	sts	0x1907, r23	; 0x801907 <editLong+0x1>
    3972:	80 93 08 19 	sts	0x1908, r24	; 0x801908 <editLong+0x2>
    3976:	90 93 09 19 	sts	0x1909, r25	; 0x801909 <editLong+0x3>
    397a:	0e 94 b8 3c 	call	0x7970	; 0x7970 <lcd_longout>
    397e:	80 e0       	ldi	r24, 0x00	; 0
    3980:	08 95       	ret

00003982 <menuOnEnterTune>:
    3982:	cf 93       	push	r28
    3984:	8f 3f       	cpi	r24, 0xFF	; 255
    3986:	09 f0       	breq	.+2      	; 0x398a <menuOnEnterTune+0x8>
    3988:	79 c0       	rjmp	.+242    	; 0x3a7c <menuOnEnterTune+0xfa>
    398a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <minManNote.3072>
    398e:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <maxManNote.3073>
    3992:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    3996:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    399a:	3e 96       	adiw	r30, 0x0e	; 14
    399c:	85 91       	lpm	r24, Z+
    399e:	95 91       	lpm	r25, Z+
    39a0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <menuVmanual>
    39a4:	84 30       	cpi	r24, 0x04	; 4
    39a6:	10 f0       	brcs	.+4      	; 0x39ac <menuOnEnterTune+0x2a>
    39a8:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <menuVmanual>
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	39 c0       	rjmp	.+114    	; 0x3a22 <menuOnEnterTune+0xa0>
    39b0:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	e2 2f       	mov	r30, r18
    39b8:	f0 e0       	ldi	r31, 0x00	; 0
    39ba:	df 01       	movw	r26, r30
    39bc:	aa 0f       	add	r26, r26
    39be:	bb 1f       	adc	r27, r27
    39c0:	ad 01       	movw	r20, r26
    39c2:	4e 0f       	add	r20, r30
    39c4:	5f 1f       	adc	r21, r31
    39c6:	dc 01       	movw	r26, r24
    39c8:	aa 0f       	add	r26, r26
    39ca:	bb 1f       	adc	r27, r27
    39cc:	a8 0f       	add	r26, r24
    39ce:	b9 1f       	adc	r27, r25
    39d0:	aa 0f       	add	r26, r26
    39d2:	bb 1f       	adc	r27, r27
    39d4:	aa 0f       	add	r26, r26
    39d6:	bb 1f       	adc	r27, r27
    39d8:	a4 0f       	add	r26, r20
    39da:	b5 1f       	adc	r27, r21
    39dc:	a2 5a       	subi	r26, 0xA2	; 162
    39de:	b6 4f       	sbci	r27, 0xF6	; 246
    39e0:	3c 91       	ld	r19, X
    39e2:	40 91 2f 02 	lds	r20, 0x022F	; 0x80022f <minManNote.3072>
    39e6:	34 17       	cp	r19, r20
    39e8:	10 f4       	brcc	.+4      	; 0x39ee <menuOnEnterTune+0x6c>
    39ea:	30 93 2f 02 	sts	0x022F, r19	; 0x80022f <minManNote.3072>
    39ee:	af 01       	movw	r20, r30
    39f0:	44 0f       	add	r20, r20
    39f2:	55 1f       	adc	r21, r21
    39f4:	e4 0f       	add	r30, r20
    39f6:	f5 1f       	adc	r31, r21
    39f8:	ac 01       	movw	r20, r24
    39fa:	44 0f       	add	r20, r20
    39fc:	55 1f       	adc	r21, r21
    39fe:	84 0f       	add	r24, r20
    3a00:	95 1f       	adc	r25, r21
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	88 0f       	add	r24, r24
    3a08:	99 1f       	adc	r25, r25
    3a0a:	e8 0f       	add	r30, r24
    3a0c:	f9 1f       	adc	r31, r25
    3a0e:	e2 5a       	subi	r30, 0xA2	; 162
    3a10:	f6 4f       	sbci	r31, 0xF6	; 246
    3a12:	81 81       	ldd	r24, Z+1	; 0x01
    3a14:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <maxManNote.3073>
    3a18:	98 17       	cp	r25, r24
    3a1a:	10 f4       	brcc	.+4      	; 0x3a20 <menuOnEnterTune+0x9e>
    3a1c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <maxManNote.3073>
    3a20:	2f 5f       	subi	r18, 0xFF	; 255
    3a22:	24 30       	cpi	r18, 0x04	; 4
    3a24:	28 f2       	brcs	.-118    	; 0x39b0 <menuOnEnterTune+0x2e>
    3a26:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3072>
    3a2a:	88 23       	and	r24, r24
    3a2c:	5c f4       	brge	.+22     	; 0x3a44 <menuOnEnterTune+0xc2>
    3a2e:	8e e1       	ldi	r24, 0x1E	; 30
    3a30:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    3a34:	84 e0       	ldi	r24, 0x04	; 4
    3a36:	94 e0       	ldi	r25, 0x04	; 4
    3a38:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    3a3c:	8f ef       	ldi	r24, 0xFF	; 255
    3a3e:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <menuNote>
    3a42:	04 c0       	rjmp	.+8      	; 0x3a4c <menuOnEnterTune+0xca>
    3a44:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <menuNote>
    3a48:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3074>
    3a4c:	62 e9       	ldi	r22, 0x92	; 146
    3a4e:	74 e1       	ldi	r23, 0x14	; 20
    3a50:	80 e0       	ldi	r24, 0x00	; 0
    3a52:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    3a56:	61 ea       	ldi	r22, 0xA1	; 161
    3a58:	74 e1       	ldi	r23, 0x14	; 20
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    3a60:	66 ea       	ldi	r22, 0xA6	; 166
    3a62:	74 e1       	ldi	r23, 0x14	; 20
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    3a6a:	68 ea       	ldi	r22, 0xA8	; 168
    3a6c:	74 e1       	ldi	r23, 0x14	; 20
    3a6e:	83 e0       	ldi	r24, 0x03	; 3
    3a70:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    3a74:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    3a78:	cf ef       	ldi	r28, 0xFF	; 255
    3a7a:	71 c0       	rjmp	.+226    	; 0x3b5e <menuOnEnterTune+0x1dc>
    3a7c:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    3a80:	6f 3f       	cpi	r22, 0xFF	; 255
    3a82:	09 f4       	brne	.+2      	; 0x3a86 <menuOnEnterTune+0x104>
    3a84:	61 c0       	rjmp	.+194    	; 0x3b48 <menuOnEnterTune+0x1c6>
    3a86:	81 30       	cpi	r24, 0x01	; 1
    3a88:	d9 f4       	brne	.+54     	; 0x3ac0 <menuOnEnterTune+0x13e>
    3a8a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <maxManNote.3073>
    3a8e:	68 17       	cp	r22, r24
    3a90:	08 f0       	brcs	.+2      	; 0x3a94 <menuOnEnterTune+0x112>
    3a92:	5c c0       	rjmp	.+184    	; 0x3b4c <menuOnEnterTune+0x1ca>
    3a94:	40 e0       	ldi	r20, 0x00	; 0
    3a96:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3a9a:	0e 94 78 35 	call	0x6af0	; 0x6af0 <manual_NoteOnOff>
    3a9e:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    3aa2:	6f 5f       	subi	r22, 0xFF	; 255
    3aa4:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <menuNote>
    3aa8:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3aac:	81 30       	cpi	r24, 0x01	; 1
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <menuOnEnterTune+0x130>
    3ab0:	4f c0       	rjmp	.+158    	; 0x3b50 <menuOnEnterTune+0x1ce>
    3ab2:	41 e0       	ldi	r20, 0x01	; 1
    3ab4:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3ab8:	0e 94 78 35 	call	0x6af0	; 0x6af0 <manual_NoteOnOff>
    3abc:	cf ef       	ldi	r28, 0xFF	; 255
    3abe:	4f c0       	rjmp	.+158    	; 0x3b5e <menuOnEnterTune+0x1dc>
    3ac0:	84 30       	cpi	r24, 0x04	; 4
    3ac2:	d1 f4       	brne	.+52     	; 0x3af8 <menuOnEnterTune+0x176>
    3ac4:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <minManNote.3072>
    3ac8:	86 17       	cp	r24, r22
    3aca:	08 f0       	brcs	.+2      	; 0x3ace <menuOnEnterTune+0x14c>
    3acc:	43 c0       	rjmp	.+134    	; 0x3b54 <menuOnEnterTune+0x1d2>
    3ace:	40 e0       	ldi	r20, 0x00	; 0
    3ad0:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3ad4:	0e 94 78 35 	call	0x6af0	; 0x6af0 <manual_NoteOnOff>
    3ad8:	60 91 c5 05 	lds	r22, 0x05C5	; 0x8005c5 <menuNote>
    3adc:	61 50       	subi	r22, 0x01	; 1
    3ade:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <menuNote>
    3ae2:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3ae6:	81 30       	cpi	r24, 0x01	; 1
    3ae8:	b9 f5       	brne	.+110    	; 0x3b58 <menuOnEnterTune+0x1d6>
    3aea:	41 e0       	ldi	r20, 0x01	; 1
    3aec:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3af0:	0e 94 78 35 	call	0x6af0	; 0x6af0 <manual_NoteOnOff>
    3af4:	cf ef       	ldi	r28, 0xFF	; 255
    3af6:	33 c0       	rjmp	.+102    	; 0x3b5e <menuOnEnterTune+0x1dc>
    3af8:	83 30       	cpi	r24, 0x03	; 3
    3afa:	91 f4       	brne	.+36     	; 0x3b20 <menuOnEnterTune+0x19e>
    3afc:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3b00:	81 11       	cpse	r24, r1
    3b02:	04 c0       	rjmp	.+8      	; 0x3b0c <menuOnEnterTune+0x18a>
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <notOnOff.3074>
    3b0a:	02 c0       	rjmp	.+4      	; 0x3b10 <menuOnEnterTune+0x18e>
    3b0c:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <notOnOff.3074>
    3b10:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <notOnOff.3074>
    3b14:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b18:	0e 94 78 35 	call	0x6af0	; 0x6af0 <manual_NoteOnOff>
    3b1c:	cf ef       	ldi	r28, 0xFF	; 255
    3b1e:	1f c0       	rjmp	.+62     	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b20:	82 30       	cpi	r24, 0x02	; 2
    3b22:	11 f0       	breq	.+4      	; 0x3b28 <menuOnEnterTune+0x1a6>
    3b24:	86 30       	cpi	r24, 0x06	; 6
    3b26:	39 f4       	brne	.+14     	; 0x3b36 <menuOnEnterTune+0x1b4>
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b2e:	0e 94 78 35 	call	0x6af0	; 0x6af0 <manual_NoteOnOff>
    3b32:	c0 e0       	ldi	r28, 0x00	; 0
    3b34:	14 c0       	rjmp	.+40     	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b36:	85 30       	cpi	r24, 0x05	; 5
    3b38:	89 f4       	brne	.+34     	; 0x3b5c <menuOnEnterTune+0x1da>
    3b3a:	40 e0       	ldi	r20, 0x00	; 0
    3b3c:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <menuVmanual>
    3b40:	0e 94 78 35 	call	0x6af0	; 0x6af0 <manual_NoteOnOff>
    3b44:	c0 e0       	ldi	r28, 0x00	; 0
    3b46:	0b c0       	rjmp	.+22     	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b48:	c0 e0       	ldi	r28, 0x00	; 0
    3b4a:	09 c0       	rjmp	.+18     	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b4c:	cf ef       	ldi	r28, 0xFF	; 255
    3b4e:	07 c0       	rjmp	.+14     	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b50:	cf ef       	ldi	r28, 0xFF	; 255
    3b52:	05 c0       	rjmp	.+10     	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b54:	cf ef       	ldi	r28, 0xFF	; 255
    3b56:	03 c0       	rjmp	.+6      	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b58:	cf ef       	ldi	r28, 0xFF	; 255
    3b5a:	01 c0       	rjmp	.+2      	; 0x3b5e <menuOnEnterTune+0x1dc>
    3b5c:	cf ef       	ldi	r28, 0xFF	; 255
    3b5e:	cf 3f       	cpi	r28, 0xFF	; 255
    3b60:	a1 f5       	brne	.+104    	; 0x3bca <menuOnEnterTune+0x248>
    3b62:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <menuNote>
    3b66:	8f 3f       	cpi	r24, 0xFF	; 255
    3b68:	69 f1       	breq	.+90     	; 0x3bc4 <menuOnEnterTune+0x242>
    3b6a:	8e e1       	ldi	r24, 0x1E	; 30
    3b6c:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    3b70:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <menuNote>
    3b74:	0e 94 59 3e 	call	0x7cb2	; 0x7cb2 <lcd_noteOut>
    3b78:	80 e2       	ldi	r24, 0x20	; 32
    3b7a:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    3b7e:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3b82:	81 11       	cpse	r24, r1
    3b84:	0a c0       	rjmp	.+20     	; 0x3b9a <menuOnEnterTune+0x218>
    3b86:	81 e6       	ldi	r24, 0x61	; 97
    3b88:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    3b8c:	85 e7       	ldi	r24, 0x75	; 117
    3b8e:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    3b92:	83 e7       	ldi	r24, 0x73	; 115
    3b94:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    3b98:	09 c0       	rjmp	.+18     	; 0x3bac <menuOnEnterTune+0x22a>
    3b9a:	85 e6       	ldi	r24, 0x65	; 101
    3b9c:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    3ba0:	89 e6       	ldi	r24, 0x69	; 105
    3ba2:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    3ba6:	8e e6       	ldi	r24, 0x6E	; 110
    3ba8:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    3bac:	61 e0       	ldi	r22, 0x01	; 1
    3bae:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <notOnOff.3074>
    3bb2:	81 11       	cpse	r24, r1
    3bb4:	01 c0       	rjmp	.+2      	; 0x3bb8 <menuOnEnterTune+0x236>
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <keylabel_statcheck>
    3bbe:	81 11       	cpse	r24, r1
    3bc0:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    3bc4:	8e e1       	ldi	r24, 0x1E	; 30
    3bc6:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    3bca:	8c 2f       	mov	r24, r28
    3bcc:	cf 91       	pop	r28
    3bce:	08 95       	ret

00003bd0 <menuOnExitMidiActiveSense>:
    3bd0:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <eeprom_UpdateMidiOutMap>
    3bd4:	80 e0       	ldi	r24, 0x00	; 0
    3bd6:	08 95       	ret

00003bd8 <menuOnExitMidiOut>:
    3bd8:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <eeprom_UpdateMidiOutMap>
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	08 95       	ret

00003be0 <menuOnExitMidiIn>:
    3be0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <eeprom_UpdateMidiInMap>
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	08 95       	ret

00003be8 <menuOnExitManual>:
    3be8:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <eeprom_UpdateManualMap>
    3bec:	0e 94 24 30 	call	0x6048	; 0x6048 <registers_CalcCount>
    3bf0:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <eeprom_UpdateReg>
    3bf4:	0e 94 7b 34 	call	0x68f6	; 0x68f6 <Midi_updateManualRange>
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	08 95       	ret

00003bfc <menuOnExitModules>:
    3bfc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <eeprom_UpdateModules>
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	08 95       	ret

00003c04 <menuOnEnterUSBprotokoll>:
    3c04:	cf 93       	push	r28
    3c06:	87 ee       	ldi	r24, 0xE7	; 231
    3c08:	93 e0       	ldi	r25, 0x03	; 3
    3c0a:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c0e:	1d d8       	rcall	.-4038   	; 0x2c4a <log_count>
    3c10:	81 11       	cpse	r24, r1
    3c12:	17 c0       	rjmp	.+46     	; 0x3c42 <menuOnEnterUSBprotokoll+0x3e>
    3c14:	8d ee       	ldi	r24, 0xED	; 237
    3c16:	93 e0       	ldi	r25, 0x03	; 3
    3c18:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c1c:	16 c0       	rjmp	.+44     	; 0x3c4a <menuOnEnterUSBprotokoll+0x46>
    3c1e:	6f ef       	ldi	r22, 0xFF	; 255
    3c20:	8c 2f       	mov	r24, r28
    3c22:	b4 d9       	rcall	.-3224   	; 0x2f8c <log_getShortTextFromIndex>
    3c24:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3c28:	82 eb       	ldi	r24, 0xB2	; 178
    3c2a:	94 e1       	ldi	r25, 0x14	; 20
    3c2c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c30:	8c 2f       	mov	r24, r28
    3c32:	52 d8       	rcall	.-3932   	; 0x2cd8 <log_getErrorText>
    3c34:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c38:	82 eb       	ldi	r24, 0xB2	; 178
    3c3a:	94 e1       	ldi	r25, 0x14	; 20
    3c3c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c40:	8c 2f       	mov	r24, r28
    3c42:	cf ef       	ldi	r28, 0xFF	; 255
    3c44:	c8 0f       	add	r28, r24
    3c46:	81 11       	cpse	r24, r1
    3c48:	ea cf       	rjmp	.-44     	; 0x3c1e <menuOnEnterUSBprotokoll+0x1a>
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	cf 91       	pop	r28
    3c4e:	08 95       	ret

00003c50 <menuOnExitUSBactive>:
    3c50:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <eeprom_UpdateUSB>
    3c54:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <serUSB_Active>
    3c58:	8f 3f       	cpi	r24, 0xFF	; 255
    3c5a:	61 f4       	brne	.+24     	; 0x3c74 <menuOnExitUSBactive+0x24>
    3c5c:	8e ec       	ldi	r24, 0xCE	; 206
    3c5e:	93 e0       	ldi	r25, 0x03	; 3
    3c60:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c64:	8a e6       	ldi	r24, 0x6A	; 106
    3c66:	94 e1       	ldi	r25, 0x14	; 20
    3c68:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c6c:	82 eb       	ldi	r24, 0xB2	; 178
    3c6e:	94 e1       	ldi	r25, 0x14	; 20
    3c70:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c74:	80 e0       	ldi	r24, 0x00	; 0
    3c76:	08 95       	ret

00003c78 <menuOnEnterUSBsendHW>:
    3c78:	9f 92       	push	r9
    3c7a:	af 92       	push	r10
    3c7c:	bf 92       	push	r11
    3c7e:	cf 92       	push	r12
    3c80:	df 92       	push	r13
    3c82:	ef 92       	push	r14
    3c84:	ff 92       	push	r15
    3c86:	0f 93       	push	r16
    3c88:	1f 93       	push	r17
    3c8a:	cf 93       	push	r28
    3c8c:	df 93       	push	r29
    3c8e:	85 eb       	ldi	r24, 0xB5	; 181
    3c90:	93 e0       	ldi	r25, 0x03	; 3
    3c92:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3c96:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3c9a:	82 ea       	ldi	r24, 0xA2	; 162
    3c9c:	93 e0       	ldi	r25, 0x03	; 3
    3c9e:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3ca2:	c8 e7       	ldi	r28, 0x78	; 120
    3ca4:	d3 e0       	ldi	r29, 0x03	; 3
    3ca6:	6a e0       	ldi	r22, 0x0A	; 10
    3ca8:	79 e1       	ldi	r23, 0x19	; 25
    3caa:	88 81       	ld	r24, Y
    3cac:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3cb0:	22 e7       	ldi	r18, 0x72	; 114
    3cb2:	fc 01       	movw	r30, r24
    3cb4:	20 83       	st	Z, r18
    3cb6:	bc 01       	movw	r22, r24
    3cb8:	6e 5f       	subi	r22, 0xFE	; 254
    3cba:	7f 4f       	sbci	r23, 0xFF	; 255
    3cbc:	20 e2       	ldi	r18, 0x20	; 32
    3cbe:	21 83       	std	Z+1, r18	; 0x01
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3cc6:	27 e7       	ldi	r18, 0x77	; 119
    3cc8:	fc 01       	movw	r30, r24
    3cca:	20 83       	st	Z, r18
    3ccc:	8a e0       	ldi	r24, 0x0A	; 10
    3cce:	99 e1       	ldi	r25, 0x19	; 25
    3cd0:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3cd4:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3cd8:	80 e9       	ldi	r24, 0x90	; 144
    3cda:	93 e0       	ldi	r25, 0x03	; 3
    3cdc:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3ce0:	6a e0       	ldi	r22, 0x0A	; 10
    3ce2:	79 e1       	ldi	r23, 0x19	; 25
    3ce4:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <pipe_ModuleTested>
    3ce8:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3cec:	8a e0       	ldi	r24, 0x0A	; 10
    3cee:	99 e1       	ldi	r25, 0x19	; 25
    3cf0:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3cf4:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3cf8:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3cfc:	e1 2c       	mov	r14, r1
    3cfe:	d1 c0       	rjmp	.+418    	; 0x3ea2 <menuOnEnterUSBsendHW+0x22a>
    3d00:	87 e8       	ldi	r24, 0x87	; 135
    3d02:	93 e0       	ldi	r25, 0x03	; 3
    3d04:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3d08:	6a e0       	ldi	r22, 0x0A	; 10
    3d0a:	79 e1       	ldi	r23, 0x19	; 25
    3d0c:	8e 2d       	mov	r24, r14
    3d0e:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <putChar_Manual>
    3d12:	8a e0       	ldi	r24, 0x0A	; 10
    3d14:	99 e1       	ldi	r25, 0x19	; 25
    3d16:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3d1a:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3d1e:	f1 2c       	mov	r15, r1
    3d20:	a4 c0       	rjmp	.+328    	; 0x3e6a <menuOnEnterUSBsendHW+0x1f2>
    3d22:	80 e8       	ldi	r24, 0x80	; 128
    3d24:	93 e0       	ldi	r25, 0x03	; 3
    3d26:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3d2a:	80 e3       	ldi	r24, 0x30	; 48
    3d2c:	8f 0d       	add	r24, r15
    3d2e:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3d32:	8a e3       	ldi	r24, 0x3A	; 58
    3d34:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3d38:	80 e2       	ldi	r24, 0x20	; 32
    3d3a:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3d3e:	0e 2d       	mov	r16, r14
    3d40:	10 e0       	ldi	r17, 0x00	; 0
    3d42:	cf 2c       	mov	r12, r15
    3d44:	d1 2c       	mov	r13, r1
    3d46:	e6 01       	movw	r28, r12
    3d48:	cc 0f       	add	r28, r28
    3d4a:	dd 1f       	adc	r29, r29
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	8c 0d       	add	r24, r12
    3d50:	9d 1d       	adc	r25, r13
    3d52:	e8 01       	movw	r28, r16
    3d54:	cc 0f       	add	r28, r28
    3d56:	dd 1f       	adc	r29, r29
    3d58:	c0 0f       	add	r28, r16
    3d5a:	d1 1f       	adc	r29, r17
    3d5c:	cc 0f       	add	r28, r28
    3d5e:	dd 1f       	adc	r29, r29
    3d60:	cc 0f       	add	r28, r28
    3d62:	dd 1f       	adc	r29, r29
    3d64:	c8 0f       	add	r28, r24
    3d66:	d9 1f       	adc	r29, r25
    3d68:	c2 5a       	subi	r28, 0xA2	; 162
    3d6a:	d6 4f       	sbci	r29, 0xF6	; 246
    3d6c:	6a e0       	ldi	r22, 0x0A	; 10
    3d6e:	79 e1       	ldi	r23, 0x19	; 25
    3d70:	88 81       	ld	r24, Y
    3d72:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3d76:	bc 01       	movw	r22, r24
    3d78:	6f 5f       	subi	r22, 0xFF	; 255
    3d7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7c:	0f 2e       	mov	r0, r31
    3d7e:	fe e2       	ldi	r31, 0x2E	; 46
    3d80:	bf 2e       	mov	r11, r31
    3d82:	f0 2d       	mov	r31, r0
    3d84:	fc 01       	movw	r30, r24
    3d86:	b0 82       	st	Z, r11
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3d8e:	bc 01       	movw	r22, r24
    3d90:	6f 5f       	subi	r22, 0xFF	; 255
    3d92:	7f 4f       	sbci	r23, 0xFF	; 255
    3d94:	fc 01       	movw	r30, r24
    3d96:	b0 82       	st	Z, r11
    3d98:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9a:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3d9e:	fc 01       	movw	r30, r24
    3da0:	80 e2       	ldi	r24, 0x20	; 32
    3da2:	80 83       	st	Z, r24
    3da4:	9d e3       	ldi	r25, 0x3D	; 61
    3da6:	91 83       	std	Z+1, r25	; 0x01
    3da8:	82 83       	std	Z+2, r24	; 0x02
    3daa:	8a e0       	ldi	r24, 0x0A	; 10
    3dac:	99 e1       	ldi	r25, 0x19	; 25
    3dae:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3db2:	88 81       	ld	r24, Y
    3db4:	88 23       	and	r24, r24
    3db6:	2c f4       	brge	.+10     	; 0x3dc2 <menuOnEnterUSBsendHW+0x14a>
    3db8:	8e e6       	ldi	r24, 0x6E	; 110
    3dba:	93 e0       	ldi	r25, 0x03	; 3
    3dbc:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3dc0:	51 c0       	rjmp	.+162    	; 0x3e64 <menuOnEnterUSBsendHW+0x1ec>
    3dc2:	6a e0       	ldi	r22, 0x0A	; 10
    3dc4:	79 e1       	ldi	r23, 0x19	; 25
    3dc6:	0e 94 b6 3d 	call	0x7b6c	; 0x7b6c <putChar_Note>
    3dca:	bc 01       	movw	r22, r24
    3dcc:	6f 5f       	subi	r22, 0xFF	; 255
    3dce:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd0:	0f 2e       	mov	r0, r31
    3dd2:	fd e2       	ldi	r31, 0x2D	; 45
    3dd4:	9f 2e       	mov	r9, r31
    3dd6:	f0 2d       	mov	r31, r0
    3dd8:	fc 01       	movw	r30, r24
    3dda:	90 82       	st	Z, r9
    3ddc:	f6 01       	movw	r30, r12
    3dde:	ee 0f       	add	r30, r30
    3de0:	ff 1f       	adc	r31, r31
    3de2:	ce 0e       	add	r12, r30
    3de4:	df 1e       	adc	r13, r31
    3de6:	58 01       	movw	r10, r16
    3de8:	aa 0c       	add	r10, r10
    3dea:	bb 1c       	adc	r11, r11
    3dec:	e5 01       	movw	r28, r10
    3dee:	c0 0f       	add	r28, r16
    3df0:	d1 1f       	adc	r29, r17
    3df2:	cc 0f       	add	r28, r28
    3df4:	dd 1f       	adc	r29, r29
    3df6:	cc 0f       	add	r28, r28
    3df8:	dd 1f       	adc	r29, r29
    3dfa:	cc 0d       	add	r28, r12
    3dfc:	dd 1d       	adc	r29, r13
    3dfe:	c2 5a       	subi	r28, 0xA2	; 162
    3e00:	d6 4f       	sbci	r29, 0xF6	; 246
    3e02:	89 81       	ldd	r24, Y+1	; 0x01
    3e04:	0e 94 b6 3d 	call	0x7b6c	; 0x7b6c <putChar_Note>
    3e08:	20 e2       	ldi	r18, 0x20	; 32
    3e0a:	fc 01       	movw	r30, r24
    3e0c:	20 83       	st	Z, r18
    3e0e:	11 82       	std	Z+1, r1	; 0x01
    3e10:	8a e0       	ldi	r24, 0x0A	; 10
    3e12:	99 e1       	ldi	r25, 0x19	; 25
    3e14:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3e18:	86 e6       	ldi	r24, 0x66	; 102
    3e1a:	93 e0       	ldi	r25, 0x03	; 3
    3e1c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	82 95       	swap	r24
    3e24:	86 95       	lsr	r24
    3e26:	87 70       	andi	r24, 0x07	; 7
    3e28:	80 5d       	subi	r24, 0xD0	; 208
    3e2a:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3e2e:	8e e5       	ldi	r24, 0x5E	; 94
    3e30:	93 e0       	ldi	r25, 0x03	; 3
    3e32:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3e36:	8a 81       	ldd	r24, Y+2	; 0x02
    3e38:	6a e0       	ldi	r22, 0x0A	; 10
    3e3a:	79 e1       	ldi	r23, 0x19	; 25
    3e3c:	8f 71       	andi	r24, 0x1F	; 31
    3e3e:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    3e42:	bc 01       	movw	r22, r24
    3e44:	6f 5f       	subi	r22, 0xFF	; 255
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	fc 01       	movw	r30, r24
    3e4a:	90 82       	st	Z, r9
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	99 81       	ldd	r25, Y+1	; 0x01
    3e50:	28 81       	ld	r18, Y
    3e52:	8f 71       	andi	r24, 0x1F	; 31
    3e54:	89 0f       	add	r24, r25
    3e56:	82 1b       	sub	r24, r18
    3e58:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    3e5c:	8a e0       	ldi	r24, 0x0A	; 10
    3e5e:	99 e1       	ldi	r25, 0x19	; 25
    3e60:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3e64:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3e68:	f3 94       	inc	r15
    3e6a:	f3 e0       	ldi	r31, 0x03	; 3
    3e6c:	ff 15       	cp	r31, r15
    3e6e:	08 f0       	brcs	.+2      	; 0x3e72 <menuOnEnterUSBsendHW+0x1fa>
    3e70:	58 cf       	rjmp	.-336    	; 0x3d22 <menuOnEnterUSBsendHW+0xaa>
    3e72:	8c e3       	ldi	r24, 0x3C	; 60
    3e74:	93 e0       	ldi	r25, 0x03	; 3
    3e76:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3e7a:	ee 2d       	mov	r30, r14
    3e7c:	f0 e0       	ldi	r31, 0x00	; 0
    3e7e:	ee 0f       	add	r30, r30
    3e80:	ff 1f       	adc	r31, r31
    3e82:	e2 5b       	subi	r30, 0xB2	; 178
    3e84:	f6 4f       	sbci	r31, 0xF6	; 246
    3e86:	6a e0       	ldi	r22, 0x0A	; 10
    3e88:	79 e1       	ldi	r23, 0x19	; 25
    3e8a:	81 81       	ldd	r24, Z+1	; 0x01
    3e8c:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <putChar_MidiChan>
    3e90:	8a e0       	ldi	r24, 0x0A	; 10
    3e92:	99 e1       	ldi	r25, 0x19	; 25
    3e94:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3e98:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3e9c:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3ea0:	e3 94       	inc	r14
    3ea2:	83 e0       	ldi	r24, 0x03	; 3
    3ea4:	8e 15       	cp	r24, r14
    3ea6:	08 f0       	brcs	.+2      	; 0x3eaa <menuOnEnterUSBsendHW+0x232>
    3ea8:	2b cf       	rjmp	.-426    	; 0x3d00 <menuOnEnterUSBsendHW+0x88>
    3eaa:	84 e7       	ldi	r24, 0x74	; 116
    3eac:	93 e0       	ldi	r25, 0x03	; 3
    3eae:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3eb2:	f1 2c       	mov	r15, r1
    3eb4:	94 c0       	rjmp	.+296    	; 0x3fde <menuOnEnterUSBsendHW+0x366>
    3eb6:	80 e8       	ldi	r24, 0x80	; 128
    3eb8:	93 e0       	ldi	r25, 0x03	; 3
    3eba:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3ebe:	80 e3       	ldi	r24, 0x30	; 48
    3ec0:	8f 0d       	add	r24, r15
    3ec2:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3ec6:	8a e3       	ldi	r24, 0x3A	; 58
    3ec8:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3ecc:	80 e2       	ldi	r24, 0x20	; 32
    3ece:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3ed2:	cf 2d       	mov	r28, r15
    3ed4:	d0 e0       	ldi	r29, 0x00	; 0
    3ed6:	8e 01       	movw	r16, r28
    3ed8:	00 0f       	add	r16, r16
    3eda:	11 1f       	adc	r17, r17
    3edc:	0c 0f       	add	r16, r28
    3ede:	1d 1f       	adc	r17, r29
    3ee0:	03 5e       	subi	r16, 0xE3	; 227
    3ee2:	17 4f       	sbci	r17, 0xF7	; 247
    3ee4:	6a e0       	ldi	r22, 0x0A	; 10
    3ee6:	79 e1       	ldi	r23, 0x19	; 25
    3ee8:	f8 01       	movw	r30, r16
    3eea:	80 81       	ld	r24, Z
    3eec:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	6f 5f       	subi	r22, 0xFF	; 255
    3ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef6:	0f 2e       	mov	r0, r31
    3ef8:	fe e2       	ldi	r31, 0x2E	; 46
    3efa:	ef 2e       	mov	r14, r31
    3efc:	f0 2d       	mov	r31, r0
    3efe:	fc 01       	movw	r30, r24
    3f00:	e0 82       	st	Z, r14
    3f02:	f8 01       	movw	r30, r16
    3f04:	81 81       	ldd	r24, Z+1	; 0x01
    3f06:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3f0a:	bc 01       	movw	r22, r24
    3f0c:	6f 5f       	subi	r22, 0xFF	; 255
    3f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f10:	fc 01       	movw	r30, r24
    3f12:	e0 82       	st	Z, r14
    3f14:	f8 01       	movw	r30, r16
    3f16:	82 81       	ldd	r24, Z+2	; 0x02
    3f18:	0e 94 3a 3d 	call	0x7a74	; 0x7a74 <putChar_hex>
    3f1c:	fc 01       	movw	r30, r24
    3f1e:	80 e2       	ldi	r24, 0x20	; 32
    3f20:	80 83       	st	Z, r24
    3f22:	9d e3       	ldi	r25, 0x3D	; 61
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	82 83       	std	Z+2, r24	; 0x02
    3f28:	13 82       	std	Z+3, r1	; 0x03
    3f2a:	8a e0       	ldi	r24, 0x0A	; 10
    3f2c:	99 e1       	ldi	r25, 0x19	; 25
    3f2e:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3f32:	f8 01       	movw	r30, r16
    3f34:	80 81       	ld	r24, Z
    3f36:	8f 3f       	cpi	r24, 0xFF	; 255
    3f38:	29 f4       	brne	.+10     	; 0x3f44 <menuOnEnterUSBsendHW+0x2cc>
    3f3a:	8e e6       	ldi	r24, 0x6E	; 110
    3f3c:	93 e0       	ldi	r25, 0x03	; 3
    3f3e:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3f42:	4a c0       	rjmp	.+148    	; 0x3fd8 <menuOnEnterUSBsendHW+0x360>
    3f44:	ea e0       	ldi	r30, 0x0A	; 10
    3f46:	f9 e1       	ldi	r31, 0x19	; 25
    3f48:	92 e5       	ldi	r25, 0x52	; 82
    3f4a:	90 83       	st	Z, r25
    3f4c:	9e e2       	ldi	r25, 0x2E	; 46
    3f4e:	91 83       	std	Z+1, r25	; 0x01
    3f50:	6c e0       	ldi	r22, 0x0C	; 12
    3f52:	79 e1       	ldi	r23, 0x19	; 25
    3f54:	8f 5f       	subi	r24, 0xFF	; 255
    3f56:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <putChar_Dec>
    3f5a:	bc 01       	movw	r22, r24
    3f5c:	6f 5f       	subi	r22, 0xFF	; 255
    3f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f60:	1d e2       	ldi	r17, 0x2D	; 45
    3f62:	fc 01       	movw	r30, r24
    3f64:	10 83       	st	Z, r17
    3f66:	ce 01       	movw	r24, r28
    3f68:	88 0f       	add	r24, r24
    3f6a:	99 1f       	adc	r25, r25
    3f6c:	c8 0f       	add	r28, r24
    3f6e:	d9 1f       	adc	r29, r25
    3f70:	c3 5e       	subi	r28, 0xE3	; 227
    3f72:	d7 4f       	sbci	r29, 0xF7	; 247
    3f74:	89 81       	ldd	r24, Y+1	; 0x01
    3f76:	8f 5f       	subi	r24, 0xFF	; 255
    3f78:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <putChar_Dec>
    3f7c:	20 e2       	ldi	r18, 0x20	; 32
    3f7e:	fc 01       	movw	r30, r24
    3f80:	20 83       	st	Z, r18
    3f82:	11 82       	std	Z+1, r1	; 0x01
    3f84:	8a e0       	ldi	r24, 0x0A	; 10
    3f86:	99 e1       	ldi	r25, 0x19	; 25
    3f88:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3f8c:	86 e6       	ldi	r24, 0x66	; 102
    3f8e:	93 e0       	ldi	r25, 0x03	; 3
    3f90:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3f94:	8a 81       	ldd	r24, Y+2	; 0x02
    3f96:	82 95       	swap	r24
    3f98:	86 95       	lsr	r24
    3f9a:	87 70       	andi	r24, 0x07	; 7
    3f9c:	80 5d       	subi	r24, 0xD0	; 208
    3f9e:	0e 94 9a 39 	call	0x7334	; 0x7334 <serial0SER_USBSend>
    3fa2:	8e e5       	ldi	r24, 0x5E	; 94
    3fa4:	93 e0       	ldi	r25, 0x03	; 3
    3fa6:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3faa:	8a 81       	ldd	r24, Y+2	; 0x02
    3fac:	6a e0       	ldi	r22, 0x0A	; 10
    3fae:	79 e1       	ldi	r23, 0x19	; 25
    3fb0:	8f 71       	andi	r24, 0x1F	; 31
    3fb2:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    3fb6:	bc 01       	movw	r22, r24
    3fb8:	6f 5f       	subi	r22, 0xFF	; 255
    3fba:	7f 4f       	sbci	r23, 0xFF	; 255
    3fbc:	fc 01       	movw	r30, r24
    3fbe:	10 83       	st	Z, r17
    3fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc2:	99 81       	ldd	r25, Y+1	; 0x01
    3fc4:	28 81       	ld	r18, Y
    3fc6:	8f 71       	andi	r24, 0x1F	; 31
    3fc8:	89 0f       	add	r24, r25
    3fca:	82 1b       	sub	r24, r18
    3fcc:	0e 94 f7 3c 	call	0x79ee	; 0x79ee <putChar_Dec2>
    3fd0:	8a e0       	ldi	r24, 0x0A	; 10
    3fd2:	99 e1       	ldi	r25, 0x19	; 25
    3fd4:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    3fd8:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3fdc:	f3 94       	inc	r15
    3fde:	f7 e0       	ldi	r31, 0x07	; 7
    3fe0:	ff 15       	cp	r31, r15
    3fe2:	08 f0       	brcs	.+2      	; 0x3fe6 <menuOnEnterUSBsendHW+0x36e>
    3fe4:	68 cf       	rjmp	.-304    	; 0x3eb6 <menuOnEnterUSBsendHW+0x23e>
    3fe6:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3fea:	83 e3       	ldi	r24, 0x33	; 51
    3fec:	93 e0       	ldi	r25, 0x03	; 3
    3fee:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    3ff2:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    3ff6:	e1 2c       	mov	r14, r1
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	64 c0       	rjmp	.+200    	; 0x40c4 <menuOnEnterUSBsendHW+0x44c>
    3ffc:	ce 2d       	mov	r28, r14
    3ffe:	d0 e0       	ldi	r29, 0x00	; 0
    4000:	0f 2d       	mov	r16, r15
    4002:	10 e0       	ldi	r17, 0x00	; 0
    4004:	fe 01       	movw	r30, r28
    4006:	ee 0f       	add	r30, r30
    4008:	ff 1f       	adc	r31, r31
    400a:	ee 0f       	add	r30, r30
    400c:	ff 1f       	adc	r31, r31
    400e:	e0 0f       	add	r30, r16
    4010:	f1 1f       	adc	r31, r17
    4012:	ee 0f       	add	r30, r30
    4014:	ff 1f       	adc	r31, r31
    4016:	ee 0f       	add	r30, r30
    4018:	ff 1f       	adc	r31, r31
    401a:	e2 5b       	subi	r30, 0xB2	; 178
    401c:	f7 4f       	sbci	r31, 0xF7	; 247
    401e:	80 81       	ld	r24, Z
    4020:	8f 3f       	cpi	r24, 0xFF	; 255
    4022:	09 f4       	brne	.+2      	; 0x4026 <menuOnEnterUSBsendHW+0x3ae>
    4024:	47 c0       	rjmp	.+142    	; 0x40b4 <menuOnEnterUSBsendHW+0x43c>
    4026:	6a e0       	ldi	r22, 0x0A	; 10
    4028:	79 e1       	ldi	r23, 0x19	; 25
    402a:	8e 2d       	mov	r24, r14
    402c:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <putChar_MidiChan>
    4030:	bc 01       	movw	r22, r24
    4032:	6f 5f       	subi	r22, 0xFF	; 255
    4034:	7f 4f       	sbci	r23, 0xFF	; 255
    4036:	0f 2e       	mov	r0, r31
    4038:	f8 e2       	ldi	r31, 0x28	; 40
    403a:	df 2e       	mov	r13, r31
    403c:	f0 2d       	mov	r31, r0
    403e:	fc 01       	movw	r30, r24
    4040:	d0 82       	st	Z, r13
    4042:	cc 0f       	add	r28, r28
    4044:	dd 1f       	adc	r29, r29
    4046:	cc 0f       	add	r28, r28
    4048:	dd 1f       	adc	r29, r29
    404a:	c0 0f       	add	r28, r16
    404c:	d1 1f       	adc	r29, r17
    404e:	cc 0f       	add	r28, r28
    4050:	dd 1f       	adc	r29, r29
    4052:	cc 0f       	add	r28, r28
    4054:	dd 1f       	adc	r29, r29
    4056:	c2 5b       	subi	r28, 0xB2	; 178
    4058:	d7 4f       	sbci	r29, 0xF7	; 247
    405a:	89 81       	ldd	r24, Y+1	; 0x01
    405c:	0e 94 b6 3d 	call	0x7b6c	; 0x7b6c <putChar_Note>
    4060:	bc 01       	movw	r22, r24
    4062:	6f 5f       	subi	r22, 0xFF	; 255
    4064:	7f 4f       	sbci	r23, 0xFF	; 255
    4066:	2d e2       	ldi	r18, 0x2D	; 45
    4068:	fc 01       	movw	r30, r24
    406a:	20 83       	st	Z, r18
    406c:	99 81       	ldd	r25, Y+1	; 0x01
    406e:	8a 81       	ldd	r24, Y+2	; 0x02
    4070:	89 0f       	add	r24, r25
    4072:	0e 94 b6 3d 	call	0x7b6c	; 0x7b6c <putChar_Note>
    4076:	fc 01       	movw	r30, r24
    4078:	19 e2       	ldi	r17, 0x29	; 41
    407a:	10 83       	st	Z, r17
    407c:	80 e2       	ldi	r24, 0x20	; 32
    407e:	81 83       	std	Z+1, r24	; 0x01
    4080:	bf 01       	movw	r22, r30
    4082:	6d 5f       	subi	r22, 0xFD	; 253
    4084:	7f 4f       	sbci	r23, 0xFF	; 255
    4086:	8e e3       	ldi	r24, 0x3E	; 62
    4088:	82 83       	std	Z+2, r24	; 0x02
    408a:	88 81       	ld	r24, Y
    408c:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <putChar_Manual>
    4090:	bc 01       	movw	r22, r24
    4092:	6f 5f       	subi	r22, 0xFF	; 255
    4094:	7f 4f       	sbci	r23, 0xFF	; 255
    4096:	fc 01       	movw	r30, r24
    4098:	d0 82       	st	Z, r13
    409a:	8b 81       	ldd	r24, Y+3	; 0x03
    409c:	0e 94 b6 3d 	call	0x7b6c	; 0x7b6c <putChar_Note>
    40a0:	fc 01       	movw	r30, r24
    40a2:	10 83       	st	Z, r17
    40a4:	11 82       	std	Z+1, r1	; 0x01
    40a6:	8a e0       	ldi	r24, 0x0A	; 10
    40a8:	99 e1       	ldi	r25, 0x19	; 25
    40aa:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    40ae:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    40b2:	9f ef       	ldi	r25, 0xFF	; 255
    40b4:	f3 94       	inc	r15
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <menuOnEnterUSBsendHW+0x442>
    40b8:	f1 2c       	mov	r15, r1
    40ba:	f3 e0       	ldi	r31, 0x03	; 3
    40bc:	ff 15       	cp	r31, r15
    40be:	08 f0       	brcs	.+2      	; 0x40c2 <menuOnEnterUSBsendHW+0x44a>
    40c0:	9d cf       	rjmp	.-198    	; 0x3ffc <menuOnEnterUSBsendHW+0x384>
    40c2:	e3 94       	inc	r14
    40c4:	8f e0       	ldi	r24, 0x0F	; 15
    40c6:	8e 15       	cp	r24, r14
    40c8:	b8 f7       	brcc	.-18     	; 0x40b8 <menuOnEnterUSBsendHW+0x440>
    40ca:	91 11       	cpse	r25, r1
    40cc:	06 c0       	rjmp	.+12     	; 0x40da <menuOnEnterUSBsendHW+0x462>
    40ce:	88 e1       	ldi	r24, 0x18	; 24
    40d0:	93 e0       	ldi	r25, 0x03	; 3
    40d2:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    40d6:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    40da:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    40de:	89 e2       	ldi	r24, 0x29	; 41
    40e0:	93 e0       	ldi	r25, 0x03	; 3
    40e2:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    40e6:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    40ea:	c0 e0       	ldi	r28, 0x00	; 0
    40ec:	25 c0       	rjmp	.+74     	; 0x4138 <menuOnEnterUSBsendHW+0x4c0>
    40ee:	6a e0       	ldi	r22, 0x0A	; 10
    40f0:	79 e1       	ldi	r23, 0x19	; 25
    40f2:	8c 2f       	mov	r24, r28
    40f4:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <putChar_Manual>
    40f8:	dc 01       	movw	r26, r24
    40fa:	bc 01       	movw	r22, r24
    40fc:	6f 5f       	subi	r22, 0xFF	; 255
    40fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4100:	8a e3       	ldi	r24, 0x3A	; 58
    4102:	8c 93       	st	X, r24
    4104:	ec 2f       	mov	r30, r28
    4106:	f0 e0       	ldi	r31, 0x00	; 0
    4108:	ee 0f       	add	r30, r30
    410a:	ff 1f       	adc	r31, r31
    410c:	e2 5b       	subi	r30, 0xB2	; 178
    410e:	f6 4f       	sbci	r31, 0xF6	; 246
    4110:	80 81       	ld	r24, Z
    4112:	8f 3f       	cpi	r24, 0xFF	; 255
    4114:	19 f0       	breq	.+6      	; 0x411c <menuOnEnterUSBsendHW+0x4a4>
    4116:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <putChar_MidiChan>
    411a:	05 c0       	rjmp	.+10     	; 0x4126 <menuOnEnterUSBsendHW+0x4ae>
    411c:	cd 01       	movw	r24, r26
    411e:	02 96       	adiw	r24, 0x02	; 2
    4120:	2d e2       	ldi	r18, 0x2D	; 45
    4122:	11 96       	adiw	r26, 0x01	; 1
    4124:	2c 93       	st	X, r18
    4126:	fc 01       	movw	r30, r24
    4128:	10 82       	st	Z, r1
    412a:	8a e0       	ldi	r24, 0x0A	; 10
    412c:	99 e1       	ldi	r25, 0x19	; 25
    412e:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    4132:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    4136:	cf 5f       	subi	r28, 0xFF	; 255
    4138:	c4 30       	cpi	r28, 0x04	; 4
    413a:	c8 f2       	brcs	.-78     	; 0x40ee <menuOnEnterUSBsendHW+0x476>
    413c:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    4140:	8d e1       	ldi	r24, 0x1D	; 29
    4142:	93 e0       	ldi	r25, 0x03	; 3
    4144:	0e 94 9a 3a 	call	0x7534	; 0x7534 <serial0SER_USB_sendStringP>
    4148:	cc e4       	ldi	r28, 0x4C	; 76
    414a:	d8 e0       	ldi	r29, 0x08	; 8
    414c:	6a e0       	ldi	r22, 0x0A	; 10
    414e:	79 e1       	ldi	r23, 0x19	; 25
    4150:	88 81       	ld	r24, Y
    4152:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <putChar_MidiChan>
    4156:	bc 01       	movw	r22, r24
    4158:	6f 5f       	subi	r22, 0xFF	; 255
    415a:	7f 4f       	sbci	r23, 0xFF	; 255
    415c:	2e e3       	ldi	r18, 0x3E	; 62
    415e:	fc 01       	movw	r30, r24
    4160:	20 83       	st	Z, r18
    4162:	89 81       	ldd	r24, Y+1	; 0x01
    4164:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <putChar_MidiChan>
    4168:	fc 01       	movw	r30, r24
    416a:	10 82       	st	Z, r1
    416c:	8a e0       	ldi	r24, 0x0A	; 10
    416e:	99 e1       	ldi	r25, 0x19	; 25
    4170:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <serial0SER_USB_sendString>
    4174:	0e 94 ac 3a 	call	0x7558	; 0x7558 <serial0SER_USB_sendCRLF>
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	df 91       	pop	r29
    417c:	cf 91       	pop	r28
    417e:	1f 91       	pop	r17
    4180:	0f 91       	pop	r16
    4182:	ff 90       	pop	r15
    4184:	ef 90       	pop	r14
    4186:	df 90       	pop	r13
    4188:	cf 90       	pop	r12
    418a:	bf 90       	pop	r11
    418c:	af 90       	pop	r10
    418e:	9f 90       	pop	r9
    4190:	08 95       	ret

00004192 <reverseRegisterBits>:
    4192:	1f 93       	push	r17
    4194:	cf 93       	push	r28
    4196:	df 93       	push	r29
    4198:	10 e0       	ldi	r17, 0x00	; 0
    419a:	09 c0       	rjmp	.+18     	; 0x41ae <reverseRegisterBits+0x1c>
    419c:	c1 2f       	mov	r28, r17
    419e:	d0 e0       	ldi	r29, 0x00	; 0
    41a0:	cd 56       	subi	r28, 0x6D	; 109
    41a2:	da 4f       	sbci	r29, 0xFA	; 250
    41a4:	88 81       	ld	r24, Y
    41a6:	0e 94 b1 3f 	call	0x7f62	; 0x7f62 <reverse_Bits>
    41aa:	88 83       	st	Y, r24
    41ac:	1f 5f       	subi	r17, 0xFF	; 255
    41ae:	18 30       	cpi	r17, 0x08	; 8
    41b0:	a8 f3       	brcs	.-22     	; 0x419c <reverseRegisterBits+0xa>
    41b2:	df 91       	pop	r29
    41b4:	cf 91       	pop	r28
    41b6:	1f 91       	pop	r17
    41b8:	08 95       	ret

000041ba <menuOnUpdateRegister>:
    41ba:	83 e9       	ldi	r24, 0x93	; 147
    41bc:	95 e0       	ldi	r25, 0x05	; 5
    41be:	0e 94 75 31 	call	0x62ea	; 0x62ea <read_allRegister>
    41c2:	e7 df       	rcall	.-50     	; 0x4192 <reverseRegisterBits>
    41c4:	80 e0       	ldi	r24, 0x00	; 0
    41c6:	08 95       	ret

000041c8 <menuOnEnterResetReg>:
    41c8:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <midi_resetRegisters>
    41cc:	80 e0       	ldi	r24, 0x00	; 0
    41ce:	f5 df       	rcall	.-22     	; 0x41ba <menuOnUpdateRegister>
    41d0:	80 e0       	ldi	r24, 0x00	; 0
    41d2:	08 95       	ret

000041d4 <menuOnExitLoadProgran>:
    41d4:	86 30       	cpi	r24, 0x06	; 6
    41d6:	31 f0       	breq	.+12     	; 0x41e4 <menuOnExitLoadProgran+0x10>
    41d8:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <menuVKombination>
    41dc:	80 34       	cpi	r24, 0x40	; 64
    41de:	10 f4       	brcc	.+4      	; 0x41e4 <menuOnExitLoadProgran+0x10>
    41e0:	0e 94 56 32 	call	0x64ac	; 0x64ac <program_toRegister>
    41e4:	80 e0       	ldi	r24, 0x00	; 0
    41e6:	e9 df       	rcall	.-46     	; 0x41ba <menuOnUpdateRegister>
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	08 95       	ret

000041ec <softkeyCoupler>:
    41ec:	cf 93       	push	r28
    41ee:	c6 2f       	mov	r28, r22
    41f0:	88 23       	and	r24, r24
    41f2:	d9 f0       	breq	.+54     	; 0x422a <softkeyCoupler+0x3e>
    41f4:	e6 2f       	mov	r30, r22
    41f6:	f0 e0       	ldi	r31, 0x00	; 0
    41f8:	df 01       	movw	r26, r30
    41fa:	a9 5c       	subi	r26, 0xC9	; 201
    41fc:	b7 4f       	sbci	r27, 0xF7	; 247
    41fe:	8c 91       	ld	r24, X
    4200:	81 11       	cpse	r24, r1
    4202:	08 c0       	rjmp	.+16     	; 0x4214 <softkeyCoupler+0x28>
    4204:	86 2f       	mov	r24, r22
    4206:	0e 94 cc 2f 	call	0x5f98	; 0x5f98 <set_Coupler>
    420a:	88 23       	and	r24, r24
    420c:	71 f0       	breq	.+28     	; 0x422a <softkeyCoupler+0x3e>
    420e:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <midi_ManualOff>
    4212:	0b c0       	rjmp	.+22     	; 0x422a <softkeyCoupler+0x3e>
    4214:	df 01       	movw	r26, r30
    4216:	a9 5c       	subi	r26, 0xC9	; 201
    4218:	b7 4f       	sbci	r27, 0xF7	; 247
    421a:	1c 92       	st	X, r1
    421c:	ee 0f       	add	r30, r30
    421e:	ff 1f       	adc	r31, r31
    4220:	e0 59       	subi	r30, 0x90	; 144
    4222:	fb 4e       	sbci	r31, 0xEB	; 235
    4224:	84 91       	lpm	r24, Z
    4226:	0e 94 36 36 	call	0x6c6c	; 0x6c6c <midi_ManualOff>
    422a:	ec 2f       	mov	r30, r28
    422c:	f0 e0       	ldi	r31, 0x00	; 0
    422e:	e9 5c       	subi	r30, 0xC9	; 201
    4230:	f7 4f       	sbci	r31, 0xF7	; 247
    4232:	80 81       	ld	r24, Z
    4234:	81 11       	cpse	r24, r1
    4236:	02 c0       	rjmp	.+4      	; 0x423c <softkeyCoupler+0x50>
    4238:	82 e8       	ldi	r24, 0x82	; 130
    423a:	01 c0       	rjmp	.+2      	; 0x423e <softkeyCoupler+0x52>
    423c:	81 e8       	ldi	r24, 0x81	; 129
    423e:	cf 91       	pop	r28
    4240:	08 95       	ret

00004242 <softKeyCoupler2from3>:
    4242:	60 e0       	ldi	r22, 0x00	; 0
    4244:	d3 cf       	rjmp	.-90     	; 0x41ec <softkeyCoupler>
    4246:	08 95       	ret

00004248 <softKeyCoupler1from3>:
    4248:	61 e0       	ldi	r22, 0x01	; 1
    424a:	d0 cf       	rjmp	.-96     	; 0x41ec <softkeyCoupler>
    424c:	08 95       	ret

0000424e <softKeyCouplerPfrom3>:
    424e:	63 e0       	ldi	r22, 0x03	; 3
    4250:	cd cf       	rjmp	.-102    	; 0x41ec <softkeyCoupler>
    4252:	08 95       	ret

00004254 <softKeyCoupler1from2>:
    4254:	62 e0       	ldi	r22, 0x02	; 2
    4256:	ca cf       	rjmp	.-108    	; 0x41ec <softkeyCoupler>
    4258:	08 95       	ret

0000425a <softKeyCouplerPfrom2>:
    425a:	64 e0       	ldi	r22, 0x04	; 4
    425c:	c7 cf       	rjmp	.-114    	; 0x41ec <softkeyCoupler>
    425e:	08 95       	ret

00004260 <softKeyCouplerPfrom1>:
    4260:	65 e0       	ldi	r22, 0x05	; 5
    4262:	c4 cf       	rjmp	.-120    	; 0x41ec <softkeyCoupler>
    4264:	08 95       	ret

00004266 <softKeyCoupler3from2>:
    4266:	66 e0       	ldi	r22, 0x06	; 6
    4268:	c1 cf       	rjmp	.-126    	; 0x41ec <softkeyCoupler>
    426a:	08 95       	ret

0000426c <softKeyCoupler3from1>:
    426c:	67 e0       	ldi	r22, 0x07	; 7
    426e:	be cf       	rjmp	.-132    	; 0x41ec <softkeyCoupler>
    4270:	08 95       	ret

00004272 <softKeyCoupler3fromP>:
    4272:	69 e0       	ldi	r22, 0x09	; 9
    4274:	bb cf       	rjmp	.-138    	; 0x41ec <softkeyCoupler>
    4276:	08 95       	ret

00004278 <softKeyCoupler2from1>:
    4278:	68 e0       	ldi	r22, 0x08	; 8
    427a:	b8 cf       	rjmp	.-144    	; 0x41ec <softkeyCoupler>
    427c:	08 95       	ret

0000427e <softKeyCoupler2fromP>:
    427e:	6a e0       	ldi	r22, 0x0A	; 10
    4280:	b5 cf       	rjmp	.-150    	; 0x41ec <softkeyCoupler>
    4282:	08 95       	ret

00004284 <softKeyCoupler1fromP>:
    4284:	6b e0       	ldi	r22, 0x0B	; 11
    4286:	b2 cf       	rjmp	.-156    	; 0x41ec <softkeyCoupler>
    4288:	08 95       	ret

0000428a <menuDisplaySaveMessage>:
    428a:	cf 93       	push	r28
    428c:	c6 2f       	mov	r28, r22
    428e:	6a e0       	ldi	r22, 0x0A	; 10
    4290:	79 e1       	ldi	r23, 0x19	; 25
    4292:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <putChar_Dec>
    4296:	bc 01       	movw	r22, r24
    4298:	82 e3       	ldi	r24, 0x32	; 50
    429a:	94 e0       	ldi	r25, 0x04	; 4
    429c:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <putString_P>
    42a0:	6c 2f       	mov	r22, r28
    42a2:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <putString_Prog>
    42a6:	8a e0       	ldi	r24, 0x0A	; 10
    42a8:	99 e1       	ldi	r25, 0x19	; 25
    42aa:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <lcd_message>
    42ae:	cf 91       	pop	r28
    42b0:	08 95       	ret

000042b2 <softKeyPrSet>:
    42b2:	cf 93       	push	r28
    42b4:	df 93       	push	r29
    42b6:	88 23       	and	r24, r24
    42b8:	79 f0       	breq	.+30     	; 0x42d8 <softKeyPrSet+0x26>
    42ba:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    42be:	c0 34       	cpi	r28, 0x40	; 64
    42c0:	58 f4       	brcc	.+22     	; 0x42d8 <softKeyPrSet+0x26>
    42c2:	dc 2f       	mov	r29, r28
    42c4:	d0 68       	ori	r29, 0x80	; 128
    42c6:	6f ef       	ldi	r22, 0xFF	; 255
    42c8:	8c 2f       	mov	r24, r28
    42ca:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <register_toProgram>
    42ce:	6c 2f       	mov	r22, r28
    42d0:	dc df       	rcall	.-72     	; 0x428a <menuDisplaySaveMessage>
    42d2:	8d 2f       	mov	r24, r29
    42d4:	0e 94 4c 32 	call	0x6498	; 0x6498 <prog_set>
    42d8:	80 e0       	ldi	r24, 0x00	; 0
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	08 95       	ret

000042e0 <menuDisplayLoadMessage>:
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	cf 93       	push	r28
    42e6:	c8 2f       	mov	r28, r24
    42e8:	8a e0       	ldi	r24, 0x0A	; 10
    42ea:	99 e1       	ldi	r25, 0x19	; 25
    42ec:	0e 94 41 3e 	call	0x7c82	; 0x7c82 <putString_Prog>
    42f0:	bc 01       	movw	r22, r24
    42f2:	6f 5f       	subi	r22, 0xFF	; 255
    42f4:	7f 4f       	sbci	r23, 0xFF	; 255
    42f6:	2e e7       	ldi	r18, 0x7E	; 126
    42f8:	fc 01       	movw	r30, r24
    42fa:	20 83       	st	Z, r18
    42fc:	8c 2f       	mov	r24, r28
    42fe:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <putChar_Dec>
    4302:	bc 01       	movw	r22, r24
    4304:	8d e2       	ldi	r24, 0x2D	; 45
    4306:	94 e0       	ldi	r25, 0x04	; 4
    4308:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <putString_P>
    430c:	8c 01       	movw	r16, r24
    430e:	0e 94 a1 10 	call	0x2142	; 0x2142 <module_WaitOutputInput2Cycles>
    4312:	84 e0       	ldi	r24, 0x04	; 4
    4314:	0e 94 61 31 	call	0x62c2	; 0x62c2 <count_Registers>
    4318:	c8 2f       	mov	r28, r24
    431a:	88 23       	and	r24, r24
    431c:	49 f0       	breq	.+18     	; 0x4330 <menuDisplayLoadMessage+0x50>
    431e:	b8 01       	movw	r22, r16
    4320:	8b e2       	ldi	r24, 0x2B	; 43
    4322:	94 e0       	ldi	r25, 0x04	; 4
    4324:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <putString_P>
    4328:	bc 01       	movw	r22, r24
    432a:	8c 2f       	mov	r24, r28
    432c:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <putChar_Dec>
    4330:	8a e0       	ldi	r24, 0x0A	; 10
    4332:	99 e1       	ldi	r25, 0x19	; 25
    4334:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <lcd_message>
    4338:	cf 91       	pop	r28
    433a:	1f 91       	pop	r17
    433c:	0f 91       	pop	r16
    433e:	08 95       	ret

00004340 <send_progrChange_toMidiThru>:
    4340:	cf 93       	push	r28
    4342:	80 34       	cpi	r24, 0x40	; 64
    4344:	58 f4       	brcc	.+22     	; 0x435c <send_progrChange_toMidiThru+0x1c>
    4346:	60 91 4d 08 	lds	r22, 0x084D	; 0x80084d <midiThrough+0x1>
    434a:	6f 3f       	cpi	r22, 0xFF	; 255
    434c:	39 f0       	breq	.+14     	; 0x435c <send_progrChange_toMidiThru+0x1c>
    434e:	c8 2f       	mov	r28, r24
    4350:	80 ec       	ldi	r24, 0xC0	; 192
    4352:	0e 94 63 3a 	call	0x74c6	; 0x74c6 <serial1MIDISendCmd>
    4356:	8c 2f       	mov	r24, r28
    4358:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial1MIDISendData>
    435c:	cf 91       	pop	r28
    435e:	08 95       	ret

00004360 <handle_programKey>:
    4360:	cf 93       	push	r28
    4362:	c6 2f       	mov	r28, r22
    4364:	88 23       	and	r24, r24
    4366:	3c f4       	brge	.+14     	; 0x4376 <handle_programKey+0x16>
    4368:	6f ef       	ldi	r22, 0xFF	; 255
    436a:	8c 2f       	mov	r24, r28
    436c:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <register_toProgram>
    4370:	6c 2f       	mov	r22, r28
    4372:	8b df       	rcall	.-234    	; 0x428a <menuDisplaySaveMessage>
    4374:	09 c0       	rjmp	.+18     	; 0x4388 <handle_programKey+0x28>
    4376:	88 23       	and	r24, r24
    4378:	39 f0       	breq	.+14     	; 0x4388 <handle_programKey+0x28>
    437a:	86 2f       	mov	r24, r22
    437c:	0e 94 56 32 	call	0x64ac	; 0x64ac <program_toRegister>
    4380:	6c 2f       	mov	r22, r28
    4382:	ae df       	rcall	.-164    	; 0x42e0 <menuDisplayLoadMessage>
    4384:	8c 2f       	mov	r24, r28
    4386:	dc df       	rcall	.-72     	; 0x4340 <send_progrChange_toMidiThru>
    4388:	8c 2f       	mov	r24, r28
    438a:	0e 94 00 32 	call	0x6400	; 0x6400 <midi_CountRegisterInProgram>
    438e:	88 23       	and	r24, r24
    4390:	39 f0       	breq	.+14     	; 0x43a0 <handle_programKey+0x40>
    4392:	8c 2f       	mov	r24, r28
    4394:	0e 94 c6 31 	call	0x638c	; 0x638c <midi_RegisterMatchProgram>
    4398:	81 11       	cpse	r24, r1
    439a:	04 c0       	rjmp	.+8      	; 0x43a4 <handle_programKey+0x44>
    439c:	81 e8       	ldi	r24, 0x81	; 129
    439e:	03 c0       	rjmp	.+6      	; 0x43a6 <handle_programKey+0x46>
    43a0:	82 e8       	ldi	r24, 0x82	; 130
    43a2:	01 c0       	rjmp	.+2      	; 0x43a6 <handle_programKey+0x46>
    43a4:	82 e8       	ldi	r24, 0x82	; 130
    43a6:	cf 91       	pop	r28
    43a8:	08 95       	ret

000043aa <softKeyK1A>:
    43aa:	60 e0       	ldi	r22, 0x00	; 0
    43ac:	d9 cf       	rjmp	.-78     	; 0x4360 <handle_programKey>
    43ae:	08 95       	ret

000043b0 <softKeyK2A>:
    43b0:	61 e0       	ldi	r22, 0x01	; 1
    43b2:	d6 cf       	rjmp	.-84     	; 0x4360 <handle_programKey>
    43b4:	08 95       	ret

000043b6 <softKeyK3A>:
    43b6:	62 e0       	ldi	r22, 0x02	; 2
    43b8:	d3 cf       	rjmp	.-90     	; 0x4360 <handle_programKey>
    43ba:	08 95       	ret

000043bc <softKeyK4A>:
    43bc:	63 e0       	ldi	r22, 0x03	; 3
    43be:	d0 cf       	rjmp	.-96     	; 0x4360 <handle_programKey>
    43c0:	08 95       	ret

000043c2 <softKeyUpdateProg>:
    43c2:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    43c6:	80 34       	cpi	r24, 0x40	; 64
    43c8:	30 f4       	brcc	.+12     	; 0x43d6 <softKeyUpdateProg+0x14>
    43ca:	ba df       	rcall	.-140    	; 0x4340 <send_progrChange_toMidiThru>
    43cc:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    43d0:	0e 94 56 32 	call	0x64ac	; 0x64ac <program_toRegister>
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <softKeyUpdateProg+0x18>
    43d6:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <midi_resetRegisters>
    43da:	8f ef       	ldi	r24, 0xFF	; 255
    43dc:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
    43e0:	08 95       	ret

000043e2 <softKeyPBInc>:
    43e2:	88 23       	and	r24, r24
    43e4:	39 f0       	breq	.+14     	; 0x43f4 <softKeyPBInc+0x12>
    43e6:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    43ea:	88 5f       	subi	r24, 0xF8	; 248
    43ec:	88 73       	andi	r24, 0x38	; 56
    43ee:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    43f2:	e7 df       	rcall	.-50     	; 0x43c2 <softKeyUpdateProg>
    43f4:	80 e0       	ldi	r24, 0x00	; 0
    43f6:	08 95       	ret

000043f8 <softKeyPBDec>:
    43f8:	88 23       	and	r24, r24
    43fa:	39 f0       	breq	.+14     	; 0x440a <softKeyPBDec+0x12>
    43fc:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4400:	88 50       	subi	r24, 0x08	; 8
    4402:	88 73       	andi	r24, 0x38	; 56
    4404:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4408:	dc df       	rcall	.-72     	; 0x43c2 <softKeyUpdateProg>
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	08 95       	ret

0000440e <progDec>:
    440e:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4412:	8f 3f       	cpi	r24, 0xFF	; 255
    4414:	21 f4       	brne	.+8      	; 0x441e <progDec+0x10>
    4416:	8f e3       	ldi	r24, 0x3F	; 63
    4418:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    441c:	08 95       	ret
    441e:	80 34       	cpi	r24, 0x40	; 64
    4420:	20 f4       	brcc	.+8      	; 0x442a <progDec+0x1c>
    4422:	81 50       	subi	r24, 0x01	; 1
    4424:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4428:	08 95       	ret
    442a:	8f 77       	andi	r24, 0x7F	; 127
    442c:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4430:	08 95       	ret

00004432 <softKeyPrM>:
    4432:	cf 93       	push	r28
    4434:	88 23       	and	r24, r24
    4436:	4c f4       	brge	.+18     	; 0x444a <softKeyPrM+0x18>
    4438:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    443c:	c0 68       	ori	r28, 0x80	; 128
    443e:	0e 94 e1 32 	call	0x65c2	; 0x65c2 <midi_resetRegisters>
    4442:	8c 2f       	mov	r24, r28
    4444:	0e 94 4c 32 	call	0x6498	; 0x6498 <prog_set>
    4448:	04 c0       	rjmp	.+8      	; 0x4452 <softKeyPrM+0x20>
    444a:	88 23       	and	r24, r24
    444c:	11 f0       	breq	.+4      	; 0x4452 <softKeyPrM+0x20>
    444e:	df df       	rcall	.-66     	; 0x440e <progDec>
    4450:	b8 df       	rcall	.-144    	; 0x43c2 <softKeyUpdateProg>
    4452:	80 e0       	ldi	r24, 0x00	; 0
    4454:	cf 91       	pop	r28
    4456:	08 95       	ret

00004458 <softKeyPrDec>:
    4458:	88 23       	and	r24, r24
    445a:	69 f0       	breq	.+26     	; 0x4476 <softKeyPrDec+0x1e>
    445c:	4c f4       	brge	.+18     	; 0x4470 <softKeyPrDec+0x18>
    445e:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    4462:	80 34       	cpi	r24, 0x40	; 64
    4464:	38 f4       	brcc	.+14     	; 0x4474 <softKeyPrDec+0x1c>
    4466:	88 50       	subi	r24, 0x08	; 8
    4468:	88 73       	andi	r24, 0x38	; 56
    446a:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    446e:	02 c0       	rjmp	.+4      	; 0x4474 <softKeyPrDec+0x1c>
    4470:	81 11       	cpse	r24, r1
    4472:	cd df       	rcall	.-102    	; 0x440e <progDec>
    4474:	a6 df       	rcall	.-180    	; 0x43c2 <softKeyUpdateProg>
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	08 95       	ret

0000447a <progInc>:
    447a:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    447e:	8f 33       	cpi	r24, 0x3F	; 63
    4480:	21 f4       	brne	.+8      	; 0x448a <progInc+0x10>
    4482:	8f ef       	ldi	r24, 0xFF	; 255
    4484:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4488:	08 95       	ret
    448a:	8f 33       	cpi	r24, 0x3F	; 63
    448c:	20 f4       	brcc	.+8      	; 0x4496 <progInc+0x1c>
    448e:	8f 5f       	subi	r24, 0xFF	; 255
    4490:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    4494:	08 95       	ret
    4496:	8f 3f       	cpi	r24, 0xFF	; 255
    4498:	19 f4       	brne	.+6      	; 0x44a0 <progInc+0x26>
    449a:	10 92 1c 08 	sts	0x081C, r1	; 0x80081c <prog_Display>
    449e:	08 95       	ret
    44a0:	8f 77       	andi	r24, 0x7F	; 127
    44a2:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    44a6:	08 95       	ret

000044a8 <softKeyPrP>:
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	88 23       	and	r24, r24
    44ae:	84 f4       	brge	.+32     	; 0x44d0 <softKeyPrP+0x28>
    44b0:	c0 91 1c 08 	lds	r28, 0x081C	; 0x80081c <prog_Display>
    44b4:	c0 34       	cpi	r28, 0x40	; 64
    44b6:	80 f4       	brcc	.+32     	; 0x44d8 <softKeyPrP+0x30>
    44b8:	dc 2f       	mov	r29, r28
    44ba:	d0 68       	ori	r29, 0x80	; 128
    44bc:	6f ef       	ldi	r22, 0xFF	; 255
    44be:	8c 2f       	mov	r24, r28
    44c0:	0e 94 f0 32 	call	0x65e0	; 0x65e0 <register_toProgram>
    44c4:	6c 2f       	mov	r22, r28
    44c6:	e1 de       	rcall	.-574    	; 0x428a <menuDisplaySaveMessage>
    44c8:	8d 2f       	mov	r24, r29
    44ca:	0e 94 4c 32 	call	0x6498	; 0x6498 <prog_set>
    44ce:	04 c0       	rjmp	.+8      	; 0x44d8 <softKeyPrP+0x30>
    44d0:	88 23       	and	r24, r24
    44d2:	11 f0       	breq	.+4      	; 0x44d8 <softKeyPrP+0x30>
    44d4:	d2 df       	rcall	.-92     	; 0x447a <progInc>
    44d6:	75 df       	rcall	.-278    	; 0x43c2 <softKeyUpdateProg>
    44d8:	80 e0       	ldi	r24, 0x00	; 0
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	08 95       	ret

000044e0 <softKeyPrInc>:
    44e0:	88 23       	and	r24, r24
    44e2:	69 f0       	breq	.+26     	; 0x44fe <softKeyPrInc+0x1e>
    44e4:	4c f4       	brge	.+18     	; 0x44f8 <softKeyPrInc+0x18>
    44e6:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    44ea:	80 34       	cpi	r24, 0x40	; 64
    44ec:	38 f4       	brcc	.+14     	; 0x44fc <softKeyPrInc+0x1c>
    44ee:	88 5f       	subi	r24, 0xF8	; 248
    44f0:	88 73       	andi	r24, 0x38	; 56
    44f2:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    44f6:	02 c0       	rjmp	.+4      	; 0x44fc <softKeyPrInc+0x1c>
    44f8:	81 11       	cpse	r24, r1
    44fa:	bf df       	rcall	.-130    	; 0x447a <progInc>
    44fc:	62 df       	rcall	.-316    	; 0x43c2 <softKeyUpdateProg>
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	08 95       	ret

00004502 <menuLCDwriteOK>:
    4502:	82 e1       	ldi	r24, 0x12	; 18
    4504:	94 e0       	ldi	r25, 0x04	; 4
    4506:	0c 94 3d 15 	jmp	0x2a7a	; 0x2a7a <lcd_message_P>
    450a:	08 95       	ret

0000450c <menuOnEnterEEBackup>:
    450c:	8e e1       	ldi	r24, 0x1E	; 30
    450e:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    4512:	85 ef       	ldi	r24, 0xF5	; 245
    4514:	93 e0       	ldi	r25, 0x03	; 3
    4516:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    451a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <eeprom_Backup>
    451e:	f1 df       	rcall	.-30     	; 0x4502 <menuLCDwriteOK>
    4520:	80 e0       	ldi	r24, 0x00	; 0
    4522:	08 95       	ret

00004524 <menuOnEnterEERestore>:
    4524:	8e e1       	ldi	r24, 0x1E	; 30
    4526:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    452a:	85 ef       	ldi	r24, 0xF5	; 245
    452c:	93 e0       	ldi	r25, 0x03	; 3
    452e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    4532:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <eeprom_Restore>
    4536:	e5 df       	rcall	.-54     	; 0x4502 <menuLCDwriteOK>
    4538:	80 e0       	ldi	r24, 0x00	; 0
    453a:	08 95       	ret

0000453c <menuOnEnterEEUpdate>:
    453c:	85 ef       	ldi	r24, 0xF5	; 245
    453e:	93 e0       	ldi	r25, 0x03	; 3
    4540:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    4544:	8e e1       	ldi	r24, 0x1E	; 30
    4546:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    454a:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <eeprom_UpdateALL>
    454e:	d9 df       	rcall	.-78     	; 0x4502 <menuLCDwriteOK>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	08 95       	ret

00004554 <menu_Init>:
    4554:	10 92 8e 05 	sts	0x058E, r1	; 0x80058e <menuStackIndex>
    4558:	00 97       	sbiw	r24, 0x00	; 0
    455a:	69 f4       	brne	.+26     	; 0x4576 <menu_Init+0x22>
    455c:	8a e3       	ldi	r24, 0x3A	; 58
    455e:	98 e0       	ldi	r25, 0x08	; 8
    4560:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    4564:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    4568:	83 e4       	ldi	r24, 0x43	; 67
    456a:	94 e0       	ldi	r25, 0x04	; 4
    456c:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <pMenuTopTitle+0x1>
    4570:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <pMenuTopTitle>
    4574:	08 c0       	rjmp	.+16     	; 0x4586 <menu_Init+0x32>
    4576:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    457a:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    457e:	70 93 c3 05 	sts	0x05C3, r23	; 0x8005c3 <pMenuTopTitle+0x1>
    4582:	60 93 c2 05 	sts	0x05C2, r22	; 0x8005c2 <pMenuTopTitle>
    4586:	8f ef       	ldi	r24, 0xFF	; 255
    4588:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    458c:	8d e4       	ldi	r24, 0x4D	; 77
    458e:	94 e0       	ldi	r25, 0x04	; 4
    4590:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <pNibbleInfo+0x1>
    4594:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <pNibbleInfo>
    4598:	08 95       	ret

0000459a <softkeyLeft>:
    459a:	6a ea       	ldi	r22, 0xAA	; 170
    459c:	74 e1       	ldi	r23, 0x14	; 20
    459e:	82 e0       	ldi	r24, 0x02	; 2
    45a0:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    45a4:	08 95       	ret

000045a6 <softkeyRight>:
    45a6:	6c ea       	ldi	r22, 0xAC	; 172
    45a8:	74 e1       	ldi	r23, 0x14	; 20
    45aa:	83 e0       	ldi	r24, 0x03	; 3
    45ac:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    45b0:	08 95       	ret

000045b2 <softkeyDown>:
    45b2:	6e ea       	ldi	r22, 0xAE	; 174
    45b4:	74 e1       	ldi	r23, 0x14	; 20
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    45bc:	08 95       	ret

000045be <softkeyOn>:
    45be:	6c e9       	ldi	r22, 0x9C	; 156
    45c0:	74 e1       	ldi	r23, 0x14	; 20
    45c2:	81 e0       	ldi	r24, 0x01	; 1
    45c4:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    45c8:	08 95       	ret

000045ca <softkeyOff>:
    45ca:	67 e9       	ldi	r22, 0x97	; 151
    45cc:	74 e1       	ldi	r23, 0x14	; 20
    45ce:	81 e0       	ldi	r24, 0x01	; 1
    45d0:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    45d4:	08 95       	ret

000045d6 <softkeyUp>:
    45d6:	60 eb       	ldi	r22, 0xB0	; 176
    45d8:	74 e1       	ldi	r23, 0x14	; 20
    45da:	80 e0       	ldi	r24, 0x00	; 0
    45dc:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    45e0:	08 95       	ret

000045e2 <softkeyPlus>:
    45e2:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    45e6:	8a 30       	cpi	r24, 0x0A	; 10
    45e8:	11 f0       	breq	.+4      	; 0x45ee <softkeyPlus+0xc>
    45ea:	8e 30       	cpi	r24, 0x0E	; 14
    45ec:	31 f4       	brne	.+12     	; 0x45fa <softkeyPlus+0x18>
    45ee:	68 e8       	ldi	r22, 0x88	; 136
    45f0:	74 e1       	ldi	r23, 0x14	; 20
    45f2:	80 e0       	ldi	r24, 0x00	; 0
    45f4:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    45f8:	08 95       	ret
    45fa:	68 ea       	ldi	r22, 0xA8	; 168
    45fc:	74 e1       	ldi	r23, 0x14	; 20
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    4604:	08 95       	ret

00004606 <softkeyMinus>:
    4606:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    460a:	8a 30       	cpi	r24, 0x0A	; 10
    460c:	11 f0       	breq	.+4      	; 0x4612 <softkeyMinus+0xc>
    460e:	8e 30       	cpi	r24, 0x0E	; 14
    4610:	31 f4       	brne	.+12     	; 0x461e <softkeyMinus+0x18>
    4612:	6a e8       	ldi	r22, 0x8A	; 138
    4614:	74 e1       	ldi	r23, 0x14	; 20
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    461c:	08 95       	ret
    461e:	66 ea       	ldi	r22, 0xA6	; 166
    4620:	74 e1       	ldi	r23, 0x14	; 20
    4622:	81 e0       	ldi	r24, 0x01	; 1
    4624:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <keylabel_set>
    4628:	08 95       	ret

0000462a <dataToNibbles>:
    462a:	cf 93       	push	r28
    462c:	df 93       	push	r29
    462e:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4632:	8e 2f       	mov	r24, r30
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	fc 01       	movw	r30, r24
    4638:	32 97       	sbiw	r30, 0x02	; 2
    463a:	ed 30       	cpi	r30, 0x0D	; 13
    463c:	f1 05       	cpc	r31, r1
    463e:	08 f0       	brcs	.+2      	; 0x4642 <dataToNibbles+0x18>
    4640:	e4 c0       	rjmp	.+456    	; 0x480a <dataToNibbles+0x1e0>
    4642:	88 27       	eor	r24, r24
    4644:	ee 58       	subi	r30, 0x8E	; 142
    4646:	ff 4f       	sbci	r31, 0xFF	; 255
    4648:	8f 4f       	sbci	r24, 0xFF	; 255
    464a:	0c 94 be 3f 	jmp	0x7f7c	; 0x7f7c <__tablejump2__>
    464e:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4652:	ea ee       	ldi	r30, 0xEA	; 234
    4654:	f5 e0       	ldi	r31, 0x05	; 5
    4656:	98 2f       	mov	r25, r24
    4658:	92 95       	swap	r25
    465a:	9f 70       	andi	r25, 0x0F	; 15
    465c:	90 83       	st	Z, r25
    465e:	8f 70       	andi	r24, 0x0F	; 15
    4660:	81 83       	std	Z+1, r24	; 0x01
    4662:	d3 c0       	rjmp	.+422    	; 0x480a <dataToNibbles+0x1e0>
    4664:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4668:	80 31       	cpi	r24, 0x10	; 16
    466a:	20 f0       	brcs	.+8      	; 0x4674 <dataToNibbles+0x4a>
    466c:	8f ef       	ldi	r24, 0xFF	; 255
    466e:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4672:	cb c0       	rjmp	.+406    	; 0x480a <dataToNibbles+0x1e0>
    4674:	8f 5f       	subi	r24, 0xFF	; 255
    4676:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    467a:	c7 c0       	rjmp	.+398    	; 0x480a <dataToNibbles+0x1e0>
    467c:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4680:	88 23       	and	r24, r24
    4682:	34 f4       	brge	.+12     	; 0x4690 <dataToNibbles+0x66>
    4684:	ea ee       	ldi	r30, 0xEA	; 234
    4686:	f5 e0       	ldi	r31, 0x05	; 5
    4688:	10 82       	st	Z, r1
    468a:	8f ef       	ldi	r24, 0xFF	; 255
    468c:	81 83       	std	Z+1, r24	; 0x01
    468e:	bd c0       	rjmp	.+378    	; 0x480a <dataToNibbles+0x1e0>
    4690:	10 92 eb 05 	sts	0x05EB, r1	; 0x8005eb <nibble+0x1>
    4694:	08 c0       	rjmp	.+16     	; 0x46a6 <dataToNibbles+0x7c>
    4696:	ea ee       	ldi	r30, 0xEA	; 234
    4698:	f5 e0       	ldi	r31, 0x05	; 5
    469a:	91 81       	ldd	r25, Z+1	; 0x01
    469c:	9f 5f       	subi	r25, 0xFF	; 255
    469e:	91 83       	std	Z+1, r25	; 0x01
    46a0:	8c 50       	subi	r24, 0x0C	; 12
    46a2:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    46a6:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46aa:	8c 30       	cpi	r24, 0x0C	; 12
    46ac:	a0 f7       	brcc	.-24     	; 0x4696 <dataToNibbles+0x6c>
    46ae:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    46b2:	ab c0       	rjmp	.+342    	; 0x480a <dataToNibbles+0x1e0>
    46b4:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46b8:	ea ee       	ldi	r30, 0xEA	; 234
    46ba:	f5 e0       	ldi	r31, 0x05	; 5
    46bc:	98 2f       	mov	r25, r24
    46be:	92 95       	swap	r25
    46c0:	96 95       	lsr	r25
    46c2:	97 70       	andi	r25, 0x07	; 7
    46c4:	90 83       	st	Z, r25
    46c6:	8f 71       	andi	r24, 0x1F	; 31
    46c8:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    46cc:	11 82       	std	Z+1, r1	; 0x01
    46ce:	08 c0       	rjmp	.+16     	; 0x46e0 <dataToNibbles+0xb6>
    46d0:	ea ee       	ldi	r30, 0xEA	; 234
    46d2:	f5 e0       	ldi	r31, 0x05	; 5
    46d4:	91 81       	ldd	r25, Z+1	; 0x01
    46d6:	9f 5f       	subi	r25, 0xFF	; 255
    46d8:	91 83       	std	Z+1, r25	; 0x01
    46da:	8a 50       	subi	r24, 0x0A	; 10
    46dc:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    46e0:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    46e4:	8a 30       	cpi	r24, 0x0A	; 10
    46e6:	a0 f7       	brcc	.-24     	; 0x46d0 <dataToNibbles+0xa6>
    46e8:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble+0x2>
    46ec:	8e c0       	rjmp	.+284    	; 0x480a <dataToNibbles+0x1e0>
    46ee:	ea ee       	ldi	r30, 0xEA	; 234
    46f0:	f5 e0       	ldi	r31, 0x05	; 5
    46f2:	10 82       	st	Z, r1
    46f4:	11 82       	std	Z+1, r1	; 0x01
    46f6:	08 c0       	rjmp	.+16     	; 0x4708 <dataToNibbles+0xde>
    46f8:	ea ee       	ldi	r30, 0xEA	; 234
    46fa:	f5 e0       	ldi	r31, 0x05	; 5
    46fc:	90 81       	ld	r25, Z
    46fe:	9f 5f       	subi	r25, 0xFF	; 255
    4700:	90 83       	st	Z, r25
    4702:	84 56       	subi	r24, 0x64	; 100
    4704:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4708:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    470c:	84 36       	cpi	r24, 0x64	; 100
    470e:	a0 f7       	brcc	.-24     	; 0x46f8 <dataToNibbles+0xce>
    4710:	08 c0       	rjmp	.+16     	; 0x4722 <dataToNibbles+0xf8>
    4712:	ea ee       	ldi	r30, 0xEA	; 234
    4714:	f5 e0       	ldi	r31, 0x05	; 5
    4716:	91 81       	ldd	r25, Z+1	; 0x01
    4718:	9f 5f       	subi	r25, 0xFF	; 255
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	8a 50       	subi	r24, 0x0A	; 10
    471e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4722:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4726:	8a 30       	cpi	r24, 0x0A	; 10
    4728:	a0 f7       	brcc	.-24     	; 0x4712 <dataToNibbles+0xe8>
    472a:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <nibble+0x2>
    472e:	6d c0       	rjmp	.+218    	; 0x480a <dataToNibbles+0x1e0>
    4730:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4734:	84 30       	cpi	r24, 0x04	; 4
    4736:	20 f0       	brcs	.+8      	; 0x4740 <dataToNibbles+0x116>
    4738:	8f ef       	ldi	r24, 0xFF	; 255
    473a:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    473e:	65 c0       	rjmp	.+202    	; 0x480a <dataToNibbles+0x1e0>
    4740:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4744:	62 c0       	rjmp	.+196    	; 0x480a <dataToNibbles+0x1e0>
    4746:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    474a:	84 30       	cpi	r24, 0x04	; 4
    474c:	20 f0       	brcs	.+8      	; 0x4756 <dataToNibbles+0x12c>
    474e:	83 e0       	ldi	r24, 0x03	; 3
    4750:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4754:	5a c0       	rjmp	.+180    	; 0x480a <dataToNibbles+0x1e0>
    4756:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    475a:	57 c0       	rjmp	.+174    	; 0x480a <dataToNibbles+0x1e0>
    475c:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4760:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4764:	52 c0       	rjmp	.+164    	; 0x480a <dataToNibbles+0x1e0>
    4766:	e9 2f       	mov	r30, r25
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    476e:	28 2f       	mov	r18, r24
    4770:	22 1f       	adc	r18, r18
    4772:	22 27       	eor	r18, r18
    4774:	22 1f       	adc	r18, r18
    4776:	e6 51       	subi	r30, 0x16	; 22
    4778:	fa 4f       	sbci	r31, 0xFA	; 250
    477a:	20 83       	st	Z, r18
    477c:	88 0f       	add	r24, r24
    477e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4782:	9f 5f       	subi	r25, 0xFF	; 255
    4784:	01 c0       	rjmp	.+2      	; 0x4788 <dataToNibbles+0x15e>
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	98 30       	cpi	r25, 0x08	; 8
    478a:	68 f3       	brcs	.-38     	; 0x4766 <dataToNibbles+0x13c>
    478c:	3e c0       	rjmp	.+124    	; 0x480a <dataToNibbles+0x1e0>
    478e:	82 50       	subi	r24, 0x02	; 2
    4790:	f0 e0       	ldi	r31, 0x00	; 0
    4792:	de 01       	movw	r26, r28
    4794:	9d 91       	ld	r25, X+
    4796:	e6 51       	subi	r30, 0x16	; 22
    4798:	fa 4f       	sbci	r31, 0xFA	; 250
    479a:	9f 70       	andi	r25, 0x0F	; 15
    479c:	90 83       	st	Z, r25
    479e:	e8 2f       	mov	r30, r24
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	98 81       	ld	r25, Y
    47a4:	e6 51       	subi	r30, 0x16	; 22
    47a6:	fa 4f       	sbci	r31, 0xFA	; 250
    47a8:	92 95       	swap	r25
    47aa:	9f 70       	andi	r25, 0x0F	; 15
    47ac:	90 83       	st	Z, r25
    47ae:	ed 01       	movw	r28, r26
    47b0:	03 c0       	rjmp	.+6      	; 0x47b8 <dataToNibbles+0x18e>
    47b2:	c8 ec       	ldi	r28, 0xC8	; 200
    47b4:	d5 e0       	ldi	r29, 0x05	; 5
    47b6:	88 e0       	ldi	r24, 0x08	; 8
    47b8:	ef ef       	ldi	r30, 0xFF	; 255
    47ba:	e8 0f       	add	r30, r24
    47bc:	81 11       	cpse	r24, r1
    47be:	e7 cf       	rjmp	.-50     	; 0x478e <dataToNibbles+0x164>
    47c0:	24 c0       	rjmp	.+72     	; 0x480a <dataToNibbles+0x1e0>
    47c2:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    47c6:	ea ee       	ldi	r30, 0xEA	; 234
    47c8:	f5 e0       	ldi	r31, 0x05	; 5
    47ca:	98 2f       	mov	r25, r24
    47cc:	96 95       	lsr	r25
    47ce:	96 95       	lsr	r25
    47d0:	96 95       	lsr	r25
    47d2:	9f 5f       	subi	r25, 0xFF	; 255
    47d4:	90 83       	st	Z, r25
    47d6:	87 70       	andi	r24, 0x07	; 7
    47d8:	8f 5f       	subi	r24, 0xFF	; 255
    47da:	81 83       	std	Z+1, r24	; 0x01
    47dc:	16 c0       	rjmp	.+44     	; 0x480a <dataToNibbles+0x1e0>
    47de:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    47e2:	8f 5f       	subi	r24, 0xFF	; 255
    47e4:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    47e8:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <nibble>
    47ec:	08 c0       	rjmp	.+16     	; 0x47fe <dataToNibbles+0x1d4>
    47ee:	ea ee       	ldi	r30, 0xEA	; 234
    47f0:	f5 e0       	ldi	r31, 0x05	; 5
    47f2:	90 81       	ld	r25, Z
    47f4:	9f 5f       	subi	r25, 0xFF	; 255
    47f6:	90 83       	st	Z, r25
    47f8:	8a 50       	subi	r24, 0x0A	; 10
    47fa:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    47fe:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    4802:	8a 30       	cpi	r24, 0x0A	; 10
    4804:	a0 f7       	brcc	.-24     	; 0x47ee <dataToNibbles+0x1c4>
    4806:	80 93 eb 05 	sts	0x05EB, r24	; 0x8005eb <nibble+0x1>
    480a:	df 91       	pop	r29
    480c:	cf 91       	pop	r28
    480e:	08 95       	ret

00004810 <nibbleToLCDstring>:
    4810:	0f 93       	push	r16
    4812:	1f 93       	push	r17
    4814:	cf 93       	push	r28
    4816:	df 93       	push	r29
    4818:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    481c:	8e 2f       	mov	r24, r30
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	fc 01       	movw	r30, r24
    4822:	32 97       	sbiw	r30, 0x02	; 2
    4824:	ed 30       	cpi	r30, 0x0D	; 13
    4826:	f1 05       	cpc	r31, r1
    4828:	08 f0       	brcs	.+2      	; 0x482c <nibbleToLCDstring+0x1c>
    482a:	3b c1       	rjmp	.+630    	; 0x4aa2 <nibbleToLCDstring+0x292>
    482c:	88 27       	eor	r24, r24
    482e:	e1 58       	subi	r30, 0x81	; 129
    4830:	ff 4f       	sbci	r31, 0xFF	; 255
    4832:	8f 4f       	sbci	r24, 0xFF	; 255
    4834:	0c 94 be 3f 	jmp	0x7f7c	; 0x7f7c <__tablejump2__>
    4838:	0a ee       	ldi	r16, 0xEA	; 234
    483a:	15 e0       	ldi	r17, 0x05	; 5
    483c:	f8 01       	movw	r30, r16
    483e:	80 81       	ld	r24, Z
    4840:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4844:	c6 e4       	ldi	r28, 0x46	; 70
    4846:	d2 e0       	ldi	r29, 0x02	; 2
    4848:	88 83       	st	Y, r24
    484a:	f8 01       	movw	r30, r16
    484c:	81 81       	ldd	r24, Z+1	; 0x01
    484e:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4852:	89 83       	std	Y+1, r24	; 0x01
    4854:	1a 82       	std	Y+2, r1	; 0x02
    4856:	25 c1       	rjmp	.+586    	; 0x4aa2 <nibbleToLCDstring+0x292>
    4858:	e6 e4       	ldi	r30, 0x46	; 70
    485a:	f2 e0       	ldi	r31, 0x02	; 2
    485c:	83 e4       	ldi	r24, 0x43	; 67
    485e:	80 83       	st	Z, r24
    4860:	88 e6       	ldi	r24, 0x68	; 104
    4862:	81 83       	std	Z+1, r24	; 0x01
    4864:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4868:	8f 3f       	cpi	r24, 0xFF	; 255
    486a:	29 f4       	brne	.+10     	; 0x4876 <nibbleToLCDstring+0x66>
    486c:	80 e2       	ldi	r24, 0x20	; 32
    486e:	82 83       	std	Z+2, r24	; 0x02
    4870:	8d e2       	ldi	r24, 0x2D	; 45
    4872:	83 83       	std	Z+3, r24	; 0x03
    4874:	12 c0       	rjmp	.+36     	; 0x489a <nibbleToLCDstring+0x8a>
    4876:	8a 30       	cpi	r24, 0x0A	; 10
    4878:	48 f0       	brcs	.+18     	; 0x488c <nibbleToLCDstring+0x7c>
    487a:	c6 e4       	ldi	r28, 0x46	; 70
    487c:	d2 e0       	ldi	r29, 0x02	; 2
    487e:	91 e3       	ldi	r25, 0x31	; 49
    4880:	9a 83       	std	Y+2, r25	; 0x02
    4882:	8a 50       	subi	r24, 0x0A	; 10
    4884:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4888:	8b 83       	std	Y+3, r24	; 0x03
    488a:	07 c0       	rjmp	.+14     	; 0x489a <nibbleToLCDstring+0x8a>
    488c:	c6 e4       	ldi	r28, 0x46	; 70
    488e:	d2 e0       	ldi	r29, 0x02	; 2
    4890:	90 e2       	ldi	r25, 0x20	; 32
    4892:	9a 83       	std	Y+2, r25	; 0x02
    4894:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4898:	8b 83       	std	Y+3, r24	; 0x03
    489a:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <lcdData+0x4>
    489e:	01 c1       	rjmp	.+514    	; 0x4aa2 <nibbleToLCDstring+0x292>
    48a0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    48a4:	8f 3f       	cpi	r24, 0xFF	; 255
    48a6:	21 f0       	breq	.+8      	; 0x48b0 <nibbleToLCDstring+0xa0>
    48a8:	90 91 eb 05 	lds	r25, 0x05EB	; 0x8005eb <nibble+0x1>
    48ac:	9f 3f       	cpi	r25, 0xFF	; 255
    48ae:	59 f4       	brne	.+22     	; 0x48c6 <nibbleToLCDstring+0xb6>
    48b0:	e6 e4       	ldi	r30, 0x46	; 70
    48b2:	f2 e0       	ldi	r31, 0x02	; 2
    48b4:	8e e6       	ldi	r24, 0x6E	; 110
    48b6:	80 83       	st	Z, r24
    48b8:	9f e6       	ldi	r25, 0x6F	; 111
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	82 83       	std	Z+2, r24	; 0x02
    48be:	85 e6       	ldi	r24, 0x65	; 101
    48c0:	83 83       	std	Z+3, r24	; 0x03
    48c2:	14 82       	std	Z+4, r1	; 0x04
    48c4:	ee c0       	rjmp	.+476    	; 0x4aa2 <nibbleToLCDstring+0x292>
    48c6:	9f e5       	ldi	r25, 0x5F	; 95
    48c8:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <lcdData+0x1>
    48cc:	8b 30       	cpi	r24, 0x0B	; 11
    48ce:	21 f4       	brne	.+8      	; 0x48d8 <nibbleToLCDstring+0xc8>
    48d0:	88 e4       	ldi	r24, 0x48	; 72
    48d2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    48d6:	20 c0       	rjmp	.+64     	; 0x4918 <nibbleToLCDstring+0x108>
    48d8:	85 30       	cpi	r24, 0x05	; 5
    48da:	58 f4       	brcc	.+22     	; 0x48f2 <nibbleToLCDstring+0xe2>
    48dc:	98 2f       	mov	r25, r24
    48de:	96 95       	lsr	r25
    48e0:	9d 5b       	subi	r25, 0xBD	; 189
    48e2:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <lcdData>
    48e6:	80 ff       	sbrs	r24, 0
    48e8:	17 c0       	rjmp	.+46     	; 0x4918 <nibbleToLCDstring+0x108>
    48ea:	83 e2       	ldi	r24, 0x23	; 35
    48ec:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    48f0:	13 c0       	rjmp	.+38     	; 0x4918 <nibbleToLCDstring+0x108>
    48f2:	28 2f       	mov	r18, r24
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	25 50       	subi	r18, 0x05	; 5
    48f8:	31 09       	sbc	r19, r1
    48fa:	35 95       	asr	r19
    48fc:	27 95       	ror	r18
    48fe:	2a 5b       	subi	r18, 0xBA	; 186
    4900:	20 93 46 02 	sts	0x0246, r18	; 0x800246 <lcdData>
    4904:	80 fd       	sbrc	r24, 0
    4906:	03 c0       	rjmp	.+6      	; 0x490e <nibbleToLCDstring+0xfe>
    4908:	83 e2       	ldi	r24, 0x23	; 35
    490a:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <lcdData+0x1>
    490e:	28 34       	cpi	r18, 0x48	; 72
    4910:	19 f4       	brne	.+6      	; 0x4918 <nibbleToLCDstring+0x108>
    4912:	81 e4       	ldi	r24, 0x41	; 65
    4914:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <lcdData>
    4918:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    491c:	81 11       	cpse	r24, r1
    491e:	04 c0       	rjmp	.+8      	; 0x4928 <nibbleToLCDstring+0x118>
    4920:	8d e6       	ldi	r24, 0x6D	; 109
    4922:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4926:	0b c0       	rjmp	.+22     	; 0x493e <nibbleToLCDstring+0x12e>
    4928:	8c 30       	cpi	r24, 0x0C	; 12
    492a:	30 f4       	brcc	.+12     	; 0x4938 <nibbleToLCDstring+0x128>
    492c:	81 50       	subi	r24, 0x01	; 1
    492e:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4932:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    4936:	03 c0       	rjmp	.+6      	; 0x493e <nibbleToLCDstring+0x12e>
    4938:	8d e2       	ldi	r24, 0x2D	; 45
    493a:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <lcdData+0x2>
    493e:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    4942:	af c0       	rjmp	.+350    	; 0x4aa2 <nibbleToLCDstring+0x292>
    4944:	c6 e4       	ldi	r28, 0x46	; 70
    4946:	d2 e0       	ldi	r29, 0x02	; 2
    4948:	8d e4       	ldi	r24, 0x4D	; 77
    494a:	88 83       	st	Y, r24
    494c:	0a ee       	ldi	r16, 0xEA	; 234
    494e:	15 e0       	ldi	r17, 0x05	; 5
    4950:	f8 01       	movw	r30, r16
    4952:	80 81       	ld	r24, Z
    4954:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4958:	89 83       	std	Y+1, r24	; 0x01
    495a:	82 e4       	ldi	r24, 0x42	; 66
    495c:	8a 83       	std	Y+2, r24	; 0x02
    495e:	f8 01       	movw	r30, r16
    4960:	81 81       	ldd	r24, Z+1	; 0x01
    4962:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4966:	8b 83       	std	Y+3, r24	; 0x03
    4968:	f8 01       	movw	r30, r16
    496a:	82 81       	ldd	r24, Z+2	; 0x02
    496c:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4970:	8c 83       	std	Y+4, r24	; 0x04
    4972:	1d 82       	std	Y+5, r1	; 0x05
    4974:	96 c0       	rjmp	.+300    	; 0x4aa2 <nibbleToLCDstring+0x292>
    4976:	0a ee       	ldi	r16, 0xEA	; 234
    4978:	15 e0       	ldi	r17, 0x05	; 5
    497a:	f8 01       	movw	r30, r16
    497c:	80 81       	ld	r24, Z
    497e:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4982:	c6 e4       	ldi	r28, 0x46	; 70
    4984:	d2 e0       	ldi	r29, 0x02	; 2
    4986:	88 83       	st	Y, r24
    4988:	f8 01       	movw	r30, r16
    498a:	81 81       	ldd	r24, Z+1	; 0x01
    498c:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4990:	89 83       	std	Y+1, r24	; 0x01
    4992:	f8 01       	movw	r30, r16
    4994:	82 81       	ldd	r24, Z+2	; 0x02
    4996:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    499a:	8a 83       	std	Y+2, r24	; 0x02
    499c:	1b 82       	std	Y+3, r1	; 0x03
    499e:	81 c0       	rjmp	.+258    	; 0x4aa2 <nibbleToLCDstring+0x292>
    49a0:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    49a4:	83 30       	cpi	r24, 0x03	; 3
    49a6:	38 f4       	brcc	.+14     	; 0x49b6 <nibbleToLCDstring+0x1a6>
    49a8:	e6 e4       	ldi	r30, 0x46	; 70
    49aa:	f2 e0       	ldi	r31, 0x02	; 2
    49ac:	93 e3       	ldi	r25, 0x33	; 51
    49ae:	98 1b       	sub	r25, r24
    49b0:	90 83       	st	Z, r25
    49b2:	11 82       	std	Z+1, r1	; 0x01
    49b4:	76 c0       	rjmp	.+236    	; 0x4aa2 <nibbleToLCDstring+0x292>
    49b6:	83 30       	cpi	r24, 0x03	; 3
    49b8:	31 f4       	brne	.+12     	; 0x49c6 <nibbleToLCDstring+0x1b6>
    49ba:	e6 e4       	ldi	r30, 0x46	; 70
    49bc:	f2 e0       	ldi	r31, 0x02	; 2
    49be:	80 e5       	ldi	r24, 0x50	; 80
    49c0:	80 83       	st	Z, r24
    49c2:	11 82       	std	Z+1, r1	; 0x01
    49c4:	6e c0       	rjmp	.+220    	; 0x4aa2 <nibbleToLCDstring+0x292>
    49c6:	e6 e4       	ldi	r30, 0x46	; 70
    49c8:	f2 e0       	ldi	r31, 0x02	; 2
    49ca:	8d e2       	ldi	r24, 0x2D	; 45
    49cc:	80 83       	st	Z, r24
    49ce:	11 82       	std	Z+1, r1	; 0x01
    49d0:	68 c0       	rjmp	.+208    	; 0x4aa2 <nibbleToLCDstring+0x292>
    49d2:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    49d6:	e6 e4       	ldi	r30, 0x46	; 70
    49d8:	f2 e0       	ldi	r31, 0x02	; 2
    49da:	80 5d       	subi	r24, 0xD0	; 208
    49dc:	80 83       	st	Z, r24
    49de:	11 82       	std	Z+1, r1	; 0x01
    49e0:	60 c0       	rjmp	.+192    	; 0x4aa2 <nibbleToLCDstring+0x292>
    49e2:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    49e6:	81 11       	cpse	r24, r1
    49e8:	09 c0       	rjmp	.+18     	; 0x49fc <nibbleToLCDstring+0x1ec>
    49ea:	e6 e4       	ldi	r30, 0x46	; 70
    49ec:	f2 e0       	ldi	r31, 0x02	; 2
    49ee:	81 e4       	ldi	r24, 0x41	; 65
    49f0:	80 83       	st	Z, r24
    49f2:	85 e7       	ldi	r24, 0x75	; 117
    49f4:	81 83       	std	Z+1, r24	; 0x01
    49f6:	83 e7       	ldi	r24, 0x73	; 115
    49f8:	82 83       	std	Z+2, r24	; 0x02
    49fa:	08 c0       	rjmp	.+16     	; 0x4a0c <nibbleToLCDstring+0x1fc>
    49fc:	e6 e4       	ldi	r30, 0x46	; 70
    49fe:	f2 e0       	ldi	r31, 0x02	; 2
    4a00:	85 e4       	ldi	r24, 0x45	; 69
    4a02:	80 83       	st	Z, r24
    4a04:	89 e6       	ldi	r24, 0x69	; 105
    4a06:	81 83       	std	Z+1, r24	; 0x01
    4a08:	8e e6       	ldi	r24, 0x6E	; 110
    4a0a:	82 83       	std	Z+2, r24	; 0x02
    4a0c:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <lcdData+0x3>
    4a10:	48 c0       	rjmp	.+144    	; 0x4aa2 <nibbleToLCDstring+0x292>
    4a12:	c1 2f       	mov	r28, r17
    4a14:	d0 e0       	ldi	r29, 0x00	; 0
    4a16:	fe 01       	movw	r30, r28
    4a18:	e6 51       	subi	r30, 0x16	; 22
    4a1a:	fa 4f       	sbci	r31, 0xFA	; 250
    4a1c:	80 81       	ld	r24, Z
    4a1e:	0e 94 9b 3c 	call	0x7936	; 0x7936 <nibbleToChr>
    4a22:	ca 5b       	subi	r28, 0xBA	; 186
    4a24:	dd 4f       	sbci	r29, 0xFD	; 253
    4a26:	88 83       	st	Y, r24
    4a28:	1f 5f       	subi	r17, 0xFF	; 255
    4a2a:	01 c0       	rjmp	.+2      	; 0x4a2e <nibbleToLCDstring+0x21e>
    4a2c:	10 e0       	ldi	r17, 0x00	; 0
    4a2e:	18 30       	cpi	r17, 0x08	; 8
    4a30:	80 f3       	brcs	.-32     	; 0x4a12 <nibbleToLCDstring+0x202>
    4a32:	37 c0       	rjmp	.+110    	; 0x4aa2 <nibbleToLCDstring+0x292>
    4a34:	82 2f       	mov	r24, r18
    4a36:	90 e0       	ldi	r25, 0x00	; 0
    4a38:	fc 01       	movw	r30, r24
    4a3a:	e6 51       	subi	r30, 0x16	; 22
    4a3c:	fa 4f       	sbci	r31, 0xFA	; 250
    4a3e:	30 81       	ld	r19, Z
    4a40:	31 11       	cpse	r19, r1
    4a42:	02 c0       	rjmp	.+4      	; 0x4a48 <nibbleToLCDstring+0x238>
    4a44:	3f e6       	ldi	r19, 0x6F	; 111
    4a46:	01 c0       	rjmp	.+2      	; 0x4a4a <nibbleToLCDstring+0x23a>
    4a48:	39 e4       	ldi	r19, 0x49	; 73
    4a4a:	fc 01       	movw	r30, r24
    4a4c:	ea 5b       	subi	r30, 0xBA	; 186
    4a4e:	fd 4f       	sbci	r31, 0xFD	; 253
    4a50:	30 83       	st	Z, r19
    4a52:	2f 5f       	subi	r18, 0xFF	; 255
    4a54:	01 c0       	rjmp	.+2      	; 0x4a58 <nibbleToLCDstring+0x248>
    4a56:	20 e0       	ldi	r18, 0x00	; 0
    4a58:	28 30       	cpi	r18, 0x08	; 8
    4a5a:	60 f3       	brcs	.-40     	; 0x4a34 <nibbleToLCDstring+0x224>
    4a5c:	22 c0       	rjmp	.+68     	; 0x4aa2 <nibbleToLCDstring+0x292>
    4a5e:	aa ee       	ldi	r26, 0xEA	; 234
    4a60:	b5 e0       	ldi	r27, 0x05	; 5
    4a62:	8c 91       	ld	r24, X
    4a64:	e6 e4       	ldi	r30, 0x46	; 70
    4a66:	f2 e0       	ldi	r31, 0x02	; 2
    4a68:	80 5c       	subi	r24, 0xC0	; 192
    4a6a:	80 83       	st	Z, r24
    4a6c:	11 96       	adiw	r26, 0x01	; 1
    4a6e:	8c 91       	ld	r24, X
    4a70:	80 5d       	subi	r24, 0xD0	; 208
    4a72:	81 83       	std	Z+1, r24	; 0x01
    4a74:	12 82       	std	Z+2, r1	; 0x02
    4a76:	15 c0       	rjmp	.+42     	; 0x4aa2 <nibbleToLCDstring+0x292>
    4a78:	ea ee       	ldi	r30, 0xEA	; 234
    4a7a:	f5 e0       	ldi	r31, 0x05	; 5
    4a7c:	90 81       	ld	r25, Z
    4a7e:	81 81       	ldd	r24, Z+1	; 0x01
    4a80:	29 2f       	mov	r18, r25
    4a82:	28 2b       	or	r18, r24
    4a84:	31 f4       	brne	.+12     	; 0x4a92 <nibbleToLCDstring+0x282>
    4a86:	e6 e4       	ldi	r30, 0x46	; 70
    4a88:	f2 e0       	ldi	r31, 0x02	; 2
    4a8a:	8d e2       	ldi	r24, 0x2D	; 45
    4a8c:	80 83       	st	Z, r24
    4a8e:	81 83       	std	Z+1, r24	; 0x01
    4a90:	06 c0       	rjmp	.+12     	; 0x4a9e <nibbleToLCDstring+0x28e>
    4a92:	e6 e4       	ldi	r30, 0x46	; 70
    4a94:	f2 e0       	ldi	r31, 0x02	; 2
    4a96:	90 5d       	subi	r25, 0xD0	; 208
    4a98:	90 83       	st	Z, r25
    4a9a:	80 5d       	subi	r24, 0xD0	; 208
    4a9c:	81 83       	std	Z+1, r24	; 0x01
    4a9e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <lcdData+0x2>
    4aa2:	df 91       	pop	r29
    4aa4:	cf 91       	pop	r28
    4aa6:	1f 91       	pop	r17
    4aa8:	0f 91       	pop	r16
    4aaa:	08 95       	ret

00004aac <LCDStringOut>:
    4aac:	0f 93       	push	r16
    4aae:	1f 93       	push	r17
    4ab0:	cf 93       	push	r28
    4ab2:	8e e1       	ldi	r24, 0x1E	; 30
    4ab4:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    4ab8:	c0 e0       	ldi	r28, 0x00	; 0
    4aba:	06 e4       	ldi	r16, 0x46	; 70
    4abc:	12 e0       	ldi	r17, 0x02	; 2
    4abe:	0b c0       	rjmp	.+22     	; 0x4ad6 <LCDStringOut+0x2a>
    4ac0:	f8 01       	movw	r30, r16
    4ac2:	80 81       	ld	r24, Z
    4ac4:	88 23       	and	r24, r24
    4ac6:	19 f0       	breq	.+6      	; 0x4ace <LCDStringOut+0x22>
    4ac8:	0f 5f       	subi	r16, 0xFF	; 255
    4aca:	1f 4f       	sbci	r17, 0xFF	; 255
    4acc:	01 c0       	rjmp	.+2      	; 0x4ad0 <LCDStringOut+0x24>
    4ace:	80 e2       	ldi	r24, 0x20	; 32
    4ad0:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    4ad4:	cf 5f       	subi	r28, 0xFF	; 255
    4ad6:	ca 30       	cpi	r28, 0x0A	; 10
    4ad8:	98 f3       	brcs	.-26     	; 0x4ac0 <LCDStringOut+0x14>
    4ada:	cf 91       	pop	r28
    4adc:	1f 91       	pop	r17
    4ade:	0f 91       	pop	r16
    4ae0:	08 95       	ret

00004ae2 <nibbleCheckOvfl>:
    4ae2:	8a 30       	cpi	r24, 0x0A	; 10
    4ae4:	1c f4       	brge	.+6      	; 0x4aec <nibbleCheckOvfl+0xa>
    4ae6:	88 23       	and	r24, r24
    4ae8:	1c f0       	brlt	.+6      	; 0x4af0 <nibbleCheckOvfl+0xe>
    4aea:	08 95       	ret
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	08 95       	ret
    4af0:	89 e0       	ldi	r24, 0x09	; 9
    4af2:	08 95       	ret

00004af4 <nibbleChange>:
    4af4:	0f 93       	push	r16
    4af6:	1f 93       	push	r17
    4af8:	cf 93       	push	r28
    4afa:	df 93       	push	r29
    4afc:	c8 2f       	mov	r28, r24
    4afe:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    4b02:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    4b06:	31 96       	adiw	r30, 0x01	; 1
    4b08:	84 91       	lpm	r24, Z
    4b0a:	28 2f       	mov	r18, r24
    4b0c:	20 71       	andi	r18, 0x10	; 16
    4b0e:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4b12:	8e 2f       	mov	r24, r30
    4b14:	90 e0       	ldi	r25, 0x00	; 0
    4b16:	fc 01       	movw	r30, r24
    4b18:	32 97       	sbiw	r30, 0x02	; 2
    4b1a:	ed 30       	cpi	r30, 0x0D	; 13
    4b1c:	f1 05       	cpc	r31, r1
    4b1e:	08 f0       	brcs	.+2      	; 0x4b22 <nibbleChange+0x2e>
    4b20:	93 c1       	rjmp	.+806    	; 0x4e48 <nibbleChange+0x354>
    4b22:	88 27       	eor	r24, r24
    4b24:	e4 57       	subi	r30, 0x74	; 116
    4b26:	ff 4f       	sbci	r31, 0xFF	; 255
    4b28:	8f 4f       	sbci	r24, 0xFF	; 255
    4b2a:	0c 94 be 3f 	jmp	0x7f7c	; 0x7f7c <__tablejump2__>
    4b2e:	d0 e0       	ldi	r29, 0x00	; 0
    4b30:	c6 51       	subi	r28, 0x16	; 22
    4b32:	da 4f       	sbci	r29, 0xFA	; 250
    4b34:	88 81       	ld	r24, Y
    4b36:	68 0f       	add	r22, r24
    4b38:	6f 70       	andi	r22, 0x0F	; 15
    4b3a:	68 83       	st	Y, r22
    4b3c:	85 c1       	rjmp	.+778    	; 0x4e48 <nibbleChange+0x354>
    4b3e:	21 11       	cpse	r18, r1
    4b40:	1b c0       	rjmp	.+54     	; 0x4b78 <nibbleChange+0x84>
    4b42:	61 30       	cpi	r22, 0x01	; 1
    4b44:	41 f4       	brne	.+16     	; 0x4b56 <nibbleChange+0x62>
    4b46:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4b4a:	80 31       	cpi	r24, 0x10	; 16
    4b4c:	20 f0       	brcs	.+8      	; 0x4b56 <nibbleChange+0x62>
    4b4e:	81 e0       	ldi	r24, 0x01	; 1
    4b50:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4b54:	79 c1       	rjmp	.+754    	; 0x4e48 <nibbleChange+0x354>
    4b56:	6f 3f       	cpi	r22, 0xFF	; 255
    4b58:	49 f4       	brne	.+18     	; 0x4b6c <nibbleChange+0x78>
    4b5a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4b5e:	82 50       	subi	r24, 0x02	; 2
    4b60:	8f 30       	cpi	r24, 0x0F	; 15
    4b62:	20 f0       	brcs	.+8      	; 0x4b6c <nibbleChange+0x78>
    4b64:	80 e1       	ldi	r24, 0x10	; 16
    4b66:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4b6a:	6e c1       	rjmp	.+732    	; 0x4e48 <nibbleChange+0x354>
    4b6c:	ea ee       	ldi	r30, 0xEA	; 234
    4b6e:	f5 e0       	ldi	r31, 0x05	; 5
    4b70:	80 81       	ld	r24, Z
    4b72:	68 0f       	add	r22, r24
    4b74:	60 83       	st	Z, r22
    4b76:	68 c1       	rjmp	.+720    	; 0x4e48 <nibbleChange+0x354>
    4b78:	61 30       	cpi	r22, 0x01	; 1
    4b7a:	41 f4       	brne	.+16     	; 0x4b8c <nibbleChange+0x98>
    4b7c:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4b80:	80 31       	cpi	r24, 0x10	; 16
    4b82:	21 f4       	brne	.+8      	; 0x4b8c <nibbleChange+0x98>
    4b84:	8f ef       	ldi	r24, 0xFF	; 255
    4b86:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4b8a:	5e c1       	rjmp	.+700    	; 0x4e48 <nibbleChange+0x354>
    4b8c:	61 30       	cpi	r22, 0x01	; 1
    4b8e:	41 f4       	brne	.+16     	; 0x4ba0 <nibbleChange+0xac>
    4b90:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4b94:	8f 3f       	cpi	r24, 0xFF	; 255
    4b96:	21 f4       	brne	.+8      	; 0x4ba0 <nibbleChange+0xac>
    4b98:	81 e0       	ldi	r24, 0x01	; 1
    4b9a:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4b9e:	54 c1       	rjmp	.+680    	; 0x4e48 <nibbleChange+0x354>
    4ba0:	6f 3f       	cpi	r22, 0xFF	; 255
    4ba2:	41 f4       	brne	.+16     	; 0x4bb4 <nibbleChange+0xc0>
    4ba4:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    4baa:	21 f4       	brne	.+8      	; 0x4bb4 <nibbleChange+0xc0>
    4bac:	80 e1       	ldi	r24, 0x10	; 16
    4bae:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4bb2:	4a c1       	rjmp	.+660    	; 0x4e48 <nibbleChange+0x354>
    4bb4:	6f 3f       	cpi	r22, 0xFF	; 255
    4bb6:	41 f4       	brne	.+16     	; 0x4bc8 <nibbleChange+0xd4>
    4bb8:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4bbc:	81 30       	cpi	r24, 0x01	; 1
    4bbe:	21 f4       	brne	.+8      	; 0x4bc8 <nibbleChange+0xd4>
    4bc0:	8f ef       	ldi	r24, 0xFF	; 255
    4bc2:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <nibble>
    4bc6:	40 c1       	rjmp	.+640    	; 0x4e48 <nibbleChange+0x354>
    4bc8:	ea ee       	ldi	r30, 0xEA	; 234
    4bca:	f5 e0       	ldi	r31, 0x05	; 5
    4bcc:	80 81       	ld	r24, Z
    4bce:	68 0f       	add	r22, r24
    4bd0:	60 83       	st	Z, r22
    4bd2:	3a c1       	rjmp	.+628    	; 0x4e48 <nibbleChange+0x354>
    4bd4:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    4bda:	09 f4       	brne	.+2      	; 0x4bde <nibbleChange+0xea>
    4bdc:	c1 e0       	ldi	r28, 0x01	; 1
    4bde:	c1 11       	cpse	r28, r1
    4be0:	16 c0       	rjmp	.+44     	; 0x4c0e <nibbleChange+0x11a>
    4be2:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4be6:	8c 30       	cpi	r24, 0x0C	; 12
    4be8:	50 f4       	brcc	.+20     	; 0x4bfe <nibbleChange+0x10a>
    4bea:	8b 30       	cpi	r24, 0x0B	; 11
    4bec:	11 f4       	brne	.+4      	; 0x4bf2 <nibbleChange+0xfe>
    4bee:	61 30       	cpi	r22, 0x01	; 1
    4bf0:	41 f0       	breq	.+16     	; 0x4c02 <nibbleChange+0x10e>
    4bf2:	81 11       	cpse	r24, r1
    4bf4:	02 c0       	rjmp	.+4      	; 0x4bfa <nibbleChange+0x106>
    4bf6:	6f 3f       	cpi	r22, 0xFF	; 255
    4bf8:	31 f0       	breq	.+12     	; 0x4c06 <nibbleChange+0x112>
    4bfa:	68 0f       	add	r22, r24
    4bfc:	05 c0       	rjmp	.+10     	; 0x4c08 <nibbleChange+0x114>
    4bfe:	60 e0       	ldi	r22, 0x00	; 0
    4c00:	03 c0       	rjmp	.+6      	; 0x4c08 <nibbleChange+0x114>
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	01 c0       	rjmp	.+2      	; 0x4c08 <nibbleChange+0x114>
    4c06:	6b e0       	ldi	r22, 0x0B	; 11
    4c08:	60 93 ea 05 	sts	0x05EA, r22	; 0x8005ea <nibble>
    4c0c:	2b c0       	rjmp	.+86     	; 0x4c64 <nibbleChange+0x170>
    4c0e:	21 11       	cpse	r18, r1
    4c10:	0a c0       	rjmp	.+20     	; 0x4c26 <nibbleChange+0x132>
    4c12:	81 11       	cpse	r24, r1
    4c14:	02 c0       	rjmp	.+4      	; 0x4c1a <nibbleChange+0x126>
    4c16:	6f 3f       	cpi	r22, 0xFF	; 255
    4c18:	c1 f0       	breq	.+48     	; 0x4c4a <nibbleChange+0x156>
    4c1a:	8a 30       	cpi	r24, 0x0A	; 10
    4c1c:	11 f4       	brne	.+4      	; 0x4c22 <nibbleChange+0x12e>
    4c1e:	61 30       	cpi	r22, 0x01	; 1
    4c20:	b1 f0       	breq	.+44     	; 0x4c4e <nibbleChange+0x15a>
    4c22:	68 0f       	add	r22, r24
    4c24:	1d c0       	rjmp	.+58     	; 0x4c60 <nibbleChange+0x16c>
    4c26:	81 11       	cpse	r24, r1
    4c28:	02 c0       	rjmp	.+4      	; 0x4c2e <nibbleChange+0x13a>
    4c2a:	6f 3f       	cpi	r22, 0xFF	; 255
    4c2c:	91 f0       	breq	.+36     	; 0x4c52 <nibbleChange+0x15e>
    4c2e:	8a 30       	cpi	r24, 0x0A	; 10
    4c30:	11 f4       	brne	.+4      	; 0x4c36 <nibbleChange+0x142>
    4c32:	61 30       	cpi	r22, 0x01	; 1
    4c34:	81 f0       	breq	.+32     	; 0x4c56 <nibbleChange+0x162>
    4c36:	8f 3f       	cpi	r24, 0xFF	; 255
    4c38:	11 f4       	brne	.+4      	; 0x4c3e <nibbleChange+0x14a>
    4c3a:	61 30       	cpi	r22, 0x01	; 1
    4c3c:	71 f0       	breq	.+28     	; 0x4c5a <nibbleChange+0x166>
    4c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c40:	11 f4       	brne	.+4      	; 0x4c46 <nibbleChange+0x152>
    4c42:	6f 3f       	cpi	r22, 0xFF	; 255
    4c44:	61 f0       	breq	.+24     	; 0x4c5e <nibbleChange+0x16a>
    4c46:	68 0f       	add	r22, r24
    4c48:	0b c0       	rjmp	.+22     	; 0x4c60 <nibbleChange+0x16c>
    4c4a:	6a e0       	ldi	r22, 0x0A	; 10
    4c4c:	09 c0       	rjmp	.+18     	; 0x4c60 <nibbleChange+0x16c>
    4c4e:	60 e0       	ldi	r22, 0x00	; 0
    4c50:	07 c0       	rjmp	.+14     	; 0x4c60 <nibbleChange+0x16c>
    4c52:	6f ef       	ldi	r22, 0xFF	; 255
    4c54:	05 c0       	rjmp	.+10     	; 0x4c60 <nibbleChange+0x16c>
    4c56:	6f ef       	ldi	r22, 0xFF	; 255
    4c58:	03 c0       	rjmp	.+6      	; 0x4c60 <nibbleChange+0x16c>
    4c5a:	60 e0       	ldi	r22, 0x00	; 0
    4c5c:	01 c0       	rjmp	.+2      	; 0x4c60 <nibbleChange+0x16c>
    4c5e:	6a e0       	ldi	r22, 0x0A	; 10
    4c60:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <nibble+0x1>
    4c64:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4c68:	9f 3f       	cpi	r25, 0xFF	; 255
    4c6a:	09 f4       	brne	.+2      	; 0x4c6e <nibbleChange+0x17a>
    4c6c:	ed c0       	rjmp	.+474    	; 0x4e48 <nibbleChange+0x354>
    4c6e:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4c72:	8f 3f       	cpi	r24, 0xFF	; 255
    4c74:	09 f4       	brne	.+2      	; 0x4c78 <nibbleChange+0x184>
    4c76:	e8 c0       	rjmp	.+464    	; 0x4e48 <nibbleChange+0x354>
    4c78:	28 2f       	mov	r18, r24
    4c7a:	22 0f       	add	r18, r18
    4c7c:	82 0f       	add	r24, r18
    4c7e:	28 2f       	mov	r18, r24
    4c80:	22 0f       	add	r18, r18
    4c82:	22 0f       	add	r18, r18
    4c84:	92 0f       	add	r25, r18
    4c86:	0a f0       	brmi	.+2      	; 0x4c8a <nibbleChange+0x196>
    4c88:	df c0       	rjmp	.+446    	; 0x4e48 <nibbleChange+0x354>
    4c8a:	ea ee       	ldi	r30, 0xEA	; 234
    4c8c:	f5 e0       	ldi	r31, 0x05	; 5
    4c8e:	87 e0       	ldi	r24, 0x07	; 7
    4c90:	80 83       	st	Z, r24
    4c92:	8a e0       	ldi	r24, 0x0A	; 10
    4c94:	81 83       	std	Z+1, r24	; 0x01
    4c96:	d8 c0       	rjmp	.+432    	; 0x4e48 <nibbleChange+0x354>
    4c98:	c1 11       	cpse	r28, r1
    4c9a:	07 c0       	rjmp	.+14     	; 0x4caa <nibbleChange+0x1b6>
    4c9c:	ea ee       	ldi	r30, 0xEA	; 234
    4c9e:	f5 e0       	ldi	r31, 0x05	; 5
    4ca0:	80 81       	ld	r24, Z
    4ca2:	68 0f       	add	r22, r24
    4ca4:	67 70       	andi	r22, 0x07	; 7
    4ca6:	60 83       	st	Z, r22
    4ca8:	cf c0       	rjmp	.+414    	; 0x4e48 <nibbleChange+0x354>
    4caa:	d0 e0       	ldi	r29, 0x00	; 0
    4cac:	0a ee       	ldi	r16, 0xEA	; 234
    4cae:	15 e0       	ldi	r17, 0x05	; 5
    4cb0:	c6 51       	subi	r28, 0x16	; 22
    4cb2:	da 4f       	sbci	r29, 0xFA	; 250
    4cb4:	88 81       	ld	r24, Y
    4cb6:	86 0f       	add	r24, r22
    4cb8:	14 df       	rcall	.-472    	; 0x4ae2 <nibbleCheckOvfl>
    4cba:	88 83       	st	Y, r24
    4cbc:	f8 01       	movw	r30, r16
    4cbe:	81 81       	ldd	r24, Z+1	; 0x01
    4cc0:	92 81       	ldd	r25, Z+2	; 0x02
    4cc2:	88 0f       	add	r24, r24
    4cc4:	28 2f       	mov	r18, r24
    4cc6:	22 0f       	add	r18, r18
    4cc8:	22 0f       	add	r18, r18
    4cca:	82 0f       	add	r24, r18
    4ccc:	89 0f       	add	r24, r25
    4cce:	80 32       	cpi	r24, 0x20	; 32
    4cd0:	2c f0       	brlt	.+10     	; 0x4cdc <nibbleChange+0x1e8>
    4cd2:	83 e0       	ldi	r24, 0x03	; 3
    4cd4:	81 83       	std	Z+1, r24	; 0x01
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	82 83       	std	Z+2, r24	; 0x02
    4cda:	b6 c0       	rjmp	.+364    	; 0x4e48 <nibbleChange+0x354>
    4cdc:	88 23       	and	r24, r24
    4cde:	0c f0       	brlt	.+2      	; 0x4ce2 <nibbleChange+0x1ee>
    4ce0:	b3 c0       	rjmp	.+358    	; 0x4e48 <nibbleChange+0x354>
    4ce2:	ea ee       	ldi	r30, 0xEA	; 234
    4ce4:	f5 e0       	ldi	r31, 0x05	; 5
    4ce6:	11 82       	std	Z+1, r1	; 0x01
    4ce8:	12 82       	std	Z+2, r1	; 0x02
    4cea:	ae c0       	rjmp	.+348    	; 0x4e48 <nibbleChange+0x354>
    4cec:	d0 e0       	ldi	r29, 0x00	; 0
    4cee:	0a ee       	ldi	r16, 0xEA	; 234
    4cf0:	15 e0       	ldi	r17, 0x05	; 5
    4cf2:	c6 51       	subi	r28, 0x16	; 22
    4cf4:	da 4f       	sbci	r29, 0xFA	; 250
    4cf6:	88 81       	ld	r24, Y
    4cf8:	86 0f       	add	r24, r22
    4cfa:	f3 de       	rcall	.-538    	; 0x4ae2 <nibbleCheckOvfl>
    4cfc:	88 83       	st	Y, r24
    4cfe:	f8 01       	movw	r30, r16
    4d00:	20 81       	ld	r18, Z
    4d02:	81 81       	ldd	r24, Z+1	; 0x01
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	ac 01       	movw	r20, r24
    4d08:	44 0f       	add	r20, r20
    4d0a:	55 1f       	adc	r21, r21
    4d0c:	88 0f       	add	r24, r24
    4d0e:	99 1f       	adc	r25, r25
    4d10:	88 0f       	add	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	88 0f       	add	r24, r24
    4d16:	99 1f       	adc	r25, r25
    4d18:	84 0f       	add	r24, r20
    4d1a:	95 1f       	adc	r25, r21
    4d1c:	f4 e6       	ldi	r31, 0x64	; 100
    4d1e:	2f 9f       	mul	r18, r31
    4d20:	80 0d       	add	r24, r0
    4d22:	91 1d       	adc	r25, r1
    4d24:	11 24       	eor	r1, r1
    4d26:	f8 01       	movw	r30, r16
    4d28:	22 81       	ldd	r18, Z+2	; 0x02
    4d2a:	82 0f       	add	r24, r18
    4d2c:	91 1d       	adc	r25, r1
    4d2e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d30:	91 05       	cpc	r25, r1
    4d32:	09 f0       	breq	.+2      	; 0x4d36 <nibbleChange+0x242>
    4d34:	0c f4       	brge	.+2      	; 0x4d38 <nibbleChange+0x244>
    4d36:	88 c0       	rjmp	.+272    	; 0x4e48 <nibbleChange+0x354>
    4d38:	82 e0       	ldi	r24, 0x02	; 2
    4d3a:	80 83       	st	Z, r24
    4d3c:	85 e0       	ldi	r24, 0x05	; 5
    4d3e:	81 83       	std	Z+1, r24	; 0x01
    4d40:	82 83       	std	Z+2, r24	; 0x02
    4d42:	82 c0       	rjmp	.+260    	; 0x4e48 <nibbleChange+0x354>
    4d44:	22 23       	and	r18, r18
    4d46:	a1 f0       	breq	.+40     	; 0x4d70 <nibbleChange+0x27c>
    4d48:	d0 e0       	ldi	r29, 0x00	; 0
    4d4a:	fe 01       	movw	r30, r28
    4d4c:	e6 51       	subi	r30, 0x16	; 22
    4d4e:	fa 4f       	sbci	r31, 0xFA	; 250
    4d50:	80 81       	ld	r24, Z
    4d52:	68 0f       	add	r22, r24
    4d54:	60 83       	st	Z, r22
    4d56:	64 30       	cpi	r22, 0x04	; 4
    4d58:	19 f4       	brne	.+6      	; 0x4d60 <nibbleChange+0x26c>
    4d5a:	8f ef       	ldi	r24, 0xFF	; 255
    4d5c:	80 83       	st	Z, r24
    4d5e:	74 c0       	rjmp	.+232    	; 0x4e48 <nibbleChange+0x354>
    4d60:	6e 3f       	cpi	r22, 0xFE	; 254
    4d62:	09 f0       	breq	.+2      	; 0x4d66 <nibbleChange+0x272>
    4d64:	71 c0       	rjmp	.+226    	; 0x4e48 <nibbleChange+0x354>
    4d66:	c6 51       	subi	r28, 0x16	; 22
    4d68:	da 4f       	sbci	r29, 0xFA	; 250
    4d6a:	83 e0       	ldi	r24, 0x03	; 3
    4d6c:	88 83       	st	Y, r24
    4d6e:	6c c0       	rjmp	.+216    	; 0x4e48 <nibbleChange+0x354>
    4d70:	d0 e0       	ldi	r29, 0x00	; 0
    4d72:	fe 01       	movw	r30, r28
    4d74:	e6 51       	subi	r30, 0x16	; 22
    4d76:	fa 4f       	sbci	r31, 0xFA	; 250
    4d78:	80 81       	ld	r24, Z
    4d7a:	81 11       	cpse	r24, r1
    4d7c:	05 c0       	rjmp	.+10     	; 0x4d88 <nibbleChange+0x294>
    4d7e:	6f 3f       	cpi	r22, 0xFF	; 255
    4d80:	19 f4       	brne	.+6      	; 0x4d88 <nibbleChange+0x294>
    4d82:	83 e0       	ldi	r24, 0x03	; 3
    4d84:	80 83       	st	Z, r24
    4d86:	60 c0       	rjmp	.+192    	; 0x4e48 <nibbleChange+0x354>
    4d88:	83 30       	cpi	r24, 0x03	; 3
    4d8a:	31 f4       	brne	.+12     	; 0x4d98 <nibbleChange+0x2a4>
    4d8c:	61 30       	cpi	r22, 0x01	; 1
    4d8e:	21 f4       	brne	.+8      	; 0x4d98 <nibbleChange+0x2a4>
    4d90:	c6 51       	subi	r28, 0x16	; 22
    4d92:	da 4f       	sbci	r29, 0xFA	; 250
    4d94:	18 82       	st	Y, r1
    4d96:	58 c0       	rjmp	.+176    	; 0x4e48 <nibbleChange+0x354>
    4d98:	c6 51       	subi	r28, 0x16	; 22
    4d9a:	da 4f       	sbci	r29, 0xFA	; 250
    4d9c:	68 0f       	add	r22, r24
    4d9e:	68 83       	st	Y, r22
    4da0:	53 c0       	rjmp	.+166    	; 0x4e48 <nibbleChange+0x354>
    4da2:	d0 e0       	ldi	r29, 0x00	; 0
    4da4:	c6 51       	subi	r28, 0x16	; 22
    4da6:	da 4f       	sbci	r29, 0xFA	; 250
    4da8:	88 81       	ld	r24, Y
    4daa:	68 0f       	add	r22, r24
    4dac:	63 70       	andi	r22, 0x03	; 3
    4dae:	68 83       	st	Y, r22
    4db0:	4b c0       	rjmp	.+150    	; 0x4e48 <nibbleChange+0x354>
    4db2:	ea ee       	ldi	r30, 0xEA	; 234
    4db4:	f5 e0       	ldi	r31, 0x05	; 5
    4db6:	80 81       	ld	r24, Z
    4db8:	80 95       	com	r24
    4dba:	80 83       	st	Z, r24
    4dbc:	45 c0       	rjmp	.+138    	; 0x4e48 <nibbleChange+0x354>
    4dbe:	d0 e0       	ldi	r29, 0x00	; 0
    4dc0:	81 e0       	ldi	r24, 0x01	; 1
    4dc2:	61 fd       	sbrc	r22, 1
    4dc4:	80 e0       	ldi	r24, 0x00	; 0
    4dc6:	c6 51       	subi	r28, 0x16	; 22
    4dc8:	da 4f       	sbci	r29, 0xFA	; 250
    4dca:	88 83       	st	Y, r24
    4dcc:	3d c0       	rjmp	.+122    	; 0x4e48 <nibbleChange+0x354>
    4dce:	61 30       	cpi	r22, 0x01	; 1
    4dd0:	41 f4       	brne	.+16     	; 0x4de2 <nibbleChange+0x2ee>
    4dd2:	d0 e0       	ldi	r29, 0x00	; 0
    4dd4:	c6 51       	subi	r28, 0x16	; 22
    4dd6:	da 4f       	sbci	r29, 0xFA	; 250
    4dd8:	88 81       	ld	r24, Y
    4dda:	87 70       	andi	r24, 0x07	; 7
    4ddc:	8f 5f       	subi	r24, 0xFF	; 255
    4dde:	88 83       	st	Y, r24
    4de0:	33 c0       	rjmp	.+102    	; 0x4e48 <nibbleChange+0x354>
    4de2:	ec 2f       	mov	r30, r28
    4de4:	f0 e0       	ldi	r31, 0x00	; 0
    4de6:	e6 51       	subi	r30, 0x16	; 22
    4de8:	fa 4f       	sbci	r31, 0xFA	; 250
    4dea:	80 81       	ld	r24, Z
    4dec:	82 50       	subi	r24, 0x02	; 2
    4dee:	87 70       	andi	r24, 0x07	; 7
    4df0:	8f 5f       	subi	r24, 0xFF	; 255
    4df2:	80 83       	st	Z, r24
    4df4:	29 c0       	rjmp	.+82     	; 0x4e48 <nibbleChange+0x354>
    4df6:	ea ee       	ldi	r30, 0xEA	; 234
    4df8:	f5 e0       	ldi	r31, 0x05	; 5
    4dfa:	90 81       	ld	r25, Z
    4dfc:	81 81       	ldd	r24, Z+1	; 0x01
    4dfe:	99 0f       	add	r25, r25
    4e00:	29 2f       	mov	r18, r25
    4e02:	22 0f       	add	r18, r18
    4e04:	22 0f       	add	r18, r18
    4e06:	92 0f       	add	r25, r18
    4e08:	89 0f       	add	r24, r25
    4e0a:	c1 11       	cpse	r28, r1
    4e0c:	07 c0       	rjmp	.+14     	; 0x4e1c <nibbleChange+0x328>
    4e0e:	66 0f       	add	r22, r22
    4e10:	96 2f       	mov	r25, r22
    4e12:	99 0f       	add	r25, r25
    4e14:	99 0f       	add	r25, r25
    4e16:	69 0f       	add	r22, r25
    4e18:	68 0f       	add	r22, r24
    4e1a:	01 c0       	rjmp	.+2      	; 0x4e1e <nibbleChange+0x32a>
    4e1c:	68 0f       	add	r22, r24
    4e1e:	66 23       	and	r22, r22
    4e20:	1c f0       	brlt	.+6      	; 0x4e28 <nibbleChange+0x334>
    4e22:	61 34       	cpi	r22, 0x41	; 65
    4e24:	1c f4       	brge	.+6      	; 0x4e2c <nibbleChange+0x338>
    4e26:	03 c0       	rjmp	.+6      	; 0x4e2e <nibbleChange+0x33a>
    4e28:	60 e0       	ldi	r22, 0x00	; 0
    4e2a:	01 c0       	rjmp	.+2      	; 0x4e2e <nibbleChange+0x33a>
    4e2c:	60 e0       	ldi	r22, 0x00	; 0
    4e2e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <nibble>
    4e32:	06 c0       	rjmp	.+12     	; 0x4e40 <nibbleChange+0x34c>
    4e34:	ea ee       	ldi	r30, 0xEA	; 234
    4e36:	f5 e0       	ldi	r31, 0x05	; 5
    4e38:	80 81       	ld	r24, Z
    4e3a:	8f 5f       	subi	r24, 0xFF	; 255
    4e3c:	80 83       	st	Z, r24
    4e3e:	6a 50       	subi	r22, 0x0A	; 10
    4e40:	6a 30       	cpi	r22, 0x0A	; 10
    4e42:	c4 f7       	brge	.-16     	; 0x4e34 <nibbleChange+0x340>
    4e44:	60 93 eb 05 	sts	0x05EB, r22	; 0x8005eb <nibble+0x1>
    4e48:	df 91       	pop	r29
    4e4a:	cf 91       	pop	r28
    4e4c:	1f 91       	pop	r17
    4e4e:	0f 91       	pop	r16
    4e50:	08 95       	ret

00004e52 <nibbleToData>:
    4e52:	e0 91 9b 05 	lds	r30, 0x059B	; 0x80059b <dataType>
    4e56:	8e 2f       	mov	r24, r30
    4e58:	90 e0       	ldi	r25, 0x00	; 0
    4e5a:	fc 01       	movw	r30, r24
    4e5c:	32 97       	sbiw	r30, 0x02	; 2
    4e5e:	ed 30       	cpi	r30, 0x0D	; 13
    4e60:	f1 05       	cpc	r31, r1
    4e62:	08 f0       	brcs	.+2      	; 0x4e66 <nibbleToData+0x14>
    4e64:	da c0       	rjmp	.+436    	; 0x501a <nibbleToData+0x1c8>
    4e66:	88 27       	eor	r24, r24
    4e68:	e7 56       	subi	r30, 0x67	; 103
    4e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e6c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e6e:	0c 94 be 3f 	jmp	0x7f7c	; 0x7f7c <__tablejump2__>
    4e72:	ea ee       	ldi	r30, 0xEA	; 234
    4e74:	f5 e0       	ldi	r31, 0x05	; 5
    4e76:	80 81       	ld	r24, Z
    4e78:	20 e1       	ldi	r18, 0x10	; 16
    4e7a:	82 9f       	mul	r24, r18
    4e7c:	c0 01       	movw	r24, r0
    4e7e:	11 24       	eor	r1, r1
    4e80:	91 81       	ldd	r25, Z+1	; 0x01
    4e82:	9f 70       	andi	r25, 0x0F	; 15
    4e84:	89 2b       	or	r24, r25
    4e86:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4e8a:	08 95       	ret
    4e8c:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4e90:	8f ef       	ldi	r24, 0xFF	; 255
    4e92:	89 0f       	add	r24, r25
    4e94:	80 31       	cpi	r24, 0x10	; 16
    4e96:	18 f0       	brcs	.+6      	; 0x4e9e <nibbleToData+0x4c>
    4e98:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <dataEntry>
    4e9c:	08 95       	ret
    4e9e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4ea2:	08 95       	ret
    4ea4:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <nibble>
    4ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    4eaa:	21 f0       	breq	.+8      	; 0x4eb4 <nibbleToData+0x62>
    4eac:	80 91 eb 05 	lds	r24, 0x05EB	; 0x8005eb <nibble+0x1>
    4eb0:	8f 3f       	cpi	r24, 0xFF	; 255
    4eb2:	21 f4       	brne	.+8      	; 0x4ebc <nibbleToData+0x6a>
    4eb4:	8f ef       	ldi	r24, 0xFF	; 255
    4eb6:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4eba:	08 95       	ret
    4ebc:	28 2f       	mov	r18, r24
    4ebe:	22 0f       	add	r18, r18
    4ec0:	82 0f       	add	r24, r18
    4ec2:	88 0f       	add	r24, r24
    4ec4:	88 0f       	add	r24, r24
    4ec6:	89 0f       	add	r24, r25
    4ec8:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4ecc:	08 95       	ret
    4ece:	ea ee       	ldi	r30, 0xEA	; 234
    4ed0:	f5 e0       	ldi	r31, 0x05	; 5
    4ed2:	80 81       	ld	r24, Z
    4ed4:	30 e2       	ldi	r19, 0x20	; 32
    4ed6:	83 9f       	mul	r24, r19
    4ed8:	c0 01       	movw	r24, r0
    4eda:	11 24       	eor	r1, r1
    4edc:	21 81       	ldd	r18, Z+1	; 0x01
    4ede:	32 81       	ldd	r19, Z+2	; 0x02
    4ee0:	22 0f       	add	r18, r18
    4ee2:	42 2f       	mov	r20, r18
    4ee4:	44 0f       	add	r20, r20
    4ee6:	44 0f       	add	r20, r20
    4ee8:	24 0f       	add	r18, r20
    4eea:	23 0f       	add	r18, r19
    4eec:	20 32       	cpi	r18, 0x20	; 32
    4eee:	20 f0       	brcs	.+8      	; 0x4ef8 <nibbleToData+0xa6>
    4ef0:	8f 61       	ori	r24, 0x1F	; 31
    4ef2:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4ef6:	08 95       	ret
    4ef8:	82 2b       	or	r24, r18
    4efa:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4efe:	08 95       	ret
    4f00:	ea ee       	ldi	r30, 0xEA	; 234
    4f02:	f5 e0       	ldi	r31, 0x05	; 5
    4f04:	20 81       	ld	r18, Z
    4f06:	81 81       	ldd	r24, Z+1	; 0x01
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	ac 01       	movw	r20, r24
    4f0c:	44 0f       	add	r20, r20
    4f0e:	55 1f       	adc	r21, r21
    4f10:	88 0f       	add	r24, r24
    4f12:	99 1f       	adc	r25, r25
    4f14:	88 0f       	add	r24, r24
    4f16:	99 1f       	adc	r25, r25
    4f18:	88 0f       	add	r24, r24
    4f1a:	99 1f       	adc	r25, r25
    4f1c:	84 0f       	add	r24, r20
    4f1e:	95 1f       	adc	r25, r21
    4f20:	34 e6       	ldi	r19, 0x64	; 100
    4f22:	23 9f       	mul	r18, r19
    4f24:	80 0d       	add	r24, r0
    4f26:	91 1d       	adc	r25, r1
    4f28:	11 24       	eor	r1, r1
    4f2a:	22 81       	ldd	r18, Z+2	; 0x02
    4f2c:	82 0f       	add	r24, r18
    4f2e:	91 1d       	adc	r25, r1
    4f30:	8f 3f       	cpi	r24, 0xFF	; 255
    4f32:	91 05       	cpc	r25, r1
    4f34:	29 f0       	breq	.+10     	; 0x4f40 <nibbleToData+0xee>
    4f36:	20 f0       	brcs	.+8      	; 0x4f40 <nibbleToData+0xee>
    4f38:	8f ef       	ldi	r24, 0xFF	; 255
    4f3a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f3e:	08 95       	ret
    4f40:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f44:	08 95       	ret
    4f46:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4f4a:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f4e:	84 30       	cpi	r24, 0x04	; 4
    4f50:	08 f4       	brcc	.+2      	; 0x4f54 <nibbleToData+0x102>
    4f52:	63 c0       	rjmp	.+198    	; 0x501a <nibbleToData+0x1c8>
    4f54:	8f ef       	ldi	r24, 0xFF	; 255
    4f56:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f5a:	08 95       	ret
    4f5c:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4f60:	83 70       	andi	r24, 0x03	; 3
    4f62:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f66:	08 95       	ret
    4f68:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <nibble>
    4f6c:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4f70:	08 95       	ret
    4f72:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <dataEntry>
    4f76:	80 e0       	ldi	r24, 0x00	; 0
    4f78:	0c c0       	rjmp	.+24     	; 0x4f92 <nibbleToData+0x140>
    4f7a:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <dataEntry>
    4f7e:	99 0f       	add	r25, r25
    4f80:	e8 2f       	mov	r30, r24
    4f82:	f0 e0       	ldi	r31, 0x00	; 0
    4f84:	e6 51       	subi	r30, 0x16	; 22
    4f86:	fa 4f       	sbci	r31, 0xFA	; 250
    4f88:	20 81       	ld	r18, Z
    4f8a:	92 0f       	add	r25, r18
    4f8c:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <dataEntry>
    4f90:	8f 5f       	subi	r24, 0xFF	; 255
    4f92:	88 30       	cpi	r24, 0x08	; 8
    4f94:	90 f3       	brcs	.-28     	; 0x4f7a <nibbleToData+0x128>
    4f96:	08 95       	ret
    4f98:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <dataEntry32>
    4f9c:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <dataEntry32+0x1>
    4fa0:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <dataEntry32+0x2>
    4fa4:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <dataEntry32+0x3>
    4fa8:	a8 ec       	ldi	r26, 0xC8	; 200
    4faa:	b5 e0       	ldi	r27, 0x05	; 5
    4fac:	88 e0       	ldi	r24, 0x08	; 8
    4fae:	10 c0       	rjmp	.+32     	; 0x4fd0 <nibbleToData+0x17e>
    4fb0:	82 50       	subi	r24, 0x02	; 2
    4fb2:	f0 e0       	ldi	r31, 0x00	; 0
    4fb4:	e6 51       	subi	r30, 0x16	; 22
    4fb6:	fa 4f       	sbci	r31, 0xFA	; 250
    4fb8:	90 81       	ld	r25, Z
    4fba:	e8 2f       	mov	r30, r24
    4fbc:	f0 e0       	ldi	r31, 0x00	; 0
    4fbe:	e6 51       	subi	r30, 0x16	; 22
    4fc0:	fa 4f       	sbci	r31, 0xFA	; 250
    4fc2:	20 81       	ld	r18, Z
    4fc4:	30 e1       	ldi	r19, 0x10	; 16
    4fc6:	23 9f       	mul	r18, r19
    4fc8:	90 0d       	add	r25, r0
    4fca:	11 24       	eor	r1, r1
    4fcc:	9c 93       	st	X, r25
    4fce:	11 96       	adiw	r26, 0x01	; 1
    4fd0:	ef ef       	ldi	r30, 0xFF	; 255
    4fd2:	e8 0f       	add	r30, r24
    4fd4:	81 11       	cpse	r24, r1
    4fd6:	ec cf       	rjmp	.-40     	; 0x4fb0 <nibbleToData+0x15e>
    4fd8:	08 95       	ret
    4fda:	ea ee       	ldi	r30, 0xEA	; 234
    4fdc:	f5 e0       	ldi	r31, 0x05	; 5
    4fde:	21 81       	ldd	r18, Z+1	; 0x01
    4fe0:	90 81       	ld	r25, Z
    4fe2:	89 2f       	mov	r24, r25
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	88 0f       	add	r24, r24
    4fea:	99 1f       	adc	r25, r25
    4fec:	88 0f       	add	r24, r24
    4fee:	99 1f       	adc	r25, r25
    4ff0:	88 0f       	add	r24, r24
    4ff2:	99 1f       	adc	r25, r25
    4ff4:	9f ef       	ldi	r25, 0xFF	; 255
    4ff6:	92 0f       	add	r25, r18
    4ff8:	89 2b       	or	r24, r25
    4ffa:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    4ffe:	08 95       	ret
    5000:	ea ee       	ldi	r30, 0xEA	; 234
    5002:	f5 e0       	ldi	r31, 0x05	; 5
    5004:	80 81       	ld	r24, Z
    5006:	91 81       	ldd	r25, Z+1	; 0x01
    5008:	88 0f       	add	r24, r24
    500a:	28 2f       	mov	r18, r24
    500c:	22 0f       	add	r18, r18
    500e:	22 0f       	add	r18, r18
    5010:	82 0f       	add	r24, r18
    5012:	89 0f       	add	r24, r25
    5014:	81 50       	subi	r24, 0x01	; 1
    5016:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    501a:	08 95       	ret

0000501c <menuTextOut>:
    501c:	0f 93       	push	r16
    501e:	1f 93       	push	r17
    5020:	cf 93       	push	r28
    5022:	df 93       	push	r29
    5024:	8c 01       	movw	r16, r24
    5026:	d6 2f       	mov	r29, r22
    5028:	c0 e0       	ldi	r28, 0x00	; 0
    502a:	0c c0       	rjmp	.+24     	; 0x5044 <menuTextOut+0x28>
    502c:	f8 01       	movw	r30, r16
    502e:	84 91       	lpm	r24, Z
    5030:	88 23       	and	r24, r24
    5032:	19 f0       	breq	.+6      	; 0x503a <menuTextOut+0x1e>
    5034:	0f 5f       	subi	r16, 0xFF	; 255
    5036:	1f 4f       	sbci	r17, 0xFF	; 255
    5038:	02 c0       	rjmp	.+4      	; 0x503e <menuTextOut+0x22>
    503a:	8d 2f       	mov	r24, r29
    503c:	d0 e2       	ldi	r29, 0x20	; 32
    503e:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    5042:	cf 5f       	subi	r28, 0xFF	; 255
    5044:	ca 30       	cpi	r28, 0x0A	; 10
    5046:	90 f3       	brcs	.-28     	; 0x502c <menuTextOut+0x10>
    5048:	df 91       	pop	r29
    504a:	cf 91       	pop	r28
    504c:	1f 91       	pop	r17
    504e:	0f 91       	pop	r16
    5050:	08 95       	ret

00005052 <menuParentMenuToLCD>:
    5052:	80 e4       	ldi	r24, 0x40	; 64
    5054:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    5058:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    505c:	e1 11       	cpse	r30, r1
    505e:	07 c0       	rjmp	.+14     	; 0x506e <menuParentMenuToLCD+0x1c>
    5060:	6a e3       	ldi	r22, 0x3A	; 58
    5062:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <pMenuTopTitle>
    5066:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <pMenuTopTitle+0x1>
    506a:	d8 cf       	rjmp	.-80     	; 0x501c <menuTextOut>
    506c:	08 95       	ret
    506e:	f0 e0       	ldi	r31, 0x00	; 0
    5070:	31 97       	sbiw	r30, 0x01	; 1
    5072:	ee 0f       	add	r30, r30
    5074:	ff 1f       	adc	r31, r31
    5076:	ef 55       	subi	r30, 0x5F	; 95
    5078:	fa 4f       	sbci	r31, 0xFA	; 250
    507a:	80 81       	ld	r24, Z
    507c:	91 81       	ldd	r25, Z+1	; 0x01
    507e:	6a e3       	ldi	r22, 0x3A	; 58
    5080:	02 96       	adiw	r24, 0x02	; 2
    5082:	cc cf       	rjmp	.-104    	; 0x501c <menuTextOut>
    5084:	08 95       	ret

00005086 <menuDisplayValue>:
    5086:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    508a:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    508e:	84 91       	lpm	r24, Z
    5090:	8f 73       	andi	r24, 0x3F	; 63
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	02 97       	sbiw	r24, 0x02	; 2
    5096:	1c f0       	brlt	.+6      	; 0x509e <menuDisplayValue+0x18>
    5098:	c8 da       	rcall	.-2672   	; 0x462a <dataToNibbles>
    509a:	ba db       	rcall	.-2188   	; 0x4810 <nibbleToLCDstring>
    509c:	07 cd       	rjmp	.-1522   	; 0x4aac <LCDStringOut>
    509e:	08 95       	ret

000050a0 <menuCursorSetDataNibble>:
    50a0:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    50a4:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    50a8:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    50ac:	e8 0f       	add	r30, r24
    50ae:	f1 1d       	adc	r31, r1
    50b0:	31 96       	adiw	r30, 0x01	; 1
    50b2:	84 91       	lpm	r24, Z
    50b4:	82 5e       	subi	r24, 0xE2	; 226
    50b6:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    50ba:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    50be:	30 e0       	ldi	r19, 0x00	; 0
    50c0:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    50c4:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    50c8:	84 91       	lpm	r24, Z
    50ca:	90 e0       	ldi	r25, 0x00	; 0
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	28 17       	cp	r18, r24
    50d0:	39 07       	cpc	r19, r25
    50d2:	14 f4       	brge	.+4      	; 0x50d8 <menuCursorSetDataNibble+0x38>
    50d4:	68 da       	rcall	.-2864   	; 0x45a6 <softkeyRight>
    50d6:	03 c0       	rjmp	.+6      	; 0x50de <menuCursorSetDataNibble+0x3e>
    50d8:	83 e0       	ldi	r24, 0x03	; 3
    50da:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    50de:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    50e2:	88 23       	and	r24, r24
    50e4:	11 f0       	breq	.+4      	; 0x50ea <menuCursorSetDataNibble+0x4a>
    50e6:	59 da       	rcall	.-2894   	; 0x459a <softkeyLeft>
    50e8:	03 c0       	rjmp	.+6      	; 0x50f0 <menuCursorSetDataNibble+0x50>
    50ea:	82 e0       	ldi	r24, 0x02	; 2
    50ec:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    50f0:	78 da       	rcall	.-2832   	; 0x45e2 <softkeyPlus>
    50f2:	89 da       	rcall	.-2798   	; 0x4606 <softkeyMinus>
    50f4:	0c 94 5b 3f 	jmp	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    50f8:	08 95       	ret

000050fa <menuCursorSetExtra>:
    50fa:	84 e1       	ldi	r24, 0x14	; 20
    50fc:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <lcd_goto>
    5100:	08 95       	ret

00005102 <menuOnEnterStatusMidiIn>:
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	cf 93       	push	r28
    5108:	f8 df       	rcall	.-16     	; 0x50fa <menuCursorSetExtra>
    510a:	8f e3       	ldi	r24, 0x3F	; 63
    510c:	94 e0       	ldi	r25, 0x04	; 4
    510e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    5112:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    5116:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    511a:	0e 94 51 3e 	call	0x7ca2	; 0x7ca2 <lcd_wordout>
    511e:	8d e2       	ldi	r24, 0x2D	; 45
    5120:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    5124:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    5128:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    512c:	04 97       	sbiw	r24, 0x04	; 4
    512e:	30 f4       	brcc	.+12     	; 0x513c <menuOnEnterStatusMidiIn+0x3a>
    5130:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    5134:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    5138:	c8 2f       	mov	r28, r24
    513a:	01 c0       	rjmp	.+2      	; 0x513e <menuOnEnterStatusMidiIn+0x3c>
    513c:	c4 e0       	ldi	r28, 0x04	; 4
    513e:	00 91 6e 16 	lds	r16, 0x166E	; 0x80166e <midiRxInIndex>
    5142:	10 e0       	ldi	r17, 0x00	; 0
    5144:	06 59       	subi	r16, 0x96	; 150
    5146:	1b 4e       	sbci	r17, 0xEB	; 235
    5148:	13 c0       	rjmp	.+38     	; 0x5170 <menuOnEnterStatusMidiIn+0x6e>
    514a:	84 e1       	ldi	r24, 0x14	; 20
    514c:	0b 36       	cpi	r16, 0x6B	; 107
    514e:	18 07       	cpc	r17, r24
    5150:	10 f0       	brcs	.+4      	; 0x5156 <menuOnEnterStatusMidiIn+0x54>
    5152:	f8 01       	movw	r30, r16
    5154:	02 c0       	rjmp	.+4      	; 0x515a <menuOnEnterStatusMidiIn+0x58>
    5156:	ea e6       	ldi	r30, 0x6A	; 106
    5158:	f5 e1       	ldi	r31, 0x15	; 21
    515a:	8f 01       	movw	r16, r30
    515c:	01 50       	subi	r16, 0x01	; 1
    515e:	11 09       	sbc	r17, r1
    5160:	80 81       	ld	r24, Z
    5162:	0e 94 a1 3c 	call	0x7942	; 0x7942 <lcd_hexout>
    5166:	c1 50       	subi	r28, 0x01	; 1
    5168:	19 f0       	breq	.+6      	; 0x5170 <menuOnEnterStatusMidiIn+0x6e>
    516a:	80 e2       	ldi	r24, 0x20	; 32
    516c:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    5170:	c1 11       	cpse	r28, r1
    5172:	eb cf       	rjmp	.-42     	; 0x514a <menuOnEnterStatusMidiIn+0x48>
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	cf 91       	pop	r28
    5178:	1f 91       	pop	r17
    517a:	0f 91       	pop	r16
    517c:	08 95       	ret

0000517e <menuOnEnterStatusMidiOut>:
    517e:	0f 93       	push	r16
    5180:	1f 93       	push	r17
    5182:	cf 93       	push	r28
    5184:	ba df       	rcall	.-140    	; 0x50fa <menuCursorSetExtra>
    5186:	8a e3       	ldi	r24, 0x3A	; 58
    5188:	94 e0       	ldi	r25, 0x04	; 4
    518a:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    518e:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    5192:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    5196:	0e 94 51 3e 	call	0x7ca2	; 0x7ca2 <lcd_wordout>
    519a:	8d e2       	ldi	r24, 0x2D	; 45
    519c:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    51a0:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    51a4:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    51a8:	04 97       	sbiw	r24, 0x04	; 4
    51aa:	30 f4       	brcc	.+12     	; 0x51b8 <menuOnEnterStatusMidiOut+0x3a>
    51ac:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    51b0:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    51b4:	c8 2f       	mov	r28, r24
    51b6:	01 c0       	rjmp	.+2      	; 0x51ba <menuOnEnterStatusMidiOut+0x3c>
    51b8:	c4 e0       	ldi	r28, 0x04	; 4
    51ba:	00 91 19 14 	lds	r16, 0x1419	; 0x801419 <midiTxInIndex>
    51be:	10 e0       	ldi	r17, 0x00	; 0
    51c0:	05 59       	subi	r16, 0x95	; 149
    51c2:	1a 4e       	sbci	r17, 0xEA	; 234
    51c4:	13 c0       	rjmp	.+38     	; 0x51ec <menuOnEnterStatusMidiOut+0x6e>
    51c6:	85 e1       	ldi	r24, 0x15	; 21
    51c8:	0c 36       	cpi	r16, 0x6C	; 108
    51ca:	18 07       	cpc	r17, r24
    51cc:	10 f0       	brcs	.+4      	; 0x51d2 <menuOnEnterStatusMidiOut+0x54>
    51ce:	f8 01       	movw	r30, r16
    51d0:	02 c0       	rjmp	.+4      	; 0x51d6 <menuOnEnterStatusMidiOut+0x58>
    51d2:	eb e6       	ldi	r30, 0x6B	; 107
    51d4:	f6 e1       	ldi	r31, 0x16	; 22
    51d6:	8f 01       	movw	r16, r30
    51d8:	01 50       	subi	r16, 0x01	; 1
    51da:	11 09       	sbc	r17, r1
    51dc:	80 81       	ld	r24, Z
    51de:	0e 94 a1 3c 	call	0x7942	; 0x7942 <lcd_hexout>
    51e2:	c1 50       	subi	r28, 0x01	; 1
    51e4:	19 f0       	breq	.+6      	; 0x51ec <menuOnEnterStatusMidiOut+0x6e>
    51e6:	80 e2       	ldi	r24, 0x20	; 32
    51e8:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    51ec:	c1 11       	cpse	r28, r1
    51ee:	eb cf       	rjmp	.-42     	; 0x51c6 <menuOnEnterStatusMidiOut+0x48>
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	cf 91       	pop	r28
    51f4:	1f 91       	pop	r17
    51f6:	0f 91       	pop	r16
    51f8:	08 95       	ret

000051fa <menuOnEnterLogDisp>:
    51fa:	0f 93       	push	r16
    51fc:	1f 93       	push	r17
    51fe:	cf 93       	push	r28
    5200:	8f 3f       	cpi	r24, 0xFF	; 255
    5202:	a9 f4       	brne	.+42     	; 0x522e <menuOnEnterLogDisp+0x34>
    5204:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <log_count>
    5208:	81 50       	subi	r24, 0x01	; 1
    520a:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3115>
    520e:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <showText.3116>
    5212:	62 e9       	ldi	r22, 0x92	; 146
    5214:	74 e1       	ldi	r23, 0x14	; 20
    5216:	80 e0       	ldi	r24, 0x00	; 0
    5218:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    521c:	6c e8       	ldi	r22, 0x8C	; 140
    521e:	74 e1       	ldi	r23, 0x14	; 20
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    5226:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    522a:	cf ef       	ldi	r28, 0xFF	; 255
    522c:	2f c0       	rjmp	.+94     	; 0x528c <menuOnEnterLogDisp+0x92>
    522e:	84 30       	cpi	r24, 0x04	; 4
    5230:	49 f4       	brne	.+18     	; 0x5244 <menuOnEnterLogDisp+0x4a>
    5232:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    5236:	88 23       	and	r24, r24
    5238:	21 f1       	breq	.+72     	; 0x5282 <menuOnEnterLogDisp+0x88>
    523a:	81 50       	subi	r24, 0x01	; 1
    523c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3115>
    5240:	cf ef       	ldi	r28, 0xFF	; 255
    5242:	24 c0       	rjmp	.+72     	; 0x528c <menuOnEnterLogDisp+0x92>
    5244:	81 30       	cpi	r24, 0x01	; 1
    5246:	91 f4       	brne	.+36     	; 0x526c <menuOnEnterLogDisp+0x72>
    5248:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3115>
    524c:	10 e0       	ldi	r17, 0x00	; 0
    524e:	0f 5f       	subi	r16, 0xFF	; 255
    5250:	1f 4f       	sbci	r17, 0xFF	; 255
    5252:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <log_count>
    5256:	90 e0       	ldi	r25, 0x00	; 0
    5258:	08 17       	cp	r16, r24
    525a:	19 07       	cpc	r17, r25
    525c:	a4 f4       	brge	.+40     	; 0x5286 <menuOnEnterLogDisp+0x8c>
    525e:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    5262:	8f 5f       	subi	r24, 0xFF	; 255
    5264:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <logEntryNr.3115>
    5268:	cf ef       	ldi	r28, 0xFF	; 255
    526a:	10 c0       	rjmp	.+32     	; 0x528c <menuOnEnterLogDisp+0x92>
    526c:	83 30       	cpi	r24, 0x03	; 3
    526e:	11 f0       	breq	.+4      	; 0x5274 <menuOnEnterLogDisp+0x7a>
    5270:	85 30       	cpi	r24, 0x05	; 5
    5272:	59 f4       	brne	.+22     	; 0x528a <menuOnEnterLogDisp+0x90>
    5274:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3116>
    5278:	80 95       	com	r24
    527a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <showText.3116>
    527e:	cf ef       	ldi	r28, 0xFF	; 255
    5280:	05 c0       	rjmp	.+10     	; 0x528c <menuOnEnterLogDisp+0x92>
    5282:	cf ef       	ldi	r28, 0xFF	; 255
    5284:	03 c0       	rjmp	.+6      	; 0x528c <menuOnEnterLogDisp+0x92>
    5286:	cf ef       	ldi	r28, 0xFF	; 255
    5288:	01 c0       	rjmp	.+2      	; 0x528c <menuOnEnterLogDisp+0x92>
    528a:	c0 e0       	ldi	r28, 0x00	; 0
    528c:	cf 3f       	cpi	r28, 0xFF	; 255
    528e:	09 f0       	breq	.+2      	; 0x5292 <menuOnEnterLogDisp+0x98>
    5290:	54 c0       	rjmp	.+168    	; 0x533a <menuOnEnterLogDisp+0x140>
    5292:	33 df       	rcall	.-410    	; 0x50fa <menuCursorSetExtra>
    5294:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <log_count>
    5298:	81 11       	cpse	r24, r1
    529a:	06 c0       	rjmp	.+12     	; 0x52a8 <menuOnEnterLogDisp+0xae>
    529c:	8d ef       	ldi	r24, 0xFD	; 253
    529e:	93 e0       	ldi	r25, 0x03	; 3
    52a0:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    52a4:	c0 e0       	ldi	r28, 0x00	; 0
    52a6:	1d c0       	rjmp	.+58     	; 0x52e2 <menuOnEnterLogDisp+0xe8>
    52a8:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    52ac:	8f 5f       	subi	r24, 0xFF	; 255
    52ae:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <lcd_dec2out>
    52b2:	8a e3       	ldi	r24, 0x3A	; 58
    52b4:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    52b8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3116>
    52bc:	81 11       	cpse	r24, r1
    52be:	08 c0       	rjmp	.+16     	; 0x52d0 <menuOnEnterLogDisp+0xd6>
    52c0:	60 e2       	ldi	r22, 0x20	; 32
    52c2:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    52c6:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <log_getShortTextFromIndex>
    52ca:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <lcd_puts>
    52ce:	06 c0       	rjmp	.+12     	; 0x52dc <menuOnEnterLogDisp+0xe2>
    52d0:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    52d4:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <log_getErrorText>
    52d8:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_puts_P>
    52dc:	0e 94 d9 3e 	call	0x7db2	; 0x7db2 <lcd_clrEol>
    52e0:	0c df       	rcall	.-488    	; 0x50fa <menuCursorSetExtra>
    52e2:	61 e0       	ldi	r22, 0x01	; 1
    52e4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <showText.3116>
    52e8:	8f 3f       	cpi	r24, 0xFF	; 255
    52ea:	09 f0       	breq	.+2      	; 0x52ee <menuOnEnterLogDisp+0xf4>
    52ec:	60 e0       	ldi	r22, 0x00	; 0
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <keylabel_statcheck>
    52f4:	00 91 2c 02 	lds	r16, 0x022C	; 0x80022c <logEntryNr.3115>
    52f8:	10 e0       	ldi	r17, 0x00	; 0
    52fa:	0f 5f       	subi	r16, 0xFF	; 255
    52fc:	1f 4f       	sbci	r17, 0xFF	; 255
    52fe:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <log_count>
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	08 17       	cp	r16, r24
    5306:	19 07       	cpc	r17, r25
    5308:	34 f4       	brge	.+12     	; 0x5316 <menuOnEnterLogDisp+0x11c>
    530a:	6c ea       	ldi	r22, 0xAC	; 172
    530c:	74 e1       	ldi	r23, 0x14	; 20
    530e:	83 e0       	ldi	r24, 0x03	; 3
    5310:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    5314:	03 c0       	rjmp	.+6      	; 0x531c <menuOnEnterLogDisp+0x122>
    5316:	83 e0       	ldi	r24, 0x03	; 3
    5318:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    531c:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <logEntryNr.3115>
    5320:	88 23       	and	r24, r24
    5322:	31 f0       	breq	.+12     	; 0x5330 <menuOnEnterLogDisp+0x136>
    5324:	6a ea       	ldi	r22, 0xAA	; 170
    5326:	74 e1       	ldi	r23, 0x14	; 20
    5328:	82 e0       	ldi	r24, 0x02	; 2
    532a:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
    532e:	03 c0       	rjmp	.+6      	; 0x5336 <menuOnEnterLogDisp+0x13c>
    5330:	82 e0       	ldi	r24, 0x02	; 2
    5332:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    5336:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    533a:	8c 2f       	mov	r24, r28
    533c:	cf 91       	pop	r28
    533e:	1f 91       	pop	r17
    5340:	0f 91       	pop	r16
    5342:	08 95       	ret

00005344 <menuCursorSetMenu>:
    5344:	8a e4       	ldi	r24, 0x4A	; 74
    5346:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <lcd_goto>
    534a:	08 95       	ret

0000534c <menu_OnEnterMidiPanic>:
    534c:	8c e1       	ldi	r24, 0x1C	; 28
    534e:	94 e0       	ldi	r25, 0x04	; 4
    5350:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <lcd_message_P>
    5354:	0e 94 bc 38 	call	0x7178	; 0x7178 <midiSendAllNotesOff>
    5358:	f5 df       	rcall	.-22     	; 0x5344 <menuCursorSetMenu>
    535a:	80 e0       	ldi	r24, 0x00	; 0
    535c:	08 95       	ret

0000535e <menuClearExtraDisp>:
    535e:	cd de       	rcall	.-614    	; 0x50fa <menuCursorSetExtra>
    5360:	8a e0       	ldi	r24, 0x0A	; 10
    5362:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <lcd_blank>
    5366:	08 95       	ret

00005368 <menu_ClearDataDisp>:
    5368:	8e e1       	ldi	r24, 0x1E	; 30
    536a:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    536e:	8a e0       	ldi	r24, 0x0A	; 10
    5370:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <lcd_blank>
    5374:	08 95       	ret

00005376 <menu_ModuleTestExecute>:
    5376:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    537a:	8f 3f       	cpi	r24, 0xFF	; 255
    537c:	11 f0       	breq	.+4      	; 0x5382 <menu_ModuleTestExecute+0xc>
    537e:	8d 3f       	cpi	r24, 0xFD	; 253
    5380:	79 f5       	brne	.+94     	; 0x53e0 <menu_ModuleTestExecute+0x6a>
    5382:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <lcd_cursoroff>
    5386:	f0 df       	rcall	.-32     	; 0x5368 <menu_ClearDataDisp>
    5388:	10 92 19 08 	sts	0x0819, r1	; 0x800819 <msgPipe_Handling>
    538c:	90 e0       	ldi	r25, 0x00	; 0
    538e:	ec e6       	ldi	r30, 0x6C	; 108
    5390:	f2 e0       	ldi	r31, 0x02	; 2
    5392:	07 c0       	rjmp	.+14     	; 0x53a2 <menu_ModuleTestExecute+0x2c>
    5394:	21 81       	ldd	r18, Z+1	; 0x01
    5396:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    539a:	82 2b       	or	r24, r18
    539c:	81 83       	std	Z+1, r24	; 0x01
    539e:	38 96       	adiw	r30, 0x08	; 8
    53a0:	9f 5f       	subi	r25, 0xFF	; 255
    53a2:	90 32       	cpi	r25, 0x20	; 32
    53a4:	b8 f3       	brcs	.-18     	; 0x5394 <menu_ModuleTestExecute+0x1e>
    53a6:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    53aa:	8f 3f       	cpi	r24, 0xFF	; 255
    53ac:	19 f4       	brne	.+6      	; 0x53b4 <menu_ModuleTestExecute+0x3e>
    53ae:	10 92 cc 05 	sts	0x05CC, r1	; 0x8005cc <menu_TestModuleBitCounter>
    53b2:	5c c0       	rjmp	.+184    	; 0x546c <menu_ModuleTestExecute+0xf6>
    53b4:	86 e1       	ldi	r24, 0x16	; 22
    53b6:	94 e0       	ldi	r25, 0x04	; 4
    53b8:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <lcd_message_P>
    53bc:	8e ef       	ldi	r24, 0xFE	; 254
    53be:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    53c2:	9f b7       	in	r25, 0x3f	; 63
    53c4:	f8 94       	cli
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	06 c0       	rjmp	.+12     	; 0x53d6 <menu_ModuleTestExecute+0x60>
    53ca:	e0 e5       	ldi	r30, 0x50	; 80
    53cc:	f2 e0       	ldi	r31, 0x02	; 2
    53ce:	82 e0       	ldi	r24, 0x02	; 2
    53d0:	84 87       	std	Z+12, r24	; 0x0c
    53d2:	85 87       	std	Z+13, r24	; 0x0d
    53d4:	80 e0       	ldi	r24, 0x00	; 0
    53d6:	81 11       	cpse	r24, r1
    53d8:	f8 cf       	rjmp	.-16     	; 0x53ca <menu_ModuleTestExecute+0x54>
    53da:	9f bf       	out	0x3f, r25	; 63
    53dc:	b3 df       	rcall	.-154    	; 0x5344 <menuCursorSetMenu>
    53de:	46 c0       	rjmp	.+140    	; 0x546c <menu_ModuleTestExecute+0xf6>
    53e0:	8e 3f       	cpi	r24, 0xFE	; 254
    53e2:	41 f4       	brne	.+16     	; 0x53f4 <menu_ModuleTestExecute+0x7e>
    53e4:	8f ef       	ldi	r24, 0xFF	; 255
    53e6:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <msgPipe_Handling>
    53ea:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <menu_TestModulePattern>
    53ee:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <lcd_cursosblink>
    53f2:	3c c0       	rjmp	.+120    	; 0x546c <menu_ModuleTestExecute+0xf6>
    53f4:	40 91 8f 05 	lds	r20, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    53f8:	50 91 90 05 	lds	r21, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    53fc:	60 91 91 05 	lds	r22, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5400:	70 91 92 05 	lds	r23, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    5404:	76 95       	lsr	r23
    5406:	67 95       	ror	r22
    5408:	57 95       	ror	r21
    540a:	47 95       	ror	r20
    540c:	40 93 8f 05 	sts	0x058F, r20	; 0x80058f <menu_TestModuleErrorList>
    5410:	50 93 90 05 	sts	0x0590, r21	; 0x800590 <menu_TestModuleErrorList+0x1>
    5414:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <menu_TestModuleErrorList+0x2>
    5418:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <menu_TestModuleErrorList+0x3>
    541c:	e8 2f       	mov	r30, r24
    541e:	f0 e0       	ldi	r31, 0x00	; 0
    5420:	df 01       	movw	r26, r30
    5422:	aa 0f       	add	r26, r26
    5424:	bb 1f       	adc	r27, r27
    5426:	aa 0f       	add	r26, r26
    5428:	bb 1f       	adc	r27, r27
    542a:	aa 0f       	add	r26, r26
    542c:	bb 1f       	adc	r27, r27
    542e:	a4 59       	subi	r26, 0x94	; 148
    5430:	bd 4f       	sbci	r27, 0xFD	; 253
    5432:	16 96       	adiw	r26, 0x06	; 6
    5434:	2c 91       	ld	r18, X
    5436:	90 91 e8 05 	lds	r25, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    543a:	29 23       	and	r18, r25
    543c:	49 f4       	brne	.+18     	; 0x5450 <menu_ModuleTestExecute+0xda>
    543e:	70 68       	ori	r23, 0x80	; 128
    5440:	40 93 8f 05 	sts	0x058F, r20	; 0x80058f <menu_TestModuleErrorList>
    5444:	50 93 90 05 	sts	0x0590, r21	; 0x800590 <menu_TestModuleErrorList+0x1>
    5448:	60 93 91 05 	sts	0x0591, r22	; 0x800591 <menu_TestModuleErrorList+0x2>
    544c:	70 93 92 05 	sts	0x0592, r23	; 0x800592 <menu_TestModuleErrorList+0x3>
    5450:	ee 0f       	add	r30, r30
    5452:	ff 1f       	adc	r31, r31
    5454:	ee 0f       	add	r30, r30
    5456:	ff 1f       	adc	r31, r31
    5458:	ee 0f       	add	r30, r30
    545a:	ff 1f       	adc	r31, r31
    545c:	e4 59       	subi	r30, 0x94	; 148
    545e:	fd 4f       	sbci	r31, 0xFD	; 253
    5460:	21 81       	ldd	r18, Z+1	; 0x01
    5462:	92 2b       	or	r25, r18
    5464:	91 83       	std	Z+1, r25	; 0x01
    5466:	8f 5f       	subi	r24, 0xFF	; 255
    5468:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    546c:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    5470:	e0 32       	cpi	r30, 0x20	; 32
    5472:	28 f5       	brcc	.+74     	; 0x54be <menu_ModuleTestExecute+0x148>
    5474:	f0 e0       	ldi	r31, 0x00	; 0
    5476:	ee 0f       	add	r30, r30
    5478:	ff 1f       	adc	r31, r31
    547a:	ee 0f       	add	r30, r30
    547c:	ff 1f       	adc	r31, r31
    547e:	ee 0f       	add	r30, r30
    5480:	ff 1f       	adc	r31, r31
    5482:	e4 59       	subi	r30, 0x94	; 148
    5484:	fd 4f       	sbci	r31, 0xFD	; 253
    5486:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <menu_TestModulePattern>
    548a:	98 2f       	mov	r25, r24
    548c:	90 95       	com	r25
    548e:	81 81       	ldd	r24, Z+1	; 0x01
    5490:	89 23       	and	r24, r25
    5492:	81 83       	std	Z+1, r24	; 0x01
    5494:	8e e1       	ldi	r24, 0x1E	; 30
    5496:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    549a:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <menu_TestModuleBitCounter>
    549e:	0e 94 dd 3c 	call	0x79ba	; 0x79ba <lcd_dec2out>
    54a2:	9f b7       	in	r25, 0x3f	; 63
    54a4:	f8 94       	cli
    54a6:	81 e0       	ldi	r24, 0x01	; 1
    54a8:	06 c0       	rjmp	.+12     	; 0x54b6 <menu_ModuleTestExecute+0x140>
    54aa:	e0 e5       	ldi	r30, 0x50	; 80
    54ac:	f2 e0       	ldi	r31, 0x02	; 2
    54ae:	88 e0       	ldi	r24, 0x08	; 8
    54b0:	84 87       	std	Z+12, r24	; 0x0c
    54b2:	15 86       	std	Z+13, r1	; 0x0d
    54b4:	80 e0       	ldi	r24, 0x00	; 0
    54b6:	81 11       	cpse	r24, r1
    54b8:	f8 cf       	rjmp	.-16     	; 0x54aa <menu_ModuleTestExecute+0x134>
    54ba:	9f bf       	out	0x3f, r25	; 63
    54bc:	08 95       	ret
    54be:	e0 32       	cpi	r30, 0x20	; 32
    54c0:	09 f0       	breq	.+2      	; 0x54c4 <menu_ModuleTestExecute+0x14e>
    54c2:	41 c0       	rjmp	.+130    	; 0x5546 <menu_ModuleTestExecute+0x1d0>
    54c4:	80 91 8f 05 	lds	r24, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    54c8:	90 91 90 05 	lds	r25, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    54cc:	a0 91 91 05 	lds	r26, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    54d0:	b0 91 92 05 	lds	r27, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    54d4:	00 97       	sbiw	r24, 0x00	; 0
    54d6:	a1 05       	cpc	r26, r1
    54d8:	b1 05       	cpc	r27, r1
    54da:	29 f4       	brne	.+10     	; 0x54e6 <menu_ModuleTestExecute+0x170>
    54dc:	82 e1       	ldi	r24, 0x12	; 18
    54de:	94 e0       	ldi	r25, 0x04	; 4
    54e0:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <lcd_message_P>
    54e4:	1f c0       	rjmp	.+62     	; 0x5524 <menu_ModuleTestExecute+0x1ae>
    54e6:	80 93 06 19 	sts	0x1906, r24	; 0x801906 <editLong>
    54ea:	90 93 07 19 	sts	0x1907, r25	; 0x801907 <editLong+0x1>
    54ee:	a0 93 08 19 	sts	0x1908, r26	; 0x801908 <editLong+0x2>
    54f2:	b0 93 09 19 	sts	0x1909, r27	; 0x801909 <editLong+0x3>
    54f6:	6a e0       	ldi	r22, 0x0A	; 10
    54f8:	79 e1       	ldi	r23, 0x19	; 25
    54fa:	8f e0       	ldi	r24, 0x0F	; 15
    54fc:	94 e0       	ldi	r25, 0x04	; 4
    54fe:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <putString_P>
    5502:	ac 01       	movw	r20, r24
    5504:	60 91 8f 05 	lds	r22, 0x058F	; 0x80058f <menu_TestModuleErrorList>
    5508:	70 91 90 05 	lds	r23, 0x0590	; 0x800590 <menu_TestModuleErrorList+0x1>
    550c:	80 91 91 05 	lds	r24, 0x0591	; 0x800591 <menu_TestModuleErrorList+0x2>
    5510:	90 91 92 05 	lds	r25, 0x0592	; 0x800592 <menu_TestModuleErrorList+0x3>
    5514:	0e 94 92 3d 	call	0x7b24	; 0x7b24 <putChar_long>
    5518:	fc 01       	movw	r30, r24
    551a:	10 82       	st	Z, r1
    551c:	8a e0       	ldi	r24, 0x0A	; 10
    551e:	99 e1       	ldi	r25, 0x19	; 25
    5520:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <lcd_message>
    5524:	8e ef       	ldi	r24, 0xFE	; 254
    5526:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    552a:	9f b7       	in	r25, 0x3f	; 63
    552c:	f8 94       	cli
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	06 c0       	rjmp	.+12     	; 0x553e <menu_ModuleTestExecute+0x1c8>
    5532:	e0 e5       	ldi	r30, 0x50	; 80
    5534:	f2 e0       	ldi	r31, 0x02	; 2
    5536:	82 e0       	ldi	r24, 0x02	; 2
    5538:	84 87       	std	Z+12, r24	; 0x0c
    553a:	85 87       	std	Z+13, r24	; 0x0d
    553c:	80 e0       	ldi	r24, 0x00	; 0
    553e:	81 11       	cpse	r24, r1
    5540:	f8 cf       	rjmp	.-16     	; 0x5532 <menu_ModuleTestExecute+0x1bc>
    5542:	9f bf       	out	0x3f, r25	; 63
    5544:	ff ce       	rjmp	.-514    	; 0x5344 <menuCursorSetMenu>
    5546:	08 95       	ret

00005548 <menu_ModuleTestPattern>:
    5548:	81 e0       	ldi	r24, 0x01	; 1
    554a:	90 e0       	ldi	r25, 0x00	; 0
    554c:	00 90 9e 05 	lds	r0, 0x059E	; 0x80059e <menuVmodule>
    5550:	02 c0       	rjmp	.+4      	; 0x5556 <menu_ModuleTestPattern+0xe>
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	0a 94       	dec	r0
    5558:	e2 f7       	brpl	.-8      	; 0x5552 <menu_ModuleTestPattern+0xa>
    555a:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <menu_TestModulePattern>
    555e:	8f ef       	ldi	r24, 0xFF	; 255
    5560:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <menu_TestModuleBitCounter>
    5564:	10 92 8f 05 	sts	0x058F, r1	; 0x80058f <menu_TestModuleErrorList>
    5568:	10 92 90 05 	sts	0x0590, r1	; 0x800590 <menu_TestModuleErrorList+0x1>
    556c:	10 92 91 05 	sts	0x0591, r1	; 0x800591 <menu_TestModuleErrorList+0x2>
    5570:	10 92 92 05 	sts	0x0592, r1	; 0x800592 <menu_TestModuleErrorList+0x3>
    5574:	00 df       	rcall	.-512    	; 0x5376 <menu_ModuleTestExecute>
    5576:	80 e0       	ldi	r24, 0x00	; 0
    5578:	08 95       	ret

0000557a <menuClearMenuDisp>:
    557a:	80 e4       	ldi	r24, 0x40	; 64
    557c:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    5580:	8a e0       	ldi	r24, 0x0A	; 10
    5582:	0e 94 cd 3e 	call	0x7d9a	; 0x7d9a <lcd_blank>
    5586:	de de       	rcall	.-580    	; 0x5344 <menuCursorSetMenu>
    5588:	8a e0       	ldi	r24, 0x0A	; 10
    558a:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <lcd_blank>
    558e:	08 95       	ret

00005590 <menu_ClearAllDisp>:
    5590:	f4 df       	rcall	.-24     	; 0x557a <menuClearMenuDisp>
    5592:	ea de       	rcall	.-556    	; 0x5368 <menu_ClearDataDisp>
    5594:	e4 ce       	rjmp	.-568    	; 0x535e <menuClearExtraDisp>
    5596:	08 95       	ret

00005598 <menuCheckArrowDown>:
    5598:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    559c:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    55a0:	84 91       	lpm	r24, Z
    55a2:	8f 73       	andi	r24, 0x3F	; 63
    55a4:	81 30       	cpi	r24, 0x01	; 1
    55a6:	11 f4       	brne	.+4      	; 0x55ac <menuCheckArrowDown+0x14>
    55a8:	04 c8       	rjmp	.-4088   	; 0x45b2 <softkeyDown>
    55aa:	08 95       	ret
    55ac:	3e 96       	adiw	r30, 0x0e	; 14
    55ae:	05 90       	lpm	r0, Z+
    55b0:	f4 91       	lpm	r31, Z
    55b2:	e0 2d       	mov	r30, r0
    55b4:	30 97       	sbiw	r30, 0x00	; 0
    55b6:	69 f0       	breq	.+26     	; 0x55d2 <menuCheckArrowDown+0x3a>
    55b8:	89 30       	cpi	r24, 0x09	; 9
    55ba:	41 f4       	brne	.+16     	; 0x55cc <menuCheckArrowDown+0x34>
    55bc:	80 81       	ld	r24, Z
    55be:	81 11       	cpse	r24, r1
    55c0:	03 c0       	rjmp	.+6      	; 0x55c8 <menuCheckArrowDown+0x30>
    55c2:	0c 94 df 22 	jmp	0x45be	; 0x45be <softkeyOn>
    55c6:	08 95       	ret
    55c8:	00 c8       	rjmp	.-4096   	; 0x45ca <softkeyOff>
    55ca:	08 95       	ret
    55cc:	0c 94 d9 22 	jmp	0x45b2	; 0x45b2 <softkeyDown>
    55d0:	08 95       	ret
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	0c 94 47 3f 	jmp	0x7e8e	; 0x7e8e <keylabel_clr>
    55d8:	08 95       	ret

000055da <menuCurrMenuToLCD>:
    55da:	cf 93       	push	r28
    55dc:	89 e4       	ldi	r24, 0x49	; 73
    55de:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    55e2:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    55e6:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    55ea:	c4 91       	lpm	r28, Z
    55ec:	c0 7c       	andi	r28, 0xC0	; 192
    55ee:	c0 38       	cpi	r28, 0x80	; 128
    55f0:	39 f4       	brne	.+14     	; 0x5600 <menuCurrMenuToLCD+0x26>
    55f2:	80 e2       	ldi	r24, 0x20	; 32
    55f4:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    55f8:	82 e0       	ldi	r24, 0x02	; 2
    55fa:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    55fe:	05 c0       	rjmp	.+10     	; 0x560a <menuCurrMenuToLCD+0x30>
    5600:	8f e7       	ldi	r24, 0x7F	; 127
    5602:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    5606:	0e 94 cd 22 	call	0x459a	; 0x459a <softkeyLeft>
    560a:	c0 3c       	cpi	r28, 0xC0	; 192
    560c:	29 f4       	brne	.+10     	; 0x5618 <menuCurrMenuToLCD+0x3e>
    560e:	83 e0       	ldi	r24, 0x03	; 3
    5610:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    5614:	c0 e2       	ldi	r28, 0x20	; 32
    5616:	03 c0       	rjmp	.+6      	; 0x561e <menuCurrMenuToLCD+0x44>
    5618:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <softkeyRight>
    561c:	ce e7       	ldi	r28, 0x7E	; 126
    561e:	0e 94 eb 22 	call	0x45d6	; 0x45d6 <softkeyUp>
    5622:	ba df       	rcall	.-140    	; 0x5598 <menuCheckArrowDown>
    5624:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <currentMenu>
    5628:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    562c:	6c 2f       	mov	r22, r28
    562e:	02 96       	adiw	r24, 0x02	; 2
    5630:	f5 dc       	rcall	.-1558   	; 0x501c <menuTextOut>
    5632:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    5636:	86 de       	rcall	.-756    	; 0x5344 <menuCursorSetMenu>
    5638:	cf 91       	pop	r28
    563a:	08 95       	ret

0000563c <menuItemChanged>:
    563c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <currentMenu>
    5640:	90 91 d0 05 	lds	r25, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5644:	fc 01       	movw	r30, r24
    5646:	24 91       	lpm	r18, Z
    5648:	62 2f       	mov	r22, r18
    564a:	6f 73       	andi	r22, 0x3F	; 63
    564c:	62 30       	cpi	r22, 0x02	; 2
    564e:	08 f4       	brcc	.+2      	; 0x5652 <menuItemChanged+0x16>
    5650:	49 c0       	rjmp	.+146    	; 0x56e4 <menuItemChanged+0xa8>
    5652:	9c 01       	movw	r18, r24
    5654:	22 5f       	subi	r18, 0xF2	; 242
    5656:	3f 4f       	sbci	r19, 0xFF	; 255
    5658:	f9 01       	movw	r30, r18
    565a:	45 91       	lpm	r20, Z+
    565c:	55 91       	lpm	r21, Z+
    565e:	41 15       	cp	r20, r1
    5660:	51 05       	cpc	r21, r1
    5662:	09 f4       	brne	.+2      	; 0x5666 <menuItemChanged+0x2a>
    5664:	3f c0       	rjmp	.+126    	; 0x56e4 <menuItemChanged+0xa8>
    5666:	e6 2f       	mov	r30, r22
    5668:	f0 e0       	ldi	r31, 0x00	; 0
    566a:	31 97       	sbiw	r30, 0x01	; 1
    566c:	9f 01       	movw	r18, r30
    566e:	22 0f       	add	r18, r18
    5670:	33 1f       	adc	r19, r19
    5672:	22 0f       	add	r18, r18
    5674:	33 1f       	adc	r19, r19
    5676:	22 0f       	add	r18, r18
    5678:	33 1f       	adc	r19, r19
    567a:	e2 0f       	add	r30, r18
    567c:	f3 1f       	adc	r31, r19
    567e:	e3 5b       	subi	r30, 0xB3	; 179
    5680:	fb 4f       	sbci	r31, 0xFB	; 251
    5682:	f0 93 a0 05 	sts	0x05A0, r31	; 0x8005a0 <pNibbleInfo+0x1>
    5686:	e0 93 9f 05 	sts	0x059F, r30	; 0x80059f <pNibbleInfo>
    568a:	24 91       	lpm	r18, Z
    568c:	20 93 c6 05 	sts	0x05C6, r18	; 0x8005c6 <nibbleCount>
    5690:	fc 01       	movw	r30, r24
    5692:	25 91       	lpm	r18, Z+
    5694:	2f 73       	andi	r18, 0x3F	; 63
    5696:	20 93 9b 05 	sts	0x059B, r18	; 0x80059b <dataType>
    569a:	24 91       	lpm	r18, Z
    569c:	22 23       	and	r18, r18
    569e:	2c f4       	brge	.+10     	; 0x56aa <menuItemChanged+0x6e>
    56a0:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <DataAdressOffset>
    56a4:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <DataAdressOffset+0x1>
    56a8:	02 c0       	rjmp	.+4      	; 0x56ae <menuItemChanged+0x72>
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	30 e0       	ldi	r19, 0x00	; 0
    56ae:	24 0f       	add	r18, r20
    56b0:	35 1f       	adc	r19, r21
    56b2:	fc 01       	movw	r30, r24
    56b4:	84 91       	lpm	r24, Z
    56b6:	8f 73       	andi	r24, 0x3F	; 63
    56b8:	8b 30       	cpi	r24, 0x0B	; 11
    56ba:	71 f4       	brne	.+28     	; 0x56d8 <menuItemChanged+0x9c>
    56bc:	f9 01       	movw	r30, r18
    56be:	80 81       	ld	r24, Z
    56c0:	91 81       	ldd	r25, Z+1	; 0x01
    56c2:	a2 81       	ldd	r26, Z+2	; 0x02
    56c4:	b3 81       	ldd	r27, Z+3	; 0x03
    56c6:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <dataEntry32>
    56ca:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <dataEntry32+0x1>
    56ce:	a0 93 ca 05 	sts	0x05CA, r26	; 0x8005ca <dataEntry32+0x2>
    56d2:	b0 93 cb 05 	sts	0x05CB, r27	; 0x8005cb <dataEntry32+0x3>
    56d6:	04 c0       	rjmp	.+8      	; 0x56e0 <menuItemChanged+0xa4>
    56d8:	f9 01       	movw	r30, r18
    56da:	80 81       	ld	r24, Z
    56dc:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <dataEntry>
    56e0:	d2 dc       	rcall	.-1628   	; 0x5086 <menuDisplayValue>
    56e2:	07 c0       	rjmp	.+14     	; 0x56f2 <menuItemChanged+0xb6>
    56e4:	41 de       	rcall	.-894    	; 0x5368 <menu_ClearDataDisp>
    56e6:	8d e4       	ldi	r24, 0x4D	; 77
    56e8:	94 e0       	ldi	r25, 0x04	; 4
    56ea:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <pNibbleInfo+0x1>
    56ee:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <pNibbleInfo>
    56f2:	52 df       	rcall	.-348    	; 0x5598 <menuCheckArrowDown>
    56f4:	27 ce       	rjmp	.-946    	; 0x5344 <menuCursorSetMenu>
    56f6:	08 95       	ret

000056f8 <menu_InitLCD>:
    56f8:	32 de       	rcall	.-924    	; 0x535e <menuClearExtraDisp>
    56fa:	a0 df       	rcall	.-192    	; 0x563c <menuItemChanged>
    56fc:	aa dc       	rcall	.-1708   	; 0x5052 <menuParentMenuToLCD>
    56fe:	6d df       	rcall	.-294    	; 0x55da <menuCurrMenuToLCD>
    5700:	0c 94 ce 15 	jmp	0x2b9c	; 0x2b9c <lcd_cursosblink>
    5704:	08 95       	ret

00005706 <menu_ProcessMessage>:
    5706:	cf 93       	push	r28
    5708:	c8 2f       	mov	r28, r24
    570a:	0e 94 ce 15 	call	0x2b9c	; 0x2b9c <lcd_cursosblink>
    570e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5712:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5716:	84 91       	lpm	r24, Z
    5718:	8f 73       	andi	r24, 0x3F	; 63
    571a:	81 30       	cpi	r24, 0x01	; 1
    571c:	29 f0       	breq	.+10     	; 0x5728 <menu_ProcessMessage+0x22>
    571e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <nibbleIndex>
    5722:	8f 3f       	cpi	r24, 0xFF	; 255
    5724:	09 f0       	breq	.+2      	; 0x5728 <menu_ProcessMessage+0x22>
    5726:	68 c1       	rjmp	.+720    	; 0x59f8 <menu_ProcessMessage+0x2f2>
    5728:	31 96       	adiw	r30, 0x01	; 1
    572a:	84 91       	lpm	r24, Z
    572c:	86 ff       	sbrs	r24, 6
    572e:	02 c0       	rjmp	.+4      	; 0x5734 <menu_ProcessMessage+0x2e>
    5730:	16 de       	rcall	.-980    	; 0x535e <menuClearExtraDisp>
    5732:	08 de       	rcall	.-1008   	; 0x5344 <menuCursorSetMenu>
    5734:	60 91 cf 05 	lds	r22, 0x05CF	; 0x8005cf <currentMenu>
    5738:	70 91 d0 05 	lds	r23, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    573c:	cb 01       	movw	r24, r22
    573e:	01 96       	adiw	r24, 0x01	; 1
    5740:	fc 01       	movw	r30, r24
    5742:	84 91       	lpm	r24, Z
    5744:	98 2f       	mov	r25, r24
    5746:	90 72       	andi	r25, 0x20	; 32
    5748:	85 ff       	sbrs	r24, 5
    574a:	1f c0       	rjmp	.+62     	; 0x578a <menu_ProcessMessage+0x84>
    574c:	9b 01       	movw	r18, r22
    574e:	20 5f       	subi	r18, 0xF0	; 240
    5750:	3f 4f       	sbci	r19, 0xFF	; 255
    5752:	f9 01       	movw	r30, r18
    5754:	25 91       	lpm	r18, Z+
    5756:	35 91       	lpm	r19, Z+
    5758:	21 15       	cp	r18, r1
    575a:	31 05       	cpc	r19, r1
    575c:	b1 f0       	breq	.+44     	; 0x578a <menu_ProcessMessage+0x84>
    575e:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <nibbleIndex>
    5762:	4f 3f       	cpi	r20, 0xFF	; 255
    5764:	91 f0       	breq	.+36     	; 0x578a <menu_ProcessMessage+0x84>
    5766:	8c 2f       	mov	r24, r28
    5768:	f9 01       	movw	r30, r18
    576a:	19 95       	eicall
    576c:	8f 3f       	cpi	r24, 0xFF	; 255
    576e:	21 f4       	brne	.+8      	; 0x5778 <menu_ProcessMessage+0x72>
    5770:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    5774:	80 e0       	ldi	r24, 0x00	; 0
    5776:	04 c2       	rjmp	.+1032   	; 0x5b80 <menu_ProcessMessage+0x47a>
    5778:	f2 dd       	rcall	.-1052   	; 0x535e <menuClearExtraDisp>
    577a:	f6 dd       	rcall	.-1044   	; 0x5368 <menu_ClearDataDisp>
    577c:	e3 dd       	rcall	.-1082   	; 0x5344 <menuCursorSetMenu>
    577e:	8f ef       	ldi	r24, 0xFF	; 255
    5780:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5784:	2a df       	rcall	.-428    	; 0x55da <menuCurrMenuToLCD>
    5786:	80 e0       	ldi	r24, 0x00	; 0
    5788:	fb c1       	rjmp	.+1014   	; 0x5b80 <menu_ProcessMessage+0x47a>
    578a:	c3 30       	cpi	r28, 0x03	; 3
    578c:	09 f4       	brne	.+2      	; 0x5790 <menu_ProcessMessage+0x8a>
    578e:	64 c0       	rjmp	.+200    	; 0x5858 <menu_ProcessMessage+0x152>
    5790:	28 f4       	brcc	.+10     	; 0x579c <menu_ProcessMessage+0x96>
    5792:	c1 30       	cpi	r28, 0x01	; 1
    5794:	51 f0       	breq	.+20     	; 0x57aa <menu_ProcessMessage+0xa4>
    5796:	c2 30       	cpi	r28, 0x02	; 2
    5798:	31 f1       	breq	.+76     	; 0x57e6 <menu_ProcessMessage+0xe0>
    579a:	db c1       	rjmp	.+950    	; 0x5b52 <menu_ProcessMessage+0x44c>
    579c:	c5 30       	cpi	r28, 0x05	; 5
    579e:	09 f4       	brne	.+2      	; 0x57a2 <menu_ProcessMessage+0x9c>
    57a0:	5b c0       	rjmp	.+182    	; 0x5858 <menu_ProcessMessage+0x152>
    57a2:	90 f0       	brcs	.+36     	; 0x57c8 <menu_ProcessMessage+0xc2>
    57a4:	c6 30       	cpi	r28, 0x06	; 6
    57a6:	f9 f0       	breq	.+62     	; 0x57e6 <menu_ProcessMessage+0xe0>
    57a8:	d4 c1       	rjmp	.+936    	; 0x5b52 <menu_ProcessMessage+0x44c>
    57aa:	fb 01       	movw	r30, r22
    57ac:	84 91       	lpm	r24, Z
    57ae:	80 7c       	andi	r24, 0xC0	; 192
    57b0:	80 3c       	cpi	r24, 0xC0	; 192
    57b2:	09 f4       	brne	.+2      	; 0x57b6 <menu_ProcessMessage+0xb0>
    57b4:	d0 c1       	rjmp	.+928    	; 0x5b56 <menu_ProcessMessage+0x450>
    57b6:	74 96       	adiw	r30, 0x14	; 20
    57b8:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    57bc:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    57c0:	3d df       	rcall	.-390    	; 0x563c <menuItemChanged>
    57c2:	0b df       	rcall	.-490    	; 0x55da <menuCurrMenuToLCD>
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	dc c1       	rjmp	.+952    	; 0x5b80 <menu_ProcessMessage+0x47a>
    57c8:	fb 01       	movw	r30, r22
    57ca:	84 91       	lpm	r24, Z
    57cc:	80 7c       	andi	r24, 0xC0	; 192
    57ce:	80 38       	cpi	r24, 0x80	; 128
    57d0:	09 f4       	brne	.+2      	; 0x57d4 <menu_ProcessMessage+0xce>
    57d2:	c3 c1       	rjmp	.+902    	; 0x5b5a <menu_ProcessMessage+0x454>
    57d4:	74 97       	sbiw	r30, 0x14	; 20
    57d6:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    57da:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    57de:	2e df       	rcall	.-420    	; 0x563c <menuItemChanged>
    57e0:	fc de       	rcall	.-520    	; 0x55da <menuCurrMenuToLCD>
    57e2:	80 e0       	ldi	r24, 0x00	; 0
    57e4:	cd c1       	rjmp	.+922    	; 0x5b80 <menu_ProcessMessage+0x47a>
    57e6:	84 ff       	sbrs	r24, 4
    57e8:	04 c0       	rjmp	.+8      	; 0x57f2 <menu_ProcessMessage+0xec>
    57ea:	10 92 f4 05 	sts	0x05F4, r1	; 0x8005f4 <menuVMenuSoftKey+0x1>
    57ee:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <menuVMenuSoftKey>
    57f2:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    57f6:	ee 23       	and	r30, r30
    57f8:	e9 f0       	breq	.+58     	; 0x5834 <menu_ProcessMessage+0x12e>
    57fa:	e1 50       	subi	r30, 0x01	; 1
    57fc:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <menuStackIndex>
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	ee 0f       	add	r30, r30
    5804:	ff 1f       	adc	r31, r31
    5806:	ef 55       	subi	r30, 0x5F	; 95
    5808:	fa 4f       	sbci	r31, 0xFA	; 250
    580a:	01 90       	ld	r0, Z+
    580c:	f0 81       	ld	r31, Z
    580e:	e0 2d       	mov	r30, r0
    5810:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    5814:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    5818:	72 96       	adiw	r30, 0x12	; 18
    581a:	05 90       	lpm	r0, Z+
    581c:	f4 91       	lpm	r31, Z
    581e:	e0 2d       	mov	r30, r0
    5820:	30 97       	sbiw	r30, 0x00	; 0
    5822:	11 f0       	breq	.+4      	; 0x5828 <menu_ProcessMessage+0x122>
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	19 95       	eicall
    5828:	9a dd       	rcall	.-1228   	; 0x535e <menuClearExtraDisp>
    582a:	13 dc       	rcall	.-2010   	; 0x5052 <menuParentMenuToLCD>
    582c:	d6 de       	rcall	.-596    	; 0x55da <menuCurrMenuToLCD>
    582e:	06 df       	rcall	.-500    	; 0x563c <menuItemChanged>
    5830:	80 e0       	ldi	r24, 0x00	; 0
    5832:	a6 c1       	rjmp	.+844    	; 0x5b80 <menu_ProcessMessage+0x47a>
    5834:	80 e0       	ldi	r24, 0x00	; 0
    5836:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    583a:	81 e0       	ldi	r24, 0x01	; 1
    583c:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    5840:	82 e0       	ldi	r24, 0x02	; 2
    5842:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    5846:	83 e0       	ldi	r24, 0x03	; 3
    5848:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    584c:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    5850:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <lcd_cursoroff>
    5854:	8f ef       	ldi	r24, 0xFF	; 255
    5856:	94 c1       	rjmp	.+808    	; 0x5b80 <menu_ProcessMessage+0x47a>
    5858:	fb 01       	movw	r30, r22
    585a:	24 91       	lpm	r18, Z
    585c:	2f 73       	andi	r18, 0x3F	; 63
    585e:	30 e0       	ldi	r19, 0x00	; 0
    5860:	22 30       	cpi	r18, 0x02	; 2
    5862:	31 05       	cpc	r19, r1
    5864:	0c f4       	brge	.+2      	; 0x5868 <menu_ProcessMessage+0x162>
    5866:	48 c0       	rjmp	.+144    	; 0x58f8 <menu_ProcessMessage+0x1f2>
    5868:	70 96       	adiw	r30, 0x10	; 16
    586a:	05 90       	lpm	r0, Z+
    586c:	f4 91       	lpm	r31, Z
    586e:	e0 2d       	mov	r30, r0
    5870:	30 97       	sbiw	r30, 0x00	; 0
    5872:	19 f0       	breq	.+6      	; 0x587a <menu_ProcessMessage+0x174>
    5874:	8c 2f       	mov	r24, r28
    5876:	19 95       	eicall
    5878:	e1 de       	rcall	.-574    	; 0x563c <menuItemChanged>
    587a:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    587e:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5882:	c9 01       	movw	r24, r18
    5884:	01 96       	adiw	r24, 0x01	; 1
    5886:	fc 01       	movw	r30, r24
    5888:	84 91       	lpm	r24, Z
    588a:	83 fd       	sbrc	r24, 3
    588c:	68 c1       	rjmp	.+720    	; 0x5b5e <menu_ProcessMessage+0x458>
    588e:	c9 01       	movw	r24, r18
    5890:	0e 96       	adiw	r24, 0x0e	; 14
    5892:	fc 01       	movw	r30, r24
    5894:	85 91       	lpm	r24, Z+
    5896:	95 91       	lpm	r25, Z+
    5898:	89 2b       	or	r24, r25
    589a:	09 f4       	brne	.+2      	; 0x589e <menu_ProcessMessage+0x198>
    589c:	62 c1       	rjmp	.+708    	; 0x5b62 <menu_ProcessMessage+0x45c>
    589e:	f9 01       	movw	r30, r18
    58a0:	84 91       	lpm	r24, Z
    58a2:	8f 73       	andi	r24, 0x3F	; 63
    58a4:	89 30       	cpi	r24, 0x09	; 9
    58a6:	19 f5       	brne	.+70     	; 0x58ee <menu_ProcessMessage+0x1e8>
    58a8:	61 e0       	ldi	r22, 0x01	; 1
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	23 d9       	rcall	.-3514   	; 0x4af4 <nibbleChange>
    58ae:	d1 da       	rcall	.-2654   	; 0x4e52 <nibbleToData>
    58b0:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    58b4:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    58b8:	3e 96       	adiw	r30, 0x0e	; 14
    58ba:	05 90       	lpm	r0, Z+
    58bc:	f4 91       	lpm	r31, Z
    58be:	e0 2d       	mov	r30, r0
    58c0:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    58c4:	80 83       	st	Z, r24
    58c6:	df db       	rcall	.-2114   	; 0x5086 <menuDisplayValue>
    58c8:	67 de       	rcall	.-818    	; 0x5598 <menuCheckArrowDown>
    58ca:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
    58ce:	3a dd       	rcall	.-1420   	; 0x5344 <menuCursorSetMenu>
    58d0:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    58d4:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    58d8:	72 96       	adiw	r30, 0x12	; 18
    58da:	05 90       	lpm	r0, Z+
    58dc:	f4 91       	lpm	r31, Z
    58de:	e0 2d       	mov	r30, r0
    58e0:	30 97       	sbiw	r30, 0x00	; 0
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <menu_ProcessMessage+0x1e0>
    58e4:	40 c1       	rjmp	.+640    	; 0x5b66 <menu_ProcessMessage+0x460>
    58e6:	80 e0       	ldi	r24, 0x00	; 0
    58e8:	19 95       	eicall
    58ea:	80 e0       	ldi	r24, 0x00	; 0
    58ec:	49 c1       	rjmp	.+658    	; 0x5b80 <menu_ProcessMessage+0x47a>
    58ee:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    58f2:	d6 db       	rcall	.-2132   	; 0x50a0 <menuCursorSetDataNibble>
    58f4:	80 e0       	ldi	r24, 0x00	; 0
    58f6:	44 c1       	rjmp	.+648    	; 0x5b80 <menu_ProcessMessage+0x47a>
    58f8:	2f ef       	ldi	r18, 0xFF	; 255
    58fa:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    58fe:	84 ff       	sbrs	r24, 4
    5900:	26 c0       	rjmp	.+76     	; 0x594e <menu_ProcessMessage+0x248>
    5902:	70 93 f4 05 	sts	0x05F4, r23	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5906:	60 93 f3 05 	sts	0x05F3, r22	; 0x8005f3 <menuVMenuSoftKey>
    590a:	e0 91 8e 05 	lds	r30, 0x058E	; 0x80058e <menuStackIndex>
    590e:	ee 23       	and	r30, r30
    5910:	09 f4       	brne	.+2      	; 0x5914 <menu_ProcessMessage+0x20e>
    5912:	2b c1       	rjmp	.+598    	; 0x5b6a <menu_ProcessMessage+0x464>
    5914:	e1 50       	subi	r30, 0x01	; 1
    5916:	e0 93 8e 05 	sts	0x058E, r30	; 0x80058e <menuStackIndex>
    591a:	f0 e0       	ldi	r31, 0x00	; 0
    591c:	ee 0f       	add	r30, r30
    591e:	ff 1f       	adc	r31, r31
    5920:	ef 55       	subi	r30, 0x5F	; 95
    5922:	fa 4f       	sbci	r31, 0xFA	; 250
    5924:	01 90       	ld	r0, Z+
    5926:	f0 81       	ld	r31, Z
    5928:	e0 2d       	mov	r30, r0
    592a:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <currentMenu+0x1>
    592e:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <currentMenu>
    5932:	72 96       	adiw	r30, 0x12	; 18
    5934:	05 90       	lpm	r0, Z+
    5936:	f4 91       	lpm	r31, Z
    5938:	e0 2d       	mov	r30, r0
    593a:	30 97       	sbiw	r30, 0x00	; 0
    593c:	11 f0       	breq	.+4      	; 0x5942 <menu_ProcessMessage+0x23c>
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	19 95       	eicall
    5942:	0d dd       	rcall	.-1510   	; 0x535e <menuClearExtraDisp>
    5944:	86 db       	rcall	.-2292   	; 0x5052 <menuParentMenuToLCD>
    5946:	49 de       	rcall	.-878    	; 0x55da <menuCurrMenuToLCD>
    5948:	79 de       	rcall	.-782    	; 0x563c <menuItemChanged>
    594a:	80 e0       	ldi	r24, 0x00	; 0
    594c:	19 c1       	rjmp	.+562    	; 0x5b80 <menu_ProcessMessage+0x47a>
    594e:	fb 01       	movw	r30, r22
    5950:	70 96       	adiw	r30, 0x10	; 16
    5952:	05 90       	lpm	r0, Z+
    5954:	f4 91       	lpm	r31, Z
    5956:	e0 2d       	mov	r30, r0
    5958:	30 97       	sbiw	r30, 0x00	; 0
    595a:	99 f0       	breq	.+38     	; 0x5982 <menu_ProcessMessage+0x27c>
    595c:	99 23       	and	r25, r25
    595e:	71 f0       	breq	.+28     	; 0x597c <menu_ProcessMessage+0x276>
    5960:	8f ef       	ldi	r24, 0xFF	; 255
    5962:	19 95       	eicall
    5964:	8f 3f       	cpi	r24, 0xFF	; 255
    5966:	19 f4       	brne	.+6      	; 0x596e <menu_ProcessMessage+0x268>
    5968:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <nibbleIndex>
    596c:	0a c0       	rjmp	.+20     	; 0x5982 <menu_ProcessMessage+0x27c>
    596e:	f7 dc       	rcall	.-1554   	; 0x535e <menuClearExtraDisp>
    5970:	fb dc       	rcall	.-1546   	; 0x5368 <menu_ClearDataDisp>
    5972:	e8 dc       	rcall	.-1584   	; 0x5344 <menuCursorSetMenu>
    5974:	8f ef       	ldi	r24, 0xFF	; 255
    5976:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    597a:	03 c0       	rjmp	.+6      	; 0x5982 <menu_ProcessMessage+0x27c>
    597c:	85 e0       	ldi	r24, 0x05	; 5
    597e:	19 95       	eicall
    5980:	e1 dc       	rcall	.-1598   	; 0x5344 <menuCursorSetMenu>
    5982:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    5986:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    598a:	c9 01       	movw	r24, r18
    598c:	0c 96       	adiw	r24, 0x0c	; 12
    598e:	fc 01       	movw	r30, r24
    5990:	85 91       	lpm	r24, Z+
    5992:	95 91       	lpm	r25, Z+
    5994:	89 2b       	or	r24, r25
    5996:	09 f4       	brne	.+2      	; 0x599a <menu_ProcessMessage+0x294>
    5998:	ea c0       	rjmp	.+468    	; 0x5b6e <menu_ProcessMessage+0x468>
    599a:	a0 91 8e 05 	lds	r26, 0x058E	; 0x80058e <menuStackIndex>
    599e:	a0 31       	cpi	r26, 0x10	; 16
    59a0:	08 f0       	brcs	.+2      	; 0x59a4 <menu_ProcessMessage+0x29e>
    59a2:	e7 c0       	rjmp	.+462    	; 0x5b72 <menu_ProcessMessage+0x46c>
    59a4:	81 e0       	ldi	r24, 0x01	; 1
    59a6:	8a 0f       	add	r24, r26
    59a8:	80 93 8e 05 	sts	0x058E, r24	; 0x80058e <menuStackIndex>
    59ac:	b0 e0       	ldi	r27, 0x00	; 0
    59ae:	aa 0f       	add	r26, r26
    59b0:	bb 1f       	adc	r27, r27
    59b2:	af 55       	subi	r26, 0x5F	; 95
    59b4:	ba 4f       	sbci	r27, 0xFA	; 250
    59b6:	2d 93       	st	X+, r18
    59b8:	3c 93       	st	X, r19
    59ba:	c9 01       	movw	r24, r18
    59bc:	01 96       	adiw	r24, 0x01	; 1
    59be:	fc 01       	movw	r30, r24
    59c0:	84 91       	lpm	r24, Z
    59c2:	83 ff       	sbrs	r24, 3
    59c4:	0b c0       	rjmp	.+22     	; 0x59dc <menu_ProcessMessage+0x2d6>
    59c6:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <menuVMenuSoftKey>
    59ca:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <menuVMenuSoftKey+0x1>
    59ce:	00 97       	sbiw	r24, 0x00	; 0
    59d0:	29 f0       	breq	.+10     	; 0x59dc <menu_ProcessMessage+0x2d6>
    59d2:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    59d6:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    59da:	08 c0       	rjmp	.+16     	; 0x59ec <menu_ProcessMessage+0x2e6>
    59dc:	f9 01       	movw	r30, r18
    59de:	3c 96       	adiw	r30, 0x0c	; 12
    59e0:	85 91       	lpm	r24, Z+
    59e2:	95 91       	lpm	r25, Z+
    59e4:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <currentMenu+0x1>
    59e8:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <currentMenu>
    59ec:	b8 dc       	rcall	.-1680   	; 0x535e <menuClearExtraDisp>
    59ee:	31 db       	rcall	.-2462   	; 0x5052 <menuParentMenuToLCD>
    59f0:	f4 dd       	rcall	.-1048   	; 0x55da <menuCurrMenuToLCD>
    59f2:	24 de       	rcall	.-952    	; 0x563c <menuItemChanged>
    59f4:	80 e0       	ldi	r24, 0x00	; 0
    59f6:	c4 c0       	rjmp	.+392    	; 0x5b80 <menu_ProcessMessage+0x47a>
    59f8:	c3 30       	cpi	r28, 0x03	; 3
    59fa:	09 f4       	brne	.+2      	; 0x59fe <menu_ProcessMessage+0x2f8>
    59fc:	49 c0       	rjmp	.+146    	; 0x5a90 <menu_ProcessMessage+0x38a>
    59fe:	28 f4       	brcc	.+10     	; 0x5a0a <menu_ProcessMessage+0x304>
    5a00:	c1 30       	cpi	r28, 0x01	; 1
    5a02:	59 f0       	breq	.+22     	; 0x5a1a <menu_ProcessMessage+0x314>
    5a04:	c2 30       	cpi	r28, 0x02	; 2
    5a06:	31 f1       	breq	.+76     	; 0x5a54 <menu_ProcessMessage+0x34e>
    5a08:	b6 c0       	rjmp	.+364    	; 0x5b76 <menu_ProcessMessage+0x470>
    5a0a:	c5 30       	cpi	r28, 0x05	; 5
    5a0c:	09 f4       	brne	.+2      	; 0x5a10 <menu_ProcessMessage+0x30a>
    5a0e:	5e c0       	rjmp	.+188    	; 0x5acc <menu_ProcessMessage+0x3c6>
    5a10:	c0 f0       	brcs	.+48     	; 0x5a42 <menu_ProcessMessage+0x33c>
    5a12:	c6 30       	cpi	r28, 0x06	; 6
    5a14:	09 f4       	brne	.+2      	; 0x5a18 <menu_ProcessMessage+0x312>
    5a16:	8a c0       	rjmp	.+276    	; 0x5b2c <menu_ProcessMessage+0x426>
    5a18:	ae c0       	rjmp	.+348    	; 0x5b76 <menu_ProcessMessage+0x470>
    5a1a:	48 2f       	mov	r20, r24
    5a1c:	50 e0       	ldi	r21, 0x00	; 0
    5a1e:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    5a22:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5a26:	24 91       	lpm	r18, Z
    5a28:	30 e0       	ldi	r19, 0x00	; 0
    5a2a:	21 50       	subi	r18, 0x01	; 1
    5a2c:	31 09       	sbc	r19, r1
    5a2e:	42 17       	cp	r20, r18
    5a30:	53 07       	cpc	r21, r19
    5a32:	0c f0       	brlt	.+2      	; 0x5a36 <menu_ProcessMessage+0x330>
    5a34:	a2 c0       	rjmp	.+324    	; 0x5b7a <menu_ProcessMessage+0x474>
    5a36:	8f 5f       	subi	r24, 0xFF	; 255
    5a38:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5a3c:	31 db       	rcall	.-2462   	; 0x50a0 <menuCursorSetDataNibble>
    5a3e:	80 e0       	ldi	r24, 0x00	; 0
    5a40:	9f c0       	rjmp	.+318    	; 0x5b80 <menu_ProcessMessage+0x47a>
    5a42:	88 23       	and	r24, r24
    5a44:	09 f4       	brne	.+2      	; 0x5a48 <menu_ProcessMessage+0x342>
    5a46:	9b c0       	rjmp	.+310    	; 0x5b7e <menu_ProcessMessage+0x478>
    5a48:	81 50       	subi	r24, 0x01	; 1
    5a4a:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5a4e:	28 db       	rcall	.-2480   	; 0x50a0 <menuCursorSetDataNibble>
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	96 c0       	rjmp	.+300    	; 0x5b80 <menu_ProcessMessage+0x47a>
    5a54:	61 e0       	ldi	r22, 0x01	; 1
    5a56:	4e d8       	rcall	.-3940   	; 0x4af4 <nibbleChange>
    5a58:	fc d9       	rcall	.-3080   	; 0x4e52 <nibbleToData>
    5a5a:	15 db       	rcall	.-2518   	; 0x5086 <menuDisplayValue>
    5a5c:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    5a60:	8a 30       	cpi	r24, 0x0A	; 10
    5a62:	11 f0       	breq	.+4      	; 0x5a68 <menu_ProcessMessage+0x362>
    5a64:	8e 30       	cpi	r24, 0x0E	; 14
    5a66:	89 f4       	brne	.+34     	; 0x5a8a <menu_ProcessMessage+0x384>
    5a68:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    5a6c:	42 2f       	mov	r20, r18
    5a6e:	50 e0       	ldi	r21, 0x00	; 0
    5a70:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    5a74:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5a78:	84 91       	lpm	r24, Z
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	01 97       	sbiw	r24, 0x01	; 1
    5a7e:	48 17       	cp	r20, r24
    5a80:	59 07       	cpc	r21, r25
    5a82:	1c f4       	brge	.+6      	; 0x5a8a <menu_ProcessMessage+0x384>
    5a84:	2f 5f       	subi	r18, 0xFF	; 255
    5a86:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    5a8a:	0a db       	rcall	.-2540   	; 0x50a0 <menuCursorSetDataNibble>
    5a8c:	80 e0       	ldi	r24, 0x00	; 0
    5a8e:	78 c0       	rjmp	.+240    	; 0x5b80 <menu_ProcessMessage+0x47a>
    5a90:	6f ef       	ldi	r22, 0xFF	; 255
    5a92:	30 d8       	rcall	.-4000   	; 0x4af4 <nibbleChange>
    5a94:	de d9       	rcall	.-3140   	; 0x4e52 <nibbleToData>
    5a96:	f7 da       	rcall	.-2578   	; 0x5086 <menuDisplayValue>
    5a98:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <dataType>
    5a9c:	8a 30       	cpi	r24, 0x0A	; 10
    5a9e:	11 f0       	breq	.+4      	; 0x5aa4 <menu_ProcessMessage+0x39e>
    5aa0:	8e 30       	cpi	r24, 0x0E	; 14
    5aa2:	89 f4       	brne	.+34     	; 0x5ac6 <menu_ProcessMessage+0x3c0>
    5aa4:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <nibbleIndex>
    5aa8:	42 2f       	mov	r20, r18
    5aaa:	50 e0       	ldi	r21, 0x00	; 0
    5aac:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <pNibbleInfo>
    5ab0:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <pNibbleInfo+0x1>
    5ab4:	84 91       	lpm	r24, Z
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	01 97       	sbiw	r24, 0x01	; 1
    5aba:	48 17       	cp	r20, r24
    5abc:	59 07       	cpc	r21, r25
    5abe:	1c f4       	brge	.+6      	; 0x5ac6 <menu_ProcessMessage+0x3c0>
    5ac0:	2f 5f       	subi	r18, 0xFF	; 255
    5ac2:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <nibbleIndex>
    5ac6:	ec da       	rcall	.-2600   	; 0x50a0 <menuCursorSetDataNibble>
    5ac8:	80 e0       	ldi	r24, 0x00	; 0
    5aca:	5a c0       	rjmp	.+180    	; 0x5b80 <menu_ProcessMessage+0x47a>
    5acc:	c2 d9       	rcall	.-3196   	; 0x4e52 <nibbleToData>
    5ace:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <currentMenu>
    5ad2:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5ad6:	c9 01       	movw	r24, r18
    5ad8:	0e 96       	adiw	r24, 0x0e	; 14
    5ada:	fc 01       	movw	r30, r24
    5adc:	a5 91       	lpm	r26, Z+
    5ade:	b5 91       	lpm	r27, Z+
    5ae0:	10 97       	sbiw	r26, 0x00	; 0
    5ae2:	21 f1       	breq	.+72     	; 0x5b2c <menu_ProcessMessage+0x426>
    5ae4:	0d 97       	sbiw	r24, 0x0d	; 13
    5ae6:	fc 01       	movw	r30, r24
    5ae8:	84 91       	lpm	r24, Z
    5aea:	88 23       	and	r24, r24
    5aec:	2c f4       	brge	.+10     	; 0x5af8 <menu_ProcessMessage+0x3f2>
    5aee:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <DataAdressOffset>
    5af2:	90 91 d8 05 	lds	r25, 0x05D8	; 0x8005d8 <DataAdressOffset+0x1>
    5af6:	02 c0       	rjmp	.+4      	; 0x5afc <menu_ProcessMessage+0x3f6>
    5af8:	80 e0       	ldi	r24, 0x00	; 0
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	a8 0f       	add	r26, r24
    5afe:	b9 1f       	adc	r27, r25
    5b00:	f9 01       	movw	r30, r18
    5b02:	84 91       	lpm	r24, Z
    5b04:	8f 73       	andi	r24, 0x3F	; 63
    5b06:	8b 30       	cpi	r24, 0x0B	; 11
    5b08:	71 f4       	brne	.+28     	; 0x5b26 <menu_ProcessMessage+0x420>
    5b0a:	40 91 c8 05 	lds	r20, 0x05C8	; 0x8005c8 <dataEntry32>
    5b0e:	50 91 c9 05 	lds	r21, 0x05C9	; 0x8005c9 <dataEntry32+0x1>
    5b12:	60 91 ca 05 	lds	r22, 0x05CA	; 0x8005ca <dataEntry32+0x2>
    5b16:	70 91 cb 05 	lds	r23, 0x05CB	; 0x8005cb <dataEntry32+0x3>
    5b1a:	4d 93       	st	X+, r20
    5b1c:	5d 93       	st	X+, r21
    5b1e:	6d 93       	st	X+, r22
    5b20:	7c 93       	st	X, r23
    5b22:	13 97       	sbiw	r26, 0x03	; 3
    5b24:	03 c0       	rjmp	.+6      	; 0x5b2c <menu_ProcessMessage+0x426>
    5b26:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <dataEntry>
    5b2a:	8c 93       	st	X, r24
    5b2c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5b30:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5b34:	72 96       	adiw	r30, 0x12	; 18
    5b36:	05 90       	lpm	r0, Z+
    5b38:	f4 91       	lpm	r31, Z
    5b3a:	e0 2d       	mov	r30, r0
    5b3c:	30 97       	sbiw	r30, 0x00	; 0
    5b3e:	11 f0       	breq	.+4      	; 0x5b44 <menu_ProcessMessage+0x43e>
    5b40:	8c 2f       	mov	r24, r28
    5b42:	19 95       	eicall
    5b44:	8f ef       	ldi	r24, 0xFF	; 255
    5b46:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <nibbleIndex>
    5b4a:	47 dd       	rcall	.-1394   	; 0x55da <menuCurrMenuToLCD>
    5b4c:	77 dd       	rcall	.-1298   	; 0x563c <menuItemChanged>
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
    5b50:	17 c0       	rjmp	.+46     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b52:	80 e0       	ldi	r24, 0x00	; 0
    5b54:	15 c0       	rjmp	.+42     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b56:	80 e0       	ldi	r24, 0x00	; 0
    5b58:	13 c0       	rjmp	.+38     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b5a:	80 e0       	ldi	r24, 0x00	; 0
    5b5c:	11 c0       	rjmp	.+34     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b5e:	80 e0       	ldi	r24, 0x00	; 0
    5b60:	0f c0       	rjmp	.+30     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b62:	80 e0       	ldi	r24, 0x00	; 0
    5b64:	0d c0       	rjmp	.+26     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	0b c0       	rjmp	.+22     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b6a:	80 e0       	ldi	r24, 0x00	; 0
    5b6c:	09 c0       	rjmp	.+18     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b6e:	80 e0       	ldi	r24, 0x00	; 0
    5b70:	07 c0       	rjmp	.+14     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b72:	80 e0       	ldi	r24, 0x00	; 0
    5b74:	05 c0       	rjmp	.+10     	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b76:	80 e0       	ldi	r24, 0x00	; 0
    5b78:	03 c0       	rjmp	.+6      	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b7a:	80 e0       	ldi	r24, 0x00	; 0
    5b7c:	01 c0       	rjmp	.+2      	; 0x5b80 <menu_ProcessMessage+0x47a>
    5b7e:	80 e0       	ldi	r24, 0x00	; 0
    5b80:	cf 91       	pop	r28
    5b82:	08 95       	ret

00005b84 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5b84:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5b86:	34 e0       	ldi	r19, 0x04	; 4
    5b88:	84 3d       	cpi	r24, 0xD4	; 212
    5b8a:	93 07       	cpc	r25, r19
    5b8c:	49 f0       	breq	.+18     	; 0x5ba0 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5b8e:	34 e0       	ldi	r19, 0x04	; 4
    5b90:	84 3d       	cpi	r24, 0xD4	; 212
    5b92:	93 07       	cpc	r25, r19
    5b94:	38 f0       	brcs	.+14     	; 0x5ba4 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5b96:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5b98:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5b9a:	a9 f7       	brne	.-22     	; 0x5b86 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5b9c:	80 e0       	ldi	r24, 0x00	; 0
    5b9e:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5ba0:	82 2f       	mov	r24, r18
    5ba2:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5ba6:	08 95       	ret

00005ba8 <init_SoftKeys>:

void init_SoftKeys(){
    5ba8:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5baa:	0e 94 8c 0c 	call	0x1918	; 0x1918 <eeprom_ReadSoftkeys>
    5bae:	8f 3f       	cpi	r24, 0xFF	; 255
    5bb0:	c9 f4       	brne	.+50     	; 0x5be4 <init_SoftKeys+0x3c>
    5bb2:	0f c0       	rjmp	.+30     	; 0x5bd2 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5bb4:	82 2f       	mov	r24, r18
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	fc 01       	movw	r30, r24
    5bba:	e7 52       	subi	r30, 0x27	; 39
    5bbc:	fa 4f       	sbci	r31, 0xFA	; 250
    5bbe:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5bc0:	88 0f       	add	r24, r24
    5bc2:	99 1f       	adc	r25, r25
    5bc4:	fc 01       	movw	r30, r24
    5bc6:	e0 52       	subi	r30, 0x20	; 32
    5bc8:	fa 4f       	sbci	r31, 0xFA	; 250
    5bca:	11 82       	std	Z+1, r1	; 0x01
    5bcc:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5bce:	2f 5f       	subi	r18, 0xFF	; 255
    5bd0:	01 c0       	rjmp	.+2      	; 0x5bd4 <init_SoftKeys+0x2c>
    5bd2:	20 e0       	ldi	r18, 0x00	; 0
    5bd4:	24 30       	cpi	r18, 0x04	; 4
    5bd6:	70 f3       	brcs	.-36     	; 0x5bb4 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    5bd8:	40 e0       	ldi	r20, 0x00	; 0
    5bda:	50 e0       	ldi	r21, 0x00	; 0
    5bdc:	67 e0       	ldi	r22, 0x07	; 7
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
    5be4:	c0 e0       	ldi	r28, 0x00	; 0
    5be6:	25 c0       	rjmp	.+74     	; 0x5c32 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    5be8:	4c 2f       	mov	r20, r28
    5bea:	50 e0       	ldi	r21, 0x00	; 0
    5bec:	fa 01       	movw	r30, r20
    5bee:	e7 52       	subi	r30, 0x27	; 39
    5bf0:	fa 4f       	sbci	r31, 0xFA	; 250
    5bf2:	80 81       	ld	r24, Z
    5bf4:	8d 31       	cpi	r24, 0x1D	; 29
    5bf6:	70 f4       	brcc	.+28     	; 0x5c14 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    5bf8:	24 e1       	ldi	r18, 0x14	; 20
    5bfa:	82 9f       	mul	r24, r18
    5bfc:	c0 01       	movw	r24, r0
    5bfe:	11 24       	eor	r1, r1
    5c00:	8c 52       	subi	r24, 0x2C	; 44
    5c02:	9b 4f       	sbci	r25, 0xFB	; 251
    5c04:	44 0f       	add	r20, r20
    5c06:	55 1f       	adc	r21, r21
    5c08:	fa 01       	movw	r30, r20
    5c0a:	e0 52       	subi	r30, 0x20	; 32
    5c0c:	fa 4f       	sbci	r31, 0xFA	; 250
    5c0e:	91 83       	std	Z+1, r25	; 0x01
    5c10:	80 83       	st	Z, r24
    5c12:	0e c0       	rjmp	.+28     	; 0x5c30 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    5c14:	fa 01       	movw	r30, r20
    5c16:	ee 0f       	add	r30, r30
    5c18:	ff 1f       	adc	r31, r31
    5c1a:	e0 52       	subi	r30, 0x20	; 32
    5c1c:	fa 4f       	sbci	r31, 0xFA	; 250
    5c1e:	11 82       	std	Z+1, r1	; 0x01
    5c20:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5c22:	4f 5f       	subi	r20, 0xFF	; 255
    5c24:	5f 4f       	sbci	r21, 0xFF	; 255
    5c26:	40 61       	ori	r20, 0x10	; 16
    5c28:	67 e0       	ldi	r22, 0x07	; 7
    5c2a:	81 e0       	ldi	r24, 0x01	; 1
    5c2c:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5c30:	cf 5f       	subi	r28, 0xFF	; 255
    5c32:	c4 30       	cpi	r28, 0x04	; 4
    5c34:	c8 f2       	brcs	.-78     	; 0x5be8 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5c36:	cf 91       	pop	r28
    5c38:	08 95       	ret

00005c3a <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5c3a:	cf 93       	push	r28
    5c3c:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5c3e:	64 30       	cpi	r22, 0x04	; 4
    5c40:	28 f5       	brcc	.+74     	; 0x5c8c <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5c42:	00 97       	sbiw	r24, 0x00	; 0
    5c44:	b9 f0       	breq	.+46     	; 0x5c74 <softKey_Set+0x3a>
    5c46:	fc 01       	movw	r30, r24
    5c48:	24 91       	lpm	r18, Z
    5c4a:	2f 73       	andi	r18, 0x3F	; 63
    5c4c:	21 30       	cpi	r18, 0x01	; 1
    5c4e:	91 f4       	brne	.+36     	; 0x5c74 <softKey_Set+0x3a>
    5c50:	31 96       	adiw	r30, 0x01	; 1
    5c52:	24 91       	lpm	r18, Z
    5c54:	24 ff       	sbrs	r18, 4
    5c56:	0e c0       	rjmp	.+28     	; 0x5c74 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5c58:	c6 2f       	mov	r28, r22
    5c5a:	d0 e0       	ldi	r29, 0x00	; 0
    5c5c:	fe 01       	movw	r30, r28
    5c5e:	ee 0f       	add	r30, r30
    5c60:	ff 1f       	adc	r31, r31
    5c62:	e0 52       	subi	r30, 0x20	; 32
    5c64:	fa 4f       	sbci	r31, 0xFA	; 250
    5c66:	91 83       	std	Z+1, r25	; 0x01
    5c68:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5c6a:	8c df       	rcall	.-232    	; 0x5b84 <getSoftKeyIndex>
    5c6c:	c7 52       	subi	r28, 0x27	; 39
    5c6e:	da 4f       	sbci	r29, 0xFA	; 250
    5c70:	88 83       	st	Y, r24
    5c72:	0c c0       	rjmp	.+24     	; 0x5c8c <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5c74:	70 e0       	ldi	r23, 0x00	; 0
    5c76:	fb 01       	movw	r30, r22
    5c78:	ee 0f       	add	r30, r30
    5c7a:	ff 1f       	adc	r31, r31
    5c7c:	e0 52       	subi	r30, 0x20	; 32
    5c7e:	fa 4f       	sbci	r31, 0xFA	; 250
    5c80:	11 82       	std	Z+1, r1	; 0x01
    5c82:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5c84:	fb 01       	movw	r30, r22
    5c86:	e7 52       	subi	r30, 0x27	; 39
    5c88:	fa 4f       	sbci	r31, 0xFA	; 250
    5c8a:	10 82       	st	Z, r1
		}
	}
}
    5c8c:	df 91       	pop	r29
    5c8e:	cf 91       	pop	r28
    5c90:	08 95       	ret

00005c92 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5c92:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <currentMenu>
    5c96:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <currentMenu+0x1>
    5c9a:	3e 96       	adiw	r30, 0x0e	; 14
    5c9c:	65 91       	lpm	r22, Z+
    5c9e:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5ca0:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <menuVMenuSoftKey>
    5ca4:	90 91 f4 05 	lds	r25, 0x05F4	; 0x8005f4 <menuVMenuSoftKey+0x1>
    5ca8:	c8 df       	rcall	.-112    	; 0x5c3a <softKey_Set>
	eeprom_UpdateSoftkeys();
    5caa:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <eeprom_UpdateSoftkeys>
	return 0;
}
    5cae:	80 e0       	ldi	r24, 0x00	; 0
    5cb0:	08 95       	ret

00005cb2 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5cb2:	0f 93       	push	r16
    5cb4:	1f 93       	push	r17
    5cb6:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5cb8:	c0 e0       	ldi	r28, 0x00	; 0
    5cba:	32 c0       	rjmp	.+100    	; 0x5d20 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5cbc:	0c 2f       	mov	r16, r28
    5cbe:	10 e0       	ldi	r17, 0x00	; 0
    5cc0:	f8 01       	movw	r30, r16
    5cc2:	ee 0f       	add	r30, r30
    5cc4:	ff 1f       	adc	r31, r31
    5cc6:	e0 52       	subi	r30, 0x20	; 32
    5cc8:	fa 4f       	sbci	r31, 0xFA	; 250
    5cca:	01 90       	ld	r0, Z+
    5ccc:	f0 81       	ld	r31, Z
    5cce:	e0 2d       	mov	r30, r0
    5cd0:	30 97       	sbiw	r30, 0x00	; 0
    5cd2:	31 f0       	breq	.+12     	; 0x5ce0 <softKeys_toLCD+0x2e>
    5cd4:	3e 96       	adiw	r30, 0x0e	; 14
    5cd6:	65 91       	lpm	r22, Z+
    5cd8:	75 91       	lpm	r23, Z+
    5cda:	61 15       	cp	r22, r1
    5cdc:	71 05       	cpc	r23, r1
    5cde:	21 f4       	brne	.+8      	; 0x5ce8 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5ce0:	8c 2f       	mov	r24, r28
    5ce2:	0e 94 47 3f 	call	0x7e8e	; 0x7e8e <keylabel_clr>
    5ce6:	1b c0       	rjmp	.+54     	; 0x5d1e <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    5ce8:	8c 2f       	mov	r24, r28
    5cea:	0e 94 0c 3f 	call	0x7e18	; 0x7e18 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    5cee:	00 0f       	add	r16, r16
    5cf0:	11 1f       	adc	r17, r17
    5cf2:	f8 01       	movw	r30, r16
    5cf4:	e0 52       	subi	r30, 0x20	; 32
    5cf6:	fa 4f       	sbci	r31, 0xFA	; 250
    5cf8:	01 90       	ld	r0, Z+
    5cfa:	f0 81       	ld	r31, Z
    5cfc:	e0 2d       	mov	r30, r0
    5cfe:	70 96       	adiw	r30, 0x10	; 16
    5d00:	05 90       	lpm	r0, Z+
    5d02:	f4 91       	lpm	r31, Z
    5d04:	e0 2d       	mov	r30, r0
    5d06:	30 97       	sbiw	r30, 0x00	; 0
    5d08:	51 f0       	breq	.+20     	; 0x5d1e <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    5d0a:	80 e0       	ldi	r24, 0x00	; 0
    5d0c:	19 95       	eicall
    5d0e:	81 38       	cpi	r24, 0x81	; 129
    5d10:	11 f4       	brne	.+4      	; 0x5d16 <softKeys_toLCD+0x64>
    5d12:	6f ef       	ldi	r22, 0xFF	; 255
    5d14:	01 c0       	rjmp	.+2      	; 0x5d18 <softKeys_toLCD+0x66>
    5d16:	60 e0       	ldi	r22, 0x00	; 0
    5d18:	8c 2f       	mov	r24, r28
    5d1a:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5d1e:	cf 5f       	subi	r28, 0xFF	; 255
    5d20:	c4 30       	cpi	r28, 0x04	; 4
    5d22:	60 f2       	brcs	.-104    	; 0x5cbc <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5d24:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
}
    5d28:	cf 91       	pop	r28
    5d2a:	1f 91       	pop	r17
    5d2c:	0f 91       	pop	r16
    5d2e:	08 95       	ret

00005d30 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    5d30:	82 30       	cpi	r24, 0x02	; 2
    5d32:	49 f0       	breq	.+18     	; 0x5d46 <softKey_MessageKey_ToSoftKeyNr+0x16>
    5d34:	18 f4       	brcc	.+6      	; 0x5d3c <softKey_MessageKey_ToSoftKeyNr+0xc>
    5d36:	81 30       	cpi	r24, 0x01	; 1
    5d38:	51 f0       	breq	.+20     	; 0x5d4e <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5d3a:	0b c0       	rjmp	.+22     	; 0x5d52 <softKey_MessageKey_ToSoftKeyNr+0x22>
    5d3c:	83 30       	cpi	r24, 0x03	; 3
    5d3e:	59 f0       	breq	.+22     	; 0x5d56 <softKey_MessageKey_ToSoftKeyNr+0x26>
    5d40:	84 30       	cpi	r24, 0x04	; 4
    5d42:	19 f0       	breq	.+6      	; 0x5d4a <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5d44:	06 c0       	rjmp	.+12     	; 0x5d52 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5d46:	80 e0       	ldi	r24, 0x00	; 0
    5d48:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5d4a:	82 e0       	ldi	r24, 0x02	; 2
    5d4c:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5d4e:	83 e0       	ldi	r24, 0x03	; 3
    5d50:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5d52:	8f ef       	ldi	r24, 0xFF	; 255
    5d54:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5d56:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5d58:	08 95       	ret

00005d5a <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5d5a:	0f 93       	push	r16
    5d5c:	1f 93       	push	r17
    5d5e:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5d60:	84 30       	cpi	r24, 0x04	; 4
    5d62:	d0 f5       	brcc	.+116    	; 0x5dd8 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5d64:	e8 2f       	mov	r30, r24
    5d66:	f0 e0       	ldi	r31, 0x00	; 0
    5d68:	ee 0f       	add	r30, r30
    5d6a:	ff 1f       	adc	r31, r31
    5d6c:	e0 52       	subi	r30, 0x20	; 32
    5d6e:	fa 4f       	sbci	r31, 0xFA	; 250
    5d70:	00 81       	ld	r16, Z
    5d72:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5d74:	01 15       	cp	r16, r1
    5d76:	11 05       	cpc	r17, r1
    5d78:	89 f1       	breq	.+98     	; 0x5ddc <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5d7a:	f8 01       	movw	r30, r16
    5d7c:	94 91       	lpm	r25, Z
    5d7e:	9f 73       	andi	r25, 0x3F	; 63
    5d80:	91 30       	cpi	r25, 0x01	; 1
    5d82:	71 f5       	brne	.+92     	; 0x5de0 <softKey_Execute+0x86>
    5d84:	31 96       	adiw	r30, 0x01	; 1
    5d86:	94 91       	lpm	r25, Z
    5d88:	94 ff       	sbrs	r25, 4
    5d8a:	2c c0       	rjmp	.+88     	; 0x5de4 <softKey_Execute+0x8a>
    5d8c:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5d8e:	3f 96       	adiw	r30, 0x0f	; 15
    5d90:	05 90       	lpm	r0, Z+
    5d92:	f4 91       	lpm	r31, Z
    5d94:	e0 2d       	mov	r30, r0
    5d96:	30 97       	sbiw	r30, 0x00	; 0
    5d98:	89 f0       	breq	.+34     	; 0x5dbc <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5d9a:	86 2f       	mov	r24, r22
    5d9c:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5d9e:	82 38       	cpi	r24, 0x82	; 130
    5da0:	29 f4       	brne	.+10     	; 0x5dac <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5da2:	60 e0       	ldi	r22, 0x00	; 0
    5da4:	8c 2f       	mov	r24, r28
    5da6:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <keylabel_statcheck>
    5daa:	06 c0       	rjmp	.+12     	; 0x5db8 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5dac:	81 38       	cpi	r24, 0x81	; 129
    5dae:	21 f4       	brne	.+8      	; 0x5db8 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5db0:	6f ef       	ldi	r22, 0xFF	; 255
    5db2:	8c 2f       	mov	r24, r28
    5db4:	0e 94 7a 3f 	call	0x7ef4	; 0x7ef4 <keylabel_statcheck>
					}
					keylabel_toLCD();
    5db8:	0e 94 5b 3f 	call	0x7eb6	; 0x7eb6 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5dbc:	f8 01       	movw	r30, r16
    5dbe:	3c 96       	adiw	r30, 0x0c	; 12
    5dc0:	85 91       	lpm	r24, Z+
    5dc2:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    5dc4:	00 97       	sbiw	r24, 0x00	; 0
    5dc6:	81 f0       	breq	.+32     	; 0x5de8 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5dc8:	b8 01       	movw	r22, r16
    5dca:	6e 5f       	subi	r22, 0xFE	; 254
    5dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    5dce:	0e 94 aa 22 	call	0x4554	; 0x4554 <menu_Init>
					menu_InitLCD(); //display menu
    5dd2:	92 dc       	rcall	.-1756   	; 0x56f8 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
    5dd6:	09 c0       	rjmp	.+18     	; 0x5dea <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5dd8:	8f ef       	ldi	r24, 0xFF	; 255
    5dda:	07 c0       	rjmp	.+14     	; 0x5dea <softKey_Execute+0x90>
    5ddc:	8f ef       	ldi	r24, 0xFF	; 255
    5dde:	05 c0       	rjmp	.+10     	; 0x5dea <softKey_Execute+0x90>
    5de0:	8f ef       	ldi	r24, 0xFF	; 255
    5de2:	03 c0       	rjmp	.+6      	; 0x5dea <softKey_Execute+0x90>
    5de4:	8f ef       	ldi	r24, 0xFF	; 255
    5de6:	01 c0       	rjmp	.+2      	; 0x5dea <softKey_Execute+0x90>
    5de8:	8f ef       	ldi	r24, 0xFF	; 255
}
    5dea:	cf 91       	pop	r28
    5dec:	1f 91       	pop	r17
    5dee:	0f 91       	pop	r16
    5df0:	08 95       	ret

00005df2 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    5df2:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    5df4:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    5df8:	8c e0       	ldi	r24, 0x0C	; 12
    5dfa:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5dfe:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <pipe_PowerStatus>
    5e02:	84 ff       	sbrs	r24, 4
    5e04:	02 c0       	rjmp	.+4      	; 0x5e0a <menu_showPowerState+0x18>
    5e06:	80 e2       	ldi	r24, 0x20	; 32
    5e08:	01 c0       	rjmp	.+2      	; 0x5e0c <menu_showPowerState+0x1a>
    5e0a:	89 e0       	ldi	r24, 0x09	; 9
    5e0c:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
	lcd_goto(saveCursor);
    5e10:	8c 2f       	mov	r24, r28
    5e12:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>

    5e16:	cf 91       	pop	r28
    5e18:	08 95       	ret

00005e1a <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    5e1a:	85 b1       	in	r24, 0x05	; 5
    5e1c:	80 64       	ori	r24, 0x40	; 64
    5e1e:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5e20:	83 e1       	ldi	r24, 0x13	; 19
    5e22:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5e26:	e5 df       	rcall	.-54     	; 0x5df2 <menu_showPowerState>
	return 0;
}
    5e28:	80 e0       	ldi	r24, 0x00	; 0
    5e2a:	08 95       	ret

00005e2c <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    5e2c:	85 b1       	in	r24, 0x05	; 5
    5e2e:	8f 7b       	andi	r24, 0xBF	; 191
    5e30:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5e32:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5e36:	dd df       	rcall	.-70     	; 0x5df2 <menu_showPowerState>
	return 0;
}
    5e38:	80 e0       	ldi	r24, 0x00	; 0
    5e3a:	08 95       	ret

00005e3c <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    5e3c:	85 b1       	in	r24, 0x05	; 5
    5e3e:	8f 7b       	andi	r24, 0xBF	; 191
    5e40:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5e42:	81 e0       	ldi	r24, 0x01	; 1
    5e44:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <pipe_PowerStatus>
	menu_showPowerState();
    5e48:	d4 df       	rcall	.-88     	; 0x5df2 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5e4a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5e4c:	f8 94       	cli
    5e4e:	81 e0       	ldi	r24, 0x01	; 1
    5e50:	06 c0       	rjmp	.+12     	; 0x5e5e <menuOnEnterPwrRest+0x22>
    5e52:	e0 e5       	ldi	r30, 0x50	; 80
    5e54:	f2 e0       	ldi	r31, 0x02	; 2
    5e56:	88 e2       	ldi	r24, 0x28	; 40
    5e58:	82 83       	std	Z+2, r24	; 0x02
    5e5a:	13 82       	std	Z+3, r1	; 0x03
    5e5c:	80 e0       	ldi	r24, 0x00	; 0
    5e5e:	81 11       	cpse	r24, r1
    5e60:	f8 cf       	rjmp	.-16     	; 0x5e52 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5e62:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5e64:	08 95       	ret

00005e66 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5e66:	10 92 f8 07 	sts	0x07F8, r1	; 0x8007f8 <msgInIndex>
    5e6a:	10 92 f5 05 	sts	0x05F5, r1	; 0x8005f5 <msgOutIndex>
    5e6e:	10 92 f7 07 	sts	0x07F7, r1	; 0x8007f7 <msgOverflow>
    5e72:	08 95       	ret

00005e74 <message_push>:
    5e74:	90 91 f8 07 	lds	r25, 0x07F8	; 0x8007f8 <msgInIndex>
    5e78:	e9 2f       	mov	r30, r25
    5e7a:	f0 e0       	ldi	r31, 0x00	; 0
    5e7c:	e7 50       	subi	r30, 0x07	; 7
    5e7e:	f8 4f       	sbci	r31, 0xF8	; 248
    5e80:	80 83       	st	Z, r24
    5e82:	9f 5f       	subi	r25, 0xFF	; 255
    5e84:	9f 71       	andi	r25, 0x1F	; 31
    5e86:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <msgOutIndex>
    5e8a:	98 13       	cpse	r25, r24
    5e8c:	04 c0       	rjmp	.+8      	; 0x5e96 <message_push+0x22>
    5e8e:	8f ef       	ldi	r24, 0xFF	; 255
    5e90:	80 93 f7 07 	sts	0x07F7, r24	; 0x8007f7 <msgOverflow>
    5e94:	08 95       	ret
    5e96:	90 93 f8 07 	sts	0x07F8, r25	; 0x8007f8 <msgInIndex>
    5e9a:	08 95       	ret

00005e9c <message_get>:
    5e9c:	4f b7       	in	r20, 0x3f	; 63
    5e9e:	f8 94       	cli
    5ea0:	21 e0       	ldi	r18, 0x01	; 1
    5ea2:	11 c0       	rjmp	.+34     	; 0x5ec6 <message_get+0x2a>
    5ea4:	90 91 f5 05 	lds	r25, 0x05F5	; 0x8005f5 <msgOutIndex>
    5ea8:	30 91 f8 07 	lds	r19, 0x07F8	; 0x8007f8 <msgInIndex>
    5eac:	8f ef       	ldi	r24, 0xFF	; 255
    5eae:	20 e0       	ldi	r18, 0x00	; 0
    5eb0:	93 17       	cp	r25, r19
    5eb2:	49 f0       	breq	.+18     	; 0x5ec6 <message_get+0x2a>
    5eb4:	e9 2f       	mov	r30, r25
    5eb6:	f0 e0       	ldi	r31, 0x00	; 0
    5eb8:	e7 50       	subi	r30, 0x07	; 7
    5eba:	f8 4f       	sbci	r31, 0xF8	; 248
    5ebc:	80 81       	ld	r24, Z
    5ebe:	9f 5f       	subi	r25, 0xFF	; 255
    5ec0:	9f 71       	andi	r25, 0x1F	; 31
    5ec2:	90 93 f5 05 	sts	0x05F5, r25	; 0x8005f5 <msgOutIndex>
    5ec6:	21 11       	cpse	r18, r1
    5ec8:	ed cf       	rjmp	.-38     	; 0x5ea4 <message_get+0x8>
    5eca:	4f bf       	out	0x3f, r20	; 63
    5ecc:	08 95       	ret

00005ece <message_status>:
    5ece:	4f b7       	in	r20, 0x3f	; 63
    5ed0:	f8 94       	cli
    5ed2:	91 e0       	ldi	r25, 0x01	; 1
    5ed4:	08 c0       	rjmp	.+16     	; 0x5ee6 <message_status+0x18>
    5ed6:	30 91 f5 05 	lds	r19, 0x05F5	; 0x8005f5 <msgOutIndex>
    5eda:	20 91 f8 07 	lds	r18, 0x07F8	; 0x8007f8 <msgInIndex>
    5ede:	90 e0       	ldi	r25, 0x00	; 0
    5ee0:	80 e0       	ldi	r24, 0x00	; 0
    5ee2:	32 17       	cp	r19, r18
    5ee4:	11 f0       	breq	.+4      	; 0x5eea <message_status+0x1c>
    5ee6:	8f ef       	ldi	r24, 0xFF	; 255
    5ee8:	01 c0       	rjmp	.+2      	; 0x5eec <message_status+0x1e>
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	91 11       	cpse	r25, r1
    5eee:	f3 cf       	rjmp	.-26     	; 0x5ed6 <message_status+0x8>
    5ef0:	4f bf       	out	0x3f, r20	; 63
    5ef2:	08 95       	ret

00005ef4 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5ef4:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5ef6:	90 91 19 08 	lds	r25, 0x0819	; 0x800819 <msgPipe_Handling>
    5efa:	99 23       	and	r25, r25
    5efc:	e1 f0       	breq	.+56     	; 0x5f36 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5efe:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5f02:	21 e0       	ldi	r18, 0x01	; 1
    5f04:	29 0f       	add	r18, r25
    5f06:	20 93 f6 07 	sts	0x07F6, r18	; 0x8007f6 <pipeMsgInIndex>
    5f0a:	e9 2f       	mov	r30, r25
    5f0c:	f0 e0       	ldi	r31, 0x00	; 0
    5f0e:	ee 0f       	add	r30, r30
    5f10:	ff 1f       	adc	r31, r31
    5f12:	ea 50       	subi	r30, 0x0A	; 10
    5f14:	fa 4f       	sbci	r31, 0xFA	; 250
    5f16:	51 83       	std	Z+1, r21	; 0x01
    5f18:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5f1a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5f1e:	28 13       	cpse	r18, r24
    5f20:	0a c0       	rjmp	.+20     	; 0x5f36 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5f22:	90 93 f6 07 	sts	0x07F6, r25	; 0x8007f6 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5f26:	9f 3f       	cpi	r25, 0xFF	; 255
    5f28:	19 f4       	brne	.+6      	; 0x5f30 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5f2a:	8f ef       	ldi	r24, 0xFF	; 255
    5f2c:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5f30:	8f ef       	ldi	r24, 0xFF	; 255
    5f32:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <msgPipeOverflow>
    5f36:	08 95       	ret

00005f38 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5f38:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5f3c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5f40:	e8 13       	cpse	r30, r24
    5f42:	03 c0       	rjmp	.+6      	; 0x5f4a <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5f44:	8f ef       	ldi	r24, 0xFF	; 255
    5f46:	9f ef       	ldi	r25, 0xFF	; 255
    5f48:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5f4a:	81 e0       	ldi	r24, 0x01	; 1
    5f4c:	8e 0f       	add	r24, r30
    5f4e:	80 93 1b 08 	sts	0x081B, r24	; 0x80081b <pipeMsgOutIndex>
    5f52:	f0 e0       	ldi	r31, 0x00	; 0
    5f54:	ee 0f       	add	r30, r30
    5f56:	ff 1f       	adc	r31, r31
    5f58:	ea 50       	subi	r30, 0x0A	; 10
    5f5a:	fa 4f       	sbci	r31, 0xFA	; 250
    5f5c:	80 81       	ld	r24, Z
    5f5e:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5f60:	08 95       	ret

00005f62 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5f62:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <pipeMsgOutIndex>
    5f66:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <pipeMsgInIndex>
    5f6a:	98 13       	cpse	r25, r24
    5f6c:	02 c0       	rjmp	.+4      	; 0x5f72 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5f6e:	80 e0       	ldi	r24, 0x00	; 0
    5f70:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5f72:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5f74:	08 95       	ret

00005f76 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5f76:	80 e0       	ldi	r24, 0x00	; 0
    5f78:	e7 e3       	ldi	r30, 0x37	; 55
    5f7a:	f8 e0       	ldi	r31, 0x08	; 8
    5f7c:	03 c0       	rjmp	.+6      	; 0x5f84 <midi_CouplerReset+0xe>
    5f7e:	10 82       	st	Z, r1
    5f80:	8f 5f       	subi	r24, 0xFF	; 255
    5f82:	31 96       	adiw	r30, 0x01	; 1
    5f84:	8c 30       	cpi	r24, 0x0C	; 12
    5f86:	d8 f3       	brcs	.-10     	; 0x5f7e <midi_CouplerReset+0x8>
    5f88:	08 95       	ret

00005f8a <init_Midi>:
    5f8a:	f5 df       	rcall	.-22     	; 0x5f76 <midi_CouplerReset>
    5f8c:	8f ef       	ldi	r24, 0xFF	; 255
    5f8e:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
    5f92:	10 92 35 08 	sts	0x0835, r1	; 0x800835 <prog_UpdDisplay>
    5f96:	08 95       	ret

00005f98 <set_Coupler>:
    5f98:	8c 30       	cpi	r24, 0x0C	; 12
    5f9a:	e8 f4       	brcc	.+58     	; 0x5fd6 <set_Coupler+0x3e>
    5f9c:	e8 2f       	mov	r30, r24
    5f9e:	f0 e0       	ldi	r31, 0x00	; 0
    5fa0:	e9 5c       	subi	r30, 0xC9	; 201
    5fa2:	f7 4f       	sbci	r31, 0xF7	; 247
    5fa4:	9f ef       	ldi	r25, 0xFF	; 255
    5fa6:	90 83       	st	Z, r25
    5fa8:	86 30       	cpi	r24, 0x06	; 6
    5faa:	10 f0       	brcs	.+4      	; 0x5fb0 <set_Coupler+0x18>
    5fac:	86 50       	subi	r24, 0x06	; 6
    5fae:	01 c0       	rjmp	.+2      	; 0x5fb2 <set_Coupler+0x1a>
    5fb0:	8a 5f       	subi	r24, 0xFA	; 250
    5fb2:	e8 2f       	mov	r30, r24
    5fb4:	f0 e0       	ldi	r31, 0x00	; 0
    5fb6:	df 01       	movw	r26, r30
    5fb8:	a9 5c       	subi	r26, 0xC9	; 201
    5fba:	b7 4f       	sbci	r27, 0xF7	; 247
    5fbc:	8c 91       	ld	r24, X
    5fbe:	88 23       	and	r24, r24
    5fc0:	59 f0       	breq	.+22     	; 0x5fd8 <set_Coupler+0x40>
    5fc2:	df 01       	movw	r26, r30
    5fc4:	a9 5c       	subi	r26, 0xC9	; 201
    5fc6:	b7 4f       	sbci	r27, 0xF7	; 247
    5fc8:	1c 92       	st	X, r1
    5fca:	ee 0f       	add	r30, r30
    5fcc:	ff 1f       	adc	r31, r31
    5fce:	e0 59       	subi	r30, 0x90	; 144
    5fd0:	fb 4e       	sbci	r31, 0xEB	; 235
    5fd2:	84 91       	lpm	r24, Z
    5fd4:	08 95       	ret
    5fd6:	80 e0       	ldi	r24, 0x00	; 0
    5fd8:	08 95       	ret

00005fda <getAllCouplers>:
    5fda:	80 e0       	ldi	r24, 0x00	; 0
    5fdc:	90 e0       	ldi	r25, 0x00	; 0
    5fde:	4b e0       	ldi	r20, 0x0B	; 11
    5fe0:	01 c0       	rjmp	.+2      	; 0x5fe4 <getAllCouplers+0xa>
    5fe2:	42 2f       	mov	r20, r18
    5fe4:	28 2f       	mov	r18, r24
    5fe6:	39 2f       	mov	r19, r25
    5fe8:	22 0f       	add	r18, r18
    5fea:	33 1f       	adc	r19, r19
    5fec:	82 2f       	mov	r24, r18
    5fee:	93 2f       	mov	r25, r19
    5ff0:	e4 2f       	mov	r30, r20
    5ff2:	f0 e0       	ldi	r31, 0x00	; 0
    5ff4:	e9 5c       	subi	r30, 0xC9	; 201
    5ff6:	f7 4f       	sbci	r31, 0xF7	; 247
    5ff8:	50 81       	ld	r21, Z
    5ffa:	5f 3f       	cpi	r21, 0xFF	; 255
    5ffc:	09 f4       	brne	.+2      	; 0x6000 <getAllCouplers+0x26>
    5ffe:	81 60       	ori	r24, 0x01	; 1
    6000:	2f ef       	ldi	r18, 0xFF	; 255
    6002:	24 0f       	add	r18, r20
    6004:	41 11       	cpse	r20, r1
    6006:	ed cf       	rjmp	.-38     	; 0x5fe2 <getAllCouplers+0x8>
    6008:	08 95       	ret

0000600a <setAllCouplers>:
    600a:	40 e0       	ldi	r20, 0x00	; 0
    600c:	80 ff       	sbrs	r24, 0
    600e:	07 c0       	rjmp	.+14     	; 0x601e <setAllCouplers+0x14>
    6010:	e4 2f       	mov	r30, r20
    6012:	f0 e0       	ldi	r31, 0x00	; 0
    6014:	e9 5c       	subi	r30, 0xC9	; 201
    6016:	f7 4f       	sbci	r31, 0xF7	; 247
    6018:	2f ef       	ldi	r18, 0xFF	; 255
    601a:	20 83       	st	Z, r18
    601c:	05 c0       	rjmp	.+10     	; 0x6028 <setAllCouplers+0x1e>
    601e:	e4 2f       	mov	r30, r20
    6020:	f0 e0       	ldi	r31, 0x00	; 0
    6022:	e9 5c       	subi	r30, 0xC9	; 201
    6024:	f7 4f       	sbci	r31, 0xF7	; 247
    6026:	10 82       	st	Z, r1
    6028:	28 2f       	mov	r18, r24
    602a:	39 2f       	mov	r19, r25
    602c:	36 95       	lsr	r19
    602e:	27 95       	ror	r18
    6030:	82 2f       	mov	r24, r18
    6032:	93 2f       	mov	r25, r19
    6034:	4f 5f       	subi	r20, 0xFF	; 255
    6036:	4c 30       	cpi	r20, 0x0C	; 12
    6038:	48 f3       	brcs	.-46     	; 0x600c <setAllCouplers+0x2>
    603a:	08 95       	ret

0000603c <midiAllReset>:
    603c:	80 e8       	ldi	r24, 0x80	; 128
    603e:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <pipeProcessing>
    6042:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <init_Pipe>
    6046:	08 95       	ret

00006048 <registers_CalcCount>:
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	12 c0       	rjmp	.+36     	; 0x6072 <registers_CalcCount+0x2a>
    604e:	82 2f       	mov	r24, r18
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	fc 01       	movw	r30, r24
    6054:	ee 0f       	add	r30, r30
    6056:	ff 1f       	adc	r31, r31
    6058:	8e 0f       	add	r24, r30
    605a:	9f 1f       	adc	r25, r31
    605c:	fc 01       	movw	r30, r24
    605e:	e3 5e       	subi	r30, 0xE3	; 227
    6060:	f7 4f       	sbci	r31, 0xF7	; 247
    6062:	81 81       	ldd	r24, Z+1	; 0x01
    6064:	8f 3f       	cpi	r24, 0xFF	; 255
    6066:	21 f0       	breq	.+8      	; 0x6070 <registers_CalcCount+0x28>
    6068:	83 17       	cp	r24, r19
    606a:	10 f0       	brcs	.+4      	; 0x6070 <registers_CalcCount+0x28>
    606c:	31 e0       	ldi	r19, 0x01	; 1
    606e:	38 0f       	add	r19, r24
    6070:	2f 5f       	subi	r18, 0xFF	; 255
    6072:	28 30       	cpi	r18, 0x08	; 8
    6074:	60 f3       	brcs	.-40     	; 0x604e <registers_CalcCount+0x6>
    6076:	30 93 36 08 	sts	0x0836, r19	; 0x800836 <registerCount>
    607a:	08 95       	ret

0000607c <init_Registers>:
    607c:	8f ef       	ldi	r24, 0xFF	; 255
    607e:	80 93 59 09 	sts	0x0959, r24	; 0x800959 <midi_RegisterChanged>
    6082:	20 e0       	ldi	r18, 0x00	; 0
    6084:	0e c0       	rjmp	.+28     	; 0x60a2 <init_Registers+0x26>
    6086:	82 2f       	mov	r24, r18
    6088:	90 e0       	ldi	r25, 0x00	; 0
    608a:	fc 01       	movw	r30, r24
    608c:	ee 0f       	add	r30, r30
    608e:	ff 1f       	adc	r31, r31
    6090:	e8 0f       	add	r30, r24
    6092:	f9 1f       	adc	r31, r25
    6094:	e3 5e       	subi	r30, 0xE3	; 227
    6096:	f7 4f       	sbci	r31, 0xF7	; 247
    6098:	8f ef       	ldi	r24, 0xFF	; 255
    609a:	80 83       	st	Z, r24
    609c:	81 83       	std	Z+1, r24	; 0x01
    609e:	12 82       	std	Z+2, r1	; 0x02
    60a0:	2f 5f       	subi	r18, 0xFF	; 255
    60a2:	28 30       	cpi	r18, 0x08	; 8
    60a4:	80 f3       	brcs	.-32     	; 0x6086 <init_Registers+0xa>
    60a6:	0e 94 30 0c 	call	0x1860	; 0x1860 <eeprom_ReadReg>
    60aa:	8f 3f       	cpi	r24, 0xFF	; 255
    60ac:	49 f4       	brne	.+18     	; 0x60c0 <init_Registers+0x44>
    60ae:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <registerCount>
    60b2:	40 e0       	ldi	r20, 0x00	; 0
    60b4:	50 e0       	ldi	r21, 0x00	; 0
    60b6:	65 e0       	ldi	r22, 0x05	; 5
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
    60be:	01 c0       	rjmp	.+2      	; 0x60c2 <init_Registers+0x46>
    60c0:	c3 df       	rcall	.-122    	; 0x6048 <registers_CalcCount>
    60c2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <eeprom_ReadProg>
    60c6:	8f 3f       	cpi	r24, 0xFF	; 255
    60c8:	a1 f5       	brne	.+104    	; 0x6132 <init_Registers+0xb6>
    60ca:	2a c0       	rjmp	.+84     	; 0x6120 <init_Registers+0xa4>
    60cc:	83 2f       	mov	r24, r19
    60ce:	90 e0       	ldi	r25, 0x00	; 0
    60d0:	fc 01       	movw	r30, r24
    60d2:	ee 0f       	add	r30, r30
    60d4:	ff 1f       	adc	r31, r31
    60d6:	88 0f       	add	r24, r24
    60d8:	99 1f       	adc	r25, r25
    60da:	88 0f       	add	r24, r24
    60dc:	99 1f       	adc	r25, r25
    60de:	88 0f       	add	r24, r24
    60e0:	99 1f       	adc	r25, r25
    60e2:	e8 0f       	add	r30, r24
    60e4:	f9 1f       	adc	r31, r25
    60e6:	e2 57       	subi	r30, 0x72	; 114
    60e8:	f6 4f       	sbci	r31, 0xF6	; 246
    60ea:	e2 0f       	add	r30, r18
    60ec:	f1 1d       	adc	r31, r1
    60ee:	10 82       	st	Z, r1
    60f0:	2f 5f       	subi	r18, 0xFF	; 255
    60f2:	01 c0       	rjmp	.+2      	; 0x60f6 <init_Registers+0x7a>
    60f4:	20 e0       	ldi	r18, 0x00	; 0
    60f6:	28 30       	cpi	r18, 0x08	; 8
    60f8:	48 f3       	brcs	.-46     	; 0x60cc <init_Registers+0x50>
    60fa:	83 2f       	mov	r24, r19
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	fc 01       	movw	r30, r24
    6100:	ee 0f       	add	r30, r30
    6102:	ff 1f       	adc	r31, r31
    6104:	88 0f       	add	r24, r24
    6106:	99 1f       	adc	r25, r25
    6108:	88 0f       	add	r24, r24
    610a:	99 1f       	adc	r25, r25
    610c:	88 0f       	add	r24, r24
    610e:	99 1f       	adc	r25, r25
    6110:	e8 0f       	add	r30, r24
    6112:	f9 1f       	adc	r31, r25
    6114:	e2 57       	subi	r30, 0x72	; 114
    6116:	f6 4f       	sbci	r31, 0xF6	; 246
    6118:	11 86       	std	Z+9, r1	; 0x09
    611a:	10 86       	std	Z+8, r1	; 0x08
    611c:	3f 5f       	subi	r19, 0xFF	; 255
    611e:	01 c0       	rjmp	.+2      	; 0x6122 <init_Registers+0xa6>
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	30 34       	cpi	r19, 0x40	; 64
    6124:	38 f3       	brcs	.-50     	; 0x60f4 <init_Registers+0x78>
    6126:	40 e0       	ldi	r20, 0x00	; 0
    6128:	50 e0       	ldi	r21, 0x00	; 0
    612a:	66 e0       	ldi	r22, 0x06	; 6
    612c:	81 e0       	ldi	r24, 0x01	; 1
    612e:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
    6132:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <eeprom_ReadCCreg>
    6136:	8f 3f       	cpi	r24, 0xFF	; 255
    6138:	61 f4       	brne	.+24     	; 0x6152 <init_Registers+0xd6>
    613a:	ea e5       	ldi	r30, 0x5A	; 90
    613c:	f9 e0       	ldi	r31, 0x09	; 9
    613e:	81 83       	std	Z+1, r24	; 0x01
    6140:	80 83       	st	Z, r24
    6142:	83 83       	std	Z+3, r24	; 0x03
    6144:	82 83       	std	Z+2, r24	; 0x02
    6146:	40 e0       	ldi	r20, 0x00	; 0
    6148:	50 e0       	ldi	r21, 0x00	; 0
    614a:	6a e0       	ldi	r22, 0x0A	; 10
    614c:	81 e0       	ldi	r24, 0x01	; 1
    614e:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <log_putError>
    6152:	08 95       	ret

00006154 <regNr_to_moduleBit>:
    6154:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6158:	89 17       	cp	r24, r25
    615a:	a0 f4       	brcc	.+40     	; 0x6184 <regNr_to_moduleBit+0x30>
    615c:	80 34       	cpi	r24, 0x40	; 64
    615e:	90 f4       	brcc	.+36     	; 0x6184 <regNr_to_moduleBit+0x30>
    6160:	28 e0       	ldi	r18, 0x08	; 8
    6162:	ed e1       	ldi	r30, 0x1D	; 29
    6164:	f8 e0       	ldi	r31, 0x08	; 8
    6166:	30 81       	ld	r19, Z
    6168:	83 17       	cp	r24, r19
    616a:	48 f0       	brcs	.+18     	; 0x617e <regNr_to_moduleBit+0x2a>
    616c:	91 81       	ldd	r25, Z+1	; 0x01
    616e:	98 17       	cp	r25, r24
    6170:	30 f0       	brcs	.+12     	; 0x617e <regNr_to_moduleBit+0x2a>
    6172:	22 81       	ldd	r18, Z+2	; 0x02
    6174:	98 2f       	mov	r25, r24
    6176:	93 1b       	sub	r25, r19
    6178:	80 e0       	ldi	r24, 0x00	; 0
    617a:	92 0f       	add	r25, r18
    617c:	08 95       	ret
    617e:	33 96       	adiw	r30, 0x03	; 3
    6180:	21 50       	subi	r18, 0x01	; 1
    6182:	89 f7       	brne	.-30     	; 0x6166 <regNr_to_moduleBit+0x12>
    6184:	8f ef       	ldi	r24, 0xFF	; 255
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	08 95       	ret

0000618a <moduleBit_to_registerNr>:
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	16 c0       	rjmp	.+44     	; 0x61ba <moduleBit_to_registerNr+0x30>
    618e:	40 91 1f 08 	lds	r20, 0x081F	; 0x80081f <registerMap+0x2>
    6192:	84 17       	cp	r24, r20
    6194:	88 f0       	brcs	.+34     	; 0x61b8 <moduleBit_to_registerNr+0x2e>
    6196:	68 2f       	mov	r22, r24
    6198:	70 e0       	ldi	r23, 0x00	; 0
    619a:	ed e1       	ldi	r30, 0x1D	; 29
    619c:	f8 e0       	ldi	r31, 0x08	; 8
    619e:	21 81       	ldd	r18, Z+1	; 0x01
    61a0:	30 e0       	ldi	r19, 0x00	; 0
    61a2:	24 0f       	add	r18, r20
    61a4:	31 1d       	adc	r19, r1
    61a6:	50 81       	ld	r21, Z
    61a8:	25 1b       	sub	r18, r21
    61aa:	31 09       	sbc	r19, r1
    61ac:	26 17       	cp	r18, r22
    61ae:	37 07       	cpc	r19, r23
    61b0:	1c f0       	brlt	.+6      	; 0x61b8 <moduleBit_to_registerNr+0x2e>
    61b2:	84 1b       	sub	r24, r20
    61b4:	85 0f       	add	r24, r21
    61b6:	08 95       	ret
    61b8:	9f 5f       	subi	r25, 0xFF	; 255
    61ba:	98 30       	cpi	r25, 0x08	; 8
    61bc:	40 f3       	brcs	.-48     	; 0x618e <moduleBit_to_registerNr+0x4>
    61be:	8f ef       	ldi	r24, 0xFF	; 255
    61c0:	08 95       	ret

000061c2 <read_Register>:
    61c2:	cf 93       	push	r28
    61c4:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    61c8:	89 17       	cp	r24, r25
    61ca:	08 f0       	brcs	.+2      	; 0x61ce <read_Register+0xc>
    61cc:	3f c0       	rjmp	.+126    	; 0x624c <read_Register+0x8a>
    61ce:	c6 2f       	mov	r28, r22
    61d0:	c1 df       	rcall	.-126    	; 0x6154 <regNr_to_moduleBit>
    61d2:	81 11       	cpse	r24, r1
    61d4:	33 c0       	rjmp	.+102    	; 0x623c <read_Register+0x7a>
    61d6:	29 2f       	mov	r18, r25
    61d8:	2f 71       	andi	r18, 0x1F	; 31
    61da:	92 95       	swap	r25
    61dc:	96 95       	lsr	r25
    61de:	97 70       	andi	r25, 0x07	; 7
    61e0:	41 e0       	ldi	r20, 0x01	; 1
    61e2:	50 e0       	ldi	r21, 0x00	; 0
    61e4:	02 c0       	rjmp	.+4      	; 0x61ea <read_Register+0x28>
    61e6:	44 0f       	add	r20, r20
    61e8:	55 1f       	adc	r21, r21
    61ea:	9a 95       	dec	r25
    61ec:	e2 f7       	brpl	.-8      	; 0x61e6 <read_Register+0x24>
    61ee:	30 e0       	ldi	r19, 0x00	; 0
    61f0:	f9 01       	movw	r30, r18
    61f2:	ee 0f       	add	r30, r30
    61f4:	ff 1f       	adc	r31, r31
    61f6:	ee 0f       	add	r30, r30
    61f8:	ff 1f       	adc	r31, r31
    61fa:	ee 0f       	add	r30, r30
    61fc:	ff 1f       	adc	r31, r31
    61fe:	e4 59       	subi	r30, 0x94	; 148
    6200:	fd 4f       	sbci	r31, 0xFD	; 253
    6202:	91 81       	ldd	r25, Z+1	; 0x01
    6204:	94 23       	and	r25, r20
    6206:	11 f4       	brne	.+4      	; 0x620c <read_Register+0x4a>
    6208:	c1 fd       	sbrc	r28, 1
    620a:	1a c0       	rjmp	.+52     	; 0x6240 <read_Register+0x7e>
    620c:	22 0f       	add	r18, r18
    620e:	33 1f       	adc	r19, r19
    6210:	22 0f       	add	r18, r18
    6212:	33 1f       	adc	r19, r19
    6214:	22 0f       	add	r18, r18
    6216:	33 1f       	adc	r19, r19
    6218:	f9 01       	movw	r30, r18
    621a:	e4 59       	subi	r30, 0x94	; 148
    621c:	fd 4f       	sbci	r31, 0xFD	; 253
    621e:	36 81       	ldd	r19, Z+6	; 0x06
    6220:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <pipe_Module>
    6224:	43 23       	and	r20, r19
    6226:	42 23       	and	r20, r18
    6228:	11 f0       	breq	.+4      	; 0x622e <read_Register+0x6c>
    622a:	c0 fd       	sbrc	r28, 0
    622c:	0b c0       	rjmp	.+22     	; 0x6244 <read_Register+0x82>
    622e:	99 23       	and	r25, r25
    6230:	71 f0       	breq	.+28     	; 0x624e <read_Register+0x8c>
    6232:	44 23       	and	r20, r20
    6234:	61 f0       	breq	.+24     	; 0x624e <read_Register+0x8c>
    6236:	c4 30       	cpi	r28, 0x04	; 4
    6238:	51 f4       	brne	.+20     	; 0x624e <read_Register+0x8c>
    623a:	06 c0       	rjmp	.+12     	; 0x6248 <read_Register+0x86>
    623c:	80 e0       	ldi	r24, 0x00	; 0
    623e:	07 c0       	rjmp	.+14     	; 0x624e <read_Register+0x8c>
    6240:	81 e0       	ldi	r24, 0x01	; 1
    6242:	05 c0       	rjmp	.+10     	; 0x624e <read_Register+0x8c>
    6244:	81 e0       	ldi	r24, 0x01	; 1
    6246:	03 c0       	rjmp	.+6      	; 0x624e <read_Register+0x8c>
    6248:	81 e0       	ldi	r24, 0x01	; 1
    624a:	01 c0       	rjmp	.+2      	; 0x624e <read_Register+0x8c>
    624c:	80 e0       	ldi	r24, 0x00	; 0
    624e:	cf 91       	pop	r28
    6250:	08 95       	ret

00006252 <get_RegisterStatus>:
    6252:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6256:	89 17       	cp	r24, r25
    6258:	90 f5       	brcc	.+100    	; 0x62be <get_RegisterStatus+0x6c>
    625a:	7c df       	rcall	.-264    	; 0x6154 <regNr_to_moduleBit>
    625c:	81 11       	cpse	r24, r1
    625e:	2d c0       	rjmp	.+90     	; 0x62ba <get_RegisterStatus+0x68>
    6260:	29 2f       	mov	r18, r25
    6262:	2f 71       	andi	r18, 0x1F	; 31
    6264:	92 95       	swap	r25
    6266:	96 95       	lsr	r25
    6268:	97 70       	andi	r25, 0x07	; 7
    626a:	41 e0       	ldi	r20, 0x01	; 1
    626c:	50 e0       	ldi	r21, 0x00	; 0
    626e:	02 c0       	rjmp	.+4      	; 0x6274 <get_RegisterStatus+0x22>
    6270:	44 0f       	add	r20, r20
    6272:	55 1f       	adc	r21, r21
    6274:	9a 95       	dec	r25
    6276:	e2 f7       	brpl	.-8      	; 0x6270 <get_RegisterStatus+0x1e>
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	f9 01       	movw	r30, r18
    627c:	ee 0f       	add	r30, r30
    627e:	ff 1f       	adc	r31, r31
    6280:	ee 0f       	add	r30, r30
    6282:	ff 1f       	adc	r31, r31
    6284:	ee 0f       	add	r30, r30
    6286:	ff 1f       	adc	r31, r31
    6288:	e4 59       	subi	r30, 0x94	; 148
    628a:	fd 4f       	sbci	r31, 0xFD	; 253
    628c:	81 81       	ldd	r24, Z+1	; 0x01
    628e:	84 23       	and	r24, r20
    6290:	11 f0       	breq	.+4      	; 0x6296 <get_RegisterStatus+0x44>
    6292:	80 e0       	ldi	r24, 0x00	; 0
    6294:	01 c0       	rjmp	.+2      	; 0x6298 <get_RegisterStatus+0x46>
    6296:	82 e0       	ldi	r24, 0x02	; 2
    6298:	22 0f       	add	r18, r18
    629a:	33 1f       	adc	r19, r19
    629c:	22 0f       	add	r18, r18
    629e:	33 1f       	adc	r19, r19
    62a0:	22 0f       	add	r18, r18
    62a2:	33 1f       	adc	r19, r19
    62a4:	f9 01       	movw	r30, r18
    62a6:	e4 59       	subi	r30, 0x94	; 148
    62a8:	fd 4f       	sbci	r31, 0xFD	; 253
    62aa:	26 81       	ldd	r18, Z+6	; 0x06
    62ac:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <pipe_Module>
    62b0:	42 23       	and	r20, r18
    62b2:	49 23       	and	r20, r25
    62b4:	29 f0       	breq	.+10     	; 0x62c0 <get_RegisterStatus+0x6e>
    62b6:	81 60       	ori	r24, 0x01	; 1
    62b8:	08 95       	ret
    62ba:	80 e0       	ldi	r24, 0x00	; 0
    62bc:	08 95       	ret
    62be:	80 e0       	ldi	r24, 0x00	; 0
    62c0:	08 95       	ret

000062c2 <count_Registers>:
    62c2:	1f 93       	push	r17
    62c4:	cf 93       	push	r28
    62c6:	df 93       	push	r29
    62c8:	18 2f       	mov	r17, r24
    62ca:	c0 e0       	ldi	r28, 0x00	; 0
    62cc:	d0 e0       	ldi	r29, 0x00	; 0
    62ce:	06 c0       	rjmp	.+12     	; 0x62dc <count_Registers+0x1a>
    62d0:	61 2f       	mov	r22, r17
    62d2:	8c 2f       	mov	r24, r28
    62d4:	76 df       	rcall	.-276    	; 0x61c2 <read_Register>
    62d6:	81 11       	cpse	r24, r1
    62d8:	df 5f       	subi	r29, 0xFF	; 255
    62da:	cf 5f       	subi	r28, 0xFF	; 255
    62dc:	c0 34       	cpi	r28, 0x40	; 64
    62de:	c0 f3       	brcs	.-16     	; 0x62d0 <count_Registers+0xe>
    62e0:	8d 2f       	mov	r24, r29
    62e2:	df 91       	pop	r29
    62e4:	cf 91       	pop	r28
    62e6:	1f 91       	pop	r17
    62e8:	08 95       	ret

000062ea <read_allRegister>:
    62ea:	ef 92       	push	r14
    62ec:	ff 92       	push	r15
    62ee:	0f 93       	push	r16
    62f0:	1f 93       	push	r17
    62f2:	cf 93       	push	r28
    62f4:	df 93       	push	r29
    62f6:	7c 01       	movw	r14, r24
    62f8:	c0 e0       	ldi	r28, 0x00	; 0
    62fa:	d0 e0       	ldi	r29, 0x00	; 0
    62fc:	00 e0       	ldi	r16, 0x00	; 0
    62fe:	17 c0       	rjmp	.+46     	; 0x632e <read_allRegister+0x44>
    6300:	1c 2f       	mov	r17, r28
    6302:	17 70       	andi	r17, 0x07	; 7
    6304:	09 f4       	brne	.+2      	; 0x6308 <read_allRegister+0x1e>
    6306:	d0 e0       	ldi	r29, 0x00	; 0
    6308:	d6 95       	lsr	r29
    630a:	63 e0       	ldi	r22, 0x03	; 3
    630c:	8c 2f       	mov	r24, r28
    630e:	59 df       	rcall	.-334    	; 0x61c2 <read_Register>
    6310:	88 23       	and	r24, r24
    6312:	11 f0       	breq	.+4      	; 0x6318 <read_allRegister+0x2e>
    6314:	d0 68       	ori	r29, 0x80	; 128
    6316:	0f 5f       	subi	r16, 0xFF	; 255
    6318:	17 30       	cpi	r17, 0x07	; 7
    631a:	41 f4       	brne	.+16     	; 0x632c <read_allRegister+0x42>
    631c:	e1 14       	cp	r14, r1
    631e:	f1 04       	cpc	r15, r1
    6320:	29 f0       	breq	.+10     	; 0x632c <read_allRegister+0x42>
    6322:	f7 01       	movw	r30, r14
    6324:	d0 83       	st	Z, r29
    6326:	c7 01       	movw	r24, r14
    6328:	01 96       	adiw	r24, 0x01	; 1
    632a:	7c 01       	movw	r14, r24
    632c:	cf 5f       	subi	r28, 0xFF	; 255
    632e:	c0 34       	cpi	r28, 0x40	; 64
    6330:	38 f3       	brcs	.-50     	; 0x6300 <read_allRegister+0x16>
    6332:	80 2f       	mov	r24, r16
    6334:	df 91       	pop	r29
    6336:	cf 91       	pop	r28
    6338:	1f 91       	pop	r17
    633a:	0f 91       	pop	r16
    633c:	ff 90       	pop	r15
    633e:	ef 90       	pop	r14
    6340:	08 95       	ret

00006342 <register_onOff>:
    6342:	cf 93       	push	r28
    6344:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    6348:	89 17       	cp	r24, r25
    634a:	f0 f4       	brcc	.+60     	; 0x6388 <register_onOff+0x46>
    634c:	c6 2f       	mov	r28, r22
    634e:	02 df       	rcall	.-508    	; 0x6154 <regNr_to_moduleBit>
    6350:	81 11       	cpse	r24, r1
    6352:	1a c0       	rjmp	.+52     	; 0x6388 <register_onOff+0x46>
    6354:	89 2f       	mov	r24, r25
    6356:	8f 71       	andi	r24, 0x1F	; 31
    6358:	92 95       	swap	r25
    635a:	96 95       	lsr	r25
    635c:	97 70       	andi	r25, 0x07	; 7
    635e:	c0 ff       	sbrs	r28, 0
    6360:	0a c0       	rjmp	.+20     	; 0x6376 <register_onOff+0x34>
    6362:	61 e0       	ldi	r22, 0x01	; 1
    6364:	70 e0       	ldi	r23, 0x00	; 0
    6366:	02 c0       	rjmp	.+4      	; 0x636c <register_onOff+0x2a>
    6368:	66 0f       	add	r22, r22
    636a:	77 1f       	adc	r23, r23
    636c:	9a 95       	dec	r25
    636e:	e2 f7       	brpl	.-8      	; 0x6368 <register_onOff+0x26>
    6370:	0e 94 64 13 	call	0x26c8	; 0x26c8 <pipe_on>
    6374:	09 c0       	rjmp	.+18     	; 0x6388 <register_onOff+0x46>
    6376:	61 e0       	ldi	r22, 0x01	; 1
    6378:	70 e0       	ldi	r23, 0x00	; 0
    637a:	02 c0       	rjmp	.+4      	; 0x6380 <register_onOff+0x3e>
    637c:	66 0f       	add	r22, r22
    637e:	77 1f       	adc	r23, r23
    6380:	9a 95       	dec	r25
    6382:	e2 f7       	brpl	.-8      	; 0x637c <register_onOff+0x3a>
    6384:	0e 94 73 13 	call	0x26e6	; 0x26e6 <pipe_off>
    6388:	cf 91       	pop	r28
    638a:	08 95       	ret

0000638c <midi_RegisterMatchProgram>:
		eeprom_UpdateProg();
	}
	return result;
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
    638c:	ff 92       	push	r15
    638e:	0f 93       	push	r16
    6390:	1f 93       	push	r17
    6392:	cf 93       	push	r28
    6394:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	8c 01       	movw	r16, r24
    639a:	00 0f       	add	r16, r16
    639c:	11 1f       	adc	r17, r17
    639e:	88 0f       	add	r24, r24
    63a0:	99 1f       	adc	r25, r25
    63a2:	88 0f       	add	r24, r24
    63a4:	99 1f       	adc	r25, r25
    63a6:	88 0f       	add	r24, r24
    63a8:	99 1f       	adc	r25, r25
    63aa:	08 0f       	add	r16, r24
    63ac:	19 1f       	adc	r17, r25
    63ae:	02 57       	subi	r16, 0x72	; 114
    63b0:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    63b2:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    63b4:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    63b6:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    63b8:	14 c0       	rjmp	.+40     	; 0x63e2 <midi_RegisterMatchProgram+0x56>
		if ((i & 0x07) == 0) {
    63ba:	9c 2f       	mov	r25, r28
    63bc:	97 70       	andi	r25, 0x07	; 7
    63be:	21 f4       	brne	.+8      	; 0x63c8 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    63c0:	f8 01       	movw	r30, r16
    63c2:	d0 81       	ld	r29, Z
    63c4:	0f 5f       	subi	r16, 0xFF	; 255
    63c6:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    63c8:	8c 2f       	mov	r24, r28
    63ca:	43 df       	rcall	.-378    	; 0x6252 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    63cc:	d0 ff       	sbrs	r29, 0
    63ce:	03 c0       	rjmp	.+6      	; 0x63d6 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
    63d0:	81 fd       	sbrc	r24, 1
    63d2:	05 c0       	rjmp	.+10     	; 0x63de <midi_RegisterMatchProgram+0x52>
    63d4:	0c c0       	rjmp	.+24     	; 0x63ee <midi_RegisterMatchProgram+0x62>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
    63d6:	81 fd       	sbrc	r24, 1
    63d8:	0c c0       	rjmp	.+24     	; 0x63f2 <midi_RegisterMatchProgram+0x66>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg & REGISTER_READ_HWIN) {
    63da:	80 fd       	sbrc	r24, 0
				// is set by HW
				result++; // inc return val
    63dc:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    63de:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    63e0:	cf 5f       	subi	r28, 0xFF	; 255
    63e2:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <registerCount>
    63e6:	c9 17       	cp	r28, r25
    63e8:	40 f3       	brcs	.-48     	; 0x63ba <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    63ea:	8f 2d       	mov	r24, r15
    63ec:	03 c0       	rjmp	.+6      	; 0x63f4 <midi_RegisterMatchProgram+0x68>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (!(actualReg & REGISTER_READ_SWOUT)) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    63ee:	8f ef       	ldi	r24, 0xFF	; 255
    63f0:	01 c0       	rjmp	.+2      	; 0x63f4 <midi_RegisterMatchProgram+0x68>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg & REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    63f2:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    63f4:	df 91       	pop	r29
    63f6:	cf 91       	pop	r28
    63f8:	1f 91       	pop	r17
    63fa:	0f 91       	pop	r16
    63fc:	ff 90       	pop	r15
    63fe:	08 95       	ret

00006400 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    6400:	90 e0       	ldi	r25, 0x00	; 0
    6402:	fc 01       	movw	r30, r24
    6404:	ee 0f       	add	r30, r30
    6406:	ff 1f       	adc	r31, r31
    6408:	88 0f       	add	r24, r24
    640a:	99 1f       	adc	r25, r25
    640c:	88 0f       	add	r24, r24
    640e:	99 1f       	adc	r25, r25
    6410:	88 0f       	add	r24, r24
    6412:	99 1f       	adc	r25, r25
    6414:	e8 0f       	add	r30, r24
    6416:	f9 1f       	adc	r31, r25
    6418:	e2 57       	subi	r30, 0x72	; 114
    641a:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    641c:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    641e:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    6420:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6422:	09 c0       	rjmp	.+18     	; 0x6436 <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    6424:	39 2f       	mov	r19, r25
    6426:	37 70       	andi	r19, 0x07	; 7
    6428:	11 f4       	brne	.+4      	; 0x642e <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    642a:	20 81       	ld	r18, Z
    642c:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    642e:	20 fd       	sbrc	r18, 0
			result++;
    6430:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    6432:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6434:	9f 5f       	subi	r25, 0xFF	; 255
    6436:	30 91 36 08 	lds	r19, 0x0836	; 0x800836 <registerCount>
    643a:	93 17       	cp	r25, r19
    643c:	98 f3       	brcs	.-26     	; 0x6424 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    643e:	08 95       	ret

00006440 <midiSendRegOn>:

void midiSendRegOn(uint8_t regNr){
    6440:	cf 93       	push	r28
	if ((midi_ccReg.ccOutRegOn <= REGISTER_MAX_CC) && (midiThrough.OutChannel <= MIDI_CHANNEL_16)){
    6442:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <midi_ccReg+0x2>
    6446:	99 23       	and	r25, r25
    6448:	7c f0       	brlt	.+30     	; 0x6468 <midiSendRegOn+0x28>
    644a:	60 91 4d 08 	lds	r22, 0x084D	; 0x80084d <midiThrough+0x1>
    644e:	60 31       	cpi	r22, 0x10	; 16
    6450:	58 f4       	brcc	.+22     	; 0x6468 <midiSendRegOn+0x28>
    6452:	c8 2f       	mov	r28, r24
		serial1MIDISendCmd(MIDI_CTRLCHG,midiThrough.OutChannel);
    6454:	80 eb       	ldi	r24, 0xB0	; 176
    6456:	0e 94 63 3a 	call	0x74c6	; 0x74c6 <serial1MIDISendCmd>
		serial1MIDISendData(midi_ccReg.ccOutRegOn);
    645a:	80 91 5c 09 	lds	r24, 0x095C	; 0x80095c <midi_ccReg+0x2>
    645e:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial1MIDISendData>
		serial1MIDISendData(regNr);
    6462:	8c 2f       	mov	r24, r28
    6464:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial1MIDISendData>
	}
}
    6468:	cf 91       	pop	r28
    646a:	08 95       	ret

0000646c <midiSendRegOff>:

void midiSendRegOff(uint8_t regNr){
    646c:	cf 93       	push	r28
	if ((midi_ccReg.ccOutRegOff <= REGISTER_MAX_CC) && (midiThrough.OutChannel <= MIDI_CHANNEL_16)){
    646e:	90 91 5d 09 	lds	r25, 0x095D	; 0x80095d <midi_ccReg+0x3>
    6472:	99 23       	and	r25, r25
    6474:	7c f0       	brlt	.+30     	; 0x6494 <midiSendRegOff+0x28>
    6476:	60 91 4d 08 	lds	r22, 0x084D	; 0x80084d <midiThrough+0x1>
    647a:	60 31       	cpi	r22, 0x10	; 16
    647c:	58 f4       	brcc	.+22     	; 0x6494 <midiSendRegOff+0x28>
    647e:	c8 2f       	mov	r28, r24
		serial1MIDISendCmd(MIDI_CTRLCHG,midiThrough.OutChannel);
    6480:	80 eb       	ldi	r24, 0xB0	; 176
    6482:	0e 94 63 3a 	call	0x74c6	; 0x74c6 <serial1MIDISendCmd>
		serial1MIDISendData(midi_ccReg.ccOutRegOff);
    6486:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <midi_ccReg+0x3>
    648a:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial1MIDISendData>
		serial1MIDISendData(regNr);
    648e:	8c 2f       	mov	r24, r28
    6490:	0e 94 79 3a 	call	0x74f2	; 0x74f2 <serial1MIDISendData>
	}
}
    6494:	cf 91       	pop	r28
    6496:	08 95       	ret

00006498 <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    6498:	90 91 1c 08 	lds	r25, 0x081C	; 0x80081c <prog_Display>
    649c:	98 17       	cp	r25, r24
    649e:	29 f0       	breq	.+10     	; 0x64aa <prog_set+0x12>
		prog_Display = prog;
    64a0:	80 93 1c 08 	sts	0x081C, r24	; 0x80081c <prog_Display>
		prog_UpdDisplay = TRUE;
    64a4:	8f ef       	ldi	r24, 0xFF	; 255
    64a6:	80 93 35 08 	sts	0x0835, r24	; 0x800835 <prog_UpdDisplay>
    64aa:	08 95       	ret

000064ac <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    64ac:	bf 92       	push	r11
    64ae:	cf 92       	push	r12
    64b0:	df 92       	push	r13
    64b2:	ef 92       	push	r14
    64b4:	ff 92       	push	r15
    64b6:	0f 93       	push	r16
    64b8:	1f 93       	push	r17
    64ba:	cf 93       	push	r28
    64bc:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    64be:	80 34       	cpi	r24, 0x40	; 64
    64c0:	08 f0       	brcs	.+2      	; 0x64c4 <program_toRegister+0x18>
    64c2:	41 c0       	rjmp	.+130    	; 0x6546 <program_toRegister+0x9a>
    64c4:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    64c6:	e8 df       	rcall	.-48     	; 0x6498 <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    64c8:	f1 2c       	mov	r15, r1
    64ca:	f7 01       	movw	r30, r14
    64cc:	ee 0f       	add	r30, r30
    64ce:	ff 1f       	adc	r31, r31
    64d0:	c7 01       	movw	r24, r14
    64d2:	88 0f       	add	r24, r24
    64d4:	99 1f       	adc	r25, r25
    64d6:	88 0f       	add	r24, r24
    64d8:	99 1f       	adc	r25, r25
    64da:	88 0f       	add	r24, r24
    64dc:	99 1f       	adc	r25, r25
    64de:	e8 0f       	add	r30, r24
    64e0:	f9 1f       	adc	r31, r25
    64e2:	e2 57       	subi	r30, 0x72	; 114
    64e4:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    64e6:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    64e8:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    64ea:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    64ec:	18 c0       	rjmp	.+48     	; 0x651e <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    64ee:	6f 01       	movw	r12, r30
    64f0:	8f ef       	ldi	r24, 0xFF	; 255
    64f2:	c8 1a       	sub	r12, r24
    64f4:	d8 0a       	sbc	r13, r24
    64f6:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    64f8:	d0 e0       	ldi	r29, 0x00	; 0
    64fa:	0d c0       	rjmp	.+26     	; 0x6516 <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    64fc:	8c 2f       	mov	r24, r28
    64fe:	81 70       	andi	r24, 0x01	; 1
    6500:	c0 fd       	sbrc	r28, 0
					result++;
    6502:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    6504:	61 e0       	ldi	r22, 0x01	; 1
    6506:	81 11       	cpse	r24, r1
    6508:	01 c0       	rjmp	.+2      	; 0x650c <program_toRegister+0x60>
    650a:	60 e0       	ldi	r22, 0x00	; 0
    650c:	81 2f       	mov	r24, r17
    650e:	19 df       	rcall	.-462    	; 0x6342 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    6510:	c6 95       	lsr	r28
				regNr++;
    6512:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    6514:	df 5f       	subi	r29, 0xFF	; 255
    6516:	d8 30       	cpi	r29, 0x08	; 8
    6518:	88 f3       	brcs	.-30     	; 0x64fc <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    651a:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    651c:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    651e:	87 e0       	ldi	r24, 0x07	; 7
    6520:	8b 15       	cp	r24, r11
    6522:	28 f7       	brcc	.-54     	; 0x64ee <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    6524:	f7 01       	movw	r30, r14
    6526:	ee 0f       	add	r30, r30
    6528:	ff 1f       	adc	r31, r31
    652a:	ee 0c       	add	r14, r14
    652c:	ff 1c       	adc	r15, r15
    652e:	ee 0c       	add	r14, r14
    6530:	ff 1c       	adc	r15, r15
    6532:	ee 0c       	add	r14, r14
    6534:	ff 1c       	adc	r15, r15
    6536:	ee 0d       	add	r30, r14
    6538:	ff 1d       	adc	r31, r15
    653a:	e2 57       	subi	r30, 0x72	; 114
    653c:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    653e:	80 85       	ldd	r24, Z+8	; 0x08
    6540:	91 85       	ldd	r25, Z+9	; 0x09
    6542:	63 dd       	rcall	.-1338   	; 0x600a <setAllCouplers>
    6544:	01 c0       	rjmp	.+2      	; 0x6548 <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    6546:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    6548:	80 2f       	mov	r24, r16
    654a:	df 91       	pop	r29
    654c:	cf 91       	pop	r28
    654e:	1f 91       	pop	r17
    6550:	0f 91       	pop	r16
    6552:	ff 90       	pop	r15
    6554:	ef 90       	pop	r14
    6556:	df 90       	pop	r13
    6558:	cf 90       	pop	r12
    655a:	bf 90       	pop	r11
    655c:	08 95       	ret

0000655e <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    655e:	cf 93       	push	r28
    6560:	c6 2f       	mov	r28, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6562:	90 91 58 09 	lds	r25, 0x0958	; 0x800958 <midi_Setting+0x2>
    6566:	91 11       	cpse	r25, r1
    6568:	14 c0       	rjmp	.+40     	; 0x6592 <midi_ProgramChange+0x34>
    656a:	21 c0       	rjmp	.+66     	; 0x65ae <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    656c:	e8 2f       	mov	r30, r24
    656e:	f0 e0       	ldi	r31, 0x00	; 0
    6570:	ee 0f       	add	r30, r30
    6572:	ff 1f       	adc	r31, r31
    6574:	ee 0f       	add	r30, r30
    6576:	ff 1f       	adc	r31, r31
    6578:	e9 0f       	add	r30, r25
    657a:	f1 1d       	adc	r31, r1
    657c:	ee 0f       	add	r30, r30
    657e:	ff 1f       	adc	r31, r31
    6580:	ee 0f       	add	r30, r30
    6582:	ff 1f       	adc	r31, r31
    6584:	e2 5b       	subi	r30, 0xB2	; 178
    6586:	f7 4f       	sbci	r31, 0xF7	; 247
    6588:	20 81       	ld	r18, Z
    658a:	2f 3f       	cpi	r18, 0xFF	; 255
    658c:	39 f4       	brne	.+14     	; 0x659c <midi_ProgramChange+0x3e>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    658e:	9f 5f       	subi	r25, 0xFF	; 255
    6590:	01 c0       	rjmp	.+2      	; 0x6594 <midi_ProgramChange+0x36>
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	94 30       	cpi	r25, 0x04	; 4
    6596:	50 f3       	brcs	.-44     	; 0x656c <midi_ProgramChange+0xe>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    6598:	80 e0       	ldi	r24, 0x00	; 0
    659a:	01 c0       	rjmp	.+2      	; 0x659e <midi_ProgramChange+0x40>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    659c:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    659e:	8f 3f       	cpi	r24, 0xFF	; 255
    65a0:	31 f4       	brne	.+12     	; 0x65ae <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    65a2:	8c 2f       	mov	r24, r28
    65a4:	83 df       	rcall	.-250    	; 0x64ac <program_toRegister>
			prog_set(program);
    65a6:	8c 2f       	mov	r24, r28
    65a8:	77 df       	rcall	.-274    	; 0x6498 <prog_set>
			midiLastProgram = program;
    65aa:	c0 93 20 02 	sts	0x0220, r28	; 0x800220 <midiLastProgram>
		}
	}
	// V 0.58 SW MIDI Through
	//if (channel == midiThrough.InChannel){
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    65ae:	60 91 4d 08 	lds	r22, 0x084D	; 0x80084d <midiThrough+0x1>
    65b2:	6f 3f       	cpi	r22, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISendCmd(MIDI_PRGCHG, midiThrough.OutChannel);
    65b4:	21 f0       	breq	.+8      	; 0x65be <midi_ProgramChange+0x60>
    65b6:	80 ec       	ldi	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISendData(program);
    65b8:	86 d7       	rcall	.+3852   	; 0x74c6 <serial1MIDISendCmd>
    65ba:	8c 2f       	mov	r24, r28
    65bc:	9a d7       	rcall	.+3892   	; 0x74f2 <serial1MIDISendData>
		}
	//} V 0.73 send program change to "thru" out always
}
    65be:	cf 91       	pop	r28
    65c0:	08 95       	ret

000065c2 <midi_resetRegisters>:


void midi_resetRegisters(){
    65c2:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    65c4:	c0 e0       	ldi	r28, 0x00	; 0
    65c6:	06 c0       	rjmp	.+12     	; 0x65d4 <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    65c8:	8f ef       	ldi	r24, 0xFF	; 255
    65ca:	66 df       	rcall	.-308    	; 0x6498 <prog_set>
		register_onOff(i,REGISTER_OFF);
    65cc:	60 e0       	ldi	r22, 0x00	; 0
    65ce:	8c 2f       	mov	r24, r28
    65d0:	b8 de       	rcall	.-656    	; 0x6342 <register_onOff>
	//} V 0.73 send program change to "thru" out always
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    65d2:	cf 5f       	subi	r28, 0xFF	; 255
    65d4:	80 91 36 08 	lds	r24, 0x0836	; 0x800836 <registerCount>
    65d8:	c8 17       	cp	r28, r24
    65da:	b0 f3       	brcs	.-20     	; 0x65c8 <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    65dc:	cf 91       	pop	r28
    65de:	08 95       	ret

000065e0 <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    65e0:	0f 93       	push	r16
    65e2:	1f 93       	push	r17
    65e4:	cf 93       	push	r28
    65e6:	df 93       	push	r29
    65e8:	c8 2f       	mov	r28, r24
    65ea:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	// V0.76 reset register ouptu first
	midi_resetRegisters();
    65ec:	ea df       	rcall	.-44     	; 0x65c2 <midi_resetRegisters>
	module_WaitOutputInput2Cycles(); // now register read input is HW register only
    65ee:	0e 94 a1 10 	call	0x2142	; 0x2142 <module_WaitOutputInput2Cycles>
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    65f2:	c0 34       	cpi	r28, 0x40	; 64
    65f4:	90 f4       	brcc	.+36     	; 0x661a <register_toProgram+0x3a>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    65f6:	2c 2f       	mov	r18, r28
    65f8:	30 e0       	ldi	r19, 0x00	; 0
    65fa:	c9 01       	movw	r24, r18
    65fc:	88 0f       	add	r24, r24
    65fe:	99 1f       	adc	r25, r25
    6600:	22 0f       	add	r18, r18
    6602:	33 1f       	adc	r19, r19
    6604:	22 0f       	add	r18, r18
    6606:	33 1f       	adc	r19, r19
    6608:	22 0f       	add	r18, r18
    660a:	33 1f       	adc	r19, r19
    660c:	82 0f       	add	r24, r18
    660e:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    6610:	82 57       	subi	r24, 0x72	; 114
    6612:	96 4f       	sbci	r25, 0xF6	; 246
    6614:	6a de       	rcall	.-812    	; 0x62ea <read_allRegister>
    6616:	18 2f       	mov	r17, r24
    6618:	01 c0       	rjmp	.+2      	; 0x661c <register_toProgram+0x3c>
	}
	programMap[program].couplers = getAllCouplers().wordval;
    661a:	10 e0       	ldi	r17, 0x00	; 0
    661c:	d0 e0       	ldi	r29, 0x00	; 0
    661e:	dd dc       	rcall	.-1606   	; 0x5fda <getAllCouplers>
    6620:	9e 01       	movw	r18, r28
    6622:	22 0f       	add	r18, r18
    6624:	33 1f       	adc	r19, r19
    6626:	cc 0f       	add	r28, r28
    6628:	dd 1f       	adc	r29, r29
    662a:	cc 0f       	add	r28, r28
    662c:	dd 1f       	adc	r29, r29
    662e:	cc 0f       	add	r28, r28
    6630:	dd 1f       	adc	r29, r29
    6632:	c2 0f       	add	r28, r18
    6634:	d3 1f       	adc	r29, r19
    6636:	c2 57       	subi	r28, 0x72	; 114
    6638:	d6 4f       	sbci	r29, 0xF6	; 246
    663a:	99 87       	std	Y+9, r25	; 0x09
    663c:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    663e:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    6640:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <eeprom_UpdateProg>
	}
	return result;
}
    6644:	81 2f       	mov	r24, r17
    6646:	df 91       	pop	r29
    6648:	cf 91       	pop	r28
    664a:	1f 91       	pop	r17
    664c:	0f 91       	pop	r16
    664e:	08 95       	ret

00006650 <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display <= PROGR_MAX) {
    6650:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    6654:	80 34       	cpi	r24, 0x40	; 64
    6656:	c8 f4       	brcc	.+50     	; 0x668a <prog_toLcd+0x3a>
		lcd_putc('P');
    6658:	80 e5       	ldi	r24, 0x50	; 80
    665a:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
		lcd_putc('-');
    665e:	8d e2       	ldi	r24, 0x2D	; 45
    6660:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    6664:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    6668:	86 95       	lsr	r24
    666a:	86 95       	lsr	r24
    666c:	86 95       	lsr	r24
    666e:	87 70       	andi	r24, 0x07	; 7
    6670:	8f 5b       	subi	r24, 0xBF	; 191
    6672:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    6676:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <prog_Display>
    667a:	87 70       	andi	r24, 0x07	; 7
    667c:	8f 5c       	subi	r24, 0xCF	; 207
    667e:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
		lcd_putc(' ');
    6682:	80 e2       	ldi	r24, 0x20	; 32
    6684:	0c 94 91 14 	jmp	0x2922	; 0x2922 <lcd_putc>
    6688:	08 95       	ret
	} else {
		lcd_blank(5);
    668a:	85 e0       	ldi	r24, 0x05	; 5
    668c:	0c 94 cd 3e 	jmp	0x7d9a	; 0x7d9a <lcd_blank>
    6690:	08 95       	ret

00006692 <init_RegOut>:
RegOut_t reg_Out[REGOUT_LEN] = {{LCD_LINE1+1,'1',10,14},{LCD_LINE1+6,' ',15,18},
{LCD_LINE1+10,'2',20,24},{LCD_LINE1+15,' ',25,29},{LCD_LINE2+1,'P',0,4},{LCD_LINE2+6,' ',5,9},
{0,' ',REGISTER_NONE,REGISTER_NONE},{0,' ',REGISTER_NONE,REGISTER_NONE}};

void init_RegOut(){
	if (eeprom_ReadRegOut() == EE_LOAD_ERROR) {
    6692:	0e 94 ae 0c 	call	0x195c	; 0x195c <eeprom_ReadRegOut>
    6696:	8f 3f       	cpi	r24, 0xFF	; 255
    6698:	31 f4       	brne	.+12     	; 0x66a6 <init_RegOut+0x14>
		// load some default values for my organ -> alredy done in array declaration
		log_putError(LOG_CAT_EE,LOG_CATEE_REGOUT,0);	}
    669a:	40 e0       	ldi	r20, 0x00	; 0
    669c:	50 e0       	ldi	r21, 0x00	; 0
    669e:	69 e0       	ldi	r22, 0x09	; 9
    66a0:	81 e0       	ldi	r24, 0x01	; 1
    66a2:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <log_putError>
    66a6:	08 95       	ret

000066a8 <reg_toLCD>:
}

void reg_toLCD(uint8_t readHWonly){
    66a8:	ef 92       	push	r14
    66aa:	ff 92       	push	r15
    66ac:	0f 93       	push	r16
    66ae:	1f 93       	push	r17
    66b0:	cf 93       	push	r28
    66b2:	df 93       	push	r29
    66b4:	f8 2e       	mov	r15, r24
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    66b6:	e1 2c       	mov	r14, r1
    66b8:	70 c0       	rjmp	.+224    	; 0x679a <reg_toLCD+0xf2>
		lcd_goto(reg_Out[i].cursor);
    66ba:	0e 2d       	mov	r16, r14
    66bc:	10 e0       	ldi	r17, 0x00	; 0
    66be:	e8 01       	movw	r28, r16
    66c0:	cc 0f       	add	r28, r28
    66c2:	dd 1f       	adc	r29, r29
    66c4:	cc 0f       	add	r28, r28
    66c6:	dd 1f       	adc	r29, r29
    66c8:	c0 50       	subi	r28, 0x00	; 0
    66ca:	de 4f       	sbci	r29, 0xFE	; 254
    66cc:	88 81       	ld	r24, Y
    66ce:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    66d2:	89 81       	ldd	r24, Y+1	; 0x01
		if ((myChar > ' ') && (myChar <= 0x7F)) {
    66d4:	9f ed       	ldi	r25, 0xDF	; 223
    66d6:	98 0f       	add	r25, r24
    66d8:	9f 35       	cpi	r25, 0x5F	; 95
    66da:	28 f4       	brcc	.+10     	; 0x66e6 <reg_toLCD+0x3e>
			// only if valid char
			lcd_putc(myChar);
    66dc:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
			lcd_putc(' ');
    66e0:	80 e2       	ldi	r24, 0x20	; 32
    66e2:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
		}
		uint8_t reg = reg_Out[i].regStart;
    66e6:	f8 01       	movw	r30, r16
    66e8:	ee 0f       	add	r30, r30
    66ea:	ff 1f       	adc	r31, r31
    66ec:	ee 0f       	add	r30, r30
    66ee:	ff 1f       	adc	r31, r31
    66f0:	e0 50       	subi	r30, 0x00	; 0
    66f2:	fe 4f       	sbci	r31, 0xFE	; 254
    66f4:	c2 81       	ldd	r28, Z+2	; 0x02
		if (reg == REGISTER_NONE) {
    66f6:	cf 3f       	cpi	r28, 0xFF	; 255
    66f8:	09 f0       	breq	.+2      	; 0x66fc <reg_toLCD+0x54>
    66fa:	40 c0       	rjmp	.+128    	; 0x677c <reg_toLCD+0xd4>
    66fc:	52 c0       	rjmp	.+164    	; 0x67a2 <reg_toLCD+0xfa>
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
			if (reg == reg_Out[i].regEnd) {
    66fe:	c8 13       	cpse	r28, r24
    6700:	19 c0       	rjmp	.+50     	; 0x6734 <reg_toLCD+0x8c>
				// only one register left for out
				if (readHWonly == TRUE) {
    6702:	8f ef       	ldi	r24, 0xFF	; 255
    6704:	f8 12       	cpse	r15, r24
    6706:	0b c0       	rjmp	.+22     	; 0x671e <reg_toLCD+0x76>
					lcd_putc(LCD_CHAR_REG_OFF+ ((get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0));
    6708:	8c 2f       	mov	r24, r28
    670a:	a3 dd       	rcall	.-1210   	; 0x6252 <get_RegisterStatus>
    670c:	80 ff       	sbrs	r24, 0
    670e:	02 c0       	rjmp	.+4      	; 0x6714 <reg_toLCD+0x6c>
    6710:	8b e0       	ldi	r24, 0x0B	; 11
    6712:	01 c0       	rjmp	.+2      	; 0x6716 <reg_toLCD+0x6e>
    6714:	8a e0       	ldi	r24, 0x0A	; 10
    6716:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    671a:	dc 2f       	mov	r29, r28
    671c:	2d c0       	rjmp	.+90     	; 0x6778 <reg_toLCD+0xd0>
				} else {
					lcd_putc(LCD_CHAR_REG_OFF+  ((get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0));
    671e:	8c 2f       	mov	r24, r28
    6720:	98 dd       	rcall	.-1232   	; 0x6252 <get_RegisterStatus>
    6722:	81 ff       	sbrs	r24, 1
    6724:	02 c0       	rjmp	.+4      	; 0x672a <reg_toLCD+0x82>
    6726:	8b e0       	ldi	r24, 0x0B	; 11
    6728:	01 c0       	rjmp	.+2      	; 0x672c <reg_toLCD+0x84>
    672a:	8a e0       	ldi	r24, 0x0A	; 10
    672c:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    6730:	dc 2f       	mov	r29, r28
    6732:	22 c0       	rjmp	.+68     	; 0x6778 <reg_toLCD+0xd0>
				}
			} else {
				// at least 2 register left
				if (readHWonly == TRUE) {
    6734:	8f ef       	ldi	r24, 0xFF	; 255
    6736:	f8 12       	cpse	r15, r24
    6738:	11 c0       	rjmp	.+34     	; 0x675c <reg_toLCD+0xb4>
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_HWIN) ? 2 : 0;
    673a:	d1 e0       	ldi	r29, 0x01	; 1
    673c:	dc 0f       	add	r29, r28
    673e:	8c 2f       	mov	r24, r28
    6740:	88 dd       	rcall	.-1264   	; 0x6252 <get_RegisterStatus>
    6742:	80 ff       	sbrs	r24, 0
    6744:	02 c0       	rjmp	.+4      	; 0x674a <reg_toLCD+0xa2>
    6746:	c2 e0       	ldi	r28, 0x02	; 2
    6748:	01 c0       	rjmp	.+2      	; 0x674c <reg_toLCD+0xa4>
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_HWIN) ? 1 : 0;
    674a:	c0 e0       	ldi	r28, 0x00	; 0
    674c:	8d 2f       	mov	r24, r29
    674e:	81 dd       	rcall	.-1278   	; 0x6252 <get_RegisterStatus>
    6750:	81 70       	andi	r24, 0x01	; 1
    6752:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    6754:	84 5f       	subi	r24, 0xF4	; 244
    6756:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
				} else {
					uint8_t addChar = (get_RegisterStatus(reg++) & REGISTER_READ_SWOUT) ? 2 : 0;
    675a:	0e c0       	rjmp	.+28     	; 0x6778 <reg_toLCD+0xd0>
    675c:	d1 e0       	ldi	r29, 0x01	; 1
    675e:	dc 0f       	add	r29, r28
    6760:	8c 2f       	mov	r24, r28
    6762:	77 dd       	rcall	.-1298   	; 0x6252 <get_RegisterStatus>
    6764:	c8 2f       	mov	r28, r24
					addChar += (get_RegisterStatus(reg) & REGISTER_READ_SWOUT) ? 1 : 0;
    6766:	c2 70       	andi	r28, 0x02	; 2
    6768:	8d 2f       	mov	r24, r29
    676a:	73 dd       	rcall	.-1306   	; 0x6252 <get_RegisterStatus>
    676c:	86 95       	lsr	r24
    676e:	81 70       	andi	r24, 0x01	; 1
    6770:	8c 0f       	add	r24, r28
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    6772:	84 5f       	subi	r24, 0xF4	; 244
    6774:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
				}
			}
			reg++;
    6778:	c1 e0       	ldi	r28, 0x01	; 1
    677a:	cd 0f       	add	r28, r29
		}
		uint8_t reg = reg_Out[i].regStart;
		if (reg == REGISTER_NONE) {
			break;
		}
		while (reg <= reg_Out[i].regEnd) {
    677c:	f8 01       	movw	r30, r16
    677e:	ee 0f       	add	r30, r30
    6780:	ff 1f       	adc	r31, r31
    6782:	ee 0f       	add	r30, r30
    6784:	ff 1f       	adc	r31, r31
    6786:	e0 50       	subi	r30, 0x00	; 0
    6788:	fe 4f       	sbci	r31, 0xFE	; 254
    678a:	83 81       	ldd	r24, Z+3	; 0x03
    678c:	8c 17       	cp	r24, r28
    678e:	08 f0       	brcs	.+2      	; 0x6792 <reg_toLCD+0xea>
    6790:	b6 cf       	rjmp	.-148    	; 0x66fe <reg_toLCD+0x56>
					lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
				}
			}
			reg++;
		}
		lcd_putc(' ');
    6792:	80 e2       	ldi	r24, 0x20	; 32
    6794:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
		log_putError(LOG_CAT_EE,LOG_CATEE_REGOUT,0);	}
}

void reg_toLCD(uint8_t readHWonly){
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6798:	e3 94       	inc	r14
    679a:	87 e0       	ldi	r24, 0x07	; 7
    679c:	8e 15       	cp	r24, r14
    679e:	08 f0       	brcs	.+2      	; 0x67a2 <reg_toLCD+0xfa>
    67a0:	8c cf       	rjmp	.-232    	; 0x66ba <reg_toLCD+0x12>
			}
			reg++;
		}
		lcd_putc(' ');
	}
}
    67a2:	df 91       	pop	r29
    67a4:	cf 91       	pop	r28
    67a6:	1f 91       	pop	r17
    67a8:	0f 91       	pop	r16
    67aa:	ff 90       	pop	r15
    67ac:	ef 90       	pop	r14
    67ae:	08 95       	ret

000067b0 <reg_ClearOnLCD>:

void reg_ClearOnLCD(){
    67b0:	1f 93       	push	r17
    67b2:	cf 93       	push	r28
    67b4:	df 93       	push	r29
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    67b6:	10 e0       	ldi	r17, 0x00	; 0
    67b8:	1e c0       	rjmp	.+60     	; 0x67f6 <reg_ClearOnLCD+0x46>
		lcd_goto(reg_Out[i].cursor);
    67ba:	c1 2f       	mov	r28, r17
    67bc:	d0 e0       	ldi	r29, 0x00	; 0
    67be:	cc 0f       	add	r28, r28
    67c0:	dd 1f       	adc	r29, r29
    67c2:	cc 0f       	add	r28, r28
    67c4:	dd 1f       	adc	r29, r29
    67c6:	c0 50       	subi	r28, 0x00	; 0
    67c8:	de 4f       	sbci	r29, 0xFE	; 254
    67ca:	88 81       	ld	r24, Y
    67cc:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    67d0:	29 81       	ldd	r18, Y+1	; 0x01
		uint8_t spaceCount;
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
    67d2:	8b 81       	ldd	r24, Y+3	; 0x03
    67d4:	9a 81       	ldd	r25, Y+2	; 0x02
    67d6:	89 1b       	sub	r24, r25
    67d8:	8f 5f       	subi	r24, 0xFF	; 255
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
    67da:	90 e0       	ldi	r25, 0x00	; 0
    67dc:	01 96       	adiw	r24, 0x01	; 1
    67de:	95 95       	asr	r25
    67e0:	87 95       	ror	r24
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
    67e2:	21 52       	subi	r18, 0x21	; 33
    67e4:	2f 35       	cpi	r18, 0x5F	; 95
    67e6:	10 f4       	brcc	.+4      	; 0x67ec <reg_ClearOnLCD+0x3c>
    67e8:	22 e0       	ldi	r18, 0x02	; 2
    67ea:	01 c0       	rjmp	.+2      	; 0x67ee <reg_ClearOnLCD+0x3e>
    67ec:	20 e0       	ldi	r18, 0x00	; 0
		lcd_blank(spaceCount);
    67ee:	82 0f       	add	r24, r18
    67f0:	0e 94 cd 3e 	call	0x7d9a	; 0x7d9a <lcd_blank>
		lcd_putc(' ');
	}
}

void reg_ClearOnLCD(){
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    67f4:	1f 5f       	subi	r17, 0xFF	; 255
    67f6:	18 30       	cpi	r17, 0x08	; 8
    67f8:	00 f3       	brcs	.-64     	; 0x67ba <reg_ClearOnLCD+0xa>
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
		lcd_blank(spaceCount);
	}
}
    67fa:	df 91       	pop	r29
    67fc:	cf 91       	pop	r28
    67fe:	1f 91       	pop	r17
    6800:	08 95       	ret

00006802 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6802:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    6804:	ee e4       	ldi	r30, 0x4E	; 78
    6806:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6808:	07 c0       	rjmp	.+14     	; 0x6818 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    680a:	8f ef       	ldi	r24, 0xFF	; 255
    680c:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    680e:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    6810:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    6812:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    6814:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6816:	91 50       	subi	r25, 0x01	; 1
    6818:	91 11       	cpse	r25, r1
    681a:	f7 cf       	rjmp	.-18     	; 0x680a <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    681c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <eeprom_ReadMidiInMap>
    6820:	8f 3f       	cpi	r24, 0xFF	; 255
    6822:	01 f5       	brne	.+64     	; 0x6864 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6824:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    6828:	ee e4       	ldi	r30, 0x4E	; 78
    682a:	f8 e0       	ldi	r31, 0x08	; 8
    682c:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    682e:	84 e2       	ldi	r24, 0x24	; 36
    6830:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    6832:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6834:	98 e3       	ldi	r25, 0x38	; 56
    6836:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    6838:	21 e0       	ldi	r18, 0x01	; 1
    683a:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    683c:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    683e:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6840:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    6842:	22 e0       	ldi	r18, 0x02	; 2
    6844:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    6846:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    6848:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    684a:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    684c:	93 e0       	ldi	r25, 0x03	; 3
    684e:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    6850:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    6852:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    6854:	8e e1       	ldi	r24, 0x1E	; 30
    6856:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6858:	40 e0       	ldi	r20, 0x00	; 0
    685a:	50 e0       	ldi	r21, 0x00	; 0
    685c:	61 e0       	ldi	r22, 0x01	; 1
    685e:	81 e0       	ldi	r24, 0x01	; 1
    6860:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    6864:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <eeprom_ReadMidiThrough>
    6868:	8f 3f       	cpi	r24, 0xFF	; 255
    686a:	51 f4       	brne	.+20     	; 0x6880 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    686c:	ec e4       	ldi	r30, 0x4C	; 76
    686e:	f8 e0       	ldi	r31, 0x08	; 8
    6870:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    6872:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    6874:	40 e0       	ldi	r20, 0x00	; 0
    6876:	50 e0       	ldi	r21, 0x00	; 0
    6878:	61 e0       	ldi	r22, 0x01	; 1
    687a:	81 e0       	ldi	r24, 0x01	; 1
    687c:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <log_putError>
    6880:	08 95       	ret

00006882 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6882:	20 e0       	ldi	r18, 0x00	; 0
    6884:	09 c0       	rjmp	.+18     	; 0x6898 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    6886:	88 0f       	add	r24, r24
    6888:	99 1f       	adc	r25, r25
    688a:	fc 01       	movw	r30, r24
    688c:	e2 5b       	subi	r30, 0xB2	; 178
    688e:	f6 4f       	sbci	r31, 0xF6	; 246
    6890:	8f ef       	ldi	r24, 0xFF	; 255
    6892:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    6894:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    6896:	2f 5f       	subi	r18, 0xFF	; 255
    6898:	82 2f       	mov	r24, r18
    689a:	90 e0       	ldi	r25, 0x00	; 0
    689c:	00 97       	sbiw	r24, 0x00	; 0
    689e:	99 f7       	brne	.-26     	; 0x6886 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    68a0:	0e 94 86 0b 	call	0x170c	; 0x170c <eeprom_ReadMidiOutMap>
    68a4:	8f 3f       	cpi	r24, 0xFF	; 255
    68a6:	b1 f4       	brne	.+44     	; 0x68d4 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    68a8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    68ac:	ee e4       	ldi	r30, 0x4E	; 78
    68ae:	f9 e0       	ldi	r31, 0x09	; 9
    68b0:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    68b2:	91 e0       	ldi	r25, 0x01	; 1
    68b4:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    68b6:	92 e0       	ldi	r25, 0x02	; 2
    68b8:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    68ba:	93 e0       	ldi	r25, 0x03	; 3
    68bc:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    68be:	e6 e5       	ldi	r30, 0x56	; 86
    68c0:	f9 e0       	ldi	r31, 0x09	; 9
    68c2:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    68c4:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    68c6:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    68c8:	40 e0       	ldi	r20, 0x00	; 0
    68ca:	50 e0       	ldi	r21, 0x00	; 0
    68cc:	62 e0       	ldi	r22, 0x02	; 2
    68ce:	81 e0       	ldi	r24, 0x01	; 1
    68d0:	0c 94 c0 17 	jmp	0x2f80	; 0x2f80 <log_putError>
    68d4:	08 95       	ret

000068d6 <Manual_to_MidiNote>:
			serial1MIDISendData(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    68d6:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    68d8:	8f ef       	ldi	r24, 0xFF	; 255
    68da:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    68dc:	e4 30       	cpi	r30, 0x04	; 4
    68de:	50 f4       	brcc	.+20     	; 0x68f4 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    68e0:	f0 e0       	ldi	r31, 0x00	; 0
    68e2:	ee 0f       	add	r30, r30
    68e4:	ff 1f       	adc	r31, r31
    68e6:	e2 5b       	subi	r30, 0xB2	; 178
    68e8:	f6 4f       	sbci	r31, 0xF6	; 246
    68ea:	20 81       	ld	r18, Z
    68ec:	2f 3f       	cpi	r18, 0xFF	; 255
    68ee:	11 f0       	breq	.+4      	; 0x68f4 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    68f0:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    68f2:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    68f4:	08 95       	ret

000068f6 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    68f6:	70 e0       	ldi	r23, 0x00	; 0
    68f8:	52 c0       	rjmp	.+164    	; 0x699e <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    68fa:	87 2f       	mov	r24, r23
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	24 2f       	mov	r18, r20
    6900:	30 e0       	ldi	r19, 0x00	; 0
    6902:	f9 01       	movw	r30, r18
    6904:	ee 0f       	add	r30, r30
    6906:	ff 1f       	adc	r31, r31
    6908:	df 01       	movw	r26, r30
    690a:	a2 0f       	add	r26, r18
    690c:	b3 1f       	adc	r27, r19
    690e:	fc 01       	movw	r30, r24
    6910:	ee 0f       	add	r30, r30
    6912:	ff 1f       	adc	r31, r31
    6914:	e8 0f       	add	r30, r24
    6916:	f9 1f       	adc	r31, r25
    6918:	ee 0f       	add	r30, r30
    691a:	ff 1f       	adc	r31, r31
    691c:	ee 0f       	add	r30, r30
    691e:	ff 1f       	adc	r31, r31
    6920:	ea 0f       	add	r30, r26
    6922:	fb 1f       	adc	r31, r27
    6924:	e2 5a       	subi	r30, 0xA2	; 162
    6926:	f6 4f       	sbci	r31, 0xF6	; 246
    6928:	a0 81       	ld	r26, Z
    692a:	af 3f       	cpi	r26, 0xFF	; 255
    692c:	d9 f0       	breq	.+54     	; 0x6964 <Midi_updateManualRange+0x6e>
    692e:	f9 01       	movw	r30, r18
    6930:	ee 0f       	add	r30, r30
    6932:	ff 1f       	adc	r31, r31
    6934:	e2 0f       	add	r30, r18
    6936:	f3 1f       	adc	r31, r19
    6938:	9c 01       	movw	r18, r24
    693a:	22 0f       	add	r18, r18
    693c:	33 1f       	adc	r19, r19
    693e:	28 0f       	add	r18, r24
    6940:	39 1f       	adc	r19, r25
    6942:	22 0f       	add	r18, r18
    6944:	33 1f       	adc	r19, r19
    6946:	22 0f       	add	r18, r18
    6948:	33 1f       	adc	r19, r19
    694a:	e2 0f       	add	r30, r18
    694c:	f3 1f       	adc	r31, r19
    694e:	e2 5a       	subi	r30, 0xA2	; 162
    6950:	f6 4f       	sbci	r31, 0xF6	; 246
    6952:	21 81       	ldd	r18, Z+1	; 0x01
    6954:	2f 3f       	cpi	r18, 0xFF	; 255
    6956:	31 f0       	breq	.+12     	; 0x6964 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    6958:	a6 17       	cp	r26, r22
    695a:	08 f4       	brcc	.+2      	; 0x695e <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    695c:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    695e:	52 17       	cp	r21, r18
    6960:	08 f4       	brcc	.+2      	; 0x6964 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    6962:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    6964:	55 23       	and	r21, r21
    6966:	11 f0       	breq	.+4      	; 0x696c <Midi_updateManualRange+0x76>
    6968:	6f 3f       	cpi	r22, 0xFF	; 255
    696a:	49 f4       	brne	.+18     	; 0x697e <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    696c:	88 0f       	add	r24, r24
    696e:	99 1f       	adc	r25, r25
    6970:	fc 01       	movw	r30, r24
    6972:	ec 5b       	subi	r30, 0xBC	; 188
    6974:	f7 4f       	sbci	r31, 0xF7	; 247
    6976:	8f ef       	ldi	r24, 0xFF	; 255
    6978:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    697a:	81 83       	std	Z+1, r24	; 0x01
    697c:	07 c0       	rjmp	.+14     	; 0x698c <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    697e:	88 0f       	add	r24, r24
    6980:	99 1f       	adc	r25, r25
    6982:	fc 01       	movw	r30, r24
    6984:	ec 5b       	subi	r30, 0xBC	; 188
    6986:	f7 4f       	sbci	r31, 0xF7	; 247
    6988:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    698a:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    698c:	4f 5f       	subi	r20, 0xFF	; 255
    698e:	03 c0       	rjmp	.+6      	; 0x6996 <Midi_updateManualRange+0xa0>
    6990:	40 e0       	ldi	r20, 0x00	; 0
    6992:	6f ef       	ldi	r22, 0xFF	; 255
    6994:	50 e0       	ldi	r21, 0x00	; 0
    6996:	44 30       	cpi	r20, 0x04	; 4
    6998:	08 f4       	brcc	.+2      	; 0x699c <Midi_updateManualRange+0xa6>
    699a:	af cf       	rjmp	.-162    	; 0x68fa <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    699c:	7f 5f       	subi	r23, 0xFF	; 255
    699e:	74 30       	cpi	r23, 0x04	; 4
    69a0:	b8 f3       	brcs	.-18     	; 0x6990 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    69a2:	08 95       	ret

000069a4 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    69a4:	63 e0       	ldi	r22, 0x03	; 3
    69a6:	28 c0       	rjmp	.+80     	; 0x69f8 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    69a8:	86 2f       	mov	r24, r22
    69aa:	06 2e       	mov	r0, r22
    69ac:	00 0c       	add	r0, r0
    69ae:	99 0b       	sbc	r25, r25
    69b0:	42 2f       	mov	r20, r18
    69b2:	02 2e       	mov	r0, r18
    69b4:	00 0c       	add	r0, r0
    69b6:	55 0b       	sbc	r21, r21
    69b8:	fa 01       	movw	r30, r20
    69ba:	ee 0f       	add	r30, r30
    69bc:	ff 1f       	adc	r31, r31
    69be:	e4 0f       	add	r30, r20
    69c0:	f5 1f       	adc	r31, r21
    69c2:	ac 01       	movw	r20, r24
    69c4:	44 0f       	add	r20, r20
    69c6:	55 1f       	adc	r21, r21
    69c8:	da 01       	movw	r26, r20
    69ca:	a8 0f       	add	r26, r24
    69cc:	b9 1f       	adc	r27, r25
    69ce:	aa 0f       	add	r26, r26
    69d0:	bb 1f       	adc	r27, r27
    69d2:	aa 0f       	add	r26, r26
    69d4:	bb 1f       	adc	r27, r27
    69d6:	ae 0f       	add	r26, r30
    69d8:	bf 1f       	adc	r27, r31
    69da:	a2 5a       	subi	r26, 0xA2	; 162
    69dc:	b6 4f       	sbci	r27, 0xF6	; 246
    69de:	3f ef       	ldi	r19, 0xFF	; 255
    69e0:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    69e2:	11 96       	adiw	r26, 0x01	; 1
    69e4:	3c 93       	st	X, r19
    69e6:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    69e8:	fd 01       	movw	r30, r26
    69ea:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    69ec:	21 50       	subi	r18, 0x01	; 1
    69ee:	01 c0       	rjmp	.+2      	; 0x69f2 <init_Manual2Module+0x4e>
    69f0:	23 e0       	ldi	r18, 0x03	; 3
    69f2:	22 23       	and	r18, r18
    69f4:	cc f6       	brge	.-78     	; 0x69a8 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    69f6:	61 50       	subi	r22, 0x01	; 1
    69f8:	66 23       	and	r22, r22
    69fa:	d4 f7       	brge	.-12     	; 0x69f0 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    69fc:	0e 94 36 0b 	call	0x166c	; 0x166c <eeprom_ReadManualMap>
    6a00:	8f 3f       	cpi	r24, 0xFF	; 255
    6a02:	79 f5       	brne	.+94     	; 0x6a62 <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    6a04:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    6a08:	40 e0       	ldi	r20, 0x00	; 0
    6a0a:	50 e0       	ldi	r21, 0x00	; 0
    6a0c:	63 e0       	ldi	r22, 0x03	; 3
    6a0e:	81 e0       	ldi	r24, 0x01	; 1
    6a10:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    6a14:	ee e5       	ldi	r30, 0x5E	; 94
    6a16:	f9 e0       	ldi	r31, 0x09	; 9
    6a18:	84 e2       	ldi	r24, 0x24	; 36
    6a1a:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    6a1c:	33 e4       	ldi	r19, 0x43	; 67
    6a1e:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    6a20:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    6a22:	24 e4       	ldi	r18, 0x44	; 68
    6a24:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    6a26:	9b e5       	ldi	r25, 0x5B	; 91
    6a28:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    6a2a:	40 e2       	ldi	r20, 0x20	; 32
    6a2c:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    6a2e:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    6a30:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    6a32:	40 e4       	ldi	r20, 0x40	; 64
    6a34:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    6a36:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6a38:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6a3a:	40 e6       	ldi	r20, 0x60	; 96
    6a3c:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    6a3e:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    6a40:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    6a42:	30 e8       	ldi	r19, 0x80	; 128
    6a44:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    6a46:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6a48:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6a4a:	90 ea       	ldi	r25, 0xA0	; 160
    6a4c:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    6a4e:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    6a50:	81 e4       	ldi	r24, 0x41	; 65
    6a52:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    6a54:	80 ec       	ldi	r24, 0xC0	; 192
    6a56:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    6a58:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    6a5a:	8d e1       	ldi	r24, 0x1D	; 29
    6a5c:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    6a5e:	80 ee       	ldi	r24, 0xE0	; 224
    6a60:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    6a62:	49 cf       	rjmp	.-366    	; 0x68f6 <Midi_updateManualRange>
    6a64:	08 95       	ret

00006a66 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    6a66:	84 30       	cpi	r24, 0x04	; 4
    6a68:	d8 f4       	brcc	.+54     	; 0x6aa0 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    6a6a:	90 e0       	ldi	r25, 0x00	; 0
    6a6c:	fc 01       	movw	r30, r24
    6a6e:	ee 0f       	add	r30, r30
    6a70:	ff 1f       	adc	r31, r31
    6a72:	e8 0f       	add	r30, r24
    6a74:	f9 1f       	adc	r31, r25
    6a76:	ee 0f       	add	r30, r30
    6a78:	ff 1f       	adc	r31, r31
    6a7a:	ee 0f       	add	r30, r30
    6a7c:	ff 1f       	adc	r31, r31
    6a7e:	e2 5a       	subi	r30, 0xA2	; 162
    6a80:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    6a82:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    6a84:	20 81       	ld	r18, Z
    6a86:	62 17       	cp	r22, r18
    6a88:	40 f0       	brcs	.+16     	; 0x6a9a <manualNote_to_moduleBit+0x34>
    6a8a:	91 81       	ldd	r25, Z+1	; 0x01
    6a8c:	96 17       	cp	r25, r22
    6a8e:	28 f0       	brcs	.+10     	; 0x6a9a <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    6a90:	92 81       	ldd	r25, Z+2	; 0x02
    6a92:	62 1b       	sub	r22, r18
				return (result);
    6a94:	80 e0       	ldi	r24, 0x00	; 0
    6a96:	96 0f       	add	r25, r22
    6a98:	08 95       	ret
			}
			pRange++;
    6a9a:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    6a9c:	81 50       	subi	r24, 0x01	; 1
    6a9e:	91 f7       	brne	.-28     	; 0x6a84 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    6aa0:	8f ef       	ldi	r24, 0xFF	; 255
    6aa2:	90 e0       	ldi	r25, 0x00	; 0
}
    6aa4:	08 95       	ret

00006aa6 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    6aa6:	70 e0       	ldi	r23, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6aa8:	ee e5       	ldi	r30, 0x5E	; 94
    6aaa:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6aac:	24 e0       	ldi	r18, 0x04	; 4
    6aae:	18 c0       	rjmp	.+48     	; 0x6ae0 <moduleBit_to_manualNote+0x3a>
			if (pRange->startNote != MIDI_NOTE_NONE){
    6ab0:	30 81       	ld	r19, Z
    6ab2:	3f 3f       	cpi	r19, 0xFF	; 255
    6ab4:	99 f0       	breq	.+38     	; 0x6adc <moduleBit_to_manualNote+0x36>
				// only check if section is valid
				if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    6ab6:	62 81       	ldd	r22, Z+2	; 0x02
    6ab8:	86 17       	cp	r24, r22
    6aba:	80 f0       	brcs	.+32     	; 0x6adc <moduleBit_to_manualNote+0x36>
    6abc:	a8 2f       	mov	r26, r24
    6abe:	b0 e0       	ldi	r27, 0x00	; 0
    6ac0:	41 81       	ldd	r20, Z+1	; 0x01
    6ac2:	50 e0       	ldi	r21, 0x00	; 0
    6ac4:	43 1b       	sub	r20, r19
    6ac6:	51 09       	sbc	r21, r1
    6ac8:	46 0f       	add	r20, r22
    6aca:	51 1d       	adc	r21, r1
    6acc:	4a 17       	cp	r20, r26
    6ace:	5b 07       	cpc	r21, r27
    6ad0:	2c f0       	brlt	.+10     	; 0x6adc <moduleBit_to_manualNote+0x36>
					// found
					result.manual = manual;
					result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    6ad2:	98 2f       	mov	r25, r24
    6ad4:	96 1b       	sub	r25, r22
					return(result);
    6ad6:	87 2f       	mov	r24, r23
    6ad8:	93 0f       	add	r25, r19
    6ada:	08 95       	ret
				}
			}
			pRange++;
    6adc:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6ade:	21 50       	subi	r18, 0x01	; 1
    6ae0:	21 11       	cpse	r18, r1
    6ae2:	e6 cf       	rjmp	.-52     	; 0x6ab0 <moduleBit_to_manualNote+0xa>
					return(result);
				}
			}
			pRange++;
		}
		manual++;
    6ae4:	7f 5f       	subi	r23, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    6ae6:	75 30       	cpi	r23, 0x05	; 5
    6ae8:	08 f3       	brcs	.-62     	; 0x6aac <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); 
    6aea:	8f ef       	ldi	r24, 0xFF	; 255
    6aec:	90 e0       	ldi	r25, 0x00	; 0
}
    6aee:	08 95       	ret

00006af0 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    6af0:	ef 92       	push	r14
    6af2:	ff 92       	push	r15
    6af4:	0f 93       	push	r16
    6af6:	1f 93       	push	r17
    6af8:	cf 93       	push	r28
    6afa:	df 93       	push	r29
    6afc:	c8 2f       	mov	r28, r24
    6afe:	06 2f       	mov	r16, r22
    6b00:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    6b02:	b1 df       	rcall	.-158    	; 0x6a66 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    6b04:	49 2f       	mov	r20, r25
    6b06:	42 95       	swap	r20
    6b08:	46 95       	lsr	r20
    6b0a:	47 70       	andi	r20, 0x07	; 7
    6b0c:	21 e0       	ldi	r18, 0x01	; 1
    6b0e:	30 e0       	ldi	r19, 0x00	; 0
    6b10:	79 01       	movw	r14, r18
    6b12:	02 c0       	rjmp	.+4      	; 0x6b18 <manual_NoteOnOff+0x28>
    6b14:	ee 0c       	add	r14, r14
    6b16:	ff 1c       	adc	r15, r15
    6b18:	4a 95       	dec	r20
    6b1a:	e2 f7       	brpl	.-8      	; 0x6b14 <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6b1c:	19 2f       	mov	r17, r25
    6b1e:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    6b20:	81 11       	cpse	r24, r1
    6b22:	1a c0       	rjmp	.+52     	; 0x6b58 <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    6b24:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <pipe_Module+0x1>
    6b28:	8e 21       	and	r24, r14
    6b2a:	59 f4       	brne	.+22     	; 0x6b42 <manual_NoteOnOff+0x52>
    6b2c:	dd 23       	and	r29, r29
    6b2e:	4c f0       	brlt	.+18     	; 0x6b42 <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6b30:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    6b32:	d1 30       	cpi	r29, 0x01	; 1
    6b34:	11 f4       	brne	.+4      	; 0x6b3a <manual_NoteOnOff+0x4a>
    6b36:	90 e2       	ldi	r25, 0x20	; 32
    6b38:	01 c0       	rjmp	.+2      	; 0x6b3c <manual_NoteOnOff+0x4c>
    6b3a:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6b3c:	8e 2d       	mov	r24, r14
    6b3e:	91 2b       	or	r25, r17
    6b40:	d9 d9       	rcall	.-3150   	; 0x5ef4 <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6b42:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    6b44:	29 f4       	brne	.+10     	; 0x6b50 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    6b46:	6e 2d       	mov	r22, r14
    6b48:	81 2f       	mov	r24, r17
    6b4a:	0e 94 73 13 	call	0x26e6	; 0x26e6 <pipe_off>
    6b4e:	04 c0       	rjmp	.+8      	; 0x6b58 <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6b50:	6e 2d       	mov	r22, r14
    6b52:	81 2f       	mov	r24, r17
    6b54:	0e 94 64 13 	call	0x26c8	; 0x26c8 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    6b58:	ec 2f       	mov	r30, r28
    6b5a:	f0 e0       	ldi	r31, 0x00	; 0
    6b5c:	ee 0f       	add	r30, r30
    6b5e:	ff 1f       	adc	r31, r31
    6b60:	e2 5b       	subi	r30, 0xB2	; 178
    6b62:	f6 4f       	sbci	r31, 0xF6	; 246
    6b64:	61 81       	ldd	r22, Z+1	; 0x01
    6b66:	6f 3f       	cpi	r22, 0xFF	; 255
    6b68:	a1 f0       	breq	.+40     	; 0x6b92 <manual_NoteOnOff+0xa2>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISendCmd(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF),midiOutMap[manual].sw_channel);
    6b6a:	d1 30       	cpi	r29, 0x01	; 1
    6b6c:	31 f0       	breq	.+12     	; 0x6b7a <manual_NoteOnOff+0x8a>
    6b6e:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <midi_Setting+0x1>
    6b72:	88 23       	and	r24, r24
    6b74:	21 f0       	breq	.+8      	; 0x6b7e <manual_NoteOnOff+0x8e>
    6b76:	80 e9       	ldi	r24, 0x90	; 144
    6b78:	03 c0       	rjmp	.+6      	; 0x6b80 <manual_NoteOnOff+0x90>
    6b7a:	80 e9       	ldi	r24, 0x90	; 144
    6b7c:	01 c0       	rjmp	.+2      	; 0x6b80 <manual_NoteOnOff+0x90>
    6b7e:	80 e8       	ldi	r24, 0x80	; 128
		serial1MIDISendData(note);
    6b80:	a2 d4       	rcall	.+2372   	; 0x74c6 <serial1MIDISendCmd>
    6b82:	80 2f       	mov	r24, r16
    6b84:	b6 d4       	rcall	.+2412   	; 0x74f2 <serial1MIDISendData>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISendData(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6b86:	d1 11       	cpse	r29, r1
    6b88:	02 c0       	rjmp	.+4      	; 0x6b8e <manual_NoteOnOff+0x9e>
    6b8a:	80 e0       	ldi	r24, 0x00	; 0
    6b8c:	01 c0       	rjmp	.+2      	; 0x6b90 <manual_NoteOnOff+0xa0>
    6b8e:	80 e4       	ldi	r24, 0x40	; 64
    6b90:	b0 d4       	rcall	.+2400   	; 0x74f2 <serial1MIDISendData>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    6b92:	df 91       	pop	r29
    6b94:	cf 91       	pop	r28
    6b96:	1f 91       	pop	r17
    6b98:	0f 91       	pop	r16
    6b9a:	ff 90       	pop	r15
    6b9c:	ef 90       	pop	r14
    6b9e:	08 95       	ret

00006ba0 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    6ba0:	bf 92       	push	r11
    6ba2:	cf 92       	push	r12
    6ba4:	df 92       	push	r13
    6ba6:	ef 92       	push	r14
    6ba8:	ff 92       	push	r15
    6baa:	0f 93       	push	r16
    6bac:	1f 93       	push	r17
    6bae:	cf 93       	push	r28
    6bb0:	df 93       	push	r29
    6bb2:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    6bb4:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    6bb6:	4c c0       	rjmp	.+152    	; 0x6c50 <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6bb8:	0c 2d       	mov	r16, r12
    6bba:	10 e0       	ldi	r17, 0x00	; 0
    6bbc:	cd 2d       	mov	r28, r13
    6bbe:	d0 e0       	ldi	r29, 0x00	; 0
    6bc0:	f8 01       	movw	r30, r16
    6bc2:	ee 0f       	add	r30, r30
    6bc4:	ff 1f       	adc	r31, r31
    6bc6:	ee 0f       	add	r30, r30
    6bc8:	ff 1f       	adc	r31, r31
    6bca:	ec 0f       	add	r30, r28
    6bcc:	fd 1f       	adc	r31, r29
    6bce:	ee 0f       	add	r30, r30
    6bd0:	ff 1f       	adc	r31, r31
    6bd2:	ee 0f       	add	r30, r30
    6bd4:	ff 1f       	adc	r31, r31
    6bd6:	e2 5b       	subi	r30, 0xB2	; 178
    6bd8:	f7 4f       	sbci	r31, 0xF7	; 247
    6bda:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    6bdc:	83 e0       	ldi	r24, 0x03	; 3
    6bde:	8b 15       	cp	r24, r11
    6be0:	b0 f1       	brcs	.+108    	; 0x6c4e <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    6be2:	f8 01       	movw	r30, r16
    6be4:	ee 0f       	add	r30, r30
    6be6:	ff 1f       	adc	r31, r31
    6be8:	ee 0f       	add	r30, r30
    6bea:	ff 1f       	adc	r31, r31
    6bec:	ec 0f       	add	r30, r28
    6bee:	fd 1f       	adc	r31, r29
    6bf0:	ee 0f       	add	r30, r30
    6bf2:	ff 1f       	adc	r31, r31
    6bf4:	ee 0f       	add	r30, r30
    6bf6:	ff 1f       	adc	r31, r31
    6bf8:	e2 5b       	subi	r30, 0xB2	; 178
    6bfa:	f7 4f       	sbci	r31, 0xF7	; 247
    6bfc:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6bfe:	f2 80       	ldd	r15, Z+2	; 0x02
    6c00:	15 c0       	rjmp	.+42     	; 0x6c2c <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6c02:	ee 24       	eor	r14, r14
    6c04:	e3 94       	inc	r14
    6c06:	e6 0e       	add	r14, r22
    6c08:	f8 01       	movw	r30, r16
    6c0a:	ee 0f       	add	r30, r30
    6c0c:	ff 1f       	adc	r31, r31
    6c0e:	ee 0f       	add	r30, r30
    6c10:	ff 1f       	adc	r31, r31
    6c12:	ec 0f       	add	r30, r28
    6c14:	fd 1f       	adc	r31, r29
    6c16:	ee 0f       	add	r30, r30
    6c18:	ff 1f       	adc	r31, r31
    6c1a:	ee 0f       	add	r30, r30
    6c1c:	ff 1f       	adc	r31, r31
    6c1e:	e2 5b       	subi	r30, 0xB2	; 178
    6c20:	f7 4f       	sbci	r31, 0xF7	; 247
    6c22:	40 e8       	ldi	r20, 0x80	; 128
    6c24:	80 81       	ld	r24, Z
    6c26:	64 df       	rcall	.-312    	; 0x6af0 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6c28:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6c2a:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6c2c:	f1 10       	cpse	r15, r1
    6c2e:	e9 cf       	rjmp	.-46     	; 0x6c02 <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6c30:	eb 2d       	mov	r30, r11
    6c32:	f0 e0       	ldi	r31, 0x00	; 0
    6c34:	ee 0f       	add	r30, r30
    6c36:	ff 1f       	adc	r31, r31
    6c38:	e2 5b       	subi	r30, 0xB2	; 178
    6c3a:	f6 4f       	sbci	r31, 0xF6	; 246
    6c3c:	60 81       	ld	r22, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6c3e:	60 31       	cpi	r22, 0x10	; 16
    6c40:	30 f4       	brcc	.+12     	; 0x6c4e <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISendCmd(MIDI_CTRLCHG, midiChanel);
    6c42:	80 eb       	ldi	r24, 0xB0	; 176
    6c44:	40 d4       	rcall	.+2176   	; 0x74c6 <serial1MIDISendCmd>
				serial1MIDISendData(MIDI_CTRL_ALLNOTESOFF);
    6c46:	8b e7       	ldi	r24, 0x7B	; 123
    6c48:	54 d4       	rcall	.+2216   	; 0x74f2 <serial1MIDISendData>
				serial1MIDISendData(0);
    6c4a:	80 e0       	ldi	r24, 0x00	; 0
    6c4c:	52 d4       	rcall	.+2212   	; 0x74f2 <serial1MIDISendData>
    6c4e:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    6c50:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    6c52:	8d 15       	cp	r24, r13
    6c54:	08 f0       	brcs	.+2      	; 0x6c58 <midiAllNotesOff+0xb8>
    6c56:	b0 cf       	rjmp	.-160    	; 0x6bb8 <midiAllNotesOff+0x18>
    6c58:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    6c5a:	cf 91       	pop	r28
    6c5c:	1f 91       	pop	r17
    6c5e:	0f 91       	pop	r16
    6c60:	ff 90       	pop	r15
    6c62:	ef 90       	pop	r14
    6c64:	df 90       	pop	r13
    6c66:	cf 90       	pop	r12
    6c68:	bf 90       	pop	r11
    6c6a:	08 95       	ret

00006c6c <midi_ManualOff>:
    6c6c:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    6c6e:	1f 93       	push	r17
    6c70:	cf 93       	push	r28
    6c72:	df 93       	push	r29
    6c74:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    6c76:	84 30       	cpi	r24, 0x04	; 4
    6c78:	00 f5       	brcc	.+64     	; 0x6cba <midi_ManualOff+0x4e>
    6c7a:	08 2f       	mov	r16, r24
    6c7c:	10 e0       	ldi	r17, 0x00	; 0
    6c7e:	f8 01       	movw	r30, r16
    6c80:	ee 0f       	add	r30, r30
    6c82:	ff 1f       	adc	r31, r31
    6c84:	ec 5b       	subi	r30, 0xBC	; 188
    6c86:	f7 4f       	sbci	r31, 0xF7	; 247
    6c88:	d0 81       	ld	r29, Z
    6c8a:	df 3f       	cpi	r29, 0xFF	; 255
    6c8c:	b1 f0       	breq	.+44     	; 0x6cba <midi_ManualOff+0x4e>
    6c8e:	f8 01       	movw	r30, r16
    6c90:	ee 0f       	add	r30, r30
    6c92:	ff 1f       	adc	r31, r31
    6c94:	ec 5b       	subi	r30, 0xBC	; 188
    6c96:	f7 4f       	sbci	r31, 0xF7	; 247
    6c98:	81 81       	ldd	r24, Z+1	; 0x01
    6c9a:	8f 3f       	cpi	r24, 0xFF	; 255
    6c9c:	31 f4       	brne	.+12     	; 0x6caa <midi_ManualOff+0x3e>
    6c9e:	0d c0       	rjmp	.+26     	; 0x6cba <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    6ca0:	40 e8       	ldi	r20, 0x80	; 128
    6ca2:	6d 2f       	mov	r22, r29
    6ca4:	8c 2f       	mov	r24, r28
    6ca6:	24 df       	rcall	.-440    	; 0x6af0 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    6ca8:	df 5f       	subi	r29, 0xFF	; 255
    6caa:	f8 01       	movw	r30, r16
    6cac:	ee 0f       	add	r30, r30
    6cae:	ff 1f       	adc	r31, r31
    6cb0:	ec 5b       	subi	r30, 0xBC	; 188
    6cb2:	f7 4f       	sbci	r31, 0xF7	; 247
    6cb4:	81 81       	ldd	r24, Z+1	; 0x01
    6cb6:	8d 17       	cp	r24, r29
    6cb8:	98 f7       	brcc	.-26     	; 0x6ca0 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6cba:	ec 2f       	mov	r30, r28
    6cbc:	f0 e0       	ldi	r31, 0x00	; 0
    6cbe:	ee 0f       	add	r30, r30
    6cc0:	ff 1f       	adc	r31, r31
    6cc2:	e2 5b       	subi	r30, 0xB2	; 178
    6cc4:	f6 4f       	sbci	r31, 0xF6	; 246
    6cc6:	60 81       	ld	r22, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6cc8:	60 31       	cpi	r22, 0x10	; 16
    6cca:	30 f4       	brcc	.+12     	; 0x6cd8 <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISendCmd(MIDI_CTRLCHG,midiChanel);
    6ccc:	80 eb       	ldi	r24, 0xB0	; 176
    6cce:	fb d3       	rcall	.+2038   	; 0x74c6 <serial1MIDISendCmd>
		serial1MIDISendData(MIDI_CTRL_ALLNOTESOFF);
    6cd0:	8b e7       	ldi	r24, 0x7B	; 123
    6cd2:	0f d4       	rcall	.+2078   	; 0x74f2 <serial1MIDISendData>
		serial1MIDISendData(0);
    6cd4:	80 e0       	ldi	r24, 0x00	; 0
    6cd6:	0d d4       	rcall	.+2074   	; 0x74f2 <serial1MIDISendData>
    6cd8:	df 91       	pop	r29

	}
}
    6cda:	cf 91       	pop	r28
    6cdc:	1f 91       	pop	r17
    6cde:	0f 91       	pop	r16
    6ce0:	08 95       	ret

00006ce2 <midi_AllManualsOff>:
    6ce2:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6ce4:	c0 e0       	ldi	r28, 0x00	; 0
    6ce6:	03 c0       	rjmp	.+6      	; 0x6cee <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6ce8:	8c 2f       	mov	r24, r28
    6cea:	c0 df       	rcall	.-128    	; 0x6c6c <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6cec:	cf 5f       	subi	r28, 0xFF	; 255
    6cee:	c4 30       	cpi	r28, 0x04	; 4
    6cf0:	d8 f3       	brcs	.-10     	; 0x6ce8 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    6cf2:	cf 91       	pop	r28
    6cf4:	08 95       	ret

00006cf6 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6cf6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <midiRxActivceSensing>
    6cfa:	88 23       	and	r24, r24
    6cfc:	39 f0       	breq	.+14     	; 0x6d0c <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6cfe:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <swTimer+0x6>
    6d02:	81 11       	cpse	r24, r1
    6d04:	03 c0       	rjmp	.+6      	; 0x6d0c <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6d06:	ed df       	rcall	.-38     	; 0x6ce2 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6d08:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <midiRxActivceSensing>
    6d0c:	08 95       	ret

00006d0e <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6d0e:	0f 93       	push	r16
    6d10:	1f 93       	push	r17
    6d12:	cf 93       	push	r28
    6d14:	df 93       	push	r29
    6d16:	06 2f       	mov	r16, r22
    6d18:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6d1a:	d8 2f       	mov	r29, r24
    6d1c:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6d1e:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6d20:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6d22:	3c c0       	rjmp	.+120    	; 0x6d9c <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    6d24:	4d 2f       	mov	r20, r29
    6d26:	50 e0       	ldi	r21, 0x00	; 0
    6d28:	2c 2f       	mov	r18, r28
    6d2a:	30 e0       	ldi	r19, 0x00	; 0
    6d2c:	fa 01       	movw	r30, r20
    6d2e:	ee 0f       	add	r30, r30
    6d30:	ff 1f       	adc	r31, r31
    6d32:	ee 0f       	add	r30, r30
    6d34:	ff 1f       	adc	r31, r31
    6d36:	e2 0f       	add	r30, r18
    6d38:	f3 1f       	adc	r31, r19
    6d3a:	ee 0f       	add	r30, r30
    6d3c:	ff 1f       	adc	r31, r31
    6d3e:	ee 0f       	add	r30, r30
    6d40:	ff 1f       	adc	r31, r31
    6d42:	e2 5b       	subi	r30, 0xB2	; 178
    6d44:	f7 4f       	sbci	r31, 0xF7	; 247
    6d46:	80 81       	ld	r24, Z
    6d48:	84 30       	cpi	r24, 0x04	; 4
    6d4a:	38 f5       	brcc	.+78     	; 0x6d9a <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6d4c:	df 01       	movw	r26, r30
    6d4e:	61 81       	ldd	r22, Z+1	; 0x01
    6d50:	70 2f       	mov	r23, r16
    6d52:	76 1b       	sub	r23, r22
    6d54:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6d56:	0a f1       	brmi	.+66     	; 0x6d9a <midiNote_to_Manual+0x8c>
    6d58:	fd 01       	movw	r30, r26
    6d5a:	e2 81       	ldd	r30, Z+2	; 0x02
    6d5c:	f0 e0       	ldi	r31, 0x00	; 0
    6d5e:	a7 2f       	mov	r26, r23
    6d60:	77 0f       	add	r23, r23
    6d62:	bb 0b       	sbc	r27, r27
    6d64:	ae 17       	cp	r26, r30
    6d66:	bf 07       	cpc	r27, r31
    6d68:	c4 f4       	brge	.+48     	; 0x6d9a <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6d6a:	fa 01       	movw	r30, r20
    6d6c:	ee 0f       	add	r30, r30
    6d6e:	ff 1f       	adc	r31, r31
    6d70:	ee 0f       	add	r30, r30
    6d72:	ff 1f       	adc	r31, r31
    6d74:	e2 0f       	add	r30, r18
    6d76:	f3 1f       	adc	r31, r19
    6d78:	ee 0f       	add	r30, r30
    6d7a:	ff 1f       	adc	r31, r31
    6d7c:	ee 0f       	add	r30, r30
    6d7e:	ff 1f       	adc	r31, r31
    6d80:	e2 5b       	subi	r30, 0xB2	; 178
    6d82:	f7 4f       	sbci	r31, 0xF7	; 247
    6d84:	93 81       	ldd	r25, Z+3	; 0x03
    6d86:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6d88:	11 30       	cpi	r17, 0x01	; 1
    6d8a:	21 f4       	brne	.+8      	; 0x6d94 <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6d8c:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6d90:	60 93 23 02 	sts	0x0223, r22	; 0x800223 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    6d94:	41 2f       	mov	r20, r17
    6d96:	ac de       	rcall	.-680    	; 0x6af0 <manual_NoteOnOff>
				found |= 0xFF;
    6d98:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6d9a:	cf 5f       	subi	r28, 0xFF	; 255
    6d9c:	c4 30       	cpi	r28, 0x04	; 4
    6d9e:	08 f4       	brcc	.+2      	; 0x6da2 <midiNote_to_Manual+0x94>
    6da0:	c1 cf       	rjmp	.-126    	; 0x6d24 <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    6da2:	11 30       	cpi	r17, 0x01	; 1
    6da4:	49 f4       	brne	.+18     	; 0x6db8 <midiNote_to_Manual+0xaa>
    6da6:	91 11       	cpse	r25, r1
    6da8:	07 c0       	rjmp	.+14     	; 0x6db8 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6daa:	00 93 23 02 	sts	0x0223, r16	; 0x800223 <midiLastInNote>
		midiLastInChannel = channel;
    6dae:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    6db2:	8f ef       	ldi	r24, 0xFF	; 255
    6db4:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6db8:	80 91 4c 08 	lds	r24, 0x084C	; 0x80084c <midiThrough>
    6dbc:	d8 13       	cpse	r29, r24
    6dbe:	1e c0       	rjmp	.+60     	; 0x6dfc <midiNote_to_Manual+0xee>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6dc0:	60 91 4d 08 	lds	r22, 0x084D	; 0x80084d <midiThrough+0x1>
    6dc4:	6f 3f       	cpi	r22, 0xFF	; 255
    6dc6:	d1 f0       	breq	.+52     	; 0x6dfc <midiNote_to_Manual+0xee>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISendCmd(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF),midiThrough.OutChannel);
    6dc8:	11 30       	cpi	r17, 0x01	; 1
    6dca:	31 f0       	breq	.+12     	; 0x6dd8 <midiNote_to_Manual+0xca>
    6dcc:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <midi_Setting+0x1>
    6dd0:	88 23       	and	r24, r24
    6dd2:	21 f0       	breq	.+8      	; 0x6ddc <midiNote_to_Manual+0xce>
    6dd4:	80 e9       	ldi	r24, 0x90	; 144
    6dd6:	03 c0       	rjmp	.+6      	; 0x6dde <midiNote_to_Manual+0xd0>
    6dd8:	80 e9       	ldi	r24, 0x90	; 144
    6dda:	01 c0       	rjmp	.+2      	; 0x6dde <midiNote_to_Manual+0xd0>
    6ddc:	80 e8       	ldi	r24, 0x80	; 128
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISendData(note);
    6dde:	73 d3       	rcall	.+1766   	; 0x74c6 <serial1MIDISendCmd>
    6de0:	80 2f       	mov	r24, r16
    6de2:	87 d3       	rcall	.+1806   	; 0x74f2 <serial1MIDISendData>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISendData(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6de4:	11 11       	cpse	r17, r1
    6de6:	06 c0       	rjmp	.+12     	; 0x6df4 <midiNote_to_Manual+0xe6>
    6de8:	80 91 57 09 	lds	r24, 0x0957	; 0x800957 <midi_Setting+0x1>
    6dec:	81 11       	cpse	r24, r1
    6dee:	04 c0       	rjmp	.+8      	; 0x6df8 <midiNote_to_Manual+0xea>
    6df0:	80 e4       	ldi	r24, 0x40	; 64
    6df2:	03 c0       	rjmp	.+6      	; 0x6dfa <midiNote_to_Manual+0xec>
    6df4:	80 e4       	ldi	r24, 0x40	; 64
    6df6:	01 c0       	rjmp	.+2      	; 0x6dfa <midiNote_to_Manual+0xec>
    6df8:	80 e0       	ldi	r24, 0x00	; 0
    6dfa:	7b d3       	rcall	.+1782   	; 0x74f2 <serial1MIDISendData>
		}
	}
}
    6dfc:	df 91       	pop	r29
    6dfe:	cf 91       	pop	r28
    6e00:	1f 91       	pop	r17
    6e02:	0f 91       	pop	r16
    6e04:	08 95       	ret

00006e06 <midiIn_Process>:
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6e06:	88 23       	and	r24, r24
    6e08:	0c f0       	brlt	.+2      	; 0x6e0c <midiIn_Process+0x6>
    6e0a:	4f c0       	rjmp	.+158    	; 0x6eaa <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6e0c:	88 3f       	cpi	r24, 0xF8	; 248
    6e0e:	b8 f0       	brcs	.+46     	; 0x6e3e <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    6e10:	8e 3f       	cpi	r24, 0xFE	; 254
    6e12:	81 f4       	brne	.+32     	; 0x6e34 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6e14:	81 e0       	ldi	r24, 0x01	; 1
    6e16:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6e1a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6e1c:	f8 94       	cli
    6e1e:	06 c0       	rjmp	.+12     	; 0x6e2c <midiIn_Process+0x26>
    6e20:	e0 e5       	ldi	r30, 0x50	; 80
    6e22:	f2 e0       	ldi	r31, 0x02	; 2
    6e24:	89 e1       	ldi	r24, 0x19	; 25
    6e26:	86 83       	std	Z+6, r24	; 0x06
    6e28:	17 82       	std	Z+7, r1	; 0x07
    6e2a:	80 e0       	ldi	r24, 0x00	; 0
    6e2c:	81 11       	cpse	r24, r1
    6e2e:	f8 cf       	rjmp	.-16     	; 0x6e20 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6e30:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6e32:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6e34:	8f 3f       	cpi	r24, 0xFF	; 255
    6e36:	09 f0       	breq	.+2      	; 0x6e3a <midiIn_Process+0x34>
    6e38:	92 c0       	rjmp	.+292    	; 0x6f5e <midiIn_Process+0x158>
				midiAllReset();
    6e3a:	00 c9       	rjmp	.-3584   	; 0x603c <midiAllReset>
    6e3c:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6e3e:	80 93 16 0c 	sts	0x0C16, r24	; 0x800c16 <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    6e42:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6e46:	90 e8       	ldi	r25, 0x80	; 128
    6e48:	98 0f       	add	r25, r24
    6e4a:	90 34       	cpi	r25, 0x40	; 64
    6e4c:	20 f4       	brcc	.+8      	; 0x6e56 <midiIn_Process+0x50>
				// 80 - BF -> Note On, Note Off, Aftertouch, ControlerChange
				midiDataByteExpected = 2;
    6e4e:	82 e0       	ldi	r24, 0x02	; 2
    6e50:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e54:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6e56:	90 e2       	ldi	r25, 0x20	; 32
    6e58:	98 0f       	add	r25, r24
    6e5a:	90 31       	cpi	r25, 0x10	; 16
    6e5c:	20 f4       	brcc	.+8      	; 0x6e66 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6e5e:	82 e0       	ldi	r24, 0x02	; 2
    6e60:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e64:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6e66:	82 3f       	cpi	r24, 0xF2	; 242
    6e68:	21 f4       	brne	.+8      	; 0x6e72 <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6e6a:	82 e0       	ldi	r24, 0x02	; 2
    6e6c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e70:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    6e72:	80 3f       	cpi	r24, 0xF0	; 240
    6e74:	21 f4       	brne	.+8      	; 0x6e7e <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6e76:	8f ef       	ldi	r24, 0xFF	; 255
    6e78:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e7c:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6e7e:	90 e4       	ldi	r25, 0x40	; 64
    6e80:	98 0f       	add	r25, r24
    6e82:	90 32       	cpi	r25, 0x20	; 32
    6e84:	20 f4       	brcc	.+8      	; 0x6e8e <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    6e86:	81 e0       	ldi	r24, 0x01	; 1
    6e88:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e8c:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6e8e:	81 3f       	cpi	r24, 0xF1	; 241
    6e90:	11 f0       	breq	.+4      	; 0x6e96 <midiIn_Process+0x90>
    6e92:	83 3f       	cpi	r24, 0xF3	; 243
    6e94:	21 f4       	brne	.+8      	; 0x6e9e <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    6e96:	81 e0       	ldi	r24, 0x01	; 1
    6e98:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <midiDataByteExpected>
    6e9c:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    6e9e:	87 3f       	cpi	r24, 0xF7	; 247
    6ea0:	09 f4       	brne	.+2      	; 0x6ea4 <midiIn_Process+0x9e>
    6ea2:	5d c0       	rjmp	.+186    	; 0x6f5e <midiIn_Process+0x158>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    6ea4:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <midiDataByteExpected>
    6ea8:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6eaa:	e0 91 43 08 	lds	r30, 0x0843	; 0x800843 <midiDataByteCount>
    6eae:	e8 30       	cpi	r30, 0x08	; 8
    6eb0:	40 f4       	brcc	.+16     	; 0x6ec2 <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    6eb2:	91 e0       	ldi	r25, 0x01	; 1
    6eb4:	9e 0f       	add	r25, r30
    6eb6:	90 93 43 08 	sts	0x0843, r25	; 0x800843 <midiDataByteCount>
    6eba:	f0 e0       	ldi	r31, 0x00	; 0
    6ebc:	e2 5f       	subi	r30, 0xF2	; 242
    6ebe:	f3 4f       	sbci	r31, 0xF3	; 243
    6ec0:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    6ec2:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <midiDataByteExpected>
    6ec6:	8f 3f       	cpi	r24, 0xFF	; 255
    6ec8:	09 f4       	brne	.+2      	; 0x6ecc <midiIn_Process+0xc6>
    6eca:	49 c0       	rjmp	.+146    	; 0x6f5e <midiIn_Process+0x158>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6ecc:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <midiDataByteCount>
    6ed0:	98 17       	cp	r25, r24
    6ed2:	08 f4       	brcc	.+2      	; 0x6ed6 <midiIn_Process+0xd0>
    6ed4:	44 c0       	rjmp	.+136    	; 0x6f5e <midiIn_Process+0x158>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    6ed6:	90 91 16 0c 	lds	r25, 0x0C16	; 0x800c16 <midiLastCommand>
    6eda:	90 3f       	cpi	r25, 0xF0	; 240
    6edc:	08 f0       	brcs	.+2      	; 0x6ee0 <midiIn_Process+0xda>
    6ede:	3d c0       	rjmp	.+122    	; 0x6f5a <midiIn_Process+0x154>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6ee0:	89 2f       	mov	r24, r25
    6ee2:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    6ee4:	90 7f       	andi	r25, 0xF0	; 240
    6ee6:	90 39       	cpi	r25, 0x90	; 144
    6ee8:	71 f0       	breq	.+28     	; 0x6f06 <midiIn_Process+0x100>
    6eea:	18 f4       	brcc	.+6      	; 0x6ef2 <midiIn_Process+0xec>
    6eec:	90 38       	cpi	r25, 0x80	; 128
    6eee:	31 f0       	breq	.+12     	; 0x6efc <midiIn_Process+0xf6>
    6ef0:	34 c0       	rjmp	.+104    	; 0x6f5a <midiIn_Process+0x154>
    6ef2:	90 3b       	cpi	r25, 0xB0	; 176
    6ef4:	99 f0       	breq	.+38     	; 0x6f1c <midiIn_Process+0x116>
    6ef6:	90 3c       	cpi	r25, 0xC0	; 192
    6ef8:	69 f1       	breq	.+90     	; 0x6f54 <midiIn_Process+0x14e>
    6efa:	2f c0       	rjmp	.+94     	; 0x6f5a <midiIn_Process+0x154>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6efc:	40 e0       	ldi	r20, 0x00	; 0
    6efe:	60 91 0e 0c 	lds	r22, 0x0C0E	; 0x800c0e <midiDataByte>
    6f02:	05 df       	rcall	.-502    	; 0x6d0e <midiNote_to_Manual>
						break;
    6f04:	2a c0       	rjmp	.+84     	; 0x6f5a <midiIn_Process+0x154>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    6f06:	90 91 0f 0c 	lds	r25, 0x0C0F	; 0x800c0f <midiDataByte+0x1>
    6f0a:	91 11       	cpse	r25, r1
    6f0c:	02 c0       	rjmp	.+4      	; 0x6f12 <midiIn_Process+0x10c>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6f0e:	40 e0       	ldi	r20, 0x00	; 0
    6f10:	01 c0       	rjmp	.+2      	; 0x6f14 <midiIn_Process+0x10e>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6f12:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6f14:	60 91 0e 0c 	lds	r22, 0x0C0E	; 0x800c0e <midiDataByte>
    6f18:	fa de       	rcall	.-524    	; 0x6d0e <midiNote_to_Manual>
						break;
    6f1a:	1f c0       	rjmp	.+62     	; 0x6f5a <midiIn_Process+0x154>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6f1c:	90 91 0e 0c 	lds	r25, 0x0C0E	; 0x800c0e <midiDataByte>
    6f20:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6f22:	11 f4       	brne	.+4      	; 0x6f28 <midiIn_Process+0x122>
    6f24:	3d de       	rcall	.-902    	; 0x6ba0 <midiAllNotesOff>
    6f26:	19 c0       	rjmp	.+50     	; 0x6f5a <midiIn_Process+0x154>
						} else if (midiDataByte[0] == midi_ccReg.ccInRegOn) {
    6f28:	80 91 5a 09 	lds	r24, 0x095A	; 0x80095a <midi_ccReg>
    6f2c:	98 13       	cpse	r25, r24
							// V 0.83: register on/off by CC
							register_onOff(midiDataByte[1], REGISTER_ON);	
    6f2e:	05 c0       	rjmp	.+10     	; 0x6f3a <midiIn_Process+0x134>
    6f30:	61 e0       	ldi	r22, 0x01	; 1
    6f32:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <midiDataByte+0x1>
    6f36:	05 da       	rcall	.-3062   	; 0x6342 <register_onOff>
    6f38:	10 c0       	rjmp	.+32     	; 0x6f5a <midiIn_Process+0x154>
						} else if (midiDataByte[0] == midi_ccReg.ccInRegOff) {
    6f3a:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <midi_ccReg+0x1>
    6f3e:	98 13       	cpse	r25, r24
							register_onOff(midiDataByte[1], REGISTER_OFF);
    6f40:	05 c0       	rjmp	.+10     	; 0x6f4c <midiIn_Process+0x146>
    6f42:	60 e0       	ldi	r22, 0x00	; 0
    6f44:	80 91 0f 0c 	lds	r24, 0x0C0F	; 0x800c0f <midiDataByte+0x1>
    6f48:	fc d9       	rcall	.-3080   	; 0x6342 <register_onOff>
						} else if (midiDataByte[0] == MIDI_CTRL_ALLCTRLOFF){
    6f4a:	07 c0       	rjmp	.+14     	; 0x6f5a <midiIn_Process+0x154>
    6f4c:	99 37       	cpi	r25, 0x79	; 121
							midi_resetRegisters();
    6f4e:	29 f4       	brne	.+10     	; 0x6f5a <midiIn_Process+0x154>
    6f50:	38 db       	rcall	.-2448   	; 0x65c2 <midi_resetRegisters>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    6f52:	03 c0       	rjmp	.+6      	; 0x6f5a <midiIn_Process+0x154>
    6f54:	60 91 0e 0c 	lds	r22, 0x0C0E	; 0x800c0e <midiDataByte>
    6f58:	02 db       	rcall	.-2556   	; 0x655e <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6f5a:	10 92 43 08 	sts	0x0843, r1	; 0x800843 <midiDataByteCount>
    6f5e:	08 95       	ret

00006f60 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    6f60:	90 91 77 16 	lds	r25, 0x1677	; 0x801677 <serESPMidiTmp+0x2>
    6f64:	89 2f       	mov	r24, r25
    6f66:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6f68:	90 7f       	andi	r25, 0xF0	; 240
    6f6a:	90 38       	cpi	r25, 0x80	; 128
    6f6c:	49 f0       	breq	.+18     	; 0x6f80 <proc_ESPmidi+0x20>
    6f6e:	18 f4       	brcc	.+6      	; 0x6f76 <proc_ESPmidi+0x16>
    6f70:	99 23       	and	r25, r25
    6f72:	e1 f0       	breq	.+56     	; 0x6fac <proc_ESPmidi+0x4c>
    6f74:	08 95       	ret
    6f76:	90 39       	cpi	r25, 0x90	; 144
    6f78:	41 f0       	breq	.+16     	; 0x6f8a <proc_ESPmidi+0x2a>
    6f7a:	90 3b       	cpi	r25, 0xB0	; 176
    6f7c:	89 f0       	breq	.+34     	; 0x6fa0 <proc_ESPmidi+0x40>
    6f7e:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6f80:	40 e0       	ldi	r20, 0x00	; 0
    6f82:	60 91 76 16 	lds	r22, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6f86:	c3 ce       	rjmp	.-634    	; 0x6d0e <midiNote_to_Manual>
		break;
    6f88:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6f8a:	90 91 75 16 	lds	r25, 0x1675	; 0x801675 <serESPMidiTmp>
    6f8e:	91 11       	cpse	r25, r1
    6f90:	02 c0       	rjmp	.+4      	; 0x6f96 <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    6f92:	40 e0       	ldi	r20, 0x00	; 0
    6f94:	01 c0       	rjmp	.+2      	; 0x6f98 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    6f96:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6f98:	60 91 76 16 	lds	r22, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6f9c:	b8 ce       	rjmp	.-656    	; 0x6d0e <midiNote_to_Manual>
		break;
    6f9e:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6fa0:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6fa4:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    6fa6:	61 f4       	brne	.+24     	; 0x6fc0 <proc_ESPmidi+0x60>
    6fa8:	fb cd       	rjmp	.-1034   	; 0x6ba0 <midiAllNotesOff>
    6faa:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6fac:	90 91 76 16 	lds	r25, 0x1676	; 0x801676 <serESPMidiTmp+0x1>
    6fb0:	89 2f       	mov	r24, r25
    6fb2:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    6fb4:	90 7f       	andi	r25, 0xF0	; 240
    6fb6:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6fb8:	19 f4       	brne	.+6      	; 0x6fc0 <proc_ESPmidi+0x60>
    6fba:	60 91 75 16 	lds	r22, 0x1675	; 0x801675 <serESPMidiTmp>
    6fbe:	cf ca       	rjmp	.-2658   	; 0x655e <midi_ProgramChange>
    6fc0:	08 95       	ret

00006fc2 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    6fc2:	bf 92       	push	r11
    6fc4:	cf 92       	push	r12
    6fc6:	df 92       	push	r13
    6fc8:	ef 92       	push	r14
    6fca:	ff 92       	push	r15
    6fcc:	0f 93       	push	r16
    6fce:	1f 93       	push	r17
    6fd0:	cf 93       	push	r28
    6fd2:	df 93       	push	r29
    6fd4:	d8 2f       	mov	r29, r24
    6fd6:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6fd8:	8f d2       	rcall	.+1310   	; 0x74f8 <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6fda:	0c 2f       	mov	r16, r28
    6fdc:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6fde:	cf 71       	andi	r28, 0x1F	; 31
    6fe0:	cc 2e       	mov	r12, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6fe2:	00 32       	cpi	r16, 0x20	; 32
    6fe4:	09 f4       	brne	.+2      	; 0x6fe8 <midiKeyPress_Process+0x26>
    6fe6:	b8 c0       	rjmp	.+368    	; 0x7158 <midiKeyPress_Process+0x196>
    6fe8:	00 23       	and	r16, r16
    6fea:	09 f4       	brne	.+2      	; 0x6fee <midiKeyPress_Process+0x2c>
    6fec:	b7 c0       	rjmp	.+366    	; 0x715c <midiKeyPress_Process+0x19a>
    6fee:	ba c0       	rjmp	.+372    	; 0x7164 <midiKeyPress_Process+0x1a2>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6ff0:	d0 ff       	sbrs	r29, 0
    6ff2:	af c0       	rjmp	.+350    	; 0x7152 <midiKeyPress_Process+0x190>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6ff4:	20 e2       	ldi	r18, 0x20	; 32
    6ff6:	c2 9f       	mul	r28, r18
    6ff8:	c0 01       	movw	r24, r0
    6ffa:	11 24       	eor	r1, r1
    6ffc:	fc 2c       	mov	r15, r12
    6ffe:	f8 2a       	or	r15, r24
    7000:	8f 2d       	mov	r24, r15
    7002:	51 dd       	rcall	.-1374   	; 0x6aa6 <moduleBit_to_manualNote>
    7004:	b8 2e       	mov	r11, r24
    7006:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    7008:	18 2f       	mov	r17, r24
    700a:	8f 3f       	cpi	r24, 0xFF	; 255
    700c:	09 f4       	brne	.+2      	; 0x7010 <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    700e:	94 c0       	rjmp	.+296    	; 0x7138 <midiKeyPress_Process+0x176>
    7010:	69 2f       	mov	r22, r25
    7012:	61 dc       	rcall	.-1854   	; 0x68d6 <Manual_to_MidiNote>
    7014:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel <= MIDI_CHANNEL_16){
    7016:	80 31       	cpi	r24, 0x10	; 16
    7018:	08 f5       	brcc	.+66     	; 0x705c <midiKeyPress_Process+0x9a>
						// midi chan assigned note on/off can be sent
						if (command == MESSAGE_PIPE_ON_HI) {
    701a:	00 32       	cpi	r16, 0x20	; 32
							// note on
							serial1MIDISendCmd(MIDI_NOTEON,chanNote.hw_channel);
    701c:	61 f4       	brne	.+24     	; 0x7036 <midiKeyPress_Process+0x74>
    701e:	68 2f       	mov	r22, r24
    7020:	80 e9       	ldi	r24, 0x90	; 144
							serial1MIDISendData(chanNote.note);
    7022:	51 d2       	rcall	.+1186   	; 0x74c6 <serial1MIDISendCmd>
    7024:	8d 2d       	mov	r24, r13
    7026:	65 d2       	rcall	.+1226   	; 0x74f2 <serial1MIDISendData>
							serial1MIDISendData(MIDI_DEFAULT_VELOCITY);
    7028:	80 e4       	ldi	r24, 0x40	; 64
    702a:	63 d2       	rcall	.+1222   	; 0x74f2 <serial1MIDISendData>
    702c:	b0 92 24 02 	sts	0x0224, r11	; 0x800224 <midiLastOutManual>
							midiLastOutManual = manualNote.manual;
    7030:	e0 92 25 02 	sts	0x0225, r14	; 0x800225 <midiLastOutNote>
							midiLastOutNote = manualNote.note;
    7034:	13 c0       	rjmp	.+38     	; 0x705c <midiKeyPress_Process+0x9a>
    7036:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
						} else if (midi_Setting.VelZero4Off) {
    703a:	99 23       	and	r25, r25
							// note off
							serial1MIDISendCmd(MIDI_NOTEON,chanNote.hw_channel);
    703c:	41 f0       	breq	.+16     	; 0x704e <midiKeyPress_Process+0x8c>
    703e:	68 2f       	mov	r22, r24
    7040:	80 e9       	ldi	r24, 0x90	; 144
							serial1MIDISendData(chanNote.note);
    7042:	41 d2       	rcall	.+1154   	; 0x74c6 <serial1MIDISendCmd>
    7044:	8d 2d       	mov	r24, r13
							serial1MIDISendData(0);
    7046:	55 d2       	rcall	.+1194   	; 0x74f2 <serial1MIDISendData>
    7048:	80 e0       	ldi	r24, 0x00	; 0
    704a:	53 d2       	rcall	.+1190   	; 0x74f2 <serial1MIDISendData>
						} else {
							serial1MIDISendCmd(MIDI_NOTEOFF,chanNote.hw_channel);
    704c:	07 c0       	rjmp	.+14     	; 0x705c <midiKeyPress_Process+0x9a>
    704e:	68 2f       	mov	r22, r24
    7050:	80 e8       	ldi	r24, 0x80	; 128
    7052:	39 d2       	rcall	.+1138   	; 0x74c6 <serial1MIDISendCmd>
							serial1MIDISendData(chanNote.note);
    7054:	8d 2d       	mov	r24, r13
    7056:	4d d2       	rcall	.+1178   	; 0x74f2 <serial1MIDISendData>
    7058:	80 e0       	ldi	r24, 0x00	; 0
							serial1MIDISendData(0);
    705a:	4b d2       	rcall	.+1174   	; 0x74f2 <serial1MIDISendData>
    705c:	41 e0       	ldi	r20, 0x01	; 1
    705e:	00 32       	cpi	r16, 0x20	; 32
// 							midiLastOutManual = manualNote.manual;
// 							midiLastOutNote = manualNote.note;
// 						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    7060:	09 f0       	breq	.+2      	; 0x7064 <midiKeyPress_Process+0xa2>
    7062:	40 e0       	ldi	r20, 0x00	; 0
    7064:	d4 2e       	mov	r13, r20
    7066:	11 11       	cpse	r17, r1
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    7068:	19 c0       	rjmp	.+50     	; 0x709c <midiKeyPress_Process+0xda>
    706a:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <midi_Couplers>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    706e:	8f 3f       	cpi	r24, 0xFF	; 255
    7070:	19 f4       	brne	.+6      	; 0x7078 <midiKeyPress_Process+0xb6>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    7072:	6e 2d       	mov	r22, r14
    7074:	81 e0       	ldi	r24, 0x01	; 1
    7076:	3c dd       	rcall	.-1416   	; 0x6af0 <manual_NoteOnOff>
    7078:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <midi_Couplers+0x1>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    707c:	8f 3f       	cpi	r24, 0xFF	; 255
    707e:	21 f4       	brne	.+8      	; 0x7088 <midiKeyPress_Process+0xc6>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    7080:	4d 2d       	mov	r20, r13
    7082:	6e 2d       	mov	r22, r14
    7084:	82 e0       	ldi	r24, 0x02	; 2
    7086:	34 dd       	rcall	.-1432   	; 0x6af0 <manual_NoteOnOff>
    7088:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <midi_Couplers+0x3>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    708c:	8f 3f       	cpi	r24, 0xFF	; 255
    708e:	09 f0       	breq	.+2      	; 0x7092 <midiKeyPress_Process+0xd0>
    7090:	53 c0       	rjmp	.+166    	; 0x7138 <midiKeyPress_Process+0x176>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    7092:	4d 2d       	mov	r20, r13
    7094:	6e 2d       	mov	r22, r14
    7096:	83 e0       	ldi	r24, 0x03	; 3
    7098:	2b dd       	rcall	.-1450   	; 0x6af0 <manual_NoteOnOff>
    709a:	4e c0       	rjmp	.+156    	; 0x7138 <midiKeyPress_Process+0x176>
    709c:	11 30       	cpi	r17, 0x01	; 1
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    709e:	c9 f4       	brne	.+50     	; 0x70d2 <midiKeyPress_Process+0x110>
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    70a0:	80 91 39 08 	lds	r24, 0x0839	; 0x800839 <midi_Couplers+0x2>
    70a4:	8f 3f       	cpi	r24, 0xFF	; 255
    70a6:	19 f4       	brne	.+6      	; 0x70ae <midiKeyPress_Process+0xec>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    70a8:	6e 2d       	mov	r22, r14
    70aa:	82 e0       	ldi	r24, 0x02	; 2
    70ac:	21 dd       	rcall	.-1470   	; 0x6af0 <manual_NoteOnOff>
    70ae:	80 91 3b 08 	lds	r24, 0x083B	; 0x80083b <midi_Couplers+0x4>
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    70b2:	8f 3f       	cpi	r24, 0xFF	; 255
    70b4:	21 f4       	brne	.+8      	; 0x70be <midiKeyPress_Process+0xfc>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    70b6:	4d 2d       	mov	r20, r13
    70b8:	6e 2d       	mov	r22, r14
    70ba:	83 e0       	ldi	r24, 0x03	; 3
    70bc:	19 dd       	rcall	.-1486   	; 0x6af0 <manual_NoteOnOff>
    70be:	80 91 3d 08 	lds	r24, 0x083D	; 0x80083d <midi_Couplers+0x6>
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    70c2:	8f 3f       	cpi	r24, 0xFF	; 255
    70c4:	09 f0       	breq	.+2      	; 0x70c8 <midiKeyPress_Process+0x106>
    70c6:	38 c0       	rjmp	.+112    	; 0x7138 <midiKeyPress_Process+0x176>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    70c8:	4d 2d       	mov	r20, r13
    70ca:	6e 2d       	mov	r22, r14
    70cc:	80 e0       	ldi	r24, 0x00	; 0
    70ce:	10 dd       	rcall	.-1504   	; 0x6af0 <manual_NoteOnOff>
    70d0:	33 c0       	rjmp	.+102    	; 0x7138 <midiKeyPress_Process+0x176>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    70d2:	12 30       	cpi	r17, 0x02	; 2
    70d4:	c1 f4       	brne	.+48     	; 0x7106 <midiKeyPress_Process+0x144>
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    70d6:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <midi_Couplers+0x5>
    70da:	8f 3f       	cpi	r24, 0xFF	; 255
    70dc:	19 f4       	brne	.+6      	; 0x70e4 <midiKeyPress_Process+0x122>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    70de:	6e 2d       	mov	r22, r14
    70e0:	83 e0       	ldi	r24, 0x03	; 3
    70e2:	06 dd       	rcall	.-1524   	; 0x6af0 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    70e4:	80 91 3e 08 	lds	r24, 0x083E	; 0x80083e <midi_Couplers+0x7>
    70e8:	8f 3f       	cpi	r24, 0xFF	; 255
    70ea:	21 f4       	brne	.+8      	; 0x70f4 <midiKeyPress_Process+0x132>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    70ec:	4d 2d       	mov	r20, r13
    70ee:	6e 2d       	mov	r22, r14
    70f0:	80 e0       	ldi	r24, 0x00	; 0
    70f2:	fe dc       	rcall	.-1540   	; 0x6af0 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    70f4:	80 91 3f 08 	lds	r24, 0x083F	; 0x80083f <midi_Couplers+0x8>
    70f8:	8f 3f       	cpi	r24, 0xFF	; 255
    70fa:	f1 f4       	brne	.+60     	; 0x7138 <midiKeyPress_Process+0x176>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    70fc:	4d 2d       	mov	r20, r13
    70fe:	6e 2d       	mov	r22, r14
    7100:	81 e0       	ldi	r24, 0x01	; 1
    7102:	f6 dc       	rcall	.-1556   	; 0x6af0 <manual_NoteOnOff>
    7104:	19 c0       	rjmp	.+50     	; 0x7138 <midiKeyPress_Process+0x176>
						}
					} else if (manualNote.manual == MANUAL_P) {
    7106:	13 30       	cpi	r17, 0x03	; 3
    7108:	b9 f4       	brne	.+46     	; 0x7138 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    710a:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <midi_Couplers+0x9>
    710e:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    7110:	19 f4       	brne	.+6      	; 0x7118 <midiKeyPress_Process+0x156>
    7112:	6e 2d       	mov	r22, r14
    7114:	80 e0       	ldi	r24, 0x00	; 0
    7116:	ec dc       	rcall	.-1576   	; 0x6af0 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    7118:	80 91 41 08 	lds	r24, 0x0841	; 0x800841 <midi_Couplers+0xa>
    711c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    711e:	21 f4       	brne	.+8      	; 0x7128 <midiKeyPress_Process+0x166>
    7120:	4d 2d       	mov	r20, r13
    7122:	6e 2d       	mov	r22, r14
    7124:	81 e0       	ldi	r24, 0x01	; 1
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    7126:	e4 dc       	rcall	.-1592   	; 0x6af0 <manual_NoteOnOff>
    7128:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <midi_Couplers+0xb>
    712c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    712e:	21 f4       	brne	.+8      	; 0x7138 <midiKeyPress_Process+0x176>
    7130:	4d 2d       	mov	r20, r13
    7132:	6e 2d       	mov	r22, r14
    7134:	82 e0       	ldi	r24, 0x02	; 2
    7136:	dc dc       	rcall	.-1608   	; 0x6af0 <manual_NoteOnOff>
				} // if (manualNote.manual != MANUAL_NONE)
				// no else: modbit can be assigned to manual AND register for test purpose!
				// now check if modbit is assigned to register 
				// midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
				// V 0.83: send RegOn/Off to MIDI out
				uint8_t regNr = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit));
    7138:	8f 2d       	mov	r24, r15
    713a:	27 d8       	rcall	.-4018   	; 0x618a <moduleBit_to_registerNr>
    713c:	18 2f       	mov	r17, r24
    713e:	80 34       	cpi	r24, 0x40	; 64
				if (regNr < REGISTER_COUNT){
    7140:	40 f4       	brcc	.+16     	; 0x7152 <midiKeyPress_Process+0x190>
    7142:	00 32       	cpi	r16, 0x20	; 32
					// modulebit is assigned to a register
					if (command == MESSAGE_PIPE_ON_HI){
    7144:	19 f4       	brne	.+6      	; 0x714c <midiKeyPress_Process+0x18a>
    7146:	7c d9       	rcall	.-3336   	; 0x6440 <midiSendRegOn>
						midiSendRegOn(regNr);
    7148:	10 68       	ori	r17, 0x80	; 128
    714a:	01 c0       	rjmp	.+2      	; 0x714e <midiKeyPress_Process+0x18c>
						regNr |= REGISTER_WAS_SET;
    714c:	8f d9       	rcall	.-3298   	; 0x646c <midiSendRegOff>
    714e:	10 93 59 09 	sts	0x0959, r17	; 0x800959 <midi_RegisterChanged>
					} else {
						midiSendRegOff(regNr);
    7152:	d6 95       	lsr	r29
					}
					midi_RegisterChanged = regNr; // for LCD out in main()
    7154:	cf 5f       	subi	r28, 0xFF	; 255
    7156:	03 c0       	rjmp	.+6      	; 0x715e <midiKeyPress_Process+0x19c>
				}
				// TODO process other than manual/register key events here (none definded yet)
			}
			moduleBits >>= 1; // next module
    7158:	c0 e0       	ldi	r28, 0x00	; 0
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    715a:	01 c0       	rjmp	.+2      	; 0x715e <midiKeyPress_Process+0x19c>
    715c:	c0 e0       	ldi	r28, 0x00	; 0
    715e:	c8 30       	cpi	r28, 0x08	; 8
    7160:	08 f4       	brcc	.+2      	; 0x7164 <midiKeyPress_Process+0x1a2>
    7162:	46 cf       	rjmp	.-372    	; 0x6ff0 <midiKeyPress_Process+0x2e>
    7164:	df 91       	pop	r29
    7166:	cf 91       	pop	r28
    7168:	1f 91       	pop	r17
				// TODO process other than manual/register key events here (none definded yet)
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    716a:	0f 91       	pop	r16
    716c:	ff 90       	pop	r15
    716e:	ef 90       	pop	r14
    7170:	df 90       	pop	r13
    7172:	cf 90       	pop	r12
    7174:	bf 90       	pop	r11
    7176:	08 95       	ret

00007178 <midiSendAllNotesOff>:
    7178:	60 91 4d 08 	lds	r22, 0x084D	; 0x80084d <midiThrough+0x1>
    717c:	60 31       	cpi	r22, 0x10	; 16

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	if (midiThrough.OutChannel <= MIDI_CHANNEL_16) {
    717e:	30 f4       	brcc	.+12     	; 0x718c <midiSendAllNotesOff+0x14>
		serial1MIDISendCmd(MIDI_CTRLCHG,midiThrough.OutChannel);
    7180:	80 eb       	ldi	r24, 0xB0	; 176
    7182:	a1 d1       	rcall	.+834    	; 0x74c6 <serial1MIDISendCmd>
		serial1MIDISendData(MIDI_CTRL_ALLNOTESOFF);
    7184:	8b e7       	ldi	r24, 0x7B	; 123
    7186:	b5 d1       	rcall	.+874    	; 0x74f2 <serial1MIDISendData>
		serial1MIDISendData(0);
    7188:	80 e0       	ldi	r24, 0x00	; 0
    718a:	b3 c1       	rjmp	.+870    	; 0x74f2 <serial1MIDISendData>
    718c:	08 95       	ret

0000718e <midi_SendActiveSense>:
    718e:	60 e0       	ldi	r22, 0x00	; 0
// 		}
// 	}
}

void midi_SendActiveSense(){
	serial1MIDISendCmd(MIDI_ACTIVESENSING,0);
    7190:	8e ef       	ldi	r24, 0xFE	; 254
    7192:	99 c1       	rjmp	.+818    	; 0x74c6 <serial1MIDISendCmd>
    7194:	08 95       	ret

00007196 <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    7196:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    719a:	88 23       	and	r24, r24
    719c:	21 f0       	breq	.+8      	; 0x71a6 <midi_CheckTxActiveSense+0x10>
    719e:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <swTimer+0x10>
    71a2:	8f 3f       	cpi	r24, 0xFF	; 255
    71a4:	99 f4       	brne	.+38     	; 0x71cc <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    71a6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    71a8:	f8 94       	cli
    71aa:	81 e0       	ldi	r24, 0x01	; 1
    71ac:	06 c0       	rjmp	.+12     	; 0x71ba <midi_CheckTxActiveSense+0x24>
    71ae:	e0 e5       	ldi	r30, 0x50	; 80
    71b0:	f2 e0       	ldi	r31, 0x02	; 2
    71b2:	8a e0       	ldi	r24, 0x0A	; 10
    71b4:	80 8b       	std	Z+16, r24	; 0x10
    71b6:	11 8a       	std	Z+17, r1	; 0x11
    71b8:	80 e0       	ldi	r24, 0x00	; 0
    71ba:	81 11       	cpse	r24, r1
    71bc:	f8 cf       	rjmp	.-16     	; 0x71ae <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    71be:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    71c0:	80 91 56 09 	lds	r24, 0x0956	; 0x800956 <midi_Setting>
    71c4:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    71c6:	e3 df       	rcall	.-58     	; 0x718e <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TX_RESET_LASTCMD
    71c8:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <midiTxLastCmd>
    71cc:	08 95       	ret

000071ce <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    71ce:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    71d2:	8f e1       	ldi	r24, 0x1F	; 31
    71d4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    71d8:	e9 ec       	ldi	r30, 0xC9	; 201
    71da:	f0 e0       	ldi	r31, 0x00	; 0
    71dc:	80 81       	ld	r24, Z
    71de:	88 69       	ori	r24, 0x98	; 152
    71e0:	80 83       	st	Z, r24
    71e2:	ea ec       	ldi	r30, 0xCA	; 202
    71e4:	f0 e0       	ldi	r31, 0x00	; 0
    71e6:	80 81       	ld	r24, Z
    71e8:	86 60       	ori	r24, 0x06	; 6
    71ea:	80 83       	st	Z, r24
    71ec:	10 92 6e 16 	sts	0x166E, r1	; 0x80166e <midiRxInIndex>
    71f0:	10 92 7d 16 	sts	0x167D, r1	; 0x80167d <midiRxOutIndex>
    71f4:	10 92 19 14 	sts	0x1419, r1	; 0x801419 <midiTxInIndex>
    71f8:	10 92 26 14 	sts	0x1426, r1	; 0x801426 <midiTxOutIndex>
    71fc:	10 92 25 14 	sts	0x1425, r1	; 0x801425 <midiRxOvfl>
    7200:	10 92 2a 14 	sts	0x142A, r1	; 0x80142a <midiTxOvfl>
    7204:	10 92 79 16 	sts	0x1679, r1	; 0x801679 <midiRxOvflCount>
    7208:	10 92 80 16 	sts	0x1680, r1	; 0x801680 <midiTxOvflCount>
    720c:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <midiRxBuffUsage>
    7210:	10 92 74 16 	sts	0x1674, r1	; 0x801674 <midiTxBuffUsage>
    7214:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <midiTxLastCmd>
    7218:	08 95       	ret

0000721a <__vector_36>:
    721a:	1f 92       	push	r1
    721c:	0f 92       	push	r0
    721e:	0f b6       	in	r0, 0x3f	; 63
    7220:	0f 92       	push	r0
    7222:	11 24       	eor	r1, r1
    7224:	0b b6       	in	r0, 0x3b	; 59
    7226:	0f 92       	push	r0
    7228:	8f 93       	push	r24
    722a:	9f 93       	push	r25
    722c:	ef 93       	push	r30
    722e:	ff 93       	push	r31
    7230:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    7234:	e0 91 6e 16 	lds	r30, 0x166E	; 0x80166e <midiRxInIndex>
    7238:	f0 e0       	ldi	r31, 0x00	; 0
    723a:	e5 59       	subi	r30, 0x95	; 149
    723c:	fb 4e       	sbci	r31, 0xEB	; 235
    723e:	80 83       	st	Z, r24
    7240:	80 91 6e 16 	lds	r24, 0x166E	; 0x80166e <midiRxInIndex>
    7244:	8f 5f       	subi	r24, 0xFF	; 255
    7246:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiRxOutIndex>
    724a:	89 13       	cpse	r24, r25
    724c:	0e c0       	rjmp	.+28     	; 0x726a <__vector_36+0x50>
    724e:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <midiRxOvflCount>
    7252:	88 23       	and	r24, r24
    7254:	31 f0       	breq	.+12     	; 0x7262 <__vector_36+0x48>
    7256:	8f 3f       	cpi	r24, 0xFF	; 255
    7258:	51 f0       	breq	.+20     	; 0x726e <__vector_36+0x54>
    725a:	8f 5f       	subi	r24, 0xFF	; 255
    725c:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <midiRxOvflCount>
    7260:	06 c0       	rjmp	.+12     	; 0x726e <__vector_36+0x54>
    7262:	81 e0       	ldi	r24, 0x01	; 1
    7264:	80 93 79 16 	sts	0x1679, r24	; 0x801679 <midiRxOvflCount>
    7268:	02 c0       	rjmp	.+4      	; 0x726e <__vector_36+0x54>
    726a:	80 93 6e 16 	sts	0x166E, r24	; 0x80166e <midiRxInIndex>
    726e:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <midiRxInIndex>
    7272:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    7276:	89 17       	cp	r24, r25
    7278:	30 f4       	brcc	.+12     	; 0x7286 <__vector_36+0x6c>
    727a:	80 91 6e 16 	lds	r24, 0x166E	; 0x80166e <midiRxInIndex>
    727e:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiRxOutIndex>
    7282:	89 1b       	sub	r24, r25
    7284:	05 c0       	rjmp	.+10     	; 0x7290 <__vector_36+0x76>
    7286:	80 91 6e 16 	lds	r24, 0x166E	; 0x80166e <midiRxInIndex>
    728a:	90 91 7d 16 	lds	r25, 0x167D	; 0x80167d <midiRxOutIndex>
    728e:	89 1b       	sub	r24, r25
    7290:	90 91 6b 15 	lds	r25, 0x156B	; 0x80156b <midiRxBuffUsage>
    7294:	98 17       	cp	r25, r24
    7296:	10 f4       	brcc	.+4      	; 0x729c <__vector_36+0x82>
    7298:	80 93 6b 15 	sts	0x156B, r24	; 0x80156b <midiRxBuffUsage>
    729c:	80 91 03 19 	lds	r24, 0x1903	; 0x801903 <midiRxBytesCount>
    72a0:	90 91 04 19 	lds	r25, 0x1904	; 0x801904 <midiRxBytesCount+0x1>
    72a4:	01 96       	adiw	r24, 0x01	; 1
    72a6:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <midiRxBytesCount+0x1>
    72aa:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <midiRxBytesCount>
    72ae:	ff 91       	pop	r31
    72b0:	ef 91       	pop	r30
    72b2:	9f 91       	pop	r25
    72b4:	8f 91       	pop	r24
    72b6:	0f 90       	pop	r0
    72b8:	0b be       	out	0x3b, r0	; 59
    72ba:	0f 90       	pop	r0
    72bc:	0f be       	out	0x3f, r0	; 63
    72be:	0f 90       	pop	r0
    72c0:	1f 90       	pop	r1
    72c2:	18 95       	reti

000072c4 <__vector_37>:
    72c4:	1f 92       	push	r1
    72c6:	0f 92       	push	r0
    72c8:	0f b6       	in	r0, 0x3f	; 63
    72ca:	0f 92       	push	r0
    72cc:	11 24       	eor	r1, r1
    72ce:	0b b6       	in	r0, 0x3b	; 59
    72d0:	0f 92       	push	r0
    72d2:	8f 93       	push	r24
    72d4:	9f 93       	push	r25
    72d6:	ef 93       	push	r30
    72d8:	ff 93       	push	r31
    72da:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    72de:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    72e2:	98 17       	cp	r25, r24
    72e4:	b9 f0       	breq	.+46     	; 0x7314 <__vector_37+0x50>
    72e6:	e0 91 26 14 	lds	r30, 0x1426	; 0x801426 <midiTxOutIndex>
    72ea:	f0 e0       	ldi	r31, 0x00	; 0
    72ec:	e4 59       	subi	r30, 0x94	; 148
    72ee:	fa 4e       	sbci	r31, 0xEA	; 234
    72f0:	80 81       	ld	r24, Z
    72f2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    72f6:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <midiTxOutIndex>
    72fa:	8f 5f       	subi	r24, 0xFF	; 255
    72fc:	80 93 26 14 	sts	0x1426, r24	; 0x801426 <midiTxOutIndex>
    7300:	80 91 7a 16 	lds	r24, 0x167A	; 0x80167a <midiTxBytesCount>
    7304:	90 91 7b 16 	lds	r25, 0x167B	; 0x80167b <midiTxBytesCount+0x1>
    7308:	01 96       	adiw	r24, 0x01	; 1
    730a:	90 93 7b 16 	sts	0x167B, r25	; 0x80167b <midiTxBytesCount+0x1>
    730e:	80 93 7a 16 	sts	0x167A, r24	; 0x80167a <midiTxBytesCount>
    7312:	05 c0       	rjmp	.+10     	; 0x731e <__vector_37+0x5a>
    7314:	e9 ec       	ldi	r30, 0xC9	; 201
    7316:	f0 e0       	ldi	r31, 0x00	; 0
    7318:	80 81       	ld	r24, Z
    731a:	8f 7d       	andi	r24, 0xDF	; 223
    731c:	80 83       	st	Z, r24
    731e:	ff 91       	pop	r31
    7320:	ef 91       	pop	r30
    7322:	9f 91       	pop	r25
    7324:	8f 91       	pop	r24
    7326:	0f 90       	pop	r0
    7328:	0b be       	out	0x3b, r0	; 59
    732a:	0f 90       	pop	r0
    732c:	0f be       	out	0x3f, r0	; 63
    732e:	0f 90       	pop	r0
    7330:	1f 90       	pop	r1
    7332:	18 95       	reti

00007334 <serial0SER_USBSend>:
    7334:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <serUSBTxInIndex>
    7338:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <serUSBTxInIndex+0x1>
    733c:	a1 ec       	ldi	r26, 0xC1	; 193
    733e:	b0 e0       	ldi	r27, 0x00	; 0
    7340:	9c 91       	ld	r25, X
    7342:	9f 7d       	andi	r25, 0xDF	; 223
    7344:	9c 93       	st	X, r25
    7346:	af 01       	movw	r20, r30
    7348:	4f 5f       	subi	r20, 0xFF	; 255
    734a:	5f 4f       	sbci	r21, 0xFF	; 255
    734c:	80 83       	st	Z, r24
    734e:	84 e1       	ldi	r24, 0x14	; 20
    7350:	46 31       	cpi	r20, 0x16	; 22
    7352:	58 07       	cpc	r21, r24
    7354:	19 f0       	breq	.+6      	; 0x735c <serial0SER_USBSend+0x28>
    7356:	10 f0       	brcs	.+4      	; 0x735c <serial0SER_USBSend+0x28>
    7358:	47 e1       	ldi	r20, 0x17	; 23
    735a:	5c e0       	ldi	r21, 0x0C	; 12
    735c:	9f b7       	in	r25, 0x3f	; 63
    735e:	f8 94       	cli
    7360:	81 e0       	ldi	r24, 0x01	; 1
    7362:	05 c0       	rjmp	.+10     	; 0x736e <serial0SER_USBSend+0x3a>
    7364:	20 91 17 14 	lds	r18, 0x1417	; 0x801417 <serUSBTxOutIndex>
    7368:	30 91 18 14 	lds	r19, 0x1418	; 0x801418 <serUSBTxOutIndex+0x1>
    736c:	80 e0       	ldi	r24, 0x00	; 0
    736e:	81 11       	cpse	r24, r1
    7370:	f9 cf       	rjmp	.-14     	; 0x7364 <serial0SER_USBSend+0x30>
    7372:	9f bf       	out	0x3f, r25	; 63
    7374:	42 17       	cp	r20, r18
    7376:	53 07       	cpc	r21, r19
    7378:	49 f4       	brne	.+18     	; 0x738c <serial0SER_USBSend+0x58>
    737a:	8f ef       	ldi	r24, 0xFF	; 255
    737c:	80 93 73 16 	sts	0x1673, r24	; 0x801673 <serUSBOvflFlag>
    7380:	e1 ec       	ldi	r30, 0xC1	; 193
    7382:	f0 e0       	ldi	r31, 0x00	; 0
    7384:	80 81       	ld	r24, Z
    7386:	80 62       	ori	r24, 0x20	; 32
    7388:	80 83       	st	Z, r24
    738a:	08 95       	ret
    738c:	50 93 02 19 	sts	0x1902, r21	; 0x801902 <serUSBTxInIndex+0x1>
    7390:	40 93 01 19 	sts	0x1901, r20	; 0x801901 <serUSBTxInIndex>
    7394:	e1 ec       	ldi	r30, 0xC1	; 193
    7396:	f0 e0       	ldi	r31, 0x00	; 0
    7398:	80 81       	ld	r24, Z
    739a:	80 62       	ori	r24, 0x20	; 32
    739c:	80 83       	st	Z, r24
    739e:	08 95       	ret

000073a0 <serial0USB_logMIDIin>:
    73a0:	cf 93       	push	r28
    73a2:	90 91 7c 16 	lds	r25, 0x167C	; 0x80167c <serUSB_Active>
    73a6:	99 23       	and	r25, r25
    73a8:	61 f0       	breq	.+24     	; 0x73c2 <serial0USB_logMIDIin+0x22>
    73aa:	c8 2f       	mov	r28, r24
    73ac:	89 e6       	ldi	r24, 0x69	; 105
    73ae:	c2 df       	rcall	.-124    	; 0x7334 <serial0SER_USBSend>
    73b0:	8c 2f       	mov	r24, r28
    73b2:	82 95       	swap	r24
    73b4:	8f 70       	andi	r24, 0x0F	; 15
    73b6:	bf d2       	rcall	.+1406   	; 0x7936 <nibbleToChr>
    73b8:	bd df       	rcall	.-134    	; 0x7334 <serial0SER_USBSend>
    73ba:	8c 2f       	mov	r24, r28
    73bc:	8f 70       	andi	r24, 0x0F	; 15
    73be:	bb d2       	rcall	.+1398   	; 0x7936 <nibbleToChr>
    73c0:	b9 df       	rcall	.-142    	; 0x7334 <serial0SER_USBSend>
    73c2:	cf 91       	pop	r28
    73c4:	08 95       	ret

000073c6 <serial1MIDIReadRx>:
    73c6:	cf 93       	push	r28
    73c8:	90 91 6e 16 	lds	r25, 0x166E	; 0x80166e <midiRxInIndex>
    73cc:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    73d0:	98 17       	cp	r25, r24
    73d2:	71 f0       	breq	.+28     	; 0x73f0 <serial1MIDIReadRx+0x2a>
    73d4:	e0 91 7d 16 	lds	r30, 0x167D	; 0x80167d <midiRxOutIndex>
    73d8:	f0 e0       	ldi	r31, 0x00	; 0
    73da:	e5 59       	subi	r30, 0x95	; 149
    73dc:	fb 4e       	sbci	r31, 0xEB	; 235
    73de:	c0 81       	ld	r28, Z
    73e0:	8c 2f       	mov	r24, r28
    73e2:	de df       	rcall	.-68     	; 0x73a0 <serial0USB_logMIDIin>
    73e4:	80 91 7d 16 	lds	r24, 0x167D	; 0x80167d <midiRxOutIndex>
    73e8:	8f 5f       	subi	r24, 0xFF	; 255
    73ea:	80 93 7d 16 	sts	0x167D, r24	; 0x80167d <midiRxOutIndex>
    73ee:	01 c0       	rjmp	.+2      	; 0x73f2 <serial1MIDIReadRx+0x2c>
    73f0:	cd ef       	ldi	r28, 0xFD	; 253
    73f2:	8c 2f       	mov	r24, r28
    73f4:	cf 91       	pop	r28
    73f6:	08 95       	ret

000073f8 <serial0USB_logMIDIout>:
    73f8:	cf 93       	push	r28
    73fa:	90 91 7c 16 	lds	r25, 0x167C	; 0x80167c <serUSB_Active>
    73fe:	99 23       	and	r25, r25
    7400:	61 f0       	breq	.+24     	; 0x741a <serial0USB_logMIDIout+0x22>
    7402:	c8 2f       	mov	r28, r24
    7404:	8f e6       	ldi	r24, 0x6F	; 111
    7406:	96 df       	rcall	.-212    	; 0x7334 <serial0SER_USBSend>
    7408:	8c 2f       	mov	r24, r28
    740a:	82 95       	swap	r24
    740c:	8f 70       	andi	r24, 0x0F	; 15
    740e:	93 d2       	rcall	.+1318   	; 0x7936 <nibbleToChr>
    7410:	91 df       	rcall	.-222    	; 0x7334 <serial0SER_USBSend>
    7412:	8c 2f       	mov	r24, r28
    7414:	8f 70       	andi	r24, 0x0F	; 15
    7416:	8f d2       	rcall	.+1310   	; 0x7936 <nibbleToChr>
    7418:	8d df       	rcall	.-230    	; 0x7334 <serial0SER_USBSend>
    741a:	cf 91       	pop	r28
    741c:	08 95       	ret

0000741e <serial1MIDISend>:
    741e:	cf 93       	push	r28
    7420:	c8 2f       	mov	r28, r24
    7422:	9f b7       	in	r25, 0x3f	; 63
    7424:	f8 94       	cli
    7426:	81 e0       	ldi	r24, 0x01	; 1
    7428:	06 c0       	rjmp	.+12     	; 0x7436 <serial1MIDISend+0x18>
    742a:	e0 e5       	ldi	r30, 0x50	; 80
    742c:	f2 e0       	ldi	r31, 0x02	; 2
    742e:	8a e0       	ldi	r24, 0x0A	; 10
    7430:	80 8b       	std	Z+16, r24	; 0x10
    7432:	11 8a       	std	Z+17, r1	; 0x11
    7434:	80 e0       	ldi	r24, 0x00	; 0
    7436:	81 11       	cpse	r24, r1
    7438:	f8 cf       	rjmp	.-16     	; 0x742a <serial1MIDISend+0xc>
    743a:	9f bf       	out	0x3f, r25	; 63
    743c:	e9 ec       	ldi	r30, 0xC9	; 201
    743e:	f0 e0       	ldi	r31, 0x00	; 0
    7440:	80 81       	ld	r24, Z
    7442:	8f 7d       	andi	r24, 0xDF	; 223
    7444:	80 83       	st	Z, r24
    7446:	cf 3f       	cpi	r28, 0xFF	; 255
    7448:	09 f4       	brne	.+2      	; 0x744c <serial1MIDISend+0x2e>
    744a:	78 94       	sei
    744c:	8c 2f       	mov	r24, r28
    744e:	d4 df       	rcall	.-88     	; 0x73f8 <serial0USB_logMIDIout>
    7450:	e0 91 19 14 	lds	r30, 0x1419	; 0x801419 <midiTxInIndex>
    7454:	f0 e0       	ldi	r31, 0x00	; 0
    7456:	e4 59       	subi	r30, 0x94	; 148
    7458:	fa 4e       	sbci	r31, 0xEA	; 234
    745a:	c0 83       	st	Z, r28
    745c:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    7460:	8f 5f       	subi	r24, 0xFF	; 255
    7462:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    7466:	89 13       	cpse	r24, r25
    7468:	0e c0       	rjmp	.+28     	; 0x7486 <serial1MIDISend+0x68>
    746a:	80 91 80 16 	lds	r24, 0x1680	; 0x801680 <midiTxOvflCount>
    746e:	88 23       	and	r24, r24
    7470:	31 f0       	breq	.+12     	; 0x747e <serial1MIDISend+0x60>
    7472:	8f 3f       	cpi	r24, 0xFF	; 255
    7474:	51 f0       	breq	.+20     	; 0x748a <serial1MIDISend+0x6c>
    7476:	8f 5f       	subi	r24, 0xFF	; 255
    7478:	80 93 80 16 	sts	0x1680, r24	; 0x801680 <midiTxOvflCount>
    747c:	06 c0       	rjmp	.+12     	; 0x748a <serial1MIDISend+0x6c>
    747e:	81 e0       	ldi	r24, 0x01	; 1
    7480:	80 93 80 16 	sts	0x1680, r24	; 0x801680 <midiTxOvflCount>
    7484:	02 c0       	rjmp	.+4      	; 0x748a <serial1MIDISend+0x6c>
    7486:	80 93 19 14 	sts	0x1419, r24	; 0x801419 <midiTxInIndex>
    748a:	90 91 19 14 	lds	r25, 0x1419	; 0x801419 <midiTxInIndex>
    748e:	80 91 26 14 	lds	r24, 0x1426	; 0x801426 <midiTxOutIndex>
    7492:	89 17       	cp	r24, r25
    7494:	30 f4       	brcc	.+12     	; 0x74a2 <serial1MIDISend+0x84>
    7496:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    749a:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    749e:	89 1b       	sub	r24, r25
    74a0:	05 c0       	rjmp	.+10     	; 0x74ac <serial1MIDISend+0x8e>
    74a2:	80 91 19 14 	lds	r24, 0x1419	; 0x801419 <midiTxInIndex>
    74a6:	90 91 26 14 	lds	r25, 0x1426	; 0x801426 <midiTxOutIndex>
    74aa:	89 1b       	sub	r24, r25
    74ac:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <midiTxBuffUsage>
    74b0:	98 17       	cp	r25, r24
    74b2:	10 f4       	brcc	.+4      	; 0x74b8 <serial1MIDISend+0x9a>
    74b4:	80 93 74 16 	sts	0x1674, r24	; 0x801674 <midiTxBuffUsage>
    74b8:	e9 ec       	ldi	r30, 0xC9	; 201
    74ba:	f0 e0       	ldi	r31, 0x00	; 0
    74bc:	80 81       	ld	r24, Z
    74be:	80 62       	ori	r24, 0x20	; 32
    74c0:	80 83       	st	Z, r24
    74c2:	cf 91       	pop	r28
    74c4:	08 95       	ret

000074c6 <serial1MIDISendCmd>:
    74c6:	88 23       	and	r24, r24
    74c8:	9c f4       	brge	.+38     	; 0x74f0 <serial1MIDISendCmd+0x2a>
    74ca:	60 31       	cpi	r22, 0x10	; 16
    74cc:	08 f4       	brcc	.+2      	; 0x74d0 <serial1MIDISendCmd+0xa>
    74ce:	86 2b       	or	r24, r22
    74d0:	90 91 57 09 	lds	r25, 0x0957	; 0x800957 <midi_Setting+0x1>
    74d4:	99 23       	and	r25, r25
    74d6:	59 f0       	breq	.+22     	; 0x74ee <serial1MIDISendCmd+0x28>
    74d8:	80 3c       	cpi	r24, 0xC0	; 192
    74da:	38 f4       	brcc	.+14     	; 0x74ea <serial1MIDISendCmd+0x24>
    74dc:	90 91 27 14 	lds	r25, 0x1427	; 0x801427 <midiTxLastCmd>
    74e0:	89 17       	cp	r24, r25
    74e2:	31 f0       	breq	.+12     	; 0x74f0 <serial1MIDISendCmd+0x2a>
    74e4:	80 93 27 14 	sts	0x1427, r24	; 0x801427 <midiTxLastCmd>
    74e8:	02 c0       	rjmp	.+4      	; 0x74ee <serial1MIDISendCmd+0x28>
    74ea:	10 92 27 14 	sts	0x1427, r1	; 0x801427 <midiTxLastCmd>
    74ee:	97 cf       	rjmp	.-210    	; 0x741e <serial1MIDISend>
    74f0:	08 95       	ret

000074f2 <serial1MIDISendData>:
    74f2:	8f 77       	andi	r24, 0x7F	; 127
    74f4:	94 cf       	rjmp	.-216    	; 0x741e <serial1MIDISend>
    74f6:	08 95       	ret

000074f8 <serial0USB_logPipeIn>:
    74f8:	cf 93       	push	r28
    74fa:	df 93       	push	r29
    74fc:	20 91 7c 16 	lds	r18, 0x167C	; 0x80167c <serUSB_Active>
    7500:	22 23       	and	r18, r18
    7502:	a9 f0       	breq	.+42     	; 0x752e <serial0USB_logPipeIn+0x36>
    7504:	c9 2f       	mov	r28, r25
    7506:	d8 2f       	mov	r29, r24
    7508:	8b e6       	ldi	r24, 0x6B	; 107
    750a:	14 df       	rcall	.-472    	; 0x7334 <serial0SER_USBSend>
    750c:	8c 2f       	mov	r24, r28
    750e:	82 95       	swap	r24
    7510:	8f 70       	andi	r24, 0x0F	; 15
    7512:	11 d2       	rcall	.+1058   	; 0x7936 <nibbleToChr>
    7514:	0f df       	rcall	.-482    	; 0x7334 <serial0SER_USBSend>
    7516:	cf 70       	andi	r28, 0x0F	; 15
    7518:	8c 2f       	mov	r24, r28
    751a:	0d d2       	rcall	.+1050   	; 0x7936 <nibbleToChr>
    751c:	0b df       	rcall	.-490    	; 0x7334 <serial0SER_USBSend>
    751e:	8d 2f       	mov	r24, r29
    7520:	82 95       	swap	r24
    7522:	8f 70       	andi	r24, 0x0F	; 15
    7524:	08 d2       	rcall	.+1040   	; 0x7936 <nibbleToChr>
    7526:	06 df       	rcall	.-500    	; 0x7334 <serial0SER_USBSend>
    7528:	8c 2f       	mov	r24, r28
    752a:	05 d2       	rcall	.+1034   	; 0x7936 <nibbleToChr>
    752c:	03 df       	rcall	.-506    	; 0x7334 <serial0SER_USBSend>
    752e:	df 91       	pop	r29
    7530:	cf 91       	pop	r28
    7532:	08 95       	ret

00007534 <serial0SER_USB_sendStringP>:
    7534:	cf 93       	push	r28
    7536:	df 93       	push	r29
    7538:	fc 01       	movw	r30, r24
    753a:	02 c0       	rjmp	.+4      	; 0x7540 <serial0SER_USB_sendStringP+0xc>
    753c:	fb de       	rcall	.-522    	; 0x7334 <serial0SER_USBSend>
    753e:	fe 01       	movw	r30, r28
    7540:	ef 01       	movw	r28, r30
    7542:	21 96       	adiw	r28, 0x01	; 1
    7544:	84 91       	lpm	r24, Z
    7546:	88 23       	and	r24, r24
    7548:	21 f0       	breq	.+8      	; 0x7552 <serial0SER_USB_sendStringP+0x1e>
    754a:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <serUSBOvflFlag>
    754e:	9f 3f       	cpi	r25, 0xFF	; 255
    7550:	a9 f7       	brne	.-22     	; 0x753c <serial0SER_USB_sendStringP+0x8>
    7552:	df 91       	pop	r29
    7554:	cf 91       	pop	r28
    7556:	08 95       	ret

00007558 <serial0SER_USB_sendCRLF>:
    7558:	82 eb       	ldi	r24, 0xB2	; 178
    755a:	94 e1       	ldi	r25, 0x14	; 20
    755c:	eb cf       	rjmp	.-42     	; 0x7534 <serial0SER_USB_sendStringP>
    755e:	08 95       	ret

00007560 <init_Serial0SerUSB>:
    7560:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    7564:	88 e0       	ldi	r24, 0x08	; 8
    7566:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    756a:	e1 ec       	ldi	r30, 0xC1	; 193
    756c:	f0 e0       	ldi	r31, 0x00	; 0
    756e:	80 81       	ld	r24, Z
    7570:	88 69       	ori	r24, 0x98	; 152
    7572:	80 83       	st	Z, r24
    7574:	e2 ec       	ldi	r30, 0xC2	; 194
    7576:	f0 e0       	ldi	r31, 0x00	; 0
    7578:	80 81       	ld	r24, Z
    757a:	86 60       	ori	r24, 0x06	; 6
    757c:	80 83       	st	Z, r24
    757e:	8b e2       	ldi	r24, 0x2B	; 43
    7580:	94 e1       	ldi	r25, 0x14	; 20
    7582:	90 93 7f 16 	sts	0x167F, r25	; 0x80167f <serUSBRxInIndex+0x1>
    7586:	80 93 7e 16 	sts	0x167E, r24	; 0x80167e <serUSBRxInIndex>
    758a:	90 93 72 16 	sts	0x1672, r25	; 0x801672 <serUSBRxOutIndex+0x1>
    758e:	80 93 71 16 	sts	0x1671, r24	; 0x801671 <serUSBRxOutIndex>
    7592:	87 e1       	ldi	r24, 0x17	; 23
    7594:	9c e0       	ldi	r25, 0x0C	; 12
    7596:	90 93 18 14 	sts	0x1418, r25	; 0x801418 <serUSBTxOutIndex+0x1>
    759a:	80 93 17 14 	sts	0x1417, r24	; 0x801417 <serUSBTxOutIndex>
    759e:	90 93 02 19 	sts	0x1902, r25	; 0x801902 <serUSBTxInIndex+0x1>
    75a2:	80 93 01 19 	sts	0x1901, r24	; 0x801901 <serUSBTxInIndex>
    75a6:	10 92 73 16 	sts	0x1673, r1	; 0x801673 <serUSBOvflFlag>
    75aa:	0e 94 0a 0c 	call	0x1814	; 0x1814 <eeprom_ReadUSB>
    75ae:	8f 3f       	cpi	r24, 0xFF	; 255
    75b0:	41 f4       	brne	.+16     	; 0x75c2 <init_Serial0SerUSB+0x62>
    75b2:	10 92 7c 16 	sts	0x167C, r1	; 0x80167c <serUSB_Active>
    75b6:	40 e0       	ldi	r20, 0x00	; 0
    75b8:	50 e0       	ldi	r21, 0x00	; 0
    75ba:	64 e0       	ldi	r22, 0x04	; 4
    75bc:	81 e0       	ldi	r24, 0x01	; 1
    75be:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <log_putError>
    75c2:	80 91 7c 16 	lds	r24, 0x167C	; 0x80167c <serUSB_Active>
    75c6:	8f 3f       	cpi	r24, 0xFF	; 255
    75c8:	41 f4       	brne	.+16     	; 0x75da <init_Serial0SerUSB+0x7a>
    75ca:	8e ec       	ldi	r24, 0xCE	; 206
    75cc:	93 e0       	ldi	r25, 0x03	; 3
    75ce:	b2 df       	rcall	.-156    	; 0x7534 <serial0SER_USB_sendStringP>
    75d0:	8a e6       	ldi	r24, 0x6A	; 106
    75d2:	94 e1       	ldi	r25, 0x14	; 20
    75d4:	af df       	rcall	.-162    	; 0x7534 <serial0SER_USB_sendStringP>
    75d6:	c0 df       	rcall	.-128    	; 0x7558 <serial0SER_USB_sendCRLF>
    75d8:	bf cf       	rjmp	.-130    	; 0x7558 <serial0SER_USB_sendCRLF>
    75da:	08 95       	ret

000075dc <serial0SER_USB_sendString>:
    75dc:	1f 93       	push	r17
    75de:	cf 93       	push	r28
    75e0:	df 93       	push	r29
    75e2:	ec 01       	movw	r28, r24
    75e4:	10 e5       	ldi	r17, 0x50	; 80
    75e6:	03 c0       	rjmp	.+6      	; 0x75ee <serial0SER_USB_sendString+0x12>
    75e8:	21 96       	adiw	r28, 0x01	; 1
    75ea:	a4 de       	rcall	.-696    	; 0x7334 <serial0SER_USBSend>
    75ec:	11 50       	subi	r17, 0x01	; 1
    75ee:	88 81       	ld	r24, Y
    75f0:	88 23       	and	r24, r24
    75f2:	31 f0       	breq	.+12     	; 0x7600 <serial0SER_USB_sendString+0x24>
    75f4:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <serUSBOvflFlag>
    75f8:	9f 3f       	cpi	r25, 0xFF	; 255
    75fa:	11 f0       	breq	.+4      	; 0x7600 <serial0SER_USB_sendString+0x24>
    75fc:	11 11       	cpse	r17, r1
    75fe:	f4 cf       	rjmp	.-24     	; 0x75e8 <serial0SER_USB_sendString+0xc>
    7600:	df 91       	pop	r29
    7602:	cf 91       	pop	r28
    7604:	1f 91       	pop	r17
    7606:	08 95       	ret

00007608 <__vector_25>:
    7608:	1f 92       	push	r1
    760a:	0f 92       	push	r0
    760c:	0f b6       	in	r0, 0x3f	; 63
    760e:	0f 92       	push	r0
    7610:	11 24       	eor	r1, r1
    7612:	0b b6       	in	r0, 0x3b	; 59
    7614:	0f 92       	push	r0
    7616:	2f 93       	push	r18
    7618:	3f 93       	push	r19
    761a:	4f 93       	push	r20
    761c:	5f 93       	push	r21
    761e:	8f 93       	push	r24
    7620:	9f 93       	push	r25
    7622:	ef 93       	push	r30
    7624:	ff 93       	push	r31
    7626:	e0 91 7e 16 	lds	r30, 0x167E	; 0x80167e <serUSBRxInIndex>
    762a:	f0 91 7f 16 	lds	r31, 0x167F	; 0x80167f <serUSBRxInIndex+0x1>
    762e:	af 01       	movw	r20, r30
    7630:	4f 5f       	subi	r20, 0xFF	; 255
    7632:	5f 4f       	sbci	r21, 0xFF	; 255
    7634:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7638:	80 83       	st	Z, r24
    763a:	84 e1       	ldi	r24, 0x14	; 20
    763c:	4a 36       	cpi	r20, 0x6A	; 106
    763e:	58 07       	cpc	r21, r24
    7640:	19 f0       	breq	.+6      	; 0x7648 <__vector_25+0x40>
    7642:	10 f0       	brcs	.+4      	; 0x7648 <__vector_25+0x40>
    7644:	4b e2       	ldi	r20, 0x2B	; 43
    7646:	54 e1       	ldi	r21, 0x14	; 20
    7648:	9f b7       	in	r25, 0x3f	; 63
    764a:	f8 94       	cli
    764c:	81 e0       	ldi	r24, 0x01	; 1
    764e:	05 c0       	rjmp	.+10     	; 0x765a <__vector_25+0x52>
    7650:	20 91 71 16 	lds	r18, 0x1671	; 0x801671 <serUSBRxOutIndex>
    7654:	30 91 72 16 	lds	r19, 0x1672	; 0x801672 <serUSBRxOutIndex+0x1>
    7658:	80 e0       	ldi	r24, 0x00	; 0
    765a:	81 11       	cpse	r24, r1
    765c:	f9 cf       	rjmp	.-14     	; 0x7650 <__vector_25+0x48>
    765e:	9f bf       	out	0x3f, r25	; 63
    7660:	42 17       	cp	r20, r18
    7662:	53 07       	cpc	r21, r19
    7664:	21 f4       	brne	.+8      	; 0x766e <__vector_25+0x66>
    7666:	8f ef       	ldi	r24, 0xFF	; 255
    7668:	80 93 73 16 	sts	0x1673, r24	; 0x801673 <serUSBOvflFlag>
    766c:	04 c0       	rjmp	.+8      	; 0x7676 <__vector_25+0x6e>
    766e:	50 93 7f 16 	sts	0x167F, r21	; 0x80167f <serUSBRxInIndex+0x1>
    7672:	40 93 7e 16 	sts	0x167E, r20	; 0x80167e <serUSBRxInIndex>
    7676:	ff 91       	pop	r31
    7678:	ef 91       	pop	r30
    767a:	9f 91       	pop	r25
    767c:	8f 91       	pop	r24
    767e:	5f 91       	pop	r21
    7680:	4f 91       	pop	r20
    7682:	3f 91       	pop	r19
    7684:	2f 91       	pop	r18
    7686:	0f 90       	pop	r0
    7688:	0b be       	out	0x3b, r0	; 59
    768a:	0f 90       	pop	r0
    768c:	0f be       	out	0x3f, r0	; 63
    768e:	0f 90       	pop	r0
    7690:	1f 90       	pop	r1
    7692:	18 95       	reti

00007694 <__vector_26>:
    7694:	1f 92       	push	r1
    7696:	0f 92       	push	r0
    7698:	0f b6       	in	r0, 0x3f	; 63
    769a:	0f 92       	push	r0
    769c:	11 24       	eor	r1, r1
    769e:	0b b6       	in	r0, 0x3b	; 59
    76a0:	0f 92       	push	r0
    76a2:	2f 93       	push	r18
    76a4:	8f 93       	push	r24
    76a6:	9f 93       	push	r25
    76a8:	ef 93       	push	r30
    76aa:	ff 93       	push	r31
    76ac:	e0 91 17 14 	lds	r30, 0x1417	; 0x801417 <serUSBTxOutIndex>
    76b0:	f0 91 18 14 	lds	r31, 0x1418	; 0x801418 <serUSBTxOutIndex+0x1>
    76b4:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <serUSBTxInIndex>
    76b8:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <serUSBTxInIndex+0x1>
    76bc:	e8 17       	cp	r30, r24
    76be:	f9 07       	cpc	r31, r25
    76c0:	89 f0       	breq	.+34     	; 0x76e4 <__vector_26+0x50>
    76c2:	cf 01       	movw	r24, r30
    76c4:	01 96       	adiw	r24, 0x01	; 1
    76c6:	20 81       	ld	r18, Z
    76c8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    76cc:	24 e1       	ldi	r18, 0x14	; 20
    76ce:	86 31       	cpi	r24, 0x16	; 22
    76d0:	92 07       	cpc	r25, r18
    76d2:	19 f0       	breq	.+6      	; 0x76da <__vector_26+0x46>
    76d4:	10 f0       	brcs	.+4      	; 0x76da <__vector_26+0x46>
    76d6:	87 e1       	ldi	r24, 0x17	; 23
    76d8:	9c e0       	ldi	r25, 0x0C	; 12
    76da:	90 93 18 14 	sts	0x1418, r25	; 0x801418 <serUSBTxOutIndex+0x1>
    76de:	80 93 17 14 	sts	0x1417, r24	; 0x801417 <serUSBTxOutIndex>
    76e2:	05 c0       	rjmp	.+10     	; 0x76ee <__vector_26+0x5a>
    76e4:	e1 ec       	ldi	r30, 0xC1	; 193
    76e6:	f0 e0       	ldi	r31, 0x00	; 0
    76e8:	80 81       	ld	r24, Z
    76ea:	8f 7d       	andi	r24, 0xDF	; 223
    76ec:	80 83       	st	Z, r24
    76ee:	ff 91       	pop	r31
    76f0:	ef 91       	pop	r30
    76f2:	9f 91       	pop	r25
    76f4:	8f 91       	pop	r24
    76f6:	2f 91       	pop	r18
    76f8:	0f 90       	pop	r0
    76fa:	0b be       	out	0x3b, r0	; 59
    76fc:	0f 90       	pop	r0
    76fe:	0f be       	out	0x3f, r0	; 63
    7700:	0f 90       	pop	r0
    7702:	1f 90       	pop	r1
    7704:	18 95       	reti

00007706 <init_Serial3SerESP>:
    7706:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    770a:	88 e0       	ldi	r24, 0x08	; 8
    770c:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    7710:	e1 e3       	ldi	r30, 0x31	; 49
    7712:	f1 e0       	ldi	r31, 0x01	; 1
    7714:	80 81       	ld	r24, Z
    7716:	88 69       	ori	r24, 0x98	; 152
    7718:	80 83       	st	Z, r24
    771a:	e2 e3       	ldi	r30, 0x32	; 50
    771c:	f1 e0       	ldi	r31, 0x01	; 1
    771e:	80 81       	ld	r24, Z
    7720:	86 60       	ori	r24, 0x06	; 6
    7722:	80 83       	st	Z, r24
    7724:	81 e8       	ldi	r24, 0x81	; 129
    7726:	96 e1       	ldi	r25, 0x16	; 22
    7728:	90 93 29 14 	sts	0x1429, r25	; 0x801429 <serESPRxInIndex+0x1>
    772c:	80 93 28 14 	sts	0x1428, r24	; 0x801428 <serESPRxInIndex>
    7730:	90 93 24 14 	sts	0x1424, r25	; 0x801424 <serESPRxOutIndex+0x1>
    7734:	80 93 23 14 	sts	0x1423, r24	; 0x801423 <serESPRxOutIndex>
    7738:	81 e0       	ldi	r24, 0x01	; 1
    773a:	97 e1       	ldi	r25, 0x17	; 23
    773c:	90 93 6d 16 	sts	0x166D, r25	; 0x80166d <serESPTxOutIndex+0x1>
    7740:	80 93 6c 16 	sts	0x166C, r24	; 0x80166c <serESPTxOutIndex>
    7744:	90 93 70 16 	sts	0x1670, r25	; 0x801670 <serESPTxInIndex+0x1>
    7748:	80 93 6f 16 	sts	0x166F, r24	; 0x80166f <serESPTxInIndex>
    774c:	10 92 1a 14 	sts	0x141A, r1	; 0x80141a <serESPOvflFlag>
    7750:	8f ef       	ldi	r24, 0xFF	; 255
    7752:	80 93 78 16 	sts	0x1678, r24	; 0x801678 <serESP_Active>
    7756:	80 e0       	ldi	r24, 0x00	; 0
    7758:	07 c0       	rjmp	.+14     	; 0x7768 <init_Serial3SerESP+0x62>
    775a:	e8 2f       	mov	r30, r24
    775c:	f0 e0       	ldi	r31, 0x00	; 0
    775e:	e5 5e       	subi	r30, 0xE5	; 229
    7760:	fb 4e       	sbci	r31, 0xEB	; 235
    7762:	9f ef       	ldi	r25, 0xFF	; 255
    7764:	90 83       	st	Z, r25
    7766:	8f 5f       	subi	r24, 0xFF	; 255
    7768:	88 30       	cpi	r24, 0x08	; 8
    776a:	b8 f3       	brcs	.-18     	; 0x775a <init_Serial3SerESP+0x54>
    776c:	08 95       	ret

0000776e <serial3SER_ESPSend>:
    776e:	e0 91 6f 16 	lds	r30, 0x166F	; 0x80166f <serESPTxInIndex>
    7772:	f0 91 70 16 	lds	r31, 0x1670	; 0x801670 <serESPTxInIndex+0x1>
    7776:	a1 e3       	ldi	r26, 0x31	; 49
    7778:	b1 e0       	ldi	r27, 0x01	; 1
    777a:	9c 91       	ld	r25, X
    777c:	9f 7d       	andi	r25, 0xDF	; 223
    777e:	9c 93       	st	X, r25
    7780:	af 01       	movw	r20, r30
    7782:	4f 5f       	subi	r20, 0xFF	; 255
    7784:	5f 4f       	sbci	r21, 0xFF	; 255
    7786:	80 83       	st	Z, r24
    7788:	89 e1       	ldi	r24, 0x19	; 25
    778a:	40 30       	cpi	r20, 0x00	; 0
    778c:	58 07       	cpc	r21, r24
    778e:	19 f0       	breq	.+6      	; 0x7796 <serial3SER_ESPSend+0x28>
    7790:	10 f0       	brcs	.+4      	; 0x7796 <serial3SER_ESPSend+0x28>
    7792:	41 e0       	ldi	r20, 0x01	; 1
    7794:	57 e1       	ldi	r21, 0x17	; 23
    7796:	9f b7       	in	r25, 0x3f	; 63
    7798:	f8 94       	cli
    779a:	81 e0       	ldi	r24, 0x01	; 1
    779c:	05 c0       	rjmp	.+10     	; 0x77a8 <serial3SER_ESPSend+0x3a>
    779e:	20 91 6c 16 	lds	r18, 0x166C	; 0x80166c <serESPTxOutIndex>
    77a2:	30 91 6d 16 	lds	r19, 0x166D	; 0x80166d <serESPTxOutIndex+0x1>
    77a6:	80 e0       	ldi	r24, 0x00	; 0
    77a8:	81 11       	cpse	r24, r1
    77aa:	f9 cf       	rjmp	.-14     	; 0x779e <serial3SER_ESPSend+0x30>
    77ac:	9f bf       	out	0x3f, r25	; 63
    77ae:	42 17       	cp	r20, r18
    77b0:	53 07       	cpc	r21, r19
    77b2:	49 f4       	brne	.+18     	; 0x77c6 <serial3SER_ESPSend+0x58>
    77b4:	8f ef       	ldi	r24, 0xFF	; 255
    77b6:	80 93 1a 14 	sts	0x141A, r24	; 0x80141a <serESPOvflFlag>
    77ba:	e1 e3       	ldi	r30, 0x31	; 49
    77bc:	f1 e0       	ldi	r31, 0x01	; 1
    77be:	80 81       	ld	r24, Z
    77c0:	80 62       	ori	r24, 0x20	; 32
    77c2:	80 83       	st	Z, r24
    77c4:	08 95       	ret
    77c6:	50 93 70 16 	sts	0x1670, r21	; 0x801670 <serESPTxInIndex+0x1>
    77ca:	40 93 6f 16 	sts	0x166F, r20	; 0x80166f <serESPTxInIndex>
    77ce:	e1 e3       	ldi	r30, 0x31	; 49
    77d0:	f1 e0       	ldi	r31, 0x01	; 1
    77d2:	80 81       	ld	r24, Z
    77d4:	80 62       	ori	r24, 0x20	; 32
    77d6:	80 83       	st	Z, r24
    77d8:	08 95       	ret

000077da <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    77da:	e0 91 23 14 	lds	r30, 0x1423	; 0x801423 <serESPRxOutIndex>
    77de:	f0 91 24 14 	lds	r31, 0x1424	; 0x801424 <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    77e2:	80 91 28 14 	lds	r24, 0x1428	; 0x801428 <serESPRxInIndex>
    77e6:	90 91 29 14 	lds	r25, 0x1429	; 0x801429 <serESPRxInIndex+0x1>
    77ea:	e8 17       	cp	r30, r24
    77ec:	f9 07       	cpc	r31, r25
    77ee:	81 f0       	breq	.+32     	; 0x7810 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    77f0:	9f 01       	movw	r18, r30
    77f2:	2f 5f       	subi	r18, 0xFF	; 255
    77f4:	3f 4f       	sbci	r19, 0xFF	; 255
    77f6:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    77f8:	97 e1       	ldi	r25, 0x17	; 23
    77fa:	20 30       	cpi	r18, 0x00	; 0
    77fc:	39 07       	cpc	r19, r25
    77fe:	19 f0       	breq	.+6      	; 0x7806 <serial3SER_ESPReadRx+0x2c>
    7800:	10 f0       	brcs	.+4      	; 0x7806 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    7802:	21 e8       	ldi	r18, 0x81	; 129
    7804:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    7806:	30 93 24 14 	sts	0x1424, r19	; 0x801424 <serESPRxOutIndex+0x1>
    780a:	20 93 23 14 	sts	0x1423, r18	; 0x801423 <serESPRxOutIndex>
    780e:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    7810:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    7812:	08 95       	ret

00007814 <__vector_54>:

ISR(USART3_RX_vect) {
    7814:	1f 92       	push	r1
    7816:	0f 92       	push	r0
    7818:	0f b6       	in	r0, 0x3f	; 63
    781a:	0f 92       	push	r0
    781c:	11 24       	eor	r1, r1
    781e:	0b b6       	in	r0, 0x3b	; 59
    7820:	0f 92       	push	r0
    7822:	2f 93       	push	r18
    7824:	3f 93       	push	r19
    7826:	4f 93       	push	r20
    7828:	5f 93       	push	r21
    782a:	6f 93       	push	r22
    782c:	8f 93       	push	r24
    782e:	9f 93       	push	r25
    7830:	af 93       	push	r26
    7832:	bf 93       	push	r27
    7834:	ef 93       	push	r30
    7836:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    7838:	e0 91 28 14 	lds	r30, 0x1428	; 0x801428 <serESPRxInIndex>
    783c:	f0 91 29 14 	lds	r31, 0x1429	; 0x801429 <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    7840:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    7844:	af 01       	movw	r20, r30
    7846:	4f 5f       	subi	r20, 0xFF	; 255
    7848:	5f 4f       	sbci	r21, 0xFF	; 255
    784a:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    784c:	87 e1       	ldi	r24, 0x17	; 23
    784e:	40 30       	cpi	r20, 0x00	; 0
    7850:	58 07       	cpc	r21, r24
    7852:	19 f0       	breq	.+6      	; 0x785a <__vector_54+0x46>
    7854:	10 f0       	brcs	.+4      	; 0x785a <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    7856:	41 e8       	ldi	r20, 0x81	; 129
    7858:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    785a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    785c:	f8 94       	cli
    785e:	81 e0       	ldi	r24, 0x01	; 1
    7860:	05 c0       	rjmp	.+10     	; 0x786c <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    7862:	20 91 23 14 	lds	r18, 0x1423	; 0x801423 <serESPRxOutIndex>
    7866:	30 91 24 14 	lds	r19, 0x1424	; 0x801424 <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    786a:	80 e0       	ldi	r24, 0x00	; 0
    786c:	81 11       	cpse	r24, r1
    786e:	f9 cf       	rjmp	.-14     	; 0x7862 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7870:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    7872:	42 17       	cp	r20, r18
    7874:	53 07       	cpc	r21, r19
    7876:	39 f4       	brne	.+14     	; 0x7886 <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    7878:	8f ef       	ldi	r24, 0xFF	; 255
    787a:	80 93 1a 14 	sts	0x141A, r24	; 0x80141a <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    787e:	80 e0       	ldi	r24, 0x00	; 0
    7880:	a2 e2       	ldi	r26, 0x22	; 34
    7882:	b4 e1       	ldi	r27, 0x14	; 20
    7884:	0a c0       	rjmp	.+20     	; 0x789a <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    7886:	50 93 29 14 	sts	0x1429, r21	; 0x801429 <serESPRxInIndex+0x1>
    788a:	40 93 28 14 	sts	0x1428, r20	; 0x801428 <serESPRxInIndex>
    788e:	f7 cf       	rjmp	.-18     	; 0x787e <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    7890:	fd 01       	movw	r30, r26
    7892:	92 91       	ld	r25, -Z
    7894:	9c 93       	st	X, r25
		inpBufferPtr--;
    7896:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    7898:	8f 5f       	subi	r24, 0xFF	; 255
    789a:	87 30       	cpi	r24, 0x07	; 7
    789c:	c8 f3       	brcs	.-14     	; 0x7890 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    789e:	6c 93       	st	X, r22
}
    78a0:	ff 91       	pop	r31
    78a2:	ef 91       	pop	r30
    78a4:	bf 91       	pop	r27
    78a6:	af 91       	pop	r26
    78a8:	9f 91       	pop	r25
    78aa:	8f 91       	pop	r24
    78ac:	6f 91       	pop	r22
    78ae:	5f 91       	pop	r21
    78b0:	4f 91       	pop	r20
    78b2:	3f 91       	pop	r19
    78b4:	2f 91       	pop	r18
    78b6:	0f 90       	pop	r0
    78b8:	0b be       	out	0x3b, r0	; 59
    78ba:	0f 90       	pop	r0
    78bc:	0f be       	out	0x3f, r0	; 63
    78be:	0f 90       	pop	r0
    78c0:	1f 90       	pop	r1
    78c2:	18 95       	reti

000078c4 <__vector_55>:

ISR(USART3_UDRE_vect) {
    78c4:	1f 92       	push	r1
    78c6:	0f 92       	push	r0
    78c8:	0f b6       	in	r0, 0x3f	; 63
    78ca:	0f 92       	push	r0
    78cc:	11 24       	eor	r1, r1
    78ce:	0b b6       	in	r0, 0x3b	; 59
    78d0:	0f 92       	push	r0
    78d2:	2f 93       	push	r18
    78d4:	8f 93       	push	r24
    78d6:	9f 93       	push	r25
    78d8:	ef 93       	push	r30
    78da:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    78dc:	e0 91 6c 16 	lds	r30, 0x166C	; 0x80166c <serESPTxOutIndex>
    78e0:	f0 91 6d 16 	lds	r31, 0x166D	; 0x80166d <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    78e4:	80 91 6f 16 	lds	r24, 0x166F	; 0x80166f <serESPTxInIndex>
    78e8:	90 91 70 16 	lds	r25, 0x1670	; 0x801670 <serESPTxInIndex+0x1>
    78ec:	e8 17       	cp	r30, r24
    78ee:	f9 07       	cpc	r31, r25
    78f0:	89 f0       	breq	.+34     	; 0x7914 <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    78f2:	cf 01       	movw	r24, r30
    78f4:	01 96       	adiw	r24, 0x01	; 1
    78f6:	20 81       	ld	r18, Z
    78f8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    78fc:	29 e1       	ldi	r18, 0x19	; 25
    78fe:	80 30       	cpi	r24, 0x00	; 0
    7900:	92 07       	cpc	r25, r18
    7902:	19 f0       	breq	.+6      	; 0x790a <__vector_55+0x46>
    7904:	10 f0       	brcs	.+4      	; 0x790a <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    7906:	81 e0       	ldi	r24, 0x01	; 1
    7908:	97 e1       	ldi	r25, 0x17	; 23
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    790a:	90 93 6d 16 	sts	0x166D, r25	; 0x80166d <serESPTxOutIndex+0x1>
    790e:	80 93 6c 16 	sts	0x166C, r24	; 0x80166c <serESPTxOutIndex>
    7912:	05 c0       	rjmp	.+10     	; 0x791e <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    7914:	e1 e3       	ldi	r30, 0x31	; 49
    7916:	f1 e0       	ldi	r31, 0x01	; 1
    7918:	80 81       	ld	r24, Z
    791a:	8f 7d       	andi	r24, 0xDF	; 223
    791c:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    791e:	ff 91       	pop	r31
    7920:	ef 91       	pop	r30
    7922:	9f 91       	pop	r25
    7924:	8f 91       	pop	r24
    7926:	2f 91       	pop	r18
    7928:	0f 90       	pop	r0
    792a:	0b be       	out	0x3b, r0	; 59
    792c:	0f 90       	pop	r0
    792e:	0f be       	out	0x3f, r0	; 63
    7930:	0f 90       	pop	r0
    7932:	1f 90       	pop	r1
    7934:	18 95       	reti

00007936 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    7936:	8a 30       	cpi	r24, 0x0A	; 10
    7938:	10 f0       	brcs	.+4      	; 0x793e <nibbleToChr+0x8>
    793a:	89 5c       	subi	r24, 0xC9	; 201
    793c:	08 95       	ret
    793e:	80 5d       	subi	r24, 0xD0	; 208
    7940:	08 95       	ret

00007942 <lcd_hexout>:
    7942:	cf 93       	push	r28
    7944:	c8 2f       	mov	r28, r24
    7946:	82 95       	swap	r24
    7948:	8f 70       	andi	r24, 0x0F	; 15
    794a:	8a 30       	cpi	r24, 0x0A	; 10
    794c:	10 f0       	brcs	.+4      	; 0x7952 <lcd_hexout+0x10>
    794e:	89 5c       	subi	r24, 0xC9	; 201
    7950:	01 c0       	rjmp	.+2      	; 0x7954 <lcd_hexout+0x12>
    7952:	80 5d       	subi	r24, 0xD0	; 208
    7954:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7958:	cf 70       	andi	r28, 0x0F	; 15
    795a:	ca 30       	cpi	r28, 0x0A	; 10
    795c:	18 f0       	brcs	.+6      	; 0x7964 <lcd_hexout+0x22>
    795e:	87 e3       	ldi	r24, 0x37	; 55
    7960:	8c 0f       	add	r24, r28
    7962:	02 c0       	rjmp	.+4      	; 0x7968 <lcd_hexout+0x26>
    7964:	80 e3       	ldi	r24, 0x30	; 48
    7966:	8c 0f       	add	r24, r28
    7968:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    796c:	cf 91       	pop	r28
    796e:	08 95       	ret

00007970 <lcd_longout>:
    7970:	cf 93       	push	r28
    7972:	df 93       	push	r29
    7974:	d3 e0       	ldi	r29, 0x03	; 3
    7976:	1c c0       	rjmp	.+56     	; 0x79b0 <lcd_longout+0x40>
    7978:	ed 2f       	mov	r30, r29
    797a:	0d 2e       	mov	r0, r29
    797c:	00 0c       	add	r0, r0
    797e:	ff 0b       	sbc	r31, r31
    7980:	ea 5f       	subi	r30, 0xFA	; 250
    7982:	f6 4e       	sbci	r31, 0xE6	; 230
    7984:	c0 81       	ld	r28, Z
    7986:	8c 2f       	mov	r24, r28
    7988:	82 95       	swap	r24
    798a:	8f 70       	andi	r24, 0x0F	; 15
    798c:	8a 30       	cpi	r24, 0x0A	; 10
    798e:	10 f0       	brcs	.+4      	; 0x7994 <lcd_longout+0x24>
    7990:	89 5c       	subi	r24, 0xC9	; 201
    7992:	01 c0       	rjmp	.+2      	; 0x7996 <lcd_longout+0x26>
    7994:	80 5d       	subi	r24, 0xD0	; 208
    7996:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    799a:	cf 70       	andi	r28, 0x0F	; 15
    799c:	ca 30       	cpi	r28, 0x0A	; 10
    799e:	18 f0       	brcs	.+6      	; 0x79a6 <lcd_longout+0x36>
    79a0:	87 e3       	ldi	r24, 0x37	; 55
    79a2:	8c 0f       	add	r24, r28
    79a4:	02 c0       	rjmp	.+4      	; 0x79aa <lcd_longout+0x3a>
    79a6:	80 e3       	ldi	r24, 0x30	; 48
    79a8:	8c 0f       	add	r24, r28
    79aa:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    79ae:	d1 50       	subi	r29, 0x01	; 1
    79b0:	dd 23       	and	r29, r29
    79b2:	14 f7       	brge	.-60     	; 0x7978 <lcd_longout+0x8>
    79b4:	df 91       	pop	r29
    79b6:	cf 91       	pop	r28
    79b8:	08 95       	ret

000079ba <lcd_dec2out>:
    79ba:	cf 93       	push	r28
    79bc:	c8 2f       	mov	r28, r24
    79be:	84 36       	cpi	r24, 0x64	; 100
    79c0:	50 f0       	brcs	.+20     	; 0x79d6 <lcd_dec2out+0x1c>
    79c2:	8d e2       	ldi	r24, 0x2D	; 45
    79c4:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    79c8:	8d e2       	ldi	r24, 0x2D	; 45
    79ca:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    79ce:	0d c0       	rjmp	.+26     	; 0x79ea <lcd_dec2out+0x30>
    79d0:	ca 50       	subi	r28, 0x0A	; 10
    79d2:	8f 5f       	subi	r24, 0xFF	; 255
    79d4:	01 c0       	rjmp	.+2      	; 0x79d8 <lcd_dec2out+0x1e>
    79d6:	80 e0       	ldi	r24, 0x00	; 0
    79d8:	ca 30       	cpi	r28, 0x0A	; 10
    79da:	d0 f7       	brcc	.-12     	; 0x79d0 <lcd_dec2out+0x16>
    79dc:	80 5d       	subi	r24, 0xD0	; 208
    79de:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    79e2:	80 e3       	ldi	r24, 0x30	; 48
    79e4:	8c 0f       	add	r24, r28
    79e6:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    79ea:	cf 91       	pop	r28
    79ec:	08 95       	ret

000079ee <putChar_Dec2>:
    79ee:	84 36       	cpi	r24, 0x64	; 100
    79f0:	58 f0       	brcs	.+22     	; 0x7a08 <putChar_Dec2+0x1a>
    79f2:	8d e2       	ldi	r24, 0x2D	; 45
    79f4:	db 01       	movw	r26, r22
    79f6:	8c 93       	st	X, r24
    79f8:	fb 01       	movw	r30, r22
    79fa:	32 96       	adiw	r30, 0x02	; 2
    79fc:	11 96       	adiw	r26, 0x01	; 1
    79fe:	8c 93       	st	X, r24
    7a00:	0f c0       	rjmp	.+30     	; 0x7a20 <putChar_Dec2+0x32>
    7a02:	8a 50       	subi	r24, 0x0A	; 10
    7a04:	9f 5f       	subi	r25, 0xFF	; 255
    7a06:	01 c0       	rjmp	.+2      	; 0x7a0a <putChar_Dec2+0x1c>
    7a08:	90 e0       	ldi	r25, 0x00	; 0
    7a0a:	8a 30       	cpi	r24, 0x0A	; 10
    7a0c:	d0 f7       	brcc	.-12     	; 0x7a02 <putChar_Dec2+0x14>
    7a0e:	90 5d       	subi	r25, 0xD0	; 208
    7a10:	fb 01       	movw	r30, r22
    7a12:	90 83       	st	Z, r25
    7a14:	32 96       	adiw	r30, 0x02	; 2
    7a16:	90 e3       	ldi	r25, 0x30	; 48
    7a18:	98 0f       	add	r25, r24
    7a1a:	db 01       	movw	r26, r22
    7a1c:	11 96       	adiw	r26, 0x01	; 1
    7a1e:	9c 93       	st	X, r25
    7a20:	10 82       	st	Z, r1
    7a22:	cf 01       	movw	r24, r30
    7a24:	08 95       	ret

00007a26 <putChar_Dec>:
    7a26:	90 e0       	ldi	r25, 0x00	; 0
    7a28:	02 c0       	rjmp	.+4      	; 0x7a2e <putChar_Dec+0x8>
    7a2a:	84 56       	subi	r24, 0x64	; 100
    7a2c:	9f 5f       	subi	r25, 0xFF	; 255
    7a2e:	84 36       	cpi	r24, 0x64	; 100
    7a30:	e0 f7       	brcc	.-8      	; 0x7a2a <putChar_Dec+0x4>
    7a32:	99 23       	and	r25, r25
    7a34:	39 f0       	breq	.+14     	; 0x7a44 <putChar_Dec+0x1e>
    7a36:	90 5d       	subi	r25, 0xD0	; 208
    7a38:	db 01       	movw	r26, r22
    7a3a:	9c 93       	st	X, r25
    7a3c:	6f 5f       	subi	r22, 0xFF	; 255
    7a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    7a40:	2f ef       	ldi	r18, 0xFF	; 255
    7a42:	01 c0       	rjmp	.+2      	; 0x7a46 <putChar_Dec+0x20>
    7a44:	20 e0       	ldi	r18, 0x00	; 0
    7a46:	90 e0       	ldi	r25, 0x00	; 0
    7a48:	02 c0       	rjmp	.+4      	; 0x7a4e <putChar_Dec+0x28>
    7a4a:	8a 50       	subi	r24, 0x0A	; 10
    7a4c:	9f 5f       	subi	r25, 0xFF	; 255
    7a4e:	8a 30       	cpi	r24, 0x0A	; 10
    7a50:	e0 f7       	brcc	.-8      	; 0x7a4a <putChar_Dec+0x24>
    7a52:	91 11       	cpse	r25, r1
    7a54:	02 c0       	rjmp	.+4      	; 0x7a5a <putChar_Dec+0x34>
    7a56:	2f 3f       	cpi	r18, 0xFF	; 255
    7a58:	31 f4       	brne	.+12     	; 0x7a66 <putChar_Dec+0x40>
    7a5a:	fb 01       	movw	r30, r22
    7a5c:	31 96       	adiw	r30, 0x01	; 1
    7a5e:	90 5d       	subi	r25, 0xD0	; 208
    7a60:	db 01       	movw	r26, r22
    7a62:	9c 93       	st	X, r25
    7a64:	01 c0       	rjmp	.+2      	; 0x7a68 <putChar_Dec+0x42>
    7a66:	fb 01       	movw	r30, r22
    7a68:	80 5d       	subi	r24, 0xD0	; 208
    7a6a:	80 83       	st	Z, r24
    7a6c:	11 82       	std	Z+1, r1	; 0x01
    7a6e:	cf 01       	movw	r24, r30
    7a70:	01 96       	adiw	r24, 0x01	; 1
    7a72:	08 95       	ret

00007a74 <putChar_hex>:
    7a74:	fb 01       	movw	r30, r22
    7a76:	98 2f       	mov	r25, r24
    7a78:	92 95       	swap	r25
    7a7a:	9f 70       	andi	r25, 0x0F	; 15
    7a7c:	9a 30       	cpi	r25, 0x0A	; 10
    7a7e:	10 f0       	brcs	.+4      	; 0x7a84 <putChar_hex+0x10>
    7a80:	99 5c       	subi	r25, 0xC9	; 201
    7a82:	01 c0       	rjmp	.+2      	; 0x7a86 <putChar_hex+0x12>
    7a84:	90 5d       	subi	r25, 0xD0	; 208
    7a86:	90 83       	st	Z, r25
    7a88:	98 2f       	mov	r25, r24
    7a8a:	9f 70       	andi	r25, 0x0F	; 15
    7a8c:	9f 01       	movw	r18, r30
    7a8e:	2e 5f       	subi	r18, 0xFE	; 254
    7a90:	3f 4f       	sbci	r19, 0xFF	; 255
    7a92:	9a 30       	cpi	r25, 0x0A	; 10
    7a94:	10 f0       	brcs	.+4      	; 0x7a9a <putChar_hex+0x26>
    7a96:	99 5c       	subi	r25, 0xC9	; 201
    7a98:	01 c0       	rjmp	.+2      	; 0x7a9c <putChar_hex+0x28>
    7a9a:	90 5d       	subi	r25, 0xD0	; 208
    7a9c:	91 83       	std	Z+1, r25	; 0x01
    7a9e:	12 82       	std	Z+2, r1	; 0x02
    7aa0:	c9 01       	movw	r24, r18
    7aa2:	08 95       	ret

00007aa4 <putChar_MidiChan>:
    7aa4:	80 31       	cpi	r24, 0x10	; 16
    7aa6:	48 f0       	brcs	.+18     	; 0x7aba <putChar_MidiChan+0x16>
    7aa8:	8e e6       	ldi	r24, 0x6E	; 110
    7aaa:	db 01       	movw	r26, r22
    7aac:	8c 93       	st	X, r24
    7aae:	fb 01       	movw	r30, r22
    7ab0:	32 96       	adiw	r30, 0x02	; 2
    7ab2:	8f e6       	ldi	r24, 0x6F	; 111
    7ab4:	11 96       	adiw	r26, 0x01	; 1
    7ab6:	8c 93       	st	X, r24
    7ab8:	15 c0       	rjmp	.+42     	; 0x7ae4 <putChar_MidiChan+0x40>
    7aba:	91 e0       	ldi	r25, 0x01	; 1
    7abc:	98 0f       	add	r25, r24
    7abe:	9a 30       	cpi	r25, 0x0A	; 10
    7ac0:	40 f0       	brcs	.+16     	; 0x7ad2 <putChar_MidiChan+0x2e>
    7ac2:	db 01       	movw	r26, r22
    7ac4:	11 96       	adiw	r26, 0x01	; 1
    7ac6:	91 e3       	ldi	r25, 0x31	; 49
    7ac8:	fb 01       	movw	r30, r22
    7aca:	90 83       	st	Z, r25
    7acc:	97 ef       	ldi	r25, 0xF7	; 247
    7ace:	98 0f       	add	r25, r24
    7ad0:	05 c0       	rjmp	.+10     	; 0x7adc <putChar_MidiChan+0x38>
    7ad2:	db 01       	movw	r26, r22
    7ad4:	11 96       	adiw	r26, 0x01	; 1
    7ad6:	80 e2       	ldi	r24, 0x20	; 32
    7ad8:	fb 01       	movw	r30, r22
    7ada:	80 83       	st	Z, r24
    7adc:	fd 01       	movw	r30, r26
    7ade:	31 96       	adiw	r30, 0x01	; 1
    7ae0:	90 5d       	subi	r25, 0xD0	; 208
    7ae2:	9c 93       	st	X, r25
    7ae4:	10 82       	st	Z, r1
    7ae6:	cf 01       	movw	r24, r30
    7ae8:	08 95       	ret

00007aea <putChar_word>:
    7aea:	ac 01       	movw	r20, r24
    7aec:	fb 01       	movw	r30, r22
    7aee:	34 96       	adiw	r30, 0x04	; 4
    7af0:	db 01       	movw	r26, r22
    7af2:	14 96       	adiw	r26, 0x04	; 4
    7af4:	1c 92       	st	X, r1
    7af6:	20 e0       	ldi	r18, 0x00	; 0
    7af8:	10 c0       	rjmp	.+32     	; 0x7b1a <putChar_word+0x30>
    7afa:	94 2f       	mov	r25, r20
    7afc:	9f 70       	andi	r25, 0x0F	; 15
    7afe:	31 97       	sbiw	r30, 0x01	; 1
    7b00:	9a 30       	cpi	r25, 0x0A	; 10
    7b02:	10 f0       	brcs	.+4      	; 0x7b08 <putChar_word+0x1e>
    7b04:	99 5c       	subi	r25, 0xC9	; 201
    7b06:	01 c0       	rjmp	.+2      	; 0x7b0a <putChar_word+0x20>
    7b08:	90 5d       	subi	r25, 0xD0	; 208
    7b0a:	90 83       	st	Z, r25
    7b0c:	52 95       	swap	r21
    7b0e:	42 95       	swap	r20
    7b10:	4f 70       	andi	r20, 0x0F	; 15
    7b12:	45 27       	eor	r20, r21
    7b14:	5f 70       	andi	r21, 0x0F	; 15
    7b16:	45 27       	eor	r20, r21
    7b18:	2f 5f       	subi	r18, 0xFF	; 255
    7b1a:	24 30       	cpi	r18, 0x04	; 4
    7b1c:	70 f3       	brcs	.-36     	; 0x7afa <putChar_word+0x10>
    7b1e:	cf 01       	movw	r24, r30
    7b20:	04 96       	adiw	r24, 0x04	; 4
    7b22:	08 95       	ret

00007b24 <putChar_long>:
    7b24:	0f 93       	push	r16
    7b26:	1f 93       	push	r17
    7b28:	8b 01       	movw	r16, r22
    7b2a:	9c 01       	movw	r18, r24
    7b2c:	fa 01       	movw	r30, r20
    7b2e:	38 96       	adiw	r30, 0x08	; 8
    7b30:	da 01       	movw	r26, r20
    7b32:	18 96       	adiw	r26, 0x08	; 8
    7b34:	1c 92       	st	X, r1
    7b36:	80 e0       	ldi	r24, 0x00	; 0
    7b38:	12 c0       	rjmp	.+36     	; 0x7b5e <putChar_long+0x3a>
    7b3a:	90 2f       	mov	r25, r16
    7b3c:	9f 70       	andi	r25, 0x0F	; 15
    7b3e:	31 97       	sbiw	r30, 0x01	; 1
    7b40:	9a 30       	cpi	r25, 0x0A	; 10
    7b42:	10 f0       	brcs	.+4      	; 0x7b48 <putChar_long+0x24>
    7b44:	99 5c       	subi	r25, 0xC9	; 201
    7b46:	01 c0       	rjmp	.+2      	; 0x7b4a <putChar_long+0x26>
    7b48:	90 5d       	subi	r25, 0xD0	; 208
    7b4a:	90 83       	st	Z, r25
    7b4c:	68 94       	set
    7b4e:	13 f8       	bld	r1, 3
    7b50:	36 95       	lsr	r19
    7b52:	27 95       	ror	r18
    7b54:	17 95       	ror	r17
    7b56:	07 95       	ror	r16
    7b58:	16 94       	lsr	r1
    7b5a:	d1 f7       	brne	.-12     	; 0x7b50 <putChar_long+0x2c>
    7b5c:	8f 5f       	subi	r24, 0xFF	; 255
    7b5e:	84 30       	cpi	r24, 0x04	; 4
    7b60:	60 f3       	brcs	.-40     	; 0x7b3a <putChar_long+0x16>
    7b62:	cf 01       	movw	r24, r30
    7b64:	04 96       	adiw	r24, 0x04	; 4
    7b66:	1f 91       	pop	r17
    7b68:	0f 91       	pop	r16
    7b6a:	08 95       	ret

00007b6c <putChar_Note>:
    7b6c:	88 23       	and	r24, r24
    7b6e:	8c f4       	brge	.+34     	; 0x7b92 <putChar_Note+0x26>
    7b70:	8d e2       	ldi	r24, 0x2D	; 45
    7b72:	db 01       	movw	r26, r22
    7b74:	8c 93       	st	X, r24
    7b76:	9e e6       	ldi	r25, 0x6E	; 110
    7b78:	11 96       	adiw	r26, 0x01	; 1
    7b7a:	9c 93       	st	X, r25
    7b7c:	11 97       	sbiw	r26, 0x01	; 1
    7b7e:	12 96       	adiw	r26, 0x02	; 2
    7b80:	8c 93       	st	X, r24
    7b82:	12 97       	sbiw	r26, 0x02	; 2
    7b84:	14 96       	adiw	r26, 0x04	; 4
    7b86:	fb 01       	movw	r30, r22
    7b88:	13 82       	std	Z+3, r1	; 0x03
    7b8a:	49 c0       	rjmp	.+146    	; 0x7c1e <putChar_Note+0xb2>
    7b8c:	8c 50       	subi	r24, 0x0C	; 12
    7b8e:	9f 5f       	subi	r25, 0xFF	; 255
    7b90:	01 c0       	rjmp	.+2      	; 0x7b94 <putChar_Note+0x28>
    7b92:	90 e0       	ldi	r25, 0x00	; 0
    7b94:	8c 30       	cpi	r24, 0x0C	; 12
    7b96:	d0 f7       	brcc	.-12     	; 0x7b8c <putChar_Note+0x20>
    7b98:	8b 30       	cpi	r24, 0x0B	; 11
    7b9a:	39 f4       	brne	.+14     	; 0x7baa <putChar_Note+0x3e>
    7b9c:	fb 01       	movw	r30, r22
    7b9e:	31 96       	adiw	r30, 0x01	; 1
    7ba0:	88 e4       	ldi	r24, 0x48	; 72
    7ba2:	db 01       	movw	r26, r22
    7ba4:	8c 93       	st	X, r24
    7ba6:	8f e5       	ldi	r24, 0x5F	; 95
    7ba8:	27 c0       	rjmp	.+78     	; 0x7bf8 <putChar_Note+0x8c>
    7baa:	85 30       	cpi	r24, 0x05	; 5
    7bac:	58 f4       	brcc	.+22     	; 0x7bc4 <putChar_Note+0x58>
    7bae:	fb 01       	movw	r30, r22
    7bb0:	31 96       	adiw	r30, 0x01	; 1
    7bb2:	28 2f       	mov	r18, r24
    7bb4:	26 95       	lsr	r18
    7bb6:	2d 5b       	subi	r18, 0xBD	; 189
    7bb8:	db 01       	movw	r26, r22
    7bba:	2c 93       	st	X, r18
    7bbc:	80 fd       	sbrc	r24, 0
    7bbe:	19 c0       	rjmp	.+50     	; 0x7bf2 <putChar_Note+0x86>
    7bc0:	8f e5       	ldi	r24, 0x5F	; 95
    7bc2:	1a c0       	rjmp	.+52     	; 0x7bf8 <putChar_Note+0x8c>
    7bc4:	89 30       	cpi	r24, 0x09	; 9
    7bc6:	30 f0       	brcs	.+12     	; 0x7bd4 <putChar_Note+0x68>
    7bc8:	fb 01       	movw	r30, r22
    7bca:	31 96       	adiw	r30, 0x01	; 1
    7bcc:	21 e4       	ldi	r18, 0x41	; 65
    7bce:	db 01       	movw	r26, r22
    7bd0:	2c 93       	st	X, r18
    7bd2:	0b c0       	rjmp	.+22     	; 0x7bea <putChar_Note+0x7e>
    7bd4:	fb 01       	movw	r30, r22
    7bd6:	31 96       	adiw	r30, 0x01	; 1
    7bd8:	28 2f       	mov	r18, r24
    7bda:	30 e0       	ldi	r19, 0x00	; 0
    7bdc:	25 50       	subi	r18, 0x05	; 5
    7bde:	31 09       	sbc	r19, r1
    7be0:	35 95       	asr	r19
    7be2:	27 95       	ror	r18
    7be4:	2a 5b       	subi	r18, 0xBA	; 186
    7be6:	db 01       	movw	r26, r22
    7be8:	2c 93       	st	X, r18
    7bea:	80 ff       	sbrs	r24, 0
    7bec:	04 c0       	rjmp	.+8      	; 0x7bf6 <putChar_Note+0x8a>
    7bee:	8f e5       	ldi	r24, 0x5F	; 95
    7bf0:	03 c0       	rjmp	.+6      	; 0x7bf8 <putChar_Note+0x8c>
    7bf2:	83 e2       	ldi	r24, 0x23	; 35
    7bf4:	01 c0       	rjmp	.+2      	; 0x7bf8 <putChar_Note+0x8c>
    7bf6:	83 e2       	ldi	r24, 0x23	; 35
    7bf8:	80 83       	st	Z, r24
    7bfa:	91 11       	cpse	r25, r1
    7bfc:	05 c0       	rjmp	.+10     	; 0x7c08 <putChar_Note+0x9c>
    7bfe:	df 01       	movw	r26, r30
    7c00:	12 96       	adiw	r26, 0x02	; 2
    7c02:	8d e6       	ldi	r24, 0x6D	; 109
    7c04:	81 83       	std	Z+1, r24	; 0x01
    7c06:	0b c0       	rjmp	.+22     	; 0x7c1e <putChar_Note+0xb2>
    7c08:	9c 30       	cpi	r25, 0x0C	; 12
    7c0a:	28 f4       	brcc	.+10     	; 0x7c16 <putChar_Note+0xaa>
    7c0c:	df 01       	movw	r26, r30
    7c0e:	12 96       	adiw	r26, 0x02	; 2
    7c10:	91 5d       	subi	r25, 0xD1	; 209
    7c12:	91 83       	std	Z+1, r25	; 0x01
    7c14:	04 c0       	rjmp	.+8      	; 0x7c1e <putChar_Note+0xb2>
    7c16:	df 01       	movw	r26, r30
    7c18:	12 96       	adiw	r26, 0x02	; 2
    7c1a:	8d e2       	ldi	r24, 0x2D	; 45
    7c1c:	81 83       	std	Z+1, r24	; 0x01
    7c1e:	1c 92       	st	X, r1
    7c20:	cd 01       	movw	r24, r26
    7c22:	08 95       	ret

00007c24 <putChar_Manual>:
    7c24:	83 30       	cpi	r24, 0x03	; 3
    7c26:	38 f4       	brcc	.+14     	; 0x7c36 <putChar_Manual+0x12>
    7c28:	fb 01       	movw	r30, r22
    7c2a:	31 96       	adiw	r30, 0x01	; 1
    7c2c:	93 e3       	ldi	r25, 0x33	; 51
    7c2e:	98 1b       	sub	r25, r24
    7c30:	db 01       	movw	r26, r22
    7c32:	9c 93       	st	X, r25
    7c34:	0d c0       	rjmp	.+26     	; 0x7c50 <putChar_Manual+0x2c>
    7c36:	83 30       	cpi	r24, 0x03	; 3
    7c38:	31 f4       	brne	.+12     	; 0x7c46 <putChar_Manual+0x22>
    7c3a:	fb 01       	movw	r30, r22
    7c3c:	31 96       	adiw	r30, 0x01	; 1
    7c3e:	80 e5       	ldi	r24, 0x50	; 80
    7c40:	db 01       	movw	r26, r22
    7c42:	8c 93       	st	X, r24
    7c44:	05 c0       	rjmp	.+10     	; 0x7c50 <putChar_Manual+0x2c>
    7c46:	fb 01       	movw	r30, r22
    7c48:	31 96       	adiw	r30, 0x01	; 1
    7c4a:	8d e2       	ldi	r24, 0x2D	; 45
    7c4c:	db 01       	movw	r26, r22
    7c4e:	8c 93       	st	X, r24
    7c50:	10 82       	st	Z, r1
    7c52:	cf 01       	movw	r24, r30
    7c54:	08 95       	ret

00007c56 <putString_P>:
    7c56:	fc 01       	movw	r30, r24
    7c58:	db 01       	movw	r26, r22
    7c5a:	20 e0       	ldi	r18, 0x00	; 0
    7c5c:	02 c0       	rjmp	.+4      	; 0x7c62 <putString_P+0xc>
    7c5e:	28 2f       	mov	r18, r24
    7c60:	da 01       	movw	r26, r20
    7c62:	94 91       	lpm	r25, Z
    7c64:	99 23       	and	r25, r25
    7c66:	51 f0       	breq	.+20     	; 0x7c7c <putString_P+0x26>
    7c68:	ad 01       	movw	r20, r26
    7c6a:	4f 5f       	subi	r20, 0xFF	; 255
    7c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    7c6e:	31 96       	adiw	r30, 0x01	; 1
    7c70:	9c 93       	st	X, r25
    7c72:	81 e0       	ldi	r24, 0x01	; 1
    7c74:	82 0f       	add	r24, r18
    7c76:	24 31       	cpi	r18, 0x14	; 20
    7c78:	90 f3       	brcs	.-28     	; 0x7c5e <putString_P+0x8>
    7c7a:	01 c0       	rjmp	.+2      	; 0x7c7e <putString_P+0x28>
    7c7c:	ad 01       	movw	r20, r26
    7c7e:	ca 01       	movw	r24, r20
    7c80:	08 95       	ret

00007c82 <putString_Prog>:
    7c82:	fc 01       	movw	r30, r24
    7c84:	80 e5       	ldi	r24, 0x50	; 80
    7c86:	80 83       	st	Z, r24
    7c88:	96 2f       	mov	r25, r22
    7c8a:	96 95       	lsr	r25
    7c8c:	96 95       	lsr	r25
    7c8e:	96 95       	lsr	r25
    7c90:	97 70       	andi	r25, 0x07	; 7
    7c92:	9f 5b       	subi	r25, 0xBF	; 191
    7c94:	91 83       	std	Z+1, r25	; 0x01
    7c96:	67 70       	andi	r22, 0x07	; 7
    7c98:	6f 5c       	subi	r22, 0xCF	; 207
    7c9a:	62 83       	std	Z+2, r22	; 0x02
    7c9c:	cf 01       	movw	r24, r30
    7c9e:	03 96       	adiw	r24, 0x03	; 3
    7ca0:	08 95       	ret

00007ca2 <lcd_wordout>:
    7ca2:	cf 93       	push	r28
    7ca4:	c8 2f       	mov	r28, r24
    7ca6:	89 2f       	mov	r24, r25
    7ca8:	4c de       	rcall	.-872    	; 0x7942 <lcd_hexout>
    7caa:	8c 2f       	mov	r24, r28
    7cac:	4a de       	rcall	.-876    	; 0x7942 <lcd_hexout>
    7cae:	cf 91       	pop	r28
    7cb0:	08 95       	ret

00007cb2 <lcd_noteOut>:
    7cb2:	cf 93       	push	r28
    7cb4:	df 93       	push	r29
    7cb6:	88 23       	and	r24, r24
    7cb8:	e4 f1       	brlt	.+120    	; 0x7d32 <lcd_noteOut+0x80>
    7cba:	90 e0       	ldi	r25, 0x00	; 0
    7cbc:	02 c0       	rjmp	.+4      	; 0x7cc2 <lcd_noteOut+0x10>
    7cbe:	9f 5f       	subi	r25, 0xFF	; 255
    7cc0:	8c 50       	subi	r24, 0x0C	; 12
    7cc2:	8c 30       	cpi	r24, 0x0C	; 12
    7cc4:	e0 f7       	brcc	.-8      	; 0x7cbe <lcd_noteOut+0xc>
    7cc6:	48 2f       	mov	r20, r24
    7cc8:	50 e0       	ldi	r21, 0x00	; 0
    7cca:	4c 30       	cpi	r20, 0x0C	; 12
    7ccc:	51 05       	cpc	r21, r1
    7cce:	30 f4       	brcc	.+12     	; 0x7cdc <lcd_noteOut+0x2a>
    7cd0:	fa 01       	movw	r30, r20
    7cd2:	88 27       	eor	r24, r24
    7cd4:	ea 55       	subi	r30, 0x5A	; 90
    7cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    7cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    7cda:	50 c1       	rjmp	.+672    	; 0x7f7c <__tablejump2__>
    7cdc:	d3 e2       	ldi	r29, 0x23	; 35
    7cde:	80 e2       	ldi	r24, 0x20	; 32
    7ce0:	23 c0       	rjmp	.+70     	; 0x7d28 <lcd_noteOut+0x76>
    7ce2:	d3 e2       	ldi	r29, 0x23	; 35
    7ce4:	84 e4       	ldi	r24, 0x44	; 68
    7ce6:	20 c0       	rjmp	.+64     	; 0x7d28 <lcd_noteOut+0x76>
    7ce8:	d3 e2       	ldi	r29, 0x23	; 35
    7cea:	86 e4       	ldi	r24, 0x46	; 70
    7cec:	1d c0       	rjmp	.+58     	; 0x7d28 <lcd_noteOut+0x76>
    7cee:	d3 e2       	ldi	r29, 0x23	; 35
    7cf0:	87 e4       	ldi	r24, 0x47	; 71
    7cf2:	1a c0       	rjmp	.+52     	; 0x7d28 <lcd_noteOut+0x76>
    7cf4:	d3 e2       	ldi	r29, 0x23	; 35
    7cf6:	81 e4       	ldi	r24, 0x41	; 65
    7cf8:	17 c0       	rjmp	.+46     	; 0x7d28 <lcd_noteOut+0x76>
    7cfa:	d5 ea       	ldi	r29, 0xA5	; 165
    7cfc:	83 e4       	ldi	r24, 0x43	; 67
    7cfe:	14 c0       	rjmp	.+40     	; 0x7d28 <lcd_noteOut+0x76>
    7d00:	d5 ea       	ldi	r29, 0xA5	; 165
    7d02:	84 e4       	ldi	r24, 0x44	; 68
    7d04:	11 c0       	rjmp	.+34     	; 0x7d28 <lcd_noteOut+0x76>
    7d06:	d5 ea       	ldi	r29, 0xA5	; 165
    7d08:	85 e4       	ldi	r24, 0x45	; 69
    7d0a:	0e c0       	rjmp	.+28     	; 0x7d28 <lcd_noteOut+0x76>
    7d0c:	d5 ea       	ldi	r29, 0xA5	; 165
    7d0e:	86 e4       	ldi	r24, 0x46	; 70
    7d10:	0b c0       	rjmp	.+22     	; 0x7d28 <lcd_noteOut+0x76>
    7d12:	d5 ea       	ldi	r29, 0xA5	; 165
    7d14:	87 e4       	ldi	r24, 0x47	; 71
    7d16:	08 c0       	rjmp	.+16     	; 0x7d28 <lcd_noteOut+0x76>
    7d18:	d5 ea       	ldi	r29, 0xA5	; 165
    7d1a:	81 e4       	ldi	r24, 0x41	; 65
    7d1c:	05 c0       	rjmp	.+10     	; 0x7d28 <lcd_noteOut+0x76>
    7d1e:	d5 ea       	ldi	r29, 0xA5	; 165
    7d20:	88 e4       	ldi	r24, 0x48	; 72
    7d22:	02 c0       	rjmp	.+4      	; 0x7d28 <lcd_noteOut+0x76>
    7d24:	d3 e2       	ldi	r29, 0x23	; 35
    7d26:	83 e4       	ldi	r24, 0x43	; 67
    7d28:	99 23       	and	r25, r25
    7d2a:	39 f0       	breq	.+14     	; 0x7d3a <lcd_noteOut+0x88>
    7d2c:	cf e2       	ldi	r28, 0x2F	; 47
    7d2e:	c9 0f       	add	r28, r25
    7d30:	05 c0       	rjmp	.+10     	; 0x7d3c <lcd_noteOut+0x8a>
    7d32:	cd e2       	ldi	r28, 0x2D	; 45
    7d34:	dd e2       	ldi	r29, 0x2D	; 45
    7d36:	8d e2       	ldi	r24, 0x2D	; 45
    7d38:	01 c0       	rjmp	.+2      	; 0x7d3c <lcd_noteOut+0x8a>
    7d3a:	cd e2       	ldi	r28, 0x2D	; 45
    7d3c:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7d40:	8d 2f       	mov	r24, r29
    7d42:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7d46:	8c 2f       	mov	r24, r28
    7d48:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7d4c:	83 e0       	ldi	r24, 0x03	; 3
    7d4e:	df 91       	pop	r29
    7d50:	cf 91       	pop	r28
    7d52:	08 95       	ret

00007d54 <lcd_ChannelOut>:
    7d54:	cf 93       	push	r28
    7d56:	c8 2f       	mov	r28, r24
    7d58:	cf 70       	andi	r28, 0x0F	; 15
    7d5a:	81 e0       	ldi	r24, 0x01	; 1
    7d5c:	8c 0f       	add	r24, r28
    7d5e:	8a 30       	cpi	r24, 0x0A	; 10
    7d60:	28 f0       	brcs	.+10     	; 0x7d6c <lcd_ChannelOut+0x18>
    7d62:	81 e3       	ldi	r24, 0x31	; 49
    7d64:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7d68:	87 ef       	ldi	r24, 0xF7	; 247
    7d6a:	8c 0f       	add	r24, r28
    7d6c:	80 5d       	subi	r24, 0xD0	; 208
    7d6e:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7d72:	cf 91       	pop	r28
    7d74:	08 95       	ret

00007d76 <lcd_ManualOutDec>:
    7d76:	84 30       	cpi	r24, 0x04	; 4
    7d78:	20 f0       	brcs	.+8      	; 0x7d82 <lcd_ManualOutDec+0xc>
    7d7a:	8d e2       	ldi	r24, 0x2D	; 45
    7d7c:	0c 94 91 14 	jmp	0x2922	; 0x2922 <lcd_putc>
    7d80:	08 95       	ret
    7d82:	83 30       	cpi	r24, 0x03	; 3
    7d84:	21 f4       	brne	.+8      	; 0x7d8e <lcd_ManualOutDec+0x18>
    7d86:	80 e5       	ldi	r24, 0x50	; 80
    7d88:	0c 94 91 14 	jmp	0x2922	; 0x2922 <lcd_putc>
    7d8c:	08 95       	ret
    7d8e:	93 e3       	ldi	r25, 0x33	; 51
    7d90:	98 1b       	sub	r25, r24
    7d92:	89 2f       	mov	r24, r25
    7d94:	0c 94 91 14 	jmp	0x2922	; 0x2922 <lcd_putc>
    7d98:	08 95       	ret

00007d9a <lcd_blank>:
    7d9a:	cf 93       	push	r28
    7d9c:	04 c0       	rjmp	.+8      	; 0x7da6 <lcd_blank+0xc>
    7d9e:	80 e2       	ldi	r24, 0x20	; 32
    7da0:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7da4:	8c 2f       	mov	r24, r28
    7da6:	cf ef       	ldi	r28, 0xFF	; 255
    7da8:	c8 0f       	add	r28, r24
    7daa:	81 11       	cpse	r24, r1
    7dac:	f8 cf       	rjmp	.-16     	; 0x7d9e <lcd_blank+0x4>
    7dae:	cf 91       	pop	r28
    7db0:	08 95       	ret

00007db2 <lcd_clrEol>:
    7db2:	cf 93       	push	r28
    7db4:	90 e0       	ldi	r25, 0x00	; 0
    7db6:	04 c0       	rjmp	.+8      	; 0x7dc0 <lcd_clrEol+0xe>
    7db8:	80 e2       	ldi	r24, 0x20	; 32
    7dba:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7dbe:	9c 2f       	mov	r25, r28
    7dc0:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7dc4:	84 31       	cpi	r24, 0x14	; 20
    7dc6:	51 f0       	breq	.+20     	; 0x7ddc <lcd_clrEol+0x2a>
    7dc8:	84 35       	cpi	r24, 0x54	; 84
    7dca:	41 f0       	breq	.+16     	; 0x7ddc <lcd_clrEol+0x2a>
    7dcc:	88 32       	cpi	r24, 0x28	; 40
    7dce:	31 f0       	breq	.+12     	; 0x7ddc <lcd_clrEol+0x2a>
    7dd0:	88 36       	cpi	r24, 0x68	; 104
    7dd2:	21 f0       	breq	.+8      	; 0x7ddc <lcd_clrEol+0x2a>
    7dd4:	c1 e0       	ldi	r28, 0x01	; 1
    7dd6:	c9 0f       	add	r28, r25
    7dd8:	94 31       	cpi	r25, 0x14	; 20
    7dda:	70 f3       	brcs	.-36     	; 0x7db8 <lcd_clrEol+0x6>
    7ddc:	cf 91       	pop	r28
    7dde:	08 95       	ret

00007de0 <lcd_waitSymbolOn>:
    7de0:	cf 93       	push	r28
    7de2:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7de6:	8c e0       	ldi	r24, 0x0C	; 12
    7de8:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    7dec:	81 ea       	ldi	r24, 0xA1	; 161
    7dee:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7df2:	8c 2f       	mov	r24, r28
    7df4:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    7df8:	cf 91       	pop	r28
    7dfa:	08 95       	ret

00007dfc <lcd_waitSymbolOff>:
    7dfc:	cf 93       	push	r28
    7dfe:	c0 91 cd 03 	lds	r28, 0x03CD	; 0x8003cd <lcd_cursorPos>
    7e02:	8c e0       	ldi	r24, 0x0C	; 12
    7e04:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    7e08:	80 e2       	ldi	r24, 0x20	; 32
    7e0a:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>
    7e0e:	8c 2f       	mov	r24, r28
    7e10:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
    7e14:	cf 91       	pop	r28
    7e16:	08 95       	ret

00007e18 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    7e18:	84 30       	cpi	r24, 0x04	; 4
    7e1a:	28 f0       	brcs	.+10     	; 0x7e26 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    7e1c:	20 e0       	ldi	r18, 0x00	; 0
    7e1e:	0d c0       	rjmp	.+26     	; 0x7e3a <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7e20:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    7e22:	fa 01       	movw	r30, r20
    7e24:	02 c0       	rjmp	.+4      	; 0x7e2a <keylabel_set+0x12>
    7e26:	fb 01       	movw	r30, r22
    7e28:	20 e0       	ldi	r18, 0x00	; 0
    7e2a:	af 01       	movw	r20, r30
    7e2c:	4f 5f       	subi	r20, 0xFF	; 255
    7e2e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e30:	94 91       	lpm	r25, Z
    7e32:	99 23       	and	r25, r25
    7e34:	11 f0       	breq	.+4      	; 0x7e3a <keylabel_set+0x22>
    7e36:	25 30       	cpi	r18, 0x05	; 5
    7e38:	98 f3       	brcs	.-26     	; 0x7e20 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7e3a:	90 e0       	ldi	r25, 0x00	; 0
    7e3c:	dc 01       	movw	r26, r24
    7e3e:	aa 0f       	add	r26, r26
    7e40:	bb 1f       	adc	r27, r27
    7e42:	aa 0f       	add	r26, r26
    7e44:	bb 1f       	adc	r27, r27
    7e46:	8a 0f       	add	r24, r26
    7e48:	9b 1f       	adc	r25, r27
    7e4a:	dc 01       	movw	r26, r24
    7e4c:	ae 5c       	subi	r26, 0xCE	; 206
    7e4e:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7e50:	45 e0       	ldi	r20, 0x05	; 5
    7e52:	50 e0       	ldi	r21, 0x00	; 0
    7e54:	42 1b       	sub	r20, r18
    7e56:	51 09       	sbc	r21, r1
    7e58:	ca 01       	movw	r24, r20
    7e5a:	99 23       	and	r25, r25
    7e5c:	0c f4       	brge	.+2      	; 0x7e60 <keylabel_set+0x48>
    7e5e:	01 96       	adiw	r24, 0x01	; 1
    7e60:	95 95       	asr	r25
    7e62:	87 95       	ror	r24
    7e64:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    7e66:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    7e68:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7e6a:	0e c0       	rjmp	.+28     	; 0x7e88 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7e6c:	93 17       	cp	r25, r19
    7e6e:	10 f0       	brcs	.+4      	; 0x7e74 <keylabel_set+0x5c>
    7e70:	98 17       	cp	r25, r24
    7e72:	18 f0       	brcs	.+6      	; 0x7e7a <keylabel_set+0x62>
			*charBufPtr = ' ';
    7e74:	20 e2       	ldi	r18, 0x20	; 32
    7e76:	2c 93       	st	X, r18
    7e78:	05 c0       	rjmp	.+10     	; 0x7e84 <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7e7a:	fb 01       	movw	r30, r22
    7e7c:	24 91       	lpm	r18, Z
    7e7e:	2c 93       	st	X, r18
    7e80:	6f 5f       	subi	r22, 0xFF	; 255
    7e82:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    7e84:	11 96       	adiw	r26, 0x01	; 1
		i++;
    7e86:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7e88:	95 30       	cpi	r25, 0x05	; 5
    7e8a:	80 f3       	brcs	.-32     	; 0x7e6c <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7e8c:	08 95       	ret

00007e8e <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7e8e:	90 e0       	ldi	r25, 0x00	; 0
    7e90:	fc 01       	movw	r30, r24
    7e92:	ee 0f       	add	r30, r30
    7e94:	ff 1f       	adc	r31, r31
    7e96:	ee 0f       	add	r30, r30
    7e98:	ff 1f       	adc	r31, r31
    7e9a:	8e 0f       	add	r24, r30
    7e9c:	9f 1f       	adc	r25, r31
    7e9e:	fc 01       	movw	r30, r24
    7ea0:	ee 5c       	subi	r30, 0xCE	; 206
    7ea2:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7ea4:	80 e0       	ldi	r24, 0x00	; 0
    7ea6:	04 c0       	rjmp	.+8      	; 0x7eb0 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    7ea8:	90 e2       	ldi	r25, 0x20	; 32
    7eaa:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7eac:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7eae:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7eb0:	85 30       	cpi	r24, 0x05	; 5
    7eb2:	d0 f3       	brcs	.-12     	; 0x7ea8 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    7eb4:	08 95       	ret

00007eb6 <keylabel_toLCD>:

void keylabel_toLCD(){
    7eb6:	0f 93       	push	r16
    7eb8:	1f 93       	push	r17
    7eba:	cf 93       	push	r28
    7ebc:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7ebe:	d0 91 cd 03 	lds	r29, 0x03CD	; 0x8003cd <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    7ec2:	84 e5       	ldi	r24, 0x54	; 84
    7ec4:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7ec8:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7eca:	e2 e3       	ldi	r30, 0x32	; 50
    7ecc:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7ece:	08 c0       	rjmp	.+16     	; 0x7ee0 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    7ed0:	8f 01       	movw	r16, r30
    7ed2:	0f 5f       	subi	r16, 0xFF	; 255
    7ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    7ed6:	80 81       	ld	r24, Z
    7ed8:	0e 94 91 14 	call	0x2922	; 0x2922 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7edc:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    7ede:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7ee0:	c4 31       	cpi	r28, 0x14	; 20
    7ee2:	b0 f3       	brcs	.-20     	; 0x7ed0 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    7ee4:	8d 2f       	mov	r24, r29
    7ee6:	0e 94 67 14 	call	0x28ce	; 0x28ce <lcd_goto>
}
    7eea:	df 91       	pop	r29
    7eec:	cf 91       	pop	r28
    7eee:	1f 91       	pop	r17
    7ef0:	0f 91       	pop	r16
    7ef2:	08 95       	ret

00007ef4 <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7ef4:	90 e0       	ldi	r25, 0x00	; 0
    7ef6:	fc 01       	movw	r30, r24
    7ef8:	ee 0f       	add	r30, r30
    7efa:	ff 1f       	adc	r31, r31
    7efc:	ee 0f       	add	r30, r30
    7efe:	ff 1f       	adc	r31, r31
    7f00:	8e 0f       	add	r24, r30
    7f02:	9f 1f       	adc	r25, r31
    7f04:	fc 01       	movw	r30, r24
    7f06:	ee 5c       	subi	r30, 0xCE	; 206
    7f08:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7f0a:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7f0c:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7f0e:	12 c0       	rjmp	.+36     	; 0x7f34 <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    7f10:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7f12:	61 11       	cpse	r22, r1
    7f14:	06 c0       	rjmp	.+12     	; 0x7f22 <keylabel_statcheck+0x2e>
    7f16:	2a 32       	cpi	r18, 0x2A	; 42
    7f18:	21 f4       	brne	.+8      	; 0x7f22 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7f1a:	80 e8       	ldi	r24, 0x80	; 128
    7f1c:	80 83       	st	Z, r24
			result = 0xFF;
    7f1e:	8f ef       	ldi	r24, 0xFF	; 255
    7f20:	07 c0       	rjmp	.+14     	; 0x7f30 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7f22:	66 23       	and	r22, r22
    7f24:	29 f0       	breq	.+10     	; 0x7f30 <keylabel_statcheck+0x3c>
    7f26:	20 38       	cpi	r18, 0x80	; 128
    7f28:	19 f4       	brne	.+6      	; 0x7f30 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    7f2a:	8a e2       	ldi	r24, 0x2A	; 42
    7f2c:	80 83       	st	Z, r24
			result = 0xFF;
    7f2e:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    7f30:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7f32:	9f 5f       	subi	r25, 0xFF	; 255
    7f34:	95 30       	cpi	r25, 0x05	; 5
    7f36:	60 f3       	brcs	.-40     	; 0x7f10 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7f38:	08 95       	ret

00007f3a <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7f3a:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7f3c:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7f3e:	94 91       	lpm	r25, Z
    7f40:	99 23       	and	r25, r25
    7f42:	21 f0       	breq	.+8      	; 0x7f4c <get_StrLenP+0x12>
			return result;
		}
		pString++;
    7f44:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7f46:	8f 5f       	subi	r24, 0xFF	; 255
    7f48:	80 32       	cpi	r24, 0x20	; 32
    7f4a:	c8 f3       	brcs	.-14     	; 0x7f3e <get_StrLenP+0x4>
	return result;
}
    7f4c:	08 95       	ret

00007f4e <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7f4e:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7f50:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7f52:	90 81       	ld	r25, Z
    7f54:	99 23       	and	r25, r25
    7f56:	21 f0       	breq	.+8      	; 0x7f60 <get_StrLen+0x12>
			return result;
		}
		pString++;
    7f58:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7f5a:	8f 5f       	subi	r24, 0xFF	; 255
    7f5c:	80 32       	cpi	r24, 0x20	; 32
    7f5e:	c8 f3       	brcs	.-14     	; 0x7f52 <get_StrLen+0x4>
	return result;
}
    7f60:	08 95       	ret

00007f62 <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    7f62:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7f64:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    7f66:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7f68:	06 c0       	rjmp	.+12     	; 0x7f76 <reverse_Bits+0x14>
		result = result << 1;
    7f6a:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7f6c:	32 2f       	mov	r19, r18
    7f6e:	31 70       	andi	r19, 0x01	; 1
    7f70:	83 2b       	or	r24, r19
		val = val >> 1;
    7f72:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7f74:	9f 5f       	subi	r25, 0xFF	; 255
    7f76:	98 30       	cpi	r25, 0x08	; 8
    7f78:	c0 f3       	brcs	.-16     	; 0x7f6a <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7f7a:	08 95       	ret

00007f7c <__tablejump2__>:
    7f7c:	ee 0f       	add	r30, r30
    7f7e:	ff 1f       	adc	r31, r31
    7f80:	88 1f       	adc	r24, r24
    7f82:	8b bf       	out	0x3b, r24	; 59
    7f84:	07 90       	elpm	r0, Z+
    7f86:	f6 91       	elpm	r31, Z
    7f88:	e0 2d       	mov	r30, r0
    7f8a:	19 94       	eijmp

00007f8c <eeprom_read_block>:
    7f8c:	dc 01       	movw	r26, r24
    7f8e:	cb 01       	movw	r24, r22

00007f90 <eeprom_read_blraw>:
    7f90:	fc 01       	movw	r30, r24
    7f92:	f9 99       	sbic	0x1f, 1	; 31
    7f94:	fe cf       	rjmp	.-4      	; 0x7f92 <eeprom_read_blraw+0x2>
    7f96:	06 c0       	rjmp	.+12     	; 0x7fa4 <eeprom_read_blraw+0x14>
    7f98:	f2 bd       	out	0x22, r31	; 34
    7f9a:	e1 bd       	out	0x21, r30	; 33
    7f9c:	f8 9a       	sbi	0x1f, 0	; 31
    7f9e:	31 96       	adiw	r30, 0x01	; 1
    7fa0:	00 b4       	in	r0, 0x20	; 32
    7fa2:	0d 92       	st	X+, r0
    7fa4:	41 50       	subi	r20, 0x01	; 1
    7fa6:	50 40       	sbci	r21, 0x00	; 0
    7fa8:	b8 f7       	brcc	.-18     	; 0x7f98 <eeprom_read_blraw+0x8>
    7faa:	08 95       	ret

00007fac <eeprom_read_byte>:
    7fac:	f9 99       	sbic	0x1f, 1	; 31
    7fae:	fe cf       	rjmp	.-4      	; 0x7fac <eeprom_read_byte>
    7fb0:	92 bd       	out	0x22, r25	; 34
    7fb2:	81 bd       	out	0x21, r24	; 33
    7fb4:	f8 9a       	sbi	0x1f, 0	; 31
    7fb6:	99 27       	eor	r25, r25
    7fb8:	80 b5       	in	r24, 0x20	; 32
    7fba:	08 95       	ret

00007fbc <eeprom_read_word>:
    7fbc:	a8 e1       	ldi	r26, 0x18	; 24
    7fbe:	b0 e0       	ldi	r27, 0x00	; 0
    7fc0:	42 e0       	ldi	r20, 0x02	; 2
    7fc2:	50 e0       	ldi	r21, 0x00	; 0
    7fc4:	e5 cf       	rjmp	.-54     	; 0x7f90 <eeprom_read_blraw>

00007fc6 <eeprom_update_block>:
    7fc6:	dc 01       	movw	r26, r24
    7fc8:	a4 0f       	add	r26, r20
    7fca:	b5 1f       	adc	r27, r21
    7fcc:	41 50       	subi	r20, 0x01	; 1
    7fce:	50 40       	sbci	r21, 0x00	; 0
    7fd0:	40 f0       	brcs	.+16     	; 0x7fe2 <eeprom_update_block+0x1c>
    7fd2:	cb 01       	movw	r24, r22
    7fd4:	84 0f       	add	r24, r20
    7fd6:	95 1f       	adc	r25, r21
    7fd8:	2e 91       	ld	r18, -X
    7fda:	05 d0       	rcall	.+10     	; 0x7fe6 <eeprom_update_r18>
    7fdc:	41 50       	subi	r20, 0x01	; 1
    7fde:	50 40       	sbci	r21, 0x00	; 0
    7fe0:	d8 f7       	brcc	.-10     	; 0x7fd8 <eeprom_update_block+0x12>
    7fe2:	08 95       	ret

00007fe4 <eeprom_update_byte>:
    7fe4:	26 2f       	mov	r18, r22

00007fe6 <eeprom_update_r18>:
    7fe6:	f9 99       	sbic	0x1f, 1	; 31
    7fe8:	fe cf       	rjmp	.-4      	; 0x7fe6 <eeprom_update_r18>
    7fea:	92 bd       	out	0x22, r25	; 34
    7fec:	81 bd       	out	0x21, r24	; 33
    7fee:	f8 9a       	sbi	0x1f, 0	; 31
    7ff0:	01 97       	sbiw	r24, 0x01	; 1
    7ff2:	00 b4       	in	r0, 0x20	; 32
    7ff4:	02 16       	cp	r0, r18
    7ff6:	39 f0       	breq	.+14     	; 0x8006 <eeprom_update_r18+0x20>
    7ff8:	1f ba       	out	0x1f, r1	; 31
    7ffa:	20 bd       	out	0x20, r18	; 32
    7ffc:	0f b6       	in	r0, 0x3f	; 63
    7ffe:	f8 94       	cli
    8000:	fa 9a       	sbi	0x1f, 2	; 31
    8002:	f9 9a       	sbi	0x1f, 1	; 31
    8004:	0f be       	out	0x3f, r0	; 63
    8006:	08 95       	ret

00008008 <eeprom_update_word>:
    8008:	01 96       	adiw	r24, 0x01	; 1
    800a:	27 2f       	mov	r18, r23
    800c:	ec df       	rcall	.-40     	; 0x7fe6 <eeprom_update_r18>
    800e:	ea cf       	rjmp	.-44     	; 0x7fe4 <eeprom_update_byte>

00008010 <_exit>:
    8010:	f8 94       	cli

00008012 <__stop_program>:
    8012:	ff cf       	rjmp	.-2      	; 0x8012 <__stop_program>
