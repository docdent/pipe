
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00007b56  00007c0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007b56  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001719  00800208  00800208  00007c12  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008c12  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008c44  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b40  00000000  00000000  00008c88  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000f147  00000000  00000000  000097c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002622  00000000  00000000  0001890f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008dde  00000000  00000000  0001af31  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001c0c  00000000  00000000  00023d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000034f4  00000000  00000000  0002591c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009973  00000000  00000000  00028e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ef8  00000000  00000000  00032783  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__ctors_end>
       4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
       8:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
       c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      10:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      14:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      18:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      1c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      20:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      24:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      28:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      2c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      30:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      34:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      38:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      3c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      40:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      44:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      48:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      4c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      50:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      54:	0c 94 c1 0f 	jmp	0x1f82	; 0x1f82 <__vector_21>
      58:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      5c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      60:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      64:	0c 94 77 38 	jmp	0x70ee	; 0x70ee <__vector_25>
      68:	0c 94 bd 38 	jmp	0x717a	; 0x717a <__vector_26>
      6c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      70:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      74:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      78:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      7c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      80:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      84:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      88:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      8c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      90:	0c 94 8a 36 	jmp	0x6d14	; 0x6d14 <__vector_36>
      94:	0c 94 df 36 	jmp	0x6dbe	; 0x6dbe <__vector_37>
      98:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      9c:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      a0:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      a4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      a8:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      ac:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      b0:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      b4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      b8:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      bc:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      c0:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      c4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      c8:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      cc:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      d0:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      d4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      d8:	0c 94 7d 39 	jmp	0x72fa	; 0x72fa <__vector_54>
      dc:	0c 94 d5 39 	jmp	0x73aa	; 0x73aa <__vector_55>
      e0:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__bad_interrupt>
      e4:	a4 1f       	adc	r26, r20
      e6:	af 1f       	adc	r26, r31
      e8:	bb 1f       	adc	r27, r27
      ea:	d7 1f       	adc	r29, r23
      ec:	f4 1f       	adc	r31, r20
      ee:	15 20       	and	r1, r5
      f0:	20 20       	and	r2, r0
      f2:	2b 20       	and	r2, r11
      f4:	40 20       	and	r4, r0
      f6:	56 20       	and	r5, r6
      f8:	5e 20       	and	r5, r14
      fa:	6c 20       	and	r6, r12
      fc:	40 20       	and	r4, r0
      fe:	99 20       	and	r9, r9
     100:	a9 20       	and	r10, r9
     102:	cd 20       	and	r12, r13
     104:	1f 21       	and	r17, r15
     106:	38 21       	and	r19, r8
     108:	4d 21       	and	r20, r13
     10a:	66 21       	and	r22, r6
     10c:	6e 21       	and	r22, r14
     10e:	93 21       	and	r25, r3
     110:	93 21       	and	r25, r3
     112:	ac 21       	and	r26, r12
     114:	b9 21       	and	r27, r9
     116:	a8 21       	and	r26, r8
     118:	14 22       	and	r1, r20
     11a:	1c 22       	and	r1, r28
     11c:	67 22       	and	r6, r23
     11e:	c9 22       	and	r12, r25
     120:	f3 22       	and	r15, r19
     122:	1f 23       	and	r17, r31
     124:	4e 23       	and	r20, r30
     126:	56 23       	and	r21, r22
     128:	5c 23       	and	r21, r28
     12a:	14 22       	and	r1, r20
     12c:	64 23       	and	r22, r20
     12e:	78 23       	and	r23, r24
     130:	5c 23       	and	r21, r28
     132:	b6 23       	and	r27, r22
     134:	c3 23       	and	r28, r19
     136:	cf 23       	and	r28, r31
     138:	e4 23       	and	r30, r20
     13a:	fd 23       	and	r31, r29
     13c:	20 24       	eor	r2, r0
     13e:	2b 24       	eor	r2, r11
     140:	31 24       	eor	r3, r1
     142:	36 24       	eor	r3, r6
     144:	49 24       	eor	r4, r9
     146:	6a 24       	eor	r6, r10
     148:	7d 24       	eor	r7, r13
     14a:	36 24       	eor	r3, r6
     14c:	11 3c       	cpi	r17, 0xC1	; 193
     14e:	26 3c       	cpi	r18, 0xC6	; 198
     150:	14 3c       	cpi	r17, 0xC4	; 196
     152:	05 3c       	cpi	r16, 0xC5	; 197
     154:	17 3c       	cpi	r17, 0xC7	; 199
     156:	1a 3c       	cpi	r17, 0xCA	; 202
     158:	08 3c       	cpi	r16, 0xC8	; 200
     15a:	1d 3c       	cpi	r17, 0xCD	; 205
     15c:	0b 3c       	cpi	r16, 0xCB	; 203
     15e:	20 3c       	cpi	r18, 0xC0	; 192
     160:	0e 3c       	cpi	r16, 0xCE	; 206
     162:	23 3c       	cpi	r18, 0xC3	; 195

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWnone>:
     2b4:	6e 6f 6e 65 00                                      none.

000002b9 <usbHWmidiThru>:
     2b9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

000002c5 <usbHWmidiOut>:
     2c5:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

000002cf <usbHWmidiIn>:
     2cf:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

000002d8 <usbHWmidichanSW>:
     2d8:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2e8:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2f8:	20 00                                                .

000002fa <usbHWBits>:
     2fa:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000302 <usbHWmodule>:
     302:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000030a <usbHWempty>:
     30a:	65 6d 70 74 79 00                                   empty.

00000310 <usbHWRegister>:
     310:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000031c <usbHWRange>:
     31c:	52 61 6e 67 65 20 00                                Range .

00000323 <usbHWManual>:
     323:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000032c <usbHWmodulCheck>:
     32c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     33c:	20 00                                                .

0000033e <usbHWmodulInst>:
     33e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     34e:	3a 20 00                                            : .

00000351 <usbHWtitel>:
     351:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     361:	72 61 74 69 6f 6e 0d 0a 00                          ration...

0000036a <HelloMsg>:
     36a:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     37a:	65 72 66 61 63 65 0d 0a 00                          erface...

00000383 <usbLog>:
     383:	4c 6f 67 0d 0a 00                                   Log...

00000389 <usbEmpty>:
     389:	65 6d 70 74 79 0d 0a 00                             empty...

00000391 <msg_programming1>:
     391:	73 61 76 65 2e 2e 2e 00                             save....

00000399 <logNone>:
     399:	3c 6e 6f 6e 65 3e 00                                <none>.

000003a0 <stringNotAssigen>:
     3a0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003ab <menuMessageE>:
     3ab:	45 3a 00                                            E:.

000003ae <menuMessageOK>:
     3ae:	6f 6b 20 00                                         ok .

000003b2 <menuMessageAbort>:
     3b2:	61 62 6f 72 74 00                                   abort.

000003b8 <menuMessageMIDIpanic>:
     3b8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003c7 <messageRegisterMan>:
     3c7:	2b 00                                               +.

000003c9 <messageLoaded>:
     3c9:	20 52 65 67 00                                       Reg.

000003ce <messageSaved>:
     3ce:	20 52 65 67 20 7e 20 00                              Reg ~ .

000003d6 <MenuMIDIOutText>:
     3d6:	4f 75 74 3a 00                                      Out:.

000003db <MenuMIDIInText>:
     3db:	49 6e 3a 00                                         In:.

000003df <initMenuText>:
     3df:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003e9 <nibbleInfo>:
	...
     3f1:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     401:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     411:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     421:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     431:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     441:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     451:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     461:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000470 <menu_selFunc>:
     470:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 cc 07     ..<none>........
     480:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     490:	d6 07 c2 07 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     4a0:	6e 00 00 00 3a 0d b8 07 00 00 00 00 01 10 4b 6f     n...:.........Ko
     4b0:	70 70 65 6c 32 3c 33 00 00 00 9a 07 7c 1e 00 00     ppel2<3.....|...
     4c0:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 90 07     ..Koppel1<3.....
     4d0:	7f 1e 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     ......KoppelP<3.
     4e0:	00 00 86 07 82 1e 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     4f0:	31 3c 32 00 00 00 7c 07 85 1e 00 00 01 10 4b 6f     1<2...|.......Ko
     500:	70 70 65 6c 50 3c 32 00 00 00 72 07 88 1e 00 00     ppelP<2...r.....
     510:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 68 07     ..KoppelP<1...h.
     520:	8b 1e 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     ......Koppel3<2.
     530:	00 00 5e 07 8e 1e 00 00 01 10 4b 6f 70 70 65 6c     ..^.......Koppel
     540:	33 3c 31 00 00 00 54 07 91 1e 00 00 01 10 4b 6f     3<1...T.......Ko
     550:	70 70 65 6c 33 3c 50 00 00 00 4a 07 94 1e 00 00     ppel3<P...J.....
     560:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 40 07     ..Koppel2<1...@.
     570:	97 1e 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     ......Koppel2<P.
     580:	00 00 36 07 9a 1e 00 00 01 10 4b 6f 70 70 65 6c     ..6.......Koppel
     590:	31 3c 50 00 00 00 2c 07 9d 1e 00 00 01 10 50 72     1<P...,.......Pr
     5a0:	2e 2b 2f 73 65 74 00 00 00 00 fa 06 2f 2b 00 00     .+/set....../+..
     5b0:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 f0 06     ..Pr.-/clr......
     5c0:	c1 1e 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     ......Prog. 1A..
     5d0:	00 00 22 07 ad 2b 00 00 01 10 50 72 6f 67 2e 20     .."..+....Prog. 
     5e0:	32 41 00 00 00 00 18 07 b0 2b 00 00 01 10 50 72     2A.......+....Pr
     5f0:	6f 67 2e 20 33 41 00 00 00 00 0e 07 b3 2b 00 00     og. 3A.......+..
     600:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 04 07     ..Prog. 4A......
     610:	b6 2b 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     .+....Prog.clr..
     620:	00 00 b4 06 b9 19 00 00 01 10 50 72 6f 67 2e 73     ..........Prog.s
     630:	65 74 00 00 00 00 be 06 4e 2b 00 00 01 10 50 72     et......N+....Pr
     640:	6f 67 2e 2b 00 00 00 00 00 00 e6 06 d9 1e 00 00     og.+............
     650:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 dc 06     ..Prog.-........
     660:	f5 1e 00 00 01 10 50 72 42 61 6e 6b 2b 00 00 00     ......PrBank+...
     670:	00 00 d2 06 11 1f 00 00 01 10 50 72 42 61 6e 6b     ..........PrBank
     680:	2e 2d 00 00 00 00 c8 06 1c 1f 00 00 01 10 4d 49     .-............MI
     690:	44 49 20 4f 66 66 00 00 00 00 a4 07 73 29 00 00     DI Off......s)..
     6a0:	c1 10 53 65 74 75 70 00 00 00 00 00 2a 0e ae 07     ..Setup.....*...
     6b0:	00 00 00 00                                         ....

000006b4 <shortKeyTextRegOff>:
     6b4:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

000006be <shortKeyTextPRS>:
     6be:	50 73 65 74 00 00 00 00 00 00                       Pset......

000006c8 <shortKeyTextPBD>:
     6c8:	50 72 42 2d 00 00 00 00 00 00                       PrB-......

000006d2 <shortKeyTextPBI>:
     6d2:	50 72 42 2b 00 00 00 00 00 00                       PrB+......

000006dc <shortKeyTextPRD>:
     6dc:	50 2d 00 00 00 00 00 00 00 00                       P-........

000006e6 <shortKeyTextPRI>:
     6e6:	50 2b 00 00 00 00 00 00 00 00                       P+........

000006f0 <shortKeyTextPRM>:
     6f0:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

000006fa <shortKeyTextPRP>:
     6fa:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

00000704 <shortKeyTextK4A>:
     704:	50 41 34 00 00 00 00 00 00 00                       PA4.......

0000070e <shortKeyTextK3A>:
     70e:	50 41 33 00 00 00 00 00 00 00                       PA3.......

00000718 <shortKeyTextK2A>:
     718:	50 41 32 00 00 00 00 00 00 00                       PA2.......

00000722 <shortKeyTextK1A>:
     722:	50 41 31 00 00 00 00 00 00 00                       PA1.......

0000072c <shortKeyTextCpl1P>:
     72c:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000736 <shortKeyTextCpl2P>:
     736:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000740 <shortKeyTextCpl21>:
     740:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000074a <shortKeyTextCpl3P>:
     74a:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000754 <shortKeyTextCpl31>:
     754:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000075e <shortKeyTextCpl32>:
     75e:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000768 <shortKeyTextCplP1>:
     768:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

00000772 <shortKeyTextCplP2>:
     772:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

0000077c <shortKeyTextCpl12>:
     77c:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

00000786 <shortKeyTextCplP3>:
     786:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

00000790 <shortKeyTextCpl13>:
     790:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

0000079a <shortKeyTextCpl23>:
     79a:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000007a4 <shortKeyTextMIDIoff>:
     7a4:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000007ae <shortKeyTextSetup>:
     7ae:	53 65 74 75 00 00 00 00 00 00                       Setu......

000007b8 <shortKeyTextStim>:
     7b8:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000007c2 <shortKeyTextMenu>:
     7c2:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000007cc <shortKeyTextNone>:
	...

000007d6 <menu_main>:
     7d6:	81 00 4d 61 6e 75 61 6c 00 00 00 00 4e 08 00 00     ..Manual....N...
     7e6:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     7f6:	76 08 00 00 38 1e 00 00 01 00 4d 49 44 49 00 00     v...8.....MIDI..
     806:	00 00 00 00 42 0a 00 00 00 00 00 00 01 00 54 61     ....B.........Ta
     816:	73 74 65 6e 00 00 00 00 ea 0c 00 00 00 00 dc 19     sten............
     826:	01 00 53 74 61 74 75 73 00 00 00 00 12 12 00 00     ..Status........
     836:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     846:	2a 0e 00 00 00 00 00 00                             *.......

0000084e <menu_manual>:
     84e:	81 00 4b 6f 70 70 65 6c 00 00 00 00 52 09 00 00     ..Koppel....R...
     85e:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     86e:	3a 0d 00 00 00 00 00 00                             :.......

00000876 <menu_register>:
     876:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 a8 05     ..Prog.lad......
     886:	00 00 45 1e 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ..E...Prog.sp...
     896:	00 00 a8 05 00 00 d1 19 01 00 61 75 73 00 00 00     ..........aus...
	...
     8ae:	3f 1e 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ?.....Reg.1-8...
     8be:	00 00 6d 05 00 00 91 19 0e 00 52 65 67 2e 39 2d     ..m.......Reg.9-
     8ce:	31 36 00 00 00 00 6e 05 00 00 91 19 0e 00 52 65     16....n.......Re
     8de:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 91 19     g.17-24...o.....
     8ee:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     8fe:	00 00 91 19 0e 00 52 65 67 2e 33 33 2d 34 30 00     ......Reg.33-40.
     90e:	00 00 71 05 00 00 91 19 0e 00 52 65 67 2e 34 31     ..q.......Reg.41
     91e:	2d 34 38 00 00 00 72 05 00 00 91 19 0e 00 52 65     -48...r.......Re
     92e:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 91 19     g.49-54...s.....
     93e:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     94e:	00 00 91 19                                         ....

00000952 <menu_coupler>:
     952:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 11 08     ..2<3...........
     962:	00 00 be 19 09 00 31 3c 33 00 00 00 00 00 00 00     ......1<3.......
     972:	00 00 12 08 00 00 be 19 09 00 31 3c 32 00 00 00     ..........1<2...
     982:	00 00 00 00 00 00 13 08 00 00 be 19 09 00 50 3c     ..............P<
     992:	33 00 00 00 00 00 00 00 00 00 14 08 00 00 be 19     3...............
     9a2:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 15 08     ..P<2...........
     9b2:	00 00 be 19 09 00 50 3c 31 00 00 00 00 00 00 00     ......P<1.......
     9c2:	00 00 16 08 00 00 be 19 09 00 33 3c 32 00 00 00     ..........3<2...
     9d2:	00 00 00 00 00 00 17 08 00 00 be 19 09 00 33 3c     ..............3<
     9e2:	31 00 00 00 00 00 00 00 00 00 18 08 00 00 be 19     1...............
     9f2:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 19 08     ..3<P...........
     a02:	00 00 be 19 09 00 32 3c 31 00 00 00 00 00 00 00     ......2<1.......
     a12:	00 00 1a 08 00 00 be 19 09 00 32 3c 50 00 00 00     ..........2<P...
     a22:	00 00 00 00 00 00 1b 08 00 00 be 19 c9 00 31 3c     ..............1<
     a32:	50 00 00 00 00 00 00 00 00 00 1c 08 00 00 be 19     P...............

00000a42 <menu_midi>:
     a42:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     a52:	73 29 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     s)....MIDIin....
     a62:	0a 0b 00 00 00 00 4b 1b 01 00 4d 49 44 49 6f 75     ......K...MIDIou
     a72:	74 00 00 00 8a 0d 00 00 00 00 47 1b 03 10 54 68     t.........G...Th
     a82:	72 75 2d 49 6e 00 00 00 00 00 26 08 00 00 8d 19     ru-In.....&.....
     a92:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 27 08     ..Thru-Out....'.
     aa2:	00 00 8d 19 09 00 41 63 63 65 70 74 20 50 43 00     ......Accept PC.
     ab2:	00 00 32 09 00 00 43 1b 09 00 41 63 74 2e 53 65     ..2...C...Act.Se
     ac2:	6e 73 65 00 00 00 30 09 00 00 43 1b 09 00 56 65     nse...0...C...Ve
     ad2:	6c 5a 34 4f 66 66 00 00 00 00 31 09 00 00 43 1b     lZ4Off....1...C.
     ae2:	06 08 52 78 42 75 66 55 73 65 00 00 00 00 41 15     ..RxBufUse....A.
     af2:	00 00 00 00 c6 08 54 78 42 75 66 55 73 65 00 00     ......TxBufUse..
     b02:	00 00 4a 16 00 00 00 00                             ..J.....

00000b0a <menu_midiIn>:
     b0a:	81 00 43 68 2e 31 00 00 00 00 00 00 4a 0c 00 00     ..Ch.1......J...
     b1a:	07 19 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     b2a:	4a 0c 01 00 07 19 00 00 01 00 43 68 2e 33 00 00     J.........Ch.3..
     b3a:	00 00 00 00 4a 0c 02 00 07 19 00 00 01 00 43 68     ....J.........Ch
     b4a:	2e 34 00 00 00 00 00 00 4a 0c 03 00 07 19 00 00     .4......J.......
     b5a:	01 00 43 68 2e 35 00 00 00 00 00 00 4a 0c 04 00     ..Ch.5......J...
     b6a:	07 19 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     b7a:	4a 0c 05 00 07 19 00 00 01 00 43 68 2e 37 00 00     J.........Ch.7..
     b8a:	00 00 00 00 4a 0c 06 00 07 19 00 00 01 00 43 68     ....J.........Ch
     b9a:	2e 38 00 00 00 00 00 00 4a 0c 07 00 07 19 00 00     .8......J.......
     baa:	01 00 43 68 2e 39 00 00 00 00 00 00 4a 0c 08 00     ..Ch.9......J...
     bba:	07 19 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     bca:	4a 0c 09 00 07 19 00 00 01 00 43 68 2e 31 31 00     J.........Ch.11.
     bda:	00 00 00 00 4a 0c 0a 00 07 19 00 00 01 00 43 68     ....J.........Ch
     bea:	2e 31 32 00 00 00 00 00 4a 0c 0b 00 07 19 00 00     .12.....J.......
     bfa:	01 00 43 68 2e 31 33 00 00 00 00 00 4a 0c 0c 00     ..Ch.13.....J...
     c0a:	07 19 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     c1a:	4a 0c 0d 00 07 19 00 00 01 00 43 68 2e 31 35 00     J.........Ch.15.
     c2a:	00 00 00 00 4a 0c 0e 00 07 19 00 00 c1 00 43 68     ....J.........Ch
     c3a:	2e 31 36 00 00 00 00 00 4a 0c 0f 00 07 19 00 00     .16.....J.......

00000c4a <menu_midiInSec>:
     c4a:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 0c 00 00     ..Sect.1........
     c5a:	12 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     c6a:	9a 0c 01 00 12 19 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     c7a:	00 00 00 00 9a 0c 02 00 12 19 00 00 c1 00 53 65     ..............Se
     c8a:	63 74 2e 34 00 00 00 00 9a 0c 03 00 12 19 00 00     ct.4............

00000c9a <menu_midiInVar>:
     c9a:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 28 08     ..Manual......(.
     caa:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     cba:	00 00 29 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..).......Range.
     cca:	00 00 00 00 00 00 2a 08 00 00 00 00 c4 90 4d 61     ......*.......Ma
     cda:	6e 4e 6f 74 65 00 00 00 00 00 2b 08 00 00 00 00     nNote.....+.....

00000cea <menu_key>:
     cea:	81 08 54 61 73 74 65 31 00 00 00 00 70 04 00 00     ..Taste1....p...
     cfa:	76 19 40 2c 01 08 54 61 73 74 65 32 00 00 00 00     v.@,..Taste2....
     d0a:	70 04 01 00 76 19 40 2c 01 08 54 61 73 74 65 33     p...v.@,..Taste3
     d1a:	00 00 00 00 70 04 02 00 76 19 40 2c c1 08 54 61     ....p...v.@,..Ta
     d2a:	73 74 65 34 00 00 00 00 70 04 03 00 76 19 40 2c     ste4....p...v.@,

00000d3a <menu_tune>:
     d3a:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     d4a:	26 1a 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     &.... Man.2.....
     d5a:	00 00 01 00 26 1a 00 00 01 20 4d 61 6e 2e 31 00     ....&.... Man.1.
     d6a:	00 00 00 00 00 00 02 00 26 1a 00 00 c1 20 50 65     ........&.... Pe
     d7a:	64 61 6c 00 00 00 00 00 00 00 03 00 26 1a 00 00     dal.........&...

00000d8a <menu_midiOut>:
     d8a:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 28 09     ..III.........(.
     d9a:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     daa:	00 00 2a 09 00 00 00 00 03 10 49 00 00 00 00 00     ..*.......I.....
     dba:	00 00 00 00 00 00 2c 09 00 00 00 00 03 10 50 00     ......,.......P.
	...
     dd2:	00 00 2e 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..........III(in
     de2:	74 29 00 00 00 00 29 09 00 00 00 00 03 10 49 49     t)....).......II
     df2:	28 69 6e 74 29 00 00 00 00 00 2b 09 00 00 00 00     (int).....+.....
     e02:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2d 09     ..I(int)......-.
     e12:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     e22:	00 00 2f 09 00 00 00 00                             ../.....

00000e2a <menu_setup>:
     e2a:	81 00 4d 6f 64 75 6c 65 00 00 00 00 f2 0e 00 00     ..Module........
     e3a:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     e4a:	62 12 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     b.........Power.
     e5a:	00 00 00 00 b6 0e 00 00 00 00 00 00 c1 00 45 45     ..............EE
     e6a:	70 72 6f 6d 00 00 00 00 7a 0e 00 00 00 00 00 00     prom....z.......

00000e7a <menu_eeprom>:
     e7a:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     e8a:	86 2a 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     .*....EEBackup..
     e9a:	00 00 00 00 6e 2a 00 00 c1 00 45 45 52 65 73 74     ....n*....EERest
     eaa:	6f 72 65 00 00 00 00 00 7a 2a 00 00                 ore.....z*..

00000eb6 <menu_Power>:
     eb6:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     ec6:	04 2d 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .-....PowerOff..
     ed6:	00 00 00 00 0d 2d 00 00 c1 00 50 2e 52 65 73 74     .....-....P.Rest
     ee6:	61 72 74 00 00 00 00 00 15 2d 00 00                 art......-..

00000ef2 <menu_module>:
     ef2:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     f02:	00 00 59 1b 0a 00 4d 6f 64 57 72 69 74 65 00 00     ..Y...ModWrite..
     f12:	00 00 56 03 00 00 59 1b 0a 08 4d 6f 64 4f 4b 00     ..V...Y...ModOK.
     f22:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     f32:	64 54 65 73 74 00 00 00 56 0f 00 00 00 00 00 00     dTest...V.......
     f42:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 46 10 00 00     ..ModAssign.F...
     f52:	00 00 4f 1b                                         ..O.

00000f56 <menu_ModeSel>:
     f56:	81 00 4d 6f 64 2e 30 00 00 00 00 00 f6 0f 00 00     ..Mod.0.........
     f66:	fc 18 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     f76:	f6 0f 01 00 fc 18 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
     f86:	00 00 00 00 f6 0f 02 00 fc 18 00 00 01 00 4d 6f     ..............Mo
     f96:	64 2e 33 00 00 00 00 00 f6 0f 03 00 fc 18 00 00     d.3.............
     fa6:	01 00 4d 6f 64 2e 34 00 00 00 00 00 f6 0f 04 00     ..Mod.4.........
     fb6:	fc 18 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     fc6:	f6 0f 05 00 fc 18 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
     fd6:	00 00 00 00 f6 0f 06 00 fc 18 00 00 c1 00 4d 6f     ..............Mo
     fe6:	64 2e 37 00 00 00 00 00 f6 0f 07 00 fc 18 00 00     d.7.............

00000ff6 <menu_ModTestSelcted>:
     ff6:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
    1006:	e0 19 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
    1016:	00 00 ad 05 93 18 cf 18 01 00 54 65 73 74 50 74     ..........TestPt
    1026:	72 6e 00 00 00 00 00 00 51 2a 00 00 c1 00 4c 6f     rn......Q*....Lo
    1036:	6f 70 54 73 74 00 00 00 00 00 00 00 14 1a 00 00     opTst...........

00001046 <menu_modAssign>:
    1046:	81 00 4d 61 6e 2e 33 00 00 00 00 00 4a 11 00 00     ..Man.3.....J...
    1056:	30 19 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     0.....Man.2.....
    1066:	4a 11 01 00 30 19 00 00 01 00 4d 61 6e 2e 31 00     J...0.....Man.1.
    1076:	00 00 00 00 4a 11 02 00 30 19 00 00 01 00 50 65     ....J...0.....Pe
    1086:	64 61 6c 00 00 00 00 00 4a 11 03 00 30 19 00 00     dal.....J...0...
    1096:	c1 00 52 65 67 69 73 74 65 72 00 00 aa 10 04 00     ..Register......
    10a6:	00 00 00 00                                         ....

000010aa <menu_modSection8>:
    10aa:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 11 00 00     ..Sect.1........
    10ba:	60 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     `.....Sect.2....
    10ca:	9a 11 01 00 60 19 00 00 01 00 53 65 63 74 2e 33     ....`.....Sect.3
    10da:	00 00 00 00 9a 11 02 00 60 19 00 00 01 00 53 65     ........`.....Se
    10ea:	63 74 2e 34 00 00 00 00 9a 11 03 00 60 19 00 00     ct.4........`...
    10fa:	01 00 53 65 63 74 2e 35 00 00 00 00 9a 11 04 00     ..Sect.5........
    110a:	60 19 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     `.....Sect.6....
    111a:	9a 11 05 00 60 19 00 00 01 00 53 65 63 74 2e 37     ....`.....Sect.7
    112a:	00 00 00 00 9a 11 06 00 60 19 00 00 c1 00 53 65     ........`.....Se
    113a:	63 74 2e 38 00 00 00 00 9a 11 07 00 60 19 00 00     ct.8........`...

0000114a <menu_modSection>:
    114a:	81 00 53 65 63 74 2e 31 00 00 00 00 d6 11 00 00     ..Sect.1........
    115a:	3b 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ;.....Sect.2....
    116a:	d6 11 01 00 3b 19 00 00 01 00 53 65 63 74 2e 33     ....;.....Sect.3
    117a:	00 00 00 00 d6 11 02 00 3b 19 00 00 c1 00 53 65     ........;.....Se
    118a:	63 74 2e 34 00 00 00 00 d6 11 03 00 3b 19 00 00     ct.4........;...

0000119a <menu_modDefineReg>:
    119a:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f7 07     ..RegBeg........
    11aa:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    11ba:	00 00 f8 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    11ca:	2f 42 69 74 00 00 f9 07 00 00 00 00                 /Bit........

000011d6 <menu_modDefine>:
    11d6:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 34 09     ..NoteBeg.....4.
    11e6:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    11f6:	00 00 35 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..5.......Module
    1206:	2f 42 69 74 00 00 36 09 00 00 00 00                 /Bit..6.....

00001212 <menu_status>:
    1212:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1222:	7a 25 00 00 01 00 55 53 42 00 00 00 00 00 00 00     z%....USB.......
    1232:	62 12 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     b........@MIDI-I
    1242:	6e 00 00 00 00 00 00 00 fe 24 00 00 c2 40 4d 49     n........$...@MI
    1252:	44 49 2d 4f 75 74 00 00 00 00 00 00 3c 25 00 00     DI-Out......<%..

00001262 <menu_USBser>:
    1262:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 52 16     ..EventLog....R.
    1272:	00 00 83 1b 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
    1282:	00 00 00 00 5d 1b 00 00 c1 00 53 6e 64 48 57 43     ....].....SndHWC
    1292:	66 67 00 00 00 00 00 00 97 1b 00 00                 fg..........

0000129e <sw_version>:
    129e:	56 30 2e 37 34 00                                   V0.74.

000012a4 <reg_Out>:
    12a4:	41 31 0a 0e 46 20 0f 12 4a 32 14 18 4f 20 19 1d     A1..F ..J2..O ..
    12b4:	15 50 00 04 1a 20 05 09                             .P... ..

000012bc <cplInfo>:
    12bc:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    12cc:	01 02 00 03 01 03 02 03                             ........

000012d4 <keylabel_1>:
    12d4:	31 00                                               1.

000012d6 <keylabel_0>:
    12d6:	30 00                                               0.

000012d8 <keylabel_text>:
    12d8:	54 65 78 74 80 00                                   Text..

000012de <keylabel_exit>:
    12de:	45 78 69 74 00                                      Exit.

000012e3 <keylabel_off>:
    12e3:	7e 61 75 73 00                                      ~aus.

000012e8 <keylabel_on>:
    12e8:	7e 65 69 6e 00                                      ~ein.

000012ed <keylabel_onoff>:
    12ed:	45 69 6e 80 00                                      Ein..

000012f2 <keylabel_minus>:
    12f2:	2d 00                                               -.

000012f4 <keylabel_plus>:
    12f4:	2b 00                                               +.

000012f6 <keylabel_left>:
    12f6:	7f 00                                               ..

000012f8 <keylabel_right>:
    12f8:	7e 00                                               ~.

000012fa <keylabel_down>:
    12fa:	09 00                                               ..

000012fc <keylabel_up>:
    12fc:	08 00                                               ..

000012fe <cgPattern_RegOnOn>:
    12fe:	1b 1b 1b 1b 1b 1b 1b 00                             ........

00001306 <cgPattern_RegOnOff>:
    1306:	1b 1b 18 18 18 18 18 00                             ........

0000130e <cgPattern_RegOffOn>:
    130e:	1b 1b 03 03 03 03 03 00                             ........

00001316 <cgPattern_RegOffOff>:
    1316:	1b 1b 00 00 00 00 00 00                             ........

0000131e <cgPattern_RegOn>:
    131e:	18 18 18 18 18 18 18 00                             ........

00001326 <cgPattern_RegOff>:
    1326:	18 18 00 00 00 00 00 00                             ........

0000132e <cgPattern_Down>:
    132e:	04 04 04 04 15 0e 04 00                             ........

00001336 <cgPattern_Up>:
    1336:	04 0e 15 04 04 04 04 00                             ........

0000133e <cr_lf>:
    133e:	0d 0a 00 00                                         ....

00001342 <__ctors_end>:
    1342:	11 24       	eor	r1, r1
    1344:	1f be       	out	0x3f, r1	; 63
    1346:	cf ef       	ldi	r28, 0xFF	; 255
    1348:	d1 e2       	ldi	r29, 0x21	; 33
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	00 e0       	ldi	r16, 0x00	; 0
    1350:	0c bf       	out	0x3c, r16	; 60

00001352 <__do_copy_data>:
    1352:	12 e0       	ldi	r17, 0x02	; 2
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	b2 e0       	ldi	r27, 0x02	; 2
    1358:	e6 e5       	ldi	r30, 0x56	; 86
    135a:	fb e7       	ldi	r31, 0x7B	; 123
    135c:	00 e0       	ldi	r16, 0x00	; 0
    135e:	0b bf       	out	0x3b, r16	; 59
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <__do_copy_data+0x14>
    1362:	07 90       	elpm	r0, Z+
    1364:	0d 92       	st	X+, r0
    1366:	a8 30       	cpi	r26, 0x08	; 8
    1368:	b1 07       	cpc	r27, r17
    136a:	d9 f7       	brne	.-10     	; 0x1362 <__do_copy_data+0x10>

0000136c <__do_clear_bss>:
    136c:	29 e1       	ldi	r18, 0x19	; 25
    136e:	a8 e0       	ldi	r26, 0x08	; 8
    1370:	b2 e0       	ldi	r27, 0x02	; 2
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <.do_clear_bss_start>

00001374 <.do_clear_bss_loop>:
    1374:	1d 92       	st	X+, r1

00001376 <.do_clear_bss_start>:
    1376:	a1 32       	cpi	r26, 0x21	; 33
    1378:	b2 07       	cpc	r27, r18
    137a:	e1 f7       	brne	.-8      	; 0x1374 <.do_clear_bss_loop>
    137c:	0e 94 75 15 	call	0x2aea	; 0x2aea <main>
    1380:	0c 94 a9 3d 	jmp	0x7b52	; 0x7b52 <_exit>

00001384 <__bad_interrupt>:
    1384:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001388 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    1388:	fc 01       	movw	r30, r24
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	9f ef       	ldi	r25, 0xFF	; 255
    138e:	1c c0       	rjmp	.+56     	; 0x13c8 <crc16_ram+0x40>
    1390:	df 01       	movw	r26, r30
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	20 81       	ld	r18, Z
    1396:	82 27       	eor	r24, r18
    1398:	28 2f       	mov	r18, r24
    139a:	22 95       	swap	r18
    139c:	28 27       	eor	r18, r24
    139e:	02 2e       	mov	r0, r18
    13a0:	26 95       	lsr	r18
    13a2:	26 95       	lsr	r18
    13a4:	20 25       	eor	r18, r0
    13a6:	02 2e       	mov	r0, r18
    13a8:	26 95       	lsr	r18
    13aa:	20 25       	eor	r18, r0
    13ac:	27 70       	andi	r18, 0x07	; 7
    13ae:	08 2e       	mov	r0, r24
    13b0:	89 2f       	mov	r24, r25
    13b2:	26 95       	lsr	r18
    13b4:	07 94       	ror	r0
    13b6:	27 95       	ror	r18
    13b8:	90 2d       	mov	r25, r0
    13ba:	82 27       	eor	r24, r18
    13bc:	06 94       	lsr	r0
    13be:	27 95       	ror	r18
    13c0:	90 25       	eor	r25, r0
    13c2:	82 27       	eor	r24, r18
    13c4:	ba 01       	movw	r22, r20
    13c6:	fd 01       	movw	r30, r26
    13c8:	ab 01       	movw	r20, r22
    13ca:	41 50       	subi	r20, 0x01	; 1
    13cc:	51 09       	sbc	r21, r1
    13ce:	67 2b       	or	r22, r23
    13d0:	f9 f6       	brne	.-66     	; 0x1390 <crc16_ram+0x8>
    13d2:	08 95       	ret

000013d4 <crc16_eeprom>:
    13d4:	ef 92       	push	r14
    13d6:	ff 92       	push	r15
    13d8:	0f 93       	push	r16
    13da:	1f 93       	push	r17
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	cf ef       	ldi	r28, 0xFF	; 255
    13e2:	df ef       	ldi	r29, 0xFF	; 255
    13e4:	21 c0       	rjmp	.+66     	; 0x1428 <crc16_eeprom+0x54>
    13e6:	7c 01       	movw	r14, r24
    13e8:	2f ef       	ldi	r18, 0xFF	; 255
    13ea:	e2 1a       	sub	r14, r18
    13ec:	f2 0a       	sbc	r15, r18
    13ee:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    13f2:	9e 01       	movw	r18, r28
    13f4:	28 27       	eor	r18, r24
    13f6:	82 2f       	mov	r24, r18
    13f8:	82 95       	swap	r24
    13fa:	82 27       	eor	r24, r18
    13fc:	08 2e       	mov	r0, r24
    13fe:	86 95       	lsr	r24
    1400:	86 95       	lsr	r24
    1402:	80 25       	eor	r24, r0
    1404:	08 2e       	mov	r0, r24
    1406:	86 95       	lsr	r24
    1408:	80 25       	eor	r24, r0
    140a:	87 70       	andi	r24, 0x07	; 7
    140c:	02 2e       	mov	r0, r18
    140e:	23 2f       	mov	r18, r19
    1410:	86 95       	lsr	r24
    1412:	07 94       	ror	r0
    1414:	87 95       	ror	r24
    1416:	30 2d       	mov	r19, r0
    1418:	28 27       	eor	r18, r24
    141a:	06 94       	lsr	r0
    141c:	87 95       	ror	r24
    141e:	30 25       	eor	r19, r0
    1420:	28 27       	eor	r18, r24
    1422:	e9 01       	movw	r28, r18
    1424:	b8 01       	movw	r22, r16
    1426:	c7 01       	movw	r24, r14
    1428:	8b 01       	movw	r16, r22
    142a:	01 50       	subi	r16, 0x01	; 1
    142c:	11 09       	sbc	r17, r1
    142e:	67 2b       	or	r22, r23
    1430:	d1 f6       	brne	.-76     	; 0x13e6 <crc16_eeprom+0x12>
    1432:	ce 01       	movw	r24, r28
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	ff 90       	pop	r15
    143e:	ef 90       	pop	r14
    1440:	08 95       	ret

00001442 <crc16_ram_startVal>:
    1442:	fc 01       	movw	r30, r24
    1444:	ca 01       	movw	r24, r20
    1446:	1c c0       	rjmp	.+56     	; 0x1480 <crc16_ram_startVal+0x3e>
    1448:	df 01       	movw	r26, r30
    144a:	11 96       	adiw	r26, 0x01	; 1
    144c:	20 81       	ld	r18, Z
    144e:	82 27       	eor	r24, r18
    1450:	28 2f       	mov	r18, r24
    1452:	22 95       	swap	r18
    1454:	28 27       	eor	r18, r24
    1456:	02 2e       	mov	r0, r18
    1458:	26 95       	lsr	r18
    145a:	26 95       	lsr	r18
    145c:	20 25       	eor	r18, r0
    145e:	02 2e       	mov	r0, r18
    1460:	26 95       	lsr	r18
    1462:	20 25       	eor	r18, r0
    1464:	27 70       	andi	r18, 0x07	; 7
    1466:	08 2e       	mov	r0, r24
    1468:	89 2f       	mov	r24, r25
    146a:	26 95       	lsr	r18
    146c:	07 94       	ror	r0
    146e:	27 95       	ror	r18
    1470:	90 2d       	mov	r25, r0
    1472:	82 27       	eor	r24, r18
    1474:	06 94       	lsr	r0
    1476:	27 95       	ror	r18
    1478:	90 25       	eor	r25, r0
    147a:	82 27       	eor	r24, r18
    147c:	ba 01       	movw	r22, r20
    147e:	fd 01       	movw	r30, r26
    1480:	ab 01       	movw	r20, r22
    1482:	41 50       	subi	r20, 0x01	; 1
    1484:	51 09       	sbc	r21, r1
    1486:	67 2b       	or	r22, r23
    1488:	f9 f6       	brne	.-66     	; 0x1448 <crc16_ram_startVal+0x6>
    148a:	08 95       	ret

0000148c <crc16_eeprom_startVal>:
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	ea 01       	movw	r28, r20
    149a:	21 c0       	rjmp	.+66     	; 0x14de <crc16_eeprom_startVal+0x52>
    149c:	7c 01       	movw	r14, r24
    149e:	2f ef       	ldi	r18, 0xFF	; 255
    14a0:	e2 1a       	sub	r14, r18
    14a2:	f2 0a       	sbc	r15, r18
    14a4:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    14a8:	ae 01       	movw	r20, r28
    14aa:	48 27       	eor	r20, r24
    14ac:	84 2f       	mov	r24, r20
    14ae:	82 95       	swap	r24
    14b0:	84 27       	eor	r24, r20
    14b2:	08 2e       	mov	r0, r24
    14b4:	86 95       	lsr	r24
    14b6:	86 95       	lsr	r24
    14b8:	80 25       	eor	r24, r0
    14ba:	08 2e       	mov	r0, r24
    14bc:	86 95       	lsr	r24
    14be:	80 25       	eor	r24, r0
    14c0:	87 70       	andi	r24, 0x07	; 7
    14c2:	04 2e       	mov	r0, r20
    14c4:	45 2f       	mov	r20, r21
    14c6:	86 95       	lsr	r24
    14c8:	07 94       	ror	r0
    14ca:	87 95       	ror	r24
    14cc:	50 2d       	mov	r21, r0
    14ce:	48 27       	eor	r20, r24
    14d0:	06 94       	lsr	r0
    14d2:	87 95       	ror	r24
    14d4:	50 25       	eor	r21, r0
    14d6:	48 27       	eor	r20, r24
    14d8:	ea 01       	movw	r28, r20
    14da:	b8 01       	movw	r22, r16
    14dc:	c7 01       	movw	r24, r14
    14de:	8b 01       	movw	r16, r22
    14e0:	01 50       	subi	r16, 0x01	; 1
    14e2:	11 09       	sbc	r17, r1
    14e4:	67 2b       	or	r22, r23
    14e6:	d1 f6       	brne	.-76     	; 0x149c <crc16_eeprom_startVal+0x10>
    14e8:	ce 01       	movw	r24, r28
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	08 95       	ret

000014f8 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    14fc:	82 e3       	ldi	r24, 0x32	; 50
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    1504:	ec 01       	movw	r28, r24
    1506:	60 e3       	ldi	r22, 0x30	; 48
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	62 df       	rcall	.-316    	; 0x13d4 <crc16_eeprom>
    1510:	c8 17       	cp	r28, r24
    1512:	d9 07       	cpc	r29, r25
    1514:	81 f4       	brne	.+32     	; 0x1536 <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    151e:	8d 34       	cpi	r24, 0x4D	; 77
    1520:	51 f4       	brne	.+20     	; 0x1536 <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    1522:	40 e3       	ldi	r20, 0x30	; 48
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	62 e0       	ldi	r22, 0x02	; 2
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	84 e3       	ldi	r24, 0x34	; 52
    152c:	99 e0       	ldi	r25, 0x09	; 9
    152e:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		return (EE_LOAD_OK);
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	06 c0       	rjmp	.+12     	; 0x1542 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    1536:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1540:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1542:	df 91       	pop	r29
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    154c:	85 e3       	ldi	r24, 0x35	; 53
    154e:	91 e0       	ldi	r25, 0x01	; 1
    1550:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    1554:	ec 01       	movw	r28, r24
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	71 e0       	ldi	r23, 0x01	; 1
    155a:	85 e3       	ldi	r24, 0x35	; 53
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	3a df       	rcall	.-396    	; 0x13d4 <crc16_eeprom>
    1560:	c8 17       	cp	r28, r24
    1562:	d9 07       	cpc	r29, r25
    1564:	81 f4       	brne	.+32     	; 0x1586 <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    1566:	84 e3       	ldi	r24, 0x34	; 52
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    156e:	89 34       	cpi	r24, 0x49	; 73
    1570:	51 f4       	brne	.+20     	; 0x1586 <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	51 e0       	ldi	r21, 0x01	; 1
    1576:	65 e3       	ldi	r22, 0x35	; 53
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	88 e2       	ldi	r24, 0x28	; 40
    157c:	98 e0       	ldi	r25, 0x08	; 8
    157e:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		return (EE_LOAD_OK);
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1586:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    158a:	82 60       	ori	r24, 0x02	; 2
    158c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1590:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	08 95       	ret

00001598 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    159c:	83 e4       	ldi	r24, 0x43	; 67
    159e:	91 e0       	ldi	r25, 0x01	; 1
    15a0:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    15a4:	ec 01       	movw	r28, r24
    15a6:	6b e0       	ldi	r22, 0x0B	; 11
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	88 e3       	ldi	r24, 0x38	; 56
    15ac:	91 e0       	ldi	r25, 0x01	; 1
    15ae:	12 df       	rcall	.-476    	; 0x13d4 <crc16_eeprom>
    15b0:	c8 17       	cp	r28, r24
    15b2:	d9 07       	cpc	r29, r25
    15b4:	c1 f4       	brne	.+48     	; 0x15e6 <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    15b6:	87 e3       	ldi	r24, 0x37	; 55
    15b8:	91 e0       	ldi	r25, 0x01	; 1
    15ba:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    15be:	8f 34       	cpi	r24, 0x4F	; 79
    15c0:	91 f4       	brne	.+36     	; 0x15e6 <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    15c2:	48 e0       	ldi	r20, 0x08	; 8
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	68 e3       	ldi	r22, 0x38	; 56
    15c8:	71 e0       	ldi	r23, 0x01	; 1
    15ca:	88 e2       	ldi	r24, 0x28	; 40
    15cc:	99 e0       	ldi	r25, 0x09	; 9
    15ce:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    15d2:	43 e0       	ldi	r20, 0x03	; 3
    15d4:	50 e0       	ldi	r21, 0x00	; 0
    15d6:	60 e4       	ldi	r22, 0x40	; 64
    15d8:	71 e0       	ldi	r23, 0x01	; 1
    15da:	80 e3       	ldi	r24, 0x30	; 48
    15dc:	99 e0       	ldi	r25, 0x09	; 9
    15de:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		return (EE_LOAD_OK);
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    15e6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15ea:	84 60       	ori	r24, 0x04	; 4
    15ec:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    15fc:	88 e4       	ldi	r24, 0x48	; 72
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    1604:	ec 01       	movw	r28, r24
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	86 e4       	ldi	r24, 0x46	; 70
    160c:	91 e0       	ldi	r25, 0x01	; 1
    160e:	e2 de       	rcall	.-572    	; 0x13d4 <crc16_eeprom>
    1610:	c8 17       	cp	r28, r24
    1612:	d9 07       	cpc	r29, r25
    1614:	a1 f4       	brne	.+40     	; 0x163e <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    1616:	85 e4       	ldi	r24, 0x45	; 69
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    161e:	89 36       	cpi	r24, 0x69	; 105
    1620:	71 f4       	brne	.+28     	; 0x163e <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    1622:	86 e4       	ldi	r24, 0x46	; 70
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    162a:	c5 e5       	ldi	r28, 0x55	; 85
    162c:	d3 e0       	ldi	r29, 0x03	; 3
    162e:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    1630:	87 e4       	ldi	r24, 0x47	; 71
    1632:	91 e0       	ldi	r25, 0x01	; 1
    1634:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    1638:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	06 c0       	rjmp	.+12     	; 0x164a <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    163e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1642:	88 60       	ori	r24, 0x08	; 8
    1644:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1648:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1654:	87 ef       	ldi	r24, 0xF7	; 247
    1656:	93 e0       	ldi	r25, 0x03	; 3
    1658:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    165c:	ec 01       	movw	r28, r24
    165e:	62 e0       	ldi	r22, 0x02	; 2
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	85 ef       	ldi	r24, 0xF5	; 245
    1664:	93 e0       	ldi	r25, 0x03	; 3
    1666:	b6 de       	rcall	.-660    	; 0x13d4 <crc16_eeprom>
    1668:	c8 17       	cp	r28, r24
    166a:	d9 07       	cpc	r29, r25
    166c:	81 f4       	brne	.+32     	; 0x168e <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    166e:	84 ef       	ldi	r24, 0xF4	; 244
    1670:	93 e0       	ldi	r25, 0x03	; 3
    1672:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    1676:	84 35       	cpi	r24, 0x54	; 84
    1678:	51 f4       	brne	.+20     	; 0x168e <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    167a:	42 e0       	ldi	r20, 0x02	; 2
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	65 ef       	ldi	r22, 0xF5	; 245
    1680:	73 e0       	ldi	r23, 0x03	; 3
    1682:	86 e2       	ldi	r24, 0x26	; 38
    1684:	98 e0       	ldi	r25, 0x08	; 8
    1686:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		return (EE_LOAD_OK);
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	06 c0       	rjmp	.+12     	; 0x169a <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    168e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1692:	82 60       	ori	r24, 0x02	; 2
    1694:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1698:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret

000016a0 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    16a4:	8c e4       	ldi	r24, 0x4C	; 76
    16a6:	91 e0       	ldi	r25, 0x01	; 1
    16a8:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    16ac:	ec 01       	movw	r28, r24
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	8b e4       	ldi	r24, 0x4B	; 75
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	8e de       	rcall	.-740    	; 0x13d4 <crc16_eeprom>
    16b8:	c8 17       	cp	r28, r24
    16ba:	d9 07       	cpc	r29, r25
    16bc:	71 f4       	brne	.+28     	; 0x16da <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    16be:	8a e4       	ldi	r24, 0x4A	; 74
    16c0:	91 e0       	ldi	r25, 0x01	; 1
    16c2:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    16c6:	85 35       	cpi	r24, 0x55	; 85
    16c8:	41 f4       	brne	.+16     	; 0x16da <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    16ca:	8b e4       	ldi	r24, 0x4B	; 75
    16cc:	91 e0       	ldi	r25, 0x01	; 1
    16ce:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    16d2:	80 93 52 16 	sts	0x1652, r24	; 0x801652 <serUSB_Active>
		return (EE_LOAD_OK);
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    16da:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16e6:	df 91       	pop	r29
    16e8:	cf 91       	pop	r28
    16ea:	08 95       	ret

000016ec <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	8f e4       	ldi	r24, 0x4F	; 79
    16f6:	91 e0       	ldi	r25, 0x01	; 1
    16f8:	6d de       	rcall	.-806    	; 0x13d4 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    16fa:	ac 01       	movw	r20, r24
    16fc:	68 e1       	ldi	r22, 0x18	; 24
    16fe:	70 e0       	ldi	r23, 0x00	; 0
    1700:	80 e5       	ldi	r24, 0x50	; 80
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	c3 de       	rcall	.-634    	; 0x148c <crc16_eeprom_startVal>
    1706:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    1708:	88 e6       	ldi	r24, 0x68	; 104
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    1710:	c8 17       	cp	r28, r24
    1712:	d9 07       	cpc	r29, r25
    1714:	b1 f4       	brne	.+44     	; 0x1742 <eeprom_ReadReg+0x56>
    1716:	8e e4       	ldi	r24, 0x4E	; 78
    1718:	91 e0       	ldi	r25, 0x01	; 1
    171a:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    171e:	82 35       	cpi	r24, 0x52	; 82
    1720:	81 f4       	brne	.+32     	; 0x1742 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    1722:	8f e4       	ldi	r24, 0x4F	; 79
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    172a:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    172e:	48 e1       	ldi	r20, 0x18	; 24
    1730:	50 e0       	ldi	r21, 0x00	; 0
    1732:	60 e5       	ldi	r22, 0x50	; 80
    1734:	71 e0       	ldi	r23, 0x01	; 1
    1736:	87 ef       	ldi	r24, 0xF7	; 247
    1738:	97 e0       	ldi	r25, 0x07	; 7
    173a:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		return(EE_LOAD_OK);
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	06 c0       	rjmp	.+12     	; 0x174e <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    1742:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1746:	80 62       	ori	r24, 0x20	; 32
    1748:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    174c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    1758:	8b ee       	ldi	r24, 0xEB	; 235
    175a:	93 e0       	ldi	r25, 0x03	; 3
    175c:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    1760:	ec 01       	movw	r28, r24
    1762:	60 e8       	ldi	r22, 0x80	; 128
    1764:	72 e0       	ldi	r23, 0x02	; 2
    1766:	8b e6       	ldi	r24, 0x6B	; 107
    1768:	91 e0       	ldi	r25, 0x01	; 1
    176a:	34 de       	rcall	.-920    	; 0x13d4 <crc16_eeprom>
    176c:	c8 17       	cp	r28, r24
    176e:	d9 07       	cpc	r29, r25
    1770:	81 f4       	brne	.+32     	; 0x1792 <eeprom_ReadProg+0x3e>
    1772:	8a e6       	ldi	r24, 0x6A	; 106
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    177a:	80 35       	cpi	r24, 0x50	; 80
    177c:	51 f4       	brne	.+20     	; 0x1792 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	52 e0       	ldi	r21, 0x02	; 2
    1782:	6b e6       	ldi	r22, 0x6B	; 107
    1784:	71 e0       	ldi	r23, 0x01	; 1
    1786:	84 e6       	ldi	r24, 0x64	; 100
    1788:	99 e0       	ldi	r25, 0x09	; 9
    178a:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		return(EE_LOAD_OK);
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	06 c0       	rjmp	.+12     	; 0x179e <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1792:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1796:	80 64       	ori	r24, 0x40	; 64
    1798:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    179c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    17a8:	82 ef       	ldi	r24, 0xF2	; 242
    17aa:	93 e0       	ldi	r25, 0x03	; 3
    17ac:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <eeprom_read_word>
    17b0:	ec 01       	movw	r28, r24
    17b2:	64 e0       	ldi	r22, 0x04	; 4
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	8e ee       	ldi	r24, 0xEE	; 238
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	0c de       	rcall	.-1000   	; 0x13d4 <crc16_eeprom>
    17bc:	c8 17       	cp	r28, r24
    17be:	d9 07       	cpc	r29, r25
    17c0:	51 f4       	brne	.+20     	; 0x17d6 <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    17c2:	44 e0       	ldi	r20, 0x04	; 4
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	6e ee       	ldi	r22, 0xEE	; 238
    17c8:	73 e0       	ldi	r23, 0x03	; 3
    17ca:	83 eb       	ldi	r24, 0xB3	; 179
    17cc:	95 e0       	ldi	r25, 0x05	; 5
    17ce:	0e 94 67 3d 	call	0x7ace	; 0x7ace <eeprom_read_block>
		return(EE_LOAD_OK);
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	06 c0       	rjmp	.+12     	; 0x17e2 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    17d6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    17da:	80 68       	ori	r24, 0x80	; 128
    17dc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    17e8:	60 e0       	ldi	r22, 0x00	; 0
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    17f2:	65 e6       	ldi	r22, 0x65	; 101
    17f4:	89 ef       	ldi	r24, 0xF9	; 249
    17f6:	93 e0       	ldi	r25, 0x03	; 3
    17f8:	0c 94 93 3d 	jmp	0x7b26	; 0x7b26 <eeprom_update_byte>
    17fc:	08 95       	ret

000017fe <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1802:	60 e3       	ldi	r22, 0x30	; 48
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	84 e3       	ldi	r24, 0x34	; 52
    1808:	99 e0       	ldi	r25, 0x09	; 9
    180a:	be dd       	rcall	.-1156   	; 0x1388 <crc16_ram>
    180c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    180e:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1812:	6d e4       	ldi	r22, 0x4D	; 77
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    181c:	40 e3       	ldi	r20, 0x30	; 48
    181e:	50 e0       	ldi	r21, 0x00	; 0
    1820:	62 e0       	ldi	r22, 0x02	; 2
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	84 e3       	ldi	r24, 0x34	; 52
    1826:	99 e0       	ldi	r25, 0x09	; 9
    1828:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    182c:	be 01       	movw	r22, r28
    182e:	82 e3       	ldi	r24, 0x32	; 50
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    1836:	d8 df       	rcall	.-80     	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1838:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	71 e0       	ldi	r23, 0x01	; 1
    184a:	88 e2       	ldi	r24, 0x28	; 40
    184c:	98 e0       	ldi	r25, 0x08	; 8
    184e:	9c dd       	rcall	.-1224   	; 0x1388 <crc16_ram>
    1850:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1852:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    1856:	69 e4       	ldi	r22, 0x49	; 73
    1858:	84 e3       	ldi	r24, 0x34	; 52
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	51 e0       	ldi	r21, 0x01	; 1
    1864:	65 e3       	ldi	r22, 0x35	; 53
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	88 e2       	ldi	r24, 0x28	; 40
    186a:	98 e0       	ldi	r25, 0x08	; 8
    186c:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1870:	be 01       	movw	r22, r28
    1872:	85 e3       	ldi	r24, 0x35	; 53
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    187a:	b6 df       	rcall	.-148    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    187c:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	08 95       	ret

00001886 <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    188a:	68 e0       	ldi	r22, 0x08	; 8
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	88 e2       	ldi	r24, 0x28	; 40
    1890:	99 e0       	ldi	r25, 0x09	; 9
    1892:	7a dd       	rcall	.-1292   	; 0x1388 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1894:	ac 01       	movw	r20, r24
    1896:	63 e0       	ldi	r22, 0x03	; 3
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e3       	ldi	r24, 0x30	; 48
    189c:	99 e0       	ldi	r25, 0x09	; 9
    189e:	d1 dd       	rcall	.-1118   	; 0x1442 <crc16_ram_startVal>
    18a0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    18a2:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    18a6:	6f e4       	ldi	r22, 0x4F	; 79
    18a8:	87 e3       	ldi	r24, 0x37	; 55
    18aa:	91 e0       	ldi	r25, 0x01	; 1
    18ac:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    18b0:	48 e0       	ldi	r20, 0x08	; 8
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	68 e3       	ldi	r22, 0x38	; 56
    18b6:	71 e0       	ldi	r23, 0x01	; 1
    18b8:	88 e2       	ldi	r24, 0x28	; 40
    18ba:	99 e0       	ldi	r25, 0x09	; 9
    18bc:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    18c0:	43 e0       	ldi	r20, 0x03	; 3
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	60 e4       	ldi	r22, 0x40	; 64
    18c6:	71 e0       	ldi	r23, 0x01	; 1
    18c8:	80 e3       	ldi	r24, 0x30	; 48
    18ca:	99 e0       	ldi	r25, 0x09	; 9
    18cc:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    18d0:	be 01       	movw	r22, r28
    18d2:	83 e4       	ldi	r24, 0x43	; 67
    18d4:	91 e0       	ldi	r25, 0x01	; 1
    18d6:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    18da:	86 df       	rcall	.-244    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18dc:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    18ee:	61 e0       	ldi	r22, 0x01	; 1
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	85 e5       	ldi	r24, 0x55	; 85
    18f4:	93 e0       	ldi	r25, 0x03	; 3
    18f6:	48 dd       	rcall	.-1392   	; 0x1388 <crc16_ram>
    18f8:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    18fa:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    18fe:	69 e6       	ldi	r22, 0x69	; 105
    1900:	85 e4       	ldi	r24, 0x45	; 69
    1902:	91 e0       	ldi	r25, 0x01	; 1
    1904:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    1908:	c5 e5       	ldi	r28, 0x55	; 85
    190a:	d3 e0       	ldi	r29, 0x03	; 3
    190c:	68 81       	ld	r22, Y
    190e:	86 e4       	ldi	r24, 0x46	; 70
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    1916:	69 81       	ldd	r22, Y+1	; 0x01
    1918:	87 e4       	ldi	r24, 0x47	; 71
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1920:	b8 01       	movw	r22, r16
    1922:	88 e4       	ldi	r24, 0x48	; 72
    1924:	91 e0       	ldi	r25, 0x01	; 1
    1926:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    192a:	5e df       	rcall	.-324    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    192c:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	1f 91       	pop	r17
    1936:	0f 91       	pop	r16
    1938:	08 95       	ret

0000193a <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	82 e5       	ldi	r24, 0x52	; 82
    1944:	96 e1       	ldi	r25, 0x16	; 22
    1946:	20 dd       	rcall	.-1472   	; 0x1388 <crc16_ram>
    1948:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    194a:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    194e:	65 e5       	ldi	r22, 0x55	; 85
    1950:	8a e4       	ldi	r24, 0x4A	; 74
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1958:	60 91 52 16 	lds	r22, 0x1652	; 0x801652 <serUSB_Active>
    195c:	8b e4       	ldi	r24, 0x4B	; 75
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1964:	be 01       	movw	r22, r28
    1966:	8c e4       	ldi	r24, 0x4C	; 76
    1968:	91 e0       	ldi	r25, 0x01	; 1
    196a:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    196e:	3c df       	rcall	.-392    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1970:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    197e:	62 e0       	ldi	r22, 0x02	; 2
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	86 e2       	ldi	r24, 0x26	; 38
    1984:	98 e0       	ldi	r25, 0x08	; 8
    1986:	00 dd       	rcall	.-1536   	; 0x1388 <crc16_ram>
    1988:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    198a:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    198e:	64 e5       	ldi	r22, 0x54	; 84
    1990:	84 ef       	ldi	r24, 0xF4	; 244
    1992:	93 e0       	ldi	r25, 0x03	; 3
    1994:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1998:	42 e0       	ldi	r20, 0x02	; 2
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	65 ef       	ldi	r22, 0xF5	; 245
    199e:	73 e0       	ldi	r23, 0x03	; 3
    19a0:	86 e2       	ldi	r24, 0x26	; 38
    19a2:	98 e0       	ldi	r25, 0x08	; 8
    19a4:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    19a8:	be 01       	movw	r22, r28
    19aa:	87 ef       	ldi	r24, 0xF7	; 247
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    19b2:	1a df       	rcall	.-460    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    19b4:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	80 e1       	ldi	r24, 0x10	; 16
    19c8:	98 e0       	ldi	r25, 0x08	; 8
    19ca:	de dc       	rcall	.-1604   	; 0x1388 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    19cc:	ac 01       	movw	r20, r24
    19ce:	68 e1       	ldi	r22, 0x18	; 24
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	87 ef       	ldi	r24, 0xF7	; 247
    19d4:	97 e0       	ldi	r25, 0x07	; 7
    19d6:	35 dd       	rcall	.-1430   	; 0x1442 <crc16_ram_startVal>
    19d8:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19da:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    19de:	62 e5       	ldi	r22, 0x52	; 82
    19e0:	8e e4       	ldi	r24, 0x4E	; 78
    19e2:	91 e0       	ldi	r25, 0x01	; 1
    19e4:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    19e8:	60 91 10 08 	lds	r22, 0x0810	; 0x800810 <registerCount>
    19ec:	8f e4       	ldi	r24, 0x4F	; 79
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    19f4:	48 e1       	ldi	r20, 0x18	; 24
    19f6:	50 e0       	ldi	r21, 0x00	; 0
    19f8:	60 e5       	ldi	r22, 0x50	; 80
    19fa:	71 e0       	ldi	r23, 0x01	; 1
    19fc:	87 ef       	ldi	r24, 0xF7	; 247
    19fe:	97 e0       	ldi	r25, 0x07	; 7
    1a00:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1a04:	be 01       	movw	r22, r28
    1a06:	88 e6       	ldi	r24, 0x68	; 104
    1a08:	91 e0       	ldi	r25, 0x01	; 1
    1a0a:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    1a0e:	ec de       	rcall	.-552    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a10:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1a1e:	60 e8       	ldi	r22, 0x80	; 128
    1a20:	72 e0       	ldi	r23, 0x02	; 2
    1a22:	84 e6       	ldi	r24, 0x64	; 100
    1a24:	99 e0       	ldi	r25, 0x09	; 9
    1a26:	b0 dc       	rcall	.-1696   	; 0x1388 <crc16_ram>
    1a28:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a2a:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1a2e:	60 e5       	ldi	r22, 0x50	; 80
    1a30:	8a e6       	ldi	r24, 0x6A	; 106
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	52 e0       	ldi	r21, 0x02	; 2
    1a3c:	6b e6       	ldi	r22, 0x6B	; 107
    1a3e:	71 e0       	ldi	r23, 0x01	; 1
    1a40:	84 e6       	ldi	r24, 0x64	; 100
    1a42:	99 e0       	ldi	r25, 0x09	; 9
    1a44:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1a48:	be 01       	movw	r22, r28
    1a4a:	8b ee       	ldi	r24, 0xEB	; 235
    1a4c:	93 e0       	ldi	r25, 0x03	; 3
    1a4e:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    1a52:	ca de       	rcall	.-620    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a54:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1a5e:	cf 93       	push	r28
    1a60:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1a62:	64 e0       	ldi	r22, 0x04	; 4
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	83 eb       	ldi	r24, 0xB3	; 179
    1a68:	95 e0       	ldi	r25, 0x05	; 5
    1a6a:	8e dc       	rcall	.-1764   	; 0x1388 <crc16_ram>
    1a6c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1a6e:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1a72:	6b e4       	ldi	r22, 0x4B	; 75
    1a74:	8d ee       	ldi	r24, 0xED	; 237
    1a76:	93 e0       	ldi	r25, 0x03	; 3
    1a78:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1a7c:	44 e0       	ldi	r20, 0x04	; 4
    1a7e:	50 e0       	ldi	r21, 0x00	; 0
    1a80:	6e ee       	ldi	r22, 0xEE	; 238
    1a82:	73 e0       	ldi	r23, 0x03	; 3
    1a84:	83 eb       	ldi	r24, 0xB3	; 179
    1a86:	95 e0       	ldi	r25, 0x05	; 5
    1a88:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1a8c:	be 01       	movw	r22, r28
    1a8e:	82 ef       	ldi	r24, 0xF2	; 242
    1a90:	93 e0       	ldi	r25, 0x03	; 3
    1a92:	0e 94 a5 3d 	call	0x7b4a	; 0x7b4a <eeprom_update_word>
	eepromWriteSignature();
    1a96:	a8 de       	rcall	.-688    	; 0x17e8 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a98:	0e 94 9f 3c 	call	0x793e	; 0x793e <lcd_waitSymbolOff>
}
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	08 95       	ret

00001aa2 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1aa2:	ad de       	rcall	.-678    	; 0x17fe <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1aa4:	ce de       	rcall	.-612    	; 0x1842 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1aa6:	ef de       	rcall	.-546    	; 0x1886 <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1aa8:	1e df       	rcall	.-452    	; 0x18e6 <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1aaa:	47 df       	rcall	.-370    	; 0x193a <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1aac:	88 df       	rcall	.-240    	; 0x19be <eeprom_UpdateReg>
    1aae:	b5 df       	rcall	.-150    	; 0x1a1a <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1ab0:	d6 df       	rcall	.-84     	; 0x1a5e <eeprom_UpdateSoftkeys>
    1ab2:	63 cf       	rjmp	.-314    	; 0x197a <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1ab4:	08 95       	ret

00001ab6 <eepromCopy>:
    1ab6:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    1ab8:	df 92       	push	r13
    1aba:	ef 92       	push	r14
    1abc:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1abe:	0f 93       	push	r16
    1ac0:	1f 93       	push	r17
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1ac8:	11 c0       	rjmp	.+34     	; 0x1aec <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1aca:	7c 01       	movw	r14, r24
    1acc:	2f ef       	ldi	r18, 0xFF	; 255
    1ace:	e2 1a       	sub	r14, r18
    1ad0:	f2 0a       	sbc	r15, r18
    1ad2:	0e 94 77 3d 	call	0x7aee	; 0x7aee <eeprom_read_byte>
    1ad6:	6e 01       	movw	r12, r28
    1ad8:	9f ef       	ldi	r25, 0xFF	; 255
    1ada:	c9 1a       	sub	r12, r25
    1adc:	d9 0a       	sbc	r13, r25
    1ade:	68 2f       	mov	r22, r24
    1ae0:	ce 01       	movw	r24, r28
    1ae2:	0e 94 93 3d 	call	0x7b26	; 0x7b26 <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1ae6:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1ae8:	e6 01       	movw	r28, r12
    1aea:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1aec:	8a 01       	movw	r16, r20
    1aee:	01 50       	subi	r16, 0x01	; 1
    1af0:	11 09       	sbc	r17, r1
    1af2:	45 2b       	or	r20, r21
    1af4:	51 f7       	brne	.-44     	; 0x1aca <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	08 95       	ret

00001b08 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1b08:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	58 e0       	ldi	r21, 0x08	; 8
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	78 e0       	ldi	r23, 0x08	; 8
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	ce df       	rcall	.-100    	; 0x1ab6 <eepromCopy>
	lcd_waitSymbolOff();
    1b1a:	0c 94 9f 3c 	jmp	0x793e	; 0x793e <lcd_waitSymbolOff>
    1b1e:	08 95       	ret

00001b20 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1b20:	0e 94 91 3c 	call	0x7922	; 0x7922 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	58 e0       	ldi	r21, 0x08	; 8
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	98 e0       	ldi	r25, 0x08	; 8
    1b30:	c2 df       	rcall	.-124    	; 0x1ab6 <eepromCopy>
	lcd_waitSymbolOff();
    1b32:	0c 94 9f 3c 	jmp	0x793e	; 0x793e <lcd_waitSymbolOff>
    1b36:	08 95       	ret

00001b38 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	0a c0       	rjmp	.+20     	; 0x1b50 <init_Timers+0x18>
    1b3c:	e8 2f       	mov	r30, r24
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	e1 5d       	subi	r30, 0xD1	; 209
    1b46:	fd 4f       	sbci	r31, 0xFD	; 253
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	90 83       	st	Z, r25
    1b4c:	11 82       	std	Z+1, r1	; 0x01
    1b4e:	8f 5f       	subi	r24, 0xFF	; 255
    1b50:	89 30       	cpi	r24, 0x09	; 9
    1b52:	a0 f3       	brcs	.-24     	; 0x1b3c <init_Timers+0x4>
    1b54:	e1 e4       	ldi	r30, 0x41	; 65
    1b56:	f2 e0       	ldi	r31, 0x02	; 2
    1b58:	10 82       	st	Z, r1
    1b5a:	11 82       	std	Z+1, r1	; 0x01
    1b5c:	12 82       	std	Z+2, r1	; 0x02
    1b5e:	13 82       	std	Z+3, r1	; 0x03
    1b60:	8f ef       	ldi	r24, 0xFF	; 255
    1b62:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1b66:	08 95       	ret

00001b68 <init_HwTimer>:
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	84 bd       	out	0x24, r24	; 36
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	95 bd       	out	0x25, r25	; 37
    1b70:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1b74:	89 ef       	ldi	r24, 0xF9	; 249
    1b76:	87 bd       	out	0x27, r24	; 39
    1b78:	85 b1       	in	r24, 0x05	; 5
    1b7a:	8f 77       	andi	r24, 0x7F	; 127
    1b7c:	85 b9       	out	0x05, r24	; 5
    1b7e:	84 b1       	in	r24, 0x04	; 4
    1b80:	80 68       	ori	r24, 0x80	; 128
    1b82:	84 b9       	out	0x04, r24	; 4
    1b84:	08 95       	ret

00001b86 <init_ADC>:
    1b86:	87 e8       	ldi	r24, 0x87	; 135
    1b88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1b8c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1b90:	8f e7       	ldi	r24, 0x7F	; 127
    1b92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1b9c:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1ba0:	e9 e4       	ldi	r30, 0x49	; 73
    1ba2:	f3 e0       	ldi	r31, 0x03	; 3
    1ba4:	10 82       	st	Z, r1
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	81 83       	std	Z+1, r24	; 0x01
    1baa:	82 83       	std	Z+2, r24	; 0x02
    1bac:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	10 c0       	rjmp	.+32     	; 0x1bd4 <init_ADC+0x4e>
    1bb4:	85 30       	cpi	r24, 0x05	; 5
    1bb6:	39 f4       	brne	.+14     	; 0x1bc6 <init_ADC+0x40>
    1bb8:	e8 2f       	mov	r30, r24
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	e1 5b       	subi	r30, 0xB1	; 177
    1bbe:	fc 4f       	sbci	r31, 0xFC	; 252
    1bc0:	96 e0       	ldi	r25, 0x06	; 6
    1bc2:	90 83       	st	Z, r25
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <init_ADC+0x4c>
    1bc6:	e8 2f       	mov	r30, r24
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	e1 5b       	subi	r30, 0xB1	; 177
    1bcc:	fc 4f       	sbci	r31, 0xFC	; 252
    1bce:	9a e0       	ldi	r25, 0x0A	; 10
    1bd0:	90 83       	st	Z, r25
    1bd2:	8f 5f       	subi	r24, 0xFF	; 255
    1bd4:	86 30       	cpi	r24, 0x06	; 6
    1bd6:	70 f3       	brcs	.-36     	; 0x1bb4 <init_ADC+0x2e>
    1bd8:	08 95       	ret

00001bda <init_Pipe>:
    1bda:	8f ef       	ldi	r24, 0xFF	; 255
    1bdc:	88 b9       	out	0x08, r24	; 8
    1bde:	87 b9       	out	0x07, r24	; 7
    1be0:	82 b9       	out	0x02, r24	; 2
    1be2:	11 b8       	out	0x01, r1	; 1
    1be4:	84 b3       	in	r24, 0x14	; 20
    1be6:	87 60       	ori	r24, 0x07	; 7
    1be8:	84 bb       	out	0x14, r24	; 20
    1bea:	83 b3       	in	r24, 0x13	; 19
    1bec:	87 60       	ori	r24, 0x07	; 7
    1bee:	83 bb       	out	0x13, r24	; 19
    1bf0:	8b b1       	in	r24, 0x0b	; 11
    1bf2:	8f 77       	andi	r24, 0x7F	; 127
    1bf4:	8b b9       	out	0x0b, r24	; 11
    1bf6:	8a b1       	in	r24, 0x0a	; 10
    1bf8:	80 68       	ori	r24, 0x80	; 128
    1bfa:	8a b9       	out	0x0a, r24	; 10
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	0e c0       	rjmp	.+28     	; 0x1c1c <init_Pipe+0x42>
    1c00:	e8 2f       	mov	r30, r24
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	ee 0f       	add	r30, r30
    1c0a:	ff 1f       	adc	r31, r31
    1c0c:	ee 0f       	add	r30, r30
    1c0e:	ff 1f       	adc	r31, r31
    1c10:	e7 5b       	subi	r30, 0xB7	; 183
    1c12:	fd 4f       	sbci	r31, 0xFD	; 253
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	90 83       	st	Z, r25
    1c1a:	8f 5f       	subi	r24, 0xFF	; 255
    1c1c:	80 32       	cpi	r24, 0x20	; 32
    1c1e:	80 f3       	brcs	.-32     	; 0x1c00 <init_Pipe+0x26>
    1c20:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1c24:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1c28:	08 95       	ret

00001c2a <init_PipeModules>:
    1c2a:	e6 dc       	rcall	.-1588   	; 0x15f8 <eeprom_ReadModules>
    1c2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c2e:	51 f4       	brne	.+20     	; 0x1c44 <init_PipeModules+0x1a>
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	42 d7       	rcall	.+3716   	; 0x2abe <log_putError>
    1c3a:	e5 e5       	ldi	r30, 0x55	; 85
    1c3c:	f3 e0       	ldi	r31, 0x03	; 3
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	80 83       	st	Z, r24
    1c42:	81 83       	std	Z+1, r24	; 0x01
    1c44:	8b b1       	in	r24, 0x0b	; 11
    1c46:	8f 77       	andi	r24, 0x7F	; 127
    1c48:	8b b9       	out	0x0b, r24	; 11
    1c4a:	84 b3       	in	r24, 0x14	; 20
    1c4c:	87 60       	ori	r24, 0x07	; 7
    1c4e:	84 bb       	out	0x14, r24	; 20
    1c50:	84 b3       	in	r24, 0x14	; 20
    1c52:	8b 7f       	andi	r24, 0xFB	; 251
    1c54:	84 bb       	out	0x14, r24	; 20
    1c56:	85 e0       	ldi	r24, 0x05	; 5
    1c58:	8a 95       	dec	r24
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <init_PipeModules+0x2e>
    1c5c:	00 00       	nop
    1c5e:	84 b3       	in	r24, 0x14	; 20
    1c60:	84 60       	ori	r24, 0x04	; 4
    1c62:	84 bb       	out	0x14, r24	; 20
    1c64:	90 e2       	ldi	r25, 0x20	; 32
    1c66:	84 b3       	in	r24, 0x14	; 20
    1c68:	81 60       	ori	r24, 0x01	; 1
    1c6a:	84 bb       	out	0x14, r24	; 20
    1c6c:	90 fd       	sbrc	r25, 0
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <init_PipeModules+0x4a>
    1c70:	85 e5       	ldi	r24, 0x55	; 85
    1c72:	01 c0       	rjmp	.+2      	; 0x1c76 <init_PipeModules+0x4c>
    1c74:	8a ea       	ldi	r24, 0xAA	; 170
    1c76:	88 b9       	out	0x08, r24	; 8
    1c78:	80 b1       	in	r24, 0x00	; 0
    1c7a:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1c7e:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1c82:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1c86:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1c8a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1c8e:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1c92:	84 b3       	in	r24, 0x14	; 20
    1c94:	8e 7f       	andi	r24, 0xFE	; 254
    1c96:	84 bb       	out	0x14, r24	; 20
    1c98:	85 e0       	ldi	r24, 0x05	; 5
    1c9a:	8a 95       	dec	r24
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <init_PipeModules+0x70>
    1c9e:	00 00       	nop
    1ca0:	91 50       	subi	r25, 0x01	; 1
    1ca2:	09 f7       	brne	.-62     	; 0x1c66 <init_PipeModules+0x3c>
    1ca4:	90 e2       	ldi	r25, 0x20	; 32
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <init_PipeModules+0x9c>
    1ca8:	84 b3       	in	r24, 0x14	; 20
    1caa:	81 60       	ori	r24, 0x01	; 1
    1cac:	84 bb       	out	0x14, r24	; 20
    1cae:	82 e0       	ldi	r24, 0x02	; 2
    1cb0:	8a 95       	dec	r24
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <init_PipeModules+0x86>
    1cb4:	00 c0       	rjmp	.+0      	; 0x1cb6 <init_PipeModules+0x8c>
    1cb6:	84 b3       	in	r24, 0x14	; 20
    1cb8:	8e 7f       	andi	r24, 0xFE	; 254
    1cba:	84 bb       	out	0x14, r24	; 20
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	8a 95       	dec	r24
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <init_PipeModules+0x94>
    1cc2:	00 c0       	rjmp	.+0      	; 0x1cc4 <init_PipeModules+0x9a>
    1cc4:	91 50       	subi	r25, 0x01	; 1
    1cc6:	91 11       	cpse	r25, r1
    1cc8:	ef cf       	rjmp	.-34     	; 0x1ca8 <init_PipeModules+0x7e>
    1cca:	8f ef       	ldi	r24, 0xFF	; 255
    1ccc:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1cd0:	90 e2       	ldi	r25, 0x20	; 32
    1cd2:	84 b3       	in	r24, 0x14	; 20
    1cd4:	81 60       	ori	r24, 0x01	; 1
    1cd6:	84 bb       	out	0x14, r24	; 20
    1cd8:	8f ef       	ldi	r24, 0xFF	; 255
    1cda:	88 b9       	out	0x08, r24	; 8
    1cdc:	20 b1       	in	r18, 0x00	; 0
    1cde:	90 fd       	sbrc	r25, 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <init_PipeModules+0xbc>
    1ce2:	8a ea       	ldi	r24, 0xAA	; 170
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <init_PipeModules+0xbe>
    1ce6:	85 e5       	ldi	r24, 0x55	; 85
    1ce8:	82 27       	eor	r24, r18
    1cea:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1cee:	82 23       	and	r24, r18
    1cf0:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1cf4:	84 b3       	in	r24, 0x14	; 20
    1cf6:	8e 7f       	andi	r24, 0xFE	; 254
    1cf8:	84 bb       	out	0x14, r24	; 20
    1cfa:	85 e0       	ldi	r24, 0x05	; 5
    1cfc:	8a 95       	dec	r24
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <init_PipeModules+0xd2>
    1d00:	00 00       	nop
    1d02:	91 50       	subi	r25, 0x01	; 1
    1d04:	31 f7       	brne	.-52     	; 0x1cd2 <init_PipeModules+0xa8>
    1d06:	00 00       	nop
    1d08:	00 00       	nop
    1d0a:	84 b3       	in	r24, 0x14	; 20
    1d0c:	81 60       	ori	r24, 0x01	; 1
    1d0e:	84 bb       	out	0x14, r24	; 20
    1d10:	84 b3       	in	r24, 0x14	; 20
    1d12:	87 60       	ori	r24, 0x07	; 7
    1d14:	84 bb       	out	0x14, r24	; 20
    1d16:	84 b3       	in	r24, 0x14	; 20
    1d18:	8b 7f       	andi	r24, 0xFB	; 251
    1d1a:	84 bb       	out	0x14, r24	; 20
    1d1c:	82 e0       	ldi	r24, 0x02	; 2
    1d1e:	8a 95       	dec	r24
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <init_PipeModules+0xf4>
    1d22:	00 c0       	rjmp	.+0      	; 0x1d24 <init_PipeModules+0xfa>
    1d24:	84 b3       	in	r24, 0x14	; 20
    1d26:	84 60       	ori	r24, 0x04	; 4
    1d28:	84 bb       	out	0x14, r24	; 20
    1d2a:	90 e2       	ldi	r25, 0x20	; 32
    1d2c:	e1 e4       	ldi	r30, 0x41	; 65
    1d2e:	f3 e0       	ldi	r31, 0x03	; 3
    1d30:	83 81       	ldd	r24, Z+3	; 0x03
    1d32:	82 83       	std	Z+2, r24	; 0x02
    1d34:	84 81       	ldd	r24, Z+4	; 0x04
    1d36:	83 83       	std	Z+3, r24	; 0x03
    1d38:	84 b3       	in	r24, 0x14	; 20
    1d3a:	81 60       	ori	r24, 0x01	; 1
    1d3c:	84 bb       	out	0x14, r24	; 20
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	81 83       	std	Z+1, r24	; 0x01
    1d42:	88 b9       	out	0x08, r24	; 8
    1d44:	85 81       	ldd	r24, Z+5	; 0x05
    1d46:	84 83       	std	Z+4, r24	; 0x04
    1d48:	86 81       	ldd	r24, Z+6	; 0x06
    1d4a:	85 83       	std	Z+5, r24	; 0x05
    1d4c:	80 b1       	in	r24, 0x00	; 0
    1d4e:	86 83       	std	Z+6, r24	; 0x06
    1d50:	82 83       	std	Z+2, r24	; 0x02
    1d52:	83 83       	std	Z+3, r24	; 0x03
    1d54:	84 83       	std	Z+4, r24	; 0x04
    1d56:	85 83       	std	Z+5, r24	; 0x05
    1d58:	87 83       	std	Z+7, r24	; 0x07
    1d5a:	84 b3       	in	r24, 0x14	; 20
    1d5c:	8e 7f       	andi	r24, 0xFE	; 254
    1d5e:	84 bb       	out	0x14, r24	; 20
    1d60:	38 97       	sbiw	r30, 0x08	; 8
    1d62:	91 50       	subi	r25, 0x01	; 1
    1d64:	29 f7       	brne	.-54     	; 0x1d30 <init_PipeModules+0x106>
    1d66:	00 00       	nop
    1d68:	00 00       	nop
    1d6a:	84 b3       	in	r24, 0x14	; 20
    1d6c:	81 60       	ori	r24, 0x01	; 1
    1d6e:	84 bb       	out	0x14, r24	; 20
    1d70:	84 b3       	in	r24, 0x14	; 20
    1d72:	8d 7f       	andi	r24, 0xFD	; 253
    1d74:	84 bb       	out	0x14, r24	; 20
    1d76:	18 b8       	out	0x08, r1	; 8
    1d78:	85 e0       	ldi	r24, 0x05	; 5
    1d7a:	8a 95       	dec	r24
    1d7c:	f1 f7       	brne	.-4      	; 0x1d7a <init_PipeModules+0x150>
    1d7e:	00 00       	nop
    1d80:	84 b3       	in	r24, 0x14	; 20
    1d82:	82 60       	ori	r24, 0x02	; 2
    1d84:	84 bb       	out	0x14, r24	; 20
    1d86:	08 95       	ret

00001d88 <test_PipeModule>:
    1d88:	88 30       	cpi	r24, 0x08	; 8
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <test_PipeModule+0x6>
    1d8c:	6a c0       	rjmp	.+212    	; 0x1e62 <test_PipeModule+0xda>
    1d8e:	31 e0       	ldi	r19, 0x01	; 1
    1d90:	01 c0       	rjmp	.+2      	; 0x1d94 <test_PipeModule+0xc>
    1d92:	33 0f       	add	r19, r19
    1d94:	8a 95       	dec	r24
    1d96:	ea f7       	brpl	.-6      	; 0x1d92 <test_PipeModule+0xa>
    1d98:	80 e8       	ldi	r24, 0x80	; 128
    1d9a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1d9e:	8b b1       	in	r24, 0x0b	; 11
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	8b b9       	out	0x0b, r24	; 11
    1da4:	84 b3       	in	r24, 0x14	; 20
    1da6:	87 60       	ori	r24, 0x07	; 7
    1da8:	84 bb       	out	0x14, r24	; 20
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	1d c0       	rjmp	.+58     	; 0x1de8 <test_PipeModule+0x60>
    1dae:	20 fd       	sbrc	r18, 0
    1db0:	03 c0       	rjmp	.+6      	; 0x1db8 <test_PipeModule+0x30>
    1db2:	83 2f       	mov	r24, r19
    1db4:	80 95       	com	r24
    1db6:	01 c0       	rjmp	.+2      	; 0x1dba <test_PipeModule+0x32>
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	88 b9       	out	0x08, r24	; 8
    1dbc:	26 95       	lsr	r18
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	8a 95       	dec	r24
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <test_PipeModule+0x38>
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <test_PipeModule+0x3e>
    1dc6:	84 b3       	in	r24, 0x14	; 20
    1dc8:	8e 7f       	andi	r24, 0xFE	; 254
    1dca:	84 bb       	out	0x14, r24	; 20
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	8a 95       	dec	r24
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <test_PipeModule+0x46>
    1dd2:	00 c0       	rjmp	.+0      	; 0x1dd4 <test_PipeModule+0x4c>
    1dd4:	84 b3       	in	r24, 0x14	; 20
    1dd6:	81 60       	ori	r24, 0x01	; 1
    1dd8:	84 bb       	out	0x14, r24	; 20
    1dda:	9f 5f       	subi	r25, 0xFF	; 255
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <test_PipeModule+0x5a>
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	25 ea       	ldi	r18, 0xA5	; 165
    1de2:	98 30       	cpi	r25, 0x08	; 8
    1de4:	20 f3       	brcs	.-56     	; 0x1dae <test_PipeModule+0x26>
    1de6:	4f 5f       	subi	r20, 0xFF	; 255
    1de8:	44 30       	cpi	r20, 0x04	; 4
    1dea:	c8 f3       	brcs	.-14     	; 0x1dde <test_PipeModule+0x56>
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0f c0       	rjmp	.+30     	; 0x1e0e <test_PipeModule+0x86>
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	8a 95       	dec	r24
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <test_PipeModule+0x6a>
    1df6:	00 c0       	rjmp	.+0      	; 0x1df8 <test_PipeModule+0x70>
    1df8:	84 b3       	in	r24, 0x14	; 20
    1dfa:	8e 7f       	andi	r24, 0xFE	; 254
    1dfc:	84 bb       	out	0x14, r24	; 20
    1dfe:	82 e0       	ldi	r24, 0x02	; 2
    1e00:	8a 95       	dec	r24
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <test_PipeModule+0x78>
    1e04:	00 c0       	rjmp	.+0      	; 0x1e06 <test_PipeModule+0x7e>
    1e06:	84 b3       	in	r24, 0x14	; 20
    1e08:	81 60       	ori	r24, 0x01	; 1
    1e0a:	84 bb       	out	0x14, r24	; 20
    1e0c:	9f 5f       	subi	r25, 0xFF	; 255
    1e0e:	90 32       	cpi	r25, 0x20	; 32
    1e10:	78 f3       	brcs	.-34     	; 0x1df0 <test_PipeModule+0x68>
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	ba 01       	movw	r22, r20
    1e1a:	17 c0       	rjmp	.+46     	; 0x1e4a <test_PipeModule+0xc2>
    1e1c:	44 0f       	add	r20, r20
    1e1e:	55 1f       	adc	r21, r21
    1e20:	66 1f       	adc	r22, r22
    1e22:	77 1f       	adc	r23, r23
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	8a 95       	dec	r24
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <test_PipeModule+0x9e>
    1e2a:	00 c0       	rjmp	.+0      	; 0x1e2c <test_PipeModule+0xa4>
    1e2c:	84 b3       	in	r24, 0x14	; 20
    1e2e:	8e 7f       	andi	r24, 0xFE	; 254
    1e30:	84 bb       	out	0x14, r24	; 20
    1e32:	80 b1       	in	r24, 0x00	; 0
    1e34:	83 23       	and	r24, r19
    1e36:	09 f0       	breq	.+2      	; 0x1e3a <test_PipeModule+0xb2>
    1e38:	41 60       	ori	r20, 0x01	; 1
    1e3a:	82 e0       	ldi	r24, 0x02	; 2
    1e3c:	8a 95       	dec	r24
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <test_PipeModule+0xb4>
    1e40:	00 c0       	rjmp	.+0      	; 0x1e42 <test_PipeModule+0xba>
    1e42:	84 b3       	in	r24, 0x14	; 20
    1e44:	81 60       	ori	r24, 0x01	; 1
    1e46:	84 bb       	out	0x14, r24	; 20
    1e48:	9f 5f       	subi	r25, 0xFF	; 255
    1e4a:	90 32       	cpi	r25, 0x20	; 32
    1e4c:	38 f3       	brcs	.-50     	; 0x1e1c <test_PipeModule+0x94>
    1e4e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1e52:	8b b1       	in	r24, 0x0b	; 11
    1e54:	80 68       	ori	r24, 0x80	; 128
    1e56:	8b b9       	out	0x0b, r24	; 11
    1e58:	34 2f       	mov	r19, r20
    1e5a:	25 2f       	mov	r18, r21
    1e5c:	86 2f       	mov	r24, r22
    1e5e:	97 2f       	mov	r25, r23
    1e60:	04 c0       	rjmp	.+8      	; 0x1e6a <test_PipeModule+0xe2>
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	63 2f       	mov	r22, r19
    1e6c:	72 2f       	mov	r23, r18
    1e6e:	08 95       	ret

00001e70 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e70:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1e72:	e9 e4       	ldi	r30, 0x49	; 73
    1e74:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1e76:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e78:	06 c0       	rjmp	.+12     	; 0x1e86 <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1e7e:	26 81       	ldd	r18, Z+6	; 0x06
    1e80:	82 2b       	or	r24, r18
		pPipe++;
    1e82:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e84:	9f 5f       	subi	r25, 0xFF	; 255
    1e86:	90 32       	cpi	r25, 0x20	; 32
    1e88:	c0 f3       	brcs	.-16     	; 0x1e7a <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    1e8a:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    1e8e:	89 23       	and	r24, r25
    1e90:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
}
    1e94:	89 23       	and	r24, r25
    1e96:	08 95       	ret

00001e98 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1e98:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1e9c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1ea0:	81 ff       	sbrs	r24, 1
    1ea2:	fc cf       	rjmp	.-8      	; 0x1e9c <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1ea4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1ea8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1eac:	81 ff       	sbrs	r24, 1
    1eae:	fc cf       	rjmp	.-8      	; 0x1ea8 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1eb0:	08 95       	ret

00001eb2 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1eb8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eba:	f8 94       	cli
    1ebc:	06 c0       	rjmp	.+12     	; 0x1eca <module_StartPowerOn+0x18>
    1ebe:	ef e2       	ldi	r30, 0x2F	; 47
    1ec0:	f2 e0       	ldi	r31, 0x02	; 2
    1ec2:	88 e2       	ldi	r24, 0x28	; 40
    1ec4:	82 83       	std	Z+2, r24	; 0x02
    1ec6:	13 82       	std	Z+3, r1	; 0x03
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	81 11       	cpse	r24, r1
    1ecc:	f8 cf       	rjmp	.-16     	; 0x1ebe <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ece:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1ed0:	08 95       	ret

00001ed2 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1ed2:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	31 f5       	brne	.+76     	; 0x1f26 <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1eda:	ca df       	rcall	.-108    	; 0x1e70 <module_TestAllInputs>
    1edc:	81 11       	cpse	r24, r1
    1ede:	14 c0       	rjmp	.+40     	; 0x1f08 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1ee0:	85 b1       	in	r24, 0x05	; 5
    1ee2:	80 64       	ori	r24, 0x40	; 64
    1ee4:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1ee6:	82 e1       	ldi	r24, 0x12	; 18
    1ee8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1eec:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1eee:	f8 94       	cli
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <module_PowerControl+0x2e>
    1ef4:	ef e2       	ldi	r30, 0x2F	; 47
    1ef6:	f2 e0       	ldi	r31, 0x02	; 2
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	82 83       	std	Z+2, r24	; 0x02
    1efc:	13 82       	std	Z+3, r1	; 0x03
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	81 11       	cpse	r24, r1
    1f02:	f8 cf       	rjmp	.-16     	; 0x1ef4 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1f04:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1f06:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1f08:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1f0a:	f8 94       	cli
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	07 c0       	rjmp	.+14     	; 0x1f1e <module_PowerControl+0x4c>
    1f10:	ef e2       	ldi	r30, 0x2F	; 47
    1f12:	f2 e0       	ldi	r31, 0x02	; 2
    1f14:	8c e0       	ldi	r24, 0x0C	; 12
    1f16:	82 83       	std	Z+2, r24	; 0x02
    1f18:	82 e0       	ldi	r24, 0x02	; 2
    1f1a:	83 83       	std	Z+3, r24	; 0x03
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	81 11       	cpse	r24, r1
    1f20:	f7 cf       	rjmp	.-18     	; 0x1f10 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1f22:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1f24:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1f26:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1f28:	b1 f4       	brne	.+44     	; 0x1f56 <module_PowerControl+0x84>
    1f2a:	a2 df       	rcall	.-188    	; 0x1e70 <module_TestAllInputs>
		if (testResult == 0){
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1f30:	84 e1       	ldi	r24, 0x14	; 20
    1f32:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1f36:	0b c0       	rjmp	.+22     	; 0x1f4e <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1f38:	48 2f       	mov	r20, r24
    1f3a:	50 e0       	ldi	r21, 0x00	; 0
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	85 e0       	ldi	r24, 0x05	; 5
    1f40:	be d5       	rcall	.+2940   	; 0x2abe <log_putError>
			POWER_OFF
    1f42:	85 b1       	in	r24, 0x05	; 5
    1f44:	8f 7b       	andi	r24, 0xBF	; 191
    1f46:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1f48:	80 e8       	ldi	r24, 0x80	; 128
    1f4a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1f54:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1f56:	8f ef       	ldi	r24, 0xFF	; 255
    1f58:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1f5c:	08 95       	ret

00001f5e <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0d c0       	rjmp	.+26     	; 0x1f7c <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1f62:	94 30       	cpi	r25, 0x04	; 4
    1f64:	50 f4       	brcc	.+20     	; 0x1f7a <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1f66:	e9 2f       	mov	r30, r25
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	81 11       	cpse	r24, r1
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <softKey_WantLong+0x14>
    1f6e:	2a e0       	ldi	r18, 0x0A	; 10
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <softKey_WantLong+0x16>
    1f72:	26 e0       	ldi	r18, 0x06	; 6
    1f74:	e1 5b       	subi	r30, 0xB1	; 177
    1f76:	fc 4f       	sbci	r31, 0xFC	; 252
    1f78:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1f7a:	9f 5f       	subi	r25, 0xFF	; 255
    1f7c:	96 30       	cpi	r25, 0x06	; 6
    1f7e:	88 f3       	brcs	.-30     	; 0x1f62 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1f80:	08 95       	ret

00001f82 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1f82:	1f 92       	push	r1
    1f84:	0f 92       	push	r0
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	0f 92       	push	r0
    1f8a:	11 24       	eor	r1, r1
    1f8c:	0b b6       	in	r0, 0x3b	; 59
    1f8e:	0f 92       	push	r0
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	0f 93       	push	r16
    1f96:	1f 93       	push	r17
    1f98:	2f 93       	push	r18
    1f9a:	3f 93       	push	r19
    1f9c:	4f 93       	push	r20
    1f9e:	5f 93       	push	r21
    1fa0:	6f 93       	push	r22
    1fa2:	7f 93       	push	r23
    1fa4:	8f 93       	push	r24
    1fa6:	9f 93       	push	r25
    1fa8:	af 93       	push	r26
    1faa:	bf 93       	push	r27
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ef 93       	push	r30
    1fb2:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1fb4:	85 b1       	in	r24, 0x05	; 5
    1fb6:	80 68       	ori	r24, 0x80	; 128
    1fb8:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1fba:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1fbe:	8f 5f       	subi	r24, 0xFF	; 255
    1fc0:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1fc4:	83 70       	andi	r24, 0x03	; 3
    1fc6:	81 30       	cpi	r24, 0x01	; 1
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <__vector_21+0x4a>
    1fca:	58 c1       	rjmp	.+688    	; 0x227c <__stack+0x7d>
    1fcc:	38 f0       	brcs	.+14     	; 0x1fdc <__vector_21+0x5a>
    1fce:	82 30       	cpi	r24, 0x02	; 2
    1fd0:	09 f4       	brne	.+2      	; 0x1fd4 <__vector_21+0x52>
    1fd2:	a5 c1       	rjmp	.+842    	; 0x231e <__stack+0x11f>
    1fd4:	83 30       	cpi	r24, 0x03	; 3
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <__vector_21+0x58>
    1fd8:	ca c1       	rjmp	.+916    	; 0x236e <__stack+0x16f>
    1fda:	05 c2       	rjmp	.+1034   	; 0x23e6 <__stack+0x1e7>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1fdc:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1fe0:	81 11       	cpse	r24, r1
    1fe2:	1a c1       	rjmp	.+564    	; 0x2218 <__stack+0x19>
    1fe4:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1fe8:	96 fd       	sbrc	r25, 6
    1fea:	16 c1       	rjmp	.+556    	; 0x2218 <__stack+0x19>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1fec:	28 2f       	mov	r18, r24
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	f9 01       	movw	r30, r18
    1ff2:	ee 0f       	add	r30, r30
    1ff4:	ff 1f       	adc	r31, r31
    1ff6:	e2 0f       	add	r30, r18
    1ff8:	f3 1f       	adc	r31, r19
    1ffa:	ee 0f       	add	r30, r30
    1ffc:	ff 1f       	adc	r31, r31
    1ffe:	e7 5b       	subi	r30, 0xB7	; 183
    2000:	fc 4f       	sbci	r31, 0xFC	; 252
    2002:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    2004:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    2008:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    200a:	49 17       	cp	r20, r25
    200c:	10 f4       	brcc	.+4      	; 0x2012 <__vector_21+0x90>
		return data1-data2;
    200e:	94 1b       	sub	r25, r20
    2010:	03 c0       	rjmp	.+6      	; 0x2018 <__vector_21+0x96>
	} else {
		return data2-data1;
    2012:	54 2f       	mov	r21, r20
    2014:	59 1b       	sub	r21, r25
    2016:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    2018:	94 30       	cpi	r25, 0x04	; 4
    201a:	08 f0       	brcs	.+2      	; 0x201e <__vector_21+0x9c>
    201c:	fd c0       	rjmp	.+506    	; 0x2218 <__stack+0x19>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    201e:	81 11       	cpse	r24, r1
    2020:	0e c0       	rjmp	.+28     	; 0x203e <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    2022:	42 32       	cpi	r20, 0x22	; 34
    2024:	70 f0       	brcs	.+28     	; 0x2042 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    2026:	4f 33       	cpi	r20, 0x3F	; 63
    2028:	70 f0       	brcs	.+28     	; 0x2046 <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    202a:	48 36       	cpi	r20, 0x68	; 104
    202c:	70 f0       	brcs	.+28     	; 0x204a <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    202e:	46 39       	cpi	r20, 0x96	; 150
    2030:	70 f0       	brcs	.+28     	; 0x204e <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    2032:	4f 3b       	cpi	r20, 0xBF	; 191
    2034:	70 f0       	brcs	.+28     	; 0x2052 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    2036:	48 3e       	cpi	r20, 0xE8	; 232
    2038:	70 f4       	brcc	.+28     	; 0x2056 <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    203a:	c6 e0       	ldi	r28, 0x06	; 6
    203c:	0d c0       	rjmp	.+26     	; 0x2058 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    203e:	cf ef       	ldi	r28, 0xFF	; 255
    2040:	0b c0       	rjmp	.+22     	; 0x2058 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    2042:	c4 e0       	ldi	r28, 0x04	; 4
    2044:	09 c0       	rjmp	.+18     	; 0x2058 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    2046:	c3 e0       	ldi	r28, 0x03	; 3
    2048:	07 c0       	rjmp	.+14     	; 0x2058 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    204a:	c5 e0       	ldi	r28, 0x05	; 5
    204c:	05 c0       	rjmp	.+10     	; 0x2058 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    204e:	c1 e0       	ldi	r28, 0x01	; 1
    2050:	03 c0       	rjmp	.+6      	; 0x2058 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    2052:	c2 e0       	ldi	r28, 0x02	; 2
    2054:	01 c0       	rjmp	.+2      	; 0x2058 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    2056:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    2058:	f9 01       	movw	r30, r18
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	e2 0f       	add	r30, r18
    2060:	f3 1f       	adc	r31, r19
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	e7 5b       	subi	r30, 0xB7	; 183
    2068:	fc 4f       	sbci	r31, 0xFC	; 252
    206a:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    206c:	dc 17       	cp	r29, r28
    206e:	09 f4       	brne	.+2      	; 0x2072 <__vector_21+0xf0>
    2070:	48 c0       	rjmp	.+144    	; 0x2102 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    2072:	df 3f       	cpi	r29, 0xFF	; 255
    2074:	19 f0       	breq	.+6      	; 0x207c <__vector_21+0xfa>
    2076:	cf 3f       	cpi	r28, 0xFF	; 255
    2078:	09 f0       	breq	.+2      	; 0x207c <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    207a:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    207c:	f9 01       	movw	r30, r18
    207e:	ee 0f       	add	r30, r30
    2080:	ff 1f       	adc	r31, r31
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	ee 0f       	add	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	e7 5b       	subi	r30, 0xB7	; 183
    208c:	fc 4f       	sbci	r31, 0xFC	; 252
    208e:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    2090:	df 3f       	cpi	r29, 0xFF	; 255
    2092:	f9 f4       	brne	.+62     	; 0x20d2 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    2094:	c9 01       	movw	r24, r18
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	fc 01       	movw	r30, r24
    209c:	e2 0f       	add	r30, r18
    209e:	f3 1f       	adc	r31, r19
    20a0:	ee 0f       	add	r30, r30
    20a2:	ff 1f       	adc	r31, r31
    20a4:	e7 5b       	subi	r30, 0xB7	; 183
    20a6:	fc 4f       	sbci	r31, 0xFC	; 252
    20a8:	15 82       	std	Z+5, r1	; 0x05
    20aa:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    20ac:	fc 01       	movw	r30, r24
    20ae:	e2 0f       	add	r30, r18
    20b0:	f3 1f       	adc	r31, r19
    20b2:	ee 0f       	add	r30, r30
    20b4:	ff 1f       	adc	r31, r31
    20b6:	e7 5b       	subi	r30, 0xB7	; 183
    20b8:	fc 4f       	sbci	r31, 0xFC	; 252
    20ba:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    20bc:	ec 2f       	mov	r30, r28
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	e2 5b       	subi	r30, 0xB2	; 178
    20c2:	fc 4f       	sbci	r31, 0xFC	; 252
    20c4:	80 81       	ld	r24, Z
    20c6:	80 ff       	sbrs	r24, 0
    20c8:	a7 c0       	rjmp	.+334    	; 0x2218 <__stack+0x19>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    20ca:	8c 2f       	mov	r24, r28
    20cc:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <message_push>
    20d0:	a3 c0       	rjmp	.+326    	; 0x2218 <__stack+0x19>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    20d2:	ed 2f       	mov	r30, r29
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	e2 5b       	subi	r30, 0xB2	; 178
    20d8:	fc 4f       	sbci	r31, 0xFC	; 252
    20da:	80 81       	ld	r24, Z
    20dc:	81 ff       	sbrs	r24, 1
    20de:	9c c0       	rjmp	.+312    	; 0x2218 <__stack+0x19>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    20e0:	f9 01       	movw	r30, r18
    20e2:	ee 0f       	add	r30, r30
    20e4:	ff 1f       	adc	r31, r31
    20e6:	e2 0f       	add	r30, r18
    20e8:	f3 1f       	adc	r31, r19
    20ea:	ee 0f       	add	r30, r30
    20ec:	ff 1f       	adc	r31, r31
    20ee:	e7 5b       	subi	r30, 0xB7	; 183
    20f0:	fc 4f       	sbci	r31, 0xFC	; 252
    20f2:	83 81       	ldd	r24, Z+3	; 0x03
    20f4:	83 70       	andi	r24, 0x03	; 3
    20f6:	09 f0       	breq	.+2      	; 0x20fa <__vector_21+0x178>
    20f8:	8f c0       	rjmp	.+286    	; 0x2218 <__stack+0x19>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    20fa:	8d 2f       	mov	r24, r29
    20fc:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <message_push>
    2100:	8b c0       	rjmp	.+278    	; 0x2218 <__stack+0x19>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    2102:	cf 3f       	cpi	r28, 0xFF	; 255
    2104:	09 f4       	brne	.+2      	; 0x2108 <__vector_21+0x186>
    2106:	88 c0       	rjmp	.+272    	; 0x2218 <__stack+0x19>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    2108:	f9 01       	movw	r30, r18
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	df 01       	movw	r26, r30
    2110:	a2 0f       	add	r26, r18
    2112:	b3 1f       	adc	r27, r19
    2114:	aa 0f       	add	r26, r26
    2116:	bb 1f       	adc	r27, r27
    2118:	a7 5b       	subi	r26, 0xB7	; 183
    211a:	bc 4f       	sbci	r27, 0xFC	; 252
    211c:	14 96       	adiw	r26, 0x04	; 4
    211e:	8d 91       	ld	r24, X+
    2120:	9c 91       	ld	r25, X
    2122:	15 97       	sbiw	r26, 0x05	; 5
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	15 96       	adiw	r26, 0x05	; 5
    2128:	9c 93       	st	X, r25
    212a:	8e 93       	st	-X, r24
    212c:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    212e:	fd 01       	movw	r30, r26
    2130:	84 81       	ldd	r24, Z+4	; 0x04
    2132:	95 81       	ldd	r25, Z+5	; 0x05
    2134:	8b 34       	cpi	r24, 0x4B	; 75
    2136:	91 05       	cpc	r25, r1
    2138:	a9 f4       	brne	.+42     	; 0x2164 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    213a:	ed 2f       	mov	r30, r29
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	e2 5b       	subi	r30, 0xB2	; 178
    2140:	fc 4f       	sbci	r31, 0xFC	; 252
    2142:	80 81       	ld	r24, Z
    2144:	82 ff       	sbrs	r24, 2
    2146:	0e c0       	rjmp	.+28     	; 0x2164 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    2148:	8c 2f       	mov	r24, r28
    214a:	80 68       	ori	r24, 0x80	; 128
    214c:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    2150:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    2154:	86 e0       	ldi	r24, 0x06	; 6
    2156:	e8 9f       	mul	r30, r24
    2158:	f0 01       	movw	r30, r0
    215a:	11 24       	eor	r1, r1
    215c:	e7 5b       	subi	r30, 0xB7	; 183
    215e:	fc 4f       	sbci	r31, 0xFC	; 252
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    2164:	ed 2f       	mov	r30, r29
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	e2 5b       	subi	r30, 0xB2	; 178
    216a:	fc 4f       	sbci	r31, 0xFC	; 252
    216c:	80 81       	ld	r24, Z
    216e:	83 ff       	sbrs	r24, 3
    2170:	53 c0       	rjmp	.+166    	; 0x2218 <__stack+0x19>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    2172:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	fc 01       	movw	r30, r24
    217a:	ee 0f       	add	r30, r30
    217c:	ff 1f       	adc	r31, r31
    217e:	e8 0f       	add	r30, r24
    2180:	f9 1f       	adc	r31, r25
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	e7 5b       	subi	r30, 0xB7	; 183
    2188:	fc 4f       	sbci	r31, 0xFC	; 252
    218a:	23 81       	ldd	r18, Z+3	; 0x03
    218c:	21 11       	cpse	r18, r1
    218e:	1e c0       	rjmp	.+60     	; 0x21cc <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2190:	fc 01       	movw	r30, r24
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	e8 0f       	add	r30, r24
    2198:	f9 1f       	adc	r31, r25
    219a:	ee 0f       	add	r30, r30
    219c:	ff 1f       	adc	r31, r31
    219e:	e7 5b       	subi	r30, 0xB7	; 183
    21a0:	fc 4f       	sbci	r31, 0xFC	; 252
    21a2:	24 81       	ldd	r18, Z+4	; 0x04
    21a4:	35 81       	ldd	r19, Z+5	; 0x05
    21a6:	22 33       	cpi	r18, 0x32	; 50
    21a8:	31 05       	cpc	r19, r1
    21aa:	b1 f5       	brne	.+108    	; 0x2218 <__stack+0x19>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    21ac:	26 e0       	ldi	r18, 0x06	; 6
    21ae:	28 9f       	mul	r18, r24
    21b0:	f0 01       	movw	r30, r0
    21b2:	29 9f       	mul	r18, r25
    21b4:	f0 0d       	add	r31, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	e7 5b       	subi	r30, 0xB7	; 183
    21ba:	fc 4f       	sbci	r31, 0xFC	; 252
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    21c0:	15 82       	std	Z+5, r1	; 0x05
    21c2:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    21c4:	8c 2f       	mov	r24, r28
    21c6:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <message_push>
    21ca:	26 c0       	rjmp	.+76     	; 0x2218 <__stack+0x19>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    21cc:	fc 01       	movw	r30, r24
    21ce:	ee 0f       	add	r30, r30
    21d0:	ff 1f       	adc	r31, r31
    21d2:	e8 0f       	add	r30, r24
    21d4:	f9 1f       	adc	r31, r25
    21d6:	ee 0f       	add	r30, r30
    21d8:	ff 1f       	adc	r31, r31
    21da:	e7 5b       	subi	r30, 0xB7	; 183
    21dc:	fc 4f       	sbci	r31, 0xFC	; 252
    21de:	23 81       	ldd	r18, Z+3	; 0x03
    21e0:	21 30       	cpi	r18, 0x01	; 1
    21e2:	d1 f4       	brne	.+52     	; 0x2218 <__stack+0x19>
    21e4:	26 e0       	ldi	r18, 0x06	; 6
    21e6:	28 9f       	mul	r18, r24
    21e8:	f0 01       	movw	r30, r0
    21ea:	29 9f       	mul	r18, r25
    21ec:	f0 0d       	add	r31, r0
    21ee:	11 24       	eor	r1, r1
    21f0:	e7 5b       	subi	r30, 0xB7	; 183
    21f2:	fc 4f       	sbci	r31, 0xFC	; 252
    21f4:	24 81       	ldd	r18, Z+4	; 0x04
    21f6:	35 81       	ldd	r19, Z+5	; 0x05
    21f8:	2c 30       	cpi	r18, 0x0C	; 12
    21fa:	31 05       	cpc	r19, r1
    21fc:	69 f4       	brne	.+26     	; 0x2218 <__stack+0x19>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    21fe:	26 e0       	ldi	r18, 0x06	; 6
    2200:	28 9f       	mul	r18, r24
    2202:	f0 01       	movw	r30, r0
    2204:	29 9f       	mul	r18, r25
    2206:	f0 0d       	add	r31, r0
    2208:	11 24       	eor	r1, r1
    220a:	e7 5b       	subi	r30, 0xB7	; 183
    220c:	fc 4f       	sbci	r31, 0xFC	; 252
    220e:	15 82       	std	Z+5, r1	; 0x05
    2210:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2212:	8c 2f       	mov	r24, r28
    2214:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    2218:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    221c:	8f 5f       	subi	r24, 0xFF	; 255
    221e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    2222:	84 30       	cpi	r24, 0x04	; 4
    2224:	10 f0       	brcs	.+4      	; 0x222a <__stack+0x2b>
		adcNr = 0;
    2226:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    222a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    222e:	81 11       	cpse	r24, r1
    2230:	0c c0       	rjmp	.+24     	; 0x224a <__stack+0x4b>
		newMux = adcKeys[adcNr].mux;
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	fc 01       	movw	r30, r24
    2236:	ee 0f       	add	r30, r30
    2238:	ff 1f       	adc	r31, r31
    223a:	e8 0f       	add	r30, r24
    223c:	f9 1f       	adc	r31, r25
    223e:	ee 0f       	add	r30, r30
    2240:	ff 1f       	adc	r31, r31
    2242:	e7 5b       	subi	r30, 0xB7	; 183
    2244:	fc 4f       	sbci	r31, 0xFC	; 252
    2246:	80 81       	ld	r24, Z
    2248:	01 c0       	rjmp	.+2      	; 0x224c <__stack+0x4d>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    224a:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    224c:	98 2f       	mov	r25, r24
    224e:	9f 71       	andi	r25, 0x1F	; 31
    2250:	90 66       	ori	r25, 0x60	; 96
    2252:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    2256:	eb e7       	ldi	r30, 0x7B	; 123
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	20 81       	ld	r18, Z
    225c:	80 72       	andi	r24, 0x20	; 32
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	95 95       	asr	r25
    2262:	87 95       	ror	r24
    2264:	95 95       	asr	r25
    2266:	87 95       	ror	r24
    2268:	92 2f       	mov	r25, r18
    226a:	9f 7d       	andi	r25, 0xDF	; 223
    226c:	89 2b       	or	r24, r25
    226e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    2270:	ea e7       	ldi	r30, 0x7A	; 122
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	80 64       	ori	r24, 0x40	; 64
    2278:	80 83       	st	Z, r24
    227a:	b5 c0       	rjmp	.+362    	; 0x23e6 <__stack+0x1e7>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    227c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2280:	80 38       	cpi	r24, 0x80	; 128
    2282:	09 f4       	brne	.+2      	; 0x2286 <__stack+0x87>
    2284:	b0 c0       	rjmp	.+352    	; 0x23e6 <__stack+0x1e7>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    2286:	84 b3       	in	r24, 0x14	; 20
    2288:	87 60       	ori	r24, 0x07	; 7
    228a:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    228c:	84 b3       	in	r24, 0x14	; 20
    228e:	8b 7f       	andi	r24, 0xFB	; 251
    2290:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    2292:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    2296:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2298:	e2 e0       	ldi	r30, 0x02	; 2
    229a:	ea 95       	dec	r30
    229c:	f1 f7       	brne	.-4      	; 0x229a <__stack+0x9b>
    229e:	00 c0       	rjmp	.+0      	; 0x22a0 <__stack+0xa1>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    22a0:	84 b3       	in	r24, 0x14	; 20
    22a2:	84 60       	ori	r24, 0x04	; 4
    22a4:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    22a6:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    22a8:	e1 e4       	ldi	r30, 0x41	; 65
    22aa:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    22ac:	83 81       	ldd	r24, Z+3	; 0x03
    22ae:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    22b0:	84 81       	ldd	r24, Z+4	; 0x04
    22b2:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    22b4:	84 b3       	in	r24, 0x14	; 20
    22b6:	81 60       	ori	r24, 0x01	; 1
    22b8:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    22ba:	81 81       	ldd	r24, Z+1	; 0x01
    22bc:	82 2b       	or	r24, r18
    22be:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    22c0:	85 81       	ldd	r24, Z+5	; 0x05
    22c2:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    22c4:	86 81       	ldd	r24, Z+6	; 0x06
    22c6:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    22c8:	80 b1       	in	r24, 0x00	; 0
    22ca:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    22cc:	84 b3       	in	r24, 0x14	; 20
    22ce:	8e 7f       	andi	r24, 0xFE	; 254
    22d0:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    22d2:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    22d4:	91 50       	subi	r25, 0x01	; 1
    22d6:	51 f7       	brne	.-44     	; 0x22ac <__stack+0xad>
	asm("nop");
    22d8:	00 00       	nop
	asm("nop");
    22da:	00 00       	nop
	PIPE_CLOCK_H
    22dc:	84 b3       	in	r24, 0x14	; 20
    22de:	81 60       	ori	r24, 0x01	; 1
    22e0:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    22e2:	84 b3       	in	r24, 0x14	; 20
    22e4:	8d 7f       	andi	r24, 0xFD	; 253
    22e6:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    22e8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    22ec:	82 60       	ori	r24, 0x02	; 2
    22ee:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    22f2:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    22f4:	8b b1       	in	r24, 0x0b	; 11
    22f6:	80 68       	ori	r24, 0x80	; 128
    22f8:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    22fa:	84 b3       	in	r24, 0x14	; 20
    22fc:	82 60       	ori	r24, 0x02	; 2
    22fe:	84 bb       	out	0x14, r24	; 20
    2300:	72 c0       	rjmp	.+228    	; 0x23e6 <__stack+0x1e7>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    2302:	80 81       	ld	r24, Z
    2304:	81 50       	subi	r24, 0x01	; 1
    2306:	8e 3f       	cpi	r24, 0xFE	; 254
    2308:	38 f4       	brcc	.+14     	; 0x2318 <__stack+0x119>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    230a:	21 81       	ldd	r18, Z+1	; 0x01
    230c:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    230e:	25 30       	cpi	r18, 0x05	; 5
    2310:	10 f0       	brcs	.+4      	; 0x2316 <__stack+0x117>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    2312:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    2314:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    2316:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    2318:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    231a:	9f 5f       	subi	r25, 0xFF	; 255
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <__stack+0x125>
    231e:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    2320:	ef e2       	ldi	r30, 0x2F	; 47
    2322:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    2324:	99 30       	cpi	r25, 0x09	; 9
    2326:	68 f3       	brcs	.-38     	; 0x2302 <__stack+0x103>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    2328:	e1 e4       	ldi	r30, 0x41	; 65
    232a:	f2 e0       	ldi	r31, 0x02	; 2
    232c:	80 81       	ld	r24, Z
    232e:	8f 5f       	subi	r24, 0xFF	; 255
    2330:	80 83       	st	Z, r24
    2332:	8a 3f       	cpi	r24, 0xFA	; 250
    2334:	09 f0       	breq	.+2      	; 0x2338 <__stack+0x139>
    2336:	57 c0       	rjmp	.+174    	; 0x23e6 <__stack+0x1e7>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    233e:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    2340:	81 81       	ldd	r24, Z+1	; 0x01
    2342:	8f 5f       	subi	r24, 0xFF	; 255
    2344:	81 83       	std	Z+1, r24	; 0x01
    2346:	8c 33       	cpi	r24, 0x3C	; 60
    2348:	08 f4       	brcc	.+2      	; 0x234c <__stack+0x14d>
    234a:	4d c0       	rjmp	.+154    	; 0x23e6 <__stack+0x1e7>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    234c:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	8f 5f       	subi	r24, 0xFF	; 255
    2352:	82 83       	std	Z+2, r24	; 0x02
    2354:	8c 33       	cpi	r24, 0x3C	; 60
    2356:	08 f4       	brcc	.+2      	; 0x235a <__stack+0x15b>
    2358:	46 c0       	rjmp	.+140    	; 0x23e6 <__stack+0x1e7>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    235a:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    235c:	83 81       	ldd	r24, Z+3	; 0x03
    235e:	8f 5f       	subi	r24, 0xFF	; 255
    2360:	83 83       	std	Z+3, r24	; 0x03
    2362:	84 36       	cpi	r24, 0x64	; 100
    2364:	08 f4       	brcc	.+2      	; 0x2368 <__stack+0x169>
    2366:	3f c0       	rjmp	.+126    	; 0x23e6 <__stack+0x1e7>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2368:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    236c:	3c c0       	rjmp	.+120    	; 0x23e6 <__stack+0x1e7>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    236e:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2372:	80 38       	cpi	r24, 0x80	; 128
    2374:	c1 f1       	breq	.+112    	; 0x23e6 <__stack+0x1e7>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    2376:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
    237a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    237e:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2380:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    2382:	09 e4       	ldi	r16, 0x49	; 73
    2384:	12 e0       	ldi	r17, 0x02	; 2
    2386:	2c c0       	rjmp	.+88     	; 0x23e0 <__stack+0x1e1>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2388:	f8 01       	movw	r30, r16
    238a:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    238c:	83 81       	ldd	r24, Z+3	; 0x03
    238e:	9c 2f       	mov	r25, r28
    2390:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2392:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    2394:	84 81       	ldd	r24, Z+4	; 0x04
    2396:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2398:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    239a:	25 81       	ldd	r18, Z+5	; 0x05
    239c:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    239e:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    23a0:	86 81       	ldd	r24, Z+6	; 0x06
    23a2:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    23a4:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    23a6:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    23a8:	cd 23       	and	r28, r29
    23aa:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    23ac:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    23ae:	8d 2f       	mov	r24, r29
    23b0:	80 95       	com	r24
    23b2:	8c 23       	and	r24, r28
    23b4:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    23b6:	21 f0       	breq	.+8      	; 0x23c0 <__stack+0x1c1>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    23b8:	9f 2d       	mov	r25, r15
    23ba:	90 62       	ori	r25, 0x20	; 32
    23bc:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    23c0:	c0 95       	com	r28
    23c2:	cd 23       	and	r28, r29
    23c4:	8c 2f       	mov	r24, r28
    23c6:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    23c8:	19 f0       	breq	.+6      	; 0x23d0 <__stack+0x1d1>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    23ca:	9f 2d       	mov	r25, r15
    23cc:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <pipeMsgPush>
		}
		curPipe++;
    23d0:	08 5f       	subi	r16, 0xF8	; 248
    23d2:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    23d4:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    23d8:	81 60       	ori	r24, 0x01	; 1
    23da:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    23de:	f3 94       	inc	r15
    23e0:	ff e1       	ldi	r31, 0x1F	; 31
    23e2:	ff 15       	cp	r31, r15
    23e4:	88 f6       	brcc	.-94     	; 0x2388 <__stack+0x189>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    23e6:	85 b1       	in	r24, 0x05	; 5
    23e8:	8f 77       	andi	r24, 0x7F	; 127
    23ea:	85 b9       	out	0x05, r24	; 5

}
    23ec:	ff 91       	pop	r31
    23ee:	ef 91       	pop	r30
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	bf 91       	pop	r27
    23f6:	af 91       	pop	r26
    23f8:	9f 91       	pop	r25
    23fa:	8f 91       	pop	r24
    23fc:	7f 91       	pop	r23
    23fe:	6f 91       	pop	r22
    2400:	5f 91       	pop	r21
    2402:	4f 91       	pop	r20
    2404:	3f 91       	pop	r19
    2406:	2f 91       	pop	r18
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	0f 90       	pop	r0
    2412:	0b be       	out	0x3b, r0	; 59
    2414:	0f 90       	pop	r0
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	0f 90       	pop	r0
    241a:	1f 90       	pop	r1
    241c:	18 95       	reti

0000241e <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    241e:	e8 2f       	mov	r30, r24
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	ee 0f       	add	r30, r30
    2424:	ff 1f       	adc	r31, r31
    2426:	ee 0f       	add	r30, r30
    2428:	ff 1f       	adc	r31, r31
    242a:	ee 0f       	add	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	e7 5b       	subi	r30, 0xB7	; 183
    2430:	fd 4f       	sbci	r31, 0xFD	; 253
    2432:	60 95       	com	r22
    2434:	81 81       	ldd	r24, Z+1	; 0x01
    2436:	68 23       	and	r22, r24
    2438:	61 83       	std	Z+1, r22	; 0x01
    243a:	08 95       	ret

0000243c <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    243c:	e8 2f       	mov	r30, r24
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	ee 0f       	add	r30, r30
    2442:	ff 1f       	adc	r31, r31
    2444:	ee 0f       	add	r30, r30
    2446:	ff 1f       	adc	r31, r31
    2448:	ee 0f       	add	r30, r30
    244a:	ff 1f       	adc	r31, r31
    244c:	e7 5b       	subi	r30, 0xB7	; 183
    244e:	fd 4f       	sbci	r31, 0xFD	; 253
    2450:	81 81       	ldd	r24, Z+1	; 0x01
    2452:	68 2b       	or	r22, r24
    2454:	61 83       	std	Z+1, r22	; 0x01
    2456:	08 95       	ret

00002458 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2458:	8f ef       	ldi	r24, 0xFF	; 255
    245a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    245c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    245e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    2460:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    2462:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    2464:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    2466:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    2468:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    246c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    2470:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    2474:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    2478:	8a b1       	in	r24, 0x0a	; 10
    247a:	80 68       	ori	r24, 0x80	; 128
    247c:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    247e:	8b b1       	in	r24, 0x0b	; 11
    2480:	8f 77       	andi	r24, 0x7F	; 127
    2482:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    2484:	84 b1       	in	r24, 0x04	; 4
    2486:	80 64       	ori	r24, 0x40	; 64
    2488:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    248a:	85 b1       	in	r24, 0x05	; 5
    248c:	8f 7b       	andi	r24, 0xBF	; 191
    248e:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2490:	84 b1       	in	r24, 0x04	; 4
    2492:	80 63       	ori	r24, 0x30	; 48
    2494:	84 b9       	out	0x04, r24	; 4
    2496:	08 95       	ret

00002498 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2498:	88 23       	and	r24, r24
    249a:	34 f4       	brge	.+12     	; 0x24a8 <lcd_write_nibble+0x10>
    249c:	e2 e0       	ldi	r30, 0x02	; 2
    249e:	f1 e0       	ldi	r31, 0x01	; 1
    24a0:	90 81       	ld	r25, Z
    24a2:	90 61       	ori	r25, 0x10	; 16
    24a4:	90 83       	st	Z, r25
    24a6:	05 c0       	rjmp	.+10     	; 0x24b2 <lcd_write_nibble+0x1a>
    24a8:	e2 e0       	ldi	r30, 0x02	; 2
    24aa:	f1 e0       	ldi	r31, 0x01	; 1
    24ac:	90 81       	ld	r25, Z
    24ae:	9f 7e       	andi	r25, 0xEF	; 239
    24b0:	90 83       	st	Z, r25
    24b2:	86 ff       	sbrs	r24, 6
    24b4:	06 c0       	rjmp	.+12     	; 0x24c2 <lcd_write_nibble+0x2a>
    24b6:	e2 e0       	ldi	r30, 0x02	; 2
    24b8:	f1 e0       	ldi	r31, 0x01	; 1
    24ba:	90 81       	ld	r25, Z
    24bc:	98 60       	ori	r25, 0x08	; 8
    24be:	90 83       	st	Z, r25
    24c0:	05 c0       	rjmp	.+10     	; 0x24cc <lcd_write_nibble+0x34>
    24c2:	e2 e0       	ldi	r30, 0x02	; 2
    24c4:	f1 e0       	ldi	r31, 0x01	; 1
    24c6:	90 81       	ld	r25, Z
    24c8:	97 7f       	andi	r25, 0xF7	; 247
    24ca:	90 83       	st	Z, r25
    24cc:	85 ff       	sbrs	r24, 5
    24ce:	04 c0       	rjmp	.+8      	; 0x24d8 <lcd_write_nibble+0x40>
    24d0:	9e b1       	in	r25, 0x0e	; 14
    24d2:	98 60       	ori	r25, 0x08	; 8
    24d4:	9e b9       	out	0x0e, r25	; 14
    24d6:	03 c0       	rjmp	.+6      	; 0x24de <lcd_write_nibble+0x46>
    24d8:	9e b1       	in	r25, 0x0e	; 14
    24da:	97 7f       	andi	r25, 0xF7	; 247
    24dc:	9e b9       	out	0x0e, r25	; 14
    24de:	84 ff       	sbrs	r24, 4
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <lcd_write_nibble+0x52>
    24e2:	84 b3       	in	r24, 0x14	; 20
    24e4:	80 62       	ori	r24, 0x20	; 32
    24e6:	84 bb       	out	0x14, r24	; 20
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <lcd_write_nibble+0x58>
    24ea:	84 b3       	in	r24, 0x14	; 20
    24ec:	8f 7d       	andi	r24, 0xDF	; 223
    24ee:	84 bb       	out	0x14, r24	; 20
    24f0:	e2 e0       	ldi	r30, 0x02	; 2
    24f2:	f1 e0       	ldi	r31, 0x01	; 1
    24f4:	80 81       	ld	r24, Z
    24f6:	80 64       	ori	r24, 0x40	; 64
    24f8:	80 83       	st	Z, r24
    24fa:	85 e0       	ldi	r24, 0x05	; 5
    24fc:	8a 95       	dec	r24
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <lcd_write_nibble+0x64>
    2500:	00 00       	nop
    2502:	80 81       	ld	r24, Z
    2504:	8f 7b       	andi	r24, 0xBF	; 191
    2506:	80 83       	st	Z, r24
    2508:	85 e0       	ldi	r24, 0x05	; 5
    250a:	8a 95       	dec	r24
    250c:	f1 f7       	brne	.-4      	; 0x250a <lcd_write_nibble+0x72>
    250e:	00 00       	nop
    2510:	08 95       	ret

00002512 <lcd_write_character>:
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	d8 2f       	mov	r29, r24
    2518:	c5 b1       	in	r28, 0x05	; 5
    251a:	c0 73       	andi	r28, 0x30	; 48
    251c:	85 b1       	in	r24, 0x05	; 5
    251e:	8f 7c       	andi	r24, 0xCF	; 207
    2520:	80 61       	ori	r24, 0x10	; 16
    2522:	85 b9       	out	0x05, r24	; 5
    2524:	e2 e0       	ldi	r30, 0x02	; 2
    2526:	f1 e0       	ldi	r31, 0x01	; 1
    2528:	80 81       	ld	r24, Z
    252a:	80 62       	ori	r24, 0x20	; 32
    252c:	80 83       	st	Z, r24
    252e:	80 81       	ld	r24, Z
    2530:	8f 7b       	andi	r24, 0xBF	; 191
    2532:	80 83       	st	Z, r24
    2534:	8d 2f       	mov	r24, r29
    2536:	b0 df       	rcall	.-160    	; 0x2498 <lcd_write_nibble>
    2538:	8d 2f       	mov	r24, r29
    253a:	82 95       	swap	r24
    253c:	80 7f       	andi	r24, 0xF0	; 240
    253e:	ac df       	rcall	.-168    	; 0x2498 <lcd_write_nibble>
    2540:	8f ef       	ldi	r24, 0xFF	; 255
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	f1 f7       	brne	.-4      	; 0x2544 <lcd_write_character+0x32>
    2548:	00 c0       	rjmp	.+0      	; 0x254a <lcd_write_character+0x38>
    254a:	00 00       	nop
    254c:	85 b1       	in	r24, 0x05	; 5
    254e:	80 73       	andi	r24, 0x30	; 48
    2550:	c8 2b       	or	r28, r24
    2552:	c5 b9       	out	0x05, r28	; 5
    2554:	df 91       	pop	r29
    2556:	cf 91       	pop	r28
    2558:	08 95       	ret

0000255a <lcd_write_command>:
    255a:	cf 93       	push	r28
    255c:	df 93       	push	r29
    255e:	d8 2f       	mov	r29, r24
    2560:	c5 b1       	in	r28, 0x05	; 5
    2562:	c0 73       	andi	r28, 0x30	; 48
    2564:	85 b1       	in	r24, 0x05	; 5
    2566:	8f 7c       	andi	r24, 0xCF	; 207
    2568:	80 61       	ori	r24, 0x10	; 16
    256a:	85 b9       	out	0x05, r24	; 5
    256c:	e2 e0       	ldi	r30, 0x02	; 2
    256e:	f1 e0       	ldi	r31, 0x01	; 1
    2570:	80 81       	ld	r24, Z
    2572:	8f 7d       	andi	r24, 0xDF	; 223
    2574:	80 83       	st	Z, r24
    2576:	80 81       	ld	r24, Z
    2578:	8f 7b       	andi	r24, 0xBF	; 191
    257a:	80 83       	st	Z, r24
    257c:	8d 2f       	mov	r24, r29
    257e:	8c df       	rcall	.-232    	; 0x2498 <lcd_write_nibble>
    2580:	8d 2f       	mov	r24, r29
    2582:	82 95       	swap	r24
    2584:	80 7f       	andi	r24, 0xF0	; 240
    2586:	88 df       	rcall	.-240    	; 0x2498 <lcd_write_nibble>
    2588:	d1 50       	subi	r29, 0x01	; 1
    258a:	d2 30       	cpi	r29, 0x02	; 2
    258c:	38 f4       	brcc	.+14     	; 0x259c <lcd_write_command+0x42>
    258e:	8f e0       	ldi	r24, 0x0F	; 15
    2590:	97 e2       	ldi	r25, 0x27	; 39
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <lcd_write_command+0x38>
    2596:	00 c0       	rjmp	.+0      	; 0x2598 <lcd_write_command+0x3e>
    2598:	00 00       	nop
    259a:	06 c0       	rjmp	.+12     	; 0x25a8 <lcd_write_command+0x4e>
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <lcd_write_command+0x46>
    25a4:	00 c0       	rjmp	.+0      	; 0x25a6 <lcd_write_command+0x4c>
    25a6:	00 00       	nop
    25a8:	85 b1       	in	r24, 0x05	; 5
    25aa:	80 73       	andi	r24, 0x30	; 48
    25ac:	c8 2b       	or	r28, r24
    25ae:	c5 b9       	out	0x05, r28	; 5
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	08 95       	ret

000025b6 <lcd_init>:
    25b6:	cf 93       	push	r28
    25b8:	c5 b1       	in	r28, 0x05	; 5
    25ba:	c0 73       	andi	r28, 0x30	; 48
    25bc:	85 b1       	in	r24, 0x05	; 5
    25be:	8f 7c       	andi	r24, 0xCF	; 207
    25c0:	80 61       	ori	r24, 0x10	; 16
    25c2:	85 b9       	out	0x05, r24	; 5
    25c4:	e1 e0       	ldi	r30, 0x01	; 1
    25c6:	f1 e0       	ldi	r31, 0x01	; 1
    25c8:	80 81       	ld	r24, Z
    25ca:	80 61       	ori	r24, 0x10	; 16
    25cc:	80 83       	st	Z, r24
    25ce:	80 81       	ld	r24, Z
    25d0:	88 60       	ori	r24, 0x08	; 8
    25d2:	80 83       	st	Z, r24
    25d4:	8d b1       	in	r24, 0x0d	; 13
    25d6:	88 60       	ori	r24, 0x08	; 8
    25d8:	8d b9       	out	0x0d, r24	; 13
    25da:	83 b3       	in	r24, 0x13	; 19
    25dc:	80 62       	ori	r24, 0x20	; 32
    25de:	83 bb       	out	0x13, r24	; 19
    25e0:	80 81       	ld	r24, Z
    25e2:	80 64       	ori	r24, 0x40	; 64
    25e4:	80 83       	st	Z, r24
    25e6:	80 81       	ld	r24, Z
    25e8:	80 62       	ori	r24, 0x20	; 32
    25ea:	80 83       	st	Z, r24
    25ec:	2f ef       	ldi	r18, 0xFF	; 255
    25ee:	81 ee       	ldi	r24, 0xE1	; 225
    25f0:	94 e0       	ldi	r25, 0x04	; 4
    25f2:	21 50       	subi	r18, 0x01	; 1
    25f4:	80 40       	sbci	r24, 0x00	; 0
    25f6:	90 40       	sbci	r25, 0x00	; 0
    25f8:	e1 f7       	brne	.-8      	; 0x25f2 <lcd_init+0x3c>
    25fa:	00 c0       	rjmp	.+0      	; 0x25fc <lcd_init+0x46>
    25fc:	00 00       	nop
    25fe:	e2 e0       	ldi	r30, 0x02	; 2
    2600:	f1 e0       	ldi	r31, 0x01	; 1
    2602:	80 81       	ld	r24, Z
    2604:	8f 7d       	andi	r24, 0xDF	; 223
    2606:	80 83       	st	Z, r24
    2608:	80 81       	ld	r24, Z
    260a:	8f 7b       	andi	r24, 0xBF	; 191
    260c:	80 83       	st	Z, r24
    260e:	80 e3       	ldi	r24, 0x30	; 48
    2610:	43 df       	rcall	.-378    	; 0x2498 <lcd_write_nibble>
    2612:	8f e1       	ldi	r24, 0x1F	; 31
    2614:	9e e4       	ldi	r25, 0x4E	; 78
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <lcd_init+0x60>
    261a:	00 c0       	rjmp	.+0      	; 0x261c <lcd_init+0x66>
    261c:	00 00       	nop
    261e:	80 e3       	ldi	r24, 0x30	; 48
    2620:	3b df       	rcall	.-394    	; 0x2498 <lcd_write_nibble>
    2622:	8f e1       	ldi	r24, 0x1F	; 31
    2624:	9e e4       	ldi	r25, 0x4E	; 78
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <lcd_init+0x70>
    262a:	00 c0       	rjmp	.+0      	; 0x262c <lcd_init+0x76>
    262c:	00 00       	nop
    262e:	80 e3       	ldi	r24, 0x30	; 48
    2630:	33 df       	rcall	.-410    	; 0x2498 <lcd_write_nibble>
    2632:	8f e1       	ldi	r24, 0x1F	; 31
    2634:	9e e4       	ldi	r25, 0x4E	; 78
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	f1 f7       	brne	.-4      	; 0x2636 <lcd_init+0x80>
    263a:	00 c0       	rjmp	.+0      	; 0x263c <lcd_init+0x86>
    263c:	00 00       	nop
    263e:	88 e2       	ldi	r24, 0x28	; 40
    2640:	2b df       	rcall	.-426    	; 0x2498 <lcd_write_nibble>
    2642:	8f ef       	ldi	r24, 0xFF	; 255
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <lcd_init+0x90>
    264a:	00 c0       	rjmp	.+0      	; 0x264c <lcd_init+0x96>
    264c:	00 00       	nop
    264e:	88 e2       	ldi	r24, 0x28	; 40
    2650:	84 df       	rcall	.-248    	; 0x255a <lcd_write_command>
    2652:	88 e0       	ldi	r24, 0x08	; 8
    2654:	82 df       	rcall	.-252    	; 0x255a <lcd_write_command>
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	80 df       	rcall	.-256    	; 0x255a <lcd_write_command>
    265a:	86 e0       	ldi	r24, 0x06	; 6
    265c:	7e df       	rcall	.-260    	; 0x255a <lcd_write_command>
    265e:	8c e0       	ldi	r24, 0x0C	; 12
    2660:	7c df       	rcall	.-264    	; 0x255a <lcd_write_command>
    2662:	85 b1       	in	r24, 0x05	; 5
    2664:	80 73       	andi	r24, 0x30	; 48
    2666:	c8 2b       	or	r28, r24
    2668:	c5 b9       	out	0x05, r28	; 5
    266a:	cf 91       	pop	r28
    266c:	08 95       	ret

0000266e <lcd_goto>:
    266e:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    2672:	80 58       	subi	r24, 0x80	; 128
    2674:	72 cf       	rjmp	.-284    	; 0x255a <lcd_write_command>
    2676:	08 95       	ret

00002678 <lcd_clrscr>:
    2678:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	6d df       	rcall	.-294    	; 0x255a <lcd_write_command>
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	e8 e5       	ldi	r30, 0x58	; 88
    2684:	f3 e0       	ldi	r31, 0x03	; 3
    2686:	04 c0       	rjmp	.+8      	; 0x2690 <lcd_clrscr+0x18>
    2688:	90 e2       	ldi	r25, 0x20	; 32
    268a:	90 83       	st	Z, r25
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	31 96       	adiw	r30, 0x01	; 1
    2690:	80 35       	cpi	r24, 0x50	; 80
    2692:	d0 f3       	brcs	.-12     	; 0x2688 <lcd_clrscr+0x10>
    2694:	08 95       	ret

00002696 <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    2696:	84 31       	cpi	r24, 0x14	; 20
    2698:	98 f0       	brcs	.+38     	; 0x26c0 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    269a:	90 ec       	ldi	r25, 0xC0	; 192
    269c:	98 0f       	add	r25, r24
    269e:	94 31       	cpi	r25, 0x14	; 20
    26a0:	10 f4       	brcc	.+4      	; 0x26a6 <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    26a2:	8c 52       	subi	r24, 0x2C	; 44
    26a4:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    26a6:	9c ee       	ldi	r25, 0xEC	; 236
    26a8:	98 0f       	add	r25, r24
    26aa:	94 31       	cpi	r25, 0x14	; 20
    26ac:	10 f4       	brcc	.+4      	; 0x26b2 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    26ae:	8c 5e       	subi	r24, 0xEC	; 236
    26b0:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    26b2:	9c ea       	ldi	r25, 0xAC	; 172
    26b4:	98 0f       	add	r25, r24
    26b6:	94 31       	cpi	r25, 0x14	; 20
    26b8:	10 f4       	brcc	.+4      	; 0x26be <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    26ba:	88 51       	subi	r24, 0x18	; 24
    26bc:	08 95       	ret
	}
	return 0xFF;
    26be:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    26c0:	08 95       	ret

000026c2 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    26c8:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    26cc:	8c 2f       	mov	r24, r28
    26ce:	e3 df       	rcall	.-58     	; 0x2696 <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    26d0:	8f 3f       	cpi	r24, 0xFF	; 255
    26d2:	31 f1       	breq	.+76     	; 0x2720 <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    26d4:	d1 3a       	cpi	r29, 0xA1	; 161
    26d6:	81 f0       	breq	.+32     	; 0x26f8 <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    26d8:	d0 38       	cpi	r29, 0x80	; 128
    26da:	81 f0       	breq	.+32     	; 0x26fc <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    26dc:	d5 3a       	cpi	r29, 0xA5	; 165
    26de:	81 f0       	breq	.+32     	; 0x2700 <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    26e0:	da 32       	cpi	r29, 0x2A	; 42
    26e2:	81 f0       	breq	.+32     	; 0x2704 <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    26e4:	d2 3e       	cpi	r29, 0xE2	; 226
    26e6:	81 f0       	breq	.+32     	; 0x2708 <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    26e8:	d5 3f       	cpi	r29, 0xF5	; 245
    26ea:	81 f0       	breq	.+32     	; 0x270c <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    26ec:	df 3e       	cpi	r29, 0xEF	; 239
    26ee:	81 f0       	breq	.+32     	; 0x2710 <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    26f0:	d1 3e       	cpi	r29, 0xE1	; 225
    26f2:	81 f0       	breq	.+32     	; 0x2714 <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    26f4:	9d 2f       	mov	r25, r29
    26f6:	0f c0       	rjmp	.+30     	; 0x2716 <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    26f8:	90 e2       	ldi	r25, 0x20	; 32
    26fa:	0d c0       	rjmp	.+26     	; 0x2716 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    26fc:	90 e2       	ldi	r25, 0x20	; 32
    26fe:	0b c0       	rjmp	.+22     	; 0x2716 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    2700:	94 e1       	ldi	r25, 0x14	; 20
    2702:	09 c0       	rjmp	.+18     	; 0x2716 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    2704:	95 e1       	ldi	r25, 0x15	; 21
    2706:	07 c0       	rjmp	.+14     	; 0x2716 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    2708:	93 e1       	ldi	r25, 0x13	; 19
    270a:	05 c0       	rjmp	.+10     	; 0x2716 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    270c:	92 e1       	ldi	r25, 0x12	; 18
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    2710:	91 e1       	ldi	r25, 0x11	; 17
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    2714:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    2716:	e8 2f       	mov	r30, r24
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	e8 5a       	subi	r30, 0xA8	; 168
    271c:	fc 4f       	sbci	r31, 0xFC	; 252
    271e:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    2720:	cf 5f       	subi	r28, 0xFF	; 255
    2722:	cf 77       	andi	r28, 0x7F	; 127
    2724:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    2728:	8d 2f       	mov	r24, r29
    272a:	f3 de       	rcall	.-538    	; 0x2512 <lcd_write_character>
}
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	fc 01       	movw	r30, r24
	if (s != NULL){
    2738:	89 2b       	or	r24, r25
    273a:	19 f4       	brne	.+6      	; 0x2742 <lcd_puts+0x10>
    273c:	07 c0       	rjmp	.+14     	; 0x274c <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    273e:	c1 df       	rcall	.-126    	; 0x26c2 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    2740:	fe 01       	movw	r30, r28
    2742:	ef 01       	movw	r28, r30
    2744:	21 96       	adiw	r28, 0x01	; 1
    2746:	80 81       	ld	r24, Z
    2748:	81 11       	cpse	r24, r1
    274a:	f9 cf       	rjmp	.-14     	; 0x273e <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    274c:	df 91       	pop	r29
    274e:	cf 91       	pop	r28
    2750:	08 95       	ret

00002752 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    2752:	cf 93       	push	r28
    2754:	df 93       	push	r29
    2756:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    2758:	89 2b       	or	r24, r25
    275a:	19 f4       	brne	.+6      	; 0x2762 <lcd_puts_P+0x10>
    275c:	07 c0       	rjmp	.+14     	; 0x276c <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    275e:	b1 df       	rcall	.-158    	; 0x26c2 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2760:	fe 01       	movw	r30, r28
    2762:	ef 01       	movw	r28, r30
    2764:	21 96       	adiw	r28, 0x01	; 1
    2766:	84 91       	lpm	r24, Z
    2768:	81 11       	cpse	r24, r1
    276a:	f9 cf       	rjmp	.-14     	; 0x275e <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	08 95       	ret

00002772 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2772:	82 ed       	ldi	r24, 0xD2	; 210
    2774:	93 e0       	ldi	r25, 0x03	; 3
    2776:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    277a:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    277e:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2782:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2786:	08 95       	ret

00002788 <log_count>:
    2788:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    278c:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2790:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    2794:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    2798:	82 17       	cp	r24, r18
    279a:	93 07       	cpc	r25, r19
    279c:	48 f0       	brcs	.+18     	; 0x27b0 <log_count+0x28>
    279e:	82 1b       	sub	r24, r18
    27a0:	93 0b       	sbc	r25, r19
    27a2:	95 95       	asr	r25
    27a4:	87 95       	ror	r24
    27a6:	9d ec       	ldi	r25, 0xCD	; 205
    27a8:	89 9f       	mul	r24, r25
    27aa:	80 2d       	mov	r24, r0
    27ac:	11 24       	eor	r1, r1
    27ae:	08 95       	ret
    27b0:	80 57       	subi	r24, 0x70	; 112
    27b2:	9e 4f       	sbci	r25, 0xFE	; 254
    27b4:	82 1b       	sub	r24, r18
    27b6:	93 0b       	sbc	r25, r19
    27b8:	95 95       	asr	r25
    27ba:	87 95       	ror	r24
    27bc:	9d ec       	ldi	r25, 0xCD	; 205
    27be:	89 9f       	mul	r24, r25
    27c0:	80 2d       	mov	r24, r0
    27c2:	11 24       	eor	r1, r1
    27c4:	08 95       	ret

000027c6 <log_getLog>:
    27c6:	cf 93       	push	r28
    27c8:	c8 2f       	mov	r28, r24
    27ca:	de df       	rcall	.-68     	; 0x2788 <log_count>
    27cc:	c8 17       	cp	r28, r24
    27ce:	f8 f4       	brcc	.+62     	; 0x280e <log_getLog+0x48>
    27d0:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    27d4:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    27d8:	8c 2f       	mov	r24, r28
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9c 01       	movw	r18, r24
    27de:	22 0f       	add	r18, r18
    27e0:	33 1f       	adc	r19, r19
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	88 0f       	add	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	28 0f       	add	r18, r24
    27f0:	39 1f       	adc	r19, r25
    27f2:	ca 01       	movw	r24, r20
    27f4:	82 0f       	add	r24, r18
    27f6:	93 1f       	adc	r25, r19
    27f8:	65 e0       	ldi	r22, 0x05	; 5
    27fa:	88 35       	cpi	r24, 0x58	; 88
    27fc:	96 07       	cpc	r25, r22
    27fe:	49 f0       	breq	.+18     	; 0x2812 <log_getLog+0x4c>
    2800:	40 f0       	brcs	.+16     	; 0x2812 <log_getLog+0x4c>
    2802:	20 59       	subi	r18, 0x90	; 144
    2804:	31 40       	sbci	r19, 0x01	; 1
    2806:	ca 01       	movw	r24, r20
    2808:	82 0f       	add	r24, r18
    280a:	93 1f       	adc	r25, r19
    280c:	02 c0       	rjmp	.+4      	; 0x2812 <log_getLog+0x4c>
    280e:	80 e0       	ldi	r24, 0x00	; 0
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	cf 91       	pop	r28
    2814:	08 95       	ret

00002816 <log_getErrorText>:
    2816:	d7 df       	rcall	.-82     	; 0x27c6 <log_getLog>
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	f1 f1       	breq	.+124    	; 0x2898 <log_getErrorText+0x82>
    281c:	fc 01       	movw	r30, r24
    281e:	36 81       	ldd	r19, Z+6	; 0x06
    2820:	67 81       	ldd	r22, Z+7	; 0x07
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	34 c0       	rjmp	.+104    	; 0x288e <log_getErrorText+0x78>
    2826:	42 2f       	mov	r20, r18
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	fa 01       	movw	r30, r20
    282c:	ee 0f       	add	r30, r30
    282e:	ff 1f       	adc	r31, r31
    2830:	cf 01       	movw	r24, r30
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	88 0f       	add	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	e8 0f       	add	r30, r24
    2840:	f9 1f       	adc	r31, r25
    2842:	e6 59       	subi	r30, 0x96	; 150
    2844:	fe 4f       	sbci	r31, 0xFE	; 254
    2846:	84 91       	lpm	r24, Z
    2848:	38 13       	cpse	r19, r24
    284a:	20 c0       	rjmp	.+64     	; 0x288c <log_getErrorText+0x76>
    284c:	fa 01       	movw	r30, r20
    284e:	ee 0f       	add	r30, r30
    2850:	ff 1f       	adc	r31, r31
    2852:	cf 01       	movw	r24, r30
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	88 0f       	add	r24, r24
    285e:	99 1f       	adc	r25, r25
    2860:	e8 0f       	add	r30, r24
    2862:	f9 1f       	adc	r31, r25
    2864:	e5 59       	subi	r30, 0x95	; 149
    2866:	fe 4f       	sbci	r31, 0xFE	; 254
    2868:	84 91       	lpm	r24, Z
    286a:	68 13       	cpse	r22, r24
    286c:	0f c0       	rjmp	.+30     	; 0x288c <log_getErrorText+0x76>
    286e:	44 0f       	add	r20, r20
    2870:	55 1f       	adc	r21, r21
    2872:	ca 01       	movw	r24, r20
    2874:	88 0f       	add	r24, r24
    2876:	99 1f       	adc	r25, r25
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	88 0f       	add	r24, r24
    287e:	99 1f       	adc	r25, r25
    2880:	48 0f       	add	r20, r24
    2882:	59 1f       	adc	r21, r25
    2884:	ca 01       	movw	r24, r20
    2886:	84 59       	subi	r24, 0x94	; 148
    2888:	9e 4f       	sbci	r25, 0xFE	; 254
    288a:	08 95       	ret
    288c:	2f 5f       	subi	r18, 0xFF	; 255
    288e:	20 31       	cpi	r18, 0x10	; 16
    2890:	50 f2       	brcs	.-108    	; 0x2826 <log_getErrorText+0x10>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	08 95       	ret
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	08 95       	ret

0000289e <logCheckUnreadErrorLogs>:
    289e:	cf 93       	push	r28
    28a0:	73 df       	rcall	.-282    	; 0x2788 <log_count>
    28a2:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    28a6:	81 11       	cpse	r24, r1
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <logCheckUnreadErrorLogs+0x34>
    28aa:	17 c0       	rjmp	.+46     	; 0x28da <logCheckUnreadErrorLogs+0x3c>
    28ac:	8c 2f       	mov	r24, r28
    28ae:	8b df       	rcall	.-234    	; 0x27c6 <log_getLog>
    28b0:	00 97       	sbiw	r24, 0x00	; 0
    28b2:	61 f0       	breq	.+24     	; 0x28cc <logCheckUnreadErrorLogs+0x2e>
    28b4:	fc 01       	movw	r30, r24
    28b6:	24 81       	ldd	r18, Z+4	; 0x04
    28b8:	20 32       	cpi	r18, 0x20	; 32
    28ba:	51 f0       	breq	.+20     	; 0x28d0 <logCheckUnreadErrorLogs+0x32>
    28bc:	95 81       	ldd	r25, Z+5	; 0x05
    28be:	8c 2f       	mov	r24, r28
    28c0:	95 34       	cpi	r25, 0x45	; 69
    28c2:	39 f4       	brne	.+14     	; 0x28d2 <logCheckUnreadErrorLogs+0x34>
    28c4:	8f ef       	ldi	r24, 0xFF	; 255
    28c6:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    28ca:	07 c0       	rjmp	.+14     	; 0x28da <logCheckUnreadErrorLogs+0x3c>
    28cc:	8c 2f       	mov	r24, r28
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <logCheckUnreadErrorLogs+0x34>
    28d0:	8c 2f       	mov	r24, r28
    28d2:	cf ef       	ldi	r28, 0xFF	; 255
    28d4:	c8 0f       	add	r28, r24
    28d6:	81 11       	cpse	r24, r1
    28d8:	e9 cf       	rjmp	.-46     	; 0x28ac <logCheckUnreadErrorLogs+0xe>
    28da:	cf 91       	pop	r28
    28dc:	08 95       	ret

000028de <log_getShortTextFromPtr>:
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	00 97       	sbiw	r24, 0x00	; 0
    28e6:	09 f4       	brne	.+2      	; 0x28ea <log_getShortTextFromPtr+0xc>
    28e8:	7b c0       	rjmp	.+246    	; 0x29e0 <log_getShortTextFromPtr+0x102>
    28ea:	16 2f       	mov	r17, r22
    28ec:	ec 01       	movw	r28, r24
    28ee:	8b 81       	ldd	r24, Y+3	; 0x03
    28f0:	88 23       	and	r24, r24
    28f2:	79 f0       	breq	.+30     	; 0x2912 <log_getShortTextFromPtr+0x34>
    28f4:	6a ea       	ldi	r22, 0xAA	; 170
    28f6:	73 e0       	ldi	r23, 0x03	; 3
    28f8:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    28fc:	bc 01       	movw	r22, r24
    28fe:	6f 5f       	subi	r22, 0xFF	; 255
    2900:	7f 4f       	sbci	r23, 0xFF	; 255
    2902:	28 e6       	ldi	r18, 0x68	; 104
    2904:	fc 01       	movw	r30, r24
    2906:	20 83       	st	Z, r18
    2908:	8a 81       	ldd	r24, Y+2	; 0x02
    290a:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    290e:	dc 01       	movw	r26, r24
    2910:	2f c0       	rjmp	.+94     	; 0x2970 <log_getShortTextFromPtr+0x92>
    2912:	8a 81       	ldd	r24, Y+2	; 0x02
    2914:	88 23       	and	r24, r24
    2916:	79 f0       	breq	.+30     	; 0x2936 <log_getShortTextFromPtr+0x58>
    2918:	6a ea       	ldi	r22, 0xAA	; 170
    291a:	73 e0       	ldi	r23, 0x03	; 3
    291c:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    2920:	bc 01       	movw	r22, r24
    2922:	6f 5f       	subi	r22, 0xFF	; 255
    2924:	7f 4f       	sbci	r23, 0xFF	; 255
    2926:	2d e6       	ldi	r18, 0x6D	; 109
    2928:	fc 01       	movw	r30, r24
    292a:	20 83       	st	Z, r18
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    2932:	dc 01       	movw	r26, r24
    2934:	1d c0       	rjmp	.+58     	; 0x2970 <log_getShortTextFromPtr+0x92>
    2936:	6a ea       	ldi	r22, 0xAA	; 170
    2938:	73 e0       	ldi	r23, 0x03	; 3
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    2940:	fc 01       	movw	r30, r24
    2942:	83 e7       	ldi	r24, 0x73	; 115
    2944:	80 83       	st	Z, r24
    2946:	98 81       	ld	r25, Y
    2948:	99 0f       	add	r25, r25
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <log_getShortTextFromPtr+0x74>
    294e:	99 51       	subi	r25, 0x19	; 25
    2950:	2f 5f       	subi	r18, 0xFF	; 255
    2952:	99 31       	cpi	r25, 0x19	; 25
    2954:	e0 f7       	brcc	.-8      	; 0x294e <log_getShortTextFromPtr+0x70>
    2956:	20 5d       	subi	r18, 0xD0	; 208
    2958:	21 83       	std	Z+1, r18	; 0x01
    295a:	99 0f       	add	r25, r25
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <log_getShortTextFromPtr+0x86>
    2960:	95 50       	subi	r25, 0x05	; 5
    2962:	2f 5f       	subi	r18, 0xFF	; 255
    2964:	95 30       	cpi	r25, 0x05	; 5
    2966:	e0 f7       	brcc	.-8      	; 0x2960 <log_getShortTextFromPtr+0x82>
    2968:	df 01       	movw	r26, r30
    296a:	13 96       	adiw	r26, 0x03	; 3
    296c:	20 5d       	subi	r18, 0xD0	; 208
    296e:	22 83       	std	Z+2, r18	; 0x02
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	90 34       	cpi	r25, 0x40	; 64
    2974:	51 f0       	breq	.+20     	; 0x298a <log_getShortTextFromPtr+0xac>
    2976:	90 38       	cpi	r25, 0x80	; 128
    2978:	19 f0       	breq	.+6      	; 0x2980 <log_getShortTextFromPtr+0xa2>
    297a:	90 32       	cpi	r25, 0x20	; 32
    297c:	81 f4       	brne	.+32     	; 0x299e <log_getShortTextFromPtr+0xc0>
    297e:	0a c0       	rjmp	.+20     	; 0x2994 <log_getShortTextFromPtr+0xb6>
    2980:	fd 01       	movw	r30, r26
    2982:	31 96       	adiw	r30, 0x01	; 1
    2984:	8a e2       	ldi	r24, 0x2A	; 42
    2986:	8c 93       	st	X, r24
    2988:	0e c0       	rjmp	.+28     	; 0x29a6 <log_getShortTextFromPtr+0xc8>
    298a:	fd 01       	movw	r30, r26
    298c:	31 96       	adiw	r30, 0x01	; 1
    298e:	85 ea       	ldi	r24, 0xA5	; 165
    2990:	8c 93       	st	X, r24
    2992:	09 c0       	rjmp	.+18     	; 0x29a6 <log_getShortTextFromPtr+0xc8>
    2994:	fd 01       	movw	r30, r26
    2996:	31 96       	adiw	r30, 0x01	; 1
    2998:	80 e2       	ldi	r24, 0x20	; 32
    299a:	8c 93       	st	X, r24
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <log_getShortTextFromPtr+0xc8>
    299e:	fd 01       	movw	r30, r26
    29a0:	31 96       	adiw	r30, 0x01	; 1
    29a2:	8f e3       	ldi	r24, 0x3F	; 63
    29a4:	8c 93       	st	X, r24
    29a6:	bf 01       	movw	r22, r30
    29a8:	6f 5f       	subi	r22, 0xFF	; 255
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	80 83       	st	Z, r24
    29b0:	8e 81       	ldd	r24, Y+6	; 0x06
    29b2:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    29b6:	bc 01       	movw	r22, r24
    29b8:	8f 81       	ldd	r24, Y+7	; 0x07
    29ba:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    29be:	bc 01       	movw	r22, r24
    29c0:	6f 5f       	subi	r22, 0xFF	; 255
    29c2:	7f 4f       	sbci	r23, 0xFF	; 255
    29c4:	2d e2       	ldi	r18, 0x2D	; 45
    29c6:	fc 01       	movw	r30, r24
    29c8:	20 83       	st	Z, r18
    29ca:	88 85       	ldd	r24, Y+8	; 0x08
    29cc:	99 85       	ldd	r25, Y+9	; 0x09
    29ce:	0e 94 2d 3b 	call	0x765a	; 0x765a <putChar_long>
    29d2:	fc 01       	movw	r30, r24
    29d4:	10 82       	st	Z, r1
    29d6:	1f 3f       	cpi	r17, 0xFF	; 255
    29d8:	41 f0       	breq	.+16     	; 0x29ea <log_getShortTextFromPtr+0x10c>
    29da:	1c 83       	std	Y+4, r17	; 0x04
    29dc:	60 df       	rcall	.-320    	; 0x289e <logCheckUnreadErrorLogs>
    29de:	05 c0       	rjmp	.+10     	; 0x29ea <log_getShortTextFromPtr+0x10c>
    29e0:	ea ea       	ldi	r30, 0xAA	; 170
    29e2:	f3 e0       	ldi	r31, 0x03	; 3
    29e4:	8d e2       	ldi	r24, 0x2D	; 45
    29e6:	80 83       	st	Z, r24
    29e8:	11 82       	std	Z+1, r1	; 0x01
    29ea:	8a ea       	ldi	r24, 0xAA	; 170
    29ec:	93 e0       	ldi	r25, 0x03	; 3
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	1f 91       	pop	r17
    29f4:	08 95       	ret

000029f6 <log_put>:
    29f6:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    29fa:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29fe:	a1 e4       	ldi	r26, 0x41	; 65
    2a00:	b2 e0       	ldi	r27, 0x02	; 2
    2a02:	9c 91       	ld	r25, X
    2a04:	90 83       	st	Z, r25
    2a06:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2a0a:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a0e:	11 96       	adiw	r26, 0x01	; 1
    2a10:	9c 91       	ld	r25, X
    2a12:	11 97       	sbiw	r26, 0x01	; 1
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2a1a:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a1e:	12 96       	adiw	r26, 0x02	; 2
    2a20:	9c 91       	ld	r25, X
    2a22:	12 97       	sbiw	r26, 0x02	; 2
    2a24:	92 83       	std	Z+2, r25	; 0x02
    2a26:	13 96       	adiw	r26, 0x03	; 3
    2a28:	9c 91       	ld	r25, X
    2a2a:	93 83       	std	Z+3, r25	; 0x03
    2a2c:	25 83       	std	Z+5, r18	; 0x05
    2a2e:	86 83       	std	Z+6, r24	; 0x06
    2a30:	67 83       	std	Z+7, r22	; 0x07
    2a32:	51 87       	std	Z+9, r21	; 0x09
    2a34:	40 87       	std	Z+8, r20	; 0x08
    2a36:	80 e8       	ldi	r24, 0x80	; 128
    2a38:	84 83       	std	Z+4, r24	; 0x04
    2a3a:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    2a3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a40:	81 f4       	brne	.+32     	; 0x2a62 <log_put+0x6c>
    2a42:	84 e6       	ldi	r24, 0x64	; 100
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    2a4a:	6f ef       	ldi	r22, 0xFF	; 255
    2a4c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2a50:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a54:	44 df       	rcall	.-376    	; 0x28de <log_getShortTextFromPtr>
    2a56:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    2a5a:	8e e3       	ldi	r24, 0x3E	; 62
    2a5c:	93 e1       	ldi	r25, 0x13	; 19
    2a5e:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    2a62:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2a66:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a6a:	0a 96       	adiw	r24, 0x0a	; 10
    2a6c:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2a70:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2a74:	88 55       	subi	r24, 0x58	; 88
    2a76:	95 40       	sbci	r25, 0x05	; 5
    2a78:	39 f0       	breq	.+14     	; 0x2a88 <log_put+0x92>
    2a7a:	30 f0       	brcs	.+12     	; 0x2a88 <log_put+0x92>
    2a7c:	82 ed       	ldi	r24, 0xD2	; 210
    2a7e:	93 e0       	ldi	r25, 0x03	; 3
    2a80:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2a84:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2a88:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    2a8c:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a90:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    2a94:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    2a98:	28 17       	cp	r18, r24
    2a9a:	39 07       	cpc	r19, r25
    2a9c:	79 f4       	brne	.+30     	; 0x2abc <log_put+0xc6>
    2a9e:	0a 96       	adiw	r24, 0x0a	; 10
    2aa0:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2aa4:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2aa8:	88 55       	subi	r24, 0x58	; 88
    2aaa:	95 40       	sbci	r25, 0x05	; 5
    2aac:	39 f0       	breq	.+14     	; 0x2abc <log_put+0xc6>
    2aae:	30 f0       	brcs	.+12     	; 0x2abc <log_put+0xc6>
    2ab0:	82 ed       	ldi	r24, 0xD2	; 210
    2ab2:	93 e0       	ldi	r25, 0x03	; 3
    2ab4:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2ab8:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2abc:	08 95       	ret

00002abe <log_putError>:
    2abe:	25 e4       	ldi	r18, 0x45	; 69
    2ac0:	9a df       	rcall	.-204    	; 0x29f6 <log_put>
    2ac2:	8f ef       	ldi	r24, 0xFF	; 255
    2ac4:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    2ac8:	08 95       	ret

00002aca <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2aca:	cf 93       	push	r28
    2acc:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2ace:	7b de       	rcall	.-778    	; 0x27c6 <log_getLog>
	if (pLogEntry != NULL){
    2ad0:	00 97       	sbiw	r24, 0x00	; 0
    2ad2:	19 f0       	breq	.+6      	; 0x2ada <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2ad4:	6c 2f       	mov	r22, r28
    2ad6:	03 df       	rcall	.-506    	; 0x28de <log_getShortTextFromPtr>
    2ad8:	06 c0       	rjmp	.+12     	; 0x2ae6 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2ada:	ea ea       	ldi	r30, 0xAA	; 170
    2adc:	f3 e0       	ldi	r31, 0x03	; 3
    2ade:	8d e2       	ldi	r24, 0x2D	; 45
    2ae0:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2ae2:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2ae4:	cf 01       	movw	r24, r30
	}
    2ae6:	cf 91       	pop	r28
    2ae8:	08 95       	ret

00002aea <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2aea:	b6 dc       	rcall	.-1684   	; 0x2458 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2aec:	85 b1       	in	r24, 0x05	; 5
    2aee:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();
    2af0:	85 b9       	out	0x05, r24	; 5
    2af2:	3f de       	rcall	.-898    	; 0x2772 <init_log>
	init_Serial0SerUSB();
    2af4:	0e 94 23 38 	call	0x7046	; 0x7046 <init_Serial0SerUSB>
	init_message();
    2af8:	0e 94 2a 2d 	call	0x5a54	; 0x5a54 <init_message>
	init_HwTimer();
	init_Timers();
    2afc:	35 d8       	rcall	.-3990   	; 0x1b68 <init_HwTimer>
    2afe:	1c d8       	rcall	.-4040   	; 0x1b38 <init_Timers>
	init_ADC();
    2b00:	42 d8       	rcall	.-3964   	; 0x1b86 <init_ADC>
	init_Pipe();
    2b02:	6b d8       	rcall	.-3882   	; 0x1bda <init_Pipe>
    2b04:	0e 94 64 36 	call	0x6cc8	; 0x6cc8 <init_Serial1MIDI>
	init_Serial1MIDI();
    2b08:	90 d8       	rcall	.-3808   	; 0x1c2a <init_PipeModules>
	init_PipeModules();
    2b0a:	0e 94 9b 31 	call	0x6336	; 0x6336 <init_Midi2Manual>
	init_Midi2Manual();
    2b0e:	0e 94 db 31 	call	0x63b6	; 0x63b6 <init_Manual2Midi>
	init_Manual2Midi();
    2b12:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <init_Midi>
	init_Midi();
    2b16:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <init_Registers>
	init_Registers();
    2b1a:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <init_Manual2Module>
	init_Manual2Module();
    2b1e:	0e 94 cb 2b 	call	0x5796	; 0x5796 <init_SoftKeys>
	init_SoftKeys();
    2b22:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2b26:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	INIT_MENU
    2b2a:	45 dd       	rcall	.-1398   	; 0x25b6 <lcd_init>


	// BOOT MESSAGE

	lcd_init ();
    2b2c:	0e 94 38 3a 	call	0x7470	; 0x7470 <lcd_initCG>
	lcd_initCG();
	lcd_clrscr ();
    2b30:	a3 dd       	rcall	.-1210   	; 0x2678 <lcd_clrscr>
    2b32:	83 e4       	ldi	r24, 0x43	; 67
	lcd_goto(LCD_LINE1+3);
    2b34:	9c dd       	rcall	.-1224   	; 0x266e <lcd_goto>
    2b36:	85 ea       	ldi	r24, 0xA5	; 165
	lcd_puts_P(prog_name);
    2b38:	92 e0       	ldi	r25, 0x02	; 2
    2b3a:	0b de       	rcall	.-1002   	; 0x2752 <lcd_puts_P>
    2b3c:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_goto(LCD_LINE2+7);
    2b3e:	97 dd       	rcall	.-1234   	; 0x266e <lcd_goto>
    2b40:	8e e9       	ldi	r24, 0x9E	; 158
    2b42:	92 e1       	ldi	r25, 0x12	; 18
	lcd_puts_P(sw_version);
    2b44:	06 de       	rcall	.-1012   	; 0x2752 <lcd_puts_P>
    2b46:	78 94       	sei
    2b48:	2f ef       	ldi	r18, 0xFF	; 255
    2b4a:	47 e9       	ldi	r20, 0x97	; 151
	sei();
    2b4c:	8a e3       	ldi	r24, 0x3A	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b4e:	21 50       	subi	r18, 0x01	; 1
    2b50:	40 40       	sbci	r20, 0x00	; 0
    2b52:	80 40       	sbci	r24, 0x00	; 0
    2b54:	e1 f7       	brne	.-8      	; 0x2b4e <main+0x64>
    2b56:	00 c0       	rjmp	.+0      	; 0x2b58 <main+0x6e>
    2b58:	00 00       	nop
    2b5a:	0e 94 f6 38 	call	0x71ec	; 0x71ec <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2b5e:	8c dd       	rcall	.-1256   	; 0x2678 <lcd_clrscr>
	lcd_clrscr ();
    2b60:	a8 d9       	rcall	.-3248   	; 0x1eb2 <module_StartPowerOn>
    2b62:	8f ef       	ldi	r24, 0xFF	; 255

	// TURN ON POWER

	module_StartPowerOn();
    2b64:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    2b68:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2b6c:	8e ef       	ldi	r24, 0xFE	; 254

	menuNotActive = TRUE;
    2b6e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2b72:	df ef       	ldi	r29, 0xFF	; 255
    2b74:	85 b1       	in	r24, 0x05	; 5
    2b76:	8f 7c       	andi	r24, 0xCF	; 207
	module_StartPowerOn();
	MESSAGE_PIPE_HANDLING_ON

	menuNotActive = TRUE;
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2b78:	85 b9       	out	0x05, r24	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		DEBUG_OUT_MAIN
    2b7a:	20 91 fe 13 	lds	r18, 0x13FE	; 0x8013fe <serESPRxInIndex>
    2b7e:	30 91 ff 13 	lds	r19, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2b82:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    2b86:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
    2b8a:	28 17       	cp	r18, r24
    2b8c:	39 07       	cpc	r19, r25
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <main+0xa8>
    2b90:	66 c0       	rjmp	.+204    	; 0x2c5e <main+0x174>
    2b92:	0e 94 60 39 	call	0x72c0	; 0x72c0 <serial3SER_ESPReadRx>
    2b96:	c8 2f       	mov	r28, r24
			uint8_t esp_message = serial3SER_ESPReadRx();
    2b98:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
    2b9c:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    2ba0:	8f e7       	ldi	r24, 0x7F	; 127
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2ba2:	8c 0f       	add	r24, r28
    2ba4:	86 30       	cpi	r24, 0x06	; 6
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2ba6:	28 f4       	brcc	.+10     	; 0x2bb2 <main+0xc8>
    2ba8:	80 e8       	ldi	r24, 0x80	; 128
    2baa:	8c 0f       	add	r24, r28
    2bac:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <message_push>
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2bb0:	56 c0       	rjmp	.+172    	; 0x2c5e <main+0x174>
    2bb2:	c0 39       	cpi	r28, 0x90	; 144
    2bb4:	09 f0       	breq	.+2      	; 0x2bb8 <main+0xce>
    2bb6:	53 c0       	rjmp	.+166    	; 0x2c5e <main+0x174>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2bb8:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <serESPInBuffer>
    2bbc:	80 39       	cpi	r24, 0x90	; 144
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2bbe:	09 f0       	breq	.+2      	; 0x2bc2 <main+0xd8>
    2bc0:	4e c0       	rjmp	.+156    	; 0x2c5e <main+0x174>
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	e9 2f       	mov	r30, r25
    2bc6:	09 2e       	mov	r0, r25
    2bc8:	00 0c       	add	r0, r0
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2bca:	ff 0b       	sbc	r31, r31
    2bcc:	ef 50       	subi	r30, 0x0F	; 15
    2bce:	fc 4e       	sbci	r31, 0xEC	; 236
    2bd0:	80 81       	ld	r24, Z
    2bd2:	8d 33       	cpi	r24, 0x3D	; 61
    2bd4:	19 f0       	breq	.+6      	; 0x2bdc <main+0xf2>
    2bd6:	9f 5f       	subi	r25, 0xFF	; 255
    2bd8:	98 30       	cpi	r25, 0x08	; 8
    2bda:	a4 f3       	brlt	.-24     	; 0x2bc4 <main+0xda>
							break;
						}
						i++;
    2bdc:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2bde:	0c f0       	brlt	.+2      	; 0x2be2 <main+0xf8>
    2be0:	3e c0       	rjmp	.+124    	; 0x2c5e <main+0x174>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2be2:	89 2f       	mov	r24, r25
    2be4:	85 95       	asr	r24
    2be6:	20 e0       	ldi	r18, 0x00	; 0
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2be8:	06 c0       	rjmp	.+12     	; 0x2bf6 <main+0x10c>
    2bea:	e2 2f       	mov	r30, r18
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	e5 5b       	subi	r30, 0xB5	; 181
							serESPMidiTmp[j] = 0;
    2bf0:	f9 4e       	sbci	r31, 0xE9	; 233
    2bf2:	10 82       	st	Z, r1
    2bf4:	2f 5f       	subi	r18, 0xFF	; 255
    2bf6:	23 30       	cpi	r18, 0x03	; 3
    2bf8:	c0 f3       	brcs	.-16     	; 0x2bea <main+0x100>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2bfa:	2c c0       	rjmp	.+88     	; 0x2c54 <main+0x16a>
    2bfc:	e9 2f       	mov	r30, r25
    2bfe:	09 2e       	mov	r0, r25
    2c00:	00 0c       	add	r0, r0
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2c02:	ff 0b       	sbc	r31, r31
    2c04:	ef 50       	subi	r30, 0x0F	; 15
    2c06:	fc 4e       	sbci	r31, 0xEC	; 236
    2c08:	30 81       	ld	r19, Z
    2c0a:	20 ed       	ldi	r18, 0xD0	; 208
    2c0c:	23 0f       	add	r18, r19
    2c0e:	2a 30       	cpi	r18, 0x0A	; 10
    2c10:	10 f0       	brcs	.+4      	; 0x2c16 <main+0x12c>
    2c12:	27 ed       	ldi	r18, 0xD7	; 215
							if (asciiData > 9){
    2c14:	23 0f       	add	r18, r19
    2c16:	a2 2f       	mov	r26, r18
								asciiData = asciiData - (0x0A - 'A' + '0');
    2c18:	af 70       	andi	r26, 0x0F	; 15
    2c1a:	eb e4       	ldi	r30, 0x4B	; 75
							}
							asciiData &= 0x0F;
    2c1c:	f6 e1       	ldi	r31, 0x16	; 22
    2c1e:	62 81       	ldd	r22, Z+2	; 0x02
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2c20:	20 e1       	ldi	r18, 0x10	; 16
    2c22:	62 9f       	mul	r22, r18
    2c24:	b0 01       	movw	r22, r0
    2c26:	11 24       	eor	r1, r1
    2c28:	41 81       	ldd	r20, Z+1	; 0x01
    2c2a:	24 2f       	mov	r18, r20
    2c2c:	22 95       	swap	r18
    2c2e:	2f 70       	andi	r18, 0x0F	; 15
    2c30:	62 2b       	or	r22, r18
    2c32:	62 83       	std	Z+2, r22	; 0x02
    2c34:	20 e1       	ldi	r18, 0x10	; 16
    2c36:	42 9f       	mul	r20, r18
    2c38:	a0 01       	movw	r20, r0
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2c3a:	11 24       	eor	r1, r1
    2c3c:	20 81       	ld	r18, Z
    2c3e:	32 2f       	mov	r19, r18
    2c40:	32 95       	swap	r19
    2c42:	3f 70       	andi	r19, 0x0F	; 15
    2c44:	43 2b       	or	r20, r19
    2c46:	41 83       	std	Z+1, r20	; 0x01
    2c48:	40 e1       	ldi	r20, 0x10	; 16
    2c4a:	24 9f       	mul	r18, r20
    2c4c:	90 01       	movw	r18, r0
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2c4e:	11 24       	eor	r1, r1
    2c50:	2a 2b       	or	r18, r26
    2c52:	20 83       	st	Z, r18
    2c54:	91 50       	subi	r25, 0x01	; 1
    2c56:	19 16       	cp	r1, r25
    2c58:	8c f2       	brlt	.-94     	; 0x2bfc <main+0x112>
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2c5a:	0e 94 31 35 	call	0x6a62	; 0x6a62 <proc_ESPmidi>
    2c5e:	0e 94 5e 2d 	call	0x5abc	; 0x5abc <message_status>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2c62:	88 23       	and	r24, r24
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <main+0x17e>
    2c66:	51 c0       	rjmp	.+162    	; 0x2d0a <main+0x220>
    2c68:	85 b1       	in	r24, 0x05	; 5
    2c6a:	80 63       	ori	r24, 0x30	; 48
    2c6c:	85 b9       	out	0x05, r24	; 5
			DEBUG_OUT_MENU
    2c6e:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <message_get>
    2c72:	c8 2f       	mov	r28, r24
			uint8_t keyMessage = message_get();
    2c74:	86 38       	cpi	r24, 0x86	; 134
    2c76:	b9 f4       	brne	.+46     	; 0x2ca6 <main+0x1bc>
    2c78:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
				// PANIC BUTTON
				midiSendAllNotesOff();
    2c7c:	0e 94 0a 34 	call	0x6814	; 0x6814 <midi_AllManualsOff>
				midi_AllManualsOff();
    2c80:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <midi_resetRegisters>
				midi_resetRegisters();
    2c84:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <midi_CouplerReset>
				midi_CouplerReset();
    2c88:	74 dd       	rcall	.-1304   	; 0x2772 <init_log>
    2c8a:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
				init_log(); // clear log V 0.70
    2c8e:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    2c92:	85 b1       	in	r24, 0x05	; 5
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    2c94:	80 64       	ori	r24, 0x40	; 64
    2c96:	85 b9       	out	0x05, r24	; 5
				POWER_ON
    2c98:	83 e1       	ldi	r24, 0x13	; 19
    2c9a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    2c9e:	8a e8       	ldi	r24, 0x8A	; 138
    2ca0:	92 e0       	ldi	r25, 0x02	; 2
    2ca2:	0e 94 b0 2a 	call	0x5560	; 0x5560 <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2ca6:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    2caa:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (menuNotActive == TRUE) {
    2cac:	f9 f4       	brne	.+62     	; 0x2cec <main+0x202>
    2cae:	8c 2f       	mov	r24, r28
    2cb0:	8f 73       	andi	r24, 0x3F	; 63
    2cb2:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2cb4:	69 f4       	brne	.+26     	; 0x2cd0 <main+0x1e6>
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <menu_Init>
    2cc2:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <menu_InitLCD>
					menu_InitLCD(); //display menu
    2cc6:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	48 d9       	rcall	.-3440   	; 0x1f5e <softKey_WantLong>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2cce:	1d c0       	rjmp	.+58     	; 0x2d0a <main+0x220>
    2cd0:	9f ef       	ldi	r25, 0xFF	; 255
    2cd2:	98 0f       	add	r25, r24
    2cd4:	94 30       	cpi	r25, 0x04	; 4
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2cd6:	c8 f4       	brcc	.+50     	; 0x2d0a <main+0x220>
    2cd8:	0e 94 8f 2c 	call	0x591e	; 0x591e <softKey_MessageKey_ToSoftKeyNr>
    2cdc:	6c 2f       	mov	r22, r28
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2cde:	0e 94 a4 2c 	call	0x5948	; 0x5948 <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2ce2:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2ce6:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <softKeys_toLCD>
    2cea:	0f c0       	rjmp	.+30     	; 0x2d0a <main+0x220>
					softKeys_toLCD();
    2cec:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2cf0:	81 11       	cpse	r24, r1
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2cf2:	06 c0       	rjmp	.+12     	; 0x2d00 <main+0x216>
    2cf4:	8c 2f       	mov	r24, r28
    2cf6:	0e 94 f3 26 	call	0x4de6	; 0x4de6 <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2cfa:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2cfe:	05 c0       	rjmp	.+10     	; 0x2d0a <main+0x220>
    2d00:	8d ef       	ldi	r24, 0xFD	; 253
    2d02:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2d06:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2d0a:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    2d0e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d10:	69 f4       	brne	.+26     	; 0x2d2c <main+0x242>
    2d12:	df 3f       	cpi	r29, 0xFF	; 255
    2d14:	61 f4       	brne	.+24     	; 0x2d2e <main+0x244>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2d16:	0e 94 3a 26 	call	0x4c74	; 0x4c74 <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2d1a:	0e 94 50 2c 	call	0x58a0	; 0x58a0 <softKeys_toLCD>
				softKeys_toLCD();
    2d1e:	8f ef       	ldi	r24, 0xFF	; 255
    2d20:	1e d9       	rcall	.-3524   	; 0x1f5e <softKey_WantLong>
				softKey_WantLong(TRUE);
    2d22:	8f ef       	ldi	r24, 0xFF	; 255
    2d24:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
				prog_UpdDisplay = TRUE; // update program display 
    2d28:	d0 e0       	ldi	r29, 0x00	; 0
    2d2a:	01 c0       	rjmp	.+2      	; 0x2d2e <main+0x244>
    2d2c:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2d2e:	85 b1       	in	r24, 0x05	; 5
    2d30:	8f 7c       	andi	r24, 0xCF	; 207
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2d32:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MAIN
    2d34:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
    2d38:	81 11       	cpse	r24, r1
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2d3a:	0b c0       	rjmp	.+22     	; 0x2d52 <main+0x268>
    2d3c:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2d40:	0e 94 9f 2a 	call	0x553e	; 0x553e <menu_deleteMessage>
				menu_deleteMessage();
    2d44:	cf ef       	ldi	r28, 0xFF	; 255
    2d46:	c0 93 0f 08 	sts	0x080F, r28	; 0x80080f <prog_UpdDisplay>
				prog_UpdDisplay = TRUE; // to update reg display
    2d4a:	81 2f       	mov	r24, r17
    2d4c:	90 dc       	rcall	.-1760   	; 0x266e <lcd_goto>
				lcd_goto(saveCursor);
    2d4e:	c0 93 3d 02 	sts	0x023D, r28	; 0x80023d <swTimer+0xe>
    2d52:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2d56:	81 11       	cpse	r24, r1
    2d58:	0a c0       	rjmp	.+20     	; 0x2d6e <main+0x284>
    2d5a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2d5e:	88 23       	and	r24, r24
    2d60:	19 f0       	breq	.+6      	; 0x2d68 <main+0x27e>
    2d62:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <main+0x284>
    2d68:	8f ef       	ldi	r24, 0xFF	; 255
    2d6a:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2d6e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    2d72:	81 11       	cpse	r24, r1
    2d74:	1a c0       	rjmp	.+52     	; 0x2daa <main+0x2c0>
    2d76:	ad d8       	rcall	.-3750   	; 0x1ed2 <module_PowerControl>
			module_PowerControl();
    2d78:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <menu_showPowerState>
			menu_showPowerState();
    2d7c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			if (menuNotActive == TRUE) {
    2d80:	8f 3f       	cpi	r24, 0xFF	; 255
    2d82:	99 f4       	brne	.+38     	; 0x2daa <main+0x2c0>
    2d84:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2d88:	84 e1       	ldi	r24, 0x14	; 20
				lcd_goto(LCD_LINE2);
    2d8a:	71 dc       	rcall	.-1822   	; 0x266e <lcd_goto>
    2d8c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	21 f4       	brne	.+8      	; 0x2d9c <main+0x2b2>
    2d94:	83 e9       	ldi	r24, 0x93	; 147
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2d96:	92 e0       	ldi	r25, 0x02	; 2
    2d98:	dc dc       	rcall	.-1608   	; 0x2752 <lcd_puts_P>
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <main+0x2bc>
    2d9c:	82 31       	cpi	r24, 0x12	; 18
    2d9e:	19 f4       	brne	.+6      	; 0x2da6 <main+0x2bc>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2da0:	84 e1       	ldi	r24, 0x14	; 20
    2da2:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2da6:	8c 2f       	mov	r24, r28
    2da8:	62 dc       	rcall	.-1852   	; 0x266e <lcd_goto>
				}
				lcd_goto(saveCursor);
    2daa:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2dae:	9f e7       	ldi	r25, 0x7F	; 127
    2db0:	98 0f       	add	r25, r24
    2db2:	96 30       	cpi	r25, 0x06	; 6
    2db4:	10 f0       	brcs	.+4      	; 0x2dba <main+0x2d0>
    2db6:	8e 3f       	cpi	r24, 0xFE	; 254
    2db8:	09 f5       	brne	.+66     	; 0x2dfc <main+0x312>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2dba:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2dbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2dc0:	31 f4       	brne	.+12     	; 0x2dce <main+0x2e4>
    2dc2:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2dc6:	67 dc       	rcall	.-1842   	; 0x2696 <getCursorFromLCDRAMcursor>
    2dc8:	0e 94 2a 39 	call	0x7254	; 0x7254 <serial3SER_ESPSend>
    2dcc:	03 c0       	rjmp	.+6      	; 0x2dd4 <main+0x2ea>
    2dce:	8f e7       	ldi	r24, 0x7F	; 127
    2dd0:	0e 94 2a 39 	call	0x7254	; 0x7254 <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2dd4:	81 e8       	ldi	r24, 0x81	; 129
    2dd6:	0e 94 2a 39 	call	0x7254	; 0x7254 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2dda:	c0 e0       	ldi	r28, 0x00	; 0
    2ddc:	e8 e5       	ldi	r30, 0x58	; 88
    2dde:	f3 e0       	ldi	r31, 0x03	; 3
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2de0:	08 c0       	rjmp	.+16     	; 0x2df2 <main+0x308>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2de2:	8f 01       	movw	r16, r30
    2de4:	0f 5f       	subi	r16, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2de6:	1f 4f       	sbci	r17, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    2de8:	80 81       	ld	r24, Z
    2dea:	0e 94 2a 39 	call	0x7254	; 0x7254 <serial3SER_ESPSend>
    2dee:	cf 5f       	subi	r28, 0xFF	; 255
    2df0:	f8 01       	movw	r30, r16
    2df2:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2df4:	b0 f3       	brcs	.-20     	; 0x2de2 <main+0x2f8>
				serial3SER_ESPSend(*pChar++);
    2df6:	80 e8       	ldi	r24, 0x80	; 128
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2df8:	0e 94 2a 39 	call	0x7254	; 0x7254 <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2dfc:	8f ef       	ldi	r24, 0xFF	; 255
    2dfe:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2e02:	0e 94 48 36 	call	0x6c90	; 0x6c90 <midi_CheckTxActiveSense>
    2e06:	0e 94 14 34 	call	0x6828	; 0x6828 <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2e0a:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
    2e0e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    2e12:	88 23       	and	r24, r24
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)){
    2e14:	29 f0       	breq	.+10     	; 0x2e20 <main+0x336>
    2e16:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
    2e1a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e1c:	09 f0       	breq	.+2      	; 0x2e20 <main+0x336>
    2e1e:	67 c0       	rjmp	.+206    	; 0x2eee <main+0x404>
    2e20:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
			if (prog_Display == PROGR_NONE) {
    2e24:	8f 3f       	cpi	r24, 0xFF	; 255
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <main+0x340>
    2e28:	62 c0       	rjmp	.+196    	; 0x2eee <main+0x404>
    2e2a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				// only if timer for midi in is not running at all (or just has elapsed)
				if (midiLastInNote != MIDI_NOTE_NONE) {
    2e2e:	8f 3f       	cpi	r24, 0xFF	; 255
    2e30:	91 f1       	breq	.+100    	; 0x2e96 <main+0x3ac>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e34:	1c dc       	rcall	.-1992   	; 0x266e <lcd_goto>
    2e36:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
					if (midiLastInManual == MANUAL_NONE) {
    2e3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e3c:	69 f4       	brne	.+26     	; 0x2e58 <main+0x36e>
    2e3e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    2e42:	0e 94 3e 3c 	call	0x787c	; 0x787c <lcd_ChannelOut>
						lcd_putc('?');
    2e46:	8f e3       	ldi	r24, 0x3F	; 63
    2e48:	3c dc       	rcall	.-1928   	; 0x26c2 <lcd_putc>
						lcd_noteOut(midiLastInNote);
    2e4a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2e4e:	0e 94 ed 3b 	call	0x77da	; 0x77da <lcd_noteOut>
						lcd_putc(' ');
    2e52:	80 e2       	ldi	r24, 0x20	; 32
    2e54:	36 dc       	rcall	.-1940   	; 0x26c2 <lcd_putc>
    2e56:	0c c0       	rjmp	.+24     	; 0x2e70 <main+0x386>
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    2e58:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2e5c:	0e 94 ed 3b 	call	0x77da	; 0x77da <lcd_noteOut>
						lcd_putc(MENU_MIDI_IO_SIGN);
    2e60:	8e e7       	ldi	r24, 0x7E	; 126
    2e62:	2f dc       	rcall	.-1954   	; 0x26c2 <lcd_putc>
    2e64:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
						lcd_ManualOutDec(midiLastInManual);
    2e68:	0e 94 4f 3c 	call	0x789e	; 0x789e <lcd_ManualOutDec>
    2e6c:	80 e2       	ldi	r24, 0x20	; 32
						lcd_putc(' ');
    2e6e:	29 dc       	rcall	.-1966   	; 0x26c2 <lcd_putc>
    2e70:	8c 2f       	mov	r24, r28
    2e72:	fd db       	rcall	.-2054   	; 0x266e <lcd_goto>
					}
					lcd_goto(oldcursor);
    2e74:	8f ef       	ldi	r24, 0xFF	; 255
    2e76:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
					midiLastInNote = MIDI_NOTE_NONE;
    2e7a:	9f b7       	in	r25, 0x3f	; 63
					// now start timer 
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2e7c:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	06 c0       	rjmp	.+12     	; 0x2e8e <main+0x3a4>
    2e82:	ef e2       	ldi	r30, 0x2F	; 47
    2e84:	f2 e0       	ldi	r31, 0x02	; 2
    2e86:	83 e2       	ldi	r24, 0x23	; 35
    2e88:	80 87       	std	Z+8, r24	; 0x08
    2e8a:	11 86       	std	Z+9, r1	; 0x09
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	81 11       	cpse	r24, r1
    2e90:	f8 cf       	rjmp	.-16     	; 0x2e82 <main+0x398>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e92:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2e94:	2c c0       	rjmp	.+88     	; 0x2eee <main+0x404>
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2e96:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2e9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e9c:	d9 f0       	breq	.+54     	; 0x2ed4 <main+0x3ea>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	e6 db       	rcall	.-2100   	; 0x266e <lcd_goto>
    2ea2:	80 e7       	ldi	r24, 0x70	; 112
					lcd_putc('p');
    2ea4:	0e dc       	rcall	.-2020   	; 0x26c2 <lcd_putc>
    2ea6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
					lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2eaa:	0e 94 95 3a 	call	0x752a	; 0x752a <lcd_dec2out>
    2eae:	8e e7       	ldi	r24, 0x7E	; 126
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2eb0:	08 dc       	rcall	.-2032   	; 0x26c2 <lcd_putc>
    2eb2:	8f ef       	ldi	r24, 0xFF	; 255
    2eb4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2eb8:	9f b7       	in	r25, 0x3f	; 63
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2eba:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	06 c0       	rjmp	.+12     	; 0x2ecc <main+0x3e2>
    2ec0:	ef e2       	ldi	r30, 0x2F	; 47
    2ec2:	f2 e0       	ldi	r31, 0x02	; 2
    2ec4:	83 e2       	ldi	r24, 0x23	; 35
    2ec6:	80 87       	std	Z+8, r24	; 0x08
    2ec8:	11 86       	std	Z+9, r1	; 0x09
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	81 11       	cpse	r24, r1
    2ece:	f8 cf       	rjmp	.-16     	; 0x2ec0 <main+0x3d6>
    2ed0:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ed2:	0d c0       	rjmp	.+26     	; 0x2eee <main+0x404>
    __asm__ volatile ("" ::: "memory");
    2ed4:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2ed8:	81 11       	cpse	r24, r1
    2eda:	09 c0       	rjmp	.+18     	; 0x2eee <main+0x404>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2edc:	c8 db       	rcall	.-2160   	; 0x266e <lcd_goto>
    2ede:	86 e0       	ldi	r24, 0x06	; 6
					lcd_blank(6);
    2ee0:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
					lcd_goto(oldcursor);
    2ee4:	8c 2f       	mov	r24, r28
    2ee6:	c3 db       	rcall	.-2170   	; 0x266e <lcd_goto>
    2ee8:	8f ef       	ldi	r24, 0xFF	; 255
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2eea:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
				}
			}
		}
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2eee:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2ef2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ef4:	21 f0       	breq	.+8      	; 0x2efe <main+0x414>
    2ef6:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2efa:	81 11       	cpse	r24, r1
    2efc:	5b c0       	rjmp	.+182    	; 0x2fb4 <main+0x4ca>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    2efe:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
    2f02:	8f 3f       	cpi	r24, 0xFF	; 255
    2f04:	f9 f0       	breq	.+62     	; 0x2f44 <main+0x45a>
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2f06:	8f e0       	ldi	r24, 0x0F	; 15
    2f08:	b2 db       	rcall	.-2204   	; 0x266e <lcd_goto>
    2f0a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
				lcd_ManualOutDec(midiLastOutManual);
    2f0e:	0e 94 4f 3c 	call	0x789e	; 0x789e <lcd_ManualOutDec>
    2f12:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    2f14:	d6 db       	rcall	.-2132   	; 0x26c2 <lcd_putc>
    2f16:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
				lcd_noteOut(midiLastOutNote);
    2f1a:	0e 94 ed 3b 	call	0x77da	; 0x77da <lcd_noteOut>
				lcd_goto(oldcursor);
    2f1e:	8c 2f       	mov	r24, r28
    2f20:	a6 db       	rcall	.-2228   	; 0x266e <lcd_goto>
    2f22:	8f ef       	ldi	r24, 0xFF	; 255
				midiLastOutNote = MIDI_NOTE_NONE;
    2f24:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
    2f28:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2f2a:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	06 c0       	rjmp	.+12     	; 0x2f3c <main+0x452>
    2f30:	ef e2       	ldi	r30, 0x2F	; 47
    2f32:	f2 e0       	ldi	r31, 0x02	; 2
    2f34:	88 e2       	ldi	r24, 0x28	; 40
    2f36:	82 87       	std	Z+10, r24	; 0x0a
    2f38:	13 86       	std	Z+11, r1	; 0x0b
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f3c:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    2f3e:	f8 cf       	rjmp	.-16     	; 0x2f30 <main+0x446>
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    2f40:	9f bf       	out	0x3f, r25	; 63
    2f42:	38 c0       	rjmp	.+112    	; 0x2fb4 <main+0x4ca>
    2f44:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2f48:	8f 3f       	cpi	r24, 0xFF	; 255
    2f4a:	31 f1       	breq	.+76     	; 0x2f98 <main+0x4ae>
    2f4c:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_putc('R');
    2f4e:	8f db       	rcall	.-2274   	; 0x266e <lcd_goto>
    2f50:	82 e5       	ldi	r24, 0x52	; 82
    2f52:	b7 db       	rcall	.-2194   	; 0x26c2 <lcd_putc>
				lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2f54:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2f58:	8f 77       	andi	r24, 0x7F	; 127
    2f5a:	0e 94 95 3a 	call	0x752a	; 0x752a <lcd_dec2out>
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2f5e:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2f62:	88 23       	and	r24, r24
    2f64:	14 f0       	brlt	.+4      	; 0x2f6a <main+0x480>
    2f66:	88 e0       	ldi	r24, 0x08	; 8
    2f68:	01 c0       	rjmp	.+2      	; 0x2f6c <main+0x482>
    2f6a:	89 e0       	ldi	r24, 0x09	; 9
    2f6c:	aa db       	rcall	.-2220   	; 0x26c2 <lcd_putc>
				lcd_putc(' ');
    2f6e:	80 e2       	ldi	r24, 0x20	; 32
    2f70:	a8 db       	rcall	.-2224   	; 0x26c2 <lcd_putc>
    2f72:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    2f74:	7c db       	rcall	.-2312   	; 0x266e <lcd_goto>
    2f76:	8f ef       	ldi	r24, 0xFF	; 255
    2f78:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				midi_RegisterChanged = REGISTER_NONE;
    2f7c:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2f7e:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	06 c0       	rjmp	.+12     	; 0x2f90 <main+0x4a6>
    2f84:	ef e2       	ldi	r30, 0x2F	; 47
    2f86:	f2 e0       	ldi	r31, 0x02	; 2
    2f88:	88 e2       	ldi	r24, 0x28	; 40
    2f8a:	82 87       	std	Z+10, r24	; 0x0a
    2f8c:	13 86       	std	Z+11, r1	; 0x0b
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	81 11       	cpse	r24, r1
    2f92:	f8 cf       	rjmp	.-16     	; 0x2f84 <main+0x49a>
    2f94:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f96:	0e c0       	rjmp	.+28     	; 0x2fb4 <main+0x4ca>
    __asm__ volatile ("" ::: "memory");
    2f98:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2f9c:	81 11       	cpse	r24, r1
    2f9e:	0a c0       	rjmp	.+20     	; 0x2fb4 <main+0x4ca>
    2fa0:	8f e0       	ldi	r24, 0x0F	; 15
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2fa2:	65 db       	rcall	.-2358   	; 0x266e <lcd_goto>
    2fa4:	85 e0       	ldi	r24, 0x05	; 5
    2fa6:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
				lcd_blank(5);
    2faa:	8c 2f       	mov	r24, r28
    2fac:	60 db       	rcall	.-2368   	; 0x266e <lcd_goto>
				lcd_goto(oldcursor);
    2fae:	8f ef       	ldi	r24, 0xFF	; 255
    2fb0:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2fb4:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <prog_UpdDisplay>
    2fb8:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}
		#endif
		//----------------------- program display ------------------------
		if (prog_UpdDisplay == TRUE){
    2fba:	79 f4       	brne	.+30     	; 0x2fda <main+0x4f0>
    2fbc:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
			prog_UpdDisplay = FALSE;
    2fc2:	55 db       	rcall	.-2390   	; 0x266e <lcd_goto>
    2fc4:	0e 94 e2 30 	call	0x61c4	; 0x61c4 <prog_toLcd>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    2fc8:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
			prog_toLcd();
    2fcc:	8f 3f       	cpi	r24, 0xFF	; 255
    2fce:	19 f0       	breq	.+6      	; 0x2fd6 <main+0x4ec>
			if (prog_Display != PROGR_NONE) {
    2fd0:	0e 94 03 31 	call	0x6206	; 0x6206 <reg_toLCD>
    2fd4:	02 c0       	rjmp	.+4      	; 0x2fda <main+0x4f0>
    2fd6:	0e 94 67 31 	call	0x62ce	; 0x62ce <reg_ClearOnLCD>
				reg_toLCD();
    2fda:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
			} else {
				reg_ClearOnLCD();
    2fde:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <main+0x4fa>
			}
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2fe2:	7e c0       	rjmp	.+252    	; 0x30e0 <main+0x5f6>
    2fe4:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2fe8:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2fec:	c0 91 db 18 	lds	r28, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2ff0:	cf 3f       	cpi	r28, 0xFF	; 255
			uint8_t oldBlink = lcd_cursorIsOn;
    2ff2:	11 f4       	brne	.+4      	; 0x2ff8 <main+0x50e>
			if (oldBlink == TRUE) {
    2ff4:	0e 94 8b 3c 	call	0x7916	; 0x7916 <lcd_cursoroff>
				lcd_cursoroff();
    2ff8:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
			}
			char separator;
			if (*pTime == 0) {
    2ffc:	88 23       	and	r24, r24
    2ffe:	59 f0       	breq	.+22     	; 0x3016 <main+0x52c>
    3000:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    3004:	80 fd       	sbrc	r24, 0
    3006:	0e c0       	rjmp	.+28     	; 0x3024 <main+0x53a>
    3008:	0f 2e       	mov	r0, r31
    300a:	fa e3       	ldi	r31, 0x3A	; 58
				// when displaying hr:min blink ":"
				separator = ':';
    300c:	ef 2e       	mov	r14, r31
    300e:	f0 2d       	mov	r31, r0
    3010:	04 e4       	ldi	r16, 0x44	; 68
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    3012:	12 e0       	ldi	r17, 0x02	; 2
    3014:	0c c0       	rjmp	.+24     	; 0x302e <main+0x544>
    3016:	0f 2e       	mov	r0, r31
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    3018:	fa e3       	ldi	r31, 0x3A	; 58
    301a:	ef 2e       	mov	r14, r31
    301c:	f0 2d       	mov	r31, r0
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    301e:	03 e4       	ldi	r16, 0x43	; 67
    3020:	12 e0       	ldi	r17, 0x02	; 2
    3022:	05 c0       	rjmp	.+10     	; 0x302e <main+0x544>
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    3024:	68 94       	set
    3026:	ee 24       	eor	r14, r14
    3028:	e5 f8       	bld	r14, 5
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    302a:	04 e4       	ldi	r16, 0x44	; 68
    302c:	12 e0       	ldi	r17, 0x02	; 2
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    302e:	87 e0       	ldi	r24, 0x07	; 7
    3030:	1e db       	rcall	.-2500   	; 0x266e <lcd_goto>
			lcd_dec2out(*(pTime--));
    3032:	f8 01       	movw	r30, r16
    3034:	80 81       	ld	r24, Z
    3036:	0e 94 95 3a 	call	0x752a	; 0x752a <lcd_dec2out>
			lcd_putc(separator);
    303a:	8e 2d       	mov	r24, r14
    303c:	42 db       	rcall	.-2428   	; 0x26c2 <lcd_putc>
			lcd_dec2out(*pTime);
    303e:	f8 01       	movw	r30, r16
    3040:	31 97       	sbiw	r30, 0x01	; 1
    3042:	80 81       	ld	r24, Z
    3044:	0e 94 95 3a 	call	0x752a	; 0x752a <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    3048:	40 91 4f 16 	lds	r20, 0x164F	; 0x80164f <midiRxOvflCount>
			if (ovflCount > 0){
    304c:	44 23       	and	r20, r20
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    304e:	31 f0       	breq	.+12     	; 0x305c <main+0x572>
    3050:	50 e0       	ldi	r21, 0x00	; 0
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	83 e0       	ldi	r24, 0x03	; 3
    3056:	33 dd       	rcall	.-1434   	; 0x2abe <log_putError>
				midiRxOvflCount = 0;
    3058:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    305c:	40 91 56 16 	lds	r20, 0x1656	; 0x801656 <midiTxOvflCount>
			if (ovflCount > 0){
    3060:	44 23       	and	r20, r20
    3062:	31 f0       	breq	.+12     	; 0x3070 <main+0x586>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    3064:	50 e0       	ldi	r21, 0x00	; 0
    3066:	61 e0       	ldi	r22, 0x01	; 1
    3068:	83 e0       	ldi	r24, 0x03	; 3
    306a:	29 dd       	rcall	.-1454   	; 0x2abe <log_putError>
    306c:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
				midiTxOvflCount = 0;
    3070:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    3074:	84 ff       	sbrs	r24, 4
    3076:	02 c0       	rjmp	.+4      	; 0x307c <main+0x592>
    3078:	80 e2       	ldi	r24, 0x20	; 32
    307a:	01 c0       	rjmp	.+2      	; 0x307e <main+0x594>
    307c:	89 e0       	ldi	r24, 0x09	; 9
    307e:	21 db       	rcall	.-2494   	; 0x26c2 <lcd_putc>
    3080:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    3084:	8f 3f       	cpi	r24, 0xFF	; 255
    3086:	11 f4       	brne	.+4      	; 0x308c <main+0x5a2>
    3088:	85 e4       	ldi	r24, 0x45	; 69
    308a:	01 c0       	rjmp	.+2      	; 0x308e <main+0x5a4>
    308c:	80 e2       	ldi	r24, 0x20	; 32
    308e:	19 db       	rcall	.-2510   	; 0x26c2 <lcd_putc>
    3090:	8f 2d       	mov	r24, r15
    3092:	ed da       	rcall	.-2598   	; 0x266e <lcd_goto>
    3094:	cf 3f       	cpi	r28, 0xFF	; 255
			// --- restore cursor ---
			lcd_goto(oldCursor);
    3096:	11 f4       	brne	.+4      	; 0x309c <main+0x5b2>
    3098:	0e 94 84 3c 	call	0x7908	; 0x7908 <lcd_cursosblink>
			if (oldBlink == TRUE) {
    309c:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				lcd_cursosblink();
    30a0:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    30a2:	69 f4       	brne	.+26     	; 0x30be <main+0x5d4>
    30a4:	9f b7       	in	r25, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    30aa:	06 c0       	rjmp	.+12     	; 0x30b8 <main+0x5ce>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    30ac:	ef e2       	ldi	r30, 0x2F	; 47
    30ae:	f2 e0       	ldi	r31, 0x02	; 2
    30b0:	8d e7       	ldi	r24, 0x7D	; 125
    30b2:	80 87       	std	Z+8, r24	; 0x08
    30b4:	11 86       	std	Z+9, r1	; 0x09
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	81 11       	cpse	r24, r1
    30ba:	f8 cf       	rjmp	.-16     	; 0x30ac <main+0x5c2>
    30bc:	9f bf       	out	0x3f, r25	; 63
    30be:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30c2:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    30c4:	69 f4       	brne	.+26     	; 0x30e0 <main+0x5f6>
    30c6:	9f b7       	in	r25, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    30cc:	06 c0       	rjmp	.+12     	; 0x30da <main+0x5f0>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    30ce:	ef e2       	ldi	r30, 0x2F	; 47
    30d0:	f2 e0       	ldi	r31, 0x02	; 2
    30d2:	8d e7       	ldi	r24, 0x7D	; 125
    30d4:	82 87       	std	Z+10, r24	; 0x0a
    30d6:	13 86       	std	Z+11, r1	; 0x0b
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	81 11       	cpse	r24, r1
    30dc:	f8 cf       	rjmp	.-16     	; 0x30ce <main+0x5e4>
    30de:	9f bf       	out	0x3f, r25	; 63
    30e0:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    30e4:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    30e6:	39 f4       	brne	.+14     	; 0x30f6 <main+0x60c>
    30e8:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
    30ec:	40 e0       	ldi	r20, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	60 e0       	ldi	r22, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    30f2:	84 e0       	ldi	r24, 0x04	; 4
    30f4:	e4 dc       	rcall	.-1592   	; 0x2abe <log_putError>
    30f6:	85 b1       	in	r24, 0x05	; 5
    30f8:	8f 7c       	andi	r24, 0xCF	; 207
    30fa:	80 62       	ori	r24, 0x20	; 32
    30fc:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MIDI
    30fe:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    3102:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    3106:	98 17       	cp	r25, r24
    3108:	21 f0       	breq	.+8      	; 0x3112 <main+0x628>
    310a:	0e 94 60 37 	call	0x6ec0	; 0x6ec0 <serial1MIDIReadRx>
    310e:	0e 94 9d 34 	call	0x693a	; 0x693a <midiIn_Process>
			midiIn_Process(serial1MIDIReadRx());
    3112:	0e 94 a8 2d 	call	0x5b50	; 0x5b50 <pipeMsgStatus>
    3116:	8f 3f       	cpi	r24, 0xFF	; 255
    3118:	09 f0       	breq	.+2      	; 0x311c <main+0x632>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    311a:	2c cd       	rjmp	.-1448   	; 0x2b74 <main+0x8a>
    311c:	0e 94 93 2d 	call	0x5b26	; 0x5b26 <pipeMsgGet>
    3120:	0e 94 62 35 	call	0x6ac4	; 0x6ac4 <midiKeyPress_Process>
			midiKeyPress_Process(pipeMsgGet());
    3124:	27 cd       	rjmp	.-1458   	; 0x2b74 <main+0x8a>

00003126 <menu_enterWriteModule>:
    3126:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
    312a:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    312e:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
    3132:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <menu_enterWriteModule+0x1e>
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	0a 94       	dec	r0
    3146:	e2 f7       	brpl	.-8      	; 0x3140 <menu_enterWriteModule+0x1a>
    3148:	48 2f       	mov	r20, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	e1 e4       	ldi	r30, 0x41	; 65
    314e:	f3 e0       	ldi	r31, 0x03	; 3
    3150:	22 c0       	rjmp	.+68     	; 0x3196 <menu_enterWriteModule+0x70>
    3152:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    3156:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    315a:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    315e:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    3162:	88 0f       	add	r24, r24
    3164:	99 1f       	adc	r25, r25
    3166:	aa 1f       	adc	r26, r26
    3168:	bb 1f       	adc	r27, r27
    316a:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    316e:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    3172:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    3176:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    317a:	21 81       	ldd	r18, Z+1	; 0x01
    317c:	24 23       	and	r18, r20
    317e:	49 f0       	breq	.+18     	; 0x3192 <menu_enterWriteModule+0x6c>
    3180:	81 60       	ori	r24, 0x01	; 1
    3182:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    3186:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    318a:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    318e:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    3192:	38 97       	sbiw	r30, 0x08	; 8
    3194:	3f 5f       	subi	r19, 0xFF	; 255
    3196:	30 32       	cpi	r19, 0x20	; 32
    3198:	e0 f2       	brcs	.-72     	; 0x3152 <menu_enterWriteModule+0x2c>
    319a:	80 e0       	ldi	r24, 0x00	; 0
    319c:	08 95       	ret

0000319e <menu_exitWriteModule>:
    319e:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    31a2:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    31a6:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    31aa:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    31ae:	85 30       	cpi	r24, 0x05	; 5
    31b0:	09 f5       	brne	.+66     	; 0x31f4 <menu_exitWriteModule+0x56>
    31b2:	a1 e0       	ldi	r26, 0x01	; 1
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    31ba:	02 c0       	rjmp	.+4      	; 0x31c0 <menu_exitWriteModule+0x22>
    31bc:	aa 0f       	add	r26, r26
    31be:	bb 1f       	adc	r27, r27
    31c0:	0a 94       	dec	r0
    31c2:	e2 f7       	brpl	.-8      	; 0x31bc <menu_exitWriteModule+0x1e>
    31c4:	3a 2f       	mov	r19, r26
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	e1 e4       	ldi	r30, 0x41	; 65
    31ca:	f3 e0       	ldi	r31, 0x03	; 3
    31cc:	11 c0       	rjmp	.+34     	; 0x31f0 <menu_exitWriteModule+0x52>
    31ce:	77 23       	and	r23, r23
    31d0:	24 f4       	brge	.+8      	; 0x31da <menu_exitWriteModule+0x3c>
    31d2:	81 81       	ldd	r24, Z+1	; 0x01
    31d4:	83 2b       	or	r24, r19
    31d6:	81 83       	std	Z+1, r24	; 0x01
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <menu_exitWriteModule+0x46>
    31da:	21 81       	ldd	r18, Z+1	; 0x01
    31dc:	8a 2f       	mov	r24, r26
    31de:	80 95       	com	r24
    31e0:	82 23       	and	r24, r18
    31e2:	81 83       	std	Z+1, r24	; 0x01
    31e4:	44 0f       	add	r20, r20
    31e6:	55 1f       	adc	r21, r21
    31e8:	66 1f       	adc	r22, r22
    31ea:	77 1f       	adc	r23, r23
    31ec:	38 97       	sbiw	r30, 0x08	; 8
    31ee:	9f 5f       	subi	r25, 0xFF	; 255
    31f0:	90 32       	cpi	r25, 0x20	; 32
    31f2:	68 f3       	brcs	.-38     	; 0x31ce <menu_exitWriteModule+0x30>
    31f4:	80 e0       	ldi	r24, 0x00	; 0
    31f6:	08 95       	ret

000031f8 <menuOnEnterModSel>:
    31f8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31fc:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3200:	3e 96       	adiw	r30, 0x0e	; 14
    3202:	85 91       	lpm	r24, Z+
    3204:	95 91       	lpm	r25, Z+
    3206:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	08 95       	ret

0000320e <menuOnEnterMidiInCh>:
    320e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3212:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3216:	3e 96       	adiw	r30, 0x0e	; 14
    3218:	85 91       	lpm	r24, Z+
    321a:	95 91       	lpm	r25, Z+
    321c:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    3220:	80 e0       	ldi	r24, 0x00	; 0
    3222:	08 95       	ret

00003224 <menuOnEnterMidiInSec>:
    3224:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3228:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    322c:	3e 96       	adiw	r30, 0x0e	; 14
    322e:	25 91       	lpm	r18, Z+
    3230:	35 91       	lpm	r19, Z+
    3232:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    3236:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    323a:	8f 70       	andi	r24, 0x0F	; 15
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	23 70       	andi	r18, 0x03	; 3
    3240:	88 0f       	add	r24, r24
    3242:	99 1f       	adc	r25, r25
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	82 0f       	add	r24, r18
    324a:	91 1d       	adc	r25, r1
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3258:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    325c:	80 e0       	ldi	r24, 0x00	; 0
    325e:	08 95       	ret

00003260 <menuOnEnterModManual>:
    3260:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3264:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3268:	3e 96       	adiw	r30, 0x0e	; 14
    326a:	85 91       	lpm	r24, Z+
    326c:	95 91       	lpm	r25, Z+
    326e:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	08 95       	ret

00003276 <menuOnEnterModSec>:
    3276:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    327a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    327e:	3e 96       	adiw	r30, 0x0e	; 14
    3280:	85 91       	lpm	r24, Z+
    3282:	95 91       	lpm	r25, Z+
    3284:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    3288:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    328c:	2f 70       	andi	r18, 0x0F	; 15
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	83 70       	andi	r24, 0x03	; 3
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	a9 01       	movw	r20, r18
    3296:	44 0f       	add	r20, r20
    3298:	55 1f       	adc	r21, r21
    329a:	24 0f       	add	r18, r20
    329c:	35 1f       	adc	r19, r21
    329e:	22 0f       	add	r18, r18
    32a0:	33 1f       	adc	r19, r19
    32a2:	22 0f       	add	r18, r18
    32a4:	33 1f       	adc	r19, r19
    32a6:	ac 01       	movw	r20, r24
    32a8:	44 0f       	add	r20, r20
    32aa:	55 1f       	adc	r21, r21
    32ac:	84 0f       	add	r24, r20
    32ae:	95 1f       	adc	r25, r21
    32b0:	82 0f       	add	r24, r18
    32b2:	93 1f       	adc	r25, r19
    32b4:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    32b8:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	08 95       	ret

000032c0 <menuOnEnterModSecReg>:
    32c0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    32c4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    32c8:	3e 96       	adiw	r30, 0x0e	; 14
    32ca:	85 91       	lpm	r24, Z+
    32cc:	95 91       	lpm	r25, Z+
    32ce:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    32d2:	87 70       	andi	r24, 0x07	; 7
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	9c 01       	movw	r18, r24
    32d8:	22 0f       	add	r18, r18
    32da:	33 1f       	adc	r19, r19
    32dc:	82 0f       	add	r24, r18
    32de:	93 1f       	adc	r25, r19
    32e0:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    32e4:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	08 95       	ret

000032ec <menuOnEnterKey>:
    32ec:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    32f0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    32f4:	3e 96       	adiw	r30, 0x0e	; 14
    32f6:	85 91       	lpm	r24, Z+
    32f8:	95 91       	lpm	r25, Z+
    32fa:	84 30       	cpi	r24, 0x04	; 4
    32fc:	60 f4       	brcc	.+24     	; 0x3316 <menuOnEnterKey+0x2a>
    32fe:	fc 01       	movw	r30, r24
    3300:	ff 27       	eor	r31, r31
    3302:	ee 0f       	add	r30, r30
    3304:	ff 1f       	adc	r31, r31
    3306:	e6 54       	subi	r30, 0x46	; 70
    3308:	fa 4f       	sbci	r31, 0xFA	; 250
    330a:	80 81       	ld	r24, Z
    330c:	91 81       	ldd	r25, Z+1	; 0x01
    330e:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    3312:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	08 95       	ret

0000331a <menuOnExitMidiThrough>:
    331a:	0e 94 bd 0c 	call	0x197a	; 0x197a <eeprom_UpdateMidiThrough>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	08 95       	ret

00003322 <menuOnExitRegisterEdit>:
    3322:	1f 93       	push	r17
    3324:	cf 93       	push	r28
    3326:	df 93       	push	r29
    3328:	86 30       	cpi	r24, 0x06	; 6
    332a:	f1 f0       	breq	.+60     	; 0x3368 <menuOnExitRegisterEdit+0x46>
    332c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3330:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3334:	3e 96       	adiw	r30, 0x0e	; 14
    3336:	05 90       	lpm	r0, Z+
    3338:	f4 91       	lpm	r31, Z
    333a:	e0 2d       	mov	r30, r0
    333c:	cf 01       	movw	r24, r30
    333e:	8d 56       	subi	r24, 0x6D	; 109
    3340:	95 40       	sbci	r25, 0x05	; 5
    3342:	88 0f       	add	r24, r24
    3344:	88 0f       	add	r24, r24
    3346:	88 0f       	add	r24, r24
    3348:	d0 81       	ld	r29, Z
    334a:	c0 e0       	ldi	r28, 0x00	; 0
    334c:	0b c0       	rjmp	.+22     	; 0x3364 <menuOnExitRegisterEdit+0x42>
    334e:	11 e0       	ldi	r17, 0x01	; 1
    3350:	18 0f       	add	r17, r24
    3352:	6d 2f       	mov	r22, r29
    3354:	66 1f       	adc	r22, r22
    3356:	66 27       	eor	r22, r22
    3358:	66 1f       	adc	r22, r22
    335a:	0e 94 89 2f 	call	0x5f12	; 0x5f12 <register_onOff>
    335e:	dd 0f       	add	r29, r29
    3360:	cf 5f       	subi	r28, 0xFF	; 255
    3362:	81 2f       	mov	r24, r17
    3364:	c8 30       	cpi	r28, 0x08	; 8
    3366:	98 f3       	brcs	.-26     	; 0x334e <menuOnExitRegisterEdit+0x2c>
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	df 91       	pop	r29
    336c:	cf 91       	pop	r28
    336e:	1f 91       	pop	r17
    3370:	08 95       	ret

00003372 <softKeyRegOff>:
    3372:	81 11       	cpse	r24, r1
    3374:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <midi_resetRegisters>
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	08 95       	ret

0000337c <menuOnExitCoupler>:
    337c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3380:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3384:	3e 96       	adiw	r30, 0x0e	; 14
    3386:	85 91       	lpm	r24, Z+
    3388:	95 91       	lpm	r25, Z+
    338a:	81 51       	subi	r24, 0x11	; 17
    338c:	98 40       	sbci	r25, 0x08	; 8
    338e:	fc 01       	movw	r30, r24
    3390:	ff 27       	eor	r31, r31
    3392:	ef 5e       	subi	r30, 0xEF	; 239
    3394:	f7 4f       	sbci	r31, 0xF7	; 247
    3396:	20 81       	ld	r18, Z
    3398:	21 11       	cpse	r18, r1
    339a:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <set_Coupler>
    339e:	80 e0       	ldi	r24, 0x00	; 0
    33a0:	08 95       	ret

000033a2 <menuOnExitSaveProgram>:
    33a2:	86 30       	cpi	r24, 0x06	; 6
    33a4:	39 f0       	breq	.+14     	; 0x33b4 <menuOnExitSaveProgram+0x12>
    33a6:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    33aa:	80 34       	cpi	r24, 0x40	; 64
    33ac:	18 f4       	brcc	.+6      	; 0x33b4 <menuOnExitSaveProgram+0x12>
    33ae:	6f ef       	ldi	r22, 0xFF	; 255
    33b0:	0e 94 ae 2f 	call	0x5f5c	; 0x5f5c <register_toProgram>
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	08 95       	ret

000033b8 <menuOnExitKeys>:
    33b8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <eeprom_UpdateSoftkeys>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	08 95       	ret

000033c0 <menu_readModule>:
    33c0:	cf 92       	push	r12
    33c2:	df 92       	push	r13
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <menu_readModule+0x16>
    33d2:	88 0f       	add	r24, r24
    33d4:	99 1f       	adc	r25, r25
    33d6:	0a 94       	dec	r0
    33d8:	e2 f7       	brpl	.-8      	; 0x33d2 <menu_readModule+0x12>
    33da:	28 2f       	mov	r18, r24
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	e1 e4       	ldi	r30, 0x41	; 65
    33e0:	f3 e0       	ldi	r31, 0x03	; 3
    33e2:	c1 2c       	mov	r12, r1
    33e4:	d1 2c       	mov	r13, r1
    33e6:	76 01       	movw	r14, r12
    33e8:	0b c0       	rjmp	.+22     	; 0x3400 <menu_readModule+0x40>
    33ea:	cc 0c       	add	r12, r12
    33ec:	dd 1c       	adc	r13, r13
    33ee:	ee 1c       	adc	r14, r14
    33f0:	ff 1c       	adc	r15, r15
    33f2:	86 81       	ldd	r24, Z+6	; 0x06
    33f4:	82 23       	and	r24, r18
    33f6:	11 f0       	breq	.+4      	; 0x33fc <menu_readModule+0x3c>
    33f8:	68 94       	set
    33fa:	c0 f8       	bld	r12, 0
    33fc:	38 97       	sbiw	r30, 0x08	; 8
    33fe:	9f 5f       	subi	r25, 0xFF	; 255
    3400:	90 32       	cpi	r25, 0x20	; 32
    3402:	98 f3       	brcs	.-26     	; 0x33ea <menu_readModule+0x2a>
    3404:	8e e1       	ldi	r24, 0x1E	; 30
    3406:	33 d9       	rcall	.-3482   	; 0x266e <lcd_goto>
    3408:	c0 92 dd 18 	sts	0x18DD, r12	; 0x8018dd <editLong>
    340c:	d0 92 de 18 	sts	0x18DE, r13	; 0x8018de <editLong+0x1>
    3410:	e0 92 df 18 	sts	0x18DF, r14	; 0x8018df <editLong+0x2>
    3414:	f0 92 e0 18 	sts	0x18E0, r15	; 0x8018e0 <editLong+0x3>
    3418:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <lcd_longout>
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	ff 90       	pop	r15
    3420:	ef 90       	pop	r14
    3422:	df 90       	pop	r13
    3424:	cf 90       	pop	r12
    3426:	08 95       	ret

00003428 <menu_testModule>:
    3428:	8e e1       	ldi	r24, 0x1E	; 30
    342a:	21 d9       	rcall	.-3518   	; 0x266e <lcd_goto>
    342c:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    3430:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <test_PipeModule>
    3434:	60 93 dd 18 	sts	0x18DD, r22	; 0x8018dd <editLong>
    3438:	70 93 de 18 	sts	0x18DE, r23	; 0x8018de <editLong+0x1>
    343c:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <editLong+0x2>
    3440:	90 93 e0 18 	sts	0x18E0, r25	; 0x8018e0 <editLong+0x3>
    3444:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <lcd_longout>
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	08 95       	ret

0000344c <menuOnEnterTune>:
    344c:	cf 93       	push	r28
    344e:	8f 3f       	cpi	r24, 0xFF	; 255
    3450:	09 f0       	breq	.+2      	; 0x3454 <menuOnEnterTune+0x8>
    3452:	77 c0       	rjmp	.+238    	; 0x3542 <menuOnEnterTune+0xf6>
    3454:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.3020>
    3458:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.3021>
    345c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3460:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3464:	3e 96       	adiw	r30, 0x0e	; 14
    3466:	85 91       	lpm	r24, Z+
    3468:	95 91       	lpm	r25, Z+
    346a:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    346e:	84 30       	cpi	r24, 0x04	; 4
    3470:	10 f0       	brcs	.+4      	; 0x3476 <menuOnEnterTune+0x2a>
    3472:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	39 c0       	rjmp	.+114    	; 0x34ec <menuOnEnterTune+0xa0>
    347a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	e2 2f       	mov	r30, r18
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	df 01       	movw	r26, r30
    3486:	aa 0f       	add	r26, r26
    3488:	bb 1f       	adc	r27, r27
    348a:	ad 01       	movw	r20, r26
    348c:	4e 0f       	add	r20, r30
    348e:	5f 1f       	adc	r21, r31
    3490:	dc 01       	movw	r26, r24
    3492:	aa 0f       	add	r26, r26
    3494:	bb 1f       	adc	r27, r27
    3496:	a8 0f       	add	r26, r24
    3498:	b9 1f       	adc	r27, r25
    349a:	aa 0f       	add	r26, r26
    349c:	bb 1f       	adc	r27, r27
    349e:	aa 0f       	add	r26, r26
    34a0:	bb 1f       	adc	r27, r27
    34a2:	a4 0f       	add	r26, r20
    34a4:	b5 1f       	adc	r27, r21
    34a6:	ac 5c       	subi	r26, 0xCC	; 204
    34a8:	b6 4f       	sbci	r27, 0xF6	; 246
    34aa:	3c 91       	ld	r19, X
    34ac:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.3020>
    34b0:	34 17       	cp	r19, r20
    34b2:	10 f4       	brcc	.+4      	; 0x34b8 <menuOnEnterTune+0x6c>
    34b4:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.3020>
    34b8:	af 01       	movw	r20, r30
    34ba:	44 0f       	add	r20, r20
    34bc:	55 1f       	adc	r21, r21
    34be:	e4 0f       	add	r30, r20
    34c0:	f5 1f       	adc	r31, r21
    34c2:	ac 01       	movw	r20, r24
    34c4:	44 0f       	add	r20, r20
    34c6:	55 1f       	adc	r21, r21
    34c8:	84 0f       	add	r24, r20
    34ca:	95 1f       	adc	r25, r21
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	88 0f       	add	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	e8 0f       	add	r30, r24
    34d6:	f9 1f       	adc	r31, r25
    34d8:	ec 5c       	subi	r30, 0xCC	; 204
    34da:	f6 4f       	sbci	r31, 0xF6	; 246
    34dc:	81 81       	ldd	r24, Z+1	; 0x01
    34de:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.3021>
    34e2:	98 17       	cp	r25, r24
    34e4:	10 f4       	brcc	.+4      	; 0x34ea <menuOnEnterTune+0x9e>
    34e6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.3021>
    34ea:	2f 5f       	subi	r18, 0xFF	; 255
    34ec:	24 30       	cpi	r18, 0x04	; 4
    34ee:	28 f2       	brcs	.-118    	; 0x347a <menuOnEnterTune+0x2e>
    34f0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.3020>
    34f4:	88 23       	and	r24, r24
    34f6:	4c f4       	brge	.+18     	; 0x350a <menuOnEnterTune+0xbe>
    34f8:	8e e1       	ldi	r24, 0x1E	; 30
    34fa:	b9 d8       	rcall	.-3726   	; 0x266e <lcd_goto>
    34fc:	80 ea       	ldi	r24, 0xA0	; 160
    34fe:	93 e0       	ldi	r25, 0x03	; 3
    3500:	28 d9       	rcall	.-3504   	; 0x2752 <lcd_puts_P>
    3502:	8f ef       	ldi	r24, 0xFF	; 255
    3504:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    3508:	04 c0       	rjmp	.+8      	; 0x3512 <menuOnEnterTune+0xc6>
    350a:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    350e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.3022>
    3512:	6e ed       	ldi	r22, 0xDE	; 222
    3514:	72 e1       	ldi	r23, 0x12	; 18
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    351c:	6d ee       	ldi	r22, 0xED	; 237
    351e:	72 e1       	ldi	r23, 0x12	; 18
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    3526:	62 ef       	ldi	r22, 0xF2	; 242
    3528:	72 e1       	ldi	r23, 0x12	; 18
    352a:	82 e0       	ldi	r24, 0x02	; 2
    352c:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    3530:	64 ef       	ldi	r22, 0xF4	; 244
    3532:	72 e1       	ldi	r23, 0x12	; 18
    3534:	83 e0       	ldi	r24, 0x03	; 3
    3536:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    353a:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
    353e:	cf ef       	ldi	r28, 0xFF	; 255
    3540:	71 c0       	rjmp	.+226    	; 0x3624 <menuOnEnterTune+0x1d8>
    3542:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3546:	6f 3f       	cpi	r22, 0xFF	; 255
    3548:	09 f4       	brne	.+2      	; 0x354c <menuOnEnterTune+0x100>
    354a:	61 c0       	rjmp	.+194    	; 0x360e <menuOnEnterTune+0x1c2>
    354c:	81 30       	cpi	r24, 0x01	; 1
    354e:	d9 f4       	brne	.+54     	; 0x3586 <menuOnEnterTune+0x13a>
    3550:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.3021>
    3554:	68 17       	cp	r22, r24
    3556:	08 f0       	brcs	.+2      	; 0x355a <menuOnEnterTune+0x10e>
    3558:	5c c0       	rjmp	.+184    	; 0x3612 <menuOnEnterTune+0x1c6>
    355a:	40 e0       	ldi	r20, 0x00	; 0
    355c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3560:	0e 94 10 33 	call	0x6620	; 0x6620 <manual_NoteOnOff>
    3564:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3568:	6f 5f       	subi	r22, 0xFF	; 255
    356a:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    356e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3022>
    3572:	81 30       	cpi	r24, 0x01	; 1
    3574:	09 f0       	breq	.+2      	; 0x3578 <menuOnEnterTune+0x12c>
    3576:	4f c0       	rjmp	.+158    	; 0x3616 <menuOnEnterTune+0x1ca>
    3578:	41 e0       	ldi	r20, 0x01	; 1
    357a:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    357e:	0e 94 10 33 	call	0x6620	; 0x6620 <manual_NoteOnOff>
    3582:	cf ef       	ldi	r28, 0xFF	; 255
    3584:	4f c0       	rjmp	.+158    	; 0x3624 <menuOnEnterTune+0x1d8>
    3586:	84 30       	cpi	r24, 0x04	; 4
    3588:	d1 f4       	brne	.+52     	; 0x35be <menuOnEnterTune+0x172>
    358a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.3020>
    358e:	86 17       	cp	r24, r22
    3590:	08 f0       	brcs	.+2      	; 0x3594 <menuOnEnterTune+0x148>
    3592:	43 c0       	rjmp	.+134    	; 0x361a <menuOnEnterTune+0x1ce>
    3594:	40 e0       	ldi	r20, 0x00	; 0
    3596:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    359a:	0e 94 10 33 	call	0x6620	; 0x6620 <manual_NoteOnOff>
    359e:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    35a2:	61 50       	subi	r22, 0x01	; 1
    35a4:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    35a8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3022>
    35ac:	81 30       	cpi	r24, 0x01	; 1
    35ae:	b9 f5       	brne	.+110    	; 0x361e <menuOnEnterTune+0x1d2>
    35b0:	41 e0       	ldi	r20, 0x01	; 1
    35b2:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    35b6:	0e 94 10 33 	call	0x6620	; 0x6620 <manual_NoteOnOff>
    35ba:	cf ef       	ldi	r28, 0xFF	; 255
    35bc:	33 c0       	rjmp	.+102    	; 0x3624 <menuOnEnterTune+0x1d8>
    35be:	83 30       	cpi	r24, 0x03	; 3
    35c0:	91 f4       	brne	.+36     	; 0x35e6 <menuOnEnterTune+0x19a>
    35c2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3022>
    35c6:	81 11       	cpse	r24, r1
    35c8:	04 c0       	rjmp	.+8      	; 0x35d2 <menuOnEnterTune+0x186>
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.3022>
    35d0:	02 c0       	rjmp	.+4      	; 0x35d6 <menuOnEnterTune+0x18a>
    35d2:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.3022>
    35d6:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.3022>
    35da:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    35de:	0e 94 10 33 	call	0x6620	; 0x6620 <manual_NoteOnOff>
    35e2:	cf ef       	ldi	r28, 0xFF	; 255
    35e4:	1f c0       	rjmp	.+62     	; 0x3624 <menuOnEnterTune+0x1d8>
    35e6:	82 30       	cpi	r24, 0x02	; 2
    35e8:	11 f0       	breq	.+4      	; 0x35ee <menuOnEnterTune+0x1a2>
    35ea:	86 30       	cpi	r24, 0x06	; 6
    35ec:	39 f4       	brne	.+14     	; 0x35fc <menuOnEnterTune+0x1b0>
    35ee:	40 e0       	ldi	r20, 0x00	; 0
    35f0:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    35f4:	0e 94 10 33 	call	0x6620	; 0x6620 <manual_NoteOnOff>
    35f8:	c0 e0       	ldi	r28, 0x00	; 0
    35fa:	14 c0       	rjmp	.+40     	; 0x3624 <menuOnEnterTune+0x1d8>
    35fc:	85 30       	cpi	r24, 0x05	; 5
    35fe:	89 f4       	brne	.+34     	; 0x3622 <menuOnEnterTune+0x1d6>
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3606:	0e 94 10 33 	call	0x6620	; 0x6620 <manual_NoteOnOff>
    360a:	c0 e0       	ldi	r28, 0x00	; 0
    360c:	0b c0       	rjmp	.+22     	; 0x3624 <menuOnEnterTune+0x1d8>
    360e:	c0 e0       	ldi	r28, 0x00	; 0
    3610:	09 c0       	rjmp	.+18     	; 0x3624 <menuOnEnterTune+0x1d8>
    3612:	cf ef       	ldi	r28, 0xFF	; 255
    3614:	07 c0       	rjmp	.+14     	; 0x3624 <menuOnEnterTune+0x1d8>
    3616:	cf ef       	ldi	r28, 0xFF	; 255
    3618:	05 c0       	rjmp	.+10     	; 0x3624 <menuOnEnterTune+0x1d8>
    361a:	cf ef       	ldi	r28, 0xFF	; 255
    361c:	03 c0       	rjmp	.+6      	; 0x3624 <menuOnEnterTune+0x1d8>
    361e:	cf ef       	ldi	r28, 0xFF	; 255
    3620:	01 c0       	rjmp	.+2      	; 0x3624 <menuOnEnterTune+0x1d8>
    3622:	cf ef       	ldi	r28, 0xFF	; 255
    3624:	cf 3f       	cpi	r28, 0xFF	; 255
    3626:	61 f5       	brne	.+88     	; 0x3680 <menuOnEnterTune+0x234>
    3628:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    362c:	8f 3f       	cpi	r24, 0xFF	; 255
    362e:	29 f1       	breq	.+74     	; 0x367a <menuOnEnterTune+0x22e>
    3630:	8e e1       	ldi	r24, 0x1E	; 30
    3632:	1d d8       	rcall	.-4038   	; 0x266e <lcd_goto>
    3634:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    3638:	0e 94 ed 3b 	call	0x77da	; 0x77da <lcd_noteOut>
    363c:	80 e2       	ldi	r24, 0x20	; 32
    363e:	41 d8       	rcall	.-3966   	; 0x26c2 <lcd_putc>
    3640:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3022>
    3644:	81 11       	cpse	r24, r1
    3646:	07 c0       	rjmp	.+14     	; 0x3656 <menuOnEnterTune+0x20a>
    3648:	81 e6       	ldi	r24, 0x61	; 97
    364a:	3b d8       	rcall	.-3978   	; 0x26c2 <lcd_putc>
    364c:	85 e7       	ldi	r24, 0x75	; 117
    364e:	39 d8       	rcall	.-3982   	; 0x26c2 <lcd_putc>
    3650:	83 e7       	ldi	r24, 0x73	; 115
    3652:	37 d8       	rcall	.-3986   	; 0x26c2 <lcd_putc>
    3654:	06 c0       	rjmp	.+12     	; 0x3662 <menuOnEnterTune+0x216>
    3656:	85 e6       	ldi	r24, 0x65	; 101
    3658:	34 d8       	rcall	.-3992   	; 0x26c2 <lcd_putc>
    365a:	89 e6       	ldi	r24, 0x69	; 105
    365c:	32 d8       	rcall	.-3996   	; 0x26c2 <lcd_putc>
    365e:	8e e6       	ldi	r24, 0x6E	; 110
    3660:	30 d8       	rcall	.-4000   	; 0x26c2 <lcd_putc>
    3662:	61 e0       	ldi	r22, 0x01	; 1
    3664:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.3022>
    3668:	81 11       	cpse	r24, r1
    366a:	01 c0       	rjmp	.+2      	; 0x366e <menuOnEnterTune+0x222>
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <keylabel_statcheck>
    3674:	81 11       	cpse	r24, r1
    3676:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
    367a:	8e e1       	ldi	r24, 0x1E	; 30
    367c:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    3680:	8c 2f       	mov	r24, r28
    3682:	cf 91       	pop	r28
    3684:	08 95       	ret

00003686 <menuOnExitMidiActiveSense>:
    3686:	0e 94 43 0c 	call	0x1886	; 0x1886 <eeprom_UpdateMidiOutMap>
    368a:	80 e0       	ldi	r24, 0x00	; 0
    368c:	08 95       	ret

0000368e <menuOnExitMidiOut>:
    368e:	0e 94 43 0c 	call	0x1886	; 0x1886 <eeprom_UpdateMidiOutMap>
    3692:	80 e0       	ldi	r24, 0x00	; 0
    3694:	08 95       	ret

00003696 <menuOnExitMidiIn>:
    3696:	0e 94 21 0c 	call	0x1842	; 0x1842 <eeprom_UpdateMidiInMap>
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	08 95       	ret

0000369e <menuOnExitManual>:
    369e:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <eeprom_UpdateManualMap>
    36a2:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <registers_CalcCount>
    36a6:	0e 94 df 0c 	call	0x19be	; 0x19be <eeprom_UpdateReg>
    36aa:	0e 94 15 32 	call	0x642a	; 0x642a <Midi_updateManualRange>
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	08 95       	ret

000036b2 <menuOnExitModules>:
    36b2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <eeprom_UpdateModules>
    36b6:	80 e0       	ldi	r24, 0x00	; 0
    36b8:	08 95       	ret

000036ba <menuOnEnterUSBprotokoll>:
    36ba:	cf 93       	push	r28
    36bc:	83 e8       	ldi	r24, 0x83	; 131
    36be:	93 e0       	ldi	r25, 0x03	; 3
    36c0:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    36c4:	61 d8       	rcall	.-3902   	; 0x2788 <log_count>
    36c6:	81 11       	cpse	r24, r1
    36c8:	17 c0       	rjmp	.+46     	; 0x36f8 <menuOnEnterUSBprotokoll+0x3e>
    36ca:	89 e8       	ldi	r24, 0x89	; 137
    36cc:	93 e0       	ldi	r25, 0x03	; 3
    36ce:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    36d2:	16 c0       	rjmp	.+44     	; 0x3700 <menuOnEnterUSBprotokoll+0x46>
    36d4:	6f ef       	ldi	r22, 0xFF	; 255
    36d6:	8c 2f       	mov	r24, r28
    36d8:	f8 d9       	rcall	.-3088   	; 0x2aca <log_getShortTextFromIndex>
    36da:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    36de:	8e e3       	ldi	r24, 0x3E	; 62
    36e0:	93 e1       	ldi	r25, 0x13	; 19
    36e2:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    36e6:	8c 2f       	mov	r24, r28
    36e8:	96 d8       	rcall	.-3796   	; 0x2816 <log_getErrorText>
    36ea:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    36ee:	8e e3       	ldi	r24, 0x3E	; 62
    36f0:	93 e1       	ldi	r25, 0x13	; 19
    36f2:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    36f6:	8c 2f       	mov	r24, r28
    36f8:	cf ef       	ldi	r28, 0xFF	; 255
    36fa:	c8 0f       	add	r28, r24
    36fc:	81 11       	cpse	r24, r1
    36fe:	ea cf       	rjmp	.-44     	; 0x36d4 <menuOnEnterUSBprotokoll+0x1a>
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	cf 91       	pop	r28
    3704:	08 95       	ret

00003706 <menuOnExitUSBactive>:
    3706:	0e 94 9d 0c 	call	0x193a	; 0x193a <eeprom_UpdateUSB>
    370a:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    370e:	8f 3f       	cpi	r24, 0xFF	; 255
    3710:	61 f4       	brne	.+24     	; 0x372a <menuOnExitUSBactive+0x24>
    3712:	8a e6       	ldi	r24, 0x6A	; 106
    3714:	93 e0       	ldi	r25, 0x03	; 3
    3716:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    371a:	8e e9       	ldi	r24, 0x9E	; 158
    371c:	92 e1       	ldi	r25, 0x12	; 18
    371e:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3722:	8e e3       	ldi	r24, 0x3E	; 62
    3724:	93 e1       	ldi	r25, 0x13	; 19
    3726:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	08 95       	ret

0000372e <menuOnEnterUSBsendHW>:
    372e:	9f 92       	push	r9
    3730:	af 92       	push	r10
    3732:	bf 92       	push	r11
    3734:	cf 92       	push	r12
    3736:	df 92       	push	r13
    3738:	ef 92       	push	r14
    373a:	ff 92       	push	r15
    373c:	0f 93       	push	r16
    373e:	1f 93       	push	r17
    3740:	cf 93       	push	r28
    3742:	df 93       	push	r29
    3744:	81 e5       	ldi	r24, 0x51	; 81
    3746:	93 e0       	ldi	r25, 0x03	; 3
    3748:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    374c:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3750:	8e e3       	ldi	r24, 0x3E	; 62
    3752:	93 e0       	ldi	r25, 0x03	; 3
    3754:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3758:	c5 e5       	ldi	r28, 0x55	; 85
    375a:	d3 e0       	ldi	r29, 0x03	; 3
    375c:	61 ee       	ldi	r22, 0xE1	; 225
    375e:	78 e1       	ldi	r23, 0x18	; 24
    3760:	88 81       	ld	r24, Y
    3762:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    3766:	22 e7       	ldi	r18, 0x72	; 114
    3768:	fc 01       	movw	r30, r24
    376a:	20 83       	st	Z, r18
    376c:	bc 01       	movw	r22, r24
    376e:	6e 5f       	subi	r22, 0xFE	; 254
    3770:	7f 4f       	sbci	r23, 0xFF	; 255
    3772:	20 e2       	ldi	r18, 0x20	; 32
    3774:	21 83       	std	Z+1, r18	; 0x01
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    377c:	27 e7       	ldi	r18, 0x77	; 119
    377e:	fc 01       	movw	r30, r24
    3780:	20 83       	st	Z, r18
    3782:	81 ee       	ldi	r24, 0xE1	; 225
    3784:	98 e1       	ldi	r25, 0x18	; 24
    3786:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    378a:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    378e:	8c e2       	ldi	r24, 0x2C	; 44
    3790:	93 e0       	ldi	r25, 0x03	; 3
    3792:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3796:	61 ee       	ldi	r22, 0xE1	; 225
    3798:	78 e1       	ldi	r23, 0x18	; 24
    379a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    379e:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    37a2:	81 ee       	ldi	r24, 0xE1	; 225
    37a4:	98 e1       	ldi	r25, 0x18	; 24
    37a6:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    37aa:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    37ae:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    37b2:	e1 2c       	mov	r14, r1
    37b4:	d1 c0       	rjmp	.+418    	; 0x3958 <menuOnEnterUSBsendHW+0x22a>
    37b6:	83 e2       	ldi	r24, 0x23	; 35
    37b8:	93 e0       	ldi	r25, 0x03	; 3
    37ba:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    37be:	61 ee       	ldi	r22, 0xE1	; 225
    37c0:	78 e1       	ldi	r23, 0x18	; 24
    37c2:	8e 2d       	mov	r24, r14
    37c4:	0e 94 a6 3b 	call	0x774c	; 0x774c <putChar_Manual>
    37c8:	81 ee       	ldi	r24, 0xE1	; 225
    37ca:	98 e1       	ldi	r25, 0x18	; 24
    37cc:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    37d0:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    37d4:	f1 2c       	mov	r15, r1
    37d6:	a4 c0       	rjmp	.+328    	; 0x3920 <menuOnEnterUSBsendHW+0x1f2>
    37d8:	8c e1       	ldi	r24, 0x1C	; 28
    37da:	93 e0       	ldi	r25, 0x03	; 3
    37dc:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    37e0:	80 e3       	ldi	r24, 0x30	; 48
    37e2:	8f 0d       	add	r24, r15
    37e4:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    37e8:	8a e3       	ldi	r24, 0x3A	; 58
    37ea:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    37ee:	80 e2       	ldi	r24, 0x20	; 32
    37f0:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    37f4:	0e 2d       	mov	r16, r14
    37f6:	10 e0       	ldi	r17, 0x00	; 0
    37f8:	cf 2c       	mov	r12, r15
    37fa:	d1 2c       	mov	r13, r1
    37fc:	e6 01       	movw	r28, r12
    37fe:	cc 0f       	add	r28, r28
    3800:	dd 1f       	adc	r29, r29
    3802:	ce 01       	movw	r24, r28
    3804:	8c 0d       	add	r24, r12
    3806:	9d 1d       	adc	r25, r13
    3808:	e8 01       	movw	r28, r16
    380a:	cc 0f       	add	r28, r28
    380c:	dd 1f       	adc	r29, r29
    380e:	c0 0f       	add	r28, r16
    3810:	d1 1f       	adc	r29, r17
    3812:	cc 0f       	add	r28, r28
    3814:	dd 1f       	adc	r29, r29
    3816:	cc 0f       	add	r28, r28
    3818:	dd 1f       	adc	r29, r29
    381a:	c8 0f       	add	r28, r24
    381c:	d9 1f       	adc	r29, r25
    381e:	cc 5c       	subi	r28, 0xCC	; 204
    3820:	d6 4f       	sbci	r29, 0xF6	; 246
    3822:	61 ee       	ldi	r22, 0xE1	; 225
    3824:	78 e1       	ldi	r23, 0x18	; 24
    3826:	88 81       	ld	r24, Y
    3828:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    382c:	bc 01       	movw	r22, r24
    382e:	6f 5f       	subi	r22, 0xFF	; 255
    3830:	7f 4f       	sbci	r23, 0xFF	; 255
    3832:	0f 2e       	mov	r0, r31
    3834:	fe e2       	ldi	r31, 0x2E	; 46
    3836:	bf 2e       	mov	r11, r31
    3838:	f0 2d       	mov	r31, r0
    383a:	fc 01       	movw	r30, r24
    383c:	b0 82       	st	Z, r11
    383e:	89 81       	ldd	r24, Y+1	; 0x01
    3840:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    3844:	bc 01       	movw	r22, r24
    3846:	6f 5f       	subi	r22, 0xFF	; 255
    3848:	7f 4f       	sbci	r23, 0xFF	; 255
    384a:	fc 01       	movw	r30, r24
    384c:	b0 82       	st	Z, r11
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    3854:	fc 01       	movw	r30, r24
    3856:	80 e2       	ldi	r24, 0x20	; 32
    3858:	80 83       	st	Z, r24
    385a:	9d e3       	ldi	r25, 0x3D	; 61
    385c:	91 83       	std	Z+1, r25	; 0x01
    385e:	82 83       	std	Z+2, r24	; 0x02
    3860:	81 ee       	ldi	r24, 0xE1	; 225
    3862:	98 e1       	ldi	r25, 0x18	; 24
    3864:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    3868:	88 81       	ld	r24, Y
    386a:	88 23       	and	r24, r24
    386c:	2c f4       	brge	.+10     	; 0x3878 <menuOnEnterUSBsendHW+0x14a>
    386e:	8a e0       	ldi	r24, 0x0A	; 10
    3870:	93 e0       	ldi	r25, 0x03	; 3
    3872:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3876:	51 c0       	rjmp	.+162    	; 0x391a <menuOnEnterUSBsendHW+0x1ec>
    3878:	61 ee       	ldi	r22, 0xE1	; 225
    387a:	78 e1       	ldi	r23, 0x18	; 24
    387c:	0e 94 4a 3b 	call	0x7694	; 0x7694 <putChar_Note>
    3880:	bc 01       	movw	r22, r24
    3882:	6f 5f       	subi	r22, 0xFF	; 255
    3884:	7f 4f       	sbci	r23, 0xFF	; 255
    3886:	0f 2e       	mov	r0, r31
    3888:	fd e2       	ldi	r31, 0x2D	; 45
    388a:	9f 2e       	mov	r9, r31
    388c:	f0 2d       	mov	r31, r0
    388e:	fc 01       	movw	r30, r24
    3890:	90 82       	st	Z, r9
    3892:	f6 01       	movw	r30, r12
    3894:	ee 0f       	add	r30, r30
    3896:	ff 1f       	adc	r31, r31
    3898:	ce 0e       	add	r12, r30
    389a:	df 1e       	adc	r13, r31
    389c:	58 01       	movw	r10, r16
    389e:	aa 0c       	add	r10, r10
    38a0:	bb 1c       	adc	r11, r11
    38a2:	e5 01       	movw	r28, r10
    38a4:	c0 0f       	add	r28, r16
    38a6:	d1 1f       	adc	r29, r17
    38a8:	cc 0f       	add	r28, r28
    38aa:	dd 1f       	adc	r29, r29
    38ac:	cc 0f       	add	r28, r28
    38ae:	dd 1f       	adc	r29, r29
    38b0:	cc 0d       	add	r28, r12
    38b2:	dd 1d       	adc	r29, r13
    38b4:	cc 5c       	subi	r28, 0xCC	; 204
    38b6:	d6 4f       	sbci	r29, 0xF6	; 246
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	0e 94 4a 3b 	call	0x7694	; 0x7694 <putChar_Note>
    38be:	20 e2       	ldi	r18, 0x20	; 32
    38c0:	fc 01       	movw	r30, r24
    38c2:	20 83       	st	Z, r18
    38c4:	11 82       	std	Z+1, r1	; 0x01
    38c6:	81 ee       	ldi	r24, 0xE1	; 225
    38c8:	98 e1       	ldi	r25, 0x18	; 24
    38ca:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    38ce:	82 e0       	ldi	r24, 0x02	; 2
    38d0:	93 e0       	ldi	r25, 0x03	; 3
    38d2:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    38d6:	8a 81       	ldd	r24, Y+2	; 0x02
    38d8:	82 95       	swap	r24
    38da:	86 95       	lsr	r24
    38dc:	87 70       	andi	r24, 0x07	; 7
    38de:	80 5d       	subi	r24, 0xD0	; 208
    38e0:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    38e4:	8a ef       	ldi	r24, 0xFA	; 250
    38e6:	92 e0       	ldi	r25, 0x02	; 2
    38e8:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    38ec:	8a 81       	ldd	r24, Y+2	; 0x02
    38ee:	61 ee       	ldi	r22, 0xE1	; 225
    38f0:	78 e1       	ldi	r23, 0x18	; 24
    38f2:	8f 71       	andi	r24, 0x1F	; 31
    38f4:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    38f8:	bc 01       	movw	r22, r24
    38fa:	6f 5f       	subi	r22, 0xFF	; 255
    38fc:	7f 4f       	sbci	r23, 0xFF	; 255
    38fe:	fc 01       	movw	r30, r24
    3900:	90 82       	st	Z, r9
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	99 81       	ldd	r25, Y+1	; 0x01
    3906:	28 81       	ld	r18, Y
    3908:	8f 71       	andi	r24, 0x1F	; 31
    390a:	89 0f       	add	r24, r25
    390c:	82 1b       	sub	r24, r18
    390e:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    3912:	81 ee       	ldi	r24, 0xE1	; 225
    3914:	98 e1       	ldi	r25, 0x18	; 24
    3916:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    391a:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    391e:	f3 94       	inc	r15
    3920:	f3 e0       	ldi	r31, 0x03	; 3
    3922:	ff 15       	cp	r31, r15
    3924:	08 f0       	brcs	.+2      	; 0x3928 <menuOnEnterUSBsendHW+0x1fa>
    3926:	58 cf       	rjmp	.-336    	; 0x37d8 <menuOnEnterUSBsendHW+0xaa>
    3928:	88 ed       	ldi	r24, 0xD8	; 216
    392a:	92 e0       	ldi	r25, 0x02	; 2
    392c:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3930:	ee 2d       	mov	r30, r14
    3932:	f0 e0       	ldi	r31, 0x00	; 0
    3934:	ee 0f       	add	r30, r30
    3936:	ff 1f       	adc	r31, r31
    3938:	e8 5d       	subi	r30, 0xD8	; 216
    393a:	f6 4f       	sbci	r31, 0xF6	; 246
    393c:	61 ee       	ldi	r22, 0xE1	; 225
    393e:	78 e1       	ldi	r23, 0x18	; 24
    3940:	81 81       	ldd	r24, Z+1	; 0x01
    3942:	0e 94 0a 3b 	call	0x7614	; 0x7614 <putChar_MidiChan>
    3946:	81 ee       	ldi	r24, 0xE1	; 225
    3948:	98 e1       	ldi	r25, 0x18	; 24
    394a:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    394e:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3952:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3956:	e3 94       	inc	r14
    3958:	83 e0       	ldi	r24, 0x03	; 3
    395a:	8e 15       	cp	r24, r14
    395c:	08 f0       	brcs	.+2      	; 0x3960 <menuOnEnterUSBsendHW+0x232>
    395e:	2b cf       	rjmp	.-426    	; 0x37b6 <menuOnEnterUSBsendHW+0x88>
    3960:	80 e1       	ldi	r24, 0x10	; 16
    3962:	93 e0       	ldi	r25, 0x03	; 3
    3964:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3968:	f1 2c       	mov	r15, r1
    396a:	94 c0       	rjmp	.+296    	; 0x3a94 <menuOnEnterUSBsendHW+0x366>
    396c:	8c e1       	ldi	r24, 0x1C	; 28
    396e:	93 e0       	ldi	r25, 0x03	; 3
    3970:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3974:	80 e3       	ldi	r24, 0x30	; 48
    3976:	8f 0d       	add	r24, r15
    3978:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    397c:	8a e3       	ldi	r24, 0x3A	; 58
    397e:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    3982:	80 e2       	ldi	r24, 0x20	; 32
    3984:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    3988:	cf 2d       	mov	r28, r15
    398a:	d0 e0       	ldi	r29, 0x00	; 0
    398c:	8e 01       	movw	r16, r28
    398e:	00 0f       	add	r16, r16
    3990:	11 1f       	adc	r17, r17
    3992:	0c 0f       	add	r16, r28
    3994:	1d 1f       	adc	r17, r29
    3996:	09 50       	subi	r16, 0x09	; 9
    3998:	18 4f       	sbci	r17, 0xF8	; 248
    399a:	61 ee       	ldi	r22, 0xE1	; 225
    399c:	78 e1       	ldi	r23, 0x18	; 24
    399e:	f8 01       	movw	r30, r16
    39a0:	80 81       	ld	r24, Z
    39a2:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    39a6:	bc 01       	movw	r22, r24
    39a8:	6f 5f       	subi	r22, 0xFF	; 255
    39aa:	7f 4f       	sbci	r23, 0xFF	; 255
    39ac:	0f 2e       	mov	r0, r31
    39ae:	fe e2       	ldi	r31, 0x2E	; 46
    39b0:	ef 2e       	mov	r14, r31
    39b2:	f0 2d       	mov	r31, r0
    39b4:	fc 01       	movw	r30, r24
    39b6:	e0 82       	st	Z, r14
    39b8:	f8 01       	movw	r30, r16
    39ba:	81 81       	ldd	r24, Z+1	; 0x01
    39bc:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    39c0:	bc 01       	movw	r22, r24
    39c2:	6f 5f       	subi	r22, 0xFF	; 255
    39c4:	7f 4f       	sbci	r23, 0xFF	; 255
    39c6:	fc 01       	movw	r30, r24
    39c8:	e0 82       	st	Z, r14
    39ca:	f8 01       	movw	r30, r16
    39cc:	82 81       	ldd	r24, Z+2	; 0x02
    39ce:	0e 94 f2 3a 	call	0x75e4	; 0x75e4 <putChar_hex>
    39d2:	fc 01       	movw	r30, r24
    39d4:	80 e2       	ldi	r24, 0x20	; 32
    39d6:	80 83       	st	Z, r24
    39d8:	9d e3       	ldi	r25, 0x3D	; 61
    39da:	91 83       	std	Z+1, r25	; 0x01
    39dc:	82 83       	std	Z+2, r24	; 0x02
    39de:	13 82       	std	Z+3, r1	; 0x03
    39e0:	81 ee       	ldi	r24, 0xE1	; 225
    39e2:	98 e1       	ldi	r25, 0x18	; 24
    39e4:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    39e8:	f8 01       	movw	r30, r16
    39ea:	80 81       	ld	r24, Z
    39ec:	8f 3f       	cpi	r24, 0xFF	; 255
    39ee:	29 f4       	brne	.+10     	; 0x39fa <menuOnEnterUSBsendHW+0x2cc>
    39f0:	8a e0       	ldi	r24, 0x0A	; 10
    39f2:	93 e0       	ldi	r25, 0x03	; 3
    39f4:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    39f8:	4a c0       	rjmp	.+148    	; 0x3a8e <menuOnEnterUSBsendHW+0x360>
    39fa:	e1 ee       	ldi	r30, 0xE1	; 225
    39fc:	f8 e1       	ldi	r31, 0x18	; 24
    39fe:	92 e5       	ldi	r25, 0x52	; 82
    3a00:	90 83       	st	Z, r25
    3a02:	9e e2       	ldi	r25, 0x2E	; 46
    3a04:	91 83       	std	Z+1, r25	; 0x01
    3a06:	63 ee       	ldi	r22, 0xE3	; 227
    3a08:	78 e1       	ldi	r23, 0x18	; 24
    3a0a:	8f 5f       	subi	r24, 0xFF	; 255
    3a0c:	0e 94 cb 3a 	call	0x7596	; 0x7596 <putChar_Dec>
    3a10:	bc 01       	movw	r22, r24
    3a12:	6f 5f       	subi	r22, 0xFF	; 255
    3a14:	7f 4f       	sbci	r23, 0xFF	; 255
    3a16:	1d e2       	ldi	r17, 0x2D	; 45
    3a18:	fc 01       	movw	r30, r24
    3a1a:	10 83       	st	Z, r17
    3a1c:	ce 01       	movw	r24, r28
    3a1e:	88 0f       	add	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	c8 0f       	add	r28, r24
    3a24:	d9 1f       	adc	r29, r25
    3a26:	c9 50       	subi	r28, 0x09	; 9
    3a28:	d8 4f       	sbci	r29, 0xF8	; 248
    3a2a:	89 81       	ldd	r24, Y+1	; 0x01
    3a2c:	8f 5f       	subi	r24, 0xFF	; 255
    3a2e:	0e 94 cb 3a 	call	0x7596	; 0x7596 <putChar_Dec>
    3a32:	20 e2       	ldi	r18, 0x20	; 32
    3a34:	fc 01       	movw	r30, r24
    3a36:	20 83       	st	Z, r18
    3a38:	11 82       	std	Z+1, r1	; 0x01
    3a3a:	81 ee       	ldi	r24, 0xE1	; 225
    3a3c:	98 e1       	ldi	r25, 0x18	; 24
    3a3e:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    3a42:	82 e0       	ldi	r24, 0x02	; 2
    3a44:	93 e0       	ldi	r25, 0x03	; 3
    3a46:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a4c:	82 95       	swap	r24
    3a4e:	86 95       	lsr	r24
    3a50:	87 70       	andi	r24, 0x07	; 7
    3a52:	80 5d       	subi	r24, 0xD0	; 208
    3a54:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <serial0SER_USBSend>
    3a58:	8a ef       	ldi	r24, 0xFA	; 250
    3a5a:	92 e0       	ldi	r25, 0x02	; 2
    3a5c:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3a60:	8a 81       	ldd	r24, Y+2	; 0x02
    3a62:	61 ee       	ldi	r22, 0xE1	; 225
    3a64:	78 e1       	ldi	r23, 0x18	; 24
    3a66:	8f 71       	andi	r24, 0x1F	; 31
    3a68:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	6f 5f       	subi	r22, 0xFF	; 255
    3a70:	7f 4f       	sbci	r23, 0xFF	; 255
    3a72:	fc 01       	movw	r30, r24
    3a74:	10 83       	st	Z, r17
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	99 81       	ldd	r25, Y+1	; 0x01
    3a7a:	28 81       	ld	r18, Y
    3a7c:	8f 71       	andi	r24, 0x1F	; 31
    3a7e:	89 0f       	add	r24, r25
    3a80:	82 1b       	sub	r24, r18
    3a82:	0e 94 af 3a 	call	0x755e	; 0x755e <putChar_Dec2>
    3a86:	81 ee       	ldi	r24, 0xE1	; 225
    3a88:	98 e1       	ldi	r25, 0x18	; 24
    3a8a:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    3a8e:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3a92:	f3 94       	inc	r15
    3a94:	f7 e0       	ldi	r31, 0x07	; 7
    3a96:	ff 15       	cp	r31, r15
    3a98:	08 f0       	brcs	.+2      	; 0x3a9c <menuOnEnterUSBsendHW+0x36e>
    3a9a:	68 cf       	rjmp	.-304    	; 0x396c <menuOnEnterUSBsendHW+0x23e>
    3a9c:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3aa0:	8f ec       	ldi	r24, 0xCF	; 207
    3aa2:	92 e0       	ldi	r25, 0x02	; 2
    3aa4:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3aa8:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3aac:	e1 2c       	mov	r14, r1
    3aae:	90 e0       	ldi	r25, 0x00	; 0
    3ab0:	64 c0       	rjmp	.+200    	; 0x3b7a <menuOnEnterUSBsendHW+0x44c>
    3ab2:	ce 2d       	mov	r28, r14
    3ab4:	d0 e0       	ldi	r29, 0x00	; 0
    3ab6:	0f 2d       	mov	r16, r15
    3ab8:	10 e0       	ldi	r17, 0x00	; 0
    3aba:	fe 01       	movw	r30, r28
    3abc:	ee 0f       	add	r30, r30
    3abe:	ff 1f       	adc	r31, r31
    3ac0:	ee 0f       	add	r30, r30
    3ac2:	ff 1f       	adc	r31, r31
    3ac4:	e0 0f       	add	r30, r16
    3ac6:	f1 1f       	adc	r31, r17
    3ac8:	ee 0f       	add	r30, r30
    3aca:	ff 1f       	adc	r31, r31
    3acc:	ee 0f       	add	r30, r30
    3ace:	ff 1f       	adc	r31, r31
    3ad0:	e8 5d       	subi	r30, 0xD8	; 216
    3ad2:	f7 4f       	sbci	r31, 0xF7	; 247
    3ad4:	80 81       	ld	r24, Z
    3ad6:	8f 3f       	cpi	r24, 0xFF	; 255
    3ad8:	09 f4       	brne	.+2      	; 0x3adc <menuOnEnterUSBsendHW+0x3ae>
    3ada:	47 c0       	rjmp	.+142    	; 0x3b6a <menuOnEnterUSBsendHW+0x43c>
    3adc:	61 ee       	ldi	r22, 0xE1	; 225
    3ade:	78 e1       	ldi	r23, 0x18	; 24
    3ae0:	8e 2d       	mov	r24, r14
    3ae2:	0e 94 0a 3b 	call	0x7614	; 0x7614 <putChar_MidiChan>
    3ae6:	bc 01       	movw	r22, r24
    3ae8:	6f 5f       	subi	r22, 0xFF	; 255
    3aea:	7f 4f       	sbci	r23, 0xFF	; 255
    3aec:	0f 2e       	mov	r0, r31
    3aee:	f8 e2       	ldi	r31, 0x28	; 40
    3af0:	df 2e       	mov	r13, r31
    3af2:	f0 2d       	mov	r31, r0
    3af4:	fc 01       	movw	r30, r24
    3af6:	d0 82       	st	Z, r13
    3af8:	cc 0f       	add	r28, r28
    3afa:	dd 1f       	adc	r29, r29
    3afc:	cc 0f       	add	r28, r28
    3afe:	dd 1f       	adc	r29, r29
    3b00:	c0 0f       	add	r28, r16
    3b02:	d1 1f       	adc	r29, r17
    3b04:	cc 0f       	add	r28, r28
    3b06:	dd 1f       	adc	r29, r29
    3b08:	cc 0f       	add	r28, r28
    3b0a:	dd 1f       	adc	r29, r29
    3b0c:	c8 5d       	subi	r28, 0xD8	; 216
    3b0e:	d7 4f       	sbci	r29, 0xF7	; 247
    3b10:	89 81       	ldd	r24, Y+1	; 0x01
    3b12:	0e 94 4a 3b 	call	0x7694	; 0x7694 <putChar_Note>
    3b16:	bc 01       	movw	r22, r24
    3b18:	6f 5f       	subi	r22, 0xFF	; 255
    3b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b1c:	2d e2       	ldi	r18, 0x2D	; 45
    3b1e:	fc 01       	movw	r30, r24
    3b20:	20 83       	st	Z, r18
    3b22:	99 81       	ldd	r25, Y+1	; 0x01
    3b24:	8a 81       	ldd	r24, Y+2	; 0x02
    3b26:	89 0f       	add	r24, r25
    3b28:	0e 94 4a 3b 	call	0x7694	; 0x7694 <putChar_Note>
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	19 e2       	ldi	r17, 0x29	; 41
    3b30:	10 83       	st	Z, r17
    3b32:	80 e2       	ldi	r24, 0x20	; 32
    3b34:	81 83       	std	Z+1, r24	; 0x01
    3b36:	bf 01       	movw	r22, r30
    3b38:	6d 5f       	subi	r22, 0xFD	; 253
    3b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3c:	8e e3       	ldi	r24, 0x3E	; 62
    3b3e:	82 83       	std	Z+2, r24	; 0x02
    3b40:	88 81       	ld	r24, Y
    3b42:	0e 94 a6 3b 	call	0x774c	; 0x774c <putChar_Manual>
    3b46:	bc 01       	movw	r22, r24
    3b48:	6f 5f       	subi	r22, 0xFF	; 255
    3b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	d0 82       	st	Z, r13
    3b50:	8b 81       	ldd	r24, Y+3	; 0x03
    3b52:	0e 94 4a 3b 	call	0x7694	; 0x7694 <putChar_Note>
    3b56:	fc 01       	movw	r30, r24
    3b58:	10 83       	st	Z, r17
    3b5a:	11 82       	std	Z+1, r1	; 0x01
    3b5c:	81 ee       	ldi	r24, 0xE1	; 225
    3b5e:	98 e1       	ldi	r25, 0x18	; 24
    3b60:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    3b64:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3b68:	9f ef       	ldi	r25, 0xFF	; 255
    3b6a:	f3 94       	inc	r15
    3b6c:	01 c0       	rjmp	.+2      	; 0x3b70 <menuOnEnterUSBsendHW+0x442>
    3b6e:	f1 2c       	mov	r15, r1
    3b70:	f3 e0       	ldi	r31, 0x03	; 3
    3b72:	ff 15       	cp	r31, r15
    3b74:	08 f0       	brcs	.+2      	; 0x3b78 <menuOnEnterUSBsendHW+0x44a>
    3b76:	9d cf       	rjmp	.-198    	; 0x3ab2 <menuOnEnterUSBsendHW+0x384>
    3b78:	e3 94       	inc	r14
    3b7a:	8f e0       	ldi	r24, 0x0F	; 15
    3b7c:	8e 15       	cp	r24, r14
    3b7e:	b8 f7       	brcc	.-18     	; 0x3b6e <menuOnEnterUSBsendHW+0x440>
    3b80:	91 11       	cpse	r25, r1
    3b82:	06 c0       	rjmp	.+12     	; 0x3b90 <menuOnEnterUSBsendHW+0x462>
    3b84:	84 eb       	ldi	r24, 0xB4	; 180
    3b86:	92 e0       	ldi	r25, 0x02	; 2
    3b88:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3b8c:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3b90:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3b94:	85 ec       	ldi	r24, 0xC5	; 197
    3b96:	92 e0       	ldi	r25, 0x02	; 2
    3b98:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3b9c:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3ba0:	c0 e0       	ldi	r28, 0x00	; 0
    3ba2:	25 c0       	rjmp	.+74     	; 0x3bee <menuOnEnterUSBsendHW+0x4c0>
    3ba4:	61 ee       	ldi	r22, 0xE1	; 225
    3ba6:	78 e1       	ldi	r23, 0x18	; 24
    3ba8:	8c 2f       	mov	r24, r28
    3baa:	0e 94 a6 3b 	call	0x774c	; 0x774c <putChar_Manual>
    3bae:	dc 01       	movw	r26, r24
    3bb0:	bc 01       	movw	r22, r24
    3bb2:	6f 5f       	subi	r22, 0xFF	; 255
    3bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    3bb6:	8a e3       	ldi	r24, 0x3A	; 58
    3bb8:	8c 93       	st	X, r24
    3bba:	ec 2f       	mov	r30, r28
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	ee 0f       	add	r30, r30
    3bc0:	ff 1f       	adc	r31, r31
    3bc2:	e8 5d       	subi	r30, 0xD8	; 216
    3bc4:	f6 4f       	sbci	r31, 0xF6	; 246
    3bc6:	80 81       	ld	r24, Z
    3bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bca:	19 f0       	breq	.+6      	; 0x3bd2 <menuOnEnterUSBsendHW+0x4a4>
    3bcc:	0e 94 0a 3b 	call	0x7614	; 0x7614 <putChar_MidiChan>
    3bd0:	05 c0       	rjmp	.+10     	; 0x3bdc <menuOnEnterUSBsendHW+0x4ae>
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	02 96       	adiw	r24, 0x02	; 2
    3bd6:	2d e2       	ldi	r18, 0x2D	; 45
    3bd8:	11 96       	adiw	r26, 0x01	; 1
    3bda:	2c 93       	st	X, r18
    3bdc:	fc 01       	movw	r30, r24
    3bde:	10 82       	st	Z, r1
    3be0:	81 ee       	ldi	r24, 0xE1	; 225
    3be2:	98 e1       	ldi	r25, 0x18	; 24
    3be4:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    3be8:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3bec:	cf 5f       	subi	r28, 0xFF	; 255
    3bee:	c4 30       	cpi	r28, 0x04	; 4
    3bf0:	c8 f2       	brcs	.-78     	; 0x3ba4 <menuOnEnterUSBsendHW+0x476>
    3bf2:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3bf6:	89 eb       	ldi	r24, 0xB9	; 185
    3bf8:	92 e0       	ldi	r25, 0x02	; 2
    3bfa:	0e 94 0d 38 	call	0x701a	; 0x701a <serial0SER_USB_sendStringP>
    3bfe:	c6 e2       	ldi	r28, 0x26	; 38
    3c00:	d8 e0       	ldi	r29, 0x08	; 8
    3c02:	61 ee       	ldi	r22, 0xE1	; 225
    3c04:	78 e1       	ldi	r23, 0x18	; 24
    3c06:	88 81       	ld	r24, Y
    3c08:	0e 94 0a 3b 	call	0x7614	; 0x7614 <putChar_MidiChan>
    3c0c:	bc 01       	movw	r22, r24
    3c0e:	6f 5f       	subi	r22, 0xFF	; 255
    3c10:	7f 4f       	sbci	r23, 0xFF	; 255
    3c12:	2e e3       	ldi	r18, 0x3E	; 62
    3c14:	fc 01       	movw	r30, r24
    3c16:	20 83       	st	Z, r18
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	0e 94 0a 3b 	call	0x7614	; 0x7614 <putChar_MidiChan>
    3c1e:	fc 01       	movw	r30, r24
    3c20:	10 82       	st	Z, r1
    3c22:	81 ee       	ldi	r24, 0xE1	; 225
    3c24:	98 e1       	ldi	r25, 0x18	; 24
    3c26:	0e 94 61 38 	call	0x70c2	; 0x70c2 <serial0SER_USB_sendString>
    3c2a:	0e 94 1f 38 	call	0x703e	; 0x703e <serial0SER_USB_sendCRLF>
    3c2e:	80 e0       	ldi	r24, 0x00	; 0
    3c30:	df 91       	pop	r29
    3c32:	cf 91       	pop	r28
    3c34:	1f 91       	pop	r17
    3c36:	0f 91       	pop	r16
    3c38:	ff 90       	pop	r15
    3c3a:	ef 90       	pop	r14
    3c3c:	df 90       	pop	r13
    3c3e:	cf 90       	pop	r12
    3c40:	bf 90       	pop	r11
    3c42:	af 90       	pop	r10
    3c44:	9f 90       	pop	r9
    3c46:	08 95       	ret

00003c48 <reverseRegisterBits>:
    3c48:	1f 93       	push	r17
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	10 e0       	ldi	r17, 0x00	; 0
    3c50:	09 c0       	rjmp	.+18     	; 0x3c64 <reverseRegisterBits+0x1c>
    3c52:	c1 2f       	mov	r28, r17
    3c54:	d0 e0       	ldi	r29, 0x00	; 0
    3c56:	c3 59       	subi	r28, 0x93	; 147
    3c58:	da 4f       	sbci	r29, 0xFA	; 250
    3c5a:	88 81       	ld	r24, Y
    3c5c:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <reverse_Bits>
    3c60:	88 83       	st	Y, r24
    3c62:	1f 5f       	subi	r17, 0xFF	; 255
    3c64:	18 30       	cpi	r17, 0x08	; 8
    3c66:	a8 f3       	brcs	.-22     	; 0x3c52 <reverseRegisterBits+0xa>
    3c68:	df 91       	pop	r29
    3c6a:	cf 91       	pop	r28
    3c6c:	1f 91       	pop	r17
    3c6e:	08 95       	ret

00003c70 <menuOnUpdateRegister>:
    3c70:	8d e6       	ldi	r24, 0x6D	; 109
    3c72:	95 e0       	ldi	r25, 0x05	; 5
    3c74:	0e 94 5d 2f 	call	0x5eba	; 0x5eba <read_allRegister>
    3c78:	e7 df       	rcall	.-50     	; 0x3c48 <reverseRegisterBits>
    3c7a:	80 e0       	ldi	r24, 0x00	; 0
    3c7c:	08 95       	ret

00003c7e <menuOnEnterResetReg>:
    3c7e:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <midi_resetRegisters>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	f5 df       	rcall	.-22     	; 0x3c70 <menuOnUpdateRegister>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	08 95       	ret

00003c8a <menuOnExitLoadProgran>:
    3c8a:	86 30       	cpi	r24, 0x06	; 6
    3c8c:	31 f0       	breq	.+12     	; 0x3c9a <menuOnExitLoadProgran+0x10>
    3c8e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3c92:	80 34       	cpi	r24, 0x40	; 64
    3c94:	10 f4       	brcc	.+4      	; 0x3c9a <menuOnExitLoadProgran+0x10>
    3c96:	0e 94 48 30 	call	0x6090	; 0x6090 <program_toRegister>
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	e9 df       	rcall	.-46     	; 0x3c70 <menuOnUpdateRegister>
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	08 95       	ret

00003ca2 <softkeyCoupler>:
    3ca2:	cf 93       	push	r28
    3ca4:	c6 2f       	mov	r28, r22
    3ca6:	88 23       	and	r24, r24
    3ca8:	d9 f0       	breq	.+54     	; 0x3ce0 <softkeyCoupler+0x3e>
    3caa:	e6 2f       	mov	r30, r22
    3cac:	f0 e0       	ldi	r31, 0x00	; 0
    3cae:	df 01       	movw	r26, r30
    3cb0:	af 5e       	subi	r26, 0xEF	; 239
    3cb2:	b7 4f       	sbci	r27, 0xF7	; 247
    3cb4:	8c 91       	ld	r24, X
    3cb6:	81 11       	cpse	r24, r1
    3cb8:	08 c0       	rjmp	.+16     	; 0x3cca <softkeyCoupler+0x28>
    3cba:	86 2f       	mov	r24, r22
    3cbc:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <set_Coupler>
    3cc0:	88 23       	and	r24, r24
    3cc2:	71 f0       	breq	.+28     	; 0x3ce0 <softkeyCoupler+0x3e>
    3cc4:	0e 94 cf 33 	call	0x679e	; 0x679e <midi_ManualOff>
    3cc8:	0b c0       	rjmp	.+22     	; 0x3ce0 <softkeyCoupler+0x3e>
    3cca:	df 01       	movw	r26, r30
    3ccc:	af 5e       	subi	r26, 0xEF	; 239
    3cce:	b7 4f       	sbci	r27, 0xF7	; 247
    3cd0:	1c 92       	st	X, r1
    3cd2:	ee 0f       	add	r30, r30
    3cd4:	ff 1f       	adc	r31, r31
    3cd6:	e4 54       	subi	r30, 0x44	; 68
    3cd8:	fd 4e       	sbci	r31, 0xED	; 237
    3cda:	84 91       	lpm	r24, Z
    3cdc:	0e 94 cf 33 	call	0x679e	; 0x679e <midi_ManualOff>
    3ce0:	ec 2f       	mov	r30, r28
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	ef 5e       	subi	r30, 0xEF	; 239
    3ce6:	f7 4f       	sbci	r31, 0xF7	; 247
    3ce8:	80 81       	ld	r24, Z
    3cea:	81 11       	cpse	r24, r1
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <softkeyCoupler+0x50>
    3cee:	82 e8       	ldi	r24, 0x82	; 130
    3cf0:	01 c0       	rjmp	.+2      	; 0x3cf4 <softkeyCoupler+0x52>
    3cf2:	81 e8       	ldi	r24, 0x81	; 129
    3cf4:	cf 91       	pop	r28
    3cf6:	08 95       	ret

00003cf8 <softKeyCoupler2from3>:
    3cf8:	60 e0       	ldi	r22, 0x00	; 0
    3cfa:	d3 cf       	rjmp	.-90     	; 0x3ca2 <softkeyCoupler>
    3cfc:	08 95       	ret

00003cfe <softKeyCoupler1from3>:
    3cfe:	61 e0       	ldi	r22, 0x01	; 1
    3d00:	d0 cf       	rjmp	.-96     	; 0x3ca2 <softkeyCoupler>
    3d02:	08 95       	ret

00003d04 <softKeyCouplerPfrom3>:
    3d04:	63 e0       	ldi	r22, 0x03	; 3
    3d06:	cd cf       	rjmp	.-102    	; 0x3ca2 <softkeyCoupler>
    3d08:	08 95       	ret

00003d0a <softKeyCoupler1from2>:
    3d0a:	62 e0       	ldi	r22, 0x02	; 2
    3d0c:	ca cf       	rjmp	.-108    	; 0x3ca2 <softkeyCoupler>
    3d0e:	08 95       	ret

00003d10 <softKeyCouplerPfrom2>:
    3d10:	64 e0       	ldi	r22, 0x04	; 4
    3d12:	c7 cf       	rjmp	.-114    	; 0x3ca2 <softkeyCoupler>
    3d14:	08 95       	ret

00003d16 <softKeyCouplerPfrom1>:
    3d16:	65 e0       	ldi	r22, 0x05	; 5
    3d18:	c4 cf       	rjmp	.-120    	; 0x3ca2 <softkeyCoupler>
    3d1a:	08 95       	ret

00003d1c <softKeyCoupler3from2>:
    3d1c:	66 e0       	ldi	r22, 0x06	; 6
    3d1e:	c1 cf       	rjmp	.-126    	; 0x3ca2 <softkeyCoupler>
    3d20:	08 95       	ret

00003d22 <softKeyCoupler3from1>:
    3d22:	67 e0       	ldi	r22, 0x07	; 7
    3d24:	be cf       	rjmp	.-132    	; 0x3ca2 <softkeyCoupler>
    3d26:	08 95       	ret

00003d28 <softKeyCoupler3fromP>:
    3d28:	69 e0       	ldi	r22, 0x09	; 9
    3d2a:	bb cf       	rjmp	.-138    	; 0x3ca2 <softkeyCoupler>
    3d2c:	08 95       	ret

00003d2e <softKeyCoupler2from1>:
    3d2e:	68 e0       	ldi	r22, 0x08	; 8
    3d30:	b8 cf       	rjmp	.-144    	; 0x3ca2 <softkeyCoupler>
    3d32:	08 95       	ret

00003d34 <softKeyCoupler2fromP>:
    3d34:	6a e0       	ldi	r22, 0x0A	; 10
    3d36:	b5 cf       	rjmp	.-150    	; 0x3ca2 <softkeyCoupler>
    3d38:	08 95       	ret

00003d3a <softKeyCoupler1fromP>:
    3d3a:	6b e0       	ldi	r22, 0x0B	; 11
    3d3c:	b2 cf       	rjmp	.-156    	; 0x3ca2 <softkeyCoupler>
    3d3e:	08 95       	ret

00003d40 <send_progrChange_toMidiThru>:
    3d40:	cf 93       	push	r28
    3d42:	80 34       	cpi	r24, 0x40	; 64
    3d44:	60 f4       	brcc	.+24     	; 0x3d5e <send_progrChange_toMidiThru+0x1e>
    3d46:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <midiThrough+0x1>
    3d4a:	9f 3f       	cpi	r25, 0xFF	; 255
    3d4c:	41 f0       	breq	.+16     	; 0x3d5e <send_progrChange_toMidiThru+0x1e>
    3d4e:	c8 2f       	mov	r28, r24
    3d50:	89 2f       	mov	r24, r25
    3d52:	80 6c       	ori	r24, 0xC0	; 192
    3d54:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <serial1MIDISend>
    3d58:	8c 2f       	mov	r24, r28
    3d5a:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <serial1MIDISend>
    3d5e:	cf 91       	pop	r28
    3d60:	08 95       	ret

00003d62 <softKeyUpdateProg>:
    3d62:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d66:	80 34       	cpi	r24, 0x40	; 64
    3d68:	30 f4       	brcc	.+12     	; 0x3d76 <softKeyUpdateProg+0x14>
    3d6a:	ea df       	rcall	.-44     	; 0x3d40 <send_progrChange_toMidiThru>
    3d6c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d70:	0e 94 48 30 	call	0x6090	; 0x6090 <program_toRegister>
    3d74:	02 c0       	rjmp	.+4      	; 0x3d7a <softKeyUpdateProg+0x18>
    3d76:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <midi_resetRegisters>
    3d7a:	8f ef       	ldi	r24, 0xFF	; 255
    3d7c:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d80:	08 95       	ret

00003d82 <softKeyPrM>:
    3d82:	88 23       	and	r24, r24
    3d84:	34 f4       	brge	.+12     	; 0x3d92 <softKeyPrM+0x10>
    3d86:	0e 94 d3 30 	call	0x61a6	; 0x61a6 <midi_resetRegisters>
    3d8a:	8f ef       	ldi	r24, 0xFF	; 255
    3d8c:	0e 94 3e 30 	call	0x607c	; 0x607c <prog_set>
    3d90:	0e c0       	rjmp	.+28     	; 0x3dae <softKeyPrM+0x2c>
    3d92:	88 23       	and	r24, r24
    3d94:	61 f0       	breq	.+24     	; 0x3dae <softKeyPrM+0x2c>
    3d96:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d9a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d9c:	21 f4       	brne	.+8      	; 0x3da6 <softKeyPrM+0x24>
    3d9e:	8f e3       	ldi	r24, 0x3F	; 63
    3da0:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3da4:	03 c0       	rjmp	.+6      	; 0x3dac <softKeyPrM+0x2a>
    3da6:	81 50       	subi	r24, 0x01	; 1
    3da8:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3dac:	da df       	rcall	.-76     	; 0x3d62 <softKeyUpdateProg>
    3dae:	80 e0       	ldi	r24, 0x00	; 0
    3db0:	08 95       	ret

00003db2 <softKeyPrInc>:
    3db2:	88 23       	and	r24, r24
    3db4:	c1 f0       	breq	.+48     	; 0x3de6 <softKeyPrInc+0x34>
    3db6:	4c f4       	brge	.+18     	; 0x3dca <softKeyPrInc+0x18>
    3db8:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    3dbe:	91 f0       	breq	.+36     	; 0x3de4 <softKeyPrInc+0x32>
    3dc0:	88 5f       	subi	r24, 0xF8	; 248
    3dc2:	88 73       	andi	r24, 0x38	; 56
    3dc4:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3dc8:	0d c0       	rjmp	.+26     	; 0x3de4 <softKeyPrInc+0x32>
    3dca:	88 23       	and	r24, r24
    3dcc:	59 f0       	breq	.+22     	; 0x3de4 <softKeyPrInc+0x32>
    3dce:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3dd2:	8f 33       	cpi	r24, 0x3F	; 63
    3dd4:	21 f4       	brne	.+8      	; 0x3dde <softKeyPrInc+0x2c>
    3dd6:	8f ef       	ldi	r24, 0xFF	; 255
    3dd8:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3ddc:	03 c0       	rjmp	.+6      	; 0x3de4 <softKeyPrInc+0x32>
    3dde:	8f 5f       	subi	r24, 0xFF	; 255
    3de0:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3de4:	be df       	rcall	.-132    	; 0x3d62 <softKeyUpdateProg>
    3de6:	80 e0       	ldi	r24, 0x00	; 0
    3de8:	08 95       	ret

00003dea <softKeyPrDec>:
    3dea:	88 23       	and	r24, r24
    3dec:	c1 f0       	breq	.+48     	; 0x3e1e <softKeyPrDec+0x34>
    3dee:	4c f4       	brge	.+18     	; 0x3e02 <softKeyPrDec+0x18>
    3df0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3df4:	8f 3f       	cpi	r24, 0xFF	; 255
    3df6:	91 f0       	breq	.+36     	; 0x3e1c <softKeyPrDec+0x32>
    3df8:	88 50       	subi	r24, 0x08	; 8
    3dfa:	88 73       	andi	r24, 0x38	; 56
    3dfc:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3e00:	0d c0       	rjmp	.+26     	; 0x3e1c <softKeyPrDec+0x32>
    3e02:	88 23       	and	r24, r24
    3e04:	59 f0       	breq	.+22     	; 0x3e1c <softKeyPrDec+0x32>
    3e06:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3e0a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e0c:	21 f4       	brne	.+8      	; 0x3e16 <softKeyPrDec+0x2c>
    3e0e:	8f e3       	ldi	r24, 0x3F	; 63
    3e10:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3e14:	03 c0       	rjmp	.+6      	; 0x3e1c <softKeyPrDec+0x32>
    3e16:	81 50       	subi	r24, 0x01	; 1
    3e18:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3e1c:	a2 df       	rcall	.-188    	; 0x3d62 <softKeyUpdateProg>
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	08 95       	ret

00003e22 <softKeyPBInc>:
    3e22:	88 23       	and	r24, r24
    3e24:	39 f0       	breq	.+14     	; 0x3e34 <softKeyPBInc+0x12>
    3e26:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3e2a:	88 5f       	subi	r24, 0xF8	; 248
    3e2c:	88 73       	andi	r24, 0x38	; 56
    3e2e:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3e32:	97 df       	rcall	.-210    	; 0x3d62 <softKeyUpdateProg>
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	08 95       	ret

00003e38 <softKeyPBDec>:
    3e38:	88 23       	and	r24, r24
    3e3a:	39 f0       	breq	.+14     	; 0x3e4a <softKeyPBDec+0x12>
    3e3c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3e40:	88 50       	subi	r24, 0x08	; 8
    3e42:	88 73       	andi	r24, 0x38	; 56
    3e44:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3e48:	8c df       	rcall	.-232    	; 0x3d62 <softKeyUpdateProg>
    3e4a:	80 e0       	ldi	r24, 0x00	; 0
    3e4c:	08 95       	ret

00003e4e <menu_Init>:
    3e4e:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    3e52:	00 97       	sbiw	r24, 0x00	; 0
    3e54:	69 f4       	brne	.+26     	; 0x3e70 <menu_Init+0x22>
    3e56:	86 ed       	ldi	r24, 0xD6	; 214
    3e58:	97 e0       	ldi	r25, 0x07	; 7
    3e5a:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3e5e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3e62:	8f ed       	ldi	r24, 0xDF	; 223
    3e64:	93 e0       	ldi	r25, 0x03	; 3
    3e66:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    3e6a:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    3e6e:	08 c0       	rjmp	.+16     	; 0x3e80 <menu_Init+0x32>
    3e70:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3e74:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3e78:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    3e7c:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    3e80:	8f ef       	ldi	r24, 0xFF	; 255
    3e82:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    3e86:	89 ee       	ldi	r24, 0xE9	; 233
    3e88:	93 e0       	ldi	r25, 0x03	; 3
    3e8a:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    3e8e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    3e92:	08 95       	ret

00003e94 <softkeyLeft>:
    3e94:	66 ef       	ldi	r22, 0xF6	; 246
    3e96:	72 e1       	ldi	r23, 0x12	; 18
    3e98:	82 e0       	ldi	r24, 0x02	; 2
    3e9a:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3e9e:	08 95       	ret

00003ea0 <softkeyRight>:
    3ea0:	68 ef       	ldi	r22, 0xF8	; 248
    3ea2:	72 e1       	ldi	r23, 0x12	; 18
    3ea4:	83 e0       	ldi	r24, 0x03	; 3
    3ea6:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3eaa:	08 95       	ret

00003eac <softkeyDown>:
    3eac:	6a ef       	ldi	r22, 0xFA	; 250
    3eae:	72 e1       	ldi	r23, 0x12	; 18
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3eb6:	08 95       	ret

00003eb8 <softkeyOn>:
    3eb8:	68 ee       	ldi	r22, 0xE8	; 232
    3eba:	72 e1       	ldi	r23, 0x12	; 18
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3ec2:	08 95       	ret

00003ec4 <softkeyOff>:
    3ec4:	63 ee       	ldi	r22, 0xE3	; 227
    3ec6:	72 e1       	ldi	r23, 0x12	; 18
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3ece:	08 95       	ret

00003ed0 <softkeyUp>:
    3ed0:	6c ef       	ldi	r22, 0xFC	; 252
    3ed2:	72 e1       	ldi	r23, 0x12	; 18
    3ed4:	80 e0       	ldi	r24, 0x00	; 0
    3ed6:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3eda:	08 95       	ret

00003edc <softkeyPlus>:
    3edc:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3ee0:	8a 30       	cpi	r24, 0x0A	; 10
    3ee2:	11 f0       	breq	.+4      	; 0x3ee8 <softkeyPlus+0xc>
    3ee4:	8e 30       	cpi	r24, 0x0E	; 14
    3ee6:	31 f4       	brne	.+12     	; 0x3ef4 <softkeyPlus+0x18>
    3ee8:	64 ed       	ldi	r22, 0xD4	; 212
    3eea:	72 e1       	ldi	r23, 0x12	; 18
    3eec:	80 e0       	ldi	r24, 0x00	; 0
    3eee:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3ef2:	08 95       	ret
    3ef4:	64 ef       	ldi	r22, 0xF4	; 244
    3ef6:	72 e1       	ldi	r23, 0x12	; 18
    3ef8:	80 e0       	ldi	r24, 0x00	; 0
    3efa:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3efe:	08 95       	ret

00003f00 <softkeyMinus>:
    3f00:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3f04:	8a 30       	cpi	r24, 0x0A	; 10
    3f06:	11 f0       	breq	.+4      	; 0x3f0c <softkeyMinus+0xc>
    3f08:	8e 30       	cpi	r24, 0x0E	; 14
    3f0a:	31 f4       	brne	.+12     	; 0x3f18 <softkeyMinus+0x18>
    3f0c:	66 ed       	ldi	r22, 0xD6	; 214
    3f0e:	72 e1       	ldi	r23, 0x12	; 18
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3f16:	08 95       	ret
    3f18:	62 ef       	ldi	r22, 0xF2	; 242
    3f1a:	72 e1       	ldi	r23, 0x12	; 18
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <keylabel_set>
    3f22:	08 95       	ret

00003f24 <dataToNibbles>:
    3f24:	cf 93       	push	r28
    3f26:	df 93       	push	r29
    3f28:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3f2c:	8e 2f       	mov	r24, r30
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	fc 01       	movw	r30, r24
    3f32:	32 97       	sbiw	r30, 0x02	; 2
    3f34:	ed 30       	cpi	r30, 0x0D	; 13
    3f36:	f1 05       	cpc	r31, r1
    3f38:	08 f0       	brcs	.+2      	; 0x3f3c <dataToNibbles+0x18>
    3f3a:	e4 c0       	rjmp	.+456    	; 0x4104 <dataToNibbles+0x1e0>
    3f3c:	88 27       	eor	r24, r24
    3f3e:	ee 58       	subi	r30, 0x8E	; 142
    3f40:	ff 4f       	sbci	r31, 0xFF	; 255
    3f42:	8f 4f       	sbci	r24, 0xFF	; 255
    3f44:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <__tablejump2__>
    3f48:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f4c:	e4 ec       	ldi	r30, 0xC4	; 196
    3f4e:	f5 e0       	ldi	r31, 0x05	; 5
    3f50:	98 2f       	mov	r25, r24
    3f52:	92 95       	swap	r25
    3f54:	9f 70       	andi	r25, 0x0F	; 15
    3f56:	90 83       	st	Z, r25
    3f58:	8f 70       	andi	r24, 0x0F	; 15
    3f5a:	81 83       	std	Z+1, r24	; 0x01
    3f5c:	d3 c0       	rjmp	.+422    	; 0x4104 <dataToNibbles+0x1e0>
    3f5e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f62:	80 31       	cpi	r24, 0x10	; 16
    3f64:	20 f0       	brcs	.+8      	; 0x3f6e <dataToNibbles+0x4a>
    3f66:	8f ef       	ldi	r24, 0xFF	; 255
    3f68:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f6c:	cb c0       	rjmp	.+406    	; 0x4104 <dataToNibbles+0x1e0>
    3f6e:	8f 5f       	subi	r24, 0xFF	; 255
    3f70:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f74:	c7 c0       	rjmp	.+398    	; 0x4104 <dataToNibbles+0x1e0>
    3f76:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f7a:	88 23       	and	r24, r24
    3f7c:	34 f4       	brge	.+12     	; 0x3f8a <dataToNibbles+0x66>
    3f7e:	e4 ec       	ldi	r30, 0xC4	; 196
    3f80:	f5 e0       	ldi	r31, 0x05	; 5
    3f82:	10 82       	st	Z, r1
    3f84:	8f ef       	ldi	r24, 0xFF	; 255
    3f86:	81 83       	std	Z+1, r24	; 0x01
    3f88:	bd c0       	rjmp	.+378    	; 0x4104 <dataToNibbles+0x1e0>
    3f8a:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    3f8e:	08 c0       	rjmp	.+16     	; 0x3fa0 <dataToNibbles+0x7c>
    3f90:	e4 ec       	ldi	r30, 0xC4	; 196
    3f92:	f5 e0       	ldi	r31, 0x05	; 5
    3f94:	91 81       	ldd	r25, Z+1	; 0x01
    3f96:	9f 5f       	subi	r25, 0xFF	; 255
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	8c 50       	subi	r24, 0x0C	; 12
    3f9c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fa0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fa4:	8c 30       	cpi	r24, 0x0C	; 12
    3fa6:	a0 f7       	brcc	.-24     	; 0x3f90 <dataToNibbles+0x6c>
    3fa8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3fac:	ab c0       	rjmp	.+342    	; 0x4104 <dataToNibbles+0x1e0>
    3fae:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fb2:	e4 ec       	ldi	r30, 0xC4	; 196
    3fb4:	f5 e0       	ldi	r31, 0x05	; 5
    3fb6:	98 2f       	mov	r25, r24
    3fb8:	92 95       	swap	r25
    3fba:	96 95       	lsr	r25
    3fbc:	97 70       	andi	r25, 0x07	; 7
    3fbe:	90 83       	st	Z, r25
    3fc0:	8f 71       	andi	r24, 0x1F	; 31
    3fc2:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fc6:	11 82       	std	Z+1, r1	; 0x01
    3fc8:	08 c0       	rjmp	.+16     	; 0x3fda <dataToNibbles+0xb6>
    3fca:	e4 ec       	ldi	r30, 0xC4	; 196
    3fcc:	f5 e0       	ldi	r31, 0x05	; 5
    3fce:	91 81       	ldd	r25, Z+1	; 0x01
    3fd0:	9f 5f       	subi	r25, 0xFF	; 255
    3fd2:	91 83       	std	Z+1, r25	; 0x01
    3fd4:	8a 50       	subi	r24, 0x0A	; 10
    3fd6:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fda:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fde:	8a 30       	cpi	r24, 0x0A	; 10
    3fe0:	a0 f7       	brcc	.-24     	; 0x3fca <dataToNibbles+0xa6>
    3fe2:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3fe6:	8e c0       	rjmp	.+284    	; 0x4104 <dataToNibbles+0x1e0>
    3fe8:	e4 ec       	ldi	r30, 0xC4	; 196
    3fea:	f5 e0       	ldi	r31, 0x05	; 5
    3fec:	10 82       	st	Z, r1
    3fee:	11 82       	std	Z+1, r1	; 0x01
    3ff0:	08 c0       	rjmp	.+16     	; 0x4002 <dataToNibbles+0xde>
    3ff2:	e4 ec       	ldi	r30, 0xC4	; 196
    3ff4:	f5 e0       	ldi	r31, 0x05	; 5
    3ff6:	90 81       	ld	r25, Z
    3ff8:	9f 5f       	subi	r25, 0xFF	; 255
    3ffa:	90 83       	st	Z, r25
    3ffc:	84 56       	subi	r24, 0x64	; 100
    3ffe:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4002:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4006:	84 36       	cpi	r24, 0x64	; 100
    4008:	a0 f7       	brcc	.-24     	; 0x3ff2 <dataToNibbles+0xce>
    400a:	08 c0       	rjmp	.+16     	; 0x401c <dataToNibbles+0xf8>
    400c:	e4 ec       	ldi	r30, 0xC4	; 196
    400e:	f5 e0       	ldi	r31, 0x05	; 5
    4010:	91 81       	ldd	r25, Z+1	; 0x01
    4012:	9f 5f       	subi	r25, 0xFF	; 255
    4014:	91 83       	std	Z+1, r25	; 0x01
    4016:	8a 50       	subi	r24, 0x0A	; 10
    4018:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    401c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4020:	8a 30       	cpi	r24, 0x0A	; 10
    4022:	a0 f7       	brcc	.-24     	; 0x400c <dataToNibbles+0xe8>
    4024:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    4028:	6d c0       	rjmp	.+218    	; 0x4104 <dataToNibbles+0x1e0>
    402a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    402e:	84 30       	cpi	r24, 0x04	; 4
    4030:	20 f0       	brcs	.+8      	; 0x403a <dataToNibbles+0x116>
    4032:	8f ef       	ldi	r24, 0xFF	; 255
    4034:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4038:	65 c0       	rjmp	.+202    	; 0x4104 <dataToNibbles+0x1e0>
    403a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    403e:	62 c0       	rjmp	.+196    	; 0x4104 <dataToNibbles+0x1e0>
    4040:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4044:	84 30       	cpi	r24, 0x04	; 4
    4046:	20 f0       	brcs	.+8      	; 0x4050 <dataToNibbles+0x12c>
    4048:	83 e0       	ldi	r24, 0x03	; 3
    404a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    404e:	5a c0       	rjmp	.+180    	; 0x4104 <dataToNibbles+0x1e0>
    4050:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4054:	57 c0       	rjmp	.+174    	; 0x4104 <dataToNibbles+0x1e0>
    4056:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    405a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    405e:	52 c0       	rjmp	.+164    	; 0x4104 <dataToNibbles+0x1e0>
    4060:	e9 2f       	mov	r30, r25
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4068:	28 2f       	mov	r18, r24
    406a:	22 1f       	adc	r18, r18
    406c:	22 27       	eor	r18, r18
    406e:	22 1f       	adc	r18, r18
    4070:	ec 53       	subi	r30, 0x3C	; 60
    4072:	fa 4f       	sbci	r31, 0xFA	; 250
    4074:	20 83       	st	Z, r18
    4076:	88 0f       	add	r24, r24
    4078:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    407c:	9f 5f       	subi	r25, 0xFF	; 255
    407e:	01 c0       	rjmp	.+2      	; 0x4082 <dataToNibbles+0x15e>
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	98 30       	cpi	r25, 0x08	; 8
    4084:	68 f3       	brcs	.-38     	; 0x4060 <dataToNibbles+0x13c>
    4086:	3e c0       	rjmp	.+124    	; 0x4104 <dataToNibbles+0x1e0>
    4088:	82 50       	subi	r24, 0x02	; 2
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	de 01       	movw	r26, r28
    408e:	9d 91       	ld	r25, X+
    4090:	ec 53       	subi	r30, 0x3C	; 60
    4092:	fa 4f       	sbci	r31, 0xFA	; 250
    4094:	9f 70       	andi	r25, 0x0F	; 15
    4096:	90 83       	st	Z, r25
    4098:	e8 2f       	mov	r30, r24
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	98 81       	ld	r25, Y
    409e:	ec 53       	subi	r30, 0x3C	; 60
    40a0:	fa 4f       	sbci	r31, 0xFA	; 250
    40a2:	92 95       	swap	r25
    40a4:	9f 70       	andi	r25, 0x0F	; 15
    40a6:	90 83       	st	Z, r25
    40a8:	ed 01       	movw	r28, r26
    40aa:	03 c0       	rjmp	.+6      	; 0x40b2 <dataToNibbles+0x18e>
    40ac:	c2 ea       	ldi	r28, 0xA2	; 162
    40ae:	d5 e0       	ldi	r29, 0x05	; 5
    40b0:	88 e0       	ldi	r24, 0x08	; 8
    40b2:	ef ef       	ldi	r30, 0xFF	; 255
    40b4:	e8 0f       	add	r30, r24
    40b6:	81 11       	cpse	r24, r1
    40b8:	e7 cf       	rjmp	.-50     	; 0x4088 <dataToNibbles+0x164>
    40ba:	24 c0       	rjmp	.+72     	; 0x4104 <dataToNibbles+0x1e0>
    40bc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    40c0:	e4 ec       	ldi	r30, 0xC4	; 196
    40c2:	f5 e0       	ldi	r31, 0x05	; 5
    40c4:	98 2f       	mov	r25, r24
    40c6:	97 70       	andi	r25, 0x07	; 7
    40c8:	9f 5f       	subi	r25, 0xFF	; 255
    40ca:	90 83       	st	Z, r25
    40cc:	86 95       	lsr	r24
    40ce:	86 95       	lsr	r24
    40d0:	86 95       	lsr	r24
    40d2:	8f 5f       	subi	r24, 0xFF	; 255
    40d4:	81 83       	std	Z+1, r24	; 0x01
    40d6:	16 c0       	rjmp	.+44     	; 0x4104 <dataToNibbles+0x1e0>
    40d8:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    40dc:	8f 5f       	subi	r24, 0xFF	; 255
    40de:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    40e2:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    40e6:	08 c0       	rjmp	.+16     	; 0x40f8 <dataToNibbles+0x1d4>
    40e8:	e4 ec       	ldi	r30, 0xC4	; 196
    40ea:	f5 e0       	ldi	r31, 0x05	; 5
    40ec:	90 81       	ld	r25, Z
    40ee:	9f 5f       	subi	r25, 0xFF	; 255
    40f0:	90 83       	st	Z, r25
    40f2:	8a 50       	subi	r24, 0x0A	; 10
    40f4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    40f8:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    40fc:	8a 30       	cpi	r24, 0x0A	; 10
    40fe:	a0 f7       	brcc	.-24     	; 0x40e8 <dataToNibbles+0x1c4>
    4100:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    4104:	df 91       	pop	r29
    4106:	cf 91       	pop	r28
    4108:	08 95       	ret

0000410a <nibbleToLCDstring>:
    410a:	0f 93       	push	r16
    410c:	1f 93       	push	r17
    410e:	cf 93       	push	r28
    4110:	df 93       	push	r29
    4112:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4116:	8e 2f       	mov	r24, r30
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	fc 01       	movw	r30, r24
    411c:	32 97       	sbiw	r30, 0x02	; 2
    411e:	ed 30       	cpi	r30, 0x0D	; 13
    4120:	f1 05       	cpc	r31, r1
    4122:	08 f0       	brcs	.+2      	; 0x4126 <nibbleToLCDstring+0x1c>
    4124:	3b c1       	rjmp	.+630    	; 0x439c <nibbleToLCDstring+0x292>
    4126:	88 27       	eor	r24, r24
    4128:	e1 58       	subi	r30, 0x81	; 129
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	8f 4f       	sbci	r24, 0xFF	; 255
    412e:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <__tablejump2__>
    4132:	04 ec       	ldi	r16, 0xC4	; 196
    4134:	15 e0       	ldi	r17, 0x05	; 5
    4136:	f8 01       	movw	r30, r16
    4138:	80 81       	ld	r24, Z
    413a:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    413e:	c5 e2       	ldi	r28, 0x25	; 37
    4140:	d2 e0       	ldi	r29, 0x02	; 2
    4142:	88 83       	st	Y, r24
    4144:	f8 01       	movw	r30, r16
    4146:	81 81       	ldd	r24, Z+1	; 0x01
    4148:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    414c:	89 83       	std	Y+1, r24	; 0x01
    414e:	1a 82       	std	Y+2, r1	; 0x02
    4150:	25 c1       	rjmp	.+586    	; 0x439c <nibbleToLCDstring+0x292>
    4152:	e5 e2       	ldi	r30, 0x25	; 37
    4154:	f2 e0       	ldi	r31, 0x02	; 2
    4156:	83 e4       	ldi	r24, 0x43	; 67
    4158:	80 83       	st	Z, r24
    415a:	88 e6       	ldi	r24, 0x68	; 104
    415c:	81 83       	std	Z+1, r24	; 0x01
    415e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4162:	8f 3f       	cpi	r24, 0xFF	; 255
    4164:	29 f4       	brne	.+10     	; 0x4170 <nibbleToLCDstring+0x66>
    4166:	80 e2       	ldi	r24, 0x20	; 32
    4168:	82 83       	std	Z+2, r24	; 0x02
    416a:	8d e2       	ldi	r24, 0x2D	; 45
    416c:	83 83       	std	Z+3, r24	; 0x03
    416e:	12 c0       	rjmp	.+36     	; 0x4194 <nibbleToLCDstring+0x8a>
    4170:	8a 30       	cpi	r24, 0x0A	; 10
    4172:	48 f0       	brcs	.+18     	; 0x4186 <nibbleToLCDstring+0x7c>
    4174:	c5 e2       	ldi	r28, 0x25	; 37
    4176:	d2 e0       	ldi	r29, 0x02	; 2
    4178:	91 e3       	ldi	r25, 0x31	; 49
    417a:	9a 83       	std	Y+2, r25	; 0x02
    417c:	8a 50       	subi	r24, 0x0A	; 10
    417e:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    4182:	8b 83       	std	Y+3, r24	; 0x03
    4184:	07 c0       	rjmp	.+14     	; 0x4194 <nibbleToLCDstring+0x8a>
    4186:	c5 e2       	ldi	r28, 0x25	; 37
    4188:	d2 e0       	ldi	r29, 0x02	; 2
    418a:	90 e2       	ldi	r25, 0x20	; 32
    418c:	9a 83       	std	Y+2, r25	; 0x02
    418e:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    4192:	8b 83       	std	Y+3, r24	; 0x03
    4194:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    4198:	01 c1       	rjmp	.+514    	; 0x439c <nibbleToLCDstring+0x292>
    419a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    419e:	8f 3f       	cpi	r24, 0xFF	; 255
    41a0:	21 f0       	breq	.+8      	; 0x41aa <nibbleToLCDstring+0xa0>
    41a2:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    41a6:	9f 3f       	cpi	r25, 0xFF	; 255
    41a8:	59 f4       	brne	.+22     	; 0x41c0 <nibbleToLCDstring+0xb6>
    41aa:	e5 e2       	ldi	r30, 0x25	; 37
    41ac:	f2 e0       	ldi	r31, 0x02	; 2
    41ae:	8e e6       	ldi	r24, 0x6E	; 110
    41b0:	80 83       	st	Z, r24
    41b2:	9f e6       	ldi	r25, 0x6F	; 111
    41b4:	91 83       	std	Z+1, r25	; 0x01
    41b6:	82 83       	std	Z+2, r24	; 0x02
    41b8:	85 e6       	ldi	r24, 0x65	; 101
    41ba:	83 83       	std	Z+3, r24	; 0x03
    41bc:	14 82       	std	Z+4, r1	; 0x04
    41be:	ee c0       	rjmp	.+476    	; 0x439c <nibbleToLCDstring+0x292>
    41c0:	9f e5       	ldi	r25, 0x5F	; 95
    41c2:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    41c6:	8b 30       	cpi	r24, 0x0B	; 11
    41c8:	21 f4       	brne	.+8      	; 0x41d2 <nibbleToLCDstring+0xc8>
    41ca:	88 e4       	ldi	r24, 0x48	; 72
    41cc:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    41d0:	20 c0       	rjmp	.+64     	; 0x4212 <nibbleToLCDstring+0x108>
    41d2:	85 30       	cpi	r24, 0x05	; 5
    41d4:	58 f4       	brcc	.+22     	; 0x41ec <nibbleToLCDstring+0xe2>
    41d6:	98 2f       	mov	r25, r24
    41d8:	96 95       	lsr	r25
    41da:	9d 5b       	subi	r25, 0xBD	; 189
    41dc:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    41e0:	80 ff       	sbrs	r24, 0
    41e2:	17 c0       	rjmp	.+46     	; 0x4212 <nibbleToLCDstring+0x108>
    41e4:	83 e2       	ldi	r24, 0x23	; 35
    41e6:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    41ea:	13 c0       	rjmp	.+38     	; 0x4212 <nibbleToLCDstring+0x108>
    41ec:	28 2f       	mov	r18, r24
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	25 50       	subi	r18, 0x05	; 5
    41f2:	31 09       	sbc	r19, r1
    41f4:	35 95       	asr	r19
    41f6:	27 95       	ror	r18
    41f8:	2a 5b       	subi	r18, 0xBA	; 186
    41fa:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    41fe:	80 fd       	sbrc	r24, 0
    4200:	03 c0       	rjmp	.+6      	; 0x4208 <nibbleToLCDstring+0xfe>
    4202:	83 e2       	ldi	r24, 0x23	; 35
    4204:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    4208:	28 34       	cpi	r18, 0x48	; 72
    420a:	19 f4       	brne	.+6      	; 0x4212 <nibbleToLCDstring+0x108>
    420c:	81 e4       	ldi	r24, 0x41	; 65
    420e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    4212:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4216:	81 11       	cpse	r24, r1
    4218:	04 c0       	rjmp	.+8      	; 0x4222 <nibbleToLCDstring+0x118>
    421a:	8d e6       	ldi	r24, 0x6D	; 109
    421c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    4220:	0b c0       	rjmp	.+22     	; 0x4238 <nibbleToLCDstring+0x12e>
    4222:	8c 30       	cpi	r24, 0x0C	; 12
    4224:	30 f4       	brcc	.+12     	; 0x4232 <nibbleToLCDstring+0x128>
    4226:	81 50       	subi	r24, 0x01	; 1
    4228:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    422c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    4230:	03 c0       	rjmp	.+6      	; 0x4238 <nibbleToLCDstring+0x12e>
    4232:	8d e2       	ldi	r24, 0x2D	; 45
    4234:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    4238:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    423c:	af c0       	rjmp	.+350    	; 0x439c <nibbleToLCDstring+0x292>
    423e:	c5 e2       	ldi	r28, 0x25	; 37
    4240:	d2 e0       	ldi	r29, 0x02	; 2
    4242:	8d e4       	ldi	r24, 0x4D	; 77
    4244:	88 83       	st	Y, r24
    4246:	04 ec       	ldi	r16, 0xC4	; 196
    4248:	15 e0       	ldi	r17, 0x05	; 5
    424a:	f8 01       	movw	r30, r16
    424c:	80 81       	ld	r24, Z
    424e:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    4252:	89 83       	std	Y+1, r24	; 0x01
    4254:	82 e4       	ldi	r24, 0x42	; 66
    4256:	8a 83       	std	Y+2, r24	; 0x02
    4258:	f8 01       	movw	r30, r16
    425a:	81 81       	ldd	r24, Z+1	; 0x01
    425c:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    4260:	8b 83       	std	Y+3, r24	; 0x03
    4262:	f8 01       	movw	r30, r16
    4264:	82 81       	ldd	r24, Z+2	; 0x02
    4266:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    426a:	8c 83       	std	Y+4, r24	; 0x04
    426c:	1d 82       	std	Y+5, r1	; 0x05
    426e:	96 c0       	rjmp	.+300    	; 0x439c <nibbleToLCDstring+0x292>
    4270:	04 ec       	ldi	r16, 0xC4	; 196
    4272:	15 e0       	ldi	r17, 0x05	; 5
    4274:	f8 01       	movw	r30, r16
    4276:	80 81       	ld	r24, Z
    4278:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    427c:	c5 e2       	ldi	r28, 0x25	; 37
    427e:	d2 e0       	ldi	r29, 0x02	; 2
    4280:	88 83       	st	Y, r24
    4282:	f8 01       	movw	r30, r16
    4284:	81 81       	ldd	r24, Z+1	; 0x01
    4286:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    428a:	89 83       	std	Y+1, r24	; 0x01
    428c:	f8 01       	movw	r30, r16
    428e:	82 81       	ldd	r24, Z+2	; 0x02
    4290:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    4294:	8a 83       	std	Y+2, r24	; 0x02
    4296:	1b 82       	std	Y+3, r1	; 0x03
    4298:	81 c0       	rjmp	.+258    	; 0x439c <nibbleToLCDstring+0x292>
    429a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    429e:	83 30       	cpi	r24, 0x03	; 3
    42a0:	38 f4       	brcc	.+14     	; 0x42b0 <nibbleToLCDstring+0x1a6>
    42a2:	e5 e2       	ldi	r30, 0x25	; 37
    42a4:	f2 e0       	ldi	r31, 0x02	; 2
    42a6:	93 e3       	ldi	r25, 0x33	; 51
    42a8:	98 1b       	sub	r25, r24
    42aa:	90 83       	st	Z, r25
    42ac:	11 82       	std	Z+1, r1	; 0x01
    42ae:	76 c0       	rjmp	.+236    	; 0x439c <nibbleToLCDstring+0x292>
    42b0:	83 30       	cpi	r24, 0x03	; 3
    42b2:	31 f4       	brne	.+12     	; 0x42c0 <nibbleToLCDstring+0x1b6>
    42b4:	e5 e2       	ldi	r30, 0x25	; 37
    42b6:	f2 e0       	ldi	r31, 0x02	; 2
    42b8:	80 e5       	ldi	r24, 0x50	; 80
    42ba:	80 83       	st	Z, r24
    42bc:	11 82       	std	Z+1, r1	; 0x01
    42be:	6e c0       	rjmp	.+220    	; 0x439c <nibbleToLCDstring+0x292>
    42c0:	e5 e2       	ldi	r30, 0x25	; 37
    42c2:	f2 e0       	ldi	r31, 0x02	; 2
    42c4:	8d e2       	ldi	r24, 0x2D	; 45
    42c6:	80 83       	st	Z, r24
    42c8:	11 82       	std	Z+1, r1	; 0x01
    42ca:	68 c0       	rjmp	.+208    	; 0x439c <nibbleToLCDstring+0x292>
    42cc:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42d0:	e5 e2       	ldi	r30, 0x25	; 37
    42d2:	f2 e0       	ldi	r31, 0x02	; 2
    42d4:	80 5d       	subi	r24, 0xD0	; 208
    42d6:	80 83       	st	Z, r24
    42d8:	11 82       	std	Z+1, r1	; 0x01
    42da:	60 c0       	rjmp	.+192    	; 0x439c <nibbleToLCDstring+0x292>
    42dc:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    42e0:	81 11       	cpse	r24, r1
    42e2:	09 c0       	rjmp	.+18     	; 0x42f6 <nibbleToLCDstring+0x1ec>
    42e4:	e5 e2       	ldi	r30, 0x25	; 37
    42e6:	f2 e0       	ldi	r31, 0x02	; 2
    42e8:	81 e4       	ldi	r24, 0x41	; 65
    42ea:	80 83       	st	Z, r24
    42ec:	85 e7       	ldi	r24, 0x75	; 117
    42ee:	81 83       	std	Z+1, r24	; 0x01
    42f0:	83 e7       	ldi	r24, 0x73	; 115
    42f2:	82 83       	std	Z+2, r24	; 0x02
    42f4:	08 c0       	rjmp	.+16     	; 0x4306 <nibbleToLCDstring+0x1fc>
    42f6:	e5 e2       	ldi	r30, 0x25	; 37
    42f8:	f2 e0       	ldi	r31, 0x02	; 2
    42fa:	85 e4       	ldi	r24, 0x45	; 69
    42fc:	80 83       	st	Z, r24
    42fe:	89 e6       	ldi	r24, 0x69	; 105
    4300:	81 83       	std	Z+1, r24	; 0x01
    4302:	8e e6       	ldi	r24, 0x6E	; 110
    4304:	82 83       	std	Z+2, r24	; 0x02
    4306:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    430a:	48 c0       	rjmp	.+144    	; 0x439c <nibbleToLCDstring+0x292>
    430c:	c1 2f       	mov	r28, r17
    430e:	d0 e0       	ldi	r29, 0x00	; 0
    4310:	fe 01       	movw	r30, r28
    4312:	ec 53       	subi	r30, 0x3C	; 60
    4314:	fa 4f       	sbci	r31, 0xFA	; 250
    4316:	80 81       	ld	r24, Z
    4318:	0e 94 0e 3a 	call	0x741c	; 0x741c <nibbleToChr>
    431c:	cb 5d       	subi	r28, 0xDB	; 219
    431e:	dd 4f       	sbci	r29, 0xFD	; 253
    4320:	88 83       	st	Y, r24
    4322:	1f 5f       	subi	r17, 0xFF	; 255
    4324:	01 c0       	rjmp	.+2      	; 0x4328 <nibbleToLCDstring+0x21e>
    4326:	10 e0       	ldi	r17, 0x00	; 0
    4328:	18 30       	cpi	r17, 0x08	; 8
    432a:	80 f3       	brcs	.-32     	; 0x430c <nibbleToLCDstring+0x202>
    432c:	37 c0       	rjmp	.+110    	; 0x439c <nibbleToLCDstring+0x292>
    432e:	82 2f       	mov	r24, r18
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	fc 01       	movw	r30, r24
    4334:	ec 53       	subi	r30, 0x3C	; 60
    4336:	fa 4f       	sbci	r31, 0xFA	; 250
    4338:	30 81       	ld	r19, Z
    433a:	31 11       	cpse	r19, r1
    433c:	02 c0       	rjmp	.+4      	; 0x4342 <nibbleToLCDstring+0x238>
    433e:	3f e6       	ldi	r19, 0x6F	; 111
    4340:	01 c0       	rjmp	.+2      	; 0x4344 <nibbleToLCDstring+0x23a>
    4342:	39 e4       	ldi	r19, 0x49	; 73
    4344:	fc 01       	movw	r30, r24
    4346:	eb 5d       	subi	r30, 0xDB	; 219
    4348:	fd 4f       	sbci	r31, 0xFD	; 253
    434a:	30 83       	st	Z, r19
    434c:	2f 5f       	subi	r18, 0xFF	; 255
    434e:	01 c0       	rjmp	.+2      	; 0x4352 <nibbleToLCDstring+0x248>
    4350:	20 e0       	ldi	r18, 0x00	; 0
    4352:	28 30       	cpi	r18, 0x08	; 8
    4354:	60 f3       	brcs	.-40     	; 0x432e <nibbleToLCDstring+0x224>
    4356:	22 c0       	rjmp	.+68     	; 0x439c <nibbleToLCDstring+0x292>
    4358:	a4 ec       	ldi	r26, 0xC4	; 196
    435a:	b5 e0       	ldi	r27, 0x05	; 5
    435c:	8c 91       	ld	r24, X
    435e:	e5 e2       	ldi	r30, 0x25	; 37
    4360:	f2 e0       	ldi	r31, 0x02	; 2
    4362:	80 5d       	subi	r24, 0xD0	; 208
    4364:	80 83       	st	Z, r24
    4366:	11 96       	adiw	r26, 0x01	; 1
    4368:	8c 91       	ld	r24, X
    436a:	80 5c       	subi	r24, 0xC0	; 192
    436c:	81 83       	std	Z+1, r24	; 0x01
    436e:	12 82       	std	Z+2, r1	; 0x02
    4370:	15 c0       	rjmp	.+42     	; 0x439c <nibbleToLCDstring+0x292>
    4372:	e4 ec       	ldi	r30, 0xC4	; 196
    4374:	f5 e0       	ldi	r31, 0x05	; 5
    4376:	90 81       	ld	r25, Z
    4378:	81 81       	ldd	r24, Z+1	; 0x01
    437a:	29 2f       	mov	r18, r25
    437c:	28 2b       	or	r18, r24
    437e:	31 f4       	brne	.+12     	; 0x438c <nibbleToLCDstring+0x282>
    4380:	e5 e2       	ldi	r30, 0x25	; 37
    4382:	f2 e0       	ldi	r31, 0x02	; 2
    4384:	8d e2       	ldi	r24, 0x2D	; 45
    4386:	80 83       	st	Z, r24
    4388:	81 83       	std	Z+1, r24	; 0x01
    438a:	06 c0       	rjmp	.+12     	; 0x4398 <nibbleToLCDstring+0x28e>
    438c:	e5 e2       	ldi	r30, 0x25	; 37
    438e:	f2 e0       	ldi	r31, 0x02	; 2
    4390:	90 5d       	subi	r25, 0xD0	; 208
    4392:	90 83       	st	Z, r25
    4394:	80 5d       	subi	r24, 0xD0	; 208
    4396:	81 83       	std	Z+1, r24	; 0x01
    4398:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    439c:	df 91       	pop	r29
    439e:	cf 91       	pop	r28
    43a0:	1f 91       	pop	r17
    43a2:	0f 91       	pop	r16
    43a4:	08 95       	ret

000043a6 <LCDStringOut>:
    43a6:	0f 93       	push	r16
    43a8:	1f 93       	push	r17
    43aa:	cf 93       	push	r28
    43ac:	8e e1       	ldi	r24, 0x1E	; 30
    43ae:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    43b2:	c0 e0       	ldi	r28, 0x00	; 0
    43b4:	05 e2       	ldi	r16, 0x25	; 37
    43b6:	12 e0       	ldi	r17, 0x02	; 2
    43b8:	0b c0       	rjmp	.+22     	; 0x43d0 <LCDStringOut+0x2a>
    43ba:	f8 01       	movw	r30, r16
    43bc:	80 81       	ld	r24, Z
    43be:	88 23       	and	r24, r24
    43c0:	19 f0       	breq	.+6      	; 0x43c8 <LCDStringOut+0x22>
    43c2:	0f 5f       	subi	r16, 0xFF	; 255
    43c4:	1f 4f       	sbci	r17, 0xFF	; 255
    43c6:	01 c0       	rjmp	.+2      	; 0x43ca <LCDStringOut+0x24>
    43c8:	80 e2       	ldi	r24, 0x20	; 32
    43ca:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    43ce:	cf 5f       	subi	r28, 0xFF	; 255
    43d0:	ca 30       	cpi	r28, 0x0A	; 10
    43d2:	98 f3       	brcs	.-26     	; 0x43ba <LCDStringOut+0x14>
    43d4:	cf 91       	pop	r28
    43d6:	1f 91       	pop	r17
    43d8:	0f 91       	pop	r16
    43da:	08 95       	ret

000043dc <nibbleCheckOvfl>:
    43dc:	8a 30       	cpi	r24, 0x0A	; 10
    43de:	1c f4       	brge	.+6      	; 0x43e6 <nibbleCheckOvfl+0xa>
    43e0:	88 23       	and	r24, r24
    43e2:	1c f0       	brlt	.+6      	; 0x43ea <nibbleCheckOvfl+0xe>
    43e4:	08 95       	ret
    43e6:	80 e0       	ldi	r24, 0x00	; 0
    43e8:	08 95       	ret
    43ea:	89 e0       	ldi	r24, 0x09	; 9
    43ec:	08 95       	ret

000043ee <nibbleChange>:
    43ee:	0f 93       	push	r16
    43f0:	1f 93       	push	r17
    43f2:	cf 93       	push	r28
    43f4:	df 93       	push	r29
    43f6:	c8 2f       	mov	r28, r24
    43f8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    43fc:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4400:	31 96       	adiw	r30, 0x01	; 1
    4402:	84 91       	lpm	r24, Z
    4404:	28 2f       	mov	r18, r24
    4406:	20 71       	andi	r18, 0x10	; 16
    4408:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    440c:	8e 2f       	mov	r24, r30
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	fc 01       	movw	r30, r24
    4412:	32 97       	sbiw	r30, 0x02	; 2
    4414:	ed 30       	cpi	r30, 0x0D	; 13
    4416:	f1 05       	cpc	r31, r1
    4418:	08 f0       	brcs	.+2      	; 0x441c <nibbleChange+0x2e>
    441a:	93 c1       	rjmp	.+806    	; 0x4742 <nibbleChange+0x354>
    441c:	88 27       	eor	r24, r24
    441e:	e4 57       	subi	r30, 0x74	; 116
    4420:	ff 4f       	sbci	r31, 0xFF	; 255
    4422:	8f 4f       	sbci	r24, 0xFF	; 255
    4424:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <__tablejump2__>
    4428:	d0 e0       	ldi	r29, 0x00	; 0
    442a:	cc 53       	subi	r28, 0x3C	; 60
    442c:	da 4f       	sbci	r29, 0xFA	; 250
    442e:	88 81       	ld	r24, Y
    4430:	68 0f       	add	r22, r24
    4432:	6f 70       	andi	r22, 0x0F	; 15
    4434:	68 83       	st	Y, r22
    4436:	85 c1       	rjmp	.+778    	; 0x4742 <nibbleChange+0x354>
    4438:	21 11       	cpse	r18, r1
    443a:	1b c0       	rjmp	.+54     	; 0x4472 <nibbleChange+0x84>
    443c:	61 30       	cpi	r22, 0x01	; 1
    443e:	41 f4       	brne	.+16     	; 0x4450 <nibbleChange+0x62>
    4440:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4444:	80 31       	cpi	r24, 0x10	; 16
    4446:	20 f0       	brcs	.+8      	; 0x4450 <nibbleChange+0x62>
    4448:	81 e0       	ldi	r24, 0x01	; 1
    444a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    444e:	79 c1       	rjmp	.+754    	; 0x4742 <nibbleChange+0x354>
    4450:	6f 3f       	cpi	r22, 0xFF	; 255
    4452:	49 f4       	brne	.+18     	; 0x4466 <nibbleChange+0x78>
    4454:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4458:	82 50       	subi	r24, 0x02	; 2
    445a:	8f 30       	cpi	r24, 0x0F	; 15
    445c:	20 f0       	brcs	.+8      	; 0x4466 <nibbleChange+0x78>
    445e:	80 e1       	ldi	r24, 0x10	; 16
    4460:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4464:	6e c1       	rjmp	.+732    	; 0x4742 <nibbleChange+0x354>
    4466:	e4 ec       	ldi	r30, 0xC4	; 196
    4468:	f5 e0       	ldi	r31, 0x05	; 5
    446a:	80 81       	ld	r24, Z
    446c:	68 0f       	add	r22, r24
    446e:	60 83       	st	Z, r22
    4470:	68 c1       	rjmp	.+720    	; 0x4742 <nibbleChange+0x354>
    4472:	61 30       	cpi	r22, 0x01	; 1
    4474:	41 f4       	brne	.+16     	; 0x4486 <nibbleChange+0x98>
    4476:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    447a:	80 31       	cpi	r24, 0x10	; 16
    447c:	21 f4       	brne	.+8      	; 0x4486 <nibbleChange+0x98>
    447e:	8f ef       	ldi	r24, 0xFF	; 255
    4480:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4484:	5e c1       	rjmp	.+700    	; 0x4742 <nibbleChange+0x354>
    4486:	61 30       	cpi	r22, 0x01	; 1
    4488:	41 f4       	brne	.+16     	; 0x449a <nibbleChange+0xac>
    448a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    448e:	8f 3f       	cpi	r24, 0xFF	; 255
    4490:	21 f4       	brne	.+8      	; 0x449a <nibbleChange+0xac>
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4498:	54 c1       	rjmp	.+680    	; 0x4742 <nibbleChange+0x354>
    449a:	6f 3f       	cpi	r22, 0xFF	; 255
    449c:	41 f4       	brne	.+16     	; 0x44ae <nibbleChange+0xc0>
    449e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    44a2:	8f 3f       	cpi	r24, 0xFF	; 255
    44a4:	21 f4       	brne	.+8      	; 0x44ae <nibbleChange+0xc0>
    44a6:	80 e1       	ldi	r24, 0x10	; 16
    44a8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    44ac:	4a c1       	rjmp	.+660    	; 0x4742 <nibbleChange+0x354>
    44ae:	6f 3f       	cpi	r22, 0xFF	; 255
    44b0:	41 f4       	brne	.+16     	; 0x44c2 <nibbleChange+0xd4>
    44b2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    44b6:	81 30       	cpi	r24, 0x01	; 1
    44b8:	21 f4       	brne	.+8      	; 0x44c2 <nibbleChange+0xd4>
    44ba:	8f ef       	ldi	r24, 0xFF	; 255
    44bc:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    44c0:	40 c1       	rjmp	.+640    	; 0x4742 <nibbleChange+0x354>
    44c2:	e4 ec       	ldi	r30, 0xC4	; 196
    44c4:	f5 e0       	ldi	r31, 0x05	; 5
    44c6:	80 81       	ld	r24, Z
    44c8:	68 0f       	add	r22, r24
    44ca:	60 83       	st	Z, r22
    44cc:	3a c1       	rjmp	.+628    	; 0x4742 <nibbleChange+0x354>
    44ce:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    44d2:	8f 3f       	cpi	r24, 0xFF	; 255
    44d4:	09 f4       	brne	.+2      	; 0x44d8 <nibbleChange+0xea>
    44d6:	c1 e0       	ldi	r28, 0x01	; 1
    44d8:	c1 11       	cpse	r28, r1
    44da:	16 c0       	rjmp	.+44     	; 0x4508 <nibbleChange+0x11a>
    44dc:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    44e0:	8c 30       	cpi	r24, 0x0C	; 12
    44e2:	50 f4       	brcc	.+20     	; 0x44f8 <nibbleChange+0x10a>
    44e4:	8b 30       	cpi	r24, 0x0B	; 11
    44e6:	11 f4       	brne	.+4      	; 0x44ec <nibbleChange+0xfe>
    44e8:	61 30       	cpi	r22, 0x01	; 1
    44ea:	41 f0       	breq	.+16     	; 0x44fc <nibbleChange+0x10e>
    44ec:	81 11       	cpse	r24, r1
    44ee:	02 c0       	rjmp	.+4      	; 0x44f4 <nibbleChange+0x106>
    44f0:	6f 3f       	cpi	r22, 0xFF	; 255
    44f2:	31 f0       	breq	.+12     	; 0x4500 <nibbleChange+0x112>
    44f4:	68 0f       	add	r22, r24
    44f6:	05 c0       	rjmp	.+10     	; 0x4502 <nibbleChange+0x114>
    44f8:	60 e0       	ldi	r22, 0x00	; 0
    44fa:	03 c0       	rjmp	.+6      	; 0x4502 <nibbleChange+0x114>
    44fc:	60 e0       	ldi	r22, 0x00	; 0
    44fe:	01 c0       	rjmp	.+2      	; 0x4502 <nibbleChange+0x114>
    4500:	6b e0       	ldi	r22, 0x0B	; 11
    4502:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    4506:	2b c0       	rjmp	.+86     	; 0x455e <nibbleChange+0x170>
    4508:	21 11       	cpse	r18, r1
    450a:	0a c0       	rjmp	.+20     	; 0x4520 <nibbleChange+0x132>
    450c:	81 11       	cpse	r24, r1
    450e:	02 c0       	rjmp	.+4      	; 0x4514 <nibbleChange+0x126>
    4510:	6f 3f       	cpi	r22, 0xFF	; 255
    4512:	c1 f0       	breq	.+48     	; 0x4544 <nibbleChange+0x156>
    4514:	8a 30       	cpi	r24, 0x0A	; 10
    4516:	11 f4       	brne	.+4      	; 0x451c <nibbleChange+0x12e>
    4518:	61 30       	cpi	r22, 0x01	; 1
    451a:	b1 f0       	breq	.+44     	; 0x4548 <nibbleChange+0x15a>
    451c:	68 0f       	add	r22, r24
    451e:	1d c0       	rjmp	.+58     	; 0x455a <nibbleChange+0x16c>
    4520:	81 11       	cpse	r24, r1
    4522:	02 c0       	rjmp	.+4      	; 0x4528 <nibbleChange+0x13a>
    4524:	6f 3f       	cpi	r22, 0xFF	; 255
    4526:	91 f0       	breq	.+36     	; 0x454c <nibbleChange+0x15e>
    4528:	8a 30       	cpi	r24, 0x0A	; 10
    452a:	11 f4       	brne	.+4      	; 0x4530 <nibbleChange+0x142>
    452c:	61 30       	cpi	r22, 0x01	; 1
    452e:	81 f0       	breq	.+32     	; 0x4550 <nibbleChange+0x162>
    4530:	8f 3f       	cpi	r24, 0xFF	; 255
    4532:	11 f4       	brne	.+4      	; 0x4538 <nibbleChange+0x14a>
    4534:	61 30       	cpi	r22, 0x01	; 1
    4536:	71 f0       	breq	.+28     	; 0x4554 <nibbleChange+0x166>
    4538:	8f 3f       	cpi	r24, 0xFF	; 255
    453a:	11 f4       	brne	.+4      	; 0x4540 <nibbleChange+0x152>
    453c:	6f 3f       	cpi	r22, 0xFF	; 255
    453e:	61 f0       	breq	.+24     	; 0x4558 <nibbleChange+0x16a>
    4540:	68 0f       	add	r22, r24
    4542:	0b c0       	rjmp	.+22     	; 0x455a <nibbleChange+0x16c>
    4544:	6a e0       	ldi	r22, 0x0A	; 10
    4546:	09 c0       	rjmp	.+18     	; 0x455a <nibbleChange+0x16c>
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	07 c0       	rjmp	.+14     	; 0x455a <nibbleChange+0x16c>
    454c:	6f ef       	ldi	r22, 0xFF	; 255
    454e:	05 c0       	rjmp	.+10     	; 0x455a <nibbleChange+0x16c>
    4550:	6f ef       	ldi	r22, 0xFF	; 255
    4552:	03 c0       	rjmp	.+6      	; 0x455a <nibbleChange+0x16c>
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	01 c0       	rjmp	.+2      	; 0x455a <nibbleChange+0x16c>
    4558:	6a e0       	ldi	r22, 0x0A	; 10
    455a:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    455e:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    4562:	9f 3f       	cpi	r25, 0xFF	; 255
    4564:	09 f4       	brne	.+2      	; 0x4568 <nibbleChange+0x17a>
    4566:	ed c0       	rjmp	.+474    	; 0x4742 <nibbleChange+0x354>
    4568:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    456c:	8f 3f       	cpi	r24, 0xFF	; 255
    456e:	09 f4       	brne	.+2      	; 0x4572 <nibbleChange+0x184>
    4570:	e8 c0       	rjmp	.+464    	; 0x4742 <nibbleChange+0x354>
    4572:	28 2f       	mov	r18, r24
    4574:	22 0f       	add	r18, r18
    4576:	82 0f       	add	r24, r18
    4578:	28 2f       	mov	r18, r24
    457a:	22 0f       	add	r18, r18
    457c:	22 0f       	add	r18, r18
    457e:	92 0f       	add	r25, r18
    4580:	0a f0       	brmi	.+2      	; 0x4584 <nibbleChange+0x196>
    4582:	df c0       	rjmp	.+446    	; 0x4742 <nibbleChange+0x354>
    4584:	e4 ec       	ldi	r30, 0xC4	; 196
    4586:	f5 e0       	ldi	r31, 0x05	; 5
    4588:	87 e0       	ldi	r24, 0x07	; 7
    458a:	80 83       	st	Z, r24
    458c:	8a e0       	ldi	r24, 0x0A	; 10
    458e:	81 83       	std	Z+1, r24	; 0x01
    4590:	d8 c0       	rjmp	.+432    	; 0x4742 <nibbleChange+0x354>
    4592:	c1 11       	cpse	r28, r1
    4594:	07 c0       	rjmp	.+14     	; 0x45a4 <nibbleChange+0x1b6>
    4596:	e4 ec       	ldi	r30, 0xC4	; 196
    4598:	f5 e0       	ldi	r31, 0x05	; 5
    459a:	80 81       	ld	r24, Z
    459c:	68 0f       	add	r22, r24
    459e:	67 70       	andi	r22, 0x07	; 7
    45a0:	60 83       	st	Z, r22
    45a2:	cf c0       	rjmp	.+414    	; 0x4742 <nibbleChange+0x354>
    45a4:	d0 e0       	ldi	r29, 0x00	; 0
    45a6:	04 ec       	ldi	r16, 0xC4	; 196
    45a8:	15 e0       	ldi	r17, 0x05	; 5
    45aa:	cc 53       	subi	r28, 0x3C	; 60
    45ac:	da 4f       	sbci	r29, 0xFA	; 250
    45ae:	88 81       	ld	r24, Y
    45b0:	86 0f       	add	r24, r22
    45b2:	14 df       	rcall	.-472    	; 0x43dc <nibbleCheckOvfl>
    45b4:	88 83       	st	Y, r24
    45b6:	f8 01       	movw	r30, r16
    45b8:	81 81       	ldd	r24, Z+1	; 0x01
    45ba:	92 81       	ldd	r25, Z+2	; 0x02
    45bc:	88 0f       	add	r24, r24
    45be:	28 2f       	mov	r18, r24
    45c0:	22 0f       	add	r18, r18
    45c2:	22 0f       	add	r18, r18
    45c4:	82 0f       	add	r24, r18
    45c6:	89 0f       	add	r24, r25
    45c8:	80 32       	cpi	r24, 0x20	; 32
    45ca:	2c f0       	brlt	.+10     	; 0x45d6 <nibbleChange+0x1e8>
    45cc:	83 e0       	ldi	r24, 0x03	; 3
    45ce:	81 83       	std	Z+1, r24	; 0x01
    45d0:	81 e0       	ldi	r24, 0x01	; 1
    45d2:	82 83       	std	Z+2, r24	; 0x02
    45d4:	b6 c0       	rjmp	.+364    	; 0x4742 <nibbleChange+0x354>
    45d6:	88 23       	and	r24, r24
    45d8:	0c f0       	brlt	.+2      	; 0x45dc <nibbleChange+0x1ee>
    45da:	b3 c0       	rjmp	.+358    	; 0x4742 <nibbleChange+0x354>
    45dc:	e4 ec       	ldi	r30, 0xC4	; 196
    45de:	f5 e0       	ldi	r31, 0x05	; 5
    45e0:	11 82       	std	Z+1, r1	; 0x01
    45e2:	12 82       	std	Z+2, r1	; 0x02
    45e4:	ae c0       	rjmp	.+348    	; 0x4742 <nibbleChange+0x354>
    45e6:	d0 e0       	ldi	r29, 0x00	; 0
    45e8:	04 ec       	ldi	r16, 0xC4	; 196
    45ea:	15 e0       	ldi	r17, 0x05	; 5
    45ec:	cc 53       	subi	r28, 0x3C	; 60
    45ee:	da 4f       	sbci	r29, 0xFA	; 250
    45f0:	88 81       	ld	r24, Y
    45f2:	86 0f       	add	r24, r22
    45f4:	f3 de       	rcall	.-538    	; 0x43dc <nibbleCheckOvfl>
    45f6:	88 83       	st	Y, r24
    45f8:	f8 01       	movw	r30, r16
    45fa:	20 81       	ld	r18, Z
    45fc:	81 81       	ldd	r24, Z+1	; 0x01
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	ac 01       	movw	r20, r24
    4602:	44 0f       	add	r20, r20
    4604:	55 1f       	adc	r21, r21
    4606:	88 0f       	add	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	88 0f       	add	r24, r24
    460c:	99 1f       	adc	r25, r25
    460e:	88 0f       	add	r24, r24
    4610:	99 1f       	adc	r25, r25
    4612:	84 0f       	add	r24, r20
    4614:	95 1f       	adc	r25, r21
    4616:	f4 e6       	ldi	r31, 0x64	; 100
    4618:	2f 9f       	mul	r18, r31
    461a:	80 0d       	add	r24, r0
    461c:	91 1d       	adc	r25, r1
    461e:	11 24       	eor	r1, r1
    4620:	f8 01       	movw	r30, r16
    4622:	22 81       	ldd	r18, Z+2	; 0x02
    4624:	82 0f       	add	r24, r18
    4626:	91 1d       	adc	r25, r1
    4628:	8f 3f       	cpi	r24, 0xFF	; 255
    462a:	91 05       	cpc	r25, r1
    462c:	09 f0       	breq	.+2      	; 0x4630 <nibbleChange+0x242>
    462e:	0c f4       	brge	.+2      	; 0x4632 <nibbleChange+0x244>
    4630:	88 c0       	rjmp	.+272    	; 0x4742 <nibbleChange+0x354>
    4632:	82 e0       	ldi	r24, 0x02	; 2
    4634:	80 83       	st	Z, r24
    4636:	85 e0       	ldi	r24, 0x05	; 5
    4638:	81 83       	std	Z+1, r24	; 0x01
    463a:	82 83       	std	Z+2, r24	; 0x02
    463c:	82 c0       	rjmp	.+260    	; 0x4742 <nibbleChange+0x354>
    463e:	22 23       	and	r18, r18
    4640:	a1 f0       	breq	.+40     	; 0x466a <nibbleChange+0x27c>
    4642:	d0 e0       	ldi	r29, 0x00	; 0
    4644:	fe 01       	movw	r30, r28
    4646:	ec 53       	subi	r30, 0x3C	; 60
    4648:	fa 4f       	sbci	r31, 0xFA	; 250
    464a:	80 81       	ld	r24, Z
    464c:	68 0f       	add	r22, r24
    464e:	60 83       	st	Z, r22
    4650:	64 30       	cpi	r22, 0x04	; 4
    4652:	19 f4       	brne	.+6      	; 0x465a <nibbleChange+0x26c>
    4654:	8f ef       	ldi	r24, 0xFF	; 255
    4656:	80 83       	st	Z, r24
    4658:	74 c0       	rjmp	.+232    	; 0x4742 <nibbleChange+0x354>
    465a:	6e 3f       	cpi	r22, 0xFE	; 254
    465c:	09 f0       	breq	.+2      	; 0x4660 <nibbleChange+0x272>
    465e:	71 c0       	rjmp	.+226    	; 0x4742 <nibbleChange+0x354>
    4660:	cc 53       	subi	r28, 0x3C	; 60
    4662:	da 4f       	sbci	r29, 0xFA	; 250
    4664:	83 e0       	ldi	r24, 0x03	; 3
    4666:	88 83       	st	Y, r24
    4668:	6c c0       	rjmp	.+216    	; 0x4742 <nibbleChange+0x354>
    466a:	d0 e0       	ldi	r29, 0x00	; 0
    466c:	fe 01       	movw	r30, r28
    466e:	ec 53       	subi	r30, 0x3C	; 60
    4670:	fa 4f       	sbci	r31, 0xFA	; 250
    4672:	80 81       	ld	r24, Z
    4674:	81 11       	cpse	r24, r1
    4676:	05 c0       	rjmp	.+10     	; 0x4682 <nibbleChange+0x294>
    4678:	6f 3f       	cpi	r22, 0xFF	; 255
    467a:	19 f4       	brne	.+6      	; 0x4682 <nibbleChange+0x294>
    467c:	83 e0       	ldi	r24, 0x03	; 3
    467e:	80 83       	st	Z, r24
    4680:	60 c0       	rjmp	.+192    	; 0x4742 <nibbleChange+0x354>
    4682:	83 30       	cpi	r24, 0x03	; 3
    4684:	31 f4       	brne	.+12     	; 0x4692 <nibbleChange+0x2a4>
    4686:	61 30       	cpi	r22, 0x01	; 1
    4688:	21 f4       	brne	.+8      	; 0x4692 <nibbleChange+0x2a4>
    468a:	cc 53       	subi	r28, 0x3C	; 60
    468c:	da 4f       	sbci	r29, 0xFA	; 250
    468e:	18 82       	st	Y, r1
    4690:	58 c0       	rjmp	.+176    	; 0x4742 <nibbleChange+0x354>
    4692:	cc 53       	subi	r28, 0x3C	; 60
    4694:	da 4f       	sbci	r29, 0xFA	; 250
    4696:	68 0f       	add	r22, r24
    4698:	68 83       	st	Y, r22
    469a:	53 c0       	rjmp	.+166    	; 0x4742 <nibbleChange+0x354>
    469c:	d0 e0       	ldi	r29, 0x00	; 0
    469e:	cc 53       	subi	r28, 0x3C	; 60
    46a0:	da 4f       	sbci	r29, 0xFA	; 250
    46a2:	88 81       	ld	r24, Y
    46a4:	68 0f       	add	r22, r24
    46a6:	63 70       	andi	r22, 0x03	; 3
    46a8:	68 83       	st	Y, r22
    46aa:	4b c0       	rjmp	.+150    	; 0x4742 <nibbleChange+0x354>
    46ac:	e4 ec       	ldi	r30, 0xC4	; 196
    46ae:	f5 e0       	ldi	r31, 0x05	; 5
    46b0:	80 81       	ld	r24, Z
    46b2:	80 95       	com	r24
    46b4:	80 83       	st	Z, r24
    46b6:	45 c0       	rjmp	.+138    	; 0x4742 <nibbleChange+0x354>
    46b8:	d0 e0       	ldi	r29, 0x00	; 0
    46ba:	81 e0       	ldi	r24, 0x01	; 1
    46bc:	61 fd       	sbrc	r22, 1
    46be:	80 e0       	ldi	r24, 0x00	; 0
    46c0:	cc 53       	subi	r28, 0x3C	; 60
    46c2:	da 4f       	sbci	r29, 0xFA	; 250
    46c4:	88 83       	st	Y, r24
    46c6:	3d c0       	rjmp	.+122    	; 0x4742 <nibbleChange+0x354>
    46c8:	61 30       	cpi	r22, 0x01	; 1
    46ca:	41 f4       	brne	.+16     	; 0x46dc <nibbleChange+0x2ee>
    46cc:	d0 e0       	ldi	r29, 0x00	; 0
    46ce:	cc 53       	subi	r28, 0x3C	; 60
    46d0:	da 4f       	sbci	r29, 0xFA	; 250
    46d2:	88 81       	ld	r24, Y
    46d4:	87 70       	andi	r24, 0x07	; 7
    46d6:	8f 5f       	subi	r24, 0xFF	; 255
    46d8:	88 83       	st	Y, r24
    46da:	33 c0       	rjmp	.+102    	; 0x4742 <nibbleChange+0x354>
    46dc:	ec 2f       	mov	r30, r28
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	ec 53       	subi	r30, 0x3C	; 60
    46e2:	fa 4f       	sbci	r31, 0xFA	; 250
    46e4:	80 81       	ld	r24, Z
    46e6:	82 50       	subi	r24, 0x02	; 2
    46e8:	87 70       	andi	r24, 0x07	; 7
    46ea:	8f 5f       	subi	r24, 0xFF	; 255
    46ec:	80 83       	st	Z, r24
    46ee:	29 c0       	rjmp	.+82     	; 0x4742 <nibbleChange+0x354>
    46f0:	e4 ec       	ldi	r30, 0xC4	; 196
    46f2:	f5 e0       	ldi	r31, 0x05	; 5
    46f4:	90 81       	ld	r25, Z
    46f6:	81 81       	ldd	r24, Z+1	; 0x01
    46f8:	99 0f       	add	r25, r25
    46fa:	29 2f       	mov	r18, r25
    46fc:	22 0f       	add	r18, r18
    46fe:	22 0f       	add	r18, r18
    4700:	92 0f       	add	r25, r18
    4702:	89 0f       	add	r24, r25
    4704:	c1 11       	cpse	r28, r1
    4706:	07 c0       	rjmp	.+14     	; 0x4716 <nibbleChange+0x328>
    4708:	66 0f       	add	r22, r22
    470a:	96 2f       	mov	r25, r22
    470c:	99 0f       	add	r25, r25
    470e:	99 0f       	add	r25, r25
    4710:	69 0f       	add	r22, r25
    4712:	68 0f       	add	r22, r24
    4714:	01 c0       	rjmp	.+2      	; 0x4718 <nibbleChange+0x32a>
    4716:	68 0f       	add	r22, r24
    4718:	66 23       	and	r22, r22
    471a:	1c f0       	brlt	.+6      	; 0x4722 <nibbleChange+0x334>
    471c:	61 34       	cpi	r22, 0x41	; 65
    471e:	1c f4       	brge	.+6      	; 0x4726 <nibbleChange+0x338>
    4720:	03 c0       	rjmp	.+6      	; 0x4728 <nibbleChange+0x33a>
    4722:	60 e0       	ldi	r22, 0x00	; 0
    4724:	01 c0       	rjmp	.+2      	; 0x4728 <nibbleChange+0x33a>
    4726:	60 e0       	ldi	r22, 0x00	; 0
    4728:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    472c:	06 c0       	rjmp	.+12     	; 0x473a <nibbleChange+0x34c>
    472e:	e4 ec       	ldi	r30, 0xC4	; 196
    4730:	f5 e0       	ldi	r31, 0x05	; 5
    4732:	80 81       	ld	r24, Z
    4734:	8f 5f       	subi	r24, 0xFF	; 255
    4736:	80 83       	st	Z, r24
    4738:	6a 50       	subi	r22, 0x0A	; 10
    473a:	6a 30       	cpi	r22, 0x0A	; 10
    473c:	c4 f7       	brge	.-16     	; 0x472e <nibbleChange+0x340>
    473e:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	0f 91       	pop	r16
    474a:	08 95       	ret

0000474c <nibbleToData>:
    474c:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4750:	8e 2f       	mov	r24, r30
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	fc 01       	movw	r30, r24
    4756:	32 97       	sbiw	r30, 0x02	; 2
    4758:	ed 30       	cpi	r30, 0x0D	; 13
    475a:	f1 05       	cpc	r31, r1
    475c:	08 f0       	brcs	.+2      	; 0x4760 <nibbleToData+0x14>
    475e:	da c0       	rjmp	.+436    	; 0x4914 <nibbleToData+0x1c8>
    4760:	88 27       	eor	r24, r24
    4762:	e7 56       	subi	r30, 0x67	; 103
    4764:	ff 4f       	sbci	r31, 0xFF	; 255
    4766:	8f 4f       	sbci	r24, 0xFF	; 255
    4768:	0c 94 5f 3d 	jmp	0x7abe	; 0x7abe <__tablejump2__>
    476c:	e4 ec       	ldi	r30, 0xC4	; 196
    476e:	f5 e0       	ldi	r31, 0x05	; 5
    4770:	80 81       	ld	r24, Z
    4772:	20 e1       	ldi	r18, 0x10	; 16
    4774:	82 9f       	mul	r24, r18
    4776:	c0 01       	movw	r24, r0
    4778:	11 24       	eor	r1, r1
    477a:	91 81       	ldd	r25, Z+1	; 0x01
    477c:	9f 70       	andi	r25, 0x0F	; 15
    477e:	89 2b       	or	r24, r25
    4780:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4784:	08 95       	ret
    4786:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    478a:	8f ef       	ldi	r24, 0xFF	; 255
    478c:	89 0f       	add	r24, r25
    478e:	80 31       	cpi	r24, 0x10	; 16
    4790:	18 f0       	brcs	.+6      	; 0x4798 <nibbleToData+0x4c>
    4792:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    4796:	08 95       	ret
    4798:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    479c:	08 95       	ret
    479e:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    47a2:	9f 3f       	cpi	r25, 0xFF	; 255
    47a4:	21 f0       	breq	.+8      	; 0x47ae <nibbleToData+0x62>
    47a6:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    47aa:	8f 3f       	cpi	r24, 0xFF	; 255
    47ac:	21 f4       	brne	.+8      	; 0x47b6 <nibbleToData+0x6a>
    47ae:	8f ef       	ldi	r24, 0xFF	; 255
    47b0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47b4:	08 95       	ret
    47b6:	28 2f       	mov	r18, r24
    47b8:	22 0f       	add	r18, r18
    47ba:	82 0f       	add	r24, r18
    47bc:	88 0f       	add	r24, r24
    47be:	88 0f       	add	r24, r24
    47c0:	89 0f       	add	r24, r25
    47c2:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47c6:	08 95       	ret
    47c8:	e4 ec       	ldi	r30, 0xC4	; 196
    47ca:	f5 e0       	ldi	r31, 0x05	; 5
    47cc:	80 81       	ld	r24, Z
    47ce:	30 e2       	ldi	r19, 0x20	; 32
    47d0:	83 9f       	mul	r24, r19
    47d2:	c0 01       	movw	r24, r0
    47d4:	11 24       	eor	r1, r1
    47d6:	21 81       	ldd	r18, Z+1	; 0x01
    47d8:	32 81       	ldd	r19, Z+2	; 0x02
    47da:	22 0f       	add	r18, r18
    47dc:	42 2f       	mov	r20, r18
    47de:	44 0f       	add	r20, r20
    47e0:	44 0f       	add	r20, r20
    47e2:	24 0f       	add	r18, r20
    47e4:	23 0f       	add	r18, r19
    47e6:	20 32       	cpi	r18, 0x20	; 32
    47e8:	20 f0       	brcs	.+8      	; 0x47f2 <nibbleToData+0xa6>
    47ea:	8f 61       	ori	r24, 0x1F	; 31
    47ec:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47f0:	08 95       	ret
    47f2:	82 2b       	or	r24, r18
    47f4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47f8:	08 95       	ret
    47fa:	e4 ec       	ldi	r30, 0xC4	; 196
    47fc:	f5 e0       	ldi	r31, 0x05	; 5
    47fe:	20 81       	ld	r18, Z
    4800:	81 81       	ldd	r24, Z+1	; 0x01
    4802:	90 e0       	ldi	r25, 0x00	; 0
    4804:	ac 01       	movw	r20, r24
    4806:	44 0f       	add	r20, r20
    4808:	55 1f       	adc	r21, r21
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	88 0f       	add	r24, r24
    4810:	99 1f       	adc	r25, r25
    4812:	88 0f       	add	r24, r24
    4814:	99 1f       	adc	r25, r25
    4816:	84 0f       	add	r24, r20
    4818:	95 1f       	adc	r25, r21
    481a:	34 e6       	ldi	r19, 0x64	; 100
    481c:	23 9f       	mul	r18, r19
    481e:	80 0d       	add	r24, r0
    4820:	91 1d       	adc	r25, r1
    4822:	11 24       	eor	r1, r1
    4824:	22 81       	ldd	r18, Z+2	; 0x02
    4826:	82 0f       	add	r24, r18
    4828:	91 1d       	adc	r25, r1
    482a:	8f 3f       	cpi	r24, 0xFF	; 255
    482c:	91 05       	cpc	r25, r1
    482e:	29 f0       	breq	.+10     	; 0x483a <nibbleToData+0xee>
    4830:	20 f0       	brcs	.+8      	; 0x483a <nibbleToData+0xee>
    4832:	8f ef       	ldi	r24, 0xFF	; 255
    4834:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4838:	08 95       	ret
    483a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    483e:	08 95       	ret
    4840:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4844:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4848:	84 30       	cpi	r24, 0x04	; 4
    484a:	08 f4       	brcc	.+2      	; 0x484e <nibbleToData+0x102>
    484c:	63 c0       	rjmp	.+198    	; 0x4914 <nibbleToData+0x1c8>
    484e:	8f ef       	ldi	r24, 0xFF	; 255
    4850:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4854:	08 95       	ret
    4856:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    485a:	83 70       	andi	r24, 0x03	; 3
    485c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4860:	08 95       	ret
    4862:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4866:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    486a:	08 95       	ret
    486c:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    4870:	80 e0       	ldi	r24, 0x00	; 0
    4872:	0c c0       	rjmp	.+24     	; 0x488c <nibbleToData+0x140>
    4874:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    4878:	99 0f       	add	r25, r25
    487a:	e8 2f       	mov	r30, r24
    487c:	f0 e0       	ldi	r31, 0x00	; 0
    487e:	ec 53       	subi	r30, 0x3C	; 60
    4880:	fa 4f       	sbci	r31, 0xFA	; 250
    4882:	20 81       	ld	r18, Z
    4884:	92 0f       	add	r25, r18
    4886:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    488a:	8f 5f       	subi	r24, 0xFF	; 255
    488c:	88 30       	cpi	r24, 0x08	; 8
    488e:	90 f3       	brcs	.-28     	; 0x4874 <nibbleToData+0x128>
    4890:	08 95       	ret
    4892:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    4896:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    489a:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    489e:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    48a2:	a2 ea       	ldi	r26, 0xA2	; 162
    48a4:	b5 e0       	ldi	r27, 0x05	; 5
    48a6:	88 e0       	ldi	r24, 0x08	; 8
    48a8:	10 c0       	rjmp	.+32     	; 0x48ca <nibbleToData+0x17e>
    48aa:	82 50       	subi	r24, 0x02	; 2
    48ac:	f0 e0       	ldi	r31, 0x00	; 0
    48ae:	ec 53       	subi	r30, 0x3C	; 60
    48b0:	fa 4f       	sbci	r31, 0xFA	; 250
    48b2:	90 81       	ld	r25, Z
    48b4:	e8 2f       	mov	r30, r24
    48b6:	f0 e0       	ldi	r31, 0x00	; 0
    48b8:	ec 53       	subi	r30, 0x3C	; 60
    48ba:	fa 4f       	sbci	r31, 0xFA	; 250
    48bc:	20 81       	ld	r18, Z
    48be:	30 e1       	ldi	r19, 0x10	; 16
    48c0:	23 9f       	mul	r18, r19
    48c2:	90 0d       	add	r25, r0
    48c4:	11 24       	eor	r1, r1
    48c6:	9c 93       	st	X, r25
    48c8:	11 96       	adiw	r26, 0x01	; 1
    48ca:	ef ef       	ldi	r30, 0xFF	; 255
    48cc:	e8 0f       	add	r30, r24
    48ce:	81 11       	cpse	r24, r1
    48d0:	ec cf       	rjmp	.-40     	; 0x48aa <nibbleToData+0x15e>
    48d2:	08 95       	ret
    48d4:	e4 ec       	ldi	r30, 0xC4	; 196
    48d6:	f5 e0       	ldi	r31, 0x05	; 5
    48d8:	20 81       	ld	r18, Z
    48da:	91 81       	ldd	r25, Z+1	; 0x01
    48dc:	89 2f       	mov	r24, r25
    48de:	90 e0       	ldi	r25, 0x00	; 0
    48e0:	01 97       	sbiw	r24, 0x01	; 1
    48e2:	88 0f       	add	r24, r24
    48e4:	99 1f       	adc	r25, r25
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	88 0f       	add	r24, r24
    48ec:	99 1f       	adc	r25, r25
    48ee:	9f ef       	ldi	r25, 0xFF	; 255
    48f0:	92 0f       	add	r25, r18
    48f2:	89 2b       	or	r24, r25
    48f4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    48f8:	08 95       	ret
    48fa:	e4 ec       	ldi	r30, 0xC4	; 196
    48fc:	f5 e0       	ldi	r31, 0x05	; 5
    48fe:	80 81       	ld	r24, Z
    4900:	91 81       	ldd	r25, Z+1	; 0x01
    4902:	88 0f       	add	r24, r24
    4904:	28 2f       	mov	r18, r24
    4906:	22 0f       	add	r18, r18
    4908:	22 0f       	add	r18, r18
    490a:	82 0f       	add	r24, r18
    490c:	89 0f       	add	r24, r25
    490e:	81 50       	subi	r24, 0x01	; 1
    4910:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4914:	08 95       	ret

00004916 <menuTextOut>:
    4916:	0f 93       	push	r16
    4918:	1f 93       	push	r17
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    491e:	8c 01       	movw	r16, r24
    4920:	d6 2f       	mov	r29, r22
    4922:	c0 e0       	ldi	r28, 0x00	; 0
    4924:	0c c0       	rjmp	.+24     	; 0x493e <menuTextOut+0x28>
    4926:	f8 01       	movw	r30, r16
    4928:	84 91       	lpm	r24, Z
    492a:	88 23       	and	r24, r24
    492c:	19 f0       	breq	.+6      	; 0x4934 <menuTextOut+0x1e>
    492e:	0f 5f       	subi	r16, 0xFF	; 255
    4930:	1f 4f       	sbci	r17, 0xFF	; 255
    4932:	02 c0       	rjmp	.+4      	; 0x4938 <menuTextOut+0x22>
    4934:	8d 2f       	mov	r24, r29
    4936:	d0 e2       	ldi	r29, 0x20	; 32
    4938:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    493c:	cf 5f       	subi	r28, 0xFF	; 255
    493e:	ca 30       	cpi	r28, 0x0A	; 10
    4940:	90 f3       	brcs	.-28     	; 0x4926 <menuTextOut+0x10>
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	1f 91       	pop	r17
    4948:	0f 91       	pop	r16
    494a:	08 95       	ret

0000494c <menuParentMenuToLCD>:
    494c:	80 e4       	ldi	r24, 0x40	; 64
    494e:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    4952:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4956:	e1 11       	cpse	r30, r1
    4958:	07 c0       	rjmp	.+14     	; 0x4968 <menuParentMenuToLCD+0x1c>
    495a:	6a e3       	ldi	r22, 0x3A	; 58
    495c:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    4960:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    4964:	d8 cf       	rjmp	.-80     	; 0x4916 <menuTextOut>
    4966:	08 95       	ret
    4968:	f0 e0       	ldi	r31, 0x00	; 0
    496a:	31 97       	sbiw	r30, 0x01	; 1
    496c:	ee 0f       	add	r30, r30
    496e:	ff 1f       	adc	r31, r31
    4970:	e5 58       	subi	r30, 0x85	; 133
    4972:	fa 4f       	sbci	r31, 0xFA	; 250
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	6a e3       	ldi	r22, 0x3A	; 58
    497a:	02 96       	adiw	r24, 0x02	; 2
    497c:	cc cf       	rjmp	.-104    	; 0x4916 <menuTextOut>
    497e:	08 95       	ret

00004980 <menuDisplayValue>:
    4980:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4984:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4988:	84 91       	lpm	r24, Z
    498a:	8f 73       	andi	r24, 0x3F	; 63
    498c:	90 e0       	ldi	r25, 0x00	; 0
    498e:	02 97       	sbiw	r24, 0x02	; 2
    4990:	1c f0       	brlt	.+6      	; 0x4998 <menuDisplayValue+0x18>
    4992:	c8 da       	rcall	.-2672   	; 0x3f24 <dataToNibbles>
    4994:	ba db       	rcall	.-2188   	; 0x410a <nibbleToLCDstring>
    4996:	07 cd       	rjmp	.-1522   	; 0x43a6 <LCDStringOut>
    4998:	08 95       	ret

0000499a <menuCursorSetDataNibble>:
    499a:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    499e:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    49a2:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    49a6:	e8 0f       	add	r30, r24
    49a8:	f1 1d       	adc	r31, r1
    49aa:	31 96       	adiw	r30, 0x01	; 1
    49ac:	84 91       	lpm	r24, Z
    49ae:	82 5e       	subi	r24, 0xE2	; 226
    49b0:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    49b4:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    49be:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    49c2:	84 91       	lpm	r24, Z
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	01 97       	sbiw	r24, 0x01	; 1
    49c8:	28 17       	cp	r18, r24
    49ca:	39 07       	cpc	r19, r25
    49cc:	14 f4       	brge	.+4      	; 0x49d2 <menuCursorSetDataNibble+0x38>
    49ce:	68 da       	rcall	.-2864   	; 0x3ea0 <softkeyRight>
    49d0:	03 c0       	rjmp	.+6      	; 0x49d8 <menuCursorSetDataNibble+0x3e>
    49d2:	83 e0       	ldi	r24, 0x03	; 3
    49d4:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    49d8:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    49dc:	88 23       	and	r24, r24
    49de:	11 f0       	breq	.+4      	; 0x49e4 <menuCursorSetDataNibble+0x4a>
    49e0:	59 da       	rcall	.-2894   	; 0x3e94 <softkeyLeft>
    49e2:	03 c0       	rjmp	.+6      	; 0x49ea <menuCursorSetDataNibble+0x50>
    49e4:	82 e0       	ldi	r24, 0x02	; 2
    49e6:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    49ea:	78 da       	rcall	.-2832   	; 0x3edc <softkeyPlus>
    49ec:	89 da       	rcall	.-2798   	; 0x3f00 <softkeyMinus>
    49ee:	0c 94 fc 3c 	jmp	0x79f8	; 0x79f8 <keylabel_toLCD>
    49f2:	08 95       	ret

000049f4 <menuCursorSetExtra>:
    49f4:	84 e1       	ldi	r24, 0x14	; 20
    49f6:	0c 94 37 13 	jmp	0x266e	; 0x266e <lcd_goto>
    49fa:	08 95       	ret

000049fc <menuOnEnterStatusMidiIn>:
    49fc:	0f 93       	push	r16
    49fe:	1f 93       	push	r17
    4a00:	cf 93       	push	r28
    4a02:	f8 df       	rcall	.-16     	; 0x49f4 <menuCursorSetExtra>
    4a04:	8b ed       	ldi	r24, 0xDB	; 219
    4a06:	93 e0       	ldi	r25, 0x03	; 3
    4a08:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    4a0c:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    4a10:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4a14:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <lcd_wordout>
    4a18:	8d e2       	ldi	r24, 0x2D	; 45
    4a1a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    4a1e:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    4a22:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4a26:	04 97       	sbiw	r24, 0x04	; 4
    4a28:	30 f4       	brcc	.+12     	; 0x4a36 <menuOnEnterStatusMidiIn+0x3a>
    4a2a:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    4a2e:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4a32:	c8 2f       	mov	r28, r24
    4a34:	01 c0       	rjmp	.+2      	; 0x4a38 <menuOnEnterStatusMidiIn+0x3c>
    4a36:	c4 e0       	ldi	r28, 0x04	; 4
    4a38:	00 91 44 16 	lds	r16, 0x1644	; 0x801644 <midiRxInIndex>
    4a3c:	10 e0       	ldi	r17, 0x00	; 0
    4a3e:	00 5c       	subi	r16, 0xC0	; 192
    4a40:	1b 4e       	sbci	r17, 0xEB	; 235
    4a42:	13 c0       	rjmp	.+38     	; 0x4a6a <menuOnEnterStatusMidiIn+0x6e>
    4a44:	84 e1       	ldi	r24, 0x14	; 20
    4a46:	01 34       	cpi	r16, 0x41	; 65
    4a48:	18 07       	cpc	r17, r24
    4a4a:	10 f0       	brcs	.+4      	; 0x4a50 <menuOnEnterStatusMidiIn+0x54>
    4a4c:	f8 01       	movw	r30, r16
    4a4e:	02 c0       	rjmp	.+4      	; 0x4a54 <menuOnEnterStatusMidiIn+0x58>
    4a50:	e0 e4       	ldi	r30, 0x40	; 64
    4a52:	f5 e1       	ldi	r31, 0x15	; 21
    4a54:	8f 01       	movw	r16, r30
    4a56:	01 50       	subi	r16, 0x01	; 1
    4a58:	11 09       	sbc	r17, r1
    4a5a:	80 81       	ld	r24, Z
    4a5c:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <lcd_hexout>
    4a60:	c1 50       	subi	r28, 0x01	; 1
    4a62:	19 f0       	breq	.+6      	; 0x4a6a <menuOnEnterStatusMidiIn+0x6e>
    4a64:	80 e2       	ldi	r24, 0x20	; 32
    4a66:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    4a6a:	c1 11       	cpse	r28, r1
    4a6c:	eb cf       	rjmp	.-42     	; 0x4a44 <menuOnEnterStatusMidiIn+0x48>
    4a6e:	80 e0       	ldi	r24, 0x00	; 0
    4a70:	cf 91       	pop	r28
    4a72:	1f 91       	pop	r17
    4a74:	0f 91       	pop	r16
    4a76:	08 95       	ret

00004a78 <menuOnEnterStatusMidiOut>:
    4a78:	0f 93       	push	r16
    4a7a:	1f 93       	push	r17
    4a7c:	cf 93       	push	r28
    4a7e:	ba df       	rcall	.-140    	; 0x49f4 <menuCursorSetExtra>
    4a80:	86 ed       	ldi	r24, 0xD6	; 214
    4a82:	93 e0       	ldi	r25, 0x03	; 3
    4a84:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    4a88:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a8c:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4a90:	0e 94 e5 3b 	call	0x77ca	; 0x77ca <lcd_wordout>
    4a94:	8d e2       	ldi	r24, 0x2D	; 45
    4a96:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    4a9a:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4a9e:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4aa2:	04 97       	sbiw	r24, 0x04	; 4
    4aa4:	30 f4       	brcc	.+12     	; 0x4ab2 <menuOnEnterStatusMidiOut+0x3a>
    4aa6:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    4aaa:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    4aae:	c8 2f       	mov	r28, r24
    4ab0:	01 c0       	rjmp	.+2      	; 0x4ab4 <menuOnEnterStatusMidiOut+0x3c>
    4ab2:	c4 e0       	ldi	r28, 0x04	; 4
    4ab4:	00 91 ef 13 	lds	r16, 0x13EF	; 0x8013ef <midiTxInIndex>
    4ab8:	10 e0       	ldi	r17, 0x00	; 0
    4aba:	0f 5b       	subi	r16, 0xBF	; 191
    4abc:	1a 4e       	sbci	r17, 0xEA	; 234
    4abe:	13 c0       	rjmp	.+38     	; 0x4ae6 <menuOnEnterStatusMidiOut+0x6e>
    4ac0:	85 e1       	ldi	r24, 0x15	; 21
    4ac2:	02 34       	cpi	r16, 0x42	; 66
    4ac4:	18 07       	cpc	r17, r24
    4ac6:	10 f0       	brcs	.+4      	; 0x4acc <menuOnEnterStatusMidiOut+0x54>
    4ac8:	f8 01       	movw	r30, r16
    4aca:	02 c0       	rjmp	.+4      	; 0x4ad0 <menuOnEnterStatusMidiOut+0x58>
    4acc:	e1 e4       	ldi	r30, 0x41	; 65
    4ace:	f6 e1       	ldi	r31, 0x16	; 22
    4ad0:	8f 01       	movw	r16, r30
    4ad2:	01 50       	subi	r16, 0x01	; 1
    4ad4:	11 09       	sbc	r17, r1
    4ad6:	80 81       	ld	r24, Z
    4ad8:	0e 94 59 3a 	call	0x74b2	; 0x74b2 <lcd_hexout>
    4adc:	c1 50       	subi	r28, 0x01	; 1
    4ade:	19 f0       	breq	.+6      	; 0x4ae6 <menuOnEnterStatusMidiOut+0x6e>
    4ae0:	80 e2       	ldi	r24, 0x20	; 32
    4ae2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    4ae6:	c1 11       	cpse	r28, r1
    4ae8:	eb cf       	rjmp	.-42     	; 0x4ac0 <menuOnEnterStatusMidiOut+0x48>
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	cf 91       	pop	r28
    4aee:	1f 91       	pop	r17
    4af0:	0f 91       	pop	r16
    4af2:	08 95       	ret

00004af4 <menuOnEnterLogDisp>:
    4af4:	0f 93       	push	r16
    4af6:	1f 93       	push	r17
    4af8:	cf 93       	push	r28
    4afa:	8f 3f       	cpi	r24, 0xFF	; 255
    4afc:	a9 f4       	brne	.+42     	; 0x4b28 <menuOnEnterLogDisp+0x34>
    4afe:	0e 94 c4 13 	call	0x2788	; 0x2788 <log_count>
    4b02:	81 50       	subi	r24, 0x01	; 1
    4b04:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3063>
    4b08:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.3064>
    4b0c:	6e ed       	ldi	r22, 0xDE	; 222
    4b0e:	72 e1       	ldi	r23, 0x12	; 18
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    4b16:	68 ed       	ldi	r22, 0xD8	; 216
    4b18:	72 e1       	ldi	r23, 0x12	; 18
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    4b20:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
    4b24:	cf ef       	ldi	r28, 0xFF	; 255
    4b26:	2f c0       	rjmp	.+94     	; 0x4b86 <menuOnEnterLogDisp+0x92>
    4b28:	84 30       	cpi	r24, 0x04	; 4
    4b2a:	49 f4       	brne	.+18     	; 0x4b3e <menuOnEnterLogDisp+0x4a>
    4b2c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3063>
    4b30:	88 23       	and	r24, r24
    4b32:	21 f1       	breq	.+72     	; 0x4b7c <menuOnEnterLogDisp+0x88>
    4b34:	81 50       	subi	r24, 0x01	; 1
    4b36:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3063>
    4b3a:	cf ef       	ldi	r28, 0xFF	; 255
    4b3c:	24 c0       	rjmp	.+72     	; 0x4b86 <menuOnEnterLogDisp+0x92>
    4b3e:	81 30       	cpi	r24, 0x01	; 1
    4b40:	91 f4       	brne	.+36     	; 0x4b66 <menuOnEnterLogDisp+0x72>
    4b42:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3063>
    4b46:	10 e0       	ldi	r17, 0x00	; 0
    4b48:	0f 5f       	subi	r16, 0xFF	; 255
    4b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4c:	0e 94 c4 13 	call	0x2788	; 0x2788 <log_count>
    4b50:	90 e0       	ldi	r25, 0x00	; 0
    4b52:	08 17       	cp	r16, r24
    4b54:	19 07       	cpc	r17, r25
    4b56:	a4 f4       	brge	.+40     	; 0x4b80 <menuOnEnterLogDisp+0x8c>
    4b58:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3063>
    4b5c:	8f 5f       	subi	r24, 0xFF	; 255
    4b5e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3063>
    4b62:	cf ef       	ldi	r28, 0xFF	; 255
    4b64:	10 c0       	rjmp	.+32     	; 0x4b86 <menuOnEnterLogDisp+0x92>
    4b66:	83 30       	cpi	r24, 0x03	; 3
    4b68:	11 f0       	breq	.+4      	; 0x4b6e <menuOnEnterLogDisp+0x7a>
    4b6a:	85 30       	cpi	r24, 0x05	; 5
    4b6c:	59 f4       	brne	.+22     	; 0x4b84 <menuOnEnterLogDisp+0x90>
    4b6e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3064>
    4b72:	80 95       	com	r24
    4b74:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.3064>
    4b78:	cf ef       	ldi	r28, 0xFF	; 255
    4b7a:	05 c0       	rjmp	.+10     	; 0x4b86 <menuOnEnterLogDisp+0x92>
    4b7c:	cf ef       	ldi	r28, 0xFF	; 255
    4b7e:	03 c0       	rjmp	.+6      	; 0x4b86 <menuOnEnterLogDisp+0x92>
    4b80:	cf ef       	ldi	r28, 0xFF	; 255
    4b82:	01 c0       	rjmp	.+2      	; 0x4b86 <menuOnEnterLogDisp+0x92>
    4b84:	c0 e0       	ldi	r28, 0x00	; 0
    4b86:	cf 3f       	cpi	r28, 0xFF	; 255
    4b88:	09 f0       	breq	.+2      	; 0x4b8c <menuOnEnterLogDisp+0x98>
    4b8a:	54 c0       	rjmp	.+168    	; 0x4c34 <menuOnEnterLogDisp+0x140>
    4b8c:	33 df       	rcall	.-410    	; 0x49f4 <menuCursorSetExtra>
    4b8e:	0e 94 c4 13 	call	0x2788	; 0x2788 <log_count>
    4b92:	81 11       	cpse	r24, r1
    4b94:	06 c0       	rjmp	.+12     	; 0x4ba2 <menuOnEnterLogDisp+0xae>
    4b96:	89 e9       	ldi	r24, 0x99	; 153
    4b98:	93 e0       	ldi	r25, 0x03	; 3
    4b9a:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    4b9e:	c0 e0       	ldi	r28, 0x00	; 0
    4ba0:	1d c0       	rjmp	.+58     	; 0x4bdc <menuOnEnterLogDisp+0xe8>
    4ba2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3063>
    4ba6:	8f 5f       	subi	r24, 0xFF	; 255
    4ba8:	0e 94 95 3a 	call	0x752a	; 0x752a <lcd_dec2out>
    4bac:	8a e3       	ldi	r24, 0x3A	; 58
    4bae:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    4bb2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3064>
    4bb6:	81 11       	cpse	r24, r1
    4bb8:	08 c0       	rjmp	.+16     	; 0x4bca <menuOnEnterLogDisp+0xd6>
    4bba:	60 e2       	ldi	r22, 0x20	; 32
    4bbc:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3063>
    4bc0:	0e 94 65 15 	call	0x2aca	; 0x2aca <log_getShortTextFromIndex>
    4bc4:	0e 94 99 13 	call	0x2732	; 0x2732 <lcd_puts>
    4bc8:	06 c0       	rjmp	.+12     	; 0x4bd6 <menuOnEnterLogDisp+0xe2>
    4bca:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3063>
    4bce:	0e 94 0b 14 	call	0x2816	; 0x2816 <log_getErrorText>
    4bd2:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    4bd6:	0e 94 6d 3c 	call	0x78da	; 0x78da <lcd_clrEol>
    4bda:	0c df       	rcall	.-488    	; 0x49f4 <menuCursorSetExtra>
    4bdc:	61 e0       	ldi	r22, 0x01	; 1
    4bde:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3064>
    4be2:	8f 3f       	cpi	r24, 0xFF	; 255
    4be4:	09 f0       	breq	.+2      	; 0x4be8 <menuOnEnterLogDisp+0xf4>
    4be6:	60 e0       	ldi	r22, 0x00	; 0
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <keylabel_statcheck>
    4bee:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3063>
    4bf2:	10 e0       	ldi	r17, 0x00	; 0
    4bf4:	0f 5f       	subi	r16, 0xFF	; 255
    4bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bf8:	0e 94 c4 13 	call	0x2788	; 0x2788 <log_count>
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	08 17       	cp	r16, r24
    4c00:	19 07       	cpc	r17, r25
    4c02:	34 f4       	brge	.+12     	; 0x4c10 <menuOnEnterLogDisp+0x11c>
    4c04:	68 ef       	ldi	r22, 0xF8	; 248
    4c06:	72 e1       	ldi	r23, 0x12	; 18
    4c08:	83 e0       	ldi	r24, 0x03	; 3
    4c0a:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    4c0e:	03 c0       	rjmp	.+6      	; 0x4c16 <menuOnEnterLogDisp+0x122>
    4c10:	83 e0       	ldi	r24, 0x03	; 3
    4c12:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4c16:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3063>
    4c1a:	88 23       	and	r24, r24
    4c1c:	31 f0       	breq	.+12     	; 0x4c2a <menuOnEnterLogDisp+0x136>
    4c1e:	66 ef       	ldi	r22, 0xF6	; 246
    4c20:	72 e1       	ldi	r23, 0x12	; 18
    4c22:	82 e0       	ldi	r24, 0x02	; 2
    4c24:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
    4c28:	03 c0       	rjmp	.+6      	; 0x4c30 <menuOnEnterLogDisp+0x13c>
    4c2a:	82 e0       	ldi	r24, 0x02	; 2
    4c2c:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4c30:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
    4c34:	8c 2f       	mov	r24, r28
    4c36:	cf 91       	pop	r28
    4c38:	1f 91       	pop	r17
    4c3a:	0f 91       	pop	r16
    4c3c:	08 95       	ret

00004c3e <menuCursorSetMenu>:
    4c3e:	8a e4       	ldi	r24, 0x4A	; 74
    4c40:	0c 94 37 13 	jmp	0x266e	; 0x266e <lcd_goto>
    4c44:	08 95       	ret

00004c46 <menuClearExtraDisp>:
    4c46:	d6 de       	rcall	.-596    	; 0x49f4 <menuCursorSetExtra>
    4c48:	8a e0       	ldi	r24, 0x0A	; 10
    4c4a:	0c 94 61 3c 	jmp	0x78c2	; 0x78c2 <lcd_blank>
    4c4e:	08 95       	ret

00004c50 <menu_ClearDataDisp>:
    4c50:	8e e1       	ldi	r24, 0x1E	; 30
    4c52:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    4c56:	8a e0       	ldi	r24, 0x0A	; 10
    4c58:	0c 94 61 3c 	jmp	0x78c2	; 0x78c2 <lcd_blank>
    4c5c:	08 95       	ret

00004c5e <menuClearMenuDisp>:
    4c5e:	80 e4       	ldi	r24, 0x40	; 64
    4c60:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    4c64:	8a e0       	ldi	r24, 0x0A	; 10
    4c66:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
    4c6a:	e9 df       	rcall	.-46     	; 0x4c3e <menuCursorSetMenu>
    4c6c:	8a e0       	ldi	r24, 0x0A	; 10
    4c6e:	0c 94 61 3c 	jmp	0x78c2	; 0x78c2 <lcd_blank>
    4c72:	08 95       	ret

00004c74 <menu_ClearAllDisp>:
    4c74:	f4 df       	rcall	.-24     	; 0x4c5e <menuClearMenuDisp>
    4c76:	ec df       	rcall	.-40     	; 0x4c50 <menu_ClearDataDisp>
    4c78:	e6 cf       	rjmp	.-52     	; 0x4c46 <menuClearExtraDisp>
    4c7a:	08 95       	ret

00004c7c <menuCheckArrowDown>:
    4c7c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c80:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c84:	84 91       	lpm	r24, Z
    4c86:	8f 73       	andi	r24, 0x3F	; 63
    4c88:	81 30       	cpi	r24, 0x01	; 1
    4c8a:	11 f4       	brne	.+4      	; 0x4c90 <menuCheckArrowDown+0x14>
    4c8c:	0f c9       	rjmp	.-3554   	; 0x3eac <softkeyDown>
    4c8e:	08 95       	ret
    4c90:	3e 96       	adiw	r30, 0x0e	; 14
    4c92:	05 90       	lpm	r0, Z+
    4c94:	f4 91       	lpm	r31, Z
    4c96:	e0 2d       	mov	r30, r0
    4c98:	30 97       	sbiw	r30, 0x00	; 0
    4c9a:	59 f0       	breq	.+22     	; 0x4cb2 <menuCheckArrowDown+0x36>
    4c9c:	89 30       	cpi	r24, 0x09	; 9
    4c9e:	39 f4       	brne	.+14     	; 0x4cae <menuCheckArrowDown+0x32>
    4ca0:	80 81       	ld	r24, Z
    4ca2:	81 11       	cpse	r24, r1
    4ca4:	02 c0       	rjmp	.+4      	; 0x4caa <menuCheckArrowDown+0x2e>
    4ca6:	08 c9       	rjmp	.-3568   	; 0x3eb8 <softkeyOn>
    4ca8:	08 95       	ret
    4caa:	0c c9       	rjmp	.-3560   	; 0x3ec4 <softkeyOff>
    4cac:	08 95       	ret
    4cae:	fe c8       	rjmp	.-3588   	; 0x3eac <softkeyDown>
    4cb0:	08 95       	ret
    4cb2:	81 e0       	ldi	r24, 0x01	; 1
    4cb4:	0c 94 e8 3c 	jmp	0x79d0	; 0x79d0 <keylabel_clr>
    4cb8:	08 95       	ret

00004cba <menuCurrMenuToLCD>:
    4cba:	cf 93       	push	r28
    4cbc:	89 e4       	ldi	r24, 0x49	; 73
    4cbe:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    4cc2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4cc6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cca:	c4 91       	lpm	r28, Z
    4ccc:	c0 7c       	andi	r28, 0xC0	; 192
    4cce:	c0 38       	cpi	r28, 0x80	; 128
    4cd0:	39 f4       	brne	.+14     	; 0x4ce0 <menuCurrMenuToLCD+0x26>
    4cd2:	80 e2       	ldi	r24, 0x20	; 32
    4cd4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    4cd8:	82 e0       	ldi	r24, 0x02	; 2
    4cda:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4cde:	04 c0       	rjmp	.+8      	; 0x4ce8 <menuCurrMenuToLCD+0x2e>
    4ce0:	8f e7       	ldi	r24, 0x7F	; 127
    4ce2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    4ce6:	d6 d8       	rcall	.-3668   	; 0x3e94 <softkeyLeft>
    4ce8:	c0 3c       	cpi	r28, 0xC0	; 192
    4cea:	29 f4       	brne	.+10     	; 0x4cf6 <menuCurrMenuToLCD+0x3c>
    4cec:	83 e0       	ldi	r24, 0x03	; 3
    4cee:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4cf2:	c0 e2       	ldi	r28, 0x20	; 32
    4cf4:	02 c0       	rjmp	.+4      	; 0x4cfa <menuCurrMenuToLCD+0x40>
    4cf6:	d4 d8       	rcall	.-3672   	; 0x3ea0 <softkeyRight>
    4cf8:	ce e7       	ldi	r28, 0x7E	; 126
    4cfa:	ea d8       	rcall	.-3628   	; 0x3ed0 <softkeyUp>
    4cfc:	bf df       	rcall	.-130    	; 0x4c7c <menuCheckArrowDown>
    4cfe:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4d02:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d06:	6c 2f       	mov	r22, r28
    4d08:	02 96       	adiw	r24, 0x02	; 2
    4d0a:	05 de       	rcall	.-1014   	; 0x4916 <menuTextOut>
    4d0c:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
    4d10:	96 df       	rcall	.-212    	; 0x4c3e <menuCursorSetMenu>
    4d12:	cf 91       	pop	r28
    4d14:	08 95       	ret

00004d16 <menuItemChanged>:
    4d16:	8f ef       	ldi	r24, 0xFF	; 255
    4d18:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4d1c:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4d20:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d24:	fc 01       	movw	r30, r24
    4d26:	24 91       	lpm	r18, Z
    4d28:	62 2f       	mov	r22, r18
    4d2a:	6f 73       	andi	r22, 0x3F	; 63
    4d2c:	62 30       	cpi	r22, 0x02	; 2
    4d2e:	08 f4       	brcc	.+2      	; 0x4d32 <menuItemChanged+0x1c>
    4d30:	49 c0       	rjmp	.+146    	; 0x4dc4 <menuItemChanged+0xae>
    4d32:	9c 01       	movw	r18, r24
    4d34:	22 5f       	subi	r18, 0xF2	; 242
    4d36:	3f 4f       	sbci	r19, 0xFF	; 255
    4d38:	f9 01       	movw	r30, r18
    4d3a:	45 91       	lpm	r20, Z+
    4d3c:	55 91       	lpm	r21, Z+
    4d3e:	41 15       	cp	r20, r1
    4d40:	51 05       	cpc	r21, r1
    4d42:	09 f4       	brne	.+2      	; 0x4d46 <menuItemChanged+0x30>
    4d44:	3f c0       	rjmp	.+126    	; 0x4dc4 <menuItemChanged+0xae>
    4d46:	e6 2f       	mov	r30, r22
    4d48:	f0 e0       	ldi	r31, 0x00	; 0
    4d4a:	31 97       	sbiw	r30, 0x01	; 1
    4d4c:	9f 01       	movw	r18, r30
    4d4e:	22 0f       	add	r18, r18
    4d50:	33 1f       	adc	r19, r19
    4d52:	22 0f       	add	r18, r18
    4d54:	33 1f       	adc	r19, r19
    4d56:	22 0f       	add	r18, r18
    4d58:	33 1f       	adc	r19, r19
    4d5a:	e2 0f       	add	r30, r18
    4d5c:	f3 1f       	adc	r31, r19
    4d5e:	e7 51       	subi	r30, 0x17	; 23
    4d60:	fc 4f       	sbci	r31, 0xFC	; 252
    4d62:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    4d66:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    4d6a:	24 91       	lpm	r18, Z
    4d6c:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    4d70:	fc 01       	movw	r30, r24
    4d72:	25 91       	lpm	r18, Z+
    4d74:	2f 73       	andi	r18, 0x3F	; 63
    4d76:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    4d7a:	24 91       	lpm	r18, Z
    4d7c:	22 23       	and	r18, r18
    4d7e:	2c f4       	brge	.+10     	; 0x4d8a <menuItemChanged+0x74>
    4d80:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4d84:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4d88:	02 c0       	rjmp	.+4      	; 0x4d8e <menuItemChanged+0x78>
    4d8a:	20 e0       	ldi	r18, 0x00	; 0
    4d8c:	30 e0       	ldi	r19, 0x00	; 0
    4d8e:	24 0f       	add	r18, r20
    4d90:	35 1f       	adc	r19, r21
    4d92:	fc 01       	movw	r30, r24
    4d94:	84 91       	lpm	r24, Z
    4d96:	8f 73       	andi	r24, 0x3F	; 63
    4d98:	8b 30       	cpi	r24, 0x0B	; 11
    4d9a:	71 f4       	brne	.+28     	; 0x4db8 <menuItemChanged+0xa2>
    4d9c:	f9 01       	movw	r30, r18
    4d9e:	80 81       	ld	r24, Z
    4da0:	91 81       	ldd	r25, Z+1	; 0x01
    4da2:	a2 81       	ldd	r26, Z+2	; 0x02
    4da4:	b3 81       	ldd	r27, Z+3	; 0x03
    4da6:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    4daa:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    4dae:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    4db2:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    4db6:	04 c0       	rjmp	.+8      	; 0x4dc0 <menuItemChanged+0xaa>
    4db8:	f9 01       	movw	r30, r18
    4dba:	80 81       	ld	r24, Z
    4dbc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4dc0:	df dd       	rcall	.-1090   	; 0x4980 <menuDisplayValue>
    4dc2:	07 c0       	rjmp	.+14     	; 0x4dd2 <menuItemChanged+0xbc>
    4dc4:	45 df       	rcall	.-374    	; 0x4c50 <menu_ClearDataDisp>
    4dc6:	89 ee       	ldi	r24, 0xE9	; 233
    4dc8:	93 e0       	ldi	r25, 0x03	; 3
    4dca:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    4dce:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4dd2:	54 df       	rcall	.-344    	; 0x4c7c <menuCheckArrowDown>
    4dd4:	34 cf       	rjmp	.-408    	; 0x4c3e <menuCursorSetMenu>
    4dd6:	08 95       	ret

00004dd8 <menu_InitLCD>:
    4dd8:	36 df       	rcall	.-404    	; 0x4c46 <menuClearExtraDisp>
    4dda:	9d df       	rcall	.-198    	; 0x4d16 <menuItemChanged>
    4ddc:	b7 dd       	rcall	.-1170   	; 0x494c <menuParentMenuToLCD>
    4dde:	6d df       	rcall	.-294    	; 0x4cba <menuCurrMenuToLCD>
    4de0:	0c 94 84 3c 	jmp	0x7908	; 0x7908 <lcd_cursosblink>
    4de4:	08 95       	ret

00004de6 <menu_ProcessMessage>:
    4de6:	cf 93       	push	r28
    4de8:	c8 2f       	mov	r28, r24
    4dea:	0e 94 84 3c 	call	0x7908	; 0x7908 <lcd_cursosblink>
    4dee:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4df2:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4df6:	84 91       	lpm	r24, Z
    4df8:	8f 73       	andi	r24, 0x3F	; 63
    4dfa:	81 30       	cpi	r24, 0x01	; 1
    4dfc:	29 f0       	breq	.+10     	; 0x4e08 <menu_ProcessMessage+0x22>
    4dfe:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4e02:	8f 3f       	cpi	r24, 0xFF	; 255
    4e04:	09 f0       	breq	.+2      	; 0x4e08 <menu_ProcessMessage+0x22>
    4e06:	68 c1       	rjmp	.+720    	; 0x50d8 <menu_ProcessMessage+0x2f2>
    4e08:	31 96       	adiw	r30, 0x01	; 1
    4e0a:	84 91       	lpm	r24, Z
    4e0c:	86 ff       	sbrs	r24, 6
    4e0e:	02 c0       	rjmp	.+4      	; 0x4e14 <menu_ProcessMessage+0x2e>
    4e10:	1a df       	rcall	.-460    	; 0x4c46 <menuClearExtraDisp>
    4e12:	15 df       	rcall	.-470    	; 0x4c3e <menuCursorSetMenu>
    4e14:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4e18:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4e1c:	cb 01       	movw	r24, r22
    4e1e:	01 96       	adiw	r24, 0x01	; 1
    4e20:	fc 01       	movw	r30, r24
    4e22:	84 91       	lpm	r24, Z
    4e24:	98 2f       	mov	r25, r24
    4e26:	90 72       	andi	r25, 0x20	; 32
    4e28:	85 ff       	sbrs	r24, 5
    4e2a:	1f c0       	rjmp	.+62     	; 0x4e6a <menu_ProcessMessage+0x84>
    4e2c:	9b 01       	movw	r18, r22
    4e2e:	20 5f       	subi	r18, 0xF0	; 240
    4e30:	3f 4f       	sbci	r19, 0xFF	; 255
    4e32:	f9 01       	movw	r30, r18
    4e34:	25 91       	lpm	r18, Z+
    4e36:	35 91       	lpm	r19, Z+
    4e38:	21 15       	cp	r18, r1
    4e3a:	31 05       	cpc	r19, r1
    4e3c:	b1 f0       	breq	.+44     	; 0x4e6a <menu_ProcessMessage+0x84>
    4e3e:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4e42:	4f 3f       	cpi	r20, 0xFF	; 255
    4e44:	91 f0       	breq	.+36     	; 0x4e6a <menu_ProcessMessage+0x84>
    4e46:	8c 2f       	mov	r24, r28
    4e48:	f9 01       	movw	r30, r18
    4e4a:	19 95       	eicall
    4e4c:	8f 3f       	cpi	r24, 0xFF	; 255
    4e4e:	21 f4       	brne	.+8      	; 0x4e58 <menu_ProcessMessage+0x72>
    4e50:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4e54:	80 e0       	ldi	r24, 0x00	; 0
    4e56:	04 c2       	rjmp	.+1032   	; 0x5260 <menu_ProcessMessage+0x47a>
    4e58:	f6 de       	rcall	.-532    	; 0x4c46 <menuClearExtraDisp>
    4e5a:	fa de       	rcall	.-524    	; 0x4c50 <menu_ClearDataDisp>
    4e5c:	f0 de       	rcall	.-544    	; 0x4c3e <menuCursorSetMenu>
    4e5e:	8f ef       	ldi	r24, 0xFF	; 255
    4e60:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4e64:	2a df       	rcall	.-428    	; 0x4cba <menuCurrMenuToLCD>
    4e66:	80 e0       	ldi	r24, 0x00	; 0
    4e68:	fb c1       	rjmp	.+1014   	; 0x5260 <menu_ProcessMessage+0x47a>
    4e6a:	c3 30       	cpi	r28, 0x03	; 3
    4e6c:	09 f4       	brne	.+2      	; 0x4e70 <menu_ProcessMessage+0x8a>
    4e6e:	64 c0       	rjmp	.+200    	; 0x4f38 <menu_ProcessMessage+0x152>
    4e70:	28 f4       	brcc	.+10     	; 0x4e7c <menu_ProcessMessage+0x96>
    4e72:	c1 30       	cpi	r28, 0x01	; 1
    4e74:	51 f0       	breq	.+20     	; 0x4e8a <menu_ProcessMessage+0xa4>
    4e76:	c2 30       	cpi	r28, 0x02	; 2
    4e78:	31 f1       	breq	.+76     	; 0x4ec6 <menu_ProcessMessage+0xe0>
    4e7a:	db c1       	rjmp	.+950    	; 0x5232 <menu_ProcessMessage+0x44c>
    4e7c:	c5 30       	cpi	r28, 0x05	; 5
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <menu_ProcessMessage+0x9c>
    4e80:	5b c0       	rjmp	.+182    	; 0x4f38 <menu_ProcessMessage+0x152>
    4e82:	90 f0       	brcs	.+36     	; 0x4ea8 <menu_ProcessMessage+0xc2>
    4e84:	c6 30       	cpi	r28, 0x06	; 6
    4e86:	f9 f0       	breq	.+62     	; 0x4ec6 <menu_ProcessMessage+0xe0>
    4e88:	d4 c1       	rjmp	.+936    	; 0x5232 <menu_ProcessMessage+0x44c>
    4e8a:	fb 01       	movw	r30, r22
    4e8c:	84 91       	lpm	r24, Z
    4e8e:	80 7c       	andi	r24, 0xC0	; 192
    4e90:	80 3c       	cpi	r24, 0xC0	; 192
    4e92:	09 f4       	brne	.+2      	; 0x4e96 <menu_ProcessMessage+0xb0>
    4e94:	d0 c1       	rjmp	.+928    	; 0x5236 <menu_ProcessMessage+0x450>
    4e96:	74 96       	adiw	r30, 0x14	; 20
    4e98:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4e9c:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4ea0:	3a df       	rcall	.-396    	; 0x4d16 <menuItemChanged>
    4ea2:	0b df       	rcall	.-490    	; 0x4cba <menuCurrMenuToLCD>
    4ea4:	80 e0       	ldi	r24, 0x00	; 0
    4ea6:	dc c1       	rjmp	.+952    	; 0x5260 <menu_ProcessMessage+0x47a>
    4ea8:	fb 01       	movw	r30, r22
    4eaa:	84 91       	lpm	r24, Z
    4eac:	80 7c       	andi	r24, 0xC0	; 192
    4eae:	80 38       	cpi	r24, 0x80	; 128
    4eb0:	09 f4       	brne	.+2      	; 0x4eb4 <menu_ProcessMessage+0xce>
    4eb2:	c3 c1       	rjmp	.+902    	; 0x523a <menu_ProcessMessage+0x454>
    4eb4:	74 97       	sbiw	r30, 0x14	; 20
    4eb6:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4eba:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4ebe:	2b df       	rcall	.-426    	; 0x4d16 <menuItemChanged>
    4ec0:	fc de       	rcall	.-520    	; 0x4cba <menuCurrMenuToLCD>
    4ec2:	80 e0       	ldi	r24, 0x00	; 0
    4ec4:	cd c1       	rjmp	.+922    	; 0x5260 <menu_ProcessMessage+0x47a>
    4ec6:	84 ff       	sbrs	r24, 4
    4ec8:	04 c0       	rjmp	.+8      	; 0x4ed2 <menu_ProcessMessage+0xec>
    4eca:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4ece:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4ed2:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4ed6:	ee 23       	and	r30, r30
    4ed8:	e9 f0       	breq	.+58     	; 0x4f14 <menu_ProcessMessage+0x12e>
    4eda:	e1 50       	subi	r30, 0x01	; 1
    4edc:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4ee0:	f0 e0       	ldi	r31, 0x00	; 0
    4ee2:	ee 0f       	add	r30, r30
    4ee4:	ff 1f       	adc	r31, r31
    4ee6:	e5 58       	subi	r30, 0x85	; 133
    4ee8:	fa 4f       	sbci	r31, 0xFA	; 250
    4eea:	01 90       	ld	r0, Z+
    4eec:	f0 81       	ld	r31, Z
    4eee:	e0 2d       	mov	r30, r0
    4ef0:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4ef4:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4ef8:	72 96       	adiw	r30, 0x12	; 18
    4efa:	05 90       	lpm	r0, Z+
    4efc:	f4 91       	lpm	r31, Z
    4efe:	e0 2d       	mov	r30, r0
    4f00:	30 97       	sbiw	r30, 0x00	; 0
    4f02:	11 f0       	breq	.+4      	; 0x4f08 <menu_ProcessMessage+0x122>
    4f04:	80 e0       	ldi	r24, 0x00	; 0
    4f06:	19 95       	eicall
    4f08:	9e de       	rcall	.-708    	; 0x4c46 <menuClearExtraDisp>
    4f0a:	20 dd       	rcall	.-1472   	; 0x494c <menuParentMenuToLCD>
    4f0c:	d6 de       	rcall	.-596    	; 0x4cba <menuCurrMenuToLCD>
    4f0e:	03 df       	rcall	.-506    	; 0x4d16 <menuItemChanged>
    4f10:	80 e0       	ldi	r24, 0x00	; 0
    4f12:	a6 c1       	rjmp	.+844    	; 0x5260 <menu_ProcessMessage+0x47a>
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4f1a:	81 e0       	ldi	r24, 0x01	; 1
    4f1c:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4f20:	82 e0       	ldi	r24, 0x02	; 2
    4f22:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4f26:	83 e0       	ldi	r24, 0x03	; 3
    4f28:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    4f2c:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
    4f30:	0e 94 8b 3c 	call	0x7916	; 0x7916 <lcd_cursoroff>
    4f34:	8f ef       	ldi	r24, 0xFF	; 255
    4f36:	94 c1       	rjmp	.+808    	; 0x5260 <menu_ProcessMessage+0x47a>
    4f38:	fb 01       	movw	r30, r22
    4f3a:	24 91       	lpm	r18, Z
    4f3c:	2f 73       	andi	r18, 0x3F	; 63
    4f3e:	30 e0       	ldi	r19, 0x00	; 0
    4f40:	22 30       	cpi	r18, 0x02	; 2
    4f42:	31 05       	cpc	r19, r1
    4f44:	0c f4       	brge	.+2      	; 0x4f48 <menu_ProcessMessage+0x162>
    4f46:	48 c0       	rjmp	.+144    	; 0x4fd8 <menu_ProcessMessage+0x1f2>
    4f48:	70 96       	adiw	r30, 0x10	; 16
    4f4a:	05 90       	lpm	r0, Z+
    4f4c:	f4 91       	lpm	r31, Z
    4f4e:	e0 2d       	mov	r30, r0
    4f50:	30 97       	sbiw	r30, 0x00	; 0
    4f52:	19 f0       	breq	.+6      	; 0x4f5a <menu_ProcessMessage+0x174>
    4f54:	8c 2f       	mov	r24, r28
    4f56:	19 95       	eicall
    4f58:	de de       	rcall	.-580    	; 0x4d16 <menuItemChanged>
    4f5a:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4f5e:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f62:	c9 01       	movw	r24, r18
    4f64:	01 96       	adiw	r24, 0x01	; 1
    4f66:	fc 01       	movw	r30, r24
    4f68:	84 91       	lpm	r24, Z
    4f6a:	83 fd       	sbrc	r24, 3
    4f6c:	68 c1       	rjmp	.+720    	; 0x523e <menu_ProcessMessage+0x458>
    4f6e:	c9 01       	movw	r24, r18
    4f70:	0e 96       	adiw	r24, 0x0e	; 14
    4f72:	fc 01       	movw	r30, r24
    4f74:	85 91       	lpm	r24, Z+
    4f76:	95 91       	lpm	r25, Z+
    4f78:	89 2b       	or	r24, r25
    4f7a:	09 f4       	brne	.+2      	; 0x4f7e <menu_ProcessMessage+0x198>
    4f7c:	62 c1       	rjmp	.+708    	; 0x5242 <menu_ProcessMessage+0x45c>
    4f7e:	f9 01       	movw	r30, r18
    4f80:	84 91       	lpm	r24, Z
    4f82:	8f 73       	andi	r24, 0x3F	; 63
    4f84:	89 30       	cpi	r24, 0x09	; 9
    4f86:	19 f5       	brne	.+70     	; 0x4fce <menu_ProcessMessage+0x1e8>
    4f88:	61 e0       	ldi	r22, 0x01	; 1
    4f8a:	80 e0       	ldi	r24, 0x00	; 0
    4f8c:	30 da       	rcall	.-2976   	; 0x43ee <nibbleChange>
    4f8e:	de db       	rcall	.-2116   	; 0x474c <nibbleToData>
    4f90:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4f94:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f98:	3e 96       	adiw	r30, 0x0e	; 14
    4f9a:	05 90       	lpm	r0, Z+
    4f9c:	f4 91       	lpm	r31, Z
    4f9e:	e0 2d       	mov	r30, r0
    4fa0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4fa4:	80 83       	st	Z, r24
    4fa6:	ec dc       	rcall	.-1576   	; 0x4980 <menuDisplayValue>
    4fa8:	69 de       	rcall	.-814    	; 0x4c7c <menuCheckArrowDown>
    4faa:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
    4fae:	47 de       	rcall	.-882    	; 0x4c3e <menuCursorSetMenu>
    4fb0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4fb4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4fb8:	72 96       	adiw	r30, 0x12	; 18
    4fba:	05 90       	lpm	r0, Z+
    4fbc:	f4 91       	lpm	r31, Z
    4fbe:	e0 2d       	mov	r30, r0
    4fc0:	30 97       	sbiw	r30, 0x00	; 0
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <menu_ProcessMessage+0x1e0>
    4fc4:	40 c1       	rjmp	.+640    	; 0x5246 <menu_ProcessMessage+0x460>
    4fc6:	80 e0       	ldi	r24, 0x00	; 0
    4fc8:	19 95       	eicall
    4fca:	80 e0       	ldi	r24, 0x00	; 0
    4fcc:	49 c1       	rjmp	.+658    	; 0x5260 <menu_ProcessMessage+0x47a>
    4fce:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4fd2:	e3 dc       	rcall	.-1594   	; 0x499a <menuCursorSetDataNibble>
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	44 c1       	rjmp	.+648    	; 0x5260 <menu_ProcessMessage+0x47a>
    4fd8:	2f ef       	ldi	r18, 0xFF	; 255
    4fda:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4fde:	84 ff       	sbrs	r24, 4
    4fe0:	26 c0       	rjmp	.+76     	; 0x502e <menu_ProcessMessage+0x248>
    4fe2:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4fe6:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4fea:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4fee:	ee 23       	and	r30, r30
    4ff0:	09 f4       	brne	.+2      	; 0x4ff4 <menu_ProcessMessage+0x20e>
    4ff2:	2b c1       	rjmp	.+598    	; 0x524a <menu_ProcessMessage+0x464>
    4ff4:	e1 50       	subi	r30, 0x01	; 1
    4ff6:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4ffa:	f0 e0       	ldi	r31, 0x00	; 0
    4ffc:	ee 0f       	add	r30, r30
    4ffe:	ff 1f       	adc	r31, r31
    5000:	e5 58       	subi	r30, 0x85	; 133
    5002:	fa 4f       	sbci	r31, 0xFA	; 250
    5004:	01 90       	ld	r0, Z+
    5006:	f0 81       	ld	r31, Z
    5008:	e0 2d       	mov	r30, r0
    500a:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    500e:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    5012:	72 96       	adiw	r30, 0x12	; 18
    5014:	05 90       	lpm	r0, Z+
    5016:	f4 91       	lpm	r31, Z
    5018:	e0 2d       	mov	r30, r0
    501a:	30 97       	sbiw	r30, 0x00	; 0
    501c:	11 f0       	breq	.+4      	; 0x5022 <menu_ProcessMessage+0x23c>
    501e:	80 e0       	ldi	r24, 0x00	; 0
    5020:	19 95       	eicall
    5022:	11 de       	rcall	.-990    	; 0x4c46 <menuClearExtraDisp>
    5024:	93 dc       	rcall	.-1754   	; 0x494c <menuParentMenuToLCD>
    5026:	49 de       	rcall	.-878    	; 0x4cba <menuCurrMenuToLCD>
    5028:	76 de       	rcall	.-788    	; 0x4d16 <menuItemChanged>
    502a:	80 e0       	ldi	r24, 0x00	; 0
    502c:	19 c1       	rjmp	.+562    	; 0x5260 <menu_ProcessMessage+0x47a>
    502e:	fb 01       	movw	r30, r22
    5030:	70 96       	adiw	r30, 0x10	; 16
    5032:	05 90       	lpm	r0, Z+
    5034:	f4 91       	lpm	r31, Z
    5036:	e0 2d       	mov	r30, r0
    5038:	30 97       	sbiw	r30, 0x00	; 0
    503a:	99 f0       	breq	.+38     	; 0x5062 <menu_ProcessMessage+0x27c>
    503c:	99 23       	and	r25, r25
    503e:	71 f0       	breq	.+28     	; 0x505c <menu_ProcessMessage+0x276>
    5040:	8f ef       	ldi	r24, 0xFF	; 255
    5042:	19 95       	eicall
    5044:	8f 3f       	cpi	r24, 0xFF	; 255
    5046:	19 f4       	brne	.+6      	; 0x504e <menu_ProcessMessage+0x268>
    5048:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    504c:	0a c0       	rjmp	.+20     	; 0x5062 <menu_ProcessMessage+0x27c>
    504e:	fb dd       	rcall	.-1034   	; 0x4c46 <menuClearExtraDisp>
    5050:	ff dd       	rcall	.-1026   	; 0x4c50 <menu_ClearDataDisp>
    5052:	f5 dd       	rcall	.-1046   	; 0x4c3e <menuCursorSetMenu>
    5054:	8f ef       	ldi	r24, 0xFF	; 255
    5056:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    505a:	03 c0       	rjmp	.+6      	; 0x5062 <menu_ProcessMessage+0x27c>
    505c:	85 e0       	ldi	r24, 0x05	; 5
    505e:	19 95       	eicall
    5060:	ee dd       	rcall	.-1060   	; 0x4c3e <menuCursorSetMenu>
    5062:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    5066:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    506a:	c9 01       	movw	r24, r18
    506c:	0c 96       	adiw	r24, 0x0c	; 12
    506e:	fc 01       	movw	r30, r24
    5070:	85 91       	lpm	r24, Z+
    5072:	95 91       	lpm	r25, Z+
    5074:	89 2b       	or	r24, r25
    5076:	09 f4       	brne	.+2      	; 0x507a <menu_ProcessMessage+0x294>
    5078:	ea c0       	rjmp	.+468    	; 0x524e <menu_ProcessMessage+0x468>
    507a:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    507e:	a0 31       	cpi	r26, 0x10	; 16
    5080:	08 f0       	brcs	.+2      	; 0x5084 <menu_ProcessMessage+0x29e>
    5082:	e7 c0       	rjmp	.+462    	; 0x5252 <menu_ProcessMessage+0x46c>
    5084:	81 e0       	ldi	r24, 0x01	; 1
    5086:	8a 0f       	add	r24, r26
    5088:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    508c:	b0 e0       	ldi	r27, 0x00	; 0
    508e:	aa 0f       	add	r26, r26
    5090:	bb 1f       	adc	r27, r27
    5092:	a5 58       	subi	r26, 0x85	; 133
    5094:	ba 4f       	sbci	r27, 0xFA	; 250
    5096:	2d 93       	st	X+, r18
    5098:	3c 93       	st	X, r19
    509a:	c9 01       	movw	r24, r18
    509c:	01 96       	adiw	r24, 0x01	; 1
    509e:	fc 01       	movw	r30, r24
    50a0:	84 91       	lpm	r24, Z
    50a2:	83 ff       	sbrs	r24, 3
    50a4:	0b c0       	rjmp	.+22     	; 0x50bc <menu_ProcessMessage+0x2d6>
    50a6:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    50aa:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    50ae:	00 97       	sbiw	r24, 0x00	; 0
    50b0:	29 f0       	breq	.+10     	; 0x50bc <menu_ProcessMessage+0x2d6>
    50b2:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    50b6:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    50ba:	08 c0       	rjmp	.+16     	; 0x50cc <menu_ProcessMessage+0x2e6>
    50bc:	f9 01       	movw	r30, r18
    50be:	3c 96       	adiw	r30, 0x0c	; 12
    50c0:	85 91       	lpm	r24, Z+
    50c2:	95 91       	lpm	r25, Z+
    50c4:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    50c8:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    50cc:	bc dd       	rcall	.-1160   	; 0x4c46 <menuClearExtraDisp>
    50ce:	3e dc       	rcall	.-1924   	; 0x494c <menuParentMenuToLCD>
    50d0:	f4 dd       	rcall	.-1048   	; 0x4cba <menuCurrMenuToLCD>
    50d2:	21 de       	rcall	.-958    	; 0x4d16 <menuItemChanged>
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	c4 c0       	rjmp	.+392    	; 0x5260 <menu_ProcessMessage+0x47a>
    50d8:	c3 30       	cpi	r28, 0x03	; 3
    50da:	09 f4       	brne	.+2      	; 0x50de <menu_ProcessMessage+0x2f8>
    50dc:	49 c0       	rjmp	.+146    	; 0x5170 <menu_ProcessMessage+0x38a>
    50de:	28 f4       	brcc	.+10     	; 0x50ea <menu_ProcessMessage+0x304>
    50e0:	c1 30       	cpi	r28, 0x01	; 1
    50e2:	59 f0       	breq	.+22     	; 0x50fa <menu_ProcessMessage+0x314>
    50e4:	c2 30       	cpi	r28, 0x02	; 2
    50e6:	31 f1       	breq	.+76     	; 0x5134 <menu_ProcessMessage+0x34e>
    50e8:	b6 c0       	rjmp	.+364    	; 0x5256 <menu_ProcessMessage+0x470>
    50ea:	c5 30       	cpi	r28, 0x05	; 5
    50ec:	09 f4       	brne	.+2      	; 0x50f0 <menu_ProcessMessage+0x30a>
    50ee:	5e c0       	rjmp	.+188    	; 0x51ac <menu_ProcessMessage+0x3c6>
    50f0:	c0 f0       	brcs	.+48     	; 0x5122 <menu_ProcessMessage+0x33c>
    50f2:	c6 30       	cpi	r28, 0x06	; 6
    50f4:	09 f4       	brne	.+2      	; 0x50f8 <menu_ProcessMessage+0x312>
    50f6:	8a c0       	rjmp	.+276    	; 0x520c <menu_ProcessMessage+0x426>
    50f8:	ae c0       	rjmp	.+348    	; 0x5256 <menu_ProcessMessage+0x470>
    50fa:	48 2f       	mov	r20, r24
    50fc:	50 e0       	ldi	r21, 0x00	; 0
    50fe:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    5102:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    5106:	24 91       	lpm	r18, Z
    5108:	30 e0       	ldi	r19, 0x00	; 0
    510a:	21 50       	subi	r18, 0x01	; 1
    510c:	31 09       	sbc	r19, r1
    510e:	42 17       	cp	r20, r18
    5110:	53 07       	cpc	r21, r19
    5112:	0c f0       	brlt	.+2      	; 0x5116 <menu_ProcessMessage+0x330>
    5114:	a2 c0       	rjmp	.+324    	; 0x525a <menu_ProcessMessage+0x474>
    5116:	8f 5f       	subi	r24, 0xFF	; 255
    5118:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    511c:	3e dc       	rcall	.-1924   	; 0x499a <menuCursorSetDataNibble>
    511e:	80 e0       	ldi	r24, 0x00	; 0
    5120:	9f c0       	rjmp	.+318    	; 0x5260 <menu_ProcessMessage+0x47a>
    5122:	88 23       	and	r24, r24
    5124:	09 f4       	brne	.+2      	; 0x5128 <menu_ProcessMessage+0x342>
    5126:	9b c0       	rjmp	.+310    	; 0x525e <menu_ProcessMessage+0x478>
    5128:	81 50       	subi	r24, 0x01	; 1
    512a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    512e:	35 dc       	rcall	.-1942   	; 0x499a <menuCursorSetDataNibble>
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	96 c0       	rjmp	.+300    	; 0x5260 <menu_ProcessMessage+0x47a>
    5134:	61 e0       	ldi	r22, 0x01	; 1
    5136:	5b d9       	rcall	.-3402   	; 0x43ee <nibbleChange>
    5138:	09 db       	rcall	.-2542   	; 0x474c <nibbleToData>
    513a:	22 dc       	rcall	.-1980   	; 0x4980 <menuDisplayValue>
    513c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    5140:	8a 30       	cpi	r24, 0x0A	; 10
    5142:	11 f0       	breq	.+4      	; 0x5148 <menu_ProcessMessage+0x362>
    5144:	8e 30       	cpi	r24, 0x0E	; 14
    5146:	89 f4       	brne	.+34     	; 0x516a <menu_ProcessMessage+0x384>
    5148:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    514c:	42 2f       	mov	r20, r18
    514e:	50 e0       	ldi	r21, 0x00	; 0
    5150:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    5154:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    5158:	84 91       	lpm	r24, Z
    515a:	90 e0       	ldi	r25, 0x00	; 0
    515c:	01 97       	sbiw	r24, 0x01	; 1
    515e:	48 17       	cp	r20, r24
    5160:	59 07       	cpc	r21, r25
    5162:	1c f4       	brge	.+6      	; 0x516a <menu_ProcessMessage+0x384>
    5164:	2f 5f       	subi	r18, 0xFF	; 255
    5166:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    516a:	17 dc       	rcall	.-2002   	; 0x499a <menuCursorSetDataNibble>
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	78 c0       	rjmp	.+240    	; 0x5260 <menu_ProcessMessage+0x47a>
    5170:	6f ef       	ldi	r22, 0xFF	; 255
    5172:	3d d9       	rcall	.-3462   	; 0x43ee <nibbleChange>
    5174:	eb da       	rcall	.-2602   	; 0x474c <nibbleToData>
    5176:	04 dc       	rcall	.-2040   	; 0x4980 <menuDisplayValue>
    5178:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    517c:	8a 30       	cpi	r24, 0x0A	; 10
    517e:	11 f0       	breq	.+4      	; 0x5184 <menu_ProcessMessage+0x39e>
    5180:	8e 30       	cpi	r24, 0x0E	; 14
    5182:	89 f4       	brne	.+34     	; 0x51a6 <menu_ProcessMessage+0x3c0>
    5184:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    5188:	42 2f       	mov	r20, r18
    518a:	50 e0       	ldi	r21, 0x00	; 0
    518c:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    5190:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    5194:	84 91       	lpm	r24, Z
    5196:	90 e0       	ldi	r25, 0x00	; 0
    5198:	01 97       	sbiw	r24, 0x01	; 1
    519a:	48 17       	cp	r20, r24
    519c:	59 07       	cpc	r21, r25
    519e:	1c f4       	brge	.+6      	; 0x51a6 <menu_ProcessMessage+0x3c0>
    51a0:	2f 5f       	subi	r18, 0xFF	; 255
    51a2:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    51a6:	f9 db       	rcall	.-2062   	; 0x499a <menuCursorSetDataNibble>
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	5a c0       	rjmp	.+180    	; 0x5260 <menu_ProcessMessage+0x47a>
    51ac:	cf da       	rcall	.-2658   	; 0x474c <nibbleToData>
    51ae:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    51b2:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    51b6:	c9 01       	movw	r24, r18
    51b8:	0e 96       	adiw	r24, 0x0e	; 14
    51ba:	fc 01       	movw	r30, r24
    51bc:	a5 91       	lpm	r26, Z+
    51be:	b5 91       	lpm	r27, Z+
    51c0:	10 97       	sbiw	r26, 0x00	; 0
    51c2:	21 f1       	breq	.+72     	; 0x520c <menu_ProcessMessage+0x426>
    51c4:	0d 97       	sbiw	r24, 0x0d	; 13
    51c6:	fc 01       	movw	r30, r24
    51c8:	84 91       	lpm	r24, Z
    51ca:	88 23       	and	r24, r24
    51cc:	2c f4       	brge	.+10     	; 0x51d8 <menu_ProcessMessage+0x3f2>
    51ce:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    51d2:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    51d6:	02 c0       	rjmp	.+4      	; 0x51dc <menu_ProcessMessage+0x3f6>
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	90 e0       	ldi	r25, 0x00	; 0
    51dc:	a8 0f       	add	r26, r24
    51de:	b9 1f       	adc	r27, r25
    51e0:	f9 01       	movw	r30, r18
    51e2:	84 91       	lpm	r24, Z
    51e4:	8f 73       	andi	r24, 0x3F	; 63
    51e6:	8b 30       	cpi	r24, 0x0B	; 11
    51e8:	71 f4       	brne	.+28     	; 0x5206 <menu_ProcessMessage+0x420>
    51ea:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    51ee:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    51f2:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    51f6:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    51fa:	4d 93       	st	X+, r20
    51fc:	5d 93       	st	X+, r21
    51fe:	6d 93       	st	X+, r22
    5200:	7c 93       	st	X, r23
    5202:	13 97       	sbiw	r26, 0x03	; 3
    5204:	03 c0       	rjmp	.+6      	; 0x520c <menu_ProcessMessage+0x426>
    5206:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    520a:	8c 93       	st	X, r24
    520c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5210:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5214:	72 96       	adiw	r30, 0x12	; 18
    5216:	05 90       	lpm	r0, Z+
    5218:	f4 91       	lpm	r31, Z
    521a:	e0 2d       	mov	r30, r0
    521c:	30 97       	sbiw	r30, 0x00	; 0
    521e:	11 f0       	breq	.+4      	; 0x5224 <menu_ProcessMessage+0x43e>
    5220:	8c 2f       	mov	r24, r28
    5222:	19 95       	eicall
    5224:	8f ef       	ldi	r24, 0xFF	; 255
    5226:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    522a:	47 dd       	rcall	.-1394   	; 0x4cba <menuCurrMenuToLCD>
    522c:	74 dd       	rcall	.-1304   	; 0x4d16 <menuItemChanged>
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	17 c0       	rjmp	.+46     	; 0x5260 <menu_ProcessMessage+0x47a>
    5232:	80 e0       	ldi	r24, 0x00	; 0
    5234:	15 c0       	rjmp	.+42     	; 0x5260 <menu_ProcessMessage+0x47a>
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	13 c0       	rjmp	.+38     	; 0x5260 <menu_ProcessMessage+0x47a>
    523a:	80 e0       	ldi	r24, 0x00	; 0
    523c:	11 c0       	rjmp	.+34     	; 0x5260 <menu_ProcessMessage+0x47a>
    523e:	80 e0       	ldi	r24, 0x00	; 0
    5240:	0f c0       	rjmp	.+30     	; 0x5260 <menu_ProcessMessage+0x47a>
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	0d c0       	rjmp	.+26     	; 0x5260 <menu_ProcessMessage+0x47a>
    5246:	80 e0       	ldi	r24, 0x00	; 0
    5248:	0b c0       	rjmp	.+22     	; 0x5260 <menu_ProcessMessage+0x47a>
    524a:	80 e0       	ldi	r24, 0x00	; 0
    524c:	09 c0       	rjmp	.+18     	; 0x5260 <menu_ProcessMessage+0x47a>
    524e:	80 e0       	ldi	r24, 0x00	; 0
    5250:	07 c0       	rjmp	.+14     	; 0x5260 <menu_ProcessMessage+0x47a>
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	05 c0       	rjmp	.+10     	; 0x5260 <menu_ProcessMessage+0x47a>
    5256:	80 e0       	ldi	r24, 0x00	; 0
    5258:	03 c0       	rjmp	.+6      	; 0x5260 <menu_ProcessMessage+0x47a>
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	01 c0       	rjmp	.+2      	; 0x5260 <menu_ProcessMessage+0x47a>
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	cf 91       	pop	r28
    5262:	08 95       	ret

00005264 <displayMenuMessage_P>:
    5264:	0f 93       	push	r16
    5266:	1f 93       	push	r17
    5268:	cf 93       	push	r28
    526a:	df 93       	push	r29
    526c:	ec 01       	movw	r28, r24
    526e:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5272:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5276:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    527a:	84 91       	lpm	r24, Z
    527c:	8f 73       	andi	r24, 0x3F	; 63
    527e:	81 30       	cpi	r24, 0x01	; 1
    5280:	91 f4       	brne	.+36     	; 0x52a6 <displayMenuMessage_P+0x42>
    5282:	ce 01       	movw	r24, r28
    5284:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <get_StrLenP>
    5288:	24 e1       	ldi	r18, 0x14	; 20
    528a:	30 e0       	ldi	r19, 0x00	; 0
    528c:	a9 01       	movw	r20, r18
    528e:	48 1b       	sub	r20, r24
    5290:	51 09       	sbc	r21, r1
    5292:	ca 01       	movw	r24, r20
    5294:	95 95       	asr	r25
    5296:	87 95       	ror	r24
    5298:	8c 5e       	subi	r24, 0xEC	; 236
    529a:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    529e:	83 e0       	ldi	r24, 0x03	; 3
    52a0:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    52a4:	05 c0       	rjmp	.+10     	; 0x52b0 <displayMenuMessage_P+0x4c>
    52a6:	84 e1       	ldi	r24, 0x14	; 20
    52a8:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    52ac:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    52b0:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    52b4:	ce 01       	movw	r24, r28
    52b6:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    52ba:	80 2f       	mov	r24, r16
    52bc:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    52c0:	9f b7       	in	r25, 0x3f	; 63
    52c2:	f8 94       	cli
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	06 c0       	rjmp	.+12     	; 0x52d4 <displayMenuMessage_P+0x70>
    52c8:	ef e2       	ldi	r30, 0x2F	; 47
    52ca:	f2 e0       	ldi	r31, 0x02	; 2
    52cc:	84 e6       	ldi	r24, 0x64	; 100
    52ce:	86 87       	std	Z+14, r24	; 0x0e
    52d0:	17 86       	std	Z+15, r1	; 0x0f
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	81 11       	cpse	r24, r1
    52d6:	f8 cf       	rjmp	.-16     	; 0x52c8 <displayMenuMessage_P+0x64>
    52d8:	9f bf       	out	0x3f, r25	; 63
    52da:	81 2f       	mov	r24, r17
    52dc:	df 91       	pop	r29
    52de:	cf 91       	pop	r28
    52e0:	1f 91       	pop	r17
    52e2:	0f 91       	pop	r16
    52e4:	08 95       	ret

000052e6 <menu_OnEnterMidiPanic>:
    52e6:	88 eb       	ldi	r24, 0xB8	; 184
    52e8:	93 e0       	ldi	r25, 0x03	; 3
    52ea:	bc df       	rcall	.-136    	; 0x5264 <displayMenuMessage_P>
    52ec:	0e 94 3a 36 	call	0x6c74	; 0x6c74 <midiSendAllNotesOff>
    52f0:	a6 dc       	rcall	.-1716   	; 0x4c3e <menuCursorSetMenu>
    52f2:	80 e0       	ldi	r24, 0x00	; 0
    52f4:	08 95       	ret

000052f6 <menu_ModuleTestExecute>:
    52f6:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    52fa:	8f 3f       	cpi	r24, 0xFF	; 255
    52fc:	11 f0       	breq	.+4      	; 0x5302 <menu_ModuleTestExecute+0xc>
    52fe:	8d 3f       	cpi	r24, 0xFD	; 253
    5300:	71 f5       	brne	.+92     	; 0x535e <menu_ModuleTestExecute+0x68>
    5302:	0e 94 8b 3c 	call	0x7916	; 0x7916 <lcd_cursoroff>
    5306:	a4 dc       	rcall	.-1720   	; 0x4c50 <menu_ClearDataDisp>
    5308:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	e9 e4       	ldi	r30, 0x49	; 73
    5310:	f2 e0       	ldi	r31, 0x02	; 2
    5312:	07 c0       	rjmp	.+14     	; 0x5322 <menu_ModuleTestExecute+0x2c>
    5314:	21 81       	ldd	r18, Z+1	; 0x01
    5316:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    531a:	82 2b       	or	r24, r18
    531c:	81 83       	std	Z+1, r24	; 0x01
    531e:	38 96       	adiw	r30, 0x08	; 8
    5320:	9f 5f       	subi	r25, 0xFF	; 255
    5322:	90 32       	cpi	r25, 0x20	; 32
    5324:	b8 f3       	brcs	.-18     	; 0x5314 <menu_ModuleTestExecute+0x1e>
    5326:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    532a:	8f 3f       	cpi	r24, 0xFF	; 255
    532c:	19 f4       	brne	.+6      	; 0x5334 <menu_ModuleTestExecute+0x3e>
    532e:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    5332:	5b c0       	rjmp	.+182    	; 0x53ea <menu_ModuleTestExecute+0xf4>
    5334:	82 eb       	ldi	r24, 0xB2	; 178
    5336:	93 e0       	ldi	r25, 0x03	; 3
    5338:	95 df       	rcall	.-214    	; 0x5264 <displayMenuMessage_P>
    533a:	8e ef       	ldi	r24, 0xFE	; 254
    533c:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5340:	9f b7       	in	r25, 0x3f	; 63
    5342:	f8 94       	cli
    5344:	81 e0       	ldi	r24, 0x01	; 1
    5346:	06 c0       	rjmp	.+12     	; 0x5354 <menu_ModuleTestExecute+0x5e>
    5348:	ef e2       	ldi	r30, 0x2F	; 47
    534a:	f2 e0       	ldi	r31, 0x02	; 2
    534c:	82 e0       	ldi	r24, 0x02	; 2
    534e:	84 87       	std	Z+12, r24	; 0x0c
    5350:	85 87       	std	Z+13, r24	; 0x0d
    5352:	80 e0       	ldi	r24, 0x00	; 0
    5354:	81 11       	cpse	r24, r1
    5356:	f8 cf       	rjmp	.-16     	; 0x5348 <menu_ModuleTestExecute+0x52>
    5358:	9f bf       	out	0x3f, r25	; 63
    535a:	71 dc       	rcall	.-1822   	; 0x4c3e <menuCursorSetMenu>
    535c:	46 c0       	rjmp	.+140    	; 0x53ea <menu_ModuleTestExecute+0xf4>
    535e:	8e 3f       	cpi	r24, 0xFE	; 254
    5360:	41 f4       	brne	.+16     	; 0x5372 <menu_ModuleTestExecute+0x7c>
    5362:	8f ef       	ldi	r24, 0xFF	; 255
    5364:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    5368:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    536c:	0e 94 84 3c 	call	0x7908	; 0x7908 <lcd_cursosblink>
    5370:	3c c0       	rjmp	.+120    	; 0x53ea <menu_ModuleTestExecute+0xf4>
    5372:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    5376:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    537a:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    537e:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    5382:	76 95       	lsr	r23
    5384:	67 95       	ror	r22
    5386:	57 95       	ror	r21
    5388:	47 95       	ror	r20
    538a:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    538e:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    5392:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    5396:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    539a:	e8 2f       	mov	r30, r24
    539c:	f0 e0       	ldi	r31, 0x00	; 0
    539e:	df 01       	movw	r26, r30
    53a0:	aa 0f       	add	r26, r26
    53a2:	bb 1f       	adc	r27, r27
    53a4:	aa 0f       	add	r26, r26
    53a6:	bb 1f       	adc	r27, r27
    53a8:	aa 0f       	add	r26, r26
    53aa:	bb 1f       	adc	r27, r27
    53ac:	a7 5b       	subi	r26, 0xB7	; 183
    53ae:	bd 4f       	sbci	r27, 0xFD	; 253
    53b0:	16 96       	adiw	r26, 0x06	; 6
    53b2:	2c 91       	ld	r18, X
    53b4:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    53b8:	29 23       	and	r18, r25
    53ba:	49 f4       	brne	.+18     	; 0x53ce <menu_ModuleTestExecute+0xd8>
    53bc:	70 68       	ori	r23, 0x80	; 128
    53be:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    53c2:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    53c6:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    53ca:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    53ce:	ee 0f       	add	r30, r30
    53d0:	ff 1f       	adc	r31, r31
    53d2:	ee 0f       	add	r30, r30
    53d4:	ff 1f       	adc	r31, r31
    53d6:	ee 0f       	add	r30, r30
    53d8:	ff 1f       	adc	r31, r31
    53da:	e7 5b       	subi	r30, 0xB7	; 183
    53dc:	fd 4f       	sbci	r31, 0xFD	; 253
    53de:	21 81       	ldd	r18, Z+1	; 0x01
    53e0:	92 2b       	or	r25, r18
    53e2:	91 83       	std	Z+1, r25	; 0x01
    53e4:	8f 5f       	subi	r24, 0xFF	; 255
    53e6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    53ea:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    53ee:	e0 32       	cpi	r30, 0x20	; 32
    53f0:	28 f5       	brcc	.+74     	; 0x543c <menu_ModuleTestExecute+0x146>
    53f2:	f0 e0       	ldi	r31, 0x00	; 0
    53f4:	ee 0f       	add	r30, r30
    53f6:	ff 1f       	adc	r31, r31
    53f8:	ee 0f       	add	r30, r30
    53fa:	ff 1f       	adc	r31, r31
    53fc:	ee 0f       	add	r30, r30
    53fe:	ff 1f       	adc	r31, r31
    5400:	e7 5b       	subi	r30, 0xB7	; 183
    5402:	fd 4f       	sbci	r31, 0xFD	; 253
    5404:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    5408:	98 2f       	mov	r25, r24
    540a:	90 95       	com	r25
    540c:	81 81       	ldd	r24, Z+1	; 0x01
    540e:	89 23       	and	r24, r25
    5410:	81 83       	std	Z+1, r24	; 0x01
    5412:	8e e1       	ldi	r24, 0x1E	; 30
    5414:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    5418:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    541c:	0e 94 95 3a 	call	0x752a	; 0x752a <lcd_dec2out>
    5420:	9f b7       	in	r25, 0x3f	; 63
    5422:	f8 94       	cli
    5424:	81 e0       	ldi	r24, 0x01	; 1
    5426:	06 c0       	rjmp	.+12     	; 0x5434 <menu_ModuleTestExecute+0x13e>
    5428:	ef e2       	ldi	r30, 0x2F	; 47
    542a:	f2 e0       	ldi	r31, 0x02	; 2
    542c:	88 e0       	ldi	r24, 0x08	; 8
    542e:	84 87       	std	Z+12, r24	; 0x0c
    5430:	15 86       	std	Z+13, r1	; 0x0d
    5432:	80 e0       	ldi	r24, 0x00	; 0
    5434:	81 11       	cpse	r24, r1
    5436:	f8 cf       	rjmp	.-16     	; 0x5428 <menu_ModuleTestExecute+0x132>
    5438:	9f bf       	out	0x3f, r25	; 63
    543a:	08 95       	ret
    543c:	e0 32       	cpi	r30, 0x20	; 32
    543e:	81 f5       	brne	.+96     	; 0x54a0 <menu_ModuleTestExecute+0x1aa>
    5440:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    5444:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    5448:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    544c:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    5450:	00 97       	sbiw	r24, 0x00	; 0
    5452:	a1 05       	cpc	r26, r1
    5454:	b1 05       	cpc	r27, r1
    5456:	21 f4       	brne	.+8      	; 0x5460 <menu_ModuleTestExecute+0x16a>
    5458:	8e ea       	ldi	r24, 0xAE	; 174
    545a:	93 e0       	ldi	r25, 0x03	; 3
    545c:	03 df       	rcall	.-506    	; 0x5264 <displayMenuMessage_P>
    545e:	0f c0       	rjmp	.+30     	; 0x547e <menu_ModuleTestExecute+0x188>
    5460:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <editLong>
    5464:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <editLong+0x1>
    5468:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <editLong+0x2>
    546c:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <editLong+0x3>
    5470:	8b ea       	ldi	r24, 0xAB	; 171
    5472:	93 e0       	ldi	r25, 0x03	; 3
    5474:	f7 de       	rcall	.-530    	; 0x5264 <displayMenuMessage_P>
    5476:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    547a:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <lcd_longout>
    547e:	8e ef       	ldi	r24, 0xFE	; 254
    5480:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5484:	9f b7       	in	r25, 0x3f	; 63
    5486:	f8 94       	cli
    5488:	81 e0       	ldi	r24, 0x01	; 1
    548a:	06 c0       	rjmp	.+12     	; 0x5498 <menu_ModuleTestExecute+0x1a2>
    548c:	ef e2       	ldi	r30, 0x2F	; 47
    548e:	f2 e0       	ldi	r31, 0x02	; 2
    5490:	82 e0       	ldi	r24, 0x02	; 2
    5492:	84 87       	std	Z+12, r24	; 0x0c
    5494:	85 87       	std	Z+13, r24	; 0x0d
    5496:	80 e0       	ldi	r24, 0x00	; 0
    5498:	81 11       	cpse	r24, r1
    549a:	f8 cf       	rjmp	.-16     	; 0x548c <menu_ModuleTestExecute+0x196>
    549c:	9f bf       	out	0x3f, r25	; 63
    549e:	cf cb       	rjmp	.-2146   	; 0x4c3e <menuCursorSetMenu>
    54a0:	08 95       	ret

000054a2 <menu_ModuleTestPattern>:
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    54aa:	02 c0       	rjmp	.+4      	; 0x54b0 <menu_ModuleTestPattern+0xe>
    54ac:	88 0f       	add	r24, r24
    54ae:	99 1f       	adc	r25, r25
    54b0:	0a 94       	dec	r0
    54b2:	e2 f7       	brpl	.-8      	; 0x54ac <menu_ModuleTestPattern+0xa>
    54b4:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    54b8:	8f ef       	ldi	r24, 0xFF	; 255
    54ba:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    54be:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    54c2:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    54c6:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    54ca:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    54ce:	13 df       	rcall	.-474    	; 0x52f6 <menu_ModuleTestExecute>
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	08 95       	ret

000054d4 <menuLCDwriteOK>:
    54d4:	8e ea       	ldi	r24, 0xAE	; 174
    54d6:	93 e0       	ldi	r25, 0x03	; 3
    54d8:	c5 ce       	rjmp	.-630    	; 0x5264 <displayMenuMessage_P>
    54da:	08 95       	ret

000054dc <menuOnEnterEEBackup>:
    54dc:	8e e1       	ldi	r24, 0x1E	; 30
    54de:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    54e2:	81 e9       	ldi	r24, 0x91	; 145
    54e4:	93 e0       	ldi	r25, 0x03	; 3
    54e6:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    54ea:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <eeprom_Backup>
    54ee:	f2 df       	rcall	.-28     	; 0x54d4 <menuLCDwriteOK>
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	08 95       	ret

000054f4 <menuOnEnterEERestore>:
    54f4:	8e e1       	ldi	r24, 0x1E	; 30
    54f6:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    54fa:	81 e9       	ldi	r24, 0x91	; 145
    54fc:	93 e0       	ldi	r25, 0x03	; 3
    54fe:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    5502:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <eeprom_Restore>
    5506:	e6 df       	rcall	.-52     	; 0x54d4 <menuLCDwriteOK>
    5508:	80 e0       	ldi	r24, 0x00	; 0
    550a:	08 95       	ret

0000550c <menuOnEnterEEUpdate>:
    550c:	81 e9       	ldi	r24, 0x91	; 145
    550e:	93 e0       	ldi	r25, 0x03	; 3
    5510:	a9 de       	rcall	.-686    	; 0x5264 <displayMenuMessage_P>
    5512:	8e e1       	ldi	r24, 0x1E	; 30
    5514:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    5518:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <eeprom_UpdateALL>
    551c:	db df       	rcall	.-74     	; 0x54d4 <menuLCDwriteOK>
    551e:	80 e0       	ldi	r24, 0x00	; 0
    5520:	08 95       	ret

00005522 <menudeleteMainMessage>:
    5522:	cf 93       	push	r28
    5524:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5528:	80 e4       	ldi	r24, 0x40	; 64
    552a:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    552e:	84 e1       	ldi	r24, 0x14	; 20
    5530:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
    5534:	8c 2f       	mov	r24, r28
    5536:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    553a:	cf 91       	pop	r28
    553c:	08 95       	ret

0000553e <menu_deleteMessage>:
    553e:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    5542:	83 30       	cpi	r24, 0x03	; 3
    5544:	19 f4       	brne	.+6      	; 0x554c <menu_deleteMessage+0xe>
    5546:	7f db       	rcall	.-2306   	; 0x4c46 <menuClearExtraDisp>
    5548:	83 cb       	rjmp	.-2298   	; 0x4c50 <menu_ClearDataDisp>
    554a:	08 95       	ret
    554c:	81 11       	cpse	r24, r1
    554e:	02 c0       	rjmp	.+4      	; 0x5554 <menu_deleteMessage+0x16>
    5550:	7a cb       	rjmp	.-2316   	; 0x4c46 <menuClearExtraDisp>
    5552:	08 95       	ret
    5554:	81 30       	cpi	r24, 0x01	; 1
    5556:	11 f4       	brne	.+4      	; 0x555c <menu_deleteMessage+0x1e>
    5558:	7b cb       	rjmp	.-2314   	; 0x4c50 <menu_ClearDataDisp>
    555a:	08 95       	ret
    555c:	e2 cf       	rjmp	.-60     	; 0x5522 <menudeleteMainMessage>
    555e:	08 95       	ret

00005560 <menu_DisplayMainMessage_P>:
    5560:	0f 93       	push	r16
    5562:	1f 93       	push	r17
    5564:	cf 93       	push	r28
    5566:	df 93       	push	r29
    5568:	ec 01       	movw	r28, r24
    556a:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    556e:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <get_StrLenP>
    5572:	08 2f       	mov	r16, r24
    5574:	80 e4       	ldi	r24, 0x40	; 64
    5576:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    557a:	84 e1       	ldi	r24, 0x14	; 20
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	80 1b       	sub	r24, r16
    5580:	91 09       	sbc	r25, r1
    5582:	95 95       	asr	r25
    5584:	87 95       	ror	r24
    5586:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
    558a:	ce 01       	movw	r24, r28
    558c:	0e 94 a9 13 	call	0x2752	; 0x2752 <lcd_puts_P>
    5590:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5594:	84 e5       	ldi	r24, 0x54	; 84
    5596:	89 1b       	sub	r24, r25
    5598:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
    559c:	81 2f       	mov	r24, r17
    559e:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    55a2:	9f b7       	in	r25, 0x3f	; 63
    55a4:	f8 94       	cli
    55a6:	81 e0       	ldi	r24, 0x01	; 1
    55a8:	06 c0       	rjmp	.+12     	; 0x55b6 <menu_DisplayMainMessage_P+0x56>
    55aa:	ef e2       	ldi	r30, 0x2F	; 47
    55ac:	f2 e0       	ldi	r31, 0x02	; 2
    55ae:	84 e6       	ldi	r24, 0x64	; 100
    55b0:	86 87       	std	Z+14, r24	; 0x0e
    55b2:	17 86       	std	Z+15, r1	; 0x0f
    55b4:	80 e0       	ldi	r24, 0x00	; 0
    55b6:	81 11       	cpse	r24, r1
    55b8:	f8 cf       	rjmp	.-16     	; 0x55aa <menu_DisplayMainMessage_P+0x4a>
    55ba:	9f bf       	out	0x3f, r25	; 63
    55bc:	82 e0       	ldi	r24, 0x02	; 2
    55be:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    55c2:	df 91       	pop	r29
    55c4:	cf 91       	pop	r28
    55c6:	1f 91       	pop	r17
    55c8:	0f 91       	pop	r16
    55ca:	08 95       	ret

000055cc <menu_DisplayMainMessage>:
    55cc:	0f 93       	push	r16
    55ce:	1f 93       	push	r17
    55d0:	cf 93       	push	r28
    55d2:	df 93       	push	r29
    55d4:	ec 01       	movw	r28, r24
    55d6:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    55da:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <get_StrLen>
    55de:	08 2f       	mov	r16, r24
    55e0:	80 e4       	ldi	r24, 0x40	; 64
    55e2:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    55e6:	84 e1       	ldi	r24, 0x14	; 20
    55e8:	90 e0       	ldi	r25, 0x00	; 0
    55ea:	80 1b       	sub	r24, r16
    55ec:	91 09       	sbc	r25, r1
    55ee:	95 95       	asr	r25
    55f0:	87 95       	ror	r24
    55f2:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
    55f6:	ce 01       	movw	r24, r28
    55f8:	0e 94 99 13 	call	0x2732	; 0x2732 <lcd_puts>
    55fc:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5600:	84 e5       	ldi	r24, 0x54	; 84
    5602:	89 1b       	sub	r24, r25
    5604:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
    5608:	81 2f       	mov	r24, r17
    560a:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    560e:	9f b7       	in	r25, 0x3f	; 63
    5610:	f8 94       	cli
    5612:	81 e0       	ldi	r24, 0x01	; 1
    5614:	06 c0       	rjmp	.+12     	; 0x5622 <menu_DisplayMainMessage+0x56>
    5616:	ef e2       	ldi	r30, 0x2F	; 47
    5618:	f2 e0       	ldi	r31, 0x02	; 2
    561a:	84 e6       	ldi	r24, 0x64	; 100
    561c:	86 87       	std	Z+14, r24	; 0x0e
    561e:	17 86       	std	Z+15, r1	; 0x0f
    5620:	80 e0       	ldi	r24, 0x00	; 0
    5622:	81 11       	cpse	r24, r1
    5624:	f8 cf       	rjmp	.-16     	; 0x5616 <menu_DisplayMainMessage+0x4a>
    5626:	9f bf       	out	0x3f, r25	; 63
    5628:	82 e0       	ldi	r24, 0x02	; 2
    562a:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    562e:	df 91       	pop	r29
    5630:	cf 91       	pop	r28
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	08 95       	ret

00005638 <menuDisplaySaveMessage>:
    5638:	cf 93       	push	r28
    563a:	c6 2f       	mov	r28, r22
    563c:	61 ee       	ldi	r22, 0xE1	; 225
    563e:	78 e1       	ldi	r23, 0x18	; 24
    5640:	0e 94 cb 3a 	call	0x7596	; 0x7596 <putChar_Dec>
    5644:	bc 01       	movw	r22, r24
    5646:	8e ec       	ldi	r24, 0xCE	; 206
    5648:	93 e0       	ldi	r25, 0x03	; 3
    564a:	0e 94 bf 3b 	call	0x777e	; 0x777e <putString_P>
    564e:	6c 2f       	mov	r22, r28
    5650:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <putString_Prog>
    5654:	81 ee       	ldi	r24, 0xE1	; 225
    5656:	98 e1       	ldi	r25, 0x18	; 24
    5658:	b9 df       	rcall	.-142    	; 0x55cc <menu_DisplayMainMessage>
    565a:	cf 91       	pop	r28
    565c:	08 95       	ret

0000565e <softKeyPrP>:
    565e:	cf 93       	push	r28
    5660:	88 23       	and	r24, r24
    5662:	54 f4       	brge	.+20     	; 0x5678 <softKeyPrP+0x1a>
    5664:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    5668:	cf 3f       	cpi	r28, 0xFF	; 255
    566a:	a9 f0       	breq	.+42     	; 0x5696 <softKeyPrP+0x38>
    566c:	6f ef       	ldi	r22, 0xFF	; 255
    566e:	8c 2f       	mov	r24, r28
    5670:	75 d4       	rcall	.+2282   	; 0x5f5c <register_toProgram>
    5672:	6c 2f       	mov	r22, r28
    5674:	e1 df       	rcall	.-62     	; 0x5638 <menuDisplaySaveMessage>
    5676:	0f c0       	rjmp	.+30     	; 0x5696 <softKeyPrP+0x38>
    5678:	88 23       	and	r24, r24
    567a:	69 f0       	breq	.+26     	; 0x5696 <softKeyPrP+0x38>
    567c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    5680:	8f 33       	cpi	r24, 0x3F	; 63
    5682:	21 f4       	brne	.+8      	; 0x568c <softKeyPrP+0x2e>
    5684:	8f ef       	ldi	r24, 0xFF	; 255
    5686:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    568a:	03 c0       	rjmp	.+6      	; 0x5692 <softKeyPrP+0x34>
    568c:	8f 5f       	subi	r24, 0xFF	; 255
    568e:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5692:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <softKeyUpdateProg>
    5696:	80 e0       	ldi	r24, 0x00	; 0
    5698:	cf 91       	pop	r28
    569a:	08 95       	ret

0000569c <softKeyPrSet>:
    569c:	cf 93       	push	r28
    569e:	88 23       	and	r24, r24
    56a0:	49 f0       	breq	.+18     	; 0x56b4 <softKeyPrSet+0x18>
    56a2:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    56a6:	cf 3f       	cpi	r28, 0xFF	; 255
    56a8:	29 f0       	breq	.+10     	; 0x56b4 <softKeyPrSet+0x18>
    56aa:	6f ef       	ldi	r22, 0xFF	; 255
    56ac:	8c 2f       	mov	r24, r28
    56ae:	56 d4       	rcall	.+2220   	; 0x5f5c <register_toProgram>
    56b0:	6c 2f       	mov	r22, r28
    56b2:	c2 df       	rcall	.-124    	; 0x5638 <menuDisplaySaveMessage>
    56b4:	80 e0       	ldi	r24, 0x00	; 0
    56b6:	cf 91       	pop	r28
    56b8:	08 95       	ret

000056ba <menuDisplayLoadMessage>:
    56ba:	0f 93       	push	r16
    56bc:	1f 93       	push	r17
    56be:	cf 93       	push	r28
    56c0:	c8 2f       	mov	r28, r24
    56c2:	81 ee       	ldi	r24, 0xE1	; 225
    56c4:	98 e1       	ldi	r25, 0x18	; 24
    56c6:	0e 94 d5 3b 	call	0x77aa	; 0x77aa <putString_Prog>
    56ca:	bc 01       	movw	r22, r24
    56cc:	6f 5f       	subi	r22, 0xFF	; 255
    56ce:	7f 4f       	sbci	r23, 0xFF	; 255
    56d0:	2e e7       	ldi	r18, 0x7E	; 126
    56d2:	fc 01       	movw	r30, r24
    56d4:	20 83       	st	Z, r18
    56d6:	8c 2f       	mov	r24, r28
    56d8:	0e 94 cb 3a 	call	0x7596	; 0x7596 <putChar_Dec>
    56dc:	bc 01       	movw	r22, r24
    56de:	89 ec       	ldi	r24, 0xC9	; 201
    56e0:	93 e0       	ldi	r25, 0x03	; 3
    56e2:	0e 94 bf 3b 	call	0x777e	; 0x777e <putString_P>
    56e6:	8c 01       	movw	r16, r24
    56e8:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <module_WaitOutputInput2Cycles>
    56ec:	84 e0       	ldi	r24, 0x04	; 4
    56ee:	d1 d3       	rcall	.+1954   	; 0x5e92 <count_Registers>
    56f0:	c8 2f       	mov	r28, r24
    56f2:	88 23       	and	r24, r24
    56f4:	49 f0       	breq	.+18     	; 0x5708 <menuDisplayLoadMessage+0x4e>
    56f6:	b8 01       	movw	r22, r16
    56f8:	87 ec       	ldi	r24, 0xC7	; 199
    56fa:	93 e0       	ldi	r25, 0x03	; 3
    56fc:	0e 94 bf 3b 	call	0x777e	; 0x777e <putString_P>
    5700:	bc 01       	movw	r22, r24
    5702:	8c 2f       	mov	r24, r28
    5704:	0e 94 cb 3a 	call	0x7596	; 0x7596 <putChar_Dec>
    5708:	81 ee       	ldi	r24, 0xE1	; 225
    570a:	98 e1       	ldi	r25, 0x18	; 24
    570c:	5f df       	rcall	.-322    	; 0x55cc <menu_DisplayMainMessage>
    570e:	cf 91       	pop	r28
    5710:	1f 91       	pop	r17
    5712:	0f 91       	pop	r16
    5714:	08 95       	ret

00005716 <handle_programKey>:
    5716:	cf 93       	push	r28
    5718:	c6 2f       	mov	r28, r22
    571a:	88 23       	and	r24, r24
    571c:	34 f4       	brge	.+12     	; 0x572a <handle_programKey+0x14>
    571e:	6f ef       	ldi	r22, 0xFF	; 255
    5720:	8c 2f       	mov	r24, r28
    5722:	1c d4       	rcall	.+2104   	; 0x5f5c <register_toProgram>
    5724:	6c 2f       	mov	r22, r28
    5726:	88 df       	rcall	.-240    	; 0x5638 <menuDisplaySaveMessage>
    5728:	09 c0       	rjmp	.+18     	; 0x573c <handle_programKey+0x26>
    572a:	88 23       	and	r24, r24
    572c:	39 f0       	breq	.+14     	; 0x573c <handle_programKey+0x26>
    572e:	86 2f       	mov	r24, r22
    5730:	af d4       	rcall	.+2398   	; 0x6090 <program_toRegister>
    5732:	6c 2f       	mov	r22, r28
    5734:	c2 df       	rcall	.-124    	; 0x56ba <menuDisplayLoadMessage>
    5736:	8c 2f       	mov	r24, r28
    5738:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <send_progrChange_toMidiThru>
    573c:	8c 2f       	mov	r24, r28
    573e:	7e d4       	rcall	.+2300   	; 0x603c <midi_CountRegisterInProgram>
    5740:	88 23       	and	r24, r24
    5742:	31 f0       	breq	.+12     	; 0x5750 <handle_programKey+0x3a>
    5744:	8c 2f       	mov	r24, r28
    5746:	3f d4       	rcall	.+2174   	; 0x5fc6 <midi_RegisterMatchProgram>
    5748:	81 11       	cpse	r24, r1
    574a:	04 c0       	rjmp	.+8      	; 0x5754 <handle_programKey+0x3e>
    574c:	81 e8       	ldi	r24, 0x81	; 129
    574e:	03 c0       	rjmp	.+6      	; 0x5756 <handle_programKey+0x40>
    5750:	82 e8       	ldi	r24, 0x82	; 130
    5752:	01 c0       	rjmp	.+2      	; 0x5756 <handle_programKey+0x40>
    5754:	82 e8       	ldi	r24, 0x82	; 130
    5756:	cf 91       	pop	r28
    5758:	08 95       	ret

0000575a <softKeyK1A>:
    575a:	60 e0       	ldi	r22, 0x00	; 0
    575c:	dc cf       	rjmp	.-72     	; 0x5716 <handle_programKey>
    575e:	08 95       	ret

00005760 <softKeyK2A>:
    5760:	61 e0       	ldi	r22, 0x01	; 1
    5762:	d9 cf       	rjmp	.-78     	; 0x5716 <handle_programKey>
    5764:	08 95       	ret

00005766 <softKeyK3A>:
    5766:	62 e0       	ldi	r22, 0x02	; 2
    5768:	d6 cf       	rjmp	.-84     	; 0x5716 <handle_programKey>
    576a:	08 95       	ret

0000576c <softKeyK4A>:
    576c:	63 e0       	ldi	r22, 0x03	; 3
    576e:	d3 cf       	rjmp	.-90     	; 0x5716 <handle_programKey>
    5770:	08 95       	ret

00005772 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5772:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5774:	34 e0       	ldi	r19, 0x04	; 4
    5776:	80 37       	cpi	r24, 0x70	; 112
    5778:	93 07       	cpc	r25, r19
    577a:	49 f0       	breq	.+18     	; 0x578e <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    577c:	34 e0       	ldi	r19, 0x04	; 4
    577e:	80 37       	cpi	r24, 0x70	; 112
    5780:	93 07       	cpc	r25, r19
    5782:	38 f0       	brcs	.+14     	; 0x5792 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5784:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5786:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5788:	a9 f7       	brne	.-22     	; 0x5774 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    578a:	80 e0       	ldi	r24, 0x00	; 0
    578c:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    578e:	82 2f       	mov	r24, r18
    5790:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5792:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5794:	08 95       	ret

00005796 <init_SoftKeys>:

void init_SoftKeys(){
    5796:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5798:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <eeprom_ReadSoftkeys>
    579c:	8f 3f       	cpi	r24, 0xFF	; 255
    579e:	c9 f4       	brne	.+50     	; 0x57d2 <init_SoftKeys+0x3c>
    57a0:	0f c0       	rjmp	.+30     	; 0x57c0 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    57a2:	82 2f       	mov	r24, r18
    57a4:	90 e0       	ldi	r25, 0x00	; 0
    57a6:	fc 01       	movw	r30, r24
    57a8:	ed 54       	subi	r30, 0x4D	; 77
    57aa:	fa 4f       	sbci	r31, 0xFA	; 250
    57ac:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    57ae:	88 0f       	add	r24, r24
    57b0:	99 1f       	adc	r25, r25
    57b2:	fc 01       	movw	r30, r24
    57b4:	e6 54       	subi	r30, 0x46	; 70
    57b6:	fa 4f       	sbci	r31, 0xFA	; 250
    57b8:	11 82       	std	Z+1, r1	; 0x01
    57ba:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    57bc:	2f 5f       	subi	r18, 0xFF	; 255
    57be:	01 c0       	rjmp	.+2      	; 0x57c2 <init_SoftKeys+0x2c>
    57c0:	20 e0       	ldi	r18, 0x00	; 0
    57c2:	24 30       	cpi	r18, 0x04	; 4
    57c4:	70 f3       	brcs	.-36     	; 0x57a2 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    57c6:	40 e0       	ldi	r20, 0x00	; 0
    57c8:	50 e0       	ldi	r21, 0x00	; 0
    57ca:	67 e0       	ldi	r22, 0x07	; 7
    57cc:	81 e0       	ldi	r24, 0x01	; 1
    57ce:	0e 94 5f 15 	call	0x2abe	; 0x2abe <log_putError>
    57d2:	c0 e0       	ldi	r28, 0x00	; 0
    57d4:	25 c0       	rjmp	.+74     	; 0x5820 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    57d6:	4c 2f       	mov	r20, r28
    57d8:	50 e0       	ldi	r21, 0x00	; 0
    57da:	fa 01       	movw	r30, r20
    57dc:	ed 54       	subi	r30, 0x4D	; 77
    57de:	fa 4f       	sbci	r31, 0xFA	; 250
    57e0:	80 81       	ld	r24, Z
    57e2:	8d 31       	cpi	r24, 0x1D	; 29
    57e4:	70 f4       	brcc	.+28     	; 0x5802 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    57e6:	24 e1       	ldi	r18, 0x14	; 20
    57e8:	82 9f       	mul	r24, r18
    57ea:	c0 01       	movw	r24, r0
    57ec:	11 24       	eor	r1, r1
    57ee:	80 59       	subi	r24, 0x90	; 144
    57f0:	9b 4f       	sbci	r25, 0xFB	; 251
    57f2:	44 0f       	add	r20, r20
    57f4:	55 1f       	adc	r21, r21
    57f6:	fa 01       	movw	r30, r20
    57f8:	e6 54       	subi	r30, 0x46	; 70
    57fa:	fa 4f       	sbci	r31, 0xFA	; 250
    57fc:	91 83       	std	Z+1, r25	; 0x01
    57fe:	80 83       	st	Z, r24
    5800:	0e c0       	rjmp	.+28     	; 0x581e <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    5802:	fa 01       	movw	r30, r20
    5804:	ee 0f       	add	r30, r30
    5806:	ff 1f       	adc	r31, r31
    5808:	e6 54       	subi	r30, 0x46	; 70
    580a:	fa 4f       	sbci	r31, 0xFA	; 250
    580c:	11 82       	std	Z+1, r1	; 0x01
    580e:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5810:	4f 5f       	subi	r20, 0xFF	; 255
    5812:	5f 4f       	sbci	r21, 0xFF	; 255
    5814:	40 61       	ori	r20, 0x10	; 16
    5816:	67 e0       	ldi	r22, 0x07	; 7
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	0e 94 5f 15 	call	0x2abe	; 0x2abe <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    581e:	cf 5f       	subi	r28, 0xFF	; 255
    5820:	c4 30       	cpi	r28, 0x04	; 4
    5822:	c8 f2       	brcs	.-78     	; 0x57d6 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5824:	cf 91       	pop	r28
    5826:	08 95       	ret

00005828 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5828:	cf 93       	push	r28
    582a:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    582c:	64 30       	cpi	r22, 0x04	; 4
    582e:	28 f5       	brcc	.+74     	; 0x587a <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5830:	00 97       	sbiw	r24, 0x00	; 0
    5832:	b9 f0       	breq	.+46     	; 0x5862 <softKey_Set+0x3a>
    5834:	fc 01       	movw	r30, r24
    5836:	24 91       	lpm	r18, Z
    5838:	2f 73       	andi	r18, 0x3F	; 63
    583a:	21 30       	cpi	r18, 0x01	; 1
    583c:	91 f4       	brne	.+36     	; 0x5862 <softKey_Set+0x3a>
    583e:	31 96       	adiw	r30, 0x01	; 1
    5840:	24 91       	lpm	r18, Z
    5842:	24 ff       	sbrs	r18, 4
    5844:	0e c0       	rjmp	.+28     	; 0x5862 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5846:	c6 2f       	mov	r28, r22
    5848:	d0 e0       	ldi	r29, 0x00	; 0
    584a:	fe 01       	movw	r30, r28
    584c:	ee 0f       	add	r30, r30
    584e:	ff 1f       	adc	r31, r31
    5850:	e6 54       	subi	r30, 0x46	; 70
    5852:	fa 4f       	sbci	r31, 0xFA	; 250
    5854:	91 83       	std	Z+1, r25	; 0x01
    5856:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5858:	8c df       	rcall	.-232    	; 0x5772 <getSoftKeyIndex>
    585a:	cd 54       	subi	r28, 0x4D	; 77
    585c:	da 4f       	sbci	r29, 0xFA	; 250
    585e:	88 83       	st	Y, r24
    5860:	0c c0       	rjmp	.+24     	; 0x587a <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5862:	70 e0       	ldi	r23, 0x00	; 0
    5864:	fb 01       	movw	r30, r22
    5866:	ee 0f       	add	r30, r30
    5868:	ff 1f       	adc	r31, r31
    586a:	e6 54       	subi	r30, 0x46	; 70
    586c:	fa 4f       	sbci	r31, 0xFA	; 250
    586e:	11 82       	std	Z+1, r1	; 0x01
    5870:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5872:	fb 01       	movw	r30, r22
    5874:	ed 54       	subi	r30, 0x4D	; 77
    5876:	fa 4f       	sbci	r31, 0xFA	; 250
    5878:	10 82       	st	Z, r1
		}
	}
}
    587a:	df 91       	pop	r29
    587c:	cf 91       	pop	r28
    587e:	08 95       	ret

00005880 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5880:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5884:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5888:	3e 96       	adiw	r30, 0x0e	; 14
    588a:	65 91       	lpm	r22, Z+
    588c:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    588e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5892:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    5896:	c8 df       	rcall	.-112    	; 0x5828 <softKey_Set>
	eeprom_UpdateSoftkeys();
    5898:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <eeprom_UpdateSoftkeys>
	return 0;
}
    589c:	80 e0       	ldi	r24, 0x00	; 0
    589e:	08 95       	ret

000058a0 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    58a0:	0f 93       	push	r16
    58a2:	1f 93       	push	r17
    58a4:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    58a6:	c0 e0       	ldi	r28, 0x00	; 0
    58a8:	32 c0       	rjmp	.+100    	; 0x590e <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    58aa:	0c 2f       	mov	r16, r28
    58ac:	10 e0       	ldi	r17, 0x00	; 0
    58ae:	f8 01       	movw	r30, r16
    58b0:	ee 0f       	add	r30, r30
    58b2:	ff 1f       	adc	r31, r31
    58b4:	e6 54       	subi	r30, 0x46	; 70
    58b6:	fa 4f       	sbci	r31, 0xFA	; 250
    58b8:	01 90       	ld	r0, Z+
    58ba:	f0 81       	ld	r31, Z
    58bc:	e0 2d       	mov	r30, r0
    58be:	30 97       	sbiw	r30, 0x00	; 0
    58c0:	31 f0       	breq	.+12     	; 0x58ce <softKeys_toLCD+0x2e>
    58c2:	3e 96       	adiw	r30, 0x0e	; 14
    58c4:	65 91       	lpm	r22, Z+
    58c6:	75 91       	lpm	r23, Z+
    58c8:	61 15       	cp	r22, r1
    58ca:	71 05       	cpc	r23, r1
    58cc:	21 f4       	brne	.+8      	; 0x58d6 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    58ce:	8c 2f       	mov	r24, r28
    58d0:	0e 94 e8 3c 	call	0x79d0	; 0x79d0 <keylabel_clr>
    58d4:	1b c0       	rjmp	.+54     	; 0x590c <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    58d6:	8c 2f       	mov	r24, r28
    58d8:	0e 94 ad 3c 	call	0x795a	; 0x795a <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    58dc:	00 0f       	add	r16, r16
    58de:	11 1f       	adc	r17, r17
    58e0:	f8 01       	movw	r30, r16
    58e2:	e6 54       	subi	r30, 0x46	; 70
    58e4:	fa 4f       	sbci	r31, 0xFA	; 250
    58e6:	01 90       	ld	r0, Z+
    58e8:	f0 81       	ld	r31, Z
    58ea:	e0 2d       	mov	r30, r0
    58ec:	70 96       	adiw	r30, 0x10	; 16
    58ee:	05 90       	lpm	r0, Z+
    58f0:	f4 91       	lpm	r31, Z
    58f2:	e0 2d       	mov	r30, r0
    58f4:	30 97       	sbiw	r30, 0x00	; 0
    58f6:	51 f0       	breq	.+20     	; 0x590c <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    58f8:	80 e0       	ldi	r24, 0x00	; 0
    58fa:	19 95       	eicall
    58fc:	81 38       	cpi	r24, 0x81	; 129
    58fe:	11 f4       	brne	.+4      	; 0x5904 <softKeys_toLCD+0x64>
    5900:	6f ef       	ldi	r22, 0xFF	; 255
    5902:	01 c0       	rjmp	.+2      	; 0x5906 <softKeys_toLCD+0x66>
    5904:	60 e0       	ldi	r22, 0x00	; 0
    5906:	8c 2f       	mov	r24, r28
    5908:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    590c:	cf 5f       	subi	r28, 0xFF	; 255
    590e:	c4 30       	cpi	r28, 0x04	; 4
    5910:	60 f2       	brcs	.-104    	; 0x58aa <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5912:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
}
    5916:	cf 91       	pop	r28
    5918:	1f 91       	pop	r17
    591a:	0f 91       	pop	r16
    591c:	08 95       	ret

0000591e <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    591e:	82 30       	cpi	r24, 0x02	; 2
    5920:	49 f0       	breq	.+18     	; 0x5934 <softKey_MessageKey_ToSoftKeyNr+0x16>
    5922:	18 f4       	brcc	.+6      	; 0x592a <softKey_MessageKey_ToSoftKeyNr+0xc>
    5924:	81 30       	cpi	r24, 0x01	; 1
    5926:	51 f0       	breq	.+20     	; 0x593c <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5928:	0b c0       	rjmp	.+22     	; 0x5940 <softKey_MessageKey_ToSoftKeyNr+0x22>
    592a:	83 30       	cpi	r24, 0x03	; 3
    592c:	59 f0       	breq	.+22     	; 0x5944 <softKey_MessageKey_ToSoftKeyNr+0x26>
    592e:	84 30       	cpi	r24, 0x04	; 4
    5930:	19 f0       	breq	.+6      	; 0x5938 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5932:	06 c0       	rjmp	.+12     	; 0x5940 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5934:	80 e0       	ldi	r24, 0x00	; 0
    5936:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5938:	82 e0       	ldi	r24, 0x02	; 2
    593a:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    593c:	83 e0       	ldi	r24, 0x03	; 3
    593e:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5940:	8f ef       	ldi	r24, 0xFF	; 255
    5942:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5944:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5946:	08 95       	ret

00005948 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5948:	0f 93       	push	r16
    594a:	1f 93       	push	r17
    594c:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    594e:	84 30       	cpi	r24, 0x04	; 4
    5950:	d0 f5       	brcc	.+116    	; 0x59c6 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5952:	e8 2f       	mov	r30, r24
    5954:	f0 e0       	ldi	r31, 0x00	; 0
    5956:	ee 0f       	add	r30, r30
    5958:	ff 1f       	adc	r31, r31
    595a:	e6 54       	subi	r30, 0x46	; 70
    595c:	fa 4f       	sbci	r31, 0xFA	; 250
    595e:	00 81       	ld	r16, Z
    5960:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5962:	01 15       	cp	r16, r1
    5964:	11 05       	cpc	r17, r1
    5966:	89 f1       	breq	.+98     	; 0x59ca <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5968:	f8 01       	movw	r30, r16
    596a:	94 91       	lpm	r25, Z
    596c:	9f 73       	andi	r25, 0x3F	; 63
    596e:	91 30       	cpi	r25, 0x01	; 1
    5970:	71 f5       	brne	.+92     	; 0x59ce <softKey_Execute+0x86>
    5972:	31 96       	adiw	r30, 0x01	; 1
    5974:	94 91       	lpm	r25, Z
    5976:	94 ff       	sbrs	r25, 4
    5978:	2c c0       	rjmp	.+88     	; 0x59d2 <softKey_Execute+0x8a>
    597a:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    597c:	3f 96       	adiw	r30, 0x0f	; 15
    597e:	05 90       	lpm	r0, Z+
    5980:	f4 91       	lpm	r31, Z
    5982:	e0 2d       	mov	r30, r0
    5984:	30 97       	sbiw	r30, 0x00	; 0
    5986:	89 f0       	breq	.+34     	; 0x59aa <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5988:	86 2f       	mov	r24, r22
    598a:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    598c:	82 38       	cpi	r24, 0x82	; 130
    598e:	29 f4       	brne	.+10     	; 0x599a <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5990:	60 e0       	ldi	r22, 0x00	; 0
    5992:	8c 2f       	mov	r24, r28
    5994:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <keylabel_statcheck>
    5998:	06 c0       	rjmp	.+12     	; 0x59a6 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    599a:	81 38       	cpi	r24, 0x81	; 129
    599c:	21 f4       	brne	.+8      	; 0x59a6 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    599e:	6f ef       	ldi	r22, 0xFF	; 255
    59a0:	8c 2f       	mov	r24, r28
    59a2:	0e 94 1b 3d 	call	0x7a36	; 0x7a36 <keylabel_statcheck>
					}
					keylabel_toLCD();
    59a6:	0e 94 fc 3c 	call	0x79f8	; 0x79f8 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    59aa:	f8 01       	movw	r30, r16
    59ac:	3c 96       	adiw	r30, 0x0c	; 12
    59ae:	85 91       	lpm	r24, Z+
    59b0:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    59b2:	00 97       	sbiw	r24, 0x00	; 0
    59b4:	81 f0       	breq	.+32     	; 0x59d6 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    59b6:	b8 01       	movw	r22, r16
    59b8:	6e 5f       	subi	r22, 0xFE	; 254
    59ba:	7f 4f       	sbci	r23, 0xFF	; 255
    59bc:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <menu_Init>
					menu_InitLCD(); //display menu
    59c0:	0b da       	rcall	.-3050   	; 0x4dd8 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    59c2:	80 e0       	ldi	r24, 0x00	; 0
    59c4:	09 c0       	rjmp	.+18     	; 0x59d8 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    59c6:	8f ef       	ldi	r24, 0xFF	; 255
    59c8:	07 c0       	rjmp	.+14     	; 0x59d8 <softKey_Execute+0x90>
    59ca:	8f ef       	ldi	r24, 0xFF	; 255
    59cc:	05 c0       	rjmp	.+10     	; 0x59d8 <softKey_Execute+0x90>
    59ce:	8f ef       	ldi	r24, 0xFF	; 255
    59d0:	03 c0       	rjmp	.+6      	; 0x59d8 <softKey_Execute+0x90>
    59d2:	8f ef       	ldi	r24, 0xFF	; 255
    59d4:	01 c0       	rjmp	.+2      	; 0x59d8 <softKey_Execute+0x90>
    59d6:	8f ef       	ldi	r24, 0xFF	; 255
}
    59d8:	cf 91       	pop	r28
    59da:	1f 91       	pop	r17
    59dc:	0f 91       	pop	r16
    59de:	08 95       	ret

000059e0 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    59e0:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    59e2:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    59e6:	8c e0       	ldi	r24, 0x0C	; 12
    59e8:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    59ec:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    59f0:	84 ff       	sbrs	r24, 4
    59f2:	02 c0       	rjmp	.+4      	; 0x59f8 <menu_showPowerState+0x18>
    59f4:	80 e2       	ldi	r24, 0x20	; 32
    59f6:	01 c0       	rjmp	.+2      	; 0x59fa <menu_showPowerState+0x1a>
    59f8:	89 e0       	ldi	r24, 0x09	; 9
    59fa:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
	lcd_goto(saveCursor);
    59fe:	8c 2f       	mov	r24, r28
    5a00:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>

    5a04:	cf 91       	pop	r28
    5a06:	08 95       	ret

00005a08 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    5a08:	85 b1       	in	r24, 0x05	; 5
    5a0a:	80 64       	ori	r24, 0x40	; 64
    5a0c:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5a0e:	83 e1       	ldi	r24, 0x13	; 19
    5a10:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5a14:	e5 df       	rcall	.-54     	; 0x59e0 <menu_showPowerState>
	return 0;
}
    5a16:	80 e0       	ldi	r24, 0x00	; 0
    5a18:	08 95       	ret

00005a1a <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    5a1a:	85 b1       	in	r24, 0x05	; 5
    5a1c:	8f 7b       	andi	r24, 0xBF	; 191
    5a1e:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5a20:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5a24:	dd df       	rcall	.-70     	; 0x59e0 <menu_showPowerState>
	return 0;
}
    5a26:	80 e0       	ldi	r24, 0x00	; 0
    5a28:	08 95       	ret

00005a2a <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    5a2a:	85 b1       	in	r24, 0x05	; 5
    5a2c:	8f 7b       	andi	r24, 0xBF	; 191
    5a2e:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5a36:	d4 df       	rcall	.-88     	; 0x59e0 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5a38:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5a3a:	f8 94       	cli
    5a3c:	81 e0       	ldi	r24, 0x01	; 1
    5a3e:	06 c0       	rjmp	.+12     	; 0x5a4c <menuOnEnterPwrRest+0x22>
    5a40:	ef e2       	ldi	r30, 0x2F	; 47
    5a42:	f2 e0       	ldi	r31, 0x02	; 2
    5a44:	88 e2       	ldi	r24, 0x28	; 40
    5a46:	82 83       	std	Z+2, r24	; 0x02
    5a48:	13 82       	std	Z+3, r1	; 0x03
    5a4a:	80 e0       	ldi	r24, 0x00	; 0
    5a4c:	81 11       	cpse	r24, r1
    5a4e:	f8 cf       	rjmp	.-16     	; 0x5a40 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5a50:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5a52:	08 95       	ret

00005a54 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5a54:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    5a58:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    5a5c:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    5a60:	08 95       	ret

00005a62 <message_push>:
    5a62:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    5a66:	e9 2f       	mov	r30, r25
    5a68:	f0 e0       	ldi	r31, 0x00	; 0
    5a6a:	ed 52       	subi	r30, 0x2D	; 45
    5a6c:	f8 4f       	sbci	r31, 0xF8	; 248
    5a6e:	80 83       	st	Z, r24
    5a70:	9f 5f       	subi	r25, 0xFF	; 255
    5a72:	9f 71       	andi	r25, 0x1F	; 31
    5a74:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    5a78:	98 13       	cpse	r25, r24
    5a7a:	04 c0       	rjmp	.+8      	; 0x5a84 <message_push+0x22>
    5a7c:	8f ef       	ldi	r24, 0xFF	; 255
    5a7e:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    5a82:	08 95       	ret
    5a84:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    5a88:	08 95       	ret

00005a8a <message_get>:
    5a8a:	4f b7       	in	r20, 0x3f	; 63
    5a8c:	f8 94       	cli
    5a8e:	21 e0       	ldi	r18, 0x01	; 1
    5a90:	11 c0       	rjmp	.+34     	; 0x5ab4 <message_get+0x2a>
    5a92:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    5a96:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    5a9a:	8f ef       	ldi	r24, 0xFF	; 255
    5a9c:	20 e0       	ldi	r18, 0x00	; 0
    5a9e:	93 17       	cp	r25, r19
    5aa0:	49 f0       	breq	.+18     	; 0x5ab4 <message_get+0x2a>
    5aa2:	e9 2f       	mov	r30, r25
    5aa4:	f0 e0       	ldi	r31, 0x00	; 0
    5aa6:	ed 52       	subi	r30, 0x2D	; 45
    5aa8:	f8 4f       	sbci	r31, 0xF8	; 248
    5aaa:	80 81       	ld	r24, Z
    5aac:	9f 5f       	subi	r25, 0xFF	; 255
    5aae:	9f 71       	andi	r25, 0x1F	; 31
    5ab0:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    5ab4:	21 11       	cpse	r18, r1
    5ab6:	ed cf       	rjmp	.-38     	; 0x5a92 <message_get+0x8>
    5ab8:	4f bf       	out	0x3f, r20	; 63
    5aba:	08 95       	ret

00005abc <message_status>:
    5abc:	4f b7       	in	r20, 0x3f	; 63
    5abe:	f8 94       	cli
    5ac0:	91 e0       	ldi	r25, 0x01	; 1
    5ac2:	08 c0       	rjmp	.+16     	; 0x5ad4 <message_status+0x18>
    5ac4:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    5ac8:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	80 e0       	ldi	r24, 0x00	; 0
    5ad0:	32 17       	cp	r19, r18
    5ad2:	11 f0       	breq	.+4      	; 0x5ad8 <message_status+0x1c>
    5ad4:	8f ef       	ldi	r24, 0xFF	; 255
    5ad6:	01 c0       	rjmp	.+2      	; 0x5ada <message_status+0x1e>
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	91 11       	cpse	r25, r1
    5adc:	f3 cf       	rjmp	.-26     	; 0x5ac4 <message_status+0x8>
    5ade:	4f bf       	out	0x3f, r20	; 63
    5ae0:	08 95       	ret

00005ae2 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5ae2:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5ae4:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    5ae8:	99 23       	and	r25, r25
    5aea:	e1 f0       	breq	.+56     	; 0x5b24 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5aec:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5af0:	21 e0       	ldi	r18, 0x01	; 1
    5af2:	29 0f       	add	r18, r25
    5af4:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    5af8:	e9 2f       	mov	r30, r25
    5afa:	f0 e0       	ldi	r31, 0x00	; 0
    5afc:	ee 0f       	add	r30, r30
    5afe:	ff 1f       	adc	r31, r31
    5b00:	e0 53       	subi	r30, 0x30	; 48
    5b02:	fa 4f       	sbci	r31, 0xFA	; 250
    5b04:	51 83       	std	Z+1, r21	; 0x01
    5b06:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5b08:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5b0c:	28 13       	cpse	r18, r24
    5b0e:	0a c0       	rjmp	.+20     	; 0x5b24 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5b10:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5b14:	9f 3f       	cpi	r25, 0xFF	; 255
    5b16:	19 f4       	brne	.+6      	; 0x5b1e <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5b18:	8f ef       	ldi	r24, 0xFF	; 255
    5b1a:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5b1e:	8f ef       	ldi	r24, 0xFF	; 255
    5b20:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    5b24:	08 95       	ret

00005b26 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5b26:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5b2a:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5b2e:	e8 13       	cpse	r30, r24
    5b30:	03 c0       	rjmp	.+6      	; 0x5b38 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5b32:	8f ef       	ldi	r24, 0xFF	; 255
    5b34:	9f ef       	ldi	r25, 0xFF	; 255
    5b36:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	8e 0f       	add	r24, r30
    5b3c:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    5b40:	f0 e0       	ldi	r31, 0x00	; 0
    5b42:	ee 0f       	add	r30, r30
    5b44:	ff 1f       	adc	r31, r31
    5b46:	e0 53       	subi	r30, 0x30	; 48
    5b48:	fa 4f       	sbci	r31, 0xFA	; 250
    5b4a:	80 81       	ld	r24, Z
    5b4c:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5b4e:	08 95       	ret

00005b50 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5b50:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5b54:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5b58:	98 13       	cpse	r25, r24
    5b5a:	02 c0       	rjmp	.+4      	; 0x5b60 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5b5c:	80 e0       	ldi	r24, 0x00	; 0
    5b5e:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5b60:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5b62:	08 95       	ret

00005b64 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5b64:	80 e0       	ldi	r24, 0x00	; 0
    5b66:	e1 e1       	ldi	r30, 0x11	; 17
    5b68:	f8 e0       	ldi	r31, 0x08	; 8
    5b6a:	03 c0       	rjmp	.+6      	; 0x5b72 <midi_CouplerReset+0xe>
    5b6c:	10 82       	st	Z, r1
    5b6e:	8f 5f       	subi	r24, 0xFF	; 255
    5b70:	31 96       	adiw	r30, 0x01	; 1
    5b72:	8c 30       	cpi	r24, 0x0C	; 12
    5b74:	d8 f3       	brcs	.-10     	; 0x5b6c <midi_CouplerReset+0x8>
    5b76:	08 95       	ret

00005b78 <init_Midi>:
    5b78:	f5 df       	rcall	.-22     	; 0x5b64 <midi_CouplerReset>
    5b7a:	8f ef       	ldi	r24, 0xFF	; 255
    5b7c:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5b80:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    5b84:	08 95       	ret

00005b86 <set_Coupler>:
    5b86:	8c 30       	cpi	r24, 0x0C	; 12
    5b88:	e8 f4       	brcc	.+58     	; 0x5bc4 <set_Coupler+0x3e>
    5b8a:	e8 2f       	mov	r30, r24
    5b8c:	f0 e0       	ldi	r31, 0x00	; 0
    5b8e:	ef 5e       	subi	r30, 0xEF	; 239
    5b90:	f7 4f       	sbci	r31, 0xF7	; 247
    5b92:	9f ef       	ldi	r25, 0xFF	; 255
    5b94:	90 83       	st	Z, r25
    5b96:	86 30       	cpi	r24, 0x06	; 6
    5b98:	10 f0       	brcs	.+4      	; 0x5b9e <set_Coupler+0x18>
    5b9a:	86 50       	subi	r24, 0x06	; 6
    5b9c:	01 c0       	rjmp	.+2      	; 0x5ba0 <set_Coupler+0x1a>
    5b9e:	8a 5f       	subi	r24, 0xFA	; 250
    5ba0:	e8 2f       	mov	r30, r24
    5ba2:	f0 e0       	ldi	r31, 0x00	; 0
    5ba4:	df 01       	movw	r26, r30
    5ba6:	af 5e       	subi	r26, 0xEF	; 239
    5ba8:	b7 4f       	sbci	r27, 0xF7	; 247
    5baa:	8c 91       	ld	r24, X
    5bac:	88 23       	and	r24, r24
    5bae:	59 f0       	breq	.+22     	; 0x5bc6 <set_Coupler+0x40>
    5bb0:	df 01       	movw	r26, r30
    5bb2:	af 5e       	subi	r26, 0xEF	; 239
    5bb4:	b7 4f       	sbci	r27, 0xF7	; 247
    5bb6:	1c 92       	st	X, r1
    5bb8:	ee 0f       	add	r30, r30
    5bba:	ff 1f       	adc	r31, r31
    5bbc:	e4 54       	subi	r30, 0x44	; 68
    5bbe:	fd 4e       	sbci	r31, 0xED	; 237
    5bc0:	84 91       	lpm	r24, Z
    5bc2:	08 95       	ret
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
    5bc6:	08 95       	ret

00005bc8 <getAllCouplers>:
    5bc8:	80 e0       	ldi	r24, 0x00	; 0
    5bca:	90 e0       	ldi	r25, 0x00	; 0
    5bcc:	4b e0       	ldi	r20, 0x0B	; 11
    5bce:	01 c0       	rjmp	.+2      	; 0x5bd2 <getAllCouplers+0xa>
    5bd0:	42 2f       	mov	r20, r18
    5bd2:	28 2f       	mov	r18, r24
    5bd4:	39 2f       	mov	r19, r25
    5bd6:	22 0f       	add	r18, r18
    5bd8:	33 1f       	adc	r19, r19
    5bda:	82 2f       	mov	r24, r18
    5bdc:	93 2f       	mov	r25, r19
    5bde:	e4 2f       	mov	r30, r20
    5be0:	f0 e0       	ldi	r31, 0x00	; 0
    5be2:	ef 5e       	subi	r30, 0xEF	; 239
    5be4:	f7 4f       	sbci	r31, 0xF7	; 247
    5be6:	50 81       	ld	r21, Z
    5be8:	5f 3f       	cpi	r21, 0xFF	; 255
    5bea:	09 f4       	brne	.+2      	; 0x5bee <getAllCouplers+0x26>
    5bec:	81 60       	ori	r24, 0x01	; 1
    5bee:	2f ef       	ldi	r18, 0xFF	; 255
    5bf0:	24 0f       	add	r18, r20
    5bf2:	41 11       	cpse	r20, r1
    5bf4:	ed cf       	rjmp	.-38     	; 0x5bd0 <getAllCouplers+0x8>
    5bf6:	08 95       	ret

00005bf8 <setAllCouplers>:
    5bf8:	40 e0       	ldi	r20, 0x00	; 0
    5bfa:	80 ff       	sbrs	r24, 0
    5bfc:	07 c0       	rjmp	.+14     	; 0x5c0c <setAllCouplers+0x14>
    5bfe:	e4 2f       	mov	r30, r20
    5c00:	f0 e0       	ldi	r31, 0x00	; 0
    5c02:	ef 5e       	subi	r30, 0xEF	; 239
    5c04:	f7 4f       	sbci	r31, 0xF7	; 247
    5c06:	2f ef       	ldi	r18, 0xFF	; 255
    5c08:	20 83       	st	Z, r18
    5c0a:	05 c0       	rjmp	.+10     	; 0x5c16 <setAllCouplers+0x1e>
    5c0c:	e4 2f       	mov	r30, r20
    5c0e:	f0 e0       	ldi	r31, 0x00	; 0
    5c10:	ef 5e       	subi	r30, 0xEF	; 239
    5c12:	f7 4f       	sbci	r31, 0xF7	; 247
    5c14:	10 82       	st	Z, r1
    5c16:	28 2f       	mov	r18, r24
    5c18:	39 2f       	mov	r19, r25
    5c1a:	36 95       	lsr	r19
    5c1c:	27 95       	ror	r18
    5c1e:	82 2f       	mov	r24, r18
    5c20:	93 2f       	mov	r25, r19
    5c22:	4f 5f       	subi	r20, 0xFF	; 255
    5c24:	4c 30       	cpi	r20, 0x0C	; 12
    5c26:	48 f3       	brcs	.-46     	; 0x5bfa <setAllCouplers+0x2>
    5c28:	08 95       	ret

00005c2a <midiAllReset>:
    5c2a:	80 e8       	ldi	r24, 0x80	; 128
    5c2c:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    5c30:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <init_Pipe>
    5c34:	08 95       	ret

00005c36 <registers_CalcCount>:
    5c36:	20 e0       	ldi	r18, 0x00	; 0
    5c38:	30 e0       	ldi	r19, 0x00	; 0
    5c3a:	12 c0       	rjmp	.+36     	; 0x5c60 <registers_CalcCount+0x2a>
    5c3c:	82 2f       	mov	r24, r18
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	fc 01       	movw	r30, r24
    5c42:	ee 0f       	add	r30, r30
    5c44:	ff 1f       	adc	r31, r31
    5c46:	8e 0f       	add	r24, r30
    5c48:	9f 1f       	adc	r25, r31
    5c4a:	fc 01       	movw	r30, r24
    5c4c:	e9 50       	subi	r30, 0x09	; 9
    5c4e:	f8 4f       	sbci	r31, 0xF8	; 248
    5c50:	81 81       	ldd	r24, Z+1	; 0x01
    5c52:	8f 3f       	cpi	r24, 0xFF	; 255
    5c54:	21 f0       	breq	.+8      	; 0x5c5e <registers_CalcCount+0x28>
    5c56:	83 17       	cp	r24, r19
    5c58:	10 f0       	brcs	.+4      	; 0x5c5e <registers_CalcCount+0x28>
    5c5a:	31 e0       	ldi	r19, 0x01	; 1
    5c5c:	38 0f       	add	r19, r24
    5c5e:	2f 5f       	subi	r18, 0xFF	; 255
    5c60:	28 30       	cpi	r18, 0x08	; 8
    5c62:	60 f3       	brcs	.-40     	; 0x5c3c <registers_CalcCount+0x6>
    5c64:	30 93 10 08 	sts	0x0810, r19	; 0x800810 <registerCount>
    5c68:	08 95       	ret

00005c6a <init_Registers>:
    5c6a:	8f ef       	ldi	r24, 0xFF	; 255
    5c6c:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	0e c0       	rjmp	.+28     	; 0x5c90 <init_Registers+0x26>
    5c74:	82 2f       	mov	r24, r18
    5c76:	90 e0       	ldi	r25, 0x00	; 0
    5c78:	fc 01       	movw	r30, r24
    5c7a:	ee 0f       	add	r30, r30
    5c7c:	ff 1f       	adc	r31, r31
    5c7e:	e8 0f       	add	r30, r24
    5c80:	f9 1f       	adc	r31, r25
    5c82:	e9 50       	subi	r30, 0x09	; 9
    5c84:	f8 4f       	sbci	r31, 0xF8	; 248
    5c86:	8f ef       	ldi	r24, 0xFF	; 255
    5c88:	80 83       	st	Z, r24
    5c8a:	81 83       	std	Z+1, r24	; 0x01
    5c8c:	12 82       	std	Z+2, r1	; 0x02
    5c8e:	2f 5f       	subi	r18, 0xFF	; 255
    5c90:	28 30       	cpi	r18, 0x08	; 8
    5c92:	80 f3       	brcs	.-32     	; 0x5c74 <init_Registers+0xa>
    5c94:	0e 94 76 0b 	call	0x16ec	; 0x16ec <eeprom_ReadReg>
    5c98:	8f 3f       	cpi	r24, 0xFF	; 255
    5c9a:	49 f4       	brne	.+18     	; 0x5cae <init_Registers+0x44>
    5c9c:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <registerCount>
    5ca0:	40 e0       	ldi	r20, 0x00	; 0
    5ca2:	50 e0       	ldi	r21, 0x00	; 0
    5ca4:	65 e0       	ldi	r22, 0x05	; 5
    5ca6:	81 e0       	ldi	r24, 0x01	; 1
    5ca8:	0e 94 5f 15 	call	0x2abe	; 0x2abe <log_putError>
    5cac:	01 c0       	rjmp	.+2      	; 0x5cb0 <init_Registers+0x46>
    5cae:	c3 df       	rcall	.-122    	; 0x5c36 <registers_CalcCount>
    5cb0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <eeprom_ReadProg>
    5cb4:	8f 3f       	cpi	r24, 0xFF	; 255
    5cb6:	a1 f5       	brne	.+104    	; 0x5d20 <init_Registers+0xb6>
    5cb8:	2a c0       	rjmp	.+84     	; 0x5d0e <init_Registers+0xa4>
    5cba:	83 2f       	mov	r24, r19
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	fc 01       	movw	r30, r24
    5cc0:	ee 0f       	add	r30, r30
    5cc2:	ff 1f       	adc	r31, r31
    5cc4:	88 0f       	add	r24, r24
    5cc6:	99 1f       	adc	r25, r25
    5cc8:	88 0f       	add	r24, r24
    5cca:	99 1f       	adc	r25, r25
    5ccc:	88 0f       	add	r24, r24
    5cce:	99 1f       	adc	r25, r25
    5cd0:	e8 0f       	add	r30, r24
    5cd2:	f9 1f       	adc	r31, r25
    5cd4:	ec 59       	subi	r30, 0x9C	; 156
    5cd6:	f6 4f       	sbci	r31, 0xF6	; 246
    5cd8:	e2 0f       	add	r30, r18
    5cda:	f1 1d       	adc	r31, r1
    5cdc:	10 82       	st	Z, r1
    5cde:	2f 5f       	subi	r18, 0xFF	; 255
    5ce0:	01 c0       	rjmp	.+2      	; 0x5ce4 <init_Registers+0x7a>
    5ce2:	20 e0       	ldi	r18, 0x00	; 0
    5ce4:	28 30       	cpi	r18, 0x08	; 8
    5ce6:	48 f3       	brcs	.-46     	; 0x5cba <init_Registers+0x50>
    5ce8:	83 2f       	mov	r24, r19
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	fc 01       	movw	r30, r24
    5cee:	ee 0f       	add	r30, r30
    5cf0:	ff 1f       	adc	r31, r31
    5cf2:	88 0f       	add	r24, r24
    5cf4:	99 1f       	adc	r25, r25
    5cf6:	88 0f       	add	r24, r24
    5cf8:	99 1f       	adc	r25, r25
    5cfa:	88 0f       	add	r24, r24
    5cfc:	99 1f       	adc	r25, r25
    5cfe:	e8 0f       	add	r30, r24
    5d00:	f9 1f       	adc	r31, r25
    5d02:	ec 59       	subi	r30, 0x9C	; 156
    5d04:	f6 4f       	sbci	r31, 0xF6	; 246
    5d06:	11 86       	std	Z+9, r1	; 0x09
    5d08:	10 86       	std	Z+8, r1	; 0x08
    5d0a:	3f 5f       	subi	r19, 0xFF	; 255
    5d0c:	01 c0       	rjmp	.+2      	; 0x5d10 <init_Registers+0xa6>
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	30 34       	cpi	r19, 0x40	; 64
    5d12:	38 f3       	brcs	.-50     	; 0x5ce2 <init_Registers+0x78>
    5d14:	40 e0       	ldi	r20, 0x00	; 0
    5d16:	50 e0       	ldi	r21, 0x00	; 0
    5d18:	66 e0       	ldi	r22, 0x06	; 6
    5d1a:	81 e0       	ldi	r24, 0x01	; 1
    5d1c:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <log_putError>
    5d20:	08 95       	ret

00005d22 <regNr_to_moduleBit>:
    5d22:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5d26:	89 17       	cp	r24, r25
    5d28:	a0 f4       	brcc	.+40     	; 0x5d52 <regNr_to_moduleBit+0x30>
    5d2a:	80 34       	cpi	r24, 0x40	; 64
    5d2c:	90 f4       	brcc	.+36     	; 0x5d52 <regNr_to_moduleBit+0x30>
    5d2e:	28 e0       	ldi	r18, 0x08	; 8
    5d30:	e7 ef       	ldi	r30, 0xF7	; 247
    5d32:	f7 e0       	ldi	r31, 0x07	; 7
    5d34:	30 81       	ld	r19, Z
    5d36:	83 17       	cp	r24, r19
    5d38:	48 f0       	brcs	.+18     	; 0x5d4c <regNr_to_moduleBit+0x2a>
    5d3a:	91 81       	ldd	r25, Z+1	; 0x01
    5d3c:	98 17       	cp	r25, r24
    5d3e:	30 f0       	brcs	.+12     	; 0x5d4c <regNr_to_moduleBit+0x2a>
    5d40:	22 81       	ldd	r18, Z+2	; 0x02
    5d42:	98 2f       	mov	r25, r24
    5d44:	93 1b       	sub	r25, r19
    5d46:	80 e0       	ldi	r24, 0x00	; 0
    5d48:	92 0f       	add	r25, r18
    5d4a:	08 95       	ret
    5d4c:	33 96       	adiw	r30, 0x03	; 3
    5d4e:	21 50       	subi	r18, 0x01	; 1
    5d50:	89 f7       	brne	.-30     	; 0x5d34 <regNr_to_moduleBit+0x12>
    5d52:	8f ef       	ldi	r24, 0xFF	; 255
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	08 95       	ret

00005d58 <moduleBit_to_registerNr>:
    5d58:	90 e0       	ldi	r25, 0x00	; 0
    5d5a:	16 c0       	rjmp	.+44     	; 0x5d88 <moduleBit_to_registerNr+0x30>
    5d5c:	40 91 f9 07 	lds	r20, 0x07F9	; 0x8007f9 <registerMap+0x2>
    5d60:	84 17       	cp	r24, r20
    5d62:	88 f0       	brcs	.+34     	; 0x5d86 <moduleBit_to_registerNr+0x2e>
    5d64:	68 2f       	mov	r22, r24
    5d66:	70 e0       	ldi	r23, 0x00	; 0
    5d68:	e7 ef       	ldi	r30, 0xF7	; 247
    5d6a:	f7 e0       	ldi	r31, 0x07	; 7
    5d6c:	21 81       	ldd	r18, Z+1	; 0x01
    5d6e:	30 e0       	ldi	r19, 0x00	; 0
    5d70:	24 0f       	add	r18, r20
    5d72:	31 1d       	adc	r19, r1
    5d74:	50 81       	ld	r21, Z
    5d76:	25 1b       	sub	r18, r21
    5d78:	31 09       	sbc	r19, r1
    5d7a:	26 17       	cp	r18, r22
    5d7c:	37 07       	cpc	r19, r23
    5d7e:	1c f0       	brlt	.+6      	; 0x5d86 <moduleBit_to_registerNr+0x2e>
    5d80:	84 1b       	sub	r24, r20
    5d82:	85 0f       	add	r24, r21
    5d84:	08 95       	ret
    5d86:	9f 5f       	subi	r25, 0xFF	; 255
    5d88:	98 30       	cpi	r25, 0x08	; 8
    5d8a:	40 f3       	brcs	.-48     	; 0x5d5c <moduleBit_to_registerNr+0x4>
    5d8c:	8f ef       	ldi	r24, 0xFF	; 255
    5d8e:	08 95       	ret

00005d90 <read_Register>:
    5d90:	cf 93       	push	r28
    5d92:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5d96:	89 17       	cp	r24, r25
    5d98:	08 f0       	brcs	.+2      	; 0x5d9c <read_Register+0xc>
    5d9a:	3f c0       	rjmp	.+126    	; 0x5e1a <read_Register+0x8a>
    5d9c:	c6 2f       	mov	r28, r22
    5d9e:	c1 df       	rcall	.-126    	; 0x5d22 <regNr_to_moduleBit>
    5da0:	81 11       	cpse	r24, r1
    5da2:	33 c0       	rjmp	.+102    	; 0x5e0a <read_Register+0x7a>
    5da4:	29 2f       	mov	r18, r25
    5da6:	2f 71       	andi	r18, 0x1F	; 31
    5da8:	92 95       	swap	r25
    5daa:	96 95       	lsr	r25
    5dac:	97 70       	andi	r25, 0x07	; 7
    5dae:	41 e0       	ldi	r20, 0x01	; 1
    5db0:	50 e0       	ldi	r21, 0x00	; 0
    5db2:	02 c0       	rjmp	.+4      	; 0x5db8 <read_Register+0x28>
    5db4:	44 0f       	add	r20, r20
    5db6:	55 1f       	adc	r21, r21
    5db8:	9a 95       	dec	r25
    5dba:	e2 f7       	brpl	.-8      	; 0x5db4 <read_Register+0x24>
    5dbc:	30 e0       	ldi	r19, 0x00	; 0
    5dbe:	f9 01       	movw	r30, r18
    5dc0:	ee 0f       	add	r30, r30
    5dc2:	ff 1f       	adc	r31, r31
    5dc4:	ee 0f       	add	r30, r30
    5dc6:	ff 1f       	adc	r31, r31
    5dc8:	ee 0f       	add	r30, r30
    5dca:	ff 1f       	adc	r31, r31
    5dcc:	e7 5b       	subi	r30, 0xB7	; 183
    5dce:	fd 4f       	sbci	r31, 0xFD	; 253
    5dd0:	91 81       	ldd	r25, Z+1	; 0x01
    5dd2:	94 23       	and	r25, r20
    5dd4:	11 f4       	brne	.+4      	; 0x5dda <read_Register+0x4a>
    5dd6:	c1 fd       	sbrc	r28, 1
    5dd8:	1a c0       	rjmp	.+52     	; 0x5e0e <read_Register+0x7e>
    5dda:	22 0f       	add	r18, r18
    5ddc:	33 1f       	adc	r19, r19
    5dde:	22 0f       	add	r18, r18
    5de0:	33 1f       	adc	r19, r19
    5de2:	22 0f       	add	r18, r18
    5de4:	33 1f       	adc	r19, r19
    5de6:	f9 01       	movw	r30, r18
    5de8:	e7 5b       	subi	r30, 0xB7	; 183
    5dea:	fd 4f       	sbci	r31, 0xFD	; 253
    5dec:	36 81       	ldd	r19, Z+6	; 0x06
    5dee:	20 91 55 03 	lds	r18, 0x0355	; 0x800355 <pipe_Module>
    5df2:	43 23       	and	r20, r19
    5df4:	42 23       	and	r20, r18
    5df6:	11 f0       	breq	.+4      	; 0x5dfc <read_Register+0x6c>
    5df8:	c0 fd       	sbrc	r28, 0
    5dfa:	0b c0       	rjmp	.+22     	; 0x5e12 <read_Register+0x82>
    5dfc:	99 23       	and	r25, r25
    5dfe:	71 f0       	breq	.+28     	; 0x5e1c <read_Register+0x8c>
    5e00:	44 23       	and	r20, r20
    5e02:	61 f0       	breq	.+24     	; 0x5e1c <read_Register+0x8c>
    5e04:	c4 30       	cpi	r28, 0x04	; 4
    5e06:	51 f4       	brne	.+20     	; 0x5e1c <read_Register+0x8c>
    5e08:	06 c0       	rjmp	.+12     	; 0x5e16 <read_Register+0x86>
    5e0a:	80 e0       	ldi	r24, 0x00	; 0
    5e0c:	07 c0       	rjmp	.+14     	; 0x5e1c <read_Register+0x8c>
    5e0e:	81 e0       	ldi	r24, 0x01	; 1
    5e10:	05 c0       	rjmp	.+10     	; 0x5e1c <read_Register+0x8c>
    5e12:	81 e0       	ldi	r24, 0x01	; 1
    5e14:	03 c0       	rjmp	.+6      	; 0x5e1c <read_Register+0x8c>
    5e16:	81 e0       	ldi	r24, 0x01	; 1
    5e18:	01 c0       	rjmp	.+2      	; 0x5e1c <read_Register+0x8c>
    5e1a:	80 e0       	ldi	r24, 0x00	; 0
    5e1c:	cf 91       	pop	r28
    5e1e:	08 95       	ret

00005e20 <get_RegisterStatus>:
    5e20:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5e24:	89 17       	cp	r24, r25
    5e26:	98 f5       	brcc	.+102    	; 0x5e8e <get_RegisterStatus+0x6e>
    5e28:	7c df       	rcall	.-264    	; 0x5d22 <regNr_to_moduleBit>
    5e2a:	81 11       	cpse	r24, r1
    5e2c:	2c c0       	rjmp	.+88     	; 0x5e86 <get_RegisterStatus+0x66>
    5e2e:	29 2f       	mov	r18, r25
    5e30:	2f 71       	andi	r18, 0x1F	; 31
    5e32:	92 95       	swap	r25
    5e34:	96 95       	lsr	r25
    5e36:	97 70       	andi	r25, 0x07	; 7
    5e38:	41 e0       	ldi	r20, 0x01	; 1
    5e3a:	50 e0       	ldi	r21, 0x00	; 0
    5e3c:	ba 01       	movw	r22, r20
    5e3e:	02 c0       	rjmp	.+4      	; 0x5e44 <get_RegisterStatus+0x24>
    5e40:	66 0f       	add	r22, r22
    5e42:	77 1f       	adc	r23, r23
    5e44:	9a 95       	dec	r25
    5e46:	e2 f7       	brpl	.-8      	; 0x5e40 <get_RegisterStatus+0x20>
    5e48:	cb 01       	movw	r24, r22
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	f9 01       	movw	r30, r18
    5e4e:	ee 0f       	add	r30, r30
    5e50:	ff 1f       	adc	r31, r31
    5e52:	ee 0f       	add	r30, r30
    5e54:	ff 1f       	adc	r31, r31
    5e56:	ee 0f       	add	r30, r30
    5e58:	ff 1f       	adc	r31, r31
    5e5a:	e7 5b       	subi	r30, 0xB7	; 183
    5e5c:	fd 4f       	sbci	r31, 0xFD	; 253
    5e5e:	41 81       	ldd	r20, Z+1	; 0x01
    5e60:	46 23       	and	r20, r22
    5e62:	99 f0       	breq	.+38     	; 0x5e8a <get_RegisterStatus+0x6a>
    5e64:	22 0f       	add	r18, r18
    5e66:	33 1f       	adc	r19, r19
    5e68:	22 0f       	add	r18, r18
    5e6a:	33 1f       	adc	r19, r19
    5e6c:	22 0f       	add	r18, r18
    5e6e:	33 1f       	adc	r19, r19
    5e70:	f9 01       	movw	r30, r18
    5e72:	e7 5b       	subi	r30, 0xB7	; 183
    5e74:	fd 4f       	sbci	r31, 0xFD	; 253
    5e76:	26 81       	ldd	r18, Z+6	; 0x06
    5e78:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    5e7c:	82 23       	and	r24, r18
    5e7e:	89 23       	and	r24, r25
    5e80:	39 f0       	breq	.+14     	; 0x5e90 <get_RegisterStatus+0x70>
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	08 95       	ret
    5e86:	80 e0       	ldi	r24, 0x00	; 0
    5e88:	08 95       	ret
    5e8a:	82 e0       	ldi	r24, 0x02	; 2
    5e8c:	08 95       	ret
    5e8e:	80 e0       	ldi	r24, 0x00	; 0
    5e90:	08 95       	ret

00005e92 <count_Registers>:
    5e92:	1f 93       	push	r17
    5e94:	cf 93       	push	r28
    5e96:	df 93       	push	r29
    5e98:	18 2f       	mov	r17, r24
    5e9a:	c0 e0       	ldi	r28, 0x00	; 0
    5e9c:	d0 e0       	ldi	r29, 0x00	; 0
    5e9e:	06 c0       	rjmp	.+12     	; 0x5eac <count_Registers+0x1a>
    5ea0:	61 2f       	mov	r22, r17
    5ea2:	8c 2f       	mov	r24, r28
    5ea4:	75 df       	rcall	.-278    	; 0x5d90 <read_Register>
    5ea6:	81 11       	cpse	r24, r1
    5ea8:	df 5f       	subi	r29, 0xFF	; 255
    5eaa:	cf 5f       	subi	r28, 0xFF	; 255
    5eac:	c0 34       	cpi	r28, 0x40	; 64
    5eae:	c0 f3       	brcs	.-16     	; 0x5ea0 <count_Registers+0xe>
    5eb0:	8d 2f       	mov	r24, r29
    5eb2:	df 91       	pop	r29
    5eb4:	cf 91       	pop	r28
    5eb6:	1f 91       	pop	r17
    5eb8:	08 95       	ret

00005eba <read_allRegister>:
    5eba:	ef 92       	push	r14
    5ebc:	ff 92       	push	r15
    5ebe:	0f 93       	push	r16
    5ec0:	1f 93       	push	r17
    5ec2:	cf 93       	push	r28
    5ec4:	df 93       	push	r29
    5ec6:	7c 01       	movw	r14, r24
    5ec8:	c0 e0       	ldi	r28, 0x00	; 0
    5eca:	d0 e0       	ldi	r29, 0x00	; 0
    5ecc:	00 e0       	ldi	r16, 0x00	; 0
    5ece:	17 c0       	rjmp	.+46     	; 0x5efe <read_allRegister+0x44>
    5ed0:	1c 2f       	mov	r17, r28
    5ed2:	17 70       	andi	r17, 0x07	; 7
    5ed4:	09 f4       	brne	.+2      	; 0x5ed8 <read_allRegister+0x1e>
    5ed6:	d0 e0       	ldi	r29, 0x00	; 0
    5ed8:	d6 95       	lsr	r29
    5eda:	63 e0       	ldi	r22, 0x03	; 3
    5edc:	8c 2f       	mov	r24, r28
    5ede:	58 df       	rcall	.-336    	; 0x5d90 <read_Register>
    5ee0:	88 23       	and	r24, r24
    5ee2:	11 f0       	breq	.+4      	; 0x5ee8 <read_allRegister+0x2e>
    5ee4:	d0 68       	ori	r29, 0x80	; 128
    5ee6:	0f 5f       	subi	r16, 0xFF	; 255
    5ee8:	17 30       	cpi	r17, 0x07	; 7
    5eea:	41 f4       	brne	.+16     	; 0x5efc <read_allRegister+0x42>
    5eec:	e1 14       	cp	r14, r1
    5eee:	f1 04       	cpc	r15, r1
    5ef0:	29 f0       	breq	.+10     	; 0x5efc <read_allRegister+0x42>
    5ef2:	f7 01       	movw	r30, r14
    5ef4:	d0 83       	st	Z, r29
    5ef6:	c7 01       	movw	r24, r14
    5ef8:	01 96       	adiw	r24, 0x01	; 1
    5efa:	7c 01       	movw	r14, r24
    5efc:	cf 5f       	subi	r28, 0xFF	; 255
    5efe:	c0 34       	cpi	r28, 0x40	; 64
    5f00:	38 f3       	brcs	.-50     	; 0x5ed0 <read_allRegister+0x16>
    5f02:	80 2f       	mov	r24, r16
    5f04:	df 91       	pop	r29
    5f06:	cf 91       	pop	r28
    5f08:	1f 91       	pop	r17
    5f0a:	0f 91       	pop	r16
    5f0c:	ff 90       	pop	r15
    5f0e:	ef 90       	pop	r14
    5f10:	08 95       	ret

00005f12 <register_onOff>:
    5f12:	cf 93       	push	r28
    5f14:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5f18:	89 17       	cp	r24, r25
    5f1a:	f0 f4       	brcc	.+60     	; 0x5f58 <register_onOff+0x46>
    5f1c:	c6 2f       	mov	r28, r22
    5f1e:	01 df       	rcall	.-510    	; 0x5d22 <regNr_to_moduleBit>
    5f20:	81 11       	cpse	r24, r1
    5f22:	1a c0       	rjmp	.+52     	; 0x5f58 <register_onOff+0x46>
    5f24:	89 2f       	mov	r24, r25
    5f26:	8f 71       	andi	r24, 0x1F	; 31
    5f28:	92 95       	swap	r25
    5f2a:	96 95       	lsr	r25
    5f2c:	97 70       	andi	r25, 0x07	; 7
    5f2e:	c0 ff       	sbrs	r28, 0
    5f30:	0a c0       	rjmp	.+20     	; 0x5f46 <register_onOff+0x34>
    5f32:	61 e0       	ldi	r22, 0x01	; 1
    5f34:	70 e0       	ldi	r23, 0x00	; 0
    5f36:	02 c0       	rjmp	.+4      	; 0x5f3c <register_onOff+0x2a>
    5f38:	66 0f       	add	r22, r22
    5f3a:	77 1f       	adc	r23, r23
    5f3c:	9a 95       	dec	r25
    5f3e:	e2 f7       	brpl	.-8      	; 0x5f38 <register_onOff+0x26>
    5f40:	0e 94 0f 12 	call	0x241e	; 0x241e <pipe_on>
    5f44:	09 c0       	rjmp	.+18     	; 0x5f58 <register_onOff+0x46>
    5f46:	61 e0       	ldi	r22, 0x01	; 1
    5f48:	70 e0       	ldi	r23, 0x00	; 0
    5f4a:	02 c0       	rjmp	.+4      	; 0x5f50 <register_onOff+0x3e>
    5f4c:	66 0f       	add	r22, r22
    5f4e:	77 1f       	adc	r23, r23
    5f50:	9a 95       	dec	r25
    5f52:	e2 f7       	brpl	.-8      	; 0x5f4c <register_onOff+0x3a>
    5f54:	0e 94 1e 12 	call	0x243c	; 0x243c <pipe_off>
    5f58:	cf 91       	pop	r28
    5f5a:	08 95       	ret

00005f5c <register_toProgram>:
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5f5c:	0f 93       	push	r16
    5f5e:	1f 93       	push	r17
    5f60:	cf 93       	push	r28
    5f62:	df 93       	push	r29
    5f64:	c8 2f       	mov	r28, r24
    5f66:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5f68:	80 34       	cpi	r24, 0x40	; 64
    5f6a:	90 f4       	brcc	.+36     	; 0x5f90 <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5f6c:	28 2f       	mov	r18, r24
    5f6e:	30 e0       	ldi	r19, 0x00	; 0
    5f70:	c9 01       	movw	r24, r18
    5f72:	88 0f       	add	r24, r24
    5f74:	99 1f       	adc	r25, r25
    5f76:	22 0f       	add	r18, r18
    5f78:	33 1f       	adc	r19, r19
    5f7a:	22 0f       	add	r18, r18
    5f7c:	33 1f       	adc	r19, r19
    5f7e:	22 0f       	add	r18, r18
    5f80:	33 1f       	adc	r19, r19
    5f82:	82 0f       	add	r24, r18
    5f84:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5f86:	8c 59       	subi	r24, 0x9C	; 156
    5f88:	96 4f       	sbci	r25, 0xF6	; 246
    5f8a:	97 df       	rcall	.-210    	; 0x5eba <read_allRegister>
    5f8c:	18 2f       	mov	r17, r24
    5f8e:	01 c0       	rjmp	.+2      	; 0x5f92 <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5f90:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5f92:	d0 e0       	ldi	r29, 0x00	; 0
    5f94:	19 de       	rcall	.-974    	; 0x5bc8 <getAllCouplers>
    5f96:	9e 01       	movw	r18, r28
    5f98:	22 0f       	add	r18, r18
    5f9a:	33 1f       	adc	r19, r19
    5f9c:	cc 0f       	add	r28, r28
    5f9e:	dd 1f       	adc	r29, r29
    5fa0:	cc 0f       	add	r28, r28
    5fa2:	dd 1f       	adc	r29, r29
    5fa4:	cc 0f       	add	r28, r28
    5fa6:	dd 1f       	adc	r29, r29
    5fa8:	c2 0f       	add	r28, r18
    5faa:	d3 1f       	adc	r29, r19
    5fac:	cc 59       	subi	r28, 0x9C	; 156
    5fae:	d6 4f       	sbci	r29, 0xF6	; 246
    5fb0:	99 87       	std	Y+9, r25	; 0x09
    5fb2:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5fb4:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5fb6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <eeprom_UpdateProg>
	}
	return result;
}
    5fba:	81 2f       	mov	r24, r17
    5fbc:	df 91       	pop	r29
    5fbe:	cf 91       	pop	r28
    5fc0:	1f 91       	pop	r17
    5fc2:	0f 91       	pop	r16
    5fc4:	08 95       	ret

00005fc6 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5fc6:	ff 92       	push	r15
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	8c 01       	movw	r16, r24
    5fd4:	00 0f       	add	r16, r16
    5fd6:	11 1f       	adc	r17, r17
    5fd8:	88 0f       	add	r24, r24
    5fda:	99 1f       	adc	r25, r25
    5fdc:	88 0f       	add	r24, r24
    5fde:	99 1f       	adc	r25, r25
    5fe0:	88 0f       	add	r24, r24
    5fe2:	99 1f       	adc	r25, r25
    5fe4:	08 0f       	add	r16, r24
    5fe6:	19 1f       	adc	r17, r25
    5fe8:	0c 59       	subi	r16, 0x9C	; 156
    5fea:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5fec:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5fee:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5ff0:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5ff2:	15 c0       	rjmp	.+42     	; 0x601e <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5ff4:	9c 2f       	mov	r25, r28
    5ff6:	97 70       	andi	r25, 0x07	; 7
    5ff8:	21 f4       	brne	.+8      	; 0x6002 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5ffa:	f8 01       	movw	r30, r16
    5ffc:	d0 81       	ld	r29, Z
    5ffe:	0f 5f       	subi	r16, 0xFF	; 255
    6000:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    6002:	8c 2f       	mov	r24, r28
    6004:	0d df       	rcall	.-486    	; 0x5e20 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    6006:	d0 ff       	sbrs	r29, 0
    6008:	03 c0       	rjmp	.+6      	; 0x6010 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    600a:	82 30       	cpi	r24, 0x02	; 2
    600c:	31 f0       	breq	.+12     	; 0x601a <midi_RegisterMatchProgram+0x54>
    600e:	0d c0       	rjmp	.+26     	; 0x602a <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    6010:	82 30       	cpi	r24, 0x02	; 2
    6012:	69 f0       	breq	.+26     	; 0x602e <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    6014:	81 30       	cpi	r24, 0x01	; 1
    6016:	09 f4       	brne	.+2      	; 0x601a <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    6018:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    601a:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    601c:	cf 5f       	subi	r28, 0xFF	; 255
    601e:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    6022:	c9 17       	cp	r28, r25
    6024:	38 f3       	brcs	.-50     	; 0x5ff4 <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    6026:	8f 2d       	mov	r24, r15
    6028:	03 c0       	rjmp	.+6      	; 0x6030 <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    602a:	8f ef       	ldi	r24, 0xFF	; 255
    602c:	01 c0       	rjmp	.+2      	; 0x6030 <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    602e:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    6030:	df 91       	pop	r29
    6032:	cf 91       	pop	r28
    6034:	1f 91       	pop	r17
    6036:	0f 91       	pop	r16
    6038:	ff 90       	pop	r15
    603a:	08 95       	ret

0000603c <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    603c:	90 e0       	ldi	r25, 0x00	; 0
    603e:	fc 01       	movw	r30, r24
    6040:	ee 0f       	add	r30, r30
    6042:	ff 1f       	adc	r31, r31
    6044:	88 0f       	add	r24, r24
    6046:	99 1f       	adc	r25, r25
    6048:	88 0f       	add	r24, r24
    604a:	99 1f       	adc	r25, r25
    604c:	88 0f       	add	r24, r24
    604e:	99 1f       	adc	r25, r25
    6050:	e8 0f       	add	r30, r24
    6052:	f9 1f       	adc	r31, r25
    6054:	ec 59       	subi	r30, 0x9C	; 156
    6056:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6058:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    605a:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    605c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    605e:	09 c0       	rjmp	.+18     	; 0x6072 <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    6060:	39 2f       	mov	r19, r25
    6062:	37 70       	andi	r19, 0x07	; 7
    6064:	11 f4       	brne	.+4      	; 0x606a <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    6066:	20 81       	ld	r18, Z
    6068:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    606a:	20 fd       	sbrc	r18, 0
			result++;
    606c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    606e:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    6070:	9f 5f       	subi	r25, 0xFF	; 255
    6072:	30 91 10 08 	lds	r19, 0x0810	; 0x800810 <registerCount>
    6076:	93 17       	cp	r25, r19
    6078:	98 f3       	brcs	.-26     	; 0x6060 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    607a:	08 95       	ret

0000607c <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    607c:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <prog_Display>
    6080:	98 17       	cp	r25, r24
    6082:	29 f0       	breq	.+10     	; 0x608e <prog_set+0x12>
		prog_Display = prog;
    6084:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
		prog_UpdDisplay = TRUE;
    6088:	8f ef       	ldi	r24, 0xFF	; 255
    608a:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    608e:	08 95       	ret

00006090 <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    6090:	bf 92       	push	r11
    6092:	cf 92       	push	r12
    6094:	df 92       	push	r13
    6096:	ef 92       	push	r14
    6098:	ff 92       	push	r15
    609a:	0f 93       	push	r16
    609c:	1f 93       	push	r17
    609e:	cf 93       	push	r28
    60a0:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    60a2:	80 34       	cpi	r24, 0x40	; 64
    60a4:	08 f0       	brcs	.+2      	; 0x60a8 <program_toRegister+0x18>
    60a6:	41 c0       	rjmp	.+130    	; 0x612a <program_toRegister+0x9a>
    60a8:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    60aa:	e8 df       	rcall	.-48     	; 0x607c <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    60ac:	f1 2c       	mov	r15, r1
    60ae:	f7 01       	movw	r30, r14
    60b0:	ee 0f       	add	r30, r30
    60b2:	ff 1f       	adc	r31, r31
    60b4:	c7 01       	movw	r24, r14
    60b6:	88 0f       	add	r24, r24
    60b8:	99 1f       	adc	r25, r25
    60ba:	88 0f       	add	r24, r24
    60bc:	99 1f       	adc	r25, r25
    60be:	88 0f       	add	r24, r24
    60c0:	99 1f       	adc	r25, r25
    60c2:	e8 0f       	add	r30, r24
    60c4:	f9 1f       	adc	r31, r25
    60c6:	ec 59       	subi	r30, 0x9C	; 156
    60c8:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    60ca:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    60cc:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    60ce:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    60d0:	18 c0       	rjmp	.+48     	; 0x6102 <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    60d2:	6f 01       	movw	r12, r30
    60d4:	8f ef       	ldi	r24, 0xFF	; 255
    60d6:	c8 1a       	sub	r12, r24
    60d8:	d8 0a       	sbc	r13, r24
    60da:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    60dc:	d0 e0       	ldi	r29, 0x00	; 0
    60de:	0d c0       	rjmp	.+26     	; 0x60fa <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    60e0:	8c 2f       	mov	r24, r28
    60e2:	81 70       	andi	r24, 0x01	; 1
    60e4:	c0 fd       	sbrc	r28, 0
					result++;
    60e6:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    60e8:	61 e0       	ldi	r22, 0x01	; 1
    60ea:	81 11       	cpse	r24, r1
    60ec:	01 c0       	rjmp	.+2      	; 0x60f0 <program_toRegister+0x60>
    60ee:	60 e0       	ldi	r22, 0x00	; 0
    60f0:	81 2f       	mov	r24, r17
    60f2:	0f df       	rcall	.-482    	; 0x5f12 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    60f4:	c6 95       	lsr	r28
				regNr++;
    60f6:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    60f8:	df 5f       	subi	r29, 0xFF	; 255
    60fa:	d8 30       	cpi	r29, 0x08	; 8
    60fc:	88 f3       	brcs	.-30     	; 0x60e0 <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    60fe:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    6100:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6102:	87 e0       	ldi	r24, 0x07	; 7
    6104:	8b 15       	cp	r24, r11
    6106:	28 f7       	brcc	.-54     	; 0x60d2 <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    6108:	f7 01       	movw	r30, r14
    610a:	ee 0f       	add	r30, r30
    610c:	ff 1f       	adc	r31, r31
    610e:	ee 0c       	add	r14, r14
    6110:	ff 1c       	adc	r15, r15
    6112:	ee 0c       	add	r14, r14
    6114:	ff 1c       	adc	r15, r15
    6116:	ee 0c       	add	r14, r14
    6118:	ff 1c       	adc	r15, r15
    611a:	ee 0d       	add	r30, r14
    611c:	ff 1d       	adc	r31, r15
    611e:	ec 59       	subi	r30, 0x9C	; 156
    6120:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    6122:	80 85       	ldd	r24, Z+8	; 0x08
    6124:	91 85       	ldd	r25, Z+9	; 0x09
    6126:	68 dd       	rcall	.-1328   	; 0x5bf8 <setAllCouplers>
    6128:	01 c0       	rjmp	.+2      	; 0x612c <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    612a:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    612c:	80 2f       	mov	r24, r16
    612e:	df 91       	pop	r29
    6130:	cf 91       	pop	r28
    6132:	1f 91       	pop	r17
    6134:	0f 91       	pop	r16
    6136:	ff 90       	pop	r15
    6138:	ef 90       	pop	r14
    613a:	df 90       	pop	r13
    613c:	cf 90       	pop	r12
    613e:	bf 90       	pop	r11
    6140:	08 95       	ret

00006142 <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    6142:	cf 93       	push	r28
    6144:	c6 2f       	mov	r28, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6146:	90 91 32 09 	lds	r25, 0x0932	; 0x800932 <midi_Setting+0x2>
    614a:	91 11       	cpse	r25, r1
    614c:	14 c0       	rjmp	.+40     	; 0x6176 <midi_ProgramChange+0x34>
    614e:	21 c0       	rjmp	.+66     	; 0x6192 <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    6150:	e8 2f       	mov	r30, r24
    6152:	f0 e0       	ldi	r31, 0x00	; 0
    6154:	ee 0f       	add	r30, r30
    6156:	ff 1f       	adc	r31, r31
    6158:	ee 0f       	add	r30, r30
    615a:	ff 1f       	adc	r31, r31
    615c:	e9 0f       	add	r30, r25
    615e:	f1 1d       	adc	r31, r1
    6160:	ee 0f       	add	r30, r30
    6162:	ff 1f       	adc	r31, r31
    6164:	ee 0f       	add	r30, r30
    6166:	ff 1f       	adc	r31, r31
    6168:	e8 5d       	subi	r30, 0xD8	; 216
    616a:	f7 4f       	sbci	r31, 0xF7	; 247
    616c:	20 81       	ld	r18, Z
    616e:	2f 3f       	cpi	r18, 0xFF	; 255
    6170:	39 f4       	brne	.+14     	; 0x6180 <midi_ProgramChange+0x3e>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    6172:	9f 5f       	subi	r25, 0xFF	; 255
    6174:	01 c0       	rjmp	.+2      	; 0x6178 <midi_ProgramChange+0x36>
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	94 30       	cpi	r25, 0x04	; 4
    617a:	50 f3       	brcs	.-44     	; 0x6150 <midi_ProgramChange+0xe>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    617c:	80 e0       	ldi	r24, 0x00	; 0
    617e:	01 c0       	rjmp	.+2      	; 0x6182 <midi_ProgramChange+0x40>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    6180:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    6182:	8f 3f       	cpi	r24, 0xFF	; 255
    6184:	31 f4       	brne	.+12     	; 0x6192 <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    6186:	8c 2f       	mov	r24, r28
    6188:	83 df       	rcall	.-250    	; 0x6090 <program_toRegister>
			prog_set(program);
    618a:	8c 2f       	mov	r24, r28
    618c:	77 df       	rcall	.-274    	; 0x607c <prog_set>
			midiLastProgram = program;
    618e:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	//if (channel == midiThrough.InChannel){
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6192:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    6196:	8f 3f       	cpi	r24, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    6198:	21 f0       	breq	.+8      	; 0x61a2 <midi_ProgramChange+0x60>
    619a:	80 6c       	ori	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    619c:	bd d6       	rcall	.+3450   	; 0x6f18 <serial1MIDISend>
    619e:	8c 2f       	mov	r24, r28
    61a0:	bb d6       	rcall	.+3446   	; 0x6f18 <serial1MIDISend>
		}
	//} V 0.73 send program change to "thru" out always
}
    61a2:	cf 91       	pop	r28
    61a4:	08 95       	ret

000061a6 <midi_resetRegisters>:


void midi_resetRegisters(){
    61a6:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    61a8:	c0 e0       	ldi	r28, 0x00	; 0
    61aa:	06 c0       	rjmp	.+12     	; 0x61b8 <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    61ac:	8f ef       	ldi	r24, 0xFF	; 255
    61ae:	66 df       	rcall	.-308    	; 0x607c <prog_set>
		register_onOff(i,REGISTER_OFF);
    61b0:	60 e0       	ldi	r22, 0x00	; 0
    61b2:	8c 2f       	mov	r24, r28
    61b4:	ae de       	rcall	.-676    	; 0x5f12 <register_onOff>
	//} V 0.73 send program change to "thru" out always
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    61b6:	cf 5f       	subi	r28, 0xFF	; 255
    61b8:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <registerCount>
    61bc:	c8 17       	cp	r28, r24
    61be:	b0 f3       	brcs	.-20     	; 0x61ac <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    61c0:	cf 91       	pop	r28
    61c2:	08 95       	ret

000061c4 <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display != PROGR_NONE) {
    61c4:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    61c8:	8f 3f       	cpi	r24, 0xFF	; 255
    61ca:	c9 f0       	breq	.+50     	; 0x61fe <prog_toLcd+0x3a>
		lcd_putc('P');
    61cc:	80 e5       	ldi	r24, 0x50	; 80
    61ce:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
		lcd_putc('-');
    61d2:	8d e2       	ldi	r24, 0x2D	; 45
    61d4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    61d8:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    61dc:	86 95       	lsr	r24
    61de:	86 95       	lsr	r24
    61e0:	86 95       	lsr	r24
    61e2:	87 70       	andi	r24, 0x07	; 7
    61e4:	8f 5b       	subi	r24, 0xBF	; 191
    61e6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    61ea:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    61ee:	87 70       	andi	r24, 0x07	; 7
    61f0:	8f 5c       	subi	r24, 0xCF	; 207
    61f2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
		lcd_putc(' ');
    61f6:	80 e2       	ldi	r24, 0x20	; 32
    61f8:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <lcd_putc>
    61fc:	08 95       	ret
	} else {
		lcd_blank(5);
    61fe:	85 e0       	ldi	r24, 0x05	; 5
    6200:	0c 94 61 3c 	jmp	0x78c2	; 0x78c2 <lcd_blank>
    6204:	08 95       	ret

00006206 <reg_toLCD>:
}

const __flash RegOut_t reg_Out[REGOUT_LEN] = {{LCD_LINE1+1,'1',10,14},{LCD_LINE1+6,' ',15,18},
	{LCD_LINE1+10,'2',20,24},{LCD_LINE1+15,' ',25,29},{LCD_LINE2+1,'P',0,4},{LCD_LINE2+6,' ',5,9}};

void reg_toLCD(){
    6206:	ff 92       	push	r15
    6208:	0f 93       	push	r16
    620a:	1f 93       	push	r17
    620c:	cf 93       	push	r28
    620e:	df 93       	push	r29
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6210:	f1 2c       	mov	r15, r1
    6212:	53 c0       	rjmp	.+166    	; 0x62ba <reg_toLCD+0xb4>
		lcd_goto(reg_Out[i].cursor);
    6214:	0f 2d       	mov	r16, r15
    6216:	10 e0       	ldi	r17, 0x00	; 0
    6218:	e8 01       	movw	r28, r16
    621a:	cc 0f       	add	r28, r28
    621c:	dd 1f       	adc	r29, r29
    621e:	cc 0f       	add	r28, r28
    6220:	dd 1f       	adc	r29, r29
    6222:	cc 55       	subi	r28, 0x5C	; 92
    6224:	dd 4e       	sbci	r29, 0xED	; 237
    6226:	fe 01       	movw	r30, r28
    6228:	21 96       	adiw	r28, 0x01	; 1
    622a:	85 91       	lpm	r24, Z+
    622c:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    6230:	fe 01       	movw	r30, r28
    6232:	84 91       	lpm	r24, Z
		if ((myChar > ' ') && (myChar <= 0x7F)) {
    6234:	9f ed       	ldi	r25, 0xDF	; 223
    6236:	98 0f       	add	r25, r24
    6238:	9f 35       	cpi	r25, 0x5F	; 95
    623a:	28 f4       	brcc	.+10     	; 0x6246 <reg_toLCD+0x40>
			// only if valid char
			lcd_putc(myChar);
    623c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
			lcd_putc(' ');
    6240:	80 e2       	ldi	r24, 0x20	; 32
    6242:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
		}
		uint8_t reg = reg_Out[i].regStart;
    6246:	f8 01       	movw	r30, r16
    6248:	ee 0f       	add	r30, r30
    624a:	ff 1f       	adc	r31, r31
    624c:	ee 0f       	add	r30, r30
    624e:	ff 1f       	adc	r31, r31
    6250:	ea 55       	subi	r30, 0x5A	; 90
    6252:	fd 4e       	sbci	r31, 0xED	; 237
    6254:	c4 91       	lpm	r28, Z
		while (reg <= reg_Out[i].regEnd) {
    6256:	23 c0       	rjmp	.+70     	; 0x629e <reg_toLCD+0x98>
			if (reg == reg_Out[i].regEnd) {
    6258:	c8 13       	cpse	r28, r24
    625a:	0b c0       	rjmp	.+22     	; 0x6272 <reg_toLCD+0x6c>
				// only one register left for out
				lcd_putc(LCD_CHAR_REG_OFF+ (get_RegisterStatus(reg) == REGISTER_OFF ? 0 : 1));
    625c:	8c 2f       	mov	r24, r28
    625e:	e0 dd       	rcall	.-1088   	; 0x5e20 <get_RegisterStatus>
    6260:	88 23       	and	r24, r24
    6262:	11 f0       	breq	.+4      	; 0x6268 <reg_toLCD+0x62>
    6264:	8b e0       	ldi	r24, 0x0B	; 11
    6266:	01 c0       	rjmp	.+2      	; 0x626a <reg_toLCD+0x64>
    6268:	8a e0       	ldi	r24, 0x0A	; 10
    626a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    626e:	dc 2f       	mov	r29, r28
    6270:	14 c0       	rjmp	.+40     	; 0x629a <reg_toLCD+0x94>
			} else {
				// at least 2 register left
				uint8_t addChar = get_RegisterStatus(reg++) == REGISTER_OFF ? 0 : 2;
    6272:	d1 e0       	ldi	r29, 0x01	; 1
    6274:	dc 0f       	add	r29, r28
    6276:	8c 2f       	mov	r24, r28
    6278:	d3 dd       	rcall	.-1114   	; 0x5e20 <get_RegisterStatus>
    627a:	81 11       	cpse	r24, r1
    627c:	02 c0       	rjmp	.+4      	; 0x6282 <reg_toLCD+0x7c>
    627e:	c0 e0       	ldi	r28, 0x00	; 0
    6280:	01 c0       	rjmp	.+2      	; 0x6284 <reg_toLCD+0x7e>
    6282:	c2 e0       	ldi	r28, 0x02	; 2
				addChar += get_RegisterStatus(reg) == REGISTER_OFF ? 0 : 1;
    6284:	8d 2f       	mov	r24, r29
    6286:	cc dd       	rcall	.-1128   	; 0x5e20 <get_RegisterStatus>
    6288:	91 e0       	ldi	r25, 0x01	; 1
    628a:	81 11       	cpse	r24, r1
    628c:	01 c0       	rjmp	.+2      	; 0x6290 <reg_toLCD+0x8a>
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	89 2f       	mov	r24, r25
    6292:	8c 0f       	add	r24, r28
    6294:	84 5f       	subi	r24, 0xF4	; 244
				lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
    6296:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    629a:	c1 e0       	ldi	r28, 0x01	; 1
			}
			reg++;
    629c:	cd 0f       	add	r28, r29
    629e:	f8 01       	movw	r30, r16
			// only if valid char
			lcd_putc(myChar);
			lcd_putc(' ');
		}
		uint8_t reg = reg_Out[i].regStart;
		while (reg <= reg_Out[i].regEnd) {
    62a0:	ee 0f       	add	r30, r30
    62a2:	ff 1f       	adc	r31, r31
    62a4:	ee 0f       	add	r30, r30
    62a6:	ff 1f       	adc	r31, r31
    62a8:	e9 55       	subi	r30, 0x59	; 89
    62aa:	fd 4e       	sbci	r31, 0xED	; 237
    62ac:	84 91       	lpm	r24, Z
    62ae:	8c 17       	cp	r24, r28
    62b0:	98 f6       	brcc	.-90     	; 0x6258 <reg_toLCD+0x52>
    62b2:	80 e2       	ldi	r24, 0x20	; 32
				addChar += get_RegisterStatus(reg) == REGISTER_OFF ? 0 : 1;
				lcd_putc(LCD_CHAR_REG_OFFOFF+ addChar);
			}
			reg++;
		}
		lcd_putc(' ');
    62b4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    62b8:	f3 94       	inc	r15
const __flash RegOut_t reg_Out[REGOUT_LEN] = {{LCD_LINE1+1,'1',10,14},{LCD_LINE1+6,' ',15,18},
	{LCD_LINE1+10,'2',20,24},{LCD_LINE1+15,' ',25,29},{LCD_LINE2+1,'P',0,4},{LCD_LINE2+6,' ',5,9}};

void reg_toLCD(){
	// lcd output register
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    62ba:	f5 e0       	ldi	r31, 0x05	; 5
    62bc:	ff 15       	cp	r31, r15
    62be:	08 f0       	brcs	.+2      	; 0x62c2 <reg_toLCD+0xbc>
    62c0:	a9 cf       	rjmp	.-174    	; 0x6214 <reg_toLCD+0xe>
    62c2:	df 91       	pop	r29
			}
			reg++;
		}
		lcd_putc(' ');
	}
}
    62c4:	cf 91       	pop	r28
    62c6:	1f 91       	pop	r17
    62c8:	0f 91       	pop	r16
    62ca:	ff 90       	pop	r15
    62cc:	08 95       	ret

000062ce <reg_ClearOnLCD>:
    62ce:	ef 92       	push	r14

void reg_ClearOnLCD(){
    62d0:	ff 92       	push	r15
    62d2:	1f 93       	push	r17
    62d4:	cf 93       	push	r28
    62d6:	df 93       	push	r29
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    62d8:	10 e0       	ldi	r17, 0x00	; 0
    62da:	25 c0       	rjmp	.+74     	; 0x6326 <reg_ClearOnLCD+0x58>
		lcd_goto(reg_Out[i].cursor);
    62dc:	c1 2f       	mov	r28, r17
    62de:	d0 e0       	ldi	r29, 0x00	; 0
    62e0:	cc 0f       	add	r28, r28
    62e2:	dd 1f       	adc	r29, r29
    62e4:	cc 0f       	add	r28, r28
    62e6:	dd 1f       	adc	r29, r29
    62e8:	cc 55       	subi	r28, 0x5C	; 92
    62ea:	dd 4e       	sbci	r29, 0xED	; 237
    62ec:	fe 01       	movw	r30, r28
    62ee:	31 96       	adiw	r30, 0x01	; 1
    62f0:	7f 01       	movw	r14, r30
    62f2:	31 97       	sbiw	r30, 0x01	; 1
    62f4:	85 91       	lpm	r24, Z+
    62f6:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
		char myChar = reg_Out[i].manualChar;
    62fa:	f7 01       	movw	r30, r14
    62fc:	24 91       	lpm	r18, Z
		uint8_t spaceCount;
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
    62fe:	32 96       	adiw	r30, 0x02	; 2
    6300:	84 91       	lpm	r24, Z
    6302:	31 97       	sbiw	r30, 0x01	; 1
    6304:	94 91       	lpm	r25, Z
    6306:	89 1b       	sub	r24, r25
    6308:	8f 5f       	subi	r24, 0xFF	; 255
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
    630a:	90 e0       	ldi	r25, 0x00	; 0
    630c:	01 96       	adiw	r24, 0x01	; 1
    630e:	95 95       	asr	r25
    6310:	87 95       	ror	r24
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
    6312:	21 52       	subi	r18, 0x21	; 33
    6314:	2f 35       	cpi	r18, 0x5F	; 95
    6316:	10 f4       	brcc	.+4      	; 0x631c <reg_ClearOnLCD+0x4e>
    6318:	22 e0       	ldi	r18, 0x02	; 2
    631a:	01 c0       	rjmp	.+2      	; 0x631e <reg_ClearOnLCD+0x50>
    631c:	20 e0       	ldi	r18, 0x00	; 0
		lcd_blank(spaceCount);
    631e:	82 0f       	add	r24, r18
    6320:	0e 94 61 3c 	call	0x78c2	; 0x78c2 <lcd_blank>
		lcd_putc(' ');
	}
}

void reg_ClearOnLCD(){
	for (uint8_t i = 0; i < REGOUT_LEN; i++){
    6324:	1f 5f       	subi	r17, 0xFF	; 255
    6326:	16 30       	cpi	r17, 0x06	; 6
    6328:	c8 f2       	brcs	.-78     	; 0x62dc <reg_ClearOnLCD+0xe>
		spaceCount = (reg_Out[i].regEnd - reg_Out[i].regStart) + 1;
		spaceCount = (spaceCount + 1) >> 1; // (nr of reg) / 2 plus 1 if odd number
		spaceCount += ((myChar > ' ') && (myChar <= 0x7F)) ? 2 : 0; // add caption if valid
		lcd_blank(spaceCount);
	}
}
    632a:	df 91       	pop	r29
    632c:	cf 91       	pop	r28
    632e:	1f 91       	pop	r17
    6330:	ff 90       	pop	r15
    6332:	ef 90       	pop	r14
    6334:	08 95       	ret

00006336 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6336:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    6338:	e8 e2       	ldi	r30, 0x28	; 40
    633a:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    633c:	07 c0       	rjmp	.+14     	; 0x634c <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    633e:	8f ef       	ldi	r24, 0xFF	; 255
    6340:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    6342:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    6344:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    6346:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    6348:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    634a:	91 50       	subi	r25, 0x01	; 1
    634c:	91 11       	cpse	r25, r1
    634e:	f7 cf       	rjmp	.-18     	; 0x633e <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    6350:	0e 94 a4 0a 	call	0x1548	; 0x1548 <eeprom_ReadMidiInMap>
    6354:	8f 3f       	cpi	r24, 0xFF	; 255
    6356:	01 f5       	brne	.+64     	; 0x6398 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6358:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    635c:	e8 e2       	ldi	r30, 0x28	; 40
    635e:	f8 e0       	ldi	r31, 0x08	; 8
    6360:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    6362:	84 e2       	ldi	r24, 0x24	; 36
    6364:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    6366:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6368:	98 e3       	ldi	r25, 0x38	; 56
    636a:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    636c:	21 e0       	ldi	r18, 0x01	; 1
    636e:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    6370:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    6372:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6374:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    6376:	22 e0       	ldi	r18, 0x02	; 2
    6378:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    637a:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    637c:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    637e:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    6380:	93 e0       	ldi	r25, 0x03	; 3
    6382:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    6384:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    6386:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    6388:	8e e1       	ldi	r24, 0x1E	; 30
    638a:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    638c:	40 e0       	ldi	r20, 0x00	; 0
    638e:	50 e0       	ldi	r21, 0x00	; 0
    6390:	61 e0       	ldi	r22, 0x01	; 1
    6392:	81 e0       	ldi	r24, 0x01	; 1
    6394:	0e 94 5f 15 	call	0x2abe	; 0x2abe <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    6398:	0e 94 28 0b 	call	0x1650	; 0x1650 <eeprom_ReadMidiThrough>
    639c:	8f 3f       	cpi	r24, 0xFF	; 255
    639e:	51 f4       	brne	.+20     	; 0x63b4 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    63a0:	e6 e2       	ldi	r30, 0x26	; 38
    63a2:	f8 e0       	ldi	r31, 0x08	; 8
    63a4:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    63a6:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    63a8:	40 e0       	ldi	r20, 0x00	; 0
    63aa:	50 e0       	ldi	r21, 0x00	; 0
    63ac:	61 e0       	ldi	r22, 0x01	; 1
    63ae:	81 e0       	ldi	r24, 0x01	; 1
    63b0:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <log_putError>
    63b4:	08 95       	ret

000063b6 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    63b6:	20 e0       	ldi	r18, 0x00	; 0
    63b8:	09 c0       	rjmp	.+18     	; 0x63cc <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    63ba:	88 0f       	add	r24, r24
    63bc:	99 1f       	adc	r25, r25
    63be:	fc 01       	movw	r30, r24
    63c0:	e8 5d       	subi	r30, 0xD8	; 216
    63c2:	f6 4f       	sbci	r31, 0xF6	; 246
    63c4:	8f ef       	ldi	r24, 0xFF	; 255
    63c6:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    63c8:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    63ca:	2f 5f       	subi	r18, 0xFF	; 255
    63cc:	82 2f       	mov	r24, r18
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	00 97       	sbiw	r24, 0x00	; 0
    63d2:	99 f7       	brne	.-26     	; 0x63ba <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    63d4:	0e 94 cc 0a 	call	0x1598	; 0x1598 <eeprom_ReadMidiOutMap>
    63d8:	8f 3f       	cpi	r24, 0xFF	; 255
    63da:	b1 f4       	brne	.+44     	; 0x6408 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    63dc:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    63e0:	e8 e2       	ldi	r30, 0x28	; 40
    63e2:	f9 e0       	ldi	r31, 0x09	; 9
    63e4:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    63e6:	91 e0       	ldi	r25, 0x01	; 1
    63e8:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    63ea:	92 e0       	ldi	r25, 0x02	; 2
    63ec:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    63ee:	93 e0       	ldi	r25, 0x03	; 3
    63f0:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    63f2:	e0 e3       	ldi	r30, 0x30	; 48
    63f4:	f9 e0       	ldi	r31, 0x09	; 9
    63f6:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    63f8:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    63fa:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    63fc:	40 e0       	ldi	r20, 0x00	; 0
    63fe:	50 e0       	ldi	r21, 0x00	; 0
    6400:	62 e0       	ldi	r22, 0x02	; 2
    6402:	81 e0       	ldi	r24, 0x01	; 1
    6404:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <log_putError>
    6408:	08 95       	ret

0000640a <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    640a:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    640c:	8f ef       	ldi	r24, 0xFF	; 255
    640e:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    6410:	e4 30       	cpi	r30, 0x04	; 4
    6412:	50 f4       	brcc	.+20     	; 0x6428 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    6414:	f0 e0       	ldi	r31, 0x00	; 0
    6416:	ee 0f       	add	r30, r30
    6418:	ff 1f       	adc	r31, r31
    641a:	e8 5d       	subi	r30, 0xD8	; 216
    641c:	f6 4f       	sbci	r31, 0xF6	; 246
    641e:	20 81       	ld	r18, Z
    6420:	2f 3f       	cpi	r18, 0xFF	; 255
    6422:	11 f0       	breq	.+4      	; 0x6428 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    6424:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    6426:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    6428:	08 95       	ret

0000642a <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    642a:	70 e0       	ldi	r23, 0x00	; 0
    642c:	52 c0       	rjmp	.+164    	; 0x64d2 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    642e:	87 2f       	mov	r24, r23
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	24 2f       	mov	r18, r20
    6434:	30 e0       	ldi	r19, 0x00	; 0
    6436:	f9 01       	movw	r30, r18
    6438:	ee 0f       	add	r30, r30
    643a:	ff 1f       	adc	r31, r31
    643c:	df 01       	movw	r26, r30
    643e:	a2 0f       	add	r26, r18
    6440:	b3 1f       	adc	r27, r19
    6442:	fc 01       	movw	r30, r24
    6444:	ee 0f       	add	r30, r30
    6446:	ff 1f       	adc	r31, r31
    6448:	e8 0f       	add	r30, r24
    644a:	f9 1f       	adc	r31, r25
    644c:	ee 0f       	add	r30, r30
    644e:	ff 1f       	adc	r31, r31
    6450:	ee 0f       	add	r30, r30
    6452:	ff 1f       	adc	r31, r31
    6454:	ea 0f       	add	r30, r26
    6456:	fb 1f       	adc	r31, r27
    6458:	ec 5c       	subi	r30, 0xCC	; 204
    645a:	f6 4f       	sbci	r31, 0xF6	; 246
    645c:	a0 81       	ld	r26, Z
    645e:	af 3f       	cpi	r26, 0xFF	; 255
    6460:	d9 f0       	breq	.+54     	; 0x6498 <Midi_updateManualRange+0x6e>
    6462:	f9 01       	movw	r30, r18
    6464:	ee 0f       	add	r30, r30
    6466:	ff 1f       	adc	r31, r31
    6468:	e2 0f       	add	r30, r18
    646a:	f3 1f       	adc	r31, r19
    646c:	9c 01       	movw	r18, r24
    646e:	22 0f       	add	r18, r18
    6470:	33 1f       	adc	r19, r19
    6472:	28 0f       	add	r18, r24
    6474:	39 1f       	adc	r19, r25
    6476:	22 0f       	add	r18, r18
    6478:	33 1f       	adc	r19, r19
    647a:	22 0f       	add	r18, r18
    647c:	33 1f       	adc	r19, r19
    647e:	e2 0f       	add	r30, r18
    6480:	f3 1f       	adc	r31, r19
    6482:	ec 5c       	subi	r30, 0xCC	; 204
    6484:	f6 4f       	sbci	r31, 0xF6	; 246
    6486:	21 81       	ldd	r18, Z+1	; 0x01
    6488:	2f 3f       	cpi	r18, 0xFF	; 255
    648a:	31 f0       	breq	.+12     	; 0x6498 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    648c:	a6 17       	cp	r26, r22
    648e:	08 f4       	brcc	.+2      	; 0x6492 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    6490:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    6492:	52 17       	cp	r21, r18
    6494:	08 f4       	brcc	.+2      	; 0x6498 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    6496:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    6498:	55 23       	and	r21, r21
    649a:	11 f0       	breq	.+4      	; 0x64a0 <Midi_updateManualRange+0x76>
    649c:	6f 3f       	cpi	r22, 0xFF	; 255
    649e:	49 f4       	brne	.+18     	; 0x64b2 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    64a0:	88 0f       	add	r24, r24
    64a2:	99 1f       	adc	r25, r25
    64a4:	fc 01       	movw	r30, r24
    64a6:	e2 5e       	subi	r30, 0xE2	; 226
    64a8:	f7 4f       	sbci	r31, 0xF7	; 247
    64aa:	8f ef       	ldi	r24, 0xFF	; 255
    64ac:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    64ae:	81 83       	std	Z+1, r24	; 0x01
    64b0:	07 c0       	rjmp	.+14     	; 0x64c0 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    64b2:	88 0f       	add	r24, r24
    64b4:	99 1f       	adc	r25, r25
    64b6:	fc 01       	movw	r30, r24
    64b8:	e2 5e       	subi	r30, 0xE2	; 226
    64ba:	f7 4f       	sbci	r31, 0xF7	; 247
    64bc:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    64be:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    64c0:	4f 5f       	subi	r20, 0xFF	; 255
    64c2:	03 c0       	rjmp	.+6      	; 0x64ca <Midi_updateManualRange+0xa0>
    64c4:	40 e0       	ldi	r20, 0x00	; 0
    64c6:	6f ef       	ldi	r22, 0xFF	; 255
    64c8:	50 e0       	ldi	r21, 0x00	; 0
    64ca:	44 30       	cpi	r20, 0x04	; 4
    64cc:	08 f4       	brcc	.+2      	; 0x64d0 <Midi_updateManualRange+0xa6>
    64ce:	af cf       	rjmp	.-162    	; 0x642e <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    64d0:	7f 5f       	subi	r23, 0xFF	; 255
    64d2:	74 30       	cpi	r23, 0x04	; 4
    64d4:	b8 f3       	brcs	.-18     	; 0x64c4 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    64d6:	08 95       	ret

000064d8 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    64d8:	63 e0       	ldi	r22, 0x03	; 3
    64da:	28 c0       	rjmp	.+80     	; 0x652c <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    64dc:	86 2f       	mov	r24, r22
    64de:	06 2e       	mov	r0, r22
    64e0:	00 0c       	add	r0, r0
    64e2:	99 0b       	sbc	r25, r25
    64e4:	42 2f       	mov	r20, r18
    64e6:	02 2e       	mov	r0, r18
    64e8:	00 0c       	add	r0, r0
    64ea:	55 0b       	sbc	r21, r21
    64ec:	fa 01       	movw	r30, r20
    64ee:	ee 0f       	add	r30, r30
    64f0:	ff 1f       	adc	r31, r31
    64f2:	e4 0f       	add	r30, r20
    64f4:	f5 1f       	adc	r31, r21
    64f6:	ac 01       	movw	r20, r24
    64f8:	44 0f       	add	r20, r20
    64fa:	55 1f       	adc	r21, r21
    64fc:	da 01       	movw	r26, r20
    64fe:	a8 0f       	add	r26, r24
    6500:	b9 1f       	adc	r27, r25
    6502:	aa 0f       	add	r26, r26
    6504:	bb 1f       	adc	r27, r27
    6506:	aa 0f       	add	r26, r26
    6508:	bb 1f       	adc	r27, r27
    650a:	ae 0f       	add	r26, r30
    650c:	bf 1f       	adc	r27, r31
    650e:	ac 5c       	subi	r26, 0xCC	; 204
    6510:	b6 4f       	sbci	r27, 0xF6	; 246
    6512:	3f ef       	ldi	r19, 0xFF	; 255
    6514:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    6516:	11 96       	adiw	r26, 0x01	; 1
    6518:	3c 93       	st	X, r19
    651a:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    651c:	fd 01       	movw	r30, r26
    651e:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    6520:	21 50       	subi	r18, 0x01	; 1
    6522:	01 c0       	rjmp	.+2      	; 0x6526 <init_Manual2Module+0x4e>
    6524:	23 e0       	ldi	r18, 0x03	; 3
    6526:	22 23       	and	r18, r18
    6528:	cc f6       	brge	.-78     	; 0x64dc <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    652a:	61 50       	subi	r22, 0x01	; 1
    652c:	66 23       	and	r22, r22
    652e:	d4 f7       	brge	.-12     	; 0x6524 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    6530:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <eeprom_ReadManualMap>
    6534:	8f 3f       	cpi	r24, 0xFF	; 255
    6536:	79 f5       	brne	.+94     	; 0x6596 <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    6538:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    653c:	40 e0       	ldi	r20, 0x00	; 0
    653e:	50 e0       	ldi	r21, 0x00	; 0
    6540:	63 e0       	ldi	r22, 0x03	; 3
    6542:	81 e0       	ldi	r24, 0x01	; 1
    6544:	0e 94 5f 15 	call	0x2abe	; 0x2abe <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    6548:	e4 e3       	ldi	r30, 0x34	; 52
    654a:	f9 e0       	ldi	r31, 0x09	; 9
    654c:	84 e2       	ldi	r24, 0x24	; 36
    654e:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    6550:	33 e4       	ldi	r19, 0x43	; 67
    6552:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    6554:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    6556:	24 e4       	ldi	r18, 0x44	; 68
    6558:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    655a:	9b e5       	ldi	r25, 0x5B	; 91
    655c:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    655e:	40 e2       	ldi	r20, 0x20	; 32
    6560:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    6562:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    6564:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    6566:	40 e4       	ldi	r20, 0x40	; 64
    6568:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    656a:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    656c:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    656e:	40 e6       	ldi	r20, 0x60	; 96
    6570:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    6572:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    6574:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    6576:	30 e8       	ldi	r19, 0x80	; 128
    6578:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    657a:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    657c:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    657e:	90 ea       	ldi	r25, 0xA0	; 160
    6580:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    6582:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    6584:	81 e4       	ldi	r24, 0x41	; 65
    6586:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    6588:	80 ec       	ldi	r24, 0xC0	; 192
    658a:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    658c:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    658e:	8d e1       	ldi	r24, 0x1D	; 29
    6590:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    6592:	80 ee       	ldi	r24, 0xE0	; 224
    6594:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    6596:	49 cf       	rjmp	.-366    	; 0x642a <Midi_updateManualRange>
    6598:	08 95       	ret

0000659a <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    659a:	84 30       	cpi	r24, 0x04	; 4
    659c:	d8 f4       	brcc	.+54     	; 0x65d4 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    659e:	90 e0       	ldi	r25, 0x00	; 0
    65a0:	fc 01       	movw	r30, r24
    65a2:	ee 0f       	add	r30, r30
    65a4:	ff 1f       	adc	r31, r31
    65a6:	e8 0f       	add	r30, r24
    65a8:	f9 1f       	adc	r31, r25
    65aa:	ee 0f       	add	r30, r30
    65ac:	ff 1f       	adc	r31, r31
    65ae:	ee 0f       	add	r30, r30
    65b0:	ff 1f       	adc	r31, r31
    65b2:	ec 5c       	subi	r30, 0xCC	; 204
    65b4:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    65b6:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    65b8:	20 81       	ld	r18, Z
    65ba:	62 17       	cp	r22, r18
    65bc:	40 f0       	brcs	.+16     	; 0x65ce <manualNote_to_moduleBit+0x34>
    65be:	91 81       	ldd	r25, Z+1	; 0x01
    65c0:	96 17       	cp	r25, r22
    65c2:	28 f0       	brcs	.+10     	; 0x65ce <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    65c4:	92 81       	ldd	r25, Z+2	; 0x02
    65c6:	62 1b       	sub	r22, r18
				return (result);
    65c8:	80 e0       	ldi	r24, 0x00	; 0
    65ca:	96 0f       	add	r25, r22
    65cc:	08 95       	ret
			}
			pRange++;
    65ce:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    65d0:	81 50       	subi	r24, 0x01	; 1
    65d2:	91 f7       	brne	.-28     	; 0x65b8 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    65d4:	8f ef       	ldi	r24, 0xFF	; 255
    65d6:	90 e0       	ldi	r25, 0x00	; 0
}
    65d8:	08 95       	ret

000065da <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    65da:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    65dc:	e4 e3       	ldi	r30, 0x34	; 52
    65de:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    65e0:	44 e0       	ldi	r20, 0x04	; 4
    65e2:	16 c0       	rjmp	.+44     	; 0x6610 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    65e4:	52 81       	ldd	r21, Z+2	; 0x02
    65e6:	85 17       	cp	r24, r21
    65e8:	88 f0       	brcs	.+34     	; 0x660c <moduleBit_to_manualNote+0x32>
    65ea:	68 2f       	mov	r22, r24
    65ec:	70 e0       	ldi	r23, 0x00	; 0
    65ee:	21 81       	ldd	r18, Z+1	; 0x01
    65f0:	a0 81       	ld	r26, Z
    65f2:	30 e0       	ldi	r19, 0x00	; 0
    65f4:	2a 1b       	sub	r18, r26
    65f6:	31 09       	sbc	r19, r1
    65f8:	25 0f       	add	r18, r21
    65fa:	31 1d       	adc	r19, r1
    65fc:	26 17       	cp	r18, r22
    65fe:	37 07       	cpc	r19, r23
    6600:	2c f0       	brlt	.+10     	; 0x660c <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    6602:	98 2f       	mov	r25, r24
    6604:	95 1b       	sub	r25, r21
				return(result);
    6606:	8b 2f       	mov	r24, r27
    6608:	9a 0f       	add	r25, r26
    660a:	08 95       	ret
			}
			pRange++;
    660c:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    660e:	41 50       	subi	r20, 0x01	; 1
    6610:	41 11       	cpse	r20, r1
    6612:	e8 cf       	rjmp	.-48     	; 0x65e4 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    6614:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    6616:	b5 30       	cpi	r27, 0x05	; 5
    6618:	18 f3       	brcs	.-58     	; 0x65e0 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    661a:	8f ef       	ldi	r24, 0xFF	; 255
    661c:	90 e0       	ldi	r25, 0x00	; 0
}
    661e:	08 95       	ret

00006620 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    6620:	ef 92       	push	r14
    6622:	ff 92       	push	r15
    6624:	0f 93       	push	r16
    6626:	1f 93       	push	r17
    6628:	cf 93       	push	r28
    662a:	df 93       	push	r29
    662c:	c8 2f       	mov	r28, r24
    662e:	06 2f       	mov	r16, r22
    6630:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    6632:	b3 df       	rcall	.-154    	; 0x659a <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    6634:	49 2f       	mov	r20, r25
    6636:	42 95       	swap	r20
    6638:	46 95       	lsr	r20
    663a:	47 70       	andi	r20, 0x07	; 7
    663c:	21 e0       	ldi	r18, 0x01	; 1
    663e:	30 e0       	ldi	r19, 0x00	; 0
    6640:	79 01       	movw	r14, r18
    6642:	02 c0       	rjmp	.+4      	; 0x6648 <manual_NoteOnOff+0x28>
    6644:	ee 0c       	add	r14, r14
    6646:	ff 1c       	adc	r15, r15
    6648:	4a 95       	dec	r20
    664a:	e2 f7       	brpl	.-8      	; 0x6644 <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    664c:	19 2f       	mov	r17, r25
    664e:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    6650:	81 11       	cpse	r24, r1
    6652:	1a c0       	rjmp	.+52     	; 0x6688 <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    6654:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    6658:	8e 21       	and	r24, r14
    665a:	59 f4       	brne	.+22     	; 0x6672 <manual_NoteOnOff+0x52>
    665c:	dd 23       	and	r29, r29
    665e:	4c f0       	brlt	.+18     	; 0x6672 <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6660:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    6662:	d1 30       	cpi	r29, 0x01	; 1
    6664:	11 f4       	brne	.+4      	; 0x666a <manual_NoteOnOff+0x4a>
    6666:	90 e2       	ldi	r25, 0x20	; 32
    6668:	01 c0       	rjmp	.+2      	; 0x666c <manual_NoteOnOff+0x4c>
    666a:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    666c:	8e 2d       	mov	r24, r14
    666e:	91 2b       	or	r25, r17
    6670:	38 da       	rcall	.-2960   	; 0x5ae2 <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    6672:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    6674:	29 f4       	brne	.+10     	; 0x6680 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    6676:	6e 2d       	mov	r22, r14
    6678:	81 2f       	mov	r24, r17
    667a:	0e 94 1e 12 	call	0x243c	; 0x243c <pipe_off>
    667e:	04 c0       	rjmp	.+8      	; 0x6688 <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    6680:	6e 2d       	mov	r22, r14
    6682:	81 2f       	mov	r24, r17
    6684:	0e 94 0f 12 	call	0x241e	; 0x241e <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    6688:	ec 2f       	mov	r30, r28
    668a:	f0 e0       	ldi	r31, 0x00	; 0
    668c:	ee 0f       	add	r30, r30
    668e:	ff 1f       	adc	r31, r31
    6690:	e8 5d       	subi	r30, 0xD8	; 216
    6692:	f6 4f       	sbci	r31, 0xF6	; 246
    6694:	81 81       	ldd	r24, Z+1	; 0x01
    6696:	8f 3f       	cpi	r24, 0xFF	; 255
    6698:	a9 f0       	breq	.+42     	; 0x66c4 <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    669a:	d1 30       	cpi	r29, 0x01	; 1
    669c:	31 f0       	breq	.+12     	; 0x66aa <manual_NoteOnOff+0x8a>
    669e:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    66a2:	99 23       	and	r25, r25
    66a4:	21 f0       	breq	.+8      	; 0x66ae <manual_NoteOnOff+0x8e>
    66a6:	90 e9       	ldi	r25, 0x90	; 144
    66a8:	03 c0       	rjmp	.+6      	; 0x66b0 <manual_NoteOnOff+0x90>
    66aa:	90 e9       	ldi	r25, 0x90	; 144
    66ac:	01 c0       	rjmp	.+2      	; 0x66b0 <manual_NoteOnOff+0x90>
    66ae:	90 e8       	ldi	r25, 0x80	; 128
    66b0:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    66b2:	32 d4       	rcall	.+2148   	; 0x6f18 <serial1MIDISend>
    66b4:	80 2f       	mov	r24, r16
    66b6:	30 d4       	rcall	.+2144   	; 0x6f18 <serial1MIDISend>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    66b8:	d1 11       	cpse	r29, r1
    66ba:	02 c0       	rjmp	.+4      	; 0x66c0 <manual_NoteOnOff+0xa0>
    66bc:	80 e0       	ldi	r24, 0x00	; 0
    66be:	01 c0       	rjmp	.+2      	; 0x66c2 <manual_NoteOnOff+0xa2>
    66c0:	80 e4       	ldi	r24, 0x40	; 64
    66c2:	2a d4       	rcall	.+2132   	; 0x6f18 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	1f 91       	pop	r17
    66ca:	0f 91       	pop	r16
    66cc:	ff 90       	pop	r15
    66ce:	ef 90       	pop	r14
    66d0:	08 95       	ret

000066d2 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    66d2:	bf 92       	push	r11
    66d4:	cf 92       	push	r12
    66d6:	df 92       	push	r13
    66d8:	ef 92       	push	r14
    66da:	ff 92       	push	r15
    66dc:	0f 93       	push	r16
    66de:	1f 93       	push	r17
    66e0:	cf 93       	push	r28
    66e2:	df 93       	push	r29
    66e4:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    66e6:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    66e8:	4c c0       	rjmp	.+152    	; 0x6782 <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    66ea:	0c 2d       	mov	r16, r12
    66ec:	10 e0       	ldi	r17, 0x00	; 0
    66ee:	cd 2d       	mov	r28, r13
    66f0:	d0 e0       	ldi	r29, 0x00	; 0
    66f2:	f8 01       	movw	r30, r16
    66f4:	ee 0f       	add	r30, r30
    66f6:	ff 1f       	adc	r31, r31
    66f8:	ee 0f       	add	r30, r30
    66fa:	ff 1f       	adc	r31, r31
    66fc:	ec 0f       	add	r30, r28
    66fe:	fd 1f       	adc	r31, r29
    6700:	ee 0f       	add	r30, r30
    6702:	ff 1f       	adc	r31, r31
    6704:	ee 0f       	add	r30, r30
    6706:	ff 1f       	adc	r31, r31
    6708:	e8 5d       	subi	r30, 0xD8	; 216
    670a:	f7 4f       	sbci	r31, 0xF7	; 247
    670c:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    670e:	83 e0       	ldi	r24, 0x03	; 3
    6710:	8b 15       	cp	r24, r11
    6712:	b0 f1       	brcs	.+108    	; 0x6780 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    6714:	f8 01       	movw	r30, r16
    6716:	ee 0f       	add	r30, r30
    6718:	ff 1f       	adc	r31, r31
    671a:	ee 0f       	add	r30, r30
    671c:	ff 1f       	adc	r31, r31
    671e:	ec 0f       	add	r30, r28
    6720:	fd 1f       	adc	r31, r29
    6722:	ee 0f       	add	r30, r30
    6724:	ff 1f       	adc	r31, r31
    6726:	ee 0f       	add	r30, r30
    6728:	ff 1f       	adc	r31, r31
    672a:	e8 5d       	subi	r30, 0xD8	; 216
    672c:	f7 4f       	sbci	r31, 0xF7	; 247
    672e:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6730:	f2 80       	ldd	r15, Z+2	; 0x02
    6732:	15 c0       	rjmp	.+42     	; 0x675e <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6734:	ee 24       	eor	r14, r14
    6736:	e3 94       	inc	r14
    6738:	e6 0e       	add	r14, r22
    673a:	f8 01       	movw	r30, r16
    673c:	ee 0f       	add	r30, r30
    673e:	ff 1f       	adc	r31, r31
    6740:	ee 0f       	add	r30, r30
    6742:	ff 1f       	adc	r31, r31
    6744:	ec 0f       	add	r30, r28
    6746:	fd 1f       	adc	r31, r29
    6748:	ee 0f       	add	r30, r30
    674a:	ff 1f       	adc	r31, r31
    674c:	ee 0f       	add	r30, r30
    674e:	ff 1f       	adc	r31, r31
    6750:	e8 5d       	subi	r30, 0xD8	; 216
    6752:	f7 4f       	sbci	r31, 0xF7	; 247
    6754:	40 e8       	ldi	r20, 0x80	; 128
    6756:	80 81       	ld	r24, Z
    6758:	63 df       	rcall	.-314    	; 0x6620 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    675a:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    675c:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    675e:	f1 10       	cpse	r15, r1
    6760:	e9 cf       	rjmp	.-46     	; 0x6734 <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6762:	eb 2d       	mov	r30, r11
    6764:	f0 e0       	ldi	r31, 0x00	; 0
    6766:	ee 0f       	add	r30, r30
    6768:	ff 1f       	adc	r31, r31
    676a:	e8 5d       	subi	r30, 0xD8	; 216
    676c:	f6 4f       	sbci	r31, 0xF6	; 246
    676e:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    6770:	80 31       	cpi	r24, 0x10	; 16
    6772:	30 f4       	brcc	.+12     	; 0x6780 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6774:	80 6b       	ori	r24, 0xB0	; 176
    6776:	d0 d3       	rcall	.+1952   	; 0x6f18 <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6778:	8b e7       	ldi	r24, 0x7B	; 123
    677a:	ce d3       	rcall	.+1948   	; 0x6f18 <serial1MIDISend>
				serial1MIDISend(0);
    677c:	80 e0       	ldi	r24, 0x00	; 0
    677e:	cc d3       	rcall	.+1944   	; 0x6f18 <serial1MIDISend>
    6780:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    6782:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    6784:	8d 15       	cp	r24, r13
    6786:	08 f0       	brcs	.+2      	; 0x678a <midiAllNotesOff+0xb8>
    6788:	b0 cf       	rjmp	.-160    	; 0x66ea <midiAllNotesOff+0x18>
    678a:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    678c:	cf 91       	pop	r28
    678e:	1f 91       	pop	r17
    6790:	0f 91       	pop	r16
    6792:	ff 90       	pop	r15
    6794:	ef 90       	pop	r14
    6796:	df 90       	pop	r13
    6798:	cf 90       	pop	r12
    679a:	bf 90       	pop	r11
    679c:	08 95       	ret

0000679e <midi_ManualOff>:
    679e:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    67a0:	1f 93       	push	r17
    67a2:	cf 93       	push	r28
    67a4:	df 93       	push	r29
    67a6:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    67a8:	84 30       	cpi	r24, 0x04	; 4
    67aa:	00 f5       	brcc	.+64     	; 0x67ec <midi_ManualOff+0x4e>
    67ac:	08 2f       	mov	r16, r24
    67ae:	10 e0       	ldi	r17, 0x00	; 0
    67b0:	f8 01       	movw	r30, r16
    67b2:	ee 0f       	add	r30, r30
    67b4:	ff 1f       	adc	r31, r31
    67b6:	e2 5e       	subi	r30, 0xE2	; 226
    67b8:	f7 4f       	sbci	r31, 0xF7	; 247
    67ba:	d0 81       	ld	r29, Z
    67bc:	df 3f       	cpi	r29, 0xFF	; 255
    67be:	b1 f0       	breq	.+44     	; 0x67ec <midi_ManualOff+0x4e>
    67c0:	f8 01       	movw	r30, r16
    67c2:	ee 0f       	add	r30, r30
    67c4:	ff 1f       	adc	r31, r31
    67c6:	e2 5e       	subi	r30, 0xE2	; 226
    67c8:	f7 4f       	sbci	r31, 0xF7	; 247
    67ca:	81 81       	ldd	r24, Z+1	; 0x01
    67cc:	8f 3f       	cpi	r24, 0xFF	; 255
    67ce:	31 f4       	brne	.+12     	; 0x67dc <midi_ManualOff+0x3e>
    67d0:	0d c0       	rjmp	.+26     	; 0x67ec <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    67d2:	40 e8       	ldi	r20, 0x80	; 128
    67d4:	6d 2f       	mov	r22, r29
    67d6:	8c 2f       	mov	r24, r28
    67d8:	23 df       	rcall	.-442    	; 0x6620 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    67da:	df 5f       	subi	r29, 0xFF	; 255
    67dc:	f8 01       	movw	r30, r16
    67de:	ee 0f       	add	r30, r30
    67e0:	ff 1f       	adc	r31, r31
    67e2:	e2 5e       	subi	r30, 0xE2	; 226
    67e4:	f7 4f       	sbci	r31, 0xF7	; 247
    67e6:	81 81       	ldd	r24, Z+1	; 0x01
    67e8:	8d 17       	cp	r24, r29
    67ea:	98 f7       	brcc	.-26     	; 0x67d2 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    67ec:	ec 2f       	mov	r30, r28
    67ee:	f0 e0       	ldi	r31, 0x00	; 0
    67f0:	ee 0f       	add	r30, r30
    67f2:	ff 1f       	adc	r31, r31
    67f4:	e8 5d       	subi	r30, 0xD8	; 216
    67f6:	f6 4f       	sbci	r31, 0xF6	; 246
    67f8:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    67fa:	80 31       	cpi	r24, 0x10	; 16
    67fc:	30 f4       	brcc	.+12     	; 0x680a <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    67fe:	80 6b       	ori	r24, 0xB0	; 176
    6800:	8b d3       	rcall	.+1814   	; 0x6f18 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6802:	8b e7       	ldi	r24, 0x7B	; 123
    6804:	89 d3       	rcall	.+1810   	; 0x6f18 <serial1MIDISend>
		serial1MIDISend(0);
    6806:	80 e0       	ldi	r24, 0x00	; 0
    6808:	87 d3       	rcall	.+1806   	; 0x6f18 <serial1MIDISend>
    680a:	df 91       	pop	r29

	}
}
    680c:	cf 91       	pop	r28
    680e:	1f 91       	pop	r17
    6810:	0f 91       	pop	r16
    6812:	08 95       	ret

00006814 <midi_AllManualsOff>:
    6814:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6816:	c0 e0       	ldi	r28, 0x00	; 0
    6818:	03 c0       	rjmp	.+6      	; 0x6820 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    681a:	8c 2f       	mov	r24, r28
    681c:	c0 df       	rcall	.-128    	; 0x679e <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    681e:	cf 5f       	subi	r28, 0xFF	; 255
    6820:	c4 30       	cpi	r28, 0x04	; 4
    6822:	d8 f3       	brcs	.-10     	; 0x681a <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    6824:	cf 91       	pop	r28
    6826:	08 95       	ret

00006828 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6828:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    682c:	88 23       	and	r24, r24
    682e:	39 f0       	breq	.+14     	; 0x683e <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6830:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    6834:	81 11       	cpse	r24, r1
    6836:	03 c0       	rjmp	.+6      	; 0x683e <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6838:	ed df       	rcall	.-38     	; 0x6814 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    683a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    683e:	08 95       	ret

00006840 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6840:	0f 93       	push	r16
    6842:	1f 93       	push	r17
    6844:	cf 93       	push	r28
    6846:	df 93       	push	r29
    6848:	06 2f       	mov	r16, r22
    684a:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    684c:	d8 2f       	mov	r29, r24
    684e:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6850:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6852:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6854:	3c c0       	rjmp	.+120    	; 0x68ce <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    6856:	4d 2f       	mov	r20, r29
    6858:	50 e0       	ldi	r21, 0x00	; 0
    685a:	2c 2f       	mov	r18, r28
    685c:	30 e0       	ldi	r19, 0x00	; 0
    685e:	fa 01       	movw	r30, r20
    6860:	ee 0f       	add	r30, r30
    6862:	ff 1f       	adc	r31, r31
    6864:	ee 0f       	add	r30, r30
    6866:	ff 1f       	adc	r31, r31
    6868:	e2 0f       	add	r30, r18
    686a:	f3 1f       	adc	r31, r19
    686c:	ee 0f       	add	r30, r30
    686e:	ff 1f       	adc	r31, r31
    6870:	ee 0f       	add	r30, r30
    6872:	ff 1f       	adc	r31, r31
    6874:	e8 5d       	subi	r30, 0xD8	; 216
    6876:	f7 4f       	sbci	r31, 0xF7	; 247
    6878:	80 81       	ld	r24, Z
    687a:	84 30       	cpi	r24, 0x04	; 4
    687c:	38 f5       	brcc	.+78     	; 0x68cc <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    687e:	df 01       	movw	r26, r30
    6880:	61 81       	ldd	r22, Z+1	; 0x01
    6882:	70 2f       	mov	r23, r16
    6884:	76 1b       	sub	r23, r22
    6886:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    6888:	0a f1       	brmi	.+66     	; 0x68cc <midiNote_to_Manual+0x8c>
    688a:	fd 01       	movw	r30, r26
    688c:	e2 81       	ldd	r30, Z+2	; 0x02
    688e:	f0 e0       	ldi	r31, 0x00	; 0
    6890:	a7 2f       	mov	r26, r23
    6892:	77 0f       	add	r23, r23
    6894:	bb 0b       	sbc	r27, r27
    6896:	ae 17       	cp	r26, r30
    6898:	bf 07       	cpc	r27, r31
    689a:	c4 f4       	brge	.+48     	; 0x68cc <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    689c:	fa 01       	movw	r30, r20
    689e:	ee 0f       	add	r30, r30
    68a0:	ff 1f       	adc	r31, r31
    68a2:	ee 0f       	add	r30, r30
    68a4:	ff 1f       	adc	r31, r31
    68a6:	e2 0f       	add	r30, r18
    68a8:	f3 1f       	adc	r31, r19
    68aa:	ee 0f       	add	r30, r30
    68ac:	ff 1f       	adc	r31, r31
    68ae:	ee 0f       	add	r30, r30
    68b0:	ff 1f       	adc	r31, r31
    68b2:	e8 5d       	subi	r30, 0xD8	; 216
    68b4:	f7 4f       	sbci	r31, 0xF7	; 247
    68b6:	93 81       	ldd	r25, Z+3	; 0x03
    68b8:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    68ba:	11 30       	cpi	r17, 0x01	; 1
    68bc:	21 f4       	brne	.+8      	; 0x68c6 <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    68be:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    68c2:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    68c6:	41 2f       	mov	r20, r17
    68c8:	ab de       	rcall	.-682    	; 0x6620 <manual_NoteOnOff>
				found |= 0xFF;
    68ca:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    68cc:	cf 5f       	subi	r28, 0xFF	; 255
    68ce:	c4 30       	cpi	r28, 0x04	; 4
    68d0:	08 f4       	brcc	.+2      	; 0x68d4 <midiNote_to_Manual+0x94>
    68d2:	c1 cf       	rjmp	.-126    	; 0x6856 <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    68d4:	11 30       	cpi	r17, 0x01	; 1
    68d6:	49 f4       	brne	.+18     	; 0x68ea <midiNote_to_Manual+0xaa>
    68d8:	91 11       	cpse	r25, r1
    68da:	07 c0       	rjmp	.+14     	; 0x68ea <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    68dc:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    68e0:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    68e4:	8f ef       	ldi	r24, 0xFF	; 255
    68e6:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    68ea:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    68ee:	d8 13       	cpse	r29, r24
    68f0:	1f c0       	rjmp	.+62     	; 0x6930 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    68f2:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    68f6:	8f 3f       	cpi	r24, 0xFF	; 255
    68f8:	d9 f0       	breq	.+54     	; 0x6930 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    68fa:	11 30       	cpi	r17, 0x01	; 1
    68fc:	31 f0       	breq	.+12     	; 0x690a <midiNote_to_Manual+0xca>
    68fe:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6902:	99 23       	and	r25, r25
    6904:	21 f0       	breq	.+8      	; 0x690e <midiNote_to_Manual+0xce>
    6906:	90 e9       	ldi	r25, 0x90	; 144
    6908:	03 c0       	rjmp	.+6      	; 0x6910 <midiNote_to_Manual+0xd0>
    690a:	90 e9       	ldi	r25, 0x90	; 144
    690c:	01 c0       	rjmp	.+2      	; 0x6910 <midiNote_to_Manual+0xd0>
    690e:	90 e8       	ldi	r25, 0x80	; 128
    6910:	89 2b       	or	r24, r25
    6912:	02 d3       	rcall	.+1540   	; 0x6f18 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    6914:	80 2f       	mov	r24, r16
    6916:	00 d3       	rcall	.+1536   	; 0x6f18 <serial1MIDISend>
    6918:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    691a:	06 c0       	rjmp	.+12     	; 0x6928 <midiNote_to_Manual+0xe8>
    691c:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    6920:	81 11       	cpse	r24, r1
    6922:	04 c0       	rjmp	.+8      	; 0x692c <midiNote_to_Manual+0xec>
    6924:	80 e4       	ldi	r24, 0x40	; 64
    6926:	03 c0       	rjmp	.+6      	; 0x692e <midiNote_to_Manual+0xee>
    6928:	80 e4       	ldi	r24, 0x40	; 64
    692a:	01 c0       	rjmp	.+2      	; 0x692e <midiNote_to_Manual+0xee>
    692c:	80 e0       	ldi	r24, 0x00	; 0
    692e:	f4 d2       	rcall	.+1512   	; 0x6f18 <serial1MIDISend>
    6930:	df 91       	pop	r29
		}
	}
}
    6932:	cf 91       	pop	r28
    6934:	1f 91       	pop	r17
    6936:	0f 91       	pop	r16
    6938:	08 95       	ret

0000693a <midiIn_Process>:
    693a:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    693c:	0c f0       	brlt	.+2      	; 0x6940 <midiIn_Process+0x6>
    693e:	4f c0       	rjmp	.+158    	; 0x69de <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6940:	88 3f       	cpi	r24, 0xF8	; 248
    6942:	b8 f0       	brcs	.+46     	; 0x6972 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    6944:	8e 3f       	cpi	r24, 0xFE	; 254
    6946:	81 f4       	brne	.+32     	; 0x6968 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6948:	81 e0       	ldi	r24, 0x01	; 1
    694a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    694e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6950:	f8 94       	cli
    6952:	06 c0       	rjmp	.+12     	; 0x6960 <midiIn_Process+0x26>
    6954:	ef e2       	ldi	r30, 0x2F	; 47
    6956:	f2 e0       	ldi	r31, 0x02	; 2
    6958:	89 e1       	ldi	r24, 0x19	; 25
    695a:	86 83       	std	Z+6, r24	; 0x06
    695c:	17 82       	std	Z+7, r1	; 0x07
    695e:	80 e0       	ldi	r24, 0x00	; 0
    6960:	81 11       	cpse	r24, r1
    6962:	f8 cf       	rjmp	.-16     	; 0x6954 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6964:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6966:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6968:	8f 3f       	cpi	r24, 0xFF	; 255
    696a:	09 f0       	breq	.+2      	; 0x696e <midiIn_Process+0x34>
    696c:	79 c0       	rjmp	.+242    	; 0x6a60 <midiIn_Process+0x126>
				midiAllReset();
    696e:	5d c9       	rjmp	.-3398   	; 0x5c2a <midiAllReset>
    6970:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6972:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    6976:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    697a:	90 e8       	ldi	r25, 0x80	; 128
    697c:	98 0f       	add	r25, r24
    697e:	90 34       	cpi	r25, 0x40	; 64
    6980:	20 f4       	brcc	.+8      	; 0x698a <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6982:	82 e0       	ldi	r24, 0x02	; 2
    6984:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6988:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    698a:	90 e2       	ldi	r25, 0x20	; 32
    698c:	98 0f       	add	r25, r24
    698e:	90 31       	cpi	r25, 0x10	; 16
    6990:	20 f4       	brcc	.+8      	; 0x699a <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6992:	82 e0       	ldi	r24, 0x02	; 2
    6994:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6998:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    699a:	82 3f       	cpi	r24, 0xF2	; 242
    699c:	21 f4       	brne	.+8      	; 0x69a6 <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    699e:	82 e0       	ldi	r24, 0x02	; 2
    69a0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    69a4:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    69a6:	80 3f       	cpi	r24, 0xF0	; 240
    69a8:	21 f4       	brne	.+8      	; 0x69b2 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    69aa:	8f ef       	ldi	r24, 0xFF	; 255
    69ac:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    69b0:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    69b2:	90 e4       	ldi	r25, 0x40	; 64
    69b4:	98 0f       	add	r25, r24
    69b6:	90 32       	cpi	r25, 0x20	; 32
    69b8:	20 f4       	brcc	.+8      	; 0x69c2 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    69ba:	81 e0       	ldi	r24, 0x01	; 1
    69bc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    69c0:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    69c2:	81 3f       	cpi	r24, 0xF1	; 241
    69c4:	11 f0       	breq	.+4      	; 0x69ca <midiIn_Process+0x90>
    69c6:	83 3f       	cpi	r24, 0xF3	; 243
    69c8:	21 f4       	brne	.+8      	; 0x69d2 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    69ca:	81 e0       	ldi	r24, 0x01	; 1
    69cc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    69d0:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    69d2:	87 3f       	cpi	r24, 0xF7	; 247
    69d4:	09 f4       	brne	.+2      	; 0x69d8 <midiIn_Process+0x9e>
    69d6:	44 c0       	rjmp	.+136    	; 0x6a60 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    69d8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    69dc:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    69de:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <midiDataByteCount>
    69e2:	e8 30       	cpi	r30, 0x08	; 8
    69e4:	40 f4       	brcc	.+16     	; 0x69f6 <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    69e6:	91 e0       	ldi	r25, 0x01	; 1
    69e8:	9e 0f       	add	r25, r30
    69ea:	90 93 1d 08 	sts	0x081D, r25	; 0x80081d <midiDataByteCount>
    69ee:	f0 e0       	ldi	r31, 0x00	; 0
    69f0:	ec 51       	subi	r30, 0x1C	; 28
    69f2:	f4 4f       	sbci	r31, 0xF4	; 244
    69f4:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    69f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    69fa:	8f 3f       	cpi	r24, 0xFF	; 255
    69fc:	89 f1       	breq	.+98     	; 0x6a60 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    69fe:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <midiDataByteCount>
    6a02:	98 17       	cp	r25, r24
    6a04:	68 f1       	brcs	.+90     	; 0x6a60 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    6a06:	90 91 ec 0b 	lds	r25, 0x0BEC	; 0x800bec <midiLastCommand>
    6a0a:	90 3f       	cpi	r25, 0xF0	; 240
    6a0c:	38 f5       	brcc	.+78     	; 0x6a5c <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6a0e:	89 2f       	mov	r24, r25
    6a10:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    6a12:	90 7f       	andi	r25, 0xF0	; 240
    6a14:	90 39       	cpi	r25, 0x90	; 144
    6a16:	71 f0       	breq	.+28     	; 0x6a34 <midiIn_Process+0xfa>
    6a18:	18 f4       	brcc	.+6      	; 0x6a20 <midiIn_Process+0xe6>
    6a1a:	90 38       	cpi	r25, 0x80	; 128
    6a1c:	31 f0       	breq	.+12     	; 0x6a2a <midiIn_Process+0xf0>
    6a1e:	1e c0       	rjmp	.+60     	; 0x6a5c <midiIn_Process+0x122>
    6a20:	90 3b       	cpi	r25, 0xB0	; 176
    6a22:	99 f0       	breq	.+38     	; 0x6a4a <midiIn_Process+0x110>
    6a24:	90 3c       	cpi	r25, 0xC0	; 192
    6a26:	b9 f0       	breq	.+46     	; 0x6a56 <midiIn_Process+0x11c>
    6a28:	19 c0       	rjmp	.+50     	; 0x6a5c <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6a2a:	40 e0       	ldi	r20, 0x00	; 0
    6a2c:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    6a30:	07 df       	rcall	.-498    	; 0x6840 <midiNote_to_Manual>
						break;
    6a32:	14 c0       	rjmp	.+40     	; 0x6a5c <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    6a34:	90 91 e5 0b 	lds	r25, 0x0BE5	; 0x800be5 <midiDataByte+0x1>
    6a38:	91 11       	cpse	r25, r1
    6a3a:	02 c0       	rjmp	.+4      	; 0x6a40 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6a3c:	40 e0       	ldi	r20, 0x00	; 0
    6a3e:	01 c0       	rjmp	.+2      	; 0x6a42 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6a40:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6a42:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    6a46:	fc de       	rcall	.-520    	; 0x6840 <midiNote_to_Manual>
						break;
    6a48:	09 c0       	rjmp	.+18     	; 0x6a5c <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6a4a:	90 91 e4 0b 	lds	r25, 0x0BE4	; 0x800be4 <midiDataByte>
    6a4e:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6a50:	29 f4       	brne	.+10     	; 0x6a5c <midiIn_Process+0x122>
    6a52:	3f de       	rcall	.-898    	; 0x66d2 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    6a54:	03 c0       	rjmp	.+6      	; 0x6a5c <midiIn_Process+0x122>
    6a56:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    6a5a:	73 db       	rcall	.-2330   	; 0x6142 <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6a5c:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
    6a60:	08 95       	ret

00006a62 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    6a62:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <serESPMidiTmp+0x2>
    6a66:	89 2f       	mov	r24, r25
    6a68:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6a6a:	90 7f       	andi	r25, 0xF0	; 240
    6a6c:	90 38       	cpi	r25, 0x80	; 128
    6a6e:	49 f0       	breq	.+18     	; 0x6a82 <proc_ESPmidi+0x20>
    6a70:	18 f4       	brcc	.+6      	; 0x6a78 <proc_ESPmidi+0x16>
    6a72:	99 23       	and	r25, r25
    6a74:	e1 f0       	breq	.+56     	; 0x6aae <proc_ESPmidi+0x4c>
    6a76:	08 95       	ret
    6a78:	90 39       	cpi	r25, 0x90	; 144
    6a7a:	41 f0       	breq	.+16     	; 0x6a8c <proc_ESPmidi+0x2a>
    6a7c:	90 3b       	cpi	r25, 0xB0	; 176
    6a7e:	89 f0       	breq	.+34     	; 0x6aa2 <proc_ESPmidi+0x40>
    6a80:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6a82:	40 e0       	ldi	r20, 0x00	; 0
    6a84:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6a88:	db ce       	rjmp	.-586    	; 0x6840 <midiNote_to_Manual>
		break;
    6a8a:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6a8c:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <serESPMidiTmp>
    6a90:	91 11       	cpse	r25, r1
    6a92:	02 c0       	rjmp	.+4      	; 0x6a98 <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    6a94:	40 e0       	ldi	r20, 0x00	; 0
    6a96:	01 c0       	rjmp	.+2      	; 0x6a9a <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    6a98:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6a9a:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6a9e:	d0 ce       	rjmp	.-608    	; 0x6840 <midiNote_to_Manual>
		break;
    6aa0:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6aa2:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6aa6:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    6aa8:	61 f4       	brne	.+24     	; 0x6ac2 <proc_ESPmidi+0x60>
    6aaa:	13 ce       	rjmp	.-986    	; 0x66d2 <midiAllNotesOff>
    6aac:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6aae:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    6ab2:	89 2f       	mov	r24, r25
    6ab4:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    6ab6:	90 7f       	andi	r25, 0xF0	; 240
    6ab8:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6aba:	19 f4       	brne	.+6      	; 0x6ac2 <proc_ESPmidi+0x60>
    6abc:	60 91 4b 16 	lds	r22, 0x164B	; 0x80164b <serESPMidiTmp>
    6ac0:	40 cb       	rjmp	.-2432   	; 0x6142 <midi_ProgramChange>
    6ac2:	08 95       	ret

00006ac4 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    6ac4:	bf 92       	push	r11
    6ac6:	cf 92       	push	r12
    6ac8:	df 92       	push	r13
    6aca:	ef 92       	push	r14
    6acc:	ff 92       	push	r15
    6ace:	0f 93       	push	r16
    6ad0:	1f 93       	push	r17
    6ad2:	cf 93       	push	r28
    6ad4:	df 93       	push	r29
    6ad6:	d8 2f       	mov	r29, r24
    6ad8:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6ada:	81 d2       	rcall	.+1282   	; 0x6fde <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6adc:	0c 2f       	mov	r16, r28
    6ade:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6ae0:	cf 71       	andi	r28, 0x1F	; 31
    6ae2:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    6ae4:	00 32       	cpi	r16, 0x20	; 32
    6ae6:	09 f4       	brne	.+2      	; 0x6aea <midiKeyPress_Process+0x26>
    6ae8:	b5 c0       	rjmp	.+362    	; 0x6c54 <midiKeyPress_Process+0x190>
    6aea:	00 23       	and	r16, r16
    6aec:	09 f4       	brne	.+2      	; 0x6af0 <midiKeyPress_Process+0x2c>
    6aee:	b4 c0       	rjmp	.+360    	; 0x6c58 <midiKeyPress_Process+0x194>
    6af0:	b7 c0       	rjmp	.+366    	; 0x6c60 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6af2:	d0 ff       	sbrs	r29, 0
    6af4:	ac c0       	rjmp	.+344    	; 0x6c4e <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6af6:	20 e2       	ldi	r18, 0x20	; 32
    6af8:	c2 9f       	mul	r28, r18
    6afa:	c0 01       	movw	r24, r0
    6afc:	11 24       	eor	r1, r1
    6afe:	fb 2c       	mov	r15, r11
    6b00:	f8 2a       	or	r15, r24
    6b02:	8f 2d       	mov	r24, r15
    6b04:	6a dd       	rcall	.-1324   	; 0x65da <moduleBit_to_manualNote>
    6b06:	c8 2e       	mov	r12, r24
    6b08:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6b0a:	18 2f       	mov	r17, r24
    6b0c:	8f 3f       	cpi	r24, 0xFF	; 255
    6b0e:	09 f4       	brne	.+2      	; 0x6b12 <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6b10:	94 c0       	rjmp	.+296    	; 0x6c3a <midiKeyPress_Process+0x176>
    6b12:	69 2f       	mov	r22, r25
    6b14:	7a dc       	rcall	.-1804   	; 0x640a <Manual_to_MidiNote>
    6b16:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    6b18:	8f 3f       	cpi	r24, 0xFF	; 255
    6b1a:	09 f1       	breq	.+66     	; 0x6b5e <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    6b1c:	00 32       	cpi	r16, 0x20	; 32
    6b1e:	31 f0       	breq	.+12     	; 0x6b2c <midiKeyPress_Process+0x68>
    6b20:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6b24:	99 23       	and	r25, r25
    6b26:	21 f0       	breq	.+8      	; 0x6b30 <midiKeyPress_Process+0x6c>
    6b28:	90 e9       	ldi	r25, 0x90	; 144
    6b2a:	03 c0       	rjmp	.+6      	; 0x6b32 <midiKeyPress_Process+0x6e>
    6b2c:	90 e9       	ldi	r25, 0x90	; 144
    6b2e:	01 c0       	rjmp	.+2      	; 0x6b32 <midiKeyPress_Process+0x6e>
    6b30:	90 e8       	ldi	r25, 0x80	; 128
    6b32:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    6b34:	f1 d1       	rcall	.+994    	; 0x6f18 <serial1MIDISend>
    6b36:	8d 2d       	mov	r24, r13
    6b38:	ef d1       	rcall	.+990    	; 0x6f18 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6b3a:	01 11       	cpse	r16, r1
    6b3c:	06 c0       	rjmp	.+12     	; 0x6b4a <midiKeyPress_Process+0x86>
    6b3e:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    6b42:	81 11       	cpse	r24, r1
    6b44:	04 c0       	rjmp	.+8      	; 0x6b4e <midiKeyPress_Process+0x8a>
    6b46:	80 e4       	ldi	r24, 0x40	; 64
    6b48:	03 c0       	rjmp	.+6      	; 0x6b50 <midiKeyPress_Process+0x8c>
    6b4a:	80 e4       	ldi	r24, 0x40	; 64
    6b4c:	01 c0       	rjmp	.+2      	; 0x6b50 <midiKeyPress_Process+0x8c>
    6b4e:	80 e0       	ldi	r24, 0x00	; 0
    6b50:	e3 d1       	rcall	.+966    	; 0x6f18 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    6b52:	00 32       	cpi	r16, 0x20	; 32
    6b54:	21 f4       	brne	.+8      	; 0x6b5e <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    6b56:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    6b5a:	e0 92 05 02 	sts	0x0205, r14	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    6b5e:	41 e0       	ldi	r20, 0x01	; 1
    6b60:	00 32       	cpi	r16, 0x20	; 32
    6b62:	09 f0       	breq	.+2      	; 0x6b66 <midiKeyPress_Process+0xa2>
    6b64:	40 e0       	ldi	r20, 0x00	; 0
    6b66:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    6b68:	11 11       	cpse	r17, r1
    6b6a:	19 c0       	rjmp	.+50     	; 0x6b9e <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6b6c:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers>
    6b70:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6b72:	19 f4       	brne	.+6      	; 0x6b7a <midiKeyPress_Process+0xb6>
    6b74:	6e 2d       	mov	r22, r14
    6b76:	81 e0       	ldi	r24, 0x01	; 1
    6b78:	53 dd       	rcall	.-1370   	; 0x6620 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    6b7a:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x1>
    6b7e:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6b80:	21 f4       	brne	.+8      	; 0x6b8a <midiKeyPress_Process+0xc6>
    6b82:	4d 2d       	mov	r20, r13
    6b84:	6e 2d       	mov	r22, r14
    6b86:	82 e0       	ldi	r24, 0x02	; 2
    6b88:	4b dd       	rcall	.-1386   	; 0x6620 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    6b8a:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x3>
    6b8e:	8f 3f       	cpi	r24, 0xFF	; 255
    6b90:	09 f0       	breq	.+2      	; 0x6b94 <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6b92:	53 c0       	rjmp	.+166    	; 0x6c3a <midiKeyPress_Process+0x176>
    6b94:	4d 2d       	mov	r20, r13
    6b96:	6e 2d       	mov	r22, r14
    6b98:	83 e0       	ldi	r24, 0x03	; 3
    6b9a:	42 dd       	rcall	.-1404   	; 0x6620 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6b9c:	4e c0       	rjmp	.+156    	; 0x6c3a <midiKeyPress_Process+0x176>
    6b9e:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6ba0:	c9 f4       	brne	.+50     	; 0x6bd4 <midiKeyPress_Process+0x110>
    6ba2:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x2>
    6ba6:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6ba8:	19 f4       	brne	.+6      	; 0x6bb0 <midiKeyPress_Process+0xec>
    6baa:	6e 2d       	mov	r22, r14
    6bac:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6bae:	38 dd       	rcall	.-1424   	; 0x6620 <manual_NoteOnOff>
    6bb0:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x4>
    6bb4:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6bb6:	21 f4       	brne	.+8      	; 0x6bc0 <midiKeyPress_Process+0xfc>
    6bb8:	4d 2d       	mov	r20, r13
    6bba:	6e 2d       	mov	r22, r14
    6bbc:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6bbe:	30 dd       	rcall	.-1440   	; 0x6620 <manual_NoteOnOff>
    6bc0:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x6>
    6bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    6bc6:	09 f0       	breq	.+2      	; 0x6bca <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6bc8:	38 c0       	rjmp	.+112    	; 0x6c3a <midiKeyPress_Process+0x176>
    6bca:	4d 2d       	mov	r20, r13
    6bcc:	6e 2d       	mov	r22, r14
    6bce:	80 e0       	ldi	r24, 0x00	; 0
    6bd0:	27 dd       	rcall	.-1458   	; 0x6620 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6bd2:	33 c0       	rjmp	.+102    	; 0x6c3a <midiKeyPress_Process+0x176>
    6bd4:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    6bd6:	c1 f4       	brne	.+48     	; 0x6c08 <midiKeyPress_Process+0x144>
    6bd8:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    6bde:	19 f4       	brne	.+6      	; 0x6be6 <midiKeyPress_Process+0x122>
    6be0:	6e 2d       	mov	r22, r14
    6be2:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    6be4:	1d dd       	rcall	.-1478   	; 0x6620 <manual_NoteOnOff>
    6be6:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6bea:	8f 3f       	cpi	r24, 0xFF	; 255
    6bec:	21 f4       	brne	.+8      	; 0x6bf6 <midiKeyPress_Process+0x132>
    6bee:	4d 2d       	mov	r20, r13
    6bf0:	6e 2d       	mov	r22, r14
    6bf2:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6bf4:	15 dd       	rcall	.-1494   	; 0x6620 <manual_NoteOnOff>
    6bf6:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6bfa:	8f 3f       	cpi	r24, 0xFF	; 255
    6bfc:	f1 f4       	brne	.+60     	; 0x6c3a <midiKeyPress_Process+0x176>
    6bfe:	4d 2d       	mov	r20, r13
    6c00:	6e 2d       	mov	r22, r14
    6c02:	81 e0       	ldi	r24, 0x01	; 1
    6c04:	0d dd       	rcall	.-1510   	; 0x6620 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6c06:	19 c0       	rjmp	.+50     	; 0x6c3a <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    6c08:	13 30       	cpi	r17, 0x03	; 3
    6c0a:	b9 f4       	brne	.+46     	; 0x6c3a <midiKeyPress_Process+0x176>
    6c0c:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6c10:	8f 3f       	cpi	r24, 0xFF	; 255
    6c12:	19 f4       	brne	.+6      	; 0x6c1a <midiKeyPress_Process+0x156>
    6c14:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    6c16:	80 e0       	ldi	r24, 0x00	; 0
    6c18:	03 dd       	rcall	.-1530   	; 0x6620 <manual_NoteOnOff>
    6c1a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    6c20:	21 f4       	brne	.+8      	; 0x6c2a <midiKeyPress_Process+0x166>
    6c22:	4d 2d       	mov	r20, r13
    6c24:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	fb dc       	rcall	.-1546   	; 0x6620 <manual_NoteOnOff>
    6c2a:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6c2e:	8f 3f       	cpi	r24, 0xFF	; 255
    6c30:	21 f4       	brne	.+8      	; 0x6c3a <midiKeyPress_Process+0x176>
    6c32:	4d 2d       	mov	r20, r13
    6c34:	6e 2d       	mov	r22, r14
    6c36:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    6c38:	f3 dc       	rcall	.-1562   	; 0x6620 <manual_NoteOnOff>
    6c3a:	8f 2d       	mov	r24, r15
    6c3c:	8d d8       	rcall	.-3814   	; 0x5d58 <moduleBit_to_registerNr>
    6c3e:	00 32       	cpi	r16, 0x20	; 32
    6c40:	11 f4       	brne	.+4      	; 0x6c46 <midiKeyPress_Process+0x182>
    6c42:	20 e8       	ldi	r18, 0x80	; 128
    6c44:	01 c0       	rjmp	.+2      	; 0x6c48 <midiKeyPress_Process+0x184>
    6c46:	20 e0       	ldi	r18, 0x00	; 0
    6c48:	82 2b       	or	r24, r18
    6c4a:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6c4e:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6c50:	cf 5f       	subi	r28, 0xFF	; 255
    6c52:	03 c0       	rjmp	.+6      	; 0x6c5a <midiKeyPress_Process+0x196>
    6c54:	c0 e0       	ldi	r28, 0x00	; 0
    6c56:	01 c0       	rjmp	.+2      	; 0x6c5a <midiKeyPress_Process+0x196>
    6c58:	c0 e0       	ldi	r28, 0x00	; 0
    6c5a:	c8 30       	cpi	r28, 0x08	; 8
    6c5c:	08 f4       	brcc	.+2      	; 0x6c60 <midiKeyPress_Process+0x19c>
    6c5e:	49 cf       	rjmp	.-366    	; 0x6af2 <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6c60:	df 91       	pop	r29
    6c62:	cf 91       	pop	r28
    6c64:	1f 91       	pop	r17
    6c66:	0f 91       	pop	r16
    6c68:	ff 90       	pop	r15
    6c6a:	ef 90       	pop	r14
    6c6c:	df 90       	pop	r13
    6c6e:	cf 90       	pop	r12
    6c70:	bf 90       	pop	r11
    6c72:	08 95       	ret

00006c74 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	if (midiThrough.OutChannel <= MIDI_CHANNEL_16) {
    6c74:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    6c78:	80 31       	cpi	r24, 0x10	; 16
    6c7a:	30 f4       	brcc	.+12     	; 0x6c88 <midiSendAllNotesOff+0x14>
		serial1MIDISend(MIDI_CTRLCHG | (midiThrough.OutChannel));
    6c7c:	80 6b       	ori	r24, 0xB0	; 176
    6c7e:	4c d1       	rcall	.+664    	; 0x6f18 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6c80:	8b e7       	ldi	r24, 0x7B	; 123
    6c82:	4a d1       	rcall	.+660    	; 0x6f18 <serial1MIDISend>
		serial1MIDISend(0);
    6c84:	80 e0       	ldi	r24, 0x00	; 0
    6c86:	48 c1       	rjmp	.+656    	; 0x6f18 <serial1MIDISend>
    6c88:	08 95       	ret

00006c8a <midi_SendActiveSense>:
    6c8a:	8e ef       	ldi	r24, 0xFE	; 254
// 		}
// 	}
}

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6c8c:	45 c1       	rjmp	.+650    	; 0x6f18 <serial1MIDISend>
    6c8e:	08 95       	ret

00006c90 <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    6c90:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6c94:	88 23       	and	r24, r24
    6c96:	21 f0       	breq	.+8      	; 0x6ca0 <midi_CheckTxActiveSense+0x10>
    6c98:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    6c9e:	99 f4       	brne	.+38     	; 0x6cc6 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    6ca0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6ca2:	f8 94       	cli
    6ca4:	81 e0       	ldi	r24, 0x01	; 1
    6ca6:	06 c0       	rjmp	.+12     	; 0x6cb4 <midi_CheckTxActiveSense+0x24>
    6ca8:	ef e2       	ldi	r30, 0x2F	; 47
    6caa:	f2 e0       	ldi	r31, 0x02	; 2
    6cac:	8a e0       	ldi	r24, 0x0A	; 10
    6cae:	80 8b       	std	Z+16, r24	; 0x10
    6cb0:	11 8a       	std	Z+17, r1	; 0x11
    6cb2:	80 e0       	ldi	r24, 0x00	; 0
    6cb4:	81 11       	cpse	r24, r1
    6cb6:	f8 cf       	rjmp	.-16     	; 0x6ca8 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6cb8:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    6cba:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting>
    6cbe:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    6cc0:	e4 df       	rcall	.-56     	; 0x6c8a <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    6cc2:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6cc6:	08 95       	ret

00006cc8 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6cc8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6ccc:	8f e1       	ldi	r24, 0x1F	; 31
    6cce:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6cd2:	e9 ec       	ldi	r30, 0xC9	; 201
    6cd4:	f0 e0       	ldi	r31, 0x00	; 0
    6cd6:	80 81       	ld	r24, Z
    6cd8:	88 69       	ori	r24, 0x98	; 152
    6cda:	80 83       	st	Z, r24
    6cdc:	ea ec       	ldi	r30, 0xCA	; 202
    6cde:	f0 e0       	ldi	r31, 0x00	; 0
    6ce0:	80 81       	ld	r24, Z
    6ce2:	86 60       	ori	r24, 0x06	; 6
    6ce4:	80 83       	st	Z, r24
    6ce6:	10 92 44 16 	sts	0x1644, r1	; 0x801644 <midiRxInIndex>
    6cea:	10 92 53 16 	sts	0x1653, r1	; 0x801653 <midiRxOutIndex>
    6cee:	10 92 ef 13 	sts	0x13EF, r1	; 0x8013ef <midiTxInIndex>
    6cf2:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <midiTxOutIndex>
    6cf6:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiRxOvfl>
    6cfa:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <midiTxOvfl>
    6cfe:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
    6d02:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
    6d06:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
    6d0a:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
    6d0e:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6d12:	08 95       	ret

00006d14 <__vector_36>:
    6d14:	1f 92       	push	r1
    6d16:	0f 92       	push	r0
    6d18:	0f b6       	in	r0, 0x3f	; 63
    6d1a:	0f 92       	push	r0
    6d1c:	11 24       	eor	r1, r1
    6d1e:	0b b6       	in	r0, 0x3b	; 59
    6d20:	0f 92       	push	r0
    6d22:	8f 93       	push	r24
    6d24:	9f 93       	push	r25
    6d26:	ef 93       	push	r30
    6d28:	ff 93       	push	r31
    6d2a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6d2e:	e0 91 44 16 	lds	r30, 0x1644	; 0x801644 <midiRxInIndex>
    6d32:	f0 e0       	ldi	r31, 0x00	; 0
    6d34:	ef 5b       	subi	r30, 0xBF	; 191
    6d36:	fb 4e       	sbci	r31, 0xEB	; 235
    6d38:	80 83       	st	Z, r24
    6d3a:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6d3e:	8f 5f       	subi	r24, 0xFF	; 255
    6d40:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6d44:	89 13       	cpse	r24, r25
    6d46:	0e c0       	rjmp	.+28     	; 0x6d64 <__vector_36+0x50>
    6d48:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOvflCount>
    6d4c:	88 23       	and	r24, r24
    6d4e:	31 f0       	breq	.+12     	; 0x6d5c <__vector_36+0x48>
    6d50:	8f 3f       	cpi	r24, 0xFF	; 255
    6d52:	51 f0       	breq	.+20     	; 0x6d68 <__vector_36+0x54>
    6d54:	8f 5f       	subi	r24, 0xFF	; 255
    6d56:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6d5a:	06 c0       	rjmp	.+12     	; 0x6d68 <__vector_36+0x54>
    6d5c:	81 e0       	ldi	r24, 0x01	; 1
    6d5e:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6d62:	02 c0       	rjmp	.+4      	; 0x6d68 <__vector_36+0x54>
    6d64:	80 93 44 16 	sts	0x1644, r24	; 0x801644 <midiRxInIndex>
    6d68:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6d6c:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6d70:	89 17       	cp	r24, r25
    6d72:	30 f4       	brcc	.+12     	; 0x6d80 <__vector_36+0x6c>
    6d74:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6d78:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6d7c:	89 1b       	sub	r24, r25
    6d7e:	05 c0       	rjmp	.+10     	; 0x6d8a <__vector_36+0x76>
    6d80:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6d84:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6d88:	89 1b       	sub	r24, r25
    6d8a:	90 91 41 15 	lds	r25, 0x1541	; 0x801541 <midiRxBuffUsage>
    6d8e:	98 17       	cp	r25, r24
    6d90:	10 f4       	brcc	.+4      	; 0x6d96 <__vector_36+0x82>
    6d92:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <midiRxBuffUsage>
    6d96:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    6d9a:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    6d9e:	01 96       	adiw	r24, 0x01	; 1
    6da0:	90 93 da 18 	sts	0x18DA, r25	; 0x8018da <midiRxBytesCount+0x1>
    6da4:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <midiRxBytesCount>
    6da8:	ff 91       	pop	r31
    6daa:	ef 91       	pop	r30
    6dac:	9f 91       	pop	r25
    6dae:	8f 91       	pop	r24
    6db0:	0f 90       	pop	r0
    6db2:	0b be       	out	0x3b, r0	; 59
    6db4:	0f 90       	pop	r0
    6db6:	0f be       	out	0x3f, r0	; 63
    6db8:	0f 90       	pop	r0
    6dba:	1f 90       	pop	r1
    6dbc:	18 95       	reti

00006dbe <__vector_37>:
    6dbe:	1f 92       	push	r1
    6dc0:	0f 92       	push	r0
    6dc2:	0f b6       	in	r0, 0x3f	; 63
    6dc4:	0f 92       	push	r0
    6dc6:	11 24       	eor	r1, r1
    6dc8:	0b b6       	in	r0, 0x3b	; 59
    6dca:	0f 92       	push	r0
    6dcc:	8f 93       	push	r24
    6dce:	9f 93       	push	r25
    6dd0:	ef 93       	push	r30
    6dd2:	ff 93       	push	r31
    6dd4:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6dd8:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6ddc:	98 17       	cp	r25, r24
    6dde:	b9 f0       	breq	.+46     	; 0x6e0e <__vector_37+0x50>
    6de0:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6de4:	f0 e0       	ldi	r31, 0x00	; 0
    6de6:	ee 5b       	subi	r30, 0xBE	; 190
    6de8:	fa 4e       	sbci	r31, 0xEA	; 234
    6dea:	80 81       	ld	r24, Z
    6dec:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6df0:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6df4:	8f 5f       	subi	r24, 0xFF	; 255
    6df6:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <midiTxOutIndex>
    6dfa:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    6dfe:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    6e02:	01 96       	adiw	r24, 0x01	; 1
    6e04:	90 93 51 16 	sts	0x1651, r25	; 0x801651 <midiTxBytesCount+0x1>
    6e08:	80 93 50 16 	sts	0x1650, r24	; 0x801650 <midiTxBytesCount>
    6e0c:	05 c0       	rjmp	.+10     	; 0x6e18 <__vector_37+0x5a>
    6e0e:	e9 ec       	ldi	r30, 0xC9	; 201
    6e10:	f0 e0       	ldi	r31, 0x00	; 0
    6e12:	80 81       	ld	r24, Z
    6e14:	8f 7d       	andi	r24, 0xDF	; 223
    6e16:	80 83       	st	Z, r24
    6e18:	ff 91       	pop	r31
    6e1a:	ef 91       	pop	r30
    6e1c:	9f 91       	pop	r25
    6e1e:	8f 91       	pop	r24
    6e20:	0f 90       	pop	r0
    6e22:	0b be       	out	0x3b, r0	; 59
    6e24:	0f 90       	pop	r0
    6e26:	0f be       	out	0x3f, r0	; 63
    6e28:	0f 90       	pop	r0
    6e2a:	1f 90       	pop	r1
    6e2c:	18 95       	reti

00006e2e <serial0SER_USBSend>:
    6e2e:	e0 91 d7 18 	lds	r30, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    6e32:	f0 91 d8 18 	lds	r31, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    6e36:	a1 ec       	ldi	r26, 0xC1	; 193
    6e38:	b0 e0       	ldi	r27, 0x00	; 0
    6e3a:	9c 91       	ld	r25, X
    6e3c:	9f 7d       	andi	r25, 0xDF	; 223
    6e3e:	9c 93       	st	X, r25
    6e40:	af 01       	movw	r20, r30
    6e42:	4f 5f       	subi	r20, 0xFF	; 255
    6e44:	5f 4f       	sbci	r21, 0xFF	; 255
    6e46:	80 83       	st	Z, r24
    6e48:	83 e1       	ldi	r24, 0x13	; 19
    6e4a:	4c 3e       	cpi	r20, 0xEC	; 236
    6e4c:	58 07       	cpc	r21, r24
    6e4e:	19 f0       	breq	.+6      	; 0x6e56 <serial0SER_USBSend+0x28>
    6e50:	10 f0       	brcs	.+4      	; 0x6e56 <serial0SER_USBSend+0x28>
    6e52:	4d ee       	ldi	r20, 0xED	; 237
    6e54:	5b e0       	ldi	r21, 0x0B	; 11
    6e56:	9f b7       	in	r25, 0x3f	; 63
    6e58:	f8 94       	cli
    6e5a:	81 e0       	ldi	r24, 0x01	; 1
    6e5c:	05 c0       	rjmp	.+10     	; 0x6e68 <serial0SER_USBSend+0x3a>
    6e5e:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    6e62:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    6e66:	80 e0       	ldi	r24, 0x00	; 0
    6e68:	81 11       	cpse	r24, r1
    6e6a:	f9 cf       	rjmp	.-14     	; 0x6e5e <serial0SER_USBSend+0x30>
    6e6c:	9f bf       	out	0x3f, r25	; 63
    6e6e:	42 17       	cp	r20, r18
    6e70:	53 07       	cpc	r21, r19
    6e72:	49 f4       	brne	.+18     	; 0x6e86 <serial0SER_USBSend+0x58>
    6e74:	8f ef       	ldi	r24, 0xFF	; 255
    6e76:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    6e7a:	e1 ec       	ldi	r30, 0xC1	; 193
    6e7c:	f0 e0       	ldi	r31, 0x00	; 0
    6e7e:	80 81       	ld	r24, Z
    6e80:	80 62       	ori	r24, 0x20	; 32
    6e82:	80 83       	st	Z, r24
    6e84:	08 95       	ret
    6e86:	50 93 d8 18 	sts	0x18D8, r21	; 0x8018d8 <serUSBTxInIndex+0x1>
    6e8a:	40 93 d7 18 	sts	0x18D7, r20	; 0x8018d7 <serUSBTxInIndex>
    6e8e:	e1 ec       	ldi	r30, 0xC1	; 193
    6e90:	f0 e0       	ldi	r31, 0x00	; 0
    6e92:	80 81       	ld	r24, Z
    6e94:	80 62       	ori	r24, 0x20	; 32
    6e96:	80 83       	st	Z, r24
    6e98:	08 95       	ret

00006e9a <serial0USB_logMIDIin>:
    6e9a:	cf 93       	push	r28
    6e9c:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6ea0:	99 23       	and	r25, r25
    6ea2:	61 f0       	breq	.+24     	; 0x6ebc <serial0USB_logMIDIin+0x22>
    6ea4:	c8 2f       	mov	r28, r24
    6ea6:	89 e6       	ldi	r24, 0x69	; 105
    6ea8:	c2 df       	rcall	.-124    	; 0x6e2e <serial0SER_USBSend>
    6eaa:	8c 2f       	mov	r24, r28
    6eac:	82 95       	swap	r24
    6eae:	8f 70       	andi	r24, 0x0F	; 15
    6eb0:	b5 d2       	rcall	.+1386   	; 0x741c <nibbleToChr>
    6eb2:	bd df       	rcall	.-134    	; 0x6e2e <serial0SER_USBSend>
    6eb4:	8c 2f       	mov	r24, r28
    6eb6:	8f 70       	andi	r24, 0x0F	; 15
    6eb8:	b1 d2       	rcall	.+1378   	; 0x741c <nibbleToChr>
    6eba:	b9 df       	rcall	.-142    	; 0x6e2e <serial0SER_USBSend>
    6ebc:	cf 91       	pop	r28
    6ebe:	08 95       	ret

00006ec0 <serial1MIDIReadRx>:
    6ec0:	cf 93       	push	r28
    6ec2:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6ec6:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6eca:	98 17       	cp	r25, r24
    6ecc:	71 f0       	breq	.+28     	; 0x6eea <serial1MIDIReadRx+0x2a>
    6ece:	e0 91 53 16 	lds	r30, 0x1653	; 0x801653 <midiRxOutIndex>
    6ed2:	f0 e0       	ldi	r31, 0x00	; 0
    6ed4:	ef 5b       	subi	r30, 0xBF	; 191
    6ed6:	fb 4e       	sbci	r31, 0xEB	; 235
    6ed8:	c0 81       	ld	r28, Z
    6eda:	8c 2f       	mov	r24, r28
    6edc:	de df       	rcall	.-68     	; 0x6e9a <serial0USB_logMIDIin>
    6ede:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6ee2:	8f 5f       	subi	r24, 0xFF	; 255
    6ee4:	80 93 53 16 	sts	0x1653, r24	; 0x801653 <midiRxOutIndex>
    6ee8:	01 c0       	rjmp	.+2      	; 0x6eec <serial1MIDIReadRx+0x2c>
    6eea:	cd ef       	ldi	r28, 0xFD	; 253
    6eec:	8c 2f       	mov	r24, r28
    6eee:	cf 91       	pop	r28
    6ef0:	08 95       	ret

00006ef2 <serial0USB_logMIDIout>:
    6ef2:	cf 93       	push	r28
    6ef4:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6ef8:	99 23       	and	r25, r25
    6efa:	61 f0       	breq	.+24     	; 0x6f14 <serial0USB_logMIDIout+0x22>
    6efc:	c8 2f       	mov	r28, r24
    6efe:	8f e6       	ldi	r24, 0x6F	; 111
    6f00:	96 df       	rcall	.-212    	; 0x6e2e <serial0SER_USBSend>
    6f02:	8c 2f       	mov	r24, r28
    6f04:	82 95       	swap	r24
    6f06:	8f 70       	andi	r24, 0x0F	; 15
    6f08:	89 d2       	rcall	.+1298   	; 0x741c <nibbleToChr>
    6f0a:	91 df       	rcall	.-222    	; 0x6e2e <serial0SER_USBSend>
    6f0c:	8c 2f       	mov	r24, r28
    6f0e:	8f 70       	andi	r24, 0x0F	; 15
    6f10:	85 d2       	rcall	.+1290   	; 0x741c <nibbleToChr>
    6f12:	8d df       	rcall	.-230    	; 0x6e2e <serial0SER_USBSend>
    6f14:	cf 91       	pop	r28
    6f16:	08 95       	ret

00006f18 <serial1MIDISend>:
    6f18:	cf 93       	push	r28
    6f1a:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6f1e:	99 23       	and	r25, r25
    6f20:	71 f0       	breq	.+28     	; 0x6f3e <serial1MIDISend+0x26>
    6f22:	88 23       	and	r24, r24
    6f24:	64 f4       	brge	.+24     	; 0x6f3e <serial1MIDISend+0x26>
    6f26:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <midiTxLastCmd>
    6f2a:	89 17       	cp	r24, r25
    6f2c:	09 f4       	brne	.+2      	; 0x6f30 <serial1MIDISend+0x18>
    6f2e:	55 c0       	rjmp	.+170    	; 0x6fda <serial1MIDISend+0xc2>
    6f30:	80 3a       	cpi	r24, 0xA0	; 160
    6f32:	18 f4       	brcc	.+6      	; 0x6f3a <serial1MIDISend+0x22>
    6f34:	80 93 fd 13 	sts	0x13FD, r24	; 0x8013fd <midiTxLastCmd>
    6f38:	02 c0       	rjmp	.+4      	; 0x6f3e <serial1MIDISend+0x26>
    6f3a:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6f3e:	2f b7       	in	r18, 0x3f	; 63
    6f40:	f8 94       	cli
    6f42:	91 e0       	ldi	r25, 0x01	; 1
    6f44:	06 c0       	rjmp	.+12     	; 0x6f52 <serial1MIDISend+0x3a>
    6f46:	ef e2       	ldi	r30, 0x2F	; 47
    6f48:	f2 e0       	ldi	r31, 0x02	; 2
    6f4a:	9a e0       	ldi	r25, 0x0A	; 10
    6f4c:	90 8b       	std	Z+16, r25	; 0x10
    6f4e:	11 8a       	std	Z+17, r1	; 0x11
    6f50:	90 e0       	ldi	r25, 0x00	; 0
    6f52:	91 11       	cpse	r25, r1
    6f54:	f8 cf       	rjmp	.-16     	; 0x6f46 <serial1MIDISend+0x2e>
    6f56:	c8 2f       	mov	r28, r24
    6f58:	2f bf       	out	0x3f, r18	; 63
    6f5a:	e9 ec       	ldi	r30, 0xC9	; 201
    6f5c:	f0 e0       	ldi	r31, 0x00	; 0
    6f5e:	80 81       	ld	r24, Z
    6f60:	8f 7d       	andi	r24, 0xDF	; 223
    6f62:	80 83       	st	Z, r24
    6f64:	8c 2f       	mov	r24, r28
    6f66:	c5 df       	rcall	.-118    	; 0x6ef2 <serial0USB_logMIDIout>
    6f68:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <midiTxInIndex>
    6f6c:	f0 e0       	ldi	r31, 0x00	; 0
    6f6e:	ee 5b       	subi	r30, 0xBE	; 190
    6f70:	fa 4e       	sbci	r31, 0xEA	; 234
    6f72:	c0 83       	st	Z, r28
    6f74:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6f78:	8f 5f       	subi	r24, 0xFF	; 255
    6f7a:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6f7e:	89 13       	cpse	r24, r25
    6f80:	0e c0       	rjmp	.+28     	; 0x6f9e <serial1MIDISend+0x86>
    6f82:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <midiTxOvflCount>
    6f86:	88 23       	and	r24, r24
    6f88:	31 f0       	breq	.+12     	; 0x6f96 <serial1MIDISend+0x7e>
    6f8a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f8c:	51 f0       	breq	.+20     	; 0x6fa2 <serial1MIDISend+0x8a>
    6f8e:	8f 5f       	subi	r24, 0xFF	; 255
    6f90:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6f94:	06 c0       	rjmp	.+12     	; 0x6fa2 <serial1MIDISend+0x8a>
    6f96:	81 e0       	ldi	r24, 0x01	; 1
    6f98:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6f9c:	02 c0       	rjmp	.+4      	; 0x6fa2 <serial1MIDISend+0x8a>
    6f9e:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <midiTxInIndex>
    6fa2:	90 91 ef 13 	lds	r25, 0x13EF	; 0x8013ef <midiTxInIndex>
    6fa6:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6faa:	89 17       	cp	r24, r25
    6fac:	30 f4       	brcc	.+12     	; 0x6fba <serial1MIDISend+0xa2>
    6fae:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6fb2:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6fb6:	89 1b       	sub	r24, r25
    6fb8:	05 c0       	rjmp	.+10     	; 0x6fc4 <serial1MIDISend+0xac>
    6fba:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6fbe:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6fc2:	89 1b       	sub	r24, r25
    6fc4:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <midiTxBuffUsage>
    6fc8:	98 17       	cp	r25, r24
    6fca:	10 f4       	brcc	.+4      	; 0x6fd0 <serial1MIDISend+0xb8>
    6fcc:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <midiTxBuffUsage>
    6fd0:	e9 ec       	ldi	r30, 0xC9	; 201
    6fd2:	f0 e0       	ldi	r31, 0x00	; 0
    6fd4:	80 81       	ld	r24, Z
    6fd6:	80 62       	ori	r24, 0x20	; 32
    6fd8:	80 83       	st	Z, r24
    6fda:	cf 91       	pop	r28
    6fdc:	08 95       	ret

00006fde <serial0USB_logPipeIn>:
    6fde:	cf 93       	push	r28
    6fe0:	df 93       	push	r29
    6fe2:	20 91 52 16 	lds	r18, 0x1652	; 0x801652 <serUSB_Active>
    6fe6:	22 23       	and	r18, r18
    6fe8:	a9 f0       	breq	.+42     	; 0x7014 <serial0USB_logPipeIn+0x36>
    6fea:	c9 2f       	mov	r28, r25
    6fec:	d8 2f       	mov	r29, r24
    6fee:	8b e6       	ldi	r24, 0x6B	; 107
    6ff0:	1e df       	rcall	.-452    	; 0x6e2e <serial0SER_USBSend>
    6ff2:	8c 2f       	mov	r24, r28
    6ff4:	82 95       	swap	r24
    6ff6:	8f 70       	andi	r24, 0x0F	; 15
    6ff8:	11 d2       	rcall	.+1058   	; 0x741c <nibbleToChr>
    6ffa:	19 df       	rcall	.-462    	; 0x6e2e <serial0SER_USBSend>
    6ffc:	cf 70       	andi	r28, 0x0F	; 15
    6ffe:	8c 2f       	mov	r24, r28
    7000:	0d d2       	rcall	.+1050   	; 0x741c <nibbleToChr>
    7002:	15 df       	rcall	.-470    	; 0x6e2e <serial0SER_USBSend>
    7004:	8d 2f       	mov	r24, r29
    7006:	82 95       	swap	r24
    7008:	8f 70       	andi	r24, 0x0F	; 15
    700a:	08 d2       	rcall	.+1040   	; 0x741c <nibbleToChr>
    700c:	10 df       	rcall	.-480    	; 0x6e2e <serial0SER_USBSend>
    700e:	8c 2f       	mov	r24, r28
    7010:	05 d2       	rcall	.+1034   	; 0x741c <nibbleToChr>
    7012:	0d df       	rcall	.-486    	; 0x6e2e <serial0SER_USBSend>
    7014:	df 91       	pop	r29
    7016:	cf 91       	pop	r28
    7018:	08 95       	ret

0000701a <serial0SER_USB_sendStringP>:
    701a:	cf 93       	push	r28
    701c:	df 93       	push	r29
    701e:	fc 01       	movw	r30, r24
    7020:	02 c0       	rjmp	.+4      	; 0x7026 <serial0SER_USB_sendStringP+0xc>
    7022:	05 df       	rcall	.-502    	; 0x6e2e <serial0SER_USBSend>
    7024:	fe 01       	movw	r30, r28
    7026:	ef 01       	movw	r28, r30
    7028:	21 96       	adiw	r28, 0x01	; 1
    702a:	84 91       	lpm	r24, Z
    702c:	88 23       	and	r24, r24
    702e:	21 f0       	breq	.+8      	; 0x7038 <serial0SER_USB_sendStringP+0x1e>
    7030:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    7034:	9f 3f       	cpi	r25, 0xFF	; 255
    7036:	a9 f7       	brne	.-22     	; 0x7022 <serial0SER_USB_sendStringP+0x8>
    7038:	df 91       	pop	r29
    703a:	cf 91       	pop	r28
    703c:	08 95       	ret

0000703e <serial0SER_USB_sendCRLF>:
    703e:	8e e3       	ldi	r24, 0x3E	; 62
    7040:	93 e1       	ldi	r25, 0x13	; 19
    7042:	eb cf       	rjmp	.-42     	; 0x701a <serial0SER_USB_sendStringP>
    7044:	08 95       	ret

00007046 <init_Serial0SerUSB>:
    7046:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    704a:	88 e0       	ldi	r24, 0x08	; 8
    704c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    7050:	e1 ec       	ldi	r30, 0xC1	; 193
    7052:	f0 e0       	ldi	r31, 0x00	; 0
    7054:	80 81       	ld	r24, Z
    7056:	88 69       	ori	r24, 0x98	; 152
    7058:	80 83       	st	Z, r24
    705a:	e2 ec       	ldi	r30, 0xC2	; 194
    705c:	f0 e0       	ldi	r31, 0x00	; 0
    705e:	80 81       	ld	r24, Z
    7060:	86 60       	ori	r24, 0x06	; 6
    7062:	80 83       	st	Z, r24
    7064:	81 e0       	ldi	r24, 0x01	; 1
    7066:	94 e1       	ldi	r25, 0x14	; 20
    7068:	90 93 55 16 	sts	0x1655, r25	; 0x801655 <serUSBRxInIndex+0x1>
    706c:	80 93 54 16 	sts	0x1654, r24	; 0x801654 <serUSBRxInIndex>
    7070:	90 93 48 16 	sts	0x1648, r25	; 0x801648 <serUSBRxOutIndex+0x1>
    7074:	80 93 47 16 	sts	0x1647, r24	; 0x801647 <serUSBRxOutIndex>
    7078:	8d ee       	ldi	r24, 0xED	; 237
    707a:	9b e0       	ldi	r25, 0x0B	; 11
    707c:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    7080:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    7084:	90 93 d8 18 	sts	0x18D8, r25	; 0x8018d8 <serUSBTxInIndex+0x1>
    7088:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <serUSBTxInIndex>
    708c:	10 92 49 16 	sts	0x1649, r1	; 0x801649 <serUSBOvflFlag>
    7090:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <eeprom_ReadUSB>
    7094:	8f 3f       	cpi	r24, 0xFF	; 255
    7096:	41 f4       	brne	.+16     	; 0x70a8 <init_Serial0SerUSB+0x62>
    7098:	10 92 52 16 	sts	0x1652, r1	; 0x801652 <serUSB_Active>
    709c:	40 e0       	ldi	r20, 0x00	; 0
    709e:	50 e0       	ldi	r21, 0x00	; 0
    70a0:	64 e0       	ldi	r22, 0x04	; 4
    70a2:	81 e0       	ldi	r24, 0x01	; 1
    70a4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <log_putError>
    70a8:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    70ac:	8f 3f       	cpi	r24, 0xFF	; 255
    70ae:	41 f4       	brne	.+16     	; 0x70c0 <init_Serial0SerUSB+0x7a>
    70b0:	8a e6       	ldi	r24, 0x6A	; 106
    70b2:	93 e0       	ldi	r25, 0x03	; 3
    70b4:	b2 df       	rcall	.-156    	; 0x701a <serial0SER_USB_sendStringP>
    70b6:	8e e9       	ldi	r24, 0x9E	; 158
    70b8:	92 e1       	ldi	r25, 0x12	; 18
    70ba:	af df       	rcall	.-162    	; 0x701a <serial0SER_USB_sendStringP>
    70bc:	c0 df       	rcall	.-128    	; 0x703e <serial0SER_USB_sendCRLF>
    70be:	bf cf       	rjmp	.-130    	; 0x703e <serial0SER_USB_sendCRLF>
    70c0:	08 95       	ret

000070c2 <serial0SER_USB_sendString>:
    70c2:	1f 93       	push	r17
    70c4:	cf 93       	push	r28
    70c6:	df 93       	push	r29
    70c8:	ec 01       	movw	r28, r24
    70ca:	10 e5       	ldi	r17, 0x50	; 80
    70cc:	03 c0       	rjmp	.+6      	; 0x70d4 <serial0SER_USB_sendString+0x12>
    70ce:	21 96       	adiw	r28, 0x01	; 1
    70d0:	ae de       	rcall	.-676    	; 0x6e2e <serial0SER_USBSend>
    70d2:	11 50       	subi	r17, 0x01	; 1
    70d4:	88 81       	ld	r24, Y
    70d6:	88 23       	and	r24, r24
    70d8:	31 f0       	breq	.+12     	; 0x70e6 <serial0SER_USB_sendString+0x24>
    70da:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    70de:	9f 3f       	cpi	r25, 0xFF	; 255
    70e0:	11 f0       	breq	.+4      	; 0x70e6 <serial0SER_USB_sendString+0x24>
    70e2:	11 11       	cpse	r17, r1
    70e4:	f4 cf       	rjmp	.-24     	; 0x70ce <serial0SER_USB_sendString+0xc>
    70e6:	df 91       	pop	r29
    70e8:	cf 91       	pop	r28
    70ea:	1f 91       	pop	r17
    70ec:	08 95       	ret

000070ee <__vector_25>:
    70ee:	1f 92       	push	r1
    70f0:	0f 92       	push	r0
    70f2:	0f b6       	in	r0, 0x3f	; 63
    70f4:	0f 92       	push	r0
    70f6:	11 24       	eor	r1, r1
    70f8:	0b b6       	in	r0, 0x3b	; 59
    70fa:	0f 92       	push	r0
    70fc:	2f 93       	push	r18
    70fe:	3f 93       	push	r19
    7100:	4f 93       	push	r20
    7102:	5f 93       	push	r21
    7104:	8f 93       	push	r24
    7106:	9f 93       	push	r25
    7108:	ef 93       	push	r30
    710a:	ff 93       	push	r31
    710c:	e0 91 54 16 	lds	r30, 0x1654	; 0x801654 <serUSBRxInIndex>
    7110:	f0 91 55 16 	lds	r31, 0x1655	; 0x801655 <serUSBRxInIndex+0x1>
    7114:	af 01       	movw	r20, r30
    7116:	4f 5f       	subi	r20, 0xFF	; 255
    7118:	5f 4f       	sbci	r21, 0xFF	; 255
    711a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    711e:	80 83       	st	Z, r24
    7120:	84 e1       	ldi	r24, 0x14	; 20
    7122:	40 34       	cpi	r20, 0x40	; 64
    7124:	58 07       	cpc	r21, r24
    7126:	19 f0       	breq	.+6      	; 0x712e <__vector_25+0x40>
    7128:	10 f0       	brcs	.+4      	; 0x712e <__vector_25+0x40>
    712a:	41 e0       	ldi	r20, 0x01	; 1
    712c:	54 e1       	ldi	r21, 0x14	; 20
    712e:	9f b7       	in	r25, 0x3f	; 63
    7130:	f8 94       	cli
    7132:	81 e0       	ldi	r24, 0x01	; 1
    7134:	05 c0       	rjmp	.+10     	; 0x7140 <__vector_25+0x52>
    7136:	20 91 47 16 	lds	r18, 0x1647	; 0x801647 <serUSBRxOutIndex>
    713a:	30 91 48 16 	lds	r19, 0x1648	; 0x801648 <serUSBRxOutIndex+0x1>
    713e:	80 e0       	ldi	r24, 0x00	; 0
    7140:	81 11       	cpse	r24, r1
    7142:	f9 cf       	rjmp	.-14     	; 0x7136 <__vector_25+0x48>
    7144:	9f bf       	out	0x3f, r25	; 63
    7146:	42 17       	cp	r20, r18
    7148:	53 07       	cpc	r21, r19
    714a:	21 f4       	brne	.+8      	; 0x7154 <__vector_25+0x66>
    714c:	8f ef       	ldi	r24, 0xFF	; 255
    714e:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    7152:	04 c0       	rjmp	.+8      	; 0x715c <__vector_25+0x6e>
    7154:	50 93 55 16 	sts	0x1655, r21	; 0x801655 <serUSBRxInIndex+0x1>
    7158:	40 93 54 16 	sts	0x1654, r20	; 0x801654 <serUSBRxInIndex>
    715c:	ff 91       	pop	r31
    715e:	ef 91       	pop	r30
    7160:	9f 91       	pop	r25
    7162:	8f 91       	pop	r24
    7164:	5f 91       	pop	r21
    7166:	4f 91       	pop	r20
    7168:	3f 91       	pop	r19
    716a:	2f 91       	pop	r18
    716c:	0f 90       	pop	r0
    716e:	0b be       	out	0x3b, r0	; 59
    7170:	0f 90       	pop	r0
    7172:	0f be       	out	0x3f, r0	; 63
    7174:	0f 90       	pop	r0
    7176:	1f 90       	pop	r1
    7178:	18 95       	reti

0000717a <__vector_26>:
    717a:	1f 92       	push	r1
    717c:	0f 92       	push	r0
    717e:	0f b6       	in	r0, 0x3f	; 63
    7180:	0f 92       	push	r0
    7182:	11 24       	eor	r1, r1
    7184:	0b b6       	in	r0, 0x3b	; 59
    7186:	0f 92       	push	r0
    7188:	2f 93       	push	r18
    718a:	8f 93       	push	r24
    718c:	9f 93       	push	r25
    718e:	ef 93       	push	r30
    7190:	ff 93       	push	r31
    7192:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    7196:	f0 91 ee 13 	lds	r31, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    719a:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    719e:	90 91 d8 18 	lds	r25, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    71a2:	e8 17       	cp	r30, r24
    71a4:	f9 07       	cpc	r31, r25
    71a6:	89 f0       	breq	.+34     	; 0x71ca <__vector_26+0x50>
    71a8:	cf 01       	movw	r24, r30
    71aa:	01 96       	adiw	r24, 0x01	; 1
    71ac:	20 81       	ld	r18, Z
    71ae:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    71b2:	23 e1       	ldi	r18, 0x13	; 19
    71b4:	8c 3e       	cpi	r24, 0xEC	; 236
    71b6:	92 07       	cpc	r25, r18
    71b8:	19 f0       	breq	.+6      	; 0x71c0 <__vector_26+0x46>
    71ba:	10 f0       	brcs	.+4      	; 0x71c0 <__vector_26+0x46>
    71bc:	8d ee       	ldi	r24, 0xED	; 237
    71be:	9b e0       	ldi	r25, 0x0B	; 11
    71c0:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    71c4:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    71c8:	05 c0       	rjmp	.+10     	; 0x71d4 <__vector_26+0x5a>
    71ca:	e1 ec       	ldi	r30, 0xC1	; 193
    71cc:	f0 e0       	ldi	r31, 0x00	; 0
    71ce:	80 81       	ld	r24, Z
    71d0:	8f 7d       	andi	r24, 0xDF	; 223
    71d2:	80 83       	st	Z, r24
    71d4:	ff 91       	pop	r31
    71d6:	ef 91       	pop	r30
    71d8:	9f 91       	pop	r25
    71da:	8f 91       	pop	r24
    71dc:	2f 91       	pop	r18
    71de:	0f 90       	pop	r0
    71e0:	0b be       	out	0x3b, r0	; 59
    71e2:	0f 90       	pop	r0
    71e4:	0f be       	out	0x3f, r0	; 63
    71e6:	0f 90       	pop	r0
    71e8:	1f 90       	pop	r1
    71ea:	18 95       	reti

000071ec <init_Serial3SerESP>:
    71ec:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    71f0:	88 e0       	ldi	r24, 0x08	; 8
    71f2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    71f6:	e1 e3       	ldi	r30, 0x31	; 49
    71f8:	f1 e0       	ldi	r31, 0x01	; 1
    71fa:	80 81       	ld	r24, Z
    71fc:	88 69       	ori	r24, 0x98	; 152
    71fe:	80 83       	st	Z, r24
    7200:	e2 e3       	ldi	r30, 0x32	; 50
    7202:	f1 e0       	ldi	r31, 0x01	; 1
    7204:	80 81       	ld	r24, Z
    7206:	86 60       	ori	r24, 0x06	; 6
    7208:	80 83       	st	Z, r24
    720a:	87 e5       	ldi	r24, 0x57	; 87
    720c:	96 e1       	ldi	r25, 0x16	; 22
    720e:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <serESPRxInIndex+0x1>
    7212:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <serESPRxInIndex>
    7216:	90 93 fa 13 	sts	0x13FA, r25	; 0x8013fa <serESPRxOutIndex+0x1>
    721a:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <serESPRxOutIndex>
    721e:	87 ed       	ldi	r24, 0xD7	; 215
    7220:	96 e1       	ldi	r25, 0x16	; 22
    7222:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    7226:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    722a:	90 93 46 16 	sts	0x1646, r25	; 0x801646 <serESPTxInIndex+0x1>
    722e:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <serESPTxInIndex>
    7232:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <serESPOvflFlag>
    7236:	8f ef       	ldi	r24, 0xFF	; 255
    7238:	80 93 4e 16 	sts	0x164E, r24	; 0x80164e <serESP_Active>
    723c:	80 e0       	ldi	r24, 0x00	; 0
    723e:	07 c0       	rjmp	.+14     	; 0x724e <init_Serial3SerESP+0x62>
    7240:	e8 2f       	mov	r30, r24
    7242:	f0 e0       	ldi	r31, 0x00	; 0
    7244:	ef 50       	subi	r30, 0x0F	; 15
    7246:	fc 4e       	sbci	r31, 0xEC	; 236
    7248:	9f ef       	ldi	r25, 0xFF	; 255
    724a:	90 83       	st	Z, r25
    724c:	8f 5f       	subi	r24, 0xFF	; 255
    724e:	88 30       	cpi	r24, 0x08	; 8
    7250:	b8 f3       	brcs	.-18     	; 0x7240 <init_Serial3SerESP+0x54>
    7252:	08 95       	ret

00007254 <serial3SER_ESPSend>:
    7254:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <serESPTxInIndex>
    7258:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    725c:	a1 e3       	ldi	r26, 0x31	; 49
    725e:	b1 e0       	ldi	r27, 0x01	; 1
    7260:	9c 91       	ld	r25, X
    7262:	9f 7d       	andi	r25, 0xDF	; 223
    7264:	9c 93       	st	X, r25
    7266:	af 01       	movw	r20, r30
    7268:	4f 5f       	subi	r20, 0xFF	; 255
    726a:	5f 4f       	sbci	r21, 0xFF	; 255
    726c:	80 83       	st	Z, r24
    726e:	88 e1       	ldi	r24, 0x18	; 24
    7270:	46 3d       	cpi	r20, 0xD6	; 214
    7272:	58 07       	cpc	r21, r24
    7274:	19 f0       	breq	.+6      	; 0x727c <serial3SER_ESPSend+0x28>
    7276:	10 f0       	brcs	.+4      	; 0x727c <serial3SER_ESPSend+0x28>
    7278:	47 ed       	ldi	r20, 0xD7	; 215
    727a:	56 e1       	ldi	r21, 0x16	; 22
    727c:	9f b7       	in	r25, 0x3f	; 63
    727e:	f8 94       	cli
    7280:	81 e0       	ldi	r24, 0x01	; 1
    7282:	05 c0       	rjmp	.+10     	; 0x728e <serial3SER_ESPSend+0x3a>
    7284:	20 91 42 16 	lds	r18, 0x1642	; 0x801642 <serESPTxOutIndex>
    7288:	30 91 43 16 	lds	r19, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
    728c:	80 e0       	ldi	r24, 0x00	; 0
    728e:	81 11       	cpse	r24, r1
    7290:	f9 cf       	rjmp	.-14     	; 0x7284 <serial3SER_ESPSend+0x30>
    7292:	9f bf       	out	0x3f, r25	; 63
    7294:	42 17       	cp	r20, r18
    7296:	53 07       	cpc	r21, r19
    7298:	49 f4       	brne	.+18     	; 0x72ac <serial3SER_ESPSend+0x58>
    729a:	8f ef       	ldi	r24, 0xFF	; 255
    729c:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
    72a0:	e1 e3       	ldi	r30, 0x31	; 49
    72a2:	f1 e0       	ldi	r31, 0x01	; 1
    72a4:	80 81       	ld	r24, Z
    72a6:	80 62       	ori	r24, 0x20	; 32
    72a8:	80 83       	st	Z, r24
    72aa:	08 95       	ret
    72ac:	50 93 46 16 	sts	0x1646, r21	; 0x801646 <serESPTxInIndex+0x1>
    72b0:	40 93 45 16 	sts	0x1645, r20	; 0x801645 <serESPTxInIndex>
    72b4:	e1 e3       	ldi	r30, 0x31	; 49
    72b6:	f1 e0       	ldi	r31, 0x01	; 1
    72b8:	80 81       	ld	r24, Z
    72ba:	80 62       	ori	r24, 0x20	; 32
    72bc:	80 83       	st	Z, r24
    72be:	08 95       	ret

000072c0 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    72c0:	e0 91 f9 13 	lds	r30, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    72c4:	f0 91 fa 13 	lds	r31, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    72c8:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <serESPRxInIndex>
    72cc:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
    72d0:	e8 17       	cp	r30, r24
    72d2:	f9 07       	cpc	r31, r25
    72d4:	81 f0       	breq	.+32     	; 0x72f6 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    72d6:	9f 01       	movw	r18, r30
    72d8:	2f 5f       	subi	r18, 0xFF	; 255
    72da:	3f 4f       	sbci	r19, 0xFF	; 255
    72dc:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    72de:	96 e1       	ldi	r25, 0x16	; 22
    72e0:	26 3d       	cpi	r18, 0xD6	; 214
    72e2:	39 07       	cpc	r19, r25
    72e4:	19 f0       	breq	.+6      	; 0x72ec <serial3SER_ESPReadRx+0x2c>
    72e6:	10 f0       	brcs	.+4      	; 0x72ec <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    72e8:	27 e5       	ldi	r18, 0x57	; 87
    72ea:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    72ec:	30 93 fa 13 	sts	0x13FA, r19	; 0x8013fa <serESPRxOutIndex+0x1>
    72f0:	20 93 f9 13 	sts	0x13F9, r18	; 0x8013f9 <serESPRxOutIndex>
    72f4:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    72f6:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    72f8:	08 95       	ret

000072fa <__vector_54>:

ISR(USART3_RX_vect) {
    72fa:	1f 92       	push	r1
    72fc:	0f 92       	push	r0
    72fe:	0f b6       	in	r0, 0x3f	; 63
    7300:	0f 92       	push	r0
    7302:	11 24       	eor	r1, r1
    7304:	0b b6       	in	r0, 0x3b	; 59
    7306:	0f 92       	push	r0
    7308:	2f 93       	push	r18
    730a:	3f 93       	push	r19
    730c:	4f 93       	push	r20
    730e:	5f 93       	push	r21
    7310:	6f 93       	push	r22
    7312:	8f 93       	push	r24
    7314:	9f 93       	push	r25
    7316:	af 93       	push	r26
    7318:	bf 93       	push	r27
    731a:	ef 93       	push	r30
    731c:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    731e:	e0 91 fe 13 	lds	r30, 0x13FE	; 0x8013fe <serESPRxInIndex>
    7322:	f0 91 ff 13 	lds	r31, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    7326:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    732a:	af 01       	movw	r20, r30
    732c:	4f 5f       	subi	r20, 0xFF	; 255
    732e:	5f 4f       	sbci	r21, 0xFF	; 255
    7330:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    7332:	86 e1       	ldi	r24, 0x16	; 22
    7334:	46 3d       	cpi	r20, 0xD6	; 214
    7336:	58 07       	cpc	r21, r24
    7338:	19 f0       	breq	.+6      	; 0x7340 <__vector_54+0x46>
    733a:	10 f0       	brcs	.+4      	; 0x7340 <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    733c:	47 e5       	ldi	r20, 0x57	; 87
    733e:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7340:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7342:	f8 94       	cli
    7344:	81 e0       	ldi	r24, 0x01	; 1
    7346:	05 c0       	rjmp	.+10     	; 0x7352 <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    7348:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    734c:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7350:	80 e0       	ldi	r24, 0x00	; 0
    7352:	81 11       	cpse	r24, r1
    7354:	f9 cf       	rjmp	.-14     	; 0x7348 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7356:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    7358:	42 17       	cp	r20, r18
    735a:	53 07       	cpc	r21, r19
    735c:	39 f4       	brne	.+14     	; 0x736c <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    735e:	8f ef       	ldi	r24, 0xFF	; 255
    7360:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7364:	80 e0       	ldi	r24, 0x00	; 0
    7366:	a8 ef       	ldi	r26, 0xF8	; 248
    7368:	b3 e1       	ldi	r27, 0x13	; 19
    736a:	0a c0       	rjmp	.+20     	; 0x7380 <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    736c:	50 93 ff 13 	sts	0x13FF, r21	; 0x8013ff <serESPRxInIndex+0x1>
    7370:	40 93 fe 13 	sts	0x13FE, r20	; 0x8013fe <serESPRxInIndex>
    7374:	f7 cf       	rjmp	.-18     	; 0x7364 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    7376:	fd 01       	movw	r30, r26
    7378:	92 91       	ld	r25, -Z
    737a:	9c 93       	st	X, r25
		inpBufferPtr--;
    737c:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    737e:	8f 5f       	subi	r24, 0xFF	; 255
    7380:	87 30       	cpi	r24, 0x07	; 7
    7382:	c8 f3       	brcs	.-14     	; 0x7376 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    7384:	6c 93       	st	X, r22
}
    7386:	ff 91       	pop	r31
    7388:	ef 91       	pop	r30
    738a:	bf 91       	pop	r27
    738c:	af 91       	pop	r26
    738e:	9f 91       	pop	r25
    7390:	8f 91       	pop	r24
    7392:	6f 91       	pop	r22
    7394:	5f 91       	pop	r21
    7396:	4f 91       	pop	r20
    7398:	3f 91       	pop	r19
    739a:	2f 91       	pop	r18
    739c:	0f 90       	pop	r0
    739e:	0b be       	out	0x3b, r0	; 59
    73a0:	0f 90       	pop	r0
    73a2:	0f be       	out	0x3f, r0	; 63
    73a4:	0f 90       	pop	r0
    73a6:	1f 90       	pop	r1
    73a8:	18 95       	reti

000073aa <__vector_55>:

ISR(USART3_UDRE_vect) {
    73aa:	1f 92       	push	r1
    73ac:	0f 92       	push	r0
    73ae:	0f b6       	in	r0, 0x3f	; 63
    73b0:	0f 92       	push	r0
    73b2:	11 24       	eor	r1, r1
    73b4:	0b b6       	in	r0, 0x3b	; 59
    73b6:	0f 92       	push	r0
    73b8:	2f 93       	push	r18
    73ba:	8f 93       	push	r24
    73bc:	9f 93       	push	r25
    73be:	ef 93       	push	r30
    73c0:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    73c2:	e0 91 42 16 	lds	r30, 0x1642	; 0x801642 <serESPTxOutIndex>
    73c6:	f0 91 43 16 	lds	r31, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    73ca:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <serESPTxInIndex>
    73ce:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    73d2:	e8 17       	cp	r30, r24
    73d4:	f9 07       	cpc	r31, r25
    73d6:	89 f0       	breq	.+34     	; 0x73fa <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    73d8:	cf 01       	movw	r24, r30
    73da:	01 96       	adiw	r24, 0x01	; 1
    73dc:	20 81       	ld	r18, Z
    73de:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    73e2:	28 e1       	ldi	r18, 0x18	; 24
    73e4:	86 3d       	cpi	r24, 0xD6	; 214
    73e6:	92 07       	cpc	r25, r18
    73e8:	19 f0       	breq	.+6      	; 0x73f0 <__vector_55+0x46>
    73ea:	10 f0       	brcs	.+4      	; 0x73f0 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    73ec:	87 ed       	ldi	r24, 0xD7	; 215
    73ee:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    73f0:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    73f4:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    73f8:	05 c0       	rjmp	.+10     	; 0x7404 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    73fa:	e1 e3       	ldi	r30, 0x31	; 49
    73fc:	f1 e0       	ldi	r31, 0x01	; 1
    73fe:	80 81       	ld	r24, Z
    7400:	8f 7d       	andi	r24, 0xDF	; 223
    7402:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    7404:	ff 91       	pop	r31
    7406:	ef 91       	pop	r30
    7408:	9f 91       	pop	r25
    740a:	8f 91       	pop	r24
    740c:	2f 91       	pop	r18
    740e:	0f 90       	pop	r0
    7410:	0b be       	out	0x3b, r0	; 59
    7412:	0f 90       	pop	r0
    7414:	0f be       	out	0x3f, r0	; 63
    7416:	0f 90       	pop	r0
    7418:	1f 90       	pop	r1
    741a:	18 95       	reti

0000741c <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    741c:	8a 30       	cpi	r24, 0x0A	; 10
    741e:	10 f0       	brcs	.+4      	; 0x7424 <nibbleToChr+0x8>
    7420:	89 5c       	subi	r24, 0xC9	; 201
    7422:	08 95       	ret
    7424:	80 5d       	subi	r24, 0xD0	; 208
    7426:	08 95       	ret

00007428 <lcd_setCG>:
    7428:	ef 92       	push	r14
    742a:	ff 92       	push	r15
    742c:	1f 93       	push	r17
    742e:	cf 93       	push	r28
    7430:	df 93       	push	r29
    7432:	eb 01       	movw	r28, r22
    7434:	90 e0       	ldi	r25, 0x00	; 0
    7436:	88 0f       	add	r24, r24
    7438:	99 1f       	adc	r25, r25
    743a:	88 0f       	add	r24, r24
    743c:	99 1f       	adc	r25, r25
    743e:	88 0f       	add	r24, r24
    7440:	99 1f       	adc	r25, r25
    7442:	80 64       	ori	r24, 0x40	; 64
    7444:	0e 94 ad 12 	call	0x255a	; 0x255a <lcd_write_command>
    7448:	10 e0       	ldi	r17, 0x00	; 0
    744a:	0a c0       	rjmp	.+20     	; 0x7460 <lcd_setCG+0x38>
    744c:	7e 01       	movw	r14, r28
    744e:	8f ef       	ldi	r24, 0xFF	; 255
    7450:	e8 1a       	sub	r14, r24
    7452:	f8 0a       	sbc	r15, r24
    7454:	fe 01       	movw	r30, r28
    7456:	84 91       	lpm	r24, Z
    7458:	0e 94 89 12 	call	0x2512	; 0x2512 <lcd_write_character>
    745c:	1f 5f       	subi	r17, 0xFF	; 255
    745e:	e7 01       	movw	r28, r14
    7460:	18 30       	cpi	r17, 0x08	; 8
    7462:	a0 f3       	brcs	.-24     	; 0x744c <lcd_setCG+0x24>
    7464:	df 91       	pop	r29
    7466:	cf 91       	pop	r28
    7468:	1f 91       	pop	r17
    746a:	ff 90       	pop	r15
    746c:	ef 90       	pop	r14
    746e:	08 95       	ret

00007470 <lcd_initCG>:
    7470:	66 e3       	ldi	r22, 0x36	; 54
    7472:	73 e1       	ldi	r23, 0x13	; 19
    7474:	80 e0       	ldi	r24, 0x00	; 0
    7476:	d8 df       	rcall	.-80     	; 0x7428 <lcd_setCG>
    7478:	6e e2       	ldi	r22, 0x2E	; 46
    747a:	73 e1       	ldi	r23, 0x13	; 19
    747c:	81 e0       	ldi	r24, 0x01	; 1
    747e:	d4 df       	rcall	.-88     	; 0x7428 <lcd_setCG>
    7480:	66 e2       	ldi	r22, 0x26	; 38
    7482:	73 e1       	ldi	r23, 0x13	; 19
    7484:	82 e0       	ldi	r24, 0x02	; 2
    7486:	d0 df       	rcall	.-96     	; 0x7428 <lcd_setCG>
    7488:	6e e1       	ldi	r22, 0x1E	; 30
    748a:	73 e1       	ldi	r23, 0x13	; 19
    748c:	83 e0       	ldi	r24, 0x03	; 3
    748e:	cc df       	rcall	.-104    	; 0x7428 <lcd_setCG>
    7490:	66 e1       	ldi	r22, 0x16	; 22
    7492:	73 e1       	ldi	r23, 0x13	; 19
    7494:	84 e0       	ldi	r24, 0x04	; 4
    7496:	c8 df       	rcall	.-112    	; 0x7428 <lcd_setCG>
    7498:	6e e0       	ldi	r22, 0x0E	; 14
    749a:	73 e1       	ldi	r23, 0x13	; 19
    749c:	85 e0       	ldi	r24, 0x05	; 5
    749e:	c4 df       	rcall	.-120    	; 0x7428 <lcd_setCG>
    74a0:	66 e0       	ldi	r22, 0x06	; 6
    74a2:	73 e1       	ldi	r23, 0x13	; 19
    74a4:	86 e0       	ldi	r24, 0x06	; 6
    74a6:	c0 df       	rcall	.-128    	; 0x7428 <lcd_setCG>
    74a8:	6e ef       	ldi	r22, 0xFE	; 254
    74aa:	72 e1       	ldi	r23, 0x12	; 18
    74ac:	87 e0       	ldi	r24, 0x07	; 7
    74ae:	bc cf       	rjmp	.-136    	; 0x7428 <lcd_setCG>
    74b0:	08 95       	ret

000074b2 <lcd_hexout>:
    74b2:	cf 93       	push	r28
    74b4:	c8 2f       	mov	r28, r24
    74b6:	82 95       	swap	r24
    74b8:	8f 70       	andi	r24, 0x0F	; 15
    74ba:	8a 30       	cpi	r24, 0x0A	; 10
    74bc:	10 f0       	brcs	.+4      	; 0x74c2 <lcd_hexout+0x10>
    74be:	89 5c       	subi	r24, 0xC9	; 201
    74c0:	01 c0       	rjmp	.+2      	; 0x74c4 <lcd_hexout+0x12>
    74c2:	80 5d       	subi	r24, 0xD0	; 208
    74c4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    74c8:	cf 70       	andi	r28, 0x0F	; 15
    74ca:	ca 30       	cpi	r28, 0x0A	; 10
    74cc:	18 f0       	brcs	.+6      	; 0x74d4 <lcd_hexout+0x22>
    74ce:	87 e3       	ldi	r24, 0x37	; 55
    74d0:	8c 0f       	add	r24, r28
    74d2:	02 c0       	rjmp	.+4      	; 0x74d8 <lcd_hexout+0x26>
    74d4:	80 e3       	ldi	r24, 0x30	; 48
    74d6:	8c 0f       	add	r24, r28
    74d8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    74dc:	cf 91       	pop	r28
    74de:	08 95       	ret

000074e0 <lcd_longout>:
    74e0:	cf 93       	push	r28
    74e2:	df 93       	push	r29
    74e4:	d3 e0       	ldi	r29, 0x03	; 3
    74e6:	1c c0       	rjmp	.+56     	; 0x7520 <lcd_longout+0x40>
    74e8:	ed 2f       	mov	r30, r29
    74ea:	0d 2e       	mov	r0, r29
    74ec:	00 0c       	add	r0, r0
    74ee:	ff 0b       	sbc	r31, r31
    74f0:	e3 52       	subi	r30, 0x23	; 35
    74f2:	f7 4e       	sbci	r31, 0xE7	; 231
    74f4:	c0 81       	ld	r28, Z
    74f6:	8c 2f       	mov	r24, r28
    74f8:	82 95       	swap	r24
    74fa:	8f 70       	andi	r24, 0x0F	; 15
    74fc:	8a 30       	cpi	r24, 0x0A	; 10
    74fe:	10 f0       	brcs	.+4      	; 0x7504 <lcd_longout+0x24>
    7500:	89 5c       	subi	r24, 0xC9	; 201
    7502:	01 c0       	rjmp	.+2      	; 0x7506 <lcd_longout+0x26>
    7504:	80 5d       	subi	r24, 0xD0	; 208
    7506:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    750a:	cf 70       	andi	r28, 0x0F	; 15
    750c:	ca 30       	cpi	r28, 0x0A	; 10
    750e:	18 f0       	brcs	.+6      	; 0x7516 <lcd_longout+0x36>
    7510:	87 e3       	ldi	r24, 0x37	; 55
    7512:	8c 0f       	add	r24, r28
    7514:	02 c0       	rjmp	.+4      	; 0x751a <lcd_longout+0x3a>
    7516:	80 e3       	ldi	r24, 0x30	; 48
    7518:	8c 0f       	add	r24, r28
    751a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    751e:	d1 50       	subi	r29, 0x01	; 1
    7520:	dd 23       	and	r29, r29
    7522:	14 f7       	brge	.-60     	; 0x74e8 <lcd_longout+0x8>
    7524:	df 91       	pop	r29
    7526:	cf 91       	pop	r28
    7528:	08 95       	ret

0000752a <lcd_dec2out>:
    752a:	cf 93       	push	r28
    752c:	c8 2f       	mov	r28, r24
    752e:	84 36       	cpi	r24, 0x64	; 100
    7530:	50 f0       	brcs	.+20     	; 0x7546 <lcd_dec2out+0x1c>
    7532:	8d e2       	ldi	r24, 0x2D	; 45
    7534:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    7538:	8d e2       	ldi	r24, 0x2D	; 45
    753a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    753e:	0d c0       	rjmp	.+26     	; 0x755a <lcd_dec2out+0x30>
    7540:	ca 50       	subi	r28, 0x0A	; 10
    7542:	8f 5f       	subi	r24, 0xFF	; 255
    7544:	01 c0       	rjmp	.+2      	; 0x7548 <lcd_dec2out+0x1e>
    7546:	80 e0       	ldi	r24, 0x00	; 0
    7548:	ca 30       	cpi	r28, 0x0A	; 10
    754a:	d0 f7       	brcc	.-12     	; 0x7540 <lcd_dec2out+0x16>
    754c:	80 5d       	subi	r24, 0xD0	; 208
    754e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    7552:	80 e3       	ldi	r24, 0x30	; 48
    7554:	8c 0f       	add	r24, r28
    7556:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    755a:	cf 91       	pop	r28
    755c:	08 95       	ret

0000755e <putChar_Dec2>:
    755e:	84 36       	cpi	r24, 0x64	; 100
    7560:	58 f0       	brcs	.+22     	; 0x7578 <putChar_Dec2+0x1a>
    7562:	8d e2       	ldi	r24, 0x2D	; 45
    7564:	db 01       	movw	r26, r22
    7566:	8c 93       	st	X, r24
    7568:	fb 01       	movw	r30, r22
    756a:	32 96       	adiw	r30, 0x02	; 2
    756c:	11 96       	adiw	r26, 0x01	; 1
    756e:	8c 93       	st	X, r24
    7570:	0f c0       	rjmp	.+30     	; 0x7590 <putChar_Dec2+0x32>
    7572:	8a 50       	subi	r24, 0x0A	; 10
    7574:	9f 5f       	subi	r25, 0xFF	; 255
    7576:	01 c0       	rjmp	.+2      	; 0x757a <putChar_Dec2+0x1c>
    7578:	90 e0       	ldi	r25, 0x00	; 0
    757a:	8a 30       	cpi	r24, 0x0A	; 10
    757c:	d0 f7       	brcc	.-12     	; 0x7572 <putChar_Dec2+0x14>
    757e:	90 5d       	subi	r25, 0xD0	; 208
    7580:	fb 01       	movw	r30, r22
    7582:	90 83       	st	Z, r25
    7584:	32 96       	adiw	r30, 0x02	; 2
    7586:	90 e3       	ldi	r25, 0x30	; 48
    7588:	98 0f       	add	r25, r24
    758a:	db 01       	movw	r26, r22
    758c:	11 96       	adiw	r26, 0x01	; 1
    758e:	9c 93       	st	X, r25
    7590:	10 82       	st	Z, r1
    7592:	cf 01       	movw	r24, r30
    7594:	08 95       	ret

00007596 <putChar_Dec>:
    7596:	90 e0       	ldi	r25, 0x00	; 0
    7598:	02 c0       	rjmp	.+4      	; 0x759e <putChar_Dec+0x8>
    759a:	84 56       	subi	r24, 0x64	; 100
    759c:	9f 5f       	subi	r25, 0xFF	; 255
    759e:	84 36       	cpi	r24, 0x64	; 100
    75a0:	e0 f7       	brcc	.-8      	; 0x759a <putChar_Dec+0x4>
    75a2:	99 23       	and	r25, r25
    75a4:	39 f0       	breq	.+14     	; 0x75b4 <putChar_Dec+0x1e>
    75a6:	90 5d       	subi	r25, 0xD0	; 208
    75a8:	db 01       	movw	r26, r22
    75aa:	9c 93       	st	X, r25
    75ac:	6f 5f       	subi	r22, 0xFF	; 255
    75ae:	7f 4f       	sbci	r23, 0xFF	; 255
    75b0:	2f ef       	ldi	r18, 0xFF	; 255
    75b2:	01 c0       	rjmp	.+2      	; 0x75b6 <putChar_Dec+0x20>
    75b4:	20 e0       	ldi	r18, 0x00	; 0
    75b6:	90 e0       	ldi	r25, 0x00	; 0
    75b8:	02 c0       	rjmp	.+4      	; 0x75be <putChar_Dec+0x28>
    75ba:	8a 50       	subi	r24, 0x0A	; 10
    75bc:	9f 5f       	subi	r25, 0xFF	; 255
    75be:	8a 30       	cpi	r24, 0x0A	; 10
    75c0:	e0 f7       	brcc	.-8      	; 0x75ba <putChar_Dec+0x24>
    75c2:	91 11       	cpse	r25, r1
    75c4:	02 c0       	rjmp	.+4      	; 0x75ca <putChar_Dec+0x34>
    75c6:	2f 3f       	cpi	r18, 0xFF	; 255
    75c8:	31 f4       	brne	.+12     	; 0x75d6 <putChar_Dec+0x40>
    75ca:	fb 01       	movw	r30, r22
    75cc:	31 96       	adiw	r30, 0x01	; 1
    75ce:	90 5d       	subi	r25, 0xD0	; 208
    75d0:	db 01       	movw	r26, r22
    75d2:	9c 93       	st	X, r25
    75d4:	01 c0       	rjmp	.+2      	; 0x75d8 <putChar_Dec+0x42>
    75d6:	fb 01       	movw	r30, r22
    75d8:	80 5d       	subi	r24, 0xD0	; 208
    75da:	80 83       	st	Z, r24
    75dc:	11 82       	std	Z+1, r1	; 0x01
    75de:	cf 01       	movw	r24, r30
    75e0:	01 96       	adiw	r24, 0x01	; 1
    75e2:	08 95       	ret

000075e4 <putChar_hex>:
    75e4:	fb 01       	movw	r30, r22
    75e6:	98 2f       	mov	r25, r24
    75e8:	92 95       	swap	r25
    75ea:	9f 70       	andi	r25, 0x0F	; 15
    75ec:	9a 30       	cpi	r25, 0x0A	; 10
    75ee:	10 f0       	brcs	.+4      	; 0x75f4 <putChar_hex+0x10>
    75f0:	99 5c       	subi	r25, 0xC9	; 201
    75f2:	01 c0       	rjmp	.+2      	; 0x75f6 <putChar_hex+0x12>
    75f4:	90 5d       	subi	r25, 0xD0	; 208
    75f6:	90 83       	st	Z, r25
    75f8:	98 2f       	mov	r25, r24
    75fa:	9f 70       	andi	r25, 0x0F	; 15
    75fc:	9f 01       	movw	r18, r30
    75fe:	2e 5f       	subi	r18, 0xFE	; 254
    7600:	3f 4f       	sbci	r19, 0xFF	; 255
    7602:	9a 30       	cpi	r25, 0x0A	; 10
    7604:	10 f0       	brcs	.+4      	; 0x760a <putChar_hex+0x26>
    7606:	99 5c       	subi	r25, 0xC9	; 201
    7608:	01 c0       	rjmp	.+2      	; 0x760c <putChar_hex+0x28>
    760a:	90 5d       	subi	r25, 0xD0	; 208
    760c:	91 83       	std	Z+1, r25	; 0x01
    760e:	12 82       	std	Z+2, r1	; 0x02
    7610:	c9 01       	movw	r24, r18
    7612:	08 95       	ret

00007614 <putChar_MidiChan>:
    7614:	80 31       	cpi	r24, 0x10	; 16
    7616:	48 f0       	brcs	.+18     	; 0x762a <putChar_MidiChan+0x16>
    7618:	8e e6       	ldi	r24, 0x6E	; 110
    761a:	db 01       	movw	r26, r22
    761c:	8c 93       	st	X, r24
    761e:	fb 01       	movw	r30, r22
    7620:	32 96       	adiw	r30, 0x02	; 2
    7622:	8f e6       	ldi	r24, 0x6F	; 111
    7624:	11 96       	adiw	r26, 0x01	; 1
    7626:	8c 93       	st	X, r24
    7628:	15 c0       	rjmp	.+42     	; 0x7654 <putChar_MidiChan+0x40>
    762a:	91 e0       	ldi	r25, 0x01	; 1
    762c:	98 0f       	add	r25, r24
    762e:	9a 30       	cpi	r25, 0x0A	; 10
    7630:	40 f0       	brcs	.+16     	; 0x7642 <putChar_MidiChan+0x2e>
    7632:	db 01       	movw	r26, r22
    7634:	11 96       	adiw	r26, 0x01	; 1
    7636:	91 e3       	ldi	r25, 0x31	; 49
    7638:	fb 01       	movw	r30, r22
    763a:	90 83       	st	Z, r25
    763c:	97 ef       	ldi	r25, 0xF7	; 247
    763e:	98 0f       	add	r25, r24
    7640:	05 c0       	rjmp	.+10     	; 0x764c <putChar_MidiChan+0x38>
    7642:	db 01       	movw	r26, r22
    7644:	11 96       	adiw	r26, 0x01	; 1
    7646:	80 e2       	ldi	r24, 0x20	; 32
    7648:	fb 01       	movw	r30, r22
    764a:	80 83       	st	Z, r24
    764c:	fd 01       	movw	r30, r26
    764e:	31 96       	adiw	r30, 0x01	; 1
    7650:	90 5d       	subi	r25, 0xD0	; 208
    7652:	9c 93       	st	X, r25
    7654:	10 82       	st	Z, r1
    7656:	cf 01       	movw	r24, r30
    7658:	08 95       	ret

0000765a <putChar_long>:
    765a:	ac 01       	movw	r20, r24
    765c:	fb 01       	movw	r30, r22
    765e:	34 96       	adiw	r30, 0x04	; 4
    7660:	db 01       	movw	r26, r22
    7662:	14 96       	adiw	r26, 0x04	; 4
    7664:	1c 92       	st	X, r1
    7666:	20 e0       	ldi	r18, 0x00	; 0
    7668:	10 c0       	rjmp	.+32     	; 0x768a <putChar_long+0x30>
    766a:	94 2f       	mov	r25, r20
    766c:	9f 70       	andi	r25, 0x0F	; 15
    766e:	31 97       	sbiw	r30, 0x01	; 1
    7670:	9a 30       	cpi	r25, 0x0A	; 10
    7672:	10 f0       	brcs	.+4      	; 0x7678 <putChar_long+0x1e>
    7674:	99 5c       	subi	r25, 0xC9	; 201
    7676:	01 c0       	rjmp	.+2      	; 0x767a <putChar_long+0x20>
    7678:	90 5d       	subi	r25, 0xD0	; 208
    767a:	90 83       	st	Z, r25
    767c:	52 95       	swap	r21
    767e:	42 95       	swap	r20
    7680:	4f 70       	andi	r20, 0x0F	; 15
    7682:	45 27       	eor	r20, r21
    7684:	5f 70       	andi	r21, 0x0F	; 15
    7686:	45 27       	eor	r20, r21
    7688:	2f 5f       	subi	r18, 0xFF	; 255
    768a:	24 30       	cpi	r18, 0x04	; 4
    768c:	70 f3       	brcs	.-36     	; 0x766a <putChar_long+0x10>
    768e:	cf 01       	movw	r24, r30
    7690:	04 96       	adiw	r24, 0x04	; 4
    7692:	08 95       	ret

00007694 <putChar_Note>:
    7694:	88 23       	and	r24, r24
    7696:	8c f4       	brge	.+34     	; 0x76ba <putChar_Note+0x26>
    7698:	8d e2       	ldi	r24, 0x2D	; 45
    769a:	db 01       	movw	r26, r22
    769c:	8c 93       	st	X, r24
    769e:	9e e6       	ldi	r25, 0x6E	; 110
    76a0:	11 96       	adiw	r26, 0x01	; 1
    76a2:	9c 93       	st	X, r25
    76a4:	11 97       	sbiw	r26, 0x01	; 1
    76a6:	12 96       	adiw	r26, 0x02	; 2
    76a8:	8c 93       	st	X, r24
    76aa:	12 97       	sbiw	r26, 0x02	; 2
    76ac:	14 96       	adiw	r26, 0x04	; 4
    76ae:	fb 01       	movw	r30, r22
    76b0:	13 82       	std	Z+3, r1	; 0x03
    76b2:	49 c0       	rjmp	.+146    	; 0x7746 <putChar_Note+0xb2>
    76b4:	8c 50       	subi	r24, 0x0C	; 12
    76b6:	9f 5f       	subi	r25, 0xFF	; 255
    76b8:	01 c0       	rjmp	.+2      	; 0x76bc <putChar_Note+0x28>
    76ba:	90 e0       	ldi	r25, 0x00	; 0
    76bc:	8c 30       	cpi	r24, 0x0C	; 12
    76be:	d0 f7       	brcc	.-12     	; 0x76b4 <putChar_Note+0x20>
    76c0:	8b 30       	cpi	r24, 0x0B	; 11
    76c2:	39 f4       	brne	.+14     	; 0x76d2 <putChar_Note+0x3e>
    76c4:	fb 01       	movw	r30, r22
    76c6:	31 96       	adiw	r30, 0x01	; 1
    76c8:	88 e4       	ldi	r24, 0x48	; 72
    76ca:	db 01       	movw	r26, r22
    76cc:	8c 93       	st	X, r24
    76ce:	8f e5       	ldi	r24, 0x5F	; 95
    76d0:	27 c0       	rjmp	.+78     	; 0x7720 <putChar_Note+0x8c>
    76d2:	85 30       	cpi	r24, 0x05	; 5
    76d4:	58 f4       	brcc	.+22     	; 0x76ec <putChar_Note+0x58>
    76d6:	fb 01       	movw	r30, r22
    76d8:	31 96       	adiw	r30, 0x01	; 1
    76da:	28 2f       	mov	r18, r24
    76dc:	26 95       	lsr	r18
    76de:	2d 5b       	subi	r18, 0xBD	; 189
    76e0:	db 01       	movw	r26, r22
    76e2:	2c 93       	st	X, r18
    76e4:	80 fd       	sbrc	r24, 0
    76e6:	19 c0       	rjmp	.+50     	; 0x771a <putChar_Note+0x86>
    76e8:	8f e5       	ldi	r24, 0x5F	; 95
    76ea:	1a c0       	rjmp	.+52     	; 0x7720 <putChar_Note+0x8c>
    76ec:	89 30       	cpi	r24, 0x09	; 9
    76ee:	30 f0       	brcs	.+12     	; 0x76fc <putChar_Note+0x68>
    76f0:	fb 01       	movw	r30, r22
    76f2:	31 96       	adiw	r30, 0x01	; 1
    76f4:	21 e4       	ldi	r18, 0x41	; 65
    76f6:	db 01       	movw	r26, r22
    76f8:	2c 93       	st	X, r18
    76fa:	0b c0       	rjmp	.+22     	; 0x7712 <putChar_Note+0x7e>
    76fc:	fb 01       	movw	r30, r22
    76fe:	31 96       	adiw	r30, 0x01	; 1
    7700:	28 2f       	mov	r18, r24
    7702:	30 e0       	ldi	r19, 0x00	; 0
    7704:	25 50       	subi	r18, 0x05	; 5
    7706:	31 09       	sbc	r19, r1
    7708:	35 95       	asr	r19
    770a:	27 95       	ror	r18
    770c:	2a 5b       	subi	r18, 0xBA	; 186
    770e:	db 01       	movw	r26, r22
    7710:	2c 93       	st	X, r18
    7712:	80 ff       	sbrs	r24, 0
    7714:	04 c0       	rjmp	.+8      	; 0x771e <putChar_Note+0x8a>
    7716:	8f e5       	ldi	r24, 0x5F	; 95
    7718:	03 c0       	rjmp	.+6      	; 0x7720 <putChar_Note+0x8c>
    771a:	83 e2       	ldi	r24, 0x23	; 35
    771c:	01 c0       	rjmp	.+2      	; 0x7720 <putChar_Note+0x8c>
    771e:	83 e2       	ldi	r24, 0x23	; 35
    7720:	80 83       	st	Z, r24
    7722:	91 11       	cpse	r25, r1
    7724:	05 c0       	rjmp	.+10     	; 0x7730 <putChar_Note+0x9c>
    7726:	df 01       	movw	r26, r30
    7728:	12 96       	adiw	r26, 0x02	; 2
    772a:	8d e6       	ldi	r24, 0x6D	; 109
    772c:	81 83       	std	Z+1, r24	; 0x01
    772e:	0b c0       	rjmp	.+22     	; 0x7746 <putChar_Note+0xb2>
    7730:	9c 30       	cpi	r25, 0x0C	; 12
    7732:	28 f4       	brcc	.+10     	; 0x773e <putChar_Note+0xaa>
    7734:	df 01       	movw	r26, r30
    7736:	12 96       	adiw	r26, 0x02	; 2
    7738:	91 5d       	subi	r25, 0xD1	; 209
    773a:	91 83       	std	Z+1, r25	; 0x01
    773c:	04 c0       	rjmp	.+8      	; 0x7746 <putChar_Note+0xb2>
    773e:	df 01       	movw	r26, r30
    7740:	12 96       	adiw	r26, 0x02	; 2
    7742:	8d e2       	ldi	r24, 0x2D	; 45
    7744:	81 83       	std	Z+1, r24	; 0x01
    7746:	1c 92       	st	X, r1
    7748:	cd 01       	movw	r24, r26
    774a:	08 95       	ret

0000774c <putChar_Manual>:
    774c:	83 30       	cpi	r24, 0x03	; 3
    774e:	38 f4       	brcc	.+14     	; 0x775e <putChar_Manual+0x12>
    7750:	fb 01       	movw	r30, r22
    7752:	31 96       	adiw	r30, 0x01	; 1
    7754:	93 e3       	ldi	r25, 0x33	; 51
    7756:	98 1b       	sub	r25, r24
    7758:	db 01       	movw	r26, r22
    775a:	9c 93       	st	X, r25
    775c:	0d c0       	rjmp	.+26     	; 0x7778 <putChar_Manual+0x2c>
    775e:	83 30       	cpi	r24, 0x03	; 3
    7760:	31 f4       	brne	.+12     	; 0x776e <putChar_Manual+0x22>
    7762:	fb 01       	movw	r30, r22
    7764:	31 96       	adiw	r30, 0x01	; 1
    7766:	80 e5       	ldi	r24, 0x50	; 80
    7768:	db 01       	movw	r26, r22
    776a:	8c 93       	st	X, r24
    776c:	05 c0       	rjmp	.+10     	; 0x7778 <putChar_Manual+0x2c>
    776e:	fb 01       	movw	r30, r22
    7770:	31 96       	adiw	r30, 0x01	; 1
    7772:	8d e2       	ldi	r24, 0x2D	; 45
    7774:	db 01       	movw	r26, r22
    7776:	8c 93       	st	X, r24
    7778:	10 82       	st	Z, r1
    777a:	cf 01       	movw	r24, r30
    777c:	08 95       	ret

0000777e <putString_P>:
    777e:	fc 01       	movw	r30, r24
    7780:	db 01       	movw	r26, r22
    7782:	20 e0       	ldi	r18, 0x00	; 0
    7784:	02 c0       	rjmp	.+4      	; 0x778a <putString_P+0xc>
    7786:	28 2f       	mov	r18, r24
    7788:	da 01       	movw	r26, r20
    778a:	94 91       	lpm	r25, Z
    778c:	99 23       	and	r25, r25
    778e:	51 f0       	breq	.+20     	; 0x77a4 <putString_P+0x26>
    7790:	ad 01       	movw	r20, r26
    7792:	4f 5f       	subi	r20, 0xFF	; 255
    7794:	5f 4f       	sbci	r21, 0xFF	; 255
    7796:	31 96       	adiw	r30, 0x01	; 1
    7798:	9c 93       	st	X, r25
    779a:	81 e0       	ldi	r24, 0x01	; 1
    779c:	82 0f       	add	r24, r18
    779e:	24 31       	cpi	r18, 0x14	; 20
    77a0:	90 f3       	brcs	.-28     	; 0x7786 <putString_P+0x8>
    77a2:	01 c0       	rjmp	.+2      	; 0x77a6 <putString_P+0x28>
    77a4:	ad 01       	movw	r20, r26
    77a6:	ca 01       	movw	r24, r20
    77a8:	08 95       	ret

000077aa <putString_Prog>:
    77aa:	fc 01       	movw	r30, r24
    77ac:	80 e5       	ldi	r24, 0x50	; 80
    77ae:	80 83       	st	Z, r24
    77b0:	96 2f       	mov	r25, r22
    77b2:	96 95       	lsr	r25
    77b4:	96 95       	lsr	r25
    77b6:	96 95       	lsr	r25
    77b8:	97 70       	andi	r25, 0x07	; 7
    77ba:	9f 5b       	subi	r25, 0xBF	; 191
    77bc:	91 83       	std	Z+1, r25	; 0x01
    77be:	67 70       	andi	r22, 0x07	; 7
    77c0:	6f 5c       	subi	r22, 0xCF	; 207
    77c2:	62 83       	std	Z+2, r22	; 0x02
    77c4:	cf 01       	movw	r24, r30
    77c6:	03 96       	adiw	r24, 0x03	; 3
    77c8:	08 95       	ret

000077ca <lcd_wordout>:
    77ca:	cf 93       	push	r28
    77cc:	c8 2f       	mov	r28, r24
    77ce:	89 2f       	mov	r24, r25
    77d0:	70 de       	rcall	.-800    	; 0x74b2 <lcd_hexout>
    77d2:	8c 2f       	mov	r24, r28
    77d4:	6e de       	rcall	.-804    	; 0x74b2 <lcd_hexout>
    77d6:	cf 91       	pop	r28
    77d8:	08 95       	ret

000077da <lcd_noteOut>:
    77da:	cf 93       	push	r28
    77dc:	df 93       	push	r29
    77de:	88 23       	and	r24, r24
    77e0:	e4 f1       	brlt	.+120    	; 0x785a <lcd_noteOut+0x80>
    77e2:	90 e0       	ldi	r25, 0x00	; 0
    77e4:	02 c0       	rjmp	.+4      	; 0x77ea <lcd_noteOut+0x10>
    77e6:	9f 5f       	subi	r25, 0xFF	; 255
    77e8:	8c 50       	subi	r24, 0x0C	; 12
    77ea:	8c 30       	cpi	r24, 0x0C	; 12
    77ec:	e0 f7       	brcc	.-8      	; 0x77e6 <lcd_noteOut+0xc>
    77ee:	48 2f       	mov	r20, r24
    77f0:	50 e0       	ldi	r21, 0x00	; 0
    77f2:	4c 30       	cpi	r20, 0x0C	; 12
    77f4:	51 05       	cpc	r21, r1
    77f6:	30 f4       	brcc	.+12     	; 0x7804 <lcd_noteOut+0x2a>
    77f8:	fa 01       	movw	r30, r20
    77fa:	88 27       	eor	r24, r24
    77fc:	ea 55       	subi	r30, 0x5A	; 90
    77fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7800:	8f 4f       	sbci	r24, 0xFF	; 255
    7802:	5d c1       	rjmp	.+698    	; 0x7abe <__tablejump2__>
    7804:	d3 e2       	ldi	r29, 0x23	; 35
    7806:	80 e2       	ldi	r24, 0x20	; 32
    7808:	23 c0       	rjmp	.+70     	; 0x7850 <lcd_noteOut+0x76>
    780a:	d3 e2       	ldi	r29, 0x23	; 35
    780c:	84 e4       	ldi	r24, 0x44	; 68
    780e:	20 c0       	rjmp	.+64     	; 0x7850 <lcd_noteOut+0x76>
    7810:	d3 e2       	ldi	r29, 0x23	; 35
    7812:	86 e4       	ldi	r24, 0x46	; 70
    7814:	1d c0       	rjmp	.+58     	; 0x7850 <lcd_noteOut+0x76>
    7816:	d3 e2       	ldi	r29, 0x23	; 35
    7818:	87 e4       	ldi	r24, 0x47	; 71
    781a:	1a c0       	rjmp	.+52     	; 0x7850 <lcd_noteOut+0x76>
    781c:	d3 e2       	ldi	r29, 0x23	; 35
    781e:	81 e4       	ldi	r24, 0x41	; 65
    7820:	17 c0       	rjmp	.+46     	; 0x7850 <lcd_noteOut+0x76>
    7822:	d5 ea       	ldi	r29, 0xA5	; 165
    7824:	83 e4       	ldi	r24, 0x43	; 67
    7826:	14 c0       	rjmp	.+40     	; 0x7850 <lcd_noteOut+0x76>
    7828:	d5 ea       	ldi	r29, 0xA5	; 165
    782a:	84 e4       	ldi	r24, 0x44	; 68
    782c:	11 c0       	rjmp	.+34     	; 0x7850 <lcd_noteOut+0x76>
    782e:	d5 ea       	ldi	r29, 0xA5	; 165
    7830:	85 e4       	ldi	r24, 0x45	; 69
    7832:	0e c0       	rjmp	.+28     	; 0x7850 <lcd_noteOut+0x76>
    7834:	d5 ea       	ldi	r29, 0xA5	; 165
    7836:	86 e4       	ldi	r24, 0x46	; 70
    7838:	0b c0       	rjmp	.+22     	; 0x7850 <lcd_noteOut+0x76>
    783a:	d5 ea       	ldi	r29, 0xA5	; 165
    783c:	87 e4       	ldi	r24, 0x47	; 71
    783e:	08 c0       	rjmp	.+16     	; 0x7850 <lcd_noteOut+0x76>
    7840:	d5 ea       	ldi	r29, 0xA5	; 165
    7842:	81 e4       	ldi	r24, 0x41	; 65
    7844:	05 c0       	rjmp	.+10     	; 0x7850 <lcd_noteOut+0x76>
    7846:	d5 ea       	ldi	r29, 0xA5	; 165
    7848:	88 e4       	ldi	r24, 0x48	; 72
    784a:	02 c0       	rjmp	.+4      	; 0x7850 <lcd_noteOut+0x76>
    784c:	d3 e2       	ldi	r29, 0x23	; 35
    784e:	83 e4       	ldi	r24, 0x43	; 67
    7850:	99 23       	and	r25, r25
    7852:	39 f0       	breq	.+14     	; 0x7862 <lcd_noteOut+0x88>
    7854:	cf e2       	ldi	r28, 0x2F	; 47
    7856:	c9 0f       	add	r28, r25
    7858:	05 c0       	rjmp	.+10     	; 0x7864 <lcd_noteOut+0x8a>
    785a:	cd e2       	ldi	r28, 0x2D	; 45
    785c:	dd e2       	ldi	r29, 0x2D	; 45
    785e:	8d e2       	ldi	r24, 0x2D	; 45
    7860:	01 c0       	rjmp	.+2      	; 0x7864 <lcd_noteOut+0x8a>
    7862:	cd e2       	ldi	r28, 0x2D	; 45
    7864:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    7868:	8d 2f       	mov	r24, r29
    786a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    786e:	8c 2f       	mov	r24, r28
    7870:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    7874:	83 e0       	ldi	r24, 0x03	; 3
    7876:	df 91       	pop	r29
    7878:	cf 91       	pop	r28
    787a:	08 95       	ret

0000787c <lcd_ChannelOut>:
    787c:	cf 93       	push	r28
    787e:	c8 2f       	mov	r28, r24
    7880:	cf 70       	andi	r28, 0x0F	; 15
    7882:	81 e0       	ldi	r24, 0x01	; 1
    7884:	8c 0f       	add	r24, r28
    7886:	8a 30       	cpi	r24, 0x0A	; 10
    7888:	28 f0       	brcs	.+10     	; 0x7894 <lcd_ChannelOut+0x18>
    788a:	81 e3       	ldi	r24, 0x31	; 49
    788c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    7890:	87 ef       	ldi	r24, 0xF7	; 247
    7892:	8c 0f       	add	r24, r28
    7894:	80 5d       	subi	r24, 0xD0	; 208
    7896:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    789a:	cf 91       	pop	r28
    789c:	08 95       	ret

0000789e <lcd_ManualOutDec>:
    789e:	84 30       	cpi	r24, 0x04	; 4
    78a0:	20 f0       	brcs	.+8      	; 0x78aa <lcd_ManualOutDec+0xc>
    78a2:	8d e2       	ldi	r24, 0x2D	; 45
    78a4:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <lcd_putc>
    78a8:	08 95       	ret
    78aa:	83 30       	cpi	r24, 0x03	; 3
    78ac:	21 f4       	brne	.+8      	; 0x78b6 <lcd_ManualOutDec+0x18>
    78ae:	80 e5       	ldi	r24, 0x50	; 80
    78b0:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <lcd_putc>
    78b4:	08 95       	ret
    78b6:	93 e3       	ldi	r25, 0x33	; 51
    78b8:	98 1b       	sub	r25, r24
    78ba:	89 2f       	mov	r24, r25
    78bc:	0c 94 61 13 	jmp	0x26c2	; 0x26c2 <lcd_putc>
    78c0:	08 95       	ret

000078c2 <lcd_blank>:
    78c2:	cf 93       	push	r28
    78c4:	04 c0       	rjmp	.+8      	; 0x78ce <lcd_blank+0xc>
    78c6:	80 e2       	ldi	r24, 0x20	; 32
    78c8:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    78cc:	8c 2f       	mov	r24, r28
    78ce:	cf ef       	ldi	r28, 0xFF	; 255
    78d0:	c8 0f       	add	r28, r24
    78d2:	81 11       	cpse	r24, r1
    78d4:	f8 cf       	rjmp	.-16     	; 0x78c6 <lcd_blank+0x4>
    78d6:	cf 91       	pop	r28
    78d8:	08 95       	ret

000078da <lcd_clrEol>:
    78da:	cf 93       	push	r28
    78dc:	90 e0       	ldi	r25, 0x00	; 0
    78de:	04 c0       	rjmp	.+8      	; 0x78e8 <lcd_clrEol+0xe>
    78e0:	80 e2       	ldi	r24, 0x20	; 32
    78e2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    78e6:	9c 2f       	mov	r25, r28
    78e8:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    78ec:	84 31       	cpi	r24, 0x14	; 20
    78ee:	51 f0       	breq	.+20     	; 0x7904 <lcd_clrEol+0x2a>
    78f0:	84 35       	cpi	r24, 0x54	; 84
    78f2:	41 f0       	breq	.+16     	; 0x7904 <lcd_clrEol+0x2a>
    78f4:	88 32       	cpi	r24, 0x28	; 40
    78f6:	31 f0       	breq	.+12     	; 0x7904 <lcd_clrEol+0x2a>
    78f8:	88 36       	cpi	r24, 0x68	; 104
    78fa:	21 f0       	breq	.+8      	; 0x7904 <lcd_clrEol+0x2a>
    78fc:	c1 e0       	ldi	r28, 0x01	; 1
    78fe:	c9 0f       	add	r28, r25
    7900:	94 31       	cpi	r25, 0x14	; 20
    7902:	70 f3       	brcs	.-36     	; 0x78e0 <lcd_clrEol+0x6>
    7904:	cf 91       	pop	r28
    7906:	08 95       	ret

00007908 <lcd_cursosblink>:
    7908:	8d e0       	ldi	r24, 0x0D	; 13
    790a:	0e 94 ad 12 	call	0x255a	; 0x255a <lcd_write_command>
    790e:	8f ef       	ldi	r24, 0xFF	; 255
    7910:	80 93 db 18 	sts	0x18DB, r24	; 0x8018db <lcd_cursorIsOn>
    7914:	08 95       	ret

00007916 <lcd_cursoroff>:
    7916:	8c e0       	ldi	r24, 0x0C	; 12
    7918:	0e 94 ad 12 	call	0x255a	; 0x255a <lcd_write_command>
    791c:	10 92 db 18 	sts	0x18DB, r1	; 0x8018db <lcd_cursorIsOn>
    7920:	08 95       	ret

00007922 <lcd_waitSymbolOn>:
    7922:	cf 93       	push	r28
    7924:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7928:	8c e0       	ldi	r24, 0x0C	; 12
    792a:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    792e:	81 ea       	ldi	r24, 0xA1	; 161
    7930:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    7934:	8c 2f       	mov	r24, r28
    7936:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    793a:	cf 91       	pop	r28
    793c:	08 95       	ret

0000793e <lcd_waitSymbolOff>:
    793e:	cf 93       	push	r28
    7940:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7944:	8c e0       	ldi	r24, 0x0C	; 12
    7946:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    794a:	80 e2       	ldi	r24, 0x20	; 32
    794c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>
    7950:	8c 2f       	mov	r24, r28
    7952:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
    7956:	cf 91       	pop	r28
    7958:	08 95       	ret

0000795a <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    795a:	84 30       	cpi	r24, 0x04	; 4
    795c:	28 f0       	brcs	.+10     	; 0x7968 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    795e:	20 e0       	ldi	r18, 0x00	; 0
    7960:	0d c0       	rjmp	.+26     	; 0x797c <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7962:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    7964:	fa 01       	movw	r30, r20
    7966:	02 c0       	rjmp	.+4      	; 0x796c <keylabel_set+0x12>
    7968:	fb 01       	movw	r30, r22
    796a:	20 e0       	ldi	r18, 0x00	; 0
    796c:	af 01       	movw	r20, r30
    796e:	4f 5f       	subi	r20, 0xFF	; 255
    7970:	5f 4f       	sbci	r21, 0xFF	; 255
    7972:	94 91       	lpm	r25, Z
    7974:	99 23       	and	r25, r25
    7976:	11 f0       	breq	.+4      	; 0x797c <keylabel_set+0x22>
    7978:	25 30       	cpi	r18, 0x05	; 5
    797a:	98 f3       	brcs	.-26     	; 0x7962 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    797c:	90 e0       	ldi	r25, 0x00	; 0
    797e:	dc 01       	movw	r26, r24
    7980:	aa 0f       	add	r26, r26
    7982:	bb 1f       	adc	r27, r27
    7984:	aa 0f       	add	r26, r26
    7986:	bb 1f       	adc	r27, r27
    7988:	8a 0f       	add	r24, r26
    798a:	9b 1f       	adc	r25, r27
    798c:	dc 01       	movw	r26, r24
    798e:	af 5e       	subi	r26, 0xEF	; 239
    7990:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7992:	45 e0       	ldi	r20, 0x05	; 5
    7994:	50 e0       	ldi	r21, 0x00	; 0
    7996:	42 1b       	sub	r20, r18
    7998:	51 09       	sbc	r21, r1
    799a:	ca 01       	movw	r24, r20
    799c:	99 23       	and	r25, r25
    799e:	0c f4       	brge	.+2      	; 0x79a2 <keylabel_set+0x48>
    79a0:	01 96       	adiw	r24, 0x01	; 1
    79a2:	95 95       	asr	r25
    79a4:	87 95       	ror	r24
    79a6:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    79a8:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    79aa:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    79ac:	0e c0       	rjmp	.+28     	; 0x79ca <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    79ae:	93 17       	cp	r25, r19
    79b0:	10 f0       	brcs	.+4      	; 0x79b6 <keylabel_set+0x5c>
    79b2:	98 17       	cp	r25, r24
    79b4:	18 f0       	brcs	.+6      	; 0x79bc <keylabel_set+0x62>
			*charBufPtr = ' ';
    79b6:	20 e2       	ldi	r18, 0x20	; 32
    79b8:	2c 93       	st	X, r18
    79ba:	05 c0       	rjmp	.+10     	; 0x79c6 <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    79bc:	fb 01       	movw	r30, r22
    79be:	24 91       	lpm	r18, Z
    79c0:	2c 93       	st	X, r18
    79c2:	6f 5f       	subi	r22, 0xFF	; 255
    79c4:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    79c6:	11 96       	adiw	r26, 0x01	; 1
		i++;
    79c8:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    79ca:	95 30       	cpi	r25, 0x05	; 5
    79cc:	80 f3       	brcs	.-32     	; 0x79ae <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    79ce:	08 95       	ret

000079d0 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    79d0:	90 e0       	ldi	r25, 0x00	; 0
    79d2:	fc 01       	movw	r30, r24
    79d4:	ee 0f       	add	r30, r30
    79d6:	ff 1f       	adc	r31, r31
    79d8:	ee 0f       	add	r30, r30
    79da:	ff 1f       	adc	r31, r31
    79dc:	8e 0f       	add	r24, r30
    79de:	9f 1f       	adc	r25, r31
    79e0:	fc 01       	movw	r30, r24
    79e2:	ef 5e       	subi	r30, 0xEF	; 239
    79e4:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    79e6:	80 e0       	ldi	r24, 0x00	; 0
    79e8:	04 c0       	rjmp	.+8      	; 0x79f2 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    79ea:	90 e2       	ldi	r25, 0x20	; 32
    79ec:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    79ee:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    79f0:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    79f2:	85 30       	cpi	r24, 0x05	; 5
    79f4:	d0 f3       	brcs	.-12     	; 0x79ea <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    79f6:	08 95       	ret

000079f8 <keylabel_toLCD>:

void keylabel_toLCD(){
    79f8:	0f 93       	push	r16
    79fa:	1f 93       	push	r17
    79fc:	cf 93       	push	r28
    79fe:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7a00:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    7a04:	84 e5       	ldi	r24, 0x54	; 84
    7a06:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7a0a:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7a0c:	e1 e1       	ldi	r30, 0x11	; 17
    7a0e:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7a10:	08 c0       	rjmp	.+16     	; 0x7a22 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    7a12:	8f 01       	movw	r16, r30
    7a14:	0f 5f       	subi	r16, 0xFF	; 255
    7a16:	1f 4f       	sbci	r17, 0xFF	; 255
    7a18:	80 81       	ld	r24, Z
    7a1a:	0e 94 61 13 	call	0x26c2	; 0x26c2 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7a1e:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    7a20:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7a22:	c4 31       	cpi	r28, 0x14	; 20
    7a24:	b0 f3       	brcs	.-20     	; 0x7a12 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    7a26:	8d 2f       	mov	r24, r29
    7a28:	0e 94 37 13 	call	0x266e	; 0x266e <lcd_goto>
}
    7a2c:	df 91       	pop	r29
    7a2e:	cf 91       	pop	r28
    7a30:	1f 91       	pop	r17
    7a32:	0f 91       	pop	r16
    7a34:	08 95       	ret

00007a36 <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7a36:	90 e0       	ldi	r25, 0x00	; 0
    7a38:	fc 01       	movw	r30, r24
    7a3a:	ee 0f       	add	r30, r30
    7a3c:	ff 1f       	adc	r31, r31
    7a3e:	ee 0f       	add	r30, r30
    7a40:	ff 1f       	adc	r31, r31
    7a42:	8e 0f       	add	r24, r30
    7a44:	9f 1f       	adc	r25, r31
    7a46:	fc 01       	movw	r30, r24
    7a48:	ef 5e       	subi	r30, 0xEF	; 239
    7a4a:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7a4c:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7a4e:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7a50:	12 c0       	rjmp	.+36     	; 0x7a76 <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    7a52:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7a54:	61 11       	cpse	r22, r1
    7a56:	06 c0       	rjmp	.+12     	; 0x7a64 <keylabel_statcheck+0x2e>
    7a58:	2a 32       	cpi	r18, 0x2A	; 42
    7a5a:	21 f4       	brne	.+8      	; 0x7a64 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7a5c:	80 e8       	ldi	r24, 0x80	; 128
    7a5e:	80 83       	st	Z, r24
			result = 0xFF;
    7a60:	8f ef       	ldi	r24, 0xFF	; 255
    7a62:	07 c0       	rjmp	.+14     	; 0x7a72 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7a64:	66 23       	and	r22, r22
    7a66:	29 f0       	breq	.+10     	; 0x7a72 <keylabel_statcheck+0x3c>
    7a68:	20 38       	cpi	r18, 0x80	; 128
    7a6a:	19 f4       	brne	.+6      	; 0x7a72 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    7a6c:	8a e2       	ldi	r24, 0x2A	; 42
    7a6e:	80 83       	st	Z, r24
			result = 0xFF;
    7a70:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    7a72:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7a74:	9f 5f       	subi	r25, 0xFF	; 255
    7a76:	95 30       	cpi	r25, 0x05	; 5
    7a78:	60 f3       	brcs	.-40     	; 0x7a52 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7a7a:	08 95       	ret

00007a7c <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7a7c:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7a7e:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7a80:	94 91       	lpm	r25, Z
    7a82:	99 23       	and	r25, r25
    7a84:	21 f0       	breq	.+8      	; 0x7a8e <get_StrLenP+0x12>
			return result;
		}
		pString++;
    7a86:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7a88:	8f 5f       	subi	r24, 0xFF	; 255
    7a8a:	80 32       	cpi	r24, 0x20	; 32
    7a8c:	c8 f3       	brcs	.-14     	; 0x7a80 <get_StrLenP+0x4>
	return result;
}
    7a8e:	08 95       	ret

00007a90 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7a90:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7a92:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7a94:	90 81       	ld	r25, Z
    7a96:	99 23       	and	r25, r25
    7a98:	21 f0       	breq	.+8      	; 0x7aa2 <get_StrLen+0x12>
			return result;
		}
		pString++;
    7a9a:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7a9c:	8f 5f       	subi	r24, 0xFF	; 255
    7a9e:	80 32       	cpi	r24, 0x20	; 32
    7aa0:	c8 f3       	brcs	.-14     	; 0x7a94 <get_StrLen+0x4>
	return result;
}
    7aa2:	08 95       	ret

00007aa4 <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    7aa4:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7aa6:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    7aa8:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7aaa:	06 c0       	rjmp	.+12     	; 0x7ab8 <reverse_Bits+0x14>
		result = result << 1;
    7aac:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7aae:	32 2f       	mov	r19, r18
    7ab0:	31 70       	andi	r19, 0x01	; 1
    7ab2:	83 2b       	or	r24, r19
		val = val >> 1;
    7ab4:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7ab6:	9f 5f       	subi	r25, 0xFF	; 255
    7ab8:	98 30       	cpi	r25, 0x08	; 8
    7aba:	c0 f3       	brcs	.-16     	; 0x7aac <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7abc:	08 95       	ret

00007abe <__tablejump2__>:
    7abe:	ee 0f       	add	r30, r30
    7ac0:	ff 1f       	adc	r31, r31
    7ac2:	88 1f       	adc	r24, r24
    7ac4:	8b bf       	out	0x3b, r24	; 59
    7ac6:	07 90       	elpm	r0, Z+
    7ac8:	f6 91       	elpm	r31, Z
    7aca:	e0 2d       	mov	r30, r0
    7acc:	19 94       	eijmp

00007ace <eeprom_read_block>:
    7ace:	dc 01       	movw	r26, r24
    7ad0:	cb 01       	movw	r24, r22

00007ad2 <eeprom_read_blraw>:
    7ad2:	fc 01       	movw	r30, r24
    7ad4:	f9 99       	sbic	0x1f, 1	; 31
    7ad6:	fe cf       	rjmp	.-4      	; 0x7ad4 <eeprom_read_blraw+0x2>
    7ad8:	06 c0       	rjmp	.+12     	; 0x7ae6 <eeprom_read_blraw+0x14>
    7ada:	f2 bd       	out	0x22, r31	; 34
    7adc:	e1 bd       	out	0x21, r30	; 33
    7ade:	f8 9a       	sbi	0x1f, 0	; 31
    7ae0:	31 96       	adiw	r30, 0x01	; 1
    7ae2:	00 b4       	in	r0, 0x20	; 32
    7ae4:	0d 92       	st	X+, r0
    7ae6:	41 50       	subi	r20, 0x01	; 1
    7ae8:	50 40       	sbci	r21, 0x00	; 0
    7aea:	b8 f7       	brcc	.-18     	; 0x7ada <eeprom_read_blraw+0x8>
    7aec:	08 95       	ret

00007aee <eeprom_read_byte>:
    7aee:	f9 99       	sbic	0x1f, 1	; 31
    7af0:	fe cf       	rjmp	.-4      	; 0x7aee <eeprom_read_byte>
    7af2:	92 bd       	out	0x22, r25	; 34
    7af4:	81 bd       	out	0x21, r24	; 33
    7af6:	f8 9a       	sbi	0x1f, 0	; 31
    7af8:	99 27       	eor	r25, r25
    7afa:	80 b5       	in	r24, 0x20	; 32
    7afc:	08 95       	ret

00007afe <eeprom_read_word>:
    7afe:	a8 e1       	ldi	r26, 0x18	; 24
    7b00:	b0 e0       	ldi	r27, 0x00	; 0
    7b02:	42 e0       	ldi	r20, 0x02	; 2
    7b04:	50 e0       	ldi	r21, 0x00	; 0
    7b06:	e5 cf       	rjmp	.-54     	; 0x7ad2 <eeprom_read_blraw>

00007b08 <eeprom_update_block>:
    7b08:	dc 01       	movw	r26, r24
    7b0a:	a4 0f       	add	r26, r20
    7b0c:	b5 1f       	adc	r27, r21
    7b0e:	41 50       	subi	r20, 0x01	; 1
    7b10:	50 40       	sbci	r21, 0x00	; 0
    7b12:	40 f0       	brcs	.+16     	; 0x7b24 <eeprom_update_block+0x1c>
    7b14:	cb 01       	movw	r24, r22
    7b16:	84 0f       	add	r24, r20
    7b18:	95 1f       	adc	r25, r21
    7b1a:	2e 91       	ld	r18, -X
    7b1c:	05 d0       	rcall	.+10     	; 0x7b28 <eeprom_update_r18>
    7b1e:	41 50       	subi	r20, 0x01	; 1
    7b20:	50 40       	sbci	r21, 0x00	; 0
    7b22:	d8 f7       	brcc	.-10     	; 0x7b1a <eeprom_update_block+0x12>
    7b24:	08 95       	ret

00007b26 <eeprom_update_byte>:
    7b26:	26 2f       	mov	r18, r22

00007b28 <eeprom_update_r18>:
    7b28:	f9 99       	sbic	0x1f, 1	; 31
    7b2a:	fe cf       	rjmp	.-4      	; 0x7b28 <eeprom_update_r18>
    7b2c:	92 bd       	out	0x22, r25	; 34
    7b2e:	81 bd       	out	0x21, r24	; 33
    7b30:	f8 9a       	sbi	0x1f, 0	; 31
    7b32:	01 97       	sbiw	r24, 0x01	; 1
    7b34:	00 b4       	in	r0, 0x20	; 32
    7b36:	02 16       	cp	r0, r18
    7b38:	39 f0       	breq	.+14     	; 0x7b48 <eeprom_update_r18+0x20>
    7b3a:	1f ba       	out	0x1f, r1	; 31
    7b3c:	20 bd       	out	0x20, r18	; 32
    7b3e:	0f b6       	in	r0, 0x3f	; 63
    7b40:	f8 94       	cli
    7b42:	fa 9a       	sbi	0x1f, 2	; 31
    7b44:	f9 9a       	sbi	0x1f, 1	; 31
    7b46:	0f be       	out	0x3f, r0	; 63
    7b48:	08 95       	ret

00007b4a <eeprom_update_word>:
    7b4a:	01 96       	adiw	r24, 0x01	; 1
    7b4c:	27 2f       	mov	r18, r23
    7b4e:	ec df       	rcall	.-40     	; 0x7b28 <eeprom_update_r18>
    7b50:	ea cf       	rjmp	.-44     	; 0x7b26 <eeprom_update_byte>

00007b52 <_exit>:
    7b52:	f8 94       	cli

00007b54 <__stop_program>:
    7b54:	ff cf       	rjmp	.-2      	; 0x7b54 <__stop_program>
