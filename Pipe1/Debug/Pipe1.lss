
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00007618  000076cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007618  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001715  00800208  00800208  000076d4  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  000076d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000086d4  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008704  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000ad0  00000000  00000000  00008748  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e877  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000260c  00000000  00000000  00017a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008955  00000000  00000000  0001a09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001ae0  00000000  00000000  000229f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000032dd  00000000  00000000  000244d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000952c  00000000  00000000  000277ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e88  00000000  00000000  00030cd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__ctors_end>
       4:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
       8:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
       c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      10:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      14:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      18:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      1c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      20:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      24:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      28:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      2c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      30:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      34:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      38:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      3c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      40:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      44:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      48:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      4c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      50:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      54:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__vector_21>
      58:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      5c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      60:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      64:	0c 94 fc 35 	jmp	0x6bf8	; 0x6bf8 <__vector_25>
      68:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__vector_26>
      6c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      70:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      74:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      78:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      7c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      80:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      84:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      88:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      8c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      90:	0c 94 3d 34 	jmp	0x687a	; 0x687a <__vector_36>
      94:	0c 94 7b 34 	jmp	0x68f6	; 0x68f6 <__vector_37>
      98:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      9c:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      a0:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      a4:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      a8:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      ac:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      b0:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      b4:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      b8:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      bc:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      c0:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      c4:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      c8:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      cc:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      d0:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      d4:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      d8:	0c 94 02 37 	jmp	0x6e04	; 0x6e04 <__vector_54>
      dc:	0c 94 5a 37 	jmp	0x6eb4	; 0x6eb4 <__vector_55>
      e0:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__bad_interrupt>
      e4:	5f 1e       	adc	r5, r31
      e6:	6a 1e       	adc	r6, r26
      e8:	76 1e       	adc	r7, r22
      ea:	92 1e       	adc	r9, r18
      ec:	af 1e       	adc	r10, r31
      ee:	d0 1e       	adc	r13, r16
      f0:	db 1e       	adc	r13, r27
      f2:	e6 1e       	adc	r14, r22
      f4:	fb 1e       	adc	r15, r27
      f6:	11 1f       	adc	r17, r17
      f8:	19 1f       	adc	r17, r25
      fa:	27 1f       	adc	r18, r23
      fc:	fb 1e       	adc	r15, r27
      fe:	54 1f       	adc	r21, r20
     100:	64 1f       	adc	r22, r20
     102:	88 1f       	adc	r24, r24
     104:	da 1f       	adc	r29, r26
     106:	f3 1f       	adc	r31, r19
     108:	08 20       	and	r0, r8
     10a:	21 20       	and	r2, r1
     10c:	29 20       	and	r2, r9
     10e:	4e 20       	and	r4, r14
     110:	4e 20       	and	r4, r14
     112:	67 20       	and	r6, r7
     114:	74 20       	and	r7, r4
     116:	63 20       	and	r6, r3
     118:	cf 20       	and	r12, r15
     11a:	d7 20       	and	r13, r7
     11c:	22 21       	and	r18, r2
     11e:	84 21       	and	r24, r4
     120:	ae 21       	and	r26, r14
     122:	da 21       	and	r29, r10
     124:	09 22       	and	r0, r25
     126:	11 22       	and	r1, r17
     128:	17 22       	and	r1, r23
     12a:	cf 20       	and	r12, r15
     12c:	1f 22       	and	r1, r31
     12e:	33 22       	and	r3, r19
     130:	17 22       	and	r1, r23
     132:	71 22       	and	r7, r17
     134:	7e 22       	and	r7, r30
     136:	8a 22       	and	r8, r26
     138:	9f 22       	and	r9, r31
     13a:	b8 22       	and	r11, r24
     13c:	db 22       	and	r13, r27
     13e:	e6 22       	and	r14, r22
     140:	ec 22       	and	r14, r28
     142:	f1 22       	and	r15, r17
     144:	04 23       	and	r16, r20
     146:	25 23       	and	r18, r21
     148:	38 23       	and	r19, r24
     14a:	f1 22       	and	r15, r17
     14c:	72 39       	cpi	r23, 0x92	; 146
     14e:	87 39       	cpi	r24, 0x97	; 151
     150:	75 39       	cpi	r23, 0x95	; 149
     152:	66 39       	cpi	r22, 0x96	; 150
     154:	78 39       	cpi	r23, 0x98	; 152
     156:	7b 39       	cpi	r23, 0x9B	; 155
     158:	69 39       	cpi	r22, 0x99	; 153
     15a:	7e 39       	cpi	r23, 0x9E	; 158
     15c:	6c 39       	cpi	r22, 0x9C	; 156
     15e:	81 39       	cpi	r24, 0x91	; 145
     160:	6f 39       	cpi	r22, 0x9F	; 159
     162:	84 39       	cpi	r24, 0x94	; 148

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWnone>:
     2b4:	6e 6f 6e 65 00                                      none.

000002b9 <usbHWmidiThru>:
     2b9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

000002c5 <usbHWmidiOut>:
     2c5:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

000002cf <usbHWmidiIn>:
     2cf:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

000002d8 <usbHWmidichanSW>:
     2d8:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2e8:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2f8:	20 00                                                .

000002fa <usbHWBits>:
     2fa:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000302 <usbHWmodule>:
     302:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000030a <usbHWempty>:
     30a:	65 6d 70 74 79 00                                   empty.

00000310 <usbHWRegister>:
     310:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000031c <usbHWRange>:
     31c:	52 61 6e 67 65 20 00                                Range .

00000323 <usbHWManual>:
     323:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000032c <usbHWmodulCheck>:
     32c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     33c:	20 00                                                .

0000033e <usbHWmodulInst>:
     33e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     34e:	3a 20 00                                            : .

00000351 <usbHWtitel>:
     351:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     361:	72 61 74 69 6f 6e 0d 0a 00                          ration...

0000036a <HelloMsg>:
     36a:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     37a:	65 72 66 61 63 65 0d 0a 00                          erface...

00000383 <usbLog>:
     383:	4c 6f 67 0d 0a 00                                   Log...

00000389 <usbEmpty>:
     389:	65 6d 70 74 79 0d 0a 00                             empty...

00000391 <msg_programming1>:
     391:	73 61 76 65 2e 2e 2e 00                             save....

00000399 <logNone>:
     399:	3c 6e 6f 6e 65 3e 00                                <none>.

000003a0 <stringNotAssigen>:
     3a0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003ab <menuMessageE>:
     3ab:	45 3a 00                                            E:.

000003ae <menuMessageOK>:
     3ae:	6f 6b 20 00                                         ok .

000003b2 <menuMessageAbort>:
     3b2:	61 62 6f 72 74 00                                   abort.

000003b8 <menuMessageMIDIpanic>:
     3b8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003c7 <messageRegisterMan>:
     3c7:	2b 00                                               +.

000003c9 <messageLoaded>:
     3c9:	20 52 65 67 2e 67 65 73 65 74 7a 74 00               Reg.gesetzt.

000003d6 <messageSaved>:
     3d6:	20 52 65 67 2e 69 6e 20 4b 6f 6d 62 2e 67 65 73      Reg.in Komb.ges
     3e6:	70 2e 00                                            p..

000003e9 <MenuMIDIOutText>:
     3e9:	4f 75 74 3a 00                                      Out:.

000003ee <MenuMIDIInText>:
     3ee:	49 6e 3a 00                                         In:.

000003f2 <initMenuText>:
     3f2:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003fc <nibbleInfo>:
	...
     404:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     414:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     424:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     434:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     444:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     454:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     464:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     474:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000483 <menu_selFunc>:
     483:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 0d 07     ..<none>........
     493:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     4a3:	17 07 03 07 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     4b3:	6e 00 00 00 53 0c f9 06 00 00 00 00 01 10 4b 6f     n...S.........Ko
     4c3:	70 70 65 6c 32 3c 33 00 00 00 db 06 be 1d 00 00     ppel2<3.........
     4d3:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 d1 06     ..Koppel1<3.....
     4e3:	c1 1d 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     ......KoppelP<3.
     4f3:	00 00 c7 06 c4 1d 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     503:	31 3c 32 00 00 00 bd 06 c7 1d 00 00 01 10 4b 6f     1<2...........Ko
     513:	70 70 65 6c 50 3c 32 00 00 00 b3 06 ca 1d 00 00     ppelP<2.........
     523:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 a9 06     ..KoppelP<1.....
     533:	cd 1d 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     ......Koppel3<2.
     543:	00 00 9f 06 d0 1d 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     553:	33 3c 31 00 00 00 95 06 d3 1d 00 00 01 10 4b 6f     3<1...........Ko
     563:	70 70 65 6c 33 3c 50 00 00 00 8b 06 d6 1d 00 00     ppel3<P.........
     573:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 81 06     ..Koppel2<1.....
     583:	d9 1d 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     ......Koppel2<P.
     593:	00 00 77 06 dc 1d 00 00 01 10 4b 6f 70 70 65 6c     ..w.......Koppel
     5a3:	31 3c 50 00 00 00 6d 06 df 1d 00 00 01 10 4b 6f     1<P...m.......Ko
     5b3:	6d 62 69 6e 20 31 41 00 00 00 63 06 25 2a 00 00     mbin 1A...c.%*..
     5c3:	01 10 4b 6f 6d 62 69 6e 20 32 41 00 00 00 59 06     ..Kombin 2A...Y.
     5d3:	28 2a 00 00 01 10 4b 6f 6d 62 69 6e 20 33 41 00     (*....Kombin 3A.
     5e3:	00 00 4f 06 2b 2a 00 00 01 10 4b 6f 6d 62 69 6e     ..O.+*....Kombin
     5f3:	20 34 41 00 00 00 45 06 2e 2a 00 00 01 10 52 65      4A...E..*....Re
     603:	67 2e 61 75 73 00 00 00 00 00 3b 06 fc 18 00 00     g.aus.....;.....
     613:	01 10 4d 49 44 49 20 4f 66 66 00 00 00 00 e5 06     ..MIDI Off......
     623:	2e 28 00 00 c1 10 53 65 74 75 70 00 00 00 00 00     .(....Setup.....
     633:	43 0d ef 06 00 00 00 00                             C.......

0000063b <shortKeyTextRegOff>:
     63b:	52 65 67 09 00 00 00 00 00 00                       Reg.......

00000645 <shortKeyTextK4A>:
     645:	4b 62 34 41 80 00 00 00 00 00                       Kb4A......

0000064f <shortKeyTextK3A>:
     64f:	4b 62 33 41 80 00 00 00 00 00                       Kb3A......

00000659 <shortKeyTextK2A>:
     659:	4b 62 32 41 80 00 00 00 00 00                       Kb2A......

00000663 <shortKeyTextK1A>:
     663:	4b 62 31 41 80 00 00 00 00 00                       Kb1A......

0000066d <shortKeyTextCpl1P>:
     66d:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000677 <shortKeyTextCpl2P>:
     677:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000681 <shortKeyTextCpl21>:
     681:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000068b <shortKeyTextCpl3P>:
     68b:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000695 <shortKeyTextCpl31>:
     695:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000069f <shortKeyTextCpl32>:
     69f:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

000006a9 <shortKeyTextCplP1>:
     6a9:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

000006b3 <shortKeyTextCplP2>:
     6b3:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

000006bd <shortKeyTextCpl12>:
     6bd:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000006c7 <shortKeyTextCplP3>:
     6c7:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000006d1 <shortKeyTextCpl13>:
     6d1:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000006db <shortKeyTextCpl23>:
     6db:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000006e5 <shortKeyTextMIDIoff>:
     6e5:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000006ef <shortKeyTextSetup>:
     6ef:	53 65 74 75 00 00 00 00 00 00                       Setu......

000006f9 <shortKeyTextStim>:
     6f9:	53 74 69 6d 00 00 00 00 00 00                       Stim......

00000703 <shortKeyTextMenu>:
     703:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

0000070d <shortKeyTextNone>:
	...

00000717 <menu_main>:
     717:	81 00 4d 61 6e 75 61 6c 00 00 00 00 8f 07 00 00     ..Manual........
     727:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     737:	b7 07 00 00 7a 1d 00 00 01 00 4d 49 44 49 00 00     ....z.....MIDI..
     747:	00 00 00 00 83 09 00 00 00 00 00 00 01 00 54 61     ..............Ta
     757:	73 74 65 6e 00 00 00 00 03 0c 00 00 00 00 1f 19     sten............
     767:	01 00 53 74 61 74 75 73 00 00 00 00 2b 11 00 00     ..Status....+...
     777:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     787:	43 0d 00 00 00 00 00 00                             C.......

0000078f <menu_manual>:
     78f:	81 00 4b 6f 70 70 65 6c 00 00 00 00 93 08 00 00     ..Koppel........
     79f:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     7af:	53 0c 00 00 00 00 00 00                             S.......

000007b7 <menu_register>:
     7b7:	8c 00 4b 6f 6d 62 2e 6c 61 64 2e 00 00 00 a8 05     ..Komb.lad......
     7c7:	00 00 87 1d 0c 00 4b 6f 6d 62 2e 73 70 2e 00 00     ......Komb.sp...
     7d7:	00 00 a8 05 00 00 14 19 01 00 61 75 73 00 00 00     ..........aus...
	...
     7ef:	81 1d 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     7ff:	00 00 6d 05 00 00 d4 18 0e 00 52 65 67 2e 39 2d     ..m.......Reg.9-
     80f:	31 36 00 00 00 00 6e 05 00 00 d4 18 0e 00 52 65     16....n.......Re
     81f:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 d4 18     g.17-24...o.....
     82f:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     83f:	00 00 d4 18 0e 00 52 65 67 2e 33 33 2d 34 30 00     ......Reg.33-40.
     84f:	00 00 71 05 00 00 d4 18 0e 00 52 65 67 2e 34 31     ..q.......Reg.41
     85f:	2d 34 38 00 00 00 72 05 00 00 d4 18 0e 00 52 65     -48...r.......Re
     86f:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 d4 18     g.49-54...s.....
     87f:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     88f:	00 00 d4 18                                         ....

00000893 <menu_coupler>:
     893:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 0f 08     ..2<3...........
     8a3:	00 00 01 19 09 00 31 3c 33 00 00 00 00 00 00 00     ......1<3.......
     8b3:	00 00 10 08 00 00 01 19 09 00 31 3c 32 00 00 00     ..........1<2...
     8c3:	00 00 00 00 00 00 11 08 00 00 01 19 09 00 50 3c     ..............P<
     8d3:	33 00 00 00 00 00 00 00 00 00 12 08 00 00 01 19     3...............
     8e3:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 13 08     ..P<2...........
     8f3:	00 00 01 19 09 00 50 3c 31 00 00 00 00 00 00 00     ......P<1.......
     903:	00 00 14 08 00 00 01 19 09 00 33 3c 32 00 00 00     ..........3<2...
     913:	00 00 00 00 00 00 15 08 00 00 01 19 09 00 33 3c     ..............3<
     923:	31 00 00 00 00 00 00 00 00 00 16 08 00 00 01 19     1...............
     933:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 17 08     ..3<P...........
     943:	00 00 01 19 09 00 32 3c 31 00 00 00 00 00 00 00     ......2<1.......
     953:	00 00 18 08 00 00 01 19 09 00 32 3c 50 00 00 00     ..........2<P...
     963:	00 00 00 00 00 00 19 08 00 00 01 19 c9 00 31 3c     ..............1<
     973:	50 00 00 00 00 00 00 00 00 00 1a 08 00 00 01 19     P...............

00000983 <menu_midi>:
     983:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     993:	2e 28 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .(....MIDIin....
     9a3:	23 0a 00 00 00 00 8d 1a 01 00 4d 49 44 49 6f 75     #.........MIDIou
     9b3:	74 00 00 00 a3 0c 00 00 00 00 89 1a 03 10 54 68     t.............Th
     9c3:	72 75 2d 49 6e 00 00 00 00 00 24 08 00 00 d0 18     ru-In.....$.....
     9d3:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 25 08     ..Thru-Out....%.
     9e3:	00 00 d0 18 09 00 41 63 63 65 70 74 20 50 43 00     ......Accept PC.
     9f3:	00 00 30 09 00 00 85 1a 09 00 41 63 74 2e 53 65     ..0.......Act.Se
     a03:	6e 73 65 00 00 00 2e 09 00 00 85 1a c9 00 56 65     nse...........Ve
     a13:	6c 5a 34 4f 66 66 00 00 00 00 2f 09 00 00 85 1a     lZ4Off..../.....

00000a23 <menu_midiIn>:
     a23:	81 00 43 68 2e 31 00 00 00 00 00 00 63 0b 00 00     ..Ch.1......c...
     a33:	4a 18 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     J.....Ch.2......
     a43:	63 0b 01 00 4a 18 00 00 01 00 43 68 2e 33 00 00     c...J.....Ch.3..
     a53:	00 00 00 00 63 0b 02 00 4a 18 00 00 01 00 43 68     ....c...J.....Ch
     a63:	2e 34 00 00 00 00 00 00 63 0b 03 00 4a 18 00 00     .4......c...J...
     a73:	01 00 43 68 2e 35 00 00 00 00 00 00 63 0b 04 00     ..Ch.5......c...
     a83:	4a 18 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     J.....Ch.6......
     a93:	63 0b 05 00 4a 18 00 00 01 00 43 68 2e 37 00 00     c...J.....Ch.7..
     aa3:	00 00 00 00 63 0b 06 00 4a 18 00 00 01 00 43 68     ....c...J.....Ch
     ab3:	2e 38 00 00 00 00 00 00 63 0b 07 00 4a 18 00 00     .8......c...J...
     ac3:	01 00 43 68 2e 39 00 00 00 00 00 00 63 0b 08 00     ..Ch.9......c...
     ad3:	4a 18 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     J.....Ch.10.....
     ae3:	63 0b 09 00 4a 18 00 00 01 00 43 68 2e 31 31 00     c...J.....Ch.11.
     af3:	00 00 00 00 63 0b 0a 00 4a 18 00 00 01 00 43 68     ....c...J.....Ch
     b03:	2e 31 32 00 00 00 00 00 63 0b 0b 00 4a 18 00 00     .12.....c...J...
     b13:	01 00 43 68 2e 31 33 00 00 00 00 00 63 0b 0c 00     ..Ch.13.....c...
     b23:	4a 18 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     J.....Ch.14.....
     b33:	63 0b 0d 00 4a 18 00 00 01 00 43 68 2e 31 35 00     c...J.....Ch.15.
     b43:	00 00 00 00 63 0b 0e 00 4a 18 00 00 c1 00 43 68     ....c...J.....Ch
     b53:	2e 31 36 00 00 00 00 00 63 0b 0f 00 4a 18 00 00     .16.....c...J...

00000b63 <menu_midiInSec>:
     b63:	81 00 53 65 63 74 2e 31 00 00 00 00 b3 0b 00 00     ..Sect.1........
     b73:	55 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     U.....Sect.2....
     b83:	b3 0b 01 00 55 18 00 00 01 00 53 65 63 74 2e 33     ....U.....Sect.3
     b93:	00 00 00 00 b3 0b 02 00 55 18 00 00 c1 00 53 65     ........U.....Se
     ba3:	63 74 2e 34 00 00 00 00 b3 0b 03 00 55 18 00 00     ct.4........U...

00000bb3 <menu_midiInVar>:
     bb3:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 26 08     ..Manual......&.
     bc3:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     bd3:	00 00 27 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..'.......Range.
     be3:	00 00 00 00 00 00 28 08 00 00 00 00 c4 90 4d 61     ......(.......Ma
     bf3:	6e 4e 6f 74 65 00 00 00 00 00 29 08 00 00 00 00     nNote.....).....

00000c03 <menu_key>:
     c03:	81 08 54 61 73 74 65 31 00 00 00 00 83 04 00 00     ..Taste1........
     c13:	b9 18 b8 2a 01 08 54 61 73 74 65 32 00 00 00 00     ...*..Taste2....
     c23:	83 04 01 00 b9 18 b8 2a 01 08 54 61 73 74 65 33     .......*..Taste3
     c33:	00 00 00 00 83 04 02 00 b9 18 b8 2a c1 08 54 61     ...........*..Ta
     c43:	73 74 65 34 00 00 00 00 83 04 03 00 b9 18 b8 2a     ste4...........*

00000c53 <menu_tune>:
     c53:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     c63:	69 19 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     i.... Man.2.....
     c73:	00 00 01 00 69 19 00 00 01 20 4d 61 6e 2e 31 00     ....i.... Man.1.
     c83:	00 00 00 00 00 00 02 00 69 19 00 00 c1 20 50 65     ........i.... Pe
     c93:	64 61 6c 00 00 00 00 00 00 00 03 00 69 19 00 00     dal.........i...

00000ca3 <menu_midiOut>:
     ca3:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 26 09     ..III.........&.
     cb3:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     cc3:	00 00 28 09 00 00 00 00 03 10 49 00 00 00 00 00     ..(.......I.....
     cd3:	00 00 00 00 00 00 2a 09 00 00 00 00 03 10 50 00     ......*.......P.
	...
     ceb:	00 00 2c 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..,.......III(in
     cfb:	74 29 00 00 00 00 27 09 00 00 00 00 03 10 49 49     t)....'.......II
     d0b:	28 69 6e 74 29 00 00 00 00 00 29 09 00 00 00 00     (int).....).....
     d1b:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2b 09     ..I(int)......+.
     d2b:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     d3b:	00 00 2d 09 00 00 00 00                             ..-.....

00000d43 <menu_setup>:
     d43:	81 00 4d 6f 64 75 6c 65 00 00 00 00 0b 0e 00 00     ..Module........
     d53:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     d63:	7b 11 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     {.........Power.
     d73:	00 00 00 00 cf 0d 00 00 00 00 00 00 c1 00 45 45     ..............EE
     d83:	70 72 6f 6d 00 00 00 00 93 0d 00 00 00 00 00 00     prom............

00000d93 <menu_eeprom>:
     d93:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     da3:	41 29 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     A)....EEBackup..
     db3:	00 00 00 00 29 29 00 00 c1 00 45 45 52 65 73 74     ....))....EERest
     dc3:	6f 72 65 00 00 00 00 00 35 29 00 00                 ore.....5)..

00000dcf <menu_Power>:
     dcf:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     ddf:	7c 2b 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     |+....PowerOff..
     def:	00 00 00 00 85 2b 00 00 c1 00 50 2e 52 65 73 74     .....+....P.Rest
     dff:	61 72 74 00 00 00 00 00 8d 2b 00 00                 art......+..

00000e0b <menu_module>:
     e0b:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     e1b:	00 00 9b 1a 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     e2b:	00 00 56 03 00 00 9b 1a 0a 08 4d 6f 64 4f 4b 00     ..V.......ModOK.
     e3b:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     e4b:	64 54 65 73 74 00 00 00 6f 0e 00 00 00 00 00 00     dTest...o.......
     e5b:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 5f 0f 00 00     ..ModAssign._...
     e6b:	00 00 91 1a                                         ....

00000e6f <menu_ModeSel>:
     e6f:	81 00 4d 6f 64 2e 30 00 00 00 00 00 0f 0f 00 00     ..Mod.0.........
     e7f:	3f 18 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ?.....Mod.1.....
     e8f:	0f 0f 01 00 3f 18 00 00 01 00 4d 6f 64 2e 32 00     ....?.....Mod.2.
     e9f:	00 00 00 00 0f 0f 02 00 3f 18 00 00 01 00 4d 6f     ........?.....Mo
     eaf:	64 2e 33 00 00 00 00 00 0f 0f 03 00 3f 18 00 00     d.3.........?...
     ebf:	01 00 4d 6f 64 2e 34 00 00 00 00 00 0f 0f 04 00     ..Mod.4.........
     ecf:	3f 18 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ?.....Mod.5.....
     edf:	0f 0f 05 00 3f 18 00 00 01 00 4d 6f 64 2e 36 00     ....?.....Mod.6.
     eef:	00 00 00 00 0f 0f 06 00 3f 18 00 00 c1 00 4d 6f     ........?.....Mo
     eff:	64 2e 37 00 00 00 00 00 0f 0f 07 00 3f 18 00 00     d.7.........?...

00000f0f <menu_ModTestSelcted>:
     f0f:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     f1f:	23 19 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     #.....Write.....
     f2f:	00 00 ad 05 d6 17 12 18 01 00 54 65 73 74 50 74     ..........TestPt
     f3f:	72 6e 00 00 00 00 00 00 0c 29 00 00 c1 00 4c 6f     rn.......)....Lo
     f4f:	6f 70 54 73 74 00 00 00 00 00 00 00 57 19 00 00     opTst.......W...

00000f5f <menu_modAssign>:
     f5f:	81 00 4d 61 6e 2e 33 00 00 00 00 00 63 10 00 00     ..Man.3.....c...
     f6f:	73 18 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     s.....Man.2.....
     f7f:	63 10 01 00 73 18 00 00 01 00 4d 61 6e 2e 31 00     c...s.....Man.1.
     f8f:	00 00 00 00 63 10 02 00 73 18 00 00 01 00 50 65     ....c...s.....Pe
     f9f:	64 61 6c 00 00 00 00 00 63 10 03 00 73 18 00 00     dal.....c...s...
     faf:	c1 00 52 65 67 69 73 74 65 72 00 00 c3 0f 04 00     ..Register......
     fbf:	00 00 00 00                                         ....

00000fc3 <menu_modSection8>:
     fc3:	81 00 53 65 63 74 2e 31 00 00 00 00 b3 10 00 00     ..Sect.1........
     fd3:	a3 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     fe3:	b3 10 01 00 a3 18 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     ff3:	00 00 00 00 b3 10 02 00 a3 18 00 00 01 00 53 65     ..............Se
    1003:	63 74 2e 34 00 00 00 00 b3 10 03 00 a3 18 00 00     ct.4............
    1013:	01 00 53 65 63 74 2e 35 00 00 00 00 b3 10 04 00     ..Sect.5........
    1023:	a3 18 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    1033:	b3 10 05 00 a3 18 00 00 01 00 53 65 63 74 2e 37     ..........Sect.7
    1043:	00 00 00 00 b3 10 06 00 a3 18 00 00 c1 00 53 65     ..............Se
    1053:	63 74 2e 38 00 00 00 00 b3 10 07 00 a3 18 00 00     ct.8............

00001063 <menu_modSection>:
    1063:	81 00 53 65 63 74 2e 31 00 00 00 00 ef 10 00 00     ..Sect.1........
    1073:	7e 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ~.....Sect.2....
    1083:	ef 10 01 00 7e 18 00 00 01 00 53 65 63 74 2e 33     ....~.....Sect.3
    1093:	00 00 00 00 ef 10 02 00 7e 18 00 00 c1 00 53 65     ........~.....Se
    10a3:	63 74 2e 34 00 00 00 00 ef 10 03 00 7e 18 00 00     ct.4........~...

000010b3 <menu_modDefineReg>:
    10b3:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f6 07     ..RegBeg........
    10c3:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    10d3:	00 00 f7 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    10e3:	2f 42 69 74 00 00 f8 07 00 00 00 00                 /Bit........

000010ef <menu_modDefine>:
    10ef:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 32 09     ..NoteBeg.....2.
    10ff:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    110f:	00 00 33 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..3.......Module
    111f:	2f 42 69 74 00 00 34 09 00 00 00 00                 /Bit..4.....

0000112b <menu_status>:
    112b:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    113b:	35 24 00 00 01 00 55 53 42 00 00 00 00 00 00 00     5$....USB.......
    114b:	7b 11 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     {........@MIDI-I
    115b:	6e 00 00 00 00 00 00 00 b9 23 00 00 c2 40 4d 49     n........#...@MI
    116b:	44 49 2d 4f 75 74 00 00 00 00 00 00 f7 23 00 00     DI-Out.......#..

0000117b <menu_USBser>:
    117b:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 4e 16     ..EventLog....N.
    118b:	00 00 c5 1a 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
    119b:	00 00 00 00 9f 1a 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
    11ab:	66 67 00 00 00 00 00 00 d9 1a 00 00                 fg..........

000011b7 <sw_version>:
    11b7:	56 30 2e 36 39 00                                   V0.69.

000011bd <cplInfo>:
    11bd:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    11cd:	01 02 00 03 01 03 02 03                             ........

000011d5 <keylabel_1>:
    11d5:	31 00                                               1.

000011d7 <keylabel_0>:
    11d7:	30 00                                               0.

000011d9 <keylabel_text>:
    11d9:	54 65 78 74 80 00                                   Text..

000011df <keylabel_exit>:
    11df:	45 78 69 74 00                                      Exit.

000011e4 <keylabel_off>:
    11e4:	7e 61 75 73 00                                      ~aus.

000011e9 <keylabel_on>:
    11e9:	7e 65 69 6e 00                                      ~ein.

000011ee <keylabel_onoff>:
    11ee:	45 69 6e 80 00                                      Ein..

000011f3 <keylabel_minus>:
    11f3:	2d 00                                               -.

000011f5 <keylabel_plus>:
    11f5:	2b 00                                               +.

000011f7 <keylabel_left>:
    11f7:	7f 00                                               ..

000011f9 <keylabel_right>:
    11f9:	7e 00                                               ~.

000011fb <keylabel_down>:
    11fb:	09 00                                               ..

000011fd <keylabel_up>:
    11fd:	08 00                                               ..

000011ff <cgPattern_Block>:
    11ff:	00 00 0e 0e 0e 0e 00 00                             ........

00001207 <cgPattern_Down>:
    1207:	04 04 04 04 15 0e 04 00                             ........

0000120f <cgPattern_Up>:
    120f:	04 0e 15 04 04 04 04 00                             ........

00001217 <cr_lf>:
    1217:	0d 0a 00                                            ...

0000121a <__ctors_end>:
    121a:	11 24       	eor	r1, r1
    121c:	1f be       	out	0x3f, r1	; 63
    121e:	cf ef       	ldi	r28, 0xFF	; 255
    1220:	d1 e2       	ldi	r29, 0x21	; 33
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	00 e0       	ldi	r16, 0x00	; 0
    1228:	0c bf       	out	0x3c, r16	; 60

0000122a <__do_copy_data>:
    122a:	12 e0       	ldi	r17, 0x02	; 2
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b2 e0       	ldi	r27, 0x02	; 2
    1230:	e8 e1       	ldi	r30, 0x18	; 24
    1232:	f6 e7       	ldi	r31, 0x76	; 118
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	0b bf       	out	0x3b, r16	; 59
    1238:	02 c0       	rjmp	.+4      	; 0x123e <__do_copy_data+0x14>
    123a:	07 90       	elpm	r0, Z+
    123c:	0d 92       	st	X+, r0
    123e:	a8 30       	cpi	r26, 0x08	; 8
    1240:	b1 07       	cpc	r27, r17
    1242:	d9 f7       	brne	.-10     	; 0x123a <__do_copy_data+0x10>

00001244 <__do_clear_bss>:
    1244:	29 e1       	ldi	r18, 0x19	; 25
    1246:	a8 e0       	ldi	r26, 0x08	; 8
    1248:	b2 e0       	ldi	r27, 0x02	; 2
    124a:	01 c0       	rjmp	.+2      	; 0x124e <.do_clear_bss_start>

0000124c <.do_clear_bss_loop>:
    124c:	1d 92       	st	X+, r1

0000124e <.do_clear_bss_start>:
    124e:	ad 31       	cpi	r26, 0x1D	; 29
    1250:	b2 07       	cpc	r27, r18
    1252:	e1 f7       	brne	.-8      	; 0x124c <.do_clear_bss_loop>
    1254:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <main>
    1258:	0c 94 0a 3b 	jmp	0x7614	; 0x7614 <_exit>

0000125c <__bad_interrupt>:
    125c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001260 <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    1260:	fc 01       	movw	r30, r24
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	1c c0       	rjmp	.+56     	; 0x12a0 <crc16_ram+0x40>
    1268:	df 01       	movw	r26, r30
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	20 81       	ld	r18, Z
    126e:	82 27       	eor	r24, r18
    1270:	28 2f       	mov	r18, r24
    1272:	22 95       	swap	r18
    1274:	28 27       	eor	r18, r24
    1276:	02 2e       	mov	r0, r18
    1278:	26 95       	lsr	r18
    127a:	26 95       	lsr	r18
    127c:	20 25       	eor	r18, r0
    127e:	02 2e       	mov	r0, r18
    1280:	26 95       	lsr	r18
    1282:	20 25       	eor	r18, r0
    1284:	27 70       	andi	r18, 0x07	; 7
    1286:	08 2e       	mov	r0, r24
    1288:	89 2f       	mov	r24, r25
    128a:	26 95       	lsr	r18
    128c:	07 94       	ror	r0
    128e:	27 95       	ror	r18
    1290:	90 2d       	mov	r25, r0
    1292:	82 27       	eor	r24, r18
    1294:	06 94       	lsr	r0
    1296:	27 95       	ror	r18
    1298:	90 25       	eor	r25, r0
    129a:	82 27       	eor	r24, r18
    129c:	ba 01       	movw	r22, r20
    129e:	fd 01       	movw	r30, r26
    12a0:	ab 01       	movw	r20, r22
    12a2:	41 50       	subi	r20, 0x01	; 1
    12a4:	51 09       	sbc	r21, r1
    12a6:	67 2b       	or	r22, r23
    12a8:	f9 f6       	brne	.-66     	; 0x1268 <crc16_ram+0x8>
    12aa:	08 95       	ret

000012ac <crc16_eeprom>:
    12ac:	ef 92       	push	r14
    12ae:	ff 92       	push	r15
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	cf ef       	ldi	r28, 0xFF	; 255
    12ba:	df ef       	ldi	r29, 0xFF	; 255
    12bc:	21 c0       	rjmp	.+66     	; 0x1300 <crc16_eeprom+0x54>
    12be:	7c 01       	movw	r14, r24
    12c0:	2f ef       	ldi	r18, 0xFF	; 255
    12c2:	e2 1a       	sub	r14, r18
    12c4:	f2 0a       	sbc	r15, r18
    12c6:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    12ca:	9e 01       	movw	r18, r28
    12cc:	28 27       	eor	r18, r24
    12ce:	82 2f       	mov	r24, r18
    12d0:	82 95       	swap	r24
    12d2:	82 27       	eor	r24, r18
    12d4:	08 2e       	mov	r0, r24
    12d6:	86 95       	lsr	r24
    12d8:	86 95       	lsr	r24
    12da:	80 25       	eor	r24, r0
    12dc:	08 2e       	mov	r0, r24
    12de:	86 95       	lsr	r24
    12e0:	80 25       	eor	r24, r0
    12e2:	87 70       	andi	r24, 0x07	; 7
    12e4:	02 2e       	mov	r0, r18
    12e6:	23 2f       	mov	r18, r19
    12e8:	86 95       	lsr	r24
    12ea:	07 94       	ror	r0
    12ec:	87 95       	ror	r24
    12ee:	30 2d       	mov	r19, r0
    12f0:	28 27       	eor	r18, r24
    12f2:	06 94       	lsr	r0
    12f4:	87 95       	ror	r24
    12f6:	30 25       	eor	r19, r0
    12f8:	28 27       	eor	r18, r24
    12fa:	e9 01       	movw	r28, r18
    12fc:	b8 01       	movw	r22, r16
    12fe:	c7 01       	movw	r24, r14
    1300:	8b 01       	movw	r16, r22
    1302:	01 50       	subi	r16, 0x01	; 1
    1304:	11 09       	sbc	r17, r1
    1306:	67 2b       	or	r22, r23
    1308:	d1 f6       	brne	.-76     	; 0x12be <crc16_eeprom+0x12>
    130a:	ce 01       	movw	r24, r28
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	08 95       	ret

0000131a <crc16_ram_startVal>:
    131a:	fc 01       	movw	r30, r24
    131c:	ca 01       	movw	r24, r20
    131e:	1c c0       	rjmp	.+56     	; 0x1358 <crc16_ram_startVal+0x3e>
    1320:	df 01       	movw	r26, r30
    1322:	11 96       	adiw	r26, 0x01	; 1
    1324:	20 81       	ld	r18, Z
    1326:	82 27       	eor	r24, r18
    1328:	28 2f       	mov	r18, r24
    132a:	22 95       	swap	r18
    132c:	28 27       	eor	r18, r24
    132e:	02 2e       	mov	r0, r18
    1330:	26 95       	lsr	r18
    1332:	26 95       	lsr	r18
    1334:	20 25       	eor	r18, r0
    1336:	02 2e       	mov	r0, r18
    1338:	26 95       	lsr	r18
    133a:	20 25       	eor	r18, r0
    133c:	27 70       	andi	r18, 0x07	; 7
    133e:	08 2e       	mov	r0, r24
    1340:	89 2f       	mov	r24, r25
    1342:	26 95       	lsr	r18
    1344:	07 94       	ror	r0
    1346:	27 95       	ror	r18
    1348:	90 2d       	mov	r25, r0
    134a:	82 27       	eor	r24, r18
    134c:	06 94       	lsr	r0
    134e:	27 95       	ror	r18
    1350:	90 25       	eor	r25, r0
    1352:	82 27       	eor	r24, r18
    1354:	ba 01       	movw	r22, r20
    1356:	fd 01       	movw	r30, r26
    1358:	ab 01       	movw	r20, r22
    135a:	41 50       	subi	r20, 0x01	; 1
    135c:	51 09       	sbc	r21, r1
    135e:	67 2b       	or	r22, r23
    1360:	f9 f6       	brne	.-66     	; 0x1320 <crc16_ram_startVal+0x6>
    1362:	08 95       	ret

00001364 <crc16_eeprom_startVal>:
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	0f 93       	push	r16
    136a:	1f 93       	push	r17
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	ea 01       	movw	r28, r20
    1372:	21 c0       	rjmp	.+66     	; 0x13b6 <crc16_eeprom_startVal+0x52>
    1374:	7c 01       	movw	r14, r24
    1376:	2f ef       	ldi	r18, 0xFF	; 255
    1378:	e2 1a       	sub	r14, r18
    137a:	f2 0a       	sbc	r15, r18
    137c:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    1380:	ae 01       	movw	r20, r28
    1382:	48 27       	eor	r20, r24
    1384:	84 2f       	mov	r24, r20
    1386:	82 95       	swap	r24
    1388:	84 27       	eor	r24, r20
    138a:	08 2e       	mov	r0, r24
    138c:	86 95       	lsr	r24
    138e:	86 95       	lsr	r24
    1390:	80 25       	eor	r24, r0
    1392:	08 2e       	mov	r0, r24
    1394:	86 95       	lsr	r24
    1396:	80 25       	eor	r24, r0
    1398:	87 70       	andi	r24, 0x07	; 7
    139a:	04 2e       	mov	r0, r20
    139c:	45 2f       	mov	r20, r21
    139e:	86 95       	lsr	r24
    13a0:	07 94       	ror	r0
    13a2:	87 95       	ror	r24
    13a4:	50 2d       	mov	r21, r0
    13a6:	48 27       	eor	r20, r24
    13a8:	06 94       	lsr	r0
    13aa:	87 95       	ror	r24
    13ac:	50 25       	eor	r21, r0
    13ae:	48 27       	eor	r20, r24
    13b0:	ea 01       	movw	r28, r20
    13b2:	b8 01       	movw	r22, r16
    13b4:	c7 01       	movw	r24, r14
    13b6:	8b 01       	movw	r16, r22
    13b8:	01 50       	subi	r16, 0x01	; 1
    13ba:	11 09       	sbc	r17, r1
    13bc:	67 2b       	or	r22, r23
    13be:	d1 f6       	brne	.-76     	; 0x1374 <crc16_eeprom_startVal+0x10>
    13c0:	ce 01       	movw	r24, r28
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	08 95       	ret

000013d0 <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    13d4:	82 e3       	ldi	r24, 0x32	; 50
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    13dc:	ec 01       	movw	r28, r24
    13de:	60 e3       	ldi	r22, 0x30	; 48
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	62 df       	rcall	.-316    	; 0x12ac <crc16_eeprom>
    13e8:	c8 17       	cp	r28, r24
    13ea:	d9 07       	cpc	r29, r25
    13ec:	81 f4       	brne	.+32     	; 0x140e <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    13f6:	8d 34       	cpi	r24, 0x4D	; 77
    13f8:	51 f4       	brne	.+20     	; 0x140e <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    13fa:	40 e3       	ldi	r20, 0x30	; 48
    13fc:	50 e0       	ldi	r21, 0x00	; 0
    13fe:	62 e0       	ldi	r22, 0x02	; 2
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	82 e3       	ldi	r24, 0x32	; 50
    1404:	99 e0       	ldi	r25, 0x09	; 9
    1406:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		return (EE_LOAD_OK);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	06 c0       	rjmp	.+12     	; 0x141a <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    140e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1418:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    1424:	85 e3       	ldi	r24, 0x35	; 53
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    142c:	ec 01       	movw	r28, r24
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	85 e3       	ldi	r24, 0x35	; 53
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	3a df       	rcall	.-396    	; 0x12ac <crc16_eeprom>
    1438:	c8 17       	cp	r28, r24
    143a:	d9 07       	cpc	r29, r25
    143c:	81 f4       	brne	.+32     	; 0x145e <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    143e:	84 e3       	ldi	r24, 0x34	; 52
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    1446:	89 34       	cpi	r24, 0x49	; 73
    1448:	51 f4       	brne	.+20     	; 0x145e <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	51 e0       	ldi	r21, 0x01	; 1
    144e:	65 e3       	ldi	r22, 0x35	; 53
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	86 e2       	ldi	r24, 0x26	; 38
    1454:	98 e0       	ldi	r25, 0x08	; 8
    1456:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		return (EE_LOAD_OK);
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	06 c0       	rjmp	.+12     	; 0x146a <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    145e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1462:	82 60       	ori	r24, 0x02	; 2
    1464:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1468:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    1474:	83 e4       	ldi	r24, 0x43	; 67
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    147c:	ec 01       	movw	r28, r24
    147e:	6b e0       	ldi	r22, 0x0B	; 11
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	88 e3       	ldi	r24, 0x38	; 56
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	12 df       	rcall	.-476    	; 0x12ac <crc16_eeprom>
    1488:	c8 17       	cp	r28, r24
    148a:	d9 07       	cpc	r29, r25
    148c:	c1 f4       	brne	.+48     	; 0x14be <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    148e:	87 e3       	ldi	r24, 0x37	; 55
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    1496:	8f 34       	cpi	r24, 0x4F	; 79
    1498:	91 f4       	brne	.+36     	; 0x14be <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    149a:	48 e0       	ldi	r20, 0x08	; 8
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	68 e3       	ldi	r22, 0x38	; 56
    14a0:	71 e0       	ldi	r23, 0x01	; 1
    14a2:	86 e2       	ldi	r24, 0x26	; 38
    14a4:	99 e0       	ldi	r25, 0x09	; 9
    14a6:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    14aa:	43 e0       	ldi	r20, 0x03	; 3
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	60 e4       	ldi	r22, 0x40	; 64
    14b0:	71 e0       	ldi	r23, 0x01	; 1
    14b2:	8e e2       	ldi	r24, 0x2E	; 46
    14b4:	99 e0       	ldi	r25, 0x09	; 9
    14b6:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		return (EE_LOAD_OK);
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	06 c0       	rjmp	.+12     	; 0x14ca <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    14be:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14c2:	84 60       	ori	r24, 0x04	; 4
    14c4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14ca:	df 91       	pop	r29
    14cc:	cf 91       	pop	r28
    14ce:	08 95       	ret

000014d0 <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    14d4:	88 e4       	ldi	r24, 0x48	; 72
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    14dc:	ec 01       	movw	r28, r24
    14de:	61 e0       	ldi	r22, 0x01	; 1
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	86 e4       	ldi	r24, 0x46	; 70
    14e4:	91 e0       	ldi	r25, 0x01	; 1
    14e6:	e2 de       	rcall	.-572    	; 0x12ac <crc16_eeprom>
    14e8:	c8 17       	cp	r28, r24
    14ea:	d9 07       	cpc	r29, r25
    14ec:	a1 f4       	brne	.+40     	; 0x1516 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    14ee:	85 e4       	ldi	r24, 0x45	; 69
    14f0:	91 e0       	ldi	r25, 0x01	; 1
    14f2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    14f6:	89 36       	cpi	r24, 0x69	; 105
    14f8:	71 f4       	brne	.+28     	; 0x1516 <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    14fa:	86 e4       	ldi	r24, 0x46	; 70
    14fc:	91 e0       	ldi	r25, 0x01	; 1
    14fe:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    1502:	c5 e5       	ldi	r28, 0x55	; 85
    1504:	d3 e0       	ldi	r29, 0x03	; 3
    1506:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    1508:	87 e4       	ldi	r24, 0x47	; 71
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    1510:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	06 c0       	rjmp	.+12     	; 0x1522 <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    1516:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    151a:	88 60       	ori	r24, 0x08	; 8
    151c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1520:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    152c:	87 ef       	ldi	r24, 0xF7	; 247
    152e:	93 e0       	ldi	r25, 0x03	; 3
    1530:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    1534:	ec 01       	movw	r28, r24
    1536:	62 e0       	ldi	r22, 0x02	; 2
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	85 ef       	ldi	r24, 0xF5	; 245
    153c:	93 e0       	ldi	r25, 0x03	; 3
    153e:	b6 de       	rcall	.-660    	; 0x12ac <crc16_eeprom>
    1540:	c8 17       	cp	r28, r24
    1542:	d9 07       	cpc	r29, r25
    1544:	81 f4       	brne	.+32     	; 0x1566 <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    1546:	84 ef       	ldi	r24, 0xF4	; 244
    1548:	93 e0       	ldi	r25, 0x03	; 3
    154a:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    154e:	84 35       	cpi	r24, 0x54	; 84
    1550:	51 f4       	brne	.+20     	; 0x1566 <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    1552:	42 e0       	ldi	r20, 0x02	; 2
    1554:	50 e0       	ldi	r21, 0x00	; 0
    1556:	65 ef       	ldi	r22, 0xF5	; 245
    1558:	73 e0       	ldi	r23, 0x03	; 3
    155a:	84 e2       	ldi	r24, 0x24	; 36
    155c:	98 e0       	ldi	r25, 0x08	; 8
    155e:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		return (EE_LOAD_OK);
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	06 c0       	rjmp	.+12     	; 0x1572 <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1566:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1570:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    157c:	8c e4       	ldi	r24, 0x4C	; 76
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    1584:	ec 01       	movw	r28, r24
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	8b e4       	ldi	r24, 0x4B	; 75
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	8e de       	rcall	.-740    	; 0x12ac <crc16_eeprom>
    1590:	c8 17       	cp	r28, r24
    1592:	d9 07       	cpc	r29, r25
    1594:	71 f4       	brne	.+28     	; 0x15b2 <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    1596:	8a e4       	ldi	r24, 0x4A	; 74
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    159e:	85 35       	cpi	r24, 0x55	; 85
    15a0:	41 f4       	brne	.+16     	; 0x15b2 <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    15a2:	8b e4       	ldi	r24, 0x4B	; 75
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    15aa:	80 93 4e 16 	sts	0x164E, r24	; 0x80164e <serUSB_Active>
		return (EE_LOAD_OK);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    15b2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15b6:	88 60       	ori	r24, 0x08	; 8
    15b8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	08 95       	ret

000015c4 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    15c8:	61 e0       	ldi	r22, 0x01	; 1
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	8f e4       	ldi	r24, 0x4F	; 79
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	6d de       	rcall	.-806    	; 0x12ac <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    15d2:	ac 01       	movw	r20, r24
    15d4:	68 e1       	ldi	r22, 0x18	; 24
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e5       	ldi	r24, 0x50	; 80
    15da:	91 e0       	ldi	r25, 0x01	; 1
    15dc:	c3 de       	rcall	.-634    	; 0x1364 <crc16_eeprom_startVal>
    15de:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    15e0:	88 e6       	ldi	r24, 0x68	; 104
    15e2:	91 e0       	ldi	r25, 0x01	; 1
    15e4:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    15e8:	c8 17       	cp	r28, r24
    15ea:	d9 07       	cpc	r29, r25
    15ec:	b1 f4       	brne	.+44     	; 0x161a <eeprom_ReadReg+0x56>
    15ee:	8e e4       	ldi	r24, 0x4E	; 78
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    15f6:	82 35       	cpi	r24, 0x52	; 82
    15f8:	81 f4       	brne	.+32     	; 0x161a <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    15fa:	8f e4       	ldi	r24, 0x4F	; 79
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    1602:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    1606:	48 e1       	ldi	r20, 0x18	; 24
    1608:	50 e0       	ldi	r21, 0x00	; 0
    160a:	60 e5       	ldi	r22, 0x50	; 80
    160c:	71 e0       	ldi	r23, 0x01	; 1
    160e:	86 ef       	ldi	r24, 0xF6	; 246
    1610:	97 e0       	ldi	r25, 0x07	; 7
    1612:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		return(EE_LOAD_OK);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    161a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    161e:	80 62       	ori	r24, 0x20	; 32
    1620:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1624:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    1630:	8b ee       	ldi	r24, 0xEB	; 235
    1632:	93 e0       	ldi	r25, 0x03	; 3
    1634:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    1638:	ec 01       	movw	r28, r24
    163a:	60 e8       	ldi	r22, 0x80	; 128
    163c:	72 e0       	ldi	r23, 0x02	; 2
    163e:	8b e6       	ldi	r24, 0x6B	; 107
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	34 de       	rcall	.-920    	; 0x12ac <crc16_eeprom>
    1644:	c8 17       	cp	r28, r24
    1646:	d9 07       	cpc	r29, r25
    1648:	81 f4       	brne	.+32     	; 0x166a <eeprom_ReadProg+0x3e>
    164a:	8a e6       	ldi	r24, 0x6A	; 106
    164c:	91 e0       	ldi	r25, 0x01	; 1
    164e:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    1652:	80 35       	cpi	r24, 0x50	; 80
    1654:	51 f4       	brne	.+20     	; 0x166a <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	52 e0       	ldi	r21, 0x02	; 2
    165a:	6b e6       	ldi	r22, 0x6B	; 107
    165c:	71 e0       	ldi	r23, 0x01	; 1
    165e:	82 e6       	ldi	r24, 0x62	; 98
    1660:	99 e0       	ldi	r25, 0x09	; 9
    1662:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		return(EE_LOAD_OK);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    166a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    166e:	80 64       	ori	r24, 0x40	; 64
    1670:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1674:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    1680:	82 ef       	ldi	r24, 0xF2	; 242
    1682:	93 e0       	ldi	r25, 0x03	; 3
    1684:	0e 94 e0 3a 	call	0x75c0	; 0x75c0 <eeprom_read_word>
    1688:	ec 01       	movw	r28, r24
    168a:	64 e0       	ldi	r22, 0x04	; 4
    168c:	70 e0       	ldi	r23, 0x00	; 0
    168e:	8e ee       	ldi	r24, 0xEE	; 238
    1690:	93 e0       	ldi	r25, 0x03	; 3
    1692:	0c de       	rcall	.-1000   	; 0x12ac <crc16_eeprom>
    1694:	c8 17       	cp	r28, r24
    1696:	d9 07       	cpc	r29, r25
    1698:	51 f4       	brne	.+20     	; 0x16ae <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    169a:	44 e0       	ldi	r20, 0x04	; 4
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	6e ee       	ldi	r22, 0xEE	; 238
    16a0:	73 e0       	ldi	r23, 0x03	; 3
    16a2:	83 eb       	ldi	r24, 0xB3	; 179
    16a4:	95 e0       	ldi	r25, 0x05	; 5
    16a6:	0e 94 c8 3a 	call	0x7590	; 0x7590 <eeprom_read_block>
		return(EE_LOAD_OK);
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    16ae:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    16b2:	80 68       	ori	r24, 0x80	; 128
    16b4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    16c0:	60 e0       	ldi	r22, 0x00	; 0
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    16ca:	65 e6       	ldi	r22, 0x65	; 101
    16cc:	89 ef       	ldi	r24, 0xF9	; 249
    16ce:	93 e0       	ldi	r25, 0x03	; 3
    16d0:	0c 94 f4 3a 	jmp	0x75e8	; 0x75e8 <eeprom_update_byte>
    16d4:	08 95       	ret

000016d6 <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    16da:	60 e3       	ldi	r22, 0x30	; 48
    16dc:	70 e0       	ldi	r23, 0x00	; 0
    16de:	82 e3       	ldi	r24, 0x32	; 50
    16e0:	99 e0       	ldi	r25, 0x09	; 9
    16e2:	be dd       	rcall	.-1156   	; 0x1260 <crc16_ram>
    16e4:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    16e6:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    16ea:	6d e4       	ldi	r22, 0x4D	; 77
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    16f4:	40 e3       	ldi	r20, 0x30	; 48
    16f6:	50 e0       	ldi	r21, 0x00	; 0
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	82 e3       	ldi	r24, 0x32	; 50
    16fe:	99 e0       	ldi	r25, 0x09	; 9
    1700:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    1704:	be 01       	movw	r22, r28
    1706:	82 e3       	ldi	r24, 0x32	; 50
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    170e:	d8 df       	rcall	.-80     	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1710:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

0000171a <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	71 e0       	ldi	r23, 0x01	; 1
    1722:	86 e2       	ldi	r24, 0x26	; 38
    1724:	98 e0       	ldi	r25, 0x08	; 8
    1726:	9c dd       	rcall	.-1224   	; 0x1260 <crc16_ram>
    1728:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    172a:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    172e:	69 e4       	ldi	r22, 0x49	; 73
    1730:	84 e3       	ldi	r24, 0x34	; 52
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	51 e0       	ldi	r21, 0x01	; 1
    173c:	65 e3       	ldi	r22, 0x35	; 53
    173e:	70 e0       	ldi	r23, 0x00	; 0
    1740:	86 e2       	ldi	r24, 0x26	; 38
    1742:	98 e0       	ldi	r25, 0x08	; 8
    1744:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1748:	be 01       	movw	r22, r28
    174a:	85 e3       	ldi	r24, 0x35	; 53
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    1752:	b6 df       	rcall	.-148    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1754:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    1762:	68 e0       	ldi	r22, 0x08	; 8
    1764:	70 e0       	ldi	r23, 0x00	; 0
    1766:	86 e2       	ldi	r24, 0x26	; 38
    1768:	99 e0       	ldi	r25, 0x09	; 9
    176a:	7a dd       	rcall	.-1292   	; 0x1260 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    176c:	ac 01       	movw	r20, r24
    176e:	63 e0       	ldi	r22, 0x03	; 3
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	8e e2       	ldi	r24, 0x2E	; 46
    1774:	99 e0       	ldi	r25, 0x09	; 9
    1776:	d1 dd       	rcall	.-1118   	; 0x131a <crc16_ram_startVal>
    1778:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    177a:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    177e:	6f e4       	ldi	r22, 0x4F	; 79
    1780:	87 e3       	ldi	r24, 0x37	; 55
    1782:	91 e0       	ldi	r25, 0x01	; 1
    1784:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1788:	48 e0       	ldi	r20, 0x08	; 8
    178a:	50 e0       	ldi	r21, 0x00	; 0
    178c:	68 e3       	ldi	r22, 0x38	; 56
    178e:	71 e0       	ldi	r23, 0x01	; 1
    1790:	86 e2       	ldi	r24, 0x26	; 38
    1792:	99 e0       	ldi	r25, 0x09	; 9
    1794:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1798:	43 e0       	ldi	r20, 0x03	; 3
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	60 e4       	ldi	r22, 0x40	; 64
    179e:	71 e0       	ldi	r23, 0x01	; 1
    17a0:	8e e2       	ldi	r24, 0x2E	; 46
    17a2:	99 e0       	ldi	r25, 0x09	; 9
    17a4:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    17a8:	be 01       	movw	r22, r28
    17aa:	83 e4       	ldi	r24, 0x43	; 67
    17ac:	91 e0       	ldi	r25, 0x01	; 1
    17ae:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    17b2:	86 df       	rcall	.-244    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    17b4:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    17c6:	61 e0       	ldi	r22, 0x01	; 1
    17c8:	70 e0       	ldi	r23, 0x00	; 0
    17ca:	85 e5       	ldi	r24, 0x55	; 85
    17cc:	93 e0       	ldi	r25, 0x03	; 3
    17ce:	48 dd       	rcall	.-1392   	; 0x1260 <crc16_ram>
    17d0:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    17d2:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    17d6:	69 e6       	ldi	r22, 0x69	; 105
    17d8:	85 e4       	ldi	r24, 0x45	; 69
    17da:	91 e0       	ldi	r25, 0x01	; 1
    17dc:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    17e0:	c5 e5       	ldi	r28, 0x55	; 85
    17e2:	d3 e0       	ldi	r29, 0x03	; 3
    17e4:	68 81       	ld	r22, Y
    17e6:	86 e4       	ldi	r24, 0x46	; 70
    17e8:	91 e0       	ldi	r25, 0x01	; 1
    17ea:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    17ee:	69 81       	ldd	r22, Y+1	; 0x01
    17f0:	87 e4       	ldi	r24, 0x47	; 71
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    17f8:	b8 01       	movw	r22, r16
    17fa:	88 e4       	ldi	r24, 0x48	; 72
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    1802:	5e df       	rcall	.-324    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1804:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	08 95       	ret

00001812 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	8e e4       	ldi	r24, 0x4E	; 78
    181c:	96 e1       	ldi	r25, 0x16	; 22
    181e:	20 dd       	rcall	.-1472   	; 0x1260 <crc16_ram>
    1820:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1822:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1826:	65 e5       	ldi	r22, 0x55	; 85
    1828:	8a e4       	ldi	r24, 0x4A	; 74
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    1830:	60 91 4e 16 	lds	r22, 0x164E	; 0x80164e <serUSB_Active>
    1834:	8b e4       	ldi	r24, 0x4B	; 75
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    183c:	be 01       	movw	r22, r28
    183e:	8c e4       	ldi	r24, 0x4C	; 76
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    1846:	3c df       	rcall	.-392    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1848:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1856:	62 e0       	ldi	r22, 0x02	; 2
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	84 e2       	ldi	r24, 0x24	; 36
    185c:	98 e0       	ldi	r25, 0x08	; 8
    185e:	00 dd       	rcall	.-1536   	; 0x1260 <crc16_ram>
    1860:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1862:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1866:	64 e5       	ldi	r22, 0x54	; 84
    1868:	84 ef       	ldi	r24, 0xF4	; 244
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    1870:	42 e0       	ldi	r20, 0x02	; 2
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	65 ef       	ldi	r22, 0xF5	; 245
    1876:	73 e0       	ldi	r23, 0x03	; 3
    1878:	84 e2       	ldi	r24, 0x24	; 36
    187a:	98 e0       	ldi	r25, 0x08	; 8
    187c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    1880:	be 01       	movw	r22, r28
    1882:	87 ef       	ldi	r24, 0xF7	; 247
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    188a:	1a df       	rcall	.-460    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    188c:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1896:	cf 93       	push	r28
    1898:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    189a:	61 e0       	ldi	r22, 0x01	; 1
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	8e e0       	ldi	r24, 0x0E	; 14
    18a0:	98 e0       	ldi	r25, 0x08	; 8
    18a2:	de dc       	rcall	.-1604   	; 0x1260 <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    18a4:	ac 01       	movw	r20, r24
    18a6:	68 e1       	ldi	r22, 0x18	; 24
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	86 ef       	ldi	r24, 0xF6	; 246
    18ac:	97 e0       	ldi	r25, 0x07	; 7
    18ae:	35 dd       	rcall	.-1430   	; 0x131a <crc16_ram_startVal>
    18b0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    18b2:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    18b6:	62 e5       	ldi	r22, 0x52	; 82
    18b8:	8e e4       	ldi	r24, 0x4E	; 78
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    18c0:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <registerCount>
    18c4:	8f e4       	ldi	r24, 0x4F	; 79
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    18cc:	48 e1       	ldi	r20, 0x18	; 24
    18ce:	50 e0       	ldi	r21, 0x00	; 0
    18d0:	60 e5       	ldi	r22, 0x50	; 80
    18d2:	71 e0       	ldi	r23, 0x01	; 1
    18d4:	86 ef       	ldi	r24, 0xF6	; 246
    18d6:	97 e0       	ldi	r25, 0x07	; 7
    18d8:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    18dc:	be 01       	movw	r22, r28
    18de:	88 e6       	ldi	r24, 0x68	; 104
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    18e6:	ec de       	rcall	.-552    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    18e8:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	08 95       	ret

000018f2 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    18f6:	60 e8       	ldi	r22, 0x80	; 128
    18f8:	72 e0       	ldi	r23, 0x02	; 2
    18fa:	82 e6       	ldi	r24, 0x62	; 98
    18fc:	99 e0       	ldi	r25, 0x09	; 9
    18fe:	b0 dc       	rcall	.-1696   	; 0x1260 <crc16_ram>
    1900:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1902:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1906:	60 e5       	ldi	r22, 0x50	; 80
    1908:	8a e6       	ldi	r24, 0x6A	; 106
    190a:	91 e0       	ldi	r25, 0x01	; 1
    190c:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	52 e0       	ldi	r21, 0x02	; 2
    1914:	6b e6       	ldi	r22, 0x6B	; 107
    1916:	71 e0       	ldi	r23, 0x01	; 1
    1918:	82 e6       	ldi	r24, 0x62	; 98
    191a:	99 e0       	ldi	r25, 0x09	; 9
    191c:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1920:	be 01       	movw	r22, r28
    1922:	8b ee       	ldi	r24, 0xEB	; 235
    1924:	93 e0       	ldi	r25, 0x03	; 3
    1926:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    192a:	ca de       	rcall	.-620    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    192c:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    193a:	64 e0       	ldi	r22, 0x04	; 4
    193c:	70 e0       	ldi	r23, 0x00	; 0
    193e:	83 eb       	ldi	r24, 0xB3	; 179
    1940:	95 e0       	ldi	r25, 0x05	; 5
    1942:	8e dc       	rcall	.-1764   	; 0x1260 <crc16_ram>
    1944:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1946:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    194a:	6b e4       	ldi	r22, 0x4B	; 75
    194c:	8d ee       	ldi	r24, 0xED	; 237
    194e:	93 e0       	ldi	r25, 0x03	; 3
    1950:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1954:	44 e0       	ldi	r20, 0x04	; 4
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	6e ee       	ldi	r22, 0xEE	; 238
    195a:	73 e0       	ldi	r23, 0x03	; 3
    195c:	83 eb       	ldi	r24, 0xB3	; 179
    195e:	95 e0       	ldi	r25, 0x05	; 5
    1960:	0e 94 e5 3a 	call	0x75ca	; 0x75ca <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1964:	be 01       	movw	r22, r28
    1966:	82 ef       	ldi	r24, 0xF2	; 242
    1968:	93 e0       	ldi	r25, 0x03	; 3
    196a:	0e 94 06 3b 	call	0x760c	; 0x760c <eeprom_update_word>
	eepromWriteSignature();
    196e:	a8 de       	rcall	.-688    	; 0x16c0 <eepromWriteSignature>
	lcd_waitSymbolOff();
    1970:	0e 94 00 3a 	call	0x7400	; 0x7400 <lcd_waitSymbolOff>
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    197a:	ad de       	rcall	.-678    	; 0x16d6 <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    197c:	ce de       	rcall	.-612    	; 0x171a <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    197e:	ef de       	rcall	.-546    	; 0x175e <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1980:	1e df       	rcall	.-452    	; 0x17be <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1982:	47 df       	rcall	.-370    	; 0x1812 <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1984:	88 df       	rcall	.-240    	; 0x1896 <eeprom_UpdateReg>
    1986:	b5 df       	rcall	.-150    	; 0x18f2 <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1988:	d6 df       	rcall	.-84     	; 0x1936 <eeprom_UpdateSoftkeys>
    198a:	63 cf       	rjmp	.-314    	; 0x1852 <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    198c:	08 95       	ret

0000198e <eepromCopy>:
    198e:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	eb 01       	movw	r28, r22
	while (count-- > 0){
    19a0:	11 c0       	rjmp	.+34     	; 0x19c4 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    19a2:	7c 01       	movw	r14, r24
    19a4:	2f ef       	ldi	r18, 0xFF	; 255
    19a6:	e2 1a       	sub	r14, r18
    19a8:	f2 0a       	sbc	r15, r18
    19aa:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <eeprom_read_byte>
    19ae:	6e 01       	movw	r12, r28
    19b0:	9f ef       	ldi	r25, 0xFF	; 255
    19b2:	c9 1a       	sub	r12, r25
    19b4:	d9 0a       	sbc	r13, r25
    19b6:	68 2f       	mov	r22, r24
    19b8:	ce 01       	movw	r24, r28
    19ba:	0e 94 f4 3a 	call	0x75e8	; 0x75e8 <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    19be:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    19c0:	e6 01       	movw	r28, r12
    19c2:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    19c4:	8a 01       	movw	r16, r20
    19c6:	01 50       	subi	r16, 0x01	; 1
    19c8:	11 09       	sbc	r17, r1
    19ca:	45 2b       	or	r20, r21
    19cc:	51 f7       	brne	.-44     	; 0x19a2 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	08 95       	ret

000019e0 <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    19e0:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	58 e0       	ldi	r21, 0x08	; 8
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	78 e0       	ldi	r23, 0x08	; 8
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	ce df       	rcall	.-100    	; 0x198e <eepromCopy>
	lcd_waitSymbolOff();
    19f2:	0c 94 00 3a 	jmp	0x7400	; 0x7400 <lcd_waitSymbolOff>
    19f6:	08 95       	ret

000019f8 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    19f8:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	58 e0       	ldi	r21, 0x08	; 8
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	98 e0       	ldi	r25, 0x08	; 8
    1a08:	c2 df       	rcall	.-124    	; 0x198e <eepromCopy>
	lcd_waitSymbolOff();
    1a0a:	0c 94 00 3a 	jmp	0x7400	; 0x7400 <lcd_waitSymbolOff>
    1a0e:	08 95       	ret

00001a10 <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <init_Timers+0x18>
    1a14:	e8 2f       	mov	r30, r24
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	ee 0f       	add	r30, r30
    1a1a:	ff 1f       	adc	r31, r31
    1a1c:	e1 5d       	subi	r30, 0xD1	; 209
    1a1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1a20:	9f ef       	ldi	r25, 0xFF	; 255
    1a22:	90 83       	st	Z, r25
    1a24:	11 82       	std	Z+1, r1	; 0x01
    1a26:	8f 5f       	subi	r24, 0xFF	; 255
    1a28:	89 30       	cpi	r24, 0x09	; 9
    1a2a:	a0 f3       	brcs	.-24     	; 0x1a14 <init_Timers+0x4>
    1a2c:	e1 e4       	ldi	r30, 0x41	; 65
    1a2e:	f2 e0       	ldi	r31, 0x02	; 2
    1a30:	10 82       	st	Z, r1
    1a32:	11 82       	std	Z+1, r1	; 0x01
    1a34:	12 82       	std	Z+2, r1	; 0x02
    1a36:	13 82       	std	Z+3, r1	; 0x03
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1a3e:	08 95       	ret

00001a40 <init_HwTimer>:
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	84 bd       	out	0x24, r24	; 36
    1a44:	93 e0       	ldi	r25, 0x03	; 3
    1a46:	95 bd       	out	0x25, r25	; 37
    1a48:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1a4c:	89 ef       	ldi	r24, 0xF9	; 249
    1a4e:	87 bd       	out	0x27, r24	; 39
    1a50:	85 b1       	in	r24, 0x05	; 5
    1a52:	8f 77       	andi	r24, 0x7F	; 127
    1a54:	85 b9       	out	0x05, r24	; 5
    1a56:	84 b1       	in	r24, 0x04	; 4
    1a58:	80 68       	ori	r24, 0x80	; 128
    1a5a:	84 b9       	out	0x04, r24	; 4
    1a5c:	08 95       	ret

00001a5e <init_ADC>:
    1a5e:	87 e8       	ldi	r24, 0x87	; 135
    1a60:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1a64:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1a68:	8f e7       	ldi	r24, 0x7F	; 127
    1a6a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1a74:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1a78:	e9 e4       	ldi	r30, 0x49	; 73
    1a7a:	f3 e0       	ldi	r31, 0x03	; 3
    1a7c:	10 82       	st	Z, r1
    1a7e:	8f ef       	ldi	r24, 0xFF	; 255
    1a80:	81 83       	std	Z+1, r24	; 0x01
    1a82:	82 83       	std	Z+2, r24	; 0x02
    1a84:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	10 c0       	rjmp	.+32     	; 0x1aac <init_ADC+0x4e>
    1a8c:	85 30       	cpi	r24, 0x05	; 5
    1a8e:	39 f4       	brne	.+14     	; 0x1a9e <init_ADC+0x40>
    1a90:	e8 2f       	mov	r30, r24
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	e1 5b       	subi	r30, 0xB1	; 177
    1a96:	fc 4f       	sbci	r31, 0xFC	; 252
    1a98:	96 e0       	ldi	r25, 0x06	; 6
    1a9a:	90 83       	st	Z, r25
    1a9c:	06 c0       	rjmp	.+12     	; 0x1aaa <init_ADC+0x4c>
    1a9e:	e8 2f       	mov	r30, r24
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	e1 5b       	subi	r30, 0xB1	; 177
    1aa4:	fc 4f       	sbci	r31, 0xFC	; 252
    1aa6:	9a e0       	ldi	r25, 0x0A	; 10
    1aa8:	90 83       	st	Z, r25
    1aaa:	8f 5f       	subi	r24, 0xFF	; 255
    1aac:	86 30       	cpi	r24, 0x06	; 6
    1aae:	70 f3       	brcs	.-36     	; 0x1a8c <init_ADC+0x2e>
    1ab0:	08 95       	ret

00001ab2 <init_Pipe>:
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	88 b9       	out	0x08, r24	; 8
    1ab6:	87 b9       	out	0x07, r24	; 7
    1ab8:	82 b9       	out	0x02, r24	; 2
    1aba:	11 b8       	out	0x01, r1	; 1
    1abc:	84 b3       	in	r24, 0x14	; 20
    1abe:	87 60       	ori	r24, 0x07	; 7
    1ac0:	84 bb       	out	0x14, r24	; 20
    1ac2:	83 b3       	in	r24, 0x13	; 19
    1ac4:	87 60       	ori	r24, 0x07	; 7
    1ac6:	83 bb       	out	0x13, r24	; 19
    1ac8:	8b b1       	in	r24, 0x0b	; 11
    1aca:	8f 77       	andi	r24, 0x7F	; 127
    1acc:	8b b9       	out	0x0b, r24	; 11
    1ace:	8a b1       	in	r24, 0x0a	; 10
    1ad0:	80 68       	ori	r24, 0x80	; 128
    1ad2:	8a b9       	out	0x0a, r24	; 10
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	0e c0       	rjmp	.+28     	; 0x1af4 <init_Pipe+0x42>
    1ad8:	e8 2f       	mov	r30, r24
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	ee 0f       	add	r30, r30
    1ae6:	ff 1f       	adc	r31, r31
    1ae8:	e7 5b       	subi	r30, 0xB7	; 183
    1aea:	fd 4f       	sbci	r31, 0xFD	; 253
    1aec:	9f ef       	ldi	r25, 0xFF	; 255
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	90 83       	st	Z, r25
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	80 32       	cpi	r24, 0x20	; 32
    1af6:	80 f3       	brcs	.-32     	; 0x1ad8 <init_Pipe+0x26>
    1af8:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1afc:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1b00:	08 95       	ret

00001b02 <init_PipeModules>:
    1b02:	e6 dc       	rcall	.-1588   	; 0x14d0 <eeprom_ReadModules>
    1b04:	8f 3f       	cpi	r24, 0xFF	; 255
    1b06:	51 f4       	brne	.+20     	; 0x1b1c <init_PipeModules+0x1a>
    1b08:	40 e0       	ldi	r20, 0x00	; 0
    1b0a:	50 e0       	ldi	r21, 0x00	; 0
    1b0c:	60 e0       	ldi	r22, 0x00	; 0
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	42 d7       	rcall	.+3716   	; 0x2996 <log_putError>
    1b12:	e5 e5       	ldi	r30, 0x55	; 85
    1b14:	f3 e0       	ldi	r31, 0x03	; 3
    1b16:	8f ef       	ldi	r24, 0xFF	; 255
    1b18:	80 83       	st	Z, r24
    1b1a:	81 83       	std	Z+1, r24	; 0x01
    1b1c:	8b b1       	in	r24, 0x0b	; 11
    1b1e:	8f 77       	andi	r24, 0x7F	; 127
    1b20:	8b b9       	out	0x0b, r24	; 11
    1b22:	84 b3       	in	r24, 0x14	; 20
    1b24:	87 60       	ori	r24, 0x07	; 7
    1b26:	84 bb       	out	0x14, r24	; 20
    1b28:	84 b3       	in	r24, 0x14	; 20
    1b2a:	8b 7f       	andi	r24, 0xFB	; 251
    1b2c:	84 bb       	out	0x14, r24	; 20
    1b2e:	85 e0       	ldi	r24, 0x05	; 5
    1b30:	8a 95       	dec	r24
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <init_PipeModules+0x2e>
    1b34:	00 00       	nop
    1b36:	84 b3       	in	r24, 0x14	; 20
    1b38:	84 60       	ori	r24, 0x04	; 4
    1b3a:	84 bb       	out	0x14, r24	; 20
    1b3c:	90 e2       	ldi	r25, 0x20	; 32
    1b3e:	84 b3       	in	r24, 0x14	; 20
    1b40:	81 60       	ori	r24, 0x01	; 1
    1b42:	84 bb       	out	0x14, r24	; 20
    1b44:	90 fd       	sbrc	r25, 0
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <init_PipeModules+0x4a>
    1b48:	85 e5       	ldi	r24, 0x55	; 85
    1b4a:	01 c0       	rjmp	.+2      	; 0x1b4e <init_PipeModules+0x4c>
    1b4c:	8a ea       	ldi	r24, 0xAA	; 170
    1b4e:	88 b9       	out	0x08, r24	; 8
    1b50:	80 b1       	in	r24, 0x00	; 0
    1b52:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1b56:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1b5a:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1b5e:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1b62:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1b66:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1b6a:	84 b3       	in	r24, 0x14	; 20
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	84 bb       	out	0x14, r24	; 20
    1b70:	85 e0       	ldi	r24, 0x05	; 5
    1b72:	8a 95       	dec	r24
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <init_PipeModules+0x70>
    1b76:	00 00       	nop
    1b78:	91 50       	subi	r25, 0x01	; 1
    1b7a:	09 f7       	brne	.-62     	; 0x1b3e <init_PipeModules+0x3c>
    1b7c:	90 e2       	ldi	r25, 0x20	; 32
    1b7e:	0f c0       	rjmp	.+30     	; 0x1b9e <init_PipeModules+0x9c>
    1b80:	84 b3       	in	r24, 0x14	; 20
    1b82:	81 60       	ori	r24, 0x01	; 1
    1b84:	84 bb       	out	0x14, r24	; 20
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	8a 95       	dec	r24
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <init_PipeModules+0x86>
    1b8c:	00 c0       	rjmp	.+0      	; 0x1b8e <init_PipeModules+0x8c>
    1b8e:	84 b3       	in	r24, 0x14	; 20
    1b90:	8e 7f       	andi	r24, 0xFE	; 254
    1b92:	84 bb       	out	0x14, r24	; 20
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	8a 95       	dec	r24
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <init_PipeModules+0x94>
    1b9a:	00 c0       	rjmp	.+0      	; 0x1b9c <init_PipeModules+0x9a>
    1b9c:	91 50       	subi	r25, 0x01	; 1
    1b9e:	91 11       	cpse	r25, r1
    1ba0:	ef cf       	rjmp	.-34     	; 0x1b80 <init_PipeModules+0x7e>
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1ba8:	90 e2       	ldi	r25, 0x20	; 32
    1baa:	84 b3       	in	r24, 0x14	; 20
    1bac:	81 60       	ori	r24, 0x01	; 1
    1bae:	84 bb       	out	0x14, r24	; 20
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	88 b9       	out	0x08, r24	; 8
    1bb4:	20 b1       	in	r18, 0x00	; 0
    1bb6:	90 fd       	sbrc	r25, 0
    1bb8:	02 c0       	rjmp	.+4      	; 0x1bbe <init_PipeModules+0xbc>
    1bba:	8a ea       	ldi	r24, 0xAA	; 170
    1bbc:	01 c0       	rjmp	.+2      	; 0x1bc0 <init_PipeModules+0xbe>
    1bbe:	85 e5       	ldi	r24, 0x55	; 85
    1bc0:	82 27       	eor	r24, r18
    1bc2:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1bc6:	82 23       	and	r24, r18
    1bc8:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1bcc:	84 b3       	in	r24, 0x14	; 20
    1bce:	8e 7f       	andi	r24, 0xFE	; 254
    1bd0:	84 bb       	out	0x14, r24	; 20
    1bd2:	85 e0       	ldi	r24, 0x05	; 5
    1bd4:	8a 95       	dec	r24
    1bd6:	f1 f7       	brne	.-4      	; 0x1bd4 <init_PipeModules+0xd2>
    1bd8:	00 00       	nop
    1bda:	91 50       	subi	r25, 0x01	; 1
    1bdc:	31 f7       	brne	.-52     	; 0x1baa <init_PipeModules+0xa8>
    1bde:	00 00       	nop
    1be0:	00 00       	nop
    1be2:	84 b3       	in	r24, 0x14	; 20
    1be4:	81 60       	ori	r24, 0x01	; 1
    1be6:	84 bb       	out	0x14, r24	; 20
    1be8:	84 b3       	in	r24, 0x14	; 20
    1bea:	87 60       	ori	r24, 0x07	; 7
    1bec:	84 bb       	out	0x14, r24	; 20
    1bee:	84 b3       	in	r24, 0x14	; 20
    1bf0:	8b 7f       	andi	r24, 0xFB	; 251
    1bf2:	84 bb       	out	0x14, r24	; 20
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	8a 95       	dec	r24
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <init_PipeModules+0xf4>
    1bfa:	00 c0       	rjmp	.+0      	; 0x1bfc <init_PipeModules+0xfa>
    1bfc:	84 b3       	in	r24, 0x14	; 20
    1bfe:	84 60       	ori	r24, 0x04	; 4
    1c00:	84 bb       	out	0x14, r24	; 20
    1c02:	90 e2       	ldi	r25, 0x20	; 32
    1c04:	e1 e4       	ldi	r30, 0x41	; 65
    1c06:	f3 e0       	ldi	r31, 0x03	; 3
    1c08:	83 81       	ldd	r24, Z+3	; 0x03
    1c0a:	82 83       	std	Z+2, r24	; 0x02
    1c0c:	84 81       	ldd	r24, Z+4	; 0x04
    1c0e:	83 83       	std	Z+3, r24	; 0x03
    1c10:	84 b3       	in	r24, 0x14	; 20
    1c12:	81 60       	ori	r24, 0x01	; 1
    1c14:	84 bb       	out	0x14, r24	; 20
    1c16:	8f ef       	ldi	r24, 0xFF	; 255
    1c18:	81 83       	std	Z+1, r24	; 0x01
    1c1a:	88 b9       	out	0x08, r24	; 8
    1c1c:	85 81       	ldd	r24, Z+5	; 0x05
    1c1e:	84 83       	std	Z+4, r24	; 0x04
    1c20:	86 81       	ldd	r24, Z+6	; 0x06
    1c22:	85 83       	std	Z+5, r24	; 0x05
    1c24:	80 b1       	in	r24, 0x00	; 0
    1c26:	86 83       	std	Z+6, r24	; 0x06
    1c28:	82 83       	std	Z+2, r24	; 0x02
    1c2a:	83 83       	std	Z+3, r24	; 0x03
    1c2c:	84 83       	std	Z+4, r24	; 0x04
    1c2e:	85 83       	std	Z+5, r24	; 0x05
    1c30:	87 83       	std	Z+7, r24	; 0x07
    1c32:	84 b3       	in	r24, 0x14	; 20
    1c34:	8e 7f       	andi	r24, 0xFE	; 254
    1c36:	84 bb       	out	0x14, r24	; 20
    1c38:	38 97       	sbiw	r30, 0x08	; 8
    1c3a:	91 50       	subi	r25, 0x01	; 1
    1c3c:	29 f7       	brne	.-54     	; 0x1c08 <init_PipeModules+0x106>
    1c3e:	00 00       	nop
    1c40:	00 00       	nop
    1c42:	84 b3       	in	r24, 0x14	; 20
    1c44:	81 60       	ori	r24, 0x01	; 1
    1c46:	84 bb       	out	0x14, r24	; 20
    1c48:	84 b3       	in	r24, 0x14	; 20
    1c4a:	8d 7f       	andi	r24, 0xFD	; 253
    1c4c:	84 bb       	out	0x14, r24	; 20
    1c4e:	18 b8       	out	0x08, r1	; 8
    1c50:	85 e0       	ldi	r24, 0x05	; 5
    1c52:	8a 95       	dec	r24
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <init_PipeModules+0x150>
    1c56:	00 00       	nop
    1c58:	84 b3       	in	r24, 0x14	; 20
    1c5a:	82 60       	ori	r24, 0x02	; 2
    1c5c:	84 bb       	out	0x14, r24	; 20
    1c5e:	08 95       	ret

00001c60 <test_PipeModule>:
    1c60:	88 30       	cpi	r24, 0x08	; 8
    1c62:	08 f0       	brcs	.+2      	; 0x1c66 <test_PipeModule+0x6>
    1c64:	6a c0       	rjmp	.+212    	; 0x1d3a <test_PipeModule+0xda>
    1c66:	31 e0       	ldi	r19, 0x01	; 1
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <test_PipeModule+0xc>
    1c6a:	33 0f       	add	r19, r19
    1c6c:	8a 95       	dec	r24
    1c6e:	ea f7       	brpl	.-6      	; 0x1c6a <test_PipeModule+0xa>
    1c70:	80 e8       	ldi	r24, 0x80	; 128
    1c72:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1c76:	8b b1       	in	r24, 0x0b	; 11
    1c78:	8f 77       	andi	r24, 0x7F	; 127
    1c7a:	8b b9       	out	0x0b, r24	; 11
    1c7c:	84 b3       	in	r24, 0x14	; 20
    1c7e:	87 60       	ori	r24, 0x07	; 7
    1c80:	84 bb       	out	0x14, r24	; 20
    1c82:	40 e0       	ldi	r20, 0x00	; 0
    1c84:	1d c0       	rjmp	.+58     	; 0x1cc0 <test_PipeModule+0x60>
    1c86:	20 fd       	sbrc	r18, 0
    1c88:	03 c0       	rjmp	.+6      	; 0x1c90 <test_PipeModule+0x30>
    1c8a:	83 2f       	mov	r24, r19
    1c8c:	80 95       	com	r24
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <test_PipeModule+0x32>
    1c90:	8f ef       	ldi	r24, 0xFF	; 255
    1c92:	88 b9       	out	0x08, r24	; 8
    1c94:	26 95       	lsr	r18
    1c96:	82 e0       	ldi	r24, 0x02	; 2
    1c98:	8a 95       	dec	r24
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <test_PipeModule+0x38>
    1c9c:	00 c0       	rjmp	.+0      	; 0x1c9e <test_PipeModule+0x3e>
    1c9e:	84 b3       	in	r24, 0x14	; 20
    1ca0:	8e 7f       	andi	r24, 0xFE	; 254
    1ca2:	84 bb       	out	0x14, r24	; 20
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	8a 95       	dec	r24
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <test_PipeModule+0x46>
    1caa:	00 c0       	rjmp	.+0      	; 0x1cac <test_PipeModule+0x4c>
    1cac:	84 b3       	in	r24, 0x14	; 20
    1cae:	81 60       	ori	r24, 0x01	; 1
    1cb0:	84 bb       	out	0x14, r24	; 20
    1cb2:	9f 5f       	subi	r25, 0xFF	; 255
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <test_PipeModule+0x5a>
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	25 ea       	ldi	r18, 0xA5	; 165
    1cba:	98 30       	cpi	r25, 0x08	; 8
    1cbc:	20 f3       	brcs	.-56     	; 0x1c86 <test_PipeModule+0x26>
    1cbe:	4f 5f       	subi	r20, 0xFF	; 255
    1cc0:	44 30       	cpi	r20, 0x04	; 4
    1cc2:	c8 f3       	brcs	.-14     	; 0x1cb6 <test_PipeModule+0x56>
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0f c0       	rjmp	.+30     	; 0x1ce6 <test_PipeModule+0x86>
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	8a 95       	dec	r24
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <test_PipeModule+0x6a>
    1cce:	00 c0       	rjmp	.+0      	; 0x1cd0 <test_PipeModule+0x70>
    1cd0:	84 b3       	in	r24, 0x14	; 20
    1cd2:	8e 7f       	andi	r24, 0xFE	; 254
    1cd4:	84 bb       	out	0x14, r24	; 20
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	8a 95       	dec	r24
    1cda:	f1 f7       	brne	.-4      	; 0x1cd8 <test_PipeModule+0x78>
    1cdc:	00 c0       	rjmp	.+0      	; 0x1cde <test_PipeModule+0x7e>
    1cde:	84 b3       	in	r24, 0x14	; 20
    1ce0:	81 60       	ori	r24, 0x01	; 1
    1ce2:	84 bb       	out	0x14, r24	; 20
    1ce4:	9f 5f       	subi	r25, 0xFF	; 255
    1ce6:	90 32       	cpi	r25, 0x20	; 32
    1ce8:	78 f3       	brcs	.-34     	; 0x1cc8 <test_PipeModule+0x68>
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	ba 01       	movw	r22, r20
    1cf2:	17 c0       	rjmp	.+46     	; 0x1d22 <test_PipeModule+0xc2>
    1cf4:	44 0f       	add	r20, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	66 1f       	adc	r22, r22
    1cfa:	77 1f       	adc	r23, r23
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	8a 95       	dec	r24
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <test_PipeModule+0x9e>
    1d02:	00 c0       	rjmp	.+0      	; 0x1d04 <test_PipeModule+0xa4>
    1d04:	84 b3       	in	r24, 0x14	; 20
    1d06:	8e 7f       	andi	r24, 0xFE	; 254
    1d08:	84 bb       	out	0x14, r24	; 20
    1d0a:	80 b1       	in	r24, 0x00	; 0
    1d0c:	83 23       	and	r24, r19
    1d0e:	09 f0       	breq	.+2      	; 0x1d12 <test_PipeModule+0xb2>
    1d10:	41 60       	ori	r20, 0x01	; 1
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	8a 95       	dec	r24
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <test_PipeModule+0xb4>
    1d18:	00 c0       	rjmp	.+0      	; 0x1d1a <test_PipeModule+0xba>
    1d1a:	84 b3       	in	r24, 0x14	; 20
    1d1c:	81 60       	ori	r24, 0x01	; 1
    1d1e:	84 bb       	out	0x14, r24	; 20
    1d20:	9f 5f       	subi	r25, 0xFF	; 255
    1d22:	90 32       	cpi	r25, 0x20	; 32
    1d24:	38 f3       	brcs	.-50     	; 0x1cf4 <test_PipeModule+0x94>
    1d26:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1d2a:	8b b1       	in	r24, 0x0b	; 11
    1d2c:	80 68       	ori	r24, 0x80	; 128
    1d2e:	8b b9       	out	0x0b, r24	; 11
    1d30:	34 2f       	mov	r19, r20
    1d32:	25 2f       	mov	r18, r21
    1d34:	86 2f       	mov	r24, r22
    1d36:	97 2f       	mov	r25, r23
    1d38:	04 c0       	rjmp	.+8      	; 0x1d42 <test_PipeModule+0xe2>
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	63 2f       	mov	r22, r19
    1d44:	72 2f       	mov	r23, r18
    1d46:	08 95       	ret

00001d48 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d48:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1d4a:	e9 e4       	ldi	r30, 0x49	; 73
    1d4c:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d50:	06 c0       	rjmp	.+12     	; 0x1d5e <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1d52:	2f ef       	ldi	r18, 0xFF	; 255
    1d54:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1d56:	26 81       	ldd	r18, Z+6	; 0x06
    1d58:	82 2b       	or	r24, r18
		pPipe++;
    1d5a:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d5c:	9f 5f       	subi	r25, 0xFF	; 255
    1d5e:	90 32       	cpi	r25, 0x20	; 32
    1d60:	c0 f3       	brcs	.-16     	; 0x1d52 <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    1d62:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    1d66:	89 23       	and	r24, r25
    1d68:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
}
    1d6c:	89 23       	and	r24, r25
    1d6e:	08 95       	ret

00001d70 <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1d70:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d74:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d78:	81 ff       	sbrs	r24, 1
    1d7a:	fc cf       	rjmp	.-8      	; 0x1d74 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1d7c:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d80:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d84:	81 ff       	sbrs	r24, 1
    1d86:	fc cf       	rjmp	.-8      	; 0x1d80 <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1d88:	08 95       	ret

00001d8a <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1d90:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d92:	f8 94       	cli
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <module_StartPowerOn+0x18>
    1d96:	ef e2       	ldi	r30, 0x2F	; 47
    1d98:	f2 e0       	ldi	r31, 0x02	; 2
    1d9a:	88 e2       	ldi	r24, 0x28	; 40
    1d9c:	82 83       	std	Z+2, r24	; 0x02
    1d9e:	13 82       	std	Z+3, r1	; 0x03
    1da0:	80 e0       	ldi	r24, 0x00	; 0
    1da2:	81 11       	cpse	r24, r1
    1da4:	f8 cf       	rjmp	.-16     	; 0x1d96 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1da6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1da8:	08 95       	ret

00001daa <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1daa:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	31 f5       	brne	.+76     	; 0x1dfe <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1db2:	ca df       	rcall	.-108    	; 0x1d48 <module_TestAllInputs>
    1db4:	81 11       	cpse	r24, r1
    1db6:	14 c0       	rjmp	.+40     	; 0x1de0 <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1db8:	85 b1       	in	r24, 0x05	; 5
    1dba:	80 64       	ori	r24, 0x40	; 64
    1dbc:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1dbe:	82 e1       	ldi	r24, 0x12	; 18
    1dc0:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1dc4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1dc6:	f8 94       	cli
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	06 c0       	rjmp	.+12     	; 0x1dd8 <module_PowerControl+0x2e>
    1dcc:	ef e2       	ldi	r30, 0x2F	; 47
    1dce:	f2 e0       	ldi	r31, 0x02	; 2
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	82 83       	std	Z+2, r24	; 0x02
    1dd4:	13 82       	std	Z+3, r1	; 0x03
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	81 11       	cpse	r24, r1
    1dda:	f8 cf       	rjmp	.-16     	; 0x1dcc <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ddc:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1dde:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1de0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1de2:	f8 94       	cli
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	07 c0       	rjmp	.+14     	; 0x1df6 <module_PowerControl+0x4c>
    1de8:	ef e2       	ldi	r30, 0x2F	; 47
    1dea:	f2 e0       	ldi	r31, 0x02	; 2
    1dec:	8c e0       	ldi	r24, 0x0C	; 12
    1dee:	82 83       	std	Z+2, r24	; 0x02
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	83 83       	std	Z+3, r24	; 0x03
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	81 11       	cpse	r24, r1
    1df8:	f7 cf       	rjmp	.-18     	; 0x1de8 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1dfa:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1dfc:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1dfe:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1e00:	b1 f4       	brne	.+44     	; 0x1e2e <module_PowerControl+0x84>
    1e02:	a2 df       	rcall	.-188    	; 0x1d48 <module_TestAllInputs>
		if (testResult == 0){
    1e04:	81 11       	cpse	r24, r1
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1e08:	84 e1       	ldi	r24, 0x14	; 20
    1e0a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1e0e:	0b c0       	rjmp	.+22     	; 0x1e26 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1e10:	48 2f       	mov	r20, r24
    1e12:	50 e0       	ldi	r21, 0x00	; 0
    1e14:	60 e0       	ldi	r22, 0x00	; 0
    1e16:	85 e0       	ldi	r24, 0x05	; 5
    1e18:	be d5       	rcall	.+2940   	; 0x2996 <log_putError>
			POWER_OFF
    1e1a:	85 b1       	in	r24, 0x05	; 5
    1e1c:	8f 7b       	andi	r24, 0xBF	; 191
    1e1e:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1e20:	80 e8       	ldi	r24, 0x80	; 128
    1e22:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1e26:	8f ef       	ldi	r24, 0xFF	; 255
    1e28:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e2c:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1e2e:	8f ef       	ldi	r24, 0xFF	; 255
    1e30:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e34:	08 95       	ret

00001e36 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0d c0       	rjmp	.+26     	; 0x1e54 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1e3a:	94 30       	cpi	r25, 0x04	; 4
    1e3c:	50 f4       	brcc	.+20     	; 0x1e52 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1e3e:	e9 2f       	mov	r30, r25
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	81 11       	cpse	r24, r1
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <softKey_WantLong+0x14>
    1e46:	2a e0       	ldi	r18, 0x0A	; 10
    1e48:	01 c0       	rjmp	.+2      	; 0x1e4c <softKey_WantLong+0x16>
    1e4a:	26 e0       	ldi	r18, 0x06	; 6
    1e4c:	e1 5b       	subi	r30, 0xB1	; 177
    1e4e:	fc 4f       	sbci	r31, 0xFC	; 252
    1e50:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e52:	9f 5f       	subi	r25, 0xFF	; 255
    1e54:	96 30       	cpi	r25, 0x06	; 6
    1e56:	88 f3       	brcs	.-30     	; 0x1e3a <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1e58:	08 95       	ret

00001e5a <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1e5a:	1f 92       	push	r1
    1e5c:	0f 92       	push	r0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	0f 92       	push	r0
    1e62:	11 24       	eor	r1, r1
    1e64:	0b b6       	in	r0, 0x3b	; 59
    1e66:	0f 92       	push	r0
    1e68:	ef 92       	push	r14
    1e6a:	ff 92       	push	r15
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	7f 93       	push	r23
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	af 93       	push	r26
    1e82:	bf 93       	push	r27
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	ef 93       	push	r30
    1e8a:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1e8c:	85 b1       	in	r24, 0x05	; 5
    1e8e:	80 68       	ori	r24, 0x80	; 128
    1e90:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1e92:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1e9c:	83 70       	andi	r24, 0x03	; 3
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <__vector_21+0x4a>
    1ea2:	58 c1       	rjmp	.+688    	; 0x2154 <__vector_21+0x2fa>
    1ea4:	38 f0       	brcs	.+14     	; 0x1eb4 <__vector_21+0x5a>
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <__vector_21+0x52>
    1eaa:	a5 c1       	rjmp	.+842    	; 0x21f6 <__vector_21+0x39c>
    1eac:	83 30       	cpi	r24, 0x03	; 3
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <__vector_21+0x58>
    1eb0:	ca c1       	rjmp	.+916    	; 0x2246 <__stack+0x47>
    1eb2:	05 c2       	rjmp	.+1034   	; 0x22be <__stack+0xbf>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1eb4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1eb8:	81 11       	cpse	r24, r1
    1eba:	1a c1       	rjmp	.+564    	; 0x20f0 <__vector_21+0x296>
    1ebc:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1ec0:	96 fd       	sbrc	r25, 6
    1ec2:	16 c1       	rjmp	.+556    	; 0x20f0 <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1ec4:	28 2f       	mov	r18, r24
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	f9 01       	movw	r30, r18
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	e2 0f       	add	r30, r18
    1ed0:	f3 1f       	adc	r31, r19
    1ed2:	ee 0f       	add	r30, r30
    1ed4:	ff 1f       	adc	r31, r31
    1ed6:	e7 5b       	subi	r30, 0xB7	; 183
    1ed8:	fc 4f       	sbci	r31, 0xFC	; 252
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1edc:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1ee0:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1ee2:	49 17       	cp	r20, r25
    1ee4:	10 f4       	brcc	.+4      	; 0x1eea <__vector_21+0x90>
		return data1-data2;
    1ee6:	94 1b       	sub	r25, r20
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <__vector_21+0x96>
	} else {
		return data2-data1;
    1eea:	54 2f       	mov	r21, r20
    1eec:	59 1b       	sub	r21, r25
    1eee:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1ef0:	94 30       	cpi	r25, 0x04	; 4
    1ef2:	08 f0       	brcs	.+2      	; 0x1ef6 <__vector_21+0x9c>
    1ef4:	fd c0       	rjmp	.+506    	; 0x20f0 <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	0e c0       	rjmp	.+28     	; 0x1f16 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1efa:	42 32       	cpi	r20, 0x22	; 34
    1efc:	70 f0       	brcs	.+28     	; 0x1f1a <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1efe:	4f 33       	cpi	r20, 0x3F	; 63
    1f00:	70 f0       	brcs	.+28     	; 0x1f1e <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1f02:	48 36       	cpi	r20, 0x68	; 104
    1f04:	70 f0       	brcs	.+28     	; 0x1f22 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1f06:	46 39       	cpi	r20, 0x96	; 150
    1f08:	70 f0       	brcs	.+28     	; 0x1f26 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1f0a:	4f 3b       	cpi	r20, 0xBF	; 191
    1f0c:	70 f0       	brcs	.+28     	; 0x1f2a <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1f0e:	48 3e       	cpi	r20, 0xE8	; 232
    1f10:	70 f4       	brcc	.+28     	; 0x1f2e <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1f12:	c6 e0       	ldi	r28, 0x06	; 6
    1f14:	0d c0       	rjmp	.+26     	; 0x1f30 <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1f16:	cf ef       	ldi	r28, 0xFF	; 255
    1f18:	0b c0       	rjmp	.+22     	; 0x1f30 <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1f1a:	c4 e0       	ldi	r28, 0x04	; 4
    1f1c:	09 c0       	rjmp	.+18     	; 0x1f30 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1f1e:	c3 e0       	ldi	r28, 0x03	; 3
    1f20:	07 c0       	rjmp	.+14     	; 0x1f30 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1f22:	c5 e0       	ldi	r28, 0x05	; 5
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1f26:	c1 e0       	ldi	r28, 0x01	; 1
    1f28:	03 c0       	rjmp	.+6      	; 0x1f30 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1f2a:	c2 e0       	ldi	r28, 0x02	; 2
    1f2c:	01 c0       	rjmp	.+2      	; 0x1f30 <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1f2e:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1f30:	f9 01       	movw	r30, r18
    1f32:	ee 0f       	add	r30, r30
    1f34:	ff 1f       	adc	r31, r31
    1f36:	e2 0f       	add	r30, r18
    1f38:	f3 1f       	adc	r31, r19
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	e7 5b       	subi	r30, 0xB7	; 183
    1f40:	fc 4f       	sbci	r31, 0xFC	; 252
    1f42:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1f44:	dc 17       	cp	r29, r28
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <__vector_21+0xf0>
    1f48:	48 c0       	rjmp	.+144    	; 0x1fda <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1f4a:	df 3f       	cpi	r29, 0xFF	; 255
    1f4c:	19 f0       	breq	.+6      	; 0x1f54 <__vector_21+0xfa>
    1f4e:	cf 3f       	cpi	r28, 0xFF	; 255
    1f50:	09 f0       	breq	.+2      	; 0x1f54 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1f52:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1f54:	f9 01       	movw	r30, r18
    1f56:	ee 0f       	add	r30, r30
    1f58:	ff 1f       	adc	r31, r31
    1f5a:	e2 0f       	add	r30, r18
    1f5c:	f3 1f       	adc	r31, r19
    1f5e:	ee 0f       	add	r30, r30
    1f60:	ff 1f       	adc	r31, r31
    1f62:	e7 5b       	subi	r30, 0xB7	; 183
    1f64:	fc 4f       	sbci	r31, 0xFC	; 252
    1f66:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1f68:	df 3f       	cpi	r29, 0xFF	; 255
    1f6a:	f9 f4       	brne	.+62     	; 0x1faa <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	ee 0f       	add	r30, r30
    1f7a:	ff 1f       	adc	r31, r31
    1f7c:	e7 5b       	subi	r30, 0xB7	; 183
    1f7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1f80:	15 82       	std	Z+5, r1	; 0x05
    1f82:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1f84:	fc 01       	movw	r30, r24
    1f86:	e2 0f       	add	r30, r18
    1f88:	f3 1f       	adc	r31, r19
    1f8a:	ee 0f       	add	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	e7 5b       	subi	r30, 0xB7	; 183
    1f90:	fc 4f       	sbci	r31, 0xFC	; 252
    1f92:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1f94:	ec 2f       	mov	r30, r28
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	e2 5b       	subi	r30, 0xB2	; 178
    1f9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f9c:	80 81       	ld	r24, Z
    1f9e:	80 ff       	sbrs	r24, 0
    1fa0:	a7 c0       	rjmp	.+334    	; 0x20f0 <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    1fa2:	8c 2f       	mov	r24, r28
    1fa4:	0e 94 a9 2b 	call	0x5752	; 0x5752 <message_push>
    1fa8:	a3 c0       	rjmp	.+326    	; 0x20f0 <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    1faa:	ed 2f       	mov	r30, r29
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	e2 5b       	subi	r30, 0xB2	; 178
    1fb0:	fc 4f       	sbci	r31, 0xFC	; 252
    1fb2:	80 81       	ld	r24, Z
    1fb4:	81 ff       	sbrs	r24, 1
    1fb6:	9c c0       	rjmp	.+312    	; 0x20f0 <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    1fb8:	f9 01       	movw	r30, r18
    1fba:	ee 0f       	add	r30, r30
    1fbc:	ff 1f       	adc	r31, r31
    1fbe:	e2 0f       	add	r30, r18
    1fc0:	f3 1f       	adc	r31, r19
    1fc2:	ee 0f       	add	r30, r30
    1fc4:	ff 1f       	adc	r31, r31
    1fc6:	e7 5b       	subi	r30, 0xB7	; 183
    1fc8:	fc 4f       	sbci	r31, 0xFC	; 252
    1fca:	83 81       	ldd	r24, Z+3	; 0x03
    1fcc:	83 70       	andi	r24, 0x03	; 3
    1fce:	09 f0       	breq	.+2      	; 0x1fd2 <__vector_21+0x178>
    1fd0:	8f c0       	rjmp	.+286    	; 0x20f0 <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    1fd2:	8d 2f       	mov	r24, r29
    1fd4:	0e 94 a9 2b 	call	0x5752	; 0x5752 <message_push>
    1fd8:	8b c0       	rjmp	.+278    	; 0x20f0 <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    1fda:	cf 3f       	cpi	r28, 0xFF	; 255
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <__vector_21+0x186>
    1fde:	88 c0       	rjmp	.+272    	; 0x20f0 <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	ee 0f       	add	r30, r30
    1fe4:	ff 1f       	adc	r31, r31
    1fe6:	df 01       	movw	r26, r30
    1fe8:	a2 0f       	add	r26, r18
    1fea:	b3 1f       	adc	r27, r19
    1fec:	aa 0f       	add	r26, r26
    1fee:	bb 1f       	adc	r27, r27
    1ff0:	a7 5b       	subi	r26, 0xB7	; 183
    1ff2:	bc 4f       	sbci	r27, 0xFC	; 252
    1ff4:	14 96       	adiw	r26, 0x04	; 4
    1ff6:	8d 91       	ld	r24, X+
    1ff8:	9c 91       	ld	r25, X
    1ffa:	15 97       	sbiw	r26, 0x05	; 5
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	15 96       	adiw	r26, 0x05	; 5
    2000:	9c 93       	st	X, r25
    2002:	8e 93       	st	-X, r24
    2004:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    2006:	fd 01       	movw	r30, r26
    2008:	84 81       	ldd	r24, Z+4	; 0x04
    200a:	95 81       	ldd	r25, Z+5	; 0x05
    200c:	8b 34       	cpi	r24, 0x4B	; 75
    200e:	91 05       	cpc	r25, r1
    2010:	a9 f4       	brne	.+42     	; 0x203c <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    2012:	ed 2f       	mov	r30, r29
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	e2 5b       	subi	r30, 0xB2	; 178
    2018:	fc 4f       	sbci	r31, 0xFC	; 252
    201a:	80 81       	ld	r24, Z
    201c:	82 ff       	sbrs	r24, 2
    201e:	0e c0       	rjmp	.+28     	; 0x203c <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    2020:	8c 2f       	mov	r24, r28
    2022:	80 68       	ori	r24, 0x80	; 128
    2024:	0e 94 a9 2b 	call	0x5752	; 0x5752 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    2028:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    202c:	86 e0       	ldi	r24, 0x06	; 6
    202e:	e8 9f       	mul	r30, r24
    2030:	f0 01       	movw	r30, r0
    2032:	11 24       	eor	r1, r1
    2034:	e7 5b       	subi	r30, 0xB7	; 183
    2036:	fc 4f       	sbci	r31, 0xFC	; 252
    2038:	82 e0       	ldi	r24, 0x02	; 2
    203a:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    203c:	ed 2f       	mov	r30, r29
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	e2 5b       	subi	r30, 0xB2	; 178
    2042:	fc 4f       	sbci	r31, 0xFC	; 252
    2044:	80 81       	ld	r24, Z
    2046:	83 ff       	sbrs	r24, 3
    2048:	53 c0       	rjmp	.+166    	; 0x20f0 <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    204a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	fc 01       	movw	r30, r24
    2052:	ee 0f       	add	r30, r30
    2054:	ff 1f       	adc	r31, r31
    2056:	e8 0f       	add	r30, r24
    2058:	f9 1f       	adc	r31, r25
    205a:	ee 0f       	add	r30, r30
    205c:	ff 1f       	adc	r31, r31
    205e:	e7 5b       	subi	r30, 0xB7	; 183
    2060:	fc 4f       	sbci	r31, 0xFC	; 252
    2062:	23 81       	ldd	r18, Z+3	; 0x03
    2064:	21 11       	cpse	r18, r1
    2066:	1e c0       	rjmp	.+60     	; 0x20a4 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2068:	fc 01       	movw	r30, r24
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	e8 0f       	add	r30, r24
    2070:	f9 1f       	adc	r31, r25
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	e7 5b       	subi	r30, 0xB7	; 183
    2078:	fc 4f       	sbci	r31, 0xFC	; 252
    207a:	24 81       	ldd	r18, Z+4	; 0x04
    207c:	35 81       	ldd	r19, Z+5	; 0x05
    207e:	22 33       	cpi	r18, 0x32	; 50
    2080:	31 05       	cpc	r19, r1
    2082:	b1 f5       	brne	.+108    	; 0x20f0 <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2084:	26 e0       	ldi	r18, 0x06	; 6
    2086:	28 9f       	mul	r18, r24
    2088:	f0 01       	movw	r30, r0
    208a:	29 9f       	mul	r18, r25
    208c:	f0 0d       	add	r31, r0
    208e:	11 24       	eor	r1, r1
    2090:	e7 5b       	subi	r30, 0xB7	; 183
    2092:	fc 4f       	sbci	r31, 0xFC	; 252
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2098:	15 82       	std	Z+5, r1	; 0x05
    209a:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    209c:	8c 2f       	mov	r24, r28
    209e:	0e 94 a9 2b 	call	0x5752	; 0x5752 <message_push>
    20a2:	26 c0       	rjmp	.+76     	; 0x20f0 <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    20a4:	fc 01       	movw	r30, r24
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e8 0f       	add	r30, r24
    20ac:	f9 1f       	adc	r31, r25
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	e7 5b       	subi	r30, 0xB7	; 183
    20b4:	fc 4f       	sbci	r31, 0xFC	; 252
    20b6:	23 81       	ldd	r18, Z+3	; 0x03
    20b8:	21 30       	cpi	r18, 0x01	; 1
    20ba:	d1 f4       	brne	.+52     	; 0x20f0 <__vector_21+0x296>
    20bc:	26 e0       	ldi	r18, 0x06	; 6
    20be:	28 9f       	mul	r18, r24
    20c0:	f0 01       	movw	r30, r0
    20c2:	29 9f       	mul	r18, r25
    20c4:	f0 0d       	add	r31, r0
    20c6:	11 24       	eor	r1, r1
    20c8:	e7 5b       	subi	r30, 0xB7	; 183
    20ca:	fc 4f       	sbci	r31, 0xFC	; 252
    20cc:	24 81       	ldd	r18, Z+4	; 0x04
    20ce:	35 81       	ldd	r19, Z+5	; 0x05
    20d0:	2c 30       	cpi	r18, 0x0C	; 12
    20d2:	31 05       	cpc	r19, r1
    20d4:	69 f4       	brne	.+26     	; 0x20f0 <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    20d6:	26 e0       	ldi	r18, 0x06	; 6
    20d8:	28 9f       	mul	r18, r24
    20da:	f0 01       	movw	r30, r0
    20dc:	29 9f       	mul	r18, r25
    20de:	f0 0d       	add	r31, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	e7 5b       	subi	r30, 0xB7	; 183
    20e4:	fc 4f       	sbci	r31, 0xFC	; 252
    20e6:	15 82       	std	Z+5, r1	; 0x05
    20e8:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    20ea:	8c 2f       	mov	r24, r28
    20ec:	0e 94 a9 2b 	call	0x5752	; 0x5752 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    20f0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    20fa:	84 30       	cpi	r24, 0x04	; 4
    20fc:	10 f0       	brcs	.+4      	; 0x2102 <__vector_21+0x2a8>
		adcNr = 0;
    20fe:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    2102:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2106:	81 11       	cpse	r24, r1
    2108:	0c c0       	rjmp	.+24     	; 0x2122 <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	fc 01       	movw	r30, r24
    210e:	ee 0f       	add	r30, r30
    2110:	ff 1f       	adc	r31, r31
    2112:	e8 0f       	add	r30, r24
    2114:	f9 1f       	adc	r31, r25
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	e7 5b       	subi	r30, 0xB7	; 183
    211c:	fc 4f       	sbci	r31, 0xFC	; 252
    211e:	80 81       	ld	r24, Z
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    2122:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    2124:	98 2f       	mov	r25, r24
    2126:	9f 71       	andi	r25, 0x1F	; 31
    2128:	90 66       	ori	r25, 0x60	; 96
    212a:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    212e:	eb e7       	ldi	r30, 0x7B	; 123
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	20 81       	ld	r18, Z
    2134:	80 72       	andi	r24, 0x20	; 32
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	95 95       	asr	r25
    213a:	87 95       	ror	r24
    213c:	95 95       	asr	r25
    213e:	87 95       	ror	r24
    2140:	92 2f       	mov	r25, r18
    2142:	9f 7d       	andi	r25, 0xDF	; 223
    2144:	89 2b       	or	r24, r25
    2146:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    2148:	ea e7       	ldi	r30, 0x7A	; 122
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	80 64       	ori	r24, 0x40	; 64
    2150:	80 83       	st	Z, r24
    2152:	b5 c0       	rjmp	.+362    	; 0x22be <__stack+0xbf>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    2154:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2158:	80 38       	cpi	r24, 0x80	; 128
    215a:	09 f4       	brne	.+2      	; 0x215e <__vector_21+0x304>
    215c:	b0 c0       	rjmp	.+352    	; 0x22be <__stack+0xbf>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    215e:	84 b3       	in	r24, 0x14	; 20
    2160:	87 60       	ori	r24, 0x07	; 7
    2162:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2164:	84 b3       	in	r24, 0x14	; 20
    2166:	8b 7f       	andi	r24, 0xFB	; 251
    2168:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    216a:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    216e:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2170:	e2 e0       	ldi	r30, 0x02	; 2
    2172:	ea 95       	dec	r30
    2174:	f1 f7       	brne	.-4      	; 0x2172 <__vector_21+0x318>
    2176:	00 c0       	rjmp	.+0      	; 0x2178 <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2178:	84 b3       	in	r24, 0x14	; 20
    217a:	84 60       	ori	r24, 0x04	; 4
    217c:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    217e:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    2180:	e1 e4       	ldi	r30, 0x41	; 65
    2182:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2184:	83 81       	ldd	r24, Z+3	; 0x03
    2186:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2188:	84 81       	ldd	r24, Z+4	; 0x04
    218a:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    218c:	84 b3       	in	r24, 0x14	; 20
    218e:	81 60       	ori	r24, 0x01	; 1
    2190:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    2192:	81 81       	ldd	r24, Z+1	; 0x01
    2194:	82 2b       	or	r24, r18
    2196:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2198:	85 81       	ldd	r24, Z+5	; 0x05
    219a:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    219c:	86 81       	ldd	r24, Z+6	; 0x06
    219e:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    21a0:	80 b1       	in	r24, 0x00	; 0
    21a2:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    21a4:	84 b3       	in	r24, 0x14	; 20
    21a6:	8e 7f       	andi	r24, 0xFE	; 254
    21a8:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    21aa:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    21ac:	91 50       	subi	r25, 0x01	; 1
    21ae:	51 f7       	brne	.-44     	; 0x2184 <__vector_21+0x32a>
	asm("nop");
    21b0:	00 00       	nop
	asm("nop");
    21b2:	00 00       	nop
	PIPE_CLOCK_H
    21b4:	84 b3       	in	r24, 0x14	; 20
    21b6:	81 60       	ori	r24, 0x01	; 1
    21b8:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    21ba:	84 b3       	in	r24, 0x14	; 20
    21bc:	8d 7f       	andi	r24, 0xFD	; 253
    21be:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    21c0:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    21c4:	82 60       	ori	r24, 0x02	; 2
    21c6:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    21ca:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    21cc:	8b b1       	in	r24, 0x0b	; 11
    21ce:	80 68       	ori	r24, 0x80	; 128
    21d0:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    21d2:	84 b3       	in	r24, 0x14	; 20
    21d4:	82 60       	ori	r24, 0x02	; 2
    21d6:	84 bb       	out	0x14, r24	; 20
    21d8:	72 c0       	rjmp	.+228    	; 0x22be <__stack+0xbf>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    21da:	80 81       	ld	r24, Z
    21dc:	81 50       	subi	r24, 0x01	; 1
    21de:	8e 3f       	cpi	r24, 0xFE	; 254
    21e0:	38 f4       	brcc	.+14     	; 0x21f0 <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    21e2:	21 81       	ldd	r18, Z+1	; 0x01
    21e4:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    21e6:	25 30       	cpi	r18, 0x05	; 5
    21e8:	10 f0       	brcs	.+4      	; 0x21ee <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    21ea:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    21ec:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    21ee:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    21f0:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21f2:	9f 5f       	subi	r25, 0xFF	; 255
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <__vector_21+0x3a2>
    21f6:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    21f8:	ef e2       	ldi	r30, 0x2F	; 47
    21fa:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21fc:	99 30       	cpi	r25, 0x09	; 9
    21fe:	68 f3       	brcs	.-38     	; 0x21da <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    2200:	e1 e4       	ldi	r30, 0x41	; 65
    2202:	f2 e0       	ldi	r31, 0x02	; 2
    2204:	80 81       	ld	r24, Z
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	80 83       	st	Z, r24
    220a:	8a 3f       	cpi	r24, 0xFA	; 250
    220c:	09 f0       	breq	.+2      	; 0x2210 <__stack+0x11>
    220e:	57 c0       	rjmp	.+174    	; 0x22be <__stack+0xbf>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    2210:	8f ef       	ldi	r24, 0xFF	; 255
    2212:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    2216:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    2218:	81 81       	ldd	r24, Z+1	; 0x01
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	81 83       	std	Z+1, r24	; 0x01
    221e:	8c 33       	cpi	r24, 0x3C	; 60
    2220:	08 f4       	brcc	.+2      	; 0x2224 <__stack+0x25>
    2222:	4d c0       	rjmp	.+154    	; 0x22be <__stack+0xbf>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    2224:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	8f 5f       	subi	r24, 0xFF	; 255
    222a:	82 83       	std	Z+2, r24	; 0x02
    222c:	8c 33       	cpi	r24, 0x3C	; 60
    222e:	08 f4       	brcc	.+2      	; 0x2232 <__stack+0x33>
    2230:	46 c0       	rjmp	.+140    	; 0x22be <__stack+0xbf>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    2232:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    2234:	83 81       	ldd	r24, Z+3	; 0x03
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	83 83       	std	Z+3, r24	; 0x03
    223a:	84 36       	cpi	r24, 0x64	; 100
    223c:	08 f4       	brcc	.+2      	; 0x2240 <__stack+0x41>
    223e:	3f c0       	rjmp	.+126    	; 0x22be <__stack+0xbf>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    2240:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    2244:	3c c0       	rjmp	.+120    	; 0x22be <__stack+0xbf>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    2246:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    224a:	80 38       	cpi	r24, 0x80	; 128
    224c:	c1 f1       	breq	.+112    	; 0x22be <__stack+0xbf>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    224e:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
    2252:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    2256:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2258:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    225a:	09 e4       	ldi	r16, 0x49	; 73
    225c:	12 e0       	ldi	r17, 0x02	; 2
    225e:	2c c0       	rjmp	.+88     	; 0x22b8 <__stack+0xb9>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    2260:	f8 01       	movw	r30, r16
    2262:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2264:	83 81       	ldd	r24, Z+3	; 0x03
    2266:	9c 2f       	mov	r25, r28
    2268:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    226a:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    226c:	84 81       	ldd	r24, Z+4	; 0x04
    226e:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2270:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    2272:	25 81       	ldd	r18, Z+5	; 0x05
    2274:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2276:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2278:	86 81       	ldd	r24, Z+6	; 0x06
    227a:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    227c:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    227e:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    2280:	cd 23       	and	r28, r29
    2282:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2284:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2286:	8d 2f       	mov	r24, r29
    2288:	80 95       	com	r24
    228a:	8c 23       	and	r24, r28
    228c:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    228e:	21 f0       	breq	.+8      	; 0x2298 <__stack+0x99>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    2290:	9f 2d       	mov	r25, r15
    2292:	90 62       	ori	r25, 0x20	; 32
    2294:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2298:	c0 95       	com	r28
    229a:	cd 23       	and	r28, r29
    229c:	8c 2f       	mov	r24, r28
    229e:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    22a0:	19 f0       	breq	.+6      	; 0x22a8 <__stack+0xa9>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    22a2:	9f 2d       	mov	r25, r15
    22a4:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <pipeMsgPush>
		}
		curPipe++;
    22a8:	08 5f       	subi	r16, 0xF8	; 248
    22aa:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    22ac:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    22b0:	81 60       	ori	r24, 0x01	; 1
    22b2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    22b6:	f3 94       	inc	r15
    22b8:	ff e1       	ldi	r31, 0x1F	; 31
    22ba:	ff 15       	cp	r31, r15
    22bc:	88 f6       	brcc	.-94     	; 0x2260 <__stack+0x61>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    22be:	85 b1       	in	r24, 0x05	; 5
    22c0:	8f 77       	andi	r24, 0x7F	; 127
    22c2:	85 b9       	out	0x05, r24	; 5

}
    22c4:	ff 91       	pop	r31
    22c6:	ef 91       	pop	r30
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	bf 91       	pop	r27
    22ce:	af 91       	pop	r26
    22d0:	9f 91       	pop	r25
    22d2:	8f 91       	pop	r24
    22d4:	7f 91       	pop	r23
    22d6:	6f 91       	pop	r22
    22d8:	5f 91       	pop	r21
    22da:	4f 91       	pop	r20
    22dc:	3f 91       	pop	r19
    22de:	2f 91       	pop	r18
    22e0:	1f 91       	pop	r17
    22e2:	0f 91       	pop	r16
    22e4:	ff 90       	pop	r15
    22e6:	ef 90       	pop	r14
    22e8:	0f 90       	pop	r0
    22ea:	0b be       	out	0x3b, r0	; 59
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	0f 90       	pop	r0
    22f2:	1f 90       	pop	r1
    22f4:	18 95       	reti

000022f6 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    22f6:	e8 2f       	mov	r30, r24
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	e7 5b       	subi	r30, 0xB7	; 183
    2308:	fd 4f       	sbci	r31, 0xFD	; 253
    230a:	60 95       	com	r22
    230c:	81 81       	ldd	r24, Z+1	; 0x01
    230e:	68 23       	and	r22, r24
    2310:	61 83       	std	Z+1, r22	; 0x01
    2312:	08 95       	ret

00002314 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    2314:	e8 2f       	mov	r30, r24
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	e7 5b       	subi	r30, 0xB7	; 183
    2326:	fd 4f       	sbci	r31, 0xFD	; 253
    2328:	81 81       	ldd	r24, Z+1	; 0x01
    232a:	68 2b       	or	r22, r24
    232c:	61 83       	std	Z+1, r22	; 0x01
    232e:	08 95       	ret

00002330 <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    2334:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    2336:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    2338:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    233a:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    233c:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    233e:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    2340:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    2344:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    2348:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    234c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    2350:	8a b1       	in	r24, 0x0a	; 10
    2352:	80 68       	ori	r24, 0x80	; 128
    2354:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2356:	8b b1       	in	r24, 0x0b	; 11
    2358:	8f 77       	andi	r24, 0x7F	; 127
    235a:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    235c:	84 b1       	in	r24, 0x04	; 4
    235e:	80 64       	ori	r24, 0x40	; 64
    2360:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    2362:	85 b1       	in	r24, 0x05	; 5
    2364:	8f 7b       	andi	r24, 0xBF	; 191
    2366:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2368:	84 b1       	in	r24, 0x04	; 4
    236a:	80 63       	ori	r24, 0x30	; 48
    236c:	84 b9       	out	0x04, r24	; 4
    236e:	08 95       	ret

00002370 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2370:	88 23       	and	r24, r24
    2372:	34 f4       	brge	.+12     	; 0x2380 <lcd_write_nibble+0x10>
    2374:	e2 e0       	ldi	r30, 0x02	; 2
    2376:	f1 e0       	ldi	r31, 0x01	; 1
    2378:	90 81       	ld	r25, Z
    237a:	90 61       	ori	r25, 0x10	; 16
    237c:	90 83       	st	Z, r25
    237e:	05 c0       	rjmp	.+10     	; 0x238a <lcd_write_nibble+0x1a>
    2380:	e2 e0       	ldi	r30, 0x02	; 2
    2382:	f1 e0       	ldi	r31, 0x01	; 1
    2384:	90 81       	ld	r25, Z
    2386:	9f 7e       	andi	r25, 0xEF	; 239
    2388:	90 83       	st	Z, r25
    238a:	86 ff       	sbrs	r24, 6
    238c:	06 c0       	rjmp	.+12     	; 0x239a <lcd_write_nibble+0x2a>
    238e:	e2 e0       	ldi	r30, 0x02	; 2
    2390:	f1 e0       	ldi	r31, 0x01	; 1
    2392:	90 81       	ld	r25, Z
    2394:	98 60       	ori	r25, 0x08	; 8
    2396:	90 83       	st	Z, r25
    2398:	05 c0       	rjmp	.+10     	; 0x23a4 <lcd_write_nibble+0x34>
    239a:	e2 e0       	ldi	r30, 0x02	; 2
    239c:	f1 e0       	ldi	r31, 0x01	; 1
    239e:	90 81       	ld	r25, Z
    23a0:	97 7f       	andi	r25, 0xF7	; 247
    23a2:	90 83       	st	Z, r25
    23a4:	85 ff       	sbrs	r24, 5
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <lcd_write_nibble+0x40>
    23a8:	9e b1       	in	r25, 0x0e	; 14
    23aa:	98 60       	ori	r25, 0x08	; 8
    23ac:	9e b9       	out	0x0e, r25	; 14
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <lcd_write_nibble+0x46>
    23b0:	9e b1       	in	r25, 0x0e	; 14
    23b2:	97 7f       	andi	r25, 0xF7	; 247
    23b4:	9e b9       	out	0x0e, r25	; 14
    23b6:	84 ff       	sbrs	r24, 4
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <lcd_write_nibble+0x52>
    23ba:	84 b3       	in	r24, 0x14	; 20
    23bc:	80 62       	ori	r24, 0x20	; 32
    23be:	84 bb       	out	0x14, r24	; 20
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <lcd_write_nibble+0x58>
    23c2:	84 b3       	in	r24, 0x14	; 20
    23c4:	8f 7d       	andi	r24, 0xDF	; 223
    23c6:	84 bb       	out	0x14, r24	; 20
    23c8:	e2 e0       	ldi	r30, 0x02	; 2
    23ca:	f1 e0       	ldi	r31, 0x01	; 1
    23cc:	80 81       	ld	r24, Z
    23ce:	80 64       	ori	r24, 0x40	; 64
    23d0:	80 83       	st	Z, r24
    23d2:	85 e0       	ldi	r24, 0x05	; 5
    23d4:	8a 95       	dec	r24
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <lcd_write_nibble+0x64>
    23d8:	00 00       	nop
    23da:	80 81       	ld	r24, Z
    23dc:	8f 7b       	andi	r24, 0xBF	; 191
    23de:	80 83       	st	Z, r24
    23e0:	85 e0       	ldi	r24, 0x05	; 5
    23e2:	8a 95       	dec	r24
    23e4:	f1 f7       	brne	.-4      	; 0x23e2 <lcd_write_nibble+0x72>
    23e6:	00 00       	nop
    23e8:	08 95       	ret

000023ea <lcd_write_character>:
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	d8 2f       	mov	r29, r24
    23f0:	c5 b1       	in	r28, 0x05	; 5
    23f2:	c0 73       	andi	r28, 0x30	; 48
    23f4:	85 b1       	in	r24, 0x05	; 5
    23f6:	8f 7c       	andi	r24, 0xCF	; 207
    23f8:	80 61       	ori	r24, 0x10	; 16
    23fa:	85 b9       	out	0x05, r24	; 5
    23fc:	e2 e0       	ldi	r30, 0x02	; 2
    23fe:	f1 e0       	ldi	r31, 0x01	; 1
    2400:	80 81       	ld	r24, Z
    2402:	80 62       	ori	r24, 0x20	; 32
    2404:	80 83       	st	Z, r24
    2406:	80 81       	ld	r24, Z
    2408:	8f 7b       	andi	r24, 0xBF	; 191
    240a:	80 83       	st	Z, r24
    240c:	8d 2f       	mov	r24, r29
    240e:	b0 df       	rcall	.-160    	; 0x2370 <lcd_write_nibble>
    2410:	8d 2f       	mov	r24, r29
    2412:	82 95       	swap	r24
    2414:	80 7f       	andi	r24, 0xF0	; 240
    2416:	ac df       	rcall	.-168    	; 0x2370 <lcd_write_nibble>
    2418:	8f ef       	ldi	r24, 0xFF	; 255
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	f1 f7       	brne	.-4      	; 0x241c <lcd_write_character+0x32>
    2420:	00 c0       	rjmp	.+0      	; 0x2422 <lcd_write_character+0x38>
    2422:	00 00       	nop
    2424:	85 b1       	in	r24, 0x05	; 5
    2426:	80 73       	andi	r24, 0x30	; 48
    2428:	c8 2b       	or	r28, r24
    242a:	c5 b9       	out	0x05, r28	; 5
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <lcd_write_command>:
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	d8 2f       	mov	r29, r24
    2438:	c5 b1       	in	r28, 0x05	; 5
    243a:	c0 73       	andi	r28, 0x30	; 48
    243c:	85 b1       	in	r24, 0x05	; 5
    243e:	8f 7c       	andi	r24, 0xCF	; 207
    2440:	80 61       	ori	r24, 0x10	; 16
    2442:	85 b9       	out	0x05, r24	; 5
    2444:	e2 e0       	ldi	r30, 0x02	; 2
    2446:	f1 e0       	ldi	r31, 0x01	; 1
    2448:	80 81       	ld	r24, Z
    244a:	8f 7d       	andi	r24, 0xDF	; 223
    244c:	80 83       	st	Z, r24
    244e:	80 81       	ld	r24, Z
    2450:	8f 7b       	andi	r24, 0xBF	; 191
    2452:	80 83       	st	Z, r24
    2454:	8d 2f       	mov	r24, r29
    2456:	8c df       	rcall	.-232    	; 0x2370 <lcd_write_nibble>
    2458:	8d 2f       	mov	r24, r29
    245a:	82 95       	swap	r24
    245c:	80 7f       	andi	r24, 0xF0	; 240
    245e:	88 df       	rcall	.-240    	; 0x2370 <lcd_write_nibble>
    2460:	d1 50       	subi	r29, 0x01	; 1
    2462:	d2 30       	cpi	r29, 0x02	; 2
    2464:	38 f4       	brcc	.+14     	; 0x2474 <lcd_write_command+0x42>
    2466:	8f e0       	ldi	r24, 0x0F	; 15
    2468:	97 e2       	ldi	r25, 0x27	; 39
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <lcd_write_command+0x38>
    246e:	00 c0       	rjmp	.+0      	; 0x2470 <lcd_write_command+0x3e>
    2470:	00 00       	nop
    2472:	06 c0       	rjmp	.+12     	; 0x2480 <lcd_write_command+0x4e>
    2474:	8f ef       	ldi	r24, 0xFF	; 255
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <lcd_write_command+0x46>
    247c:	00 c0       	rjmp	.+0      	; 0x247e <lcd_write_command+0x4c>
    247e:	00 00       	nop
    2480:	85 b1       	in	r24, 0x05	; 5
    2482:	80 73       	andi	r24, 0x30	; 48
    2484:	c8 2b       	or	r28, r24
    2486:	c5 b9       	out	0x05, r28	; 5
    2488:	df 91       	pop	r29
    248a:	cf 91       	pop	r28
    248c:	08 95       	ret

0000248e <lcd_init>:
    248e:	cf 93       	push	r28
    2490:	c5 b1       	in	r28, 0x05	; 5
    2492:	c0 73       	andi	r28, 0x30	; 48
    2494:	85 b1       	in	r24, 0x05	; 5
    2496:	8f 7c       	andi	r24, 0xCF	; 207
    2498:	80 61       	ori	r24, 0x10	; 16
    249a:	85 b9       	out	0x05, r24	; 5
    249c:	e1 e0       	ldi	r30, 0x01	; 1
    249e:	f1 e0       	ldi	r31, 0x01	; 1
    24a0:	80 81       	ld	r24, Z
    24a2:	80 61       	ori	r24, 0x10	; 16
    24a4:	80 83       	st	Z, r24
    24a6:	80 81       	ld	r24, Z
    24a8:	88 60       	ori	r24, 0x08	; 8
    24aa:	80 83       	st	Z, r24
    24ac:	8d b1       	in	r24, 0x0d	; 13
    24ae:	88 60       	ori	r24, 0x08	; 8
    24b0:	8d b9       	out	0x0d, r24	; 13
    24b2:	83 b3       	in	r24, 0x13	; 19
    24b4:	80 62       	ori	r24, 0x20	; 32
    24b6:	83 bb       	out	0x13, r24	; 19
    24b8:	80 81       	ld	r24, Z
    24ba:	80 64       	ori	r24, 0x40	; 64
    24bc:	80 83       	st	Z, r24
    24be:	80 81       	ld	r24, Z
    24c0:	80 62       	ori	r24, 0x20	; 32
    24c2:	80 83       	st	Z, r24
    24c4:	2f ef       	ldi	r18, 0xFF	; 255
    24c6:	81 ee       	ldi	r24, 0xE1	; 225
    24c8:	94 e0       	ldi	r25, 0x04	; 4
    24ca:	21 50       	subi	r18, 0x01	; 1
    24cc:	80 40       	sbci	r24, 0x00	; 0
    24ce:	90 40       	sbci	r25, 0x00	; 0
    24d0:	e1 f7       	brne	.-8      	; 0x24ca <lcd_init+0x3c>
    24d2:	00 c0       	rjmp	.+0      	; 0x24d4 <lcd_init+0x46>
    24d4:	00 00       	nop
    24d6:	e2 e0       	ldi	r30, 0x02	; 2
    24d8:	f1 e0       	ldi	r31, 0x01	; 1
    24da:	80 81       	ld	r24, Z
    24dc:	8f 7d       	andi	r24, 0xDF	; 223
    24de:	80 83       	st	Z, r24
    24e0:	80 81       	ld	r24, Z
    24e2:	8f 7b       	andi	r24, 0xBF	; 191
    24e4:	80 83       	st	Z, r24
    24e6:	80 e3       	ldi	r24, 0x30	; 48
    24e8:	43 df       	rcall	.-378    	; 0x2370 <lcd_write_nibble>
    24ea:	8f e1       	ldi	r24, 0x1F	; 31
    24ec:	9e e4       	ldi	r25, 0x4E	; 78
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <lcd_init+0x60>
    24f2:	00 c0       	rjmp	.+0      	; 0x24f4 <lcd_init+0x66>
    24f4:	00 00       	nop
    24f6:	80 e3       	ldi	r24, 0x30	; 48
    24f8:	3b df       	rcall	.-394    	; 0x2370 <lcd_write_nibble>
    24fa:	8f e1       	ldi	r24, 0x1F	; 31
    24fc:	9e e4       	ldi	r25, 0x4E	; 78
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <lcd_init+0x70>
    2502:	00 c0       	rjmp	.+0      	; 0x2504 <lcd_init+0x76>
    2504:	00 00       	nop
    2506:	80 e3       	ldi	r24, 0x30	; 48
    2508:	33 df       	rcall	.-410    	; 0x2370 <lcd_write_nibble>
    250a:	8f e1       	ldi	r24, 0x1F	; 31
    250c:	9e e4       	ldi	r25, 0x4E	; 78
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <lcd_init+0x80>
    2512:	00 c0       	rjmp	.+0      	; 0x2514 <lcd_init+0x86>
    2514:	00 00       	nop
    2516:	88 e2       	ldi	r24, 0x28	; 40
    2518:	2b df       	rcall	.-426    	; 0x2370 <lcd_write_nibble>
    251a:	8f ef       	ldi	r24, 0xFF	; 255
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <lcd_init+0x90>
    2522:	00 c0       	rjmp	.+0      	; 0x2524 <lcd_init+0x96>
    2524:	00 00       	nop
    2526:	88 e2       	ldi	r24, 0x28	; 40
    2528:	84 df       	rcall	.-248    	; 0x2432 <lcd_write_command>
    252a:	88 e0       	ldi	r24, 0x08	; 8
    252c:	82 df       	rcall	.-252    	; 0x2432 <lcd_write_command>
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	80 df       	rcall	.-256    	; 0x2432 <lcd_write_command>
    2532:	86 e0       	ldi	r24, 0x06	; 6
    2534:	7e df       	rcall	.-260    	; 0x2432 <lcd_write_command>
    2536:	8c e0       	ldi	r24, 0x0C	; 12
    2538:	7c df       	rcall	.-264    	; 0x2432 <lcd_write_command>
    253a:	85 b1       	in	r24, 0x05	; 5
    253c:	80 73       	andi	r24, 0x30	; 48
    253e:	c8 2b       	or	r28, r24
    2540:	c5 b9       	out	0x05, r28	; 5
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <lcd_goto>:
    2546:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    254a:	80 58       	subi	r24, 0x80	; 128
    254c:	72 cf       	rjmp	.-284    	; 0x2432 <lcd_write_command>
    254e:	08 95       	ret

00002550 <lcd_clrscr>:
    2550:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	6d df       	rcall	.-294    	; 0x2432 <lcd_write_command>
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	e8 e5       	ldi	r30, 0x58	; 88
    255c:	f3 e0       	ldi	r31, 0x03	; 3
    255e:	04 c0       	rjmp	.+8      	; 0x2568 <lcd_clrscr+0x18>
    2560:	90 e2       	ldi	r25, 0x20	; 32
    2562:	90 83       	st	Z, r25
    2564:	8f 5f       	subi	r24, 0xFF	; 255
    2566:	31 96       	adiw	r30, 0x01	; 1
    2568:	80 35       	cpi	r24, 0x50	; 80
    256a:	d0 f3       	brcs	.-12     	; 0x2560 <lcd_clrscr+0x10>
    256c:	08 95       	ret

0000256e <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    256e:	84 31       	cpi	r24, 0x14	; 20
    2570:	98 f0       	brcs	.+38     	; 0x2598 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    2572:	90 ec       	ldi	r25, 0xC0	; 192
    2574:	98 0f       	add	r25, r24
    2576:	94 31       	cpi	r25, 0x14	; 20
    2578:	10 f4       	brcc	.+4      	; 0x257e <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    257a:	8c 52       	subi	r24, 0x2C	; 44
    257c:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    257e:	9c ee       	ldi	r25, 0xEC	; 236
    2580:	98 0f       	add	r25, r24
    2582:	94 31       	cpi	r25, 0x14	; 20
    2584:	10 f4       	brcc	.+4      	; 0x258a <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    2586:	8c 5e       	subi	r24, 0xEC	; 236
    2588:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    258a:	9c ea       	ldi	r25, 0xAC	; 172
    258c:	98 0f       	add	r25, r24
    258e:	94 31       	cpi	r25, 0x14	; 20
    2590:	10 f4       	brcc	.+4      	; 0x2596 <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    2592:	88 51       	subi	r24, 0x18	; 24
    2594:	08 95       	ret
	}
	return 0xFF;
    2596:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    2598:	08 95       	ret

0000259a <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    25a0:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    25a4:	8c 2f       	mov	r24, r28
    25a6:	e3 df       	rcall	.-58     	; 0x256e <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    25a8:	8f 3f       	cpi	r24, 0xFF	; 255
    25aa:	31 f1       	breq	.+76     	; 0x25f8 <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    25ac:	d1 3a       	cpi	r29, 0xA1	; 161
    25ae:	81 f0       	breq	.+32     	; 0x25d0 <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    25b0:	d0 38       	cpi	r29, 0x80	; 128
    25b2:	81 f0       	breq	.+32     	; 0x25d4 <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    25b4:	d5 3a       	cpi	r29, 0xA5	; 165
    25b6:	81 f0       	breq	.+32     	; 0x25d8 <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    25b8:	da 30       	cpi	r29, 0x0A	; 10
    25ba:	81 f0       	breq	.+32     	; 0x25dc <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    25bc:	d2 3e       	cpi	r29, 0xE2	; 226
    25be:	81 f0       	breq	.+32     	; 0x25e0 <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    25c0:	d5 3f       	cpi	r29, 0xF5	; 245
    25c2:	81 f0       	breq	.+32     	; 0x25e4 <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    25c4:	df 3e       	cpi	r29, 0xEF	; 239
    25c6:	81 f0       	breq	.+32     	; 0x25e8 <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    25c8:	d1 3e       	cpi	r29, 0xE1	; 225
    25ca:	81 f0       	breq	.+32     	; 0x25ec <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    25cc:	9d 2f       	mov	r25, r29
    25ce:	0f c0       	rjmp	.+30     	; 0x25ee <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    25d0:	90 e2       	ldi	r25, 0x20	; 32
    25d2:	0d c0       	rjmp	.+26     	; 0x25ee <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    25d4:	90 e2       	ldi	r25, 0x20	; 32
    25d6:	0b c0       	rjmp	.+22     	; 0x25ee <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    25d8:	94 e1       	ldi	r25, 0x14	; 20
    25da:	09 c0       	rjmp	.+18     	; 0x25ee <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    25dc:	95 e1       	ldi	r25, 0x15	; 21
    25de:	07 c0       	rjmp	.+14     	; 0x25ee <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    25e0:	93 e1       	ldi	r25, 0x13	; 19
    25e2:	05 c0       	rjmp	.+10     	; 0x25ee <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    25e4:	92 e1       	ldi	r25, 0x12	; 18
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    25e8:	91 e1       	ldi	r25, 0x11	; 17
    25ea:	01 c0       	rjmp	.+2      	; 0x25ee <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    25ec:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    25ee:	e8 2f       	mov	r30, r24
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	e8 5a       	subi	r30, 0xA8	; 168
    25f4:	fc 4f       	sbci	r31, 0xFC	; 252
    25f6:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    25f8:	cf 5f       	subi	r28, 0xFF	; 255
    25fa:	cf 77       	andi	r28, 0x7F	; 127
    25fc:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    2600:	8d 2f       	mov	r24, r29
    2602:	f3 de       	rcall	.-538    	; 0x23ea <lcd_write_character>
}
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	08 95       	ret

0000260a <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	fc 01       	movw	r30, r24
	if (s != NULL){
    2610:	89 2b       	or	r24, r25
    2612:	19 f4       	brne	.+6      	; 0x261a <lcd_puts+0x10>
    2614:	07 c0       	rjmp	.+14     	; 0x2624 <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    2616:	c1 df       	rcall	.-126    	; 0x259a <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    2618:	fe 01       	movw	r30, r28
    261a:	ef 01       	movw	r28, r30
    261c:	21 96       	adiw	r28, 0x01	; 1
    261e:	80 81       	ld	r24, Z
    2620:	81 11       	cpse	r24, r1
    2622:	f9 cf       	rjmp	.-14     	; 0x2616 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    2624:	df 91       	pop	r29
    2626:	cf 91       	pop	r28
    2628:	08 95       	ret

0000262a <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
    262e:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    2630:	89 2b       	or	r24, r25
    2632:	19 f4       	brne	.+6      	; 0x263a <lcd_puts_P+0x10>
    2634:	07 c0       	rjmp	.+14     	; 0x2644 <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    2636:	b1 df       	rcall	.-158    	; 0x259a <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2638:	fe 01       	movw	r30, r28
    263a:	ef 01       	movw	r28, r30
    263c:	21 96       	adiw	r28, 0x01	; 1
    263e:	84 91       	lpm	r24, Z
    2640:	81 11       	cpse	r24, r1
    2642:	f9 cf       	rjmp	.-14     	; 0x2636 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret

0000264a <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    264a:	82 ed       	ldi	r24, 0xD2	; 210
    264c:	93 e0       	ldi	r25, 0x03	; 3
    264e:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2652:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2656:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    265a:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    265e:	08 95       	ret

00002660 <log_count>:
    2660:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2664:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2668:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    266c:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    2670:	82 17       	cp	r24, r18
    2672:	93 07       	cpc	r25, r19
    2674:	48 f0       	brcs	.+18     	; 0x2688 <log_count+0x28>
    2676:	82 1b       	sub	r24, r18
    2678:	93 0b       	sbc	r25, r19
    267a:	95 95       	asr	r25
    267c:	87 95       	ror	r24
    267e:	9d ec       	ldi	r25, 0xCD	; 205
    2680:	89 9f       	mul	r24, r25
    2682:	80 2d       	mov	r24, r0
    2684:	11 24       	eor	r1, r1
    2686:	08 95       	ret
    2688:	80 57       	subi	r24, 0x70	; 112
    268a:	9e 4f       	sbci	r25, 0xFE	; 254
    268c:	82 1b       	sub	r24, r18
    268e:	93 0b       	sbc	r25, r19
    2690:	95 95       	asr	r25
    2692:	87 95       	ror	r24
    2694:	9d ec       	ldi	r25, 0xCD	; 205
    2696:	89 9f       	mul	r24, r25
    2698:	80 2d       	mov	r24, r0
    269a:	11 24       	eor	r1, r1
    269c:	08 95       	ret

0000269e <log_getLog>:
    269e:	cf 93       	push	r28
    26a0:	c8 2f       	mov	r28, r24
    26a2:	de df       	rcall	.-68     	; 0x2660 <log_count>
    26a4:	c8 17       	cp	r28, r24
    26a6:	f8 f4       	brcc	.+62     	; 0x26e6 <log_getLog+0x48>
    26a8:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    26ac:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    26b0:	8c 2f       	mov	r24, r28
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	9c 01       	movw	r18, r24
    26b6:	22 0f       	add	r18, r18
    26b8:	33 1f       	adc	r19, r19
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	28 0f       	add	r18, r24
    26c8:	39 1f       	adc	r19, r25
    26ca:	ca 01       	movw	r24, r20
    26cc:	82 0f       	add	r24, r18
    26ce:	93 1f       	adc	r25, r19
    26d0:	65 e0       	ldi	r22, 0x05	; 5
    26d2:	88 35       	cpi	r24, 0x58	; 88
    26d4:	96 07       	cpc	r25, r22
    26d6:	49 f0       	breq	.+18     	; 0x26ea <log_getLog+0x4c>
    26d8:	40 f0       	brcs	.+16     	; 0x26ea <log_getLog+0x4c>
    26da:	20 59       	subi	r18, 0x90	; 144
    26dc:	31 40       	sbci	r19, 0x01	; 1
    26de:	ca 01       	movw	r24, r20
    26e0:	82 0f       	add	r24, r18
    26e2:	93 1f       	adc	r25, r19
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <log_getLog+0x4c>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <log_getErrorText>:
    26ee:	d7 df       	rcall	.-82     	; 0x269e <log_getLog>
    26f0:	00 97       	sbiw	r24, 0x00	; 0
    26f2:	f1 f1       	breq	.+124    	; 0x2770 <log_getErrorText+0x82>
    26f4:	fc 01       	movw	r30, r24
    26f6:	36 81       	ldd	r19, Z+6	; 0x06
    26f8:	67 81       	ldd	r22, Z+7	; 0x07
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	34 c0       	rjmp	.+104    	; 0x2766 <log_getErrorText+0x78>
    26fe:	42 2f       	mov	r20, r18
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	fa 01       	movw	r30, r20
    2704:	ee 0f       	add	r30, r30
    2706:	ff 1f       	adc	r31, r31
    2708:	cf 01       	movw	r24, r30
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	88 0f       	add	r24, r24
    2710:	99 1f       	adc	r25, r25
    2712:	88 0f       	add	r24, r24
    2714:	99 1f       	adc	r25, r25
    2716:	e8 0f       	add	r30, r24
    2718:	f9 1f       	adc	r31, r25
    271a:	e6 59       	subi	r30, 0x96	; 150
    271c:	fe 4f       	sbci	r31, 0xFE	; 254
    271e:	84 91       	lpm	r24, Z
    2720:	38 13       	cpse	r19, r24
    2722:	20 c0       	rjmp	.+64     	; 0x2764 <log_getErrorText+0x76>
    2724:	fa 01       	movw	r30, r20
    2726:	ee 0f       	add	r30, r30
    2728:	ff 1f       	adc	r31, r31
    272a:	cf 01       	movw	r24, r30
    272c:	88 0f       	add	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	88 0f       	add	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	e8 0f       	add	r30, r24
    273a:	f9 1f       	adc	r31, r25
    273c:	e5 59       	subi	r30, 0x95	; 149
    273e:	fe 4f       	sbci	r31, 0xFE	; 254
    2740:	84 91       	lpm	r24, Z
    2742:	68 13       	cpse	r22, r24
    2744:	0f c0       	rjmp	.+30     	; 0x2764 <log_getErrorText+0x76>
    2746:	44 0f       	add	r20, r20
    2748:	55 1f       	adc	r21, r21
    274a:	ca 01       	movw	r24, r20
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	88 0f       	add	r24, r24
    2752:	99 1f       	adc	r25, r25
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	48 0f       	add	r20, r24
    275a:	59 1f       	adc	r21, r25
    275c:	ca 01       	movw	r24, r20
    275e:	84 59       	subi	r24, 0x94	; 148
    2760:	9e 4f       	sbci	r25, 0xFE	; 254
    2762:	08 95       	ret
    2764:	2f 5f       	subi	r18, 0xFF	; 255
    2766:	20 31       	cpi	r18, 0x10	; 16
    2768:	50 f2       	brcs	.-108    	; 0x26fe <log_getErrorText+0x10>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	08 95       	ret
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	08 95       	ret

00002776 <logCheckUnreadErrorLogs>:
    2776:	cf 93       	push	r28
    2778:	73 df       	rcall	.-282    	; 0x2660 <log_count>
    277a:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    277e:	81 11       	cpse	r24, r1
    2780:	14 c0       	rjmp	.+40     	; 0x27aa <logCheckUnreadErrorLogs+0x34>
    2782:	17 c0       	rjmp	.+46     	; 0x27b2 <logCheckUnreadErrorLogs+0x3c>
    2784:	8c 2f       	mov	r24, r28
    2786:	8b df       	rcall	.-234    	; 0x269e <log_getLog>
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	61 f0       	breq	.+24     	; 0x27a4 <logCheckUnreadErrorLogs+0x2e>
    278c:	fc 01       	movw	r30, r24
    278e:	24 81       	ldd	r18, Z+4	; 0x04
    2790:	20 32       	cpi	r18, 0x20	; 32
    2792:	51 f0       	breq	.+20     	; 0x27a8 <logCheckUnreadErrorLogs+0x32>
    2794:	95 81       	ldd	r25, Z+5	; 0x05
    2796:	8c 2f       	mov	r24, r28
    2798:	95 34       	cpi	r25, 0x45	; 69
    279a:	39 f4       	brne	.+14     	; 0x27aa <logCheckUnreadErrorLogs+0x34>
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    27a2:	07 c0       	rjmp	.+14     	; 0x27b2 <logCheckUnreadErrorLogs+0x3c>
    27a4:	8c 2f       	mov	r24, r28
    27a6:	01 c0       	rjmp	.+2      	; 0x27aa <logCheckUnreadErrorLogs+0x34>
    27a8:	8c 2f       	mov	r24, r28
    27aa:	cf ef       	ldi	r28, 0xFF	; 255
    27ac:	c8 0f       	add	r28, r24
    27ae:	81 11       	cpse	r24, r1
    27b0:	e9 cf       	rjmp	.-46     	; 0x2784 <logCheckUnreadErrorLogs+0xe>
    27b2:	cf 91       	pop	r28
    27b4:	08 95       	ret

000027b6 <log_getShortTextFromPtr>:
    27b6:	1f 93       	push	r17
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	09 f4       	brne	.+2      	; 0x27c2 <log_getShortTextFromPtr+0xc>
    27c0:	7b c0       	rjmp	.+246    	; 0x28b8 <log_getShortTextFromPtr+0x102>
    27c2:	16 2f       	mov	r17, r22
    27c4:	ec 01       	movw	r28, r24
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	88 23       	and	r24, r24
    27ca:	79 f0       	breq	.+30     	; 0x27ea <log_getShortTextFromPtr+0x34>
    27cc:	6a ea       	ldi	r22, 0xAA	; 170
    27ce:	73 e0       	ldi	r23, 0x03	; 3
    27d0:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    27d4:	bc 01       	movw	r22, r24
    27d6:	6f 5f       	subi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	28 e6       	ldi	r18, 0x68	; 104
    27dc:	fc 01       	movw	r30, r24
    27de:	20 83       	st	Z, r18
    27e0:	8a 81       	ldd	r24, Y+2	; 0x02
    27e2:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    27e6:	dc 01       	movw	r26, r24
    27e8:	2f c0       	rjmp	.+94     	; 0x2848 <log_getShortTextFromPtr+0x92>
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	88 23       	and	r24, r24
    27ee:	79 f0       	breq	.+30     	; 0x280e <log_getShortTextFromPtr+0x58>
    27f0:	6a ea       	ldi	r22, 0xAA	; 170
    27f2:	73 e0       	ldi	r23, 0x03	; 3
    27f4:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    27f8:	bc 01       	movw	r22, r24
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	2d e6       	ldi	r18, 0x6D	; 109
    2800:	fc 01       	movw	r30, r24
    2802:	20 83       	st	Z, r18
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    280a:	dc 01       	movw	r26, r24
    280c:	1d c0       	rjmp	.+58     	; 0x2848 <log_getShortTextFromPtr+0x92>
    280e:	6a ea       	ldi	r22, 0xAA	; 170
    2810:	73 e0       	ldi	r23, 0x03	; 3
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    2818:	fc 01       	movw	r30, r24
    281a:	83 e7       	ldi	r24, 0x73	; 115
    281c:	80 83       	st	Z, r24
    281e:	98 81       	ld	r25, Y
    2820:	99 0f       	add	r25, r25
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	02 c0       	rjmp	.+4      	; 0x282a <log_getShortTextFromPtr+0x74>
    2826:	99 51       	subi	r25, 0x19	; 25
    2828:	2f 5f       	subi	r18, 0xFF	; 255
    282a:	99 31       	cpi	r25, 0x19	; 25
    282c:	e0 f7       	brcc	.-8      	; 0x2826 <log_getShortTextFromPtr+0x70>
    282e:	20 5d       	subi	r18, 0xD0	; 208
    2830:	21 83       	std	Z+1, r18	; 0x01
    2832:	99 0f       	add	r25, r25
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	02 c0       	rjmp	.+4      	; 0x283c <log_getShortTextFromPtr+0x86>
    2838:	95 50       	subi	r25, 0x05	; 5
    283a:	2f 5f       	subi	r18, 0xFF	; 255
    283c:	95 30       	cpi	r25, 0x05	; 5
    283e:	e0 f7       	brcc	.-8      	; 0x2838 <log_getShortTextFromPtr+0x82>
    2840:	df 01       	movw	r26, r30
    2842:	13 96       	adiw	r26, 0x03	; 3
    2844:	20 5d       	subi	r18, 0xD0	; 208
    2846:	22 83       	std	Z+2, r18	; 0x02
    2848:	9c 81       	ldd	r25, Y+4	; 0x04
    284a:	90 34       	cpi	r25, 0x40	; 64
    284c:	51 f0       	breq	.+20     	; 0x2862 <log_getShortTextFromPtr+0xac>
    284e:	90 38       	cpi	r25, 0x80	; 128
    2850:	19 f0       	breq	.+6      	; 0x2858 <log_getShortTextFromPtr+0xa2>
    2852:	90 32       	cpi	r25, 0x20	; 32
    2854:	81 f4       	brne	.+32     	; 0x2876 <log_getShortTextFromPtr+0xc0>
    2856:	0a c0       	rjmp	.+20     	; 0x286c <log_getShortTextFromPtr+0xb6>
    2858:	fd 01       	movw	r30, r26
    285a:	31 96       	adiw	r30, 0x01	; 1
    285c:	8a e2       	ldi	r24, 0x2A	; 42
    285e:	8c 93       	st	X, r24
    2860:	0e c0       	rjmp	.+28     	; 0x287e <log_getShortTextFromPtr+0xc8>
    2862:	fd 01       	movw	r30, r26
    2864:	31 96       	adiw	r30, 0x01	; 1
    2866:	85 ea       	ldi	r24, 0xA5	; 165
    2868:	8c 93       	st	X, r24
    286a:	09 c0       	rjmp	.+18     	; 0x287e <log_getShortTextFromPtr+0xc8>
    286c:	fd 01       	movw	r30, r26
    286e:	31 96       	adiw	r30, 0x01	; 1
    2870:	80 e2       	ldi	r24, 0x20	; 32
    2872:	8c 93       	st	X, r24
    2874:	04 c0       	rjmp	.+8      	; 0x287e <log_getShortTextFromPtr+0xc8>
    2876:	fd 01       	movw	r30, r26
    2878:	31 96       	adiw	r30, 0x01	; 1
    287a:	8f e3       	ldi	r24, 0x3F	; 63
    287c:	8c 93       	st	X, r24
    287e:	bf 01       	movw	r22, r30
    2880:	6f 5f       	subi	r22, 0xFF	; 255
    2882:	7f 4f       	sbci	r23, 0xFF	; 255
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	80 83       	st	Z, r24
    2888:	8e 81       	ldd	r24, Y+6	; 0x06
    288a:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    288e:	bc 01       	movw	r22, r24
    2890:	8f 81       	ldd	r24, Y+7	; 0x07
    2892:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    2896:	bc 01       	movw	r22, r24
    2898:	6f 5f       	subi	r22, 0xFF	; 255
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	2d e2       	ldi	r18, 0x2D	; 45
    289e:	fc 01       	movw	r30, r24
    28a0:	20 83       	st	Z, r18
    28a2:	88 85       	ldd	r24, Y+8	; 0x08
    28a4:	99 85       	ldd	r25, Y+9	; 0x09
    28a6:	0e 94 9e 38 	call	0x713c	; 0x713c <putChar_long>
    28aa:	fc 01       	movw	r30, r24
    28ac:	10 82       	st	Z, r1
    28ae:	1f 3f       	cpi	r17, 0xFF	; 255
    28b0:	41 f0       	breq	.+16     	; 0x28c2 <log_getShortTextFromPtr+0x10c>
    28b2:	1c 83       	std	Y+4, r17	; 0x04
    28b4:	60 df       	rcall	.-320    	; 0x2776 <logCheckUnreadErrorLogs>
    28b6:	05 c0       	rjmp	.+10     	; 0x28c2 <log_getShortTextFromPtr+0x10c>
    28b8:	ea ea       	ldi	r30, 0xAA	; 170
    28ba:	f3 e0       	ldi	r31, 0x03	; 3
    28bc:	8d e2       	ldi	r24, 0x2D	; 45
    28be:	80 83       	st	Z, r24
    28c0:	11 82       	std	Z+1, r1	; 0x01
    28c2:	8a ea       	ldi	r24, 0xAA	; 170
    28c4:	93 e0       	ldi	r25, 0x03	; 3
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	1f 91       	pop	r17
    28cc:	08 95       	ret

000028ce <log_put>:
    28ce:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    28d2:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    28d6:	a1 e4       	ldi	r26, 0x41	; 65
    28d8:	b2 e0       	ldi	r27, 0x02	; 2
    28da:	9c 91       	ld	r25, X
    28dc:	90 83       	st	Z, r25
    28de:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    28e2:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    28e6:	11 96       	adiw	r26, 0x01	; 1
    28e8:	9c 91       	ld	r25, X
    28ea:	11 97       	sbiw	r26, 0x01	; 1
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    28f2:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    28f6:	12 96       	adiw	r26, 0x02	; 2
    28f8:	9c 91       	ld	r25, X
    28fa:	12 97       	sbiw	r26, 0x02	; 2
    28fc:	92 83       	std	Z+2, r25	; 0x02
    28fe:	13 96       	adiw	r26, 0x03	; 3
    2900:	9c 91       	ld	r25, X
    2902:	93 83       	std	Z+3, r25	; 0x03
    2904:	25 83       	std	Z+5, r18	; 0x05
    2906:	86 83       	std	Z+6, r24	; 0x06
    2908:	67 83       	std	Z+7, r22	; 0x07
    290a:	51 87       	std	Z+9, r21	; 0x09
    290c:	40 87       	std	Z+8, r20	; 0x08
    290e:	80 e8       	ldi	r24, 0x80	; 128
    2910:	84 83       	std	Z+4, r24	; 0x04
    2912:	80 91 4e 16 	lds	r24, 0x164E	; 0x80164e <serUSB_Active>
    2916:	8f 3f       	cpi	r24, 0xFF	; 255
    2918:	81 f4       	brne	.+32     	; 0x293a <log_put+0x6c>
    291a:	84 e6       	ldi	r24, 0x64	; 100
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    2922:	6f ef       	ldi	r22, 0xFF	; 255
    2924:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2928:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    292c:	44 df       	rcall	.-376    	; 0x27b6 <log_getShortTextFromPtr>
    292e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    2932:	87 e1       	ldi	r24, 0x17	; 23
    2934:	92 e1       	ldi	r25, 0x12	; 18
    2936:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    293a:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    293e:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2942:	0a 96       	adiw	r24, 0x0a	; 10
    2944:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2948:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    294c:	88 55       	subi	r24, 0x58	; 88
    294e:	95 40       	sbci	r25, 0x05	; 5
    2950:	39 f0       	breq	.+14     	; 0x2960 <log_put+0x92>
    2952:	30 f0       	brcs	.+12     	; 0x2960 <log_put+0x92>
    2954:	82 ed       	ldi	r24, 0xD2	; 210
    2956:	93 e0       	ldi	r25, 0x03	; 3
    2958:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    295c:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2960:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    2964:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    2968:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    296c:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    2970:	28 17       	cp	r18, r24
    2972:	39 07       	cpc	r19, r25
    2974:	79 f4       	brne	.+30     	; 0x2994 <log_put+0xc6>
    2976:	0a 96       	adiw	r24, 0x0a	; 10
    2978:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    297c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2980:	88 55       	subi	r24, 0x58	; 88
    2982:	95 40       	sbci	r25, 0x05	; 5
    2984:	39 f0       	breq	.+14     	; 0x2994 <log_put+0xc6>
    2986:	30 f0       	brcs	.+12     	; 0x2994 <log_put+0xc6>
    2988:	82 ed       	ldi	r24, 0xD2	; 210
    298a:	93 e0       	ldi	r25, 0x03	; 3
    298c:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2990:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2994:	08 95       	ret

00002996 <log_putError>:
    2996:	25 e4       	ldi	r18, 0x45	; 69
    2998:	9a df       	rcall	.-204    	; 0x28ce <log_put>
    299a:	8f ef       	ldi	r24, 0xFF	; 255
    299c:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    29a0:	08 95       	ret

000029a2 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    29a2:	cf 93       	push	r28
    29a4:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    29a6:	7b de       	rcall	.-778    	; 0x269e <log_getLog>
	if (pLogEntry != NULL){
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	19 f0       	breq	.+6      	; 0x29b2 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    29ac:	6c 2f       	mov	r22, r28
    29ae:	03 df       	rcall	.-506    	; 0x27b6 <log_getShortTextFromPtr>
    29b0:	06 c0       	rjmp	.+12     	; 0x29be <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    29b2:	ea ea       	ldi	r30, 0xAA	; 170
    29b4:	f3 e0       	ldi	r31, 0x03	; 3
    29b6:	8d e2       	ldi	r24, 0x2D	; 45
    29b8:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    29ba:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    29bc:	cf 01       	movw	r24, r30
	}
    29be:	cf 91       	pop	r28
    29c0:	08 95       	ret

000029c2 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    29c2:	b6 dc       	rcall	.-1684   	; 0x2330 <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    29c4:	85 b1       	in	r24, 0x05	; 5
    29c6:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();
    29c8:	85 b9       	out	0x05, r24	; 5
    29ca:	3f de       	rcall	.-898    	; 0x264a <init_log>
	init_Serial0SerUSB();
    29cc:	0e 94 a8 35 	call	0x6b50	; 0x6b50 <init_Serial0SerUSB>
	init_message();
    29d0:	0e 94 a2 2b 	call	0x5744	; 0x5744 <init_message>
	init_HwTimer();
	init_Timers();
    29d4:	35 d8       	rcall	.-3990   	; 0x1a40 <init_HwTimer>
    29d6:	1c d8       	rcall	.-4040   	; 0x1a10 <init_Timers>
	init_ADC();
    29d8:	42 d8       	rcall	.-3964   	; 0x1a5e <init_ADC>
	init_Pipe();
    29da:	6b d8       	rcall	.-3882   	; 0x1ab2 <init_Pipe>
    29dc:	0e 94 1b 34 	call	0x6836	; 0x6836 <init_Serial1MIDI>
	init_Serial1MIDI();
    29e0:	90 d8       	rcall	.-3808   	; 0x1b02 <init_PipeModules>
	init_PipeModules();
    29e2:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <init_Midi2Manual>
	init_Midi2Manual();
    29e6:	0e 94 86 2f 	call	0x5f0c	; 0x5f0c <init_Manual2Midi>
	init_Manual2Midi();
    29ea:	0e 94 34 2c 	call	0x5868	; 0x5868 <init_Midi>
	init_Midi();
    29ee:	0e 94 a8 2c 	call	0x5950	; 0x5950 <init_Registers>
	init_Registers();
    29f2:	0e 94 17 30 	call	0x602e	; 0x602e <init_Manual2Module>
	init_Manual2Module();
    29f6:	0e 94 43 2a 	call	0x5486	; 0x5486 <init_SoftKeys>
	init_SoftKeys();
    29fa:	0e 94 bd 0c 	call	0x197a	; 0x197a <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    29fe:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	INIT_MENU
    2a02:	45 dd       	rcall	.-1398   	; 0x248e <lcd_init>


	// BOOT MESSAGE

	lcd_init ();
    2a04:	0e 94 bd 37 	call	0x6f7a	; 0x6f7a <lcd_initCG>
	lcd_initCG();
	lcd_clrscr ();
    2a08:	a3 dd       	rcall	.-1210   	; 0x2550 <lcd_clrscr>
    2a0a:	83 e4       	ldi	r24, 0x43	; 67
	lcd_goto(LCD_LINE1+3);
    2a0c:	9c dd       	rcall	.-1224   	; 0x2546 <lcd_goto>
    2a0e:	85 ea       	ldi	r24, 0xA5	; 165
	lcd_puts_P(prog_name);
    2a10:	92 e0       	ldi	r25, 0x02	; 2
    2a12:	0b de       	rcall	.-1002   	; 0x262a <lcd_puts_P>
    2a14:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_goto(LCD_LINE2+7);
    2a16:	97 dd       	rcall	.-1234   	; 0x2546 <lcd_goto>
    2a18:	87 eb       	ldi	r24, 0xB7	; 183
    2a1a:	91 e1       	ldi	r25, 0x11	; 17
	lcd_puts_P(sw_version);
    2a1c:	06 de       	rcall	.-1012   	; 0x262a <lcd_puts_P>
    2a1e:	78 94       	sei
    2a20:	2f ef       	ldi	r18, 0xFF	; 255
    2a22:	47 e9       	ldi	r20, 0x97	; 151
	sei();
    2a24:	8a e3       	ldi	r24, 0x3A	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a26:	21 50       	subi	r18, 0x01	; 1
    2a28:	40 40       	sbci	r20, 0x00	; 0
    2a2a:	80 40       	sbci	r24, 0x00	; 0
    2a2c:	e1 f7       	brne	.-8      	; 0x2a26 <main+0x64>
    2a2e:	00 c0       	rjmp	.+0      	; 0x2a30 <main+0x6e>
    2a30:	00 00       	nop
    2a32:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2a36:	8c dd       	rcall	.-1256   	; 0x2550 <lcd_clrscr>
	lcd_clrscr ();
    2a38:	a8 d9       	rcall	.-3248   	; 0x1d8a <module_StartPowerOn>
    2a3a:	8f ef       	ldi	r24, 0xFF	; 255

	// TURN ON POWER

	module_StartPowerOn();
    2a3c:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    2a40:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2a44:	8e ef       	ldi	r24, 0xFE	; 254

	menuNotActive = TRUE;
    2a46:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2a4a:	df ef       	ldi	r29, 0xFF	; 255
    2a4c:	85 b1       	in	r24, 0x05	; 5
    2a4e:	8f 7c       	andi	r24, 0xCF	; 207
	module_StartPowerOn();
	MESSAGE_PIPE_HANDLING_ON

	menuNotActive = TRUE;
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2a50:	85 b9       	out	0x05, r24	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		DEBUG_OUT_MAIN
    2a52:	20 91 fc 13 	lds	r18, 0x13FC	; 0x8013fc <serESPRxInIndex>
    2a56:	30 91 fd 13 	lds	r19, 0x13FD	; 0x8013fd <serESPRxInIndex+0x1>
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2a5a:	80 91 f7 13 	lds	r24, 0x13F7	; 0x8013f7 <serESPRxOutIndex>
    2a5e:	90 91 f8 13 	lds	r25, 0x13F8	; 0x8013f8 <serESPRxOutIndex+0x1>
    2a62:	28 17       	cp	r18, r24
    2a64:	39 07       	cpc	r19, r25
    2a66:	09 f4       	brne	.+2      	; 0x2a6a <main+0xa8>
    2a68:	66 c0       	rjmp	.+204    	; 0x2b36 <main+0x174>
    2a6a:	0e 94 e5 36 	call	0x6dca	; 0x6dca <serial3SER_ESPReadRx>
    2a6e:	c8 2f       	mov	r28, r24
			uint8_t esp_message = serial3SER_ESPReadRx();
    2a70:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
    2a74:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    2a78:	8f e7       	ldi	r24, 0x7F	; 127
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2a7a:	8c 0f       	add	r24, r28
    2a7c:	86 30       	cpi	r24, 0x06	; 6
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2a7e:	28 f4       	brcc	.+10     	; 0x2a8a <main+0xc8>
    2a80:	80 e8       	ldi	r24, 0x80	; 128
    2a82:	8c 0f       	add	r24, r28
    2a84:	0e 94 a9 2b 	call	0x5752	; 0x5752 <message_push>
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2a88:	56 c0       	rjmp	.+172    	; 0x2b36 <main+0x174>
    2a8a:	c0 39       	cpi	r28, 0x90	; 144
    2a8c:	09 f0       	breq	.+2      	; 0x2a90 <main+0xce>
    2a8e:	53 c0       	rjmp	.+166    	; 0x2b36 <main+0x174>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2a90:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <serESPInBuffer>
    2a94:	80 39       	cpi	r24, 0x90	; 144
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <main+0xd8>
    2a98:	4e c0       	rjmp	.+156    	; 0x2b36 <main+0x174>
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	e9 2f       	mov	r30, r25
    2a9e:	09 2e       	mov	r0, r25
    2aa0:	00 0c       	add	r0, r0
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2aa2:	ff 0b       	sbc	r31, r31
    2aa4:	e1 51       	subi	r30, 0x11	; 17
    2aa6:	fc 4e       	sbci	r31, 0xEC	; 236
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8d 33       	cpi	r24, 0x3D	; 61
    2aac:	19 f0       	breq	.+6      	; 0x2ab4 <main+0xf2>
    2aae:	9f 5f       	subi	r25, 0xFF	; 255
    2ab0:	98 30       	cpi	r25, 0x08	; 8
    2ab2:	a4 f3       	brlt	.-24     	; 0x2a9c <main+0xda>
							break;
						}
						i++;
    2ab4:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2ab6:	0c f0       	brlt	.+2      	; 0x2aba <main+0xf8>
    2ab8:	3e c0       	rjmp	.+124    	; 0x2b36 <main+0x174>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2aba:	89 2f       	mov	r24, r25
    2abc:	85 95       	asr	r24
    2abe:	20 e0       	ldi	r18, 0x00	; 0
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2ac0:	06 c0       	rjmp	.+12     	; 0x2ace <main+0x10c>
    2ac2:	e2 2f       	mov	r30, r18
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	e9 5b       	subi	r30, 0xB9	; 185
							serESPMidiTmp[j] = 0;
    2ac8:	f9 4e       	sbci	r31, 0xE9	; 233
    2aca:	10 82       	st	Z, r1
    2acc:	2f 5f       	subi	r18, 0xFF	; 255
    2ace:	23 30       	cpi	r18, 0x03	; 3
    2ad0:	c0 f3       	brcs	.-16     	; 0x2ac2 <main+0x100>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2ad2:	2c c0       	rjmp	.+88     	; 0x2b2c <main+0x16a>
    2ad4:	e9 2f       	mov	r30, r25
    2ad6:	09 2e       	mov	r0, r25
    2ad8:	00 0c       	add	r0, r0
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2ada:	ff 0b       	sbc	r31, r31
    2adc:	e1 51       	subi	r30, 0x11	; 17
    2ade:	fc 4e       	sbci	r31, 0xEC	; 236
    2ae0:	30 81       	ld	r19, Z
    2ae2:	20 ed       	ldi	r18, 0xD0	; 208
    2ae4:	23 0f       	add	r18, r19
    2ae6:	2a 30       	cpi	r18, 0x0A	; 10
    2ae8:	10 f0       	brcs	.+4      	; 0x2aee <main+0x12c>
    2aea:	27 ed       	ldi	r18, 0xD7	; 215
							if (asciiData > 9){
    2aec:	23 0f       	add	r18, r19
    2aee:	a2 2f       	mov	r26, r18
								asciiData = asciiData - (0x0A - 'A' + '0');
    2af0:	af 70       	andi	r26, 0x0F	; 15
    2af2:	e7 e4       	ldi	r30, 0x47	; 71
							}
							asciiData &= 0x0F;
    2af4:	f6 e1       	ldi	r31, 0x16	; 22
    2af6:	62 81       	ldd	r22, Z+2	; 0x02
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2af8:	20 e1       	ldi	r18, 0x10	; 16
    2afa:	62 9f       	mul	r22, r18
    2afc:	b0 01       	movw	r22, r0
    2afe:	11 24       	eor	r1, r1
    2b00:	41 81       	ldd	r20, Z+1	; 0x01
    2b02:	24 2f       	mov	r18, r20
    2b04:	22 95       	swap	r18
    2b06:	2f 70       	andi	r18, 0x0F	; 15
    2b08:	62 2b       	or	r22, r18
    2b0a:	62 83       	std	Z+2, r22	; 0x02
    2b0c:	20 e1       	ldi	r18, 0x10	; 16
    2b0e:	42 9f       	mul	r20, r18
    2b10:	a0 01       	movw	r20, r0
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2b12:	11 24       	eor	r1, r1
    2b14:	20 81       	ld	r18, Z
    2b16:	32 2f       	mov	r19, r18
    2b18:	32 95       	swap	r19
    2b1a:	3f 70       	andi	r19, 0x0F	; 15
    2b1c:	43 2b       	or	r20, r19
    2b1e:	41 83       	std	Z+1, r20	; 0x01
    2b20:	40 e1       	ldi	r20, 0x10	; 16
    2b22:	24 9f       	mul	r18, r20
    2b24:	90 01       	movw	r18, r0
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2b26:	11 24       	eor	r1, r1
    2b28:	2a 2b       	or	r18, r26
    2b2a:	20 83       	st	Z, r18
    2b2c:	91 50       	subi	r25, 0x01	; 1
    2b2e:	19 16       	cp	r1, r25
    2b30:	8c f2       	brlt	.-94     	; 0x2ad4 <main+0x112>
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2b32:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <proc_ESPmidi>
    2b36:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <message_status>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2b3a:	88 23       	and	r24, r24
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2b3c:	09 f4       	brne	.+2      	; 0x2b40 <main+0x17e>
    2b3e:	46 c0       	rjmp	.+140    	; 0x2bcc <main+0x20a>
    2b40:	85 b1       	in	r24, 0x05	; 5
    2b42:	80 63       	ori	r24, 0x30	; 48
    2b44:	85 b9       	out	0x05, r24	; 5
			DEBUG_OUT_MENU
    2b46:	0e 94 bd 2b 	call	0x577a	; 0x577a <message_get>
    2b4a:	c8 2f       	mov	r28, r24
			uint8_t keyMessage = message_get();
    2b4c:	86 38       	cpi	r24, 0x86	; 134
    2b4e:	61 f4       	brne	.+24     	; 0x2b68 <main+0x1a6>
    2b50:	0e 94 e5 33 	call	0x67ca	; 0x67ca <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    2b54:	0e 94 b5 31 	call	0x636a	; 0x636a <midi_AllManualsOff>
				// PANIC BUTTON
				midiSendAllNotesOff();
    2b58:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <midi_resetRegisters>
				midi_AllManualsOff();
    2b5c:	0e 94 2a 2c 	call	0x5854	; 0x5854 <midi_CouplerReset>
				midi_resetRegisters();
    2b60:	8a e8       	ldi	r24, 0x8A	; 138
				midi_CouplerReset();
    2b62:	92 e0       	ldi	r25, 0x02	; 2
    2b64:	0e 94 6b 29 	call	0x52d6	; 0x52d6 <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2b68:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    2b6c:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (menuNotActive == TRUE) {
    2b6e:	f9 f4       	brne	.+62     	; 0x2bae <main+0x1ec>
    2b70:	8c 2f       	mov	r24, r28
    2b72:	8f 73       	andi	r24, 0x3F	; 63
    2b74:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2b76:	69 f4       	brne	.+26     	; 0x2b92 <main+0x1d0>
    2b78:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <menu_Init>
    2b84:	0e 94 a7 25 	call	0x4b4e	; 0x4b4e <menu_InitLCD>
					menu_InitLCD(); //display menu
    2b88:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	53 d9       	rcall	.-3418   	; 0x1e36 <softKey_WantLong>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2b90:	1d c0       	rjmp	.+58     	; 0x2bcc <main+0x20a>
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	98 0f       	add	r25, r24
    2b96:	94 30       	cpi	r25, 0x04	; 4
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2b98:	c8 f4       	brcc	.+50     	; 0x2bcc <main+0x20a>
    2b9a:	0e 94 07 2b 	call	0x560e	; 0x560e <softKey_MessageKey_ToSoftKeyNr>
    2b9e:	6c 2f       	mov	r22, r28
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2ba0:	0e 94 1c 2b 	call	0x5638	; 0x5638 <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2ba4:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2ba8:	0e 94 c8 2a 	call	0x5590	; 0x5590 <softKeys_toLCD>
    2bac:	0f c0       	rjmp	.+30     	; 0x2bcc <main+0x20a>
					softKeys_toLCD();
    2bae:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2bb2:	81 11       	cpse	r24, r1
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2bb4:	06 c0       	rjmp	.+12     	; 0x2bc2 <main+0x200>
    2bb6:	8c 2f       	mov	r24, r28
    2bb8:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2bbc:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2bc0:	05 c0       	rjmp	.+10     	; 0x2bcc <main+0x20a>
    2bc2:	8d ef       	ldi	r24, 0xFD	; 253
    2bc4:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2bc8:	0e 94 36 28 	call	0x506c	; 0x506c <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2bcc:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    2bd0:	8f 3f       	cpi	r24, 0xFF	; 255
    2bd2:	51 f4       	brne	.+20     	; 0x2be8 <main+0x226>
    2bd4:	df 3f       	cpi	r29, 0xFF	; 255
    2bd6:	49 f4       	brne	.+18     	; 0x2bea <main+0x228>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2bd8:	0e 94 f5 24 	call	0x49ea	; 0x49ea <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2bdc:	0e 94 c8 2a 	call	0x5590	; 0x5590 <softKeys_toLCD>
				softKeys_toLCD();
    2be0:	8f ef       	ldi	r24, 0xFF	; 255
    2be2:	29 d9       	rcall	.-3502   	; 0x1e36 <softKey_WantLong>
				softKey_WantLong(TRUE);
    2be4:	d0 e0       	ldi	r29, 0x00	; 0
    2be6:	01 c0       	rjmp	.+2      	; 0x2bea <main+0x228>
    2be8:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2bea:	85 b1       	in	r24, 0x05	; 5
    2bec:	8f 7c       	andi	r24, 0xCF	; 207
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2bee:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MAIN
    2bf0:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	09 c0       	rjmp	.+18     	; 0x2c0a <main+0x248>
    2bf8:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2bfc:	0e 94 5a 29 	call	0x52b4	; 0x52b4 <menu_deleteMessage>
				menu_deleteMessage();
    2c00:	8c 2f       	mov	r24, r28
    2c02:	a1 dc       	rcall	.-1726   	; 0x2546 <lcd_goto>
				lcd_goto(saveCursor);
    2c04:	8f ef       	ldi	r24, 0xFF	; 255
    2c06:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2c0a:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
    2c0e:	81 11       	cpse	r24, r1
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2c10:	0a c0       	rjmp	.+20     	; 0x2c26 <main+0x264>
    2c12:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2c16:	88 23       	and	r24, r24
    2c18:	19 f0       	breq	.+6      	; 0x2c20 <main+0x25e>
    2c1a:	0e 94 36 28 	call	0x506c	; 0x506c <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <main+0x264>
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2c26:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    2c2a:	81 11       	cpse	r24, r1
    2c2c:	1a c0       	rjmp	.+52     	; 0x2c62 <main+0x2a0>
    2c2e:	bd d8       	rcall	.-3718   	; 0x1daa <module_PowerControl>
			module_PowerControl();
    2c30:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <menu_showPowerState>
			menu_showPowerState();
    2c34:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			if (menuNotActive == TRUE) {
    2c38:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3a:	99 f4       	brne	.+38     	; 0x2c62 <main+0x2a0>
    2c3c:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2c40:	84 e1       	ldi	r24, 0x14	; 20
				lcd_goto(LCD_LINE2);
    2c42:	81 dc       	rcall	.-1790   	; 0x2546 <lcd_goto>
    2c44:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2c48:	81 30       	cpi	r24, 0x01	; 1
    2c4a:	21 f4       	brne	.+8      	; 0x2c54 <main+0x292>
    2c4c:	83 e9       	ldi	r24, 0x93	; 147
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	ec dc       	rcall	.-1576   	; 0x262a <lcd_puts_P>
    2c52:	05 c0       	rjmp	.+10     	; 0x2c5e <main+0x29c>
    2c54:	82 31       	cpi	r24, 0x12	; 18
    2c56:	19 f4       	brne	.+6      	; 0x2c5e <main+0x29c>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2c58:	84 e1       	ldi	r24, 0x14	; 20
    2c5a:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2c5e:	8c 2f       	mov	r24, r28
    2c60:	72 dc       	rcall	.-1820   	; 0x2546 <lcd_goto>
				}
				lcd_goto(saveCursor);
    2c62:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2c66:	9f e7       	ldi	r25, 0x7F	; 127
    2c68:	98 0f       	add	r25, r24
    2c6a:	96 30       	cpi	r25, 0x06	; 6
    2c6c:	10 f0       	brcs	.+4      	; 0x2c72 <main+0x2b0>
    2c6e:	8e 3f       	cpi	r24, 0xFE	; 254
    2c70:	09 f5       	brne	.+66     	; 0x2cb4 <main+0x2f2>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2c72:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2c76:	8f 3f       	cpi	r24, 0xFF	; 255
    2c78:	31 f4       	brne	.+12     	; 0x2c86 <main+0x2c4>
    2c7a:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2c7e:	77 dc       	rcall	.-1810   	; 0x256e <getCursorFromLCDRAMcursor>
    2c80:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <serial3SER_ESPSend>
    2c84:	03 c0       	rjmp	.+6      	; 0x2c8c <main+0x2ca>
    2c86:	8f e7       	ldi	r24, 0x7F	; 127
    2c88:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2c8c:	81 e8       	ldi	r24, 0x81	; 129
    2c8e:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2c92:	c0 e0       	ldi	r28, 0x00	; 0
    2c94:	e8 e5       	ldi	r30, 0x58	; 88
    2c96:	f3 e0       	ldi	r31, 0x03	; 3
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2c98:	08 c0       	rjmp	.+16     	; 0x2caa <main+0x2e8>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2c9a:	8f 01       	movw	r16, r30
    2c9c:	0f 5f       	subi	r16, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2c9e:	1f 4f       	sbci	r17, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    2ca0:	80 81       	ld	r24, Z
    2ca2:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <serial3SER_ESPSend>
    2ca6:	cf 5f       	subi	r28, 0xFF	; 255
    2ca8:	f8 01       	movw	r30, r16
    2caa:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2cac:	b0 f3       	brcs	.-20     	; 0x2c9a <main+0x2d8>
				serial3SER_ESPSend(*pChar++);
    2cae:	80 e8       	ldi	r24, 0x80	; 128
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2cb0:	0e 94 af 36 	call	0x6d5e	; 0x6d5e <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2cb4:	8f ef       	ldi	r24, 0xFF	; 255
    2cb6:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2cba:	0e 94 ff 33 	call	0x67fe	; 0x67fe <midi_CheckTxActiveSense>
    2cbe:	0e 94 bf 31 	call	0x637e	; 0x637e <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2cc2:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    2cc6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP) || TIMER_ELAPSED(TIMER_MIDIIN_DISP)) {
    2cca:	8f 3f       	cpi	r24, 0xFF	; 255
    2ccc:	21 f0       	breq	.+8      	; 0x2cd6 <main+0x314>
    2cce:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
    2cd2:	81 11       	cpse	r24, r1
    2cd4:	62 c0       	rjmp	.+196    	; 0x2d9a <main+0x3d8>
    2cd6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
			// only if timer for midi in is not running at all (or just has elapsed)
			if (midiLastInNote != MIDI_NOTE_NONE){
    2cda:	8f 3f       	cpi	r24, 0xFF	; 255
    2cdc:	91 f1       	breq	.+100    	; 0x2d42 <main+0x380>
    2cde:	80 e0       	ldi	r24, 0x00	; 0
				// there is a midi in note to be displayed in status
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2ce0:	32 dc       	rcall	.-1948   	; 0x2546 <lcd_goto>
    2ce2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
				if (midiLastInManual == MANUAL_NONE) {
    2ce6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ce8:	69 f4       	brne	.+26     	; 0x2d04 <main+0x342>
    2cea:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
					// there was no manual assigned to midi in note
					// cc?nnn
					lcd_ChannelOut(midiLastInChannel);
    2cee:	0e 94 9f 39 	call	0x733e	; 0x733e <lcd_ChannelOut>
					lcd_putc('?');
    2cf2:	8f e3       	ldi	r24, 0x3F	; 63
    2cf4:	52 dc       	rcall	.-1884   	; 0x259a <lcd_putc>
    2cf6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
					lcd_noteOut(midiLastInNote);
    2cfa:	0e 94 4e 39 	call	0x729c	; 0x729c <lcd_noteOut>
					lcd_putc(' ');
    2cfe:	80 e2       	ldi	r24, 0x20	; 32
    2d00:	4c dc       	rcall	.-1896   	; 0x259a <lcd_putc>
    2d02:	0c c0       	rjmp	.+24     	; 0x2d1c <main+0x35a>
				} else {
					// midi input to assigned manual
					// nnn>m
					lcd_noteOut(midiLastInNote);
    2d04:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2d08:	0e 94 4e 39 	call	0x729c	; 0x729c <lcd_noteOut>
					lcd_putc(MENU_MIDI_IO_SIGN);
    2d0c:	8e e7       	ldi	r24, 0x7E	; 126
    2d0e:	45 dc       	rcall	.-1910   	; 0x259a <lcd_putc>
    2d10:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
					lcd_ManualOutDec(midiLastInManual);
    2d14:	0e 94 b0 39 	call	0x7360	; 0x7360 <lcd_ManualOutDec>
    2d18:	80 e2       	ldi	r24, 0x20	; 32
					lcd_putc(' ');
    2d1a:	3f dc       	rcall	.-1922   	; 0x259a <lcd_putc>
    2d1c:	8c 2f       	mov	r24, r28
    2d1e:	13 dc       	rcall	.-2010   	; 0x2546 <lcd_goto>
				}
				lcd_goto(oldcursor);
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
				midiLastInNote = MIDI_NOTE_NONE;
    2d26:	9f b7       	in	r25, 0x3f	; 63
    2d28:	f8 94       	cli
				// now start timer 
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d2c:	06 c0       	rjmp	.+12     	; 0x2d3a <main+0x378>
    2d2e:	ef e2       	ldi	r30, 0x2F	; 47
    2d30:	f2 e0       	ldi	r31, 0x02	; 2
    2d32:	83 e2       	ldi	r24, 0x23	; 35
    2d34:	80 87       	std	Z+8, r24	; 0x08
    2d36:	11 86       	std	Z+9, r1	; 0x09
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	81 11       	cpse	r24, r1
    2d3c:	f8 cf       	rjmp	.-16     	; 0x2d2e <main+0x36c>
    2d3e:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d40:	2c c0       	rjmp	.+88     	; 0x2d9a <main+0x3d8>
    __asm__ volatile ("" ::: "memory");
    2d42:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2d46:	8f 3f       	cpi	r24, 0xFF	; 255
    2d48:	d9 f0       	breq	.+54     	; 0x2d80 <main+0x3be>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
				// no midi not but a program change to be displayed
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2d4c:	fc db       	rcall	.-2056   	; 0x2546 <lcd_goto>
    2d4e:	80 e7       	ldi	r24, 0x70	; 112
    2d50:	24 dc       	rcall	.-1976   	; 0x259a <lcd_putc>
				lcd_putc('p');
    2d52:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2d56:	0e 94 06 38 	call	0x700c	; 0x700c <lcd_dec2out>
				lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2d5a:	8e e7       	ldi	r24, 0x7E	; 126
    2d5c:	1e dc       	rcall	.-1988   	; 0x259a <lcd_putc>
				lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2d5e:	8f ef       	ldi	r24, 0xFF	; 255
    2d60:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
				midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2d64:	9f b7       	in	r25, 0x3f	; 63
    2d66:	f8 94       	cli
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d6a:	06 c0       	rjmp	.+12     	; 0x2d78 <main+0x3b6>
    2d6c:	ef e2       	ldi	r30, 0x2F	; 47
    2d6e:	f2 e0       	ldi	r31, 0x02	; 2
    2d70:	83 e2       	ldi	r24, 0x23	; 35
    2d72:	80 87       	std	Z+8, r24	; 0x08
    2d74:	11 86       	std	Z+9, r1	; 0x09
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	81 11       	cpse	r24, r1
    2d7a:	f8 cf       	rjmp	.-16     	; 0x2d6c <main+0x3aa>
    2d7c:	9f bf       	out	0x3f, r25	; 63
    2d7e:	0d c0       	rjmp	.+26     	; 0x2d9a <main+0x3d8>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d80:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2d84:	81 11       	cpse	r24, r1
    2d86:	09 c0       	rjmp	.+18     	; 0x2d9a <main+0x3d8>
    2d88:	de db       	rcall	.-2116   	; 0x2546 <lcd_goto>
				// timer for showing note has elapsed
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2d8a:	86 e0       	ldi	r24, 0x06	; 6
    2d8c:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
				lcd_blank(6);
    2d90:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    2d92:	d9 db       	rcall	.-2126   	; 0x2546 <lcd_goto>
    2d94:	8f ef       	ldi	r24, 0xFF	; 255
    2d96:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
				TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2d9a:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
			}
		}
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2d9e:	8f 3f       	cpi	r24, 0xFF	; 255
    2da0:	21 f0       	breq	.+8      	; 0x2daa <main+0x3e8>
    2da2:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2da6:	81 11       	cpse	r24, r1
    2da8:	5b c0       	rjmp	.+182    	; 0x2e60 <main+0x49e>
    2daa:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    2dae:	8f 3f       	cpi	r24, 0xFF	; 255
    2db0:	f9 f0       	breq	.+62     	; 0x2df0 <main+0x42e>
    2db2:	8f e0       	ldi	r24, 0x0F	; 15
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2db4:	c8 db       	rcall	.-2160   	; 0x2546 <lcd_goto>
    2db6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
				lcd_ManualOutDec(midiLastOutManual);
    2dba:	0e 94 b0 39 	call	0x7360	; 0x7360 <lcd_ManualOutDec>
    2dbe:	8e e7       	ldi	r24, 0x7E	; 126
    2dc0:	ec db       	rcall	.-2088   	; 0x259a <lcd_putc>
				lcd_putc(MENU_MIDI_IO_SIGN);
    2dc2:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
				lcd_noteOut(midiLastOutNote);
    2dc6:	0e 94 4e 39 	call	0x729c	; 0x729c <lcd_noteOut>
    2dca:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    2dcc:	bc db       	rcall	.-2184   	; 0x2546 <lcd_goto>
    2dce:	8f ef       	ldi	r24, 0xFF	; 255
    2dd0:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
				midiLastOutNote = MIDI_NOTE_NONE;
    2dd4:	9f b7       	in	r25, 0x3f	; 63
    2dd6:	f8 94       	cli
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dda:	06 c0       	rjmp	.+12     	; 0x2de8 <main+0x426>
    2ddc:	ef e2       	ldi	r30, 0x2F	; 47
    2dde:	f2 e0       	ldi	r31, 0x02	; 2
    2de0:	88 e2       	ldi	r24, 0x28	; 40
    2de2:	82 87       	std	Z+10, r24	; 0x0a
    2de4:	13 86       	std	Z+11, r1	; 0x0b
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	81 11       	cpse	r24, r1
    2dea:	f8 cf       	rjmp	.-16     	; 0x2ddc <main+0x41a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dec:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2dee:	38 c0       	rjmp	.+112    	; 0x2e60 <main+0x49e>
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    2df0:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
    2df4:	8f 3f       	cpi	r24, 0xFF	; 255
    2df6:	31 f1       	breq	.+76     	; 0x2e44 <main+0x482>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2df8:	8f e0       	ldi	r24, 0x0F	; 15
    2dfa:	a5 db       	rcall	.-2230   	; 0x2546 <lcd_goto>
    2dfc:	82 e5       	ldi	r24, 0x52	; 82
				lcd_putc('R');
    2dfe:	cd db       	rcall	.-2150   	; 0x259a <lcd_putc>
    2e00:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
				lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2e04:	8f 77       	andi	r24, 0x7F	; 127
    2e06:	0e 94 06 38 	call	0x700c	; 0x700c <lcd_dec2out>
    2e0a:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2e0e:	88 23       	and	r24, r24
    2e10:	14 f0       	brlt	.+4      	; 0x2e16 <main+0x454>
    2e12:	88 e0       	ldi	r24, 0x08	; 8
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <main+0x456>
    2e16:	89 e0       	ldi	r24, 0x09	; 9
    2e18:	c0 db       	rcall	.-2176   	; 0x259a <lcd_putc>
    2e1a:	80 e2       	ldi	r24, 0x20	; 32
				lcd_putc(' ');
    2e1c:	be db       	rcall	.-2180   	; 0x259a <lcd_putc>
    2e1e:	8c 2f       	mov	r24, r28
    2e20:	92 db       	rcall	.-2268   	; 0x2546 <lcd_goto>
				lcd_goto(oldcursor);
    2e22:	8f ef       	ldi	r24, 0xFF	; 255
    2e24:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
				midi_RegisterChanged = REGISTER_NONE;
    2e28:	9f b7       	in	r25, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2e2e:	06 c0       	rjmp	.+12     	; 0x2e3c <main+0x47a>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e30:	ef e2       	ldi	r30, 0x2F	; 47
    2e32:	f2 e0       	ldi	r31, 0x02	; 2
    2e34:	88 e2       	ldi	r24, 0x28	; 40
    2e36:	82 87       	std	Z+10, r24	; 0x0a
    2e38:	13 86       	std	Z+11, r1	; 0x0b
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	f8 cf       	rjmp	.-16     	; 0x2e30 <main+0x46e>
    2e40:	9f bf       	out	0x3f, r25	; 63
    2e42:	0e c0       	rjmp	.+28     	; 0x2e60 <main+0x49e>
    2e44:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    2e48:	81 11       	cpse	r24, r1
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2e4a:	0a c0       	rjmp	.+20     	; 0x2e60 <main+0x49e>
    2e4c:	8f e0       	ldi	r24, 0x0F	; 15
    2e4e:	7b db       	rcall	.-2314   	; 0x2546 <lcd_goto>
    2e50:	85 e0       	ldi	r24, 0x05	; 5
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2e52:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
    2e56:	8c 2f       	mov	r24, r28
				lcd_blank(5);
    2e58:	76 db       	rcall	.-2324   	; 0x2546 <lcd_goto>
    2e5a:	8f ef       	ldi	r24, 0xFF	; 255
    2e5c:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
				lcd_goto(oldcursor);
    2e60:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2e64:	8f 3f       	cpi	r24, 0xFF	; 255
    2e66:	09 f0       	breq	.+2      	; 0x2e6a <main+0x4a8>
    2e68:	7e c0       	rjmp	.+252    	; 0x2f66 <main+0x5a4>
			}
		}
		#endif
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2e6a:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2e6e:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2e72:	c0 91 d7 18 	lds	r28, 0x18D7	; 0x8018d7 <lcd_cursorIsOn>
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2e76:	cf 3f       	cpi	r28, 0xFF	; 255
    2e78:	11 f4       	brne	.+4      	; 0x2e7e <main+0x4bc>
			uint8_t oldBlink = lcd_cursorIsOn;
    2e7a:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <lcd_cursoroff>
			if (oldBlink == TRUE) {
    2e7e:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
				lcd_cursoroff();
    2e82:	88 23       	and	r24, r24
			}
			char separator;
			if (*pTime == 0) {
    2e84:	59 f0       	breq	.+22     	; 0x2e9c <main+0x4da>
    2e86:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
    2e8a:	80 fd       	sbrc	r24, 0
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2e8c:	0e c0       	rjmp	.+28     	; 0x2eaa <main+0x4e8>
    2e8e:	0f 2e       	mov	r0, r31
    2e90:	fa e3       	ldi	r31, 0x3A	; 58
    2e92:	ef 2e       	mov	r14, r31
				// when displaying hr:min blink ":"
				separator = ':';
    2e94:	f0 2d       	mov	r31, r0
    2e96:	04 e4       	ldi	r16, 0x44	; 68
    2e98:	12 e0       	ldi	r17, 0x02	; 2
		#endif
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2e9a:	0c c0       	rjmp	.+24     	; 0x2eb4 <main+0x4f2>
    2e9c:	0f 2e       	mov	r0, r31
    2e9e:	fa e3       	ldi	r31, 0x3A	; 58
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2ea0:	ef 2e       	mov	r14, r31
    2ea2:	f0 2d       	mov	r31, r0
    2ea4:	03 e4       	ldi	r16, 0x43	; 67
    2ea6:	12 e0       	ldi	r17, 0x02	; 2
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2ea8:	05 c0       	rjmp	.+10     	; 0x2eb4 <main+0x4f2>
    2eaa:	68 94       	set
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2eac:	ee 24       	eor	r14, r14
    2eae:	e5 f8       	bld	r14, 5
    2eb0:	04 e4       	ldi	r16, 0x44	; 68
		#endif
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2eb2:	12 e0       	ldi	r17, 0x02	; 2
    2eb4:	87 e0       	ldi	r24, 0x07	; 7
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2eb6:	47 db       	rcall	.-2418   	; 0x2546 <lcd_goto>
    2eb8:	f8 01       	movw	r30, r16
    2eba:	80 81       	ld	r24, Z
			lcd_dec2out(*(pTime--));
    2ebc:	0e 94 06 38 	call	0x700c	; 0x700c <lcd_dec2out>
    2ec0:	8e 2d       	mov	r24, r14
			lcd_putc(separator);
    2ec2:	6b db       	rcall	.-2346   	; 0x259a <lcd_putc>
    2ec4:	f8 01       	movw	r30, r16
    2ec6:	31 97       	sbiw	r30, 0x01	; 1
			lcd_dec2out(*pTime);
    2ec8:	80 81       	ld	r24, Z
    2eca:	0e 94 06 38 	call	0x700c	; 0x700c <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2ece:	40 91 4b 16 	lds	r20, 0x164B	; 0x80164b <midiRxOvflCount>
			if (ovflCount > 0){
    2ed2:	44 23       	and	r20, r20
    2ed4:	31 f0       	breq	.+12     	; 0x2ee2 <main+0x520>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2ed6:	50 e0       	ldi	r21, 0x00	; 0
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	83 e0       	ldi	r24, 0x03	; 3
    2edc:	5c dd       	rcall	.-1352   	; 0x2996 <log_putError>
    2ede:	10 92 4b 16 	sts	0x164B, r1	; 0x80164b <midiRxOvflCount>
				midiRxOvflCount = 0;
    2ee2:	40 91 52 16 	lds	r20, 0x1652	; 0x801652 <midiTxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2ee6:	44 23       	and	r20, r20
			if (ovflCount > 0){
    2ee8:	31 f0       	breq	.+12     	; 0x2ef6 <main+0x534>
    2eea:	50 e0       	ldi	r21, 0x00	; 0
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2eec:	61 e0       	ldi	r22, 0x01	; 1
    2eee:	83 e0       	ldi	r24, 0x03	; 3
    2ef0:	52 dd       	rcall	.-1372   	; 0x2996 <log_putError>
    2ef2:	10 92 52 16 	sts	0x1652, r1	; 0x801652 <midiTxOvflCount>
				midiTxOvflCount = 0;
    2ef6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2efa:	84 ff       	sbrs	r24, 4
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <main+0x540>
    2efe:	80 e2       	ldi	r24, 0x20	; 32
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <main+0x542>
    2f02:	89 e0       	ldi	r24, 0x09	; 9
    2f04:	4a db       	rcall	.-2412   	; 0x259a <lcd_putc>
    2f06:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
    2f0a:	8f 3f       	cpi	r24, 0xFF	; 255
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2f0c:	11 f4       	brne	.+4      	; 0x2f12 <main+0x550>
    2f0e:	85 e4       	ldi	r24, 0x45	; 69
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <main+0x552>
    2f12:	80 e2       	ldi	r24, 0x20	; 32
    2f14:	42 db       	rcall	.-2428   	; 0x259a <lcd_putc>
    2f16:	8f 2d       	mov	r24, r15
    2f18:	16 db       	rcall	.-2516   	; 0x2546 <lcd_goto>
    2f1a:	cf 3f       	cpi	r28, 0xFF	; 255
    2f1c:	11 f4       	brne	.+4      	; 0x2f22 <main+0x560>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    2f1e:	0e 94 e5 39 	call	0x73ca	; 0x73ca <lcd_cursosblink>
    2f22:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			if (oldBlink == TRUE) {
    2f26:	8f 3f       	cpi	r24, 0xFF	; 255
				lcd_cursosblink();
    2f28:	69 f4       	brne	.+26     	; 0x2f44 <main+0x582>
    2f2a:	9f b7       	in	r25, 0x3f	; 63
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    2f2c:	f8 94       	cli
    2f2e:	81 e0       	ldi	r24, 0x01	; 1
    2f30:	06 c0       	rjmp	.+12     	; 0x2f3e <main+0x57c>
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2f32:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f34:	f2 e0       	ldi	r31, 0x02	; 2
    2f36:	8d e7       	ldi	r24, 0x7D	; 125
    2f38:	80 87       	std	Z+8, r24	; 0x08
    2f3a:	11 86       	std	Z+9, r1	; 0x09
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	81 11       	cpse	r24, r1
    2f40:	f8 cf       	rjmp	.-16     	; 0x2f32 <main+0x570>
    2f42:	9f bf       	out	0x3f, r25	; 63
    2f44:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2f48:	8f 3f       	cpi	r24, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f4a:	69 f4       	brne	.+26     	; 0x2f66 <main+0x5a4>
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    2f4c:	9f b7       	in	r25, 0x3f	; 63
    2f4e:	f8 94       	cli
    2f50:	81 e0       	ldi	r24, 0x01	; 1
    2f52:	06 c0       	rjmp	.+12     	; 0x2f60 <main+0x59e>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2f54:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f56:	f2 e0       	ldi	r31, 0x02	; 2
    2f58:	8d e7       	ldi	r24, 0x7D	; 125
    2f5a:	82 87       	std	Z+10, r24	; 0x0a
    2f5c:	13 86       	std	Z+11, r1	; 0x0b
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	81 11       	cpse	r24, r1
    2f62:	f8 cf       	rjmp	.-16     	; 0x2f54 <main+0x592>
    2f64:	9f bf       	out	0x3f, r25	; 63
    2f66:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    2f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f6c:	39 f4       	brne	.+14     	; 0x2f7c <main+0x5ba>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    2f6e:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
    2f72:	40 e0       	ldi	r20, 0x00	; 0
    2f74:	50 e0       	ldi	r21, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	84 e0       	ldi	r24, 0x04	; 4
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    2f7a:	0d dd       	rcall	.-1510   	; 0x2996 <log_putError>
    2f7c:	85 b1       	in	r24, 0x05	; 5
    2f7e:	8f 7c       	andi	r24, 0xCF	; 207
    2f80:	80 62       	ori	r24, 0x20	; 32
    2f82:	85 b9       	out	0x05, r24	; 5
    2f84:	90 91 41 16 	lds	r25, 0x1641	; 0x801641 <midiRxInIndex>
		}
		DEBUG_OUT_MIDI
    2f88:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOutIndex>
    2f8c:	98 17       	cp	r25, r24
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    2f8e:	21 f0       	breq	.+8      	; 0x2f98 <main+0x5d6>
    2f90:	0e 94 fc 34 	call	0x69f8	; 0x69f8 <serial1MIDIReadRx>
    2f94:	0e 94 48 32 	call	0x6490	; 0x6490 <midiIn_Process>
    2f98:	0e 94 20 2c 	call	0x5840	; 0x5840 <pipeMsgStatus>
			midiIn_Process(serial1MIDIReadRx());
    2f9c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <main+0x5e0>
    2fa0:	55 cd       	rjmp	.-1366   	; 0x2a4c <main+0x8a>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    2fa2:	0e 94 0b 2c 	call	0x5816	; 0x5816 <pipeMsgGet>
    2fa6:	0e 94 0d 33 	call	0x661a	; 0x661a <midiKeyPress_Process>
    2faa:	50 cd       	rjmp	.-1376   	; 0x2a4c <main+0x8a>

00002fac <menu_enterWriteModule>:
			midiKeyPress_Process(pipeMsgGet());
    2fac:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
    2fb0:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
    2fb4:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    2fb8:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <menu_enterWriteModule+0x1e>
    2fc6:	88 0f       	add	r24, r24
    2fc8:	99 1f       	adc	r25, r25
    2fca:	0a 94       	dec	r0
    2fcc:	e2 f7       	brpl	.-8      	; 0x2fc6 <menu_enterWriteModule+0x1a>
    2fce:	48 2f       	mov	r20, r24
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	e1 e4       	ldi	r30, 0x41	; 65
    2fd4:	f3 e0       	ldi	r31, 0x03	; 3
    2fd6:	22 c0       	rjmp	.+68     	; 0x301c <menu_enterWriteModule+0x70>
    2fd8:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    2fdc:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    2fe0:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    2fe4:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	aa 1f       	adc	r26, r26
    2fee:	bb 1f       	adc	r27, r27
    2ff0:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    2ff4:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    2ff8:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    2ffc:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    3000:	21 81       	ldd	r18, Z+1	; 0x01
    3002:	24 23       	and	r18, r20
    3004:	49 f0       	breq	.+18     	; 0x3018 <menu_enterWriteModule+0x6c>
    3006:	81 60       	ori	r24, 0x01	; 1
    3008:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    300c:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    3010:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    3014:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    3018:	38 97       	sbiw	r30, 0x08	; 8
    301a:	3f 5f       	subi	r19, 0xFF	; 255
    301c:	30 32       	cpi	r19, 0x20	; 32
    301e:	e0 f2       	brcs	.-72     	; 0x2fd8 <menu_enterWriteModule+0x2c>
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	08 95       	ret

00003024 <menu_exitWriteModule>:
    3024:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    3028:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    302c:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    3030:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    3034:	85 30       	cpi	r24, 0x05	; 5
    3036:	09 f5       	brne	.+66     	; 0x307a <menu_exitWriteModule+0x56>
    3038:	a1 e0       	ldi	r26, 0x01	; 1
    303a:	b0 e0       	ldi	r27, 0x00	; 0
    303c:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    3040:	02 c0       	rjmp	.+4      	; 0x3046 <menu_exitWriteModule+0x22>
    3042:	aa 0f       	add	r26, r26
    3044:	bb 1f       	adc	r27, r27
    3046:	0a 94       	dec	r0
    3048:	e2 f7       	brpl	.-8      	; 0x3042 <menu_exitWriteModule+0x1e>
    304a:	3a 2f       	mov	r19, r26
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	e1 e4       	ldi	r30, 0x41	; 65
    3050:	f3 e0       	ldi	r31, 0x03	; 3
    3052:	11 c0       	rjmp	.+34     	; 0x3076 <menu_exitWriteModule+0x52>
    3054:	77 23       	and	r23, r23
    3056:	24 f4       	brge	.+8      	; 0x3060 <menu_exitWriteModule+0x3c>
    3058:	81 81       	ldd	r24, Z+1	; 0x01
    305a:	83 2b       	or	r24, r19
    305c:	81 83       	std	Z+1, r24	; 0x01
    305e:	05 c0       	rjmp	.+10     	; 0x306a <menu_exitWriteModule+0x46>
    3060:	21 81       	ldd	r18, Z+1	; 0x01
    3062:	8a 2f       	mov	r24, r26
    3064:	80 95       	com	r24
    3066:	82 23       	and	r24, r18
    3068:	81 83       	std	Z+1, r24	; 0x01
    306a:	44 0f       	add	r20, r20
    306c:	55 1f       	adc	r21, r21
    306e:	66 1f       	adc	r22, r22
    3070:	77 1f       	adc	r23, r23
    3072:	38 97       	sbiw	r30, 0x08	; 8
    3074:	9f 5f       	subi	r25, 0xFF	; 255
    3076:	90 32       	cpi	r25, 0x20	; 32
    3078:	68 f3       	brcs	.-38     	; 0x3054 <menu_exitWriteModule+0x30>
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	08 95       	ret

0000307e <menuOnEnterModSel>:
    307e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3082:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3086:	3e 96       	adiw	r30, 0x0e	; 14
    3088:	85 91       	lpm	r24, Z+
    308a:	95 91       	lpm	r25, Z+
    308c:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	08 95       	ret

00003094 <menuOnEnterMidiInCh>:
    3094:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3098:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    309c:	3e 96       	adiw	r30, 0x0e	; 14
    309e:	85 91       	lpm	r24, Z+
    30a0:	95 91       	lpm	r25, Z+
    30a2:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	08 95       	ret

000030aa <menuOnEnterMidiInSec>:
    30aa:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    30ae:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    30b2:	3e 96       	adiw	r30, 0x0e	; 14
    30b4:	25 91       	lpm	r18, Z+
    30b6:	35 91       	lpm	r19, Z+
    30b8:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    30bc:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    30c0:	8f 70       	andi	r24, 0x0F	; 15
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	23 70       	andi	r18, 0x03	; 3
    30c6:	88 0f       	add	r24, r24
    30c8:	99 1f       	adc	r25, r25
    30ca:	88 0f       	add	r24, r24
    30cc:	99 1f       	adc	r25, r25
    30ce:	82 0f       	add	r24, r18
    30d0:	91 1d       	adc	r25, r1
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    30de:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	08 95       	ret

000030e6 <menuOnEnterModManual>:
    30e6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    30ea:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    30ee:	3e 96       	adiw	r30, 0x0e	; 14
    30f0:	85 91       	lpm	r24, Z+
    30f2:	95 91       	lpm	r25, Z+
    30f4:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    30f8:	80 e0       	ldi	r24, 0x00	; 0
    30fa:	08 95       	ret

000030fc <menuOnEnterModSec>:
    30fc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3100:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3104:	3e 96       	adiw	r30, 0x0e	; 14
    3106:	85 91       	lpm	r24, Z+
    3108:	95 91       	lpm	r25, Z+
    310a:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    310e:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    3112:	2f 70       	andi	r18, 0x0F	; 15
    3114:	30 e0       	ldi	r19, 0x00	; 0
    3116:	83 70       	andi	r24, 0x03	; 3
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	a9 01       	movw	r20, r18
    311c:	44 0f       	add	r20, r20
    311e:	55 1f       	adc	r21, r21
    3120:	24 0f       	add	r18, r20
    3122:	35 1f       	adc	r19, r21
    3124:	22 0f       	add	r18, r18
    3126:	33 1f       	adc	r19, r19
    3128:	22 0f       	add	r18, r18
    312a:	33 1f       	adc	r19, r19
    312c:	ac 01       	movw	r20, r24
    312e:	44 0f       	add	r20, r20
    3130:	55 1f       	adc	r21, r21
    3132:	84 0f       	add	r24, r20
    3134:	95 1f       	adc	r25, r21
    3136:	82 0f       	add	r24, r18
    3138:	93 1f       	adc	r25, r19
    313a:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    313e:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	08 95       	ret

00003146 <menuOnEnterModSecReg>:
    3146:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    314a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    314e:	3e 96       	adiw	r30, 0x0e	; 14
    3150:	85 91       	lpm	r24, Z+
    3152:	95 91       	lpm	r25, Z+
    3154:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    3158:	87 70       	andi	r24, 0x07	; 7
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	9c 01       	movw	r18, r24
    315e:	22 0f       	add	r18, r18
    3160:	33 1f       	adc	r19, r19
    3162:	82 0f       	add	r24, r18
    3164:	93 1f       	adc	r25, r19
    3166:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    316a:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	08 95       	ret

00003172 <menuOnEnterKey>:
    3172:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3176:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    317a:	3e 96       	adiw	r30, 0x0e	; 14
    317c:	85 91       	lpm	r24, Z+
    317e:	95 91       	lpm	r25, Z+
    3180:	84 30       	cpi	r24, 0x04	; 4
    3182:	60 f4       	brcc	.+24     	; 0x319c <menuOnEnterKey+0x2a>
    3184:	fc 01       	movw	r30, r24
    3186:	ff 27       	eor	r31, r31
    3188:	ee 0f       	add	r30, r30
    318a:	ff 1f       	adc	r31, r31
    318c:	e6 54       	subi	r30, 0x46	; 70
    318e:	fa 4f       	sbci	r31, 0xFA	; 250
    3190:	80 81       	ld	r24, Z
    3192:	91 81       	ldd	r25, Z+1	; 0x01
    3194:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    3198:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	08 95       	ret

000031a0 <menuOnExitMidiThrough>:
    31a0:	0e 94 29 0c 	call	0x1852	; 0x1852 <eeprom_UpdateMidiThrough>
    31a4:	80 e0       	ldi	r24, 0x00	; 0
    31a6:	08 95       	ret

000031a8 <menuOnExitRegisterEdit>:
    31a8:	1f 93       	push	r17
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	86 30       	cpi	r24, 0x06	; 6
    31b0:	f1 f0       	breq	.+60     	; 0x31ee <menuOnExitRegisterEdit+0x46>
    31b2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31b6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31ba:	3e 96       	adiw	r30, 0x0e	; 14
    31bc:	05 90       	lpm	r0, Z+
    31be:	f4 91       	lpm	r31, Z
    31c0:	e0 2d       	mov	r30, r0
    31c2:	cf 01       	movw	r24, r30
    31c4:	8d 56       	subi	r24, 0x6D	; 109
    31c6:	95 40       	sbci	r25, 0x05	; 5
    31c8:	88 0f       	add	r24, r24
    31ca:	88 0f       	add	r24, r24
    31cc:	88 0f       	add	r24, r24
    31ce:	d0 81       	ld	r29, Z
    31d0:	c0 e0       	ldi	r28, 0x00	; 0
    31d2:	0b c0       	rjmp	.+22     	; 0x31ea <menuOnExitRegisterEdit+0x42>
    31d4:	11 e0       	ldi	r17, 0x01	; 1
    31d6:	18 0f       	add	r17, r24
    31d8:	6d 2f       	mov	r22, r29
    31da:	66 1f       	adc	r22, r22
    31dc:	66 27       	eor	r22, r22
    31de:	66 1f       	adc	r22, r22
    31e0:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <register_onOff>
    31e4:	dd 0f       	add	r29, r29
    31e6:	cf 5f       	subi	r28, 0xFF	; 255
    31e8:	81 2f       	mov	r24, r17
    31ea:	c8 30       	cpi	r28, 0x08	; 8
    31ec:	98 f3       	brcs	.-26     	; 0x31d4 <menuOnExitRegisterEdit+0x2c>
    31ee:	80 e0       	ldi	r24, 0x00	; 0
    31f0:	df 91       	pop	r29
    31f2:	cf 91       	pop	r28
    31f4:	1f 91       	pop	r17
    31f6:	08 95       	ret

000031f8 <softKeyRegOff>:
    31f8:	81 11       	cpse	r24, r1
    31fa:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <midi_resetRegisters>
    31fe:	80 e0       	ldi	r24, 0x00	; 0
    3200:	08 95       	ret

00003202 <menuOnExitCoupler>:
    3202:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3206:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    320a:	3e 96       	adiw	r30, 0x0e	; 14
    320c:	85 91       	lpm	r24, Z+
    320e:	95 91       	lpm	r25, Z+
    3210:	8f 50       	subi	r24, 0x0F	; 15
    3212:	98 40       	sbci	r25, 0x08	; 8
    3214:	fc 01       	movw	r30, r24
    3216:	ff 27       	eor	r31, r31
    3218:	e1 5f       	subi	r30, 0xF1	; 241
    321a:	f7 4f       	sbci	r31, 0xF7	; 247
    321c:	20 81       	ld	r18, Z
    321e:	21 11       	cpse	r18, r1
    3220:	0e 94 36 2c 	call	0x586c	; 0x586c <set_Coupler>
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	08 95       	ret

00003228 <menuOnExitSaveProgram>:
    3228:	86 30       	cpi	r24, 0x06	; 6
    322a:	39 f0       	breq	.+14     	; 0x323a <menuOnExitSaveProgram+0x12>
    322c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3230:	80 34       	cpi	r24, 0x40	; 64
    3232:	18 f4       	brcc	.+6      	; 0x323a <menuOnExitSaveProgram+0x12>
    3234:	6f ef       	ldi	r22, 0xFF	; 255
    3236:	0e 94 b6 2e 	call	0x5d6c	; 0x5d6c <register_toProgram>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	08 95       	ret

0000323e <menuOnExitKeys>:
    323e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <eeprom_UpdateSoftkeys>
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	08 95       	ret

00003246 <menu_readModule>:
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    3256:	02 c0       	rjmp	.+4      	; 0x325c <menu_readModule+0x16>
    3258:	88 0f       	add	r24, r24
    325a:	99 1f       	adc	r25, r25
    325c:	0a 94       	dec	r0
    325e:	e2 f7       	brpl	.-8      	; 0x3258 <menu_readModule+0x12>
    3260:	28 2f       	mov	r18, r24
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	e1 e4       	ldi	r30, 0x41	; 65
    3266:	f3 e0       	ldi	r31, 0x03	; 3
    3268:	c1 2c       	mov	r12, r1
    326a:	d1 2c       	mov	r13, r1
    326c:	76 01       	movw	r14, r12
    326e:	0b c0       	rjmp	.+22     	; 0x3286 <menu_readModule+0x40>
    3270:	cc 0c       	add	r12, r12
    3272:	dd 1c       	adc	r13, r13
    3274:	ee 1c       	adc	r14, r14
    3276:	ff 1c       	adc	r15, r15
    3278:	86 81       	ldd	r24, Z+6	; 0x06
    327a:	82 23       	and	r24, r18
    327c:	11 f0       	breq	.+4      	; 0x3282 <menu_readModule+0x3c>
    327e:	68 94       	set
    3280:	c0 f8       	bld	r12, 0
    3282:	38 97       	sbiw	r30, 0x08	; 8
    3284:	9f 5f       	subi	r25, 0xFF	; 255
    3286:	90 32       	cpi	r25, 0x20	; 32
    3288:	98 f3       	brcs	.-26     	; 0x3270 <menu_readModule+0x2a>
    328a:	8e e1       	ldi	r24, 0x1E	; 30
    328c:	5c d9       	rcall	.-3400   	; 0x2546 <lcd_goto>
    328e:	c0 92 d9 18 	sts	0x18D9, r12	; 0x8018d9 <editLong>
    3292:	d0 92 da 18 	sts	0x18DA, r13	; 0x8018da <editLong+0x1>
    3296:	e0 92 db 18 	sts	0x18DB, r14	; 0x8018db <editLong+0x2>
    329a:	f0 92 dc 18 	sts	0x18DC, r15	; 0x8018dc <editLong+0x3>
    329e:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <lcd_longout>
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	ff 90       	pop	r15
    32a6:	ef 90       	pop	r14
    32a8:	df 90       	pop	r13
    32aa:	cf 90       	pop	r12
    32ac:	08 95       	ret

000032ae <menu_testModule>:
    32ae:	8e e1       	ldi	r24, 0x1E	; 30
    32b0:	4a d9       	rcall	.-3436   	; 0x2546 <lcd_goto>
    32b2:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    32b6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <test_PipeModule>
    32ba:	60 93 d9 18 	sts	0x18D9, r22	; 0x8018d9 <editLong>
    32be:	70 93 da 18 	sts	0x18DA, r23	; 0x8018da <editLong+0x1>
    32c2:	80 93 db 18 	sts	0x18DB, r24	; 0x8018db <editLong+0x2>
    32c6:	90 93 dc 18 	sts	0x18DC, r25	; 0x8018dc <editLong+0x3>
    32ca:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <lcd_longout>
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	08 95       	ret

000032d2 <menuOnEnterTune>:
    32d2:	cf 93       	push	r28
    32d4:	8f 3f       	cpi	r24, 0xFF	; 255
    32d6:	09 f0       	breq	.+2      	; 0x32da <menuOnEnterTune+0x8>
    32d8:	77 c0       	rjmp	.+238    	; 0x33c8 <menuOnEnterTune+0xf6>
    32da:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.2952>
    32de:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.2953>
    32e2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    32e6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    32ea:	3e 96       	adiw	r30, 0x0e	; 14
    32ec:	85 91       	lpm	r24, Z+
    32ee:	95 91       	lpm	r25, Z+
    32f0:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    32f4:	84 30       	cpi	r24, 0x04	; 4
    32f6:	10 f0       	brcs	.+4      	; 0x32fc <menuOnEnterTune+0x2a>
    32f8:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	39 c0       	rjmp	.+114    	; 0x3372 <menuOnEnterTune+0xa0>
    3300:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	e2 2f       	mov	r30, r18
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	df 01       	movw	r26, r30
    330c:	aa 0f       	add	r26, r26
    330e:	bb 1f       	adc	r27, r27
    3310:	ad 01       	movw	r20, r26
    3312:	4e 0f       	add	r20, r30
    3314:	5f 1f       	adc	r21, r31
    3316:	dc 01       	movw	r26, r24
    3318:	aa 0f       	add	r26, r26
    331a:	bb 1f       	adc	r27, r27
    331c:	a8 0f       	add	r26, r24
    331e:	b9 1f       	adc	r27, r25
    3320:	aa 0f       	add	r26, r26
    3322:	bb 1f       	adc	r27, r27
    3324:	aa 0f       	add	r26, r26
    3326:	bb 1f       	adc	r27, r27
    3328:	a4 0f       	add	r26, r20
    332a:	b5 1f       	adc	r27, r21
    332c:	ae 5c       	subi	r26, 0xCE	; 206
    332e:	b6 4f       	sbci	r27, 0xF6	; 246
    3330:	3c 91       	ld	r19, X
    3332:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.2952>
    3336:	34 17       	cp	r19, r20
    3338:	10 f4       	brcc	.+4      	; 0x333e <menuOnEnterTune+0x6c>
    333a:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.2952>
    333e:	af 01       	movw	r20, r30
    3340:	44 0f       	add	r20, r20
    3342:	55 1f       	adc	r21, r21
    3344:	e4 0f       	add	r30, r20
    3346:	f5 1f       	adc	r31, r21
    3348:	ac 01       	movw	r20, r24
    334a:	44 0f       	add	r20, r20
    334c:	55 1f       	adc	r21, r21
    334e:	84 0f       	add	r24, r20
    3350:	95 1f       	adc	r25, r21
    3352:	88 0f       	add	r24, r24
    3354:	99 1f       	adc	r25, r25
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	e8 0f       	add	r30, r24
    335c:	f9 1f       	adc	r31, r25
    335e:	ee 5c       	subi	r30, 0xCE	; 206
    3360:	f6 4f       	sbci	r31, 0xF6	; 246
    3362:	81 81       	ldd	r24, Z+1	; 0x01
    3364:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.2953>
    3368:	98 17       	cp	r25, r24
    336a:	10 f4       	brcc	.+4      	; 0x3370 <menuOnEnterTune+0x9e>
    336c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.2953>
    3370:	2f 5f       	subi	r18, 0xFF	; 255
    3372:	24 30       	cpi	r18, 0x04	; 4
    3374:	28 f2       	brcs	.-118    	; 0x3300 <menuOnEnterTune+0x2e>
    3376:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2952>
    337a:	88 23       	and	r24, r24
    337c:	4c f4       	brge	.+18     	; 0x3390 <menuOnEnterTune+0xbe>
    337e:	8e e1       	ldi	r24, 0x1E	; 30
    3380:	e2 d8       	rcall	.-3644   	; 0x2546 <lcd_goto>
    3382:	80 ea       	ldi	r24, 0xA0	; 160
    3384:	93 e0       	ldi	r25, 0x03	; 3
    3386:	51 d9       	rcall	.-3422   	; 0x262a <lcd_puts_P>
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    338e:	04 c0       	rjmp	.+8      	; 0x3398 <menuOnEnterTune+0xc6>
    3390:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    3394:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2954>
    3398:	6f ed       	ldi	r22, 0xDF	; 223
    339a:	71 e1       	ldi	r23, 0x11	; 17
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    33a2:	6e ee       	ldi	r22, 0xEE	; 238
    33a4:	71 e1       	ldi	r23, 0x11	; 17
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    33ac:	63 ef       	ldi	r22, 0xF3	; 243
    33ae:	71 e1       	ldi	r23, 0x11	; 17
    33b0:	82 e0       	ldi	r24, 0x02	; 2
    33b2:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    33b6:	65 ef       	ldi	r22, 0xF5	; 245
    33b8:	71 e1       	ldi	r23, 0x11	; 17
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    33c0:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
    33c4:	cf ef       	ldi	r28, 0xFF	; 255
    33c6:	71 c0       	rjmp	.+226    	; 0x34aa <menuOnEnterTune+0x1d8>
    33c8:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    33cc:	6f 3f       	cpi	r22, 0xFF	; 255
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <menuOnEnterTune+0x100>
    33d0:	61 c0       	rjmp	.+194    	; 0x3494 <menuOnEnterTune+0x1c2>
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	d9 f4       	brne	.+54     	; 0x340c <menuOnEnterTune+0x13a>
    33d6:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.2953>
    33da:	68 17       	cp	r22, r24
    33dc:	08 f0       	brcs	.+2      	; 0x33e0 <menuOnEnterTune+0x10e>
    33de:	5c c0       	rjmp	.+184    	; 0x3498 <menuOnEnterTune+0x1c6>
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    33e6:	0e 94 bb 30 	call	0x6176	; 0x6176 <manual_NoteOnOff>
    33ea:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    33ee:	6f 5f       	subi	r22, 0xFF	; 255
    33f0:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    33f4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    33f8:	81 30       	cpi	r24, 0x01	; 1
    33fa:	09 f0       	breq	.+2      	; 0x33fe <menuOnEnterTune+0x12c>
    33fc:	4f c0       	rjmp	.+158    	; 0x349c <menuOnEnterTune+0x1ca>
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3404:	0e 94 bb 30 	call	0x6176	; 0x6176 <manual_NoteOnOff>
    3408:	cf ef       	ldi	r28, 0xFF	; 255
    340a:	4f c0       	rjmp	.+158    	; 0x34aa <menuOnEnterTune+0x1d8>
    340c:	84 30       	cpi	r24, 0x04	; 4
    340e:	d1 f4       	brne	.+52     	; 0x3444 <menuOnEnterTune+0x172>
    3410:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2952>
    3414:	86 17       	cp	r24, r22
    3416:	08 f0       	brcs	.+2      	; 0x341a <menuOnEnterTune+0x148>
    3418:	43 c0       	rjmp	.+134    	; 0x34a0 <menuOnEnterTune+0x1ce>
    341a:	40 e0       	ldi	r20, 0x00	; 0
    341c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3420:	0e 94 bb 30 	call	0x6176	; 0x6176 <manual_NoteOnOff>
    3424:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3428:	61 50       	subi	r22, 0x01	; 1
    342a:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    342e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	b9 f5       	brne	.+110    	; 0x34a4 <menuOnEnterTune+0x1d2>
    3436:	41 e0       	ldi	r20, 0x01	; 1
    3438:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    343c:	0e 94 bb 30 	call	0x6176	; 0x6176 <manual_NoteOnOff>
    3440:	cf ef       	ldi	r28, 0xFF	; 255
    3442:	33 c0       	rjmp	.+102    	; 0x34aa <menuOnEnterTune+0x1d8>
    3444:	83 30       	cpi	r24, 0x03	; 3
    3446:	91 f4       	brne	.+36     	; 0x346c <menuOnEnterTune+0x19a>
    3448:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    344c:	81 11       	cpse	r24, r1
    344e:	04 c0       	rjmp	.+8      	; 0x3458 <menuOnEnterTune+0x186>
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.2954>
    3456:	02 c0       	rjmp	.+4      	; 0x345c <menuOnEnterTune+0x18a>
    3458:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2954>
    345c:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.2954>
    3460:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3464:	0e 94 bb 30 	call	0x6176	; 0x6176 <manual_NoteOnOff>
    3468:	cf ef       	ldi	r28, 0xFF	; 255
    346a:	1f c0       	rjmp	.+62     	; 0x34aa <menuOnEnterTune+0x1d8>
    346c:	82 30       	cpi	r24, 0x02	; 2
    346e:	11 f0       	breq	.+4      	; 0x3474 <menuOnEnterTune+0x1a2>
    3470:	86 30       	cpi	r24, 0x06	; 6
    3472:	39 f4       	brne	.+14     	; 0x3482 <menuOnEnterTune+0x1b0>
    3474:	40 e0       	ldi	r20, 0x00	; 0
    3476:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    347a:	0e 94 bb 30 	call	0x6176	; 0x6176 <manual_NoteOnOff>
    347e:	c0 e0       	ldi	r28, 0x00	; 0
    3480:	14 c0       	rjmp	.+40     	; 0x34aa <menuOnEnterTune+0x1d8>
    3482:	85 30       	cpi	r24, 0x05	; 5
    3484:	89 f4       	brne	.+34     	; 0x34a8 <menuOnEnterTune+0x1d6>
    3486:	40 e0       	ldi	r20, 0x00	; 0
    3488:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    348c:	0e 94 bb 30 	call	0x6176	; 0x6176 <manual_NoteOnOff>
    3490:	c0 e0       	ldi	r28, 0x00	; 0
    3492:	0b c0       	rjmp	.+22     	; 0x34aa <menuOnEnterTune+0x1d8>
    3494:	c0 e0       	ldi	r28, 0x00	; 0
    3496:	09 c0       	rjmp	.+18     	; 0x34aa <menuOnEnterTune+0x1d8>
    3498:	cf ef       	ldi	r28, 0xFF	; 255
    349a:	07 c0       	rjmp	.+14     	; 0x34aa <menuOnEnterTune+0x1d8>
    349c:	cf ef       	ldi	r28, 0xFF	; 255
    349e:	05 c0       	rjmp	.+10     	; 0x34aa <menuOnEnterTune+0x1d8>
    34a0:	cf ef       	ldi	r28, 0xFF	; 255
    34a2:	03 c0       	rjmp	.+6      	; 0x34aa <menuOnEnterTune+0x1d8>
    34a4:	cf ef       	ldi	r28, 0xFF	; 255
    34a6:	01 c0       	rjmp	.+2      	; 0x34aa <menuOnEnterTune+0x1d8>
    34a8:	cf ef       	ldi	r28, 0xFF	; 255
    34aa:	cf 3f       	cpi	r28, 0xFF	; 255
    34ac:	59 f5       	brne	.+86     	; 0x3504 <menuOnEnterTune+0x232>
    34ae:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    34b2:	8f 3f       	cpi	r24, 0xFF	; 255
    34b4:	29 f1       	breq	.+74     	; 0x3500 <menuOnEnterTune+0x22e>
    34b6:	8e e1       	ldi	r24, 0x1E	; 30
    34b8:	46 d8       	rcall	.-3956   	; 0x2546 <lcd_goto>
    34ba:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    34be:	0e 94 4e 39 	call	0x729c	; 0x729c <lcd_noteOut>
    34c2:	80 e2       	ldi	r24, 0x20	; 32
    34c4:	6a d8       	rcall	.-3884   	; 0x259a <lcd_putc>
    34c6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    34ca:	81 11       	cpse	r24, r1
    34cc:	07 c0       	rjmp	.+14     	; 0x34dc <menuOnEnterTune+0x20a>
    34ce:	81 e6       	ldi	r24, 0x61	; 97
    34d0:	64 d8       	rcall	.-3896   	; 0x259a <lcd_putc>
    34d2:	85 e7       	ldi	r24, 0x75	; 117
    34d4:	62 d8       	rcall	.-3900   	; 0x259a <lcd_putc>
    34d6:	83 e7       	ldi	r24, 0x73	; 115
    34d8:	60 d8       	rcall	.-3904   	; 0x259a <lcd_putc>
    34da:	06 c0       	rjmp	.+12     	; 0x34e8 <menuOnEnterTune+0x216>
    34dc:	85 e6       	ldi	r24, 0x65	; 101
    34de:	5d d8       	rcall	.-3910   	; 0x259a <lcd_putc>
    34e0:	89 e6       	ldi	r24, 0x69	; 105
    34e2:	5b d8       	rcall	.-3914   	; 0x259a <lcd_putc>
    34e4:	8e e6       	ldi	r24, 0x6E	; 110
    34e6:	59 d8       	rcall	.-3918   	; 0x259a <lcd_putc>
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    34ee:	81 11       	cpse	r24, r1
    34f0:	01 c0       	rjmp	.+2      	; 0x34f4 <menuOnEnterTune+0x222>
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <keylabel_statcheck>
    34fa:	81 11       	cpse	r24, r1
    34fc:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
    3500:	8e e1       	ldi	r24, 0x1E	; 30
    3502:	21 d8       	rcall	.-4030   	; 0x2546 <lcd_goto>
    3504:	8c 2f       	mov	r24, r28
    3506:	cf 91       	pop	r28
    3508:	08 95       	ret

0000350a <menuOnExitMidiActiveSense>:
    350a:	0e 94 af 0b 	call	0x175e	; 0x175e <eeprom_UpdateMidiOutMap>
    350e:	80 e0       	ldi	r24, 0x00	; 0
    3510:	08 95       	ret

00003512 <menuOnExitMidiOut>:
    3512:	0e 94 af 0b 	call	0x175e	; 0x175e <eeprom_UpdateMidiOutMap>
    3516:	80 e0       	ldi	r24, 0x00	; 0
    3518:	08 95       	ret

0000351a <menuOnExitMidiIn>:
    351a:	0e 94 8d 0b 	call	0x171a	; 0x171a <eeprom_UpdateMidiInMap>
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	08 95       	ret

00003522 <menuOnExitManual>:
    3522:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <eeprom_UpdateManualMap>
    3526:	0e 94 8e 2c 	call	0x591c	; 0x591c <registers_CalcCount>
    352a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <eeprom_UpdateReg>
    352e:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <Midi_updateManualRange>
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	08 95       	ret

00003536 <menuOnExitModules>:
    3536:	0e 94 df 0b 	call	0x17be	; 0x17be <eeprom_UpdateModules>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	08 95       	ret

0000353e <menuOnEnterUSBprotokoll>:
    353e:	cf 93       	push	r28
    3540:	83 e8       	ldi	r24, 0x83	; 131
    3542:	93 e0       	ldi	r25, 0x03	; 3
    3544:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3548:	8b d8       	rcall	.-3818   	; 0x2660 <log_count>
    354a:	81 11       	cpse	r24, r1
    354c:	17 c0       	rjmp	.+46     	; 0x357c <menuOnEnterUSBprotokoll+0x3e>
    354e:	89 e8       	ldi	r24, 0x89	; 137
    3550:	93 e0       	ldi	r25, 0x03	; 3
    3552:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3556:	16 c0       	rjmp	.+44     	; 0x3584 <menuOnEnterUSBprotokoll+0x46>
    3558:	6f ef       	ldi	r22, 0xFF	; 255
    355a:	8c 2f       	mov	r24, r28
    355c:	22 da       	rcall	.-3004   	; 0x29a2 <log_getShortTextFromIndex>
    355e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    3562:	87 e1       	ldi	r24, 0x17	; 23
    3564:	92 e1       	ldi	r25, 0x12	; 18
    3566:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    356a:	8c 2f       	mov	r24, r28
    356c:	c0 d8       	rcall	.-3712   	; 0x26ee <log_getErrorText>
    356e:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3572:	87 e1       	ldi	r24, 0x17	; 23
    3574:	92 e1       	ldi	r25, 0x12	; 18
    3576:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    357a:	8c 2f       	mov	r24, r28
    357c:	cf ef       	ldi	r28, 0xFF	; 255
    357e:	c8 0f       	add	r28, r24
    3580:	81 11       	cpse	r24, r1
    3582:	ea cf       	rjmp	.-44     	; 0x3558 <menuOnEnterUSBprotokoll+0x1a>
    3584:	80 e0       	ldi	r24, 0x00	; 0
    3586:	cf 91       	pop	r28
    3588:	08 95       	ret

0000358a <menuOnExitUSBactive>:
    358a:	0e 94 09 0c 	call	0x1812	; 0x1812 <eeprom_UpdateUSB>
    358e:	80 91 4e 16 	lds	r24, 0x164E	; 0x80164e <serUSB_Active>
    3592:	8f 3f       	cpi	r24, 0xFF	; 255
    3594:	61 f4       	brne	.+24     	; 0x35ae <menuOnExitUSBactive+0x24>
    3596:	8a e6       	ldi	r24, 0x6A	; 106
    3598:	93 e0       	ldi	r25, 0x03	; 3
    359a:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    359e:	87 eb       	ldi	r24, 0xB7	; 183
    35a0:	91 e1       	ldi	r25, 0x11	; 17
    35a2:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    35a6:	87 e1       	ldi	r24, 0x17	; 23
    35a8:	92 e1       	ldi	r25, 0x12	; 18
    35aa:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	08 95       	ret

000035b2 <menuOnEnterUSBsendHW>:
    35b2:	9f 92       	push	r9
    35b4:	af 92       	push	r10
    35b6:	bf 92       	push	r11
    35b8:	cf 92       	push	r12
    35ba:	df 92       	push	r13
    35bc:	ef 92       	push	r14
    35be:	ff 92       	push	r15
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	cf 93       	push	r28
    35c6:	df 93       	push	r29
    35c8:	81 e5       	ldi	r24, 0x51	; 81
    35ca:	93 e0       	ldi	r25, 0x03	; 3
    35cc:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    35d0:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    35d4:	8e e3       	ldi	r24, 0x3E	; 62
    35d6:	93 e0       	ldi	r25, 0x03	; 3
    35d8:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    35dc:	c5 e5       	ldi	r28, 0x55	; 85
    35de:	d3 e0       	ldi	r29, 0x03	; 3
    35e0:	6d ed       	ldi	r22, 0xDD	; 221
    35e2:	78 e1       	ldi	r23, 0x18	; 24
    35e4:	88 81       	ld	r24, Y
    35e6:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    35ea:	22 e7       	ldi	r18, 0x72	; 114
    35ec:	fc 01       	movw	r30, r24
    35ee:	20 83       	st	Z, r18
    35f0:	bc 01       	movw	r22, r24
    35f2:	6e 5f       	subi	r22, 0xFE	; 254
    35f4:	7f 4f       	sbci	r23, 0xFF	; 255
    35f6:	20 e2       	ldi	r18, 0x20	; 32
    35f8:	21 83       	std	Z+1, r18	; 0x01
    35fa:	89 81       	ldd	r24, Y+1	; 0x01
    35fc:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    3600:	27 e7       	ldi	r18, 0x77	; 119
    3602:	fc 01       	movw	r30, r24
    3604:	20 83       	st	Z, r18
    3606:	8d ed       	ldi	r24, 0xDD	; 221
    3608:	98 e1       	ldi	r25, 0x18	; 24
    360a:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    360e:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3612:	8c e2       	ldi	r24, 0x2C	; 44
    3614:	93 e0       	ldi	r25, 0x03	; 3
    3616:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    361a:	6d ed       	ldi	r22, 0xDD	; 221
    361c:	78 e1       	ldi	r23, 0x18	; 24
    361e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    3622:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    3626:	8d ed       	ldi	r24, 0xDD	; 221
    3628:	98 e1       	ldi	r25, 0x18	; 24
    362a:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    362e:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3632:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3636:	e1 2c       	mov	r14, r1
    3638:	d1 c0       	rjmp	.+418    	; 0x37dc <menuOnEnterUSBsendHW+0x22a>
    363a:	83 e2       	ldi	r24, 0x23	; 35
    363c:	93 e0       	ldi	r25, 0x03	; 3
    363e:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3642:	6d ed       	ldi	r22, 0xDD	; 221
    3644:	78 e1       	ldi	r23, 0x18	; 24
    3646:	8e 2d       	mov	r24, r14
    3648:	0e 94 17 39 	call	0x722e	; 0x722e <putChar_Manual>
    364c:	8d ed       	ldi	r24, 0xDD	; 221
    364e:	98 e1       	ldi	r25, 0x18	; 24
    3650:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    3654:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3658:	f1 2c       	mov	r15, r1
    365a:	a4 c0       	rjmp	.+328    	; 0x37a4 <menuOnEnterUSBsendHW+0x1f2>
    365c:	8c e1       	ldi	r24, 0x1C	; 28
    365e:	93 e0       	ldi	r25, 0x03	; 3
    3660:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3664:	80 e3       	ldi	r24, 0x30	; 48
    3666:	8f 0d       	add	r24, r15
    3668:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    366c:	8a e3       	ldi	r24, 0x3A	; 58
    366e:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    3672:	80 e2       	ldi	r24, 0x20	; 32
    3674:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    3678:	0e 2d       	mov	r16, r14
    367a:	10 e0       	ldi	r17, 0x00	; 0
    367c:	cf 2c       	mov	r12, r15
    367e:	d1 2c       	mov	r13, r1
    3680:	e6 01       	movw	r28, r12
    3682:	cc 0f       	add	r28, r28
    3684:	dd 1f       	adc	r29, r29
    3686:	ce 01       	movw	r24, r28
    3688:	8c 0d       	add	r24, r12
    368a:	9d 1d       	adc	r25, r13
    368c:	e8 01       	movw	r28, r16
    368e:	cc 0f       	add	r28, r28
    3690:	dd 1f       	adc	r29, r29
    3692:	c0 0f       	add	r28, r16
    3694:	d1 1f       	adc	r29, r17
    3696:	cc 0f       	add	r28, r28
    3698:	dd 1f       	adc	r29, r29
    369a:	cc 0f       	add	r28, r28
    369c:	dd 1f       	adc	r29, r29
    369e:	c8 0f       	add	r28, r24
    36a0:	d9 1f       	adc	r29, r25
    36a2:	ce 5c       	subi	r28, 0xCE	; 206
    36a4:	d6 4f       	sbci	r29, 0xF6	; 246
    36a6:	6d ed       	ldi	r22, 0xDD	; 221
    36a8:	78 e1       	ldi	r23, 0x18	; 24
    36aa:	88 81       	ld	r24, Y
    36ac:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    36b0:	bc 01       	movw	r22, r24
    36b2:	6f 5f       	subi	r22, 0xFF	; 255
    36b4:	7f 4f       	sbci	r23, 0xFF	; 255
    36b6:	0f 2e       	mov	r0, r31
    36b8:	fe e2       	ldi	r31, 0x2E	; 46
    36ba:	bf 2e       	mov	r11, r31
    36bc:	f0 2d       	mov	r31, r0
    36be:	fc 01       	movw	r30, r24
    36c0:	b0 82       	st	Z, r11
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    36c8:	bc 01       	movw	r22, r24
    36ca:	6f 5f       	subi	r22, 0xFF	; 255
    36cc:	7f 4f       	sbci	r23, 0xFF	; 255
    36ce:	fc 01       	movw	r30, r24
    36d0:	b0 82       	st	Z, r11
    36d2:	8a 81       	ldd	r24, Y+2	; 0x02
    36d4:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    36d8:	fc 01       	movw	r30, r24
    36da:	80 e2       	ldi	r24, 0x20	; 32
    36dc:	80 83       	st	Z, r24
    36de:	9d e3       	ldi	r25, 0x3D	; 61
    36e0:	91 83       	std	Z+1, r25	; 0x01
    36e2:	82 83       	std	Z+2, r24	; 0x02
    36e4:	8d ed       	ldi	r24, 0xDD	; 221
    36e6:	98 e1       	ldi	r25, 0x18	; 24
    36e8:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    36ec:	88 81       	ld	r24, Y
    36ee:	88 23       	and	r24, r24
    36f0:	2c f4       	brge	.+10     	; 0x36fc <menuOnEnterUSBsendHW+0x14a>
    36f2:	8a e0       	ldi	r24, 0x0A	; 10
    36f4:	93 e0       	ldi	r25, 0x03	; 3
    36f6:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    36fa:	51 c0       	rjmp	.+162    	; 0x379e <menuOnEnterUSBsendHW+0x1ec>
    36fc:	6d ed       	ldi	r22, 0xDD	; 221
    36fe:	78 e1       	ldi	r23, 0x18	; 24
    3700:	0e 94 bb 38 	call	0x7176	; 0x7176 <putChar_Note>
    3704:	bc 01       	movw	r22, r24
    3706:	6f 5f       	subi	r22, 0xFF	; 255
    3708:	7f 4f       	sbci	r23, 0xFF	; 255
    370a:	0f 2e       	mov	r0, r31
    370c:	fd e2       	ldi	r31, 0x2D	; 45
    370e:	9f 2e       	mov	r9, r31
    3710:	f0 2d       	mov	r31, r0
    3712:	fc 01       	movw	r30, r24
    3714:	90 82       	st	Z, r9
    3716:	f6 01       	movw	r30, r12
    3718:	ee 0f       	add	r30, r30
    371a:	ff 1f       	adc	r31, r31
    371c:	ce 0e       	add	r12, r30
    371e:	df 1e       	adc	r13, r31
    3720:	58 01       	movw	r10, r16
    3722:	aa 0c       	add	r10, r10
    3724:	bb 1c       	adc	r11, r11
    3726:	e5 01       	movw	r28, r10
    3728:	c0 0f       	add	r28, r16
    372a:	d1 1f       	adc	r29, r17
    372c:	cc 0f       	add	r28, r28
    372e:	dd 1f       	adc	r29, r29
    3730:	cc 0f       	add	r28, r28
    3732:	dd 1f       	adc	r29, r29
    3734:	cc 0d       	add	r28, r12
    3736:	dd 1d       	adc	r29, r13
    3738:	ce 5c       	subi	r28, 0xCE	; 206
    373a:	d6 4f       	sbci	r29, 0xF6	; 246
    373c:	89 81       	ldd	r24, Y+1	; 0x01
    373e:	0e 94 bb 38 	call	0x7176	; 0x7176 <putChar_Note>
    3742:	20 e2       	ldi	r18, 0x20	; 32
    3744:	fc 01       	movw	r30, r24
    3746:	20 83       	st	Z, r18
    3748:	11 82       	std	Z+1, r1	; 0x01
    374a:	8d ed       	ldi	r24, 0xDD	; 221
    374c:	98 e1       	ldi	r25, 0x18	; 24
    374e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    3752:	82 e0       	ldi	r24, 0x02	; 2
    3754:	93 e0       	ldi	r25, 0x03	; 3
    3756:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	82 95       	swap	r24
    375e:	86 95       	lsr	r24
    3760:	87 70       	andi	r24, 0x07	; 7
    3762:	80 5d       	subi	r24, 0xD0	; 208
    3764:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    3768:	8a ef       	ldi	r24, 0xFA	; 250
    376a:	92 e0       	ldi	r25, 0x02	; 2
    376c:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3770:	8a 81       	ldd	r24, Y+2	; 0x02
    3772:	6d ed       	ldi	r22, 0xDD	; 221
    3774:	78 e1       	ldi	r23, 0x18	; 24
    3776:	8f 71       	andi	r24, 0x1F	; 31
    3778:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    377c:	bc 01       	movw	r22, r24
    377e:	6f 5f       	subi	r22, 0xFF	; 255
    3780:	7f 4f       	sbci	r23, 0xFF	; 255
    3782:	fc 01       	movw	r30, r24
    3784:	90 82       	st	Z, r9
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	99 81       	ldd	r25, Y+1	; 0x01
    378a:	28 81       	ld	r18, Y
    378c:	8f 71       	andi	r24, 0x1F	; 31
    378e:	89 0f       	add	r24, r25
    3790:	82 1b       	sub	r24, r18
    3792:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    3796:	8d ed       	ldi	r24, 0xDD	; 221
    3798:	98 e1       	ldi	r25, 0x18	; 24
    379a:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    379e:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    37a2:	f3 94       	inc	r15
    37a4:	f3 e0       	ldi	r31, 0x03	; 3
    37a6:	ff 15       	cp	r31, r15
    37a8:	08 f0       	brcs	.+2      	; 0x37ac <menuOnEnterUSBsendHW+0x1fa>
    37aa:	58 cf       	rjmp	.-336    	; 0x365c <menuOnEnterUSBsendHW+0xaa>
    37ac:	88 ed       	ldi	r24, 0xD8	; 216
    37ae:	92 e0       	ldi	r25, 0x02	; 2
    37b0:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    37b4:	ee 2d       	mov	r30, r14
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	ee 0f       	add	r30, r30
    37ba:	ff 1f       	adc	r31, r31
    37bc:	ea 5d       	subi	r30, 0xDA	; 218
    37be:	f6 4f       	sbci	r31, 0xF6	; 246
    37c0:	6d ed       	ldi	r22, 0xDD	; 221
    37c2:	78 e1       	ldi	r23, 0x18	; 24
    37c4:	81 81       	ldd	r24, Z+1	; 0x01
    37c6:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <putChar_MidiChan>
    37ca:	8d ed       	ldi	r24, 0xDD	; 221
    37cc:	98 e1       	ldi	r25, 0x18	; 24
    37ce:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    37d2:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    37d6:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    37da:	e3 94       	inc	r14
    37dc:	83 e0       	ldi	r24, 0x03	; 3
    37de:	8e 15       	cp	r24, r14
    37e0:	08 f0       	brcs	.+2      	; 0x37e4 <menuOnEnterUSBsendHW+0x232>
    37e2:	2b cf       	rjmp	.-426    	; 0x363a <menuOnEnterUSBsendHW+0x88>
    37e4:	80 e1       	ldi	r24, 0x10	; 16
    37e6:	93 e0       	ldi	r25, 0x03	; 3
    37e8:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    37ec:	f1 2c       	mov	r15, r1
    37ee:	94 c0       	rjmp	.+296    	; 0x3918 <menuOnEnterUSBsendHW+0x366>
    37f0:	8c e1       	ldi	r24, 0x1C	; 28
    37f2:	93 e0       	ldi	r25, 0x03	; 3
    37f4:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    37f8:	80 e3       	ldi	r24, 0x30	; 48
    37fa:	8f 0d       	add	r24, r15
    37fc:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    3800:	8a e3       	ldi	r24, 0x3A	; 58
    3802:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    3806:	80 e2       	ldi	r24, 0x20	; 32
    3808:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    380c:	cf 2d       	mov	r28, r15
    380e:	d0 e0       	ldi	r29, 0x00	; 0
    3810:	8e 01       	movw	r16, r28
    3812:	00 0f       	add	r16, r16
    3814:	11 1f       	adc	r17, r17
    3816:	0c 0f       	add	r16, r28
    3818:	1d 1f       	adc	r17, r29
    381a:	0a 50       	subi	r16, 0x0A	; 10
    381c:	18 4f       	sbci	r17, 0xF8	; 248
    381e:	6d ed       	ldi	r22, 0xDD	; 221
    3820:	78 e1       	ldi	r23, 0x18	; 24
    3822:	f8 01       	movw	r30, r16
    3824:	80 81       	ld	r24, Z
    3826:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    382a:	bc 01       	movw	r22, r24
    382c:	6f 5f       	subi	r22, 0xFF	; 255
    382e:	7f 4f       	sbci	r23, 0xFF	; 255
    3830:	0f 2e       	mov	r0, r31
    3832:	fe e2       	ldi	r31, 0x2E	; 46
    3834:	ef 2e       	mov	r14, r31
    3836:	f0 2d       	mov	r31, r0
    3838:	fc 01       	movw	r30, r24
    383a:	e0 82       	st	Z, r14
    383c:	f8 01       	movw	r30, r16
    383e:	81 81       	ldd	r24, Z+1	; 0x01
    3840:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    3844:	bc 01       	movw	r22, r24
    3846:	6f 5f       	subi	r22, 0xFF	; 255
    3848:	7f 4f       	sbci	r23, 0xFF	; 255
    384a:	fc 01       	movw	r30, r24
    384c:	e0 82       	st	Z, r14
    384e:	f8 01       	movw	r30, r16
    3850:	82 81       	ldd	r24, Z+2	; 0x02
    3852:	0e 94 63 38 	call	0x70c6	; 0x70c6 <putChar_hex>
    3856:	fc 01       	movw	r30, r24
    3858:	80 e2       	ldi	r24, 0x20	; 32
    385a:	80 83       	st	Z, r24
    385c:	9d e3       	ldi	r25, 0x3D	; 61
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	82 83       	std	Z+2, r24	; 0x02
    3862:	13 82       	std	Z+3, r1	; 0x03
    3864:	8d ed       	ldi	r24, 0xDD	; 221
    3866:	98 e1       	ldi	r25, 0x18	; 24
    3868:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    386c:	f8 01       	movw	r30, r16
    386e:	80 81       	ld	r24, Z
    3870:	8f 3f       	cpi	r24, 0xFF	; 255
    3872:	29 f4       	brne	.+10     	; 0x387e <menuOnEnterUSBsendHW+0x2cc>
    3874:	8a e0       	ldi	r24, 0x0A	; 10
    3876:	93 e0       	ldi	r25, 0x03	; 3
    3878:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    387c:	4a c0       	rjmp	.+148    	; 0x3912 <menuOnEnterUSBsendHW+0x360>
    387e:	ed ed       	ldi	r30, 0xDD	; 221
    3880:	f8 e1       	ldi	r31, 0x18	; 24
    3882:	92 e5       	ldi	r25, 0x52	; 82
    3884:	90 83       	st	Z, r25
    3886:	9e e2       	ldi	r25, 0x2E	; 46
    3888:	91 83       	std	Z+1, r25	; 0x01
    388a:	6f ed       	ldi	r22, 0xDF	; 223
    388c:	78 e1       	ldi	r23, 0x18	; 24
    388e:	8f 5f       	subi	r24, 0xFF	; 255
    3890:	0e 94 3c 38 	call	0x7078	; 0x7078 <putChar_Dec>
    3894:	bc 01       	movw	r22, r24
    3896:	6f 5f       	subi	r22, 0xFF	; 255
    3898:	7f 4f       	sbci	r23, 0xFF	; 255
    389a:	1d e2       	ldi	r17, 0x2D	; 45
    389c:	fc 01       	movw	r30, r24
    389e:	10 83       	st	Z, r17
    38a0:	ce 01       	movw	r24, r28
    38a2:	88 0f       	add	r24, r24
    38a4:	99 1f       	adc	r25, r25
    38a6:	c8 0f       	add	r28, r24
    38a8:	d9 1f       	adc	r29, r25
    38aa:	ca 50       	subi	r28, 0x0A	; 10
    38ac:	d8 4f       	sbci	r29, 0xF8	; 248
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	8f 5f       	subi	r24, 0xFF	; 255
    38b2:	0e 94 3c 38 	call	0x7078	; 0x7078 <putChar_Dec>
    38b6:	20 e2       	ldi	r18, 0x20	; 32
    38b8:	fc 01       	movw	r30, r24
    38ba:	20 83       	st	Z, r18
    38bc:	11 82       	std	Z+1, r1	; 0x01
    38be:	8d ed       	ldi	r24, 0xDD	; 221
    38c0:	98 e1       	ldi	r25, 0x18	; 24
    38c2:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    38c6:	82 e0       	ldi	r24, 0x02	; 2
    38c8:	93 e0       	ldi	r25, 0x03	; 3
    38ca:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    38ce:	8a 81       	ldd	r24, Y+2	; 0x02
    38d0:	82 95       	swap	r24
    38d2:	86 95       	lsr	r24
    38d4:	87 70       	andi	r24, 0x07	; 7
    38d6:	80 5d       	subi	r24, 0xD0	; 208
    38d8:	0e 94 b3 34 	call	0x6966	; 0x6966 <serial0SER_USBSend>
    38dc:	8a ef       	ldi	r24, 0xFA	; 250
    38de:	92 e0       	ldi	r25, 0x02	; 2
    38e0:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    38e4:	8a 81       	ldd	r24, Y+2	; 0x02
    38e6:	6d ed       	ldi	r22, 0xDD	; 221
    38e8:	78 e1       	ldi	r23, 0x18	; 24
    38ea:	8f 71       	andi	r24, 0x1F	; 31
    38ec:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    38f0:	bc 01       	movw	r22, r24
    38f2:	6f 5f       	subi	r22, 0xFF	; 255
    38f4:	7f 4f       	sbci	r23, 0xFF	; 255
    38f6:	fc 01       	movw	r30, r24
    38f8:	10 83       	st	Z, r17
    38fa:	8a 81       	ldd	r24, Y+2	; 0x02
    38fc:	99 81       	ldd	r25, Y+1	; 0x01
    38fe:	28 81       	ld	r18, Y
    3900:	8f 71       	andi	r24, 0x1F	; 31
    3902:	89 0f       	add	r24, r25
    3904:	82 1b       	sub	r24, r18
    3906:	0e 94 20 38 	call	0x7040	; 0x7040 <putChar_Dec2>
    390a:	8d ed       	ldi	r24, 0xDD	; 221
    390c:	98 e1       	ldi	r25, 0x18	; 24
    390e:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    3912:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3916:	f3 94       	inc	r15
    3918:	f7 e0       	ldi	r31, 0x07	; 7
    391a:	ff 15       	cp	r31, r15
    391c:	08 f0       	brcs	.+2      	; 0x3920 <menuOnEnterUSBsendHW+0x36e>
    391e:	68 cf       	rjmp	.-304    	; 0x37f0 <menuOnEnterUSBsendHW+0x23e>
    3920:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3924:	8f ec       	ldi	r24, 0xCF	; 207
    3926:	92 e0       	ldi	r25, 0x02	; 2
    3928:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    392c:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3930:	e1 2c       	mov	r14, r1
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	64 c0       	rjmp	.+200    	; 0x39fe <menuOnEnterUSBsendHW+0x44c>
    3936:	ce 2d       	mov	r28, r14
    3938:	d0 e0       	ldi	r29, 0x00	; 0
    393a:	0f 2d       	mov	r16, r15
    393c:	10 e0       	ldi	r17, 0x00	; 0
    393e:	fe 01       	movw	r30, r28
    3940:	ee 0f       	add	r30, r30
    3942:	ff 1f       	adc	r31, r31
    3944:	ee 0f       	add	r30, r30
    3946:	ff 1f       	adc	r31, r31
    3948:	e0 0f       	add	r30, r16
    394a:	f1 1f       	adc	r31, r17
    394c:	ee 0f       	add	r30, r30
    394e:	ff 1f       	adc	r31, r31
    3950:	ee 0f       	add	r30, r30
    3952:	ff 1f       	adc	r31, r31
    3954:	ea 5d       	subi	r30, 0xDA	; 218
    3956:	f7 4f       	sbci	r31, 0xF7	; 247
    3958:	80 81       	ld	r24, Z
    395a:	8f 3f       	cpi	r24, 0xFF	; 255
    395c:	09 f4       	brne	.+2      	; 0x3960 <menuOnEnterUSBsendHW+0x3ae>
    395e:	47 c0       	rjmp	.+142    	; 0x39ee <menuOnEnterUSBsendHW+0x43c>
    3960:	6d ed       	ldi	r22, 0xDD	; 221
    3962:	78 e1       	ldi	r23, 0x18	; 24
    3964:	8e 2d       	mov	r24, r14
    3966:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <putChar_MidiChan>
    396a:	bc 01       	movw	r22, r24
    396c:	6f 5f       	subi	r22, 0xFF	; 255
    396e:	7f 4f       	sbci	r23, 0xFF	; 255
    3970:	0f 2e       	mov	r0, r31
    3972:	f8 e2       	ldi	r31, 0x28	; 40
    3974:	df 2e       	mov	r13, r31
    3976:	f0 2d       	mov	r31, r0
    3978:	fc 01       	movw	r30, r24
    397a:	d0 82       	st	Z, r13
    397c:	cc 0f       	add	r28, r28
    397e:	dd 1f       	adc	r29, r29
    3980:	cc 0f       	add	r28, r28
    3982:	dd 1f       	adc	r29, r29
    3984:	c0 0f       	add	r28, r16
    3986:	d1 1f       	adc	r29, r17
    3988:	cc 0f       	add	r28, r28
    398a:	dd 1f       	adc	r29, r29
    398c:	cc 0f       	add	r28, r28
    398e:	dd 1f       	adc	r29, r29
    3990:	ca 5d       	subi	r28, 0xDA	; 218
    3992:	d7 4f       	sbci	r29, 0xF7	; 247
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	0e 94 bb 38 	call	0x7176	; 0x7176 <putChar_Note>
    399a:	bc 01       	movw	r22, r24
    399c:	6f 5f       	subi	r22, 0xFF	; 255
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	2d e2       	ldi	r18, 0x2D	; 45
    39a2:	fc 01       	movw	r30, r24
    39a4:	20 83       	st	Z, r18
    39a6:	99 81       	ldd	r25, Y+1	; 0x01
    39a8:	8a 81       	ldd	r24, Y+2	; 0x02
    39aa:	89 0f       	add	r24, r25
    39ac:	0e 94 bb 38 	call	0x7176	; 0x7176 <putChar_Note>
    39b0:	fc 01       	movw	r30, r24
    39b2:	19 e2       	ldi	r17, 0x29	; 41
    39b4:	10 83       	st	Z, r17
    39b6:	80 e2       	ldi	r24, 0x20	; 32
    39b8:	81 83       	std	Z+1, r24	; 0x01
    39ba:	bf 01       	movw	r22, r30
    39bc:	6d 5f       	subi	r22, 0xFD	; 253
    39be:	7f 4f       	sbci	r23, 0xFF	; 255
    39c0:	8e e3       	ldi	r24, 0x3E	; 62
    39c2:	82 83       	std	Z+2, r24	; 0x02
    39c4:	88 81       	ld	r24, Y
    39c6:	0e 94 17 39 	call	0x722e	; 0x722e <putChar_Manual>
    39ca:	bc 01       	movw	r22, r24
    39cc:	6f 5f       	subi	r22, 0xFF	; 255
    39ce:	7f 4f       	sbci	r23, 0xFF	; 255
    39d0:	fc 01       	movw	r30, r24
    39d2:	d0 82       	st	Z, r13
    39d4:	8b 81       	ldd	r24, Y+3	; 0x03
    39d6:	0e 94 bb 38 	call	0x7176	; 0x7176 <putChar_Note>
    39da:	fc 01       	movw	r30, r24
    39dc:	10 83       	st	Z, r17
    39de:	11 82       	std	Z+1, r1	; 0x01
    39e0:	8d ed       	ldi	r24, 0xDD	; 221
    39e2:	98 e1       	ldi	r25, 0x18	; 24
    39e4:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    39e8:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    39ec:	9f ef       	ldi	r25, 0xFF	; 255
    39ee:	f3 94       	inc	r15
    39f0:	01 c0       	rjmp	.+2      	; 0x39f4 <menuOnEnterUSBsendHW+0x442>
    39f2:	f1 2c       	mov	r15, r1
    39f4:	f3 e0       	ldi	r31, 0x03	; 3
    39f6:	ff 15       	cp	r31, r15
    39f8:	08 f0       	brcs	.+2      	; 0x39fc <menuOnEnterUSBsendHW+0x44a>
    39fa:	9d cf       	rjmp	.-198    	; 0x3936 <menuOnEnterUSBsendHW+0x384>
    39fc:	e3 94       	inc	r14
    39fe:	8f e0       	ldi	r24, 0x0F	; 15
    3a00:	8e 15       	cp	r24, r14
    3a02:	b8 f7       	brcc	.-18     	; 0x39f2 <menuOnEnterUSBsendHW+0x440>
    3a04:	91 11       	cpse	r25, r1
    3a06:	06 c0       	rjmp	.+12     	; 0x3a14 <menuOnEnterUSBsendHW+0x462>
    3a08:	84 eb       	ldi	r24, 0xB4	; 180
    3a0a:	92 e0       	ldi	r25, 0x02	; 2
    3a0c:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3a10:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3a14:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3a18:	85 ec       	ldi	r24, 0xC5	; 197
    3a1a:	92 e0       	ldi	r25, 0x02	; 2
    3a1c:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3a20:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3a24:	c0 e0       	ldi	r28, 0x00	; 0
    3a26:	25 c0       	rjmp	.+74     	; 0x3a72 <menuOnEnterUSBsendHW+0x4c0>
    3a28:	6d ed       	ldi	r22, 0xDD	; 221
    3a2a:	78 e1       	ldi	r23, 0x18	; 24
    3a2c:	8c 2f       	mov	r24, r28
    3a2e:	0e 94 17 39 	call	0x722e	; 0x722e <putChar_Manual>
    3a32:	dc 01       	movw	r26, r24
    3a34:	bc 01       	movw	r22, r24
    3a36:	6f 5f       	subi	r22, 0xFF	; 255
    3a38:	7f 4f       	sbci	r23, 0xFF	; 255
    3a3a:	8a e3       	ldi	r24, 0x3A	; 58
    3a3c:	8c 93       	st	X, r24
    3a3e:	ec 2f       	mov	r30, r28
    3a40:	f0 e0       	ldi	r31, 0x00	; 0
    3a42:	ee 0f       	add	r30, r30
    3a44:	ff 1f       	adc	r31, r31
    3a46:	ea 5d       	subi	r30, 0xDA	; 218
    3a48:	f6 4f       	sbci	r31, 0xF6	; 246
    3a4a:	80 81       	ld	r24, Z
    3a4c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a4e:	19 f0       	breq	.+6      	; 0x3a56 <menuOnEnterUSBsendHW+0x4a4>
    3a50:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <putChar_MidiChan>
    3a54:	05 c0       	rjmp	.+10     	; 0x3a60 <menuOnEnterUSBsendHW+0x4ae>
    3a56:	cd 01       	movw	r24, r26
    3a58:	02 96       	adiw	r24, 0x02	; 2
    3a5a:	2d e2       	ldi	r18, 0x2D	; 45
    3a5c:	11 96       	adiw	r26, 0x01	; 1
    3a5e:	2c 93       	st	X, r18
    3a60:	fc 01       	movw	r30, r24
    3a62:	10 82       	st	Z, r1
    3a64:	8d ed       	ldi	r24, 0xDD	; 221
    3a66:	98 e1       	ldi	r25, 0x18	; 24
    3a68:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    3a6c:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3a70:	cf 5f       	subi	r28, 0xFF	; 255
    3a72:	c4 30       	cpi	r28, 0x04	; 4
    3a74:	c8 f2       	brcs	.-78     	; 0x3a28 <menuOnEnterUSBsendHW+0x476>
    3a76:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3a7a:	89 eb       	ldi	r24, 0xB9	; 185
    3a7c:	92 e0       	ldi	r25, 0x02	; 2
    3a7e:	0e 94 92 35 	call	0x6b24	; 0x6b24 <serial0SER_USB_sendStringP>
    3a82:	c4 e2       	ldi	r28, 0x24	; 36
    3a84:	d8 e0       	ldi	r29, 0x08	; 8
    3a86:	6d ed       	ldi	r22, 0xDD	; 221
    3a88:	78 e1       	ldi	r23, 0x18	; 24
    3a8a:	88 81       	ld	r24, Y
    3a8c:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <putChar_MidiChan>
    3a90:	bc 01       	movw	r22, r24
    3a92:	6f 5f       	subi	r22, 0xFF	; 255
    3a94:	7f 4f       	sbci	r23, 0xFF	; 255
    3a96:	2e e3       	ldi	r18, 0x3E	; 62
    3a98:	fc 01       	movw	r30, r24
    3a9a:	20 83       	st	Z, r18
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	0e 94 7b 38 	call	0x70f6	; 0x70f6 <putChar_MidiChan>
    3aa2:	fc 01       	movw	r30, r24
    3aa4:	10 82       	st	Z, r1
    3aa6:	8d ed       	ldi	r24, 0xDD	; 221
    3aa8:	98 e1       	ldi	r25, 0x18	; 24
    3aaa:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <serial0SER_USB_sendString>
    3aae:	0e 94 a4 35 	call	0x6b48	; 0x6b48 <serial0SER_USB_sendCRLF>
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	df 90       	pop	r13
    3ac2:	cf 90       	pop	r12
    3ac4:	bf 90       	pop	r11
    3ac6:	af 90       	pop	r10
    3ac8:	9f 90       	pop	r9
    3aca:	08 95       	ret

00003acc <reverseRegisterBits>:
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	10 e0       	ldi	r17, 0x00	; 0
    3ad4:	09 c0       	rjmp	.+18     	; 0x3ae8 <reverseRegisterBits+0x1c>
    3ad6:	c1 2f       	mov	r28, r17
    3ad8:	d0 e0       	ldi	r29, 0x00	; 0
    3ada:	c3 59       	subi	r28, 0x93	; 147
    3adc:	da 4f       	sbci	r29, 0xFA	; 250
    3ade:	88 81       	ld	r24, Y
    3ae0:	0e 94 b3 3a 	call	0x7566	; 0x7566 <reverse_Bits>
    3ae4:	88 83       	st	Y, r24
    3ae6:	1f 5f       	subi	r17, 0xFF	; 255
    3ae8:	18 30       	cpi	r17, 0x08	; 8
    3aea:	a8 f3       	brcs	.-22     	; 0x3ad6 <reverseRegisterBits+0xa>
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	1f 91       	pop	r17
    3af2:	08 95       	ret

00003af4 <menuOnUpdateRegister>:
    3af4:	8d e6       	ldi	r24, 0x6D	; 109
    3af6:	95 e0       	ldi	r25, 0x05	; 5
    3af8:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <read_allRegister>
    3afc:	e7 df       	rcall	.-50     	; 0x3acc <reverseRegisterBits>
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	08 95       	ret

00003b02 <menuOnEnterResetReg>:
    3b02:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <midi_resetRegisters>
    3b06:	80 e0       	ldi	r24, 0x00	; 0
    3b08:	f5 df       	rcall	.-22     	; 0x3af4 <menuOnUpdateRegister>
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	08 95       	ret

00003b0e <menuOnExitLoadProgran>:
    3b0e:	86 30       	cpi	r24, 0x06	; 6
    3b10:	31 f0       	breq	.+12     	; 0x3b1e <menuOnExitLoadProgran+0x10>
    3b12:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3b16:	80 34       	cpi	r24, 0x40	; 64
    3b18:	10 f4       	brcc	.+4      	; 0x3b1e <menuOnExitLoadProgran+0x10>
    3b1a:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <program_toRegister>
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	e9 df       	rcall	.-46     	; 0x3af4 <menuOnUpdateRegister>
    3b22:	80 e0       	ldi	r24, 0x00	; 0
    3b24:	08 95       	ret

00003b26 <softkeyCoupler>:
    3b26:	cf 93       	push	r28
    3b28:	c6 2f       	mov	r28, r22
    3b2a:	88 23       	and	r24, r24
    3b2c:	d9 f0       	breq	.+54     	; 0x3b64 <softkeyCoupler+0x3e>
    3b2e:	e6 2f       	mov	r30, r22
    3b30:	f0 e0       	ldi	r31, 0x00	; 0
    3b32:	df 01       	movw	r26, r30
    3b34:	a1 5f       	subi	r26, 0xF1	; 241
    3b36:	b7 4f       	sbci	r27, 0xF7	; 247
    3b38:	8c 91       	ld	r24, X
    3b3a:	81 11       	cpse	r24, r1
    3b3c:	08 c0       	rjmp	.+16     	; 0x3b4e <softkeyCoupler+0x28>
    3b3e:	86 2f       	mov	r24, r22
    3b40:	0e 94 36 2c 	call	0x586c	; 0x586c <set_Coupler>
    3b44:	88 23       	and	r24, r24
    3b46:	71 f0       	breq	.+28     	; 0x3b64 <softkeyCoupler+0x3e>
    3b48:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <midi_ManualOff>
    3b4c:	0b c0       	rjmp	.+22     	; 0x3b64 <softkeyCoupler+0x3e>
    3b4e:	df 01       	movw	r26, r30
    3b50:	a1 5f       	subi	r26, 0xF1	; 241
    3b52:	b7 4f       	sbci	r27, 0xF7	; 247
    3b54:	1c 92       	st	X, r1
    3b56:	ee 0f       	add	r30, r30
    3b58:	ff 1f       	adc	r31, r31
    3b5a:	e3 54       	subi	r30, 0x43	; 67
    3b5c:	fe 4e       	sbci	r31, 0xEE	; 238
    3b5e:	84 91       	lpm	r24, Z
    3b60:	0e 94 7a 31 	call	0x62f4	; 0x62f4 <midi_ManualOff>
    3b64:	ec 2f       	mov	r30, r28
    3b66:	f0 e0       	ldi	r31, 0x00	; 0
    3b68:	e1 5f       	subi	r30, 0xF1	; 241
    3b6a:	f7 4f       	sbci	r31, 0xF7	; 247
    3b6c:	80 81       	ld	r24, Z
    3b6e:	81 11       	cpse	r24, r1
    3b70:	02 c0       	rjmp	.+4      	; 0x3b76 <softkeyCoupler+0x50>
    3b72:	82 e8       	ldi	r24, 0x82	; 130
    3b74:	01 c0       	rjmp	.+2      	; 0x3b78 <softkeyCoupler+0x52>
    3b76:	81 e8       	ldi	r24, 0x81	; 129
    3b78:	cf 91       	pop	r28
    3b7a:	08 95       	ret

00003b7c <softKeyCoupler2from3>:
    3b7c:	60 e0       	ldi	r22, 0x00	; 0
    3b7e:	d3 cf       	rjmp	.-90     	; 0x3b26 <softkeyCoupler>
    3b80:	08 95       	ret

00003b82 <softKeyCoupler1from3>:
    3b82:	61 e0       	ldi	r22, 0x01	; 1
    3b84:	d0 cf       	rjmp	.-96     	; 0x3b26 <softkeyCoupler>
    3b86:	08 95       	ret

00003b88 <softKeyCouplerPfrom3>:
    3b88:	63 e0       	ldi	r22, 0x03	; 3
    3b8a:	cd cf       	rjmp	.-102    	; 0x3b26 <softkeyCoupler>
    3b8c:	08 95       	ret

00003b8e <softKeyCoupler1from2>:
    3b8e:	62 e0       	ldi	r22, 0x02	; 2
    3b90:	ca cf       	rjmp	.-108    	; 0x3b26 <softkeyCoupler>
    3b92:	08 95       	ret

00003b94 <softKeyCouplerPfrom2>:
    3b94:	64 e0       	ldi	r22, 0x04	; 4
    3b96:	c7 cf       	rjmp	.-114    	; 0x3b26 <softkeyCoupler>
    3b98:	08 95       	ret

00003b9a <softKeyCouplerPfrom1>:
    3b9a:	65 e0       	ldi	r22, 0x05	; 5
    3b9c:	c4 cf       	rjmp	.-120    	; 0x3b26 <softkeyCoupler>
    3b9e:	08 95       	ret

00003ba0 <softKeyCoupler3from2>:
    3ba0:	66 e0       	ldi	r22, 0x06	; 6
    3ba2:	c1 cf       	rjmp	.-126    	; 0x3b26 <softkeyCoupler>
    3ba4:	08 95       	ret

00003ba6 <softKeyCoupler3from1>:
    3ba6:	67 e0       	ldi	r22, 0x07	; 7
    3ba8:	be cf       	rjmp	.-132    	; 0x3b26 <softkeyCoupler>
    3baa:	08 95       	ret

00003bac <softKeyCoupler3fromP>:
    3bac:	69 e0       	ldi	r22, 0x09	; 9
    3bae:	bb cf       	rjmp	.-138    	; 0x3b26 <softkeyCoupler>
    3bb0:	08 95       	ret

00003bb2 <softKeyCoupler2from1>:
    3bb2:	68 e0       	ldi	r22, 0x08	; 8
    3bb4:	b8 cf       	rjmp	.-144    	; 0x3b26 <softkeyCoupler>
    3bb6:	08 95       	ret

00003bb8 <softKeyCoupler2fromP>:
    3bb8:	6a e0       	ldi	r22, 0x0A	; 10
    3bba:	b5 cf       	rjmp	.-150    	; 0x3b26 <softkeyCoupler>
    3bbc:	08 95       	ret

00003bbe <softKeyCoupler1fromP>:
    3bbe:	6b e0       	ldi	r22, 0x0B	; 11
    3bc0:	b2 cf       	rjmp	.-156    	; 0x3b26 <softkeyCoupler>
    3bc2:	08 95       	ret

00003bc4 <menu_Init>:
    3bc4:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	69 f4       	brne	.+26     	; 0x3be6 <menu_Init+0x22>
    3bcc:	87 e1       	ldi	r24, 0x17	; 23
    3bce:	97 e0       	ldi	r25, 0x07	; 7
    3bd0:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3bd4:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3bd8:	82 ef       	ldi	r24, 0xF2	; 242
    3bda:	93 e0       	ldi	r25, 0x03	; 3
    3bdc:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    3be0:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    3be4:	08 c0       	rjmp	.+16     	; 0x3bf6 <menu_Init+0x32>
    3be6:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3bea:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3bee:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    3bf2:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    3bf6:	8f ef       	ldi	r24, 0xFF	; 255
    3bf8:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    3bfc:	8c ef       	ldi	r24, 0xFC	; 252
    3bfe:	93 e0       	ldi	r25, 0x03	; 3
    3c00:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    3c04:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    3c08:	08 95       	ret

00003c0a <softkeyLeft>:
    3c0a:	67 ef       	ldi	r22, 0xF7	; 247
    3c0c:	71 e1       	ldi	r23, 0x11	; 17
    3c0e:	82 e0       	ldi	r24, 0x02	; 2
    3c10:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c14:	08 95       	ret

00003c16 <softkeyRight>:
    3c16:	69 ef       	ldi	r22, 0xF9	; 249
    3c18:	71 e1       	ldi	r23, 0x11	; 17
    3c1a:	83 e0       	ldi	r24, 0x03	; 3
    3c1c:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c20:	08 95       	ret

00003c22 <softkeyDown>:
    3c22:	6b ef       	ldi	r22, 0xFB	; 251
    3c24:	71 e1       	ldi	r23, 0x11	; 17
    3c26:	81 e0       	ldi	r24, 0x01	; 1
    3c28:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c2c:	08 95       	ret

00003c2e <softkeyOn>:
    3c2e:	69 ee       	ldi	r22, 0xE9	; 233
    3c30:	71 e1       	ldi	r23, 0x11	; 17
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c38:	08 95       	ret

00003c3a <softkeyOff>:
    3c3a:	64 ee       	ldi	r22, 0xE4	; 228
    3c3c:	71 e1       	ldi	r23, 0x11	; 17
    3c3e:	81 e0       	ldi	r24, 0x01	; 1
    3c40:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c44:	08 95       	ret

00003c46 <softkeyUp>:
    3c46:	6d ef       	ldi	r22, 0xFD	; 253
    3c48:	71 e1       	ldi	r23, 0x11	; 17
    3c4a:	80 e0       	ldi	r24, 0x00	; 0
    3c4c:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c50:	08 95       	ret

00003c52 <softkeyPlus>:
    3c52:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3c56:	8a 30       	cpi	r24, 0x0A	; 10
    3c58:	11 f0       	breq	.+4      	; 0x3c5e <softkeyPlus+0xc>
    3c5a:	8e 30       	cpi	r24, 0x0E	; 14
    3c5c:	31 f4       	brne	.+12     	; 0x3c6a <softkeyPlus+0x18>
    3c5e:	65 ed       	ldi	r22, 0xD5	; 213
    3c60:	71 e1       	ldi	r23, 0x11	; 17
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c68:	08 95       	ret
    3c6a:	65 ef       	ldi	r22, 0xF5	; 245
    3c6c:	71 e1       	ldi	r23, 0x11	; 17
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c74:	08 95       	ret

00003c76 <softkeyMinus>:
    3c76:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3c7a:	8a 30       	cpi	r24, 0x0A	; 10
    3c7c:	11 f0       	breq	.+4      	; 0x3c82 <softkeyMinus+0xc>
    3c7e:	8e 30       	cpi	r24, 0x0E	; 14
    3c80:	31 f4       	brne	.+12     	; 0x3c8e <softkeyMinus+0x18>
    3c82:	67 ed       	ldi	r22, 0xD7	; 215
    3c84:	71 e1       	ldi	r23, 0x11	; 17
    3c86:	81 e0       	ldi	r24, 0x01	; 1
    3c88:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c8c:	08 95       	ret
    3c8e:	63 ef       	ldi	r22, 0xF3	; 243
    3c90:	71 e1       	ldi	r23, 0x11	; 17
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <keylabel_set>
    3c98:	08 95       	ret

00003c9a <dataToNibbles>:
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3ca2:	8e 2f       	mov	r24, r30
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	fc 01       	movw	r30, r24
    3ca8:	32 97       	sbiw	r30, 0x02	; 2
    3caa:	ed 30       	cpi	r30, 0x0D	; 13
    3cac:	f1 05       	cpc	r31, r1
    3cae:	08 f0       	brcs	.+2      	; 0x3cb2 <dataToNibbles+0x18>
    3cb0:	e4 c0       	rjmp	.+456    	; 0x3e7a <dataToNibbles+0x1e0>
    3cb2:	88 27       	eor	r24, r24
    3cb4:	ee 58       	subi	r30, 0x8E	; 142
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cba:	0c 94 c0 3a 	jmp	0x7580	; 0x7580 <__tablejump2__>
    3cbe:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3cc2:	e4 ec       	ldi	r30, 0xC4	; 196
    3cc4:	f5 e0       	ldi	r31, 0x05	; 5
    3cc6:	98 2f       	mov	r25, r24
    3cc8:	92 95       	swap	r25
    3cca:	9f 70       	andi	r25, 0x0F	; 15
    3ccc:	90 83       	st	Z, r25
    3cce:	8f 70       	andi	r24, 0x0F	; 15
    3cd0:	81 83       	std	Z+1, r24	; 0x01
    3cd2:	d3 c0       	rjmp	.+422    	; 0x3e7a <dataToNibbles+0x1e0>
    3cd4:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3cd8:	80 31       	cpi	r24, 0x10	; 16
    3cda:	20 f0       	brcs	.+8      	; 0x3ce4 <dataToNibbles+0x4a>
    3cdc:	8f ef       	ldi	r24, 0xFF	; 255
    3cde:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ce2:	cb c0       	rjmp	.+406    	; 0x3e7a <dataToNibbles+0x1e0>
    3ce4:	8f 5f       	subi	r24, 0xFF	; 255
    3ce6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3cea:	c7 c0       	rjmp	.+398    	; 0x3e7a <dataToNibbles+0x1e0>
    3cec:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3cf0:	88 23       	and	r24, r24
    3cf2:	34 f4       	brge	.+12     	; 0x3d00 <dataToNibbles+0x66>
    3cf4:	e4 ec       	ldi	r30, 0xC4	; 196
    3cf6:	f5 e0       	ldi	r31, 0x05	; 5
    3cf8:	10 82       	st	Z, r1
    3cfa:	8f ef       	ldi	r24, 0xFF	; 255
    3cfc:	81 83       	std	Z+1, r24	; 0x01
    3cfe:	bd c0       	rjmp	.+378    	; 0x3e7a <dataToNibbles+0x1e0>
    3d00:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    3d04:	08 c0       	rjmp	.+16     	; 0x3d16 <dataToNibbles+0x7c>
    3d06:	e4 ec       	ldi	r30, 0xC4	; 196
    3d08:	f5 e0       	ldi	r31, 0x05	; 5
    3d0a:	91 81       	ldd	r25, Z+1	; 0x01
    3d0c:	9f 5f       	subi	r25, 0xFF	; 255
    3d0e:	91 83       	std	Z+1, r25	; 0x01
    3d10:	8c 50       	subi	r24, 0x0C	; 12
    3d12:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3d16:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3d1a:	8c 30       	cpi	r24, 0x0C	; 12
    3d1c:	a0 f7       	brcc	.-24     	; 0x3d06 <dataToNibbles+0x6c>
    3d1e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3d22:	ab c0       	rjmp	.+342    	; 0x3e7a <dataToNibbles+0x1e0>
    3d24:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3d28:	e4 ec       	ldi	r30, 0xC4	; 196
    3d2a:	f5 e0       	ldi	r31, 0x05	; 5
    3d2c:	98 2f       	mov	r25, r24
    3d2e:	92 95       	swap	r25
    3d30:	96 95       	lsr	r25
    3d32:	97 70       	andi	r25, 0x07	; 7
    3d34:	90 83       	st	Z, r25
    3d36:	8f 71       	andi	r24, 0x1F	; 31
    3d38:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3d3c:	11 82       	std	Z+1, r1	; 0x01
    3d3e:	08 c0       	rjmp	.+16     	; 0x3d50 <dataToNibbles+0xb6>
    3d40:	e4 ec       	ldi	r30, 0xC4	; 196
    3d42:	f5 e0       	ldi	r31, 0x05	; 5
    3d44:	91 81       	ldd	r25, Z+1	; 0x01
    3d46:	9f 5f       	subi	r25, 0xFF	; 255
    3d48:	91 83       	std	Z+1, r25	; 0x01
    3d4a:	8a 50       	subi	r24, 0x0A	; 10
    3d4c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3d50:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3d54:	8a 30       	cpi	r24, 0x0A	; 10
    3d56:	a0 f7       	brcc	.-24     	; 0x3d40 <dataToNibbles+0xa6>
    3d58:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3d5c:	8e c0       	rjmp	.+284    	; 0x3e7a <dataToNibbles+0x1e0>
    3d5e:	e4 ec       	ldi	r30, 0xC4	; 196
    3d60:	f5 e0       	ldi	r31, 0x05	; 5
    3d62:	10 82       	st	Z, r1
    3d64:	11 82       	std	Z+1, r1	; 0x01
    3d66:	08 c0       	rjmp	.+16     	; 0x3d78 <dataToNibbles+0xde>
    3d68:	e4 ec       	ldi	r30, 0xC4	; 196
    3d6a:	f5 e0       	ldi	r31, 0x05	; 5
    3d6c:	90 81       	ld	r25, Z
    3d6e:	9f 5f       	subi	r25, 0xFF	; 255
    3d70:	90 83       	st	Z, r25
    3d72:	84 56       	subi	r24, 0x64	; 100
    3d74:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3d78:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3d7c:	84 36       	cpi	r24, 0x64	; 100
    3d7e:	a0 f7       	brcc	.-24     	; 0x3d68 <dataToNibbles+0xce>
    3d80:	08 c0       	rjmp	.+16     	; 0x3d92 <dataToNibbles+0xf8>
    3d82:	e4 ec       	ldi	r30, 0xC4	; 196
    3d84:	f5 e0       	ldi	r31, 0x05	; 5
    3d86:	91 81       	ldd	r25, Z+1	; 0x01
    3d88:	9f 5f       	subi	r25, 0xFF	; 255
    3d8a:	91 83       	std	Z+1, r25	; 0x01
    3d8c:	8a 50       	subi	r24, 0x0A	; 10
    3d8e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3d92:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3d96:	8a 30       	cpi	r24, 0x0A	; 10
    3d98:	a0 f7       	brcc	.-24     	; 0x3d82 <dataToNibbles+0xe8>
    3d9a:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3d9e:	6d c0       	rjmp	.+218    	; 0x3e7a <dataToNibbles+0x1e0>
    3da0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3da4:	84 30       	cpi	r24, 0x04	; 4
    3da6:	20 f0       	brcs	.+8      	; 0x3db0 <dataToNibbles+0x116>
    3da8:	8f ef       	ldi	r24, 0xFF	; 255
    3daa:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3dae:	65 c0       	rjmp	.+202    	; 0x3e7a <dataToNibbles+0x1e0>
    3db0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3db4:	62 c0       	rjmp	.+196    	; 0x3e7a <dataToNibbles+0x1e0>
    3db6:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3dba:	84 30       	cpi	r24, 0x04	; 4
    3dbc:	20 f0       	brcs	.+8      	; 0x3dc6 <dataToNibbles+0x12c>
    3dbe:	83 e0       	ldi	r24, 0x03	; 3
    3dc0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3dc4:	5a c0       	rjmp	.+180    	; 0x3e7a <dataToNibbles+0x1e0>
    3dc6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3dca:	57 c0       	rjmp	.+174    	; 0x3e7a <dataToNibbles+0x1e0>
    3dcc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3dd0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3dd4:	52 c0       	rjmp	.+164    	; 0x3e7a <dataToNibbles+0x1e0>
    3dd6:	e9 2f       	mov	r30, r25
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3dde:	28 2f       	mov	r18, r24
    3de0:	22 1f       	adc	r18, r18
    3de2:	22 27       	eor	r18, r18
    3de4:	22 1f       	adc	r18, r18
    3de6:	ec 53       	subi	r30, 0x3C	; 60
    3de8:	fa 4f       	sbci	r31, 0xFA	; 250
    3dea:	20 83       	st	Z, r18
    3dec:	88 0f       	add	r24, r24
    3dee:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3df2:	9f 5f       	subi	r25, 0xFF	; 255
    3df4:	01 c0       	rjmp	.+2      	; 0x3df8 <dataToNibbles+0x15e>
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	98 30       	cpi	r25, 0x08	; 8
    3dfa:	68 f3       	brcs	.-38     	; 0x3dd6 <dataToNibbles+0x13c>
    3dfc:	3e c0       	rjmp	.+124    	; 0x3e7a <dataToNibbles+0x1e0>
    3dfe:	82 50       	subi	r24, 0x02	; 2
    3e00:	f0 e0       	ldi	r31, 0x00	; 0
    3e02:	de 01       	movw	r26, r28
    3e04:	9d 91       	ld	r25, X+
    3e06:	ec 53       	subi	r30, 0x3C	; 60
    3e08:	fa 4f       	sbci	r31, 0xFA	; 250
    3e0a:	9f 70       	andi	r25, 0x0F	; 15
    3e0c:	90 83       	st	Z, r25
    3e0e:	e8 2f       	mov	r30, r24
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	98 81       	ld	r25, Y
    3e14:	ec 53       	subi	r30, 0x3C	; 60
    3e16:	fa 4f       	sbci	r31, 0xFA	; 250
    3e18:	92 95       	swap	r25
    3e1a:	9f 70       	andi	r25, 0x0F	; 15
    3e1c:	90 83       	st	Z, r25
    3e1e:	ed 01       	movw	r28, r26
    3e20:	03 c0       	rjmp	.+6      	; 0x3e28 <dataToNibbles+0x18e>
    3e22:	c2 ea       	ldi	r28, 0xA2	; 162
    3e24:	d5 e0       	ldi	r29, 0x05	; 5
    3e26:	88 e0       	ldi	r24, 0x08	; 8
    3e28:	ef ef       	ldi	r30, 0xFF	; 255
    3e2a:	e8 0f       	add	r30, r24
    3e2c:	81 11       	cpse	r24, r1
    3e2e:	e7 cf       	rjmp	.-50     	; 0x3dfe <dataToNibbles+0x164>
    3e30:	24 c0       	rjmp	.+72     	; 0x3e7a <dataToNibbles+0x1e0>
    3e32:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e36:	e4 ec       	ldi	r30, 0xC4	; 196
    3e38:	f5 e0       	ldi	r31, 0x05	; 5
    3e3a:	98 2f       	mov	r25, r24
    3e3c:	97 70       	andi	r25, 0x07	; 7
    3e3e:	9f 5f       	subi	r25, 0xFF	; 255
    3e40:	90 83       	st	Z, r25
    3e42:	86 95       	lsr	r24
    3e44:	86 95       	lsr	r24
    3e46:	86 95       	lsr	r24
    3e48:	8f 5f       	subi	r24, 0xFF	; 255
    3e4a:	81 83       	std	Z+1, r24	; 0x01
    3e4c:	16 c0       	rjmp	.+44     	; 0x3e7a <dataToNibbles+0x1e0>
    3e4e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e52:	8f 5f       	subi	r24, 0xFF	; 255
    3e54:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3e58:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    3e5c:	08 c0       	rjmp	.+16     	; 0x3e6e <dataToNibbles+0x1d4>
    3e5e:	e4 ec       	ldi	r30, 0xC4	; 196
    3e60:	f5 e0       	ldi	r31, 0x05	; 5
    3e62:	90 81       	ld	r25, Z
    3e64:	9f 5f       	subi	r25, 0xFF	; 255
    3e66:	90 83       	st	Z, r25
    3e68:	8a 50       	subi	r24, 0x0A	; 10
    3e6a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3e6e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e72:	8a 30       	cpi	r24, 0x0A	; 10
    3e74:	a0 f7       	brcc	.-24     	; 0x3e5e <dataToNibbles+0x1c4>
    3e76:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	08 95       	ret

00003e80 <nibbleToLCDstring>:
    3e80:	0f 93       	push	r16
    3e82:	1f 93       	push	r17
    3e84:	cf 93       	push	r28
    3e86:	df 93       	push	r29
    3e88:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3e8c:	8e 2f       	mov	r24, r30
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	fc 01       	movw	r30, r24
    3e92:	32 97       	sbiw	r30, 0x02	; 2
    3e94:	ed 30       	cpi	r30, 0x0D	; 13
    3e96:	f1 05       	cpc	r31, r1
    3e98:	08 f0       	brcs	.+2      	; 0x3e9c <nibbleToLCDstring+0x1c>
    3e9a:	3b c1       	rjmp	.+630    	; 0x4112 <nibbleToLCDstring+0x292>
    3e9c:	88 27       	eor	r24, r24
    3e9e:	e1 58       	subi	r30, 0x81	; 129
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    3ea4:	0c 94 c0 3a 	jmp	0x7580	; 0x7580 <__tablejump2__>
    3ea8:	04 ec       	ldi	r16, 0xC4	; 196
    3eaa:	15 e0       	ldi	r17, 0x05	; 5
    3eac:	f8 01       	movw	r30, r16
    3eae:	80 81       	ld	r24, Z
    3eb0:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3eb4:	c5 e2       	ldi	r28, 0x25	; 37
    3eb6:	d2 e0       	ldi	r29, 0x02	; 2
    3eb8:	88 83       	st	Y, r24
    3eba:	f8 01       	movw	r30, r16
    3ebc:	81 81       	ldd	r24, Z+1	; 0x01
    3ebe:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3ec2:	89 83       	std	Y+1, r24	; 0x01
    3ec4:	1a 82       	std	Y+2, r1	; 0x02
    3ec6:	25 c1       	rjmp	.+586    	; 0x4112 <nibbleToLCDstring+0x292>
    3ec8:	e5 e2       	ldi	r30, 0x25	; 37
    3eca:	f2 e0       	ldi	r31, 0x02	; 2
    3ecc:	83 e4       	ldi	r24, 0x43	; 67
    3ece:	80 83       	st	Z, r24
    3ed0:	88 e6       	ldi	r24, 0x68	; 104
    3ed2:	81 83       	std	Z+1, r24	; 0x01
    3ed4:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    3eda:	29 f4       	brne	.+10     	; 0x3ee6 <nibbleToLCDstring+0x66>
    3edc:	80 e2       	ldi	r24, 0x20	; 32
    3ede:	82 83       	std	Z+2, r24	; 0x02
    3ee0:	8d e2       	ldi	r24, 0x2D	; 45
    3ee2:	83 83       	std	Z+3, r24	; 0x03
    3ee4:	12 c0       	rjmp	.+36     	; 0x3f0a <nibbleToLCDstring+0x8a>
    3ee6:	8a 30       	cpi	r24, 0x0A	; 10
    3ee8:	48 f0       	brcs	.+18     	; 0x3efc <nibbleToLCDstring+0x7c>
    3eea:	c5 e2       	ldi	r28, 0x25	; 37
    3eec:	d2 e0       	ldi	r29, 0x02	; 2
    3eee:	91 e3       	ldi	r25, 0x31	; 49
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	8a 50       	subi	r24, 0x0A	; 10
    3ef4:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3ef8:	8b 83       	std	Y+3, r24	; 0x03
    3efa:	07 c0       	rjmp	.+14     	; 0x3f0a <nibbleToLCDstring+0x8a>
    3efc:	c5 e2       	ldi	r28, 0x25	; 37
    3efe:	d2 e0       	ldi	r29, 0x02	; 2
    3f00:	90 e2       	ldi	r25, 0x20	; 32
    3f02:	9a 83       	std	Y+2, r25	; 0x02
    3f04:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3f08:	8b 83       	std	Y+3, r24	; 0x03
    3f0a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    3f0e:	01 c1       	rjmp	.+514    	; 0x4112 <nibbleToLCDstring+0x292>
    3f10:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3f14:	8f 3f       	cpi	r24, 0xFF	; 255
    3f16:	21 f0       	breq	.+8      	; 0x3f20 <nibbleToLCDstring+0xa0>
    3f18:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    3f1c:	9f 3f       	cpi	r25, 0xFF	; 255
    3f1e:	59 f4       	brne	.+22     	; 0x3f36 <nibbleToLCDstring+0xb6>
    3f20:	e5 e2       	ldi	r30, 0x25	; 37
    3f22:	f2 e0       	ldi	r31, 0x02	; 2
    3f24:	8e e6       	ldi	r24, 0x6E	; 110
    3f26:	80 83       	st	Z, r24
    3f28:	9f e6       	ldi	r25, 0x6F	; 111
    3f2a:	91 83       	std	Z+1, r25	; 0x01
    3f2c:	82 83       	std	Z+2, r24	; 0x02
    3f2e:	85 e6       	ldi	r24, 0x65	; 101
    3f30:	83 83       	std	Z+3, r24	; 0x03
    3f32:	14 82       	std	Z+4, r1	; 0x04
    3f34:	ee c0       	rjmp	.+476    	; 0x4112 <nibbleToLCDstring+0x292>
    3f36:	9f e5       	ldi	r25, 0x5F	; 95
    3f38:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    3f3c:	8b 30       	cpi	r24, 0x0B	; 11
    3f3e:	21 f4       	brne	.+8      	; 0x3f48 <nibbleToLCDstring+0xc8>
    3f40:	88 e4       	ldi	r24, 0x48	; 72
    3f42:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3f46:	20 c0       	rjmp	.+64     	; 0x3f88 <nibbleToLCDstring+0x108>
    3f48:	85 30       	cpi	r24, 0x05	; 5
    3f4a:	58 f4       	brcc	.+22     	; 0x3f62 <nibbleToLCDstring+0xe2>
    3f4c:	98 2f       	mov	r25, r24
    3f4e:	96 95       	lsr	r25
    3f50:	9d 5b       	subi	r25, 0xBD	; 189
    3f52:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    3f56:	80 ff       	sbrs	r24, 0
    3f58:	17 c0       	rjmp	.+46     	; 0x3f88 <nibbleToLCDstring+0x108>
    3f5a:	83 e2       	ldi	r24, 0x23	; 35
    3f5c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3f60:	13 c0       	rjmp	.+38     	; 0x3f88 <nibbleToLCDstring+0x108>
    3f62:	28 2f       	mov	r18, r24
    3f64:	30 e0       	ldi	r19, 0x00	; 0
    3f66:	25 50       	subi	r18, 0x05	; 5
    3f68:	31 09       	sbc	r19, r1
    3f6a:	35 95       	asr	r19
    3f6c:	27 95       	ror	r18
    3f6e:	2a 5b       	subi	r18, 0xBA	; 186
    3f70:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    3f74:	80 fd       	sbrc	r24, 0
    3f76:	03 c0       	rjmp	.+6      	; 0x3f7e <nibbleToLCDstring+0xfe>
    3f78:	83 e2       	ldi	r24, 0x23	; 35
    3f7a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3f7e:	28 34       	cpi	r18, 0x48	; 72
    3f80:	19 f4       	brne	.+6      	; 0x3f88 <nibbleToLCDstring+0x108>
    3f82:	81 e4       	ldi	r24, 0x41	; 65
    3f84:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3f88:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3f8c:	81 11       	cpse	r24, r1
    3f8e:	04 c0       	rjmp	.+8      	; 0x3f98 <nibbleToLCDstring+0x118>
    3f90:	8d e6       	ldi	r24, 0x6D	; 109
    3f92:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3f96:	0b c0       	rjmp	.+22     	; 0x3fae <nibbleToLCDstring+0x12e>
    3f98:	8c 30       	cpi	r24, 0x0C	; 12
    3f9a:	30 f4       	brcc	.+12     	; 0x3fa8 <nibbleToLCDstring+0x128>
    3f9c:	81 50       	subi	r24, 0x01	; 1
    3f9e:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3fa2:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3fa6:	03 c0       	rjmp	.+6      	; 0x3fae <nibbleToLCDstring+0x12e>
    3fa8:	8d e2       	ldi	r24, 0x2D	; 45
    3faa:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3fae:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3fb2:	af c0       	rjmp	.+350    	; 0x4112 <nibbleToLCDstring+0x292>
    3fb4:	c5 e2       	ldi	r28, 0x25	; 37
    3fb6:	d2 e0       	ldi	r29, 0x02	; 2
    3fb8:	8d e4       	ldi	r24, 0x4D	; 77
    3fba:	88 83       	st	Y, r24
    3fbc:	04 ec       	ldi	r16, 0xC4	; 196
    3fbe:	15 e0       	ldi	r17, 0x05	; 5
    3fc0:	f8 01       	movw	r30, r16
    3fc2:	80 81       	ld	r24, Z
    3fc4:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3fc8:	89 83       	std	Y+1, r24	; 0x01
    3fca:	82 e4       	ldi	r24, 0x42	; 66
    3fcc:	8a 83       	std	Y+2, r24	; 0x02
    3fce:	f8 01       	movw	r30, r16
    3fd0:	81 81       	ldd	r24, Z+1	; 0x01
    3fd2:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3fd6:	8b 83       	std	Y+3, r24	; 0x03
    3fd8:	f8 01       	movw	r30, r16
    3fda:	82 81       	ldd	r24, Z+2	; 0x02
    3fdc:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3fe0:	8c 83       	std	Y+4, r24	; 0x04
    3fe2:	1d 82       	std	Y+5, r1	; 0x05
    3fe4:	96 c0       	rjmp	.+300    	; 0x4112 <nibbleToLCDstring+0x292>
    3fe6:	04 ec       	ldi	r16, 0xC4	; 196
    3fe8:	15 e0       	ldi	r17, 0x05	; 5
    3fea:	f8 01       	movw	r30, r16
    3fec:	80 81       	ld	r24, Z
    3fee:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    3ff2:	c5 e2       	ldi	r28, 0x25	; 37
    3ff4:	d2 e0       	ldi	r29, 0x02	; 2
    3ff6:	88 83       	st	Y, r24
    3ff8:	f8 01       	movw	r30, r16
    3ffa:	81 81       	ldd	r24, Z+1	; 0x01
    3ffc:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    4000:	89 83       	std	Y+1, r24	; 0x01
    4002:	f8 01       	movw	r30, r16
    4004:	82 81       	ldd	r24, Z+2	; 0x02
    4006:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    400a:	8a 83       	std	Y+2, r24	; 0x02
    400c:	1b 82       	std	Y+3, r1	; 0x03
    400e:	81 c0       	rjmp	.+258    	; 0x4112 <nibbleToLCDstring+0x292>
    4010:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4014:	83 30       	cpi	r24, 0x03	; 3
    4016:	38 f4       	brcc	.+14     	; 0x4026 <nibbleToLCDstring+0x1a6>
    4018:	e5 e2       	ldi	r30, 0x25	; 37
    401a:	f2 e0       	ldi	r31, 0x02	; 2
    401c:	93 e3       	ldi	r25, 0x33	; 51
    401e:	98 1b       	sub	r25, r24
    4020:	90 83       	st	Z, r25
    4022:	11 82       	std	Z+1, r1	; 0x01
    4024:	76 c0       	rjmp	.+236    	; 0x4112 <nibbleToLCDstring+0x292>
    4026:	83 30       	cpi	r24, 0x03	; 3
    4028:	31 f4       	brne	.+12     	; 0x4036 <nibbleToLCDstring+0x1b6>
    402a:	e5 e2       	ldi	r30, 0x25	; 37
    402c:	f2 e0       	ldi	r31, 0x02	; 2
    402e:	80 e5       	ldi	r24, 0x50	; 80
    4030:	80 83       	st	Z, r24
    4032:	11 82       	std	Z+1, r1	; 0x01
    4034:	6e c0       	rjmp	.+220    	; 0x4112 <nibbleToLCDstring+0x292>
    4036:	e5 e2       	ldi	r30, 0x25	; 37
    4038:	f2 e0       	ldi	r31, 0x02	; 2
    403a:	8d e2       	ldi	r24, 0x2D	; 45
    403c:	80 83       	st	Z, r24
    403e:	11 82       	std	Z+1, r1	; 0x01
    4040:	68 c0       	rjmp	.+208    	; 0x4112 <nibbleToLCDstring+0x292>
    4042:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4046:	e5 e2       	ldi	r30, 0x25	; 37
    4048:	f2 e0       	ldi	r31, 0x02	; 2
    404a:	80 5d       	subi	r24, 0xD0	; 208
    404c:	80 83       	st	Z, r24
    404e:	11 82       	std	Z+1, r1	; 0x01
    4050:	60 c0       	rjmp	.+192    	; 0x4112 <nibbleToLCDstring+0x292>
    4052:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4056:	81 11       	cpse	r24, r1
    4058:	09 c0       	rjmp	.+18     	; 0x406c <nibbleToLCDstring+0x1ec>
    405a:	e5 e2       	ldi	r30, 0x25	; 37
    405c:	f2 e0       	ldi	r31, 0x02	; 2
    405e:	81 e4       	ldi	r24, 0x41	; 65
    4060:	80 83       	st	Z, r24
    4062:	85 e7       	ldi	r24, 0x75	; 117
    4064:	81 83       	std	Z+1, r24	; 0x01
    4066:	83 e7       	ldi	r24, 0x73	; 115
    4068:	82 83       	std	Z+2, r24	; 0x02
    406a:	08 c0       	rjmp	.+16     	; 0x407c <nibbleToLCDstring+0x1fc>
    406c:	e5 e2       	ldi	r30, 0x25	; 37
    406e:	f2 e0       	ldi	r31, 0x02	; 2
    4070:	85 e4       	ldi	r24, 0x45	; 69
    4072:	80 83       	st	Z, r24
    4074:	89 e6       	ldi	r24, 0x69	; 105
    4076:	81 83       	std	Z+1, r24	; 0x01
    4078:	8e e6       	ldi	r24, 0x6E	; 110
    407a:	82 83       	std	Z+2, r24	; 0x02
    407c:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    4080:	48 c0       	rjmp	.+144    	; 0x4112 <nibbleToLCDstring+0x292>
    4082:	c1 2f       	mov	r28, r17
    4084:	d0 e0       	ldi	r29, 0x00	; 0
    4086:	fe 01       	movw	r30, r28
    4088:	ec 53       	subi	r30, 0x3C	; 60
    408a:	fa 4f       	sbci	r31, 0xFA	; 250
    408c:	80 81       	ld	r24, Z
    408e:	0e 94 93 37 	call	0x6f26	; 0x6f26 <nibbleToChr>
    4092:	cb 5d       	subi	r28, 0xDB	; 219
    4094:	dd 4f       	sbci	r29, 0xFD	; 253
    4096:	88 83       	st	Y, r24
    4098:	1f 5f       	subi	r17, 0xFF	; 255
    409a:	01 c0       	rjmp	.+2      	; 0x409e <nibbleToLCDstring+0x21e>
    409c:	10 e0       	ldi	r17, 0x00	; 0
    409e:	18 30       	cpi	r17, 0x08	; 8
    40a0:	80 f3       	brcs	.-32     	; 0x4082 <nibbleToLCDstring+0x202>
    40a2:	37 c0       	rjmp	.+110    	; 0x4112 <nibbleToLCDstring+0x292>
    40a4:	82 2f       	mov	r24, r18
    40a6:	90 e0       	ldi	r25, 0x00	; 0
    40a8:	fc 01       	movw	r30, r24
    40aa:	ec 53       	subi	r30, 0x3C	; 60
    40ac:	fa 4f       	sbci	r31, 0xFA	; 250
    40ae:	30 81       	ld	r19, Z
    40b0:	31 11       	cpse	r19, r1
    40b2:	02 c0       	rjmp	.+4      	; 0x40b8 <nibbleToLCDstring+0x238>
    40b4:	3f e6       	ldi	r19, 0x6F	; 111
    40b6:	01 c0       	rjmp	.+2      	; 0x40ba <nibbleToLCDstring+0x23a>
    40b8:	39 e4       	ldi	r19, 0x49	; 73
    40ba:	fc 01       	movw	r30, r24
    40bc:	eb 5d       	subi	r30, 0xDB	; 219
    40be:	fd 4f       	sbci	r31, 0xFD	; 253
    40c0:	30 83       	st	Z, r19
    40c2:	2f 5f       	subi	r18, 0xFF	; 255
    40c4:	01 c0       	rjmp	.+2      	; 0x40c8 <nibbleToLCDstring+0x248>
    40c6:	20 e0       	ldi	r18, 0x00	; 0
    40c8:	28 30       	cpi	r18, 0x08	; 8
    40ca:	60 f3       	brcs	.-40     	; 0x40a4 <nibbleToLCDstring+0x224>
    40cc:	22 c0       	rjmp	.+68     	; 0x4112 <nibbleToLCDstring+0x292>
    40ce:	a4 ec       	ldi	r26, 0xC4	; 196
    40d0:	b5 e0       	ldi	r27, 0x05	; 5
    40d2:	8c 91       	ld	r24, X
    40d4:	e5 e2       	ldi	r30, 0x25	; 37
    40d6:	f2 e0       	ldi	r31, 0x02	; 2
    40d8:	80 5d       	subi	r24, 0xD0	; 208
    40da:	80 83       	st	Z, r24
    40dc:	11 96       	adiw	r26, 0x01	; 1
    40de:	8c 91       	ld	r24, X
    40e0:	80 5c       	subi	r24, 0xC0	; 192
    40e2:	81 83       	std	Z+1, r24	; 0x01
    40e4:	12 82       	std	Z+2, r1	; 0x02
    40e6:	15 c0       	rjmp	.+42     	; 0x4112 <nibbleToLCDstring+0x292>
    40e8:	e4 ec       	ldi	r30, 0xC4	; 196
    40ea:	f5 e0       	ldi	r31, 0x05	; 5
    40ec:	90 81       	ld	r25, Z
    40ee:	81 81       	ldd	r24, Z+1	; 0x01
    40f0:	29 2f       	mov	r18, r25
    40f2:	28 2b       	or	r18, r24
    40f4:	31 f4       	brne	.+12     	; 0x4102 <nibbleToLCDstring+0x282>
    40f6:	e5 e2       	ldi	r30, 0x25	; 37
    40f8:	f2 e0       	ldi	r31, 0x02	; 2
    40fa:	8d e2       	ldi	r24, 0x2D	; 45
    40fc:	80 83       	st	Z, r24
    40fe:	81 83       	std	Z+1, r24	; 0x01
    4100:	06 c0       	rjmp	.+12     	; 0x410e <nibbleToLCDstring+0x28e>
    4102:	e5 e2       	ldi	r30, 0x25	; 37
    4104:	f2 e0       	ldi	r31, 0x02	; 2
    4106:	90 5d       	subi	r25, 0xD0	; 208
    4108:	90 83       	st	Z, r25
    410a:	80 5d       	subi	r24, 0xD0	; 208
    410c:	81 83       	std	Z+1, r24	; 0x01
    410e:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    4112:	df 91       	pop	r29
    4114:	cf 91       	pop	r28
    4116:	1f 91       	pop	r17
    4118:	0f 91       	pop	r16
    411a:	08 95       	ret

0000411c <LCDStringOut>:
    411c:	0f 93       	push	r16
    411e:	1f 93       	push	r17
    4120:	cf 93       	push	r28
    4122:	8e e1       	ldi	r24, 0x1E	; 30
    4124:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    4128:	c0 e0       	ldi	r28, 0x00	; 0
    412a:	05 e2       	ldi	r16, 0x25	; 37
    412c:	12 e0       	ldi	r17, 0x02	; 2
    412e:	0b c0       	rjmp	.+22     	; 0x4146 <LCDStringOut+0x2a>
    4130:	f8 01       	movw	r30, r16
    4132:	80 81       	ld	r24, Z
    4134:	88 23       	and	r24, r24
    4136:	19 f0       	breq	.+6      	; 0x413e <LCDStringOut+0x22>
    4138:	0f 5f       	subi	r16, 0xFF	; 255
    413a:	1f 4f       	sbci	r17, 0xFF	; 255
    413c:	01 c0       	rjmp	.+2      	; 0x4140 <LCDStringOut+0x24>
    413e:	80 e2       	ldi	r24, 0x20	; 32
    4140:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    4144:	cf 5f       	subi	r28, 0xFF	; 255
    4146:	ca 30       	cpi	r28, 0x0A	; 10
    4148:	98 f3       	brcs	.-26     	; 0x4130 <LCDStringOut+0x14>
    414a:	cf 91       	pop	r28
    414c:	1f 91       	pop	r17
    414e:	0f 91       	pop	r16
    4150:	08 95       	ret

00004152 <nibbleCheckOvfl>:
    4152:	8a 30       	cpi	r24, 0x0A	; 10
    4154:	1c f4       	brge	.+6      	; 0x415c <nibbleCheckOvfl+0xa>
    4156:	88 23       	and	r24, r24
    4158:	1c f0       	brlt	.+6      	; 0x4160 <nibbleCheckOvfl+0xe>
    415a:	08 95       	ret
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	08 95       	ret
    4160:	89 e0       	ldi	r24, 0x09	; 9
    4162:	08 95       	ret

00004164 <nibbleChange>:
    4164:	0f 93       	push	r16
    4166:	1f 93       	push	r17
    4168:	cf 93       	push	r28
    416a:	df 93       	push	r29
    416c:	c8 2f       	mov	r28, r24
    416e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4172:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4176:	31 96       	adiw	r30, 0x01	; 1
    4178:	84 91       	lpm	r24, Z
    417a:	28 2f       	mov	r18, r24
    417c:	20 71       	andi	r18, 0x10	; 16
    417e:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4182:	8e 2f       	mov	r24, r30
    4184:	90 e0       	ldi	r25, 0x00	; 0
    4186:	fc 01       	movw	r30, r24
    4188:	32 97       	sbiw	r30, 0x02	; 2
    418a:	ed 30       	cpi	r30, 0x0D	; 13
    418c:	f1 05       	cpc	r31, r1
    418e:	08 f0       	brcs	.+2      	; 0x4192 <nibbleChange+0x2e>
    4190:	93 c1       	rjmp	.+806    	; 0x44b8 <nibbleChange+0x354>
    4192:	88 27       	eor	r24, r24
    4194:	e4 57       	subi	r30, 0x74	; 116
    4196:	ff 4f       	sbci	r31, 0xFF	; 255
    4198:	8f 4f       	sbci	r24, 0xFF	; 255
    419a:	0c 94 c0 3a 	jmp	0x7580	; 0x7580 <__tablejump2__>
    419e:	d0 e0       	ldi	r29, 0x00	; 0
    41a0:	cc 53       	subi	r28, 0x3C	; 60
    41a2:	da 4f       	sbci	r29, 0xFA	; 250
    41a4:	88 81       	ld	r24, Y
    41a6:	68 0f       	add	r22, r24
    41a8:	6f 70       	andi	r22, 0x0F	; 15
    41aa:	68 83       	st	Y, r22
    41ac:	85 c1       	rjmp	.+778    	; 0x44b8 <nibbleChange+0x354>
    41ae:	21 11       	cpse	r18, r1
    41b0:	1b c0       	rjmp	.+54     	; 0x41e8 <nibbleChange+0x84>
    41b2:	61 30       	cpi	r22, 0x01	; 1
    41b4:	41 f4       	brne	.+16     	; 0x41c6 <nibbleChange+0x62>
    41b6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    41ba:	80 31       	cpi	r24, 0x10	; 16
    41bc:	20 f0       	brcs	.+8      	; 0x41c6 <nibbleChange+0x62>
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    41c4:	79 c1       	rjmp	.+754    	; 0x44b8 <nibbleChange+0x354>
    41c6:	6f 3f       	cpi	r22, 0xFF	; 255
    41c8:	49 f4       	brne	.+18     	; 0x41dc <nibbleChange+0x78>
    41ca:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    41ce:	82 50       	subi	r24, 0x02	; 2
    41d0:	8f 30       	cpi	r24, 0x0F	; 15
    41d2:	20 f0       	brcs	.+8      	; 0x41dc <nibbleChange+0x78>
    41d4:	80 e1       	ldi	r24, 0x10	; 16
    41d6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    41da:	6e c1       	rjmp	.+732    	; 0x44b8 <nibbleChange+0x354>
    41dc:	e4 ec       	ldi	r30, 0xC4	; 196
    41de:	f5 e0       	ldi	r31, 0x05	; 5
    41e0:	80 81       	ld	r24, Z
    41e2:	68 0f       	add	r22, r24
    41e4:	60 83       	st	Z, r22
    41e6:	68 c1       	rjmp	.+720    	; 0x44b8 <nibbleChange+0x354>
    41e8:	61 30       	cpi	r22, 0x01	; 1
    41ea:	41 f4       	brne	.+16     	; 0x41fc <nibbleChange+0x98>
    41ec:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    41f0:	80 31       	cpi	r24, 0x10	; 16
    41f2:	21 f4       	brne	.+8      	; 0x41fc <nibbleChange+0x98>
    41f4:	8f ef       	ldi	r24, 0xFF	; 255
    41f6:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    41fa:	5e c1       	rjmp	.+700    	; 0x44b8 <nibbleChange+0x354>
    41fc:	61 30       	cpi	r22, 0x01	; 1
    41fe:	41 f4       	brne	.+16     	; 0x4210 <nibbleChange+0xac>
    4200:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4204:	8f 3f       	cpi	r24, 0xFF	; 255
    4206:	21 f4       	brne	.+8      	; 0x4210 <nibbleChange+0xac>
    4208:	81 e0       	ldi	r24, 0x01	; 1
    420a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    420e:	54 c1       	rjmp	.+680    	; 0x44b8 <nibbleChange+0x354>
    4210:	6f 3f       	cpi	r22, 0xFF	; 255
    4212:	41 f4       	brne	.+16     	; 0x4224 <nibbleChange+0xc0>
    4214:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4218:	8f 3f       	cpi	r24, 0xFF	; 255
    421a:	21 f4       	brne	.+8      	; 0x4224 <nibbleChange+0xc0>
    421c:	80 e1       	ldi	r24, 0x10	; 16
    421e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4222:	4a c1       	rjmp	.+660    	; 0x44b8 <nibbleChange+0x354>
    4224:	6f 3f       	cpi	r22, 0xFF	; 255
    4226:	41 f4       	brne	.+16     	; 0x4238 <nibbleChange+0xd4>
    4228:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    422c:	81 30       	cpi	r24, 0x01	; 1
    422e:	21 f4       	brne	.+8      	; 0x4238 <nibbleChange+0xd4>
    4230:	8f ef       	ldi	r24, 0xFF	; 255
    4232:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4236:	40 c1       	rjmp	.+640    	; 0x44b8 <nibbleChange+0x354>
    4238:	e4 ec       	ldi	r30, 0xC4	; 196
    423a:	f5 e0       	ldi	r31, 0x05	; 5
    423c:	80 81       	ld	r24, Z
    423e:	68 0f       	add	r22, r24
    4240:	60 83       	st	Z, r22
    4242:	3a c1       	rjmp	.+628    	; 0x44b8 <nibbleChange+0x354>
    4244:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4248:	8f 3f       	cpi	r24, 0xFF	; 255
    424a:	09 f4       	brne	.+2      	; 0x424e <nibbleChange+0xea>
    424c:	c1 e0       	ldi	r28, 0x01	; 1
    424e:	c1 11       	cpse	r28, r1
    4250:	16 c0       	rjmp	.+44     	; 0x427e <nibbleChange+0x11a>
    4252:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4256:	8c 30       	cpi	r24, 0x0C	; 12
    4258:	50 f4       	brcc	.+20     	; 0x426e <nibbleChange+0x10a>
    425a:	8b 30       	cpi	r24, 0x0B	; 11
    425c:	11 f4       	brne	.+4      	; 0x4262 <nibbleChange+0xfe>
    425e:	61 30       	cpi	r22, 0x01	; 1
    4260:	41 f0       	breq	.+16     	; 0x4272 <nibbleChange+0x10e>
    4262:	81 11       	cpse	r24, r1
    4264:	02 c0       	rjmp	.+4      	; 0x426a <nibbleChange+0x106>
    4266:	6f 3f       	cpi	r22, 0xFF	; 255
    4268:	31 f0       	breq	.+12     	; 0x4276 <nibbleChange+0x112>
    426a:	68 0f       	add	r22, r24
    426c:	05 c0       	rjmp	.+10     	; 0x4278 <nibbleChange+0x114>
    426e:	60 e0       	ldi	r22, 0x00	; 0
    4270:	03 c0       	rjmp	.+6      	; 0x4278 <nibbleChange+0x114>
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	01 c0       	rjmp	.+2      	; 0x4278 <nibbleChange+0x114>
    4276:	6b e0       	ldi	r22, 0x0B	; 11
    4278:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    427c:	2b c0       	rjmp	.+86     	; 0x42d4 <nibbleChange+0x170>
    427e:	21 11       	cpse	r18, r1
    4280:	0a c0       	rjmp	.+20     	; 0x4296 <nibbleChange+0x132>
    4282:	81 11       	cpse	r24, r1
    4284:	02 c0       	rjmp	.+4      	; 0x428a <nibbleChange+0x126>
    4286:	6f 3f       	cpi	r22, 0xFF	; 255
    4288:	c1 f0       	breq	.+48     	; 0x42ba <nibbleChange+0x156>
    428a:	8a 30       	cpi	r24, 0x0A	; 10
    428c:	11 f4       	brne	.+4      	; 0x4292 <nibbleChange+0x12e>
    428e:	61 30       	cpi	r22, 0x01	; 1
    4290:	b1 f0       	breq	.+44     	; 0x42be <nibbleChange+0x15a>
    4292:	68 0f       	add	r22, r24
    4294:	1d c0       	rjmp	.+58     	; 0x42d0 <nibbleChange+0x16c>
    4296:	81 11       	cpse	r24, r1
    4298:	02 c0       	rjmp	.+4      	; 0x429e <nibbleChange+0x13a>
    429a:	6f 3f       	cpi	r22, 0xFF	; 255
    429c:	91 f0       	breq	.+36     	; 0x42c2 <nibbleChange+0x15e>
    429e:	8a 30       	cpi	r24, 0x0A	; 10
    42a0:	11 f4       	brne	.+4      	; 0x42a6 <nibbleChange+0x142>
    42a2:	61 30       	cpi	r22, 0x01	; 1
    42a4:	81 f0       	breq	.+32     	; 0x42c6 <nibbleChange+0x162>
    42a6:	8f 3f       	cpi	r24, 0xFF	; 255
    42a8:	11 f4       	brne	.+4      	; 0x42ae <nibbleChange+0x14a>
    42aa:	61 30       	cpi	r22, 0x01	; 1
    42ac:	71 f0       	breq	.+28     	; 0x42ca <nibbleChange+0x166>
    42ae:	8f 3f       	cpi	r24, 0xFF	; 255
    42b0:	11 f4       	brne	.+4      	; 0x42b6 <nibbleChange+0x152>
    42b2:	6f 3f       	cpi	r22, 0xFF	; 255
    42b4:	61 f0       	breq	.+24     	; 0x42ce <nibbleChange+0x16a>
    42b6:	68 0f       	add	r22, r24
    42b8:	0b c0       	rjmp	.+22     	; 0x42d0 <nibbleChange+0x16c>
    42ba:	6a e0       	ldi	r22, 0x0A	; 10
    42bc:	09 c0       	rjmp	.+18     	; 0x42d0 <nibbleChange+0x16c>
    42be:	60 e0       	ldi	r22, 0x00	; 0
    42c0:	07 c0       	rjmp	.+14     	; 0x42d0 <nibbleChange+0x16c>
    42c2:	6f ef       	ldi	r22, 0xFF	; 255
    42c4:	05 c0       	rjmp	.+10     	; 0x42d0 <nibbleChange+0x16c>
    42c6:	6f ef       	ldi	r22, 0xFF	; 255
    42c8:	03 c0       	rjmp	.+6      	; 0x42d0 <nibbleChange+0x16c>
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	01 c0       	rjmp	.+2      	; 0x42d0 <nibbleChange+0x16c>
    42ce:	6a e0       	ldi	r22, 0x0A	; 10
    42d0:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    42d4:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    42d8:	9f 3f       	cpi	r25, 0xFF	; 255
    42da:	09 f4       	brne	.+2      	; 0x42de <nibbleChange+0x17a>
    42dc:	ed c0       	rjmp	.+474    	; 0x44b8 <nibbleChange+0x354>
    42de:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    42e2:	8f 3f       	cpi	r24, 0xFF	; 255
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <nibbleChange+0x184>
    42e6:	e8 c0       	rjmp	.+464    	; 0x44b8 <nibbleChange+0x354>
    42e8:	28 2f       	mov	r18, r24
    42ea:	22 0f       	add	r18, r18
    42ec:	82 0f       	add	r24, r18
    42ee:	28 2f       	mov	r18, r24
    42f0:	22 0f       	add	r18, r18
    42f2:	22 0f       	add	r18, r18
    42f4:	92 0f       	add	r25, r18
    42f6:	0a f0       	brmi	.+2      	; 0x42fa <nibbleChange+0x196>
    42f8:	df c0       	rjmp	.+446    	; 0x44b8 <nibbleChange+0x354>
    42fa:	e4 ec       	ldi	r30, 0xC4	; 196
    42fc:	f5 e0       	ldi	r31, 0x05	; 5
    42fe:	87 e0       	ldi	r24, 0x07	; 7
    4300:	80 83       	st	Z, r24
    4302:	8a e0       	ldi	r24, 0x0A	; 10
    4304:	81 83       	std	Z+1, r24	; 0x01
    4306:	d8 c0       	rjmp	.+432    	; 0x44b8 <nibbleChange+0x354>
    4308:	c1 11       	cpse	r28, r1
    430a:	07 c0       	rjmp	.+14     	; 0x431a <nibbleChange+0x1b6>
    430c:	e4 ec       	ldi	r30, 0xC4	; 196
    430e:	f5 e0       	ldi	r31, 0x05	; 5
    4310:	80 81       	ld	r24, Z
    4312:	68 0f       	add	r22, r24
    4314:	67 70       	andi	r22, 0x07	; 7
    4316:	60 83       	st	Z, r22
    4318:	cf c0       	rjmp	.+414    	; 0x44b8 <nibbleChange+0x354>
    431a:	d0 e0       	ldi	r29, 0x00	; 0
    431c:	04 ec       	ldi	r16, 0xC4	; 196
    431e:	15 e0       	ldi	r17, 0x05	; 5
    4320:	cc 53       	subi	r28, 0x3C	; 60
    4322:	da 4f       	sbci	r29, 0xFA	; 250
    4324:	88 81       	ld	r24, Y
    4326:	86 0f       	add	r24, r22
    4328:	14 df       	rcall	.-472    	; 0x4152 <nibbleCheckOvfl>
    432a:	88 83       	st	Y, r24
    432c:	f8 01       	movw	r30, r16
    432e:	81 81       	ldd	r24, Z+1	; 0x01
    4330:	92 81       	ldd	r25, Z+2	; 0x02
    4332:	88 0f       	add	r24, r24
    4334:	28 2f       	mov	r18, r24
    4336:	22 0f       	add	r18, r18
    4338:	22 0f       	add	r18, r18
    433a:	82 0f       	add	r24, r18
    433c:	89 0f       	add	r24, r25
    433e:	80 32       	cpi	r24, 0x20	; 32
    4340:	2c f0       	brlt	.+10     	; 0x434c <nibbleChange+0x1e8>
    4342:	83 e0       	ldi	r24, 0x03	; 3
    4344:	81 83       	std	Z+1, r24	; 0x01
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	82 83       	std	Z+2, r24	; 0x02
    434a:	b6 c0       	rjmp	.+364    	; 0x44b8 <nibbleChange+0x354>
    434c:	88 23       	and	r24, r24
    434e:	0c f0       	brlt	.+2      	; 0x4352 <nibbleChange+0x1ee>
    4350:	b3 c0       	rjmp	.+358    	; 0x44b8 <nibbleChange+0x354>
    4352:	e4 ec       	ldi	r30, 0xC4	; 196
    4354:	f5 e0       	ldi	r31, 0x05	; 5
    4356:	11 82       	std	Z+1, r1	; 0x01
    4358:	12 82       	std	Z+2, r1	; 0x02
    435a:	ae c0       	rjmp	.+348    	; 0x44b8 <nibbleChange+0x354>
    435c:	d0 e0       	ldi	r29, 0x00	; 0
    435e:	04 ec       	ldi	r16, 0xC4	; 196
    4360:	15 e0       	ldi	r17, 0x05	; 5
    4362:	cc 53       	subi	r28, 0x3C	; 60
    4364:	da 4f       	sbci	r29, 0xFA	; 250
    4366:	88 81       	ld	r24, Y
    4368:	86 0f       	add	r24, r22
    436a:	f3 de       	rcall	.-538    	; 0x4152 <nibbleCheckOvfl>
    436c:	88 83       	st	Y, r24
    436e:	f8 01       	movw	r30, r16
    4370:	20 81       	ld	r18, Z
    4372:	81 81       	ldd	r24, Z+1	; 0x01
    4374:	90 e0       	ldi	r25, 0x00	; 0
    4376:	ac 01       	movw	r20, r24
    4378:	44 0f       	add	r20, r20
    437a:	55 1f       	adc	r21, r21
    437c:	88 0f       	add	r24, r24
    437e:	99 1f       	adc	r25, r25
    4380:	88 0f       	add	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	84 0f       	add	r24, r20
    438a:	95 1f       	adc	r25, r21
    438c:	f4 e6       	ldi	r31, 0x64	; 100
    438e:	2f 9f       	mul	r18, r31
    4390:	80 0d       	add	r24, r0
    4392:	91 1d       	adc	r25, r1
    4394:	11 24       	eor	r1, r1
    4396:	f8 01       	movw	r30, r16
    4398:	22 81       	ldd	r18, Z+2	; 0x02
    439a:	82 0f       	add	r24, r18
    439c:	91 1d       	adc	r25, r1
    439e:	8f 3f       	cpi	r24, 0xFF	; 255
    43a0:	91 05       	cpc	r25, r1
    43a2:	09 f0       	breq	.+2      	; 0x43a6 <nibbleChange+0x242>
    43a4:	0c f4       	brge	.+2      	; 0x43a8 <nibbleChange+0x244>
    43a6:	88 c0       	rjmp	.+272    	; 0x44b8 <nibbleChange+0x354>
    43a8:	82 e0       	ldi	r24, 0x02	; 2
    43aa:	80 83       	st	Z, r24
    43ac:	85 e0       	ldi	r24, 0x05	; 5
    43ae:	81 83       	std	Z+1, r24	; 0x01
    43b0:	82 83       	std	Z+2, r24	; 0x02
    43b2:	82 c0       	rjmp	.+260    	; 0x44b8 <nibbleChange+0x354>
    43b4:	22 23       	and	r18, r18
    43b6:	a1 f0       	breq	.+40     	; 0x43e0 <nibbleChange+0x27c>
    43b8:	d0 e0       	ldi	r29, 0x00	; 0
    43ba:	fe 01       	movw	r30, r28
    43bc:	ec 53       	subi	r30, 0x3C	; 60
    43be:	fa 4f       	sbci	r31, 0xFA	; 250
    43c0:	80 81       	ld	r24, Z
    43c2:	68 0f       	add	r22, r24
    43c4:	60 83       	st	Z, r22
    43c6:	64 30       	cpi	r22, 0x04	; 4
    43c8:	19 f4       	brne	.+6      	; 0x43d0 <nibbleChange+0x26c>
    43ca:	8f ef       	ldi	r24, 0xFF	; 255
    43cc:	80 83       	st	Z, r24
    43ce:	74 c0       	rjmp	.+232    	; 0x44b8 <nibbleChange+0x354>
    43d0:	6e 3f       	cpi	r22, 0xFE	; 254
    43d2:	09 f0       	breq	.+2      	; 0x43d6 <nibbleChange+0x272>
    43d4:	71 c0       	rjmp	.+226    	; 0x44b8 <nibbleChange+0x354>
    43d6:	cc 53       	subi	r28, 0x3C	; 60
    43d8:	da 4f       	sbci	r29, 0xFA	; 250
    43da:	83 e0       	ldi	r24, 0x03	; 3
    43dc:	88 83       	st	Y, r24
    43de:	6c c0       	rjmp	.+216    	; 0x44b8 <nibbleChange+0x354>
    43e0:	d0 e0       	ldi	r29, 0x00	; 0
    43e2:	fe 01       	movw	r30, r28
    43e4:	ec 53       	subi	r30, 0x3C	; 60
    43e6:	fa 4f       	sbci	r31, 0xFA	; 250
    43e8:	80 81       	ld	r24, Z
    43ea:	81 11       	cpse	r24, r1
    43ec:	05 c0       	rjmp	.+10     	; 0x43f8 <nibbleChange+0x294>
    43ee:	6f 3f       	cpi	r22, 0xFF	; 255
    43f0:	19 f4       	brne	.+6      	; 0x43f8 <nibbleChange+0x294>
    43f2:	83 e0       	ldi	r24, 0x03	; 3
    43f4:	80 83       	st	Z, r24
    43f6:	60 c0       	rjmp	.+192    	; 0x44b8 <nibbleChange+0x354>
    43f8:	83 30       	cpi	r24, 0x03	; 3
    43fa:	31 f4       	brne	.+12     	; 0x4408 <nibbleChange+0x2a4>
    43fc:	61 30       	cpi	r22, 0x01	; 1
    43fe:	21 f4       	brne	.+8      	; 0x4408 <nibbleChange+0x2a4>
    4400:	cc 53       	subi	r28, 0x3C	; 60
    4402:	da 4f       	sbci	r29, 0xFA	; 250
    4404:	18 82       	st	Y, r1
    4406:	58 c0       	rjmp	.+176    	; 0x44b8 <nibbleChange+0x354>
    4408:	cc 53       	subi	r28, 0x3C	; 60
    440a:	da 4f       	sbci	r29, 0xFA	; 250
    440c:	68 0f       	add	r22, r24
    440e:	68 83       	st	Y, r22
    4410:	53 c0       	rjmp	.+166    	; 0x44b8 <nibbleChange+0x354>
    4412:	d0 e0       	ldi	r29, 0x00	; 0
    4414:	cc 53       	subi	r28, 0x3C	; 60
    4416:	da 4f       	sbci	r29, 0xFA	; 250
    4418:	88 81       	ld	r24, Y
    441a:	68 0f       	add	r22, r24
    441c:	63 70       	andi	r22, 0x03	; 3
    441e:	68 83       	st	Y, r22
    4420:	4b c0       	rjmp	.+150    	; 0x44b8 <nibbleChange+0x354>
    4422:	e4 ec       	ldi	r30, 0xC4	; 196
    4424:	f5 e0       	ldi	r31, 0x05	; 5
    4426:	80 81       	ld	r24, Z
    4428:	80 95       	com	r24
    442a:	80 83       	st	Z, r24
    442c:	45 c0       	rjmp	.+138    	; 0x44b8 <nibbleChange+0x354>
    442e:	d0 e0       	ldi	r29, 0x00	; 0
    4430:	81 e0       	ldi	r24, 0x01	; 1
    4432:	61 fd       	sbrc	r22, 1
    4434:	80 e0       	ldi	r24, 0x00	; 0
    4436:	cc 53       	subi	r28, 0x3C	; 60
    4438:	da 4f       	sbci	r29, 0xFA	; 250
    443a:	88 83       	st	Y, r24
    443c:	3d c0       	rjmp	.+122    	; 0x44b8 <nibbleChange+0x354>
    443e:	61 30       	cpi	r22, 0x01	; 1
    4440:	41 f4       	brne	.+16     	; 0x4452 <nibbleChange+0x2ee>
    4442:	d0 e0       	ldi	r29, 0x00	; 0
    4444:	cc 53       	subi	r28, 0x3C	; 60
    4446:	da 4f       	sbci	r29, 0xFA	; 250
    4448:	88 81       	ld	r24, Y
    444a:	87 70       	andi	r24, 0x07	; 7
    444c:	8f 5f       	subi	r24, 0xFF	; 255
    444e:	88 83       	st	Y, r24
    4450:	33 c0       	rjmp	.+102    	; 0x44b8 <nibbleChange+0x354>
    4452:	ec 2f       	mov	r30, r28
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	ec 53       	subi	r30, 0x3C	; 60
    4458:	fa 4f       	sbci	r31, 0xFA	; 250
    445a:	80 81       	ld	r24, Z
    445c:	82 50       	subi	r24, 0x02	; 2
    445e:	87 70       	andi	r24, 0x07	; 7
    4460:	8f 5f       	subi	r24, 0xFF	; 255
    4462:	80 83       	st	Z, r24
    4464:	29 c0       	rjmp	.+82     	; 0x44b8 <nibbleChange+0x354>
    4466:	e4 ec       	ldi	r30, 0xC4	; 196
    4468:	f5 e0       	ldi	r31, 0x05	; 5
    446a:	90 81       	ld	r25, Z
    446c:	81 81       	ldd	r24, Z+1	; 0x01
    446e:	99 0f       	add	r25, r25
    4470:	29 2f       	mov	r18, r25
    4472:	22 0f       	add	r18, r18
    4474:	22 0f       	add	r18, r18
    4476:	92 0f       	add	r25, r18
    4478:	89 0f       	add	r24, r25
    447a:	c1 11       	cpse	r28, r1
    447c:	07 c0       	rjmp	.+14     	; 0x448c <nibbleChange+0x328>
    447e:	66 0f       	add	r22, r22
    4480:	96 2f       	mov	r25, r22
    4482:	99 0f       	add	r25, r25
    4484:	99 0f       	add	r25, r25
    4486:	69 0f       	add	r22, r25
    4488:	68 0f       	add	r22, r24
    448a:	01 c0       	rjmp	.+2      	; 0x448e <nibbleChange+0x32a>
    448c:	68 0f       	add	r22, r24
    448e:	66 23       	and	r22, r22
    4490:	1c f0       	brlt	.+6      	; 0x4498 <nibbleChange+0x334>
    4492:	61 34       	cpi	r22, 0x41	; 65
    4494:	1c f4       	brge	.+6      	; 0x449c <nibbleChange+0x338>
    4496:	03 c0       	rjmp	.+6      	; 0x449e <nibbleChange+0x33a>
    4498:	60 e0       	ldi	r22, 0x00	; 0
    449a:	01 c0       	rjmp	.+2      	; 0x449e <nibbleChange+0x33a>
    449c:	60 e0       	ldi	r22, 0x00	; 0
    449e:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    44a2:	06 c0       	rjmp	.+12     	; 0x44b0 <nibbleChange+0x34c>
    44a4:	e4 ec       	ldi	r30, 0xC4	; 196
    44a6:	f5 e0       	ldi	r31, 0x05	; 5
    44a8:	80 81       	ld	r24, Z
    44aa:	8f 5f       	subi	r24, 0xFF	; 255
    44ac:	80 83       	st	Z, r24
    44ae:	6a 50       	subi	r22, 0x0A	; 10
    44b0:	6a 30       	cpi	r22, 0x0A	; 10
    44b2:	c4 f7       	brge	.-16     	; 0x44a4 <nibbleChange+0x340>
    44b4:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    44b8:	df 91       	pop	r29
    44ba:	cf 91       	pop	r28
    44bc:	1f 91       	pop	r17
    44be:	0f 91       	pop	r16
    44c0:	08 95       	ret

000044c2 <nibbleToData>:
    44c2:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    44c6:	8e 2f       	mov	r24, r30
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	fc 01       	movw	r30, r24
    44cc:	32 97       	sbiw	r30, 0x02	; 2
    44ce:	ed 30       	cpi	r30, 0x0D	; 13
    44d0:	f1 05       	cpc	r31, r1
    44d2:	08 f0       	brcs	.+2      	; 0x44d6 <nibbleToData+0x14>
    44d4:	da c0       	rjmp	.+436    	; 0x468a <nibbleToData+0x1c8>
    44d6:	88 27       	eor	r24, r24
    44d8:	e7 56       	subi	r30, 0x67	; 103
    44da:	ff 4f       	sbci	r31, 0xFF	; 255
    44dc:	8f 4f       	sbci	r24, 0xFF	; 255
    44de:	0c 94 c0 3a 	jmp	0x7580	; 0x7580 <__tablejump2__>
    44e2:	e4 ec       	ldi	r30, 0xC4	; 196
    44e4:	f5 e0       	ldi	r31, 0x05	; 5
    44e6:	80 81       	ld	r24, Z
    44e8:	20 e1       	ldi	r18, 0x10	; 16
    44ea:	82 9f       	mul	r24, r18
    44ec:	c0 01       	movw	r24, r0
    44ee:	11 24       	eor	r1, r1
    44f0:	91 81       	ldd	r25, Z+1	; 0x01
    44f2:	9f 70       	andi	r25, 0x0F	; 15
    44f4:	89 2b       	or	r24, r25
    44f6:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    44fa:	08 95       	ret
    44fc:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    4500:	8f ef       	ldi	r24, 0xFF	; 255
    4502:	89 0f       	add	r24, r25
    4504:	80 31       	cpi	r24, 0x10	; 16
    4506:	18 f0       	brcs	.+6      	; 0x450e <nibbleToData+0x4c>
    4508:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    450c:	08 95       	ret
    450e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4512:	08 95       	ret
    4514:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    4518:	9f 3f       	cpi	r25, 0xFF	; 255
    451a:	21 f0       	breq	.+8      	; 0x4524 <nibbleToData+0x62>
    451c:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4520:	8f 3f       	cpi	r24, 0xFF	; 255
    4522:	21 f4       	brne	.+8      	; 0x452c <nibbleToData+0x6a>
    4524:	8f ef       	ldi	r24, 0xFF	; 255
    4526:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    452a:	08 95       	ret
    452c:	28 2f       	mov	r18, r24
    452e:	22 0f       	add	r18, r18
    4530:	82 0f       	add	r24, r18
    4532:	88 0f       	add	r24, r24
    4534:	88 0f       	add	r24, r24
    4536:	89 0f       	add	r24, r25
    4538:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    453c:	08 95       	ret
    453e:	e4 ec       	ldi	r30, 0xC4	; 196
    4540:	f5 e0       	ldi	r31, 0x05	; 5
    4542:	80 81       	ld	r24, Z
    4544:	30 e2       	ldi	r19, 0x20	; 32
    4546:	83 9f       	mul	r24, r19
    4548:	c0 01       	movw	r24, r0
    454a:	11 24       	eor	r1, r1
    454c:	21 81       	ldd	r18, Z+1	; 0x01
    454e:	32 81       	ldd	r19, Z+2	; 0x02
    4550:	22 0f       	add	r18, r18
    4552:	42 2f       	mov	r20, r18
    4554:	44 0f       	add	r20, r20
    4556:	44 0f       	add	r20, r20
    4558:	24 0f       	add	r18, r20
    455a:	23 0f       	add	r18, r19
    455c:	20 32       	cpi	r18, 0x20	; 32
    455e:	20 f0       	brcs	.+8      	; 0x4568 <nibbleToData+0xa6>
    4560:	8f 61       	ori	r24, 0x1F	; 31
    4562:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4566:	08 95       	ret
    4568:	82 2b       	or	r24, r18
    456a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    456e:	08 95       	ret
    4570:	e4 ec       	ldi	r30, 0xC4	; 196
    4572:	f5 e0       	ldi	r31, 0x05	; 5
    4574:	20 81       	ld	r18, Z
    4576:	81 81       	ldd	r24, Z+1	; 0x01
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	ac 01       	movw	r20, r24
    457c:	44 0f       	add	r20, r20
    457e:	55 1f       	adc	r21, r21
    4580:	88 0f       	add	r24, r24
    4582:	99 1f       	adc	r25, r25
    4584:	88 0f       	add	r24, r24
    4586:	99 1f       	adc	r25, r25
    4588:	88 0f       	add	r24, r24
    458a:	99 1f       	adc	r25, r25
    458c:	84 0f       	add	r24, r20
    458e:	95 1f       	adc	r25, r21
    4590:	34 e6       	ldi	r19, 0x64	; 100
    4592:	23 9f       	mul	r18, r19
    4594:	80 0d       	add	r24, r0
    4596:	91 1d       	adc	r25, r1
    4598:	11 24       	eor	r1, r1
    459a:	22 81       	ldd	r18, Z+2	; 0x02
    459c:	82 0f       	add	r24, r18
    459e:	91 1d       	adc	r25, r1
    45a0:	8f 3f       	cpi	r24, 0xFF	; 255
    45a2:	91 05       	cpc	r25, r1
    45a4:	29 f0       	breq	.+10     	; 0x45b0 <nibbleToData+0xee>
    45a6:	20 f0       	brcs	.+8      	; 0x45b0 <nibbleToData+0xee>
    45a8:	8f ef       	ldi	r24, 0xFF	; 255
    45aa:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45ae:	08 95       	ret
    45b0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45b4:	08 95       	ret
    45b6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    45ba:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45be:	84 30       	cpi	r24, 0x04	; 4
    45c0:	08 f4       	brcc	.+2      	; 0x45c4 <nibbleToData+0x102>
    45c2:	63 c0       	rjmp	.+198    	; 0x468a <nibbleToData+0x1c8>
    45c4:	8f ef       	ldi	r24, 0xFF	; 255
    45c6:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45ca:	08 95       	ret
    45cc:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    45d0:	83 70       	andi	r24, 0x03	; 3
    45d2:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45d6:	08 95       	ret
    45d8:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    45dc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    45e0:	08 95       	ret
    45e2:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	0c c0       	rjmp	.+24     	; 0x4602 <nibbleToData+0x140>
    45ea:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    45ee:	99 0f       	add	r25, r25
    45f0:	e8 2f       	mov	r30, r24
    45f2:	f0 e0       	ldi	r31, 0x00	; 0
    45f4:	ec 53       	subi	r30, 0x3C	; 60
    45f6:	fa 4f       	sbci	r31, 0xFA	; 250
    45f8:	20 81       	ld	r18, Z
    45fa:	92 0f       	add	r25, r18
    45fc:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    4600:	8f 5f       	subi	r24, 0xFF	; 255
    4602:	88 30       	cpi	r24, 0x08	; 8
    4604:	90 f3       	brcs	.-28     	; 0x45ea <nibbleToData+0x128>
    4606:	08 95       	ret
    4608:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    460c:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    4610:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    4614:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    4618:	a2 ea       	ldi	r26, 0xA2	; 162
    461a:	b5 e0       	ldi	r27, 0x05	; 5
    461c:	88 e0       	ldi	r24, 0x08	; 8
    461e:	10 c0       	rjmp	.+32     	; 0x4640 <nibbleToData+0x17e>
    4620:	82 50       	subi	r24, 0x02	; 2
    4622:	f0 e0       	ldi	r31, 0x00	; 0
    4624:	ec 53       	subi	r30, 0x3C	; 60
    4626:	fa 4f       	sbci	r31, 0xFA	; 250
    4628:	90 81       	ld	r25, Z
    462a:	e8 2f       	mov	r30, r24
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	ec 53       	subi	r30, 0x3C	; 60
    4630:	fa 4f       	sbci	r31, 0xFA	; 250
    4632:	20 81       	ld	r18, Z
    4634:	30 e1       	ldi	r19, 0x10	; 16
    4636:	23 9f       	mul	r18, r19
    4638:	90 0d       	add	r25, r0
    463a:	11 24       	eor	r1, r1
    463c:	9c 93       	st	X, r25
    463e:	11 96       	adiw	r26, 0x01	; 1
    4640:	ef ef       	ldi	r30, 0xFF	; 255
    4642:	e8 0f       	add	r30, r24
    4644:	81 11       	cpse	r24, r1
    4646:	ec cf       	rjmp	.-40     	; 0x4620 <nibbleToData+0x15e>
    4648:	08 95       	ret
    464a:	e4 ec       	ldi	r30, 0xC4	; 196
    464c:	f5 e0       	ldi	r31, 0x05	; 5
    464e:	20 81       	ld	r18, Z
    4650:	91 81       	ldd	r25, Z+1	; 0x01
    4652:	89 2f       	mov	r24, r25
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	01 97       	sbiw	r24, 0x01	; 1
    4658:	88 0f       	add	r24, r24
    465a:	99 1f       	adc	r25, r25
    465c:	88 0f       	add	r24, r24
    465e:	99 1f       	adc	r25, r25
    4660:	88 0f       	add	r24, r24
    4662:	99 1f       	adc	r25, r25
    4664:	9f ef       	ldi	r25, 0xFF	; 255
    4666:	92 0f       	add	r25, r18
    4668:	89 2b       	or	r24, r25
    466a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    466e:	08 95       	ret
    4670:	e4 ec       	ldi	r30, 0xC4	; 196
    4672:	f5 e0       	ldi	r31, 0x05	; 5
    4674:	80 81       	ld	r24, Z
    4676:	91 81       	ldd	r25, Z+1	; 0x01
    4678:	88 0f       	add	r24, r24
    467a:	28 2f       	mov	r18, r24
    467c:	22 0f       	add	r18, r18
    467e:	22 0f       	add	r18, r18
    4680:	82 0f       	add	r24, r18
    4682:	89 0f       	add	r24, r25
    4684:	81 50       	subi	r24, 0x01	; 1
    4686:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    468a:	08 95       	ret

0000468c <menuTextOut>:
    468c:	0f 93       	push	r16
    468e:	1f 93       	push	r17
    4690:	cf 93       	push	r28
    4692:	df 93       	push	r29
    4694:	8c 01       	movw	r16, r24
    4696:	d6 2f       	mov	r29, r22
    4698:	c0 e0       	ldi	r28, 0x00	; 0
    469a:	0c c0       	rjmp	.+24     	; 0x46b4 <menuTextOut+0x28>
    469c:	f8 01       	movw	r30, r16
    469e:	84 91       	lpm	r24, Z
    46a0:	88 23       	and	r24, r24
    46a2:	19 f0       	breq	.+6      	; 0x46aa <menuTextOut+0x1e>
    46a4:	0f 5f       	subi	r16, 0xFF	; 255
    46a6:	1f 4f       	sbci	r17, 0xFF	; 255
    46a8:	02 c0       	rjmp	.+4      	; 0x46ae <menuTextOut+0x22>
    46aa:	8d 2f       	mov	r24, r29
    46ac:	d0 e2       	ldi	r29, 0x20	; 32
    46ae:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    46b2:	cf 5f       	subi	r28, 0xFF	; 255
    46b4:	ca 30       	cpi	r28, 0x0A	; 10
    46b6:	90 f3       	brcs	.-28     	; 0x469c <menuTextOut+0x10>
    46b8:	df 91       	pop	r29
    46ba:	cf 91       	pop	r28
    46bc:	1f 91       	pop	r17
    46be:	0f 91       	pop	r16
    46c0:	08 95       	ret

000046c2 <menuParentMenuToLCD>:
    46c2:	80 e4       	ldi	r24, 0x40	; 64
    46c4:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    46c8:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    46cc:	e1 11       	cpse	r30, r1
    46ce:	07 c0       	rjmp	.+14     	; 0x46de <menuParentMenuToLCD+0x1c>
    46d0:	6a e3       	ldi	r22, 0x3A	; 58
    46d2:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    46d6:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    46da:	d8 cf       	rjmp	.-80     	; 0x468c <menuTextOut>
    46dc:	08 95       	ret
    46de:	f0 e0       	ldi	r31, 0x00	; 0
    46e0:	31 97       	sbiw	r30, 0x01	; 1
    46e2:	ee 0f       	add	r30, r30
    46e4:	ff 1f       	adc	r31, r31
    46e6:	e5 58       	subi	r30, 0x85	; 133
    46e8:	fa 4f       	sbci	r31, 0xFA	; 250
    46ea:	80 81       	ld	r24, Z
    46ec:	91 81       	ldd	r25, Z+1	; 0x01
    46ee:	6a e3       	ldi	r22, 0x3A	; 58
    46f0:	02 96       	adiw	r24, 0x02	; 2
    46f2:	cc cf       	rjmp	.-104    	; 0x468c <menuTextOut>
    46f4:	08 95       	ret

000046f6 <menuDisplayValue>:
    46f6:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    46fa:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    46fe:	84 91       	lpm	r24, Z
    4700:	8f 73       	andi	r24, 0x3F	; 63
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	02 97       	sbiw	r24, 0x02	; 2
    4706:	1c f0       	brlt	.+6      	; 0x470e <menuDisplayValue+0x18>
    4708:	c8 da       	rcall	.-2672   	; 0x3c9a <dataToNibbles>
    470a:	ba db       	rcall	.-2188   	; 0x3e80 <nibbleToLCDstring>
    470c:	07 cd       	rjmp	.-1522   	; 0x411c <LCDStringOut>
    470e:	08 95       	ret

00004710 <menuCursorSetDataNibble>:
    4710:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4714:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4718:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    471c:	e8 0f       	add	r30, r24
    471e:	f1 1d       	adc	r31, r1
    4720:	31 96       	adiw	r30, 0x01	; 1
    4722:	84 91       	lpm	r24, Z
    4724:	82 5e       	subi	r24, 0xE2	; 226
    4726:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    472a:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4734:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4738:	84 91       	lpm	r24, Z
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	01 97       	sbiw	r24, 0x01	; 1
    473e:	28 17       	cp	r18, r24
    4740:	39 07       	cpc	r19, r25
    4742:	14 f4       	brge	.+4      	; 0x4748 <menuCursorSetDataNibble+0x38>
    4744:	68 da       	rcall	.-2864   	; 0x3c16 <softkeyRight>
    4746:	03 c0       	rjmp	.+6      	; 0x474e <menuCursorSetDataNibble+0x3e>
    4748:	83 e0       	ldi	r24, 0x03	; 3
    474a:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    474e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4752:	88 23       	and	r24, r24
    4754:	11 f0       	breq	.+4      	; 0x475a <menuCursorSetDataNibble+0x4a>
    4756:	59 da       	rcall	.-2894   	; 0x3c0a <softkeyLeft>
    4758:	03 c0       	rjmp	.+6      	; 0x4760 <menuCursorSetDataNibble+0x50>
    475a:	82 e0       	ldi	r24, 0x02	; 2
    475c:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    4760:	78 da       	rcall	.-2832   	; 0x3c52 <softkeyPlus>
    4762:	89 da       	rcall	.-2798   	; 0x3c76 <softkeyMinus>
    4764:	0c 94 5d 3a 	jmp	0x74ba	; 0x74ba <keylabel_toLCD>
    4768:	08 95       	ret

0000476a <menuCursorSetExtra>:
    476a:	84 e1       	ldi	r24, 0x14	; 20
    476c:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <lcd_goto>
    4770:	08 95       	ret

00004772 <menuOnEnterStatusMidiIn>:
    4772:	0f 93       	push	r16
    4774:	1f 93       	push	r17
    4776:	cf 93       	push	r28
    4778:	f8 df       	rcall	.-16     	; 0x476a <menuCursorSetExtra>
    477a:	8e ee       	ldi	r24, 0xEE	; 238
    477c:	93 e0       	ldi	r25, 0x03	; 3
    477e:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    4782:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <midiRxBytesCount>
    4786:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <midiRxBytesCount+0x1>
    478a:	0e 94 46 39 	call	0x728c	; 0x728c <lcd_wordout>
    478e:	8d e2       	ldi	r24, 0x2D	; 45
    4790:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    4794:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <midiRxBytesCount>
    4798:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <midiRxBytesCount+0x1>
    479c:	04 97       	sbiw	r24, 0x04	; 4
    479e:	30 f4       	brcc	.+12     	; 0x47ac <menuOnEnterStatusMidiIn+0x3a>
    47a0:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <midiRxBytesCount>
    47a4:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <midiRxBytesCount+0x1>
    47a8:	c8 2f       	mov	r28, r24
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <menuOnEnterStatusMidiIn+0x3c>
    47ac:	c4 e0       	ldi	r28, 0x04	; 4
    47ae:	00 91 41 16 	lds	r16, 0x1641	; 0x801641 <midiRxInIndex>
    47b2:	10 e0       	ldi	r17, 0x00	; 0
    47b4:	02 5c       	subi	r16, 0xC2	; 194
    47b6:	1b 4e       	sbci	r17, 0xEB	; 235
    47b8:	13 c0       	rjmp	.+38     	; 0x47e0 <menuOnEnterStatusMidiIn+0x6e>
    47ba:	84 e1       	ldi	r24, 0x14	; 20
    47bc:	0f 33       	cpi	r16, 0x3F	; 63
    47be:	18 07       	cpc	r17, r24
    47c0:	10 f0       	brcs	.+4      	; 0x47c6 <menuOnEnterStatusMidiIn+0x54>
    47c2:	f8 01       	movw	r30, r16
    47c4:	02 c0       	rjmp	.+4      	; 0x47ca <menuOnEnterStatusMidiIn+0x58>
    47c6:	ee e3       	ldi	r30, 0x3E	; 62
    47c8:	f5 e1       	ldi	r31, 0x15	; 21
    47ca:	8f 01       	movw	r16, r30
    47cc:	01 50       	subi	r16, 0x01	; 1
    47ce:	11 09       	sbc	r17, r1
    47d0:	80 81       	ld	r24, Z
    47d2:	0e 94 ca 37 	call	0x6f94	; 0x6f94 <lcd_hexout>
    47d6:	c1 50       	subi	r28, 0x01	; 1
    47d8:	19 f0       	breq	.+6      	; 0x47e0 <menuOnEnterStatusMidiIn+0x6e>
    47da:	80 e2       	ldi	r24, 0x20	; 32
    47dc:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    47e0:	c1 11       	cpse	r28, r1
    47e2:	eb cf       	rjmp	.-42     	; 0x47ba <menuOnEnterStatusMidiIn+0x48>
    47e4:	80 e0       	ldi	r24, 0x00	; 0
    47e6:	cf 91       	pop	r28
    47e8:	1f 91       	pop	r17
    47ea:	0f 91       	pop	r16
    47ec:	08 95       	ret

000047ee <menuOnEnterStatusMidiOut>:
    47ee:	0f 93       	push	r16
    47f0:	1f 93       	push	r17
    47f2:	cf 93       	push	r28
    47f4:	ba df       	rcall	.-140    	; 0x476a <menuCursorSetExtra>
    47f6:	89 ee       	ldi	r24, 0xE9	; 233
    47f8:	93 e0       	ldi	r25, 0x03	; 3
    47fa:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    47fe:	80 91 4c 16 	lds	r24, 0x164C	; 0x80164c <midiTxBytesCount>
    4802:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <midiTxBytesCount+0x1>
    4806:	0e 94 46 39 	call	0x728c	; 0x728c <lcd_wordout>
    480a:	8d e2       	ldi	r24, 0x2D	; 45
    480c:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    4810:	80 91 4c 16 	lds	r24, 0x164C	; 0x80164c <midiTxBytesCount>
    4814:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <midiTxBytesCount+0x1>
    4818:	04 97       	sbiw	r24, 0x04	; 4
    481a:	30 f4       	brcc	.+12     	; 0x4828 <menuOnEnterStatusMidiOut+0x3a>
    481c:	80 91 4c 16 	lds	r24, 0x164C	; 0x80164c <midiTxBytesCount>
    4820:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <midiTxBytesCount+0x1>
    4824:	c8 2f       	mov	r28, r24
    4826:	01 c0       	rjmp	.+2      	; 0x482a <menuOnEnterStatusMidiOut+0x3c>
    4828:	c4 e0       	ldi	r28, 0x04	; 4
    482a:	00 91 ed 13 	lds	r16, 0x13ED	; 0x8013ed <midiTxInIndex>
    482e:	10 e0       	ldi	r17, 0x00	; 0
    4830:	02 5c       	subi	r16, 0xC2	; 194
    4832:	1a 4e       	sbci	r17, 0xEA	; 234
    4834:	13 c0       	rjmp	.+38     	; 0x485c <menuOnEnterStatusMidiOut+0x6e>
    4836:	85 e1       	ldi	r24, 0x15	; 21
    4838:	0f 33       	cpi	r16, 0x3F	; 63
    483a:	18 07       	cpc	r17, r24
    483c:	10 f0       	brcs	.+4      	; 0x4842 <menuOnEnterStatusMidiOut+0x54>
    483e:	f8 01       	movw	r30, r16
    4840:	02 c0       	rjmp	.+4      	; 0x4846 <menuOnEnterStatusMidiOut+0x58>
    4842:	ee e3       	ldi	r30, 0x3E	; 62
    4844:	f6 e1       	ldi	r31, 0x16	; 22
    4846:	8f 01       	movw	r16, r30
    4848:	01 50       	subi	r16, 0x01	; 1
    484a:	11 09       	sbc	r17, r1
    484c:	80 81       	ld	r24, Z
    484e:	0e 94 ca 37 	call	0x6f94	; 0x6f94 <lcd_hexout>
    4852:	c1 50       	subi	r28, 0x01	; 1
    4854:	19 f0       	breq	.+6      	; 0x485c <menuOnEnterStatusMidiOut+0x6e>
    4856:	80 e2       	ldi	r24, 0x20	; 32
    4858:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    485c:	c1 11       	cpse	r28, r1
    485e:	eb cf       	rjmp	.-42     	; 0x4836 <menuOnEnterStatusMidiOut+0x48>
    4860:	80 e0       	ldi	r24, 0x00	; 0
    4862:	cf 91       	pop	r28
    4864:	1f 91       	pop	r17
    4866:	0f 91       	pop	r16
    4868:	08 95       	ret

0000486a <menuOnEnterLogDisp>:
    486a:	0f 93       	push	r16
    486c:	1f 93       	push	r17
    486e:	cf 93       	push	r28
    4870:	8f 3f       	cpi	r24, 0xFF	; 255
    4872:	a9 f4       	brne	.+42     	; 0x489e <menuOnEnterLogDisp+0x34>
    4874:	0e 94 30 13 	call	0x2660	; 0x2660 <log_count>
    4878:	81 50       	subi	r24, 0x01	; 1
    487a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2995>
    487e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.2996>
    4882:	6f ed       	ldi	r22, 0xDF	; 223
    4884:	71 e1       	ldi	r23, 0x11	; 17
    4886:	80 e0       	ldi	r24, 0x00	; 0
    4888:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    488c:	69 ed       	ldi	r22, 0xD9	; 217
    488e:	71 e1       	ldi	r23, 0x11	; 17
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    4896:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
    489a:	cf ef       	ldi	r28, 0xFF	; 255
    489c:	2f c0       	rjmp	.+94     	; 0x48fc <menuOnEnterLogDisp+0x92>
    489e:	84 30       	cpi	r24, 0x04	; 4
    48a0:	49 f4       	brne	.+18     	; 0x48b4 <menuOnEnterLogDisp+0x4a>
    48a2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    48a6:	88 23       	and	r24, r24
    48a8:	21 f1       	breq	.+72     	; 0x48f2 <menuOnEnterLogDisp+0x88>
    48aa:	81 50       	subi	r24, 0x01	; 1
    48ac:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2995>
    48b0:	cf ef       	ldi	r28, 0xFF	; 255
    48b2:	24 c0       	rjmp	.+72     	; 0x48fc <menuOnEnterLogDisp+0x92>
    48b4:	81 30       	cpi	r24, 0x01	; 1
    48b6:	91 f4       	brne	.+36     	; 0x48dc <menuOnEnterLogDisp+0x72>
    48b8:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2995>
    48bc:	10 e0       	ldi	r17, 0x00	; 0
    48be:	0f 5f       	subi	r16, 0xFF	; 255
    48c0:	1f 4f       	sbci	r17, 0xFF	; 255
    48c2:	0e 94 30 13 	call	0x2660	; 0x2660 <log_count>
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	08 17       	cp	r16, r24
    48ca:	19 07       	cpc	r17, r25
    48cc:	a4 f4       	brge	.+40     	; 0x48f6 <menuOnEnterLogDisp+0x8c>
    48ce:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    48d2:	8f 5f       	subi	r24, 0xFF	; 255
    48d4:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2995>
    48d8:	cf ef       	ldi	r28, 0xFF	; 255
    48da:	10 c0       	rjmp	.+32     	; 0x48fc <menuOnEnterLogDisp+0x92>
    48dc:	83 30       	cpi	r24, 0x03	; 3
    48de:	11 f0       	breq	.+4      	; 0x48e4 <menuOnEnterLogDisp+0x7a>
    48e0:	85 30       	cpi	r24, 0x05	; 5
    48e2:	59 f4       	brne	.+22     	; 0x48fa <menuOnEnterLogDisp+0x90>
    48e4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2996>
    48e8:	80 95       	com	r24
    48ea:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.2996>
    48ee:	cf ef       	ldi	r28, 0xFF	; 255
    48f0:	05 c0       	rjmp	.+10     	; 0x48fc <menuOnEnterLogDisp+0x92>
    48f2:	cf ef       	ldi	r28, 0xFF	; 255
    48f4:	03 c0       	rjmp	.+6      	; 0x48fc <menuOnEnterLogDisp+0x92>
    48f6:	cf ef       	ldi	r28, 0xFF	; 255
    48f8:	01 c0       	rjmp	.+2      	; 0x48fc <menuOnEnterLogDisp+0x92>
    48fa:	c0 e0       	ldi	r28, 0x00	; 0
    48fc:	cf 3f       	cpi	r28, 0xFF	; 255
    48fe:	09 f0       	breq	.+2      	; 0x4902 <menuOnEnterLogDisp+0x98>
    4900:	54 c0       	rjmp	.+168    	; 0x49aa <menuOnEnterLogDisp+0x140>
    4902:	33 df       	rcall	.-410    	; 0x476a <menuCursorSetExtra>
    4904:	0e 94 30 13 	call	0x2660	; 0x2660 <log_count>
    4908:	81 11       	cpse	r24, r1
    490a:	06 c0       	rjmp	.+12     	; 0x4918 <menuOnEnterLogDisp+0xae>
    490c:	89 e9       	ldi	r24, 0x99	; 153
    490e:	93 e0       	ldi	r25, 0x03	; 3
    4910:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    4914:	c0 e0       	ldi	r28, 0x00	; 0
    4916:	1d c0       	rjmp	.+58     	; 0x4952 <menuOnEnterLogDisp+0xe8>
    4918:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    491c:	8f 5f       	subi	r24, 0xFF	; 255
    491e:	0e 94 06 38 	call	0x700c	; 0x700c <lcd_dec2out>
    4922:	8a e3       	ldi	r24, 0x3A	; 58
    4924:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    4928:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2996>
    492c:	81 11       	cpse	r24, r1
    492e:	08 c0       	rjmp	.+16     	; 0x4940 <menuOnEnterLogDisp+0xd6>
    4930:	60 e2       	ldi	r22, 0x20	; 32
    4932:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    4936:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <log_getShortTextFromIndex>
    493a:	0e 94 05 13 	call	0x260a	; 0x260a <lcd_puts>
    493e:	06 c0       	rjmp	.+12     	; 0x494c <menuOnEnterLogDisp+0xe2>
    4940:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    4944:	0e 94 77 13 	call	0x26ee	; 0x26ee <log_getErrorText>
    4948:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    494c:	0e 94 ce 39 	call	0x739c	; 0x739c <lcd_clrEol>
    4950:	0c df       	rcall	.-488    	; 0x476a <menuCursorSetExtra>
    4952:	61 e0       	ldi	r22, 0x01	; 1
    4954:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2996>
    4958:	8f 3f       	cpi	r24, 0xFF	; 255
    495a:	09 f0       	breq	.+2      	; 0x495e <menuOnEnterLogDisp+0xf4>
    495c:	60 e0       	ldi	r22, 0x00	; 0
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <keylabel_statcheck>
    4964:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2995>
    4968:	10 e0       	ldi	r17, 0x00	; 0
    496a:	0f 5f       	subi	r16, 0xFF	; 255
    496c:	1f 4f       	sbci	r17, 0xFF	; 255
    496e:	0e 94 30 13 	call	0x2660	; 0x2660 <log_count>
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	08 17       	cp	r16, r24
    4976:	19 07       	cpc	r17, r25
    4978:	34 f4       	brge	.+12     	; 0x4986 <menuOnEnterLogDisp+0x11c>
    497a:	69 ef       	ldi	r22, 0xF9	; 249
    497c:	71 e1       	ldi	r23, 0x11	; 17
    497e:	83 e0       	ldi	r24, 0x03	; 3
    4980:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    4984:	03 c0       	rjmp	.+6      	; 0x498c <menuOnEnterLogDisp+0x122>
    4986:	83 e0       	ldi	r24, 0x03	; 3
    4988:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    498c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    4990:	88 23       	and	r24, r24
    4992:	31 f0       	breq	.+12     	; 0x49a0 <menuOnEnterLogDisp+0x136>
    4994:	67 ef       	ldi	r22, 0xF7	; 247
    4996:	71 e1       	ldi	r23, 0x11	; 17
    4998:	82 e0       	ldi	r24, 0x02	; 2
    499a:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
    499e:	03 c0       	rjmp	.+6      	; 0x49a6 <menuOnEnterLogDisp+0x13c>
    49a0:	82 e0       	ldi	r24, 0x02	; 2
    49a2:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    49a6:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
    49aa:	8c 2f       	mov	r24, r28
    49ac:	cf 91       	pop	r28
    49ae:	1f 91       	pop	r17
    49b0:	0f 91       	pop	r16
    49b2:	08 95       	ret

000049b4 <menuCursorSetMenu>:
    49b4:	8a e4       	ldi	r24, 0x4A	; 74
    49b6:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <lcd_goto>
    49ba:	08 95       	ret

000049bc <menuClearExtraDisp>:
    49bc:	d6 de       	rcall	.-596    	; 0x476a <menuCursorSetExtra>
    49be:	8a e0       	ldi	r24, 0x0A	; 10
    49c0:	0c 94 c2 39 	jmp	0x7384	; 0x7384 <lcd_blank>
    49c4:	08 95       	ret

000049c6 <menu_ClearDataDisp>:
    49c6:	8e e1       	ldi	r24, 0x1E	; 30
    49c8:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    49cc:	8a e0       	ldi	r24, 0x0A	; 10
    49ce:	0c 94 c2 39 	jmp	0x7384	; 0x7384 <lcd_blank>
    49d2:	08 95       	ret

000049d4 <menuClearMenuDisp>:
    49d4:	80 e4       	ldi	r24, 0x40	; 64
    49d6:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    49da:	8a e0       	ldi	r24, 0x0A	; 10
    49dc:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
    49e0:	e9 df       	rcall	.-46     	; 0x49b4 <menuCursorSetMenu>
    49e2:	8a e0       	ldi	r24, 0x0A	; 10
    49e4:	0c 94 c2 39 	jmp	0x7384	; 0x7384 <lcd_blank>
    49e8:	08 95       	ret

000049ea <menu_ClearAllDisp>:
    49ea:	f4 df       	rcall	.-24     	; 0x49d4 <menuClearMenuDisp>
    49ec:	ec df       	rcall	.-40     	; 0x49c6 <menu_ClearDataDisp>
    49ee:	e6 cf       	rjmp	.-52     	; 0x49bc <menuClearExtraDisp>
    49f0:	08 95       	ret

000049f2 <menuCheckArrowDown>:
    49f2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    49f6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    49fa:	84 91       	lpm	r24, Z
    49fc:	8f 73       	andi	r24, 0x3F	; 63
    49fe:	81 30       	cpi	r24, 0x01	; 1
    4a00:	11 f4       	brne	.+4      	; 0x4a06 <menuCheckArrowDown+0x14>
    4a02:	0f c9       	rjmp	.-3554   	; 0x3c22 <softkeyDown>
    4a04:	08 95       	ret
    4a06:	3e 96       	adiw	r30, 0x0e	; 14
    4a08:	05 90       	lpm	r0, Z+
    4a0a:	f4 91       	lpm	r31, Z
    4a0c:	e0 2d       	mov	r30, r0
    4a0e:	30 97       	sbiw	r30, 0x00	; 0
    4a10:	59 f0       	breq	.+22     	; 0x4a28 <menuCheckArrowDown+0x36>
    4a12:	89 30       	cpi	r24, 0x09	; 9
    4a14:	39 f4       	brne	.+14     	; 0x4a24 <menuCheckArrowDown+0x32>
    4a16:	80 81       	ld	r24, Z
    4a18:	81 11       	cpse	r24, r1
    4a1a:	02 c0       	rjmp	.+4      	; 0x4a20 <menuCheckArrowDown+0x2e>
    4a1c:	08 c9       	rjmp	.-3568   	; 0x3c2e <softkeyOn>
    4a1e:	08 95       	ret
    4a20:	0c c9       	rjmp	.-3560   	; 0x3c3a <softkeyOff>
    4a22:	08 95       	ret
    4a24:	fe c8       	rjmp	.-3588   	; 0x3c22 <softkeyDown>
    4a26:	08 95       	ret
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	0c 94 49 3a 	jmp	0x7492	; 0x7492 <keylabel_clr>
    4a2e:	08 95       	ret

00004a30 <menuCurrMenuToLCD>:
    4a30:	cf 93       	push	r28
    4a32:	89 e4       	ldi	r24, 0x49	; 73
    4a34:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    4a38:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4a3c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4a40:	c4 91       	lpm	r28, Z
    4a42:	c0 7c       	andi	r28, 0xC0	; 192
    4a44:	c0 38       	cpi	r28, 0x80	; 128
    4a46:	39 f4       	brne	.+14     	; 0x4a56 <menuCurrMenuToLCD+0x26>
    4a48:	80 e2       	ldi	r24, 0x20	; 32
    4a4a:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    4a4e:	82 e0       	ldi	r24, 0x02	; 2
    4a50:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    4a54:	04 c0       	rjmp	.+8      	; 0x4a5e <menuCurrMenuToLCD+0x2e>
    4a56:	8f e7       	ldi	r24, 0x7F	; 127
    4a58:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    4a5c:	d6 d8       	rcall	.-3668   	; 0x3c0a <softkeyLeft>
    4a5e:	c0 3c       	cpi	r28, 0xC0	; 192
    4a60:	29 f4       	brne	.+10     	; 0x4a6c <menuCurrMenuToLCD+0x3c>
    4a62:	83 e0       	ldi	r24, 0x03	; 3
    4a64:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    4a68:	c0 e2       	ldi	r28, 0x20	; 32
    4a6a:	02 c0       	rjmp	.+4      	; 0x4a70 <menuCurrMenuToLCD+0x40>
    4a6c:	d4 d8       	rcall	.-3672   	; 0x3c16 <softkeyRight>
    4a6e:	ce e7       	ldi	r28, 0x7E	; 126
    4a70:	ea d8       	rcall	.-3628   	; 0x3c46 <softkeyUp>
    4a72:	bf df       	rcall	.-130    	; 0x49f2 <menuCheckArrowDown>
    4a74:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4a78:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4a7c:	6c 2f       	mov	r22, r28
    4a7e:	02 96       	adiw	r24, 0x02	; 2
    4a80:	05 de       	rcall	.-1014   	; 0x468c <menuTextOut>
    4a82:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
    4a86:	96 df       	rcall	.-212    	; 0x49b4 <menuCursorSetMenu>
    4a88:	cf 91       	pop	r28
    4a8a:	08 95       	ret

00004a8c <menuItemChanged>:
    4a8c:	8f ef       	ldi	r24, 0xFF	; 255
    4a8e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4a92:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4a96:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4a9a:	fc 01       	movw	r30, r24
    4a9c:	24 91       	lpm	r18, Z
    4a9e:	62 2f       	mov	r22, r18
    4aa0:	6f 73       	andi	r22, 0x3F	; 63
    4aa2:	62 30       	cpi	r22, 0x02	; 2
    4aa4:	08 f4       	brcc	.+2      	; 0x4aa8 <menuItemChanged+0x1c>
    4aa6:	49 c0       	rjmp	.+146    	; 0x4b3a <menuItemChanged+0xae>
    4aa8:	9c 01       	movw	r18, r24
    4aaa:	22 5f       	subi	r18, 0xF2	; 242
    4aac:	3f 4f       	sbci	r19, 0xFF	; 255
    4aae:	f9 01       	movw	r30, r18
    4ab0:	45 91       	lpm	r20, Z+
    4ab2:	55 91       	lpm	r21, Z+
    4ab4:	41 15       	cp	r20, r1
    4ab6:	51 05       	cpc	r21, r1
    4ab8:	09 f4       	brne	.+2      	; 0x4abc <menuItemChanged+0x30>
    4aba:	3f c0       	rjmp	.+126    	; 0x4b3a <menuItemChanged+0xae>
    4abc:	e6 2f       	mov	r30, r22
    4abe:	f0 e0       	ldi	r31, 0x00	; 0
    4ac0:	31 97       	sbiw	r30, 0x01	; 1
    4ac2:	9f 01       	movw	r18, r30
    4ac4:	22 0f       	add	r18, r18
    4ac6:	33 1f       	adc	r19, r19
    4ac8:	22 0f       	add	r18, r18
    4aca:	33 1f       	adc	r19, r19
    4acc:	22 0f       	add	r18, r18
    4ace:	33 1f       	adc	r19, r19
    4ad0:	e2 0f       	add	r30, r18
    4ad2:	f3 1f       	adc	r31, r19
    4ad4:	e4 50       	subi	r30, 0x04	; 4
    4ad6:	fc 4f       	sbci	r31, 0xFC	; 252
    4ad8:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    4adc:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    4ae0:	24 91       	lpm	r18, Z
    4ae2:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	25 91       	lpm	r18, Z+
    4aea:	2f 73       	andi	r18, 0x3F	; 63
    4aec:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    4af0:	24 91       	lpm	r18, Z
    4af2:	22 23       	and	r18, r18
    4af4:	2c f4       	brge	.+10     	; 0x4b00 <menuItemChanged+0x74>
    4af6:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4afa:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4afe:	02 c0       	rjmp	.+4      	; 0x4b04 <menuItemChanged+0x78>
    4b00:	20 e0       	ldi	r18, 0x00	; 0
    4b02:	30 e0       	ldi	r19, 0x00	; 0
    4b04:	24 0f       	add	r18, r20
    4b06:	35 1f       	adc	r19, r21
    4b08:	fc 01       	movw	r30, r24
    4b0a:	84 91       	lpm	r24, Z
    4b0c:	8f 73       	andi	r24, 0x3F	; 63
    4b0e:	8b 30       	cpi	r24, 0x0B	; 11
    4b10:	71 f4       	brne	.+28     	; 0x4b2e <menuItemChanged+0xa2>
    4b12:	f9 01       	movw	r30, r18
    4b14:	80 81       	ld	r24, Z
    4b16:	91 81       	ldd	r25, Z+1	; 0x01
    4b18:	a2 81       	ldd	r26, Z+2	; 0x02
    4b1a:	b3 81       	ldd	r27, Z+3	; 0x03
    4b1c:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    4b20:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    4b24:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    4b28:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    4b2c:	04 c0       	rjmp	.+8      	; 0x4b36 <menuItemChanged+0xaa>
    4b2e:	f9 01       	movw	r30, r18
    4b30:	80 81       	ld	r24, Z
    4b32:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4b36:	df dd       	rcall	.-1090   	; 0x46f6 <menuDisplayValue>
    4b38:	07 c0       	rjmp	.+14     	; 0x4b48 <menuItemChanged+0xbc>
    4b3a:	45 df       	rcall	.-374    	; 0x49c6 <menu_ClearDataDisp>
    4b3c:	8c ef       	ldi	r24, 0xFC	; 252
    4b3e:	93 e0       	ldi	r25, 0x03	; 3
    4b40:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    4b44:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4b48:	54 df       	rcall	.-344    	; 0x49f2 <menuCheckArrowDown>
    4b4a:	34 cf       	rjmp	.-408    	; 0x49b4 <menuCursorSetMenu>
    4b4c:	08 95       	ret

00004b4e <menu_InitLCD>:
    4b4e:	36 df       	rcall	.-404    	; 0x49bc <menuClearExtraDisp>
    4b50:	9d df       	rcall	.-198    	; 0x4a8c <menuItemChanged>
    4b52:	b7 dd       	rcall	.-1170   	; 0x46c2 <menuParentMenuToLCD>
    4b54:	6d df       	rcall	.-294    	; 0x4a30 <menuCurrMenuToLCD>
    4b56:	0c 94 e5 39 	jmp	0x73ca	; 0x73ca <lcd_cursosblink>
    4b5a:	08 95       	ret

00004b5c <menu_ProcessMessage>:
    4b5c:	cf 93       	push	r28
    4b5e:	c8 2f       	mov	r28, r24
    4b60:	0e 94 e5 39 	call	0x73ca	; 0x73ca <lcd_cursosblink>
    4b64:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4b68:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4b6c:	84 91       	lpm	r24, Z
    4b6e:	8f 73       	andi	r24, 0x3F	; 63
    4b70:	81 30       	cpi	r24, 0x01	; 1
    4b72:	29 f0       	breq	.+10     	; 0x4b7e <menu_ProcessMessage+0x22>
    4b74:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4b78:	8f 3f       	cpi	r24, 0xFF	; 255
    4b7a:	09 f0       	breq	.+2      	; 0x4b7e <menu_ProcessMessage+0x22>
    4b7c:	68 c1       	rjmp	.+720    	; 0x4e4e <menu_ProcessMessage+0x2f2>
    4b7e:	31 96       	adiw	r30, 0x01	; 1
    4b80:	84 91       	lpm	r24, Z
    4b82:	86 ff       	sbrs	r24, 6
    4b84:	02 c0       	rjmp	.+4      	; 0x4b8a <menu_ProcessMessage+0x2e>
    4b86:	1a df       	rcall	.-460    	; 0x49bc <menuClearExtraDisp>
    4b88:	15 df       	rcall	.-470    	; 0x49b4 <menuCursorSetMenu>
    4b8a:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4b8e:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4b92:	cb 01       	movw	r24, r22
    4b94:	01 96       	adiw	r24, 0x01	; 1
    4b96:	fc 01       	movw	r30, r24
    4b98:	84 91       	lpm	r24, Z
    4b9a:	98 2f       	mov	r25, r24
    4b9c:	90 72       	andi	r25, 0x20	; 32
    4b9e:	85 ff       	sbrs	r24, 5
    4ba0:	1f c0       	rjmp	.+62     	; 0x4be0 <menu_ProcessMessage+0x84>
    4ba2:	9b 01       	movw	r18, r22
    4ba4:	20 5f       	subi	r18, 0xF0	; 240
    4ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba8:	f9 01       	movw	r30, r18
    4baa:	25 91       	lpm	r18, Z+
    4bac:	35 91       	lpm	r19, Z+
    4bae:	21 15       	cp	r18, r1
    4bb0:	31 05       	cpc	r19, r1
    4bb2:	b1 f0       	breq	.+44     	; 0x4be0 <menu_ProcessMessage+0x84>
    4bb4:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4bb8:	4f 3f       	cpi	r20, 0xFF	; 255
    4bba:	91 f0       	breq	.+36     	; 0x4be0 <menu_ProcessMessage+0x84>
    4bbc:	8c 2f       	mov	r24, r28
    4bbe:	f9 01       	movw	r30, r18
    4bc0:	19 95       	eicall
    4bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc4:	21 f4       	brne	.+8      	; 0x4bce <menu_ProcessMessage+0x72>
    4bc6:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	04 c2       	rjmp	.+1032   	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4bce:	f6 de       	rcall	.-532    	; 0x49bc <menuClearExtraDisp>
    4bd0:	fa de       	rcall	.-524    	; 0x49c6 <menu_ClearDataDisp>
    4bd2:	f0 de       	rcall	.-544    	; 0x49b4 <menuCursorSetMenu>
    4bd4:	8f ef       	ldi	r24, 0xFF	; 255
    4bd6:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4bda:	2a df       	rcall	.-428    	; 0x4a30 <menuCurrMenuToLCD>
    4bdc:	80 e0       	ldi	r24, 0x00	; 0
    4bde:	fb c1       	rjmp	.+1014   	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4be0:	c3 30       	cpi	r28, 0x03	; 3
    4be2:	09 f4       	brne	.+2      	; 0x4be6 <menu_ProcessMessage+0x8a>
    4be4:	64 c0       	rjmp	.+200    	; 0x4cae <menu_ProcessMessage+0x152>
    4be6:	28 f4       	brcc	.+10     	; 0x4bf2 <menu_ProcessMessage+0x96>
    4be8:	c1 30       	cpi	r28, 0x01	; 1
    4bea:	51 f0       	breq	.+20     	; 0x4c00 <menu_ProcessMessage+0xa4>
    4bec:	c2 30       	cpi	r28, 0x02	; 2
    4bee:	31 f1       	breq	.+76     	; 0x4c3c <menu_ProcessMessage+0xe0>
    4bf0:	db c1       	rjmp	.+950    	; 0x4fa8 <menu_ProcessMessage+0x44c>
    4bf2:	c5 30       	cpi	r28, 0x05	; 5
    4bf4:	09 f4       	brne	.+2      	; 0x4bf8 <menu_ProcessMessage+0x9c>
    4bf6:	5b c0       	rjmp	.+182    	; 0x4cae <menu_ProcessMessage+0x152>
    4bf8:	90 f0       	brcs	.+36     	; 0x4c1e <menu_ProcessMessage+0xc2>
    4bfa:	c6 30       	cpi	r28, 0x06	; 6
    4bfc:	f9 f0       	breq	.+62     	; 0x4c3c <menu_ProcessMessage+0xe0>
    4bfe:	d4 c1       	rjmp	.+936    	; 0x4fa8 <menu_ProcessMessage+0x44c>
    4c00:	fb 01       	movw	r30, r22
    4c02:	84 91       	lpm	r24, Z
    4c04:	80 7c       	andi	r24, 0xC0	; 192
    4c06:	80 3c       	cpi	r24, 0xC0	; 192
    4c08:	09 f4       	brne	.+2      	; 0x4c0c <menu_ProcessMessage+0xb0>
    4c0a:	d0 c1       	rjmp	.+928    	; 0x4fac <menu_ProcessMessage+0x450>
    4c0c:	74 96       	adiw	r30, 0x14	; 20
    4c0e:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4c12:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4c16:	3a df       	rcall	.-396    	; 0x4a8c <menuItemChanged>
    4c18:	0b df       	rcall	.-490    	; 0x4a30 <menuCurrMenuToLCD>
    4c1a:	80 e0       	ldi	r24, 0x00	; 0
    4c1c:	dc c1       	rjmp	.+952    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4c1e:	fb 01       	movw	r30, r22
    4c20:	84 91       	lpm	r24, Z
    4c22:	80 7c       	andi	r24, 0xC0	; 192
    4c24:	80 38       	cpi	r24, 0x80	; 128
    4c26:	09 f4       	brne	.+2      	; 0x4c2a <menu_ProcessMessage+0xce>
    4c28:	c3 c1       	rjmp	.+902    	; 0x4fb0 <menu_ProcessMessage+0x454>
    4c2a:	74 97       	sbiw	r30, 0x14	; 20
    4c2c:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4c30:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4c34:	2b df       	rcall	.-426    	; 0x4a8c <menuItemChanged>
    4c36:	fc de       	rcall	.-520    	; 0x4a30 <menuCurrMenuToLCD>
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	cd c1       	rjmp	.+922    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4c3c:	84 ff       	sbrs	r24, 4
    4c3e:	04 c0       	rjmp	.+8      	; 0x4c48 <menu_ProcessMessage+0xec>
    4c40:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4c44:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4c48:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4c4c:	ee 23       	and	r30, r30
    4c4e:	e9 f0       	breq	.+58     	; 0x4c8a <menu_ProcessMessage+0x12e>
    4c50:	e1 50       	subi	r30, 0x01	; 1
    4c52:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4c56:	f0 e0       	ldi	r31, 0x00	; 0
    4c58:	ee 0f       	add	r30, r30
    4c5a:	ff 1f       	adc	r31, r31
    4c5c:	e5 58       	subi	r30, 0x85	; 133
    4c5e:	fa 4f       	sbci	r31, 0xFA	; 250
    4c60:	01 90       	ld	r0, Z+
    4c62:	f0 81       	ld	r31, Z
    4c64:	e0 2d       	mov	r30, r0
    4c66:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4c6a:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4c6e:	72 96       	adiw	r30, 0x12	; 18
    4c70:	05 90       	lpm	r0, Z+
    4c72:	f4 91       	lpm	r31, Z
    4c74:	e0 2d       	mov	r30, r0
    4c76:	30 97       	sbiw	r30, 0x00	; 0
    4c78:	11 f0       	breq	.+4      	; 0x4c7e <menu_ProcessMessage+0x122>
    4c7a:	80 e0       	ldi	r24, 0x00	; 0
    4c7c:	19 95       	eicall
    4c7e:	9e de       	rcall	.-708    	; 0x49bc <menuClearExtraDisp>
    4c80:	20 dd       	rcall	.-1472   	; 0x46c2 <menuParentMenuToLCD>
    4c82:	d6 de       	rcall	.-596    	; 0x4a30 <menuCurrMenuToLCD>
    4c84:	03 df       	rcall	.-506    	; 0x4a8c <menuItemChanged>
    4c86:	80 e0       	ldi	r24, 0x00	; 0
    4c88:	a6 c1       	rjmp	.+844    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4c8a:	80 e0       	ldi	r24, 0x00	; 0
    4c8c:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    4c90:	81 e0       	ldi	r24, 0x01	; 1
    4c92:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    4c96:	82 e0       	ldi	r24, 0x02	; 2
    4c98:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    4c9c:	83 e0       	ldi	r24, 0x03	; 3
    4c9e:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    4ca2:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
    4ca6:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <lcd_cursoroff>
    4caa:	8f ef       	ldi	r24, 0xFF	; 255
    4cac:	94 c1       	rjmp	.+808    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4cae:	fb 01       	movw	r30, r22
    4cb0:	24 91       	lpm	r18, Z
    4cb2:	2f 73       	andi	r18, 0x3F	; 63
    4cb4:	30 e0       	ldi	r19, 0x00	; 0
    4cb6:	22 30       	cpi	r18, 0x02	; 2
    4cb8:	31 05       	cpc	r19, r1
    4cba:	0c f4       	brge	.+2      	; 0x4cbe <menu_ProcessMessage+0x162>
    4cbc:	48 c0       	rjmp	.+144    	; 0x4d4e <menu_ProcessMessage+0x1f2>
    4cbe:	70 96       	adiw	r30, 0x10	; 16
    4cc0:	05 90       	lpm	r0, Z+
    4cc2:	f4 91       	lpm	r31, Z
    4cc4:	e0 2d       	mov	r30, r0
    4cc6:	30 97       	sbiw	r30, 0x00	; 0
    4cc8:	19 f0       	breq	.+6      	; 0x4cd0 <menu_ProcessMessage+0x174>
    4cca:	8c 2f       	mov	r24, r28
    4ccc:	19 95       	eicall
    4cce:	de de       	rcall	.-580    	; 0x4a8c <menuItemChanged>
    4cd0:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4cd4:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4cd8:	c9 01       	movw	r24, r18
    4cda:	01 96       	adiw	r24, 0x01	; 1
    4cdc:	fc 01       	movw	r30, r24
    4cde:	84 91       	lpm	r24, Z
    4ce0:	83 fd       	sbrc	r24, 3
    4ce2:	68 c1       	rjmp	.+720    	; 0x4fb4 <menu_ProcessMessage+0x458>
    4ce4:	c9 01       	movw	r24, r18
    4ce6:	0e 96       	adiw	r24, 0x0e	; 14
    4ce8:	fc 01       	movw	r30, r24
    4cea:	85 91       	lpm	r24, Z+
    4cec:	95 91       	lpm	r25, Z+
    4cee:	89 2b       	or	r24, r25
    4cf0:	09 f4       	brne	.+2      	; 0x4cf4 <menu_ProcessMessage+0x198>
    4cf2:	62 c1       	rjmp	.+708    	; 0x4fb8 <menu_ProcessMessage+0x45c>
    4cf4:	f9 01       	movw	r30, r18
    4cf6:	84 91       	lpm	r24, Z
    4cf8:	8f 73       	andi	r24, 0x3F	; 63
    4cfa:	89 30       	cpi	r24, 0x09	; 9
    4cfc:	19 f5       	brne	.+70     	; 0x4d44 <menu_ProcessMessage+0x1e8>
    4cfe:	61 e0       	ldi	r22, 0x01	; 1
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	30 da       	rcall	.-2976   	; 0x4164 <nibbleChange>
    4d04:	de db       	rcall	.-2116   	; 0x44c2 <nibbleToData>
    4d06:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4d0a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d0e:	3e 96       	adiw	r30, 0x0e	; 14
    4d10:	05 90       	lpm	r0, Z+
    4d12:	f4 91       	lpm	r31, Z
    4d14:	e0 2d       	mov	r30, r0
    4d16:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4d1a:	80 83       	st	Z, r24
    4d1c:	ec dc       	rcall	.-1576   	; 0x46f6 <menuDisplayValue>
    4d1e:	69 de       	rcall	.-814    	; 0x49f2 <menuCheckArrowDown>
    4d20:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
    4d24:	47 de       	rcall	.-882    	; 0x49b4 <menuCursorSetMenu>
    4d26:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4d2a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d2e:	72 96       	adiw	r30, 0x12	; 18
    4d30:	05 90       	lpm	r0, Z+
    4d32:	f4 91       	lpm	r31, Z
    4d34:	e0 2d       	mov	r30, r0
    4d36:	30 97       	sbiw	r30, 0x00	; 0
    4d38:	09 f4       	brne	.+2      	; 0x4d3c <menu_ProcessMessage+0x1e0>
    4d3a:	40 c1       	rjmp	.+640    	; 0x4fbc <menu_ProcessMessage+0x460>
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	19 95       	eicall
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	49 c1       	rjmp	.+658    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4d44:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4d48:	e3 dc       	rcall	.-1594   	; 0x4710 <menuCursorSetDataNibble>
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	44 c1       	rjmp	.+648    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4d4e:	2f ef       	ldi	r18, 0xFF	; 255
    4d50:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4d54:	84 ff       	sbrs	r24, 4
    4d56:	26 c0       	rjmp	.+76     	; 0x4da4 <menu_ProcessMessage+0x248>
    4d58:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4d5c:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4d60:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4d64:	ee 23       	and	r30, r30
    4d66:	09 f4       	brne	.+2      	; 0x4d6a <menu_ProcessMessage+0x20e>
    4d68:	2b c1       	rjmp	.+598    	; 0x4fc0 <menu_ProcessMessage+0x464>
    4d6a:	e1 50       	subi	r30, 0x01	; 1
    4d6c:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4d70:	f0 e0       	ldi	r31, 0x00	; 0
    4d72:	ee 0f       	add	r30, r30
    4d74:	ff 1f       	adc	r31, r31
    4d76:	e5 58       	subi	r30, 0x85	; 133
    4d78:	fa 4f       	sbci	r31, 0xFA	; 250
    4d7a:	01 90       	ld	r0, Z+
    4d7c:	f0 81       	ld	r31, Z
    4d7e:	e0 2d       	mov	r30, r0
    4d80:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4d84:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4d88:	72 96       	adiw	r30, 0x12	; 18
    4d8a:	05 90       	lpm	r0, Z+
    4d8c:	f4 91       	lpm	r31, Z
    4d8e:	e0 2d       	mov	r30, r0
    4d90:	30 97       	sbiw	r30, 0x00	; 0
    4d92:	11 f0       	breq	.+4      	; 0x4d98 <menu_ProcessMessage+0x23c>
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	19 95       	eicall
    4d98:	11 de       	rcall	.-990    	; 0x49bc <menuClearExtraDisp>
    4d9a:	93 dc       	rcall	.-1754   	; 0x46c2 <menuParentMenuToLCD>
    4d9c:	49 de       	rcall	.-878    	; 0x4a30 <menuCurrMenuToLCD>
    4d9e:	76 de       	rcall	.-788    	; 0x4a8c <menuItemChanged>
    4da0:	80 e0       	ldi	r24, 0x00	; 0
    4da2:	19 c1       	rjmp	.+562    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4da4:	fb 01       	movw	r30, r22
    4da6:	70 96       	adiw	r30, 0x10	; 16
    4da8:	05 90       	lpm	r0, Z+
    4daa:	f4 91       	lpm	r31, Z
    4dac:	e0 2d       	mov	r30, r0
    4dae:	30 97       	sbiw	r30, 0x00	; 0
    4db0:	99 f0       	breq	.+38     	; 0x4dd8 <menu_ProcessMessage+0x27c>
    4db2:	99 23       	and	r25, r25
    4db4:	71 f0       	breq	.+28     	; 0x4dd2 <menu_ProcessMessage+0x276>
    4db6:	8f ef       	ldi	r24, 0xFF	; 255
    4db8:	19 95       	eicall
    4dba:	8f 3f       	cpi	r24, 0xFF	; 255
    4dbc:	19 f4       	brne	.+6      	; 0x4dc4 <menu_ProcessMessage+0x268>
    4dbe:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4dc2:	0a c0       	rjmp	.+20     	; 0x4dd8 <menu_ProcessMessage+0x27c>
    4dc4:	fb dd       	rcall	.-1034   	; 0x49bc <menuClearExtraDisp>
    4dc6:	ff dd       	rcall	.-1026   	; 0x49c6 <menu_ClearDataDisp>
    4dc8:	f5 dd       	rcall	.-1046   	; 0x49b4 <menuCursorSetMenu>
    4dca:	8f ef       	ldi	r24, 0xFF	; 255
    4dcc:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4dd0:	03 c0       	rjmp	.+6      	; 0x4dd8 <menu_ProcessMessage+0x27c>
    4dd2:	85 e0       	ldi	r24, 0x05	; 5
    4dd4:	19 95       	eicall
    4dd6:	ee dd       	rcall	.-1060   	; 0x49b4 <menuCursorSetMenu>
    4dd8:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4ddc:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4de0:	c9 01       	movw	r24, r18
    4de2:	0c 96       	adiw	r24, 0x0c	; 12
    4de4:	fc 01       	movw	r30, r24
    4de6:	85 91       	lpm	r24, Z+
    4de8:	95 91       	lpm	r25, Z+
    4dea:	89 2b       	or	r24, r25
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <menu_ProcessMessage+0x294>
    4dee:	ea c0       	rjmp	.+468    	; 0x4fc4 <menu_ProcessMessage+0x468>
    4df0:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    4df4:	a0 31       	cpi	r26, 0x10	; 16
    4df6:	08 f0       	brcs	.+2      	; 0x4dfa <menu_ProcessMessage+0x29e>
    4df8:	e7 c0       	rjmp	.+462    	; 0x4fc8 <menu_ProcessMessage+0x46c>
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	8a 0f       	add	r24, r26
    4dfe:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    4e02:	b0 e0       	ldi	r27, 0x00	; 0
    4e04:	aa 0f       	add	r26, r26
    4e06:	bb 1f       	adc	r27, r27
    4e08:	a5 58       	subi	r26, 0x85	; 133
    4e0a:	ba 4f       	sbci	r27, 0xFA	; 250
    4e0c:	2d 93       	st	X+, r18
    4e0e:	3c 93       	st	X, r19
    4e10:	c9 01       	movw	r24, r18
    4e12:	01 96       	adiw	r24, 0x01	; 1
    4e14:	fc 01       	movw	r30, r24
    4e16:	84 91       	lpm	r24, Z
    4e18:	83 ff       	sbrs	r24, 3
    4e1a:	0b c0       	rjmp	.+22     	; 0x4e32 <menu_ProcessMessage+0x2d6>
    4e1c:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    4e20:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    4e24:	00 97       	sbiw	r24, 0x00	; 0
    4e26:	29 f0       	breq	.+10     	; 0x4e32 <menu_ProcessMessage+0x2d6>
    4e28:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4e2c:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4e30:	08 c0       	rjmp	.+16     	; 0x4e42 <menu_ProcessMessage+0x2e6>
    4e32:	f9 01       	movw	r30, r18
    4e34:	3c 96       	adiw	r30, 0x0c	; 12
    4e36:	85 91       	lpm	r24, Z+
    4e38:	95 91       	lpm	r25, Z+
    4e3a:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4e3e:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4e42:	bc dd       	rcall	.-1160   	; 0x49bc <menuClearExtraDisp>
    4e44:	3e dc       	rcall	.-1924   	; 0x46c2 <menuParentMenuToLCD>
    4e46:	f4 dd       	rcall	.-1048   	; 0x4a30 <menuCurrMenuToLCD>
    4e48:	21 de       	rcall	.-958    	; 0x4a8c <menuItemChanged>
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	c4 c0       	rjmp	.+392    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4e4e:	c3 30       	cpi	r28, 0x03	; 3
    4e50:	09 f4       	brne	.+2      	; 0x4e54 <menu_ProcessMessage+0x2f8>
    4e52:	49 c0       	rjmp	.+146    	; 0x4ee6 <menu_ProcessMessage+0x38a>
    4e54:	28 f4       	brcc	.+10     	; 0x4e60 <menu_ProcessMessage+0x304>
    4e56:	c1 30       	cpi	r28, 0x01	; 1
    4e58:	59 f0       	breq	.+22     	; 0x4e70 <menu_ProcessMessage+0x314>
    4e5a:	c2 30       	cpi	r28, 0x02	; 2
    4e5c:	31 f1       	breq	.+76     	; 0x4eaa <menu_ProcessMessage+0x34e>
    4e5e:	b6 c0       	rjmp	.+364    	; 0x4fcc <menu_ProcessMessage+0x470>
    4e60:	c5 30       	cpi	r28, 0x05	; 5
    4e62:	09 f4       	brne	.+2      	; 0x4e66 <menu_ProcessMessage+0x30a>
    4e64:	5e c0       	rjmp	.+188    	; 0x4f22 <menu_ProcessMessage+0x3c6>
    4e66:	c0 f0       	brcs	.+48     	; 0x4e98 <menu_ProcessMessage+0x33c>
    4e68:	c6 30       	cpi	r28, 0x06	; 6
    4e6a:	09 f4       	brne	.+2      	; 0x4e6e <menu_ProcessMessage+0x312>
    4e6c:	8a c0       	rjmp	.+276    	; 0x4f82 <menu_ProcessMessage+0x426>
    4e6e:	ae c0       	rjmp	.+348    	; 0x4fcc <menu_ProcessMessage+0x470>
    4e70:	48 2f       	mov	r20, r24
    4e72:	50 e0       	ldi	r21, 0x00	; 0
    4e74:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4e78:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4e7c:	24 91       	lpm	r18, Z
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	21 50       	subi	r18, 0x01	; 1
    4e82:	31 09       	sbc	r19, r1
    4e84:	42 17       	cp	r20, r18
    4e86:	53 07       	cpc	r21, r19
    4e88:	0c f0       	brlt	.+2      	; 0x4e8c <menu_ProcessMessage+0x330>
    4e8a:	a2 c0       	rjmp	.+324    	; 0x4fd0 <menu_ProcessMessage+0x474>
    4e8c:	8f 5f       	subi	r24, 0xFF	; 255
    4e8e:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4e92:	3e dc       	rcall	.-1924   	; 0x4710 <menuCursorSetDataNibble>
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	9f c0       	rjmp	.+318    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4e98:	88 23       	and	r24, r24
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <menu_ProcessMessage+0x342>
    4e9c:	9b c0       	rjmp	.+310    	; 0x4fd4 <menu_ProcessMessage+0x478>
    4e9e:	81 50       	subi	r24, 0x01	; 1
    4ea0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4ea4:	35 dc       	rcall	.-1942   	; 0x4710 <menuCursorSetDataNibble>
    4ea6:	80 e0       	ldi	r24, 0x00	; 0
    4ea8:	96 c0       	rjmp	.+300    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4eaa:	61 e0       	ldi	r22, 0x01	; 1
    4eac:	5b d9       	rcall	.-3402   	; 0x4164 <nibbleChange>
    4eae:	09 db       	rcall	.-2542   	; 0x44c2 <nibbleToData>
    4eb0:	22 dc       	rcall	.-1980   	; 0x46f6 <menuDisplayValue>
    4eb2:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4eb6:	8a 30       	cpi	r24, 0x0A	; 10
    4eb8:	11 f0       	breq	.+4      	; 0x4ebe <menu_ProcessMessage+0x362>
    4eba:	8e 30       	cpi	r24, 0x0E	; 14
    4ebc:	89 f4       	brne	.+34     	; 0x4ee0 <menu_ProcessMessage+0x384>
    4ebe:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4ec2:	42 2f       	mov	r20, r18
    4ec4:	50 e0       	ldi	r21, 0x00	; 0
    4ec6:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4eca:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4ece:	84 91       	lpm	r24, Z
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	48 17       	cp	r20, r24
    4ed6:	59 07       	cpc	r21, r25
    4ed8:	1c f4       	brge	.+6      	; 0x4ee0 <menu_ProcessMessage+0x384>
    4eda:	2f 5f       	subi	r18, 0xFF	; 255
    4edc:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4ee0:	17 dc       	rcall	.-2002   	; 0x4710 <menuCursorSetDataNibble>
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	78 c0       	rjmp	.+240    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4ee6:	6f ef       	ldi	r22, 0xFF	; 255
    4ee8:	3d d9       	rcall	.-3462   	; 0x4164 <nibbleChange>
    4eea:	eb da       	rcall	.-2602   	; 0x44c2 <nibbleToData>
    4eec:	04 dc       	rcall	.-2040   	; 0x46f6 <menuDisplayValue>
    4eee:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4ef2:	8a 30       	cpi	r24, 0x0A	; 10
    4ef4:	11 f0       	breq	.+4      	; 0x4efa <menu_ProcessMessage+0x39e>
    4ef6:	8e 30       	cpi	r24, 0x0E	; 14
    4ef8:	89 f4       	brne	.+34     	; 0x4f1c <menu_ProcessMessage+0x3c0>
    4efa:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4efe:	42 2f       	mov	r20, r18
    4f00:	50 e0       	ldi	r21, 0x00	; 0
    4f02:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4f06:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4f0a:	84 91       	lpm	r24, Z
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	01 97       	sbiw	r24, 0x01	; 1
    4f10:	48 17       	cp	r20, r24
    4f12:	59 07       	cpc	r21, r25
    4f14:	1c f4       	brge	.+6      	; 0x4f1c <menu_ProcessMessage+0x3c0>
    4f16:	2f 5f       	subi	r18, 0xFF	; 255
    4f18:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4f1c:	f9 db       	rcall	.-2062   	; 0x4710 <menuCursorSetDataNibble>
    4f1e:	80 e0       	ldi	r24, 0x00	; 0
    4f20:	5a c0       	rjmp	.+180    	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4f22:	cf da       	rcall	.-2658   	; 0x44c2 <nibbleToData>
    4f24:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4f28:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f2c:	c9 01       	movw	r24, r18
    4f2e:	0e 96       	adiw	r24, 0x0e	; 14
    4f30:	fc 01       	movw	r30, r24
    4f32:	a5 91       	lpm	r26, Z+
    4f34:	b5 91       	lpm	r27, Z+
    4f36:	10 97       	sbiw	r26, 0x00	; 0
    4f38:	21 f1       	breq	.+72     	; 0x4f82 <menu_ProcessMessage+0x426>
    4f3a:	0d 97       	sbiw	r24, 0x0d	; 13
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	84 91       	lpm	r24, Z
    4f40:	88 23       	and	r24, r24
    4f42:	2c f4       	brge	.+10     	; 0x4f4e <menu_ProcessMessage+0x3f2>
    4f44:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4f48:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4f4c:	02 c0       	rjmp	.+4      	; 0x4f52 <menu_ProcessMessage+0x3f6>
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	90 e0       	ldi	r25, 0x00	; 0
    4f52:	a8 0f       	add	r26, r24
    4f54:	b9 1f       	adc	r27, r25
    4f56:	f9 01       	movw	r30, r18
    4f58:	84 91       	lpm	r24, Z
    4f5a:	8f 73       	andi	r24, 0x3F	; 63
    4f5c:	8b 30       	cpi	r24, 0x0B	; 11
    4f5e:	71 f4       	brne	.+28     	; 0x4f7c <menu_ProcessMessage+0x420>
    4f60:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    4f64:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    4f68:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    4f6c:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    4f70:	4d 93       	st	X+, r20
    4f72:	5d 93       	st	X+, r21
    4f74:	6d 93       	st	X+, r22
    4f76:	7c 93       	st	X, r23
    4f78:	13 97       	sbiw	r26, 0x03	; 3
    4f7a:	03 c0       	rjmp	.+6      	; 0x4f82 <menu_ProcessMessage+0x426>
    4f7c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4f80:	8c 93       	st	X, r24
    4f82:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4f86:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4f8a:	72 96       	adiw	r30, 0x12	; 18
    4f8c:	05 90       	lpm	r0, Z+
    4f8e:	f4 91       	lpm	r31, Z
    4f90:	e0 2d       	mov	r30, r0
    4f92:	30 97       	sbiw	r30, 0x00	; 0
    4f94:	11 f0       	breq	.+4      	; 0x4f9a <menu_ProcessMessage+0x43e>
    4f96:	8c 2f       	mov	r24, r28
    4f98:	19 95       	eicall
    4f9a:	8f ef       	ldi	r24, 0xFF	; 255
    4f9c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4fa0:	47 dd       	rcall	.-1394   	; 0x4a30 <menuCurrMenuToLCD>
    4fa2:	74 dd       	rcall	.-1304   	; 0x4a8c <menuItemChanged>
    4fa4:	80 e0       	ldi	r24, 0x00	; 0
    4fa6:	17 c0       	rjmp	.+46     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	15 c0       	rjmp	.+42     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fac:	80 e0       	ldi	r24, 0x00	; 0
    4fae:	13 c0       	rjmp	.+38     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fb0:	80 e0       	ldi	r24, 0x00	; 0
    4fb2:	11 c0       	rjmp	.+34     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fb4:	80 e0       	ldi	r24, 0x00	; 0
    4fb6:	0f c0       	rjmp	.+30     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	0d c0       	rjmp	.+26     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fbc:	80 e0       	ldi	r24, 0x00	; 0
    4fbe:	0b c0       	rjmp	.+22     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fc0:	80 e0       	ldi	r24, 0x00	; 0
    4fc2:	09 c0       	rjmp	.+18     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fc4:	80 e0       	ldi	r24, 0x00	; 0
    4fc6:	07 c0       	rjmp	.+14     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fc8:	80 e0       	ldi	r24, 0x00	; 0
    4fca:	05 c0       	rjmp	.+10     	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fcc:	80 e0       	ldi	r24, 0x00	; 0
    4fce:	03 c0       	rjmp	.+6      	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fd0:	80 e0       	ldi	r24, 0x00	; 0
    4fd2:	01 c0       	rjmp	.+2      	; 0x4fd6 <menu_ProcessMessage+0x47a>
    4fd4:	80 e0       	ldi	r24, 0x00	; 0
    4fd6:	cf 91       	pop	r28
    4fd8:	08 95       	ret

00004fda <displayMenuMessage_P>:
    4fda:	0f 93       	push	r16
    4fdc:	1f 93       	push	r17
    4fde:	cf 93       	push	r28
    4fe0:	df 93       	push	r29
    4fe2:	ec 01       	movw	r28, r24
    4fe4:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4fe8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4fec:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4ff0:	84 91       	lpm	r24, Z
    4ff2:	8f 73       	andi	r24, 0x3F	; 63
    4ff4:	81 30       	cpi	r24, 0x01	; 1
    4ff6:	91 f4       	brne	.+36     	; 0x501c <displayMenuMessage_P+0x42>
    4ff8:	ce 01       	movw	r24, r28
    4ffa:	0e 94 9f 3a 	call	0x753e	; 0x753e <get_StrLenP>
    4ffe:	24 e1       	ldi	r18, 0x14	; 20
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	a9 01       	movw	r20, r18
    5004:	48 1b       	sub	r20, r24
    5006:	51 09       	sbc	r21, r1
    5008:	ca 01       	movw	r24, r20
    500a:	95 95       	asr	r25
    500c:	87 95       	ror	r24
    500e:	8c 5e       	subi	r24, 0xEC	; 236
    5010:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    5014:	83 e0       	ldi	r24, 0x03	; 3
    5016:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    501a:	05 c0       	rjmp	.+10     	; 0x5026 <displayMenuMessage_P+0x4c>
    501c:	84 e1       	ldi	r24, 0x14	; 20
    501e:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    5022:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    5026:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    502a:	ce 01       	movw	r24, r28
    502c:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    5030:	80 2f       	mov	r24, r16
    5032:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    5036:	9f b7       	in	r25, 0x3f	; 63
    5038:	f8 94       	cli
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	06 c0       	rjmp	.+12     	; 0x504a <displayMenuMessage_P+0x70>
    503e:	ef e2       	ldi	r30, 0x2F	; 47
    5040:	f2 e0       	ldi	r31, 0x02	; 2
    5042:	84 e6       	ldi	r24, 0x64	; 100
    5044:	86 87       	std	Z+14, r24	; 0x0e
    5046:	17 86       	std	Z+15, r1	; 0x0f
    5048:	80 e0       	ldi	r24, 0x00	; 0
    504a:	81 11       	cpse	r24, r1
    504c:	f8 cf       	rjmp	.-16     	; 0x503e <displayMenuMessage_P+0x64>
    504e:	9f bf       	out	0x3f, r25	; 63
    5050:	81 2f       	mov	r24, r17
    5052:	df 91       	pop	r29
    5054:	cf 91       	pop	r28
    5056:	1f 91       	pop	r17
    5058:	0f 91       	pop	r16
    505a:	08 95       	ret

0000505c <menu_OnEnterMidiPanic>:
    505c:	88 eb       	ldi	r24, 0xB8	; 184
    505e:	93 e0       	ldi	r25, 0x03	; 3
    5060:	bc df       	rcall	.-136    	; 0x4fda <displayMenuMessage_P>
    5062:	0e 94 e5 33 	call	0x67ca	; 0x67ca <midiSendAllNotesOff>
    5066:	a6 dc       	rcall	.-1716   	; 0x49b4 <menuCursorSetMenu>
    5068:	80 e0       	ldi	r24, 0x00	; 0
    506a:	08 95       	ret

0000506c <menu_ModuleTestExecute>:
    506c:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    5070:	8f 3f       	cpi	r24, 0xFF	; 255
    5072:	11 f0       	breq	.+4      	; 0x5078 <menu_ModuleTestExecute+0xc>
    5074:	8d 3f       	cpi	r24, 0xFD	; 253
    5076:	71 f5       	brne	.+92     	; 0x50d4 <menu_ModuleTestExecute+0x68>
    5078:	0e 94 ec 39 	call	0x73d8	; 0x73d8 <lcd_cursoroff>
    507c:	a4 dc       	rcall	.-1720   	; 0x49c6 <menu_ClearDataDisp>
    507e:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	e9 e4       	ldi	r30, 0x49	; 73
    5086:	f2 e0       	ldi	r31, 0x02	; 2
    5088:	07 c0       	rjmp	.+14     	; 0x5098 <menu_ModuleTestExecute+0x2c>
    508a:	21 81       	ldd	r18, Z+1	; 0x01
    508c:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    5090:	82 2b       	or	r24, r18
    5092:	81 83       	std	Z+1, r24	; 0x01
    5094:	38 96       	adiw	r30, 0x08	; 8
    5096:	9f 5f       	subi	r25, 0xFF	; 255
    5098:	90 32       	cpi	r25, 0x20	; 32
    509a:	b8 f3       	brcs	.-18     	; 0x508a <menu_ModuleTestExecute+0x1e>
    509c:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    50a0:	8f 3f       	cpi	r24, 0xFF	; 255
    50a2:	19 f4       	brne	.+6      	; 0x50aa <menu_ModuleTestExecute+0x3e>
    50a4:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    50a8:	5b c0       	rjmp	.+182    	; 0x5160 <menu_ModuleTestExecute+0xf4>
    50aa:	82 eb       	ldi	r24, 0xB2	; 178
    50ac:	93 e0       	ldi	r25, 0x03	; 3
    50ae:	95 df       	rcall	.-214    	; 0x4fda <displayMenuMessage_P>
    50b0:	8e ef       	ldi	r24, 0xFE	; 254
    50b2:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    50b6:	9f b7       	in	r25, 0x3f	; 63
    50b8:	f8 94       	cli
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	06 c0       	rjmp	.+12     	; 0x50ca <menu_ModuleTestExecute+0x5e>
    50be:	ef e2       	ldi	r30, 0x2F	; 47
    50c0:	f2 e0       	ldi	r31, 0x02	; 2
    50c2:	82 e0       	ldi	r24, 0x02	; 2
    50c4:	84 87       	std	Z+12, r24	; 0x0c
    50c6:	85 87       	std	Z+13, r24	; 0x0d
    50c8:	80 e0       	ldi	r24, 0x00	; 0
    50ca:	81 11       	cpse	r24, r1
    50cc:	f8 cf       	rjmp	.-16     	; 0x50be <menu_ModuleTestExecute+0x52>
    50ce:	9f bf       	out	0x3f, r25	; 63
    50d0:	71 dc       	rcall	.-1822   	; 0x49b4 <menuCursorSetMenu>
    50d2:	46 c0       	rjmp	.+140    	; 0x5160 <menu_ModuleTestExecute+0xf4>
    50d4:	8e 3f       	cpi	r24, 0xFE	; 254
    50d6:	41 f4       	brne	.+16     	; 0x50e8 <menu_ModuleTestExecute+0x7c>
    50d8:	8f ef       	ldi	r24, 0xFF	; 255
    50da:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    50de:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    50e2:	0e 94 e5 39 	call	0x73ca	; 0x73ca <lcd_cursosblink>
    50e6:	3c c0       	rjmp	.+120    	; 0x5160 <menu_ModuleTestExecute+0xf4>
    50e8:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    50ec:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    50f0:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    50f4:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    50f8:	76 95       	lsr	r23
    50fa:	67 95       	ror	r22
    50fc:	57 95       	ror	r21
    50fe:	47 95       	ror	r20
    5100:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    5104:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    5108:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    510c:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    5110:	e8 2f       	mov	r30, r24
    5112:	f0 e0       	ldi	r31, 0x00	; 0
    5114:	df 01       	movw	r26, r30
    5116:	aa 0f       	add	r26, r26
    5118:	bb 1f       	adc	r27, r27
    511a:	aa 0f       	add	r26, r26
    511c:	bb 1f       	adc	r27, r27
    511e:	aa 0f       	add	r26, r26
    5120:	bb 1f       	adc	r27, r27
    5122:	a7 5b       	subi	r26, 0xB7	; 183
    5124:	bd 4f       	sbci	r27, 0xFD	; 253
    5126:	16 96       	adiw	r26, 0x06	; 6
    5128:	2c 91       	ld	r18, X
    512a:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    512e:	29 23       	and	r18, r25
    5130:	49 f4       	brne	.+18     	; 0x5144 <menu_ModuleTestExecute+0xd8>
    5132:	70 68       	ori	r23, 0x80	; 128
    5134:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    5138:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    513c:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    5140:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    5144:	ee 0f       	add	r30, r30
    5146:	ff 1f       	adc	r31, r31
    5148:	ee 0f       	add	r30, r30
    514a:	ff 1f       	adc	r31, r31
    514c:	ee 0f       	add	r30, r30
    514e:	ff 1f       	adc	r31, r31
    5150:	e7 5b       	subi	r30, 0xB7	; 183
    5152:	fd 4f       	sbci	r31, 0xFD	; 253
    5154:	21 81       	ldd	r18, Z+1	; 0x01
    5156:	92 2b       	or	r25, r18
    5158:	91 83       	std	Z+1, r25	; 0x01
    515a:	8f 5f       	subi	r24, 0xFF	; 255
    515c:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5160:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    5164:	e0 32       	cpi	r30, 0x20	; 32
    5166:	28 f5       	brcc	.+74     	; 0x51b2 <menu_ModuleTestExecute+0x146>
    5168:	f0 e0       	ldi	r31, 0x00	; 0
    516a:	ee 0f       	add	r30, r30
    516c:	ff 1f       	adc	r31, r31
    516e:	ee 0f       	add	r30, r30
    5170:	ff 1f       	adc	r31, r31
    5172:	ee 0f       	add	r30, r30
    5174:	ff 1f       	adc	r31, r31
    5176:	e7 5b       	subi	r30, 0xB7	; 183
    5178:	fd 4f       	sbci	r31, 0xFD	; 253
    517a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    517e:	98 2f       	mov	r25, r24
    5180:	90 95       	com	r25
    5182:	81 81       	ldd	r24, Z+1	; 0x01
    5184:	89 23       	and	r24, r25
    5186:	81 83       	std	Z+1, r24	; 0x01
    5188:	8e e1       	ldi	r24, 0x1E	; 30
    518a:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    518e:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    5192:	0e 94 06 38 	call	0x700c	; 0x700c <lcd_dec2out>
    5196:	9f b7       	in	r25, 0x3f	; 63
    5198:	f8 94       	cli
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	06 c0       	rjmp	.+12     	; 0x51aa <menu_ModuleTestExecute+0x13e>
    519e:	ef e2       	ldi	r30, 0x2F	; 47
    51a0:	f2 e0       	ldi	r31, 0x02	; 2
    51a2:	88 e0       	ldi	r24, 0x08	; 8
    51a4:	84 87       	std	Z+12, r24	; 0x0c
    51a6:	15 86       	std	Z+13, r1	; 0x0d
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	81 11       	cpse	r24, r1
    51ac:	f8 cf       	rjmp	.-16     	; 0x519e <menu_ModuleTestExecute+0x132>
    51ae:	9f bf       	out	0x3f, r25	; 63
    51b0:	08 95       	ret
    51b2:	e0 32       	cpi	r30, 0x20	; 32
    51b4:	81 f5       	brne	.+96     	; 0x5216 <menu_ModuleTestExecute+0x1aa>
    51b6:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    51ba:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    51be:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    51c2:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    51c6:	00 97       	sbiw	r24, 0x00	; 0
    51c8:	a1 05       	cpc	r26, r1
    51ca:	b1 05       	cpc	r27, r1
    51cc:	21 f4       	brne	.+8      	; 0x51d6 <menu_ModuleTestExecute+0x16a>
    51ce:	8e ea       	ldi	r24, 0xAE	; 174
    51d0:	93 e0       	ldi	r25, 0x03	; 3
    51d2:	03 df       	rcall	.-506    	; 0x4fda <displayMenuMessage_P>
    51d4:	0f c0       	rjmp	.+30     	; 0x51f4 <menu_ModuleTestExecute+0x188>
    51d6:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <editLong>
    51da:	90 93 da 18 	sts	0x18DA, r25	; 0x8018da <editLong+0x1>
    51de:	a0 93 db 18 	sts	0x18DB, r26	; 0x8018db <editLong+0x2>
    51e2:	b0 93 dc 18 	sts	0x18DC, r27	; 0x8018dc <editLong+0x3>
    51e6:	8b ea       	ldi	r24, 0xAB	; 171
    51e8:	93 e0       	ldi	r25, 0x03	; 3
    51ea:	f7 de       	rcall	.-530    	; 0x4fda <displayMenuMessage_P>
    51ec:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    51f0:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <lcd_longout>
    51f4:	8e ef       	ldi	r24, 0xFE	; 254
    51f6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    51fa:	9f b7       	in	r25, 0x3f	; 63
    51fc:	f8 94       	cli
    51fe:	81 e0       	ldi	r24, 0x01	; 1
    5200:	06 c0       	rjmp	.+12     	; 0x520e <menu_ModuleTestExecute+0x1a2>
    5202:	ef e2       	ldi	r30, 0x2F	; 47
    5204:	f2 e0       	ldi	r31, 0x02	; 2
    5206:	82 e0       	ldi	r24, 0x02	; 2
    5208:	84 87       	std	Z+12, r24	; 0x0c
    520a:	85 87       	std	Z+13, r24	; 0x0d
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	81 11       	cpse	r24, r1
    5210:	f8 cf       	rjmp	.-16     	; 0x5202 <menu_ModuleTestExecute+0x196>
    5212:	9f bf       	out	0x3f, r25	; 63
    5214:	cf cb       	rjmp	.-2146   	; 0x49b4 <menuCursorSetMenu>
    5216:	08 95       	ret

00005218 <menu_ModuleTestPattern>:
    5218:	81 e0       	ldi	r24, 0x01	; 1
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    5220:	02 c0       	rjmp	.+4      	; 0x5226 <menu_ModuleTestPattern+0xe>
    5222:	88 0f       	add	r24, r24
    5224:	99 1f       	adc	r25, r25
    5226:	0a 94       	dec	r0
    5228:	e2 f7       	brpl	.-8      	; 0x5222 <menu_ModuleTestPattern+0xa>
    522a:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    522e:	8f ef       	ldi	r24, 0xFF	; 255
    5230:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5234:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    5238:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    523c:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    5240:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    5244:	13 df       	rcall	.-474    	; 0x506c <menu_ModuleTestExecute>
    5246:	80 e0       	ldi	r24, 0x00	; 0
    5248:	08 95       	ret

0000524a <menuLCDwriteOK>:
    524a:	8e ea       	ldi	r24, 0xAE	; 174
    524c:	93 e0       	ldi	r25, 0x03	; 3
    524e:	c5 ce       	rjmp	.-630    	; 0x4fda <displayMenuMessage_P>
    5250:	08 95       	ret

00005252 <menuOnEnterEEBackup>:
    5252:	8e e1       	ldi	r24, 0x1E	; 30
    5254:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    5258:	81 e9       	ldi	r24, 0x91	; 145
    525a:	93 e0       	ldi	r25, 0x03	; 3
    525c:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    5260:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <eeprom_Backup>
    5264:	f2 df       	rcall	.-28     	; 0x524a <menuLCDwriteOK>
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	08 95       	ret

0000526a <menuOnEnterEERestore>:
    526a:	8e e1       	ldi	r24, 0x1E	; 30
    526c:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    5270:	81 e9       	ldi	r24, 0x91	; 145
    5272:	93 e0       	ldi	r25, 0x03	; 3
    5274:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    5278:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <eeprom_Restore>
    527c:	e6 df       	rcall	.-52     	; 0x524a <menuLCDwriteOK>
    527e:	80 e0       	ldi	r24, 0x00	; 0
    5280:	08 95       	ret

00005282 <menuOnEnterEEUpdate>:
    5282:	81 e9       	ldi	r24, 0x91	; 145
    5284:	93 e0       	ldi	r25, 0x03	; 3
    5286:	a9 de       	rcall	.-686    	; 0x4fda <displayMenuMessage_P>
    5288:	8e e1       	ldi	r24, 0x1E	; 30
    528a:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    528e:	0e 94 bd 0c 	call	0x197a	; 0x197a <eeprom_UpdateALL>
    5292:	db df       	rcall	.-74     	; 0x524a <menuLCDwriteOK>
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	08 95       	ret

00005298 <menudeleteMainMessage>:
    5298:	cf 93       	push	r28
    529a:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    529e:	80 e4       	ldi	r24, 0x40	; 64
    52a0:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    52a4:	84 e1       	ldi	r24, 0x14	; 20
    52a6:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
    52aa:	8c 2f       	mov	r24, r28
    52ac:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    52b0:	cf 91       	pop	r28
    52b2:	08 95       	ret

000052b4 <menu_deleteMessage>:
    52b4:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    52b8:	83 30       	cpi	r24, 0x03	; 3
    52ba:	19 f4       	brne	.+6      	; 0x52c2 <menu_deleteMessage+0xe>
    52bc:	7f db       	rcall	.-2306   	; 0x49bc <menuClearExtraDisp>
    52be:	83 cb       	rjmp	.-2298   	; 0x49c6 <menu_ClearDataDisp>
    52c0:	08 95       	ret
    52c2:	81 11       	cpse	r24, r1
    52c4:	02 c0       	rjmp	.+4      	; 0x52ca <menu_deleteMessage+0x16>
    52c6:	7a cb       	rjmp	.-2316   	; 0x49bc <menuClearExtraDisp>
    52c8:	08 95       	ret
    52ca:	81 30       	cpi	r24, 0x01	; 1
    52cc:	11 f4       	brne	.+4      	; 0x52d2 <menu_deleteMessage+0x1e>
    52ce:	7b cb       	rjmp	.-2314   	; 0x49c6 <menu_ClearDataDisp>
    52d0:	08 95       	ret
    52d2:	e2 cf       	rjmp	.-60     	; 0x5298 <menudeleteMainMessage>
    52d4:	08 95       	ret

000052d6 <menu_DisplayMainMessage_P>:
    52d6:	0f 93       	push	r16
    52d8:	1f 93       	push	r17
    52da:	cf 93       	push	r28
    52dc:	df 93       	push	r29
    52de:	ec 01       	movw	r28, r24
    52e0:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    52e4:	0e 94 9f 3a 	call	0x753e	; 0x753e <get_StrLenP>
    52e8:	08 2f       	mov	r16, r24
    52ea:	80 e4       	ldi	r24, 0x40	; 64
    52ec:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    52f0:	84 e1       	ldi	r24, 0x14	; 20
    52f2:	90 e0       	ldi	r25, 0x00	; 0
    52f4:	80 1b       	sub	r24, r16
    52f6:	91 09       	sbc	r25, r1
    52f8:	95 95       	asr	r25
    52fa:	87 95       	ror	r24
    52fc:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
    5300:	ce 01       	movw	r24, r28
    5302:	0e 94 15 13 	call	0x262a	; 0x262a <lcd_puts_P>
    5306:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    530a:	84 e5       	ldi	r24, 0x54	; 84
    530c:	89 1b       	sub	r24, r25
    530e:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
    5312:	81 2f       	mov	r24, r17
    5314:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    5318:	9f b7       	in	r25, 0x3f	; 63
    531a:	f8 94       	cli
    531c:	81 e0       	ldi	r24, 0x01	; 1
    531e:	06 c0       	rjmp	.+12     	; 0x532c <menu_DisplayMainMessage_P+0x56>
    5320:	ef e2       	ldi	r30, 0x2F	; 47
    5322:	f2 e0       	ldi	r31, 0x02	; 2
    5324:	84 e6       	ldi	r24, 0x64	; 100
    5326:	86 87       	std	Z+14, r24	; 0x0e
    5328:	17 86       	std	Z+15, r1	; 0x0f
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	81 11       	cpse	r24, r1
    532e:	f8 cf       	rjmp	.-16     	; 0x5320 <menu_DisplayMainMessage_P+0x4a>
    5330:	9f bf       	out	0x3f, r25	; 63
    5332:	82 e0       	ldi	r24, 0x02	; 2
    5334:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    5338:	df 91       	pop	r29
    533a:	cf 91       	pop	r28
    533c:	1f 91       	pop	r17
    533e:	0f 91       	pop	r16
    5340:	08 95       	ret

00005342 <menu_DisplayMainMessage>:
    5342:	0f 93       	push	r16
    5344:	1f 93       	push	r17
    5346:	cf 93       	push	r28
    5348:	df 93       	push	r29
    534a:	ec 01       	movw	r28, r24
    534c:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5350:	0e 94 a9 3a 	call	0x7552	; 0x7552 <get_StrLen>
    5354:	08 2f       	mov	r16, r24
    5356:	80 e4       	ldi	r24, 0x40	; 64
    5358:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    535c:	84 e1       	ldi	r24, 0x14	; 20
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	80 1b       	sub	r24, r16
    5362:	91 09       	sbc	r25, r1
    5364:	95 95       	asr	r25
    5366:	87 95       	ror	r24
    5368:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
    536c:	ce 01       	movw	r24, r28
    536e:	0e 94 05 13 	call	0x260a	; 0x260a <lcd_puts>
    5372:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5376:	84 e5       	ldi	r24, 0x54	; 84
    5378:	89 1b       	sub	r24, r25
    537a:	0e 94 c2 39 	call	0x7384	; 0x7384 <lcd_blank>
    537e:	81 2f       	mov	r24, r17
    5380:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    5384:	9f b7       	in	r25, 0x3f	; 63
    5386:	f8 94       	cli
    5388:	81 e0       	ldi	r24, 0x01	; 1
    538a:	06 c0       	rjmp	.+12     	; 0x5398 <menu_DisplayMainMessage+0x56>
    538c:	ef e2       	ldi	r30, 0x2F	; 47
    538e:	f2 e0       	ldi	r31, 0x02	; 2
    5390:	84 e6       	ldi	r24, 0x64	; 100
    5392:	86 87       	std	Z+14, r24	; 0x0e
    5394:	17 86       	std	Z+15, r1	; 0x0f
    5396:	80 e0       	ldi	r24, 0x00	; 0
    5398:	81 11       	cpse	r24, r1
    539a:	f8 cf       	rjmp	.-16     	; 0x538c <menu_DisplayMainMessage+0x4a>
    539c:	9f bf       	out	0x3f, r25	; 63
    539e:	82 e0       	ldi	r24, 0x02	; 2
    53a0:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    53a4:	df 91       	pop	r29
    53a6:	cf 91       	pop	r28
    53a8:	1f 91       	pop	r17
    53aa:	0f 91       	pop	r16
    53ac:	08 95       	ret

000053ae <menuDisplaySaveMessage>:
    53ae:	6d ed       	ldi	r22, 0xDD	; 221
    53b0:	78 e1       	ldi	r23, 0x18	; 24
    53b2:	0e 94 3c 38 	call	0x7078	; 0x7078 <putChar_Dec>
    53b6:	bc 01       	movw	r22, r24
    53b8:	86 ed       	ldi	r24, 0xD6	; 214
    53ba:	93 e0       	ldi	r25, 0x03	; 3
    53bc:	0e 94 30 39 	call	0x7260	; 0x7260 <putString_P>
    53c0:	8d ed       	ldi	r24, 0xDD	; 221
    53c2:	98 e1       	ldi	r25, 0x18	; 24
    53c4:	be cf       	rjmp	.-132    	; 0x5342 <menu_DisplayMainMessage>
    53c6:	08 95       	ret

000053c8 <menuDisplayLoadMessage>:
    53c8:	0f 93       	push	r16
    53ca:	1f 93       	push	r17
    53cc:	cf 93       	push	r28
    53ce:	6d ed       	ldi	r22, 0xDD	; 221
    53d0:	78 e1       	ldi	r23, 0x18	; 24
    53d2:	0e 94 3c 38 	call	0x7078	; 0x7078 <putChar_Dec>
    53d6:	bc 01       	movw	r22, r24
    53d8:	89 ec       	ldi	r24, 0xC9	; 201
    53da:	93 e0       	ldi	r25, 0x03	; 3
    53dc:	0e 94 30 39 	call	0x7260	; 0x7260 <putString_P>
    53e0:	8c 01       	movw	r16, r24
    53e2:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <module_WaitOutputInput2Cycles>
    53e6:	84 e0       	ldi	r24, 0x04	; 4
    53e8:	c0 d3       	rcall	.+1920   	; 0x5b6a <count_Registers>
    53ea:	c8 2f       	mov	r28, r24
    53ec:	88 23       	and	r24, r24
    53ee:	49 f0       	breq	.+18     	; 0x5402 <menuDisplayLoadMessage+0x3a>
    53f0:	b8 01       	movw	r22, r16
    53f2:	87 ec       	ldi	r24, 0xC7	; 199
    53f4:	93 e0       	ldi	r25, 0x03	; 3
    53f6:	0e 94 30 39 	call	0x7260	; 0x7260 <putString_P>
    53fa:	bc 01       	movw	r22, r24
    53fc:	8c 2f       	mov	r24, r28
    53fe:	0e 94 3c 38 	call	0x7078	; 0x7078 <putChar_Dec>
    5402:	8d ed       	ldi	r24, 0xDD	; 221
    5404:	98 e1       	ldi	r25, 0x18	; 24
    5406:	9d df       	rcall	.-198    	; 0x5342 <menu_DisplayMainMessage>
    5408:	cf 91       	pop	r28
    540a:	1f 91       	pop	r17
    540c:	0f 91       	pop	r16
    540e:	08 95       	ret

00005410 <handle_programKey>:
    5410:	cf 93       	push	r28
    5412:	c6 2f       	mov	r28, r22
    5414:	88 23       	and	r24, r24
    5416:	2c f4       	brge	.+10     	; 0x5422 <handle_programKey+0x12>
    5418:	6f ef       	ldi	r22, 0xFF	; 255
    541a:	8c 2f       	mov	r24, r28
    541c:	a7 d4       	rcall	.+2382   	; 0x5d6c <register_toProgram>
    541e:	c7 df       	rcall	.-114    	; 0x53ae <menuDisplaySaveMessage>
    5420:	05 c0       	rjmp	.+10     	; 0x542c <handle_programKey+0x1c>
    5422:	88 23       	and	r24, r24
    5424:	19 f0       	breq	.+6      	; 0x542c <handle_programKey+0x1c>
    5426:	86 2f       	mov	r24, r22
    5428:	05 d4       	rcall	.+2058   	; 0x5c34 <program_toRegister>
    542a:	ce df       	rcall	.-100    	; 0x53c8 <menuDisplayLoadMessage>
    542c:	8c 2f       	mov	r24, r28
    542e:	0e d5       	rcall	.+2588   	; 0x5e4c <midi_CountRegisterInProgram>
    5430:	88 23       	and	r24, r24
    5432:	31 f0       	breq	.+12     	; 0x5440 <handle_programKey+0x30>
    5434:	8c 2f       	mov	r24, r28
    5436:	cf d4       	rcall	.+2462   	; 0x5dd6 <midi_RegisterMatchProgram>
    5438:	81 11       	cpse	r24, r1
    543a:	04 c0       	rjmp	.+8      	; 0x5444 <handle_programKey+0x34>
    543c:	81 e8       	ldi	r24, 0x81	; 129
    543e:	03 c0       	rjmp	.+6      	; 0x5446 <handle_programKey+0x36>
    5440:	82 e8       	ldi	r24, 0x82	; 130
    5442:	01 c0       	rjmp	.+2      	; 0x5446 <handle_programKey+0x36>
    5444:	82 e8       	ldi	r24, 0x82	; 130
    5446:	cf 91       	pop	r28
    5448:	08 95       	ret

0000544a <softKeyK1A>:
    544a:	60 e0       	ldi	r22, 0x00	; 0
    544c:	e1 cf       	rjmp	.-62     	; 0x5410 <handle_programKey>
    544e:	08 95       	ret

00005450 <softKeyK2A>:
    5450:	61 e0       	ldi	r22, 0x01	; 1
    5452:	de cf       	rjmp	.-68     	; 0x5410 <handle_programKey>
    5454:	08 95       	ret

00005456 <softKeyK3A>:
    5456:	62 e0       	ldi	r22, 0x02	; 2
    5458:	db cf       	rjmp	.-74     	; 0x5410 <handle_programKey>
    545a:	08 95       	ret

0000545c <softKeyK4A>:
    545c:	63 e0       	ldi	r22, 0x03	; 3
    545e:	d8 cf       	rjmp	.-80     	; 0x5410 <handle_programKey>
    5460:	08 95       	ret

00005462 <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    5462:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    5464:	34 e0       	ldi	r19, 0x04	; 4
    5466:	83 38       	cpi	r24, 0x83	; 131
    5468:	93 07       	cpc	r25, r19
    546a:	49 f0       	breq	.+18     	; 0x547e <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    546c:	34 e0       	ldi	r19, 0x04	; 4
    546e:	83 38       	cpi	r24, 0x83	; 131
    5470:	93 07       	cpc	r25, r19
    5472:	38 f0       	brcs	.+14     	; 0x5482 <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    5474:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5476:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5478:	a9 f7       	brne	.-22     	; 0x5464 <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    547a:	80 e0       	ldi	r24, 0x00	; 0
    547c:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    547e:	82 2f       	mov	r24, r18
    5480:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    5482:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    5484:	08 95       	ret

00005486 <init_SoftKeys>:

void init_SoftKeys(){
    5486:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5488:	0e 94 3e 0b 	call	0x167c	; 0x167c <eeprom_ReadSoftkeys>
    548c:	8f 3f       	cpi	r24, 0xFF	; 255
    548e:	c9 f4       	brne	.+50     	; 0x54c2 <init_SoftKeys+0x3c>
    5490:	0f c0       	rjmp	.+30     	; 0x54b0 <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    5492:	82 2f       	mov	r24, r18
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	fc 01       	movw	r30, r24
    5498:	ed 54       	subi	r30, 0x4D	; 77
    549a:	fa 4f       	sbci	r31, 0xFA	; 250
    549c:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    549e:	88 0f       	add	r24, r24
    54a0:	99 1f       	adc	r25, r25
    54a2:	fc 01       	movw	r30, r24
    54a4:	e6 54       	subi	r30, 0x46	; 70
    54a6:	fa 4f       	sbci	r31, 0xFA	; 250
    54a8:	11 82       	std	Z+1, r1	; 0x01
    54aa:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    54ac:	2f 5f       	subi	r18, 0xFF	; 255
    54ae:	01 c0       	rjmp	.+2      	; 0x54b2 <init_SoftKeys+0x2c>
    54b0:	20 e0       	ldi	r18, 0x00	; 0
    54b2:	24 30       	cpi	r18, 0x04	; 4
    54b4:	70 f3       	brcs	.-36     	; 0x5492 <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    54b6:	40 e0       	ldi	r20, 0x00	; 0
    54b8:	50 e0       	ldi	r21, 0x00	; 0
    54ba:	67 e0       	ldi	r22, 0x07	; 7
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	0e 94 cb 14 	call	0x2996	; 0x2996 <log_putError>
    54c2:	c0 e0       	ldi	r28, 0x00	; 0
    54c4:	25 c0       	rjmp	.+74     	; 0x5510 <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    54c6:	4c 2f       	mov	r20, r28
    54c8:	50 e0       	ldi	r21, 0x00	; 0
    54ca:	fa 01       	movw	r30, r20
    54cc:	ed 54       	subi	r30, 0x4D	; 77
    54ce:	fa 4f       	sbci	r31, 0xFA	; 250
    54d0:	80 81       	ld	r24, Z
    54d2:	86 31       	cpi	r24, 0x16	; 22
    54d4:	70 f4       	brcc	.+28     	; 0x54f2 <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    54d6:	24 e1       	ldi	r18, 0x14	; 20
    54d8:	82 9f       	mul	r24, r18
    54da:	c0 01       	movw	r24, r0
    54dc:	11 24       	eor	r1, r1
    54de:	8d 57       	subi	r24, 0x7D	; 125
    54e0:	9b 4f       	sbci	r25, 0xFB	; 251
    54e2:	44 0f       	add	r20, r20
    54e4:	55 1f       	adc	r21, r21
    54e6:	fa 01       	movw	r30, r20
    54e8:	e6 54       	subi	r30, 0x46	; 70
    54ea:	fa 4f       	sbci	r31, 0xFA	; 250
    54ec:	91 83       	std	Z+1, r25	; 0x01
    54ee:	80 83       	st	Z, r24
    54f0:	0e c0       	rjmp	.+28     	; 0x550e <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    54f2:	fa 01       	movw	r30, r20
    54f4:	ee 0f       	add	r30, r30
    54f6:	ff 1f       	adc	r31, r31
    54f8:	e6 54       	subi	r30, 0x46	; 70
    54fa:	fa 4f       	sbci	r31, 0xFA	; 250
    54fc:	11 82       	std	Z+1, r1	; 0x01
    54fe:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    5500:	4f 5f       	subi	r20, 0xFF	; 255
    5502:	5f 4f       	sbci	r21, 0xFF	; 255
    5504:	40 61       	ori	r20, 0x10	; 16
    5506:	67 e0       	ldi	r22, 0x07	; 7
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	0e 94 cb 14 	call	0x2996	; 0x2996 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    550e:	cf 5f       	subi	r28, 0xFF	; 255
    5510:	c4 30       	cpi	r28, 0x04	; 4
    5512:	c8 f2       	brcs	.-78     	; 0x54c6 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    5514:	cf 91       	pop	r28
    5516:	08 95       	ret

00005518 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    551c:	64 30       	cpi	r22, 0x04	; 4
    551e:	28 f5       	brcc	.+74     	; 0x556a <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5520:	00 97       	sbiw	r24, 0x00	; 0
    5522:	b9 f0       	breq	.+46     	; 0x5552 <softKey_Set+0x3a>
    5524:	fc 01       	movw	r30, r24
    5526:	24 91       	lpm	r18, Z
    5528:	2f 73       	andi	r18, 0x3F	; 63
    552a:	21 30       	cpi	r18, 0x01	; 1
    552c:	91 f4       	brne	.+36     	; 0x5552 <softKey_Set+0x3a>
    552e:	31 96       	adiw	r30, 0x01	; 1
    5530:	24 91       	lpm	r18, Z
    5532:	24 ff       	sbrs	r18, 4
    5534:	0e c0       	rjmp	.+28     	; 0x5552 <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5536:	c6 2f       	mov	r28, r22
    5538:	d0 e0       	ldi	r29, 0x00	; 0
    553a:	fe 01       	movw	r30, r28
    553c:	ee 0f       	add	r30, r30
    553e:	ff 1f       	adc	r31, r31
    5540:	e6 54       	subi	r30, 0x46	; 70
    5542:	fa 4f       	sbci	r31, 0xFA	; 250
    5544:	91 83       	std	Z+1, r25	; 0x01
    5546:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5548:	8c df       	rcall	.-232    	; 0x5462 <getSoftKeyIndex>
    554a:	cd 54       	subi	r28, 0x4D	; 77
    554c:	da 4f       	sbci	r29, 0xFA	; 250
    554e:	88 83       	st	Y, r24
    5550:	0c c0       	rjmp	.+24     	; 0x556a <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    5552:	70 e0       	ldi	r23, 0x00	; 0
    5554:	fb 01       	movw	r30, r22
    5556:	ee 0f       	add	r30, r30
    5558:	ff 1f       	adc	r31, r31
    555a:	e6 54       	subi	r30, 0x46	; 70
    555c:	fa 4f       	sbci	r31, 0xFA	; 250
    555e:	11 82       	std	Z+1, r1	; 0x01
    5560:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    5562:	fb 01       	movw	r30, r22
    5564:	ed 54       	subi	r30, 0x4D	; 77
    5566:	fa 4f       	sbci	r31, 0xFA	; 250
    5568:	10 82       	st	Z, r1
		}
	}
}
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	08 95       	ret

00005570 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    5570:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    5574:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5578:	3e 96       	adiw	r30, 0x0e	; 14
    557a:	65 91       	lpm	r22, Z+
    557c:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    557e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    5582:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    5586:	c8 df       	rcall	.-112    	; 0x5518 <softKey_Set>
	eeprom_UpdateSoftkeys();
    5588:	0e 94 9b 0c 	call	0x1936	; 0x1936 <eeprom_UpdateSoftkeys>
	return 0;
}
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	08 95       	ret

00005590 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    5590:	0f 93       	push	r16
    5592:	1f 93       	push	r17
    5594:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5596:	c0 e0       	ldi	r28, 0x00	; 0
    5598:	32 c0       	rjmp	.+100    	; 0x55fe <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    559a:	0c 2f       	mov	r16, r28
    559c:	10 e0       	ldi	r17, 0x00	; 0
    559e:	f8 01       	movw	r30, r16
    55a0:	ee 0f       	add	r30, r30
    55a2:	ff 1f       	adc	r31, r31
    55a4:	e6 54       	subi	r30, 0x46	; 70
    55a6:	fa 4f       	sbci	r31, 0xFA	; 250
    55a8:	01 90       	ld	r0, Z+
    55aa:	f0 81       	ld	r31, Z
    55ac:	e0 2d       	mov	r30, r0
    55ae:	30 97       	sbiw	r30, 0x00	; 0
    55b0:	31 f0       	breq	.+12     	; 0x55be <softKeys_toLCD+0x2e>
    55b2:	3e 96       	adiw	r30, 0x0e	; 14
    55b4:	65 91       	lpm	r22, Z+
    55b6:	75 91       	lpm	r23, Z+
    55b8:	61 15       	cp	r22, r1
    55ba:	71 05       	cpc	r23, r1
    55bc:	21 f4       	brne	.+8      	; 0x55c6 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    55be:	8c 2f       	mov	r24, r28
    55c0:	0e 94 49 3a 	call	0x7492	; 0x7492 <keylabel_clr>
    55c4:	1b c0       	rjmp	.+54     	; 0x55fc <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    55c6:	8c 2f       	mov	r24, r28
    55c8:	0e 94 0e 3a 	call	0x741c	; 0x741c <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    55cc:	00 0f       	add	r16, r16
    55ce:	11 1f       	adc	r17, r17
    55d0:	f8 01       	movw	r30, r16
    55d2:	e6 54       	subi	r30, 0x46	; 70
    55d4:	fa 4f       	sbci	r31, 0xFA	; 250
    55d6:	01 90       	ld	r0, Z+
    55d8:	f0 81       	ld	r31, Z
    55da:	e0 2d       	mov	r30, r0
    55dc:	70 96       	adiw	r30, 0x10	; 16
    55de:	05 90       	lpm	r0, Z+
    55e0:	f4 91       	lpm	r31, Z
    55e2:	e0 2d       	mov	r30, r0
    55e4:	30 97       	sbiw	r30, 0x00	; 0
    55e6:	51 f0       	breq	.+20     	; 0x55fc <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    55e8:	80 e0       	ldi	r24, 0x00	; 0
    55ea:	19 95       	eicall
    55ec:	81 38       	cpi	r24, 0x81	; 129
    55ee:	11 f4       	brne	.+4      	; 0x55f4 <softKeys_toLCD+0x64>
    55f0:	6f ef       	ldi	r22, 0xFF	; 255
    55f2:	01 c0       	rjmp	.+2      	; 0x55f6 <softKeys_toLCD+0x66>
    55f4:	60 e0       	ldi	r22, 0x00	; 0
    55f6:	8c 2f       	mov	r24, r28
    55f8:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    55fc:	cf 5f       	subi	r28, 0xFF	; 255
    55fe:	c4 30       	cpi	r28, 0x04	; 4
    5600:	60 f2       	brcs	.-104    	; 0x559a <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    5602:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
}
    5606:	cf 91       	pop	r28
    5608:	1f 91       	pop	r17
    560a:	0f 91       	pop	r16
    560c:	08 95       	ret

0000560e <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    560e:	82 30       	cpi	r24, 0x02	; 2
    5610:	49 f0       	breq	.+18     	; 0x5624 <softKey_MessageKey_ToSoftKeyNr+0x16>
    5612:	18 f4       	brcc	.+6      	; 0x561a <softKey_MessageKey_ToSoftKeyNr+0xc>
    5614:	81 30       	cpi	r24, 0x01	; 1
    5616:	51 f0       	breq	.+20     	; 0x562c <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5618:	0b c0       	rjmp	.+22     	; 0x5630 <softKey_MessageKey_ToSoftKeyNr+0x22>
    561a:	83 30       	cpi	r24, 0x03	; 3
    561c:	59 f0       	breq	.+22     	; 0x5634 <softKey_MessageKey_ToSoftKeyNr+0x26>
    561e:	84 30       	cpi	r24, 0x04	; 4
    5620:	19 f0       	breq	.+6      	; 0x5628 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    5622:	06 c0       	rjmp	.+12     	; 0x5630 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    5624:	80 e0       	ldi	r24, 0x00	; 0
    5626:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5628:	82 e0       	ldi	r24, 0x02	; 2
    562a:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    562c:	83 e0       	ldi	r24, 0x03	; 3
    562e:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    5630:	8f ef       	ldi	r24, 0xFF	; 255
    5632:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    5634:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5636:	08 95       	ret

00005638 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5638:	0f 93       	push	r16
    563a:	1f 93       	push	r17
    563c:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    563e:	84 30       	cpi	r24, 0x04	; 4
    5640:	d0 f5       	brcc	.+116    	; 0x56b6 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    5642:	e8 2f       	mov	r30, r24
    5644:	f0 e0       	ldi	r31, 0x00	; 0
    5646:	ee 0f       	add	r30, r30
    5648:	ff 1f       	adc	r31, r31
    564a:	e6 54       	subi	r30, 0x46	; 70
    564c:	fa 4f       	sbci	r31, 0xFA	; 250
    564e:	00 81       	ld	r16, Z
    5650:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    5652:	01 15       	cp	r16, r1
    5654:	11 05       	cpc	r17, r1
    5656:	89 f1       	breq	.+98     	; 0x56ba <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5658:	f8 01       	movw	r30, r16
    565a:	94 91       	lpm	r25, Z
    565c:	9f 73       	andi	r25, 0x3F	; 63
    565e:	91 30       	cpi	r25, 0x01	; 1
    5660:	71 f5       	brne	.+92     	; 0x56be <softKey_Execute+0x86>
    5662:	31 96       	adiw	r30, 0x01	; 1
    5664:	94 91       	lpm	r25, Z
    5666:	94 ff       	sbrs	r25, 4
    5668:	2c c0       	rjmp	.+88     	; 0x56c2 <softKey_Execute+0x8a>
    566a:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    566c:	3f 96       	adiw	r30, 0x0f	; 15
    566e:	05 90       	lpm	r0, Z+
    5670:	f4 91       	lpm	r31, Z
    5672:	e0 2d       	mov	r30, r0
    5674:	30 97       	sbiw	r30, 0x00	; 0
    5676:	89 f0       	breq	.+34     	; 0x569a <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5678:	86 2f       	mov	r24, r22
    567a:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    567c:	82 38       	cpi	r24, 0x82	; 130
    567e:	29 f4       	brne	.+10     	; 0x568a <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	8c 2f       	mov	r24, r28
    5684:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <keylabel_statcheck>
    5688:	06 c0       	rjmp	.+12     	; 0x5696 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    568a:	81 38       	cpi	r24, 0x81	; 129
    568c:	21 f4       	brne	.+8      	; 0x5696 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    568e:	6f ef       	ldi	r22, 0xFF	; 255
    5690:	8c 2f       	mov	r24, r28
    5692:	0e 94 7c 3a 	call	0x74f8	; 0x74f8 <keylabel_statcheck>
					}
					keylabel_toLCD();
    5696:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    569a:	f8 01       	movw	r30, r16
    569c:	3c 96       	adiw	r30, 0x0c	; 12
    569e:	85 91       	lpm	r24, Z+
    56a0:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    56a2:	00 97       	sbiw	r24, 0x00	; 0
    56a4:	81 f0       	breq	.+32     	; 0x56c6 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    56a6:	b8 01       	movw	r22, r16
    56a8:	6e 5f       	subi	r22, 0xFE	; 254
    56aa:	7f 4f       	sbci	r23, 0xFF	; 255
    56ac:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <menu_Init>
					menu_InitLCD(); //display menu
    56b0:	4e da       	rcall	.-2916   	; 0x4b4e <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	09 c0       	rjmp	.+18     	; 0x56c8 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    56b6:	8f ef       	ldi	r24, 0xFF	; 255
    56b8:	07 c0       	rjmp	.+14     	; 0x56c8 <softKey_Execute+0x90>
    56ba:	8f ef       	ldi	r24, 0xFF	; 255
    56bc:	05 c0       	rjmp	.+10     	; 0x56c8 <softKey_Execute+0x90>
    56be:	8f ef       	ldi	r24, 0xFF	; 255
    56c0:	03 c0       	rjmp	.+6      	; 0x56c8 <softKey_Execute+0x90>
    56c2:	8f ef       	ldi	r24, 0xFF	; 255
    56c4:	01 c0       	rjmp	.+2      	; 0x56c8 <softKey_Execute+0x90>
    56c6:	8f ef       	ldi	r24, 0xFF	; 255
}
    56c8:	cf 91       	pop	r28
    56ca:	1f 91       	pop	r17
    56cc:	0f 91       	pop	r16
    56ce:	08 95       	ret

000056d0 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    56d0:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    56d2:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    56d6:	8c e0       	ldi	r24, 0x0C	; 12
    56d8:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    56dc:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    56e0:	84 ff       	sbrs	r24, 4
    56e2:	02 c0       	rjmp	.+4      	; 0x56e8 <menu_showPowerState+0x18>
    56e4:	80 e2       	ldi	r24, 0x20	; 32
    56e6:	01 c0       	rjmp	.+2      	; 0x56ea <menu_showPowerState+0x1a>
    56e8:	89 e0       	ldi	r24, 0x09	; 9
    56ea:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
	lcd_goto(saveCursor);
    56ee:	8c 2f       	mov	r24, r28
    56f0:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>

    56f4:	cf 91       	pop	r28
    56f6:	08 95       	ret

000056f8 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    56f8:	85 b1       	in	r24, 0x05	; 5
    56fa:	80 64       	ori	r24, 0x40	; 64
    56fc:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    56fe:	83 e1       	ldi	r24, 0x13	; 19
    5700:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5704:	e5 df       	rcall	.-54     	; 0x56d0 <menu_showPowerState>
	return 0;
}
    5706:	80 e0       	ldi	r24, 0x00	; 0
    5708:	08 95       	ret

0000570a <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    570a:	85 b1       	in	r24, 0x05	; 5
    570c:	8f 7b       	andi	r24, 0xBF	; 191
    570e:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    5710:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5714:	dd df       	rcall	.-70     	; 0x56d0 <menu_showPowerState>
	return 0;
}
    5716:	80 e0       	ldi	r24, 0x00	; 0
    5718:	08 95       	ret

0000571a <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    571a:	85 b1       	in	r24, 0x05	; 5
    571c:	8f 7b       	andi	r24, 0xBF	; 191
    571e:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5726:	d4 df       	rcall	.-88     	; 0x56d0 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5728:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    572a:	f8 94       	cli
    572c:	81 e0       	ldi	r24, 0x01	; 1
    572e:	06 c0       	rjmp	.+12     	; 0x573c <menuOnEnterPwrRest+0x22>
    5730:	ef e2       	ldi	r30, 0x2F	; 47
    5732:	f2 e0       	ldi	r31, 0x02	; 2
    5734:	88 e2       	ldi	r24, 0x28	; 40
    5736:	82 83       	std	Z+2, r24	; 0x02
    5738:	13 82       	std	Z+3, r1	; 0x03
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	81 11       	cpse	r24, r1
    573e:	f8 cf       	rjmp	.-16     	; 0x5730 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5740:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    5742:	08 95       	ret

00005744 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    5744:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    5748:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    574c:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    5750:	08 95       	ret

00005752 <message_push>:
    5752:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    5756:	e9 2f       	mov	r30, r25
    5758:	f0 e0       	ldi	r31, 0x00	; 0
    575a:	ed 52       	subi	r30, 0x2D	; 45
    575c:	f8 4f       	sbci	r31, 0xF8	; 248
    575e:	80 83       	st	Z, r24
    5760:	9f 5f       	subi	r25, 0xFF	; 255
    5762:	9f 71       	andi	r25, 0x1F	; 31
    5764:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    5768:	98 13       	cpse	r25, r24
    576a:	04 c0       	rjmp	.+8      	; 0x5774 <message_push+0x22>
    576c:	8f ef       	ldi	r24, 0xFF	; 255
    576e:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    5772:	08 95       	ret
    5774:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    5778:	08 95       	ret

0000577a <message_get>:
    577a:	4f b7       	in	r20, 0x3f	; 63
    577c:	f8 94       	cli
    577e:	21 e0       	ldi	r18, 0x01	; 1
    5780:	11 c0       	rjmp	.+34     	; 0x57a4 <message_get+0x2a>
    5782:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    5786:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    578a:	8f ef       	ldi	r24, 0xFF	; 255
    578c:	20 e0       	ldi	r18, 0x00	; 0
    578e:	93 17       	cp	r25, r19
    5790:	49 f0       	breq	.+18     	; 0x57a4 <message_get+0x2a>
    5792:	e9 2f       	mov	r30, r25
    5794:	f0 e0       	ldi	r31, 0x00	; 0
    5796:	ed 52       	subi	r30, 0x2D	; 45
    5798:	f8 4f       	sbci	r31, 0xF8	; 248
    579a:	80 81       	ld	r24, Z
    579c:	9f 5f       	subi	r25, 0xFF	; 255
    579e:	9f 71       	andi	r25, 0x1F	; 31
    57a0:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    57a4:	21 11       	cpse	r18, r1
    57a6:	ed cf       	rjmp	.-38     	; 0x5782 <message_get+0x8>
    57a8:	4f bf       	out	0x3f, r20	; 63
    57aa:	08 95       	ret

000057ac <message_status>:
    57ac:	4f b7       	in	r20, 0x3f	; 63
    57ae:	f8 94       	cli
    57b0:	91 e0       	ldi	r25, 0x01	; 1
    57b2:	08 c0       	rjmp	.+16     	; 0x57c4 <message_status+0x18>
    57b4:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    57b8:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    57bc:	90 e0       	ldi	r25, 0x00	; 0
    57be:	80 e0       	ldi	r24, 0x00	; 0
    57c0:	32 17       	cp	r19, r18
    57c2:	11 f0       	breq	.+4      	; 0x57c8 <message_status+0x1c>
    57c4:	8f ef       	ldi	r24, 0xFF	; 255
    57c6:	01 c0       	rjmp	.+2      	; 0x57ca <message_status+0x1e>
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	91 11       	cpse	r25, r1
    57cc:	f3 cf       	rjmp	.-26     	; 0x57b4 <message_status+0x8>
    57ce:	4f bf       	out	0x3f, r20	; 63
    57d0:	08 95       	ret

000057d2 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    57d2:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    57d4:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    57d8:	99 23       	and	r25, r25
    57da:	e1 f0       	breq	.+56     	; 0x5814 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    57dc:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    57e0:	21 e0       	ldi	r18, 0x01	; 1
    57e2:	29 0f       	add	r18, r25
    57e4:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    57e8:	e9 2f       	mov	r30, r25
    57ea:	f0 e0       	ldi	r31, 0x00	; 0
    57ec:	ee 0f       	add	r30, r30
    57ee:	ff 1f       	adc	r31, r31
    57f0:	e0 53       	subi	r30, 0x30	; 48
    57f2:	fa 4f       	sbci	r31, 0xFA	; 250
    57f4:	51 83       	std	Z+1, r21	; 0x01
    57f6:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    57f8:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    57fc:	28 13       	cpse	r18, r24
    57fe:	0a c0       	rjmp	.+20     	; 0x5814 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5800:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5804:	9f 3f       	cpi	r25, 0xFF	; 255
    5806:	19 f4       	brne	.+6      	; 0x580e <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5808:	8f ef       	ldi	r24, 0xFF	; 255
    580a:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    580e:	8f ef       	ldi	r24, 0xFF	; 255
    5810:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    5814:	08 95       	ret

00005816 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5816:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    581a:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    581e:	e8 13       	cpse	r30, r24
    5820:	03 c0       	rjmp	.+6      	; 0x5828 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5822:	8f ef       	ldi	r24, 0xFF	; 255
    5824:	9f ef       	ldi	r25, 0xFF	; 255
    5826:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	8e 0f       	add	r24, r30
    582c:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    5830:	f0 e0       	ldi	r31, 0x00	; 0
    5832:	ee 0f       	add	r30, r30
    5834:	ff 1f       	adc	r31, r31
    5836:	e0 53       	subi	r30, 0x30	; 48
    5838:	fa 4f       	sbci	r31, 0xFA	; 250
    583a:	80 81       	ld	r24, Z
    583c:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    583e:	08 95       	ret

00005840 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5840:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5844:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5848:	98 13       	cpse	r25, r24
    584a:	02 c0       	rjmp	.+4      	; 0x5850 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    584c:	80 e0       	ldi	r24, 0x00	; 0
    584e:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5850:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5852:	08 95       	ret

00005854 <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5854:	80 e0       	ldi	r24, 0x00	; 0
    5856:	ef e0       	ldi	r30, 0x0F	; 15
    5858:	f8 e0       	ldi	r31, 0x08	; 8
    585a:	03 c0       	rjmp	.+6      	; 0x5862 <midi_CouplerReset+0xe>
    585c:	10 82       	st	Z, r1
    585e:	8f 5f       	subi	r24, 0xFF	; 255
    5860:	31 96       	adiw	r30, 0x01	; 1
    5862:	8c 30       	cpi	r24, 0x0C	; 12
    5864:	d8 f3       	brcs	.-10     	; 0x585c <midi_CouplerReset+0x8>
    5866:	08 95       	ret

00005868 <init_Midi>:
    5868:	f5 cf       	rjmp	.-22     	; 0x5854 <midi_CouplerReset>
    586a:	08 95       	ret

0000586c <set_Coupler>:
    586c:	8c 30       	cpi	r24, 0x0C	; 12
    586e:	e8 f4       	brcc	.+58     	; 0x58aa <set_Coupler+0x3e>
    5870:	e8 2f       	mov	r30, r24
    5872:	f0 e0       	ldi	r31, 0x00	; 0
    5874:	e1 5f       	subi	r30, 0xF1	; 241
    5876:	f7 4f       	sbci	r31, 0xF7	; 247
    5878:	9f ef       	ldi	r25, 0xFF	; 255
    587a:	90 83       	st	Z, r25
    587c:	86 30       	cpi	r24, 0x06	; 6
    587e:	10 f0       	brcs	.+4      	; 0x5884 <set_Coupler+0x18>
    5880:	86 50       	subi	r24, 0x06	; 6
    5882:	01 c0       	rjmp	.+2      	; 0x5886 <set_Coupler+0x1a>
    5884:	8a 5f       	subi	r24, 0xFA	; 250
    5886:	e8 2f       	mov	r30, r24
    5888:	f0 e0       	ldi	r31, 0x00	; 0
    588a:	df 01       	movw	r26, r30
    588c:	a1 5f       	subi	r26, 0xF1	; 241
    588e:	b7 4f       	sbci	r27, 0xF7	; 247
    5890:	8c 91       	ld	r24, X
    5892:	88 23       	and	r24, r24
    5894:	59 f0       	breq	.+22     	; 0x58ac <set_Coupler+0x40>
    5896:	df 01       	movw	r26, r30
    5898:	a1 5f       	subi	r26, 0xF1	; 241
    589a:	b7 4f       	sbci	r27, 0xF7	; 247
    589c:	1c 92       	st	X, r1
    589e:	ee 0f       	add	r30, r30
    58a0:	ff 1f       	adc	r31, r31
    58a2:	e3 54       	subi	r30, 0x43	; 67
    58a4:	fe 4e       	sbci	r31, 0xEE	; 238
    58a6:	84 91       	lpm	r24, Z
    58a8:	08 95       	ret
    58aa:	80 e0       	ldi	r24, 0x00	; 0
    58ac:	08 95       	ret

000058ae <getAllCouplers>:
    58ae:	80 e0       	ldi	r24, 0x00	; 0
    58b0:	90 e0       	ldi	r25, 0x00	; 0
    58b2:	4b e0       	ldi	r20, 0x0B	; 11
    58b4:	01 c0       	rjmp	.+2      	; 0x58b8 <getAllCouplers+0xa>
    58b6:	42 2f       	mov	r20, r18
    58b8:	28 2f       	mov	r18, r24
    58ba:	39 2f       	mov	r19, r25
    58bc:	22 0f       	add	r18, r18
    58be:	33 1f       	adc	r19, r19
    58c0:	82 2f       	mov	r24, r18
    58c2:	93 2f       	mov	r25, r19
    58c4:	e4 2f       	mov	r30, r20
    58c6:	f0 e0       	ldi	r31, 0x00	; 0
    58c8:	e1 5f       	subi	r30, 0xF1	; 241
    58ca:	f7 4f       	sbci	r31, 0xF7	; 247
    58cc:	50 81       	ld	r21, Z
    58ce:	5f 3f       	cpi	r21, 0xFF	; 255
    58d0:	09 f4       	brne	.+2      	; 0x58d4 <getAllCouplers+0x26>
    58d2:	81 60       	ori	r24, 0x01	; 1
    58d4:	2f ef       	ldi	r18, 0xFF	; 255
    58d6:	24 0f       	add	r18, r20
    58d8:	41 11       	cpse	r20, r1
    58da:	ed cf       	rjmp	.-38     	; 0x58b6 <getAllCouplers+0x8>
    58dc:	08 95       	ret

000058de <setAllCouplers>:
    58de:	40 e0       	ldi	r20, 0x00	; 0
    58e0:	80 ff       	sbrs	r24, 0
    58e2:	07 c0       	rjmp	.+14     	; 0x58f2 <setAllCouplers+0x14>
    58e4:	e4 2f       	mov	r30, r20
    58e6:	f0 e0       	ldi	r31, 0x00	; 0
    58e8:	e1 5f       	subi	r30, 0xF1	; 241
    58ea:	f7 4f       	sbci	r31, 0xF7	; 247
    58ec:	2f ef       	ldi	r18, 0xFF	; 255
    58ee:	20 83       	st	Z, r18
    58f0:	05 c0       	rjmp	.+10     	; 0x58fc <setAllCouplers+0x1e>
    58f2:	e4 2f       	mov	r30, r20
    58f4:	f0 e0       	ldi	r31, 0x00	; 0
    58f6:	e1 5f       	subi	r30, 0xF1	; 241
    58f8:	f7 4f       	sbci	r31, 0xF7	; 247
    58fa:	10 82       	st	Z, r1
    58fc:	28 2f       	mov	r18, r24
    58fe:	39 2f       	mov	r19, r25
    5900:	36 95       	lsr	r19
    5902:	27 95       	ror	r18
    5904:	82 2f       	mov	r24, r18
    5906:	93 2f       	mov	r25, r19
    5908:	4f 5f       	subi	r20, 0xFF	; 255
    590a:	4c 30       	cpi	r20, 0x0C	; 12
    590c:	48 f3       	brcs	.-46     	; 0x58e0 <setAllCouplers+0x2>
    590e:	08 95       	ret

00005910 <midiAllReset>:
    5910:	80 e8       	ldi	r24, 0x80	; 128
    5912:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    5916:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <init_Pipe>
    591a:	08 95       	ret

0000591c <registers_CalcCount>:
    591c:	20 e0       	ldi	r18, 0x00	; 0
    591e:	30 e0       	ldi	r19, 0x00	; 0
    5920:	12 c0       	rjmp	.+36     	; 0x5946 <registers_CalcCount+0x2a>
    5922:	82 2f       	mov	r24, r18
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	fc 01       	movw	r30, r24
    5928:	ee 0f       	add	r30, r30
    592a:	ff 1f       	adc	r31, r31
    592c:	8e 0f       	add	r24, r30
    592e:	9f 1f       	adc	r25, r31
    5930:	fc 01       	movw	r30, r24
    5932:	ea 50       	subi	r30, 0x0A	; 10
    5934:	f8 4f       	sbci	r31, 0xF8	; 248
    5936:	81 81       	ldd	r24, Z+1	; 0x01
    5938:	8f 3f       	cpi	r24, 0xFF	; 255
    593a:	21 f0       	breq	.+8      	; 0x5944 <registers_CalcCount+0x28>
    593c:	83 17       	cp	r24, r19
    593e:	10 f0       	brcs	.+4      	; 0x5944 <registers_CalcCount+0x28>
    5940:	31 e0       	ldi	r19, 0x01	; 1
    5942:	38 0f       	add	r19, r24
    5944:	2f 5f       	subi	r18, 0xFF	; 255
    5946:	28 30       	cpi	r18, 0x08	; 8
    5948:	60 f3       	brcs	.-40     	; 0x5922 <registers_CalcCount+0x6>
    594a:	30 93 0e 08 	sts	0x080E, r19	; 0x80080e <registerCount>
    594e:	08 95       	ret

00005950 <init_Registers>:
    5950:	8f ef       	ldi	r24, 0xFF	; 255
    5952:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	0e c0       	rjmp	.+28     	; 0x5976 <init_Registers+0x26>
    595a:	82 2f       	mov	r24, r18
    595c:	90 e0       	ldi	r25, 0x00	; 0
    595e:	fc 01       	movw	r30, r24
    5960:	ee 0f       	add	r30, r30
    5962:	ff 1f       	adc	r31, r31
    5964:	e8 0f       	add	r30, r24
    5966:	f9 1f       	adc	r31, r25
    5968:	ea 50       	subi	r30, 0x0A	; 10
    596a:	f8 4f       	sbci	r31, 0xF8	; 248
    596c:	8f ef       	ldi	r24, 0xFF	; 255
    596e:	80 83       	st	Z, r24
    5970:	81 83       	std	Z+1, r24	; 0x01
    5972:	12 82       	std	Z+2, r1	; 0x02
    5974:	2f 5f       	subi	r18, 0xFF	; 255
    5976:	28 30       	cpi	r18, 0x08	; 8
    5978:	80 f3       	brcs	.-32     	; 0x595a <init_Registers+0xa>
    597a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <eeprom_ReadReg>
    597e:	8f 3f       	cpi	r24, 0xFF	; 255
    5980:	49 f4       	brne	.+18     	; 0x5994 <init_Registers+0x44>
    5982:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <registerCount>
    5986:	40 e0       	ldi	r20, 0x00	; 0
    5988:	50 e0       	ldi	r21, 0x00	; 0
    598a:	65 e0       	ldi	r22, 0x05	; 5
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	0e 94 cb 14 	call	0x2996	; 0x2996 <log_putError>
    5992:	01 c0       	rjmp	.+2      	; 0x5996 <init_Registers+0x46>
    5994:	c3 df       	rcall	.-122    	; 0x591c <registers_CalcCount>
    5996:	0e 94 16 0b 	call	0x162c	; 0x162c <eeprom_ReadProg>
    599a:	8f 3f       	cpi	r24, 0xFF	; 255
    599c:	a1 f5       	brne	.+104    	; 0x5a06 <init_Registers+0xb6>
    599e:	2a c0       	rjmp	.+84     	; 0x59f4 <init_Registers+0xa4>
    59a0:	83 2f       	mov	r24, r19
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	fc 01       	movw	r30, r24
    59a6:	ee 0f       	add	r30, r30
    59a8:	ff 1f       	adc	r31, r31
    59aa:	88 0f       	add	r24, r24
    59ac:	99 1f       	adc	r25, r25
    59ae:	88 0f       	add	r24, r24
    59b0:	99 1f       	adc	r25, r25
    59b2:	88 0f       	add	r24, r24
    59b4:	99 1f       	adc	r25, r25
    59b6:	e8 0f       	add	r30, r24
    59b8:	f9 1f       	adc	r31, r25
    59ba:	ee 59       	subi	r30, 0x9E	; 158
    59bc:	f6 4f       	sbci	r31, 0xF6	; 246
    59be:	e2 0f       	add	r30, r18
    59c0:	f1 1d       	adc	r31, r1
    59c2:	10 82       	st	Z, r1
    59c4:	2f 5f       	subi	r18, 0xFF	; 255
    59c6:	01 c0       	rjmp	.+2      	; 0x59ca <init_Registers+0x7a>
    59c8:	20 e0       	ldi	r18, 0x00	; 0
    59ca:	28 30       	cpi	r18, 0x08	; 8
    59cc:	48 f3       	brcs	.-46     	; 0x59a0 <init_Registers+0x50>
    59ce:	83 2f       	mov	r24, r19
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	fc 01       	movw	r30, r24
    59d4:	ee 0f       	add	r30, r30
    59d6:	ff 1f       	adc	r31, r31
    59d8:	88 0f       	add	r24, r24
    59da:	99 1f       	adc	r25, r25
    59dc:	88 0f       	add	r24, r24
    59de:	99 1f       	adc	r25, r25
    59e0:	88 0f       	add	r24, r24
    59e2:	99 1f       	adc	r25, r25
    59e4:	e8 0f       	add	r30, r24
    59e6:	f9 1f       	adc	r31, r25
    59e8:	ee 59       	subi	r30, 0x9E	; 158
    59ea:	f6 4f       	sbci	r31, 0xF6	; 246
    59ec:	11 86       	std	Z+9, r1	; 0x09
    59ee:	10 86       	std	Z+8, r1	; 0x08
    59f0:	3f 5f       	subi	r19, 0xFF	; 255
    59f2:	01 c0       	rjmp	.+2      	; 0x59f6 <init_Registers+0xa6>
    59f4:	30 e0       	ldi	r19, 0x00	; 0
    59f6:	30 34       	cpi	r19, 0x40	; 64
    59f8:	38 f3       	brcs	.-50     	; 0x59c8 <init_Registers+0x78>
    59fa:	40 e0       	ldi	r20, 0x00	; 0
    59fc:	50 e0       	ldi	r21, 0x00	; 0
    59fe:	66 e0       	ldi	r22, 0x06	; 6
    5a00:	81 e0       	ldi	r24, 0x01	; 1
    5a02:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <log_putError>
    5a06:	08 95       	ret

00005a08 <regNr_to_moduleBit>:
    5a08:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5a0c:	89 17       	cp	r24, r25
    5a0e:	a0 f4       	brcc	.+40     	; 0x5a38 <regNr_to_moduleBit+0x30>
    5a10:	80 34       	cpi	r24, 0x40	; 64
    5a12:	90 f4       	brcc	.+36     	; 0x5a38 <regNr_to_moduleBit+0x30>
    5a14:	28 e0       	ldi	r18, 0x08	; 8
    5a16:	e6 ef       	ldi	r30, 0xF6	; 246
    5a18:	f7 e0       	ldi	r31, 0x07	; 7
    5a1a:	30 81       	ld	r19, Z
    5a1c:	83 17       	cp	r24, r19
    5a1e:	48 f0       	brcs	.+18     	; 0x5a32 <regNr_to_moduleBit+0x2a>
    5a20:	91 81       	ldd	r25, Z+1	; 0x01
    5a22:	98 17       	cp	r25, r24
    5a24:	30 f0       	brcs	.+12     	; 0x5a32 <regNr_to_moduleBit+0x2a>
    5a26:	22 81       	ldd	r18, Z+2	; 0x02
    5a28:	98 2f       	mov	r25, r24
    5a2a:	93 1b       	sub	r25, r19
    5a2c:	80 e0       	ldi	r24, 0x00	; 0
    5a2e:	92 0f       	add	r25, r18
    5a30:	08 95       	ret
    5a32:	33 96       	adiw	r30, 0x03	; 3
    5a34:	21 50       	subi	r18, 0x01	; 1
    5a36:	89 f7       	brne	.-30     	; 0x5a1a <regNr_to_moduleBit+0x12>
    5a38:	8f ef       	ldi	r24, 0xFF	; 255
    5a3a:	90 e0       	ldi	r25, 0x00	; 0
    5a3c:	08 95       	ret

00005a3e <moduleBit_to_registerNr>:
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	16 c0       	rjmp	.+44     	; 0x5a6e <moduleBit_to_registerNr+0x30>
    5a42:	40 91 f8 07 	lds	r20, 0x07F8	; 0x8007f8 <registerMap+0x2>
    5a46:	84 17       	cp	r24, r20
    5a48:	88 f0       	brcs	.+34     	; 0x5a6c <moduleBit_to_registerNr+0x2e>
    5a4a:	68 2f       	mov	r22, r24
    5a4c:	70 e0       	ldi	r23, 0x00	; 0
    5a4e:	e6 ef       	ldi	r30, 0xF6	; 246
    5a50:	f7 e0       	ldi	r31, 0x07	; 7
    5a52:	21 81       	ldd	r18, Z+1	; 0x01
    5a54:	30 e0       	ldi	r19, 0x00	; 0
    5a56:	24 0f       	add	r18, r20
    5a58:	31 1d       	adc	r19, r1
    5a5a:	50 81       	ld	r21, Z
    5a5c:	25 1b       	sub	r18, r21
    5a5e:	31 09       	sbc	r19, r1
    5a60:	26 17       	cp	r18, r22
    5a62:	37 07       	cpc	r19, r23
    5a64:	1c f0       	brlt	.+6      	; 0x5a6c <moduleBit_to_registerNr+0x2e>
    5a66:	84 1b       	sub	r24, r20
    5a68:	85 0f       	add	r24, r21
    5a6a:	08 95       	ret
    5a6c:	9f 5f       	subi	r25, 0xFF	; 255
    5a6e:	98 30       	cpi	r25, 0x08	; 8
    5a70:	40 f3       	brcs	.-48     	; 0x5a42 <moduleBit_to_registerNr+0x4>
    5a72:	8f ef       	ldi	r24, 0xFF	; 255
    5a74:	08 95       	ret

00005a76 <read_Register>:
    5a76:	cf 93       	push	r28
    5a78:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5a7c:	89 17       	cp	r24, r25
    5a7e:	08 f0       	brcs	.+2      	; 0x5a82 <read_Register+0xc>
    5a80:	3c c0       	rjmp	.+120    	; 0x5afa <read_Register+0x84>
    5a82:	c6 2f       	mov	r28, r22
    5a84:	c1 df       	rcall	.-126    	; 0x5a08 <regNr_to_moduleBit>
    5a86:	81 11       	cpse	r24, r1
    5a88:	30 c0       	rjmp	.+96     	; 0x5aea <read_Register+0x74>
    5a8a:	29 2f       	mov	r18, r25
    5a8c:	2f 71       	andi	r18, 0x1F	; 31
    5a8e:	92 95       	swap	r25
    5a90:	96 95       	lsr	r25
    5a92:	97 70       	andi	r25, 0x07	; 7
    5a94:	41 e0       	ldi	r20, 0x01	; 1
    5a96:	50 e0       	ldi	r21, 0x00	; 0
    5a98:	02 c0       	rjmp	.+4      	; 0x5a9e <read_Register+0x28>
    5a9a:	44 0f       	add	r20, r20
    5a9c:	55 1f       	adc	r21, r21
    5a9e:	9a 95       	dec	r25
    5aa0:	e2 f7       	brpl	.-8      	; 0x5a9a <read_Register+0x24>
    5aa2:	30 e0       	ldi	r19, 0x00	; 0
    5aa4:	f9 01       	movw	r30, r18
    5aa6:	ee 0f       	add	r30, r30
    5aa8:	ff 1f       	adc	r31, r31
    5aaa:	ee 0f       	add	r30, r30
    5aac:	ff 1f       	adc	r31, r31
    5aae:	ee 0f       	add	r30, r30
    5ab0:	ff 1f       	adc	r31, r31
    5ab2:	e7 5b       	subi	r30, 0xB7	; 183
    5ab4:	fd 4f       	sbci	r31, 0xFD	; 253
    5ab6:	91 81       	ldd	r25, Z+1	; 0x01
    5ab8:	94 23       	and	r25, r20
    5aba:	11 f4       	brne	.+4      	; 0x5ac0 <read_Register+0x4a>
    5abc:	c1 fd       	sbrc	r28, 1
    5abe:	17 c0       	rjmp	.+46     	; 0x5aee <read_Register+0x78>
    5ac0:	22 0f       	add	r18, r18
    5ac2:	33 1f       	adc	r19, r19
    5ac4:	22 0f       	add	r18, r18
    5ac6:	33 1f       	adc	r19, r19
    5ac8:	22 0f       	add	r18, r18
    5aca:	33 1f       	adc	r19, r19
    5acc:	f9 01       	movw	r30, r18
    5ace:	e7 5b       	subi	r30, 0xB7	; 183
    5ad0:	fd 4f       	sbci	r31, 0xFD	; 253
    5ad2:	26 81       	ldd	r18, Z+6	; 0x06
    5ad4:	42 23       	and	r20, r18
    5ad6:	11 f0       	breq	.+4      	; 0x5adc <read_Register+0x66>
    5ad8:	c0 fd       	sbrc	r28, 0
    5ada:	0b c0       	rjmp	.+22     	; 0x5af2 <read_Register+0x7c>
    5adc:	99 23       	and	r25, r25
    5ade:	71 f0       	breq	.+28     	; 0x5afc <read_Register+0x86>
    5ae0:	44 23       	and	r20, r20
    5ae2:	61 f0       	breq	.+24     	; 0x5afc <read_Register+0x86>
    5ae4:	c4 30       	cpi	r28, 0x04	; 4
    5ae6:	51 f4       	brne	.+20     	; 0x5afc <read_Register+0x86>
    5ae8:	06 c0       	rjmp	.+12     	; 0x5af6 <read_Register+0x80>
    5aea:	80 e0       	ldi	r24, 0x00	; 0
    5aec:	07 c0       	rjmp	.+14     	; 0x5afc <read_Register+0x86>
    5aee:	81 e0       	ldi	r24, 0x01	; 1
    5af0:	05 c0       	rjmp	.+10     	; 0x5afc <read_Register+0x86>
    5af2:	81 e0       	ldi	r24, 0x01	; 1
    5af4:	03 c0       	rjmp	.+6      	; 0x5afc <read_Register+0x86>
    5af6:	81 e0       	ldi	r24, 0x01	; 1
    5af8:	01 c0       	rjmp	.+2      	; 0x5afc <read_Register+0x86>
    5afa:	80 e0       	ldi	r24, 0x00	; 0
    5afc:	cf 91       	pop	r28
    5afe:	08 95       	ret

00005b00 <get_RegisterStatus>:
    5b00:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5b04:	89 17       	cp	r24, r25
    5b06:	78 f5       	brcc	.+94     	; 0x5b66 <get_RegisterStatus+0x66>
    5b08:	7f df       	rcall	.-258    	; 0x5a08 <regNr_to_moduleBit>
    5b0a:	81 11       	cpse	r24, r1
    5b0c:	28 c0       	rjmp	.+80     	; 0x5b5e <get_RegisterStatus+0x5e>
    5b0e:	29 2f       	mov	r18, r25
    5b10:	2f 71       	andi	r18, 0x1F	; 31
    5b12:	39 2f       	mov	r19, r25
    5b14:	32 95       	swap	r19
    5b16:	36 95       	lsr	r19
    5b18:	37 70       	andi	r19, 0x07	; 7
    5b1a:	81 e0       	ldi	r24, 0x01	; 1
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	02 c0       	rjmp	.+4      	; 0x5b24 <get_RegisterStatus+0x24>
    5b20:	88 0f       	add	r24, r24
    5b22:	99 1f       	adc	r25, r25
    5b24:	3a 95       	dec	r19
    5b26:	e2 f7       	brpl	.-8      	; 0x5b20 <get_RegisterStatus+0x20>
    5b28:	30 e0       	ldi	r19, 0x00	; 0
    5b2a:	f9 01       	movw	r30, r18
    5b2c:	ee 0f       	add	r30, r30
    5b2e:	ff 1f       	adc	r31, r31
    5b30:	ee 0f       	add	r30, r30
    5b32:	ff 1f       	adc	r31, r31
    5b34:	ee 0f       	add	r30, r30
    5b36:	ff 1f       	adc	r31, r31
    5b38:	e7 5b       	subi	r30, 0xB7	; 183
    5b3a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b3c:	41 81       	ldd	r20, Z+1	; 0x01
    5b3e:	48 23       	and	r20, r24
    5b40:	81 f0       	breq	.+32     	; 0x5b62 <get_RegisterStatus+0x62>
    5b42:	22 0f       	add	r18, r18
    5b44:	33 1f       	adc	r19, r19
    5b46:	22 0f       	add	r18, r18
    5b48:	33 1f       	adc	r19, r19
    5b4a:	22 0f       	add	r18, r18
    5b4c:	33 1f       	adc	r19, r19
    5b4e:	f9 01       	movw	r30, r18
    5b50:	e7 5b       	subi	r30, 0xB7	; 183
    5b52:	fd 4f       	sbci	r31, 0xFD	; 253
    5b54:	96 81       	ldd	r25, Z+6	; 0x06
    5b56:	89 23       	and	r24, r25
    5b58:	39 f0       	breq	.+14     	; 0x5b68 <get_RegisterStatus+0x68>
    5b5a:	81 e0       	ldi	r24, 0x01	; 1
    5b5c:	08 95       	ret
    5b5e:	80 e0       	ldi	r24, 0x00	; 0
    5b60:	08 95       	ret
    5b62:	82 e0       	ldi	r24, 0x02	; 2
    5b64:	08 95       	ret
    5b66:	80 e0       	ldi	r24, 0x00	; 0
    5b68:	08 95       	ret

00005b6a <count_Registers>:
    5b6a:	1f 93       	push	r17
    5b6c:	cf 93       	push	r28
    5b6e:	df 93       	push	r29
    5b70:	18 2f       	mov	r17, r24
    5b72:	c0 e0       	ldi	r28, 0x00	; 0
    5b74:	d0 e0       	ldi	r29, 0x00	; 0
    5b76:	06 c0       	rjmp	.+12     	; 0x5b84 <count_Registers+0x1a>
    5b78:	61 2f       	mov	r22, r17
    5b7a:	8c 2f       	mov	r24, r28
    5b7c:	7c df       	rcall	.-264    	; 0x5a76 <read_Register>
    5b7e:	81 11       	cpse	r24, r1
    5b80:	df 5f       	subi	r29, 0xFF	; 255
    5b82:	cf 5f       	subi	r28, 0xFF	; 255
    5b84:	c0 34       	cpi	r28, 0x40	; 64
    5b86:	c0 f3       	brcs	.-16     	; 0x5b78 <count_Registers+0xe>
    5b88:	8d 2f       	mov	r24, r29
    5b8a:	df 91       	pop	r29
    5b8c:	cf 91       	pop	r28
    5b8e:	1f 91       	pop	r17
    5b90:	08 95       	ret

00005b92 <read_allRegister>:
    5b92:	ef 92       	push	r14
    5b94:	ff 92       	push	r15
    5b96:	0f 93       	push	r16
    5b98:	1f 93       	push	r17
    5b9a:	cf 93       	push	r28
    5b9c:	df 93       	push	r29
    5b9e:	7c 01       	movw	r14, r24
    5ba0:	c0 e0       	ldi	r28, 0x00	; 0
    5ba2:	d0 e0       	ldi	r29, 0x00	; 0
    5ba4:	00 e0       	ldi	r16, 0x00	; 0
    5ba6:	17 c0       	rjmp	.+46     	; 0x5bd6 <read_allRegister+0x44>
    5ba8:	1c 2f       	mov	r17, r28
    5baa:	17 70       	andi	r17, 0x07	; 7
    5bac:	09 f4       	brne	.+2      	; 0x5bb0 <read_allRegister+0x1e>
    5bae:	d0 e0       	ldi	r29, 0x00	; 0
    5bb0:	d6 95       	lsr	r29
    5bb2:	63 e0       	ldi	r22, 0x03	; 3
    5bb4:	8c 2f       	mov	r24, r28
    5bb6:	5f df       	rcall	.-322    	; 0x5a76 <read_Register>
    5bb8:	88 23       	and	r24, r24
    5bba:	11 f0       	breq	.+4      	; 0x5bc0 <read_allRegister+0x2e>
    5bbc:	d0 68       	ori	r29, 0x80	; 128
    5bbe:	0f 5f       	subi	r16, 0xFF	; 255
    5bc0:	17 30       	cpi	r17, 0x07	; 7
    5bc2:	41 f4       	brne	.+16     	; 0x5bd4 <read_allRegister+0x42>
    5bc4:	e1 14       	cp	r14, r1
    5bc6:	f1 04       	cpc	r15, r1
    5bc8:	29 f0       	breq	.+10     	; 0x5bd4 <read_allRegister+0x42>
    5bca:	f7 01       	movw	r30, r14
    5bcc:	d0 83       	st	Z, r29
    5bce:	c7 01       	movw	r24, r14
    5bd0:	01 96       	adiw	r24, 0x01	; 1
    5bd2:	7c 01       	movw	r14, r24
    5bd4:	cf 5f       	subi	r28, 0xFF	; 255
    5bd6:	c0 34       	cpi	r28, 0x40	; 64
    5bd8:	38 f3       	brcs	.-50     	; 0x5ba8 <read_allRegister+0x16>
    5bda:	80 2f       	mov	r24, r16
    5bdc:	df 91       	pop	r29
    5bde:	cf 91       	pop	r28
    5be0:	1f 91       	pop	r17
    5be2:	0f 91       	pop	r16
    5be4:	ff 90       	pop	r15
    5be6:	ef 90       	pop	r14
    5be8:	08 95       	ret

00005bea <register_onOff>:
    5bea:	cf 93       	push	r28
    5bec:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5bf0:	89 17       	cp	r24, r25
    5bf2:	f0 f4       	brcc	.+60     	; 0x5c30 <register_onOff+0x46>
    5bf4:	c6 2f       	mov	r28, r22
    5bf6:	08 df       	rcall	.-496    	; 0x5a08 <regNr_to_moduleBit>
    5bf8:	81 11       	cpse	r24, r1
    5bfa:	1a c0       	rjmp	.+52     	; 0x5c30 <register_onOff+0x46>
    5bfc:	89 2f       	mov	r24, r25
    5bfe:	8f 71       	andi	r24, 0x1F	; 31
    5c00:	92 95       	swap	r25
    5c02:	96 95       	lsr	r25
    5c04:	97 70       	andi	r25, 0x07	; 7
    5c06:	c0 ff       	sbrs	r28, 0
    5c08:	0a c0       	rjmp	.+20     	; 0x5c1e <register_onOff+0x34>
    5c0a:	61 e0       	ldi	r22, 0x01	; 1
    5c0c:	70 e0       	ldi	r23, 0x00	; 0
    5c0e:	02 c0       	rjmp	.+4      	; 0x5c14 <register_onOff+0x2a>
    5c10:	66 0f       	add	r22, r22
    5c12:	77 1f       	adc	r23, r23
    5c14:	9a 95       	dec	r25
    5c16:	e2 f7       	brpl	.-8      	; 0x5c10 <register_onOff+0x26>
    5c18:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <pipe_on>
    5c1c:	09 c0       	rjmp	.+18     	; 0x5c30 <register_onOff+0x46>
    5c1e:	61 e0       	ldi	r22, 0x01	; 1
    5c20:	70 e0       	ldi	r23, 0x00	; 0
    5c22:	02 c0       	rjmp	.+4      	; 0x5c28 <register_onOff+0x3e>
    5c24:	66 0f       	add	r22, r22
    5c26:	77 1f       	adc	r23, r23
    5c28:	9a 95       	dec	r25
    5c2a:	e2 f7       	brpl	.-8      	; 0x5c24 <register_onOff+0x3a>
    5c2c:	0e 94 8a 11 	call	0x2314	; 0x2314 <pipe_off>
    5c30:	cf 91       	pop	r28
    5c32:	08 95       	ret

00005c34 <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    5c34:	bf 92       	push	r11
    5c36:	cf 92       	push	r12
    5c38:	df 92       	push	r13
    5c3a:	ef 92       	push	r14
    5c3c:	ff 92       	push	r15
    5c3e:	0f 93       	push	r16
    5c40:	1f 93       	push	r17
    5c42:	cf 93       	push	r28
    5c44:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    5c46:	80 34       	cpi	r24, 0x40	; 64
    5c48:	08 f0       	brcs	.+2      	; 0x5c4c <program_toRegister+0x18>
    5c4a:	40 c0       	rjmp	.+128    	; 0x5ccc <program_toRegister+0x98>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5c4c:	e8 2e       	mov	r14, r24
    5c4e:	f1 2c       	mov	r15, r1
    5c50:	f7 01       	movw	r30, r14
    5c52:	ee 0f       	add	r30, r30
    5c54:	ff 1f       	adc	r31, r31
    5c56:	c7 01       	movw	r24, r14
    5c58:	88 0f       	add	r24, r24
    5c5a:	99 1f       	adc	r25, r25
    5c5c:	88 0f       	add	r24, r24
    5c5e:	99 1f       	adc	r25, r25
    5c60:	88 0f       	add	r24, r24
    5c62:	99 1f       	adc	r25, r25
    5c64:	e8 0f       	add	r30, r24
    5c66:	f9 1f       	adc	r31, r25
    5c68:	ee 59       	subi	r30, 0x9E	; 158
    5c6a:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5c6c:	b1 2c       	mov	r11, r1
uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
    5c6e:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5c70:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5c72:	18 c0       	rjmp	.+48     	; 0x5ca4 <program_toRegister+0x70>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5c74:	6f 01       	movw	r12, r30
    5c76:	8f ef       	ldi	r24, 0xFF	; 255
    5c78:	c8 1a       	sub	r12, r24
    5c7a:	d8 0a       	sbc	r13, r24
    5c7c:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5c7e:	d0 e0       	ldi	r29, 0x00	; 0
    5c80:	0d c0       	rjmp	.+26     	; 0x5c9c <program_toRegister+0x68>
				if ((regBits & 0x01) != 0) {
    5c82:	8c 2f       	mov	r24, r28
    5c84:	81 70       	andi	r24, 0x01	; 1
    5c86:	c0 fd       	sbrc	r28, 0
					result++;
    5c88:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    5c8a:	61 e0       	ldi	r22, 0x01	; 1
    5c8c:	81 11       	cpse	r24, r1
    5c8e:	01 c0       	rjmp	.+2      	; 0x5c92 <program_toRegister+0x5e>
    5c90:	60 e0       	ldi	r22, 0x00	; 0
    5c92:	81 2f       	mov	r24, r17
    5c94:	aa df       	rcall	.-172    	; 0x5bea <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    5c96:	c6 95       	lsr	r28
				regNr++;
    5c98:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5c9a:	df 5f       	subi	r29, 0xFF	; 255
    5c9c:	d8 30       	cpi	r29, 0x08	; 8
    5c9e:	88 f3       	brcs	.-30     	; 0x5c82 <program_toRegister+0x4e>
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5ca0:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5ca2:	f6 01       	movw	r30, r12
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5ca4:	87 e0       	ldi	r24, 0x07	; 7
    5ca6:	8b 15       	cp	r24, r11
    5ca8:	28 f7       	brcc	.-54     	; 0x5c74 <program_toRegister+0x40>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    5caa:	f7 01       	movw	r30, r14
    5cac:	ee 0f       	add	r30, r30
    5cae:	ff 1f       	adc	r31, r31
    5cb0:	ee 0c       	add	r14, r14
    5cb2:	ff 1c       	adc	r15, r15
    5cb4:	ee 0c       	add	r14, r14
    5cb6:	ff 1c       	adc	r15, r15
    5cb8:	ee 0c       	add	r14, r14
    5cba:	ff 1c       	adc	r15, r15
    5cbc:	ee 0d       	add	r30, r14
    5cbe:	ff 1d       	adc	r31, r15
    5cc0:	ee 59       	subi	r30, 0x9E	; 158
    5cc2:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    5cc4:	80 85       	ldd	r24, Z+8	; 0x08
    5cc6:	91 85       	ldd	r25, Z+9	; 0x09
    5cc8:	0a de       	rcall	.-1004   	; 0x58de <setAllCouplers>
    5cca:	01 c0       	rjmp	.+2      	; 0x5cce <program_toRegister+0x9a>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5ccc:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    5cce:	80 2f       	mov	r24, r16
    5cd0:	df 91       	pop	r29
    5cd2:	cf 91       	pop	r28
    5cd4:	1f 91       	pop	r17
    5cd6:	0f 91       	pop	r16
    5cd8:	ff 90       	pop	r15
    5cda:	ef 90       	pop	r14
    5cdc:	df 90       	pop	r13
    5cde:	cf 90       	pop	r12
    5ce0:	bf 90       	pop	r11
    5ce2:	08 95       	ret

00005ce4 <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    5ce4:	cf 93       	push	r28
    5ce6:	df 93       	push	r29
    5ce8:	c8 2f       	mov	r28, r24
    5cea:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    5cec:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting+0x2>
    5cf0:	81 11       	cpse	r24, r1
    5cf2:	14 c0       	rjmp	.+40     	; 0x5d1c <midi_ProgramChange+0x38>
    5cf4:	1f c0       	rjmp	.+62     	; 0x5d34 <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    5cf6:	ec 2f       	mov	r30, r28
    5cf8:	f0 e0       	ldi	r31, 0x00	; 0
    5cfa:	ee 0f       	add	r30, r30
    5cfc:	ff 1f       	adc	r31, r31
    5cfe:	ee 0f       	add	r30, r30
    5d00:	ff 1f       	adc	r31, r31
    5d02:	e8 0f       	add	r30, r24
    5d04:	f1 1d       	adc	r31, r1
    5d06:	ee 0f       	add	r30, r30
    5d08:	ff 1f       	adc	r31, r31
    5d0a:	ee 0f       	add	r30, r30
    5d0c:	ff 1f       	adc	r31, r31
    5d0e:	ea 5d       	subi	r30, 0xDA	; 218
    5d10:	f7 4f       	sbci	r31, 0xF7	; 247
    5d12:	90 81       	ld	r25, Z
    5d14:	9f 3f       	cpi	r25, 0xFF	; 255
    5d16:	39 f4       	brne	.+14     	; 0x5d26 <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    5d18:	8f 5f       	subi	r24, 0xFF	; 255
    5d1a:	01 c0       	rjmp	.+2      	; 0x5d1e <midi_ProgramChange+0x3a>
    5d1c:	80 e0       	ldi	r24, 0x00	; 0
    5d1e:	84 30       	cpi	r24, 0x04	; 4
    5d20:	50 f3       	brcs	.-44     	; 0x5cf6 <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    5d22:	80 e0       	ldi	r24, 0x00	; 0
    5d24:	01 c0       	rjmp	.+2      	; 0x5d28 <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    5d26:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    5d28:	8f 3f       	cpi	r24, 0xFF	; 255
    5d2a:	21 f4       	brne	.+8      	; 0x5d34 <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    5d2c:	8d 2f       	mov	r24, r29
    5d2e:	82 df       	rcall	.-252    	; 0x5c34 <program_toRegister>
			midiLastProgram = program;
    5d30:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    5d34:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    5d38:	c8 13       	cpse	r28, r24
    5d3a:	08 c0       	rjmp	.+16     	; 0x5d4c <midi_ProgramChange+0x68>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    5d3c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    5d40:	8f 3f       	cpi	r24, 0xFF	; 255
    5d42:	21 f0       	breq	.+8      	; 0x5d4c <midi_ProgramChange+0x68>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    5d44:	80 6c       	ori	r24, 0xC0	; 192
    5d46:	84 d6       	rcall	.+3336   	; 0x6a50 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    5d48:	8d 2f       	mov	r24, r29
    5d4a:	82 d6       	rcall	.+3332   	; 0x6a50 <serial1MIDISend>
    5d4c:	df 91       	pop	r29
		}
	}
}
    5d4e:	cf 91       	pop	r28
    5d50:	08 95       	ret

00005d52 <midi_resetRegisters>:
    5d52:	cf 93       	push	r28


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5d54:	c0 e0       	ldi	r28, 0x00	; 0
    5d56:	04 c0       	rjmp	.+8      	; 0x5d60 <midi_resetRegisters+0xe>
		register_onOff(i,REGISTER_OFF);
    5d58:	60 e0       	ldi	r22, 0x00	; 0
    5d5a:	8c 2f       	mov	r24, r28
    5d5c:	46 df       	rcall	.-372    	; 0x5bea <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5d5e:	cf 5f       	subi	r28, 0xFF	; 255
    5d60:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <registerCount>
    5d64:	c8 17       	cp	r28, r24
    5d66:	c0 f3       	brcs	.-16     	; 0x5d58 <midi_resetRegisters+0x6>
		register_onOff(i,REGISTER_OFF);
	}
}
    5d68:	cf 91       	pop	r28
    5d6a:	08 95       	ret

00005d6c <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5d6c:	0f 93       	push	r16
    5d6e:	1f 93       	push	r17
    5d70:	cf 93       	push	r28
    5d72:	df 93       	push	r29
    5d74:	c8 2f       	mov	r28, r24
    5d76:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5d78:	80 34       	cpi	r24, 0x40	; 64
    5d7a:	90 f4       	brcc	.+36     	; 0x5da0 <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5d7c:	28 2f       	mov	r18, r24
    5d7e:	30 e0       	ldi	r19, 0x00	; 0
    5d80:	c9 01       	movw	r24, r18
    5d82:	88 0f       	add	r24, r24
    5d84:	99 1f       	adc	r25, r25
    5d86:	22 0f       	add	r18, r18
    5d88:	33 1f       	adc	r19, r19
    5d8a:	22 0f       	add	r18, r18
    5d8c:	33 1f       	adc	r19, r19
    5d8e:	22 0f       	add	r18, r18
    5d90:	33 1f       	adc	r19, r19
    5d92:	82 0f       	add	r24, r18
    5d94:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5d96:	8e 59       	subi	r24, 0x9E	; 158
    5d98:	96 4f       	sbci	r25, 0xF6	; 246
    5d9a:	fb de       	rcall	.-522    	; 0x5b92 <read_allRegister>
    5d9c:	18 2f       	mov	r17, r24
    5d9e:	01 c0       	rjmp	.+2      	; 0x5da2 <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5da0:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5da2:	d0 e0       	ldi	r29, 0x00	; 0
    5da4:	84 dd       	rcall	.-1272   	; 0x58ae <getAllCouplers>
    5da6:	9e 01       	movw	r18, r28
    5da8:	22 0f       	add	r18, r18
    5daa:	33 1f       	adc	r19, r19
    5dac:	cc 0f       	add	r28, r28
    5dae:	dd 1f       	adc	r29, r29
    5db0:	cc 0f       	add	r28, r28
    5db2:	dd 1f       	adc	r29, r29
    5db4:	cc 0f       	add	r28, r28
    5db6:	dd 1f       	adc	r29, r29
    5db8:	c2 0f       	add	r28, r18
    5dba:	d3 1f       	adc	r29, r19
    5dbc:	ce 59       	subi	r28, 0x9E	; 158
    5dbe:	d6 4f       	sbci	r29, 0xF6	; 246
    5dc0:	99 87       	std	Y+9, r25	; 0x09
    5dc2:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5dc4:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5dc6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <eeprom_UpdateProg>
	}
	return result;
}
    5dca:	81 2f       	mov	r24, r17
    5dcc:	df 91       	pop	r29
    5dce:	cf 91       	pop	r28
    5dd0:	1f 91       	pop	r17
    5dd2:	0f 91       	pop	r16
    5dd4:	08 95       	ret

00005dd6 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5dd6:	ff 92       	push	r15
    5dd8:	0f 93       	push	r16
    5dda:	1f 93       	push	r17
    5ddc:	cf 93       	push	r28
    5dde:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	8c 01       	movw	r16, r24
    5de4:	00 0f       	add	r16, r16
    5de6:	11 1f       	adc	r17, r17
    5de8:	88 0f       	add	r24, r24
    5dea:	99 1f       	adc	r25, r25
    5dec:	88 0f       	add	r24, r24
    5dee:	99 1f       	adc	r25, r25
    5df0:	88 0f       	add	r24, r24
    5df2:	99 1f       	adc	r25, r25
    5df4:	08 0f       	add	r16, r24
    5df6:	19 1f       	adc	r17, r25
    5df8:	0e 59       	subi	r16, 0x9E	; 158
    5dfa:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5dfc:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5dfe:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5e00:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5e02:	15 c0       	rjmp	.+42     	; 0x5e2e <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5e04:	9c 2f       	mov	r25, r28
    5e06:	97 70       	andi	r25, 0x07	; 7
    5e08:	21 f4       	brne	.+8      	; 0x5e12 <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5e0a:	f8 01       	movw	r30, r16
    5e0c:	d0 81       	ld	r29, Z
    5e0e:	0f 5f       	subi	r16, 0xFF	; 255
    5e10:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5e12:	8c 2f       	mov	r24, r28
    5e14:	75 de       	rcall	.-790    	; 0x5b00 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5e16:	d0 ff       	sbrs	r29, 0
    5e18:	03 c0       	rjmp	.+6      	; 0x5e20 <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5e1a:	82 30       	cpi	r24, 0x02	; 2
    5e1c:	31 f0       	breq	.+12     	; 0x5e2a <midi_RegisterMatchProgram+0x54>
    5e1e:	0d c0       	rjmp	.+26     	; 0x5e3a <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5e20:	82 30       	cpi	r24, 0x02	; 2
    5e22:	69 f0       	breq	.+26     	; 0x5e3e <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5e24:	81 30       	cpi	r24, 0x01	; 1
    5e26:	09 f4       	brne	.+2      	; 0x5e2a <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5e28:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5e2a:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5e2c:	cf 5f       	subi	r28, 0xFF	; 255
    5e2e:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5e32:	c9 17       	cp	r28, r25
    5e34:	38 f3       	brcs	.-50     	; 0x5e04 <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5e36:	8f 2d       	mov	r24, r15
    5e38:	03 c0       	rjmp	.+6      	; 0x5e40 <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5e3a:	8f ef       	ldi	r24, 0xFF	; 255
    5e3c:	01 c0       	rjmp	.+2      	; 0x5e40 <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5e3e:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5e40:	df 91       	pop	r29
    5e42:	cf 91       	pop	r28
    5e44:	1f 91       	pop	r17
    5e46:	0f 91       	pop	r16
    5e48:	ff 90       	pop	r15
    5e4a:	08 95       	ret

00005e4c <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	fc 01       	movw	r30, r24
    5e50:	ee 0f       	add	r30, r30
    5e52:	ff 1f       	adc	r31, r31
    5e54:	88 0f       	add	r24, r24
    5e56:	99 1f       	adc	r25, r25
    5e58:	88 0f       	add	r24, r24
    5e5a:	99 1f       	adc	r25, r25
    5e5c:	88 0f       	add	r24, r24
    5e5e:	99 1f       	adc	r25, r25
    5e60:	e8 0f       	add	r30, r24
    5e62:	f9 1f       	adc	r31, r25
    5e64:	ee 59       	subi	r30, 0x9E	; 158
    5e66:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5e68:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5e6a:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    5e6c:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5e6e:	09 c0       	rjmp	.+18     	; 0x5e82 <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    5e70:	39 2f       	mov	r19, r25
    5e72:	37 70       	andi	r19, 0x07	; 7
    5e74:	11 f4       	brne	.+4      	; 0x5e7a <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    5e76:	20 81       	ld	r18, Z
    5e78:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    5e7a:	20 fd       	sbrc	r18, 0
			result++;
    5e7c:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    5e7e:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5e80:	9f 5f       	subi	r25, 0xFF	; 255
    5e82:	30 91 0e 08 	lds	r19, 0x080E	; 0x80080e <registerCount>
    5e86:	93 17       	cp	r25, r19
    5e88:	98 f3       	brcs	.-26     	; 0x5e70 <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    5e8a:	08 95       	ret

00005e8c <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5e8c:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    5e8e:	e6 e2       	ldi	r30, 0x26	; 38
    5e90:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5e92:	07 c0       	rjmp	.+14     	; 0x5ea2 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    5e94:	8f ef       	ldi	r24, 0xFF	; 255
    5e96:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    5e98:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    5e9a:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    5e9c:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    5e9e:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5ea0:	91 50       	subi	r25, 0x01	; 1
    5ea2:	91 11       	cpse	r25, r1
    5ea4:	f7 cf       	rjmp	.-18     	; 0x5e94 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    5ea6:	0e 94 10 0a 	call	0x1420	; 0x1420 <eeprom_ReadMidiInMap>
    5eaa:	8f 3f       	cpi	r24, 0xFF	; 255
    5eac:	01 f5       	brne	.+64     	; 0x5eee <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5eae:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    5eb2:	e6 e2       	ldi	r30, 0x26	; 38
    5eb4:	f8 e0       	ldi	r31, 0x08	; 8
    5eb6:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    5eb8:	84 e2       	ldi	r24, 0x24	; 36
    5eba:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    5ebc:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5ebe:	98 e3       	ldi	r25, 0x38	; 56
    5ec0:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    5ec2:	21 e0       	ldi	r18, 0x01	; 1
    5ec4:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    5ec6:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    5ec8:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5eca:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    5ecc:	22 e0       	ldi	r18, 0x02	; 2
    5ece:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    5ed0:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    5ed2:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5ed4:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    5ed6:	93 e0       	ldi	r25, 0x03	; 3
    5ed8:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    5eda:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    5edc:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    5ede:	8e e1       	ldi	r24, 0x1E	; 30
    5ee0:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5ee2:	40 e0       	ldi	r20, 0x00	; 0
    5ee4:	50 e0       	ldi	r21, 0x00	; 0
    5ee6:	61 e0       	ldi	r22, 0x01	; 1
    5ee8:	81 e0       	ldi	r24, 0x01	; 1
    5eea:	0e 94 cb 14 	call	0x2996	; 0x2996 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    5eee:	0e 94 94 0a 	call	0x1528	; 0x1528 <eeprom_ReadMidiThrough>
    5ef2:	8f 3f       	cpi	r24, 0xFF	; 255
    5ef4:	51 f4       	brne	.+20     	; 0x5f0a <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    5ef6:	e4 e2       	ldi	r30, 0x24	; 36
    5ef8:	f8 e0       	ldi	r31, 0x08	; 8
    5efa:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    5efc:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5efe:	40 e0       	ldi	r20, 0x00	; 0
    5f00:	50 e0       	ldi	r21, 0x00	; 0
    5f02:	61 e0       	ldi	r22, 0x01	; 1
    5f04:	81 e0       	ldi	r24, 0x01	; 1
    5f06:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <log_putError>
    5f0a:	08 95       	ret

00005f0c <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5f0c:	20 e0       	ldi	r18, 0x00	; 0
    5f0e:	09 c0       	rjmp	.+18     	; 0x5f22 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    5f10:	88 0f       	add	r24, r24
    5f12:	99 1f       	adc	r25, r25
    5f14:	fc 01       	movw	r30, r24
    5f16:	ea 5d       	subi	r30, 0xDA	; 218
    5f18:	f6 4f       	sbci	r31, 0xF6	; 246
    5f1a:	8f ef       	ldi	r24, 0xFF	; 255
    5f1c:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    5f1e:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5f20:	2f 5f       	subi	r18, 0xFF	; 255
    5f22:	82 2f       	mov	r24, r18
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	00 97       	sbiw	r24, 0x00	; 0
    5f28:	99 f7       	brne	.-26     	; 0x5f10 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    5f2a:	0e 94 38 0a 	call	0x1470	; 0x1470 <eeprom_ReadMidiOutMap>
    5f2e:	8f 3f       	cpi	r24, 0xFF	; 255
    5f30:	b1 f4       	brne	.+44     	; 0x5f5e <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5f32:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    5f36:	e6 e2       	ldi	r30, 0x26	; 38
    5f38:	f9 e0       	ldi	r31, 0x09	; 9
    5f3a:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    5f3c:	91 e0       	ldi	r25, 0x01	; 1
    5f3e:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    5f40:	92 e0       	ldi	r25, 0x02	; 2
    5f42:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    5f44:	93 e0       	ldi	r25, 0x03	; 3
    5f46:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    5f48:	ee e2       	ldi	r30, 0x2E	; 46
    5f4a:	f9 e0       	ldi	r31, 0x09	; 9
    5f4c:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    5f4e:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    5f50:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    5f52:	40 e0       	ldi	r20, 0x00	; 0
    5f54:	50 e0       	ldi	r21, 0x00	; 0
    5f56:	62 e0       	ldi	r22, 0x02	; 2
    5f58:	81 e0       	ldi	r24, 0x01	; 1
    5f5a:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <log_putError>
    5f5e:	08 95       	ret

00005f60 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    5f60:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    5f62:	8f ef       	ldi	r24, 0xFF	; 255
    5f64:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    5f66:	e4 30       	cpi	r30, 0x04	; 4
    5f68:	50 f4       	brcc	.+20     	; 0x5f7e <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    5f6a:	f0 e0       	ldi	r31, 0x00	; 0
    5f6c:	ee 0f       	add	r30, r30
    5f6e:	ff 1f       	adc	r31, r31
    5f70:	ea 5d       	subi	r30, 0xDA	; 218
    5f72:	f6 4f       	sbci	r31, 0xF6	; 246
    5f74:	20 81       	ld	r18, Z
    5f76:	2f 3f       	cpi	r18, 0xFF	; 255
    5f78:	11 f0       	breq	.+4      	; 0x5f7e <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    5f7a:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    5f7c:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    5f7e:	08 95       	ret

00005f80 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    5f80:	70 e0       	ldi	r23, 0x00	; 0
    5f82:	52 c0       	rjmp	.+164    	; 0x6028 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    5f84:	87 2f       	mov	r24, r23
    5f86:	90 e0       	ldi	r25, 0x00	; 0
    5f88:	24 2f       	mov	r18, r20
    5f8a:	30 e0       	ldi	r19, 0x00	; 0
    5f8c:	f9 01       	movw	r30, r18
    5f8e:	ee 0f       	add	r30, r30
    5f90:	ff 1f       	adc	r31, r31
    5f92:	df 01       	movw	r26, r30
    5f94:	a2 0f       	add	r26, r18
    5f96:	b3 1f       	adc	r27, r19
    5f98:	fc 01       	movw	r30, r24
    5f9a:	ee 0f       	add	r30, r30
    5f9c:	ff 1f       	adc	r31, r31
    5f9e:	e8 0f       	add	r30, r24
    5fa0:	f9 1f       	adc	r31, r25
    5fa2:	ee 0f       	add	r30, r30
    5fa4:	ff 1f       	adc	r31, r31
    5fa6:	ee 0f       	add	r30, r30
    5fa8:	ff 1f       	adc	r31, r31
    5faa:	ea 0f       	add	r30, r26
    5fac:	fb 1f       	adc	r31, r27
    5fae:	ee 5c       	subi	r30, 0xCE	; 206
    5fb0:	f6 4f       	sbci	r31, 0xF6	; 246
    5fb2:	a0 81       	ld	r26, Z
    5fb4:	af 3f       	cpi	r26, 0xFF	; 255
    5fb6:	d9 f0       	breq	.+54     	; 0x5fee <Midi_updateManualRange+0x6e>
    5fb8:	f9 01       	movw	r30, r18
    5fba:	ee 0f       	add	r30, r30
    5fbc:	ff 1f       	adc	r31, r31
    5fbe:	e2 0f       	add	r30, r18
    5fc0:	f3 1f       	adc	r31, r19
    5fc2:	9c 01       	movw	r18, r24
    5fc4:	22 0f       	add	r18, r18
    5fc6:	33 1f       	adc	r19, r19
    5fc8:	28 0f       	add	r18, r24
    5fca:	39 1f       	adc	r19, r25
    5fcc:	22 0f       	add	r18, r18
    5fce:	33 1f       	adc	r19, r19
    5fd0:	22 0f       	add	r18, r18
    5fd2:	33 1f       	adc	r19, r19
    5fd4:	e2 0f       	add	r30, r18
    5fd6:	f3 1f       	adc	r31, r19
    5fd8:	ee 5c       	subi	r30, 0xCE	; 206
    5fda:	f6 4f       	sbci	r31, 0xF6	; 246
    5fdc:	21 81       	ldd	r18, Z+1	; 0x01
    5fde:	2f 3f       	cpi	r18, 0xFF	; 255
    5fe0:	31 f0       	breq	.+12     	; 0x5fee <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    5fe2:	a6 17       	cp	r26, r22
    5fe4:	08 f4       	brcc	.+2      	; 0x5fe8 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    5fe6:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    5fe8:	52 17       	cp	r21, r18
    5fea:	08 f4       	brcc	.+2      	; 0x5fee <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    5fec:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    5fee:	55 23       	and	r21, r21
    5ff0:	11 f0       	breq	.+4      	; 0x5ff6 <Midi_updateManualRange+0x76>
    5ff2:	6f 3f       	cpi	r22, 0xFF	; 255
    5ff4:	49 f4       	brne	.+18     	; 0x6008 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    5ff6:	88 0f       	add	r24, r24
    5ff8:	99 1f       	adc	r25, r25
    5ffa:	fc 01       	movw	r30, r24
    5ffc:	e4 5e       	subi	r30, 0xE4	; 228
    5ffe:	f7 4f       	sbci	r31, 0xF7	; 247
    6000:	8f ef       	ldi	r24, 0xFF	; 255
    6002:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    6004:	81 83       	std	Z+1, r24	; 0x01
    6006:	07 c0       	rjmp	.+14     	; 0x6016 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    6008:	88 0f       	add	r24, r24
    600a:	99 1f       	adc	r25, r25
    600c:	fc 01       	movw	r30, r24
    600e:	e4 5e       	subi	r30, 0xE4	; 228
    6010:	f7 4f       	sbci	r31, 0xF7	; 247
    6012:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    6014:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    6016:	4f 5f       	subi	r20, 0xFF	; 255
    6018:	03 c0       	rjmp	.+6      	; 0x6020 <Midi_updateManualRange+0xa0>
    601a:	40 e0       	ldi	r20, 0x00	; 0
    601c:	6f ef       	ldi	r22, 0xFF	; 255
    601e:	50 e0       	ldi	r21, 0x00	; 0
    6020:	44 30       	cpi	r20, 0x04	; 4
    6022:	08 f4       	brcc	.+2      	; 0x6026 <Midi_updateManualRange+0xa6>
    6024:	af cf       	rjmp	.-162    	; 0x5f84 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6026:	7f 5f       	subi	r23, 0xFF	; 255
    6028:	74 30       	cpi	r23, 0x04	; 4
    602a:	b8 f3       	brcs	.-18     	; 0x601a <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    602c:	08 95       	ret

0000602e <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    602e:	63 e0       	ldi	r22, 0x03	; 3
    6030:	28 c0       	rjmp	.+80     	; 0x6082 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    6032:	86 2f       	mov	r24, r22
    6034:	06 2e       	mov	r0, r22
    6036:	00 0c       	add	r0, r0
    6038:	99 0b       	sbc	r25, r25
    603a:	42 2f       	mov	r20, r18
    603c:	02 2e       	mov	r0, r18
    603e:	00 0c       	add	r0, r0
    6040:	55 0b       	sbc	r21, r21
    6042:	fa 01       	movw	r30, r20
    6044:	ee 0f       	add	r30, r30
    6046:	ff 1f       	adc	r31, r31
    6048:	e4 0f       	add	r30, r20
    604a:	f5 1f       	adc	r31, r21
    604c:	ac 01       	movw	r20, r24
    604e:	44 0f       	add	r20, r20
    6050:	55 1f       	adc	r21, r21
    6052:	da 01       	movw	r26, r20
    6054:	a8 0f       	add	r26, r24
    6056:	b9 1f       	adc	r27, r25
    6058:	aa 0f       	add	r26, r26
    605a:	bb 1f       	adc	r27, r27
    605c:	aa 0f       	add	r26, r26
    605e:	bb 1f       	adc	r27, r27
    6060:	ae 0f       	add	r26, r30
    6062:	bf 1f       	adc	r27, r31
    6064:	ae 5c       	subi	r26, 0xCE	; 206
    6066:	b6 4f       	sbci	r27, 0xF6	; 246
    6068:	3f ef       	ldi	r19, 0xFF	; 255
    606a:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    606c:	11 96       	adiw	r26, 0x01	; 1
    606e:	3c 93       	st	X, r19
    6070:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    6072:	fd 01       	movw	r30, r26
    6074:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    6076:	21 50       	subi	r18, 0x01	; 1
    6078:	01 c0       	rjmp	.+2      	; 0x607c <init_Manual2Module+0x4e>
    607a:	23 e0       	ldi	r18, 0x03	; 3
    607c:	22 23       	and	r18, r18
    607e:	cc f6       	brge	.-78     	; 0x6032 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    6080:	61 50       	subi	r22, 0x01	; 1
    6082:	66 23       	and	r22, r22
    6084:	d4 f7       	brge	.-12     	; 0x607a <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    6086:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <eeprom_ReadManualMap>
    608a:	8f 3f       	cpi	r24, 0xFF	; 255
    608c:	79 f5       	brne	.+94     	; 0x60ec <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    608e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    6092:	40 e0       	ldi	r20, 0x00	; 0
    6094:	50 e0       	ldi	r21, 0x00	; 0
    6096:	63 e0       	ldi	r22, 0x03	; 3
    6098:	81 e0       	ldi	r24, 0x01	; 1
    609a:	0e 94 cb 14 	call	0x2996	; 0x2996 <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    609e:	e2 e3       	ldi	r30, 0x32	; 50
    60a0:	f9 e0       	ldi	r31, 0x09	; 9
    60a2:	84 e2       	ldi	r24, 0x24	; 36
    60a4:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    60a6:	33 e4       	ldi	r19, 0x43	; 67
    60a8:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    60aa:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    60ac:	24 e4       	ldi	r18, 0x44	; 68
    60ae:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    60b0:	9b e5       	ldi	r25, 0x5B	; 91
    60b2:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    60b4:	40 e2       	ldi	r20, 0x20	; 32
    60b6:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    60b8:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    60ba:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    60bc:	40 e4       	ldi	r20, 0x40	; 64
    60be:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    60c0:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    60c2:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    60c4:	40 e6       	ldi	r20, 0x60	; 96
    60c6:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    60c8:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    60ca:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    60cc:	30 e8       	ldi	r19, 0x80	; 128
    60ce:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    60d0:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    60d2:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    60d4:	90 ea       	ldi	r25, 0xA0	; 160
    60d6:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    60d8:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    60da:	81 e4       	ldi	r24, 0x41	; 65
    60dc:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    60de:	80 ec       	ldi	r24, 0xC0	; 192
    60e0:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    60e2:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    60e4:	8d e1       	ldi	r24, 0x1D	; 29
    60e6:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    60e8:	80 ee       	ldi	r24, 0xE0	; 224
    60ea:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    60ec:	49 cf       	rjmp	.-366    	; 0x5f80 <Midi_updateManualRange>
    60ee:	08 95       	ret

000060f0 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    60f0:	84 30       	cpi	r24, 0x04	; 4
    60f2:	d8 f4       	brcc	.+54     	; 0x612a <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    60f4:	90 e0       	ldi	r25, 0x00	; 0
    60f6:	fc 01       	movw	r30, r24
    60f8:	ee 0f       	add	r30, r30
    60fa:	ff 1f       	adc	r31, r31
    60fc:	e8 0f       	add	r30, r24
    60fe:	f9 1f       	adc	r31, r25
    6100:	ee 0f       	add	r30, r30
    6102:	ff 1f       	adc	r31, r31
    6104:	ee 0f       	add	r30, r30
    6106:	ff 1f       	adc	r31, r31
    6108:	ee 5c       	subi	r30, 0xCE	; 206
    610a:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    610c:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    610e:	20 81       	ld	r18, Z
    6110:	62 17       	cp	r22, r18
    6112:	40 f0       	brcs	.+16     	; 0x6124 <manualNote_to_moduleBit+0x34>
    6114:	91 81       	ldd	r25, Z+1	; 0x01
    6116:	96 17       	cp	r25, r22
    6118:	28 f0       	brcs	.+10     	; 0x6124 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    611a:	92 81       	ldd	r25, Z+2	; 0x02
    611c:	62 1b       	sub	r22, r18
				return (result);
    611e:	80 e0       	ldi	r24, 0x00	; 0
    6120:	96 0f       	add	r25, r22
    6122:	08 95       	ret
			}
			pRange++;
    6124:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    6126:	81 50       	subi	r24, 0x01	; 1
    6128:	91 f7       	brne	.-28     	; 0x610e <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    612a:	8f ef       	ldi	r24, 0xFF	; 255
    612c:	90 e0       	ldi	r25, 0x00	; 0
}
    612e:	08 95       	ret

00006130 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    6130:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    6132:	e2 e3       	ldi	r30, 0x32	; 50
    6134:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6136:	44 e0       	ldi	r20, 0x04	; 4
    6138:	16 c0       	rjmp	.+44     	; 0x6166 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    613a:	52 81       	ldd	r21, Z+2	; 0x02
    613c:	85 17       	cp	r24, r21
    613e:	88 f0       	brcs	.+34     	; 0x6162 <moduleBit_to_manualNote+0x32>
    6140:	68 2f       	mov	r22, r24
    6142:	70 e0       	ldi	r23, 0x00	; 0
    6144:	21 81       	ldd	r18, Z+1	; 0x01
    6146:	a0 81       	ld	r26, Z
    6148:	30 e0       	ldi	r19, 0x00	; 0
    614a:	2a 1b       	sub	r18, r26
    614c:	31 09       	sbc	r19, r1
    614e:	25 0f       	add	r18, r21
    6150:	31 1d       	adc	r19, r1
    6152:	26 17       	cp	r18, r22
    6154:	37 07       	cpc	r19, r23
    6156:	2c f0       	brlt	.+10     	; 0x6162 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    6158:	98 2f       	mov	r25, r24
    615a:	95 1b       	sub	r25, r21
				return(result);
    615c:	8b 2f       	mov	r24, r27
    615e:	9a 0f       	add	r25, r26
    6160:	08 95       	ret
			}
			pRange++;
    6162:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6164:	41 50       	subi	r20, 0x01	; 1
    6166:	41 11       	cpse	r20, r1
    6168:	e8 cf       	rjmp	.-48     	; 0x613a <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    616a:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    616c:	b5 30       	cpi	r27, 0x05	; 5
    616e:	18 f3       	brcs	.-58     	; 0x6136 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    6170:	8f ef       	ldi	r24, 0xFF	; 255
    6172:	90 e0       	ldi	r25, 0x00	; 0
}
    6174:	08 95       	ret

00006176 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    6176:	ef 92       	push	r14
    6178:	ff 92       	push	r15
    617a:	0f 93       	push	r16
    617c:	1f 93       	push	r17
    617e:	cf 93       	push	r28
    6180:	df 93       	push	r29
    6182:	c8 2f       	mov	r28, r24
    6184:	06 2f       	mov	r16, r22
    6186:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    6188:	b3 df       	rcall	.-154    	; 0x60f0 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    618a:	49 2f       	mov	r20, r25
    618c:	42 95       	swap	r20
    618e:	46 95       	lsr	r20
    6190:	47 70       	andi	r20, 0x07	; 7
    6192:	21 e0       	ldi	r18, 0x01	; 1
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	79 01       	movw	r14, r18
    6198:	02 c0       	rjmp	.+4      	; 0x619e <manual_NoteOnOff+0x28>
    619a:	ee 0c       	add	r14, r14
    619c:	ff 1c       	adc	r15, r15
    619e:	4a 95       	dec	r20
    61a0:	e2 f7       	brpl	.-8      	; 0x619a <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    61a2:	19 2f       	mov	r17, r25
    61a4:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    61a6:	81 11       	cpse	r24, r1
    61a8:	1a c0       	rjmp	.+52     	; 0x61de <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    61aa:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    61ae:	8e 21       	and	r24, r14
    61b0:	59 f4       	brne	.+22     	; 0x61c8 <manual_NoteOnOff+0x52>
    61b2:	dd 23       	and	r29, r29
    61b4:	4c f0       	brlt	.+18     	; 0x61c8 <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag 
    61b6:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    61b8:	d1 30       	cpi	r29, 0x01	; 1
    61ba:	11 f4       	brne	.+4      	; 0x61c0 <manual_NoteOnOff+0x4a>
    61bc:	90 e2       	ldi	r25, 0x20	; 32
    61be:	01 c0       	rjmp	.+2      	; 0x61c2 <manual_NoteOnOff+0x4c>
    61c0:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    61c2:	8e 2d       	mov	r24, r14
    61c4:	91 2b       	or	r25, r17
    61c6:	05 db       	rcall	.-2550   	; 0x57d2 <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag 
    61c8:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    61ca:	29 f4       	brne	.+10     	; 0x61d6 <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    61cc:	6e 2d       	mov	r22, r14
    61ce:	81 2f       	mov	r24, r17
    61d0:	0e 94 8a 11 	call	0x2314	; 0x2314 <pipe_off>
    61d4:	04 c0       	rjmp	.+8      	; 0x61de <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    61d6:	6e 2d       	mov	r22, r14
    61d8:	81 2f       	mov	r24, r17
    61da:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    61de:	ec 2f       	mov	r30, r28
    61e0:	f0 e0       	ldi	r31, 0x00	; 0
    61e2:	ee 0f       	add	r30, r30
    61e4:	ff 1f       	adc	r31, r31
    61e6:	ea 5d       	subi	r30, 0xDA	; 218
    61e8:	f6 4f       	sbci	r31, 0xF6	; 246
    61ea:	81 81       	ldd	r24, Z+1	; 0x01
    61ec:	8f 3f       	cpi	r24, 0xFF	; 255
    61ee:	a9 f0       	breq	.+42     	; 0x621a <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    61f0:	d1 30       	cpi	r29, 0x01	; 1
    61f2:	31 f0       	breq	.+12     	; 0x6200 <manual_NoteOnOff+0x8a>
    61f4:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    61f8:	99 23       	and	r25, r25
    61fa:	21 f0       	breq	.+8      	; 0x6204 <manual_NoteOnOff+0x8e>
    61fc:	90 e9       	ldi	r25, 0x90	; 144
    61fe:	03 c0       	rjmp	.+6      	; 0x6206 <manual_NoteOnOff+0x90>
    6200:	90 e9       	ldi	r25, 0x90	; 144
    6202:	01 c0       	rjmp	.+2      	; 0x6206 <manual_NoteOnOff+0x90>
    6204:	90 e8       	ldi	r25, 0x80	; 128
    6206:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    6208:	23 d4       	rcall	.+2118   	; 0x6a50 <serial1MIDISend>
    620a:	80 2f       	mov	r24, r16
    620c:	21 d4       	rcall	.+2114   	; 0x6a50 <serial1MIDISend>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    620e:	d1 11       	cpse	r29, r1
    6210:	02 c0       	rjmp	.+4      	; 0x6216 <manual_NoteOnOff+0xa0>
    6212:	80 e0       	ldi	r24, 0x00	; 0
    6214:	01 c0       	rjmp	.+2      	; 0x6218 <manual_NoteOnOff+0xa2>
    6216:	80 e4       	ldi	r24, 0x40	; 64
    6218:	1b d4       	rcall	.+2102   	; 0x6a50 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    621a:	df 91       	pop	r29
    621c:	cf 91       	pop	r28
    621e:	1f 91       	pop	r17
    6220:	0f 91       	pop	r16
    6222:	ff 90       	pop	r15
    6224:	ef 90       	pop	r14
    6226:	08 95       	ret

00006228 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    6228:	bf 92       	push	r11
    622a:	cf 92       	push	r12
    622c:	df 92       	push	r13
    622e:	ef 92       	push	r14
    6230:	ff 92       	push	r15
    6232:	0f 93       	push	r16
    6234:	1f 93       	push	r17
    6236:	cf 93       	push	r28
    6238:	df 93       	push	r29
    623a:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    623c:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    623e:	4c c0       	rjmp	.+152    	; 0x62d8 <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6240:	0c 2d       	mov	r16, r12
    6242:	10 e0       	ldi	r17, 0x00	; 0
    6244:	cd 2d       	mov	r28, r13
    6246:	d0 e0       	ldi	r29, 0x00	; 0
    6248:	f8 01       	movw	r30, r16
    624a:	ee 0f       	add	r30, r30
    624c:	ff 1f       	adc	r31, r31
    624e:	ee 0f       	add	r30, r30
    6250:	ff 1f       	adc	r31, r31
    6252:	ec 0f       	add	r30, r28
    6254:	fd 1f       	adc	r31, r29
    6256:	ee 0f       	add	r30, r30
    6258:	ff 1f       	adc	r31, r31
    625a:	ee 0f       	add	r30, r30
    625c:	ff 1f       	adc	r31, r31
    625e:	ea 5d       	subi	r30, 0xDA	; 218
    6260:	f7 4f       	sbci	r31, 0xF7	; 247
    6262:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    6264:	83 e0       	ldi	r24, 0x03	; 3
    6266:	8b 15       	cp	r24, r11
    6268:	b0 f1       	brcs	.+108    	; 0x62d6 <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    626a:	f8 01       	movw	r30, r16
    626c:	ee 0f       	add	r30, r30
    626e:	ff 1f       	adc	r31, r31
    6270:	ee 0f       	add	r30, r30
    6272:	ff 1f       	adc	r31, r31
    6274:	ec 0f       	add	r30, r28
    6276:	fd 1f       	adc	r31, r29
    6278:	ee 0f       	add	r30, r30
    627a:	ff 1f       	adc	r31, r31
    627c:	ee 0f       	add	r30, r30
    627e:	ff 1f       	adc	r31, r31
    6280:	ea 5d       	subi	r30, 0xDA	; 218
    6282:	f7 4f       	sbci	r31, 0xF7	; 247
    6284:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6286:	f2 80       	ldd	r15, Z+2	; 0x02
    6288:	15 c0       	rjmp	.+42     	; 0x62b4 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    628a:	ee 24       	eor	r14, r14
    628c:	e3 94       	inc	r14
    628e:	e6 0e       	add	r14, r22
    6290:	f8 01       	movw	r30, r16
    6292:	ee 0f       	add	r30, r30
    6294:	ff 1f       	adc	r31, r31
    6296:	ee 0f       	add	r30, r30
    6298:	ff 1f       	adc	r31, r31
    629a:	ec 0f       	add	r30, r28
    629c:	fd 1f       	adc	r31, r29
    629e:	ee 0f       	add	r30, r30
    62a0:	ff 1f       	adc	r31, r31
    62a2:	ee 0f       	add	r30, r30
    62a4:	ff 1f       	adc	r31, r31
    62a6:	ea 5d       	subi	r30, 0xDA	; 218
    62a8:	f7 4f       	sbci	r31, 0xF7	; 247
    62aa:	40 e8       	ldi	r20, 0x80	; 128
    62ac:	80 81       	ld	r24, Z
    62ae:	63 df       	rcall	.-314    	; 0x6176 <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    62b0:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    62b2:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    62b4:	f1 10       	cpse	r15, r1
    62b6:	e9 cf       	rjmp	.-46     	; 0x628a <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    62b8:	eb 2d       	mov	r30, r11
    62ba:	f0 e0       	ldi	r31, 0x00	; 0
    62bc:	ee 0f       	add	r30, r30
    62be:	ff 1f       	adc	r31, r31
    62c0:	ea 5d       	subi	r30, 0xDA	; 218
    62c2:	f6 4f       	sbci	r31, 0xF6	; 246
    62c4:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    62c6:	80 31       	cpi	r24, 0x10	; 16
    62c8:	30 f4       	brcc	.+12     	; 0x62d6 <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    62ca:	80 6b       	ori	r24, 0xB0	; 176
    62cc:	c1 d3       	rcall	.+1922   	; 0x6a50 <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    62ce:	8b e7       	ldi	r24, 0x7B	; 123
    62d0:	bf d3       	rcall	.+1918   	; 0x6a50 <serial1MIDISend>
				serial1MIDISend(0);
    62d2:	80 e0       	ldi	r24, 0x00	; 0
    62d4:	bd d3       	rcall	.+1914   	; 0x6a50 <serial1MIDISend>
    62d6:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    62d8:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    62da:	8d 15       	cp	r24, r13
    62dc:	08 f0       	brcs	.+2      	; 0x62e0 <midiAllNotesOff+0xb8>
    62de:	b0 cf       	rjmp	.-160    	; 0x6240 <midiAllNotesOff+0x18>
    62e0:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    62e2:	cf 91       	pop	r28
    62e4:	1f 91       	pop	r17
    62e6:	0f 91       	pop	r16
    62e8:	ff 90       	pop	r15
    62ea:	ef 90       	pop	r14
    62ec:	df 90       	pop	r13
    62ee:	cf 90       	pop	r12
    62f0:	bf 90       	pop	r11
    62f2:	08 95       	ret

000062f4 <midi_ManualOff>:
    62f4:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    62f6:	1f 93       	push	r17
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    62fe:	84 30       	cpi	r24, 0x04	; 4
    6300:	00 f5       	brcc	.+64     	; 0x6342 <midi_ManualOff+0x4e>
    6302:	08 2f       	mov	r16, r24
    6304:	10 e0       	ldi	r17, 0x00	; 0
    6306:	f8 01       	movw	r30, r16
    6308:	ee 0f       	add	r30, r30
    630a:	ff 1f       	adc	r31, r31
    630c:	e4 5e       	subi	r30, 0xE4	; 228
    630e:	f7 4f       	sbci	r31, 0xF7	; 247
    6310:	d0 81       	ld	r29, Z
    6312:	df 3f       	cpi	r29, 0xFF	; 255
    6314:	b1 f0       	breq	.+44     	; 0x6342 <midi_ManualOff+0x4e>
    6316:	f8 01       	movw	r30, r16
    6318:	ee 0f       	add	r30, r30
    631a:	ff 1f       	adc	r31, r31
    631c:	e4 5e       	subi	r30, 0xE4	; 228
    631e:	f7 4f       	sbci	r31, 0xF7	; 247
    6320:	81 81       	ldd	r24, Z+1	; 0x01
    6322:	8f 3f       	cpi	r24, 0xFF	; 255
    6324:	31 f4       	brne	.+12     	; 0x6332 <midi_ManualOff+0x3e>
    6326:	0d c0       	rjmp	.+26     	; 0x6342 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    6328:	40 e8       	ldi	r20, 0x80	; 128
    632a:	6d 2f       	mov	r22, r29
    632c:	8c 2f       	mov	r24, r28
    632e:	23 df       	rcall	.-442    	; 0x6176 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    6330:	df 5f       	subi	r29, 0xFF	; 255
    6332:	f8 01       	movw	r30, r16
    6334:	ee 0f       	add	r30, r30
    6336:	ff 1f       	adc	r31, r31
    6338:	e4 5e       	subi	r30, 0xE4	; 228
    633a:	f7 4f       	sbci	r31, 0xF7	; 247
    633c:	81 81       	ldd	r24, Z+1	; 0x01
    633e:	8d 17       	cp	r24, r29
    6340:	98 f7       	brcc	.-26     	; 0x6328 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6342:	ec 2f       	mov	r30, r28
    6344:	f0 e0       	ldi	r31, 0x00	; 0
    6346:	ee 0f       	add	r30, r30
    6348:	ff 1f       	adc	r31, r31
    634a:	ea 5d       	subi	r30, 0xDA	; 218
    634c:	f6 4f       	sbci	r31, 0xF6	; 246
    634e:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6350:	80 31       	cpi	r24, 0x10	; 16
    6352:	30 f4       	brcc	.+12     	; 0x6360 <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6354:	80 6b       	ori	r24, 0xB0	; 176
    6356:	7c d3       	rcall	.+1784   	; 0x6a50 <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6358:	8b e7       	ldi	r24, 0x7B	; 123
    635a:	7a d3       	rcall	.+1780   	; 0x6a50 <serial1MIDISend>
		serial1MIDISend(0);
    635c:	80 e0       	ldi	r24, 0x00	; 0
    635e:	78 d3       	rcall	.+1776   	; 0x6a50 <serial1MIDISend>
    6360:	df 91       	pop	r29

	}
}
    6362:	cf 91       	pop	r28
    6364:	1f 91       	pop	r17
    6366:	0f 91       	pop	r16
    6368:	08 95       	ret

0000636a <midi_AllManualsOff>:
    636a:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    636c:	c0 e0       	ldi	r28, 0x00	; 0
    636e:	03 c0       	rjmp	.+6      	; 0x6376 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6370:	8c 2f       	mov	r24, r28
    6372:	c0 df       	rcall	.-128    	; 0x62f4 <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6374:	cf 5f       	subi	r28, 0xFF	; 255
    6376:	c4 30       	cpi	r28, 0x04	; 4
    6378:	d8 f3       	brcs	.-10     	; 0x6370 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    637a:	cf 91       	pop	r28
    637c:	08 95       	ret

0000637e <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    637e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    6382:	88 23       	and	r24, r24
    6384:	39 f0       	breq	.+14     	; 0x6394 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6386:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    638a:	81 11       	cpse	r24, r1
    638c:	03 c0       	rjmp	.+6      	; 0x6394 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    638e:	ed df       	rcall	.-38     	; 0x636a <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6390:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    6394:	08 95       	ret

00006396 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6396:	0f 93       	push	r16
    6398:	1f 93       	push	r17
    639a:	cf 93       	push	r28
    639c:	df 93       	push	r29
    639e:	06 2f       	mov	r16, r22
    63a0:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    63a2:	d8 2f       	mov	r29, r24
    63a4:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    63a6:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    63a8:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    63aa:	3c c0       	rjmp	.+120    	; 0x6424 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    63ac:	4d 2f       	mov	r20, r29
    63ae:	50 e0       	ldi	r21, 0x00	; 0
    63b0:	2c 2f       	mov	r18, r28
    63b2:	30 e0       	ldi	r19, 0x00	; 0
    63b4:	fa 01       	movw	r30, r20
    63b6:	ee 0f       	add	r30, r30
    63b8:	ff 1f       	adc	r31, r31
    63ba:	ee 0f       	add	r30, r30
    63bc:	ff 1f       	adc	r31, r31
    63be:	e2 0f       	add	r30, r18
    63c0:	f3 1f       	adc	r31, r19
    63c2:	ee 0f       	add	r30, r30
    63c4:	ff 1f       	adc	r31, r31
    63c6:	ee 0f       	add	r30, r30
    63c8:	ff 1f       	adc	r31, r31
    63ca:	ea 5d       	subi	r30, 0xDA	; 218
    63cc:	f7 4f       	sbci	r31, 0xF7	; 247
    63ce:	80 81       	ld	r24, Z
    63d0:	84 30       	cpi	r24, 0x04	; 4
    63d2:	38 f5       	brcc	.+78     	; 0x6422 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    63d4:	df 01       	movw	r26, r30
    63d6:	61 81       	ldd	r22, Z+1	; 0x01
    63d8:	70 2f       	mov	r23, r16
    63da:	76 1b       	sub	r23, r22
    63dc:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    63de:	0a f1       	brmi	.+66     	; 0x6422 <midiNote_to_Manual+0x8c>
    63e0:	fd 01       	movw	r30, r26
    63e2:	e2 81       	ldd	r30, Z+2	; 0x02
    63e4:	f0 e0       	ldi	r31, 0x00	; 0
    63e6:	a7 2f       	mov	r26, r23
    63e8:	77 0f       	add	r23, r23
    63ea:	bb 0b       	sbc	r27, r27
    63ec:	ae 17       	cp	r26, r30
    63ee:	bf 07       	cpc	r27, r31
    63f0:	c4 f4       	brge	.+48     	; 0x6422 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    63f2:	fa 01       	movw	r30, r20
    63f4:	ee 0f       	add	r30, r30
    63f6:	ff 1f       	adc	r31, r31
    63f8:	ee 0f       	add	r30, r30
    63fa:	ff 1f       	adc	r31, r31
    63fc:	e2 0f       	add	r30, r18
    63fe:	f3 1f       	adc	r31, r19
    6400:	ee 0f       	add	r30, r30
    6402:	ff 1f       	adc	r31, r31
    6404:	ee 0f       	add	r30, r30
    6406:	ff 1f       	adc	r31, r31
    6408:	ea 5d       	subi	r30, 0xDA	; 218
    640a:	f7 4f       	sbci	r31, 0xF7	; 247
    640c:	93 81       	ldd	r25, Z+3	; 0x03
    640e:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    6410:	11 30       	cpi	r17, 0x01	; 1
    6412:	21 f4       	brne	.+8      	; 0x641c <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    6414:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    6418:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    641c:	41 2f       	mov	r20, r17
    641e:	ab de       	rcall	.-682    	; 0x6176 <manual_NoteOnOff>
				found |= 0xFF;
    6420:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6422:	cf 5f       	subi	r28, 0xFF	; 255
    6424:	c4 30       	cpi	r28, 0x04	; 4
    6426:	08 f4       	brcc	.+2      	; 0x642a <midiNote_to_Manual+0x94>
    6428:	c1 cf       	rjmp	.-126    	; 0x63ac <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    642a:	11 30       	cpi	r17, 0x01	; 1
    642c:	49 f4       	brne	.+18     	; 0x6440 <midiNote_to_Manual+0xaa>
    642e:	91 11       	cpse	r25, r1
    6430:	07 c0       	rjmp	.+14     	; 0x6440 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    6432:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    6436:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    643a:	8f ef       	ldi	r24, 0xFF	; 255
    643c:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6440:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    6444:	d8 13       	cpse	r29, r24
    6446:	1f c0       	rjmp	.+62     	; 0x6486 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    6448:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    644c:	8f 3f       	cpi	r24, 0xFF	; 255
    644e:	d9 f0       	breq	.+54     	; 0x6486 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    6450:	11 30       	cpi	r17, 0x01	; 1
    6452:	31 f0       	breq	.+12     	; 0x6460 <midiNote_to_Manual+0xca>
    6454:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    6458:	99 23       	and	r25, r25
    645a:	21 f0       	breq	.+8      	; 0x6464 <midiNote_to_Manual+0xce>
    645c:	90 e9       	ldi	r25, 0x90	; 144
    645e:	03 c0       	rjmp	.+6      	; 0x6466 <midiNote_to_Manual+0xd0>
    6460:	90 e9       	ldi	r25, 0x90	; 144
    6462:	01 c0       	rjmp	.+2      	; 0x6466 <midiNote_to_Manual+0xd0>
    6464:	90 e8       	ldi	r25, 0x80	; 128
    6466:	89 2b       	or	r24, r25
    6468:	f3 d2       	rcall	.+1510   	; 0x6a50 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    646a:	80 2f       	mov	r24, r16
    646c:	f1 d2       	rcall	.+1506   	; 0x6a50 <serial1MIDISend>
    646e:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6470:	06 c0       	rjmp	.+12     	; 0x647e <midiNote_to_Manual+0xe8>
    6472:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    6476:	81 11       	cpse	r24, r1
    6478:	04 c0       	rjmp	.+8      	; 0x6482 <midiNote_to_Manual+0xec>
    647a:	80 e4       	ldi	r24, 0x40	; 64
    647c:	03 c0       	rjmp	.+6      	; 0x6484 <midiNote_to_Manual+0xee>
    647e:	80 e4       	ldi	r24, 0x40	; 64
    6480:	01 c0       	rjmp	.+2      	; 0x6484 <midiNote_to_Manual+0xee>
    6482:	80 e0       	ldi	r24, 0x00	; 0
    6484:	e5 d2       	rcall	.+1482   	; 0x6a50 <serial1MIDISend>
    6486:	df 91       	pop	r29
		}
	}
}
    6488:	cf 91       	pop	r28
    648a:	1f 91       	pop	r17
    648c:	0f 91       	pop	r16
    648e:	08 95       	ret

00006490 <midiIn_Process>:
    6490:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6492:	0c f0       	brlt	.+2      	; 0x6496 <midiIn_Process+0x6>
    6494:	4f c0       	rjmp	.+158    	; 0x6534 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6496:	88 3f       	cpi	r24, 0xF8	; 248
    6498:	b8 f0       	brcs	.+46     	; 0x64c8 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    649a:	8e 3f       	cpi	r24, 0xFE	; 254
    649c:	81 f4       	brne	.+32     	; 0x64be <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    649e:	81 e0       	ldi	r24, 0x01	; 1
    64a0:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    64a4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    64a6:	f8 94       	cli
    64a8:	06 c0       	rjmp	.+12     	; 0x64b6 <midiIn_Process+0x26>
    64aa:	ef e2       	ldi	r30, 0x2F	; 47
    64ac:	f2 e0       	ldi	r31, 0x02	; 2
    64ae:	89 e1       	ldi	r24, 0x19	; 25
    64b0:	86 83       	std	Z+6, r24	; 0x06
    64b2:	17 82       	std	Z+7, r1	; 0x07
    64b4:	80 e0       	ldi	r24, 0x00	; 0
    64b6:	81 11       	cpse	r24, r1
    64b8:	f8 cf       	rjmp	.-16     	; 0x64aa <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    64ba:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    64bc:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    64be:	8f 3f       	cpi	r24, 0xFF	; 255
    64c0:	09 f0       	breq	.+2      	; 0x64c4 <midiIn_Process+0x34>
    64c2:	79 c0       	rjmp	.+242    	; 0x65b6 <midiIn_Process+0x126>
				midiAllReset();
    64c4:	25 ca       	rjmp	.-2998   	; 0x5910 <midiAllReset>
    64c6:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    64c8:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    64cc:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    64d0:	90 e8       	ldi	r25, 0x80	; 128
    64d2:	98 0f       	add	r25, r24
    64d4:	90 34       	cpi	r25, 0x40	; 64
    64d6:	20 f4       	brcc	.+8      	; 0x64e0 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    64d8:	82 e0       	ldi	r24, 0x02	; 2
    64da:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    64de:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    64e0:	90 e2       	ldi	r25, 0x20	; 32
    64e2:	98 0f       	add	r25, r24
    64e4:	90 31       	cpi	r25, 0x10	; 16
    64e6:	20 f4       	brcc	.+8      	; 0x64f0 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    64e8:	82 e0       	ldi	r24, 0x02	; 2
    64ea:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    64ee:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    64f0:	82 3f       	cpi	r24, 0xF2	; 242
    64f2:	21 f4       	brne	.+8      	; 0x64fc <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    64f4:	82 e0       	ldi	r24, 0x02	; 2
    64f6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    64fa:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    64fc:	80 3f       	cpi	r24, 0xF0	; 240
    64fe:	21 f4       	brne	.+8      	; 0x6508 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    6500:	8f ef       	ldi	r24, 0xFF	; 255
    6502:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6506:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    6508:	90 e4       	ldi	r25, 0x40	; 64
    650a:	98 0f       	add	r25, r24
    650c:	90 32       	cpi	r25, 0x20	; 32
    650e:	20 f4       	brcc	.+8      	; 0x6518 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    6510:	81 e0       	ldi	r24, 0x01	; 1
    6512:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6516:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    6518:	81 3f       	cpi	r24, 0xF1	; 241
    651a:	11 f0       	breq	.+4      	; 0x6520 <midiIn_Process+0x90>
    651c:	83 3f       	cpi	r24, 0xF3	; 243
    651e:	21 f4       	brne	.+8      	; 0x6528 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    6520:	81 e0       	ldi	r24, 0x01	; 1
    6522:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    6526:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    6528:	87 3f       	cpi	r24, 0xF7	; 247
    652a:	09 f4       	brne	.+2      	; 0x652e <midiIn_Process+0x9e>
    652c:	44 c0       	rjmp	.+136    	; 0x65b6 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    652e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    6532:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    6534:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <midiDataByteCount>
    6538:	e8 30       	cpi	r30, 0x08	; 8
    653a:	40 f4       	brcc	.+16     	; 0x654c <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    653c:	91 e0       	ldi	r25, 0x01	; 1
    653e:	9e 0f       	add	r25, r30
    6540:	90 93 1b 08 	sts	0x081B, r25	; 0x80081b <midiDataByteCount>
    6544:	f0 e0       	ldi	r31, 0x00	; 0
    6546:	ee 51       	subi	r30, 0x1E	; 30
    6548:	f4 4f       	sbci	r31, 0xF4	; 244
    654a:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    654c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    6550:	8f 3f       	cpi	r24, 0xFF	; 255
    6552:	89 f1       	breq	.+98     	; 0x65b6 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6554:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <midiDataByteCount>
    6558:	98 17       	cp	r25, r24
    655a:	68 f1       	brcs	.+90     	; 0x65b6 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    655c:	90 91 ea 0b 	lds	r25, 0x0BEA	; 0x800bea <midiLastCommand>
    6560:	90 3f       	cpi	r25, 0xF0	; 240
    6562:	38 f5       	brcc	.+78     	; 0x65b2 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6564:	89 2f       	mov	r24, r25
    6566:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    6568:	90 7f       	andi	r25, 0xF0	; 240
    656a:	90 39       	cpi	r25, 0x90	; 144
    656c:	71 f0       	breq	.+28     	; 0x658a <midiIn_Process+0xfa>
    656e:	18 f4       	brcc	.+6      	; 0x6576 <midiIn_Process+0xe6>
    6570:	90 38       	cpi	r25, 0x80	; 128
    6572:	31 f0       	breq	.+12     	; 0x6580 <midiIn_Process+0xf0>
    6574:	1e c0       	rjmp	.+60     	; 0x65b2 <midiIn_Process+0x122>
    6576:	90 3b       	cpi	r25, 0xB0	; 176
    6578:	99 f0       	breq	.+38     	; 0x65a0 <midiIn_Process+0x110>
    657a:	90 3c       	cpi	r25, 0xC0	; 192
    657c:	b9 f0       	breq	.+46     	; 0x65ac <midiIn_Process+0x11c>
    657e:	19 c0       	rjmp	.+50     	; 0x65b2 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6580:	40 e0       	ldi	r20, 0x00	; 0
    6582:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    6586:	07 df       	rcall	.-498    	; 0x6396 <midiNote_to_Manual>
						break;
    6588:	14 c0       	rjmp	.+40     	; 0x65b2 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    658a:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <midiDataByte+0x1>
    658e:	91 11       	cpse	r25, r1
    6590:	02 c0       	rjmp	.+4      	; 0x6596 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6592:	40 e0       	ldi	r20, 0x00	; 0
    6594:	01 c0       	rjmp	.+2      	; 0x6598 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6596:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6598:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    659c:	fc de       	rcall	.-520    	; 0x6396 <midiNote_to_Manual>
						break;
    659e:	09 c0       	rjmp	.+18     	; 0x65b2 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    65a0:	90 91 e2 0b 	lds	r25, 0x0BE2	; 0x800be2 <midiDataByte>
    65a4:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    65a6:	29 f4       	brne	.+10     	; 0x65b2 <midiIn_Process+0x122>
    65a8:	3f de       	rcall	.-898    	; 0x6228 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    65aa:	03 c0       	rjmp	.+6      	; 0x65b2 <midiIn_Process+0x122>
    65ac:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    65b0:	99 db       	rcall	.-2254   	; 0x5ce4 <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    65b2:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
    65b6:	08 95       	ret

000065b8 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    65b8:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serESPMidiTmp+0x2>
    65bc:	89 2f       	mov	r24, r25
    65be:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    65c0:	90 7f       	andi	r25, 0xF0	; 240
    65c2:	90 38       	cpi	r25, 0x80	; 128
    65c4:	49 f0       	breq	.+18     	; 0x65d8 <proc_ESPmidi+0x20>
    65c6:	18 f4       	brcc	.+6      	; 0x65ce <proc_ESPmidi+0x16>
    65c8:	99 23       	and	r25, r25
    65ca:	e1 f0       	breq	.+56     	; 0x6604 <proc_ESPmidi+0x4c>
    65cc:	08 95       	ret
    65ce:	90 39       	cpi	r25, 0x90	; 144
    65d0:	41 f0       	breq	.+16     	; 0x65e2 <proc_ESPmidi+0x2a>
    65d2:	90 3b       	cpi	r25, 0xB0	; 176
    65d4:	89 f0       	breq	.+34     	; 0x65f8 <proc_ESPmidi+0x40>
    65d6:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    65d8:	40 e0       	ldi	r20, 0x00	; 0
    65da:	60 91 48 16 	lds	r22, 0x1648	; 0x801648 <serESPMidiTmp+0x1>
    65de:	db ce       	rjmp	.-586    	; 0x6396 <midiNote_to_Manual>
		break;
    65e0:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    65e2:	90 91 47 16 	lds	r25, 0x1647	; 0x801647 <serESPMidiTmp>
    65e6:	91 11       	cpse	r25, r1
    65e8:	02 c0       	rjmp	.+4      	; 0x65ee <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    65ea:	40 e0       	ldi	r20, 0x00	; 0
    65ec:	01 c0       	rjmp	.+2      	; 0x65f0 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    65ee:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    65f0:	60 91 48 16 	lds	r22, 0x1648	; 0x801648 <serESPMidiTmp+0x1>
    65f4:	d0 ce       	rjmp	.-608    	; 0x6396 <midiNote_to_Manual>
		break;
    65f6:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    65f8:	90 91 48 16 	lds	r25, 0x1648	; 0x801648 <serESPMidiTmp+0x1>
    65fc:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    65fe:	61 f4       	brne	.+24     	; 0x6618 <proc_ESPmidi+0x60>
    6600:	13 ce       	rjmp	.-986    	; 0x6228 <midiAllNotesOff>
    6602:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    6604:	90 91 48 16 	lds	r25, 0x1648	; 0x801648 <serESPMidiTmp+0x1>
    6608:	89 2f       	mov	r24, r25
    660a:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    660c:	90 7f       	andi	r25, 0xF0	; 240
    660e:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    6610:	19 f4       	brne	.+6      	; 0x6618 <proc_ESPmidi+0x60>
    6612:	60 91 47 16 	lds	r22, 0x1647	; 0x801647 <serESPMidiTmp>
    6616:	66 cb       	rjmp	.-2356   	; 0x5ce4 <midi_ProgramChange>
    6618:	08 95       	ret

0000661a <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    661a:	bf 92       	push	r11
    661c:	cf 92       	push	r12
    661e:	df 92       	push	r13
    6620:	ef 92       	push	r14
    6622:	ff 92       	push	r15
    6624:	0f 93       	push	r16
    6626:	1f 93       	push	r17
    6628:	cf 93       	push	r28
    662a:	df 93       	push	r29
    662c:	d8 2f       	mov	r29, r24
    662e:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    6630:	5b d2       	rcall	.+1206   	; 0x6ae8 <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    6632:	0c 2f       	mov	r16, r28
    6634:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    6636:	cf 71       	andi	r28, 0x1F	; 31
    6638:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    663a:	00 32       	cpi	r16, 0x20	; 32
    663c:	09 f4       	brne	.+2      	; 0x6640 <midiKeyPress_Process+0x26>
    663e:	b5 c0       	rjmp	.+362    	; 0x67aa <midiKeyPress_Process+0x190>
    6640:	00 23       	and	r16, r16
    6642:	09 f4       	brne	.+2      	; 0x6646 <midiKeyPress_Process+0x2c>
    6644:	b4 c0       	rjmp	.+360    	; 0x67ae <midiKeyPress_Process+0x194>
    6646:	b7 c0       	rjmp	.+366    	; 0x67b6 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    6648:	d0 ff       	sbrs	r29, 0
    664a:	ac c0       	rjmp	.+344    	; 0x67a4 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    664c:	20 e2       	ldi	r18, 0x20	; 32
    664e:	c2 9f       	mul	r28, r18
    6650:	c0 01       	movw	r24, r0
    6652:	11 24       	eor	r1, r1
    6654:	fb 2c       	mov	r15, r11
    6656:	f8 2a       	or	r15, r24
    6658:	8f 2d       	mov	r24, r15
    665a:	6a dd       	rcall	.-1324   	; 0x6130 <moduleBit_to_manualNote>
    665c:	c8 2e       	mov	r12, r24
    665e:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6660:	18 2f       	mov	r17, r24
    6662:	8f 3f       	cpi	r24, 0xFF	; 255
    6664:	09 f4       	brne	.+2      	; 0x6668 <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6666:	94 c0       	rjmp	.+296    	; 0x6790 <midiKeyPress_Process+0x176>
    6668:	69 2f       	mov	r22, r25
    666a:	7a dc       	rcall	.-1804   	; 0x5f60 <Manual_to_MidiNote>
    666c:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    666e:	8f 3f       	cpi	r24, 0xFF	; 255
    6670:	09 f1       	breq	.+66     	; 0x66b4 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    6672:	00 32       	cpi	r16, 0x20	; 32
    6674:	31 f0       	breq	.+12     	; 0x6682 <midiKeyPress_Process+0x68>
    6676:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    667a:	99 23       	and	r25, r25
    667c:	21 f0       	breq	.+8      	; 0x6686 <midiKeyPress_Process+0x6c>
    667e:	90 e9       	ldi	r25, 0x90	; 144
    6680:	03 c0       	rjmp	.+6      	; 0x6688 <midiKeyPress_Process+0x6e>
    6682:	90 e9       	ldi	r25, 0x90	; 144
    6684:	01 c0       	rjmp	.+2      	; 0x6688 <midiKeyPress_Process+0x6e>
    6686:	90 e8       	ldi	r25, 0x80	; 128
    6688:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    668a:	e2 d1       	rcall	.+964    	; 0x6a50 <serial1MIDISend>
    668c:	8d 2d       	mov	r24, r13
    668e:	e0 d1       	rcall	.+960    	; 0x6a50 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6690:	01 11       	cpse	r16, r1
    6692:	06 c0       	rjmp	.+12     	; 0x66a0 <midiKeyPress_Process+0x86>
    6694:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    6698:	81 11       	cpse	r24, r1
    669a:	04 c0       	rjmp	.+8      	; 0x66a4 <midiKeyPress_Process+0x8a>
    669c:	80 e4       	ldi	r24, 0x40	; 64
    669e:	03 c0       	rjmp	.+6      	; 0x66a6 <midiKeyPress_Process+0x8c>
    66a0:	80 e4       	ldi	r24, 0x40	; 64
    66a2:	01 c0       	rjmp	.+2      	; 0x66a6 <midiKeyPress_Process+0x8c>
    66a4:	80 e0       	ldi	r24, 0x00	; 0
    66a6:	d4 d1       	rcall	.+936    	; 0x6a50 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    66a8:	00 32       	cpi	r16, 0x20	; 32
    66aa:	21 f4       	brne	.+8      	; 0x66b4 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    66ac:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    66b0:	e0 92 05 02 	sts	0x0205, r14	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    66b4:	41 e0       	ldi	r20, 0x01	; 1
    66b6:	00 32       	cpi	r16, 0x20	; 32
    66b8:	09 f0       	breq	.+2      	; 0x66bc <midiKeyPress_Process+0xa2>
    66ba:	40 e0       	ldi	r20, 0x00	; 0
    66bc:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    66be:	11 11       	cpse	r17, r1
    66c0:	19 c0       	rjmp	.+50     	; 0x66f4 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    66c2:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <midi_Couplers>
    66c6:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    66c8:	19 f4       	brne	.+6      	; 0x66d0 <midiKeyPress_Process+0xb6>
    66ca:	6e 2d       	mov	r22, r14
    66cc:	81 e0       	ldi	r24, 0x01	; 1
    66ce:	53 dd       	rcall	.-1370   	; 0x6176 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    66d0:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <midi_Couplers+0x1>
    66d4:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    66d6:	21 f4       	brne	.+8      	; 0x66e0 <midiKeyPress_Process+0xc6>
    66d8:	4d 2d       	mov	r20, r13
    66da:	6e 2d       	mov	r22, r14
    66dc:	82 e0       	ldi	r24, 0x02	; 2
    66de:	4b dd       	rcall	.-1386   	; 0x6176 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    66e0:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x3>
    66e4:	8f 3f       	cpi	r24, 0xFF	; 255
    66e6:	09 f0       	breq	.+2      	; 0x66ea <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    66e8:	53 c0       	rjmp	.+166    	; 0x6790 <midiKeyPress_Process+0x176>
    66ea:	4d 2d       	mov	r20, r13
    66ec:	6e 2d       	mov	r22, r14
    66ee:	83 e0       	ldi	r24, 0x03	; 3
    66f0:	42 dd       	rcall	.-1404   	; 0x6176 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    66f2:	4e c0       	rjmp	.+156    	; 0x6790 <midiKeyPress_Process+0x176>
    66f4:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    66f6:	c9 f4       	brne	.+50     	; 0x672a <midiKeyPress_Process+0x110>
    66f8:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers+0x2>
    66fc:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    66fe:	19 f4       	brne	.+6      	; 0x6706 <midiKeyPress_Process+0xec>
    6700:	6e 2d       	mov	r22, r14
    6702:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    6704:	38 dd       	rcall	.-1424   	; 0x6176 <manual_NoteOnOff>
    6706:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x4>
    670a:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    670c:	21 f4       	brne	.+8      	; 0x6716 <midiKeyPress_Process+0xfc>
    670e:	4d 2d       	mov	r20, r13
    6710:	6e 2d       	mov	r22, r14
    6712:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    6714:	30 dd       	rcall	.-1440   	; 0x6176 <manual_NoteOnOff>
    6716:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x6>
    671a:	8f 3f       	cpi	r24, 0xFF	; 255
    671c:	09 f0       	breq	.+2      	; 0x6720 <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    671e:	38 c0       	rjmp	.+112    	; 0x6790 <midiKeyPress_Process+0x176>
    6720:	4d 2d       	mov	r20, r13
    6722:	6e 2d       	mov	r22, r14
    6724:	80 e0       	ldi	r24, 0x00	; 0
    6726:	27 dd       	rcall	.-1458   	; 0x6176 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    6728:	33 c0       	rjmp	.+102    	; 0x6790 <midiKeyPress_Process+0x176>
    672a:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    672c:	c1 f4       	brne	.+48     	; 0x675e <midiKeyPress_Process+0x144>
    672e:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6732:	8f 3f       	cpi	r24, 0xFF	; 255
    6734:	19 f4       	brne	.+6      	; 0x673c <midiKeyPress_Process+0x122>
    6736:	6e 2d       	mov	r22, r14
    6738:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    673a:	1d dd       	rcall	.-1478   	; 0x6176 <manual_NoteOnOff>
    673c:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6740:	8f 3f       	cpi	r24, 0xFF	; 255
    6742:	21 f4       	brne	.+8      	; 0x674c <midiKeyPress_Process+0x132>
    6744:	4d 2d       	mov	r20, r13
    6746:	6e 2d       	mov	r22, r14
    6748:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    674a:	15 dd       	rcall	.-1494   	; 0x6176 <manual_NoteOnOff>
    674c:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6750:	8f 3f       	cpi	r24, 0xFF	; 255
    6752:	f1 f4       	brne	.+60     	; 0x6790 <midiKeyPress_Process+0x176>
    6754:	4d 2d       	mov	r20, r13
    6756:	6e 2d       	mov	r22, r14
    6758:	81 e0       	ldi	r24, 0x01	; 1
    675a:	0d dd       	rcall	.-1510   	; 0x6176 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    675c:	19 c0       	rjmp	.+50     	; 0x6790 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    675e:	13 30       	cpi	r17, 0x03	; 3
    6760:	b9 f4       	brne	.+46     	; 0x6790 <midiKeyPress_Process+0x176>
    6762:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6766:	8f 3f       	cpi	r24, 0xFF	; 255
    6768:	19 f4       	brne	.+6      	; 0x6770 <midiKeyPress_Process+0x156>
    676a:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    676c:	80 e0       	ldi	r24, 0x00	; 0
    676e:	03 dd       	rcall	.-1530   	; 0x6176 <manual_NoteOnOff>
    6770:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6774:	8f 3f       	cpi	r24, 0xFF	; 255
    6776:	21 f4       	brne	.+8      	; 0x6780 <midiKeyPress_Process+0x166>
    6778:	4d 2d       	mov	r20, r13
    677a:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    677c:	81 e0       	ldi	r24, 0x01	; 1
    677e:	fb dc       	rcall	.-1546   	; 0x6176 <manual_NoteOnOff>
    6780:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6784:	8f 3f       	cpi	r24, 0xFF	; 255
    6786:	21 f4       	brne	.+8      	; 0x6790 <midiKeyPress_Process+0x176>
    6788:	4d 2d       	mov	r20, r13
    678a:	6e 2d       	mov	r22, r14
    678c:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    678e:	f3 dc       	rcall	.-1562   	; 0x6176 <manual_NoteOnOff>
    6790:	8f 2d       	mov	r24, r15
    6792:	55 d9       	rcall	.-3414   	; 0x5a3e <moduleBit_to_registerNr>
    6794:	00 32       	cpi	r16, 0x20	; 32
    6796:	11 f4       	brne	.+4      	; 0x679c <midiKeyPress_Process+0x182>
    6798:	20 e8       	ldi	r18, 0x80	; 128
    679a:	01 c0       	rjmp	.+2      	; 0x679e <midiKeyPress_Process+0x184>
    679c:	20 e0       	ldi	r18, 0x00	; 0
    679e:	82 2b       	or	r24, r18
    67a0:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    67a4:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    67a6:	cf 5f       	subi	r28, 0xFF	; 255
    67a8:	03 c0       	rjmp	.+6      	; 0x67b0 <midiKeyPress_Process+0x196>
    67aa:	c0 e0       	ldi	r28, 0x00	; 0
    67ac:	01 c0       	rjmp	.+2      	; 0x67b0 <midiKeyPress_Process+0x196>
    67ae:	c0 e0       	ldi	r28, 0x00	; 0
    67b0:	c8 30       	cpi	r28, 0x08	; 8
    67b2:	08 f4       	brcc	.+2      	; 0x67b6 <midiKeyPress_Process+0x19c>
    67b4:	49 cf       	rjmp	.-366    	; 0x6648 <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    67b6:	df 91       	pop	r29
    67b8:	cf 91       	pop	r28
    67ba:	1f 91       	pop	r17
    67bc:	0f 91       	pop	r16
    67be:	ff 90       	pop	r15
    67c0:	ef 90       	pop	r14
    67c2:	df 90       	pop	r13
    67c4:	cf 90       	pop	r12
    67c6:	bf 90       	pop	r11
    67c8:	08 95       	ret

000067ca <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    67ca:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    67cc:	c0 e0       	ldi	r28, 0x00	; 0
    67ce:	10 c0       	rjmp	.+32     	; 0x67f0 <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    67d0:	ec 2f       	mov	r30, r28
    67d2:	f0 e0       	ldi	r31, 0x00	; 0
    67d4:	ee 0f       	add	r30, r30
    67d6:	ff 1f       	adc	r31, r31
    67d8:	ea 5d       	subi	r30, 0xDA	; 218
    67da:	f6 4f       	sbci	r31, 0xF6	; 246
    67dc:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    67de:	80 31       	cpi	r24, 0x10	; 16
    67e0:	30 f4       	brcc	.+12     	; 0x67ee <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    67e2:	80 6b       	ori	r24, 0xB0	; 176
    67e4:	35 d1       	rcall	.+618    	; 0x6a50 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    67e6:	8b e7       	ldi	r24, 0x7B	; 123
    67e8:	33 d1       	rcall	.+614    	; 0x6a50 <serial1MIDISend>
			serial1MIDISend(0);
    67ea:	80 e0       	ldi	r24, 0x00	; 0
    67ec:	31 d1       	rcall	.+610    	; 0x6a50 <serial1MIDISend>
    67ee:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    67f0:	c4 30       	cpi	r28, 0x04	; 4
    67f2:	70 f3       	brcs	.-36     	; 0x67d0 <midiSendAllNotesOff+0x6>
    67f4:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    67f6:	08 95       	ret

000067f8 <midi_SendActiveSense>:
    67f8:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    67fa:	2a c1       	rjmp	.+596    	; 0x6a50 <serial1MIDISend>
    67fc:	08 95       	ret

000067fe <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    67fe:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6802:	88 23       	and	r24, r24
    6804:	21 f0       	breq	.+8      	; 0x680e <midi_CheckTxActiveSense+0x10>
    6806:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    680a:	8f 3f       	cpi	r24, 0xFF	; 255
    680c:	99 f4       	brne	.+38     	; 0x6834 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    680e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6810:	f8 94       	cli
    6812:	81 e0       	ldi	r24, 0x01	; 1
    6814:	06 c0       	rjmp	.+12     	; 0x6822 <midi_CheckTxActiveSense+0x24>
    6816:	ef e2       	ldi	r30, 0x2F	; 47
    6818:	f2 e0       	ldi	r31, 0x02	; 2
    681a:	8a e0       	ldi	r24, 0x0A	; 10
    681c:	80 8b       	std	Z+16, r24	; 0x10
    681e:	11 8a       	std	Z+17, r1	; 0x11
    6820:	80 e0       	ldi	r24, 0x00	; 0
    6822:	81 11       	cpse	r24, r1
    6824:	f8 cf       	rjmp	.-16     	; 0x6816 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6826:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    6828:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <midi_Setting>
    682c:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    682e:	e4 df       	rcall	.-56     	; 0x67f8 <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    6830:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiTxLastCmd>
    6834:	08 95       	ret

00006836 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6836:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    683a:	8f e1       	ldi	r24, 0x1F	; 31
    683c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6840:	e9 ec       	ldi	r30, 0xC9	; 201
    6842:	f0 e0       	ldi	r31, 0x00	; 0
    6844:	80 81       	ld	r24, Z
    6846:	88 69       	ori	r24, 0x98	; 152
    6848:	80 83       	st	Z, r24
    684a:	ea ec       	ldi	r30, 0xCA	; 202
    684c:	f0 e0       	ldi	r31, 0x00	; 0
    684e:	80 81       	ld	r24, Z
    6850:	86 60       	ori	r24, 0x06	; 6
    6852:	80 83       	st	Z, r24
    6854:	10 92 41 16 	sts	0x1641, r1	; 0x801641 <midiRxInIndex>
    6858:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOutIndex>
    685c:	10 92 ed 13 	sts	0x13ED, r1	; 0x8013ed <midiTxInIndex>
    6860:	10 92 fa 13 	sts	0x13FA, r1	; 0x8013fa <midiTxOutIndex>
    6864:	10 92 f9 13 	sts	0x13F9, r1	; 0x8013f9 <midiRxOvfl>
    6868:	10 92 fe 13 	sts	0x13FE, r1	; 0x8013fe <midiTxOvfl>
    686c:	10 92 4b 16 	sts	0x164B, r1	; 0x80164b <midiRxOvflCount>
    6870:	10 92 52 16 	sts	0x1652, r1	; 0x801652 <midiTxOvflCount>
    6874:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiTxLastCmd>
    6878:	08 95       	ret

0000687a <__vector_36>:
    687a:	1f 92       	push	r1
    687c:	0f 92       	push	r0
    687e:	0f b6       	in	r0, 0x3f	; 63
    6880:	0f 92       	push	r0
    6882:	11 24       	eor	r1, r1
    6884:	0b b6       	in	r0, 0x3b	; 59
    6886:	0f 92       	push	r0
    6888:	8f 93       	push	r24
    688a:	9f 93       	push	r25
    688c:	ef 93       	push	r30
    688e:	ff 93       	push	r31
    6890:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6894:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <midiRxInIndex>
    6898:	f0 e0       	ldi	r31, 0x00	; 0
    689a:	e1 5c       	subi	r30, 0xC1	; 193
    689c:	fb 4e       	sbci	r31, 0xEB	; 235
    689e:	80 83       	st	Z, r24
    68a0:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <midiRxInIndex>
    68a4:	8f 5f       	subi	r24, 0xFF	; 255
    68a6:	90 91 4f 16 	lds	r25, 0x164F	; 0x80164f <midiRxOutIndex>
    68aa:	89 13       	cpse	r24, r25
    68ac:	0e c0       	rjmp	.+28     	; 0x68ca <__vector_36+0x50>
    68ae:	80 91 4b 16 	lds	r24, 0x164B	; 0x80164b <midiRxOvflCount>
    68b2:	88 23       	and	r24, r24
    68b4:	31 f0       	breq	.+12     	; 0x68c2 <__vector_36+0x48>
    68b6:	8f 3f       	cpi	r24, 0xFF	; 255
    68b8:	51 f0       	breq	.+20     	; 0x68ce <__vector_36+0x54>
    68ba:	8f 5f       	subi	r24, 0xFF	; 255
    68bc:	80 93 4b 16 	sts	0x164B, r24	; 0x80164b <midiRxOvflCount>
    68c0:	06 c0       	rjmp	.+12     	; 0x68ce <__vector_36+0x54>
    68c2:	81 e0       	ldi	r24, 0x01	; 1
    68c4:	80 93 4b 16 	sts	0x164B, r24	; 0x80164b <midiRxOvflCount>
    68c8:	02 c0       	rjmp	.+4      	; 0x68ce <__vector_36+0x54>
    68ca:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <midiRxInIndex>
    68ce:	80 91 d5 18 	lds	r24, 0x18D5	; 0x8018d5 <midiRxBytesCount>
    68d2:	90 91 d6 18 	lds	r25, 0x18D6	; 0x8018d6 <midiRxBytesCount+0x1>
    68d6:	01 96       	adiw	r24, 0x01	; 1
    68d8:	90 93 d6 18 	sts	0x18D6, r25	; 0x8018d6 <midiRxBytesCount+0x1>
    68dc:	80 93 d5 18 	sts	0x18D5, r24	; 0x8018d5 <midiRxBytesCount>
    68e0:	ff 91       	pop	r31
    68e2:	ef 91       	pop	r30
    68e4:	9f 91       	pop	r25
    68e6:	8f 91       	pop	r24
    68e8:	0f 90       	pop	r0
    68ea:	0b be       	out	0x3b, r0	; 59
    68ec:	0f 90       	pop	r0
    68ee:	0f be       	out	0x3f, r0	; 63
    68f0:	0f 90       	pop	r0
    68f2:	1f 90       	pop	r1
    68f4:	18 95       	reti

000068f6 <__vector_37>:
    68f6:	1f 92       	push	r1
    68f8:	0f 92       	push	r0
    68fa:	0f b6       	in	r0, 0x3f	; 63
    68fc:	0f 92       	push	r0
    68fe:	11 24       	eor	r1, r1
    6900:	0b b6       	in	r0, 0x3b	; 59
    6902:	0f 92       	push	r0
    6904:	8f 93       	push	r24
    6906:	9f 93       	push	r25
    6908:	ef 93       	push	r30
    690a:	ff 93       	push	r31
    690c:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <midiTxOutIndex>
    6910:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <midiTxInIndex>
    6914:	98 17       	cp	r25, r24
    6916:	b9 f0       	breq	.+46     	; 0x6946 <__vector_37+0x50>
    6918:	e0 91 fa 13 	lds	r30, 0x13FA	; 0x8013fa <midiTxOutIndex>
    691c:	f0 e0       	ldi	r31, 0x00	; 0
    691e:	e1 5c       	subi	r30, 0xC1	; 193
    6920:	fa 4e       	sbci	r31, 0xEA	; 234
    6922:	80 81       	ld	r24, Z
    6924:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6928:	80 91 fa 13 	lds	r24, 0x13FA	; 0x8013fa <midiTxOutIndex>
    692c:	8f 5f       	subi	r24, 0xFF	; 255
    692e:	80 93 fa 13 	sts	0x13FA, r24	; 0x8013fa <midiTxOutIndex>
    6932:	80 91 4c 16 	lds	r24, 0x164C	; 0x80164c <midiTxBytesCount>
    6936:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <midiTxBytesCount+0x1>
    693a:	01 96       	adiw	r24, 0x01	; 1
    693c:	90 93 4d 16 	sts	0x164D, r25	; 0x80164d <midiTxBytesCount+0x1>
    6940:	80 93 4c 16 	sts	0x164C, r24	; 0x80164c <midiTxBytesCount>
    6944:	05 c0       	rjmp	.+10     	; 0x6950 <__vector_37+0x5a>
    6946:	e9 ec       	ldi	r30, 0xC9	; 201
    6948:	f0 e0       	ldi	r31, 0x00	; 0
    694a:	80 81       	ld	r24, Z
    694c:	8f 7d       	andi	r24, 0xDF	; 223
    694e:	80 83       	st	Z, r24
    6950:	ff 91       	pop	r31
    6952:	ef 91       	pop	r30
    6954:	9f 91       	pop	r25
    6956:	8f 91       	pop	r24
    6958:	0f 90       	pop	r0
    695a:	0b be       	out	0x3b, r0	; 59
    695c:	0f 90       	pop	r0
    695e:	0f be       	out	0x3f, r0	; 63
    6960:	0f 90       	pop	r0
    6962:	1f 90       	pop	r1
    6964:	18 95       	reti

00006966 <serial0SER_USBSend>:
    6966:	e0 91 d3 18 	lds	r30, 0x18D3	; 0x8018d3 <serUSBTxInIndex>
    696a:	f0 91 d4 18 	lds	r31, 0x18D4	; 0x8018d4 <serUSBTxInIndex+0x1>
    696e:	a1 ec       	ldi	r26, 0xC1	; 193
    6970:	b0 e0       	ldi	r27, 0x00	; 0
    6972:	9c 91       	ld	r25, X
    6974:	9f 7d       	andi	r25, 0xDF	; 223
    6976:	9c 93       	st	X, r25
    6978:	af 01       	movw	r20, r30
    697a:	4f 5f       	subi	r20, 0xFF	; 255
    697c:	5f 4f       	sbci	r21, 0xFF	; 255
    697e:	80 83       	st	Z, r24
    6980:	83 e1       	ldi	r24, 0x13	; 19
    6982:	4a 3e       	cpi	r20, 0xEA	; 234
    6984:	58 07       	cpc	r21, r24
    6986:	19 f0       	breq	.+6      	; 0x698e <serial0SER_USBSend+0x28>
    6988:	10 f0       	brcs	.+4      	; 0x698e <serial0SER_USBSend+0x28>
    698a:	4b ee       	ldi	r20, 0xEB	; 235
    698c:	5b e0       	ldi	r21, 0x0B	; 11
    698e:	9f b7       	in	r25, 0x3f	; 63
    6990:	f8 94       	cli
    6992:	81 e0       	ldi	r24, 0x01	; 1
    6994:	05 c0       	rjmp	.+10     	; 0x69a0 <serial0SER_USBSend+0x3a>
    6996:	20 91 eb 13 	lds	r18, 0x13EB	; 0x8013eb <serUSBTxOutIndex>
    699a:	30 91 ec 13 	lds	r19, 0x13EC	; 0x8013ec <serUSBTxOutIndex+0x1>
    699e:	80 e0       	ldi	r24, 0x00	; 0
    69a0:	81 11       	cpse	r24, r1
    69a2:	f9 cf       	rjmp	.-14     	; 0x6996 <serial0SER_USBSend+0x30>
    69a4:	9f bf       	out	0x3f, r25	; 63
    69a6:	42 17       	cp	r20, r18
    69a8:	53 07       	cpc	r21, r19
    69aa:	49 f4       	brne	.+18     	; 0x69be <serial0SER_USBSend+0x58>
    69ac:	8f ef       	ldi	r24, 0xFF	; 255
    69ae:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <serUSBOvflFlag>
    69b2:	e1 ec       	ldi	r30, 0xC1	; 193
    69b4:	f0 e0       	ldi	r31, 0x00	; 0
    69b6:	80 81       	ld	r24, Z
    69b8:	80 62       	ori	r24, 0x20	; 32
    69ba:	80 83       	st	Z, r24
    69bc:	08 95       	ret
    69be:	50 93 d4 18 	sts	0x18D4, r21	; 0x8018d4 <serUSBTxInIndex+0x1>
    69c2:	40 93 d3 18 	sts	0x18D3, r20	; 0x8018d3 <serUSBTxInIndex>
    69c6:	e1 ec       	ldi	r30, 0xC1	; 193
    69c8:	f0 e0       	ldi	r31, 0x00	; 0
    69ca:	80 81       	ld	r24, Z
    69cc:	80 62       	ori	r24, 0x20	; 32
    69ce:	80 83       	st	Z, r24
    69d0:	08 95       	ret

000069d2 <serial0USB_logMIDIin>:
    69d2:	cf 93       	push	r28
    69d4:	90 91 4e 16 	lds	r25, 0x164E	; 0x80164e <serUSB_Active>
    69d8:	99 23       	and	r25, r25
    69da:	61 f0       	breq	.+24     	; 0x69f4 <serial0USB_logMIDIin+0x22>
    69dc:	c8 2f       	mov	r28, r24
    69de:	89 e6       	ldi	r24, 0x69	; 105
    69e0:	c2 df       	rcall	.-124    	; 0x6966 <serial0SER_USBSend>
    69e2:	8c 2f       	mov	r24, r28
    69e4:	82 95       	swap	r24
    69e6:	8f 70       	andi	r24, 0x0F	; 15
    69e8:	9e d2       	rcall	.+1340   	; 0x6f26 <nibbleToChr>
    69ea:	bd df       	rcall	.-134    	; 0x6966 <serial0SER_USBSend>
    69ec:	8c 2f       	mov	r24, r28
    69ee:	8f 70       	andi	r24, 0x0F	; 15
    69f0:	9a d2       	rcall	.+1332   	; 0x6f26 <nibbleToChr>
    69f2:	b9 df       	rcall	.-142    	; 0x6966 <serial0SER_USBSend>
    69f4:	cf 91       	pop	r28
    69f6:	08 95       	ret

000069f8 <serial1MIDIReadRx>:
    69f8:	cf 93       	push	r28
    69fa:	90 91 41 16 	lds	r25, 0x1641	; 0x801641 <midiRxInIndex>
    69fe:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOutIndex>
    6a02:	98 17       	cp	r25, r24
    6a04:	71 f0       	breq	.+28     	; 0x6a22 <serial1MIDIReadRx+0x2a>
    6a06:	e0 91 4f 16 	lds	r30, 0x164F	; 0x80164f <midiRxOutIndex>
    6a0a:	f0 e0       	ldi	r31, 0x00	; 0
    6a0c:	e1 5c       	subi	r30, 0xC1	; 193
    6a0e:	fb 4e       	sbci	r31, 0xEB	; 235
    6a10:	c0 81       	ld	r28, Z
    6a12:	8c 2f       	mov	r24, r28
    6a14:	de df       	rcall	.-68     	; 0x69d2 <serial0USB_logMIDIin>
    6a16:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOutIndex>
    6a1a:	8f 5f       	subi	r24, 0xFF	; 255
    6a1c:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOutIndex>
    6a20:	01 c0       	rjmp	.+2      	; 0x6a24 <serial1MIDIReadRx+0x2c>
    6a22:	cd ef       	ldi	r28, 0xFD	; 253
    6a24:	8c 2f       	mov	r24, r28
    6a26:	cf 91       	pop	r28
    6a28:	08 95       	ret

00006a2a <serial0USB_logMIDIout>:
    6a2a:	cf 93       	push	r28
    6a2c:	90 91 4e 16 	lds	r25, 0x164E	; 0x80164e <serUSB_Active>
    6a30:	99 23       	and	r25, r25
    6a32:	61 f0       	breq	.+24     	; 0x6a4c <serial0USB_logMIDIout+0x22>
    6a34:	c8 2f       	mov	r28, r24
    6a36:	8f e6       	ldi	r24, 0x6F	; 111
    6a38:	96 df       	rcall	.-212    	; 0x6966 <serial0SER_USBSend>
    6a3a:	8c 2f       	mov	r24, r28
    6a3c:	82 95       	swap	r24
    6a3e:	8f 70       	andi	r24, 0x0F	; 15
    6a40:	72 d2       	rcall	.+1252   	; 0x6f26 <nibbleToChr>
    6a42:	91 df       	rcall	.-222    	; 0x6966 <serial0SER_USBSend>
    6a44:	8c 2f       	mov	r24, r28
    6a46:	8f 70       	andi	r24, 0x0F	; 15
    6a48:	6e d2       	rcall	.+1244   	; 0x6f26 <nibbleToChr>
    6a4a:	8d df       	rcall	.-230    	; 0x6966 <serial0SER_USBSend>
    6a4c:	cf 91       	pop	r28
    6a4e:	08 95       	ret

00006a50 <serial1MIDISend>:
    6a50:	cf 93       	push	r28
    6a52:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    6a56:	99 23       	and	r25, r25
    6a58:	71 f0       	breq	.+28     	; 0x6a76 <serial1MIDISend+0x26>
    6a5a:	88 23       	and	r24, r24
    6a5c:	64 f4       	brge	.+24     	; 0x6a76 <serial1MIDISend+0x26>
    6a5e:	90 91 fb 13 	lds	r25, 0x13FB	; 0x8013fb <midiTxLastCmd>
    6a62:	89 17       	cp	r24, r25
    6a64:	09 f4       	brne	.+2      	; 0x6a68 <serial1MIDISend+0x18>
    6a66:	3e c0       	rjmp	.+124    	; 0x6ae4 <serial1MIDISend+0x94>
    6a68:	80 3a       	cpi	r24, 0xA0	; 160
    6a6a:	18 f4       	brcc	.+6      	; 0x6a72 <serial1MIDISend+0x22>
    6a6c:	80 93 fb 13 	sts	0x13FB, r24	; 0x8013fb <midiTxLastCmd>
    6a70:	02 c0       	rjmp	.+4      	; 0x6a76 <serial1MIDISend+0x26>
    6a72:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiTxLastCmd>
    6a76:	2f b7       	in	r18, 0x3f	; 63
    6a78:	f8 94       	cli
    6a7a:	91 e0       	ldi	r25, 0x01	; 1
    6a7c:	06 c0       	rjmp	.+12     	; 0x6a8a <serial1MIDISend+0x3a>
    6a7e:	ef e2       	ldi	r30, 0x2F	; 47
    6a80:	f2 e0       	ldi	r31, 0x02	; 2
    6a82:	9a e0       	ldi	r25, 0x0A	; 10
    6a84:	90 8b       	std	Z+16, r25	; 0x10
    6a86:	11 8a       	std	Z+17, r1	; 0x11
    6a88:	90 e0       	ldi	r25, 0x00	; 0
    6a8a:	91 11       	cpse	r25, r1
    6a8c:	f8 cf       	rjmp	.-16     	; 0x6a7e <serial1MIDISend+0x2e>
    6a8e:	c8 2f       	mov	r28, r24
    6a90:	2f bf       	out	0x3f, r18	; 63
    6a92:	e9 ec       	ldi	r30, 0xC9	; 201
    6a94:	f0 e0       	ldi	r31, 0x00	; 0
    6a96:	80 81       	ld	r24, Z
    6a98:	8f 7d       	andi	r24, 0xDF	; 223
    6a9a:	80 83       	st	Z, r24
    6a9c:	8c 2f       	mov	r24, r28
    6a9e:	c5 df       	rcall	.-118    	; 0x6a2a <serial0USB_logMIDIout>
    6aa0:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <midiTxInIndex>
    6aa4:	f0 e0       	ldi	r31, 0x00	; 0
    6aa6:	e1 5c       	subi	r30, 0xC1	; 193
    6aa8:	fa 4e       	sbci	r31, 0xEA	; 234
    6aaa:	c0 83       	st	Z, r28
    6aac:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <midiTxInIndex>
    6ab0:	8f 5f       	subi	r24, 0xFF	; 255
    6ab2:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <midiTxOutIndex>
    6ab6:	89 13       	cpse	r24, r25
    6ab8:	0e c0       	rjmp	.+28     	; 0x6ad6 <serial1MIDISend+0x86>
    6aba:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <midiTxOvflCount>
    6abe:	88 23       	and	r24, r24
    6ac0:	31 f0       	breq	.+12     	; 0x6ace <serial1MIDISend+0x7e>
    6ac2:	8f 3f       	cpi	r24, 0xFF	; 255
    6ac4:	51 f0       	breq	.+20     	; 0x6ada <serial1MIDISend+0x8a>
    6ac6:	8f 5f       	subi	r24, 0xFF	; 255
    6ac8:	80 93 52 16 	sts	0x1652, r24	; 0x801652 <midiTxOvflCount>
    6acc:	06 c0       	rjmp	.+12     	; 0x6ada <serial1MIDISend+0x8a>
    6ace:	81 e0       	ldi	r24, 0x01	; 1
    6ad0:	80 93 52 16 	sts	0x1652, r24	; 0x801652 <midiTxOvflCount>
    6ad4:	02 c0       	rjmp	.+4      	; 0x6ada <serial1MIDISend+0x8a>
    6ad6:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <midiTxInIndex>
    6ada:	e9 ec       	ldi	r30, 0xC9	; 201
    6adc:	f0 e0       	ldi	r31, 0x00	; 0
    6ade:	80 81       	ld	r24, Z
    6ae0:	80 62       	ori	r24, 0x20	; 32
    6ae2:	80 83       	st	Z, r24
    6ae4:	cf 91       	pop	r28
    6ae6:	08 95       	ret

00006ae8 <serial0USB_logPipeIn>:
    6ae8:	cf 93       	push	r28
    6aea:	df 93       	push	r29
    6aec:	20 91 4e 16 	lds	r18, 0x164E	; 0x80164e <serUSB_Active>
    6af0:	22 23       	and	r18, r18
    6af2:	a9 f0       	breq	.+42     	; 0x6b1e <serial0USB_logPipeIn+0x36>
    6af4:	c9 2f       	mov	r28, r25
    6af6:	d8 2f       	mov	r29, r24
    6af8:	8b e6       	ldi	r24, 0x6B	; 107
    6afa:	35 df       	rcall	.-406    	; 0x6966 <serial0SER_USBSend>
    6afc:	8c 2f       	mov	r24, r28
    6afe:	82 95       	swap	r24
    6b00:	8f 70       	andi	r24, 0x0F	; 15
    6b02:	11 d2       	rcall	.+1058   	; 0x6f26 <nibbleToChr>
    6b04:	30 df       	rcall	.-416    	; 0x6966 <serial0SER_USBSend>
    6b06:	cf 70       	andi	r28, 0x0F	; 15
    6b08:	8c 2f       	mov	r24, r28
    6b0a:	0d d2       	rcall	.+1050   	; 0x6f26 <nibbleToChr>
    6b0c:	2c df       	rcall	.-424    	; 0x6966 <serial0SER_USBSend>
    6b0e:	8d 2f       	mov	r24, r29
    6b10:	82 95       	swap	r24
    6b12:	8f 70       	andi	r24, 0x0F	; 15
    6b14:	08 d2       	rcall	.+1040   	; 0x6f26 <nibbleToChr>
    6b16:	27 df       	rcall	.-434    	; 0x6966 <serial0SER_USBSend>
    6b18:	8c 2f       	mov	r24, r28
    6b1a:	05 d2       	rcall	.+1034   	; 0x6f26 <nibbleToChr>
    6b1c:	24 df       	rcall	.-440    	; 0x6966 <serial0SER_USBSend>
    6b1e:	df 91       	pop	r29
    6b20:	cf 91       	pop	r28
    6b22:	08 95       	ret

00006b24 <serial0SER_USB_sendStringP>:
    6b24:	cf 93       	push	r28
    6b26:	df 93       	push	r29
    6b28:	fc 01       	movw	r30, r24
    6b2a:	02 c0       	rjmp	.+4      	; 0x6b30 <serial0SER_USB_sendStringP+0xc>
    6b2c:	1c df       	rcall	.-456    	; 0x6966 <serial0SER_USBSend>
    6b2e:	fe 01       	movw	r30, r28
    6b30:	ef 01       	movw	r28, r30
    6b32:	21 96       	adiw	r28, 0x01	; 1
    6b34:	84 91       	lpm	r24, Z
    6b36:	88 23       	and	r24, r24
    6b38:	21 f0       	breq	.+8      	; 0x6b42 <serial0SER_USB_sendStringP+0x1e>
    6b3a:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <serUSBOvflFlag>
    6b3e:	9f 3f       	cpi	r25, 0xFF	; 255
    6b40:	a9 f7       	brne	.-22     	; 0x6b2c <serial0SER_USB_sendStringP+0x8>
    6b42:	df 91       	pop	r29
    6b44:	cf 91       	pop	r28
    6b46:	08 95       	ret

00006b48 <serial0SER_USB_sendCRLF>:
    6b48:	87 e1       	ldi	r24, 0x17	; 23
    6b4a:	92 e1       	ldi	r25, 0x12	; 18
    6b4c:	eb cf       	rjmp	.-42     	; 0x6b24 <serial0SER_USB_sendStringP>
    6b4e:	08 95       	ret

00006b50 <init_Serial0SerUSB>:
    6b50:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6b54:	88 e0       	ldi	r24, 0x08	; 8
    6b56:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    6b5a:	e1 ec       	ldi	r30, 0xC1	; 193
    6b5c:	f0 e0       	ldi	r31, 0x00	; 0
    6b5e:	80 81       	ld	r24, Z
    6b60:	88 69       	ori	r24, 0x98	; 152
    6b62:	80 83       	st	Z, r24
    6b64:	e2 ec       	ldi	r30, 0xC2	; 194
    6b66:	f0 e0       	ldi	r31, 0x00	; 0
    6b68:	80 81       	ld	r24, Z
    6b6a:	86 60       	ori	r24, 0x06	; 6
    6b6c:	80 83       	st	Z, r24
    6b6e:	8f ef       	ldi	r24, 0xFF	; 255
    6b70:	93 e1       	ldi	r25, 0x13	; 19
    6b72:	90 93 51 16 	sts	0x1651, r25	; 0x801651 <serUSBRxInIndex+0x1>
    6b76:	80 93 50 16 	sts	0x1650, r24	; 0x801650 <serUSBRxInIndex>
    6b7a:	90 93 45 16 	sts	0x1645, r25	; 0x801645 <serUSBRxOutIndex+0x1>
    6b7e:	80 93 44 16 	sts	0x1644, r24	; 0x801644 <serUSBRxOutIndex>
    6b82:	8b ee       	ldi	r24, 0xEB	; 235
    6b84:	9b e0       	ldi	r25, 0x0B	; 11
    6b86:	90 93 ec 13 	sts	0x13EC, r25	; 0x8013ec <serUSBTxOutIndex+0x1>
    6b8a:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <serUSBTxOutIndex>
    6b8e:	90 93 d4 18 	sts	0x18D4, r25	; 0x8018d4 <serUSBTxInIndex+0x1>
    6b92:	80 93 d3 18 	sts	0x18D3, r24	; 0x8018d3 <serUSBTxInIndex>
    6b96:	10 92 46 16 	sts	0x1646, r1	; 0x801646 <serUSBOvflFlag>
    6b9a:	0e 94 bc 0a 	call	0x1578	; 0x1578 <eeprom_ReadUSB>
    6b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    6ba0:	41 f4       	brne	.+16     	; 0x6bb2 <init_Serial0SerUSB+0x62>
    6ba2:	10 92 4e 16 	sts	0x164E, r1	; 0x80164e <serUSB_Active>
    6ba6:	40 e0       	ldi	r20, 0x00	; 0
    6ba8:	50 e0       	ldi	r21, 0x00	; 0
    6baa:	64 e0       	ldi	r22, 0x04	; 4
    6bac:	81 e0       	ldi	r24, 0x01	; 1
    6bae:	0e 94 cb 14 	call	0x2996	; 0x2996 <log_putError>
    6bb2:	80 91 4e 16 	lds	r24, 0x164E	; 0x80164e <serUSB_Active>
    6bb6:	8f 3f       	cpi	r24, 0xFF	; 255
    6bb8:	41 f4       	brne	.+16     	; 0x6bca <init_Serial0SerUSB+0x7a>
    6bba:	8a e6       	ldi	r24, 0x6A	; 106
    6bbc:	93 e0       	ldi	r25, 0x03	; 3
    6bbe:	b2 df       	rcall	.-156    	; 0x6b24 <serial0SER_USB_sendStringP>
    6bc0:	87 eb       	ldi	r24, 0xB7	; 183
    6bc2:	91 e1       	ldi	r25, 0x11	; 17
    6bc4:	af df       	rcall	.-162    	; 0x6b24 <serial0SER_USB_sendStringP>
    6bc6:	c0 df       	rcall	.-128    	; 0x6b48 <serial0SER_USB_sendCRLF>
    6bc8:	bf cf       	rjmp	.-130    	; 0x6b48 <serial0SER_USB_sendCRLF>
    6bca:	08 95       	ret

00006bcc <serial0SER_USB_sendString>:
    6bcc:	1f 93       	push	r17
    6bce:	cf 93       	push	r28
    6bd0:	df 93       	push	r29
    6bd2:	ec 01       	movw	r28, r24
    6bd4:	10 e5       	ldi	r17, 0x50	; 80
    6bd6:	03 c0       	rjmp	.+6      	; 0x6bde <serial0SER_USB_sendString+0x12>
    6bd8:	21 96       	adiw	r28, 0x01	; 1
    6bda:	c5 de       	rcall	.-630    	; 0x6966 <serial0SER_USBSend>
    6bdc:	11 50       	subi	r17, 0x01	; 1
    6bde:	88 81       	ld	r24, Y
    6be0:	88 23       	and	r24, r24
    6be2:	31 f0       	breq	.+12     	; 0x6bf0 <serial0SER_USB_sendString+0x24>
    6be4:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <serUSBOvflFlag>
    6be8:	9f 3f       	cpi	r25, 0xFF	; 255
    6bea:	11 f0       	breq	.+4      	; 0x6bf0 <serial0SER_USB_sendString+0x24>
    6bec:	11 11       	cpse	r17, r1
    6bee:	f4 cf       	rjmp	.-24     	; 0x6bd8 <serial0SER_USB_sendString+0xc>
    6bf0:	df 91       	pop	r29
    6bf2:	cf 91       	pop	r28
    6bf4:	1f 91       	pop	r17
    6bf6:	08 95       	ret

00006bf8 <__vector_25>:
    6bf8:	1f 92       	push	r1
    6bfa:	0f 92       	push	r0
    6bfc:	0f b6       	in	r0, 0x3f	; 63
    6bfe:	0f 92       	push	r0
    6c00:	11 24       	eor	r1, r1
    6c02:	0b b6       	in	r0, 0x3b	; 59
    6c04:	0f 92       	push	r0
    6c06:	2f 93       	push	r18
    6c08:	3f 93       	push	r19
    6c0a:	4f 93       	push	r20
    6c0c:	5f 93       	push	r21
    6c0e:	8f 93       	push	r24
    6c10:	9f 93       	push	r25
    6c12:	ef 93       	push	r30
    6c14:	ff 93       	push	r31
    6c16:	e0 91 50 16 	lds	r30, 0x1650	; 0x801650 <serUSBRxInIndex>
    6c1a:	f0 91 51 16 	lds	r31, 0x1651	; 0x801651 <serUSBRxInIndex+0x1>
    6c1e:	af 01       	movw	r20, r30
    6c20:	4f 5f       	subi	r20, 0xFF	; 255
    6c22:	5f 4f       	sbci	r21, 0xFF	; 255
    6c24:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6c28:	80 83       	st	Z, r24
    6c2a:	84 e1       	ldi	r24, 0x14	; 20
    6c2c:	4e 33       	cpi	r20, 0x3E	; 62
    6c2e:	58 07       	cpc	r21, r24
    6c30:	19 f0       	breq	.+6      	; 0x6c38 <__vector_25+0x40>
    6c32:	10 f0       	brcs	.+4      	; 0x6c38 <__vector_25+0x40>
    6c34:	4f ef       	ldi	r20, 0xFF	; 255
    6c36:	53 e1       	ldi	r21, 0x13	; 19
    6c38:	9f b7       	in	r25, 0x3f	; 63
    6c3a:	f8 94       	cli
    6c3c:	81 e0       	ldi	r24, 0x01	; 1
    6c3e:	05 c0       	rjmp	.+10     	; 0x6c4a <__vector_25+0x52>
    6c40:	20 91 44 16 	lds	r18, 0x1644	; 0x801644 <serUSBRxOutIndex>
    6c44:	30 91 45 16 	lds	r19, 0x1645	; 0x801645 <serUSBRxOutIndex+0x1>
    6c48:	80 e0       	ldi	r24, 0x00	; 0
    6c4a:	81 11       	cpse	r24, r1
    6c4c:	f9 cf       	rjmp	.-14     	; 0x6c40 <__vector_25+0x48>
    6c4e:	9f bf       	out	0x3f, r25	; 63
    6c50:	42 17       	cp	r20, r18
    6c52:	53 07       	cpc	r21, r19
    6c54:	21 f4       	brne	.+8      	; 0x6c5e <__vector_25+0x66>
    6c56:	8f ef       	ldi	r24, 0xFF	; 255
    6c58:	80 93 46 16 	sts	0x1646, r24	; 0x801646 <serUSBOvflFlag>
    6c5c:	04 c0       	rjmp	.+8      	; 0x6c66 <__vector_25+0x6e>
    6c5e:	50 93 51 16 	sts	0x1651, r21	; 0x801651 <serUSBRxInIndex+0x1>
    6c62:	40 93 50 16 	sts	0x1650, r20	; 0x801650 <serUSBRxInIndex>
    6c66:	ff 91       	pop	r31
    6c68:	ef 91       	pop	r30
    6c6a:	9f 91       	pop	r25
    6c6c:	8f 91       	pop	r24
    6c6e:	5f 91       	pop	r21
    6c70:	4f 91       	pop	r20
    6c72:	3f 91       	pop	r19
    6c74:	2f 91       	pop	r18
    6c76:	0f 90       	pop	r0
    6c78:	0b be       	out	0x3b, r0	; 59
    6c7a:	0f 90       	pop	r0
    6c7c:	0f be       	out	0x3f, r0	; 63
    6c7e:	0f 90       	pop	r0
    6c80:	1f 90       	pop	r1
    6c82:	18 95       	reti

00006c84 <__vector_26>:
    6c84:	1f 92       	push	r1
    6c86:	0f 92       	push	r0
    6c88:	0f b6       	in	r0, 0x3f	; 63
    6c8a:	0f 92       	push	r0
    6c8c:	11 24       	eor	r1, r1
    6c8e:	0b b6       	in	r0, 0x3b	; 59
    6c90:	0f 92       	push	r0
    6c92:	2f 93       	push	r18
    6c94:	8f 93       	push	r24
    6c96:	9f 93       	push	r25
    6c98:	ef 93       	push	r30
    6c9a:	ff 93       	push	r31
    6c9c:	e0 91 eb 13 	lds	r30, 0x13EB	; 0x8013eb <serUSBTxOutIndex>
    6ca0:	f0 91 ec 13 	lds	r31, 0x13EC	; 0x8013ec <serUSBTxOutIndex+0x1>
    6ca4:	80 91 d3 18 	lds	r24, 0x18D3	; 0x8018d3 <serUSBTxInIndex>
    6ca8:	90 91 d4 18 	lds	r25, 0x18D4	; 0x8018d4 <serUSBTxInIndex+0x1>
    6cac:	e8 17       	cp	r30, r24
    6cae:	f9 07       	cpc	r31, r25
    6cb0:	89 f0       	breq	.+34     	; 0x6cd4 <__vector_26+0x50>
    6cb2:	cf 01       	movw	r24, r30
    6cb4:	01 96       	adiw	r24, 0x01	; 1
    6cb6:	20 81       	ld	r18, Z
    6cb8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6cbc:	23 e1       	ldi	r18, 0x13	; 19
    6cbe:	8a 3e       	cpi	r24, 0xEA	; 234
    6cc0:	92 07       	cpc	r25, r18
    6cc2:	19 f0       	breq	.+6      	; 0x6cca <__vector_26+0x46>
    6cc4:	10 f0       	brcs	.+4      	; 0x6cca <__vector_26+0x46>
    6cc6:	8b ee       	ldi	r24, 0xEB	; 235
    6cc8:	9b e0       	ldi	r25, 0x0B	; 11
    6cca:	90 93 ec 13 	sts	0x13EC, r25	; 0x8013ec <serUSBTxOutIndex+0x1>
    6cce:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <serUSBTxOutIndex>
    6cd2:	05 c0       	rjmp	.+10     	; 0x6cde <__vector_26+0x5a>
    6cd4:	e1 ec       	ldi	r30, 0xC1	; 193
    6cd6:	f0 e0       	ldi	r31, 0x00	; 0
    6cd8:	80 81       	ld	r24, Z
    6cda:	8f 7d       	andi	r24, 0xDF	; 223
    6cdc:	80 83       	st	Z, r24
    6cde:	ff 91       	pop	r31
    6ce0:	ef 91       	pop	r30
    6ce2:	9f 91       	pop	r25
    6ce4:	8f 91       	pop	r24
    6ce6:	2f 91       	pop	r18
    6ce8:	0f 90       	pop	r0
    6cea:	0b be       	out	0x3b, r0	; 59
    6cec:	0f 90       	pop	r0
    6cee:	0f be       	out	0x3f, r0	; 63
    6cf0:	0f 90       	pop	r0
    6cf2:	1f 90       	pop	r1
    6cf4:	18 95       	reti

00006cf6 <init_Serial3SerESP>:
    6cf6:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    6cfa:	88 e0       	ldi	r24, 0x08	; 8
    6cfc:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    6d00:	e1 e3       	ldi	r30, 0x31	; 49
    6d02:	f1 e0       	ldi	r31, 0x01	; 1
    6d04:	80 81       	ld	r24, Z
    6d06:	88 69       	ori	r24, 0x98	; 152
    6d08:	80 83       	st	Z, r24
    6d0a:	e2 e3       	ldi	r30, 0x32	; 50
    6d0c:	f1 e0       	ldi	r31, 0x01	; 1
    6d0e:	80 81       	ld	r24, Z
    6d10:	86 60       	ori	r24, 0x06	; 6
    6d12:	80 83       	st	Z, r24
    6d14:	83 e5       	ldi	r24, 0x53	; 83
    6d16:	96 e1       	ldi	r25, 0x16	; 22
    6d18:	90 93 fd 13 	sts	0x13FD, r25	; 0x8013fd <serESPRxInIndex+0x1>
    6d1c:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <serESPRxInIndex>
    6d20:	90 93 f8 13 	sts	0x13F8, r25	; 0x8013f8 <serESPRxOutIndex+0x1>
    6d24:	80 93 f7 13 	sts	0x13F7, r24	; 0x8013f7 <serESPRxOutIndex>
    6d28:	83 ed       	ldi	r24, 0xD3	; 211
    6d2a:	96 e1       	ldi	r25, 0x16	; 22
    6d2c:	90 93 40 16 	sts	0x1640, r25	; 0x801640 <serESPTxOutIndex+0x1>
    6d30:	80 93 3f 16 	sts	0x163F, r24	; 0x80163f <serESPTxOutIndex>
    6d34:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxInIndex+0x1>
    6d38:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxInIndex>
    6d3c:	10 92 ee 13 	sts	0x13EE, r1	; 0x8013ee <serESPOvflFlag>
    6d40:	8f ef       	ldi	r24, 0xFF	; 255
    6d42:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <serESP_Active>
    6d46:	80 e0       	ldi	r24, 0x00	; 0
    6d48:	07 c0       	rjmp	.+14     	; 0x6d58 <init_Serial3SerESP+0x62>
    6d4a:	e8 2f       	mov	r30, r24
    6d4c:	f0 e0       	ldi	r31, 0x00	; 0
    6d4e:	e1 51       	subi	r30, 0x11	; 17
    6d50:	fc 4e       	sbci	r31, 0xEC	; 236
    6d52:	9f ef       	ldi	r25, 0xFF	; 255
    6d54:	90 83       	st	Z, r25
    6d56:	8f 5f       	subi	r24, 0xFF	; 255
    6d58:	88 30       	cpi	r24, 0x08	; 8
    6d5a:	b8 f3       	brcs	.-18     	; 0x6d4a <init_Serial3SerESP+0x54>
    6d5c:	08 95       	ret

00006d5e <serial3SER_ESPSend>:
    6d5e:	e0 91 42 16 	lds	r30, 0x1642	; 0x801642 <serESPTxInIndex>
    6d62:	f0 91 43 16 	lds	r31, 0x1643	; 0x801643 <serESPTxInIndex+0x1>
    6d66:	a1 e3       	ldi	r26, 0x31	; 49
    6d68:	b1 e0       	ldi	r27, 0x01	; 1
    6d6a:	9c 91       	ld	r25, X
    6d6c:	9f 7d       	andi	r25, 0xDF	; 223
    6d6e:	9c 93       	st	X, r25
    6d70:	af 01       	movw	r20, r30
    6d72:	4f 5f       	subi	r20, 0xFF	; 255
    6d74:	5f 4f       	sbci	r21, 0xFF	; 255
    6d76:	80 83       	st	Z, r24
    6d78:	88 e1       	ldi	r24, 0x18	; 24
    6d7a:	42 3d       	cpi	r20, 0xD2	; 210
    6d7c:	58 07       	cpc	r21, r24
    6d7e:	19 f0       	breq	.+6      	; 0x6d86 <serial3SER_ESPSend+0x28>
    6d80:	10 f0       	brcs	.+4      	; 0x6d86 <serial3SER_ESPSend+0x28>
    6d82:	43 ed       	ldi	r20, 0xD3	; 211
    6d84:	56 e1       	ldi	r21, 0x16	; 22
    6d86:	9f b7       	in	r25, 0x3f	; 63
    6d88:	f8 94       	cli
    6d8a:	81 e0       	ldi	r24, 0x01	; 1
    6d8c:	05 c0       	rjmp	.+10     	; 0x6d98 <serial3SER_ESPSend+0x3a>
    6d8e:	20 91 3f 16 	lds	r18, 0x163F	; 0x80163f <serESPTxOutIndex>
    6d92:	30 91 40 16 	lds	r19, 0x1640	; 0x801640 <serESPTxOutIndex+0x1>
    6d96:	80 e0       	ldi	r24, 0x00	; 0
    6d98:	81 11       	cpse	r24, r1
    6d9a:	f9 cf       	rjmp	.-14     	; 0x6d8e <serial3SER_ESPSend+0x30>
    6d9c:	9f bf       	out	0x3f, r25	; 63
    6d9e:	42 17       	cp	r20, r18
    6da0:	53 07       	cpc	r21, r19
    6da2:	49 f4       	brne	.+18     	; 0x6db6 <serial3SER_ESPSend+0x58>
    6da4:	8f ef       	ldi	r24, 0xFF	; 255
    6da6:	80 93 ee 13 	sts	0x13EE, r24	; 0x8013ee <serESPOvflFlag>
    6daa:	e1 e3       	ldi	r30, 0x31	; 49
    6dac:	f1 e0       	ldi	r31, 0x01	; 1
    6dae:	80 81       	ld	r24, Z
    6db0:	80 62       	ori	r24, 0x20	; 32
    6db2:	80 83       	st	Z, r24
    6db4:	08 95       	ret
    6db6:	50 93 43 16 	sts	0x1643, r21	; 0x801643 <serESPTxInIndex+0x1>
    6dba:	40 93 42 16 	sts	0x1642, r20	; 0x801642 <serESPTxInIndex>
    6dbe:	e1 e3       	ldi	r30, 0x31	; 49
    6dc0:	f1 e0       	ldi	r31, 0x01	; 1
    6dc2:	80 81       	ld	r24, Z
    6dc4:	80 62       	ori	r24, 0x20	; 32
    6dc6:	80 83       	st	Z, r24
    6dc8:	08 95       	ret

00006dca <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    6dca:	e0 91 f7 13 	lds	r30, 0x13F7	; 0x8013f7 <serESPRxOutIndex>
    6dce:	f0 91 f8 13 	lds	r31, 0x13F8	; 0x8013f8 <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    6dd2:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <serESPRxInIndex>
    6dd6:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <serESPRxInIndex+0x1>
    6dda:	e8 17       	cp	r30, r24
    6ddc:	f9 07       	cpc	r31, r25
    6dde:	81 f0       	breq	.+32     	; 0x6e00 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    6de0:	9f 01       	movw	r18, r30
    6de2:	2f 5f       	subi	r18, 0xFF	; 255
    6de4:	3f 4f       	sbci	r19, 0xFF	; 255
    6de6:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    6de8:	96 e1       	ldi	r25, 0x16	; 22
    6dea:	22 3d       	cpi	r18, 0xD2	; 210
    6dec:	39 07       	cpc	r19, r25
    6dee:	19 f0       	breq	.+6      	; 0x6df6 <serial3SER_ESPReadRx+0x2c>
    6df0:	10 f0       	brcs	.+4      	; 0x6df6 <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    6df2:	23 e5       	ldi	r18, 0x53	; 83
    6df4:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    6df6:	30 93 f8 13 	sts	0x13F8, r19	; 0x8013f8 <serESPRxOutIndex+0x1>
    6dfa:	20 93 f7 13 	sts	0x13F7, r18	; 0x8013f7 <serESPRxOutIndex>
    6dfe:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    6e00:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    6e02:	08 95       	ret

00006e04 <__vector_54>:

ISR(USART3_RX_vect) {
    6e04:	1f 92       	push	r1
    6e06:	0f 92       	push	r0
    6e08:	0f b6       	in	r0, 0x3f	; 63
    6e0a:	0f 92       	push	r0
    6e0c:	11 24       	eor	r1, r1
    6e0e:	0b b6       	in	r0, 0x3b	; 59
    6e10:	0f 92       	push	r0
    6e12:	2f 93       	push	r18
    6e14:	3f 93       	push	r19
    6e16:	4f 93       	push	r20
    6e18:	5f 93       	push	r21
    6e1a:	6f 93       	push	r22
    6e1c:	8f 93       	push	r24
    6e1e:	9f 93       	push	r25
    6e20:	af 93       	push	r26
    6e22:	bf 93       	push	r27
    6e24:	ef 93       	push	r30
    6e26:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    6e28:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <serESPRxInIndex>
    6e2c:	f0 91 fd 13 	lds	r31, 0x13FD	; 0x8013fd <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    6e30:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    6e34:	af 01       	movw	r20, r30
    6e36:	4f 5f       	subi	r20, 0xFF	; 255
    6e38:	5f 4f       	sbci	r21, 0xFF	; 255
    6e3a:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    6e3c:	86 e1       	ldi	r24, 0x16	; 22
    6e3e:	42 3d       	cpi	r20, 0xD2	; 210
    6e40:	58 07       	cpc	r21, r24
    6e42:	19 f0       	breq	.+6      	; 0x6e4a <__vector_54+0x46>
    6e44:	10 f0       	brcs	.+4      	; 0x6e4a <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    6e46:	43 e5       	ldi	r20, 0x53	; 83
    6e48:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6e4a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6e4c:	f8 94       	cli
    6e4e:	81 e0       	ldi	r24, 0x01	; 1
    6e50:	05 c0       	rjmp	.+10     	; 0x6e5c <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    6e52:	20 91 f7 13 	lds	r18, 0x13F7	; 0x8013f7 <serESPRxOutIndex>
    6e56:	30 91 f8 13 	lds	r19, 0x13F8	; 0x8013f8 <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6e5a:	80 e0       	ldi	r24, 0x00	; 0
    6e5c:	81 11       	cpse	r24, r1
    6e5e:	f9 cf       	rjmp	.-14     	; 0x6e52 <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6e60:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    6e62:	42 17       	cp	r20, r18
    6e64:	53 07       	cpc	r21, r19
    6e66:	39 f4       	brne	.+14     	; 0x6e76 <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    6e68:	8f ef       	ldi	r24, 0xFF	; 255
    6e6a:	80 93 ee 13 	sts	0x13EE, r24	; 0x8013ee <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6e6e:	80 e0       	ldi	r24, 0x00	; 0
    6e70:	a6 ef       	ldi	r26, 0xF6	; 246
    6e72:	b3 e1       	ldi	r27, 0x13	; 19
    6e74:	0a c0       	rjmp	.+20     	; 0x6e8a <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    6e76:	50 93 fd 13 	sts	0x13FD, r21	; 0x8013fd <serESPRxInIndex+0x1>
    6e7a:	40 93 fc 13 	sts	0x13FC, r20	; 0x8013fc <serESPRxInIndex>
    6e7e:	f7 cf       	rjmp	.-18     	; 0x6e6e <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    6e80:	fd 01       	movw	r30, r26
    6e82:	92 91       	ld	r25, -Z
    6e84:	9c 93       	st	X, r25
		inpBufferPtr--;
    6e86:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    6e88:	8f 5f       	subi	r24, 0xFF	; 255
    6e8a:	87 30       	cpi	r24, 0x07	; 7
    6e8c:	c8 f3       	brcs	.-14     	; 0x6e80 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    6e8e:	6c 93       	st	X, r22
}
    6e90:	ff 91       	pop	r31
    6e92:	ef 91       	pop	r30
    6e94:	bf 91       	pop	r27
    6e96:	af 91       	pop	r26
    6e98:	9f 91       	pop	r25
    6e9a:	8f 91       	pop	r24
    6e9c:	6f 91       	pop	r22
    6e9e:	5f 91       	pop	r21
    6ea0:	4f 91       	pop	r20
    6ea2:	3f 91       	pop	r19
    6ea4:	2f 91       	pop	r18
    6ea6:	0f 90       	pop	r0
    6ea8:	0b be       	out	0x3b, r0	; 59
    6eaa:	0f 90       	pop	r0
    6eac:	0f be       	out	0x3f, r0	; 63
    6eae:	0f 90       	pop	r0
    6eb0:	1f 90       	pop	r1
    6eb2:	18 95       	reti

00006eb4 <__vector_55>:

ISR(USART3_UDRE_vect) {
    6eb4:	1f 92       	push	r1
    6eb6:	0f 92       	push	r0
    6eb8:	0f b6       	in	r0, 0x3f	; 63
    6eba:	0f 92       	push	r0
    6ebc:	11 24       	eor	r1, r1
    6ebe:	0b b6       	in	r0, 0x3b	; 59
    6ec0:	0f 92       	push	r0
    6ec2:	2f 93       	push	r18
    6ec4:	8f 93       	push	r24
    6ec6:	9f 93       	push	r25
    6ec8:	ef 93       	push	r30
    6eca:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    6ecc:	e0 91 3f 16 	lds	r30, 0x163F	; 0x80163f <serESPTxOutIndex>
    6ed0:	f0 91 40 16 	lds	r31, 0x1640	; 0x801640 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    6ed4:	80 91 42 16 	lds	r24, 0x1642	; 0x801642 <serESPTxInIndex>
    6ed8:	90 91 43 16 	lds	r25, 0x1643	; 0x801643 <serESPTxInIndex+0x1>
    6edc:	e8 17       	cp	r30, r24
    6ede:	f9 07       	cpc	r31, r25
    6ee0:	89 f0       	breq	.+34     	; 0x6f04 <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    6ee2:	cf 01       	movw	r24, r30
    6ee4:	01 96       	adiw	r24, 0x01	; 1
    6ee6:	20 81       	ld	r18, Z
    6ee8:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    6eec:	28 e1       	ldi	r18, 0x18	; 24
    6eee:	82 3d       	cpi	r24, 0xD2	; 210
    6ef0:	92 07       	cpc	r25, r18
    6ef2:	19 f0       	breq	.+6      	; 0x6efa <__vector_55+0x46>
    6ef4:	10 f0       	brcs	.+4      	; 0x6efa <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    6ef6:	83 ed       	ldi	r24, 0xD3	; 211
    6ef8:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    6efa:	90 93 40 16 	sts	0x1640, r25	; 0x801640 <serESPTxOutIndex+0x1>
    6efe:	80 93 3f 16 	sts	0x163F, r24	; 0x80163f <serESPTxOutIndex>
    6f02:	05 c0       	rjmp	.+10     	; 0x6f0e <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    6f04:	e1 e3       	ldi	r30, 0x31	; 49
    6f06:	f1 e0       	ldi	r31, 0x01	; 1
    6f08:	80 81       	ld	r24, Z
    6f0a:	8f 7d       	andi	r24, 0xDF	; 223
    6f0c:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    6f0e:	ff 91       	pop	r31
    6f10:	ef 91       	pop	r30
    6f12:	9f 91       	pop	r25
    6f14:	8f 91       	pop	r24
    6f16:	2f 91       	pop	r18
    6f18:	0f 90       	pop	r0
    6f1a:	0b be       	out	0x3b, r0	; 59
    6f1c:	0f 90       	pop	r0
    6f1e:	0f be       	out	0x3f, r0	; 63
    6f20:	0f 90       	pop	r0
    6f22:	1f 90       	pop	r1
    6f24:	18 95       	reti

00006f26 <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    6f26:	8a 30       	cpi	r24, 0x0A	; 10
    6f28:	10 f0       	brcs	.+4      	; 0x6f2e <nibbleToChr+0x8>
    6f2a:	89 5c       	subi	r24, 0xC9	; 201
    6f2c:	08 95       	ret
    6f2e:	80 5d       	subi	r24, 0xD0	; 208
    6f30:	08 95       	ret

00006f32 <lcd_setCG>:
    6f32:	ef 92       	push	r14
    6f34:	ff 92       	push	r15
    6f36:	1f 93       	push	r17
    6f38:	cf 93       	push	r28
    6f3a:	df 93       	push	r29
    6f3c:	eb 01       	movw	r28, r22
    6f3e:	90 e0       	ldi	r25, 0x00	; 0
    6f40:	88 0f       	add	r24, r24
    6f42:	99 1f       	adc	r25, r25
    6f44:	88 0f       	add	r24, r24
    6f46:	99 1f       	adc	r25, r25
    6f48:	88 0f       	add	r24, r24
    6f4a:	99 1f       	adc	r25, r25
    6f4c:	80 64       	ori	r24, 0x40	; 64
    6f4e:	0e 94 19 12 	call	0x2432	; 0x2432 <lcd_write_command>
    6f52:	10 e0       	ldi	r17, 0x00	; 0
    6f54:	0a c0       	rjmp	.+20     	; 0x6f6a <lcd_setCG+0x38>
    6f56:	7e 01       	movw	r14, r28
    6f58:	8f ef       	ldi	r24, 0xFF	; 255
    6f5a:	e8 1a       	sub	r14, r24
    6f5c:	f8 0a       	sbc	r15, r24
    6f5e:	fe 01       	movw	r30, r28
    6f60:	84 91       	lpm	r24, Z
    6f62:	0e 94 f5 11 	call	0x23ea	; 0x23ea <lcd_write_character>
    6f66:	1f 5f       	subi	r17, 0xFF	; 255
    6f68:	e7 01       	movw	r28, r14
    6f6a:	18 30       	cpi	r17, 0x08	; 8
    6f6c:	a0 f3       	brcs	.-24     	; 0x6f56 <lcd_setCG+0x24>
    6f6e:	df 91       	pop	r29
    6f70:	cf 91       	pop	r28
    6f72:	1f 91       	pop	r17
    6f74:	ff 90       	pop	r15
    6f76:	ef 90       	pop	r14
    6f78:	08 95       	ret

00006f7a <lcd_initCG>:
    6f7a:	6f e0       	ldi	r22, 0x0F	; 15
    6f7c:	72 e1       	ldi	r23, 0x12	; 18
    6f7e:	80 e0       	ldi	r24, 0x00	; 0
    6f80:	d8 df       	rcall	.-80     	; 0x6f32 <lcd_setCG>
    6f82:	67 e0       	ldi	r22, 0x07	; 7
    6f84:	72 e1       	ldi	r23, 0x12	; 18
    6f86:	81 e0       	ldi	r24, 0x01	; 1
    6f88:	d4 df       	rcall	.-88     	; 0x6f32 <lcd_setCG>
    6f8a:	6f ef       	ldi	r22, 0xFF	; 255
    6f8c:	71 e1       	ldi	r23, 0x11	; 17
    6f8e:	82 e0       	ldi	r24, 0x02	; 2
    6f90:	d0 cf       	rjmp	.-96     	; 0x6f32 <lcd_setCG>
    6f92:	08 95       	ret

00006f94 <lcd_hexout>:
    6f94:	cf 93       	push	r28
    6f96:	c8 2f       	mov	r28, r24
    6f98:	82 95       	swap	r24
    6f9a:	8f 70       	andi	r24, 0x0F	; 15
    6f9c:	8a 30       	cpi	r24, 0x0A	; 10
    6f9e:	10 f0       	brcs	.+4      	; 0x6fa4 <lcd_hexout+0x10>
    6fa0:	89 5c       	subi	r24, 0xC9	; 201
    6fa2:	01 c0       	rjmp	.+2      	; 0x6fa6 <lcd_hexout+0x12>
    6fa4:	80 5d       	subi	r24, 0xD0	; 208
    6fa6:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    6faa:	cf 70       	andi	r28, 0x0F	; 15
    6fac:	ca 30       	cpi	r28, 0x0A	; 10
    6fae:	18 f0       	brcs	.+6      	; 0x6fb6 <lcd_hexout+0x22>
    6fb0:	87 e3       	ldi	r24, 0x37	; 55
    6fb2:	8c 0f       	add	r24, r28
    6fb4:	02 c0       	rjmp	.+4      	; 0x6fba <lcd_hexout+0x26>
    6fb6:	80 e3       	ldi	r24, 0x30	; 48
    6fb8:	8c 0f       	add	r24, r28
    6fba:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    6fbe:	cf 91       	pop	r28
    6fc0:	08 95       	ret

00006fc2 <lcd_longout>:
    6fc2:	cf 93       	push	r28
    6fc4:	df 93       	push	r29
    6fc6:	d3 e0       	ldi	r29, 0x03	; 3
    6fc8:	1c c0       	rjmp	.+56     	; 0x7002 <lcd_longout+0x40>
    6fca:	ed 2f       	mov	r30, r29
    6fcc:	0d 2e       	mov	r0, r29
    6fce:	00 0c       	add	r0, r0
    6fd0:	ff 0b       	sbc	r31, r31
    6fd2:	e7 52       	subi	r30, 0x27	; 39
    6fd4:	f7 4e       	sbci	r31, 0xE7	; 231
    6fd6:	c0 81       	ld	r28, Z
    6fd8:	8c 2f       	mov	r24, r28
    6fda:	82 95       	swap	r24
    6fdc:	8f 70       	andi	r24, 0x0F	; 15
    6fde:	8a 30       	cpi	r24, 0x0A	; 10
    6fe0:	10 f0       	brcs	.+4      	; 0x6fe6 <lcd_longout+0x24>
    6fe2:	89 5c       	subi	r24, 0xC9	; 201
    6fe4:	01 c0       	rjmp	.+2      	; 0x6fe8 <lcd_longout+0x26>
    6fe6:	80 5d       	subi	r24, 0xD0	; 208
    6fe8:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    6fec:	cf 70       	andi	r28, 0x0F	; 15
    6fee:	ca 30       	cpi	r28, 0x0A	; 10
    6ff0:	18 f0       	brcs	.+6      	; 0x6ff8 <lcd_longout+0x36>
    6ff2:	87 e3       	ldi	r24, 0x37	; 55
    6ff4:	8c 0f       	add	r24, r28
    6ff6:	02 c0       	rjmp	.+4      	; 0x6ffc <lcd_longout+0x3a>
    6ff8:	80 e3       	ldi	r24, 0x30	; 48
    6ffa:	8c 0f       	add	r24, r28
    6ffc:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    7000:	d1 50       	subi	r29, 0x01	; 1
    7002:	dd 23       	and	r29, r29
    7004:	14 f7       	brge	.-60     	; 0x6fca <lcd_longout+0x8>
    7006:	df 91       	pop	r29
    7008:	cf 91       	pop	r28
    700a:	08 95       	ret

0000700c <lcd_dec2out>:
    700c:	cf 93       	push	r28
    700e:	c8 2f       	mov	r28, r24
    7010:	84 36       	cpi	r24, 0x64	; 100
    7012:	50 f0       	brcs	.+20     	; 0x7028 <lcd_dec2out+0x1c>
    7014:	8d e2       	ldi	r24, 0x2D	; 45
    7016:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    701a:	8d e2       	ldi	r24, 0x2D	; 45
    701c:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    7020:	0d c0       	rjmp	.+26     	; 0x703c <lcd_dec2out+0x30>
    7022:	ca 50       	subi	r28, 0x0A	; 10
    7024:	8f 5f       	subi	r24, 0xFF	; 255
    7026:	01 c0       	rjmp	.+2      	; 0x702a <lcd_dec2out+0x1e>
    7028:	80 e0       	ldi	r24, 0x00	; 0
    702a:	ca 30       	cpi	r28, 0x0A	; 10
    702c:	d0 f7       	brcc	.-12     	; 0x7022 <lcd_dec2out+0x16>
    702e:	80 5d       	subi	r24, 0xD0	; 208
    7030:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    7034:	80 e3       	ldi	r24, 0x30	; 48
    7036:	8c 0f       	add	r24, r28
    7038:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    703c:	cf 91       	pop	r28
    703e:	08 95       	ret

00007040 <putChar_Dec2>:
    7040:	84 36       	cpi	r24, 0x64	; 100
    7042:	58 f0       	brcs	.+22     	; 0x705a <putChar_Dec2+0x1a>
    7044:	8d e2       	ldi	r24, 0x2D	; 45
    7046:	db 01       	movw	r26, r22
    7048:	8c 93       	st	X, r24
    704a:	fb 01       	movw	r30, r22
    704c:	32 96       	adiw	r30, 0x02	; 2
    704e:	11 96       	adiw	r26, 0x01	; 1
    7050:	8c 93       	st	X, r24
    7052:	0f c0       	rjmp	.+30     	; 0x7072 <putChar_Dec2+0x32>
    7054:	8a 50       	subi	r24, 0x0A	; 10
    7056:	9f 5f       	subi	r25, 0xFF	; 255
    7058:	01 c0       	rjmp	.+2      	; 0x705c <putChar_Dec2+0x1c>
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	8a 30       	cpi	r24, 0x0A	; 10
    705e:	d0 f7       	brcc	.-12     	; 0x7054 <putChar_Dec2+0x14>
    7060:	90 5d       	subi	r25, 0xD0	; 208
    7062:	fb 01       	movw	r30, r22
    7064:	90 83       	st	Z, r25
    7066:	32 96       	adiw	r30, 0x02	; 2
    7068:	90 e3       	ldi	r25, 0x30	; 48
    706a:	98 0f       	add	r25, r24
    706c:	db 01       	movw	r26, r22
    706e:	11 96       	adiw	r26, 0x01	; 1
    7070:	9c 93       	st	X, r25
    7072:	10 82       	st	Z, r1
    7074:	cf 01       	movw	r24, r30
    7076:	08 95       	ret

00007078 <putChar_Dec>:
    7078:	90 e0       	ldi	r25, 0x00	; 0
    707a:	02 c0       	rjmp	.+4      	; 0x7080 <putChar_Dec+0x8>
    707c:	84 56       	subi	r24, 0x64	; 100
    707e:	9f 5f       	subi	r25, 0xFF	; 255
    7080:	84 36       	cpi	r24, 0x64	; 100
    7082:	e0 f7       	brcc	.-8      	; 0x707c <putChar_Dec+0x4>
    7084:	99 23       	and	r25, r25
    7086:	39 f0       	breq	.+14     	; 0x7096 <putChar_Dec+0x1e>
    7088:	90 5d       	subi	r25, 0xD0	; 208
    708a:	db 01       	movw	r26, r22
    708c:	9c 93       	st	X, r25
    708e:	6f 5f       	subi	r22, 0xFF	; 255
    7090:	7f 4f       	sbci	r23, 0xFF	; 255
    7092:	2f ef       	ldi	r18, 0xFF	; 255
    7094:	01 c0       	rjmp	.+2      	; 0x7098 <putChar_Dec+0x20>
    7096:	20 e0       	ldi	r18, 0x00	; 0
    7098:	90 e0       	ldi	r25, 0x00	; 0
    709a:	02 c0       	rjmp	.+4      	; 0x70a0 <putChar_Dec+0x28>
    709c:	8a 50       	subi	r24, 0x0A	; 10
    709e:	9f 5f       	subi	r25, 0xFF	; 255
    70a0:	8a 30       	cpi	r24, 0x0A	; 10
    70a2:	e0 f7       	brcc	.-8      	; 0x709c <putChar_Dec+0x24>
    70a4:	91 11       	cpse	r25, r1
    70a6:	02 c0       	rjmp	.+4      	; 0x70ac <putChar_Dec+0x34>
    70a8:	2f 3f       	cpi	r18, 0xFF	; 255
    70aa:	31 f4       	brne	.+12     	; 0x70b8 <putChar_Dec+0x40>
    70ac:	fb 01       	movw	r30, r22
    70ae:	31 96       	adiw	r30, 0x01	; 1
    70b0:	90 5d       	subi	r25, 0xD0	; 208
    70b2:	db 01       	movw	r26, r22
    70b4:	9c 93       	st	X, r25
    70b6:	01 c0       	rjmp	.+2      	; 0x70ba <putChar_Dec+0x42>
    70b8:	fb 01       	movw	r30, r22
    70ba:	80 5d       	subi	r24, 0xD0	; 208
    70bc:	80 83       	st	Z, r24
    70be:	11 82       	std	Z+1, r1	; 0x01
    70c0:	cf 01       	movw	r24, r30
    70c2:	01 96       	adiw	r24, 0x01	; 1
    70c4:	08 95       	ret

000070c6 <putChar_hex>:
    70c6:	fb 01       	movw	r30, r22
    70c8:	98 2f       	mov	r25, r24
    70ca:	92 95       	swap	r25
    70cc:	9f 70       	andi	r25, 0x0F	; 15
    70ce:	9a 30       	cpi	r25, 0x0A	; 10
    70d0:	10 f0       	brcs	.+4      	; 0x70d6 <putChar_hex+0x10>
    70d2:	99 5c       	subi	r25, 0xC9	; 201
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <putChar_hex+0x12>
    70d6:	90 5d       	subi	r25, 0xD0	; 208
    70d8:	90 83       	st	Z, r25
    70da:	98 2f       	mov	r25, r24
    70dc:	9f 70       	andi	r25, 0x0F	; 15
    70de:	9f 01       	movw	r18, r30
    70e0:	2e 5f       	subi	r18, 0xFE	; 254
    70e2:	3f 4f       	sbci	r19, 0xFF	; 255
    70e4:	9a 30       	cpi	r25, 0x0A	; 10
    70e6:	10 f0       	brcs	.+4      	; 0x70ec <putChar_hex+0x26>
    70e8:	99 5c       	subi	r25, 0xC9	; 201
    70ea:	01 c0       	rjmp	.+2      	; 0x70ee <putChar_hex+0x28>
    70ec:	90 5d       	subi	r25, 0xD0	; 208
    70ee:	91 83       	std	Z+1, r25	; 0x01
    70f0:	12 82       	std	Z+2, r1	; 0x02
    70f2:	c9 01       	movw	r24, r18
    70f4:	08 95       	ret

000070f6 <putChar_MidiChan>:
    70f6:	80 31       	cpi	r24, 0x10	; 16
    70f8:	48 f0       	brcs	.+18     	; 0x710c <putChar_MidiChan+0x16>
    70fa:	8e e6       	ldi	r24, 0x6E	; 110
    70fc:	db 01       	movw	r26, r22
    70fe:	8c 93       	st	X, r24
    7100:	fb 01       	movw	r30, r22
    7102:	32 96       	adiw	r30, 0x02	; 2
    7104:	8f e6       	ldi	r24, 0x6F	; 111
    7106:	11 96       	adiw	r26, 0x01	; 1
    7108:	8c 93       	st	X, r24
    710a:	15 c0       	rjmp	.+42     	; 0x7136 <putChar_MidiChan+0x40>
    710c:	91 e0       	ldi	r25, 0x01	; 1
    710e:	98 0f       	add	r25, r24
    7110:	9a 30       	cpi	r25, 0x0A	; 10
    7112:	40 f0       	brcs	.+16     	; 0x7124 <putChar_MidiChan+0x2e>
    7114:	db 01       	movw	r26, r22
    7116:	11 96       	adiw	r26, 0x01	; 1
    7118:	91 e3       	ldi	r25, 0x31	; 49
    711a:	fb 01       	movw	r30, r22
    711c:	90 83       	st	Z, r25
    711e:	97 ef       	ldi	r25, 0xF7	; 247
    7120:	98 0f       	add	r25, r24
    7122:	05 c0       	rjmp	.+10     	; 0x712e <putChar_MidiChan+0x38>
    7124:	db 01       	movw	r26, r22
    7126:	11 96       	adiw	r26, 0x01	; 1
    7128:	80 e2       	ldi	r24, 0x20	; 32
    712a:	fb 01       	movw	r30, r22
    712c:	80 83       	st	Z, r24
    712e:	fd 01       	movw	r30, r26
    7130:	31 96       	adiw	r30, 0x01	; 1
    7132:	90 5d       	subi	r25, 0xD0	; 208
    7134:	9c 93       	st	X, r25
    7136:	10 82       	st	Z, r1
    7138:	cf 01       	movw	r24, r30
    713a:	08 95       	ret

0000713c <putChar_long>:
    713c:	ac 01       	movw	r20, r24
    713e:	fb 01       	movw	r30, r22
    7140:	34 96       	adiw	r30, 0x04	; 4
    7142:	db 01       	movw	r26, r22
    7144:	14 96       	adiw	r26, 0x04	; 4
    7146:	1c 92       	st	X, r1
    7148:	20 e0       	ldi	r18, 0x00	; 0
    714a:	10 c0       	rjmp	.+32     	; 0x716c <putChar_long+0x30>
    714c:	94 2f       	mov	r25, r20
    714e:	9f 70       	andi	r25, 0x0F	; 15
    7150:	31 97       	sbiw	r30, 0x01	; 1
    7152:	9a 30       	cpi	r25, 0x0A	; 10
    7154:	10 f0       	brcs	.+4      	; 0x715a <putChar_long+0x1e>
    7156:	99 5c       	subi	r25, 0xC9	; 201
    7158:	01 c0       	rjmp	.+2      	; 0x715c <putChar_long+0x20>
    715a:	90 5d       	subi	r25, 0xD0	; 208
    715c:	90 83       	st	Z, r25
    715e:	52 95       	swap	r21
    7160:	42 95       	swap	r20
    7162:	4f 70       	andi	r20, 0x0F	; 15
    7164:	45 27       	eor	r20, r21
    7166:	5f 70       	andi	r21, 0x0F	; 15
    7168:	45 27       	eor	r20, r21
    716a:	2f 5f       	subi	r18, 0xFF	; 255
    716c:	24 30       	cpi	r18, 0x04	; 4
    716e:	70 f3       	brcs	.-36     	; 0x714c <putChar_long+0x10>
    7170:	cf 01       	movw	r24, r30
    7172:	04 96       	adiw	r24, 0x04	; 4
    7174:	08 95       	ret

00007176 <putChar_Note>:
    7176:	88 23       	and	r24, r24
    7178:	8c f4       	brge	.+34     	; 0x719c <putChar_Note+0x26>
    717a:	8d e2       	ldi	r24, 0x2D	; 45
    717c:	db 01       	movw	r26, r22
    717e:	8c 93       	st	X, r24
    7180:	9e e6       	ldi	r25, 0x6E	; 110
    7182:	11 96       	adiw	r26, 0x01	; 1
    7184:	9c 93       	st	X, r25
    7186:	11 97       	sbiw	r26, 0x01	; 1
    7188:	12 96       	adiw	r26, 0x02	; 2
    718a:	8c 93       	st	X, r24
    718c:	12 97       	sbiw	r26, 0x02	; 2
    718e:	14 96       	adiw	r26, 0x04	; 4
    7190:	fb 01       	movw	r30, r22
    7192:	13 82       	std	Z+3, r1	; 0x03
    7194:	49 c0       	rjmp	.+146    	; 0x7228 <putChar_Note+0xb2>
    7196:	8c 50       	subi	r24, 0x0C	; 12
    7198:	9f 5f       	subi	r25, 0xFF	; 255
    719a:	01 c0       	rjmp	.+2      	; 0x719e <putChar_Note+0x28>
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	8c 30       	cpi	r24, 0x0C	; 12
    71a0:	d0 f7       	brcc	.-12     	; 0x7196 <putChar_Note+0x20>
    71a2:	8b 30       	cpi	r24, 0x0B	; 11
    71a4:	39 f4       	brne	.+14     	; 0x71b4 <putChar_Note+0x3e>
    71a6:	fb 01       	movw	r30, r22
    71a8:	31 96       	adiw	r30, 0x01	; 1
    71aa:	88 e4       	ldi	r24, 0x48	; 72
    71ac:	db 01       	movw	r26, r22
    71ae:	8c 93       	st	X, r24
    71b0:	8f e5       	ldi	r24, 0x5F	; 95
    71b2:	27 c0       	rjmp	.+78     	; 0x7202 <putChar_Note+0x8c>
    71b4:	85 30       	cpi	r24, 0x05	; 5
    71b6:	58 f4       	brcc	.+22     	; 0x71ce <putChar_Note+0x58>
    71b8:	fb 01       	movw	r30, r22
    71ba:	31 96       	adiw	r30, 0x01	; 1
    71bc:	28 2f       	mov	r18, r24
    71be:	26 95       	lsr	r18
    71c0:	2d 5b       	subi	r18, 0xBD	; 189
    71c2:	db 01       	movw	r26, r22
    71c4:	2c 93       	st	X, r18
    71c6:	80 fd       	sbrc	r24, 0
    71c8:	19 c0       	rjmp	.+50     	; 0x71fc <putChar_Note+0x86>
    71ca:	8f e5       	ldi	r24, 0x5F	; 95
    71cc:	1a c0       	rjmp	.+52     	; 0x7202 <putChar_Note+0x8c>
    71ce:	89 30       	cpi	r24, 0x09	; 9
    71d0:	30 f0       	brcs	.+12     	; 0x71de <putChar_Note+0x68>
    71d2:	fb 01       	movw	r30, r22
    71d4:	31 96       	adiw	r30, 0x01	; 1
    71d6:	21 e4       	ldi	r18, 0x41	; 65
    71d8:	db 01       	movw	r26, r22
    71da:	2c 93       	st	X, r18
    71dc:	0b c0       	rjmp	.+22     	; 0x71f4 <putChar_Note+0x7e>
    71de:	fb 01       	movw	r30, r22
    71e0:	31 96       	adiw	r30, 0x01	; 1
    71e2:	28 2f       	mov	r18, r24
    71e4:	30 e0       	ldi	r19, 0x00	; 0
    71e6:	25 50       	subi	r18, 0x05	; 5
    71e8:	31 09       	sbc	r19, r1
    71ea:	35 95       	asr	r19
    71ec:	27 95       	ror	r18
    71ee:	2a 5b       	subi	r18, 0xBA	; 186
    71f0:	db 01       	movw	r26, r22
    71f2:	2c 93       	st	X, r18
    71f4:	80 ff       	sbrs	r24, 0
    71f6:	04 c0       	rjmp	.+8      	; 0x7200 <putChar_Note+0x8a>
    71f8:	8f e5       	ldi	r24, 0x5F	; 95
    71fa:	03 c0       	rjmp	.+6      	; 0x7202 <putChar_Note+0x8c>
    71fc:	83 e2       	ldi	r24, 0x23	; 35
    71fe:	01 c0       	rjmp	.+2      	; 0x7202 <putChar_Note+0x8c>
    7200:	83 e2       	ldi	r24, 0x23	; 35
    7202:	80 83       	st	Z, r24
    7204:	91 11       	cpse	r25, r1
    7206:	05 c0       	rjmp	.+10     	; 0x7212 <putChar_Note+0x9c>
    7208:	df 01       	movw	r26, r30
    720a:	12 96       	adiw	r26, 0x02	; 2
    720c:	8d e6       	ldi	r24, 0x6D	; 109
    720e:	81 83       	std	Z+1, r24	; 0x01
    7210:	0b c0       	rjmp	.+22     	; 0x7228 <putChar_Note+0xb2>
    7212:	9c 30       	cpi	r25, 0x0C	; 12
    7214:	28 f4       	brcc	.+10     	; 0x7220 <putChar_Note+0xaa>
    7216:	df 01       	movw	r26, r30
    7218:	12 96       	adiw	r26, 0x02	; 2
    721a:	91 5d       	subi	r25, 0xD1	; 209
    721c:	91 83       	std	Z+1, r25	; 0x01
    721e:	04 c0       	rjmp	.+8      	; 0x7228 <putChar_Note+0xb2>
    7220:	df 01       	movw	r26, r30
    7222:	12 96       	adiw	r26, 0x02	; 2
    7224:	8d e2       	ldi	r24, 0x2D	; 45
    7226:	81 83       	std	Z+1, r24	; 0x01
    7228:	1c 92       	st	X, r1
    722a:	cd 01       	movw	r24, r26
    722c:	08 95       	ret

0000722e <putChar_Manual>:
    722e:	83 30       	cpi	r24, 0x03	; 3
    7230:	38 f4       	brcc	.+14     	; 0x7240 <putChar_Manual+0x12>
    7232:	fb 01       	movw	r30, r22
    7234:	31 96       	adiw	r30, 0x01	; 1
    7236:	93 e3       	ldi	r25, 0x33	; 51
    7238:	98 1b       	sub	r25, r24
    723a:	db 01       	movw	r26, r22
    723c:	9c 93       	st	X, r25
    723e:	0d c0       	rjmp	.+26     	; 0x725a <putChar_Manual+0x2c>
    7240:	83 30       	cpi	r24, 0x03	; 3
    7242:	31 f4       	brne	.+12     	; 0x7250 <putChar_Manual+0x22>
    7244:	fb 01       	movw	r30, r22
    7246:	31 96       	adiw	r30, 0x01	; 1
    7248:	80 e5       	ldi	r24, 0x50	; 80
    724a:	db 01       	movw	r26, r22
    724c:	8c 93       	st	X, r24
    724e:	05 c0       	rjmp	.+10     	; 0x725a <putChar_Manual+0x2c>
    7250:	fb 01       	movw	r30, r22
    7252:	31 96       	adiw	r30, 0x01	; 1
    7254:	8d e2       	ldi	r24, 0x2D	; 45
    7256:	db 01       	movw	r26, r22
    7258:	8c 93       	st	X, r24
    725a:	10 82       	st	Z, r1
    725c:	cf 01       	movw	r24, r30
    725e:	08 95       	ret

00007260 <putString_P>:
    7260:	fc 01       	movw	r30, r24
    7262:	db 01       	movw	r26, r22
    7264:	20 e0       	ldi	r18, 0x00	; 0
    7266:	02 c0       	rjmp	.+4      	; 0x726c <putString_P+0xc>
    7268:	28 2f       	mov	r18, r24
    726a:	da 01       	movw	r26, r20
    726c:	94 91       	lpm	r25, Z
    726e:	99 23       	and	r25, r25
    7270:	51 f0       	breq	.+20     	; 0x7286 <putString_P+0x26>
    7272:	ad 01       	movw	r20, r26
    7274:	4f 5f       	subi	r20, 0xFF	; 255
    7276:	5f 4f       	sbci	r21, 0xFF	; 255
    7278:	31 96       	adiw	r30, 0x01	; 1
    727a:	9c 93       	st	X, r25
    727c:	81 e0       	ldi	r24, 0x01	; 1
    727e:	82 0f       	add	r24, r18
    7280:	24 31       	cpi	r18, 0x14	; 20
    7282:	90 f3       	brcs	.-28     	; 0x7268 <putString_P+0x8>
    7284:	01 c0       	rjmp	.+2      	; 0x7288 <putString_P+0x28>
    7286:	ad 01       	movw	r20, r26
    7288:	ca 01       	movw	r24, r20
    728a:	08 95       	ret

0000728c <lcd_wordout>:
    728c:	cf 93       	push	r28
    728e:	c8 2f       	mov	r28, r24
    7290:	89 2f       	mov	r24, r25
    7292:	80 de       	rcall	.-768    	; 0x6f94 <lcd_hexout>
    7294:	8c 2f       	mov	r24, r28
    7296:	7e de       	rcall	.-772    	; 0x6f94 <lcd_hexout>
    7298:	cf 91       	pop	r28
    729a:	08 95       	ret

0000729c <lcd_noteOut>:
    729c:	cf 93       	push	r28
    729e:	df 93       	push	r29
    72a0:	88 23       	and	r24, r24
    72a2:	e4 f1       	brlt	.+120    	; 0x731c <lcd_noteOut+0x80>
    72a4:	90 e0       	ldi	r25, 0x00	; 0
    72a6:	02 c0       	rjmp	.+4      	; 0x72ac <lcd_noteOut+0x10>
    72a8:	9f 5f       	subi	r25, 0xFF	; 255
    72aa:	8c 50       	subi	r24, 0x0C	; 12
    72ac:	8c 30       	cpi	r24, 0x0C	; 12
    72ae:	e0 f7       	brcc	.-8      	; 0x72a8 <lcd_noteOut+0xc>
    72b0:	48 2f       	mov	r20, r24
    72b2:	50 e0       	ldi	r21, 0x00	; 0
    72b4:	4c 30       	cpi	r20, 0x0C	; 12
    72b6:	51 05       	cpc	r21, r1
    72b8:	30 f4       	brcc	.+12     	; 0x72c6 <lcd_noteOut+0x2a>
    72ba:	fa 01       	movw	r30, r20
    72bc:	88 27       	eor	r24, r24
    72be:	ea 55       	subi	r30, 0x5A	; 90
    72c0:	ff 4f       	sbci	r31, 0xFF	; 255
    72c2:	8f 4f       	sbci	r24, 0xFF	; 255
    72c4:	5d c1       	rjmp	.+698    	; 0x7580 <__tablejump2__>
    72c6:	d3 e2       	ldi	r29, 0x23	; 35
    72c8:	80 e2       	ldi	r24, 0x20	; 32
    72ca:	23 c0       	rjmp	.+70     	; 0x7312 <lcd_noteOut+0x76>
    72cc:	d3 e2       	ldi	r29, 0x23	; 35
    72ce:	84 e4       	ldi	r24, 0x44	; 68
    72d0:	20 c0       	rjmp	.+64     	; 0x7312 <lcd_noteOut+0x76>
    72d2:	d3 e2       	ldi	r29, 0x23	; 35
    72d4:	86 e4       	ldi	r24, 0x46	; 70
    72d6:	1d c0       	rjmp	.+58     	; 0x7312 <lcd_noteOut+0x76>
    72d8:	d3 e2       	ldi	r29, 0x23	; 35
    72da:	87 e4       	ldi	r24, 0x47	; 71
    72dc:	1a c0       	rjmp	.+52     	; 0x7312 <lcd_noteOut+0x76>
    72de:	d3 e2       	ldi	r29, 0x23	; 35
    72e0:	81 e4       	ldi	r24, 0x41	; 65
    72e2:	17 c0       	rjmp	.+46     	; 0x7312 <lcd_noteOut+0x76>
    72e4:	d5 ea       	ldi	r29, 0xA5	; 165
    72e6:	83 e4       	ldi	r24, 0x43	; 67
    72e8:	14 c0       	rjmp	.+40     	; 0x7312 <lcd_noteOut+0x76>
    72ea:	d5 ea       	ldi	r29, 0xA5	; 165
    72ec:	84 e4       	ldi	r24, 0x44	; 68
    72ee:	11 c0       	rjmp	.+34     	; 0x7312 <lcd_noteOut+0x76>
    72f0:	d5 ea       	ldi	r29, 0xA5	; 165
    72f2:	85 e4       	ldi	r24, 0x45	; 69
    72f4:	0e c0       	rjmp	.+28     	; 0x7312 <lcd_noteOut+0x76>
    72f6:	d5 ea       	ldi	r29, 0xA5	; 165
    72f8:	86 e4       	ldi	r24, 0x46	; 70
    72fa:	0b c0       	rjmp	.+22     	; 0x7312 <lcd_noteOut+0x76>
    72fc:	d5 ea       	ldi	r29, 0xA5	; 165
    72fe:	87 e4       	ldi	r24, 0x47	; 71
    7300:	08 c0       	rjmp	.+16     	; 0x7312 <lcd_noteOut+0x76>
    7302:	d5 ea       	ldi	r29, 0xA5	; 165
    7304:	81 e4       	ldi	r24, 0x41	; 65
    7306:	05 c0       	rjmp	.+10     	; 0x7312 <lcd_noteOut+0x76>
    7308:	d5 ea       	ldi	r29, 0xA5	; 165
    730a:	88 e4       	ldi	r24, 0x48	; 72
    730c:	02 c0       	rjmp	.+4      	; 0x7312 <lcd_noteOut+0x76>
    730e:	d3 e2       	ldi	r29, 0x23	; 35
    7310:	83 e4       	ldi	r24, 0x43	; 67
    7312:	99 23       	and	r25, r25
    7314:	39 f0       	breq	.+14     	; 0x7324 <lcd_noteOut+0x88>
    7316:	cf e2       	ldi	r28, 0x2F	; 47
    7318:	c9 0f       	add	r28, r25
    731a:	05 c0       	rjmp	.+10     	; 0x7326 <lcd_noteOut+0x8a>
    731c:	cd e2       	ldi	r28, 0x2D	; 45
    731e:	dd e2       	ldi	r29, 0x2D	; 45
    7320:	8d e2       	ldi	r24, 0x2D	; 45
    7322:	01 c0       	rjmp	.+2      	; 0x7326 <lcd_noteOut+0x8a>
    7324:	cd e2       	ldi	r28, 0x2D	; 45
    7326:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    732a:	8d 2f       	mov	r24, r29
    732c:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    7330:	8c 2f       	mov	r24, r28
    7332:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    7336:	83 e0       	ldi	r24, 0x03	; 3
    7338:	df 91       	pop	r29
    733a:	cf 91       	pop	r28
    733c:	08 95       	ret

0000733e <lcd_ChannelOut>:
    733e:	cf 93       	push	r28
    7340:	c8 2f       	mov	r28, r24
    7342:	cf 70       	andi	r28, 0x0F	; 15
    7344:	81 e0       	ldi	r24, 0x01	; 1
    7346:	8c 0f       	add	r24, r28
    7348:	8a 30       	cpi	r24, 0x0A	; 10
    734a:	28 f0       	brcs	.+10     	; 0x7356 <lcd_ChannelOut+0x18>
    734c:	81 e3       	ldi	r24, 0x31	; 49
    734e:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    7352:	87 ef       	ldi	r24, 0xF7	; 247
    7354:	8c 0f       	add	r24, r28
    7356:	80 5d       	subi	r24, 0xD0	; 208
    7358:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    735c:	cf 91       	pop	r28
    735e:	08 95       	ret

00007360 <lcd_ManualOutDec>:
    7360:	84 30       	cpi	r24, 0x04	; 4
    7362:	20 f0       	brcs	.+8      	; 0x736c <lcd_ManualOutDec+0xc>
    7364:	8d e2       	ldi	r24, 0x2D	; 45
    7366:	0c 94 cd 12 	jmp	0x259a	; 0x259a <lcd_putc>
    736a:	08 95       	ret
    736c:	83 30       	cpi	r24, 0x03	; 3
    736e:	21 f4       	brne	.+8      	; 0x7378 <lcd_ManualOutDec+0x18>
    7370:	80 e5       	ldi	r24, 0x50	; 80
    7372:	0c 94 cd 12 	jmp	0x259a	; 0x259a <lcd_putc>
    7376:	08 95       	ret
    7378:	93 e3       	ldi	r25, 0x33	; 51
    737a:	98 1b       	sub	r25, r24
    737c:	89 2f       	mov	r24, r25
    737e:	0c 94 cd 12 	jmp	0x259a	; 0x259a <lcd_putc>
    7382:	08 95       	ret

00007384 <lcd_blank>:
    7384:	cf 93       	push	r28
    7386:	04 c0       	rjmp	.+8      	; 0x7390 <lcd_blank+0xc>
    7388:	80 e2       	ldi	r24, 0x20	; 32
    738a:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    738e:	8c 2f       	mov	r24, r28
    7390:	cf ef       	ldi	r28, 0xFF	; 255
    7392:	c8 0f       	add	r28, r24
    7394:	81 11       	cpse	r24, r1
    7396:	f8 cf       	rjmp	.-16     	; 0x7388 <lcd_blank+0x4>
    7398:	cf 91       	pop	r28
    739a:	08 95       	ret

0000739c <lcd_clrEol>:
    739c:	cf 93       	push	r28
    739e:	90 e0       	ldi	r25, 0x00	; 0
    73a0:	04 c0       	rjmp	.+8      	; 0x73aa <lcd_clrEol+0xe>
    73a2:	80 e2       	ldi	r24, 0x20	; 32
    73a4:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    73a8:	9c 2f       	mov	r25, r28
    73aa:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    73ae:	84 31       	cpi	r24, 0x14	; 20
    73b0:	51 f0       	breq	.+20     	; 0x73c6 <lcd_clrEol+0x2a>
    73b2:	84 35       	cpi	r24, 0x54	; 84
    73b4:	41 f0       	breq	.+16     	; 0x73c6 <lcd_clrEol+0x2a>
    73b6:	88 32       	cpi	r24, 0x28	; 40
    73b8:	31 f0       	breq	.+12     	; 0x73c6 <lcd_clrEol+0x2a>
    73ba:	88 36       	cpi	r24, 0x68	; 104
    73bc:	21 f0       	breq	.+8      	; 0x73c6 <lcd_clrEol+0x2a>
    73be:	c1 e0       	ldi	r28, 0x01	; 1
    73c0:	c9 0f       	add	r28, r25
    73c2:	94 31       	cpi	r25, 0x14	; 20
    73c4:	70 f3       	brcs	.-36     	; 0x73a2 <lcd_clrEol+0x6>
    73c6:	cf 91       	pop	r28
    73c8:	08 95       	ret

000073ca <lcd_cursosblink>:
    73ca:	8d e0       	ldi	r24, 0x0D	; 13
    73cc:	0e 94 19 12 	call	0x2432	; 0x2432 <lcd_write_command>
    73d0:	8f ef       	ldi	r24, 0xFF	; 255
    73d2:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <lcd_cursorIsOn>
    73d6:	08 95       	ret

000073d8 <lcd_cursoroff>:
    73d8:	8c e0       	ldi	r24, 0x0C	; 12
    73da:	0e 94 19 12 	call	0x2432	; 0x2432 <lcd_write_command>
    73de:	10 92 d7 18 	sts	0x18D7, r1	; 0x8018d7 <lcd_cursorIsOn>
    73e2:	08 95       	ret

000073e4 <lcd_waitSymbolOn>:
    73e4:	cf 93       	push	r28
    73e6:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    73ea:	8c e0       	ldi	r24, 0x0C	; 12
    73ec:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    73f0:	81 ea       	ldi	r24, 0xA1	; 161
    73f2:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    73f6:	8c 2f       	mov	r24, r28
    73f8:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    73fc:	cf 91       	pop	r28
    73fe:	08 95       	ret

00007400 <lcd_waitSymbolOff>:
    7400:	cf 93       	push	r28
    7402:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7406:	8c e0       	ldi	r24, 0x0C	; 12
    7408:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    740c:	80 e2       	ldi	r24, 0x20	; 32
    740e:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>
    7412:	8c 2f       	mov	r24, r28
    7414:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
    7418:	cf 91       	pop	r28
    741a:	08 95       	ret

0000741c <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    741c:	84 30       	cpi	r24, 0x04	; 4
    741e:	28 f0       	brcs	.+10     	; 0x742a <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    7420:	20 e0       	ldi	r18, 0x00	; 0
    7422:	0d c0       	rjmp	.+26     	; 0x743e <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    7424:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    7426:	fa 01       	movw	r30, r20
    7428:	02 c0       	rjmp	.+4      	; 0x742e <keylabel_set+0x12>
    742a:	fb 01       	movw	r30, r22
    742c:	20 e0       	ldi	r18, 0x00	; 0
    742e:	af 01       	movw	r20, r30
    7430:	4f 5f       	subi	r20, 0xFF	; 255
    7432:	5f 4f       	sbci	r21, 0xFF	; 255
    7434:	94 91       	lpm	r25, Z
    7436:	99 23       	and	r25, r25
    7438:	11 f0       	breq	.+4      	; 0x743e <keylabel_set+0x22>
    743a:	25 30       	cpi	r18, 0x05	; 5
    743c:	98 f3       	brcs	.-26     	; 0x7424 <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    743e:	90 e0       	ldi	r25, 0x00	; 0
    7440:	dc 01       	movw	r26, r24
    7442:	aa 0f       	add	r26, r26
    7444:	bb 1f       	adc	r27, r27
    7446:	aa 0f       	add	r26, r26
    7448:	bb 1f       	adc	r27, r27
    744a:	8a 0f       	add	r24, r26
    744c:	9b 1f       	adc	r25, r27
    744e:	dc 01       	movw	r26, r24
    7450:	af 5e       	subi	r26, 0xEF	; 239
    7452:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    7454:	45 e0       	ldi	r20, 0x05	; 5
    7456:	50 e0       	ldi	r21, 0x00	; 0
    7458:	42 1b       	sub	r20, r18
    745a:	51 09       	sbc	r21, r1
    745c:	ca 01       	movw	r24, r20
    745e:	99 23       	and	r25, r25
    7460:	0c f4       	brge	.+2      	; 0x7464 <keylabel_set+0x48>
    7462:	01 96       	adiw	r24, 0x01	; 1
    7464:	95 95       	asr	r25
    7466:	87 95       	ror	r24
    7468:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    746a:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    746c:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    746e:	0e c0       	rjmp	.+28     	; 0x748c <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7470:	93 17       	cp	r25, r19
    7472:	10 f0       	brcs	.+4      	; 0x7478 <keylabel_set+0x5c>
    7474:	98 17       	cp	r25, r24
    7476:	18 f0       	brcs	.+6      	; 0x747e <keylabel_set+0x62>
			*charBufPtr = ' ';
    7478:	20 e2       	ldi	r18, 0x20	; 32
    747a:	2c 93       	st	X, r18
    747c:	05 c0       	rjmp	.+10     	; 0x7488 <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    747e:	fb 01       	movw	r30, r22
    7480:	24 91       	lpm	r18, Z
    7482:	2c 93       	st	X, r18
    7484:	6f 5f       	subi	r22, 0xFF	; 255
    7486:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    7488:	11 96       	adiw	r26, 0x01	; 1
		i++;
    748a:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    748c:	95 30       	cpi	r25, 0x05	; 5
    748e:	80 f3       	brcs	.-32     	; 0x7470 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7490:	08 95       	ret

00007492 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7492:	90 e0       	ldi	r25, 0x00	; 0
    7494:	fc 01       	movw	r30, r24
    7496:	ee 0f       	add	r30, r30
    7498:	ff 1f       	adc	r31, r31
    749a:	ee 0f       	add	r30, r30
    749c:	ff 1f       	adc	r31, r31
    749e:	8e 0f       	add	r24, r30
    74a0:	9f 1f       	adc	r25, r31
    74a2:	fc 01       	movw	r30, r24
    74a4:	ef 5e       	subi	r30, 0xEF	; 239
    74a6:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    74a8:	80 e0       	ldi	r24, 0x00	; 0
    74aa:	04 c0       	rjmp	.+8      	; 0x74b4 <keylabel_clr+0x22>
		*charPtr++ = ' ';
    74ac:	90 e2       	ldi	r25, 0x20	; 32
    74ae:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    74b0:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    74b2:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    74b4:	85 30       	cpi	r24, 0x05	; 5
    74b6:	d0 f3       	brcs	.-12     	; 0x74ac <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    74b8:	08 95       	ret

000074ba <keylabel_toLCD>:

void keylabel_toLCD(){
    74ba:	0f 93       	push	r16
    74bc:	1f 93       	push	r17
    74be:	cf 93       	push	r28
    74c0:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    74c2:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    74c6:	84 e5       	ldi	r24, 0x54	; 84
    74c8:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    74cc:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    74ce:	e1 e1       	ldi	r30, 0x11	; 17
    74d0:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    74d2:	08 c0       	rjmp	.+16     	; 0x74e4 <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    74d4:	8f 01       	movw	r16, r30
    74d6:	0f 5f       	subi	r16, 0xFF	; 255
    74d8:	1f 4f       	sbci	r17, 0xFF	; 255
    74da:	80 81       	ld	r24, Z
    74dc:	0e 94 cd 12 	call	0x259a	; 0x259a <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    74e0:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    74e2:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    74e4:	c4 31       	cpi	r28, 0x14	; 20
    74e6:	b0 f3       	brcs	.-20     	; 0x74d4 <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    74e8:	8d 2f       	mov	r24, r29
    74ea:	0e 94 a3 12 	call	0x2546	; 0x2546 <lcd_goto>
}
    74ee:	df 91       	pop	r29
    74f0:	cf 91       	pop	r28
    74f2:	1f 91       	pop	r17
    74f4:	0f 91       	pop	r16
    74f6:	08 95       	ret

000074f8 <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    74f8:	90 e0       	ldi	r25, 0x00	; 0
    74fa:	fc 01       	movw	r30, r24
    74fc:	ee 0f       	add	r30, r30
    74fe:	ff 1f       	adc	r31, r31
    7500:	ee 0f       	add	r30, r30
    7502:	ff 1f       	adc	r31, r31
    7504:	8e 0f       	add	r24, r30
    7506:	9f 1f       	adc	r25, r31
    7508:	fc 01       	movw	r30, r24
    750a:	ef 5e       	subi	r30, 0xEF	; 239
    750c:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    750e:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7510:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7512:	12 c0       	rjmp	.+36     	; 0x7538 <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    7514:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    7516:	61 11       	cpse	r22, r1
    7518:	06 c0       	rjmp	.+12     	; 0x7526 <keylabel_statcheck+0x2e>
    751a:	2a 30       	cpi	r18, 0x0A	; 10
    751c:	21 f4       	brne	.+8      	; 0x7526 <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    751e:	80 e8       	ldi	r24, 0x80	; 128
    7520:	80 83       	st	Z, r24
			result = 0xFF;
    7522:	8f ef       	ldi	r24, 0xFF	; 255
    7524:	07 c0       	rjmp	.+14     	; 0x7534 <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    7526:	66 23       	and	r22, r22
    7528:	29 f0       	breq	.+10     	; 0x7534 <keylabel_statcheck+0x3c>
    752a:	20 38       	cpi	r18, 0x80	; 128
    752c:	19 f4       	brne	.+6      	; 0x7534 <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    752e:	8a e0       	ldi	r24, 0x0A	; 10
    7530:	80 83       	st	Z, r24
			result = 0xFF;
    7532:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    7534:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7536:	9f 5f       	subi	r25, 0xFF	; 255
    7538:	95 30       	cpi	r25, 0x05	; 5
    753a:	60 f3       	brcs	.-40     	; 0x7514 <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    753c:	08 95       	ret

0000753e <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    753e:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7540:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7542:	94 91       	lpm	r25, Z
    7544:	99 23       	and	r25, r25
    7546:	21 f0       	breq	.+8      	; 0x7550 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    7548:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    754a:	8f 5f       	subi	r24, 0xFF	; 255
    754c:	80 32       	cpi	r24, 0x20	; 32
    754e:	c8 f3       	brcs	.-14     	; 0x7542 <get_StrLenP+0x4>
	return result;
}
    7550:	08 95       	ret

00007552 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7552:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7554:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7556:	90 81       	ld	r25, Z
    7558:	99 23       	and	r25, r25
    755a:	21 f0       	breq	.+8      	; 0x7564 <get_StrLen+0x12>
			return result;
		}
		pString++;
    755c:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    755e:	8f 5f       	subi	r24, 0xFF	; 255
    7560:	80 32       	cpi	r24, 0x20	; 32
    7562:	c8 f3       	brcs	.-14     	; 0x7556 <get_StrLen+0x4>
	return result;
}
    7564:	08 95       	ret

00007566 <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    7566:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7568:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    756a:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    756c:	06 c0       	rjmp	.+12     	; 0x757a <reverse_Bits+0x14>
		result = result << 1;
    756e:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7570:	32 2f       	mov	r19, r18
    7572:	31 70       	andi	r19, 0x01	; 1
    7574:	83 2b       	or	r24, r19
		val = val >> 1;
    7576:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    7578:	9f 5f       	subi	r25, 0xFF	; 255
    757a:	98 30       	cpi	r25, 0x08	; 8
    757c:	c0 f3       	brcs	.-16     	; 0x756e <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    757e:	08 95       	ret

00007580 <__tablejump2__>:
    7580:	ee 0f       	add	r30, r30
    7582:	ff 1f       	adc	r31, r31
    7584:	88 1f       	adc	r24, r24
    7586:	8b bf       	out	0x3b, r24	; 59
    7588:	07 90       	elpm	r0, Z+
    758a:	f6 91       	elpm	r31, Z
    758c:	e0 2d       	mov	r30, r0
    758e:	19 94       	eijmp

00007590 <eeprom_read_block>:
    7590:	dc 01       	movw	r26, r24
    7592:	cb 01       	movw	r24, r22

00007594 <eeprom_read_blraw>:
    7594:	fc 01       	movw	r30, r24
    7596:	f9 99       	sbic	0x1f, 1	; 31
    7598:	fe cf       	rjmp	.-4      	; 0x7596 <eeprom_read_blraw+0x2>
    759a:	06 c0       	rjmp	.+12     	; 0x75a8 <eeprom_read_blraw+0x14>
    759c:	f2 bd       	out	0x22, r31	; 34
    759e:	e1 bd       	out	0x21, r30	; 33
    75a0:	f8 9a       	sbi	0x1f, 0	; 31
    75a2:	31 96       	adiw	r30, 0x01	; 1
    75a4:	00 b4       	in	r0, 0x20	; 32
    75a6:	0d 92       	st	X+, r0
    75a8:	41 50       	subi	r20, 0x01	; 1
    75aa:	50 40       	sbci	r21, 0x00	; 0
    75ac:	b8 f7       	brcc	.-18     	; 0x759c <eeprom_read_blraw+0x8>
    75ae:	08 95       	ret

000075b0 <eeprom_read_byte>:
    75b0:	f9 99       	sbic	0x1f, 1	; 31
    75b2:	fe cf       	rjmp	.-4      	; 0x75b0 <eeprom_read_byte>
    75b4:	92 bd       	out	0x22, r25	; 34
    75b6:	81 bd       	out	0x21, r24	; 33
    75b8:	f8 9a       	sbi	0x1f, 0	; 31
    75ba:	99 27       	eor	r25, r25
    75bc:	80 b5       	in	r24, 0x20	; 32
    75be:	08 95       	ret

000075c0 <eeprom_read_word>:
    75c0:	a8 e1       	ldi	r26, 0x18	; 24
    75c2:	b0 e0       	ldi	r27, 0x00	; 0
    75c4:	42 e0       	ldi	r20, 0x02	; 2
    75c6:	50 e0       	ldi	r21, 0x00	; 0
    75c8:	e5 cf       	rjmp	.-54     	; 0x7594 <eeprom_read_blraw>

000075ca <eeprom_update_block>:
    75ca:	dc 01       	movw	r26, r24
    75cc:	a4 0f       	add	r26, r20
    75ce:	b5 1f       	adc	r27, r21
    75d0:	41 50       	subi	r20, 0x01	; 1
    75d2:	50 40       	sbci	r21, 0x00	; 0
    75d4:	40 f0       	brcs	.+16     	; 0x75e6 <eeprom_update_block+0x1c>
    75d6:	cb 01       	movw	r24, r22
    75d8:	84 0f       	add	r24, r20
    75da:	95 1f       	adc	r25, r21
    75dc:	2e 91       	ld	r18, -X
    75de:	05 d0       	rcall	.+10     	; 0x75ea <eeprom_update_r18>
    75e0:	41 50       	subi	r20, 0x01	; 1
    75e2:	50 40       	sbci	r21, 0x00	; 0
    75e4:	d8 f7       	brcc	.-10     	; 0x75dc <eeprom_update_block+0x12>
    75e6:	08 95       	ret

000075e8 <eeprom_update_byte>:
    75e8:	26 2f       	mov	r18, r22

000075ea <eeprom_update_r18>:
    75ea:	f9 99       	sbic	0x1f, 1	; 31
    75ec:	fe cf       	rjmp	.-4      	; 0x75ea <eeprom_update_r18>
    75ee:	92 bd       	out	0x22, r25	; 34
    75f0:	81 bd       	out	0x21, r24	; 33
    75f2:	f8 9a       	sbi	0x1f, 0	; 31
    75f4:	01 97       	sbiw	r24, 0x01	; 1
    75f6:	00 b4       	in	r0, 0x20	; 32
    75f8:	02 16       	cp	r0, r18
    75fa:	39 f0       	breq	.+14     	; 0x760a <eeprom_update_r18+0x20>
    75fc:	1f ba       	out	0x1f, r1	; 31
    75fe:	20 bd       	out	0x20, r18	; 32
    7600:	0f b6       	in	r0, 0x3f	; 63
    7602:	f8 94       	cli
    7604:	fa 9a       	sbi	0x1f, 2	; 31
    7606:	f9 9a       	sbi	0x1f, 1	; 31
    7608:	0f be       	out	0x3f, r0	; 63
    760a:	08 95       	ret

0000760c <eeprom_update_word>:
    760c:	01 96       	adiw	r24, 0x01	; 1
    760e:	27 2f       	mov	r18, r23
    7610:	ec df       	rcall	.-40     	; 0x75ea <eeprom_update_r18>
    7612:	ea cf       	rjmp	.-44     	; 0x75e8 <eeprom_update_byte>

00007614 <_exit>:
    7614:	f8 94       	cli

00007616 <__stop_program>:
    7616:	ff cf       	rjmp	.-2      	; 0x7616 <__stop_program>
