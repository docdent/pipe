
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000795e  00007a12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000795e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001719  00800208  00800208  00007a1a  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  00007a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00008a1a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00008a4c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000b18  00000000  00000000  00008a90  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ed9b  00000000  00000000  000095a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000263a  00000000  00000000  00018343  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00008c73  00000000  00000000  0001a97d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001b90  00000000  00000000  000235f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003405  00000000  00000000  00025180  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009837  00000000  00000000  00028585  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ed0  00000000  00000000  00031dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__ctors_end>
       4:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
       8:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
       c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      10:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      14:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      18:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      1c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      20:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      24:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      28:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      2c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      30:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      34:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      38:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      3c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      40:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      44:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      48:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      4c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      50:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      54:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__vector_21>
      58:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      5c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      60:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      64:	0c 94 90 37 	jmp	0x6f20	; 0x6f20 <__vector_25>
      68:	0c 94 d6 37 	jmp	0x6fac	; 0x6fac <__vector_26>
      6c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      70:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      74:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      78:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      7c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      80:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      84:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      88:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      8c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      90:	0c 94 a3 35 	jmp	0x6b46	; 0x6b46 <__vector_36>
      94:	0c 94 f8 35 	jmp	0x6bf0	; 0x6bf0 <__vector_37>
      98:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      9c:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      a0:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      a4:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      a8:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      ac:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      b0:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      b4:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      b8:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      bc:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      c0:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      c4:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      c8:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      cc:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      d0:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      d4:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      d8:	0c 94 96 38 	jmp	0x712c	; 0x712c <__vector_54>
      dc:	0c 94 ee 38 	jmp	0x71dc	; 0x71dc <__vector_55>
      e0:	0c 94 84 09 	jmp	0x1308	; 0x1308 <__bad_interrupt>
      e4:	42 1f       	adc	r20, r18
      e6:	4d 1f       	adc	r20, r29
      e8:	59 1f       	adc	r21, r25
      ea:	75 1f       	adc	r23, r21
      ec:	92 1f       	adc	r25, r18
      ee:	b3 1f       	adc	r27, r19
      f0:	be 1f       	adc	r27, r30
      f2:	c9 1f       	adc	r28, r25
      f4:	de 1f       	adc	r29, r30
      f6:	f4 1f       	adc	r31, r20
      f8:	fc 1f       	adc	r31, r28
      fa:	0a 20       	and	r0, r10
      fc:	de 1f       	adc	r29, r30
      fe:	37 20       	and	r3, r7
     100:	47 20       	and	r4, r7
     102:	6b 20       	and	r6, r11
     104:	bd 20       	and	r11, r13
     106:	d6 20       	and	r13, r6
     108:	eb 20       	and	r14, r11
     10a:	04 21       	and	r16, r4
     10c:	0c 21       	and	r16, r12
     10e:	31 21       	and	r19, r1
     110:	31 21       	and	r19, r1
     112:	4a 21       	and	r20, r10
     114:	57 21       	and	r21, r7
     116:	46 21       	and	r20, r6
     118:	b2 21       	and	r27, r2
     11a:	ba 21       	and	r27, r10
     11c:	05 22       	and	r0, r21
     11e:	67 22       	and	r6, r23
     120:	91 22       	and	r9, r17
     122:	bd 22       	and	r11, r29
     124:	ec 22       	and	r14, r28
     126:	f4 22       	and	r15, r20
     128:	fa 22       	and	r15, r26
     12a:	b2 21       	and	r27, r2
     12c:	02 23       	and	r16, r18
     12e:	16 23       	and	r17, r22
     130:	fa 22       	and	r15, r26
     132:	54 23       	and	r21, r20
     134:	61 23       	and	r22, r17
     136:	6d 23       	and	r22, r29
     138:	82 23       	and	r24, r18
     13a:	9b 23       	and	r25, r27
     13c:	be 23       	and	r27, r30
     13e:	c9 23       	and	r28, r25
     140:	cf 23       	and	r28, r31
     142:	d4 23       	and	r29, r20
     144:	e7 23       	and	r30, r23
     146:	08 24       	eor	r0, r8
     148:	1b 24       	eor	r1, r11
     14a:	d4 23       	and	r29, r20
     14c:	15 3b       	cpi	r17, 0xB5	; 181
     14e:	2a 3b       	cpi	r18, 0xBA	; 186
     150:	18 3b       	cpi	r17, 0xB8	; 184
     152:	09 3b       	cpi	r16, 0xB9	; 185
     154:	1b 3b       	cpi	r17, 0xBB	; 187
     156:	1e 3b       	cpi	r17, 0xBE	; 190
     158:	0c 3b       	cpi	r16, 0xBC	; 188
     15a:	21 3b       	cpi	r18, 0xB1	; 177
     15c:	0f 3b       	cpi	r16, 0xBF	; 191
     15e:	24 3b       	cpi	r18, 0xB4	; 180
     160:	12 3b       	cpi	r17, 0xB2	; 178
     162:	27 3b       	cpi	r18, 0xB7	; 183

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWnone>:
     2b4:	6e 6f 6e 65 00                                      none.

000002b9 <usbHWmidiThru>:
     2b9:	4d 69 64 69 2d 54 68 72 75 3a 20 00                 Midi-Thru: .

000002c5 <usbHWmidiOut>:
     2c5:	4d 69 64 69 2d 4f 75 74 3a 00                       Midi-Out:.

000002cf <usbHWmidiIn>:
     2cf:	4d 69 64 69 2d 49 6e 3a 00                          Midi-In:.

000002d8 <usbHWmidichanSW>:
     2d8:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2e8:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2f8:	20 00                                                .

000002fa <usbHWBits>:
     2fa:	2c 20 42 69 74 73 3a 00                             , Bits:.

00000302 <usbHWmodule>:
     302:	4d 6f 64 75 6c 65 3a 00                             Module:.

0000030a <usbHWempty>:
     30a:	65 6d 70 74 79 00                                   empty.

00000310 <usbHWRegister>:
     310:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

0000031c <usbHWRange>:
     31c:	52 61 6e 67 65 20 00                                Range .

00000323 <usbHWManual>:
     323:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

0000032c <usbHWmodulCheck>:
     32c:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     33c:	20 00                                                .

0000033e <usbHWmodulInst>:
     33e:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     34e:	3a 20 00                                            : .

00000351 <usbHWtitel>:
     351:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     361:	72 61 74 69 6f 6e 0d 0a 00                          ration...

0000036a <HelloMsg>:
     36a:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     37a:	65 72 66 61 63 65 0d 0a 00                          erface...

00000383 <usbLog>:
     383:	4c 6f 67 0d 0a 00                                   Log...

00000389 <usbEmpty>:
     389:	65 6d 70 74 79 0d 0a 00                             empty...

00000391 <msg_programming1>:
     391:	73 61 76 65 2e 2e 2e 00                             save....

00000399 <logNone>:
     399:	3c 6e 6f 6e 65 3e 00                                <none>.

000003a0 <stringNotAssigen>:
     3a0:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

000003ab <menuMessageE>:
     3ab:	45 3a 00                                            E:.

000003ae <menuMessageOK>:
     3ae:	6f 6b 20 00                                         ok .

000003b2 <menuMessageAbort>:
     3b2:	61 62 6f 72 74 00                                   abort.

000003b8 <menuMessageMIDIpanic>:
     3b8:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003c7 <messageRegisterMan>:
     3c7:	2b 00                                               +.

000003c9 <messageLoaded>:
     3c9:	20 52 65 67 00                                       Reg.

000003ce <messageSaved>:
     3ce:	20 52 65 67 20 7e 20 00                              Reg ~ .

000003d6 <MenuMIDIOutText>:
     3d6:	4f 75 74 3a 00                                      Out:.

000003db <MenuMIDIInText>:
     3db:	49 6e 3a 00                                         In:.

000003df <initMenuText>:
     3df:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003e9 <nibbleInfo>:
	...
     3f1:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     401:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     411:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     421:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     431:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     441:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     451:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     461:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

00000470 <menu_selFunc>:
     470:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 90 07     ..<none>........
     480:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     490:	9a 07 86 07 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     4a0:	6e 00 00 00 fe 0c 7c 07 00 00 00 00 01 10 4b 6f     n.....|.......Ko
     4b0:	70 70 65 6c 32 3c 33 00 00 00 5e 07 31 1e 00 00     ppel2<3...^.1...
     4c0:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 54 07     ..Koppel1<3...T.
     4d0:	34 1e 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     4.....KoppelP<3.
     4e0:	00 00 4a 07 37 1e 00 00 01 10 4b 6f 70 70 65 6c     ..J.7.....Koppel
     4f0:	31 3c 32 00 00 00 40 07 3a 1e 00 00 01 10 4b 6f     1<2...@.:.....Ko
     500:	70 70 65 6c 50 3c 32 00 00 00 36 07 3d 1e 00 00     ppelP<2...6.=...
     510:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 2c 07     ..KoppelP<1...,.
     520:	40 1e 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     @.....Koppel3<2.
     530:	00 00 22 07 43 1e 00 00 01 10 4b 6f 70 70 65 6c     ..".C.....Koppel
     540:	33 3c 31 00 00 00 18 07 46 1e 00 00 01 10 4b 6f     3<1.....F.....Ko
     550:	70 70 65 6c 33 3c 50 00 00 00 0e 07 49 1e 00 00     ppel3<P.....I...
     560:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 04 07     ..Koppel2<1.....
     570:	4c 1e 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     L.....Koppel2<P.
     580:	00 00 fa 06 4f 1e 00 00 01 10 4b 6f 70 70 65 6c     ....O.....Koppel
     590:	31 3c 50 00 00 00 f0 06 52 1e 00 00 01 10 50 72     1<P.....R.....Pr
     5a0:	2e 2b 2f 73 65 74 00 00 00 00 be 06 ce 2a 00 00     .+/set.......*..
     5b0:	01 10 50 72 2e 2d 2f 63 6c 72 00 00 00 00 b4 06     ..Pr.-/clr......
     5c0:	66 1e 00 00 01 10 50 72 6f 67 2e 20 31 41 00 00     f.....Prog. 1A..
     5d0:	00 00 e6 06 52 2b 00 00 01 10 50 72 6f 67 2e 20     ....R+....Prog. 
     5e0:	32 41 00 00 00 00 dc 06 55 2b 00 00 01 10 50 72     2A......U+....Pr
     5f0:	6f 67 2e 20 33 41 00 00 00 00 d2 06 58 2b 00 00     og. 3A......X+..
     600:	01 10 50 72 6f 67 2e 20 34 41 00 00 00 00 c8 06     ..Prog. 4A......
     610:	5b 2b 00 00 01 10 50 72 6f 67 2e 63 6c 72 00 00     [+....Prog.clr..
     620:	00 00 8c 06 6f 19 00 00 01 10 50 72 6f 67 2e 73     ....o.....Prog.s
     630:	65 74 00 00 00 00 96 06 f2 2a 00 00 01 10 50 72     et.......*....Pr
     640:	6f 67 2e 2b 00 00 00 00 00 00 aa 06 83 1e 00 00     og.+............
     650:	01 10 50 72 6f 67 2e 2d 00 00 00 00 00 00 a0 06     ..Prog.-........
     660:	a4 1e 00 00 01 10 4d 49 44 49 20 4f 66 66 00 00     ......MIDI Off..
     670:	00 00 68 07 11 29 00 00 c1 10 53 65 74 75 70 00     ..h..)....Setup.
     680:	00 00 00 00 ee 0d 72 07 00 00 00 00                 ......r.....

0000068c <shortKeyTextRegOff>:
     68c:	50 63 6c 72 00 00 00 00 00 00                       Pclr......

00000696 <shortKeyTextPRS>:
     696:	50 73 65 74 00 00 00 00 00 00                       Pset......

000006a0 <shortKeyTextPRD>:
     6a0:	50 2d 00 00 00 00 00 00 00 00                       P-........

000006aa <shortKeyTextPRI>:
     6aa:	50 2b 00 00 00 00 00 00 00 00                       P+........

000006b4 <shortKeyTextPRM>:
     6b4:	50 2d 2f 63 00 00 00 00 00 00                       P-/c......

000006be <shortKeyTextPRP>:
     6be:	50 2b 2f 73 00 00 00 00 00 00                       P+/s......

000006c8 <shortKeyTextK4A>:
     6c8:	50 34 41 00 00 00 00 00 00 00                       P4A.......

000006d2 <shortKeyTextK3A>:
     6d2:	50 33 41 00 00 00 00 00 00 00                       P3A.......

000006dc <shortKeyTextK2A>:
     6dc:	50 32 41 00 00 00 00 00 00 00                       P2A.......

000006e6 <shortKeyTextK1A>:
     6e6:	50 31 41 00 00 00 00 00 00 00                       P1A.......

000006f0 <shortKeyTextCpl1P>:
     6f0:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

000006fa <shortKeyTextCpl2P>:
     6fa:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

00000704 <shortKeyTextCpl21>:
     704:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

0000070e <shortKeyTextCpl3P>:
     70e:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000718 <shortKeyTextCpl31>:
     718:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

00000722 <shortKeyTextCpl32>:
     722:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

0000072c <shortKeyTextCplP1>:
     72c:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

00000736 <shortKeyTextCplP2>:
     736:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

00000740 <shortKeyTextCpl12>:
     740:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

0000074a <shortKeyTextCplP3>:
     74a:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

00000754 <shortKeyTextCpl13>:
     754:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

0000075e <shortKeyTextCpl23>:
     75e:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

00000768 <shortKeyTextMIDIoff>:
     768:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

00000772 <shortKeyTextSetup>:
     772:	53 65 74 75 00 00 00 00 00 00                       Setu......

0000077c <shortKeyTextStim>:
     77c:	53 74 69 6d 00 00 00 00 00 00                       Stim......

00000786 <shortKeyTextMenu>:
     786:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

00000790 <shortKeyTextNone>:
	...

0000079a <menu_main>:
     79a:	81 00 4d 61 6e 75 61 6c 00 00 00 00 12 08 00 00     ..Manual........
     7aa:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     7ba:	3a 08 00 00 ed 1d 00 00 01 00 4d 49 44 49 00 00     :.........MIDI..
     7ca:	00 00 00 00 06 0a 00 00 00 00 00 00 01 00 54 61     ..............Ta
     7da:	73 74 65 6e 00 00 00 00 ae 0c 00 00 00 00 92 19     sten............
     7ea:	01 00 53 74 61 74 75 73 00 00 00 00 d6 11 00 00     ..Status........
     7fa:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     80a:	ee 0d 00 00 00 00 00 00                             ........

00000812 <menu_manual>:
     812:	81 00 4b 6f 70 70 65 6c 00 00 00 00 16 09 00 00     ..Koppel........
     822:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     832:	fe 0c 00 00 00 00 00 00                             ........

0000083a <menu_register>:
     83a:	8c 00 50 72 6f 67 2e 6c 61 64 2e 00 00 00 a8 05     ..Prog.lad......
     84a:	00 00 fa 1d 0c 00 50 72 6f 67 2e 73 70 2e 00 00     ......Prog.sp...
     85a:	00 00 a8 05 00 00 87 19 01 00 61 75 73 00 00 00     ..........aus...
	...
     872:	f4 1d 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     ......Reg.1-8...
     882:	00 00 6d 05 00 00 47 19 0e 00 52 65 67 2e 39 2d     ..m...G...Reg.9-
     892:	31 36 00 00 00 00 6e 05 00 00 47 19 0e 00 52 65     16....n...G...Re
     8a2:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 47 19     g.17-24...o...G.
     8b2:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     8c2:	00 00 47 19 0e 00 52 65 67 2e 33 33 2d 34 30 00     ..G...Reg.33-40.
     8d2:	00 00 71 05 00 00 47 19 0e 00 52 65 67 2e 34 31     ..q...G...Reg.41
     8e2:	2d 34 38 00 00 00 72 05 00 00 47 19 0e 00 52 65     -48...r...G...Re
     8f2:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 47 19     g.49-54...s...G.
     902:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     912:	00 00 47 19                                         ..G.

00000916 <menu_coupler>:
     916:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 11 08     ..2<3...........
     926:	00 00 74 19 09 00 31 3c 33 00 00 00 00 00 00 00     ..t...1<3.......
     936:	00 00 12 08 00 00 74 19 09 00 31 3c 32 00 00 00     ......t...1<2...
     946:	00 00 00 00 00 00 13 08 00 00 74 19 09 00 50 3c     ..........t...P<
     956:	33 00 00 00 00 00 00 00 00 00 14 08 00 00 74 19     3.............t.
     966:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 15 08     ..P<2...........
     976:	00 00 74 19 09 00 50 3c 31 00 00 00 00 00 00 00     ..t...P<1.......
     986:	00 00 16 08 00 00 74 19 09 00 33 3c 32 00 00 00     ......t...3<2...
     996:	00 00 00 00 00 00 17 08 00 00 74 19 09 00 33 3c     ..........t...3<
     9a6:	31 00 00 00 00 00 00 00 00 00 18 08 00 00 74 19     1.............t.
     9b6:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 19 08     ..3<P...........
     9c6:	00 00 74 19 09 00 32 3c 31 00 00 00 00 00 00 00     ..t...2<1.......
     9d6:	00 00 1a 08 00 00 74 19 09 00 32 3c 50 00 00 00     ......t...2<P...
     9e6:	00 00 00 00 00 00 1b 08 00 00 74 19 c9 00 31 3c     ..........t...1<
     9f6:	50 00 00 00 00 00 00 00 00 00 1c 08 00 00 74 19     P.............t.

00000a06 <menu_midi>:
     a06:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     a16:	11 29 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .)....MIDIin....
     a26:	ce 0a 00 00 00 00 00 1b 01 00 4d 49 44 49 6f 75     ..........MIDIou
     a36:	74 00 00 00 4e 0d 00 00 00 00 fc 1a 03 10 54 68     t...N.........Th
     a46:	72 75 2d 49 6e 00 00 00 00 00 26 08 00 00 43 19     ru-In.....&...C.
     a56:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 27 08     ..Thru-Out....'.
     a66:	00 00 43 19 09 00 41 63 63 65 70 74 20 50 43 00     ..C...Accept PC.
     a76:	00 00 32 09 00 00 f8 1a 09 00 41 63 74 2e 53 65     ..2.......Act.Se
     a86:	6e 73 65 00 00 00 30 09 00 00 f8 1a 09 00 56 65     nse...0.......Ve
     a96:	6c 5a 34 4f 66 66 00 00 00 00 31 09 00 00 f8 1a     lZ4Off....1.....
     aa6:	06 08 52 78 42 75 66 55 73 65 00 00 00 00 41 15     ..RxBufUse....A.
     ab6:	00 00 00 00 c6 08 54 78 42 75 66 55 73 65 00 00     ......TxBufUse..
     ac6:	00 00 4a 16 00 00 00 00                             ..J.....

00000ace <menu_midiIn>:
     ace:	81 00 43 68 2e 31 00 00 00 00 00 00 0e 0c 00 00     ..Ch.1..........
     ade:	bd 18 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     aee:	0e 0c 01 00 bd 18 00 00 01 00 43 68 2e 33 00 00     ..........Ch.3..
     afe:	00 00 00 00 0e 0c 02 00 bd 18 00 00 01 00 43 68     ..............Ch
     b0e:	2e 34 00 00 00 00 00 00 0e 0c 03 00 bd 18 00 00     .4..............
     b1e:	01 00 43 68 2e 35 00 00 00 00 00 00 0e 0c 04 00     ..Ch.5..........
     b2e:	bd 18 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     b3e:	0e 0c 05 00 bd 18 00 00 01 00 43 68 2e 37 00 00     ..........Ch.7..
     b4e:	00 00 00 00 0e 0c 06 00 bd 18 00 00 01 00 43 68     ..............Ch
     b5e:	2e 38 00 00 00 00 00 00 0e 0c 07 00 bd 18 00 00     .8..............
     b6e:	01 00 43 68 2e 39 00 00 00 00 00 00 0e 0c 08 00     ..Ch.9..........
     b7e:	bd 18 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     b8e:	0e 0c 09 00 bd 18 00 00 01 00 43 68 2e 31 31 00     ..........Ch.11.
     b9e:	00 00 00 00 0e 0c 0a 00 bd 18 00 00 01 00 43 68     ..............Ch
     bae:	2e 31 32 00 00 00 00 00 0e 0c 0b 00 bd 18 00 00     .12.............
     bbe:	01 00 43 68 2e 31 33 00 00 00 00 00 0e 0c 0c 00     ..Ch.13.........
     bce:	bd 18 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     bde:	0e 0c 0d 00 bd 18 00 00 01 00 43 68 2e 31 35 00     ..........Ch.15.
     bee:	00 00 00 00 0e 0c 0e 00 bd 18 00 00 c1 00 43 68     ..............Ch
     bfe:	2e 31 36 00 00 00 00 00 0e 0c 0f 00 bd 18 00 00     .16.............

00000c0e <menu_midiInSec>:
     c0e:	81 00 53 65 63 74 2e 31 00 00 00 00 5e 0c 00 00     ..Sect.1....^...
     c1e:	c8 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     c2e:	5e 0c 01 00 c8 18 00 00 01 00 53 65 63 74 2e 33     ^.........Sect.3
     c3e:	00 00 00 00 5e 0c 02 00 c8 18 00 00 c1 00 53 65     ....^.........Se
     c4e:	63 74 2e 34 00 00 00 00 5e 0c 03 00 c8 18 00 00     ct.4....^.......

00000c5e <menu_midiInVar>:
     c5e:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 28 08     ..Manual......(.
     c6e:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     c7e:	00 00 29 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..).......Range.
     c8e:	00 00 00 00 00 00 2a 08 00 00 00 00 c4 90 4d 61     ......*.......Ma
     c9e:	6e 4e 6f 74 65 00 00 00 00 00 2b 08 00 00 00 00     nNote.....+.....

00000cae <menu_key>:
     cae:	81 08 54 61 73 74 65 31 00 00 00 00 70 04 00 00     ..Taste1....p...
     cbe:	2c 19 e5 2b 01 08 54 61 73 74 65 32 00 00 00 00     ,..+..Taste2....
     cce:	70 04 01 00 2c 19 e5 2b 01 08 54 61 73 74 65 33     p...,..+..Taste3
     cde:	00 00 00 00 70 04 02 00 2c 19 e5 2b c1 08 54 61     ....p...,..+..Ta
     cee:	73 74 65 34 00 00 00 00 70 04 03 00 2c 19 e5 2b     ste4....p...,..+

00000cfe <menu_tune>:
     cfe:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     d0e:	dc 19 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     d1e:	00 00 01 00 dc 19 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     d2e:	00 00 00 00 00 00 02 00 dc 19 00 00 c1 20 50 65     ............. Pe
     d3e:	64 61 6c 00 00 00 00 00 00 00 03 00 dc 19 00 00     dal.............

00000d4e <menu_midiOut>:
     d4e:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 28 09     ..III.........(.
     d5e:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     d6e:	00 00 2a 09 00 00 00 00 03 10 49 00 00 00 00 00     ..*.......I.....
     d7e:	00 00 00 00 00 00 2c 09 00 00 00 00 03 10 50 00     ......,.......P.
	...
     d96:	00 00 2e 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..........III(in
     da6:	74 29 00 00 00 00 29 09 00 00 00 00 03 10 49 49     t)....).......II
     db6:	28 69 6e 74 29 00 00 00 00 00 2b 09 00 00 00 00     (int).....+.....
     dc6:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2d 09     ..I(int)......-.
     dd6:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     de6:	00 00 2f 09 00 00 00 00                             ../.....

00000dee <menu_setup>:
     dee:	81 00 4d 6f 64 75 6c 65 00 00 00 00 b6 0e 00 00     ..Module........
     dfe:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     e0e:	26 12 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     &.........Power.
     e1e:	00 00 00 00 7a 0e 00 00 00 00 00 00 c1 00 45 45     ....z.........EE
     e2e:	70 72 6f 6d 00 00 00 00 3e 0e 00 00 00 00 00 00     prom....>.......

00000e3e <menu_eeprom>:
     e3e:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     e4e:	24 2a 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     $*....EEBackup..
     e5e:	00 00 00 00 0c 2a 00 00 c1 00 45 45 52 65 73 74     .....*....EERest
     e6e:	6f 72 65 00 00 00 00 00 18 2a 00 00                 ore......*..

00000e7a <menu_Power>:
     e7a:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     e8a:	a9 2c 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     .,....PowerOff..
     e9a:	00 00 00 00 b2 2c 00 00 c1 00 50 2e 52 65 73 74     .....,....P.Rest
     eaa:	61 72 74 00 00 00 00 00 ba 2c 00 00                 art......,..

00000eb6 <menu_module>:
     eb6:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     ec6:	00 00 0e 1b 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     ed6:	00 00 56 03 00 00 0e 1b 0a 08 4d 6f 64 4f 4b 00     ..V.......ModOK.
     ee6:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     ef6:	64 54 65 73 74 00 00 00 1a 0f 00 00 00 00 00 00     dTest...........
     f06:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 0a 10 00 00     ..ModAssign.....
     f16:	00 00 04 1b                                         ....

00000f1a <menu_ModeSel>:
     f1a:	81 00 4d 6f 64 2e 30 00 00 00 00 00 ba 0f 00 00     ..Mod.0.........
     f2a:	b2 18 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     f3a:	ba 0f 01 00 b2 18 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
     f4a:	00 00 00 00 ba 0f 02 00 b2 18 00 00 01 00 4d 6f     ..............Mo
     f5a:	64 2e 33 00 00 00 00 00 ba 0f 03 00 b2 18 00 00     d.3.............
     f6a:	01 00 4d 6f 64 2e 34 00 00 00 00 00 ba 0f 04 00     ..Mod.4.........
     f7a:	b2 18 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     f8a:	ba 0f 05 00 b2 18 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
     f9a:	00 00 00 00 ba 0f 06 00 b2 18 00 00 c1 00 4d 6f     ..............Mo
     faa:	64 2e 37 00 00 00 00 00 ba 0f 07 00 b2 18 00 00     d.7.............

00000fba <menu_ModTestSelcted>:
     fba:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     fca:	96 19 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
     fda:	00 00 ad 05 49 18 85 18 01 00 54 65 73 74 50 74     ....I.....TestPt
     fea:	72 6e 00 00 00 00 00 00 ef 29 00 00 c1 00 4c 6f     rn.......)....Lo
     ffa:	6f 70 54 73 74 00 00 00 00 00 00 00 ca 19 00 00     opTst...........

0000100a <menu_modAssign>:
    100a:	81 00 4d 61 6e 2e 33 00 00 00 00 00 0e 11 00 00     ..Man.3.........
    101a:	e6 18 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ......Man.2.....
    102a:	0e 11 01 00 e6 18 00 00 01 00 4d 61 6e 2e 31 00     ..........Man.1.
    103a:	00 00 00 00 0e 11 02 00 e6 18 00 00 01 00 50 65     ..............Pe
    104a:	64 61 6c 00 00 00 00 00 0e 11 03 00 e6 18 00 00     dal.............
    105a:	c1 00 52 65 67 69 73 74 65 72 00 00 6e 10 04 00     ..Register..n...
    106a:	00 00 00 00                                         ....

0000106e <menu_modSection8>:
    106e:	81 00 53 65 63 74 2e 31 00 00 00 00 5e 11 00 00     ..Sect.1....^...
    107e:	16 19 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    108e:	5e 11 01 00 16 19 00 00 01 00 53 65 63 74 2e 33     ^.........Sect.3
    109e:	00 00 00 00 5e 11 02 00 16 19 00 00 01 00 53 65     ....^.........Se
    10ae:	63 74 2e 34 00 00 00 00 5e 11 03 00 16 19 00 00     ct.4....^.......
    10be:	01 00 53 65 63 74 2e 35 00 00 00 00 5e 11 04 00     ..Sect.5....^...
    10ce:	16 19 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ......Sect.6....
    10de:	5e 11 05 00 16 19 00 00 01 00 53 65 63 74 2e 37     ^.........Sect.7
    10ee:	00 00 00 00 5e 11 06 00 16 19 00 00 c1 00 53 65     ....^.........Se
    10fe:	63 74 2e 38 00 00 00 00 5e 11 07 00 16 19 00 00     ct.8....^.......

0000110e <menu_modSection>:
    110e:	81 00 53 65 63 74 2e 31 00 00 00 00 9a 11 00 00     ..Sect.1........
    111e:	f1 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
    112e:	9a 11 01 00 f1 18 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
    113e:	00 00 00 00 9a 11 02 00 f1 18 00 00 c1 00 53 65     ..............Se
    114e:	63 74 2e 34 00 00 00 00 9a 11 03 00 f1 18 00 00     ct.4............

0000115e <menu_modDefineReg>:
    115e:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f7 07     ..RegBeg........
    116e:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    117e:	00 00 f8 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    118e:	2f 42 69 74 00 00 f9 07 00 00 00 00                 /Bit........

0000119a <menu_modDefine>:
    119a:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 34 09     ..NoteBeg.....4.
    11aa:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    11ba:	00 00 35 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..5.......Module
    11ca:	2f 42 69 74 00 00 36 09 00 00 00 00                 /Bit..6.....

000011d6 <menu_status>:
    11d6:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    11e6:	18 25 00 00 01 00 55 53 42 00 00 00 00 00 00 00     .%....USB.......
    11f6:	26 12 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     &........@MIDI-I
    1206:	6e 00 00 00 00 00 00 00 9c 24 00 00 c2 40 4d 49     n........$...@MI
    1216:	44 49 2d 4f 75 74 00 00 00 00 00 00 da 24 00 00     DI-Out.......$..

00001226 <menu_USBser>:
    1226:	89 00 45 76 65 6e 74 4c 6f 67 00 00 00 00 52 16     ..EventLog....R.
    1236:	00 00 38 1b 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..8...SendLog...
    1246:	00 00 00 00 12 1b 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
    1256:	66 67 00 00 00 00 00 00 4c 1b 00 00                 fg......L...

00001262 <sw_version>:
    1262:	56 30 2e 37 32 00                                   V0.72.

00001268 <cplInfo>:
    1268:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    1278:	01 02 00 03 01 03 02 03                             ........

00001280 <keylabel_1>:
    1280:	31 00                                               1.

00001282 <keylabel_0>:
    1282:	30 00                                               0.

00001284 <keylabel_text>:
    1284:	54 65 78 74 80 00                                   Text..

0000128a <keylabel_exit>:
    128a:	45 78 69 74 00                                      Exit.

0000128f <keylabel_off>:
    128f:	7e 61 75 73 00                                      ~aus.

00001294 <keylabel_on>:
    1294:	7e 65 69 6e 00                                      ~ein.

00001299 <keylabel_onoff>:
    1299:	45 69 6e 80 00                                      Ein..

0000129e <keylabel_minus>:
    129e:	2d 00                                               -.

000012a0 <keylabel_plus>:
    12a0:	2b 00                                               +.

000012a2 <keylabel_left>:
    12a2:	7f 00                                               ..

000012a4 <keylabel_right>:
    12a4:	7e 00                                               ~.

000012a6 <keylabel_down>:
    12a6:	09 00                                               ..

000012a8 <keylabel_up>:
    12a8:	08 00                                               ..

000012aa <cgPattern_Block>:
    12aa:	00 00 0e 0e 0e 0e 00 00                             ........

000012b2 <cgPattern_Down>:
    12b2:	04 04 04 04 15 0e 04 00                             ........

000012ba <cgPattern_Up>:
    12ba:	04 0e 15 04 04 04 04 00                             ........

000012c2 <cr_lf>:
    12c2:	0d 0a 00 00                                         ....

000012c6 <__ctors_end>:
    12c6:	11 24       	eor	r1, r1
    12c8:	1f be       	out	0x3f, r1	; 63
    12ca:	cf ef       	ldi	r28, 0xFF	; 255
    12cc:	d1 e2       	ldi	r29, 0x21	; 33
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	cd bf       	out	0x3d, r28	; 61
    12d2:	00 e0       	ldi	r16, 0x00	; 0
    12d4:	0c bf       	out	0x3c, r16	; 60

000012d6 <__do_copy_data>:
    12d6:	12 e0       	ldi	r17, 0x02	; 2
    12d8:	a0 e0       	ldi	r26, 0x00	; 0
    12da:	b2 e0       	ldi	r27, 0x02	; 2
    12dc:	ee e5       	ldi	r30, 0x5E	; 94
    12de:	f9 e7       	ldi	r31, 0x79	; 121
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	0b bf       	out	0x3b, r16	; 59
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <__do_copy_data+0x14>
    12e6:	07 90       	elpm	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	a8 30       	cpi	r26, 0x08	; 8
    12ec:	b1 07       	cpc	r27, r17
    12ee:	d9 f7       	brne	.-10     	; 0x12e6 <__do_copy_data+0x10>

000012f0 <__do_clear_bss>:
    12f0:	29 e1       	ldi	r18, 0x19	; 25
    12f2:	a8 e0       	ldi	r26, 0x08	; 8
    12f4:	b2 e0       	ldi	r27, 0x02	; 2
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <.do_clear_bss_start>

000012f8 <.do_clear_bss_loop>:
    12f8:	1d 92       	st	X+, r1

000012fa <.do_clear_bss_start>:
    12fa:	a1 32       	cpi	r26, 0x21	; 33
    12fc:	b2 07       	cpc	r27, r18
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <.do_clear_bss_loop>
    1300:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <main>
    1304:	0c 94 ad 3c 	jmp	0x795a	; 0x795a <_exit>

00001308 <__bad_interrupt>:
    1308:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000130c <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    130c:	fc 01       	movw	r30, r24
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	1c c0       	rjmp	.+56     	; 0x134c <crc16_ram+0x40>
    1314:	df 01       	movw	r26, r30
    1316:	11 96       	adiw	r26, 0x01	; 1
    1318:	20 81       	ld	r18, Z
    131a:	82 27       	eor	r24, r18
    131c:	28 2f       	mov	r18, r24
    131e:	22 95       	swap	r18
    1320:	28 27       	eor	r18, r24
    1322:	02 2e       	mov	r0, r18
    1324:	26 95       	lsr	r18
    1326:	26 95       	lsr	r18
    1328:	20 25       	eor	r18, r0
    132a:	02 2e       	mov	r0, r18
    132c:	26 95       	lsr	r18
    132e:	20 25       	eor	r18, r0
    1330:	27 70       	andi	r18, 0x07	; 7
    1332:	08 2e       	mov	r0, r24
    1334:	89 2f       	mov	r24, r25
    1336:	26 95       	lsr	r18
    1338:	07 94       	ror	r0
    133a:	27 95       	ror	r18
    133c:	90 2d       	mov	r25, r0
    133e:	82 27       	eor	r24, r18
    1340:	06 94       	lsr	r0
    1342:	27 95       	ror	r18
    1344:	90 25       	eor	r25, r0
    1346:	82 27       	eor	r24, r18
    1348:	ba 01       	movw	r22, r20
    134a:	fd 01       	movw	r30, r26
    134c:	ab 01       	movw	r20, r22
    134e:	41 50       	subi	r20, 0x01	; 1
    1350:	51 09       	sbc	r21, r1
    1352:	67 2b       	or	r22, r23
    1354:	f9 f6       	brne	.-66     	; 0x1314 <crc16_ram+0x8>
    1356:	08 95       	ret

00001358 <crc16_eeprom>:
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	cf ef       	ldi	r28, 0xFF	; 255
    1366:	df ef       	ldi	r29, 0xFF	; 255
    1368:	21 c0       	rjmp	.+66     	; 0x13ac <crc16_eeprom+0x54>
    136a:	7c 01       	movw	r14, r24
    136c:	2f ef       	ldi	r18, 0xFF	; 255
    136e:	e2 1a       	sub	r14, r18
    1370:	f2 0a       	sbc	r15, r18
    1372:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    1376:	9e 01       	movw	r18, r28
    1378:	28 27       	eor	r18, r24
    137a:	82 2f       	mov	r24, r18
    137c:	82 95       	swap	r24
    137e:	82 27       	eor	r24, r18
    1380:	08 2e       	mov	r0, r24
    1382:	86 95       	lsr	r24
    1384:	86 95       	lsr	r24
    1386:	80 25       	eor	r24, r0
    1388:	08 2e       	mov	r0, r24
    138a:	86 95       	lsr	r24
    138c:	80 25       	eor	r24, r0
    138e:	87 70       	andi	r24, 0x07	; 7
    1390:	02 2e       	mov	r0, r18
    1392:	23 2f       	mov	r18, r19
    1394:	86 95       	lsr	r24
    1396:	07 94       	ror	r0
    1398:	87 95       	ror	r24
    139a:	30 2d       	mov	r19, r0
    139c:	28 27       	eor	r18, r24
    139e:	06 94       	lsr	r0
    13a0:	87 95       	ror	r24
    13a2:	30 25       	eor	r19, r0
    13a4:	28 27       	eor	r18, r24
    13a6:	e9 01       	movw	r28, r18
    13a8:	b8 01       	movw	r22, r16
    13aa:	c7 01       	movw	r24, r14
    13ac:	8b 01       	movw	r16, r22
    13ae:	01 50       	subi	r16, 0x01	; 1
    13b0:	11 09       	sbc	r17, r1
    13b2:	67 2b       	or	r22, r23
    13b4:	d1 f6       	brne	.-76     	; 0x136a <crc16_eeprom+0x12>
    13b6:	ce 01       	movw	r24, r28
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	08 95       	ret

000013c6 <crc16_ram_startVal>:
    13c6:	fc 01       	movw	r30, r24
    13c8:	ca 01       	movw	r24, r20
    13ca:	1c c0       	rjmp	.+56     	; 0x1404 <crc16_ram_startVal+0x3e>
    13cc:	df 01       	movw	r26, r30
    13ce:	11 96       	adiw	r26, 0x01	; 1
    13d0:	20 81       	ld	r18, Z
    13d2:	82 27       	eor	r24, r18
    13d4:	28 2f       	mov	r18, r24
    13d6:	22 95       	swap	r18
    13d8:	28 27       	eor	r18, r24
    13da:	02 2e       	mov	r0, r18
    13dc:	26 95       	lsr	r18
    13de:	26 95       	lsr	r18
    13e0:	20 25       	eor	r18, r0
    13e2:	02 2e       	mov	r0, r18
    13e4:	26 95       	lsr	r18
    13e6:	20 25       	eor	r18, r0
    13e8:	27 70       	andi	r18, 0x07	; 7
    13ea:	08 2e       	mov	r0, r24
    13ec:	89 2f       	mov	r24, r25
    13ee:	26 95       	lsr	r18
    13f0:	07 94       	ror	r0
    13f2:	27 95       	ror	r18
    13f4:	90 2d       	mov	r25, r0
    13f6:	82 27       	eor	r24, r18
    13f8:	06 94       	lsr	r0
    13fa:	27 95       	ror	r18
    13fc:	90 25       	eor	r25, r0
    13fe:	82 27       	eor	r24, r18
    1400:	ba 01       	movw	r22, r20
    1402:	fd 01       	movw	r30, r26
    1404:	ab 01       	movw	r20, r22
    1406:	41 50       	subi	r20, 0x01	; 1
    1408:	51 09       	sbc	r21, r1
    140a:	67 2b       	or	r22, r23
    140c:	f9 f6       	brne	.-66     	; 0x13cc <crc16_ram_startVal+0x6>
    140e:	08 95       	ret

00001410 <crc16_eeprom_startVal>:
    1410:	ef 92       	push	r14
    1412:	ff 92       	push	r15
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	ea 01       	movw	r28, r20
    141e:	21 c0       	rjmp	.+66     	; 0x1462 <crc16_eeprom_startVal+0x52>
    1420:	7c 01       	movw	r14, r24
    1422:	2f ef       	ldi	r18, 0xFF	; 255
    1424:	e2 1a       	sub	r14, r18
    1426:	f2 0a       	sbc	r15, r18
    1428:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    142c:	ae 01       	movw	r20, r28
    142e:	48 27       	eor	r20, r24
    1430:	84 2f       	mov	r24, r20
    1432:	82 95       	swap	r24
    1434:	84 27       	eor	r24, r20
    1436:	08 2e       	mov	r0, r24
    1438:	86 95       	lsr	r24
    143a:	86 95       	lsr	r24
    143c:	80 25       	eor	r24, r0
    143e:	08 2e       	mov	r0, r24
    1440:	86 95       	lsr	r24
    1442:	80 25       	eor	r24, r0
    1444:	87 70       	andi	r24, 0x07	; 7
    1446:	04 2e       	mov	r0, r20
    1448:	45 2f       	mov	r20, r21
    144a:	86 95       	lsr	r24
    144c:	07 94       	ror	r0
    144e:	87 95       	ror	r24
    1450:	50 2d       	mov	r21, r0
    1452:	48 27       	eor	r20, r24
    1454:	06 94       	lsr	r0
    1456:	87 95       	ror	r24
    1458:	50 25       	eor	r21, r0
    145a:	48 27       	eor	r20, r24
    145c:	ea 01       	movw	r28, r20
    145e:	b8 01       	movw	r22, r16
    1460:	c7 01       	movw	r24, r14
    1462:	8b 01       	movw	r16, r22
    1464:	01 50       	subi	r16, 0x01	; 1
    1466:	11 09       	sbc	r17, r1
    1468:	67 2b       	or	r22, r23
    146a:	d1 f6       	brne	.-76     	; 0x1420 <crc16_eeprom_startVal+0x10>
    146c:	ce 01       	movw	r24, r28
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	08 95       	ret

0000147c <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    1480:	82 e3       	ldi	r24, 0x32	; 50
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    1488:	ec 01       	movw	r28, r24
    148a:	60 e3       	ldi	r22, 0x30	; 48
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	62 df       	rcall	.-316    	; 0x1358 <crc16_eeprom>
    1494:	c8 17       	cp	r28, r24
    1496:	d9 07       	cpc	r29, r25
    1498:	81 f4       	brne	.+32     	; 0x14ba <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    14a2:	8d 34       	cpi	r24, 0x4D	; 77
    14a4:	51 f4       	brne	.+20     	; 0x14ba <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    14a6:	40 e3       	ldi	r20, 0x30	; 48
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	84 e3       	ldi	r24, 0x34	; 52
    14b0:	99 e0       	ldi	r25, 0x09	; 9
    14b2:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	06 c0       	rjmp	.+12     	; 0x14c6 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    14ba:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14be:	81 60       	ori	r24, 0x01	; 1
    14c0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	08 95       	ret

000014cc <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    14d0:	85 e3       	ldi	r24, 0x35	; 53
    14d2:	91 e0       	ldi	r25, 0x01	; 1
    14d4:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    14d8:	ec 01       	movw	r28, r24
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	71 e0       	ldi	r23, 0x01	; 1
    14de:	85 e3       	ldi	r24, 0x35	; 53
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	3a df       	rcall	.-396    	; 0x1358 <crc16_eeprom>
    14e4:	c8 17       	cp	r28, r24
    14e6:	d9 07       	cpc	r29, r25
    14e8:	81 f4       	brne	.+32     	; 0x150a <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    14ea:	84 e3       	ldi	r24, 0x34	; 52
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    14f2:	89 34       	cpi	r24, 0x49	; 73
    14f4:	51 f4       	brne	.+20     	; 0x150a <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	51 e0       	ldi	r21, 0x01	; 1
    14fa:	65 e3       	ldi	r22, 0x35	; 53
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	88 e2       	ldi	r24, 0x28	; 40
    1500:	98 e0       	ldi	r25, 0x08	; 8
    1502:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    150a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    150e:	82 60       	ori	r24, 0x02	; 2
    1510:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1514:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    1520:	83 e4       	ldi	r24, 0x43	; 67
    1522:	91 e0       	ldi	r25, 0x01	; 1
    1524:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    1528:	ec 01       	movw	r28, r24
    152a:	6b e0       	ldi	r22, 0x0B	; 11
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	88 e3       	ldi	r24, 0x38	; 56
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	12 df       	rcall	.-476    	; 0x1358 <crc16_eeprom>
    1534:	c8 17       	cp	r28, r24
    1536:	d9 07       	cpc	r29, r25
    1538:	c1 f4       	brne	.+48     	; 0x156a <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    153a:	87 e3       	ldi	r24, 0x37	; 55
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    1542:	8f 34       	cpi	r24, 0x4F	; 79
    1544:	91 f4       	brne	.+36     	; 0x156a <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1546:	48 e0       	ldi	r20, 0x08	; 8
    1548:	50 e0       	ldi	r21, 0x00	; 0
    154a:	68 e3       	ldi	r22, 0x38	; 56
    154c:	71 e0       	ldi	r23, 0x01	; 1
    154e:	88 e2       	ldi	r24, 0x28	; 40
    1550:	99 e0       	ldi	r25, 0x09	; 9
    1552:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1556:	43 e0       	ldi	r20, 0x03	; 3
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	60 e4       	ldi	r22, 0x40	; 64
    155c:	71 e0       	ldi	r23, 0x01	; 1
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	99 e0       	ldi	r25, 0x09	; 9
    1562:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    156a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    156e:	84 60       	ori	r24, 0x04	; 4
    1570:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1574:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1576:	df 91       	pop	r29
    1578:	cf 91       	pop	r28
    157a:	08 95       	ret

0000157c <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    1580:	88 e4       	ldi	r24, 0x48	; 72
    1582:	91 e0       	ldi	r25, 0x01	; 1
    1584:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    1588:	ec 01       	movw	r28, r24
    158a:	61 e0       	ldi	r22, 0x01	; 1
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	86 e4       	ldi	r24, 0x46	; 70
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	e2 de       	rcall	.-572    	; 0x1358 <crc16_eeprom>
    1594:	c8 17       	cp	r28, r24
    1596:	d9 07       	cpc	r29, r25
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    159a:	85 e4       	ldi	r24, 0x45	; 69
    159c:	91 e0       	ldi	r25, 0x01	; 1
    159e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    15a2:	89 36       	cpi	r24, 0x69	; 105
    15a4:	71 f4       	brne	.+28     	; 0x15c2 <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    15a6:	86 e4       	ldi	r24, 0x46	; 70
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    15ae:	c5 e5       	ldi	r28, 0x55	; 85
    15b0:	d3 e0       	ldi	r29, 0x03	; 3
    15b2:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    15b4:	87 e4       	ldi	r24, 0x47	; 71
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    15bc:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	06 c0       	rjmp	.+12     	; 0x15ce <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    15c2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	08 95       	ret

000015d4 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    15d8:	87 ef       	ldi	r24, 0xF7	; 247
    15da:	93 e0       	ldi	r25, 0x03	; 3
    15dc:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    15e0:	ec 01       	movw	r28, r24
    15e2:	62 e0       	ldi	r22, 0x02	; 2
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	85 ef       	ldi	r24, 0xF5	; 245
    15e8:	93 e0       	ldi	r25, 0x03	; 3
    15ea:	b6 de       	rcall	.-660    	; 0x1358 <crc16_eeprom>
    15ec:	c8 17       	cp	r28, r24
    15ee:	d9 07       	cpc	r29, r25
    15f0:	81 f4       	brne	.+32     	; 0x1612 <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    15f2:	84 ef       	ldi	r24, 0xF4	; 244
    15f4:	93 e0       	ldi	r25, 0x03	; 3
    15f6:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    15fa:	84 35       	cpi	r24, 0x54	; 84
    15fc:	51 f4       	brne	.+20     	; 0x1612 <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    15fe:	42 e0       	ldi	r20, 0x02	; 2
    1600:	50 e0       	ldi	r21, 0x00	; 0
    1602:	65 ef       	ldi	r22, 0xF5	; 245
    1604:	73 e0       	ldi	r23, 0x03	; 3
    1606:	86 e2       	ldi	r24, 0x26	; 38
    1608:	98 e0       	ldi	r25, 0x08	; 8
    160a:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		return (EE_LOAD_OK);
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	06 c0       	rjmp	.+12     	; 0x161e <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1612:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1616:	82 60       	ori	r24, 0x02	; 2
    1618:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    161c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    161e:	df 91       	pop	r29
    1620:	cf 91       	pop	r28
    1622:	08 95       	ret

00001624 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1628:	8c e4       	ldi	r24, 0x4C	; 76
    162a:	91 e0       	ldi	r25, 0x01	; 1
    162c:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    1630:	ec 01       	movw	r28, r24
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	70 e0       	ldi	r23, 0x00	; 0
    1636:	8b e4       	ldi	r24, 0x4B	; 75
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	8e de       	rcall	.-740    	; 0x1358 <crc16_eeprom>
    163c:	c8 17       	cp	r28, r24
    163e:	d9 07       	cpc	r29, r25
    1640:	71 f4       	brne	.+28     	; 0x165e <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    1642:	8a e4       	ldi	r24, 0x4A	; 74
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    164a:	85 35       	cpi	r24, 0x55	; 85
    164c:	41 f4       	brne	.+16     	; 0x165e <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    164e:	8b e4       	ldi	r24, 0x4B	; 75
    1650:	91 e0       	ldi	r25, 0x01	; 1
    1652:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    1656:	80 93 52 16 	sts	0x1652, r24	; 0x801652 <serUSB_Active>
		return (EE_LOAD_OK);
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	06 c0       	rjmp	.+12     	; 0x166a <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    165e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1662:	88 60       	ori	r24, 0x08	; 8
    1664:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1668:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    1674:	61 e0       	ldi	r22, 0x01	; 1
    1676:	70 e0       	ldi	r23, 0x00	; 0
    1678:	8f e4       	ldi	r24, 0x4F	; 79
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	6d de       	rcall	.-806    	; 0x1358 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    167e:	ac 01       	movw	r20, r24
    1680:	68 e1       	ldi	r22, 0x18	; 24
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	80 e5       	ldi	r24, 0x50	; 80
    1686:	91 e0       	ldi	r25, 0x01	; 1
    1688:	c3 de       	rcall	.-634    	; 0x1410 <crc16_eeprom_startVal>
    168a:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    168c:	88 e6       	ldi	r24, 0x68	; 104
    168e:	91 e0       	ldi	r25, 0x01	; 1
    1690:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    1694:	c8 17       	cp	r28, r24
    1696:	d9 07       	cpc	r29, r25
    1698:	b1 f4       	brne	.+44     	; 0x16c6 <eeprom_ReadReg+0x56>
    169a:	8e e4       	ldi	r24, 0x4E	; 78
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    16a2:	82 35       	cpi	r24, 0x52	; 82
    16a4:	81 f4       	brne	.+32     	; 0x16c6 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    16a6:	8f e4       	ldi	r24, 0x4F	; 79
    16a8:	91 e0       	ldi	r25, 0x01	; 1
    16aa:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    16ae:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    16b2:	48 e1       	ldi	r20, 0x18	; 24
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	60 e5       	ldi	r22, 0x50	; 80
    16b8:	71 e0       	ldi	r23, 0x01	; 1
    16ba:	87 ef       	ldi	r24, 0xF7	; 247
    16bc:	97 e0       	ldi	r25, 0x07	; 7
    16be:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    16c2:	80 e0       	ldi	r24, 0x00	; 0
    16c4:	06 c0       	rjmp	.+12     	; 0x16d2 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    16c6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    16ca:	80 62       	ori	r24, 0x20	; 32
    16cc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    16dc:	8b ee       	ldi	r24, 0xEB	; 235
    16de:	93 e0       	ldi	r25, 0x03	; 3
    16e0:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    16e4:	ec 01       	movw	r28, r24
    16e6:	60 e8       	ldi	r22, 0x80	; 128
    16e8:	72 e0       	ldi	r23, 0x02	; 2
    16ea:	8b e6       	ldi	r24, 0x6B	; 107
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	34 de       	rcall	.-920    	; 0x1358 <crc16_eeprom>
    16f0:	c8 17       	cp	r28, r24
    16f2:	d9 07       	cpc	r29, r25
    16f4:	81 f4       	brne	.+32     	; 0x1716 <eeprom_ReadProg+0x3e>
    16f6:	8a e6       	ldi	r24, 0x6A	; 106
    16f8:	91 e0       	ldi	r25, 0x01	; 1
    16fa:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    16fe:	80 35       	cpi	r24, 0x50	; 80
    1700:	51 f4       	brne	.+20     	; 0x1716 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    1702:	40 e8       	ldi	r20, 0x80	; 128
    1704:	52 e0       	ldi	r21, 0x02	; 2
    1706:	6b e6       	ldi	r22, 0x6B	; 107
    1708:	71 e0       	ldi	r23, 0x01	; 1
    170a:	84 e6       	ldi	r24, 0x64	; 100
    170c:	99 e0       	ldi	r25, 0x09	; 9
    170e:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1716:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    171a:	80 64       	ori	r24, 0x40	; 64
    171c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1720:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    172c:	82 ef       	ldi	r24, 0xF2	; 242
    172e:	93 e0       	ldi	r25, 0x03	; 3
    1730:	0e 94 83 3c 	call	0x7906	; 0x7906 <eeprom_read_word>
    1734:	ec 01       	movw	r28, r24
    1736:	64 e0       	ldi	r22, 0x04	; 4
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	8e ee       	ldi	r24, 0xEE	; 238
    173c:	93 e0       	ldi	r25, 0x03	; 3
    173e:	0c de       	rcall	.-1000   	; 0x1358 <crc16_eeprom>
    1740:	c8 17       	cp	r28, r24
    1742:	d9 07       	cpc	r29, r25
    1744:	51 f4       	brne	.+20     	; 0x175a <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1746:	44 e0       	ldi	r20, 0x04	; 4
    1748:	50 e0       	ldi	r21, 0x00	; 0
    174a:	6e ee       	ldi	r22, 0xEE	; 238
    174c:	73 e0       	ldi	r23, 0x03	; 3
    174e:	83 eb       	ldi	r24, 0xB3	; 179
    1750:	95 e0       	ldi	r25, 0x05	; 5
    1752:	0e 94 6b 3c 	call	0x78d6	; 0x78d6 <eeprom_read_block>
		return(EE_LOAD_OK);
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    175a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    175e:	80 68       	ori	r24, 0x80	; 128
    1760:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1764:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	08 95       	ret

0000176c <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    176c:	60 e0       	ldi	r22, 0x00	; 0
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1776:	65 e6       	ldi	r22, 0x65	; 101
    1778:	89 ef       	ldi	r24, 0xF9	; 249
    177a:	93 e0       	ldi	r25, 0x03	; 3
    177c:	0c 94 97 3c 	jmp	0x792e	; 0x792e <eeprom_update_byte>
    1780:	08 95       	ret

00001782 <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1786:	60 e3       	ldi	r22, 0x30	; 48
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	84 e3       	ldi	r24, 0x34	; 52
    178c:	99 e0       	ldi	r25, 0x09	; 9
    178e:	be dd       	rcall	.-1156   	; 0x130c <crc16_ram>
    1790:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1792:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1796:	6d e4       	ldi	r22, 0x4D	; 77
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    17a0:	40 e3       	ldi	r20, 0x30	; 48
    17a2:	50 e0       	ldi	r21, 0x00	; 0
    17a4:	62 e0       	ldi	r22, 0x02	; 2
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	84 e3       	ldi	r24, 0x34	; 52
    17aa:	99 e0       	ldi	r25, 0x09	; 9
    17ac:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    17b0:	be 01       	movw	r22, r28
    17b2:	82 e3       	ldi	r24, 0x32	; 50
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    17ba:	d8 df       	rcall	.-80     	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    17bc:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    17c0:	df 91       	pop	r29
    17c2:	cf 91       	pop	r28
    17c4:	08 95       	ret

000017c6 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	71 e0       	ldi	r23, 0x01	; 1
    17ce:	88 e2       	ldi	r24, 0x28	; 40
    17d0:	98 e0       	ldi	r25, 0x08	; 8
    17d2:	9c dd       	rcall	.-1224   	; 0x130c <crc16_ram>
    17d4:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17d6:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    17da:	69 e4       	ldi	r22, 0x49	; 73
    17dc:	84 e3       	ldi	r24, 0x34	; 52
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    17e4:	40 e0       	ldi	r20, 0x00	; 0
    17e6:	51 e0       	ldi	r21, 0x01	; 1
    17e8:	65 e3       	ldi	r22, 0x35	; 53
    17ea:	70 e0       	ldi	r23, 0x00	; 0
    17ec:	88 e2       	ldi	r24, 0x28	; 40
    17ee:	98 e0       	ldi	r25, 0x08	; 8
    17f0:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    17f4:	be 01       	movw	r22, r28
    17f6:	85 e3       	ldi	r24, 0x35	; 53
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    17fe:	b6 df       	rcall	.-148    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1800:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	08 95       	ret

0000180a <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    180e:	68 e0       	ldi	r22, 0x08	; 8
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	88 e2       	ldi	r24, 0x28	; 40
    1814:	99 e0       	ldi	r25, 0x09	; 9
    1816:	7a dd       	rcall	.-1292   	; 0x130c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1818:	ac 01       	movw	r20, r24
    181a:	63 e0       	ldi	r22, 0x03	; 3
    181c:	70 e0       	ldi	r23, 0x00	; 0
    181e:	80 e3       	ldi	r24, 0x30	; 48
    1820:	99 e0       	ldi	r25, 0x09	; 9
    1822:	d1 dd       	rcall	.-1118   	; 0x13c6 <crc16_ram_startVal>
    1824:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1826:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    182a:	6f e4       	ldi	r22, 0x4F	; 79
    182c:	87 e3       	ldi	r24, 0x37	; 55
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1834:	48 e0       	ldi	r20, 0x08	; 8
    1836:	50 e0       	ldi	r21, 0x00	; 0
    1838:	68 e3       	ldi	r22, 0x38	; 56
    183a:	71 e0       	ldi	r23, 0x01	; 1
    183c:	88 e2       	ldi	r24, 0x28	; 40
    183e:	99 e0       	ldi	r25, 0x09	; 9
    1840:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1844:	43 e0       	ldi	r20, 0x03	; 3
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	60 e4       	ldi	r22, 0x40	; 64
    184a:	71 e0       	ldi	r23, 0x01	; 1
    184c:	80 e3       	ldi	r24, 0x30	; 48
    184e:	99 e0       	ldi	r25, 0x09	; 9
    1850:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1854:	be 01       	movw	r22, r28
    1856:	83 e4       	ldi	r24, 0x43	; 67
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    185e:	86 df       	rcall	.-244    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1860:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    1864:	df 91       	pop	r29
    1866:	cf 91       	pop	r28
    1868:	08 95       	ret

0000186a <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	70 e0       	ldi	r23, 0x00	; 0
    1876:	85 e5       	ldi	r24, 0x55	; 85
    1878:	93 e0       	ldi	r25, 0x03	; 3
    187a:	48 dd       	rcall	.-1392   	; 0x130c <crc16_ram>
    187c:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    187e:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    1882:	69 e6       	ldi	r22, 0x69	; 105
    1884:	85 e4       	ldi	r24, 0x45	; 69
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    188c:	c5 e5       	ldi	r28, 0x55	; 85
    188e:	d3 e0       	ldi	r29, 0x03	; 3
    1890:	68 81       	ld	r22, Y
    1892:	86 e4       	ldi	r24, 0x46	; 70
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    189a:	69 81       	ldd	r22, Y+1	; 0x01
    189c:	87 e4       	ldi	r24, 0x47	; 71
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    18a4:	b8 01       	movw	r22, r16
    18a6:	88 e4       	ldi	r24, 0x48	; 72
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    18ae:	5e df       	rcall	.-324    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    18b0:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    18c2:	61 e0       	ldi	r22, 0x01	; 1
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	82 e5       	ldi	r24, 0x52	; 82
    18c8:	96 e1       	ldi	r25, 0x16	; 22
    18ca:	20 dd       	rcall	.-1472   	; 0x130c <crc16_ram>
    18cc:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    18ce:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    18d2:	65 e5       	ldi	r22, 0x55	; 85
    18d4:	8a e4       	ldi	r24, 0x4A	; 74
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    18dc:	60 91 52 16 	lds	r22, 0x1652	; 0x801652 <serUSB_Active>
    18e0:	8b e4       	ldi	r24, 0x4B	; 75
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    18e8:	be 01       	movw	r22, r28
    18ea:	8c e4       	ldi	r24, 0x4C	; 76
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    18f2:	3c df       	rcall	.-392    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    18f4:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    18f8:	df 91       	pop	r29
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1902:	62 e0       	ldi	r22, 0x02	; 2
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	86 e2       	ldi	r24, 0x26	; 38
    1908:	98 e0       	ldi	r25, 0x08	; 8
    190a:	00 dd       	rcall	.-1536   	; 0x130c <crc16_ram>
    190c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    190e:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1912:	64 e5       	ldi	r22, 0x54	; 84
    1914:	84 ef       	ldi	r24, 0xF4	; 244
    1916:	93 e0       	ldi	r25, 0x03	; 3
    1918:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    191c:	42 e0       	ldi	r20, 0x02	; 2
    191e:	50 e0       	ldi	r21, 0x00	; 0
    1920:	65 ef       	ldi	r22, 0xF5	; 245
    1922:	73 e0       	ldi	r23, 0x03	; 3
    1924:	86 e2       	ldi	r24, 0x26	; 38
    1926:	98 e0       	ldi	r25, 0x08	; 8
    1928:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    192c:	be 01       	movw	r22, r28
    192e:	87 ef       	ldi	r24, 0xF7	; 247
    1930:	93 e0       	ldi	r25, 0x03	; 3
    1932:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    1936:	1a df       	rcall	.-460    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1938:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	80 e1       	ldi	r24, 0x10	; 16
    194c:	98 e0       	ldi	r25, 0x08	; 8
    194e:	de dc       	rcall	.-1604   	; 0x130c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1950:	ac 01       	movw	r20, r24
    1952:	68 e1       	ldi	r22, 0x18	; 24
    1954:	70 e0       	ldi	r23, 0x00	; 0
    1956:	87 ef       	ldi	r24, 0xF7	; 247
    1958:	97 e0       	ldi	r25, 0x07	; 7
    195a:	35 dd       	rcall	.-1430   	; 0x13c6 <crc16_ram_startVal>
    195c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    195e:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1962:	62 e5       	ldi	r22, 0x52	; 82
    1964:	8e e4       	ldi	r24, 0x4E	; 78
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    196c:	60 91 10 08 	lds	r22, 0x0810	; 0x800810 <registerCount>
    1970:	8f e4       	ldi	r24, 0x4F	; 79
    1972:	91 e0       	ldi	r25, 0x01	; 1
    1974:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    1978:	48 e1       	ldi	r20, 0x18	; 24
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	60 e5       	ldi	r22, 0x50	; 80
    197e:	71 e0       	ldi	r23, 0x01	; 1
    1980:	87 ef       	ldi	r24, 0xF7	; 247
    1982:	97 e0       	ldi	r25, 0x07	; 7
    1984:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    1988:	be 01       	movw	r22, r28
    198a:	88 e6       	ldi	r24, 0x68	; 104
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    1992:	ec de       	rcall	.-552    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1994:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    19a2:	60 e8       	ldi	r22, 0x80	; 128
    19a4:	72 e0       	ldi	r23, 0x02	; 2
    19a6:	84 e6       	ldi	r24, 0x64	; 100
    19a8:	99 e0       	ldi	r25, 0x09	; 9
    19aa:	b0 dc       	rcall	.-1696   	; 0x130c <crc16_ram>
    19ac:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19ae:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    19b2:	60 e5       	ldi	r22, 0x50	; 80
    19b4:	8a e6       	ldi	r24, 0x6A	; 106
    19b6:	91 e0       	ldi	r25, 0x01	; 1
    19b8:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    19bc:	40 e8       	ldi	r20, 0x80	; 128
    19be:	52 e0       	ldi	r21, 0x02	; 2
    19c0:	6b e6       	ldi	r22, 0x6B	; 107
    19c2:	71 e0       	ldi	r23, 0x01	; 1
    19c4:	84 e6       	ldi	r24, 0x64	; 100
    19c6:	99 e0       	ldi	r25, 0x09	; 9
    19c8:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    19cc:	be 01       	movw	r22, r28
    19ce:	8b ee       	ldi	r24, 0xEB	; 235
    19d0:	93 e0       	ldi	r25, 0x03	; 3
    19d2:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    19d6:	ca de       	rcall	.-620    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    19d8:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	08 95       	ret

000019e2 <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    19e6:	64 e0       	ldi	r22, 0x04	; 4
    19e8:	70 e0       	ldi	r23, 0x00	; 0
    19ea:	83 eb       	ldi	r24, 0xB3	; 179
    19ec:	95 e0       	ldi	r25, 0x05	; 5
    19ee:	8e dc       	rcall	.-1764   	; 0x130c <crc16_ram>
    19f0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    19f2:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    19f6:	6b e4       	ldi	r22, 0x4B	; 75
    19f8:	8d ee       	ldi	r24, 0xED	; 237
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1a00:	44 e0       	ldi	r20, 0x04	; 4
    1a02:	50 e0       	ldi	r21, 0x00	; 0
    1a04:	6e ee       	ldi	r22, 0xEE	; 238
    1a06:	73 e0       	ldi	r23, 0x03	; 3
    1a08:	83 eb       	ldi	r24, 0xB3	; 179
    1a0a:	95 e0       	ldi	r25, 0x05	; 5
    1a0c:	0e 94 88 3c 	call	0x7910	; 0x7910 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1a10:	be 01       	movw	r22, r28
    1a12:	82 ef       	ldi	r24, 0xF2	; 242
    1a14:	93 e0       	ldi	r25, 0x03	; 3
    1a16:	0e 94 a9 3c 	call	0x7952	; 0x7952 <eeprom_update_word>
	eepromWriteSignature();
    1a1a:	a8 de       	rcall	.-688    	; 0x176c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1a1c:	0e 94 a3 3b 	call	0x7746	; 0x7746 <lcd_waitSymbolOff>
}
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1a26:	ad de       	rcall	.-678    	; 0x1782 <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1a28:	ce de       	rcall	.-612    	; 0x17c6 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    1a2a:	ef de       	rcall	.-546    	; 0x180a <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    1a2c:	1e df       	rcall	.-452    	; 0x186a <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    1a2e:	47 df       	rcall	.-370    	; 0x18be <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1a30:	88 df       	rcall	.-240    	; 0x1942 <eeprom_UpdateReg>
    1a32:	b5 df       	rcall	.-150    	; 0x199e <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1a34:	d6 df       	rcall	.-84     	; 0x19e2 <eeprom_UpdateSoftkeys>
    1a36:	63 cf       	rjmp	.-314    	; 0x18fe <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1a38:	08 95       	ret

00001a3a <eepromCopy>:
    1a3a:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    1a3c:	df 92       	push	r13
    1a3e:	ef 92       	push	r14
    1a40:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1a42:	0f 93       	push	r16
    1a44:	1f 93       	push	r17
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	eb 01       	movw	r28, r22
	while (count-- > 0){
    1a4c:	11 c0       	rjmp	.+34     	; 0x1a70 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1a4e:	7c 01       	movw	r14, r24
    1a50:	2f ef       	ldi	r18, 0xFF	; 255
    1a52:	e2 1a       	sub	r14, r18
    1a54:	f2 0a       	sbc	r15, r18
    1a56:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <eeprom_read_byte>
    1a5a:	6e 01       	movw	r12, r28
    1a5c:	9f ef       	ldi	r25, 0xFF	; 255
    1a5e:	c9 1a       	sub	r12, r25
    1a60:	d9 0a       	sbc	r13, r25
    1a62:	68 2f       	mov	r22, r24
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 94 97 3c 	call	0x792e	; 0x792e <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1a6a:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    1a6c:	e6 01       	movw	r28, r12
    1a6e:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1a70:	8a 01       	movw	r16, r20
    1a72:	01 50       	subi	r16, 0x01	; 1
    1a74:	11 09       	sbc	r17, r1
    1a76:	45 2b       	or	r20, r21
    1a78:	51 f7       	brne	.-44     	; 0x1a4e <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	08 95       	ret

00001a8c <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    1a8c:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1a90:	40 e0       	ldi	r20, 0x00	; 0
    1a92:	58 e0       	ldi	r21, 0x08	; 8
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	78 e0       	ldi	r23, 0x08	; 8
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	ce df       	rcall	.-100    	; 0x1a3a <eepromCopy>
	lcd_waitSymbolOff();
    1a9e:	0c 94 a3 3b 	jmp	0x7746	; 0x7746 <lcd_waitSymbolOff>
    1aa2:	08 95       	ret

00001aa4 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1aa4:	0e 94 95 3b 	call	0x772a	; 0x772a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	58 e0       	ldi	r21, 0x08	; 8
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	70 e0       	ldi	r23, 0x00	; 0
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	98 e0       	ldi	r25, 0x08	; 8
    1ab4:	c2 df       	rcall	.-124    	; 0x1a3a <eepromCopy>
	lcd_waitSymbolOff();
    1ab6:	0c 94 a3 3b 	jmp	0x7746	; 0x7746 <lcd_waitSymbolOff>
    1aba:	08 95       	ret

00001abc <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	0a c0       	rjmp	.+20     	; 0x1ad4 <init_Timers+0x18>
    1ac0:	e8 2f       	mov	r30, r24
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	e1 5d       	subi	r30, 0xD1	; 209
    1aca:	fd 4f       	sbci	r31, 0xFD	; 253
    1acc:	9f ef       	ldi	r25, 0xFF	; 255
    1ace:	90 83       	st	Z, r25
    1ad0:	11 82       	std	Z+1, r1	; 0x01
    1ad2:	8f 5f       	subi	r24, 0xFF	; 255
    1ad4:	89 30       	cpi	r24, 0x09	; 9
    1ad6:	a0 f3       	brcs	.-24     	; 0x1ac0 <init_Timers+0x4>
    1ad8:	e1 e4       	ldi	r30, 0x41	; 65
    1ada:	f2 e0       	ldi	r31, 0x02	; 2
    1adc:	10 82       	st	Z, r1
    1ade:	11 82       	std	Z+1, r1	; 0x01
    1ae0:	12 82       	std	Z+2, r1	; 0x02
    1ae2:	13 82       	std	Z+3, r1	; 0x03
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1aea:	08 95       	ret

00001aec <init_HwTimer>:
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	84 bd       	out	0x24, r24	; 36
    1af0:	93 e0       	ldi	r25, 0x03	; 3
    1af2:	95 bd       	out	0x25, r25	; 37
    1af4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1af8:	89 ef       	ldi	r24, 0xF9	; 249
    1afa:	87 bd       	out	0x27, r24	; 39
    1afc:	85 b1       	in	r24, 0x05	; 5
    1afe:	8f 77       	andi	r24, 0x7F	; 127
    1b00:	85 b9       	out	0x05, r24	; 5
    1b02:	84 b1       	in	r24, 0x04	; 4
    1b04:	80 68       	ori	r24, 0x80	; 128
    1b06:	84 b9       	out	0x04, r24	; 4
    1b08:	08 95       	ret

00001b0a <init_ADC>:
    1b0a:	87 e8       	ldi	r24, 0x87	; 135
    1b0c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1b10:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1b14:	8f e7       	ldi	r24, 0x7F	; 127
    1b16:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1b20:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1b24:	e9 e4       	ldi	r30, 0x49	; 73
    1b26:	f3 e0       	ldi	r31, 0x03	; 3
    1b28:	10 82       	st	Z, r1
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	81 83       	std	Z+1, r24	; 0x01
    1b2e:	82 83       	std	Z+2, r24	; 0x02
    1b30:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	10 c0       	rjmp	.+32     	; 0x1b58 <init_ADC+0x4e>
    1b38:	85 30       	cpi	r24, 0x05	; 5
    1b3a:	39 f4       	brne	.+14     	; 0x1b4a <init_ADC+0x40>
    1b3c:	e8 2f       	mov	r30, r24
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	e1 5b       	subi	r30, 0xB1	; 177
    1b42:	fc 4f       	sbci	r31, 0xFC	; 252
    1b44:	96 e0       	ldi	r25, 0x06	; 6
    1b46:	90 83       	st	Z, r25
    1b48:	06 c0       	rjmp	.+12     	; 0x1b56 <init_ADC+0x4c>
    1b4a:	e8 2f       	mov	r30, r24
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	e1 5b       	subi	r30, 0xB1	; 177
    1b50:	fc 4f       	sbci	r31, 0xFC	; 252
    1b52:	9a e0       	ldi	r25, 0x0A	; 10
    1b54:	90 83       	st	Z, r25
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	86 30       	cpi	r24, 0x06	; 6
    1b5a:	70 f3       	brcs	.-36     	; 0x1b38 <init_ADC+0x2e>
    1b5c:	08 95       	ret

00001b5e <init_Pipe>:
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	88 b9       	out	0x08, r24	; 8
    1b62:	87 b9       	out	0x07, r24	; 7
    1b64:	82 b9       	out	0x02, r24	; 2
    1b66:	11 b8       	out	0x01, r1	; 1
    1b68:	84 b3       	in	r24, 0x14	; 20
    1b6a:	87 60       	ori	r24, 0x07	; 7
    1b6c:	84 bb       	out	0x14, r24	; 20
    1b6e:	83 b3       	in	r24, 0x13	; 19
    1b70:	87 60       	ori	r24, 0x07	; 7
    1b72:	83 bb       	out	0x13, r24	; 19
    1b74:	8b b1       	in	r24, 0x0b	; 11
    1b76:	8f 77       	andi	r24, 0x7F	; 127
    1b78:	8b b9       	out	0x0b, r24	; 11
    1b7a:	8a b1       	in	r24, 0x0a	; 10
    1b7c:	80 68       	ori	r24, 0x80	; 128
    1b7e:	8a b9       	out	0x0a, r24	; 10
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e c0       	rjmp	.+28     	; 0x1ba0 <init_Pipe+0x42>
    1b84:	e8 2f       	mov	r30, r24
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	ee 0f       	add	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	ee 0f       	add	r30, r30
    1b8e:	ff 1f       	adc	r31, r31
    1b90:	ee 0f       	add	r30, r30
    1b92:	ff 1f       	adc	r31, r31
    1b94:	e7 5b       	subi	r30, 0xB7	; 183
    1b96:	fd 4f       	sbci	r31, 0xFD	; 253
    1b98:	9f ef       	ldi	r25, 0xFF	; 255
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	90 83       	st	Z, r25
    1b9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ba0:	80 32       	cpi	r24, 0x20	; 32
    1ba2:	80 f3       	brcs	.-32     	; 0x1b84 <init_Pipe+0x26>
    1ba4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1ba8:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1bac:	08 95       	ret

00001bae <init_PipeModules>:
    1bae:	e6 dc       	rcall	.-1588   	; 0x157c <eeprom_ReadModules>
    1bb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bb2:	51 f4       	brne	.+20     	; 0x1bc8 <init_PipeModules+0x1a>
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	42 d7       	rcall	.+3716   	; 0x2a42 <log_putError>
    1bbe:	e5 e5       	ldi	r30, 0x55	; 85
    1bc0:	f3 e0       	ldi	r31, 0x03	; 3
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	80 83       	st	Z, r24
    1bc6:	81 83       	std	Z+1, r24	; 0x01
    1bc8:	8b b1       	in	r24, 0x0b	; 11
    1bca:	8f 77       	andi	r24, 0x7F	; 127
    1bcc:	8b b9       	out	0x0b, r24	; 11
    1bce:	84 b3       	in	r24, 0x14	; 20
    1bd0:	87 60       	ori	r24, 0x07	; 7
    1bd2:	84 bb       	out	0x14, r24	; 20
    1bd4:	84 b3       	in	r24, 0x14	; 20
    1bd6:	8b 7f       	andi	r24, 0xFB	; 251
    1bd8:	84 bb       	out	0x14, r24	; 20
    1bda:	85 e0       	ldi	r24, 0x05	; 5
    1bdc:	8a 95       	dec	r24
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <init_PipeModules+0x2e>
    1be0:	00 00       	nop
    1be2:	84 b3       	in	r24, 0x14	; 20
    1be4:	84 60       	ori	r24, 0x04	; 4
    1be6:	84 bb       	out	0x14, r24	; 20
    1be8:	90 e2       	ldi	r25, 0x20	; 32
    1bea:	84 b3       	in	r24, 0x14	; 20
    1bec:	81 60       	ori	r24, 0x01	; 1
    1bee:	84 bb       	out	0x14, r24	; 20
    1bf0:	90 fd       	sbrc	r25, 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <init_PipeModules+0x4a>
    1bf4:	85 e5       	ldi	r24, 0x55	; 85
    1bf6:	01 c0       	rjmp	.+2      	; 0x1bfa <init_PipeModules+0x4c>
    1bf8:	8a ea       	ldi	r24, 0xAA	; 170
    1bfa:	88 b9       	out	0x08, r24	; 8
    1bfc:	80 b1       	in	r24, 0x00	; 0
    1bfe:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1c02:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1c06:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1c0a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1c0e:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1c12:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1c16:	84 b3       	in	r24, 0x14	; 20
    1c18:	8e 7f       	andi	r24, 0xFE	; 254
    1c1a:	84 bb       	out	0x14, r24	; 20
    1c1c:	85 e0       	ldi	r24, 0x05	; 5
    1c1e:	8a 95       	dec	r24
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <init_PipeModules+0x70>
    1c22:	00 00       	nop
    1c24:	91 50       	subi	r25, 0x01	; 1
    1c26:	09 f7       	brne	.-62     	; 0x1bea <init_PipeModules+0x3c>
    1c28:	90 e2       	ldi	r25, 0x20	; 32
    1c2a:	0f c0       	rjmp	.+30     	; 0x1c4a <init_PipeModules+0x9c>
    1c2c:	84 b3       	in	r24, 0x14	; 20
    1c2e:	81 60       	ori	r24, 0x01	; 1
    1c30:	84 bb       	out	0x14, r24	; 20
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	8a 95       	dec	r24
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <init_PipeModules+0x86>
    1c38:	00 c0       	rjmp	.+0      	; 0x1c3a <init_PipeModules+0x8c>
    1c3a:	84 b3       	in	r24, 0x14	; 20
    1c3c:	8e 7f       	andi	r24, 0xFE	; 254
    1c3e:	84 bb       	out	0x14, r24	; 20
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	8a 95       	dec	r24
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <init_PipeModules+0x94>
    1c46:	00 c0       	rjmp	.+0      	; 0x1c48 <init_PipeModules+0x9a>
    1c48:	91 50       	subi	r25, 0x01	; 1
    1c4a:	91 11       	cpse	r25, r1
    1c4c:	ef cf       	rjmp	.-34     	; 0x1c2c <init_PipeModules+0x7e>
    1c4e:	8f ef       	ldi	r24, 0xFF	; 255
    1c50:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1c54:	90 e2       	ldi	r25, 0x20	; 32
    1c56:	84 b3       	in	r24, 0x14	; 20
    1c58:	81 60       	ori	r24, 0x01	; 1
    1c5a:	84 bb       	out	0x14, r24	; 20
    1c5c:	8f ef       	ldi	r24, 0xFF	; 255
    1c5e:	88 b9       	out	0x08, r24	; 8
    1c60:	20 b1       	in	r18, 0x00	; 0
    1c62:	90 fd       	sbrc	r25, 0
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <init_PipeModules+0xbc>
    1c66:	8a ea       	ldi	r24, 0xAA	; 170
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <init_PipeModules+0xbe>
    1c6a:	85 e5       	ldi	r24, 0x55	; 85
    1c6c:	82 27       	eor	r24, r18
    1c6e:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1c72:	82 23       	and	r24, r18
    1c74:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1c78:	84 b3       	in	r24, 0x14	; 20
    1c7a:	8e 7f       	andi	r24, 0xFE	; 254
    1c7c:	84 bb       	out	0x14, r24	; 20
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	8a 95       	dec	r24
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <init_PipeModules+0xd2>
    1c84:	00 00       	nop
    1c86:	91 50       	subi	r25, 0x01	; 1
    1c88:	31 f7       	brne	.-52     	; 0x1c56 <init_PipeModules+0xa8>
    1c8a:	00 00       	nop
    1c8c:	00 00       	nop
    1c8e:	84 b3       	in	r24, 0x14	; 20
    1c90:	81 60       	ori	r24, 0x01	; 1
    1c92:	84 bb       	out	0x14, r24	; 20
    1c94:	84 b3       	in	r24, 0x14	; 20
    1c96:	87 60       	ori	r24, 0x07	; 7
    1c98:	84 bb       	out	0x14, r24	; 20
    1c9a:	84 b3       	in	r24, 0x14	; 20
    1c9c:	8b 7f       	andi	r24, 0xFB	; 251
    1c9e:	84 bb       	out	0x14, r24	; 20
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	8a 95       	dec	r24
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <init_PipeModules+0xf4>
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <init_PipeModules+0xfa>
    1ca8:	84 b3       	in	r24, 0x14	; 20
    1caa:	84 60       	ori	r24, 0x04	; 4
    1cac:	84 bb       	out	0x14, r24	; 20
    1cae:	90 e2       	ldi	r25, 0x20	; 32
    1cb0:	e1 e4       	ldi	r30, 0x41	; 65
    1cb2:	f3 e0       	ldi	r31, 0x03	; 3
    1cb4:	83 81       	ldd	r24, Z+3	; 0x03
    1cb6:	82 83       	std	Z+2, r24	; 0x02
    1cb8:	84 81       	ldd	r24, Z+4	; 0x04
    1cba:	83 83       	std	Z+3, r24	; 0x03
    1cbc:	84 b3       	in	r24, 0x14	; 20
    1cbe:	81 60       	ori	r24, 0x01	; 1
    1cc0:	84 bb       	out	0x14, r24	; 20
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	81 83       	std	Z+1, r24	; 0x01
    1cc6:	88 b9       	out	0x08, r24	; 8
    1cc8:	85 81       	ldd	r24, Z+5	; 0x05
    1cca:	84 83       	std	Z+4, r24	; 0x04
    1ccc:	86 81       	ldd	r24, Z+6	; 0x06
    1cce:	85 83       	std	Z+5, r24	; 0x05
    1cd0:	80 b1       	in	r24, 0x00	; 0
    1cd2:	86 83       	std	Z+6, r24	; 0x06
    1cd4:	82 83       	std	Z+2, r24	; 0x02
    1cd6:	83 83       	std	Z+3, r24	; 0x03
    1cd8:	84 83       	std	Z+4, r24	; 0x04
    1cda:	85 83       	std	Z+5, r24	; 0x05
    1cdc:	87 83       	std	Z+7, r24	; 0x07
    1cde:	84 b3       	in	r24, 0x14	; 20
    1ce0:	8e 7f       	andi	r24, 0xFE	; 254
    1ce2:	84 bb       	out	0x14, r24	; 20
    1ce4:	38 97       	sbiw	r30, 0x08	; 8
    1ce6:	91 50       	subi	r25, 0x01	; 1
    1ce8:	29 f7       	brne	.-54     	; 0x1cb4 <init_PipeModules+0x106>
    1cea:	00 00       	nop
    1cec:	00 00       	nop
    1cee:	84 b3       	in	r24, 0x14	; 20
    1cf0:	81 60       	ori	r24, 0x01	; 1
    1cf2:	84 bb       	out	0x14, r24	; 20
    1cf4:	84 b3       	in	r24, 0x14	; 20
    1cf6:	8d 7f       	andi	r24, 0xFD	; 253
    1cf8:	84 bb       	out	0x14, r24	; 20
    1cfa:	18 b8       	out	0x08, r1	; 8
    1cfc:	85 e0       	ldi	r24, 0x05	; 5
    1cfe:	8a 95       	dec	r24
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <init_PipeModules+0x150>
    1d02:	00 00       	nop
    1d04:	84 b3       	in	r24, 0x14	; 20
    1d06:	82 60       	ori	r24, 0x02	; 2
    1d08:	84 bb       	out	0x14, r24	; 20
    1d0a:	08 95       	ret

00001d0c <test_PipeModule>:
    1d0c:	88 30       	cpi	r24, 0x08	; 8
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <test_PipeModule+0x6>
    1d10:	6a c0       	rjmp	.+212    	; 0x1de6 <test_PipeModule+0xda>
    1d12:	31 e0       	ldi	r19, 0x01	; 1
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <test_PipeModule+0xc>
    1d16:	33 0f       	add	r19, r19
    1d18:	8a 95       	dec	r24
    1d1a:	ea f7       	brpl	.-6      	; 0x1d16 <test_PipeModule+0xa>
    1d1c:	80 e8       	ldi	r24, 0x80	; 128
    1d1e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1d22:	8b b1       	in	r24, 0x0b	; 11
    1d24:	8f 77       	andi	r24, 0x7F	; 127
    1d26:	8b b9       	out	0x0b, r24	; 11
    1d28:	84 b3       	in	r24, 0x14	; 20
    1d2a:	87 60       	ori	r24, 0x07	; 7
    1d2c:	84 bb       	out	0x14, r24	; 20
    1d2e:	40 e0       	ldi	r20, 0x00	; 0
    1d30:	1d c0       	rjmp	.+58     	; 0x1d6c <test_PipeModule+0x60>
    1d32:	20 fd       	sbrc	r18, 0
    1d34:	03 c0       	rjmp	.+6      	; 0x1d3c <test_PipeModule+0x30>
    1d36:	83 2f       	mov	r24, r19
    1d38:	80 95       	com	r24
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <test_PipeModule+0x32>
    1d3c:	8f ef       	ldi	r24, 0xFF	; 255
    1d3e:	88 b9       	out	0x08, r24	; 8
    1d40:	26 95       	lsr	r18
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	8a 95       	dec	r24
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <test_PipeModule+0x38>
    1d48:	00 c0       	rjmp	.+0      	; 0x1d4a <test_PipeModule+0x3e>
    1d4a:	84 b3       	in	r24, 0x14	; 20
    1d4c:	8e 7f       	andi	r24, 0xFE	; 254
    1d4e:	84 bb       	out	0x14, r24	; 20
    1d50:	82 e0       	ldi	r24, 0x02	; 2
    1d52:	8a 95       	dec	r24
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <test_PipeModule+0x46>
    1d56:	00 c0       	rjmp	.+0      	; 0x1d58 <test_PipeModule+0x4c>
    1d58:	84 b3       	in	r24, 0x14	; 20
    1d5a:	81 60       	ori	r24, 0x01	; 1
    1d5c:	84 bb       	out	0x14, r24	; 20
    1d5e:	9f 5f       	subi	r25, 0xFF	; 255
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <test_PipeModule+0x5a>
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	25 ea       	ldi	r18, 0xA5	; 165
    1d66:	98 30       	cpi	r25, 0x08	; 8
    1d68:	20 f3       	brcs	.-56     	; 0x1d32 <test_PipeModule+0x26>
    1d6a:	4f 5f       	subi	r20, 0xFF	; 255
    1d6c:	44 30       	cpi	r20, 0x04	; 4
    1d6e:	c8 f3       	brcs	.-14     	; 0x1d62 <test_PipeModule+0x56>
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0f c0       	rjmp	.+30     	; 0x1d92 <test_PipeModule+0x86>
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	8a 95       	dec	r24
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <test_PipeModule+0x6a>
    1d7a:	00 c0       	rjmp	.+0      	; 0x1d7c <test_PipeModule+0x70>
    1d7c:	84 b3       	in	r24, 0x14	; 20
    1d7e:	8e 7f       	andi	r24, 0xFE	; 254
    1d80:	84 bb       	out	0x14, r24	; 20
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	8a 95       	dec	r24
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <test_PipeModule+0x78>
    1d88:	00 c0       	rjmp	.+0      	; 0x1d8a <test_PipeModule+0x7e>
    1d8a:	84 b3       	in	r24, 0x14	; 20
    1d8c:	81 60       	ori	r24, 0x01	; 1
    1d8e:	84 bb       	out	0x14, r24	; 20
    1d90:	9f 5f       	subi	r25, 0xFF	; 255
    1d92:	90 32       	cpi	r25, 0x20	; 32
    1d94:	78 f3       	brcs	.-34     	; 0x1d74 <test_PipeModule+0x68>
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	ba 01       	movw	r22, r20
    1d9e:	17 c0       	rjmp	.+46     	; 0x1dce <test_PipeModule+0xc2>
    1da0:	44 0f       	add	r20, r20
    1da2:	55 1f       	adc	r21, r21
    1da4:	66 1f       	adc	r22, r22
    1da6:	77 1f       	adc	r23, r23
    1da8:	82 e0       	ldi	r24, 0x02	; 2
    1daa:	8a 95       	dec	r24
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <test_PipeModule+0x9e>
    1dae:	00 c0       	rjmp	.+0      	; 0x1db0 <test_PipeModule+0xa4>
    1db0:	84 b3       	in	r24, 0x14	; 20
    1db2:	8e 7f       	andi	r24, 0xFE	; 254
    1db4:	84 bb       	out	0x14, r24	; 20
    1db6:	80 b1       	in	r24, 0x00	; 0
    1db8:	83 23       	and	r24, r19
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <test_PipeModule+0xb2>
    1dbc:	41 60       	ori	r20, 0x01	; 1
    1dbe:	82 e0       	ldi	r24, 0x02	; 2
    1dc0:	8a 95       	dec	r24
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <test_PipeModule+0xb4>
    1dc4:	00 c0       	rjmp	.+0      	; 0x1dc6 <test_PipeModule+0xba>
    1dc6:	84 b3       	in	r24, 0x14	; 20
    1dc8:	81 60       	ori	r24, 0x01	; 1
    1dca:	84 bb       	out	0x14, r24	; 20
    1dcc:	9f 5f       	subi	r25, 0xFF	; 255
    1dce:	90 32       	cpi	r25, 0x20	; 32
    1dd0:	38 f3       	brcs	.-50     	; 0x1da0 <test_PipeModule+0x94>
    1dd2:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1dd6:	8b b1       	in	r24, 0x0b	; 11
    1dd8:	80 68       	ori	r24, 0x80	; 128
    1dda:	8b b9       	out	0x0b, r24	; 11
    1ddc:	34 2f       	mov	r19, r20
    1dde:	25 2f       	mov	r18, r21
    1de0:	86 2f       	mov	r24, r22
    1de2:	97 2f       	mov	r25, r23
    1de4:	04 c0       	rjmp	.+8      	; 0x1dee <test_PipeModule+0xe2>
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	80 e0       	ldi	r24, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	63 2f       	mov	r22, r19
    1df0:	72 2f       	mov	r23, r18
    1df2:	08 95       	ret

00001df4 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1df4:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1df6:	e9 e4       	ldi	r30, 0x49	; 73
    1df8:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1dfc:	06 c0       	rjmp	.+12     	; 0x1e0a <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1dfe:	2f ef       	ldi	r18, 0xFF	; 255
    1e00:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1e02:	26 81       	ldd	r18, Z+6	; 0x06
    1e04:	82 2b       	or	r24, r18
		pPipe++;
    1e06:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1e08:	9f 5f       	subi	r25, 0xFF	; 255
    1e0a:	90 32       	cpi	r25, 0x20	; 32
    1e0c:	c0 f3       	brcs	.-16     	; 0x1dfe <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    1e0e:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    1e12:	89 23       	and	r24, r25
    1e14:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
}
    1e18:	89 23       	and	r24, r25
    1e1a:	08 95       	ret

00001e1c <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1e1c:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1e20:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1e24:	81 ff       	sbrs	r24, 1
    1e26:	fc cf       	rjmp	.-8      	; 0x1e20 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1e28:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1e2c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1e30:	81 ff       	sbrs	r24, 1
    1e32:	fc cf       	rjmp	.-8      	; 0x1e2c <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1e34:	08 95       	ret

00001e36 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1e3c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e3e:	f8 94       	cli
    1e40:	06 c0       	rjmp	.+12     	; 0x1e4e <module_StartPowerOn+0x18>
    1e42:	ef e2       	ldi	r30, 0x2F	; 47
    1e44:	f2 e0       	ldi	r31, 0x02	; 2
    1e46:	88 e2       	ldi	r24, 0x28	; 40
    1e48:	82 83       	std	Z+2, r24	; 0x02
    1e4a:	13 82       	std	Z+3, r1	; 0x03
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	81 11       	cpse	r24, r1
    1e50:	f8 cf       	rjmp	.-16     	; 0x1e42 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e52:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e54:	08 95       	ret

00001e56 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1e56:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1e5a:	81 30       	cpi	r24, 0x01	; 1
    1e5c:	31 f5       	brne	.+76     	; 0x1eaa <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1e5e:	ca df       	rcall	.-108    	; 0x1df4 <module_TestAllInputs>
    1e60:	81 11       	cpse	r24, r1
    1e62:	14 c0       	rjmp	.+40     	; 0x1e8c <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1e64:	85 b1       	in	r24, 0x05	; 5
    1e66:	80 64       	ori	r24, 0x40	; 64
    1e68:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1e6a:	82 e1       	ldi	r24, 0x12	; 18
    1e6c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1e70:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e72:	f8 94       	cli
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <module_PowerControl+0x2e>
    1e78:	ef e2       	ldi	r30, 0x2F	; 47
    1e7a:	f2 e0       	ldi	r31, 0x02	; 2
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	82 83       	std	Z+2, r24	; 0x02
    1e80:	13 82       	std	Z+3, r1	; 0x03
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	81 11       	cpse	r24, r1
    1e86:	f8 cf       	rjmp	.-16     	; 0x1e78 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1e88:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1e8a:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1e8c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1e8e:	f8 94       	cli
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	07 c0       	rjmp	.+14     	; 0x1ea2 <module_PowerControl+0x4c>
    1e94:	ef e2       	ldi	r30, 0x2F	; 47
    1e96:	f2 e0       	ldi	r31, 0x02	; 2
    1e98:	8c e0       	ldi	r24, 0x0C	; 12
    1e9a:	82 83       	std	Z+2, r24	; 0x02
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	83 83       	std	Z+3, r24	; 0x03
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	81 11       	cpse	r24, r1
    1ea4:	f7 cf       	rjmp	.-18     	; 0x1e94 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ea6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1ea8:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1eaa:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1eac:	b1 f4       	brne	.+44     	; 0x1eda <module_PowerControl+0x84>
    1eae:	a2 df       	rcall	.-188    	; 0x1df4 <module_TestAllInputs>
		if (testResult == 0){
    1eb0:	81 11       	cpse	r24, r1
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1eb4:	84 e1       	ldi	r24, 0x14	; 20
    1eb6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1eba:	0b c0       	rjmp	.+22     	; 0x1ed2 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	85 e0       	ldi	r24, 0x05	; 5
    1ec4:	be d5       	rcall	.+2940   	; 0x2a42 <log_putError>
			POWER_OFF
    1ec6:	85 b1       	in	r24, 0x05	; 5
    1ec8:	8f 7b       	andi	r24, 0xBF	; 191
    1eca:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1ecc:	80 e8       	ldi	r24, 0x80	; 128
    1ece:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    1ed4:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1ed8:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1ee0:	08 95       	ret

00001ee2 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	0d c0       	rjmp	.+26     	; 0x1f00 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1ee6:	94 30       	cpi	r25, 0x04	; 4
    1ee8:	50 f4       	brcc	.+20     	; 0x1efe <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1eea:	e9 2f       	mov	r30, r25
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	81 11       	cpse	r24, r1
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <softKey_WantLong+0x14>
    1ef2:	2a e0       	ldi	r18, 0x0A	; 10
    1ef4:	01 c0       	rjmp	.+2      	; 0x1ef8 <softKey_WantLong+0x16>
    1ef6:	26 e0       	ldi	r18, 0x06	; 6
    1ef8:	e1 5b       	subi	r30, 0xB1	; 177
    1efa:	fc 4f       	sbci	r31, 0xFC	; 252
    1efc:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1efe:	9f 5f       	subi	r25, 0xFF	; 255
    1f00:	96 30       	cpi	r25, 0x06	; 6
    1f02:	88 f3       	brcs	.-30     	; 0x1ee6 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1f04:	08 95       	ret

00001f06 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1f06:	1f 92       	push	r1
    1f08:	0f 92       	push	r0
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	0f 92       	push	r0
    1f0e:	11 24       	eor	r1, r1
    1f10:	0b b6       	in	r0, 0x3b	; 59
    1f12:	0f 92       	push	r0
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	2f 93       	push	r18
    1f1e:	3f 93       	push	r19
    1f20:	4f 93       	push	r20
    1f22:	5f 93       	push	r21
    1f24:	6f 93       	push	r22
    1f26:	7f 93       	push	r23
    1f28:	8f 93       	push	r24
    1f2a:	9f 93       	push	r25
    1f2c:	af 93       	push	r26
    1f2e:	bf 93       	push	r27
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	ef 93       	push	r30
    1f36:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1f38:	85 b1       	in	r24, 0x05	; 5
    1f3a:	80 68       	ori	r24, 0x80	; 128
    1f3c:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1f3e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1f42:	8f 5f       	subi	r24, 0xFF	; 255
    1f44:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1f48:	83 70       	andi	r24, 0x03	; 3
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <__vector_21+0x4a>
    1f4e:	58 c1       	rjmp	.+688    	; 0x2200 <__stack+0x1>
    1f50:	38 f0       	brcs	.+14     	; 0x1f60 <__vector_21+0x5a>
    1f52:	82 30       	cpi	r24, 0x02	; 2
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <__vector_21+0x52>
    1f56:	a5 c1       	rjmp	.+842    	; 0x22a2 <__stack+0xa3>
    1f58:	83 30       	cpi	r24, 0x03	; 3
    1f5a:	09 f4       	brne	.+2      	; 0x1f5e <__vector_21+0x58>
    1f5c:	ca c1       	rjmp	.+916    	; 0x22f2 <__stack+0xf3>
    1f5e:	05 c2       	rjmp	.+1034   	; 0x236a <__stack+0x16b>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1f60:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1f64:	81 11       	cpse	r24, r1
    1f66:	1a c1       	rjmp	.+564    	; 0x219c <__vector_21+0x296>
    1f68:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1f6c:	96 fd       	sbrc	r25, 6
    1f6e:	16 c1       	rjmp	.+556    	; 0x219c <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1f70:	28 2f       	mov	r18, r24
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	f9 01       	movw	r30, r18
    1f76:	ee 0f       	add	r30, r30
    1f78:	ff 1f       	adc	r31, r31
    1f7a:	e2 0f       	add	r30, r18
    1f7c:	f3 1f       	adc	r31, r19
    1f7e:	ee 0f       	add	r30, r30
    1f80:	ff 1f       	adc	r31, r31
    1f82:	e7 5b       	subi	r30, 0xB7	; 183
    1f84:	fc 4f       	sbci	r31, 0xFC	; 252
    1f86:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1f88:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1f8c:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1f8e:	49 17       	cp	r20, r25
    1f90:	10 f4       	brcc	.+4      	; 0x1f96 <__vector_21+0x90>
		return data1-data2;
    1f92:	94 1b       	sub	r25, r20
    1f94:	03 c0       	rjmp	.+6      	; 0x1f9c <__vector_21+0x96>
	} else {
		return data2-data1;
    1f96:	54 2f       	mov	r21, r20
    1f98:	59 1b       	sub	r21, r25
    1f9a:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1f9c:	94 30       	cpi	r25, 0x04	; 4
    1f9e:	08 f0       	brcs	.+2      	; 0x1fa2 <__vector_21+0x9c>
    1fa0:	fd c0       	rjmp	.+506    	; 0x219c <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1fa2:	81 11       	cpse	r24, r1
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1fa6:	42 32       	cpi	r20, 0x22	; 34
    1fa8:	70 f0       	brcs	.+28     	; 0x1fc6 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1faa:	4f 33       	cpi	r20, 0x3F	; 63
    1fac:	70 f0       	brcs	.+28     	; 0x1fca <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1fae:	48 36       	cpi	r20, 0x68	; 104
    1fb0:	70 f0       	brcs	.+28     	; 0x1fce <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1fb2:	46 39       	cpi	r20, 0x96	; 150
    1fb4:	70 f0       	brcs	.+28     	; 0x1fd2 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1fb6:	4f 3b       	cpi	r20, 0xBF	; 191
    1fb8:	70 f0       	brcs	.+28     	; 0x1fd6 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1fba:	48 3e       	cpi	r20, 0xE8	; 232
    1fbc:	70 f4       	brcc	.+28     	; 0x1fda <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1fbe:	c6 e0       	ldi	r28, 0x06	; 6
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1fc2:	cf ef       	ldi	r28, 0xFF	; 255
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1fc6:	c4 e0       	ldi	r28, 0x04	; 4
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1fca:	c3 e0       	ldi	r28, 0x03	; 3
    1fcc:	07 c0       	rjmp	.+14     	; 0x1fdc <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1fce:	c5 e0       	ldi	r28, 0x05	; 5
    1fd0:	05 c0       	rjmp	.+10     	; 0x1fdc <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1fd2:	c1 e0       	ldi	r28, 0x01	; 1
    1fd4:	03 c0       	rjmp	.+6      	; 0x1fdc <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1fd6:	c2 e0       	ldi	r28, 0x02	; 2
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1fda:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1fdc:	f9 01       	movw	r30, r18
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	e2 0f       	add	r30, r18
    1fe4:	f3 1f       	adc	r31, r19
    1fe6:	ee 0f       	add	r30, r30
    1fe8:	ff 1f       	adc	r31, r31
    1fea:	e7 5b       	subi	r30, 0xB7	; 183
    1fec:	fc 4f       	sbci	r31, 0xFC	; 252
    1fee:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1ff0:	dc 17       	cp	r29, r28
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <__vector_21+0xf0>
    1ff4:	48 c0       	rjmp	.+144    	; 0x2086 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1ff6:	df 3f       	cpi	r29, 0xFF	; 255
    1ff8:	19 f0       	breq	.+6      	; 0x2000 <__vector_21+0xfa>
    1ffa:	cf 3f       	cpi	r28, 0xFF	; 255
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1ffe:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    2000:	f9 01       	movw	r30, r18
    2002:	ee 0f       	add	r30, r30
    2004:	ff 1f       	adc	r31, r31
    2006:	e2 0f       	add	r30, r18
    2008:	f3 1f       	adc	r31, r19
    200a:	ee 0f       	add	r30, r30
    200c:	ff 1f       	adc	r31, r31
    200e:	e7 5b       	subi	r30, 0xB7	; 183
    2010:	fc 4f       	sbci	r31, 0xFC	; 252
    2012:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    2014:	df 3f       	cpi	r29, 0xFF	; 255
    2016:	f9 f4       	brne	.+62     	; 0x2056 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    2018:	c9 01       	movw	r24, r18
    201a:	88 0f       	add	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	fc 01       	movw	r30, r24
    2020:	e2 0f       	add	r30, r18
    2022:	f3 1f       	adc	r31, r19
    2024:	ee 0f       	add	r30, r30
    2026:	ff 1f       	adc	r31, r31
    2028:	e7 5b       	subi	r30, 0xB7	; 183
    202a:	fc 4f       	sbci	r31, 0xFC	; 252
    202c:	15 82       	std	Z+5, r1	; 0x05
    202e:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    2030:	fc 01       	movw	r30, r24
    2032:	e2 0f       	add	r30, r18
    2034:	f3 1f       	adc	r31, r19
    2036:	ee 0f       	add	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	e7 5b       	subi	r30, 0xB7	; 183
    203c:	fc 4f       	sbci	r31, 0xFC	; 252
    203e:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    2040:	ec 2f       	mov	r30, r28
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	e2 5b       	subi	r30, 0xB2	; 178
    2046:	fc 4f       	sbci	r31, 0xFC	; 252
    2048:	80 81       	ld	r24, Z
    204a:	80 ff       	sbrs	r24, 0
    204c:	a7 c0       	rjmp	.+334    	; 0x219c <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    204e:	8c 2f       	mov	r24, r28
    2050:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <message_push>
    2054:	a3 c0       	rjmp	.+326    	; 0x219c <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    2056:	ed 2f       	mov	r30, r29
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	e2 5b       	subi	r30, 0xB2	; 178
    205c:	fc 4f       	sbci	r31, 0xFC	; 252
    205e:	80 81       	ld	r24, Z
    2060:	81 ff       	sbrs	r24, 1
    2062:	9c c0       	rjmp	.+312    	; 0x219c <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    2064:	f9 01       	movw	r30, r18
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	e2 0f       	add	r30, r18
    206c:	f3 1f       	adc	r31, r19
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	e7 5b       	subi	r30, 0xB7	; 183
    2074:	fc 4f       	sbci	r31, 0xFC	; 252
    2076:	83 81       	ldd	r24, Z+3	; 0x03
    2078:	83 70       	andi	r24, 0x03	; 3
    207a:	09 f0       	breq	.+2      	; 0x207e <__vector_21+0x178>
    207c:	8f c0       	rjmp	.+286    	; 0x219c <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    207e:	8d 2f       	mov	r24, r29
    2080:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <message_push>
    2084:	8b c0       	rjmp	.+278    	; 0x219c <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    2086:	cf 3f       	cpi	r28, 0xFF	; 255
    2088:	09 f4       	brne	.+2      	; 0x208c <__vector_21+0x186>
    208a:	88 c0       	rjmp	.+272    	; 0x219c <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    208c:	f9 01       	movw	r30, r18
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	df 01       	movw	r26, r30
    2094:	a2 0f       	add	r26, r18
    2096:	b3 1f       	adc	r27, r19
    2098:	aa 0f       	add	r26, r26
    209a:	bb 1f       	adc	r27, r27
    209c:	a7 5b       	subi	r26, 0xB7	; 183
    209e:	bc 4f       	sbci	r27, 0xFC	; 252
    20a0:	14 96       	adiw	r26, 0x04	; 4
    20a2:	8d 91       	ld	r24, X+
    20a4:	9c 91       	ld	r25, X
    20a6:	15 97       	sbiw	r26, 0x05	; 5
    20a8:	01 96       	adiw	r24, 0x01	; 1
    20aa:	15 96       	adiw	r26, 0x05	; 5
    20ac:	9c 93       	st	X, r25
    20ae:	8e 93       	st	-X, r24
    20b0:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    20b2:	fd 01       	movw	r30, r26
    20b4:	84 81       	ldd	r24, Z+4	; 0x04
    20b6:	95 81       	ldd	r25, Z+5	; 0x05
    20b8:	8b 34       	cpi	r24, 0x4B	; 75
    20ba:	91 05       	cpc	r25, r1
    20bc:	a9 f4       	brne	.+42     	; 0x20e8 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    20be:	ed 2f       	mov	r30, r29
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	e2 5b       	subi	r30, 0xB2	; 178
    20c4:	fc 4f       	sbci	r31, 0xFC	; 252
    20c6:	80 81       	ld	r24, Z
    20c8:	82 ff       	sbrs	r24, 2
    20ca:	0e c0       	rjmp	.+28     	; 0x20e8 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    20cc:	8c 2f       	mov	r24, r28
    20ce:	80 68       	ori	r24, 0x80	; 128
    20d0:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    20d4:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    20d8:	86 e0       	ldi	r24, 0x06	; 6
    20da:	e8 9f       	mul	r30, r24
    20dc:	f0 01       	movw	r30, r0
    20de:	11 24       	eor	r1, r1
    20e0:	e7 5b       	subi	r30, 0xB7	; 183
    20e2:	fc 4f       	sbci	r31, 0xFC	; 252
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    20e8:	ed 2f       	mov	r30, r29
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	e2 5b       	subi	r30, 0xB2	; 178
    20ee:	fc 4f       	sbci	r31, 0xFC	; 252
    20f0:	80 81       	ld	r24, Z
    20f2:	83 ff       	sbrs	r24, 3
    20f4:	53 c0       	rjmp	.+166    	; 0x219c <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    20f6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	fc 01       	movw	r30, r24
    20fe:	ee 0f       	add	r30, r30
    2100:	ff 1f       	adc	r31, r31
    2102:	e8 0f       	add	r30, r24
    2104:	f9 1f       	adc	r31, r25
    2106:	ee 0f       	add	r30, r30
    2108:	ff 1f       	adc	r31, r31
    210a:	e7 5b       	subi	r30, 0xB7	; 183
    210c:	fc 4f       	sbci	r31, 0xFC	; 252
    210e:	23 81       	ldd	r18, Z+3	; 0x03
    2110:	21 11       	cpse	r18, r1
    2112:	1e c0       	rjmp	.+60     	; 0x2150 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2114:	fc 01       	movw	r30, r24
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	e8 0f       	add	r30, r24
    211c:	f9 1f       	adc	r31, r25
    211e:	ee 0f       	add	r30, r30
    2120:	ff 1f       	adc	r31, r31
    2122:	e7 5b       	subi	r30, 0xB7	; 183
    2124:	fc 4f       	sbci	r31, 0xFC	; 252
    2126:	24 81       	ldd	r18, Z+4	; 0x04
    2128:	35 81       	ldd	r19, Z+5	; 0x05
    212a:	22 33       	cpi	r18, 0x32	; 50
    212c:	31 05       	cpc	r19, r1
    212e:	b1 f5       	brne	.+108    	; 0x219c <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2130:	26 e0       	ldi	r18, 0x06	; 6
    2132:	28 9f       	mul	r18, r24
    2134:	f0 01       	movw	r30, r0
    2136:	29 9f       	mul	r18, r25
    2138:	f0 0d       	add	r31, r0
    213a:	11 24       	eor	r1, r1
    213c:	e7 5b       	subi	r30, 0xB7	; 183
    213e:	fc 4f       	sbci	r31, 0xFC	; 252
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2144:	15 82       	std	Z+5, r1	; 0x05
    2146:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2148:	8c 2f       	mov	r24, r28
    214a:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <message_push>
    214e:	26 c0       	rjmp	.+76     	; 0x219c <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    2150:	fc 01       	movw	r30, r24
    2152:	ee 0f       	add	r30, r30
    2154:	ff 1f       	adc	r31, r31
    2156:	e8 0f       	add	r30, r24
    2158:	f9 1f       	adc	r31, r25
    215a:	ee 0f       	add	r30, r30
    215c:	ff 1f       	adc	r31, r31
    215e:	e7 5b       	subi	r30, 0xB7	; 183
    2160:	fc 4f       	sbci	r31, 0xFC	; 252
    2162:	23 81       	ldd	r18, Z+3	; 0x03
    2164:	21 30       	cpi	r18, 0x01	; 1
    2166:	d1 f4       	brne	.+52     	; 0x219c <__vector_21+0x296>
    2168:	26 e0       	ldi	r18, 0x06	; 6
    216a:	28 9f       	mul	r18, r24
    216c:	f0 01       	movw	r30, r0
    216e:	29 9f       	mul	r18, r25
    2170:	f0 0d       	add	r31, r0
    2172:	11 24       	eor	r1, r1
    2174:	e7 5b       	subi	r30, 0xB7	; 183
    2176:	fc 4f       	sbci	r31, 0xFC	; 252
    2178:	24 81       	ldd	r18, Z+4	; 0x04
    217a:	35 81       	ldd	r19, Z+5	; 0x05
    217c:	2c 30       	cpi	r18, 0x0C	; 12
    217e:	31 05       	cpc	r19, r1
    2180:	69 f4       	brne	.+26     	; 0x219c <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    2182:	26 e0       	ldi	r18, 0x06	; 6
    2184:	28 9f       	mul	r18, r24
    2186:	f0 01       	movw	r30, r0
    2188:	29 9f       	mul	r18, r25
    218a:	f0 0d       	add	r31, r0
    218c:	11 24       	eor	r1, r1
    218e:	e7 5b       	subi	r30, 0xB7	; 183
    2190:	fc 4f       	sbci	r31, 0xFC	; 252
    2192:	15 82       	std	Z+5, r1	; 0x05
    2194:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2196:	8c 2f       	mov	r24, r28
    2198:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    219c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    21a0:	8f 5f       	subi	r24, 0xFF	; 255
    21a2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    21a6:	84 30       	cpi	r24, 0x04	; 4
    21a8:	10 f0       	brcs	.+4      	; 0x21ae <__vector_21+0x2a8>
		adcNr = 0;
    21aa:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    21ae:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    21b2:	81 11       	cpse	r24, r1
    21b4:	0c c0       	rjmp	.+24     	; 0x21ce <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	fc 01       	movw	r30, r24
    21ba:	ee 0f       	add	r30, r30
    21bc:	ff 1f       	adc	r31, r31
    21be:	e8 0f       	add	r30, r24
    21c0:	f9 1f       	adc	r31, r25
    21c2:	ee 0f       	add	r30, r30
    21c4:	ff 1f       	adc	r31, r31
    21c6:	e7 5b       	subi	r30, 0xB7	; 183
    21c8:	fc 4f       	sbci	r31, 0xFC	; 252
    21ca:	80 81       	ld	r24, Z
    21cc:	01 c0       	rjmp	.+2      	; 0x21d0 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    21ce:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    21d0:	98 2f       	mov	r25, r24
    21d2:	9f 71       	andi	r25, 0x1F	; 31
    21d4:	90 66       	ori	r25, 0x60	; 96
    21d6:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    21da:	eb e7       	ldi	r30, 0x7B	; 123
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	20 81       	ld	r18, Z
    21e0:	80 72       	andi	r24, 0x20	; 32
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	95 95       	asr	r25
    21e6:	87 95       	ror	r24
    21e8:	95 95       	asr	r25
    21ea:	87 95       	ror	r24
    21ec:	92 2f       	mov	r25, r18
    21ee:	9f 7d       	andi	r25, 0xDF	; 223
    21f0:	89 2b       	or	r24, r25
    21f2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    21f4:	ea e7       	ldi	r30, 0x7A	; 122
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	80 64       	ori	r24, 0x40	; 64
    21fc:	80 83       	st	Z, r24
    21fe:	b5 c0       	rjmp	.+362    	; 0x236a <__stack+0x16b>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    2200:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2204:	80 38       	cpi	r24, 0x80	; 128
    2206:	09 f4       	brne	.+2      	; 0x220a <__stack+0xb>
    2208:	b0 c0       	rjmp	.+352    	; 0x236a <__stack+0x16b>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    220a:	84 b3       	in	r24, 0x14	; 20
    220c:	87 60       	ori	r24, 0x07	; 7
    220e:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2210:	84 b3       	in	r24, 0x14	; 20
    2212:	8b 7f       	andi	r24, 0xFB	; 251
    2214:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    2216:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    221a:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    221c:	e2 e0       	ldi	r30, 0x02	; 2
    221e:	ea 95       	dec	r30
    2220:	f1 f7       	brne	.-4      	; 0x221e <__stack+0x1f>
    2222:	00 c0       	rjmp	.+0      	; 0x2224 <__stack+0x25>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2224:	84 b3       	in	r24, 0x14	; 20
    2226:	84 60       	ori	r24, 0x04	; 4
    2228:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    222a:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    222c:	e1 e4       	ldi	r30, 0x41	; 65
    222e:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2230:	83 81       	ldd	r24, Z+3	; 0x03
    2232:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2234:	84 81       	ldd	r24, Z+4	; 0x04
    2236:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    2238:	84 b3       	in	r24, 0x14	; 20
    223a:	81 60       	ori	r24, 0x01	; 1
    223c:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    223e:	81 81       	ldd	r24, Z+1	; 0x01
    2240:	82 2b       	or	r24, r18
    2242:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2244:	85 81       	ldd	r24, Z+5	; 0x05
    2246:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    2248:	86 81       	ldd	r24, Z+6	; 0x06
    224a:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    224c:	80 b1       	in	r24, 0x00	; 0
    224e:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    2250:	84 b3       	in	r24, 0x14	; 20
    2252:	8e 7f       	andi	r24, 0xFE	; 254
    2254:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    2256:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    2258:	91 50       	subi	r25, 0x01	; 1
    225a:	51 f7       	brne	.-44     	; 0x2230 <__stack+0x31>
	asm("nop");
    225c:	00 00       	nop
	asm("nop");
    225e:	00 00       	nop
	PIPE_CLOCK_H
    2260:	84 b3       	in	r24, 0x14	; 20
    2262:	81 60       	ori	r24, 0x01	; 1
    2264:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    2266:	84 b3       	in	r24, 0x14	; 20
    2268:	8d 7f       	andi	r24, 0xFD	; 253
    226a:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    226c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2270:	82 60       	ori	r24, 0x02	; 2
    2272:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    2276:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    2278:	8b b1       	in	r24, 0x0b	; 11
    227a:	80 68       	ori	r24, 0x80	; 128
    227c:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    227e:	84 b3       	in	r24, 0x14	; 20
    2280:	82 60       	ori	r24, 0x02	; 2
    2282:	84 bb       	out	0x14, r24	; 20
    2284:	72 c0       	rjmp	.+228    	; 0x236a <__stack+0x16b>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    2286:	80 81       	ld	r24, Z
    2288:	81 50       	subi	r24, 0x01	; 1
    228a:	8e 3f       	cpi	r24, 0xFE	; 254
    228c:	38 f4       	brcc	.+14     	; 0x229c <__stack+0x9d>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    228e:	21 81       	ldd	r18, Z+1	; 0x01
    2290:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    2292:	25 30       	cpi	r18, 0x05	; 5
    2294:	10 f0       	brcs	.+4      	; 0x229a <__stack+0x9b>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    2296:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    2298:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    229a:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    229c:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    229e:	9f 5f       	subi	r25, 0xFF	; 255
    22a0:	03 c0       	rjmp	.+6      	; 0x22a8 <__stack+0xa9>
    22a2:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    22a4:	ef e2       	ldi	r30, 0x2F	; 47
    22a6:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    22a8:	99 30       	cpi	r25, 0x09	; 9
    22aa:	68 f3       	brcs	.-38     	; 0x2286 <__stack+0x87>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    22ac:	e1 e4       	ldi	r30, 0x41	; 65
    22ae:	f2 e0       	ldi	r31, 0x02	; 2
    22b0:	80 81       	ld	r24, Z
    22b2:	8f 5f       	subi	r24, 0xFF	; 255
    22b4:	80 83       	st	Z, r24
    22b6:	8a 3f       	cpi	r24, 0xFA	; 250
    22b8:	09 f0       	breq	.+2      	; 0x22bc <__stack+0xbd>
    22ba:	57 c0       	rjmp	.+174    	; 0x236a <__stack+0x16b>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    22c2:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    22c4:	81 81       	ldd	r24, Z+1	; 0x01
    22c6:	8f 5f       	subi	r24, 0xFF	; 255
    22c8:	81 83       	std	Z+1, r24	; 0x01
    22ca:	8c 33       	cpi	r24, 0x3C	; 60
    22cc:	08 f4       	brcc	.+2      	; 0x22d0 <__stack+0xd1>
    22ce:	4d c0       	rjmp	.+154    	; 0x236a <__stack+0x16b>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    22d0:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    22d2:	82 81       	ldd	r24, Z+2	; 0x02
    22d4:	8f 5f       	subi	r24, 0xFF	; 255
    22d6:	82 83       	std	Z+2, r24	; 0x02
    22d8:	8c 33       	cpi	r24, 0x3C	; 60
    22da:	08 f4       	brcc	.+2      	; 0x22de <__stack+0xdf>
    22dc:	46 c0       	rjmp	.+140    	; 0x236a <__stack+0x16b>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    22de:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    22e0:	83 81       	ldd	r24, Z+3	; 0x03
    22e2:	8f 5f       	subi	r24, 0xFF	; 255
    22e4:	83 83       	std	Z+3, r24	; 0x03
    22e6:	84 36       	cpi	r24, 0x64	; 100
    22e8:	08 f4       	brcc	.+2      	; 0x22ec <__stack+0xed>
    22ea:	3f c0       	rjmp	.+126    	; 0x236a <__stack+0x16b>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    22ec:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    22f0:	3c c0       	rjmp	.+120    	; 0x236a <__stack+0x16b>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    22f2:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    22f6:	80 38       	cpi	r24, 0x80	; 128
    22f8:	c1 f1       	breq	.+112    	; 0x236a <__stack+0x16b>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    22fa:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
    22fe:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    2302:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2304:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    2306:	09 e4       	ldi	r16, 0x49	; 73
    2308:	12 e0       	ldi	r17, 0x02	; 2
    230a:	2c c0       	rjmp	.+88     	; 0x2364 <__stack+0x165>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    230c:	f8 01       	movw	r30, r16
    230e:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2310:	83 81       	ldd	r24, Z+3	; 0x03
    2312:	9c 2f       	mov	r25, r28
    2314:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2316:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    2318:	84 81       	ldd	r24, Z+4	; 0x04
    231a:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    231c:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    231e:	25 81       	ldd	r18, Z+5	; 0x05
    2320:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2322:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2324:	86 81       	ldd	r24, Z+6	; 0x06
    2326:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    2328:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    232a:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    232c:	cd 23       	and	r28, r29
    232e:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2330:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2332:	8d 2f       	mov	r24, r29
    2334:	80 95       	com	r24
    2336:	8c 23       	and	r24, r28
    2338:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    233a:	21 f0       	breq	.+8      	; 0x2344 <__stack+0x145>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    233c:	9f 2d       	mov	r25, r15
    233e:	90 62       	ori	r25, 0x20	; 32
    2340:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2344:	c0 95       	com	r28
    2346:	cd 23       	and	r28, r29
    2348:	8c 2f       	mov	r24, r28
    234a:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    234c:	19 f0       	breq	.+6      	; 0x2354 <__stack+0x155>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    234e:	9f 2d       	mov	r25, r15
    2350:	0e 94 16 2d 	call	0x5a2c	; 0x5a2c <pipeMsgPush>
		}
		curPipe++;
    2354:	08 5f       	subi	r16, 0xF8	; 248
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    2358:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    235c:	81 60       	ori	r24, 0x01	; 1
    235e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2362:	f3 94       	inc	r15
    2364:	ff e1       	ldi	r31, 0x1F	; 31
    2366:	ff 15       	cp	r31, r15
    2368:	88 f6       	brcc	.-94     	; 0x230c <__stack+0x10d>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    236a:	85 b1       	in	r24, 0x05	; 5
    236c:	8f 77       	andi	r24, 0x7F	; 127
    236e:	85 b9       	out	0x05, r24	; 5

}
    2370:	ff 91       	pop	r31
    2372:	ef 91       	pop	r30
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	bf 91       	pop	r27
    237a:	af 91       	pop	r26
    237c:	9f 91       	pop	r25
    237e:	8f 91       	pop	r24
    2380:	7f 91       	pop	r23
    2382:	6f 91       	pop	r22
    2384:	5f 91       	pop	r21
    2386:	4f 91       	pop	r20
    2388:	3f 91       	pop	r19
    238a:	2f 91       	pop	r18
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	0f 90       	pop	r0
    2396:	0b be       	out	0x3b, r0	; 59
    2398:	0f 90       	pop	r0
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	0f 90       	pop	r0
    239e:	1f 90       	pop	r1
    23a0:	18 95       	reti

000023a2 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    23a2:	e8 2f       	mov	r30, r24
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	ee 0f       	add	r30, r30
    23a8:	ff 1f       	adc	r31, r31
    23aa:	ee 0f       	add	r30, r30
    23ac:	ff 1f       	adc	r31, r31
    23ae:	ee 0f       	add	r30, r30
    23b0:	ff 1f       	adc	r31, r31
    23b2:	e7 5b       	subi	r30, 0xB7	; 183
    23b4:	fd 4f       	sbci	r31, 0xFD	; 253
    23b6:	60 95       	com	r22
    23b8:	81 81       	ldd	r24, Z+1	; 0x01
    23ba:	68 23       	and	r22, r24
    23bc:	61 83       	std	Z+1, r22	; 0x01
    23be:	08 95       	ret

000023c0 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    23c0:	e8 2f       	mov	r30, r24
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	ee 0f       	add	r30, r30
    23c6:	ff 1f       	adc	r31, r31
    23c8:	ee 0f       	add	r30, r30
    23ca:	ff 1f       	adc	r31, r31
    23cc:	ee 0f       	add	r30, r30
    23ce:	ff 1f       	adc	r31, r31
    23d0:	e7 5b       	subi	r30, 0xB7	; 183
    23d2:	fd 4f       	sbci	r31, 0xFD	; 253
    23d4:	81 81       	ldd	r24, Z+1	; 0x01
    23d6:	68 2b       	or	r22, r24
    23d8:	61 83       	std	Z+1, r22	; 0x01
    23da:	08 95       	ret

000023dc <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    23dc:	8f ef       	ldi	r24, 0xFF	; 255
    23de:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    23e0:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    23e2:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    23e4:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    23e6:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    23e8:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    23ea:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    23ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    23f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    23f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    23f8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    23fc:	8a b1       	in	r24, 0x0a	; 10
    23fe:	80 68       	ori	r24, 0x80	; 128
    2400:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2402:	8b b1       	in	r24, 0x0b	; 11
    2404:	8f 77       	andi	r24, 0x7F	; 127
    2406:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    2408:	84 b1       	in	r24, 0x04	; 4
    240a:	80 64       	ori	r24, 0x40	; 64
    240c:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    240e:	85 b1       	in	r24, 0x05	; 5
    2410:	8f 7b       	andi	r24, 0xBF	; 191
    2412:	85 b9       	out	0x05, r24	; 5
	DEBUG_PORT_INIT
    2414:	84 b1       	in	r24, 0x04	; 4
    2416:	80 63       	ori	r24, 0x30	; 48
    2418:	84 b9       	out	0x04, r24	; 4
    241a:	08 95       	ret

0000241c <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    241c:	88 23       	and	r24, r24
    241e:	34 f4       	brge	.+12     	; 0x242c <lcd_write_nibble+0x10>
    2420:	e2 e0       	ldi	r30, 0x02	; 2
    2422:	f1 e0       	ldi	r31, 0x01	; 1
    2424:	90 81       	ld	r25, Z
    2426:	90 61       	ori	r25, 0x10	; 16
    2428:	90 83       	st	Z, r25
    242a:	05 c0       	rjmp	.+10     	; 0x2436 <lcd_write_nibble+0x1a>
    242c:	e2 e0       	ldi	r30, 0x02	; 2
    242e:	f1 e0       	ldi	r31, 0x01	; 1
    2430:	90 81       	ld	r25, Z
    2432:	9f 7e       	andi	r25, 0xEF	; 239
    2434:	90 83       	st	Z, r25
    2436:	86 ff       	sbrs	r24, 6
    2438:	06 c0       	rjmp	.+12     	; 0x2446 <lcd_write_nibble+0x2a>
    243a:	e2 e0       	ldi	r30, 0x02	; 2
    243c:	f1 e0       	ldi	r31, 0x01	; 1
    243e:	90 81       	ld	r25, Z
    2440:	98 60       	ori	r25, 0x08	; 8
    2442:	90 83       	st	Z, r25
    2444:	05 c0       	rjmp	.+10     	; 0x2450 <lcd_write_nibble+0x34>
    2446:	e2 e0       	ldi	r30, 0x02	; 2
    2448:	f1 e0       	ldi	r31, 0x01	; 1
    244a:	90 81       	ld	r25, Z
    244c:	97 7f       	andi	r25, 0xF7	; 247
    244e:	90 83       	st	Z, r25
    2450:	85 ff       	sbrs	r24, 5
    2452:	04 c0       	rjmp	.+8      	; 0x245c <lcd_write_nibble+0x40>
    2454:	9e b1       	in	r25, 0x0e	; 14
    2456:	98 60       	ori	r25, 0x08	; 8
    2458:	9e b9       	out	0x0e, r25	; 14
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <lcd_write_nibble+0x46>
    245c:	9e b1       	in	r25, 0x0e	; 14
    245e:	97 7f       	andi	r25, 0xF7	; 247
    2460:	9e b9       	out	0x0e, r25	; 14
    2462:	84 ff       	sbrs	r24, 4
    2464:	04 c0       	rjmp	.+8      	; 0x246e <lcd_write_nibble+0x52>
    2466:	84 b3       	in	r24, 0x14	; 20
    2468:	80 62       	ori	r24, 0x20	; 32
    246a:	84 bb       	out	0x14, r24	; 20
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <lcd_write_nibble+0x58>
    246e:	84 b3       	in	r24, 0x14	; 20
    2470:	8f 7d       	andi	r24, 0xDF	; 223
    2472:	84 bb       	out	0x14, r24	; 20
    2474:	e2 e0       	ldi	r30, 0x02	; 2
    2476:	f1 e0       	ldi	r31, 0x01	; 1
    2478:	80 81       	ld	r24, Z
    247a:	80 64       	ori	r24, 0x40	; 64
    247c:	80 83       	st	Z, r24
    247e:	85 e0       	ldi	r24, 0x05	; 5
    2480:	8a 95       	dec	r24
    2482:	f1 f7       	brne	.-4      	; 0x2480 <lcd_write_nibble+0x64>
    2484:	00 00       	nop
    2486:	80 81       	ld	r24, Z
    2488:	8f 7b       	andi	r24, 0xBF	; 191
    248a:	80 83       	st	Z, r24
    248c:	85 e0       	ldi	r24, 0x05	; 5
    248e:	8a 95       	dec	r24
    2490:	f1 f7       	brne	.-4      	; 0x248e <lcd_write_nibble+0x72>
    2492:	00 00       	nop
    2494:	08 95       	ret

00002496 <lcd_write_character>:
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	d8 2f       	mov	r29, r24
    249c:	c5 b1       	in	r28, 0x05	; 5
    249e:	c0 73       	andi	r28, 0x30	; 48
    24a0:	85 b1       	in	r24, 0x05	; 5
    24a2:	8f 7c       	andi	r24, 0xCF	; 207
    24a4:	80 61       	ori	r24, 0x10	; 16
    24a6:	85 b9       	out	0x05, r24	; 5
    24a8:	e2 e0       	ldi	r30, 0x02	; 2
    24aa:	f1 e0       	ldi	r31, 0x01	; 1
    24ac:	80 81       	ld	r24, Z
    24ae:	80 62       	ori	r24, 0x20	; 32
    24b0:	80 83       	st	Z, r24
    24b2:	80 81       	ld	r24, Z
    24b4:	8f 7b       	andi	r24, 0xBF	; 191
    24b6:	80 83       	st	Z, r24
    24b8:	8d 2f       	mov	r24, r29
    24ba:	b0 df       	rcall	.-160    	; 0x241c <lcd_write_nibble>
    24bc:	8d 2f       	mov	r24, r29
    24be:	82 95       	swap	r24
    24c0:	80 7f       	andi	r24, 0xF0	; 240
    24c2:	ac df       	rcall	.-168    	; 0x241c <lcd_write_nibble>
    24c4:	8f ef       	ldi	r24, 0xFF	; 255
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <lcd_write_character+0x32>
    24cc:	00 c0       	rjmp	.+0      	; 0x24ce <lcd_write_character+0x38>
    24ce:	00 00       	nop
    24d0:	85 b1       	in	r24, 0x05	; 5
    24d2:	80 73       	andi	r24, 0x30	; 48
    24d4:	c8 2b       	or	r28, r24
    24d6:	c5 b9       	out	0x05, r28	; 5
    24d8:	df 91       	pop	r29
    24da:	cf 91       	pop	r28
    24dc:	08 95       	ret

000024de <lcd_write_command>:
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
    24e2:	d8 2f       	mov	r29, r24
    24e4:	c5 b1       	in	r28, 0x05	; 5
    24e6:	c0 73       	andi	r28, 0x30	; 48
    24e8:	85 b1       	in	r24, 0x05	; 5
    24ea:	8f 7c       	andi	r24, 0xCF	; 207
    24ec:	80 61       	ori	r24, 0x10	; 16
    24ee:	85 b9       	out	0x05, r24	; 5
    24f0:	e2 e0       	ldi	r30, 0x02	; 2
    24f2:	f1 e0       	ldi	r31, 0x01	; 1
    24f4:	80 81       	ld	r24, Z
    24f6:	8f 7d       	andi	r24, 0xDF	; 223
    24f8:	80 83       	st	Z, r24
    24fa:	80 81       	ld	r24, Z
    24fc:	8f 7b       	andi	r24, 0xBF	; 191
    24fe:	80 83       	st	Z, r24
    2500:	8d 2f       	mov	r24, r29
    2502:	8c df       	rcall	.-232    	; 0x241c <lcd_write_nibble>
    2504:	8d 2f       	mov	r24, r29
    2506:	82 95       	swap	r24
    2508:	80 7f       	andi	r24, 0xF0	; 240
    250a:	88 df       	rcall	.-240    	; 0x241c <lcd_write_nibble>
    250c:	d1 50       	subi	r29, 0x01	; 1
    250e:	d2 30       	cpi	r29, 0x02	; 2
    2510:	38 f4       	brcc	.+14     	; 0x2520 <lcd_write_command+0x42>
    2512:	8f e0       	ldi	r24, 0x0F	; 15
    2514:	97 e2       	ldi	r25, 0x27	; 39
    2516:	01 97       	sbiw	r24, 0x01	; 1
    2518:	f1 f7       	brne	.-4      	; 0x2516 <lcd_write_command+0x38>
    251a:	00 c0       	rjmp	.+0      	; 0x251c <lcd_write_command+0x3e>
    251c:	00 00       	nop
    251e:	06 c0       	rjmp	.+12     	; 0x252c <lcd_write_command+0x4e>
    2520:	8f ef       	ldi	r24, 0xFF	; 255
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <lcd_write_command+0x46>
    2528:	00 c0       	rjmp	.+0      	; 0x252a <lcd_write_command+0x4c>
    252a:	00 00       	nop
    252c:	85 b1       	in	r24, 0x05	; 5
    252e:	80 73       	andi	r24, 0x30	; 48
    2530:	c8 2b       	or	r28, r24
    2532:	c5 b9       	out	0x05, r28	; 5
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <lcd_init>:
    253a:	cf 93       	push	r28
    253c:	c5 b1       	in	r28, 0x05	; 5
    253e:	c0 73       	andi	r28, 0x30	; 48
    2540:	85 b1       	in	r24, 0x05	; 5
    2542:	8f 7c       	andi	r24, 0xCF	; 207
    2544:	80 61       	ori	r24, 0x10	; 16
    2546:	85 b9       	out	0x05, r24	; 5
    2548:	e1 e0       	ldi	r30, 0x01	; 1
    254a:	f1 e0       	ldi	r31, 0x01	; 1
    254c:	80 81       	ld	r24, Z
    254e:	80 61       	ori	r24, 0x10	; 16
    2550:	80 83       	st	Z, r24
    2552:	80 81       	ld	r24, Z
    2554:	88 60       	ori	r24, 0x08	; 8
    2556:	80 83       	st	Z, r24
    2558:	8d b1       	in	r24, 0x0d	; 13
    255a:	88 60       	ori	r24, 0x08	; 8
    255c:	8d b9       	out	0x0d, r24	; 13
    255e:	83 b3       	in	r24, 0x13	; 19
    2560:	80 62       	ori	r24, 0x20	; 32
    2562:	83 bb       	out	0x13, r24	; 19
    2564:	80 81       	ld	r24, Z
    2566:	80 64       	ori	r24, 0x40	; 64
    2568:	80 83       	st	Z, r24
    256a:	80 81       	ld	r24, Z
    256c:	80 62       	ori	r24, 0x20	; 32
    256e:	80 83       	st	Z, r24
    2570:	2f ef       	ldi	r18, 0xFF	; 255
    2572:	81 ee       	ldi	r24, 0xE1	; 225
    2574:	94 e0       	ldi	r25, 0x04	; 4
    2576:	21 50       	subi	r18, 0x01	; 1
    2578:	80 40       	sbci	r24, 0x00	; 0
    257a:	90 40       	sbci	r25, 0x00	; 0
    257c:	e1 f7       	brne	.-8      	; 0x2576 <lcd_init+0x3c>
    257e:	00 c0       	rjmp	.+0      	; 0x2580 <lcd_init+0x46>
    2580:	00 00       	nop
    2582:	e2 e0       	ldi	r30, 0x02	; 2
    2584:	f1 e0       	ldi	r31, 0x01	; 1
    2586:	80 81       	ld	r24, Z
    2588:	8f 7d       	andi	r24, 0xDF	; 223
    258a:	80 83       	st	Z, r24
    258c:	80 81       	ld	r24, Z
    258e:	8f 7b       	andi	r24, 0xBF	; 191
    2590:	80 83       	st	Z, r24
    2592:	80 e3       	ldi	r24, 0x30	; 48
    2594:	43 df       	rcall	.-378    	; 0x241c <lcd_write_nibble>
    2596:	8f e1       	ldi	r24, 0x1F	; 31
    2598:	9e e4       	ldi	r25, 0x4E	; 78
    259a:	01 97       	sbiw	r24, 0x01	; 1
    259c:	f1 f7       	brne	.-4      	; 0x259a <lcd_init+0x60>
    259e:	00 c0       	rjmp	.+0      	; 0x25a0 <lcd_init+0x66>
    25a0:	00 00       	nop
    25a2:	80 e3       	ldi	r24, 0x30	; 48
    25a4:	3b df       	rcall	.-394    	; 0x241c <lcd_write_nibble>
    25a6:	8f e1       	ldi	r24, 0x1F	; 31
    25a8:	9e e4       	ldi	r25, 0x4E	; 78
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <lcd_init+0x70>
    25ae:	00 c0       	rjmp	.+0      	; 0x25b0 <lcd_init+0x76>
    25b0:	00 00       	nop
    25b2:	80 e3       	ldi	r24, 0x30	; 48
    25b4:	33 df       	rcall	.-410    	; 0x241c <lcd_write_nibble>
    25b6:	8f e1       	ldi	r24, 0x1F	; 31
    25b8:	9e e4       	ldi	r25, 0x4E	; 78
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <lcd_init+0x80>
    25be:	00 c0       	rjmp	.+0      	; 0x25c0 <lcd_init+0x86>
    25c0:	00 00       	nop
    25c2:	88 e2       	ldi	r24, 0x28	; 40
    25c4:	2b df       	rcall	.-426    	; 0x241c <lcd_write_nibble>
    25c6:	8f ef       	ldi	r24, 0xFF	; 255
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <lcd_init+0x90>
    25ce:	00 c0       	rjmp	.+0      	; 0x25d0 <lcd_init+0x96>
    25d0:	00 00       	nop
    25d2:	88 e2       	ldi	r24, 0x28	; 40
    25d4:	84 df       	rcall	.-248    	; 0x24de <lcd_write_command>
    25d6:	88 e0       	ldi	r24, 0x08	; 8
    25d8:	82 df       	rcall	.-252    	; 0x24de <lcd_write_command>
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	80 df       	rcall	.-256    	; 0x24de <lcd_write_command>
    25de:	86 e0       	ldi	r24, 0x06	; 6
    25e0:	7e df       	rcall	.-260    	; 0x24de <lcd_write_command>
    25e2:	8c e0       	ldi	r24, 0x0C	; 12
    25e4:	7c df       	rcall	.-264    	; 0x24de <lcd_write_command>
    25e6:	85 b1       	in	r24, 0x05	; 5
    25e8:	80 73       	andi	r24, 0x30	; 48
    25ea:	c8 2b       	or	r28, r24
    25ec:	c5 b9       	out	0x05, r28	; 5
    25ee:	cf 91       	pop	r28
    25f0:	08 95       	ret

000025f2 <lcd_goto>:
    25f2:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    25f6:	80 58       	subi	r24, 0x80	; 128
    25f8:	72 cf       	rjmp	.-284    	; 0x24de <lcd_write_command>
    25fa:	08 95       	ret

000025fc <lcd_clrscr>:
    25fc:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	6d df       	rcall	.-294    	; 0x24de <lcd_write_command>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	e8 e5       	ldi	r30, 0x58	; 88
    2608:	f3 e0       	ldi	r31, 0x03	; 3
    260a:	04 c0       	rjmp	.+8      	; 0x2614 <lcd_clrscr+0x18>
    260c:	90 e2       	ldi	r25, 0x20	; 32
    260e:	90 83       	st	Z, r25
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	31 96       	adiw	r30, 0x01	; 1
    2614:	80 35       	cpi	r24, 0x50	; 80
    2616:	d0 f3       	brcs	.-12     	; 0x260c <lcd_clrscr+0x10>
    2618:	08 95       	ret

0000261a <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    261a:	84 31       	cpi	r24, 0x14	; 20
    261c:	98 f0       	brcs	.+38     	; 0x2644 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    261e:	90 ec       	ldi	r25, 0xC0	; 192
    2620:	98 0f       	add	r25, r24
    2622:	94 31       	cpi	r25, 0x14	; 20
    2624:	10 f4       	brcc	.+4      	; 0x262a <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    2626:	8c 52       	subi	r24, 0x2C	; 44
    2628:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    262a:	9c ee       	ldi	r25, 0xEC	; 236
    262c:	98 0f       	add	r25, r24
    262e:	94 31       	cpi	r25, 0x14	; 20
    2630:	10 f4       	brcc	.+4      	; 0x2636 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    2632:	8c 5e       	subi	r24, 0xEC	; 236
    2634:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    2636:	9c ea       	ldi	r25, 0xAC	; 172
    2638:	98 0f       	add	r25, r24
    263a:	94 31       	cpi	r25, 0x14	; 20
    263c:	10 f4       	brcc	.+4      	; 0x2642 <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    263e:	88 51       	subi	r24, 0x18	; 24
    2640:	08 95       	ret
	}
	return 0xFF;
    2642:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    2644:	08 95       	ret

00002646 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    264c:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2650:	8c 2f       	mov	r24, r28
    2652:	e3 df       	rcall	.-58     	; 0x261a <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2654:	8f 3f       	cpi	r24, 0xFF	; 255
    2656:	31 f1       	breq	.+76     	; 0x26a4 <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    2658:	d1 3a       	cpi	r29, 0xA1	; 161
    265a:	81 f0       	breq	.+32     	; 0x267c <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    265c:	d0 38       	cpi	r29, 0x80	; 128
    265e:	81 f0       	breq	.+32     	; 0x2680 <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2660:	d5 3a       	cpi	r29, 0xA5	; 165
    2662:	81 f0       	breq	.+32     	; 0x2684 <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    2664:	da 30       	cpi	r29, 0x0A	; 10
    2666:	81 f0       	breq	.+32     	; 0x2688 <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    2668:	d2 3e       	cpi	r29, 0xE2	; 226
    266a:	81 f0       	breq	.+32     	; 0x268c <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    266c:	d5 3f       	cpi	r29, 0xF5	; 245
    266e:	81 f0       	breq	.+32     	; 0x2690 <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2670:	df 3e       	cpi	r29, 0xEF	; 239
    2672:	81 f0       	breq	.+32     	; 0x2694 <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    2674:	d1 3e       	cpi	r29, 0xE1	; 225
    2676:	81 f0       	breq	.+32     	; 0x2698 <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    2678:	9d 2f       	mov	r25, r29
    267a:	0f c0       	rjmp	.+30     	; 0x269a <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    267c:	90 e2       	ldi	r25, 0x20	; 32
    267e:	0d c0       	rjmp	.+26     	; 0x269a <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    2680:	90 e2       	ldi	r25, 0x20	; 32
    2682:	0b c0       	rjmp	.+22     	; 0x269a <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    2684:	94 e1       	ldi	r25, 0x14	; 20
    2686:	09 c0       	rjmp	.+18     	; 0x269a <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    2688:	95 e1       	ldi	r25, 0x15	; 21
    268a:	07 c0       	rjmp	.+14     	; 0x269a <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    268c:	93 e1       	ldi	r25, 0x13	; 19
    268e:	05 c0       	rjmp	.+10     	; 0x269a <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    2690:	92 e1       	ldi	r25, 0x12	; 18
    2692:	03 c0       	rjmp	.+6      	; 0x269a <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    2694:	91 e1       	ldi	r25, 0x11	; 17
    2696:	01 c0       	rjmp	.+2      	; 0x269a <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    2698:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    269a:	e8 2f       	mov	r30, r24
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	e8 5a       	subi	r30, 0xA8	; 168
    26a0:	fc 4f       	sbci	r31, 0xFC	; 252
    26a2:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    26a4:	cf 5f       	subi	r28, 0xFF	; 255
    26a6:	cf 77       	andi	r28, 0x7F	; 127
    26a8:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    26ac:	8d 2f       	mov	r24, r29
    26ae:	f3 de       	rcall	.-538    	; 0x2496 <lcd_write_character>
}
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	08 95       	ret

000026b6 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	fc 01       	movw	r30, r24
	if (s != NULL){
    26bc:	89 2b       	or	r24, r25
    26be:	19 f4       	brne	.+6      	; 0x26c6 <lcd_puts+0x10>
    26c0:	07 c0       	rjmp	.+14     	; 0x26d0 <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    26c2:	c1 df       	rcall	.-126    	; 0x2646 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    26c4:	fe 01       	movw	r30, r28
    26c6:	ef 01       	movw	r28, r30
    26c8:	21 96       	adiw	r28, 0x01	; 1
    26ca:	80 81       	ld	r24, Z
    26cc:	81 11       	cpse	r24, r1
    26ce:	f9 cf       	rjmp	.-14     	; 0x26c2 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	08 95       	ret

000026d6 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    26d6:	cf 93       	push	r28
    26d8:	df 93       	push	r29
    26da:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    26dc:	89 2b       	or	r24, r25
    26de:	19 f4       	brne	.+6      	; 0x26e6 <lcd_puts_P+0x10>
    26e0:	07 c0       	rjmp	.+14     	; 0x26f0 <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    26e2:	b1 df       	rcall	.-158    	; 0x2646 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    26e4:	fe 01       	movw	r30, r28
    26e6:	ef 01       	movw	r28, r30
    26e8:	21 96       	adiw	r28, 0x01	; 1
    26ea:	84 91       	lpm	r24, Z
    26ec:	81 11       	cpse	r24, r1
    26ee:	f9 cf       	rjmp	.-14     	; 0x26e2 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    26f6:	82 ed       	ldi	r24, 0xD2	; 210
    26f8:	93 e0       	ldi	r25, 0x03	; 3
    26fa:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    26fe:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2702:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2706:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    270a:	08 95       	ret

0000270c <log_count>:
    270c:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2710:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2714:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    2718:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    271c:	82 17       	cp	r24, r18
    271e:	93 07       	cpc	r25, r19
    2720:	48 f0       	brcs	.+18     	; 0x2734 <log_count+0x28>
    2722:	82 1b       	sub	r24, r18
    2724:	93 0b       	sbc	r25, r19
    2726:	95 95       	asr	r25
    2728:	87 95       	ror	r24
    272a:	9d ec       	ldi	r25, 0xCD	; 205
    272c:	89 9f       	mul	r24, r25
    272e:	80 2d       	mov	r24, r0
    2730:	11 24       	eor	r1, r1
    2732:	08 95       	ret
    2734:	80 57       	subi	r24, 0x70	; 112
    2736:	9e 4f       	sbci	r25, 0xFE	; 254
    2738:	82 1b       	sub	r24, r18
    273a:	93 0b       	sbc	r25, r19
    273c:	95 95       	asr	r25
    273e:	87 95       	ror	r24
    2740:	9d ec       	ldi	r25, 0xCD	; 205
    2742:	89 9f       	mul	r24, r25
    2744:	80 2d       	mov	r24, r0
    2746:	11 24       	eor	r1, r1
    2748:	08 95       	ret

0000274a <log_getLog>:
    274a:	cf 93       	push	r28
    274c:	c8 2f       	mov	r28, r24
    274e:	de df       	rcall	.-68     	; 0x270c <log_count>
    2750:	c8 17       	cp	r28, r24
    2752:	f8 f4       	brcc	.+62     	; 0x2792 <log_getLog+0x48>
    2754:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    2758:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    275c:	8c 2f       	mov	r24, r28
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	9c 01       	movw	r18, r24
    2762:	22 0f       	add	r18, r18
    2764:	33 1f       	adc	r19, r19
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	28 0f       	add	r18, r24
    2774:	39 1f       	adc	r19, r25
    2776:	ca 01       	movw	r24, r20
    2778:	82 0f       	add	r24, r18
    277a:	93 1f       	adc	r25, r19
    277c:	65 e0       	ldi	r22, 0x05	; 5
    277e:	88 35       	cpi	r24, 0x58	; 88
    2780:	96 07       	cpc	r25, r22
    2782:	49 f0       	breq	.+18     	; 0x2796 <log_getLog+0x4c>
    2784:	40 f0       	brcs	.+16     	; 0x2796 <log_getLog+0x4c>
    2786:	20 59       	subi	r18, 0x90	; 144
    2788:	31 40       	sbci	r19, 0x01	; 1
    278a:	ca 01       	movw	r24, r20
    278c:	82 0f       	add	r24, r18
    278e:	93 1f       	adc	r25, r19
    2790:	02 c0       	rjmp	.+4      	; 0x2796 <log_getLog+0x4c>
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	cf 91       	pop	r28
    2798:	08 95       	ret

0000279a <log_getErrorText>:
    279a:	d7 df       	rcall	.-82     	; 0x274a <log_getLog>
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	f1 f1       	breq	.+124    	; 0x281c <log_getErrorText+0x82>
    27a0:	fc 01       	movw	r30, r24
    27a2:	36 81       	ldd	r19, Z+6	; 0x06
    27a4:	67 81       	ldd	r22, Z+7	; 0x07
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	34 c0       	rjmp	.+104    	; 0x2812 <log_getErrorText+0x78>
    27aa:	42 2f       	mov	r20, r18
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	fa 01       	movw	r30, r20
    27b0:	ee 0f       	add	r30, r30
    27b2:	ff 1f       	adc	r31, r31
    27b4:	cf 01       	movw	r24, r30
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	88 0f       	add	r24, r24
    27bc:	99 1f       	adc	r25, r25
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	e8 0f       	add	r30, r24
    27c4:	f9 1f       	adc	r31, r25
    27c6:	e6 59       	subi	r30, 0x96	; 150
    27c8:	fe 4f       	sbci	r31, 0xFE	; 254
    27ca:	84 91       	lpm	r24, Z
    27cc:	38 13       	cpse	r19, r24
    27ce:	20 c0       	rjmp	.+64     	; 0x2810 <log_getErrorText+0x76>
    27d0:	fa 01       	movw	r30, r20
    27d2:	ee 0f       	add	r30, r30
    27d4:	ff 1f       	adc	r31, r31
    27d6:	cf 01       	movw	r24, r30
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	88 0f       	add	r24, r24
    27de:	99 1f       	adc	r25, r25
    27e0:	88 0f       	add	r24, r24
    27e2:	99 1f       	adc	r25, r25
    27e4:	e8 0f       	add	r30, r24
    27e6:	f9 1f       	adc	r31, r25
    27e8:	e5 59       	subi	r30, 0x95	; 149
    27ea:	fe 4f       	sbci	r31, 0xFE	; 254
    27ec:	84 91       	lpm	r24, Z
    27ee:	68 13       	cpse	r22, r24
    27f0:	0f c0       	rjmp	.+30     	; 0x2810 <log_getErrorText+0x76>
    27f2:	44 0f       	add	r20, r20
    27f4:	55 1f       	adc	r21, r21
    27f6:	ca 01       	movw	r24, r20
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	88 0f       	add	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	48 0f       	add	r20, r24
    2806:	59 1f       	adc	r21, r25
    2808:	ca 01       	movw	r24, r20
    280a:	84 59       	subi	r24, 0x94	; 148
    280c:	9e 4f       	sbci	r25, 0xFE	; 254
    280e:	08 95       	ret
    2810:	2f 5f       	subi	r18, 0xFF	; 255
    2812:	20 31       	cpi	r18, 0x10	; 16
    2814:	50 f2       	brcs	.-108    	; 0x27aa <log_getErrorText+0x10>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	08 95       	ret
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	08 95       	ret

00002822 <logCheckUnreadErrorLogs>:
    2822:	cf 93       	push	r28
    2824:	73 df       	rcall	.-282    	; 0x270c <log_count>
    2826:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    282a:	81 11       	cpse	r24, r1
    282c:	14 c0       	rjmp	.+40     	; 0x2856 <logCheckUnreadErrorLogs+0x34>
    282e:	17 c0       	rjmp	.+46     	; 0x285e <logCheckUnreadErrorLogs+0x3c>
    2830:	8c 2f       	mov	r24, r28
    2832:	8b df       	rcall	.-234    	; 0x274a <log_getLog>
    2834:	00 97       	sbiw	r24, 0x00	; 0
    2836:	61 f0       	breq	.+24     	; 0x2850 <logCheckUnreadErrorLogs+0x2e>
    2838:	fc 01       	movw	r30, r24
    283a:	24 81       	ldd	r18, Z+4	; 0x04
    283c:	20 32       	cpi	r18, 0x20	; 32
    283e:	51 f0       	breq	.+20     	; 0x2854 <logCheckUnreadErrorLogs+0x32>
    2840:	95 81       	ldd	r25, Z+5	; 0x05
    2842:	8c 2f       	mov	r24, r28
    2844:	95 34       	cpi	r25, 0x45	; 69
    2846:	39 f4       	brne	.+14     	; 0x2856 <logCheckUnreadErrorLogs+0x34>
    2848:	8f ef       	ldi	r24, 0xFF	; 255
    284a:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    284e:	07 c0       	rjmp	.+14     	; 0x285e <logCheckUnreadErrorLogs+0x3c>
    2850:	8c 2f       	mov	r24, r28
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <logCheckUnreadErrorLogs+0x34>
    2854:	8c 2f       	mov	r24, r28
    2856:	cf ef       	ldi	r28, 0xFF	; 255
    2858:	c8 0f       	add	r28, r24
    285a:	81 11       	cpse	r24, r1
    285c:	e9 cf       	rjmp	.-46     	; 0x2830 <logCheckUnreadErrorLogs+0xe>
    285e:	cf 91       	pop	r28
    2860:	08 95       	ret

00002862 <log_getShortTextFromPtr>:
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	09 f4       	brne	.+2      	; 0x286e <log_getShortTextFromPtr+0xc>
    286c:	7b c0       	rjmp	.+246    	; 0x2964 <log_getShortTextFromPtr+0x102>
    286e:	16 2f       	mov	r17, r22
    2870:	ec 01       	movw	r28, r24
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	88 23       	and	r24, r24
    2876:	79 f0       	breq	.+30     	; 0x2896 <log_getShortTextFromPtr+0x34>
    2878:	6a ea       	ldi	r22, 0xAA	; 170
    287a:	73 e0       	ldi	r23, 0x03	; 3
    287c:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    2880:	bc 01       	movw	r22, r24
    2882:	6f 5f       	subi	r22, 0xFF	; 255
    2884:	7f 4f       	sbci	r23, 0xFF	; 255
    2886:	28 e6       	ldi	r18, 0x68	; 104
    2888:	fc 01       	movw	r30, r24
    288a:	20 83       	st	Z, r18
    288c:	8a 81       	ldd	r24, Y+2	; 0x02
    288e:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    2892:	dc 01       	movw	r26, r24
    2894:	2f c0       	rjmp	.+94     	; 0x28f4 <log_getShortTextFromPtr+0x92>
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	88 23       	and	r24, r24
    289a:	79 f0       	breq	.+30     	; 0x28ba <log_getShortTextFromPtr+0x58>
    289c:	6a ea       	ldi	r22, 0xAA	; 170
    289e:	73 e0       	ldi	r23, 0x03	; 3
    28a0:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    28a4:	bc 01       	movw	r22, r24
    28a6:	6f 5f       	subi	r22, 0xFF	; 255
    28a8:	7f 4f       	sbci	r23, 0xFF	; 255
    28aa:	2d e6       	ldi	r18, 0x6D	; 109
    28ac:	fc 01       	movw	r30, r24
    28ae:	20 83       	st	Z, r18
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    28b6:	dc 01       	movw	r26, r24
    28b8:	1d c0       	rjmp	.+58     	; 0x28f4 <log_getShortTextFromPtr+0x92>
    28ba:	6a ea       	ldi	r22, 0xAA	; 170
    28bc:	73 e0       	ldi	r23, 0x03	; 3
    28be:	89 81       	ldd	r24, Y+1	; 0x01
    28c0:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    28c4:	fc 01       	movw	r30, r24
    28c6:	83 e7       	ldi	r24, 0x73	; 115
    28c8:	80 83       	st	Z, r24
    28ca:	98 81       	ld	r25, Y
    28cc:	99 0f       	add	r25, r25
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	02 c0       	rjmp	.+4      	; 0x28d6 <log_getShortTextFromPtr+0x74>
    28d2:	99 51       	subi	r25, 0x19	; 25
    28d4:	2f 5f       	subi	r18, 0xFF	; 255
    28d6:	99 31       	cpi	r25, 0x19	; 25
    28d8:	e0 f7       	brcc	.-8      	; 0x28d2 <log_getShortTextFromPtr+0x70>
    28da:	20 5d       	subi	r18, 0xD0	; 208
    28dc:	21 83       	std	Z+1, r18	; 0x01
    28de:	99 0f       	add	r25, r25
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	02 c0       	rjmp	.+4      	; 0x28e8 <log_getShortTextFromPtr+0x86>
    28e4:	95 50       	subi	r25, 0x05	; 5
    28e6:	2f 5f       	subi	r18, 0xFF	; 255
    28e8:	95 30       	cpi	r25, 0x05	; 5
    28ea:	e0 f7       	brcc	.-8      	; 0x28e4 <log_getShortTextFromPtr+0x82>
    28ec:	df 01       	movw	r26, r30
    28ee:	13 96       	adiw	r26, 0x03	; 3
    28f0:	20 5d       	subi	r18, 0xD0	; 208
    28f2:	22 83       	std	Z+2, r18	; 0x02
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
    28f6:	90 34       	cpi	r25, 0x40	; 64
    28f8:	51 f0       	breq	.+20     	; 0x290e <log_getShortTextFromPtr+0xac>
    28fa:	90 38       	cpi	r25, 0x80	; 128
    28fc:	19 f0       	breq	.+6      	; 0x2904 <log_getShortTextFromPtr+0xa2>
    28fe:	90 32       	cpi	r25, 0x20	; 32
    2900:	81 f4       	brne	.+32     	; 0x2922 <log_getShortTextFromPtr+0xc0>
    2902:	0a c0       	rjmp	.+20     	; 0x2918 <log_getShortTextFromPtr+0xb6>
    2904:	fd 01       	movw	r30, r26
    2906:	31 96       	adiw	r30, 0x01	; 1
    2908:	8a e2       	ldi	r24, 0x2A	; 42
    290a:	8c 93       	st	X, r24
    290c:	0e c0       	rjmp	.+28     	; 0x292a <log_getShortTextFromPtr+0xc8>
    290e:	fd 01       	movw	r30, r26
    2910:	31 96       	adiw	r30, 0x01	; 1
    2912:	85 ea       	ldi	r24, 0xA5	; 165
    2914:	8c 93       	st	X, r24
    2916:	09 c0       	rjmp	.+18     	; 0x292a <log_getShortTextFromPtr+0xc8>
    2918:	fd 01       	movw	r30, r26
    291a:	31 96       	adiw	r30, 0x01	; 1
    291c:	80 e2       	ldi	r24, 0x20	; 32
    291e:	8c 93       	st	X, r24
    2920:	04 c0       	rjmp	.+8      	; 0x292a <log_getShortTextFromPtr+0xc8>
    2922:	fd 01       	movw	r30, r26
    2924:	31 96       	adiw	r30, 0x01	; 1
    2926:	8f e3       	ldi	r24, 0x3F	; 63
    2928:	8c 93       	st	X, r24
    292a:	bf 01       	movw	r22, r30
    292c:	6f 5f       	subi	r22, 0xFF	; 255
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	80 83       	st	Z, r24
    2934:	8e 81       	ldd	r24, Y+6	; 0x06
    2936:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    293a:	bc 01       	movw	r22, r24
    293c:	8f 81       	ldd	r24, Y+7	; 0x07
    293e:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    2942:	bc 01       	movw	r22, r24
    2944:	6f 5f       	subi	r22, 0xFF	; 255
    2946:	7f 4f       	sbci	r23, 0xFF	; 255
    2948:	2d e2       	ldi	r18, 0x2D	; 45
    294a:	fc 01       	movw	r30, r24
    294c:	20 83       	st	Z, r18
    294e:	88 85       	ldd	r24, Y+8	; 0x08
    2950:	99 85       	ldd	r25, Y+9	; 0x09
    2952:	0e 94 32 3a 	call	0x7464	; 0x7464 <putChar_long>
    2956:	fc 01       	movw	r30, r24
    2958:	10 82       	st	Z, r1
    295a:	1f 3f       	cpi	r17, 0xFF	; 255
    295c:	41 f0       	breq	.+16     	; 0x296e <log_getShortTextFromPtr+0x10c>
    295e:	1c 83       	std	Y+4, r17	; 0x04
    2960:	60 df       	rcall	.-320    	; 0x2822 <logCheckUnreadErrorLogs>
    2962:	05 c0       	rjmp	.+10     	; 0x296e <log_getShortTextFromPtr+0x10c>
    2964:	ea ea       	ldi	r30, 0xAA	; 170
    2966:	f3 e0       	ldi	r31, 0x03	; 3
    2968:	8d e2       	ldi	r24, 0x2D	; 45
    296a:	80 83       	st	Z, r24
    296c:	11 82       	std	Z+1, r1	; 0x01
    296e:	8a ea       	ldi	r24, 0xAA	; 170
    2970:	93 e0       	ldi	r25, 0x03	; 3
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	1f 91       	pop	r17
    2978:	08 95       	ret

0000297a <log_put>:
    297a:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    297e:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2982:	a1 e4       	ldi	r26, 0x41	; 65
    2984:	b2 e0       	ldi	r27, 0x02	; 2
    2986:	9c 91       	ld	r25, X
    2988:	90 83       	st	Z, r25
    298a:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    298e:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	9c 91       	ld	r25, X
    2996:	11 97       	sbiw	r26, 0x01	; 1
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    299e:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    29a2:	12 96       	adiw	r26, 0x02	; 2
    29a4:	9c 91       	ld	r25, X
    29a6:	12 97       	sbiw	r26, 0x02	; 2
    29a8:	92 83       	std	Z+2, r25	; 0x02
    29aa:	13 96       	adiw	r26, 0x03	; 3
    29ac:	9c 91       	ld	r25, X
    29ae:	93 83       	std	Z+3, r25	; 0x03
    29b0:	25 83       	std	Z+5, r18	; 0x05
    29b2:	86 83       	std	Z+6, r24	; 0x06
    29b4:	67 83       	std	Z+7, r22	; 0x07
    29b6:	51 87       	std	Z+9, r21	; 0x09
    29b8:	40 87       	std	Z+8, r20	; 0x08
    29ba:	80 e8       	ldi	r24, 0x80	; 128
    29bc:	84 83       	std	Z+4, r24	; 0x04
    29be:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    29c2:	8f 3f       	cpi	r24, 0xFF	; 255
    29c4:	81 f4       	brne	.+32     	; 0x29e6 <log_put+0x6c>
    29c6:	84 e6       	ldi	r24, 0x64	; 100
    29c8:	91 e0       	ldi	r25, 0x01	; 1
    29ca:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    29ce:	6f ef       	ldi	r22, 0xFF	; 255
    29d0:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    29d4:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    29d8:	44 df       	rcall	.-376    	; 0x2862 <log_getShortTextFromPtr>
    29da:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    29de:	82 ec       	ldi	r24, 0xC2	; 194
    29e0:	92 e1       	ldi	r25, 0x12	; 18
    29e2:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    29e6:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    29ea:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    29ee:	0a 96       	adiw	r24, 0x0a	; 10
    29f0:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    29f4:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    29f8:	88 55       	subi	r24, 0x58	; 88
    29fa:	95 40       	sbci	r25, 0x05	; 5
    29fc:	39 f0       	breq	.+14     	; 0x2a0c <log_put+0x92>
    29fe:	30 f0       	brcs	.+12     	; 0x2a0c <log_put+0x92>
    2a00:	82 ed       	ldi	r24, 0xD2	; 210
    2a02:	93 e0       	ldi	r25, 0x03	; 3
    2a04:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2a08:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    2a0c:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    2a10:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    2a14:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    2a18:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    2a1c:	28 17       	cp	r18, r24
    2a1e:	39 07       	cpc	r19, r25
    2a20:	79 f4       	brne	.+30     	; 0x2a40 <log_put+0xc6>
    2a22:	0a 96       	adiw	r24, 0x0a	; 10
    2a24:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2a28:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2a2c:	88 55       	subi	r24, 0x58	; 88
    2a2e:	95 40       	sbci	r25, 0x05	; 5
    2a30:	39 f0       	breq	.+14     	; 0x2a40 <log_put+0xc6>
    2a32:	30 f0       	brcs	.+12     	; 0x2a40 <log_put+0xc6>
    2a34:	82 ed       	ldi	r24, 0xD2	; 210
    2a36:	93 e0       	ldi	r25, 0x03	; 3
    2a38:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2a3c:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2a40:	08 95       	ret

00002a42 <log_putError>:
    2a42:	25 e4       	ldi	r18, 0x45	; 69
    2a44:	9a df       	rcall	.-204    	; 0x297a <log_put>
    2a46:	8f ef       	ldi	r24, 0xFF	; 255
    2a48:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    2a4c:	08 95       	ret

00002a4e <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2a4e:	cf 93       	push	r28
    2a50:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2a52:	7b de       	rcall	.-778    	; 0x274a <log_getLog>
	if (pLogEntry != NULL){
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	19 f0       	breq	.+6      	; 0x2a5e <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    2a58:	6c 2f       	mov	r22, r28
    2a5a:	03 df       	rcall	.-506    	; 0x2862 <log_getShortTextFromPtr>
    2a5c:	06 c0       	rjmp	.+12     	; 0x2a6a <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2a5e:	ea ea       	ldi	r30, 0xAA	; 170
    2a60:	f3 e0       	ldi	r31, 0x03	; 3
    2a62:	8d e2       	ldi	r24, 0x2D	; 45
    2a64:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2a66:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    2a68:	cf 01       	movw	r24, r30
	}
    2a6a:	cf 91       	pop	r28
    2a6c:	08 95       	ret

00002a6e <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2a6e:	b6 dc       	rcall	.-1684   	; 0x23dc <init_iopins>
	#ifdef DEBUG_ON_PINS
	DEBUG_OUT_MAIN
    2a70:	85 b1       	in	r24, 0x05	; 5
    2a72:	8f 7c       	andi	r24, 0xCF	; 207
	#endif
	init_log();
    2a74:	85 b9       	out	0x05, r24	; 5
    2a76:	3f de       	rcall	.-898    	; 0x26f6 <init_log>
	init_Serial0SerUSB();
    2a78:	0e 94 3c 37 	call	0x6e78	; 0x6e78 <init_Serial0SerUSB>
	init_message();
    2a7c:	0e 94 cf 2c 	call	0x599e	; 0x599e <init_message>
	init_HwTimer();
	init_Timers();
    2a80:	35 d8       	rcall	.-3990   	; 0x1aec <init_HwTimer>
    2a82:	1c d8       	rcall	.-4040   	; 0x1abc <init_Timers>
	init_ADC();
    2a84:	42 d8       	rcall	.-3964   	; 0x1b0a <init_ADC>
	init_Pipe();
    2a86:	6b d8       	rcall	.-3882   	; 0x1b5e <init_Pipe>
    2a88:	0e 94 7d 35 	call	0x6afa	; 0x6afa <init_Serial1MIDI>
	init_Serial1MIDI();
    2a8c:	90 d8       	rcall	.-3808   	; 0x1bae <init_PipeModules>
	init_PipeModules();
    2a8e:	0e 94 a8 30 	call	0x6150	; 0x6150 <init_Midi2Manual>
	init_Midi2Manual();
    2a92:	0e 94 e8 30 	call	0x61d0	; 0x61d0 <init_Manual2Midi>
	init_Manual2Midi();
    2a96:	0e 94 61 2d 	call	0x5ac2	; 0x5ac2 <init_Midi>
	init_Midi();
    2a9a:	0e 94 da 2d 	call	0x5bb4	; 0x5bb4 <init_Registers>
	init_Registers();
    2a9e:	0e 94 79 31 	call	0x62f2	; 0x62f2 <init_Manual2Module>
	init_Manual2Module();
    2aa2:	0e 94 70 2b 	call	0x56e0	; 0x56e0 <init_SoftKeys>
	init_SoftKeys();
    2aa6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <eeprom_UpdateALL>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    2aaa:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	INIT_MENU
    2aae:	45 dd       	rcall	.-1398   	; 0x253a <lcd_init>


	// BOOT MESSAGE

	lcd_init ();
    2ab0:	0e 94 51 39 	call	0x72a2	; 0x72a2 <lcd_initCG>
	lcd_initCG();
	lcd_clrscr ();
    2ab4:	a3 dd       	rcall	.-1210   	; 0x25fc <lcd_clrscr>
    2ab6:	83 e4       	ldi	r24, 0x43	; 67
	lcd_goto(LCD_LINE1+3);
    2ab8:	9c dd       	rcall	.-1224   	; 0x25f2 <lcd_goto>
    2aba:	85 ea       	ldi	r24, 0xA5	; 165
	lcd_puts_P(prog_name);
    2abc:	92 e0       	ldi	r25, 0x02	; 2
    2abe:	0b de       	rcall	.-1002   	; 0x26d6 <lcd_puts_P>
    2ac0:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_goto(LCD_LINE2+7);
    2ac2:	97 dd       	rcall	.-1234   	; 0x25f2 <lcd_goto>
    2ac4:	82 e6       	ldi	r24, 0x62	; 98
    2ac6:	92 e1       	ldi	r25, 0x12	; 18
	lcd_puts_P(sw_version);
    2ac8:	06 de       	rcall	.-1012   	; 0x26d6 <lcd_puts_P>
    2aca:	78 94       	sei
    2acc:	2f ef       	ldi	r18, 0xFF	; 255
    2ace:	47 e9       	ldi	r20, 0x97	; 151
	sei();
    2ad0:	8a e3       	ldi	r24, 0x3A	; 58
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2ad2:	21 50       	subi	r18, 0x01	; 1
    2ad4:	40 40       	sbci	r20, 0x00	; 0
    2ad6:	80 40       	sbci	r24, 0x00	; 0
    2ad8:	e1 f7       	brne	.-8      	; 0x2ad2 <main+0x64>
    2ada:	00 c0       	rjmp	.+0      	; 0x2adc <main+0x6e>
    2adc:	00 00       	nop
    2ade:	0e 94 0f 38 	call	0x701e	; 0x701e <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    2ae2:	8c dd       	rcall	.-1256   	; 0x25fc <lcd_clrscr>
	lcd_clrscr ();
    2ae4:	a8 d9       	rcall	.-3248   	; 0x1e36 <module_StartPowerOn>
    2ae6:	8f ef       	ldi	r24, 0xFF	; 255

	// TURN ON POWER

	module_StartPowerOn();
    2ae8:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    2aec:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2af0:	8e ef       	ldi	r24, 0xFE	; 254

	menuNotActive = TRUE;
    2af2:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    2af6:	df ef       	ldi	r29, 0xFF	; 255
    2af8:	85 b1       	in	r24, 0x05	; 5
    2afa:	8f 7c       	andi	r24, 0xCF	; 207
	module_StartPowerOn();
	MESSAGE_PIPE_HANDLING_ON

	menuNotActive = TRUE;
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2afc:	85 b9       	out	0x05, r24	; 5
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    while (1)
    {
		DEBUG_OUT_MAIN
    2afe:	20 91 fe 13 	lds	r18, 0x13FE	; 0x8013fe <serESPRxInIndex>
    2b02:	30 91 ff 13 	lds	r19, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    2b06:	80 91 f9 13 	lds	r24, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    2b0a:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
    2b0e:	28 17       	cp	r18, r24
    2b10:	39 07       	cpc	r19, r25
    2b12:	09 f4       	brne	.+2      	; 0x2b16 <main+0xa8>
    2b14:	66 c0       	rjmp	.+204    	; 0x2be2 <main+0x174>
    2b16:	0e 94 79 38 	call	0x70f2	; 0x70f2 <serial3SER_ESPReadRx>
    2b1a:	c8 2f       	mov	r28, r24
			uint8_t esp_message = serial3SER_ESPReadRx();
    2b1c:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
    2b20:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    2b24:	8f e7       	ldi	r24, 0x7F	; 127
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2b26:	8c 0f       	add	r24, r28
    2b28:	86 30       	cpi	r24, 0x06	; 6
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2b2a:	28 f4       	brcc	.+10     	; 0x2b36 <main+0xc8>
    2b2c:	80 e8       	ldi	r24, 0x80	; 128
    2b2e:	8c 0f       	add	r24, r28
    2b30:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <message_push>
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2b34:	56 c0       	rjmp	.+172    	; 0x2be2 <main+0x174>
    2b36:	c0 39       	cpi	r28, 0x90	; 144
    2b38:	09 f0       	breq	.+2      	; 0x2b3c <main+0xce>
    2b3a:	53 c0       	rjmp	.+166    	; 0x2be2 <main+0x174>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2b3c:	80 91 f1 13 	lds	r24, 0x13F1	; 0x8013f1 <serESPInBuffer>
    2b40:	80 39       	cpi	r24, 0x90	; 144
				// Not yet used in V 0.68
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <main+0xd8>
    2b44:	4e c0       	rjmp	.+156    	; 0x2be2 <main+0x174>
    2b46:	91 e0       	ldi	r25, 0x01	; 1
    2b48:	e9 2f       	mov	r30, r25
    2b4a:	09 2e       	mov	r0, r25
    2b4c:	00 0c       	add	r0, r0
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2b4e:	ff 0b       	sbc	r31, r31
    2b50:	ef 50       	subi	r30, 0x0F	; 15
    2b52:	fc 4e       	sbci	r31, 0xEC	; 236
    2b54:	80 81       	ld	r24, Z
    2b56:	8d 33       	cpi	r24, 0x3D	; 61
    2b58:	19 f0       	breq	.+6      	; 0x2b60 <main+0xf2>
    2b5a:	9f 5f       	subi	r25, 0xFF	; 255
    2b5c:	98 30       	cpi	r25, 0x08	; 8
    2b5e:	a4 f3       	brlt	.-24     	; 0x2b48 <main+0xda>
							break;
						}
						i++;
    2b60:	98 30       	cpi	r25, 0x08	; 8
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2b62:	0c f0       	brlt	.+2      	; 0x2b66 <main+0xf8>
    2b64:	3e c0       	rjmp	.+124    	; 0x2be2 <main+0x174>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2b66:	89 2f       	mov	r24, r25
    2b68:	85 95       	asr	r24
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2b6c:	06 c0       	rjmp	.+12     	; 0x2b7a <main+0x10c>
    2b6e:	e2 2f       	mov	r30, r18
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	e5 5b       	subi	r30, 0xB5	; 181
							serESPMidiTmp[j] = 0;
    2b74:	f9 4e       	sbci	r31, 0xE9	; 233
    2b76:	10 82       	st	Z, r1
    2b78:	2f 5f       	subi	r18, 0xFF	; 255
    2b7a:	23 30       	cpi	r18, 0x03	; 3
    2b7c:	c0 f3       	brcs	.-16     	; 0x2b6e <main+0x100>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2b7e:	2c c0       	rjmp	.+88     	; 0x2bd8 <main+0x16a>
    2b80:	e9 2f       	mov	r30, r25
    2b82:	09 2e       	mov	r0, r25
    2b84:	00 0c       	add	r0, r0
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2b86:	ff 0b       	sbc	r31, r31
    2b88:	ef 50       	subi	r30, 0x0F	; 15
    2b8a:	fc 4e       	sbci	r31, 0xEC	; 236
    2b8c:	30 81       	ld	r19, Z
    2b8e:	20 ed       	ldi	r18, 0xD0	; 208
    2b90:	23 0f       	add	r18, r19
    2b92:	2a 30       	cpi	r18, 0x0A	; 10
    2b94:	10 f0       	brcs	.+4      	; 0x2b9a <main+0x12c>
    2b96:	27 ed       	ldi	r18, 0xD7	; 215
							if (asciiData > 9){
    2b98:	23 0f       	add	r18, r19
    2b9a:	a2 2f       	mov	r26, r18
								asciiData = asciiData - (0x0A - 'A' + '0');
    2b9c:	af 70       	andi	r26, 0x0F	; 15
    2b9e:	eb e4       	ldi	r30, 0x4B	; 75
							}
							asciiData &= 0x0F;
    2ba0:	f6 e1       	ldi	r31, 0x16	; 22
    2ba2:	62 81       	ldd	r22, Z+2	; 0x02
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2ba4:	20 e1       	ldi	r18, 0x10	; 16
    2ba6:	62 9f       	mul	r22, r18
    2ba8:	b0 01       	movw	r22, r0
    2baa:	11 24       	eor	r1, r1
    2bac:	41 81       	ldd	r20, Z+1	; 0x01
    2bae:	24 2f       	mov	r18, r20
    2bb0:	22 95       	swap	r18
    2bb2:	2f 70       	andi	r18, 0x0F	; 15
    2bb4:	62 2b       	or	r22, r18
    2bb6:	62 83       	std	Z+2, r22	; 0x02
    2bb8:	20 e1       	ldi	r18, 0x10	; 16
    2bba:	42 9f       	mul	r20, r18
    2bbc:	a0 01       	movw	r20, r0
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2bbe:	11 24       	eor	r1, r1
    2bc0:	20 81       	ld	r18, Z
    2bc2:	32 2f       	mov	r19, r18
    2bc4:	32 95       	swap	r19
    2bc6:	3f 70       	andi	r19, 0x0F	; 15
    2bc8:	43 2b       	or	r20, r19
    2bca:	41 83       	std	Z+1, r20	; 0x01
    2bcc:	40 e1       	ldi	r20, 0x10	; 16
    2bce:	24 9f       	mul	r18, r20
    2bd0:	90 01       	movw	r18, r0
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2bd2:	11 24       	eor	r1, r1
    2bd4:	2a 2b       	or	r18, r26
    2bd6:	20 83       	st	Z, r18
    2bd8:	91 50       	subi	r25, 0x01	; 1
    2bda:	19 16       	cp	r1, r25
    2bdc:	8c f2       	brlt	.-94     	; 0x2b80 <main+0x112>
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2bde:	0e 94 3e 34 	call	0x687c	; 0x687c <proc_ESPmidi>
    2be2:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <message_status>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2be6:	88 23       	and	r24, r24
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2be8:	09 f4       	brne	.+2      	; 0x2bec <main+0x17e>
    2bea:	51 c0       	rjmp	.+162    	; 0x2c8e <main+0x220>
    2bec:	85 b1       	in	r24, 0x05	; 5
    2bee:	80 63       	ori	r24, 0x30	; 48
    2bf0:	85 b9       	out	0x05, r24	; 5
			DEBUG_OUT_MENU
    2bf2:	0e 94 ea 2c 	call	0x59d4	; 0x59d4 <message_get>
    2bf6:	c8 2f       	mov	r28, r24
			uint8_t keyMessage = message_get();
    2bf8:	86 38       	cpi	r24, 0x86	; 134
    2bfa:	b9 f4       	brne	.+46     	; 0x2c2a <main+0x1bc>
    2bfc:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
				// PANIC BUTTON
				midiSendAllNotesOff();
    2c00:	0e 94 17 33 	call	0x662e	; 0x662e <midi_AllManualsOff>
				midi_AllManualsOff();
    2c04:	0e 94 78 30 	call	0x60f0	; 0x60f0 <midi_resetRegisters>
				midi_resetRegisters();
    2c08:	0e 94 57 2d 	call	0x5aae	; 0x5aae <midi_CouplerReset>
				midi_CouplerReset();
    2c0c:	74 dd       	rcall	.-1304   	; 0x26f6 <init_log>
    2c0e:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
				init_log(); // clear log V 0.70
    2c12:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
				midiRxBuffUsage = 0; // max used lenght of Midi Rx Buffer
    2c16:	85 b1       	in	r24, 0x05	; 5
				midiTxBuffUsage = 0; // max used lenght of Midi Tx Buffer
    2c18:	80 64       	ori	r24, 0x40	; 64
    2c1a:	85 b9       	out	0x05, r24	; 5
				POWER_ON
    2c1c:	83 e1       	ldi	r24, 0x13	; 19
    2c1e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
				pipe_PowerStatus = POWERSTATE_FORCE_ON; // V0.70 power on
    2c22:	8a e8       	ldi	r24, 0x8A	; 138
    2c24:	92 e0       	ldi	r25, 0x02	; 2
    2c26:	0e 94 4e 2a 	call	0x549c	; 0x549c <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2c2a:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    2c2e:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (menuNotActive == TRUE) {
    2c30:	f9 f4       	brne	.+62     	; 0x2c70 <main+0x202>
    2c32:	8c 2f       	mov	r24, r28
    2c34:	8f 73       	andi	r24, 0x3F	; 63
    2c36:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2c38:	69 f4       	brne	.+26     	; 0x2c54 <main+0x1e6>
    2c3a:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2c3c:	70 e0       	ldi	r23, 0x00	; 0
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <menu_Init>
    2c46:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <menu_InitLCD>
					menu_InitLCD(); //display menu
    2c4a:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	48 d9       	rcall	.-3440   	; 0x1ee2 <softKey_WantLong>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2c52:	1d c0       	rjmp	.+58     	; 0x2c8e <main+0x220>
    2c54:	9f ef       	ldi	r25, 0xFF	; 255
    2c56:	98 0f       	add	r25, r24
    2c58:	94 30       	cpi	r25, 0x04	; 4
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2c5a:	c8 f4       	brcc	.+50     	; 0x2c8e <main+0x220>
    2c5c:	0e 94 34 2c 	call	0x5868	; 0x5868 <softKey_MessageKey_ToSoftKeyNr>
    2c60:	6c 2f       	mov	r22, r28
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2c62:	0e 94 49 2c 	call	0x5892	; 0x5892 <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2c66:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2c6a:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <softKeys_toLCD>
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <main+0x220>
					softKeys_toLCD();
    2c70:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2c74:	81 11       	cpse	r24, r1
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2c76:	06 c0       	rjmp	.+12     	; 0x2c84 <main+0x216>
    2c78:	8c 2f       	mov	r24, r28
    2c7a:	0e 94 91 26 	call	0x4d22	; 0x4d22 <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2c7e:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
    2c82:	05 c0       	rjmp	.+10     	; 0x2c8e <main+0x220>
    2c84:	8d ef       	ldi	r24, 0xFD	; 253
    2c86:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2c8a:	0e 94 19 29 	call	0x5232	; 0x5232 <menu_ModuleTestExecute>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2c8e:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
				}
			}
		}
		if (menuNotActive == TRUE) {
    2c92:	8f 3f       	cpi	r24, 0xFF	; 255
    2c94:	69 f4       	brne	.+26     	; 0x2cb0 <main+0x242>
    2c96:	df 3f       	cpi	r29, 0xFF	; 255
    2c98:	61 f4       	brne	.+24     	; 0x2cb2 <main+0x244>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2c9a:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2c9e:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <softKeys_toLCD>
				softKeys_toLCD();
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
    2ca4:	1e d9       	rcall	.-3524   	; 0x1ee2 <softKey_WantLong>
				softKey_WantLong(TRUE);
    2ca6:	8f ef       	ldi	r24, 0xFF	; 255
    2ca8:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
				prog_UpdDisplay = TRUE; // update program display 
    2cac:	d0 e0       	ldi	r29, 0x00	; 0
    2cae:	01 c0       	rjmp	.+2      	; 0x2cb2 <main+0x244>
    2cb0:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2cb2:	85 b1       	in	r24, 0x05	; 5
    2cb4:	8f 7c       	andi	r24, 0xCF	; 207
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2cb6:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MAIN
    2cb8:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2cbc:	81 11       	cpse	r24, r1
    2cbe:	09 c0       	rjmp	.+18     	; 0x2cd2 <main+0x264>
    2cc0:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2cc4:	0e 94 3d 2a 	call	0x547a	; 0x547a <menu_deleteMessage>
				menu_deleteMessage();
    2cc8:	8c 2f       	mov	r24, r28
    2cca:	93 dc       	rcall	.-1754   	; 0x25f2 <lcd_goto>
				lcd_goto(saveCursor);
    2ccc:	8f ef       	ldi	r24, 0xFF	; 255
    2cce:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2cd2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	0a c0       	rjmp	.+20     	; 0x2cee <main+0x280>
    2cda:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2cde:	88 23       	and	r24, r24
    2ce0:	19 f0       	breq	.+6      	; 0x2ce8 <main+0x27a>
    2ce2:	0e 94 19 29 	call	0x5232	; 0x5232 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2ce6:	03 c0       	rjmp	.+6      	; 0x2cee <main+0x280>
    2ce8:	8f ef       	ldi	r24, 0xFF	; 255
    2cea:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2cee:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
			}
		}

		// ----------------------------- TIMER POWER ------------------------
		if TIMER_ELAPSED(TIMER_POWER) {
    2cf2:	81 11       	cpse	r24, r1
    2cf4:	1a c0       	rjmp	.+52     	; 0x2d2a <main+0x2bc>
    2cf6:	af d8       	rcall	.-3746   	; 0x1e56 <module_PowerControl>
			module_PowerControl();
    2cf8:	0e 94 95 2c 	call	0x592a	; 0x592a <menu_showPowerState>
			menu_showPowerState();
    2cfc:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			if (menuNotActive == TRUE) {
    2d00:	8f 3f       	cpi	r24, 0xFF	; 255
    2d02:	99 f4       	brne	.+38     	; 0x2d2a <main+0x2bc>
    2d04:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2d08:	84 e1       	ldi	r24, 0x14	; 20
				lcd_goto(LCD_LINE2);
    2d0a:	73 dc       	rcall	.-1818   	; 0x25f2 <lcd_goto>
    2d0c:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2d10:	81 30       	cpi	r24, 0x01	; 1
    2d12:	21 f4       	brne	.+8      	; 0x2d1c <main+0x2ae>
    2d14:	83 e9       	ldi	r24, 0x93	; 147
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2d16:	92 e0       	ldi	r25, 0x02	; 2
    2d18:	de dc       	rcall	.-1604   	; 0x26d6 <lcd_puts_P>
    2d1a:	05 c0       	rjmp	.+10     	; 0x2d26 <main+0x2b8>
    2d1c:	82 31       	cpi	r24, 0x12	; 18
    2d1e:	19 f4       	brne	.+6      	; 0x2d26 <main+0x2b8>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2d20:	84 e1       	ldi	r24, 0x14	; 20
    2d22:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2d26:	8c 2f       	mov	r24, r28
    2d28:	64 dc       	rcall	.-1848   	; 0x25f2 <lcd_goto>
				}
				lcd_goto(saveCursor);
    2d2a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2d2e:	9f e7       	ldi	r25, 0x7F	; 127
    2d30:	98 0f       	add	r25, r24
    2d32:	96 30       	cpi	r25, 0x06	; 6
    2d34:	10 f0       	brcs	.+4      	; 0x2d3a <main+0x2cc>
    2d36:	8e 3f       	cpi	r24, 0xFE	; 254
    2d38:	09 f5       	brne	.+66     	; 0x2d7c <main+0x30e>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2d3a:	80 91 db 18 	lds	r24, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    2d40:	31 f4       	brne	.+12     	; 0x2d4e <main+0x2e0>
    2d42:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2d46:	69 dc       	rcall	.-1838   	; 0x261a <getCursorFromLCDRAMcursor>
    2d48:	0e 94 43 38 	call	0x7086	; 0x7086 <serial3SER_ESPSend>
    2d4c:	03 c0       	rjmp	.+6      	; 0x2d54 <main+0x2e6>
    2d4e:	8f e7       	ldi	r24, 0x7F	; 127
    2d50:	0e 94 43 38 	call	0x7086	; 0x7086 <serial3SER_ESPSend>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2d54:	81 e8       	ldi	r24, 0x81	; 129
    2d56:	0e 94 43 38 	call	0x7086	; 0x7086 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2d5a:	c0 e0       	ldi	r28, 0x00	; 0
    2d5c:	e8 e5       	ldi	r30, 0x58	; 88
    2d5e:	f3 e0       	ldi	r31, 0x03	; 3
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d60:	08 c0       	rjmp	.+16     	; 0x2d72 <main+0x304>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2d62:	8f 01       	movw	r16, r30
    2d64:	0f 5f       	subi	r16, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d66:	1f 4f       	sbci	r17, 0xFF	; 255
				serial3SER_ESPSend(*pChar++);
    2d68:	80 81       	ld	r24, Z
    2d6a:	0e 94 43 38 	call	0x7086	; 0x7086 <serial3SER_ESPSend>
    2d6e:	cf 5f       	subi	r28, 0xFF	; 255
    2d70:	f8 01       	movw	r30, r16
    2d72:	c0 35       	cpi	r28, 0x50	; 80
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d74:	b0 f3       	brcs	.-20     	; 0x2d62 <main+0x2f4>
				serial3SER_ESPSend(*pChar++);
    2d76:	80 e8       	ldi	r24, 0x80	; 128
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2d78:	0e 94 43 38 	call	0x7086	; 0x7086 <serial3SER_ESPSend>
				serial3SER_ESPSend(*pChar++);
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2d7c:	8f ef       	ldi	r24, 0xFF	; 255
    2d7e:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2d82:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <midi_CheckTxActiveSense>
    2d86:	0e 94 21 33 	call	0x6642	; 0x6642 <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2d8a:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
    2d8e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>

		// ------------------------ TOP STATUS LINE --------------------------
		#ifdef SHOW_INOUT_ON_LCD
		uint8_t oldcursor = lcd_cursorPos;
    2d92:	81 11       	cpse	r24, r1
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_ELAPSED(TIMER_MIDIIN_DISP)){
    2d94:	6b c0       	rjmp	.+214    	; 0x2e6c <main+0x3fe>
    2d96:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			if TIMER_NOTSTARTED(TIMER_MIDIIN_DISP) {
    2d9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d9c:	09 f0       	breq	.+2      	; 0x2da0 <main+0x332>
    2d9e:	66 c0       	rjmp	.+204    	; 0x2e6c <main+0x3fe>
    2da0:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				// only if timer for midi in is not running at all (or just has elapsed)
				if ((midiLastInNote != MIDI_NOTE_NONE) && (prog_Display == PROGR_NONE)) {
    2da4:	8f 3f       	cpi	r24, 0xFF	; 255
    2da6:	b1 f1       	breq	.+108    	; 0x2e14 <main+0x3a6>
    2da8:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    2dac:	8f 3f       	cpi	r24, 0xFF	; 255
    2dae:	91 f5       	brne	.+100    	; 0x2e14 <main+0x3a6>
    2db0:	80 e0       	ldi	r24, 0x00	; 0
					// V0.72 only if no program is to be displayed
					// there is a midi in note to be displayed in status
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2db2:	1f dc       	rcall	.-1986   	; 0x25f2 <lcd_goto>
    2db4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
					if (midiLastInManual == MANUAL_NONE) {
    2db8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dba:	69 f4       	brne	.+26     	; 0x2dd6 <main+0x368>
    2dbc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
						// there was no manual assigned to midi in note
						// cc?nnn
						lcd_ChannelOut(midiLastInChannel);
    2dc0:	0e 94 42 3b 	call	0x7684	; 0x7684 <lcd_ChannelOut>
						lcd_putc('?');
    2dc4:	8f e3       	ldi	r24, 0x3F	; 63
    2dc6:	3f dc       	rcall	.-1922   	; 0x2646 <lcd_putc>
						lcd_noteOut(midiLastInNote);
    2dc8:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2dcc:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <lcd_noteOut>
						lcd_putc(' ');
    2dd0:	80 e2       	ldi	r24, 0x20	; 32
    2dd2:	39 dc       	rcall	.-1934   	; 0x2646 <lcd_putc>
    2dd4:	0c c0       	rjmp	.+24     	; 0x2dee <main+0x380>
					} else {
						// midi input to assigned manual
						// nnn>m
						lcd_noteOut(midiLastInNote);
    2dd6:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
    2dda:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <lcd_noteOut>
						lcd_putc(MENU_MIDI_IO_SIGN);
    2dde:	8e e7       	ldi	r24, 0x7E	; 126
    2de0:	32 dc       	rcall	.-1948   	; 0x2646 <lcd_putc>
    2de2:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
						lcd_ManualOutDec(midiLastInManual);
    2de6:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <lcd_ManualOutDec>
    2dea:	80 e2       	ldi	r24, 0x20	; 32
						lcd_putc(' ');
    2dec:	2c dc       	rcall	.-1960   	; 0x2646 <lcd_putc>
    2dee:	8c 2f       	mov	r24, r28
    2df0:	00 dc       	rcall	.-2048   	; 0x25f2 <lcd_goto>
					}
					lcd_goto(oldcursor);
    2df2:	8f ef       	ldi	r24, 0xFF	; 255
    2df4:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
					midiLastInNote = MIDI_NOTE_NONE;
    2df8:	9f b7       	in	r25, 0x3f	; 63
					// now start timer 
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2dfa:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <main+0x39e>
    2e00:	ef e2       	ldi	r30, 0x2F	; 47
    2e02:	f2 e0       	ldi	r31, 0x02	; 2
    2e04:	83 e2       	ldi	r24, 0x23	; 35
    2e06:	80 87       	std	Z+8, r24	; 0x08
    2e08:	11 86       	std	Z+9, r1	; 0x09
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	f8 cf       	rjmp	.-16     	; 0x2e00 <main+0x392>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e10:	9f bf       	out	0x3f, r25	; 63
    2e12:	2c c0       	rjmp	.+88     	; 0x2e6c <main+0x3fe>
				} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2e14:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2e18:	8f 3f       	cpi	r24, 0xFF	; 255
    2e1a:	d9 f0       	breq	.+54     	; 0x2e52 <main+0x3e4>
					// no midi not but a program change to be displayed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	e9 db       	rcall	.-2094   	; 0x25f2 <lcd_goto>
    2e20:	80 e7       	ldi	r24, 0x70	; 112
					lcd_putc('p');
    2e22:	11 dc       	rcall	.-2014   	; 0x2646 <lcd_putc>
    2e24:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
					lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2e28:	0e 94 9a 39 	call	0x7334	; 0x7334 <lcd_dec2out>
    2e2c:	8e e7       	ldi	r24, 0x7E	; 126
					lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2e2e:	0b dc       	rcall	.-2026   	; 0x2646 <lcd_putc>
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2e36:	9f b7       	in	r25, 0x3f	; 63
					TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2e38:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	06 c0       	rjmp	.+12     	; 0x2e4a <main+0x3dc>
    2e3e:	ef e2       	ldi	r30, 0x2F	; 47
    2e40:	f2 e0       	ldi	r31, 0x02	; 2
    2e42:	83 e2       	ldi	r24, 0x23	; 35
    2e44:	80 87       	std	Z+8, r24	; 0x08
    2e46:	11 86       	std	Z+9, r1	; 0x09
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	81 11       	cpse	r24, r1
    2e4c:	f8 cf       	rjmp	.-16     	; 0x2e3e <main+0x3d0>
    2e4e:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e50:	0d c0       	rjmp	.+26     	; 0x2e6c <main+0x3fe>
    __asm__ volatile ("" ::: "memory");
    2e52:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2e56:	81 11       	cpse	r24, r1
    2e58:	09 c0       	rjmp	.+18     	; 0x2e6c <main+0x3fe>
					// timer for showing note has elapsed
					lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2e5a:	cb db       	rcall	.-2154   	; 0x25f2 <lcd_goto>
    2e5c:	86 e0       	ldi	r24, 0x06	; 6
					lcd_blank(6);
    2e5e:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
					lcd_goto(oldcursor);
    2e62:	8c 2f       	mov	r24, r28
    2e64:	c6 db       	rcall	.-2164   	; 0x25f2 <lcd_goto>
    2e66:	8f ef       	ldi	r24, 0xFF	; 255
					TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2e68:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
				}
			}
		}
		// V0.69 do not update midi in display while displaying last value
		if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP) || TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2e6c:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2e70:	8f 3f       	cpi	r24, 0xFF	; 255
    2e72:	21 f0       	breq	.+8      	; 0x2e7c <main+0x40e>
    2e74:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2e78:	81 11       	cpse	r24, r1
    2e7a:	5b c0       	rjmp	.+182    	; 0x2f32 <main+0x4c4>
			if (midiLastOutNote != MIDI_NOTE_NONE){
    2e7c:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
    2e80:	8f 3f       	cpi	r24, 0xFF	; 255
    2e82:	f9 f0       	breq	.+62     	; 0x2ec2 <main+0x454>
				// there is a midi in note to be displayed in status
				// m>nnn
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2e84:	8f e0       	ldi	r24, 0x0F	; 15
    2e86:	b5 db       	rcall	.-2198   	; 0x25f2 <lcd_goto>
    2e88:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
				lcd_ManualOutDec(midiLastOutManual);
    2e8c:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <lcd_ManualOutDec>
    2e90:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    2e92:	d9 db       	rcall	.-2126   	; 0x2646 <lcd_putc>
    2e94:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
				lcd_noteOut(midiLastOutNote);
    2e98:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <lcd_noteOut>
				lcd_goto(oldcursor);
    2e9c:	8c 2f       	mov	r24, r28
    2e9e:	a9 db       	rcall	.-2222   	; 0x25f2 <lcd_goto>
    2ea0:	8f ef       	ldi	r24, 0xFF	; 255
				midiLastOutNote = MIDI_NOTE_NONE;
    2ea2:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
    2ea6:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2ea8:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	06 c0       	rjmp	.+12     	; 0x2eba <main+0x44c>
    2eae:	ef e2       	ldi	r30, 0x2F	; 47
    2eb0:	f2 e0       	ldi	r31, 0x02	; 2
    2eb2:	88 e2       	ldi	r24, 0x28	; 40
    2eb4:	82 87       	std	Z+10, r24	; 0x0a
    2eb6:	13 86       	std	Z+11, r1	; 0x0b
    2eb8:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2eba:	81 11       	cpse	r24, r1
    __asm__ volatile ("" ::: "memory");
    2ebc:	f8 cf       	rjmp	.-16     	; 0x2eae <main+0x440>
			} else if (midi_RegisterChanged != REGISTER_NONE) {
    2ebe:	9f bf       	out	0x3f, r25	; 63
    2ec0:	38 c0       	rjmp	.+112    	; 0x2f32 <main+0x4c4>
    2ec2:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
				// register change has top priority in display so it is processed later (!) and will overwrite previos note display
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2ec6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ec8:	31 f1       	breq	.+76     	; 0x2f16 <main+0x4a8>
    2eca:	8f e0       	ldi	r24, 0x0F	; 15
				lcd_putc('R');
    2ecc:	92 db       	rcall	.-2268   	; 0x25f2 <lcd_goto>
    2ece:	82 e5       	ldi	r24, 0x52	; 82
    2ed0:	ba db       	rcall	.-2188   	; 0x2646 <lcd_putc>
				lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2ed2:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2ed6:	8f 77       	andi	r24, 0x7F	; 127
    2ed8:	0e 94 9a 39 	call	0x7334	; 0x7334 <lcd_dec2out>
				// V 0.60 changed: down = Register ON!
				lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2edc:	80 91 33 09 	lds	r24, 0x0933	; 0x800933 <midi_RegisterChanged>
    2ee0:	88 23       	and	r24, r24
    2ee2:	14 f0       	brlt	.+4      	; 0x2ee8 <main+0x47a>
    2ee4:	88 e0       	ldi	r24, 0x08	; 8
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <main+0x47c>
    2ee8:	89 e0       	ldi	r24, 0x09	; 9
    2eea:	ad db       	rcall	.-2214   	; 0x2646 <lcd_putc>
				lcd_putc(' ');
    2eec:	80 e2       	ldi	r24, 0x20	; 32
    2eee:	ab db       	rcall	.-2218   	; 0x2646 <lcd_putc>
    2ef0:	8c 2f       	mov	r24, r28
				lcd_goto(oldcursor);
    2ef2:	7f db       	rcall	.-2306   	; 0x25f2 <lcd_goto>
    2ef4:	8f ef       	ldi	r24, 0xFF	; 255
    2ef6:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				midi_RegisterChanged = REGISTER_NONE;
    2efa:	9f b7       	in	r25, 0x3f	; 63
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2efc:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	06 c0       	rjmp	.+12     	; 0x2f0e <main+0x4a0>
    2f02:	ef e2       	ldi	r30, 0x2F	; 47
    2f04:	f2 e0       	ldi	r31, 0x02	; 2
    2f06:	88 e2       	ldi	r24, 0x28	; 40
    2f08:	82 87       	std	Z+10, r24	; 0x0a
    2f0a:	13 86       	std	Z+11, r1	; 0x0b
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	81 11       	cpse	r24, r1
    2f10:	f8 cf       	rjmp	.-16     	; 0x2f02 <main+0x494>
    2f12:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f14:	0e c0       	rjmp	.+28     	; 0x2f32 <main+0x4c4>
    __asm__ volatile ("" ::: "memory");
    2f16:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
			} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2f1a:	81 11       	cpse	r24, r1
    2f1c:	0a c0       	rjmp	.+20     	; 0x2f32 <main+0x4c4>
    2f1e:	8f e0       	ldi	r24, 0x0F	; 15
				// timer for showing note has elapsed
				// removed V0.59: or about every second just in case screen got scrambeled
				lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2f20:	68 db       	rcall	.-2352   	; 0x25f2 <lcd_goto>
    2f22:	85 e0       	ldi	r24, 0x05	; 5
    2f24:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
				lcd_blank(5);
    2f28:	8c 2f       	mov	r24, r28
    2f2a:	63 db       	rcall	.-2362   	; 0x25f2 <lcd_goto>
				lcd_goto(oldcursor);
    2f2c:	8f ef       	ldi	r24, 0xFF	; 255
    2f2e:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
				TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2f32:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <prog_UpdDisplay>
    2f36:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}
		#endif
		//----------------------- program display ------------------------
		if (prog_UpdDisplay == TRUE){
    2f38:	31 f4       	brne	.+12     	; 0x2f46 <main+0x4d8>
    2f3a:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
			prog_UpdDisplay = FALSE;
    2f40:	58 db       	rcall	.-2384   	; 0x25f2 <lcd_goto>
    2f42:	0e 94 87 30 	call	0x610e	; 0x610e <prog_toLcd>
			lcd_goto(MENU_LCD_CURSOR_PROG);
    2f46:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
			prog_toLcd();
    2f4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <main+0x4e2>
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2f4e:	7e c0       	rjmp	.+252    	; 0x304c <main+0x5de>
    2f50:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2f54:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2f58:	c0 91 db 18 	lds	r28, 0x18DB	; 0x8018db <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2f5c:	cf 3f       	cpi	r28, 0xFF	; 255
			uint8_t oldBlink = lcd_cursorIsOn;
    2f5e:	11 f4       	brne	.+4      	; 0x2f64 <main+0x4f6>
			if (oldBlink == TRUE) {
    2f60:	0e 94 8f 3b 	call	0x771e	; 0x771e <lcd_cursoroff>
				lcd_cursoroff();
    2f64:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
			}
			char separator;
			if (*pTime == 0) {
    2f68:	88 23       	and	r24, r24
    2f6a:	59 f0       	breq	.+22     	; 0x2f82 <main+0x514>
    2f6c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2f70:	80 fd       	sbrc	r24, 0
    2f72:	0e c0       	rjmp	.+28     	; 0x2f90 <main+0x522>
    2f74:	0f 2e       	mov	r0, r31
    2f76:	fa e3       	ldi	r31, 0x3A	; 58
				// when displaying hr:min blink ":"
				separator = ':';
    2f78:	ef 2e       	mov	r14, r31
    2f7a:	f0 2d       	mov	r31, r0
    2f7c:	04 e4       	ldi	r16, 0x44	; 68
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2f7e:	12 e0       	ldi	r17, 0x02	; 2
    2f80:	0c c0       	rjmp	.+24     	; 0x2f9a <main+0x52c>
    2f82:	0f 2e       	mov	r0, r31
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2f84:	fa e3       	ldi	r31, 0x3A	; 58
    2f86:	ef 2e       	mov	r14, r31
    2f88:	f0 2d       	mov	r31, r0
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2f8a:	03 e4       	ldi	r16, 0x43	; 67
    2f8c:	12 e0       	ldi	r17, 0x02	; 2
    2f8e:	05 c0       	rjmp	.+10     	; 0x2f9a <main+0x52c>
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2f90:	68 94       	set
    2f92:	ee 24       	eor	r14, r14
    2f94:	e5 f8       	bld	r14, 5
		}
		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2f96:	04 e4       	ldi	r16, 0x44	; 68
    2f98:	12 e0       	ldi	r17, 0x02	; 2
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2f9a:	87 e0       	ldi	r24, 0x07	; 7
    2f9c:	2a db       	rcall	.-2476   	; 0x25f2 <lcd_goto>
			lcd_dec2out(*(pTime--));
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	80 81       	ld	r24, Z
    2fa2:	0e 94 9a 39 	call	0x7334	; 0x7334 <lcd_dec2out>
			lcd_putc(separator);
    2fa6:	8e 2d       	mov	r24, r14
    2fa8:	4e db       	rcall	.-2404   	; 0x2646 <lcd_putc>
			lcd_dec2out(*pTime);
    2faa:	f8 01       	movw	r30, r16
    2fac:	31 97       	sbiw	r30, 0x01	; 1
    2fae:	80 81       	ld	r24, Z
    2fb0:	0e 94 9a 39 	call	0x7334	; 0x7334 <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2fb4:	40 91 4f 16 	lds	r20, 0x164F	; 0x80164f <midiRxOvflCount>
			if (ovflCount > 0){
    2fb8:	44 23       	and	r20, r20
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2fba:	31 f0       	breq	.+12     	; 0x2fc8 <main+0x55a>
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	83 e0       	ldi	r24, 0x03	; 3
    2fc2:	3f dd       	rcall	.-1410   	; 0x2a42 <log_putError>
				midiRxOvflCount = 0;
    2fc4:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2fc8:	40 91 56 16 	lds	r20, 0x1656	; 0x801656 <midiTxOvflCount>
			if (ovflCount > 0){
    2fcc:	44 23       	and	r20, r20
    2fce:	31 f0       	breq	.+12     	; 0x2fdc <main+0x56e>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	61 e0       	ldi	r22, 0x01	; 1
    2fd4:	83 e0       	ldi	r24, 0x03	; 3
    2fd6:	35 dd       	rcall	.-1430   	; 0x2a42 <log_putError>
    2fd8:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
				midiTxOvflCount = 0;
    2fdc:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2fe0:	84 ff       	sbrs	r24, 4
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <main+0x57a>
    2fe4:	80 e2       	ldi	r24, 0x20	; 32
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <main+0x57c>
    2fe8:	89 e0       	ldi	r24, 0x09	; 9
    2fea:	2d db       	rcall	.-2470   	; 0x2646 <lcd_putc>
    2fec:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2ff0:	8f 3f       	cpi	r24, 0xFF	; 255
    2ff2:	11 f4       	brne	.+4      	; 0x2ff8 <main+0x58a>
    2ff4:	85 e4       	ldi	r24, 0x45	; 69
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <main+0x58c>
    2ff8:	80 e2       	ldi	r24, 0x20	; 32
    2ffa:	25 db       	rcall	.-2486   	; 0x2646 <lcd_putc>
    2ffc:	8f 2d       	mov	r24, r15
    2ffe:	f9 da       	rcall	.-2574   	; 0x25f2 <lcd_goto>
    3000:	cf 3f       	cpi	r28, 0xFF	; 255
			// --- restore cursor ---
			lcd_goto(oldCursor);
    3002:	11 f4       	brne	.+4      	; 0x3008 <main+0x59a>
    3004:	0e 94 88 3b 	call	0x7710	; 0x7710 <lcd_cursosblink>
			if (oldBlink == TRUE) {
    3008:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
				lcd_cursosblink();
    300c:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    300e:	69 f4       	brne	.+26     	; 0x302a <main+0x5bc>
    3010:	9f b7       	in	r25, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    3016:	06 c0       	rjmp	.+12     	; 0x3024 <main+0x5b6>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    3018:	ef e2       	ldi	r30, 0x2F	; 47
    301a:	f2 e0       	ldi	r31, 0x02	; 2
    301c:	8d e7       	ldi	r24, 0x7D	; 125
    301e:	80 87       	std	Z+8, r24	; 0x08
    3020:	11 86       	std	Z+9, r1	; 0x09
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	81 11       	cpse	r24, r1
    3026:	f8 cf       	rjmp	.-16     	; 0x3018 <main+0x5aa>
    3028:	9f bf       	out	0x3f, r25	; 63
    302a:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    302e:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    3030:	69 f4       	brne	.+26     	; 0x304c <main+0x5de>
    3032:	9f b7       	in	r25, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	81 e0       	ldi	r24, 0x01	; 1
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    3038:	06 c0       	rjmp	.+12     	; 0x3046 <main+0x5d8>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    303a:	ef e2       	ldi	r30, 0x2F	; 47
    303c:	f2 e0       	ldi	r31, 0x02	; 2
    303e:	8d e7       	ldi	r24, 0x7D	; 125
    3040:	82 87       	std	Z+10, r24	; 0x0a
    3042:	13 86       	std	Z+11, r1	; 0x0b
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	81 11       	cpse	r24, r1
    3048:	f8 cf       	rjmp	.-16     	; 0x303a <main+0x5cc>
    304a:	9f bf       	out	0x3f, r25	; 63
    304c:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    3050:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    3052:	39 f4       	brne	.+14     	; 0x3062 <main+0x5f4>
    3054:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
    3058:	40 e0       	ldi	r20, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    305a:	50 e0       	ldi	r21, 0x00	; 0
    305c:	60 e0       	ldi	r22, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    305e:	84 e0       	ldi	r24, 0x04	; 4
    3060:	f0 dc       	rcall	.-1568   	; 0x2a42 <log_putError>
    3062:	85 b1       	in	r24, 0x05	; 5
    3064:	8f 7c       	andi	r24, 0xCF	; 207
    3066:	80 62       	ori	r24, 0x20	; 32
    3068:	85 b9       	out	0x05, r24	; 5
		}
		DEBUG_OUT_MIDI
    306a:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    306e:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    3072:	98 17       	cp	r25, r24
    3074:	21 f0       	breq	.+8      	; 0x307e <main+0x610>
    3076:	0e 94 79 36 	call	0x6cf2	; 0x6cf2 <serial1MIDIReadRx>
    307a:	0e 94 aa 33 	call	0x6754	; 0x6754 <midiIn_Process>
			midiIn_Process(serial1MIDIReadRx());
    307e:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <pipeMsgStatus>
    3082:	8f 3f       	cpi	r24, 0xFF	; 255
    3084:	09 f0       	breq	.+2      	; 0x3088 <main+0x61a>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    3086:	38 cd       	rjmp	.-1424   	; 0x2af8 <main+0x8a>
    3088:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <pipeMsgGet>
    308c:	0e 94 6f 34 	call	0x68de	; 0x68de <midiKeyPress_Process>
			midiKeyPress_Process(pipeMsgGet());
    3090:	33 cd       	rjmp	.-1434   	; 0x2af8 <main+0x8a>

00003092 <menu_enterWriteModule>:
    3092:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
    3096:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    309a:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
    309e:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <menu_enterWriteModule+0x1e>
    30ac:	88 0f       	add	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	0a 94       	dec	r0
    30b2:	e2 f7       	brpl	.-8      	; 0x30ac <menu_enterWriteModule+0x1a>
    30b4:	48 2f       	mov	r20, r24
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	e1 e4       	ldi	r30, 0x41	; 65
    30ba:	f3 e0       	ldi	r31, 0x03	; 3
    30bc:	22 c0       	rjmp	.+68     	; 0x3102 <menu_enterWriteModule+0x70>
    30be:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    30c2:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    30c6:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    30ca:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	aa 1f       	adc	r26, r26
    30d4:	bb 1f       	adc	r27, r27
    30d6:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    30da:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    30de:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    30e2:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    30e6:	21 81       	ldd	r18, Z+1	; 0x01
    30e8:	24 23       	and	r18, r20
    30ea:	49 f0       	breq	.+18     	; 0x30fe <menu_enterWriteModule+0x6c>
    30ec:	81 60       	ori	r24, 0x01	; 1
    30ee:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    30f2:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    30f6:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    30fa:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    30fe:	38 97       	sbiw	r30, 0x08	; 8
    3100:	3f 5f       	subi	r19, 0xFF	; 255
    3102:	30 32       	cpi	r19, 0x20	; 32
    3104:	e0 f2       	brcs	.-72     	; 0x30be <menu_enterWriteModule+0x2c>
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	08 95       	ret

0000310a <menu_exitWriteModule>:
    310a:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    310e:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    3112:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    3116:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    311a:	85 30       	cpi	r24, 0x05	; 5
    311c:	09 f5       	brne	.+66     	; 0x3160 <menu_exitWriteModule+0x56>
    311e:	a1 e0       	ldi	r26, 0x01	; 1
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    3126:	02 c0       	rjmp	.+4      	; 0x312c <menu_exitWriteModule+0x22>
    3128:	aa 0f       	add	r26, r26
    312a:	bb 1f       	adc	r27, r27
    312c:	0a 94       	dec	r0
    312e:	e2 f7       	brpl	.-8      	; 0x3128 <menu_exitWriteModule+0x1e>
    3130:	3a 2f       	mov	r19, r26
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	e1 e4       	ldi	r30, 0x41	; 65
    3136:	f3 e0       	ldi	r31, 0x03	; 3
    3138:	11 c0       	rjmp	.+34     	; 0x315c <menu_exitWriteModule+0x52>
    313a:	77 23       	and	r23, r23
    313c:	24 f4       	brge	.+8      	; 0x3146 <menu_exitWriteModule+0x3c>
    313e:	81 81       	ldd	r24, Z+1	; 0x01
    3140:	83 2b       	or	r24, r19
    3142:	81 83       	std	Z+1, r24	; 0x01
    3144:	05 c0       	rjmp	.+10     	; 0x3150 <menu_exitWriteModule+0x46>
    3146:	21 81       	ldd	r18, Z+1	; 0x01
    3148:	8a 2f       	mov	r24, r26
    314a:	80 95       	com	r24
    314c:	82 23       	and	r24, r18
    314e:	81 83       	std	Z+1, r24	; 0x01
    3150:	44 0f       	add	r20, r20
    3152:	55 1f       	adc	r21, r21
    3154:	66 1f       	adc	r22, r22
    3156:	77 1f       	adc	r23, r23
    3158:	38 97       	sbiw	r30, 0x08	; 8
    315a:	9f 5f       	subi	r25, 0xFF	; 255
    315c:	90 32       	cpi	r25, 0x20	; 32
    315e:	68 f3       	brcs	.-38     	; 0x313a <menu_exitWriteModule+0x30>
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	08 95       	ret

00003164 <menuOnEnterModSel>:
    3164:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3168:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    316c:	3e 96       	adiw	r30, 0x0e	; 14
    316e:	85 91       	lpm	r24, Z+
    3170:	95 91       	lpm	r25, Z+
    3172:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	08 95       	ret

0000317a <menuOnEnterMidiInCh>:
    317a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    317e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3182:	3e 96       	adiw	r30, 0x0e	; 14
    3184:	85 91       	lpm	r24, Z+
    3186:	95 91       	lpm	r25, Z+
    3188:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	08 95       	ret

00003190 <menuOnEnterMidiInSec>:
    3190:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3194:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3198:	3e 96       	adiw	r30, 0x0e	; 14
    319a:	25 91       	lpm	r18, Z+
    319c:	35 91       	lpm	r19, Z+
    319e:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    31a2:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    31a6:	8f 70       	andi	r24, 0x0F	; 15
    31a8:	90 e0       	ldi	r25, 0x00	; 0
    31aa:	23 70       	andi	r18, 0x03	; 3
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	88 0f       	add	r24, r24
    31b2:	99 1f       	adc	r25, r25
    31b4:	82 0f       	add	r24, r18
    31b6:	91 1d       	adc	r25, r1
    31b8:	88 0f       	add	r24, r24
    31ba:	99 1f       	adc	r25, r25
    31bc:	88 0f       	add	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    31c4:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    31c8:	80 e0       	ldi	r24, 0x00	; 0
    31ca:	08 95       	ret

000031cc <menuOnEnterModManual>:
    31cc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31d0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31d4:	3e 96       	adiw	r30, 0x0e	; 14
    31d6:	85 91       	lpm	r24, Z+
    31d8:	95 91       	lpm	r25, Z+
    31da:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	08 95       	ret

000031e2 <menuOnEnterModSec>:
    31e2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    31e6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    31ea:	3e 96       	adiw	r30, 0x0e	; 14
    31ec:	85 91       	lpm	r24, Z+
    31ee:	95 91       	lpm	r25, Z+
    31f0:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    31f4:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    31f8:	2f 70       	andi	r18, 0x0F	; 15
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	83 70       	andi	r24, 0x03	; 3
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	a9 01       	movw	r20, r18
    3202:	44 0f       	add	r20, r20
    3204:	55 1f       	adc	r21, r21
    3206:	24 0f       	add	r18, r20
    3208:	35 1f       	adc	r19, r21
    320a:	22 0f       	add	r18, r18
    320c:	33 1f       	adc	r19, r19
    320e:	22 0f       	add	r18, r18
    3210:	33 1f       	adc	r19, r19
    3212:	ac 01       	movw	r20, r24
    3214:	44 0f       	add	r20, r20
    3216:	55 1f       	adc	r21, r21
    3218:	84 0f       	add	r24, r20
    321a:	95 1f       	adc	r25, r21
    321c:	82 0f       	add	r24, r18
    321e:	93 1f       	adc	r25, r19
    3220:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3224:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	08 95       	ret

0000322c <menuOnEnterModSecReg>:
    322c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3230:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3234:	3e 96       	adiw	r30, 0x0e	; 14
    3236:	85 91       	lpm	r24, Z+
    3238:	95 91       	lpm	r25, Z+
    323a:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    323e:	87 70       	andi	r24, 0x07	; 7
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9c 01       	movw	r18, r24
    3244:	22 0f       	add	r18, r18
    3246:	33 1f       	adc	r19, r19
    3248:	82 0f       	add	r24, r18
    324a:	93 1f       	adc	r25, r19
    324c:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    3250:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	08 95       	ret

00003258 <menuOnEnterKey>:
    3258:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    325c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3260:	3e 96       	adiw	r30, 0x0e	; 14
    3262:	85 91       	lpm	r24, Z+
    3264:	95 91       	lpm	r25, Z+
    3266:	84 30       	cpi	r24, 0x04	; 4
    3268:	60 f4       	brcc	.+24     	; 0x3282 <menuOnEnterKey+0x2a>
    326a:	fc 01       	movw	r30, r24
    326c:	ff 27       	eor	r31, r31
    326e:	ee 0f       	add	r30, r30
    3270:	ff 1f       	adc	r31, r31
    3272:	e6 54       	subi	r30, 0x46	; 70
    3274:	fa 4f       	sbci	r31, 0xFA	; 250
    3276:	80 81       	ld	r24, Z
    3278:	91 81       	ldd	r25, Z+1	; 0x01
    327a:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    327e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	08 95       	ret

00003286 <menuOnExitMidiThrough>:
    3286:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <eeprom_UpdateMidiThrough>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	08 95       	ret

0000328e <menuOnExitRegisterEdit>:
    328e:	1f 93       	push	r17
    3290:	cf 93       	push	r28
    3292:	df 93       	push	r29
    3294:	86 30       	cpi	r24, 0x06	; 6
    3296:	f1 f0       	breq	.+60     	; 0x32d4 <menuOnExitRegisterEdit+0x46>
    3298:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    329c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    32a0:	3e 96       	adiw	r30, 0x0e	; 14
    32a2:	05 90       	lpm	r0, Z+
    32a4:	f4 91       	lpm	r31, Z
    32a6:	e0 2d       	mov	r30, r0
    32a8:	cf 01       	movw	r24, r30
    32aa:	8d 56       	subi	r24, 0x6D	; 109
    32ac:	95 40       	sbci	r25, 0x05	; 5
    32ae:	88 0f       	add	r24, r24
    32b0:	88 0f       	add	r24, r24
    32b2:	88 0f       	add	r24, r24
    32b4:	d0 81       	ld	r29, Z
    32b6:	c0 e0       	ldi	r28, 0x00	; 0
    32b8:	0b c0       	rjmp	.+22     	; 0x32d0 <menuOnExitRegisterEdit+0x42>
    32ba:	11 e0       	ldi	r17, 0x01	; 1
    32bc:	18 0f       	add	r17, r24
    32be:	6d 2f       	mov	r22, r29
    32c0:	66 1f       	adc	r22, r22
    32c2:	66 27       	eor	r22, r22
    32c4:	66 1f       	adc	r22, r22
    32c6:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <register_onOff>
    32ca:	dd 0f       	add	r29, r29
    32cc:	cf 5f       	subi	r28, 0xFF	; 255
    32ce:	81 2f       	mov	r24, r17
    32d0:	c8 30       	cpi	r28, 0x08	; 8
    32d2:	98 f3       	brcs	.-26     	; 0x32ba <menuOnExitRegisterEdit+0x2c>
    32d4:	80 e0       	ldi	r24, 0x00	; 0
    32d6:	df 91       	pop	r29
    32d8:	cf 91       	pop	r28
    32da:	1f 91       	pop	r17
    32dc:	08 95       	ret

000032de <softKeyRegOff>:
    32de:	81 11       	cpse	r24, r1
    32e0:	0e 94 78 30 	call	0x60f0	; 0x60f0 <midi_resetRegisters>
    32e4:	80 e0       	ldi	r24, 0x00	; 0
    32e6:	08 95       	ret

000032e8 <menuOnExitCoupler>:
    32e8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    32ec:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    32f0:	3e 96       	adiw	r30, 0x0e	; 14
    32f2:	85 91       	lpm	r24, Z+
    32f4:	95 91       	lpm	r25, Z+
    32f6:	81 51       	subi	r24, 0x11	; 17
    32f8:	98 40       	sbci	r25, 0x08	; 8
    32fa:	fc 01       	movw	r30, r24
    32fc:	ff 27       	eor	r31, r31
    32fe:	ef 5e       	subi	r30, 0xEF	; 239
    3300:	f7 4f       	sbci	r31, 0xF7	; 247
    3302:	20 81       	ld	r18, Z
    3304:	21 11       	cpse	r18, r1
    3306:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <set_Coupler>
    330a:	80 e0       	ldi	r24, 0x00	; 0
    330c:	08 95       	ret

0000330e <menuOnExitSaveProgram>:
    330e:	86 30       	cpi	r24, 0x06	; 6
    3310:	39 f0       	breq	.+14     	; 0x3320 <menuOnExitSaveProgram+0x12>
    3312:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3316:	80 34       	cpi	r24, 0x40	; 64
    3318:	18 f4       	brcc	.+6      	; 0x3320 <menuOnExitSaveProgram+0x12>
    331a:	6f ef       	ldi	r22, 0xFF	; 255
    331c:	0e 94 4c 2f 	call	0x5e98	; 0x5e98 <register_toProgram>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	08 95       	ret

00003324 <menuOnExitKeys>:
    3324:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <eeprom_UpdateSoftkeys>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	08 95       	ret

0000332c <menu_readModule>:
    332c:	cf 92       	push	r12
    332e:	df 92       	push	r13
    3330:	ef 92       	push	r14
    3332:	ff 92       	push	r15
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <menu_readModule+0x16>
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	0a 94       	dec	r0
    3344:	e2 f7       	brpl	.-8      	; 0x333e <menu_readModule+0x12>
    3346:	28 2f       	mov	r18, r24
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	e1 e4       	ldi	r30, 0x41	; 65
    334c:	f3 e0       	ldi	r31, 0x03	; 3
    334e:	c1 2c       	mov	r12, r1
    3350:	d1 2c       	mov	r13, r1
    3352:	76 01       	movw	r14, r12
    3354:	0b c0       	rjmp	.+22     	; 0x336c <menu_readModule+0x40>
    3356:	cc 0c       	add	r12, r12
    3358:	dd 1c       	adc	r13, r13
    335a:	ee 1c       	adc	r14, r14
    335c:	ff 1c       	adc	r15, r15
    335e:	86 81       	ldd	r24, Z+6	; 0x06
    3360:	82 23       	and	r24, r18
    3362:	11 f0       	breq	.+4      	; 0x3368 <menu_readModule+0x3c>
    3364:	68 94       	set
    3366:	c0 f8       	bld	r12, 0
    3368:	38 97       	sbiw	r30, 0x08	; 8
    336a:	9f 5f       	subi	r25, 0xFF	; 255
    336c:	90 32       	cpi	r25, 0x20	; 32
    336e:	98 f3       	brcs	.-26     	; 0x3356 <menu_readModule+0x2a>
    3370:	8e e1       	ldi	r24, 0x1E	; 30
    3372:	3f d9       	rcall	.-3458   	; 0x25f2 <lcd_goto>
    3374:	c0 92 dd 18 	sts	0x18DD, r12	; 0x8018dd <editLong>
    3378:	d0 92 de 18 	sts	0x18DE, r13	; 0x8018de <editLong+0x1>
    337c:	e0 92 df 18 	sts	0x18DF, r14	; 0x8018df <editLong+0x2>
    3380:	f0 92 e0 18 	sts	0x18E0, r15	; 0x8018e0 <editLong+0x3>
    3384:	0e 94 75 39 	call	0x72ea	; 0x72ea <lcd_longout>
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	08 95       	ret

00003394 <menu_testModule>:
    3394:	8e e1       	ldi	r24, 0x1E	; 30
    3396:	2d d9       	rcall	.-3494   	; 0x25f2 <lcd_goto>
    3398:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    339c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <test_PipeModule>
    33a0:	60 93 dd 18 	sts	0x18DD, r22	; 0x8018dd <editLong>
    33a4:	70 93 de 18 	sts	0x18DE, r23	; 0x8018de <editLong+0x1>
    33a8:	80 93 df 18 	sts	0x18DF, r24	; 0x8018df <editLong+0x2>
    33ac:	90 93 e0 18 	sts	0x18E0, r25	; 0x8018e0 <editLong+0x3>
    33b0:	0e 94 75 39 	call	0x72ea	; 0x72ea <lcd_longout>
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	08 95       	ret

000033b8 <menuOnEnterTune>:
    33b8:	cf 93       	push	r28
    33ba:	8f 3f       	cpi	r24, 0xFF	; 255
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <menuOnEnterTune+0x8>
    33be:	77 c0       	rjmp	.+238    	; 0x34ae <menuOnEnterTune+0xf6>
    33c0:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.2997>
    33c4:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.2998>
    33c8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    33cc:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    33d0:	3e 96       	adiw	r30, 0x0e	; 14
    33d2:	85 91       	lpm	r24, Z+
    33d4:	95 91       	lpm	r25, Z+
    33d6:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    33da:	84 30       	cpi	r24, 0x04	; 4
    33dc:	10 f0       	brcs	.+4      	; 0x33e2 <menuOnEnterTune+0x2a>
    33de:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    33e2:	20 e0       	ldi	r18, 0x00	; 0
    33e4:	39 c0       	rjmp	.+114    	; 0x3458 <menuOnEnterTune+0xa0>
    33e6:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	e2 2f       	mov	r30, r18
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	df 01       	movw	r26, r30
    33f2:	aa 0f       	add	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	ad 01       	movw	r20, r26
    33f8:	4e 0f       	add	r20, r30
    33fa:	5f 1f       	adc	r21, r31
    33fc:	dc 01       	movw	r26, r24
    33fe:	aa 0f       	add	r26, r26
    3400:	bb 1f       	adc	r27, r27
    3402:	a8 0f       	add	r26, r24
    3404:	b9 1f       	adc	r27, r25
    3406:	aa 0f       	add	r26, r26
    3408:	bb 1f       	adc	r27, r27
    340a:	aa 0f       	add	r26, r26
    340c:	bb 1f       	adc	r27, r27
    340e:	a4 0f       	add	r26, r20
    3410:	b5 1f       	adc	r27, r21
    3412:	ac 5c       	subi	r26, 0xCC	; 204
    3414:	b6 4f       	sbci	r27, 0xF6	; 246
    3416:	3c 91       	ld	r19, X
    3418:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.2997>
    341c:	34 17       	cp	r19, r20
    341e:	10 f4       	brcc	.+4      	; 0x3424 <menuOnEnterTune+0x6c>
    3420:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.2997>
    3424:	af 01       	movw	r20, r30
    3426:	44 0f       	add	r20, r20
    3428:	55 1f       	adc	r21, r21
    342a:	e4 0f       	add	r30, r20
    342c:	f5 1f       	adc	r31, r21
    342e:	ac 01       	movw	r20, r24
    3430:	44 0f       	add	r20, r20
    3432:	55 1f       	adc	r21, r21
    3434:	84 0f       	add	r24, r20
    3436:	95 1f       	adc	r25, r21
    3438:	88 0f       	add	r24, r24
    343a:	99 1f       	adc	r25, r25
    343c:	88 0f       	add	r24, r24
    343e:	99 1f       	adc	r25, r25
    3440:	e8 0f       	add	r30, r24
    3442:	f9 1f       	adc	r31, r25
    3444:	ec 5c       	subi	r30, 0xCC	; 204
    3446:	f6 4f       	sbci	r31, 0xF6	; 246
    3448:	81 81       	ldd	r24, Z+1	; 0x01
    344a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.2998>
    344e:	98 17       	cp	r25, r24
    3450:	10 f4       	brcc	.+4      	; 0x3456 <menuOnEnterTune+0x9e>
    3452:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.2998>
    3456:	2f 5f       	subi	r18, 0xFF	; 255
    3458:	24 30       	cpi	r18, 0x04	; 4
    345a:	28 f2       	brcs	.-118    	; 0x33e6 <menuOnEnterTune+0x2e>
    345c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2997>
    3460:	88 23       	and	r24, r24
    3462:	4c f4       	brge	.+18     	; 0x3476 <menuOnEnterTune+0xbe>
    3464:	8e e1       	ldi	r24, 0x1E	; 30
    3466:	c5 d8       	rcall	.-3702   	; 0x25f2 <lcd_goto>
    3468:	80 ea       	ldi	r24, 0xA0	; 160
    346a:	93 e0       	ldi	r25, 0x03	; 3
    346c:	34 d9       	rcall	.-3480   	; 0x26d6 <lcd_puts_P>
    346e:	8f ef       	ldi	r24, 0xFF	; 255
    3470:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    3474:	04 c0       	rjmp	.+8      	; 0x347e <menuOnEnterTune+0xc6>
    3476:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    347a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2999>
    347e:	6a e8       	ldi	r22, 0x8A	; 138
    3480:	72 e1       	ldi	r23, 0x12	; 18
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    3488:	69 e9       	ldi	r22, 0x99	; 153
    348a:	72 e1       	ldi	r23, 0x12	; 18
    348c:	81 e0       	ldi	r24, 0x01	; 1
    348e:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    3492:	6e e9       	ldi	r22, 0x9E	; 158
    3494:	72 e1       	ldi	r23, 0x12	; 18
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    349c:	60 ea       	ldi	r22, 0xA0	; 160
    349e:	72 e1       	ldi	r23, 0x12	; 18
    34a0:	83 e0       	ldi	r24, 0x03	; 3
    34a2:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    34a6:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
    34aa:	cf ef       	ldi	r28, 0xFF	; 255
    34ac:	71 c0       	rjmp	.+226    	; 0x3590 <menuOnEnterTune+0x1d8>
    34ae:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    34b2:	6f 3f       	cpi	r22, 0xFF	; 255
    34b4:	09 f4       	brne	.+2      	; 0x34b8 <menuOnEnterTune+0x100>
    34b6:	61 c0       	rjmp	.+194    	; 0x357a <menuOnEnterTune+0x1c2>
    34b8:	81 30       	cpi	r24, 0x01	; 1
    34ba:	d9 f4       	brne	.+54     	; 0x34f2 <menuOnEnterTune+0x13a>
    34bc:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.2998>
    34c0:	68 17       	cp	r22, r24
    34c2:	08 f0       	brcs	.+2      	; 0x34c6 <menuOnEnterTune+0x10e>
    34c4:	5c c0       	rjmp	.+184    	; 0x357e <menuOnEnterTune+0x1c6>
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    34cc:	0e 94 1d 32 	call	0x643a	; 0x643a <manual_NoteOnOff>
    34d0:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    34d4:	6f 5f       	subi	r22, 0xFF	; 255
    34d6:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    34da:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2999>
    34de:	81 30       	cpi	r24, 0x01	; 1
    34e0:	09 f0       	breq	.+2      	; 0x34e4 <menuOnEnterTune+0x12c>
    34e2:	4f c0       	rjmp	.+158    	; 0x3582 <menuOnEnterTune+0x1ca>
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    34ea:	0e 94 1d 32 	call	0x643a	; 0x643a <manual_NoteOnOff>
    34ee:	cf ef       	ldi	r28, 0xFF	; 255
    34f0:	4f c0       	rjmp	.+158    	; 0x3590 <menuOnEnterTune+0x1d8>
    34f2:	84 30       	cpi	r24, 0x04	; 4
    34f4:	d1 f4       	brne	.+52     	; 0x352a <menuOnEnterTune+0x172>
    34f6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2997>
    34fa:	86 17       	cp	r24, r22
    34fc:	08 f0       	brcs	.+2      	; 0x3500 <menuOnEnterTune+0x148>
    34fe:	43 c0       	rjmp	.+134    	; 0x3586 <menuOnEnterTune+0x1ce>
    3500:	40 e0       	ldi	r20, 0x00	; 0
    3502:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3506:	0e 94 1d 32 	call	0x643a	; 0x643a <manual_NoteOnOff>
    350a:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    350e:	61 50       	subi	r22, 0x01	; 1
    3510:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3514:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2999>
    3518:	81 30       	cpi	r24, 0x01	; 1
    351a:	b9 f5       	brne	.+110    	; 0x358a <menuOnEnterTune+0x1d2>
    351c:	41 e0       	ldi	r20, 0x01	; 1
    351e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3522:	0e 94 1d 32 	call	0x643a	; 0x643a <manual_NoteOnOff>
    3526:	cf ef       	ldi	r28, 0xFF	; 255
    3528:	33 c0       	rjmp	.+102    	; 0x3590 <menuOnEnterTune+0x1d8>
    352a:	83 30       	cpi	r24, 0x03	; 3
    352c:	91 f4       	brne	.+36     	; 0x3552 <menuOnEnterTune+0x19a>
    352e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2999>
    3532:	81 11       	cpse	r24, r1
    3534:	04 c0       	rjmp	.+8      	; 0x353e <menuOnEnterTune+0x186>
    3536:	81 e0       	ldi	r24, 0x01	; 1
    3538:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.2999>
    353c:	02 c0       	rjmp	.+4      	; 0x3542 <menuOnEnterTune+0x18a>
    353e:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2999>
    3542:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.2999>
    3546:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    354a:	0e 94 1d 32 	call	0x643a	; 0x643a <manual_NoteOnOff>
    354e:	cf ef       	ldi	r28, 0xFF	; 255
    3550:	1f c0       	rjmp	.+62     	; 0x3590 <menuOnEnterTune+0x1d8>
    3552:	82 30       	cpi	r24, 0x02	; 2
    3554:	11 f0       	breq	.+4      	; 0x355a <menuOnEnterTune+0x1a2>
    3556:	86 30       	cpi	r24, 0x06	; 6
    3558:	39 f4       	brne	.+14     	; 0x3568 <menuOnEnterTune+0x1b0>
    355a:	40 e0       	ldi	r20, 0x00	; 0
    355c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3560:	0e 94 1d 32 	call	0x643a	; 0x643a <manual_NoteOnOff>
    3564:	c0 e0       	ldi	r28, 0x00	; 0
    3566:	14 c0       	rjmp	.+40     	; 0x3590 <menuOnEnterTune+0x1d8>
    3568:	85 30       	cpi	r24, 0x05	; 5
    356a:	89 f4       	brne	.+34     	; 0x358e <menuOnEnterTune+0x1d6>
    356c:	40 e0       	ldi	r20, 0x00	; 0
    356e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3572:	0e 94 1d 32 	call	0x643a	; 0x643a <manual_NoteOnOff>
    3576:	c0 e0       	ldi	r28, 0x00	; 0
    3578:	0b c0       	rjmp	.+22     	; 0x3590 <menuOnEnterTune+0x1d8>
    357a:	c0 e0       	ldi	r28, 0x00	; 0
    357c:	09 c0       	rjmp	.+18     	; 0x3590 <menuOnEnterTune+0x1d8>
    357e:	cf ef       	ldi	r28, 0xFF	; 255
    3580:	07 c0       	rjmp	.+14     	; 0x3590 <menuOnEnterTune+0x1d8>
    3582:	cf ef       	ldi	r28, 0xFF	; 255
    3584:	05 c0       	rjmp	.+10     	; 0x3590 <menuOnEnterTune+0x1d8>
    3586:	cf ef       	ldi	r28, 0xFF	; 255
    3588:	03 c0       	rjmp	.+6      	; 0x3590 <menuOnEnterTune+0x1d8>
    358a:	cf ef       	ldi	r28, 0xFF	; 255
    358c:	01 c0       	rjmp	.+2      	; 0x3590 <menuOnEnterTune+0x1d8>
    358e:	cf ef       	ldi	r28, 0xFF	; 255
    3590:	cf 3f       	cpi	r28, 0xFF	; 255
    3592:	59 f5       	brne	.+86     	; 0x35ea <menuOnEnterTune+0x232>
    3594:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    3598:	8f 3f       	cpi	r24, 0xFF	; 255
    359a:	29 f1       	breq	.+74     	; 0x35e6 <menuOnEnterTune+0x22e>
    359c:	8e e1       	ldi	r24, 0x1E	; 30
    359e:	29 d8       	rcall	.-4014   	; 0x25f2 <lcd_goto>
    35a0:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    35a4:	0e 94 f1 3a 	call	0x75e2	; 0x75e2 <lcd_noteOut>
    35a8:	80 e2       	ldi	r24, 0x20	; 32
    35aa:	4d d8       	rcall	.-3942   	; 0x2646 <lcd_putc>
    35ac:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2999>
    35b0:	81 11       	cpse	r24, r1
    35b2:	07 c0       	rjmp	.+14     	; 0x35c2 <menuOnEnterTune+0x20a>
    35b4:	81 e6       	ldi	r24, 0x61	; 97
    35b6:	47 d8       	rcall	.-3954   	; 0x2646 <lcd_putc>
    35b8:	85 e7       	ldi	r24, 0x75	; 117
    35ba:	45 d8       	rcall	.-3958   	; 0x2646 <lcd_putc>
    35bc:	83 e7       	ldi	r24, 0x73	; 115
    35be:	43 d8       	rcall	.-3962   	; 0x2646 <lcd_putc>
    35c0:	06 c0       	rjmp	.+12     	; 0x35ce <menuOnEnterTune+0x216>
    35c2:	85 e6       	ldi	r24, 0x65	; 101
    35c4:	40 d8       	rcall	.-3968   	; 0x2646 <lcd_putc>
    35c6:	89 e6       	ldi	r24, 0x69	; 105
    35c8:	3e d8       	rcall	.-3972   	; 0x2646 <lcd_putc>
    35ca:	8e e6       	ldi	r24, 0x6E	; 110
    35cc:	3c d8       	rcall	.-3976   	; 0x2646 <lcd_putc>
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2999>
    35d4:	81 11       	cpse	r24, r1
    35d6:	01 c0       	rjmp	.+2      	; 0x35da <menuOnEnterTune+0x222>
    35d8:	60 e0       	ldi	r22, 0x00	; 0
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	0e 94 1f 3c 	call	0x783e	; 0x783e <keylabel_statcheck>
    35e0:	81 11       	cpse	r24, r1
    35e2:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
    35e6:	8e e1       	ldi	r24, 0x1E	; 30
    35e8:	04 d8       	rcall	.-4088   	; 0x25f2 <lcd_goto>
    35ea:	8c 2f       	mov	r24, r28
    35ec:	cf 91       	pop	r28
    35ee:	08 95       	ret

000035f0 <menuOnExitMidiActiveSense>:
    35f0:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_UpdateMidiOutMap>
    35f4:	80 e0       	ldi	r24, 0x00	; 0
    35f6:	08 95       	ret

000035f8 <menuOnExitMidiOut>:
    35f8:	0e 94 05 0c 	call	0x180a	; 0x180a <eeprom_UpdateMidiOutMap>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	08 95       	ret

00003600 <menuOnExitMidiIn>:
    3600:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <eeprom_UpdateMidiInMap>
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	08 95       	ret

00003608 <menuOnExitManual>:
    3608:	0e 94 c1 0b 	call	0x1782	; 0x1782 <eeprom_UpdateManualMap>
    360c:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <registers_CalcCount>
    3610:	0e 94 a1 0c 	call	0x1942	; 0x1942 <eeprom_UpdateReg>
    3614:	0e 94 22 31 	call	0x6244	; 0x6244 <Midi_updateManualRange>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	08 95       	ret

0000361c <menuOnExitModules>:
    361c:	0e 94 35 0c 	call	0x186a	; 0x186a <eeprom_UpdateModules>
    3620:	80 e0       	ldi	r24, 0x00	; 0
    3622:	08 95       	ret

00003624 <menuOnEnterUSBprotokoll>:
    3624:	cf 93       	push	r28
    3626:	83 e8       	ldi	r24, 0x83	; 131
    3628:	93 e0       	ldi	r25, 0x03	; 3
    362a:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    362e:	6e d8       	rcall	.-3876   	; 0x270c <log_count>
    3630:	81 11       	cpse	r24, r1
    3632:	17 c0       	rjmp	.+46     	; 0x3662 <menuOnEnterUSBprotokoll+0x3e>
    3634:	89 e8       	ldi	r24, 0x89	; 137
    3636:	93 e0       	ldi	r25, 0x03	; 3
    3638:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    363c:	16 c0       	rjmp	.+44     	; 0x366a <menuOnEnterUSBprotokoll+0x46>
    363e:	6f ef       	ldi	r22, 0xFF	; 255
    3640:	8c 2f       	mov	r24, r28
    3642:	05 da       	rcall	.-3062   	; 0x2a4e <log_getShortTextFromIndex>
    3644:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3648:	82 ec       	ldi	r24, 0xC2	; 194
    364a:	92 e1       	ldi	r25, 0x12	; 18
    364c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3650:	8c 2f       	mov	r24, r28
    3652:	a3 d8       	rcall	.-3770   	; 0x279a <log_getErrorText>
    3654:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3658:	82 ec       	ldi	r24, 0xC2	; 194
    365a:	92 e1       	ldi	r25, 0x12	; 18
    365c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3660:	8c 2f       	mov	r24, r28
    3662:	cf ef       	ldi	r28, 0xFF	; 255
    3664:	c8 0f       	add	r28, r24
    3666:	81 11       	cpse	r24, r1
    3668:	ea cf       	rjmp	.-44     	; 0x363e <menuOnEnterUSBprotokoll+0x1a>
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	cf 91       	pop	r28
    366e:	08 95       	ret

00003670 <menuOnExitUSBactive>:
    3670:	0e 94 5f 0c 	call	0x18be	; 0x18be <eeprom_UpdateUSB>
    3674:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    3678:	8f 3f       	cpi	r24, 0xFF	; 255
    367a:	61 f4       	brne	.+24     	; 0x3694 <menuOnExitUSBactive+0x24>
    367c:	8a e6       	ldi	r24, 0x6A	; 106
    367e:	93 e0       	ldi	r25, 0x03	; 3
    3680:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3684:	82 e6       	ldi	r24, 0x62	; 98
    3686:	92 e1       	ldi	r25, 0x12	; 18
    3688:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    368c:	82 ec       	ldi	r24, 0xC2	; 194
    368e:	92 e1       	ldi	r25, 0x12	; 18
    3690:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3694:	80 e0       	ldi	r24, 0x00	; 0
    3696:	08 95       	ret

00003698 <menuOnEnterUSBsendHW>:
    3698:	9f 92       	push	r9
    369a:	af 92       	push	r10
    369c:	bf 92       	push	r11
    369e:	cf 92       	push	r12
    36a0:	df 92       	push	r13
    36a2:	ef 92       	push	r14
    36a4:	ff 92       	push	r15
    36a6:	0f 93       	push	r16
    36a8:	1f 93       	push	r17
    36aa:	cf 93       	push	r28
    36ac:	df 93       	push	r29
    36ae:	81 e5       	ldi	r24, 0x51	; 81
    36b0:	93 e0       	ldi	r25, 0x03	; 3
    36b2:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    36b6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    36ba:	8e e3       	ldi	r24, 0x3E	; 62
    36bc:	93 e0       	ldi	r25, 0x03	; 3
    36be:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    36c2:	c5 e5       	ldi	r28, 0x55	; 85
    36c4:	d3 e0       	ldi	r29, 0x03	; 3
    36c6:	61 ee       	ldi	r22, 0xE1	; 225
    36c8:	78 e1       	ldi	r23, 0x18	; 24
    36ca:	88 81       	ld	r24, Y
    36cc:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    36d0:	22 e7       	ldi	r18, 0x72	; 114
    36d2:	fc 01       	movw	r30, r24
    36d4:	20 83       	st	Z, r18
    36d6:	bc 01       	movw	r22, r24
    36d8:	6e 5f       	subi	r22, 0xFE	; 254
    36da:	7f 4f       	sbci	r23, 0xFF	; 255
    36dc:	20 e2       	ldi	r18, 0x20	; 32
    36de:	21 83       	std	Z+1, r18	; 0x01
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
    36e2:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    36e6:	27 e7       	ldi	r18, 0x77	; 119
    36e8:	fc 01       	movw	r30, r24
    36ea:	20 83       	st	Z, r18
    36ec:	81 ee       	ldi	r24, 0xE1	; 225
    36ee:	98 e1       	ldi	r25, 0x18	; 24
    36f0:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    36f4:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    36f8:	8c e2       	ldi	r24, 0x2C	; 44
    36fa:	93 e0       	ldi	r25, 0x03	; 3
    36fc:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3700:	61 ee       	ldi	r22, 0xE1	; 225
    3702:	78 e1       	ldi	r23, 0x18	; 24
    3704:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    3708:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    370c:	81 ee       	ldi	r24, 0xE1	; 225
    370e:	98 e1       	ldi	r25, 0x18	; 24
    3710:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3714:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3718:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    371c:	e1 2c       	mov	r14, r1
    371e:	d1 c0       	rjmp	.+418    	; 0x38c2 <menuOnEnterUSBsendHW+0x22a>
    3720:	83 e2       	ldi	r24, 0x23	; 35
    3722:	93 e0       	ldi	r25, 0x03	; 3
    3724:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3728:	61 ee       	ldi	r22, 0xE1	; 225
    372a:	78 e1       	ldi	r23, 0x18	; 24
    372c:	8e 2d       	mov	r24, r14
    372e:	0e 94 ab 3a 	call	0x7556	; 0x7556 <putChar_Manual>
    3732:	81 ee       	ldi	r24, 0xE1	; 225
    3734:	98 e1       	ldi	r25, 0x18	; 24
    3736:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    373a:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    373e:	f1 2c       	mov	r15, r1
    3740:	a4 c0       	rjmp	.+328    	; 0x388a <menuOnEnterUSBsendHW+0x1f2>
    3742:	8c e1       	ldi	r24, 0x1C	; 28
    3744:	93 e0       	ldi	r25, 0x03	; 3
    3746:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    374a:	80 e3       	ldi	r24, 0x30	; 48
    374c:	8f 0d       	add	r24, r15
    374e:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    3752:	8a e3       	ldi	r24, 0x3A	; 58
    3754:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    3758:	80 e2       	ldi	r24, 0x20	; 32
    375a:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    375e:	0e 2d       	mov	r16, r14
    3760:	10 e0       	ldi	r17, 0x00	; 0
    3762:	cf 2c       	mov	r12, r15
    3764:	d1 2c       	mov	r13, r1
    3766:	e6 01       	movw	r28, r12
    3768:	cc 0f       	add	r28, r28
    376a:	dd 1f       	adc	r29, r29
    376c:	ce 01       	movw	r24, r28
    376e:	8c 0d       	add	r24, r12
    3770:	9d 1d       	adc	r25, r13
    3772:	e8 01       	movw	r28, r16
    3774:	cc 0f       	add	r28, r28
    3776:	dd 1f       	adc	r29, r29
    3778:	c0 0f       	add	r28, r16
    377a:	d1 1f       	adc	r29, r17
    377c:	cc 0f       	add	r28, r28
    377e:	dd 1f       	adc	r29, r29
    3780:	cc 0f       	add	r28, r28
    3782:	dd 1f       	adc	r29, r29
    3784:	c8 0f       	add	r28, r24
    3786:	d9 1f       	adc	r29, r25
    3788:	cc 5c       	subi	r28, 0xCC	; 204
    378a:	d6 4f       	sbci	r29, 0xF6	; 246
    378c:	61 ee       	ldi	r22, 0xE1	; 225
    378e:	78 e1       	ldi	r23, 0x18	; 24
    3790:	88 81       	ld	r24, Y
    3792:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    3796:	bc 01       	movw	r22, r24
    3798:	6f 5f       	subi	r22, 0xFF	; 255
    379a:	7f 4f       	sbci	r23, 0xFF	; 255
    379c:	0f 2e       	mov	r0, r31
    379e:	fe e2       	ldi	r31, 0x2E	; 46
    37a0:	bf 2e       	mov	r11, r31
    37a2:	f0 2d       	mov	r31, r0
    37a4:	fc 01       	movw	r30, r24
    37a6:	b0 82       	st	Z, r11
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    37ae:	bc 01       	movw	r22, r24
    37b0:	6f 5f       	subi	r22, 0xFF	; 255
    37b2:	7f 4f       	sbci	r23, 0xFF	; 255
    37b4:	fc 01       	movw	r30, r24
    37b6:	b0 82       	st	Z, r11
    37b8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ba:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    37be:	fc 01       	movw	r30, r24
    37c0:	80 e2       	ldi	r24, 0x20	; 32
    37c2:	80 83       	st	Z, r24
    37c4:	9d e3       	ldi	r25, 0x3D	; 61
    37c6:	91 83       	std	Z+1, r25	; 0x01
    37c8:	82 83       	std	Z+2, r24	; 0x02
    37ca:	81 ee       	ldi	r24, 0xE1	; 225
    37cc:	98 e1       	ldi	r25, 0x18	; 24
    37ce:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    37d2:	88 81       	ld	r24, Y
    37d4:	88 23       	and	r24, r24
    37d6:	2c f4       	brge	.+10     	; 0x37e2 <menuOnEnterUSBsendHW+0x14a>
    37d8:	8a e0       	ldi	r24, 0x0A	; 10
    37da:	93 e0       	ldi	r25, 0x03	; 3
    37dc:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    37e0:	51 c0       	rjmp	.+162    	; 0x3884 <menuOnEnterUSBsendHW+0x1ec>
    37e2:	61 ee       	ldi	r22, 0xE1	; 225
    37e4:	78 e1       	ldi	r23, 0x18	; 24
    37e6:	0e 94 4f 3a 	call	0x749e	; 0x749e <putChar_Note>
    37ea:	bc 01       	movw	r22, r24
    37ec:	6f 5f       	subi	r22, 0xFF	; 255
    37ee:	7f 4f       	sbci	r23, 0xFF	; 255
    37f0:	0f 2e       	mov	r0, r31
    37f2:	fd e2       	ldi	r31, 0x2D	; 45
    37f4:	9f 2e       	mov	r9, r31
    37f6:	f0 2d       	mov	r31, r0
    37f8:	fc 01       	movw	r30, r24
    37fa:	90 82       	st	Z, r9
    37fc:	f6 01       	movw	r30, r12
    37fe:	ee 0f       	add	r30, r30
    3800:	ff 1f       	adc	r31, r31
    3802:	ce 0e       	add	r12, r30
    3804:	df 1e       	adc	r13, r31
    3806:	58 01       	movw	r10, r16
    3808:	aa 0c       	add	r10, r10
    380a:	bb 1c       	adc	r11, r11
    380c:	e5 01       	movw	r28, r10
    380e:	c0 0f       	add	r28, r16
    3810:	d1 1f       	adc	r29, r17
    3812:	cc 0f       	add	r28, r28
    3814:	dd 1f       	adc	r29, r29
    3816:	cc 0f       	add	r28, r28
    3818:	dd 1f       	adc	r29, r29
    381a:	cc 0d       	add	r28, r12
    381c:	dd 1d       	adc	r29, r13
    381e:	cc 5c       	subi	r28, 0xCC	; 204
    3820:	d6 4f       	sbci	r29, 0xF6	; 246
    3822:	89 81       	ldd	r24, Y+1	; 0x01
    3824:	0e 94 4f 3a 	call	0x749e	; 0x749e <putChar_Note>
    3828:	20 e2       	ldi	r18, 0x20	; 32
    382a:	fc 01       	movw	r30, r24
    382c:	20 83       	st	Z, r18
    382e:	11 82       	std	Z+1, r1	; 0x01
    3830:	81 ee       	ldi	r24, 0xE1	; 225
    3832:	98 e1       	ldi	r25, 0x18	; 24
    3834:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3838:	82 e0       	ldi	r24, 0x02	; 2
    383a:	93 e0       	ldi	r25, 0x03	; 3
    383c:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3840:	8a 81       	ldd	r24, Y+2	; 0x02
    3842:	82 95       	swap	r24
    3844:	86 95       	lsr	r24
    3846:	87 70       	andi	r24, 0x07	; 7
    3848:	80 5d       	subi	r24, 0xD0	; 208
    384a:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    384e:	8a ef       	ldi	r24, 0xFA	; 250
    3850:	92 e0       	ldi	r25, 0x02	; 2
    3852:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	61 ee       	ldi	r22, 0xE1	; 225
    385a:	78 e1       	ldi	r23, 0x18	; 24
    385c:	8f 71       	andi	r24, 0x1F	; 31
    385e:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    3862:	bc 01       	movw	r22, r24
    3864:	6f 5f       	subi	r22, 0xFF	; 255
    3866:	7f 4f       	sbci	r23, 0xFF	; 255
    3868:	fc 01       	movw	r30, r24
    386a:	90 82       	st	Z, r9
    386c:	8a 81       	ldd	r24, Y+2	; 0x02
    386e:	99 81       	ldd	r25, Y+1	; 0x01
    3870:	28 81       	ld	r18, Y
    3872:	8f 71       	andi	r24, 0x1F	; 31
    3874:	89 0f       	add	r24, r25
    3876:	82 1b       	sub	r24, r18
    3878:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    387c:	81 ee       	ldi	r24, 0xE1	; 225
    387e:	98 e1       	ldi	r25, 0x18	; 24
    3880:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3884:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3888:	f3 94       	inc	r15
    388a:	f3 e0       	ldi	r31, 0x03	; 3
    388c:	ff 15       	cp	r31, r15
    388e:	08 f0       	brcs	.+2      	; 0x3892 <menuOnEnterUSBsendHW+0x1fa>
    3890:	58 cf       	rjmp	.-336    	; 0x3742 <menuOnEnterUSBsendHW+0xaa>
    3892:	88 ed       	ldi	r24, 0xD8	; 216
    3894:	92 e0       	ldi	r25, 0x02	; 2
    3896:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    389a:	ee 2d       	mov	r30, r14
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	ee 0f       	add	r30, r30
    38a0:	ff 1f       	adc	r31, r31
    38a2:	e8 5d       	subi	r30, 0xD8	; 216
    38a4:	f6 4f       	sbci	r31, 0xF6	; 246
    38a6:	61 ee       	ldi	r22, 0xE1	; 225
    38a8:	78 e1       	ldi	r23, 0x18	; 24
    38aa:	81 81       	ldd	r24, Z+1	; 0x01
    38ac:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_MidiChan>
    38b0:	81 ee       	ldi	r24, 0xE1	; 225
    38b2:	98 e1       	ldi	r25, 0x18	; 24
    38b4:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    38b8:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    38bc:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    38c0:	e3 94       	inc	r14
    38c2:	83 e0       	ldi	r24, 0x03	; 3
    38c4:	8e 15       	cp	r24, r14
    38c6:	08 f0       	brcs	.+2      	; 0x38ca <menuOnEnterUSBsendHW+0x232>
    38c8:	2b cf       	rjmp	.-426    	; 0x3720 <menuOnEnterUSBsendHW+0x88>
    38ca:	80 e1       	ldi	r24, 0x10	; 16
    38cc:	93 e0       	ldi	r25, 0x03	; 3
    38ce:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    38d2:	f1 2c       	mov	r15, r1
    38d4:	94 c0       	rjmp	.+296    	; 0x39fe <menuOnEnterUSBsendHW+0x366>
    38d6:	8c e1       	ldi	r24, 0x1C	; 28
    38d8:	93 e0       	ldi	r25, 0x03	; 3
    38da:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    38de:	80 e3       	ldi	r24, 0x30	; 48
    38e0:	8f 0d       	add	r24, r15
    38e2:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    38e6:	8a e3       	ldi	r24, 0x3A	; 58
    38e8:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    38ec:	80 e2       	ldi	r24, 0x20	; 32
    38ee:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    38f2:	cf 2d       	mov	r28, r15
    38f4:	d0 e0       	ldi	r29, 0x00	; 0
    38f6:	8e 01       	movw	r16, r28
    38f8:	00 0f       	add	r16, r16
    38fa:	11 1f       	adc	r17, r17
    38fc:	0c 0f       	add	r16, r28
    38fe:	1d 1f       	adc	r17, r29
    3900:	09 50       	subi	r16, 0x09	; 9
    3902:	18 4f       	sbci	r17, 0xF8	; 248
    3904:	61 ee       	ldi	r22, 0xE1	; 225
    3906:	78 e1       	ldi	r23, 0x18	; 24
    3908:	f8 01       	movw	r30, r16
    390a:	80 81       	ld	r24, Z
    390c:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    3910:	bc 01       	movw	r22, r24
    3912:	6f 5f       	subi	r22, 0xFF	; 255
    3914:	7f 4f       	sbci	r23, 0xFF	; 255
    3916:	0f 2e       	mov	r0, r31
    3918:	fe e2       	ldi	r31, 0x2E	; 46
    391a:	ef 2e       	mov	r14, r31
    391c:	f0 2d       	mov	r31, r0
    391e:	fc 01       	movw	r30, r24
    3920:	e0 82       	st	Z, r14
    3922:	f8 01       	movw	r30, r16
    3924:	81 81       	ldd	r24, Z+1	; 0x01
    3926:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    392a:	bc 01       	movw	r22, r24
    392c:	6f 5f       	subi	r22, 0xFF	; 255
    392e:	7f 4f       	sbci	r23, 0xFF	; 255
    3930:	fc 01       	movw	r30, r24
    3932:	e0 82       	st	Z, r14
    3934:	f8 01       	movw	r30, r16
    3936:	82 81       	ldd	r24, Z+2	; 0x02
    3938:	0e 94 f7 39 	call	0x73ee	; 0x73ee <putChar_hex>
    393c:	fc 01       	movw	r30, r24
    393e:	80 e2       	ldi	r24, 0x20	; 32
    3940:	80 83       	st	Z, r24
    3942:	9d e3       	ldi	r25, 0x3D	; 61
    3944:	91 83       	std	Z+1, r25	; 0x01
    3946:	82 83       	std	Z+2, r24	; 0x02
    3948:	13 82       	std	Z+3, r1	; 0x03
    394a:	81 ee       	ldi	r24, 0xE1	; 225
    394c:	98 e1       	ldi	r25, 0x18	; 24
    394e:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3952:	f8 01       	movw	r30, r16
    3954:	80 81       	ld	r24, Z
    3956:	8f 3f       	cpi	r24, 0xFF	; 255
    3958:	29 f4       	brne	.+10     	; 0x3964 <menuOnEnterUSBsendHW+0x2cc>
    395a:	8a e0       	ldi	r24, 0x0A	; 10
    395c:	93 e0       	ldi	r25, 0x03	; 3
    395e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3962:	4a c0       	rjmp	.+148    	; 0x39f8 <menuOnEnterUSBsendHW+0x360>
    3964:	e1 ee       	ldi	r30, 0xE1	; 225
    3966:	f8 e1       	ldi	r31, 0x18	; 24
    3968:	92 e5       	ldi	r25, 0x52	; 82
    396a:	90 83       	st	Z, r25
    396c:	9e e2       	ldi	r25, 0x2E	; 46
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	63 ee       	ldi	r22, 0xE3	; 227
    3972:	78 e1       	ldi	r23, 0x18	; 24
    3974:	8f 5f       	subi	r24, 0xFF	; 255
    3976:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <putChar_Dec>
    397a:	bc 01       	movw	r22, r24
    397c:	6f 5f       	subi	r22, 0xFF	; 255
    397e:	7f 4f       	sbci	r23, 0xFF	; 255
    3980:	1d e2       	ldi	r17, 0x2D	; 45
    3982:	fc 01       	movw	r30, r24
    3984:	10 83       	st	Z, r17
    3986:	ce 01       	movw	r24, r28
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	c8 0f       	add	r28, r24
    398e:	d9 1f       	adc	r29, r25
    3990:	c9 50       	subi	r28, 0x09	; 9
    3992:	d8 4f       	sbci	r29, 0xF8	; 248
    3994:	89 81       	ldd	r24, Y+1	; 0x01
    3996:	8f 5f       	subi	r24, 0xFF	; 255
    3998:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <putChar_Dec>
    399c:	20 e2       	ldi	r18, 0x20	; 32
    399e:	fc 01       	movw	r30, r24
    39a0:	20 83       	st	Z, r18
    39a2:	11 82       	std	Z+1, r1	; 0x01
    39a4:	81 ee       	ldi	r24, 0xE1	; 225
    39a6:	98 e1       	ldi	r25, 0x18	; 24
    39a8:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    39ac:	82 e0       	ldi	r24, 0x02	; 2
    39ae:	93 e0       	ldi	r25, 0x03	; 3
    39b0:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	82 95       	swap	r24
    39b8:	86 95       	lsr	r24
    39ba:	87 70       	andi	r24, 0x07	; 7
    39bc:	80 5d       	subi	r24, 0xD0	; 208
    39be:	0e 94 30 36 	call	0x6c60	; 0x6c60 <serial0SER_USBSend>
    39c2:	8a ef       	ldi	r24, 0xFA	; 250
    39c4:	92 e0       	ldi	r25, 0x02	; 2
    39c6:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    39ca:	8a 81       	ldd	r24, Y+2	; 0x02
    39cc:	61 ee       	ldi	r22, 0xE1	; 225
    39ce:	78 e1       	ldi	r23, 0x18	; 24
    39d0:	8f 71       	andi	r24, 0x1F	; 31
    39d2:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    39d6:	bc 01       	movw	r22, r24
    39d8:	6f 5f       	subi	r22, 0xFF	; 255
    39da:	7f 4f       	sbci	r23, 0xFF	; 255
    39dc:	fc 01       	movw	r30, r24
    39de:	10 83       	st	Z, r17
    39e0:	8a 81       	ldd	r24, Y+2	; 0x02
    39e2:	99 81       	ldd	r25, Y+1	; 0x01
    39e4:	28 81       	ld	r18, Y
    39e6:	8f 71       	andi	r24, 0x1F	; 31
    39e8:	89 0f       	add	r24, r25
    39ea:	82 1b       	sub	r24, r18
    39ec:	0e 94 b4 39 	call	0x7368	; 0x7368 <putChar_Dec2>
    39f0:	81 ee       	ldi	r24, 0xE1	; 225
    39f2:	98 e1       	ldi	r25, 0x18	; 24
    39f4:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    39f8:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    39fc:	f3 94       	inc	r15
    39fe:	f7 e0       	ldi	r31, 0x07	; 7
    3a00:	ff 15       	cp	r31, r15
    3a02:	08 f0       	brcs	.+2      	; 0x3a06 <menuOnEnterUSBsendHW+0x36e>
    3a04:	68 cf       	rjmp	.-304    	; 0x38d6 <menuOnEnterUSBsendHW+0x23e>
    3a06:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3a0a:	8f ec       	ldi	r24, 0xCF	; 207
    3a0c:	92 e0       	ldi	r25, 0x02	; 2
    3a0e:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3a12:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3a16:	e1 2c       	mov	r14, r1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	64 c0       	rjmp	.+200    	; 0x3ae4 <menuOnEnterUSBsendHW+0x44c>
    3a1c:	ce 2d       	mov	r28, r14
    3a1e:	d0 e0       	ldi	r29, 0x00	; 0
    3a20:	0f 2d       	mov	r16, r15
    3a22:	10 e0       	ldi	r17, 0x00	; 0
    3a24:	fe 01       	movw	r30, r28
    3a26:	ee 0f       	add	r30, r30
    3a28:	ff 1f       	adc	r31, r31
    3a2a:	ee 0f       	add	r30, r30
    3a2c:	ff 1f       	adc	r31, r31
    3a2e:	e0 0f       	add	r30, r16
    3a30:	f1 1f       	adc	r31, r17
    3a32:	ee 0f       	add	r30, r30
    3a34:	ff 1f       	adc	r31, r31
    3a36:	ee 0f       	add	r30, r30
    3a38:	ff 1f       	adc	r31, r31
    3a3a:	e8 5d       	subi	r30, 0xD8	; 216
    3a3c:	f7 4f       	sbci	r31, 0xF7	; 247
    3a3e:	80 81       	ld	r24, Z
    3a40:	8f 3f       	cpi	r24, 0xFF	; 255
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <menuOnEnterUSBsendHW+0x3ae>
    3a44:	47 c0       	rjmp	.+142    	; 0x3ad4 <menuOnEnterUSBsendHW+0x43c>
    3a46:	61 ee       	ldi	r22, 0xE1	; 225
    3a48:	78 e1       	ldi	r23, 0x18	; 24
    3a4a:	8e 2d       	mov	r24, r14
    3a4c:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_MidiChan>
    3a50:	bc 01       	movw	r22, r24
    3a52:	6f 5f       	subi	r22, 0xFF	; 255
    3a54:	7f 4f       	sbci	r23, 0xFF	; 255
    3a56:	0f 2e       	mov	r0, r31
    3a58:	f8 e2       	ldi	r31, 0x28	; 40
    3a5a:	df 2e       	mov	r13, r31
    3a5c:	f0 2d       	mov	r31, r0
    3a5e:	fc 01       	movw	r30, r24
    3a60:	d0 82       	st	Z, r13
    3a62:	cc 0f       	add	r28, r28
    3a64:	dd 1f       	adc	r29, r29
    3a66:	cc 0f       	add	r28, r28
    3a68:	dd 1f       	adc	r29, r29
    3a6a:	c0 0f       	add	r28, r16
    3a6c:	d1 1f       	adc	r29, r17
    3a6e:	cc 0f       	add	r28, r28
    3a70:	dd 1f       	adc	r29, r29
    3a72:	cc 0f       	add	r28, r28
    3a74:	dd 1f       	adc	r29, r29
    3a76:	c8 5d       	subi	r28, 0xD8	; 216
    3a78:	d7 4f       	sbci	r29, 0xF7	; 247
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	0e 94 4f 3a 	call	0x749e	; 0x749e <putChar_Note>
    3a80:	bc 01       	movw	r22, r24
    3a82:	6f 5f       	subi	r22, 0xFF	; 255
    3a84:	7f 4f       	sbci	r23, 0xFF	; 255
    3a86:	2d e2       	ldi	r18, 0x2D	; 45
    3a88:	fc 01       	movw	r30, r24
    3a8a:	20 83       	st	Z, r18
    3a8c:	99 81       	ldd	r25, Y+1	; 0x01
    3a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a90:	89 0f       	add	r24, r25
    3a92:	0e 94 4f 3a 	call	0x749e	; 0x749e <putChar_Note>
    3a96:	fc 01       	movw	r30, r24
    3a98:	19 e2       	ldi	r17, 0x29	; 41
    3a9a:	10 83       	st	Z, r17
    3a9c:	80 e2       	ldi	r24, 0x20	; 32
    3a9e:	81 83       	std	Z+1, r24	; 0x01
    3aa0:	bf 01       	movw	r22, r30
    3aa2:	6d 5f       	subi	r22, 0xFD	; 253
    3aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa6:	8e e3       	ldi	r24, 0x3E	; 62
    3aa8:	82 83       	std	Z+2, r24	; 0x02
    3aaa:	88 81       	ld	r24, Y
    3aac:	0e 94 ab 3a 	call	0x7556	; 0x7556 <putChar_Manual>
    3ab0:	bc 01       	movw	r22, r24
    3ab2:	6f 5f       	subi	r22, 0xFF	; 255
    3ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	d0 82       	st	Z, r13
    3aba:	8b 81       	ldd	r24, Y+3	; 0x03
    3abc:	0e 94 4f 3a 	call	0x749e	; 0x749e <putChar_Note>
    3ac0:	fc 01       	movw	r30, r24
    3ac2:	10 83       	st	Z, r17
    3ac4:	11 82       	std	Z+1, r1	; 0x01
    3ac6:	81 ee       	ldi	r24, 0xE1	; 225
    3ac8:	98 e1       	ldi	r25, 0x18	; 24
    3aca:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3ace:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3ad2:	9f ef       	ldi	r25, 0xFF	; 255
    3ad4:	f3 94       	inc	r15
    3ad6:	01 c0       	rjmp	.+2      	; 0x3ada <menuOnEnterUSBsendHW+0x442>
    3ad8:	f1 2c       	mov	r15, r1
    3ada:	f3 e0       	ldi	r31, 0x03	; 3
    3adc:	ff 15       	cp	r31, r15
    3ade:	08 f0       	brcs	.+2      	; 0x3ae2 <menuOnEnterUSBsendHW+0x44a>
    3ae0:	9d cf       	rjmp	.-198    	; 0x3a1c <menuOnEnterUSBsendHW+0x384>
    3ae2:	e3 94       	inc	r14
    3ae4:	8f e0       	ldi	r24, 0x0F	; 15
    3ae6:	8e 15       	cp	r24, r14
    3ae8:	b8 f7       	brcc	.-18     	; 0x3ad8 <menuOnEnterUSBsendHW+0x440>
    3aea:	91 11       	cpse	r25, r1
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <menuOnEnterUSBsendHW+0x462>
    3aee:	84 eb       	ldi	r24, 0xB4	; 180
    3af0:	92 e0       	ldi	r25, 0x02	; 2
    3af2:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3af6:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3afa:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3afe:	85 ec       	ldi	r24, 0xC5	; 197
    3b00:	92 e0       	ldi	r25, 0x02	; 2
    3b02:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3b06:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3b0a:	c0 e0       	ldi	r28, 0x00	; 0
    3b0c:	25 c0       	rjmp	.+74     	; 0x3b58 <menuOnEnterUSBsendHW+0x4c0>
    3b0e:	61 ee       	ldi	r22, 0xE1	; 225
    3b10:	78 e1       	ldi	r23, 0x18	; 24
    3b12:	8c 2f       	mov	r24, r28
    3b14:	0e 94 ab 3a 	call	0x7556	; 0x7556 <putChar_Manual>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	bc 01       	movw	r22, r24
    3b1c:	6f 5f       	subi	r22, 0xFF	; 255
    3b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b20:	8a e3       	ldi	r24, 0x3A	; 58
    3b22:	8c 93       	st	X, r24
    3b24:	ec 2f       	mov	r30, r28
    3b26:	f0 e0       	ldi	r31, 0x00	; 0
    3b28:	ee 0f       	add	r30, r30
    3b2a:	ff 1f       	adc	r31, r31
    3b2c:	e8 5d       	subi	r30, 0xD8	; 216
    3b2e:	f6 4f       	sbci	r31, 0xF6	; 246
    3b30:	80 81       	ld	r24, Z
    3b32:	8f 3f       	cpi	r24, 0xFF	; 255
    3b34:	19 f0       	breq	.+6      	; 0x3b3c <menuOnEnterUSBsendHW+0x4a4>
    3b36:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_MidiChan>
    3b3a:	05 c0       	rjmp	.+10     	; 0x3b46 <menuOnEnterUSBsendHW+0x4ae>
    3b3c:	cd 01       	movw	r24, r26
    3b3e:	02 96       	adiw	r24, 0x02	; 2
    3b40:	2d e2       	ldi	r18, 0x2D	; 45
    3b42:	11 96       	adiw	r26, 0x01	; 1
    3b44:	2c 93       	st	X, r18
    3b46:	fc 01       	movw	r30, r24
    3b48:	10 82       	st	Z, r1
    3b4a:	81 ee       	ldi	r24, 0xE1	; 225
    3b4c:	98 e1       	ldi	r25, 0x18	; 24
    3b4e:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3b52:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3b56:	cf 5f       	subi	r28, 0xFF	; 255
    3b58:	c4 30       	cpi	r28, 0x04	; 4
    3b5a:	c8 f2       	brcs	.-78     	; 0x3b0e <menuOnEnterUSBsendHW+0x476>
    3b5c:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3b60:	89 eb       	ldi	r24, 0xB9	; 185
    3b62:	92 e0       	ldi	r25, 0x02	; 2
    3b64:	0e 94 26 37 	call	0x6e4c	; 0x6e4c <serial0SER_USB_sendStringP>
    3b68:	c6 e2       	ldi	r28, 0x26	; 38
    3b6a:	d8 e0       	ldi	r29, 0x08	; 8
    3b6c:	61 ee       	ldi	r22, 0xE1	; 225
    3b6e:	78 e1       	ldi	r23, 0x18	; 24
    3b70:	88 81       	ld	r24, Y
    3b72:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_MidiChan>
    3b76:	bc 01       	movw	r22, r24
    3b78:	6f 5f       	subi	r22, 0xFF	; 255
    3b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7c:	2e e3       	ldi	r18, 0x3E	; 62
    3b7e:	fc 01       	movw	r30, r24
    3b80:	20 83       	st	Z, r18
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	0e 94 0f 3a 	call	0x741e	; 0x741e <putChar_MidiChan>
    3b88:	fc 01       	movw	r30, r24
    3b8a:	10 82       	st	Z, r1
    3b8c:	81 ee       	ldi	r24, 0xE1	; 225
    3b8e:	98 e1       	ldi	r25, 0x18	; 24
    3b90:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <serial0SER_USB_sendString>
    3b94:	0e 94 38 37 	call	0x6e70	; 0x6e70 <serial0SER_USB_sendCRLF>
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	df 91       	pop	r29
    3b9c:	cf 91       	pop	r28
    3b9e:	1f 91       	pop	r17
    3ba0:	0f 91       	pop	r16
    3ba2:	ff 90       	pop	r15
    3ba4:	ef 90       	pop	r14
    3ba6:	df 90       	pop	r13
    3ba8:	cf 90       	pop	r12
    3baa:	bf 90       	pop	r11
    3bac:	af 90       	pop	r10
    3bae:	9f 90       	pop	r9
    3bb0:	08 95       	ret

00003bb2 <reverseRegisterBits>:
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	10 e0       	ldi	r17, 0x00	; 0
    3bba:	09 c0       	rjmp	.+18     	; 0x3bce <reverseRegisterBits+0x1c>
    3bbc:	c1 2f       	mov	r28, r17
    3bbe:	d0 e0       	ldi	r29, 0x00	; 0
    3bc0:	c3 59       	subi	r28, 0x93	; 147
    3bc2:	da 4f       	sbci	r29, 0xFA	; 250
    3bc4:	88 81       	ld	r24, Y
    3bc6:	0e 94 56 3c 	call	0x78ac	; 0x78ac <reverse_Bits>
    3bca:	88 83       	st	Y, r24
    3bcc:	1f 5f       	subi	r17, 0xFF	; 255
    3bce:	18 30       	cpi	r17, 0x08	; 8
    3bd0:	a8 f3       	brcs	.-22     	; 0x3bbc <reverseRegisterBits+0xa>
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	1f 91       	pop	r17
    3bd8:	08 95       	ret

00003bda <menuOnUpdateRegister>:
    3bda:	8d e6       	ldi	r24, 0x6D	; 109
    3bdc:	95 e0       	ldi	r25, 0x05	; 5
    3bde:	0e 94 fb 2e 	call	0x5df6	; 0x5df6 <read_allRegister>
    3be2:	e7 df       	rcall	.-50     	; 0x3bb2 <reverseRegisterBits>
    3be4:	80 e0       	ldi	r24, 0x00	; 0
    3be6:	08 95       	ret

00003be8 <menuOnEnterResetReg>:
    3be8:	0e 94 78 30 	call	0x60f0	; 0x60f0 <midi_resetRegisters>
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	f5 df       	rcall	.-22     	; 0x3bda <menuOnUpdateRegister>
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	08 95       	ret

00003bf4 <menuOnExitLoadProgran>:
    3bf4:	86 30       	cpi	r24, 0x06	; 6
    3bf6:	31 f0       	breq	.+12     	; 0x3c04 <menuOnExitLoadProgran+0x10>
    3bf8:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    3bfc:	80 34       	cpi	r24, 0x40	; 64
    3bfe:	10 f4       	brcc	.+4      	; 0x3c04 <menuOnExitLoadProgran+0x10>
    3c00:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <program_toRegister>
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	e9 df       	rcall	.-46     	; 0x3bda <menuOnUpdateRegister>
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	08 95       	ret

00003c0c <softkeyCoupler>:
    3c0c:	cf 93       	push	r28
    3c0e:	c6 2f       	mov	r28, r22
    3c10:	88 23       	and	r24, r24
    3c12:	d9 f0       	breq	.+54     	; 0x3c4a <softkeyCoupler+0x3e>
    3c14:	e6 2f       	mov	r30, r22
    3c16:	f0 e0       	ldi	r31, 0x00	; 0
    3c18:	df 01       	movw	r26, r30
    3c1a:	af 5e       	subi	r26, 0xEF	; 239
    3c1c:	b7 4f       	sbci	r27, 0xF7	; 247
    3c1e:	8c 91       	ld	r24, X
    3c20:	81 11       	cpse	r24, r1
    3c22:	08 c0       	rjmp	.+16     	; 0x3c34 <softkeyCoupler+0x28>
    3c24:	86 2f       	mov	r24, r22
    3c26:	0e 94 68 2d 	call	0x5ad0	; 0x5ad0 <set_Coupler>
    3c2a:	88 23       	and	r24, r24
    3c2c:	71 f0       	breq	.+28     	; 0x3c4a <softkeyCoupler+0x3e>
    3c2e:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <midi_ManualOff>
    3c32:	0b c0       	rjmp	.+22     	; 0x3c4a <softkeyCoupler+0x3e>
    3c34:	df 01       	movw	r26, r30
    3c36:	af 5e       	subi	r26, 0xEF	; 239
    3c38:	b7 4f       	sbci	r27, 0xF7	; 247
    3c3a:	1c 92       	st	X, r1
    3c3c:	ee 0f       	add	r30, r30
    3c3e:	ff 1f       	adc	r31, r31
    3c40:	e8 59       	subi	r30, 0x98	; 152
    3c42:	fd 4e       	sbci	r31, 0xED	; 237
    3c44:	84 91       	lpm	r24, Z
    3c46:	0e 94 dc 32 	call	0x65b8	; 0x65b8 <midi_ManualOff>
    3c4a:	ec 2f       	mov	r30, r28
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	ef 5e       	subi	r30, 0xEF	; 239
    3c50:	f7 4f       	sbci	r31, 0xF7	; 247
    3c52:	80 81       	ld	r24, Z
    3c54:	81 11       	cpse	r24, r1
    3c56:	02 c0       	rjmp	.+4      	; 0x3c5c <softkeyCoupler+0x50>
    3c58:	82 e8       	ldi	r24, 0x82	; 130
    3c5a:	01 c0       	rjmp	.+2      	; 0x3c5e <softkeyCoupler+0x52>
    3c5c:	81 e8       	ldi	r24, 0x81	; 129
    3c5e:	cf 91       	pop	r28
    3c60:	08 95       	ret

00003c62 <softKeyCoupler2from3>:
    3c62:	60 e0       	ldi	r22, 0x00	; 0
    3c64:	d3 cf       	rjmp	.-90     	; 0x3c0c <softkeyCoupler>
    3c66:	08 95       	ret

00003c68 <softKeyCoupler1from3>:
    3c68:	61 e0       	ldi	r22, 0x01	; 1
    3c6a:	d0 cf       	rjmp	.-96     	; 0x3c0c <softkeyCoupler>
    3c6c:	08 95       	ret

00003c6e <softKeyCouplerPfrom3>:
    3c6e:	63 e0       	ldi	r22, 0x03	; 3
    3c70:	cd cf       	rjmp	.-102    	; 0x3c0c <softkeyCoupler>
    3c72:	08 95       	ret

00003c74 <softKeyCoupler1from2>:
    3c74:	62 e0       	ldi	r22, 0x02	; 2
    3c76:	ca cf       	rjmp	.-108    	; 0x3c0c <softkeyCoupler>
    3c78:	08 95       	ret

00003c7a <softKeyCouplerPfrom2>:
    3c7a:	64 e0       	ldi	r22, 0x04	; 4
    3c7c:	c7 cf       	rjmp	.-114    	; 0x3c0c <softkeyCoupler>
    3c7e:	08 95       	ret

00003c80 <softKeyCouplerPfrom1>:
    3c80:	65 e0       	ldi	r22, 0x05	; 5
    3c82:	c4 cf       	rjmp	.-120    	; 0x3c0c <softkeyCoupler>
    3c84:	08 95       	ret

00003c86 <softKeyCoupler3from2>:
    3c86:	66 e0       	ldi	r22, 0x06	; 6
    3c88:	c1 cf       	rjmp	.-126    	; 0x3c0c <softkeyCoupler>
    3c8a:	08 95       	ret

00003c8c <softKeyCoupler3from1>:
    3c8c:	67 e0       	ldi	r22, 0x07	; 7
    3c8e:	be cf       	rjmp	.-132    	; 0x3c0c <softkeyCoupler>
    3c90:	08 95       	ret

00003c92 <softKeyCoupler3fromP>:
    3c92:	69 e0       	ldi	r22, 0x09	; 9
    3c94:	bb cf       	rjmp	.-138    	; 0x3c0c <softkeyCoupler>
    3c96:	08 95       	ret

00003c98 <softKeyCoupler2from1>:
    3c98:	68 e0       	ldi	r22, 0x08	; 8
    3c9a:	b8 cf       	rjmp	.-144    	; 0x3c0c <softkeyCoupler>
    3c9c:	08 95       	ret

00003c9e <softKeyCoupler2fromP>:
    3c9e:	6a e0       	ldi	r22, 0x0A	; 10
    3ca0:	b5 cf       	rjmp	.-150    	; 0x3c0c <softkeyCoupler>
    3ca2:	08 95       	ret

00003ca4 <softKeyCoupler1fromP>:
    3ca4:	6b e0       	ldi	r22, 0x0B	; 11
    3ca6:	b2 cf       	rjmp	.-156    	; 0x3c0c <softkeyCoupler>
    3ca8:	08 95       	ret

00003caa <send_progrChange_toMidiThru>:
    3caa:	cf 93       	push	r28
    3cac:	80 34       	cpi	r24, 0x40	; 64
    3cae:	60 f4       	brcc	.+24     	; 0x3cc8 <send_progrChange_toMidiThru+0x1e>
    3cb0:	90 91 27 08 	lds	r25, 0x0827	; 0x800827 <midiThrough+0x1>
    3cb4:	9f 3f       	cpi	r25, 0xFF	; 255
    3cb6:	41 f0       	breq	.+16     	; 0x3cc8 <send_progrChange_toMidiThru+0x1e>
    3cb8:	c8 2f       	mov	r28, r24
    3cba:	89 2f       	mov	r24, r25
    3cbc:	80 6c       	ori	r24, 0xC0	; 192
    3cbe:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <serial1MIDISend>
    3cc2:	8c 2f       	mov	r24, r28
    3cc4:	0e 94 a5 36 	call	0x6d4a	; 0x6d4a <serial1MIDISend>
    3cc8:	cf 91       	pop	r28
    3cca:	08 95       	ret

00003ccc <softKeyPrM>:
    3ccc:	88 23       	and	r24, r24
    3cce:	34 f4       	brge	.+12     	; 0x3cdc <softKeyPrM+0x10>
    3cd0:	0e 94 78 30 	call	0x60f0	; 0x60f0 <midi_resetRegisters>
    3cd4:	8f ef       	ldi	r24, 0xFF	; 255
    3cd6:	0e 94 dc 2f 	call	0x5fb8	; 0x5fb8 <prog_set>
    3cda:	13 c0       	rjmp	.+38     	; 0x3d02 <softKeyPrM+0x36>
    3cdc:	88 23       	and	r24, r24
    3cde:	89 f0       	breq	.+34     	; 0x3d02 <softKeyPrM+0x36>
    3ce0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ce6:	21 f4       	brne	.+8      	; 0x3cf0 <softKeyPrM+0x24>
    3ce8:	8f e3       	ldi	r24, 0x3F	; 63
    3cea:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3cee:	03 c0       	rjmp	.+6      	; 0x3cf6 <softKeyPrM+0x2a>
    3cf0:	81 50       	subi	r24, 0x01	; 1
    3cf2:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3cf6:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3cfa:	d7 df       	rcall	.-82     	; 0x3caa <send_progrChange_toMidiThru>
    3cfc:	8f ef       	ldi	r24, 0xFF	; 255
    3cfe:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	08 95       	ret

00003d06 <softKeyPrInc>:
    3d06:	88 23       	and	r24, r24
    3d08:	e9 f0       	breq	.+58     	; 0x3d44 <softKeyPrInc+0x3e>
    3d0a:	4c f4       	brge	.+18     	; 0x3d1e <softKeyPrInc+0x18>
    3d0c:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d10:	8f 3f       	cpi	r24, 0xFF	; 255
    3d12:	91 f0       	breq	.+36     	; 0x3d38 <softKeyPrInc+0x32>
    3d14:	88 5f       	subi	r24, 0xF8	; 248
    3d16:	8f 73       	andi	r24, 0x3F	; 63
    3d18:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d1c:	0d c0       	rjmp	.+26     	; 0x3d38 <softKeyPrInc+0x32>
    3d1e:	88 23       	and	r24, r24
    3d20:	59 f0       	breq	.+22     	; 0x3d38 <softKeyPrInc+0x32>
    3d22:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d26:	8f 33       	cpi	r24, 0x3F	; 63
    3d28:	21 f4       	brne	.+8      	; 0x3d32 <softKeyPrInc+0x2c>
    3d2a:	8f ef       	ldi	r24, 0xFF	; 255
    3d2c:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d30:	03 c0       	rjmp	.+6      	; 0x3d38 <softKeyPrInc+0x32>
    3d32:	8f 5f       	subi	r24, 0xFF	; 255
    3d34:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d38:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d3c:	b6 df       	rcall	.-148    	; 0x3caa <send_progrChange_toMidiThru>
    3d3e:	8f ef       	ldi	r24, 0xFF	; 255
    3d40:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d44:	80 e0       	ldi	r24, 0x00	; 0
    3d46:	08 95       	ret

00003d48 <softKeyPrDec>:
    3d48:	88 23       	and	r24, r24
    3d4a:	e9 f0       	breq	.+58     	; 0x3d86 <softKeyPrDec+0x3e>
    3d4c:	4c f4       	brge	.+18     	; 0x3d60 <softKeyPrDec+0x18>
    3d4e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d52:	8f 3f       	cpi	r24, 0xFF	; 255
    3d54:	91 f0       	breq	.+36     	; 0x3d7a <softKeyPrDec+0x32>
    3d56:	88 50       	subi	r24, 0x08	; 8
    3d58:	8f 73       	andi	r24, 0x3F	; 63
    3d5a:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d5e:	0d c0       	rjmp	.+26     	; 0x3d7a <softKeyPrDec+0x32>
    3d60:	88 23       	and	r24, r24
    3d62:	59 f0       	breq	.+22     	; 0x3d7a <softKeyPrDec+0x32>
    3d64:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d68:	8f 3f       	cpi	r24, 0xFF	; 255
    3d6a:	21 f4       	brne	.+8      	; 0x3d74 <softKeyPrDec+0x2c>
    3d6c:	8f e3       	ldi	r24, 0x3F	; 63
    3d6e:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d72:	03 c0       	rjmp	.+6      	; 0x3d7a <softKeyPrDec+0x32>
    3d74:	81 50       	subi	r24, 0x01	; 1
    3d76:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    3d7a:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    3d7e:	95 df       	rcall	.-214    	; 0x3caa <send_progrChange_toMidiThru>
    3d80:	8f ef       	ldi	r24, 0xFF	; 255
    3d82:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    3d86:	80 e0       	ldi	r24, 0x00	; 0
    3d88:	08 95       	ret

00003d8a <menu_Init>:
    3d8a:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    3d8e:	00 97       	sbiw	r24, 0x00	; 0
    3d90:	69 f4       	brne	.+26     	; 0x3dac <menu_Init+0x22>
    3d92:	8a e9       	ldi	r24, 0x9A	; 154
    3d94:	97 e0       	ldi	r25, 0x07	; 7
    3d96:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3d9a:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3d9e:	8f ed       	ldi	r24, 0xDF	; 223
    3da0:	93 e0       	ldi	r25, 0x03	; 3
    3da2:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    3da6:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    3daa:	08 c0       	rjmp	.+16     	; 0x3dbc <menu_Init+0x32>
    3dac:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    3db0:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    3db4:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    3db8:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    3dbc:	8f ef       	ldi	r24, 0xFF	; 255
    3dbe:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    3dc2:	89 ee       	ldi	r24, 0xE9	; 233
    3dc4:	93 e0       	ldi	r25, 0x03	; 3
    3dc6:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    3dca:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    3dce:	08 95       	ret

00003dd0 <softkeyLeft>:
    3dd0:	62 ea       	ldi	r22, 0xA2	; 162
    3dd2:	72 e1       	ldi	r23, 0x12	; 18
    3dd4:	82 e0       	ldi	r24, 0x02	; 2
    3dd6:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3dda:	08 95       	ret

00003ddc <softkeyRight>:
    3ddc:	64 ea       	ldi	r22, 0xA4	; 164
    3dde:	72 e1       	ldi	r23, 0x12	; 18
    3de0:	83 e0       	ldi	r24, 0x03	; 3
    3de2:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3de6:	08 95       	ret

00003de8 <softkeyDown>:
    3de8:	66 ea       	ldi	r22, 0xA6	; 166
    3dea:	72 e1       	ldi	r23, 0x12	; 18
    3dec:	81 e0       	ldi	r24, 0x01	; 1
    3dee:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3df2:	08 95       	ret

00003df4 <softkeyOn>:
    3df4:	64 e9       	ldi	r22, 0x94	; 148
    3df6:	72 e1       	ldi	r23, 0x12	; 18
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3dfe:	08 95       	ret

00003e00 <softkeyOff>:
    3e00:	6f e8       	ldi	r22, 0x8F	; 143
    3e02:	72 e1       	ldi	r23, 0x12	; 18
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3e0a:	08 95       	ret

00003e0c <softkeyUp>:
    3e0c:	68 ea       	ldi	r22, 0xA8	; 168
    3e0e:	72 e1       	ldi	r23, 0x12	; 18
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3e16:	08 95       	ret

00003e18 <softkeyPlus>:
    3e18:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3e1c:	8a 30       	cpi	r24, 0x0A	; 10
    3e1e:	11 f0       	breq	.+4      	; 0x3e24 <softkeyPlus+0xc>
    3e20:	8e 30       	cpi	r24, 0x0E	; 14
    3e22:	31 f4       	brne	.+12     	; 0x3e30 <softkeyPlus+0x18>
    3e24:	60 e8       	ldi	r22, 0x80	; 128
    3e26:	72 e1       	ldi	r23, 0x12	; 18
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3e2e:	08 95       	ret
    3e30:	60 ea       	ldi	r22, 0xA0	; 160
    3e32:	72 e1       	ldi	r23, 0x12	; 18
    3e34:	80 e0       	ldi	r24, 0x00	; 0
    3e36:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3e3a:	08 95       	ret

00003e3c <softkeyMinus>:
    3e3c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3e40:	8a 30       	cpi	r24, 0x0A	; 10
    3e42:	11 f0       	breq	.+4      	; 0x3e48 <softkeyMinus+0xc>
    3e44:	8e 30       	cpi	r24, 0x0E	; 14
    3e46:	31 f4       	brne	.+12     	; 0x3e54 <softkeyMinus+0x18>
    3e48:	62 e8       	ldi	r22, 0x82	; 130
    3e4a:	72 e1       	ldi	r23, 0x12	; 18
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3e52:	08 95       	ret
    3e54:	6e e9       	ldi	r22, 0x9E	; 158
    3e56:	72 e1       	ldi	r23, 0x12	; 18
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	0c 94 b1 3b 	jmp	0x7762	; 0x7762 <keylabel_set>
    3e5e:	08 95       	ret

00003e60 <dataToNibbles>:
    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    3e64:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3e68:	8e 2f       	mov	r24, r30
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	32 97       	sbiw	r30, 0x02	; 2
    3e70:	ed 30       	cpi	r30, 0x0D	; 13
    3e72:	f1 05       	cpc	r31, r1
    3e74:	08 f0       	brcs	.+2      	; 0x3e78 <dataToNibbles+0x18>
    3e76:	e4 c0       	rjmp	.+456    	; 0x4040 <dataToNibbles+0x1e0>
    3e78:	88 27       	eor	r24, r24
    3e7a:	ee 58       	subi	r30, 0x8E	; 142
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e80:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <__tablejump2__>
    3e84:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e88:	e4 ec       	ldi	r30, 0xC4	; 196
    3e8a:	f5 e0       	ldi	r31, 0x05	; 5
    3e8c:	98 2f       	mov	r25, r24
    3e8e:	92 95       	swap	r25
    3e90:	9f 70       	andi	r25, 0x0F	; 15
    3e92:	90 83       	st	Z, r25
    3e94:	8f 70       	andi	r24, 0x0F	; 15
    3e96:	81 83       	std	Z+1, r24	; 0x01
    3e98:	d3 c0       	rjmp	.+422    	; 0x4040 <dataToNibbles+0x1e0>
    3e9a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3e9e:	80 31       	cpi	r24, 0x10	; 16
    3ea0:	20 f0       	brcs	.+8      	; 0x3eaa <dataToNibbles+0x4a>
    3ea2:	8f ef       	ldi	r24, 0xFF	; 255
    3ea4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ea8:	cb c0       	rjmp	.+406    	; 0x4040 <dataToNibbles+0x1e0>
    3eaa:	8f 5f       	subi	r24, 0xFF	; 255
    3eac:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3eb0:	c7 c0       	rjmp	.+398    	; 0x4040 <dataToNibbles+0x1e0>
    3eb2:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3eb6:	88 23       	and	r24, r24
    3eb8:	34 f4       	brge	.+12     	; 0x3ec6 <dataToNibbles+0x66>
    3eba:	e4 ec       	ldi	r30, 0xC4	; 196
    3ebc:	f5 e0       	ldi	r31, 0x05	; 5
    3ebe:	10 82       	st	Z, r1
    3ec0:	8f ef       	ldi	r24, 0xFF	; 255
    3ec2:	81 83       	std	Z+1, r24	; 0x01
    3ec4:	bd c0       	rjmp	.+378    	; 0x4040 <dataToNibbles+0x1e0>
    3ec6:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    3eca:	08 c0       	rjmp	.+16     	; 0x3edc <dataToNibbles+0x7c>
    3ecc:	e4 ec       	ldi	r30, 0xC4	; 196
    3ece:	f5 e0       	ldi	r31, 0x05	; 5
    3ed0:	91 81       	ldd	r25, Z+1	; 0x01
    3ed2:	9f 5f       	subi	r25, 0xFF	; 255
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	8c 50       	subi	r24, 0x0C	; 12
    3ed8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3edc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3ee0:	8c 30       	cpi	r24, 0x0C	; 12
    3ee2:	a0 f7       	brcc	.-24     	; 0x3ecc <dataToNibbles+0x6c>
    3ee4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ee8:	ab c0       	rjmp	.+342    	; 0x4040 <dataToNibbles+0x1e0>
    3eea:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3eee:	e4 ec       	ldi	r30, 0xC4	; 196
    3ef0:	f5 e0       	ldi	r31, 0x05	; 5
    3ef2:	98 2f       	mov	r25, r24
    3ef4:	92 95       	swap	r25
    3ef6:	96 95       	lsr	r25
    3ef8:	97 70       	andi	r25, 0x07	; 7
    3efa:	90 83       	st	Z, r25
    3efc:	8f 71       	andi	r24, 0x1F	; 31
    3efe:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f02:	11 82       	std	Z+1, r1	; 0x01
    3f04:	08 c0       	rjmp	.+16     	; 0x3f16 <dataToNibbles+0xb6>
    3f06:	e4 ec       	ldi	r30, 0xC4	; 196
    3f08:	f5 e0       	ldi	r31, 0x05	; 5
    3f0a:	91 81       	ldd	r25, Z+1	; 0x01
    3f0c:	9f 5f       	subi	r25, 0xFF	; 255
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	8a 50       	subi	r24, 0x0A	; 10
    3f12:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f16:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f1a:	8a 30       	cpi	r24, 0x0A	; 10
    3f1c:	a0 f7       	brcc	.-24     	; 0x3f06 <dataToNibbles+0xa6>
    3f1e:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3f22:	8e c0       	rjmp	.+284    	; 0x4040 <dataToNibbles+0x1e0>
    3f24:	e4 ec       	ldi	r30, 0xC4	; 196
    3f26:	f5 e0       	ldi	r31, 0x05	; 5
    3f28:	10 82       	st	Z, r1
    3f2a:	11 82       	std	Z+1, r1	; 0x01
    3f2c:	08 c0       	rjmp	.+16     	; 0x3f3e <dataToNibbles+0xde>
    3f2e:	e4 ec       	ldi	r30, 0xC4	; 196
    3f30:	f5 e0       	ldi	r31, 0x05	; 5
    3f32:	90 81       	ld	r25, Z
    3f34:	9f 5f       	subi	r25, 0xFF	; 255
    3f36:	90 83       	st	Z, r25
    3f38:	84 56       	subi	r24, 0x64	; 100
    3f3a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f3e:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f42:	84 36       	cpi	r24, 0x64	; 100
    3f44:	a0 f7       	brcc	.-24     	; 0x3f2e <dataToNibbles+0xce>
    3f46:	08 c0       	rjmp	.+16     	; 0x3f58 <dataToNibbles+0xf8>
    3f48:	e4 ec       	ldi	r30, 0xC4	; 196
    3f4a:	f5 e0       	ldi	r31, 0x05	; 5
    3f4c:	91 81       	ldd	r25, Z+1	; 0x01
    3f4e:	9f 5f       	subi	r25, 0xFF	; 255
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	8a 50       	subi	r24, 0x0A	; 10
    3f54:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3f58:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f5c:	8a 30       	cpi	r24, 0x0A	; 10
    3f5e:	a0 f7       	brcc	.-24     	; 0x3f48 <dataToNibbles+0xe8>
    3f60:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3f64:	6d c0       	rjmp	.+218    	; 0x4040 <dataToNibbles+0x1e0>
    3f66:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f6a:	84 30       	cpi	r24, 0x04	; 4
    3f6c:	20 f0       	brcs	.+8      	; 0x3f76 <dataToNibbles+0x116>
    3f6e:	8f ef       	ldi	r24, 0xFF	; 255
    3f70:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f74:	65 c0       	rjmp	.+202    	; 0x4040 <dataToNibbles+0x1e0>
    3f76:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f7a:	62 c0       	rjmp	.+196    	; 0x4040 <dataToNibbles+0x1e0>
    3f7c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f80:	84 30       	cpi	r24, 0x04	; 4
    3f82:	20 f0       	brcs	.+8      	; 0x3f8c <dataToNibbles+0x12c>
    3f84:	83 e0       	ldi	r24, 0x03	; 3
    3f86:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f8a:	5a c0       	rjmp	.+180    	; 0x4040 <dataToNibbles+0x1e0>
    3f8c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f90:	57 c0       	rjmp	.+174    	; 0x4040 <dataToNibbles+0x1e0>
    3f92:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3f96:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f9a:	52 c0       	rjmp	.+164    	; 0x4040 <dataToNibbles+0x1e0>
    3f9c:	e9 2f       	mov	r30, r25
    3f9e:	f0 e0       	ldi	r31, 0x00	; 0
    3fa0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3fa4:	28 2f       	mov	r18, r24
    3fa6:	22 1f       	adc	r18, r18
    3fa8:	22 27       	eor	r18, r18
    3faa:	22 1f       	adc	r18, r18
    3fac:	ec 53       	subi	r30, 0x3C	; 60
    3fae:	fa 4f       	sbci	r31, 0xFA	; 250
    3fb0:	20 83       	st	Z, r18
    3fb2:	88 0f       	add	r24, r24
    3fb4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3fb8:	9f 5f       	subi	r25, 0xFF	; 255
    3fba:	01 c0       	rjmp	.+2      	; 0x3fbe <dataToNibbles+0x15e>
    3fbc:	90 e0       	ldi	r25, 0x00	; 0
    3fbe:	98 30       	cpi	r25, 0x08	; 8
    3fc0:	68 f3       	brcs	.-38     	; 0x3f9c <dataToNibbles+0x13c>
    3fc2:	3e c0       	rjmp	.+124    	; 0x4040 <dataToNibbles+0x1e0>
    3fc4:	82 50       	subi	r24, 0x02	; 2
    3fc6:	f0 e0       	ldi	r31, 0x00	; 0
    3fc8:	de 01       	movw	r26, r28
    3fca:	9d 91       	ld	r25, X+
    3fcc:	ec 53       	subi	r30, 0x3C	; 60
    3fce:	fa 4f       	sbci	r31, 0xFA	; 250
    3fd0:	9f 70       	andi	r25, 0x0F	; 15
    3fd2:	90 83       	st	Z, r25
    3fd4:	e8 2f       	mov	r30, r24
    3fd6:	f0 e0       	ldi	r31, 0x00	; 0
    3fd8:	98 81       	ld	r25, Y
    3fda:	ec 53       	subi	r30, 0x3C	; 60
    3fdc:	fa 4f       	sbci	r31, 0xFA	; 250
    3fde:	92 95       	swap	r25
    3fe0:	9f 70       	andi	r25, 0x0F	; 15
    3fe2:	90 83       	st	Z, r25
    3fe4:	ed 01       	movw	r28, r26
    3fe6:	03 c0       	rjmp	.+6      	; 0x3fee <dataToNibbles+0x18e>
    3fe8:	c2 ea       	ldi	r28, 0xA2	; 162
    3fea:	d5 e0       	ldi	r29, 0x05	; 5
    3fec:	88 e0       	ldi	r24, 0x08	; 8
    3fee:	ef ef       	ldi	r30, 0xFF	; 255
    3ff0:	e8 0f       	add	r30, r24
    3ff2:	81 11       	cpse	r24, r1
    3ff4:	e7 cf       	rjmp	.-50     	; 0x3fc4 <dataToNibbles+0x164>
    3ff6:	24 c0       	rjmp	.+72     	; 0x4040 <dataToNibbles+0x1e0>
    3ff8:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3ffc:	e4 ec       	ldi	r30, 0xC4	; 196
    3ffe:	f5 e0       	ldi	r31, 0x05	; 5
    4000:	98 2f       	mov	r25, r24
    4002:	97 70       	andi	r25, 0x07	; 7
    4004:	9f 5f       	subi	r25, 0xFF	; 255
    4006:	90 83       	st	Z, r25
    4008:	86 95       	lsr	r24
    400a:	86 95       	lsr	r24
    400c:	86 95       	lsr	r24
    400e:	8f 5f       	subi	r24, 0xFF	; 255
    4010:	81 83       	std	Z+1, r24	; 0x01
    4012:	16 c0       	rjmp	.+44     	; 0x4040 <dataToNibbles+0x1e0>
    4014:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4018:	8f 5f       	subi	r24, 0xFF	; 255
    401a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    401e:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    4022:	08 c0       	rjmp	.+16     	; 0x4034 <dataToNibbles+0x1d4>
    4024:	e4 ec       	ldi	r30, 0xC4	; 196
    4026:	f5 e0       	ldi	r31, 0x05	; 5
    4028:	90 81       	ld	r25, Z
    402a:	9f 5f       	subi	r25, 0xFF	; 255
    402c:	90 83       	st	Z, r25
    402e:	8a 50       	subi	r24, 0x0A	; 10
    4030:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4034:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4038:	8a 30       	cpi	r24, 0x0A	; 10
    403a:	a0 f7       	brcc	.-24     	; 0x4024 <dataToNibbles+0x1c4>
    403c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    4040:	df 91       	pop	r29
    4042:	cf 91       	pop	r28
    4044:	08 95       	ret

00004046 <nibbleToLCDstring>:
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4052:	8e 2f       	mov	r24, r30
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	fc 01       	movw	r30, r24
    4058:	32 97       	sbiw	r30, 0x02	; 2
    405a:	ed 30       	cpi	r30, 0x0D	; 13
    405c:	f1 05       	cpc	r31, r1
    405e:	08 f0       	brcs	.+2      	; 0x4062 <nibbleToLCDstring+0x1c>
    4060:	3b c1       	rjmp	.+630    	; 0x42d8 <nibbleToLCDstring+0x292>
    4062:	88 27       	eor	r24, r24
    4064:	e1 58       	subi	r30, 0x81	; 129
    4066:	ff 4f       	sbci	r31, 0xFF	; 255
    4068:	8f 4f       	sbci	r24, 0xFF	; 255
    406a:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <__tablejump2__>
    406e:	04 ec       	ldi	r16, 0xC4	; 196
    4070:	15 e0       	ldi	r17, 0x05	; 5
    4072:	f8 01       	movw	r30, r16
    4074:	80 81       	ld	r24, Z
    4076:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    407a:	c5 e2       	ldi	r28, 0x25	; 37
    407c:	d2 e0       	ldi	r29, 0x02	; 2
    407e:	88 83       	st	Y, r24
    4080:	f8 01       	movw	r30, r16
    4082:	81 81       	ldd	r24, Z+1	; 0x01
    4084:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    4088:	89 83       	std	Y+1, r24	; 0x01
    408a:	1a 82       	std	Y+2, r1	; 0x02
    408c:	25 c1       	rjmp	.+586    	; 0x42d8 <nibbleToLCDstring+0x292>
    408e:	e5 e2       	ldi	r30, 0x25	; 37
    4090:	f2 e0       	ldi	r31, 0x02	; 2
    4092:	83 e4       	ldi	r24, 0x43	; 67
    4094:	80 83       	st	Z, r24
    4096:	88 e6       	ldi	r24, 0x68	; 104
    4098:	81 83       	std	Z+1, r24	; 0x01
    409a:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    409e:	8f 3f       	cpi	r24, 0xFF	; 255
    40a0:	29 f4       	brne	.+10     	; 0x40ac <nibbleToLCDstring+0x66>
    40a2:	80 e2       	ldi	r24, 0x20	; 32
    40a4:	82 83       	std	Z+2, r24	; 0x02
    40a6:	8d e2       	ldi	r24, 0x2D	; 45
    40a8:	83 83       	std	Z+3, r24	; 0x03
    40aa:	12 c0       	rjmp	.+36     	; 0x40d0 <nibbleToLCDstring+0x8a>
    40ac:	8a 30       	cpi	r24, 0x0A	; 10
    40ae:	48 f0       	brcs	.+18     	; 0x40c2 <nibbleToLCDstring+0x7c>
    40b0:	c5 e2       	ldi	r28, 0x25	; 37
    40b2:	d2 e0       	ldi	r29, 0x02	; 2
    40b4:	91 e3       	ldi	r25, 0x31	; 49
    40b6:	9a 83       	std	Y+2, r25	; 0x02
    40b8:	8a 50       	subi	r24, 0x0A	; 10
    40ba:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    40be:	8b 83       	std	Y+3, r24	; 0x03
    40c0:	07 c0       	rjmp	.+14     	; 0x40d0 <nibbleToLCDstring+0x8a>
    40c2:	c5 e2       	ldi	r28, 0x25	; 37
    40c4:	d2 e0       	ldi	r29, 0x02	; 2
    40c6:	90 e2       	ldi	r25, 0x20	; 32
    40c8:	9a 83       	std	Y+2, r25	; 0x02
    40ca:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    40ce:	8b 83       	std	Y+3, r24	; 0x03
    40d0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    40d4:	01 c1       	rjmp	.+514    	; 0x42d8 <nibbleToLCDstring+0x292>
    40d6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    40da:	8f 3f       	cpi	r24, 0xFF	; 255
    40dc:	21 f0       	breq	.+8      	; 0x40e6 <nibbleToLCDstring+0xa0>
    40de:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    40e2:	9f 3f       	cpi	r25, 0xFF	; 255
    40e4:	59 f4       	brne	.+22     	; 0x40fc <nibbleToLCDstring+0xb6>
    40e6:	e5 e2       	ldi	r30, 0x25	; 37
    40e8:	f2 e0       	ldi	r31, 0x02	; 2
    40ea:	8e e6       	ldi	r24, 0x6E	; 110
    40ec:	80 83       	st	Z, r24
    40ee:	9f e6       	ldi	r25, 0x6F	; 111
    40f0:	91 83       	std	Z+1, r25	; 0x01
    40f2:	82 83       	std	Z+2, r24	; 0x02
    40f4:	85 e6       	ldi	r24, 0x65	; 101
    40f6:	83 83       	std	Z+3, r24	; 0x03
    40f8:	14 82       	std	Z+4, r1	; 0x04
    40fa:	ee c0       	rjmp	.+476    	; 0x42d8 <nibbleToLCDstring+0x292>
    40fc:	9f e5       	ldi	r25, 0x5F	; 95
    40fe:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    4102:	8b 30       	cpi	r24, 0x0B	; 11
    4104:	21 f4       	brne	.+8      	; 0x410e <nibbleToLCDstring+0xc8>
    4106:	88 e4       	ldi	r24, 0x48	; 72
    4108:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    410c:	20 c0       	rjmp	.+64     	; 0x414e <nibbleToLCDstring+0x108>
    410e:	85 30       	cpi	r24, 0x05	; 5
    4110:	58 f4       	brcc	.+22     	; 0x4128 <nibbleToLCDstring+0xe2>
    4112:	98 2f       	mov	r25, r24
    4114:	96 95       	lsr	r25
    4116:	9d 5b       	subi	r25, 0xBD	; 189
    4118:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    411c:	80 ff       	sbrs	r24, 0
    411e:	17 c0       	rjmp	.+46     	; 0x414e <nibbleToLCDstring+0x108>
    4120:	83 e2       	ldi	r24, 0x23	; 35
    4122:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    4126:	13 c0       	rjmp	.+38     	; 0x414e <nibbleToLCDstring+0x108>
    4128:	28 2f       	mov	r18, r24
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	25 50       	subi	r18, 0x05	; 5
    412e:	31 09       	sbc	r19, r1
    4130:	35 95       	asr	r19
    4132:	27 95       	ror	r18
    4134:	2a 5b       	subi	r18, 0xBA	; 186
    4136:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    413a:	80 fd       	sbrc	r24, 0
    413c:	03 c0       	rjmp	.+6      	; 0x4144 <nibbleToLCDstring+0xfe>
    413e:	83 e2       	ldi	r24, 0x23	; 35
    4140:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    4144:	28 34       	cpi	r18, 0x48	; 72
    4146:	19 f4       	brne	.+6      	; 0x414e <nibbleToLCDstring+0x108>
    4148:	81 e4       	ldi	r24, 0x41	; 65
    414a:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    414e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4152:	81 11       	cpse	r24, r1
    4154:	04 c0       	rjmp	.+8      	; 0x415e <nibbleToLCDstring+0x118>
    4156:	8d e6       	ldi	r24, 0x6D	; 109
    4158:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    415c:	0b c0       	rjmp	.+22     	; 0x4174 <nibbleToLCDstring+0x12e>
    415e:	8c 30       	cpi	r24, 0x0C	; 12
    4160:	30 f4       	brcc	.+12     	; 0x416e <nibbleToLCDstring+0x128>
    4162:	81 50       	subi	r24, 0x01	; 1
    4164:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    4168:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    416c:	03 c0       	rjmp	.+6      	; 0x4174 <nibbleToLCDstring+0x12e>
    416e:	8d e2       	ldi	r24, 0x2D	; 45
    4170:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    4174:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    4178:	af c0       	rjmp	.+350    	; 0x42d8 <nibbleToLCDstring+0x292>
    417a:	c5 e2       	ldi	r28, 0x25	; 37
    417c:	d2 e0       	ldi	r29, 0x02	; 2
    417e:	8d e4       	ldi	r24, 0x4D	; 77
    4180:	88 83       	st	Y, r24
    4182:	04 ec       	ldi	r16, 0xC4	; 196
    4184:	15 e0       	ldi	r17, 0x05	; 5
    4186:	f8 01       	movw	r30, r16
    4188:	80 81       	ld	r24, Z
    418a:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    418e:	89 83       	std	Y+1, r24	; 0x01
    4190:	82 e4       	ldi	r24, 0x42	; 66
    4192:	8a 83       	std	Y+2, r24	; 0x02
    4194:	f8 01       	movw	r30, r16
    4196:	81 81       	ldd	r24, Z+1	; 0x01
    4198:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    419c:	8b 83       	std	Y+3, r24	; 0x03
    419e:	f8 01       	movw	r30, r16
    41a0:	82 81       	ldd	r24, Z+2	; 0x02
    41a2:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    41a6:	8c 83       	std	Y+4, r24	; 0x04
    41a8:	1d 82       	std	Y+5, r1	; 0x05
    41aa:	96 c0       	rjmp	.+300    	; 0x42d8 <nibbleToLCDstring+0x292>
    41ac:	04 ec       	ldi	r16, 0xC4	; 196
    41ae:	15 e0       	ldi	r17, 0x05	; 5
    41b0:	f8 01       	movw	r30, r16
    41b2:	80 81       	ld	r24, Z
    41b4:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    41b8:	c5 e2       	ldi	r28, 0x25	; 37
    41ba:	d2 e0       	ldi	r29, 0x02	; 2
    41bc:	88 83       	st	Y, r24
    41be:	f8 01       	movw	r30, r16
    41c0:	81 81       	ldd	r24, Z+1	; 0x01
    41c2:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    41c6:	89 83       	std	Y+1, r24	; 0x01
    41c8:	f8 01       	movw	r30, r16
    41ca:	82 81       	ldd	r24, Z+2	; 0x02
    41cc:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    41d0:	8a 83       	std	Y+2, r24	; 0x02
    41d2:	1b 82       	std	Y+3, r1	; 0x03
    41d4:	81 c0       	rjmp	.+258    	; 0x42d8 <nibbleToLCDstring+0x292>
    41d6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    41da:	83 30       	cpi	r24, 0x03	; 3
    41dc:	38 f4       	brcc	.+14     	; 0x41ec <nibbleToLCDstring+0x1a6>
    41de:	e5 e2       	ldi	r30, 0x25	; 37
    41e0:	f2 e0       	ldi	r31, 0x02	; 2
    41e2:	93 e3       	ldi	r25, 0x33	; 51
    41e4:	98 1b       	sub	r25, r24
    41e6:	90 83       	st	Z, r25
    41e8:	11 82       	std	Z+1, r1	; 0x01
    41ea:	76 c0       	rjmp	.+236    	; 0x42d8 <nibbleToLCDstring+0x292>
    41ec:	83 30       	cpi	r24, 0x03	; 3
    41ee:	31 f4       	brne	.+12     	; 0x41fc <nibbleToLCDstring+0x1b6>
    41f0:	e5 e2       	ldi	r30, 0x25	; 37
    41f2:	f2 e0       	ldi	r31, 0x02	; 2
    41f4:	80 e5       	ldi	r24, 0x50	; 80
    41f6:	80 83       	st	Z, r24
    41f8:	11 82       	std	Z+1, r1	; 0x01
    41fa:	6e c0       	rjmp	.+220    	; 0x42d8 <nibbleToLCDstring+0x292>
    41fc:	e5 e2       	ldi	r30, 0x25	; 37
    41fe:	f2 e0       	ldi	r31, 0x02	; 2
    4200:	8d e2       	ldi	r24, 0x2D	; 45
    4202:	80 83       	st	Z, r24
    4204:	11 82       	std	Z+1, r1	; 0x01
    4206:	68 c0       	rjmp	.+208    	; 0x42d8 <nibbleToLCDstring+0x292>
    4208:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    420c:	e5 e2       	ldi	r30, 0x25	; 37
    420e:	f2 e0       	ldi	r31, 0x02	; 2
    4210:	80 5d       	subi	r24, 0xD0	; 208
    4212:	80 83       	st	Z, r24
    4214:	11 82       	std	Z+1, r1	; 0x01
    4216:	60 c0       	rjmp	.+192    	; 0x42d8 <nibbleToLCDstring+0x292>
    4218:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    421c:	81 11       	cpse	r24, r1
    421e:	09 c0       	rjmp	.+18     	; 0x4232 <nibbleToLCDstring+0x1ec>
    4220:	e5 e2       	ldi	r30, 0x25	; 37
    4222:	f2 e0       	ldi	r31, 0x02	; 2
    4224:	81 e4       	ldi	r24, 0x41	; 65
    4226:	80 83       	st	Z, r24
    4228:	85 e7       	ldi	r24, 0x75	; 117
    422a:	81 83       	std	Z+1, r24	; 0x01
    422c:	83 e7       	ldi	r24, 0x73	; 115
    422e:	82 83       	std	Z+2, r24	; 0x02
    4230:	08 c0       	rjmp	.+16     	; 0x4242 <nibbleToLCDstring+0x1fc>
    4232:	e5 e2       	ldi	r30, 0x25	; 37
    4234:	f2 e0       	ldi	r31, 0x02	; 2
    4236:	85 e4       	ldi	r24, 0x45	; 69
    4238:	80 83       	st	Z, r24
    423a:	89 e6       	ldi	r24, 0x69	; 105
    423c:	81 83       	std	Z+1, r24	; 0x01
    423e:	8e e6       	ldi	r24, 0x6E	; 110
    4240:	82 83       	std	Z+2, r24	; 0x02
    4242:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    4246:	48 c0       	rjmp	.+144    	; 0x42d8 <nibbleToLCDstring+0x292>
    4248:	c1 2f       	mov	r28, r17
    424a:	d0 e0       	ldi	r29, 0x00	; 0
    424c:	fe 01       	movw	r30, r28
    424e:	ec 53       	subi	r30, 0x3C	; 60
    4250:	fa 4f       	sbci	r31, 0xFA	; 250
    4252:	80 81       	ld	r24, Z
    4254:	0e 94 27 39 	call	0x724e	; 0x724e <nibbleToChr>
    4258:	cb 5d       	subi	r28, 0xDB	; 219
    425a:	dd 4f       	sbci	r29, 0xFD	; 253
    425c:	88 83       	st	Y, r24
    425e:	1f 5f       	subi	r17, 0xFF	; 255
    4260:	01 c0       	rjmp	.+2      	; 0x4264 <nibbleToLCDstring+0x21e>
    4262:	10 e0       	ldi	r17, 0x00	; 0
    4264:	18 30       	cpi	r17, 0x08	; 8
    4266:	80 f3       	brcs	.-32     	; 0x4248 <nibbleToLCDstring+0x202>
    4268:	37 c0       	rjmp	.+110    	; 0x42d8 <nibbleToLCDstring+0x292>
    426a:	82 2f       	mov	r24, r18
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	fc 01       	movw	r30, r24
    4270:	ec 53       	subi	r30, 0x3C	; 60
    4272:	fa 4f       	sbci	r31, 0xFA	; 250
    4274:	30 81       	ld	r19, Z
    4276:	31 11       	cpse	r19, r1
    4278:	02 c0       	rjmp	.+4      	; 0x427e <nibbleToLCDstring+0x238>
    427a:	3f e6       	ldi	r19, 0x6F	; 111
    427c:	01 c0       	rjmp	.+2      	; 0x4280 <nibbleToLCDstring+0x23a>
    427e:	39 e4       	ldi	r19, 0x49	; 73
    4280:	fc 01       	movw	r30, r24
    4282:	eb 5d       	subi	r30, 0xDB	; 219
    4284:	fd 4f       	sbci	r31, 0xFD	; 253
    4286:	30 83       	st	Z, r19
    4288:	2f 5f       	subi	r18, 0xFF	; 255
    428a:	01 c0       	rjmp	.+2      	; 0x428e <nibbleToLCDstring+0x248>
    428c:	20 e0       	ldi	r18, 0x00	; 0
    428e:	28 30       	cpi	r18, 0x08	; 8
    4290:	60 f3       	brcs	.-40     	; 0x426a <nibbleToLCDstring+0x224>
    4292:	22 c0       	rjmp	.+68     	; 0x42d8 <nibbleToLCDstring+0x292>
    4294:	a4 ec       	ldi	r26, 0xC4	; 196
    4296:	b5 e0       	ldi	r27, 0x05	; 5
    4298:	8c 91       	ld	r24, X
    429a:	e5 e2       	ldi	r30, 0x25	; 37
    429c:	f2 e0       	ldi	r31, 0x02	; 2
    429e:	80 5d       	subi	r24, 0xD0	; 208
    42a0:	80 83       	st	Z, r24
    42a2:	11 96       	adiw	r26, 0x01	; 1
    42a4:	8c 91       	ld	r24, X
    42a6:	80 5c       	subi	r24, 0xC0	; 192
    42a8:	81 83       	std	Z+1, r24	; 0x01
    42aa:	12 82       	std	Z+2, r1	; 0x02
    42ac:	15 c0       	rjmp	.+42     	; 0x42d8 <nibbleToLCDstring+0x292>
    42ae:	e4 ec       	ldi	r30, 0xC4	; 196
    42b0:	f5 e0       	ldi	r31, 0x05	; 5
    42b2:	90 81       	ld	r25, Z
    42b4:	81 81       	ldd	r24, Z+1	; 0x01
    42b6:	29 2f       	mov	r18, r25
    42b8:	28 2b       	or	r18, r24
    42ba:	31 f4       	brne	.+12     	; 0x42c8 <nibbleToLCDstring+0x282>
    42bc:	e5 e2       	ldi	r30, 0x25	; 37
    42be:	f2 e0       	ldi	r31, 0x02	; 2
    42c0:	8d e2       	ldi	r24, 0x2D	; 45
    42c2:	80 83       	st	Z, r24
    42c4:	81 83       	std	Z+1, r24	; 0x01
    42c6:	06 c0       	rjmp	.+12     	; 0x42d4 <nibbleToLCDstring+0x28e>
    42c8:	e5 e2       	ldi	r30, 0x25	; 37
    42ca:	f2 e0       	ldi	r31, 0x02	; 2
    42cc:	90 5d       	subi	r25, 0xD0	; 208
    42ce:	90 83       	st	Z, r25
    42d0:	80 5d       	subi	r24, 0xD0	; 208
    42d2:	81 83       	std	Z+1, r24	; 0x01
    42d4:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	08 95       	ret

000042e2 <LCDStringOut>:
    42e2:	0f 93       	push	r16
    42e4:	1f 93       	push	r17
    42e6:	cf 93       	push	r28
    42e8:	8e e1       	ldi	r24, 0x1E	; 30
    42ea:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    42ee:	c0 e0       	ldi	r28, 0x00	; 0
    42f0:	05 e2       	ldi	r16, 0x25	; 37
    42f2:	12 e0       	ldi	r17, 0x02	; 2
    42f4:	0b c0       	rjmp	.+22     	; 0x430c <LCDStringOut+0x2a>
    42f6:	f8 01       	movw	r30, r16
    42f8:	80 81       	ld	r24, Z
    42fa:	88 23       	and	r24, r24
    42fc:	19 f0       	breq	.+6      	; 0x4304 <LCDStringOut+0x22>
    42fe:	0f 5f       	subi	r16, 0xFF	; 255
    4300:	1f 4f       	sbci	r17, 0xFF	; 255
    4302:	01 c0       	rjmp	.+2      	; 0x4306 <LCDStringOut+0x24>
    4304:	80 e2       	ldi	r24, 0x20	; 32
    4306:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    430a:	cf 5f       	subi	r28, 0xFF	; 255
    430c:	ca 30       	cpi	r28, 0x0A	; 10
    430e:	98 f3       	brcs	.-26     	; 0x42f6 <LCDStringOut+0x14>
    4310:	cf 91       	pop	r28
    4312:	1f 91       	pop	r17
    4314:	0f 91       	pop	r16
    4316:	08 95       	ret

00004318 <nibbleCheckOvfl>:
    4318:	8a 30       	cpi	r24, 0x0A	; 10
    431a:	1c f4       	brge	.+6      	; 0x4322 <nibbleCheckOvfl+0xa>
    431c:	88 23       	and	r24, r24
    431e:	1c f0       	brlt	.+6      	; 0x4326 <nibbleCheckOvfl+0xe>
    4320:	08 95       	ret
    4322:	80 e0       	ldi	r24, 0x00	; 0
    4324:	08 95       	ret
    4326:	89 e0       	ldi	r24, 0x09	; 9
    4328:	08 95       	ret

0000432a <nibbleChange>:
    432a:	0f 93       	push	r16
    432c:	1f 93       	push	r17
    432e:	cf 93       	push	r28
    4330:	df 93       	push	r29
    4332:	c8 2f       	mov	r28, r24
    4334:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4338:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    433c:	31 96       	adiw	r30, 0x01	; 1
    433e:	84 91       	lpm	r24, Z
    4340:	28 2f       	mov	r18, r24
    4342:	20 71       	andi	r18, 0x10	; 16
    4344:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    4348:	8e 2f       	mov	r24, r30
    434a:	90 e0       	ldi	r25, 0x00	; 0
    434c:	fc 01       	movw	r30, r24
    434e:	32 97       	sbiw	r30, 0x02	; 2
    4350:	ed 30       	cpi	r30, 0x0D	; 13
    4352:	f1 05       	cpc	r31, r1
    4354:	08 f0       	brcs	.+2      	; 0x4358 <nibbleChange+0x2e>
    4356:	93 c1       	rjmp	.+806    	; 0x467e <nibbleChange+0x354>
    4358:	88 27       	eor	r24, r24
    435a:	e4 57       	subi	r30, 0x74	; 116
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	8f 4f       	sbci	r24, 0xFF	; 255
    4360:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <__tablejump2__>
    4364:	d0 e0       	ldi	r29, 0x00	; 0
    4366:	cc 53       	subi	r28, 0x3C	; 60
    4368:	da 4f       	sbci	r29, 0xFA	; 250
    436a:	88 81       	ld	r24, Y
    436c:	68 0f       	add	r22, r24
    436e:	6f 70       	andi	r22, 0x0F	; 15
    4370:	68 83       	st	Y, r22
    4372:	85 c1       	rjmp	.+778    	; 0x467e <nibbleChange+0x354>
    4374:	21 11       	cpse	r18, r1
    4376:	1b c0       	rjmp	.+54     	; 0x43ae <nibbleChange+0x84>
    4378:	61 30       	cpi	r22, 0x01	; 1
    437a:	41 f4       	brne	.+16     	; 0x438c <nibbleChange+0x62>
    437c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4380:	80 31       	cpi	r24, 0x10	; 16
    4382:	20 f0       	brcs	.+8      	; 0x438c <nibbleChange+0x62>
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    438a:	79 c1       	rjmp	.+754    	; 0x467e <nibbleChange+0x354>
    438c:	6f 3f       	cpi	r22, 0xFF	; 255
    438e:	49 f4       	brne	.+18     	; 0x43a2 <nibbleChange+0x78>
    4390:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4394:	82 50       	subi	r24, 0x02	; 2
    4396:	8f 30       	cpi	r24, 0x0F	; 15
    4398:	20 f0       	brcs	.+8      	; 0x43a2 <nibbleChange+0x78>
    439a:	80 e1       	ldi	r24, 0x10	; 16
    439c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    43a0:	6e c1       	rjmp	.+732    	; 0x467e <nibbleChange+0x354>
    43a2:	e4 ec       	ldi	r30, 0xC4	; 196
    43a4:	f5 e0       	ldi	r31, 0x05	; 5
    43a6:	80 81       	ld	r24, Z
    43a8:	68 0f       	add	r22, r24
    43aa:	60 83       	st	Z, r22
    43ac:	68 c1       	rjmp	.+720    	; 0x467e <nibbleChange+0x354>
    43ae:	61 30       	cpi	r22, 0x01	; 1
    43b0:	41 f4       	brne	.+16     	; 0x43c2 <nibbleChange+0x98>
    43b2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43b6:	80 31       	cpi	r24, 0x10	; 16
    43b8:	21 f4       	brne	.+8      	; 0x43c2 <nibbleChange+0x98>
    43ba:	8f ef       	ldi	r24, 0xFF	; 255
    43bc:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    43c0:	5e c1       	rjmp	.+700    	; 0x467e <nibbleChange+0x354>
    43c2:	61 30       	cpi	r22, 0x01	; 1
    43c4:	41 f4       	brne	.+16     	; 0x43d6 <nibbleChange+0xac>
    43c6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43ca:	8f 3f       	cpi	r24, 0xFF	; 255
    43cc:	21 f4       	brne	.+8      	; 0x43d6 <nibbleChange+0xac>
    43ce:	81 e0       	ldi	r24, 0x01	; 1
    43d0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    43d4:	54 c1       	rjmp	.+680    	; 0x467e <nibbleChange+0x354>
    43d6:	6f 3f       	cpi	r22, 0xFF	; 255
    43d8:	41 f4       	brne	.+16     	; 0x43ea <nibbleChange+0xc0>
    43da:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43de:	8f 3f       	cpi	r24, 0xFF	; 255
    43e0:	21 f4       	brne	.+8      	; 0x43ea <nibbleChange+0xc0>
    43e2:	80 e1       	ldi	r24, 0x10	; 16
    43e4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    43e8:	4a c1       	rjmp	.+660    	; 0x467e <nibbleChange+0x354>
    43ea:	6f 3f       	cpi	r22, 0xFF	; 255
    43ec:	41 f4       	brne	.+16     	; 0x43fe <nibbleChange+0xd4>
    43ee:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43f2:	81 30       	cpi	r24, 0x01	; 1
    43f4:	21 f4       	brne	.+8      	; 0x43fe <nibbleChange+0xd4>
    43f6:	8f ef       	ldi	r24, 0xFF	; 255
    43f8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    43fc:	40 c1       	rjmp	.+640    	; 0x467e <nibbleChange+0x354>
    43fe:	e4 ec       	ldi	r30, 0xC4	; 196
    4400:	f5 e0       	ldi	r31, 0x05	; 5
    4402:	80 81       	ld	r24, Z
    4404:	68 0f       	add	r22, r24
    4406:	60 83       	st	Z, r22
    4408:	3a c1       	rjmp	.+628    	; 0x467e <nibbleChange+0x354>
    440a:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    440e:	8f 3f       	cpi	r24, 0xFF	; 255
    4410:	09 f4       	brne	.+2      	; 0x4414 <nibbleChange+0xea>
    4412:	c1 e0       	ldi	r28, 0x01	; 1
    4414:	c1 11       	cpse	r28, r1
    4416:	16 c0       	rjmp	.+44     	; 0x4444 <nibbleChange+0x11a>
    4418:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    441c:	8c 30       	cpi	r24, 0x0C	; 12
    441e:	50 f4       	brcc	.+20     	; 0x4434 <nibbleChange+0x10a>
    4420:	8b 30       	cpi	r24, 0x0B	; 11
    4422:	11 f4       	brne	.+4      	; 0x4428 <nibbleChange+0xfe>
    4424:	61 30       	cpi	r22, 0x01	; 1
    4426:	41 f0       	breq	.+16     	; 0x4438 <nibbleChange+0x10e>
    4428:	81 11       	cpse	r24, r1
    442a:	02 c0       	rjmp	.+4      	; 0x4430 <nibbleChange+0x106>
    442c:	6f 3f       	cpi	r22, 0xFF	; 255
    442e:	31 f0       	breq	.+12     	; 0x443c <nibbleChange+0x112>
    4430:	68 0f       	add	r22, r24
    4432:	05 c0       	rjmp	.+10     	; 0x443e <nibbleChange+0x114>
    4434:	60 e0       	ldi	r22, 0x00	; 0
    4436:	03 c0       	rjmp	.+6      	; 0x443e <nibbleChange+0x114>
    4438:	60 e0       	ldi	r22, 0x00	; 0
    443a:	01 c0       	rjmp	.+2      	; 0x443e <nibbleChange+0x114>
    443c:	6b e0       	ldi	r22, 0x0B	; 11
    443e:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    4442:	2b c0       	rjmp	.+86     	; 0x449a <nibbleChange+0x170>
    4444:	21 11       	cpse	r18, r1
    4446:	0a c0       	rjmp	.+20     	; 0x445c <nibbleChange+0x132>
    4448:	81 11       	cpse	r24, r1
    444a:	02 c0       	rjmp	.+4      	; 0x4450 <nibbleChange+0x126>
    444c:	6f 3f       	cpi	r22, 0xFF	; 255
    444e:	c1 f0       	breq	.+48     	; 0x4480 <nibbleChange+0x156>
    4450:	8a 30       	cpi	r24, 0x0A	; 10
    4452:	11 f4       	brne	.+4      	; 0x4458 <nibbleChange+0x12e>
    4454:	61 30       	cpi	r22, 0x01	; 1
    4456:	b1 f0       	breq	.+44     	; 0x4484 <nibbleChange+0x15a>
    4458:	68 0f       	add	r22, r24
    445a:	1d c0       	rjmp	.+58     	; 0x4496 <nibbleChange+0x16c>
    445c:	81 11       	cpse	r24, r1
    445e:	02 c0       	rjmp	.+4      	; 0x4464 <nibbleChange+0x13a>
    4460:	6f 3f       	cpi	r22, 0xFF	; 255
    4462:	91 f0       	breq	.+36     	; 0x4488 <nibbleChange+0x15e>
    4464:	8a 30       	cpi	r24, 0x0A	; 10
    4466:	11 f4       	brne	.+4      	; 0x446c <nibbleChange+0x142>
    4468:	61 30       	cpi	r22, 0x01	; 1
    446a:	81 f0       	breq	.+32     	; 0x448c <nibbleChange+0x162>
    446c:	8f 3f       	cpi	r24, 0xFF	; 255
    446e:	11 f4       	brne	.+4      	; 0x4474 <nibbleChange+0x14a>
    4470:	61 30       	cpi	r22, 0x01	; 1
    4472:	71 f0       	breq	.+28     	; 0x4490 <nibbleChange+0x166>
    4474:	8f 3f       	cpi	r24, 0xFF	; 255
    4476:	11 f4       	brne	.+4      	; 0x447c <nibbleChange+0x152>
    4478:	6f 3f       	cpi	r22, 0xFF	; 255
    447a:	61 f0       	breq	.+24     	; 0x4494 <nibbleChange+0x16a>
    447c:	68 0f       	add	r22, r24
    447e:	0b c0       	rjmp	.+22     	; 0x4496 <nibbleChange+0x16c>
    4480:	6a e0       	ldi	r22, 0x0A	; 10
    4482:	09 c0       	rjmp	.+18     	; 0x4496 <nibbleChange+0x16c>
    4484:	60 e0       	ldi	r22, 0x00	; 0
    4486:	07 c0       	rjmp	.+14     	; 0x4496 <nibbleChange+0x16c>
    4488:	6f ef       	ldi	r22, 0xFF	; 255
    448a:	05 c0       	rjmp	.+10     	; 0x4496 <nibbleChange+0x16c>
    448c:	6f ef       	ldi	r22, 0xFF	; 255
    448e:	03 c0       	rjmp	.+6      	; 0x4496 <nibbleChange+0x16c>
    4490:	60 e0       	ldi	r22, 0x00	; 0
    4492:	01 c0       	rjmp	.+2      	; 0x4496 <nibbleChange+0x16c>
    4494:	6a e0       	ldi	r22, 0x0A	; 10
    4496:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    449a:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    449e:	9f 3f       	cpi	r25, 0xFF	; 255
    44a0:	09 f4       	brne	.+2      	; 0x44a4 <nibbleChange+0x17a>
    44a2:	ed c0       	rjmp	.+474    	; 0x467e <nibbleChange+0x354>
    44a4:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    44a8:	8f 3f       	cpi	r24, 0xFF	; 255
    44aa:	09 f4       	brne	.+2      	; 0x44ae <nibbleChange+0x184>
    44ac:	e8 c0       	rjmp	.+464    	; 0x467e <nibbleChange+0x354>
    44ae:	28 2f       	mov	r18, r24
    44b0:	22 0f       	add	r18, r18
    44b2:	82 0f       	add	r24, r18
    44b4:	28 2f       	mov	r18, r24
    44b6:	22 0f       	add	r18, r18
    44b8:	22 0f       	add	r18, r18
    44ba:	92 0f       	add	r25, r18
    44bc:	0a f0       	brmi	.+2      	; 0x44c0 <nibbleChange+0x196>
    44be:	df c0       	rjmp	.+446    	; 0x467e <nibbleChange+0x354>
    44c0:	e4 ec       	ldi	r30, 0xC4	; 196
    44c2:	f5 e0       	ldi	r31, 0x05	; 5
    44c4:	87 e0       	ldi	r24, 0x07	; 7
    44c6:	80 83       	st	Z, r24
    44c8:	8a e0       	ldi	r24, 0x0A	; 10
    44ca:	81 83       	std	Z+1, r24	; 0x01
    44cc:	d8 c0       	rjmp	.+432    	; 0x467e <nibbleChange+0x354>
    44ce:	c1 11       	cpse	r28, r1
    44d0:	07 c0       	rjmp	.+14     	; 0x44e0 <nibbleChange+0x1b6>
    44d2:	e4 ec       	ldi	r30, 0xC4	; 196
    44d4:	f5 e0       	ldi	r31, 0x05	; 5
    44d6:	80 81       	ld	r24, Z
    44d8:	68 0f       	add	r22, r24
    44da:	67 70       	andi	r22, 0x07	; 7
    44dc:	60 83       	st	Z, r22
    44de:	cf c0       	rjmp	.+414    	; 0x467e <nibbleChange+0x354>
    44e0:	d0 e0       	ldi	r29, 0x00	; 0
    44e2:	04 ec       	ldi	r16, 0xC4	; 196
    44e4:	15 e0       	ldi	r17, 0x05	; 5
    44e6:	cc 53       	subi	r28, 0x3C	; 60
    44e8:	da 4f       	sbci	r29, 0xFA	; 250
    44ea:	88 81       	ld	r24, Y
    44ec:	86 0f       	add	r24, r22
    44ee:	14 df       	rcall	.-472    	; 0x4318 <nibbleCheckOvfl>
    44f0:	88 83       	st	Y, r24
    44f2:	f8 01       	movw	r30, r16
    44f4:	81 81       	ldd	r24, Z+1	; 0x01
    44f6:	92 81       	ldd	r25, Z+2	; 0x02
    44f8:	88 0f       	add	r24, r24
    44fa:	28 2f       	mov	r18, r24
    44fc:	22 0f       	add	r18, r18
    44fe:	22 0f       	add	r18, r18
    4500:	82 0f       	add	r24, r18
    4502:	89 0f       	add	r24, r25
    4504:	80 32       	cpi	r24, 0x20	; 32
    4506:	2c f0       	brlt	.+10     	; 0x4512 <nibbleChange+0x1e8>
    4508:	83 e0       	ldi	r24, 0x03	; 3
    450a:	81 83       	std	Z+1, r24	; 0x01
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	82 83       	std	Z+2, r24	; 0x02
    4510:	b6 c0       	rjmp	.+364    	; 0x467e <nibbleChange+0x354>
    4512:	88 23       	and	r24, r24
    4514:	0c f0       	brlt	.+2      	; 0x4518 <nibbleChange+0x1ee>
    4516:	b3 c0       	rjmp	.+358    	; 0x467e <nibbleChange+0x354>
    4518:	e4 ec       	ldi	r30, 0xC4	; 196
    451a:	f5 e0       	ldi	r31, 0x05	; 5
    451c:	11 82       	std	Z+1, r1	; 0x01
    451e:	12 82       	std	Z+2, r1	; 0x02
    4520:	ae c0       	rjmp	.+348    	; 0x467e <nibbleChange+0x354>
    4522:	d0 e0       	ldi	r29, 0x00	; 0
    4524:	04 ec       	ldi	r16, 0xC4	; 196
    4526:	15 e0       	ldi	r17, 0x05	; 5
    4528:	cc 53       	subi	r28, 0x3C	; 60
    452a:	da 4f       	sbci	r29, 0xFA	; 250
    452c:	88 81       	ld	r24, Y
    452e:	86 0f       	add	r24, r22
    4530:	f3 de       	rcall	.-538    	; 0x4318 <nibbleCheckOvfl>
    4532:	88 83       	st	Y, r24
    4534:	f8 01       	movw	r30, r16
    4536:	20 81       	ld	r18, Z
    4538:	81 81       	ldd	r24, Z+1	; 0x01
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	ac 01       	movw	r20, r24
    453e:	44 0f       	add	r20, r20
    4540:	55 1f       	adc	r21, r21
    4542:	88 0f       	add	r24, r24
    4544:	99 1f       	adc	r25, r25
    4546:	88 0f       	add	r24, r24
    4548:	99 1f       	adc	r25, r25
    454a:	88 0f       	add	r24, r24
    454c:	99 1f       	adc	r25, r25
    454e:	84 0f       	add	r24, r20
    4550:	95 1f       	adc	r25, r21
    4552:	f4 e6       	ldi	r31, 0x64	; 100
    4554:	2f 9f       	mul	r18, r31
    4556:	80 0d       	add	r24, r0
    4558:	91 1d       	adc	r25, r1
    455a:	11 24       	eor	r1, r1
    455c:	f8 01       	movw	r30, r16
    455e:	22 81       	ldd	r18, Z+2	; 0x02
    4560:	82 0f       	add	r24, r18
    4562:	91 1d       	adc	r25, r1
    4564:	8f 3f       	cpi	r24, 0xFF	; 255
    4566:	91 05       	cpc	r25, r1
    4568:	09 f0       	breq	.+2      	; 0x456c <nibbleChange+0x242>
    456a:	0c f4       	brge	.+2      	; 0x456e <nibbleChange+0x244>
    456c:	88 c0       	rjmp	.+272    	; 0x467e <nibbleChange+0x354>
    456e:	82 e0       	ldi	r24, 0x02	; 2
    4570:	80 83       	st	Z, r24
    4572:	85 e0       	ldi	r24, 0x05	; 5
    4574:	81 83       	std	Z+1, r24	; 0x01
    4576:	82 83       	std	Z+2, r24	; 0x02
    4578:	82 c0       	rjmp	.+260    	; 0x467e <nibbleChange+0x354>
    457a:	22 23       	and	r18, r18
    457c:	a1 f0       	breq	.+40     	; 0x45a6 <nibbleChange+0x27c>
    457e:	d0 e0       	ldi	r29, 0x00	; 0
    4580:	fe 01       	movw	r30, r28
    4582:	ec 53       	subi	r30, 0x3C	; 60
    4584:	fa 4f       	sbci	r31, 0xFA	; 250
    4586:	80 81       	ld	r24, Z
    4588:	68 0f       	add	r22, r24
    458a:	60 83       	st	Z, r22
    458c:	64 30       	cpi	r22, 0x04	; 4
    458e:	19 f4       	brne	.+6      	; 0x4596 <nibbleChange+0x26c>
    4590:	8f ef       	ldi	r24, 0xFF	; 255
    4592:	80 83       	st	Z, r24
    4594:	74 c0       	rjmp	.+232    	; 0x467e <nibbleChange+0x354>
    4596:	6e 3f       	cpi	r22, 0xFE	; 254
    4598:	09 f0       	breq	.+2      	; 0x459c <nibbleChange+0x272>
    459a:	71 c0       	rjmp	.+226    	; 0x467e <nibbleChange+0x354>
    459c:	cc 53       	subi	r28, 0x3C	; 60
    459e:	da 4f       	sbci	r29, 0xFA	; 250
    45a0:	83 e0       	ldi	r24, 0x03	; 3
    45a2:	88 83       	st	Y, r24
    45a4:	6c c0       	rjmp	.+216    	; 0x467e <nibbleChange+0x354>
    45a6:	d0 e0       	ldi	r29, 0x00	; 0
    45a8:	fe 01       	movw	r30, r28
    45aa:	ec 53       	subi	r30, 0x3C	; 60
    45ac:	fa 4f       	sbci	r31, 0xFA	; 250
    45ae:	80 81       	ld	r24, Z
    45b0:	81 11       	cpse	r24, r1
    45b2:	05 c0       	rjmp	.+10     	; 0x45be <nibbleChange+0x294>
    45b4:	6f 3f       	cpi	r22, 0xFF	; 255
    45b6:	19 f4       	brne	.+6      	; 0x45be <nibbleChange+0x294>
    45b8:	83 e0       	ldi	r24, 0x03	; 3
    45ba:	80 83       	st	Z, r24
    45bc:	60 c0       	rjmp	.+192    	; 0x467e <nibbleChange+0x354>
    45be:	83 30       	cpi	r24, 0x03	; 3
    45c0:	31 f4       	brne	.+12     	; 0x45ce <nibbleChange+0x2a4>
    45c2:	61 30       	cpi	r22, 0x01	; 1
    45c4:	21 f4       	brne	.+8      	; 0x45ce <nibbleChange+0x2a4>
    45c6:	cc 53       	subi	r28, 0x3C	; 60
    45c8:	da 4f       	sbci	r29, 0xFA	; 250
    45ca:	18 82       	st	Y, r1
    45cc:	58 c0       	rjmp	.+176    	; 0x467e <nibbleChange+0x354>
    45ce:	cc 53       	subi	r28, 0x3C	; 60
    45d0:	da 4f       	sbci	r29, 0xFA	; 250
    45d2:	68 0f       	add	r22, r24
    45d4:	68 83       	st	Y, r22
    45d6:	53 c0       	rjmp	.+166    	; 0x467e <nibbleChange+0x354>
    45d8:	d0 e0       	ldi	r29, 0x00	; 0
    45da:	cc 53       	subi	r28, 0x3C	; 60
    45dc:	da 4f       	sbci	r29, 0xFA	; 250
    45de:	88 81       	ld	r24, Y
    45e0:	68 0f       	add	r22, r24
    45e2:	63 70       	andi	r22, 0x03	; 3
    45e4:	68 83       	st	Y, r22
    45e6:	4b c0       	rjmp	.+150    	; 0x467e <nibbleChange+0x354>
    45e8:	e4 ec       	ldi	r30, 0xC4	; 196
    45ea:	f5 e0       	ldi	r31, 0x05	; 5
    45ec:	80 81       	ld	r24, Z
    45ee:	80 95       	com	r24
    45f0:	80 83       	st	Z, r24
    45f2:	45 c0       	rjmp	.+138    	; 0x467e <nibbleChange+0x354>
    45f4:	d0 e0       	ldi	r29, 0x00	; 0
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	61 fd       	sbrc	r22, 1
    45fa:	80 e0       	ldi	r24, 0x00	; 0
    45fc:	cc 53       	subi	r28, 0x3C	; 60
    45fe:	da 4f       	sbci	r29, 0xFA	; 250
    4600:	88 83       	st	Y, r24
    4602:	3d c0       	rjmp	.+122    	; 0x467e <nibbleChange+0x354>
    4604:	61 30       	cpi	r22, 0x01	; 1
    4606:	41 f4       	brne	.+16     	; 0x4618 <nibbleChange+0x2ee>
    4608:	d0 e0       	ldi	r29, 0x00	; 0
    460a:	cc 53       	subi	r28, 0x3C	; 60
    460c:	da 4f       	sbci	r29, 0xFA	; 250
    460e:	88 81       	ld	r24, Y
    4610:	87 70       	andi	r24, 0x07	; 7
    4612:	8f 5f       	subi	r24, 0xFF	; 255
    4614:	88 83       	st	Y, r24
    4616:	33 c0       	rjmp	.+102    	; 0x467e <nibbleChange+0x354>
    4618:	ec 2f       	mov	r30, r28
    461a:	f0 e0       	ldi	r31, 0x00	; 0
    461c:	ec 53       	subi	r30, 0x3C	; 60
    461e:	fa 4f       	sbci	r31, 0xFA	; 250
    4620:	80 81       	ld	r24, Z
    4622:	82 50       	subi	r24, 0x02	; 2
    4624:	87 70       	andi	r24, 0x07	; 7
    4626:	8f 5f       	subi	r24, 0xFF	; 255
    4628:	80 83       	st	Z, r24
    462a:	29 c0       	rjmp	.+82     	; 0x467e <nibbleChange+0x354>
    462c:	e4 ec       	ldi	r30, 0xC4	; 196
    462e:	f5 e0       	ldi	r31, 0x05	; 5
    4630:	90 81       	ld	r25, Z
    4632:	81 81       	ldd	r24, Z+1	; 0x01
    4634:	99 0f       	add	r25, r25
    4636:	29 2f       	mov	r18, r25
    4638:	22 0f       	add	r18, r18
    463a:	22 0f       	add	r18, r18
    463c:	92 0f       	add	r25, r18
    463e:	89 0f       	add	r24, r25
    4640:	c1 11       	cpse	r28, r1
    4642:	07 c0       	rjmp	.+14     	; 0x4652 <nibbleChange+0x328>
    4644:	66 0f       	add	r22, r22
    4646:	96 2f       	mov	r25, r22
    4648:	99 0f       	add	r25, r25
    464a:	99 0f       	add	r25, r25
    464c:	69 0f       	add	r22, r25
    464e:	68 0f       	add	r22, r24
    4650:	01 c0       	rjmp	.+2      	; 0x4654 <nibbleChange+0x32a>
    4652:	68 0f       	add	r22, r24
    4654:	66 23       	and	r22, r22
    4656:	1c f0       	brlt	.+6      	; 0x465e <nibbleChange+0x334>
    4658:	61 34       	cpi	r22, 0x41	; 65
    465a:	1c f4       	brge	.+6      	; 0x4662 <nibbleChange+0x338>
    465c:	03 c0       	rjmp	.+6      	; 0x4664 <nibbleChange+0x33a>
    465e:	60 e0       	ldi	r22, 0x00	; 0
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <nibbleChange+0x33a>
    4662:	60 e0       	ldi	r22, 0x00	; 0
    4664:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    4668:	06 c0       	rjmp	.+12     	; 0x4676 <nibbleChange+0x34c>
    466a:	e4 ec       	ldi	r30, 0xC4	; 196
    466c:	f5 e0       	ldi	r31, 0x05	; 5
    466e:	80 81       	ld	r24, Z
    4670:	8f 5f       	subi	r24, 0xFF	; 255
    4672:	80 83       	st	Z, r24
    4674:	6a 50       	subi	r22, 0x0A	; 10
    4676:	6a 30       	cpi	r22, 0x0A	; 10
    4678:	c4 f7       	brge	.-16     	; 0x466a <nibbleChange+0x340>
    467a:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    467e:	df 91       	pop	r29
    4680:	cf 91       	pop	r28
    4682:	1f 91       	pop	r17
    4684:	0f 91       	pop	r16
    4686:	08 95       	ret

00004688 <nibbleToData>:
    4688:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    468c:	8e 2f       	mov	r24, r30
    468e:	90 e0       	ldi	r25, 0x00	; 0
    4690:	fc 01       	movw	r30, r24
    4692:	32 97       	sbiw	r30, 0x02	; 2
    4694:	ed 30       	cpi	r30, 0x0D	; 13
    4696:	f1 05       	cpc	r31, r1
    4698:	08 f0       	brcs	.+2      	; 0x469c <nibbleToData+0x14>
    469a:	da c0       	rjmp	.+436    	; 0x4850 <nibbleToData+0x1c8>
    469c:	88 27       	eor	r24, r24
    469e:	e7 56       	subi	r30, 0x67	; 103
    46a0:	ff 4f       	sbci	r31, 0xFF	; 255
    46a2:	8f 4f       	sbci	r24, 0xFF	; 255
    46a4:	0c 94 63 3c 	jmp	0x78c6	; 0x78c6 <__tablejump2__>
    46a8:	e4 ec       	ldi	r30, 0xC4	; 196
    46aa:	f5 e0       	ldi	r31, 0x05	; 5
    46ac:	80 81       	ld	r24, Z
    46ae:	20 e1       	ldi	r18, 0x10	; 16
    46b0:	82 9f       	mul	r24, r18
    46b2:	c0 01       	movw	r24, r0
    46b4:	11 24       	eor	r1, r1
    46b6:	91 81       	ldd	r25, Z+1	; 0x01
    46b8:	9f 70       	andi	r25, 0x0F	; 15
    46ba:	89 2b       	or	r24, r25
    46bc:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    46c0:	08 95       	ret
    46c2:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    46c6:	8f ef       	ldi	r24, 0xFF	; 255
    46c8:	89 0f       	add	r24, r25
    46ca:	80 31       	cpi	r24, 0x10	; 16
    46cc:	18 f0       	brcs	.+6      	; 0x46d4 <nibbleToData+0x4c>
    46ce:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    46d2:	08 95       	ret
    46d4:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    46d8:	08 95       	ret
    46da:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    46de:	9f 3f       	cpi	r25, 0xFF	; 255
    46e0:	21 f0       	breq	.+8      	; 0x46ea <nibbleToData+0x62>
    46e2:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    46e6:	8f 3f       	cpi	r24, 0xFF	; 255
    46e8:	21 f4       	brne	.+8      	; 0x46f2 <nibbleToData+0x6a>
    46ea:	8f ef       	ldi	r24, 0xFF	; 255
    46ec:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    46f0:	08 95       	ret
    46f2:	28 2f       	mov	r18, r24
    46f4:	22 0f       	add	r18, r18
    46f6:	82 0f       	add	r24, r18
    46f8:	88 0f       	add	r24, r24
    46fa:	88 0f       	add	r24, r24
    46fc:	89 0f       	add	r24, r25
    46fe:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4702:	08 95       	ret
    4704:	e4 ec       	ldi	r30, 0xC4	; 196
    4706:	f5 e0       	ldi	r31, 0x05	; 5
    4708:	80 81       	ld	r24, Z
    470a:	30 e2       	ldi	r19, 0x20	; 32
    470c:	83 9f       	mul	r24, r19
    470e:	c0 01       	movw	r24, r0
    4710:	11 24       	eor	r1, r1
    4712:	21 81       	ldd	r18, Z+1	; 0x01
    4714:	32 81       	ldd	r19, Z+2	; 0x02
    4716:	22 0f       	add	r18, r18
    4718:	42 2f       	mov	r20, r18
    471a:	44 0f       	add	r20, r20
    471c:	44 0f       	add	r20, r20
    471e:	24 0f       	add	r18, r20
    4720:	23 0f       	add	r18, r19
    4722:	20 32       	cpi	r18, 0x20	; 32
    4724:	20 f0       	brcs	.+8      	; 0x472e <nibbleToData+0xa6>
    4726:	8f 61       	ori	r24, 0x1F	; 31
    4728:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    472c:	08 95       	ret
    472e:	82 2b       	or	r24, r18
    4730:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4734:	08 95       	ret
    4736:	e4 ec       	ldi	r30, 0xC4	; 196
    4738:	f5 e0       	ldi	r31, 0x05	; 5
    473a:	20 81       	ld	r18, Z
    473c:	81 81       	ldd	r24, Z+1	; 0x01
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	ac 01       	movw	r20, r24
    4742:	44 0f       	add	r20, r20
    4744:	55 1f       	adc	r21, r21
    4746:	88 0f       	add	r24, r24
    4748:	99 1f       	adc	r25, r25
    474a:	88 0f       	add	r24, r24
    474c:	99 1f       	adc	r25, r25
    474e:	88 0f       	add	r24, r24
    4750:	99 1f       	adc	r25, r25
    4752:	84 0f       	add	r24, r20
    4754:	95 1f       	adc	r25, r21
    4756:	34 e6       	ldi	r19, 0x64	; 100
    4758:	23 9f       	mul	r18, r19
    475a:	80 0d       	add	r24, r0
    475c:	91 1d       	adc	r25, r1
    475e:	11 24       	eor	r1, r1
    4760:	22 81       	ldd	r18, Z+2	; 0x02
    4762:	82 0f       	add	r24, r18
    4764:	91 1d       	adc	r25, r1
    4766:	8f 3f       	cpi	r24, 0xFF	; 255
    4768:	91 05       	cpc	r25, r1
    476a:	29 f0       	breq	.+10     	; 0x4776 <nibbleToData+0xee>
    476c:	20 f0       	brcs	.+8      	; 0x4776 <nibbleToData+0xee>
    476e:	8f ef       	ldi	r24, 0xFF	; 255
    4770:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4774:	08 95       	ret
    4776:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    477a:	08 95       	ret
    477c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4780:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4784:	84 30       	cpi	r24, 0x04	; 4
    4786:	08 f4       	brcc	.+2      	; 0x478a <nibbleToData+0x102>
    4788:	63 c0       	rjmp	.+198    	; 0x4850 <nibbleToData+0x1c8>
    478a:	8f ef       	ldi	r24, 0xFF	; 255
    478c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4790:	08 95       	ret
    4792:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4796:	83 70       	andi	r24, 0x03	; 3
    4798:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    479c:	08 95       	ret
    479e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    47a2:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    47a6:	08 95       	ret
    47a8:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	0c c0       	rjmp	.+24     	; 0x47c8 <nibbleToData+0x140>
    47b0:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    47b4:	99 0f       	add	r25, r25
    47b6:	e8 2f       	mov	r30, r24
    47b8:	f0 e0       	ldi	r31, 0x00	; 0
    47ba:	ec 53       	subi	r30, 0x3C	; 60
    47bc:	fa 4f       	sbci	r31, 0xFA	; 250
    47be:	20 81       	ld	r18, Z
    47c0:	92 0f       	add	r25, r18
    47c2:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    47c6:	8f 5f       	subi	r24, 0xFF	; 255
    47c8:	88 30       	cpi	r24, 0x08	; 8
    47ca:	90 f3       	brcs	.-28     	; 0x47b0 <nibbleToData+0x128>
    47cc:	08 95       	ret
    47ce:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    47d2:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    47d6:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    47da:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    47de:	a2 ea       	ldi	r26, 0xA2	; 162
    47e0:	b5 e0       	ldi	r27, 0x05	; 5
    47e2:	88 e0       	ldi	r24, 0x08	; 8
    47e4:	10 c0       	rjmp	.+32     	; 0x4806 <nibbleToData+0x17e>
    47e6:	82 50       	subi	r24, 0x02	; 2
    47e8:	f0 e0       	ldi	r31, 0x00	; 0
    47ea:	ec 53       	subi	r30, 0x3C	; 60
    47ec:	fa 4f       	sbci	r31, 0xFA	; 250
    47ee:	90 81       	ld	r25, Z
    47f0:	e8 2f       	mov	r30, r24
    47f2:	f0 e0       	ldi	r31, 0x00	; 0
    47f4:	ec 53       	subi	r30, 0x3C	; 60
    47f6:	fa 4f       	sbci	r31, 0xFA	; 250
    47f8:	20 81       	ld	r18, Z
    47fa:	30 e1       	ldi	r19, 0x10	; 16
    47fc:	23 9f       	mul	r18, r19
    47fe:	90 0d       	add	r25, r0
    4800:	11 24       	eor	r1, r1
    4802:	9c 93       	st	X, r25
    4804:	11 96       	adiw	r26, 0x01	; 1
    4806:	ef ef       	ldi	r30, 0xFF	; 255
    4808:	e8 0f       	add	r30, r24
    480a:	81 11       	cpse	r24, r1
    480c:	ec cf       	rjmp	.-40     	; 0x47e6 <nibbleToData+0x15e>
    480e:	08 95       	ret
    4810:	e4 ec       	ldi	r30, 0xC4	; 196
    4812:	f5 e0       	ldi	r31, 0x05	; 5
    4814:	20 81       	ld	r18, Z
    4816:	91 81       	ldd	r25, Z+1	; 0x01
    4818:	89 2f       	mov	r24, r25
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	01 97       	sbiw	r24, 0x01	; 1
    481e:	88 0f       	add	r24, r24
    4820:	99 1f       	adc	r25, r25
    4822:	88 0f       	add	r24, r24
    4824:	99 1f       	adc	r25, r25
    4826:	88 0f       	add	r24, r24
    4828:	99 1f       	adc	r25, r25
    482a:	9f ef       	ldi	r25, 0xFF	; 255
    482c:	92 0f       	add	r25, r18
    482e:	89 2b       	or	r24, r25
    4830:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4834:	08 95       	ret
    4836:	e4 ec       	ldi	r30, 0xC4	; 196
    4838:	f5 e0       	ldi	r31, 0x05	; 5
    483a:	80 81       	ld	r24, Z
    483c:	91 81       	ldd	r25, Z+1	; 0x01
    483e:	88 0f       	add	r24, r24
    4840:	28 2f       	mov	r18, r24
    4842:	22 0f       	add	r18, r18
    4844:	22 0f       	add	r18, r18
    4846:	82 0f       	add	r24, r18
    4848:	89 0f       	add	r24, r25
    484a:	81 50       	subi	r24, 0x01	; 1
    484c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4850:	08 95       	ret

00004852 <menuTextOut>:
    4852:	0f 93       	push	r16
    4854:	1f 93       	push	r17
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	8c 01       	movw	r16, r24
    485c:	d6 2f       	mov	r29, r22
    485e:	c0 e0       	ldi	r28, 0x00	; 0
    4860:	0c c0       	rjmp	.+24     	; 0x487a <menuTextOut+0x28>
    4862:	f8 01       	movw	r30, r16
    4864:	84 91       	lpm	r24, Z
    4866:	88 23       	and	r24, r24
    4868:	19 f0       	breq	.+6      	; 0x4870 <menuTextOut+0x1e>
    486a:	0f 5f       	subi	r16, 0xFF	; 255
    486c:	1f 4f       	sbci	r17, 0xFF	; 255
    486e:	02 c0       	rjmp	.+4      	; 0x4874 <menuTextOut+0x22>
    4870:	8d 2f       	mov	r24, r29
    4872:	d0 e2       	ldi	r29, 0x20	; 32
    4874:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    4878:	cf 5f       	subi	r28, 0xFF	; 255
    487a:	ca 30       	cpi	r28, 0x0A	; 10
    487c:	90 f3       	brcs	.-28     	; 0x4862 <menuTextOut+0x10>
    487e:	df 91       	pop	r29
    4880:	cf 91       	pop	r28
    4882:	1f 91       	pop	r17
    4884:	0f 91       	pop	r16
    4886:	08 95       	ret

00004888 <menuParentMenuToLCD>:
    4888:	80 e4       	ldi	r24, 0x40	; 64
    488a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    488e:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4892:	e1 11       	cpse	r30, r1
    4894:	07 c0       	rjmp	.+14     	; 0x48a4 <menuParentMenuToLCD+0x1c>
    4896:	6a e3       	ldi	r22, 0x3A	; 58
    4898:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    489c:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    48a0:	d8 cf       	rjmp	.-80     	; 0x4852 <menuTextOut>
    48a2:	08 95       	ret
    48a4:	f0 e0       	ldi	r31, 0x00	; 0
    48a6:	31 97       	sbiw	r30, 0x01	; 1
    48a8:	ee 0f       	add	r30, r30
    48aa:	ff 1f       	adc	r31, r31
    48ac:	e5 58       	subi	r30, 0x85	; 133
    48ae:	fa 4f       	sbci	r31, 0xFA	; 250
    48b0:	80 81       	ld	r24, Z
    48b2:	91 81       	ldd	r25, Z+1	; 0x01
    48b4:	6a e3       	ldi	r22, 0x3A	; 58
    48b6:	02 96       	adiw	r24, 0x02	; 2
    48b8:	cc cf       	rjmp	.-104    	; 0x4852 <menuTextOut>
    48ba:	08 95       	ret

000048bc <menuDisplayValue>:
    48bc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    48c0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    48c4:	84 91       	lpm	r24, Z
    48c6:	8f 73       	andi	r24, 0x3F	; 63
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	02 97       	sbiw	r24, 0x02	; 2
    48cc:	1c f0       	brlt	.+6      	; 0x48d4 <menuDisplayValue+0x18>
    48ce:	c8 da       	rcall	.-2672   	; 0x3e60 <dataToNibbles>
    48d0:	ba db       	rcall	.-2188   	; 0x4046 <nibbleToLCDstring>
    48d2:	07 cd       	rjmp	.-1522   	; 0x42e2 <LCDStringOut>
    48d4:	08 95       	ret

000048d6 <menuCursorSetDataNibble>:
    48d6:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    48da:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    48de:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    48e2:	e8 0f       	add	r30, r24
    48e4:	f1 1d       	adc	r31, r1
    48e6:	31 96       	adiw	r30, 0x01	; 1
    48e8:	84 91       	lpm	r24, Z
    48ea:	82 5e       	subi	r24, 0xE2	; 226
    48ec:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    48f0:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    48f4:	30 e0       	ldi	r19, 0x00	; 0
    48f6:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    48fa:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    48fe:	84 91       	lpm	r24, Z
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	28 17       	cp	r18, r24
    4906:	39 07       	cpc	r19, r25
    4908:	14 f4       	brge	.+4      	; 0x490e <menuCursorSetDataNibble+0x38>
    490a:	68 da       	rcall	.-2864   	; 0x3ddc <softkeyRight>
    490c:	03 c0       	rjmp	.+6      	; 0x4914 <menuCursorSetDataNibble+0x3e>
    490e:	83 e0       	ldi	r24, 0x03	; 3
    4910:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4914:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4918:	88 23       	and	r24, r24
    491a:	11 f0       	breq	.+4      	; 0x4920 <menuCursorSetDataNibble+0x4a>
    491c:	59 da       	rcall	.-2894   	; 0x3dd0 <softkeyLeft>
    491e:	03 c0       	rjmp	.+6      	; 0x4926 <menuCursorSetDataNibble+0x50>
    4920:	82 e0       	ldi	r24, 0x02	; 2
    4922:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4926:	78 da       	rcall	.-2832   	; 0x3e18 <softkeyPlus>
    4928:	89 da       	rcall	.-2798   	; 0x3e3c <softkeyMinus>
    492a:	0c 94 00 3c 	jmp	0x7800	; 0x7800 <keylabel_toLCD>
    492e:	08 95       	ret

00004930 <menuCursorSetExtra>:
    4930:	84 e1       	ldi	r24, 0x14	; 20
    4932:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <lcd_goto>
    4936:	08 95       	ret

00004938 <menuOnEnterStatusMidiIn>:
    4938:	0f 93       	push	r16
    493a:	1f 93       	push	r17
    493c:	cf 93       	push	r28
    493e:	f8 df       	rcall	.-16     	; 0x4930 <menuCursorSetExtra>
    4940:	8b ed       	ldi	r24, 0xDB	; 219
    4942:	93 e0       	ldi	r25, 0x03	; 3
    4944:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    4948:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    494c:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4950:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <lcd_wordout>
    4954:	8d e2       	ldi	r24, 0x2D	; 45
    4956:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    495a:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    495e:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    4962:	04 97       	sbiw	r24, 0x04	; 4
    4964:	30 f4       	brcc	.+12     	; 0x4972 <menuOnEnterStatusMidiIn+0x3a>
    4966:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    496a:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    496e:	c8 2f       	mov	r28, r24
    4970:	01 c0       	rjmp	.+2      	; 0x4974 <menuOnEnterStatusMidiIn+0x3c>
    4972:	c4 e0       	ldi	r28, 0x04	; 4
    4974:	00 91 44 16 	lds	r16, 0x1644	; 0x801644 <midiRxInIndex>
    4978:	10 e0       	ldi	r17, 0x00	; 0
    497a:	00 5c       	subi	r16, 0xC0	; 192
    497c:	1b 4e       	sbci	r17, 0xEB	; 235
    497e:	13 c0       	rjmp	.+38     	; 0x49a6 <menuOnEnterStatusMidiIn+0x6e>
    4980:	84 e1       	ldi	r24, 0x14	; 20
    4982:	01 34       	cpi	r16, 0x41	; 65
    4984:	18 07       	cpc	r17, r24
    4986:	10 f0       	brcs	.+4      	; 0x498c <menuOnEnterStatusMidiIn+0x54>
    4988:	f8 01       	movw	r30, r16
    498a:	02 c0       	rjmp	.+4      	; 0x4990 <menuOnEnterStatusMidiIn+0x58>
    498c:	e0 e4       	ldi	r30, 0x40	; 64
    498e:	f5 e1       	ldi	r31, 0x15	; 21
    4990:	8f 01       	movw	r16, r30
    4992:	01 50       	subi	r16, 0x01	; 1
    4994:	11 09       	sbc	r17, r1
    4996:	80 81       	ld	r24, Z
    4998:	0e 94 5e 39 	call	0x72bc	; 0x72bc <lcd_hexout>
    499c:	c1 50       	subi	r28, 0x01	; 1
    499e:	19 f0       	breq	.+6      	; 0x49a6 <menuOnEnterStatusMidiIn+0x6e>
    49a0:	80 e2       	ldi	r24, 0x20	; 32
    49a2:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    49a6:	c1 11       	cpse	r28, r1
    49a8:	eb cf       	rjmp	.-42     	; 0x4980 <menuOnEnterStatusMidiIn+0x48>
    49aa:	80 e0       	ldi	r24, 0x00	; 0
    49ac:	cf 91       	pop	r28
    49ae:	1f 91       	pop	r17
    49b0:	0f 91       	pop	r16
    49b2:	08 95       	ret

000049b4 <menuOnEnterStatusMidiOut>:
    49b4:	0f 93       	push	r16
    49b6:	1f 93       	push	r17
    49b8:	cf 93       	push	r28
    49ba:	ba df       	rcall	.-140    	; 0x4930 <menuCursorSetExtra>
    49bc:	86 ed       	ldi	r24, 0xD6	; 214
    49be:	93 e0       	ldi	r25, 0x03	; 3
    49c0:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    49c4:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    49c8:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    49cc:	0e 94 e9 3a 	call	0x75d2	; 0x75d2 <lcd_wordout>
    49d0:	8d e2       	ldi	r24, 0x2D	; 45
    49d2:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    49d6:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    49da:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    49de:	04 97       	sbiw	r24, 0x04	; 4
    49e0:	30 f4       	brcc	.+12     	; 0x49ee <menuOnEnterStatusMidiOut+0x3a>
    49e2:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    49e6:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    49ea:	c8 2f       	mov	r28, r24
    49ec:	01 c0       	rjmp	.+2      	; 0x49f0 <menuOnEnterStatusMidiOut+0x3c>
    49ee:	c4 e0       	ldi	r28, 0x04	; 4
    49f0:	00 91 ef 13 	lds	r16, 0x13EF	; 0x8013ef <midiTxInIndex>
    49f4:	10 e0       	ldi	r17, 0x00	; 0
    49f6:	0f 5b       	subi	r16, 0xBF	; 191
    49f8:	1a 4e       	sbci	r17, 0xEA	; 234
    49fa:	13 c0       	rjmp	.+38     	; 0x4a22 <menuOnEnterStatusMidiOut+0x6e>
    49fc:	85 e1       	ldi	r24, 0x15	; 21
    49fe:	02 34       	cpi	r16, 0x42	; 66
    4a00:	18 07       	cpc	r17, r24
    4a02:	10 f0       	brcs	.+4      	; 0x4a08 <menuOnEnterStatusMidiOut+0x54>
    4a04:	f8 01       	movw	r30, r16
    4a06:	02 c0       	rjmp	.+4      	; 0x4a0c <menuOnEnterStatusMidiOut+0x58>
    4a08:	e1 e4       	ldi	r30, 0x41	; 65
    4a0a:	f6 e1       	ldi	r31, 0x16	; 22
    4a0c:	8f 01       	movw	r16, r30
    4a0e:	01 50       	subi	r16, 0x01	; 1
    4a10:	11 09       	sbc	r17, r1
    4a12:	80 81       	ld	r24, Z
    4a14:	0e 94 5e 39 	call	0x72bc	; 0x72bc <lcd_hexout>
    4a18:	c1 50       	subi	r28, 0x01	; 1
    4a1a:	19 f0       	breq	.+6      	; 0x4a22 <menuOnEnterStatusMidiOut+0x6e>
    4a1c:	80 e2       	ldi	r24, 0x20	; 32
    4a1e:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    4a22:	c1 11       	cpse	r28, r1
    4a24:	eb cf       	rjmp	.-42     	; 0x49fc <menuOnEnterStatusMidiOut+0x48>
    4a26:	80 e0       	ldi	r24, 0x00	; 0
    4a28:	cf 91       	pop	r28
    4a2a:	1f 91       	pop	r17
    4a2c:	0f 91       	pop	r16
    4a2e:	08 95       	ret

00004a30 <menuOnEnterLogDisp>:
    4a30:	0f 93       	push	r16
    4a32:	1f 93       	push	r17
    4a34:	cf 93       	push	r28
    4a36:	8f 3f       	cpi	r24, 0xFF	; 255
    4a38:	a9 f4       	brne	.+42     	; 0x4a64 <menuOnEnterLogDisp+0x34>
    4a3a:	0e 94 86 13 	call	0x270c	; 0x270c <log_count>
    4a3e:	81 50       	subi	r24, 0x01	; 1
    4a40:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3040>
    4a44:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.3041>
    4a48:	6a e8       	ldi	r22, 0x8A	; 138
    4a4a:	72 e1       	ldi	r23, 0x12	; 18
    4a4c:	80 e0       	ldi	r24, 0x00	; 0
    4a4e:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    4a52:	64 e8       	ldi	r22, 0x84	; 132
    4a54:	72 e1       	ldi	r23, 0x12	; 18
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    4a5c:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
    4a60:	cf ef       	ldi	r28, 0xFF	; 255
    4a62:	2f c0       	rjmp	.+94     	; 0x4ac2 <menuOnEnterLogDisp+0x92>
    4a64:	84 30       	cpi	r24, 0x04	; 4
    4a66:	49 f4       	brne	.+18     	; 0x4a7a <menuOnEnterLogDisp+0x4a>
    4a68:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3040>
    4a6c:	88 23       	and	r24, r24
    4a6e:	21 f1       	breq	.+72     	; 0x4ab8 <menuOnEnterLogDisp+0x88>
    4a70:	81 50       	subi	r24, 0x01	; 1
    4a72:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3040>
    4a76:	cf ef       	ldi	r28, 0xFF	; 255
    4a78:	24 c0       	rjmp	.+72     	; 0x4ac2 <menuOnEnterLogDisp+0x92>
    4a7a:	81 30       	cpi	r24, 0x01	; 1
    4a7c:	91 f4       	brne	.+36     	; 0x4aa2 <menuOnEnterLogDisp+0x72>
    4a7e:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3040>
    4a82:	10 e0       	ldi	r17, 0x00	; 0
    4a84:	0f 5f       	subi	r16, 0xFF	; 255
    4a86:	1f 4f       	sbci	r17, 0xFF	; 255
    4a88:	0e 94 86 13 	call	0x270c	; 0x270c <log_count>
    4a8c:	90 e0       	ldi	r25, 0x00	; 0
    4a8e:	08 17       	cp	r16, r24
    4a90:	19 07       	cpc	r17, r25
    4a92:	a4 f4       	brge	.+40     	; 0x4abc <menuOnEnterLogDisp+0x8c>
    4a94:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3040>
    4a98:	8f 5f       	subi	r24, 0xFF	; 255
    4a9a:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.3040>
    4a9e:	cf ef       	ldi	r28, 0xFF	; 255
    4aa0:	10 c0       	rjmp	.+32     	; 0x4ac2 <menuOnEnterLogDisp+0x92>
    4aa2:	83 30       	cpi	r24, 0x03	; 3
    4aa4:	11 f0       	breq	.+4      	; 0x4aaa <menuOnEnterLogDisp+0x7a>
    4aa6:	85 30       	cpi	r24, 0x05	; 5
    4aa8:	59 f4       	brne	.+22     	; 0x4ac0 <menuOnEnterLogDisp+0x90>
    4aaa:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3041>
    4aae:	80 95       	com	r24
    4ab0:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.3041>
    4ab4:	cf ef       	ldi	r28, 0xFF	; 255
    4ab6:	05 c0       	rjmp	.+10     	; 0x4ac2 <menuOnEnterLogDisp+0x92>
    4ab8:	cf ef       	ldi	r28, 0xFF	; 255
    4aba:	03 c0       	rjmp	.+6      	; 0x4ac2 <menuOnEnterLogDisp+0x92>
    4abc:	cf ef       	ldi	r28, 0xFF	; 255
    4abe:	01 c0       	rjmp	.+2      	; 0x4ac2 <menuOnEnterLogDisp+0x92>
    4ac0:	c0 e0       	ldi	r28, 0x00	; 0
    4ac2:	cf 3f       	cpi	r28, 0xFF	; 255
    4ac4:	09 f0       	breq	.+2      	; 0x4ac8 <menuOnEnterLogDisp+0x98>
    4ac6:	54 c0       	rjmp	.+168    	; 0x4b70 <menuOnEnterLogDisp+0x140>
    4ac8:	33 df       	rcall	.-410    	; 0x4930 <menuCursorSetExtra>
    4aca:	0e 94 86 13 	call	0x270c	; 0x270c <log_count>
    4ace:	81 11       	cpse	r24, r1
    4ad0:	06 c0       	rjmp	.+12     	; 0x4ade <menuOnEnterLogDisp+0xae>
    4ad2:	89 e9       	ldi	r24, 0x99	; 153
    4ad4:	93 e0       	ldi	r25, 0x03	; 3
    4ad6:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    4ada:	c0 e0       	ldi	r28, 0x00	; 0
    4adc:	1d c0       	rjmp	.+58     	; 0x4b18 <menuOnEnterLogDisp+0xe8>
    4ade:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3040>
    4ae2:	8f 5f       	subi	r24, 0xFF	; 255
    4ae4:	0e 94 9a 39 	call	0x7334	; 0x7334 <lcd_dec2out>
    4ae8:	8a e3       	ldi	r24, 0x3A	; 58
    4aea:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    4aee:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3041>
    4af2:	81 11       	cpse	r24, r1
    4af4:	08 c0       	rjmp	.+16     	; 0x4b06 <menuOnEnterLogDisp+0xd6>
    4af6:	60 e2       	ldi	r22, 0x20	; 32
    4af8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3040>
    4afc:	0e 94 27 15 	call	0x2a4e	; 0x2a4e <log_getShortTextFromIndex>
    4b00:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <lcd_puts>
    4b04:	06 c0       	rjmp	.+12     	; 0x4b12 <menuOnEnterLogDisp+0xe2>
    4b06:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3040>
    4b0a:	0e 94 cd 13 	call	0x279a	; 0x279a <log_getErrorText>
    4b0e:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    4b12:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <lcd_clrEol>
    4b16:	0c df       	rcall	.-488    	; 0x4930 <menuCursorSetExtra>
    4b18:	61 e0       	ldi	r22, 0x01	; 1
    4b1a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.3041>
    4b1e:	8f 3f       	cpi	r24, 0xFF	; 255
    4b20:	09 f0       	breq	.+2      	; 0x4b24 <menuOnEnterLogDisp+0xf4>
    4b22:	60 e0       	ldi	r22, 0x00	; 0
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	0e 94 1f 3c 	call	0x783e	; 0x783e <keylabel_statcheck>
    4b2a:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.3040>
    4b2e:	10 e0       	ldi	r17, 0x00	; 0
    4b30:	0f 5f       	subi	r16, 0xFF	; 255
    4b32:	1f 4f       	sbci	r17, 0xFF	; 255
    4b34:	0e 94 86 13 	call	0x270c	; 0x270c <log_count>
    4b38:	90 e0       	ldi	r25, 0x00	; 0
    4b3a:	08 17       	cp	r16, r24
    4b3c:	19 07       	cpc	r17, r25
    4b3e:	34 f4       	brge	.+12     	; 0x4b4c <menuOnEnterLogDisp+0x11c>
    4b40:	64 ea       	ldi	r22, 0xA4	; 164
    4b42:	72 e1       	ldi	r23, 0x12	; 18
    4b44:	83 e0       	ldi	r24, 0x03	; 3
    4b46:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    4b4a:	03 c0       	rjmp	.+6      	; 0x4b52 <menuOnEnterLogDisp+0x122>
    4b4c:	83 e0       	ldi	r24, 0x03	; 3
    4b4e:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4b52:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.3040>
    4b56:	88 23       	and	r24, r24
    4b58:	31 f0       	breq	.+12     	; 0x4b66 <menuOnEnterLogDisp+0x136>
    4b5a:	62 ea       	ldi	r22, 0xA2	; 162
    4b5c:	72 e1       	ldi	r23, 0x12	; 18
    4b5e:	82 e0       	ldi	r24, 0x02	; 2
    4b60:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
    4b64:	03 c0       	rjmp	.+6      	; 0x4b6c <menuOnEnterLogDisp+0x13c>
    4b66:	82 e0       	ldi	r24, 0x02	; 2
    4b68:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4b6c:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
    4b70:	8c 2f       	mov	r24, r28
    4b72:	cf 91       	pop	r28
    4b74:	1f 91       	pop	r17
    4b76:	0f 91       	pop	r16
    4b78:	08 95       	ret

00004b7a <menuCursorSetMenu>:
    4b7a:	8a e4       	ldi	r24, 0x4A	; 74
    4b7c:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <lcd_goto>
    4b80:	08 95       	ret

00004b82 <menuClearExtraDisp>:
    4b82:	d6 de       	rcall	.-596    	; 0x4930 <menuCursorSetExtra>
    4b84:	8a e0       	ldi	r24, 0x0A	; 10
    4b86:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <lcd_blank>
    4b8a:	08 95       	ret

00004b8c <menu_ClearDataDisp>:
    4b8c:	8e e1       	ldi	r24, 0x1E	; 30
    4b8e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    4b92:	8a e0       	ldi	r24, 0x0A	; 10
    4b94:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <lcd_blank>
    4b98:	08 95       	ret

00004b9a <menuClearMenuDisp>:
    4b9a:	80 e4       	ldi	r24, 0x40	; 64
    4b9c:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    4ba0:	8a e0       	ldi	r24, 0x0A	; 10
    4ba2:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
    4ba6:	e9 df       	rcall	.-46     	; 0x4b7a <menuCursorSetMenu>
    4ba8:	8a e0       	ldi	r24, 0x0A	; 10
    4baa:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <lcd_blank>
    4bae:	08 95       	ret

00004bb0 <menu_ClearAllDisp>:
    4bb0:	f4 df       	rcall	.-24     	; 0x4b9a <menuClearMenuDisp>
    4bb2:	ec df       	rcall	.-40     	; 0x4b8c <menu_ClearDataDisp>
    4bb4:	e6 cf       	rjmp	.-52     	; 0x4b82 <menuClearExtraDisp>
    4bb6:	08 95       	ret

00004bb8 <menuCheckArrowDown>:
    4bb8:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4bbc:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4bc0:	84 91       	lpm	r24, Z
    4bc2:	8f 73       	andi	r24, 0x3F	; 63
    4bc4:	81 30       	cpi	r24, 0x01	; 1
    4bc6:	11 f4       	brne	.+4      	; 0x4bcc <menuCheckArrowDown+0x14>
    4bc8:	0f c9       	rjmp	.-3554   	; 0x3de8 <softkeyDown>
    4bca:	08 95       	ret
    4bcc:	3e 96       	adiw	r30, 0x0e	; 14
    4bce:	05 90       	lpm	r0, Z+
    4bd0:	f4 91       	lpm	r31, Z
    4bd2:	e0 2d       	mov	r30, r0
    4bd4:	30 97       	sbiw	r30, 0x00	; 0
    4bd6:	59 f0       	breq	.+22     	; 0x4bee <menuCheckArrowDown+0x36>
    4bd8:	89 30       	cpi	r24, 0x09	; 9
    4bda:	39 f4       	brne	.+14     	; 0x4bea <menuCheckArrowDown+0x32>
    4bdc:	80 81       	ld	r24, Z
    4bde:	81 11       	cpse	r24, r1
    4be0:	02 c0       	rjmp	.+4      	; 0x4be6 <menuCheckArrowDown+0x2e>
    4be2:	08 c9       	rjmp	.-3568   	; 0x3df4 <softkeyOn>
    4be4:	08 95       	ret
    4be6:	0c c9       	rjmp	.-3560   	; 0x3e00 <softkeyOff>
    4be8:	08 95       	ret
    4bea:	fe c8       	rjmp	.-3588   	; 0x3de8 <softkeyDown>
    4bec:	08 95       	ret
    4bee:	81 e0       	ldi	r24, 0x01	; 1
    4bf0:	0c 94 ec 3b 	jmp	0x77d8	; 0x77d8 <keylabel_clr>
    4bf4:	08 95       	ret

00004bf6 <menuCurrMenuToLCD>:
    4bf6:	cf 93       	push	r28
    4bf8:	89 e4       	ldi	r24, 0x49	; 73
    4bfa:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    4bfe:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4c02:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c06:	c4 91       	lpm	r28, Z
    4c08:	c0 7c       	andi	r28, 0xC0	; 192
    4c0a:	c0 38       	cpi	r28, 0x80	; 128
    4c0c:	39 f4       	brne	.+14     	; 0x4c1c <menuCurrMenuToLCD+0x26>
    4c0e:	80 e2       	ldi	r24, 0x20	; 32
    4c10:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    4c14:	82 e0       	ldi	r24, 0x02	; 2
    4c16:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4c1a:	04 c0       	rjmp	.+8      	; 0x4c24 <menuCurrMenuToLCD+0x2e>
    4c1c:	8f e7       	ldi	r24, 0x7F	; 127
    4c1e:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    4c22:	d6 d8       	rcall	.-3668   	; 0x3dd0 <softkeyLeft>
    4c24:	c0 3c       	cpi	r28, 0xC0	; 192
    4c26:	29 f4       	brne	.+10     	; 0x4c32 <menuCurrMenuToLCD+0x3c>
    4c28:	83 e0       	ldi	r24, 0x03	; 3
    4c2a:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4c2e:	c0 e2       	ldi	r28, 0x20	; 32
    4c30:	02 c0       	rjmp	.+4      	; 0x4c36 <menuCurrMenuToLCD+0x40>
    4c32:	d4 d8       	rcall	.-3672   	; 0x3ddc <softkeyRight>
    4c34:	ce e7       	ldi	r28, 0x7E	; 126
    4c36:	ea d8       	rcall	.-3628   	; 0x3e0c <softkeyUp>
    4c38:	bf df       	rcall	.-130    	; 0x4bb8 <menuCheckArrowDown>
    4c3a:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4c3e:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c42:	6c 2f       	mov	r22, r28
    4c44:	02 96       	adiw	r24, 0x02	; 2
    4c46:	05 de       	rcall	.-1014   	; 0x4852 <menuTextOut>
    4c48:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
    4c4c:	96 df       	rcall	.-212    	; 0x4b7a <menuCursorSetMenu>
    4c4e:	cf 91       	pop	r28
    4c50:	08 95       	ret

00004c52 <menuItemChanged>:
    4c52:	8f ef       	ldi	r24, 0xFF	; 255
    4c54:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    4c58:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4c5c:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4c60:	fc 01       	movw	r30, r24
    4c62:	24 91       	lpm	r18, Z
    4c64:	62 2f       	mov	r22, r18
    4c66:	6f 73       	andi	r22, 0x3F	; 63
    4c68:	62 30       	cpi	r22, 0x02	; 2
    4c6a:	08 f4       	brcc	.+2      	; 0x4c6e <menuItemChanged+0x1c>
    4c6c:	49 c0       	rjmp	.+146    	; 0x4d00 <menuItemChanged+0xae>
    4c6e:	9c 01       	movw	r18, r24
    4c70:	22 5f       	subi	r18, 0xF2	; 242
    4c72:	3f 4f       	sbci	r19, 0xFF	; 255
    4c74:	f9 01       	movw	r30, r18
    4c76:	45 91       	lpm	r20, Z+
    4c78:	55 91       	lpm	r21, Z+
    4c7a:	41 15       	cp	r20, r1
    4c7c:	51 05       	cpc	r21, r1
    4c7e:	09 f4       	brne	.+2      	; 0x4c82 <menuItemChanged+0x30>
    4c80:	3f c0       	rjmp	.+126    	; 0x4d00 <menuItemChanged+0xae>
    4c82:	e6 2f       	mov	r30, r22
    4c84:	f0 e0       	ldi	r31, 0x00	; 0
    4c86:	31 97       	sbiw	r30, 0x01	; 1
    4c88:	9f 01       	movw	r18, r30
    4c8a:	22 0f       	add	r18, r18
    4c8c:	33 1f       	adc	r19, r19
    4c8e:	22 0f       	add	r18, r18
    4c90:	33 1f       	adc	r19, r19
    4c92:	22 0f       	add	r18, r18
    4c94:	33 1f       	adc	r19, r19
    4c96:	e2 0f       	add	r30, r18
    4c98:	f3 1f       	adc	r31, r19
    4c9a:	e7 51       	subi	r30, 0x17	; 23
    4c9c:	fc 4f       	sbci	r31, 0xFC	; 252
    4c9e:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    4ca2:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    4ca6:	24 91       	lpm	r18, Z
    4ca8:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    4cac:	fc 01       	movw	r30, r24
    4cae:	25 91       	lpm	r18, Z+
    4cb0:	2f 73       	andi	r18, 0x3F	; 63
    4cb2:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    4cb6:	24 91       	lpm	r18, Z
    4cb8:	22 23       	and	r18, r18
    4cba:	2c f4       	brge	.+10     	; 0x4cc6 <menuItemChanged+0x74>
    4cbc:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4cc0:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4cc4:	02 c0       	rjmp	.+4      	; 0x4cca <menuItemChanged+0x78>
    4cc6:	20 e0       	ldi	r18, 0x00	; 0
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
    4cca:	24 0f       	add	r18, r20
    4ccc:	35 1f       	adc	r19, r21
    4cce:	fc 01       	movw	r30, r24
    4cd0:	84 91       	lpm	r24, Z
    4cd2:	8f 73       	andi	r24, 0x3F	; 63
    4cd4:	8b 30       	cpi	r24, 0x0B	; 11
    4cd6:	71 f4       	brne	.+28     	; 0x4cf4 <menuItemChanged+0xa2>
    4cd8:	f9 01       	movw	r30, r18
    4cda:	80 81       	ld	r24, Z
    4cdc:	91 81       	ldd	r25, Z+1	; 0x01
    4cde:	a2 81       	ldd	r26, Z+2	; 0x02
    4ce0:	b3 81       	ldd	r27, Z+3	; 0x03
    4ce2:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    4ce6:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    4cea:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    4cee:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    4cf2:	04 c0       	rjmp	.+8      	; 0x4cfc <menuItemChanged+0xaa>
    4cf4:	f9 01       	movw	r30, r18
    4cf6:	80 81       	ld	r24, Z
    4cf8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4cfc:	df dd       	rcall	.-1090   	; 0x48bc <menuDisplayValue>
    4cfe:	07 c0       	rjmp	.+14     	; 0x4d0e <menuItemChanged+0xbc>
    4d00:	45 df       	rcall	.-374    	; 0x4b8c <menu_ClearDataDisp>
    4d02:	89 ee       	ldi	r24, 0xE9	; 233
    4d04:	93 e0       	ldi	r25, 0x03	; 3
    4d06:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    4d0a:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4d0e:	54 df       	rcall	.-344    	; 0x4bb8 <menuCheckArrowDown>
    4d10:	34 cf       	rjmp	.-408    	; 0x4b7a <menuCursorSetMenu>
    4d12:	08 95       	ret

00004d14 <menu_InitLCD>:
    4d14:	36 df       	rcall	.-404    	; 0x4b82 <menuClearExtraDisp>
    4d16:	9d df       	rcall	.-198    	; 0x4c52 <menuItemChanged>
    4d18:	b7 dd       	rcall	.-1170   	; 0x4888 <menuParentMenuToLCD>
    4d1a:	6d df       	rcall	.-294    	; 0x4bf6 <menuCurrMenuToLCD>
    4d1c:	0c 94 88 3b 	jmp	0x7710	; 0x7710 <lcd_cursosblink>
    4d20:	08 95       	ret

00004d22 <menu_ProcessMessage>:
    4d22:	cf 93       	push	r28
    4d24:	c8 2f       	mov	r28, r24
    4d26:	0e 94 88 3b 	call	0x7710	; 0x7710 <lcd_cursosblink>
    4d2a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4d2e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d32:	84 91       	lpm	r24, Z
    4d34:	8f 73       	andi	r24, 0x3F	; 63
    4d36:	81 30       	cpi	r24, 0x01	; 1
    4d38:	29 f0       	breq	.+10     	; 0x4d44 <menu_ProcessMessage+0x22>
    4d3a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4d40:	09 f0       	breq	.+2      	; 0x4d44 <menu_ProcessMessage+0x22>
    4d42:	68 c1       	rjmp	.+720    	; 0x5014 <menu_ProcessMessage+0x2f2>
    4d44:	31 96       	adiw	r30, 0x01	; 1
    4d46:	84 91       	lpm	r24, Z
    4d48:	86 ff       	sbrs	r24, 6
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <menu_ProcessMessage+0x2e>
    4d4c:	1a df       	rcall	.-460    	; 0x4b82 <menuClearExtraDisp>
    4d4e:	15 df       	rcall	.-470    	; 0x4b7a <menuCursorSetMenu>
    4d50:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4d54:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d58:	cb 01       	movw	r24, r22
    4d5a:	01 96       	adiw	r24, 0x01	; 1
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	84 91       	lpm	r24, Z
    4d60:	98 2f       	mov	r25, r24
    4d62:	90 72       	andi	r25, 0x20	; 32
    4d64:	85 ff       	sbrs	r24, 5
    4d66:	1f c0       	rjmp	.+62     	; 0x4da6 <menu_ProcessMessage+0x84>
    4d68:	9b 01       	movw	r18, r22
    4d6a:	20 5f       	subi	r18, 0xF0	; 240
    4d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6e:	f9 01       	movw	r30, r18
    4d70:	25 91       	lpm	r18, Z+
    4d72:	35 91       	lpm	r19, Z+
    4d74:	21 15       	cp	r18, r1
    4d76:	31 05       	cpc	r19, r1
    4d78:	b1 f0       	breq	.+44     	; 0x4da6 <menu_ProcessMessage+0x84>
    4d7a:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4d7e:	4f 3f       	cpi	r20, 0xFF	; 255
    4d80:	91 f0       	breq	.+36     	; 0x4da6 <menu_ProcessMessage+0x84>
    4d82:	8c 2f       	mov	r24, r28
    4d84:	f9 01       	movw	r30, r18
    4d86:	19 95       	eicall
    4d88:	8f 3f       	cpi	r24, 0xFF	; 255
    4d8a:	21 f4       	brne	.+8      	; 0x4d94 <menu_ProcessMessage+0x72>
    4d8c:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4d90:	80 e0       	ldi	r24, 0x00	; 0
    4d92:	04 c2       	rjmp	.+1032   	; 0x519c <menu_ProcessMessage+0x47a>
    4d94:	f6 de       	rcall	.-532    	; 0x4b82 <menuClearExtraDisp>
    4d96:	fa de       	rcall	.-524    	; 0x4b8c <menu_ClearDataDisp>
    4d98:	f0 de       	rcall	.-544    	; 0x4b7a <menuCursorSetMenu>
    4d9a:	8f ef       	ldi	r24, 0xFF	; 255
    4d9c:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4da0:	2a df       	rcall	.-428    	; 0x4bf6 <menuCurrMenuToLCD>
    4da2:	80 e0       	ldi	r24, 0x00	; 0
    4da4:	fb c1       	rjmp	.+1014   	; 0x519c <menu_ProcessMessage+0x47a>
    4da6:	c3 30       	cpi	r28, 0x03	; 3
    4da8:	09 f4       	brne	.+2      	; 0x4dac <menu_ProcessMessage+0x8a>
    4daa:	64 c0       	rjmp	.+200    	; 0x4e74 <menu_ProcessMessage+0x152>
    4dac:	28 f4       	brcc	.+10     	; 0x4db8 <menu_ProcessMessage+0x96>
    4dae:	c1 30       	cpi	r28, 0x01	; 1
    4db0:	51 f0       	breq	.+20     	; 0x4dc6 <menu_ProcessMessage+0xa4>
    4db2:	c2 30       	cpi	r28, 0x02	; 2
    4db4:	31 f1       	breq	.+76     	; 0x4e02 <menu_ProcessMessage+0xe0>
    4db6:	db c1       	rjmp	.+950    	; 0x516e <menu_ProcessMessage+0x44c>
    4db8:	c5 30       	cpi	r28, 0x05	; 5
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <menu_ProcessMessage+0x9c>
    4dbc:	5b c0       	rjmp	.+182    	; 0x4e74 <menu_ProcessMessage+0x152>
    4dbe:	90 f0       	brcs	.+36     	; 0x4de4 <menu_ProcessMessage+0xc2>
    4dc0:	c6 30       	cpi	r28, 0x06	; 6
    4dc2:	f9 f0       	breq	.+62     	; 0x4e02 <menu_ProcessMessage+0xe0>
    4dc4:	d4 c1       	rjmp	.+936    	; 0x516e <menu_ProcessMessage+0x44c>
    4dc6:	fb 01       	movw	r30, r22
    4dc8:	84 91       	lpm	r24, Z
    4dca:	80 7c       	andi	r24, 0xC0	; 192
    4dcc:	80 3c       	cpi	r24, 0xC0	; 192
    4dce:	09 f4       	brne	.+2      	; 0x4dd2 <menu_ProcessMessage+0xb0>
    4dd0:	d0 c1       	rjmp	.+928    	; 0x5172 <menu_ProcessMessage+0x450>
    4dd2:	74 96       	adiw	r30, 0x14	; 20
    4dd4:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4dd8:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4ddc:	3a df       	rcall	.-396    	; 0x4c52 <menuItemChanged>
    4dde:	0b df       	rcall	.-490    	; 0x4bf6 <menuCurrMenuToLCD>
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	dc c1       	rjmp	.+952    	; 0x519c <menu_ProcessMessage+0x47a>
    4de4:	fb 01       	movw	r30, r22
    4de6:	84 91       	lpm	r24, Z
    4de8:	80 7c       	andi	r24, 0xC0	; 192
    4dea:	80 38       	cpi	r24, 0x80	; 128
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <menu_ProcessMessage+0xce>
    4dee:	c3 c1       	rjmp	.+902    	; 0x5176 <menu_ProcessMessage+0x454>
    4df0:	74 97       	sbiw	r30, 0x14	; 20
    4df2:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4df6:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4dfa:	2b df       	rcall	.-426    	; 0x4c52 <menuItemChanged>
    4dfc:	fc de       	rcall	.-520    	; 0x4bf6 <menuCurrMenuToLCD>
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	cd c1       	rjmp	.+922    	; 0x519c <menu_ProcessMessage+0x47a>
    4e02:	84 ff       	sbrs	r24, 4
    4e04:	04 c0       	rjmp	.+8      	; 0x4e0e <menu_ProcessMessage+0xec>
    4e06:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4e0a:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4e0e:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4e12:	ee 23       	and	r30, r30
    4e14:	e9 f0       	breq	.+58     	; 0x4e50 <menu_ProcessMessage+0x12e>
    4e16:	e1 50       	subi	r30, 0x01	; 1
    4e18:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4e1c:	f0 e0       	ldi	r31, 0x00	; 0
    4e1e:	ee 0f       	add	r30, r30
    4e20:	ff 1f       	adc	r31, r31
    4e22:	e5 58       	subi	r30, 0x85	; 133
    4e24:	fa 4f       	sbci	r31, 0xFA	; 250
    4e26:	01 90       	ld	r0, Z+
    4e28:	f0 81       	ld	r31, Z
    4e2a:	e0 2d       	mov	r30, r0
    4e2c:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4e30:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4e34:	72 96       	adiw	r30, 0x12	; 18
    4e36:	05 90       	lpm	r0, Z+
    4e38:	f4 91       	lpm	r31, Z
    4e3a:	e0 2d       	mov	r30, r0
    4e3c:	30 97       	sbiw	r30, 0x00	; 0
    4e3e:	11 f0       	breq	.+4      	; 0x4e44 <menu_ProcessMessage+0x122>
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	19 95       	eicall
    4e44:	9e de       	rcall	.-708    	; 0x4b82 <menuClearExtraDisp>
    4e46:	20 dd       	rcall	.-1472   	; 0x4888 <menuParentMenuToLCD>
    4e48:	d6 de       	rcall	.-596    	; 0x4bf6 <menuCurrMenuToLCD>
    4e4a:	03 df       	rcall	.-506    	; 0x4c52 <menuItemChanged>
    4e4c:	80 e0       	ldi	r24, 0x00	; 0
    4e4e:	a6 c1       	rjmp	.+844    	; 0x519c <menu_ProcessMessage+0x47a>
    4e50:	80 e0       	ldi	r24, 0x00	; 0
    4e52:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4e56:	81 e0       	ldi	r24, 0x01	; 1
    4e58:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4e5c:	82 e0       	ldi	r24, 0x02	; 2
    4e5e:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4e62:	83 e0       	ldi	r24, 0x03	; 3
    4e64:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    4e68:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
    4e6c:	0e 94 8f 3b 	call	0x771e	; 0x771e <lcd_cursoroff>
    4e70:	8f ef       	ldi	r24, 0xFF	; 255
    4e72:	94 c1       	rjmp	.+808    	; 0x519c <menu_ProcessMessage+0x47a>
    4e74:	fb 01       	movw	r30, r22
    4e76:	24 91       	lpm	r18, Z
    4e78:	2f 73       	andi	r18, 0x3F	; 63
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	22 30       	cpi	r18, 0x02	; 2
    4e7e:	31 05       	cpc	r19, r1
    4e80:	0c f4       	brge	.+2      	; 0x4e84 <menu_ProcessMessage+0x162>
    4e82:	48 c0       	rjmp	.+144    	; 0x4f14 <menu_ProcessMessage+0x1f2>
    4e84:	70 96       	adiw	r30, 0x10	; 16
    4e86:	05 90       	lpm	r0, Z+
    4e88:	f4 91       	lpm	r31, Z
    4e8a:	e0 2d       	mov	r30, r0
    4e8c:	30 97       	sbiw	r30, 0x00	; 0
    4e8e:	19 f0       	breq	.+6      	; 0x4e96 <menu_ProcessMessage+0x174>
    4e90:	8c 2f       	mov	r24, r28
    4e92:	19 95       	eicall
    4e94:	de de       	rcall	.-580    	; 0x4c52 <menuItemChanged>
    4e96:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4e9a:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4e9e:	c9 01       	movw	r24, r18
    4ea0:	01 96       	adiw	r24, 0x01	; 1
    4ea2:	fc 01       	movw	r30, r24
    4ea4:	84 91       	lpm	r24, Z
    4ea6:	83 fd       	sbrc	r24, 3
    4ea8:	68 c1       	rjmp	.+720    	; 0x517a <menu_ProcessMessage+0x458>
    4eaa:	c9 01       	movw	r24, r18
    4eac:	0e 96       	adiw	r24, 0x0e	; 14
    4eae:	fc 01       	movw	r30, r24
    4eb0:	85 91       	lpm	r24, Z+
    4eb2:	95 91       	lpm	r25, Z+
    4eb4:	89 2b       	or	r24, r25
    4eb6:	09 f4       	brne	.+2      	; 0x4eba <menu_ProcessMessage+0x198>
    4eb8:	62 c1       	rjmp	.+708    	; 0x517e <menu_ProcessMessage+0x45c>
    4eba:	f9 01       	movw	r30, r18
    4ebc:	84 91       	lpm	r24, Z
    4ebe:	8f 73       	andi	r24, 0x3F	; 63
    4ec0:	89 30       	cpi	r24, 0x09	; 9
    4ec2:	19 f5       	brne	.+70     	; 0x4f0a <menu_ProcessMessage+0x1e8>
    4ec4:	61 e0       	ldi	r22, 0x01	; 1
    4ec6:	80 e0       	ldi	r24, 0x00	; 0
    4ec8:	30 da       	rcall	.-2976   	; 0x432a <nibbleChange>
    4eca:	de db       	rcall	.-2116   	; 0x4688 <nibbleToData>
    4ecc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4ed0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4ed4:	3e 96       	adiw	r30, 0x0e	; 14
    4ed6:	05 90       	lpm	r0, Z+
    4ed8:	f4 91       	lpm	r31, Z
    4eda:	e0 2d       	mov	r30, r0
    4edc:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4ee0:	80 83       	st	Z, r24
    4ee2:	ec dc       	rcall	.-1576   	; 0x48bc <menuDisplayValue>
    4ee4:	69 de       	rcall	.-814    	; 0x4bb8 <menuCheckArrowDown>
    4ee6:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
    4eea:	47 de       	rcall	.-882    	; 0x4b7a <menuCursorSetMenu>
    4eec:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4ef0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4ef4:	72 96       	adiw	r30, 0x12	; 18
    4ef6:	05 90       	lpm	r0, Z+
    4ef8:	f4 91       	lpm	r31, Z
    4efa:	e0 2d       	mov	r30, r0
    4efc:	30 97       	sbiw	r30, 0x00	; 0
    4efe:	09 f4       	brne	.+2      	; 0x4f02 <menu_ProcessMessage+0x1e0>
    4f00:	40 c1       	rjmp	.+640    	; 0x5182 <menu_ProcessMessage+0x460>
    4f02:	80 e0       	ldi	r24, 0x00	; 0
    4f04:	19 95       	eicall
    4f06:	80 e0       	ldi	r24, 0x00	; 0
    4f08:	49 c1       	rjmp	.+658    	; 0x519c <menu_ProcessMessage+0x47a>
    4f0a:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4f0e:	e3 dc       	rcall	.-1594   	; 0x48d6 <menuCursorSetDataNibble>
    4f10:	80 e0       	ldi	r24, 0x00	; 0
    4f12:	44 c1       	rjmp	.+648    	; 0x519c <menu_ProcessMessage+0x47a>
    4f14:	2f ef       	ldi	r18, 0xFF	; 255
    4f16:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4f1a:	84 ff       	sbrs	r24, 4
    4f1c:	26 c0       	rjmp	.+76     	; 0x4f6a <menu_ProcessMessage+0x248>
    4f1e:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4f22:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4f26:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4f2a:	ee 23       	and	r30, r30
    4f2c:	09 f4       	brne	.+2      	; 0x4f30 <menu_ProcessMessage+0x20e>
    4f2e:	2b c1       	rjmp	.+598    	; 0x5186 <menu_ProcessMessage+0x464>
    4f30:	e1 50       	subi	r30, 0x01	; 1
    4f32:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4f36:	f0 e0       	ldi	r31, 0x00	; 0
    4f38:	ee 0f       	add	r30, r30
    4f3a:	ff 1f       	adc	r31, r31
    4f3c:	e5 58       	subi	r30, 0x85	; 133
    4f3e:	fa 4f       	sbci	r31, 0xFA	; 250
    4f40:	01 90       	ld	r0, Z+
    4f42:	f0 81       	ld	r31, Z
    4f44:	e0 2d       	mov	r30, r0
    4f46:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4f4a:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4f4e:	72 96       	adiw	r30, 0x12	; 18
    4f50:	05 90       	lpm	r0, Z+
    4f52:	f4 91       	lpm	r31, Z
    4f54:	e0 2d       	mov	r30, r0
    4f56:	30 97       	sbiw	r30, 0x00	; 0
    4f58:	11 f0       	breq	.+4      	; 0x4f5e <menu_ProcessMessage+0x23c>
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	19 95       	eicall
    4f5e:	11 de       	rcall	.-990    	; 0x4b82 <menuClearExtraDisp>
    4f60:	93 dc       	rcall	.-1754   	; 0x4888 <menuParentMenuToLCD>
    4f62:	49 de       	rcall	.-878    	; 0x4bf6 <menuCurrMenuToLCD>
    4f64:	76 de       	rcall	.-788    	; 0x4c52 <menuItemChanged>
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	19 c1       	rjmp	.+562    	; 0x519c <menu_ProcessMessage+0x47a>
    4f6a:	fb 01       	movw	r30, r22
    4f6c:	70 96       	adiw	r30, 0x10	; 16
    4f6e:	05 90       	lpm	r0, Z+
    4f70:	f4 91       	lpm	r31, Z
    4f72:	e0 2d       	mov	r30, r0
    4f74:	30 97       	sbiw	r30, 0x00	; 0
    4f76:	99 f0       	breq	.+38     	; 0x4f9e <menu_ProcessMessage+0x27c>
    4f78:	99 23       	and	r25, r25
    4f7a:	71 f0       	breq	.+28     	; 0x4f98 <menu_ProcessMessage+0x276>
    4f7c:	8f ef       	ldi	r24, 0xFF	; 255
    4f7e:	19 95       	eicall
    4f80:	8f 3f       	cpi	r24, 0xFF	; 255
    4f82:	19 f4       	brne	.+6      	; 0x4f8a <menu_ProcessMessage+0x268>
    4f84:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4f88:	0a c0       	rjmp	.+20     	; 0x4f9e <menu_ProcessMessage+0x27c>
    4f8a:	fb dd       	rcall	.-1034   	; 0x4b82 <menuClearExtraDisp>
    4f8c:	ff dd       	rcall	.-1026   	; 0x4b8c <menu_ClearDataDisp>
    4f8e:	f5 dd       	rcall	.-1046   	; 0x4b7a <menuCursorSetMenu>
    4f90:	8f ef       	ldi	r24, 0xFF	; 255
    4f92:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4f96:	03 c0       	rjmp	.+6      	; 0x4f9e <menu_ProcessMessage+0x27c>
    4f98:	85 e0       	ldi	r24, 0x05	; 5
    4f9a:	19 95       	eicall
    4f9c:	ee dd       	rcall	.-1060   	; 0x4b7a <menuCursorSetMenu>
    4f9e:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4fa2:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4fa6:	c9 01       	movw	r24, r18
    4fa8:	0c 96       	adiw	r24, 0x0c	; 12
    4faa:	fc 01       	movw	r30, r24
    4fac:	85 91       	lpm	r24, Z+
    4fae:	95 91       	lpm	r25, Z+
    4fb0:	89 2b       	or	r24, r25
    4fb2:	09 f4       	brne	.+2      	; 0x4fb6 <menu_ProcessMessage+0x294>
    4fb4:	ea c0       	rjmp	.+468    	; 0x518a <menu_ProcessMessage+0x468>
    4fb6:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    4fba:	a0 31       	cpi	r26, 0x10	; 16
    4fbc:	08 f0       	brcs	.+2      	; 0x4fc0 <menu_ProcessMessage+0x29e>
    4fbe:	e7 c0       	rjmp	.+462    	; 0x518e <menu_ProcessMessage+0x46c>
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	8a 0f       	add	r24, r26
    4fc4:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    4fc8:	b0 e0       	ldi	r27, 0x00	; 0
    4fca:	aa 0f       	add	r26, r26
    4fcc:	bb 1f       	adc	r27, r27
    4fce:	a5 58       	subi	r26, 0x85	; 133
    4fd0:	ba 4f       	sbci	r27, 0xFA	; 250
    4fd2:	2d 93       	st	X+, r18
    4fd4:	3c 93       	st	X, r19
    4fd6:	c9 01       	movw	r24, r18
    4fd8:	01 96       	adiw	r24, 0x01	; 1
    4fda:	fc 01       	movw	r30, r24
    4fdc:	84 91       	lpm	r24, Z
    4fde:	83 ff       	sbrs	r24, 3
    4fe0:	0b c0       	rjmp	.+22     	; 0x4ff8 <menu_ProcessMessage+0x2d6>
    4fe2:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    4fe6:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    4fea:	00 97       	sbiw	r24, 0x00	; 0
    4fec:	29 f0       	breq	.+10     	; 0x4ff8 <menu_ProcessMessage+0x2d6>
    4fee:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4ff2:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4ff6:	08 c0       	rjmp	.+16     	; 0x5008 <menu_ProcessMessage+0x2e6>
    4ff8:	f9 01       	movw	r30, r18
    4ffa:	3c 96       	adiw	r30, 0x0c	; 12
    4ffc:	85 91       	lpm	r24, Z+
    4ffe:	95 91       	lpm	r25, Z+
    5000:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    5004:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    5008:	bc dd       	rcall	.-1160   	; 0x4b82 <menuClearExtraDisp>
    500a:	3e dc       	rcall	.-1924   	; 0x4888 <menuParentMenuToLCD>
    500c:	f4 dd       	rcall	.-1048   	; 0x4bf6 <menuCurrMenuToLCD>
    500e:	21 de       	rcall	.-958    	; 0x4c52 <menuItemChanged>
    5010:	80 e0       	ldi	r24, 0x00	; 0
    5012:	c4 c0       	rjmp	.+392    	; 0x519c <menu_ProcessMessage+0x47a>
    5014:	c3 30       	cpi	r28, 0x03	; 3
    5016:	09 f4       	brne	.+2      	; 0x501a <menu_ProcessMessage+0x2f8>
    5018:	49 c0       	rjmp	.+146    	; 0x50ac <menu_ProcessMessage+0x38a>
    501a:	28 f4       	brcc	.+10     	; 0x5026 <menu_ProcessMessage+0x304>
    501c:	c1 30       	cpi	r28, 0x01	; 1
    501e:	59 f0       	breq	.+22     	; 0x5036 <menu_ProcessMessage+0x314>
    5020:	c2 30       	cpi	r28, 0x02	; 2
    5022:	31 f1       	breq	.+76     	; 0x5070 <menu_ProcessMessage+0x34e>
    5024:	b6 c0       	rjmp	.+364    	; 0x5192 <menu_ProcessMessage+0x470>
    5026:	c5 30       	cpi	r28, 0x05	; 5
    5028:	09 f4       	brne	.+2      	; 0x502c <menu_ProcessMessage+0x30a>
    502a:	5e c0       	rjmp	.+188    	; 0x50e8 <menu_ProcessMessage+0x3c6>
    502c:	c0 f0       	brcs	.+48     	; 0x505e <menu_ProcessMessage+0x33c>
    502e:	c6 30       	cpi	r28, 0x06	; 6
    5030:	09 f4       	brne	.+2      	; 0x5034 <menu_ProcessMessage+0x312>
    5032:	8a c0       	rjmp	.+276    	; 0x5148 <menu_ProcessMessage+0x426>
    5034:	ae c0       	rjmp	.+348    	; 0x5192 <menu_ProcessMessage+0x470>
    5036:	48 2f       	mov	r20, r24
    5038:	50 e0       	ldi	r21, 0x00	; 0
    503a:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    503e:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    5042:	24 91       	lpm	r18, Z
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	21 50       	subi	r18, 0x01	; 1
    5048:	31 09       	sbc	r19, r1
    504a:	42 17       	cp	r20, r18
    504c:	53 07       	cpc	r21, r19
    504e:	0c f0       	brlt	.+2      	; 0x5052 <menu_ProcessMessage+0x330>
    5050:	a2 c0       	rjmp	.+324    	; 0x5196 <menu_ProcessMessage+0x474>
    5052:	8f 5f       	subi	r24, 0xFF	; 255
    5054:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    5058:	3e dc       	rcall	.-1924   	; 0x48d6 <menuCursorSetDataNibble>
    505a:	80 e0       	ldi	r24, 0x00	; 0
    505c:	9f c0       	rjmp	.+318    	; 0x519c <menu_ProcessMessage+0x47a>
    505e:	88 23       	and	r24, r24
    5060:	09 f4       	brne	.+2      	; 0x5064 <menu_ProcessMessage+0x342>
    5062:	9b c0       	rjmp	.+310    	; 0x519a <menu_ProcessMessage+0x478>
    5064:	81 50       	subi	r24, 0x01	; 1
    5066:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    506a:	35 dc       	rcall	.-1942   	; 0x48d6 <menuCursorSetDataNibble>
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	96 c0       	rjmp	.+300    	; 0x519c <menu_ProcessMessage+0x47a>
    5070:	61 e0       	ldi	r22, 0x01	; 1
    5072:	5b d9       	rcall	.-3402   	; 0x432a <nibbleChange>
    5074:	09 db       	rcall	.-2542   	; 0x4688 <nibbleToData>
    5076:	22 dc       	rcall	.-1980   	; 0x48bc <menuDisplayValue>
    5078:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    507c:	8a 30       	cpi	r24, 0x0A	; 10
    507e:	11 f0       	breq	.+4      	; 0x5084 <menu_ProcessMessage+0x362>
    5080:	8e 30       	cpi	r24, 0x0E	; 14
    5082:	89 f4       	brne	.+34     	; 0x50a6 <menu_ProcessMessage+0x384>
    5084:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    5088:	42 2f       	mov	r20, r18
    508a:	50 e0       	ldi	r21, 0x00	; 0
    508c:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    5090:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    5094:	84 91       	lpm	r24, Z
    5096:	90 e0       	ldi	r25, 0x00	; 0
    5098:	01 97       	sbiw	r24, 0x01	; 1
    509a:	48 17       	cp	r20, r24
    509c:	59 07       	cpc	r21, r25
    509e:	1c f4       	brge	.+6      	; 0x50a6 <menu_ProcessMessage+0x384>
    50a0:	2f 5f       	subi	r18, 0xFF	; 255
    50a2:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    50a6:	17 dc       	rcall	.-2002   	; 0x48d6 <menuCursorSetDataNibble>
    50a8:	80 e0       	ldi	r24, 0x00	; 0
    50aa:	78 c0       	rjmp	.+240    	; 0x519c <menu_ProcessMessage+0x47a>
    50ac:	6f ef       	ldi	r22, 0xFF	; 255
    50ae:	3d d9       	rcall	.-3462   	; 0x432a <nibbleChange>
    50b0:	eb da       	rcall	.-2602   	; 0x4688 <nibbleToData>
    50b2:	04 dc       	rcall	.-2040   	; 0x48bc <menuDisplayValue>
    50b4:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    50b8:	8a 30       	cpi	r24, 0x0A	; 10
    50ba:	11 f0       	breq	.+4      	; 0x50c0 <menu_ProcessMessage+0x39e>
    50bc:	8e 30       	cpi	r24, 0x0E	; 14
    50be:	89 f4       	brne	.+34     	; 0x50e2 <menu_ProcessMessage+0x3c0>
    50c0:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    50c4:	42 2f       	mov	r20, r18
    50c6:	50 e0       	ldi	r21, 0x00	; 0
    50c8:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    50cc:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    50d0:	84 91       	lpm	r24, Z
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	01 97       	sbiw	r24, 0x01	; 1
    50d6:	48 17       	cp	r20, r24
    50d8:	59 07       	cpc	r21, r25
    50da:	1c f4       	brge	.+6      	; 0x50e2 <menu_ProcessMessage+0x3c0>
    50dc:	2f 5f       	subi	r18, 0xFF	; 255
    50de:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    50e2:	f9 db       	rcall	.-2062   	; 0x48d6 <menuCursorSetDataNibble>
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	5a c0       	rjmp	.+180    	; 0x519c <menu_ProcessMessage+0x47a>
    50e8:	cf da       	rcall	.-2658   	; 0x4688 <nibbleToData>
    50ea:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    50ee:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    50f2:	c9 01       	movw	r24, r18
    50f4:	0e 96       	adiw	r24, 0x0e	; 14
    50f6:	fc 01       	movw	r30, r24
    50f8:	a5 91       	lpm	r26, Z+
    50fa:	b5 91       	lpm	r27, Z+
    50fc:	10 97       	sbiw	r26, 0x00	; 0
    50fe:	21 f1       	breq	.+72     	; 0x5148 <menu_ProcessMessage+0x426>
    5100:	0d 97       	sbiw	r24, 0x0d	; 13
    5102:	fc 01       	movw	r30, r24
    5104:	84 91       	lpm	r24, Z
    5106:	88 23       	and	r24, r24
    5108:	2c f4       	brge	.+10     	; 0x5114 <menu_ProcessMessage+0x3f2>
    510a:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    510e:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    5112:	02 c0       	rjmp	.+4      	; 0x5118 <menu_ProcessMessage+0x3f6>
    5114:	80 e0       	ldi	r24, 0x00	; 0
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	a8 0f       	add	r26, r24
    511a:	b9 1f       	adc	r27, r25
    511c:	f9 01       	movw	r30, r18
    511e:	84 91       	lpm	r24, Z
    5120:	8f 73       	andi	r24, 0x3F	; 63
    5122:	8b 30       	cpi	r24, 0x0B	; 11
    5124:	71 f4       	brne	.+28     	; 0x5142 <menu_ProcessMessage+0x420>
    5126:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    512a:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    512e:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    5132:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    5136:	4d 93       	st	X+, r20
    5138:	5d 93       	st	X+, r21
    513a:	6d 93       	st	X+, r22
    513c:	7c 93       	st	X, r23
    513e:	13 97       	sbiw	r26, 0x03	; 3
    5140:	03 c0       	rjmp	.+6      	; 0x5148 <menu_ProcessMessage+0x426>
    5142:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    5146:	8c 93       	st	X, r24
    5148:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    514c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5150:	72 96       	adiw	r30, 0x12	; 18
    5152:	05 90       	lpm	r0, Z+
    5154:	f4 91       	lpm	r31, Z
    5156:	e0 2d       	mov	r30, r0
    5158:	30 97       	sbiw	r30, 0x00	; 0
    515a:	11 f0       	breq	.+4      	; 0x5160 <menu_ProcessMessage+0x43e>
    515c:	8c 2f       	mov	r24, r28
    515e:	19 95       	eicall
    5160:	8f ef       	ldi	r24, 0xFF	; 255
    5162:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    5166:	47 dd       	rcall	.-1394   	; 0x4bf6 <menuCurrMenuToLCD>
    5168:	74 dd       	rcall	.-1304   	; 0x4c52 <menuItemChanged>
    516a:	80 e0       	ldi	r24, 0x00	; 0
    516c:	17 c0       	rjmp	.+46     	; 0x519c <menu_ProcessMessage+0x47a>
    516e:	80 e0       	ldi	r24, 0x00	; 0
    5170:	15 c0       	rjmp	.+42     	; 0x519c <menu_ProcessMessage+0x47a>
    5172:	80 e0       	ldi	r24, 0x00	; 0
    5174:	13 c0       	rjmp	.+38     	; 0x519c <menu_ProcessMessage+0x47a>
    5176:	80 e0       	ldi	r24, 0x00	; 0
    5178:	11 c0       	rjmp	.+34     	; 0x519c <menu_ProcessMessage+0x47a>
    517a:	80 e0       	ldi	r24, 0x00	; 0
    517c:	0f c0       	rjmp	.+30     	; 0x519c <menu_ProcessMessage+0x47a>
    517e:	80 e0       	ldi	r24, 0x00	; 0
    5180:	0d c0       	rjmp	.+26     	; 0x519c <menu_ProcessMessage+0x47a>
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	0b c0       	rjmp	.+22     	; 0x519c <menu_ProcessMessage+0x47a>
    5186:	80 e0       	ldi	r24, 0x00	; 0
    5188:	09 c0       	rjmp	.+18     	; 0x519c <menu_ProcessMessage+0x47a>
    518a:	80 e0       	ldi	r24, 0x00	; 0
    518c:	07 c0       	rjmp	.+14     	; 0x519c <menu_ProcessMessage+0x47a>
    518e:	80 e0       	ldi	r24, 0x00	; 0
    5190:	05 c0       	rjmp	.+10     	; 0x519c <menu_ProcessMessage+0x47a>
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	03 c0       	rjmp	.+6      	; 0x519c <menu_ProcessMessage+0x47a>
    5196:	80 e0       	ldi	r24, 0x00	; 0
    5198:	01 c0       	rjmp	.+2      	; 0x519c <menu_ProcessMessage+0x47a>
    519a:	80 e0       	ldi	r24, 0x00	; 0
    519c:	cf 91       	pop	r28
    519e:	08 95       	ret

000051a0 <displayMenuMessage_P>:
    51a0:	0f 93       	push	r16
    51a2:	1f 93       	push	r17
    51a4:	cf 93       	push	r28
    51a6:	df 93       	push	r29
    51a8:	ec 01       	movw	r28, r24
    51aa:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    51ae:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    51b2:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    51b6:	84 91       	lpm	r24, Z
    51b8:	8f 73       	andi	r24, 0x3F	; 63
    51ba:	81 30       	cpi	r24, 0x01	; 1
    51bc:	91 f4       	brne	.+36     	; 0x51e2 <displayMenuMessage_P+0x42>
    51be:	ce 01       	movw	r24, r28
    51c0:	0e 94 42 3c 	call	0x7884	; 0x7884 <get_StrLenP>
    51c4:	24 e1       	ldi	r18, 0x14	; 20
    51c6:	30 e0       	ldi	r19, 0x00	; 0
    51c8:	a9 01       	movw	r20, r18
    51ca:	48 1b       	sub	r20, r24
    51cc:	51 09       	sbc	r21, r1
    51ce:	ca 01       	movw	r24, r20
    51d0:	95 95       	asr	r25
    51d2:	87 95       	ror	r24
    51d4:	8c 5e       	subi	r24, 0xEC	; 236
    51d6:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    51da:	83 e0       	ldi	r24, 0x03	; 3
    51dc:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    51e0:	05 c0       	rjmp	.+10     	; 0x51ec <displayMenuMessage_P+0x4c>
    51e2:	84 e1       	ldi	r24, 0x14	; 20
    51e4:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    51e8:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    51ec:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    51f0:	ce 01       	movw	r24, r28
    51f2:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    51f6:	80 2f       	mov	r24, r16
    51f8:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    51fc:	9f b7       	in	r25, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	06 c0       	rjmp	.+12     	; 0x5210 <displayMenuMessage_P+0x70>
    5204:	ef e2       	ldi	r30, 0x2F	; 47
    5206:	f2 e0       	ldi	r31, 0x02	; 2
    5208:	84 e6       	ldi	r24, 0x64	; 100
    520a:	86 87       	std	Z+14, r24	; 0x0e
    520c:	17 86       	std	Z+15, r1	; 0x0f
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	81 11       	cpse	r24, r1
    5212:	f8 cf       	rjmp	.-16     	; 0x5204 <displayMenuMessage_P+0x64>
    5214:	9f bf       	out	0x3f, r25	; 63
    5216:	81 2f       	mov	r24, r17
    5218:	df 91       	pop	r29
    521a:	cf 91       	pop	r28
    521c:	1f 91       	pop	r17
    521e:	0f 91       	pop	r16
    5220:	08 95       	ret

00005222 <menu_OnEnterMidiPanic>:
    5222:	88 eb       	ldi	r24, 0xB8	; 184
    5224:	93 e0       	ldi	r25, 0x03	; 3
    5226:	bc df       	rcall	.-136    	; 0x51a0 <displayMenuMessage_P>
    5228:	0e 94 47 35 	call	0x6a8e	; 0x6a8e <midiSendAllNotesOff>
    522c:	a6 dc       	rcall	.-1716   	; 0x4b7a <menuCursorSetMenu>
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	08 95       	ret

00005232 <menu_ModuleTestExecute>:
    5232:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    5236:	8f 3f       	cpi	r24, 0xFF	; 255
    5238:	11 f0       	breq	.+4      	; 0x523e <menu_ModuleTestExecute+0xc>
    523a:	8d 3f       	cpi	r24, 0xFD	; 253
    523c:	71 f5       	brne	.+92     	; 0x529a <menu_ModuleTestExecute+0x68>
    523e:	0e 94 8f 3b 	call	0x771e	; 0x771e <lcd_cursoroff>
    5242:	a4 dc       	rcall	.-1720   	; 0x4b8c <menu_ClearDataDisp>
    5244:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    5248:	90 e0       	ldi	r25, 0x00	; 0
    524a:	e9 e4       	ldi	r30, 0x49	; 73
    524c:	f2 e0       	ldi	r31, 0x02	; 2
    524e:	07 c0       	rjmp	.+14     	; 0x525e <menu_ModuleTestExecute+0x2c>
    5250:	21 81       	ldd	r18, Z+1	; 0x01
    5252:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    5256:	82 2b       	or	r24, r18
    5258:	81 83       	std	Z+1, r24	; 0x01
    525a:	38 96       	adiw	r30, 0x08	; 8
    525c:	9f 5f       	subi	r25, 0xFF	; 255
    525e:	90 32       	cpi	r25, 0x20	; 32
    5260:	b8 f3       	brcs	.-18     	; 0x5250 <menu_ModuleTestExecute+0x1e>
    5262:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    5266:	8f 3f       	cpi	r24, 0xFF	; 255
    5268:	19 f4       	brne	.+6      	; 0x5270 <menu_ModuleTestExecute+0x3e>
    526a:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    526e:	5b c0       	rjmp	.+182    	; 0x5326 <menu_ModuleTestExecute+0xf4>
    5270:	82 eb       	ldi	r24, 0xB2	; 178
    5272:	93 e0       	ldi	r25, 0x03	; 3
    5274:	95 df       	rcall	.-214    	; 0x51a0 <displayMenuMessage_P>
    5276:	8e ef       	ldi	r24, 0xFE	; 254
    5278:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    527c:	9f b7       	in	r25, 0x3f	; 63
    527e:	f8 94       	cli
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	06 c0       	rjmp	.+12     	; 0x5290 <menu_ModuleTestExecute+0x5e>
    5284:	ef e2       	ldi	r30, 0x2F	; 47
    5286:	f2 e0       	ldi	r31, 0x02	; 2
    5288:	82 e0       	ldi	r24, 0x02	; 2
    528a:	84 87       	std	Z+12, r24	; 0x0c
    528c:	85 87       	std	Z+13, r24	; 0x0d
    528e:	80 e0       	ldi	r24, 0x00	; 0
    5290:	81 11       	cpse	r24, r1
    5292:	f8 cf       	rjmp	.-16     	; 0x5284 <menu_ModuleTestExecute+0x52>
    5294:	9f bf       	out	0x3f, r25	; 63
    5296:	71 dc       	rcall	.-1822   	; 0x4b7a <menuCursorSetMenu>
    5298:	46 c0       	rjmp	.+140    	; 0x5326 <menu_ModuleTestExecute+0xf4>
    529a:	8e 3f       	cpi	r24, 0xFE	; 254
    529c:	41 f4       	brne	.+16     	; 0x52ae <menu_ModuleTestExecute+0x7c>
    529e:	8f ef       	ldi	r24, 0xFF	; 255
    52a0:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    52a4:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    52a8:	0e 94 88 3b 	call	0x7710	; 0x7710 <lcd_cursosblink>
    52ac:	3c c0       	rjmp	.+120    	; 0x5326 <menu_ModuleTestExecute+0xf4>
    52ae:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    52b2:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    52b6:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    52ba:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    52be:	76 95       	lsr	r23
    52c0:	67 95       	ror	r22
    52c2:	57 95       	ror	r21
    52c4:	47 95       	ror	r20
    52c6:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    52ca:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    52ce:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    52d2:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    52d6:	e8 2f       	mov	r30, r24
    52d8:	f0 e0       	ldi	r31, 0x00	; 0
    52da:	df 01       	movw	r26, r30
    52dc:	aa 0f       	add	r26, r26
    52de:	bb 1f       	adc	r27, r27
    52e0:	aa 0f       	add	r26, r26
    52e2:	bb 1f       	adc	r27, r27
    52e4:	aa 0f       	add	r26, r26
    52e6:	bb 1f       	adc	r27, r27
    52e8:	a7 5b       	subi	r26, 0xB7	; 183
    52ea:	bd 4f       	sbci	r27, 0xFD	; 253
    52ec:	16 96       	adiw	r26, 0x06	; 6
    52ee:	2c 91       	ld	r18, X
    52f0:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    52f4:	29 23       	and	r18, r25
    52f6:	49 f4       	brne	.+18     	; 0x530a <menu_ModuleTestExecute+0xd8>
    52f8:	70 68       	ori	r23, 0x80	; 128
    52fa:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    52fe:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    5302:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    5306:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    530a:	ee 0f       	add	r30, r30
    530c:	ff 1f       	adc	r31, r31
    530e:	ee 0f       	add	r30, r30
    5310:	ff 1f       	adc	r31, r31
    5312:	ee 0f       	add	r30, r30
    5314:	ff 1f       	adc	r31, r31
    5316:	e7 5b       	subi	r30, 0xB7	; 183
    5318:	fd 4f       	sbci	r31, 0xFD	; 253
    531a:	21 81       	ldd	r18, Z+1	; 0x01
    531c:	92 2b       	or	r25, r18
    531e:	91 83       	std	Z+1, r25	; 0x01
    5320:	8f 5f       	subi	r24, 0xFF	; 255
    5322:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    5326:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    532a:	e0 32       	cpi	r30, 0x20	; 32
    532c:	28 f5       	brcc	.+74     	; 0x5378 <menu_ModuleTestExecute+0x146>
    532e:	f0 e0       	ldi	r31, 0x00	; 0
    5330:	ee 0f       	add	r30, r30
    5332:	ff 1f       	adc	r31, r31
    5334:	ee 0f       	add	r30, r30
    5336:	ff 1f       	adc	r31, r31
    5338:	ee 0f       	add	r30, r30
    533a:	ff 1f       	adc	r31, r31
    533c:	e7 5b       	subi	r30, 0xB7	; 183
    533e:	fd 4f       	sbci	r31, 0xFD	; 253
    5340:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    5344:	98 2f       	mov	r25, r24
    5346:	90 95       	com	r25
    5348:	81 81       	ldd	r24, Z+1	; 0x01
    534a:	89 23       	and	r24, r25
    534c:	81 83       	std	Z+1, r24	; 0x01
    534e:	8e e1       	ldi	r24, 0x1E	; 30
    5350:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    5354:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    5358:	0e 94 9a 39 	call	0x7334	; 0x7334 <lcd_dec2out>
    535c:	9f b7       	in	r25, 0x3f	; 63
    535e:	f8 94       	cli
    5360:	81 e0       	ldi	r24, 0x01	; 1
    5362:	06 c0       	rjmp	.+12     	; 0x5370 <menu_ModuleTestExecute+0x13e>
    5364:	ef e2       	ldi	r30, 0x2F	; 47
    5366:	f2 e0       	ldi	r31, 0x02	; 2
    5368:	88 e0       	ldi	r24, 0x08	; 8
    536a:	84 87       	std	Z+12, r24	; 0x0c
    536c:	15 86       	std	Z+13, r1	; 0x0d
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	81 11       	cpse	r24, r1
    5372:	f8 cf       	rjmp	.-16     	; 0x5364 <menu_ModuleTestExecute+0x132>
    5374:	9f bf       	out	0x3f, r25	; 63
    5376:	08 95       	ret
    5378:	e0 32       	cpi	r30, 0x20	; 32
    537a:	81 f5       	brne	.+96     	; 0x53dc <menu_ModuleTestExecute+0x1aa>
    537c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    5380:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    5384:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    5388:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    538c:	00 97       	sbiw	r24, 0x00	; 0
    538e:	a1 05       	cpc	r26, r1
    5390:	b1 05       	cpc	r27, r1
    5392:	21 f4       	brne	.+8      	; 0x539c <menu_ModuleTestExecute+0x16a>
    5394:	8e ea       	ldi	r24, 0xAE	; 174
    5396:	93 e0       	ldi	r25, 0x03	; 3
    5398:	03 df       	rcall	.-506    	; 0x51a0 <displayMenuMessage_P>
    539a:	0f c0       	rjmp	.+30     	; 0x53ba <menu_ModuleTestExecute+0x188>
    539c:	80 93 dd 18 	sts	0x18DD, r24	; 0x8018dd <editLong>
    53a0:	90 93 de 18 	sts	0x18DE, r25	; 0x8018de <editLong+0x1>
    53a4:	a0 93 df 18 	sts	0x18DF, r26	; 0x8018df <editLong+0x2>
    53a8:	b0 93 e0 18 	sts	0x18E0, r27	; 0x8018e0 <editLong+0x3>
    53ac:	8b ea       	ldi	r24, 0xAB	; 171
    53ae:	93 e0       	ldi	r25, 0x03	; 3
    53b0:	f7 de       	rcall	.-530    	; 0x51a0 <displayMenuMessage_P>
    53b2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    53b6:	0e 94 75 39 	call	0x72ea	; 0x72ea <lcd_longout>
    53ba:	8e ef       	ldi	r24, 0xFE	; 254
    53bc:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    53c0:	9f b7       	in	r25, 0x3f	; 63
    53c2:	f8 94       	cli
    53c4:	81 e0       	ldi	r24, 0x01	; 1
    53c6:	06 c0       	rjmp	.+12     	; 0x53d4 <menu_ModuleTestExecute+0x1a2>
    53c8:	ef e2       	ldi	r30, 0x2F	; 47
    53ca:	f2 e0       	ldi	r31, 0x02	; 2
    53cc:	82 e0       	ldi	r24, 0x02	; 2
    53ce:	84 87       	std	Z+12, r24	; 0x0c
    53d0:	85 87       	std	Z+13, r24	; 0x0d
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	81 11       	cpse	r24, r1
    53d6:	f8 cf       	rjmp	.-16     	; 0x53c8 <menu_ModuleTestExecute+0x196>
    53d8:	9f bf       	out	0x3f, r25	; 63
    53da:	cf cb       	rjmp	.-2146   	; 0x4b7a <menuCursorSetMenu>
    53dc:	08 95       	ret

000053de <menu_ModuleTestPattern>:
    53de:	81 e0       	ldi	r24, 0x01	; 1
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    53e6:	02 c0       	rjmp	.+4      	; 0x53ec <menu_ModuleTestPattern+0xe>
    53e8:	88 0f       	add	r24, r24
    53ea:	99 1f       	adc	r25, r25
    53ec:	0a 94       	dec	r0
    53ee:	e2 f7       	brpl	.-8      	; 0x53e8 <menu_ModuleTestPattern+0xa>
    53f0:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    53f4:	8f ef       	ldi	r24, 0xFF	; 255
    53f6:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    53fa:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    53fe:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    5402:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    5406:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    540a:	13 df       	rcall	.-474    	; 0x5232 <menu_ModuleTestExecute>
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	08 95       	ret

00005410 <menuLCDwriteOK>:
    5410:	8e ea       	ldi	r24, 0xAE	; 174
    5412:	93 e0       	ldi	r25, 0x03	; 3
    5414:	c5 ce       	rjmp	.-630    	; 0x51a0 <displayMenuMessage_P>
    5416:	08 95       	ret

00005418 <menuOnEnterEEBackup>:
    5418:	8e e1       	ldi	r24, 0x1E	; 30
    541a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    541e:	81 e9       	ldi	r24, 0x91	; 145
    5420:	93 e0       	ldi	r25, 0x03	; 3
    5422:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    5426:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <eeprom_Backup>
    542a:	f2 df       	rcall	.-28     	; 0x5410 <menuLCDwriteOK>
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	08 95       	ret

00005430 <menuOnEnterEERestore>:
    5430:	8e e1       	ldi	r24, 0x1E	; 30
    5432:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    5436:	81 e9       	ldi	r24, 0x91	; 145
    5438:	93 e0       	ldi	r25, 0x03	; 3
    543a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    543e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <eeprom_Restore>
    5442:	e6 df       	rcall	.-52     	; 0x5410 <menuLCDwriteOK>
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	08 95       	ret

00005448 <menuOnEnterEEUpdate>:
    5448:	81 e9       	ldi	r24, 0x91	; 145
    544a:	93 e0       	ldi	r25, 0x03	; 3
    544c:	a9 de       	rcall	.-686    	; 0x51a0 <displayMenuMessage_P>
    544e:	8e e1       	ldi	r24, 0x1E	; 30
    5450:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    5454:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <eeprom_UpdateALL>
    5458:	db df       	rcall	.-74     	; 0x5410 <menuLCDwriteOK>
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	08 95       	ret

0000545e <menudeleteMainMessage>:
    545e:	cf 93       	push	r28
    5460:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5464:	80 e4       	ldi	r24, 0x40	; 64
    5466:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    546a:	84 e1       	ldi	r24, 0x14	; 20
    546c:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
    5470:	8c 2f       	mov	r24, r28
    5472:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    5476:	cf 91       	pop	r28
    5478:	08 95       	ret

0000547a <menu_deleteMessage>:
    547a:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    547e:	83 30       	cpi	r24, 0x03	; 3
    5480:	19 f4       	brne	.+6      	; 0x5488 <menu_deleteMessage+0xe>
    5482:	7f db       	rcall	.-2306   	; 0x4b82 <menuClearExtraDisp>
    5484:	83 cb       	rjmp	.-2298   	; 0x4b8c <menu_ClearDataDisp>
    5486:	08 95       	ret
    5488:	81 11       	cpse	r24, r1
    548a:	02 c0       	rjmp	.+4      	; 0x5490 <menu_deleteMessage+0x16>
    548c:	7a cb       	rjmp	.-2316   	; 0x4b82 <menuClearExtraDisp>
    548e:	08 95       	ret
    5490:	81 30       	cpi	r24, 0x01	; 1
    5492:	11 f4       	brne	.+4      	; 0x5498 <menu_deleteMessage+0x1e>
    5494:	7b cb       	rjmp	.-2314   	; 0x4b8c <menu_ClearDataDisp>
    5496:	08 95       	ret
    5498:	e2 cf       	rjmp	.-60     	; 0x545e <menudeleteMainMessage>
    549a:	08 95       	ret

0000549c <menu_DisplayMainMessage_P>:
    549c:	0f 93       	push	r16
    549e:	1f 93       	push	r17
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	ec 01       	movw	r28, r24
    54a6:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    54aa:	0e 94 42 3c 	call	0x7884	; 0x7884 <get_StrLenP>
    54ae:	08 2f       	mov	r16, r24
    54b0:	80 e4       	ldi	r24, 0x40	; 64
    54b2:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    54b6:	84 e1       	ldi	r24, 0x14	; 20
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	80 1b       	sub	r24, r16
    54bc:	91 09       	sbc	r25, r1
    54be:	95 95       	asr	r25
    54c0:	87 95       	ror	r24
    54c2:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
    54c6:	ce 01       	movw	r24, r28
    54c8:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <lcd_puts_P>
    54cc:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    54d0:	84 e5       	ldi	r24, 0x54	; 84
    54d2:	89 1b       	sub	r24, r25
    54d4:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
    54d8:	81 2f       	mov	r24, r17
    54da:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    54de:	9f b7       	in	r25, 0x3f	; 63
    54e0:	f8 94       	cli
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	06 c0       	rjmp	.+12     	; 0x54f2 <menu_DisplayMainMessage_P+0x56>
    54e6:	ef e2       	ldi	r30, 0x2F	; 47
    54e8:	f2 e0       	ldi	r31, 0x02	; 2
    54ea:	84 e6       	ldi	r24, 0x64	; 100
    54ec:	86 87       	std	Z+14, r24	; 0x0e
    54ee:	17 86       	std	Z+15, r1	; 0x0f
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	81 11       	cpse	r24, r1
    54f4:	f8 cf       	rjmp	.-16     	; 0x54e6 <menu_DisplayMainMessage_P+0x4a>
    54f6:	9f bf       	out	0x3f, r25	; 63
    54f8:	82 e0       	ldi	r24, 0x02	; 2
    54fa:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    54fe:	df 91       	pop	r29
    5500:	cf 91       	pop	r28
    5502:	1f 91       	pop	r17
    5504:	0f 91       	pop	r16
    5506:	08 95       	ret

00005508 <menu_DisplayMainMessage>:
    5508:	0f 93       	push	r16
    550a:	1f 93       	push	r17
    550c:	cf 93       	push	r28
    550e:	df 93       	push	r29
    5510:	ec 01       	movw	r28, r24
    5512:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5516:	0e 94 4c 3c 	call	0x7898	; 0x7898 <get_StrLen>
    551a:	08 2f       	mov	r16, r24
    551c:	80 e4       	ldi	r24, 0x40	; 64
    551e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    5522:	84 e1       	ldi	r24, 0x14	; 20
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	80 1b       	sub	r24, r16
    5528:	91 09       	sbc	r25, r1
    552a:	95 95       	asr	r25
    552c:	87 95       	ror	r24
    552e:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
    5532:	ce 01       	movw	r24, r28
    5534:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <lcd_puts>
    5538:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    553c:	84 e5       	ldi	r24, 0x54	; 84
    553e:	89 1b       	sub	r24, r25
    5540:	0e 94 65 3b 	call	0x76ca	; 0x76ca <lcd_blank>
    5544:	81 2f       	mov	r24, r17
    5546:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    554a:	9f b7       	in	r25, 0x3f	; 63
    554c:	f8 94       	cli
    554e:	81 e0       	ldi	r24, 0x01	; 1
    5550:	06 c0       	rjmp	.+12     	; 0x555e <menu_DisplayMainMessage+0x56>
    5552:	ef e2       	ldi	r30, 0x2F	; 47
    5554:	f2 e0       	ldi	r31, 0x02	; 2
    5556:	84 e6       	ldi	r24, 0x64	; 100
    5558:	86 87       	std	Z+14, r24	; 0x0e
    555a:	17 86       	std	Z+15, r1	; 0x0f
    555c:	80 e0       	ldi	r24, 0x00	; 0
    555e:	81 11       	cpse	r24, r1
    5560:	f8 cf       	rjmp	.-16     	; 0x5552 <menu_DisplayMainMessage+0x4a>
    5562:	9f bf       	out	0x3f, r25	; 63
    5564:	82 e0       	ldi	r24, 0x02	; 2
    5566:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    556a:	df 91       	pop	r29
    556c:	cf 91       	pop	r28
    556e:	1f 91       	pop	r17
    5570:	0f 91       	pop	r16
    5572:	08 95       	ret

00005574 <menuDisplaySaveMessage>:
    5574:	cf 93       	push	r28
    5576:	c6 2f       	mov	r28, r22
    5578:	61 ee       	ldi	r22, 0xE1	; 225
    557a:	78 e1       	ldi	r23, 0x18	; 24
    557c:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <putChar_Dec>
    5580:	bc 01       	movw	r22, r24
    5582:	8e ec       	ldi	r24, 0xCE	; 206
    5584:	93 e0       	ldi	r25, 0x03	; 3
    5586:	0e 94 c4 3a 	call	0x7588	; 0x7588 <putString_P>
    558a:	6c 2f       	mov	r22, r28
    558c:	70 e0       	ldi	r23, 0x00	; 0
    558e:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <putString_Prog>
    5592:	81 ee       	ldi	r24, 0xE1	; 225
    5594:	98 e1       	ldi	r25, 0x18	; 24
    5596:	b8 df       	rcall	.-144    	; 0x5508 <menu_DisplayMainMessage>
    5598:	cf 91       	pop	r28
    559a:	08 95       	ret

0000559c <softKeyPrP>:
    559c:	cf 93       	push	r28
    559e:	88 23       	and	r24, r24
    55a0:	54 f4       	brge	.+20     	; 0x55b6 <softKeyPrP+0x1a>
    55a2:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    55a6:	cf 3f       	cpi	r28, 0xFF	; 255
    55a8:	d1 f0       	breq	.+52     	; 0x55de <softKeyPrP+0x42>
    55aa:	6f ef       	ldi	r22, 0xFF	; 255
    55ac:	8c 2f       	mov	r24, r28
    55ae:	74 d4       	rcall	.+2280   	; 0x5e98 <register_toProgram>
    55b0:	6c 2f       	mov	r22, r28
    55b2:	e0 df       	rcall	.-64     	; 0x5574 <menuDisplaySaveMessage>
    55b4:	14 c0       	rjmp	.+40     	; 0x55de <softKeyPrP+0x42>
    55b6:	88 23       	and	r24, r24
    55b8:	91 f0       	breq	.+36     	; 0x55de <softKeyPrP+0x42>
    55ba:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    55be:	8f 33       	cpi	r24, 0x3F	; 63
    55c0:	21 f4       	brne	.+8      	; 0x55ca <softKeyPrP+0x2e>
    55c2:	8f ef       	ldi	r24, 0xFF	; 255
    55c4:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    55c8:	03 c0       	rjmp	.+6      	; 0x55d0 <softKeyPrP+0x34>
    55ca:	8f 5f       	subi	r24, 0xFF	; 255
    55cc:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    55d0:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    55d4:	0e 94 55 1e 	call	0x3caa	; 0x3caa <send_progrChange_toMidiThru>
    55d8:	8f ef       	ldi	r24, 0xFF	; 255
    55da:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    55de:	80 e0       	ldi	r24, 0x00	; 0
    55e0:	cf 91       	pop	r28
    55e2:	08 95       	ret

000055e4 <softKeyPrSet>:
    55e4:	cf 93       	push	r28
    55e6:	88 23       	and	r24, r24
    55e8:	49 f0       	breq	.+18     	; 0x55fc <softKeyPrSet+0x18>
    55ea:	c0 91 f6 07 	lds	r28, 0x07F6	; 0x8007f6 <prog_Display>
    55ee:	cf 3f       	cpi	r28, 0xFF	; 255
    55f0:	29 f0       	breq	.+10     	; 0x55fc <softKeyPrSet+0x18>
    55f2:	6f ef       	ldi	r22, 0xFF	; 255
    55f4:	8c 2f       	mov	r24, r28
    55f6:	50 d4       	rcall	.+2208   	; 0x5e98 <register_toProgram>
    55f8:	6c 2f       	mov	r22, r28
    55fa:	bc df       	rcall	.-136    	; 0x5574 <menuDisplaySaveMessage>
    55fc:	80 e0       	ldi	r24, 0x00	; 0
    55fe:	cf 91       	pop	r28
    5600:	08 95       	ret

00005602 <menuDisplayLoadMessage>:
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	cf 93       	push	r28
    5608:	c8 2f       	mov	r28, r24
    560a:	70 e0       	ldi	r23, 0x00	; 0
    560c:	81 ee       	ldi	r24, 0xE1	; 225
    560e:	98 e1       	ldi	r25, 0x18	; 24
    5610:	0e 94 da 3a 	call	0x75b4	; 0x75b4 <putString_Prog>
    5614:	bc 01       	movw	r22, r24
    5616:	6f 5f       	subi	r22, 0xFF	; 255
    5618:	7f 4f       	sbci	r23, 0xFF	; 255
    561a:	2e e7       	ldi	r18, 0x7E	; 126
    561c:	fc 01       	movw	r30, r24
    561e:	20 83       	st	Z, r18
    5620:	8c 2f       	mov	r24, r28
    5622:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <putChar_Dec>
    5626:	bc 01       	movw	r22, r24
    5628:	89 ec       	ldi	r24, 0xC9	; 201
    562a:	93 e0       	ldi	r25, 0x03	; 3
    562c:	0e 94 c4 3a 	call	0x7588	; 0x7588 <putString_P>
    5630:	8c 01       	movw	r16, r24
    5632:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <module_WaitOutputInput2Cycles>
    5636:	84 e0       	ldi	r24, 0x04	; 4
    5638:	ca d3       	rcall	.+1940   	; 0x5dce <count_Registers>
    563a:	c8 2f       	mov	r28, r24
    563c:	88 23       	and	r24, r24
    563e:	49 f0       	breq	.+18     	; 0x5652 <menuDisplayLoadMessage+0x50>
    5640:	b8 01       	movw	r22, r16
    5642:	87 ec       	ldi	r24, 0xC7	; 199
    5644:	93 e0       	ldi	r25, 0x03	; 3
    5646:	0e 94 c4 3a 	call	0x7588	; 0x7588 <putString_P>
    564a:	bc 01       	movw	r22, r24
    564c:	8c 2f       	mov	r24, r28
    564e:	0e 94 d0 39 	call	0x73a0	; 0x73a0 <putChar_Dec>
    5652:	81 ee       	ldi	r24, 0xE1	; 225
    5654:	98 e1       	ldi	r25, 0x18	; 24
    5656:	58 df       	rcall	.-336    	; 0x5508 <menu_DisplayMainMessage>
    5658:	cf 91       	pop	r28
    565a:	1f 91       	pop	r17
    565c:	0f 91       	pop	r16
    565e:	08 95       	ret

00005660 <handle_programKey>:
    5660:	cf 93       	push	r28
    5662:	c6 2f       	mov	r28, r22
    5664:	88 23       	and	r24, r24
    5666:	34 f4       	brge	.+12     	; 0x5674 <handle_programKey+0x14>
    5668:	6f ef       	ldi	r22, 0xFF	; 255
    566a:	8c 2f       	mov	r24, r28
    566c:	15 d4       	rcall	.+2090   	; 0x5e98 <register_toProgram>
    566e:	6c 2f       	mov	r22, r28
    5670:	81 df       	rcall	.-254    	; 0x5574 <menuDisplaySaveMessage>
    5672:	09 c0       	rjmp	.+18     	; 0x5686 <handle_programKey+0x26>
    5674:	88 23       	and	r24, r24
    5676:	39 f0       	breq	.+14     	; 0x5686 <handle_programKey+0x26>
    5678:	86 2f       	mov	r24, r22
    567a:	a8 d4       	rcall	.+2384   	; 0x5fcc <program_toRegister>
    567c:	6c 2f       	mov	r22, r28
    567e:	c1 df       	rcall	.-126    	; 0x5602 <menuDisplayLoadMessage>
    5680:	8c 2f       	mov	r24, r28
    5682:	0e 94 55 1e 	call	0x3caa	; 0x3caa <send_progrChange_toMidiThru>
    5686:	8c 2f       	mov	r24, r28
    5688:	77 d4       	rcall	.+2286   	; 0x5f78 <midi_CountRegisterInProgram>
    568a:	88 23       	and	r24, r24
    568c:	31 f0       	breq	.+12     	; 0x569a <handle_programKey+0x3a>
    568e:	8c 2f       	mov	r24, r28
    5690:	38 d4       	rcall	.+2160   	; 0x5f02 <midi_RegisterMatchProgram>
    5692:	81 11       	cpse	r24, r1
    5694:	04 c0       	rjmp	.+8      	; 0x569e <handle_programKey+0x3e>
    5696:	81 e8       	ldi	r24, 0x81	; 129
    5698:	03 c0       	rjmp	.+6      	; 0x56a0 <handle_programKey+0x40>
    569a:	82 e8       	ldi	r24, 0x82	; 130
    569c:	01 c0       	rjmp	.+2      	; 0x56a0 <handle_programKey+0x40>
    569e:	82 e8       	ldi	r24, 0x82	; 130
    56a0:	cf 91       	pop	r28
    56a2:	08 95       	ret

000056a4 <softKeyK1A>:
    56a4:	60 e0       	ldi	r22, 0x00	; 0
    56a6:	dc cf       	rjmp	.-72     	; 0x5660 <handle_programKey>
    56a8:	08 95       	ret

000056aa <softKeyK2A>:
    56aa:	61 e0       	ldi	r22, 0x01	; 1
    56ac:	d9 cf       	rjmp	.-78     	; 0x5660 <handle_programKey>
    56ae:	08 95       	ret

000056b0 <softKeyK3A>:
    56b0:	62 e0       	ldi	r22, 0x02	; 2
    56b2:	d6 cf       	rjmp	.-84     	; 0x5660 <handle_programKey>
    56b4:	08 95       	ret

000056b6 <softKeyK4A>:
    56b6:	63 e0       	ldi	r22, 0x03	; 3
    56b8:	d3 cf       	rjmp	.-90     	; 0x5660 <handle_programKey>
    56ba:	08 95       	ret

000056bc <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    56bc:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    56be:	34 e0       	ldi	r19, 0x04	; 4
    56c0:	80 37       	cpi	r24, 0x70	; 112
    56c2:	93 07       	cpc	r25, r19
    56c4:	49 f0       	breq	.+18     	; 0x56d8 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    56c6:	34 e0       	ldi	r19, 0x04	; 4
    56c8:	80 37       	cpi	r24, 0x70	; 112
    56ca:	93 07       	cpc	r25, r19
    56cc:	38 f0       	brcs	.+14     	; 0x56dc <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    56ce:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    56d0:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    56d2:	a9 f7       	brne	.-22     	; 0x56be <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    56d4:	80 e0       	ldi	r24, 0x00	; 0
    56d6:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    56d8:	82 2f       	mov	r24, r18
    56da:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    56dc:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    56de:	08 95       	ret

000056e0 <init_SoftKeys>:

void init_SoftKeys(){
    56e0:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    56e2:	0e 94 94 0b 	call	0x1728	; 0x1728 <eeprom_ReadSoftkeys>
    56e6:	8f 3f       	cpi	r24, 0xFF	; 255
    56e8:	c9 f4       	brne	.+50     	; 0x571c <init_SoftKeys+0x3c>
    56ea:	0f c0       	rjmp	.+30     	; 0x570a <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    56ec:	82 2f       	mov	r24, r18
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	fc 01       	movw	r30, r24
    56f2:	ed 54       	subi	r30, 0x4D	; 77
    56f4:	fa 4f       	sbci	r31, 0xFA	; 250
    56f6:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    56f8:	88 0f       	add	r24, r24
    56fa:	99 1f       	adc	r25, r25
    56fc:	fc 01       	movw	r30, r24
    56fe:	e6 54       	subi	r30, 0x46	; 70
    5700:	fa 4f       	sbci	r31, 0xFA	; 250
    5702:	11 82       	std	Z+1, r1	; 0x01
    5704:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5706:	2f 5f       	subi	r18, 0xFF	; 255
    5708:	01 c0       	rjmp	.+2      	; 0x570c <init_SoftKeys+0x2c>
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	24 30       	cpi	r18, 0x04	; 4
    570e:	70 f3       	brcs	.-36     	; 0x56ec <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    5710:	40 e0       	ldi	r20, 0x00	; 0
    5712:	50 e0       	ldi	r21, 0x00	; 0
    5714:	67 e0       	ldi	r22, 0x07	; 7
    5716:	81 e0       	ldi	r24, 0x01	; 1
    5718:	0e 94 21 15 	call	0x2a42	; 0x2a42 <log_putError>
    571c:	c0 e0       	ldi	r28, 0x00	; 0
    571e:	25 c0       	rjmp	.+74     	; 0x576a <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    5720:	4c 2f       	mov	r20, r28
    5722:	50 e0       	ldi	r21, 0x00	; 0
    5724:	fa 01       	movw	r30, r20
    5726:	ed 54       	subi	r30, 0x4D	; 77
    5728:	fa 4f       	sbci	r31, 0xFA	; 250
    572a:	80 81       	ld	r24, Z
    572c:	8b 31       	cpi	r24, 0x1B	; 27
    572e:	70 f4       	brcc	.+28     	; 0x574c <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    5730:	24 e1       	ldi	r18, 0x14	; 20
    5732:	82 9f       	mul	r24, r18
    5734:	c0 01       	movw	r24, r0
    5736:	11 24       	eor	r1, r1
    5738:	80 59       	subi	r24, 0x90	; 144
    573a:	9b 4f       	sbci	r25, 0xFB	; 251
    573c:	44 0f       	add	r20, r20
    573e:	55 1f       	adc	r21, r21
    5740:	fa 01       	movw	r30, r20
    5742:	e6 54       	subi	r30, 0x46	; 70
    5744:	fa 4f       	sbci	r31, 0xFA	; 250
    5746:	91 83       	std	Z+1, r25	; 0x01
    5748:	80 83       	st	Z, r24
    574a:	0e c0       	rjmp	.+28     	; 0x5768 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    574c:	fa 01       	movw	r30, r20
    574e:	ee 0f       	add	r30, r30
    5750:	ff 1f       	adc	r31, r31
    5752:	e6 54       	subi	r30, 0x46	; 70
    5754:	fa 4f       	sbci	r31, 0xFA	; 250
    5756:	11 82       	std	Z+1, r1	; 0x01
    5758:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    575a:	4f 5f       	subi	r20, 0xFF	; 255
    575c:	5f 4f       	sbci	r21, 0xFF	; 255
    575e:	40 61       	ori	r20, 0x10	; 16
    5760:	67 e0       	ldi	r22, 0x07	; 7
    5762:	81 e0       	ldi	r24, 0x01	; 1
    5764:	0e 94 21 15 	call	0x2a42	; 0x2a42 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5768:	cf 5f       	subi	r28, 0xFF	; 255
    576a:	c4 30       	cpi	r28, 0x04	; 4
    576c:	c8 f2       	brcs	.-78     	; 0x5720 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    576e:	cf 91       	pop	r28
    5770:	08 95       	ret

00005772 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    5772:	cf 93       	push	r28
    5774:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5776:	64 30       	cpi	r22, 0x04	; 4
    5778:	28 f5       	brcc	.+74     	; 0x57c4 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    577a:	00 97       	sbiw	r24, 0x00	; 0
    577c:	b9 f0       	breq	.+46     	; 0x57ac <softKey_Set+0x3a>
    577e:	fc 01       	movw	r30, r24
    5780:	24 91       	lpm	r18, Z
    5782:	2f 73       	andi	r18, 0x3F	; 63
    5784:	21 30       	cpi	r18, 0x01	; 1
    5786:	91 f4       	brne	.+36     	; 0x57ac <softKey_Set+0x3a>
    5788:	31 96       	adiw	r30, 0x01	; 1
    578a:	24 91       	lpm	r18, Z
    578c:	24 ff       	sbrs	r18, 4
    578e:	0e c0       	rjmp	.+28     	; 0x57ac <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5790:	c6 2f       	mov	r28, r22
    5792:	d0 e0       	ldi	r29, 0x00	; 0
    5794:	fe 01       	movw	r30, r28
    5796:	ee 0f       	add	r30, r30
    5798:	ff 1f       	adc	r31, r31
    579a:	e6 54       	subi	r30, 0x46	; 70
    579c:	fa 4f       	sbci	r31, 0xFA	; 250
    579e:	91 83       	std	Z+1, r25	; 0x01
    57a0:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    57a2:	8c df       	rcall	.-232    	; 0x56bc <getSoftKeyIndex>
    57a4:	cd 54       	subi	r28, 0x4D	; 77
    57a6:	da 4f       	sbci	r29, 0xFA	; 250
    57a8:	88 83       	st	Y, r24
    57aa:	0c c0       	rjmp	.+24     	; 0x57c4 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    57ac:	70 e0       	ldi	r23, 0x00	; 0
    57ae:	fb 01       	movw	r30, r22
    57b0:	ee 0f       	add	r30, r30
    57b2:	ff 1f       	adc	r31, r31
    57b4:	e6 54       	subi	r30, 0x46	; 70
    57b6:	fa 4f       	sbci	r31, 0xFA	; 250
    57b8:	11 82       	std	Z+1, r1	; 0x01
    57ba:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    57bc:	fb 01       	movw	r30, r22
    57be:	ed 54       	subi	r30, 0x4D	; 77
    57c0:	fa 4f       	sbci	r31, 0xFA	; 250
    57c2:	10 82       	st	Z, r1
		}
	}
}
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	08 95       	ret

000057ca <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    57ca:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    57ce:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    57d2:	3e 96       	adiw	r30, 0x0e	; 14
    57d4:	65 91       	lpm	r22, Z+
    57d6:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    57d8:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    57dc:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    57e0:	c8 df       	rcall	.-112    	; 0x5772 <softKey_Set>
	eeprom_UpdateSoftkeys();
    57e2:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <eeprom_UpdateSoftkeys>
	return 0;
}
    57e6:	80 e0       	ldi	r24, 0x00	; 0
    57e8:	08 95       	ret

000057ea <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    57ea:	0f 93       	push	r16
    57ec:	1f 93       	push	r17
    57ee:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    57f0:	c0 e0       	ldi	r28, 0x00	; 0
    57f2:	32 c0       	rjmp	.+100    	; 0x5858 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    57f4:	0c 2f       	mov	r16, r28
    57f6:	10 e0       	ldi	r17, 0x00	; 0
    57f8:	f8 01       	movw	r30, r16
    57fa:	ee 0f       	add	r30, r30
    57fc:	ff 1f       	adc	r31, r31
    57fe:	e6 54       	subi	r30, 0x46	; 70
    5800:	fa 4f       	sbci	r31, 0xFA	; 250
    5802:	01 90       	ld	r0, Z+
    5804:	f0 81       	ld	r31, Z
    5806:	e0 2d       	mov	r30, r0
    5808:	30 97       	sbiw	r30, 0x00	; 0
    580a:	31 f0       	breq	.+12     	; 0x5818 <softKeys_toLCD+0x2e>
    580c:	3e 96       	adiw	r30, 0x0e	; 14
    580e:	65 91       	lpm	r22, Z+
    5810:	75 91       	lpm	r23, Z+
    5812:	61 15       	cp	r22, r1
    5814:	71 05       	cpc	r23, r1
    5816:	21 f4       	brne	.+8      	; 0x5820 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5818:	8c 2f       	mov	r24, r28
    581a:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <keylabel_clr>
    581e:	1b c0       	rjmp	.+54     	; 0x5856 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    5820:	8c 2f       	mov	r24, r28
    5822:	0e 94 b1 3b 	call	0x7762	; 0x7762 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    5826:	00 0f       	add	r16, r16
    5828:	11 1f       	adc	r17, r17
    582a:	f8 01       	movw	r30, r16
    582c:	e6 54       	subi	r30, 0x46	; 70
    582e:	fa 4f       	sbci	r31, 0xFA	; 250
    5830:	01 90       	ld	r0, Z+
    5832:	f0 81       	ld	r31, Z
    5834:	e0 2d       	mov	r30, r0
    5836:	70 96       	adiw	r30, 0x10	; 16
    5838:	05 90       	lpm	r0, Z+
    583a:	f4 91       	lpm	r31, Z
    583c:	e0 2d       	mov	r30, r0
    583e:	30 97       	sbiw	r30, 0x00	; 0
    5840:	51 f0       	breq	.+20     	; 0x5856 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	19 95       	eicall
    5846:	81 38       	cpi	r24, 0x81	; 129
    5848:	11 f4       	brne	.+4      	; 0x584e <softKeys_toLCD+0x64>
    584a:	6f ef       	ldi	r22, 0xFF	; 255
    584c:	01 c0       	rjmp	.+2      	; 0x5850 <softKeys_toLCD+0x66>
    584e:	60 e0       	ldi	r22, 0x00	; 0
    5850:	8c 2f       	mov	r24, r28
    5852:	0e 94 1f 3c 	call	0x783e	; 0x783e <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5856:	cf 5f       	subi	r28, 0xFF	; 255
    5858:	c4 30       	cpi	r28, 0x04	; 4
    585a:	60 f2       	brcs	.-104    	; 0x57f4 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    585c:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
}
    5860:	cf 91       	pop	r28
    5862:	1f 91       	pop	r17
    5864:	0f 91       	pop	r16
    5866:	08 95       	ret

00005868 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    5868:	82 30       	cpi	r24, 0x02	; 2
    586a:	49 f0       	breq	.+18     	; 0x587e <softKey_MessageKey_ToSoftKeyNr+0x16>
    586c:	18 f4       	brcc	.+6      	; 0x5874 <softKey_MessageKey_ToSoftKeyNr+0xc>
    586e:	81 30       	cpi	r24, 0x01	; 1
    5870:	51 f0       	breq	.+20     	; 0x5886 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    5872:	0b c0       	rjmp	.+22     	; 0x588a <softKey_MessageKey_ToSoftKeyNr+0x22>
    5874:	83 30       	cpi	r24, 0x03	; 3
    5876:	59 f0       	breq	.+22     	; 0x588e <softKey_MessageKey_ToSoftKeyNr+0x26>
    5878:	84 30       	cpi	r24, 0x04	; 4
    587a:	19 f0       	breq	.+6      	; 0x5882 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    587c:	06 c0       	rjmp	.+12     	; 0x588a <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    587e:	80 e0       	ldi	r24, 0x00	; 0
    5880:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5882:	82 e0       	ldi	r24, 0x02	; 2
    5884:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5886:	83 e0       	ldi	r24, 0x03	; 3
    5888:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    588a:	8f ef       	ldi	r24, 0xFF	; 255
    588c:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    588e:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5890:	08 95       	ret

00005892 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5892:	0f 93       	push	r16
    5894:	1f 93       	push	r17
    5896:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5898:	84 30       	cpi	r24, 0x04	; 4
    589a:	d0 f5       	brcc	.+116    	; 0x5910 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    589c:	e8 2f       	mov	r30, r24
    589e:	f0 e0       	ldi	r31, 0x00	; 0
    58a0:	ee 0f       	add	r30, r30
    58a2:	ff 1f       	adc	r31, r31
    58a4:	e6 54       	subi	r30, 0x46	; 70
    58a6:	fa 4f       	sbci	r31, 0xFA	; 250
    58a8:	00 81       	ld	r16, Z
    58aa:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    58ac:	01 15       	cp	r16, r1
    58ae:	11 05       	cpc	r17, r1
    58b0:	89 f1       	breq	.+98     	; 0x5914 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    58b2:	f8 01       	movw	r30, r16
    58b4:	94 91       	lpm	r25, Z
    58b6:	9f 73       	andi	r25, 0x3F	; 63
    58b8:	91 30       	cpi	r25, 0x01	; 1
    58ba:	71 f5       	brne	.+92     	; 0x5918 <softKey_Execute+0x86>
    58bc:	31 96       	adiw	r30, 0x01	; 1
    58be:	94 91       	lpm	r25, Z
    58c0:	94 ff       	sbrs	r25, 4
    58c2:	2c c0       	rjmp	.+88     	; 0x591c <softKey_Execute+0x8a>
    58c4:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    58c6:	3f 96       	adiw	r30, 0x0f	; 15
    58c8:	05 90       	lpm	r0, Z+
    58ca:	f4 91       	lpm	r31, Z
    58cc:	e0 2d       	mov	r30, r0
    58ce:	30 97       	sbiw	r30, 0x00	; 0
    58d0:	89 f0       	breq	.+34     	; 0x58f4 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    58d2:	86 2f       	mov	r24, r22
    58d4:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    58d6:	82 38       	cpi	r24, 0x82	; 130
    58d8:	29 f4       	brne	.+10     	; 0x58e4 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    58da:	60 e0       	ldi	r22, 0x00	; 0
    58dc:	8c 2f       	mov	r24, r28
    58de:	0e 94 1f 3c 	call	0x783e	; 0x783e <keylabel_statcheck>
    58e2:	06 c0       	rjmp	.+12     	; 0x58f0 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    58e4:	81 38       	cpi	r24, 0x81	; 129
    58e6:	21 f4       	brne	.+8      	; 0x58f0 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    58e8:	6f ef       	ldi	r22, 0xFF	; 255
    58ea:	8c 2f       	mov	r24, r28
    58ec:	0e 94 1f 3c 	call	0x783e	; 0x783e <keylabel_statcheck>
					}
					keylabel_toLCD();
    58f0:	0e 94 00 3c 	call	0x7800	; 0x7800 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    58f4:	f8 01       	movw	r30, r16
    58f6:	3c 96       	adiw	r30, 0x0c	; 12
    58f8:	85 91       	lpm	r24, Z+
    58fa:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    58fc:	00 97       	sbiw	r24, 0x00	; 0
    58fe:	81 f0       	breq	.+32     	; 0x5920 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5900:	b8 01       	movw	r22, r16
    5902:	6e 5f       	subi	r22, 0xFE	; 254
    5904:	7f 4f       	sbci	r23, 0xFF	; 255
    5906:	0e 94 c5 1e 	call	0x3d8a	; 0x3d8a <menu_Init>
					menu_InitLCD(); //display menu
    590a:	04 da       	rcall	.-3064   	; 0x4d14 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    590c:	80 e0       	ldi	r24, 0x00	; 0
    590e:	09 c0       	rjmp	.+18     	; 0x5922 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5910:	8f ef       	ldi	r24, 0xFF	; 255
    5912:	07 c0       	rjmp	.+14     	; 0x5922 <softKey_Execute+0x90>
    5914:	8f ef       	ldi	r24, 0xFF	; 255
    5916:	05 c0       	rjmp	.+10     	; 0x5922 <softKey_Execute+0x90>
    5918:	8f ef       	ldi	r24, 0xFF	; 255
    591a:	03 c0       	rjmp	.+6      	; 0x5922 <softKey_Execute+0x90>
    591c:	8f ef       	ldi	r24, 0xFF	; 255
    591e:	01 c0       	rjmp	.+2      	; 0x5922 <softKey_Execute+0x90>
    5920:	8f ef       	ldi	r24, 0xFF	; 255
}
    5922:	cf 91       	pop	r28
    5924:	1f 91       	pop	r17
    5926:	0f 91       	pop	r16
    5928:	08 95       	ret

0000592a <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    592a:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    592c:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    5930:	8c e0       	ldi	r24, 0x0C	; 12
    5932:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    5936:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    593a:	84 ff       	sbrs	r24, 4
    593c:	02 c0       	rjmp	.+4      	; 0x5942 <menu_showPowerState+0x18>
    593e:	80 e2       	ldi	r24, 0x20	; 32
    5940:	01 c0       	rjmp	.+2      	; 0x5944 <menu_showPowerState+0x1a>
    5942:	89 e0       	ldi	r24, 0x09	; 9
    5944:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
	lcd_goto(saveCursor);
    5948:	8c 2f       	mov	r24, r28
    594a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>

    594e:	cf 91       	pop	r28
    5950:	08 95       	ret

00005952 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    5952:	85 b1       	in	r24, 0x05	; 5
    5954:	80 64       	ori	r24, 0x40	; 64
    5956:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    5958:	83 e1       	ldi	r24, 0x13	; 19
    595a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    595e:	e5 df       	rcall	.-54     	; 0x592a <menu_showPowerState>
	return 0;
}
    5960:	80 e0       	ldi	r24, 0x00	; 0
    5962:	08 95       	ret

00005964 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    5964:	85 b1       	in	r24, 0x05	; 5
    5966:	8f 7b       	andi	r24, 0xBF	; 191
    5968:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    596a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    596e:	dd df       	rcall	.-70     	; 0x592a <menu_showPowerState>
	return 0;
}
    5970:	80 e0       	ldi	r24, 0x00	; 0
    5972:	08 95       	ret

00005974 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    5974:	85 b1       	in	r24, 0x05	; 5
    5976:	8f 7b       	andi	r24, 0xBF	; 191
    5978:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    597a:	81 e0       	ldi	r24, 0x01	; 1
    597c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5980:	d4 df       	rcall	.-88     	; 0x592a <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5982:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5984:	f8 94       	cli
    5986:	81 e0       	ldi	r24, 0x01	; 1
    5988:	06 c0       	rjmp	.+12     	; 0x5996 <menuOnEnterPwrRest+0x22>
    598a:	ef e2       	ldi	r30, 0x2F	; 47
    598c:	f2 e0       	ldi	r31, 0x02	; 2
    598e:	88 e2       	ldi	r24, 0x28	; 40
    5990:	82 83       	std	Z+2, r24	; 0x02
    5992:	13 82       	std	Z+3, r1	; 0x03
    5994:	80 e0       	ldi	r24, 0x00	; 0
    5996:	81 11       	cpse	r24, r1
    5998:	f8 cf       	rjmp	.-16     	; 0x598a <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    599a:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    599c:	08 95       	ret

0000599e <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    599e:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    59a2:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    59a6:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    59aa:	08 95       	ret

000059ac <message_push>:
    59ac:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    59b0:	e9 2f       	mov	r30, r25
    59b2:	f0 e0       	ldi	r31, 0x00	; 0
    59b4:	ed 52       	subi	r30, 0x2D	; 45
    59b6:	f8 4f       	sbci	r31, 0xF8	; 248
    59b8:	80 83       	st	Z, r24
    59ba:	9f 5f       	subi	r25, 0xFF	; 255
    59bc:	9f 71       	andi	r25, 0x1F	; 31
    59be:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    59c2:	98 13       	cpse	r25, r24
    59c4:	04 c0       	rjmp	.+8      	; 0x59ce <message_push+0x22>
    59c6:	8f ef       	ldi	r24, 0xFF	; 255
    59c8:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    59cc:	08 95       	ret
    59ce:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    59d2:	08 95       	ret

000059d4 <message_get>:
    59d4:	4f b7       	in	r20, 0x3f	; 63
    59d6:	f8 94       	cli
    59d8:	21 e0       	ldi	r18, 0x01	; 1
    59da:	11 c0       	rjmp	.+34     	; 0x59fe <message_get+0x2a>
    59dc:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    59e0:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    59e4:	8f ef       	ldi	r24, 0xFF	; 255
    59e6:	20 e0       	ldi	r18, 0x00	; 0
    59e8:	93 17       	cp	r25, r19
    59ea:	49 f0       	breq	.+18     	; 0x59fe <message_get+0x2a>
    59ec:	e9 2f       	mov	r30, r25
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	ed 52       	subi	r30, 0x2D	; 45
    59f2:	f8 4f       	sbci	r31, 0xF8	; 248
    59f4:	80 81       	ld	r24, Z
    59f6:	9f 5f       	subi	r25, 0xFF	; 255
    59f8:	9f 71       	andi	r25, 0x1F	; 31
    59fa:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    59fe:	21 11       	cpse	r18, r1
    5a00:	ed cf       	rjmp	.-38     	; 0x59dc <message_get+0x8>
    5a02:	4f bf       	out	0x3f, r20	; 63
    5a04:	08 95       	ret

00005a06 <message_status>:
    5a06:	4f b7       	in	r20, 0x3f	; 63
    5a08:	f8 94       	cli
    5a0a:	91 e0       	ldi	r25, 0x01	; 1
    5a0c:	08 c0       	rjmp	.+16     	; 0x5a1e <message_status+0x18>
    5a0e:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    5a12:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    5a16:	90 e0       	ldi	r25, 0x00	; 0
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	32 17       	cp	r19, r18
    5a1c:	11 f0       	breq	.+4      	; 0x5a22 <message_status+0x1c>
    5a1e:	8f ef       	ldi	r24, 0xFF	; 255
    5a20:	01 c0       	rjmp	.+2      	; 0x5a24 <message_status+0x1e>
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	91 11       	cpse	r25, r1
    5a26:	f3 cf       	rjmp	.-26     	; 0x5a0e <message_status+0x8>
    5a28:	4f bf       	out	0x3f, r20	; 63
    5a2a:	08 95       	ret

00005a2c <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    5a2c:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    5a2e:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    5a32:	99 23       	and	r25, r25
    5a34:	e1 f0       	breq	.+56     	; 0x5a6e <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    5a36:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5a3a:	21 e0       	ldi	r18, 0x01	; 1
    5a3c:	29 0f       	add	r18, r25
    5a3e:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    5a42:	e9 2f       	mov	r30, r25
    5a44:	f0 e0       	ldi	r31, 0x00	; 0
    5a46:	ee 0f       	add	r30, r30
    5a48:	ff 1f       	adc	r31, r31
    5a4a:	e0 53       	subi	r30, 0x30	; 48
    5a4c:	fa 4f       	sbci	r31, 0xFA	; 250
    5a4e:	51 83       	std	Z+1, r21	; 0x01
    5a50:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    5a52:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5a56:	28 13       	cpse	r18, r24
    5a58:	0a c0       	rjmp	.+20     	; 0x5a6e <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    5a5a:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    5a5e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a60:	19 f4       	brne	.+6      	; 0x5a68 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    5a62:	8f ef       	ldi	r24, 0xFF	; 255
    5a64:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    5a68:	8f ef       	ldi	r24, 0xFF	; 255
    5a6a:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    5a6e:	08 95       	ret

00005a70 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5a70:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5a74:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5a78:	e8 13       	cpse	r30, r24
    5a7a:	03 c0       	rjmp	.+6      	; 0x5a82 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    5a7c:	8f ef       	ldi	r24, 0xFF	; 255
    5a7e:	9f ef       	ldi	r25, 0xFF	; 255
    5a80:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	8e 0f       	add	r24, r30
    5a86:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    5a8a:	f0 e0       	ldi	r31, 0x00	; 0
    5a8c:	ee 0f       	add	r30, r30
    5a8e:	ff 1f       	adc	r31, r31
    5a90:	e0 53       	subi	r30, 0x30	; 48
    5a92:	fa 4f       	sbci	r31, 0xFA	; 250
    5a94:	80 81       	ld	r24, Z
    5a96:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5a98:	08 95       	ret

00005a9a <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    5a9a:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    5a9e:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5aa2:	98 13       	cpse	r25, r24
    5aa4:	02 c0       	rjmp	.+4      	; 0x5aaa <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5aa6:	80 e0       	ldi	r24, 0x00	; 0
    5aa8:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    5aaa:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    5aac:	08 95       	ret

00005aae <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    5aae:	80 e0       	ldi	r24, 0x00	; 0
    5ab0:	e1 e1       	ldi	r30, 0x11	; 17
    5ab2:	f8 e0       	ldi	r31, 0x08	; 8
    5ab4:	03 c0       	rjmp	.+6      	; 0x5abc <midi_CouplerReset+0xe>
    5ab6:	10 82       	st	Z, r1
    5ab8:	8f 5f       	subi	r24, 0xFF	; 255
    5aba:	31 96       	adiw	r30, 0x01	; 1
    5abc:	8c 30       	cpi	r24, 0x0C	; 12
    5abe:	d8 f3       	brcs	.-10     	; 0x5ab6 <midi_CouplerReset+0x8>
    5ac0:	08 95       	ret

00005ac2 <init_Midi>:
    5ac2:	f5 df       	rcall	.-22     	; 0x5aae <midi_CouplerReset>
    5ac4:	8f ef       	ldi	r24, 0xFF	; 255
    5ac6:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
    5aca:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <prog_UpdDisplay>
    5ace:	08 95       	ret

00005ad0 <set_Coupler>:
    5ad0:	8c 30       	cpi	r24, 0x0C	; 12
    5ad2:	e8 f4       	brcc	.+58     	; 0x5b0e <set_Coupler+0x3e>
    5ad4:	e8 2f       	mov	r30, r24
    5ad6:	f0 e0       	ldi	r31, 0x00	; 0
    5ad8:	ef 5e       	subi	r30, 0xEF	; 239
    5ada:	f7 4f       	sbci	r31, 0xF7	; 247
    5adc:	9f ef       	ldi	r25, 0xFF	; 255
    5ade:	90 83       	st	Z, r25
    5ae0:	86 30       	cpi	r24, 0x06	; 6
    5ae2:	10 f0       	brcs	.+4      	; 0x5ae8 <set_Coupler+0x18>
    5ae4:	86 50       	subi	r24, 0x06	; 6
    5ae6:	01 c0       	rjmp	.+2      	; 0x5aea <set_Coupler+0x1a>
    5ae8:	8a 5f       	subi	r24, 0xFA	; 250
    5aea:	e8 2f       	mov	r30, r24
    5aec:	f0 e0       	ldi	r31, 0x00	; 0
    5aee:	df 01       	movw	r26, r30
    5af0:	af 5e       	subi	r26, 0xEF	; 239
    5af2:	b7 4f       	sbci	r27, 0xF7	; 247
    5af4:	8c 91       	ld	r24, X
    5af6:	88 23       	and	r24, r24
    5af8:	59 f0       	breq	.+22     	; 0x5b10 <set_Coupler+0x40>
    5afa:	df 01       	movw	r26, r30
    5afc:	af 5e       	subi	r26, 0xEF	; 239
    5afe:	b7 4f       	sbci	r27, 0xF7	; 247
    5b00:	1c 92       	st	X, r1
    5b02:	ee 0f       	add	r30, r30
    5b04:	ff 1f       	adc	r31, r31
    5b06:	e8 59       	subi	r30, 0x98	; 152
    5b08:	fd 4e       	sbci	r31, 0xED	; 237
    5b0a:	84 91       	lpm	r24, Z
    5b0c:	08 95       	ret
    5b0e:	80 e0       	ldi	r24, 0x00	; 0
    5b10:	08 95       	ret

00005b12 <getAllCouplers>:
    5b12:	80 e0       	ldi	r24, 0x00	; 0
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	4b e0       	ldi	r20, 0x0B	; 11
    5b18:	01 c0       	rjmp	.+2      	; 0x5b1c <getAllCouplers+0xa>
    5b1a:	42 2f       	mov	r20, r18
    5b1c:	28 2f       	mov	r18, r24
    5b1e:	39 2f       	mov	r19, r25
    5b20:	22 0f       	add	r18, r18
    5b22:	33 1f       	adc	r19, r19
    5b24:	82 2f       	mov	r24, r18
    5b26:	93 2f       	mov	r25, r19
    5b28:	e4 2f       	mov	r30, r20
    5b2a:	f0 e0       	ldi	r31, 0x00	; 0
    5b2c:	ef 5e       	subi	r30, 0xEF	; 239
    5b2e:	f7 4f       	sbci	r31, 0xF7	; 247
    5b30:	50 81       	ld	r21, Z
    5b32:	5f 3f       	cpi	r21, 0xFF	; 255
    5b34:	09 f4       	brne	.+2      	; 0x5b38 <getAllCouplers+0x26>
    5b36:	81 60       	ori	r24, 0x01	; 1
    5b38:	2f ef       	ldi	r18, 0xFF	; 255
    5b3a:	24 0f       	add	r18, r20
    5b3c:	41 11       	cpse	r20, r1
    5b3e:	ed cf       	rjmp	.-38     	; 0x5b1a <getAllCouplers+0x8>
    5b40:	08 95       	ret

00005b42 <setAllCouplers>:
    5b42:	40 e0       	ldi	r20, 0x00	; 0
    5b44:	80 ff       	sbrs	r24, 0
    5b46:	07 c0       	rjmp	.+14     	; 0x5b56 <setAllCouplers+0x14>
    5b48:	e4 2f       	mov	r30, r20
    5b4a:	f0 e0       	ldi	r31, 0x00	; 0
    5b4c:	ef 5e       	subi	r30, 0xEF	; 239
    5b4e:	f7 4f       	sbci	r31, 0xF7	; 247
    5b50:	2f ef       	ldi	r18, 0xFF	; 255
    5b52:	20 83       	st	Z, r18
    5b54:	05 c0       	rjmp	.+10     	; 0x5b60 <setAllCouplers+0x1e>
    5b56:	e4 2f       	mov	r30, r20
    5b58:	f0 e0       	ldi	r31, 0x00	; 0
    5b5a:	ef 5e       	subi	r30, 0xEF	; 239
    5b5c:	f7 4f       	sbci	r31, 0xF7	; 247
    5b5e:	10 82       	st	Z, r1
    5b60:	28 2f       	mov	r18, r24
    5b62:	39 2f       	mov	r19, r25
    5b64:	36 95       	lsr	r19
    5b66:	27 95       	ror	r18
    5b68:	82 2f       	mov	r24, r18
    5b6a:	93 2f       	mov	r25, r19
    5b6c:	4f 5f       	subi	r20, 0xFF	; 255
    5b6e:	4c 30       	cpi	r20, 0x0C	; 12
    5b70:	48 f3       	brcs	.-46     	; 0x5b44 <setAllCouplers+0x2>
    5b72:	08 95       	ret

00005b74 <midiAllReset>:
    5b74:	80 e8       	ldi	r24, 0x80	; 128
    5b76:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    5b7a:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <init_Pipe>
    5b7e:	08 95       	ret

00005b80 <registers_CalcCount>:
    5b80:	20 e0       	ldi	r18, 0x00	; 0
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	12 c0       	rjmp	.+36     	; 0x5baa <registers_CalcCount+0x2a>
    5b86:	82 2f       	mov	r24, r18
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	fc 01       	movw	r30, r24
    5b8c:	ee 0f       	add	r30, r30
    5b8e:	ff 1f       	adc	r31, r31
    5b90:	8e 0f       	add	r24, r30
    5b92:	9f 1f       	adc	r25, r31
    5b94:	fc 01       	movw	r30, r24
    5b96:	e9 50       	subi	r30, 0x09	; 9
    5b98:	f8 4f       	sbci	r31, 0xF8	; 248
    5b9a:	81 81       	ldd	r24, Z+1	; 0x01
    5b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    5b9e:	21 f0       	breq	.+8      	; 0x5ba8 <registers_CalcCount+0x28>
    5ba0:	83 17       	cp	r24, r19
    5ba2:	10 f0       	brcs	.+4      	; 0x5ba8 <registers_CalcCount+0x28>
    5ba4:	31 e0       	ldi	r19, 0x01	; 1
    5ba6:	38 0f       	add	r19, r24
    5ba8:	2f 5f       	subi	r18, 0xFF	; 255
    5baa:	28 30       	cpi	r18, 0x08	; 8
    5bac:	60 f3       	brcs	.-40     	; 0x5b86 <registers_CalcCount+0x6>
    5bae:	30 93 10 08 	sts	0x0810, r19	; 0x800810 <registerCount>
    5bb2:	08 95       	ret

00005bb4 <init_Registers>:
    5bb4:	8f ef       	ldi	r24, 0xFF	; 255
    5bb6:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
    5bba:	20 e0       	ldi	r18, 0x00	; 0
    5bbc:	0e c0       	rjmp	.+28     	; 0x5bda <init_Registers+0x26>
    5bbe:	82 2f       	mov	r24, r18
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	fc 01       	movw	r30, r24
    5bc4:	ee 0f       	add	r30, r30
    5bc6:	ff 1f       	adc	r31, r31
    5bc8:	e8 0f       	add	r30, r24
    5bca:	f9 1f       	adc	r31, r25
    5bcc:	e9 50       	subi	r30, 0x09	; 9
    5bce:	f8 4f       	sbci	r31, 0xF8	; 248
    5bd0:	8f ef       	ldi	r24, 0xFF	; 255
    5bd2:	80 83       	st	Z, r24
    5bd4:	81 83       	std	Z+1, r24	; 0x01
    5bd6:	12 82       	std	Z+2, r1	; 0x02
    5bd8:	2f 5f       	subi	r18, 0xFF	; 255
    5bda:	28 30       	cpi	r18, 0x08	; 8
    5bdc:	80 f3       	brcs	.-32     	; 0x5bbe <init_Registers+0xa>
    5bde:	0e 94 38 0b 	call	0x1670	; 0x1670 <eeprom_ReadReg>
    5be2:	8f 3f       	cpi	r24, 0xFF	; 255
    5be4:	49 f4       	brne	.+18     	; 0x5bf8 <init_Registers+0x44>
    5be6:	10 92 10 08 	sts	0x0810, r1	; 0x800810 <registerCount>
    5bea:	40 e0       	ldi	r20, 0x00	; 0
    5bec:	50 e0       	ldi	r21, 0x00	; 0
    5bee:	65 e0       	ldi	r22, 0x05	; 5
    5bf0:	81 e0       	ldi	r24, 0x01	; 1
    5bf2:	0e 94 21 15 	call	0x2a42	; 0x2a42 <log_putError>
    5bf6:	01 c0       	rjmp	.+2      	; 0x5bfa <init_Registers+0x46>
    5bf8:	c3 df       	rcall	.-122    	; 0x5b80 <registers_CalcCount>
    5bfa:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <eeprom_ReadProg>
    5bfe:	8f 3f       	cpi	r24, 0xFF	; 255
    5c00:	a1 f5       	brne	.+104    	; 0x5c6a <init_Registers+0xb6>
    5c02:	2a c0       	rjmp	.+84     	; 0x5c58 <init_Registers+0xa4>
    5c04:	83 2f       	mov	r24, r19
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	fc 01       	movw	r30, r24
    5c0a:	ee 0f       	add	r30, r30
    5c0c:	ff 1f       	adc	r31, r31
    5c0e:	88 0f       	add	r24, r24
    5c10:	99 1f       	adc	r25, r25
    5c12:	88 0f       	add	r24, r24
    5c14:	99 1f       	adc	r25, r25
    5c16:	88 0f       	add	r24, r24
    5c18:	99 1f       	adc	r25, r25
    5c1a:	e8 0f       	add	r30, r24
    5c1c:	f9 1f       	adc	r31, r25
    5c1e:	ec 59       	subi	r30, 0x9C	; 156
    5c20:	f6 4f       	sbci	r31, 0xF6	; 246
    5c22:	e2 0f       	add	r30, r18
    5c24:	f1 1d       	adc	r31, r1
    5c26:	10 82       	st	Z, r1
    5c28:	2f 5f       	subi	r18, 0xFF	; 255
    5c2a:	01 c0       	rjmp	.+2      	; 0x5c2e <init_Registers+0x7a>
    5c2c:	20 e0       	ldi	r18, 0x00	; 0
    5c2e:	28 30       	cpi	r18, 0x08	; 8
    5c30:	48 f3       	brcs	.-46     	; 0x5c04 <init_Registers+0x50>
    5c32:	83 2f       	mov	r24, r19
    5c34:	90 e0       	ldi	r25, 0x00	; 0
    5c36:	fc 01       	movw	r30, r24
    5c38:	ee 0f       	add	r30, r30
    5c3a:	ff 1f       	adc	r31, r31
    5c3c:	88 0f       	add	r24, r24
    5c3e:	99 1f       	adc	r25, r25
    5c40:	88 0f       	add	r24, r24
    5c42:	99 1f       	adc	r25, r25
    5c44:	88 0f       	add	r24, r24
    5c46:	99 1f       	adc	r25, r25
    5c48:	e8 0f       	add	r30, r24
    5c4a:	f9 1f       	adc	r31, r25
    5c4c:	ec 59       	subi	r30, 0x9C	; 156
    5c4e:	f6 4f       	sbci	r31, 0xF6	; 246
    5c50:	11 86       	std	Z+9, r1	; 0x09
    5c52:	10 86       	std	Z+8, r1	; 0x08
    5c54:	3f 5f       	subi	r19, 0xFF	; 255
    5c56:	01 c0       	rjmp	.+2      	; 0x5c5a <init_Registers+0xa6>
    5c58:	30 e0       	ldi	r19, 0x00	; 0
    5c5a:	30 34       	cpi	r19, 0x40	; 64
    5c5c:	38 f3       	brcs	.-50     	; 0x5c2c <init_Registers+0x78>
    5c5e:	40 e0       	ldi	r20, 0x00	; 0
    5c60:	50 e0       	ldi	r21, 0x00	; 0
    5c62:	66 e0       	ldi	r22, 0x06	; 6
    5c64:	81 e0       	ldi	r24, 0x01	; 1
    5c66:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <log_putError>
    5c6a:	08 95       	ret

00005c6c <regNr_to_moduleBit>:
    5c6c:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5c70:	89 17       	cp	r24, r25
    5c72:	a0 f4       	brcc	.+40     	; 0x5c9c <regNr_to_moduleBit+0x30>
    5c74:	80 34       	cpi	r24, 0x40	; 64
    5c76:	90 f4       	brcc	.+36     	; 0x5c9c <regNr_to_moduleBit+0x30>
    5c78:	28 e0       	ldi	r18, 0x08	; 8
    5c7a:	e7 ef       	ldi	r30, 0xF7	; 247
    5c7c:	f7 e0       	ldi	r31, 0x07	; 7
    5c7e:	30 81       	ld	r19, Z
    5c80:	83 17       	cp	r24, r19
    5c82:	48 f0       	brcs	.+18     	; 0x5c96 <regNr_to_moduleBit+0x2a>
    5c84:	91 81       	ldd	r25, Z+1	; 0x01
    5c86:	98 17       	cp	r25, r24
    5c88:	30 f0       	brcs	.+12     	; 0x5c96 <regNr_to_moduleBit+0x2a>
    5c8a:	22 81       	ldd	r18, Z+2	; 0x02
    5c8c:	98 2f       	mov	r25, r24
    5c8e:	93 1b       	sub	r25, r19
    5c90:	80 e0       	ldi	r24, 0x00	; 0
    5c92:	92 0f       	add	r25, r18
    5c94:	08 95       	ret
    5c96:	33 96       	adiw	r30, 0x03	; 3
    5c98:	21 50       	subi	r18, 0x01	; 1
    5c9a:	89 f7       	brne	.-30     	; 0x5c7e <regNr_to_moduleBit+0x12>
    5c9c:	8f ef       	ldi	r24, 0xFF	; 255
    5c9e:	90 e0       	ldi	r25, 0x00	; 0
    5ca0:	08 95       	ret

00005ca2 <moduleBit_to_registerNr>:
    5ca2:	90 e0       	ldi	r25, 0x00	; 0
    5ca4:	16 c0       	rjmp	.+44     	; 0x5cd2 <moduleBit_to_registerNr+0x30>
    5ca6:	40 91 f9 07 	lds	r20, 0x07F9	; 0x8007f9 <registerMap+0x2>
    5caa:	84 17       	cp	r24, r20
    5cac:	88 f0       	brcs	.+34     	; 0x5cd0 <moduleBit_to_registerNr+0x2e>
    5cae:	68 2f       	mov	r22, r24
    5cb0:	70 e0       	ldi	r23, 0x00	; 0
    5cb2:	e7 ef       	ldi	r30, 0xF7	; 247
    5cb4:	f7 e0       	ldi	r31, 0x07	; 7
    5cb6:	21 81       	ldd	r18, Z+1	; 0x01
    5cb8:	30 e0       	ldi	r19, 0x00	; 0
    5cba:	24 0f       	add	r18, r20
    5cbc:	31 1d       	adc	r19, r1
    5cbe:	50 81       	ld	r21, Z
    5cc0:	25 1b       	sub	r18, r21
    5cc2:	31 09       	sbc	r19, r1
    5cc4:	26 17       	cp	r18, r22
    5cc6:	37 07       	cpc	r19, r23
    5cc8:	1c f0       	brlt	.+6      	; 0x5cd0 <moduleBit_to_registerNr+0x2e>
    5cca:	84 1b       	sub	r24, r20
    5ccc:	85 0f       	add	r24, r21
    5cce:	08 95       	ret
    5cd0:	9f 5f       	subi	r25, 0xFF	; 255
    5cd2:	98 30       	cpi	r25, 0x08	; 8
    5cd4:	40 f3       	brcs	.-48     	; 0x5ca6 <moduleBit_to_registerNr+0x4>
    5cd6:	8f ef       	ldi	r24, 0xFF	; 255
    5cd8:	08 95       	ret

00005cda <read_Register>:
    5cda:	cf 93       	push	r28
    5cdc:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5ce0:	89 17       	cp	r24, r25
    5ce2:	08 f0       	brcs	.+2      	; 0x5ce6 <read_Register+0xc>
    5ce4:	3c c0       	rjmp	.+120    	; 0x5d5e <read_Register+0x84>
    5ce6:	c6 2f       	mov	r28, r22
    5ce8:	c1 df       	rcall	.-126    	; 0x5c6c <regNr_to_moduleBit>
    5cea:	81 11       	cpse	r24, r1
    5cec:	30 c0       	rjmp	.+96     	; 0x5d4e <read_Register+0x74>
    5cee:	29 2f       	mov	r18, r25
    5cf0:	2f 71       	andi	r18, 0x1F	; 31
    5cf2:	92 95       	swap	r25
    5cf4:	96 95       	lsr	r25
    5cf6:	97 70       	andi	r25, 0x07	; 7
    5cf8:	41 e0       	ldi	r20, 0x01	; 1
    5cfa:	50 e0       	ldi	r21, 0x00	; 0
    5cfc:	02 c0       	rjmp	.+4      	; 0x5d02 <read_Register+0x28>
    5cfe:	44 0f       	add	r20, r20
    5d00:	55 1f       	adc	r21, r21
    5d02:	9a 95       	dec	r25
    5d04:	e2 f7       	brpl	.-8      	; 0x5cfe <read_Register+0x24>
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	f9 01       	movw	r30, r18
    5d0a:	ee 0f       	add	r30, r30
    5d0c:	ff 1f       	adc	r31, r31
    5d0e:	ee 0f       	add	r30, r30
    5d10:	ff 1f       	adc	r31, r31
    5d12:	ee 0f       	add	r30, r30
    5d14:	ff 1f       	adc	r31, r31
    5d16:	e7 5b       	subi	r30, 0xB7	; 183
    5d18:	fd 4f       	sbci	r31, 0xFD	; 253
    5d1a:	91 81       	ldd	r25, Z+1	; 0x01
    5d1c:	94 23       	and	r25, r20
    5d1e:	11 f4       	brne	.+4      	; 0x5d24 <read_Register+0x4a>
    5d20:	c1 fd       	sbrc	r28, 1
    5d22:	17 c0       	rjmp	.+46     	; 0x5d52 <read_Register+0x78>
    5d24:	22 0f       	add	r18, r18
    5d26:	33 1f       	adc	r19, r19
    5d28:	22 0f       	add	r18, r18
    5d2a:	33 1f       	adc	r19, r19
    5d2c:	22 0f       	add	r18, r18
    5d2e:	33 1f       	adc	r19, r19
    5d30:	f9 01       	movw	r30, r18
    5d32:	e7 5b       	subi	r30, 0xB7	; 183
    5d34:	fd 4f       	sbci	r31, 0xFD	; 253
    5d36:	26 81       	ldd	r18, Z+6	; 0x06
    5d38:	42 23       	and	r20, r18
    5d3a:	11 f0       	breq	.+4      	; 0x5d40 <read_Register+0x66>
    5d3c:	c0 fd       	sbrc	r28, 0
    5d3e:	0b c0       	rjmp	.+22     	; 0x5d56 <read_Register+0x7c>
    5d40:	99 23       	and	r25, r25
    5d42:	71 f0       	breq	.+28     	; 0x5d60 <read_Register+0x86>
    5d44:	44 23       	and	r20, r20
    5d46:	61 f0       	breq	.+24     	; 0x5d60 <read_Register+0x86>
    5d48:	c4 30       	cpi	r28, 0x04	; 4
    5d4a:	51 f4       	brne	.+20     	; 0x5d60 <read_Register+0x86>
    5d4c:	06 c0       	rjmp	.+12     	; 0x5d5a <read_Register+0x80>
    5d4e:	80 e0       	ldi	r24, 0x00	; 0
    5d50:	07 c0       	rjmp	.+14     	; 0x5d60 <read_Register+0x86>
    5d52:	81 e0       	ldi	r24, 0x01	; 1
    5d54:	05 c0       	rjmp	.+10     	; 0x5d60 <read_Register+0x86>
    5d56:	81 e0       	ldi	r24, 0x01	; 1
    5d58:	03 c0       	rjmp	.+6      	; 0x5d60 <read_Register+0x86>
    5d5a:	81 e0       	ldi	r24, 0x01	; 1
    5d5c:	01 c0       	rjmp	.+2      	; 0x5d60 <read_Register+0x86>
    5d5e:	80 e0       	ldi	r24, 0x00	; 0
    5d60:	cf 91       	pop	r28
    5d62:	08 95       	ret

00005d64 <get_RegisterStatus>:
    5d64:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5d68:	89 17       	cp	r24, r25
    5d6a:	78 f5       	brcc	.+94     	; 0x5dca <get_RegisterStatus+0x66>
    5d6c:	7f df       	rcall	.-258    	; 0x5c6c <regNr_to_moduleBit>
    5d6e:	81 11       	cpse	r24, r1
    5d70:	28 c0       	rjmp	.+80     	; 0x5dc2 <get_RegisterStatus+0x5e>
    5d72:	29 2f       	mov	r18, r25
    5d74:	2f 71       	andi	r18, 0x1F	; 31
    5d76:	39 2f       	mov	r19, r25
    5d78:	32 95       	swap	r19
    5d7a:	36 95       	lsr	r19
    5d7c:	37 70       	andi	r19, 0x07	; 7
    5d7e:	81 e0       	ldi	r24, 0x01	; 1
    5d80:	90 e0       	ldi	r25, 0x00	; 0
    5d82:	02 c0       	rjmp	.+4      	; 0x5d88 <get_RegisterStatus+0x24>
    5d84:	88 0f       	add	r24, r24
    5d86:	99 1f       	adc	r25, r25
    5d88:	3a 95       	dec	r19
    5d8a:	e2 f7       	brpl	.-8      	; 0x5d84 <get_RegisterStatus+0x20>
    5d8c:	30 e0       	ldi	r19, 0x00	; 0
    5d8e:	f9 01       	movw	r30, r18
    5d90:	ee 0f       	add	r30, r30
    5d92:	ff 1f       	adc	r31, r31
    5d94:	ee 0f       	add	r30, r30
    5d96:	ff 1f       	adc	r31, r31
    5d98:	ee 0f       	add	r30, r30
    5d9a:	ff 1f       	adc	r31, r31
    5d9c:	e7 5b       	subi	r30, 0xB7	; 183
    5d9e:	fd 4f       	sbci	r31, 0xFD	; 253
    5da0:	41 81       	ldd	r20, Z+1	; 0x01
    5da2:	48 23       	and	r20, r24
    5da4:	81 f0       	breq	.+32     	; 0x5dc6 <get_RegisterStatus+0x62>
    5da6:	22 0f       	add	r18, r18
    5da8:	33 1f       	adc	r19, r19
    5daa:	22 0f       	add	r18, r18
    5dac:	33 1f       	adc	r19, r19
    5dae:	22 0f       	add	r18, r18
    5db0:	33 1f       	adc	r19, r19
    5db2:	f9 01       	movw	r30, r18
    5db4:	e7 5b       	subi	r30, 0xB7	; 183
    5db6:	fd 4f       	sbci	r31, 0xFD	; 253
    5db8:	96 81       	ldd	r25, Z+6	; 0x06
    5dba:	89 23       	and	r24, r25
    5dbc:	39 f0       	breq	.+14     	; 0x5dcc <get_RegisterStatus+0x68>
    5dbe:	81 e0       	ldi	r24, 0x01	; 1
    5dc0:	08 95       	ret
    5dc2:	80 e0       	ldi	r24, 0x00	; 0
    5dc4:	08 95       	ret
    5dc6:	82 e0       	ldi	r24, 0x02	; 2
    5dc8:	08 95       	ret
    5dca:	80 e0       	ldi	r24, 0x00	; 0
    5dcc:	08 95       	ret

00005dce <count_Registers>:
    5dce:	1f 93       	push	r17
    5dd0:	cf 93       	push	r28
    5dd2:	df 93       	push	r29
    5dd4:	18 2f       	mov	r17, r24
    5dd6:	c0 e0       	ldi	r28, 0x00	; 0
    5dd8:	d0 e0       	ldi	r29, 0x00	; 0
    5dda:	06 c0       	rjmp	.+12     	; 0x5de8 <count_Registers+0x1a>
    5ddc:	61 2f       	mov	r22, r17
    5dde:	8c 2f       	mov	r24, r28
    5de0:	7c df       	rcall	.-264    	; 0x5cda <read_Register>
    5de2:	81 11       	cpse	r24, r1
    5de4:	df 5f       	subi	r29, 0xFF	; 255
    5de6:	cf 5f       	subi	r28, 0xFF	; 255
    5de8:	c0 34       	cpi	r28, 0x40	; 64
    5dea:	c0 f3       	brcs	.-16     	; 0x5ddc <count_Registers+0xe>
    5dec:	8d 2f       	mov	r24, r29
    5dee:	df 91       	pop	r29
    5df0:	cf 91       	pop	r28
    5df2:	1f 91       	pop	r17
    5df4:	08 95       	ret

00005df6 <read_allRegister>:
    5df6:	ef 92       	push	r14
    5df8:	ff 92       	push	r15
    5dfa:	0f 93       	push	r16
    5dfc:	1f 93       	push	r17
    5dfe:	cf 93       	push	r28
    5e00:	df 93       	push	r29
    5e02:	7c 01       	movw	r14, r24
    5e04:	c0 e0       	ldi	r28, 0x00	; 0
    5e06:	d0 e0       	ldi	r29, 0x00	; 0
    5e08:	00 e0       	ldi	r16, 0x00	; 0
    5e0a:	17 c0       	rjmp	.+46     	; 0x5e3a <read_allRegister+0x44>
    5e0c:	1c 2f       	mov	r17, r28
    5e0e:	17 70       	andi	r17, 0x07	; 7
    5e10:	09 f4       	brne	.+2      	; 0x5e14 <read_allRegister+0x1e>
    5e12:	d0 e0       	ldi	r29, 0x00	; 0
    5e14:	d6 95       	lsr	r29
    5e16:	63 e0       	ldi	r22, 0x03	; 3
    5e18:	8c 2f       	mov	r24, r28
    5e1a:	5f df       	rcall	.-322    	; 0x5cda <read_Register>
    5e1c:	88 23       	and	r24, r24
    5e1e:	11 f0       	breq	.+4      	; 0x5e24 <read_allRegister+0x2e>
    5e20:	d0 68       	ori	r29, 0x80	; 128
    5e22:	0f 5f       	subi	r16, 0xFF	; 255
    5e24:	17 30       	cpi	r17, 0x07	; 7
    5e26:	41 f4       	brne	.+16     	; 0x5e38 <read_allRegister+0x42>
    5e28:	e1 14       	cp	r14, r1
    5e2a:	f1 04       	cpc	r15, r1
    5e2c:	29 f0       	breq	.+10     	; 0x5e38 <read_allRegister+0x42>
    5e2e:	f7 01       	movw	r30, r14
    5e30:	d0 83       	st	Z, r29
    5e32:	c7 01       	movw	r24, r14
    5e34:	01 96       	adiw	r24, 0x01	; 1
    5e36:	7c 01       	movw	r14, r24
    5e38:	cf 5f       	subi	r28, 0xFF	; 255
    5e3a:	c0 34       	cpi	r28, 0x40	; 64
    5e3c:	38 f3       	brcs	.-50     	; 0x5e0c <read_allRegister+0x16>
    5e3e:	80 2f       	mov	r24, r16
    5e40:	df 91       	pop	r29
    5e42:	cf 91       	pop	r28
    5e44:	1f 91       	pop	r17
    5e46:	0f 91       	pop	r16
    5e48:	ff 90       	pop	r15
    5e4a:	ef 90       	pop	r14
    5e4c:	08 95       	ret

00005e4e <register_onOff>:
    5e4e:	cf 93       	push	r28
    5e50:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5e54:	89 17       	cp	r24, r25
    5e56:	f0 f4       	brcc	.+60     	; 0x5e94 <register_onOff+0x46>
    5e58:	c6 2f       	mov	r28, r22
    5e5a:	08 df       	rcall	.-496    	; 0x5c6c <regNr_to_moduleBit>
    5e5c:	81 11       	cpse	r24, r1
    5e5e:	1a c0       	rjmp	.+52     	; 0x5e94 <register_onOff+0x46>
    5e60:	89 2f       	mov	r24, r25
    5e62:	8f 71       	andi	r24, 0x1F	; 31
    5e64:	92 95       	swap	r25
    5e66:	96 95       	lsr	r25
    5e68:	97 70       	andi	r25, 0x07	; 7
    5e6a:	c0 ff       	sbrs	r28, 0
    5e6c:	0a c0       	rjmp	.+20     	; 0x5e82 <register_onOff+0x34>
    5e6e:	61 e0       	ldi	r22, 0x01	; 1
    5e70:	70 e0       	ldi	r23, 0x00	; 0
    5e72:	02 c0       	rjmp	.+4      	; 0x5e78 <register_onOff+0x2a>
    5e74:	66 0f       	add	r22, r22
    5e76:	77 1f       	adc	r23, r23
    5e78:	9a 95       	dec	r25
    5e7a:	e2 f7       	brpl	.-8      	; 0x5e74 <register_onOff+0x26>
    5e7c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pipe_on>
    5e80:	09 c0       	rjmp	.+18     	; 0x5e94 <register_onOff+0x46>
    5e82:	61 e0       	ldi	r22, 0x01	; 1
    5e84:	70 e0       	ldi	r23, 0x00	; 0
    5e86:	02 c0       	rjmp	.+4      	; 0x5e8c <register_onOff+0x3e>
    5e88:	66 0f       	add	r22, r22
    5e8a:	77 1f       	adc	r23, r23
    5e8c:	9a 95       	dec	r25
    5e8e:	e2 f7       	brpl	.-8      	; 0x5e88 <register_onOff+0x3a>
    5e90:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <pipe_off>
    5e94:	cf 91       	pop	r28
    5e96:	08 95       	ret

00005e98 <register_toProgram>:
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5e98:	0f 93       	push	r16
    5e9a:	1f 93       	push	r17
    5e9c:	cf 93       	push	r28
    5e9e:	df 93       	push	r29
    5ea0:	c8 2f       	mov	r28, r24
    5ea2:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5ea4:	80 34       	cpi	r24, 0x40	; 64
    5ea6:	90 f4       	brcc	.+36     	; 0x5ecc <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5ea8:	28 2f       	mov	r18, r24
    5eaa:	30 e0       	ldi	r19, 0x00	; 0
    5eac:	c9 01       	movw	r24, r18
    5eae:	88 0f       	add	r24, r24
    5eb0:	99 1f       	adc	r25, r25
    5eb2:	22 0f       	add	r18, r18
    5eb4:	33 1f       	adc	r19, r19
    5eb6:	22 0f       	add	r18, r18
    5eb8:	33 1f       	adc	r19, r19
    5eba:	22 0f       	add	r18, r18
    5ebc:	33 1f       	adc	r19, r19
    5ebe:	82 0f       	add	r24, r18
    5ec0:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5ec2:	8c 59       	subi	r24, 0x9C	; 156
    5ec4:	96 4f       	sbci	r25, 0xF6	; 246
    5ec6:	97 df       	rcall	.-210    	; 0x5df6 <read_allRegister>
    5ec8:	18 2f       	mov	r17, r24
    5eca:	01 c0       	rjmp	.+2      	; 0x5ece <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5ecc:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5ece:	d0 e0       	ldi	r29, 0x00	; 0
    5ed0:	20 de       	rcall	.-960    	; 0x5b12 <getAllCouplers>
    5ed2:	9e 01       	movw	r18, r28
    5ed4:	22 0f       	add	r18, r18
    5ed6:	33 1f       	adc	r19, r19
    5ed8:	cc 0f       	add	r28, r28
    5eda:	dd 1f       	adc	r29, r29
    5edc:	cc 0f       	add	r28, r28
    5ede:	dd 1f       	adc	r29, r29
    5ee0:	cc 0f       	add	r28, r28
    5ee2:	dd 1f       	adc	r29, r29
    5ee4:	c2 0f       	add	r28, r18
    5ee6:	d3 1f       	adc	r29, r19
    5ee8:	cc 59       	subi	r28, 0x9C	; 156
    5eea:	d6 4f       	sbci	r29, 0xF6	; 246
    5eec:	99 87       	std	Y+9, r25	; 0x09
    5eee:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5ef0:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5ef2:	0e 94 cf 0c 	call	0x199e	; 0x199e <eeprom_UpdateProg>
	}
	return result;
}
    5ef6:	81 2f       	mov	r24, r17
    5ef8:	df 91       	pop	r29
    5efa:	cf 91       	pop	r28
    5efc:	1f 91       	pop	r17
    5efe:	0f 91       	pop	r16
    5f00:	08 95       	ret

00005f02 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5f02:	ff 92       	push	r15
    5f04:	0f 93       	push	r16
    5f06:	1f 93       	push	r17
    5f08:	cf 93       	push	r28
    5f0a:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	8c 01       	movw	r16, r24
    5f10:	00 0f       	add	r16, r16
    5f12:	11 1f       	adc	r17, r17
    5f14:	88 0f       	add	r24, r24
    5f16:	99 1f       	adc	r25, r25
    5f18:	88 0f       	add	r24, r24
    5f1a:	99 1f       	adc	r25, r25
    5f1c:	88 0f       	add	r24, r24
    5f1e:	99 1f       	adc	r25, r25
    5f20:	08 0f       	add	r16, r24
    5f22:	19 1f       	adc	r17, r25
    5f24:	0c 59       	subi	r16, 0x9C	; 156
    5f26:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5f28:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5f2a:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5f2c:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5f2e:	15 c0       	rjmp	.+42     	; 0x5f5a <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5f30:	9c 2f       	mov	r25, r28
    5f32:	97 70       	andi	r25, 0x07	; 7
    5f34:	21 f4       	brne	.+8      	; 0x5f3e <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5f36:	f8 01       	movw	r30, r16
    5f38:	d0 81       	ld	r29, Z
    5f3a:	0f 5f       	subi	r16, 0xFF	; 255
    5f3c:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5f3e:	8c 2f       	mov	r24, r28
    5f40:	11 df       	rcall	.-478    	; 0x5d64 <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5f42:	d0 ff       	sbrs	r29, 0
    5f44:	03 c0       	rjmp	.+6      	; 0x5f4c <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5f46:	82 30       	cpi	r24, 0x02	; 2
    5f48:	31 f0       	breq	.+12     	; 0x5f56 <midi_RegisterMatchProgram+0x54>
    5f4a:	0d c0       	rjmp	.+26     	; 0x5f66 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5f4c:	82 30       	cpi	r24, 0x02	; 2
    5f4e:	69 f0       	breq	.+26     	; 0x5f6a <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5f50:	81 30       	cpi	r24, 0x01	; 1
    5f52:	09 f4       	brne	.+2      	; 0x5f56 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5f54:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5f56:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5f58:	cf 5f       	subi	r28, 0xFF	; 255
    5f5a:	90 91 10 08 	lds	r25, 0x0810	; 0x800810 <registerCount>
    5f5e:	c9 17       	cp	r28, r25
    5f60:	38 f3       	brcs	.-50     	; 0x5f30 <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5f62:	8f 2d       	mov	r24, r15
    5f64:	03 c0       	rjmp	.+6      	; 0x5f6c <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5f66:	8f ef       	ldi	r24, 0xFF	; 255
    5f68:	01 c0       	rjmp	.+2      	; 0x5f6c <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5f6a:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5f6c:	df 91       	pop	r29
    5f6e:	cf 91       	pop	r28
    5f70:	1f 91       	pop	r17
    5f72:	0f 91       	pop	r16
    5f74:	ff 90       	pop	r15
    5f76:	08 95       	ret

00005f78 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	ee 0f       	add	r30, r30
    5f7e:	ff 1f       	adc	r31, r31
    5f80:	88 0f       	add	r24, r24
    5f82:	99 1f       	adc	r25, r25
    5f84:	88 0f       	add	r24, r24
    5f86:	99 1f       	adc	r25, r25
    5f88:	88 0f       	add	r24, r24
    5f8a:	99 1f       	adc	r25, r25
    5f8c:	e8 0f       	add	r30, r24
    5f8e:	f9 1f       	adc	r31, r25
    5f90:	ec 59       	subi	r30, 0x9C	; 156
    5f92:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5f94:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5f96:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    5f98:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5f9a:	09 c0       	rjmp	.+18     	; 0x5fae <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    5f9c:	39 2f       	mov	r19, r25
    5f9e:	37 70       	andi	r19, 0x07	; 7
    5fa0:	11 f4       	brne	.+4      	; 0x5fa6 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    5fa2:	20 81       	ld	r18, Z
    5fa4:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    5fa6:	20 fd       	sbrc	r18, 0
			result++;
    5fa8:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    5faa:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5fac:	9f 5f       	subi	r25, 0xFF	; 255
    5fae:	30 91 10 08 	lds	r19, 0x0810	; 0x800810 <registerCount>
    5fb2:	93 17       	cp	r25, r19
    5fb4:	98 f3       	brcs	.-26     	; 0x5f9c <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    5fb6:	08 95       	ret

00005fb8 <prog_set>:

uint8_t prog_Display; // Program value 0...63
uint8_t prog_UpdDisplay; // TRUE if PROGRAM has changed and should be updated

void prog_set(uint8_t prog){
	if (prog != prog_Display){
    5fb8:	90 91 f6 07 	lds	r25, 0x07F6	; 0x8007f6 <prog_Display>
    5fbc:	98 17       	cp	r25, r24
    5fbe:	29 f0       	breq	.+10     	; 0x5fca <prog_set+0x12>
		prog_Display = prog;
    5fc0:	80 93 f6 07 	sts	0x07F6, r24	; 0x8007f6 <prog_Display>
		prog_UpdDisplay = TRUE;
    5fc4:	8f ef       	ldi	r24, 0xFF	; 255
    5fc6:	80 93 0f 08 	sts	0x080F, r24	; 0x80080f <prog_UpdDisplay>
    5fca:	08 95       	ret

00005fcc <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    5fcc:	bf 92       	push	r11
    5fce:	cf 92       	push	r12
    5fd0:	df 92       	push	r13
    5fd2:	ef 92       	push	r14
    5fd4:	ff 92       	push	r15
    5fd6:	0f 93       	push	r16
    5fd8:	1f 93       	push	r17
    5fda:	cf 93       	push	r28
    5fdc:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    5fde:	80 34       	cpi	r24, 0x40	; 64
    5fe0:	08 f0       	brcs	.+2      	; 0x5fe4 <program_toRegister+0x18>
    5fe2:	41 c0       	rjmp	.+130    	; 0x6066 <program_toRegister+0x9a>
    5fe4:	e8 2e       	mov	r14, r24
		prog_set(program); // for display in main
    5fe6:	e8 df       	rcall	.-48     	; 0x5fb8 <prog_set>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5fe8:	f1 2c       	mov	r15, r1
    5fea:	f7 01       	movw	r30, r14
    5fec:	ee 0f       	add	r30, r30
    5fee:	ff 1f       	adc	r31, r31
    5ff0:	c7 01       	movw	r24, r14
    5ff2:	88 0f       	add	r24, r24
    5ff4:	99 1f       	adc	r25, r25
    5ff6:	88 0f       	add	r24, r24
    5ff8:	99 1f       	adc	r25, r25
    5ffa:	88 0f       	add	r24, r24
    5ffc:	99 1f       	adc	r25, r25
    5ffe:	e8 0f       	add	r30, r24
    6000:	f9 1f       	adc	r31, r25
    6002:	ec 59       	subi	r30, 0x9C	; 156
    6004:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    6006:	b1 2c       	mov	r11, r1
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
    6008:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    600a:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    600c:	18 c0       	rjmp	.+48     	; 0x603e <program_toRegister+0x72>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    600e:	6f 01       	movw	r12, r30
    6010:	8f ef       	ldi	r24, 0xFF	; 255
    6012:	c8 1a       	sub	r12, r24
    6014:	d8 0a       	sbc	r13, r24
    6016:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    6018:	d0 e0       	ldi	r29, 0x00	; 0
    601a:	0d c0       	rjmp	.+26     	; 0x6036 <program_toRegister+0x6a>
				if ((regBits & 0x01) != 0) {
    601c:	8c 2f       	mov	r24, r28
    601e:	81 70       	andi	r24, 0x01	; 1
    6020:	c0 fd       	sbrc	r28, 0
					result++;
    6022:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    6024:	61 e0       	ldi	r22, 0x01	; 1
    6026:	81 11       	cpse	r24, r1
    6028:	01 c0       	rjmp	.+2      	; 0x602c <program_toRegister+0x60>
    602a:	60 e0       	ldi	r22, 0x00	; 0
    602c:	81 2f       	mov	r24, r17
    602e:	0f df       	rcall	.-482    	; 0x5e4e <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    6030:	c6 95       	lsr	r28
				regNr++;
    6032:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    6034:	df 5f       	subi	r29, 0xFF	; 255
    6036:	d8 30       	cpi	r29, 0x08	; 8
    6038:	88 f3       	brcs	.-30     	; 0x601c <program_toRegister+0x50>
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    603a:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    603c:	f6 01       	movw	r30, r12
	if (program < PROGRAM_COUNT){
		prog_set(program); // for display in main
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    603e:	87 e0       	ldi	r24, 0x07	; 7
    6040:	8b 15       	cp	r24, r11
    6042:	28 f7       	brcc	.-54     	; 0x600e <program_toRegister+0x42>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    6044:	f7 01       	movw	r30, r14
    6046:	ee 0f       	add	r30, r30
    6048:	ff 1f       	adc	r31, r31
    604a:	ee 0c       	add	r14, r14
    604c:	ff 1c       	adc	r15, r15
    604e:	ee 0c       	add	r14, r14
    6050:	ff 1c       	adc	r15, r15
    6052:	ee 0c       	add	r14, r14
    6054:	ff 1c       	adc	r15, r15
    6056:	ee 0d       	add	r30, r14
    6058:	ff 1d       	adc	r31, r15
    605a:	ec 59       	subi	r30, 0x9C	; 156
    605c:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    605e:	80 85       	ldd	r24, Z+8	; 0x08
    6060:	91 85       	ldd	r25, Z+9	; 0x09
    6062:	6f dd       	rcall	.-1314   	; 0x5b42 <setAllCouplers>
    6064:	01 c0       	rjmp	.+2      	; 0x6068 <program_toRegister+0x9c>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    6066:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    6068:	80 2f       	mov	r24, r16
    606a:	df 91       	pop	r29
    606c:	cf 91       	pop	r28
    606e:	1f 91       	pop	r17
    6070:	0f 91       	pop	r16
    6072:	ff 90       	pop	r15
    6074:	ef 90       	pop	r14
    6076:	df 90       	pop	r13
    6078:	cf 90       	pop	r12
    607a:	bf 90       	pop	r11
    607c:	08 95       	ret

0000607e <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    607e:	cf 93       	push	r28
    6080:	df 93       	push	r29
    6082:	c8 2f       	mov	r28, r24
    6084:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    6086:	80 91 32 09 	lds	r24, 0x0932	; 0x800932 <midi_Setting+0x2>
    608a:	81 11       	cpse	r24, r1
    608c:	14 c0       	rjmp	.+40     	; 0x60b6 <midi_ProgramChange+0x38>
    608e:	21 c0       	rjmp	.+66     	; 0x60d2 <midi_ProgramChange+0x54>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    6090:	ec 2f       	mov	r30, r28
    6092:	f0 e0       	ldi	r31, 0x00	; 0
    6094:	ee 0f       	add	r30, r30
    6096:	ff 1f       	adc	r31, r31
    6098:	ee 0f       	add	r30, r30
    609a:	ff 1f       	adc	r31, r31
    609c:	e8 0f       	add	r30, r24
    609e:	f1 1d       	adc	r31, r1
    60a0:	ee 0f       	add	r30, r30
    60a2:	ff 1f       	adc	r31, r31
    60a4:	ee 0f       	add	r30, r30
    60a6:	ff 1f       	adc	r31, r31
    60a8:	e8 5d       	subi	r30, 0xD8	; 216
    60aa:	f7 4f       	sbci	r31, 0xF7	; 247
    60ac:	90 81       	ld	r25, Z
    60ae:	9f 3f       	cpi	r25, 0xFF	; 255
    60b0:	39 f4       	brne	.+14     	; 0x60c0 <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    60b2:	8f 5f       	subi	r24, 0xFF	; 255
    60b4:	01 c0       	rjmp	.+2      	; 0x60b8 <midi_ProgramChange+0x3a>
    60b6:	80 e0       	ldi	r24, 0x00	; 0
    60b8:	84 30       	cpi	r24, 0x04	; 4
    60ba:	50 f3       	brcs	.-44     	; 0x6090 <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    60bc:	80 e0       	ldi	r24, 0x00	; 0
    60be:	01 c0       	rjmp	.+2      	; 0x60c2 <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    60c0:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    60c2:	8f 3f       	cpi	r24, 0xFF	; 255
    60c4:	31 f4       	brne	.+12     	; 0x60d2 <midi_ProgramChange+0x54>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    60c6:	8d 2f       	mov	r24, r29
    60c8:	81 df       	rcall	.-254    	; 0x5fcc <program_toRegister>
			prog_set(program);
    60ca:	8d 2f       	mov	r24, r29
    60cc:	75 df       	rcall	.-278    	; 0x5fb8 <prog_set>
			midiLastProgram = program;
    60ce:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    60d2:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    60d6:	c8 13       	cpse	r28, r24
    60d8:	08 c0       	rjmp	.+16     	; 0x60ea <midi_ProgramChange+0x6c>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    60da:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    60de:	8f 3f       	cpi	r24, 0xFF	; 255
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    60e0:	21 f0       	breq	.+8      	; 0x60ea <midi_ProgramChange+0x6c>
    60e2:	80 6c       	ori	r24, 0xC0	; 192
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    60e4:	32 d6       	rcall	.+3172   	; 0x6d4a <serial1MIDISend>
    60e6:	8d 2f       	mov	r24, r29
    60e8:	30 d6       	rcall	.+3168   	; 0x6d4a <serial1MIDISend>
		}
	}
}
    60ea:	df 91       	pop	r29
    60ec:	cf 91       	pop	r28
    60ee:	08 95       	ret

000060f0 <midi_resetRegisters>:


void midi_resetRegisters(){
    60f0:	cf 93       	push	r28
	for (uint8_t i = 0; i < registerCount; i++){
    60f2:	c0 e0       	ldi	r28, 0x00	; 0
    60f4:	06 c0       	rjmp	.+12     	; 0x6102 <midi_resetRegisters+0x12>
		prog_set(PROGR_NONE);
    60f6:	8f ef       	ldi	r24, 0xFF	; 255
    60f8:	5f df       	rcall	.-322    	; 0x5fb8 <prog_set>
		register_onOff(i,REGISTER_OFF);
    60fa:	60 e0       	ldi	r22, 0x00	; 0
    60fc:	8c 2f       	mov	r24, r28
    60fe:	a7 de       	rcall	.-690    	; 0x5e4e <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    6100:	cf 5f       	subi	r28, 0xFF	; 255
    6102:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <registerCount>
    6106:	c8 17       	cp	r28, r24
    6108:	b0 f3       	brcs	.-20     	; 0x60f6 <midi_resetRegisters+0x6>
		prog_set(PROGR_NONE);
		register_onOff(i,REGISTER_OFF);
	}
}
    610a:	cf 91       	pop	r28
    610c:	08 95       	ret

0000610e <prog_toLcd>:
		prog_UpdDisplay = TRUE;
	}
}

void prog_toLcd(){
	if (prog_Display != PROGR_NONE) {
    610e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    6112:	8f 3f       	cpi	r24, 0xFF	; 255
    6114:	c9 f0       	breq	.+50     	; 0x6148 <prog_toLcd+0x3a>
		lcd_putc('P');
    6116:	80 e5       	ldi	r24, 0x50	; 80
    6118:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
		lcd_putc(' ');
    611c:	80 e2       	ldi	r24, 0x20	; 32
    611e:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
		lcd_putc('1' + (prog_Display & 0x07));
    6122:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    6126:	87 70       	andi	r24, 0x07	; 7
    6128:	8f 5c       	subi	r24, 0xCF	; 207
    612a:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
		lcd_putc('A' + ((prog_Display >> 3) & 0x07));
    612e:	80 91 f6 07 	lds	r24, 0x07F6	; 0x8007f6 <prog_Display>
    6132:	86 95       	lsr	r24
    6134:	86 95       	lsr	r24
    6136:	86 95       	lsr	r24
    6138:	87 70       	andi	r24, 0x07	; 7
    613a:	8f 5b       	subi	r24, 0xBF	; 191
    613c:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
		lcd_putc(' ');
    6140:	80 e2       	ldi	r24, 0x20	; 32
    6142:	0c 94 23 13 	jmp	0x2646	; 0x2646 <lcd_putc>
    6146:	08 95       	ret
	} else {
		lcd_blank(5);
    6148:	85 e0       	ldi	r24, 0x05	; 5
    614a:	0c 94 65 3b 	jmp	0x76ca	; 0x76ca <lcd_blank>
    614e:	08 95       	ret

00006150 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6150:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    6152:	e8 e2       	ldi	r30, 0x28	; 40
    6154:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6156:	07 c0       	rjmp	.+14     	; 0x6166 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    6158:	8f ef       	ldi	r24, 0xFF	; 255
    615a:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    615c:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    615e:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    6160:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    6162:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    6164:	91 50       	subi	r25, 0x01	; 1
    6166:	91 11       	cpse	r25, r1
    6168:	f7 cf       	rjmp	.-18     	; 0x6158 <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    616a:	0e 94 66 0a 	call	0x14cc	; 0x14cc <eeprom_ReadMidiInMap>
    616e:	8f 3f       	cpi	r24, 0xFF	; 255
    6170:	01 f5       	brne	.+64     	; 0x61b2 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    6172:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    6176:	e8 e2       	ldi	r30, 0x28	; 40
    6178:	f8 e0       	ldi	r31, 0x08	; 8
    617a:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    617c:	84 e2       	ldi	r24, 0x24	; 36
    617e:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    6180:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6182:	98 e3       	ldi	r25, 0x38	; 56
    6184:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    6186:	21 e0       	ldi	r18, 0x01	; 1
    6188:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    618a:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    618c:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    618e:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    6190:	22 e0       	ldi	r18, 0x02	; 2
    6192:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    6194:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    6196:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    6198:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    619a:	93 e0       	ldi	r25, 0x03	; 3
    619c:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    619e:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    61a0:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    61a2:	8e e1       	ldi	r24, 0x1E	; 30
    61a4:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    61a6:	40 e0       	ldi	r20, 0x00	; 0
    61a8:	50 e0       	ldi	r21, 0x00	; 0
    61aa:	61 e0       	ldi	r22, 0x01	; 1
    61ac:	81 e0       	ldi	r24, 0x01	; 1
    61ae:	0e 94 21 15 	call	0x2a42	; 0x2a42 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    61b2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <eeprom_ReadMidiThrough>
    61b6:	8f 3f       	cpi	r24, 0xFF	; 255
    61b8:	51 f4       	brne	.+20     	; 0x61ce <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    61ba:	e6 e2       	ldi	r30, 0x26	; 38
    61bc:	f8 e0       	ldi	r31, 0x08	; 8
    61be:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    61c0:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    61c2:	40 e0       	ldi	r20, 0x00	; 0
    61c4:	50 e0       	ldi	r21, 0x00	; 0
    61c6:	61 e0       	ldi	r22, 0x01	; 1
    61c8:	81 e0       	ldi	r24, 0x01	; 1
    61ca:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <log_putError>
    61ce:	08 95       	ret

000061d0 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    61d0:	20 e0       	ldi	r18, 0x00	; 0
    61d2:	09 c0       	rjmp	.+18     	; 0x61e6 <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    61d4:	88 0f       	add	r24, r24
    61d6:	99 1f       	adc	r25, r25
    61d8:	fc 01       	movw	r30, r24
    61da:	e8 5d       	subi	r30, 0xD8	; 216
    61dc:	f6 4f       	sbci	r31, 0xF6	; 246
    61de:	8f ef       	ldi	r24, 0xFF	; 255
    61e0:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    61e2:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    61e4:	2f 5f       	subi	r18, 0xFF	; 255
    61e6:	82 2f       	mov	r24, r18
    61e8:	90 e0       	ldi	r25, 0x00	; 0
    61ea:	00 97       	sbiw	r24, 0x00	; 0
    61ec:	99 f7       	brne	.-26     	; 0x61d4 <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    61ee:	0e 94 8e 0a 	call	0x151c	; 0x151c <eeprom_ReadMidiOutMap>
    61f2:	8f 3f       	cpi	r24, 0xFF	; 255
    61f4:	b1 f4       	brne	.+44     	; 0x6222 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    61f6:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    61fa:	e8 e2       	ldi	r30, 0x28	; 40
    61fc:	f9 e0       	ldi	r31, 0x09	; 9
    61fe:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    6200:	91 e0       	ldi	r25, 0x01	; 1
    6202:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    6204:	92 e0       	ldi	r25, 0x02	; 2
    6206:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    6208:	93 e0       	ldi	r25, 0x03	; 3
    620a:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    620c:	e0 e3       	ldi	r30, 0x30	; 48
    620e:	f9 e0       	ldi	r31, 0x09	; 9
    6210:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    6212:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    6214:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    6216:	40 e0       	ldi	r20, 0x00	; 0
    6218:	50 e0       	ldi	r21, 0x00	; 0
    621a:	62 e0       	ldi	r22, 0x02	; 2
    621c:	81 e0       	ldi	r24, 0x01	; 1
    621e:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <log_putError>
    6222:	08 95       	ret

00006224 <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    6224:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    6226:	8f ef       	ldi	r24, 0xFF	; 255
    6228:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    622a:	e4 30       	cpi	r30, 0x04	; 4
    622c:	50 f4       	brcc	.+20     	; 0x6242 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    622e:	f0 e0       	ldi	r31, 0x00	; 0
    6230:	ee 0f       	add	r30, r30
    6232:	ff 1f       	adc	r31, r31
    6234:	e8 5d       	subi	r30, 0xD8	; 216
    6236:	f6 4f       	sbci	r31, 0xF6	; 246
    6238:	20 81       	ld	r18, Z
    623a:	2f 3f       	cpi	r18, 0xFF	; 255
    623c:	11 f0       	breq	.+4      	; 0x6242 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    623e:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    6240:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    6242:	08 95       	ret

00006244 <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6244:	70 e0       	ldi	r23, 0x00	; 0
    6246:	52 c0       	rjmp	.+164    	; 0x62ec <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    6248:	87 2f       	mov	r24, r23
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	24 2f       	mov	r18, r20
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	f9 01       	movw	r30, r18
    6252:	ee 0f       	add	r30, r30
    6254:	ff 1f       	adc	r31, r31
    6256:	df 01       	movw	r26, r30
    6258:	a2 0f       	add	r26, r18
    625a:	b3 1f       	adc	r27, r19
    625c:	fc 01       	movw	r30, r24
    625e:	ee 0f       	add	r30, r30
    6260:	ff 1f       	adc	r31, r31
    6262:	e8 0f       	add	r30, r24
    6264:	f9 1f       	adc	r31, r25
    6266:	ee 0f       	add	r30, r30
    6268:	ff 1f       	adc	r31, r31
    626a:	ee 0f       	add	r30, r30
    626c:	ff 1f       	adc	r31, r31
    626e:	ea 0f       	add	r30, r26
    6270:	fb 1f       	adc	r31, r27
    6272:	ec 5c       	subi	r30, 0xCC	; 204
    6274:	f6 4f       	sbci	r31, 0xF6	; 246
    6276:	a0 81       	ld	r26, Z
    6278:	af 3f       	cpi	r26, 0xFF	; 255
    627a:	d9 f0       	breq	.+54     	; 0x62b2 <Midi_updateManualRange+0x6e>
    627c:	f9 01       	movw	r30, r18
    627e:	ee 0f       	add	r30, r30
    6280:	ff 1f       	adc	r31, r31
    6282:	e2 0f       	add	r30, r18
    6284:	f3 1f       	adc	r31, r19
    6286:	9c 01       	movw	r18, r24
    6288:	22 0f       	add	r18, r18
    628a:	33 1f       	adc	r19, r19
    628c:	28 0f       	add	r18, r24
    628e:	39 1f       	adc	r19, r25
    6290:	22 0f       	add	r18, r18
    6292:	33 1f       	adc	r19, r19
    6294:	22 0f       	add	r18, r18
    6296:	33 1f       	adc	r19, r19
    6298:	e2 0f       	add	r30, r18
    629a:	f3 1f       	adc	r31, r19
    629c:	ec 5c       	subi	r30, 0xCC	; 204
    629e:	f6 4f       	sbci	r31, 0xF6	; 246
    62a0:	21 81       	ldd	r18, Z+1	; 0x01
    62a2:	2f 3f       	cpi	r18, 0xFF	; 255
    62a4:	31 f0       	breq	.+12     	; 0x62b2 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    62a6:	a6 17       	cp	r26, r22
    62a8:	08 f4       	brcc	.+2      	; 0x62ac <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    62aa:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    62ac:	52 17       	cp	r21, r18
    62ae:	08 f4       	brcc	.+2      	; 0x62b2 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    62b0:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    62b2:	55 23       	and	r21, r21
    62b4:	11 f0       	breq	.+4      	; 0x62ba <Midi_updateManualRange+0x76>
    62b6:	6f 3f       	cpi	r22, 0xFF	; 255
    62b8:	49 f4       	brne	.+18     	; 0x62cc <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    62ba:	88 0f       	add	r24, r24
    62bc:	99 1f       	adc	r25, r25
    62be:	fc 01       	movw	r30, r24
    62c0:	e2 5e       	subi	r30, 0xE2	; 226
    62c2:	f7 4f       	sbci	r31, 0xF7	; 247
    62c4:	8f ef       	ldi	r24, 0xFF	; 255
    62c6:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    62c8:	81 83       	std	Z+1, r24	; 0x01
    62ca:	07 c0       	rjmp	.+14     	; 0x62da <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    62cc:	88 0f       	add	r24, r24
    62ce:	99 1f       	adc	r25, r25
    62d0:	fc 01       	movw	r30, r24
    62d2:	e2 5e       	subi	r30, 0xE2	; 226
    62d4:	f7 4f       	sbci	r31, 0xF7	; 247
    62d6:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    62d8:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    62da:	4f 5f       	subi	r20, 0xFF	; 255
    62dc:	03 c0       	rjmp	.+6      	; 0x62e4 <Midi_updateManualRange+0xa0>
    62de:	40 e0       	ldi	r20, 0x00	; 0
    62e0:	6f ef       	ldi	r22, 0xFF	; 255
    62e2:	50 e0       	ldi	r21, 0x00	; 0
    62e4:	44 30       	cpi	r20, 0x04	; 4
    62e6:	08 f4       	brcc	.+2      	; 0x62ea <Midi_updateManualRange+0xa6>
    62e8:	af cf       	rjmp	.-162    	; 0x6248 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    62ea:	7f 5f       	subi	r23, 0xFF	; 255
    62ec:	74 30       	cpi	r23, 0x04	; 4
    62ee:	b8 f3       	brcs	.-18     	; 0x62de <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    62f0:	08 95       	ret

000062f2 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    62f2:	63 e0       	ldi	r22, 0x03	; 3
    62f4:	28 c0       	rjmp	.+80     	; 0x6346 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    62f6:	86 2f       	mov	r24, r22
    62f8:	06 2e       	mov	r0, r22
    62fa:	00 0c       	add	r0, r0
    62fc:	99 0b       	sbc	r25, r25
    62fe:	42 2f       	mov	r20, r18
    6300:	02 2e       	mov	r0, r18
    6302:	00 0c       	add	r0, r0
    6304:	55 0b       	sbc	r21, r21
    6306:	fa 01       	movw	r30, r20
    6308:	ee 0f       	add	r30, r30
    630a:	ff 1f       	adc	r31, r31
    630c:	e4 0f       	add	r30, r20
    630e:	f5 1f       	adc	r31, r21
    6310:	ac 01       	movw	r20, r24
    6312:	44 0f       	add	r20, r20
    6314:	55 1f       	adc	r21, r21
    6316:	da 01       	movw	r26, r20
    6318:	a8 0f       	add	r26, r24
    631a:	b9 1f       	adc	r27, r25
    631c:	aa 0f       	add	r26, r26
    631e:	bb 1f       	adc	r27, r27
    6320:	aa 0f       	add	r26, r26
    6322:	bb 1f       	adc	r27, r27
    6324:	ae 0f       	add	r26, r30
    6326:	bf 1f       	adc	r27, r31
    6328:	ac 5c       	subi	r26, 0xCC	; 204
    632a:	b6 4f       	sbci	r27, 0xF6	; 246
    632c:	3f ef       	ldi	r19, 0xFF	; 255
    632e:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    6330:	11 96       	adiw	r26, 0x01	; 1
    6332:	3c 93       	st	X, r19
    6334:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    6336:	fd 01       	movw	r30, r26
    6338:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    633a:	21 50       	subi	r18, 0x01	; 1
    633c:	01 c0       	rjmp	.+2      	; 0x6340 <init_Manual2Module+0x4e>
    633e:	23 e0       	ldi	r18, 0x03	; 3
    6340:	22 23       	and	r18, r18
    6342:	cc f6       	brge	.-78     	; 0x62f6 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    6344:	61 50       	subi	r22, 0x01	; 1
    6346:	66 23       	and	r22, r22
    6348:	d4 f7       	brge	.-12     	; 0x633e <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    634a:	0e 94 3e 0a 	call	0x147c	; 0x147c <eeprom_ReadManualMap>
    634e:	8f 3f       	cpi	r24, 0xFF	; 255
    6350:	79 f5       	brne	.+94     	; 0x63b0 <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    6352:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    6356:	40 e0       	ldi	r20, 0x00	; 0
    6358:	50 e0       	ldi	r21, 0x00	; 0
    635a:	63 e0       	ldi	r22, 0x03	; 3
    635c:	81 e0       	ldi	r24, 0x01	; 1
    635e:	0e 94 21 15 	call	0x2a42	; 0x2a42 <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    6362:	e4 e3       	ldi	r30, 0x34	; 52
    6364:	f9 e0       	ldi	r31, 0x09	; 9
    6366:	84 e2       	ldi	r24, 0x24	; 36
    6368:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    636a:	33 e4       	ldi	r19, 0x43	; 67
    636c:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    636e:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    6370:	24 e4       	ldi	r18, 0x44	; 68
    6372:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    6374:	9b e5       	ldi	r25, 0x5B	; 91
    6376:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    6378:	40 e2       	ldi	r20, 0x20	; 32
    637a:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    637c:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    637e:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    6380:	40 e4       	ldi	r20, 0x40	; 64
    6382:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    6384:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    6386:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    6388:	40 e6       	ldi	r20, 0x60	; 96
    638a:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    638c:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    638e:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    6390:	30 e8       	ldi	r19, 0x80	; 128
    6392:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    6394:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    6396:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    6398:	90 ea       	ldi	r25, 0xA0	; 160
    639a:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    639c:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    639e:	81 e4       	ldi	r24, 0x41	; 65
    63a0:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    63a2:	80 ec       	ldi	r24, 0xC0	; 192
    63a4:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    63a6:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    63a8:	8d e1       	ldi	r24, 0x1D	; 29
    63aa:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    63ac:	80 ee       	ldi	r24, 0xE0	; 224
    63ae:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    63b0:	49 cf       	rjmp	.-366    	; 0x6244 <Midi_updateManualRange>
    63b2:	08 95       	ret

000063b4 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    63b4:	84 30       	cpi	r24, 0x04	; 4
    63b6:	d8 f4       	brcc	.+54     	; 0x63ee <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	fc 01       	movw	r30, r24
    63bc:	ee 0f       	add	r30, r30
    63be:	ff 1f       	adc	r31, r31
    63c0:	e8 0f       	add	r30, r24
    63c2:	f9 1f       	adc	r31, r25
    63c4:	ee 0f       	add	r30, r30
    63c6:	ff 1f       	adc	r31, r31
    63c8:	ee 0f       	add	r30, r30
    63ca:	ff 1f       	adc	r31, r31
    63cc:	ec 5c       	subi	r30, 0xCC	; 204
    63ce:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    63d0:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    63d2:	20 81       	ld	r18, Z
    63d4:	62 17       	cp	r22, r18
    63d6:	40 f0       	brcs	.+16     	; 0x63e8 <manualNote_to_moduleBit+0x34>
    63d8:	91 81       	ldd	r25, Z+1	; 0x01
    63da:	96 17       	cp	r25, r22
    63dc:	28 f0       	brcs	.+10     	; 0x63e8 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    63de:	92 81       	ldd	r25, Z+2	; 0x02
    63e0:	62 1b       	sub	r22, r18
				return (result);
    63e2:	80 e0       	ldi	r24, 0x00	; 0
    63e4:	96 0f       	add	r25, r22
    63e6:	08 95       	ret
			}
			pRange++;
    63e8:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    63ea:	81 50       	subi	r24, 0x01	; 1
    63ec:	91 f7       	brne	.-28     	; 0x63d2 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    63ee:	8f ef       	ldi	r24, 0xFF	; 255
    63f0:	90 e0       	ldi	r25, 0x00	; 0
}
    63f2:	08 95       	ret

000063f4 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    63f4:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    63f6:	e4 e3       	ldi	r30, 0x34	; 52
    63f8:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    63fa:	44 e0       	ldi	r20, 0x04	; 4
    63fc:	16 c0       	rjmp	.+44     	; 0x642a <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    63fe:	52 81       	ldd	r21, Z+2	; 0x02
    6400:	85 17       	cp	r24, r21
    6402:	88 f0       	brcs	.+34     	; 0x6426 <moduleBit_to_manualNote+0x32>
    6404:	68 2f       	mov	r22, r24
    6406:	70 e0       	ldi	r23, 0x00	; 0
    6408:	21 81       	ldd	r18, Z+1	; 0x01
    640a:	a0 81       	ld	r26, Z
    640c:	30 e0       	ldi	r19, 0x00	; 0
    640e:	2a 1b       	sub	r18, r26
    6410:	31 09       	sbc	r19, r1
    6412:	25 0f       	add	r18, r21
    6414:	31 1d       	adc	r19, r1
    6416:	26 17       	cp	r18, r22
    6418:	37 07       	cpc	r19, r23
    641a:	2c f0       	brlt	.+10     	; 0x6426 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    641c:	98 2f       	mov	r25, r24
    641e:	95 1b       	sub	r25, r21
				return(result);
    6420:	8b 2f       	mov	r24, r27
    6422:	9a 0f       	add	r25, r26
    6424:	08 95       	ret
			}
			pRange++;
    6426:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    6428:	41 50       	subi	r20, 0x01	; 1
    642a:	41 11       	cpse	r20, r1
    642c:	e8 cf       	rjmp	.-48     	; 0x63fe <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    642e:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    6430:	b5 30       	cpi	r27, 0x05	; 5
    6432:	18 f3       	brcs	.-58     	; 0x63fa <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    6434:	8f ef       	ldi	r24, 0xFF	; 255
    6436:	90 e0       	ldi	r25, 0x00	; 0
}
    6438:	08 95       	ret

0000643a <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    643a:	ef 92       	push	r14
    643c:	ff 92       	push	r15
    643e:	0f 93       	push	r16
    6440:	1f 93       	push	r17
    6442:	cf 93       	push	r28
    6444:	df 93       	push	r29
    6446:	c8 2f       	mov	r28, r24
    6448:	06 2f       	mov	r16, r22
    644a:	d4 2f       	mov	r29, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    644c:	b3 df       	rcall	.-154    	; 0x63b4 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    644e:	49 2f       	mov	r20, r25
    6450:	42 95       	swap	r20
    6452:	46 95       	lsr	r20
    6454:	47 70       	andi	r20, 0x07	; 7
    6456:	21 e0       	ldi	r18, 0x01	; 1
    6458:	30 e0       	ldi	r19, 0x00	; 0
    645a:	79 01       	movw	r14, r18
    645c:	02 c0       	rjmp	.+4      	; 0x6462 <manual_NoteOnOff+0x28>
    645e:	ee 0c       	add	r14, r14
    6460:	ff 1c       	adc	r15, r15
    6462:	4a 95       	dec	r20
    6464:	e2 f7       	brpl	.-8      	; 0x645e <manual_NoteOnOff+0x24>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    6466:	19 2f       	mov	r17, r25
    6468:	1f 71       	andi	r17, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    646a:	81 11       	cpse	r24, r1
    646c:	1a c0       	rjmp	.+52     	; 0x64a2 <manual_NoteOnOff+0x68>
		if (((modulNrMask & pipe_Module.AssnWrite) == 0) && ((onOff & NOTE_NOREDIRECT) == 0)){
    646e:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    6472:	8e 21       	and	r24, r14
    6474:	59 f4       	brne	.+22     	; 0x648c <manual_NoteOnOff+0x52>
    6476:	dd 23       	and	r29, r29
    6478:	4c f0       	brlt	.+18     	; 0x648c <manual_NoteOnOff+0x52>
			// only if destination module is not assinged as writeable and flag NOTE_NOREDIRECT is not set
			onOff &= ~NOTE_NOREDIRECT; // turn off flag
    647a:	df 77       	andi	r29, 0x7F	; 127
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    647c:	d1 30       	cpi	r29, 0x01	; 1
    647e:	11 f4       	brne	.+4      	; 0x6484 <manual_NoteOnOff+0x4a>
    6480:	90 e2       	ldi	r25, 0x20	; 32
    6482:	01 c0       	rjmp	.+2      	; 0x6486 <manual_NoteOnOff+0x4c>
    6484:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    6486:	8e 2d       	mov	r24, r14
    6488:	91 2b       	or	r25, r17
    648a:	d0 da       	rcall	.-2656   	; 0x5a2c <pipeMsgPush>
		}
		onOff &= ~NOTE_NOREDIRECT; // turn off flag
    648c:	df 77       	andi	r29, 0x7F	; 127
		if (onOff == NOTE_OFF) {
    648e:	29 f4       	brne	.+10     	; 0x649a <manual_NoteOnOff+0x60>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    6490:	6e 2d       	mov	r22, r14
    6492:	81 2f       	mov	r24, r17
    6494:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <pipe_off>
    6498:	04 c0       	rjmp	.+8      	; 0x64a2 <manual_NoteOnOff+0x68>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    649a:	6e 2d       	mov	r22, r14
    649c:	81 2f       	mov	r24, r17
    649e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    64a2:	ec 2f       	mov	r30, r28
    64a4:	f0 e0       	ldi	r31, 0x00	; 0
    64a6:	ee 0f       	add	r30, r30
    64a8:	ff 1f       	adc	r31, r31
    64aa:	e8 5d       	subi	r30, 0xD8	; 216
    64ac:	f6 4f       	sbci	r31, 0xF6	; 246
    64ae:	81 81       	ldd	r24, Z+1	; 0x01
    64b0:	8f 3f       	cpi	r24, 0xFF	; 255
    64b2:	a9 f0       	breq	.+42     	; 0x64de <manual_NoteOnOff+0xa4>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    64b4:	d1 30       	cpi	r29, 0x01	; 1
    64b6:	31 f0       	breq	.+12     	; 0x64c4 <manual_NoteOnOff+0x8a>
    64b8:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    64bc:	99 23       	and	r25, r25
    64be:	21 f0       	breq	.+8      	; 0x64c8 <manual_NoteOnOff+0x8e>
    64c0:	90 e9       	ldi	r25, 0x90	; 144
    64c2:	03 c0       	rjmp	.+6      	; 0x64ca <manual_NoteOnOff+0x90>
    64c4:	90 e9       	ldi	r25, 0x90	; 144
    64c6:	01 c0       	rjmp	.+2      	; 0x64ca <manual_NoteOnOff+0x90>
    64c8:	90 e8       	ldi	r25, 0x80	; 128
    64ca:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    64cc:	3e d4       	rcall	.+2172   	; 0x6d4a <serial1MIDISend>
    64ce:	80 2f       	mov	r24, r16
    64d0:	3c d4       	rcall	.+2168   	; 0x6d4a <serial1MIDISend>
		// V 0.69 removed: && (midi_Setting.VelZero4Off) after (onOff == NOTE_OFF): now always send vel=0 when note off
		serial1MIDISend(((onOff == NOTE_OFF)) ? 0 : MIDI_DEFAULT_VELOCITY);
    64d2:	d1 11       	cpse	r29, r1
    64d4:	02 c0       	rjmp	.+4      	; 0x64da <manual_NoteOnOff+0xa0>
    64d6:	80 e0       	ldi	r24, 0x00	; 0
    64d8:	01 c0       	rjmp	.+2      	; 0x64dc <manual_NoteOnOff+0xa2>
    64da:	80 e4       	ldi	r24, 0x40	; 64
    64dc:	36 d4       	rcall	.+2156   	; 0x6d4a <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	1f 91       	pop	r17
    64e4:	0f 91       	pop	r16
    64e6:	ff 90       	pop	r15
    64e8:	ef 90       	pop	r14
    64ea:	08 95       	ret

000064ec <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    64ec:	bf 92       	push	r11
    64ee:	cf 92       	push	r12
    64f0:	df 92       	push	r13
    64f2:	ef 92       	push	r14
    64f4:	ff 92       	push	r15
    64f6:	0f 93       	push	r16
    64f8:	1f 93       	push	r17
    64fa:	cf 93       	push	r28
    64fc:	df 93       	push	r29
    64fe:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    6500:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    6502:	4c c0       	rjmp	.+152    	; 0x659c <midiAllNotesOff+0xb0>
		uint8_t manual = midiInMap[channel][splitRange].manual;
    6504:	0c 2d       	mov	r16, r12
    6506:	10 e0       	ldi	r17, 0x00	; 0
    6508:	cd 2d       	mov	r28, r13
    650a:	d0 e0       	ldi	r29, 0x00	; 0
    650c:	f8 01       	movw	r30, r16
    650e:	ee 0f       	add	r30, r30
    6510:	ff 1f       	adc	r31, r31
    6512:	ee 0f       	add	r30, r30
    6514:	ff 1f       	adc	r31, r31
    6516:	ec 0f       	add	r30, r28
    6518:	fd 1f       	adc	r31, r29
    651a:	ee 0f       	add	r30, r30
    651c:	ff 1f       	adc	r31, r31
    651e:	ee 0f       	add	r30, r30
    6520:	ff 1f       	adc	r31, r31
    6522:	e8 5d       	subi	r30, 0xD8	; 216
    6524:	f7 4f       	sbci	r31, 0xF7	; 247
    6526:	b0 80       	ld	r11, Z
		// for all split ranges
		if (manual < MANUAL_COUNT) {
    6528:	83 e0       	ldi	r24, 0x03	; 3
    652a:	8b 15       	cp	r24, r11
    652c:	b0 f1       	brcs	.+108    	; 0x659a <midiAllNotesOff+0xae>
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    652e:	f8 01       	movw	r30, r16
    6530:	ee 0f       	add	r30, r30
    6532:	ff 1f       	adc	r31, r31
    6534:	ee 0f       	add	r30, r30
    6536:	ff 1f       	adc	r31, r31
    6538:	ec 0f       	add	r30, r28
    653a:	fd 1f       	adc	r31, r29
    653c:	ee 0f       	add	r30, r30
    653e:	ff 1f       	adc	r31, r31
    6540:	ee 0f       	add	r30, r30
    6542:	ff 1f       	adc	r31, r31
    6544:	e8 5d       	subi	r30, 0xD8	; 216
    6546:	f7 4f       	sbci	r31, 0xF7	; 247
    6548:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    654a:	f2 80       	ldd	r15, Z+2	; 0x02
    654c:	15 c0       	rjmp	.+42     	; 0x6578 <midiAllNotesOff+0x8c>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    654e:	ee 24       	eor	r14, r14
    6550:	e3 94       	inc	r14
    6552:	e6 0e       	add	r14, r22
    6554:	f8 01       	movw	r30, r16
    6556:	ee 0f       	add	r30, r30
    6558:	ff 1f       	adc	r31, r31
    655a:	ee 0f       	add	r30, r30
    655c:	ff 1f       	adc	r31, r31
    655e:	ec 0f       	add	r30, r28
    6560:	fd 1f       	adc	r31, r29
    6562:	ee 0f       	add	r30, r30
    6564:	ff 1f       	adc	r31, r31
    6566:	ee 0f       	add	r30, r30
    6568:	ff 1f       	adc	r31, r31
    656a:	e8 5d       	subi	r30, 0xD8	; 216
    656c:	f7 4f       	sbci	r31, 0xF7	; 247
    656e:	40 e8       	ldi	r20, 0x80	; 128
    6570:	80 81       	ld	r24, Z
    6572:	63 df       	rcall	.-314    	; 0x643a <manual_NoteOnOff>
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6574:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
    6576:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (manual < MANUAL_COUNT) {
			// this splt range is assigned to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6578:	f1 10       	cpse	r15, r1
    657a:	e9 cf       	rjmp	.-46     	; 0x654e <midiAllNotesOff+0x62>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF | NOTE_NOREDIRECT);
			}
			uint8_t midiChanel = midiOutMap[manual].hw_channel;
    657c:	eb 2d       	mov	r30, r11
    657e:	f0 e0       	ldi	r31, 0x00	; 0
    6580:	ee 0f       	add	r30, r30
    6582:	ff 1f       	adc	r31, r31
    6584:	e8 5d       	subi	r30, 0xD8	; 216
    6586:	f6 4f       	sbci	r31, 0xF6	; 246
    6588:	80 81       	ld	r24, Z
			if (midiChanel <= MIDI_CHANNEL_MAX){
    658a:	80 31       	cpi	r24, 0x10	; 16
    658c:	30 f4       	brcc	.+12     	; 0x659a <midiAllNotesOff+0xae>
				// valid channel, send all notes off
				serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    658e:	80 6b       	ori	r24, 0xB0	; 176
    6590:	dc d3       	rcall	.+1976   	; 0x6d4a <serial1MIDISend>
				serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6592:	8b e7       	ldi	r24, 0x7B	; 123
    6594:	da d3       	rcall	.+1972   	; 0x6d4a <serial1MIDISend>
				serial1MIDISend(0);
    6596:	80 e0       	ldi	r24, 0x00	; 0
    6598:	d8 d3       	rcall	.+1968   	; 0x6d4a <serial1MIDISend>
    659a:	d3 94       	inc	r13
			}
		}
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
    659c:	83 e0       	ldi	r24, 0x03	; 3
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    659e:	8d 15       	cp	r24, r13
    65a0:	08 f0       	brcs	.+2      	; 0x65a4 <midiAllNotesOff+0xb8>
    65a2:	b0 cf       	rjmp	.-160    	; 0x6504 <midiAllNotesOff+0x18>
    65a4:	df 91       	pop	r29
		// V 0.69 send all notes off to out channel of that manual
		// caution: all notes off ist sent to midi out even if multiple note off are also sent by HW via pipe_message
		// all notes off on midi out is not limited to note range of split range
		splitRange++;
	}
}
    65a6:	cf 91       	pop	r28
    65a8:	1f 91       	pop	r17
    65aa:	0f 91       	pop	r16
    65ac:	ff 90       	pop	r15
    65ae:	ef 90       	pop	r14
    65b0:	df 90       	pop	r13
    65b2:	cf 90       	pop	r12
    65b4:	bf 90       	pop	r11
    65b6:	08 95       	ret

000065b8 <midi_ManualOff>:
    65b8:	0f 93       	push	r16

void midi_ManualOff(uint8_t manual){
    65ba:	1f 93       	push	r17
    65bc:	cf 93       	push	r28
    65be:	df 93       	push	r29
    65c0:	c8 2f       	mov	r28, r24
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    65c2:	84 30       	cpi	r24, 0x04	; 4
    65c4:	00 f5       	brcc	.+64     	; 0x6606 <midi_ManualOff+0x4e>
    65c6:	08 2f       	mov	r16, r24
    65c8:	10 e0       	ldi	r17, 0x00	; 0
    65ca:	f8 01       	movw	r30, r16
    65cc:	ee 0f       	add	r30, r30
    65ce:	ff 1f       	adc	r31, r31
    65d0:	e2 5e       	subi	r30, 0xE2	; 226
    65d2:	f7 4f       	sbci	r31, 0xF7	; 247
    65d4:	d0 81       	ld	r29, Z
    65d6:	df 3f       	cpi	r29, 0xFF	; 255
    65d8:	b1 f0       	breq	.+44     	; 0x6606 <midi_ManualOff+0x4e>
    65da:	f8 01       	movw	r30, r16
    65dc:	ee 0f       	add	r30, r30
    65de:	ff 1f       	adc	r31, r31
    65e0:	e2 5e       	subi	r30, 0xE2	; 226
    65e2:	f7 4f       	sbci	r31, 0xF7	; 247
    65e4:	81 81       	ldd	r24, Z+1	; 0x01
    65e6:	8f 3f       	cpi	r24, 0xFF	; 255
    65e8:	31 f4       	brne	.+12     	; 0x65f6 <midi_ManualOff+0x3e>
    65ea:	0d c0       	rjmp	.+26     	; 0x6606 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
    65ec:	40 e8       	ldi	r20, 0x80	; 128
    65ee:	6d 2f       	mov	r22, r29
    65f0:	8c 2f       	mov	r24, r28
    65f2:	23 df       	rcall	.-442    	; 0x643a <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    65f4:	df 5f       	subi	r29, 0xFF	; 255
    65f6:	f8 01       	movw	r30, r16
    65f8:	ee 0f       	add	r30, r30
    65fa:	ff 1f       	adc	r31, r31
    65fc:	e2 5e       	subi	r30, 0xE2	; 226
    65fe:	f7 4f       	sbci	r31, 0xF7	; 247
    6600:	81 81       	ldd	r24, Z+1	; 0x01
    6602:	8d 17       	cp	r24, r29
    6604:	98 f7       	brcc	.-26     	; 0x65ec <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF | NOTE_NOREDIRECT);
		}
	}
	// V 0.69 send all notes off to out channel of that manual
	uint8_t midiChanel = midiOutMap[manual].hw_channel;
    6606:	ec 2f       	mov	r30, r28
    6608:	f0 e0       	ldi	r31, 0x00	; 0
    660a:	ee 0f       	add	r30, r30
    660c:	ff 1f       	adc	r31, r31
    660e:	e8 5d       	subi	r30, 0xD8	; 216
    6610:	f6 4f       	sbci	r31, 0xF6	; 246
    6612:	80 81       	ld	r24, Z
	if (midiChanel <= MIDI_CHANNEL_MAX){
    6614:	80 31       	cpi	r24, 0x10	; 16
    6616:	30 f4       	brcc	.+12     	; 0x6624 <midi_ManualOff+0x6c>
		// valid channel, send all notes off
		serial1MIDISend(MIDI_CTRLCHG | midiChanel);
    6618:	80 6b       	ori	r24, 0xB0	; 176
    661a:	97 d3       	rcall	.+1838   	; 0x6d4a <serial1MIDISend>
		serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    661c:	8b e7       	ldi	r24, 0x7B	; 123
    661e:	95 d3       	rcall	.+1834   	; 0x6d4a <serial1MIDISend>
		serial1MIDISend(0);
    6620:	80 e0       	ldi	r24, 0x00	; 0
    6622:	93 d3       	rcall	.+1830   	; 0x6d4a <serial1MIDISend>
    6624:	df 91       	pop	r29

	}
}
    6626:	cf 91       	pop	r28
    6628:	1f 91       	pop	r17
    662a:	0f 91       	pop	r16
    662c:	08 95       	ret

0000662e <midi_AllManualsOff>:
    662e:	cf 93       	push	r28

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6630:	c0 e0       	ldi	r28, 0x00	; 0
    6632:	03 c0       	rjmp	.+6      	; 0x663a <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6634:	8c 2f       	mov	r24, r28
    6636:	c0 df       	rcall	.-128    	; 0x65b8 <midi_ManualOff>

	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6638:	cf 5f       	subi	r28, 0xFF	; 255
    663a:	c4 30       	cpi	r28, 0x04	; 4
    663c:	d8 f3       	brcs	.-10     	; 0x6634 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    663e:	cf 91       	pop	r28
    6640:	08 95       	ret

00006642 <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    6642:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    6646:	88 23       	and	r24, r24
    6648:	39 f0       	breq	.+14     	; 0x6658 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    664a:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    664e:	81 11       	cpse	r24, r1
    6650:	03 c0       	rjmp	.+6      	; 0x6658 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    6652:	ed df       	rcall	.-38     	; 0x662e <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6654:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    6658:	08 95       	ret

0000665a <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    665a:	0f 93       	push	r16
    665c:	1f 93       	push	r17
    665e:	cf 93       	push	r28
    6660:	df 93       	push	r29
    6662:	06 2f       	mov	r16, r22
    6664:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6666:	d8 2f       	mov	r29, r24
    6668:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    666a:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    666c:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    666e:	3c c0       	rjmp	.+120    	; 0x66e8 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    6670:	4d 2f       	mov	r20, r29
    6672:	50 e0       	ldi	r21, 0x00	; 0
    6674:	2c 2f       	mov	r18, r28
    6676:	30 e0       	ldi	r19, 0x00	; 0
    6678:	fa 01       	movw	r30, r20
    667a:	ee 0f       	add	r30, r30
    667c:	ff 1f       	adc	r31, r31
    667e:	ee 0f       	add	r30, r30
    6680:	ff 1f       	adc	r31, r31
    6682:	e2 0f       	add	r30, r18
    6684:	f3 1f       	adc	r31, r19
    6686:	ee 0f       	add	r30, r30
    6688:	ff 1f       	adc	r31, r31
    668a:	ee 0f       	add	r30, r30
    668c:	ff 1f       	adc	r31, r31
    668e:	e8 5d       	subi	r30, 0xD8	; 216
    6690:	f7 4f       	sbci	r31, 0xF7	; 247
    6692:	80 81       	ld	r24, Z
    6694:	84 30       	cpi	r24, 0x04	; 4
    6696:	38 f5       	brcc	.+78     	; 0x66e6 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6698:	df 01       	movw	r26, r30
    669a:	61 81       	ldd	r22, Z+1	; 0x01
    669c:	70 2f       	mov	r23, r16
    669e:	76 1b       	sub	r23, r22
    66a0:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    66a2:	0a f1       	brmi	.+66     	; 0x66e6 <midiNote_to_Manual+0x8c>
    66a4:	fd 01       	movw	r30, r26
    66a6:	e2 81       	ldd	r30, Z+2	; 0x02
    66a8:	f0 e0       	ldi	r31, 0x00	; 0
    66aa:	a7 2f       	mov	r26, r23
    66ac:	77 0f       	add	r23, r23
    66ae:	bb 0b       	sbc	r27, r27
    66b0:	ae 17       	cp	r26, r30
    66b2:	bf 07       	cpc	r27, r31
    66b4:	c4 f4       	brge	.+48     	; 0x66e6 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    66b6:	fa 01       	movw	r30, r20
    66b8:	ee 0f       	add	r30, r30
    66ba:	ff 1f       	adc	r31, r31
    66bc:	ee 0f       	add	r30, r30
    66be:	ff 1f       	adc	r31, r31
    66c0:	e2 0f       	add	r30, r18
    66c2:	f3 1f       	adc	r31, r19
    66c4:	ee 0f       	add	r30, r30
    66c6:	ff 1f       	adc	r31, r31
    66c8:	ee 0f       	add	r30, r30
    66ca:	ff 1f       	adc	r31, r31
    66cc:	e8 5d       	subi	r30, 0xD8	; 216
    66ce:	f7 4f       	sbci	r31, 0xF7	; 247
    66d0:	93 81       	ldd	r25, Z+3	; 0x03
    66d2:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    66d4:	11 30       	cpi	r17, 0x01	; 1
    66d6:	21 f4       	brne	.+8      	; 0x66e0 <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    66d8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    66dc:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    66e0:	41 2f       	mov	r20, r17
    66e2:	ab de       	rcall	.-682    	; 0x643a <manual_NoteOnOff>
				found |= 0xFF;
    66e4:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    66e6:	cf 5f       	subi	r28, 0xFF	; 255
    66e8:	c4 30       	cpi	r28, 0x04	; 4
    66ea:	08 f4       	brcc	.+2      	; 0x66ee <midiNote_to_Manual+0x94>
    66ec:	c1 cf       	rjmp	.-126    	; 0x6670 <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    66ee:	11 30       	cpi	r17, 0x01	; 1
    66f0:	49 f4       	brne	.+18     	; 0x6704 <midiNote_to_Manual+0xaa>
    66f2:	91 11       	cpse	r25, r1
    66f4:	07 c0       	rjmp	.+14     	; 0x6704 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    66f6:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    66fa:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    66fe:	8f ef       	ldi	r24, 0xFF	; 255
    6700:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    6704:	80 91 26 08 	lds	r24, 0x0826	; 0x800826 <midiThrough>
    6708:	d8 13       	cpse	r29, r24
    670a:	1f c0       	rjmp	.+62     	; 0x674a <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    670c:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <midiThrough+0x1>
    6710:	8f 3f       	cpi	r24, 0xFF	; 255
    6712:	d9 f0       	breq	.+54     	; 0x674a <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    6714:	11 30       	cpi	r17, 0x01	; 1
    6716:	31 f0       	breq	.+12     	; 0x6724 <midiNote_to_Manual+0xca>
    6718:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    671c:	99 23       	and	r25, r25
    671e:	21 f0       	breq	.+8      	; 0x6728 <midiNote_to_Manual+0xce>
    6720:	90 e9       	ldi	r25, 0x90	; 144
    6722:	03 c0       	rjmp	.+6      	; 0x672a <midiNote_to_Manual+0xd0>
    6724:	90 e9       	ldi	r25, 0x90	; 144
    6726:	01 c0       	rjmp	.+2      	; 0x672a <midiNote_to_Manual+0xd0>
    6728:	90 e8       	ldi	r25, 0x80	; 128
    672a:	89 2b       	or	r24, r25
    672c:	0e d3       	rcall	.+1564   	; 0x6d4a <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    672e:	80 2f       	mov	r24, r16
    6730:	0c d3       	rcall	.+1560   	; 0x6d4a <serial1MIDISend>
    6732:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6734:	06 c0       	rjmp	.+12     	; 0x6742 <midiNote_to_Manual+0xe8>
    6736:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    673a:	81 11       	cpse	r24, r1
    673c:	04 c0       	rjmp	.+8      	; 0x6746 <midiNote_to_Manual+0xec>
    673e:	80 e4       	ldi	r24, 0x40	; 64
    6740:	03 c0       	rjmp	.+6      	; 0x6748 <midiNote_to_Manual+0xee>
    6742:	80 e4       	ldi	r24, 0x40	; 64
    6744:	01 c0       	rjmp	.+2      	; 0x6748 <midiNote_to_Manual+0xee>
    6746:	80 e0       	ldi	r24, 0x00	; 0
    6748:	00 d3       	rcall	.+1536   	; 0x6d4a <serial1MIDISend>
    674a:	df 91       	pop	r29
		}
	}
}
    674c:	cf 91       	pop	r28
    674e:	1f 91       	pop	r17
    6750:	0f 91       	pop	r16
    6752:	08 95       	ret

00006754 <midiIn_Process>:
    6754:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6756:	0c f0       	brlt	.+2      	; 0x675a <midiIn_Process+0x6>
    6758:	4f c0       	rjmp	.+158    	; 0x67f8 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    675a:	88 3f       	cpi	r24, 0xF8	; 248
    675c:	b8 f0       	brcs	.+46     	; 0x678c <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    675e:	8e 3f       	cpi	r24, 0xFE	; 254
    6760:	81 f4       	brne	.+32     	; 0x6782 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    6762:	81 e0       	ldi	r24, 0x01	; 1
    6764:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6768:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    676a:	f8 94       	cli
    676c:	06 c0       	rjmp	.+12     	; 0x677a <midiIn_Process+0x26>
    676e:	ef e2       	ldi	r30, 0x2F	; 47
    6770:	f2 e0       	ldi	r31, 0x02	; 2
    6772:	89 e1       	ldi	r24, 0x19	; 25
    6774:	86 83       	std	Z+6, r24	; 0x06
    6776:	17 82       	std	Z+7, r1	; 0x07
    6778:	80 e0       	ldi	r24, 0x00	; 0
    677a:	81 11       	cpse	r24, r1
    677c:	f8 cf       	rjmp	.-16     	; 0x676e <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    677e:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    6780:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    6782:	8f 3f       	cpi	r24, 0xFF	; 255
    6784:	09 f0       	breq	.+2      	; 0x6788 <midiIn_Process+0x34>
    6786:	79 c0       	rjmp	.+242    	; 0x687a <midiIn_Process+0x126>
				midiAllReset();
    6788:	f5 c9       	rjmp	.-3094   	; 0x5b74 <midiAllReset>
    678a:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    678c:	80 93 ec 0b 	sts	0x0BEC, r24	; 0x800bec <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    6790:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6794:	90 e8       	ldi	r25, 0x80	; 128
    6796:	98 0f       	add	r25, r24
    6798:	90 34       	cpi	r25, 0x40	; 64
    679a:	20 f4       	brcc	.+8      	; 0x67a4 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    679c:	82 e0       	ldi	r24, 0x02	; 2
    679e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    67a2:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    67a4:	90 e2       	ldi	r25, 0x20	; 32
    67a6:	98 0f       	add	r25, r24
    67a8:	90 31       	cpi	r25, 0x10	; 16
    67aa:	20 f4       	brcc	.+8      	; 0x67b4 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    67ac:	82 e0       	ldi	r24, 0x02	; 2
    67ae:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    67b2:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    67b4:	82 3f       	cpi	r24, 0xF2	; 242
    67b6:	21 f4       	brne	.+8      	; 0x67c0 <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    67b8:	82 e0       	ldi	r24, 0x02	; 2
    67ba:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    67be:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    67c0:	80 3f       	cpi	r24, 0xF0	; 240
    67c2:	21 f4       	brne	.+8      	; 0x67cc <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    67c4:	8f ef       	ldi	r24, 0xFF	; 255
    67c6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    67ca:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    67cc:	90 e4       	ldi	r25, 0x40	; 64
    67ce:	98 0f       	add	r25, r24
    67d0:	90 32       	cpi	r25, 0x20	; 32
    67d2:	20 f4       	brcc	.+8      	; 0x67dc <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    67d4:	81 e0       	ldi	r24, 0x01	; 1
    67d6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    67da:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    67dc:	81 3f       	cpi	r24, 0xF1	; 241
    67de:	11 f0       	breq	.+4      	; 0x67e4 <midiIn_Process+0x90>
    67e0:	83 3f       	cpi	r24, 0xF3	; 243
    67e2:	21 f4       	brne	.+8      	; 0x67ec <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    67e4:	81 e0       	ldi	r24, 0x01	; 1
    67e6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    67ea:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    67ec:	87 3f       	cpi	r24, 0xF7	; 247
    67ee:	09 f4       	brne	.+2      	; 0x67f2 <midiIn_Process+0x9e>
    67f0:	44 c0       	rjmp	.+136    	; 0x687a <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    67f2:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    67f6:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    67f8:	e0 91 1d 08 	lds	r30, 0x081D	; 0x80081d <midiDataByteCount>
    67fc:	e8 30       	cpi	r30, 0x08	; 8
    67fe:	40 f4       	brcc	.+16     	; 0x6810 <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    6800:	91 e0       	ldi	r25, 0x01	; 1
    6802:	9e 0f       	add	r25, r30
    6804:	90 93 1d 08 	sts	0x081D, r25	; 0x80081d <midiDataByteCount>
    6808:	f0 e0       	ldi	r31, 0x00	; 0
    680a:	ec 51       	subi	r30, 0x1C	; 28
    680c:	f4 4f       	sbci	r31, 0xF4	; 244
    680e:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    6810:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    6814:	8f 3f       	cpi	r24, 0xFF	; 255
    6816:	89 f1       	breq	.+98     	; 0x687a <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    6818:	90 91 1d 08 	lds	r25, 0x081D	; 0x80081d <midiDataByteCount>
    681c:	98 17       	cp	r25, r24
    681e:	68 f1       	brcs	.+90     	; 0x687a <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    6820:	90 91 ec 0b 	lds	r25, 0x0BEC	; 0x800bec <midiLastCommand>
    6824:	90 3f       	cpi	r25, 0xF0	; 240
    6826:	38 f5       	brcc	.+78     	; 0x6876 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6828:	89 2f       	mov	r24, r25
    682a:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    682c:	90 7f       	andi	r25, 0xF0	; 240
    682e:	90 39       	cpi	r25, 0x90	; 144
    6830:	71 f0       	breq	.+28     	; 0x684e <midiIn_Process+0xfa>
    6832:	18 f4       	brcc	.+6      	; 0x683a <midiIn_Process+0xe6>
    6834:	90 38       	cpi	r25, 0x80	; 128
    6836:	31 f0       	breq	.+12     	; 0x6844 <midiIn_Process+0xf0>
    6838:	1e c0       	rjmp	.+60     	; 0x6876 <midiIn_Process+0x122>
    683a:	90 3b       	cpi	r25, 0xB0	; 176
    683c:	99 f0       	breq	.+38     	; 0x6864 <midiIn_Process+0x110>
    683e:	90 3c       	cpi	r25, 0xC0	; 192
    6840:	b9 f0       	breq	.+46     	; 0x6870 <midiIn_Process+0x11c>
    6842:	19 c0       	rjmp	.+50     	; 0x6876 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6844:	40 e0       	ldi	r20, 0x00	; 0
    6846:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    684a:	07 df       	rcall	.-498    	; 0x665a <midiNote_to_Manual>
						break;
    684c:	14 c0       	rjmp	.+40     	; 0x6876 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    684e:	90 91 e5 0b 	lds	r25, 0x0BE5	; 0x800be5 <midiDataByte+0x1>
    6852:	91 11       	cpse	r25, r1
    6854:	02 c0       	rjmp	.+4      	; 0x685a <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6856:	40 e0       	ldi	r20, 0x00	; 0
    6858:	01 c0       	rjmp	.+2      	; 0x685c <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    685a:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    685c:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    6860:	fc de       	rcall	.-520    	; 0x665a <midiNote_to_Manual>
						break;
    6862:	09 c0       	rjmp	.+18     	; 0x6876 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6864:	90 91 e4 0b 	lds	r25, 0x0BE4	; 0x800be4 <midiDataByte>
    6868:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    686a:	29 f4       	brne	.+10     	; 0x6876 <midiIn_Process+0x122>
    686c:	3f de       	rcall	.-898    	; 0x64ec <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    686e:	03 c0       	rjmp	.+6      	; 0x6876 <midiIn_Process+0x122>
    6870:	60 91 e4 0b 	lds	r22, 0x0BE4	; 0x800be4 <midiDataByte>
    6874:	04 dc       	rcall	.-2040   	; 0x607e <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6876:	10 92 1d 08 	sts	0x081D, r1	; 0x80081d <midiDataByteCount>
    687a:	08 95       	ret

0000687c <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    687c:	90 91 4d 16 	lds	r25, 0x164D	; 0x80164d <serESPMidiTmp+0x2>
    6880:	89 2f       	mov	r24, r25
    6882:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6884:	90 7f       	andi	r25, 0xF0	; 240
    6886:	90 38       	cpi	r25, 0x80	; 128
    6888:	49 f0       	breq	.+18     	; 0x689c <proc_ESPmidi+0x20>
    688a:	18 f4       	brcc	.+6      	; 0x6892 <proc_ESPmidi+0x16>
    688c:	99 23       	and	r25, r25
    688e:	e1 f0       	breq	.+56     	; 0x68c8 <proc_ESPmidi+0x4c>
    6890:	08 95       	ret
    6892:	90 39       	cpi	r25, 0x90	; 144
    6894:	41 f0       	breq	.+16     	; 0x68a6 <proc_ESPmidi+0x2a>
    6896:	90 3b       	cpi	r25, 0xB0	; 176
    6898:	89 f0       	breq	.+34     	; 0x68bc <proc_ESPmidi+0x40>
    689a:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    689c:	40 e0       	ldi	r20, 0x00	; 0
    689e:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    68a2:	db ce       	rjmp	.-586    	; 0x665a <midiNote_to_Manual>
		break;
    68a4:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    68a6:	90 91 4b 16 	lds	r25, 0x164B	; 0x80164b <serESPMidiTmp>
    68aa:	91 11       	cpse	r25, r1
    68ac:	02 c0       	rjmp	.+4      	; 0x68b2 <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    68ae:	40 e0       	ldi	r20, 0x00	; 0
    68b0:	01 c0       	rjmp	.+2      	; 0x68b4 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    68b2:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    68b4:	60 91 4c 16 	lds	r22, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    68b8:	d0 ce       	rjmp	.-608    	; 0x665a <midiNote_to_Manual>
		break;
    68ba:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    68bc:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    68c0:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    68c2:	61 f4       	brne	.+24     	; 0x68dc <proc_ESPmidi+0x60>
    68c4:	13 ce       	rjmp	.-986    	; 0x64ec <midiAllNotesOff>
    68c6:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    68c8:	90 91 4c 16 	lds	r25, 0x164C	; 0x80164c <serESPMidiTmp+0x1>
    68cc:	89 2f       	mov	r24, r25
    68ce:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    68d0:	90 7f       	andi	r25, 0xF0	; 240
    68d2:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    68d4:	19 f4       	brne	.+6      	; 0x68dc <proc_ESPmidi+0x60>
    68d6:	60 91 4b 16 	lds	r22, 0x164B	; 0x80164b <serESPMidiTmp>
    68da:	d1 cb       	rjmp	.-2142   	; 0x607e <midi_ProgramChange>
    68dc:	08 95       	ret

000068de <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    68de:	bf 92       	push	r11
    68e0:	cf 92       	push	r12
    68e2:	df 92       	push	r13
    68e4:	ef 92       	push	r14
    68e6:	ff 92       	push	r15
    68e8:	0f 93       	push	r16
    68ea:	1f 93       	push	r17
    68ec:	cf 93       	push	r28
    68ee:	df 93       	push	r29
    68f0:	d8 2f       	mov	r29, r24
    68f2:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    68f4:	8d d2       	rcall	.+1306   	; 0x6e10 <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    68f6:	0c 2f       	mov	r16, r28
    68f8:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    68fa:	cf 71       	andi	r28, 0x1F	; 31
    68fc:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    68fe:	00 32       	cpi	r16, 0x20	; 32
    6900:	09 f4       	brne	.+2      	; 0x6904 <midiKeyPress_Process+0x26>
    6902:	b5 c0       	rjmp	.+362    	; 0x6a6e <midiKeyPress_Process+0x190>
    6904:	00 23       	and	r16, r16
    6906:	09 f4       	brne	.+2      	; 0x690a <midiKeyPress_Process+0x2c>
    6908:	b4 c0       	rjmp	.+360    	; 0x6a72 <midiKeyPress_Process+0x194>
    690a:	b7 c0       	rjmp	.+366    	; 0x6a7a <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    690c:	d0 ff       	sbrs	r29, 0
    690e:	ac c0       	rjmp	.+344    	; 0x6a68 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    6910:	20 e2       	ldi	r18, 0x20	; 32
    6912:	c2 9f       	mul	r28, r18
    6914:	c0 01       	movw	r24, r0
    6916:	11 24       	eor	r1, r1
    6918:	fb 2c       	mov	r15, r11
    691a:	f8 2a       	or	r15, r24
    691c:	8f 2d       	mov	r24, r15
    691e:	6a dd       	rcall	.-1324   	; 0x63f4 <moduleBit_to_manualNote>
    6920:	c8 2e       	mov	r12, r24
    6922:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6924:	18 2f       	mov	r17, r24
    6926:	8f 3f       	cpi	r24, 0xFF	; 255
    6928:	09 f4       	brne	.+2      	; 0x692c <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    692a:	94 c0       	rjmp	.+296    	; 0x6a54 <midiKeyPress_Process+0x176>
    692c:	69 2f       	mov	r22, r25
    692e:	7a dc       	rcall	.-1804   	; 0x6224 <Manual_to_MidiNote>
    6930:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    6932:	8f 3f       	cpi	r24, 0xFF	; 255
    6934:	09 f1       	breq	.+66     	; 0x6978 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    6936:	00 32       	cpi	r16, 0x20	; 32
    6938:	31 f0       	breq	.+12     	; 0x6946 <midiKeyPress_Process+0x68>
    693a:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    693e:	99 23       	and	r25, r25
    6940:	21 f0       	breq	.+8      	; 0x694a <midiKeyPress_Process+0x6c>
    6942:	90 e9       	ldi	r25, 0x90	; 144
    6944:	03 c0       	rjmp	.+6      	; 0x694c <midiKeyPress_Process+0x6e>
    6946:	90 e9       	ldi	r25, 0x90	; 144
    6948:	01 c0       	rjmp	.+2      	; 0x694c <midiKeyPress_Process+0x6e>
    694a:	90 e8       	ldi	r25, 0x80	; 128
    694c:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    694e:	fd d1       	rcall	.+1018   	; 0x6d4a <serial1MIDISend>
    6950:	8d 2d       	mov	r24, r13
    6952:	fb d1       	rcall	.+1014   	; 0x6d4a <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6954:	01 11       	cpse	r16, r1
    6956:	06 c0       	rjmp	.+12     	; 0x6964 <midiKeyPress_Process+0x86>
    6958:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_Setting+0x1>
    695c:	81 11       	cpse	r24, r1
    695e:	04 c0       	rjmp	.+8      	; 0x6968 <midiKeyPress_Process+0x8a>
    6960:	80 e4       	ldi	r24, 0x40	; 64
    6962:	03 c0       	rjmp	.+6      	; 0x696a <midiKeyPress_Process+0x8c>
    6964:	80 e4       	ldi	r24, 0x40	; 64
    6966:	01 c0       	rjmp	.+2      	; 0x696a <midiKeyPress_Process+0x8c>
    6968:	80 e0       	ldi	r24, 0x00	; 0
    696a:	ef d1       	rcall	.+990    	; 0x6d4a <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    696c:	00 32       	cpi	r16, 0x20	; 32
    696e:	21 f4       	brne	.+8      	; 0x6978 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    6970:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    6974:	e0 92 05 02 	sts	0x0205, r14	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    6978:	41 e0       	ldi	r20, 0x01	; 1
    697a:	00 32       	cpi	r16, 0x20	; 32
    697c:	09 f0       	breq	.+2      	; 0x6980 <midiKeyPress_Process+0xa2>
    697e:	40 e0       	ldi	r20, 0x00	; 0
    6980:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    6982:	11 11       	cpse	r17, r1
    6984:	19 c0       	rjmp	.+50     	; 0x69b8 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6986:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers>
    698a:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    698c:	19 f4       	brne	.+6      	; 0x6994 <midiKeyPress_Process+0xb6>
    698e:	6e 2d       	mov	r22, r14
    6990:	81 e0       	ldi	r24, 0x01	; 1
    6992:	53 dd       	rcall	.-1370   	; 0x643a <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    6994:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x1>
    6998:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    699a:	21 f4       	brne	.+8      	; 0x69a4 <midiKeyPress_Process+0xc6>
    699c:	4d 2d       	mov	r20, r13
    699e:	6e 2d       	mov	r22, r14
    69a0:	82 e0       	ldi	r24, 0x02	; 2
    69a2:	4b dd       	rcall	.-1386   	; 0x643a <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    69a4:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x3>
    69a8:	8f 3f       	cpi	r24, 0xFF	; 255
    69aa:	09 f0       	breq	.+2      	; 0x69ae <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    69ac:	53 c0       	rjmp	.+166    	; 0x6a54 <midiKeyPress_Process+0x176>
    69ae:	4d 2d       	mov	r20, r13
    69b0:	6e 2d       	mov	r22, r14
    69b2:	83 e0       	ldi	r24, 0x03	; 3
    69b4:	42 dd       	rcall	.-1404   	; 0x643a <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    69b6:	4e c0       	rjmp	.+156    	; 0x6a54 <midiKeyPress_Process+0x176>
    69b8:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    69ba:	c9 f4       	brne	.+50     	; 0x69ee <midiKeyPress_Process+0x110>
    69bc:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x2>
    69c0:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    69c2:	19 f4       	brne	.+6      	; 0x69ca <midiKeyPress_Process+0xec>
    69c4:	6e 2d       	mov	r22, r14
    69c6:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    69c8:	38 dd       	rcall	.-1424   	; 0x643a <manual_NoteOnOff>
    69ca:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x4>
    69ce:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    69d0:	21 f4       	brne	.+8      	; 0x69da <midiKeyPress_Process+0xfc>
    69d2:	4d 2d       	mov	r20, r13
    69d4:	6e 2d       	mov	r22, r14
    69d6:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    69d8:	30 dd       	rcall	.-1440   	; 0x643a <manual_NoteOnOff>
    69da:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x6>
    69de:	8f 3f       	cpi	r24, 0xFF	; 255
    69e0:	09 f0       	breq	.+2      	; 0x69e4 <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    69e2:	38 c0       	rjmp	.+112    	; 0x6a54 <midiKeyPress_Process+0x176>
    69e4:	4d 2d       	mov	r20, r13
    69e6:	6e 2d       	mov	r22, r14
    69e8:	80 e0       	ldi	r24, 0x00	; 0
    69ea:	27 dd       	rcall	.-1458   	; 0x643a <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    69ec:	33 c0       	rjmp	.+102    	; 0x6a54 <midiKeyPress_Process+0x176>
    69ee:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    69f0:	c1 f4       	brne	.+48     	; 0x6a22 <midiKeyPress_Process+0x144>
    69f2:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    69f6:	8f 3f       	cpi	r24, 0xFF	; 255
    69f8:	19 f4       	brne	.+6      	; 0x6a00 <midiKeyPress_Process+0x122>
    69fa:	6e 2d       	mov	r22, r14
    69fc:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    69fe:	1d dd       	rcall	.-1478   	; 0x643a <manual_NoteOnOff>
    6a00:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6a04:	8f 3f       	cpi	r24, 0xFF	; 255
    6a06:	21 f4       	brne	.+8      	; 0x6a10 <midiKeyPress_Process+0x132>
    6a08:	4d 2d       	mov	r20, r13
    6a0a:	6e 2d       	mov	r22, r14
    6a0c:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    6a0e:	15 dd       	rcall	.-1494   	; 0x643a <manual_NoteOnOff>
    6a10:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6a14:	8f 3f       	cpi	r24, 0xFF	; 255
    6a16:	f1 f4       	brne	.+60     	; 0x6a54 <midiKeyPress_Process+0x176>
    6a18:	4d 2d       	mov	r20, r13
    6a1a:	6e 2d       	mov	r22, r14
    6a1c:	81 e0       	ldi	r24, 0x01	; 1
    6a1e:	0d dd       	rcall	.-1510   	; 0x643a <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    6a20:	19 c0       	rjmp	.+50     	; 0x6a54 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    6a22:	13 30       	cpi	r17, 0x03	; 3
    6a24:	b9 f4       	brne	.+46     	; 0x6a54 <midiKeyPress_Process+0x176>
    6a26:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6a2a:	8f 3f       	cpi	r24, 0xFF	; 255
    6a2c:	19 f4       	brne	.+6      	; 0x6a34 <midiKeyPress_Process+0x156>
    6a2e:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    6a30:	80 e0       	ldi	r24, 0x00	; 0
    6a32:	03 dd       	rcall	.-1530   	; 0x643a <manual_NoteOnOff>
    6a34:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6a38:	8f 3f       	cpi	r24, 0xFF	; 255
    6a3a:	21 f4       	brne	.+8      	; 0x6a44 <midiKeyPress_Process+0x166>
    6a3c:	4d 2d       	mov	r20, r13
    6a3e:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    6a40:	81 e0       	ldi	r24, 0x01	; 1
    6a42:	fb dc       	rcall	.-1546   	; 0x643a <manual_NoteOnOff>
    6a44:	80 91 1c 08 	lds	r24, 0x081C	; 0x80081c <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6a48:	8f 3f       	cpi	r24, 0xFF	; 255
    6a4a:	21 f4       	brne	.+8      	; 0x6a54 <midiKeyPress_Process+0x176>
    6a4c:	4d 2d       	mov	r20, r13
    6a4e:	6e 2d       	mov	r22, r14
    6a50:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    6a52:	f3 dc       	rcall	.-1562   	; 0x643a <manual_NoteOnOff>
    6a54:	8f 2d       	mov	r24, r15
    6a56:	25 d9       	rcall	.-3510   	; 0x5ca2 <moduleBit_to_registerNr>
    6a58:	00 32       	cpi	r16, 0x20	; 32
    6a5a:	11 f4       	brne	.+4      	; 0x6a60 <midiKeyPress_Process+0x182>
    6a5c:	20 e8       	ldi	r18, 0x80	; 128
    6a5e:	01 c0       	rjmp	.+2      	; 0x6a62 <midiKeyPress_Process+0x184>
    6a60:	20 e0       	ldi	r18, 0x00	; 0
    6a62:	82 2b       	or	r24, r18
    6a64:	80 93 33 09 	sts	0x0933, r24	; 0x800933 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6a68:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6a6a:	cf 5f       	subi	r28, 0xFF	; 255
    6a6c:	03 c0       	rjmp	.+6      	; 0x6a74 <midiKeyPress_Process+0x196>
    6a6e:	c0 e0       	ldi	r28, 0x00	; 0
    6a70:	01 c0       	rjmp	.+2      	; 0x6a74 <midiKeyPress_Process+0x196>
    6a72:	c0 e0       	ldi	r28, 0x00	; 0
    6a74:	c8 30       	cpi	r28, 0x08	; 8
    6a76:	08 f4       	brcc	.+2      	; 0x6a7a <midiKeyPress_Process+0x19c>
    6a78:	49 cf       	rjmp	.-366    	; 0x690c <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6a7a:	df 91       	pop	r29
    6a7c:	cf 91       	pop	r28
    6a7e:	1f 91       	pop	r17
    6a80:	0f 91       	pop	r16
    6a82:	ff 90       	pop	r15
    6a84:	ef 90       	pop	r14
    6a86:	df 90       	pop	r13
    6a88:	cf 90       	pop	r12
    6a8a:	bf 90       	pop	r11
    6a8c:	08 95       	ret

00006a8e <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    6a8e:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6a90:	c0 e0       	ldi	r28, 0x00	; 0
    6a92:	10 c0       	rjmp	.+32     	; 0x6ab4 <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    6a94:	ec 2f       	mov	r30, r28
    6a96:	f0 e0       	ldi	r31, 0x00	; 0
    6a98:	ee 0f       	add	r30, r30
    6a9a:	ff 1f       	adc	r31, r31
    6a9c:	e8 5d       	subi	r30, 0xD8	; 216
    6a9e:	f6 4f       	sbci	r31, 0xF6	; 246
    6aa0:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    6aa2:	80 31       	cpi	r24, 0x10	; 16
    6aa4:	30 f4       	brcc	.+12     	; 0x6ab2 <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6aa6:	80 6b       	ori	r24, 0xB0	; 176
    6aa8:	50 d1       	rcall	.+672    	; 0x6d4a <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6aaa:	8b e7       	ldi	r24, 0x7B	; 123
    6aac:	4e d1       	rcall	.+668    	; 0x6d4a <serial1MIDISend>
			serial1MIDISend(0);
    6aae:	80 e0       	ldi	r24, 0x00	; 0
    6ab0:	4c d1       	rcall	.+664    	; 0x6d4a <serial1MIDISend>
    6ab2:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6ab4:	c4 30       	cpi	r28, 0x04	; 4
    6ab6:	70 f3       	brcs	.-36     	; 0x6a94 <midiSendAllNotesOff+0x6>
    6ab8:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    6aba:	08 95       	ret

00006abc <midi_SendActiveSense>:
    6abc:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    6abe:	45 c1       	rjmp	.+650    	; 0x6d4a <serial1MIDISend>
    6ac0:	08 95       	ret

00006ac2 <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    6ac2:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6ac6:	88 23       	and	r24, r24
    6ac8:	21 f0       	breq	.+8      	; 0x6ad2 <midi_CheckTxActiveSense+0x10>
    6aca:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    6ace:	8f 3f       	cpi	r24, 0xFF	; 255
    6ad0:	99 f4       	brne	.+38     	; 0x6af8 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    6ad2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6ad4:	f8 94       	cli
    6ad6:	81 e0       	ldi	r24, 0x01	; 1
    6ad8:	06 c0       	rjmp	.+12     	; 0x6ae6 <midi_CheckTxActiveSense+0x24>
    6ada:	ef e2       	ldi	r30, 0x2F	; 47
    6adc:	f2 e0       	ldi	r31, 0x02	; 2
    6ade:	8a e0       	ldi	r24, 0x0A	; 10
    6ae0:	80 8b       	std	Z+16, r24	; 0x10
    6ae2:	11 8a       	std	Z+17, r1	; 0x11
    6ae4:	80 e0       	ldi	r24, 0x00	; 0
    6ae6:	81 11       	cpse	r24, r1
    6ae8:	f8 cf       	rjmp	.-16     	; 0x6ada <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6aea:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    6aec:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting>
    6af0:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    6af2:	e4 df       	rcall	.-56     	; 0x6abc <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    6af4:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6af8:	08 95       	ret

00006afa <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    6afa:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    6afe:	8f e1       	ldi	r24, 0x1F	; 31
    6b00:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    6b04:	e9 ec       	ldi	r30, 0xC9	; 201
    6b06:	f0 e0       	ldi	r31, 0x00	; 0
    6b08:	80 81       	ld	r24, Z
    6b0a:	88 69       	ori	r24, 0x98	; 152
    6b0c:	80 83       	st	Z, r24
    6b0e:	ea ec       	ldi	r30, 0xCA	; 202
    6b10:	f0 e0       	ldi	r31, 0x00	; 0
    6b12:	80 81       	ld	r24, Z
    6b14:	86 60       	ori	r24, 0x06	; 6
    6b16:	80 83       	st	Z, r24
    6b18:	10 92 44 16 	sts	0x1644, r1	; 0x801644 <midiRxInIndex>
    6b1c:	10 92 53 16 	sts	0x1653, r1	; 0x801653 <midiRxOutIndex>
    6b20:	10 92 ef 13 	sts	0x13EF, r1	; 0x8013ef <midiTxInIndex>
    6b24:	10 92 fc 13 	sts	0x13FC, r1	; 0x8013fc <midiTxOutIndex>
    6b28:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiRxOvfl>
    6b2c:	10 92 00 14 	sts	0x1400, r1	; 0x801400 <midiTxOvfl>
    6b30:	10 92 4f 16 	sts	0x164F, r1	; 0x80164f <midiRxOvflCount>
    6b34:	10 92 56 16 	sts	0x1656, r1	; 0x801656 <midiTxOvflCount>
    6b38:	10 92 41 15 	sts	0x1541, r1	; 0x801541 <midiRxBuffUsage>
    6b3c:	10 92 4a 16 	sts	0x164A, r1	; 0x80164a <midiTxBuffUsage>
    6b40:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6b44:	08 95       	ret

00006b46 <__vector_36>:
    6b46:	1f 92       	push	r1
    6b48:	0f 92       	push	r0
    6b4a:	0f b6       	in	r0, 0x3f	; 63
    6b4c:	0f 92       	push	r0
    6b4e:	11 24       	eor	r1, r1
    6b50:	0b b6       	in	r0, 0x3b	; 59
    6b52:	0f 92       	push	r0
    6b54:	8f 93       	push	r24
    6b56:	9f 93       	push	r25
    6b58:	ef 93       	push	r30
    6b5a:	ff 93       	push	r31
    6b5c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6b60:	e0 91 44 16 	lds	r30, 0x1644	; 0x801644 <midiRxInIndex>
    6b64:	f0 e0       	ldi	r31, 0x00	; 0
    6b66:	ef 5b       	subi	r30, 0xBF	; 191
    6b68:	fb 4e       	sbci	r31, 0xEB	; 235
    6b6a:	80 83       	st	Z, r24
    6b6c:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6b70:	8f 5f       	subi	r24, 0xFF	; 255
    6b72:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6b76:	89 13       	cpse	r24, r25
    6b78:	0e c0       	rjmp	.+28     	; 0x6b96 <__vector_36+0x50>
    6b7a:	80 91 4f 16 	lds	r24, 0x164F	; 0x80164f <midiRxOvflCount>
    6b7e:	88 23       	and	r24, r24
    6b80:	31 f0       	breq	.+12     	; 0x6b8e <__vector_36+0x48>
    6b82:	8f 3f       	cpi	r24, 0xFF	; 255
    6b84:	51 f0       	breq	.+20     	; 0x6b9a <__vector_36+0x54>
    6b86:	8f 5f       	subi	r24, 0xFF	; 255
    6b88:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6b8c:	06 c0       	rjmp	.+12     	; 0x6b9a <__vector_36+0x54>
    6b8e:	81 e0       	ldi	r24, 0x01	; 1
    6b90:	80 93 4f 16 	sts	0x164F, r24	; 0x80164f <midiRxOvflCount>
    6b94:	02 c0       	rjmp	.+4      	; 0x6b9a <__vector_36+0x54>
    6b96:	80 93 44 16 	sts	0x1644, r24	; 0x801644 <midiRxInIndex>
    6b9a:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6b9e:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6ba2:	89 17       	cp	r24, r25
    6ba4:	30 f4       	brcc	.+12     	; 0x6bb2 <__vector_36+0x6c>
    6ba6:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6baa:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6bae:	89 1b       	sub	r24, r25
    6bb0:	05 c0       	rjmp	.+10     	; 0x6bbc <__vector_36+0x76>
    6bb2:	80 91 44 16 	lds	r24, 0x1644	; 0x801644 <midiRxInIndex>
    6bb6:	90 91 53 16 	lds	r25, 0x1653	; 0x801653 <midiRxOutIndex>
    6bba:	89 1b       	sub	r24, r25
    6bbc:	90 91 41 15 	lds	r25, 0x1541	; 0x801541 <midiRxBuffUsage>
    6bc0:	98 17       	cp	r25, r24
    6bc2:	10 f4       	brcc	.+4      	; 0x6bc8 <__vector_36+0x82>
    6bc4:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <midiRxBuffUsage>
    6bc8:	80 91 d9 18 	lds	r24, 0x18D9	; 0x8018d9 <midiRxBytesCount>
    6bcc:	90 91 da 18 	lds	r25, 0x18DA	; 0x8018da <midiRxBytesCount+0x1>
    6bd0:	01 96       	adiw	r24, 0x01	; 1
    6bd2:	90 93 da 18 	sts	0x18DA, r25	; 0x8018da <midiRxBytesCount+0x1>
    6bd6:	80 93 d9 18 	sts	0x18D9, r24	; 0x8018d9 <midiRxBytesCount>
    6bda:	ff 91       	pop	r31
    6bdc:	ef 91       	pop	r30
    6bde:	9f 91       	pop	r25
    6be0:	8f 91       	pop	r24
    6be2:	0f 90       	pop	r0
    6be4:	0b be       	out	0x3b, r0	; 59
    6be6:	0f 90       	pop	r0
    6be8:	0f be       	out	0x3f, r0	; 63
    6bea:	0f 90       	pop	r0
    6bec:	1f 90       	pop	r1
    6bee:	18 95       	reti

00006bf0 <__vector_37>:
    6bf0:	1f 92       	push	r1
    6bf2:	0f 92       	push	r0
    6bf4:	0f b6       	in	r0, 0x3f	; 63
    6bf6:	0f 92       	push	r0
    6bf8:	11 24       	eor	r1, r1
    6bfa:	0b b6       	in	r0, 0x3b	; 59
    6bfc:	0f 92       	push	r0
    6bfe:	8f 93       	push	r24
    6c00:	9f 93       	push	r25
    6c02:	ef 93       	push	r30
    6c04:	ff 93       	push	r31
    6c06:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c0a:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6c0e:	98 17       	cp	r25, r24
    6c10:	b9 f0       	breq	.+46     	; 0x6c40 <__vector_37+0x50>
    6c12:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c16:	f0 e0       	ldi	r31, 0x00	; 0
    6c18:	ee 5b       	subi	r30, 0xBE	; 190
    6c1a:	fa 4e       	sbci	r31, 0xEA	; 234
    6c1c:	80 81       	ld	r24, Z
    6c1e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6c22:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6c26:	8f 5f       	subi	r24, 0xFF	; 255
    6c28:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <midiTxOutIndex>
    6c2c:	80 91 50 16 	lds	r24, 0x1650	; 0x801650 <midiTxBytesCount>
    6c30:	90 91 51 16 	lds	r25, 0x1651	; 0x801651 <midiTxBytesCount+0x1>
    6c34:	01 96       	adiw	r24, 0x01	; 1
    6c36:	90 93 51 16 	sts	0x1651, r25	; 0x801651 <midiTxBytesCount+0x1>
    6c3a:	80 93 50 16 	sts	0x1650, r24	; 0x801650 <midiTxBytesCount>
    6c3e:	05 c0       	rjmp	.+10     	; 0x6c4a <__vector_37+0x5a>
    6c40:	e9 ec       	ldi	r30, 0xC9	; 201
    6c42:	f0 e0       	ldi	r31, 0x00	; 0
    6c44:	80 81       	ld	r24, Z
    6c46:	8f 7d       	andi	r24, 0xDF	; 223
    6c48:	80 83       	st	Z, r24
    6c4a:	ff 91       	pop	r31
    6c4c:	ef 91       	pop	r30
    6c4e:	9f 91       	pop	r25
    6c50:	8f 91       	pop	r24
    6c52:	0f 90       	pop	r0
    6c54:	0b be       	out	0x3b, r0	; 59
    6c56:	0f 90       	pop	r0
    6c58:	0f be       	out	0x3f, r0	; 63
    6c5a:	0f 90       	pop	r0
    6c5c:	1f 90       	pop	r1
    6c5e:	18 95       	reti

00006c60 <serial0SER_USBSend>:
    6c60:	e0 91 d7 18 	lds	r30, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    6c64:	f0 91 d8 18 	lds	r31, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    6c68:	a1 ec       	ldi	r26, 0xC1	; 193
    6c6a:	b0 e0       	ldi	r27, 0x00	; 0
    6c6c:	9c 91       	ld	r25, X
    6c6e:	9f 7d       	andi	r25, 0xDF	; 223
    6c70:	9c 93       	st	X, r25
    6c72:	af 01       	movw	r20, r30
    6c74:	4f 5f       	subi	r20, 0xFF	; 255
    6c76:	5f 4f       	sbci	r21, 0xFF	; 255
    6c78:	80 83       	st	Z, r24
    6c7a:	83 e1       	ldi	r24, 0x13	; 19
    6c7c:	4c 3e       	cpi	r20, 0xEC	; 236
    6c7e:	58 07       	cpc	r21, r24
    6c80:	19 f0       	breq	.+6      	; 0x6c88 <serial0SER_USBSend+0x28>
    6c82:	10 f0       	brcs	.+4      	; 0x6c88 <serial0SER_USBSend+0x28>
    6c84:	4d ee       	ldi	r20, 0xED	; 237
    6c86:	5b e0       	ldi	r21, 0x0B	; 11
    6c88:	9f b7       	in	r25, 0x3f	; 63
    6c8a:	f8 94       	cli
    6c8c:	81 e0       	ldi	r24, 0x01	; 1
    6c8e:	05 c0       	rjmp	.+10     	; 0x6c9a <serial0SER_USBSend+0x3a>
    6c90:	20 91 ed 13 	lds	r18, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    6c94:	30 91 ee 13 	lds	r19, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    6c98:	80 e0       	ldi	r24, 0x00	; 0
    6c9a:	81 11       	cpse	r24, r1
    6c9c:	f9 cf       	rjmp	.-14     	; 0x6c90 <serial0SER_USBSend+0x30>
    6c9e:	9f bf       	out	0x3f, r25	; 63
    6ca0:	42 17       	cp	r20, r18
    6ca2:	53 07       	cpc	r21, r19
    6ca4:	49 f4       	brne	.+18     	; 0x6cb8 <serial0SER_USBSend+0x58>
    6ca6:	8f ef       	ldi	r24, 0xFF	; 255
    6ca8:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    6cac:	e1 ec       	ldi	r30, 0xC1	; 193
    6cae:	f0 e0       	ldi	r31, 0x00	; 0
    6cb0:	80 81       	ld	r24, Z
    6cb2:	80 62       	ori	r24, 0x20	; 32
    6cb4:	80 83       	st	Z, r24
    6cb6:	08 95       	ret
    6cb8:	50 93 d8 18 	sts	0x18D8, r21	; 0x8018d8 <serUSBTxInIndex+0x1>
    6cbc:	40 93 d7 18 	sts	0x18D7, r20	; 0x8018d7 <serUSBTxInIndex>
    6cc0:	e1 ec       	ldi	r30, 0xC1	; 193
    6cc2:	f0 e0       	ldi	r31, 0x00	; 0
    6cc4:	80 81       	ld	r24, Z
    6cc6:	80 62       	ori	r24, 0x20	; 32
    6cc8:	80 83       	st	Z, r24
    6cca:	08 95       	ret

00006ccc <serial0USB_logMIDIin>:
    6ccc:	cf 93       	push	r28
    6cce:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6cd2:	99 23       	and	r25, r25
    6cd4:	61 f0       	breq	.+24     	; 0x6cee <serial0USB_logMIDIin+0x22>
    6cd6:	c8 2f       	mov	r28, r24
    6cd8:	89 e6       	ldi	r24, 0x69	; 105
    6cda:	c2 df       	rcall	.-124    	; 0x6c60 <serial0SER_USBSend>
    6cdc:	8c 2f       	mov	r24, r28
    6cde:	82 95       	swap	r24
    6ce0:	8f 70       	andi	r24, 0x0F	; 15
    6ce2:	b5 d2       	rcall	.+1386   	; 0x724e <nibbleToChr>
    6ce4:	bd df       	rcall	.-134    	; 0x6c60 <serial0SER_USBSend>
    6ce6:	8c 2f       	mov	r24, r28
    6ce8:	8f 70       	andi	r24, 0x0F	; 15
    6cea:	b1 d2       	rcall	.+1378   	; 0x724e <nibbleToChr>
    6cec:	b9 df       	rcall	.-142    	; 0x6c60 <serial0SER_USBSend>
    6cee:	cf 91       	pop	r28
    6cf0:	08 95       	ret

00006cf2 <serial1MIDIReadRx>:
    6cf2:	cf 93       	push	r28
    6cf4:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <midiRxInIndex>
    6cf8:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6cfc:	98 17       	cp	r25, r24
    6cfe:	71 f0       	breq	.+28     	; 0x6d1c <serial1MIDIReadRx+0x2a>
    6d00:	e0 91 53 16 	lds	r30, 0x1653	; 0x801653 <midiRxOutIndex>
    6d04:	f0 e0       	ldi	r31, 0x00	; 0
    6d06:	ef 5b       	subi	r30, 0xBF	; 191
    6d08:	fb 4e       	sbci	r31, 0xEB	; 235
    6d0a:	c0 81       	ld	r28, Z
    6d0c:	8c 2f       	mov	r24, r28
    6d0e:	de df       	rcall	.-68     	; 0x6ccc <serial0USB_logMIDIin>
    6d10:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <midiRxOutIndex>
    6d14:	8f 5f       	subi	r24, 0xFF	; 255
    6d16:	80 93 53 16 	sts	0x1653, r24	; 0x801653 <midiRxOutIndex>
    6d1a:	01 c0       	rjmp	.+2      	; 0x6d1e <serial1MIDIReadRx+0x2c>
    6d1c:	cd ef       	ldi	r28, 0xFD	; 253
    6d1e:	8c 2f       	mov	r24, r28
    6d20:	cf 91       	pop	r28
    6d22:	08 95       	ret

00006d24 <serial0USB_logMIDIout>:
    6d24:	cf 93       	push	r28
    6d26:	90 91 52 16 	lds	r25, 0x1652	; 0x801652 <serUSB_Active>
    6d2a:	99 23       	and	r25, r25
    6d2c:	61 f0       	breq	.+24     	; 0x6d46 <serial0USB_logMIDIout+0x22>
    6d2e:	c8 2f       	mov	r28, r24
    6d30:	8f e6       	ldi	r24, 0x6F	; 111
    6d32:	96 df       	rcall	.-212    	; 0x6c60 <serial0SER_USBSend>
    6d34:	8c 2f       	mov	r24, r28
    6d36:	82 95       	swap	r24
    6d38:	8f 70       	andi	r24, 0x0F	; 15
    6d3a:	89 d2       	rcall	.+1298   	; 0x724e <nibbleToChr>
    6d3c:	91 df       	rcall	.-222    	; 0x6c60 <serial0SER_USBSend>
    6d3e:	8c 2f       	mov	r24, r28
    6d40:	8f 70       	andi	r24, 0x0F	; 15
    6d42:	85 d2       	rcall	.+1290   	; 0x724e <nibbleToChr>
    6d44:	8d df       	rcall	.-230    	; 0x6c60 <serial0SER_USBSend>
    6d46:	cf 91       	pop	r28
    6d48:	08 95       	ret

00006d4a <serial1MIDISend>:
    6d4a:	cf 93       	push	r28
    6d4c:	90 91 31 09 	lds	r25, 0x0931	; 0x800931 <midi_Setting+0x1>
    6d50:	99 23       	and	r25, r25
    6d52:	71 f0       	breq	.+28     	; 0x6d70 <serial1MIDISend+0x26>
    6d54:	88 23       	and	r24, r24
    6d56:	64 f4       	brge	.+24     	; 0x6d70 <serial1MIDISend+0x26>
    6d58:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <midiTxLastCmd>
    6d5c:	89 17       	cp	r24, r25
    6d5e:	09 f4       	brne	.+2      	; 0x6d62 <serial1MIDISend+0x18>
    6d60:	55 c0       	rjmp	.+170    	; 0x6e0c <serial1MIDISend+0xc2>
    6d62:	80 3a       	cpi	r24, 0xA0	; 160
    6d64:	18 f4       	brcc	.+6      	; 0x6d6c <serial1MIDISend+0x22>
    6d66:	80 93 fd 13 	sts	0x13FD, r24	; 0x8013fd <midiTxLastCmd>
    6d6a:	02 c0       	rjmp	.+4      	; 0x6d70 <serial1MIDISend+0x26>
    6d6c:	10 92 fd 13 	sts	0x13FD, r1	; 0x8013fd <midiTxLastCmd>
    6d70:	2f b7       	in	r18, 0x3f	; 63
    6d72:	f8 94       	cli
    6d74:	91 e0       	ldi	r25, 0x01	; 1
    6d76:	06 c0       	rjmp	.+12     	; 0x6d84 <serial1MIDISend+0x3a>
    6d78:	ef e2       	ldi	r30, 0x2F	; 47
    6d7a:	f2 e0       	ldi	r31, 0x02	; 2
    6d7c:	9a e0       	ldi	r25, 0x0A	; 10
    6d7e:	90 8b       	std	Z+16, r25	; 0x10
    6d80:	11 8a       	std	Z+17, r1	; 0x11
    6d82:	90 e0       	ldi	r25, 0x00	; 0
    6d84:	91 11       	cpse	r25, r1
    6d86:	f8 cf       	rjmp	.-16     	; 0x6d78 <serial1MIDISend+0x2e>
    6d88:	c8 2f       	mov	r28, r24
    6d8a:	2f bf       	out	0x3f, r18	; 63
    6d8c:	e9 ec       	ldi	r30, 0xC9	; 201
    6d8e:	f0 e0       	ldi	r31, 0x00	; 0
    6d90:	80 81       	ld	r24, Z
    6d92:	8f 7d       	andi	r24, 0xDF	; 223
    6d94:	80 83       	st	Z, r24
    6d96:	8c 2f       	mov	r24, r28
    6d98:	c5 df       	rcall	.-118    	; 0x6d24 <serial0USB_logMIDIout>
    6d9a:	e0 91 ef 13 	lds	r30, 0x13EF	; 0x8013ef <midiTxInIndex>
    6d9e:	f0 e0       	ldi	r31, 0x00	; 0
    6da0:	ee 5b       	subi	r30, 0xBE	; 190
    6da2:	fa 4e       	sbci	r31, 0xEA	; 234
    6da4:	c0 83       	st	Z, r28
    6da6:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6daa:	8f 5f       	subi	r24, 0xFF	; 255
    6dac:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6db0:	89 13       	cpse	r24, r25
    6db2:	0e c0       	rjmp	.+28     	; 0x6dd0 <serial1MIDISend+0x86>
    6db4:	80 91 56 16 	lds	r24, 0x1656	; 0x801656 <midiTxOvflCount>
    6db8:	88 23       	and	r24, r24
    6dba:	31 f0       	breq	.+12     	; 0x6dc8 <serial1MIDISend+0x7e>
    6dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    6dbe:	51 f0       	breq	.+20     	; 0x6dd4 <serial1MIDISend+0x8a>
    6dc0:	8f 5f       	subi	r24, 0xFF	; 255
    6dc2:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6dc6:	06 c0       	rjmp	.+12     	; 0x6dd4 <serial1MIDISend+0x8a>
    6dc8:	81 e0       	ldi	r24, 0x01	; 1
    6dca:	80 93 56 16 	sts	0x1656, r24	; 0x801656 <midiTxOvflCount>
    6dce:	02 c0       	rjmp	.+4      	; 0x6dd4 <serial1MIDISend+0x8a>
    6dd0:	80 93 ef 13 	sts	0x13EF, r24	; 0x8013ef <midiTxInIndex>
    6dd4:	90 91 ef 13 	lds	r25, 0x13EF	; 0x8013ef <midiTxInIndex>
    6dd8:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6ddc:	89 17       	cp	r24, r25
    6dde:	30 f4       	brcc	.+12     	; 0x6dec <serial1MIDISend+0xa2>
    6de0:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6de4:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6de8:	89 1b       	sub	r24, r25
    6dea:	05 c0       	rjmp	.+10     	; 0x6df6 <serial1MIDISend+0xac>
    6dec:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <midiTxInIndex>
    6df0:	90 91 fc 13 	lds	r25, 0x13FC	; 0x8013fc <midiTxOutIndex>
    6df4:	89 1b       	sub	r24, r25
    6df6:	90 91 4a 16 	lds	r25, 0x164A	; 0x80164a <midiTxBuffUsage>
    6dfa:	98 17       	cp	r25, r24
    6dfc:	10 f4       	brcc	.+4      	; 0x6e02 <serial1MIDISend+0xb8>
    6dfe:	80 93 4a 16 	sts	0x164A, r24	; 0x80164a <midiTxBuffUsage>
    6e02:	e9 ec       	ldi	r30, 0xC9	; 201
    6e04:	f0 e0       	ldi	r31, 0x00	; 0
    6e06:	80 81       	ld	r24, Z
    6e08:	80 62       	ori	r24, 0x20	; 32
    6e0a:	80 83       	st	Z, r24
    6e0c:	cf 91       	pop	r28
    6e0e:	08 95       	ret

00006e10 <serial0USB_logPipeIn>:
    6e10:	cf 93       	push	r28
    6e12:	df 93       	push	r29
    6e14:	20 91 52 16 	lds	r18, 0x1652	; 0x801652 <serUSB_Active>
    6e18:	22 23       	and	r18, r18
    6e1a:	a9 f0       	breq	.+42     	; 0x6e46 <serial0USB_logPipeIn+0x36>
    6e1c:	c9 2f       	mov	r28, r25
    6e1e:	d8 2f       	mov	r29, r24
    6e20:	8b e6       	ldi	r24, 0x6B	; 107
    6e22:	1e df       	rcall	.-452    	; 0x6c60 <serial0SER_USBSend>
    6e24:	8c 2f       	mov	r24, r28
    6e26:	82 95       	swap	r24
    6e28:	8f 70       	andi	r24, 0x0F	; 15
    6e2a:	11 d2       	rcall	.+1058   	; 0x724e <nibbleToChr>
    6e2c:	19 df       	rcall	.-462    	; 0x6c60 <serial0SER_USBSend>
    6e2e:	cf 70       	andi	r28, 0x0F	; 15
    6e30:	8c 2f       	mov	r24, r28
    6e32:	0d d2       	rcall	.+1050   	; 0x724e <nibbleToChr>
    6e34:	15 df       	rcall	.-470    	; 0x6c60 <serial0SER_USBSend>
    6e36:	8d 2f       	mov	r24, r29
    6e38:	82 95       	swap	r24
    6e3a:	8f 70       	andi	r24, 0x0F	; 15
    6e3c:	08 d2       	rcall	.+1040   	; 0x724e <nibbleToChr>
    6e3e:	10 df       	rcall	.-480    	; 0x6c60 <serial0SER_USBSend>
    6e40:	8c 2f       	mov	r24, r28
    6e42:	05 d2       	rcall	.+1034   	; 0x724e <nibbleToChr>
    6e44:	0d df       	rcall	.-486    	; 0x6c60 <serial0SER_USBSend>
    6e46:	df 91       	pop	r29
    6e48:	cf 91       	pop	r28
    6e4a:	08 95       	ret

00006e4c <serial0SER_USB_sendStringP>:
    6e4c:	cf 93       	push	r28
    6e4e:	df 93       	push	r29
    6e50:	fc 01       	movw	r30, r24
    6e52:	02 c0       	rjmp	.+4      	; 0x6e58 <serial0SER_USB_sendStringP+0xc>
    6e54:	05 df       	rcall	.-502    	; 0x6c60 <serial0SER_USBSend>
    6e56:	fe 01       	movw	r30, r28
    6e58:	ef 01       	movw	r28, r30
    6e5a:	21 96       	adiw	r28, 0x01	; 1
    6e5c:	84 91       	lpm	r24, Z
    6e5e:	88 23       	and	r24, r24
    6e60:	21 f0       	breq	.+8      	; 0x6e6a <serial0SER_USB_sendStringP+0x1e>
    6e62:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6e66:	9f 3f       	cpi	r25, 0xFF	; 255
    6e68:	a9 f7       	brne	.-22     	; 0x6e54 <serial0SER_USB_sendStringP+0x8>
    6e6a:	df 91       	pop	r29
    6e6c:	cf 91       	pop	r28
    6e6e:	08 95       	ret

00006e70 <serial0SER_USB_sendCRLF>:
    6e70:	82 ec       	ldi	r24, 0xC2	; 194
    6e72:	92 e1       	ldi	r25, 0x12	; 18
    6e74:	eb cf       	rjmp	.-42     	; 0x6e4c <serial0SER_USB_sendStringP>
    6e76:	08 95       	ret

00006e78 <init_Serial0SerUSB>:
    6e78:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    6e7c:	88 e0       	ldi	r24, 0x08	; 8
    6e7e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    6e82:	e1 ec       	ldi	r30, 0xC1	; 193
    6e84:	f0 e0       	ldi	r31, 0x00	; 0
    6e86:	80 81       	ld	r24, Z
    6e88:	88 69       	ori	r24, 0x98	; 152
    6e8a:	80 83       	st	Z, r24
    6e8c:	e2 ec       	ldi	r30, 0xC2	; 194
    6e8e:	f0 e0       	ldi	r31, 0x00	; 0
    6e90:	80 81       	ld	r24, Z
    6e92:	86 60       	ori	r24, 0x06	; 6
    6e94:	80 83       	st	Z, r24
    6e96:	81 e0       	ldi	r24, 0x01	; 1
    6e98:	94 e1       	ldi	r25, 0x14	; 20
    6e9a:	90 93 55 16 	sts	0x1655, r25	; 0x801655 <serUSBRxInIndex+0x1>
    6e9e:	80 93 54 16 	sts	0x1654, r24	; 0x801654 <serUSBRxInIndex>
    6ea2:	90 93 48 16 	sts	0x1648, r25	; 0x801648 <serUSBRxOutIndex+0x1>
    6ea6:	80 93 47 16 	sts	0x1647, r24	; 0x801647 <serUSBRxOutIndex>
    6eaa:	8d ee       	ldi	r24, 0xED	; 237
    6eac:	9b e0       	ldi	r25, 0x0B	; 11
    6eae:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    6eb2:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    6eb6:	90 93 d8 18 	sts	0x18D8, r25	; 0x8018d8 <serUSBTxInIndex+0x1>
    6eba:	80 93 d7 18 	sts	0x18D7, r24	; 0x8018d7 <serUSBTxInIndex>
    6ebe:	10 92 49 16 	sts	0x1649, r1	; 0x801649 <serUSBOvflFlag>
    6ec2:	0e 94 12 0b 	call	0x1624	; 0x1624 <eeprom_ReadUSB>
    6ec6:	8f 3f       	cpi	r24, 0xFF	; 255
    6ec8:	41 f4       	brne	.+16     	; 0x6eda <init_Serial0SerUSB+0x62>
    6eca:	10 92 52 16 	sts	0x1652, r1	; 0x801652 <serUSB_Active>
    6ece:	40 e0       	ldi	r20, 0x00	; 0
    6ed0:	50 e0       	ldi	r21, 0x00	; 0
    6ed2:	64 e0       	ldi	r22, 0x04	; 4
    6ed4:	81 e0       	ldi	r24, 0x01	; 1
    6ed6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <log_putError>
    6eda:	80 91 52 16 	lds	r24, 0x1652	; 0x801652 <serUSB_Active>
    6ede:	8f 3f       	cpi	r24, 0xFF	; 255
    6ee0:	41 f4       	brne	.+16     	; 0x6ef2 <init_Serial0SerUSB+0x7a>
    6ee2:	8a e6       	ldi	r24, 0x6A	; 106
    6ee4:	93 e0       	ldi	r25, 0x03	; 3
    6ee6:	b2 df       	rcall	.-156    	; 0x6e4c <serial0SER_USB_sendStringP>
    6ee8:	82 e6       	ldi	r24, 0x62	; 98
    6eea:	92 e1       	ldi	r25, 0x12	; 18
    6eec:	af df       	rcall	.-162    	; 0x6e4c <serial0SER_USB_sendStringP>
    6eee:	c0 df       	rcall	.-128    	; 0x6e70 <serial0SER_USB_sendCRLF>
    6ef0:	bf cf       	rjmp	.-130    	; 0x6e70 <serial0SER_USB_sendCRLF>
    6ef2:	08 95       	ret

00006ef4 <serial0SER_USB_sendString>:
    6ef4:	1f 93       	push	r17
    6ef6:	cf 93       	push	r28
    6ef8:	df 93       	push	r29
    6efa:	ec 01       	movw	r28, r24
    6efc:	10 e5       	ldi	r17, 0x50	; 80
    6efe:	03 c0       	rjmp	.+6      	; 0x6f06 <serial0SER_USB_sendString+0x12>
    6f00:	21 96       	adiw	r28, 0x01	; 1
    6f02:	ae de       	rcall	.-676    	; 0x6c60 <serial0SER_USBSend>
    6f04:	11 50       	subi	r17, 0x01	; 1
    6f06:	88 81       	ld	r24, Y
    6f08:	88 23       	and	r24, r24
    6f0a:	31 f0       	breq	.+12     	; 0x6f18 <serial0SER_USB_sendString+0x24>
    6f0c:	90 91 49 16 	lds	r25, 0x1649	; 0x801649 <serUSBOvflFlag>
    6f10:	9f 3f       	cpi	r25, 0xFF	; 255
    6f12:	11 f0       	breq	.+4      	; 0x6f18 <serial0SER_USB_sendString+0x24>
    6f14:	11 11       	cpse	r17, r1
    6f16:	f4 cf       	rjmp	.-24     	; 0x6f00 <serial0SER_USB_sendString+0xc>
    6f18:	df 91       	pop	r29
    6f1a:	cf 91       	pop	r28
    6f1c:	1f 91       	pop	r17
    6f1e:	08 95       	ret

00006f20 <__vector_25>:
    6f20:	1f 92       	push	r1
    6f22:	0f 92       	push	r0
    6f24:	0f b6       	in	r0, 0x3f	; 63
    6f26:	0f 92       	push	r0
    6f28:	11 24       	eor	r1, r1
    6f2a:	0b b6       	in	r0, 0x3b	; 59
    6f2c:	0f 92       	push	r0
    6f2e:	2f 93       	push	r18
    6f30:	3f 93       	push	r19
    6f32:	4f 93       	push	r20
    6f34:	5f 93       	push	r21
    6f36:	8f 93       	push	r24
    6f38:	9f 93       	push	r25
    6f3a:	ef 93       	push	r30
    6f3c:	ff 93       	push	r31
    6f3e:	e0 91 54 16 	lds	r30, 0x1654	; 0x801654 <serUSBRxInIndex>
    6f42:	f0 91 55 16 	lds	r31, 0x1655	; 0x801655 <serUSBRxInIndex+0x1>
    6f46:	af 01       	movw	r20, r30
    6f48:	4f 5f       	subi	r20, 0xFF	; 255
    6f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    6f4c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6f50:	80 83       	st	Z, r24
    6f52:	84 e1       	ldi	r24, 0x14	; 20
    6f54:	40 34       	cpi	r20, 0x40	; 64
    6f56:	58 07       	cpc	r21, r24
    6f58:	19 f0       	breq	.+6      	; 0x6f60 <__vector_25+0x40>
    6f5a:	10 f0       	brcs	.+4      	; 0x6f60 <__vector_25+0x40>
    6f5c:	41 e0       	ldi	r20, 0x01	; 1
    6f5e:	54 e1       	ldi	r21, 0x14	; 20
    6f60:	9f b7       	in	r25, 0x3f	; 63
    6f62:	f8 94       	cli
    6f64:	81 e0       	ldi	r24, 0x01	; 1
    6f66:	05 c0       	rjmp	.+10     	; 0x6f72 <__vector_25+0x52>
    6f68:	20 91 47 16 	lds	r18, 0x1647	; 0x801647 <serUSBRxOutIndex>
    6f6c:	30 91 48 16 	lds	r19, 0x1648	; 0x801648 <serUSBRxOutIndex+0x1>
    6f70:	80 e0       	ldi	r24, 0x00	; 0
    6f72:	81 11       	cpse	r24, r1
    6f74:	f9 cf       	rjmp	.-14     	; 0x6f68 <__vector_25+0x48>
    6f76:	9f bf       	out	0x3f, r25	; 63
    6f78:	42 17       	cp	r20, r18
    6f7a:	53 07       	cpc	r21, r19
    6f7c:	21 f4       	brne	.+8      	; 0x6f86 <__vector_25+0x66>
    6f7e:	8f ef       	ldi	r24, 0xFF	; 255
    6f80:	80 93 49 16 	sts	0x1649, r24	; 0x801649 <serUSBOvflFlag>
    6f84:	04 c0       	rjmp	.+8      	; 0x6f8e <__vector_25+0x6e>
    6f86:	50 93 55 16 	sts	0x1655, r21	; 0x801655 <serUSBRxInIndex+0x1>
    6f8a:	40 93 54 16 	sts	0x1654, r20	; 0x801654 <serUSBRxInIndex>
    6f8e:	ff 91       	pop	r31
    6f90:	ef 91       	pop	r30
    6f92:	9f 91       	pop	r25
    6f94:	8f 91       	pop	r24
    6f96:	5f 91       	pop	r21
    6f98:	4f 91       	pop	r20
    6f9a:	3f 91       	pop	r19
    6f9c:	2f 91       	pop	r18
    6f9e:	0f 90       	pop	r0
    6fa0:	0b be       	out	0x3b, r0	; 59
    6fa2:	0f 90       	pop	r0
    6fa4:	0f be       	out	0x3f, r0	; 63
    6fa6:	0f 90       	pop	r0
    6fa8:	1f 90       	pop	r1
    6faa:	18 95       	reti

00006fac <__vector_26>:
    6fac:	1f 92       	push	r1
    6fae:	0f 92       	push	r0
    6fb0:	0f b6       	in	r0, 0x3f	; 63
    6fb2:	0f 92       	push	r0
    6fb4:	11 24       	eor	r1, r1
    6fb6:	0b b6       	in	r0, 0x3b	; 59
    6fb8:	0f 92       	push	r0
    6fba:	2f 93       	push	r18
    6fbc:	8f 93       	push	r24
    6fbe:	9f 93       	push	r25
    6fc0:	ef 93       	push	r30
    6fc2:	ff 93       	push	r31
    6fc4:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <serUSBTxOutIndex>
    6fc8:	f0 91 ee 13 	lds	r31, 0x13EE	; 0x8013ee <serUSBTxOutIndex+0x1>
    6fcc:	80 91 d7 18 	lds	r24, 0x18D7	; 0x8018d7 <serUSBTxInIndex>
    6fd0:	90 91 d8 18 	lds	r25, 0x18D8	; 0x8018d8 <serUSBTxInIndex+0x1>
    6fd4:	e8 17       	cp	r30, r24
    6fd6:	f9 07       	cpc	r31, r25
    6fd8:	89 f0       	breq	.+34     	; 0x6ffc <__vector_26+0x50>
    6fda:	cf 01       	movw	r24, r30
    6fdc:	01 96       	adiw	r24, 0x01	; 1
    6fde:	20 81       	ld	r18, Z
    6fe0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6fe4:	23 e1       	ldi	r18, 0x13	; 19
    6fe6:	8c 3e       	cpi	r24, 0xEC	; 236
    6fe8:	92 07       	cpc	r25, r18
    6fea:	19 f0       	breq	.+6      	; 0x6ff2 <__vector_26+0x46>
    6fec:	10 f0       	brcs	.+4      	; 0x6ff2 <__vector_26+0x46>
    6fee:	8d ee       	ldi	r24, 0xED	; 237
    6ff0:	9b e0       	ldi	r25, 0x0B	; 11
    6ff2:	90 93 ee 13 	sts	0x13EE, r25	; 0x8013ee <serUSBTxOutIndex+0x1>
    6ff6:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <serUSBTxOutIndex>
    6ffa:	05 c0       	rjmp	.+10     	; 0x7006 <__vector_26+0x5a>
    6ffc:	e1 ec       	ldi	r30, 0xC1	; 193
    6ffe:	f0 e0       	ldi	r31, 0x00	; 0
    7000:	80 81       	ld	r24, Z
    7002:	8f 7d       	andi	r24, 0xDF	; 223
    7004:	80 83       	st	Z, r24
    7006:	ff 91       	pop	r31
    7008:	ef 91       	pop	r30
    700a:	9f 91       	pop	r25
    700c:	8f 91       	pop	r24
    700e:	2f 91       	pop	r18
    7010:	0f 90       	pop	r0
    7012:	0b be       	out	0x3b, r0	; 59
    7014:	0f 90       	pop	r0
    7016:	0f be       	out	0x3f, r0	; 63
    7018:	0f 90       	pop	r0
    701a:	1f 90       	pop	r1
    701c:	18 95       	reti

0000701e <init_Serial3SerESP>:
    701e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    7022:	88 e0       	ldi	r24, 0x08	; 8
    7024:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    7028:	e1 e3       	ldi	r30, 0x31	; 49
    702a:	f1 e0       	ldi	r31, 0x01	; 1
    702c:	80 81       	ld	r24, Z
    702e:	88 69       	ori	r24, 0x98	; 152
    7030:	80 83       	st	Z, r24
    7032:	e2 e3       	ldi	r30, 0x32	; 50
    7034:	f1 e0       	ldi	r31, 0x01	; 1
    7036:	80 81       	ld	r24, Z
    7038:	86 60       	ori	r24, 0x06	; 6
    703a:	80 83       	st	Z, r24
    703c:	87 e5       	ldi	r24, 0x57	; 87
    703e:	96 e1       	ldi	r25, 0x16	; 22
    7040:	90 93 ff 13 	sts	0x13FF, r25	; 0x8013ff <serESPRxInIndex+0x1>
    7044:	80 93 fe 13 	sts	0x13FE, r24	; 0x8013fe <serESPRxInIndex>
    7048:	90 93 fa 13 	sts	0x13FA, r25	; 0x8013fa <serESPRxOutIndex+0x1>
    704c:	80 93 f9 13 	sts	0x13F9, r24	; 0x8013f9 <serESPRxOutIndex>
    7050:	87 ed       	ldi	r24, 0xD7	; 215
    7052:	96 e1       	ldi	r25, 0x16	; 22
    7054:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    7058:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    705c:	90 93 46 16 	sts	0x1646, r25	; 0x801646 <serESPTxInIndex+0x1>
    7060:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <serESPTxInIndex>
    7064:	10 92 f0 13 	sts	0x13F0, r1	; 0x8013f0 <serESPOvflFlag>
    7068:	8f ef       	ldi	r24, 0xFF	; 255
    706a:	80 93 4e 16 	sts	0x164E, r24	; 0x80164e <serESP_Active>
    706e:	80 e0       	ldi	r24, 0x00	; 0
    7070:	07 c0       	rjmp	.+14     	; 0x7080 <init_Serial3SerESP+0x62>
    7072:	e8 2f       	mov	r30, r24
    7074:	f0 e0       	ldi	r31, 0x00	; 0
    7076:	ef 50       	subi	r30, 0x0F	; 15
    7078:	fc 4e       	sbci	r31, 0xEC	; 236
    707a:	9f ef       	ldi	r25, 0xFF	; 255
    707c:	90 83       	st	Z, r25
    707e:	8f 5f       	subi	r24, 0xFF	; 255
    7080:	88 30       	cpi	r24, 0x08	; 8
    7082:	b8 f3       	brcs	.-18     	; 0x7072 <init_Serial3SerESP+0x54>
    7084:	08 95       	ret

00007086 <serial3SER_ESPSend>:
    7086:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <serESPTxInIndex>
    708a:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    708e:	a1 e3       	ldi	r26, 0x31	; 49
    7090:	b1 e0       	ldi	r27, 0x01	; 1
    7092:	9c 91       	ld	r25, X
    7094:	9f 7d       	andi	r25, 0xDF	; 223
    7096:	9c 93       	st	X, r25
    7098:	af 01       	movw	r20, r30
    709a:	4f 5f       	subi	r20, 0xFF	; 255
    709c:	5f 4f       	sbci	r21, 0xFF	; 255
    709e:	80 83       	st	Z, r24
    70a0:	88 e1       	ldi	r24, 0x18	; 24
    70a2:	46 3d       	cpi	r20, 0xD6	; 214
    70a4:	58 07       	cpc	r21, r24
    70a6:	19 f0       	breq	.+6      	; 0x70ae <serial3SER_ESPSend+0x28>
    70a8:	10 f0       	brcs	.+4      	; 0x70ae <serial3SER_ESPSend+0x28>
    70aa:	47 ed       	ldi	r20, 0xD7	; 215
    70ac:	56 e1       	ldi	r21, 0x16	; 22
    70ae:	9f b7       	in	r25, 0x3f	; 63
    70b0:	f8 94       	cli
    70b2:	81 e0       	ldi	r24, 0x01	; 1
    70b4:	05 c0       	rjmp	.+10     	; 0x70c0 <serial3SER_ESPSend+0x3a>
    70b6:	20 91 42 16 	lds	r18, 0x1642	; 0x801642 <serESPTxOutIndex>
    70ba:	30 91 43 16 	lds	r19, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
    70be:	80 e0       	ldi	r24, 0x00	; 0
    70c0:	81 11       	cpse	r24, r1
    70c2:	f9 cf       	rjmp	.-14     	; 0x70b6 <serial3SER_ESPSend+0x30>
    70c4:	9f bf       	out	0x3f, r25	; 63
    70c6:	42 17       	cp	r20, r18
    70c8:	53 07       	cpc	r21, r19
    70ca:	49 f4       	brne	.+18     	; 0x70de <serial3SER_ESPSend+0x58>
    70cc:	8f ef       	ldi	r24, 0xFF	; 255
    70ce:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
    70d2:	e1 e3       	ldi	r30, 0x31	; 49
    70d4:	f1 e0       	ldi	r31, 0x01	; 1
    70d6:	80 81       	ld	r24, Z
    70d8:	80 62       	ori	r24, 0x20	; 32
    70da:	80 83       	st	Z, r24
    70dc:	08 95       	ret
    70de:	50 93 46 16 	sts	0x1646, r21	; 0x801646 <serESPTxInIndex+0x1>
    70e2:	40 93 45 16 	sts	0x1645, r20	; 0x801645 <serESPTxInIndex>
    70e6:	e1 e3       	ldi	r30, 0x31	; 49
    70e8:	f1 e0       	ldi	r31, 0x01	; 1
    70ea:	80 81       	ld	r24, Z
    70ec:	80 62       	ori	r24, 0x20	; 32
    70ee:	80 83       	st	Z, r24
    70f0:	08 95       	ret

000070f2 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    70f2:	e0 91 f9 13 	lds	r30, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    70f6:	f0 91 fa 13 	lds	r31, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    70fa:	80 91 fe 13 	lds	r24, 0x13FE	; 0x8013fe <serESPRxInIndex>
    70fe:	90 91 ff 13 	lds	r25, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
    7102:	e8 17       	cp	r30, r24
    7104:	f9 07       	cpc	r31, r25
    7106:	81 f0       	breq	.+32     	; 0x7128 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    7108:	9f 01       	movw	r18, r30
    710a:	2f 5f       	subi	r18, 0xFF	; 255
    710c:	3f 4f       	sbci	r19, 0xFF	; 255
    710e:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    7110:	96 e1       	ldi	r25, 0x16	; 22
    7112:	26 3d       	cpi	r18, 0xD6	; 214
    7114:	39 07       	cpc	r19, r25
    7116:	19 f0       	breq	.+6      	; 0x711e <serial3SER_ESPReadRx+0x2c>
    7118:	10 f0       	brcs	.+4      	; 0x711e <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    711a:	27 e5       	ldi	r18, 0x57	; 87
    711c:	36 e1       	ldi	r19, 0x16	; 22
		}
		serESPRxOutIndex = index;
    711e:	30 93 fa 13 	sts	0x13FA, r19	; 0x8013fa <serESPRxOutIndex+0x1>
    7122:	20 93 f9 13 	sts	0x13F9, r18	; 0x8013f9 <serESPRxOutIndex>
    7126:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    7128:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    712a:	08 95       	ret

0000712c <__vector_54>:

ISR(USART3_RX_vect) {
    712c:	1f 92       	push	r1
    712e:	0f 92       	push	r0
    7130:	0f b6       	in	r0, 0x3f	; 63
    7132:	0f 92       	push	r0
    7134:	11 24       	eor	r1, r1
    7136:	0b b6       	in	r0, 0x3b	; 59
    7138:	0f 92       	push	r0
    713a:	2f 93       	push	r18
    713c:	3f 93       	push	r19
    713e:	4f 93       	push	r20
    7140:	5f 93       	push	r21
    7142:	6f 93       	push	r22
    7144:	8f 93       	push	r24
    7146:	9f 93       	push	r25
    7148:	af 93       	push	r26
    714a:	bf 93       	push	r27
    714c:	ef 93       	push	r30
    714e:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    7150:	e0 91 fe 13 	lds	r30, 0x13FE	; 0x8013fe <serESPRxInIndex>
    7154:	f0 91 ff 13 	lds	r31, 0x13FF	; 0x8013ff <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    7158:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    715c:	af 01       	movw	r20, r30
    715e:	4f 5f       	subi	r20, 0xFF	; 255
    7160:	5f 4f       	sbci	r21, 0xFF	; 255
    7162:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    7164:	86 e1       	ldi	r24, 0x16	; 22
    7166:	46 3d       	cpi	r20, 0xD6	; 214
    7168:	58 07       	cpc	r21, r24
    716a:	19 f0       	breq	.+6      	; 0x7172 <__vector_54+0x46>
    716c:	10 f0       	brcs	.+4      	; 0x7172 <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    716e:	47 e5       	ldi	r20, 0x57	; 87
    7170:	56 e1       	ldi	r21, 0x16	; 22
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7172:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    7174:	f8 94       	cli
    7176:	81 e0       	ldi	r24, 0x01	; 1
    7178:	05 c0       	rjmp	.+10     	; 0x7184 <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    717a:	20 91 f9 13 	lds	r18, 0x13F9	; 0x8013f9 <serESPRxOutIndex>
    717e:	30 91 fa 13 	lds	r19, 0x13FA	; 0x8013fa <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7182:	80 e0       	ldi	r24, 0x00	; 0
    7184:	81 11       	cpse	r24, r1
    7186:	f9 cf       	rjmp	.-14     	; 0x717a <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    7188:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    718a:	42 17       	cp	r20, r18
    718c:	53 07       	cpc	r21, r19
    718e:	39 f4       	brne	.+14     	; 0x719e <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    7190:	8f ef       	ldi	r24, 0xFF	; 255
    7192:	80 93 f0 13 	sts	0x13F0, r24	; 0x8013f0 <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    7196:	80 e0       	ldi	r24, 0x00	; 0
    7198:	a8 ef       	ldi	r26, 0xF8	; 248
    719a:	b3 e1       	ldi	r27, 0x13	; 19
    719c:	0a c0       	rjmp	.+20     	; 0x71b2 <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    719e:	50 93 ff 13 	sts	0x13FF, r21	; 0x8013ff <serESPRxInIndex+0x1>
    71a2:	40 93 fe 13 	sts	0x13FE, r20	; 0x8013fe <serESPRxInIndex>
    71a6:	f7 cf       	rjmp	.-18     	; 0x7196 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    71a8:	fd 01       	movw	r30, r26
    71aa:	92 91       	ld	r25, -Z
    71ac:	9c 93       	st	X, r25
		inpBufferPtr--;
    71ae:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    71b0:	8f 5f       	subi	r24, 0xFF	; 255
    71b2:	87 30       	cpi	r24, 0x07	; 7
    71b4:	c8 f3       	brcs	.-14     	; 0x71a8 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    71b6:	6c 93       	st	X, r22
}
    71b8:	ff 91       	pop	r31
    71ba:	ef 91       	pop	r30
    71bc:	bf 91       	pop	r27
    71be:	af 91       	pop	r26
    71c0:	9f 91       	pop	r25
    71c2:	8f 91       	pop	r24
    71c4:	6f 91       	pop	r22
    71c6:	5f 91       	pop	r21
    71c8:	4f 91       	pop	r20
    71ca:	3f 91       	pop	r19
    71cc:	2f 91       	pop	r18
    71ce:	0f 90       	pop	r0
    71d0:	0b be       	out	0x3b, r0	; 59
    71d2:	0f 90       	pop	r0
    71d4:	0f be       	out	0x3f, r0	; 63
    71d6:	0f 90       	pop	r0
    71d8:	1f 90       	pop	r1
    71da:	18 95       	reti

000071dc <__vector_55>:

ISR(USART3_UDRE_vect) {
    71dc:	1f 92       	push	r1
    71de:	0f 92       	push	r0
    71e0:	0f b6       	in	r0, 0x3f	; 63
    71e2:	0f 92       	push	r0
    71e4:	11 24       	eor	r1, r1
    71e6:	0b b6       	in	r0, 0x3b	; 59
    71e8:	0f 92       	push	r0
    71ea:	2f 93       	push	r18
    71ec:	8f 93       	push	r24
    71ee:	9f 93       	push	r25
    71f0:	ef 93       	push	r30
    71f2:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    71f4:	e0 91 42 16 	lds	r30, 0x1642	; 0x801642 <serESPTxOutIndex>
    71f8:	f0 91 43 16 	lds	r31, 0x1643	; 0x801643 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    71fc:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <serESPTxInIndex>
    7200:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <serESPTxInIndex+0x1>
    7204:	e8 17       	cp	r30, r24
    7206:	f9 07       	cpc	r31, r25
    7208:	89 f0       	breq	.+34     	; 0x722c <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    720a:	cf 01       	movw	r24, r30
    720c:	01 96       	adiw	r24, 0x01	; 1
    720e:	20 81       	ld	r18, Z
    7210:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    7214:	28 e1       	ldi	r18, 0x18	; 24
    7216:	86 3d       	cpi	r24, 0xD6	; 214
    7218:	92 07       	cpc	r25, r18
    721a:	19 f0       	breq	.+6      	; 0x7222 <__vector_55+0x46>
    721c:	10 f0       	brcs	.+4      	; 0x7222 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    721e:	87 ed       	ldi	r24, 0xD7	; 215
    7220:	96 e1       	ldi	r25, 0x16	; 22
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    7222:	90 93 43 16 	sts	0x1643, r25	; 0x801643 <serESPTxOutIndex+0x1>
    7226:	80 93 42 16 	sts	0x1642, r24	; 0x801642 <serESPTxOutIndex>
    722a:	05 c0       	rjmp	.+10     	; 0x7236 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    722c:	e1 e3       	ldi	r30, 0x31	; 49
    722e:	f1 e0       	ldi	r31, 0x01	; 1
    7230:	80 81       	ld	r24, Z
    7232:	8f 7d       	andi	r24, 0xDF	; 223
    7234:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    7236:	ff 91       	pop	r31
    7238:	ef 91       	pop	r30
    723a:	9f 91       	pop	r25
    723c:	8f 91       	pop	r24
    723e:	2f 91       	pop	r18
    7240:	0f 90       	pop	r0
    7242:	0b be       	out	0x3b, r0	; 59
    7244:	0f 90       	pop	r0
    7246:	0f be       	out	0x3f, r0	; 63
    7248:	0f 90       	pop	r0
    724a:	1f 90       	pop	r1
    724c:	18 95       	reti

0000724e <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    724e:	8a 30       	cpi	r24, 0x0A	; 10
    7250:	10 f0       	brcs	.+4      	; 0x7256 <nibbleToChr+0x8>
    7252:	89 5c       	subi	r24, 0xC9	; 201
    7254:	08 95       	ret
    7256:	80 5d       	subi	r24, 0xD0	; 208
    7258:	08 95       	ret

0000725a <lcd_setCG>:
    725a:	ef 92       	push	r14
    725c:	ff 92       	push	r15
    725e:	1f 93       	push	r17
    7260:	cf 93       	push	r28
    7262:	df 93       	push	r29
    7264:	eb 01       	movw	r28, r22
    7266:	90 e0       	ldi	r25, 0x00	; 0
    7268:	88 0f       	add	r24, r24
    726a:	99 1f       	adc	r25, r25
    726c:	88 0f       	add	r24, r24
    726e:	99 1f       	adc	r25, r25
    7270:	88 0f       	add	r24, r24
    7272:	99 1f       	adc	r25, r25
    7274:	80 64       	ori	r24, 0x40	; 64
    7276:	0e 94 6f 12 	call	0x24de	; 0x24de <lcd_write_command>
    727a:	10 e0       	ldi	r17, 0x00	; 0
    727c:	0a c0       	rjmp	.+20     	; 0x7292 <lcd_setCG+0x38>
    727e:	7e 01       	movw	r14, r28
    7280:	8f ef       	ldi	r24, 0xFF	; 255
    7282:	e8 1a       	sub	r14, r24
    7284:	f8 0a       	sbc	r15, r24
    7286:	fe 01       	movw	r30, r28
    7288:	84 91       	lpm	r24, Z
    728a:	0e 94 4b 12 	call	0x2496	; 0x2496 <lcd_write_character>
    728e:	1f 5f       	subi	r17, 0xFF	; 255
    7290:	e7 01       	movw	r28, r14
    7292:	18 30       	cpi	r17, 0x08	; 8
    7294:	a0 f3       	brcs	.-24     	; 0x727e <lcd_setCG+0x24>
    7296:	df 91       	pop	r29
    7298:	cf 91       	pop	r28
    729a:	1f 91       	pop	r17
    729c:	ff 90       	pop	r15
    729e:	ef 90       	pop	r14
    72a0:	08 95       	ret

000072a2 <lcd_initCG>:
    72a2:	6a eb       	ldi	r22, 0xBA	; 186
    72a4:	72 e1       	ldi	r23, 0x12	; 18
    72a6:	80 e0       	ldi	r24, 0x00	; 0
    72a8:	d8 df       	rcall	.-80     	; 0x725a <lcd_setCG>
    72aa:	62 eb       	ldi	r22, 0xB2	; 178
    72ac:	72 e1       	ldi	r23, 0x12	; 18
    72ae:	81 e0       	ldi	r24, 0x01	; 1
    72b0:	d4 df       	rcall	.-88     	; 0x725a <lcd_setCG>
    72b2:	6a ea       	ldi	r22, 0xAA	; 170
    72b4:	72 e1       	ldi	r23, 0x12	; 18
    72b6:	82 e0       	ldi	r24, 0x02	; 2
    72b8:	d0 cf       	rjmp	.-96     	; 0x725a <lcd_setCG>
    72ba:	08 95       	ret

000072bc <lcd_hexout>:
    72bc:	cf 93       	push	r28
    72be:	c8 2f       	mov	r28, r24
    72c0:	82 95       	swap	r24
    72c2:	8f 70       	andi	r24, 0x0F	; 15
    72c4:	8a 30       	cpi	r24, 0x0A	; 10
    72c6:	10 f0       	brcs	.+4      	; 0x72cc <lcd_hexout+0x10>
    72c8:	89 5c       	subi	r24, 0xC9	; 201
    72ca:	01 c0       	rjmp	.+2      	; 0x72ce <lcd_hexout+0x12>
    72cc:	80 5d       	subi	r24, 0xD0	; 208
    72ce:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    72d2:	cf 70       	andi	r28, 0x0F	; 15
    72d4:	ca 30       	cpi	r28, 0x0A	; 10
    72d6:	18 f0       	brcs	.+6      	; 0x72de <lcd_hexout+0x22>
    72d8:	87 e3       	ldi	r24, 0x37	; 55
    72da:	8c 0f       	add	r24, r28
    72dc:	02 c0       	rjmp	.+4      	; 0x72e2 <lcd_hexout+0x26>
    72de:	80 e3       	ldi	r24, 0x30	; 48
    72e0:	8c 0f       	add	r24, r28
    72e2:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    72e6:	cf 91       	pop	r28
    72e8:	08 95       	ret

000072ea <lcd_longout>:
    72ea:	cf 93       	push	r28
    72ec:	df 93       	push	r29
    72ee:	d3 e0       	ldi	r29, 0x03	; 3
    72f0:	1c c0       	rjmp	.+56     	; 0x732a <lcd_longout+0x40>
    72f2:	ed 2f       	mov	r30, r29
    72f4:	0d 2e       	mov	r0, r29
    72f6:	00 0c       	add	r0, r0
    72f8:	ff 0b       	sbc	r31, r31
    72fa:	e3 52       	subi	r30, 0x23	; 35
    72fc:	f7 4e       	sbci	r31, 0xE7	; 231
    72fe:	c0 81       	ld	r28, Z
    7300:	8c 2f       	mov	r24, r28
    7302:	82 95       	swap	r24
    7304:	8f 70       	andi	r24, 0x0F	; 15
    7306:	8a 30       	cpi	r24, 0x0A	; 10
    7308:	10 f0       	brcs	.+4      	; 0x730e <lcd_longout+0x24>
    730a:	89 5c       	subi	r24, 0xC9	; 201
    730c:	01 c0       	rjmp	.+2      	; 0x7310 <lcd_longout+0x26>
    730e:	80 5d       	subi	r24, 0xD0	; 208
    7310:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7314:	cf 70       	andi	r28, 0x0F	; 15
    7316:	ca 30       	cpi	r28, 0x0A	; 10
    7318:	18 f0       	brcs	.+6      	; 0x7320 <lcd_longout+0x36>
    731a:	87 e3       	ldi	r24, 0x37	; 55
    731c:	8c 0f       	add	r24, r28
    731e:	02 c0       	rjmp	.+4      	; 0x7324 <lcd_longout+0x3a>
    7320:	80 e3       	ldi	r24, 0x30	; 48
    7322:	8c 0f       	add	r24, r28
    7324:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7328:	d1 50       	subi	r29, 0x01	; 1
    732a:	dd 23       	and	r29, r29
    732c:	14 f7       	brge	.-60     	; 0x72f2 <lcd_longout+0x8>
    732e:	df 91       	pop	r29
    7330:	cf 91       	pop	r28
    7332:	08 95       	ret

00007334 <lcd_dec2out>:
    7334:	cf 93       	push	r28
    7336:	c8 2f       	mov	r28, r24
    7338:	84 36       	cpi	r24, 0x64	; 100
    733a:	50 f0       	brcs	.+20     	; 0x7350 <lcd_dec2out+0x1c>
    733c:	8d e2       	ldi	r24, 0x2D	; 45
    733e:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7342:	8d e2       	ldi	r24, 0x2D	; 45
    7344:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7348:	0d c0       	rjmp	.+26     	; 0x7364 <lcd_dec2out+0x30>
    734a:	ca 50       	subi	r28, 0x0A	; 10
    734c:	8f 5f       	subi	r24, 0xFF	; 255
    734e:	01 c0       	rjmp	.+2      	; 0x7352 <lcd_dec2out+0x1e>
    7350:	80 e0       	ldi	r24, 0x00	; 0
    7352:	ca 30       	cpi	r28, 0x0A	; 10
    7354:	d0 f7       	brcc	.-12     	; 0x734a <lcd_dec2out+0x16>
    7356:	80 5d       	subi	r24, 0xD0	; 208
    7358:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    735c:	80 e3       	ldi	r24, 0x30	; 48
    735e:	8c 0f       	add	r24, r28
    7360:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7364:	cf 91       	pop	r28
    7366:	08 95       	ret

00007368 <putChar_Dec2>:
    7368:	84 36       	cpi	r24, 0x64	; 100
    736a:	58 f0       	brcs	.+22     	; 0x7382 <putChar_Dec2+0x1a>
    736c:	8d e2       	ldi	r24, 0x2D	; 45
    736e:	db 01       	movw	r26, r22
    7370:	8c 93       	st	X, r24
    7372:	fb 01       	movw	r30, r22
    7374:	32 96       	adiw	r30, 0x02	; 2
    7376:	11 96       	adiw	r26, 0x01	; 1
    7378:	8c 93       	st	X, r24
    737a:	0f c0       	rjmp	.+30     	; 0x739a <putChar_Dec2+0x32>
    737c:	8a 50       	subi	r24, 0x0A	; 10
    737e:	9f 5f       	subi	r25, 0xFF	; 255
    7380:	01 c0       	rjmp	.+2      	; 0x7384 <putChar_Dec2+0x1c>
    7382:	90 e0       	ldi	r25, 0x00	; 0
    7384:	8a 30       	cpi	r24, 0x0A	; 10
    7386:	d0 f7       	brcc	.-12     	; 0x737c <putChar_Dec2+0x14>
    7388:	90 5d       	subi	r25, 0xD0	; 208
    738a:	fb 01       	movw	r30, r22
    738c:	90 83       	st	Z, r25
    738e:	32 96       	adiw	r30, 0x02	; 2
    7390:	90 e3       	ldi	r25, 0x30	; 48
    7392:	98 0f       	add	r25, r24
    7394:	db 01       	movw	r26, r22
    7396:	11 96       	adiw	r26, 0x01	; 1
    7398:	9c 93       	st	X, r25
    739a:	10 82       	st	Z, r1
    739c:	cf 01       	movw	r24, r30
    739e:	08 95       	ret

000073a0 <putChar_Dec>:
    73a0:	90 e0       	ldi	r25, 0x00	; 0
    73a2:	02 c0       	rjmp	.+4      	; 0x73a8 <putChar_Dec+0x8>
    73a4:	84 56       	subi	r24, 0x64	; 100
    73a6:	9f 5f       	subi	r25, 0xFF	; 255
    73a8:	84 36       	cpi	r24, 0x64	; 100
    73aa:	e0 f7       	brcc	.-8      	; 0x73a4 <putChar_Dec+0x4>
    73ac:	99 23       	and	r25, r25
    73ae:	39 f0       	breq	.+14     	; 0x73be <putChar_Dec+0x1e>
    73b0:	90 5d       	subi	r25, 0xD0	; 208
    73b2:	db 01       	movw	r26, r22
    73b4:	9c 93       	st	X, r25
    73b6:	6f 5f       	subi	r22, 0xFF	; 255
    73b8:	7f 4f       	sbci	r23, 0xFF	; 255
    73ba:	2f ef       	ldi	r18, 0xFF	; 255
    73bc:	01 c0       	rjmp	.+2      	; 0x73c0 <putChar_Dec+0x20>
    73be:	20 e0       	ldi	r18, 0x00	; 0
    73c0:	90 e0       	ldi	r25, 0x00	; 0
    73c2:	02 c0       	rjmp	.+4      	; 0x73c8 <putChar_Dec+0x28>
    73c4:	8a 50       	subi	r24, 0x0A	; 10
    73c6:	9f 5f       	subi	r25, 0xFF	; 255
    73c8:	8a 30       	cpi	r24, 0x0A	; 10
    73ca:	e0 f7       	brcc	.-8      	; 0x73c4 <putChar_Dec+0x24>
    73cc:	91 11       	cpse	r25, r1
    73ce:	02 c0       	rjmp	.+4      	; 0x73d4 <putChar_Dec+0x34>
    73d0:	2f 3f       	cpi	r18, 0xFF	; 255
    73d2:	31 f4       	brne	.+12     	; 0x73e0 <putChar_Dec+0x40>
    73d4:	fb 01       	movw	r30, r22
    73d6:	31 96       	adiw	r30, 0x01	; 1
    73d8:	90 5d       	subi	r25, 0xD0	; 208
    73da:	db 01       	movw	r26, r22
    73dc:	9c 93       	st	X, r25
    73de:	01 c0       	rjmp	.+2      	; 0x73e2 <putChar_Dec+0x42>
    73e0:	fb 01       	movw	r30, r22
    73e2:	80 5d       	subi	r24, 0xD0	; 208
    73e4:	80 83       	st	Z, r24
    73e6:	11 82       	std	Z+1, r1	; 0x01
    73e8:	cf 01       	movw	r24, r30
    73ea:	01 96       	adiw	r24, 0x01	; 1
    73ec:	08 95       	ret

000073ee <putChar_hex>:
    73ee:	fb 01       	movw	r30, r22
    73f0:	98 2f       	mov	r25, r24
    73f2:	92 95       	swap	r25
    73f4:	9f 70       	andi	r25, 0x0F	; 15
    73f6:	9a 30       	cpi	r25, 0x0A	; 10
    73f8:	10 f0       	brcs	.+4      	; 0x73fe <putChar_hex+0x10>
    73fa:	99 5c       	subi	r25, 0xC9	; 201
    73fc:	01 c0       	rjmp	.+2      	; 0x7400 <putChar_hex+0x12>
    73fe:	90 5d       	subi	r25, 0xD0	; 208
    7400:	90 83       	st	Z, r25
    7402:	98 2f       	mov	r25, r24
    7404:	9f 70       	andi	r25, 0x0F	; 15
    7406:	9f 01       	movw	r18, r30
    7408:	2e 5f       	subi	r18, 0xFE	; 254
    740a:	3f 4f       	sbci	r19, 0xFF	; 255
    740c:	9a 30       	cpi	r25, 0x0A	; 10
    740e:	10 f0       	brcs	.+4      	; 0x7414 <putChar_hex+0x26>
    7410:	99 5c       	subi	r25, 0xC9	; 201
    7412:	01 c0       	rjmp	.+2      	; 0x7416 <putChar_hex+0x28>
    7414:	90 5d       	subi	r25, 0xD0	; 208
    7416:	91 83       	std	Z+1, r25	; 0x01
    7418:	12 82       	std	Z+2, r1	; 0x02
    741a:	c9 01       	movw	r24, r18
    741c:	08 95       	ret

0000741e <putChar_MidiChan>:
    741e:	80 31       	cpi	r24, 0x10	; 16
    7420:	48 f0       	brcs	.+18     	; 0x7434 <putChar_MidiChan+0x16>
    7422:	8e e6       	ldi	r24, 0x6E	; 110
    7424:	db 01       	movw	r26, r22
    7426:	8c 93       	st	X, r24
    7428:	fb 01       	movw	r30, r22
    742a:	32 96       	adiw	r30, 0x02	; 2
    742c:	8f e6       	ldi	r24, 0x6F	; 111
    742e:	11 96       	adiw	r26, 0x01	; 1
    7430:	8c 93       	st	X, r24
    7432:	15 c0       	rjmp	.+42     	; 0x745e <putChar_MidiChan+0x40>
    7434:	91 e0       	ldi	r25, 0x01	; 1
    7436:	98 0f       	add	r25, r24
    7438:	9a 30       	cpi	r25, 0x0A	; 10
    743a:	40 f0       	brcs	.+16     	; 0x744c <putChar_MidiChan+0x2e>
    743c:	db 01       	movw	r26, r22
    743e:	11 96       	adiw	r26, 0x01	; 1
    7440:	91 e3       	ldi	r25, 0x31	; 49
    7442:	fb 01       	movw	r30, r22
    7444:	90 83       	st	Z, r25
    7446:	97 ef       	ldi	r25, 0xF7	; 247
    7448:	98 0f       	add	r25, r24
    744a:	05 c0       	rjmp	.+10     	; 0x7456 <putChar_MidiChan+0x38>
    744c:	db 01       	movw	r26, r22
    744e:	11 96       	adiw	r26, 0x01	; 1
    7450:	80 e2       	ldi	r24, 0x20	; 32
    7452:	fb 01       	movw	r30, r22
    7454:	80 83       	st	Z, r24
    7456:	fd 01       	movw	r30, r26
    7458:	31 96       	adiw	r30, 0x01	; 1
    745a:	90 5d       	subi	r25, 0xD0	; 208
    745c:	9c 93       	st	X, r25
    745e:	10 82       	st	Z, r1
    7460:	cf 01       	movw	r24, r30
    7462:	08 95       	ret

00007464 <putChar_long>:
    7464:	ac 01       	movw	r20, r24
    7466:	fb 01       	movw	r30, r22
    7468:	34 96       	adiw	r30, 0x04	; 4
    746a:	db 01       	movw	r26, r22
    746c:	14 96       	adiw	r26, 0x04	; 4
    746e:	1c 92       	st	X, r1
    7470:	20 e0       	ldi	r18, 0x00	; 0
    7472:	10 c0       	rjmp	.+32     	; 0x7494 <putChar_long+0x30>
    7474:	94 2f       	mov	r25, r20
    7476:	9f 70       	andi	r25, 0x0F	; 15
    7478:	31 97       	sbiw	r30, 0x01	; 1
    747a:	9a 30       	cpi	r25, 0x0A	; 10
    747c:	10 f0       	brcs	.+4      	; 0x7482 <putChar_long+0x1e>
    747e:	99 5c       	subi	r25, 0xC9	; 201
    7480:	01 c0       	rjmp	.+2      	; 0x7484 <putChar_long+0x20>
    7482:	90 5d       	subi	r25, 0xD0	; 208
    7484:	90 83       	st	Z, r25
    7486:	52 95       	swap	r21
    7488:	42 95       	swap	r20
    748a:	4f 70       	andi	r20, 0x0F	; 15
    748c:	45 27       	eor	r20, r21
    748e:	5f 70       	andi	r21, 0x0F	; 15
    7490:	45 27       	eor	r20, r21
    7492:	2f 5f       	subi	r18, 0xFF	; 255
    7494:	24 30       	cpi	r18, 0x04	; 4
    7496:	70 f3       	brcs	.-36     	; 0x7474 <putChar_long+0x10>
    7498:	cf 01       	movw	r24, r30
    749a:	04 96       	adiw	r24, 0x04	; 4
    749c:	08 95       	ret

0000749e <putChar_Note>:
    749e:	88 23       	and	r24, r24
    74a0:	8c f4       	brge	.+34     	; 0x74c4 <putChar_Note+0x26>
    74a2:	8d e2       	ldi	r24, 0x2D	; 45
    74a4:	db 01       	movw	r26, r22
    74a6:	8c 93       	st	X, r24
    74a8:	9e e6       	ldi	r25, 0x6E	; 110
    74aa:	11 96       	adiw	r26, 0x01	; 1
    74ac:	9c 93       	st	X, r25
    74ae:	11 97       	sbiw	r26, 0x01	; 1
    74b0:	12 96       	adiw	r26, 0x02	; 2
    74b2:	8c 93       	st	X, r24
    74b4:	12 97       	sbiw	r26, 0x02	; 2
    74b6:	14 96       	adiw	r26, 0x04	; 4
    74b8:	fb 01       	movw	r30, r22
    74ba:	13 82       	std	Z+3, r1	; 0x03
    74bc:	49 c0       	rjmp	.+146    	; 0x7550 <putChar_Note+0xb2>
    74be:	8c 50       	subi	r24, 0x0C	; 12
    74c0:	9f 5f       	subi	r25, 0xFF	; 255
    74c2:	01 c0       	rjmp	.+2      	; 0x74c6 <putChar_Note+0x28>
    74c4:	90 e0       	ldi	r25, 0x00	; 0
    74c6:	8c 30       	cpi	r24, 0x0C	; 12
    74c8:	d0 f7       	brcc	.-12     	; 0x74be <putChar_Note+0x20>
    74ca:	8b 30       	cpi	r24, 0x0B	; 11
    74cc:	39 f4       	brne	.+14     	; 0x74dc <putChar_Note+0x3e>
    74ce:	fb 01       	movw	r30, r22
    74d0:	31 96       	adiw	r30, 0x01	; 1
    74d2:	88 e4       	ldi	r24, 0x48	; 72
    74d4:	db 01       	movw	r26, r22
    74d6:	8c 93       	st	X, r24
    74d8:	8f e5       	ldi	r24, 0x5F	; 95
    74da:	27 c0       	rjmp	.+78     	; 0x752a <putChar_Note+0x8c>
    74dc:	85 30       	cpi	r24, 0x05	; 5
    74de:	58 f4       	brcc	.+22     	; 0x74f6 <putChar_Note+0x58>
    74e0:	fb 01       	movw	r30, r22
    74e2:	31 96       	adiw	r30, 0x01	; 1
    74e4:	28 2f       	mov	r18, r24
    74e6:	26 95       	lsr	r18
    74e8:	2d 5b       	subi	r18, 0xBD	; 189
    74ea:	db 01       	movw	r26, r22
    74ec:	2c 93       	st	X, r18
    74ee:	80 fd       	sbrc	r24, 0
    74f0:	19 c0       	rjmp	.+50     	; 0x7524 <putChar_Note+0x86>
    74f2:	8f e5       	ldi	r24, 0x5F	; 95
    74f4:	1a c0       	rjmp	.+52     	; 0x752a <putChar_Note+0x8c>
    74f6:	89 30       	cpi	r24, 0x09	; 9
    74f8:	30 f0       	brcs	.+12     	; 0x7506 <putChar_Note+0x68>
    74fa:	fb 01       	movw	r30, r22
    74fc:	31 96       	adiw	r30, 0x01	; 1
    74fe:	21 e4       	ldi	r18, 0x41	; 65
    7500:	db 01       	movw	r26, r22
    7502:	2c 93       	st	X, r18
    7504:	0b c0       	rjmp	.+22     	; 0x751c <putChar_Note+0x7e>
    7506:	fb 01       	movw	r30, r22
    7508:	31 96       	adiw	r30, 0x01	; 1
    750a:	28 2f       	mov	r18, r24
    750c:	30 e0       	ldi	r19, 0x00	; 0
    750e:	25 50       	subi	r18, 0x05	; 5
    7510:	31 09       	sbc	r19, r1
    7512:	35 95       	asr	r19
    7514:	27 95       	ror	r18
    7516:	2a 5b       	subi	r18, 0xBA	; 186
    7518:	db 01       	movw	r26, r22
    751a:	2c 93       	st	X, r18
    751c:	80 ff       	sbrs	r24, 0
    751e:	04 c0       	rjmp	.+8      	; 0x7528 <putChar_Note+0x8a>
    7520:	8f e5       	ldi	r24, 0x5F	; 95
    7522:	03 c0       	rjmp	.+6      	; 0x752a <putChar_Note+0x8c>
    7524:	83 e2       	ldi	r24, 0x23	; 35
    7526:	01 c0       	rjmp	.+2      	; 0x752a <putChar_Note+0x8c>
    7528:	83 e2       	ldi	r24, 0x23	; 35
    752a:	80 83       	st	Z, r24
    752c:	91 11       	cpse	r25, r1
    752e:	05 c0       	rjmp	.+10     	; 0x753a <putChar_Note+0x9c>
    7530:	df 01       	movw	r26, r30
    7532:	12 96       	adiw	r26, 0x02	; 2
    7534:	8d e6       	ldi	r24, 0x6D	; 109
    7536:	81 83       	std	Z+1, r24	; 0x01
    7538:	0b c0       	rjmp	.+22     	; 0x7550 <putChar_Note+0xb2>
    753a:	9c 30       	cpi	r25, 0x0C	; 12
    753c:	28 f4       	brcc	.+10     	; 0x7548 <putChar_Note+0xaa>
    753e:	df 01       	movw	r26, r30
    7540:	12 96       	adiw	r26, 0x02	; 2
    7542:	91 5d       	subi	r25, 0xD1	; 209
    7544:	91 83       	std	Z+1, r25	; 0x01
    7546:	04 c0       	rjmp	.+8      	; 0x7550 <putChar_Note+0xb2>
    7548:	df 01       	movw	r26, r30
    754a:	12 96       	adiw	r26, 0x02	; 2
    754c:	8d e2       	ldi	r24, 0x2D	; 45
    754e:	81 83       	std	Z+1, r24	; 0x01
    7550:	1c 92       	st	X, r1
    7552:	cd 01       	movw	r24, r26
    7554:	08 95       	ret

00007556 <putChar_Manual>:
    7556:	83 30       	cpi	r24, 0x03	; 3
    7558:	38 f4       	brcc	.+14     	; 0x7568 <putChar_Manual+0x12>
    755a:	fb 01       	movw	r30, r22
    755c:	31 96       	adiw	r30, 0x01	; 1
    755e:	93 e3       	ldi	r25, 0x33	; 51
    7560:	98 1b       	sub	r25, r24
    7562:	db 01       	movw	r26, r22
    7564:	9c 93       	st	X, r25
    7566:	0d c0       	rjmp	.+26     	; 0x7582 <putChar_Manual+0x2c>
    7568:	83 30       	cpi	r24, 0x03	; 3
    756a:	31 f4       	brne	.+12     	; 0x7578 <putChar_Manual+0x22>
    756c:	fb 01       	movw	r30, r22
    756e:	31 96       	adiw	r30, 0x01	; 1
    7570:	80 e5       	ldi	r24, 0x50	; 80
    7572:	db 01       	movw	r26, r22
    7574:	8c 93       	st	X, r24
    7576:	05 c0       	rjmp	.+10     	; 0x7582 <putChar_Manual+0x2c>
    7578:	fb 01       	movw	r30, r22
    757a:	31 96       	adiw	r30, 0x01	; 1
    757c:	8d e2       	ldi	r24, 0x2D	; 45
    757e:	db 01       	movw	r26, r22
    7580:	8c 93       	st	X, r24
    7582:	10 82       	st	Z, r1
    7584:	cf 01       	movw	r24, r30
    7586:	08 95       	ret

00007588 <putString_P>:
    7588:	fc 01       	movw	r30, r24
    758a:	db 01       	movw	r26, r22
    758c:	20 e0       	ldi	r18, 0x00	; 0
    758e:	02 c0       	rjmp	.+4      	; 0x7594 <putString_P+0xc>
    7590:	28 2f       	mov	r18, r24
    7592:	da 01       	movw	r26, r20
    7594:	94 91       	lpm	r25, Z
    7596:	99 23       	and	r25, r25
    7598:	51 f0       	breq	.+20     	; 0x75ae <putString_P+0x26>
    759a:	ad 01       	movw	r20, r26
    759c:	4f 5f       	subi	r20, 0xFF	; 255
    759e:	5f 4f       	sbci	r21, 0xFF	; 255
    75a0:	31 96       	adiw	r30, 0x01	; 1
    75a2:	9c 93       	st	X, r25
    75a4:	81 e0       	ldi	r24, 0x01	; 1
    75a6:	82 0f       	add	r24, r18
    75a8:	24 31       	cpi	r18, 0x14	; 20
    75aa:	90 f3       	brcs	.-28     	; 0x7590 <putString_P+0x8>
    75ac:	01 c0       	rjmp	.+2      	; 0x75b0 <putString_P+0x28>
    75ae:	ad 01       	movw	r20, r26
    75b0:	ca 01       	movw	r24, r20
    75b2:	08 95       	ret

000075b4 <putString_Prog>:
    75b4:	20 e5       	ldi	r18, 0x50	; 80
    75b6:	fc 01       	movw	r30, r24
    75b8:	20 83       	st	Z, r18
    75ba:	26 2f       	mov	r18, r22
    75bc:	27 70       	andi	r18, 0x07	; 7
    75be:	2f 5c       	subi	r18, 0xCF	; 207
    75c0:	21 83       	std	Z+1, r18	; 0x01
    75c2:	66 95       	lsr	r22
    75c4:	66 95       	lsr	r22
    75c6:	66 95       	lsr	r22
    75c8:	67 70       	andi	r22, 0x07	; 7
    75ca:	6f 5b       	subi	r22, 0xBF	; 191
    75cc:	62 83       	std	Z+2, r22	; 0x02
    75ce:	03 96       	adiw	r24, 0x03	; 3
    75d0:	08 95       	ret

000075d2 <lcd_wordout>:
    75d2:	cf 93       	push	r28
    75d4:	c8 2f       	mov	r28, r24
    75d6:	89 2f       	mov	r24, r25
    75d8:	71 de       	rcall	.-798    	; 0x72bc <lcd_hexout>
    75da:	8c 2f       	mov	r24, r28
    75dc:	6f de       	rcall	.-802    	; 0x72bc <lcd_hexout>
    75de:	cf 91       	pop	r28
    75e0:	08 95       	ret

000075e2 <lcd_noteOut>:
    75e2:	cf 93       	push	r28
    75e4:	df 93       	push	r29
    75e6:	88 23       	and	r24, r24
    75e8:	e4 f1       	brlt	.+120    	; 0x7662 <lcd_noteOut+0x80>
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	02 c0       	rjmp	.+4      	; 0x75f2 <lcd_noteOut+0x10>
    75ee:	9f 5f       	subi	r25, 0xFF	; 255
    75f0:	8c 50       	subi	r24, 0x0C	; 12
    75f2:	8c 30       	cpi	r24, 0x0C	; 12
    75f4:	e0 f7       	brcc	.-8      	; 0x75ee <lcd_noteOut+0xc>
    75f6:	48 2f       	mov	r20, r24
    75f8:	50 e0       	ldi	r21, 0x00	; 0
    75fa:	4c 30       	cpi	r20, 0x0C	; 12
    75fc:	51 05       	cpc	r21, r1
    75fe:	30 f4       	brcc	.+12     	; 0x760c <lcd_noteOut+0x2a>
    7600:	fa 01       	movw	r30, r20
    7602:	88 27       	eor	r24, r24
    7604:	ea 55       	subi	r30, 0x5A	; 90
    7606:	ff 4f       	sbci	r31, 0xFF	; 255
    7608:	8f 4f       	sbci	r24, 0xFF	; 255
    760a:	5d c1       	rjmp	.+698    	; 0x78c6 <__tablejump2__>
    760c:	d3 e2       	ldi	r29, 0x23	; 35
    760e:	80 e2       	ldi	r24, 0x20	; 32
    7610:	23 c0       	rjmp	.+70     	; 0x7658 <lcd_noteOut+0x76>
    7612:	d3 e2       	ldi	r29, 0x23	; 35
    7614:	84 e4       	ldi	r24, 0x44	; 68
    7616:	20 c0       	rjmp	.+64     	; 0x7658 <lcd_noteOut+0x76>
    7618:	d3 e2       	ldi	r29, 0x23	; 35
    761a:	86 e4       	ldi	r24, 0x46	; 70
    761c:	1d c0       	rjmp	.+58     	; 0x7658 <lcd_noteOut+0x76>
    761e:	d3 e2       	ldi	r29, 0x23	; 35
    7620:	87 e4       	ldi	r24, 0x47	; 71
    7622:	1a c0       	rjmp	.+52     	; 0x7658 <lcd_noteOut+0x76>
    7624:	d3 e2       	ldi	r29, 0x23	; 35
    7626:	81 e4       	ldi	r24, 0x41	; 65
    7628:	17 c0       	rjmp	.+46     	; 0x7658 <lcd_noteOut+0x76>
    762a:	d5 ea       	ldi	r29, 0xA5	; 165
    762c:	83 e4       	ldi	r24, 0x43	; 67
    762e:	14 c0       	rjmp	.+40     	; 0x7658 <lcd_noteOut+0x76>
    7630:	d5 ea       	ldi	r29, 0xA5	; 165
    7632:	84 e4       	ldi	r24, 0x44	; 68
    7634:	11 c0       	rjmp	.+34     	; 0x7658 <lcd_noteOut+0x76>
    7636:	d5 ea       	ldi	r29, 0xA5	; 165
    7638:	85 e4       	ldi	r24, 0x45	; 69
    763a:	0e c0       	rjmp	.+28     	; 0x7658 <lcd_noteOut+0x76>
    763c:	d5 ea       	ldi	r29, 0xA5	; 165
    763e:	86 e4       	ldi	r24, 0x46	; 70
    7640:	0b c0       	rjmp	.+22     	; 0x7658 <lcd_noteOut+0x76>
    7642:	d5 ea       	ldi	r29, 0xA5	; 165
    7644:	87 e4       	ldi	r24, 0x47	; 71
    7646:	08 c0       	rjmp	.+16     	; 0x7658 <lcd_noteOut+0x76>
    7648:	d5 ea       	ldi	r29, 0xA5	; 165
    764a:	81 e4       	ldi	r24, 0x41	; 65
    764c:	05 c0       	rjmp	.+10     	; 0x7658 <lcd_noteOut+0x76>
    764e:	d5 ea       	ldi	r29, 0xA5	; 165
    7650:	88 e4       	ldi	r24, 0x48	; 72
    7652:	02 c0       	rjmp	.+4      	; 0x7658 <lcd_noteOut+0x76>
    7654:	d3 e2       	ldi	r29, 0x23	; 35
    7656:	83 e4       	ldi	r24, 0x43	; 67
    7658:	99 23       	and	r25, r25
    765a:	39 f0       	breq	.+14     	; 0x766a <lcd_noteOut+0x88>
    765c:	cf e2       	ldi	r28, 0x2F	; 47
    765e:	c9 0f       	add	r28, r25
    7660:	05 c0       	rjmp	.+10     	; 0x766c <lcd_noteOut+0x8a>
    7662:	cd e2       	ldi	r28, 0x2D	; 45
    7664:	dd e2       	ldi	r29, 0x2D	; 45
    7666:	8d e2       	ldi	r24, 0x2D	; 45
    7668:	01 c0       	rjmp	.+2      	; 0x766c <lcd_noteOut+0x8a>
    766a:	cd e2       	ldi	r28, 0x2D	; 45
    766c:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7670:	8d 2f       	mov	r24, r29
    7672:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7676:	8c 2f       	mov	r24, r28
    7678:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    767c:	83 e0       	ldi	r24, 0x03	; 3
    767e:	df 91       	pop	r29
    7680:	cf 91       	pop	r28
    7682:	08 95       	ret

00007684 <lcd_ChannelOut>:
    7684:	cf 93       	push	r28
    7686:	c8 2f       	mov	r28, r24
    7688:	cf 70       	andi	r28, 0x0F	; 15
    768a:	81 e0       	ldi	r24, 0x01	; 1
    768c:	8c 0f       	add	r24, r28
    768e:	8a 30       	cpi	r24, 0x0A	; 10
    7690:	28 f0       	brcs	.+10     	; 0x769c <lcd_ChannelOut+0x18>
    7692:	81 e3       	ldi	r24, 0x31	; 49
    7694:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7698:	87 ef       	ldi	r24, 0xF7	; 247
    769a:	8c 0f       	add	r24, r28
    769c:	80 5d       	subi	r24, 0xD0	; 208
    769e:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    76a2:	cf 91       	pop	r28
    76a4:	08 95       	ret

000076a6 <lcd_ManualOutDec>:
    76a6:	84 30       	cpi	r24, 0x04	; 4
    76a8:	20 f0       	brcs	.+8      	; 0x76b2 <lcd_ManualOutDec+0xc>
    76aa:	8d e2       	ldi	r24, 0x2D	; 45
    76ac:	0c 94 23 13 	jmp	0x2646	; 0x2646 <lcd_putc>
    76b0:	08 95       	ret
    76b2:	83 30       	cpi	r24, 0x03	; 3
    76b4:	21 f4       	brne	.+8      	; 0x76be <lcd_ManualOutDec+0x18>
    76b6:	80 e5       	ldi	r24, 0x50	; 80
    76b8:	0c 94 23 13 	jmp	0x2646	; 0x2646 <lcd_putc>
    76bc:	08 95       	ret
    76be:	93 e3       	ldi	r25, 0x33	; 51
    76c0:	98 1b       	sub	r25, r24
    76c2:	89 2f       	mov	r24, r25
    76c4:	0c 94 23 13 	jmp	0x2646	; 0x2646 <lcd_putc>
    76c8:	08 95       	ret

000076ca <lcd_blank>:
    76ca:	cf 93       	push	r28
    76cc:	04 c0       	rjmp	.+8      	; 0x76d6 <lcd_blank+0xc>
    76ce:	80 e2       	ldi	r24, 0x20	; 32
    76d0:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    76d4:	8c 2f       	mov	r24, r28
    76d6:	cf ef       	ldi	r28, 0xFF	; 255
    76d8:	c8 0f       	add	r28, r24
    76da:	81 11       	cpse	r24, r1
    76dc:	f8 cf       	rjmp	.-16     	; 0x76ce <lcd_blank+0x4>
    76de:	cf 91       	pop	r28
    76e0:	08 95       	ret

000076e2 <lcd_clrEol>:
    76e2:	cf 93       	push	r28
    76e4:	90 e0       	ldi	r25, 0x00	; 0
    76e6:	04 c0       	rjmp	.+8      	; 0x76f0 <lcd_clrEol+0xe>
    76e8:	80 e2       	ldi	r24, 0x20	; 32
    76ea:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    76ee:	9c 2f       	mov	r25, r28
    76f0:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    76f4:	84 31       	cpi	r24, 0x14	; 20
    76f6:	51 f0       	breq	.+20     	; 0x770c <lcd_clrEol+0x2a>
    76f8:	84 35       	cpi	r24, 0x54	; 84
    76fa:	41 f0       	breq	.+16     	; 0x770c <lcd_clrEol+0x2a>
    76fc:	88 32       	cpi	r24, 0x28	; 40
    76fe:	31 f0       	breq	.+12     	; 0x770c <lcd_clrEol+0x2a>
    7700:	88 36       	cpi	r24, 0x68	; 104
    7702:	21 f0       	breq	.+8      	; 0x770c <lcd_clrEol+0x2a>
    7704:	c1 e0       	ldi	r28, 0x01	; 1
    7706:	c9 0f       	add	r28, r25
    7708:	94 31       	cpi	r25, 0x14	; 20
    770a:	70 f3       	brcs	.-36     	; 0x76e8 <lcd_clrEol+0x6>
    770c:	cf 91       	pop	r28
    770e:	08 95       	ret

00007710 <lcd_cursosblink>:
    7710:	8d e0       	ldi	r24, 0x0D	; 13
    7712:	0e 94 6f 12 	call	0x24de	; 0x24de <lcd_write_command>
    7716:	8f ef       	ldi	r24, 0xFF	; 255
    7718:	80 93 db 18 	sts	0x18DB, r24	; 0x8018db <lcd_cursorIsOn>
    771c:	08 95       	ret

0000771e <lcd_cursoroff>:
    771e:	8c e0       	ldi	r24, 0x0C	; 12
    7720:	0e 94 6f 12 	call	0x24de	; 0x24de <lcd_write_command>
    7724:	10 92 db 18 	sts	0x18DB, r1	; 0x8018db <lcd_cursorIsOn>
    7728:	08 95       	ret

0000772a <lcd_waitSymbolOn>:
    772a:	cf 93       	push	r28
    772c:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7730:	8c e0       	ldi	r24, 0x0C	; 12
    7732:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    7736:	81 ea       	ldi	r24, 0xA1	; 161
    7738:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    773c:	8c 2f       	mov	r24, r28
    773e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    7742:	cf 91       	pop	r28
    7744:	08 95       	ret

00007746 <lcd_waitSymbolOff>:
    7746:	cf 93       	push	r28
    7748:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    774c:	8c e0       	ldi	r24, 0x0C	; 12
    774e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    7752:	80 e2       	ldi	r24, 0x20	; 32
    7754:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>
    7758:	8c 2f       	mov	r24, r28
    775a:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
    775e:	cf 91       	pop	r28
    7760:	08 95       	ret

00007762 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    7762:	84 30       	cpi	r24, 0x04	; 4
    7764:	28 f0       	brcs	.+10     	; 0x7770 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    7766:	20 e0       	ldi	r18, 0x00	; 0
    7768:	0d c0       	rjmp	.+26     	; 0x7784 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    776a:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    776c:	fa 01       	movw	r30, r20
    776e:	02 c0       	rjmp	.+4      	; 0x7774 <keylabel_set+0x12>
    7770:	fb 01       	movw	r30, r22
    7772:	20 e0       	ldi	r18, 0x00	; 0
    7774:	af 01       	movw	r20, r30
    7776:	4f 5f       	subi	r20, 0xFF	; 255
    7778:	5f 4f       	sbci	r21, 0xFF	; 255
    777a:	94 91       	lpm	r25, Z
    777c:	99 23       	and	r25, r25
    777e:	11 f0       	breq	.+4      	; 0x7784 <keylabel_set+0x22>
    7780:	25 30       	cpi	r18, 0x05	; 5
    7782:	98 f3       	brcs	.-26     	; 0x776a <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    7784:	90 e0       	ldi	r25, 0x00	; 0
    7786:	dc 01       	movw	r26, r24
    7788:	aa 0f       	add	r26, r26
    778a:	bb 1f       	adc	r27, r27
    778c:	aa 0f       	add	r26, r26
    778e:	bb 1f       	adc	r27, r27
    7790:	8a 0f       	add	r24, r26
    7792:	9b 1f       	adc	r25, r27
    7794:	dc 01       	movw	r26, r24
    7796:	af 5e       	subi	r26, 0xEF	; 239
    7798:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    779a:	45 e0       	ldi	r20, 0x05	; 5
    779c:	50 e0       	ldi	r21, 0x00	; 0
    779e:	42 1b       	sub	r20, r18
    77a0:	51 09       	sbc	r21, r1
    77a2:	ca 01       	movw	r24, r20
    77a4:	99 23       	and	r25, r25
    77a6:	0c f4       	brge	.+2      	; 0x77aa <keylabel_set+0x48>
    77a8:	01 96       	adiw	r24, 0x01	; 1
    77aa:	95 95       	asr	r25
    77ac:	87 95       	ror	r24
    77ae:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    77b0:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    77b2:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    77b4:	0e c0       	rjmp	.+28     	; 0x77d2 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    77b6:	93 17       	cp	r25, r19
    77b8:	10 f0       	brcs	.+4      	; 0x77be <keylabel_set+0x5c>
    77ba:	98 17       	cp	r25, r24
    77bc:	18 f0       	brcs	.+6      	; 0x77c4 <keylabel_set+0x62>
			*charBufPtr = ' ';
    77be:	20 e2       	ldi	r18, 0x20	; 32
    77c0:	2c 93       	st	X, r18
    77c2:	05 c0       	rjmp	.+10     	; 0x77ce <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    77c4:	fb 01       	movw	r30, r22
    77c6:	24 91       	lpm	r18, Z
    77c8:	2c 93       	st	X, r18
    77ca:	6f 5f       	subi	r22, 0xFF	; 255
    77cc:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    77ce:	11 96       	adiw	r26, 0x01	; 1
		i++;
    77d0:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    77d2:	95 30       	cpi	r25, 0x05	; 5
    77d4:	80 f3       	brcs	.-32     	; 0x77b6 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    77d6:	08 95       	ret

000077d8 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    77d8:	90 e0       	ldi	r25, 0x00	; 0
    77da:	fc 01       	movw	r30, r24
    77dc:	ee 0f       	add	r30, r30
    77de:	ff 1f       	adc	r31, r31
    77e0:	ee 0f       	add	r30, r30
    77e2:	ff 1f       	adc	r31, r31
    77e4:	8e 0f       	add	r24, r30
    77e6:	9f 1f       	adc	r25, r31
    77e8:	fc 01       	movw	r30, r24
    77ea:	ef 5e       	subi	r30, 0xEF	; 239
    77ec:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    77ee:	80 e0       	ldi	r24, 0x00	; 0
    77f0:	04 c0       	rjmp	.+8      	; 0x77fa <keylabel_clr+0x22>
		*charPtr++ = ' ';
    77f2:	90 e2       	ldi	r25, 0x20	; 32
    77f4:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    77f6:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    77f8:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    77fa:	85 30       	cpi	r24, 0x05	; 5
    77fc:	d0 f3       	brcs	.-12     	; 0x77f2 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    77fe:	08 95       	ret

00007800 <keylabel_toLCD>:

void keylabel_toLCD(){
    7800:	0f 93       	push	r16
    7802:	1f 93       	push	r17
    7804:	cf 93       	push	r28
    7806:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7808:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    780c:	84 e5       	ldi	r24, 0x54	; 84
    780e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7812:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7814:	e1 e1       	ldi	r30, 0x11	; 17
    7816:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7818:	08 c0       	rjmp	.+16     	; 0x782a <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    781a:	8f 01       	movw	r16, r30
    781c:	0f 5f       	subi	r16, 0xFF	; 255
    781e:	1f 4f       	sbci	r17, 0xFF	; 255
    7820:	80 81       	ld	r24, Z
    7822:	0e 94 23 13 	call	0x2646	; 0x2646 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7826:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    7828:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    782a:	c4 31       	cpi	r28, 0x14	; 20
    782c:	b0 f3       	brcs	.-20     	; 0x781a <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    782e:	8d 2f       	mov	r24, r29
    7830:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <lcd_goto>
}
    7834:	df 91       	pop	r29
    7836:	cf 91       	pop	r28
    7838:	1f 91       	pop	r17
    783a:	0f 91       	pop	r16
    783c:	08 95       	ret

0000783e <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    783e:	90 e0       	ldi	r25, 0x00	; 0
    7840:	fc 01       	movw	r30, r24
    7842:	ee 0f       	add	r30, r30
    7844:	ff 1f       	adc	r31, r31
    7846:	ee 0f       	add	r30, r30
    7848:	ff 1f       	adc	r31, r31
    784a:	8e 0f       	add	r24, r30
    784c:	9f 1f       	adc	r25, r31
    784e:	fc 01       	movw	r30, r24
    7850:	ef 5e       	subi	r30, 0xEF	; 239
    7852:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7854:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    7856:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7858:	12 c0       	rjmp	.+36     	; 0x787e <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    785a:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    785c:	61 11       	cpse	r22, r1
    785e:	06 c0       	rjmp	.+12     	; 0x786c <keylabel_statcheck+0x2e>
    7860:	2a 30       	cpi	r18, 0x0A	; 10
    7862:	21 f4       	brne	.+8      	; 0x786c <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    7864:	80 e8       	ldi	r24, 0x80	; 128
    7866:	80 83       	st	Z, r24
			result = 0xFF;
    7868:	8f ef       	ldi	r24, 0xFF	; 255
    786a:	07 c0       	rjmp	.+14     	; 0x787a <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    786c:	66 23       	and	r22, r22
    786e:	29 f0       	breq	.+10     	; 0x787a <keylabel_statcheck+0x3c>
    7870:	20 38       	cpi	r18, 0x80	; 128
    7872:	19 f4       	brne	.+6      	; 0x787a <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    7874:	8a e0       	ldi	r24, 0x0A	; 10
    7876:	80 83       	st	Z, r24
			result = 0xFF;
    7878:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    787a:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    787c:	9f 5f       	subi	r25, 0xFF	; 255
    787e:	95 30       	cpi	r25, 0x05	; 5
    7880:	60 f3       	brcs	.-40     	; 0x785a <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    7882:	08 95       	ret

00007884 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    7884:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    7886:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    7888:	94 91       	lpm	r25, Z
    788a:	99 23       	and	r25, r25
    788c:	21 f0       	breq	.+8      	; 0x7896 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    788e:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7890:	8f 5f       	subi	r24, 0xFF	; 255
    7892:	80 32       	cpi	r24, 0x20	; 32
    7894:	c8 f3       	brcs	.-14     	; 0x7888 <get_StrLenP+0x4>
	return result;
}
    7896:	08 95       	ret

00007898 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    7898:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    789a:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    789c:	90 81       	ld	r25, Z
    789e:	99 23       	and	r25, r25
    78a0:	21 f0       	breq	.+8      	; 0x78aa <get_StrLen+0x12>
			return result;
		}
		pString++;
    78a2:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    78a4:	8f 5f       	subi	r24, 0xFF	; 255
    78a6:	80 32       	cpi	r24, 0x20	; 32
    78a8:	c8 f3       	brcs	.-14     	; 0x789c <get_StrLen+0x4>
	return result;
}
    78aa:	08 95       	ret

000078ac <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    78ac:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    78ae:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    78b0:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    78b2:	06 c0       	rjmp	.+12     	; 0x78c0 <reverse_Bits+0x14>
		result = result << 1;
    78b4:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    78b6:	32 2f       	mov	r19, r18
    78b8:	31 70       	andi	r19, 0x01	; 1
    78ba:	83 2b       	or	r24, r19
		val = val >> 1;
    78bc:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    78be:	9f 5f       	subi	r25, 0xFF	; 255
    78c0:	98 30       	cpi	r25, 0x08	; 8
    78c2:	c0 f3       	brcs	.-16     	; 0x78b4 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    78c4:	08 95       	ret

000078c6 <__tablejump2__>:
    78c6:	ee 0f       	add	r30, r30
    78c8:	ff 1f       	adc	r31, r31
    78ca:	88 1f       	adc	r24, r24
    78cc:	8b bf       	out	0x3b, r24	; 59
    78ce:	07 90       	elpm	r0, Z+
    78d0:	f6 91       	elpm	r31, Z
    78d2:	e0 2d       	mov	r30, r0
    78d4:	19 94       	eijmp

000078d6 <eeprom_read_block>:
    78d6:	dc 01       	movw	r26, r24
    78d8:	cb 01       	movw	r24, r22

000078da <eeprom_read_blraw>:
    78da:	fc 01       	movw	r30, r24
    78dc:	f9 99       	sbic	0x1f, 1	; 31
    78de:	fe cf       	rjmp	.-4      	; 0x78dc <eeprom_read_blraw+0x2>
    78e0:	06 c0       	rjmp	.+12     	; 0x78ee <eeprom_read_blraw+0x14>
    78e2:	f2 bd       	out	0x22, r31	; 34
    78e4:	e1 bd       	out	0x21, r30	; 33
    78e6:	f8 9a       	sbi	0x1f, 0	; 31
    78e8:	31 96       	adiw	r30, 0x01	; 1
    78ea:	00 b4       	in	r0, 0x20	; 32
    78ec:	0d 92       	st	X+, r0
    78ee:	41 50       	subi	r20, 0x01	; 1
    78f0:	50 40       	sbci	r21, 0x00	; 0
    78f2:	b8 f7       	brcc	.-18     	; 0x78e2 <eeprom_read_blraw+0x8>
    78f4:	08 95       	ret

000078f6 <eeprom_read_byte>:
    78f6:	f9 99       	sbic	0x1f, 1	; 31
    78f8:	fe cf       	rjmp	.-4      	; 0x78f6 <eeprom_read_byte>
    78fa:	92 bd       	out	0x22, r25	; 34
    78fc:	81 bd       	out	0x21, r24	; 33
    78fe:	f8 9a       	sbi	0x1f, 0	; 31
    7900:	99 27       	eor	r25, r25
    7902:	80 b5       	in	r24, 0x20	; 32
    7904:	08 95       	ret

00007906 <eeprom_read_word>:
    7906:	a8 e1       	ldi	r26, 0x18	; 24
    7908:	b0 e0       	ldi	r27, 0x00	; 0
    790a:	42 e0       	ldi	r20, 0x02	; 2
    790c:	50 e0       	ldi	r21, 0x00	; 0
    790e:	e5 cf       	rjmp	.-54     	; 0x78da <eeprom_read_blraw>

00007910 <eeprom_update_block>:
    7910:	dc 01       	movw	r26, r24
    7912:	a4 0f       	add	r26, r20
    7914:	b5 1f       	adc	r27, r21
    7916:	41 50       	subi	r20, 0x01	; 1
    7918:	50 40       	sbci	r21, 0x00	; 0
    791a:	40 f0       	brcs	.+16     	; 0x792c <eeprom_update_block+0x1c>
    791c:	cb 01       	movw	r24, r22
    791e:	84 0f       	add	r24, r20
    7920:	95 1f       	adc	r25, r21
    7922:	2e 91       	ld	r18, -X
    7924:	05 d0       	rcall	.+10     	; 0x7930 <eeprom_update_r18>
    7926:	41 50       	subi	r20, 0x01	; 1
    7928:	50 40       	sbci	r21, 0x00	; 0
    792a:	d8 f7       	brcc	.-10     	; 0x7922 <eeprom_update_block+0x12>
    792c:	08 95       	ret

0000792e <eeprom_update_byte>:
    792e:	26 2f       	mov	r18, r22

00007930 <eeprom_update_r18>:
    7930:	f9 99       	sbic	0x1f, 1	; 31
    7932:	fe cf       	rjmp	.-4      	; 0x7930 <eeprom_update_r18>
    7934:	92 bd       	out	0x22, r25	; 34
    7936:	81 bd       	out	0x21, r24	; 33
    7938:	f8 9a       	sbi	0x1f, 0	; 31
    793a:	01 97       	sbiw	r24, 0x01	; 1
    793c:	00 b4       	in	r0, 0x20	; 32
    793e:	02 16       	cp	r0, r18
    7940:	39 f0       	breq	.+14     	; 0x7950 <eeprom_update_r18+0x20>
    7942:	1f ba       	out	0x1f, r1	; 31
    7944:	20 bd       	out	0x20, r18	; 32
    7946:	0f b6       	in	r0, 0x3f	; 63
    7948:	f8 94       	cli
    794a:	fa 9a       	sbi	0x1f, 2	; 31
    794c:	f9 9a       	sbi	0x1f, 1	; 31
    794e:	0f be       	out	0x3f, r0	; 63
    7950:	08 95       	ret

00007952 <eeprom_update_word>:
    7952:	01 96       	adiw	r24, 0x01	; 1
    7954:	27 2f       	mov	r18, r23
    7956:	ec df       	rcall	.-40     	; 0x7930 <eeprom_update_r18>
    7958:	ea cf       	rjmp	.-44     	; 0x792e <eeprom_update_byte>

0000795a <_exit>:
    795a:	f8 94       	cli

0000795c <__stop_program>:
    795c:	ff cf       	rjmp	.-2      	; 0x795c <__stop_program>
