
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  0000609a  0000614e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000609a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000abb  00800206  00800206  00006154  2**0
                  ALLOC
  3 .eeprom       00000800  00810000  00810000  00006154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00006954  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006984  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000908  00000000  00000000  000069c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bad3  00000000  00000000  000072d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000235a  00000000  00000000  00012da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00006df6  00000000  00000000  000150fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001494  00000000  00000000  0001bef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002a6f  00000000  00000000  0001d388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006cbd  00000000  00000000  0001fdf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ae8  00000000  00000000  00026ab4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fa c7       	rjmp	.+4084   	; 0xff6 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
       8:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
       c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      10:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      14:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      18:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      1c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      20:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      24:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      28:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      2c:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      30:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      34:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      38:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <__bad_interrupt>
      3c:	fd c7       	rjmp	.+4090   	; 0x1038 <__bad_interrupt>
      3e:	00 00       	nop
      40:	fb c7       	rjmp	.+4086   	; 0x1038 <__bad_interrupt>
      42:	00 00       	nop
      44:	f9 c7       	rjmp	.+4082   	; 0x1038 <__bad_interrupt>
      46:	00 00       	nop
      48:	f7 c7       	rjmp	.+4078   	; 0x1038 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f5 c7       	rjmp	.+4074   	; 0x1038 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f3 c7       	rjmp	.+4070   	; 0x1038 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_21>
      58:	ef c7       	rjmp	.+4062   	; 0x1038 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ed c7       	rjmp	.+4058   	; 0x1038 <__bad_interrupt>
      5e:	00 00       	nop
      60:	eb c7       	rjmp	.+4054   	; 0x1038 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 eb 2c 	jmp	0x59d6	; 0x59d6 <__vector_25>
      68:	0c 94 16 2d 	jmp	0x5a2c	; 0x5a2c <__vector_26>
      6c:	e5 c7       	rjmp	.+4042   	; 0x1038 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e3 c7       	rjmp	.+4038   	; 0x1038 <__bad_interrupt>
      72:	00 00       	nop
      74:	e1 c7       	rjmp	.+4034   	; 0x1038 <__bad_interrupt>
      76:	00 00       	nop
      78:	df c7       	rjmp	.+4030   	; 0x1038 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dd c7       	rjmp	.+4026   	; 0x1038 <__bad_interrupt>
      7e:	00 00       	nop
      80:	db c7       	rjmp	.+4022   	; 0x1038 <__bad_interrupt>
      82:	00 00       	nop
      84:	d9 c7       	rjmp	.+4018   	; 0x1038 <__bad_interrupt>
      86:	00 00       	nop
      88:	d7 c7       	rjmp	.+4014   	; 0x1038 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d5 c7       	rjmp	.+4010   	; 0x1038 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ee 2b 	jmp	0x57dc	; 0x57dc <__vector_36>
      94:	0c 94 2e 2c 	jmp	0x585c	; 0x585c <__vector_37>
      98:	cf c7       	rjmp	.+3998   	; 0x1038 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cd c7       	rjmp	.+3994   	; 0x1038 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	cb c7       	rjmp	.+3990   	; 0x1038 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c9 c7       	rjmp	.+3986   	; 0x1038 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c7 c7       	rjmp	.+3982   	; 0x1038 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c5 c7       	rjmp	.+3978   	; 0x1038 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c3 c7       	rjmp	.+3974   	; 0x1038 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c1 c7       	rjmp	.+3970   	; 0x1038 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bf c7       	rjmp	.+3966   	; 0x1038 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	bd c7       	rjmp	.+3962   	; 0x1038 <__bad_interrupt>
      be:	00 00       	nop
      c0:	bb c7       	rjmp	.+3958   	; 0x1038 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b9 c7       	rjmp	.+3954   	; 0x1038 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b7 c7       	rjmp	.+3950   	; 0x1038 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b5 c7       	rjmp	.+3946   	; 0x1038 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b3 c7       	rjmp	.+3942   	; 0x1038 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b1 c7       	rjmp	.+3938   	; 0x1038 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	af c7       	rjmp	.+3934   	; 0x1038 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ad c7       	rjmp	.+3930   	; 0x1038 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ab c7       	rjmp	.+3926   	; 0x1038 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	b4 19       	sub	r27, r4
      e6:	bf 19       	sub	r27, r15
      e8:	cb 19       	sub	r28, r11
      ea:	e7 19       	sub	r30, r7
      ec:	04 1a       	sub	r0, r20
      ee:	25 1a       	sub	r2, r21
      f0:	30 1a       	sub	r3, r16
      f2:	3b 1a       	sub	r3, r27
      f4:	50 1a       	sub	r5, r16
      f6:	66 1a       	sub	r6, r22
      f8:	6e 1a       	sub	r6, r30
      fa:	7c 1a       	sub	r7, r28
      fc:	a9 1a       	sub	r10, r25
      fe:	b9 1a       	sub	r11, r25
     100:	dd 1a       	sub	r13, r29
     102:	2f 1b       	sub	r18, r31
     104:	48 1b       	sub	r20, r24
     106:	5d 1b       	sub	r21, r29
     108:	76 1b       	sub	r23, r22
     10a:	7e 1b       	sub	r23, r30
     10c:	a3 1b       	sub	r26, r19
     10e:	a3 1b       	sub	r26, r19
     110:	a7 1b       	sub	r26, r23
     112:	b4 1b       	sub	r27, r20
     114:	0f 1c       	adc	r0, r15
     116:	17 1c       	adc	r1, r7
     118:	61 1c       	adc	r6, r1
     11a:	c3 1c       	adc	r12, r3
     11c:	ed 1c       	adc	r14, r13
     11e:	19 1d       	adc	r17, r9
     120:	48 1d       	adc	r20, r8
     122:	50 1d       	adc	r21, r0
     124:	56 1d       	adc	r21, r6
     126:	0f 1c       	adc	r0, r15
     128:	5e 1d       	adc	r21, r14
     12a:	72 1d       	adc	r23, r2
     12c:	b0 1d       	adc	r27, r0
     12e:	bd 1d       	adc	r27, r13
     130:	c8 1d       	adc	r28, r8
     132:	dd 1d       	adc	r29, r13
     134:	f6 1d       	adc	r31, r6
     136:	19 1e       	adc	r1, r25
     138:	24 1e       	adc	r2, r20
     13a:	2a 1e       	adc	r2, r26
     13c:	2f 1e       	adc	r2, r31
     13e:	42 1e       	adc	r4, r18
     140:	63 1e       	adc	r6, r19
     142:	76 1e       	adc	r7, r22
     144:	c4 2e       	mov	r12, r20
     146:	d9 2e       	mov	r13, r25
     148:	c7 2e       	mov	r12, r23
     14a:	b8 2e       	mov	r11, r24
     14c:	ca 2e       	mov	r12, r26
     14e:	cd 2e       	mov	r12, r29
     150:	bb 2e       	mov	r11, r27
     152:	d0 2e       	mov	r13, r16
     154:	be 2e       	mov	r11, r30
     156:	d3 2e       	mov	r13, r19
     158:	c1 2e       	mov	r12, r17
     15a:	d6 2e       	mov	r13, r22

0000015c <__trampolines_end>:
     15c:	4c 6f       	ori	r20, 0xFC	; 252
     15e:	67 3a       	cpi	r22, 0xA7	; 167
     160:	20 00       	.word	0x0020	; ????

00000162 <ErrorText>:
     162:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     172:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     182:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     192:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1a2:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1b2:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1c2:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1d2:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1e2:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1f2:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     202:	00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00 00 00     ....Mod:Fail....
     212:	00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e 6f 77     ......Mod:Unknow
     222:	49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d 69 64     Inp.....OVFL:Mid
     232:	69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c 3a 4d     iIn.......OVFL:M
     242:	69 64 69 4f 75 74 00 00 00 00 04 00 4f 56 46 4c     idiOut......OVFL
     252:	3a 50 69 70 65 4d 73 67 00 00 00 00 05 00 50 77     :PipeMsg......Pw
     262:	72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00           r:OuptutOn....

00000270 <releaseKeyString>:
     270:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     280:	6e 00                                               n.

00000282 <prog_name>:
     282:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

00000291 <usbHWBits>:
     291:	2c 42 69 74 73 3a 00                                ,Bits:.

00000298 <usbHWmodule>:
     298:	4d 6f 64 75 6c 65 3a 00                             Module:.

000002a0 <usbHWempty>:
     2a0:	65 6d 70 74 79 00                                   empty.

000002a6 <usbHWRange>:
     2a6:	52 61 6e 67 65 3a 20 00                             Range: .

000002ae <usbHWManual>:
     2ae:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

000002b7 <usbHWmodulCheck>:
     2b7:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     2c7:	20 00                                                .

000002c9 <usbHWmodulInst>:
     2c9:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     2d9:	3a 20 00                                            : .

000002dc <usbHWtitel>:
     2dc:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     2ec:	72 61 74 69 6f 6e 0d 0a 00                          ration...

000002f5 <HelloMsg>:
     2f5:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     305:	65 72 66 61 63 65 0d 0a 00                          erface...

0000030e <usbLog>:
     30e:	4c 6f 67 0d 0a 00                                   Log...

00000314 <usbEmpty>:
     314:	65 6d 70 74 79 0d 0a 00                             empty...

0000031c <msg_programming2>:
     31c:	6f 6b 20 20 20 20 20 00                             ok     .

00000324 <msg_programming1>:
     324:	73 61 76 65 2e 2e 2e 00                             save....

0000032c <logNone>:
     32c:	3c 6e 6f 6e 65 3e 00                                <none>.

00000333 <stringNotAssigen>:
     333:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

0000033e <menuMessageMIDIpanic>:
     33e:	4e 2e 6f 66 66 20 73 65 6e 74 00                    N.off sent.

00000349 <MenuMIDIOutText>:
     349:	4f 75 74 3a 00                                      Out:.

0000034e <MenuMIDIInText>:
     34e:	49 6e 3a 00                                         In:.

00000352 <initMenuText>:
     352:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

0000035c <nibbleInfo>:
	...
     364:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     374:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     384:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     394:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     3a4:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     3b4:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     3c4:	00 00 00 00 02 00 01 00 00 00 00 00 00 00 00 00     ................
     3d4:	00 00 00 00 00 00                                   ......

000003da <menu_selFunc>:
     3da:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 46 06     ..<none>......F.
     3ea:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     3fa:	50 06 3c 06 00 00 00 00 01 10 53 74 69 6d 6d 65     P.<.......Stimme
     40a:	6e 00 00 00 9c 0a 32 06 00 00 00 00 01 10 4b 6f     n.....2.......Ko
     41a:	70 70 65 6c 32 3c 33 00 00 00 14 06 eb 18 00 00     ppel2<3.........
     42a:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 0a 06     ..Koppel1<3.....
     43a:	ee 18 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     ......KoppelP<3.
     44a:	00 00 00 06 f1 18 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     45a:	31 3c 32 00 00 00 f6 05 f4 18 00 00 01 10 4b 6f     1<2...........Ko
     46a:	70 70 65 6c 50 3c 32 00 00 00 ec 05 f7 18 00 00     ppelP<2.........
     47a:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 e2 05     ..KoppelP<1.....
     48a:	fa 18 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     ......Koppel3<2.
     49a:	00 00 d8 05 fd 18 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     4aa:	33 3c 31 00 00 00 ce 05 00 19 00 00 01 10 4b 6f     3<1...........Ko
     4ba:	70 70 65 6c 33 3c 50 00 00 00 c4 05 03 19 00 00     ppel3<P.........
     4ca:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 ba 05     ..Koppel2<1.....
     4da:	06 19 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     ......Koppel2<P.
     4ea:	00 00 b0 05 09 19 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     4fa:	31 3c 50 00 00 00 a6 05 0c 19 00 00 01 10 4b 6f     1<P...........Ko
     50a:	6d 62 69 6e 20 31 41 00 00 00 9c 05 be 15 00 00     mbin 1A.........
     51a:	01 10 4b 6f 6d 62 69 6e 20 32 41 00 00 00 92 05     ..Kombin 2A.....
     52a:	cb 15 00 00 01 10 4b 6f 6d 62 69 6e 20 33 41 00     ......Kombin 3A.
     53a:	00 00 88 05 d8 15 00 00 01 10 4b 6f 6d 62 69 6e     ..........Kombin
     54a:	20 34 41 00 00 00 7e 05 e5 15 00 00 01 10 4d 49      4A...~.......MI
     55a:	44 49 20 4f 66 66 00 00 00 00 1e 06 1e 20 00 00     DI Off....... ..
     56a:	c1 10 53 65 74 75 70 00 00 00 00 00 3c 0b 28 06     ..Setup.....<.(.
     57a:	00 00 00 00                                         ....

0000057e <shortKeyTextK4A>:
     57e:	4b 62 34 41 00 00 00 00 00 00                       Kb4A......

00000588 <shortKeyTextK3A>:
     588:	4b 62 33 41 00 00 00 00 00 00                       Kb3A......

00000592 <shortKeyTextK2A>:
     592:	4b 62 32 41 00 00 00 00 00 00                       Kb2A......

0000059c <shortKeyTextK1A>:
     59c:	4b 62 31 41 00 00 00 00 00 00                       Kb1A......

000005a6 <shortKeyTextCpl1P>:
     5a6:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

000005b0 <shortKeyTextCpl2P>:
     5b0:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

000005ba <shortKeyTextCpl21>:
     5ba:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

000005c4 <shortKeyTextCpl3P>:
     5c4:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

000005ce <shortKeyTextCpl31>:
     5ce:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

000005d8 <shortKeyTextCpl32>:
     5d8:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

000005e2 <shortKeyTextCplP1>:
     5e2:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

000005ec <shortKeyTextCplP2>:
     5ec:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

000005f6 <shortKeyTextCpl12>:
     5f6:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

00000600 <shortKeyTextCplP3>:
     600:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

0000060a <shortKeyTextCpl13>:
     60a:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

00000614 <shortKeyTextCpl23>:
     614:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

0000061e <shortKeyTextMIDIoff>:
     61e:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

00000628 <shortKeyTextSetup>:
     628:	53 65 74 75 00 00 00 00 00 00                       Setu......

00000632 <shortKeyTextStim>:
     632:	53 74 69 6d 00 00 00 00 00 00                       Stim......

0000063c <shortKeyTextMenu>:
     63c:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

00000646 <shortKeyTextNone>:
	...

00000650 <menu_main>:
     650:	81 00 4d 61 6e 75 61 6c 00 00 00 00 b4 06 00 00     ..Manual........
     660:	00 00 00 00 01 00 4d 49 44 49 00 00 00 00 00 00     ......MIDI......
     670:	08 08 00 00 00 00 00 00 01 00 54 61 73 74 65 6e     ..........Tasten
     680:	00 00 00 00 4c 0a 00 00 00 00 08 16 01 00 53 74     ....L.........St
     690:	61 74 75 73 00 00 00 00 60 0f 00 00 00 00 00 00     atus....`.......
     6a0:	c1 00 53 65 74 75 70 00 00 00 00 00 3c 0b 00 00     ..Setup.....<...
     6b0:	00 00 00 00                                         ....

000006b4 <menu_manual>:
     6b4:	81 00 4b 6f 6d 62 69 6e 2e 00 00 00 f0 06 00 00     ..Kombin........
     6c4:	00 00 00 00 01 00 4b 6f 70 70 6c 65 72 00 00 00     ......Koppler...
     6d4:	18 07 00 00 00 00 00 00 c1 00 53 74 69 6d 6d 65     ..........Stimme
     6e4:	6e 00 00 00 9c 0a 00 00 00 00 00 00                 n...........

000006f0 <menu_programm>:
     6f0:	8c 00 4c 61 64 65 6e 00 00 00 00 00 00 00 4c 05     ..Laden.......L.
     700:	00 00 f2 15 cc 00 53 70 65 69 63 68 65 72 6e 00     ......Speichern.
     710:	00 00 4c 05 00 00 fc 15                             ..L.....

00000718 <menu_coupler>:
     718:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 b3 07     ..2<3...........
     728:	00 00 ab 15 09 00 31 3c 33 00 00 00 00 00 00 00     ......1<3.......
     738:	00 00 b4 07 00 00 ab 15 09 00 31 3c 32 00 00 00     ..........1<2...
     748:	00 00 00 00 00 00 b5 07 00 00 ab 15 09 00 50 3c     ..............P<
     758:	33 00 00 00 00 00 00 00 00 00 b6 07 00 00 ab 15     3...............
     768:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 b7 07     ..P<2...........
     778:	00 00 ab 15 09 00 50 3c 31 00 00 00 00 00 00 00     ......P<1.......
     788:	00 00 b8 07 00 00 ab 15 09 00 33 3c 32 00 00 00     ..........3<2...
     798:	00 00 00 00 00 00 b9 07 00 00 ab 15 09 00 33 3c     ..............3<
     7a8:	31 00 00 00 00 00 00 00 00 00 ba 07 00 00 ab 15     1...............
     7b8:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 bb 07     ..3<P...........
     7c8:	00 00 ab 15 09 00 32 3c 31 00 00 00 00 00 00 00     ......2<1.......
     7d8:	00 00 bc 07 00 00 ab 15 09 00 32 3c 50 00 00 00     ..........2<P...
     7e8:	00 00 00 00 00 00 bd 07 00 00 ab 15 c9 00 31 3c     ..............1<
     7f8:	50 00 00 00 00 00 00 00 00 00 be 07 00 00 ab 15     P...............

00000808 <menu_midi>:
     808:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     818:	1e 20 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     . ....MIDIin....
     828:	6c 08 00 00 00 00 76 17 01 00 4d 49 44 49 6f 75     l.....v...MIDIou
     838:	74 00 00 00 ec 0a 00 00 00 00 72 17 09 00 41 63     t.........r...Ac
     848:	74 2e 53 65 6e 73 65 00 00 00 cc 08 00 00 6e 17     t.Sense.......n.
     858:	c9 00 56 65 6c 30 34 4f 66 66 00 00 00 00 cd 08     ..Vel04Off......
     868:	00 00 6e 17                                         ..n.

0000086c <menu_midiIn>:
     86c:	81 00 43 68 2e 31 00 00 00 00 00 00 ac 09 00 00     ..Ch.1..........
     87c:	25 15 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     %.....Ch.2......
     88c:	ac 09 01 00 25 15 00 00 01 00 43 68 2e 33 00 00     ....%.....Ch.3..
     89c:	00 00 00 00 ac 09 02 00 25 15 00 00 01 00 43 68     ........%.....Ch
     8ac:	2e 34 00 00 00 00 00 00 ac 09 03 00 25 15 00 00     .4..........%...
     8bc:	01 00 43 68 2e 35 00 00 00 00 00 00 ac 09 04 00     ..Ch.5..........
     8cc:	25 15 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     %.....Ch.6......
     8dc:	ac 09 05 00 25 15 00 00 01 00 43 68 2e 37 00 00     ....%.....Ch.7..
     8ec:	00 00 00 00 ac 09 06 00 25 15 00 00 01 00 43 68     ........%.....Ch
     8fc:	2e 38 00 00 00 00 00 00 ac 09 07 00 25 15 00 00     .8..........%...
     90c:	01 00 43 68 2e 39 00 00 00 00 00 00 ac 09 08 00     ..Ch.9..........
     91c:	25 15 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     %.....Ch.10.....
     92c:	ac 09 09 00 25 15 00 00 01 00 43 68 2e 31 31 00     ....%.....Ch.11.
     93c:	00 00 00 00 ac 09 0a 00 25 15 00 00 01 00 43 68     ........%.....Ch
     94c:	2e 31 32 00 00 00 00 00 ac 09 0b 00 25 15 00 00     .12.........%...
     95c:	01 00 43 68 2e 31 33 00 00 00 00 00 ac 09 0c 00     ..Ch.13.........
     96c:	25 15 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     %.....Ch.14.....
     97c:	ac 09 0d 00 25 15 00 00 01 00 43 68 2e 31 35 00     ....%.....Ch.15.
     98c:	00 00 00 00 ac 09 0e 00 25 15 00 00 c1 00 43 68     ........%.....Ch
     99c:	2e 31 36 00 00 00 00 00 ac 09 0f 00 25 15 00 00     .16.........%...

000009ac <menu_midiInSec>:
     9ac:	81 00 53 65 63 74 2e 31 00 00 00 00 fc 09 00 00     ..Sect.1........
     9bc:	30 15 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     0.....Sect.2....
     9cc:	fc 09 01 00 30 15 00 00 01 00 53 65 63 74 2e 33     ....0.....Sect.3
     9dc:	00 00 00 00 fc 09 02 00 30 15 00 00 c1 00 53 65     ........0.....Se
     9ec:	63 74 2e 34 00 00 00 00 fc 09 03 00 30 15 00 00     ct.4........0...

000009fc <menu_midiInVar>:
     9fc:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 c8 07     ..Manual........
     a0c:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     a1c:	00 00 c9 07 00 00 00 00 06 80 52 61 6e 67 65 00     ..........Range.
     a2c:	00 00 00 00 00 00 ca 07 00 00 00 00 c4 90 4d 61     ..............Ma
     a3c:	6e 4e 6f 74 65 00 00 00 00 00 cb 07 00 00 00 00     nNote...........

00000a4c <menu_key>:
     a4c:	81 08 54 61 73 74 65 31 00 00 00 00 da 03 00 00     ..Taste1........
     a5c:	94 15 a2 24 01 08 54 61 73 74 65 32 00 00 00 00     ...$..Taste2....
     a6c:	da 03 01 00 94 15 a2 24 01 08 54 61 73 74 65 33     .......$..Taste3
     a7c:	00 00 00 00 da 03 02 00 94 15 a2 24 c1 08 54 61     ...........$..Ta
     a8c:	73 74 65 34 00 00 00 00 da 03 03 00 94 15 a2 24     ste4...........$

00000a9c <menu_tune>:
     a9c:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     aac:	52 16 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     R.... Man.2.....
     abc:	00 00 01 00 52 16 00 00 01 20 4d 61 6e 2e 31 00     ....R.... Man.1.
     acc:	00 00 00 00 00 00 02 00 52 16 00 00 c1 20 50 65     ........R.... Pe
     adc:	64 61 6c 00 00 00 00 00 00 00 03 00 52 16 00 00     dal.........R...

00000aec <menu_midiOut>:
     aec:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 c8 08     ..III...........
     afc:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     b0c:	00 00 c9 08 00 00 00 00 03 10 49 00 00 00 00 00     ..........I.....
     b1c:	00 00 00 00 00 00 ca 08 00 00 00 00 c3 10 50 00     ..............P.
	...
     b34:	00 00 cb 08 00 00 00 00                             ........

00000b3c <menu_setup>:
     b3c:	81 00 4d 6f 64 75 6c 65 00 00 00 00 04 0c 00 00     ..Module........
     b4c:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     b5c:	58 0d 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     X.........Power.
     b6c:	00 00 00 00 c8 0b 00 00 00 00 00 00 c1 00 45 45     ..............EE
     b7c:	70 72 6f 6d 00 00 00 00 8c 0b 00 00 00 00 00 00     prom............

00000b8c <menu_eeprom>:
     b8c:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     b9c:	3b 19 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     ;.....EEBackup..
     bac:	00 00 00 00 23 19 00 00 c1 00 45 45 52 65 73 74     ....#.....EERest
     bbc:	6f 72 65 00 00 00 00 00 2f 19 00 00                 ore...../...

00000bc8 <menu_Power>:
     bc8:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     bd8:	64 25 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     d%....PowerOff..
     be8:	00 00 00 00 6d 25 00 00 c1 00 50 2e 52 65 73 74     ....m%....P.Rest
     bf8:	61 72 74 00 00 00 00 00 75 25 00 00                 art.....u%..

00000c04 <menu_module>:
     c04:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 4e 03     ..ModRead.....N.
     c14:	00 00 84 17 0a 00 4d 6f 64 57 72 69 74 65 00 00     ......ModWrite..
     c24:	00 00 4d 03 00 00 84 17 0a 08 4d 6f 64 4f 4b 00     ..M.......ModOK.
     c34:	00 00 00 00 00 00 46 02 00 00 00 00 01 00 4d 6f     ......F.......Mo
     c44:	64 54 65 73 74 00 00 00 68 0c 00 00 00 00 00 00     dTest...h.......
     c54:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 94 0d 00 00     ..ModAssign.....
     c64:	00 00 7a 17                                         ..z.

00000c68 <menu_ModeSel>:
     c68:	81 00 4d 6f 64 2e 30 00 00 00 00 00 08 0d 00 00     ..Mod.0.........
     c78:	1a 15 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     c88:	08 0d 01 00 1a 15 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
     c98:	00 00 00 00 08 0d 02 00 1a 15 00 00 01 00 4d 6f     ..............Mo
     ca8:	64 2e 33 00 00 00 00 00 08 0d 03 00 1a 15 00 00     d.3.............
     cb8:	01 00 4d 6f 64 2e 34 00 00 00 00 00 08 0d 04 00     ..Mod.4.........
     cc8:	1a 15 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     cd8:	08 0d 05 00 1a 15 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
     ce8:	00 00 00 00 08 0d 06 00 1a 15 00 00 c1 00 4d 6f     ..............Mo
     cf8:	64 2e 37 00 00 00 00 00 08 0d 07 00 1a 15 00 00     d.7.............

00000d08 <menu_ModTestSelcted>:
     d08:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     d18:	0c 16 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
     d28:	00 00 51 05 b1 14 ed 14 01 00 54 65 73 74 50 74     ..Q.......TestPt
     d38:	72 6e 00 00 00 00 00 00 79 21 00 00 c1 00 4c 6f     rn......y!....Lo
     d48:	6f 70 54 73 74 00 00 00 00 00 00 00 40 16 00 00     opTst.......@...

00000d58 <menu_USBser>:
     d58:	89 00 41 63 74 69 76 65 00 00 00 00 00 00 47 0b     ..Active......G.
     d68:	00 00 a6 17 01 00 53 65 6e 64 4c 6f 67 00 00 00     ......SendLog...
     d78:	00 00 00 00 88 17 00 00 c1 00 53 6e 64 48 57 43     ..........SndHWC
     d88:	66 67 00 00 00 00 00 00 ba 17 00 00                 fg..........

00000d94 <menu_modAssign>:
     d94:	81 00 4d 61 6e 2e 33 00 00 00 00 00 98 0e 00 00     ..Man.3.........
     da4:	4e 15 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     N.....Man.2.....
     db4:	98 0e 01 00 4e 15 00 00 01 00 4d 61 6e 2e 31 00     ....N.....Man.1.
     dc4:	00 00 00 00 98 0e 02 00 4e 15 00 00 01 00 50 65     ........N.....Pe
     dd4:	64 61 6c 00 00 00 00 00 98 0e 03 00 4e 15 00 00     dal.........N...
     de4:	c1 00 52 65 67 69 73 74 65 72 00 00 f8 0d 04 00     ..Register......
     df4:	00 00 00 00                                         ....

00000df8 <menu_modSection8>:
     df8:	81 00 53 65 63 74 2e 31 00 00 00 00 e8 0e 00 00     ..Sect.1........
     e08:	7e 15 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ~.....Sect.2....
     e18:	e8 0e 01 00 7e 15 00 00 01 00 53 65 63 74 2e 33     ....~.....Sect.3
     e28:	00 00 00 00 e8 0e 02 00 7e 15 00 00 01 00 53 65     ........~.....Se
     e38:	63 74 2e 34 00 00 00 00 e8 0e 03 00 7e 15 00 00     ct.4........~...
     e48:	01 00 53 65 63 74 2e 35 00 00 00 00 e8 0e 04 00     ..Sect.5........
     e58:	7e 15 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     ~.....Sect.6....
     e68:	e8 0e 05 00 7e 15 00 00 01 00 53 65 63 74 2e 37     ....~.....Sect.7
     e78:	00 00 00 00 e8 0e 06 00 7e 15 00 00 c1 00 53 65     ........~.....Se
     e88:	63 74 2e 38 00 00 00 00 e8 0e 07 00 7e 15 00 00     ct.8........~...

00000e98 <menu_modSection>:
     e98:	81 00 53 65 63 74 2e 31 00 00 00 00 24 0f 00 00     ..Sect.1....$...
     ea8:	59 15 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     Y.....Sect.2....
     eb8:	24 0f 01 00 59 15 00 00 01 00 53 65 63 74 2e 33     $...Y.....Sect.3
     ec8:	00 00 00 00 24 0f 02 00 59 15 00 00 c1 00 53 65     ....$...Y.....Se
     ed8:	63 74 2e 34 00 00 00 00 24 0f 03 00 59 15 00 00     ct.4....$...Y...

00000ee8 <menu_modDefineReg>:
     ee8:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 9a 07     ..RegBeg........
     ef8:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
     f08:	00 00 9b 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
     f18:	2f 42 69 74 00 00 9c 07 00 00 00 00                 /Bit........

00000f24 <menu_modDefine>:
     f24:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 ce 08     ..NoteBeg.......
     f34:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
     f44:	00 00 cf 08 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
     f54:	2f 42 69 74 00 00 d0 08 00 00 00 00                 /Bit........

00000f60 <menu_status>:
     f60:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
     f70:	73 1f 00 00 02 40 4d 49 44 49 2d 49 6e 00 00 00     s....@MIDI-In...
     f80:	00 00 00 00 f7 1e 00 00 c2 40 4d 49 44 49 2d 4f     .........@MIDI-O
     f90:	75 74 00 00 00 00 00 00 35 1f 00 00                 ut......5...

00000f9c <sw_version>:
     f9c:	56 30 2e 35 37 00                                   V0.57.

00000fa2 <cplInfo>:
     fa2:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
     fb2:	01 02 00 03 01 03 02 03                             ........

00000fba <keylabel_1>:
     fba:	31 00                                               1.

00000fbc <keylabel_0>:
     fbc:	30 00                                               0.

00000fbe <keylabel_text>:
     fbe:	54 65 78 74 80 00                                   Text..

00000fc4 <keylabel_exit>:
     fc4:	45 78 69 74 00                                      Exit.

00000fc9 <keylabel_onoff>:
     fc9:	45 69 6e 80 00                                      Ein..

00000fce <keylabel_minus>:
     fce:	2d 00                                               -.

00000fd0 <keylabel_plus>:
     fd0:	2b 00                                               +.

00000fd2 <keylabel_left>:
     fd2:	7f 00                                               ..

00000fd4 <keylabel_right>:
     fd4:	7e 00                                               ~.

00000fd6 <keylabel_down>:
     fd6:	09 00                                               ..

00000fd8 <keylabel_up>:
     fd8:	08 00                                               ..

00000fda <cgPattern_Block>:
     fda:	00 00 0e 0e 0e 0e 00 00                             ........

00000fe2 <cgPattern_Down>:
     fe2:	04 04 04 04 15 0e 04 00                             ........

00000fea <cgPattern_Up>:
     fea:	04 0e 15 04 04 04 04 00                             ........

00000ff2 <cr_lf>:
     ff2:	0d 0a 00 00                                         ....

00000ff6 <__ctors_end>:
     ff6:	11 24       	eor	r1, r1
     ff8:	1f be       	out	0x3f, r1	; 63
     ffa:	cf ef       	ldi	r28, 0xFF	; 255
     ffc:	d1 e2       	ldi	r29, 0x21	; 33
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	cd bf       	out	0x3d, r28	; 61
    1002:	00 e0       	ldi	r16, 0x00	; 0
    1004:	0c bf       	out	0x3c, r16	; 60

00001006 <__do_copy_data>:
    1006:	12 e0       	ldi	r17, 0x02	; 2
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	b2 e0       	ldi	r27, 0x02	; 2
    100c:	ea e9       	ldi	r30, 0x9A	; 154
    100e:	f0 e6       	ldi	r31, 0x60	; 96
    1010:	00 e0       	ldi	r16, 0x00	; 0
    1012:	0b bf       	out	0x3b, r16	; 59
    1014:	02 c0       	rjmp	.+4      	; 0x101a <__do_copy_data+0x14>
    1016:	07 90       	elpm	r0, Z+
    1018:	0d 92       	st	X+, r0
    101a:	a6 30       	cpi	r26, 0x06	; 6
    101c:	b1 07       	cpc	r27, r17
    101e:	d9 f7       	brne	.-10     	; 0x1016 <__do_copy_data+0x10>

00001020 <__do_clear_bss>:
    1020:	2c e0       	ldi	r18, 0x0C	; 12
    1022:	a6 e0       	ldi	r26, 0x06	; 6
    1024:	b2 e0       	ldi	r27, 0x02	; 2
    1026:	01 c0       	rjmp	.+2      	; 0x102a <.do_clear_bss_start>

00001028 <.do_clear_bss_loop>:
    1028:	1d 92       	st	X+, r1

0000102a <.do_clear_bss_start>:
    102a:	a1 3c       	cpi	r26, 0xC1	; 193
    102c:	b2 07       	cpc	r27, r18
    102e:	e1 f7       	brne	.-8      	; 0x1028 <.do_clear_bss_loop>
    1030:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <main>
    1034:	0c 94 4b 30 	jmp	0x6096	; 0x6096 <_exit>

00001038 <__bad_interrupt>:
    1038:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000103c <crc16_ram>:

uint8_t ee_initError = EE_ERROR_NONE;

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
    103c:	fc 01       	movw	r30, r24
	uint16_t result = CRC_START;
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
	while (count-- > 0){
    1042:	1c c0       	rjmp	.+56     	; 0x107c <crc16_ram+0x40>
		result =  _crc16_update(result, *pRam++);
    1044:	df 01       	movw	r26, r30
    1046:	11 96       	adiw	r26, 0x01	; 1
    1048:	20 81       	ld	r18, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    104a:	82 27       	eor	r24, r18
    104c:	28 2f       	mov	r18, r24
    104e:	22 95       	swap	r18
    1050:	28 27       	eor	r18, r24
    1052:	02 2e       	mov	r0, r18
    1054:	26 95       	lsr	r18
    1056:	26 95       	lsr	r18
    1058:	20 25       	eor	r18, r0
    105a:	02 2e       	mov	r0, r18
    105c:	26 95       	lsr	r18
    105e:	20 25       	eor	r18, r0
    1060:	27 70       	andi	r18, 0x07	; 7
    1062:	08 2e       	mov	r0, r24
    1064:	89 2f       	mov	r24, r25
    1066:	26 95       	lsr	r18
    1068:	07 94       	ror	r0
    106a:	27 95       	ror	r18
    106c:	90 2d       	mov	r25, r0
    106e:	82 27       	eor	r24, r18
    1070:	06 94       	lsr	r0
    1072:	27 95       	ror	r18
    1074:	90 25       	eor	r25, r0
    1076:	82 27       	eor	r24, r18

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    1078:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    107a:	fd 01       	movw	r30, r26

//--------------------------------- F U N C T I O N S -----------------------------

uint16_t crc16_ram(uint8_t* pRam, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    107c:	ab 01       	movw	r20, r22
    107e:	41 50       	subi	r20, 0x01	; 1
    1080:	51 09       	sbc	r21, r1
    1082:	67 2b       	or	r22, r23
    1084:	f9 f6       	brne	.-66     	; 0x1044 <crc16_ram+0x8>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    1086:	08 95       	ret

00001088 <crc16_eeprom>:

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
	uint16_t result = CRC_START;
    1094:	cf ef       	ldi	r28, 0xFF	; 255
    1096:	df ef       	ldi	r29, 0xFF	; 255
	while (count-- > 0){
    1098:	21 c0       	rjmp	.+66     	; 0x10dc <crc16_eeprom+0x54>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    109a:	7c 01       	movw	r14, r24
    109c:	2f ef       	ldi	r18, 0xFF	; 255
    109e:	e2 1a       	sub	r14, r18
    10a0:	f2 0a       	sbc	r15, r18
    10a2:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    10a6:	9e 01       	movw	r18, r28
    10a8:	28 27       	eor	r18, r24
    10aa:	82 2f       	mov	r24, r18
    10ac:	82 95       	swap	r24
    10ae:	82 27       	eor	r24, r18
    10b0:	08 2e       	mov	r0, r24
    10b2:	86 95       	lsr	r24
    10b4:	86 95       	lsr	r24
    10b6:	80 25       	eor	r24, r0
    10b8:	08 2e       	mov	r0, r24
    10ba:	86 95       	lsr	r24
    10bc:	80 25       	eor	r24, r0
    10be:	87 70       	andi	r24, 0x07	; 7
    10c0:	02 2e       	mov	r0, r18
    10c2:	23 2f       	mov	r18, r19
    10c4:	86 95       	lsr	r24
    10c6:	07 94       	ror	r0
    10c8:	87 95       	ror	r24
    10ca:	30 2d       	mov	r19, r0
    10cc:	28 27       	eor	r18, r24
    10ce:	06 94       	lsr	r0
    10d0:	87 95       	ror	r24
    10d2:	30 25       	eor	r19, r0
    10d4:	28 27       	eor	r18, r24
    10d6:	e9 01       	movw	r28, r18
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    10d8:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    10da:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom(const uint8_t* pEeprom, uint16_t count){
	uint16_t result = CRC_START;
	while (count-- > 0){
    10dc:	8b 01       	movw	r16, r22
    10de:	01 50       	subi	r16, 0x01	; 1
    10e0:	11 09       	sbc	r17, r1
    10e2:	67 2b       	or	r22, r23
    10e4:	d1 f6       	brne	.-76     	; 0x109a <crc16_eeprom+0x12>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    10e6:	ce 01       	movw	r24, r28
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	ff 90       	pop	r15
    10f2:	ef 90       	pop	r14
    10f4:	08 95       	ret

000010f6 <crc16_ram_startVal>:

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
    10f6:	fc 01       	movw	r30, r24
    10f8:	ca 01       	movw	r24, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    10fa:	1c c0       	rjmp	.+56     	; 0x1134 <crc16_ram_startVal+0x3e>
		result =  _crc16_update(result, *pRam++);
    10fc:	df 01       	movw	r26, r30
    10fe:	11 96       	adiw	r26, 0x01	; 1
    1100:	20 81       	ld	r18, Z
    1102:	82 27       	eor	r24, r18
    1104:	28 2f       	mov	r18, r24
    1106:	22 95       	swap	r18
    1108:	28 27       	eor	r18, r24
    110a:	02 2e       	mov	r0, r18
    110c:	26 95       	lsr	r18
    110e:	26 95       	lsr	r18
    1110:	20 25       	eor	r18, r0
    1112:	02 2e       	mov	r0, r18
    1114:	26 95       	lsr	r18
    1116:	20 25       	eor	r18, r0
    1118:	27 70       	andi	r18, 0x07	; 7
    111a:	08 2e       	mov	r0, r24
    111c:	89 2f       	mov	r24, r25
    111e:	26 95       	lsr	r18
    1120:	07 94       	ror	r0
    1122:	27 95       	ror	r18
    1124:	90 2d       	mov	r25, r0
    1126:	82 27       	eor	r24, r18
    1128:	06 94       	lsr	r0
    112a:	27 95       	ror	r18
    112c:	90 25       	eor	r25, r0
    112e:	82 27       	eor	r24, r18
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1130:	ba 01       	movw	r22, r20
		result =  _crc16_update(result, *pRam++);
    1132:	fd 01       	movw	r30, r26
	return (result);
}

uint16_t crc16_ram_startVal(uint8_t* pRam, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1134:	ab 01       	movw	r20, r22
    1136:	41 50       	subi	r20, 0x01	; 1
    1138:	51 09       	sbc	r21, r1
    113a:	67 2b       	or	r22, r23
    113c:	f9 f6       	brne	.-66     	; 0x10fc <crc16_ram_startVal+0x6>
		result =  _crc16_update(result, *pRam++);
	}
	return (result);
}
    113e:	08 95       	ret

00001140 <crc16_eeprom_startVal>:

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
    1140:	ef 92       	push	r14
    1142:	ff 92       	push	r15
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	ea 01       	movw	r28, r20
	uint16_t result = crcVal;
	while (count-- > 0){
    114e:	21 c0       	rjmp	.+66     	; 0x1192 <crc16_eeprom_startVal+0x52>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    1150:	7c 01       	movw	r14, r24
    1152:	2f ef       	ldi	r18, 0xFF	; 255
    1154:	e2 1a       	sub	r14, r18
    1156:	f2 0a       	sbc	r15, r18
    1158:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    115c:	ae 01       	movw	r20, r28
    115e:	48 27       	eor	r20, r24
    1160:	84 2f       	mov	r24, r20
    1162:	82 95       	swap	r24
    1164:	84 27       	eor	r24, r20
    1166:	08 2e       	mov	r0, r24
    1168:	86 95       	lsr	r24
    116a:	86 95       	lsr	r24
    116c:	80 25       	eor	r24, r0
    116e:	08 2e       	mov	r0, r24
    1170:	86 95       	lsr	r24
    1172:	80 25       	eor	r24, r0
    1174:	87 70       	andi	r24, 0x07	; 7
    1176:	04 2e       	mov	r0, r20
    1178:	45 2f       	mov	r20, r21
    117a:	86 95       	lsr	r24
    117c:	07 94       	ror	r0
    117e:	87 95       	ror	r24
    1180:	50 2d       	mov	r21, r0
    1182:	48 27       	eor	r20, r24
    1184:	06 94       	lsr	r0
    1186:	87 95       	ror	r24
    1188:	50 25       	eor	r21, r0
    118a:	48 27       	eor	r20, r24
    118c:	ea 01       	movw	r28, r20
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    118e:	b8 01       	movw	r22, r16
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
    1190:	c7 01       	movw	r24, r14
	return (result);
}

uint16_t crc16_eeprom_startVal(const uint8_t* pEeprom, uint16_t count, uint16_t crcVal){
	uint16_t result = crcVal;
	while (count-- > 0){
    1192:	8b 01       	movw	r16, r22
    1194:	01 50       	subi	r16, 0x01	; 1
    1196:	11 09       	sbc	r17, r1
    1198:	67 2b       	or	r22, r23
    119a:	d1 f6       	brne	.-76     	; 0x1150 <crc16_eeprom_startVal+0x10>
		result =  _crc16_update(result, eeprom_read_byte(pEeprom++));
	}
	return (result);
}
    119c:	ce 01       	movw	r24, r28
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	08 95       	ret

000011ac <eeprom_ReadManualMap>:


uint8_t eeprom_ReadManualMap(){
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    11b0:	82 e3       	ldi	r24, 0x32	; 50
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    11b8:	ec 01       	movw	r28, r24
    11ba:	60 e3       	ldi	r22, 0x30	; 48
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	62 df       	rcall	.-316    	; 0x1088 <crc16_eeprom>
    11c4:	c8 17       	cp	r28, r24
    11c6:	d9 07       	cpc	r29, r25
    11c8:	81 f4       	brne	.+32     	; 0x11ea <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    11d2:	8d 34       	cpi	r24, 0x4D	; 77
    11d4:	51 f4       	brne	.+20     	; 0x11ea <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    11d6:	40 e3       	ldi	r20, 0x30	; 48
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	62 e0       	ldi	r22, 0x02	; 2
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	8e ec       	ldi	r24, 0xCE	; 206
    11e0:	98 e0       	ldi	r25, 0x08	; 8
    11e2:	0e 94 09 30 	call	0x6012	; 0x6012 <eeprom_read_block>
		return (EE_LOAD_OK);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    11ea:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap)) 
    1200:	85 e3       	ldi	r24, 0x35	; 53
    1202:	91 e0       	ldi	r25, 0x01	; 1
    1204:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    1208:	ec 01       	movw	r28, r24
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	71 e0       	ldi	r23, 0x01	; 1
    120e:	85 e3       	ldi	r24, 0x35	; 53
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	3a df       	rcall	.-396    	; 0x1088 <crc16_eeprom>
    1214:	c8 17       	cp	r28, r24
    1216:	d9 07       	cpc	r29, r25
    1218:	81 f4       	brne	.+32     	; 0x123a <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    121a:	84 e3       	ldi	r24, 0x34	; 52
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    1222:	89 34       	cpi	r24, 0x49	; 73
    1224:	51 f4       	brne	.+20     	; 0x123a <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	51 e0       	ldi	r21, 0x01	; 1
    122a:	65 e3       	ldi	r22, 0x35	; 53
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	88 ec       	ldi	r24, 0xC8	; 200
    1230:	97 e0       	ldi	r25, 0x07	; 7
    1232:	0e 94 09 30 	call	0x6012	; 0x6012 <eeprom_read_block>
		return (EE_LOAD_OK);
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	06 c0       	rjmp	.+12     	; 0x1246 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    123a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    1244:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))  
    1250:	8e e3       	ldi	r24, 0x3E	; 62
    1252:	91 e0       	ldi	r25, 0x01	; 1
    1254:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    1258:	ec 01       	movw	r28, r24
    125a:	66 e0       	ldi	r22, 0x06	; 6
    125c:	70 e0       	ldi	r23, 0x00	; 0
    125e:	88 e3       	ldi	r24, 0x38	; 56
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	12 df       	rcall	.-476    	; 0x1088 <crc16_eeprom>
    1264:	c8 17       	cp	r28, r24
    1266:	d9 07       	cpc	r29, r25
    1268:	c1 f4       	brne	.+48     	; 0x129a <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    126a:	87 e3       	ldi	r24, 0x37	; 55
    126c:	91 e0       	ldi	r25, 0x01	; 1
    126e:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    1272:	8f 34       	cpi	r24, 0x4F	; 79
    1274:	91 f4       	brne	.+36     	; 0x129a <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1276:	44 e0       	ldi	r20, 0x04	; 4
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	68 e3       	ldi	r22, 0x38	; 56
    127c:	71 e0       	ldi	r23, 0x01	; 1
    127e:	88 ec       	ldi	r24, 0xC8	; 200
    1280:	98 e0       	ldi	r25, 0x08	; 8
    1282:	0e 94 09 30 	call	0x6012	; 0x6012 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1286:	42 e0       	ldi	r20, 0x02	; 2
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	6c e3       	ldi	r22, 0x3C	; 60
    128c:	71 e0       	ldi	r23, 0x01	; 1
    128e:	8c ec       	ldi	r24, 0xCC	; 204
    1290:	98 e0       	ldi	r25, 0x08	; 8
    1292:	0e 94 09 30 	call	0x6012	; 0x6012 <eeprom_read_block>
		return (EE_LOAD_OK);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	06 c0       	rjmp	.+12     	; 0x12a6 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    129a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    129e:	84 60       	ori	r24, 0x04	; 4
    12a0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	08 95       	ret

000012ac <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))  
    12b0:	83 e4       	ldi	r24, 0x43	; 67
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    12b8:	ec 01       	movw	r28, r24
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	81 e4       	ldi	r24, 0x41	; 65
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	e2 de       	rcall	.-572    	; 0x1088 <crc16_eeprom>
    12c4:	c8 17       	cp	r28, r24
    12c6:	d9 07       	cpc	r29, r25
    12c8:	a1 f4       	brne	.+40     	; 0x12f2 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    12ca:	80 e4       	ldi	r24, 0x40	; 64
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    12d2:	89 36       	cpi	r24, 0x69	; 105
    12d4:	71 f4       	brne	.+28     	; 0x12f2 <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_ModuleAssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    12d6:	81 e4       	ldi	r24, 0x41	; 65
    12d8:	91 e0       	ldi	r25, 0x01	; 1
    12da:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    12de:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <pipe_ModuleAssnRead>
		pipe_ModuleAssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    12e2:	82 e4       	ldi	r24, 0x42	; 66
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    12ea:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <pipe_ModuleAssnWrite>
		return (EE_LOAD_OK);
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    12f2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    12f6:	88 60       	ori	r24, 0x08	; 8
    12f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1308:	87 e4       	ldi	r24, 0x47	; 71
    130a:	91 e0       	ldi	r25, 0x01	; 1
    130c:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    1310:	ec 01       	movw	r28, r24
    1312:	61 e0       	ldi	r22, 0x01	; 1
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	86 e4       	ldi	r24, 0x46	; 70
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	b6 de       	rcall	.-660    	; 0x1088 <crc16_eeprom>
    131c:	c8 17       	cp	r28, r24
    131e:	d9 07       	cpc	r29, r25
    1320:	71 f4       	brne	.+28     	; 0x133e <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    1322:	85 e4       	ldi	r24, 0x45	; 69
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    132a:	85 35       	cpi	r24, 0x55	; 85
    132c:	41 f4       	brne	.+16     	; 0x133e <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serusb_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    132e:	86 e4       	ldi	r24, 0x46	; 70
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    1336:	80 93 47 0b 	sts	0x0B47, r24	; 0x800b47 <serusb_Active>
		return (EE_LOAD_OK);
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	06 c0       	rjmp	.+12     	; 0x134a <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    133e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    1342:	88 60       	ori	r24, 0x08	; 8
    1344:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    1348:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	08 95       	ret

00001350 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	70 e0       	ldi	r23, 0x00	; 0
    1358:	8a e4       	ldi	r24, 0x4A	; 74
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	95 de       	rcall	.-726    	; 0x1088 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    135e:	ac 01       	movw	r20, r24
    1360:	68 e1       	ldi	r22, 0x18	; 24
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	8b e4       	ldi	r24, 0x4B	; 75
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	eb de       	rcall	.-554    	; 0x1140 <crc16_eeprom_startVal>
    136a:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    136c:	83 e6       	ldi	r24, 0x63	; 99
    136e:	91 e0       	ldi	r25, 0x01	; 1
    1370:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    1374:	c8 17       	cp	r28, r24
    1376:	d9 07       	cpc	r29, r25
    1378:	b1 f4       	brne	.+44     	; 0x13a6 <eeprom_ReadReg+0x56>
    137a:	89 e4       	ldi	r24, 0x49	; 73
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    1382:	82 35       	cpi	r24, 0x52	; 82
    1384:	81 f4       	brne	.+32     	; 0x13a6 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount);
    1386:	8a e4       	ldi	r24, 0x4A	; 74
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    138e:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    1392:	48 e1       	ldi	r20, 0x18	; 24
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	6b e4       	ldi	r22, 0x4B	; 75
    1398:	71 e0       	ldi	r23, 0x01	; 1
    139a:	8a e9       	ldi	r24, 0x9A	; 154
    139c:	97 e0       	ldi	r25, 0x07	; 7
    139e:	0e 94 09 30 	call	0x6012	; 0x6012 <eeprom_read_block>
		return(EE_LOAD_OK);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	06 c0       	rjmp	.+12     	; 0x13b2 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    13a6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    13aa:	80 62       	ori	r24, 0x20	; 32
    13ac:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    13bc:	86 e6       	ldi	r24, 0x66	; 102
    13be:	93 e0       	ldi	r25, 0x03	; 3
    13c0:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    13c4:	ec 01       	movw	r28, r24
    13c6:	60 e0       	ldi	r22, 0x00	; 0
    13c8:	72 e0       	ldi	r23, 0x02	; 2
    13ca:	86 e6       	ldi	r24, 0x66	; 102
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	5c de       	rcall	.-840    	; 0x1088 <crc16_eeprom>
    13d0:	c8 17       	cp	r28, r24
    13d2:	d9 07       	cpc	r29, r25
    13d4:	81 f4       	brne	.+32     	; 0x13f6 <eeprom_ReadProg+0x3e>
    13d6:	85 e6       	ldi	r24, 0x65	; 101
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    13de:	80 35       	cpi	r24, 0x50	; 80
    13e0:	51 f4       	brne	.+20     	; 0x13f6 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	52 e0       	ldi	r21, 0x02	; 2
    13e6:	66 e6       	ldi	r22, 0x66	; 102
    13e8:	71 e0       	ldi	r23, 0x01	; 1
    13ea:	8e ef       	ldi	r24, 0xFE	; 254
    13ec:	98 e0       	ldi	r25, 0x08	; 8
    13ee:	0e 94 09 30 	call	0x6012	; 0x6012 <eeprom_read_block>
		return(EE_LOAD_OK);
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    13f6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    13fa:	80 64       	ori	r24, 0x40	; 64
    13fc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    1400:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	08 95       	ret

00001408 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    140c:	8d e6       	ldi	r24, 0x6D	; 109
    140e:	93 e0       	ldi	r25, 0x03	; 3
    1410:	0e 94 21 30 	call	0x6042	; 0x6042 <eeprom_read_word>
    1414:	ec 01       	movw	r28, r24
    1416:	64 e0       	ldi	r22, 0x04	; 4
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	89 e6       	ldi	r24, 0x69	; 105
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	34 de       	rcall	.-920    	; 0x1088 <crc16_eeprom>
    1420:	c8 17       	cp	r28, r24
    1422:	d9 07       	cpc	r29, r25
    1424:	51 f4       	brne	.+20     	; 0x143a <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1426:	44 e0       	ldi	r20, 0x04	; 4
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	69 e6       	ldi	r22, 0x69	; 105
    142c:	73 e0       	ldi	r23, 0x03	; 3
    142e:	87 e5       	ldi	r24, 0x57	; 87
    1430:	95 e0       	ldi	r25, 0x05	; 5
    1432:	0e 94 09 30 	call	0x6012	; 0x6012 <eeprom_read_block>
		return(EE_LOAD_OK);
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    143a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__data_end>
    143e:	80 68       	ori	r24, 0x80	; 128
    1440:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end>
		return (EE_LOAD_ERROR);
    1444:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    1456:	65 e6       	ldi	r22, 0x65	; 101
    1458:	8f e6       	ldi	r24, 0x6F	; 111
    145a:	93 e0       	ldi	r25, 0x03	; 3
    145c:	0c 94 35 30 	jmp	0x606a	; 0x606a <eeprom_update_byte>
    1460:	08 95       	ret

00001462 <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    1466:	60 e3       	ldi	r22, 0x30	; 48
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	8e ec       	ldi	r24, 0xCE	; 206
    146c:	98 e0       	ldi	r25, 0x08	; 8
    146e:	e6 dd       	rcall	.-1076   	; 0x103c <crc16_ram>
    1470:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1472:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    1476:	6d e4       	ldi	r22, 0x4D	; 77
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    1480:	40 e3       	ldi	r20, 0x30	; 48
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	62 e0       	ldi	r22, 0x02	; 2
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	8e ec       	ldi	r24, 0xCE	; 206
    148a:	98 e0       	ldi	r25, 0x08	; 8
    148c:	0e 94 26 30 	call	0x604c	; 0x604c <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    1490:	be 01       	movw	r22, r28
    1492:	82 e3       	ldi	r24, 0x32	; 50
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    149a:	d8 df       	rcall	.-80     	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    149c:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    14aa:	60 e0       	ldi	r22, 0x00	; 0
    14ac:	71 e0       	ldi	r23, 0x01	; 1
    14ae:	88 ec       	ldi	r24, 0xC8	; 200
    14b0:	97 e0       	ldi	r25, 0x07	; 7
    14b2:	c4 dd       	rcall	.-1144   	; 0x103c <crc16_ram>
    14b4:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    14b6:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    14ba:	69 e4       	ldi	r22, 0x49	; 73
    14bc:	84 e3       	ldi	r24, 0x34	; 52
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	51 e0       	ldi	r21, 0x01	; 1
    14c8:	65 e3       	ldi	r22, 0x35	; 53
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	88 ec       	ldi	r24, 0xC8	; 200
    14ce:	97 e0       	ldi	r25, 0x07	; 7
    14d0:	0e 94 26 30 	call	0x604c	; 0x604c <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    14d4:	be 01       	movw	r22, r28
    14d6:	85 e3       	ldi	r24, 0x35	; 53
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    14de:	b6 df       	rcall	.-148    	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    14e0:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	08 95       	ret

000014ea <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    14ee:	64 e0       	ldi	r22, 0x04	; 4
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	88 ec       	ldi	r24, 0xC8	; 200
    14f4:	98 e0       	ldi	r25, 0x08	; 8
    14f6:	a2 dd       	rcall	.-1212   	; 0x103c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    14f8:	ac 01       	movw	r20, r24
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	8c ec       	ldi	r24, 0xCC	; 204
    1500:	98 e0       	ldi	r25, 0x08	; 8
    1502:	f9 dd       	rcall	.-1038   	; 0x10f6 <crc16_ram_startVal>
    1504:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1506:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    150a:	6f e4       	ldi	r22, 0x4F	; 79
    150c:	87 e3       	ldi	r24, 0x37	; 55
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1514:	44 e0       	ldi	r20, 0x04	; 4
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	68 e3       	ldi	r22, 0x38	; 56
    151a:	71 e0       	ldi	r23, 0x01	; 1
    151c:	88 ec       	ldi	r24, 0xC8	; 200
    151e:	98 e0       	ldi	r25, 0x08	; 8
    1520:	0e 94 26 30 	call	0x604c	; 0x604c <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1524:	42 e0       	ldi	r20, 0x02	; 2
    1526:	50 e0       	ldi	r21, 0x00	; 0
    1528:	6c e3       	ldi	r22, 0x3C	; 60
    152a:	71 e0       	ldi	r23, 0x01	; 1
    152c:	8c ec       	ldi	r24, 0xCC	; 204
    152e:	98 e0       	ldi	r25, 0x08	; 8
    1530:	0e 94 26 30 	call	0x604c	; 0x604c <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1534:	be 01       	movw	r22, r28
    1536:	8e e3       	ldi	r24, 0x3E	; 62
    1538:	91 e0       	ldi	r25, 0x01	; 1
    153a:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    153e:	86 df       	rcall	.-244    	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1540:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_ModuleAssnRead, sizeof(pipe_ModuleAssnRead));
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	8e e4       	ldi	r24, 0x4E	; 78
    1554:	93 e0       	ldi	r25, 0x03	; 3
    1556:	72 dd       	rcall	.-1308   	; 0x103c <crc16_ram>
    1558:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    155a:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    155e:	69 e6       	ldi	r22, 0x69	; 105
    1560:	80 e4       	ldi	r24, 0x40	; 64
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_ModuleAssnRead);
    1568:	60 91 4e 03 	lds	r22, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    156c:	81 e4       	ldi	r24, 0x41	; 65
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_ModuleAssnWrite);
    1574:	60 91 4d 03 	lds	r22, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    1578:	82 e4       	ldi	r24, 0x42	; 66
    157a:	91 e0       	ldi	r25, 0x01	; 1
    157c:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    1580:	be 01       	movw	r22, r28
    1582:	83 e4       	ldi	r24, 0x43	; 67
    1584:	91 e0       	ldi	r25, 0x01	; 1
    1586:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    158a:	60 df       	rcall	.-320    	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    158c:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	08 95       	ret

00001596 <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serusb_Active, sizeof(serusb_Active));
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	87 e4       	ldi	r24, 0x47	; 71
    15a0:	9b e0       	ldi	r25, 0x0B	; 11
    15a2:	4c dd       	rcall	.-1384   	; 0x103c <crc16_ram>
    15a4:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    15a6:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    15aa:	65 e5       	ldi	r22, 0x55	; 85
    15ac:	85 e4       	ldi	r24, 0x45	; 69
    15ae:	91 e0       	ldi	r25, 0x01	; 1
    15b0:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serusb_Active);
    15b4:	60 91 47 0b 	lds	r22, 0x0B47	; 0x800b47 <serusb_Active>
    15b8:	86 e4       	ldi	r24, 0x46	; 70
    15ba:	91 e0       	ldi	r25, 0x01	; 1
    15bc:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    15c0:	be 01       	movw	r22, r28
    15c2:	87 e4       	ldi	r24, 0x47	; 71
    15c4:	91 e0       	ldi	r25, 0x01	; 1
    15c6:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    15ca:	40 df       	rcall	.-384    	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    15cc:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	08 95       	ret

000015d6 <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	82 eb       	ldi	r24, 0xB2	; 178
    15e0:	97 e0       	ldi	r25, 0x07	; 7
    15e2:	2c dd       	rcall	.-1448   	; 0x103c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    15e4:	ac 01       	movw	r20, r24
    15e6:	68 e1       	ldi	r22, 0x18	; 24
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	8a e9       	ldi	r24, 0x9A	; 154
    15ec:	97 e0       	ldi	r25, 0x07	; 7
    15ee:	83 dd       	rcall	.-1274   	; 0x10f6 <crc16_ram_startVal>
    15f0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    15f2:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    15f6:	62 e5       	ldi	r22, 0x52	; 82
    15f8:	89 e4       	ldi	r24, 0x49	; 73
    15fa:	91 e0       	ldi	r25, 0x01	; 1
    15fc:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    1600:	60 91 b2 07 	lds	r22, 0x07B2	; 0x8007b2 <registerCount>
    1604:	8a e4       	ldi	r24, 0x4A	; 74
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    160c:	48 e1       	ldi	r20, 0x18	; 24
    160e:	50 e0       	ldi	r21, 0x00	; 0
    1610:	6b e4       	ldi	r22, 0x4B	; 75
    1612:	71 e0       	ldi	r23, 0x01	; 1
    1614:	8a e9       	ldi	r24, 0x9A	; 154
    1616:	97 e0       	ldi	r25, 0x07	; 7
    1618:	0e 94 26 30 	call	0x604c	; 0x604c <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    161c:	be 01       	movw	r22, r28
    161e:	83 e6       	ldi	r24, 0x63	; 99
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    1626:	12 df       	rcall	.-476    	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1628:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	72 e0       	ldi	r23, 0x02	; 2
    163a:	8e ef       	ldi	r24, 0xFE	; 254
    163c:	98 e0       	ldi	r25, 0x08	; 8
    163e:	fe dc       	rcall	.-1540   	; 0x103c <crc16_ram>
    1640:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1642:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    1646:	60 e5       	ldi	r22, 0x50	; 80
    1648:	85 e6       	ldi	r24, 0x65	; 101
    164a:	91 e0       	ldi	r25, 0x01	; 1
    164c:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	52 e0       	ldi	r21, 0x02	; 2
    1654:	66 e6       	ldi	r22, 0x66	; 102
    1656:	71 e0       	ldi	r23, 0x01	; 1
    1658:	8e ef       	ldi	r24, 0xFE	; 254
    165a:	98 e0       	ldi	r25, 0x08	; 8
    165c:	0e 94 26 30 	call	0x604c	; 0x604c <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    1660:	be 01       	movw	r22, r28
    1662:	86 e6       	ldi	r24, 0x66	; 102
    1664:	93 e0       	ldi	r25, 0x03	; 3
    1666:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    166a:	f0 de       	rcall	.-544    	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    166c:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    1670:	df 91       	pop	r29
    1672:	cf 91       	pop	r28
    1674:	08 95       	ret

00001676 <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    167a:	64 e0       	ldi	r22, 0x04	; 4
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	87 e5       	ldi	r24, 0x57	; 87
    1680:	95 e0       	ldi	r25, 0x05	; 5
    1682:	dc dc       	rcall	.-1608   	; 0x103c <crc16_ram>
    1684:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1686:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    168a:	6b e4       	ldi	r22, 0x4B	; 75
    168c:	88 e6       	ldi	r24, 0x68	; 104
    168e:	93 e0       	ldi	r25, 0x03	; 3
    1690:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1694:	44 e0       	ldi	r20, 0x04	; 4
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	69 e6       	ldi	r22, 0x69	; 105
    169a:	73 e0       	ldi	r23, 0x03	; 3
    169c:	87 e5       	ldi	r24, 0x57	; 87
    169e:	95 e0       	ldi	r25, 0x05	; 5
    16a0:	0e 94 26 30 	call	0x604c	; 0x604c <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    16a4:	be 01       	movw	r22, r28
    16a6:	8d e6       	ldi	r24, 0x6D	; 109
    16a8:	93 e0       	ldi	r25, 0x03	; 3
    16aa:	0e 94 47 30 	call	0x608e	; 0x608e <eeprom_update_word>
	eepromWriteSignature();
    16ae:	ce de       	rcall	.-612    	; 0x144c <eepromWriteSignature>
	lcd_waitSymbolOff();
    16b0:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    16ba:	d3 de       	rcall	.-602    	; 0x1462 <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    16bc:	f4 de       	rcall	.-536    	; 0x14a6 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    16be:	15 df       	rcall	.-470    	; 0x14ea <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    16c0:	44 df       	rcall	.-376    	; 0x154a <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    16c2:	69 df       	rcall	.-302    	; 0x1596 <eeprom_UpdateUSB>
    16c4:	88 df       	rcall	.-240    	; 0x15d6 <eeprom_UpdateReg>
	eeprom_UpdateReg();
    16c6:	b5 df       	rcall	.-150    	; 0x1632 <eeprom_UpdateProg>
    16c8:	d6 cf       	rjmp	.-84     	; 0x1676 <eeprom_UpdateSoftkeys>
	eeprom_UpdateProg();
    16ca:	08 95       	ret

000016cc <eepromCopy>:
    16cc:	cf 92       	push	r12
	eeprom_UpdateSoftkeys();
    16ce:	df 92       	push	r13
    16d0:	ef 92       	push	r14
    16d2:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	eb 01       	movw	r28, r22
	while (count-- > 0){
    16de:	11 c0       	rjmp	.+34     	; 0x1702 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    16e0:	7c 01       	movw	r14, r24
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	e2 1a       	sub	r14, r18
    16e6:	f2 0a       	sbc	r15, r18
    16e8:	0e 94 19 30 	call	0x6032	; 0x6032 <eeprom_read_byte>
    16ec:	6e 01       	movw	r12, r28
    16ee:	9f ef       	ldi	r25, 0xFF	; 255
    16f0:	c9 1a       	sub	r12, r25
    16f2:	d9 0a       	sbc	r13, r25
    16f4:	68 2f       	mov	r22, r24
    16f6:	ce 01       	movw	r24, r28
    16f8:	0e 94 35 30 	call	0x606a	; 0x606a <eeprom_update_byte>
	eeprom_UpdateSoftkeys();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    16fc:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    16fe:	e6 01       	movw	r28, r12
    1700:	c7 01       	movw	r24, r14
	eeprom_UpdateSoftkeys();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    1702:	8a 01       	movw	r16, r20
    1704:	01 50       	subi	r16, 0x01	; 1
    1706:	11 09       	sbc	r17, r1
    1708:	45 2b       	or	r20, r21
    170a:	51 f7       	brne	.-44     	; 0x16e0 <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	df 90       	pop	r13
    171a:	cf 90       	pop	r12
    171c:	08 95       	ret

0000171e <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    171e:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	54 e0       	ldi	r21, 0x04	; 4
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	74 e0       	ldi	r23, 0x04	; 4
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	ce df       	rcall	.-100    	; 0x16cc <eepromCopy>
	lcd_waitSymbolOff();
    1730:	0c 94 53 2f 	jmp	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
    1734:	08 95       	ret

00001736 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    1736:	0e 94 45 2f 	call	0x5e8a	; 0x5e8a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	54 e0       	ldi	r21, 0x04	; 4
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	94 e0       	ldi	r25, 0x04	; 4
    1746:	c2 df       	rcall	.-124    	; 0x16cc <eepromCopy>
	lcd_waitSymbolOff();
    1748:	0c 94 53 2f 	jmp	0x5ea6	; 0x5ea6 <lcd_waitSymbolOff>
    174c:	08 95       	ret

0000174e <init_Timers>:
	}
	pipeProcessing = PIPE_IO_START;
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
		// wait for Data read back from input
	}
}
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	0a c0       	rjmp	.+20     	; 0x1766 <init_Timers+0x18>
    1752:	e8 2f       	mov	r30, r24
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	e3 5d       	subi	r30, 0xD3	; 211
    175c:	fd 4f       	sbci	r31, 0xFD	; 253
    175e:	9f ef       	ldi	r25, 0xFF	; 255
    1760:	90 83       	st	Z, r25
    1762:	11 82       	std	Z+1, r1	; 0x01
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	89 30       	cpi	r24, 0x09	; 9
    1768:	a0 f3       	brcs	.-24     	; 0x1752 <init_Timers+0x4>
    176a:	ef e3       	ldi	r30, 0x3F	; 63
    176c:	f2 e0       	ldi	r31, 0x02	; 2
    176e:	10 82       	st	Z, r1
    1770:	11 82       	std	Z+1, r1	; 0x01
    1772:	12 82       	std	Z+2, r1	; 0x02
    1774:	13 82       	std	Z+3, r1	; 0x03
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <time_UpTimeUpdated>
    177c:	08 95       	ret

0000177e <init_HwTimer>:
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	84 bd       	out	0x24, r24	; 36
    1782:	93 e0       	ldi	r25, 0x03	; 3
    1784:	95 bd       	out	0x25, r25	; 37
    1786:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    178a:	89 ef       	ldi	r24, 0xF9	; 249
    178c:	87 bd       	out	0x27, r24	; 39
    178e:	85 b1       	in	r24, 0x05	; 5
    1790:	8f 77       	andi	r24, 0x7F	; 127
    1792:	85 b9       	out	0x05, r24	; 5
    1794:	84 b1       	in	r24, 0x04	; 4
    1796:	80 68       	ori	r24, 0x80	; 128
    1798:	84 b9       	out	0x04, r24	; 4
    179a:	08 95       	ret

0000179c <init_ADC>:
    179c:	87 e8       	ldi	r24, 0x87	; 135
    179e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    17a2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    17a6:	8f e7       	ldi	r24, 0x7F	; 127
    17a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    17b2:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    17b6:	e7 e4       	ldi	r30, 0x47	; 71
    17b8:	f3 e0       	ldi	r31, 0x03	; 3
    17ba:	10 82       	st	Z, r1
    17bc:	8f ef       	ldi	r24, 0xFF	; 255
    17be:	81 83       	std	Z+1, r24	; 0x01
    17c0:	82 83       	std	Z+2, r24	; 0x02
    17c2:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcNr>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	10 c0       	rjmp	.+32     	; 0x17ea <init_ADC+0x4e>
    17ca:	85 30       	cpi	r24, 0x05	; 5
    17cc:	39 f4       	brne	.+14     	; 0x17dc <init_ADC+0x40>
    17ce:	e8 2f       	mov	r30, r24
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	e1 5b       	subi	r30, 0xB1	; 177
    17d4:	fc 4f       	sbci	r31, 0xFC	; 252
    17d6:	96 e0       	ldi	r25, 0x06	; 6
    17d8:	90 83       	st	Z, r25
    17da:	06 c0       	rjmp	.+12     	; 0x17e8 <init_ADC+0x4c>
    17dc:	e8 2f       	mov	r30, r24
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	e1 5b       	subi	r30, 0xB1	; 177
    17e2:	fc 4f       	sbci	r31, 0xFC	; 252
    17e4:	9a e0       	ldi	r25, 0x0A	; 10
    17e6:	90 83       	st	Z, r25
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	86 30       	cpi	r24, 0x06	; 6
    17ec:	70 f3       	brcs	.-36     	; 0x17ca <init_ADC+0x2e>
    17ee:	08 95       	ret

000017f0 <init_Pipe>:
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	88 b9       	out	0x08, r24	; 8
    17f4:	87 b9       	out	0x07, r24	; 7
    17f6:	82 b9       	out	0x02, r24	; 2
    17f8:	11 b8       	out	0x01, r1	; 1
    17fa:	84 b3       	in	r24, 0x14	; 20
    17fc:	87 60       	ori	r24, 0x07	; 7
    17fe:	84 bb       	out	0x14, r24	; 20
    1800:	83 b3       	in	r24, 0x13	; 19
    1802:	87 60       	ori	r24, 0x07	; 7
    1804:	83 bb       	out	0x13, r24	; 19
    1806:	8b b1       	in	r24, 0x0b	; 11
    1808:	8f 77       	andi	r24, 0x7F	; 127
    180a:	8b b9       	out	0x0b, r24	; 11
    180c:	8a b1       	in	r24, 0x0a	; 10
    180e:	80 68       	ori	r24, 0x80	; 128
    1810:	8a b9       	out	0x0a, r24	; 10
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	0e c0       	rjmp	.+28     	; 0x1832 <init_Pipe+0x42>
    1816:	e8 2f       	mov	r30, r24
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	ee 0f       	add	r30, r30
    1820:	ff 1f       	adc	r31, r31
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	e9 5b       	subi	r30, 0xB9	; 185
    1828:	fd 4f       	sbci	r31, 0xFD	; 253
    182a:	9f ef       	ldi	r25, 0xFF	; 255
    182c:	91 83       	std	Z+1, r25	; 0x01
    182e:	90 83       	st	Z, r25
    1830:	8f 5f       	subi	r24, 0xFF	; 255
    1832:	80 32       	cpi	r24, 0x20	; 32
    1834:	80 f3       	brcs	.-32     	; 0x1816 <init_Pipe+0x26>
    1836:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <pipeProcessing>
    183a:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <pipe_PowerStatus>
    183e:	08 95       	ret

00001840 <init_PipeModules>:
    1840:	35 dd       	rcall	.-1430   	; 0x12ac <eeprom_ReadModules>
    1842:	8f 3f       	cpi	r24, 0xFF	; 255
    1844:	51 f4       	brne	.+20     	; 0x185a <init_PipeModules+0x1a>
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	50 e0       	ldi	r21, 0x00	; 0
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	aa d6       	rcall	.+3412   	; 0x25a4 <log_putError>
    1850:	8f ef       	ldi	r24, 0xFF	; 255
    1852:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <pipe_ModuleAssnRead>
    1856:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <pipe_ModuleAssnWrite>
    185a:	8b b1       	in	r24, 0x0b	; 11
    185c:	8f 77       	andi	r24, 0x7F	; 127
    185e:	8b b9       	out	0x0b, r24	; 11
    1860:	84 b3       	in	r24, 0x14	; 20
    1862:	87 60       	ori	r24, 0x07	; 7
    1864:	84 bb       	out	0x14, r24	; 20
    1866:	84 b3       	in	r24, 0x14	; 20
    1868:	8b 7f       	andi	r24, 0xFB	; 251
    186a:	84 bb       	out	0x14, r24	; 20
    186c:	85 e0       	ldi	r24, 0x05	; 5
    186e:	8a 95       	dec	r24
    1870:	f1 f7       	brne	.-4      	; 0x186e <init_PipeModules+0x2e>
    1872:	00 00       	nop
    1874:	84 b3       	in	r24, 0x14	; 20
    1876:	84 60       	ori	r24, 0x04	; 4
    1878:	84 bb       	out	0x14, r24	; 20
    187a:	90 e2       	ldi	r25, 0x20	; 32
    187c:	84 b3       	in	r24, 0x14	; 20
    187e:	81 60       	ori	r24, 0x01	; 1
    1880:	84 bb       	out	0x14, r24	; 20
    1882:	90 fd       	sbrc	r25, 0
    1884:	02 c0       	rjmp	.+4      	; 0x188a <init_PipeModules+0x4a>
    1886:	85 e5       	ldi	r24, 0x55	; 85
    1888:	01 c0       	rjmp	.+2      	; 0x188c <init_PipeModules+0x4c>
    188a:	8a ea       	ldi	r24, 0xAA	; 170
    188c:	88 b9       	out	0x08, r24	; 8
    188e:	80 b1       	in	r24, 0x00	; 0
    1890:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xff>
    1894:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfe>
    1898:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfd>
    189c:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfc>
    18a0:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <pipe+0xfb>
    18a4:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <pipe+0xfa>
    18a8:	84 b3       	in	r24, 0x14	; 20
    18aa:	8e 7f       	andi	r24, 0xFE	; 254
    18ac:	84 bb       	out	0x14, r24	; 20
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	8a 95       	dec	r24
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <init_PipeModules+0x70>
    18b4:	00 00       	nop
    18b6:	91 50       	subi	r25, 0x01	; 1
    18b8:	09 f7       	brne	.-62     	; 0x187c <init_PipeModules+0x3c>
    18ba:	90 e2       	ldi	r25, 0x20	; 32
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <init_PipeModules+0x9c>
    18be:	84 b3       	in	r24, 0x14	; 20
    18c0:	81 60       	ori	r24, 0x01	; 1
    18c2:	84 bb       	out	0x14, r24	; 20
    18c4:	82 e0       	ldi	r24, 0x02	; 2
    18c6:	8a 95       	dec	r24
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <init_PipeModules+0x86>
    18ca:	00 c0       	rjmp	.+0      	; 0x18cc <init_PipeModules+0x8c>
    18cc:	84 b3       	in	r24, 0x14	; 20
    18ce:	8e 7f       	andi	r24, 0xFE	; 254
    18d0:	84 bb       	out	0x14, r24	; 20
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	8a 95       	dec	r24
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <init_PipeModules+0x94>
    18d8:	00 c0       	rjmp	.+0      	; 0x18da <init_PipeModules+0x9a>
    18da:	91 50       	subi	r25, 0x01	; 1
    18dc:	91 11       	cpse	r25, r1
    18de:	ef cf       	rjmp	.-34     	; 0x18be <init_PipeModules+0x7e>
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipe_ModuleTested>
    18e6:	90 e2       	ldi	r25, 0x20	; 32
    18e8:	84 b3       	in	r24, 0x14	; 20
    18ea:	81 60       	ori	r24, 0x01	; 1
    18ec:	84 bb       	out	0x14, r24	; 20
    18ee:	8f ef       	ldi	r24, 0xFF	; 255
    18f0:	88 b9       	out	0x08, r24	; 8
    18f2:	20 b1       	in	r18, 0x00	; 0
    18f4:	90 fd       	sbrc	r25, 0
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <init_PipeModules+0xbc>
    18f8:	8a ea       	ldi	r24, 0xAA	; 170
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <init_PipeModules+0xbe>
    18fc:	85 e5       	ldi	r24, 0x55	; 85
    18fe:	82 27       	eor	r24, r18
    1900:	20 91 46 02 	lds	r18, 0x0246	; 0x800246 <pipe_ModuleTested>
    1904:	82 23       	and	r24, r18
    1906:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipe_ModuleTested>
    190a:	84 b3       	in	r24, 0x14	; 20
    190c:	8e 7f       	andi	r24, 0xFE	; 254
    190e:	84 bb       	out	0x14, r24	; 20
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	8a 95       	dec	r24
    1914:	f1 f7       	brne	.-4      	; 0x1912 <init_PipeModules+0xd2>
    1916:	00 00       	nop
    1918:	91 50       	subi	r25, 0x01	; 1
    191a:	31 f7       	brne	.-52     	; 0x18e8 <init_PipeModules+0xa8>
    191c:	00 00       	nop
    191e:	00 00       	nop
    1920:	84 b3       	in	r24, 0x14	; 20
    1922:	81 60       	ori	r24, 0x01	; 1
    1924:	84 bb       	out	0x14, r24	; 20
    1926:	84 b3       	in	r24, 0x14	; 20
    1928:	87 60       	ori	r24, 0x07	; 7
    192a:	84 bb       	out	0x14, r24	; 20
    192c:	84 b3       	in	r24, 0x14	; 20
    192e:	8b 7f       	andi	r24, 0xFB	; 251
    1930:	84 bb       	out	0x14, r24	; 20
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	8a 95       	dec	r24
    1936:	f1 f7       	brne	.-4      	; 0x1934 <init_PipeModules+0xf4>
    1938:	00 c0       	rjmp	.+0      	; 0x193a <init_PipeModules+0xfa>
    193a:	84 b3       	in	r24, 0x14	; 20
    193c:	84 60       	ori	r24, 0x04	; 4
    193e:	84 bb       	out	0x14, r24	; 20
    1940:	90 e2       	ldi	r25, 0x20	; 32
    1942:	ef e3       	ldi	r30, 0x3F	; 63
    1944:	f3 e0       	ldi	r31, 0x03	; 3
    1946:	83 81       	ldd	r24, Z+3	; 0x03
    1948:	82 83       	std	Z+2, r24	; 0x02
    194a:	84 81       	ldd	r24, Z+4	; 0x04
    194c:	83 83       	std	Z+3, r24	; 0x03
    194e:	84 b3       	in	r24, 0x14	; 20
    1950:	81 60       	ori	r24, 0x01	; 1
    1952:	84 bb       	out	0x14, r24	; 20
    1954:	8f ef       	ldi	r24, 0xFF	; 255
    1956:	81 83       	std	Z+1, r24	; 0x01
    1958:	88 b9       	out	0x08, r24	; 8
    195a:	85 81       	ldd	r24, Z+5	; 0x05
    195c:	84 83       	std	Z+4, r24	; 0x04
    195e:	86 81       	ldd	r24, Z+6	; 0x06
    1960:	85 83       	std	Z+5, r24	; 0x05
    1962:	80 b1       	in	r24, 0x00	; 0
    1964:	86 83       	std	Z+6, r24	; 0x06
    1966:	82 83       	std	Z+2, r24	; 0x02
    1968:	83 83       	std	Z+3, r24	; 0x03
    196a:	84 83       	std	Z+4, r24	; 0x04
    196c:	85 83       	std	Z+5, r24	; 0x05
    196e:	87 83       	std	Z+7, r24	; 0x07
    1970:	84 b3       	in	r24, 0x14	; 20
    1972:	8e 7f       	andi	r24, 0xFE	; 254
    1974:	84 bb       	out	0x14, r24	; 20
    1976:	38 97       	sbiw	r30, 0x08	; 8
    1978:	91 50       	subi	r25, 0x01	; 1
    197a:	29 f7       	brne	.-54     	; 0x1946 <init_PipeModules+0x106>
    197c:	00 00       	nop
    197e:	00 00       	nop
    1980:	84 b3       	in	r24, 0x14	; 20
    1982:	81 60       	ori	r24, 0x01	; 1
    1984:	84 bb       	out	0x14, r24	; 20
    1986:	84 b3       	in	r24, 0x14	; 20
    1988:	8d 7f       	andi	r24, 0xFD	; 253
    198a:	84 bb       	out	0x14, r24	; 20
    198c:	18 b8       	out	0x08, r1	; 8
    198e:	85 e0       	ldi	r24, 0x05	; 5
    1990:	8a 95       	dec	r24
    1992:	f1 f7       	brne	.-4      	; 0x1990 <init_PipeModules+0x150>
    1994:	00 00       	nop
    1996:	84 b3       	in	r24, 0x14	; 20
    1998:	82 60       	ori	r24, 0x02	; 2
    199a:	84 bb       	out	0x14, r24	; 20
    199c:	40 91 4e 03 	lds	r20, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    19a0:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    19a4:	84 2b       	or	r24, r20
    19a6:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <pipe_ModuleTested>
    19aa:	89 17       	cp	r24, r25
    19ac:	39 f0       	breq	.+14     	; 0x19bc <init_PipeModules+0x17c>
    19ae:	50 e0       	ldi	r21, 0x00	; 0
    19b0:	54 2f       	mov	r21, r20
    19b2:	44 27       	eor	r20, r20
    19b4:	49 2b       	or	r20, r25
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	f4 c5       	rjmp	.+3048   	; 0x25a4 <log_putError>
    19bc:	08 95       	ret

000019be <test_PipeModule>:
    19be:	88 30       	cpi	r24, 0x08	; 8
    19c0:	08 f0       	brcs	.+2      	; 0x19c4 <test_PipeModule+0x6>
    19c2:	6a c0       	rjmp	.+212    	; 0x1a98 <test_PipeModule+0xda>
    19c4:	31 e0       	ldi	r19, 0x01	; 1
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <test_PipeModule+0xc>
    19c8:	33 0f       	add	r19, r19
    19ca:	8a 95       	dec	r24
    19cc:	ea f7       	brpl	.-6      	; 0x19c8 <test_PipeModule+0xa>
    19ce:	80 e8       	ldi	r24, 0x80	; 128
    19d0:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>
    19d4:	8b b1       	in	r24, 0x0b	; 11
    19d6:	8f 77       	andi	r24, 0x7F	; 127
    19d8:	8b b9       	out	0x0b, r24	; 11
    19da:	84 b3       	in	r24, 0x14	; 20
    19dc:	87 60       	ori	r24, 0x07	; 7
    19de:	84 bb       	out	0x14, r24	; 20
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	1d c0       	rjmp	.+58     	; 0x1a1e <test_PipeModule+0x60>
    19e4:	20 fd       	sbrc	r18, 0
    19e6:	03 c0       	rjmp	.+6      	; 0x19ee <test_PipeModule+0x30>
    19e8:	83 2f       	mov	r24, r19
    19ea:	80 95       	com	r24
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <test_PipeModule+0x32>
    19ee:	8f ef       	ldi	r24, 0xFF	; 255
    19f0:	88 b9       	out	0x08, r24	; 8
    19f2:	26 95       	lsr	r18
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	8a 95       	dec	r24
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <test_PipeModule+0x38>
    19fa:	00 c0       	rjmp	.+0      	; 0x19fc <test_PipeModule+0x3e>
    19fc:	84 b3       	in	r24, 0x14	; 20
    19fe:	8e 7f       	andi	r24, 0xFE	; 254
    1a00:	84 bb       	out	0x14, r24	; 20
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	8a 95       	dec	r24
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <test_PipeModule+0x46>
    1a08:	00 c0       	rjmp	.+0      	; 0x1a0a <test_PipeModule+0x4c>
    1a0a:	84 b3       	in	r24, 0x14	; 20
    1a0c:	81 60       	ori	r24, 0x01	; 1
    1a0e:	84 bb       	out	0x14, r24	; 20
    1a10:	9f 5f       	subi	r25, 0xFF	; 255
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <test_PipeModule+0x5a>
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	25 ea       	ldi	r18, 0xA5	; 165
    1a18:	98 30       	cpi	r25, 0x08	; 8
    1a1a:	20 f3       	brcs	.-56     	; 0x19e4 <test_PipeModule+0x26>
    1a1c:	4f 5f       	subi	r20, 0xFF	; 255
    1a1e:	44 30       	cpi	r20, 0x04	; 4
    1a20:	c8 f3       	brcs	.-14     	; 0x1a14 <test_PipeModule+0x56>
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <test_PipeModule+0x86>
    1a26:	82 e0       	ldi	r24, 0x02	; 2
    1a28:	8a 95       	dec	r24
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <test_PipeModule+0x6a>
    1a2c:	00 c0       	rjmp	.+0      	; 0x1a2e <test_PipeModule+0x70>
    1a2e:	84 b3       	in	r24, 0x14	; 20
    1a30:	8e 7f       	andi	r24, 0xFE	; 254
    1a32:	84 bb       	out	0x14, r24	; 20
    1a34:	82 e0       	ldi	r24, 0x02	; 2
    1a36:	8a 95       	dec	r24
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <test_PipeModule+0x78>
    1a3a:	00 c0       	rjmp	.+0      	; 0x1a3c <test_PipeModule+0x7e>
    1a3c:	84 b3       	in	r24, 0x14	; 20
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	84 bb       	out	0x14, r24	; 20
    1a42:	9f 5f       	subi	r25, 0xFF	; 255
    1a44:	90 32       	cpi	r25, 0x20	; 32
    1a46:	78 f3       	brcs	.-34     	; 0x1a26 <test_PipeModule+0x68>
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	ba 01       	movw	r22, r20
    1a50:	17 c0       	rjmp	.+46     	; 0x1a80 <test_PipeModule+0xc2>
    1a52:	44 0f       	add	r20, r20
    1a54:	55 1f       	adc	r21, r21
    1a56:	66 1f       	adc	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	82 e0       	ldi	r24, 0x02	; 2
    1a5c:	8a 95       	dec	r24
    1a5e:	f1 f7       	brne	.-4      	; 0x1a5c <test_PipeModule+0x9e>
    1a60:	00 c0       	rjmp	.+0      	; 0x1a62 <test_PipeModule+0xa4>
    1a62:	84 b3       	in	r24, 0x14	; 20
    1a64:	8e 7f       	andi	r24, 0xFE	; 254
    1a66:	84 bb       	out	0x14, r24	; 20
    1a68:	80 b1       	in	r24, 0x00	; 0
    1a6a:	83 23       	and	r24, r19
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <test_PipeModule+0xb2>
    1a6e:	41 60       	ori	r20, 0x01	; 1
    1a70:	82 e0       	ldi	r24, 0x02	; 2
    1a72:	8a 95       	dec	r24
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <test_PipeModule+0xb4>
    1a76:	00 c0       	rjmp	.+0      	; 0x1a78 <test_PipeModule+0xba>
    1a78:	84 b3       	in	r24, 0x14	; 20
    1a7a:	81 60       	ori	r24, 0x01	; 1
    1a7c:	84 bb       	out	0x14, r24	; 20
    1a7e:	9f 5f       	subi	r25, 0xFF	; 255
    1a80:	90 32       	cpi	r25, 0x20	; 32
    1a82:	38 f3       	brcs	.-50     	; 0x1a52 <test_PipeModule+0x94>
    1a84:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <pipeProcessing>
    1a88:	8b b1       	in	r24, 0x0b	; 11
    1a8a:	80 68       	ori	r24, 0x80	; 128
    1a8c:	8b b9       	out	0x0b, r24	; 11
    1a8e:	34 2f       	mov	r19, r20
    1a90:	25 2f       	mov	r18, r21
    1a92:	86 2f       	mov	r24, r22
    1a94:	97 2f       	mov	r25, r23
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <test_PipeModule+0xe2>
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	63 2f       	mov	r22, r19
    1aa2:	72 2f       	mov	r23, r18
    1aa4:	08 95       	ret

00001aa6 <module_TestAllInputs>:
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	e7 e4       	ldi	r30, 0x47	; 71
    1aaa:	f2 e0       	ldi	r31, 0x02	; 2
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	06 c0       	rjmp	.+12     	; 0x1abc <module_TestAllInputs+0x16>
    1ab0:	2f ef       	ldi	r18, 0xFF	; 255
    1ab2:	21 83       	std	Z+1, r18	; 0x01
    1ab4:	26 81       	ldd	r18, Z+6	; 0x06
    1ab6:	82 2b       	or	r24, r18
    1ab8:	38 96       	adiw	r30, 0x08	; 8
    1aba:	9f 5f       	subi	r25, 0xFF	; 255
    1abc:	90 32       	cpi	r25, 0x20	; 32
    1abe:	c0 f3       	brcs	.-16     	; 0x1ab0 <module_TestAllInputs+0xa>
    1ac0:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    1ac4:	89 23       	and	r24, r25
    1ac6:	08 95       	ret

00001ac8 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1ace:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1ad0:	f8 94       	cli
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <module_StartPowerOn+0x18>
    1ad4:	ed e2       	ldi	r30, 0x2D	; 45
    1ad6:	f2 e0       	ldi	r31, 0x02	; 2
    1ad8:	82 e3       	ldi	r24, 0x32	; 50
    1ada:	82 83       	std	Z+2, r24	; 0x02
    1adc:	13 82       	std	Z+3, r1	; 0x03
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	f8 cf       	rjmp	.-16     	; 0x1ad4 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1ae4:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1ae6:	08 95       	ret

00001ae8 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1ae8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	31 f5       	brne	.+76     	; 0x1b3c <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1af0:	da df       	rcall	.-76     	; 0x1aa6 <module_TestAllInputs>
    1af2:	81 11       	cpse	r24, r1
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1af6:	85 b1       	in	r24, 0x05	; 5
    1af8:	80 64       	ori	r24, 0x40	; 64
    1afa:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1afc:	82 e1       	ldi	r24, 0x12	; 18
    1afe:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1b02:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b04:	f8 94       	cli
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <module_PowerControl+0x2e>
    1b0a:	ed e2       	ldi	r30, 0x2D	; 45
    1b0c:	f2 e0       	ldi	r31, 0x02	; 2
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	82 83       	std	Z+2, r24	; 0x02
    1b12:	13 82       	std	Z+3, r1	; 0x03
    1b14:	80 e0       	ldi	r24, 0x00	; 0
    1b16:	81 11       	cpse	r24, r1
    1b18:	f8 cf       	rjmp	.-16     	; 0x1b0a <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b1a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1b1c:	08 95       	ret
		} else {
			// keys are not released	
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1b1e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1b20:	f8 94       	cli
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	07 c0       	rjmp	.+14     	; 0x1b34 <module_PowerControl+0x4c>
    1b26:	ed e2       	ldi	r30, 0x2D	; 45
    1b28:	f2 e0       	ldi	r31, 0x02	; 2
    1b2a:	8c e0       	ldi	r24, 0x0C	; 12
    1b2c:	82 83       	std	Z+2, r24	; 0x02
    1b2e:	82 e0       	ldi	r24, 0x02	; 2
    1b30:	83 83       	std	Z+3, r24	; 0x03
    1b32:	80 e0       	ldi	r24, 0x00	; 0
    1b34:	81 11       	cpse	r24, r1
    1b36:	f7 cf       	rjmp	.-18     	; 0x1b26 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1b38:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1b3a:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1b3c:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1b3e:	b1 f4       	brne	.+44     	; 0x1b6c <module_PowerControl+0x84>
    1b40:	b2 df       	rcall	.-156    	; 0x1aa6 <module_TestAllInputs>
		if (testResult == 0){
    1b42:	81 11       	cpse	r24, r1
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1b46:	84 e1       	ldi	r24, 0x14	; 20
    1b48:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
    1b4c:	0b c0       	rjmp	.+22     	; 0x1b64 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1b4e:	48 2f       	mov	r20, r24
    1b50:	50 e0       	ldi	r21, 0x00	; 0
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	85 e0       	ldi	r24, 0x05	; 5
    1b56:	26 d5       	rcall	.+2636   	; 0x25a4 <log_putError>
			POWER_OFF
    1b58:	85 b1       	in	r24, 0x05	; 5
    1b5a:	8f 7b       	andi	r24, 0xBF	; 191
    1b5c:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1b5e:	80 e8       	ldi	r24, 0x80	; 128
    1b60:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <swTimer+0x2>
    1b6a:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <swTimer+0x2>
    1b72:	08 95       	ret

00001b74 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1b78:	94 30       	cpi	r25, 0x04	; 4
    1b7a:	50 f4       	brcc	.+20     	; 0x1b90 <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1b7c:	e9 2f       	mov	r30, r25
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	81 11       	cpse	r24, r1
    1b82:	02 c0       	rjmp	.+4      	; 0x1b88 <softKey_WantLong+0x14>
    1b84:	2a e0       	ldi	r18, 0x0A	; 10
    1b86:	01 c0       	rjmp	.+2      	; 0x1b8a <softKey_WantLong+0x16>
    1b88:	26 e0       	ldi	r18, 0x06	; 6
    1b8a:	e1 5b       	subi	r30, 0xB1	; 177
    1b8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1b8e:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1b90:	9f 5f       	subi	r25, 0xFF	; 255
    1b92:	96 30       	cpi	r25, 0x06	; 6
    1b94:	88 f3       	brcs	.-30     	; 0x1b78 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1b96:	08 95       	ret

00001b98 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	0b b6       	in	r0, 0x3b	; 59
    1ba4:	0f 92       	push	r0
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	2f 93       	push	r18
    1bb0:	3f 93       	push	r19
    1bb2:	4f 93       	push	r20
    1bb4:	5f 93       	push	r21
    1bb6:	6f 93       	push	r22
    1bb8:	7f 93       	push	r23
    1bba:	8f 93       	push	r24
    1bbc:	9f 93       	push	r25
    1bbe:	af 93       	push	r26
    1bc0:	bf 93       	push	r27
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ef 93       	push	r30
    1bc8:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1bca:	85 b1       	in	r24, 0x05	; 5
    1bcc:	80 68       	ori	r24, 0x80	; 128
    1bce:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1bd0:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <msecCtr>
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <msecCtr>
    1bda:	83 70       	andi	r24, 0x03	; 3
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	09 f4       	brne	.+2      	; 0x1be2 <__vector_21+0x4a>
    1be0:	58 c1       	rjmp	.+688    	; 0x1e92 <__vector_21+0x2fa>
    1be2:	38 f0       	brcs	.+14     	; 0x1bf2 <__vector_21+0x5a>
    1be4:	82 30       	cpi	r24, 0x02	; 2
    1be6:	09 f4       	brne	.+2      	; 0x1bea <__vector_21+0x52>
    1be8:	a5 c1       	rjmp	.+842    	; 0x1f34 <__vector_21+0x39c>
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <__vector_21+0x58>
    1bee:	c9 c1       	rjmp	.+914    	; 0x1f82 <__vector_21+0x3ea>
    1bf0:	01 c2       	rjmp	.+1026   	; 0x1ff4 <__vector_21+0x45c>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1bf2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    1bf6:	81 11       	cpse	r24, r1
    1bf8:	1a c1       	rjmp	.+564    	; 0x1e2e <__vector_21+0x296>
    1bfa:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1bfe:	96 fd       	sbrc	r25, 6
    1c00:	16 c1       	rjmp	.+556    	; 0x1e2e <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	ee 0f       	add	r30, r30
    1c0a:	ff 1f       	adc	r31, r31
    1c0c:	e2 0f       	add	r30, r18
    1c0e:	f3 1f       	adc	r31, r19
    1c10:	ee 0f       	add	r30, r30
    1c12:	ff 1f       	adc	r31, r31
    1c14:	e9 5b       	subi	r30, 0xB9	; 185
    1c16:	fc 4f       	sbci	r31, 0xFC	; 252
    1c18:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1c1a:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1c1e:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1c20:	49 17       	cp	r20, r25
    1c22:	10 f4       	brcc	.+4      	; 0x1c28 <__vector_21+0x90>
		return data1-data2;
    1c24:	94 1b       	sub	r25, r20
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <__vector_21+0x96>
	} else {
		return data2-data1;
    1c28:	54 2f       	mov	r21, r20
    1c2a:	59 1b       	sub	r21, r25
    1c2c:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1c2e:	94 30       	cpi	r25, 0x04	; 4
    1c30:	08 f0       	brcs	.+2      	; 0x1c34 <__vector_21+0x9c>
    1c32:	fd c0       	rjmp	.+506    	; 0x1e2e <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1c34:	81 11       	cpse	r24, r1
    1c36:	0e c0       	rjmp	.+28     	; 0x1c54 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1c38:	42 32       	cpi	r20, 0x22	; 34
    1c3a:	70 f0       	brcs	.+28     	; 0x1c58 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1c3c:	4f 33       	cpi	r20, 0x3F	; 63
    1c3e:	70 f0       	brcs	.+28     	; 0x1c5c <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1c40:	48 36       	cpi	r20, 0x68	; 104
    1c42:	70 f0       	brcs	.+28     	; 0x1c60 <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1c44:	46 39       	cpi	r20, 0x96	; 150
    1c46:	70 f0       	brcs	.+28     	; 0x1c64 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1c48:	4f 3b       	cpi	r20, 0xBF	; 191
    1c4a:	70 f0       	brcs	.+28     	; 0x1c68 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1c4c:	48 3e       	cpi	r20, 0xE8	; 232
    1c4e:	70 f4       	brcc	.+28     	; 0x1c6c <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1c50:	c6 e0       	ldi	r28, 0x06	; 6
    1c52:	0d c0       	rjmp	.+26     	; 0x1c6e <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1c54:	cf ef       	ldi	r28, 0xFF	; 255
    1c56:	0b c0       	rjmp	.+22     	; 0x1c6e <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1c58:	c4 e0       	ldi	r28, 0x04	; 4
    1c5a:	09 c0       	rjmp	.+18     	; 0x1c6e <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1c5c:	c3 e0       	ldi	r28, 0x03	; 3
    1c5e:	07 c0       	rjmp	.+14     	; 0x1c6e <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1c60:	c5 e0       	ldi	r28, 0x05	; 5
    1c62:	05 c0       	rjmp	.+10     	; 0x1c6e <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1c64:	c1 e0       	ldi	r28, 0x01	; 1
    1c66:	03 c0       	rjmp	.+6      	; 0x1c6e <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1c68:	c2 e0       	ldi	r28, 0x02	; 2
    1c6a:	01 c0       	rjmp	.+2      	; 0x1c6e <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1c6c:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1c6e:	f9 01       	movw	r30, r18
    1c70:	ee 0f       	add	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	e2 0f       	add	r30, r18
    1c76:	f3 1f       	adc	r31, r19
    1c78:	ee 0f       	add	r30, r30
    1c7a:	ff 1f       	adc	r31, r31
    1c7c:	e9 5b       	subi	r30, 0xB9	; 185
    1c7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c80:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1c82:	dc 17       	cp	r29, r28
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <__vector_21+0xf0>
    1c86:	48 c0       	rjmp	.+144    	; 0x1d18 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1c88:	df 3f       	cpi	r29, 0xFF	; 255
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <__vector_21+0xfa>
    1c8c:	cf 3f       	cpi	r28, 0xFF	; 255
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1c90:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1c92:	f9 01       	movw	r30, r18
    1c94:	ee 0f       	add	r30, r30
    1c96:	ff 1f       	adc	r31, r31
    1c98:	e2 0f       	add	r30, r18
    1c9a:	f3 1f       	adc	r31, r19
    1c9c:	ee 0f       	add	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	e9 5b       	subi	r30, 0xB9	; 185
    1ca2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ca4:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1ca6:	df 3f       	cpi	r29, 0xFF	; 255
    1ca8:	f9 f4       	brne	.+62     	; 0x1ce8 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    1caa:	c9 01       	movw	r24, r18
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	e2 0f       	add	r30, r18
    1cb4:	f3 1f       	adc	r31, r19
    1cb6:	ee 0f       	add	r30, r30
    1cb8:	ff 1f       	adc	r31, r31
    1cba:	e9 5b       	subi	r30, 0xB9	; 185
    1cbc:	fc 4f       	sbci	r31, 0xFC	; 252
    1cbe:	15 82       	std	Z+5, r1	; 0x05
    1cc0:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	e2 0f       	add	r30, r18
    1cc6:	f3 1f       	adc	r31, r19
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	e9 5b       	subi	r30, 0xB9	; 185
    1cce:	fc 4f       	sbci	r31, 0xFC	; 252
    1cd0:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1cd2:	ec 2f       	mov	r30, r28
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	e2 5b       	subi	r30, 0xB2	; 178
    1cd8:	fc 4f       	sbci	r31, 0xFC	; 252
    1cda:	80 81       	ld	r24, Z
    1cdc:	80 ff       	sbrs	r24, 0
    1cde:	a7 c0       	rjmp	.+334    	; 0x1e2e <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    1ce0:	8c 2f       	mov	r24, r28
    1ce2:	0e 94 91 25 	call	0x4b22	; 0x4b22 <message_push>
    1ce6:	a3 c0       	rjmp	.+326    	; 0x1e2e <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    1ce8:	ed 2f       	mov	r30, r29
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	e2 5b       	subi	r30, 0xB2	; 178
    1cee:	fc 4f       	sbci	r31, 0xFC	; 252
    1cf0:	80 81       	ld	r24, Z
    1cf2:	81 ff       	sbrs	r24, 1
    1cf4:	9c c0       	rjmp	.+312    	; 0x1e2e <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	ee 0f       	add	r30, r30
    1cfa:	ff 1f       	adc	r31, r31
    1cfc:	e2 0f       	add	r30, r18
    1cfe:	f3 1f       	adc	r31, r19
    1d00:	ee 0f       	add	r30, r30
    1d02:	ff 1f       	adc	r31, r31
    1d04:	e9 5b       	subi	r30, 0xB9	; 185
    1d06:	fc 4f       	sbci	r31, 0xFC	; 252
    1d08:	83 81       	ldd	r24, Z+3	; 0x03
    1d0a:	83 70       	andi	r24, 0x03	; 3
    1d0c:	09 f0       	breq	.+2      	; 0x1d10 <__vector_21+0x178>
    1d0e:	8f c0       	rjmp	.+286    	; 0x1e2e <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    1d10:	8d 2f       	mov	r24, r29
    1d12:	0e 94 91 25 	call	0x4b22	; 0x4b22 <message_push>
    1d16:	8b c0       	rjmp	.+278    	; 0x1e2e <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    1d18:	cf 3f       	cpi	r28, 0xFF	; 255
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <__vector_21+0x186>
    1d1c:	88 c0       	rjmp	.+272    	; 0x1e2e <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    1d1e:	f9 01       	movw	r30, r18
    1d20:	ee 0f       	add	r30, r30
    1d22:	ff 1f       	adc	r31, r31
    1d24:	df 01       	movw	r26, r30
    1d26:	a2 0f       	add	r26, r18
    1d28:	b3 1f       	adc	r27, r19
    1d2a:	aa 0f       	add	r26, r26
    1d2c:	bb 1f       	adc	r27, r27
    1d2e:	a9 5b       	subi	r26, 0xB9	; 185
    1d30:	bc 4f       	sbci	r27, 0xFC	; 252
    1d32:	14 96       	adiw	r26, 0x04	; 4
    1d34:	8d 91       	ld	r24, X+
    1d36:	9c 91       	ld	r25, X
    1d38:	15 97       	sbiw	r26, 0x05	; 5
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	15 96       	adiw	r26, 0x05	; 5
    1d3e:	9c 93       	st	X, r25
    1d40:	8e 93       	st	-X, r24
    1d42:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    1d44:	fd 01       	movw	r30, r26
    1d46:	84 81       	ldd	r24, Z+4	; 0x04
    1d48:	95 81       	ldd	r25, Z+5	; 0x05
    1d4a:	8d 35       	cpi	r24, 0x5D	; 93
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	a9 f4       	brne	.+42     	; 0x1d7a <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    1d50:	ed 2f       	mov	r30, r29
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	e2 5b       	subi	r30, 0xB2	; 178
    1d56:	fc 4f       	sbci	r31, 0xFC	; 252
    1d58:	80 81       	ld	r24, Z
    1d5a:	82 ff       	sbrs	r24, 2
    1d5c:	0e c0       	rjmp	.+28     	; 0x1d7a <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    1d5e:	8c 2f       	mov	r24, r28
    1d60:	80 68       	ori	r24, 0x80	; 128
    1d62:	0e 94 91 25 	call	0x4b22	; 0x4b22 <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    1d66:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <adcNr>
    1d6a:	86 e0       	ldi	r24, 0x06	; 6
    1d6c:	e8 9f       	mul	r30, r24
    1d6e:	f0 01       	movw	r30, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	e9 5b       	subi	r30, 0xB9	; 185
    1d74:	fc 4f       	sbci	r31, 0xFC	; 252
    1d76:	82 e0       	ldi	r24, 0x02	; 2
    1d78:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    1d7a:	ed 2f       	mov	r30, r29
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	e2 5b       	subi	r30, 0xB2	; 178
    1d80:	fc 4f       	sbci	r31, 0xFC	; 252
    1d82:	80 81       	ld	r24, Z
    1d84:	83 ff       	sbrs	r24, 3
    1d86:	53 c0       	rjmp	.+166    	; 0x1e2e <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    1d88:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	fc 01       	movw	r30, r24
    1d90:	ee 0f       	add	r30, r30
    1d92:	ff 1f       	adc	r31, r31
    1d94:	e8 0f       	add	r30, r24
    1d96:	f9 1f       	adc	r31, r25
    1d98:	ee 0f       	add	r30, r30
    1d9a:	ff 1f       	adc	r31, r31
    1d9c:	e9 5b       	subi	r30, 0xB9	; 185
    1d9e:	fc 4f       	sbci	r31, 0xFC	; 252
    1da0:	23 81       	ldd	r18, Z+3	; 0x03
    1da2:	21 11       	cpse	r18, r1
    1da4:	1e c0       	rjmp	.+60     	; 0x1de2 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    1da6:	fc 01       	movw	r30, r24
    1da8:	ee 0f       	add	r30, r30
    1daa:	ff 1f       	adc	r31, r31
    1dac:	e8 0f       	add	r30, r24
    1dae:	f9 1f       	adc	r31, r25
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	e9 5b       	subi	r30, 0xB9	; 185
    1db6:	fc 4f       	sbci	r31, 0xFC	; 252
    1db8:	24 81       	ldd	r18, Z+4	; 0x04
    1dba:	35 81       	ldd	r19, Z+5	; 0x05
    1dbc:	2b 34       	cpi	r18, 0x4B	; 75
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	b1 f5       	brne	.+108    	; 0x1e2e <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    1dc2:	26 e0       	ldi	r18, 0x06	; 6
    1dc4:	28 9f       	mul	r18, r24
    1dc6:	f0 01       	movw	r30, r0
    1dc8:	29 9f       	mul	r18, r25
    1dca:	f0 0d       	add	r31, r0
    1dcc:	11 24       	eor	r1, r1
    1dce:	e9 5b       	subi	r30, 0xB9	; 185
    1dd0:	fc 4f       	sbci	r31, 0xFC	; 252
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    1dd6:	15 82       	std	Z+5, r1	; 0x05
    1dd8:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    1dda:	8c 2f       	mov	r24, r28
    1ddc:	0e 94 91 25 	call	0x4b22	; 0x4b22 <message_push>
    1de0:	26 c0       	rjmp	.+76     	; 0x1e2e <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    1de2:	fc 01       	movw	r30, r24
    1de4:	ee 0f       	add	r30, r30
    1de6:	ff 1f       	adc	r31, r31
    1de8:	e8 0f       	add	r30, r24
    1dea:	f9 1f       	adc	r31, r25
    1dec:	ee 0f       	add	r30, r30
    1dee:	ff 1f       	adc	r31, r31
    1df0:	e9 5b       	subi	r30, 0xB9	; 185
    1df2:	fc 4f       	sbci	r31, 0xFC	; 252
    1df4:	23 81       	ldd	r18, Z+3	; 0x03
    1df6:	21 30       	cpi	r18, 0x01	; 1
    1df8:	d1 f4       	brne	.+52     	; 0x1e2e <__vector_21+0x296>
    1dfa:	26 e0       	ldi	r18, 0x06	; 6
    1dfc:	28 9f       	mul	r18, r24
    1dfe:	f0 01       	movw	r30, r0
    1e00:	29 9f       	mul	r18, r25
    1e02:	f0 0d       	add	r31, r0
    1e04:	11 24       	eor	r1, r1
    1e06:	e9 5b       	subi	r30, 0xB9	; 185
    1e08:	fc 4f       	sbci	r31, 0xFC	; 252
    1e0a:	24 81       	ldd	r18, Z+4	; 0x04
    1e0c:	35 81       	ldd	r19, Z+5	; 0x05
    1e0e:	2c 30       	cpi	r18, 0x0C	; 12
    1e10:	31 05       	cpc	r19, r1
    1e12:	69 f4       	brne	.+26     	; 0x1e2e <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    1e14:	26 e0       	ldi	r18, 0x06	; 6
    1e16:	28 9f       	mul	r18, r24
    1e18:	f0 01       	movw	r30, r0
    1e1a:	29 9f       	mul	r18, r25
    1e1c:	f0 0d       	add	r31, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	e9 5b       	subi	r30, 0xB9	; 185
    1e22:	fc 4f       	sbci	r31, 0xFC	; 252
    1e24:	15 82       	std	Z+5, r1	; 0x05
    1e26:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    1e28:	8c 2f       	mov	r24, r28
    1e2a:	0e 94 91 25 	call	0x4b22	; 0x4b22 <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    1e2e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    1e32:	8f 5f       	subi	r24, 0xFF	; 255
    1e34:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <adcNr>
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	10 f0       	brcs	.+4      	; 0x1e40 <__vector_21+0x2a8>
		adcNr = 0;
    1e3c:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    1e40:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <adcNr>
    1e44:	81 11       	cpse	r24, r1
    1e46:	0c c0       	rjmp	.+24     	; 0x1e60 <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	fc 01       	movw	r30, r24
    1e4c:	ee 0f       	add	r30, r30
    1e4e:	ff 1f       	adc	r31, r31
    1e50:	e8 0f       	add	r30, r24
    1e52:	f9 1f       	adc	r31, r25
    1e54:	ee 0f       	add	r30, r30
    1e56:	ff 1f       	adc	r31, r31
    1e58:	e9 5b       	subi	r30, 0xB9	; 185
    1e5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e5c:	80 81       	ld	r24, Z
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    1e60:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    1e62:	98 2f       	mov	r25, r24
    1e64:	9f 71       	andi	r25, 0x1F	; 31
    1e66:	90 66       	ori	r25, 0x60	; 96
    1e68:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    1e6c:	eb e7       	ldi	r30, 0x7B	; 123
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	20 81       	ld	r18, Z
    1e72:	80 72       	andi	r24, 0x20	; 32
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	95 95       	asr	r25
    1e78:	87 95       	ror	r24
    1e7a:	95 95       	asr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	92 2f       	mov	r25, r18
    1e80:	9f 7d       	andi	r25, 0xDF	; 223
    1e82:	89 2b       	or	r24, r25
    1e84:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    1e86:	ea e7       	ldi	r30, 0x7A	; 122
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 64       	ori	r24, 0x40	; 64
    1e8e:	80 83       	st	Z, r24
    1e90:	b1 c0       	rjmp	.+354    	; 0x1ff4 <__vector_21+0x45c>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    1e92:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1e96:	80 38       	cpi	r24, 0x80	; 128
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <__vector_21+0x304>
    1e9a:	ac c0       	rjmp	.+344    	; 0x1ff4 <__vector_21+0x45c>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    1e9c:	84 b3       	in	r24, 0x14	; 20
    1e9e:	87 60       	ori	r24, 0x07	; 7
    1ea0:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    1ea2:	84 b3       	in	r24, 0x14	; 20
    1ea4:	8b 7f       	andi	r24, 0xFB	; 251
    1ea6:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
    1ea8:	20 91 4d 03 	lds	r18, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    1eac:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1eae:	e2 e0       	ldi	r30, 0x02	; 2
    1eb0:	ea 95       	dec	r30
    1eb2:	f1 f7       	brne	.-4      	; 0x1eb0 <__vector_21+0x318>
    1eb4:	00 c0       	rjmp	.+0      	; 0x1eb6 <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    1eb6:	84 b3       	in	r24, 0x14	; 20
    1eb8:	84 60       	ori	r24, 0x04	; 4
    1eba:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    1ebc:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    1ebe:	ef e3       	ldi	r30, 0x3F	; 63
    1ec0:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_ModuleAssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    1ec2:	83 81       	ldd	r24, Z+3	; 0x03
    1ec4:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    1ec6:	84 81       	ldd	r24, Z+4	; 0x04
    1ec8:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    1eca:	84 b3       	in	r24, 0x14	; 20
    1ecc:	81 60       	ori	r24, 0x01	; 1
    1ece:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    1ed0:	81 81       	ldd	r24, Z+1	; 0x01
    1ed2:	82 2b       	or	r24, r18
    1ed4:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    1ed6:	85 81       	ldd	r24, Z+5	; 0x05
    1ed8:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    1eda:	86 81       	ldd	r24, Z+6	; 0x06
    1edc:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    1ede:	80 b1       	in	r24, 0x00	; 0
    1ee0:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    1ee2:	84 b3       	in	r24, 0x14	; 20
    1ee4:	8e 7f       	andi	r24, 0xFE	; 254
    1ee6:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    1ee8:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    1eea:	91 50       	subi	r25, 0x01	; 1
    1eec:	51 f7       	brne	.-44     	; 0x1ec2 <__vector_21+0x32a>
	asm("nop");
    1eee:	00 00       	nop
	asm("nop");
    1ef0:	00 00       	nop
	PIPE_CLOCK_H
    1ef2:	84 b3       	in	r24, 0x14	; 20
    1ef4:	81 60       	ori	r24, 0x01	; 1
    1ef6:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    1ef8:	84 b3       	in	r24, 0x14	; 20
    1efa:	8d 7f       	andi	r24, 0xFD	; 253
    1efc:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    1efe:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1f02:	82 60       	ori	r24, 0x02	; 2
    1f04:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    1f08:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    1f0a:	8b b1       	in	r24, 0x0b	; 11
    1f0c:	80 68       	ori	r24, 0x80	; 128
    1f0e:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    1f10:	84 b3       	in	r24, 0x14	; 20
    1f12:	82 60       	ori	r24, 0x02	; 2
    1f14:	84 bb       	out	0x14, r24	; 20
    1f16:	6e c0       	rjmp	.+220    	; 0x1ff4 <__vector_21+0x45c>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    1f18:	80 81       	ld	r24, Z
    1f1a:	81 50       	subi	r24, 0x01	; 1
    1f1c:	8e 3f       	cpi	r24, 0xFE	; 254
    1f1e:	38 f4       	brcc	.+14     	; 0x1f2e <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    1f20:	21 81       	ldd	r18, Z+1	; 0x01
    1f22:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    1f24:	25 30       	cpi	r18, 0x05	; 5
    1f26:	10 f0       	brcs	.+4      	; 0x1f2c <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    1f28:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    1f2c:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    1f2e:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    1f30:	9f 5f       	subi	r25, 0xFF	; 255
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <__vector_21+0x3a2>
    1f34:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    1f36:	ed e2       	ldi	r30, 0x2D	; 45
    1f38:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    1f3a:	99 30       	cpi	r25, 0x09	; 9
    1f3c:	68 f3       	brcs	.-38     	; 0x1f18 <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    1f3e:	ef e3       	ldi	r30, 0x3F	; 63
    1f40:	f2 e0       	ldi	r31, 0x02	; 2
    1f42:	80 81       	ld	r24, Z
    1f44:	8f 5f       	subi	r24, 0xFF	; 255
    1f46:	80 83       	st	Z, r24
    1f48:	8a 3f       	cpi	r24, 0xFA	; 250
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <__vector_21+0x3b6>
    1f4c:	53 c0       	rjmp	.+166    	; 0x1ff4 <__vector_21+0x45c>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    1f4e:	8f ef       	ldi	r24, 0xFF	; 255
    1f50:	80 93 55 03 	sts	0x0355, r24	; 0x800355 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    1f54:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	81 83       	std	Z+1, r24	; 0x01
    1f5c:	8c 33       	cpi	r24, 0x3C	; 60
    1f5e:	08 f4       	brcc	.+2      	; 0x1f62 <__vector_21+0x3ca>
    1f60:	49 c0       	rjmp	.+146    	; 0x1ff4 <__vector_21+0x45c>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    1f62:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	8f 5f       	subi	r24, 0xFF	; 255
    1f68:	82 83       	std	Z+2, r24	; 0x02
    1f6a:	8c 33       	cpi	r24, 0x3C	; 60
    1f6c:	08 f4       	brcc	.+2      	; 0x1f70 <__vector_21+0x3d8>
    1f6e:	42 c0       	rjmp	.+132    	; 0x1ff4 <__vector_21+0x45c>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    1f70:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    1f72:	83 81       	ldd	r24, Z+3	; 0x03
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	83 83       	std	Z+3, r24	; 0x03
    1f78:	84 36       	cpi	r24, 0x64	; 100
    1f7a:	e0 f1       	brcs	.+120    	; 0x1ff4 <__vector_21+0x45c>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    1f7c:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <time_Uptime+0x3>
    1f80:	39 c0       	rjmp	.+114    	; 0x1ff4 <__vector_21+0x45c>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    1f82:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1f86:	80 38       	cpi	r24, 0x80	; 128
    1f88:	a9 f1       	breq	.+106    	; 0x1ff4 <__vector_21+0x45c>
//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
    1f8a:	e0 90 4e 03 	lds	r14, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    1f8e:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    1f90:	07 e4       	ldi	r16, 0x47	; 71
    1f92:	12 e0       	ldi	r17, 0x02	; 2
    1f94:	2c c0       	rjmp	.+88     	; 0x1fee <__vector_21+0x456>
// 			| (curPipe->pipeInM12) | (curPipe->pipeInM16) ; // 1 if key pressed at least onece in last 16m, 0 if key was never pressed
		// new V 0.56
		uint8_t newOnState = 0xFF;
		uint8_t newOffState = 0;
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    1f96:	f8 01       	movw	r30, r16
    1f98:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    1f9a:	83 81       	ldd	r24, Z+3	; 0x03
    1f9c:	9c 2f       	mov	r25, r28
    1f9e:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    1fa0:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    1fa2:	84 81       	ldd	r24, Z+4	; 0x04
    1fa4:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    1fa6:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    1fa8:	25 81       	ldd	r18, Z+5	; 0x05
    1faa:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    1fac:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    1fae:	86 81       	ldd	r24, Z+6	; 0x06
    1fb0:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    1fb2:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    1fb4:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1
    1fb6:	cd 23       	and	r28, r29
    1fb8:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    1fba:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    1fbc:	8d 2f       	mov	r24, r29
    1fbe:	80 95       	com	r24
    1fc0:	8c 23       	and	r24, r28
    1fc2:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    1fc4:	21 f0       	breq	.+8      	; 0x1fce <__vector_21+0x436>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    1fc6:	9f 2d       	mov	r25, r15
    1fc8:	90 62       	ori	r25, 0x20	; 32
    1fca:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    1fce:	c0 95       	com	r28
    1fd0:	cd 23       	and	r28, r29
    1fd2:	8c 2f       	mov	r24, r28
    1fd4:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <__vector_21+0x446>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    1fd8:	9f 2d       	mov	r25, r15
    1fda:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <pipeMsgPush>
		}
		//curPipe->pipeInStat = newPipeStat;
		curPipe++;
    1fde:	08 5f       	subi	r16, 0xF8	; 248
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    1fe2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <pipeProcessing>
    1fe6:	81 60       	ori	r24, 0x01	; 1
    1fe8:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	uint8_t local_pipe_ModuleAssnRead = pipe_ModuleAssnRead; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    1fec:	f3 94       	inc	r15
    1fee:	ff e1       	ldi	r31, 0x1F	; 31
    1ff0:	ff 15       	cp	r31, r15
    1ff2:	88 f6       	brcc	.-94     	; 0x1f96 <__vector_21+0x3fe>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    1ff4:	85 b1       	in	r24, 0x05	; 5
    1ff6:	8f 77       	andi	r24, 0x7F	; 127
    1ff8:	85 b9       	out	0x05, r24	; 5

}
    1ffa:	ff 91       	pop	r31
    1ffc:	ef 91       	pop	r30
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	bf 91       	pop	r27
    2004:	af 91       	pop	r26
    2006:	9f 91       	pop	r25
    2008:	8f 91       	pop	r24
    200a:	7f 91       	pop	r23
    200c:	6f 91       	pop	r22
    200e:	5f 91       	pop	r21
    2010:	4f 91       	pop	r20
    2012:	3f 91       	pop	r19
    2014:	2f 91       	pop	r18
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	0f 90       	pop	r0
    2020:	0b be       	out	0x3b, r0	; 59
    2022:	0f 90       	pop	r0
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	0f 90       	pop	r0
    2028:	1f 90       	pop	r1
    202a:	18 95       	reti

0000202c <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    202c:	8f ef       	ldi	r24, 0xFF	; 255
    202e:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    2030:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    2032:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    2034:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    2036:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    2038:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    203a:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    203c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    2040:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    2044:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    2048:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    204c:	8a b1       	in	r24, 0x0a	; 10
    204e:	80 68       	ori	r24, 0x80	; 128
    2050:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2052:	8b b1       	in	r24, 0x0b	; 11
    2054:	8f 77       	andi	r24, 0x7F	; 127
    2056:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    2058:	84 b1       	in	r24, 0x04	; 4
    205a:	80 64       	ori	r24, 0x40	; 64
    205c:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    205e:	85 b1       	in	r24, 0x05	; 5
    2060:	8f 7b       	andi	r24, 0xBF	; 191
    2062:	85 b9       	out	0x05, r24	; 5
    2064:	08 95       	ret

00002066 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2066:	88 23       	and	r24, r24
    2068:	34 f4       	brge	.+12     	; 0x2076 <lcd_write_nibble+0x10>
    206a:	e2 e0       	ldi	r30, 0x02	; 2
    206c:	f1 e0       	ldi	r31, 0x01	; 1
    206e:	90 81       	ld	r25, Z
    2070:	90 61       	ori	r25, 0x10	; 16
    2072:	90 83       	st	Z, r25
    2074:	05 c0       	rjmp	.+10     	; 0x2080 <lcd_write_nibble+0x1a>
    2076:	e2 e0       	ldi	r30, 0x02	; 2
    2078:	f1 e0       	ldi	r31, 0x01	; 1
    207a:	90 81       	ld	r25, Z
    207c:	9f 7e       	andi	r25, 0xEF	; 239
    207e:	90 83       	st	Z, r25
    2080:	86 ff       	sbrs	r24, 6
    2082:	06 c0       	rjmp	.+12     	; 0x2090 <lcd_write_nibble+0x2a>
    2084:	e2 e0       	ldi	r30, 0x02	; 2
    2086:	f1 e0       	ldi	r31, 0x01	; 1
    2088:	90 81       	ld	r25, Z
    208a:	98 60       	ori	r25, 0x08	; 8
    208c:	90 83       	st	Z, r25
    208e:	05 c0       	rjmp	.+10     	; 0x209a <lcd_write_nibble+0x34>
    2090:	e2 e0       	ldi	r30, 0x02	; 2
    2092:	f1 e0       	ldi	r31, 0x01	; 1
    2094:	90 81       	ld	r25, Z
    2096:	97 7f       	andi	r25, 0xF7	; 247
    2098:	90 83       	st	Z, r25
    209a:	85 ff       	sbrs	r24, 5
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <lcd_write_nibble+0x40>
    209e:	9e b1       	in	r25, 0x0e	; 14
    20a0:	98 60       	ori	r25, 0x08	; 8
    20a2:	9e b9       	out	0x0e, r25	; 14
    20a4:	03 c0       	rjmp	.+6      	; 0x20ac <lcd_write_nibble+0x46>
    20a6:	9e b1       	in	r25, 0x0e	; 14
    20a8:	97 7f       	andi	r25, 0xF7	; 247
    20aa:	9e b9       	out	0x0e, r25	; 14
    20ac:	84 ff       	sbrs	r24, 4
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <lcd_write_nibble+0x52>
    20b0:	84 b3       	in	r24, 0x14	; 20
    20b2:	80 62       	ori	r24, 0x20	; 32
    20b4:	84 bb       	out	0x14, r24	; 20
    20b6:	03 c0       	rjmp	.+6      	; 0x20be <lcd_write_nibble+0x58>
    20b8:	84 b3       	in	r24, 0x14	; 20
    20ba:	8f 7d       	andi	r24, 0xDF	; 223
    20bc:	84 bb       	out	0x14, r24	; 20
    20be:	e2 e0       	ldi	r30, 0x02	; 2
    20c0:	f1 e0       	ldi	r31, 0x01	; 1
    20c2:	80 81       	ld	r24, Z
    20c4:	80 64       	ori	r24, 0x40	; 64
    20c6:	80 83       	st	Z, r24
    20c8:	85 e0       	ldi	r24, 0x05	; 5
    20ca:	8a 95       	dec	r24
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <lcd_write_nibble+0x64>
    20ce:	00 00       	nop
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 7b       	andi	r24, 0xBF	; 191
    20d4:	80 83       	st	Z, r24
    20d6:	85 e0       	ldi	r24, 0x05	; 5
    20d8:	8a 95       	dec	r24
    20da:	f1 f7       	brne	.-4      	; 0x20d8 <lcd_write_nibble+0x72>
    20dc:	00 00       	nop
    20de:	08 95       	ret

000020e0 <lcd_write_character>:
    20e0:	cf 93       	push	r28
    20e2:	c8 2f       	mov	r28, r24
    20e4:	e2 e0       	ldi	r30, 0x02	; 2
    20e6:	f1 e0       	ldi	r31, 0x01	; 1
    20e8:	80 81       	ld	r24, Z
    20ea:	80 62       	ori	r24, 0x20	; 32
    20ec:	80 83       	st	Z, r24
    20ee:	80 81       	ld	r24, Z
    20f0:	8f 7b       	andi	r24, 0xBF	; 191
    20f2:	80 83       	st	Z, r24
    20f4:	8c 2f       	mov	r24, r28
    20f6:	b7 df       	rcall	.-146    	; 0x2066 <lcd_write_nibble>
    20f8:	8c 2f       	mov	r24, r28
    20fa:	82 95       	swap	r24
    20fc:	80 7f       	andi	r24, 0xF0	; 240
    20fe:	b3 df       	rcall	.-154    	; 0x2066 <lcd_write_nibble>
    2100:	8f ef       	ldi	r24, 0xFF	; 255
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <lcd_write_character+0x24>
    2108:	00 c0       	rjmp	.+0      	; 0x210a <lcd_write_character+0x2a>
    210a:	00 00       	nop
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <lcd_write_command>:
    2110:	cf 93       	push	r28
    2112:	c8 2f       	mov	r28, r24
    2114:	e2 e0       	ldi	r30, 0x02	; 2
    2116:	f1 e0       	ldi	r31, 0x01	; 1
    2118:	80 81       	ld	r24, Z
    211a:	8f 7d       	andi	r24, 0xDF	; 223
    211c:	80 83       	st	Z, r24
    211e:	80 81       	ld	r24, Z
    2120:	8f 7b       	andi	r24, 0xBF	; 191
    2122:	80 83       	st	Z, r24
    2124:	8c 2f       	mov	r24, r28
    2126:	9f df       	rcall	.-194    	; 0x2066 <lcd_write_nibble>
    2128:	8c 2f       	mov	r24, r28
    212a:	82 95       	swap	r24
    212c:	80 7f       	andi	r24, 0xF0	; 240
    212e:	9b df       	rcall	.-202    	; 0x2066 <lcd_write_nibble>
    2130:	c1 50       	subi	r28, 0x01	; 1
    2132:	c2 30       	cpi	r28, 0x02	; 2
    2134:	38 f4       	brcc	.+14     	; 0x2144 <lcd_write_command+0x34>
    2136:	8f e0       	ldi	r24, 0x0F	; 15
    2138:	97 e2       	ldi	r25, 0x27	; 39
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <lcd_write_command+0x2a>
    213e:	00 c0       	rjmp	.+0      	; 0x2140 <lcd_write_command+0x30>
    2140:	00 00       	nop
    2142:	06 c0       	rjmp	.+12     	; 0x2150 <lcd_write_command+0x40>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <lcd_write_command+0x38>
    214c:	00 c0       	rjmp	.+0      	; 0x214e <lcd_write_command+0x3e>
    214e:	00 00       	nop
    2150:	cf 91       	pop	r28
    2152:	08 95       	ret

00002154 <lcd_init>:
    2154:	e1 e0       	ldi	r30, 0x01	; 1
    2156:	f1 e0       	ldi	r31, 0x01	; 1
    2158:	80 81       	ld	r24, Z
    215a:	80 61       	ori	r24, 0x10	; 16
    215c:	80 83       	st	Z, r24
    215e:	80 81       	ld	r24, Z
    2160:	88 60       	ori	r24, 0x08	; 8
    2162:	80 83       	st	Z, r24
    2164:	8d b1       	in	r24, 0x0d	; 13
    2166:	88 60       	ori	r24, 0x08	; 8
    2168:	8d b9       	out	0x0d, r24	; 13
    216a:	83 b3       	in	r24, 0x13	; 19
    216c:	80 62       	ori	r24, 0x20	; 32
    216e:	83 bb       	out	0x13, r24	; 19
    2170:	80 81       	ld	r24, Z
    2172:	80 64       	ori	r24, 0x40	; 64
    2174:	80 83       	st	Z, r24
    2176:	80 81       	ld	r24, Z
    2178:	80 62       	ori	r24, 0x20	; 32
    217a:	80 83       	st	Z, r24
    217c:	2f ef       	ldi	r18, 0xFF	; 255
    217e:	81 ee       	ldi	r24, 0xE1	; 225
    2180:	94 e0       	ldi	r25, 0x04	; 4
    2182:	21 50       	subi	r18, 0x01	; 1
    2184:	80 40       	sbci	r24, 0x00	; 0
    2186:	90 40       	sbci	r25, 0x00	; 0
    2188:	e1 f7       	brne	.-8      	; 0x2182 <lcd_init+0x2e>
    218a:	00 c0       	rjmp	.+0      	; 0x218c <lcd_init+0x38>
    218c:	00 00       	nop
    218e:	e2 e0       	ldi	r30, 0x02	; 2
    2190:	f1 e0       	ldi	r31, 0x01	; 1
    2192:	80 81       	ld	r24, Z
    2194:	8f 7d       	andi	r24, 0xDF	; 223
    2196:	80 83       	st	Z, r24
    2198:	80 81       	ld	r24, Z
    219a:	8f 7b       	andi	r24, 0xBF	; 191
    219c:	80 83       	st	Z, r24
    219e:	80 e3       	ldi	r24, 0x30	; 48
    21a0:	62 df       	rcall	.-316    	; 0x2066 <lcd_write_nibble>
    21a2:	8f e1       	ldi	r24, 0x1F	; 31
    21a4:	9e e4       	ldi	r25, 0x4E	; 78
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <lcd_init+0x52>
    21aa:	00 c0       	rjmp	.+0      	; 0x21ac <lcd_init+0x58>
    21ac:	00 00       	nop
    21ae:	80 e3       	ldi	r24, 0x30	; 48
    21b0:	5a df       	rcall	.-332    	; 0x2066 <lcd_write_nibble>
    21b2:	8f e1       	ldi	r24, 0x1F	; 31
    21b4:	9e e4       	ldi	r25, 0x4E	; 78
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <lcd_init+0x62>
    21ba:	00 c0       	rjmp	.+0      	; 0x21bc <lcd_init+0x68>
    21bc:	00 00       	nop
    21be:	80 e3       	ldi	r24, 0x30	; 48
    21c0:	52 df       	rcall	.-348    	; 0x2066 <lcd_write_nibble>
    21c2:	8f e1       	ldi	r24, 0x1F	; 31
    21c4:	9e e4       	ldi	r25, 0x4E	; 78
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <lcd_init+0x72>
    21ca:	00 c0       	rjmp	.+0      	; 0x21cc <lcd_init+0x78>
    21cc:	00 00       	nop
    21ce:	88 e2       	ldi	r24, 0x28	; 40
    21d0:	4a df       	rcall	.-364    	; 0x2066 <lcd_write_nibble>
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	f1 f7       	brne	.-4      	; 0x21d6 <lcd_init+0x82>
    21da:	00 c0       	rjmp	.+0      	; 0x21dc <lcd_init+0x88>
    21dc:	00 00       	nop
    21de:	88 e2       	ldi	r24, 0x28	; 40
    21e0:	97 df       	rcall	.-210    	; 0x2110 <lcd_write_command>
    21e2:	88 e0       	ldi	r24, 0x08	; 8
    21e4:	95 df       	rcall	.-214    	; 0x2110 <lcd_write_command>
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	93 df       	rcall	.-218    	; 0x2110 <lcd_write_command>
    21ea:	86 e0       	ldi	r24, 0x06	; 6
    21ec:	91 df       	rcall	.-222    	; 0x2110 <lcd_write_command>
    21ee:	8c e0       	ldi	r24, 0x0C	; 12
    21f0:	8f cf       	rjmp	.-226    	; 0x2110 <lcd_write_command>
    21f2:	08 95       	ret

000021f4 <lcd_goto>:
    21f4:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <lcd_cursorPos>
    21f8:	80 58       	subi	r24, 0x80	; 128
    21fa:	8a cf       	rjmp	.-236    	; 0x2110 <lcd_write_command>
    21fc:	08 95       	ret

000021fe <lcd_clrscr>:
    21fe:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <lcd_cursorPos>
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	85 cf       	rjmp	.-246    	; 0x2110 <lcd_write_command>
    2206:	08 95       	ret

00002208 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
	lcd_cursorPos =  (lcd_cursorPos+1) &0x3F;
    2208:	90 91 56 03 	lds	r25, 0x0356	; 0x800356 <lcd_cursorPos>
    220c:	9f 5f       	subi	r25, 0xFF	; 255
    220e:	9f 73       	andi	r25, 0x3F	; 63
    2210:	90 93 56 03 	sts	0x0356, r25	; 0x800356 <lcd_cursorPos>
	lcd_write_character(c);
    2214:	65 cf       	rjmp	.-310    	; 0x20e0 <lcd_write_character>
    2216:	08 95       	ret

00002218 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	fc 01       	movw	r30, r24
	if (s != NULL){
    221e:	89 2b       	or	r24, r25
    2220:	19 f4       	brne	.+6      	; 0x2228 <lcd_puts+0x10>
    2222:	07 c0       	rjmp	.+14     	; 0x2232 <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    2224:	f1 df       	rcall	.-30     	; 0x2208 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    2226:	fe 01       	movw	r30, r28
    2228:	ef 01       	movw	r28, r30
    222a:	21 96       	adiw	r28, 0x01	; 1
    222c:	80 81       	ld	r24, Z
    222e:	81 11       	cpse	r24, r1
    2230:	f9 cf       	rjmp	.-14     	; 0x2224 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    2232:	df 91       	pop	r29
    2234:	cf 91       	pop	r28
    2236:	08 95       	ret

00002238 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    2238:	cf 93       	push	r28
    223a:	df 93       	push	r29
    223c:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    223e:	89 2b       	or	r24, r25
    2240:	19 f4       	brne	.+6      	; 0x2248 <lcd_puts_P+0x10>
    2242:	07 c0       	rjmp	.+14     	; 0x2252 <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    2244:	e1 df       	rcall	.-62     	; 0x2208 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    2246:	fe 01       	movw	r30, r28
    2248:	ef 01       	movw	r28, r30
    224a:	21 96       	adiw	r28, 0x01	; 1
    224c:	84 91       	lpm	r24, Z
    224e:	81 11       	cpse	r24, r1
    2250:	f9 cf       	rjmp	.-14     	; 0x2244 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	08 95       	ret

00002258 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    2258:	80 e8       	ldi	r24, 0x80	; 128
    225a:	93 e0       	ldi	r25, 0x03	; 3
    225c:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogStart+0x1>
    2260:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogStart>
    2264:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <pLogEnd+0x1>
    2268:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <pLogEnd>
    226c:	08 95       	ret

0000226e <log_count>:
    226e:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <pLogEnd>
    2272:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <pLogEnd+0x1>
    2276:	20 91 12 05 	lds	r18, 0x0512	; 0x800512 <pLogStart>
    227a:	30 91 13 05 	lds	r19, 0x0513	; 0x800513 <pLogStart+0x1>
    227e:	82 17       	cp	r24, r18
    2280:	93 07       	cpc	r25, r19
    2282:	48 f0       	brcs	.+18     	; 0x2296 <log_count+0x28>
    2284:	82 1b       	sub	r24, r18
    2286:	93 0b       	sbc	r25, r19
    2288:	95 95       	asr	r25
    228a:	87 95       	ror	r24
    228c:	9d ec       	ldi	r25, 0xCD	; 205
    228e:	89 9f       	mul	r24, r25
    2290:	80 2d       	mov	r24, r0
    2292:	11 24       	eor	r1, r1
    2294:	08 95       	ret
    2296:	80 57       	subi	r24, 0x70	; 112
    2298:	9e 4f       	sbci	r25, 0xFE	; 254
    229a:	82 1b       	sub	r24, r18
    229c:	93 0b       	sbc	r25, r19
    229e:	95 95       	asr	r25
    22a0:	87 95       	ror	r24
    22a2:	9d ec       	ldi	r25, 0xCD	; 205
    22a4:	89 9f       	mul	r24, r25
    22a6:	80 2d       	mov	r24, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	08 95       	ret

000022ac <log_getLog>:
    22ac:	cf 93       	push	r28
    22ae:	c8 2f       	mov	r28, r24
    22b0:	de df       	rcall	.-68     	; 0x226e <log_count>
    22b2:	c8 17       	cp	r28, r24
    22b4:	f8 f4       	brcc	.+62     	; 0x22f4 <log_getLog+0x48>
    22b6:	40 91 12 05 	lds	r20, 0x0512	; 0x800512 <pLogStart>
    22ba:	50 91 13 05 	lds	r21, 0x0513	; 0x800513 <pLogStart+0x1>
    22be:	8c 2f       	mov	r24, r28
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9c 01       	movw	r18, r24
    22c4:	22 0f       	add	r18, r18
    22c6:	33 1f       	adc	r19, r19
    22c8:	88 0f       	add	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	28 0f       	add	r18, r24
    22d6:	39 1f       	adc	r19, r25
    22d8:	ca 01       	movw	r24, r20
    22da:	82 0f       	add	r24, r18
    22dc:	93 1f       	adc	r25, r19
    22de:	65 e0       	ldi	r22, 0x05	; 5
    22e0:	86 30       	cpi	r24, 0x06	; 6
    22e2:	96 07       	cpc	r25, r22
    22e4:	49 f0       	breq	.+18     	; 0x22f8 <log_getLog+0x4c>
    22e6:	40 f0       	brcs	.+16     	; 0x22f8 <log_getLog+0x4c>
    22e8:	20 59       	subi	r18, 0x90	; 144
    22ea:	31 40       	sbci	r19, 0x01	; 1
    22ec:	ca 01       	movw	r24, r20
    22ee:	82 0f       	add	r24, r18
    22f0:	93 1f       	adc	r25, r19
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <log_getLog+0x4c>
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <getErrorText>:
    22fc:	d7 df       	rcall	.-82     	; 0x22ac <log_getLog>
    22fe:	00 97       	sbiw	r24, 0x00	; 0
    2300:	f1 f1       	breq	.+124    	; 0x237e <getErrorText+0x82>
    2302:	fc 01       	movw	r30, r24
    2304:	36 81       	ldd	r19, Z+6	; 0x06
    2306:	67 81       	ldd	r22, Z+7	; 0x07
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	34 c0       	rjmp	.+104    	; 0x2374 <getErrorText+0x78>
    230c:	42 2f       	mov	r20, r18
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	fa 01       	movw	r30, r20
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	cf 01       	movw	r24, r30
    2318:	88 0f       	add	r24, r24
    231a:	99 1f       	adc	r25, r25
    231c:	88 0f       	add	r24, r24
    231e:	99 1f       	adc	r25, r25
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	e8 0f       	add	r30, r24
    2326:	f9 1f       	adc	r31, r25
    2328:	ee 59       	subi	r30, 0x9E	; 158
    232a:	fe 4f       	sbci	r31, 0xFE	; 254
    232c:	84 91       	lpm	r24, Z
    232e:	38 13       	cpse	r19, r24
    2330:	20 c0       	rjmp	.+64     	; 0x2372 <getErrorText+0x76>
    2332:	fa 01       	movw	r30, r20
    2334:	ee 0f       	add	r30, r30
    2336:	ff 1f       	adc	r31, r31
    2338:	cf 01       	movw	r24, r30
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	88 0f       	add	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	e8 0f       	add	r30, r24
    2348:	f9 1f       	adc	r31, r25
    234a:	ed 59       	subi	r30, 0x9D	; 157
    234c:	fe 4f       	sbci	r31, 0xFE	; 254
    234e:	84 91       	lpm	r24, Z
    2350:	68 13       	cpse	r22, r24
    2352:	0f c0       	rjmp	.+30     	; 0x2372 <getErrorText+0x76>
    2354:	44 0f       	add	r20, r20
    2356:	55 1f       	adc	r21, r21
    2358:	ca 01       	movw	r24, r20
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	88 0f       	add	r24, r24
    2364:	99 1f       	adc	r25, r25
    2366:	48 0f       	add	r20, r24
    2368:	59 1f       	adc	r21, r25
    236a:	ca 01       	movw	r24, r20
    236c:	8c 59       	subi	r24, 0x9C	; 156
    236e:	9e 4f       	sbci	r25, 0xFE	; 254
    2370:	08 95       	ret
    2372:	2f 5f       	subi	r18, 0xFF	; 255
    2374:	2f 30       	cpi	r18, 0x0F	; 15
    2376:	50 f2       	brcs	.-108    	; 0x230c <getErrorText+0x10>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	08 95       	ret
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	08 95       	ret

00002384 <logCheckUnreadErrorLogs>:
    2384:	cf 93       	push	r28
    2386:	73 df       	rcall	.-282    	; 0x226e <log_count>
    2388:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <log_unreadErrors>
    238c:	81 11       	cpse	r24, r1
    238e:	14 c0       	rjmp	.+40     	; 0x23b8 <logCheckUnreadErrorLogs+0x34>
    2390:	17 c0       	rjmp	.+46     	; 0x23c0 <logCheckUnreadErrorLogs+0x3c>
    2392:	8c 2f       	mov	r24, r28
    2394:	8b df       	rcall	.-234    	; 0x22ac <log_getLog>
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	61 f0       	breq	.+24     	; 0x23b2 <logCheckUnreadErrorLogs+0x2e>
    239a:	fc 01       	movw	r30, r24
    239c:	24 81       	ldd	r18, Z+4	; 0x04
    239e:	20 32       	cpi	r18, 0x20	; 32
    23a0:	51 f0       	breq	.+20     	; 0x23b6 <logCheckUnreadErrorLogs+0x32>
    23a2:	95 81       	ldd	r25, Z+5	; 0x05
    23a4:	8c 2f       	mov	r24, r28
    23a6:	95 34       	cpi	r25, 0x45	; 69
    23a8:	39 f4       	brne	.+14     	; 0x23b8 <logCheckUnreadErrorLogs+0x34>
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <log_unreadErrors>
    23b0:	07 c0       	rjmp	.+14     	; 0x23c0 <logCheckUnreadErrorLogs+0x3c>
    23b2:	8c 2f       	mov	r24, r28
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <logCheckUnreadErrorLogs+0x34>
    23b6:	8c 2f       	mov	r24, r28
    23b8:	cf ef       	ldi	r28, 0xFF	; 255
    23ba:	c8 0f       	add	r28, r24
    23bc:	81 11       	cpse	r24, r1
    23be:	e9 cf       	rjmp	.-46     	; 0x2392 <logCheckUnreadErrorLogs+0xe>
    23c0:	cf 91       	pop	r28
    23c2:	08 95       	ret

000023c4 <log_getShortTextFromPtr>:
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	00 97       	sbiw	r24, 0x00	; 0
    23cc:	09 f4       	brne	.+2      	; 0x23d0 <log_getShortTextFromPtr+0xc>
    23ce:	7b c0       	rjmp	.+246    	; 0x24c6 <log_getShortTextFromPtr+0x102>
    23d0:	16 2f       	mov	r17, r22
    23d2:	ec 01       	movw	r28, r24
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	88 23       	and	r24, r24
    23d8:	79 f0       	breq	.+30     	; 0x23f8 <log_getShortTextFromPtr+0x34>
    23da:	68 e5       	ldi	r22, 0x58	; 88
    23dc:	73 e0       	ldi	r23, 0x03	; 3
    23de:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <putChar_Dec2>
    23e2:	bc 01       	movw	r22, r24
    23e4:	6f 5f       	subi	r22, 0xFF	; 255
    23e6:	7f 4f       	sbci	r23, 0xFF	; 255
    23e8:	28 e6       	ldi	r18, 0x68	; 104
    23ea:	fc 01       	movw	r30, r24
    23ec:	20 83       	st	Z, r18
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <putChar_Dec2>
    23f4:	dc 01       	movw	r26, r24
    23f6:	2f c0       	rjmp	.+94     	; 0x2456 <log_getShortTextFromPtr+0x92>
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	88 23       	and	r24, r24
    23fc:	79 f0       	breq	.+30     	; 0x241c <log_getShortTextFromPtr+0x58>
    23fe:	68 e5       	ldi	r22, 0x58	; 88
    2400:	73 e0       	ldi	r23, 0x03	; 3
    2402:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <putChar_Dec2>
    2406:	bc 01       	movw	r22, r24
    2408:	6f 5f       	subi	r22, 0xFF	; 255
    240a:	7f 4f       	sbci	r23, 0xFF	; 255
    240c:	2d e6       	ldi	r18, 0x6D	; 109
    240e:	fc 01       	movw	r30, r24
    2410:	20 83       	st	Z, r18
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <putChar_Dec2>
    2418:	dc 01       	movw	r26, r24
    241a:	1d c0       	rjmp	.+58     	; 0x2456 <log_getShortTextFromPtr+0x92>
    241c:	68 e5       	ldi	r22, 0x58	; 88
    241e:	73 e0       	ldi	r23, 0x03	; 3
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <putChar_Dec2>
    2426:	fc 01       	movw	r30, r24
    2428:	83 e7       	ldi	r24, 0x73	; 115
    242a:	80 83       	st	Z, r24
    242c:	98 81       	ld	r25, Y
    242e:	99 0f       	add	r25, r25
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <log_getShortTextFromPtr+0x74>
    2434:	99 51       	subi	r25, 0x19	; 25
    2436:	2f 5f       	subi	r18, 0xFF	; 255
    2438:	99 31       	cpi	r25, 0x19	; 25
    243a:	e0 f7       	brcc	.-8      	; 0x2434 <log_getShortTextFromPtr+0x70>
    243c:	20 5d       	subi	r18, 0xD0	; 208
    243e:	21 83       	std	Z+1, r18	; 0x01
    2440:	99 0f       	add	r25, r25
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	02 c0       	rjmp	.+4      	; 0x244a <log_getShortTextFromPtr+0x86>
    2446:	95 50       	subi	r25, 0x05	; 5
    2448:	2f 5f       	subi	r18, 0xFF	; 255
    244a:	95 30       	cpi	r25, 0x05	; 5
    244c:	e0 f7       	brcc	.-8      	; 0x2446 <log_getShortTextFromPtr+0x82>
    244e:	df 01       	movw	r26, r30
    2450:	13 96       	adiw	r26, 0x03	; 3
    2452:	20 5d       	subi	r18, 0xD0	; 208
    2454:	22 83       	std	Z+2, r18	; 0x02
    2456:	9c 81       	ldd	r25, Y+4	; 0x04
    2458:	90 34       	cpi	r25, 0x40	; 64
    245a:	51 f0       	breq	.+20     	; 0x2470 <log_getShortTextFromPtr+0xac>
    245c:	90 38       	cpi	r25, 0x80	; 128
    245e:	19 f0       	breq	.+6      	; 0x2466 <log_getShortTextFromPtr+0xa2>
    2460:	90 32       	cpi	r25, 0x20	; 32
    2462:	81 f4       	brne	.+32     	; 0x2484 <log_getShortTextFromPtr+0xc0>
    2464:	0a c0       	rjmp	.+20     	; 0x247a <log_getShortTextFromPtr+0xb6>
    2466:	fd 01       	movw	r30, r26
    2468:	31 96       	adiw	r30, 0x01	; 1
    246a:	8a e2       	ldi	r24, 0x2A	; 42
    246c:	8c 93       	st	X, r24
    246e:	0e c0       	rjmp	.+28     	; 0x248c <log_getShortTextFromPtr+0xc8>
    2470:	fd 01       	movw	r30, r26
    2472:	31 96       	adiw	r30, 0x01	; 1
    2474:	85 ea       	ldi	r24, 0xA5	; 165
    2476:	8c 93       	st	X, r24
    2478:	09 c0       	rjmp	.+18     	; 0x248c <log_getShortTextFromPtr+0xc8>
    247a:	fd 01       	movw	r30, r26
    247c:	31 96       	adiw	r30, 0x01	; 1
    247e:	80 e2       	ldi	r24, 0x20	; 32
    2480:	8c 93       	st	X, r24
    2482:	04 c0       	rjmp	.+8      	; 0x248c <log_getShortTextFromPtr+0xc8>
    2484:	fd 01       	movw	r30, r26
    2486:	31 96       	adiw	r30, 0x01	; 1
    2488:	8f e3       	ldi	r24, 0x3F	; 63
    248a:	8c 93       	st	X, r24
    248c:	bf 01       	movw	r22, r30
    248e:	6f 5f       	subi	r22, 0xFF	; 255
    2490:	7f 4f       	sbci	r23, 0xFF	; 255
    2492:	8d 81       	ldd	r24, Y+5	; 0x05
    2494:	80 83       	st	Z, r24
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    249c:	bc 01       	movw	r22, r24
    249e:	8f 81       	ldd	r24, Y+7	; 0x07
    24a0:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    24a4:	bc 01       	movw	r22, r24
    24a6:	6f 5f       	subi	r22, 0xFF	; 255
    24a8:	7f 4f       	sbci	r23, 0xFF	; 255
    24aa:	2d e2       	ldi	r18, 0x2D	; 45
    24ac:	fc 01       	movw	r30, r24
    24ae:	20 83       	st	Z, r18
    24b0:	88 85       	ldd	r24, Y+8	; 0x08
    24b2:	99 85       	ldd	r25, Y+9	; 0x09
    24b4:	0e 94 07 2e 	call	0x5c0e	; 0x5c0e <putChar_long>
    24b8:	fc 01       	movw	r30, r24
    24ba:	10 82       	st	Z, r1
    24bc:	1f 3f       	cpi	r17, 0xFF	; 255
    24be:	41 f0       	breq	.+16     	; 0x24d0 <log_getShortTextFromPtr+0x10c>
    24c0:	1c 83       	std	Y+4, r17	; 0x04
    24c2:	60 df       	rcall	.-320    	; 0x2384 <logCheckUnreadErrorLogs>
    24c4:	05 c0       	rjmp	.+10     	; 0x24d0 <log_getShortTextFromPtr+0x10c>
    24c6:	e8 e5       	ldi	r30, 0x58	; 88
    24c8:	f3 e0       	ldi	r31, 0x03	; 3
    24ca:	8d e2       	ldi	r24, 0x2D	; 45
    24cc:	80 83       	st	Z, r24
    24ce:	11 82       	std	Z+1, r1	; 0x01
    24d0:	88 e5       	ldi	r24, 0x58	; 88
    24d2:	93 e0       	ldi	r25, 0x03	; 3
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	1f 91       	pop	r17
    24da:	08 95       	ret

000024dc <log_put>:
    24dc:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <pLogEnd>
    24e0:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <pLogEnd+0x1>
    24e4:	af e3       	ldi	r26, 0x3F	; 63
    24e6:	b2 e0       	ldi	r27, 0x02	; 2
    24e8:	9c 91       	ld	r25, X
    24ea:	90 83       	st	Z, r25
    24ec:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <pLogEnd>
    24f0:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <pLogEnd+0x1>
    24f4:	11 96       	adiw	r26, 0x01	; 1
    24f6:	9c 91       	ld	r25, X
    24f8:	11 97       	sbiw	r26, 0x01	; 1
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <pLogEnd>
    2500:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <pLogEnd+0x1>
    2504:	12 96       	adiw	r26, 0x02	; 2
    2506:	9c 91       	ld	r25, X
    2508:	12 97       	sbiw	r26, 0x02	; 2
    250a:	92 83       	std	Z+2, r25	; 0x02
    250c:	13 96       	adiw	r26, 0x03	; 3
    250e:	9c 91       	ld	r25, X
    2510:	93 83       	std	Z+3, r25	; 0x03
    2512:	25 83       	std	Z+5, r18	; 0x05
    2514:	86 83       	std	Z+6, r24	; 0x06
    2516:	67 83       	std	Z+7, r22	; 0x07
    2518:	51 87       	std	Z+9, r21	; 0x09
    251a:	40 87       	std	Z+8, r20	; 0x08
    251c:	80 e8       	ldi	r24, 0x80	; 128
    251e:	84 83       	std	Z+4, r24	; 0x04
    2520:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <serusb_Active>
    2524:	8f 3f       	cpi	r24, 0xFF	; 255
    2526:	81 f4       	brne	.+32     	; 0x2548 <log_put+0x6c>
    2528:	8c e5       	ldi	r24, 0x5C	; 92
    252a:	91 e0       	ldi	r25, 0x01	; 1
    252c:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2530:	6f ef       	ldi	r22, 0xFF	; 255
    2532:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <pLogEnd>
    2536:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <pLogEnd+0x1>
    253a:	44 df       	rcall	.-376    	; 0x23c4 <log_getShortTextFromPtr>
    253c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    2540:	82 ef       	ldi	r24, 0xF2	; 242
    2542:	9f e0       	ldi	r25, 0x0F	; 15
    2544:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2548:	80 91 10 05 	lds	r24, 0x0510	; 0x800510 <pLogEnd>
    254c:	90 91 11 05 	lds	r25, 0x0511	; 0x800511 <pLogEnd+0x1>
    2550:	0a 96       	adiw	r24, 0x0a	; 10
    2552:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <pLogEnd+0x1>
    2556:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <pLogEnd>
    255a:	86 50       	subi	r24, 0x06	; 6
    255c:	95 40       	sbci	r25, 0x05	; 5
    255e:	39 f0       	breq	.+14     	; 0x256e <log_put+0x92>
    2560:	30 f0       	brcs	.+12     	; 0x256e <log_put+0x92>
    2562:	80 e8       	ldi	r24, 0x80	; 128
    2564:	93 e0       	ldi	r25, 0x03	; 3
    2566:	90 93 11 05 	sts	0x0511, r25	; 0x800511 <pLogEnd+0x1>
    256a:	80 93 10 05 	sts	0x0510, r24	; 0x800510 <pLogEnd>
    256e:	20 91 10 05 	lds	r18, 0x0510	; 0x800510 <pLogEnd>
    2572:	30 91 11 05 	lds	r19, 0x0511	; 0x800511 <pLogEnd+0x1>
    2576:	80 91 12 05 	lds	r24, 0x0512	; 0x800512 <pLogStart>
    257a:	90 91 13 05 	lds	r25, 0x0513	; 0x800513 <pLogStart+0x1>
    257e:	28 17       	cp	r18, r24
    2580:	39 07       	cpc	r19, r25
    2582:	79 f4       	brne	.+30     	; 0x25a2 <log_put+0xc6>
    2584:	0a 96       	adiw	r24, 0x0a	; 10
    2586:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogStart+0x1>
    258a:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogStart>
    258e:	86 50       	subi	r24, 0x06	; 6
    2590:	95 40       	sbci	r25, 0x05	; 5
    2592:	39 f0       	breq	.+14     	; 0x25a2 <log_put+0xc6>
    2594:	30 f0       	brcs	.+12     	; 0x25a2 <log_put+0xc6>
    2596:	80 e8       	ldi	r24, 0x80	; 128
    2598:	93 e0       	ldi	r25, 0x03	; 3
    259a:	90 93 13 05 	sts	0x0513, r25	; 0x800513 <pLogStart+0x1>
    259e:	80 93 12 05 	sts	0x0512, r24	; 0x800512 <pLogStart>
    25a2:	08 95       	ret

000025a4 <log_putError>:
    25a4:	25 e4       	ldi	r18, 0x45	; 69
    25a6:	9a df       	rcall	.-204    	; 0x24dc <log_put>
    25a8:	8f ef       	ldi	r24, 0xFF	; 255
    25aa:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <log_unreadErrors>
    25ae:	08 95       	ret

000025b0 <log_putWarning>:
    25b0:	27 e5       	ldi	r18, 0x57	; 87
    25b2:	94 cf       	rjmp	.-216    	; 0x24dc <log_put>
    25b4:	08 95       	ret

000025b6 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    25b6:	cf 93       	push	r28
    25b8:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    25ba:	78 de       	rcall	.-784    	; 0x22ac <log_getLog>
	if (pLogEntry != NULL){
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	19 f0       	breq	.+6      	; 0x25c6 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    25c0:	6c 2f       	mov	r22, r28
    25c2:	00 df       	rcall	.-512    	; 0x23c4 <log_getShortTextFromPtr>
    25c4:	06 c0       	rjmp	.+12     	; 0x25d2 <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    25c6:	e8 e5       	ldi	r30, 0x58	; 88
    25c8:	f3 e0       	ldi	r31, 0x03	; 3
    25ca:	8d e2       	ldi	r24, 0x2D	; 45
    25cc:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    25ce:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    25d0:	cf 01       	movw	r24, r30
	}
    25d2:	cf 91       	pop	r28
    25d4:	08 95       	ret

000025d6 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    25d6:	2a dd       	rcall	.-1452   	; 0x202c <init_iopins>
	init_log();
    25d8:	3f de       	rcall	.-898    	; 0x2258 <init_log>
    25da:	0e 94 a3 2c 	call	0x5946	; 0x5946 <init_Serial0SerUSB>
	init_Serial0SerUSB();
    25de:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <init_message>
	init_message();
	init_HwTimer();
    25e2:	cd d8       	rcall	.-3686   	; 0x177e <init_HwTimer>
	init_Timers();
    25e4:	b4 d8       	rcall	.-3736   	; 0x174e <init_Timers>
    25e6:	da d8       	rcall	.-3660   	; 0x179c <init_ADC>
	init_ADC();
    25e8:	03 d9       	rcall	.-3578   	; 0x17f0 <init_Pipe>
    25ea:	0e 94 8f 2b 	call	0x571e	; 0x571e <init_Serial1MIDI>
	init_Pipe();
    25ee:	28 d9       	rcall	.-3504   	; 0x1840 <init_PipeModules>
	init_Serial1MIDI();
    25f0:	0e 94 99 27 	call	0x4f32	; 0x4f32 <init_Midi2Manual>
	init_PipeModules();
    25f4:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <init_Manual2Midi>
	init_Midi2Manual();
    25f8:	0e 94 12 26 	call	0x4c24	; 0x4c24 <init_Midi>
	init_Manual2Midi();
    25fc:	0e 94 5d 26 	call	0x4cba	; 0x4cba <init_Registers>
	init_Midi();
	init_Registers();
    2600:	0e 94 56 28 	call	0x50ac	; 0x50ac <init_Manual2Module>
	init_Manual2Module();
    2604:	0e 94 18 24 	call	0x4830	; 0x4830 <init_SoftKeys>
	init_SoftKeys();
    2608:	58 d8       	rcall	.-3920   	; 0x16ba <eeprom_UpdateALL>
    260a:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <menu_TestModulePattern>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
	INIT_MENU
    260e:	a2 dd       	rcall	.-1212   	; 0x2154 <lcd_init>
    2610:	0e 94 70 2d 	call	0x5ae0	; 0x5ae0 <lcd_initCG>


	// BOOT MESSAGE

	lcd_init ();
	lcd_initCG();
    2614:	f4 dd       	rcall	.-1048   	; 0x21fe <lcd_clrscr>
	lcd_clrscr ();
    2616:	83 e4       	ldi	r24, 0x43	; 67
	lcd_goto(LCD_LINE1+3);
    2618:	ed dd       	rcall	.-1062   	; 0x21f4 <lcd_goto>
    261a:	82 e8       	ldi	r24, 0x82	; 130
	lcd_puts_P(prog_name);
    261c:	92 e0       	ldi	r25, 0x02	; 2
    261e:	0c de       	rcall	.-1000   	; 0x2238 <lcd_puts_P>
    2620:	8b e1       	ldi	r24, 0x1B	; 27
	lcd_goto(LCD_LINE2+7);
    2622:	e8 dd       	rcall	.-1072   	; 0x21f4 <lcd_goto>
    2624:	8c e9       	ldi	r24, 0x9C	; 156
    2626:	9f e0       	ldi	r25, 0x0F	; 15
	lcd_puts_P(sw_version);
    2628:	07 de       	rcall	.-1010   	; 0x2238 <lcd_puts_P>
    262a:	78 94       	sei
    262c:	2f ef       	ldi	r18, 0xFF	; 255
    262e:	87 ea       	ldi	r24, 0xA7	; 167
	sei();
    2630:	91 e6       	ldi	r25, 0x61	; 97
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2632:	21 50       	subi	r18, 0x01	; 1
    2634:	80 40       	sbci	r24, 0x00	; 0
    2636:	90 40       	sbci	r25, 0x00	; 0
    2638:	e1 f7       	brne	.-8      	; 0x2632 <main+0x5c>
    263a:	00 c0       	rjmp	.+0      	; 0x263c <main+0x66>
    263c:	00 00       	nop
    263e:	df dd       	rcall	.-1090   	; 0x21fe <lcd_clrscr>
	_delay_ms(2000);
	lcd_clrscr ();
    2640:	43 da       	rcall	.-2938   	; 0x1ac8 <module_StartPowerOn>
    2642:	8f ef       	ldi	r24, 0xFF	; 255
	
	// TURN ON POWER
	
	module_StartPowerOn();
    2644:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <msgPipe_Handling>
	MESSAGE_PIPE_HANDLING_ON
    2648:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <menuNotActive>
    264c:	df ef       	ldi	r29, 0xFF	; 255

	menuNotActive = TRUE;
    264e:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <message_status>
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
    2652:	88 23       	and	r24, r24
    while (1)
    {
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2654:	d9 f1       	breq	.+118    	; 0x26cc <main+0xf6>
    2656:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <message_get>
    265a:	c8 2f       	mov	r28, r24
			uint8_t keyMessage = message_get();
    265c:	86 38       	cpi	r24, 0x86	; 134
    265e:	29 f4       	brne	.+10     	; 0x266a <main+0x94>
    2660:	80 e0       	ldi	r24, 0x00	; 0
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    2662:	0e 94 1e 20 	call	0x403c	; 0x403c <menu_OnEnterMidiPanic>
				menu_OnEnterMidiPanic(0);
    2666:	0e 94 93 29 	call	0x5326	; 0x5326 <midi_AllManualsOff>
    266a:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuNotActive>
				midi_AllManualsOff();
    266e:	8f 3f       	cpi	r24, 0xFF	; 255
			}
			if (menuNotActive == TRUE) {
    2670:	f1 f4       	brne	.+60     	; 0x26ae <main+0xd8>
    2672:	8c 2f       	mov	r24, r28
    2674:	8f 73       	andi	r24, 0x3F	; 63
				// --- MESSAGE 
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2676:	c5 30       	cpi	r28, 0x05	; 5
    2678:	61 f4       	brne	.+24     	; 0x2692 <main+0xbc>
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    267a:	60 e0       	ldi	r22, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	05 d6       	rcall	.+3082   	; 0x328e <menu_Init>
    2684:	0e 94 03 22 	call	0x4406	; 0x4406 <menu_InitLCD>
					menu_InitLCD(); //display menu
    2688:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <menuNotActive>
					menuNotActive = FALSE; // notify that menu is displayed
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	72 da       	rcall	.-2844   	; 0x1b74 <softKey_WantLong>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2690:	1d c0       	rjmp	.+58     	; 0x26cc <main+0xf6>
    2692:	9f ef       	ldi	r25, 0xFF	; 255
    2694:	98 0f       	add	r25, r24
    2696:	94 30       	cpi	r25, 0x04	; 4
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2698:	c8 f4       	brcc	.+50     	; 0x26cc <main+0xf6>
    269a:	0e 94 ef 24 	call	0x49de	; 0x49de <softKey_MessageKey_ToSoftKeyNr>
    269e:	6c 2f       	mov	r22, r28
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    26a0:	0e 94 04 25 	call	0x4a08	; 0x4a08 <softKey_Execute>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    26a4:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <menuNotActive>
    26a8:	0e 94 b0 24 	call	0x4960	; 0x4960 <softKeys_toLCD>
    26ac:	0f c0       	rjmp	.+30     	; 0x26cc <main+0xf6>
					softKeys_toLCD();
    26ae:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <menu_TestModulePattern>
    26b2:	81 11       	cpse	r24, r1
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    26b4:	06 c0       	rjmp	.+12     	; 0x26c2 <main+0xec>
    26b6:	8c 2f       	mov	r24, r28
    26b8:	0e 94 0a 22 	call	0x4414	; 0x4414 <menu_ProcessMessage>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    26bc:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <menuNotActive>
    26c0:	05 c0       	rjmp	.+10     	; 0x26cc <main+0xf6>
    26c2:	8d ef       	ldi	r24, 0xFD	; 253
    26c4:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <menu_TestModuleBitCounter>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    26c8:	0e 94 71 20 	call	0x40e2	; 0x40e2 <menu_ModuleTestExecute>
    26cc:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuNotActive>
					menu_ModuleTestExecute(); // start abort, on next timer finish
				}
			}
		}
		if (menuNotActive == TRUE) {
    26d0:	8f 3f       	cpi	r24, 0xFF	; 255
    26d2:	51 f4       	brne	.+20     	; 0x26e8 <main+0x112>
    26d4:	df 3f       	cpi	r29, 0xFF	; 255
    26d6:	49 f4       	brne	.+18     	; 0x26ea <main+0x114>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    26d8:	0e 94 9d 21 	call	0x433a	; 0x433a <menu_ClearAllDisp>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    26dc:	0e 94 b0 24 	call	0x4960	; 0x4960 <softKeys_toLCD>
				softKeys_toLCD();
    26e0:	8f ef       	ldi	r24, 0xFF	; 255
    26e2:	48 da       	rcall	.-2928   	; 0x1b74 <softKey_WantLong>
				softKey_WantLong(TRUE);
    26e4:	d0 e0       	ldi	r29, 0x00	; 0
    26e6:	01 c0       	rjmp	.+2      	; 0x26ea <main+0x114>
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    26e8:	df ef       	ldi	r29, 0xFF	; 255
    26ea:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xe>
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    26ee:	81 11       	cpse	r24, r1
    26f0:	09 c0       	rjmp	.+18     	; 0x2704 <main+0x12e>
    26f2:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    26f6:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <menu_ClearDataDisp>
				menu_ClearDataDisp();
    26fa:	8c 2f       	mov	r24, r28
    26fc:	7b dd       	rcall	.-1290   	; 0x21f4 <lcd_goto>
				lcd_goto(saveCursor);
    26fe:	8f ef       	ldi	r24, 0xFF	; 255
    2700:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xe>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2704:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xc>
    2708:	81 11       	cpse	r24, r1
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    270a:	0a c0       	rjmp	.+20     	; 0x2720 <main+0x14a>
    270c:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <menu_TestModulePattern>
			if (menu_TestModulePattern != 0){
    2710:	88 23       	and	r24, r24
    2712:	19 f0       	breq	.+6      	; 0x271a <main+0x144>
    2714:	0e 94 71 20 	call	0x40e2	; 0x40e2 <menu_ModuleTestExecute>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2718:	03 c0       	rjmp	.+6      	; 0x2720 <main+0x14a>
    271a:	8f ef       	ldi	r24, 0xFF	; 255
    271c:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2720:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <swTimer+0x2>
			}
		}
		
		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    2724:	81 11       	cpse	r24, r1
    2726:	1a c0       	rjmp	.+52     	; 0x275c <main+0x186>
    2728:	df d9       	rcall	.-3138   	; 0x1ae8 <module_PowerControl>
			module_PowerControl();
    272a:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <menu_showPowerState>
			menu_showPowerState();
    272e:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <menuNotActive>
			if (menuNotActive == TRUE) {
    2732:	8f 3f       	cpi	r24, 0xFF	; 255
    2734:	99 f4       	brne	.+38     	; 0x275c <main+0x186>
    2736:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    273a:	84 e1       	ldi	r24, 0x14	; 20
				lcd_goto(LCD_LINE2);
    273c:	5b dd       	rcall	.-1354   	; 0x21f4 <lcd_goto>
    273e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2742:	81 30       	cpi	r24, 0x01	; 1
    2744:	21 f4       	brne	.+8      	; 0x274e <main+0x178>
    2746:	80 e7       	ldi	r24, 0x70	; 112
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2748:	92 e0       	ldi	r25, 0x02	; 2
    274a:	76 dd       	rcall	.-1300   	; 0x2238 <lcd_puts_P>
    274c:	05 c0       	rjmp	.+10     	; 0x2758 <main+0x182>
    274e:	82 31       	cpi	r24, 0x12	; 18
    2750:	19 f4       	brne	.+6      	; 0x2758 <main+0x182>
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2752:	84 e1       	ldi	r24, 0x14	; 20
					lcd_blank(LCD_LINELEN);
    2754:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <lcd_blank>
    2758:	8c 2f       	mov	r24, r28
				}
				lcd_goto(saveCursor);
    275a:	4c dd       	rcall	.-1384   	; 0x21f4 <lcd_goto>
    275c:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <midi_CheckTxActiveSense>
			}
		}
		
		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2760:	0e 94 9d 29 	call	0x533a	; 0x533a <midi_CheckRxActiveSense>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense
    2764:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
		
		// ------------------------ TOP STATUS LINE --------------------------
		uint8_t oldcursor = lcd_cursorPos;
    2768:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
		if (midiLastInNote != MIDI_NOTE_NONE){
    276c:	8f 3f       	cpi	r24, 0xFF	; 255
    276e:	91 f1       	breq	.+100    	; 0x27d4 <main+0x1fe>
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	40 dd       	rcall	.-1408   	; 0x21f4 <lcd_goto>
    2774:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
			if (midiLastInManual == MANUAL_NONE) {
    2778:	8f 3f       	cpi	r24, 0xFF	; 255
    277a:	69 f4       	brne	.+26     	; 0x2796 <main+0x1c0>
				// there was no manual assigned to midi in note
				// cc?nnn
				lcd_ChannelOut(midiLastInChannel);
    277c:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInChannel>
    2780:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <lcd_ChannelOut>
				lcd_putc('?');
    2784:	8f e3       	ldi	r24, 0x3F	; 63
    2786:	40 dd       	rcall	.-1408   	; 0x2208 <lcd_putc>
				lcd_noteOut(midiLastInNote);
    2788:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
    278c:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <lcd_noteOut>
				lcd_putc(' ');
    2790:	80 e2       	ldi	r24, 0x20	; 32
    2792:	3a dd       	rcall	.-1420   	; 0x2208 <lcd_putc>
    2794:	0c c0       	rjmp	.+24     	; 0x27ae <main+0x1d8>
    2796:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInNote>
			} else {
				// midi input to assigned manual
				// nnn>m
				lcd_noteOut(midiLastInNote);
    279a:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <lcd_noteOut>
    279e:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    27a0:	33 dd       	rcall	.-1434   	; 0x2208 <lcd_putc>
    27a2:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
				lcd_ManualOutDec(midiLastInManual);
    27a6:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <lcd_ManualOutDec>
    27aa:	80 e2       	ldi	r24, 0x20	; 32
    27ac:	2d dd       	rcall	.-1446   	; 0x2208 <lcd_putc>
				lcd_putc(' ');
    27ae:	8c 2f       	mov	r24, r28
    27b0:	21 dd       	rcall	.-1470   	; 0x21f4 <lcd_goto>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
			}
			lcd_goto(oldcursor);
    27b4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <midiLastInNote>
    27b8:	9f b7       	in	r25, 0x3f	; 63
			midiLastInNote = MIDI_NOTE_NONE;
    27ba:	f8 94       	cli
    27bc:	81 e0       	ldi	r24, 0x01	; 1
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <main+0x1f6>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    27c0:	ed e2       	ldi	r30, 0x2D	; 45
    27c2:	f2 e0       	ldi	r31, 0x02	; 2
    27c4:	82 e3       	ldi	r24, 0x32	; 50
    27c6:	80 87       	std	Z+8, r24	; 0x08
    27c8:	11 86       	std	Z+9, r1	; 0x09
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	81 11       	cpse	r24, r1
    27ce:	f8 cf       	rjmp	.-16     	; 0x27c0 <main+0x1ea>
    27d0:	9f bf       	out	0x3f, r25	; 63
    27d2:	12 c0       	rjmp	.+36     	; 0x27f8 <main+0x222>
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    27d4:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x8>
		} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) || (time_UpTimeUpdated == TRUE)) {
    27d8:	88 23       	and	r24, r24
    27da:	21 f0       	breq	.+8      	; 0x27e4 <main+0x20e>
    27dc:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <time_UpTimeUpdated>
    27e0:	8f 3f       	cpi	r24, 0xFF	; 255
    27e2:	51 f4       	brne	.+20     	; 0x27f8 <main+0x222>
			// timer for showing note has elapsed
			// or about every second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	06 dd       	rcall	.-1524   	; 0x21f4 <lcd_goto>
			lcd_blank(6);
    27e8:	86 e0       	ldi	r24, 0x06	; 6
    27ea:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <lcd_blank>
			lcd_goto(oldcursor);
    27ee:	8c 2f       	mov	r24, r28
    27f0:	01 dd       	rcall	.-1534   	; 0x21f4 <lcd_goto>
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    27f4:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <swTimer+0x8>
    27f8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutNote>
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
    27fc:	8f 3f       	cpi	r24, 0xFF	; 255
    27fe:	f9 f0       	breq	.+62     	; 0x283e <main+0x268>
    2800:	8f e0       	ldi	r24, 0x0F	; 15
			// there is a midi in note to be displayed in status
			// m>nnn
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2802:	f8 dc       	rcall	.-1552   	; 0x21f4 <lcd_goto>
    2804:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastOutManual>
			lcd_ManualOutDec(midiLastOutManual);
    2808:	0e 94 03 2f 	call	0x5e06	; 0x5e06 <lcd_ManualOutDec>
    280c:	8e e7       	ldi	r24, 0x7E	; 126
    280e:	fc dc       	rcall	.-1544   	; 0x2208 <lcd_putc>
			lcd_putc(MENU_MIDI_IO_SIGN);
    2810:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutNote>
    2814:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <lcd_noteOut>
			lcd_noteOut(midiLastOutNote);
    2818:	8c 2f       	mov	r24, r28
    281a:	ec dc       	rcall	.-1576   	; 0x21f4 <lcd_goto>
			lcd_goto(oldcursor);
    281c:	8f ef       	ldi	r24, 0xFF	; 255
    281e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <midiLastOutNote>
			midiLastOutNote = MIDI_NOTE_NONE;
    2822:	9f b7       	in	r25, 0x3f	; 63
    2824:	f8 94       	cli
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2826:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2828:	06 c0       	rjmp	.+12     	; 0x2836 <main+0x260>
    282a:	ed e2       	ldi	r30, 0x2D	; 45
    282c:	f2 e0       	ldi	r31, 0x02	; 2
    282e:	82 e3       	ldi	r24, 0x32	; 50
    2830:	82 87       	std	Z+10, r24	; 0x0a
    2832:	13 86       	std	Z+11, r1	; 0x0b
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	81 11       	cpse	r24, r1
    2838:	f8 cf       	rjmp	.-16     	; 0x282a <main+0x254>
    283a:	9f bf       	out	0x3f, r25	; 63
    283c:	12 c0       	rjmp	.+36     	; 0x2862 <main+0x28c>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    283e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0xa>
		} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP) || (time_UpTimeUpdated == TRUE)) {
    2842:	88 23       	and	r24, r24
    2844:	21 f0       	breq	.+8      	; 0x284e <main+0x278>
    2846:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <time_UpTimeUpdated>
    284a:	8f 3f       	cpi	r24, 0xFF	; 255
    284c:	51 f4       	brne	.+20     	; 0x2862 <main+0x28c>
    284e:	8f e0       	ldi	r24, 0x0F	; 15
    2850:	d1 dc       	rcall	.-1630   	; 0x21f4 <lcd_goto>
			// timer for showing note has elapsed
			// or about every second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2852:	85 e0       	ldi	r24, 0x05	; 5
    2854:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <lcd_blank>
			lcd_blank(5);
    2858:	8c 2f       	mov	r24, r28
    285a:	cc dc       	rcall	.-1640   	; 0x21f4 <lcd_goto>
    285c:	8f ef       	ldi	r24, 0xFF	; 255
			lcd_goto(oldcursor);
    285e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0xa>
    2862:	80 91 55 03 	lds	r24, 0x0355	; 0x800355 <time_UpTimeUpdated>
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2866:	8f 3f       	cpi	r24, 0xFF	; 255
    2868:	09 f0       	breq	.+2      	; 0x286c <main+0x296>
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    286a:	5c c0       	rjmp	.+184    	; 0x2924 <main+0x34e>
    286c:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <time_UpTimeUpdated>
    2870:	f0 90 56 03 	lds	r15, 0x0356	; 0x800356 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2874:	c0 91 93 0c 	lds	r28, 0x0C93	; 0x800c93 <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2878:	cf 3f       	cpi	r28, 0xFF	; 255
    287a:	11 f4       	brne	.+4      	; 0x2880 <main+0x2aa>
			uint8_t oldBlink = lcd_cursorIsOn;
    287c:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <lcd_cursoroff>
			if (oldBlink == TRUE) {
    2880:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x3>
				lcd_cursoroff();
    2884:	88 23       	and	r24, r24
			}
			char separator;
			if (*pTime == 0) {
    2886:	59 f0       	breq	.+22     	; 0x289e <main+0x2c8>
    2888:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <time_Uptime+0x1>
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    288c:	80 fd       	sbrc	r24, 0
    288e:	0e c0       	rjmp	.+28     	; 0x28ac <main+0x2d6>
    2890:	0f 2e       	mov	r0, r31
    2892:	fa e3       	ldi	r31, 0x3A	; 58
				// when displaying hr:min blink ":"
				separator = ':';
    2894:	ef 2e       	mov	r14, r31
    2896:	f0 2d       	mov	r31, r0
    2898:	02 e4       	ldi	r16, 0x42	; 66
    289a:	12 e0       	ldi	r17, 0x02	; 2

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    289c:	0c c0       	rjmp	.+24     	; 0x28b6 <main+0x2e0>
    289e:	0f 2e       	mov	r0, r31
    28a0:	fa e3       	ldi	r31, 0x3A	; 58
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    28a2:	ef 2e       	mov	r14, r31
    28a4:	f0 2d       	mov	r31, r0
    28a6:	01 e4       	ldi	r16, 0x41	; 65
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    28a8:	12 e0       	ldi	r17, 0x02	; 2
    28aa:	05 c0       	rjmp	.+10     	; 0x28b6 <main+0x2e0>
    28ac:	68 94       	set
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    28ae:	ee 24       	eor	r14, r14
    28b0:	e5 f8       	bld	r14, 5
    28b2:	02 e4       	ldi	r16, 0x42	; 66

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    28b4:	12 e0       	ldi	r17, 0x02	; 2
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    28b6:	87 e0       	ldi	r24, 0x07	; 7
    28b8:	9d dc       	rcall	.-1734   	; 0x21f4 <lcd_goto>
    28ba:	f8 01       	movw	r30, r16
			lcd_dec2out(*(pTime--));
    28bc:	80 81       	ld	r24, Z
    28be:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <lcd_dec2out>
    28c2:	8e 2d       	mov	r24, r14
			lcd_putc(separator);
    28c4:	a1 dc       	rcall	.-1726   	; 0x2208 <lcd_putc>
    28c6:	f8 01       	movw	r30, r16
			lcd_dec2out(*pTime);
    28c8:	31 97       	sbiw	r30, 0x01	; 1
    28ca:	80 81       	ld	r24, Z
    28cc:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <lcd_dec2out>
    28d0:	40 91 8a 0b 	lds	r20, 0x0B8A	; 0x800b8a <midiRxOvflCount>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
			if (ovflCount > 0){
    28d4:	44 23       	and	r20, r20
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    28d6:	31 f0       	breq	.+12     	; 0x28e4 <main+0x30e>
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	62 de       	rcall	.-828    	; 0x25a4 <log_putError>
				midiRxOvflCount = 0;
    28e0:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <midiRxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    28e4:	40 91 8f 0c 	lds	r20, 0x0C8F	; 0x800c8f <midiTxOvflCount>
			if (ovflCount > 0){
    28e8:	44 23       	and	r20, r20
    28ea:	31 f0       	breq	.+12     	; 0x28f8 <main+0x322>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    28ec:	50 e0       	ldi	r21, 0x00	; 0
    28ee:	61 e0       	ldi	r22, 0x01	; 1
    28f0:	83 e0       	ldi	r24, 0x03	; 3
    28f2:	58 de       	rcall	.-848    	; 0x25a4 <log_putError>
				midiTxOvflCount = 0;
    28f4:	10 92 8f 0c 	sts	0x0C8F, r1	; 0x800c8f <midiTxOvflCount>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    28f8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
    28fc:	84 ff       	sbrs	r24, 4
    28fe:	02 c0       	rjmp	.+4      	; 0x2904 <main+0x32e>
    2900:	80 e2       	ldi	r24, 0x20	; 32
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <main+0x330>
    2904:	89 e0       	ldi	r24, 0x09	; 9
    2906:	80 dc       	rcall	.-1792   	; 0x2208 <lcd_putc>
    2908:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <log_unreadErrors>
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    290c:	8f 3f       	cpi	r24, 0xFF	; 255
    290e:	11 f4       	brne	.+4      	; 0x2914 <main+0x33e>
    2910:	85 e4       	ldi	r24, 0x45	; 69
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <main+0x340>
    2914:	80 e2       	ldi	r24, 0x20	; 32
    2916:	78 dc       	rcall	.-1808   	; 0x2208 <lcd_putc>
    2918:	8f 2d       	mov	r24, r15
    291a:	6c dc       	rcall	.-1832   	; 0x21f4 <lcd_goto>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    291c:	cf 3f       	cpi	r28, 0xFF	; 255
    291e:	11 f4       	brne	.+4      	; 0x2924 <main+0x34e>
    2920:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <lcd_cursosblink>
			if (oldBlink == TRUE) {
    2924:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <msgPipeOverflow>
				lcd_cursosblink();
    2928:	8f 3f       	cpi	r24, 0xFF	; 255
			}
		}
		
		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    292a:	39 f4       	brne	.+14     	; 0x293a <main+0x364>
    292c:	10 92 98 07 	sts	0x0798, r1	; 0x800798 <msgPipeOverflow>
    2930:	40 e0       	ldi	r20, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    2936:	84 e0       	ldi	r24, 0x04	; 4
    2938:	35 de       	rcall	.-918    	; 0x25a4 <log_putError>
    293a:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <midiRxInIndex>
    293e:	80 91 8e 0c 	lds	r24, 0x0C8E	; 0x800c8e <midiRxOutIndex>
		}

		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    2942:	98 17       	cp	r25, r24
    2944:	21 f0       	breq	.+8      	; 0x294e <main+0x378>
    2946:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <serial1MIDIReadRx>
    294a:	0e 94 03 2a 	call	0x5406	; 0x5406 <midiIn_Process>
			midiIn_Process(serial1MIDIReadRx());
    294e:	0e 94 08 26 	call	0x4c10	; 0x4c10 <pipeMsgStatus>
    2952:	8f 3f       	cpi	r24, 0xFF	; 255
    2954:	09 f0       	breq	.+2      	; 0x2958 <main+0x382>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    2956:	7b ce       	rjmp	.-778    	; 0x264e <main+0x78>
    2958:	0e 94 f3 25 	call	0x4be6	; 0x4be6 <pipeMsgGet>
    295c:	0e 94 94 2a 	call	0x5528	; 0x5528 <midiKeyPress_Process>
			midiKeyPress_Process(pipeMsgGet());
    2960:	76 ce       	rjmp	.-788    	; 0x264e <main+0x78>

00002962 <menu_enterWriteModule>:
    2962:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <menuModVal>
    2966:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <menuModVal+0x1>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
} 
    296a:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <menuModVal+0x2>
    296e:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <menuModVal+0x3>
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    297a:	02 c0       	rjmp	.+4      	; 0x2980 <menu_enterWriteModule+0x1e>
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	0a 94       	dec	r0
    2982:	e2 f7       	brpl	.-8      	; 0x297c <menu_enterWriteModule+0x1a>
    2984:	48 2f       	mov	r20, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	ef e3       	ldi	r30, 0x3F	; 63
    298a:	f3 e0       	ldi	r31, 0x03	; 3
    298c:	22 c0       	rjmp	.+68     	; 0x29d2 <menu_enterWriteModule+0x70>
    298e:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <menuModVal>
    2992:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <menuModVal+0x1>
    2996:	a0 91 53 05 	lds	r26, 0x0553	; 0x800553 <menuModVal+0x2>
    299a:	b0 91 54 05 	lds	r27, 0x0554	; 0x800554 <menuModVal+0x3>
    299e:	88 0f       	add	r24, r24
    29a0:	99 1f       	adc	r25, r25
    29a2:	aa 1f       	adc	r26, r26
    29a4:	bb 1f       	adc	r27, r27
    29a6:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <menuModVal>
    29aa:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <menuModVal+0x1>
    29ae:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <menuModVal+0x2>
    29b2:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <menuModVal+0x3>
    29b6:	21 81       	ldd	r18, Z+1	; 0x01
    29b8:	24 23       	and	r18, r20
    29ba:	49 f0       	breq	.+18     	; 0x29ce <menu_enterWriteModule+0x6c>
    29bc:	81 60       	ori	r24, 0x01	; 1
    29be:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <menuModVal>
    29c2:	90 93 52 05 	sts	0x0552, r25	; 0x800552 <menuModVal+0x1>
    29c6:	a0 93 53 05 	sts	0x0553, r26	; 0x800553 <menuModVal+0x2>
    29ca:	b0 93 54 05 	sts	0x0554, r27	; 0x800554 <menuModVal+0x3>
    29ce:	38 97       	sbiw	r30, 0x08	; 8
    29d0:	3f 5f       	subi	r19, 0xFF	; 255
    29d2:	30 32       	cpi	r19, 0x20	; 32
    29d4:	e0 f2       	brcs	.-72     	; 0x298e <menu_enterWriteModule+0x2c>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	08 95       	ret

000029da <menu_exitWriteModule>:
    29da:	40 91 51 05 	lds	r20, 0x0551	; 0x800551 <menuModVal>
    29de:	50 91 52 05 	lds	r21, 0x0552	; 0x800552 <menuModVal+0x1>
    29e2:	60 91 53 05 	lds	r22, 0x0553	; 0x800553 <menuModVal+0x2>
    29e6:	70 91 54 05 	lds	r23, 0x0554	; 0x800554 <menuModVal+0x3>
    29ea:	85 30       	cpi	r24, 0x05	; 5
    29ec:	09 f5       	brne	.+66     	; 0x2a30 <menu_exitWriteModule+0x56>
    29ee:	a1 e0       	ldi	r26, 0x01	; 1
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    29f6:	02 c0       	rjmp	.+4      	; 0x29fc <menu_exitWriteModule+0x22>
    29f8:	aa 0f       	add	r26, r26
    29fa:	bb 1f       	adc	r27, r27
    29fc:	0a 94       	dec	r0
    29fe:	e2 f7       	brpl	.-8      	; 0x29f8 <menu_exitWriteModule+0x1e>
    2a00:	3a 2f       	mov	r19, r26
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	ef e3       	ldi	r30, 0x3F	; 63
    2a06:	f3 e0       	ldi	r31, 0x03	; 3
    2a08:	11 c0       	rjmp	.+34     	; 0x2a2c <menu_exitWriteModule+0x52>
    2a0a:	77 23       	and	r23, r23
    2a0c:	24 f4       	brge	.+8      	; 0x2a16 <menu_exitWriteModule+0x3c>
    2a0e:	81 81       	ldd	r24, Z+1	; 0x01
    2a10:	83 2b       	or	r24, r19
    2a12:	81 83       	std	Z+1, r24	; 0x01
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <menu_exitWriteModule+0x46>
    2a16:	21 81       	ldd	r18, Z+1	; 0x01
    2a18:	8a 2f       	mov	r24, r26
    2a1a:	80 95       	com	r24
    2a1c:	82 23       	and	r24, r18
    2a1e:	81 83       	std	Z+1, r24	; 0x01
    2a20:	44 0f       	add	r20, r20
    2a22:	55 1f       	adc	r21, r21
    2a24:	66 1f       	adc	r22, r22
    2a26:	77 1f       	adc	r23, r23
    2a28:	38 97       	sbiw	r30, 0x08	; 8
    2a2a:	9f 5f       	subi	r25, 0xFF	; 255
    2a2c:	90 32       	cpi	r25, 0x20	; 32
    2a2e:	68 f3       	brcs	.-38     	; 0x2a0a <menu_exitWriteModule+0x30>
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	08 95       	ret

00002a34 <menuOnEnterModSel>:
    2a34:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2a38:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2a3c:	3e 96       	adiw	r30, 0x0e	; 14
    2a3e:	85 91       	lpm	r24, Z+
    2a40:	95 91       	lpm	r25, Z+
    2a42:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <menuVmodule>
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	08 95       	ret

00002a4a <menuOnEnterMidiInCh>:
    2a4a:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2a4e:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2a52:	3e 96       	adiw	r30, 0x0e	; 14
    2a54:	85 91       	lpm	r24, Z+
    2a56:	95 91       	lpm	r25, Z+
    2a58:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <menuVmidiChan>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	08 95       	ret

00002a60 <menuOnEnterMidiInSec>:
    2a60:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2a64:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2a68:	3e 96       	adiw	r30, 0x0e	; 14
    2a6a:	25 91       	lpm	r18, Z+
    2a6c:	35 91       	lpm	r19, Z+
    2a6e:	20 93 5b 05 	sts	0x055B, r18	; 0x80055b <menuVsection>
    2a72:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <menuVmidiChan>
    2a76:	8f 70       	andi	r24, 0x0F	; 15
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	23 70       	andi	r18, 0x03	; 3
    2a7c:	88 0f       	add	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	88 0f       	add	r24, r24
    2a82:	99 1f       	adc	r25, r25
    2a84:	82 0f       	add	r24, r18
    2a86:	91 1d       	adc	r25, r1
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <DataAdressOffset+0x1>
    2a94:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <DataAdressOffset>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	08 95       	ret

00002a9c <menuOnEnterModManual>:
    2a9c:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2aa0:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2aa4:	3e 96       	adiw	r30, 0x0e	; 14
    2aa6:	85 91       	lpm	r24, Z+
    2aa8:	95 91       	lpm	r25, Z+
    2aaa:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <menuVmanual>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	08 95       	ret

00002ab2 <menuOnEnterModSec>:
    2ab2:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2ab6:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2aba:	3e 96       	adiw	r30, 0x0e	; 14
    2abc:	85 91       	lpm	r24, Z+
    2abe:	95 91       	lpm	r25, Z+
    2ac0:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <menuVsection>
    2ac4:	20 91 1c 05 	lds	r18, 0x051C	; 0x80051c <menuVmanual>
    2ac8:	2f 70       	andi	r18, 0x0F	; 15
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	83 70       	andi	r24, 0x03	; 3
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	44 0f       	add	r20, r20
    2ad4:	55 1f       	adc	r21, r21
    2ad6:	24 0f       	add	r18, r20
    2ad8:	35 1f       	adc	r19, r21
    2ada:	22 0f       	add	r18, r18
    2adc:	33 1f       	adc	r19, r19
    2ade:	22 0f       	add	r18, r18
    2ae0:	33 1f       	adc	r19, r19
    2ae2:	ac 01       	movw	r20, r24
    2ae4:	44 0f       	add	r20, r20
    2ae6:	55 1f       	adc	r21, r21
    2ae8:	84 0f       	add	r24, r20
    2aea:	95 1f       	adc	r25, r21
    2aec:	82 0f       	add	r24, r18
    2aee:	93 1f       	adc	r25, r19
    2af0:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <DataAdressOffset+0x1>
    2af4:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <DataAdressOffset>
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	08 95       	ret

00002afc <menuOnEnterModSecReg>:
    2afc:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2b00:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2b04:	3e 96       	adiw	r30, 0x0e	; 14
    2b06:	85 91       	lpm	r24, Z+
    2b08:	95 91       	lpm	r25, Z+
    2b0a:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <menuVsection>
    2b0e:	87 70       	andi	r24, 0x07	; 7
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	9c 01       	movw	r18, r24
    2b14:	22 0f       	add	r18, r18
    2b16:	33 1f       	adc	r19, r19
    2b18:	82 0f       	add	r24, r18
    2b1a:	93 1f       	adc	r25, r19
    2b1c:	90 93 56 05 	sts	0x0556, r25	; 0x800556 <DataAdressOffset+0x1>
    2b20:	80 93 55 05 	sts	0x0555, r24	; 0x800555 <DataAdressOffset>
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	08 95       	ret

00002b28 <menuOnEnterKey>:
    2b28:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2b2c:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2b30:	3e 96       	adiw	r30, 0x0e	; 14
    2b32:	85 91       	lpm	r24, Z+
    2b34:	95 91       	lpm	r25, Z+
    2b36:	84 30       	cpi	r24, 0x04	; 4
    2b38:	60 f4       	brcc	.+24     	; 0x2b52 <menuOnEnterKey+0x2a>
    2b3a:	fc 01       	movw	r30, r24
    2b3c:	ff 27       	eor	r31, r31
    2b3e:	ee 0f       	add	r30, r30
    2b40:	ff 1f       	adc	r31, r31
    2b42:	e2 5a       	subi	r30, 0xA2	; 162
    2b44:	fa 4f       	sbci	r31, 0xFA	; 250
    2b46:	80 81       	ld	r24, Z
    2b48:	91 81       	ldd	r25, Z+1	; 0x01
    2b4a:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <menuVMenuSoftKey+0x1>
    2b4e:	80 93 71 05 	sts	0x0571, r24	; 0x800571 <menuVMenuSoftKey>
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	08 95       	ret

00002b56 <menuOnExitCoupler>:
    2b56:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2b5a:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2b5e:	3e 96       	adiw	r30, 0x0e	; 14
    2b60:	85 91       	lpm	r24, Z+
    2b62:	95 91       	lpm	r25, Z+
    2b64:	83 5b       	subi	r24, 0xB3	; 179
    2b66:	97 40       	sbci	r25, 0x07	; 7
    2b68:	fc 01       	movw	r30, r24
    2b6a:	ff 27       	eor	r31, r31
    2b6c:	ed 54       	subi	r30, 0x4D	; 77
    2b6e:	f8 4f       	sbci	r31, 0xF8	; 248
    2b70:	20 81       	ld	r18, Z
    2b72:	21 11       	cpse	r18, r1
    2b74:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <set_Coupler>
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	08 95       	ret

00002b7c <softKeyK1A>:
    2b7c:	88 23       	and	r24, r24
    2b7e:	24 f4       	brge	.+8      	; 0x2b88 <softKeyK1A+0xc>
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <register_toProgram>
    2b86:	05 c0       	rjmp	.+10     	; 0x2b92 <softKeyK1A+0x16>
    2b88:	88 23       	and	r24, r24
    2b8a:	19 f0       	breq	.+6      	; 0x2b92 <softKeyK1A+0x16>
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <program_toRegister>
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	08 95       	ret

00002b96 <softKeyK2A>:
    2b96:	88 23       	and	r24, r24
    2b98:	24 f4       	brge	.+8      	; 0x2ba2 <softKeyK2A+0xc>
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <register_toProgram>
    2ba0:	05 c0       	rjmp	.+10     	; 0x2bac <softKeyK2A+0x16>
    2ba2:	88 23       	and	r24, r24
    2ba4:	19 f0       	breq	.+6      	; 0x2bac <softKeyK2A+0x16>
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <program_toRegister>
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	08 95       	ret

00002bb0 <softKeyK3A>:
    2bb0:	88 23       	and	r24, r24
    2bb2:	24 f4       	brge	.+8      	; 0x2bbc <softKeyK3A+0xc>
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <register_toProgram>
    2bba:	05 c0       	rjmp	.+10     	; 0x2bc6 <softKeyK3A+0x16>
    2bbc:	88 23       	and	r24, r24
    2bbe:	19 f0       	breq	.+6      	; 0x2bc6 <softKeyK3A+0x16>
    2bc0:	82 e0       	ldi	r24, 0x02	; 2
    2bc2:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <program_toRegister>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	08 95       	ret

00002bca <softKeyK4A>:
    2bca:	88 23       	and	r24, r24
    2bcc:	24 f4       	brge	.+8      	; 0x2bd6 <softKeyK4A+0xc>
    2bce:	83 e0       	ldi	r24, 0x03	; 3
    2bd0:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <register_toProgram>
    2bd4:	05 c0       	rjmp	.+10     	; 0x2be0 <softKeyK4A+0x16>
    2bd6:	88 23       	and	r24, r24
    2bd8:	19 f0       	breq	.+6      	; 0x2be0 <softKeyK4A+0x16>
    2bda:	83 e0       	ldi	r24, 0x03	; 3
    2bdc:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <program_toRegister>
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	08 95       	ret

00002be4 <menuOnExitLoadProgran>:
    2be4:	86 30       	cpi	r24, 0x06	; 6
    2be6:	31 f0       	breq	.+12     	; 0x2bf4 <menuOnExitLoadProgran+0x10>
    2be8:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <menuVKombination>
    2bec:	80 34       	cpi	r24, 0x40	; 64
    2bee:	10 f4       	brcc	.+4      	; 0x2bf4 <menuOnExitLoadProgran+0x10>
    2bf0:	0e 94 5c 27 	call	0x4eb8	; 0x4eb8 <program_toRegister>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	08 95       	ret

00002bf8 <menuOnExitSaveProgram>:
    2bf8:	86 30       	cpi	r24, 0x06	; 6
    2bfa:	41 f0       	breq	.+16     	; 0x2c0c <menuOnExitSaveProgram+0x14>
    2bfc:	80 91 4c 05 	lds	r24, 0x054C	; 0x80054c <menuVKombination>
    2c00:	80 34       	cpi	r24, 0x40	; 64
    2c02:	20 f4       	brcc	.+8      	; 0x2c0c <menuOnExitSaveProgram+0x14>
    2c04:	0e 94 8c 27 	call	0x4f18	; 0x4f18 <register_toProgram>
    2c08:	0e 94 19 0b 	call	0x1632	; 0x1632 <eeprom_UpdateProg>
    2c0c:	80 e0       	ldi	r24, 0x00	; 0
    2c0e:	08 95       	ret

00002c10 <menuOnExitKeys>:
    2c10:	0e 94 3b 0b 	call	0x1676	; 0x1676 <eeprom_UpdateSoftkeys>
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	08 95       	ret

00002c18 <menu_readModule>:
    2c18:	cf 92       	push	r12
    2c1a:	df 92       	push	r13
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <menu_readModule+0x16>
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	0a 94       	dec	r0
    2c30:	e2 f7       	brpl	.-8      	; 0x2c2a <menu_readModule+0x12>
    2c32:	28 2f       	mov	r18, r24
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	ef e3       	ldi	r30, 0x3F	; 63
    2c38:	f3 e0       	ldi	r31, 0x03	; 3
    2c3a:	c1 2c       	mov	r12, r1
    2c3c:	d1 2c       	mov	r13, r1
    2c3e:	76 01       	movw	r14, r12
    2c40:	0b c0       	rjmp	.+22     	; 0x2c58 <menu_readModule+0x40>
    2c42:	cc 0c       	add	r12, r12
    2c44:	dd 1c       	adc	r13, r13
    2c46:	ee 1c       	adc	r14, r14
    2c48:	ff 1c       	adc	r15, r15
    2c4a:	86 81       	ldd	r24, Z+6	; 0x06
    2c4c:	82 23       	and	r24, r18
    2c4e:	11 f0       	breq	.+4      	; 0x2c54 <menu_readModule+0x3c>
    2c50:	68 94       	set
    2c52:	c0 f8       	bld	r12, 0
    2c54:	38 97       	sbiw	r30, 0x08	; 8
    2c56:	9f 5f       	subi	r25, 0xFF	; 255
    2c58:	90 32       	cpi	r25, 0x20	; 32
    2c5a:	98 f3       	brcs	.-26     	; 0x2c42 <menu_readModule+0x2a>
    2c5c:	8e e1       	ldi	r24, 0x1E	; 30
    2c5e:	ca da       	rcall	.-2668   	; 0x21f4 <lcd_goto>
    2c60:	c0 92 95 0c 	sts	0x0C95, r12	; 0x800c95 <editLong>
    2c64:	d0 92 96 0c 	sts	0x0C96, r13	; 0x800c96 <editLong+0x1>
    2c68:	e0 92 97 0c 	sts	0x0C97, r14	; 0x800c97 <editLong+0x2>
    2c6c:	f0 92 98 0c 	sts	0x0C98, r15	; 0x800c98 <editLong+0x3>
    2c70:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <lcd_longout>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	ff 90       	pop	r15
    2c78:	ef 90       	pop	r14
    2c7a:	df 90       	pop	r13
    2c7c:	cf 90       	pop	r12
    2c7e:	08 95       	ret

00002c80 <menu_testModule>:
    2c80:	8e e1       	ldi	r24, 0x1E	; 30
    2c82:	b8 da       	rcall	.-2704   	; 0x21f4 <lcd_goto>
    2c84:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <menuVmodule>
    2c88:	0e 94 df 0c 	call	0x19be	; 0x19be <test_PipeModule>
    2c8c:	60 93 95 0c 	sts	0x0C95, r22	; 0x800c95 <editLong>
    2c90:	70 93 96 0c 	sts	0x0C96, r23	; 0x800c96 <editLong+0x1>
    2c94:	80 93 97 0c 	sts	0x0C97, r24	; 0x800c97 <editLong+0x2>
    2c98:	90 93 98 0c 	sts	0x0C98, r25	; 0x800c98 <editLong+0x3>
    2c9c:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <lcd_longout>
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	08 95       	ret

00002ca4 <menuOnEnterTune>:
    2ca4:	cf 93       	push	r28
    2ca6:	8f 3f       	cpi	r24, 0xFF	; 255
    2ca8:	09 f0       	breq	.+2      	; 0x2cac <menuOnEnterTune+0x8>
    2caa:	77 c0       	rjmp	.+238    	; 0x2d9a <menuOnEnterTune+0xf6>
    2cac:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <minManNote.2797>
    2cb0:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <maxManNote.2798>
    2cb4:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    2cb8:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    2cbc:	3e 96       	adiw	r30, 0x0e	; 14
    2cbe:	85 91       	lpm	r24, Z+
    2cc0:	95 91       	lpm	r25, Z+
    2cc2:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <menuVmanual>
    2cc6:	84 30       	cpi	r24, 0x04	; 4
    2cc8:	10 f0       	brcs	.+4      	; 0x2cce <menuOnEnterTune+0x2a>
    2cca:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <menuVmanual>
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	39 c0       	rjmp	.+114    	; 0x2d44 <menuOnEnterTune+0xa0>
    2cd2:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	e2 2f       	mov	r30, r18
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	df 01       	movw	r26, r30
    2cde:	aa 0f       	add	r26, r26
    2ce0:	bb 1f       	adc	r27, r27
    2ce2:	ad 01       	movw	r20, r26
    2ce4:	4e 0f       	add	r20, r30
    2ce6:	5f 1f       	adc	r21, r31
    2ce8:	dc 01       	movw	r26, r24
    2cea:	aa 0f       	add	r26, r26
    2cec:	bb 1f       	adc	r27, r27
    2cee:	a8 0f       	add	r26, r24
    2cf0:	b9 1f       	adc	r27, r25
    2cf2:	aa 0f       	add	r26, r26
    2cf4:	bb 1f       	adc	r27, r27
    2cf6:	aa 0f       	add	r26, r26
    2cf8:	bb 1f       	adc	r27, r27
    2cfa:	a4 0f       	add	r26, r20
    2cfc:	b5 1f       	adc	r27, r21
    2cfe:	a2 53       	subi	r26, 0x32	; 50
    2d00:	b7 4f       	sbci	r27, 0xF7	; 247
    2d02:	3c 91       	ld	r19, X
    2d04:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <minManNote.2797>
    2d08:	34 17       	cp	r19, r20
    2d0a:	10 f4       	brcc	.+4      	; 0x2d10 <menuOnEnterTune+0x6c>
    2d0c:	30 93 0c 02 	sts	0x020C, r19	; 0x80020c <minManNote.2797>
    2d10:	af 01       	movw	r20, r30
    2d12:	44 0f       	add	r20, r20
    2d14:	55 1f       	adc	r21, r21
    2d16:	e4 0f       	add	r30, r20
    2d18:	f5 1f       	adc	r31, r21
    2d1a:	ac 01       	movw	r20, r24
    2d1c:	44 0f       	add	r20, r20
    2d1e:	55 1f       	adc	r21, r21
    2d20:	84 0f       	add	r24, r20
    2d22:	95 1f       	adc	r25, r21
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	e8 0f       	add	r30, r24
    2d2e:	f9 1f       	adc	r31, r25
    2d30:	e2 53       	subi	r30, 0x32	; 50
    2d32:	f7 4f       	sbci	r31, 0xF7	; 247
    2d34:	81 81       	ldd	r24, Z+1	; 0x01
    2d36:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <maxManNote.2798>
    2d3a:	98 17       	cp	r25, r24
    2d3c:	10 f4       	brcc	.+4      	; 0x2d42 <menuOnEnterTune+0x9e>
    2d3e:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <maxManNote.2798>
    2d42:	2f 5f       	subi	r18, 0xFF	; 255
    2d44:	24 30       	cpi	r18, 0x04	; 4
    2d46:	28 f2       	brcs	.-118    	; 0x2cd2 <menuOnEnterTune+0x2e>
    2d48:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <minManNote.2797>
    2d4c:	88 23       	and	r24, r24
    2d4e:	4c f4       	brge	.+18     	; 0x2d62 <menuOnEnterTune+0xbe>
    2d50:	8e e1       	ldi	r24, 0x1E	; 30
    2d52:	50 da       	rcall	.-2912   	; 0x21f4 <lcd_goto>
    2d54:	83 e3       	ldi	r24, 0x33	; 51
    2d56:	93 e0       	ldi	r25, 0x03	; 3
    2d58:	6f da       	rcall	.-2850   	; 0x2238 <lcd_puts_P>
    2d5a:	8f ef       	ldi	r24, 0xFF	; 255
    2d5c:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <menuNote>
    2d60:	04 c0       	rjmp	.+8      	; 0x2d6a <menuOnEnterTune+0xc6>
    2d62:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <menuNote>
    2d66:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <notOnOff.2799>
    2d6a:	64 ec       	ldi	r22, 0xC4	; 196
    2d6c:	7f e0       	ldi	r23, 0x0F	; 15
    2d6e:	80 e0       	ldi	r24, 0x00	; 0
    2d70:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    2d74:	69 ec       	ldi	r22, 0xC9	; 201
    2d76:	7f e0       	ldi	r23, 0x0F	; 15
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    2d7e:	6e ec       	ldi	r22, 0xCE	; 206
    2d80:	7f e0       	ldi	r23, 0x0F	; 15
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    2d88:	60 ed       	ldi	r22, 0xD0	; 208
    2d8a:	7f e0       	ldi	r23, 0x0F	; 15
    2d8c:	83 e0       	ldi	r24, 0x03	; 3
    2d8e:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    2d92:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
    2d96:	cf ef       	ldi	r28, 0xFF	; 255
    2d98:	71 c0       	rjmp	.+226    	; 0x2e7c <menuOnEnterTune+0x1d8>
    2d9a:	60 91 43 05 	lds	r22, 0x0543	; 0x800543 <menuNote>
    2d9e:	6f 3f       	cpi	r22, 0xFF	; 255
    2da0:	09 f4       	brne	.+2      	; 0x2da4 <menuOnEnterTune+0x100>
    2da2:	61 c0       	rjmp	.+194    	; 0x2e66 <menuOnEnterTune+0x1c2>
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	d9 f4       	brne	.+54     	; 0x2dde <menuOnEnterTune+0x13a>
    2da8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <maxManNote.2798>
    2dac:	68 17       	cp	r22, r24
    2dae:	08 f0       	brcs	.+2      	; 0x2db2 <menuOnEnterTune+0x10e>
    2db0:	5c c0       	rjmp	.+184    	; 0x2e6a <menuOnEnterTune+0x1c6>
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2db8:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <manual_NoteOnOff>
    2dbc:	60 91 43 05 	lds	r22, 0x0543	; 0x800543 <menuNote>
    2dc0:	6f 5f       	subi	r22, 0xFF	; 255
    2dc2:	60 93 43 05 	sts	0x0543, r22	; 0x800543 <menuNote>
    2dc6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2799>
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	09 f0       	breq	.+2      	; 0x2dd0 <menuOnEnterTune+0x12c>
    2dce:	4f c0       	rjmp	.+158    	; 0x2e6e <menuOnEnterTune+0x1ca>
    2dd0:	41 e0       	ldi	r20, 0x01	; 1
    2dd2:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2dd6:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <manual_NoteOnOff>
    2dda:	cf ef       	ldi	r28, 0xFF	; 255
    2ddc:	4f c0       	rjmp	.+158    	; 0x2e7c <menuOnEnterTune+0x1d8>
    2dde:	84 30       	cpi	r24, 0x04	; 4
    2de0:	d1 f4       	brne	.+52     	; 0x2e16 <menuOnEnterTune+0x172>
    2de2:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <minManNote.2797>
    2de6:	86 17       	cp	r24, r22
    2de8:	08 f0       	brcs	.+2      	; 0x2dec <menuOnEnterTune+0x148>
    2dea:	43 c0       	rjmp	.+134    	; 0x2e72 <menuOnEnterTune+0x1ce>
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2df2:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <manual_NoteOnOff>
    2df6:	60 91 43 05 	lds	r22, 0x0543	; 0x800543 <menuNote>
    2dfa:	61 50       	subi	r22, 0x01	; 1
    2dfc:	60 93 43 05 	sts	0x0543, r22	; 0x800543 <menuNote>
    2e00:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2799>
    2e04:	81 30       	cpi	r24, 0x01	; 1
    2e06:	b9 f5       	brne	.+110    	; 0x2e76 <menuOnEnterTune+0x1d2>
    2e08:	41 e0       	ldi	r20, 0x01	; 1
    2e0a:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2e0e:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <manual_NoteOnOff>
    2e12:	cf ef       	ldi	r28, 0xFF	; 255
    2e14:	33 c0       	rjmp	.+102    	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e16:	83 30       	cpi	r24, 0x03	; 3
    2e18:	91 f4       	brne	.+36     	; 0x2e3e <menuOnEnterTune+0x19a>
    2e1a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2799>
    2e1e:	81 11       	cpse	r24, r1
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <menuOnEnterTune+0x186>
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <notOnOff.2799>
    2e28:	02 c0       	rjmp	.+4      	; 0x2e2e <menuOnEnterTune+0x18a>
    2e2a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <notOnOff.2799>
    2e2e:	40 91 0a 02 	lds	r20, 0x020A	; 0x80020a <notOnOff.2799>
    2e32:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2e36:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <manual_NoteOnOff>
    2e3a:	cf ef       	ldi	r28, 0xFF	; 255
    2e3c:	1f c0       	rjmp	.+62     	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e3e:	82 30       	cpi	r24, 0x02	; 2
    2e40:	11 f0       	breq	.+4      	; 0x2e46 <menuOnEnterTune+0x1a2>
    2e42:	86 30       	cpi	r24, 0x06	; 6
    2e44:	39 f4       	brne	.+14     	; 0x2e54 <menuOnEnterTune+0x1b0>
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2e4c:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <manual_NoteOnOff>
    2e50:	c0 e0       	ldi	r28, 0x00	; 0
    2e52:	14 c0       	rjmp	.+40     	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e54:	85 30       	cpi	r24, 0x05	; 5
    2e56:	89 f4       	brne	.+34     	; 0x2e7a <menuOnEnterTune+0x1d6>
    2e58:	40 e0       	ldi	r20, 0x00	; 0
    2e5a:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <menuVmanual>
    2e5e:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <manual_NoteOnOff>
    2e62:	c0 e0       	ldi	r28, 0x00	; 0
    2e64:	0b c0       	rjmp	.+22     	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e66:	c0 e0       	ldi	r28, 0x00	; 0
    2e68:	09 c0       	rjmp	.+18     	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e6a:	cf ef       	ldi	r28, 0xFF	; 255
    2e6c:	07 c0       	rjmp	.+14     	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e6e:	cf ef       	ldi	r28, 0xFF	; 255
    2e70:	05 c0       	rjmp	.+10     	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e72:	cf ef       	ldi	r28, 0xFF	; 255
    2e74:	03 c0       	rjmp	.+6      	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e76:	cf ef       	ldi	r28, 0xFF	; 255
    2e78:	01 c0       	rjmp	.+2      	; 0x2e7c <menuOnEnterTune+0x1d8>
    2e7a:	cf ef       	ldi	r28, 0xFF	; 255
    2e7c:	cf 3f       	cpi	r28, 0xFF	; 255
    2e7e:	59 f5       	brne	.+86     	; 0x2ed6 <menuOnEnterTune+0x232>
    2e80:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <menuNote>
    2e84:	8f 3f       	cpi	r24, 0xFF	; 255
    2e86:	29 f1       	breq	.+74     	; 0x2ed2 <menuOnEnterTune+0x22e>
    2e88:	8e e1       	ldi	r24, 0x1E	; 30
    2e8a:	b4 d9       	rcall	.-3224   	; 0x21f4 <lcd_goto>
    2e8c:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <menuNote>
    2e90:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <lcd_noteOut>
    2e94:	80 e2       	ldi	r24, 0x20	; 32
    2e96:	b8 d9       	rcall	.-3216   	; 0x2208 <lcd_putc>
    2e98:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2799>
    2e9c:	81 11       	cpse	r24, r1
    2e9e:	07 c0       	rjmp	.+14     	; 0x2eae <menuOnEnterTune+0x20a>
    2ea0:	81 e6       	ldi	r24, 0x61	; 97
    2ea2:	b2 d9       	rcall	.-3228   	; 0x2208 <lcd_putc>
    2ea4:	85 e7       	ldi	r24, 0x75	; 117
    2ea6:	b0 d9       	rcall	.-3232   	; 0x2208 <lcd_putc>
    2ea8:	83 e7       	ldi	r24, 0x73	; 115
    2eaa:	ae d9       	rcall	.-3236   	; 0x2208 <lcd_putc>
    2eac:	06 c0       	rjmp	.+12     	; 0x2eba <menuOnEnterTune+0x216>
    2eae:	85 e6       	ldi	r24, 0x65	; 101
    2eb0:	ab d9       	rcall	.-3242   	; 0x2208 <lcd_putc>
    2eb2:	89 e6       	ldi	r24, 0x69	; 105
    2eb4:	a9 d9       	rcall	.-3246   	; 0x2208 <lcd_putc>
    2eb6:	8e e6       	ldi	r24, 0x6E	; 110
    2eb8:	a7 d9       	rcall	.-3250   	; 0x2208 <lcd_putc>
    2eba:	61 e0       	ldi	r22, 0x01	; 1
    2ebc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <notOnOff.2799>
    2ec0:	81 11       	cpse	r24, r1
    2ec2:	01 c0       	rjmp	.+2      	; 0x2ec6 <menuOnEnterTune+0x222>
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <keylabel_statcheck>
    2ecc:	81 11       	cpse	r24, r1
    2ece:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
    2ed2:	8e e1       	ldi	r24, 0x1E	; 30
    2ed4:	8f d9       	rcall	.-3298   	; 0x21f4 <lcd_goto>
    2ed6:	8c 2f       	mov	r24, r28
    2ed8:	cf 91       	pop	r28
    2eda:	08 95       	ret

00002edc <menuOnExitMidiActiveSense>:
    2edc:	0e 94 75 0a 	call	0x14ea	; 0x14ea <eeprom_UpdateMidiOutMap>
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	08 95       	ret

00002ee4 <menuOnExitMidiOut>:
    2ee4:	0e 94 75 0a 	call	0x14ea	; 0x14ea <eeprom_UpdateMidiOutMap>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	08 95       	ret

00002eec <menuOnExitMidiIn>:
    2eec:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <eeprom_UpdateMidiInMap>
    2ef0:	80 e0       	ldi	r24, 0x00	; 0
    2ef2:	08 95       	ret

00002ef4 <menuOnExitManual>:
    2ef4:	0e 94 31 0a 	call	0x1462	; 0x1462 <eeprom_UpdateManualMap>
    2ef8:	0e 94 43 26 	call	0x4c86	; 0x4c86 <registers_CalcCount>
    2efc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <eeprom_UpdateReg>
    2f00:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <Midi_updateManualRange>
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	08 95       	ret

00002f08 <menuOnExitModules>:
    2f08:	0e 94 a5 0a 	call	0x154a	; 0x154a <eeprom_UpdateModules>
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	08 95       	ret

00002f10 <menuOnEnterUSBprotokoll>:
    2f10:	cf 93       	push	r28
    2f12:	8e e0       	ldi	r24, 0x0E	; 14
    2f14:	93 e0       	ldi	r25, 0x03	; 3
    2f16:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f1a:	a9 d9       	rcall	.-3246   	; 0x226e <log_count>
    2f1c:	81 11       	cpse	r24, r1
    2f1e:	0f c0       	rjmp	.+30     	; 0x2f3e <menuOnEnterUSBprotokoll+0x2e>
    2f20:	84 e1       	ldi	r24, 0x14	; 20
    2f22:	93 e0       	ldi	r25, 0x03	; 3
    2f24:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f28:	0e c0       	rjmp	.+28     	; 0x2f46 <menuOnEnterUSBprotokoll+0x36>
    2f2a:	6f ef       	ldi	r22, 0xFF	; 255
    2f2c:	8c 2f       	mov	r24, r28
    2f2e:	43 db       	rcall	.-2426   	; 0x25b6 <log_getShortTextFromIndex>
    2f30:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    2f34:	82 ef       	ldi	r24, 0xF2	; 242
    2f36:	9f e0       	ldi	r25, 0x0F	; 15
    2f38:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f3c:	8c 2f       	mov	r24, r28
    2f3e:	cf ef       	ldi	r28, 0xFF	; 255
    2f40:	c8 0f       	add	r28, r24
    2f42:	81 11       	cpse	r24, r1
    2f44:	f2 cf       	rjmp	.-28     	; 0x2f2a <menuOnEnterUSBprotokoll+0x1a>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	cf 91       	pop	r28
    2f4a:	08 95       	ret

00002f4c <menuOnExitUSBactive>:
    2f4c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <eeprom_UpdateUSB>
    2f50:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <serusb_Active>
    2f54:	8f 3f       	cpi	r24, 0xFF	; 255
    2f56:	61 f4       	brne	.+24     	; 0x2f70 <menuOnExitUSBactive+0x24>
    2f58:	85 ef       	ldi	r24, 0xF5	; 245
    2f5a:	92 e0       	ldi	r25, 0x02	; 2
    2f5c:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f60:	8c e9       	ldi	r24, 0x9C	; 156
    2f62:	9f e0       	ldi	r25, 0x0F	; 15
    2f64:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f68:	82 ef       	ldi	r24, 0xF2	; 242
    2f6a:	9f e0       	ldi	r25, 0x0F	; 15
    2f6c:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f70:	80 e0       	ldi	r24, 0x00	; 0
    2f72:	08 95       	ret

00002f74 <menuOnEnterUSBsendHW>:
    2f74:	9f 92       	push	r9
    2f76:	af 92       	push	r10
    2f78:	bf 92       	push	r11
    2f7a:	cf 92       	push	r12
    2f7c:	df 92       	push	r13
    2f7e:	ef 92       	push	r14
    2f80:	ff 92       	push	r15
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	8c ed       	ldi	r24, 0xDC	; 220
    2f8c:	92 e0       	ldi	r25, 0x02	; 2
    2f8e:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f92:	89 ec       	ldi	r24, 0xC9	; 201
    2f94:	92 e0       	ldi	r25, 0x02	; 2
    2f96:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2f9a:	69 e9       	ldi	r22, 0x99	; 153
    2f9c:	7c e0       	ldi	r23, 0x0C	; 12
    2f9e:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <pipe_ModuleAssnRead>
    2fa2:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    2fa6:	22 e7       	ldi	r18, 0x72	; 114
    2fa8:	fc 01       	movw	r30, r24
    2faa:	20 83       	st	Z, r18
    2fac:	bc 01       	movw	r22, r24
    2fae:	6e 5f       	subi	r22, 0xFE	; 254
    2fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2fb2:	20 e2       	ldi	r18, 0x20	; 32
    2fb4:	21 83       	std	Z+1, r18	; 0x01
    2fb6:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <pipe_ModuleAssnWrite>
    2fba:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    2fbe:	27 e7       	ldi	r18, 0x77	; 119
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	20 83       	st	Z, r18
    2fc4:	89 e9       	ldi	r24, 0x99	; 153
    2fc6:	9c e0       	ldi	r25, 0x0C	; 12
    2fc8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    2fcc:	0e 94 9f 2c 	call	0x593e	; 0x593e <serial0SER_USB_sendCRLF>
    2fd0:	87 eb       	ldi	r24, 0xB7	; 183
    2fd2:	92 e0       	ldi	r25, 0x02	; 2
    2fd4:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2fd8:	69 e9       	ldi	r22, 0x99	; 153
    2fda:	7c e0       	ldi	r23, 0x0C	; 12
    2fdc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipe_ModuleTested>
    2fe0:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    2fe4:	89 e9       	ldi	r24, 0x99	; 153
    2fe6:	9c e0       	ldi	r25, 0x0C	; 12
    2fe8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    2fec:	0e 94 9f 2c 	call	0x593e	; 0x593e <serial0SER_USB_sendCRLF>
    2ff0:	e1 2c       	mov	r14, r1
    2ff2:	b5 c0       	rjmp	.+362    	; 0x315e <menuOnEnterUSBsendHW+0x1ea>
    2ff4:	8e ea       	ldi	r24, 0xAE	; 174
    2ff6:	92 e0       	ldi	r25, 0x02	; 2
    2ff8:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    2ffc:	69 e9       	ldi	r22, 0x99	; 153
    2ffe:	7c e0       	ldi	r23, 0x0C	; 12
    3000:	8e 2d       	mov	r24, r14
    3002:	0e 94 80 2e 	call	0x5d00	; 0x5d00 <putChar_Manual>
    3006:	89 e9       	ldi	r24, 0x99	; 153
    3008:	9c e0       	ldi	r25, 0x0C	; 12
    300a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    300e:	0e 94 9f 2c 	call	0x593e	; 0x593e <serial0SER_USB_sendCRLF>
    3012:	f1 2c       	mov	r15, r1
    3014:	9f c0       	rjmp	.+318    	; 0x3154 <menuOnEnterUSBsendHW+0x1e0>
    3016:	86 ea       	ldi	r24, 0xA6	; 166
    3018:	92 e0       	ldi	r25, 0x02	; 2
    301a:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    301e:	80 e3       	ldi	r24, 0x30	; 48
    3020:	8f 0d       	add	r24, r15
    3022:	0e 94 67 2c 	call	0x58ce	; 0x58ce <serial0SER_USBSend>
    3026:	8d e2       	ldi	r24, 0x2D	; 45
    3028:	0e 94 67 2c 	call	0x58ce	; 0x58ce <serial0SER_USBSend>
    302c:	80 e2       	ldi	r24, 0x20	; 32
    302e:	0e 94 67 2c 	call	0x58ce	; 0x58ce <serial0SER_USBSend>
    3032:	0e 2d       	mov	r16, r14
    3034:	10 e0       	ldi	r17, 0x00	; 0
    3036:	cf 2c       	mov	r12, r15
    3038:	d1 2c       	mov	r13, r1
    303a:	e6 01       	movw	r28, r12
    303c:	cc 0f       	add	r28, r28
    303e:	dd 1f       	adc	r29, r29
    3040:	ce 01       	movw	r24, r28
    3042:	8c 0d       	add	r24, r12
    3044:	9d 1d       	adc	r25, r13
    3046:	e8 01       	movw	r28, r16
    3048:	cc 0f       	add	r28, r28
    304a:	dd 1f       	adc	r29, r29
    304c:	c0 0f       	add	r28, r16
    304e:	d1 1f       	adc	r29, r17
    3050:	cc 0f       	add	r28, r28
    3052:	dd 1f       	adc	r29, r29
    3054:	cc 0f       	add	r28, r28
    3056:	dd 1f       	adc	r29, r29
    3058:	c8 0f       	add	r28, r24
    305a:	d9 1f       	adc	r29, r25
    305c:	c2 53       	subi	r28, 0x32	; 50
    305e:	d7 4f       	sbci	r29, 0xF7	; 247
    3060:	69 e9       	ldi	r22, 0x99	; 153
    3062:	7c e0       	ldi	r23, 0x0C	; 12
    3064:	88 81       	ld	r24, Y
    3066:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    306a:	bc 01       	movw	r22, r24
    306c:	6f 5f       	subi	r22, 0xFF	; 255
    306e:	7f 4f       	sbci	r23, 0xFF	; 255
    3070:	68 94       	set
    3072:	bb 24       	eor	r11, r11
    3074:	b5 f8       	bld	r11, 5
    3076:	fc 01       	movw	r30, r24
    3078:	b0 82       	st	Z, r11
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    3080:	bc 01       	movw	r22, r24
    3082:	6f 5f       	subi	r22, 0xFF	; 255
    3084:	7f 4f       	sbci	r23, 0xFF	; 255
    3086:	fc 01       	movw	r30, r24
    3088:	b0 82       	st	Z, r11
    308a:	8a 81       	ldd	r24, Y+2	; 0x02
    308c:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <putChar_hex>
    3090:	2d e3       	ldi	r18, 0x3D	; 61
    3092:	fc 01       	movw	r30, r24
    3094:	20 83       	st	Z, r18
    3096:	89 e9       	ldi	r24, 0x99	; 153
    3098:	9c e0       	ldi	r25, 0x0C	; 12
    309a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    309e:	88 81       	ld	r24, Y
    30a0:	88 23       	and	r24, r24
    30a2:	2c f4       	brge	.+10     	; 0x30ae <menuOnEnterUSBsendHW+0x13a>
    30a4:	80 ea       	ldi	r24, 0xA0	; 160
    30a6:	92 e0       	ldi	r25, 0x02	; 2
    30a8:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    30ac:	50 c0       	rjmp	.+160    	; 0x314e <menuOnEnterUSBsendHW+0x1da>
    30ae:	69 e9       	ldi	r22, 0x99	; 153
    30b0:	7c e0       	ldi	r23, 0x0C	; 12
    30b2:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <putChar_Note>
    30b6:	bc 01       	movw	r22, r24
    30b8:	6f 5f       	subi	r22, 0xFF	; 255
    30ba:	7f 4f       	sbci	r23, 0xFF	; 255
    30bc:	0f 2e       	mov	r0, r31
    30be:	fd e2       	ldi	r31, 0x2D	; 45
    30c0:	9f 2e       	mov	r9, r31
    30c2:	f0 2d       	mov	r31, r0
    30c4:	fc 01       	movw	r30, r24
    30c6:	90 82       	st	Z, r9
    30c8:	f6 01       	movw	r30, r12
    30ca:	ee 0f       	add	r30, r30
    30cc:	ff 1f       	adc	r31, r31
    30ce:	ce 0e       	add	r12, r30
    30d0:	df 1e       	adc	r13, r31
    30d2:	58 01       	movw	r10, r16
    30d4:	aa 0c       	add	r10, r10
    30d6:	bb 1c       	adc	r11, r11
    30d8:	e5 01       	movw	r28, r10
    30da:	c0 0f       	add	r28, r16
    30dc:	d1 1f       	adc	r29, r17
    30de:	cc 0f       	add	r28, r28
    30e0:	dd 1f       	adc	r29, r29
    30e2:	cc 0f       	add	r28, r28
    30e4:	dd 1f       	adc	r29, r29
    30e6:	cc 0d       	add	r28, r12
    30e8:	dd 1d       	adc	r29, r13
    30ea:	c2 53       	subi	r28, 0x32	; 50
    30ec:	d7 4f       	sbci	r29, 0xF7	; 247
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <putChar_Note>
    30f4:	20 e2       	ldi	r18, 0x20	; 32
    30f6:	fc 01       	movw	r30, r24
    30f8:	20 83       	st	Z, r18
    30fa:	89 e9       	ldi	r24, 0x99	; 153
    30fc:	9c e0       	ldi	r25, 0x0C	; 12
    30fe:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    3102:	88 e9       	ldi	r24, 0x98	; 152
    3104:	92 e0       	ldi	r25, 0x02	; 2
    3106:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    310a:	8a 81       	ldd	r24, Y+2	; 0x02
    310c:	82 95       	swap	r24
    310e:	86 95       	lsr	r24
    3110:	87 70       	andi	r24, 0x07	; 7
    3112:	80 5d       	subi	r24, 0xD0	; 208
    3114:	0e 94 67 2c 	call	0x58ce	; 0x58ce <serial0SER_USBSend>
    3118:	81 e9       	ldi	r24, 0x91	; 145
    311a:	92 e0       	ldi	r25, 0x02	; 2
    311c:	0e 94 8d 2c 	call	0x591a	; 0x591a <serial0SER_USB_sendStringP>
    3120:	8a 81       	ldd	r24, Y+2	; 0x02
    3122:	69 e9       	ldi	r22, 0x99	; 153
    3124:	7c e0       	ldi	r23, 0x0C	; 12
    3126:	8f 71       	andi	r24, 0x1F	; 31
    3128:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <putChar_Dec2>
    312c:	bc 01       	movw	r22, r24
    312e:	6f 5f       	subi	r22, 0xFF	; 255
    3130:	7f 4f       	sbci	r23, 0xFF	; 255
    3132:	fc 01       	movw	r30, r24
    3134:	90 82       	st	Z, r9
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	99 81       	ldd	r25, Y+1	; 0x01
    313a:	28 81       	ld	r18, Y
    313c:	8f 71       	andi	r24, 0x1F	; 31
    313e:	89 0f       	add	r24, r25
    3140:	82 1b       	sub	r24, r18
    3142:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <putChar_Dec2>
    3146:	89 e9       	ldi	r24, 0x99	; 153
    3148:	9c e0       	ldi	r25, 0x0C	; 12
    314a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <serial0SER_USB_sendString>
    314e:	0e 94 9f 2c 	call	0x593e	; 0x593e <serial0SER_USB_sendCRLF>
    3152:	f3 94       	inc	r15
    3154:	f3 e0       	ldi	r31, 0x03	; 3
    3156:	ff 15       	cp	r31, r15
    3158:	08 f0       	brcs	.+2      	; 0x315c <menuOnEnterUSBsendHW+0x1e8>
    315a:	5d cf       	rjmp	.-326    	; 0x3016 <menuOnEnterUSBsendHW+0xa2>
    315c:	e3 94       	inc	r14
    315e:	83 e0       	ldi	r24, 0x03	; 3
    3160:	8e 15       	cp	r24, r14
    3162:	08 f0       	brcs	.+2      	; 0x3166 <menuOnEnterUSBsendHW+0x1f2>
    3164:	47 cf       	rjmp	.-370    	; 0x2ff4 <menuOnEnterUSBsendHW+0x80>
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	08 95       	ret

00003180 <softkeyCoupler>:
    3180:	cf 93       	push	r28
    3182:	c6 2f       	mov	r28, r22
    3184:	88 23       	and	r24, r24
    3186:	d9 f0       	breq	.+54     	; 0x31be <softkeyCoupler+0x3e>
    3188:	e6 2f       	mov	r30, r22
    318a:	f0 e0       	ldi	r31, 0x00	; 0
    318c:	df 01       	movw	r26, r30
    318e:	ad 54       	subi	r26, 0x4D	; 77
    3190:	b8 4f       	sbci	r27, 0xF8	; 248
    3192:	8c 91       	ld	r24, X
    3194:	81 11       	cpse	r24, r1
    3196:	08 c0       	rjmp	.+16     	; 0x31a8 <softkeyCoupler+0x28>
    3198:	86 2f       	mov	r24, r22
    319a:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <set_Coupler>
    319e:	88 23       	and	r24, r24
    31a0:	71 f0       	breq	.+28     	; 0x31be <softkeyCoupler+0x3e>
    31a2:	0e 94 67 29 	call	0x52ce	; 0x52ce <midi_ManualOff>
    31a6:	0b c0       	rjmp	.+22     	; 0x31be <softkeyCoupler+0x3e>
    31a8:	df 01       	movw	r26, r30
    31aa:	ad 54       	subi	r26, 0x4D	; 77
    31ac:	b8 4f       	sbci	r27, 0xF8	; 248
    31ae:	1c 92       	st	X, r1
    31b0:	ee 0f       	add	r30, r30
    31b2:	ff 1f       	adc	r31, r31
    31b4:	ee 55       	subi	r30, 0x5E	; 94
    31b6:	f0 4f       	sbci	r31, 0xF0	; 240
    31b8:	84 91       	lpm	r24, Z
    31ba:	0e 94 67 29 	call	0x52ce	; 0x52ce <midi_ManualOff>
    31be:	ec 2f       	mov	r30, r28
    31c0:	f0 e0       	ldi	r31, 0x00	; 0
    31c2:	ed 54       	subi	r30, 0x4D	; 77
    31c4:	f8 4f       	sbci	r31, 0xF8	; 248
    31c6:	80 81       	ld	r24, Z
    31c8:	81 11       	cpse	r24, r1
    31ca:	02 c0       	rjmp	.+4      	; 0x31d0 <softkeyCoupler+0x50>
    31cc:	82 e8       	ldi	r24, 0x82	; 130
    31ce:	01 c0       	rjmp	.+2      	; 0x31d2 <softkeyCoupler+0x52>
    31d0:	81 e8       	ldi	r24, 0x81	; 129
    31d2:	cf 91       	pop	r28
    31d4:	08 95       	ret

000031d6 <softKeyCoupler2from3>:
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	d3 cf       	rjmp	.-90     	; 0x3180 <softkeyCoupler>
    31da:	08 95       	ret

000031dc <softKeyCoupler1from3>:
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	d0 cf       	rjmp	.-96     	; 0x3180 <softkeyCoupler>
    31e0:	08 95       	ret

000031e2 <softKeyCouplerPfrom3>:
    31e2:	63 e0       	ldi	r22, 0x03	; 3
    31e4:	cd cf       	rjmp	.-102    	; 0x3180 <softkeyCoupler>
    31e6:	08 95       	ret

000031e8 <softKeyCoupler1from2>:
    31e8:	62 e0       	ldi	r22, 0x02	; 2
    31ea:	ca cf       	rjmp	.-108    	; 0x3180 <softkeyCoupler>
    31ec:	08 95       	ret

000031ee <softKeyCouplerPfrom2>:
    31ee:	64 e0       	ldi	r22, 0x04	; 4
    31f0:	c7 cf       	rjmp	.-114    	; 0x3180 <softkeyCoupler>
    31f2:	08 95       	ret

000031f4 <softKeyCouplerPfrom1>:
    31f4:	65 e0       	ldi	r22, 0x05	; 5
    31f6:	c4 cf       	rjmp	.-120    	; 0x3180 <softkeyCoupler>
    31f8:	08 95       	ret

000031fa <softKeyCoupler3from2>:
    31fa:	66 e0       	ldi	r22, 0x06	; 6
    31fc:	c1 cf       	rjmp	.-126    	; 0x3180 <softkeyCoupler>
    31fe:	08 95       	ret

00003200 <softKeyCoupler3from1>:
    3200:	67 e0       	ldi	r22, 0x07	; 7
    3202:	be cf       	rjmp	.-132    	; 0x3180 <softkeyCoupler>
    3204:	08 95       	ret

00003206 <softKeyCoupler3fromP>:
    3206:	69 e0       	ldi	r22, 0x09	; 9
    3208:	bb cf       	rjmp	.-138    	; 0x3180 <softkeyCoupler>
    320a:	08 95       	ret

0000320c <softKeyCoupler2from1>:
    320c:	68 e0       	ldi	r22, 0x08	; 8
    320e:	b8 cf       	rjmp	.-144    	; 0x3180 <softkeyCoupler>
    3210:	08 95       	ret

00003212 <softKeyCoupler2fromP>:
    3212:	6a e0       	ldi	r22, 0x0A	; 10
    3214:	b5 cf       	rjmp	.-150    	; 0x3180 <softkeyCoupler>
    3216:	08 95       	ret

00003218 <softKeyCoupler1fromP>:
    3218:	6b e0       	ldi	r22, 0x0B	; 11
    321a:	b2 cf       	rjmp	.-156    	; 0x3180 <softkeyCoupler>
    321c:	08 95       	ret

0000321e <menuLCDwriteOK>:
    321e:	8e e1       	ldi	r24, 0x1E	; 30
    3220:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    3224:	8c e1       	ldi	r24, 0x1C	; 28
    3226:	93 e0       	ldi	r25, 0x03	; 3
    3228:	07 d8       	rcall	.-4082   	; 0x2238 <lcd_puts_P>
    322a:	9f b7       	in	r25, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	81 e0       	ldi	r24, 0x01	; 1
    3230:	06 c0       	rjmp	.+12     	; 0x323e <menuLCDwriteOK+0x20>
    3232:	ed e2       	ldi	r30, 0x2D	; 45
    3234:	f2 e0       	ldi	r31, 0x02	; 2
    3236:	84 e6       	ldi	r24, 0x64	; 100
    3238:	86 87       	std	Z+14, r24	; 0x0e
    323a:	17 86       	std	Z+15, r1	; 0x0f
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	81 11       	cpse	r24, r1
    3240:	f8 cf       	rjmp	.-16     	; 0x3232 <menuLCDwriteOK+0x14>
    3242:	9f bf       	out	0x3f, r25	; 63
    3244:	08 95       	ret

00003246 <menuOnEnterEEBackup>:
    3246:	8e e1       	ldi	r24, 0x1E	; 30
    3248:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    324c:	84 e2       	ldi	r24, 0x24	; 36
    324e:	93 e0       	ldi	r25, 0x03	; 3
    3250:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    3254:	0e 94 8f 0b 	call	0x171e	; 0x171e <eeprom_Backup>
    3258:	e2 df       	rcall	.-60     	; 0x321e <menuLCDwriteOK>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	08 95       	ret

0000325e <menuOnEnterEERestore>:
    325e:	8e e1       	ldi	r24, 0x1E	; 30
    3260:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    3264:	84 e2       	ldi	r24, 0x24	; 36
    3266:	93 e0       	ldi	r25, 0x03	; 3
    3268:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    326c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <eeprom_Restore>
    3270:	d6 df       	rcall	.-84     	; 0x321e <menuLCDwriteOK>
    3272:	80 e0       	ldi	r24, 0x00	; 0
    3274:	08 95       	ret

00003276 <menuOnEnterEEUpdate>:
    3276:	8e e1       	ldi	r24, 0x1E	; 30
    3278:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    327c:	84 e2       	ldi	r24, 0x24	; 36
    327e:	93 e0       	ldi	r25, 0x03	; 3
    3280:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    3284:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <eeprom_UpdateALL>
    3288:	ca df       	rcall	.-108    	; 0x321e <menuLCDwriteOK>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	08 95       	ret

0000328e <menu_Init>:
    328e:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <menuStackIndex>
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	69 f4       	brne	.+26     	; 0x32b0 <menu_Init+0x22>
    3296:	80 e5       	ldi	r24, 0x50	; 80
    3298:	96 e0       	ldi	r25, 0x06	; 6
    329a:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <currentMenu+0x1>
    329e:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <currentMenu>
    32a2:	82 e5       	ldi	r24, 0x52	; 82
    32a4:	93 e0       	ldi	r25, 0x03	; 3
    32a6:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <pMenuTopTitle+0x1>
    32aa:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <pMenuTopTitle>
    32ae:	08 c0       	rjmp	.+16     	; 0x32c0 <menu_Init+0x32>
    32b0:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <currentMenu+0x1>
    32b4:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <currentMenu>
    32b8:	70 93 42 05 	sts	0x0542, r23	; 0x800542 <pMenuTopTitle+0x1>
    32bc:	60 93 41 05 	sts	0x0541, r22	; 0x800541 <pMenuTopTitle>
    32c0:	8f ef       	ldi	r24, 0xFF	; 255
    32c2:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    32c6:	8c e5       	ldi	r24, 0x5C	; 92
    32c8:	93 e0       	ldi	r25, 0x03	; 3
    32ca:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <pNibbleInfo+0x1>
    32ce:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <pNibbleInfo>
    32d2:	08 95       	ret

000032d4 <softkeyLeft>:
    32d4:	62 ed       	ldi	r22, 0xD2	; 210
    32d6:	7f e0       	ldi	r23, 0x0F	; 15
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    32de:	08 95       	ret

000032e0 <softkeyRight>:
    32e0:	64 ed       	ldi	r22, 0xD4	; 212
    32e2:	7f e0       	ldi	r23, 0x0F	; 15
    32e4:	83 e0       	ldi	r24, 0x03	; 3
    32e6:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    32ea:	08 95       	ret

000032ec <softkeyDown>:
    32ec:	66 ed       	ldi	r22, 0xD6	; 214
    32ee:	7f e0       	ldi	r23, 0x0F	; 15
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    32f6:	08 95       	ret

000032f8 <softkeyUp>:
    32f8:	68 ed       	ldi	r22, 0xD8	; 216
    32fa:	7f e0       	ldi	r23, 0x0F	; 15
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    3302:	08 95       	ret

00003304 <softkeyPlus>:
    3304:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
    3308:	8a 30       	cpi	r24, 0x0A	; 10
    330a:	31 f4       	brne	.+12     	; 0x3318 <softkeyPlus+0x14>
    330c:	6a eb       	ldi	r22, 0xBA	; 186
    330e:	7f e0       	ldi	r23, 0x0F	; 15
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    3316:	08 95       	ret
    3318:	60 ed       	ldi	r22, 0xD0	; 208
    331a:	7f e0       	ldi	r23, 0x0F	; 15
    331c:	80 e0       	ldi	r24, 0x00	; 0
    331e:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    3322:	08 95       	ret

00003324 <softkeyMinus>:
    3324:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
    3328:	8a 30       	cpi	r24, 0x0A	; 10
    332a:	31 f4       	brne	.+12     	; 0x3338 <softkeyMinus+0x14>
    332c:	6c eb       	ldi	r22, 0xBC	; 188
    332e:	7f e0       	ldi	r23, 0x0F	; 15
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    3336:	08 95       	ret
    3338:	6e ec       	ldi	r22, 0xCE	; 206
    333a:	7f e0       	ldi	r23, 0x0F	; 15
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	0c 94 61 2f 	jmp	0x5ec2	; 0x5ec2 <keylabel_set>
    3342:	08 95       	ret

00003344 <dataToNibbles>:
    3344:	cf 93       	push	r28
    3346:	df 93       	push	r29
    3348:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    334c:	8e 2f       	mov	r24, r30
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	fc 01       	movw	r30, r24
    3352:	32 97       	sbiw	r30, 0x02	; 2
    3354:	ec 30       	cpi	r30, 0x0C	; 12
    3356:	f1 05       	cpc	r31, r1
    3358:	08 f0       	brcs	.+2      	; 0x335c <dataToNibbles+0x18>
    335a:	e4 c0       	rjmp	.+456    	; 0x3524 <dataToNibbles+0x1e0>
    335c:	88 27       	eor	r24, r24
    335e:	ee 58       	subi	r30, 0x8E	; 142
    3360:	ff 4f       	sbci	r31, 0xFF	; 255
    3362:	8f 4f       	sbci	r24, 0xFF	; 255
    3364:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__tablejump2__>
    3368:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    336c:	e8 e6       	ldi	r30, 0x68	; 104
    336e:	f5 e0       	ldi	r31, 0x05	; 5
    3370:	98 2f       	mov	r25, r24
    3372:	92 95       	swap	r25
    3374:	9f 70       	andi	r25, 0x0F	; 15
    3376:	90 83       	st	Z, r25
    3378:	8f 70       	andi	r24, 0x0F	; 15
    337a:	81 83       	std	Z+1, r24	; 0x01
    337c:	d3 c0       	rjmp	.+422    	; 0x3524 <dataToNibbles+0x1e0>
    337e:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    3382:	80 31       	cpi	r24, 0x10	; 16
    3384:	20 f0       	brcs	.+8      	; 0x338e <dataToNibbles+0x4a>
    3386:	8f ef       	ldi	r24, 0xFF	; 255
    3388:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    338c:	cb c0       	rjmp	.+406    	; 0x3524 <dataToNibbles+0x1e0>
    338e:	8f 5f       	subi	r24, 0xFF	; 255
    3390:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    3394:	c7 c0       	rjmp	.+398    	; 0x3524 <dataToNibbles+0x1e0>
    3396:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    339a:	88 23       	and	r24, r24
    339c:	34 f4       	brge	.+12     	; 0x33aa <dataToNibbles+0x66>
    339e:	e8 e6       	ldi	r30, 0x68	; 104
    33a0:	f5 e0       	ldi	r31, 0x05	; 5
    33a2:	10 82       	st	Z, r1
    33a4:	8f ef       	ldi	r24, 0xFF	; 255
    33a6:	81 83       	std	Z+1, r24	; 0x01
    33a8:	bd c0       	rjmp	.+378    	; 0x3524 <dataToNibbles+0x1e0>
    33aa:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <nibble+0x1>
    33ae:	08 c0       	rjmp	.+16     	; 0x33c0 <dataToNibbles+0x7c>
    33b0:	e8 e6       	ldi	r30, 0x68	; 104
    33b2:	f5 e0       	ldi	r31, 0x05	; 5
    33b4:	91 81       	ldd	r25, Z+1	; 0x01
    33b6:	9f 5f       	subi	r25, 0xFF	; 255
    33b8:	91 83       	std	Z+1, r25	; 0x01
    33ba:	8c 50       	subi	r24, 0x0C	; 12
    33bc:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    33c0:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    33c4:	8c 30       	cpi	r24, 0x0C	; 12
    33c6:	a0 f7       	brcc	.-24     	; 0x33b0 <dataToNibbles+0x6c>
    33c8:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    33cc:	ab c0       	rjmp	.+342    	; 0x3524 <dataToNibbles+0x1e0>
    33ce:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    33d2:	e8 e6       	ldi	r30, 0x68	; 104
    33d4:	f5 e0       	ldi	r31, 0x05	; 5
    33d6:	98 2f       	mov	r25, r24
    33d8:	92 95       	swap	r25
    33da:	96 95       	lsr	r25
    33dc:	97 70       	andi	r25, 0x07	; 7
    33de:	90 83       	st	Z, r25
    33e0:	8f 71       	andi	r24, 0x1F	; 31
    33e2:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    33e6:	11 82       	std	Z+1, r1	; 0x01
    33e8:	08 c0       	rjmp	.+16     	; 0x33fa <dataToNibbles+0xb6>
    33ea:	e8 e6       	ldi	r30, 0x68	; 104
    33ec:	f5 e0       	ldi	r31, 0x05	; 5
    33ee:	91 81       	ldd	r25, Z+1	; 0x01
    33f0:	9f 5f       	subi	r25, 0xFF	; 255
    33f2:	91 83       	std	Z+1, r25	; 0x01
    33f4:	8a 50       	subi	r24, 0x0A	; 10
    33f6:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    33fa:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    33fe:	8a 30       	cpi	r24, 0x0A	; 10
    3400:	a0 f7       	brcc	.-24     	; 0x33ea <dataToNibbles+0xa6>
    3402:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <nibble+0x2>
    3406:	8e c0       	rjmp	.+284    	; 0x3524 <dataToNibbles+0x1e0>
    3408:	e8 e6       	ldi	r30, 0x68	; 104
    340a:	f5 e0       	ldi	r31, 0x05	; 5
    340c:	10 82       	st	Z, r1
    340e:	11 82       	std	Z+1, r1	; 0x01
    3410:	08 c0       	rjmp	.+16     	; 0x3422 <dataToNibbles+0xde>
    3412:	e8 e6       	ldi	r30, 0x68	; 104
    3414:	f5 e0       	ldi	r31, 0x05	; 5
    3416:	90 81       	ld	r25, Z
    3418:	9f 5f       	subi	r25, 0xFF	; 255
    341a:	90 83       	st	Z, r25
    341c:	84 56       	subi	r24, 0x64	; 100
    341e:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3422:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    3426:	84 36       	cpi	r24, 0x64	; 100
    3428:	a0 f7       	brcc	.-24     	; 0x3412 <dataToNibbles+0xce>
    342a:	08 c0       	rjmp	.+16     	; 0x343c <dataToNibbles+0xf8>
    342c:	e8 e6       	ldi	r30, 0x68	; 104
    342e:	f5 e0       	ldi	r31, 0x05	; 5
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	9f 5f       	subi	r25, 0xFF	; 255
    3434:	91 83       	std	Z+1, r25	; 0x01
    3436:	8a 50       	subi	r24, 0x0A	; 10
    3438:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    343c:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    3440:	8a 30       	cpi	r24, 0x0A	; 10
    3442:	a0 f7       	brcc	.-24     	; 0x342c <dataToNibbles+0xe8>
    3444:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <nibble+0x2>
    3448:	6d c0       	rjmp	.+218    	; 0x3524 <dataToNibbles+0x1e0>
    344a:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    344e:	84 30       	cpi	r24, 0x04	; 4
    3450:	20 f0       	brcs	.+8      	; 0x345a <dataToNibbles+0x116>
    3452:	8f ef       	ldi	r24, 0xFF	; 255
    3454:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    3458:	65 c0       	rjmp	.+202    	; 0x3524 <dataToNibbles+0x1e0>
    345a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    345e:	62 c0       	rjmp	.+196    	; 0x3524 <dataToNibbles+0x1e0>
    3460:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    3464:	84 30       	cpi	r24, 0x04	; 4
    3466:	20 f0       	brcs	.+8      	; 0x3470 <dataToNibbles+0x12c>
    3468:	83 e0       	ldi	r24, 0x03	; 3
    346a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    346e:	5a c0       	rjmp	.+180    	; 0x3524 <dataToNibbles+0x1e0>
    3470:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    3474:	57 c0       	rjmp	.+174    	; 0x3524 <dataToNibbles+0x1e0>
    3476:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    347a:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    347e:	52 c0       	rjmp	.+164    	; 0x3524 <dataToNibbles+0x1e0>
    3480:	e9 2f       	mov	r30, r25
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    3488:	28 2f       	mov	r18, r24
    348a:	22 1f       	adc	r18, r18
    348c:	22 27       	eor	r18, r18
    348e:	22 1f       	adc	r18, r18
    3490:	e8 59       	subi	r30, 0x98	; 152
    3492:	fa 4f       	sbci	r31, 0xFA	; 250
    3494:	20 83       	st	Z, r18
    3496:	88 0f       	add	r24, r24
    3498:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    349c:	9f 5f       	subi	r25, 0xFF	; 255
    349e:	01 c0       	rjmp	.+2      	; 0x34a2 <dataToNibbles+0x15e>
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	98 30       	cpi	r25, 0x08	; 8
    34a4:	68 f3       	brcs	.-38     	; 0x3480 <dataToNibbles+0x13c>
    34a6:	3e c0       	rjmp	.+124    	; 0x3524 <dataToNibbles+0x1e0>
    34a8:	82 50       	subi	r24, 0x02	; 2
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	de 01       	movw	r26, r28
    34ae:	9d 91       	ld	r25, X+
    34b0:	e8 59       	subi	r30, 0x98	; 152
    34b2:	fa 4f       	sbci	r31, 0xFA	; 250
    34b4:	9f 70       	andi	r25, 0x0F	; 15
    34b6:	90 83       	st	Z, r25
    34b8:	e8 2f       	mov	r30, r24
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	98 81       	ld	r25, Y
    34be:	e8 59       	subi	r30, 0x98	; 152
    34c0:	fa 4f       	sbci	r31, 0xFA	; 250
    34c2:	92 95       	swap	r25
    34c4:	9f 70       	andi	r25, 0x0F	; 15
    34c6:	90 83       	st	Z, r25
    34c8:	ed 01       	movw	r28, r26
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <dataToNibbles+0x18e>
    34cc:	c6 e4       	ldi	r28, 0x46	; 70
    34ce:	d5 e0       	ldi	r29, 0x05	; 5
    34d0:	88 e0       	ldi	r24, 0x08	; 8
    34d2:	ef ef       	ldi	r30, 0xFF	; 255
    34d4:	e8 0f       	add	r30, r24
    34d6:	81 11       	cpse	r24, r1
    34d8:	e7 cf       	rjmp	.-50     	; 0x34a8 <dataToNibbles+0x164>
    34da:	24 c0       	rjmp	.+72     	; 0x3524 <dataToNibbles+0x1e0>
    34dc:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    34e0:	e8 e6       	ldi	r30, 0x68	; 104
    34e2:	f5 e0       	ldi	r31, 0x05	; 5
    34e4:	98 2f       	mov	r25, r24
    34e6:	97 70       	andi	r25, 0x07	; 7
    34e8:	9f 5f       	subi	r25, 0xFF	; 255
    34ea:	90 83       	st	Z, r25
    34ec:	86 95       	lsr	r24
    34ee:	86 95       	lsr	r24
    34f0:	86 95       	lsr	r24
    34f2:	8f 5f       	subi	r24, 0xFF	; 255
    34f4:	81 83       	std	Z+1, r24	; 0x01
    34f6:	16 c0       	rjmp	.+44     	; 0x3524 <dataToNibbles+0x1e0>
    34f8:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    34fc:	8f 5f       	subi	r24, 0xFF	; 255
    34fe:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3502:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <nibble>
    3506:	08 c0       	rjmp	.+16     	; 0x3518 <dataToNibbles+0x1d4>
    3508:	e8 e6       	ldi	r30, 0x68	; 104
    350a:	f5 e0       	ldi	r31, 0x05	; 5
    350c:	90 81       	ld	r25, Z
    350e:	9f 5f       	subi	r25, 0xFF	; 255
    3510:	90 83       	st	Z, r25
    3512:	8a 50       	subi	r24, 0x0A	; 10
    3514:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3518:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    351c:	8a 30       	cpi	r24, 0x0A	; 10
    351e:	a0 f7       	brcc	.-24     	; 0x3508 <dataToNibbles+0x1c4>
    3520:	80 93 69 05 	sts	0x0569, r24	; 0x800569 <nibble+0x1>
    3524:	df 91       	pop	r29
    3526:	cf 91       	pop	r28
    3528:	08 95       	ret

0000352a <nibbleToLCDstring>:
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	cf 93       	push	r28
    3530:	df 93       	push	r29
    3532:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    3536:	8e 2f       	mov	r24, r30
    3538:	90 e0       	ldi	r25, 0x00	; 0
    353a:	fc 01       	movw	r30, r24
    353c:	32 97       	sbiw	r30, 0x02	; 2
    353e:	ec 30       	cpi	r30, 0x0C	; 12
    3540:	f1 05       	cpc	r31, r1
    3542:	08 f0       	brcs	.+2      	; 0x3546 <nibbleToLCDstring+0x1c>
    3544:	26 c1       	rjmp	.+588    	; 0x3792 <nibbleToLCDstring+0x268>
    3546:	88 27       	eor	r24, r24
    3548:	e2 58       	subi	r30, 0x82	; 130
    354a:	ff 4f       	sbci	r31, 0xFF	; 255
    354c:	8f 4f       	sbci	r24, 0xFF	; 255
    354e:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__tablejump2__>
    3552:	08 e6       	ldi	r16, 0x68	; 104
    3554:	15 e0       	ldi	r17, 0x05	; 5
    3556:	f8 01       	movw	r30, r16
    3558:	80 81       	ld	r24, Z
    355a:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    355e:	c3 e2       	ldi	r28, 0x23	; 35
    3560:	d2 e0       	ldi	r29, 0x02	; 2
    3562:	88 83       	st	Y, r24
    3564:	f8 01       	movw	r30, r16
    3566:	81 81       	ldd	r24, Z+1	; 0x01
    3568:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	1a 82       	std	Y+2, r1	; 0x02
    3570:	10 c1       	rjmp	.+544    	; 0x3792 <nibbleToLCDstring+0x268>
    3572:	e3 e2       	ldi	r30, 0x23	; 35
    3574:	f2 e0       	ldi	r31, 0x02	; 2
    3576:	83 e4       	ldi	r24, 0x43	; 67
    3578:	80 83       	st	Z, r24
    357a:	88 e6       	ldi	r24, 0x68	; 104
    357c:	81 83       	std	Z+1, r24	; 0x01
    357e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3582:	8f 3f       	cpi	r24, 0xFF	; 255
    3584:	29 f4       	brne	.+10     	; 0x3590 <nibbleToLCDstring+0x66>
    3586:	80 e2       	ldi	r24, 0x20	; 32
    3588:	82 83       	std	Z+2, r24	; 0x02
    358a:	8d e2       	ldi	r24, 0x2D	; 45
    358c:	83 83       	std	Z+3, r24	; 0x03
    358e:	12 c0       	rjmp	.+36     	; 0x35b4 <nibbleToLCDstring+0x8a>
    3590:	8a 30       	cpi	r24, 0x0A	; 10
    3592:	48 f0       	brcs	.+18     	; 0x35a6 <nibbleToLCDstring+0x7c>
    3594:	c3 e2       	ldi	r28, 0x23	; 35
    3596:	d2 e0       	ldi	r29, 0x02	; 2
    3598:	91 e3       	ldi	r25, 0x31	; 49
    359a:	9a 83       	std	Y+2, r25	; 0x02
    359c:	8a 50       	subi	r24, 0x0A	; 10
    359e:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    35a2:	8b 83       	std	Y+3, r24	; 0x03
    35a4:	07 c0       	rjmp	.+14     	; 0x35b4 <nibbleToLCDstring+0x8a>
    35a6:	c3 e2       	ldi	r28, 0x23	; 35
    35a8:	d2 e0       	ldi	r29, 0x02	; 2
    35aa:	90 e3       	ldi	r25, 0x30	; 48
    35ac:	9a 83       	std	Y+2, r25	; 0x02
    35ae:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    35b2:	8b 83       	std	Y+3, r24	; 0x03
    35b4:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x4>
    35b8:	ec c0       	rjmp	.+472    	; 0x3792 <nibbleToLCDstring+0x268>
    35ba:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    35be:	8f 3f       	cpi	r24, 0xFF	; 255
    35c0:	21 f0       	breq	.+8      	; 0x35ca <nibbleToLCDstring+0xa0>
    35c2:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <nibble+0x1>
    35c6:	9f 3f       	cpi	r25, 0xFF	; 255
    35c8:	59 f4       	brne	.+22     	; 0x35e0 <nibbleToLCDstring+0xb6>
    35ca:	e3 e2       	ldi	r30, 0x23	; 35
    35cc:	f2 e0       	ldi	r31, 0x02	; 2
    35ce:	8e e6       	ldi	r24, 0x6E	; 110
    35d0:	80 83       	st	Z, r24
    35d2:	9f e6       	ldi	r25, 0x6F	; 111
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	82 83       	std	Z+2, r24	; 0x02
    35d8:	85 e6       	ldi	r24, 0x65	; 101
    35da:	83 83       	std	Z+3, r24	; 0x03
    35dc:	14 82       	std	Z+4, r1	; 0x04
    35de:	d9 c0       	rjmp	.+434    	; 0x3792 <nibbleToLCDstring+0x268>
    35e0:	9f e5       	ldi	r25, 0x5F	; 95
    35e2:	90 93 24 02 	sts	0x0224, r25	; 0x800224 <lcdData+0x1>
    35e6:	8b 30       	cpi	r24, 0x0B	; 11
    35e8:	21 f4       	brne	.+8      	; 0x35f2 <nibbleToLCDstring+0xc8>
    35ea:	88 e4       	ldi	r24, 0x48	; 72
    35ec:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <lcdData>
    35f0:	20 c0       	rjmp	.+64     	; 0x3632 <nibbleToLCDstring+0x108>
    35f2:	85 30       	cpi	r24, 0x05	; 5
    35f4:	58 f4       	brcc	.+22     	; 0x360c <nibbleToLCDstring+0xe2>
    35f6:	98 2f       	mov	r25, r24
    35f8:	96 95       	lsr	r25
    35fa:	9d 5b       	subi	r25, 0xBD	; 189
    35fc:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <lcdData>
    3600:	80 ff       	sbrs	r24, 0
    3602:	17 c0       	rjmp	.+46     	; 0x3632 <nibbleToLCDstring+0x108>
    3604:	83 e2       	ldi	r24, 0x23	; 35
    3606:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lcdData+0x1>
    360a:	13 c0       	rjmp	.+38     	; 0x3632 <nibbleToLCDstring+0x108>
    360c:	28 2f       	mov	r18, r24
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	25 50       	subi	r18, 0x05	; 5
    3612:	31 09       	sbc	r19, r1
    3614:	35 95       	asr	r19
    3616:	27 95       	ror	r18
    3618:	2a 5b       	subi	r18, 0xBA	; 186
    361a:	20 93 23 02 	sts	0x0223, r18	; 0x800223 <lcdData>
    361e:	80 fd       	sbrc	r24, 0
    3620:	03 c0       	rjmp	.+6      	; 0x3628 <nibbleToLCDstring+0xfe>
    3622:	83 e2       	ldi	r24, 0x23	; 35
    3624:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <lcdData+0x1>
    3628:	28 34       	cpi	r18, 0x48	; 72
    362a:	19 f4       	brne	.+6      	; 0x3632 <nibbleToLCDstring+0x108>
    362c:	81 e4       	ldi	r24, 0x41	; 65
    362e:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <lcdData>
    3632:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <nibble+0x1>
    3636:	81 11       	cpse	r24, r1
    3638:	04 c0       	rjmp	.+8      	; 0x3642 <nibbleToLCDstring+0x118>
    363a:	8d e6       	ldi	r24, 0x6D	; 109
    363c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData+0x2>
    3640:	0b c0       	rjmp	.+22     	; 0x3658 <nibbleToLCDstring+0x12e>
    3642:	8c 30       	cpi	r24, 0x0C	; 12
    3644:	30 f4       	brcc	.+12     	; 0x3652 <nibbleToLCDstring+0x128>
    3646:	81 50       	subi	r24, 0x01	; 1
    3648:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    364c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData+0x2>
    3650:	03 c0       	rjmp	.+6      	; 0x3658 <nibbleToLCDstring+0x12e>
    3652:	8d e2       	ldi	r24, 0x2D	; 45
    3654:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData+0x2>
    3658:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <lcdData+0x3>
    365c:	9a c0       	rjmp	.+308    	; 0x3792 <nibbleToLCDstring+0x268>
    365e:	c3 e2       	ldi	r28, 0x23	; 35
    3660:	d2 e0       	ldi	r29, 0x02	; 2
    3662:	8d e4       	ldi	r24, 0x4D	; 77
    3664:	88 83       	st	Y, r24
    3666:	08 e6       	ldi	r16, 0x68	; 104
    3668:	15 e0       	ldi	r17, 0x05	; 5
    366a:	f8 01       	movw	r30, r16
    366c:	80 81       	ld	r24, Z
    366e:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	82 e4       	ldi	r24, 0x42	; 66
    3676:	8a 83       	std	Y+2, r24	; 0x02
    3678:	f8 01       	movw	r30, r16
    367a:	81 81       	ldd	r24, Z+1	; 0x01
    367c:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    3680:	8b 83       	std	Y+3, r24	; 0x03
    3682:	f8 01       	movw	r30, r16
    3684:	82 81       	ldd	r24, Z+2	; 0x02
    3686:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    368a:	8c 83       	std	Y+4, r24	; 0x04
    368c:	1d 82       	std	Y+5, r1	; 0x05
    368e:	81 c0       	rjmp	.+258    	; 0x3792 <nibbleToLCDstring+0x268>
    3690:	08 e6       	ldi	r16, 0x68	; 104
    3692:	15 e0       	ldi	r17, 0x05	; 5
    3694:	f8 01       	movw	r30, r16
    3696:	80 81       	ld	r24, Z
    3698:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    369c:	c3 e2       	ldi	r28, 0x23	; 35
    369e:	d2 e0       	ldi	r29, 0x02	; 2
    36a0:	88 83       	st	Y, r24
    36a2:	f8 01       	movw	r30, r16
    36a4:	81 81       	ldd	r24, Z+1	; 0x01
    36a6:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	f8 01       	movw	r30, r16
    36ae:	82 81       	ldd	r24, Z+2	; 0x02
    36b0:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    36b4:	8a 83       	std	Y+2, r24	; 0x02
    36b6:	1b 82       	std	Y+3, r1	; 0x03
    36b8:	6c c0       	rjmp	.+216    	; 0x3792 <nibbleToLCDstring+0x268>
    36ba:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    36be:	83 30       	cpi	r24, 0x03	; 3
    36c0:	38 f4       	brcc	.+14     	; 0x36d0 <nibbleToLCDstring+0x1a6>
    36c2:	e3 e2       	ldi	r30, 0x23	; 35
    36c4:	f2 e0       	ldi	r31, 0x02	; 2
    36c6:	93 e3       	ldi	r25, 0x33	; 51
    36c8:	98 1b       	sub	r25, r24
    36ca:	90 83       	st	Z, r25
    36cc:	11 82       	std	Z+1, r1	; 0x01
    36ce:	61 c0       	rjmp	.+194    	; 0x3792 <nibbleToLCDstring+0x268>
    36d0:	83 30       	cpi	r24, 0x03	; 3
    36d2:	31 f4       	brne	.+12     	; 0x36e0 <nibbleToLCDstring+0x1b6>
    36d4:	e3 e2       	ldi	r30, 0x23	; 35
    36d6:	f2 e0       	ldi	r31, 0x02	; 2
    36d8:	80 e5       	ldi	r24, 0x50	; 80
    36da:	80 83       	st	Z, r24
    36dc:	11 82       	std	Z+1, r1	; 0x01
    36de:	59 c0       	rjmp	.+178    	; 0x3792 <nibbleToLCDstring+0x268>
    36e0:	e3 e2       	ldi	r30, 0x23	; 35
    36e2:	f2 e0       	ldi	r31, 0x02	; 2
    36e4:	8d e2       	ldi	r24, 0x2D	; 45
    36e6:	80 83       	st	Z, r24
    36e8:	11 82       	std	Z+1, r1	; 0x01
    36ea:	53 c0       	rjmp	.+166    	; 0x3792 <nibbleToLCDstring+0x268>
    36ec:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    36f0:	e3 e2       	ldi	r30, 0x23	; 35
    36f2:	f2 e0       	ldi	r31, 0x02	; 2
    36f4:	80 5d       	subi	r24, 0xD0	; 208
    36f6:	80 83       	st	Z, r24
    36f8:	11 82       	std	Z+1, r1	; 0x01
    36fa:	4b c0       	rjmp	.+150    	; 0x3792 <nibbleToLCDstring+0x268>
    36fc:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3700:	81 11       	cpse	r24, r1
    3702:	09 c0       	rjmp	.+18     	; 0x3716 <nibbleToLCDstring+0x1ec>
    3704:	e3 e2       	ldi	r30, 0x23	; 35
    3706:	f2 e0       	ldi	r31, 0x02	; 2
    3708:	81 e6       	ldi	r24, 0x61	; 97
    370a:	80 83       	st	Z, r24
    370c:	85 e7       	ldi	r24, 0x75	; 117
    370e:	81 83       	std	Z+1, r24	; 0x01
    3710:	83 e7       	ldi	r24, 0x73	; 115
    3712:	82 83       	std	Z+2, r24	; 0x02
    3714:	08 c0       	rjmp	.+16     	; 0x3726 <nibbleToLCDstring+0x1fc>
    3716:	e3 e2       	ldi	r30, 0x23	; 35
    3718:	f2 e0       	ldi	r31, 0x02	; 2
    371a:	85 e6       	ldi	r24, 0x65	; 101
    371c:	80 83       	st	Z, r24
    371e:	89 e6       	ldi	r24, 0x69	; 105
    3720:	81 83       	std	Z+1, r24	; 0x01
    3722:	8e e6       	ldi	r24, 0x6E	; 110
    3724:	82 83       	std	Z+2, r24	; 0x02
    3726:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <lcdData+0x3>
    372a:	33 c0       	rjmp	.+102    	; 0x3792 <nibbleToLCDstring+0x268>
    372c:	c1 2f       	mov	r28, r17
    372e:	d0 e0       	ldi	r29, 0x00	; 0
    3730:	fe 01       	movw	r30, r28
    3732:	e8 59       	subi	r30, 0x98	; 152
    3734:	fa 4f       	sbci	r31, 0xFA	; 250
    3736:	80 81       	ld	r24, Z
    3738:	0e 94 46 2d 	call	0x5a8c	; 0x5a8c <nibbleToChr>
    373c:	cd 5d       	subi	r28, 0xDD	; 221
    373e:	dd 4f       	sbci	r29, 0xFD	; 253
    3740:	88 83       	st	Y, r24
    3742:	1f 5f       	subi	r17, 0xFF	; 255
    3744:	01 c0       	rjmp	.+2      	; 0x3748 <nibbleToLCDstring+0x21e>
    3746:	10 e0       	ldi	r17, 0x00	; 0
    3748:	18 30       	cpi	r17, 0x08	; 8
    374a:	80 f3       	brcs	.-32     	; 0x372c <nibbleToLCDstring+0x202>
    374c:	22 c0       	rjmp	.+68     	; 0x3792 <nibbleToLCDstring+0x268>
    374e:	a8 e6       	ldi	r26, 0x68	; 104
    3750:	b5 e0       	ldi	r27, 0x05	; 5
    3752:	8c 91       	ld	r24, X
    3754:	e3 e2       	ldi	r30, 0x23	; 35
    3756:	f2 e0       	ldi	r31, 0x02	; 2
    3758:	80 5d       	subi	r24, 0xD0	; 208
    375a:	80 83       	st	Z, r24
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	8c 91       	ld	r24, X
    3760:	80 5c       	subi	r24, 0xC0	; 192
    3762:	81 83       	std	Z+1, r24	; 0x01
    3764:	12 82       	std	Z+2, r1	; 0x02
    3766:	15 c0       	rjmp	.+42     	; 0x3792 <nibbleToLCDstring+0x268>
    3768:	e8 e6       	ldi	r30, 0x68	; 104
    376a:	f5 e0       	ldi	r31, 0x05	; 5
    376c:	90 81       	ld	r25, Z
    376e:	81 81       	ldd	r24, Z+1	; 0x01
    3770:	29 2f       	mov	r18, r25
    3772:	28 2b       	or	r18, r24
    3774:	31 f4       	brne	.+12     	; 0x3782 <nibbleToLCDstring+0x258>
    3776:	e3 e2       	ldi	r30, 0x23	; 35
    3778:	f2 e0       	ldi	r31, 0x02	; 2
    377a:	8d e2       	ldi	r24, 0x2D	; 45
    377c:	80 83       	st	Z, r24
    377e:	81 83       	std	Z+1, r24	; 0x01
    3780:	06 c0       	rjmp	.+12     	; 0x378e <nibbleToLCDstring+0x264>
    3782:	e3 e2       	ldi	r30, 0x23	; 35
    3784:	f2 e0       	ldi	r31, 0x02	; 2
    3786:	90 5d       	subi	r25, 0xD0	; 208
    3788:	90 83       	st	Z, r25
    378a:	80 5d       	subi	r24, 0xD0	; 208
    378c:	81 83       	std	Z+1, r24	; 0x01
    378e:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <lcdData+0x2>
    3792:	df 91       	pop	r29
    3794:	cf 91       	pop	r28
    3796:	1f 91       	pop	r17
    3798:	0f 91       	pop	r16
    379a:	08 95       	ret

0000379c <LCDStringOut>:
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	8e e1       	ldi	r24, 0x1E	; 30
    37a4:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    37a8:	c0 e0       	ldi	r28, 0x00	; 0
    37aa:	03 e2       	ldi	r16, 0x23	; 35
    37ac:	12 e0       	ldi	r17, 0x02	; 2
    37ae:	0b c0       	rjmp	.+22     	; 0x37c6 <LCDStringOut+0x2a>
    37b0:	f8 01       	movw	r30, r16
    37b2:	80 81       	ld	r24, Z
    37b4:	88 23       	and	r24, r24
    37b6:	19 f0       	breq	.+6      	; 0x37be <LCDStringOut+0x22>
    37b8:	0f 5f       	subi	r16, 0xFF	; 255
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	01 c0       	rjmp	.+2      	; 0x37c0 <LCDStringOut+0x24>
    37be:	80 e2       	ldi	r24, 0x20	; 32
    37c0:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    37c4:	cf 5f       	subi	r28, 0xFF	; 255
    37c6:	ca 30       	cpi	r28, 0x0A	; 10
    37c8:	98 f3       	brcs	.-26     	; 0x37b0 <LCDStringOut+0x14>
    37ca:	cf 91       	pop	r28
    37cc:	1f 91       	pop	r17
    37ce:	0f 91       	pop	r16
    37d0:	08 95       	ret

000037d2 <nibbleCheckOvfl>:
    37d2:	8a 30       	cpi	r24, 0x0A	; 10
    37d4:	1c f4       	brge	.+6      	; 0x37dc <nibbleCheckOvfl+0xa>
    37d6:	88 23       	and	r24, r24
    37d8:	1c f0       	brlt	.+6      	; 0x37e0 <nibbleCheckOvfl+0xe>
    37da:	08 95       	ret
    37dc:	80 e0       	ldi	r24, 0x00	; 0
    37de:	08 95       	ret
    37e0:	89 e0       	ldi	r24, 0x09	; 9
    37e2:	08 95       	ret

000037e4 <nibbleChange>:
    37e4:	0f 93       	push	r16
    37e6:	1f 93       	push	r17
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	c8 2f       	mov	r28, r24
    37ee:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    37f2:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    37f6:	31 96       	adiw	r30, 0x01	; 1
    37f8:	84 91       	lpm	r24, Z
    37fa:	28 2f       	mov	r18, r24
    37fc:	20 71       	andi	r18, 0x10	; 16
    37fe:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    3802:	8e 2f       	mov	r24, r30
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	fc 01       	movw	r30, r24
    3808:	32 97       	sbiw	r30, 0x02	; 2
    380a:	ec 30       	cpi	r30, 0x0C	; 12
    380c:	f1 05       	cpc	r31, r1
    380e:	08 f0       	brcs	.+2      	; 0x3812 <nibbleChange+0x2e>
    3810:	92 c1       	rjmp	.+804    	; 0x3b36 <nibbleChange+0x352>
    3812:	88 27       	eor	r24, r24
    3814:	e6 57       	subi	r30, 0x76	; 118
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	8f 4f       	sbci	r24, 0xFF	; 255
    381a:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__tablejump2__>
    381e:	d0 e0       	ldi	r29, 0x00	; 0
    3820:	c8 59       	subi	r28, 0x98	; 152
    3822:	da 4f       	sbci	r29, 0xFA	; 250
    3824:	88 81       	ld	r24, Y
    3826:	68 0f       	add	r22, r24
    3828:	6f 70       	andi	r22, 0x0F	; 15
    382a:	68 83       	st	Y, r22
    382c:	84 c1       	rjmp	.+776    	; 0x3b36 <nibbleChange+0x352>
    382e:	21 11       	cpse	r18, r1
    3830:	1a c0       	rjmp	.+52     	; 0x3866 <nibbleChange+0x82>
    3832:	61 30       	cpi	r22, 0x01	; 1
    3834:	41 f4       	brne	.+16     	; 0x3846 <nibbleChange+0x62>
    3836:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    383a:	80 31       	cpi	r24, 0x10	; 16
    383c:	21 f4       	brne	.+8      	; 0x3846 <nibbleChange+0x62>
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    3844:	78 c1       	rjmp	.+752    	; 0x3b36 <nibbleChange+0x352>
    3846:	6f 3f       	cpi	r22, 0xFF	; 255
    3848:	41 f4       	brne	.+16     	; 0x385a <nibbleChange+0x76>
    384a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	21 f4       	brne	.+8      	; 0x385a <nibbleChange+0x76>
    3852:	80 e1       	ldi	r24, 0x10	; 16
    3854:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    3858:	6e c1       	rjmp	.+732    	; 0x3b36 <nibbleChange+0x352>
    385a:	e8 e6       	ldi	r30, 0x68	; 104
    385c:	f5 e0       	ldi	r31, 0x05	; 5
    385e:	80 81       	ld	r24, Z
    3860:	68 0f       	add	r22, r24
    3862:	60 83       	st	Z, r22
    3864:	68 c1       	rjmp	.+720    	; 0x3b36 <nibbleChange+0x352>
    3866:	61 30       	cpi	r22, 0x01	; 1
    3868:	41 f4       	brne	.+16     	; 0x387a <nibbleChange+0x96>
    386a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    386e:	80 31       	cpi	r24, 0x10	; 16
    3870:	21 f4       	brne	.+8      	; 0x387a <nibbleChange+0x96>
    3872:	8f ef       	ldi	r24, 0xFF	; 255
    3874:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    3878:	5e c1       	rjmp	.+700    	; 0x3b36 <nibbleChange+0x352>
    387a:	61 30       	cpi	r22, 0x01	; 1
    387c:	41 f4       	brne	.+16     	; 0x388e <nibbleChange+0xaa>
    387e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3882:	8f 3f       	cpi	r24, 0xFF	; 255
    3884:	21 f4       	brne	.+8      	; 0x388e <nibbleChange+0xaa>
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    388c:	54 c1       	rjmp	.+680    	; 0x3b36 <nibbleChange+0x352>
    388e:	6f 3f       	cpi	r22, 0xFF	; 255
    3890:	41 f4       	brne	.+16     	; 0x38a2 <nibbleChange+0xbe>
    3892:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3896:	8f 3f       	cpi	r24, 0xFF	; 255
    3898:	21 f4       	brne	.+8      	; 0x38a2 <nibbleChange+0xbe>
    389a:	80 e1       	ldi	r24, 0x10	; 16
    389c:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    38a0:	4a c1       	rjmp	.+660    	; 0x3b36 <nibbleChange+0x352>
    38a2:	6f 3f       	cpi	r22, 0xFF	; 255
    38a4:	41 f4       	brne	.+16     	; 0x38b6 <nibbleChange+0xd2>
    38a6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    38aa:	81 30       	cpi	r24, 0x01	; 1
    38ac:	21 f4       	brne	.+8      	; 0x38b6 <nibbleChange+0xd2>
    38ae:	8f ef       	ldi	r24, 0xFF	; 255
    38b0:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <nibble>
    38b4:	40 c1       	rjmp	.+640    	; 0x3b36 <nibbleChange+0x352>
    38b6:	e8 e6       	ldi	r30, 0x68	; 104
    38b8:	f5 e0       	ldi	r31, 0x05	; 5
    38ba:	80 81       	ld	r24, Z
    38bc:	68 0f       	add	r22, r24
    38be:	60 83       	st	Z, r22
    38c0:	3a c1       	rjmp	.+628    	; 0x3b36 <nibbleChange+0x352>
    38c2:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <nibble+0x1>
    38c6:	8f 3f       	cpi	r24, 0xFF	; 255
    38c8:	09 f4       	brne	.+2      	; 0x38cc <nibbleChange+0xe8>
    38ca:	c1 e0       	ldi	r28, 0x01	; 1
    38cc:	c1 11       	cpse	r28, r1
    38ce:	16 c0       	rjmp	.+44     	; 0x38fc <nibbleChange+0x118>
    38d0:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    38d4:	8c 30       	cpi	r24, 0x0C	; 12
    38d6:	50 f4       	brcc	.+20     	; 0x38ec <nibbleChange+0x108>
    38d8:	8b 30       	cpi	r24, 0x0B	; 11
    38da:	11 f4       	brne	.+4      	; 0x38e0 <nibbleChange+0xfc>
    38dc:	61 30       	cpi	r22, 0x01	; 1
    38de:	41 f0       	breq	.+16     	; 0x38f0 <nibbleChange+0x10c>
    38e0:	81 11       	cpse	r24, r1
    38e2:	02 c0       	rjmp	.+4      	; 0x38e8 <nibbleChange+0x104>
    38e4:	6f 3f       	cpi	r22, 0xFF	; 255
    38e6:	31 f0       	breq	.+12     	; 0x38f4 <nibbleChange+0x110>
    38e8:	68 0f       	add	r22, r24
    38ea:	05 c0       	rjmp	.+10     	; 0x38f6 <nibbleChange+0x112>
    38ec:	60 e0       	ldi	r22, 0x00	; 0
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <nibbleChange+0x112>
    38f0:	60 e0       	ldi	r22, 0x00	; 0
    38f2:	01 c0       	rjmp	.+2      	; 0x38f6 <nibbleChange+0x112>
    38f4:	6b e0       	ldi	r22, 0x0B	; 11
    38f6:	60 93 68 05 	sts	0x0568, r22	; 0x800568 <nibble>
    38fa:	2b c0       	rjmp	.+86     	; 0x3952 <nibbleChange+0x16e>
    38fc:	21 11       	cpse	r18, r1
    38fe:	0a c0       	rjmp	.+20     	; 0x3914 <nibbleChange+0x130>
    3900:	81 11       	cpse	r24, r1
    3902:	02 c0       	rjmp	.+4      	; 0x3908 <nibbleChange+0x124>
    3904:	6f 3f       	cpi	r22, 0xFF	; 255
    3906:	c1 f0       	breq	.+48     	; 0x3938 <nibbleChange+0x154>
    3908:	8a 30       	cpi	r24, 0x0A	; 10
    390a:	11 f4       	brne	.+4      	; 0x3910 <nibbleChange+0x12c>
    390c:	61 30       	cpi	r22, 0x01	; 1
    390e:	b1 f0       	breq	.+44     	; 0x393c <nibbleChange+0x158>
    3910:	68 0f       	add	r22, r24
    3912:	1d c0       	rjmp	.+58     	; 0x394e <nibbleChange+0x16a>
    3914:	81 11       	cpse	r24, r1
    3916:	02 c0       	rjmp	.+4      	; 0x391c <nibbleChange+0x138>
    3918:	6f 3f       	cpi	r22, 0xFF	; 255
    391a:	91 f0       	breq	.+36     	; 0x3940 <nibbleChange+0x15c>
    391c:	8a 30       	cpi	r24, 0x0A	; 10
    391e:	11 f4       	brne	.+4      	; 0x3924 <nibbleChange+0x140>
    3920:	61 30       	cpi	r22, 0x01	; 1
    3922:	81 f0       	breq	.+32     	; 0x3944 <nibbleChange+0x160>
    3924:	8f 3f       	cpi	r24, 0xFF	; 255
    3926:	11 f4       	brne	.+4      	; 0x392c <nibbleChange+0x148>
    3928:	61 30       	cpi	r22, 0x01	; 1
    392a:	71 f0       	breq	.+28     	; 0x3948 <nibbleChange+0x164>
    392c:	8f 3f       	cpi	r24, 0xFF	; 255
    392e:	11 f4       	brne	.+4      	; 0x3934 <nibbleChange+0x150>
    3930:	6f 3f       	cpi	r22, 0xFF	; 255
    3932:	61 f0       	breq	.+24     	; 0x394c <nibbleChange+0x168>
    3934:	68 0f       	add	r22, r24
    3936:	0b c0       	rjmp	.+22     	; 0x394e <nibbleChange+0x16a>
    3938:	6a e0       	ldi	r22, 0x0A	; 10
    393a:	09 c0       	rjmp	.+18     	; 0x394e <nibbleChange+0x16a>
    393c:	60 e0       	ldi	r22, 0x00	; 0
    393e:	07 c0       	rjmp	.+14     	; 0x394e <nibbleChange+0x16a>
    3940:	6f ef       	ldi	r22, 0xFF	; 255
    3942:	05 c0       	rjmp	.+10     	; 0x394e <nibbleChange+0x16a>
    3944:	6f ef       	ldi	r22, 0xFF	; 255
    3946:	03 c0       	rjmp	.+6      	; 0x394e <nibbleChange+0x16a>
    3948:	60 e0       	ldi	r22, 0x00	; 0
    394a:	01 c0       	rjmp	.+2      	; 0x394e <nibbleChange+0x16a>
    394c:	6a e0       	ldi	r22, 0x0A	; 10
    394e:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <nibble+0x1>
    3952:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <nibble>
    3956:	9f 3f       	cpi	r25, 0xFF	; 255
    3958:	09 f4       	brne	.+2      	; 0x395c <nibbleChange+0x178>
    395a:	ed c0       	rjmp	.+474    	; 0x3b36 <nibbleChange+0x352>
    395c:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <nibble+0x1>
    3960:	8f 3f       	cpi	r24, 0xFF	; 255
    3962:	09 f4       	brne	.+2      	; 0x3966 <nibbleChange+0x182>
    3964:	e8 c0       	rjmp	.+464    	; 0x3b36 <nibbleChange+0x352>
    3966:	28 2f       	mov	r18, r24
    3968:	22 0f       	add	r18, r18
    396a:	82 0f       	add	r24, r18
    396c:	28 2f       	mov	r18, r24
    396e:	22 0f       	add	r18, r18
    3970:	22 0f       	add	r18, r18
    3972:	92 0f       	add	r25, r18
    3974:	0a f0       	brmi	.+2      	; 0x3978 <nibbleChange+0x194>
    3976:	df c0       	rjmp	.+446    	; 0x3b36 <nibbleChange+0x352>
    3978:	e8 e6       	ldi	r30, 0x68	; 104
    397a:	f5 e0       	ldi	r31, 0x05	; 5
    397c:	87 e0       	ldi	r24, 0x07	; 7
    397e:	80 83       	st	Z, r24
    3980:	8a e0       	ldi	r24, 0x0A	; 10
    3982:	81 83       	std	Z+1, r24	; 0x01
    3984:	d8 c0       	rjmp	.+432    	; 0x3b36 <nibbleChange+0x352>
    3986:	c1 11       	cpse	r28, r1
    3988:	07 c0       	rjmp	.+14     	; 0x3998 <nibbleChange+0x1b4>
    398a:	e8 e6       	ldi	r30, 0x68	; 104
    398c:	f5 e0       	ldi	r31, 0x05	; 5
    398e:	80 81       	ld	r24, Z
    3990:	68 0f       	add	r22, r24
    3992:	67 70       	andi	r22, 0x07	; 7
    3994:	60 83       	st	Z, r22
    3996:	cf c0       	rjmp	.+414    	; 0x3b36 <nibbleChange+0x352>
    3998:	d0 e0       	ldi	r29, 0x00	; 0
    399a:	08 e6       	ldi	r16, 0x68	; 104
    399c:	15 e0       	ldi	r17, 0x05	; 5
    399e:	c8 59       	subi	r28, 0x98	; 152
    39a0:	da 4f       	sbci	r29, 0xFA	; 250
    39a2:	88 81       	ld	r24, Y
    39a4:	86 0f       	add	r24, r22
    39a6:	15 df       	rcall	.-470    	; 0x37d2 <nibbleCheckOvfl>
    39a8:	88 83       	st	Y, r24
    39aa:	f8 01       	movw	r30, r16
    39ac:	81 81       	ldd	r24, Z+1	; 0x01
    39ae:	92 81       	ldd	r25, Z+2	; 0x02
    39b0:	88 0f       	add	r24, r24
    39b2:	28 2f       	mov	r18, r24
    39b4:	22 0f       	add	r18, r18
    39b6:	22 0f       	add	r18, r18
    39b8:	82 0f       	add	r24, r18
    39ba:	89 0f       	add	r24, r25
    39bc:	80 32       	cpi	r24, 0x20	; 32
    39be:	2c f0       	brlt	.+10     	; 0x39ca <nibbleChange+0x1e6>
    39c0:	83 e0       	ldi	r24, 0x03	; 3
    39c2:	81 83       	std	Z+1, r24	; 0x01
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	82 83       	std	Z+2, r24	; 0x02
    39c8:	b6 c0       	rjmp	.+364    	; 0x3b36 <nibbleChange+0x352>
    39ca:	88 23       	and	r24, r24
    39cc:	0c f0       	brlt	.+2      	; 0x39d0 <nibbleChange+0x1ec>
    39ce:	b3 c0       	rjmp	.+358    	; 0x3b36 <nibbleChange+0x352>
    39d0:	e8 e6       	ldi	r30, 0x68	; 104
    39d2:	f5 e0       	ldi	r31, 0x05	; 5
    39d4:	11 82       	std	Z+1, r1	; 0x01
    39d6:	12 82       	std	Z+2, r1	; 0x02
    39d8:	ae c0       	rjmp	.+348    	; 0x3b36 <nibbleChange+0x352>
    39da:	d0 e0       	ldi	r29, 0x00	; 0
    39dc:	08 e6       	ldi	r16, 0x68	; 104
    39de:	15 e0       	ldi	r17, 0x05	; 5
    39e0:	c8 59       	subi	r28, 0x98	; 152
    39e2:	da 4f       	sbci	r29, 0xFA	; 250
    39e4:	88 81       	ld	r24, Y
    39e6:	86 0f       	add	r24, r22
    39e8:	f4 de       	rcall	.-536    	; 0x37d2 <nibbleCheckOvfl>
    39ea:	88 83       	st	Y, r24
    39ec:	f8 01       	movw	r30, r16
    39ee:	20 81       	ld	r18, Z
    39f0:	81 81       	ldd	r24, Z+1	; 0x01
    39f2:	90 e0       	ldi	r25, 0x00	; 0
    39f4:	ac 01       	movw	r20, r24
    39f6:	44 0f       	add	r20, r20
    39f8:	55 1f       	adc	r21, r21
    39fa:	88 0f       	add	r24, r24
    39fc:	99 1f       	adc	r25, r25
    39fe:	88 0f       	add	r24, r24
    3a00:	99 1f       	adc	r25, r25
    3a02:	88 0f       	add	r24, r24
    3a04:	99 1f       	adc	r25, r25
    3a06:	84 0f       	add	r24, r20
    3a08:	95 1f       	adc	r25, r21
    3a0a:	f4 e6       	ldi	r31, 0x64	; 100
    3a0c:	2f 9f       	mul	r18, r31
    3a0e:	80 0d       	add	r24, r0
    3a10:	91 1d       	adc	r25, r1
    3a12:	11 24       	eor	r1, r1
    3a14:	f8 01       	movw	r30, r16
    3a16:	22 81       	ldd	r18, Z+2	; 0x02
    3a18:	82 0f       	add	r24, r18
    3a1a:	91 1d       	adc	r25, r1
    3a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a1e:	91 05       	cpc	r25, r1
    3a20:	09 f0       	breq	.+2      	; 0x3a24 <nibbleChange+0x240>
    3a22:	0c f4       	brge	.+2      	; 0x3a26 <nibbleChange+0x242>
    3a24:	88 c0       	rjmp	.+272    	; 0x3b36 <nibbleChange+0x352>
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	80 83       	st	Z, r24
    3a2a:	85 e0       	ldi	r24, 0x05	; 5
    3a2c:	81 83       	std	Z+1, r24	; 0x01
    3a2e:	82 83       	std	Z+2, r24	; 0x02
    3a30:	82 c0       	rjmp	.+260    	; 0x3b36 <nibbleChange+0x352>
    3a32:	22 23       	and	r18, r18
    3a34:	a1 f0       	breq	.+40     	; 0x3a5e <nibbleChange+0x27a>
    3a36:	d0 e0       	ldi	r29, 0x00	; 0
    3a38:	fe 01       	movw	r30, r28
    3a3a:	e8 59       	subi	r30, 0x98	; 152
    3a3c:	fa 4f       	sbci	r31, 0xFA	; 250
    3a3e:	80 81       	ld	r24, Z
    3a40:	68 0f       	add	r22, r24
    3a42:	60 83       	st	Z, r22
    3a44:	64 30       	cpi	r22, 0x04	; 4
    3a46:	19 f4       	brne	.+6      	; 0x3a4e <nibbleChange+0x26a>
    3a48:	8f ef       	ldi	r24, 0xFF	; 255
    3a4a:	80 83       	st	Z, r24
    3a4c:	74 c0       	rjmp	.+232    	; 0x3b36 <nibbleChange+0x352>
    3a4e:	6e 3f       	cpi	r22, 0xFE	; 254
    3a50:	09 f0       	breq	.+2      	; 0x3a54 <nibbleChange+0x270>
    3a52:	71 c0       	rjmp	.+226    	; 0x3b36 <nibbleChange+0x352>
    3a54:	c8 59       	subi	r28, 0x98	; 152
    3a56:	da 4f       	sbci	r29, 0xFA	; 250
    3a58:	83 e0       	ldi	r24, 0x03	; 3
    3a5a:	88 83       	st	Y, r24
    3a5c:	6c c0       	rjmp	.+216    	; 0x3b36 <nibbleChange+0x352>
    3a5e:	d0 e0       	ldi	r29, 0x00	; 0
    3a60:	fe 01       	movw	r30, r28
    3a62:	e8 59       	subi	r30, 0x98	; 152
    3a64:	fa 4f       	sbci	r31, 0xFA	; 250
    3a66:	80 81       	ld	r24, Z
    3a68:	81 11       	cpse	r24, r1
    3a6a:	05 c0       	rjmp	.+10     	; 0x3a76 <nibbleChange+0x292>
    3a6c:	6f 3f       	cpi	r22, 0xFF	; 255
    3a6e:	19 f4       	brne	.+6      	; 0x3a76 <nibbleChange+0x292>
    3a70:	83 e0       	ldi	r24, 0x03	; 3
    3a72:	80 83       	st	Z, r24
    3a74:	60 c0       	rjmp	.+192    	; 0x3b36 <nibbleChange+0x352>
    3a76:	83 30       	cpi	r24, 0x03	; 3
    3a78:	31 f4       	brne	.+12     	; 0x3a86 <nibbleChange+0x2a2>
    3a7a:	61 30       	cpi	r22, 0x01	; 1
    3a7c:	21 f4       	brne	.+8      	; 0x3a86 <nibbleChange+0x2a2>
    3a7e:	c8 59       	subi	r28, 0x98	; 152
    3a80:	da 4f       	sbci	r29, 0xFA	; 250
    3a82:	18 82       	st	Y, r1
    3a84:	58 c0       	rjmp	.+176    	; 0x3b36 <nibbleChange+0x352>
    3a86:	c8 59       	subi	r28, 0x98	; 152
    3a88:	da 4f       	sbci	r29, 0xFA	; 250
    3a8a:	68 0f       	add	r22, r24
    3a8c:	68 83       	st	Y, r22
    3a8e:	53 c0       	rjmp	.+166    	; 0x3b36 <nibbleChange+0x352>
    3a90:	d0 e0       	ldi	r29, 0x00	; 0
    3a92:	c8 59       	subi	r28, 0x98	; 152
    3a94:	da 4f       	sbci	r29, 0xFA	; 250
    3a96:	88 81       	ld	r24, Y
    3a98:	68 0f       	add	r22, r24
    3a9a:	63 70       	andi	r22, 0x03	; 3
    3a9c:	68 83       	st	Y, r22
    3a9e:	4b c0       	rjmp	.+150    	; 0x3b36 <nibbleChange+0x352>
    3aa0:	e8 e6       	ldi	r30, 0x68	; 104
    3aa2:	f5 e0       	ldi	r31, 0x05	; 5
    3aa4:	80 81       	ld	r24, Z
    3aa6:	80 95       	com	r24
    3aa8:	80 83       	st	Z, r24
    3aaa:	45 c0       	rjmp	.+138    	; 0x3b36 <nibbleChange+0x352>
    3aac:	d0 e0       	ldi	r29, 0x00	; 0
    3aae:	81 e0       	ldi	r24, 0x01	; 1
    3ab0:	61 fd       	sbrc	r22, 1
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	c8 59       	subi	r28, 0x98	; 152
    3ab6:	da 4f       	sbci	r29, 0xFA	; 250
    3ab8:	88 83       	st	Y, r24
    3aba:	3d c0       	rjmp	.+122    	; 0x3b36 <nibbleChange+0x352>
    3abc:	61 30       	cpi	r22, 0x01	; 1
    3abe:	41 f4       	brne	.+16     	; 0x3ad0 <nibbleChange+0x2ec>
    3ac0:	d0 e0       	ldi	r29, 0x00	; 0
    3ac2:	c8 59       	subi	r28, 0x98	; 152
    3ac4:	da 4f       	sbci	r29, 0xFA	; 250
    3ac6:	88 81       	ld	r24, Y
    3ac8:	87 70       	andi	r24, 0x07	; 7
    3aca:	8f 5f       	subi	r24, 0xFF	; 255
    3acc:	88 83       	st	Y, r24
    3ace:	33 c0       	rjmp	.+102    	; 0x3b36 <nibbleChange+0x352>
    3ad0:	ec 2f       	mov	r30, r28
    3ad2:	f0 e0       	ldi	r31, 0x00	; 0
    3ad4:	e8 59       	subi	r30, 0x98	; 152
    3ad6:	fa 4f       	sbci	r31, 0xFA	; 250
    3ad8:	80 81       	ld	r24, Z
    3ada:	82 50       	subi	r24, 0x02	; 2
    3adc:	87 70       	andi	r24, 0x07	; 7
    3ade:	8f 5f       	subi	r24, 0xFF	; 255
    3ae0:	80 83       	st	Z, r24
    3ae2:	29 c0       	rjmp	.+82     	; 0x3b36 <nibbleChange+0x352>
    3ae4:	e8 e6       	ldi	r30, 0x68	; 104
    3ae6:	f5 e0       	ldi	r31, 0x05	; 5
    3ae8:	90 81       	ld	r25, Z
    3aea:	81 81       	ldd	r24, Z+1	; 0x01
    3aec:	99 0f       	add	r25, r25
    3aee:	29 2f       	mov	r18, r25
    3af0:	22 0f       	add	r18, r18
    3af2:	22 0f       	add	r18, r18
    3af4:	92 0f       	add	r25, r18
    3af6:	89 0f       	add	r24, r25
    3af8:	c1 11       	cpse	r28, r1
    3afa:	07 c0       	rjmp	.+14     	; 0x3b0a <nibbleChange+0x326>
    3afc:	66 0f       	add	r22, r22
    3afe:	96 2f       	mov	r25, r22
    3b00:	99 0f       	add	r25, r25
    3b02:	99 0f       	add	r25, r25
    3b04:	69 0f       	add	r22, r25
    3b06:	68 0f       	add	r22, r24
    3b08:	01 c0       	rjmp	.+2      	; 0x3b0c <nibbleChange+0x328>
    3b0a:	68 0f       	add	r22, r24
    3b0c:	66 23       	and	r22, r22
    3b0e:	1c f0       	brlt	.+6      	; 0x3b16 <nibbleChange+0x332>
    3b10:	61 34       	cpi	r22, 0x41	; 65
    3b12:	1c f4       	brge	.+6      	; 0x3b1a <nibbleChange+0x336>
    3b14:	03 c0       	rjmp	.+6      	; 0x3b1c <nibbleChange+0x338>
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	01 c0       	rjmp	.+2      	; 0x3b1c <nibbleChange+0x338>
    3b1a:	60 e0       	ldi	r22, 0x00	; 0
    3b1c:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <nibble>
    3b20:	06 c0       	rjmp	.+12     	; 0x3b2e <nibbleChange+0x34a>
    3b22:	e8 e6       	ldi	r30, 0x68	; 104
    3b24:	f5 e0       	ldi	r31, 0x05	; 5
    3b26:	80 81       	ld	r24, Z
    3b28:	8f 5f       	subi	r24, 0xFF	; 255
    3b2a:	80 83       	st	Z, r24
    3b2c:	6a 50       	subi	r22, 0x0A	; 10
    3b2e:	6a 30       	cpi	r22, 0x0A	; 10
    3b30:	c4 f7       	brge	.-16     	; 0x3b22 <nibbleChange+0x33e>
    3b32:	60 93 69 05 	sts	0x0569, r22	; 0x800569 <nibble+0x1>
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	1f 91       	pop	r17
    3b3c:	0f 91       	pop	r16
    3b3e:	08 95       	ret

00003b40 <nibbleToData>:
    3b40:	e0 91 1a 05 	lds	r30, 0x051A	; 0x80051a <dataType>
    3b44:	8e 2f       	mov	r24, r30
    3b46:	90 e0       	ldi	r25, 0x00	; 0
    3b48:	fc 01       	movw	r30, r24
    3b4a:	32 97       	sbiw	r30, 0x02	; 2
    3b4c:	ec 30       	cpi	r30, 0x0C	; 12
    3b4e:	f1 05       	cpc	r31, r1
    3b50:	08 f0       	brcs	.+2      	; 0x3b54 <nibbleToData+0x14>
    3b52:	d9 c0       	rjmp	.+434    	; 0x3d06 <nibbleToData+0x1c6>
    3b54:	88 27       	eor	r24, r24
    3b56:	ea 56       	subi	r30, 0x6A	; 106
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b5c:	0c 94 f2 2f 	jmp	0x5fe4	; 0x5fe4 <__tablejump2__>
    3b60:	e8 e6       	ldi	r30, 0x68	; 104
    3b62:	f5 e0       	ldi	r31, 0x05	; 5
    3b64:	80 81       	ld	r24, Z
    3b66:	20 e1       	ldi	r18, 0x10	; 16
    3b68:	82 9f       	mul	r24, r18
    3b6a:	c0 01       	movw	r24, r0
    3b6c:	11 24       	eor	r1, r1
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	9f 70       	andi	r25, 0x0F	; 15
    3b72:	89 2b       	or	r24, r25
    3b74:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3b78:	08 95       	ret
    3b7a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3b7e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b80:	19 f4       	brne	.+6      	; 0x3b88 <nibbleToData+0x48>
    3b82:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3b86:	08 95       	ret
    3b88:	81 50       	subi	r24, 0x01	; 1
    3b8a:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3b8e:	08 95       	ret
    3b90:	90 91 68 05 	lds	r25, 0x0568	; 0x800568 <nibble>
    3b94:	9f 3f       	cpi	r25, 0xFF	; 255
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <nibbleToData+0x60>
    3b98:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <nibble+0x1>
    3b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b9e:	21 f4       	brne	.+8      	; 0x3ba8 <nibbleToData+0x68>
    3ba0:	8f ef       	ldi	r24, 0xFF	; 255
    3ba2:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3ba6:	08 95       	ret
    3ba8:	28 2f       	mov	r18, r24
    3baa:	22 0f       	add	r18, r18
    3bac:	82 0f       	add	r24, r18
    3bae:	88 0f       	add	r24, r24
    3bb0:	88 0f       	add	r24, r24
    3bb2:	89 0f       	add	r24, r25
    3bb4:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3bb8:	08 95       	ret
    3bba:	e8 e6       	ldi	r30, 0x68	; 104
    3bbc:	f5 e0       	ldi	r31, 0x05	; 5
    3bbe:	80 81       	ld	r24, Z
    3bc0:	30 e2       	ldi	r19, 0x20	; 32
    3bc2:	83 9f       	mul	r24, r19
    3bc4:	c0 01       	movw	r24, r0
    3bc6:	11 24       	eor	r1, r1
    3bc8:	21 81       	ldd	r18, Z+1	; 0x01
    3bca:	32 81       	ldd	r19, Z+2	; 0x02
    3bcc:	22 0f       	add	r18, r18
    3bce:	42 2f       	mov	r20, r18
    3bd0:	44 0f       	add	r20, r20
    3bd2:	44 0f       	add	r20, r20
    3bd4:	24 0f       	add	r18, r20
    3bd6:	23 0f       	add	r18, r19
    3bd8:	20 32       	cpi	r18, 0x20	; 32
    3bda:	20 f0       	brcs	.+8      	; 0x3be4 <nibbleToData+0xa4>
    3bdc:	8f 61       	ori	r24, 0x1F	; 31
    3bde:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3be2:	08 95       	ret
    3be4:	82 2b       	or	r24, r18
    3be6:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3bea:	08 95       	ret
    3bec:	e8 e6       	ldi	r30, 0x68	; 104
    3bee:	f5 e0       	ldi	r31, 0x05	; 5
    3bf0:	20 81       	ld	r18, Z
    3bf2:	81 81       	ldd	r24, Z+1	; 0x01
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	ac 01       	movw	r20, r24
    3bf8:	44 0f       	add	r20, r20
    3bfa:	55 1f       	adc	r21, r21
    3bfc:	88 0f       	add	r24, r24
    3bfe:	99 1f       	adc	r25, r25
    3c00:	88 0f       	add	r24, r24
    3c02:	99 1f       	adc	r25, r25
    3c04:	88 0f       	add	r24, r24
    3c06:	99 1f       	adc	r25, r25
    3c08:	84 0f       	add	r24, r20
    3c0a:	95 1f       	adc	r25, r21
    3c0c:	34 e6       	ldi	r19, 0x64	; 100
    3c0e:	23 9f       	mul	r18, r19
    3c10:	80 0d       	add	r24, r0
    3c12:	91 1d       	adc	r25, r1
    3c14:	11 24       	eor	r1, r1
    3c16:	22 81       	ldd	r18, Z+2	; 0x02
    3c18:	82 0f       	add	r24, r18
    3c1a:	91 1d       	adc	r25, r1
    3c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c1e:	91 05       	cpc	r25, r1
    3c20:	29 f0       	breq	.+10     	; 0x3c2c <nibbleToData+0xec>
    3c22:	20 f0       	brcs	.+8      	; 0x3c2c <nibbleToData+0xec>
    3c24:	8f ef       	ldi	r24, 0xFF	; 255
    3c26:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3c2a:	08 95       	ret
    3c2c:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3c30:	08 95       	ret
    3c32:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3c36:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3c3a:	84 30       	cpi	r24, 0x04	; 4
    3c3c:	08 f4       	brcc	.+2      	; 0x3c40 <nibbleToData+0x100>
    3c3e:	63 c0       	rjmp	.+198    	; 0x3d06 <nibbleToData+0x1c6>
    3c40:	8f ef       	ldi	r24, 0xFF	; 255
    3c42:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3c46:	08 95       	ret
    3c48:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3c4c:	83 70       	andi	r24, 0x03	; 3
    3c4e:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3c52:	08 95       	ret
    3c54:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <nibble>
    3c58:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3c5c:	08 95       	ret
    3c5e:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <dataEntry>
    3c62:	80 e0       	ldi	r24, 0x00	; 0
    3c64:	0c c0       	rjmp	.+24     	; 0x3c7e <nibbleToData+0x13e>
    3c66:	90 91 5d 05 	lds	r25, 0x055D	; 0x80055d <dataEntry>
    3c6a:	99 0f       	add	r25, r25
    3c6c:	e8 2f       	mov	r30, r24
    3c6e:	f0 e0       	ldi	r31, 0x00	; 0
    3c70:	e8 59       	subi	r30, 0x98	; 152
    3c72:	fa 4f       	sbci	r31, 0xFA	; 250
    3c74:	20 81       	ld	r18, Z
    3c76:	92 0f       	add	r25, r18
    3c78:	90 93 5d 05 	sts	0x055D, r25	; 0x80055d <dataEntry>
    3c7c:	8f 5f       	subi	r24, 0xFF	; 255
    3c7e:	88 30       	cpi	r24, 0x08	; 8
    3c80:	90 f3       	brcs	.-28     	; 0x3c66 <nibbleToData+0x126>
    3c82:	08 95       	ret
    3c84:	10 92 46 05 	sts	0x0546, r1	; 0x800546 <dataEntry32>
    3c88:	10 92 47 05 	sts	0x0547, r1	; 0x800547 <dataEntry32+0x1>
    3c8c:	10 92 48 05 	sts	0x0548, r1	; 0x800548 <dataEntry32+0x2>
    3c90:	10 92 49 05 	sts	0x0549, r1	; 0x800549 <dataEntry32+0x3>
    3c94:	a6 e4       	ldi	r26, 0x46	; 70
    3c96:	b5 e0       	ldi	r27, 0x05	; 5
    3c98:	88 e0       	ldi	r24, 0x08	; 8
    3c9a:	10 c0       	rjmp	.+32     	; 0x3cbc <nibbleToData+0x17c>
    3c9c:	82 50       	subi	r24, 0x02	; 2
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	e8 59       	subi	r30, 0x98	; 152
    3ca2:	fa 4f       	sbci	r31, 0xFA	; 250
    3ca4:	90 81       	ld	r25, Z
    3ca6:	e8 2f       	mov	r30, r24
    3ca8:	f0 e0       	ldi	r31, 0x00	; 0
    3caa:	e8 59       	subi	r30, 0x98	; 152
    3cac:	fa 4f       	sbci	r31, 0xFA	; 250
    3cae:	20 81       	ld	r18, Z
    3cb0:	30 e1       	ldi	r19, 0x10	; 16
    3cb2:	23 9f       	mul	r18, r19
    3cb4:	90 0d       	add	r25, r0
    3cb6:	11 24       	eor	r1, r1
    3cb8:	9c 93       	st	X, r25
    3cba:	11 96       	adiw	r26, 0x01	; 1
    3cbc:	ef ef       	ldi	r30, 0xFF	; 255
    3cbe:	e8 0f       	add	r30, r24
    3cc0:	81 11       	cpse	r24, r1
    3cc2:	ec cf       	rjmp	.-40     	; 0x3c9c <nibbleToData+0x15c>
    3cc4:	08 95       	ret
    3cc6:	e8 e6       	ldi	r30, 0x68	; 104
    3cc8:	f5 e0       	ldi	r31, 0x05	; 5
    3cca:	20 81       	ld	r18, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	89 2f       	mov	r24, r25
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	01 97       	sbiw	r24, 0x01	; 1
    3cd4:	88 0f       	add	r24, r24
    3cd6:	99 1f       	adc	r25, r25
    3cd8:	88 0f       	add	r24, r24
    3cda:	99 1f       	adc	r25, r25
    3cdc:	88 0f       	add	r24, r24
    3cde:	99 1f       	adc	r25, r25
    3ce0:	9f ef       	ldi	r25, 0xFF	; 255
    3ce2:	92 0f       	add	r25, r18
    3ce4:	89 2b       	or	r24, r25
    3ce6:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3cea:	08 95       	ret
    3cec:	e8 e6       	ldi	r30, 0x68	; 104
    3cee:	f5 e0       	ldi	r31, 0x05	; 5
    3cf0:	80 81       	ld	r24, Z
    3cf2:	91 81       	ldd	r25, Z+1	; 0x01
    3cf4:	88 0f       	add	r24, r24
    3cf6:	28 2f       	mov	r18, r24
    3cf8:	22 0f       	add	r18, r18
    3cfa:	22 0f       	add	r18, r18
    3cfc:	82 0f       	add	r24, r18
    3cfe:	89 0f       	add	r24, r25
    3d00:	81 50       	subi	r24, 0x01	; 1
    3d02:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    3d06:	08 95       	ret

00003d08 <menuTextOut>:
    3d08:	0f 93       	push	r16
    3d0a:	1f 93       	push	r17
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	8c 01       	movw	r16, r24
    3d12:	d6 2f       	mov	r29, r22
    3d14:	c0 e0       	ldi	r28, 0x00	; 0
    3d16:	0c c0       	rjmp	.+24     	; 0x3d30 <menuTextOut+0x28>
    3d18:	f8 01       	movw	r30, r16
    3d1a:	84 91       	lpm	r24, Z
    3d1c:	88 23       	and	r24, r24
    3d1e:	19 f0       	breq	.+6      	; 0x3d26 <menuTextOut+0x1e>
    3d20:	0f 5f       	subi	r16, 0xFF	; 255
    3d22:	1f 4f       	sbci	r17, 0xFF	; 255
    3d24:	02 c0       	rjmp	.+4      	; 0x3d2a <menuTextOut+0x22>
    3d26:	8d 2f       	mov	r24, r29
    3d28:	d0 e2       	ldi	r29, 0x20	; 32
    3d2a:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    3d2e:	cf 5f       	subi	r28, 0xFF	; 255
    3d30:	ca 30       	cpi	r28, 0x0A	; 10
    3d32:	90 f3       	brcs	.-28     	; 0x3d18 <menuTextOut+0x10>
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	1f 91       	pop	r17
    3d3a:	0f 91       	pop	r16
    3d3c:	08 95       	ret

00003d3e <menuParentMenuToLCD>:
    3d3e:	80 e4       	ldi	r24, 0x40	; 64
    3d40:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    3d44:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <menuStackIndex>
    3d48:	e1 11       	cpse	r30, r1
    3d4a:	07 c0       	rjmp	.+14     	; 0x3d5a <menuParentMenuToLCD+0x1c>
    3d4c:	6a e3       	ldi	r22, 0x3A	; 58
    3d4e:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pMenuTopTitle>
    3d52:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pMenuTopTitle+0x1>
    3d56:	d8 cf       	rjmp	.-80     	; 0x3d08 <menuTextOut>
    3d58:	08 95       	ret
    3d5a:	f0 e0       	ldi	r31, 0x00	; 0
    3d5c:	31 97       	sbiw	r30, 0x01	; 1
    3d5e:	ee 0f       	add	r30, r30
    3d60:	ff 1f       	adc	r31, r31
    3d62:	e0 5e       	subi	r30, 0xE0	; 224
    3d64:	fa 4f       	sbci	r31, 0xFA	; 250
    3d66:	80 81       	ld	r24, Z
    3d68:	91 81       	ldd	r25, Z+1	; 0x01
    3d6a:	6a e3       	ldi	r22, 0x3A	; 58
    3d6c:	02 96       	adiw	r24, 0x02	; 2
    3d6e:	cc cf       	rjmp	.-104    	; 0x3d08 <menuTextOut>
    3d70:	08 95       	ret

00003d72 <menuDisplayValue>:
    3d72:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    3d76:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    3d7a:	84 91       	lpm	r24, Z
    3d7c:	8f 73       	andi	r24, 0x3F	; 63
    3d7e:	90 e0       	ldi	r25, 0x00	; 0
    3d80:	02 97       	sbiw	r24, 0x02	; 2
    3d82:	1c f0       	brlt	.+6      	; 0x3d8a <menuDisplayValue+0x18>
    3d84:	df da       	rcall	.-2626   	; 0x3344 <dataToNibbles>
    3d86:	d1 db       	rcall	.-2142   	; 0x352a <nibbleToLCDstring>
    3d88:	09 cd       	rjmp	.-1518   	; 0x379c <LCDStringOut>
    3d8a:	08 95       	ret

00003d8c <menuCursorSetDataNibble>:
    3d8c:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    3d90:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    3d94:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <nibbleIndex>
    3d98:	e8 0f       	add	r30, r24
    3d9a:	f1 1d       	adc	r31, r1
    3d9c:	31 96       	adiw	r30, 0x01	; 1
    3d9e:	84 91       	lpm	r24, Z
    3da0:	82 5e       	subi	r24, 0xE2	; 226
    3da2:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    3da6:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <nibbleIndex>
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    3db0:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    3db4:	84 91       	lpm	r24, Z
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	28 17       	cp	r18, r24
    3dbc:	39 07       	cpc	r19, r25
    3dbe:	14 f4       	brge	.+4      	; 0x3dc4 <menuCursorSetDataNibble+0x38>
    3dc0:	8f da       	rcall	.-2786   	; 0x32e0 <softkeyRight>
    3dc2:	03 c0       	rjmp	.+6      	; 0x3dca <menuCursorSetDataNibble+0x3e>
    3dc4:	83 e0       	ldi	r24, 0x03	; 3
    3dc6:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    3dca:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <nibbleIndex>
    3dce:	88 23       	and	r24, r24
    3dd0:	11 f0       	breq	.+4      	; 0x3dd6 <menuCursorSetDataNibble+0x4a>
    3dd2:	80 da       	rcall	.-2816   	; 0x32d4 <softkeyLeft>
    3dd4:	03 c0       	rjmp	.+6      	; 0x3ddc <menuCursorSetDataNibble+0x50>
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    3ddc:	93 da       	rcall	.-2778   	; 0x3304 <softkeyPlus>
    3dde:	a2 da       	rcall	.-2748   	; 0x3324 <softkeyMinus>
    3de0:	0c 94 b0 2f 	jmp	0x5f60	; 0x5f60 <keylabel_toLCD>
    3de4:	08 95       	ret

00003de6 <menuCursorSetExtra>:
    3de6:	84 e1       	ldi	r24, 0x14	; 20
    3de8:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <lcd_goto>
    3dec:	08 95       	ret

00003dee <menuOnEnterStatusMidiIn>:
    3dee:	0f 93       	push	r16
    3df0:	1f 93       	push	r17
    3df2:	cf 93       	push	r28
    3df4:	f8 df       	rcall	.-16     	; 0x3de6 <menuCursorSetExtra>
    3df6:	8e e4       	ldi	r24, 0x4E	; 78
    3df8:	93 e0       	ldi	r25, 0x03	; 3
    3dfa:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    3dfe:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <midiRxBytesCount>
    3e02:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <midiRxBytesCount+0x1>
    3e06:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <lcd_wordout>
    3e0a:	8d e2       	ldi	r24, 0x2D	; 45
    3e0c:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    3e10:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <midiRxBytesCount>
    3e14:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <midiRxBytesCount+0x1>
    3e18:	04 97       	sbiw	r24, 0x04	; 4
    3e1a:	30 f4       	brcc	.+12     	; 0x3e28 <menuOnEnterStatusMidiIn+0x3a>
    3e1c:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <midiRxBytesCount>
    3e20:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <midiRxBytesCount+0x1>
    3e24:	c8 2f       	mov	r28, r24
    3e26:	01 c0       	rjmp	.+2      	; 0x3e2a <menuOnEnterStatusMidiIn+0x3c>
    3e28:	c4 e0       	ldi	r28, 0x04	; 4
    3e2a:	00 91 46 0b 	lds	r16, 0x0B46	; 0x800b46 <midiRxInIndex>
    3e2e:	10 e0       	ldi	r17, 0x00	; 0
    3e30:	0b 5f       	subi	r16, 0xFB	; 251
    3e32:	14 4f       	sbci	r17, 0xF4	; 244
    3e34:	13 c0       	rjmp	.+38     	; 0x3e5c <menuOnEnterStatusMidiIn+0x6e>
    3e36:	8b e0       	ldi	r24, 0x0B	; 11
    3e38:	06 30       	cpi	r16, 0x06	; 6
    3e3a:	18 07       	cpc	r17, r24
    3e3c:	10 f0       	brcs	.+4      	; 0x3e42 <menuOnEnterStatusMidiIn+0x54>
    3e3e:	f8 01       	movw	r30, r16
    3e40:	02 c0       	rjmp	.+4      	; 0x3e46 <menuOnEnterStatusMidiIn+0x58>
    3e42:	e5 e2       	ldi	r30, 0x25	; 37
    3e44:	fb e0       	ldi	r31, 0x0B	; 11
    3e46:	8f 01       	movw	r16, r30
    3e48:	01 50       	subi	r16, 0x01	; 1
    3e4a:	11 09       	sbc	r17, r1
    3e4c:	80 81       	ld	r24, Z
    3e4e:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <lcd_hexout>
    3e52:	c1 50       	subi	r28, 0x01	; 1
    3e54:	19 f0       	breq	.+6      	; 0x3e5c <menuOnEnterStatusMidiIn+0x6e>
    3e56:	80 e2       	ldi	r24, 0x20	; 32
    3e58:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    3e5c:	c1 11       	cpse	r28, r1
    3e5e:	eb cf       	rjmp	.-42     	; 0x3e36 <menuOnEnterStatusMidiIn+0x48>
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	cf 91       	pop	r28
    3e64:	1f 91       	pop	r17
    3e66:	0f 91       	pop	r16
    3e68:	08 95       	ret

00003e6a <menuOnEnterStatusMidiOut>:
    3e6a:	0f 93       	push	r16
    3e6c:	1f 93       	push	r17
    3e6e:	cf 93       	push	r28
    3e70:	ba df       	rcall	.-140    	; 0x3de6 <menuCursorSetExtra>
    3e72:	89 e4       	ldi	r24, 0x49	; 73
    3e74:	93 e0       	ldi	r25, 0x03	; 3
    3e76:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    3e7a:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <midiTxBytesCount>
    3e7e:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <midiTxBytesCount+0x1>
    3e82:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <lcd_wordout>
    3e86:	8d e2       	ldi	r24, 0x2D	; 45
    3e88:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    3e8c:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <midiTxBytesCount>
    3e90:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <midiTxBytesCount+0x1>
    3e94:	04 97       	sbiw	r24, 0x04	; 4
    3e96:	30 f4       	brcc	.+12     	; 0x3ea4 <menuOnEnterStatusMidiOut+0x3a>
    3e98:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <midiTxBytesCount>
    3e9c:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <midiTxBytesCount+0x1>
    3ea0:	c8 2f       	mov	r28, r24
    3ea2:	01 c0       	rjmp	.+2      	; 0x3ea6 <menuOnEnterStatusMidiOut+0x3c>
    3ea4:	c4 e0       	ldi	r28, 0x04	; 4
    3ea6:	00 91 01 0b 	lds	r16, 0x0B01	; 0x800b01 <midiTxInIndex>
    3eaa:	10 e0       	ldi	r17, 0x00	; 0
    3eac:	0b 5d       	subi	r16, 0xDB	; 219
    3eae:	14 4f       	sbci	r17, 0xF4	; 244
    3eb0:	13 c0       	rjmp	.+38     	; 0x3ed8 <menuOnEnterStatusMidiOut+0x6e>
    3eb2:	8b e0       	ldi	r24, 0x0B	; 11
    3eb4:	06 32       	cpi	r16, 0x26	; 38
    3eb6:	18 07       	cpc	r17, r24
    3eb8:	10 f0       	brcs	.+4      	; 0x3ebe <menuOnEnterStatusMidiOut+0x54>
    3eba:	f8 01       	movw	r30, r16
    3ebc:	02 c0       	rjmp	.+4      	; 0x3ec2 <menuOnEnterStatusMidiOut+0x58>
    3ebe:	e5 e4       	ldi	r30, 0x45	; 69
    3ec0:	fb e0       	ldi	r31, 0x0B	; 11
    3ec2:	8f 01       	movw	r16, r30
    3ec4:	01 50       	subi	r16, 0x01	; 1
    3ec6:	11 09       	sbc	r17, r1
    3ec8:	80 81       	ld	r24, Z
    3eca:	0e 94 7d 2d 	call	0x5afa	; 0x5afa <lcd_hexout>
    3ece:	c1 50       	subi	r28, 0x01	; 1
    3ed0:	19 f0       	breq	.+6      	; 0x3ed8 <menuOnEnterStatusMidiOut+0x6e>
    3ed2:	80 e2       	ldi	r24, 0x20	; 32
    3ed4:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    3ed8:	c1 11       	cpse	r28, r1
    3eda:	eb cf       	rjmp	.-42     	; 0x3eb2 <menuOnEnterStatusMidiOut+0x48>
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	cf 91       	pop	r28
    3ee0:	1f 91       	pop	r17
    3ee2:	0f 91       	pop	r16
    3ee4:	08 95       	ret

00003ee6 <menuOnEnterLogDisp>:
    3ee6:	0f 93       	push	r16
    3ee8:	1f 93       	push	r17
    3eea:	cf 93       	push	r28
    3eec:	8f 3f       	cpi	r24, 0xFF	; 255
    3eee:	a9 f4       	brne	.+42     	; 0x3f1a <menuOnEnterLogDisp+0x34>
    3ef0:	0e 94 37 11 	call	0x226e	; 0x226e <log_count>
    3ef4:	81 50       	subi	r24, 0x01	; 1
    3ef6:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <logEntryNr.2840>
    3efa:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <showText.2841>
    3efe:	64 ec       	ldi	r22, 0xC4	; 196
    3f00:	7f e0       	ldi	r23, 0x0F	; 15
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    3f08:	6e eb       	ldi	r22, 0xBE	; 190
    3f0a:	7f e0       	ldi	r23, 0x0F	; 15
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    3f12:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
    3f16:	cf ef       	ldi	r28, 0xFF	; 255
    3f18:	2f c0       	rjmp	.+94     	; 0x3f78 <menuOnEnterLogDisp+0x92>
    3f1a:	84 30       	cpi	r24, 0x04	; 4
    3f1c:	49 f4       	brne	.+18     	; 0x3f30 <menuOnEnterLogDisp+0x4a>
    3f1e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2840>
    3f22:	88 23       	and	r24, r24
    3f24:	21 f1       	breq	.+72     	; 0x3f6e <menuOnEnterLogDisp+0x88>
    3f26:	81 50       	subi	r24, 0x01	; 1
    3f28:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <logEntryNr.2840>
    3f2c:	cf ef       	ldi	r28, 0xFF	; 255
    3f2e:	24 c0       	rjmp	.+72     	; 0x3f78 <menuOnEnterLogDisp+0x92>
    3f30:	81 30       	cpi	r24, 0x01	; 1
    3f32:	91 f4       	brne	.+36     	; 0x3f58 <menuOnEnterLogDisp+0x72>
    3f34:	00 91 09 02 	lds	r16, 0x0209	; 0x800209 <logEntryNr.2840>
    3f38:	10 e0       	ldi	r17, 0x00	; 0
    3f3a:	0f 5f       	subi	r16, 0xFF	; 255
    3f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f3e:	0e 94 37 11 	call	0x226e	; 0x226e <log_count>
    3f42:	90 e0       	ldi	r25, 0x00	; 0
    3f44:	08 17       	cp	r16, r24
    3f46:	19 07       	cpc	r17, r25
    3f48:	a4 f4       	brge	.+40     	; 0x3f72 <menuOnEnterLogDisp+0x8c>
    3f4a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2840>
    3f4e:	8f 5f       	subi	r24, 0xFF	; 255
    3f50:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <logEntryNr.2840>
    3f54:	cf ef       	ldi	r28, 0xFF	; 255
    3f56:	10 c0       	rjmp	.+32     	; 0x3f78 <menuOnEnterLogDisp+0x92>
    3f58:	83 30       	cpi	r24, 0x03	; 3
    3f5a:	11 f0       	breq	.+4      	; 0x3f60 <menuOnEnterLogDisp+0x7a>
    3f5c:	85 30       	cpi	r24, 0x05	; 5
    3f5e:	59 f4       	brne	.+22     	; 0x3f76 <menuOnEnterLogDisp+0x90>
    3f60:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <showText.2841>
    3f64:	80 95       	com	r24
    3f66:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <showText.2841>
    3f6a:	cf ef       	ldi	r28, 0xFF	; 255
    3f6c:	05 c0       	rjmp	.+10     	; 0x3f78 <menuOnEnterLogDisp+0x92>
    3f6e:	cf ef       	ldi	r28, 0xFF	; 255
    3f70:	03 c0       	rjmp	.+6      	; 0x3f78 <menuOnEnterLogDisp+0x92>
    3f72:	cf ef       	ldi	r28, 0xFF	; 255
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <menuOnEnterLogDisp+0x92>
    3f76:	c0 e0       	ldi	r28, 0x00	; 0
    3f78:	cf 3f       	cpi	r28, 0xFF	; 255
    3f7a:	09 f0       	breq	.+2      	; 0x3f7e <menuOnEnterLogDisp+0x98>
    3f7c:	56 c0       	rjmp	.+172    	; 0x402a <menuOnEnterLogDisp+0x144>
    3f7e:	84 e1       	ldi	r24, 0x14	; 20
    3f80:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    3f84:	0e 94 37 11 	call	0x226e	; 0x226e <log_count>
    3f88:	81 11       	cpse	r24, r1
    3f8a:	06 c0       	rjmp	.+12     	; 0x3f98 <menuOnEnterLogDisp+0xb2>
    3f8c:	8c e2       	ldi	r24, 0x2C	; 44
    3f8e:	93 e0       	ldi	r25, 0x03	; 3
    3f90:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    3f94:	c0 e0       	ldi	r28, 0x00	; 0
    3f96:	1d c0       	rjmp	.+58     	; 0x3fd2 <menuOnEnterLogDisp+0xec>
    3f98:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2840>
    3f9c:	8f 5f       	subi	r24, 0xFF	; 255
    3f9e:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <lcd_dec2out>
    3fa2:	8a e3       	ldi	r24, 0x3A	; 58
    3fa4:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    3fa8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <showText.2841>
    3fac:	81 11       	cpse	r24, r1
    3fae:	08 c0       	rjmp	.+16     	; 0x3fc0 <menuOnEnterLogDisp+0xda>
    3fb0:	60 e2       	ldi	r22, 0x20	; 32
    3fb2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2840>
    3fb6:	0e 94 db 12 	call	0x25b6	; 0x25b6 <log_getShortTextFromIndex>
    3fba:	0e 94 0c 11 	call	0x2218	; 0x2218 <lcd_puts>
    3fbe:	06 c0       	rjmp	.+12     	; 0x3fcc <menuOnEnterLogDisp+0xe6>
    3fc0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2840>
    3fc4:	0e 94 7e 11 	call	0x22fc	; 0x22fc <getErrorText>
    3fc8:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    3fcc:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <lcd_clrEol>
    3fd0:	0a df       	rcall	.-492    	; 0x3de6 <menuCursorSetExtra>
    3fd2:	61 e0       	ldi	r22, 0x01	; 1
    3fd4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <showText.2841>
    3fd8:	8f 3f       	cpi	r24, 0xFF	; 255
    3fda:	09 f0       	breq	.+2      	; 0x3fde <menuOnEnterLogDisp+0xf8>
    3fdc:	60 e0       	ldi	r22, 0x00	; 0
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <keylabel_statcheck>
    3fe4:	00 91 09 02 	lds	r16, 0x0209	; 0x800209 <logEntryNr.2840>
    3fe8:	10 e0       	ldi	r17, 0x00	; 0
    3fea:	0f 5f       	subi	r16, 0xFF	; 255
    3fec:	1f 4f       	sbci	r17, 0xFF	; 255
    3fee:	0e 94 37 11 	call	0x226e	; 0x226e <log_count>
    3ff2:	90 e0       	ldi	r25, 0x00	; 0
    3ff4:	08 17       	cp	r16, r24
    3ff6:	19 07       	cpc	r17, r25
    3ff8:	34 f4       	brge	.+12     	; 0x4006 <menuOnEnterLogDisp+0x120>
    3ffa:	64 ed       	ldi	r22, 0xD4	; 212
    3ffc:	7f e0       	ldi	r23, 0x0F	; 15
    3ffe:	83 e0       	ldi	r24, 0x03	; 3
    4000:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    4004:	03 c0       	rjmp	.+6      	; 0x400c <menuOnEnterLogDisp+0x126>
    4006:	83 e0       	ldi	r24, 0x03	; 3
    4008:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    400c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <logEntryNr.2840>
    4010:	88 23       	and	r24, r24
    4012:	31 f0       	breq	.+12     	; 0x4020 <menuOnEnterLogDisp+0x13a>
    4014:	62 ed       	ldi	r22, 0xD2	; 210
    4016:	7f e0       	ldi	r23, 0x0F	; 15
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
    401e:	03 c0       	rjmp	.+6      	; 0x4026 <menuOnEnterLogDisp+0x140>
    4020:	82 e0       	ldi	r24, 0x02	; 2
    4022:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    4026:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
    402a:	8c 2f       	mov	r24, r28
    402c:	cf 91       	pop	r28
    402e:	1f 91       	pop	r17
    4030:	0f 91       	pop	r16
    4032:	08 95       	ret

00004034 <menuCursorSetMenu>:
    4034:	8a e4       	ldi	r24, 0x4A	; 74
    4036:	0c 94 fa 10 	jmp	0x21f4	; 0x21f4 <lcd_goto>
    403a:	08 95       	ret

0000403c <menu_OnEnterMidiPanic>:
    403c:	8e e1       	ldi	r24, 0x1E	; 30
    403e:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    4042:	8e e3       	ldi	r24, 0x3E	; 62
    4044:	93 e0       	ldi	r25, 0x03	; 3
    4046:	0e 94 1c 11 	call	0x2238	; 0x2238 <lcd_puts_P>
    404a:	9f b7       	in	r25, 0x3f	; 63
    404c:	f8 94       	cli
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	06 c0       	rjmp	.+12     	; 0x405e <menu_OnEnterMidiPanic+0x22>
    4052:	ed e2       	ldi	r30, 0x2D	; 45
    4054:	f2 e0       	ldi	r31, 0x02	; 2
    4056:	84 e6       	ldi	r24, 0x64	; 100
    4058:	86 87       	std	Z+14, r24	; 0x0e
    405a:	17 86       	std	Z+15, r1	; 0x0f
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	81 11       	cpse	r24, r1
    4060:	f8 cf       	rjmp	.-16     	; 0x4052 <menu_OnEnterMidiPanic+0x16>
    4062:	9f bf       	out	0x3f, r25	; 63
    4064:	0e 94 5c 2b 	call	0x56b8	; 0x56b8 <midiSendAllNotesOff>
    4068:	e5 df       	rcall	.-54     	; 0x4034 <menuCursorSetMenu>
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	08 95       	ret

0000406e <menuCurrMenuToLCD>:
    406e:	cf 93       	push	r28
    4070:	89 e4       	ldi	r24, 0x49	; 73
    4072:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    4076:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    407a:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    407e:	c4 91       	lpm	r28, Z
    4080:	c0 7c       	andi	r28, 0xC0	; 192
    4082:	c0 38       	cpi	r28, 0x80	; 128
    4084:	39 f4       	brne	.+14     	; 0x4094 <menuCurrMenuToLCD+0x26>
    4086:	80 e2       	ldi	r24, 0x20	; 32
    4088:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    408c:	82 e0       	ldi	r24, 0x02	; 2
    408e:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    4092:	04 c0       	rjmp	.+8      	; 0x409c <menuCurrMenuToLCD+0x2e>
    4094:	8f e7       	ldi	r24, 0x7F	; 127
    4096:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    409a:	1c d9       	rcall	.-3528   	; 0x32d4 <softkeyLeft>
    409c:	c0 3c       	cpi	r28, 0xC0	; 192
    409e:	29 f4       	brne	.+10     	; 0x40aa <menuCurrMenuToLCD+0x3c>
    40a0:	83 e0       	ldi	r24, 0x03	; 3
    40a2:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    40a6:	c0 e2       	ldi	r28, 0x20	; 32
    40a8:	02 c0       	rjmp	.+4      	; 0x40ae <menuCurrMenuToLCD+0x40>
    40aa:	1a d9       	rcall	.-3532   	; 0x32e0 <softkeyRight>
    40ac:	ce e7       	ldi	r28, 0x7E	; 126
    40ae:	24 d9       	rcall	.-3512   	; 0x32f8 <softkeyUp>
    40b0:	1d d9       	rcall	.-3526   	; 0x32ec <softkeyDown>
    40b2:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <currentMenu>
    40b6:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <currentMenu+0x1>
    40ba:	6c 2f       	mov	r22, r28
    40bc:	02 96       	adiw	r24, 0x02	; 2
    40be:	24 de       	rcall	.-952    	; 0x3d08 <menuTextOut>
    40c0:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
    40c4:	b7 df       	rcall	.-146    	; 0x4034 <menuCursorSetMenu>
    40c6:	cf 91       	pop	r28
    40c8:	08 95       	ret

000040ca <menuClearExtraDisp>:
    40ca:	8d de       	rcall	.-742    	; 0x3de6 <menuCursorSetExtra>
    40cc:	8a e0       	ldi	r24, 0x0A	; 10
    40ce:	0c 94 15 2f 	jmp	0x5e2a	; 0x5e2a <lcd_blank>
    40d2:	08 95       	ret

000040d4 <menu_ClearDataDisp>:
    40d4:	8e e1       	ldi	r24, 0x1E	; 30
    40d6:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    40da:	8a e0       	ldi	r24, 0x0A	; 10
    40dc:	0c 94 15 2f 	jmp	0x5e2a	; 0x5e2a <lcd_blank>
    40e0:	08 95       	ret

000040e2 <menu_ModuleTestExecute>:
    40e2:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <menu_TestModuleBitCounter>
    40e6:	8f 3f       	cpi	r24, 0xFF	; 255
    40e8:	19 f0       	breq	.+6      	; 0x40f0 <menu_ModuleTestExecute+0xe>
    40ea:	8d 3f       	cpi	r24, 0xFD	; 253
    40ec:	09 f0       	breq	.+2      	; 0x40f0 <menu_ModuleTestExecute+0xe>
    40ee:	4a c0       	rjmp	.+148    	; 0x4184 <menu_ModuleTestExecute+0xa2>
    40f0:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <lcd_cursoroff>
    40f4:	ef df       	rcall	.-34     	; 0x40d4 <menu_ClearDataDisp>
    40f6:	10 92 97 07 	sts	0x0797, r1	; 0x800797 <msgPipe_Handling>
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	e7 e4       	ldi	r30, 0x47	; 71
    40fe:	f2 e0       	ldi	r31, 0x02	; 2
    4100:	07 c0       	rjmp	.+14     	; 0x4110 <menu_ModuleTestExecute+0x2e>
    4102:	21 81       	ldd	r18, Z+1	; 0x01
    4104:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <menu_TestModulePattern>
    4108:	82 2b       	or	r24, r18
    410a:	81 83       	std	Z+1, r24	; 0x01
    410c:	38 96       	adiw	r30, 0x08	; 8
    410e:	9f 5f       	subi	r25, 0xFF	; 255
    4110:	90 32       	cpi	r25, 0x20	; 32
    4112:	b8 f3       	brcs	.-18     	; 0x4102 <menu_ModuleTestExecute+0x20>
    4114:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <menu_TestModuleBitCounter>
    4118:	8f 3f       	cpi	r24, 0xFF	; 255
    411a:	19 f4       	brne	.+6      	; 0x4122 <menu_ModuleTestExecute+0x40>
    411c:	10 92 4a 05 	sts	0x054A, r1	; 0x80054a <menu_TestModuleBitCounter>
    4120:	77 c0       	rjmp	.+238    	; 0x4210 <menu_ModuleTestExecute+0x12e>
    4122:	8e e1       	ldi	r24, 0x1E	; 30
    4124:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    4128:	81 e6       	ldi	r24, 0x61	; 97
    412a:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    412e:	82 e6       	ldi	r24, 0x62	; 98
    4130:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    4134:	8f e6       	ldi	r24, 0x6F	; 111
    4136:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    413a:	82 e7       	ldi	r24, 0x72	; 114
    413c:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    4140:	84 e7       	ldi	r24, 0x74	; 116
    4142:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    4146:	8e ef       	ldi	r24, 0xFE	; 254
    4148:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <menu_TestModuleBitCounter>
    414c:	9f b7       	in	r25, 0x3f	; 63
    414e:	f8 94       	cli
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	06 c0       	rjmp	.+12     	; 0x4160 <menu_ModuleTestExecute+0x7e>
    4154:	ed e2       	ldi	r30, 0x2D	; 45
    4156:	f2 e0       	ldi	r31, 0x02	; 2
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	84 87       	std	Z+12, r24	; 0x0c
    415c:	85 87       	std	Z+13, r24	; 0x0d
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	81 11       	cpse	r24, r1
    4162:	f8 cf       	rjmp	.-16     	; 0x4154 <menu_ModuleTestExecute+0x72>
    4164:	9f bf       	out	0x3f, r25	; 63
    4166:	9f b7       	in	r25, 0x3f	; 63
    4168:	f8 94       	cli
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	06 c0       	rjmp	.+12     	; 0x417a <menu_ModuleTestExecute+0x98>
    416e:	ed e2       	ldi	r30, 0x2D	; 45
    4170:	f2 e0       	ldi	r31, 0x02	; 2
    4172:	84 e6       	ldi	r24, 0x64	; 100
    4174:	86 87       	std	Z+14, r24	; 0x0e
    4176:	17 86       	std	Z+15, r1	; 0x0f
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	81 11       	cpse	r24, r1
    417c:	f8 cf       	rjmp	.-16     	; 0x416e <menu_ModuleTestExecute+0x8c>
    417e:	9f bf       	out	0x3f, r25	; 63
    4180:	59 df       	rcall	.-334    	; 0x4034 <menuCursorSetMenu>
    4182:	46 c0       	rjmp	.+140    	; 0x4210 <menu_ModuleTestExecute+0x12e>
    4184:	8e 3f       	cpi	r24, 0xFE	; 254
    4186:	41 f4       	brne	.+16     	; 0x4198 <menu_ModuleTestExecute+0xb6>
    4188:	8f ef       	ldi	r24, 0xFF	; 255
    418a:	80 93 97 07 	sts	0x0797, r24	; 0x800797 <msgPipe_Handling>
    418e:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <menu_TestModulePattern>
    4192:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <lcd_cursosblink>
    4196:	3c c0       	rjmp	.+120    	; 0x4210 <menu_ModuleTestExecute+0x12e>
    4198:	40 91 16 05 	lds	r20, 0x0516	; 0x800516 <menu_TestModuleErrorList>
    419c:	50 91 17 05 	lds	r21, 0x0517	; 0x800517 <menu_TestModuleErrorList+0x1>
    41a0:	60 91 18 05 	lds	r22, 0x0518	; 0x800518 <menu_TestModuleErrorList+0x2>
    41a4:	70 91 19 05 	lds	r23, 0x0519	; 0x800519 <menu_TestModuleErrorList+0x3>
    41a8:	76 95       	lsr	r23
    41aa:	67 95       	ror	r22
    41ac:	57 95       	ror	r21
    41ae:	47 95       	ror	r20
    41b0:	40 93 16 05 	sts	0x0516, r20	; 0x800516 <menu_TestModuleErrorList>
    41b4:	50 93 17 05 	sts	0x0517, r21	; 0x800517 <menu_TestModuleErrorList+0x1>
    41b8:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <menu_TestModuleErrorList+0x2>
    41bc:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <menu_TestModuleErrorList+0x3>
    41c0:	e8 2f       	mov	r30, r24
    41c2:	f0 e0       	ldi	r31, 0x00	; 0
    41c4:	df 01       	movw	r26, r30
    41c6:	aa 0f       	add	r26, r26
    41c8:	bb 1f       	adc	r27, r27
    41ca:	aa 0f       	add	r26, r26
    41cc:	bb 1f       	adc	r27, r27
    41ce:	aa 0f       	add	r26, r26
    41d0:	bb 1f       	adc	r27, r27
    41d2:	a9 5b       	subi	r26, 0xB9	; 185
    41d4:	bd 4f       	sbci	r27, 0xFD	; 253
    41d6:	16 96       	adiw	r26, 0x06	; 6
    41d8:	2c 91       	ld	r18, X
    41da:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <menu_TestModulePattern>
    41de:	29 23       	and	r18, r25
    41e0:	49 f4       	brne	.+18     	; 0x41f4 <menu_ModuleTestExecute+0x112>
    41e2:	70 68       	ori	r23, 0x80	; 128
    41e4:	40 93 16 05 	sts	0x0516, r20	; 0x800516 <menu_TestModuleErrorList>
    41e8:	50 93 17 05 	sts	0x0517, r21	; 0x800517 <menu_TestModuleErrorList+0x1>
    41ec:	60 93 18 05 	sts	0x0518, r22	; 0x800518 <menu_TestModuleErrorList+0x2>
    41f0:	70 93 19 05 	sts	0x0519, r23	; 0x800519 <menu_TestModuleErrorList+0x3>
    41f4:	ee 0f       	add	r30, r30
    41f6:	ff 1f       	adc	r31, r31
    41f8:	ee 0f       	add	r30, r30
    41fa:	ff 1f       	adc	r31, r31
    41fc:	ee 0f       	add	r30, r30
    41fe:	ff 1f       	adc	r31, r31
    4200:	e9 5b       	subi	r30, 0xB9	; 185
    4202:	fd 4f       	sbci	r31, 0xFD	; 253
    4204:	21 81       	ldd	r18, Z+1	; 0x01
    4206:	92 2b       	or	r25, r18
    4208:	91 83       	std	Z+1, r25	; 0x01
    420a:	8f 5f       	subi	r24, 0xFF	; 255
    420c:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <menu_TestModuleBitCounter>
    4210:	e0 91 4a 05 	lds	r30, 0x054A	; 0x80054a <menu_TestModuleBitCounter>
    4214:	e0 32       	cpi	r30, 0x20	; 32
    4216:	28 f5       	brcc	.+74     	; 0x4262 <menu_ModuleTestExecute+0x180>
    4218:	f0 e0       	ldi	r31, 0x00	; 0
    421a:	ee 0f       	add	r30, r30
    421c:	ff 1f       	adc	r31, r31
    421e:	ee 0f       	add	r30, r30
    4220:	ff 1f       	adc	r31, r31
    4222:	ee 0f       	add	r30, r30
    4224:	ff 1f       	adc	r31, r31
    4226:	e9 5b       	subi	r30, 0xB9	; 185
    4228:	fd 4f       	sbci	r31, 0xFD	; 253
    422a:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <menu_TestModulePattern>
    422e:	98 2f       	mov	r25, r24
    4230:	90 95       	com	r25
    4232:	81 81       	ldd	r24, Z+1	; 0x01
    4234:	89 23       	and	r24, r25
    4236:	81 83       	std	Z+1, r24	; 0x01
    4238:	8e e1       	ldi	r24, 0x1E	; 30
    423a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    423e:	80 91 4a 05 	lds	r24, 0x054A	; 0x80054a <menu_TestModuleBitCounter>
    4242:	0e 94 b9 2d 	call	0x5b72	; 0x5b72 <lcd_dec2out>
    4246:	9f b7       	in	r25, 0x3f	; 63
    4248:	f8 94       	cli
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	06 c0       	rjmp	.+12     	; 0x425a <menu_ModuleTestExecute+0x178>
    424e:	ed e2       	ldi	r30, 0x2D	; 45
    4250:	f2 e0       	ldi	r31, 0x02	; 2
    4252:	88 e0       	ldi	r24, 0x08	; 8
    4254:	84 87       	std	Z+12, r24	; 0x0c
    4256:	15 86       	std	Z+13, r1	; 0x0d
    4258:	80 e0       	ldi	r24, 0x00	; 0
    425a:	81 11       	cpse	r24, r1
    425c:	f8 cf       	rjmp	.-16     	; 0x424e <menu_ModuleTestExecute+0x16c>
    425e:	9f bf       	out	0x3f, r25	; 63
    4260:	08 95       	ret
    4262:	e0 32       	cpi	r30, 0x20	; 32
    4264:	09 f0       	breq	.+2      	; 0x4268 <menu_ModuleTestExecute+0x186>
    4266:	44 c0       	rjmp	.+136    	; 0x42f0 <menu_ModuleTestExecute+0x20e>
    4268:	8e e1       	ldi	r24, 0x1E	; 30
    426a:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    426e:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <menu_TestModuleErrorList>
    4272:	90 91 17 05 	lds	r25, 0x0517	; 0x800517 <menu_TestModuleErrorList+0x1>
    4276:	a0 91 18 05 	lds	r26, 0x0518	; 0x800518 <menu_TestModuleErrorList+0x2>
    427a:	b0 91 19 05 	lds	r27, 0x0519	; 0x800519 <menu_TestModuleErrorList+0x3>
    427e:	00 97       	sbiw	r24, 0x00	; 0
    4280:	a1 05       	cpc	r26, r1
    4282:	b1 05       	cpc	r27, r1
    4284:	39 f4       	brne	.+14     	; 0x4294 <menu_ModuleTestExecute+0x1b2>
    4286:	8f e6       	ldi	r24, 0x6F	; 111
    4288:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    428c:	8b e6       	ldi	r24, 0x6B	; 107
    428e:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    4292:	10 c0       	rjmp	.+32     	; 0x42b4 <menu_ModuleTestExecute+0x1d2>
    4294:	80 93 95 0c 	sts	0x0C95, r24	; 0x800c95 <editLong>
    4298:	90 93 96 0c 	sts	0x0C96, r25	; 0x800c96 <editLong+0x1>
    429c:	a0 93 97 0c 	sts	0x0C97, r26	; 0x800c97 <editLong+0x2>
    42a0:	b0 93 98 0c 	sts	0x0C98, r27	; 0x800c98 <editLong+0x3>
    42a4:	85 e4       	ldi	r24, 0x45	; 69
    42a6:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    42aa:	8a e3       	ldi	r24, 0x3A	; 58
    42ac:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    42b0:	0e 94 94 2d 	call	0x5b28	; 0x5b28 <lcd_longout>
    42b4:	8e ef       	ldi	r24, 0xFE	; 254
    42b6:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <menu_TestModuleBitCounter>
    42ba:	9f b7       	in	r25, 0x3f	; 63
    42bc:	f8 94       	cli
    42be:	81 e0       	ldi	r24, 0x01	; 1
    42c0:	06 c0       	rjmp	.+12     	; 0x42ce <menu_ModuleTestExecute+0x1ec>
    42c2:	ed e2       	ldi	r30, 0x2D	; 45
    42c4:	f2 e0       	ldi	r31, 0x02	; 2
    42c6:	82 e0       	ldi	r24, 0x02	; 2
    42c8:	84 87       	std	Z+12, r24	; 0x0c
    42ca:	85 87       	std	Z+13, r24	; 0x0d
    42cc:	80 e0       	ldi	r24, 0x00	; 0
    42ce:	81 11       	cpse	r24, r1
    42d0:	f8 cf       	rjmp	.-16     	; 0x42c2 <menu_ModuleTestExecute+0x1e0>
    42d2:	9f bf       	out	0x3f, r25	; 63
    42d4:	9f b7       	in	r25, 0x3f	; 63
    42d6:	f8 94       	cli
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	06 c0       	rjmp	.+12     	; 0x42e8 <menu_ModuleTestExecute+0x206>
    42dc:	ed e2       	ldi	r30, 0x2D	; 45
    42de:	f2 e0       	ldi	r31, 0x02	; 2
    42e0:	84 e6       	ldi	r24, 0x64	; 100
    42e2:	86 87       	std	Z+14, r24	; 0x0e
    42e4:	17 86       	std	Z+15, r1	; 0x0f
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	81 11       	cpse	r24, r1
    42ea:	f8 cf       	rjmp	.-16     	; 0x42dc <menu_ModuleTestExecute+0x1fa>
    42ec:	9f bf       	out	0x3f, r25	; 63
    42ee:	a2 ce       	rjmp	.-700    	; 0x4034 <menuCursorSetMenu>
    42f0:	08 95       	ret

000042f2 <menu_ModuleTestPattern>:
    42f2:	81 e0       	ldi	r24, 0x01	; 1
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	00 90 1d 05 	lds	r0, 0x051D	; 0x80051d <menuVmodule>
    42fa:	02 c0       	rjmp	.+4      	; 0x4300 <menu_ModuleTestPattern+0xe>
    42fc:	88 0f       	add	r24, r24
    42fe:	99 1f       	adc	r25, r25
    4300:	0a 94       	dec	r0
    4302:	e2 f7       	brpl	.-8      	; 0x42fc <menu_ModuleTestPattern+0xa>
    4304:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <menu_TestModulePattern>
    4308:	8f ef       	ldi	r24, 0xFF	; 255
    430a:	80 93 4a 05 	sts	0x054A, r24	; 0x80054a <menu_TestModuleBitCounter>
    430e:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <menu_TestModuleErrorList>
    4312:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <menu_TestModuleErrorList+0x1>
    4316:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <menu_TestModuleErrorList+0x2>
    431a:	10 92 19 05 	sts	0x0519, r1	; 0x800519 <menu_TestModuleErrorList+0x3>
    431e:	e1 de       	rcall	.-574    	; 0x40e2 <menu_ModuleTestExecute>
    4320:	80 e0       	ldi	r24, 0x00	; 0
    4322:	08 95       	ret

00004324 <menuClearMenuDisp>:
    4324:	80 e4       	ldi	r24, 0x40	; 64
    4326:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    432a:	8a e0       	ldi	r24, 0x0A	; 10
    432c:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <lcd_blank>
    4330:	81 de       	rcall	.-766    	; 0x4034 <menuCursorSetMenu>
    4332:	8a e0       	ldi	r24, 0x0A	; 10
    4334:	0c 94 15 2f 	jmp	0x5e2a	; 0x5e2a <lcd_blank>
    4338:	08 95       	ret

0000433a <menu_ClearAllDisp>:
    433a:	f4 df       	rcall	.-24     	; 0x4324 <menuClearMenuDisp>
    433c:	cb de       	rcall	.-618    	; 0x40d4 <menu_ClearDataDisp>
    433e:	c5 ce       	rjmp	.-630    	; 0x40ca <menuClearExtraDisp>
    4340:	08 95       	ret

00004342 <menuItemChanged>:
    4342:	8f ef       	ldi	r24, 0xFF	; 255
    4344:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xe>
    4348:	80 91 4d 05 	lds	r24, 0x054D	; 0x80054d <currentMenu>
    434c:	90 91 4e 05 	lds	r25, 0x054E	; 0x80054e <currentMenu+0x1>
    4350:	fc 01       	movw	r30, r24
    4352:	24 91       	lpm	r18, Z
    4354:	e2 2f       	mov	r30, r18
    4356:	ef 73       	andi	r30, 0x3F	; 63
    4358:	6e 2f       	mov	r22, r30
    435a:	70 e0       	ldi	r23, 0x00	; 0
    435c:	62 30       	cpi	r22, 0x02	; 2
    435e:	71 05       	cpc	r23, r1
    4360:	0c f4       	brge	.+2      	; 0x4364 <menuItemChanged+0x22>
    4362:	48 c0       	rjmp	.+144    	; 0x43f4 <menuItemChanged+0xb2>
    4364:	9c 01       	movw	r18, r24
    4366:	22 5f       	subi	r18, 0xF2	; 242
    4368:	3f 4f       	sbci	r19, 0xFF	; 255
    436a:	f9 01       	movw	r30, r18
    436c:	45 91       	lpm	r20, Z+
    436e:	55 91       	lpm	r21, Z+
    4370:	41 15       	cp	r20, r1
    4372:	51 05       	cpc	r21, r1
    4374:	09 f4       	brne	.+2      	; 0x4378 <menuItemChanged+0x36>
    4376:	3e c0       	rjmp	.+124    	; 0x43f4 <menuItemChanged+0xb2>
    4378:	fb 01       	movw	r30, r22
    437a:	31 97       	sbiw	r30, 0x01	; 1
    437c:	9f 01       	movw	r18, r30
    437e:	22 0f       	add	r18, r18
    4380:	33 1f       	adc	r19, r19
    4382:	22 0f       	add	r18, r18
    4384:	33 1f       	adc	r19, r19
    4386:	22 0f       	add	r18, r18
    4388:	33 1f       	adc	r19, r19
    438a:	e2 0f       	add	r30, r18
    438c:	f3 1f       	adc	r31, r19
    438e:	e4 5a       	subi	r30, 0xA4	; 164
    4390:	fc 4f       	sbci	r31, 0xFC	; 252
    4392:	f0 93 1f 05 	sts	0x051F, r31	; 0x80051f <pNibbleInfo+0x1>
    4396:	e0 93 1e 05 	sts	0x051E, r30	; 0x80051e <pNibbleInfo>
    439a:	24 91       	lpm	r18, Z
    439c:	20 93 44 05 	sts	0x0544, r18	; 0x800544 <nibbleCount>
    43a0:	fc 01       	movw	r30, r24
    43a2:	25 91       	lpm	r18, Z+
    43a4:	2f 73       	andi	r18, 0x3F	; 63
    43a6:	20 93 1a 05 	sts	0x051A, r18	; 0x80051a <dataType>
    43aa:	24 91       	lpm	r18, Z
    43ac:	22 23       	and	r18, r18
    43ae:	2c f4       	brge	.+10     	; 0x43ba <menuItemChanged+0x78>
    43b0:	20 91 55 05 	lds	r18, 0x0555	; 0x800555 <DataAdressOffset>
    43b4:	30 91 56 05 	lds	r19, 0x0556	; 0x800556 <DataAdressOffset+0x1>
    43b8:	02 c0       	rjmp	.+4      	; 0x43be <menuItemChanged+0x7c>
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	30 e0       	ldi	r19, 0x00	; 0
    43be:	24 0f       	add	r18, r20
    43c0:	35 1f       	adc	r19, r21
    43c2:	fc 01       	movw	r30, r24
    43c4:	84 91       	lpm	r24, Z
    43c6:	8f 73       	andi	r24, 0x3F	; 63
    43c8:	8b 30       	cpi	r24, 0x0B	; 11
    43ca:	71 f4       	brne	.+28     	; 0x43e8 <menuItemChanged+0xa6>
    43cc:	f9 01       	movw	r30, r18
    43ce:	80 81       	ld	r24, Z
    43d0:	91 81       	ldd	r25, Z+1	; 0x01
    43d2:	a2 81       	ldd	r26, Z+2	; 0x02
    43d4:	b3 81       	ldd	r27, Z+3	; 0x03
    43d6:	80 93 46 05 	sts	0x0546, r24	; 0x800546 <dataEntry32>
    43da:	90 93 47 05 	sts	0x0547, r25	; 0x800547 <dataEntry32+0x1>
    43de:	a0 93 48 05 	sts	0x0548, r26	; 0x800548 <dataEntry32+0x2>
    43e2:	b0 93 49 05 	sts	0x0549, r27	; 0x800549 <dataEntry32+0x3>
    43e6:	04 c0       	rjmp	.+8      	; 0x43f0 <menuItemChanged+0xae>
    43e8:	f9 01       	movw	r30, r18
    43ea:	80 81       	ld	r24, Z
    43ec:	80 93 5d 05 	sts	0x055D, r24	; 0x80055d <dataEntry>
    43f0:	c0 dc       	rcall	.-1664   	; 0x3d72 <menuDisplayValue>
    43f2:	07 c0       	rjmp	.+14     	; 0x4402 <menuItemChanged+0xc0>
    43f4:	6f de       	rcall	.-802    	; 0x40d4 <menu_ClearDataDisp>
    43f6:	8c e5       	ldi	r24, 0x5C	; 92
    43f8:	93 e0       	ldi	r25, 0x03	; 3
    43fa:	90 93 1f 05 	sts	0x051F, r25	; 0x80051f <pNibbleInfo+0x1>
    43fe:	80 93 1e 05 	sts	0x051E, r24	; 0x80051e <pNibbleInfo>
    4402:	18 ce       	rjmp	.-976    	; 0x4034 <menuCursorSetMenu>
    4404:	08 95       	ret

00004406 <menu_InitLCD>:
    4406:	61 de       	rcall	.-830    	; 0x40ca <menuClearExtraDisp>
    4408:	9c df       	rcall	.-200    	; 0x4342 <menuItemChanged>
    440a:	99 dc       	rcall	.-1742   	; 0x3d3e <menuParentMenuToLCD>
    440c:	30 de       	rcall	.-928    	; 0x406e <menuCurrMenuToLCD>
    440e:	0c 94 38 2f 	jmp	0x5e70	; 0x5e70 <lcd_cursosblink>
    4412:	08 95       	ret

00004414 <menu_ProcessMessage>:
    4414:	cf 93       	push	r28
    4416:	c8 2f       	mov	r28, r24
    4418:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <lcd_cursosblink>
    441c:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    4420:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    4424:	84 91       	lpm	r24, Z
    4426:	8f 73       	andi	r24, 0x3F	; 63
    4428:	81 30       	cpi	r24, 0x01	; 1
    442a:	29 f0       	breq	.+10     	; 0x4436 <menu_ProcessMessage+0x22>
    442c:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <nibbleIndex>
    4430:	8f 3f       	cpi	r24, 0xFF	; 255
    4432:	09 f0       	breq	.+2      	; 0x4436 <menu_ProcessMessage+0x22>
    4434:	3d c1       	rjmp	.+634    	; 0x46b0 <menu_ProcessMessage+0x29c>
    4436:	31 96       	adiw	r30, 0x01	; 1
    4438:	84 91       	lpm	r24, Z
    443a:	86 ff       	sbrs	r24, 6
    443c:	02 c0       	rjmp	.+4      	; 0x4442 <menu_ProcessMessage+0x2e>
    443e:	45 de       	rcall	.-886    	; 0x40ca <menuClearExtraDisp>
    4440:	f9 dd       	rcall	.-1038   	; 0x4034 <menuCursorSetMenu>
    4442:	60 91 4d 05 	lds	r22, 0x054D	; 0x80054d <currentMenu>
    4446:	70 91 4e 05 	lds	r23, 0x054E	; 0x80054e <currentMenu+0x1>
    444a:	cb 01       	movw	r24, r22
    444c:	01 96       	adiw	r24, 0x01	; 1
    444e:	fc 01       	movw	r30, r24
    4450:	84 91       	lpm	r24, Z
    4452:	98 2f       	mov	r25, r24
    4454:	90 72       	andi	r25, 0x20	; 32
    4456:	85 ff       	sbrs	r24, 5
    4458:	1f c0       	rjmp	.+62     	; 0x4498 <menu_ProcessMessage+0x84>
    445a:	9b 01       	movw	r18, r22
    445c:	20 5f       	subi	r18, 0xF0	; 240
    445e:	3f 4f       	sbci	r19, 0xFF	; 255
    4460:	f9 01       	movw	r30, r18
    4462:	25 91       	lpm	r18, Z+
    4464:	35 91       	lpm	r19, Z+
    4466:	21 15       	cp	r18, r1
    4468:	31 05       	cpc	r19, r1
    446a:	b1 f0       	breq	.+44     	; 0x4498 <menu_ProcessMessage+0x84>
    446c:	40 91 1b 05 	lds	r20, 0x051B	; 0x80051b <nibbleIndex>
    4470:	4f 3f       	cpi	r20, 0xFF	; 255
    4472:	91 f0       	breq	.+36     	; 0x4498 <menu_ProcessMessage+0x84>
    4474:	8c 2f       	mov	r24, r28
    4476:	f9 01       	movw	r30, r18
    4478:	19 95       	eicall
    447a:	8f 3f       	cpi	r24, 0xFF	; 255
    447c:	21 f4       	brne	.+8      	; 0x4486 <menu_ProcessMessage+0x72>
    447e:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <nibbleIndex>
    4482:	80 e0       	ldi	r24, 0x00	; 0
    4484:	d3 c1       	rjmp	.+934    	; 0x482c <menu_ProcessMessage+0x418>
    4486:	21 de       	rcall	.-958    	; 0x40ca <menuClearExtraDisp>
    4488:	25 de       	rcall	.-950    	; 0x40d4 <menu_ClearDataDisp>
    448a:	d4 dd       	rcall	.-1112   	; 0x4034 <menuCursorSetMenu>
    448c:	8f ef       	ldi	r24, 0xFF	; 255
    448e:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    4492:	ed dd       	rcall	.-1062   	; 0x406e <menuCurrMenuToLCD>
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	ca c1       	rjmp	.+916    	; 0x482c <menu_ProcessMessage+0x418>
    4498:	c3 30       	cpi	r28, 0x03	; 3
    449a:	09 f4       	brne	.+2      	; 0x449e <menu_ProcessMessage+0x8a>
    449c:	64 c0       	rjmp	.+200    	; 0x4566 <menu_ProcessMessage+0x152>
    449e:	28 f4       	brcc	.+10     	; 0x44aa <menu_ProcessMessage+0x96>
    44a0:	c1 30       	cpi	r28, 0x01	; 1
    44a2:	51 f0       	breq	.+20     	; 0x44b8 <menu_ProcessMessage+0xa4>
    44a4:	c2 30       	cpi	r28, 0x02	; 2
    44a6:	31 f1       	breq	.+76     	; 0x44f4 <menu_ProcessMessage+0xe0>
    44a8:	ac c1       	rjmp	.+856    	; 0x4802 <menu_ProcessMessage+0x3ee>
    44aa:	c5 30       	cpi	r28, 0x05	; 5
    44ac:	09 f4       	brne	.+2      	; 0x44b0 <menu_ProcessMessage+0x9c>
    44ae:	5b c0       	rjmp	.+182    	; 0x4566 <menu_ProcessMessage+0x152>
    44b0:	90 f0       	brcs	.+36     	; 0x44d6 <menu_ProcessMessage+0xc2>
    44b2:	c6 30       	cpi	r28, 0x06	; 6
    44b4:	f9 f0       	breq	.+62     	; 0x44f4 <menu_ProcessMessage+0xe0>
    44b6:	a5 c1       	rjmp	.+842    	; 0x4802 <menu_ProcessMessage+0x3ee>
    44b8:	fb 01       	movw	r30, r22
    44ba:	84 91       	lpm	r24, Z
    44bc:	80 7c       	andi	r24, 0xC0	; 192
    44be:	80 3c       	cpi	r24, 0xC0	; 192
    44c0:	09 f4       	brne	.+2      	; 0x44c4 <menu_ProcessMessage+0xb0>
    44c2:	a1 c1       	rjmp	.+834    	; 0x4806 <menu_ProcessMessage+0x3f2>
    44c4:	74 96       	adiw	r30, 0x14	; 20
    44c6:	f0 93 4e 05 	sts	0x054E, r31	; 0x80054e <currentMenu+0x1>
    44ca:	e0 93 4d 05 	sts	0x054D, r30	; 0x80054d <currentMenu>
    44ce:	39 df       	rcall	.-398    	; 0x4342 <menuItemChanged>
    44d0:	ce dd       	rcall	.-1124   	; 0x406e <menuCurrMenuToLCD>
    44d2:	80 e0       	ldi	r24, 0x00	; 0
    44d4:	ab c1       	rjmp	.+854    	; 0x482c <menu_ProcessMessage+0x418>
    44d6:	fb 01       	movw	r30, r22
    44d8:	84 91       	lpm	r24, Z
    44da:	80 7c       	andi	r24, 0xC0	; 192
    44dc:	80 38       	cpi	r24, 0x80	; 128
    44de:	09 f4       	brne	.+2      	; 0x44e2 <menu_ProcessMessage+0xce>
    44e0:	94 c1       	rjmp	.+808    	; 0x480a <menu_ProcessMessage+0x3f6>
    44e2:	74 97       	sbiw	r30, 0x14	; 20
    44e4:	f0 93 4e 05 	sts	0x054E, r31	; 0x80054e <currentMenu+0x1>
    44e8:	e0 93 4d 05 	sts	0x054D, r30	; 0x80054d <currentMenu>
    44ec:	2a df       	rcall	.-428    	; 0x4342 <menuItemChanged>
    44ee:	bf dd       	rcall	.-1154   	; 0x406e <menuCurrMenuToLCD>
    44f0:	80 e0       	ldi	r24, 0x00	; 0
    44f2:	9c c1       	rjmp	.+824    	; 0x482c <menu_ProcessMessage+0x418>
    44f4:	84 ff       	sbrs	r24, 4
    44f6:	04 c0       	rjmp	.+8      	; 0x4500 <menu_ProcessMessage+0xec>
    44f8:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <menuVMenuSoftKey+0x1>
    44fc:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <menuVMenuSoftKey>
    4500:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <menuStackIndex>
    4504:	ee 23       	and	r30, r30
    4506:	e9 f0       	breq	.+58     	; 0x4542 <menu_ProcessMessage+0x12e>
    4508:	e1 50       	subi	r30, 0x01	; 1
    450a:	e0 93 15 05 	sts	0x0515, r30	; 0x800515 <menuStackIndex>
    450e:	f0 e0       	ldi	r31, 0x00	; 0
    4510:	ee 0f       	add	r30, r30
    4512:	ff 1f       	adc	r31, r31
    4514:	e0 5e       	subi	r30, 0xE0	; 224
    4516:	fa 4f       	sbci	r31, 0xFA	; 250
    4518:	01 90       	ld	r0, Z+
    451a:	f0 81       	ld	r31, Z
    451c:	e0 2d       	mov	r30, r0
    451e:	f0 93 4e 05 	sts	0x054E, r31	; 0x80054e <currentMenu+0x1>
    4522:	e0 93 4d 05 	sts	0x054D, r30	; 0x80054d <currentMenu>
    4526:	72 96       	adiw	r30, 0x12	; 18
    4528:	05 90       	lpm	r0, Z+
    452a:	f4 91       	lpm	r31, Z
    452c:	e0 2d       	mov	r30, r0
    452e:	30 97       	sbiw	r30, 0x00	; 0
    4530:	11 f0       	breq	.+4      	; 0x4536 <menu_ProcessMessage+0x122>
    4532:	80 e0       	ldi	r24, 0x00	; 0
    4534:	19 95       	eicall
    4536:	c9 dd       	rcall	.-1134   	; 0x40ca <menuClearExtraDisp>
    4538:	02 dc       	rcall	.-2044   	; 0x3d3e <menuParentMenuToLCD>
    453a:	99 dd       	rcall	.-1230   	; 0x406e <menuCurrMenuToLCD>
    453c:	02 df       	rcall	.-508    	; 0x4342 <menuItemChanged>
    453e:	80 e0       	ldi	r24, 0x00	; 0
    4540:	75 c1       	rjmp	.+746    	; 0x482c <menu_ProcessMessage+0x418>
    4542:	80 e0       	ldi	r24, 0x00	; 0
    4544:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    4548:	81 e0       	ldi	r24, 0x01	; 1
    454a:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    454e:	82 e0       	ldi	r24, 0x02	; 2
    4550:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    4554:	83 e0       	ldi	r24, 0x03	; 3
    4556:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    455a:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
    455e:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <lcd_cursoroff>
    4562:	8f ef       	ldi	r24, 0xFF	; 255
    4564:	63 c1       	rjmp	.+710    	; 0x482c <menu_ProcessMessage+0x418>
    4566:	fb 01       	movw	r30, r22
    4568:	24 91       	lpm	r18, Z
    456a:	2f 73       	andi	r18, 0x3F	; 63
    456c:	30 e0       	ldi	r19, 0x00	; 0
    456e:	22 30       	cpi	r18, 0x02	; 2
    4570:	31 05       	cpc	r19, r1
    4572:	f4 f0       	brlt	.+60     	; 0x45b0 <menu_ProcessMessage+0x19c>
    4574:	70 96       	adiw	r30, 0x10	; 16
    4576:	05 90       	lpm	r0, Z+
    4578:	f4 91       	lpm	r31, Z
    457a:	e0 2d       	mov	r30, r0
    457c:	30 97       	sbiw	r30, 0x00	; 0
    457e:	19 f0       	breq	.+6      	; 0x4586 <menu_ProcessMessage+0x172>
    4580:	8c 2f       	mov	r24, r28
    4582:	19 95       	eicall
    4584:	de de       	rcall	.-580    	; 0x4342 <menuItemChanged>
    4586:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <currentMenu>
    458a:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <currentMenu+0x1>
    458e:	c9 01       	movw	r24, r18
    4590:	01 96       	adiw	r24, 0x01	; 1
    4592:	fc 01       	movw	r30, r24
    4594:	84 91       	lpm	r24, Z
    4596:	83 fd       	sbrc	r24, 3
    4598:	3a c1       	rjmp	.+628    	; 0x480e <menu_ProcessMessage+0x3fa>
    459a:	3d 96       	adiw	r30, 0x0d	; 13
    459c:	85 91       	lpm	r24, Z+
    459e:	95 91       	lpm	r25, Z+
    45a0:	89 2b       	or	r24, r25
    45a2:	09 f4       	brne	.+2      	; 0x45a6 <menu_ProcessMessage+0x192>
    45a4:	36 c1       	rjmp	.+620    	; 0x4812 <menu_ProcessMessage+0x3fe>
    45a6:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <nibbleIndex>
    45aa:	f0 db       	rcall	.-2080   	; 0x3d8c <menuCursorSetDataNibble>
    45ac:	80 e0       	ldi	r24, 0x00	; 0
    45ae:	3e c1       	rjmp	.+636    	; 0x482c <menu_ProcessMessage+0x418>
    45b0:	2f ef       	ldi	r18, 0xFF	; 255
    45b2:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <nibbleIndex>
    45b6:	84 ff       	sbrs	r24, 4
    45b8:	26 c0       	rjmp	.+76     	; 0x4606 <menu_ProcessMessage+0x1f2>
    45ba:	70 93 72 05 	sts	0x0572, r23	; 0x800572 <menuVMenuSoftKey+0x1>
    45be:	60 93 71 05 	sts	0x0571, r22	; 0x800571 <menuVMenuSoftKey>
    45c2:	e0 91 15 05 	lds	r30, 0x0515	; 0x800515 <menuStackIndex>
    45c6:	ee 23       	and	r30, r30
    45c8:	09 f4       	brne	.+2      	; 0x45cc <menu_ProcessMessage+0x1b8>
    45ca:	25 c1       	rjmp	.+586    	; 0x4816 <menu_ProcessMessage+0x402>
    45cc:	e1 50       	subi	r30, 0x01	; 1
    45ce:	e0 93 15 05 	sts	0x0515, r30	; 0x800515 <menuStackIndex>
    45d2:	f0 e0       	ldi	r31, 0x00	; 0
    45d4:	ee 0f       	add	r30, r30
    45d6:	ff 1f       	adc	r31, r31
    45d8:	e0 5e       	subi	r30, 0xE0	; 224
    45da:	fa 4f       	sbci	r31, 0xFA	; 250
    45dc:	01 90       	ld	r0, Z+
    45de:	f0 81       	ld	r31, Z
    45e0:	e0 2d       	mov	r30, r0
    45e2:	f0 93 4e 05 	sts	0x054E, r31	; 0x80054e <currentMenu+0x1>
    45e6:	e0 93 4d 05 	sts	0x054D, r30	; 0x80054d <currentMenu>
    45ea:	72 96       	adiw	r30, 0x12	; 18
    45ec:	05 90       	lpm	r0, Z+
    45ee:	f4 91       	lpm	r31, Z
    45f0:	e0 2d       	mov	r30, r0
    45f2:	30 97       	sbiw	r30, 0x00	; 0
    45f4:	11 f0       	breq	.+4      	; 0x45fa <menu_ProcessMessage+0x1e6>
    45f6:	80 e0       	ldi	r24, 0x00	; 0
    45f8:	19 95       	eicall
    45fa:	67 dd       	rcall	.-1330   	; 0x40ca <menuClearExtraDisp>
    45fc:	a0 db       	rcall	.-2240   	; 0x3d3e <menuParentMenuToLCD>
    45fe:	37 dd       	rcall	.-1426   	; 0x406e <menuCurrMenuToLCD>
    4600:	a0 de       	rcall	.-704    	; 0x4342 <menuItemChanged>
    4602:	80 e0       	ldi	r24, 0x00	; 0
    4604:	13 c1       	rjmp	.+550    	; 0x482c <menu_ProcessMessage+0x418>
    4606:	fb 01       	movw	r30, r22
    4608:	70 96       	adiw	r30, 0x10	; 16
    460a:	05 90       	lpm	r0, Z+
    460c:	f4 91       	lpm	r31, Z
    460e:	e0 2d       	mov	r30, r0
    4610:	30 97       	sbiw	r30, 0x00	; 0
    4612:	99 f0       	breq	.+38     	; 0x463a <menu_ProcessMessage+0x226>
    4614:	99 23       	and	r25, r25
    4616:	71 f0       	breq	.+28     	; 0x4634 <menu_ProcessMessage+0x220>
    4618:	8f ef       	ldi	r24, 0xFF	; 255
    461a:	19 95       	eicall
    461c:	8f 3f       	cpi	r24, 0xFF	; 255
    461e:	19 f4       	brne	.+6      	; 0x4626 <menu_ProcessMessage+0x212>
    4620:	10 92 1b 05 	sts	0x051B, r1	; 0x80051b <nibbleIndex>
    4624:	0a c0       	rjmp	.+20     	; 0x463a <menu_ProcessMessage+0x226>
    4626:	51 dd       	rcall	.-1374   	; 0x40ca <menuClearExtraDisp>
    4628:	55 dd       	rcall	.-1366   	; 0x40d4 <menu_ClearDataDisp>
    462a:	04 dd       	rcall	.-1528   	; 0x4034 <menuCursorSetMenu>
    462c:	8f ef       	ldi	r24, 0xFF	; 255
    462e:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    4632:	03 c0       	rjmp	.+6      	; 0x463a <menu_ProcessMessage+0x226>
    4634:	85 e0       	ldi	r24, 0x05	; 5
    4636:	19 95       	eicall
    4638:	fd dc       	rcall	.-1542   	; 0x4034 <menuCursorSetMenu>
    463a:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <currentMenu>
    463e:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <currentMenu+0x1>
    4642:	c9 01       	movw	r24, r18
    4644:	0c 96       	adiw	r24, 0x0c	; 12
    4646:	fc 01       	movw	r30, r24
    4648:	85 91       	lpm	r24, Z+
    464a:	95 91       	lpm	r25, Z+
    464c:	89 2b       	or	r24, r25
    464e:	09 f4       	brne	.+2      	; 0x4652 <menu_ProcessMessage+0x23e>
    4650:	e4 c0       	rjmp	.+456    	; 0x481a <menu_ProcessMessage+0x406>
    4652:	a0 91 15 05 	lds	r26, 0x0515	; 0x800515 <menuStackIndex>
    4656:	a0 31       	cpi	r26, 0x10	; 16
    4658:	08 f0       	brcs	.+2      	; 0x465c <menu_ProcessMessage+0x248>
    465a:	e1 c0       	rjmp	.+450    	; 0x481e <menu_ProcessMessage+0x40a>
    465c:	81 e0       	ldi	r24, 0x01	; 1
    465e:	8a 0f       	add	r24, r26
    4660:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <menuStackIndex>
    4664:	b0 e0       	ldi	r27, 0x00	; 0
    4666:	aa 0f       	add	r26, r26
    4668:	bb 1f       	adc	r27, r27
    466a:	a0 5e       	subi	r26, 0xE0	; 224
    466c:	ba 4f       	sbci	r27, 0xFA	; 250
    466e:	2d 93       	st	X+, r18
    4670:	3c 93       	st	X, r19
    4672:	c9 01       	movw	r24, r18
    4674:	01 96       	adiw	r24, 0x01	; 1
    4676:	fc 01       	movw	r30, r24
    4678:	84 91       	lpm	r24, Z
    467a:	83 ff       	sbrs	r24, 3
    467c:	0b c0       	rjmp	.+22     	; 0x4694 <menu_ProcessMessage+0x280>
    467e:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <menuVMenuSoftKey>
    4682:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <menuVMenuSoftKey+0x1>
    4686:	00 97       	sbiw	r24, 0x00	; 0
    4688:	29 f0       	breq	.+10     	; 0x4694 <menu_ProcessMessage+0x280>
    468a:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <currentMenu+0x1>
    468e:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <currentMenu>
    4692:	08 c0       	rjmp	.+16     	; 0x46a4 <menu_ProcessMessage+0x290>
    4694:	f9 01       	movw	r30, r18
    4696:	3c 96       	adiw	r30, 0x0c	; 12
    4698:	85 91       	lpm	r24, Z+
    469a:	95 91       	lpm	r25, Z+
    469c:	90 93 4e 05 	sts	0x054E, r25	; 0x80054e <currentMenu+0x1>
    46a0:	80 93 4d 05 	sts	0x054D, r24	; 0x80054d <currentMenu>
    46a4:	12 dd       	rcall	.-1500   	; 0x40ca <menuClearExtraDisp>
    46a6:	4b db       	rcall	.-2410   	; 0x3d3e <menuParentMenuToLCD>
    46a8:	e2 dc       	rcall	.-1596   	; 0x406e <menuCurrMenuToLCD>
    46aa:	4b de       	rcall	.-874    	; 0x4342 <menuItemChanged>
    46ac:	80 e0       	ldi	r24, 0x00	; 0
    46ae:	be c0       	rjmp	.+380    	; 0x482c <menu_ProcessMessage+0x418>
    46b0:	c3 30       	cpi	r28, 0x03	; 3
    46b2:	09 f4       	brne	.+2      	; 0x46b6 <menu_ProcessMessage+0x2a2>
    46b4:	47 c0       	rjmp	.+142    	; 0x4744 <menu_ProcessMessage+0x330>
    46b6:	28 f4       	brcc	.+10     	; 0x46c2 <menu_ProcessMessage+0x2ae>
    46b8:	c1 30       	cpi	r28, 0x01	; 1
    46ba:	59 f0       	breq	.+22     	; 0x46d2 <menu_ProcessMessage+0x2be>
    46bc:	c2 30       	cpi	r28, 0x02	; 2
    46be:	31 f1       	breq	.+76     	; 0x470c <menu_ProcessMessage+0x2f8>
    46c0:	b0 c0       	rjmp	.+352    	; 0x4822 <menu_ProcessMessage+0x40e>
    46c2:	c5 30       	cpi	r28, 0x05	; 5
    46c4:	09 f4       	brne	.+2      	; 0x46c8 <menu_ProcessMessage+0x2b4>
    46c6:	5a c0       	rjmp	.+180    	; 0x477c <menu_ProcessMessage+0x368>
    46c8:	c0 f0       	brcs	.+48     	; 0x46fa <menu_ProcessMessage+0x2e6>
    46ca:	c6 30       	cpi	r28, 0x06	; 6
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <menu_ProcessMessage+0x2bc>
    46ce:	86 c0       	rjmp	.+268    	; 0x47dc <menu_ProcessMessage+0x3c8>
    46d0:	a8 c0       	rjmp	.+336    	; 0x4822 <menu_ProcessMessage+0x40e>
    46d2:	48 2f       	mov	r20, r24
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    46da:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    46de:	24 91       	lpm	r18, Z
    46e0:	30 e0       	ldi	r19, 0x00	; 0
    46e2:	21 50       	subi	r18, 0x01	; 1
    46e4:	31 09       	sbc	r19, r1
    46e6:	42 17       	cp	r20, r18
    46e8:	53 07       	cpc	r21, r19
    46ea:	0c f0       	brlt	.+2      	; 0x46ee <menu_ProcessMessage+0x2da>
    46ec:	9c c0       	rjmp	.+312    	; 0x4826 <menu_ProcessMessage+0x412>
    46ee:	8f 5f       	subi	r24, 0xFF	; 255
    46f0:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    46f4:	4b db       	rcall	.-2410   	; 0x3d8c <menuCursorSetDataNibble>
    46f6:	80 e0       	ldi	r24, 0x00	; 0
    46f8:	99 c0       	rjmp	.+306    	; 0x482c <menu_ProcessMessage+0x418>
    46fa:	88 23       	and	r24, r24
    46fc:	09 f4       	brne	.+2      	; 0x4700 <menu_ProcessMessage+0x2ec>
    46fe:	95 c0       	rjmp	.+298    	; 0x482a <menu_ProcessMessage+0x416>
    4700:	81 50       	subi	r24, 0x01	; 1
    4702:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    4706:	42 db       	rcall	.-2428   	; 0x3d8c <menuCursorSetDataNibble>
    4708:	80 e0       	ldi	r24, 0x00	; 0
    470a:	90 c0       	rjmp	.+288    	; 0x482c <menu_ProcessMessage+0x418>
    470c:	61 e0       	ldi	r22, 0x01	; 1
    470e:	6a d8       	rcall	.-3884   	; 0x37e4 <nibbleChange>
    4710:	17 da       	rcall	.-3026   	; 0x3b40 <nibbleToData>
    4712:	2f db       	rcall	.-2466   	; 0x3d72 <menuDisplayValue>
    4714:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
    4718:	8a 30       	cpi	r24, 0x0A	; 10
    471a:	89 f4       	brne	.+34     	; 0x473e <menu_ProcessMessage+0x32a>
    471c:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <nibbleIndex>
    4720:	42 2f       	mov	r20, r18
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    4728:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    472c:	84 91       	lpm	r24, Z
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	48 17       	cp	r20, r24
    4734:	59 07       	cpc	r21, r25
    4736:	1c f4       	brge	.+6      	; 0x473e <menu_ProcessMessage+0x32a>
    4738:	2f 5f       	subi	r18, 0xFF	; 255
    473a:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <nibbleIndex>
    473e:	26 db       	rcall	.-2484   	; 0x3d8c <menuCursorSetDataNibble>
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	74 c0       	rjmp	.+232    	; 0x482c <menu_ProcessMessage+0x418>
    4744:	6f ef       	ldi	r22, 0xFF	; 255
    4746:	4e d8       	rcall	.-3940   	; 0x37e4 <nibbleChange>
    4748:	fb d9       	rcall	.-3082   	; 0x3b40 <nibbleToData>
    474a:	13 db       	rcall	.-2522   	; 0x3d72 <menuDisplayValue>
    474c:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <dataType>
    4750:	8a 30       	cpi	r24, 0x0A	; 10
    4752:	89 f4       	brne	.+34     	; 0x4776 <menu_ProcessMessage+0x362>
    4754:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <nibbleIndex>
    4758:	42 2f       	mov	r20, r18
    475a:	50 e0       	ldi	r21, 0x00	; 0
    475c:	e0 91 1e 05 	lds	r30, 0x051E	; 0x80051e <pNibbleInfo>
    4760:	f0 91 1f 05 	lds	r31, 0x051F	; 0x80051f <pNibbleInfo+0x1>
    4764:	84 91       	lpm	r24, Z
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	01 97       	sbiw	r24, 0x01	; 1
    476a:	48 17       	cp	r20, r24
    476c:	59 07       	cpc	r21, r25
    476e:	1c f4       	brge	.+6      	; 0x4776 <menu_ProcessMessage+0x362>
    4770:	2f 5f       	subi	r18, 0xFF	; 255
    4772:	20 93 1b 05 	sts	0x051B, r18	; 0x80051b <nibbleIndex>
    4776:	0a db       	rcall	.-2540   	; 0x3d8c <menuCursorSetDataNibble>
    4778:	80 e0       	ldi	r24, 0x00	; 0
    477a:	58 c0       	rjmp	.+176    	; 0x482c <menu_ProcessMessage+0x418>
    477c:	e1 d9       	rcall	.-3134   	; 0x3b40 <nibbleToData>
    477e:	20 91 4d 05 	lds	r18, 0x054D	; 0x80054d <currentMenu>
    4782:	30 91 4e 05 	lds	r19, 0x054E	; 0x80054e <currentMenu+0x1>
    4786:	c9 01       	movw	r24, r18
    4788:	0e 96       	adiw	r24, 0x0e	; 14
    478a:	fc 01       	movw	r30, r24
    478c:	a5 91       	lpm	r26, Z+
    478e:	b5 91       	lpm	r27, Z+
    4790:	10 97       	sbiw	r26, 0x00	; 0
    4792:	21 f1       	breq	.+72     	; 0x47dc <menu_ProcessMessage+0x3c8>
    4794:	0d 97       	sbiw	r24, 0x0d	; 13
    4796:	fc 01       	movw	r30, r24
    4798:	84 91       	lpm	r24, Z
    479a:	88 23       	and	r24, r24
    479c:	2c f4       	brge	.+10     	; 0x47a8 <menu_ProcessMessage+0x394>
    479e:	80 91 55 05 	lds	r24, 0x0555	; 0x800555 <DataAdressOffset>
    47a2:	90 91 56 05 	lds	r25, 0x0556	; 0x800556 <DataAdressOffset+0x1>
    47a6:	02 c0       	rjmp	.+4      	; 0x47ac <menu_ProcessMessage+0x398>
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	a8 0f       	add	r26, r24
    47ae:	b9 1f       	adc	r27, r25
    47b0:	f9 01       	movw	r30, r18
    47b2:	84 91       	lpm	r24, Z
    47b4:	8f 73       	andi	r24, 0x3F	; 63
    47b6:	8b 30       	cpi	r24, 0x0B	; 11
    47b8:	71 f4       	brne	.+28     	; 0x47d6 <menu_ProcessMessage+0x3c2>
    47ba:	40 91 46 05 	lds	r20, 0x0546	; 0x800546 <dataEntry32>
    47be:	50 91 47 05 	lds	r21, 0x0547	; 0x800547 <dataEntry32+0x1>
    47c2:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <dataEntry32+0x2>
    47c6:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <dataEntry32+0x3>
    47ca:	4d 93       	st	X+, r20
    47cc:	5d 93       	st	X+, r21
    47ce:	6d 93       	st	X+, r22
    47d0:	7c 93       	st	X, r23
    47d2:	13 97       	sbiw	r26, 0x03	; 3
    47d4:	03 c0       	rjmp	.+6      	; 0x47dc <menu_ProcessMessage+0x3c8>
    47d6:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <dataEntry>
    47da:	8c 93       	st	X, r24
    47dc:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    47e0:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    47e4:	72 96       	adiw	r30, 0x12	; 18
    47e6:	05 90       	lpm	r0, Z+
    47e8:	f4 91       	lpm	r31, Z
    47ea:	e0 2d       	mov	r30, r0
    47ec:	30 97       	sbiw	r30, 0x00	; 0
    47ee:	11 f0       	breq	.+4      	; 0x47f4 <menu_ProcessMessage+0x3e0>
    47f0:	8c 2f       	mov	r24, r28
    47f2:	19 95       	eicall
    47f4:	8f ef       	ldi	r24, 0xFF	; 255
    47f6:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <nibbleIndex>
    47fa:	39 dc       	rcall	.-1934   	; 0x406e <menuCurrMenuToLCD>
    47fc:	a2 dd       	rcall	.-1212   	; 0x4342 <menuItemChanged>
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	15 c0       	rjmp	.+42     	; 0x482c <menu_ProcessMessage+0x418>
    4802:	80 e0       	ldi	r24, 0x00	; 0
    4804:	13 c0       	rjmp	.+38     	; 0x482c <menu_ProcessMessage+0x418>
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	11 c0       	rjmp	.+34     	; 0x482c <menu_ProcessMessage+0x418>
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	0f c0       	rjmp	.+30     	; 0x482c <menu_ProcessMessage+0x418>
    480e:	80 e0       	ldi	r24, 0x00	; 0
    4810:	0d c0       	rjmp	.+26     	; 0x482c <menu_ProcessMessage+0x418>
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	0b c0       	rjmp	.+22     	; 0x482c <menu_ProcessMessage+0x418>
    4816:	80 e0       	ldi	r24, 0x00	; 0
    4818:	09 c0       	rjmp	.+18     	; 0x482c <menu_ProcessMessage+0x418>
    481a:	80 e0       	ldi	r24, 0x00	; 0
    481c:	07 c0       	rjmp	.+14     	; 0x482c <menu_ProcessMessage+0x418>
    481e:	80 e0       	ldi	r24, 0x00	; 0
    4820:	05 c0       	rjmp	.+10     	; 0x482c <menu_ProcessMessage+0x418>
    4822:	80 e0       	ldi	r24, 0x00	; 0
    4824:	03 c0       	rjmp	.+6      	; 0x482c <menu_ProcessMessage+0x418>
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	01 c0       	rjmp	.+2      	; 0x482c <menu_ProcessMessage+0x418>
    482a:	80 e0       	ldi	r24, 0x00	; 0
    482c:	cf 91       	pop	r28
    482e:	08 95       	ret

00004830 <init_SoftKeys>:


void init_SoftKeys(){
    4830:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    4832:	0e 94 04 0a 	call	0x1408	; 0x1408 <eeprom_ReadSoftkeys>
    4836:	8f 3f       	cpi	r24, 0xFF	; 255
    4838:	c9 f4       	brne	.+50     	; 0x486c <init_SoftKeys+0x3c>
    483a:	0f c0       	rjmp	.+30     	; 0x485a <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    483c:	82 2f       	mov	r24, r18
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	fc 01       	movw	r30, r24
    4842:	e9 5a       	subi	r30, 0xA9	; 169
    4844:	fa 4f       	sbci	r31, 0xFA	; 250
    4846:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    4848:	88 0f       	add	r24, r24
    484a:	99 1f       	adc	r25, r25
    484c:	fc 01       	movw	r30, r24
    484e:	e2 5a       	subi	r30, 0xA2	; 162
    4850:	fa 4f       	sbci	r31, 0xFA	; 250
    4852:	11 82       	std	Z+1, r1	; 0x01
    4854:	10 82       	st	Z, r1


void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4856:	2f 5f       	subi	r18, 0xFF	; 255
    4858:	01 c0       	rjmp	.+2      	; 0x485c <init_SoftKeys+0x2c>
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	24 30       	cpi	r18, 0x04	; 4
    485e:	70 f3       	brcs	.-36     	; 0x483c <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    4860:	40 e0       	ldi	r20, 0x00	; 0
    4862:	50 e0       	ldi	r21, 0x00	; 0
    4864:	67 e0       	ldi	r22, 0x07	; 7
    4866:	81 e0       	ldi	r24, 0x01	; 1
    4868:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <log_putError>
    486c:	c0 e0       	ldi	r28, 0x00	; 0
    486e:	25 c0       	rjmp	.+74     	; 0x48ba <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    4870:	4c 2f       	mov	r20, r28
    4872:	50 e0       	ldi	r21, 0x00	; 0
    4874:	fa 01       	movw	r30, r20
    4876:	e9 5a       	subi	r30, 0xA9	; 169
    4878:	fa 4f       	sbci	r31, 0xFA	; 250
    487a:	80 81       	ld	r24, Z
    487c:	85 31       	cpi	r24, 0x15	; 21
    487e:	70 f4       	brcc	.+28     	; 0x489c <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    4880:	24 e1       	ldi	r18, 0x14	; 20
    4882:	82 9f       	mul	r24, r18
    4884:	c0 01       	movw	r24, r0
    4886:	11 24       	eor	r1, r1
    4888:	86 52       	subi	r24, 0x26	; 38
    488a:	9c 4f       	sbci	r25, 0xFC	; 252
    488c:	44 0f       	add	r20, r20
    488e:	55 1f       	adc	r21, r21
    4890:	fa 01       	movw	r30, r20
    4892:	e2 5a       	subi	r30, 0xA2	; 162
    4894:	fa 4f       	sbci	r31, 0xFA	; 250
    4896:	91 83       	std	Z+1, r25	; 0x01
    4898:	80 83       	st	Z, r24
    489a:	0e c0       	rjmp	.+28     	; 0x48b8 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    489c:	fa 01       	movw	r30, r20
    489e:	ee 0f       	add	r30, r30
    48a0:	ff 1f       	adc	r31, r31
    48a2:	e2 5a       	subi	r30, 0xA2	; 162
    48a4:	fa 4f       	sbci	r31, 0xFA	; 250
    48a6:	11 82       	std	Z+1, r1	; 0x01
    48a8:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,i+1 | 0x10);
    48aa:	4f 5f       	subi	r20, 0xFF	; 255
    48ac:	5f 4f       	sbci	r21, 0xFF	; 255
    48ae:	40 61       	ori	r20, 0x10	; 16
    48b0:	67 e0       	ldi	r22, 0x07	; 7
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    48b8:	cf 5f       	subi	r28, 0xFF	; 255
    48ba:	c4 30       	cpi	r28, 0x04	; 4
    48bc:	c8 f2       	brcs	.-78     	; 0x4870 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,i+1 | 0x10);
		}
	}
}
    48be:	cf 91       	pop	r28
    48c0:	08 95       	ret

000048c2 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    48c2:	64 30       	cpi	r22, 0x04	; 4
    48c4:	f0 f5       	brcc	.+124    	; 0x4942 <softKey_Set+0x80>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    48c6:	00 97       	sbiw	r24, 0x00	; 0
    48c8:	81 f1       	breq	.+96     	; 0x492a <softKey_Set+0x68>
    48ca:	fc 01       	movw	r30, r24
    48cc:	24 91       	lpm	r18, Z
    48ce:	2f 73       	andi	r18, 0x3F	; 63
    48d0:	21 30       	cpi	r18, 0x01	; 1
    48d2:	59 f5       	brne	.+86     	; 0x492a <softKey_Set+0x68>
    48d4:	31 96       	adiw	r30, 0x01	; 1
    48d6:	24 91       	lpm	r18, Z
    48d8:	24 ff       	sbrs	r18, 4
    48da:	27 c0       	rjmp	.+78     	; 0x492a <softKey_Set+0x68>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    48dc:	46 2f       	mov	r20, r22
    48de:	50 e0       	ldi	r21, 0x00	; 0
    48e0:	fa 01       	movw	r30, r20
    48e2:	ee 0f       	add	r30, r30
    48e4:	ff 1f       	adc	r31, r31
    48e6:	e2 5a       	subi	r30, 0xA2	; 162
    48e8:	fa 4f       	sbci	r31, 0xFA	; 250
    48ea:	91 83       	std	Z+1, r25	; 0x01
    48ec:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = (pSelMenuSoftKey - &menu_selFunc[0]) / sizeof(menu_selFunc[0]);
    48ee:	8a 5d       	subi	r24, 0xDA	; 218
    48f0:	93 40       	sbci	r25, 0x03	; 3
    48f2:	95 95       	asr	r25
    48f4:	87 95       	ror	r24
    48f6:	95 95       	asr	r25
    48f8:	87 95       	ror	r24
    48fa:	6d ec       	ldi	r22, 0xCD	; 205
    48fc:	7c ec       	ldi	r23, 0xCC	; 204
    48fe:	86 9f       	mul	r24, r22
    4900:	90 01       	movw	r18, r0
    4902:	87 9f       	mul	r24, r23
    4904:	30 0d       	add	r19, r0
    4906:	96 9f       	mul	r25, r22
    4908:	30 0d       	add	r19, r0
    490a:	11 24       	eor	r1, r1
    490c:	ad ec       	ldi	r26, 0xCD	; 205
    490e:	bc ec       	ldi	r27, 0xCC	; 204
    4910:	0e 94 fa 2f 	call	0x5ff4	; 0x5ff4 <__umulhisi3>
    4914:	92 95       	swap	r25
    4916:	82 95       	swap	r24
    4918:	8f 70       	andi	r24, 0x0F	; 15
    491a:	89 27       	eor	r24, r25
    491c:	9f 70       	andi	r25, 0x0F	; 15
    491e:	89 27       	eor	r24, r25
    4920:	fa 01       	movw	r30, r20
    4922:	e9 5a       	subi	r30, 0xA9	; 169
    4924:	fa 4f       	sbci	r31, 0xFA	; 250
    4926:	80 83       	st	Z, r24
    4928:	08 95       	ret
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    492a:	70 e0       	ldi	r23, 0x00	; 0
    492c:	fb 01       	movw	r30, r22
    492e:	ee 0f       	add	r30, r30
    4930:	ff 1f       	adc	r31, r31
    4932:	e2 5a       	subi	r30, 0xA2	; 162
    4934:	fa 4f       	sbci	r31, 0xFA	; 250
    4936:	11 82       	std	Z+1, r1	; 0x01
    4938:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    493a:	fb 01       	movw	r30, r22
    493c:	e9 5a       	subi	r30, 0xA9	; 169
    493e:	fa 4f       	sbci	r31, 0xFA	; 250
    4940:	10 82       	st	Z, r1
    4942:	08 95       	ret

00004944 <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    4944:	e0 91 4d 05 	lds	r30, 0x054D	; 0x80054d <currentMenu>
    4948:	f0 91 4e 05 	lds	r31, 0x054E	; 0x80054e <currentMenu+0x1>
    494c:	3e 96       	adiw	r30, 0x0e	; 14
    494e:	65 91       	lpm	r22, Z+
    4950:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    4952:	80 91 71 05 	lds	r24, 0x0571	; 0x800571 <menuVMenuSoftKey>
    4956:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <menuVMenuSoftKey+0x1>
    495a:	b3 df       	rcall	.-154    	; 0x48c2 <softKey_Set>
	return 0;
}
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	08 95       	ret

00004960 <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    4960:	0f 93       	push	r16
    4962:	1f 93       	push	r17
    4964:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    4966:	c0 e0       	ldi	r28, 0x00	; 0
    4968:	32 c0       	rjmp	.+100    	; 0x49ce <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    496a:	0c 2f       	mov	r16, r28
    496c:	10 e0       	ldi	r17, 0x00	; 0
    496e:	f8 01       	movw	r30, r16
    4970:	ee 0f       	add	r30, r30
    4972:	ff 1f       	adc	r31, r31
    4974:	e2 5a       	subi	r30, 0xA2	; 162
    4976:	fa 4f       	sbci	r31, 0xFA	; 250
    4978:	01 90       	ld	r0, Z+
    497a:	f0 81       	ld	r31, Z
    497c:	e0 2d       	mov	r30, r0
    497e:	30 97       	sbiw	r30, 0x00	; 0
    4980:	31 f0       	breq	.+12     	; 0x498e <softKeys_toLCD+0x2e>
    4982:	3e 96       	adiw	r30, 0x0e	; 14
    4984:	65 91       	lpm	r22, Z+
    4986:	75 91       	lpm	r23, Z+
    4988:	61 15       	cp	r22, r1
    498a:	71 05       	cpc	r23, r1
    498c:	21 f4       	brne	.+8      	; 0x4996 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    498e:	8c 2f       	mov	r24, r28
    4990:	0e 94 9c 2f 	call	0x5f38	; 0x5f38 <keylabel_clr>
    4994:	1b c0       	rjmp	.+54     	; 0x49cc <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    4996:	8c 2f       	mov	r24, r28
    4998:	0e 94 61 2f 	call	0x5ec2	; 0x5ec2 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    499c:	00 0f       	add	r16, r16
    499e:	11 1f       	adc	r17, r17
    49a0:	f8 01       	movw	r30, r16
    49a2:	e2 5a       	subi	r30, 0xA2	; 162
    49a4:	fa 4f       	sbci	r31, 0xFA	; 250
    49a6:	01 90       	ld	r0, Z+
    49a8:	f0 81       	ld	r31, Z
    49aa:	e0 2d       	mov	r30, r0
    49ac:	70 96       	adiw	r30, 0x10	; 16
    49ae:	05 90       	lpm	r0, Z+
    49b0:	f4 91       	lpm	r31, Z
    49b2:	e0 2d       	mov	r30, r0
    49b4:	30 97       	sbiw	r30, 0x00	; 0
    49b6:	51 f0       	breq	.+20     	; 0x49cc <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    49b8:	80 e0       	ldi	r24, 0x00	; 0
    49ba:	19 95       	eicall
    49bc:	81 38       	cpi	r24, 0x81	; 129
    49be:	11 f4       	brne	.+4      	; 0x49c4 <softKeys_toLCD+0x64>
    49c0:	6f ef       	ldi	r22, 0xFF	; 255
    49c2:	01 c0       	rjmp	.+2      	; 0x49c6 <softKeys_toLCD+0x66>
    49c4:	60 e0       	ldi	r22, 0x00	; 0
    49c6:	8c 2f       	mov	r24, r28
    49c8:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    49cc:	cf 5f       	subi	r28, 0xFF	; 255
    49ce:	c4 30       	cpi	r28, 0x04	; 4
    49d0:	60 f2       	brcs	.-104    	; 0x496a <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    49d2:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
}
    49d6:	cf 91       	pop	r28
    49d8:	1f 91       	pop	r17
    49da:	0f 91       	pop	r16
    49dc:	08 95       	ret

000049de <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    49de:	82 30       	cpi	r24, 0x02	; 2
    49e0:	49 f0       	breq	.+18     	; 0x49f4 <softKey_MessageKey_ToSoftKeyNr+0x16>
    49e2:	18 f4       	brcc	.+6      	; 0x49ea <softKey_MessageKey_ToSoftKeyNr+0xc>
    49e4:	81 30       	cpi	r24, 0x01	; 1
    49e6:	51 f0       	breq	.+20     	; 0x49fc <softKey_MessageKey_ToSoftKeyNr+0x1e>
    49e8:	0b c0       	rjmp	.+22     	; 0x4a00 <softKey_MessageKey_ToSoftKeyNr+0x22>
    49ea:	83 30       	cpi	r24, 0x03	; 3
    49ec:	59 f0       	breq	.+22     	; 0x4a04 <softKey_MessageKey_ToSoftKeyNr+0x26>
    49ee:	84 30       	cpi	r24, 0x04	; 4
    49f0:	19 f0       	breq	.+6      	; 0x49f8 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    49f2:	06 c0       	rjmp	.+12     	; 0x4a00 <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    49f8:	82 e0       	ldi	r24, 0x02	; 2
    49fa:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    49fc:	83 e0       	ldi	r24, 0x03	; 3
    49fe:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    4a00:	8f ef       	ldi	r24, 0xFF	; 255
    4a02:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    4a04:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    4a06:	08 95       	ret

00004a08 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    4a08:	0f 93       	push	r16
    4a0a:	1f 93       	push	r17
    4a0c:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    4a0e:	84 30       	cpi	r24, 0x04	; 4
    4a10:	d0 f5       	brcc	.+116    	; 0x4a86 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    4a12:	e8 2f       	mov	r30, r24
    4a14:	f0 e0       	ldi	r31, 0x00	; 0
    4a16:	ee 0f       	add	r30, r30
    4a18:	ff 1f       	adc	r31, r31
    4a1a:	e2 5a       	subi	r30, 0xA2	; 162
    4a1c:	fa 4f       	sbci	r31, 0xFA	; 250
    4a1e:	00 81       	ld	r16, Z
    4a20:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    4a22:	01 15       	cp	r16, r1
    4a24:	11 05       	cpc	r17, r1
    4a26:	89 f1       	breq	.+98     	; 0x4a8a <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    4a28:	f8 01       	movw	r30, r16
    4a2a:	94 91       	lpm	r25, Z
    4a2c:	9f 73       	andi	r25, 0x3F	; 63
    4a2e:	91 30       	cpi	r25, 0x01	; 1
    4a30:	71 f5       	brne	.+92     	; 0x4a8e <softKey_Execute+0x86>
    4a32:	31 96       	adiw	r30, 0x01	; 1
    4a34:	94 91       	lpm	r25, Z
    4a36:	94 ff       	sbrs	r25, 4
    4a38:	2c c0       	rjmp	.+88     	; 0x4a92 <softKey_Execute+0x8a>
    4a3a:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    4a3c:	3f 96       	adiw	r30, 0x0f	; 15
    4a3e:	05 90       	lpm	r0, Z+
    4a40:	f4 91       	lpm	r31, Z
    4a42:	e0 2d       	mov	r30, r0
    4a44:	30 97       	sbiw	r30, 0x00	; 0
    4a46:	89 f0       	breq	.+34     	; 0x4a6a <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    4a48:	86 2f       	mov	r24, r22
    4a4a:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    4a4c:	82 38       	cpi	r24, 0x82	; 130
    4a4e:	29 f4       	brne	.+10     	; 0x4a5a <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    4a50:	60 e0       	ldi	r22, 0x00	; 0
    4a52:	8c 2f       	mov	r24, r28
    4a54:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <keylabel_statcheck>
    4a58:	06 c0       	rjmp	.+12     	; 0x4a66 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    4a5a:	81 38       	cpi	r24, 0x81	; 129
    4a5c:	21 f4       	brne	.+8      	; 0x4a66 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    4a5e:	6f ef       	ldi	r22, 0xFF	; 255
    4a60:	8c 2f       	mov	r24, r28
    4a62:	0e 94 cf 2f 	call	0x5f9e	; 0x5f9e <keylabel_statcheck>
					}
					keylabel_toLCD();
    4a66:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    4a6a:	f8 01       	movw	r30, r16
    4a6c:	3c 96       	adiw	r30, 0x0c	; 12
    4a6e:	85 91       	lpm	r24, Z+
    4a70:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    4a72:	00 97       	sbiw	r24, 0x00	; 0
    4a74:	81 f0       	breq	.+32     	; 0x4a96 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    4a76:	b8 01       	movw	r22, r16
    4a78:	6e 5f       	subi	r22, 0xFE	; 254
    4a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    4a7c:	0e 94 47 19 	call	0x328e	; 0x328e <menu_Init>
					menu_InitLCD(); //display menu
    4a80:	c2 dc       	rcall	.-1660   	; 0x4406 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    4a82:	80 e0       	ldi	r24, 0x00	; 0
    4a84:	09 c0       	rjmp	.+18     	; 0x4a98 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    4a86:	8f ef       	ldi	r24, 0xFF	; 255
    4a88:	07 c0       	rjmp	.+14     	; 0x4a98 <softKey_Execute+0x90>
    4a8a:	8f ef       	ldi	r24, 0xFF	; 255
    4a8c:	05 c0       	rjmp	.+10     	; 0x4a98 <softKey_Execute+0x90>
    4a8e:	8f ef       	ldi	r24, 0xFF	; 255
    4a90:	03 c0       	rjmp	.+6      	; 0x4a98 <softKey_Execute+0x90>
    4a92:	8f ef       	ldi	r24, 0xFF	; 255
    4a94:	01 c0       	rjmp	.+2      	; 0x4a98 <softKey_Execute+0x90>
    4a96:	8f ef       	ldi	r24, 0xFF	; 255
}
    4a98:	cf 91       	pop	r28
    4a9a:	1f 91       	pop	r17
    4a9c:	0f 91       	pop	r16
    4a9e:	08 95       	ret

00004aa0 <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    4aa0:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    4aa2:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    4aa6:	8c e0       	ldi	r24, 0x0C	; 12
    4aa8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    4aac:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <pipe_PowerStatus>
    4ab0:	84 ff       	sbrs	r24, 4
    4ab2:	02 c0       	rjmp	.+4      	; 0x4ab8 <menu_showPowerState+0x18>
    4ab4:	80 e2       	ldi	r24, 0x20	; 32
    4ab6:	01 c0       	rjmp	.+2      	; 0x4aba <menu_showPowerState+0x1a>
    4ab8:	89 e0       	ldi	r24, 0x09	; 9
    4aba:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
	lcd_goto(saveCursor);
    4abe:	8c 2f       	mov	r24, r28
    4ac0:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>

    4ac4:	cf 91       	pop	r28
    4ac6:	08 95       	ret

00004ac8 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    4ac8:	85 b1       	in	r24, 0x05	; 5
    4aca:	80 64       	ori	r24, 0x40	; 64
    4acc:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    4ace:	83 e1       	ldi	r24, 0x13	; 19
    4ad0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
	menu_showPowerState();
    4ad4:	e5 df       	rcall	.-54     	; 0x4aa0 <menu_showPowerState>
	return 0;
}
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	08 95       	ret

00004ada <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    4ada:	85 b1       	in	r24, 0x05	; 5
    4adc:	8f 7b       	andi	r24, 0xBF	; 191
    4ade:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    4ae0:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <pipe_PowerStatus>
	menu_showPowerState();
    4ae4:	dd df       	rcall	.-70     	; 0x4aa0 <menu_showPowerState>
	return 0;
}
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	08 95       	ret

00004aea <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    4aea:	85 b1       	in	r24, 0x05	; 5
    4aec:	8f 7b       	andi	r24, 0xBF	; 191
    4aee:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <pipe_PowerStatus>
	menu_showPowerState();
    4af6:	d4 df       	rcall	.-88     	; 0x4aa0 <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    4af8:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4afa:	f8 94       	cli
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	06 c0       	rjmp	.+12     	; 0x4b0c <menuOnEnterPwrRest+0x22>
    4b00:	ed e2       	ldi	r30, 0x2D	; 45
    4b02:	f2 e0       	ldi	r31, 0x02	; 2
    4b04:	82 e3       	ldi	r24, 0x32	; 50
    4b06:	82 83       	std	Z+2, r24	; 0x02
    4b08:	13 82       	std	Z+3, r1	; 0x03
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	81 11       	cpse	r24, r1
    4b0e:	f8 cf       	rjmp	.-16     	; 0x4b00 <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4b10:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    4b12:	08 95       	ret

00004b14 <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    4b14:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <msgInIndex>
    4b18:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <msgOutIndex>
    4b1c:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <msgOverflow>
    4b20:	08 95       	ret

00004b22 <message_push>:
    4b22:	90 91 76 07 	lds	r25, 0x0776	; 0x800776 <msgInIndex>
    4b26:	e9 2f       	mov	r30, r25
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	e9 58       	subi	r30, 0x89	; 137
    4b2c:	f8 4f       	sbci	r31, 0xF8	; 248
    4b2e:	80 83       	st	Z, r24
    4b30:	9f 5f       	subi	r25, 0xFF	; 255
    4b32:	9f 71       	andi	r25, 0x1F	; 31
    4b34:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <msgOutIndex>
    4b38:	98 13       	cpse	r25, r24
    4b3a:	04 c0       	rjmp	.+8      	; 0x4b44 <message_push+0x22>
    4b3c:	8f ef       	ldi	r24, 0xFF	; 255
    4b3e:	80 93 75 07 	sts	0x0775, r24	; 0x800775 <msgOverflow>
    4b42:	08 95       	ret
    4b44:	90 93 76 07 	sts	0x0776, r25	; 0x800776 <msgInIndex>
    4b48:	08 95       	ret

00004b4a <message_get>:
    4b4a:	4f b7       	in	r20, 0x3f	; 63
    4b4c:	f8 94       	cli
    4b4e:	21 e0       	ldi	r18, 0x01	; 1
    4b50:	11 c0       	rjmp	.+34     	; 0x4b74 <message_get+0x2a>
    4b52:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <msgOutIndex>
    4b56:	30 91 76 07 	lds	r19, 0x0776	; 0x800776 <msgInIndex>
    4b5a:	8f ef       	ldi	r24, 0xFF	; 255
    4b5c:	20 e0       	ldi	r18, 0x00	; 0
    4b5e:	93 17       	cp	r25, r19
    4b60:	49 f0       	breq	.+18     	; 0x4b74 <message_get+0x2a>
    4b62:	e9 2f       	mov	r30, r25
    4b64:	f0 e0       	ldi	r31, 0x00	; 0
    4b66:	e9 58       	subi	r30, 0x89	; 137
    4b68:	f8 4f       	sbci	r31, 0xF8	; 248
    4b6a:	80 81       	ld	r24, Z
    4b6c:	9f 5f       	subi	r25, 0xFF	; 255
    4b6e:	9f 71       	andi	r25, 0x1F	; 31
    4b70:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <msgOutIndex>
    4b74:	21 11       	cpse	r18, r1
    4b76:	ed cf       	rjmp	.-38     	; 0x4b52 <message_get+0x8>
    4b78:	4f bf       	out	0x3f, r20	; 63
    4b7a:	08 95       	ret

00004b7c <message_status>:
    4b7c:	4f b7       	in	r20, 0x3f	; 63
    4b7e:	f8 94       	cli
    4b80:	91 e0       	ldi	r25, 0x01	; 1
    4b82:	08 c0       	rjmp	.+16     	; 0x4b94 <message_status+0x18>
    4b84:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <msgOutIndex>
    4b88:	20 91 76 07 	lds	r18, 0x0776	; 0x800776 <msgInIndex>
    4b8c:	90 e0       	ldi	r25, 0x00	; 0
    4b8e:	80 e0       	ldi	r24, 0x00	; 0
    4b90:	32 17       	cp	r19, r18
    4b92:	11 f0       	breq	.+4      	; 0x4b98 <message_status+0x1c>
    4b94:	8f ef       	ldi	r24, 0xFF	; 255
    4b96:	01 c0       	rjmp	.+2      	; 0x4b9a <message_status+0x1e>
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	91 11       	cpse	r25, r1
    4b9c:	f3 cf       	rjmp	.-26     	; 0x4b84 <message_status+0x8>
    4b9e:	4f bf       	out	0x3f, r20	; 63
    4ba0:	08 95       	ret

00004ba2 <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    4ba2:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    4ba4:	90 91 97 07 	lds	r25, 0x0797	; 0x800797 <msgPipe_Handling>
    4ba8:	99 23       	and	r25, r25
    4baa:	e1 f0       	breq	.+56     	; 0x4be4 <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    4bac:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <pipeMsgInIndex>
    4bb0:	21 e0       	ldi	r18, 0x01	; 1
    4bb2:	29 0f       	add	r18, r25
    4bb4:	20 93 74 07 	sts	0x0774, r18	; 0x800774 <pipeMsgInIndex>
    4bb8:	e9 2f       	mov	r30, r25
    4bba:	f0 e0       	ldi	r31, 0x00	; 0
    4bbc:	ee 0f       	add	r30, r30
    4bbe:	ff 1f       	adc	r31, r31
    4bc0:	ec 58       	subi	r30, 0x8C	; 140
    4bc2:	fa 4f       	sbci	r31, 0xFA	; 250
    4bc4:	51 83       	std	Z+1, r21	; 0x01
    4bc6:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    4bc8:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <pipeMsgOutIndex>
    4bcc:	28 13       	cpse	r18, r24
    4bce:	0a c0       	rjmp	.+20     	; 0x4be4 <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    4bd0:	90 93 74 07 	sts	0x0774, r25	; 0x800774 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    4bd4:	9f 3f       	cpi	r25, 0xFF	; 255
    4bd6:	19 f4       	brne	.+6      	; 0x4bde <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    4bd8:	8f ef       	ldi	r24, 0xFF	; 255
    4bda:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    4bde:	8f ef       	ldi	r24, 0xFF	; 255
    4be0:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <msgPipeOverflow>
    4be4:	08 95       	ret

00004be6 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    4be6:	e0 91 99 07 	lds	r30, 0x0799	; 0x800799 <pipeMsgOutIndex>
    4bea:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <pipeMsgInIndex>
    4bee:	e8 13       	cpse	r30, r24
    4bf0:	03 c0       	rjmp	.+6      	; 0x4bf8 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    4bf2:	8f ef       	ldi	r24, 0xFF	; 255
    4bf4:	9f ef       	ldi	r25, 0xFF	; 255
    4bf6:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    4bf8:	81 e0       	ldi	r24, 0x01	; 1
    4bfa:	8e 0f       	add	r24, r30
    4bfc:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <pipeMsgOutIndex>
    4c00:	f0 e0       	ldi	r31, 0x00	; 0
    4c02:	ee 0f       	add	r30, r30
    4c04:	ff 1f       	adc	r31, r31
    4c06:	ec 58       	subi	r30, 0x8C	; 140
    4c08:	fa 4f       	sbci	r31, 0xFA	; 250
    4c0a:	80 81       	ld	r24, Z
    4c0c:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    4c0e:	08 95       	ret

00004c10 <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    4c10:	90 91 99 07 	lds	r25, 0x0799	; 0x800799 <pipeMsgOutIndex>
    4c14:	80 91 74 07 	lds	r24, 0x0774	; 0x800774 <pipeMsgInIndex>
    4c18:	98 13       	cpse	r25, r24
    4c1a:	02 c0       	rjmp	.+4      	; 0x4c20 <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    4c1c:	80 e0       	ldi	r24, 0x00	; 0
    4c1e:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    4c20:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    4c22:	08 95       	ret

00004c24 <init_Midi>:
// ------------------------------------ M I D I   G E N E R A L --------------------------------------

void init_Midi(){
	// turn off all 12 couplers
	uint8_t* pCoupler = midi_Couplers;
	for (uint8_t i = 0; i < COUPLER_COUNT; i++){
    4c24:	80 e0       	ldi	r24, 0x00	; 0

// ------------------------------------ M I D I   G E N E R A L --------------------------------------

void init_Midi(){
	// turn off all 12 couplers
	uint8_t* pCoupler = midi_Couplers;
    4c26:	e3 eb       	ldi	r30, 0xB3	; 179
    4c28:	f7 e0       	ldi	r31, 0x07	; 7
	for (uint8_t i = 0; i < COUPLER_COUNT; i++){
    4c2a:	03 c0       	rjmp	.+6      	; 0x4c32 <init_Midi+0xe>
		*pCoupler++ = 0;
    4c2c:	10 82       	st	Z, r1
// ------------------------------------ M I D I   G E N E R A L --------------------------------------

void init_Midi(){
	// turn off all 12 couplers
	uint8_t* pCoupler = midi_Couplers;
	for (uint8_t i = 0; i < COUPLER_COUNT; i++){
    4c2e:	8f 5f       	subi	r24, 0xFF	; 255
		*pCoupler++ = 0;
    4c30:	31 96       	adiw	r30, 0x01	; 1
// ------------------------------------ M I D I   G E N E R A L --------------------------------------

void init_Midi(){
	// turn off all 12 couplers
	uint8_t* pCoupler = midi_Couplers;
	for (uint8_t i = 0; i < COUPLER_COUNT; i++){
    4c32:	8c 30       	cpi	r24, 0x0C	; 12
    4c34:	d8 f3       	brcs	.-10     	; 0x4c2c <init_Midi+0x8>
		*pCoupler++ = 0;
	}
}
    4c36:	08 95       	ret

00004c38 <set_Coupler>:

// ------------------------------------ C O U P L E R   S E T T I N  G ---------------------------------

uint8_t set_Coupler(uint8_t cplNr){
	// returns MANUAL (!) if corrsponding inverse coupler had to be turned off, or FALSE if no manual should be turned off
	if (cplNr < COUPLER_COUNT){
    4c38:	8c 30       	cpi	r24, 0x0C	; 12
    4c3a:	e8 f4       	brcc	.+58     	; 0x4c76 <set_Coupler+0x3e>
		midi_Couplers[cplNr] = COUPLER_ON;
    4c3c:	e8 2f       	mov	r30, r24
    4c3e:	f0 e0       	ldi	r31, 0x00	; 0
    4c40:	ed 54       	subi	r30, 0x4D	; 77
    4c42:	f8 4f       	sbci	r31, 0xF8	; 248
    4c44:	9f ef       	ldi	r25, 0xFF	; 255
    4c46:	90 83       	st	Z, r25
		// calculate inverse Coupler
		if (cplNr >= COUPLER_COUNT/2){
    4c48:	86 30       	cpi	r24, 0x06	; 6
    4c4a:	10 f0       	brcs	.+4      	; 0x4c50 <set_Coupler+0x18>
			// 6...11 -> 0...5
			cplNr = cplNr - COUPLER_COUNT/2;
    4c4c:	86 50       	subi	r24, 0x06	; 6
    4c4e:	01 c0       	rjmp	.+2      	; 0x4c52 <set_Coupler+0x1a>
		} else {
			// 0...5 -> 6...11
			cplNr = cplNr + COUPLER_COUNT/2;
    4c50:	8a 5f       	subi	r24, 0xFA	; 250
		}
		if (midi_Couplers[cplNr] != 0){
    4c52:	e8 2f       	mov	r30, r24
    4c54:	f0 e0       	ldi	r31, 0x00	; 0
    4c56:	df 01       	movw	r26, r30
    4c58:	ad 54       	subi	r26, 0x4D	; 77
    4c5a:	b8 4f       	sbci	r27, 0xF8	; 248
    4c5c:	8c 91       	ld	r24, X
    4c5e:	88 23       	and	r24, r24
    4c60:	59 f0       	breq	.+22     	; 0x4c78 <set_Coupler+0x40>
			// reset inverse coupler and notify caller
			midi_Couplers[cplNr] = COUPLER_OFF;
    4c62:	df 01       	movw	r26, r30
    4c64:	ad 54       	subi	r26, 0x4D	; 77
    4c66:	b8 4f       	sbci	r27, 0xF8	; 248
    4c68:	1c 92       	st	X, r1
			return cplInfo[cplNr].dest; // note to caller that this destination manual should be turned off
    4c6a:	ee 0f       	add	r30, r30
    4c6c:	ff 1f       	adc	r31, r31
    4c6e:	ee 55       	subi	r30, 0x5E	; 94
    4c70:	f0 4f       	sbci	r31, 0xF0	; 240
    4c72:	84 91       	lpm	r24, Z
    4c74:	08 95       	ret
		}
	}
	return FALSE;
    4c76:	80 e0       	ldi	r24, 0x00	; 0
}
    4c78:	08 95       	ret

00004c7a <midiAllReset>:


void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff);

void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
    4c7a:	80 e8       	ldi	r24, 0x80	; 128
    4c7c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <pipeProcessing>
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
    4c80:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <init_Pipe>
    4c84:	08 95       	ret

00004c86 <registers_CalcCount>:
// valid register are 0...63 !
// valid programs are 0...63

void registers_CalcCount(){
	uint8_t count = 0;
	for (uint8_t regSec = 0; regSec < REGISTER_SEC_COUNT; regSec++){
    4c86:	20 e0       	ldi	r18, 0x00	; 0
//-------------------------------------- R E G I S T E R  ---------------------------------------------
// valid register are 0...63 !
// valid programs are 0...63

void registers_CalcCount(){
	uint8_t count = 0;
    4c88:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t regSec = 0; regSec < REGISTER_SEC_COUNT; regSec++){
    4c8a:	12 c0       	rjmp	.+36     	; 0x4cb0 <registers_CalcCount+0x2a>
		if ((registerMap[regSec].endReg != REGISTER_NONE) && (registerMap[regSec].endReg >= count)){
    4c8c:	82 2f       	mov	r24, r18
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	fc 01       	movw	r30, r24
    4c92:	ee 0f       	add	r30, r30
    4c94:	ff 1f       	adc	r31, r31
    4c96:	8e 0f       	add	r24, r30
    4c98:	9f 1f       	adc	r25, r31
    4c9a:	fc 01       	movw	r30, r24
    4c9c:	e6 56       	subi	r30, 0x66	; 102
    4c9e:	f8 4f       	sbci	r31, 0xF8	; 248
    4ca0:	81 81       	ldd	r24, Z+1	; 0x01
    4ca2:	8f 3f       	cpi	r24, 0xFF	; 255
    4ca4:	21 f0       	breq	.+8      	; 0x4cae <registers_CalcCount+0x28>
    4ca6:	83 17       	cp	r24, r19
    4ca8:	10 f0       	brcs	.+4      	; 0x4cae <registers_CalcCount+0x28>
			// endReg == 0xFF -> ignore, endReg == 0 -> count=1
			count = registerMap[regSec].endReg+1;			
    4caa:	31 e0       	ldi	r19, 0x01	; 1
    4cac:	38 0f       	add	r19, r24
// valid register are 0...63 !
// valid programs are 0...63

void registers_CalcCount(){
	uint8_t count = 0;
	for (uint8_t regSec = 0; regSec < REGISTER_SEC_COUNT; regSec++){
    4cae:	2f 5f       	subi	r18, 0xFF	; 255
    4cb0:	28 30       	cpi	r18, 0x08	; 8
    4cb2:	60 f3       	brcs	.-40     	; 0x4c8c <registers_CalcCount+0x6>
		if ((registerMap[regSec].endReg != REGISTER_NONE) && (registerMap[regSec].endReg >= count)){
			// endReg == 0xFF -> ignore, endReg == 0 -> count=1
			count = registerMap[regSec].endReg+1;			
		}
	}
	registerCount = count;
    4cb4:	30 93 b2 07 	sts	0x07B2, r19	; 0x8007b2 <registerCount>
    4cb8:	08 95       	ret

00004cba <init_Registers>:

void init_Registers(){
	// init programs to null
	// init registerMap to null
	// try to get register map from eeprom
	for (uint8_t regSec = 0; regSec < REGISTER_SEC_COUNT; regSec++){
    4cba:	20 e0       	ldi	r18, 0x00	; 0
    4cbc:	0e c0       	rjmp	.+28     	; 0x4cda <init_Registers+0x20>
		registerMap[regSec].startReg = REGISTER_NONE; // CAUTION register == 0xFF -> no register
    4cbe:	82 2f       	mov	r24, r18
    4cc0:	90 e0       	ldi	r25, 0x00	; 0
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	ee 0f       	add	r30, r30
    4cc6:	ff 1f       	adc	r31, r31
    4cc8:	e8 0f       	add	r30, r24
    4cca:	f9 1f       	adc	r31, r25
    4ccc:	e6 56       	subi	r30, 0x66	; 102
    4cce:	f8 4f       	sbci	r31, 0xF8	; 248
    4cd0:	8f ef       	ldi	r24, 0xFF	; 255
    4cd2:	80 83       	st	Z, r24
		registerMap[regSec].endReg = REGISTER_NONE;
    4cd4:	81 83       	std	Z+1, r24	; 0x01
		registerMap[regSec].bitStart = 0;
    4cd6:	12 82       	std	Z+2, r1	; 0x02

void init_Registers(){
	// init programs to null
	// init registerMap to null
	// try to get register map from eeprom
	for (uint8_t regSec = 0; regSec < REGISTER_SEC_COUNT; regSec++){
    4cd8:	2f 5f       	subi	r18, 0xFF	; 255
    4cda:	28 30       	cpi	r18, 0x08	; 8
    4cdc:	80 f3       	brcs	.-32     	; 0x4cbe <init_Registers+0x4>
		registerMap[regSec].startReg = REGISTER_NONE; // CAUTION register == 0xFF -> no register
		registerMap[regSec].endReg = REGISTER_NONE;
		registerMap[regSec].bitStart = 0;
	}
	if (eeprom_ReadReg() == EE_LOAD_ERROR){
    4cde:	0e 94 a8 09 	call	0x1350	; 0x1350 <eeprom_ReadReg>
    4ce2:	8f 3f       	cpi	r24, 0xFF	; 255
    4ce4:	49 f4       	brne	.+18     	; 0x4cf8 <init_Registers+0x3e>
		registerCount = 0;
    4ce6:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <registerCount>
		log_putError(LOG_CAT_EE,LOG_CATEE_REGISTER,0);
    4cea:	40 e0       	ldi	r20, 0x00	; 0
    4cec:	50 e0       	ldi	r21, 0x00	; 0
    4cee:	65 e0       	ldi	r22, 0x05	; 5
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <log_putError>
    4cf6:	01 c0       	rjmp	.+2      	; 0x4cfa <init_Registers+0x40>
	} else {
		registers_CalcCount(); // registers are loaded from init or eeprom, now get count
    4cf8:	c6 df       	rcall	.-116    	; 0x4c86 <registers_CalcCount>
	}
	// try to get programs
	if (eeprom_ReadProg() == EE_LOAD_ERROR){
    4cfa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <eeprom_ReadProg>
    4cfe:	8f 3f       	cpi	r24, 0xFF	; 255
    4d00:	f1 f4       	brne	.+60     	; 0x4d3e <init_Registers+0x84>
    4d02:	14 c0       	rjmp	.+40     	; 0x4d2c <init_Registers+0x72>
		// load error, reset programs
		for (uint8_t progNr = 0; progNr < PROGRAM_COUNT; progNr++){
			for (uint8_t regNr = 0; regNr < (REGISTER_COUNT / 8); regNr++) {
				programMap[progNr][regNr] = 0;
    4d04:	e9 2f       	mov	r30, r25
    4d06:	f0 e0       	ldi	r31, 0x00	; 0
    4d08:	ee 0f       	add	r30, r30
    4d0a:	ff 1f       	adc	r31, r31
    4d0c:	ee 0f       	add	r30, r30
    4d0e:	ff 1f       	adc	r31, r31
    4d10:	ee 0f       	add	r30, r30
    4d12:	ff 1f       	adc	r31, r31
    4d14:	e2 50       	subi	r30, 0x02	; 2
    4d16:	f7 4f       	sbci	r31, 0xF7	; 247
    4d18:	e8 0f       	add	r30, r24
    4d1a:	f1 1d       	adc	r31, r1
    4d1c:	10 82       	st	Z, r1
	}
	// try to get programs
	if (eeprom_ReadProg() == EE_LOAD_ERROR){
		// load error, reset programs
		for (uint8_t progNr = 0; progNr < PROGRAM_COUNT; progNr++){
			for (uint8_t regNr = 0; regNr < (REGISTER_COUNT / 8); regNr++) {
    4d1e:	8f 5f       	subi	r24, 0xFF	; 255
    4d20:	01 c0       	rjmp	.+2      	; 0x4d24 <init_Registers+0x6a>
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	88 30       	cpi	r24, 0x08	; 8
    4d26:	70 f3       	brcs	.-36     	; 0x4d04 <init_Registers+0x4a>
		registers_CalcCount(); // registers are loaded from init or eeprom, now get count
	}
	// try to get programs
	if (eeprom_ReadProg() == EE_LOAD_ERROR){
		// load error, reset programs
		for (uint8_t progNr = 0; progNr < PROGRAM_COUNT; progNr++){
    4d28:	9f 5f       	subi	r25, 0xFF	; 255
    4d2a:	01 c0       	rjmp	.+2      	; 0x4d2e <init_Registers+0x74>
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	90 34       	cpi	r25, 0x40	; 64
    4d30:	c0 f3       	brcs	.-16     	; 0x4d22 <init_Registers+0x68>
			for (uint8_t regNr = 0; regNr < (REGISTER_COUNT / 8); regNr++) {
				programMap[progNr][regNr] = 0;
			}
		}
		log_putError(LOG_CAT_EE,LOG_CATEE_PROGRAM,0);
    4d32:	40 e0       	ldi	r20, 0x00	; 0
    4d34:	50 e0       	ldi	r21, 0x00	; 0
    4d36:	66 e0       	ldi	r22, 0x06	; 6
    4d38:	81 e0       	ldi	r24, 0x01	; 1
    4d3a:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <log_putError>
    4d3e:	08 95       	ret

00004d40 <regNr_to_moduleBit>:
}

ModulBitError_t regNr_to_moduleBit(uint8_t regNr){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if ((regNr < registerCount) && (regNr < REGISTER_COUNT)) {
    4d40:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <registerCount>
    4d44:	89 17       	cp	r24, r25
    4d46:	a8 f4       	brcc	.+42     	; 0x4d72 <regNr_to_moduleBit+0x32>
    4d48:	80 34       	cpi	r24, 0x40	; 64
    4d4a:	98 f4       	brcc	.+38     	; 0x4d72 <regNr_to_moduleBit+0x32>
		// valid regNr
		regNr++;
    4d4c:	8f 5f       	subi	r24, 0xFF	; 255
		RegisterMap_t *pRange;
		pRange = &(registerMap[0]); // check all Ranges 
		uint8_t i = REGISTER_SEC_COUNT;
    4d4e:	98 e0       	ldi	r25, 0x08	; 8
	ModulBitError_t result;
	if ((regNr < registerCount) && (regNr < REGISTER_COUNT)) {
		// valid regNr
		regNr++;
		RegisterMap_t *pRange;
		pRange = &(registerMap[0]); // check all Ranges 
    4d50:	ea e9       	ldi	r30, 0x9A	; 154
    4d52:	f7 e0       	ldi	r31, 0x07	; 7
		uint8_t i = REGISTER_SEC_COUNT;
		do {
			if ((regNr >= pRange->startReg) && (regNr <= pRange->endReg)) {
    4d54:	20 81       	ld	r18, Z
    4d56:	82 17       	cp	r24, r18
    4d58:	48 f0       	brcs	.+18     	; 0x4d6c <regNr_to_moduleBit+0x2c>
    4d5a:	31 81       	ldd	r19, Z+1	; 0x01
    4d5c:	38 17       	cp	r19, r24
    4d5e:	30 f0       	brcs	.+12     	; 0x4d6c <regNr_to_moduleBit+0x2c>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (regNr - pRange->startReg);
    4d60:	32 81       	ldd	r19, Z+2	; 0x02
    4d62:	98 2f       	mov	r25, r24
    4d64:	92 1b       	sub	r25, r18
				return (result);
    4d66:	80 e0       	ldi	r24, 0x00	; 0
    4d68:	93 0f       	add	r25, r19
    4d6a:	08 95       	ret
			}
			pRange++;
    4d6c:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    4d6e:	91 50       	subi	r25, 0x01	; 1
    4d70:	89 f7       	brne	.-30     	; 0x4d54 <regNr_to_moduleBit+0x14>
	}
	// when we are here: none off the defined ranges contained register
	result.error = MODULE_ERROR;
	return (result);
    4d72:	8f ef       	ldi	r24, 0xFF	; 255
    4d74:	90 e0       	ldi	r25, 0x00	; 0
}
    4d76:	08 95       	ret

00004d78 <read_Register>:

uint8_t read_Register(uint8_t regNr, uint8_t mode){
    4d78:	cf 93       	push	r28
	// mode: REGISTER_READ_HWIN, REGISTER_READ_SWOUT, REGISTER_READ_ALL
	// result: 0x01: REGISTER_ON, 0x00: REGISTER_OFF
	if (regNr < registerCount) {
    4d7a:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <registerCount>
    4d7e:	89 17       	cp	r24, r25
    4d80:	a0 f5       	brcc	.+104    	; 0x4dea <read_Register+0x72>
    4d82:	c6 2f       	mov	r28, r22
		// valid register
		ModulBitError_t modBitComplette = regNr_to_moduleBit(regNr);
    4d84:	dd df       	rcall	.-70     	; 0x4d40 <regNr_to_moduleBit>
		if (modBitComplette.error == MODULE_NOERROR) {
    4d86:	81 11       	cpse	r24, r1
    4d88:	2a c0       	rjmp	.+84     	; 0x4dde <read_Register+0x66>
			// register is assgined to module
			uint8_t modBit = modBitComplette.moduleBit; 
			uint8_t bitNr = MODULE_BIT_TO_BIT(modBit);
    4d8a:	29 2f       	mov	r18, r25
    4d8c:	2f 71       	andi	r18, 0x1F	; 31
			uint8_t modulNr = MODULE_BIT_TO_MODULE(modBit);
    4d8e:	92 95       	swap	r25
    4d90:	96 95       	lsr	r25
    4d92:	97 70       	andi	r25, 0x07	; 7
			uint8_t mask = 1 << modulNr;
    4d94:	41 e0       	ldi	r20, 0x01	; 1
    4d96:	50 e0       	ldi	r21, 0x00	; 0
    4d98:	02 c0       	rjmp	.+4      	; 0x4d9e <read_Register+0x26>
    4d9a:	44 0f       	add	r20, r20
    4d9c:	55 1f       	adc	r21, r21
    4d9e:	9a 95       	dec	r25
    4da0:	e2 f7       	brpl	.-8      	; 0x4d9a <read_Register+0x22>
			if (((pipe[bitNr].pipeOut & mask) == 0) && ((mode & REGISTER_READ_SWOUT) != 0))
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	f9 01       	movw	r30, r18
    4da6:	ee 0f       	add	r30, r30
    4da8:	ff 1f       	adc	r31, r31
    4daa:	ee 0f       	add	r30, r30
    4dac:	ff 1f       	adc	r31, r31
    4dae:	ee 0f       	add	r30, r30
    4db0:	ff 1f       	adc	r31, r31
    4db2:	e9 5b       	subi	r30, 0xB9	; 185
    4db4:	fd 4f       	sbci	r31, 0xFD	; 253
    4db6:	91 81       	ldd	r25, Z+1	; 0x01
    4db8:	94 23       	and	r25, r20
    4dba:	11 f4       	brne	.+4      	; 0x4dc0 <read_Register+0x48>
    4dbc:	c1 fd       	sbrc	r28, 1
    4dbe:	11 c0       	rjmp	.+34     	; 0x4de2 <read_Register+0x6a>
				// read sw output and output is L (active)
				return REGISTER_ON;
			else if (((pipe[bitNr].pipeIn & mask) != 0) && ((mode & REGISTER_READ_HWIN) != 0)) {
    4dc0:	22 0f       	add	r18, r18
    4dc2:	33 1f       	adc	r19, r19
    4dc4:	22 0f       	add	r18, r18
    4dc6:	33 1f       	adc	r19, r19
    4dc8:	22 0f       	add	r18, r18
    4dca:	33 1f       	adc	r19, r19
    4dcc:	f9 01       	movw	r30, r18
    4dce:	e9 5b       	subi	r30, 0xB9	; 185
    4dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    4dd2:	96 81       	ldd	r25, Z+6	; 0x06
    4dd4:	49 23       	and	r20, r25
    4dd6:	51 f0       	breq	.+20     	; 0x4dec <read_Register+0x74>
    4dd8:	c0 fd       	sbrc	r28, 0
    4dda:	05 c0       	rjmp	.+10     	; 0x4de6 <read_Register+0x6e>
    4ddc:	07 c0       	rjmp	.+14     	; 0x4dec <read_Register+0x74>
			} else  {
				return REGISTER_OFF;
			}
		}
	}
	return REGISTER_OFF; // default for unassigned/invalid register
    4dde:	80 e0       	ldi	r24, 0x00	; 0
    4de0:	05 c0       	rjmp	.+10     	; 0x4dec <read_Register+0x74>
			uint8_t bitNr = MODULE_BIT_TO_BIT(modBit);
			uint8_t modulNr = MODULE_BIT_TO_MODULE(modBit);
			uint8_t mask = 1 << modulNr;
			if (((pipe[bitNr].pipeOut & mask) == 0) && ((mode & REGISTER_READ_SWOUT) != 0))
				// read sw output and output is L (active)
				return REGISTER_ON;
    4de2:	81 e0       	ldi	r24, 0x01	; 1
    4de4:	03 c0       	rjmp	.+6      	; 0x4dec <read_Register+0x74>
			else if (((pipe[bitNr].pipeIn & mask) != 0) && ((mode & REGISTER_READ_HWIN) != 0)) {
				// read hw input and Input is H (active)
				// result ON if output is H (works with disconnected HW or input is H
				return REGISTER_ON;
    4de6:	81 e0       	ldi	r24, 0x01	; 1
    4de8:	01 c0       	rjmp	.+2      	; 0x4dec <read_Register+0x74>
			} else  {
				return REGISTER_OFF;
			}
		}
	}
	return REGISTER_OFF; // default for unassigned/invalid register
    4dea:	80 e0       	ldi	r24, 0x00	; 0
}
    4dec:	cf 91       	pop	r28
    4dee:	08 95       	ret

00004df0 <read_allRegister>:

void read_allRegister(uint8_t* resultPtr){
    4df0:	ef 92       	push	r14
    4df2:	ff 92       	push	r15
    4df4:	1f 93       	push	r17
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	7c 01       	movw	r14, r24
	// read all registers to memory (no matter if hw inp or sw out)
	uint8_t mask = 0;
	for (uint8_t regNr = 0; regNr < REGISTER_COUNT; regNr++){
    4dfc:	c0 e0       	ldi	r28, 0x00	; 0
	return REGISTER_OFF; // default for unassigned/invalid register
}

void read_allRegister(uint8_t* resultPtr){
	// read all registers to memory (no matter if hw inp or sw out)
	uint8_t mask = 0;
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t regNr = 0; regNr < REGISTER_COUNT; regNr++){
    4e00:	15 c0       	rjmp	.+42     	; 0x4e2c <read_allRegister+0x3c>
    4e02:	1c 2f       	mov	r17, r28
    4e04:	17 70       	andi	r17, 0x07	; 7
		// always read all registers, even if unassigned
		// begin with first register, bit 0
		if ((regNr & 0x07) == 0) {
    4e06:	09 f4       	brne	.+2      	; 0x4e0a <read_allRegister+0x1a>
			// reset mask every 8 bits, bit 0, 8, 16, 24
			mask = 0;
    4e08:	80 e0       	ldi	r24, 0x00	; 0
		}
		mask = (mask >> 1 )  | (read_Register(regNr, REGISTER_READ_ALL) == REGISTER_OFF ? 0 : 0x80);
    4e0a:	d8 2f       	mov	r29, r24
    4e0c:	d6 95       	lsr	r29
    4e0e:	63 e0       	ldi	r22, 0x03	; 3
    4e10:	8c 2f       	mov	r24, r28
    4e12:	b2 df       	rcall	.-156    	; 0x4d78 <read_Register>
    4e14:	81 11       	cpse	r24, r1
    4e16:	80 e8       	ldi	r24, 0x80	; 128
    4e18:	8d 2b       	or	r24, r29
		if ((regNr & 0x07) == 0x07) {
    4e1a:	17 30       	cpi	r17, 0x07	; 7
    4e1c:	31 f4       	brne	.+12     	; 0x4e2a <read_allRegister+0x3a>
			// bit 7, 15, 23, 31
			*resultPtr++ = mask;
    4e1e:	f7 01       	movw	r30, r14
    4e20:	80 83       	st	Z, r24
    4e22:	97 01       	movw	r18, r14
    4e24:	2f 5f       	subi	r18, 0xFF	; 255
    4e26:	3f 4f       	sbci	r19, 0xFF	; 255
    4e28:	79 01       	movw	r14, r18
}

void read_allRegister(uint8_t* resultPtr){
	// read all registers to memory (no matter if hw inp or sw out)
	uint8_t mask = 0;
	for (uint8_t regNr = 0; regNr < REGISTER_COUNT; regNr++){
    4e2a:	cf 5f       	subi	r28, 0xFF	; 255
    4e2c:	c0 34       	cpi	r28, 0x40	; 64
    4e2e:	48 f3       	brcs	.-46     	; 0x4e02 <read_allRegister+0x12>
		if ((regNr & 0x07) == 0x07) {
			// bit 7, 15, 23, 31
			*resultPtr++ = mask;
		}
	}
}
    4e30:	df 91       	pop	r29
    4e32:	cf 91       	pop	r28
    4e34:	1f 91       	pop	r17
    4e36:	ff 90       	pop	r15
    4e38:	ef 90       	pop	r14
    4e3a:	08 95       	ret

00004e3c <register_onOff>:
		

void register_onOff(uint8_t regNr, uint8_t onOff){
    4e3c:	cf 93       	push	r28
	// onOff: LSB==1: on, LSB==0: off
	if (regNr < registerCount) {
    4e3e:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <registerCount>
    4e42:	89 17       	cp	r24, r25
    4e44:	b8 f5       	brcc	.+110    	; 0x4eb4 <register_onOff+0x78>
    4e46:	c6 2f       	mov	r28, r22
		// valid register
		ModulBitError_t modBitComplette = regNr_to_moduleBit(regNr);
    4e48:	7b df       	rcall	.-266    	; 0x4d40 <regNr_to_moduleBit>
		if (modBitComplette.error == MODULE_NOERROR) {
    4e4a:	81 11       	cpse	r24, r1
    4e4c:	33 c0       	rjmp	.+102    	; 0x4eb4 <register_onOff+0x78>
			// register is assigned to module
			uint8_t modBit = modBitComplette.moduleBit;
			uint8_t bitNr = MODULE_BIT_TO_BIT(modBit);
    4e4e:	e9 2f       	mov	r30, r25
    4e50:	ef 71       	andi	r30, 0x1F	; 31
			uint8_t modulNr = MODULE_BIT_TO_MODULE(modBit);
    4e52:	92 95       	swap	r25
    4e54:	96 95       	lsr	r25
    4e56:	97 70       	andi	r25, 0x07	; 7
			if ((onOff & 0x01) != 0){
    4e58:	c0 ff       	sbrs	r28, 0
    4e5a:	17 c0       	rjmp	.+46     	; 0x4e8a <register_onOff+0x4e>
				// set register -> output L
				pipe[bitNr].pipeOut &= ~(1 << modulNr);
    4e5c:	f0 e0       	ldi	r31, 0x00	; 0
    4e5e:	21 e0       	ldi	r18, 0x01	; 1
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	a9 01       	movw	r20, r18
    4e64:	02 c0       	rjmp	.+4      	; 0x4e6a <register_onOff+0x2e>
    4e66:	44 0f       	add	r20, r20
    4e68:	55 1f       	adc	r21, r21
    4e6a:	9a 95       	dec	r25
    4e6c:	e2 f7       	brpl	.-8      	; 0x4e66 <register_onOff+0x2a>
    4e6e:	ca 01       	movw	r24, r20
    4e70:	ee 0f       	add	r30, r30
    4e72:	ff 1f       	adc	r31, r31
    4e74:	ee 0f       	add	r30, r30
    4e76:	ff 1f       	adc	r31, r31
    4e78:	ee 0f       	add	r30, r30
    4e7a:	ff 1f       	adc	r31, r31
    4e7c:	e9 5b       	subi	r30, 0xB9	; 185
    4e7e:	fd 4f       	sbci	r31, 0xFD	; 253
    4e80:	80 95       	com	r24
    4e82:	91 81       	ldd	r25, Z+1	; 0x01
    4e84:	89 23       	and	r24, r25
    4e86:	81 83       	std	Z+1, r24	; 0x01
    4e88:	15 c0       	rjmp	.+42     	; 0x4eb4 <register_onOff+0x78>
			} else {
				// reset register -> output H
				pipe[bitNr].pipeOut |= (1 << modulNr);
    4e8a:	f0 e0       	ldi	r31, 0x00	; 0
    4e8c:	21 e0       	ldi	r18, 0x01	; 1
    4e8e:	30 e0       	ldi	r19, 0x00	; 0
    4e90:	a9 01       	movw	r20, r18
    4e92:	02 c0       	rjmp	.+4      	; 0x4e98 <register_onOff+0x5c>
    4e94:	44 0f       	add	r20, r20
    4e96:	55 1f       	adc	r21, r21
    4e98:	9a 95       	dec	r25
    4e9a:	e2 f7       	brpl	.-8      	; 0x4e94 <register_onOff+0x58>
    4e9c:	ca 01       	movw	r24, r20
    4e9e:	ee 0f       	add	r30, r30
    4ea0:	ff 1f       	adc	r31, r31
    4ea2:	ee 0f       	add	r30, r30
    4ea4:	ff 1f       	adc	r31, r31
    4ea6:	ee 0f       	add	r30, r30
    4ea8:	ff 1f       	adc	r31, r31
    4eaa:	e9 5b       	subi	r30, 0xB9	; 185
    4eac:	fd 4f       	sbci	r31, 0xFD	; 253
    4eae:	91 81       	ldd	r25, Z+1	; 0x01
    4eb0:	89 2b       	or	r24, r25
    4eb2:	81 83       	std	Z+1, r24	; 0x01
			}
		}
	}
	// TODO Error Logging invalid register
}
    4eb4:	cf 91       	pop	r28
    4eb6:	08 95       	ret

00004eb8 <program_toRegister>:

void program_toRegister(uint8_t program){
    4eb8:	ef 92       	push	r14
    4eba:	ff 92       	push	r15
    4ebc:	0f 93       	push	r16
    4ebe:	1f 93       	push	r17
    4ec0:	cf 93       	push	r28
    4ec2:	df 93       	push	r29
	// Program 0..63
	if (program < PROGRAM_COUNT){
    4ec4:	80 34       	cpi	r24, 0x40	; 64
    4ec6:	08 f5       	brcc	.+66     	; 0x4f0a <program_toRegister+0x52>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program][0]);
    4ec8:	e8 2f       	mov	r30, r24
    4eca:	f0 e0       	ldi	r31, 0x00	; 0
    4ecc:	ee 0f       	add	r30, r30
    4ece:	ff 1f       	adc	r31, r31
    4ed0:	ee 0f       	add	r30, r30
    4ed2:	ff 1f       	adc	r31, r31
    4ed4:	ee 0f       	add	r30, r30
    4ed6:	ff 1f       	adc	r31, r31
    4ed8:	e2 50       	subi	r30, 0x02	; 2
    4eda:	f7 4f       	sbci	r31, 0xF7	; 247
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    4edc:	00 e0       	ldi	r16, 0x00	; 0

void program_toRegister(uint8_t program){
	// Program 0..63
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
    4ede:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t *regBytePtr = &(programMap[program][0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    4ee0:	12 c0       	rjmp	.+36     	; 0x4f06 <program_toRegister+0x4e>
			// 8 bytes for 64 registers
			regBits = *(regBytePtr++); // get adress for next 8 registers
    4ee2:	7f 01       	movw	r14, r30
    4ee4:	8f ef       	ldi	r24, 0xFF	; 255
    4ee6:	e8 1a       	sub	r14, r24
    4ee8:	f8 0a       	sbc	r15, r24
    4eea:	d0 81       	ld	r29, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    4eec:	c0 e0       	ldi	r28, 0x00	; 0
    4eee:	07 c0       	rjmp	.+14     	; 0x4efe <program_toRegister+0x46>
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    4ef0:	6d 2f       	mov	r22, r29
    4ef2:	61 70       	andi	r22, 0x01	; 1
    4ef4:	81 2f       	mov	r24, r17
    4ef6:	a2 df       	rcall	.-188    	; 0x4e3c <register_onOff>
				regBits = regBits >> 1;
    4ef8:	d6 95       	lsr	r29
				regNr++;
    4efa:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program][0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    4efc:	cf 5f       	subi	r28, 0xFF	; 255
    4efe:	c8 30       	cpi	r28, 0x08	; 8
    4f00:	b8 f3       	brcs	.-18     	; 0x4ef0 <program_toRegister+0x38>
	// Program 0..63
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program][0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    4f02:	0f 5f       	subi	r16, 0xFF	; 255
			// 8 bytes for 64 registers
			regBits = *(regBytePtr++); // get adress for next 8 registers
    4f04:	f7 01       	movw	r30, r14
	// Program 0..63
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program][0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    4f06:	08 30       	cpi	r16, 0x08	; 8
    4f08:	60 f3       	brcs	.-40     	; 0x4ee2 <program_toRegister+0x2a>
				regBits = regBits >> 1;
				regNr++;
			}
		}
	}
}
    4f0a:	df 91       	pop	r29
    4f0c:	cf 91       	pop	r28
    4f0e:	1f 91       	pop	r17
    4f10:	0f 91       	pop	r16
    4f12:	ff 90       	pop	r15
    4f14:	ef 90       	pop	r14
    4f16:	08 95       	ret

00004f18 <register_toProgram>:

void register_toProgram(uint8_t program){
	// Program 0..63
	// saves current registers to program RAM only, eeprom must be done else where
	if (program < PROGRAM_COUNT){
    4f18:	80 34       	cpi	r24, 0x40	; 64
    4f1a:	50 f4       	brcc	.+20     	; 0x4f30 <register_toProgram+0x18>
		uint8_t *regBytePtr = &(programMap[program][0]);
    4f1c:	90 e0       	ldi	r25, 0x00	; 0
    4f1e:	88 0f       	add	r24, r24
    4f20:	99 1f       	adc	r25, r25
    4f22:	88 0f       	add	r24, r24
    4f24:	99 1f       	adc	r25, r25
    4f26:	88 0f       	add	r24, r24
    4f28:	99 1f       	adc	r25, r25
		read_allRegister(regBytePtr);
    4f2a:	82 50       	subi	r24, 0x02	; 2
    4f2c:	97 4f       	sbci	r25, 0xF7	; 247
    4f2e:	60 cf       	rjmp	.-320    	; 0x4df0 <read_allRegister>
    4f30:	08 95       	ret

00004f32 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    4f32:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    4f34:	e8 ec       	ldi	r30, 0xC8	; 200
    4f36:	f7 e0       	ldi	r31, 0x07	; 7
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    4f38:	07 c0       	rjmp	.+14     	; 0x4f48 <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    4f3a:	8f ef       	ldi	r24, 0xFF	; 255
    4f3c:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    4f3e:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    4f40:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    4f42:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    4f44:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    4f46:	91 50       	subi	r25, 0x01	; 1
    4f48:	91 11       	cpse	r25, r1
    4f4a:	f7 cf       	rjmp	.-18     	; 0x4f3a <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    4f4c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <eeprom_ReadMidiInMap>
    4f50:	8f 3f       	cpi	r24, 0xFF	; 255
    4f52:	01 f5       	brne	.+64     	; 0x4f94 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    4f54:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    4f58:	e8 ec       	ldi	r30, 0xC8	; 200
    4f5a:	f7 e0       	ldi	r31, 0x07	; 7
    4f5c:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    4f5e:	84 e2       	ldi	r24, 0x24	; 36
    4f60:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    4f62:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    4f64:	98 e3       	ldi	r25, 0x38	; 56
    4f66:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    4f68:	21 e0       	ldi	r18, 0x01	; 1
    4f6a:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    4f6c:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    4f6e:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    4f70:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    4f72:	22 e0       	ldi	r18, 0x02	; 2
    4f74:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    4f76:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    4f78:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    4f7a:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    4f7c:	93 e0       	ldi	r25, 0x03	; 3
    4f7e:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    4f80:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    4f82:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    4f84:	8e e1       	ldi	r24, 0x1E	; 30
    4f86:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    4f88:	40 e0       	ldi	r20, 0x00	; 0
    4f8a:	50 e0       	ldi	r21, 0x00	; 0
    4f8c:	61 e0       	ldi	r22, 0x01	; 1
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <log_putError>
    4f94:	08 95       	ret

00004f96 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	06 c0       	rjmp	.+12     	; 0x4fa6 <init_Manual2Midi+0x10>
		midiOutMap[i].channel = MIDI_CHANNEL_NONE;
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	e8 53       	subi	r30, 0x38	; 56
    4f9e:	f7 4f       	sbci	r31, 0xF7	; 247
    4fa0:	3f ef       	ldi	r19, 0xFF	; 255
    4fa2:	30 83       	st	Z, r19
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    4fa4:	2f 5f       	subi	r18, 0xFF	; 255
    4fa6:	82 2f       	mov	r24, r18
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	00 97       	sbiw	r24, 0x00	; 0
    4fac:	b1 f7       	brne	.-20     	; 0x4f9a <init_Manual2Midi+0x4>
		midiOutMap[i].channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    4fae:	0e 94 26 09 	call	0x124c	; 0x124c <eeprom_ReadMidiOutMap>
    4fb2:	8f 3f       	cpi	r24, 0xFF	; 255
    4fb4:	a9 f4       	brne	.+42     	; 0x4fe0 <init_Manual2Midi+0x4a>
		midiEEPromLoadError = EE_LOAD_ERROR;
    4fb6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].channel = MIDI_CHANNEL_1;
    4fba:	e8 ec       	ldi	r30, 0xC8	; 200
    4fbc:	f8 e0       	ldi	r31, 0x08	; 8
    4fbe:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].channel = MIDI_CHANNEL_2;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	81 83       	std	Z+1, r24	; 0x01
		midiOutMap[MANUAL_I].channel = MIDI_CHANNEL_3;
    4fc4:	82 e0       	ldi	r24, 0x02	; 2
    4fc6:	82 83       	std	Z+2, r24	; 0x02
		midiOutMap[MANUAL_P].channel = MIDI_CHANNEL_4;
    4fc8:	83 e0       	ldi	r24, 0x03	; 3
    4fca:	83 83       	std	Z+3, r24	; 0x03
		midi_Setting.TxActivceSense = FALSE;
    4fcc:	ec ec       	ldi	r30, 0xCC	; 204
    4fce:	f8 e0       	ldi	r31, 0x08	; 8
    4fd0:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    4fd2:	11 82       	std	Z+1, r1	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    4fd4:	40 e0       	ldi	r20, 0x00	; 0
    4fd6:	50 e0       	ldi	r21, 0x00	; 0
    4fd8:	62 e0       	ldi	r22, 0x02	; 2
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <log_putError>
    4fe0:	08 95       	ret

00004fe2 <Manual_to_MidiNote>:
		midiLastInChannel = channel;
		midiLastInManual = MANUAL_NONE;
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    4fe2:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    4fe4:	8f ef       	ldi	r24, 0xFF	; 255
    4fe6:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    4fe8:	e4 30       	cpi	r30, 0x04	; 4
    4fea:	40 f4       	brcc	.+16     	; 0x4ffc <Manual_to_MidiNote+0x1a>
		if (midiOutMap[manual].channel != MIDI_CHANNEL_NONE) {
    4fec:	f0 e0       	ldi	r31, 0x00	; 0
    4fee:	e8 53       	subi	r30, 0x38	; 56
    4ff0:	f7 4f       	sbci	r31, 0xF7	; 247
    4ff2:	20 81       	ld	r18, Z
    4ff4:	2f 3f       	cpi	r18, 0xFF	; 255
    4ff6:	11 f0       	breq	.+4      	; 0x4ffc <Manual_to_MidiNote+0x1a>
			result.channel = midiOutMap[manual].channel;
    4ff8:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    4ffa:	96 2f       	mov	r25, r22
		}
	}
	return(result);
}
    4ffc:	08 95       	ret

00004ffe <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    4ffe:	70 e0       	ldi	r23, 0x00	; 0
    5000:	52 c0       	rjmp	.+164    	; 0x50a6 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    5002:	87 2f       	mov	r24, r23
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	24 2f       	mov	r18, r20
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	f9 01       	movw	r30, r18
    500c:	ee 0f       	add	r30, r30
    500e:	ff 1f       	adc	r31, r31
    5010:	df 01       	movw	r26, r30
    5012:	a2 0f       	add	r26, r18
    5014:	b3 1f       	adc	r27, r19
    5016:	fc 01       	movw	r30, r24
    5018:	ee 0f       	add	r30, r30
    501a:	ff 1f       	adc	r31, r31
    501c:	e8 0f       	add	r30, r24
    501e:	f9 1f       	adc	r31, r25
    5020:	ee 0f       	add	r30, r30
    5022:	ff 1f       	adc	r31, r31
    5024:	ee 0f       	add	r30, r30
    5026:	ff 1f       	adc	r31, r31
    5028:	ea 0f       	add	r30, r26
    502a:	fb 1f       	adc	r31, r27
    502c:	e2 53       	subi	r30, 0x32	; 50
    502e:	f7 4f       	sbci	r31, 0xF7	; 247
    5030:	a0 81       	ld	r26, Z
    5032:	af 3f       	cpi	r26, 0xFF	; 255
    5034:	d9 f0       	breq	.+54     	; 0x506c <Midi_updateManualRange+0x6e>
    5036:	f9 01       	movw	r30, r18
    5038:	ee 0f       	add	r30, r30
    503a:	ff 1f       	adc	r31, r31
    503c:	e2 0f       	add	r30, r18
    503e:	f3 1f       	adc	r31, r19
    5040:	9c 01       	movw	r18, r24
    5042:	22 0f       	add	r18, r18
    5044:	33 1f       	adc	r19, r19
    5046:	28 0f       	add	r18, r24
    5048:	39 1f       	adc	r19, r25
    504a:	22 0f       	add	r18, r18
    504c:	33 1f       	adc	r19, r19
    504e:	22 0f       	add	r18, r18
    5050:	33 1f       	adc	r19, r19
    5052:	e2 0f       	add	r30, r18
    5054:	f3 1f       	adc	r31, r19
    5056:	e2 53       	subi	r30, 0x32	; 50
    5058:	f7 4f       	sbci	r31, 0xF7	; 247
    505a:	21 81       	ldd	r18, Z+1	; 0x01
    505c:	2f 3f       	cpi	r18, 0xFF	; 255
    505e:	31 f0       	breq	.+12     	; 0x506c <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    5060:	a6 17       	cp	r26, r22
    5062:	08 f4       	brcc	.+2      	; 0x5066 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    5064:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    5066:	52 17       	cp	r21, r18
    5068:	08 f4       	brcc	.+2      	; 0x506c <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    506a:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    506c:	55 23       	and	r21, r21
    506e:	11 f0       	breq	.+4      	; 0x5074 <Midi_updateManualRange+0x76>
    5070:	6f 3f       	cpi	r22, 0xFF	; 255
    5072:	49 f4       	brne	.+18     	; 0x5086 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    5074:	88 0f       	add	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	fc 01       	movw	r30, r24
    507a:	e0 54       	subi	r30, 0x40	; 64
    507c:	f8 4f       	sbci	r31, 0xF8	; 248
    507e:	8f ef       	ldi	r24, 0xFF	; 255
    5080:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;			
    5082:	81 83       	std	Z+1, r24	; 0x01
    5084:	07 c0       	rjmp	.+14     	; 0x5094 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    5086:	88 0f       	add	r24, r24
    5088:	99 1f       	adc	r25, r25
    508a:	fc 01       	movw	r30, r24
    508c:	e0 54       	subi	r30, 0x40	; 64
    508e:	f8 4f       	sbci	r31, 0xF8	; 248
    5090:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;			
    5092:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    5094:	4f 5f       	subi	r20, 0xFF	; 255
    5096:	03 c0       	rjmp	.+6      	; 0x509e <Midi_updateManualRange+0xa0>
    5098:	40 e0       	ldi	r20, 0x00	; 0
    509a:	6f ef       	ldi	r22, 0xFF	; 255
    509c:	50 e0       	ldi	r21, 0x00	; 0
    509e:	44 30       	cpi	r20, 0x04	; 4
    50a0:	08 f4       	brcc	.+2      	; 0x50a4 <Midi_updateManualRange+0xa6>
    50a2:	af cf       	rjmp	.-162    	; 0x5002 <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    50a4:	7f 5f       	subi	r23, 0xFF	; 255
    50a6:	74 30       	cpi	r23, 0x04	; 4
    50a8:	b8 f3       	brcs	.-18     	; 0x5098 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;			
			}
		}
	}
}
    50aa:	08 95       	ret

000050ac <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    50ac:	63 e0       	ldi	r22, 0x03	; 3
    50ae:	28 c0       	rjmp	.+80     	; 0x5100 <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    50b0:	86 2f       	mov	r24, r22
    50b2:	06 2e       	mov	r0, r22
    50b4:	00 0c       	add	r0, r0
    50b6:	99 0b       	sbc	r25, r25
    50b8:	42 2f       	mov	r20, r18
    50ba:	02 2e       	mov	r0, r18
    50bc:	00 0c       	add	r0, r0
    50be:	55 0b       	sbc	r21, r21
    50c0:	fa 01       	movw	r30, r20
    50c2:	ee 0f       	add	r30, r30
    50c4:	ff 1f       	adc	r31, r31
    50c6:	e4 0f       	add	r30, r20
    50c8:	f5 1f       	adc	r31, r21
    50ca:	ac 01       	movw	r20, r24
    50cc:	44 0f       	add	r20, r20
    50ce:	55 1f       	adc	r21, r21
    50d0:	da 01       	movw	r26, r20
    50d2:	a8 0f       	add	r26, r24
    50d4:	b9 1f       	adc	r27, r25
    50d6:	aa 0f       	add	r26, r26
    50d8:	bb 1f       	adc	r27, r27
    50da:	aa 0f       	add	r26, r26
    50dc:	bb 1f       	adc	r27, r27
    50de:	ae 0f       	add	r26, r30
    50e0:	bf 1f       	adc	r27, r31
    50e2:	a2 53       	subi	r26, 0x32	; 50
    50e4:	b7 4f       	sbci	r27, 0xF7	; 247
    50e6:	3f ef       	ldi	r19, 0xFF	; 255
    50e8:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    50ea:	11 96       	adiw	r26, 0x01	; 1
    50ec:	3c 93       	st	X, r19
    50ee:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    50f0:	fd 01       	movw	r30, r26
    50f2:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    50f4:	21 50       	subi	r18, 0x01	; 1
    50f6:	01 c0       	rjmp	.+2      	; 0x50fa <init_Manual2Module+0x4e>
    50f8:	23 e0       	ldi	r18, 0x03	; 3
    50fa:	22 23       	and	r18, r18
    50fc:	cc f6       	brge	.-78     	; 0x50b0 <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    50fe:	61 50       	subi	r22, 0x01	; 1
    5100:	66 23       	and	r22, r22
    5102:	d4 f7       	brge	.-12     	; 0x50f8 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    5104:	0e 94 d6 08 	call	0x11ac	; 0x11ac <eeprom_ReadManualMap>
    5108:	8f 3f       	cpi	r24, 0xFF	; 255
    510a:	41 f4       	brne	.+16     	; 0x511c <init_Manual2Module+0x70>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    510c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    5110:	40 e0       	ldi	r20, 0x00	; 0
    5112:	50 e0       	ldi	r21, 0x00	; 0
    5114:	63 e0       	ldi	r22, 0x03	; 3
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <log_putError>
	}
	Midi_updateManualRange();
    511c:	70 cf       	rjmp	.-288    	; 0x4ffe <Midi_updateManualRange>
    511e:	08 95       	ret

00005120 <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    5120:	84 30       	cpi	r24, 0x04	; 4
    5122:	d8 f4       	brcc	.+54     	; 0x515a <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    5124:	90 e0       	ldi	r25, 0x00	; 0
    5126:	fc 01       	movw	r30, r24
    5128:	ee 0f       	add	r30, r30
    512a:	ff 1f       	adc	r31, r31
    512c:	e8 0f       	add	r30, r24
    512e:	f9 1f       	adc	r31, r25
    5130:	ee 0f       	add	r30, r30
    5132:	ff 1f       	adc	r31, r31
    5134:	ee 0f       	add	r30, r30
    5136:	ff 1f       	adc	r31, r31
    5138:	e2 53       	subi	r30, 0x32	; 50
    513a:	f7 4f       	sbci	r31, 0xF7	; 247
		uint8_t i = RANGE_COUNT;
    513c:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    513e:	20 81       	ld	r18, Z
    5140:	62 17       	cp	r22, r18
    5142:	40 f0       	brcs	.+16     	; 0x5154 <manualNote_to_moduleBit+0x34>
    5144:	91 81       	ldd	r25, Z+1	; 0x01
    5146:	96 17       	cp	r25, r22
    5148:	28 f0       	brcs	.+10     	; 0x5154 <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    514a:	92 81       	ldd	r25, Z+2	; 0x02
    514c:	62 1b       	sub	r22, r18
				return (result);
    514e:	80 e0       	ldi	r24, 0x00	; 0
    5150:	96 0f       	add	r25, r22
    5152:	08 95       	ret
			}
			pRange++;
    5154:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    5156:	81 50       	subi	r24, 0x01	; 1
    5158:	91 f7       	brne	.-28     	; 0x513e <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    515a:	8f ef       	ldi	r24, 0xFF	; 255
    515c:	90 e0       	ldi	r25, 0x00	; 0
}
    515e:	08 95       	ret

00005160 <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    5160:	70 e0       	ldi	r23, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    5162:	ee ec       	ldi	r30, 0xCE	; 206
    5164:	f8 e0       	ldi	r31, 0x08	; 8
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5166:	54 e0       	ldi	r21, 0x04	; 4
    5168:	16 c0       	rjmp	.+44     	; 0x5196 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    516a:	62 81       	ldd	r22, Z+2	; 0x02
    516c:	86 17       	cp	r24, r22
    516e:	88 f0       	brcs	.+34     	; 0x5192 <moduleBit_to_manualNote+0x32>
    5170:	a8 2f       	mov	r26, r24
    5172:	b0 e0       	ldi	r27, 0x00	; 0
    5174:	21 81       	ldd	r18, Z+1	; 0x01
    5176:	90 81       	ld	r25, Z
    5178:	30 e0       	ldi	r19, 0x00	; 0
    517a:	29 1b       	sub	r18, r25
    517c:	31 09       	sbc	r19, r1
    517e:	26 0f       	add	r18, r22
    5180:	31 1d       	adc	r19, r1
    5182:	2a 17       	cp	r18, r26
    5184:	3b 07       	cpc	r19, r27
    5186:	2c f0       	brlt	.+10     	; 0x5192 <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    5188:	48 2f       	mov	r20, r24
    518a:	46 1b       	sub	r20, r22
				return(result);
    518c:	87 2f       	mov	r24, r23
    518e:	94 0f       	add	r25, r20
    5190:	08 95       	ret
			}
			pRange++;
    5192:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5194:	51 50       	subi	r21, 0x01	; 1
    5196:	51 11       	cpse	r21, r1
    5198:	e8 cf       	rjmp	.-48     	; 0x516a <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    519a:	7f 5f       	subi	r23, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    519c:	75 30       	cpi	r23, 0x05	; 5
    519e:	18 f3       	brcs	.-58     	; 0x5166 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
    51a0:	48 2f       	mov	r20, r24
    51a2:	50 e0       	ldi	r21, 0x00	; 0
    51a4:	61 e0       	ldi	r22, 0x01	; 1
    51a6:	82 e0       	ldi	r24, 0x02	; 2
    51a8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <log_putWarning>
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    51ac:	8f ef       	ldi	r24, 0xFF	; 255
    51ae:	90 e0       	ldi	r25, 0x00	; 0
}
    51b0:	08 95       	ret

000051b2 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    51b2:	cf 93       	push	r28
    51b4:	c4 2f       	mov	r28, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    51b6:	b4 df       	rcall	.-152    	; 0x5120 <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	if (moduleInfo.error == MODULE_NOERROR) {
    51b8:	81 11       	cpse	r24, r1
    51ba:	33 c0       	rjmp	.+102    	; 0x5222 <manual_NoteOnOff+0x70>
		uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    51bc:	e9 2f       	mov	r30, r25
    51be:	ef 71       	andi	r30, 0x1F	; 31
		uint8_t modulNr = MODULE_BIT_TO_MODULE(moduleInfo.moduleBit);
    51c0:	92 95       	swap	r25
    51c2:	96 95       	lsr	r25
    51c4:	97 70       	andi	r25, 0x07	; 7
		if (onOff == NOTE_OFF) {
    51c6:	c1 11       	cpse	r28, r1
    51c8:	16 c0       	rjmp	.+44     	; 0x51f6 <manual_NoteOnOff+0x44>
			// note off -> write 1 to pipe
			pipe[bitNr].pipeOut |= (1 << modulNr);
    51ca:	f0 e0       	ldi	r31, 0x00	; 0
    51cc:	21 e0       	ldi	r18, 0x01	; 1
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	a9 01       	movw	r20, r18
    51d2:	02 c0       	rjmp	.+4      	; 0x51d8 <manual_NoteOnOff+0x26>
    51d4:	44 0f       	add	r20, r20
    51d6:	55 1f       	adc	r21, r21
    51d8:	9a 95       	dec	r25
    51da:	e2 f7       	brpl	.-8      	; 0x51d4 <manual_NoteOnOff+0x22>
    51dc:	ca 01       	movw	r24, r20
    51de:	ee 0f       	add	r30, r30
    51e0:	ff 1f       	adc	r31, r31
    51e2:	ee 0f       	add	r30, r30
    51e4:	ff 1f       	adc	r31, r31
    51e6:	ee 0f       	add	r30, r30
    51e8:	ff 1f       	adc	r31, r31
    51ea:	e9 5b       	subi	r30, 0xB9	; 185
    51ec:	fd 4f       	sbci	r31, 0xFD	; 253
    51ee:	91 81       	ldd	r25, Z+1	; 0x01
    51f0:	89 2b       	or	r24, r25
    51f2:	81 83       	std	Z+1, r24	; 0x01
    51f4:	16 c0       	rjmp	.+44     	; 0x5222 <manual_NoteOnOff+0x70>
		} else {
			// note on -> write 10 to pipe
			pipe[bitNr].pipeOut &= ~(1 << modulNr);
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
    51f8:	21 e0       	ldi	r18, 0x01	; 1
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	a9 01       	movw	r20, r18
    51fe:	02 c0       	rjmp	.+4      	; 0x5204 <manual_NoteOnOff+0x52>
    5200:	44 0f       	add	r20, r20
    5202:	55 1f       	adc	r21, r21
    5204:	9a 95       	dec	r25
    5206:	e2 f7       	brpl	.-8      	; 0x5200 <manual_NoteOnOff+0x4e>
    5208:	ca 01       	movw	r24, r20
    520a:	ee 0f       	add	r30, r30
    520c:	ff 1f       	adc	r31, r31
    520e:	ee 0f       	add	r30, r30
    5210:	ff 1f       	adc	r31, r31
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	e9 5b       	subi	r30, 0xB9	; 185
    5218:	fd 4f       	sbci	r31, 0xFD	; 253
    521a:	80 95       	com	r24
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	89 23       	and	r24, r25
    5220:	81 83       	std	Z+1, r24	; 0x01
		}
	}
}
    5222:	cf 91       	pop	r28
    5224:	08 95       	ret

00005226 <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    5226:	cf 92       	push	r12
    5228:	df 92       	push	r13
    522a:	ef 92       	push	r14
    522c:	ff 92       	push	r15
    522e:	0f 93       	push	r16
    5230:	1f 93       	push	r17
    5232:	cf 93       	push	r28
    5234:	df 93       	push	r29
    5236:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    5238:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    523a:	3c c0       	rjmp	.+120    	; 0x52b4 <midiAllNotesOff+0x8e>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
    523c:	0c 2d       	mov	r16, r12
    523e:	10 e0       	ldi	r17, 0x00	; 0
    5240:	cd 2d       	mov	r28, r13
    5242:	d0 e0       	ldi	r29, 0x00	; 0
    5244:	f8 01       	movw	r30, r16
    5246:	ee 0f       	add	r30, r30
    5248:	ff 1f       	adc	r31, r31
    524a:	ee 0f       	add	r30, r30
    524c:	ff 1f       	adc	r31, r31
    524e:	ec 0f       	add	r30, r28
    5250:	fd 1f       	adc	r31, r29
    5252:	ee 0f       	add	r30, r30
    5254:	ff 1f       	adc	r31, r31
    5256:	ee 0f       	add	r30, r30
    5258:	ff 1f       	adc	r31, r31
    525a:	e8 53       	subi	r30, 0x38	; 56
    525c:	f8 4f       	sbci	r31, 0xF8	; 248
    525e:	80 81       	ld	r24, Z
    5260:	84 30       	cpi	r24, 0x04	; 4
    5262:	38 f5       	brcc	.+78     	; 0x52b2 <midiAllNotesOff+0x8c>
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    5264:	f8 01       	movw	r30, r16
    5266:	ee 0f       	add	r30, r30
    5268:	ff 1f       	adc	r31, r31
    526a:	ee 0f       	add	r30, r30
    526c:	ff 1f       	adc	r31, r31
    526e:	ec 0f       	add	r30, r28
    5270:	fd 1f       	adc	r31, r29
    5272:	ee 0f       	add	r30, r30
    5274:	ff 1f       	adc	r31, r31
    5276:	ee 0f       	add	r30, r30
    5278:	ff 1f       	adc	r31, r31
    527a:	e8 53       	subi	r30, 0x38	; 56
    527c:	f8 4f       	sbci	r31, 0xF8	; 248
    527e:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    5280:	f2 80       	ldd	r15, Z+2	; 0x02
    5282:	15 c0       	rjmp	.+42     	; 0x52ae <midiAllNotesOff+0x88>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    5284:	ee 24       	eor	r14, r14
    5286:	e3 94       	inc	r14
    5288:	e6 0e       	add	r14, r22
    528a:	f8 01       	movw	r30, r16
    528c:	ee 0f       	add	r30, r30
    528e:	ff 1f       	adc	r31, r31
    5290:	ee 0f       	add	r30, r30
    5292:	ff 1f       	adc	r31, r31
    5294:	ec 0f       	add	r30, r28
    5296:	fd 1f       	adc	r31, r29
    5298:	ee 0f       	add	r30, r30
    529a:	ff 1f       	adc	r31, r31
    529c:	ee 0f       	add	r30, r30
    529e:	ff 1f       	adc	r31, r31
    52a0:	e8 53       	subi	r30, 0x38	; 56
    52a2:	f8 4f       	sbci	r31, 0xF8	; 248
    52a4:	40 e0       	ldi	r20, 0x00	; 0
    52a6:	80 81       	ld	r24, Z
    52a8:	84 df       	rcall	.-248    	; 0x51b2 <manual_NoteOnOff>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    52aa:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    52ac:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    52ae:	f1 10       	cpse	r15, r1
    52b0:	e9 cf       	rjmp	.-46     	; 0x5284 <midiAllNotesOff+0x5e>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
    52b2:	d3 94       	inc	r13
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    52b4:	83 e0       	ldi	r24, 0x03	; 3
    52b6:	8d 15       	cp	r24, r13
    52b8:	08 f0       	brcs	.+2      	; 0x52bc <midiAllNotesOff+0x96>
    52ba:	c0 cf       	rjmp	.-128    	; 0x523c <midiAllNotesOff+0x16>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
	}
}
    52bc:	df 91       	pop	r29
    52be:	cf 91       	pop	r28
    52c0:	1f 91       	pop	r17
    52c2:	0f 91       	pop	r16
    52c4:	ff 90       	pop	r15
    52c6:	ef 90       	pop	r14
    52c8:	df 90       	pop	r13
    52ca:	cf 90       	pop	r12
    52cc:	08 95       	ret

000052ce <midi_ManualOff>:

void midi_ManualOff(uint8_t manual){
    52ce:	0f 93       	push	r16
    52d0:	1f 93       	push	r17
    52d2:	cf 93       	push	r28
    52d4:	df 93       	push	r29
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    52d6:	84 30       	cpi	r24, 0x04	; 4
    52d8:	08 f5       	brcc	.+66     	; 0x531c <midi_ManualOff+0x4e>
    52da:	08 2f       	mov	r16, r24
    52dc:	10 e0       	ldi	r17, 0x00	; 0
    52de:	f8 01       	movw	r30, r16
    52e0:	ee 0f       	add	r30, r30
    52e2:	ff 1f       	adc	r31, r31
    52e4:	e0 54       	subi	r30, 0x40	; 64
    52e6:	f8 4f       	sbci	r31, 0xF8	; 248
    52e8:	c0 81       	ld	r28, Z
    52ea:	cf 3f       	cpi	r28, 0xFF	; 255
    52ec:	b9 f0       	breq	.+46     	; 0x531c <midi_ManualOff+0x4e>
    52ee:	d8 2f       	mov	r29, r24
    52f0:	f8 01       	movw	r30, r16
    52f2:	ee 0f       	add	r30, r30
    52f4:	ff 1f       	adc	r31, r31
    52f6:	e0 54       	subi	r30, 0x40	; 64
    52f8:	f8 4f       	sbci	r31, 0xF8	; 248
    52fa:	81 81       	ldd	r24, Z+1	; 0x01
    52fc:	8f 3f       	cpi	r24, 0xFF	; 255
    52fe:	31 f4       	brne	.+12     	; 0x530c <midi_ManualOff+0x3e>
    5300:	0d c0       	rjmp	.+26     	; 0x531c <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF);
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	6c 2f       	mov	r22, r28
    5306:	8d 2f       	mov	r24, r29
    5308:	54 df       	rcall	.-344    	; 0x51b2 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    530a:	cf 5f       	subi	r28, 0xFF	; 255
    530c:	f8 01       	movw	r30, r16
    530e:	ee 0f       	add	r30, r30
    5310:	ff 1f       	adc	r31, r31
    5312:	e0 54       	subi	r30, 0x40	; 64
    5314:	f8 4f       	sbci	r31, 0xF8	; 248
    5316:	91 81       	ldd	r25, Z+1	; 0x01
    5318:	9c 17       	cp	r25, r28
    531a:	98 f7       	brcc	.-26     	; 0x5302 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF);
		}
	}
}
    531c:	df 91       	pop	r29
    531e:	cf 91       	pop	r28
    5320:	1f 91       	pop	r17
    5322:	0f 91       	pop	r16
    5324:	08 95       	ret

00005326 <midi_AllManualsOff>:

void midi_AllManualsOff(){
    5326:	cf 93       	push	r28
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    5328:	c0 e0       	ldi	r28, 0x00	; 0
    532a:	03 c0       	rjmp	.+6      	; 0x5332 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    532c:	8c 2f       	mov	r24, r28
    532e:	cf df       	rcall	.-98     	; 0x52ce <midi_ManualOff>
		}
	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    5330:	cf 5f       	subi	r28, 0xFF	; 255
    5332:	c4 30       	cpi	r28, 0x04	; 4
    5334:	d8 f3       	brcs	.-10     	; 0x532c <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    5336:	cf 91       	pop	r28
    5338:	08 95       	ret

0000533a <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    533a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <midiRxActivceSensing>
    533e:	88 23       	and	r24, r24
    5340:	39 f0       	breq	.+14     	; 0x5350 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    5342:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <swTimer+0x6>
    5346:	81 11       	cpse	r24, r1
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    534a:	ed df       	rcall	.-38     	; 0x5326 <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    534c:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <midiRxActivceSensing>
    5350:	08 95       	ret

00005352 <midiNote_to_Manual>:
		midi_Setting.VelZero4Off = FALSE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    5352:	0f 93       	push	r16
    5354:	1f 93       	push	r17
    5356:	cf 93       	push	r28
    5358:	df 93       	push	r29
    535a:	06 2f       	mov	r16, r22
    535c:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    535e:	d8 2f       	mov	r29, r24
    5360:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    5362:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    5364:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    5366:	3c c0       	rjmp	.+120    	; 0x53e0 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    5368:	4d 2f       	mov	r20, r29
    536a:	50 e0       	ldi	r21, 0x00	; 0
    536c:	2c 2f       	mov	r18, r28
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	fa 01       	movw	r30, r20
    5372:	ee 0f       	add	r30, r30
    5374:	ff 1f       	adc	r31, r31
    5376:	ee 0f       	add	r30, r30
    5378:	ff 1f       	adc	r31, r31
    537a:	e2 0f       	add	r30, r18
    537c:	f3 1f       	adc	r31, r19
    537e:	ee 0f       	add	r30, r30
    5380:	ff 1f       	adc	r31, r31
    5382:	ee 0f       	add	r30, r30
    5384:	ff 1f       	adc	r31, r31
    5386:	e8 53       	subi	r30, 0x38	; 56
    5388:	f8 4f       	sbci	r31, 0xF8	; 248
    538a:	80 81       	ld	r24, Z
    538c:	84 30       	cpi	r24, 0x04	; 4
    538e:	38 f5       	brcc	.+78     	; 0x53de <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    5390:	df 01       	movw	r26, r30
    5392:	61 81       	ldd	r22, Z+1	; 0x01
    5394:	70 2f       	mov	r23, r16
    5396:	76 1b       	sub	r23, r22
    5398:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    539a:	0a f1       	brmi	.+66     	; 0x53de <midiNote_to_Manual+0x8c>
    539c:	fd 01       	movw	r30, r26
    539e:	e2 81       	ldd	r30, Z+2	; 0x02
    53a0:	f0 e0       	ldi	r31, 0x00	; 0
    53a2:	a7 2f       	mov	r26, r23
    53a4:	77 0f       	add	r23, r23
    53a6:	bb 0b       	sbc	r27, r27
    53a8:	ae 17       	cp	r26, r30
    53aa:	bf 07       	cpc	r27, r31
    53ac:	c4 f4       	brge	.+48     	; 0x53de <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    53ae:	fa 01       	movw	r30, r20
    53b0:	ee 0f       	add	r30, r30
    53b2:	ff 1f       	adc	r31, r31
    53b4:	ee 0f       	add	r30, r30
    53b6:	ff 1f       	adc	r31, r31
    53b8:	e2 0f       	add	r30, r18
    53ba:	f3 1f       	adc	r31, r19
    53bc:	ee 0f       	add	r30, r30
    53be:	ff 1f       	adc	r31, r31
    53c0:	ee 0f       	add	r30, r30
    53c2:	ff 1f       	adc	r31, r31
    53c4:	e8 53       	subi	r30, 0x38	; 56
    53c6:	f8 4f       	sbci	r31, 0xF8	; 248
    53c8:	93 81       	ldd	r25, Z+3	; 0x03
    53ca:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    53cc:	11 30       	cpi	r17, 0x01	; 1
    53ce:	21 f4       	brne	.+8      	; 0x53d8 <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    53d0:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
					midiLastInNote = manNote; // for debugging/display status
    53d4:	60 93 02 02 	sts	0x0202, r22	; 0x800202 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    53d8:	41 2f       	mov	r20, r17
    53da:	eb de       	rcall	.-554    	; 0x51b2 <manual_NoteOnOff>
				found |= 0xFF;
    53dc:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    53de:	cf 5f       	subi	r28, 0xFF	; 255
    53e0:	c4 30       	cpi	r28, 0x04	; 4
    53e2:	08 f4       	brcc	.+2      	; 0x53e6 <midiNote_to_Manual+0x94>
    53e4:	c1 cf       	rjmp	.-126    	; 0x5368 <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    53e6:	11 30       	cpi	r17, 0x01	; 1
    53e8:	49 f4       	brne	.+18     	; 0x53fc <midiNote_to_Manual+0xaa>
    53ea:	91 11       	cpse	r25, r1
    53ec:	07 c0       	rjmp	.+14     	; 0x53fc <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    53ee:	00 93 02 02 	sts	0x0202, r16	; 0x800202 <midiLastInNote>
		midiLastInChannel = channel;
    53f2:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    53f6:	8f ef       	ldi	r24, 0xFF	; 255
    53f8:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
	}
}
    53fc:	df 91       	pop	r29
    53fe:	cf 91       	pop	r28
    5400:	1f 91       	pop	r17
    5402:	0f 91       	pop	r16
    5404:	08 95       	ret

00005406 <midiIn_Process>:
}

// **************************************** P R O C E S S   M I D I    I N *********************************************

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    5406:	88 23       	and	r24, r24
    5408:	0c f0       	brlt	.+2      	; 0x540c <midiIn_Process+0x6>
    540a:	4c c0       	rjmp	.+152    	; 0x54a4 <midiIn_Process+0x9e>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    540c:	88 3f       	cpi	r24, 0xF8	; 248
    540e:	b8 f0       	brcs	.+46     	; 0x543e <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    5410:	8e 3f       	cpi	r24, 0xFE	; 254
    5412:	81 f4       	brne	.+32     	; 0x5434 <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    5414:	81 e0       	ldi	r24, 0x01	; 1
    5416:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    541a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    541c:	f8 94       	cli
    541e:	06 c0       	rjmp	.+12     	; 0x542c <midiIn_Process+0x26>
    5420:	ed e2       	ldi	r30, 0x2D	; 45
    5422:	f2 e0       	ldi	r31, 0x02	; 2
    5424:	89 e1       	ldi	r24, 0x19	; 25
    5426:	86 83       	std	Z+6, r24	; 0x06
    5428:	17 82       	std	Z+7, r1	; 0x07
    542a:	80 e0       	ldi	r24, 0x00	; 0
    542c:	81 11       	cpse	r24, r1
    542e:	f8 cf       	rjmp	.-16     	; 0x5420 <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5430:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    5432:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    5434:	8f 3f       	cpi	r24, 0xFF	; 255
    5436:	09 f0       	breq	.+2      	; 0x543a <midiIn_Process+0x34>
    5438:	76 c0       	rjmp	.+236    	; 0x5526 <midiIn_Process+0x120>
				midiAllReset();
    543a:	1f cc       	rjmp	.-1986   	; 0x4c7a <midiAllReset>
    543c:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    543e:	80 93 00 0b 	sts	0x0B00, r24	; 0x800b00 <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    5442:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    5446:	90 e8       	ldi	r25, 0x80	; 128
    5448:	98 0f       	add	r25, r24
    544a:	90 34       	cpi	r25, 0x40	; 64
    544c:	20 f4       	brcc	.+8      	; 0x5456 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    544e:	82 e0       	ldi	r24, 0x02	; 2
    5450:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    5454:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    5456:	90 e2       	ldi	r25, 0x20	; 32
    5458:	98 0f       	add	r25, r24
    545a:	90 31       	cpi	r25, 0x10	; 16
    545c:	20 f4       	brcc	.+8      	; 0x5466 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    545e:	82 e0       	ldi	r24, 0x02	; 2
    5460:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    5464:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    5466:	82 3f       	cpi	r24, 0xF2	; 242
    5468:	21 f4       	brne	.+8      	; 0x5472 <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    546a:	82 e0       	ldi	r24, 0x02	; 2
    546c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    5470:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    5472:	80 3f       	cpi	r24, 0xF0	; 240
    5474:	21 f4       	brne	.+8      	; 0x547e <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd
    5476:	8f ef       	ldi	r24, 0xFF	; 255
    5478:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    547c:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    547e:	90 e4       	ldi	r25, 0x40	; 64
    5480:	98 0f       	add	r25, r24
    5482:	90 32       	cpi	r25, 0x20	; 32
    5484:	20 f4       	brcc	.+8      	; 0x548e <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    548c:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    548e:	81 3f       	cpi	r24, 0xF1	; 241
    5490:	11 f0       	breq	.+4      	; 0x5496 <midiIn_Process+0x90>
    5492:	83 3f       	cpi	r24, 0xF3	; 243
    5494:	21 f4       	brne	.+8      	; 0x549e <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    5496:	81 e0       	ldi	r24, 0x01	; 1
    5498:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiDataByteExpected>
    549c:	08 95       	ret
			} else {
				// F4, F5 undefined, F6 tune request, F7 EndOfSysEx
				midiDataByteExpected = 0;
    549e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <midiDataByteExpected>
    54a2:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    54a4:	e0 91 bf 07 	lds	r30, 0x07BF	; 0x8007bf <midiDataByteCount>
    54a8:	e2 30       	cpi	r30, 0x02	; 2
    54aa:	40 f4       	brcc	.+16     	; 0x54bc <midiIn_Process+0xb6>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    54ac:	91 e0       	ldi	r25, 0x01	; 1
    54ae:	9e 0f       	add	r25, r30
    54b0:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <midiDataByteCount>
    54b4:	f0 e0       	ldi	r31, 0x00	; 0
    54b6:	e2 50       	subi	r30, 0x02	; 2
    54b8:	f5 4f       	sbci	r31, 0xF5	; 245
    54ba:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    54bc:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiDataByteExpected>
    54c0:	8f 3f       	cpi	r24, 0xFF	; 255
    54c2:	89 f1       	breq	.+98     	; 0x5526 <midiIn_Process+0x120>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    54c4:	90 91 bf 07 	lds	r25, 0x07BF	; 0x8007bf <midiDataByteCount>
    54c8:	98 17       	cp	r25, r24
    54ca:	68 f1       	brcs	.+90     	; 0x5526 <midiIn_Process+0x120>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    54cc:	90 91 00 0b 	lds	r25, 0x0B00	; 0x800b00 <midiLastCommand>
    54d0:	90 3f       	cpi	r25, 0xF0	; 240
    54d2:	38 f5       	brcc	.+78     	; 0x5522 <midiIn_Process+0x11c>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    54d4:	89 2f       	mov	r24, r25
    54d6:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    54d8:	90 7f       	andi	r25, 0xF0	; 240
    54da:	90 39       	cpi	r25, 0x90	; 144
    54dc:	71 f0       	breq	.+28     	; 0x54fa <midiIn_Process+0xf4>
    54de:	18 f4       	brcc	.+6      	; 0x54e6 <midiIn_Process+0xe0>
    54e0:	90 38       	cpi	r25, 0x80	; 128
    54e2:	31 f0       	breq	.+12     	; 0x54f0 <midiIn_Process+0xea>
    54e4:	1e c0       	rjmp	.+60     	; 0x5522 <midiIn_Process+0x11c>
    54e6:	90 3b       	cpi	r25, 0xB0	; 176
    54e8:	99 f0       	breq	.+38     	; 0x5510 <midiIn_Process+0x10a>
    54ea:	90 3c       	cpi	r25, 0xC0	; 192
    54ec:	b9 f0       	breq	.+46     	; 0x551c <midiIn_Process+0x116>
    54ee:	19 c0       	rjmp	.+50     	; 0x5522 <midiIn_Process+0x11c>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    54f0:	40 e0       	ldi	r20, 0x00	; 0
    54f2:	60 91 fe 0a 	lds	r22, 0x0AFE	; 0x800afe <midiDataByte>
    54f6:	2d df       	rcall	.-422    	; 0x5352 <midiNote_to_Manual>
						break;
    54f8:	14 c0       	rjmp	.+40     	; 0x5522 <midiIn_Process+0x11c>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    54fa:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <midiDataByte+0x1>
    54fe:	91 11       	cpse	r25, r1
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <midiIn_Process+0x100>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    5502:	40 e0       	ldi	r20, 0x00	; 0
    5504:	01 c0       	rjmp	.+2      	; 0x5508 <midiIn_Process+0x102>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    5506:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    5508:	60 91 fe 0a 	lds	r22, 0x0AFE	; 0x800afe <midiDataByte>
    550c:	22 df       	rcall	.-444    	; 0x5352 <midiNote_to_Manual>
						break;
    550e:	09 c0       	rjmp	.+18     	; 0x5522 <midiIn_Process+0x11c>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    5510:	90 91 fe 0a 	lds	r25, 0x0AFE	; 0x800afe <midiDataByte>
    5514:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    5516:	29 f4       	brne	.+10     	; 0x5522 <midiIn_Process+0x11c>
    5518:	86 de       	rcall	.-756    	; 0x5226 <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						program_toRegister(midiDataByte[0]);
    551a:	03 c0       	rjmp	.+6      	; 0x5522 <midiIn_Process+0x11c>
    551c:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <midiDataByte>
    5520:	cb dc       	rcall	.-1642   	; 0x4eb8 <program_toRegister>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    5522:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <midiDataByteCount>
    5526:	08 95       	ret

00005528 <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   M I D I   O U T *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    5528:	cf 92       	push	r12
    552a:	df 92       	push	r13
    552c:	ef 92       	push	r14
    552e:	ff 92       	push	r15
    5530:	0f 93       	push	r16
    5532:	1f 93       	push	r17
    5534:	cf 93       	push	r28
    5536:	df 93       	push	r29
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H;
    5538:	19 2f       	mov	r17, r25
    553a:	10 7e       	andi	r17, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H;
    553c:	9f 71       	andi	r25, 0x1F	; 31
    553e:	d9 2e       	mov	r13, r25
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS];
    5540:	d8 2f       	mov	r29, r24
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    5542:	10 32       	cpi	r17, 0x20	; 32
    5544:	09 f4       	brne	.+2      	; 0x5548 <midiKeyPress_Process+0x20>
    5546:	a9 c0       	rjmp	.+338    	; 0x569a <midiKeyPress_Process+0x172>
    5548:	11 23       	and	r17, r17
    554a:	09 f4       	brne	.+2      	; 0x554e <midiKeyPress_Process+0x26>
    554c:	a8 c0       	rjmp	.+336    	; 0x569e <midiKeyPress_Process+0x176>
    554e:	ab c0       	rjmp	.+342    	; 0x56a6 <midiKeyPress_Process+0x17e>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules
			if ((moduleBits & 0x01) != 0) {
    5550:	d0 ff       	sbrs	r29, 0
    5552:	a0 c0       	rjmp	.+320    	; 0x5694 <midiKeyPress_Process+0x16c>
				// LSB==1 -> Module has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit));
    5554:	20 e2       	ldi	r18, 0x20	; 32
    5556:	c2 9f       	mul	r28, r18
    5558:	c0 01       	movw	r24, r0
    555a:	11 24       	eor	r1, r1
    555c:	8d 29       	or	r24, r13
    555e:	00 de       	rcall	.-1024   	; 0x5160 <moduleBit_to_manualNote>
    5560:	f8 2e       	mov	r15, r24
    5562:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    5564:	08 2f       	mov	r16, r24
    5566:	8f 3f       	cpi	r24, 0xFF	; 255
    5568:	09 f4       	brne	.+2      	; 0x556c <midiKeyPress_Process+0x44>
    556a:	94 c0       	rjmp	.+296    	; 0x5694 <midiKeyPress_Process+0x16c>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    556c:	69 2f       	mov	r22, r25
    556e:	39 dd       	rcall	.-1422   	; 0x4fe2 <Manual_to_MidiNote>
    5570:	c9 2e       	mov	r12, r25
					if (chanNote.channel != MIDI_CHANNEL_NONE){
    5572:	8f 3f       	cpi	r24, 0xFF	; 255
    5574:	09 f1       	breq	.+66     	; 0x55b8 <midiKeyPress_Process+0x90>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.channel);
    5576:	10 32       	cpi	r17, 0x20	; 32
    5578:	31 f0       	breq	.+12     	; 0x5586 <midiKeyPress_Process+0x5e>
    557a:	90 91 cd 08 	lds	r25, 0x08CD	; 0x8008cd <midi_Setting+0x1>
    557e:	99 23       	and	r25, r25
    5580:	21 f0       	breq	.+8      	; 0x558a <midiKeyPress_Process+0x62>
    5582:	90 e9       	ldi	r25, 0x90	; 144
    5584:	03 c0       	rjmp	.+6      	; 0x558c <midiKeyPress_Process+0x64>
    5586:	90 e9       	ldi	r25, 0x90	; 144
    5588:	01 c0       	rjmp	.+2      	; 0x558c <midiKeyPress_Process+0x64>
    558a:	90 e8       	ldi	r25, 0x80	; 128
    558c:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    558e:	e7 d0       	rcall	.+462    	; 0x575e <serial1MIDISend>
    5590:	8c 2d       	mov	r24, r12
    5592:	e5 d0       	rcall	.+458    	; 0x575e <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    5594:	11 11       	cpse	r17, r1
    5596:	06 c0       	rjmp	.+12     	; 0x55a4 <midiKeyPress_Process+0x7c>
    5598:	80 91 cd 08 	lds	r24, 0x08CD	; 0x8008cd <midi_Setting+0x1>
    559c:	81 11       	cpse	r24, r1
    559e:	04 c0       	rjmp	.+8      	; 0x55a8 <midiKeyPress_Process+0x80>
    55a0:	80 e4       	ldi	r24, 0x40	; 64
    55a2:	03 c0       	rjmp	.+6      	; 0x55aa <midiKeyPress_Process+0x82>
    55a4:	80 e4       	ldi	r24, 0x40	; 64
    55a6:	01 c0       	rjmp	.+2      	; 0x55aa <midiKeyPress_Process+0x82>
    55a8:	80 e0       	ldi	r24, 0x00	; 0
    55aa:	d9 d0       	rcall	.+434    	; 0x575e <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    55ac:	10 32       	cpi	r17, 0x20	; 32
    55ae:	21 f4       	brne	.+8      	; 0x55b8 <midiKeyPress_Process+0x90>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    55b0:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    55b4:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    55b8:	41 e0       	ldi	r20, 0x01	; 1
    55ba:	10 32       	cpi	r17, 0x20	; 32
    55bc:	09 f0       	breq	.+2      	; 0x55c0 <midiKeyPress_Process+0x98>
    55be:	40 e0       	ldi	r20, 0x00	; 0
    55c0:	f4 2e       	mov	r15, r20
					if (manualNote.manual == MANUAL_III){
    55c2:	01 11       	cpse	r16, r1
    55c4:	19 c0       	rjmp	.+50     	; 0x55f8 <midiKeyPress_Process+0xd0>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    55c6:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <midi_Couplers>
    55ca:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    55cc:	19 f4       	brne	.+6      	; 0x55d4 <midiKeyPress_Process+0xac>
    55ce:	6e 2d       	mov	r22, r14
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	ef dd       	rcall	.-1058   	; 0x51b2 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    55d4:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <midi_Couplers+0x1>
    55d8:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    55da:	21 f4       	brne	.+8      	; 0x55e4 <midiKeyPress_Process+0xbc>
    55dc:	4f 2d       	mov	r20, r15
    55de:	6e 2d       	mov	r22, r14
    55e0:	82 e0       	ldi	r24, 0x02	; 2
    55e2:	e7 dd       	rcall	.-1074   	; 0x51b2 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    55e4:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <midi_Couplers+0x3>
    55e8:	8f 3f       	cpi	r24, 0xFF	; 255
    55ea:	09 f0       	breq	.+2      	; 0x55ee <midiKeyPress_Process+0xc6>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    55ec:	53 c0       	rjmp	.+166    	; 0x5694 <midiKeyPress_Process+0x16c>
    55ee:	4f 2d       	mov	r20, r15
    55f0:	6e 2d       	mov	r22, r14
    55f2:	83 e0       	ldi	r24, 0x03	; 3
    55f4:	de dd       	rcall	.-1092   	; 0x51b2 <manual_NoteOnOff>
    55f6:	4e c0       	rjmp	.+156    	; 0x5694 <midiKeyPress_Process+0x16c>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    55f8:	01 30       	cpi	r16, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    55fa:	c9 f4       	brne	.+50     	; 0x562e <midiKeyPress_Process+0x106>
    55fc:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <midi_Couplers+0x2>
    5600:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    5602:	19 f4       	brne	.+6      	; 0x560a <midiKeyPress_Process+0xe2>
    5604:	6e 2d       	mov	r22, r14
    5606:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    5608:	d4 dd       	rcall	.-1112   	; 0x51b2 <manual_NoteOnOff>
    560a:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <midi_Couplers+0x4>
    560e:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    5610:	21 f4       	brne	.+8      	; 0x561a <midiKeyPress_Process+0xf2>
    5612:	4f 2d       	mov	r20, r15
    5614:	6e 2d       	mov	r22, r14
    5616:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    5618:	cc dd       	rcall	.-1128   	; 0x51b2 <manual_NoteOnOff>
    561a:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <midi_Couplers+0x6>
    561e:	8f 3f       	cpi	r24, 0xFF	; 255
    5620:	09 f0       	breq	.+2      	; 0x5624 <midiKeyPress_Process+0xfc>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    5622:	38 c0       	rjmp	.+112    	; 0x5694 <midiKeyPress_Process+0x16c>
    5624:	4f 2d       	mov	r20, r15
    5626:	6e 2d       	mov	r22, r14
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	c3 dd       	rcall	.-1146   	; 0x51b2 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    562c:	33 c0       	rjmp	.+102    	; 0x5694 <midiKeyPress_Process+0x16c>
    562e:	02 30       	cpi	r16, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    5630:	c1 f4       	brne	.+48     	; 0x5662 <midiKeyPress_Process+0x13a>
    5632:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    5636:	8f 3f       	cpi	r24, 0xFF	; 255
    5638:	19 f4       	brne	.+6      	; 0x5640 <midiKeyPress_Process+0x118>
    563a:	6e 2d       	mov	r22, r14
    563c:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    563e:	b9 dd       	rcall	.-1166   	; 0x51b2 <manual_NoteOnOff>
    5640:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    5644:	8f 3f       	cpi	r24, 0xFF	; 255
    5646:	21 f4       	brne	.+8      	; 0x5650 <midiKeyPress_Process+0x128>
    5648:	4f 2d       	mov	r20, r15
    564a:	6e 2d       	mov	r22, r14
    564c:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    564e:	b1 dd       	rcall	.-1182   	; 0x51b2 <manual_NoteOnOff>
    5650:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <midi_Couplers+0x8>
    5654:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    5656:	f1 f4       	brne	.+60     	; 0x5694 <midiKeyPress_Process+0x16c>
    5658:	4f 2d       	mov	r20, r15
    565a:	6e 2d       	mov	r22, r14
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	a9 dd       	rcall	.-1198   	; 0x51b2 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    5660:	19 c0       	rjmp	.+50     	; 0x5694 <midiKeyPress_Process+0x16c>
    5662:	03 30       	cpi	r16, 0x03	; 3
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    5664:	b9 f4       	brne	.+46     	; 0x5694 <midiKeyPress_Process+0x16c>
    5666:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    566a:	8f 3f       	cpi	r24, 0xFF	; 255
    566c:	19 f4       	brne	.+6      	; 0x5674 <midiKeyPress_Process+0x14c>
    566e:	6e 2d       	mov	r22, r14
    5670:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    5672:	9f dd       	rcall	.-1218   	; 0x51b2 <manual_NoteOnOff>
    5674:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    5678:	8f 3f       	cpi	r24, 0xFF	; 255
    567a:	21 f4       	brne	.+8      	; 0x5684 <midiKeyPress_Process+0x15c>
    567c:	4f 2d       	mov	r20, r15
    567e:	6e 2d       	mov	r22, r14
    5680:	81 e0       	ldi	r24, 0x01	; 1
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    5682:	97 dd       	rcall	.-1234   	; 0x51b2 <manual_NoteOnOff>
    5684:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <midi_Couplers+0xb>
    5688:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    568a:	21 f4       	brne	.+8      	; 0x5694 <midiKeyPress_Process+0x16c>
    568c:	4f 2d       	mov	r20, r15
    568e:	6e 2d       	mov	r22, r14
    5690:	82 e0       	ldi	r24, 0x02	; 2
    5692:	8f dd       	rcall	.-1250   	; 0x51b2 <manual_NoteOnOff>
						}
					}
				} // if
			}
			moduleBits >>= 1; // next module
    5694:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS];
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    5696:	cf 5f       	subi	r28, 0xFF	; 255
    5698:	03 c0       	rjmp	.+6      	; 0x56a0 <midiKeyPress_Process+0x178>
    569a:	c0 e0       	ldi	r28, 0x00	; 0
    569c:	01 c0       	rjmp	.+2      	; 0x56a0 <midiKeyPress_Process+0x178>
    569e:	c0 e0       	ldi	r28, 0x00	; 0
    56a0:	c8 30       	cpi	r28, 0x08	; 8
    56a2:	08 f4       	brcc	.+2      	; 0x56a6 <midiKeyPress_Process+0x17e>
    56a4:	55 cf       	rjmp	.-342    	; 0x5550 <midiKeyPress_Process+0x28>
				} // if
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    56a6:	df 91       	pop	r29
    56a8:	cf 91       	pop	r28
    56aa:	1f 91       	pop	r17
    56ac:	0f 91       	pop	r16
    56ae:	ff 90       	pop	r15
    56b0:	ef 90       	pop	r14
    56b2:	df 90       	pop	r13
    56b4:	cf 90       	pop	r12
    56b6:	08 95       	ret

000056b8 <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    56b8:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    56ba:	c0 e0       	ldi	r28, 0x00	; 0
    56bc:	0e c0       	rjmp	.+28     	; 0x56da <midiSendAllNotesOff+0x22>
		uint8_t chan = midiOutMap[i].channel;
    56be:	ec 2f       	mov	r30, r28
    56c0:	f0 e0       	ldi	r31, 0x00	; 0
    56c2:	e8 53       	subi	r30, 0x38	; 56
    56c4:	f7 4f       	sbci	r31, 0xF7	; 247
    56c6:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    56c8:	80 31       	cpi	r24, 0x10	; 16
    56ca:	30 f4       	brcc	.+12     	; 0x56d8 <midiSendAllNotesOff+0x20>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    56cc:	80 6b       	ori	r24, 0xB0	; 176
    56ce:	47 d0       	rcall	.+142    	; 0x575e <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    56d0:	8b e7       	ldi	r24, 0x7B	; 123
    56d2:	45 d0       	rcall	.+138    	; 0x575e <serial1MIDISend>
			serial1MIDISend(0);
    56d4:	80 e0       	ldi	r24, 0x00	; 0
    56d6:	43 d0       	rcall	.+134    	; 0x575e <serial1MIDISend>
    56d8:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    56da:	c4 30       	cpi	r28, 0x04	; 4
    56dc:	80 f3       	brcs	.-32     	; 0x56be <midiSendAllNotesOff+0x6>
    56de:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    56e0:	08 95       	ret

000056e2 <midi_SendActiveSense>:
    56e2:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    56e4:	3c c0       	rjmp	.+120    	; 0x575e <serial1MIDISend>
    56e6:	08 95       	ret

000056e8 <midi_CheckTxActiveSense>:
		}
	}
}

void midi_CheckTxActiveSense(){
	if (midi_Setting.TxActivceSense) {
    56e8:	80 91 cc 08 	lds	r24, 0x08CC	; 0x8008cc <midi_Setting>
    56ec:	88 23       	and	r24, r24
    56ee:	b1 f0       	breq	.+44     	; 0x571c <midi_CheckTxActiveSense+0x34>
		if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    56f0:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0x10>
    56f4:	88 23       	and	r24, r24
    56f6:	21 f0       	breq	.+8      	; 0x5700 <midi_CheckTxActiveSense+0x18>
    56f8:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0x10>
    56fc:	8f 3f       	cpi	r24, 0xFF	; 255
    56fe:	71 f4       	brne	.+28     	; 0x571c <midi_CheckTxActiveSense+0x34>
			// timer ended or not yet running
			TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS)
    5700:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5702:	f8 94       	cli
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	06 c0       	rjmp	.+12     	; 0x5714 <midi_CheckTxActiveSense+0x2c>
    5708:	ed e2       	ldi	r30, 0x2D	; 45
    570a:	f2 e0       	ldi	r31, 0x02	; 2
    570c:	8a e0       	ldi	r24, 0x0A	; 10
    570e:	80 8b       	std	Z+16, r24	; 0x10
    5710:	11 8a       	std	Z+17, r1	; 0x11
    5712:	80 e0       	ldi	r24, 0x00	; 0
    5714:	81 11       	cpse	r24, r1
    5716:	f8 cf       	rjmp	.-16     	; 0x5708 <midi_CheckTxActiveSense+0x20>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5718:	9f bf       	out	0x3f, r25	; 63
			midi_SendActiveSense();
    571a:	e3 cf       	rjmp	.-58     	; 0x56e2 <midi_SendActiveSense>
    571c:	08 95       	ret

0000571e <init_Serial1MIDI>:
	} else {
		result = serUsbRxBuffer[index++];
		serusbRxOutIndex = index & SER_USB_RX_BUFFER_MASK;
	}
	return result;
}
    571e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    5722:	8f e1       	ldi	r24, 0x1F	; 31
    5724:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    5728:	e9 ec       	ldi	r30, 0xC9	; 201
    572a:	f0 e0       	ldi	r31, 0x00	; 0
    572c:	80 81       	ld	r24, Z
    572e:	88 69       	ori	r24, 0x98	; 152
    5730:	80 83       	st	Z, r24
    5732:	ea ec       	ldi	r30, 0xCA	; 202
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	80 81       	ld	r24, Z
    5738:	86 60       	ori	r24, 0x06	; 6
    573a:	80 83       	st	Z, r24
    573c:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <midiRxInIndex>
    5740:	10 92 8e 0c 	sts	0x0C8E, r1	; 0x800c8e <midiRxOutIndex>
    5744:	10 92 01 0b 	sts	0x0B01, r1	; 0x800b01 <midiTxInIndex>
    5748:	10 92 03 0b 	sts	0x0B03, r1	; 0x800b03 <midiTxOutIndex>
    574c:	10 92 02 0b 	sts	0x0B02, r1	; 0x800b02 <midiRxOvfl>
    5750:	10 92 05 0b 	sts	0x0B05, r1	; 0x800b05 <midiTxOvfl>
    5754:	10 92 8a 0b 	sts	0x0B8A, r1	; 0x800b8a <midiRxOvflCount>
    5758:	10 92 8f 0c 	sts	0x0C8F, r1	; 0x800c8f <midiTxOvflCount>
    575c:	08 95       	ret

0000575e <serial1MIDISend>:
    575e:	e9 ec       	ldi	r30, 0xC9	; 201
    5760:	f0 e0       	ldi	r31, 0x00	; 0
    5762:	90 81       	ld	r25, Z
    5764:	9f 7d       	andi	r25, 0xDF	; 223
    5766:	90 83       	st	Z, r25
    5768:	e0 91 01 0b 	lds	r30, 0x0B01	; 0x800b01 <midiTxInIndex>
    576c:	f0 e0       	ldi	r31, 0x00	; 0
    576e:	ea 5d       	subi	r30, 0xDA	; 218
    5770:	f4 4f       	sbci	r31, 0xF4	; 244
    5772:	80 83       	st	Z, r24
    5774:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <midiTxInIndex>
    5778:	8f 5f       	subi	r24, 0xFF	; 255
    577a:	8f 71       	andi	r24, 0x1F	; 31
    577c:	80 93 01 0b 	sts	0x0B01, r24	; 0x800b01 <midiTxInIndex>
    5780:	90 91 01 0b 	lds	r25, 0x0B01	; 0x800b01 <midiTxInIndex>
    5784:	80 91 03 0b 	lds	r24, 0x0B03	; 0x800b03 <midiTxOutIndex>
    5788:	98 13       	cpse	r25, r24
    578a:	0d c0       	rjmp	.+26     	; 0x57a6 <serial1MIDISend+0x48>
    578c:	80 91 8f 0c 	lds	r24, 0x0C8F	; 0x800c8f <midiTxOvflCount>
    5790:	88 23       	and	r24, r24
    5792:	31 f0       	breq	.+12     	; 0x57a0 <serial1MIDISend+0x42>
    5794:	8f 3f       	cpi	r24, 0xFF	; 255
    5796:	39 f0       	breq	.+14     	; 0x57a6 <serial1MIDISend+0x48>
    5798:	8f 5f       	subi	r24, 0xFF	; 255
    579a:	80 93 8f 0c 	sts	0x0C8F, r24	; 0x800c8f <midiTxOvflCount>
    579e:	03 c0       	rjmp	.+6      	; 0x57a6 <serial1MIDISend+0x48>
    57a0:	81 e0       	ldi	r24, 0x01	; 1
    57a2:	80 93 8f 0c 	sts	0x0C8F, r24	; 0x800c8f <midiTxOvflCount>
    57a6:	e9 ec       	ldi	r30, 0xC9	; 201
    57a8:	f0 e0       	ldi	r31, 0x00	; 0
    57aa:	80 81       	ld	r24, Z
    57ac:	80 62       	ori	r24, 0x20	; 32
    57ae:	80 83       	st	Z, r24
    57b0:	08 95       	ret

000057b2 <serial1MIDIReadRx>:
    57b2:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <midiRxInIndex>
    57b6:	80 91 8e 0c 	lds	r24, 0x0C8E	; 0x800c8e <midiRxOutIndex>
    57ba:	98 17       	cp	r25, r24
    57bc:	69 f0       	breq	.+26     	; 0x57d8 <serial1MIDIReadRx+0x26>
    57be:	e0 91 8e 0c 	lds	r30, 0x0C8E	; 0x800c8e <midiRxOutIndex>
    57c2:	f0 e0       	ldi	r31, 0x00	; 0
    57c4:	ea 5f       	subi	r30, 0xFA	; 250
    57c6:	f4 4f       	sbci	r31, 0xF4	; 244
    57c8:	80 81       	ld	r24, Z
    57ca:	90 91 8e 0c 	lds	r25, 0x0C8E	; 0x800c8e <midiRxOutIndex>
    57ce:	9f 5f       	subi	r25, 0xFF	; 255
    57d0:	9f 71       	andi	r25, 0x1F	; 31
    57d2:	90 93 8e 0c 	sts	0x0C8E, r25	; 0x800c8e <midiRxOutIndex>
    57d6:	08 95       	ret
    57d8:	8d ef       	ldi	r24, 0xFD	; 253
    57da:	08 95       	ret

000057dc <__vector_36>:
    57dc:	1f 92       	push	r1
    57de:	0f 92       	push	r0
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	0f 92       	push	r0
    57e4:	11 24       	eor	r1, r1
    57e6:	0b b6       	in	r0, 0x3b	; 59
    57e8:	0f 92       	push	r0
    57ea:	8f 93       	push	r24
    57ec:	9f 93       	push	r25
    57ee:	ef 93       	push	r30
    57f0:	ff 93       	push	r31
    57f2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    57f6:	e0 91 46 0b 	lds	r30, 0x0B46	; 0x800b46 <midiRxInIndex>
    57fa:	f0 e0       	ldi	r31, 0x00	; 0
    57fc:	ea 5f       	subi	r30, 0xFA	; 250
    57fe:	f4 4f       	sbci	r31, 0xF4	; 244
    5800:	80 83       	st	Z, r24
    5802:	80 91 46 0b 	lds	r24, 0x0B46	; 0x800b46 <midiRxInIndex>
    5806:	8f 5f       	subi	r24, 0xFF	; 255
    5808:	8f 71       	andi	r24, 0x1F	; 31
    580a:	80 93 46 0b 	sts	0x0B46, r24	; 0x800b46 <midiRxInIndex>
    580e:	90 91 46 0b 	lds	r25, 0x0B46	; 0x800b46 <midiRxInIndex>
    5812:	80 91 8e 0c 	lds	r24, 0x0C8E	; 0x800c8e <midiRxOutIndex>
    5816:	98 13       	cpse	r25, r24
    5818:	0d c0       	rjmp	.+26     	; 0x5834 <__vector_36+0x58>
    581a:	80 91 8a 0b 	lds	r24, 0x0B8A	; 0x800b8a <midiRxOvflCount>
    581e:	88 23       	and	r24, r24
    5820:	31 f0       	breq	.+12     	; 0x582e <__vector_36+0x52>
    5822:	8f 3f       	cpi	r24, 0xFF	; 255
    5824:	39 f0       	breq	.+14     	; 0x5834 <__vector_36+0x58>
    5826:	8f 5f       	subi	r24, 0xFF	; 255
    5828:	80 93 8a 0b 	sts	0x0B8A, r24	; 0x800b8a <midiRxOvflCount>
    582c:	03 c0       	rjmp	.+6      	; 0x5834 <__vector_36+0x58>
    582e:	81 e0       	ldi	r24, 0x01	; 1
    5830:	80 93 8a 0b 	sts	0x0B8A, r24	; 0x800b8a <midiRxOvflCount>
    5834:	80 91 90 0c 	lds	r24, 0x0C90	; 0x800c90 <midiRxBytesCount>
    5838:	90 91 91 0c 	lds	r25, 0x0C91	; 0x800c91 <midiRxBytesCount+0x1>
    583c:	01 96       	adiw	r24, 0x01	; 1
    583e:	90 93 91 0c 	sts	0x0C91, r25	; 0x800c91 <midiRxBytesCount+0x1>
    5842:	80 93 90 0c 	sts	0x0C90, r24	; 0x800c90 <midiRxBytesCount>
    5846:	ff 91       	pop	r31
    5848:	ef 91       	pop	r30
    584a:	9f 91       	pop	r25
    584c:	8f 91       	pop	r24
    584e:	0f 90       	pop	r0
    5850:	0b be       	out	0x3b, r0	; 59
    5852:	0f 90       	pop	r0
    5854:	0f be       	out	0x3f, r0	; 63
    5856:	0f 90       	pop	r0
    5858:	1f 90       	pop	r1
    585a:	18 95       	reti

0000585c <__vector_37>:
    585c:	1f 92       	push	r1
    585e:	0f 92       	push	r0
    5860:	0f b6       	in	r0, 0x3f	; 63
    5862:	0f 92       	push	r0
    5864:	11 24       	eor	r1, r1
    5866:	0b b6       	in	r0, 0x3b	; 59
    5868:	0f 92       	push	r0
    586a:	8f 93       	push	r24
    586c:	9f 93       	push	r25
    586e:	ef 93       	push	r30
    5870:	ff 93       	push	r31
    5872:	90 91 03 0b 	lds	r25, 0x0B03	; 0x800b03 <midiTxOutIndex>
    5876:	80 91 01 0b 	lds	r24, 0x0B01	; 0x800b01 <midiTxInIndex>
    587a:	98 17       	cp	r25, r24
    587c:	c1 f0       	breq	.+48     	; 0x58ae <__vector_37+0x52>
    587e:	e0 91 03 0b 	lds	r30, 0x0B03	; 0x800b03 <midiTxOutIndex>
    5882:	f0 e0       	ldi	r31, 0x00	; 0
    5884:	ea 5d       	subi	r30, 0xDA	; 218
    5886:	f4 4f       	sbci	r31, 0xF4	; 244
    5888:	80 81       	ld	r24, Z
    588a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    588e:	80 91 03 0b 	lds	r24, 0x0B03	; 0x800b03 <midiTxOutIndex>
    5892:	8f 5f       	subi	r24, 0xFF	; 255
    5894:	8f 71       	andi	r24, 0x1F	; 31
    5896:	80 93 03 0b 	sts	0x0B03, r24	; 0x800b03 <midiTxOutIndex>
    589a:	80 91 8b 0b 	lds	r24, 0x0B8B	; 0x800b8b <midiTxBytesCount>
    589e:	90 91 8c 0b 	lds	r25, 0x0B8C	; 0x800b8c <midiTxBytesCount+0x1>
    58a2:	01 96       	adiw	r24, 0x01	; 1
    58a4:	90 93 8c 0b 	sts	0x0B8C, r25	; 0x800b8c <midiTxBytesCount+0x1>
    58a8:	80 93 8b 0b 	sts	0x0B8B, r24	; 0x800b8b <midiTxBytesCount>
    58ac:	05 c0       	rjmp	.+10     	; 0x58b8 <__vector_37+0x5c>
    58ae:	e9 ec       	ldi	r30, 0xC9	; 201
    58b0:	f0 e0       	ldi	r31, 0x00	; 0
    58b2:	80 81       	ld	r24, Z
    58b4:	8f 7d       	andi	r24, 0xDF	; 223
    58b6:	80 83       	st	Z, r24
    58b8:	ff 91       	pop	r31
    58ba:	ef 91       	pop	r30
    58bc:	9f 91       	pop	r25
    58be:	8f 91       	pop	r24
    58c0:	0f 90       	pop	r0
    58c2:	0b be       	out	0x3b, r0	; 59
    58c4:	0f 90       	pop	r0
    58c6:	0f be       	out	0x3f, r0	; 63
    58c8:	0f 90       	pop	r0
    58ca:	1f 90       	pop	r1
    58cc:	18 95       	reti

000058ce <serial0SER_USBSend>:
    58ce:	90 91 48 0b 	lds	r25, 0x0B48	; 0x800b48 <serusbTxInIndex>
    58d2:	e1 ec       	ldi	r30, 0xC1	; 193
    58d4:	f0 e0       	ldi	r31, 0x00	; 0
    58d6:	20 81       	ld	r18, Z
    58d8:	2f 7d       	andi	r18, 0xDF	; 223
    58da:	20 83       	st	Z, r18
    58dc:	e9 2f       	mov	r30, r25
    58de:	f0 e0       	ldi	r31, 0x00	; 0
    58e0:	e3 57       	subi	r30, 0x73	; 115
    58e2:	f4 4f       	sbci	r31, 0xF4	; 244
    58e4:	80 83       	st	Z, r24
    58e6:	81 e0       	ldi	r24, 0x01	; 1
    58e8:	89 0f       	add	r24, r25
    58ea:	90 91 04 0b 	lds	r25, 0x0B04	; 0x800b04 <serusbTxOutIndex>
    58ee:	89 13       	cpse	r24, r25
    58f0:	0c c0       	rjmp	.+24     	; 0x590a <serial0SER_USBSend+0x3c>
    58f2:	e1 ec       	ldi	r30, 0xC1	; 193
    58f4:	f0 e0       	ldi	r31, 0x00	; 0
    58f6:	90 81       	ld	r25, Z
    58f8:	90 62       	ori	r25, 0x20	; 32
    58fa:	90 83       	st	Z, r25
    58fc:	90 91 04 0b 	lds	r25, 0x0B04	; 0x800b04 <serusbTxOutIndex>
    5900:	89 17       	cp	r24, r25
    5902:	e1 f3       	breq	.-8      	; 0x58fc <serial0SER_USBSend+0x2e>
    5904:	80 93 48 0b 	sts	0x0B48, r24	; 0x800b48 <serusbTxInIndex>
    5908:	08 95       	ret
    590a:	80 93 48 0b 	sts	0x0B48, r24	; 0x800b48 <serusbTxInIndex>
    590e:	e1 ec       	ldi	r30, 0xC1	; 193
    5910:	f0 e0       	ldi	r31, 0x00	; 0
    5912:	80 81       	ld	r24, Z
    5914:	80 62       	ori	r24, 0x20	; 32
    5916:	80 83       	st	Z, r24
    5918:	08 95       	ret

0000591a <serial0SER_USB_sendStringP>:
    591a:	cf 93       	push	r28
    591c:	df 93       	push	r29
    591e:	fc 01       	movw	r30, r24
    5920:	02 c0       	rjmp	.+4      	; 0x5926 <serial0SER_USB_sendStringP+0xc>
    5922:	d5 df       	rcall	.-86     	; 0x58ce <serial0SER_USBSend>
    5924:	fe 01       	movw	r30, r28
    5926:	ef 01       	movw	r28, r30
    5928:	21 96       	adiw	r28, 0x01	; 1
    592a:	84 91       	lpm	r24, Z
    592c:	88 23       	and	r24, r24
    592e:	21 f0       	breq	.+8      	; 0x5938 <serial0SER_USB_sendStringP+0x1e>
    5930:	90 91 8d 0c 	lds	r25, 0x0C8D	; 0x800c8d <serusbOvflFlag>
    5934:	9f 3f       	cpi	r25, 0xFF	; 255
    5936:	a9 f7       	brne	.-22     	; 0x5922 <serial0SER_USB_sendStringP+0x8>
    5938:	df 91       	pop	r29
    593a:	cf 91       	pop	r28
    593c:	08 95       	ret

0000593e <serial0SER_USB_sendCRLF>:
    593e:	82 ef       	ldi	r24, 0xF2	; 242
    5940:	9f e0       	ldi	r25, 0x0F	; 15
    5942:	eb cf       	rjmp	.-42     	; 0x591a <serial0SER_USB_sendStringP>
    5944:	08 95       	ret

00005946 <init_Serial0SerUSB>:
    5946:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    594a:	83 e3       	ldi	r24, 0x33	; 51
    594c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    5950:	e1 ec       	ldi	r30, 0xC1	; 193
    5952:	f0 e0       	ldi	r31, 0x00	; 0
    5954:	80 81       	ld	r24, Z
    5956:	88 69       	ori	r24, 0x98	; 152
    5958:	80 83       	st	Z, r24
    595a:	e2 ec       	ldi	r30, 0xC2	; 194
    595c:	f0 e0       	ldi	r31, 0x00	; 0
    595e:	80 81       	ld	r24, Z
    5960:	86 60       	ori	r24, 0x06	; 6
    5962:	80 83       	st	Z, r24
    5964:	10 92 46 0b 	sts	0x0B46, r1	; 0x800b46 <midiRxInIndex>
    5968:	10 92 8e 0c 	sts	0x0C8E, r1	; 0x800c8e <midiRxOutIndex>
    596c:	10 92 01 0b 	sts	0x0B01, r1	; 0x800b01 <midiTxInIndex>
    5970:	10 92 03 0b 	sts	0x0B03, r1	; 0x800b03 <midiTxOutIndex>
    5974:	10 92 8d 0c 	sts	0x0C8D, r1	; 0x800c8d <serusbOvflFlag>
    5978:	0e 94 82 09 	call	0x1304	; 0x1304 <eeprom_ReadUSB>
    597c:	8f 3f       	cpi	r24, 0xFF	; 255
    597e:	41 f4       	brne	.+16     	; 0x5990 <init_Serial0SerUSB+0x4a>
    5980:	10 92 47 0b 	sts	0x0B47, r1	; 0x800b47 <serusb_Active>
    5984:	40 e0       	ldi	r20, 0x00	; 0
    5986:	50 e0       	ldi	r21, 0x00	; 0
    5988:	64 e0       	ldi	r22, 0x04	; 4
    598a:	81 e0       	ldi	r24, 0x01	; 1
    598c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <log_putError>
    5990:	80 91 47 0b 	lds	r24, 0x0B47	; 0x800b47 <serusb_Active>
    5994:	8f 3f       	cpi	r24, 0xFF	; 255
    5996:	41 f4       	brne	.+16     	; 0x59a8 <init_Serial0SerUSB+0x62>
    5998:	85 ef       	ldi	r24, 0xF5	; 245
    599a:	92 e0       	ldi	r25, 0x02	; 2
    599c:	be df       	rcall	.-132    	; 0x591a <serial0SER_USB_sendStringP>
    599e:	8c e9       	ldi	r24, 0x9C	; 156
    59a0:	9f e0       	ldi	r25, 0x0F	; 15
    59a2:	bb df       	rcall	.-138    	; 0x591a <serial0SER_USB_sendStringP>
    59a4:	cc df       	rcall	.-104    	; 0x593e <serial0SER_USB_sendCRLF>
    59a6:	cb cf       	rjmp	.-106    	; 0x593e <serial0SER_USB_sendCRLF>
    59a8:	08 95       	ret

000059aa <serial0SER_USB_sendString>:
    59aa:	1f 93       	push	r17
    59ac:	cf 93       	push	r28
    59ae:	df 93       	push	r29
    59b0:	ec 01       	movw	r28, r24
    59b2:	10 e5       	ldi	r17, 0x50	; 80
    59b4:	03 c0       	rjmp	.+6      	; 0x59bc <serial0SER_USB_sendString+0x12>
    59b6:	21 96       	adiw	r28, 0x01	; 1
    59b8:	8a df       	rcall	.-236    	; 0x58ce <serial0SER_USBSend>
    59ba:	11 50       	subi	r17, 0x01	; 1
    59bc:	88 81       	ld	r24, Y
    59be:	88 23       	and	r24, r24
    59c0:	31 f0       	breq	.+12     	; 0x59ce <serial0SER_USB_sendString+0x24>
    59c2:	90 91 8d 0c 	lds	r25, 0x0C8D	; 0x800c8d <serusbOvflFlag>
    59c6:	9f 3f       	cpi	r25, 0xFF	; 255
    59c8:	11 f0       	breq	.+4      	; 0x59ce <serial0SER_USB_sendString+0x24>
    59ca:	11 11       	cpse	r17, r1
    59cc:	f4 cf       	rjmp	.-24     	; 0x59b6 <serial0SER_USB_sendString+0xc>
    59ce:	df 91       	pop	r29
    59d0:	cf 91       	pop	r28
    59d2:	1f 91       	pop	r17
    59d4:	08 95       	ret

000059d6 <__vector_25>:

ISR(USART0_RX_vect) {
    59d6:	1f 92       	push	r1
    59d8:	0f 92       	push	r0
    59da:	0f b6       	in	r0, 0x3f	; 63
    59dc:	0f 92       	push	r0
    59de:	11 24       	eor	r1, r1
    59e0:	0b b6       	in	r0, 0x3b	; 59
    59e2:	0f 92       	push	r0
    59e4:	8f 93       	push	r24
    59e6:	9f 93       	push	r25
    59e8:	ef 93       	push	r30
    59ea:	ff 93       	push	r31
	uint8_t received_byte;
	uint8_t index = serusbRxInIndex;
    59ec:	e0 91 92 0c 	lds	r30, 0x0C92	; 0x800c92 <serusbRxInIndex>
	received_byte = UDR0;
    59f0:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
	serUsbRxBuffer[index++] =  received_byte; // Fetch the received byte value
    59f4:	81 e0       	ldi	r24, 0x01	; 1
    59f6:	8e 0f       	add	r24, r30
    59f8:	f0 e0       	ldi	r31, 0x00	; 0
    59fa:	e6 5b       	subi	r30, 0xB6	; 182
    59fc:	f4 4f       	sbci	r31, 0xF4	; 244
    59fe:	90 83       	st	Z, r25
	index &= SER_USB_RX_BUFFER_MASK;
    5a00:	8f 73       	andi	r24, 0x3F	; 63
	if (index == serusbRxOutIndex) {
    5a02:	90 91 49 0b 	lds	r25, 0x0B49	; 0x800b49 <serusbRxOutIndex>
    5a06:	89 13       	cpse	r24, r25
    5a08:	04 c0       	rjmp	.+8      	; 0x5a12 <__vector_25+0x3c>
		// overflow!
		serusbOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    5a0a:	8f ef       	ldi	r24, 0xFF	; 255
    5a0c:	80 93 8d 0c 	sts	0x0C8D, r24	; 0x800c8d <serusbOvflFlag>
    5a10:	02 c0       	rjmp	.+4      	; 0x5a16 <__vector_25+0x40>
	} else {
		serusbRxInIndex = index;
    5a12:	80 93 92 0c 	sts	0x0C92, r24	; 0x800c92 <serusbRxInIndex>
	}
}
    5a16:	ff 91       	pop	r31
    5a18:	ef 91       	pop	r30
    5a1a:	9f 91       	pop	r25
    5a1c:	8f 91       	pop	r24
    5a1e:	0f 90       	pop	r0
    5a20:	0b be       	out	0x3b, r0	; 59
    5a22:	0f 90       	pop	r0
    5a24:	0f be       	out	0x3f, r0	; 63
    5a26:	0f 90       	pop	r0
    5a28:	1f 90       	pop	r1
    5a2a:	18 95       	reti

00005a2c <__vector_26>:

ISR(USART0_UDRE_vect) {
    5a2c:	1f 92       	push	r1
    5a2e:	0f 92       	push	r0
    5a30:	0f b6       	in	r0, 0x3f	; 63
    5a32:	0f 92       	push	r0
    5a34:	11 24       	eor	r1, r1
    5a36:	0b b6       	in	r0, 0x3b	; 59
    5a38:	0f 92       	push	r0
    5a3a:	2f 93       	push	r18
    5a3c:	8f 93       	push	r24
    5a3e:	9f 93       	push	r25
    5a40:	ef 93       	push	r30
    5a42:	ff 93       	push	r31
	uint8_t index = serusbTxOutIndex;
    5a44:	80 91 04 0b 	lds	r24, 0x0B04	; 0x800b04 <serusbTxOutIndex>
	if (SER_USB_TX_BUFFER_NONEMPTY){
    5a48:	20 91 48 0b 	lds	r18, 0x0B48	; 0x800b48 <serusbTxInIndex>
    5a4c:	90 91 04 0b 	lds	r25, 0x0B04	; 0x800b04 <serusbTxOutIndex>
    5a50:	29 17       	cp	r18, r25
    5a52:	59 f0       	breq	.+22     	; 0x5a6a <__vector_26+0x3e>
		// es ist was zu senden da
		UDR0 = serUsbTxBuffer[index];
    5a54:	e8 2f       	mov	r30, r24
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	e3 57       	subi	r30, 0x73	; 115
    5a5a:	f4 4f       	sbci	r31, 0xF4	; 244
    5a5c:	90 81       	ld	r25, Z
    5a5e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
		serusbTxOutIndex = (index+1) & SER_USB_TX_BUFFER_MASK;
    5a62:	8f 5f       	subi	r24, 0xFF	; 255
    5a64:	80 93 04 0b 	sts	0x0B04, r24	; 0x800b04 <serusbTxOutIndex>
    5a68:	05 c0       	rjmp	.+10     	; 0x5a74 <__vector_26+0x48>
	} else {
		// nothing to send
		UCSR0B &= ~(1 << UDRIE0);
    5a6a:	e1 ec       	ldi	r30, 0xC1	; 193
    5a6c:	f0 e0       	ldi	r31, 0x00	; 0
    5a6e:	80 81       	ld	r24, Z
    5a70:	8f 7d       	andi	r24, 0xDF	; 223
    5a72:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
}
    5a74:	ff 91       	pop	r31
    5a76:	ef 91       	pop	r30
    5a78:	9f 91       	pop	r25
    5a7a:	8f 91       	pop	r24
    5a7c:	2f 91       	pop	r18
    5a7e:	0f 90       	pop	r0
    5a80:	0b be       	out	0x3b, r0	; 59
    5a82:	0f 90       	pop	r0
    5a84:	0f be       	out	0x3f, r0	; 63
    5a86:	0f 90       	pop	r0
    5a88:	1f 90       	pop	r1
    5a8a:	18 95       	reti

00005a8c <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    5a8c:	8a 30       	cpi	r24, 0x0A	; 10
    5a8e:	10 f0       	brcs	.+4      	; 0x5a94 <nibbleToChr+0x8>
    5a90:	89 5c       	subi	r24, 0xC9	; 201
    5a92:	08 95       	ret
    5a94:	80 5d       	subi	r24, 0xD0	; 208
    5a96:	08 95       	ret

00005a98 <lcd_setCG>:
    5a98:	ef 92       	push	r14
    5a9a:	ff 92       	push	r15
    5a9c:	1f 93       	push	r17
    5a9e:	cf 93       	push	r28
    5aa0:	df 93       	push	r29
    5aa2:	eb 01       	movw	r28, r22
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	88 0f       	add	r24, r24
    5aa8:	99 1f       	adc	r25, r25
    5aaa:	88 0f       	add	r24, r24
    5aac:	99 1f       	adc	r25, r25
    5aae:	88 0f       	add	r24, r24
    5ab0:	99 1f       	adc	r25, r25
    5ab2:	80 64       	ori	r24, 0x40	; 64
    5ab4:	0e 94 88 10 	call	0x2110	; 0x2110 <lcd_write_command>
    5ab8:	10 e0       	ldi	r17, 0x00	; 0
    5aba:	0a c0       	rjmp	.+20     	; 0x5ad0 <lcd_setCG+0x38>
    5abc:	7e 01       	movw	r14, r28
    5abe:	8f ef       	ldi	r24, 0xFF	; 255
    5ac0:	e8 1a       	sub	r14, r24
    5ac2:	f8 0a       	sbc	r15, r24
    5ac4:	fe 01       	movw	r30, r28
    5ac6:	84 91       	lpm	r24, Z
    5ac8:	0e 94 70 10 	call	0x20e0	; 0x20e0 <lcd_write_character>
    5acc:	1f 5f       	subi	r17, 0xFF	; 255
    5ace:	e7 01       	movw	r28, r14
    5ad0:	18 30       	cpi	r17, 0x08	; 8
    5ad2:	a0 f3       	brcs	.-24     	; 0x5abc <lcd_setCG+0x24>
    5ad4:	df 91       	pop	r29
    5ad6:	cf 91       	pop	r28
    5ad8:	1f 91       	pop	r17
    5ada:	ff 90       	pop	r15
    5adc:	ef 90       	pop	r14
    5ade:	08 95       	ret

00005ae0 <lcd_initCG>:
    5ae0:	6a ee       	ldi	r22, 0xEA	; 234
    5ae2:	7f e0       	ldi	r23, 0x0F	; 15
    5ae4:	80 e0       	ldi	r24, 0x00	; 0
    5ae6:	d8 df       	rcall	.-80     	; 0x5a98 <lcd_setCG>
    5ae8:	62 ee       	ldi	r22, 0xE2	; 226
    5aea:	7f e0       	ldi	r23, 0x0F	; 15
    5aec:	81 e0       	ldi	r24, 0x01	; 1
    5aee:	d4 df       	rcall	.-88     	; 0x5a98 <lcd_setCG>
    5af0:	6a ed       	ldi	r22, 0xDA	; 218
    5af2:	7f e0       	ldi	r23, 0x0F	; 15
    5af4:	82 e0       	ldi	r24, 0x02	; 2
    5af6:	d0 cf       	rjmp	.-96     	; 0x5a98 <lcd_setCG>
    5af8:	08 95       	ret

00005afa <lcd_hexout>:
    5afa:	cf 93       	push	r28
    5afc:	c8 2f       	mov	r28, r24
    5afe:	82 95       	swap	r24
    5b00:	8f 70       	andi	r24, 0x0F	; 15
    5b02:	8a 30       	cpi	r24, 0x0A	; 10
    5b04:	10 f0       	brcs	.+4      	; 0x5b0a <lcd_hexout+0x10>
    5b06:	89 5c       	subi	r24, 0xC9	; 201
    5b08:	01 c0       	rjmp	.+2      	; 0x5b0c <lcd_hexout+0x12>
    5b0a:	80 5d       	subi	r24, 0xD0	; 208
    5b0c:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5b10:	cf 70       	andi	r28, 0x0F	; 15
    5b12:	ca 30       	cpi	r28, 0x0A	; 10
    5b14:	18 f0       	brcs	.+6      	; 0x5b1c <lcd_hexout+0x22>
    5b16:	87 e3       	ldi	r24, 0x37	; 55
    5b18:	8c 0f       	add	r24, r28
    5b1a:	02 c0       	rjmp	.+4      	; 0x5b20 <lcd_hexout+0x26>
    5b1c:	80 e3       	ldi	r24, 0x30	; 48
    5b1e:	8c 0f       	add	r24, r28
    5b20:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5b24:	cf 91       	pop	r28
    5b26:	08 95       	ret

00005b28 <lcd_longout>:
    5b28:	cf 93       	push	r28
    5b2a:	df 93       	push	r29
    5b2c:	d3 e0       	ldi	r29, 0x03	; 3
    5b2e:	1c c0       	rjmp	.+56     	; 0x5b68 <lcd_longout+0x40>
    5b30:	ed 2f       	mov	r30, r29
    5b32:	0d 2e       	mov	r0, r29
    5b34:	00 0c       	add	r0, r0
    5b36:	ff 0b       	sbc	r31, r31
    5b38:	eb 56       	subi	r30, 0x6B	; 107
    5b3a:	f3 4f       	sbci	r31, 0xF3	; 243
    5b3c:	c0 81       	ld	r28, Z
    5b3e:	8c 2f       	mov	r24, r28
    5b40:	82 95       	swap	r24
    5b42:	8f 70       	andi	r24, 0x0F	; 15
    5b44:	8a 30       	cpi	r24, 0x0A	; 10
    5b46:	10 f0       	brcs	.+4      	; 0x5b4c <lcd_longout+0x24>
    5b48:	89 5c       	subi	r24, 0xC9	; 201
    5b4a:	01 c0       	rjmp	.+2      	; 0x5b4e <lcd_longout+0x26>
    5b4c:	80 5d       	subi	r24, 0xD0	; 208
    5b4e:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5b52:	cf 70       	andi	r28, 0x0F	; 15
    5b54:	ca 30       	cpi	r28, 0x0A	; 10
    5b56:	18 f0       	brcs	.+6      	; 0x5b5e <lcd_longout+0x36>
    5b58:	87 e3       	ldi	r24, 0x37	; 55
    5b5a:	8c 0f       	add	r24, r28
    5b5c:	02 c0       	rjmp	.+4      	; 0x5b62 <lcd_longout+0x3a>
    5b5e:	80 e3       	ldi	r24, 0x30	; 48
    5b60:	8c 0f       	add	r24, r28
    5b62:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5b66:	d1 50       	subi	r29, 0x01	; 1
    5b68:	dd 23       	and	r29, r29
    5b6a:	14 f7       	brge	.-60     	; 0x5b30 <lcd_longout+0x8>
    5b6c:	df 91       	pop	r29
    5b6e:	cf 91       	pop	r28
    5b70:	08 95       	ret

00005b72 <lcd_dec2out>:
    5b72:	cf 93       	push	r28
    5b74:	c8 2f       	mov	r28, r24
    5b76:	84 36       	cpi	r24, 0x64	; 100
    5b78:	50 f0       	brcs	.+20     	; 0x5b8e <lcd_dec2out+0x1c>
    5b7a:	8d e2       	ldi	r24, 0x2D	; 45
    5b7c:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5b80:	8d e2       	ldi	r24, 0x2D	; 45
    5b82:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5b86:	0d c0       	rjmp	.+26     	; 0x5ba2 <lcd_dec2out+0x30>
    5b88:	ca 50       	subi	r28, 0x0A	; 10
    5b8a:	8f 5f       	subi	r24, 0xFF	; 255
    5b8c:	01 c0       	rjmp	.+2      	; 0x5b90 <lcd_dec2out+0x1e>
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
    5b90:	ca 30       	cpi	r28, 0x0A	; 10
    5b92:	d0 f7       	brcc	.-12     	; 0x5b88 <lcd_dec2out+0x16>
    5b94:	80 5d       	subi	r24, 0xD0	; 208
    5b96:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5b9a:	80 e3       	ldi	r24, 0x30	; 48
    5b9c:	8c 0f       	add	r24, r28
    5b9e:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5ba2:	cf 91       	pop	r28
    5ba4:	08 95       	ret

00005ba6 <putChar_Dec2>:
    5ba6:	84 36       	cpi	r24, 0x64	; 100
    5ba8:	58 f0       	brcs	.+22     	; 0x5bc0 <putChar_Dec2+0x1a>
    5baa:	8d e2       	ldi	r24, 0x2D	; 45
    5bac:	db 01       	movw	r26, r22
    5bae:	8c 93       	st	X, r24
    5bb0:	fb 01       	movw	r30, r22
    5bb2:	32 96       	adiw	r30, 0x02	; 2
    5bb4:	11 96       	adiw	r26, 0x01	; 1
    5bb6:	8c 93       	st	X, r24
    5bb8:	0f c0       	rjmp	.+30     	; 0x5bd8 <putChar_Dec2+0x32>
    5bba:	8a 50       	subi	r24, 0x0A	; 10
    5bbc:	9f 5f       	subi	r25, 0xFF	; 255
    5bbe:	01 c0       	rjmp	.+2      	; 0x5bc2 <putChar_Dec2+0x1c>
    5bc0:	90 e0       	ldi	r25, 0x00	; 0
    5bc2:	8a 30       	cpi	r24, 0x0A	; 10
    5bc4:	d0 f7       	brcc	.-12     	; 0x5bba <putChar_Dec2+0x14>
    5bc6:	90 5d       	subi	r25, 0xD0	; 208
    5bc8:	fb 01       	movw	r30, r22
    5bca:	90 83       	st	Z, r25
    5bcc:	32 96       	adiw	r30, 0x02	; 2
    5bce:	90 e3       	ldi	r25, 0x30	; 48
    5bd0:	98 0f       	add	r25, r24
    5bd2:	db 01       	movw	r26, r22
    5bd4:	11 96       	adiw	r26, 0x01	; 1
    5bd6:	9c 93       	st	X, r25
    5bd8:	10 82       	st	Z, r1
    5bda:	cf 01       	movw	r24, r30
    5bdc:	08 95       	ret

00005bde <putChar_hex>:
    5bde:	fb 01       	movw	r30, r22
    5be0:	98 2f       	mov	r25, r24
    5be2:	92 95       	swap	r25
    5be4:	9f 70       	andi	r25, 0x0F	; 15
    5be6:	9a 30       	cpi	r25, 0x0A	; 10
    5be8:	10 f0       	brcs	.+4      	; 0x5bee <putChar_hex+0x10>
    5bea:	99 5c       	subi	r25, 0xC9	; 201
    5bec:	01 c0       	rjmp	.+2      	; 0x5bf0 <putChar_hex+0x12>
    5bee:	90 5d       	subi	r25, 0xD0	; 208
    5bf0:	90 83       	st	Z, r25
    5bf2:	98 2f       	mov	r25, r24
    5bf4:	9f 70       	andi	r25, 0x0F	; 15
    5bf6:	9f 01       	movw	r18, r30
    5bf8:	2e 5f       	subi	r18, 0xFE	; 254
    5bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5bfc:	9a 30       	cpi	r25, 0x0A	; 10
    5bfe:	10 f0       	brcs	.+4      	; 0x5c04 <putChar_hex+0x26>
    5c00:	99 5c       	subi	r25, 0xC9	; 201
    5c02:	01 c0       	rjmp	.+2      	; 0x5c06 <putChar_hex+0x28>
    5c04:	90 5d       	subi	r25, 0xD0	; 208
    5c06:	91 83       	std	Z+1, r25	; 0x01
    5c08:	12 82       	std	Z+2, r1	; 0x02
    5c0a:	c9 01       	movw	r24, r18
    5c0c:	08 95       	ret

00005c0e <putChar_long>:
    5c0e:	ac 01       	movw	r20, r24
    5c10:	fb 01       	movw	r30, r22
    5c12:	34 96       	adiw	r30, 0x04	; 4
    5c14:	db 01       	movw	r26, r22
    5c16:	14 96       	adiw	r26, 0x04	; 4
    5c18:	1c 92       	st	X, r1
    5c1a:	20 e0       	ldi	r18, 0x00	; 0
    5c1c:	10 c0       	rjmp	.+32     	; 0x5c3e <putChar_long+0x30>
    5c1e:	94 2f       	mov	r25, r20
    5c20:	9f 70       	andi	r25, 0x0F	; 15
    5c22:	31 97       	sbiw	r30, 0x01	; 1
    5c24:	9a 30       	cpi	r25, 0x0A	; 10
    5c26:	10 f0       	brcs	.+4      	; 0x5c2c <putChar_long+0x1e>
    5c28:	99 5c       	subi	r25, 0xC9	; 201
    5c2a:	01 c0       	rjmp	.+2      	; 0x5c2e <putChar_long+0x20>
    5c2c:	90 5d       	subi	r25, 0xD0	; 208
    5c2e:	90 83       	st	Z, r25
    5c30:	52 95       	swap	r21
    5c32:	42 95       	swap	r20
    5c34:	4f 70       	andi	r20, 0x0F	; 15
    5c36:	45 27       	eor	r20, r21
    5c38:	5f 70       	andi	r21, 0x0F	; 15
    5c3a:	45 27       	eor	r20, r21
    5c3c:	2f 5f       	subi	r18, 0xFF	; 255
    5c3e:	24 30       	cpi	r18, 0x04	; 4
    5c40:	70 f3       	brcs	.-36     	; 0x5c1e <putChar_long+0x10>
    5c42:	cf 01       	movw	r24, r30
    5c44:	04 96       	adiw	r24, 0x04	; 4
    5c46:	08 95       	ret

00005c48 <putChar_Note>:
    5c48:	88 23       	and	r24, r24
    5c4a:	8c f4       	brge	.+34     	; 0x5c6e <putChar_Note+0x26>
    5c4c:	8d e2       	ldi	r24, 0x2D	; 45
    5c4e:	db 01       	movw	r26, r22
    5c50:	8c 93       	st	X, r24
    5c52:	9e e6       	ldi	r25, 0x6E	; 110
    5c54:	11 96       	adiw	r26, 0x01	; 1
    5c56:	9c 93       	st	X, r25
    5c58:	11 97       	sbiw	r26, 0x01	; 1
    5c5a:	12 96       	adiw	r26, 0x02	; 2
    5c5c:	8c 93       	st	X, r24
    5c5e:	12 97       	sbiw	r26, 0x02	; 2
    5c60:	14 96       	adiw	r26, 0x04	; 4
    5c62:	fb 01       	movw	r30, r22
    5c64:	13 82       	std	Z+3, r1	; 0x03
    5c66:	49 c0       	rjmp	.+146    	; 0x5cfa <putChar_Note+0xb2>
    5c68:	8c 50       	subi	r24, 0x0C	; 12
    5c6a:	9f 5f       	subi	r25, 0xFF	; 255
    5c6c:	01 c0       	rjmp	.+2      	; 0x5c70 <putChar_Note+0x28>
    5c6e:	90 e0       	ldi	r25, 0x00	; 0
    5c70:	8c 30       	cpi	r24, 0x0C	; 12
    5c72:	d0 f7       	brcc	.-12     	; 0x5c68 <putChar_Note+0x20>
    5c74:	8b 30       	cpi	r24, 0x0B	; 11
    5c76:	39 f4       	brne	.+14     	; 0x5c86 <putChar_Note+0x3e>
    5c78:	fb 01       	movw	r30, r22
    5c7a:	31 96       	adiw	r30, 0x01	; 1
    5c7c:	88 e4       	ldi	r24, 0x48	; 72
    5c7e:	db 01       	movw	r26, r22
    5c80:	8c 93       	st	X, r24
    5c82:	8f e5       	ldi	r24, 0x5F	; 95
    5c84:	27 c0       	rjmp	.+78     	; 0x5cd4 <putChar_Note+0x8c>
    5c86:	85 30       	cpi	r24, 0x05	; 5
    5c88:	58 f4       	brcc	.+22     	; 0x5ca0 <putChar_Note+0x58>
    5c8a:	fb 01       	movw	r30, r22
    5c8c:	31 96       	adiw	r30, 0x01	; 1
    5c8e:	28 2f       	mov	r18, r24
    5c90:	26 95       	lsr	r18
    5c92:	2d 5b       	subi	r18, 0xBD	; 189
    5c94:	db 01       	movw	r26, r22
    5c96:	2c 93       	st	X, r18
    5c98:	80 fd       	sbrc	r24, 0
    5c9a:	19 c0       	rjmp	.+50     	; 0x5cce <putChar_Note+0x86>
    5c9c:	8f e5       	ldi	r24, 0x5F	; 95
    5c9e:	1a c0       	rjmp	.+52     	; 0x5cd4 <putChar_Note+0x8c>
    5ca0:	89 30       	cpi	r24, 0x09	; 9
    5ca2:	30 f0       	brcs	.+12     	; 0x5cb0 <putChar_Note+0x68>
    5ca4:	fb 01       	movw	r30, r22
    5ca6:	31 96       	adiw	r30, 0x01	; 1
    5ca8:	21 e4       	ldi	r18, 0x41	; 65
    5caa:	db 01       	movw	r26, r22
    5cac:	2c 93       	st	X, r18
    5cae:	0b c0       	rjmp	.+22     	; 0x5cc6 <putChar_Note+0x7e>
    5cb0:	fb 01       	movw	r30, r22
    5cb2:	31 96       	adiw	r30, 0x01	; 1
    5cb4:	28 2f       	mov	r18, r24
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	25 50       	subi	r18, 0x05	; 5
    5cba:	31 09       	sbc	r19, r1
    5cbc:	35 95       	asr	r19
    5cbe:	27 95       	ror	r18
    5cc0:	2a 5b       	subi	r18, 0xBA	; 186
    5cc2:	db 01       	movw	r26, r22
    5cc4:	2c 93       	st	X, r18
    5cc6:	80 ff       	sbrs	r24, 0
    5cc8:	04 c0       	rjmp	.+8      	; 0x5cd2 <putChar_Note+0x8a>
    5cca:	8f e5       	ldi	r24, 0x5F	; 95
    5ccc:	03 c0       	rjmp	.+6      	; 0x5cd4 <putChar_Note+0x8c>
    5cce:	83 e2       	ldi	r24, 0x23	; 35
    5cd0:	01 c0       	rjmp	.+2      	; 0x5cd4 <putChar_Note+0x8c>
    5cd2:	83 e2       	ldi	r24, 0x23	; 35
    5cd4:	80 83       	st	Z, r24
    5cd6:	91 11       	cpse	r25, r1
    5cd8:	05 c0       	rjmp	.+10     	; 0x5ce4 <putChar_Note+0x9c>
    5cda:	df 01       	movw	r26, r30
    5cdc:	12 96       	adiw	r26, 0x02	; 2
    5cde:	8d e6       	ldi	r24, 0x6D	; 109
    5ce0:	81 83       	std	Z+1, r24	; 0x01
    5ce2:	0b c0       	rjmp	.+22     	; 0x5cfa <putChar_Note+0xb2>
    5ce4:	9c 30       	cpi	r25, 0x0C	; 12
    5ce6:	28 f4       	brcc	.+10     	; 0x5cf2 <putChar_Note+0xaa>
    5ce8:	df 01       	movw	r26, r30
    5cea:	12 96       	adiw	r26, 0x02	; 2
    5cec:	91 5d       	subi	r25, 0xD1	; 209
    5cee:	91 83       	std	Z+1, r25	; 0x01
    5cf0:	04 c0       	rjmp	.+8      	; 0x5cfa <putChar_Note+0xb2>
    5cf2:	df 01       	movw	r26, r30
    5cf4:	12 96       	adiw	r26, 0x02	; 2
    5cf6:	8d e2       	ldi	r24, 0x2D	; 45
    5cf8:	81 83       	std	Z+1, r24	; 0x01
    5cfa:	1c 92       	st	X, r1
    5cfc:	cd 01       	movw	r24, r26
    5cfe:	08 95       	ret

00005d00 <putChar_Manual>:
    5d00:	83 30       	cpi	r24, 0x03	; 3
    5d02:	38 f4       	brcc	.+14     	; 0x5d12 <putChar_Manual+0x12>
    5d04:	fb 01       	movw	r30, r22
    5d06:	31 96       	adiw	r30, 0x01	; 1
    5d08:	93 e3       	ldi	r25, 0x33	; 51
    5d0a:	98 1b       	sub	r25, r24
    5d0c:	db 01       	movw	r26, r22
    5d0e:	9c 93       	st	X, r25
    5d10:	0d c0       	rjmp	.+26     	; 0x5d2c <putChar_Manual+0x2c>
    5d12:	83 30       	cpi	r24, 0x03	; 3
    5d14:	31 f4       	brne	.+12     	; 0x5d22 <putChar_Manual+0x22>
    5d16:	fb 01       	movw	r30, r22
    5d18:	31 96       	adiw	r30, 0x01	; 1
    5d1a:	80 e5       	ldi	r24, 0x50	; 80
    5d1c:	db 01       	movw	r26, r22
    5d1e:	8c 93       	st	X, r24
    5d20:	05 c0       	rjmp	.+10     	; 0x5d2c <putChar_Manual+0x2c>
    5d22:	fb 01       	movw	r30, r22
    5d24:	31 96       	adiw	r30, 0x01	; 1
    5d26:	8d e2       	ldi	r24, 0x2D	; 45
    5d28:	db 01       	movw	r26, r22
    5d2a:	8c 93       	st	X, r24
    5d2c:	10 82       	st	Z, r1
    5d2e:	cf 01       	movw	r24, r30
    5d30:	08 95       	ret

00005d32 <lcd_wordout>:
    5d32:	cf 93       	push	r28
    5d34:	c8 2f       	mov	r28, r24
    5d36:	89 2f       	mov	r24, r25
    5d38:	e0 de       	rcall	.-576    	; 0x5afa <lcd_hexout>
    5d3a:	8c 2f       	mov	r24, r28
    5d3c:	de de       	rcall	.-580    	; 0x5afa <lcd_hexout>
    5d3e:	cf 91       	pop	r28
    5d40:	08 95       	ret

00005d42 <lcd_noteOut>:
    5d42:	cf 93       	push	r28
    5d44:	df 93       	push	r29
    5d46:	88 23       	and	r24, r24
    5d48:	dc f1       	brlt	.+118    	; 0x5dc0 <lcd_noteOut+0x7e>
    5d4a:	90 e0       	ldi	r25, 0x00	; 0
    5d4c:	02 c0       	rjmp	.+4      	; 0x5d52 <lcd_noteOut+0x10>
    5d4e:	9f 5f       	subi	r25, 0xFF	; 255
    5d50:	8c 50       	subi	r24, 0x0C	; 12
    5d52:	8c 30       	cpi	r24, 0x0C	; 12
    5d54:	e0 f7       	brcc	.-8      	; 0x5d4e <lcd_noteOut+0xc>
    5d56:	48 2f       	mov	r20, r24
    5d58:	50 e0       	ldi	r21, 0x00	; 0
    5d5a:	4c 30       	cpi	r20, 0x0C	; 12
    5d5c:	51 05       	cpc	r21, r1
    5d5e:	30 f4       	brcc	.+12     	; 0x5d6c <lcd_noteOut+0x2a>
    5d60:	fa 01       	movw	r30, r20
    5d62:	88 27       	eor	r24, r24
    5d64:	ee 55       	subi	r30, 0x5E	; 94
    5d66:	ff 4f       	sbci	r31, 0xFF	; 255
    5d68:	8f 4f       	sbci	r24, 0xFF	; 255
    5d6a:	3c c1       	rjmp	.+632    	; 0x5fe4 <__tablejump2__>
    5d6c:	d3 e2       	ldi	r29, 0x23	; 35
    5d6e:	23 c0       	rjmp	.+70     	; 0x5db6 <lcd_noteOut+0x74>
    5d70:	d3 e2       	ldi	r29, 0x23	; 35
    5d72:	24 e4       	ldi	r18, 0x44	; 68
    5d74:	20 c0       	rjmp	.+64     	; 0x5db6 <lcd_noteOut+0x74>
    5d76:	d3 e2       	ldi	r29, 0x23	; 35
    5d78:	26 e4       	ldi	r18, 0x46	; 70
    5d7a:	1d c0       	rjmp	.+58     	; 0x5db6 <lcd_noteOut+0x74>
    5d7c:	d3 e2       	ldi	r29, 0x23	; 35
    5d7e:	27 e4       	ldi	r18, 0x47	; 71
    5d80:	1a c0       	rjmp	.+52     	; 0x5db6 <lcd_noteOut+0x74>
    5d82:	d3 e2       	ldi	r29, 0x23	; 35
    5d84:	21 e4       	ldi	r18, 0x41	; 65
    5d86:	17 c0       	rjmp	.+46     	; 0x5db6 <lcd_noteOut+0x74>
    5d88:	d5 ea       	ldi	r29, 0xA5	; 165
    5d8a:	23 e4       	ldi	r18, 0x43	; 67
    5d8c:	14 c0       	rjmp	.+40     	; 0x5db6 <lcd_noteOut+0x74>
    5d8e:	d5 ea       	ldi	r29, 0xA5	; 165
    5d90:	24 e4       	ldi	r18, 0x44	; 68
    5d92:	11 c0       	rjmp	.+34     	; 0x5db6 <lcd_noteOut+0x74>
    5d94:	d5 ea       	ldi	r29, 0xA5	; 165
    5d96:	25 e4       	ldi	r18, 0x45	; 69
    5d98:	0e c0       	rjmp	.+28     	; 0x5db6 <lcd_noteOut+0x74>
    5d9a:	d5 ea       	ldi	r29, 0xA5	; 165
    5d9c:	26 e4       	ldi	r18, 0x46	; 70
    5d9e:	0b c0       	rjmp	.+22     	; 0x5db6 <lcd_noteOut+0x74>
    5da0:	d5 ea       	ldi	r29, 0xA5	; 165
    5da2:	27 e4       	ldi	r18, 0x47	; 71
    5da4:	08 c0       	rjmp	.+16     	; 0x5db6 <lcd_noteOut+0x74>
    5da6:	d5 ea       	ldi	r29, 0xA5	; 165
    5da8:	21 e4       	ldi	r18, 0x41	; 65
    5daa:	05 c0       	rjmp	.+10     	; 0x5db6 <lcd_noteOut+0x74>
    5dac:	d5 ea       	ldi	r29, 0xA5	; 165
    5dae:	28 e4       	ldi	r18, 0x48	; 72
    5db0:	02 c0       	rjmp	.+4      	; 0x5db6 <lcd_noteOut+0x74>
    5db2:	d3 e2       	ldi	r29, 0x23	; 35
    5db4:	23 e4       	ldi	r18, 0x43	; 67
    5db6:	99 23       	and	r25, r25
    5db8:	39 f0       	breq	.+14     	; 0x5dc8 <lcd_noteOut+0x86>
    5dba:	cf e2       	ldi	r28, 0x2F	; 47
    5dbc:	c9 0f       	add	r28, r25
    5dbe:	05 c0       	rjmp	.+10     	; 0x5dca <lcd_noteOut+0x88>
    5dc0:	cd e2       	ldi	r28, 0x2D	; 45
    5dc2:	dd e2       	ldi	r29, 0x2D	; 45
    5dc4:	2d e2       	ldi	r18, 0x2D	; 45
    5dc6:	01 c0       	rjmp	.+2      	; 0x5dca <lcd_noteOut+0x88>
    5dc8:	cd e2       	ldi	r28, 0x2D	; 45
    5dca:	82 2f       	mov	r24, r18
    5dcc:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5dd0:	8d 2f       	mov	r24, r29
    5dd2:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5dd6:	8c 2f       	mov	r24, r28
    5dd8:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5ddc:	83 e0       	ldi	r24, 0x03	; 3
    5dde:	df 91       	pop	r29
    5de0:	cf 91       	pop	r28
    5de2:	08 95       	ret

00005de4 <lcd_ChannelOut>:
    5de4:	cf 93       	push	r28
    5de6:	c8 2f       	mov	r28, r24
    5de8:	cf 70       	andi	r28, 0x0F	; 15
    5dea:	81 e0       	ldi	r24, 0x01	; 1
    5dec:	8c 0f       	add	r24, r28
    5dee:	8a 30       	cpi	r24, 0x0A	; 10
    5df0:	28 f0       	brcs	.+10     	; 0x5dfc <lcd_ChannelOut+0x18>
    5df2:	81 e3       	ldi	r24, 0x31	; 49
    5df4:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5df8:	87 ef       	ldi	r24, 0xF7	; 247
    5dfa:	8c 0f       	add	r24, r28
    5dfc:	80 5d       	subi	r24, 0xD0	; 208
    5dfe:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5e02:	cf 91       	pop	r28
    5e04:	08 95       	ret

00005e06 <lcd_ManualOutDec>:
    5e06:	84 30       	cpi	r24, 0x04	; 4
    5e08:	20 f0       	brcs	.+8      	; 0x5e12 <lcd_ManualOutDec+0xc>
    5e0a:	8d e2       	ldi	r24, 0x2D	; 45
    5e0c:	0c 94 04 11 	jmp	0x2208	; 0x2208 <lcd_putc>
    5e10:	08 95       	ret
    5e12:	83 30       	cpi	r24, 0x03	; 3
    5e14:	21 f4       	brne	.+8      	; 0x5e1e <lcd_ManualOutDec+0x18>
    5e16:	80 e5       	ldi	r24, 0x50	; 80
    5e18:	0c 94 04 11 	jmp	0x2208	; 0x2208 <lcd_putc>
    5e1c:	08 95       	ret
    5e1e:	93 e3       	ldi	r25, 0x33	; 51
    5e20:	98 1b       	sub	r25, r24
    5e22:	89 2f       	mov	r24, r25
    5e24:	0c 94 04 11 	jmp	0x2208	; 0x2208 <lcd_putc>
    5e28:	08 95       	ret

00005e2a <lcd_blank>:
    5e2a:	cf 93       	push	r28
    5e2c:	04 c0       	rjmp	.+8      	; 0x5e36 <lcd_blank+0xc>
    5e2e:	80 e2       	ldi	r24, 0x20	; 32
    5e30:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5e34:	8c 2f       	mov	r24, r28
    5e36:	cf ef       	ldi	r28, 0xFF	; 255
    5e38:	c8 0f       	add	r28, r24
    5e3a:	81 11       	cpse	r24, r1
    5e3c:	f8 cf       	rjmp	.-16     	; 0x5e2e <lcd_blank+0x4>
    5e3e:	cf 91       	pop	r28
    5e40:	08 95       	ret

00005e42 <lcd_clrEol>:
    5e42:	cf 93       	push	r28
    5e44:	90 e0       	ldi	r25, 0x00	; 0
    5e46:	04 c0       	rjmp	.+8      	; 0x5e50 <lcd_clrEol+0xe>
    5e48:	80 e2       	ldi	r24, 0x20	; 32
    5e4a:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5e4e:	9c 2f       	mov	r25, r28
    5e50:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <lcd_cursorPos>
    5e54:	84 31       	cpi	r24, 0x14	; 20
    5e56:	51 f0       	breq	.+20     	; 0x5e6c <lcd_clrEol+0x2a>
    5e58:	84 35       	cpi	r24, 0x54	; 84
    5e5a:	41 f0       	breq	.+16     	; 0x5e6c <lcd_clrEol+0x2a>
    5e5c:	88 32       	cpi	r24, 0x28	; 40
    5e5e:	31 f0       	breq	.+12     	; 0x5e6c <lcd_clrEol+0x2a>
    5e60:	88 36       	cpi	r24, 0x68	; 104
    5e62:	21 f0       	breq	.+8      	; 0x5e6c <lcd_clrEol+0x2a>
    5e64:	c1 e0       	ldi	r28, 0x01	; 1
    5e66:	c9 0f       	add	r28, r25
    5e68:	94 31       	cpi	r25, 0x14	; 20
    5e6a:	70 f3       	brcs	.-36     	; 0x5e48 <lcd_clrEol+0x6>
    5e6c:	cf 91       	pop	r28
    5e6e:	08 95       	ret

00005e70 <lcd_cursosblink>:
    5e70:	8d e0       	ldi	r24, 0x0D	; 13
    5e72:	0e 94 88 10 	call	0x2110	; 0x2110 <lcd_write_command>
    5e76:	8f ef       	ldi	r24, 0xFF	; 255
    5e78:	80 93 93 0c 	sts	0x0C93, r24	; 0x800c93 <lcd_cursorIsOn>
    5e7c:	08 95       	ret

00005e7e <lcd_cursoroff>:
    5e7e:	8c e0       	ldi	r24, 0x0C	; 12
    5e80:	0e 94 88 10 	call	0x2110	; 0x2110 <lcd_write_command>
    5e84:	10 92 93 0c 	sts	0x0C93, r1	; 0x800c93 <lcd_cursorIsOn>
    5e88:	08 95       	ret

00005e8a <lcd_waitSymbolOn>:
    5e8a:	cf 93       	push	r28
    5e8c:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
    5e90:	8c e0       	ldi	r24, 0x0C	; 12
    5e92:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    5e96:	81 ea       	ldi	r24, 0xA1	; 161
    5e98:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5e9c:	8c 2f       	mov	r24, r28
    5e9e:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    5ea2:	cf 91       	pop	r28
    5ea4:	08 95       	ret

00005ea6 <lcd_waitSymbolOff>:
    5ea6:	cf 93       	push	r28
    5ea8:	c0 91 56 03 	lds	r28, 0x0356	; 0x800356 <lcd_cursorPos>
    5eac:	8c e0       	ldi	r24, 0x0C	; 12
    5eae:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    5eb2:	80 e2       	ldi	r24, 0x20	; 32
    5eb4:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>
    5eb8:	8c 2f       	mov	r24, r28
    5eba:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
    5ebe:	cf 91       	pop	r28
    5ec0:	08 95       	ret

00005ec2 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    5ec2:	84 30       	cpi	r24, 0x04	; 4
    5ec4:	28 f0       	brcs	.+10     	; 0x5ed0 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    5ec6:	20 e0       	ldi	r18, 0x00	; 0
    5ec8:	0d c0       	rjmp	.+26     	; 0x5ee4 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    5eca:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    5ecc:	fa 01       	movw	r30, r20
    5ece:	02 c0       	rjmp	.+4      	; 0x5ed4 <keylabel_set+0x12>
    5ed0:	fb 01       	movw	r30, r22
    5ed2:	20 e0       	ldi	r18, 0x00	; 0
    5ed4:	af 01       	movw	r20, r30
    5ed6:	4f 5f       	subi	r20, 0xFF	; 255
    5ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    5eda:	94 91       	lpm	r25, Z
    5edc:	99 23       	and	r25, r25
    5ede:	11 f0       	breq	.+4      	; 0x5ee4 <keylabel_set+0x22>
    5ee0:	25 30       	cpi	r18, 0x05	; 5
    5ee2:	98 f3       	brcs	.-26     	; 0x5eca <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    5ee4:	90 e0       	ldi	r25, 0x00	; 0
    5ee6:	dc 01       	movw	r26, r24
    5ee8:	aa 0f       	add	r26, r26
    5eea:	bb 1f       	adc	r27, r27
    5eec:	aa 0f       	add	r26, r26
    5eee:	bb 1f       	adc	r27, r27
    5ef0:	8a 0f       	add	r24, r26
    5ef2:	9b 1f       	adc	r25, r27
    5ef4:	dc 01       	movw	r26, r24
    5ef6:	a1 5f       	subi	r26, 0xF1	; 241
    5ef8:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    5efa:	45 e0       	ldi	r20, 0x05	; 5
    5efc:	50 e0       	ldi	r21, 0x00	; 0
    5efe:	42 1b       	sub	r20, r18
    5f00:	51 09       	sbc	r21, r1
    5f02:	ca 01       	movw	r24, r20
    5f04:	99 23       	and	r25, r25
    5f06:	0c f4       	brge	.+2      	; 0x5f0a <keylabel_set+0x48>
    5f08:	01 96       	adiw	r24, 0x01	; 1
    5f0a:	95 95       	asr	r25
    5f0c:	87 95       	ror	r24
    5f0e:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    5f10:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    5f12:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    5f14:	0e c0       	rjmp	.+28     	; 0x5f32 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    5f16:	93 17       	cp	r25, r19
    5f18:	10 f0       	brcs	.+4      	; 0x5f1e <keylabel_set+0x5c>
    5f1a:	98 17       	cp	r25, r24
    5f1c:	18 f0       	brcs	.+6      	; 0x5f24 <keylabel_set+0x62>
			*charBufPtr = ' ';
    5f1e:	20 e2       	ldi	r18, 0x20	; 32
    5f20:	2c 93       	st	X, r18
    5f22:	05 c0       	rjmp	.+10     	; 0x5f2e <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    5f24:	fb 01       	movw	r30, r22
    5f26:	24 91       	lpm	r18, Z
    5f28:	2c 93       	st	X, r18
    5f2a:	6f 5f       	subi	r22, 0xFF	; 255
    5f2c:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    5f2e:	11 96       	adiw	r26, 0x01	; 1
		i++;
    5f30:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    5f32:	95 30       	cpi	r25, 0x05	; 5
    5f34:	80 f3       	brcs	.-32     	; 0x5f16 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    5f36:	08 95       	ret

00005f38 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	fc 01       	movw	r30, r24
    5f3c:	ee 0f       	add	r30, r30
    5f3e:	ff 1f       	adc	r31, r31
    5f40:	ee 0f       	add	r30, r30
    5f42:	ff 1f       	adc	r31, r31
    5f44:	8e 0f       	add	r24, r30
    5f46:	9f 1f       	adc	r25, r31
    5f48:	fc 01       	movw	r30, r24
    5f4a:	e1 5f       	subi	r30, 0xF1	; 241
    5f4c:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5f4e:	80 e0       	ldi	r24, 0x00	; 0
    5f50:	04 c0       	rjmp	.+8      	; 0x5f5a <keylabel_clr+0x22>
		*charPtr++ = ' ';
    5f52:	90 e2       	ldi	r25, 0x20	; 32
    5f54:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5f56:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    5f58:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5f5a:	85 30       	cpi	r24, 0x05	; 5
    5f5c:	d0 f3       	brcs	.-12     	; 0x5f52 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    5f5e:	08 95       	ret

00005f60 <keylabel_toLCD>:

void keylabel_toLCD(){
    5f60:	0f 93       	push	r16
    5f62:	1f 93       	push	r17
    5f64:	cf 93       	push	r28
    5f66:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    5f68:	d0 91 56 03 	lds	r29, 0x0356	; 0x800356 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    5f6c:	84 e5       	ldi	r24, 0x54	; 84
    5f6e:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    5f72:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    5f74:	ef e0       	ldi	r30, 0x0F	; 15
    5f76:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    5f78:	08 c0       	rjmp	.+16     	; 0x5f8a <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    5f7a:	8f 01       	movw	r16, r30
    5f7c:	0f 5f       	subi	r16, 0xFF	; 255
    5f7e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f80:	80 81       	ld	r24, Z
    5f82:	0e 94 04 11 	call	0x2208	; 0x2208 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    5f86:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    5f88:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    5f8a:	c4 31       	cpi	r28, 0x14	; 20
    5f8c:	b0 f3       	brcs	.-20     	; 0x5f7a <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    5f8e:	8d 2f       	mov	r24, r29
    5f90:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <lcd_goto>
}
    5f94:	df 91       	pop	r29
    5f96:	cf 91       	pop	r28
    5f98:	1f 91       	pop	r17
    5f9a:	0f 91       	pop	r16
    5f9c:	08 95       	ret

00005f9e <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	fc 01       	movw	r30, r24
    5fa2:	ee 0f       	add	r30, r30
    5fa4:	ff 1f       	adc	r31, r31
    5fa6:	ee 0f       	add	r30, r30
    5fa8:	ff 1f       	adc	r31, r31
    5faa:	8e 0f       	add	r24, r30
    5fac:	9f 1f       	adc	r25, r31
    5fae:	fc 01       	movw	r30, r24
    5fb0:	e1 5f       	subi	r30, 0xF1	; 241
    5fb2:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    5fb6:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5fb8:	12 c0       	rjmp	.+36     	; 0x5fde <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    5fba:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    5fbc:	61 11       	cpse	r22, r1
    5fbe:	06 c0       	rjmp	.+12     	; 0x5fcc <keylabel_statcheck+0x2e>
    5fc0:	2a 30       	cpi	r18, 0x0A	; 10
    5fc2:	21 f4       	brne	.+8      	; 0x5fcc <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    5fc4:	80 e8       	ldi	r24, 0x80	; 128
    5fc6:	80 83       	st	Z, r24
			result = 0xFF;
    5fc8:	8f ef       	ldi	r24, 0xFF	; 255
    5fca:	07 c0       	rjmp	.+14     	; 0x5fda <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    5fcc:	66 23       	and	r22, r22
    5fce:	29 f0       	breq	.+10     	; 0x5fda <keylabel_statcheck+0x3c>
    5fd0:	20 38       	cpi	r18, 0x80	; 128
    5fd2:	19 f4       	brne	.+6      	; 0x5fda <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    5fd4:	8a e0       	ldi	r24, 0x0A	; 10
    5fd6:	80 83       	st	Z, r24
			result = 0xFF;
    5fd8:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    5fda:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    5fdc:	9f 5f       	subi	r25, 0xFF	; 255
    5fde:	95 30       	cpi	r25, 0x05	; 5
    5fe0:	60 f3       	brcs	.-40     	; 0x5fba <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    5fe2:	08 95       	ret

00005fe4 <__tablejump2__>:
    5fe4:	ee 0f       	add	r30, r30
    5fe6:	ff 1f       	adc	r31, r31
    5fe8:	88 1f       	adc	r24, r24
    5fea:	8b bf       	out	0x3b, r24	; 59
    5fec:	07 90       	elpm	r0, Z+
    5fee:	f6 91       	elpm	r31, Z
    5ff0:	e0 2d       	mov	r30, r0
    5ff2:	19 94       	eijmp

00005ff4 <__umulhisi3>:
    5ff4:	a2 9f       	mul	r26, r18
    5ff6:	b0 01       	movw	r22, r0
    5ff8:	b3 9f       	mul	r27, r19
    5ffa:	c0 01       	movw	r24, r0
    5ffc:	a3 9f       	mul	r26, r19
    5ffe:	70 0d       	add	r23, r0
    6000:	81 1d       	adc	r24, r1
    6002:	11 24       	eor	r1, r1
    6004:	91 1d       	adc	r25, r1
    6006:	b2 9f       	mul	r27, r18
    6008:	70 0d       	add	r23, r0
    600a:	81 1d       	adc	r24, r1
    600c:	11 24       	eor	r1, r1
    600e:	91 1d       	adc	r25, r1
    6010:	08 95       	ret

00006012 <eeprom_read_block>:
    6012:	dc 01       	movw	r26, r24
    6014:	cb 01       	movw	r24, r22

00006016 <eeprom_read_blraw>:
    6016:	fc 01       	movw	r30, r24
    6018:	f9 99       	sbic	0x1f, 1	; 31
    601a:	fe cf       	rjmp	.-4      	; 0x6018 <eeprom_read_blraw+0x2>
    601c:	06 c0       	rjmp	.+12     	; 0x602a <eeprom_read_blraw+0x14>
    601e:	f2 bd       	out	0x22, r31	; 34
    6020:	e1 bd       	out	0x21, r30	; 33
    6022:	f8 9a       	sbi	0x1f, 0	; 31
    6024:	31 96       	adiw	r30, 0x01	; 1
    6026:	00 b4       	in	r0, 0x20	; 32
    6028:	0d 92       	st	X+, r0
    602a:	41 50       	subi	r20, 0x01	; 1
    602c:	50 40       	sbci	r21, 0x00	; 0
    602e:	b8 f7       	brcc	.-18     	; 0x601e <eeprom_read_blraw+0x8>
    6030:	08 95       	ret

00006032 <eeprom_read_byte>:
    6032:	f9 99       	sbic	0x1f, 1	; 31
    6034:	fe cf       	rjmp	.-4      	; 0x6032 <eeprom_read_byte>
    6036:	92 bd       	out	0x22, r25	; 34
    6038:	81 bd       	out	0x21, r24	; 33
    603a:	f8 9a       	sbi	0x1f, 0	; 31
    603c:	99 27       	eor	r25, r25
    603e:	80 b5       	in	r24, 0x20	; 32
    6040:	08 95       	ret

00006042 <eeprom_read_word>:
    6042:	a8 e1       	ldi	r26, 0x18	; 24
    6044:	b0 e0       	ldi	r27, 0x00	; 0
    6046:	42 e0       	ldi	r20, 0x02	; 2
    6048:	50 e0       	ldi	r21, 0x00	; 0
    604a:	e5 cf       	rjmp	.-54     	; 0x6016 <eeprom_read_blraw>

0000604c <eeprom_update_block>:
    604c:	dc 01       	movw	r26, r24
    604e:	a4 0f       	add	r26, r20
    6050:	b5 1f       	adc	r27, r21
    6052:	41 50       	subi	r20, 0x01	; 1
    6054:	50 40       	sbci	r21, 0x00	; 0
    6056:	40 f0       	brcs	.+16     	; 0x6068 <eeprom_update_block+0x1c>
    6058:	cb 01       	movw	r24, r22
    605a:	84 0f       	add	r24, r20
    605c:	95 1f       	adc	r25, r21
    605e:	2e 91       	ld	r18, -X
    6060:	05 d0       	rcall	.+10     	; 0x606c <eeprom_update_r18>
    6062:	41 50       	subi	r20, 0x01	; 1
    6064:	50 40       	sbci	r21, 0x00	; 0
    6066:	d8 f7       	brcc	.-10     	; 0x605e <eeprom_update_block+0x12>
    6068:	08 95       	ret

0000606a <eeprom_update_byte>:
    606a:	26 2f       	mov	r18, r22

0000606c <eeprom_update_r18>:
    606c:	f9 99       	sbic	0x1f, 1	; 31
    606e:	fe cf       	rjmp	.-4      	; 0x606c <eeprom_update_r18>
    6070:	92 bd       	out	0x22, r25	; 34
    6072:	81 bd       	out	0x21, r24	; 33
    6074:	f8 9a       	sbi	0x1f, 0	; 31
    6076:	01 97       	sbiw	r24, 0x01	; 1
    6078:	00 b4       	in	r0, 0x20	; 32
    607a:	02 16       	cp	r0, r18
    607c:	39 f0       	breq	.+14     	; 0x608c <eeprom_update_r18+0x20>
    607e:	1f ba       	out	0x1f, r1	; 31
    6080:	20 bd       	out	0x20, r18	; 32
    6082:	0f b6       	in	r0, 0x3f	; 63
    6084:	f8 94       	cli
    6086:	fa 9a       	sbi	0x1f, 2	; 31
    6088:	f9 9a       	sbi	0x1f, 1	; 31
    608a:	0f be       	out	0x3f, r0	; 63
    608c:	08 95       	ret

0000608e <eeprom_update_word>:
    608e:	01 96       	adiw	r24, 0x01	; 1
    6090:	27 2f       	mov	r18, r23
    6092:	ec df       	rcall	.-40     	; 0x606c <eeprom_update_r18>
    6094:	ea cf       	rjmp	.-44     	; 0x606a <eeprom_update_byte>

00006096 <_exit>:
    6096:	f8 94       	cli

00006098 <__stop_program>:
    6098:	ff cf       	rjmp	.-2      	; 0x6098 <__stop_program>
