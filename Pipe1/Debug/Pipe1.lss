
Pipe1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  000073be  00007472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000073be  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000161d  00800208  00800208  0000747a  2**0
                  ALLOC
  3 .eeprom       00001000  00810000  00810000  0000747a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000847a  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000084ac  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000ad0  00000000  00000000  000084f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000e5b3  00000000  00000000  00008fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002626  00000000  00000000  00017573  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000086e3  00000000  00000000  00019b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001ac8  00000000  00000000  0002227c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000327c  00000000  00000000  00023d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000922b  00000000  00000000  00026fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e58  00000000  00000000  000301eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <__ctors_end>
       4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
       8:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
       c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      10:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      14:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      18:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      1c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      20:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      24:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      28:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      2c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      30:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      34:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      38:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      3c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      40:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      44:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      48:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      4c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      50:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      54:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__vector_21>
      58:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      5c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      60:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      64:	0c 94 d0 34 	jmp	0x69a0	; 0x69a0 <__vector_25>
      68:	0c 94 16 35 	jmp	0x6a2c	; 0x6a2c <__vector_26>
      6c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      70:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      74:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      78:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      7c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      80:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      84:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      88:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      8c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      90:	0c 94 0d 33 	jmp	0x661a	; 0x661a <__vector_36>
      94:	0c 94 4d 33 	jmp	0x669a	; 0x669a <__vector_37>
      98:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      9c:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      a0:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      a4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      a8:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      ac:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      b0:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      b4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      b8:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      bc:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      c0:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      c4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      c8:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      cc:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      d0:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      d4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      d8:	0c 94 d6 35 	jmp	0x6bac	; 0x6bac <__vector_54>
      dc:	0c 94 2e 36 	jmp	0x6c5c	; 0x6c5c <__vector_55>
      e0:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__bad_interrupt>
      e4:	4c 1d       	adc	r20, r12
      e6:	57 1d       	adc	r21, r7
      e8:	63 1d       	adc	r22, r3
      ea:	7f 1d       	adc	r23, r15
      ec:	9c 1d       	adc	r25, r12
      ee:	bd 1d       	adc	r27, r13
      f0:	c8 1d       	adc	r28, r8
      f2:	d3 1d       	adc	r29, r3
      f4:	e8 1d       	adc	r30, r8
      f6:	fe 1d       	adc	r31, r14
      f8:	06 1e       	adc	r0, r22
      fa:	14 1e       	adc	r1, r20
      fc:	e8 1d       	adc	r30, r8
      fe:	41 1e       	adc	r4, r17
     100:	51 1e       	adc	r5, r17
     102:	75 1e       	adc	r7, r21
     104:	c7 1e       	adc	r12, r23
     106:	e0 1e       	adc	r14, r16
     108:	f5 1e       	adc	r15, r21
     10a:	0e 1f       	adc	r16, r30
     10c:	16 1f       	adc	r17, r22
     10e:	3b 1f       	adc	r19, r27
     110:	3b 1f       	adc	r19, r27
     112:	54 1f       	adc	r21, r20
     114:	61 1f       	adc	r22, r17
     116:	50 1f       	adc	r21, r16
     118:	bc 1f       	adc	r27, r28
     11a:	c4 1f       	adc	r28, r20
     11c:	0f 20       	and	r0, r15
     11e:	71 20       	and	r7, r1
     120:	9b 20       	and	r9, r11
     122:	c7 20       	and	r12, r7
     124:	f6 20       	and	r15, r6
     126:	fe 20       	and	r15, r14
     128:	04 21       	and	r16, r4
     12a:	bc 1f       	adc	r27, r28
     12c:	0c 21       	and	r16, r12
     12e:	20 21       	and	r18, r0
     130:	04 21       	and	r16, r4
     132:	5e 21       	and	r21, r14
     134:	6b 21       	and	r22, r11
     136:	77 21       	and	r23, r7
     138:	8c 21       	and	r24, r12
     13a:	a5 21       	and	r26, r5
     13c:	c8 21       	and	r28, r8
     13e:	d3 21       	and	r29, r3
     140:	d9 21       	and	r29, r9
     142:	de 21       	and	r29, r14
     144:	f1 21       	and	r31, r1
     146:	12 22       	and	r1, r18
     148:	25 22       	and	r2, r21
     14a:	de 21       	and	r29, r14
     14c:	45 38       	cpi	r20, 0x85	; 133
     14e:	5a 38       	cpi	r21, 0x8A	; 138
     150:	48 38       	cpi	r20, 0x88	; 136
     152:	39 38       	cpi	r19, 0x89	; 137
     154:	4b 38       	cpi	r20, 0x8B	; 139
     156:	4e 38       	cpi	r20, 0x8E	; 142
     158:	3c 38       	cpi	r19, 0x8C	; 140
     15a:	51 38       	cpi	r21, 0x81	; 129
     15c:	3f 38       	cpi	r19, 0x8F	; 143
     15e:	54 38       	cpi	r21, 0x84	; 132
     160:	42 38       	cpi	r20, 0x82	; 130
     162:	57 38       	cpi	r21, 0x87	; 135

00000164 <__trampolines_end>:
     164:	4c 6f       	ori	r20, 0xFC	; 252
     166:	67 3a       	cpi	r22, 0xA7	; 167
     168:	20 00       	.word	0x0020	; ????

0000016a <ErrorText>:
     16a:	00 00 49 6e 69 74 69 61 6c 69 73 61 74 69 6f 6e     ..Initialisation
     17a:	00 00 01 00 45 45 3a 4d 6f 64 75 6c 65 00 00 00     ....EE:Module...
     18a:	00 00 00 00 01 01 45 45 3a 4d 69 64 69 2d 49 6e     ......EE:Midi-In
     19a:	00 00 00 00 00 00 01 02 45 45 3a 4d 69 64 69 2d     ........EE:Midi-
     1aa:	4f 75 74 00 00 00 00 00 01 03 45 45 3a 4d 61 6e     Out.......EE:Man
     1ba:	2d 4d 6f 64 75 6c 65 00 00 00 01 04 45 45 3a 55     -Module.....EE:U
     1ca:	53 42 00 00 00 00 00 00 00 00 00 00 01 05 45 45     SB............EE
     1da:	3a 52 65 67 69 73 74 65 72 00 00 00 00 00 01 06     :Register.......
     1ea:	45 45 3a 50 72 6f 67 72 61 6d 73 00 00 00 00 00     EE:Programs.....
     1fa:	01 07 45 45 3a 53 6f 66 74 6b 65 79 73 00 00 00     ..EE:Softkeys...
     20a:	00 00 01 08 45 45 3a 4d 69 64 69 54 68 72 75 00     ....EE:MidiThru.
     21a:	00 00 00 00 02 00 4d 6f 64 3a 46 61 69 6c 00 00     ......Mod:Fail..
     22a:	00 00 00 00 00 00 02 01 4d 6f 64 3a 55 6e 6b 6e     ........Mod:Unkn
     23a:	6f 77 49 6e 70 00 00 00 03 00 4f 56 46 4c 3a 4d     owInp.....OVFL:M
     24a:	69 64 69 49 6e 00 00 00 00 00 03 01 4f 56 46 4c     idiIn.......OVFL
     25a:	3a 4d 69 64 69 4f 75 74 00 00 00 00 04 00 4f 56     :MidiOut......OV
     26a:	46 4c 3a 50 69 70 65 4d 73 67 00 00 00 00 05 00     FL:PipeMsg......
     27a:	50 77 72 3a 4f 75 70 74 75 74 4f 6e 00 00 00 00     Pwr:OuptutOn....

0000028a <panicString>:
     28a:	54 ef 6e 65 20 61 75 73 00                          T.ne aus.

00000293 <releaseKeyString>:
     293:	54 61 73 74 65 6e 2f 52 65 67 2e 20 6c ef 73 65     Tasten/Reg. l.se
     2a3:	6e 00                                               n.

000002a5 <prog_name>:
     2a5:	4d 49 44 49 2d 49 6e 74 65 72 66 61 63 65 00        MIDI-Interface.

000002b4 <usbHWmidichanSW>:
     2b4:	64 69 72 65 63 74 20 4d 49 44 49 2d 4f 75 74 28     direct MIDI-Out(
     2c4:	69 6e 74 29 20 66 6f 72 20 6d 61 6e 75 61 6c 3a     int) for manual:
     2d4:	20 00                                                .

000002d6 <usbHWBits>:
     2d6:	2c 20 42 69 74 73 3a 00                             , Bits:.

000002de <usbHWmodule>:
     2de:	4d 6f 64 75 6c 65 3a 00                             Module:.

000002e6 <usbHWempty>:
     2e6:	65 6d 70 74 79 00                                   empty.

000002ec <usbHWRegister>:
     2ec:	52 65 67 69 73 74 65 72 3a 0d 0a 00                 Register:...

000002f8 <usbHWRange>:
     2f8:	52 61 6e 67 65 20 00                                Range .

000002ff <usbHWManual>:
     2ff:	4d 61 6e 75 61 6c 3a 20 00                          Manual: .

00000308 <usbHWmodulCheck>:
     308:	4d 6f 64 75 6c 65 73 20 63 68 65 63 6b 65 64 3a     Modules checked:
     318:	20 00                                                .

0000031a <usbHWmodulInst>:
     31a:	4d 6f 64 75 6c 65 73 20 61 73 73 69 67 6e 65 64     Modules assigned
     32a:	3a 20 00                                            : .

0000032d <usbHWtitel>:
     32d:	48 61 72 64 77 61 72 65 20 43 6f 6e 66 69 67 75     Hardware Configu
     33d:	72 61 74 69 6f 6e 0d 0a 00                          ration...

00000346 <HelloMsg>:
     346:	0d 0a 4d 49 44 49 2d 4f 72 67 61 6e 2d 49 6e 74     ..MIDI-Organ-Int
     356:	65 72 66 61 63 65 0d 0a 00                          erface...

0000035f <usbLog>:
     35f:	4c 6f 67 0d 0a 00                                   Log...

00000365 <usbEmpty>:
     365:	65 6d 70 74 79 0d 0a 00                             empty...

0000036d <msg_programming1>:
     36d:	73 61 76 65 2e 2e 2e 00                             save....

00000375 <logNone>:
     375:	3c 6e 6f 6e 65 3e 00                                <none>.

0000037c <stringNotAssigen>:
     37c:	75 6e 61 73 73 69 67 6e 65 64 00                    unassigned.

00000387 <menuMessageE>:
     387:	45 3a 00                                            E:.

0000038a <menuMessageOK>:
     38a:	6f 6b 20 00                                         ok .

0000038e <menuMessageAbort>:
     38e:	61 62 6f 72 74 00                                   abort.

00000394 <menuMessageMIDIpanic>:
     394:	4d 49 44 49 20 4e 6f 74 65 6e 20 61 75 73 00        MIDI Noten aus.

000003a3 <messageRegisterMan>:
     3a3:	2b 00                                               +.

000003a5 <messageLoaded>:
     3a5:	20 52 65 67 2e 67 65 73 65 74 7a 74 00               Reg.gesetzt.

000003b2 <messageSaved>:
     3b2:	20 52 65 67 2e 69 6e 20 4b 6f 6d 62 2e 67 65 73      Reg.in Komb.ges
     3c2:	70 2e 00                                            p..

000003c5 <MenuMIDIOutText>:
     3c5:	4f 75 74 3a 00                                      Out:.

000003ca <MenuMIDIInText>:
     3ca:	49 6e 3a 00                                         In:.

000003ce <initMenuText>:
     3ce:	4d 65 6e f5 00 00 00 00 00 00                       Men.......

000003d8 <nibbleInfo>:
	...
     3e0:	00 02 00 01 00 00 00 00 00 00 01 03 00 00 00 00     ................
     3f0:	00 00 00 02 00 02 00 00 00 00 00 00 03 01 03 04     ................
     400:	00 00 00 00 00 03 00 01 02 00 00 00 00 00 01 00     ................
     410:	00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00     ................
     420:	01 00 00 00 00 00 00 00 00 08 00 01 02 03 04 05     ................
     430:	06 07 08 00 01 02 03 04 05 06 07 02 00 01 00 00     ................
     440:	00 00 00 00 02 00 01 00 00 00 00 00 00 08 00 01     ................
     450:	02 03 04 05 06 07 00 00 00 00 00 00 00 00 00        ...............

0000045f <menu_selFunc>:
     45f:	81 10 3c 6e 6f 6e 65 3e 00 00 00 00 00 00 e9 06     ..<none>........
     46f:	00 00 00 00 01 10 4d 65 6e 75 00 00 00 00 00 00     ......Menu......
     47f:	f3 06 df 06 00 00 00 00 01 10 53 74 69 6d 6d 65     ..........Stimme
     48f:	6e 00 00 00 2f 0c d5 06 00 00 00 00 01 10 4b 6f     n.../.........Ko
     49f:	70 70 65 6c 32 3c 33 00 00 00 b7 06 ab 1c 00 00     ppel2<3.........
     4af:	01 10 4b 6f 70 70 65 6c 31 3c 33 00 00 00 ad 06     ..Koppel1<3.....
     4bf:	ae 1c 00 00 01 10 4b 6f 70 70 65 6c 50 3c 33 00     ......KoppelP<3.
     4cf:	00 00 a3 06 b1 1c 00 00 01 10 4b 6f 70 70 65 6c     ..........Koppel
     4df:	31 3c 32 00 00 00 99 06 b4 1c 00 00 01 10 4b 6f     1<2...........Ko
     4ef:	70 70 65 6c 50 3c 32 00 00 00 8f 06 b7 1c 00 00     ppelP<2.........
     4ff:	01 10 4b 6f 70 70 65 6c 50 3c 31 00 00 00 85 06     ..KoppelP<1.....
     50f:	ba 1c 00 00 01 10 4b 6f 70 70 65 6c 33 3c 32 00     ......Koppel3<2.
     51f:	00 00 7b 06 bd 1c 00 00 01 10 4b 6f 70 70 65 6c     ..{.......Koppel
     52f:	33 3c 31 00 00 00 71 06 c0 1c 00 00 01 10 4b 6f     3<1...q.......Ko
     53f:	70 70 65 6c 33 3c 50 00 00 00 67 06 c3 1c 00 00     ppel3<P...g.....
     54f:	01 10 4b 6f 70 70 65 6c 32 3c 31 00 00 00 5d 06     ..Koppel2<1...].
     55f:	c6 1c 00 00 01 10 4b 6f 70 70 65 6c 32 3c 50 00     ......Koppel2<P.
     56f:	00 00 53 06 c9 1c 00 00 01 10 4b 6f 70 70 65 6c     ..S.......Koppel
     57f:	31 3c 50 00 00 00 49 06 cc 1c 00 00 01 10 4b 6f     1<P...I.......Ko
     58f:	6d 62 69 6e 20 31 41 00 00 00 3f 06 12 29 00 00     mbin 1A...?..)..
     59f:	01 10 4b 6f 6d 62 69 6e 20 32 41 00 00 00 35 06     ..Kombin 2A...5.
     5af:	15 29 00 00 01 10 4b 6f 6d 62 69 6e 20 33 41 00     .)....Kombin 3A.
     5bf:	00 00 2b 06 18 29 00 00 01 10 4b 6f 6d 62 69 6e     ..+..)....Kombin
     5cf:	20 34 41 00 00 00 21 06 1b 29 00 00 01 10 52 65      4A...!..)....Re
     5df:	67 2e 61 75 73 00 00 00 00 00 17 06 b2 18 00 00     g.aus...........
     5ef:	01 10 4d 49 44 49 20 4f 66 66 00 00 00 00 c1 06     ..MIDI Off......
     5ff:	1b 27 00 00 c1 10 53 65 74 75 70 00 00 00 00 00     .'....Setup.....
     60f:	1f 0d cb 06 00 00 00 00                             ........

00000617 <shortKeyTextRegOff>:
     617:	52 65 67 09 00 00 00 00 00 00                       Reg.......

00000621 <shortKeyTextK4A>:
     621:	4b 62 34 41 80 00 00 00 00 00                       Kb4A......

0000062b <shortKeyTextK3A>:
     62b:	4b 62 33 41 80 00 00 00 00 00                       Kb3A......

00000635 <shortKeyTextK2A>:
     635:	4b 62 32 41 80 00 00 00 00 00                       Kb2A......

0000063f <shortKeyTextK1A>:
     63f:	4b 62 31 41 80 00 00 00 00 00                       Kb1A......

00000649 <shortKeyTextCpl1P>:
     649:	31 3c 50 80 00 00 00 00 00 00                       1<P.......

00000653 <shortKeyTextCpl2P>:
     653:	32 3c 50 80 00 00 00 00 00 00                       2<P.......

0000065d <shortKeyTextCpl21>:
     65d:	32 3c 31 80 00 00 00 00 00 00                       2<1.......

00000667 <shortKeyTextCpl3P>:
     667:	33 3c 50 80 00 00 00 00 00 00                       3<P.......

00000671 <shortKeyTextCpl31>:
     671:	33 3c 31 80 00 00 00 00 00 00                       3<1.......

0000067b <shortKeyTextCpl32>:
     67b:	33 3c 32 80 00 00 00 00 00 00                       3<2.......

00000685 <shortKeyTextCplP1>:
     685:	50 3c 31 80 00 00 00 00 00 00                       P<1.......

0000068f <shortKeyTextCplP2>:
     68f:	50 3c 32 80 00 00 00 00 00 00                       P<2.......

00000699 <shortKeyTextCpl12>:
     699:	31 3c 32 80 00 00 00 00 00 00                       1<2.......

000006a3 <shortKeyTextCplP3>:
     6a3:	50 3c 33 80 00 00 00 00 00 00                       P<3.......

000006ad <shortKeyTextCpl13>:
     6ad:	31 3c 33 80 00 00 00 00 00 00                       1<3.......

000006b7 <shortKeyTextCpl23>:
     6b7:	32 3c 33 80 00 00 00 00 00 00                       2<3.......

000006c1 <shortKeyTextMIDIoff>:
     6c1:	4d 4f 66 66 00 00 00 00 00 00                       MOff......

000006cb <shortKeyTextSetup>:
     6cb:	53 65 74 75 00 00 00 00 00 00                       Setu......

000006d5 <shortKeyTextStim>:
     6d5:	53 74 69 6d 00 00 00 00 00 00                       Stim......

000006df <shortKeyTextMenu>:
     6df:	4d 65 6e 75 00 00 00 00 00 00                       Menu......

000006e9 <shortKeyTextNone>:
	...

000006f3 <menu_main>:
     6f3:	81 00 4d 61 6e 75 61 6c 00 00 00 00 6b 07 00 00     ..Manual....k...
     703:	00 00 00 00 01 00 52 65 67 69 73 74 65 72 00 00     ......Register..
     713:	93 07 00 00 67 1c 00 00 01 00 4d 49 44 49 00 00     ....g.....MIDI..
     723:	00 00 00 00 5f 09 00 00 00 00 00 00 01 00 54 61     ...._.........Ta
     733:	73 74 65 6e 00 00 00 00 df 0b 00 00 00 00 d5 18     sten............
     743:	01 00 53 74 61 74 75 73 00 00 00 00 07 11 00 00     ..Status........
     753:	00 00 00 00 c1 00 53 65 74 75 70 00 00 00 00 00     ......Setup.....
     763:	1f 0d 00 00 00 00 00 00                             ........

0000076b <menu_manual>:
     76b:	81 00 4b 6f 70 70 65 6c 00 00 00 00 6f 08 00 00     ..Koppel....o...
     77b:	00 00 00 00 c1 00 53 74 69 6d 6d 65 6e 00 00 00     ......Stimmen...
     78b:	2f 0c 00 00 00 00 00 00                             /.......

00000793 <menu_register>:
     793:	8c 00 4b 6f 6d 62 2e 6c 61 64 2e 00 00 00 a8 05     ..Komb.lad......
     7a3:	00 00 74 1c 0c 00 4b 6f 6d 62 2e 73 70 2e 00 00     ..t...Komb.sp...
     7b3:	00 00 a8 05 00 00 ca 18 01 00 61 75 73 00 00 00     ..........aus...
	...
     7cb:	6e 1c 00 00 0e 00 52 65 67 2e 31 2d 38 00 00 00     n.....Reg.1-8...
     7db:	00 00 6d 05 00 00 8a 18 0e 00 52 65 67 2e 39 2d     ..m.......Reg.9-
     7eb:	31 36 00 00 00 00 6e 05 00 00 8a 18 0e 00 52 65     16....n.......Re
     7fb:	67 2e 31 37 2d 32 34 00 00 00 6f 05 00 00 8a 18     g.17-24...o.....
     80b:	0e 00 52 65 67 2e 32 35 2d 33 32 00 00 00 70 05     ..Reg.25-32...p.
     81b:	00 00 8a 18 0e 00 52 65 67 2e 33 33 2d 34 30 00     ......Reg.33-40.
     82b:	00 00 71 05 00 00 8a 18 0e 00 52 65 67 2e 34 31     ..q.......Reg.41
     83b:	2d 34 38 00 00 00 72 05 00 00 8a 18 0e 00 52 65     -48...r.......Re
     84b:	67 2e 34 39 2d 35 34 00 00 00 73 05 00 00 8a 18     g.49-54...s.....
     85b:	ca 00 52 65 67 2e 35 35 2d 36 34 00 00 00 74 05     ..Reg.55-64...t.
     86b:	00 00 8a 18                                         ....

0000086f <menu_coupler>:
     86f:	89 00 32 3c 33 00 00 00 00 00 00 00 00 00 0f 08     ..2<3...........
     87f:	00 00 b7 18 09 00 31 3c 33 00 00 00 00 00 00 00     ......1<3.......
     88f:	00 00 10 08 00 00 b7 18 09 00 31 3c 32 00 00 00     ..........1<2...
     89f:	00 00 00 00 00 00 11 08 00 00 b7 18 09 00 50 3c     ..............P<
     8af:	33 00 00 00 00 00 00 00 00 00 12 08 00 00 b7 18     3...............
     8bf:	09 00 50 3c 32 00 00 00 00 00 00 00 00 00 13 08     ..P<2...........
     8cf:	00 00 b7 18 09 00 50 3c 31 00 00 00 00 00 00 00     ......P<1.......
     8df:	00 00 14 08 00 00 b7 18 09 00 33 3c 32 00 00 00     ..........3<2...
     8ef:	00 00 00 00 00 00 15 08 00 00 b7 18 09 00 33 3c     ..............3<
     8ff:	31 00 00 00 00 00 00 00 00 00 16 08 00 00 b7 18     1...............
     90f:	09 00 33 3c 50 00 00 00 00 00 00 00 00 00 17 08     ..3<P...........
     91f:	00 00 b7 18 09 00 32 3c 31 00 00 00 00 00 00 00     ......2<1.......
     92f:	00 00 18 08 00 00 b7 18 09 00 32 3c 50 00 00 00     ..........2<P...
     93f:	00 00 00 00 00 00 19 08 00 00 b7 18 c9 00 31 3c     ..............1<
     94f:	50 00 00 00 00 00 00 00 00 00 1a 08 00 00 b7 18     P...............

0000095f <menu_midi>:
     95f:	81 00 4e 6f 74 65 73 4f 66 66 00 00 00 00 00 00     ..NotesOff......
     96f:	1b 27 00 00 01 00 4d 49 44 49 69 6e 00 00 00 00     .'....MIDIin....
     97f:	ff 09 00 00 00 00 43 1a 01 00 4d 49 44 49 6f 75     ......C...MIDIou
     98f:	74 00 00 00 7f 0c 00 00 00 00 3f 1a 03 10 54 68     t.........?...Th
     99f:	72 75 2d 49 6e 00 00 00 00 00 24 08 00 00 86 18     ru-In.....$.....
     9af:	03 10 54 68 72 75 2d 4f 75 74 00 00 00 00 25 08     ..Thru-Out....%.
     9bf:	00 00 86 18 09 00 41 63 63 65 70 74 20 50 43 00     ......Accept PC.
     9cf:	00 00 30 09 00 00 3b 1a 09 00 41 63 74 2e 53 65     ..0...;...Act.Se
     9df:	6e 73 65 00 00 00 2e 09 00 00 3b 1a c9 00 56 65     nse.......;...Ve
     9ef:	6c 30 34 4f 66 66 00 00 00 00 2f 09 00 00 3b 1a     l04Off..../...;.

000009ff <menu_midiIn>:
     9ff:	81 00 43 68 2e 31 00 00 00 00 00 00 3f 0b 00 00     ..Ch.1......?...
     a0f:	00 18 00 00 01 00 43 68 2e 32 00 00 00 00 00 00     ......Ch.2......
     a1f:	3f 0b 01 00 00 18 00 00 01 00 43 68 2e 33 00 00     ?.........Ch.3..
     a2f:	00 00 00 00 3f 0b 02 00 00 18 00 00 01 00 43 68     ....?.........Ch
     a3f:	2e 34 00 00 00 00 00 00 3f 0b 03 00 00 18 00 00     .4......?.......
     a4f:	01 00 43 68 2e 35 00 00 00 00 00 00 3f 0b 04 00     ..Ch.5......?...
     a5f:	00 18 00 00 01 00 43 68 2e 36 00 00 00 00 00 00     ......Ch.6......
     a6f:	3f 0b 05 00 00 18 00 00 01 00 43 68 2e 37 00 00     ?.........Ch.7..
     a7f:	00 00 00 00 3f 0b 06 00 00 18 00 00 01 00 43 68     ....?.........Ch
     a8f:	2e 38 00 00 00 00 00 00 3f 0b 07 00 00 18 00 00     .8......?.......
     a9f:	01 00 43 68 2e 39 00 00 00 00 00 00 3f 0b 08 00     ..Ch.9......?...
     aaf:	00 18 00 00 01 00 43 68 2e 31 30 00 00 00 00 00     ......Ch.10.....
     abf:	3f 0b 09 00 00 18 00 00 01 00 43 68 2e 31 31 00     ?.........Ch.11.
     acf:	00 00 00 00 3f 0b 0a 00 00 18 00 00 01 00 43 68     ....?.........Ch
     adf:	2e 31 32 00 00 00 00 00 3f 0b 0b 00 00 18 00 00     .12.....?.......
     aef:	01 00 43 68 2e 31 33 00 00 00 00 00 3f 0b 0c 00     ..Ch.13.....?...
     aff:	00 18 00 00 01 00 43 68 2e 31 34 00 00 00 00 00     ......Ch.14.....
     b0f:	3f 0b 0d 00 00 18 00 00 01 00 43 68 2e 31 35 00     ?.........Ch.15.
     b1f:	00 00 00 00 3f 0b 0e 00 00 18 00 00 c1 00 43 68     ....?.........Ch
     b2f:	2e 31 36 00 00 00 00 00 3f 0b 0f 00 00 18 00 00     .16.....?.......

00000b3f <menu_midiInSec>:
     b3f:	81 00 53 65 63 74 2e 31 00 00 00 00 8f 0b 00 00     ..Sect.1........
     b4f:	0b 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     ......Sect.2....
     b5f:	8f 0b 01 00 0b 18 00 00 01 00 53 65 63 74 2e 33     ..........Sect.3
     b6f:	00 00 00 00 8f 0b 02 00 0b 18 00 00 c1 00 53 65     ..............Se
     b7f:	63 74 2e 34 00 00 00 00 8f 0b 03 00 0b 18 00 00     ct.4............

00000b8f <menu_midiInVar>:
     b8f:	87 90 4d 61 6e 75 61 6c 00 00 00 00 00 00 26 08     ..Manual......&.
     b9f:	00 00 00 00 04 90 4d 69 64 4e 6f 74 65 00 00 00     ......MidNote...
     baf:	00 00 27 08 00 00 00 00 06 80 52 61 6e 67 65 00     ..'.......Range.
     bbf:	00 00 00 00 00 00 28 08 00 00 00 00 c4 90 4d 61     ......(.......Ma
     bcf:	6e 4e 6f 74 65 00 00 00 00 00 29 08 00 00 00 00     nNote.....).....

00000bdf <menu_key>:
     bdf:	81 08 54 61 73 74 65 31 00 00 00 00 5f 04 00 00     ..Taste1...._...
     bef:	6f 18 a5 29 01 08 54 61 73 74 65 32 00 00 00 00     o..)..Taste2....
     bff:	5f 04 01 00 6f 18 a5 29 01 08 54 61 73 74 65 33     _...o..)..Taste3
     c0f:	00 00 00 00 5f 04 02 00 6f 18 a5 29 c1 08 54 61     ...._...o..)..Ta
     c1f:	73 74 65 34 00 00 00 00 5f 04 03 00 6f 18 a5 29     ste4...._...o..)

00000c2f <menu_tune>:
     c2f:	81 20 4d 61 6e 2e 33 00 00 00 00 00 00 00 00 00     . Man.3.........
     c3f:	1f 19 00 00 01 20 4d 61 6e 2e 32 00 00 00 00 00     ..... Man.2.....
     c4f:	00 00 01 00 1f 19 00 00 01 20 4d 61 6e 2e 31 00     ......... Man.1.
     c5f:	00 00 00 00 00 00 02 00 1f 19 00 00 c1 20 50 65     ............. Pe
     c6f:	64 61 6c 00 00 00 00 00 00 00 03 00 1f 19 00 00     dal.............

00000c7f <menu_midiOut>:
     c7f:	83 10 49 49 49 00 00 00 00 00 00 00 00 00 26 09     ..III.........&.
     c8f:	00 00 00 00 03 10 49 49 00 00 00 00 00 00 00 00     ......II........
     c9f:	00 00 28 09 00 00 00 00 03 10 49 00 00 00 00 00     ..(.......I.....
     caf:	00 00 00 00 00 00 2a 09 00 00 00 00 03 10 50 00     ......*.......P.
	...
     cc7:	00 00 2c 09 00 00 00 00 03 10 49 49 49 28 69 6e     ..,.......III(in
     cd7:	74 29 00 00 00 00 27 09 00 00 00 00 03 10 49 49     t)....'.......II
     ce7:	28 69 6e 74 29 00 00 00 00 00 29 09 00 00 00 00     (int).....).....
     cf7:	03 10 49 28 69 6e 74 29 00 00 00 00 00 00 2b 09     ..I(int)......+.
     d07:	00 00 00 00 c3 10 50 28 69 6e 74 29 00 00 00 00     ......P(int)....
     d17:	00 00 2d 09 00 00 00 00                             ..-.....

00000d1f <menu_setup>:
     d1f:	81 00 4d 6f 64 75 6c 65 00 00 00 00 e7 0d 00 00     ..Module........
     d2f:	00 00 00 00 01 00 55 53 42 00 00 00 00 00 00 00     ......USB.......
     d3f:	57 11 00 00 00 00 00 00 01 00 50 6f 77 65 72 00     W.........Power.
     d4f:	00 00 00 00 ab 0d 00 00 00 00 00 00 c1 00 45 45     ..............EE
     d5f:	70 72 6f 6d 00 00 00 00 6f 0d 00 00 00 00 00 00     prom....o.......

00000d6f <menu_eeprom>:
     d6f:	81 00 45 45 53 61 76 65 00 00 00 00 00 00 00 00     ..EESave........
     d7f:	2e 28 00 00 01 00 45 45 42 61 63 6b 75 70 00 00     .(....EEBackup..
     d8f:	00 00 00 00 16 28 00 00 c1 00 45 45 52 65 73 74     .....(....EERest
     d9f:	6f 72 65 00 00 00 00 00 22 28 00 00                 ore....."(..

00000dab <menu_Power>:
     dab:	81 00 50 6f 77 65 72 4f 6e 00 00 00 00 00 00 00     ..PowerOn.......
     dbb:	69 2a 00 00 01 00 50 6f 77 65 72 4f 66 66 00 00     i*....PowerOff..
     dcb:	00 00 00 00 72 2a 00 00 c1 00 50 2e 52 65 73 74     ....r*....P.Rest
     ddb:	61 72 74 00 00 00 00 00 7a 2a 00 00                 art.....z*..

00000de7 <menu_module>:
     de7:	8a 00 4d 6f 64 52 65 61 64 00 00 00 00 00 55 03     ..ModRead.....U.
     df7:	00 00 51 1a 0a 00 4d 6f 64 57 72 69 74 65 00 00     ..Q...ModWrite..
     e07:	00 00 56 03 00 00 51 1a 0a 08 4d 6f 64 4f 4b 00     ..V...Q...ModOK.
     e17:	00 00 00 00 00 00 48 02 00 00 00 00 01 00 4d 6f     ......H.......Mo
     e27:	64 54 65 73 74 00 00 00 4b 0e 00 00 00 00 00 00     dTest...K.......
     e37:	c1 00 4d 6f 64 41 73 73 69 67 6e 00 3b 0f 00 00     ..ModAssign.;...
     e47:	00 00 47 1a                                         ..G.

00000e4b <menu_ModeSel>:
     e4b:	81 00 4d 6f 64 2e 30 00 00 00 00 00 eb 0e 00 00     ..Mod.0.........
     e5b:	f5 17 00 00 01 00 4d 6f 64 2e 31 00 00 00 00 00     ......Mod.1.....
     e6b:	eb 0e 01 00 f5 17 00 00 01 00 4d 6f 64 2e 32 00     ..........Mod.2.
     e7b:	00 00 00 00 eb 0e 02 00 f5 17 00 00 01 00 4d 6f     ..............Mo
     e8b:	64 2e 33 00 00 00 00 00 eb 0e 03 00 f5 17 00 00     d.3.............
     e9b:	01 00 4d 6f 64 2e 34 00 00 00 00 00 eb 0e 04 00     ..Mod.4.........
     eab:	f5 17 00 00 01 00 4d 6f 64 2e 35 00 00 00 00 00     ......Mod.5.....
     ebb:	eb 0e 05 00 f5 17 00 00 01 00 4d 6f 64 2e 36 00     ..........Mod.6.
     ecb:	00 00 00 00 eb 0e 06 00 f5 17 00 00 c1 00 4d 6f     ..............Mo
     edb:	64 2e 37 00 00 00 00 00 eb 0e 07 00 f5 17 00 00     d.7.............

00000eeb <menu_ModTestSelcted>:
     eeb:	81 00 52 65 61 64 00 00 00 00 00 00 00 00 00 00     ..Read..........
     efb:	d9 18 00 00 0b 00 57 72 69 74 65 00 00 00 00 00     ......Write.....
     f0b:	00 00 ad 05 8c 17 c8 17 01 00 54 65 73 74 50 74     ..........TestPt
     f1b:	72 6e 00 00 00 00 00 00 f9 27 00 00 c1 00 4c 6f     rn.......'....Lo
     f2b:	6f 70 54 73 74 00 00 00 00 00 00 00 0d 19 00 00     opTst...........

00000f3b <menu_modAssign>:
     f3b:	81 00 4d 61 6e 2e 33 00 00 00 00 00 3f 10 00 00     ..Man.3.....?...
     f4b:	29 18 00 00 01 00 4d 61 6e 2e 32 00 00 00 00 00     ).....Man.2.....
     f5b:	3f 10 01 00 29 18 00 00 01 00 4d 61 6e 2e 31 00     ?...).....Man.1.
     f6b:	00 00 00 00 3f 10 02 00 29 18 00 00 01 00 50 65     ....?...).....Pe
     f7b:	64 61 6c 00 00 00 00 00 3f 10 03 00 29 18 00 00     dal.....?...)...
     f8b:	c1 00 52 65 67 69 73 74 65 72 00 00 9f 0f 04 00     ..Register......
     f9b:	00 00 00 00                                         ....

00000f9f <menu_modSection8>:
     f9f:	81 00 53 65 63 74 2e 31 00 00 00 00 8f 10 00 00     ..Sect.1........
     faf:	59 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     Y.....Sect.2....
     fbf:	8f 10 01 00 59 18 00 00 01 00 53 65 63 74 2e 33     ....Y.....Sect.3
     fcf:	00 00 00 00 8f 10 02 00 59 18 00 00 01 00 53 65     ........Y.....Se
     fdf:	63 74 2e 34 00 00 00 00 8f 10 03 00 59 18 00 00     ct.4........Y...
     fef:	01 00 53 65 63 74 2e 35 00 00 00 00 8f 10 04 00     ..Sect.5........
     fff:	59 18 00 00 01 00 53 65 63 74 2e 36 00 00 00 00     Y.....Sect.6....
    100f:	8f 10 05 00 59 18 00 00 01 00 53 65 63 74 2e 37     ....Y.....Sect.7
    101f:	00 00 00 00 8f 10 06 00 59 18 00 00 c1 00 53 65     ........Y.....Se
    102f:	63 74 2e 38 00 00 00 00 8f 10 07 00 59 18 00 00     ct.8........Y...

0000103f <menu_modSection>:
    103f:	81 00 53 65 63 74 2e 31 00 00 00 00 cb 10 00 00     ..Sect.1........
    104f:	34 18 00 00 01 00 53 65 63 74 2e 32 00 00 00 00     4.....Sect.2....
    105f:	cb 10 01 00 34 18 00 00 01 00 53 65 63 74 2e 33     ....4.....Sect.3
    106f:	00 00 00 00 cb 10 02 00 34 18 00 00 c1 00 53 65     ........4.....Se
    107f:	63 74 2e 34 00 00 00 00 cb 10 03 00 34 18 00 00     ct.4........4...

0000108f <menu_modDefineReg>:
    108f:	8d 80 52 65 67 42 65 67 00 00 00 00 00 00 f6 07     ..RegBeg........
    109f:	00 00 00 00 0d 80 52 65 67 45 6e 64 00 00 00 00     ......RegEnd....
    10af:	00 00 f7 07 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..........Module
    10bf:	2f 42 69 74 00 00 f8 07 00 00 00 00                 /Bit........

000010cb <menu_modDefine>:
    10cb:	84 90 4e 6f 74 65 42 65 67 00 00 00 00 00 32 09     ..NoteBeg.....2.
    10db:	00 00 00 00 04 90 4e 6f 74 65 45 6e 64 00 00 00     ......NoteEnd...
    10eb:	00 00 33 09 00 00 00 00 c5 80 4d 6f 64 75 6c 65     ..3.......Module
    10fb:	2f 42 69 74 00 00 34 09 00 00 00 00                 /Bit..4.....

00001107 <menu_status>:
    1107:	81 20 4c 6f 67 00 00 00 00 00 00 00 00 00 00 00     . Log...........
    1117:	22 23 00 00 01 00 55 53 42 00 00 00 00 00 00 00     "#....USB.......
    1127:	57 11 00 00 00 00 00 00 02 40 4d 49 44 49 2d 49     W........@MIDI-I
    1137:	6e 00 00 00 00 00 00 00 a6 22 00 00 c2 40 4d 49     n........"...@MI
    1147:	44 49 2d 4f 75 74 00 00 00 00 00 00 e4 22 00 00     DI-Out......."..

00001157 <menu_USBser>:
    1157:	89 00 41 63 74 69 76 65 00 00 00 00 00 00 6e 15     ..Active......n.
    1167:	00 00 7b 1a 01 00 53 65 6e 64 4c 6f 67 00 00 00     ..{...SendLog...
    1177:	00 00 00 00 55 1a 00 00 c1 00 53 6e 64 48 57 43     ....U.....SndHWC
    1187:	66 67 00 00 00 00 00 00 8f 1a 00 00                 fg..........

00001193 <sw_version>:
    1193:	56 30 2e 36 37 00                                   V0.67.

00001199 <cplInfo>:
    1199:	01 00 02 00 02 01 03 00 03 01 03 02 00 01 00 02     ................
    11a9:	01 02 00 03 01 03 02 03                             ........

000011b1 <keylabel_1>:
    11b1:	31 00                                               1.

000011b3 <keylabel_0>:
    11b3:	30 00                                               0.

000011b5 <keylabel_text>:
    11b5:	54 65 78 74 80 00                                   Text..

000011bb <keylabel_exit>:
    11bb:	45 78 69 74 00                                      Exit.

000011c0 <keylabel_off>:
    11c0:	7e 61 75 73 00                                      ~aus.

000011c5 <keylabel_on>:
    11c5:	7e 65 69 6e 00                                      ~ein.

000011ca <keylabel_onoff>:
    11ca:	45 69 6e 80 00                                      Ein..

000011cf <keylabel_minus>:
    11cf:	2d 00                                               -.

000011d1 <keylabel_plus>:
    11d1:	2b 00                                               +.

000011d3 <keylabel_left>:
    11d3:	7f 00                                               ..

000011d5 <keylabel_right>:
    11d5:	7e 00                                               ~.

000011d7 <keylabel_down>:
    11d7:	09 00                                               ..

000011d9 <keylabel_up>:
    11d9:	08 00                                               ..

000011db <cgPattern_Block>:
    11db:	00 00 0e 0e 0e 0e 00 00                             ........

000011e3 <cgPattern_Down>:
    11e3:	04 04 04 04 15 0e 04 00                             ........

000011eb <cgPattern_Up>:
    11eb:	04 0e 15 04 04 04 04 00                             ........

000011f3 <cr_lf>:
    11f3:	0d 0a 00                                            ...

000011f6 <__ctors_end>:
    11f6:	11 24       	eor	r1, r1
    11f8:	1f be       	out	0x3f, r1	; 63
    11fa:	cf ef       	ldi	r28, 0xFF	; 255
    11fc:	d1 e2       	ldi	r29, 0x21	; 33
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	00 e0       	ldi	r16, 0x00	; 0
    1204:	0c bf       	out	0x3c, r16	; 60

00001206 <__do_copy_data>:
    1206:	12 e0       	ldi	r17, 0x02	; 2
    1208:	a0 e0       	ldi	r26, 0x00	; 0
    120a:	b2 e0       	ldi	r27, 0x02	; 2
    120c:	ee eb       	ldi	r30, 0xBE	; 190
    120e:	f3 e7       	ldi	r31, 0x73	; 115
    1210:	00 e0       	ldi	r16, 0x00	; 0
    1212:	0b bf       	out	0x3b, r16	; 59
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__do_copy_data+0x14>
    1216:	07 90       	elpm	r0, Z+
    1218:	0d 92       	st	X+, r0
    121a:	a8 30       	cpi	r26, 0x08	; 8
    121c:	b1 07       	cpc	r27, r17
    121e:	d9 f7       	brne	.-10     	; 0x1216 <__do_copy_data+0x10>

00001220 <__do_clear_bss>:
    1220:	28 e1       	ldi	r18, 0x18	; 24
    1222:	a8 e0       	ldi	r26, 0x08	; 8
    1224:	b2 e0       	ldi	r27, 0x02	; 2
    1226:	01 c0       	rjmp	.+2      	; 0x122a <.do_clear_bss_start>

00001228 <.do_clear_bss_loop>:
    1228:	1d 92       	st	X+, r1

0000122a <.do_clear_bss_start>:
    122a:	a5 32       	cpi	r26, 0x25	; 37
    122c:	b2 07       	cpc	r27, r18
    122e:	e1 f7       	brne	.-8      	; 0x1228 <.do_clear_bss_loop>
    1230:	0e 94 b8 14 	call	0x2970	; 0x2970 <main>
    1234:	0c 94 dd 39 	jmp	0x73ba	; 0x73ba <_exit>

00001238 <__bad_interrupt>:
    1238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000123c <crc16_ram>:
		} else if (eeprom_read_byte(pEeBlock) == EE_CHAR_END){
			return EE_LOAD_ERROR_EE_LABELNOTFOUND;
		}
	}
	return EE_LOAD_ERROR_EE_ENDREACHED;
}
    123c:	fc 01       	movw	r30, r24
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	1c c0       	rjmp	.+56     	; 0x127c <crc16_ram+0x40>
    1244:	df 01       	movw	r26, r30
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	20 81       	ld	r18, Z
    124a:	82 27       	eor	r24, r18
    124c:	28 2f       	mov	r18, r24
    124e:	22 95       	swap	r18
    1250:	28 27       	eor	r18, r24
    1252:	02 2e       	mov	r0, r18
    1254:	26 95       	lsr	r18
    1256:	26 95       	lsr	r18
    1258:	20 25       	eor	r18, r0
    125a:	02 2e       	mov	r0, r18
    125c:	26 95       	lsr	r18
    125e:	20 25       	eor	r18, r0
    1260:	27 70       	andi	r18, 0x07	; 7
    1262:	08 2e       	mov	r0, r24
    1264:	89 2f       	mov	r24, r25
    1266:	26 95       	lsr	r18
    1268:	07 94       	ror	r0
    126a:	27 95       	ror	r18
    126c:	90 2d       	mov	r25, r0
    126e:	82 27       	eor	r24, r18
    1270:	06 94       	lsr	r0
    1272:	27 95       	ror	r18
    1274:	90 25       	eor	r25, r0
    1276:	82 27       	eor	r24, r18
    1278:	ba 01       	movw	r22, r20
    127a:	fd 01       	movw	r30, r26
    127c:	ab 01       	movw	r20, r22
    127e:	41 50       	subi	r20, 0x01	; 1
    1280:	51 09       	sbc	r21, r1
    1282:	67 2b       	or	r22, r23
    1284:	f9 f6       	brne	.-66     	; 0x1244 <crc16_ram+0x8>
    1286:	08 95       	ret

00001288 <crc16_eeprom>:
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	cf ef       	ldi	r28, 0xFF	; 255
    1296:	df ef       	ldi	r29, 0xFF	; 255
    1298:	21 c0       	rjmp	.+66     	; 0x12dc <crc16_eeprom+0x54>
    129a:	7c 01       	movw	r14, r24
    129c:	2f ef       	ldi	r18, 0xFF	; 255
    129e:	e2 1a       	sub	r14, r18
    12a0:	f2 0a       	sbc	r15, r18
    12a2:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    12a6:	9e 01       	movw	r18, r28
    12a8:	28 27       	eor	r18, r24
    12aa:	82 2f       	mov	r24, r18
    12ac:	82 95       	swap	r24
    12ae:	82 27       	eor	r24, r18
    12b0:	08 2e       	mov	r0, r24
    12b2:	86 95       	lsr	r24
    12b4:	86 95       	lsr	r24
    12b6:	80 25       	eor	r24, r0
    12b8:	08 2e       	mov	r0, r24
    12ba:	86 95       	lsr	r24
    12bc:	80 25       	eor	r24, r0
    12be:	87 70       	andi	r24, 0x07	; 7
    12c0:	02 2e       	mov	r0, r18
    12c2:	23 2f       	mov	r18, r19
    12c4:	86 95       	lsr	r24
    12c6:	07 94       	ror	r0
    12c8:	87 95       	ror	r24
    12ca:	30 2d       	mov	r19, r0
    12cc:	28 27       	eor	r18, r24
    12ce:	06 94       	lsr	r0
    12d0:	87 95       	ror	r24
    12d2:	30 25       	eor	r19, r0
    12d4:	28 27       	eor	r18, r24
    12d6:	e9 01       	movw	r28, r18
    12d8:	b8 01       	movw	r22, r16
    12da:	c7 01       	movw	r24, r14
    12dc:	8b 01       	movw	r16, r22
    12de:	01 50       	subi	r16, 0x01	; 1
    12e0:	11 09       	sbc	r17, r1
    12e2:	67 2b       	or	r22, r23
    12e4:	d1 f6       	brne	.-76     	; 0x129a <crc16_eeprom+0x12>
    12e6:	ce 01       	movw	r24, r28
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	08 95       	ret

000012f6 <crc16_ram_startVal>:
    12f6:	fc 01       	movw	r30, r24
    12f8:	ca 01       	movw	r24, r20
    12fa:	1c c0       	rjmp	.+56     	; 0x1334 <crc16_ram_startVal+0x3e>
    12fc:	df 01       	movw	r26, r30
    12fe:	11 96       	adiw	r26, 0x01	; 1
    1300:	20 81       	ld	r18, Z
    1302:	82 27       	eor	r24, r18
    1304:	28 2f       	mov	r18, r24
    1306:	22 95       	swap	r18
    1308:	28 27       	eor	r18, r24
    130a:	02 2e       	mov	r0, r18
    130c:	26 95       	lsr	r18
    130e:	26 95       	lsr	r18
    1310:	20 25       	eor	r18, r0
    1312:	02 2e       	mov	r0, r18
    1314:	26 95       	lsr	r18
    1316:	20 25       	eor	r18, r0
    1318:	27 70       	andi	r18, 0x07	; 7
    131a:	08 2e       	mov	r0, r24
    131c:	89 2f       	mov	r24, r25
    131e:	26 95       	lsr	r18
    1320:	07 94       	ror	r0
    1322:	27 95       	ror	r18
    1324:	90 2d       	mov	r25, r0
    1326:	82 27       	eor	r24, r18
    1328:	06 94       	lsr	r0
    132a:	27 95       	ror	r18
    132c:	90 25       	eor	r25, r0
    132e:	82 27       	eor	r24, r18
    1330:	ba 01       	movw	r22, r20
    1332:	fd 01       	movw	r30, r26
    1334:	ab 01       	movw	r20, r22
    1336:	41 50       	subi	r20, 0x01	; 1
    1338:	51 09       	sbc	r21, r1
    133a:	67 2b       	or	r22, r23
    133c:	f9 f6       	brne	.-66     	; 0x12fc <crc16_ram_startVal+0x6>
    133e:	08 95       	ret

00001340 <crc16_eeprom_startVal>:
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	ea 01       	movw	r28, r20
    134e:	21 c0       	rjmp	.+66     	; 0x1392 <crc16_eeprom_startVal+0x52>
    1350:	7c 01       	movw	r14, r24
    1352:	2f ef       	ldi	r18, 0xFF	; 255
    1354:	e2 1a       	sub	r14, r18
    1356:	f2 0a       	sbc	r15, r18
    1358:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    135c:	ae 01       	movw	r20, r28
    135e:	48 27       	eor	r20, r24
    1360:	84 2f       	mov	r24, r20
    1362:	82 95       	swap	r24
    1364:	84 27       	eor	r24, r20
    1366:	08 2e       	mov	r0, r24
    1368:	86 95       	lsr	r24
    136a:	86 95       	lsr	r24
    136c:	80 25       	eor	r24, r0
    136e:	08 2e       	mov	r0, r24
    1370:	86 95       	lsr	r24
    1372:	80 25       	eor	r24, r0
    1374:	87 70       	andi	r24, 0x07	; 7
    1376:	04 2e       	mov	r0, r20
    1378:	45 2f       	mov	r20, r21
    137a:	86 95       	lsr	r24
    137c:	07 94       	ror	r0
    137e:	87 95       	ror	r24
    1380:	50 2d       	mov	r21, r0
    1382:	48 27       	eor	r20, r24
    1384:	06 94       	lsr	r0
    1386:	87 95       	ror	r24
    1388:	50 25       	eor	r21, r0
    138a:	48 27       	eor	r20, r24
    138c:	ea 01       	movw	r28, r20
    138e:	b8 01       	movw	r22, r16
    1390:	c7 01       	movw	r24, r14
    1392:	8b 01       	movw	r16, r22
    1394:	01 50       	subi	r16, 0x01	; 1
    1396:	11 09       	sbc	r17, r1
    1398:	67 2b       	or	r22, r23
    139a:	d1 f6       	brne	.-76     	; 0x1350 <crc16_eeprom_startVal+0x10>
    139c:	ce 01       	movw	r24, r28
    139e:	df 91       	pop	r29
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	08 95       	ret

000013ac <eeprom_ReadManualMap>:

uint8_t eeprom_ReadManualMap(){
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
	if ((eeprom_read_word(&(ee.eeData.ee.manualMap_crc)) == crc16_eeprom((uint8_t*) &(ee.eeData.ee.manualMap), sizeof (ee.eeData.ee.manualMap))
    13b0:	82 e3       	ldi	r24, 0x32	; 50
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    13b8:	ec 01       	movw	r28, r24
    13ba:	60 e3       	ldi	r22, 0x30	; 48
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	62 df       	rcall	.-316    	; 0x1288 <crc16_eeprom>
    13c4:	c8 17       	cp	r28, r24
    13c6:	d9 07       	cpc	r29, r25
    13c8:	81 f4       	brne	.+32     	; 0x13ea <eeprom_ReadManualMap+0x3e>
		&& eeprom_read_byte(&(ee.eeData.ee.charManMap)) == EE_CHAR_MANUALMAP))  {
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    13d2:	8d 34       	cpi	r24, 0x4D	; 77
    13d4:	51 f4       	brne	.+20     	; 0x13ea <eeprom_ReadManualMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof (ee.eeData.ee.manualMap));
    13d6:	40 e3       	ldi	r20, 0x30	; 48
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	62 e0       	ldi	r22, 0x02	; 2
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	82 e3       	ldi	r24, 0x32	; 50
    13e0:	99 e0       	ldi	r25, 0x09	; 9
    13e2:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		return (EE_LOAD_OK);
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	06 c0       	rjmp	.+12     	; 0x13f6 <eeprom_ReadManualMap+0x4a>
	} else {
		ee_initError |= EE_ERROR_MANUAL;
    13ea:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    13ee:	81 60       	ori	r24, 0x01	; 1
    13f0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <eeprom_ReadMidiInMap>:

uint8_t eeprom_ReadMidiInMap(){
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiInMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap))
    1400:	85 e3       	ldi	r24, 0x35	; 53
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    1408:	ec 01       	movw	r28, r24
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	71 e0       	ldi	r23, 0x01	; 1
    140e:	85 e3       	ldi	r24, 0x35	; 53
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	3a df       	rcall	.-396    	; 0x1288 <crc16_eeprom>
    1414:	c8 17       	cp	r28, r24
    1416:	d9 07       	cpc	r29, r25
    1418:	81 f4       	brne	.+32     	; 0x143a <eeprom_ReadMidiInMap+0x3e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiInMap) == EE_CHAR_MIDIINMAP))  {
    141a:	84 e3       	ldi	r24, 0x34	; 52
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    1422:	89 34       	cpi	r24, 0x49	; 73
    1424:	51 f4       	brne	.+20     	; 0x143a <eeprom_ReadMidiInMap+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof (ee.eeData.ee.midiInMap));
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	51 e0       	ldi	r21, 0x01	; 1
    142a:	65 e3       	ldi	r22, 0x35	; 53
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	86 e2       	ldi	r24, 0x26	; 38
    1430:	98 e0       	ldi	r25, 0x08	; 8
    1432:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		return (EE_LOAD_OK);
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <eeprom_ReadMidiInMap+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    143a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    143e:	82 60       	ori	r24, 0x02	; 2
    1440:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1444:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <eeprom_ReadMidiOutMap>:

uint8_t eeprom_ReadMidiOutMap(){
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiOutMap_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiOutMap, sizeof (ee.eeData.ee.midiOutMap)+sizeof(ee.eeData.ee.midiSettings))
    1450:	83 e4       	ldi	r24, 0x43	; 67
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    1458:	ec 01       	movw	r28, r24
    145a:	6b e0       	ldi	r22, 0x0B	; 11
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	88 e3       	ldi	r24, 0x38	; 56
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	12 df       	rcall	.-476    	; 0x1288 <crc16_eeprom>
    1464:	c8 17       	cp	r28, r24
    1466:	d9 07       	cpc	r29, r25
    1468:	c1 f4       	brne	.+48     	; 0x149a <eeprom_ReadMidiOutMap+0x4e>
		&& eeprom_read_byte(&ee.eeData.ee.charMidiOutMap) == EE_CHAR_MIDIOUTMAP))  {
    146a:	87 e3       	ldi	r24, 0x37	; 55
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    1472:	8f 34       	cpi	r24, 0x4F	; 79
    1474:	91 f4       	brne	.+36     	; 0x149a <eeprom_ReadMidiOutMap+0x4e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*)&midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(ee.eeData.ee.midiOutMap));
    1476:	48 e0       	ldi	r20, 0x08	; 8
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	68 e3       	ldi	r22, 0x38	; 56
    147c:	71 e0       	ldi	r23, 0x01	; 1
    147e:	86 e2       	ldi	r24, 0x26	; 38
    1480:	99 e0       	ldi	r25, 0x09	; 9
    1482:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		eeprom_read_block((uint8_t*)&midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(ee.eeData.ee.midiSettings));
    1486:	43 e0       	ldi	r20, 0x03	; 3
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	60 e4       	ldi	r22, 0x40	; 64
    148c:	71 e0       	ldi	r23, 0x01	; 1
    148e:	8e e2       	ldi	r24, 0x2E	; 46
    1490:	99 e0       	ldi	r25, 0x09	; 9
    1492:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		return (EE_LOAD_OK);
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	06 c0       	rjmp	.+12     	; 0x14a6 <eeprom_ReadMidiOutMap+0x5a>
	} else {
		ee_initError |= EE_ERROR_MIDIOUT;
    149a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    149e:	84 60       	ori	r24, 0x04	; 4
    14a0:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14a4:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14a6:	df 91       	pop	r29
    14a8:	cf 91       	pop	r28
    14aa:	08 95       	ret

000014ac <eeprom_ReadModules>:

uint8_t eeprom_ReadModules(){
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.moduleInstalled_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.moduleAssignRead, sizeof (ee.eeData.ee.moduleAssignRead))
    14b0:	88 e4       	ldi	r24, 0x48	; 72
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    14b8:	ec 01       	movw	r28, r24
    14ba:	61 e0       	ldi	r22, 0x01	; 1
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	86 e4       	ldi	r24, 0x46	; 70
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	e2 de       	rcall	.-572    	; 0x1288 <crc16_eeprom>
    14c4:	c8 17       	cp	r28, r24
    14c6:	d9 07       	cpc	r29, r25
    14c8:	a1 f4       	brne	.+40     	; 0x14f2 <eeprom_ReadModules+0x46>
		&& eeprom_read_byte(&ee.eeData.ee.charModInst) == EE_CHAR_MODULEINSTALLED))  {
    14ca:	85 e4       	ldi	r24, 0x45	; 69
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    14d2:	89 36       	cpi	r24, 0x69	; 105
    14d4:	71 f4       	brne	.+28     	; 0x14f2 <eeprom_ReadModules+0x46>
		// stored crc16 is ok
		pipe_Module.AssnRead = eeprom_read_byte(&ee.eeData.ee.moduleAssignRead);
    14d6:	86 e4       	ldi	r24, 0x46	; 70
    14d8:	91 e0       	ldi	r25, 0x01	; 1
    14da:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    14de:	c5 e5       	ldi	r28, 0x55	; 85
    14e0:	d3 e0       	ldi	r29, 0x03	; 3
    14e2:	88 83       	st	Y, r24
		pipe_Module.AssnWrite = eeprom_read_byte(&ee.eeData.ee.moduleAssignWrite);
    14e4:	87 e4       	ldi	r24, 0x47	; 71
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    14ec:	89 83       	std	Y+1, r24	; 0x01
		return (EE_LOAD_OK);
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <eeprom_ReadModules+0x52>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    14f2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    14f6:	88 60       	ori	r24, 0x08	; 8
    14f8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	08 95       	ret

00001504 <eeprom_ReadMidiThrough>:

uint8_t eeprom_ReadMidiThrough(){
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.midiThrough_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.midiThrough, sizeof (ee.eeData.ee.midiThrough))
    1508:	87 ef       	ldi	r24, 0xF7	; 247
    150a:	93 e0       	ldi	r25, 0x03	; 3
    150c:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    1510:	ec 01       	movw	r28, r24
    1512:	62 e0       	ldi	r22, 0x02	; 2
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	85 ef       	ldi	r24, 0xF5	; 245
    1518:	93 e0       	ldi	r25, 0x03	; 3
    151a:	b6 de       	rcall	.-660    	; 0x1288 <crc16_eeprom>
    151c:	c8 17       	cp	r28, r24
    151e:	d9 07       	cpc	r29, r25
    1520:	81 f4       	brne	.+32     	; 0x1542 <eeprom_ReadMidiThrough+0x3e>
	&& eeprom_read_byte(&ee.eeData.ee.charMidiThrough) == EE_CHAR_MIDITHROUGH))  {
    1522:	84 ef       	ldi	r24, 0xF4	; 244
    1524:	93 e0       	ldi	r25, 0x03	; 3
    1526:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    152a:	84 35       	cpi	r24, 0x54	; 84
    152c:	51 f4       	brne	.+20     	; 0x1542 <eeprom_ReadMidiThrough+0x3e>
		// stored crc16 is ok
		eeprom_read_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(ee.eeData.ee.midiThrough));
    152e:	42 e0       	ldi	r20, 0x02	; 2
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	65 ef       	ldi	r22, 0xF5	; 245
    1534:	73 e0       	ldi	r23, 0x03	; 3
    1536:	84 e2       	ldi	r24, 0x24	; 36
    1538:	98 e0       	ldi	r25, 0x08	; 8
    153a:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		return (EE_LOAD_OK);
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	06 c0       	rjmp	.+12     	; 0x154e <eeprom_ReadMidiThrough+0x4a>
	} else {
		ee_initError |= EE_EPROM_MIDIIN;
    1542:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1546:	82 60       	ori	r24, 0x02	; 2
    1548:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    154c:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	08 95       	ret

00001554 <eeprom_ReadUSB>:

uint8_t eeprom_ReadUSB(){
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.usb_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.usbActive, sizeof (ee.eeData.ee.usbActive))
    1558:	8c e4       	ldi	r24, 0x4C	; 76
    155a:	91 e0       	ldi	r25, 0x01	; 1
    155c:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    1560:	ec 01       	movw	r28, r24
    1562:	61 e0       	ldi	r22, 0x01	; 1
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	8b e4       	ldi	r24, 0x4B	; 75
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	8e de       	rcall	.-740    	; 0x1288 <crc16_eeprom>
    156c:	c8 17       	cp	r28, r24
    156e:	d9 07       	cpc	r29, r25
    1570:	71 f4       	brne	.+28     	; 0x158e <eeprom_ReadUSB+0x3a>
	&& eeprom_read_byte(&ee.eeData.ee.charUSB) == EE_CHAR_USB))  {
    1572:	8a e4       	ldi	r24, 0x4A	; 74
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    157a:	85 35       	cpi	r24, 0x55	; 85
    157c:	41 f4       	brne	.+16     	; 0x158e <eeprom_ReadUSB+0x3a>
		// stored crc16 is ok
		serUSB_Active = eeprom_read_byte(&ee.eeData.ee.usbActive);
    157e:	8b e4       	ldi	r24, 0x4B	; 75
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    1586:	80 93 6e 15 	sts	0x156E, r24	; 0x80156e <serUSB_Active>
		return (EE_LOAD_OK);
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	06 c0       	rjmp	.+12     	; 0x159a <eeprom_ReadUSB+0x46>
	} else {
		ee_initError |= EE_ERROR_MODULES;
    158e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    1592:	88 60       	ori	r24, 0x08	; 8
    1594:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1598:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <eeprom_ReadReg>:

uint8_t eeprom_ReadReg(){
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
	uint16_t crc;
	crc = crc16_eeprom((uint8_t*) &ee.eeData.ee.regCount, sizeof (registerCount));
    15a4:	61 e0       	ldi	r22, 0x01	; 1
    15a6:	70 e0       	ldi	r23, 0x00	; 0
    15a8:	8f e4       	ldi	r24, 0x4F	; 79
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	6d de       	rcall	.-806    	; 0x1288 <crc16_eeprom>
	crc = crc16_eeprom_startVal((uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap), crc);
    15ae:	ac 01       	movw	r20, r24
    15b0:	68 e1       	ldi	r22, 0x18	; 24
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	80 e5       	ldi	r24, 0x50	; 80
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	c3 de       	rcall	.-634    	; 0x1340 <crc16_eeprom_startVal>
    15ba:	ec 01       	movw	r28, r24
	if ((eeprom_read_word(&ee.eeData.ee.reg_crc) == crc) && (eeprom_read_byte(&ee.eeData.ee.charReg) == EE_CHAR_REG)){
    15bc:	88 e6       	ldi	r24, 0x68	; 104
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    15c4:	c8 17       	cp	r28, r24
    15c6:	d9 07       	cpc	r29, r25
    15c8:	b1 f4       	brne	.+44     	; 0x15f6 <eeprom_ReadReg+0x56>
    15ca:	8e e4       	ldi	r24, 0x4E	; 78
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    15d2:	82 35       	cpi	r24, 0x52	; 82
    15d4:	81 f4       	brne	.+32     	; 0x15f6 <eeprom_ReadReg+0x56>
		// stored crc is ok
		registerCount = eeprom_read_byte(&ee.eeData.ee.regCount); // actually ssems useless as registerCount is calculated from data in registerMap
    15d6:	8f e4       	ldi	r24, 0x4F	; 79
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    15de:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <registerCount>
		eeprom_read_block((uint8_t*) registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof (ee.eeData.ee.registerMap));
    15e2:	48 e1       	ldi	r20, 0x18	; 24
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	60 e5       	ldi	r22, 0x50	; 80
    15e8:	71 e0       	ldi	r23, 0x01	; 1
    15ea:	86 ef       	ldi	r24, 0xF6	; 246
    15ec:	97 e0       	ldi	r25, 0x07	; 7
    15ee:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		return(EE_LOAD_OK);
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	06 c0       	rjmp	.+12     	; 0x1602 <eeprom_ReadReg+0x62>
	} else {
		ee_initError |= EE_ERROR_REG;
    15f6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    15fa:	80 62       	ori	r24, 0x20	; 32
    15fc:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1600:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <eeprom_ReadProg>:

uint8_t eeprom_ReadProg(){
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.prog_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap)))  && (eeprom_read_byte(&ee.eeData.ee.charProg) == EE_CHAR_PROG)){
    160c:	8b ee       	ldi	r24, 0xEB	; 235
    160e:	93 e0       	ldi	r25, 0x03	; 3
    1610:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    1614:	ec 01       	movw	r28, r24
    1616:	60 e8       	ldi	r22, 0x80	; 128
    1618:	72 e0       	ldi	r23, 0x02	; 2
    161a:	8b e6       	ldi	r24, 0x6B	; 107
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	34 de       	rcall	.-920    	; 0x1288 <crc16_eeprom>
    1620:	c8 17       	cp	r28, r24
    1622:	d9 07       	cpc	r29, r25
    1624:	81 f4       	brne	.+32     	; 0x1646 <eeprom_ReadProg+0x3e>
    1626:	8a e6       	ldi	r24, 0x6A	; 106
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    162e:	80 35       	cpi	r24, 0x50	; 80
    1630:	51 f4       	brne	.+20     	; 0x1646 <eeprom_ReadProg+0x3e>
		// stored crc is ok
		eeprom_read_block((uint8_t*) programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof (ee.eeData.ee.programMap));
    1632:	40 e8       	ldi	r20, 0x80	; 128
    1634:	52 e0       	ldi	r21, 0x02	; 2
    1636:	6b e6       	ldi	r22, 0x6B	; 107
    1638:	71 e0       	ldi	r23, 0x01	; 1
    163a:	82 e6       	ldi	r24, 0x62	; 98
    163c:	99 e0       	ldi	r25, 0x09	; 9
    163e:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		return(EE_LOAD_OK);
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <eeprom_ReadProg+0x4a>
	} else {
		ee_initError |= EE_ERROR_PROG;
    1646:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    164a:	80 64       	ori	r24, 0x40	; 64
    164c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1650:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <eeprom_ReadSoftkeys>:

uint8_t eeprom_ReadSoftkeys(){
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
	if ((eeprom_read_word(&ee.eeData.ee.softKeys_crc) == crc16_eeprom((uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex)))){
    165c:	82 ef       	ldi	r24, 0xF2	; 242
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	0e 94 b3 39 	call	0x7366	; 0x7366 <eeprom_read_word>
    1664:	ec 01       	movw	r28, r24
    1666:	64 e0       	ldi	r22, 0x04	; 4
    1668:	70 e0       	ldi	r23, 0x00	; 0
    166a:	8e ee       	ldi	r24, 0xEE	; 238
    166c:	93 e0       	ldi	r25, 0x03	; 3
    166e:	0c de       	rcall	.-1000   	; 0x1288 <crc16_eeprom>
    1670:	c8 17       	cp	r28, r24
    1672:	d9 07       	cpc	r29, r25
    1674:	51 f4       	brne	.+20     	; 0x168a <eeprom_ReadSoftkeys+0x32>
		// stored crc is ok
		eeprom_read_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof (ee.eeData.ee.softKeyMenuIndex));
    1676:	44 e0       	ldi	r20, 0x04	; 4
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	6e ee       	ldi	r22, 0xEE	; 238
    167c:	73 e0       	ldi	r23, 0x03	; 3
    167e:	83 eb       	ldi	r24, 0xB3	; 179
    1680:	95 e0       	ldi	r25, 0x05	; 5
    1682:	0e 94 9b 39 	call	0x7336	; 0x7336 <eeprom_read_block>
		return(EE_LOAD_OK);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <eeprom_ReadSoftkeys+0x3e>
	} else {
		ee_initError |= EE_ERROR_ELSE;
    168a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
    168e:	80 68       	ori	r24, 0x80	; 128
    1690:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		return (EE_LOAD_ERROR);
    1694:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <eepromWriteSignature>:

void eepromWriteSignature(){
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charStart),EE_CHAR_START);
    169c:	60 e0       	ldi	r22, 0x00	; 0
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charEnd),EE_CHAR_END);
    16a6:	65 e6       	ldi	r22, 0x65	; 101
    16a8:	89 ef       	ldi	r24, 0xF9	; 249
    16aa:	93 e0       	ldi	r25, 0x03	; 3
    16ac:	0c 94 c7 39 	jmp	0x738e	; 0x738e <eeprom_update_byte>
    16b0:	08 95       	ret

000016b2 <eeprom_UpdateManualMap>:
}

void eeprom_UpdateManualMap(){
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) manualMap, sizeof(manualMap));
    16b6:	60 e3       	ldi	r22, 0x30	; 48
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	82 e3       	ldi	r24, 0x32	; 50
    16bc:	99 e0       	ldi	r25, 0x09	; 9
    16be:	be dd       	rcall	.-1156   	; 0x123c <crc16_ram>
    16c0:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    16c2:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charManMap), EE_CHAR_MANUALMAP);
    16c6:	6d e4       	ldi	r22, 0x4D	; 77
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &manualMap, (uint8_t*) &ee.eeData.ee.manualMap, sizeof(manualMap));
    16d0:	40 e3       	ldi	r20, 0x30	; 48
    16d2:	50 e0       	ldi	r21, 0x00	; 0
    16d4:	62 e0       	ldi	r22, 0x02	; 2
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	82 e3       	ldi	r24, 0x32	; 50
    16da:	99 e0       	ldi	r25, 0x09	; 9
    16dc:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.manualMap_crc, crc);
    16e0:	be 01       	movw	r22, r28
    16e2:	82 e3       	ldi	r24, 0x32	; 50
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    16ea:	d8 df       	rcall	.-80     	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    16ec:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

000016f6 <eeprom_UpdateMidiInMap>:

void eeprom_UpdateMidiInMap(){
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) midiInMap, sizeof(midiInMap));
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	71 e0       	ldi	r23, 0x01	; 1
    16fe:	86 e2       	ldi	r24, 0x26	; 38
    1700:	98 e0       	ldi	r25, 0x08	; 8
    1702:	9c dd       	rcall	.-1224   	; 0x123c <crc16_ram>
    1704:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1706:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiInMap), EE_CHAR_MIDIINMAP);
    170a:	69 e4       	ldi	r22, 0x49	; 73
    170c:	84 e3       	ldi	r24, 0x34	; 52
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiInMap, (uint8_t*) &ee.eeData.ee.midiInMap, sizeof(midiInMap));
    1714:	40 e0       	ldi	r20, 0x00	; 0
    1716:	51 e0       	ldi	r21, 0x01	; 1
    1718:	65 e3       	ldi	r22, 0x35	; 53
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	86 e2       	ldi	r24, 0x26	; 38
    171e:	98 e0       	ldi	r25, 0x08	; 8
    1720:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiInMap_crc, crc);
    1724:	be 01       	movw	r22, r28
    1726:	85 e3       	ldi	r24, 0x35	; 53
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    172e:	b6 df       	rcall	.-148    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1730:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    1734:	df 91       	pop	r29
    1736:	cf 91       	pop	r28
    1738:	08 95       	ret

0000173a <eeprom_UpdateMidiOutMap>:

void eeprom_UpdateMidiOutMap(){
    173a:	cf 93       	push	r28
    173c:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*)midiOutMap, sizeof(midiOutMap));
    173e:	68 e0       	ldi	r22, 0x08	; 8
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	86 e2       	ldi	r24, 0x26	; 38
    1744:	99 e0       	ldi	r25, 0x09	; 9
    1746:	7a dd       	rcall	.-1292   	; 0x123c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*)&midi_Setting,sizeof(midi_Setting),crc);
    1748:	ac 01       	movw	r20, r24
    174a:	63 e0       	ldi	r22, 0x03	; 3
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	8e e2       	ldi	r24, 0x2E	; 46
    1750:	99 e0       	ldi	r25, 0x09	; 9
    1752:	d1 dd       	rcall	.-1118   	; 0x12f6 <crc16_ram_startVal>
    1754:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1756:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiOutMap), EE_CHAR_MIDIOUTMAP);
    175a:	6f e4       	ldi	r22, 0x4F	; 79
    175c:	87 e3       	ldi	r24, 0x37	; 55
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiOutMap, (uint8_t*) &ee.eeData.ee.midiOutMap, sizeof(midiOutMap));
    1764:	48 e0       	ldi	r20, 0x08	; 8
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	68 e3       	ldi	r22, 0x38	; 56
    176a:	71 e0       	ldi	r23, 0x01	; 1
    176c:	86 e2       	ldi	r24, 0x26	; 38
    176e:	99 e0       	ldi	r25, 0x09	; 9
    1770:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_block((uint8_t*) &midi_Setting, (uint8_t*) &ee.eeData.ee.midiSettings, sizeof(midi_Setting));
    1774:	43 e0       	ldi	r20, 0x03	; 3
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	60 e4       	ldi	r22, 0x40	; 64
    177a:	71 e0       	ldi	r23, 0x01	; 1
    177c:	8e e2       	ldi	r24, 0x2E	; 46
    177e:	99 e0       	ldi	r25, 0x09	; 9
    1780:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_word(&ee.eeData.ee.midiOutMap_crc, crc);
    1784:	be 01       	movw	r22, r28
    1786:	83 e4       	ldi	r24, 0x43	; 67
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    178e:	86 df       	rcall	.-244    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1790:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <eeprom_UpdateModules>:

void eeprom_UpdateModules(){
    179a:	0f 93       	push	r16
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
	uint16_t crc = crc16_ram(&pipe_Module.AssnRead, sizeof(pipe_Module.AssnRead));
    17a2:	61 e0       	ldi	r22, 0x01	; 1
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	85 e5       	ldi	r24, 0x55	; 85
    17a8:	93 e0       	ldi	r25, 0x03	; 3
    17aa:	48 dd       	rcall	.-1392   	; 0x123c <crc16_ram>
    17ac:	8c 01       	movw	r16, r24
	lcd_waitSymbolOn();
    17ae:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charModInst), EE_CHAR_MODULEINSTALLED);
    17b2:	69 e6       	ldi	r22, 0x69	; 105
    17b4:	85 e4       	ldi	r24, 0x45	; 69
    17b6:	91 e0       	ldi	r25, 0x01	; 1
    17b8:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignRead), pipe_Module.AssnRead);
    17bc:	c5 e5       	ldi	r28, 0x55	; 85
    17be:	d3 e0       	ldi	r29, 0x03	; 3
    17c0:	68 81       	ld	r22, Y
    17c2:	86 e4       	ldi	r24, 0x46	; 70
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.moduleAssignWrite), pipe_Module.AssnWrite);
    17ca:	69 81       	ldd	r22, Y+1	; 0x01
    17cc:	87 e4       	ldi	r24, 0x47	; 71
    17ce:	91 e0       	ldi	r25, 0x01	; 1
    17d0:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.moduleInstalled_crc), crc);
    17d4:	b8 01       	movw	r22, r16
    17d6:	88 e4       	ldi	r24, 0x48	; 72
    17d8:	91 e0       	ldi	r25, 0x01	; 1
    17da:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    17de:	5e df       	rcall	.-324    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    17e0:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <eeprom_UpdateUSB>:

void eeprom_UpdateUSB(){
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &serUSB_Active, sizeof(serUSB_Active));
    17f2:	61 e0       	ldi	r22, 0x01	; 1
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	8e e6       	ldi	r24, 0x6E	; 110
    17f8:	95 e1       	ldi	r25, 0x15	; 21
    17fa:	20 dd       	rcall	.-1472   	; 0x123c <crc16_ram>
    17fc:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    17fe:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charUSB), EE_CHAR_USB);
    1802:	65 e5       	ldi	r22, 0x55	; 85
    1804:	8a e4       	ldi	r24, 0x4A	; 74
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.usbActive), serUSB_Active);
    180c:	60 91 6e 15 	lds	r22, 0x156E	; 0x80156e <serUSB_Active>
    1810:	8b e4       	ldi	r24, 0x4B	; 75
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_word(&(ee.eeData.ee.usb_crc), crc);
    1818:	be 01       	movw	r22, r28
    181a:	8c e4       	ldi	r24, 0x4C	; 76
    181c:	91 e0       	ldi	r25, 0x01	; 1
    181e:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    1822:	3c df       	rcall	.-392    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1824:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	08 95       	ret

0000182e <eeprom_UpdateMidiThrough>:

void eeprom_UpdateMidiThrough(){
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &midiThrough, sizeof(midiThrough));
    1832:	62 e0       	ldi	r22, 0x02	; 2
    1834:	70 e0       	ldi	r23, 0x00	; 0
    1836:	84 e2       	ldi	r24, 0x24	; 36
    1838:	98 e0       	ldi	r25, 0x08	; 8
    183a:	00 dd       	rcall	.-1536   	; 0x123c <crc16_ram>
    183c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    183e:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charMidiThrough), EE_CHAR_MIDITHROUGH);
    1842:	64 e5       	ldi	r22, 0x54	; 84
    1844:	84 ef       	ldi	r24, 0xF4	; 244
    1846:	93 e0       	ldi	r25, 0x03	; 3
    1848:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &midiThrough, (uint8_t*) &ee.eeData.ee.midiThrough, sizeof(midiThrough));
    184c:	42 e0       	ldi	r20, 0x02	; 2
    184e:	50 e0       	ldi	r21, 0x00	; 0
    1850:	65 ef       	ldi	r22, 0xF5	; 245
    1852:	73 e0       	ldi	r23, 0x03	; 3
    1854:	84 e2       	ldi	r24, 0x24	; 36
    1856:	98 e0       	ldi	r25, 0x08	; 8
    1858:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.midiThrough_crc), crc);
    185c:	be 01       	movw	r22, r28
    185e:	87 ef       	ldi	r24, 0xF7	; 247
    1860:	93 e0       	ldi	r25, 0x03	; 3
    1862:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    1866:	1a df       	rcall	.-460    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1868:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <eeprom_UpdateReg>:

void eeprom_UpdateReg(){
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &registerCount, sizeof(registerCount));
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	8e e0       	ldi	r24, 0x0E	; 14
    187c:	98 e0       	ldi	r25, 0x08	; 8
    187e:	de dc       	rcall	.-1604   	; 0x123c <crc16_ram>
	crc = crc16_ram_startVal((uint8_t*) &registerMap, sizeof(registerMap), crc);
    1880:	ac 01       	movw	r20, r24
    1882:	68 e1       	ldi	r22, 0x18	; 24
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	86 ef       	ldi	r24, 0xF6	; 246
    1888:	97 e0       	ldi	r25, 0x07	; 7
    188a:	35 dd       	rcall	.-1430   	; 0x12f6 <crc16_ram_startVal>
    188c:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    188e:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charReg), EE_CHAR_REG);
    1892:	62 e5       	ldi	r22, 0x52	; 82
    1894:	8e e4       	ldi	r24, 0x4E	; 78
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_byte(&(ee.eeData.ee.regCount), registerCount);
    189c:	60 91 0e 08 	lds	r22, 0x080E	; 0x80080e <registerCount>
    18a0:	8f e4       	ldi	r24, 0x4F	; 79
    18a2:	91 e0       	ldi	r25, 0x01	; 1
    18a4:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &registerMap, (uint8_t*) &ee.eeData.ee.registerMap, sizeof(registerMap));
    18a8:	48 e1       	ldi	r20, 0x18	; 24
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	60 e5       	ldi	r22, 0x50	; 80
    18ae:	71 e0       	ldi	r23, 0x01	; 1
    18b0:	86 ef       	ldi	r24, 0xF6	; 246
    18b2:	97 e0       	ldi	r25, 0x07	; 7
    18b4:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.reg_crc), crc);
    18b8:	be 01       	movw	r22, r28
    18ba:	88 e6       	ldi	r24, 0x68	; 104
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    18c2:	ec de       	rcall	.-552    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    18c4:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    18c8:	df 91       	pop	r29
    18ca:	cf 91       	pop	r28
    18cc:	08 95       	ret

000018ce <eeprom_UpdateProg>:

void eeprom_UpdateProg(){
    18ce:	cf 93       	push	r28
    18d0:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) &programMap, sizeof(programMap));
    18d2:	60 e8       	ldi	r22, 0x80	; 128
    18d4:	72 e0       	ldi	r23, 0x02	; 2
    18d6:	82 e6       	ldi	r24, 0x62	; 98
    18d8:	99 e0       	ldi	r25, 0x09	; 9
    18da:	b0 dc       	rcall	.-1696   	; 0x123c <crc16_ram>
    18dc:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    18de:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charProg), EE_CHAR_PROG);
    18e2:	60 e5       	ldi	r22, 0x50	; 80
    18e4:	8a e6       	ldi	r24, 0x6A	; 106
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) &programMap, (uint8_t*) &ee.eeData.ee.programMap, sizeof(programMap));
    18ec:	40 e8       	ldi	r20, 0x80	; 128
    18ee:	52 e0       	ldi	r21, 0x02	; 2
    18f0:	6b e6       	ldi	r22, 0x6B	; 107
    18f2:	71 e0       	ldi	r23, 0x01	; 1
    18f4:	82 e6       	ldi	r24, 0x62	; 98
    18f6:	99 e0       	ldi	r25, 0x09	; 9
    18f8:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.prog_crc), crc);
    18fc:	be 01       	movw	r22, r28
    18fe:	8b ee       	ldi	r24, 0xEB	; 235
    1900:	93 e0       	ldi	r25, 0x03	; 3
    1902:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    1906:	ca de       	rcall	.-620    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    1908:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	08 95       	ret

00001912 <eeprom_UpdateSoftkeys>:

void eeprom_UpdateSoftkeys(){
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
	uint16_t crc = crc16_ram((uint8_t*) soft_KeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1916:	64 e0       	ldi	r22, 0x04	; 4
    1918:	70 e0       	ldi	r23, 0x00	; 0
    191a:	83 eb       	ldi	r24, 0xB3	; 179
    191c:	95 e0       	ldi	r25, 0x05	; 5
    191e:	8e dc       	rcall	.-1764   	; 0x123c <crc16_ram>
    1920:	ec 01       	movw	r28, r24
	lcd_waitSymbolOn();
    1922:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eeprom_update_byte((uint8_t *) &(ee.eeData.ee.charSoftkey), EE_CHAR_SOFTKEYS);
    1926:	6b e4       	ldi	r22, 0x4B	; 75
    1928:	8d ee       	ldi	r24, 0xED	; 237
    192a:	93 e0       	ldi	r25, 0x03	; 3
    192c:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_update_block((uint8_t*) soft_KeyMenuIndex, (uint8_t*) &ee.eeData.ee.softKeyMenuIndex, sizeof(soft_KeyMenuIndex));
    1930:	44 e0       	ldi	r20, 0x04	; 4
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	6e ee       	ldi	r22, 0xEE	; 238
    1936:	73 e0       	ldi	r23, 0x03	; 3
    1938:	83 eb       	ldi	r24, 0xB3	; 179
    193a:	95 e0       	ldi	r25, 0x05	; 5
    193c:	0e 94 b8 39 	call	0x7370	; 0x7370 <eeprom_update_block>
	eeprom_update_word(&(ee.eeData.ee.softKeys_crc), crc);
    1940:	be 01       	movw	r22, r28
    1942:	82 ef       	ldi	r24, 0xF2	; 242
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	0e 94 d9 39 	call	0x73b2	; 0x73b2 <eeprom_update_word>
	eepromWriteSignature();
    194a:	a8 de       	rcall	.-688    	; 0x169c <eepromWriteSignature>
	lcd_waitSymbolOff();
    194c:	0e 94 d3 38 	call	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
}
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	08 95       	ret

00001956 <eeprom_UpdateALL>:

void eeprom_UpdateALL(){
	eeprom_UpdateManualMap();
    1956:	ad de       	rcall	.-678    	; 0x16b2 <eeprom_UpdateManualMap>
	eeprom_UpdateMidiInMap();
    1958:	ce de       	rcall	.-612    	; 0x16f6 <eeprom_UpdateMidiInMap>
	eeprom_UpdateMidiOutMap();
    195a:	ef de       	rcall	.-546    	; 0x173a <eeprom_UpdateMidiOutMap>
	eeprom_UpdateModules();
    195c:	1e df       	rcall	.-452    	; 0x179a <eeprom_UpdateModules>
	eeprom_UpdateUSB();
    195e:	47 df       	rcall	.-370    	; 0x17ee <eeprom_UpdateUSB>
	eeprom_UpdateReg();
    1960:	88 df       	rcall	.-240    	; 0x1872 <eeprom_UpdateReg>
    1962:	b5 df       	rcall	.-150    	; 0x18ce <eeprom_UpdateProg>
	eeprom_UpdateProg();
    1964:	d6 df       	rcall	.-84     	; 0x1912 <eeprom_UpdateSoftkeys>
    1966:	63 cf       	rjmp	.-314    	; 0x182e <eeprom_UpdateMidiThrough>
	eeprom_UpdateSoftkeys();
    1968:	08 95       	ret

0000196a <eepromCopy>:
    196a:	cf 92       	push	r12
	eeprom_UpdateMidiThrough();
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	eb 01       	movw	r28, r22
	while (count-- > 0){
    197c:	11 c0       	rjmp	.+34     	; 0x19a0 <eepromCopy+0x36>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    197e:	7c 01       	movw	r14, r24
    1980:	2f ef       	ldi	r18, 0xFF	; 255
    1982:	e2 1a       	sub	r14, r18
    1984:	f2 0a       	sbc	r15, r18
    1986:	0e 94 ab 39 	call	0x7356	; 0x7356 <eeprom_read_byte>
    198a:	6e 01       	movw	r12, r28
    198c:	9f ef       	ldi	r25, 0xFF	; 255
    198e:	c9 1a       	sub	r12, r25
    1990:	d9 0a       	sbc	r13, r25
    1992:	68 2f       	mov	r22, r24
    1994:	ce 01       	movw	r24, r28
    1996:	0e 94 c7 39 	call	0x738e	; 0x738e <eeprom_update_byte>
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    199a:	a8 01       	movw	r20, r16
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
    199c:	e6 01       	movw	r28, r12
    199e:	c7 01       	movw	r24, r14
	eeprom_UpdateMidiThrough();
}


void eepromCopy(uint8_t* pSource, uint8_t* pDest, uint16_t count){
	while (count-- > 0){
    19a0:	8a 01       	movw	r16, r20
    19a2:	01 50       	subi	r16, 0x01	; 1
    19a4:	11 09       	sbc	r17, r1
    19a6:	45 2b       	or	r20, r21
    19a8:	51 f7       	brne	.-44     	; 0x197e <eepromCopy+0x14>
		eeprom_update_byte(pDest++,eeprom_read_byte(pSource++));
	}
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	0f 91       	pop	r16
    19b2:	ff 90       	pop	r15
    19b4:	ef 90       	pop	r14
    19b6:	df 90       	pop	r13
    19b8:	cf 90       	pop	r12
    19ba:	08 95       	ret

000019bc <eeprom_Backup>:

void eeprom_Backup(){
	lcd_waitSymbolOn();
    19bc:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeData.raw[0]), (uint8_t *) &(ee.eeBackup.raw[0]), sizeof(EEblock_t));
    19c0:	40 e0       	ldi	r20, 0x00	; 0
    19c2:	58 e0       	ldi	r21, 0x08	; 8
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	78 e0       	ldi	r23, 0x08	; 8
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	ce df       	rcall	.-100    	; 0x196a <eepromCopy>
	lcd_waitSymbolOff();
    19ce:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
    19d2:	08 95       	ret

000019d4 <eeprom_Restore>:
}

void eeprom_Restore(){
	lcd_waitSymbolOn();
    19d4:	0e 94 c5 38 	call	0x718a	; 0x718a <lcd_waitSymbolOn>
	eepromCopy((uint8_t*) &(ee.eeBackup.raw[0]), (uint8_t *) &(ee.eeData.raw[0]), sizeof(EEblock_t));
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	58 e0       	ldi	r21, 0x08	; 8
    19dc:	60 e0       	ldi	r22, 0x00	; 0
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	98 e0       	ldi	r25, 0x08	; 8
    19e4:	c2 df       	rcall	.-124    	; 0x196a <eepromCopy>
	lcd_waitSymbolOff();
    19e6:	0c 94 d3 38 	jmp	0x71a6	; 0x71a6 <lcd_waitSymbolOff>
    19ea:	08 95       	ret

000019ec <init_Timers>:
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
		pPipe->pipeOut = 0xFF;
		pPipe->pipeOutM4 = 0xFF;
		pPipe++;
	}
	MESSAGE_PIPE_HANDLING_ON
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	0a c0       	rjmp	.+20     	; 0x1a04 <init_Timers+0x18>
    19f0:	e8 2f       	mov	r30, r24
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
    19f8:	e1 5d       	subi	r30, 0xD1	; 209
    19fa:	fd 4f       	sbci	r31, 0xFD	; 253
    19fc:	9f ef       	ldi	r25, 0xFF	; 255
    19fe:	90 83       	st	Z, r25
    1a00:	11 82       	std	Z+1, r1	; 0x01
    1a02:	8f 5f       	subi	r24, 0xFF	; 255
    1a04:	89 30       	cpi	r24, 0x09	; 9
    1a06:	a0 f3       	brcs	.-24     	; 0x19f0 <init_Timers+0x4>
    1a08:	e1 e4       	ldi	r30, 0x41	; 65
    1a0a:	f2 e0       	ldi	r31, 0x02	; 2
    1a0c:	10 82       	st	Z, r1
    1a0e:	11 82       	std	Z+1, r1	; 0x01
    1a10:	12 82       	std	Z+2, r1	; 0x02
    1a12:	13 82       	std	Z+3, r1	; 0x03
    1a14:	8f ef       	ldi	r24, 0xFF	; 255
    1a16:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
    1a1a:	08 95       	ret

00001a1c <init_HwTimer>:
    1a1c:	82 e0       	ldi	r24, 0x02	; 2
    1a1e:	84 bd       	out	0x24, r24	; 36
    1a20:	93 e0       	ldi	r25, 0x03	; 3
    1a22:	95 bd       	out	0x25, r25	; 37
    1a24:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x70006e>
    1a28:	89 ef       	ldi	r24, 0xF9	; 249
    1a2a:	87 bd       	out	0x27, r24	; 39
    1a2c:	85 b1       	in	r24, 0x05	; 5
    1a2e:	8f 77       	andi	r24, 0x7F	; 127
    1a30:	85 b9       	out	0x05, r24	; 5
    1a32:	84 b1       	in	r24, 0x04	; 4
    1a34:	80 68       	ori	r24, 0x80	; 128
    1a36:	84 b9       	out	0x04, r24	; 4
    1a38:	08 95       	ret

00001a3a <init_ADC>:
    1a3a:	87 e8       	ldi	r24, 0x87	; 135
    1a3c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1a40:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    1a44:	8f e7       	ldi	r24, 0x7F	; 127
    1a46:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x70007e>
    1a50:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <__TEXT_REGION_LENGTH__+0x70007f>
    1a54:	e9 e4       	ldi	r30, 0x49	; 73
    1a56:	f3 e0       	ldi	r31, 0x03	; 3
    1a58:	10 82       	st	Z, r1
    1a5a:	8f ef       	ldi	r24, 0xFF	; 255
    1a5c:	81 83       	std	Z+1, r24	; 0x01
    1a5e:	82 83       	std	Z+2, r24	; 0x02
    1a60:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	10 c0       	rjmp	.+32     	; 0x1a88 <init_ADC+0x4e>
    1a68:	85 30       	cpi	r24, 0x05	; 5
    1a6a:	39 f4       	brne	.+14     	; 0x1a7a <init_ADC+0x40>
    1a6c:	e8 2f       	mov	r30, r24
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	e1 5b       	subi	r30, 0xB1	; 177
    1a72:	fc 4f       	sbci	r31, 0xFC	; 252
    1a74:	96 e0       	ldi	r25, 0x06	; 6
    1a76:	90 83       	st	Z, r25
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <init_ADC+0x4c>
    1a7a:	e8 2f       	mov	r30, r24
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	e1 5b       	subi	r30, 0xB1	; 177
    1a80:	fc 4f       	sbci	r31, 0xFC	; 252
    1a82:	9a e0       	ldi	r25, 0x0A	; 10
    1a84:	90 83       	st	Z, r25
    1a86:	8f 5f       	subi	r24, 0xFF	; 255
    1a88:	86 30       	cpi	r24, 0x06	; 6
    1a8a:	70 f3       	brcs	.-36     	; 0x1a68 <init_ADC+0x2e>
    1a8c:	08 95       	ret

00001a8e <init_Pipe>:
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
    1a90:	88 b9       	out	0x08, r24	; 8
    1a92:	87 b9       	out	0x07, r24	; 7
    1a94:	82 b9       	out	0x02, r24	; 2
    1a96:	11 b8       	out	0x01, r1	; 1
    1a98:	84 b3       	in	r24, 0x14	; 20
    1a9a:	87 60       	ori	r24, 0x07	; 7
    1a9c:	84 bb       	out	0x14, r24	; 20
    1a9e:	83 b3       	in	r24, 0x13	; 19
    1aa0:	87 60       	ori	r24, 0x07	; 7
    1aa2:	83 bb       	out	0x13, r24	; 19
    1aa4:	8b b1       	in	r24, 0x0b	; 11
    1aa6:	8f 77       	andi	r24, 0x7F	; 127
    1aa8:	8b b9       	out	0x0b, r24	; 11
    1aaa:	8a b1       	in	r24, 0x0a	; 10
    1aac:	80 68       	ori	r24, 0x80	; 128
    1aae:	8a b9       	out	0x0a, r24	; 10
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e c0       	rjmp	.+28     	; 0x1ad0 <init_Pipe+0x42>
    1ab4:	e8 2f       	mov	r30, r24
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	e7 5b       	subi	r30, 0xB7	; 183
    1ac6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	91 83       	std	Z+1, r25	; 0x01
    1acc:	90 83       	st	Z, r25
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	80 32       	cpi	r24, 0x20	; 32
    1ad2:	80 f3       	brcs	.-32     	; 0x1ab4 <init_Pipe+0x26>
    1ad4:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1ad8:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
    1adc:	08 95       	ret

00001ade <init_PipeModules>:
    1ade:	e6 dc       	rcall	.-1588   	; 0x14ac <eeprom_ReadModules>
    1ae0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae2:	51 f4       	brne	.+20     	; 0x1af8 <init_PipeModules+0x1a>
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	50 e0       	ldi	r21, 0x00	; 0
    1ae8:	60 e0       	ldi	r22, 0x00	; 0
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	2b d7       	rcall	.+3670   	; 0x2944 <log_putError>
    1aee:	e5 e5       	ldi	r30, 0x55	; 85
    1af0:	f3 e0       	ldi	r31, 0x03	; 3
    1af2:	8f ef       	ldi	r24, 0xFF	; 255
    1af4:	80 83       	st	Z, r24
    1af6:	81 83       	std	Z+1, r24	; 0x01
    1af8:	8b b1       	in	r24, 0x0b	; 11
    1afa:	8f 77       	andi	r24, 0x7F	; 127
    1afc:	8b b9       	out	0x0b, r24	; 11
    1afe:	84 b3       	in	r24, 0x14	; 20
    1b00:	87 60       	ori	r24, 0x07	; 7
    1b02:	84 bb       	out	0x14, r24	; 20
    1b04:	84 b3       	in	r24, 0x14	; 20
    1b06:	8b 7f       	andi	r24, 0xFB	; 251
    1b08:	84 bb       	out	0x14, r24	; 20
    1b0a:	85 e0       	ldi	r24, 0x05	; 5
    1b0c:	8a 95       	dec	r24
    1b0e:	f1 f7       	brne	.-4      	; 0x1b0c <init_PipeModules+0x2e>
    1b10:	00 00       	nop
    1b12:	84 b3       	in	r24, 0x14	; 20
    1b14:	84 60       	ori	r24, 0x04	; 4
    1b16:	84 bb       	out	0x14, r24	; 20
    1b18:	90 e2       	ldi	r25, 0x20	; 32
    1b1a:	84 b3       	in	r24, 0x14	; 20
    1b1c:	81 60       	ori	r24, 0x01	; 1
    1b1e:	84 bb       	out	0x14, r24	; 20
    1b20:	90 fd       	sbrc	r25, 0
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <init_PipeModules+0x4a>
    1b24:	85 e5       	ldi	r24, 0x55	; 85
    1b26:	01 c0       	rjmp	.+2      	; 0x1b2a <init_PipeModules+0x4c>
    1b28:	8a ea       	ldi	r24, 0xAA	; 170
    1b2a:	88 b9       	out	0x08, r24	; 8
    1b2c:	80 b1       	in	r24, 0x00	; 0
    1b2e:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <pipe+0xff>
    1b32:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <pipe+0xfe>
    1b36:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <pipe+0xfd>
    1b3a:	80 93 45 03 	sts	0x0345, r24	; 0x800345 <pipe+0xfc>
    1b3e:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <pipe+0xfb>
    1b42:	80 93 43 03 	sts	0x0343, r24	; 0x800343 <pipe+0xfa>
    1b46:	84 b3       	in	r24, 0x14	; 20
    1b48:	8e 7f       	andi	r24, 0xFE	; 254
    1b4a:	84 bb       	out	0x14, r24	; 20
    1b4c:	85 e0       	ldi	r24, 0x05	; 5
    1b4e:	8a 95       	dec	r24
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <init_PipeModules+0x70>
    1b52:	00 00       	nop
    1b54:	91 50       	subi	r25, 0x01	; 1
    1b56:	09 f7       	brne	.-62     	; 0x1b1a <init_PipeModules+0x3c>
    1b58:	90 e2       	ldi	r25, 0x20	; 32
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <init_PipeModules+0x9c>
    1b5c:	84 b3       	in	r24, 0x14	; 20
    1b5e:	81 60       	ori	r24, 0x01	; 1
    1b60:	84 bb       	out	0x14, r24	; 20
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	8a 95       	dec	r24
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <init_PipeModules+0x86>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <init_PipeModules+0x8c>
    1b6a:	84 b3       	in	r24, 0x14	; 20
    1b6c:	8e 7f       	andi	r24, 0xFE	; 254
    1b6e:	84 bb       	out	0x14, r24	; 20
    1b70:	82 e0       	ldi	r24, 0x02	; 2
    1b72:	8a 95       	dec	r24
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <init_PipeModules+0x94>
    1b76:	00 c0       	rjmp	.+0      	; 0x1b78 <init_PipeModules+0x9a>
    1b78:	91 50       	subi	r25, 0x01	; 1
    1b7a:	91 11       	cpse	r25, r1
    1b7c:	ef cf       	rjmp	.-34     	; 0x1b5c <init_PipeModules+0x7e>
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1b84:	90 e2       	ldi	r25, 0x20	; 32
    1b86:	84 b3       	in	r24, 0x14	; 20
    1b88:	81 60       	ori	r24, 0x01	; 1
    1b8a:	84 bb       	out	0x14, r24	; 20
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	88 b9       	out	0x08, r24	; 8
    1b90:	20 b1       	in	r18, 0x00	; 0
    1b92:	90 fd       	sbrc	r25, 0
    1b94:	02 c0       	rjmp	.+4      	; 0x1b9a <init_PipeModules+0xbc>
    1b96:	8a ea       	ldi	r24, 0xAA	; 170
    1b98:	01 c0       	rjmp	.+2      	; 0x1b9c <init_PipeModules+0xbe>
    1b9a:	85 e5       	ldi	r24, 0x55	; 85
    1b9c:	82 27       	eor	r24, r18
    1b9e:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <pipe_ModuleTested>
    1ba2:	82 23       	and	r24, r18
    1ba4:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <pipe_ModuleTested>
    1ba8:	84 b3       	in	r24, 0x14	; 20
    1baa:	8e 7f       	andi	r24, 0xFE	; 254
    1bac:	84 bb       	out	0x14, r24	; 20
    1bae:	85 e0       	ldi	r24, 0x05	; 5
    1bb0:	8a 95       	dec	r24
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <init_PipeModules+0xd2>
    1bb4:	00 00       	nop
    1bb6:	91 50       	subi	r25, 0x01	; 1
    1bb8:	31 f7       	brne	.-52     	; 0x1b86 <init_PipeModules+0xa8>
    1bba:	00 00       	nop
    1bbc:	00 00       	nop
    1bbe:	84 b3       	in	r24, 0x14	; 20
    1bc0:	81 60       	ori	r24, 0x01	; 1
    1bc2:	84 bb       	out	0x14, r24	; 20
    1bc4:	84 b3       	in	r24, 0x14	; 20
    1bc6:	87 60       	ori	r24, 0x07	; 7
    1bc8:	84 bb       	out	0x14, r24	; 20
    1bca:	84 b3       	in	r24, 0x14	; 20
    1bcc:	8b 7f       	andi	r24, 0xFB	; 251
    1bce:	84 bb       	out	0x14, r24	; 20
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	8a 95       	dec	r24
    1bd4:	f1 f7       	brne	.-4      	; 0x1bd2 <init_PipeModules+0xf4>
    1bd6:	00 c0       	rjmp	.+0      	; 0x1bd8 <init_PipeModules+0xfa>
    1bd8:	84 b3       	in	r24, 0x14	; 20
    1bda:	84 60       	ori	r24, 0x04	; 4
    1bdc:	84 bb       	out	0x14, r24	; 20
    1bde:	90 e2       	ldi	r25, 0x20	; 32
    1be0:	e1 e4       	ldi	r30, 0x41	; 65
    1be2:	f3 e0       	ldi	r31, 0x03	; 3
    1be4:	83 81       	ldd	r24, Z+3	; 0x03
    1be6:	82 83       	std	Z+2, r24	; 0x02
    1be8:	84 81       	ldd	r24, Z+4	; 0x04
    1bea:	83 83       	std	Z+3, r24	; 0x03
    1bec:	84 b3       	in	r24, 0x14	; 20
    1bee:	81 60       	ori	r24, 0x01	; 1
    1bf0:	84 bb       	out	0x14, r24	; 20
    1bf2:	8f ef       	ldi	r24, 0xFF	; 255
    1bf4:	81 83       	std	Z+1, r24	; 0x01
    1bf6:	88 b9       	out	0x08, r24	; 8
    1bf8:	85 81       	ldd	r24, Z+5	; 0x05
    1bfa:	84 83       	std	Z+4, r24	; 0x04
    1bfc:	86 81       	ldd	r24, Z+6	; 0x06
    1bfe:	85 83       	std	Z+5, r24	; 0x05
    1c00:	80 b1       	in	r24, 0x00	; 0
    1c02:	86 83       	std	Z+6, r24	; 0x06
    1c04:	82 83       	std	Z+2, r24	; 0x02
    1c06:	83 83       	std	Z+3, r24	; 0x03
    1c08:	84 83       	std	Z+4, r24	; 0x04
    1c0a:	85 83       	std	Z+5, r24	; 0x05
    1c0c:	87 83       	std	Z+7, r24	; 0x07
    1c0e:	84 b3       	in	r24, 0x14	; 20
    1c10:	8e 7f       	andi	r24, 0xFE	; 254
    1c12:	84 bb       	out	0x14, r24	; 20
    1c14:	38 97       	sbiw	r30, 0x08	; 8
    1c16:	91 50       	subi	r25, 0x01	; 1
    1c18:	29 f7       	brne	.-54     	; 0x1be4 <init_PipeModules+0x106>
    1c1a:	00 00       	nop
    1c1c:	00 00       	nop
    1c1e:	84 b3       	in	r24, 0x14	; 20
    1c20:	81 60       	ori	r24, 0x01	; 1
    1c22:	84 bb       	out	0x14, r24	; 20
    1c24:	84 b3       	in	r24, 0x14	; 20
    1c26:	8d 7f       	andi	r24, 0xFD	; 253
    1c28:	84 bb       	out	0x14, r24	; 20
    1c2a:	18 b8       	out	0x08, r1	; 8
    1c2c:	85 e0       	ldi	r24, 0x05	; 5
    1c2e:	8a 95       	dec	r24
    1c30:	f1 f7       	brne	.-4      	; 0x1c2e <init_PipeModules+0x150>
    1c32:	00 00       	nop
    1c34:	84 b3       	in	r24, 0x14	; 20
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	84 bb       	out	0x14, r24	; 20
    1c3a:	e5 e5       	ldi	r30, 0x55	; 85
    1c3c:	f3 e0       	ldi	r31, 0x03	; 3
    1c3e:	81 81       	ldd	r24, Z+1	; 0x01
    1c40:	40 81       	ld	r20, Z
    1c42:	84 2b       	or	r24, r20
    1c44:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
    1c48:	89 17       	cp	r24, r25
    1c4a:	39 f0       	breq	.+14     	; 0x1c5a <init_PipeModules+0x17c>
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	54 2f       	mov	r21, r20
    1c50:	44 27       	eor	r20, r20
    1c52:	49 2b       	or	r20, r25
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	82 e0       	ldi	r24, 0x02	; 2
    1c58:	75 c6       	rjmp	.+3306   	; 0x2944 <log_putError>
    1c5a:	08 95       	ret

00001c5c <test_PipeModule>:
    1c5c:	88 30       	cpi	r24, 0x08	; 8
    1c5e:	08 f0       	brcs	.+2      	; 0x1c62 <test_PipeModule+0x6>
    1c60:	6a c0       	rjmp	.+212    	; 0x1d36 <test_PipeModule+0xda>
    1c62:	31 e0       	ldi	r19, 0x01	; 1
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <test_PipeModule+0xc>
    1c66:	33 0f       	add	r19, r19
    1c68:	8a 95       	dec	r24
    1c6a:	ea f7       	brpl	.-6      	; 0x1c66 <test_PipeModule+0xa>
    1c6c:	80 e8       	ldi	r24, 0x80	; 128
    1c6e:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    1c72:	8b b1       	in	r24, 0x0b	; 11
    1c74:	8f 77       	andi	r24, 0x7F	; 127
    1c76:	8b b9       	out	0x0b, r24	; 11
    1c78:	84 b3       	in	r24, 0x14	; 20
    1c7a:	87 60       	ori	r24, 0x07	; 7
    1c7c:	84 bb       	out	0x14, r24	; 20
    1c7e:	40 e0       	ldi	r20, 0x00	; 0
    1c80:	1d c0       	rjmp	.+58     	; 0x1cbc <test_PipeModule+0x60>
    1c82:	20 fd       	sbrc	r18, 0
    1c84:	03 c0       	rjmp	.+6      	; 0x1c8c <test_PipeModule+0x30>
    1c86:	83 2f       	mov	r24, r19
    1c88:	80 95       	com	r24
    1c8a:	01 c0       	rjmp	.+2      	; 0x1c8e <test_PipeModule+0x32>
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	88 b9       	out	0x08, r24	; 8
    1c90:	26 95       	lsr	r18
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	8a 95       	dec	r24
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <test_PipeModule+0x38>
    1c98:	00 c0       	rjmp	.+0      	; 0x1c9a <test_PipeModule+0x3e>
    1c9a:	84 b3       	in	r24, 0x14	; 20
    1c9c:	8e 7f       	andi	r24, 0xFE	; 254
    1c9e:	84 bb       	out	0x14, r24	; 20
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	8a 95       	dec	r24
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <test_PipeModule+0x46>
    1ca6:	00 c0       	rjmp	.+0      	; 0x1ca8 <test_PipeModule+0x4c>
    1ca8:	84 b3       	in	r24, 0x14	; 20
    1caa:	81 60       	ori	r24, 0x01	; 1
    1cac:	84 bb       	out	0x14, r24	; 20
    1cae:	9f 5f       	subi	r25, 0xFF	; 255
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <test_PipeModule+0x5a>
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	25 ea       	ldi	r18, 0xA5	; 165
    1cb6:	98 30       	cpi	r25, 0x08	; 8
    1cb8:	20 f3       	brcs	.-56     	; 0x1c82 <test_PipeModule+0x26>
    1cba:	4f 5f       	subi	r20, 0xFF	; 255
    1cbc:	44 30       	cpi	r20, 0x04	; 4
    1cbe:	c8 f3       	brcs	.-14     	; 0x1cb2 <test_PipeModule+0x56>
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <test_PipeModule+0x86>
    1cc4:	82 e0       	ldi	r24, 0x02	; 2
    1cc6:	8a 95       	dec	r24
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <test_PipeModule+0x6a>
    1cca:	00 c0       	rjmp	.+0      	; 0x1ccc <test_PipeModule+0x70>
    1ccc:	84 b3       	in	r24, 0x14	; 20
    1cce:	8e 7f       	andi	r24, 0xFE	; 254
    1cd0:	84 bb       	out	0x14, r24	; 20
    1cd2:	82 e0       	ldi	r24, 0x02	; 2
    1cd4:	8a 95       	dec	r24
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <test_PipeModule+0x78>
    1cd8:	00 c0       	rjmp	.+0      	; 0x1cda <test_PipeModule+0x7e>
    1cda:	84 b3       	in	r24, 0x14	; 20
    1cdc:	81 60       	ori	r24, 0x01	; 1
    1cde:	84 bb       	out	0x14, r24	; 20
    1ce0:	9f 5f       	subi	r25, 0xFF	; 255
    1ce2:	90 32       	cpi	r25, 0x20	; 32
    1ce4:	78 f3       	brcs	.-34     	; 0x1cc4 <test_PipeModule+0x68>
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	ba 01       	movw	r22, r20
    1cee:	17 c0       	rjmp	.+46     	; 0x1d1e <test_PipeModule+0xc2>
    1cf0:	44 0f       	add	r20, r20
    1cf2:	55 1f       	adc	r21, r21
    1cf4:	66 1f       	adc	r22, r22
    1cf6:	77 1f       	adc	r23, r23
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	8a 95       	dec	r24
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <test_PipeModule+0x9e>
    1cfe:	00 c0       	rjmp	.+0      	; 0x1d00 <test_PipeModule+0xa4>
    1d00:	84 b3       	in	r24, 0x14	; 20
    1d02:	8e 7f       	andi	r24, 0xFE	; 254
    1d04:	84 bb       	out	0x14, r24	; 20
    1d06:	80 b1       	in	r24, 0x00	; 0
    1d08:	83 23       	and	r24, r19
    1d0a:	09 f0       	breq	.+2      	; 0x1d0e <test_PipeModule+0xb2>
    1d0c:	41 60       	ori	r20, 0x01	; 1
    1d0e:	82 e0       	ldi	r24, 0x02	; 2
    1d10:	8a 95       	dec	r24
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <test_PipeModule+0xb4>
    1d14:	00 c0       	rjmp	.+0      	; 0x1d16 <test_PipeModule+0xba>
    1d16:	84 b3       	in	r24, 0x14	; 20
    1d18:	81 60       	ori	r24, 0x01	; 1
    1d1a:	84 bb       	out	0x14, r24	; 20
    1d1c:	9f 5f       	subi	r25, 0xFF	; 255
    1d1e:	90 32       	cpi	r25, 0x20	; 32
    1d20:	38 f3       	brcs	.-50     	; 0x1cf0 <test_PipeModule+0x94>
    1d22:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
    1d26:	8b b1       	in	r24, 0x0b	; 11
    1d28:	80 68       	ori	r24, 0x80	; 128
    1d2a:	8b b9       	out	0x0b, r24	; 11
    1d2c:	34 2f       	mov	r19, r20
    1d2e:	25 2f       	mov	r18, r21
    1d30:	86 2f       	mov	r24, r22
    1d32:	97 2f       	mov	r25, r23
    1d34:	04 c0       	rjmp	.+8      	; 0x1d3e <test_PipeModule+0xe2>
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	63 2f       	mov	r22, r19
    1d40:	72 2f       	mov	r23, r18
    1d42:	08 95       	ret

00001d44 <module_TestAllInputs>:
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d44:	90 e0       	ldi	r25, 0x00	; 0
uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
    1d46:	e9 e4       	ldi	r30, 0x49	; 73
    1d48:	f2 e0       	ldi	r31, 0x02	; 2

uint8_t module_TestAllInputs(){
	// returns 0 if all inputs are off
	// returns bit "1" for reach module that has at least one active input (LSB = module 0)
	// also turns all outouts off
	uint8_t result = 0;
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d4c:	06 c0       	rjmp	.+12     	; 0x1d5a <module_TestAllInputs+0x16>
		pPipe->pipeOut = 0xFF; // outputs off
    1d4e:	2f ef       	ldi	r18, 0xFF	; 255
    1d50:	21 83       	std	Z+1, r18	; 0x01
		result |= pPipe->pipeIn;
    1d52:	26 81       	ldd	r18, Z+6	; 0x06
    1d54:	82 2b       	or	r24, r18
		pPipe++;
    1d56:	38 96       	adiw	r30, 0x08	; 8
	uint8_t result = 0;
	Pipe_t* pPipe = &(pipe[0]);
	// read all 32 recent input  values
	// only for module that are assigned to read,
	// but also for modules that did NOT pass loop test or that are NOT assigned to write
	for (uint8_t i = 0; i < PIPE_SHIFTBIT_COUNT; i++){
    1d58:	9f 5f       	subi	r25, 0xFF	; 255
    1d5a:	90 32       	cpi	r25, 0x20	; 32
    1d5c:	c0 f3       	brcs	.-16     	; 0x1d4e <module_TestAllInputs+0xa>
		pPipe->pipeOut = 0xFF; // outputs off
		result |= pPipe->pipeIn;
		pPipe++;
	}
	// V 0.65 & pipe_ModuleTested
	return result & pipe_Module.AssnRead & pipe_ModuleTested; // modules unassgined to read will be ignored (return bit=0)
    1d5e:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <pipe_Module>
    1d62:	89 23       	and	r24, r25
    1d64:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <pipe_ModuleTested>
}
    1d68:	89 23       	and	r24, r25
    1d6a:	08 95       	ret

00001d6c <module_WaitOutputInput2Cycles>:

void module_WaitOutputInput2Cycles(){
	// wait until current output in pipe[] is transferred to modules and inputs is read back to pipe[]
	// does NOT wait until these input values are proccessed to pipe messages!
	pipeProcessing = PIPE_IO_START;
    1d6c:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d70:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d74:	81 ff       	sbrs	r24, 1
    1d76:	fc cf       	rjmp	.-8      	; 0x1d70 <module_WaitOutputInput2Cycles+0x4>
		// wait for Data write to outpur
	}
	pipeProcessing = PIPE_IO_START;
    1d78:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <pipeProcessing>
	while ((pipeProcessing & PIPE_IO_INOUT_DONE) == 0){
    1d7c:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    1d80:	81 ff       	sbrs	r24, 1
    1d82:	fc cf       	rjmp	.-8      	; 0x1d7c <module_WaitOutputInput2Cycles+0x10>
		// wait for Data read back from input
	}
}
    1d84:	08 95       	ret

00001d86 <module_StartPowerOn>:

void module_StartPowerOn(){
	// just before main loop: start timer to init power on
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    1d8c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1d8e:	f8 94       	cli
    1d90:	06 c0       	rjmp	.+12     	; 0x1d9e <module_StartPowerOn+0x18>
    1d92:	ef e2       	ldi	r30, 0x2F	; 47
    1d94:	f2 e0       	ldi	r31, 0x02	; 2
    1d96:	88 e2       	ldi	r24, 0x28	; 40
    1d98:	82 83       	std	Z+2, r24	; 0x02
    1d9a:	13 82       	std	Z+3, r1	; 0x03
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	81 11       	cpse	r24, r1
    1da0:	f8 cf       	rjmp	.-16     	; 0x1d92 <module_StartPowerOn+0xc>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1da2:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1da4:	08 95       	ret

00001da6 <module_PowerControl>:
}

void module_PowerControl(){
	// call when timer is elapsed
	if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE) {
    1da6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	31 f5       	brne	.+76     	; 0x1dfa <module_PowerControl+0x54>
		// now check inputs
		if (module_TestAllInputs() == 0){
    1dae:	ca df       	rcall	.-108    	; 0x1d44 <module_TestAllInputs>
    1db0:	81 11       	cpse	r24, r1
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <module_PowerControl+0x36>
			// all inputs are low, start power on and wait a little bit
			POWER_ON
    1db4:	85 b1       	in	r24, 0x05	; 5
    1db6:	80 64       	ori	r24, 0x40	; 64
    1db8:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_WAIT_FOR_POWERON;
    1dba:	82 e1       	ldi	r24, 0x12	; 18
    1dbc:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
			TIMER_SET(TIMER_POWER,TIMER_POWER_CHECK_MS)
    1dc0:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1dc2:	f8 94       	cli
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	06 c0       	rjmp	.+12     	; 0x1dd4 <module_PowerControl+0x2e>
    1dc8:	ef e2       	ldi	r30, 0x2F	; 47
    1dca:	f2 e0       	ldi	r31, 0x02	; 2
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	82 83       	std	Z+2, r24	; 0x02
    1dd0:	13 82       	std	Z+3, r1	; 0x03
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	81 11       	cpse	r24, r1
    1dd6:	f8 cf       	rjmp	.-16     	; 0x1dc8 <module_PowerControl+0x22>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1dd8:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1dda:	08 95       	ret
		} else {
			// keys are not released
			TIMER_SET(TIMER_POWER,TIMER_POWER_TEST_REPEAT_MS)
    1ddc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    1dde:	f8 94       	cli
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	07 c0       	rjmp	.+14     	; 0x1df2 <module_PowerControl+0x4c>
    1de4:	ef e2       	ldi	r30, 0x2F	; 47
    1de6:	f2 e0       	ldi	r31, 0x02	; 2
    1de8:	8c e0       	ldi	r24, 0x0C	; 12
    1dea:	82 83       	std	Z+2, r24	; 0x02
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	83 83       	std	Z+3, r24	; 0x03
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	81 11       	cpse	r24, r1
    1df4:	f7 cf       	rjmp	.-18     	; 0x1de4 <module_PowerControl+0x3e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    1df6:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    1df8:	08 95       	ret
		}
	} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    1dfa:	82 31       	cpi	r24, 0x12	; 18
		uint8_t testResult = module_TestAllInputs();
    1dfc:	b1 f4       	brne	.+44     	; 0x1e2a <module_PowerControl+0x84>
    1dfe:	a2 df       	rcall	.-188    	; 0x1d44 <module_TestAllInputs>
		if (testResult == 0){
    1e00:	81 11       	cpse	r24, r1
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <module_PowerControl+0x66>
			// inputs still off, seems ok
			pipe_PowerStatus = POWERSTATE_POWER_ON;
    1e04:	84 e1       	ldi	r24, 0x14	; 20
    1e06:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
    1e0a:	0b c0       	rjmp	.+22     	; 0x1e22 <module_PowerControl+0x7c>
		} else {
			// inputs are no low any more, MOSFET defective?
			log_putError(LOG_CAT_POWER,LOG_CATPOWER_OUTPUTSON,testResult);
    1e0c:	48 2f       	mov	r20, r24
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	60 e0       	ldi	r22, 0x00	; 0
    1e12:	85 e0       	ldi	r24, 0x05	; 5
    1e14:	97 d5       	rcall	.+2862   	; 0x2944 <log_putError>
			POWER_OFF
    1e16:	85 b1       	in	r24, 0x05	; 5
    1e18:	8f 7b       	andi	r24, 0xBF	; 191
    1e1a:	85 b9       	out	0x05, r24	; 5
			pipe_PowerStatus = POWERSTATE_OFF_DUE_TO_ERROR;
    1e1c:	80 e8       	ldi	r24, 0x80	; 128
    1e1e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
		}
		// final action, no more timer
		TIMER_DEACTIVATE(TIMER_POWER)
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e28:	08 95       	ret
	} else {
		TIMER_DEACTIVATE(TIMER_POWER)
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <swTimer+0x2>
    1e30:	08 95       	ret

00001e32 <softKey_WantLong>:
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0d c0       	rjmp	.+26     	; 0x1e50 <softKey_WantLong+0x1e>
		// i = 0 is not used (dummy only) array starts with MESSAGE_KEY_MIN
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
    1e36:	94 30       	cpi	r25, 0x04	; 4
    1e38:	50 f4       	brcc	.+20     	; 0x1e4e <softKey_WantLong+0x1c>
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
    1e3a:	e9 2f       	mov	r30, r25
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	81 11       	cpse	r24, r1
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <softKey_WantLong+0x14>
    1e42:	2a e0       	ldi	r18, 0x0A	; 10
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <softKey_WantLong+0x16>
    1e46:	26 e0       	ldi	r18, 0x06	; 6
    1e48:	e1 5b       	subi	r30, 0xB1	; 177
    1e4a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e4c:	20 83       	st	Z, r18
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
}

void softKey_WantLong(uint8_t wantLong){
	// 0 for wants repeat, != 0 for wantLong
	for (uint8_t i = 0; i < MESSAGE_KEY_COUNT; i++){
    1e4e:	9f 5f       	subi	r25, 0xFF	; 255
    1e50:	96 30       	cpi	r25, 0x06	; 6
    1e52:	88 f3       	brcs	.-30     	; 0x1e36 <softKey_WantLong+0x4>
		if ((i+MESSAGE_KEY_MIN == MESSAGE_KEY_1) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_2) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_3) || (i+MESSAGE_KEY_MIN == MESSAGE_KEY_4)) {
			keyWants[i] = KEY_WANTS_UP | (wantLong == 0 ? KEY_WANTS_REPEAT : KEY_WANTS_LONGPRESS);
		}
	}

}
    1e54:	08 95       	ret

00001e56 <__vector_21>:
}

//*********************************************** I S R   T I M E R ****************************************

ISR (TIMER0_COMPA_vect)
{
    1e56:	1f 92       	push	r1
    1e58:	0f 92       	push	r0
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	0f 92       	push	r0
    1e5e:	11 24       	eor	r1, r1
    1e60:	0b b6       	in	r0, 0x3b	; 59
    1e62:	0f 92       	push	r0
    1e64:	ef 92       	push	r14
    1e66:	ff 92       	push	r15
    1e68:	0f 93       	push	r16
    1e6a:	1f 93       	push	r17
    1e6c:	2f 93       	push	r18
    1e6e:	3f 93       	push	r19
    1e70:	4f 93       	push	r20
    1e72:	5f 93       	push	r21
    1e74:	6f 93       	push	r22
    1e76:	7f 93       	push	r23
    1e78:	8f 93       	push	r24
    1e7a:	9f 93       	push	r25
    1e7c:	af 93       	push	r26
    1e7e:	bf 93       	push	r27
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
	// called every 1ms
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
    1e88:	85 b1       	in	r24, 0x05	; 5
    1e8a:	80 68       	ori	r24, 0x80	; 128
    1e8c:	85 b9       	out	0x05, r24	; 5
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
    1e8e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <msecCtr>
    1e92:	8f 5f       	subi	r24, 0xFF	; 255
    1e94:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <msecCtr>
    1e98:	83 70       	andi	r24, 0x03	; 3
    1e9a:	81 30       	cpi	r24, 0x01	; 1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <__vector_21+0x4a>
    1e9e:	58 c1       	rjmp	.+688    	; 0x2150 <__vector_21+0x2fa>
    1ea0:	38 f0       	brcs	.+14     	; 0x1eb0 <__vector_21+0x5a>
    1ea2:	82 30       	cpi	r24, 0x02	; 2
    1ea4:	09 f4       	brne	.+2      	; 0x1ea8 <__vector_21+0x52>
    1ea6:	a5 c1       	rjmp	.+842    	; 0x21f2 <__vector_21+0x39c>
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	09 f4       	brne	.+2      	; 0x1eae <__vector_21+0x58>
    1eac:	ca c1       	rjmp	.+916    	; 0x2242 <__stack+0x43>
    1eae:	05 c2       	rjmp	.+1034   	; 0x22ba <__stack+0xbb>
}

//--------------------------------- A D C / K E Y S -------------------------------

static inline void timerADC(){
	if ((adcNr < ADC_NR_INPUTS) && ((ADCSRA & (1 << ADSC)) == 0)){
    1eb0:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    1eb4:	81 11       	cpse	r24, r1
    1eb6:	1a c1       	rjmp	.+564    	; 0x20ec <__vector_21+0x296>
    1eb8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    1ebc:	96 fd       	sbrc	r25, 6
    1ebe:	16 c1       	rjmp	.+556    	; 0x20ec <__vector_21+0x296>
		// last conversion is valid input and conversion complete or not yet started
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	ee 0f       	add	r30, r30
    1ec8:	ff 1f       	adc	r31, r31
    1eca:	e2 0f       	add	r30, r18
    1ecc:	f3 1f       	adc	r31, r19
    1ece:	ee 0f       	add	r30, r30
    1ed0:	ff 1f       	adc	r31, r31
    1ed2:	e7 5b       	subi	r30, 0xB7	; 183
    1ed4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ed6:	91 81       	ldd	r25, Z+1	; 0x01
		uint8_t newADC = ADCH;
    1ed8:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
		adcKeys[adcNr].ADCval = newADC;
    1edc:	41 83       	std	Z+1, r20	; 0x01

//------------------------------------------------------ BUSINESSS LOGIC -------------------------------

static inline uint8_t absDifference(uint8_t data1,uint8_t data2){
	// absolute value of difference between data1,2 as uint8_t!
	if (data1 > data2) {
    1ede:	49 17       	cp	r20, r25
    1ee0:	10 f4       	brcc	.+4      	; 0x1ee6 <__vector_21+0x90>
		return data1-data2;
    1ee2:	94 1b       	sub	r25, r20
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <__vector_21+0x96>
	} else {
		return data2-data1;
    1ee6:	54 2f       	mov	r21, r20
    1ee8:	59 1b       	sub	r21, r25
    1eea:	95 2f       	mov	r25, r21
		// De-Noise
		uint8_t oldADC;
		oldADC = adcKeys[adcNr].ADCval;
		uint8_t newADC = ADCH;
		adcKeys[adcNr].ADCval = newADC;
		if (absDifference(oldADC,newADC) < ADC_NOISE_THRESHOLD) {
    1eec:	94 30       	cpi	r25, 0x04	; 4
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <__vector_21+0x9c>
    1ef0:	fd c0       	rjmp	.+506    	; 0x20ec <__vector_21+0x296>
			// input voltage is stable, process this value
			uint8_t newKey;
			switch (adcNr) {
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	0e c0       	rjmp	.+28     	; 0x1f12 <__vector_21+0xbc>
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
    1ef6:	42 32       	cpi	r20, 0x22	; 34
    1ef8:	70 f0       	brcs	.+28     	; 0x1f16 <__vector_21+0xc0>
					newKey = ADC_KEY5_FUNC;
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
    1efa:	4f 33       	cpi	r20, 0x3F	; 63
    1efc:	70 f0       	brcs	.+28     	; 0x1f1a <__vector_21+0xc4>
					newKey = ADC_KEY4_FUNC;
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
    1efe:	48 36       	cpi	r20, 0x68	; 104
    1f00:	70 f0       	brcs	.+28     	; 0x1f1e <__vector_21+0xc8>
					newKey = ADC_KEY3_FUNC;
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
    1f02:	46 39       	cpi	r20, 0x96	; 150
    1f04:	70 f0       	brcs	.+28     	; 0x1f22 <__vector_21+0xcc>
					newKey = ADC_KEY2_FUNC;
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
    1f06:	4f 3b       	cpi	r20, 0xBF	; 191
    1f08:	70 f0       	brcs	.+28     	; 0x1f26 <__vector_21+0xd0>
					newKey = ADC_KEY1_FUNC;
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
    1f0a:	48 3e       	cpi	r20, 0xE8	; 232
    1f0c:	70 f4       	brcc	.+28     	; 0x1f2a <__vector_21+0xd4>
					newKey = ADC_KEY0_FUNC;
    1f0e:	c6 e0       	ldi	r28, 0x06	; 6
    1f10:	0d c0       	rjmp	.+26     	; 0x1f2c <__vector_21+0xd6>
					newKey = KEY_NOKEY;
				}
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
    1f12:	cf ef       	ldi	r28, 0xFF	; 255
    1f14:	0b c0       	rjmp	.+22     	; 0x1f2c <__vector_21+0xd6>
			uint8_t newKey;
			switch (adcNr) {
				case 0:
				// currentyl only one  ADC implemented
				if (newADC < (ADC_KEY5_VAL + ADC_KEY4_VAL)/2)  {
					newKey = ADC_KEY5_FUNC;
    1f16:	c4 e0       	ldi	r28, 0x04	; 4
    1f18:	09 c0       	rjmp	.+18     	; 0x1f2c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY4_VAL + ADC_KEY3_VAL)/2)  {
					newKey = ADC_KEY4_FUNC;
    1f1a:	c3 e0       	ldi	r28, 0x03	; 3
    1f1c:	07 c0       	rjmp	.+14     	; 0x1f2c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY3_VAL + ADC_KEY2_VAL)/2)  {
					newKey = ADC_KEY3_FUNC;
    1f1e:	c5 e0       	ldi	r28, 0x05	; 5
    1f20:	05 c0       	rjmp	.+10     	; 0x1f2c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY2_VAL + ADC_KEY1_VAL)/2)  {
					newKey = ADC_KEY2_FUNC;
    1f22:	c1 e0       	ldi	r28, 0x01	; 1
    1f24:	03 c0       	rjmp	.+6      	; 0x1f2c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY1_VAL + ADC_KEY0_VAL)/2)  {
					newKey = ADC_KEY1_FUNC;
    1f26:	c2 e0       	ldi	r28, 0x02	; 2
    1f28:	01 c0       	rjmp	.+2      	; 0x1f2c <__vector_21+0xd6>
				} else if (newADC < (ADC_KEY0_VAL + 0xFF)/2)  {
					newKey = ADC_KEY0_FUNC;
				} else {
					newKey = KEY_NOKEY;
    1f2a:	cf ef       	ldi	r28, 0xFF	; 255
				break;
				// unimplemented ADC
				default:
					newKey = KEY_NOKEY; // not implemented
			}
			uint8_t oldKey = adcKeys[adcNr].key;
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	e2 0f       	add	r30, r18
    1f34:	f3 1f       	adc	r31, r19
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	e7 5b       	subi	r30, 0xB7	; 183
    1f3c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f3e:	d2 81       	ldd	r29, Z+2	; 0x02
			if (oldKey != newKey){
    1f40:	dc 17       	cp	r29, r28
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <__vector_21+0xf0>
    1f44:	48 c0       	rjmp	.+144    	; 0x1fd6 <__vector_21+0x180>
				// key has changed (pressed or released)
				if ((oldKey != KEY_NOKEY) && (newKey != KEY_NOKEY)) {
    1f46:	df 3f       	cpi	r29, 0xFF	; 255
    1f48:	19 f0       	breq	.+6      	; 0x1f50 <__vector_21+0xfa>
    1f4a:	cf 3f       	cpi	r28, 0xFF	; 255
    1f4c:	09 f0       	breq	.+2      	; 0x1f50 <__vector_21+0xfa>
					// direct change of keys: realease old key first
					newKey = KEY_NOKEY;
    1f4e:	cf ef       	ldi	r28, 0xFF	; 255
				}
				adcKeys[adcNr].key = newKey;
    1f50:	f9 01       	movw	r30, r18
    1f52:	ee 0f       	add	r30, r30
    1f54:	ff 1f       	adc	r31, r31
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	ee 0f       	add	r30, r30
    1f5c:	ff 1f       	adc	r31, r31
    1f5e:	e7 5b       	subi	r30, 0xB7	; 183
    1f60:	fc 4f       	sbci	r31, 0xFC	; 252
    1f62:	c2 83       	std	Z+2, r28	; 0x02
				if (oldKey == KEY_NOKEY) {
    1f64:	df 3f       	cpi	r29, 0xFF	; 255
    1f66:	f9 f4       	brne	.+62     	; 0x1fa6 <__vector_21+0x150>
					// key is pressed
					adcKeys[adcNr].keyTimer = 0;
    1f68:	c9 01       	movw	r24, r18
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e2 0f       	add	r30, r18
    1f72:	f3 1f       	adc	r31, r19
    1f74:	ee 0f       	add	r30, r30
    1f76:	ff 1f       	adc	r31, r31
    1f78:	e7 5b       	subi	r30, 0xB7	; 183
    1f7a:	fc 4f       	sbci	r31, 0xFC	; 252
    1f7c:	15 82       	std	Z+5, r1	; 0x05
    1f7e:	14 82       	std	Z+4, r1	; 0x04
					adcKeys[adcNr].keyRepeating = KEY_STAT_NIL;
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	ee 0f       	add	r30, r30
    1f88:	ff 1f       	adc	r31, r31
    1f8a:	e7 5b       	subi	r30, 0xB7	; 183
    1f8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1f8e:	13 82       	std	Z+3, r1	; 0x03
					if (keyWants[newKey-MESSAGE_KEY_MIN] & KEY_WANTS_DOWN) {
    1f90:	ec 2f       	mov	r30, r28
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	e2 5b       	subi	r30, 0xB2	; 178
    1f96:	fc 4f       	sbci	r31, 0xFC	; 252
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 ff       	sbrs	r24, 0
    1f9c:	a7 c0       	rjmp	.+334    	; 0x20ec <__vector_21+0x296>
						message_push(MESSAGE_KEY_PRESSED | newKey);
    1f9e:	8c 2f       	mov	r24, r28
    1fa0:	0e 94 96 2a 	call	0x552c	; 0x552c <message_push>
    1fa4:	a3 c0       	rjmp	.+326    	; 0x20ec <__vector_21+0x296>
					}
				} else {
					// key is released
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_UP) {
    1fa6:	ed 2f       	mov	r30, r29
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	e2 5b       	subi	r30, 0xB2	; 178
    1fac:	fc 4f       	sbci	r31, 0xFC	; 252
    1fae:	80 81       	ld	r24, Z
    1fb0:	81 ff       	sbrs	r24, 1
    1fb2:	9c c0       	rjmp	.+312    	; 0x20ec <__vector_21+0x296>
						if ((adcKeys[adcNr].keyRepeating & (KEY_STAT_AUTOREP | KEY_STAT_LONGPRESSED)) == 0){
    1fb4:	f9 01       	movw	r30, r18
    1fb6:	ee 0f       	add	r30, r30
    1fb8:	ff 1f       	adc	r31, r31
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	ee 0f       	add	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	e7 5b       	subi	r30, 0xB7	; 183
    1fc4:	fc 4f       	sbci	r31, 0xFC	; 252
    1fc6:	83 81       	ldd	r24, Z+3	; 0x03
    1fc8:	83 70       	andi	r24, 0x03	; 3
    1fca:	09 f0       	breq	.+2      	; 0x1fce <__vector_21+0x178>
    1fcc:	8f c0       	rjmp	.+286    	; 0x20ec <__vector_21+0x296>
							// send message only if not autorepeating or longpress has triggered
							message_push(MESSAGE_KEY_RELEASED | oldKey);
    1fce:	8d 2f       	mov	r24, r29
    1fd0:	0e 94 96 2a 	call	0x552c	; 0x552c <message_push>
    1fd4:	8b c0       	rjmp	.+278    	; 0x20ec <__vector_21+0x296>
						}
					}
				}
			} else {
				// no key change
				if (newKey != KEY_NOKEY) {
    1fd6:	cf 3f       	cpi	r28, 0xFF	; 255
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <__vector_21+0x186>
    1fda:	88 c0       	rjmp	.+272    	; 0x20ec <__vector_21+0x296>
					// there is some key pressed
					adcKeys[adcNr].keyTimer++;
    1fdc:	f9 01       	movw	r30, r18
    1fde:	ee 0f       	add	r30, r30
    1fe0:	ff 1f       	adc	r31, r31
    1fe2:	df 01       	movw	r26, r30
    1fe4:	a2 0f       	add	r26, r18
    1fe6:	b3 1f       	adc	r27, r19
    1fe8:	aa 0f       	add	r26, r26
    1fea:	bb 1f       	adc	r27, r27
    1fec:	a7 5b       	subi	r26, 0xB7	; 183
    1fee:	bc 4f       	sbci	r27, 0xFC	; 252
    1ff0:	14 96       	adiw	r26, 0x04	; 4
    1ff2:	8d 91       	ld	r24, X+
    1ff4:	9c 91       	ld	r25, X
    1ff6:	15 97       	sbiw	r26, 0x05	; 5
    1ff8:	01 96       	adiw	r24, 0x01	; 1
    1ffa:	15 96       	adiw	r26, 0x05	; 5
    1ffc:	9c 93       	st	X, r25
    1ffe:	8e 93       	st	-X, r24
    2000:	14 97       	sbiw	r26, 0x04	; 4
					if (adcKeys[adcNr].keyTimer == KEY_LONGPRESS_CYCLES) {
    2002:	fd 01       	movw	r30, r26
    2004:	84 81       	ldd	r24, Z+4	; 0x04
    2006:	95 81       	ldd	r25, Z+5	; 0x05
    2008:	8b 34       	cpi	r24, 0x4B	; 75
    200a:	91 05       	cpc	r25, r1
    200c:	a9 f4       	brne	.+42     	; 0x2038 <__vector_21+0x1e2>
						// onyl if exact value for longpress reached:
						if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_LONGPRESS) {
    200e:	ed 2f       	mov	r30, r29
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	e2 5b       	subi	r30, 0xB2	; 178
    2014:	fc 4f       	sbci	r31, 0xFC	; 252
    2016:	80 81       	ld	r24, Z
    2018:	82 ff       	sbrs	r24, 2
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <__vector_21+0x1e2>
							message_push(MESSAGE_KEY_LONGPRESSED | newKey);
    201c:	8c 2f       	mov	r24, r28
    201e:	80 68       	ori	r24, 0x80	; 128
    2020:	0e 94 96 2a 	call	0x552c	; 0x552c <message_push>
							adcKeys[adcNr].keyRepeating = KEY_STAT_LONGPRESSED; // prevent up-Message
    2024:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <adcNr>
    2028:	86 e0       	ldi	r24, 0x06	; 6
    202a:	e8 9f       	mul	r30, r24
    202c:	f0 01       	movw	r30, r0
    202e:	11 24       	eor	r1, r1
    2030:	e7 5b       	subi	r30, 0xB7	; 183
    2032:	fc 4f       	sbci	r31, 0xFC	; 252
    2034:	82 e0       	ldi	r24, 0x02	; 2
    2036:	83 83       	std	Z+3, r24	; 0x03
						}
					}
					if (keyWants[oldKey-MESSAGE_KEY_MIN] & KEY_WANTS_REPEAT) {
    2038:	ed 2f       	mov	r30, r29
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e2 5b       	subi	r30, 0xB2	; 178
    203e:	fc 4f       	sbci	r31, 0xFC	; 252
    2040:	80 81       	ld	r24, Z
    2042:	83 ff       	sbrs	r24, 3
    2044:	53 c0       	rjmp	.+166    	; 0x20ec <__vector_21+0x296>
						if (adcKeys[adcNr].keyRepeating == KEY_STAT_NIL)  {
    2046:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	fc 01       	movw	r30, r24
    204e:	ee 0f       	add	r30, r30
    2050:	ff 1f       	adc	r31, r31
    2052:	e8 0f       	add	r30, r24
    2054:	f9 1f       	adc	r31, r25
    2056:	ee 0f       	add	r30, r30
    2058:	ff 1f       	adc	r31, r31
    205a:	e7 5b       	subi	r30, 0xB7	; 183
    205c:	fc 4f       	sbci	r31, 0xFC	; 252
    205e:	23 81       	ldd	r18, Z+3	; 0x03
    2060:	21 11       	cpse	r18, r1
    2062:	1e c0       	rjmp	.+60     	; 0x20a0 <__vector_21+0x24a>
							if (adcKeys[adcNr].keyTimer == KEY_AUTOREP_START_CYCLES) {
    2064:	fc 01       	movw	r30, r24
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	e8 0f       	add	r30, r24
    206c:	f9 1f       	adc	r31, r25
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	e7 5b       	subi	r30, 0xB7	; 183
    2074:	fc 4f       	sbci	r31, 0xFC	; 252
    2076:	24 81       	ldd	r18, Z+4	; 0x04
    2078:	35 81       	ldd	r19, Z+5	; 0x05
    207a:	22 33       	cpi	r18, 0x32	; 50
    207c:	31 05       	cpc	r19, r1
    207e:	b1 f5       	brne	.+108    	; 0x20ec <__vector_21+0x296>
							// delay for autorepeat reached
								adcKeys[adcNr].keyRepeating = KEY_STAT_AUTOREP;
    2080:	26 e0       	ldi	r18, 0x06	; 6
    2082:	28 9f       	mul	r18, r24
    2084:	f0 01       	movw	r30, r0
    2086:	29 9f       	mul	r18, r25
    2088:	f0 0d       	add	r31, r0
    208a:	11 24       	eor	r1, r1
    208c:	e7 5b       	subi	r30, 0xB7	; 183
    208e:	fc 4f       	sbci	r31, 0xFC	; 252
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	83 83       	std	Z+3, r24	; 0x03
								adcKeys[adcNr].keyTimer = 0;
    2094:	15 82       	std	Z+5, r1	; 0x05
    2096:	14 82       	std	Z+4, r1	; 0x04
								message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    2098:	8c 2f       	mov	r24, r28
    209a:	0e 94 96 2a 	call	0x552c	; 0x552c <message_push>
    209e:	26 c0       	rjmp	.+76     	; 0x20ec <__vector_21+0x296>
							}
						} else if ((adcKeys[adcNr].keyRepeating == KEY_STAT_AUTOREP) && (adcKeys[adcNr].keyTimer == KEY_AUTOREP_REP_CYCLES)) {
    20a0:	fc 01       	movw	r30, r24
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	e8 0f       	add	r30, r24
    20a8:	f9 1f       	adc	r31, r25
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	e7 5b       	subi	r30, 0xB7	; 183
    20b0:	fc 4f       	sbci	r31, 0xFC	; 252
    20b2:	23 81       	ldd	r18, Z+3	; 0x03
    20b4:	21 30       	cpi	r18, 0x01	; 1
    20b6:	d1 f4       	brne	.+52     	; 0x20ec <__vector_21+0x296>
    20b8:	26 e0       	ldi	r18, 0x06	; 6
    20ba:	28 9f       	mul	r18, r24
    20bc:	f0 01       	movw	r30, r0
    20be:	29 9f       	mul	r18, r25
    20c0:	f0 0d       	add	r31, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	e7 5b       	subi	r30, 0xB7	; 183
    20c6:	fc 4f       	sbci	r31, 0xFC	; 252
    20c8:	24 81       	ldd	r18, Z+4	; 0x04
    20ca:	35 81       	ldd	r19, Z+5	; 0x05
    20cc:	2c 30       	cpi	r18, 0x0C	; 12
    20ce:	31 05       	cpc	r19, r1
    20d0:	69 f4       	brne	.+26     	; 0x20ec <__vector_21+0x296>
							// in autorepeat
							adcKeys[adcNr].keyTimer = 0;
    20d2:	26 e0       	ldi	r18, 0x06	; 6
    20d4:	28 9f       	mul	r18, r24
    20d6:	f0 01       	movw	r30, r0
    20d8:	29 9f       	mul	r18, r25
    20da:	f0 0d       	add	r31, r0
    20dc:	11 24       	eor	r1, r1
    20de:	e7 5b       	subi	r30, 0xB7	; 183
    20e0:	fc 4f       	sbci	r31, 0xFC	; 252
    20e2:	15 82       	std	Z+5, r1	; 0x05
    20e4:	14 82       	std	Z+4, r1	; 0x04
							message_push(MESSAGE_KEY_AUTOREPEAT | newKey);
    20e6:	8c 2f       	mov	r24, r28
    20e8:	0e 94 96 2a 	call	0x552c	; 0x552c <message_push>
				}
			}
		} // if difference
	} // if valid conversion
	// cycle through all possoble ADCs, even if not implemented
	if (++adcNr >= ADC_MAX_INPUTS) {
    20ec:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    20f0:	8f 5f       	subi	r24, 0xFF	; 255
    20f2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <adcNr>
    20f6:	84 30       	cpi	r24, 0x04	; 4
    20f8:	10 f0       	brcs	.+4      	; 0x20fe <__vector_21+0x2a8>
		adcNr = 0;
    20fa:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <adcNr>
	}
	uint8_t newMux;
	if (adcNr < ADC_NR_INPUTS){
    20fe:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <adcNr>
    2102:	81 11       	cpse	r24, r1
    2104:	0c c0       	rjmp	.+24     	; 0x211e <__vector_21+0x2c8>
		newMux = adcKeys[adcNr].mux;
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	fc 01       	movw	r30, r24
    210a:	ee 0f       	add	r30, r30
    210c:	ff 1f       	adc	r31, r31
    210e:	e8 0f       	add	r30, r24
    2110:	f9 1f       	adc	r31, r25
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	e7 5b       	subi	r30, 0xB7	; 183
    2118:	fc 4f       	sbci	r31, 0xFC	; 252
    211a:	80 81       	ld	r24, Z
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <__vector_21+0x2ca>
	} else {
		// if ADC not implemented: sample GND
		newMux = ADC_MUX_GND;
    211e:	8f e1       	ldi	r24, 0x1F	; 31
	}
	ADMUX = ADC_ADMUX_STD | (newMux & ADC_MUX_MASKL);
    2120:	98 2f       	mov	r25, r24
    2122:	9f 71       	andi	r25, 0x1F	; 31
    2124:	90 66       	ori	r25, 0x60	; 96
    2126:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB = (ADCSRB & ~ADC_MUX_MASKH) | ((newMux & ADC_MUX_MASKH) >> 2);
    212a:	eb e7       	ldi	r30, 0x7B	; 123
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	20 81       	ld	r18, Z
    2130:	80 72       	andi	r24, 0x20	; 32
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	95 95       	asr	r25
    2136:	87 95       	ror	r24
    2138:	95 95       	asr	r25
    213a:	87 95       	ror	r24
    213c:	92 2f       	mov	r25, r18
    213e:	9f 7d       	andi	r25, 0xDF	; 223
    2140:	89 2b       	or	r24, r25
    2142:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); // start adc, read value on next corresponding cycle
    2144:	ea e7       	ldi	r30, 0x7A	; 122
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 64       	ori	r24, 0x40	; 64
    214c:	80 83       	st	Z, r24
    214e:	b5 c0       	rjmp	.+362    	; 0x22ba <__stack+0xbb>
	LED_PORT |= (1 << LED_PIN); // LED on (1 = on, 0 = off)
	//  ********************************************** SW-TIMER ***********************************************
	switch (++msecCtr & 0x03) {
		// execution order is 3,2,1,0; any function is calles every 4ms
		case 0: timerADC(); break; // evetnually timer has also been called (only every 100ms)
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
    2150:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2154:	80 38       	cpi	r24, 0x80	; 128
    2156:	09 f4       	brne	.+2      	; 0x215a <__vector_21+0x304>
    2158:	b0 c0       	rjmp	.+352    	; 0x22ba <__stack+0xbb>
	}
}

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
    215a:	84 b3       	in	r24, 0x14	; 20
    215c:	87 60       	ori	r24, 0x07	; 7
    215e:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
    2160:	84 b3       	in	r24, 0x14	; 20
    2162:	8b 7f       	andi	r24, 0xFB	; 251
    2164:	84 bb       	out	0x14, r24	; 20
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
    2166:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <pipe_Module+0x1>
    216a:	20 95       	com	r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    216c:	e2 e0       	ldi	r30, 0x02	; 2
    216e:	ea 95       	dec	r30
    2170:	f1 f7       	brne	.-4      	; 0x216e <__vector_21+0x318>
    2172:	00 c0       	rjmp	.+0      	; 0x2174 <__vector_21+0x31e>
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
    2174:	84 b3       	in	r24, 0x14	; 20
    2176:	84 60       	ori	r24, 0x04	; 4
    2178:	84 bb       	out	0x14, r24	; 20
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
    217a:	90 e2       	ldi	r25, 0x20	; 32

static inline void timerPipeIO(){
	Pipe_t *curPipe;
	PIPECTRL_PORT |=  PIPE_CTRL_MASK; // -CLK -L2P -L2C off (1=off)
	PIPE_LATCH2CPU_L //  in hw_defs.h: // Start with -L2C \_
	curPipe = &pipe[PIPE_SHIFTBIT_COUNT-1]; // point to last Pipe cause topmost bit is transferred first
    217c:	e1 e4       	ldi	r30, 0x41	; 65
    217e:	f3 e0       	ldi	r31, 0x03	; 3
	uint8_t local_pipe_ModuleAssnWrite = ~pipe_Module.AssnWrite; // 0= module may be written
	uint8_t i = PIPE_SHIFTBIT_COUNT;
	_delay_us(0.5);
	PIPE_LATCH2CPU_H // -LATCH2CPU _/ Data from Pipe are in shift register, MSB is ready to be read
	do 	{
		curPipe->pipeInM16 = curPipe->pipeInM12; // Shift History Input Data from Pipe
    2180:	83 81       	ldd	r24, Z+3	; 0x03
    2182:	82 83       	std	Z+2, r24	; 0x02
		curPipe->pipeInM12 = curPipe->pipeInM8;
    2184:	84 81       	ldd	r24, Z+4	; 0x04
    2186:	83 83       	std	Z+3, r24	; 0x03
		PIPE_CLOCK_H // clock keeps H in first loop or _/ in other loops
    2188:	84 b3       	in	r24, 0x14	; 20
    218a:	81 60       	ori	r24, 0x01	; 1
    218c:	84 bb       	out	0x14, r24	; 20
		PIPEOUT_PORT = curPipe->pipeOut | local_pipe_ModuleAssnWrite; // Write Data to Pipe
    218e:	81 81       	ldd	r24, Z+1	; 0x01
    2190:	82 2b       	or	r24, r18
    2192:	88 b9       	out	0x08, r24	; 8
		curPipe->pipeInM8 = curPipe->pipeInM4; // just here for symetric clk pulse
    2194:	85 81       	ldd	r24, Z+5	; 0x05
    2196:	84 83       	std	Z+4, r24	; 0x04
		curPipe->pipeInM4 = curPipe->pipeIn;
    2198:	86 81       	ldd	r24, Z+6	; 0x06
    219a:	85 83       	std	Z+5, r24	; 0x05
		curPipe->pipeIn = PIPEIN_PIN; // Read Data from Pipe
    219c:	80 b1       	in	r24, 0x00	; 0
    219e:	86 83       	std	Z+6, r24	; 0x06
		PIPE_CLOCK_L // clock \_
    21a0:	84 b3       	in	r24, 0x14	; 20
    21a2:	8e 7f       	andi	r24, 0xFE	; 254
    21a4:	84 bb       	out	0x14, r24	; 20
		curPipe--; // proceed to next pipe
    21a6:	38 97       	sbiw	r30, 0x08	; 8
	} while (--i > 0);
    21a8:	91 50       	subi	r25, 0x01	; 1
    21aa:	51 f7       	brne	.-44     	; 0x2180 <__vector_21+0x32a>
	asm("nop");
    21ac:	00 00       	nop
	asm("nop");
    21ae:	00 00       	nop
	PIPE_CLOCK_H
    21b0:	84 b3       	in	r24, 0x14	; 20
    21b2:	81 60       	ori	r24, 0x01	; 1
    21b4:	84 bb       	out	0x14, r24	; 20
	PIPE_LATCH2PIPE_L // last bit transferred latch2outout
    21b6:	84 b3       	in	r24, 0x14	; 20
    21b8:	8d 7f       	andi	r24, 0xFD	; 253
    21ba:	84 bb       	out	0x14, r24	; 20
	pipeProcessing |= PIPE_IO_INOUT_DONE; // meanwhile (instead of wait): update processing status
    21bc:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    21c0:	82 60       	ori	r24, 0x02	; 2
    21c2:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
	PIPEOUT_PORT = 0; // not really needed, turn output off
    21c6:	18 b8       	out	0x08, r1	; 8
	PIPE_OE_H // turn output on
    21c8:	8b b1       	in	r24, 0x0b	; 11
    21ca:	80 68       	ori	r24, 0x80	; 128
    21cc:	8b b9       	out	0x0b, r24	; 11
	PIPE_LATCH2PIPE_H
    21ce:	84 b3       	in	r24, 0x14	; 20
    21d0:	82 60       	ori	r24, 0x02	; 2
    21d2:	84 bb       	out	0x14, r24	; 20
    21d4:	72 c0       	rjmp	.+228    	; 0x22ba <__stack+0xbb>

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
    21d6:	80 81       	ld	r24, Z
    21d8:	81 50       	subi	r24, 0x01	; 1
    21da:	8e 3f       	cpi	r24, 0xFE	; 254
    21dc:	38 f4       	brcc	.+14     	; 0x21ec <__vector_21+0x396>
			uint8_t newPrescaler = (mytimer->prescaler)+1;
    21de:	21 81       	ldd	r18, Z+1	; 0x01
    21e0:	2f 5f       	subi	r18, 0xFF	; 255
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
    21e2:	25 30       	cpi	r18, 0x05	; 5
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <__vector_21+0x394>
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
				(mytimer->counter)--;
    21e6:	80 83       	st	Z, r24
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
		if ((mytimer->counter != TIMER_ENDED) && (mytimer->counter != TIMER_INACTIVE)) {
			uint8_t newPrescaler = (mytimer->prescaler)+1;
			if (newPrescaler >= TIMER_BASE_MS / TIMER_CYCLE_MS) {
				// prescaler is decreasesd only every TIMER_CYCLE_MS, so divide value by this
				newPrescaler = 0;
    21e8:	20 e0       	ldi	r18, 0x00	; 0
				(mytimer->counter)--;
			}
			mytimer->prescaler = newPrescaler;
    21ea:	21 83       	std	Z+1, r18	; 0x01
		}
		mytimer++;
    21ec:	32 96       	adiw	r30, 0x02	; 2
//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21ee:	9f 5f       	subi	r25, 0xFF	; 255
    21f0:	03 c0       	rjmp	.+6      	; 0x21f8 <__vector_21+0x3a2>
    21f2:	90 e0       	ldi	r25, 0x00	; 0

//-------------------------------------------------T I M E R -------------------------------

static inline void timerTimers(){
	Timer *mytimer;
	mytimer = (Timer*) &(swTimer[0]);
    21f4:	ef e2       	ldi	r30, 0x2F	; 47
    21f6:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < TIMER_COUNT; i++) {
    21f8:	99 30       	cpi	r25, 0x09	; 9
    21fa:	68 f3       	brcs	.-38     	; 0x21d6 <__vector_21+0x380>
			mytimer->prescaler = newPrescaler;
		}
		mytimer++;
	}
	uint8_t* pTime = (uint8_t *) &(time_Uptime[0]); // point to prescaler
	if (++(*pTime) == TIMER_UPDTIME_PRESC){
    21fc:	e1 e4       	ldi	r30, 0x41	; 65
    21fe:	f2 e0       	ldi	r31, 0x02	; 2
    2200:	80 81       	ld	r24, Z
    2202:	8f 5f       	subi	r24, 0xFF	; 255
    2204:	80 83       	st	Z, r24
    2206:	8a 3f       	cpi	r24, 0xFA	; 250
    2208:	09 f0       	breq	.+2      	; 0x220c <__stack+0xd>
    220a:	57 c0       	rjmp	.+174    	; 0x22ba <__stack+0xbb>
		// if incremented prescaler ist top
		time_UpTimeUpdated = TRUE; // notify new uptime to main!
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	80 93 57 03 	sts	0x0357, r24	; 0x800357 <time_UpTimeUpdated>
		*(pTime++) = 0; // reset prescaler and point to seconds
    2212:	10 82       	st	Z, r1
		if (++(*pTime) >= 60) {
    2214:	81 81       	ldd	r24, Z+1	; 0x01
    2216:	8f 5f       	subi	r24, 0xFF	; 255
    2218:	81 83       	std	Z+1, r24	; 0x01
    221a:	8c 33       	cpi	r24, 0x3C	; 60
    221c:	08 f4       	brcc	.+2      	; 0x2220 <__stack+0x21>
    221e:	4d c0       	rjmp	.+154    	; 0x22ba <__stack+0xbb>
			// if incrementet seconds are 60
			*(pTime++) = 0; // reset sceonds and point to minutes
    2220:	11 82       	std	Z+1, r1	; 0x01
			if (++(*pTime) >= 60) {
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	8f 5f       	subi	r24, 0xFF	; 255
    2226:	82 83       	std	Z+2, r24	; 0x02
    2228:	8c 33       	cpi	r24, 0x3C	; 60
    222a:	08 f4       	brcc	.+2      	; 0x222e <__stack+0x2f>
    222c:	46 c0       	rjmp	.+140    	; 0x22ba <__stack+0xbb>
				// if incrementet minutes are 60
				*(pTime++) = 0; // reset minutes and point to hours
    222e:	12 82       	std	Z+2, r1	; 0x02
				if (++(*pTime) >= 100) {
    2230:	83 81       	ldd	r24, Z+3	; 0x03
    2232:	8f 5f       	subi	r24, 0xFF	; 255
    2234:	83 83       	std	Z+3, r24	; 0x03
    2236:	84 36       	cpi	r24, 0x64	; 100
    2238:	08 f4       	brcc	.+2      	; 0x223c <__stack+0x3d>
    223a:	3f c0       	rjmp	.+126    	; 0x22ba <__stack+0xbb>
					// if incrementet hours are 100
					*(pTime) = 0; // reset  hours
    223c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <time_Uptime+0x3>
    2240:	3c c0       	rjmp	.+120    	; 0x22ba <__stack+0xbb>
		case 1: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeIO();
			}
			break;
		case 2: timerTimers(); break;
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
    2242:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    2246:	80 38       	cpi	r24, 0x80	; 128
    2248:	c1 f1       	breq	.+112    	; 0x22ba <__stack+0xbb>

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
    224a:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <pipe_Module>
    224e:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    2252:	e8 22       	and	r14, r24
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    2254:	f1 2c       	mov	r15, r1

//************************************** P I P E *******************************************

static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
    2256:	09 e4       	ldi	r16, 0x49	; 73
    2258:	12 e0       	ldi	r17, 0x02	; 2
    225a:	2c c0       	rjmp	.+88     	; 0x22b4 <__stack+0xb5>
		// Check new pipe status
		// new V 0.56
		uint8_t newOnState = 0xFF; // and operation of recent states -> 1 == input was allways 1
		uint8_t newOffState = 0; // or operation of recent states -> 0 == input was allways 0
		uint8_t* pInByte = &(curPipe->pipeInM16);
		newOnState &= *pInByte; //pipeInM16
    225c:	f8 01       	movw	r30, r16
    225e:	c2 81       	ldd	r28, Z+2	; 0x02
		newOffState |= *pInByte++;
		newOnState &= *pInByte; //pipeInM12
    2260:	83 81       	ldd	r24, Z+3	; 0x03
    2262:	9c 2f       	mov	r25, r28
    2264:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    2266:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM8
    2268:	84 81       	ldd	r24, Z+4	; 0x04
    226a:	98 23       	and	r25, r24
		newOffState |= *pInByte++;
    226c:	c8 2b       	or	r28, r24
		newOnState &= *pInByte; //pipeInM4
    226e:	25 81       	ldd	r18, Z+5	; 0x05
    2270:	92 23       	and	r25, r18
		newOffState |= *pInByte++;
    2272:	c2 2b       	or	r28, r18
		newOnState &= *pInByte; //pipeIn
    2274:	86 81       	ldd	r24, Z+6	; 0x06
    2276:	98 23       	and	r25, r24
		newOffState |= *pInByte++; // now pointer to pipeInStat
    2278:	c8 2b       	or	r28, r24
		uint8_t oldPipeStat = *pInByte;
    227a:	d7 81       	ldd	r29, Z+7	; 0x07
		uint8_t newPipeStat = (oldPipeStat & newOffState) | newOnState; // ->0 only if recent reads are all 0, -> 1 if reads are all 1, else keep old val
    227c:	cd 23       	and	r28, r29
    227e:	c9 2b       	or	r28, r25
		*pInByte = newPipeStat;
    2280:	c7 83       	std	Z+7, r28	; 0x07
		// end new V 0.56
		uint8_t statChange = (newPipeStat & ~oldPipeStat) & local_pipe_ModuleAssnRead; // new = 1, old = 0
    2282:	8d 2f       	mov	r24, r29
    2284:	80 95       	com	r24
    2286:	8c 23       	and	r24, r28
    2288:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    228a:	21 f0       	breq	.+8      	; 0x2294 <__stack+0x95>
			// 0->1, pipe on
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_ON_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    228c:	9f 2d       	mov	r25, r15
    228e:	90 62       	ori	r25, 0x20	; 32
    2290:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <pipeMsgPush>
		}
		statChange = (~newPipeStat & oldPipeStat) & local_pipe_ModuleAssnRead; // new = 0, old = 1
    2294:	c0 95       	com	r28
    2296:	cd 23       	and	r28, r29
    2298:	8c 2f       	mov	r24, r28
    229a:	8e 21       	and	r24, r14
		if ((statChange)!= 0) {
    229c:	19 f0       	breq	.+6      	; 0x22a4 <__stack+0xa5>
			// 1->0, pipe off
			myMessage.message8[MSG_BYTE_MODULEBITS] = statChange;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = MESSAGE_PIPE_OFF_HI | shiftBitNr;
			pipeMsgPush(myMessage);
    229e:	9f 2d       	mov	r25, r15
    22a0:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <pipeMsgPush>
		}
		curPipe++;
    22a4:	08 5f       	subi	r16, 0xF8	; 248
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
		pipeProcessing |= PIPE_IO_PROC_DONE; // to show that pipe[].pipeInStat is updated
    22a8:	80 91 46 02 	lds	r24, 0x0246	; 0x800246 <pipeProcessing>
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
static inline void timerPipeProcess(){
	Pipe_t *curPipe;
	curPipe = &pipe[0];
	// V 0.65 AssnRead -> new: & ModuleTesteD
	uint8_t local_pipe_ModuleAssnRead = pipe_Module.AssnRead & pipe_ModuleTested; // 1= module message processeced
	for (uint8_t shiftBitNr = 0; shiftBitNr < PIPE_SHIFTBIT_COUNT; shiftBitNr++) {
    22b2:	f3 94       	inc	r15
    22b4:	ff e1       	ldi	r31, 0x1F	; 31
    22b6:	ff 15       	cp	r31, r15
    22b8:	88 f6       	brcc	.-94     	; 0x225c <__stack+0x5d>
		case 3: if (pipeProcessing != PIPE_IO_DISABLE) {
				timerPipeProcess();
			}
			break;
	}
	LED_PORT &= ~(1 << LED_PIN); // LED off (1 = on, 0 = off)
    22ba:	85 b1       	in	r24, 0x05	; 5
    22bc:	8f 77       	andi	r24, 0x7F	; 127
    22be:	85 b9       	out	0x05, r24	; 5

}
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	bf 91       	pop	r27
    22ca:	af 91       	pop	r26
    22cc:	9f 91       	pop	r25
    22ce:	8f 91       	pop	r24
    22d0:	7f 91       	pop	r23
    22d2:	6f 91       	pop	r22
    22d4:	5f 91       	pop	r21
    22d6:	4f 91       	pop	r20
    22d8:	3f 91       	pop	r19
    22da:	2f 91       	pop	r18
    22dc:	1f 91       	pop	r17
    22de:	0f 91       	pop	r16
    22e0:	ff 90       	pop	r15
    22e2:	ef 90       	pop	r14
    22e4:	0f 90       	pop	r0
    22e6:	0b be       	out	0x3b, r0	; 59
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	0f 90       	pop	r0
    22ee:	1f 90       	pop	r1
    22f0:	18 95       	reti

000022f2 <pipe_on>:

// ------------------------------------------- PIPE ON-OFF -----------------------------------

void pipe_on(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut &= ~(moduleMask);
    22f2:	e8 2f       	mov	r30, r24
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	ee 0f       	add	r30, r30
    22f8:	ff 1f       	adc	r31, r31
    22fa:	ee 0f       	add	r30, r30
    22fc:	ff 1f       	adc	r31, r31
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	e7 5b       	subi	r30, 0xB7	; 183
    2304:	fd 4f       	sbci	r31, 0xFD	; 253
    2306:	60 95       	com	r22
    2308:	81 81       	ldd	r24, Z+1	; 0x01
    230a:	68 23       	and	r22, r24
    230c:	61 83       	std	Z+1, r22	; 0x01
    230e:	08 95       	ret

00002310 <pipe_off>:
}

void pipe_off(uint8_t bitNr, uint8_t moduleMask){ // bitNr 0..31, moduleMask 0x01, 0x02, ... x080
	pipe[bitNr].pipeOut |= moduleMask;
    2310:	e8 2f       	mov	r30, r24
    2312:	f0 e0       	ldi	r31, 0x00	; 0
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	ee 0f       	add	r30, r30
    231e:	ff 1f       	adc	r31, r31
    2320:	e7 5b       	subi	r30, 0xB7	; 183
    2322:	fd 4f       	sbci	r31, 0xFD	; 253
    2324:	81 81       	ldd	r24, Z+1	; 0x01
    2326:	68 2b       	or	r22, r24
    2328:	61 83       	std	Z+1, r22	; 0x01
    232a:	08 95       	ret

0000232c <init_iopins>:

// Portpins definieren - alle Eingang mit Pullup
void init_iopins (void)
{
	// DDRs are set to 0 by HW, here pullups only
	PORTA = 0xFF;
    232c:	8f ef       	ldi	r24, 0xFF	; 255
    232e:	82 b9       	out	0x02, r24	; 2
	PORTB = 0xFF;
    2330:	85 b9       	out	0x05, r24	; 5
	PORTC = 0xFF;
    2332:	88 b9       	out	0x08, r24	; 8
	PORTD = 0xFF;
    2334:	8b b9       	out	0x0b, r24	; 11
	PORTE = 0xFF;
    2336:	8e b9       	out	0x0e, r24	; 14
	PORTF = 0xFF;
    2338:	81 bb       	out	0x11, r24	; 17
	PORTG = 0xFF;
    233a:	84 bb       	out	0x14, r24	; 20
	PORTH = 0xFF;
    233c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x700102>
	PORTJ = 0xFF;
    2340:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x700105>
	PORTK = 0xFF;
    2344:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x700108>
	PORTL = 0xFF; 
    2348:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x70010b>
	PIPE_OE_DDR  |= 1 << PIPE_OE_NR; // OE output
    234c:	8a b1       	in	r24, 0x0a	; 10
    234e:	80 68       	ori	r24, 0x80	; 128
    2350:	8a b9       	out	0x0a, r24	; 10
	PIPE_OE_PORT &= ~(1 << PIPE_OE_NR); // OE off
    2352:	8b b1       	in	r24, 0x0b	; 11
    2354:	8f 77       	andi	r24, 0x7F	; 127
    2356:	8b b9       	out	0x0b, r24	; 11
	PWR_EN_DDR |= 1 << PWR_EN_PIN; // 12V Enable Port
    2358:	84 b1       	in	r24, 0x04	; 4
    235a:	80 64       	ori	r24, 0x40	; 64
    235c:	84 b9       	out	0x04, r24	; 4
	PWR_EN_PORT &= ~(1 << PWR_EN_PIN); // 0= Power off;
    235e:	85 b1       	in	r24, 0x05	; 5
    2360:	8f 7b       	andi	r24, 0xBF	; 191
    2362:	85 b9       	out	0x05, r24	; 5
    2364:	08 95       	ret

00002366 <lcd_write_nibble>:
Returns:  none
*************************************************************************/
void lcd_home()
{
	lcd_cursorPos =  0;
	lcd_write_command(LCD_HOME);
    2366:	88 23       	and	r24, r24
    2368:	34 f4       	brge	.+12     	; 0x2376 <lcd_write_nibble+0x10>
    236a:	e2 e0       	ldi	r30, 0x02	; 2
    236c:	f1 e0       	ldi	r31, 0x01	; 1
    236e:	90 81       	ld	r25, Z
    2370:	90 61       	ori	r25, 0x10	; 16
    2372:	90 83       	st	Z, r25
    2374:	05 c0       	rjmp	.+10     	; 0x2380 <lcd_write_nibble+0x1a>
    2376:	e2 e0       	ldi	r30, 0x02	; 2
    2378:	f1 e0       	ldi	r31, 0x01	; 1
    237a:	90 81       	ld	r25, Z
    237c:	9f 7e       	andi	r25, 0xEF	; 239
    237e:	90 83       	st	Z, r25
    2380:	86 ff       	sbrs	r24, 6
    2382:	06 c0       	rjmp	.+12     	; 0x2390 <lcd_write_nibble+0x2a>
    2384:	e2 e0       	ldi	r30, 0x02	; 2
    2386:	f1 e0       	ldi	r31, 0x01	; 1
    2388:	90 81       	ld	r25, Z
    238a:	98 60       	ori	r25, 0x08	; 8
    238c:	90 83       	st	Z, r25
    238e:	05 c0       	rjmp	.+10     	; 0x239a <lcd_write_nibble+0x34>
    2390:	e2 e0       	ldi	r30, 0x02	; 2
    2392:	f1 e0       	ldi	r31, 0x01	; 1
    2394:	90 81       	ld	r25, Z
    2396:	97 7f       	andi	r25, 0xF7	; 247
    2398:	90 83       	st	Z, r25
    239a:	85 ff       	sbrs	r24, 5
    239c:	04 c0       	rjmp	.+8      	; 0x23a6 <lcd_write_nibble+0x40>
    239e:	9e b1       	in	r25, 0x0e	; 14
    23a0:	98 60       	ori	r25, 0x08	; 8
    23a2:	9e b9       	out	0x0e, r25	; 14
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <lcd_write_nibble+0x46>
    23a6:	9e b1       	in	r25, 0x0e	; 14
    23a8:	97 7f       	andi	r25, 0xF7	; 247
    23aa:	9e b9       	out	0x0e, r25	; 14
    23ac:	84 ff       	sbrs	r24, 4
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <lcd_write_nibble+0x52>
    23b0:	84 b3       	in	r24, 0x14	; 20
    23b2:	80 62       	ori	r24, 0x20	; 32
    23b4:	84 bb       	out	0x14, r24	; 20
    23b6:	03 c0       	rjmp	.+6      	; 0x23be <lcd_write_nibble+0x58>
    23b8:	84 b3       	in	r24, 0x14	; 20
    23ba:	8f 7d       	andi	r24, 0xDF	; 223
    23bc:	84 bb       	out	0x14, r24	; 20
    23be:	e2 e0       	ldi	r30, 0x02	; 2
    23c0:	f1 e0       	ldi	r31, 0x01	; 1
    23c2:	80 81       	ld	r24, Z
    23c4:	80 64       	ori	r24, 0x40	; 64
    23c6:	80 83       	st	Z, r24
    23c8:	85 e0       	ldi	r24, 0x05	; 5
    23ca:	8a 95       	dec	r24
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <lcd_write_nibble+0x64>
    23ce:	00 00       	nop
    23d0:	80 81       	ld	r24, Z
    23d2:	8f 7b       	andi	r24, 0xBF	; 191
    23d4:	80 83       	st	Z, r24
    23d6:	85 e0       	ldi	r24, 0x05	; 5
    23d8:	8a 95       	dec	r24
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <lcd_write_nibble+0x72>
    23dc:	00 00       	nop
    23de:	08 95       	ret

000023e0 <lcd_write_character>:
    23e0:	cf 93       	push	r28
    23e2:	c8 2f       	mov	r28, r24
    23e4:	e2 e0       	ldi	r30, 0x02	; 2
    23e6:	f1 e0       	ldi	r31, 0x01	; 1
    23e8:	80 81       	ld	r24, Z
    23ea:	80 62       	ori	r24, 0x20	; 32
    23ec:	80 83       	st	Z, r24
    23ee:	80 81       	ld	r24, Z
    23f0:	8f 7b       	andi	r24, 0xBF	; 191
    23f2:	80 83       	st	Z, r24
    23f4:	8c 2f       	mov	r24, r28
    23f6:	b7 df       	rcall	.-146    	; 0x2366 <lcd_write_nibble>
    23f8:	8c 2f       	mov	r24, r28
    23fa:	82 95       	swap	r24
    23fc:	80 7f       	andi	r24, 0xF0	; 240
    23fe:	b3 df       	rcall	.-154    	; 0x2366 <lcd_write_nibble>
    2400:	8f ef       	ldi	r24, 0xFF	; 255
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <lcd_write_character+0x24>
    2408:	00 c0       	rjmp	.+0      	; 0x240a <lcd_write_character+0x2a>
    240a:	00 00       	nop
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <lcd_write_command>:
    2410:	cf 93       	push	r28
    2412:	c8 2f       	mov	r28, r24
    2414:	e2 e0       	ldi	r30, 0x02	; 2
    2416:	f1 e0       	ldi	r31, 0x01	; 1
    2418:	80 81       	ld	r24, Z
    241a:	8f 7d       	andi	r24, 0xDF	; 223
    241c:	80 83       	st	Z, r24
    241e:	80 81       	ld	r24, Z
    2420:	8f 7b       	andi	r24, 0xBF	; 191
    2422:	80 83       	st	Z, r24
    2424:	8c 2f       	mov	r24, r28
    2426:	9f df       	rcall	.-194    	; 0x2366 <lcd_write_nibble>
    2428:	8c 2f       	mov	r24, r28
    242a:	82 95       	swap	r24
    242c:	80 7f       	andi	r24, 0xF0	; 240
    242e:	9b df       	rcall	.-202    	; 0x2366 <lcd_write_nibble>
    2430:	c1 50       	subi	r28, 0x01	; 1
    2432:	c2 30       	cpi	r28, 0x02	; 2
    2434:	38 f4       	brcc	.+14     	; 0x2444 <lcd_write_command+0x34>
    2436:	8f e0       	ldi	r24, 0x0F	; 15
    2438:	97 e2       	ldi	r25, 0x27	; 39
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <lcd_write_command+0x2a>
    243e:	00 c0       	rjmp	.+0      	; 0x2440 <lcd_write_command+0x30>
    2440:	00 00       	nop
    2442:	06 c0       	rjmp	.+12     	; 0x2450 <lcd_write_command+0x40>
    2444:	8f ef       	ldi	r24, 0xFF	; 255
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <lcd_write_command+0x38>
    244c:	00 c0       	rjmp	.+0      	; 0x244e <lcd_write_command+0x3e>
    244e:	00 00       	nop
    2450:	cf 91       	pop	r28
    2452:	08 95       	ret

00002454 <lcd_init>:
    2454:	e1 e0       	ldi	r30, 0x01	; 1
    2456:	f1 e0       	ldi	r31, 0x01	; 1
    2458:	80 81       	ld	r24, Z
    245a:	80 61       	ori	r24, 0x10	; 16
    245c:	80 83       	st	Z, r24
    245e:	80 81       	ld	r24, Z
    2460:	88 60       	ori	r24, 0x08	; 8
    2462:	80 83       	st	Z, r24
    2464:	8d b1       	in	r24, 0x0d	; 13
    2466:	88 60       	ori	r24, 0x08	; 8
    2468:	8d b9       	out	0x0d, r24	; 13
    246a:	83 b3       	in	r24, 0x13	; 19
    246c:	80 62       	ori	r24, 0x20	; 32
    246e:	83 bb       	out	0x13, r24	; 19
    2470:	80 81       	ld	r24, Z
    2472:	80 64       	ori	r24, 0x40	; 64
    2474:	80 83       	st	Z, r24
    2476:	80 81       	ld	r24, Z
    2478:	80 62       	ori	r24, 0x20	; 32
    247a:	80 83       	st	Z, r24
    247c:	2f ef       	ldi	r18, 0xFF	; 255
    247e:	81 ee       	ldi	r24, 0xE1	; 225
    2480:	94 e0       	ldi	r25, 0x04	; 4
    2482:	21 50       	subi	r18, 0x01	; 1
    2484:	80 40       	sbci	r24, 0x00	; 0
    2486:	90 40       	sbci	r25, 0x00	; 0
    2488:	e1 f7       	brne	.-8      	; 0x2482 <lcd_init+0x2e>
    248a:	00 c0       	rjmp	.+0      	; 0x248c <lcd_init+0x38>
    248c:	00 00       	nop
    248e:	e2 e0       	ldi	r30, 0x02	; 2
    2490:	f1 e0       	ldi	r31, 0x01	; 1
    2492:	80 81       	ld	r24, Z
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	80 83       	st	Z, r24
    2498:	80 81       	ld	r24, Z
    249a:	8f 7b       	andi	r24, 0xBF	; 191
    249c:	80 83       	st	Z, r24
    249e:	80 e3       	ldi	r24, 0x30	; 48
    24a0:	62 df       	rcall	.-316    	; 0x2366 <lcd_write_nibble>
    24a2:	8f e1       	ldi	r24, 0x1F	; 31
    24a4:	9e e4       	ldi	r25, 0x4E	; 78
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <lcd_init+0x52>
    24aa:	00 c0       	rjmp	.+0      	; 0x24ac <lcd_init+0x58>
    24ac:	00 00       	nop
    24ae:	80 e3       	ldi	r24, 0x30	; 48
    24b0:	5a df       	rcall	.-332    	; 0x2366 <lcd_write_nibble>
    24b2:	8f e1       	ldi	r24, 0x1F	; 31
    24b4:	9e e4       	ldi	r25, 0x4E	; 78
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <lcd_init+0x62>
    24ba:	00 c0       	rjmp	.+0      	; 0x24bc <lcd_init+0x68>
    24bc:	00 00       	nop
    24be:	80 e3       	ldi	r24, 0x30	; 48
    24c0:	52 df       	rcall	.-348    	; 0x2366 <lcd_write_nibble>
    24c2:	8f e1       	ldi	r24, 0x1F	; 31
    24c4:	9e e4       	ldi	r25, 0x4E	; 78
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <lcd_init+0x72>
    24ca:	00 c0       	rjmp	.+0      	; 0x24cc <lcd_init+0x78>
    24cc:	00 00       	nop
    24ce:	88 e2       	ldi	r24, 0x28	; 40
    24d0:	4a df       	rcall	.-364    	; 0x2366 <lcd_write_nibble>
    24d2:	8f ef       	ldi	r24, 0xFF	; 255
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <lcd_init+0x82>
    24da:	00 c0       	rjmp	.+0      	; 0x24dc <lcd_init+0x88>
    24dc:	00 00       	nop
    24de:	88 e2       	ldi	r24, 0x28	; 40
    24e0:	97 df       	rcall	.-210    	; 0x2410 <lcd_write_command>
    24e2:	88 e0       	ldi	r24, 0x08	; 8
    24e4:	95 df       	rcall	.-214    	; 0x2410 <lcd_write_command>
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	93 df       	rcall	.-218    	; 0x2410 <lcd_write_command>
    24ea:	86 e0       	ldi	r24, 0x06	; 6
    24ec:	91 df       	rcall	.-222    	; 0x2410 <lcd_write_command>
    24ee:	8c e0       	ldi	r24, 0x0C	; 12
    24f0:	8f cf       	rjmp	.-226    	; 0x2410 <lcd_write_command>
    24f2:	08 95       	ret

000024f4 <lcd_goto>:
    24f4:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <lcd_cursorPos>
    24f8:	80 58       	subi	r24, 0x80	; 128
    24fa:	8a cf       	rjmp	.-236    	; 0x2410 <lcd_write_command>
    24fc:	08 95       	ret

000024fe <lcd_clrscr>:
    24fe:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <lcd_cursorPos>
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	85 df       	rcall	.-246    	; 0x2410 <lcd_write_command>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	e8 e5       	ldi	r30, 0x58	; 88
    250a:	f3 e0       	ldi	r31, 0x03	; 3
    250c:	04 c0       	rjmp	.+8      	; 0x2516 <lcd_clrscr+0x18>
    250e:	90 e2       	ldi	r25, 0x20	; 32
    2510:	90 83       	st	Z, r25
    2512:	8f 5f       	subi	r24, 0xFF	; 255
    2514:	31 96       	adiw	r30, 0x01	; 1
    2516:	80 35       	cpi	r24, 0x50	; 80
    2518:	d0 f3       	brcs	.-12     	; 0x250e <lcd_clrscr+0x10>
    251a:	08 95       	ret

0000251c <getCursorFromLCDRAMcursor>:
}

uint8_t getCursorFromLCDRAMcursor(uint8_t lcd_cursor){
	if ((lcd_cursor >= LCD_LINE0) && (lcd_cursor < LCD_EOLINE0)){
    251c:	84 31       	cpi	r24, 0x14	; 20
    251e:	98 f0       	brcs	.+38     	; 0x2546 <getCursorFromLCDRAMcursor+0x2a>
		// line 0
		return lcd_cursor-LCD_LINE0 + 0;
	} else if ((lcd_cursor >= LCD_LINE1) && (lcd_cursor < LCD_EOLINE1)){
    2520:	90 ec       	ldi	r25, 0xC0	; 192
    2522:	98 0f       	add	r25, r24
    2524:	94 31       	cpi	r25, 0x14	; 20
    2526:	10 f4       	brcc	.+4      	; 0x252c <getCursorFromLCDRAMcursor+0x10>
		return lcd_cursor-LCD_LINE1 + 20;
    2528:	8c 52       	subi	r24, 0x2C	; 44
    252a:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE2) && (lcd_cursor < LCD_EOLINE2)){
    252c:	9c ee       	ldi	r25, 0xEC	; 236
    252e:	98 0f       	add	r25, r24
    2530:	94 31       	cpi	r25, 0x14	; 20
    2532:	10 f4       	brcc	.+4      	; 0x2538 <getCursorFromLCDRAMcursor+0x1c>
		return lcd_cursor-LCD_LINE2 +40;
    2534:	8c 5e       	subi	r24, 0xEC	; 236
    2536:	08 95       	ret
	} else if ((lcd_cursor >= LCD_LINE3) && (lcd_cursor < LCD_EOLINE3)){
    2538:	9c ea       	ldi	r25, 0xAC	; 172
    253a:	98 0f       	add	r25, r24
    253c:	94 31       	cpi	r25, 0x14	; 20
    253e:	10 f4       	brcc	.+4      	; 0x2544 <getCursorFromLCDRAMcursor+0x28>
		return lcd_cursor-LCD_LINE3 + 60;
    2540:	88 51       	subi	r24, 0x18	; 24
    2542:	08 95       	ret
	}
	return 0xFF;
    2544:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    2546:	08 95       	ret

00002548 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/

void lcd_putc(char c)
{
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	d8 2f       	mov	r29, r24
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
    254e:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2552:	8c 2f       	mov	r24, r28
    2554:	e3 df       	rcall	.-58     	; 0x251c <getCursorFromLCDRAMcursor>
	if (cursor != 0xFF){
    2556:	8f 3f       	cpi	r24, 0xFF	; 255
    2558:	31 f1       	breq	.+76     	; 0x25a6 <lcd_putc+0x5e>
		uint8_t stored_char = c;
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
    255a:	d1 3a       	cpi	r29, 0xA1	; 161
    255c:	81 f0       	breq	.+32     	; 0x257e <lcd_putc+0x36>
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
		} else if (stored_char == LCD_CHAR_STATEONOFF){
    255e:	d0 38       	cpi	r29, 0x80	; 128
    2560:	81 f0       	breq	.+32     	; 0x2582 <lcd_putc+0x3a>
			stored_char = LCD_CHARREPL_STATEONOFF; 
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
    2562:	d5 3a       	cpi	r29, 0xA5	; 165
    2564:	81 f0       	breq	.+32     	; 0x2586 <lcd_putc+0x3e>
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
		} else if (stored_char == LCD_CHAR_STATEON){
    2566:	da 30       	cpi	r29, 0x0A	; 10
    2568:	81 f0       	breq	.+32     	; 0x258a <lcd_putc+0x42>
			stored_char = LCD_CHARREPL_STATEON; 
		} else if (stored_char == LCD_CHAR_SZ){
    256a:	d2 3e       	cpi	r29, 0xE2	; 226
    256c:	81 f0       	breq	.+32     	; 0x258e <lcd_putc+0x46>
			stored_char = LCD_CHARREPL_SZ; 
		} else if (stored_char == LCD_CHAR_UMLAUTU){
    256e:	d5 3f       	cpi	r29, 0xF5	; 245
    2570:	81 f0       	breq	.+32     	; 0x2592 <lcd_putc+0x4a>
			stored_char = LCD_CHARREPL_UMLAUTU; 
		} else if (stored_char == LCD_CHAR_UMLAUTO){
    2572:	df 3e       	cpi	r29, 0xEF	; 239
    2574:	81 f0       	breq	.+32     	; 0x2596 <lcd_putc+0x4e>
			stored_char = LCD_CHARREPL_UMLAUTO; 
		} else if (stored_char == LCD_CHAR_UMLAUTA){
    2576:	d1 3e       	cpi	r29, 0xE1	; 225
    2578:	81 f0       	breq	.+32     	; 0x259a <lcd_putc+0x52>
{
	// V 0.61: store char in lcd_buffer. convert values > 0x7F to special charactes < 0x20
	// so data transfer uses bytes below 0x80 only
	uint8_t cursor = getCursorFromLCDRAMcursor(lcd_cursorPos);
	if (cursor != 0xFF){
		uint8_t stored_char = c;
    257a:	9d 2f       	mov	r25, r29
    257c:	0f c0       	rjmp	.+30     	; 0x259c <lcd_putc+0x54>
		if (stored_char == LCD_CHAR_WAIT_SYMBOL){
			stored_char = LCD_CHARREPL_WAIT_SYMBOL; 
    257e:	90 e2       	ldi	r25, 0x20	; 32
    2580:	0d c0       	rjmp	.+26     	; 0x259c <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEONOFF){
			stored_char = LCD_CHARREPL_STATEONOFF; 
    2582:	90 e2       	ldi	r25, 0x20	; 32
    2584:	0b c0       	rjmp	.+22     	; 0x259c <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_NOTESTRAIGHT_SYM){
			stored_char = LCD_CHARREPL_NOTESTRAIGHT_SYM; 
    2586:	94 e1       	ldi	r25, 0x14	; 20
    2588:	09 c0       	rjmp	.+18     	; 0x259c <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_STATEON){
			stored_char = LCD_CHARREPL_STATEON; 
    258a:	95 e1       	ldi	r25, 0x15	; 21
    258c:	07 c0       	rjmp	.+14     	; 0x259c <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_SZ){
			stored_char = LCD_CHARREPL_SZ; 
    258e:	93 e1       	ldi	r25, 0x13	; 19
    2590:	05 c0       	rjmp	.+10     	; 0x259c <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTU){
			stored_char = LCD_CHARREPL_UMLAUTU; 
    2592:	92 e1       	ldi	r25, 0x12	; 18
    2594:	03 c0       	rjmp	.+6      	; 0x259c <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTO){
			stored_char = LCD_CHARREPL_UMLAUTO; 
    2596:	91 e1       	ldi	r25, 0x11	; 17
    2598:	01 c0       	rjmp	.+2      	; 0x259c <lcd_putc+0x54>
		} else if (stored_char == LCD_CHAR_UMLAUTA){
			stored_char = LCD_CHARREPL_UMLAUTA; 
    259a:	90 e1       	ldi	r25, 0x10	; 16
		} 
		lcd_buffer[cursor] = stored_char;
    259c:	e8 2f       	mov	r30, r24
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	e8 5a       	subi	r30, 0xA8	; 168
    25a2:	fc 4f       	sbci	r31, 0xFC	; 252
    25a4:	90 83       	st	Z, r25
	}
	lcd_cursorPos =  (lcd_cursorPos+1) &0x7F;
    25a6:	cf 5f       	subi	r28, 0xFF	; 255
    25a8:	cf 77       	andi	r28, 0x7F	; 127
    25aa:	c0 93 a8 03 	sts	0x03A8, r28	; 0x8003a8 <lcd_cursorPos>
	lcd_write_character(c);
    25ae:	8d 2f       	mov	r24, r29
    25b0:	17 df       	rcall	.-466    	; 0x23e0 <lcd_write_character>
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	08 95       	ret

000025b8 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
{
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	fc 01       	movw	r30, r24
	if (s != NULL){
    25be:	89 2b       	or	r24, r25
    25c0:	19 f4       	brne	.+6      	; 0x25c8 <lcd_puts+0x10>
    25c2:	07 c0       	rjmp	.+14     	; 0x25d2 <lcd_puts+0x1a>
		register char c;

		while ((c=*s++))
		lcd_putc(c);
    25c4:	c1 df       	rcall	.-126    	; 0x2548 <lcd_putc>
void lcd_puts(const char *s)
{
	if (s != NULL){
		register char c;

		while ((c=*s++))
    25c6:	fe 01       	movw	r30, r28
    25c8:	ef 01       	movw	r28, r30
    25ca:	21 96       	adiw	r28, 0x01	; 1
    25cc:	80 81       	ld	r24, Z
    25ce:	81 11       	cpse	r24, r1
    25d0:	f9 cf       	rjmp	.-14     	; 0x25c4 <lcd_puts+0xc>
		lcd_putc(c);
	}
}
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	08 95       	ret

000025d8 <lcd_puts_P>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
    25d8:	cf 93       	push	r28
    25da:	df 93       	push	r29
    25dc:	fc 01       	movw	r30, r24
	if (progmem_s != NULL){
    25de:	89 2b       	or	r24, r25
    25e0:	19 f4       	brne	.+6      	; 0x25e8 <lcd_puts_P+0x10>
    25e2:	07 c0       	rjmp	.+14     	; 0x25f2 <lcd_puts_P+0x1a>
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
		lcd_putc(c);
    25e4:	b1 df       	rcall	.-158    	; 0x2548 <lcd_putc>
*************************************************************************/
void lcd_puts_P(const char *progmem_s)
{
	if (progmem_s != NULL){
		register char c;
		while ((c=pgm_read_byte(progmem_s++)))
    25e6:	fe 01       	movw	r30, r28
    25e8:	ef 01       	movw	r28, r30
    25ea:	21 96       	adiw	r28, 0x01	; 1
    25ec:	84 91       	lpm	r24, Z
    25ee:	81 11       	cpse	r24, r1
    25f0:	f9 cf       	rjmp	.-14     	; 0x25e4 <lcd_puts_P+0xc>
		lcd_putc(c);
	}
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <init_log>:

void log_putWarning(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_WARNING)	;
}
void log_putInfo(uint8_t LogCat, uint8_t LogNr, uint16_t LogInfo){
	log_put(LogCat, LogNr, LogInfo, LOG_TYPE_INFO)	;
    25f8:	82 ed       	ldi	r24, 0xD2	; 210
    25fa:	93 e0       	ldi	r25, 0x03	; 3
    25fc:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    2600:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2604:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    2608:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    260c:	08 95       	ret

0000260e <log_count>:
    260e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    2612:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    2616:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <pLogStart>
    261a:	30 91 65 05 	lds	r19, 0x0565	; 0x800565 <pLogStart+0x1>
    261e:	82 17       	cp	r24, r18
    2620:	93 07       	cpc	r25, r19
    2622:	48 f0       	brcs	.+18     	; 0x2636 <log_count+0x28>
    2624:	82 1b       	sub	r24, r18
    2626:	93 0b       	sbc	r25, r19
    2628:	95 95       	asr	r25
    262a:	87 95       	ror	r24
    262c:	9d ec       	ldi	r25, 0xCD	; 205
    262e:	89 9f       	mul	r24, r25
    2630:	80 2d       	mov	r24, r0
    2632:	11 24       	eor	r1, r1
    2634:	08 95       	ret
    2636:	80 57       	subi	r24, 0x70	; 112
    2638:	9e 4f       	sbci	r25, 0xFE	; 254
    263a:	82 1b       	sub	r24, r18
    263c:	93 0b       	sbc	r25, r19
    263e:	95 95       	asr	r25
    2640:	87 95       	ror	r24
    2642:	9d ec       	ldi	r25, 0xCD	; 205
    2644:	89 9f       	mul	r24, r25
    2646:	80 2d       	mov	r24, r0
    2648:	11 24       	eor	r1, r1
    264a:	08 95       	ret

0000264c <log_getLog>:
    264c:	cf 93       	push	r28
    264e:	c8 2f       	mov	r28, r24
    2650:	de df       	rcall	.-68     	; 0x260e <log_count>
    2652:	c8 17       	cp	r28, r24
    2654:	f8 f4       	brcc	.+62     	; 0x2694 <log_getLog+0x48>
    2656:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <pLogStart>
    265a:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <pLogStart+0x1>
    265e:	8c 2f       	mov	r24, r28
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	9c 01       	movw	r18, r24
    2664:	22 0f       	add	r18, r18
    2666:	33 1f       	adc	r19, r19
    2668:	88 0f       	add	r24, r24
    266a:	99 1f       	adc	r25, r25
    266c:	88 0f       	add	r24, r24
    266e:	99 1f       	adc	r25, r25
    2670:	88 0f       	add	r24, r24
    2672:	99 1f       	adc	r25, r25
    2674:	28 0f       	add	r18, r24
    2676:	39 1f       	adc	r19, r25
    2678:	ca 01       	movw	r24, r20
    267a:	82 0f       	add	r24, r18
    267c:	93 1f       	adc	r25, r19
    267e:	65 e0       	ldi	r22, 0x05	; 5
    2680:	88 35       	cpi	r24, 0x58	; 88
    2682:	96 07       	cpc	r25, r22
    2684:	49 f0       	breq	.+18     	; 0x2698 <log_getLog+0x4c>
    2686:	40 f0       	brcs	.+16     	; 0x2698 <log_getLog+0x4c>
    2688:	20 59       	subi	r18, 0x90	; 144
    268a:	31 40       	sbci	r19, 0x01	; 1
    268c:	ca 01       	movw	r24, r20
    268e:	82 0f       	add	r24, r18
    2690:	93 1f       	adc	r25, r19
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <log_getLog+0x4c>
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	cf 91       	pop	r28
    269a:	08 95       	ret

0000269c <log_getErrorText>:
    269c:	d7 df       	rcall	.-82     	; 0x264c <log_getLog>
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	f1 f1       	breq	.+124    	; 0x271e <log_getErrorText+0x82>
    26a2:	fc 01       	movw	r30, r24
    26a4:	36 81       	ldd	r19, Z+6	; 0x06
    26a6:	67 81       	ldd	r22, Z+7	; 0x07
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	34 c0       	rjmp	.+104    	; 0x2714 <log_getErrorText+0x78>
    26ac:	42 2f       	mov	r20, r18
    26ae:	50 e0       	ldi	r21, 0x00	; 0
    26b0:	fa 01       	movw	r30, r20
    26b2:	ee 0f       	add	r30, r30
    26b4:	ff 1f       	adc	r31, r31
    26b6:	cf 01       	movw	r24, r30
    26b8:	88 0f       	add	r24, r24
    26ba:	99 1f       	adc	r25, r25
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	88 0f       	add	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	e8 0f       	add	r30, r24
    26c6:	f9 1f       	adc	r31, r25
    26c8:	e6 59       	subi	r30, 0x96	; 150
    26ca:	fe 4f       	sbci	r31, 0xFE	; 254
    26cc:	84 91       	lpm	r24, Z
    26ce:	38 13       	cpse	r19, r24
    26d0:	20 c0       	rjmp	.+64     	; 0x2712 <log_getErrorText+0x76>
    26d2:	fa 01       	movw	r30, r20
    26d4:	ee 0f       	add	r30, r30
    26d6:	ff 1f       	adc	r31, r31
    26d8:	cf 01       	movw	r24, r30
    26da:	88 0f       	add	r24, r24
    26dc:	99 1f       	adc	r25, r25
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	88 0f       	add	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	e8 0f       	add	r30, r24
    26e8:	f9 1f       	adc	r31, r25
    26ea:	e5 59       	subi	r30, 0x95	; 149
    26ec:	fe 4f       	sbci	r31, 0xFE	; 254
    26ee:	84 91       	lpm	r24, Z
    26f0:	68 13       	cpse	r22, r24
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <log_getErrorText+0x76>
    26f4:	44 0f       	add	r20, r20
    26f6:	55 1f       	adc	r21, r21
    26f8:	ca 01       	movw	r24, r20
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	48 0f       	add	r20, r24
    2708:	59 1f       	adc	r21, r25
    270a:	ca 01       	movw	r24, r20
    270c:	84 59       	subi	r24, 0x94	; 148
    270e:	9e 4f       	sbci	r25, 0xFE	; 254
    2710:	08 95       	ret
    2712:	2f 5f       	subi	r18, 0xFF	; 255
    2714:	20 31       	cpi	r18, 0x10	; 16
    2716:	50 f2       	brcs	.-108    	; 0x26ac <log_getErrorText+0x10>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	08 95       	ret
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	08 95       	ret

00002724 <logCheckUnreadErrorLogs>:
    2724:	cf 93       	push	r28
    2726:	73 df       	rcall	.-282    	; 0x260e <log_count>
    2728:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <log_unreadErrors>
    272c:	81 11       	cpse	r24, r1
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <logCheckUnreadErrorLogs+0x34>
    2730:	17 c0       	rjmp	.+46     	; 0x2760 <logCheckUnreadErrorLogs+0x3c>
    2732:	8c 2f       	mov	r24, r28
    2734:	8b df       	rcall	.-234    	; 0x264c <log_getLog>
    2736:	00 97       	sbiw	r24, 0x00	; 0
    2738:	61 f0       	breq	.+24     	; 0x2752 <logCheckUnreadErrorLogs+0x2e>
    273a:	fc 01       	movw	r30, r24
    273c:	24 81       	ldd	r18, Z+4	; 0x04
    273e:	20 32       	cpi	r18, 0x20	; 32
    2740:	51 f0       	breq	.+20     	; 0x2756 <logCheckUnreadErrorLogs+0x32>
    2742:	95 81       	ldd	r25, Z+5	; 0x05
    2744:	8c 2f       	mov	r24, r28
    2746:	95 34       	cpi	r25, 0x45	; 69
    2748:	39 f4       	brne	.+14     	; 0x2758 <logCheckUnreadErrorLogs+0x34>
    274a:	8f ef       	ldi	r24, 0xFF	; 255
    274c:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    2750:	07 c0       	rjmp	.+14     	; 0x2760 <logCheckUnreadErrorLogs+0x3c>
    2752:	8c 2f       	mov	r24, r28
    2754:	01 c0       	rjmp	.+2      	; 0x2758 <logCheckUnreadErrorLogs+0x34>
    2756:	8c 2f       	mov	r24, r28
    2758:	cf ef       	ldi	r28, 0xFF	; 255
    275a:	c8 0f       	add	r28, r24
    275c:	81 11       	cpse	r24, r1
    275e:	e9 cf       	rjmp	.-46     	; 0x2732 <logCheckUnreadErrorLogs+0xe>
    2760:	cf 91       	pop	r28
    2762:	08 95       	ret

00002764 <log_getShortTextFromPtr>:
    2764:	1f 93       	push	r17
    2766:	cf 93       	push	r28
    2768:	df 93       	push	r29
    276a:	00 97       	sbiw	r24, 0x00	; 0
    276c:	09 f4       	brne	.+2      	; 0x2770 <log_getShortTextFromPtr+0xc>
    276e:	7b c0       	rjmp	.+246    	; 0x2866 <log_getShortTextFromPtr+0x102>
    2770:	16 2f       	mov	r17, r22
    2772:	ec 01       	movw	r28, r24
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	88 23       	and	r24, r24
    2778:	79 f0       	breq	.+30     	; 0x2798 <log_getShortTextFromPtr+0x34>
    277a:	6a ea       	ldi	r22, 0xAA	; 170
    277c:	73 e0       	ldi	r23, 0x03	; 3
    277e:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    2782:	bc 01       	movw	r22, r24
    2784:	6f 5f       	subi	r22, 0xFF	; 255
    2786:	7f 4f       	sbci	r23, 0xFF	; 255
    2788:	28 e6       	ldi	r18, 0x68	; 104
    278a:	fc 01       	movw	r30, r24
    278c:	20 83       	st	Z, r18
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    2794:	dc 01       	movw	r26, r24
    2796:	2f c0       	rjmp	.+94     	; 0x27f6 <log_getShortTextFromPtr+0x92>
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	88 23       	and	r24, r24
    279c:	79 f0       	breq	.+30     	; 0x27bc <log_getShortTextFromPtr+0x58>
    279e:	6a ea       	ldi	r22, 0xAA	; 170
    27a0:	73 e0       	ldi	r23, 0x03	; 3
    27a2:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    27a6:	bc 01       	movw	r22, r24
    27a8:	6f 5f       	subi	r22, 0xFF	; 255
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	2d e6       	ldi	r18, 0x6D	; 109
    27ae:	fc 01       	movw	r30, r24
    27b0:	20 83       	st	Z, r18
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    27b8:	dc 01       	movw	r26, r24
    27ba:	1d c0       	rjmp	.+58     	; 0x27f6 <log_getShortTextFromPtr+0x92>
    27bc:	6a ea       	ldi	r22, 0xAA	; 170
    27be:	73 e0       	ldi	r23, 0x03	; 3
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    27c6:	fc 01       	movw	r30, r24
    27c8:	83 e7       	ldi	r24, 0x73	; 115
    27ca:	80 83       	st	Z, r24
    27cc:	98 81       	ld	r25, Y
    27ce:	99 0f       	add	r25, r25
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <log_getShortTextFromPtr+0x74>
    27d4:	99 51       	subi	r25, 0x19	; 25
    27d6:	2f 5f       	subi	r18, 0xFF	; 255
    27d8:	99 31       	cpi	r25, 0x19	; 25
    27da:	e0 f7       	brcc	.-8      	; 0x27d4 <log_getShortTextFromPtr+0x70>
    27dc:	20 5d       	subi	r18, 0xD0	; 208
    27de:	21 83       	std	Z+1, r18	; 0x01
    27e0:	99 0f       	add	r25, r25
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <log_getShortTextFromPtr+0x86>
    27e6:	95 50       	subi	r25, 0x05	; 5
    27e8:	2f 5f       	subi	r18, 0xFF	; 255
    27ea:	95 30       	cpi	r25, 0x05	; 5
    27ec:	e0 f7       	brcc	.-8      	; 0x27e6 <log_getShortTextFromPtr+0x82>
    27ee:	df 01       	movw	r26, r30
    27f0:	13 96       	adiw	r26, 0x03	; 3
    27f2:	20 5d       	subi	r18, 0xD0	; 208
    27f4:	22 83       	std	Z+2, r18	; 0x02
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	90 34       	cpi	r25, 0x40	; 64
    27fa:	51 f0       	breq	.+20     	; 0x2810 <log_getShortTextFromPtr+0xac>
    27fc:	90 38       	cpi	r25, 0x80	; 128
    27fe:	19 f0       	breq	.+6      	; 0x2806 <log_getShortTextFromPtr+0xa2>
    2800:	90 32       	cpi	r25, 0x20	; 32
    2802:	81 f4       	brne	.+32     	; 0x2824 <log_getShortTextFromPtr+0xc0>
    2804:	0a c0       	rjmp	.+20     	; 0x281a <log_getShortTextFromPtr+0xb6>
    2806:	fd 01       	movw	r30, r26
    2808:	31 96       	adiw	r30, 0x01	; 1
    280a:	8a e2       	ldi	r24, 0x2A	; 42
    280c:	8c 93       	st	X, r24
    280e:	0e c0       	rjmp	.+28     	; 0x282c <log_getShortTextFromPtr+0xc8>
    2810:	fd 01       	movw	r30, r26
    2812:	31 96       	adiw	r30, 0x01	; 1
    2814:	85 ea       	ldi	r24, 0xA5	; 165
    2816:	8c 93       	st	X, r24
    2818:	09 c0       	rjmp	.+18     	; 0x282c <log_getShortTextFromPtr+0xc8>
    281a:	fd 01       	movw	r30, r26
    281c:	31 96       	adiw	r30, 0x01	; 1
    281e:	80 e2       	ldi	r24, 0x20	; 32
    2820:	8c 93       	st	X, r24
    2822:	04 c0       	rjmp	.+8      	; 0x282c <log_getShortTextFromPtr+0xc8>
    2824:	fd 01       	movw	r30, r26
    2826:	31 96       	adiw	r30, 0x01	; 1
    2828:	8f e3       	ldi	r24, 0x3F	; 63
    282a:	8c 93       	st	X, r24
    282c:	bf 01       	movw	r22, r30
    282e:	6f 5f       	subi	r22, 0xFF	; 255
    2830:	7f 4f       	sbci	r23, 0xFF	; 255
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	80 83       	st	Z, r24
    2836:	8e 81       	ldd	r24, Y+6	; 0x06
    2838:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    283c:	bc 01       	movw	r22, r24
    283e:	8f 81       	ldd	r24, Y+7	; 0x07
    2840:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    2844:	bc 01       	movw	r22, r24
    2846:	6f 5f       	subi	r22, 0xFF	; 255
    2848:	7f 4f       	sbci	r23, 0xFF	; 255
    284a:	2d e2       	ldi	r18, 0x2D	; 45
    284c:	fc 01       	movw	r30, r24
    284e:	20 83       	st	Z, r18
    2850:	88 85       	ldd	r24, Y+8	; 0x08
    2852:	99 85       	ldd	r25, Y+9	; 0x09
    2854:	0e 94 71 37 	call	0x6ee2	; 0x6ee2 <putChar_long>
    2858:	fc 01       	movw	r30, r24
    285a:	10 82       	st	Z, r1
    285c:	1f 3f       	cpi	r17, 0xFF	; 255
    285e:	41 f0       	breq	.+16     	; 0x2870 <log_getShortTextFromPtr+0x10c>
    2860:	1c 83       	std	Y+4, r17	; 0x04
    2862:	60 df       	rcall	.-320    	; 0x2724 <logCheckUnreadErrorLogs>
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <log_getShortTextFromPtr+0x10c>
    2866:	ea ea       	ldi	r30, 0xAA	; 170
    2868:	f3 e0       	ldi	r31, 0x03	; 3
    286a:	8d e2       	ldi	r24, 0x2D	; 45
    286c:	80 83       	st	Z, r24
    286e:	11 82       	std	Z+1, r1	; 0x01
    2870:	8a ea       	ldi	r24, 0xAA	; 170
    2872:	93 e0       	ldi	r25, 0x03	; 3
    2874:	df 91       	pop	r29
    2876:	cf 91       	pop	r28
    2878:	1f 91       	pop	r17
    287a:	08 95       	ret

0000287c <log_put>:
    287c:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2880:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2884:	a1 e4       	ldi	r26, 0x41	; 65
    2886:	b2 e0       	ldi	r27, 0x02	; 2
    2888:	9c 91       	ld	r25, X
    288a:	90 83       	st	Z, r25
    288c:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    2890:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    2894:	11 96       	adiw	r26, 0x01	; 1
    2896:	9c 91       	ld	r25, X
    2898:	11 97       	sbiw	r26, 0x01	; 1
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	e0 91 62 05 	lds	r30, 0x0562	; 0x800562 <pLogEnd>
    28a0:	f0 91 63 05 	lds	r31, 0x0563	; 0x800563 <pLogEnd+0x1>
    28a4:	12 96       	adiw	r26, 0x02	; 2
    28a6:	9c 91       	ld	r25, X
    28a8:	12 97       	sbiw	r26, 0x02	; 2
    28aa:	92 83       	std	Z+2, r25	; 0x02
    28ac:	13 96       	adiw	r26, 0x03	; 3
    28ae:	9c 91       	ld	r25, X
    28b0:	93 83       	std	Z+3, r25	; 0x03
    28b2:	25 83       	std	Z+5, r18	; 0x05
    28b4:	86 83       	std	Z+6, r24	; 0x06
    28b6:	67 83       	std	Z+7, r22	; 0x07
    28b8:	51 87       	std	Z+9, r21	; 0x09
    28ba:	40 87       	std	Z+8, r20	; 0x08
    28bc:	80 e8       	ldi	r24, 0x80	; 128
    28be:	84 83       	std	Z+4, r24	; 0x04
    28c0:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <serUSB_Active>
    28c4:	8f 3f       	cpi	r24, 0xFF	; 255
    28c6:	81 f4       	brne	.+32     	; 0x28e8 <log_put+0x6c>
    28c8:	84 e6       	ldi	r24, 0x64	; 100
    28ca:	91 e0       	ldi	r25, 0x01	; 1
    28cc:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    28d0:	6f ef       	ldi	r22, 0xFF	; 255
    28d2:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    28d6:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    28da:	44 df       	rcall	.-376    	; 0x2764 <log_getShortTextFromPtr>
    28dc:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    28e0:	83 ef       	ldi	r24, 0xF3	; 243
    28e2:	91 e1       	ldi	r25, 0x11	; 17
    28e4:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    28e8:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <pLogEnd>
    28ec:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <pLogEnd+0x1>
    28f0:	0a 96       	adiw	r24, 0x0a	; 10
    28f2:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    28f6:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    28fa:	88 55       	subi	r24, 0x58	; 88
    28fc:	95 40       	sbci	r25, 0x05	; 5
    28fe:	39 f0       	breq	.+14     	; 0x290e <log_put+0x92>
    2900:	30 f0       	brcs	.+12     	; 0x290e <log_put+0x92>
    2902:	82 ed       	ldi	r24, 0xD2	; 210
    2904:	93 e0       	ldi	r25, 0x03	; 3
    2906:	90 93 63 05 	sts	0x0563, r25	; 0x800563 <pLogEnd+0x1>
    290a:	80 93 62 05 	sts	0x0562, r24	; 0x800562 <pLogEnd>
    290e:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <pLogEnd>
    2912:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <pLogEnd+0x1>
    2916:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <pLogStart>
    291a:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <pLogStart+0x1>
    291e:	28 17       	cp	r18, r24
    2920:	39 07       	cpc	r19, r25
    2922:	79 f4       	brne	.+30     	; 0x2942 <log_put+0xc6>
    2924:	0a 96       	adiw	r24, 0x0a	; 10
    2926:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    292a:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    292e:	88 55       	subi	r24, 0x58	; 88
    2930:	95 40       	sbci	r25, 0x05	; 5
    2932:	39 f0       	breq	.+14     	; 0x2942 <log_put+0xc6>
    2934:	30 f0       	brcs	.+12     	; 0x2942 <log_put+0xc6>
    2936:	82 ed       	ldi	r24, 0xD2	; 210
    2938:	93 e0       	ldi	r25, 0x03	; 3
    293a:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <pLogStart+0x1>
    293e:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <pLogStart>
    2942:	08 95       	ret

00002944 <log_putError>:
    2944:	25 e4       	ldi	r18, 0x45	; 69
    2946:	9a df       	rcall	.-204    	; 0x287c <log_put>
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <log_unreadErrors>
    294e:	08 95       	ret

00002950 <log_getShortTextFromIndex>:
	return Log_TextBuff;
}

const char nullLog [] PROGMEM = "-";

char* log_getShortTextFromIndex(uint8_t index,  char changeNotifyStatus){
    2950:	cf 93       	push	r28
    2952:	c6 2f       	mov	r28, r22
	LogList_t* pLogEntry;
	pLogEntry = log_getLog(index);
    2954:	7b de       	rcall	.-778    	; 0x264c <log_getLog>
	if (pLogEntry != NULL){
    2956:	00 97       	sbiw	r24, 0x00	; 0
    2958:	19 f0       	breq	.+6      	; 0x2960 <log_getShortTextFromIndex+0x10>
		return log_getShortTextFromPtr(pLogEntry,changeNotifyStatus);
    295a:	6c 2f       	mov	r22, r28
    295c:	03 df       	rcall	.-506    	; 0x2764 <log_getShortTextFromPtr>
    295e:	06 c0       	rjmp	.+12     	; 0x296c <log_getShortTextFromIndex+0x1c>
	} else {
		Log_TextBuff[0] = '-';
    2960:	ea ea       	ldi	r30, 0xAA	; 170
    2962:	f3 e0       	ldi	r31, 0x03	; 3
    2964:	8d e2       	ldi	r24, 0x2D	; 45
    2966:	80 83       	st	Z, r24
		Log_TextBuff[1] = '\0';
    2968:	11 82       	std	Z+1, r1	; 0x01
		return Log_TextBuff;
    296a:	cf 01       	movw	r24, r30
	}
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <main>:
int main(void)
{

	// INIT

	init_iopins (); // default only: all inputs with pullup
    2970:	dd dc       	rcall	.-1606   	; 0x232c <init_iopins>
	init_log();
    2972:	42 de       	rcall	.-892    	; 0x25f8 <init_log>
    2974:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <init_Serial0SerUSB>
	init_Serial0SerUSB();
    2978:	0e 94 8f 2a 	call	0x551e	; 0x551e <init_message>
	init_message();
	init_HwTimer();
    297c:	4f d8       	rcall	.-3938   	; 0x1a1c <init_HwTimer>
	init_Timers();
    297e:	36 d8       	rcall	.-3988   	; 0x19ec <init_Timers>
    2980:	5c d8       	rcall	.-3912   	; 0x1a3a <init_ADC>
	init_ADC();
    2982:	85 d8       	rcall	.-3830   	; 0x1a8e <init_Pipe>
	init_Pipe();
    2984:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <init_Serial1MIDI>
	init_Serial1MIDI();
    2988:	aa d8       	rcall	.-3756   	; 0x1ade <init_PipeModules>
    298a:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <init_Midi2Manual>
	init_PipeModules();
    298e:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <init_Manual2Midi>
	init_Midi2Manual();
    2992:	0e 94 21 2b 	call	0x5642	; 0x5642 <init_Midi>
	init_Manual2Midi();
    2996:	0e 94 95 2b 	call	0x572a	; 0x572a <init_Registers>
	init_Midi();
    299a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <init_Manual2Module>
	init_Registers();
    299e:	0e 94 30 29 	call	0x5260	; 0x5260 <init_SoftKeys>
	init_Manual2Module();
    29a2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <eeprom_UpdateALL>
	init_SoftKeys();
    29a6:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
	eeprom_UpdateALL(); // save all current settings (eventually defaults) to eeprom
    29aa:	54 dd       	rcall	.-1368   	; 0x2454 <lcd_init>
	INIT_MENU
    29ac:	0e 94 91 36 	call	0x6d22	; 0x6d22 <lcd_initCG>


	// BOOT MESSAGE

	lcd_init ();
	lcd_initCG();
    29b0:	a6 dd       	rcall	.-1204   	; 0x24fe <lcd_clrscr>
	lcd_clrscr ();
    29b2:	83 e4       	ldi	r24, 0x43	; 67
    29b4:	9f dd       	rcall	.-1218   	; 0x24f4 <lcd_goto>
	lcd_goto(LCD_LINE1+3);
    29b6:	85 ea       	ldi	r24, 0xA5	; 165
    29b8:	92 e0       	ldi	r25, 0x02	; 2
	lcd_puts_P(prog_name);
    29ba:	0e de       	rcall	.-996    	; 0x25d8 <lcd_puts_P>
    29bc:	8b e1       	ldi	r24, 0x1B	; 27
    29be:	9a dd       	rcall	.-1228   	; 0x24f4 <lcd_goto>
	lcd_goto(LCD_LINE2+7);
    29c0:	83 e9       	ldi	r24, 0x93	; 147
    29c2:	91 e1       	ldi	r25, 0x11	; 17
    29c4:	09 de       	rcall	.-1006   	; 0x25d8 <lcd_puts_P>
	lcd_puts_P(sw_version);
    29c6:	78 94       	sei
    29c8:	2f ef       	ldi	r18, 0xFF	; 255
    29ca:	47 e9       	ldi	r20, 0x97	; 151
    29cc:	8a e3       	ldi	r24, 0x3A	; 58
	sei();
    29ce:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29d0:	40 40       	sbci	r20, 0x00	; 0
    29d2:	80 40       	sbci	r24, 0x00	; 0
    29d4:	e1 f7       	brne	.-8      	; 0x29ce <main+0x5e>
    29d6:	00 c0       	rjmp	.+0      	; 0x29d8 <main+0x68>
    29d8:	00 00       	nop
    29da:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <init_Serial3SerESP>
	_delay_ms(1200);
	init_Serial3SerESP(); // activate serial from esp8266 not to early to ignore it's scrambled boot messages
    29de:	8f dd       	rcall	.-1250   	; 0x24fe <lcd_clrscr>
    29e0:	d2 d9       	rcall	.-3164   	; 0x1d86 <module_StartPowerOn>
	lcd_clrscr ();
    29e2:	8f ef       	ldi	r24, 0xFF	; 255
    29e4:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>

	// TURN ON POWER

	module_StartPowerOn();
    29e8:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
	MESSAGE_PIPE_HANDLING_ON
    29ec:	8e ef       	ldi	r24, 0xFE	; 254
    29ee:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>

	menuNotActive = TRUE;
    29f2:	df ef       	ldi	r29, 0xFF	; 255
	// menu_Init(NULL, NULL); // menu initaliszed but not displayed -> now alter when displayed
	uint8_t updateStatus = TRUE;
	messageFromESP = SER_ESP_SEND_LCD; // for first transfer
    29f4:	20 91 fc 13 	lds	r18, 0x13FC	; 0x8013fc <serESPRxInIndex>
    29f8:	30 91 fd 13 	lds	r19, 0x13FD	; 0x8013fd <serESPRxInIndex+0x1>
    while (1)
    {
		// V0.60 read message from usart3 (esp)
		if SER_ESP_RX_BUFFER_NONEMPTY {
    29fc:	80 91 f7 13 	lds	r24, 0x13F7	; 0x8013f7 <serESPRxOutIndex>
    2a00:	90 91 f8 13 	lds	r25, 0x13F8	; 0x8013f8 <serESPRxOutIndex+0x1>
    2a04:	28 17       	cp	r18, r24
    2a06:	39 07       	cpc	r19, r25
    2a08:	09 f4       	brne	.+2      	; 0x2a0c <main+0x9c>
    2a0a:	66 c0       	rjmp	.+204    	; 0x2ad8 <main+0x168>
    2a0c:	0e 94 b9 35 	call	0x6b72	; 0x6b72 <serial3SER_ESPReadRx>
    2a10:	c8 2f       	mov	r28, r24
    2a12:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
			uint8_t esp_message = serial3SER_ESPReadRx();
    2a16:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
			messageFromESP = esp_message; // save for later transfer of LCD
    2a1a:	8f e7       	ldi	r24, 0x7F	; 127
    2a1c:	8c 0f       	add	r24, r28
			serial0SER_USBSend(esp_message); // TODO ask if USB out is enabled
    2a1e:	86 30       	cpi	r24, 0x06	; 6
    2a20:	28 f4       	brcc	.+10     	; 0x2a2c <main+0xbc>
			if ((esp_message > SER_ESP_MSGOFFSET) && (esp_message <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX)){
    2a22:	80 e8       	ldi	r24, 0x80	; 128
    2a24:	8c 0f       	add	r24, r28
    2a26:	0e 94 96 2a 	call	0x552c	; 0x552c <message_push>
				// push key message from esp to queue
				message_push(esp_message-SER_ESP_MSGOFFSET);
    2a2a:	56 c0       	rjmp	.+172    	; 0x2ad8 <main+0x168>
    2a2c:	c0 39       	cpi	r28, 0x90	; 144
    2a2e:	09 f0       	breq	.+2      	; 0x2a32 <main+0xc2>
    2a30:	53 c0       	rjmp	.+166    	; 0x2ad8 <main+0x168>
    2a32:	80 91 ef 13 	lds	r24, 0x13EF	; 0x8013ef <serESPInBuffer>
			} else if (esp_message == SER_ESP_MSGMIDI) {
    2a36:	80 39       	cpi	r24, 0x90	; 144
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <main+0xcc>
				// MIDI data from ESP
				if (serESPInBuffer[0] == SER_ESP_MSGMIDI) {
    2a3a:	4e c0       	rjmp	.+156    	; 0x2ad8 <main+0x168>
    2a3c:	91 e0       	ldi	r25, 0x01	; 1
    2a3e:	e9 2f       	mov	r30, r25
    2a40:	09 2e       	mov	r0, r25
    2a42:	00 0c       	add	r0, r0
    2a44:	ff 0b       	sbc	r31, r31
					// this should always be so
					int8_t i = 1; // start with byte received before command
					// find ascii start char '=' SER_ESP_PARAM_START
					do {
						if (serESPInBuffer[i] == SER_ESP_PARAM_START){
    2a46:	e1 51       	subi	r30, 0x11	; 17
    2a48:	fc 4e       	sbci	r31, 0xEC	; 236
    2a4a:	80 81       	ld	r24, Z
    2a4c:	8d 33       	cpi	r24, 0x3D	; 61
    2a4e:	19 f0       	breq	.+6      	; 0x2a56 <main+0xe6>
    2a50:	9f 5f       	subi	r25, 0xFF	; 255
    2a52:	98 30       	cpi	r25, 0x08	; 8
    2a54:	a4 f3       	brlt	.-24     	; 0x2a3e <main+0xce>
    2a56:	98 30       	cpi	r25, 0x08	; 8
							break;
						}
						i++;
    2a58:	0c f0       	brlt	.+2      	; 0x2a5c <main+0xec>
					} while (i < SER_ESP_INPUTBUFFER_SIZE);
    2a5a:	3e c0       	rjmp	.+124    	; 0x2ad8 <main+0x168>
    2a5c:	89 2f       	mov	r24, r25
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
    2a5e:	85 95       	asr	r24
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	06 c0       	rjmp	.+12     	; 0x2a70 <main+0x100>
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
    2a64:	e2 2f       	mov	r30, r18
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2a68:	e9 59       	subi	r30, 0x99	; 153
    2a6a:	fa 4e       	sbci	r31, 0xEA	; 234
							serESPMidiTmp[j] = 0;
    2a6c:	10 82       	st	Z, r1
    2a6e:	2f 5f       	subi	r18, 0xFF	; 255
    2a70:	23 30       	cpi	r18, 0x03	; 3
    2a72:	c0 f3       	brcs	.-16     	; 0x2a64 <main+0xf4>
    2a74:	2c c0       	rjmp	.+88     	; 0x2ace <main+0x15e>
					// i points to '0' or SER_ESP_INPUTBUFFER_SIZE if not found
					if (i < SER_ESP_INPUTBUFFER_SIZE) {
						// i points to '='
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
    2a76:	e9 2f       	mov	r30, r25
    2a78:	09 2e       	mov	r0, r25
    2a7a:	00 0c       	add	r0, r0
    2a7c:	ff 0b       	sbc	r31, r31
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
							// take next ascii byte for data, start with char after '='
							uint8_t asciiData = serESPInBuffer[i] - '0';
    2a7e:	e1 51       	subi	r30, 0x11	; 17
    2a80:	fc 4e       	sbci	r31, 0xEC	; 236
    2a82:	30 81       	ld	r19, Z
    2a84:	20 ed       	ldi	r18, 0xD0	; 208
    2a86:	23 0f       	add	r18, r19
    2a88:	2a 30       	cpi	r18, 0x0A	; 10
    2a8a:	10 f0       	brcs	.+4      	; 0x2a90 <main+0x120>
    2a8c:	27 ed       	ldi	r18, 0xD7	; 215
    2a8e:	23 0f       	add	r18, r19
							if (asciiData > 9){
    2a90:	a2 2f       	mov	r26, r18
    2a92:	af 70       	andi	r26, 0x0F	; 15
								asciiData = asciiData - (0x0A - 'A' + '0');
    2a94:	e7 e6       	ldi	r30, 0x67	; 103
    2a96:	f5 e1       	ldi	r31, 0x15	; 21
							}
							asciiData &= 0x0F;
    2a98:	62 81       	ldd	r22, Z+2	; 0x02
    2a9a:	20 e1       	ldi	r18, 0x10	; 16
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
    2a9c:	62 9f       	mul	r22, r18
    2a9e:	b0 01       	movw	r22, r0
    2aa0:	11 24       	eor	r1, r1
    2aa2:	41 81       	ldd	r20, Z+1	; 0x01
    2aa4:	24 2f       	mov	r18, r20
    2aa6:	22 95       	swap	r18
    2aa8:	2f 70       	andi	r18, 0x0F	; 15
    2aaa:	62 2b       	or	r22, r18
    2aac:	62 83       	std	Z+2, r22	; 0x02
    2aae:	20 e1       	ldi	r18, 0x10	; 16
    2ab0:	42 9f       	mul	r20, r18
    2ab2:	a0 01       	movw	r20, r0
    2ab4:	11 24       	eor	r1, r1
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
    2ab6:	20 81       	ld	r18, Z
    2ab8:	32 2f       	mov	r19, r18
    2aba:	32 95       	swap	r19
    2abc:	3f 70       	andi	r19, 0x0F	; 15
    2abe:	43 2b       	or	r20, r19
    2ac0:	41 83       	std	Z+1, r20	; 0x01
    2ac2:	40 e1       	ldi	r20, 0x10	; 16
    2ac4:	24 9f       	mul	r18, r20
    2ac6:	90 01       	movw	r18, r0
    2ac8:	11 24       	eor	r1, r1
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
    2aca:	2a 2b       	or	r18, r26
    2acc:	20 83       	st	Z, r18
    2ace:	91 50       	subi	r25, 0x01	; 1
    2ad0:	19 16       	cp	r1, r25
    2ad2:	8c f2       	brlt	.-94     	; 0x2a76 <main+0x106>
    2ad4:	0e 94 ac 31 	call	0x6358	; 0x6358 <proc_ESPmidi>
						uint8_t midiBytesTransferred = i >> 1; // 1->0, 2->1, 3-> 1, 4->2, 5->2, 6->3, 7->3
						// clear midi buffer
						for (uint8_t j = 0; j < SER_ESP_MIDTEMPBUFFER_SIZE; j++){
							serESPMidiTmp[j] = 0;
						}
						while (--i > 0) {
    2ad8:	0e 94 c3 2a 	call	0x5586	; 0x5586 <message_status>
							serESPMidiTmp[2] = (serESPMidiTmp[2] << 4) | (serESPMidiTmp[1] >> 4);
							serESPMidiTmp[1] = (serESPMidiTmp[1] << 4) | (serESPMidiTmp[0] >> 4);
							serESPMidiTmp[0] = (serESPMidiTmp[0] << 4) | asciiData;
						}
						// serESPMidiTmp[2] is first byte of midi transmition
						proc_ESPmidi(midiBytesTransferred); //  process midi bytes from ESP as received bytes here!
    2adc:	88 23       	and	r24, r24
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <main+0x172>
					} // else not found: do nothing
				}
			} // TODO further ESP message to handle
		}
		// ---------------------- KEYBOARD AND MENU ----------------------
		if MESSAGE_PENDING {
    2ae0:	42 c0       	rjmp	.+132    	; 0x2b66 <main+0x1f6>
    2ae2:	0e 94 aa 2a 	call	0x5554	; 0x5554 <message_get>
    2ae6:	c8 2f       	mov	r28, r24
    2ae8:	86 38       	cpi	r24, 0x86	; 134
			uint8_t keyMessage = message_get();
    2aea:	61 f4       	brne	.+24     	; 0x2b04 <main+0x194>
    2aec:	0e 94 b5 32 	call	0x656a	; 0x656a <midiSendAllNotesOff>
			if (keyMessage == (MESSAGE_KEY_LONGPRESSED | MESSAGE_KEY_ESC)){
    2af0:	0e 94 85 30 	call	0x610a	; 0x610a <midi_AllManualsOff>
				// PANIC BUTTON
				midiSendAllNotesOff();
    2af4:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <midi_resetRegisters>
				midi_AllManualsOff();
    2af8:	0e 94 17 2b 	call	0x562e	; 0x562e <midi_CouplerReset>
				midi_resetRegisters();
    2afc:	8a e8       	ldi	r24, 0x8A	; 138
    2afe:	92 e0       	ldi	r25, 0x02	; 2
				midi_CouplerReset();
    2b00:	0e 94 58 28 	call	0x50b0	; 0x50b0 <menu_DisplayMainMessage_P>
				menu_DisplayMainMessage_P(panicString);
    2b04:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
    2b08:	8f 3f       	cpi	r24, 0xFF	; 255
    2b0a:	f1 f4       	brne	.+60     	; 0x2b48 <main+0x1d8>
			}
			if (menuNotActive == TRUE) {
    2b0c:	8c 2f       	mov	r24, r28
    2b0e:	8f 73       	andi	r24, 0x3F	; 63
    2b10:	c5 30       	cpi	r28, 0x05	; 5
				// --- MESSAGE
				// not in menu; start page is displayed
				uint8_t keyMasked = keyMessage & MESSAGE_KEY_REMOVE_TYPE_MASK;
    2b12:	61 f4       	brne	.+24     	; 0x2b2c <main+0x1bc>
    2b14:	60 e0       	ldi	r22, 0x00	; 0
				if 	(keyMessage == MESSAGE_KEY_SEL) {
    2b16:	70 e0       	ldi	r23, 0x00	; 0
    2b18:	80 e0       	ldi	r24, 0x00	; 0
					// SELECT: Start menu
					// first call of menu after exit: init LCD
					menu_Init(NULL, NULL); // menu initaliszed but not displayed -> new reset each time
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	40 d7       	rcall	.+3712   	; 0x399e <menu_Init>
    2b1e:	0e 94 94 24 	call	0x4928	; 0x4928 <menu_InitLCD>
    2b22:	10 92 67 05 	sts	0x0567, r1	; 0x800567 <menuNotActive>
					menu_InitLCD(); //display menu
    2b26:	80 e0       	ldi	r24, 0x00	; 0
					menuNotActive = FALSE; // notify that menu is displayed
    2b28:	84 d9       	rcall	.-3320   	; 0x1e32 <softKey_WantLong>
    2b2a:	1d c0       	rjmp	.+58     	; 0x2b66 <main+0x1f6>
					softKey_WantLong(FALSE); // we are in menu now: Softkey should autoreturn
    2b2c:	9f ef       	ldi	r25, 0xFF	; 255
    2b2e:	98 0f       	add	r25, r24
    2b30:	94 30       	cpi	r25, 0x04	; 4
    2b32:	c8 f4       	brcc	.+50     	; 0x2b66 <main+0x1f6>
				} else if ((keyMasked == MESSAGE_KEY_1) || (keyMasked == MESSAGE_KEY_2) || (keyMasked == MESSAGE_KEY_3) || (keyMasked == MESSAGE_KEY_4)){
    2b34:	0e 94 f4 29 	call	0x53e8	; 0x53e8 <softKey_MessageKey_ToSoftKeyNr>
    2b38:	6c 2f       	mov	r22, r28
    2b3a:	0e 94 09 2a 	call	0x5412	; 0x5412 <softKey_Execute>
					// SOFTKEY pressed
					uint8_t softKey_Nr = softKey_MessageKey_ToSoftKeyNr(keyMasked);
    2b3e:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
					menuNotActive = softKey_Execute(softKey_Nr, keyMessage); // execute softkey; returns false if menu started
    2b42:	0e 94 b5 29 	call	0x536a	; 0x536a <softKeys_toLCD>
    2b46:	0f c0       	rjmp	.+30     	; 0x2b66 <main+0x1f6>
    2b48:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
					softKeys_toLCD();
    2b4c:	81 11       	cpse	r24, r1
    2b4e:	06 c0       	rjmp	.+12     	; 0x2b5c <main+0x1ec>
				}
			} else {
				// MENU IS ACTIVE: PROCESS MESSAGE
				if (menu_TestModulePattern == 0){
    2b50:	8c 2f       	mov	r24, r28
    2b52:	0e 94 9b 24 	call	0x4936	; 0x4936 <menu_ProcessMessage>
    2b56:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <menuNotActive>
					// no pattern test running
					menuNotActive = menu_ProcessMessage(keyMessage); // process message, return true on menu exit, false of menu still active
    2b5a:	05 c0       	rjmp	.+10     	; 0x2b66 <main+0x1f6>
    2b5c:	8d ef       	ldi	r24, 0xFD	; 253
    2b5e:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    2b62:	0e 94 23 27 	call	0x4e46	; 0x4e46 <menu_ModuleTestExecute>
				} else {
					// there is a pattern test running: abort
					menu_TestModuleBitCounter = MENU_TESTMODULE_ABORTFLAG;
    2b66:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
					menu_ModuleTestExecute(); // start abort, on next timer finish
    2b6a:	8f 3f       	cpi	r24, 0xFF	; 255
				}
			}
		}
		if (menuNotActive == TRUE) {
    2b6c:	51 f4       	brne	.+20     	; 0x2b82 <main+0x212>
    2b6e:	df 3f       	cpi	r29, 0xFF	; 255
    2b70:	49 f4       	brne	.+18     	; 0x2b84 <main+0x214>
    2b72:	0e 94 e2 23 	call	0x47c4	; 0x47c4 <menu_ClearAllDisp>
			// Startpage is or should be beeing displayed now
			if (updateStatus == TRUE) {
    2b76:	0e 94 b5 29 	call	0x536a	; 0x536a <softKeys_toLCD>
				// menu has been exit: clear display to have more room for status
				menu_ClearAllDisp();
    2b7a:	8f ef       	ldi	r24, 0xFF	; 255
				softKeys_toLCD();
    2b7c:	5a d9       	rcall	.-3404   	; 0x1e32 <softKey_WantLong>
    2b7e:	d0 e0       	ldi	r29, 0x00	; 0
				softKey_WantLong(TRUE);
    2b80:	01 c0       	rjmp	.+2      	; 0x2b84 <main+0x214>
    2b82:	df ef       	ldi	r29, 0xFF	; 255
				updateStatus = FALSE; // set when entering menu or from elsewhere if there is a update
    2b84:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <swTimer+0xe>
			}
		} else {
			// Menu is beeing displayed
			updateStatus = TRUE; // show status eventiually after next menu exit
    2b88:	81 11       	cpse	r24, r1
		}
		// ------------------------- TIMER_MENUDATA_LCDCLEAR ----------------
		if TIMER_ELAPSED(TIMER_MENUDATA_LCDCLEAR) {
    2b8a:	09 c0       	rjmp	.+18     	; 0x2b9e <main+0x22e>
    2b8c:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2b90:	0e 94 47 28 	call	0x508e	; 0x508e <menu_deleteMessage>
			// if (! menuNotActive) {
				// currently: always check timer, not only when menu active menu
				uint8_t saveCursor = lcd_cursorPos;
    2b94:	8c 2f       	mov	r24, r28
				menu_deleteMessage();
    2b96:	ae dc       	rcall	.-1700   	; 0x24f4 <lcd_goto>
    2b98:	8f ef       	ldi	r24, 0xFF	; 255
				lcd_goto(saveCursor);
    2b9a:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    2b9e:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <swTimer+0xc>
			 //}
			TIMER_DEACTIVATE(TIMER_MENUDATA_LCDCLEAR)
    2ba2:	81 11       	cpse	r24, r1
		}

		// ------------------------ TIMER TEST MODULE -----------------------
		if TIMER_ELAPSED(TIMER_TESTMODULE) {
    2ba4:	0a c0       	rjmp	.+20     	; 0x2bba <main+0x24a>
    2ba6:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    2baa:	88 23       	and	r24, r24
			if (menu_TestModulePattern != 0){
    2bac:	19 f0       	breq	.+6      	; 0x2bb4 <main+0x244>
    2bae:	0e 94 23 27 	call	0x4e46	; 0x4e46 <menu_ModuleTestExecute>
    2bb2:	03 c0       	rjmp	.+6      	; 0x2bba <main+0x24a>
				menu_ModuleTestExecute(); // usually Timer is restarted here, if not, menu_TestModulePattern will be set to 0
    2bb4:	8f ef       	ldi	r24, 0xFF	; 255
    2bb6:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <swTimer+0xc>
			} else {
				TIMER_DEACTIVATE(TIMER_TESTMODULE)
    2bba:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <swTimer+0x2>
    2bbe:	81 11       	cpse	r24, r1
			}
		}

		// ----------------------------- TIMER POWER ------------------------

		if TIMER_ELAPSED(TIMER_POWER) {
    2bc0:	1a c0       	rjmp	.+52     	; 0x2bf6 <main+0x286>
    2bc2:	f1 d8       	rcall	.-3614   	; 0x1da6 <module_PowerControl>
    2bc4:	0e 94 55 2a 	call	0x54aa	; 0x54aa <menu_showPowerState>
			module_PowerControl();
    2bc8:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <menuNotActive>
			menu_showPowerState();
    2bcc:	8f 3f       	cpi	r24, 0xFF	; 255
			if (menuNotActive == TRUE) {
    2bce:	99 f4       	brne	.+38     	; 0x2bf6 <main+0x286>
    2bd0:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
				// start screeen showing, display message
				uint8_t saveCursor = lcd_cursorPos;
    2bd4:	84 e1       	ldi	r24, 0x14	; 20
    2bd6:	8e dc       	rcall	.-1764   	; 0x24f4 <lcd_goto>
				lcd_goto(LCD_LINE2);
    2bd8:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
				if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_KEY_REALEASE){
    2bdc:	81 30       	cpi	r24, 0x01	; 1
    2bde:	21 f4       	brne	.+8      	; 0x2be8 <main+0x278>
    2be0:	83 e9       	ldi	r24, 0x93	; 147
    2be2:	92 e0       	ldi	r25, 0x02	; 2
					// if this is status after module_PowerControl(), still waiting for key release!
					lcd_puts_P(releaseKeyString);
    2be4:	f9 dc       	rcall	.-1550   	; 0x25d8 <lcd_puts_P>
    2be6:	05 c0       	rjmp	.+10     	; 0x2bf2 <main+0x282>
    2be8:	82 31       	cpi	r24, 0x12	; 18
    2bea:	19 f4       	brne	.+6      	; 0x2bf2 <main+0x282>
    2bec:	84 e1       	ldi	r24, 0x14	; 20
				} else if (pipe_PowerStatus == POWERSTATE_WAIT_FOR_POWERON) {
    2bee:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
					lcd_blank(LCD_LINELEN);
    2bf2:	8c 2f       	mov	r24, r28
    2bf4:	7f dc       	rcall	.-1794   	; 0x24f4 <lcd_goto>
    2bf6:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <messageFromESP>
				}
				lcd_goto(saveCursor);
    2bfa:	9f e7       	ldi	r25, 0x7F	; 127
			}
		}

		// ----------------------- DISPLAY TRANSFER TO ESP -----------------------
		if (((messageFromESP > SER_ESP_MSGOFFSET) && (messageFromESP <= SER_ESP_MSGOFFSET+MESSAGE_KEY_MAX))
    2bfc:	98 0f       	add	r25, r24
    2bfe:	96 30       	cpi	r25, 0x06	; 6
    2c00:	10 f0       	brcs	.+4      	; 0x2c06 <main+0x296>
    2c02:	8e 3f       	cpi	r24, 0xFE	; 254
    2c04:	09 f5       	brne	.+66     	; 0x2c48 <main+0x2d8>
    2c06:	80 91 f7 17 	lds	r24, 0x17F7	; 0x8017f7 <lcd_cursorIsOn>
			|| (messageFromESP == SER_ESP_SEND_LCD)) {
    2c0a:	8f 3f       	cpi	r24, 0xFF	; 255
			// key press was sent from ESP, should be processed now - > Send LCD Content now!
			if (lcd_cursorIsOn == TRUE){
    2c0c:	31 f4       	brne	.+12     	; 0x2c1a <main+0x2aa>
    2c0e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    2c12:	84 dc       	rcall	.-1784   	; 0x251c <getCursorFromLCDRAMcursor>
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
    2c14:	0e 94 83 35 	call	0x6b06	; 0x6b06 <serial3SER_ESPSend>
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <main+0x2b0>
    2c1a:	8f e7       	ldi	r24, 0x7F	; 127
    2c1c:	0e 94 83 35 	call	0x6b06	; 0x6b06 <serial3SER_ESPSend>
    2c20:	81 e8       	ldi	r24, 0x81	; 129
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
    2c22:	0e 94 83 35 	call	0x6b06	; 0x6b06 <serial3SER_ESPSend>
    2c26:	c0 e0       	ldi	r28, 0x00	; 0
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
    2c28:	e8 e5       	ldi	r30, 0x58	; 88
    2c2a:	f3 e0       	ldi	r31, 0x03	; 3
    2c2c:	08 c0       	rjmp	.+16     	; 0x2c3e <main+0x2ce>
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2c2e:	8f 01       	movw	r16, r30
				serial3SER_ESPSend(getCursorFromLCDRAMcursor(lcd_cursorPos));
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
    2c30:	0f 5f       	subi	r16, 0xFF	; 255
    2c32:	1f 4f       	sbci	r17, 0xFF	; 255
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2c34:	80 81       	ld	r24, Z
				serial3SER_ESPSend(*pChar++);
    2c36:	0e 94 83 35 	call	0x6b06	; 0x6b06 <serial3SER_ESPSend>
    2c3a:	cf 5f       	subi	r28, 0xFF	; 255
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	c0 35       	cpi	r28, 0x50	; 80
    2c40:	b0 f3       	brcs	.-20     	; 0x2c2e <main+0x2be>
			} else {
				serial3SER_ESPSend(0x7F); // send invalid cursor so that no cursor is displayed
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_SETCURSOR); // set cursor
			uint8_t* pChar = &(lcd_buffer[0]); // LCD Content already sorted to lines and converted to ascii < 0x80 and some special chars < 0x20
			for (uint8_t i = 0; i < sizeof(lcd_buffer); i++){
    2c42:	80 e8       	ldi	r24, 0x80	; 128
				serial3SER_ESPSend(*pChar++);
    2c44:	0e 94 83 35 	call	0x6b06	; 0x6b06 <serial3SER_ESPSend>
			}
			serial3SER_ESPSend(SER_ESP_OUTMSG_LCD_TRANSFER);
    2c48:	8f ef       	ldi	r24, 0xFF	; 255
    2c4a:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <messageFromESP>
		}
		messageFromESP = SER_ESP_MESSAGE_NONE;
    2c4e:	0e 94 cf 32 	call	0x659e	; 0x659e <midi_CheckTxActiveSense>
    2c52:	0e 94 8f 30 	call	0x611e	; 0x611e <midi_CheckRxActiveSense>

		// ------------------------- ACTIVE SENSE ----------------------------
		midi_CheckTxActiveSense(); // out going active Sense?
    2c56:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
		midi_CheckRxActiveSense(); // check for Error of incoming Active Sense

		// ------------------------ TOP STATUS LINE --------------------------
		uint8_t oldcursor = lcd_cursorPos;
    2c5a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
		if (midiLastInNote != MIDI_NOTE_NONE){
    2c5e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c60:	91 f1       	breq	.+100    	; 0x2cc6 <main+0x356>
    2c62:	80 e0       	ldi	r24, 0x00	; 0
			// there is a midi in note to be displayed in status
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2c64:	47 dc       	rcall	.-1906   	; 0x24f4 <lcd_goto>
    2c66:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
			if (midiLastInManual == MANUAL_NONE) {
    2c6a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c6c:	69 f4       	brne	.+26     	; 0x2c88 <main+0x318>
    2c6e:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <midiLastInChannel>
				// there was no manual assigned to midi in note
				// cc?nnn
				lcd_ChannelOut(midiLastInChannel);
    2c72:	0e 94 72 38 	call	0x70e4	; 0x70e4 <lcd_ChannelOut>
    2c76:	8f e3       	ldi	r24, 0x3F	; 63
				lcd_putc('?');
    2c78:	67 dc       	rcall	.-1842   	; 0x2548 <lcd_putc>
    2c7a:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
				lcd_noteOut(midiLastInNote);
    2c7e:	0e 94 21 38 	call	0x7042	; 0x7042 <lcd_noteOut>
				lcd_putc(' ');
    2c82:	80 e2       	ldi	r24, 0x20	; 32
    2c84:	61 dc       	rcall	.-1854   	; 0x2548 <lcd_putc>
    2c86:	0c c0       	rjmp	.+24     	; 0x2ca0 <main+0x330>
    2c88:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <midiLastInNote>
			} else {
				// midi input to assigned manual
				// nnn>m
				lcd_noteOut(midiLastInNote);
    2c8c:	0e 94 21 38 	call	0x7042	; 0x7042 <lcd_noteOut>
    2c90:	8e e7       	ldi	r24, 0x7E	; 126
				lcd_putc(MENU_MIDI_IO_SIGN);
    2c92:	5a dc       	rcall	.-1868   	; 0x2548 <lcd_putc>
    2c94:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <midiLastInManual>
				lcd_ManualOutDec(midiLastInManual);
    2c98:	0e 94 83 38 	call	0x7106	; 0x7106 <lcd_ManualOutDec>
    2c9c:	80 e2       	ldi	r24, 0x20	; 32
    2c9e:	54 dc       	rcall	.-1880   	; 0x2548 <lcd_putc>
				lcd_putc(' ');
    2ca0:	8c 2f       	mov	r24, r28
    2ca2:	28 dc       	rcall	.-1968   	; 0x24f4 <lcd_goto>
    2ca4:	8f ef       	ldi	r24, 0xFF	; 255
			}
			lcd_goto(oldcursor);
    2ca6:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <midiLastInNote>
			midiLastInNote = MIDI_NOTE_NONE;
    2caa:	9f b7       	in	r25, 0x3f	; 63
    2cac:	f8 94       	cli
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cb0:	06 c0       	rjmp	.+12     	; 0x2cbe <main+0x34e>
    2cb2:	ef e2       	ldi	r30, 0x2F	; 47
    2cb4:	f2 e0       	ldi	r31, 0x02	; 2
    2cb6:	82 e3       	ldi	r24, 0x32	; 50
    2cb8:	80 87       	std	Z+8, r24	; 0x08
    2cba:	11 86       	std	Z+9, r1	; 0x09
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	81 11       	cpse	r24, r1
    2cc0:	f8 cf       	rjmp	.-16     	; 0x2cb2 <main+0x342>
    2cc2:	9f bf       	out	0x3f, r25	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2cc4:	2c c0       	rjmp	.+88     	; 0x2d1e <main+0x3ae>
    __asm__ volatile ("" ::: "memory");
    2cc6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
		} else if (midiLastProgram != MIDI_PROGRAM_NONE) {
    2cca:	8f 3f       	cpi	r24, 0xFF	; 255
    2ccc:	d9 f0       	breq	.+54     	; 0x2d04 <main+0x394>
    2cce:	80 e0       	ldi	r24, 0x00	; 0
			// no midi not but a program change
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2cd0:	11 dc       	rcall	.-2014   	; 0x24f4 <lcd_goto>
    2cd2:	80 e7       	ldi	r24, 0x70	; 112
    2cd4:	39 dc       	rcall	.-1934   	; 0x2548 <lcd_putc>
			lcd_putc('p');
    2cd6:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2cda:	0e 94 da 36 	call	0x6db4	; 0x6db4 <lcd_dec2out>
			lcd_dec2out(midiLastProgram); // here max 0..99 displayed, but Prog Change currently accepts only 0..63 anyway
    2cde:	8e e7       	ldi	r24, 0x7E	; 126
    2ce0:	33 dc       	rcall	.-1946   	; 0x2548 <lcd_putc>
			lcd_putc(LCD_CHAR_ARROW_RIGHT);
    2ce2:	8f ef       	ldi	r24, 0xFF	; 255
    2ce4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
			midiLastProgram = MIDI_PROGRAM_NONE; // we are done, don't display again
    2ce8:	9f b7       	in	r25, 0x3f	; 63
    2cea:	f8 94       	cli
			TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDIIN_DISP_MS)
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2cee:	06 c0       	rjmp	.+12     	; 0x2cfc <main+0x38c>
    2cf0:	ef e2       	ldi	r30, 0x2F	; 47
    2cf2:	f2 e0       	ldi	r31, 0x02	; 2
    2cf4:	82 e3       	ldi	r24, 0x32	; 50
    2cf6:	80 87       	std	Z+8, r24	; 0x08
    2cf8:	11 86       	std	Z+9, r1	; 0x09
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	81 11       	cpse	r24, r1
    2cfe:	f8 cf       	rjmp	.-16     	; 0x2cf0 <main+0x380>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d00:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2d02:	0d c0       	rjmp	.+26     	; 0x2d1e <main+0x3ae>
		} else if (TIMER_ELAPSED(TIMER_MIDIIN_DISP) ) {
    2d04:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
    2d08:	81 11       	cpse	r24, r1
			// timer for showing note has elapsed
			// removed or about every 2.5 second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIIN);
    2d0a:	09 c0       	rjmp	.+18     	; 0x2d1e <main+0x3ae>
    2d0c:	f3 db       	rcall	.-2074   	; 0x24f4 <lcd_goto>
			lcd_blank(6);
    2d0e:	86 e0       	ldi	r24, 0x06	; 6
    2d10:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
			lcd_goto(oldcursor);
    2d14:	8c 2f       	mov	r24, r28
    2d16:	ee db       	rcall	.-2084   	; 0x24f4 <lcd_goto>
    2d18:	8f ef       	ldi	r24, 0xFF	; 255
			TIMER_DEACTIVATE(TIMER_MIDIIN_DISP);
    2d1a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <swTimer+0x8>
    2d1e:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
		}
		if (midiLastOutNote != MIDI_NOTE_NONE){
    2d22:	8f 3f       	cpi	r24, 0xFF	; 255
    2d24:	f9 f0       	breq	.+62     	; 0x2d64 <main+0x3f4>
    2d26:	8f e0       	ldi	r24, 0x0F	; 15
			// there is a midi in note to be displayed in status
			// m>nnn
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2d28:	e5 db       	rcall	.-2102   	; 0x24f4 <lcd_goto>
    2d2a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <midiLastOutManual>
			lcd_ManualOutDec(midiLastOutManual);
    2d2e:	0e 94 83 38 	call	0x7106	; 0x7106 <lcd_ManualOutDec>
    2d32:	8e e7       	ldi	r24, 0x7E	; 126
    2d34:	09 dc       	rcall	.-2030   	; 0x2548 <lcd_putc>
			lcd_putc(MENU_MIDI_IO_SIGN);
    2d36:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <midiLastOutNote>
			lcd_noteOut(midiLastOutNote);
    2d3a:	0e 94 21 38 	call	0x7042	; 0x7042 <lcd_noteOut>
    2d3e:	8c 2f       	mov	r24, r28
    2d40:	d9 db       	rcall	.-2126   	; 0x24f4 <lcd_goto>
			lcd_goto(oldcursor);
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <midiLastOutNote>
			midiLastOutNote = MIDI_NOTE_NONE;
    2d48:	9f b7       	in	r25, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <main+0x3ec>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d50:	ef e2       	ldi	r30, 0x2F	; 47
    2d52:	f2 e0       	ldi	r31, 0x02	; 2
    2d54:	82 e3       	ldi	r24, 0x32	; 50
    2d56:	82 87       	std	Z+10, r24	; 0x0a
    2d58:	13 86       	std	Z+11, r1	; 0x0b
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	81 11       	cpse	r24, r1
    2d5e:	f8 cf       	rjmp	.-16     	; 0x2d50 <main+0x3e0>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d60:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    2d62:	38 c0       	rjmp	.+112    	; 0x2dd4 <main+0x464>
		} else if (midi_RegisterChanged != REGISTER_NONE) {
    2d64:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
    2d68:	8f 3f       	cpi	r24, 0xFF	; 255
    2d6a:	31 f1       	breq	.+76     	; 0x2db8 <main+0x448>
			// register change has top priority in display so it is processed later (!) and will overwrite previos note display
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2d6c:	8f e0       	ldi	r24, 0x0F	; 15
    2d6e:	c2 db       	rcall	.-2172   	; 0x24f4 <lcd_goto>
    2d70:	82 e5       	ldi	r24, 0x52	; 82
			lcd_putc('R');
    2d72:	ea db       	rcall	.-2092   	; 0x2548 <lcd_putc>
    2d74:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
			lcd_dec2out(midi_RegisterChanged & ~REGISTER_WAS_SET); // remove MSB
    2d78:	8f 77       	andi	r24, 0x7F	; 127
    2d7a:	0e 94 da 36 	call	0x6db4	; 0x6db4 <lcd_dec2out>
    2d7e:	80 91 31 09 	lds	r24, 0x0931	; 0x800931 <midi_RegisterChanged>
			// V 0.60 changed: down = Register ON!
			lcd_putc((midi_RegisterChanged & REGISTER_WAS_SET) == 0 ?  LCD_CHAR_ARROW_UP : LCD_CHAR_ARROW_DOWN); // MSB = register was set
    2d82:	88 23       	and	r24, r24
    2d84:	14 f0       	brlt	.+4      	; 0x2d8a <main+0x41a>
    2d86:	88 e0       	ldi	r24, 0x08	; 8
    2d88:	01 c0       	rjmp	.+2      	; 0x2d8c <main+0x41c>
    2d8a:	89 e0       	ldi	r24, 0x09	; 9
    2d8c:	dd db       	rcall	.-2118   	; 0x2548 <lcd_putc>
    2d8e:	80 e2       	ldi	r24, 0x20	; 32
			lcd_putc(' ');
    2d90:	db db       	rcall	.-2122   	; 0x2548 <lcd_putc>
    2d92:	8c 2f       	mov	r24, r28
    2d94:	af db       	rcall	.-2210   	; 0x24f4 <lcd_goto>
			lcd_goto(oldcursor);
    2d96:	8f ef       	ldi	r24, 0xFF	; 255
    2d98:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
			midi_RegisterChanged = REGISTER_NONE;
    2d9c:	9f b7       	in	r25, 0x3f	; 63
    2d9e:	f8 94       	cli
    2da0:	81 e0       	ldi	r24, 0x01	; 1
			TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDIOUT_DISP_MS)
    2da2:	06 c0       	rjmp	.+12     	; 0x2db0 <main+0x440>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2da4:	ef e2       	ldi	r30, 0x2F	; 47
    2da6:	f2 e0       	ldi	r31, 0x02	; 2
    2da8:	82 e3       	ldi	r24, 0x32	; 50
    2daa:	82 87       	std	Z+10, r24	; 0x0a
    2dac:	13 86       	std	Z+11, r1	; 0x0b
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	81 11       	cpse	r24, r1
    2db2:	f8 cf       	rjmp	.-16     	; 0x2da4 <main+0x434>
    2db4:	9f bf       	out	0x3f, r25	; 63
    2db6:	0e c0       	rjmp	.+28     	; 0x2dd4 <main+0x464>
    2db8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    __asm__ volatile ("" ::: "memory");
    2dbc:	81 11       	cpse	r24, r1
		} else if (TIMER_ELAPSED(TIMER_MIDIOUT_DISP)) {
    2dbe:	0a c0       	rjmp	.+20     	; 0x2dd4 <main+0x464>
    2dc0:	8f e0       	ldi	r24, 0x0F	; 15
    2dc2:	98 db       	rcall	.-2256   	; 0x24f4 <lcd_goto>
    2dc4:	85 e0       	ldi	r24, 0x05	; 5
			// timer for showing note has elapsed
			// removed V0.59: or about every second just in case screen got scrambeled
			lcd_goto(MENU_LCD_CURSOR_STAT_MIDIOUT);
    2dc6:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
    2dca:	8c 2f       	mov	r24, r28
			lcd_blank(5);
    2dcc:	93 db       	rcall	.-2266   	; 0x24f4 <lcd_goto>
    2dce:	8f ef       	ldi	r24, 0xFF	; 255
    2dd0:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <swTimer+0xa>
			lcd_goto(oldcursor);
    2dd4:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <time_UpTimeUpdated>
			TIMER_DEACTIVATE(TIMER_MIDIOUT_DISP);
    2dd8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dda:	09 f0       	breq	.+2      	; 0x2dde <main+0x46e>
    2ddc:	7e c0       	rjmp	.+252    	; 0x2eda <main+0x56a>
		}

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
    2dde:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <time_UpTimeUpdated>
    2de2:	f0 90 a8 03 	lds	r15, 0x03A8	; 0x8003a8 <lcd_cursorPos>
			time_UpTimeUpdated = FALSE;
    2de6:	c0 91 f7 17 	lds	r28, 0x17F7	; 0x8017f7 <lcd_cursorIsOn>
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
			uint8_t oldCursor = lcd_cursorPos;
    2dea:	cf 3f       	cpi	r28, 0xFF	; 255
    2dec:	11 f4       	brne	.+4      	; 0x2df2 <main+0x482>
			uint8_t oldBlink = lcd_cursorIsOn;
    2dee:	0e 94 bf 38 	call	0x717e	; 0x717e <lcd_cursoroff>
			if (oldBlink == TRUE) {
    2df2:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <time_Uptime+0x3>
				lcd_cursoroff();
    2df6:	88 23       	and	r24, r24
			}
			char separator;
			if (*pTime == 0) {
    2df8:	59 f0       	breq	.+22     	; 0x2e10 <main+0x4a0>
    2dfa:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <time_Uptime+0x1>
    2dfe:	80 fd       	sbrc	r24, 0
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
    2e00:	0e c0       	rjmp	.+28     	; 0x2e1e <main+0x4ae>
    2e02:	0f 2e       	mov	r0, r31
    2e04:	fa e3       	ldi	r31, 0x3A	; 58
    2e06:	ef 2e       	mov	r14, r31
				// when displaying hr:min blink ":"
				separator = ':';
    2e08:	f0 2d       	mov	r31, r0
    2e0a:	04 e4       	ldi	r16, 0x44	; 68
    2e0c:	12 e0       	ldi	r17, 0x02	; 2

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2e0e:	0c c0       	rjmp	.+24     	; 0x2e28 <main+0x4b8>
    2e10:	0f 2e       	mov	r0, r31
    2e12:	fa e3       	ldi	r31, 0x3A	; 58
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
				separator = ':';
    2e14:	ef 2e       	mov	r14, r31
    2e16:	f0 2d       	mov	r31, r0
    2e18:	03 e4       	ldi	r16, 0x43	; 67
				lcd_cursoroff();
			}
			char separator;
			if (*pTime == 0) {
				// hour not present
				pTime--; // set pointer to minute
    2e1a:	12 e0       	ldi	r17, 0x02	; 2
    2e1c:	05 c0       	rjmp	.+10     	; 0x2e28 <main+0x4b8>
    2e1e:	68 94       	set
				separator = ':';
			} else if ((time_Uptime[1] & 0x01) == 0) {
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
    2e20:	ee 24       	eor	r14, r14
    2e22:	e5 f8       	bld	r14, 5
    2e24:	04 e4       	ldi	r16, 0x44	; 68

		//------------------------- every second ----------------------------
		if (time_UpTimeUpdated == TRUE) {
			time_UpTimeUpdated = FALSE;
			// --- clock ---
			uint8_t* pTime = (uint8_t*) &(time_Uptime[3]);
    2e26:	12 e0       	ldi	r17, 0x02	; 2
    2e28:	87 e0       	ldi	r24, 0x07	; 7
				// when displaying hr:min blink ":"
				separator = ':';
			} else {
				separator = ' ';
			}
			lcd_goto(MENU_LCD_CURSOR_STAT_CENTRAL);
    2e2a:	64 db       	rcall	.-2360   	; 0x24f4 <lcd_goto>
    2e2c:	f8 01       	movw	r30, r16
			lcd_dec2out(*(pTime--));
    2e2e:	80 81       	ld	r24, Z
    2e30:	0e 94 da 36 	call	0x6db4	; 0x6db4 <lcd_dec2out>
    2e34:	8e 2d       	mov	r24, r14
			lcd_putc(separator);
    2e36:	88 db       	rcall	.-2288   	; 0x2548 <lcd_putc>
    2e38:	f8 01       	movw	r30, r16
			lcd_dec2out(*pTime);
    2e3a:	31 97       	sbiw	r30, 0x01	; 1
    2e3c:	80 81       	ld	r24, Z
    2e3e:	0e 94 da 36 	call	0x6db4	; 0x6db4 <lcd_dec2out>
			// --- check serial overflow ---
			uint8_t ovflCount = midiRxOvflCount; // avoid change of value by interrupt during processing here
    2e42:	40 91 6b 15 	lds	r20, 0x156B	; 0x80156b <midiRxOvflCount>
			if (ovflCount > 0){
    2e46:	44 23       	and	r20, r20
    2e48:	31 f0       	breq	.+12     	; 0x2e56 <main+0x4e6>
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIINOVFL,ovflCount);
    2e4a:	50 e0       	ldi	r21, 0x00	; 0
    2e4c:	60 e0       	ldi	r22, 0x00	; 0
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	79 dd       	rcall	.-1294   	; 0x2944 <log_putError>
    2e52:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <midiRxOvflCount>
				midiRxOvflCount = 0;
    2e56:	40 91 72 15 	lds	r20, 0x1572	; 0x801572 <midiTxOvflCount>
			}
			ovflCount = midiTxOvflCount; // avoid change of value by interrupt during processing here
    2e5a:	44 23       	and	r20, r20
			if (ovflCount > 0){
    2e5c:	31 f0       	breq	.+12     	; 0x2e6a <main+0x4fa>
    2e5e:	50 e0       	ldi	r21, 0x00	; 0
				log_putError(LOG_CAT_SERIAL,LOG_CAT_SERIALMIDIOUTOVFL,ovflCount);
    2e60:	61 e0       	ldi	r22, 0x01	; 1
    2e62:	83 e0       	ldi	r24, 0x03	; 3
    2e64:	6f dd       	rcall	.-1314   	; 0x2944 <log_putError>
    2e66:	10 92 72 15 	sts	0x1572, r1	; 0x801572 <midiTxOvflCount>
				midiTxOvflCount = 0;
    2e6a:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
			}
			// --- now check Error status ---
			lcd_putc(POWERSTAT_CHAR); // Makros resolves current state to character
    2e6e:	84 ff       	sbrs	r24, 4
    2e70:	02 c0       	rjmp	.+4      	; 0x2e76 <main+0x506>
    2e72:	80 e2       	ldi	r24, 0x20	; 32
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <main+0x508>
    2e76:	89 e0       	ldi	r24, 0x09	; 9
    2e78:	67 db       	rcall	.-2354   	; 0x2548 <lcd_putc>
    2e7a:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <log_unreadErrors>
    2e7e:	8f 3f       	cpi	r24, 0xFF	; 255
			lcd_putc((log_unreadErrors == TRUE) ? 'E' : ' ');
    2e80:	11 f4       	brne	.+4      	; 0x2e86 <main+0x516>
    2e82:	85 e4       	ldi	r24, 0x45	; 69
    2e84:	01 c0       	rjmp	.+2      	; 0x2e88 <main+0x518>
    2e86:	80 e2       	ldi	r24, 0x20	; 32
    2e88:	5f db       	rcall	.-2370   	; 0x2548 <lcd_putc>
    2e8a:	8f 2d       	mov	r24, r15
    2e8c:	33 db       	rcall	.-2458   	; 0x24f4 <lcd_goto>
    2e8e:	cf 3f       	cpi	r28, 0xFF	; 255
    2e90:	11 f4       	brne	.+4      	; 0x2e96 <main+0x526>
			// --- restore cursor ---
			lcd_goto(oldCursor);
    2e92:	0e 94 b8 38 	call	0x7170	; 0x7170 <lcd_cursosblink>
    2e96:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <swTimer+0x8>
			if (oldBlink == TRUE) {
    2e9a:	8f 3f       	cpi	r24, 0xFF	; 255
				lcd_cursosblink();
    2e9c:	69 f4       	brne	.+26     	; 0x2eb8 <main+0x548>
			}
			// finally start Timers to clear MIDI Status display if not already running,
			// just to clean up status line in case it had been scrambled
			if (TIMER_NOTSTARTED(TIMER_MIDIIN_DISP)) {
    2e9e:	9f b7       	in	r25, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	06 c0       	rjmp	.+12     	; 0x2eb2 <main+0x542>
				TIMER_SET(TIMER_MIDIIN_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2ea6:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ea8:	f2 e0       	ldi	r31, 0x02	; 2
    2eaa:	8d e7       	ldi	r24, 0x7D	; 125
    2eac:	80 87       	std	Z+8, r24	; 0x08
    2eae:	11 86       	std	Z+9, r1	; 0x09
    2eb0:	80 e0       	ldi	r24, 0x00	; 0
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	f8 cf       	rjmp	.-16     	; 0x2ea6 <main+0x536>
    2eb6:	9f bf       	out	0x3f, r25	; 63
    2eb8:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <swTimer+0xa>
    2ebc:	8f 3f       	cpi	r24, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ebe:	69 f4       	brne	.+26     	; 0x2eda <main+0x56a>
			}
			if (TIMER_NOTSTARTED(TIMER_MIDIOUT_DISP)) {
    2ec0:	9f b7       	in	r25, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	06 c0       	rjmp	.+12     	; 0x2ed4 <main+0x564>
				TIMER_SET(TIMER_MIDIOUT_DISP,TIMER_MIDDISP_CLEANUP_INTERVALL)
    2ec8:	ef e2       	ldi	r30, 0x2F	; 47
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2eca:	f2 e0       	ldi	r31, 0x02	; 2
    2ecc:	8d e7       	ldi	r24, 0x7D	; 125
    2ece:	82 87       	std	Z+10, r24	; 0x0a
    2ed0:	13 86       	std	Z+11, r1	; 0x0b
    2ed2:	80 e0       	ldi	r24, 0x00	; 0
    2ed4:	81 11       	cpse	r24, r1
    2ed6:	f8 cf       	rjmp	.-16     	; 0x2ec8 <main+0x558>
    2ed8:	9f bf       	out	0x3f, r25	; 63
    2eda:	80 91 f4 07 	lds	r24, 0x07F4	; 0x8007f4 <msgPipeOverflow>
    2ede:	8f 3f       	cpi	r24, 0xFF	; 255
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ee0:	39 f4       	brne	.+14     	; 0x2ef0 <main+0x580>
			}
		}

		//------------------ CHEKC MESSAGE PIPIE OVFL ------------------
		if (msgPipeOverflow == MESSAGE_PIPE_OVERFLOW_YES){
    2ee2:	10 92 f4 07 	sts	0x07F4, r1	; 0x8007f4 <msgPipeOverflow>
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	84 e0       	ldi	r24, 0x04	; 4
			log_putError(LOG_CAT_MESSAGE, LOG_CATMESSAGE_PIPEOVFL, 0);
    2eee:	2a dd       	rcall	.-1452   	; 0x2944 <log_putError>
    2ef0:	90 91 61 15 	lds	r25, 0x1561	; 0x801561 <midiRxInIndex>
    2ef4:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <midiRxOutIndex>
    2ef8:	98 17       	cp	r25, r24
		}

		//---------------------- MIDI IN --------------------------------
		if MIDI_RX_BUFFER_NONEMPTY {
    2efa:	21 f0       	breq	.+8      	; 0x2f04 <main+0x594>
    2efc:	0e 94 ce 33 	call	0x679c	; 0x679c <serial1MIDIReadRx>
    2f00:	0e 94 18 31 	call	0x6230	; 0x6230 <midiIn_Process>
    2f04:	0e 94 0d 2b 	call	0x561a	; 0x561a <pipeMsgStatus>
			midiIn_Process(serial1MIDIReadRx());
    2f08:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0a:	09 f0       	breq	.+2      	; 0x2f0e <main+0x59e>
    2f0c:	73 cd       	rjmp	.-1306   	; 0x29f4 <main+0x84>
		}
		//----------------------- MIDI OUT -----------------------------
		if MESSAGE_PIPE_PENDING	{
    2f0e:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <pipeMsgGet>
    2f12:	0e 94 dd 31 	call	0x63ba	; 0x63ba <midiKeyPress_Process>
    2f16:	6e cd       	rjmp	.-1316   	; 0x29f4 <main+0x84>

00002f18 <menu_enterWriteModule>:
			midiKeyPress_Process(pipeMsgGet());
    2f18:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <menuModVal>
    2f1c:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <menuModVal+0x1>
    2f20:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <menuModVal+0x2>
		if (menu_selFunc[i].pFunc == softKeyFunc){
			return TRUE;
		}
	}
	return FALSE;
}
    2f24:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <menuModVal+0x3>
    2f28:	81 e0       	ldi	r24, 0x01	; 1
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <menu_enterWriteModule+0x1e>
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	0a 94       	dec	r0
    2f38:	e2 f7       	brpl	.-8      	; 0x2f32 <menu_enterWriteModule+0x1a>
    2f3a:	48 2f       	mov	r20, r24
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	e1 e4       	ldi	r30, 0x41	; 65
    2f40:	f3 e0       	ldi	r31, 0x03	; 3
    2f42:	22 c0       	rjmp	.+68     	; 0x2f88 <menu_enterWriteModule+0x70>
    2f44:	80 91 ad 05 	lds	r24, 0x05AD	; 0x8005ad <menuModVal>
    2f48:	90 91 ae 05 	lds	r25, 0x05AE	; 0x8005ae <menuModVal+0x1>
    2f4c:	a0 91 af 05 	lds	r26, 0x05AF	; 0x8005af <menuModVal+0x2>
    2f50:	b0 91 b0 05 	lds	r27, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    2f54:	88 0f       	add	r24, r24
    2f56:	99 1f       	adc	r25, r25
    2f58:	aa 1f       	adc	r26, r26
    2f5a:	bb 1f       	adc	r27, r27
    2f5c:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    2f60:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    2f64:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    2f68:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    2f6c:	21 81       	ldd	r18, Z+1	; 0x01
    2f6e:	24 23       	and	r18, r20
    2f70:	49 f0       	breq	.+18     	; 0x2f84 <menu_enterWriteModule+0x6c>
    2f72:	81 60       	ori	r24, 0x01	; 1
    2f74:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <menuModVal>
    2f78:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <menuModVal+0x1>
    2f7c:	a0 93 af 05 	sts	0x05AF, r26	; 0x8005af <menuModVal+0x2>
    2f80:	b0 93 b0 05 	sts	0x05B0, r27	; 0x8005b0 <menuModVal+0x3>
    2f84:	38 97       	sbiw	r30, 0x08	; 8
    2f86:	3f 5f       	subi	r19, 0xFF	; 255
    2f88:	30 32       	cpi	r19, 0x20	; 32
    2f8a:	e0 f2       	brcs	.-72     	; 0x2f44 <menu_enterWriteModule+0x2c>
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	08 95       	ret

00002f90 <menu_exitWriteModule>:
    2f90:	40 91 ad 05 	lds	r20, 0x05AD	; 0x8005ad <menuModVal>
    2f94:	50 91 ae 05 	lds	r21, 0x05AE	; 0x8005ae <menuModVal+0x1>
    2f98:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <menuModVal+0x2>
    2f9c:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <menuModVal+0x3>
    2fa0:	85 30       	cpi	r24, 0x05	; 5
    2fa2:	09 f5       	brne	.+66     	; 0x2fe6 <menu_exitWriteModule+0x56>
    2fa4:	a1 e0       	ldi	r26, 0x01	; 1
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <menu_exitWriteModule+0x22>
    2fae:	aa 0f       	add	r26, r26
    2fb0:	bb 1f       	adc	r27, r27
    2fb2:	0a 94       	dec	r0
    2fb4:	e2 f7       	brpl	.-8      	; 0x2fae <menu_exitWriteModule+0x1e>
    2fb6:	3a 2f       	mov	r19, r26
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	e1 e4       	ldi	r30, 0x41	; 65
    2fbc:	f3 e0       	ldi	r31, 0x03	; 3
    2fbe:	11 c0       	rjmp	.+34     	; 0x2fe2 <menu_exitWriteModule+0x52>
    2fc0:	77 23       	and	r23, r23
    2fc2:	24 f4       	brge	.+8      	; 0x2fcc <menu_exitWriteModule+0x3c>
    2fc4:	81 81       	ldd	r24, Z+1	; 0x01
    2fc6:	83 2b       	or	r24, r19
    2fc8:	81 83       	std	Z+1, r24	; 0x01
    2fca:	05 c0       	rjmp	.+10     	; 0x2fd6 <menu_exitWriteModule+0x46>
    2fcc:	21 81       	ldd	r18, Z+1	; 0x01
    2fce:	8a 2f       	mov	r24, r26
    2fd0:	80 95       	com	r24
    2fd2:	82 23       	and	r24, r18
    2fd4:	81 83       	std	Z+1, r24	; 0x01
    2fd6:	44 0f       	add	r20, r20
    2fd8:	55 1f       	adc	r21, r21
    2fda:	66 1f       	adc	r22, r22
    2fdc:	77 1f       	adc	r23, r23
    2fde:	38 97       	sbiw	r30, 0x08	; 8
    2fe0:	9f 5f       	subi	r25, 0xFF	; 255
    2fe2:	90 32       	cpi	r25, 0x20	; 32
    2fe4:	68 f3       	brcs	.-38     	; 0x2fc0 <menu_exitWriteModule+0x30>
    2fe6:	80 e0       	ldi	r24, 0x00	; 0
    2fe8:	08 95       	ret

00002fea <menuOnEnterModSel>:
    2fea:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    2fee:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    2ff2:	3e 96       	adiw	r30, 0x0e	; 14
    2ff4:	85 91       	lpm	r24, Z+
    2ff6:	95 91       	lpm	r25, Z+
    2ff8:	80 93 78 05 	sts	0x0578, r24	; 0x800578 <menuVmodule>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	08 95       	ret

00003000 <menuOnEnterMidiInCh>:
    3000:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3004:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3008:	3e 96       	adiw	r30, 0x0e	; 14
    300a:	85 91       	lpm	r24, Z+
    300c:	95 91       	lpm	r25, Z+
    300e:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <menuVmidiChan>
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	08 95       	ret

00003016 <menuOnEnterMidiInSec>:
    3016:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    301a:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    301e:	3e 96       	adiw	r30, 0x0e	; 14
    3020:	25 91       	lpm	r18, Z+
    3022:	35 91       	lpm	r19, Z+
    3024:	20 93 b7 05 	sts	0x05B7, r18	; 0x8005b7 <menuVsection>
    3028:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <menuVmidiChan>
    302c:	8f 70       	andi	r24, 0x0F	; 15
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	23 70       	andi	r18, 0x03	; 3
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	82 0f       	add	r24, r18
    303c:	91 1d       	adc	r25, r1
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    304a:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	08 95       	ret

00003052 <menuOnEnterModManual>:
    3052:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3056:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    305a:	3e 96       	adiw	r30, 0x0e	; 14
    305c:	85 91       	lpm	r24, Z+
    305e:	95 91       	lpm	r25, Z+
    3060:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	08 95       	ret

00003068 <menuOnEnterModSec>:
    3068:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    306c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3070:	3e 96       	adiw	r30, 0x0e	; 14
    3072:	85 91       	lpm	r24, Z+
    3074:	95 91       	lpm	r25, Z+
    3076:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    307a:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <menuVmanual>
    307e:	2f 70       	andi	r18, 0x0F	; 15
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	83 70       	andi	r24, 0x03	; 3
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	a9 01       	movw	r20, r18
    3088:	44 0f       	add	r20, r20
    308a:	55 1f       	adc	r21, r21
    308c:	24 0f       	add	r18, r20
    308e:	35 1f       	adc	r19, r21
    3090:	22 0f       	add	r18, r18
    3092:	33 1f       	adc	r19, r19
    3094:	22 0f       	add	r18, r18
    3096:	33 1f       	adc	r19, r19
    3098:	ac 01       	movw	r20, r24
    309a:	44 0f       	add	r20, r20
    309c:	55 1f       	adc	r21, r21
    309e:	84 0f       	add	r24, r20
    30a0:	95 1f       	adc	r25, r21
    30a2:	82 0f       	add	r24, r18
    30a4:	93 1f       	adc	r25, r19
    30a6:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    30aa:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	08 95       	ret

000030b2 <menuOnEnterModSecReg>:
    30b2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    30b6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    30ba:	3e 96       	adiw	r30, 0x0e	; 14
    30bc:	85 91       	lpm	r24, Z+
    30be:	95 91       	lpm	r25, Z+
    30c0:	80 93 b7 05 	sts	0x05B7, r24	; 0x8005b7 <menuVsection>
    30c4:	87 70       	andi	r24, 0x07	; 7
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	9c 01       	movw	r18, r24
    30ca:	22 0f       	add	r18, r18
    30cc:	33 1f       	adc	r19, r19
    30ce:	82 0f       	add	r24, r18
    30d0:	93 1f       	adc	r25, r19
    30d2:	90 93 b2 05 	sts	0x05B2, r25	; 0x8005b2 <DataAdressOffset+0x1>
    30d6:	80 93 b1 05 	sts	0x05B1, r24	; 0x8005b1 <DataAdressOffset>
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	08 95       	ret

000030de <menuOnEnterKey>:
    30de:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    30e2:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    30e6:	3e 96       	adiw	r30, 0x0e	; 14
    30e8:	85 91       	lpm	r24, Z+
    30ea:	95 91       	lpm	r25, Z+
    30ec:	84 30       	cpi	r24, 0x04	; 4
    30ee:	60 f4       	brcc	.+24     	; 0x3108 <menuOnEnterKey+0x2a>
    30f0:	fc 01       	movw	r30, r24
    30f2:	ff 27       	eor	r31, r31
    30f4:	ee 0f       	add	r30, r30
    30f6:	ff 1f       	adc	r31, r31
    30f8:	e6 54       	subi	r30, 0x46	; 70
    30fa:	fa 4f       	sbci	r31, 0xFA	; 250
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <menuVMenuSoftKey+0x1>
    3104:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <menuVMenuSoftKey>
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	08 95       	ret

0000310c <menuOnExitMidiThrough>:
    310c:	0e 94 17 0c 	call	0x182e	; 0x182e <eeprom_UpdateMidiThrough>
    3110:	80 e0       	ldi	r24, 0x00	; 0
    3112:	08 95       	ret

00003114 <menuOnExitRegisterEdit>:
    3114:	1f 93       	push	r17
    3116:	cf 93       	push	r28
    3118:	df 93       	push	r29
    311a:	86 30       	cpi	r24, 0x06	; 6
    311c:	f1 f0       	breq	.+60     	; 0x315a <menuOnExitRegisterEdit+0x46>
    311e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3122:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3126:	3e 96       	adiw	r30, 0x0e	; 14
    3128:	05 90       	lpm	r0, Z+
    312a:	f4 91       	lpm	r31, Z
    312c:	e0 2d       	mov	r30, r0
    312e:	cf 01       	movw	r24, r30
    3130:	8d 56       	subi	r24, 0x6D	; 109
    3132:	95 40       	sbci	r25, 0x05	; 5
    3134:	88 0f       	add	r24, r24
    3136:	88 0f       	add	r24, r24
    3138:	88 0f       	add	r24, r24
    313a:	d0 81       	ld	r29, Z
    313c:	c0 e0       	ldi	r28, 0x00	; 0
    313e:	0b c0       	rjmp	.+22     	; 0x3156 <menuOnExitRegisterEdit+0x42>
    3140:	11 e0       	ldi	r17, 0x01	; 1
    3142:	18 0f       	add	r17, r24
    3144:	6d 2f       	mov	r22, r29
    3146:	66 1f       	adc	r22, r22
    3148:	66 27       	eor	r22, r22
    314a:	66 1f       	adc	r22, r22
    314c:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <register_onOff>
    3150:	dd 0f       	add	r29, r29
    3152:	cf 5f       	subi	r28, 0xFF	; 255
    3154:	81 2f       	mov	r24, r17
    3156:	c8 30       	cpi	r28, 0x08	; 8
    3158:	98 f3       	brcs	.-26     	; 0x3140 <menuOnExitRegisterEdit+0x2c>
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	08 95       	ret

00003164 <softKeyRegOff>:
    3164:	81 11       	cpse	r24, r1
    3166:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <midi_resetRegisters>
    316a:	80 e0       	ldi	r24, 0x00	; 0
    316c:	08 95       	ret

0000316e <menuOnExitCoupler>:
    316e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3172:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3176:	3e 96       	adiw	r30, 0x0e	; 14
    3178:	85 91       	lpm	r24, Z+
    317a:	95 91       	lpm	r25, Z+
    317c:	8f 50       	subi	r24, 0x0F	; 15
    317e:	98 40       	sbci	r25, 0x08	; 8
    3180:	fc 01       	movw	r30, r24
    3182:	ff 27       	eor	r31, r31
    3184:	e1 5f       	subi	r30, 0xF1	; 241
    3186:	f7 4f       	sbci	r31, 0xF7	; 247
    3188:	20 81       	ld	r18, Z
    318a:	21 11       	cpse	r18, r1
    318c:	0e 94 23 2b 	call	0x5646	; 0x5646 <set_Coupler>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	08 95       	ret

00003194 <menuOnExitSaveProgram>:
    3194:	86 30       	cpi	r24, 0x06	; 6
    3196:	39 f0       	breq	.+14     	; 0x31a6 <menuOnExitSaveProgram+0x12>
    3198:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    319c:	80 34       	cpi	r24, 0x40	; 64
    319e:	18 f4       	brcc	.+6      	; 0x31a6 <menuOnExitSaveProgram+0x12>
    31a0:	6f ef       	ldi	r22, 0xFF	; 255
    31a2:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <register_toProgram>
    31a6:	80 e0       	ldi	r24, 0x00	; 0
    31a8:	08 95       	ret

000031aa <menuOnExitKeys>:
    31aa:	0e 94 89 0c 	call	0x1912	; 0x1912 <eeprom_UpdateSoftkeys>
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	08 95       	ret

000031b2 <menu_readModule>:
    31b2:	cf 92       	push	r12
    31b4:	df 92       	push	r13
    31b6:	ef 92       	push	r14
    31b8:	ff 92       	push	r15
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <menu_readModule+0x16>
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <menu_readModule+0x12>
    31cc:	28 2f       	mov	r18, r24
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	e1 e4       	ldi	r30, 0x41	; 65
    31d2:	f3 e0       	ldi	r31, 0x03	; 3
    31d4:	c1 2c       	mov	r12, r1
    31d6:	d1 2c       	mov	r13, r1
    31d8:	76 01       	movw	r14, r12
    31da:	0b c0       	rjmp	.+22     	; 0x31f2 <menu_readModule+0x40>
    31dc:	cc 0c       	add	r12, r12
    31de:	dd 1c       	adc	r13, r13
    31e0:	ee 1c       	adc	r14, r14
    31e2:	ff 1c       	adc	r15, r15
    31e4:	86 81       	ldd	r24, Z+6	; 0x06
    31e6:	82 23       	and	r24, r18
    31e8:	11 f0       	breq	.+4      	; 0x31ee <menu_readModule+0x3c>
    31ea:	68 94       	set
    31ec:	c0 f8       	bld	r12, 0
    31ee:	38 97       	sbiw	r30, 0x08	; 8
    31f0:	9f 5f       	subi	r25, 0xFF	; 255
    31f2:	90 32       	cpi	r25, 0x20	; 32
    31f4:	98 f3       	brcs	.-26     	; 0x31dc <menu_readModule+0x2a>
    31f6:	8e e1       	ldi	r24, 0x1E	; 30
    31f8:	7d d9       	rcall	.-3334   	; 0x24f4 <lcd_goto>
    31fa:	c0 92 f9 17 	sts	0x17F9, r12	; 0x8017f9 <editLong>
    31fe:	d0 92 fa 17 	sts	0x17FA, r13	; 0x8017fa <editLong+0x1>
    3202:	e0 92 fb 17 	sts	0x17FB, r14	; 0x8017fb <editLong+0x2>
    3206:	f0 92 fc 17 	sts	0x17FC, r15	; 0x8017fc <editLong+0x3>
    320a:	0e 94 b5 36 	call	0x6d6a	; 0x6d6a <lcd_longout>
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	df 90       	pop	r13
    3216:	cf 90       	pop	r12
    3218:	08 95       	ret

0000321a <menu_testModule>:
    321a:	8e e1       	ldi	r24, 0x1E	; 30
    321c:	6b d9       	rcall	.-3370   	; 0x24f4 <lcd_goto>
    321e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <menuVmodule>
    3222:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <test_PipeModule>
    3226:	60 93 f9 17 	sts	0x17F9, r22	; 0x8017f9 <editLong>
    322a:	70 93 fa 17 	sts	0x17FA, r23	; 0x8017fa <editLong+0x1>
    322e:	80 93 fb 17 	sts	0x17FB, r24	; 0x8017fb <editLong+0x2>
    3232:	90 93 fc 17 	sts	0x17FC, r25	; 0x8017fc <editLong+0x3>
    3236:	0e 94 b5 36 	call	0x6d6a	; 0x6d6a <lcd_longout>
    323a:	80 e0       	ldi	r24, 0x00	; 0
    323c:	08 95       	ret

0000323e <menuOnEnterTune>:
    323e:	cf 93       	push	r28
    3240:	8f 3f       	cpi	r24, 0xFF	; 255
    3242:	09 f0       	breq	.+2      	; 0x3246 <menuOnEnterTune+0x8>
    3244:	77 c0       	rjmp	.+238    	; 0x3334 <menuOnEnterTune+0xf6>
    3246:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <minManNote.2952>
    324a:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <maxManNote.2953>
    324e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3252:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3256:	3e 96       	adiw	r30, 0x0e	; 14
    3258:	85 91       	lpm	r24, Z+
    325a:	95 91       	lpm	r25, Z+
    325c:	80 93 77 05 	sts	0x0577, r24	; 0x800577 <menuVmanual>
    3260:	84 30       	cpi	r24, 0x04	; 4
    3262:	10 f0       	brcs	.+4      	; 0x3268 <menuOnEnterTune+0x2a>
    3264:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <menuVmanual>
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	39 c0       	rjmp	.+114    	; 0x32de <menuOnEnterTune+0xa0>
    326c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	e2 2f       	mov	r30, r18
    3274:	f0 e0       	ldi	r31, 0x00	; 0
    3276:	df 01       	movw	r26, r30
    3278:	aa 0f       	add	r26, r26
    327a:	bb 1f       	adc	r27, r27
    327c:	ad 01       	movw	r20, r26
    327e:	4e 0f       	add	r20, r30
    3280:	5f 1f       	adc	r21, r31
    3282:	dc 01       	movw	r26, r24
    3284:	aa 0f       	add	r26, r26
    3286:	bb 1f       	adc	r27, r27
    3288:	a8 0f       	add	r26, r24
    328a:	b9 1f       	adc	r27, r25
    328c:	aa 0f       	add	r26, r26
    328e:	bb 1f       	adc	r27, r27
    3290:	aa 0f       	add	r26, r26
    3292:	bb 1f       	adc	r27, r27
    3294:	a4 0f       	add	r26, r20
    3296:	b5 1f       	adc	r27, r21
    3298:	ae 5c       	subi	r26, 0xCE	; 206
    329a:	b6 4f       	sbci	r27, 0xF6	; 246
    329c:	3c 91       	ld	r19, X
    329e:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <minManNote.2952>
    32a2:	34 17       	cp	r19, r20
    32a4:	10 f4       	brcc	.+4      	; 0x32aa <menuOnEnterTune+0x6c>
    32a6:	30 93 0e 02 	sts	0x020E, r19	; 0x80020e <minManNote.2952>
    32aa:	af 01       	movw	r20, r30
    32ac:	44 0f       	add	r20, r20
    32ae:	55 1f       	adc	r21, r21
    32b0:	e4 0f       	add	r30, r20
    32b2:	f5 1f       	adc	r31, r21
    32b4:	ac 01       	movw	r20, r24
    32b6:	44 0f       	add	r20, r20
    32b8:	55 1f       	adc	r21, r21
    32ba:	84 0f       	add	r24, r20
    32bc:	95 1f       	adc	r25, r21
    32be:	88 0f       	add	r24, r24
    32c0:	99 1f       	adc	r25, r25
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	e8 0f       	add	r30, r24
    32c8:	f9 1f       	adc	r31, r25
    32ca:	ee 5c       	subi	r30, 0xCE	; 206
    32cc:	f6 4f       	sbci	r31, 0xF6	; 246
    32ce:	81 81       	ldd	r24, Z+1	; 0x01
    32d0:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <maxManNote.2953>
    32d4:	98 17       	cp	r25, r24
    32d6:	10 f4       	brcc	.+4      	; 0x32dc <menuOnEnterTune+0x9e>
    32d8:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <maxManNote.2953>
    32dc:	2f 5f       	subi	r18, 0xFF	; 255
    32de:	24 30       	cpi	r18, 0x04	; 4
    32e0:	28 f2       	brcs	.-118    	; 0x326c <menuOnEnterTune+0x2e>
    32e2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2952>
    32e6:	88 23       	and	r24, r24
    32e8:	4c f4       	brge	.+18     	; 0x32fc <menuOnEnterTune+0xbe>
    32ea:	8e e1       	ldi	r24, 0x1E	; 30
    32ec:	03 d9       	rcall	.-3578   	; 0x24f4 <lcd_goto>
    32ee:	8c e7       	ldi	r24, 0x7C	; 124
    32f0:	93 e0       	ldi	r25, 0x03	; 3
    32f2:	72 d9       	rcall	.-3356   	; 0x25d8 <lcd_puts_P>
    32f4:	8f ef       	ldi	r24, 0xFF	; 255
    32f6:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    32fa:	04 c0       	rjmp	.+8      	; 0x3304 <menuOnEnterTune+0xc6>
    32fc:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <menuNote>
    3300:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2954>
    3304:	6b eb       	ldi	r22, 0xBB	; 187
    3306:	71 e1       	ldi	r23, 0x11	; 17
    3308:	80 e0       	ldi	r24, 0x00	; 0
    330a:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    330e:	6a ec       	ldi	r22, 0xCA	; 202
    3310:	71 e1       	ldi	r23, 0x11	; 17
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    3318:	6f ec       	ldi	r22, 0xCF	; 207
    331a:	71 e1       	ldi	r23, 0x11	; 17
    331c:	82 e0       	ldi	r24, 0x02	; 2
    331e:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    3322:	61 ed       	ldi	r22, 0xD1	; 209
    3324:	71 e1       	ldi	r23, 0x11	; 17
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    332c:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
    3330:	cf ef       	ldi	r28, 0xFF	; 255
    3332:	71 c0       	rjmp	.+226    	; 0x3416 <menuOnEnterTune+0x1d8>
    3334:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3338:	6f 3f       	cpi	r22, 0xFF	; 255
    333a:	09 f4       	brne	.+2      	; 0x333e <menuOnEnterTune+0x100>
    333c:	61 c0       	rjmp	.+194    	; 0x3400 <menuOnEnterTune+0x1c2>
    333e:	81 30       	cpi	r24, 0x01	; 1
    3340:	d9 f4       	brne	.+54     	; 0x3378 <menuOnEnterTune+0x13a>
    3342:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <maxManNote.2953>
    3346:	68 17       	cp	r22, r24
    3348:	08 f0       	brcs	.+2      	; 0x334c <menuOnEnterTune+0x10e>
    334a:	5c c0       	rjmp	.+184    	; 0x3404 <menuOnEnterTune+0x1c6>
    334c:	40 e0       	ldi	r20, 0x00	; 0
    334e:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3352:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <manual_NoteOnOff>
    3356:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    335a:	6f 5f       	subi	r22, 0xFF	; 255
    335c:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    3360:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    3364:	81 30       	cpi	r24, 0x01	; 1
    3366:	09 f0       	breq	.+2      	; 0x336a <menuOnEnterTune+0x12c>
    3368:	4f c0       	rjmp	.+158    	; 0x3408 <menuOnEnterTune+0x1ca>
    336a:	41 e0       	ldi	r20, 0x01	; 1
    336c:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    3370:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <manual_NoteOnOff>
    3374:	cf ef       	ldi	r28, 0xFF	; 255
    3376:	4f c0       	rjmp	.+158    	; 0x3416 <menuOnEnterTune+0x1d8>
    3378:	84 30       	cpi	r24, 0x04	; 4
    337a:	d1 f4       	brne	.+52     	; 0x33b0 <menuOnEnterTune+0x172>
    337c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <minManNote.2952>
    3380:	86 17       	cp	r24, r22
    3382:	08 f0       	brcs	.+2      	; 0x3386 <menuOnEnterTune+0x148>
    3384:	43 c0       	rjmp	.+134    	; 0x340c <menuOnEnterTune+0x1ce>
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    338c:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <manual_NoteOnOff>
    3390:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <menuNote>
    3394:	61 50       	subi	r22, 0x01	; 1
    3396:	60 93 9f 05 	sts	0x059F, r22	; 0x80059f <menuNote>
    339a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    339e:	81 30       	cpi	r24, 0x01	; 1
    33a0:	b9 f5       	brne	.+110    	; 0x3410 <menuOnEnterTune+0x1d2>
    33a2:	41 e0       	ldi	r20, 0x01	; 1
    33a4:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    33a8:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <manual_NoteOnOff>
    33ac:	cf ef       	ldi	r28, 0xFF	; 255
    33ae:	33 c0       	rjmp	.+102    	; 0x3416 <menuOnEnterTune+0x1d8>
    33b0:	83 30       	cpi	r24, 0x03	; 3
    33b2:	91 f4       	brne	.+36     	; 0x33d8 <menuOnEnterTune+0x19a>
    33b4:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    33b8:	81 11       	cpse	r24, r1
    33ba:	04 c0       	rjmp	.+8      	; 0x33c4 <menuOnEnterTune+0x186>
    33bc:	81 e0       	ldi	r24, 0x01	; 1
    33be:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <notOnOff.2954>
    33c2:	02 c0       	rjmp	.+4      	; 0x33c8 <menuOnEnterTune+0x18a>
    33c4:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <notOnOff.2954>
    33c8:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <notOnOff.2954>
    33cc:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    33d0:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <manual_NoteOnOff>
    33d4:	cf ef       	ldi	r28, 0xFF	; 255
    33d6:	1f c0       	rjmp	.+62     	; 0x3416 <menuOnEnterTune+0x1d8>
    33d8:	82 30       	cpi	r24, 0x02	; 2
    33da:	11 f0       	breq	.+4      	; 0x33e0 <menuOnEnterTune+0x1a2>
    33dc:	86 30       	cpi	r24, 0x06	; 6
    33de:	39 f4       	brne	.+14     	; 0x33ee <menuOnEnterTune+0x1b0>
    33e0:	40 e0       	ldi	r20, 0x00	; 0
    33e2:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    33e6:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <manual_NoteOnOff>
    33ea:	c0 e0       	ldi	r28, 0x00	; 0
    33ec:	14 c0       	rjmp	.+40     	; 0x3416 <menuOnEnterTune+0x1d8>
    33ee:	85 30       	cpi	r24, 0x05	; 5
    33f0:	89 f4       	brne	.+34     	; 0x3414 <menuOnEnterTune+0x1d6>
    33f2:	40 e0       	ldi	r20, 0x00	; 0
    33f4:	80 91 77 05 	lds	r24, 0x0577	; 0x800577 <menuVmanual>
    33f8:	0e 94 a8 2f 	call	0x5f50	; 0x5f50 <manual_NoteOnOff>
    33fc:	c0 e0       	ldi	r28, 0x00	; 0
    33fe:	0b c0       	rjmp	.+22     	; 0x3416 <menuOnEnterTune+0x1d8>
    3400:	c0 e0       	ldi	r28, 0x00	; 0
    3402:	09 c0       	rjmp	.+18     	; 0x3416 <menuOnEnterTune+0x1d8>
    3404:	cf ef       	ldi	r28, 0xFF	; 255
    3406:	07 c0       	rjmp	.+14     	; 0x3416 <menuOnEnterTune+0x1d8>
    3408:	cf ef       	ldi	r28, 0xFF	; 255
    340a:	05 c0       	rjmp	.+10     	; 0x3416 <menuOnEnterTune+0x1d8>
    340c:	cf ef       	ldi	r28, 0xFF	; 255
    340e:	03 c0       	rjmp	.+6      	; 0x3416 <menuOnEnterTune+0x1d8>
    3410:	cf ef       	ldi	r28, 0xFF	; 255
    3412:	01 c0       	rjmp	.+2      	; 0x3416 <menuOnEnterTune+0x1d8>
    3414:	cf ef       	ldi	r28, 0xFF	; 255
    3416:	cf 3f       	cpi	r28, 0xFF	; 255
    3418:	59 f5       	brne	.+86     	; 0x3470 <menuOnEnterTune+0x232>
    341a:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    341e:	8f 3f       	cpi	r24, 0xFF	; 255
    3420:	29 f1       	breq	.+74     	; 0x346c <menuOnEnterTune+0x22e>
    3422:	8e e1       	ldi	r24, 0x1E	; 30
    3424:	67 d8       	rcall	.-3890   	; 0x24f4 <lcd_goto>
    3426:	80 91 9f 05 	lds	r24, 0x059F	; 0x80059f <menuNote>
    342a:	0e 94 21 38 	call	0x7042	; 0x7042 <lcd_noteOut>
    342e:	80 e2       	ldi	r24, 0x20	; 32
    3430:	8b d8       	rcall	.-3818   	; 0x2548 <lcd_putc>
    3432:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    3436:	81 11       	cpse	r24, r1
    3438:	07 c0       	rjmp	.+14     	; 0x3448 <menuOnEnterTune+0x20a>
    343a:	81 e6       	ldi	r24, 0x61	; 97
    343c:	85 d8       	rcall	.-3830   	; 0x2548 <lcd_putc>
    343e:	85 e7       	ldi	r24, 0x75	; 117
    3440:	83 d8       	rcall	.-3834   	; 0x2548 <lcd_putc>
    3442:	83 e7       	ldi	r24, 0x73	; 115
    3444:	81 d8       	rcall	.-3838   	; 0x2548 <lcd_putc>
    3446:	06 c0       	rjmp	.+12     	; 0x3454 <menuOnEnterTune+0x216>
    3448:	85 e6       	ldi	r24, 0x65	; 101
    344a:	7e d8       	rcall	.-3844   	; 0x2548 <lcd_putc>
    344c:	89 e6       	ldi	r24, 0x69	; 105
    344e:	7c d8       	rcall	.-3848   	; 0x2548 <lcd_putc>
    3450:	8e e6       	ldi	r24, 0x6E	; 110
    3452:	7a d8       	rcall	.-3852   	; 0x2548 <lcd_putc>
    3454:	61 e0       	ldi	r22, 0x01	; 1
    3456:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <notOnOff.2954>
    345a:	81 11       	cpse	r24, r1
    345c:	01 c0       	rjmp	.+2      	; 0x3460 <menuOnEnterTune+0x222>
    345e:	60 e0       	ldi	r22, 0x00	; 0
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	0e 94 4f 39 	call	0x729e	; 0x729e <keylabel_statcheck>
    3466:	81 11       	cpse	r24, r1
    3468:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
    346c:	8e e1       	ldi	r24, 0x1E	; 30
    346e:	42 d8       	rcall	.-3964   	; 0x24f4 <lcd_goto>
    3470:	8c 2f       	mov	r24, r28
    3472:	cf 91       	pop	r28
    3474:	08 95       	ret

00003476 <menuOnExitMidiActiveSense>:
    3476:	0e 94 9d 0b 	call	0x173a	; 0x173a <eeprom_UpdateMidiOutMap>
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	08 95       	ret

0000347e <menuOnExitMidiOut>:
    347e:	0e 94 9d 0b 	call	0x173a	; 0x173a <eeprom_UpdateMidiOutMap>
    3482:	80 e0       	ldi	r24, 0x00	; 0
    3484:	08 95       	ret

00003486 <menuOnExitMidiIn>:
    3486:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <eeprom_UpdateMidiInMap>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	08 95       	ret

0000348e <menuOnExitManual>:
    348e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <eeprom_UpdateManualMap>
    3492:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <registers_CalcCount>
    3496:	0e 94 39 0c 	call	0x1872	; 0x1872 <eeprom_UpdateReg>
    349a:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <Midi_updateManualRange>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	08 95       	ret

000034a2 <menuOnExitModules>:
    34a2:	0e 94 cd 0b 	call	0x179a	; 0x179a <eeprom_UpdateModules>
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	08 95       	ret

000034aa <menuOnEnterUSBprotokoll>:
    34aa:	cf 93       	push	r28
    34ac:	8f e5       	ldi	r24, 0x5F	; 95
    34ae:	93 e0       	ldi	r25, 0x03	; 3
    34b0:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    34b4:	ac d8       	rcall	.-3752   	; 0x260e <log_count>
    34b6:	81 11       	cpse	r24, r1
    34b8:	17 c0       	rjmp	.+46     	; 0x34e8 <menuOnEnterUSBprotokoll+0x3e>
    34ba:	85 e6       	ldi	r24, 0x65	; 101
    34bc:	93 e0       	ldi	r25, 0x03	; 3
    34be:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    34c2:	16 c0       	rjmp	.+44     	; 0x34f0 <menuOnEnterUSBprotokoll+0x46>
    34c4:	6f ef       	ldi	r22, 0xFF	; 255
    34c6:	8c 2f       	mov	r24, r28
    34c8:	43 da       	rcall	.-2938   	; 0x2950 <log_getShortTextFromIndex>
    34ca:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    34ce:	83 ef       	ldi	r24, 0xF3	; 243
    34d0:	91 e1       	ldi	r25, 0x11	; 17
    34d2:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    34d6:	8c 2f       	mov	r24, r28
    34d8:	e1 d8       	rcall	.-3646   	; 0x269c <log_getErrorText>
    34da:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    34de:	83 ef       	ldi	r24, 0xF3	; 243
    34e0:	91 e1       	ldi	r25, 0x11	; 17
    34e2:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    34e6:	8c 2f       	mov	r24, r28
    34e8:	cf ef       	ldi	r28, 0xFF	; 255
    34ea:	c8 0f       	add	r28, r24
    34ec:	81 11       	cpse	r24, r1
    34ee:	ea cf       	rjmp	.-44     	; 0x34c4 <menuOnEnterUSBprotokoll+0x1a>
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	cf 91       	pop	r28
    34f4:	08 95       	ret

000034f6 <menuOnExitUSBactive>:
    34f6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <eeprom_UpdateUSB>
    34fa:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <serUSB_Active>
    34fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3500:	61 f4       	brne	.+24     	; 0x351a <menuOnExitUSBactive+0x24>
    3502:	86 e4       	ldi	r24, 0x46	; 70
    3504:	93 e0       	ldi	r25, 0x03	; 3
    3506:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    350a:	83 e9       	ldi	r24, 0x93	; 147
    350c:	91 e1       	ldi	r25, 0x11	; 17
    350e:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3512:	83 ef       	ldi	r24, 0xF3	; 243
    3514:	91 e1       	ldi	r25, 0x11	; 17
    3516:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	08 95       	ret

0000351e <menuOnEnterUSBsendHW>:
    351e:	9f 92       	push	r9
    3520:	af 92       	push	r10
    3522:	bf 92       	push	r11
    3524:	cf 92       	push	r12
    3526:	df 92       	push	r13
    3528:	ef 92       	push	r14
    352a:	ff 92       	push	r15
    352c:	0f 93       	push	r16
    352e:	1f 93       	push	r17
    3530:	cf 93       	push	r28
    3532:	df 93       	push	r29
    3534:	8d e2       	ldi	r24, 0x2D	; 45
    3536:	93 e0       	ldi	r25, 0x03	; 3
    3538:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    353c:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    3540:	8a e1       	ldi	r24, 0x1A	; 26
    3542:	93 e0       	ldi	r25, 0x03	; 3
    3544:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3548:	c5 e5       	ldi	r28, 0x55	; 85
    354a:	d3 e0       	ldi	r29, 0x03	; 3
    354c:	6d ef       	ldi	r22, 0xFD	; 253
    354e:	77 e1       	ldi	r23, 0x17	; 23
    3550:	88 81       	ld	r24, Y
    3552:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    3556:	22 e7       	ldi	r18, 0x72	; 114
    3558:	fc 01       	movw	r30, r24
    355a:	20 83       	st	Z, r18
    355c:	bc 01       	movw	r22, r24
    355e:	6e 5f       	subi	r22, 0xFE	; 254
    3560:	7f 4f       	sbci	r23, 0xFF	; 255
    3562:	20 e2       	ldi	r18, 0x20	; 32
    3564:	21 83       	std	Z+1, r18	; 0x01
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    356c:	27 e7       	ldi	r18, 0x77	; 119
    356e:	fc 01       	movw	r30, r24
    3570:	20 83       	st	Z, r18
    3572:	8d ef       	ldi	r24, 0xFD	; 253
    3574:	97 e1       	ldi	r25, 0x17	; 23
    3576:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    357a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    357e:	88 e0       	ldi	r24, 0x08	; 8
    3580:	93 e0       	ldi	r25, 0x03	; 3
    3582:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3586:	6d ef       	ldi	r22, 0xFD	; 253
    3588:	77 e1       	ldi	r23, 0x17	; 23
    358a:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <pipe_ModuleTested>
    358e:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    3592:	8d ef       	ldi	r24, 0xFD	; 253
    3594:	97 e1       	ldi	r25, 0x17	; 23
    3596:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    359a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    359e:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    35a2:	e1 2c       	mov	r14, r1
    35a4:	d1 c0       	rjmp	.+418    	; 0x3748 <menuOnEnterUSBsendHW+0x22a>
    35a6:	8f ef       	ldi	r24, 0xFF	; 255
    35a8:	92 e0       	ldi	r25, 0x02	; 2
    35aa:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    35ae:	6d ef       	ldi	r22, 0xFD	; 253
    35b0:	77 e1       	ldi	r23, 0x17	; 23
    35b2:	8e 2d       	mov	r24, r14
    35b4:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <putChar_Manual>
    35b8:	8d ef       	ldi	r24, 0xFD	; 253
    35ba:	97 e1       	ldi	r25, 0x17	; 23
    35bc:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    35c0:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    35c4:	f1 2c       	mov	r15, r1
    35c6:	a4 c0       	rjmp	.+328    	; 0x3710 <menuOnEnterUSBsendHW+0x1f2>
    35c8:	88 ef       	ldi	r24, 0xF8	; 248
    35ca:	92 e0       	ldi	r25, 0x02	; 2
    35cc:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    35d0:	80 e3       	ldi	r24, 0x30	; 48
    35d2:	8f 0d       	add	r24, r15
    35d4:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    35d8:	8a e3       	ldi	r24, 0x3A	; 58
    35da:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    35de:	80 e2       	ldi	r24, 0x20	; 32
    35e0:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    35e4:	0e 2d       	mov	r16, r14
    35e6:	10 e0       	ldi	r17, 0x00	; 0
    35e8:	cf 2c       	mov	r12, r15
    35ea:	d1 2c       	mov	r13, r1
    35ec:	e6 01       	movw	r28, r12
    35ee:	cc 0f       	add	r28, r28
    35f0:	dd 1f       	adc	r29, r29
    35f2:	ce 01       	movw	r24, r28
    35f4:	8c 0d       	add	r24, r12
    35f6:	9d 1d       	adc	r25, r13
    35f8:	e8 01       	movw	r28, r16
    35fa:	cc 0f       	add	r28, r28
    35fc:	dd 1f       	adc	r29, r29
    35fe:	c0 0f       	add	r28, r16
    3600:	d1 1f       	adc	r29, r17
    3602:	cc 0f       	add	r28, r28
    3604:	dd 1f       	adc	r29, r29
    3606:	cc 0f       	add	r28, r28
    3608:	dd 1f       	adc	r29, r29
    360a:	c8 0f       	add	r28, r24
    360c:	d9 1f       	adc	r29, r25
    360e:	ce 5c       	subi	r28, 0xCE	; 206
    3610:	d6 4f       	sbci	r29, 0xF6	; 246
    3612:	6d ef       	ldi	r22, 0xFD	; 253
    3614:	77 e1       	ldi	r23, 0x17	; 23
    3616:	88 81       	ld	r24, Y
    3618:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    361c:	bc 01       	movw	r22, r24
    361e:	6f 5f       	subi	r22, 0xFF	; 255
    3620:	7f 4f       	sbci	r23, 0xFF	; 255
    3622:	0f 2e       	mov	r0, r31
    3624:	fe e2       	ldi	r31, 0x2E	; 46
    3626:	bf 2e       	mov	r11, r31
    3628:	f0 2d       	mov	r31, r0
    362a:	fc 01       	movw	r30, r24
    362c:	b0 82       	st	Z, r11
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    3634:	bc 01       	movw	r22, r24
    3636:	6f 5f       	subi	r22, 0xFF	; 255
    3638:	7f 4f       	sbci	r23, 0xFF	; 255
    363a:	fc 01       	movw	r30, r24
    363c:	b0 82       	st	Z, r11
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    3644:	fc 01       	movw	r30, r24
    3646:	80 e2       	ldi	r24, 0x20	; 32
    3648:	80 83       	st	Z, r24
    364a:	9d e3       	ldi	r25, 0x3D	; 61
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	82 83       	std	Z+2, r24	; 0x02
    3650:	8d ef       	ldi	r24, 0xFD	; 253
    3652:	97 e1       	ldi	r25, 0x17	; 23
    3654:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    3658:	88 81       	ld	r24, Y
    365a:	88 23       	and	r24, r24
    365c:	2c f4       	brge	.+10     	; 0x3668 <menuOnEnterUSBsendHW+0x14a>
    365e:	86 ee       	ldi	r24, 0xE6	; 230
    3660:	92 e0       	ldi	r25, 0x02	; 2
    3662:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3666:	51 c0       	rjmp	.+162    	; 0x370a <menuOnEnterUSBsendHW+0x1ec>
    3668:	6d ef       	ldi	r22, 0xFD	; 253
    366a:	77 e1       	ldi	r23, 0x17	; 23
    366c:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <putChar_Note>
    3670:	bc 01       	movw	r22, r24
    3672:	6f 5f       	subi	r22, 0xFF	; 255
    3674:	7f 4f       	sbci	r23, 0xFF	; 255
    3676:	0f 2e       	mov	r0, r31
    3678:	fd e2       	ldi	r31, 0x2D	; 45
    367a:	9f 2e       	mov	r9, r31
    367c:	f0 2d       	mov	r31, r0
    367e:	fc 01       	movw	r30, r24
    3680:	90 82       	st	Z, r9
    3682:	f6 01       	movw	r30, r12
    3684:	ee 0f       	add	r30, r30
    3686:	ff 1f       	adc	r31, r31
    3688:	ce 0e       	add	r12, r30
    368a:	df 1e       	adc	r13, r31
    368c:	58 01       	movw	r10, r16
    368e:	aa 0c       	add	r10, r10
    3690:	bb 1c       	adc	r11, r11
    3692:	e5 01       	movw	r28, r10
    3694:	c0 0f       	add	r28, r16
    3696:	d1 1f       	adc	r29, r17
    3698:	cc 0f       	add	r28, r28
    369a:	dd 1f       	adc	r29, r29
    369c:	cc 0f       	add	r28, r28
    369e:	dd 1f       	adc	r29, r29
    36a0:	cc 0d       	add	r28, r12
    36a2:	dd 1d       	adc	r29, r13
    36a4:	ce 5c       	subi	r28, 0xCE	; 206
    36a6:	d6 4f       	sbci	r29, 0xF6	; 246
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <putChar_Note>
    36ae:	20 e2       	ldi	r18, 0x20	; 32
    36b0:	fc 01       	movw	r30, r24
    36b2:	20 83       	st	Z, r18
    36b4:	11 82       	std	Z+1, r1	; 0x01
    36b6:	8d ef       	ldi	r24, 0xFD	; 253
    36b8:	97 e1       	ldi	r25, 0x17	; 23
    36ba:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    36be:	8e ed       	ldi	r24, 0xDE	; 222
    36c0:	92 e0       	ldi	r25, 0x02	; 2
    36c2:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    36c6:	8a 81       	ldd	r24, Y+2	; 0x02
    36c8:	82 95       	swap	r24
    36ca:	86 95       	lsr	r24
    36cc:	87 70       	andi	r24, 0x07	; 7
    36ce:	80 5d       	subi	r24, 0xD0	; 208
    36d0:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    36d4:	86 ed       	ldi	r24, 0xD6	; 214
    36d6:	92 e0       	ldi	r25, 0x02	; 2
    36d8:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	6d ef       	ldi	r22, 0xFD	; 253
    36e0:	77 e1       	ldi	r23, 0x17	; 23
    36e2:	8f 71       	andi	r24, 0x1F	; 31
    36e4:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    36e8:	bc 01       	movw	r22, r24
    36ea:	6f 5f       	subi	r22, 0xFF	; 255
    36ec:	7f 4f       	sbci	r23, 0xFF	; 255
    36ee:	fc 01       	movw	r30, r24
    36f0:	90 82       	st	Z, r9
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	99 81       	ldd	r25, Y+1	; 0x01
    36f6:	28 81       	ld	r18, Y
    36f8:	8f 71       	andi	r24, 0x1F	; 31
    36fa:	89 0f       	add	r24, r25
    36fc:	82 1b       	sub	r24, r18
    36fe:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    3702:	8d ef       	ldi	r24, 0xFD	; 253
    3704:	97 e1       	ldi	r25, 0x17	; 23
    3706:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    370a:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    370e:	f3 94       	inc	r15
    3710:	f3 e0       	ldi	r31, 0x03	; 3
    3712:	ff 15       	cp	r31, r15
    3714:	08 f0       	brcs	.+2      	; 0x3718 <menuOnEnterUSBsendHW+0x1fa>
    3716:	58 cf       	rjmp	.-336    	; 0x35c8 <menuOnEnterUSBsendHW+0xaa>
    3718:	84 eb       	ldi	r24, 0xB4	; 180
    371a:	92 e0       	ldi	r25, 0x02	; 2
    371c:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3720:	ee 2d       	mov	r30, r14
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	ee 0f       	add	r30, r30
    3726:	ff 1f       	adc	r31, r31
    3728:	ea 5d       	subi	r30, 0xDA	; 218
    372a:	f6 4f       	sbci	r31, 0xF6	; 246
    372c:	6d ef       	ldi	r22, 0xFD	; 253
    372e:	77 e1       	ldi	r23, 0x17	; 23
    3730:	81 81       	ldd	r24, Z+1	; 0x01
    3732:	0e 94 4f 37 	call	0x6e9e	; 0x6e9e <putChar_MidiChan>
    3736:	8d ef       	ldi	r24, 0xFD	; 253
    3738:	97 e1       	ldi	r25, 0x17	; 23
    373a:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    373e:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    3742:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    3746:	e3 94       	inc	r14
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	8e 15       	cp	r24, r14
    374c:	08 f0       	brcs	.+2      	; 0x3750 <menuOnEnterUSBsendHW+0x232>
    374e:	2b cf       	rjmp	.-426    	; 0x35a6 <menuOnEnterUSBsendHW+0x88>
    3750:	8c ee       	ldi	r24, 0xEC	; 236
    3752:	92 e0       	ldi	r25, 0x02	; 2
    3754:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3758:	f1 2c       	mov	r15, r1
    375a:	94 c0       	rjmp	.+296    	; 0x3884 <menuOnEnterUSBsendHW+0x366>
    375c:	88 ef       	ldi	r24, 0xF8	; 248
    375e:	92 e0       	ldi	r25, 0x02	; 2
    3760:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3764:	80 e3       	ldi	r24, 0x30	; 48
    3766:	8f 0d       	add	r24, r15
    3768:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    376c:	8a e3       	ldi	r24, 0x3A	; 58
    376e:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    3772:	80 e2       	ldi	r24, 0x20	; 32
    3774:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    3778:	cf 2d       	mov	r28, r15
    377a:	d0 e0       	ldi	r29, 0x00	; 0
    377c:	8e 01       	movw	r16, r28
    377e:	00 0f       	add	r16, r16
    3780:	11 1f       	adc	r17, r17
    3782:	0c 0f       	add	r16, r28
    3784:	1d 1f       	adc	r17, r29
    3786:	0a 50       	subi	r16, 0x0A	; 10
    3788:	18 4f       	sbci	r17, 0xF8	; 248
    378a:	6d ef       	ldi	r22, 0xFD	; 253
    378c:	77 e1       	ldi	r23, 0x17	; 23
    378e:	f8 01       	movw	r30, r16
    3790:	80 81       	ld	r24, Z
    3792:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    3796:	bc 01       	movw	r22, r24
    3798:	6f 5f       	subi	r22, 0xFF	; 255
    379a:	7f 4f       	sbci	r23, 0xFF	; 255
    379c:	0f 2e       	mov	r0, r31
    379e:	fe e2       	ldi	r31, 0x2E	; 46
    37a0:	ef 2e       	mov	r14, r31
    37a2:	f0 2d       	mov	r31, r0
    37a4:	fc 01       	movw	r30, r24
    37a6:	e0 82       	st	Z, r14
    37a8:	f8 01       	movw	r30, r16
    37aa:	81 81       	ldd	r24, Z+1	; 0x01
    37ac:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    37b0:	bc 01       	movw	r22, r24
    37b2:	6f 5f       	subi	r22, 0xFF	; 255
    37b4:	7f 4f       	sbci	r23, 0xFF	; 255
    37b6:	fc 01       	movw	r30, r24
    37b8:	e0 82       	st	Z, r14
    37ba:	f8 01       	movw	r30, r16
    37bc:	82 81       	ldd	r24, Z+2	; 0x02
    37be:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <putChar_hex>
    37c2:	fc 01       	movw	r30, r24
    37c4:	80 e2       	ldi	r24, 0x20	; 32
    37c6:	80 83       	st	Z, r24
    37c8:	9d e3       	ldi	r25, 0x3D	; 61
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	82 83       	std	Z+2, r24	; 0x02
    37ce:	13 82       	std	Z+3, r1	; 0x03
    37d0:	8d ef       	ldi	r24, 0xFD	; 253
    37d2:	97 e1       	ldi	r25, 0x17	; 23
    37d4:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    37d8:	f8 01       	movw	r30, r16
    37da:	80 81       	ld	r24, Z
    37dc:	8f 3f       	cpi	r24, 0xFF	; 255
    37de:	29 f4       	brne	.+10     	; 0x37ea <menuOnEnterUSBsendHW+0x2cc>
    37e0:	86 ee       	ldi	r24, 0xE6	; 230
    37e2:	92 e0       	ldi	r25, 0x02	; 2
    37e4:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    37e8:	4a c0       	rjmp	.+148    	; 0x387e <menuOnEnterUSBsendHW+0x360>
    37ea:	ed ef       	ldi	r30, 0xFD	; 253
    37ec:	f7 e1       	ldi	r31, 0x17	; 23
    37ee:	92 e5       	ldi	r25, 0x52	; 82
    37f0:	90 83       	st	Z, r25
    37f2:	9e e2       	ldi	r25, 0x2E	; 46
    37f4:	91 83       	std	Z+1, r25	; 0x01
    37f6:	6f ef       	ldi	r22, 0xFF	; 255
    37f8:	77 e1       	ldi	r23, 0x17	; 23
    37fa:	8f 5f       	subi	r24, 0xFF	; 255
    37fc:	0e 94 10 37 	call	0x6e20	; 0x6e20 <putChar_Dec>
    3800:	bc 01       	movw	r22, r24
    3802:	6f 5f       	subi	r22, 0xFF	; 255
    3804:	7f 4f       	sbci	r23, 0xFF	; 255
    3806:	1d e2       	ldi	r17, 0x2D	; 45
    3808:	fc 01       	movw	r30, r24
    380a:	10 83       	st	Z, r17
    380c:	ce 01       	movw	r24, r28
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	c8 0f       	add	r28, r24
    3814:	d9 1f       	adc	r29, r25
    3816:	ca 50       	subi	r28, 0x0A	; 10
    3818:	d8 4f       	sbci	r29, 0xF8	; 248
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	8f 5f       	subi	r24, 0xFF	; 255
    381e:	0e 94 10 37 	call	0x6e20	; 0x6e20 <putChar_Dec>
    3822:	20 e2       	ldi	r18, 0x20	; 32
    3824:	fc 01       	movw	r30, r24
    3826:	20 83       	st	Z, r18
    3828:	11 82       	std	Z+1, r1	; 0x01
    382a:	8d ef       	ldi	r24, 0xFD	; 253
    382c:	97 e1       	ldi	r25, 0x17	; 23
    382e:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    3832:	8e ed       	ldi	r24, 0xDE	; 222
    3834:	92 e0       	ldi	r25, 0x02	; 2
    3836:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	82 95       	swap	r24
    383e:	86 95       	lsr	r24
    3840:	87 70       	andi	r24, 0x07	; 7
    3842:	80 5d       	subi	r24, 0xD0	; 208
    3844:	0e 94 85 33 	call	0x670a	; 0x670a <serial0SER_USBSend>
    3848:	86 ed       	ldi	r24, 0xD6	; 214
    384a:	92 e0       	ldi	r25, 0x02	; 2
    384c:	0e 94 66 34 	call	0x68cc	; 0x68cc <serial0SER_USB_sendStringP>
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	6d ef       	ldi	r22, 0xFD	; 253
    3854:	77 e1       	ldi	r23, 0x17	; 23
    3856:	8f 71       	andi	r24, 0x1F	; 31
    3858:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    385c:	bc 01       	movw	r22, r24
    385e:	6f 5f       	subi	r22, 0xFF	; 255
    3860:	7f 4f       	sbci	r23, 0xFF	; 255
    3862:	fc 01       	movw	r30, r24
    3864:	10 83       	st	Z, r17
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	99 81       	ldd	r25, Y+1	; 0x01
    386a:	28 81       	ld	r18, Y
    386c:	8f 71       	andi	r24, 0x1F	; 31
    386e:	89 0f       	add	r24, r25
    3870:	82 1b       	sub	r24, r18
    3872:	0e 94 f4 36 	call	0x6de8	; 0x6de8 <putChar_Dec2>
    3876:	8d ef       	ldi	r24, 0xFD	; 253
    3878:	97 e1       	ldi	r25, 0x17	; 23
    387a:	0e 94 ba 34 	call	0x6974	; 0x6974 <serial0SER_USB_sendString>
    387e:	0e 94 78 34 	call	0x68f0	; 0x68f0 <serial0SER_USB_sendCRLF>
    3882:	f3 94       	inc	r15
    3884:	f7 e0       	ldi	r31, 0x07	; 7
    3886:	ff 15       	cp	r31, r15
    3888:	08 f0       	brcs	.+2      	; 0x388c <menuOnEnterUSBsendHW+0x36e>
    388a:	68 cf       	rjmp	.-304    	; 0x375c <menuOnEnterUSBsendHW+0x23e>
    388c:	80 e0       	ldi	r24, 0x00	; 0
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	df 90       	pop	r13
    389c:	cf 90       	pop	r12
    389e:	bf 90       	pop	r11
    38a0:	af 90       	pop	r10
    38a2:	9f 90       	pop	r9
    38a4:	08 95       	ret

000038a6 <reverseRegisterBits>:
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	10 e0       	ldi	r17, 0x00	; 0
    38ae:	09 c0       	rjmp	.+18     	; 0x38c2 <reverseRegisterBits+0x1c>
    38b0:	c1 2f       	mov	r28, r17
    38b2:	d0 e0       	ldi	r29, 0x00	; 0
    38b4:	c3 59       	subi	r28, 0x93	; 147
    38b6:	da 4f       	sbci	r29, 0xFA	; 250
    38b8:	88 81       	ld	r24, Y
    38ba:	0e 94 86 39 	call	0x730c	; 0x730c <reverse_Bits>
    38be:	88 83       	st	Y, r24
    38c0:	1f 5f       	subi	r17, 0xFF	; 255
    38c2:	18 30       	cpi	r17, 0x08	; 8
    38c4:	a8 f3       	brcs	.-22     	; 0x38b0 <reverseRegisterBits+0xa>
    38c6:	df 91       	pop	r29
    38c8:	cf 91       	pop	r28
    38ca:	1f 91       	pop	r17
    38cc:	08 95       	ret

000038ce <menuOnUpdateRegister>:
    38ce:	8d e6       	ldi	r24, 0x6D	; 109
    38d0:	95 e0       	ldi	r25, 0x05	; 5
    38d2:	0e 94 b6 2c 	call	0x596c	; 0x596c <read_allRegister>
    38d6:	e7 df       	rcall	.-50     	; 0x38a6 <reverseRegisterBits>
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	08 95       	ret

000038dc <menuOnEnterResetReg>:
    38dc:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <midi_resetRegisters>
    38e0:	80 e0       	ldi	r24, 0x00	; 0
    38e2:	f5 df       	rcall	.-22     	; 0x38ce <menuOnUpdateRegister>
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	08 95       	ret

000038e8 <menuOnExitLoadProgran>:
    38e8:	86 30       	cpi	r24, 0x06	; 6
    38ea:	31 f0       	breq	.+12     	; 0x38f8 <menuOnExitLoadProgran+0x10>
    38ec:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <menuVKombination>
    38f0:	80 34       	cpi	r24, 0x40	; 64
    38f2:	10 f4       	brcc	.+4      	; 0x38f8 <menuOnExitLoadProgran+0x10>
    38f4:	0e 94 07 2d 	call	0x5a0e	; 0x5a0e <program_toRegister>
    38f8:	80 e0       	ldi	r24, 0x00	; 0
    38fa:	e9 df       	rcall	.-46     	; 0x38ce <menuOnUpdateRegister>
    38fc:	80 e0       	ldi	r24, 0x00	; 0
    38fe:	08 95       	ret

00003900 <softkeyCoupler>:
    3900:	cf 93       	push	r28
    3902:	c6 2f       	mov	r28, r22
    3904:	88 23       	and	r24, r24
    3906:	d9 f0       	breq	.+54     	; 0x393e <softkeyCoupler+0x3e>
    3908:	e6 2f       	mov	r30, r22
    390a:	f0 e0       	ldi	r31, 0x00	; 0
    390c:	df 01       	movw	r26, r30
    390e:	a1 5f       	subi	r26, 0xF1	; 241
    3910:	b7 4f       	sbci	r27, 0xF7	; 247
    3912:	8c 91       	ld	r24, X
    3914:	81 11       	cpse	r24, r1
    3916:	08 c0       	rjmp	.+16     	; 0x3928 <softkeyCoupler+0x28>
    3918:	86 2f       	mov	r24, r22
    391a:	0e 94 23 2b 	call	0x5646	; 0x5646 <set_Coupler>
    391e:	88 23       	and	r24, r24
    3920:	71 f0       	breq	.+28     	; 0x393e <softkeyCoupler+0x3e>
    3922:	0e 94 59 30 	call	0x60b2	; 0x60b2 <midi_ManualOff>
    3926:	0b c0       	rjmp	.+22     	; 0x393e <softkeyCoupler+0x3e>
    3928:	df 01       	movw	r26, r30
    392a:	a1 5f       	subi	r26, 0xF1	; 241
    392c:	b7 4f       	sbci	r27, 0xF7	; 247
    392e:	1c 92       	st	X, r1
    3930:	ee 0f       	add	r30, r30
    3932:	ff 1f       	adc	r31, r31
    3934:	e7 56       	subi	r30, 0x67	; 103
    3936:	fe 4e       	sbci	r31, 0xEE	; 238
    3938:	84 91       	lpm	r24, Z
    393a:	0e 94 59 30 	call	0x60b2	; 0x60b2 <midi_ManualOff>
    393e:	ec 2f       	mov	r30, r28
    3940:	f0 e0       	ldi	r31, 0x00	; 0
    3942:	e1 5f       	subi	r30, 0xF1	; 241
    3944:	f7 4f       	sbci	r31, 0xF7	; 247
    3946:	80 81       	ld	r24, Z
    3948:	81 11       	cpse	r24, r1
    394a:	02 c0       	rjmp	.+4      	; 0x3950 <softkeyCoupler+0x50>
    394c:	82 e8       	ldi	r24, 0x82	; 130
    394e:	01 c0       	rjmp	.+2      	; 0x3952 <softkeyCoupler+0x52>
    3950:	81 e8       	ldi	r24, 0x81	; 129
    3952:	cf 91       	pop	r28
    3954:	08 95       	ret

00003956 <softKeyCoupler2from3>:
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	d3 cf       	rjmp	.-90     	; 0x3900 <softkeyCoupler>
    395a:	08 95       	ret

0000395c <softKeyCoupler1from3>:
    395c:	61 e0       	ldi	r22, 0x01	; 1
    395e:	d0 cf       	rjmp	.-96     	; 0x3900 <softkeyCoupler>
    3960:	08 95       	ret

00003962 <softKeyCouplerPfrom3>:
    3962:	63 e0       	ldi	r22, 0x03	; 3
    3964:	cd cf       	rjmp	.-102    	; 0x3900 <softkeyCoupler>
    3966:	08 95       	ret

00003968 <softKeyCoupler1from2>:
    3968:	62 e0       	ldi	r22, 0x02	; 2
    396a:	ca cf       	rjmp	.-108    	; 0x3900 <softkeyCoupler>
    396c:	08 95       	ret

0000396e <softKeyCouplerPfrom2>:
    396e:	64 e0       	ldi	r22, 0x04	; 4
    3970:	c7 cf       	rjmp	.-114    	; 0x3900 <softkeyCoupler>
    3972:	08 95       	ret

00003974 <softKeyCouplerPfrom1>:
    3974:	65 e0       	ldi	r22, 0x05	; 5
    3976:	c4 cf       	rjmp	.-120    	; 0x3900 <softkeyCoupler>
    3978:	08 95       	ret

0000397a <softKeyCoupler3from2>:
    397a:	66 e0       	ldi	r22, 0x06	; 6
    397c:	c1 cf       	rjmp	.-126    	; 0x3900 <softkeyCoupler>
    397e:	08 95       	ret

00003980 <softKeyCoupler3from1>:
    3980:	67 e0       	ldi	r22, 0x07	; 7
    3982:	be cf       	rjmp	.-132    	; 0x3900 <softkeyCoupler>
    3984:	08 95       	ret

00003986 <softKeyCoupler3fromP>:
    3986:	69 e0       	ldi	r22, 0x09	; 9
    3988:	bb cf       	rjmp	.-138    	; 0x3900 <softkeyCoupler>
    398a:	08 95       	ret

0000398c <softKeyCoupler2from1>:
    398c:	68 e0       	ldi	r22, 0x08	; 8
    398e:	b8 cf       	rjmp	.-144    	; 0x3900 <softkeyCoupler>
    3990:	08 95       	ret

00003992 <softKeyCoupler2fromP>:
    3992:	6a e0       	ldi	r22, 0x0A	; 10
    3994:	b5 cf       	rjmp	.-150    	; 0x3900 <softkeyCoupler>
    3996:	08 95       	ret

00003998 <softKeyCoupler1fromP>:
    3998:	6b e0       	ldi	r22, 0x0B	; 11
    399a:	b2 cf       	rjmp	.-156    	; 0x3900 <softkeyCoupler>
    399c:	08 95       	ret

0000399e <menu_Init>:
    399e:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <menuStackIndex>
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f4       	brne	.+26     	; 0x39c0 <menu_Init+0x22>
    39a6:	83 ef       	ldi	r24, 0xF3	; 243
    39a8:	96 e0       	ldi	r25, 0x06	; 6
    39aa:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    39ae:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    39b2:	8e ec       	ldi	r24, 0xCE	; 206
    39b4:	93 e0       	ldi	r25, 0x03	; 3
    39b6:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <pMenuTopTitle+0x1>
    39ba:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <pMenuTopTitle>
    39be:	08 c0       	rjmp	.+16     	; 0x39d0 <menu_Init+0x32>
    39c0:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    39c4:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    39c8:	70 93 9d 05 	sts	0x059D, r23	; 0x80059d <pMenuTopTitle+0x1>
    39cc:	60 93 9c 05 	sts	0x059C, r22	; 0x80059c <pMenuTopTitle>
    39d0:	8f ef       	ldi	r24, 0xFF	; 255
    39d2:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    39d6:	88 ed       	ldi	r24, 0xD8	; 216
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    39de:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    39e2:	08 95       	ret

000039e4 <softkeyLeft>:
    39e4:	63 ed       	ldi	r22, 0xD3	; 211
    39e6:	71 e1       	ldi	r23, 0x11	; 17
    39e8:	82 e0       	ldi	r24, 0x02	; 2
    39ea:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    39ee:	08 95       	ret

000039f0 <softkeyRight>:
    39f0:	65 ed       	ldi	r22, 0xD5	; 213
    39f2:	71 e1       	ldi	r23, 0x11	; 17
    39f4:	83 e0       	ldi	r24, 0x03	; 3
    39f6:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    39fa:	08 95       	ret

000039fc <softkeyDown>:
    39fc:	67 ed       	ldi	r22, 0xD7	; 215
    39fe:	71 e1       	ldi	r23, 0x11	; 17
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a06:	08 95       	ret

00003a08 <softkeyOn>:
    3a08:	65 ec       	ldi	r22, 0xC5	; 197
    3a0a:	71 e1       	ldi	r23, 0x11	; 17
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a12:	08 95       	ret

00003a14 <softkeyOff>:
    3a14:	60 ec       	ldi	r22, 0xC0	; 192
    3a16:	71 e1       	ldi	r23, 0x11	; 17
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a1e:	08 95       	ret

00003a20 <softkeyUp>:
    3a20:	69 ed       	ldi	r22, 0xD9	; 217
    3a22:	71 e1       	ldi	r23, 0x11	; 17
    3a24:	80 e0       	ldi	r24, 0x00	; 0
    3a26:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a2a:	08 95       	ret

00003a2c <softkeyPlus>:
    3a2c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3a30:	8a 30       	cpi	r24, 0x0A	; 10
    3a32:	11 f0       	breq	.+4      	; 0x3a38 <softkeyPlus+0xc>
    3a34:	8e 30       	cpi	r24, 0x0E	; 14
    3a36:	31 f4       	brne	.+12     	; 0x3a44 <softkeyPlus+0x18>
    3a38:	61 eb       	ldi	r22, 0xB1	; 177
    3a3a:	71 e1       	ldi	r23, 0x11	; 17
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a42:	08 95       	ret
    3a44:	61 ed       	ldi	r22, 0xD1	; 209
    3a46:	71 e1       	ldi	r23, 0x11	; 17
    3a48:	80 e0       	ldi	r24, 0x00	; 0
    3a4a:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a4e:	08 95       	ret

00003a50 <softkeyMinus>:
    3a50:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    3a54:	8a 30       	cpi	r24, 0x0A	; 10
    3a56:	11 f0       	breq	.+4      	; 0x3a5c <softkeyMinus+0xc>
    3a58:	8e 30       	cpi	r24, 0x0E	; 14
    3a5a:	31 f4       	brne	.+12     	; 0x3a68 <softkeyMinus+0x18>
    3a5c:	63 eb       	ldi	r22, 0xB3	; 179
    3a5e:	71 e1       	ldi	r23, 0x11	; 17
    3a60:	81 e0       	ldi	r24, 0x01	; 1
    3a62:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a66:	08 95       	ret
    3a68:	6f ec       	ldi	r22, 0xCF	; 207
    3a6a:	71 e1       	ldi	r23, 0x11	; 17
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	0c 94 e1 38 	jmp	0x71c2	; 0x71c2 <keylabel_set>
    3a72:	08 95       	ret

00003a74 <dataToNibbles>:
    3a74:	cf 93       	push	r28
    3a76:	df 93       	push	r29
    3a78:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3a7c:	8e 2f       	mov	r24, r30
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	fc 01       	movw	r30, r24
    3a82:	32 97       	sbiw	r30, 0x02	; 2
    3a84:	ed 30       	cpi	r30, 0x0D	; 13
    3a86:	f1 05       	cpc	r31, r1
    3a88:	08 f0       	brcs	.+2      	; 0x3a8c <dataToNibbles+0x18>
    3a8a:	e4 c0       	rjmp	.+456    	; 0x3c54 <dataToNibbles+0x1e0>
    3a8c:	88 27       	eor	r24, r24
    3a8e:	ee 58       	subi	r30, 0x8E	; 142
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	8f 4f       	sbci	r24, 0xFF	; 255
    3a94:	0c 94 93 39 	jmp	0x7326	; 0x7326 <__tablejump2__>
    3a98:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3a9c:	e4 ec       	ldi	r30, 0xC4	; 196
    3a9e:	f5 e0       	ldi	r31, 0x05	; 5
    3aa0:	98 2f       	mov	r25, r24
    3aa2:	92 95       	swap	r25
    3aa4:	9f 70       	andi	r25, 0x0F	; 15
    3aa6:	90 83       	st	Z, r25
    3aa8:	8f 70       	andi	r24, 0x0F	; 15
    3aaa:	81 83       	std	Z+1, r24	; 0x01
    3aac:	d3 c0       	rjmp	.+422    	; 0x3c54 <dataToNibbles+0x1e0>
    3aae:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3ab2:	80 31       	cpi	r24, 0x10	; 16
    3ab4:	20 f0       	brcs	.+8      	; 0x3abe <dataToNibbles+0x4a>
    3ab6:	8f ef       	ldi	r24, 0xFF	; 255
    3ab8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3abc:	cb c0       	rjmp	.+406    	; 0x3c54 <dataToNibbles+0x1e0>
    3abe:	8f 5f       	subi	r24, 0xFF	; 255
    3ac0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ac4:	c7 c0       	rjmp	.+398    	; 0x3c54 <dataToNibbles+0x1e0>
    3ac6:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3aca:	88 23       	and	r24, r24
    3acc:	34 f4       	brge	.+12     	; 0x3ada <dataToNibbles+0x66>
    3ace:	e4 ec       	ldi	r30, 0xC4	; 196
    3ad0:	f5 e0       	ldi	r31, 0x05	; 5
    3ad2:	10 82       	st	Z, r1
    3ad4:	8f ef       	ldi	r24, 0xFF	; 255
    3ad6:	81 83       	std	Z+1, r24	; 0x01
    3ad8:	bd c0       	rjmp	.+378    	; 0x3c54 <dataToNibbles+0x1e0>
    3ada:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <nibble+0x1>
    3ade:	08 c0       	rjmp	.+16     	; 0x3af0 <dataToNibbles+0x7c>
    3ae0:	e4 ec       	ldi	r30, 0xC4	; 196
    3ae2:	f5 e0       	ldi	r31, 0x05	; 5
    3ae4:	91 81       	ldd	r25, Z+1	; 0x01
    3ae6:	9f 5f       	subi	r25, 0xFF	; 255
    3ae8:	91 83       	std	Z+1, r25	; 0x01
    3aea:	8c 50       	subi	r24, 0x0C	; 12
    3aec:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3af0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3af4:	8c 30       	cpi	r24, 0x0C	; 12
    3af6:	a0 f7       	brcc	.-24     	; 0x3ae0 <dataToNibbles+0x6c>
    3af8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3afc:	ab c0       	rjmp	.+342    	; 0x3c54 <dataToNibbles+0x1e0>
    3afe:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b02:	e4 ec       	ldi	r30, 0xC4	; 196
    3b04:	f5 e0       	ldi	r31, 0x05	; 5
    3b06:	98 2f       	mov	r25, r24
    3b08:	92 95       	swap	r25
    3b0a:	96 95       	lsr	r25
    3b0c:	97 70       	andi	r25, 0x07	; 7
    3b0e:	90 83       	st	Z, r25
    3b10:	8f 71       	andi	r24, 0x1F	; 31
    3b12:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b16:	11 82       	std	Z+1, r1	; 0x01
    3b18:	08 c0       	rjmp	.+16     	; 0x3b2a <dataToNibbles+0xb6>
    3b1a:	e4 ec       	ldi	r30, 0xC4	; 196
    3b1c:	f5 e0       	ldi	r31, 0x05	; 5
    3b1e:	91 81       	ldd	r25, Z+1	; 0x01
    3b20:	9f 5f       	subi	r25, 0xFF	; 255
    3b22:	91 83       	std	Z+1, r25	; 0x01
    3b24:	8a 50       	subi	r24, 0x0A	; 10
    3b26:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b2a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b2e:	8a 30       	cpi	r24, 0x0A	; 10
    3b30:	a0 f7       	brcc	.-24     	; 0x3b1a <dataToNibbles+0xa6>
    3b32:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3b36:	8e c0       	rjmp	.+284    	; 0x3c54 <dataToNibbles+0x1e0>
    3b38:	e4 ec       	ldi	r30, 0xC4	; 196
    3b3a:	f5 e0       	ldi	r31, 0x05	; 5
    3b3c:	10 82       	st	Z, r1
    3b3e:	11 82       	std	Z+1, r1	; 0x01
    3b40:	08 c0       	rjmp	.+16     	; 0x3b52 <dataToNibbles+0xde>
    3b42:	e4 ec       	ldi	r30, 0xC4	; 196
    3b44:	f5 e0       	ldi	r31, 0x05	; 5
    3b46:	90 81       	ld	r25, Z
    3b48:	9f 5f       	subi	r25, 0xFF	; 255
    3b4a:	90 83       	st	Z, r25
    3b4c:	84 56       	subi	r24, 0x64	; 100
    3b4e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b52:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b56:	84 36       	cpi	r24, 0x64	; 100
    3b58:	a0 f7       	brcc	.-24     	; 0x3b42 <dataToNibbles+0xce>
    3b5a:	08 c0       	rjmp	.+16     	; 0x3b6c <dataToNibbles+0xf8>
    3b5c:	e4 ec       	ldi	r30, 0xC4	; 196
    3b5e:	f5 e0       	ldi	r31, 0x05	; 5
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	9f 5f       	subi	r25, 0xFF	; 255
    3b64:	91 83       	std	Z+1, r25	; 0x01
    3b66:	8a 50       	subi	r24, 0x0A	; 10
    3b68:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3b6c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b70:	8a 30       	cpi	r24, 0x0A	; 10
    3b72:	a0 f7       	brcc	.-24     	; 0x3b5c <dataToNibbles+0xe8>
    3b74:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <nibble+0x2>
    3b78:	6d c0       	rjmp	.+218    	; 0x3c54 <dataToNibbles+0x1e0>
    3b7a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b7e:	84 30       	cpi	r24, 0x04	; 4
    3b80:	20 f0       	brcs	.+8      	; 0x3b8a <dataToNibbles+0x116>
    3b82:	8f ef       	ldi	r24, 0xFF	; 255
    3b84:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3b88:	65 c0       	rjmp	.+202    	; 0x3c54 <dataToNibbles+0x1e0>
    3b8a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3b8e:	62 c0       	rjmp	.+196    	; 0x3c54 <dataToNibbles+0x1e0>
    3b90:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3b94:	84 30       	cpi	r24, 0x04	; 4
    3b96:	20 f0       	brcs	.+8      	; 0x3ba0 <dataToNibbles+0x12c>
    3b98:	83 e0       	ldi	r24, 0x03	; 3
    3b9a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3b9e:	5a c0       	rjmp	.+180    	; 0x3c54 <dataToNibbles+0x1e0>
    3ba0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ba4:	57 c0       	rjmp	.+174    	; 0x3c54 <dataToNibbles+0x1e0>
    3ba6:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3baa:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3bae:	52 c0       	rjmp	.+164    	; 0x3c54 <dataToNibbles+0x1e0>
    3bb0:	e9 2f       	mov	r30, r25
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3bb8:	28 2f       	mov	r18, r24
    3bba:	22 1f       	adc	r18, r18
    3bbc:	22 27       	eor	r18, r18
    3bbe:	22 1f       	adc	r18, r18
    3bc0:	ec 53       	subi	r30, 0x3C	; 60
    3bc2:	fa 4f       	sbci	r31, 0xFA	; 250
    3bc4:	20 83       	st	Z, r18
    3bc6:	88 0f       	add	r24, r24
    3bc8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3bcc:	9f 5f       	subi	r25, 0xFF	; 255
    3bce:	01 c0       	rjmp	.+2      	; 0x3bd2 <dataToNibbles+0x15e>
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	98 30       	cpi	r25, 0x08	; 8
    3bd4:	68 f3       	brcs	.-38     	; 0x3bb0 <dataToNibbles+0x13c>
    3bd6:	3e c0       	rjmp	.+124    	; 0x3c54 <dataToNibbles+0x1e0>
    3bd8:	82 50       	subi	r24, 0x02	; 2
    3bda:	f0 e0       	ldi	r31, 0x00	; 0
    3bdc:	de 01       	movw	r26, r28
    3bde:	9d 91       	ld	r25, X+
    3be0:	ec 53       	subi	r30, 0x3C	; 60
    3be2:	fa 4f       	sbci	r31, 0xFA	; 250
    3be4:	9f 70       	andi	r25, 0x0F	; 15
    3be6:	90 83       	st	Z, r25
    3be8:	e8 2f       	mov	r30, r24
    3bea:	f0 e0       	ldi	r31, 0x00	; 0
    3bec:	98 81       	ld	r25, Y
    3bee:	ec 53       	subi	r30, 0x3C	; 60
    3bf0:	fa 4f       	sbci	r31, 0xFA	; 250
    3bf2:	92 95       	swap	r25
    3bf4:	9f 70       	andi	r25, 0x0F	; 15
    3bf6:	90 83       	st	Z, r25
    3bf8:	ed 01       	movw	r28, r26
    3bfa:	03 c0       	rjmp	.+6      	; 0x3c02 <dataToNibbles+0x18e>
    3bfc:	c2 ea       	ldi	r28, 0xA2	; 162
    3bfe:	d5 e0       	ldi	r29, 0x05	; 5
    3c00:	88 e0       	ldi	r24, 0x08	; 8
    3c02:	ef ef       	ldi	r30, 0xFF	; 255
    3c04:	e8 0f       	add	r30, r24
    3c06:	81 11       	cpse	r24, r1
    3c08:	e7 cf       	rjmp	.-50     	; 0x3bd8 <dataToNibbles+0x164>
    3c0a:	24 c0       	rjmp	.+72     	; 0x3c54 <dataToNibbles+0x1e0>
    3c0c:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3c10:	e4 ec       	ldi	r30, 0xC4	; 196
    3c12:	f5 e0       	ldi	r31, 0x05	; 5
    3c14:	98 2f       	mov	r25, r24
    3c16:	97 70       	andi	r25, 0x07	; 7
    3c18:	9f 5f       	subi	r25, 0xFF	; 255
    3c1a:	90 83       	st	Z, r25
    3c1c:	86 95       	lsr	r24
    3c1e:	86 95       	lsr	r24
    3c20:	86 95       	lsr	r24
    3c22:	8f 5f       	subi	r24, 0xFF	; 255
    3c24:	81 83       	std	Z+1, r24	; 0x01
    3c26:	16 c0       	rjmp	.+44     	; 0x3c54 <dataToNibbles+0x1e0>
    3c28:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3c2c:	8f 5f       	subi	r24, 0xFF	; 255
    3c2e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3c32:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    3c36:	08 c0       	rjmp	.+16     	; 0x3c48 <dataToNibbles+0x1d4>
    3c38:	e4 ec       	ldi	r30, 0xC4	; 196
    3c3a:	f5 e0       	ldi	r31, 0x05	; 5
    3c3c:	90 81       	ld	r25, Z
    3c3e:	9f 5f       	subi	r25, 0xFF	; 255
    3c40:	90 83       	st	Z, r25
    3c42:	8a 50       	subi	r24, 0x0A	; 10
    3c44:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    3c48:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    3c4c:	8a 30       	cpi	r24, 0x0A	; 10
    3c4e:	a0 f7       	brcc	.-24     	; 0x3c38 <dataToNibbles+0x1c4>
    3c50:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <nibble+0x1>
    3c54:	df 91       	pop	r29
    3c56:	cf 91       	pop	r28
    3c58:	08 95       	ret

00003c5a <nibbleToLCDstring>:
    3c5a:	0f 93       	push	r16
    3c5c:	1f 93       	push	r17
    3c5e:	cf 93       	push	r28
    3c60:	df 93       	push	r29
    3c62:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3c66:	8e 2f       	mov	r24, r30
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	fc 01       	movw	r30, r24
    3c6c:	32 97       	sbiw	r30, 0x02	; 2
    3c6e:	ed 30       	cpi	r30, 0x0D	; 13
    3c70:	f1 05       	cpc	r31, r1
    3c72:	08 f0       	brcs	.+2      	; 0x3c76 <nibbleToLCDstring+0x1c>
    3c74:	3b c1       	rjmp	.+630    	; 0x3eec <nibbleToLCDstring+0x292>
    3c76:	88 27       	eor	r24, r24
    3c78:	e1 58       	subi	r30, 0x81	; 129
    3c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3c7e:	0c 94 93 39 	jmp	0x7326	; 0x7326 <__tablejump2__>
    3c82:	04 ec       	ldi	r16, 0xC4	; 196
    3c84:	15 e0       	ldi	r17, 0x05	; 5
    3c86:	f8 01       	movw	r30, r16
    3c88:	80 81       	ld	r24, Z
    3c8a:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3c8e:	c5 e2       	ldi	r28, 0x25	; 37
    3c90:	d2 e0       	ldi	r29, 0x02	; 2
    3c92:	88 83       	st	Y, r24
    3c94:	f8 01       	movw	r30, r16
    3c96:	81 81       	ldd	r24, Z+1	; 0x01
    3c98:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3c9c:	89 83       	std	Y+1, r24	; 0x01
    3c9e:	1a 82       	std	Y+2, r1	; 0x02
    3ca0:	25 c1       	rjmp	.+586    	; 0x3eec <nibbleToLCDstring+0x292>
    3ca2:	e5 e2       	ldi	r30, 0x25	; 37
    3ca4:	f2 e0       	ldi	r31, 0x02	; 2
    3ca6:	83 e4       	ldi	r24, 0x43	; 67
    3ca8:	80 83       	st	Z, r24
    3caa:	88 e6       	ldi	r24, 0x68	; 104
    3cac:	81 83       	std	Z+1, r24	; 0x01
    3cae:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3cb4:	29 f4       	brne	.+10     	; 0x3cc0 <nibbleToLCDstring+0x66>
    3cb6:	80 e2       	ldi	r24, 0x20	; 32
    3cb8:	82 83       	std	Z+2, r24	; 0x02
    3cba:	8d e2       	ldi	r24, 0x2D	; 45
    3cbc:	83 83       	std	Z+3, r24	; 0x03
    3cbe:	12 c0       	rjmp	.+36     	; 0x3ce4 <nibbleToLCDstring+0x8a>
    3cc0:	8a 30       	cpi	r24, 0x0A	; 10
    3cc2:	48 f0       	brcs	.+18     	; 0x3cd6 <nibbleToLCDstring+0x7c>
    3cc4:	c5 e2       	ldi	r28, 0x25	; 37
    3cc6:	d2 e0       	ldi	r29, 0x02	; 2
    3cc8:	91 e3       	ldi	r25, 0x31	; 49
    3cca:	9a 83       	std	Y+2, r25	; 0x02
    3ccc:	8a 50       	subi	r24, 0x0A	; 10
    3cce:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3cd2:	8b 83       	std	Y+3, r24	; 0x03
    3cd4:	07 c0       	rjmp	.+14     	; 0x3ce4 <nibbleToLCDstring+0x8a>
    3cd6:	c5 e2       	ldi	r28, 0x25	; 37
    3cd8:	d2 e0       	ldi	r29, 0x02	; 2
    3cda:	90 e2       	ldi	r25, 0x20	; 32
    3cdc:	9a 83       	std	Y+2, r25	; 0x02
    3cde:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3ce2:	8b 83       	std	Y+3, r24	; 0x03
    3ce4:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <lcdData+0x4>
    3ce8:	01 c1       	rjmp	.+514    	; 0x3eec <nibbleToLCDstring+0x292>
    3cea:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3cee:	8f 3f       	cpi	r24, 0xFF	; 255
    3cf0:	21 f0       	breq	.+8      	; 0x3cfa <nibbleToLCDstring+0xa0>
    3cf2:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <nibble+0x1>
    3cf6:	9f 3f       	cpi	r25, 0xFF	; 255
    3cf8:	59 f4       	brne	.+22     	; 0x3d10 <nibbleToLCDstring+0xb6>
    3cfa:	e5 e2       	ldi	r30, 0x25	; 37
    3cfc:	f2 e0       	ldi	r31, 0x02	; 2
    3cfe:	8e e6       	ldi	r24, 0x6E	; 110
    3d00:	80 83       	st	Z, r24
    3d02:	9f e6       	ldi	r25, 0x6F	; 111
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	82 83       	std	Z+2, r24	; 0x02
    3d08:	85 e6       	ldi	r24, 0x65	; 101
    3d0a:	83 83       	std	Z+3, r24	; 0x03
    3d0c:	14 82       	std	Z+4, r1	; 0x04
    3d0e:	ee c0       	rjmp	.+476    	; 0x3eec <nibbleToLCDstring+0x292>
    3d10:	9f e5       	ldi	r25, 0x5F	; 95
    3d12:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <lcdData+0x1>
    3d16:	8b 30       	cpi	r24, 0x0B	; 11
    3d18:	21 f4       	brne	.+8      	; 0x3d22 <nibbleToLCDstring+0xc8>
    3d1a:	88 e4       	ldi	r24, 0x48	; 72
    3d1c:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3d20:	20 c0       	rjmp	.+64     	; 0x3d62 <nibbleToLCDstring+0x108>
    3d22:	85 30       	cpi	r24, 0x05	; 5
    3d24:	58 f4       	brcc	.+22     	; 0x3d3c <nibbleToLCDstring+0xe2>
    3d26:	98 2f       	mov	r25, r24
    3d28:	96 95       	lsr	r25
    3d2a:	9d 5b       	subi	r25, 0xBD	; 189
    3d2c:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <lcdData>
    3d30:	80 ff       	sbrs	r24, 0
    3d32:	17 c0       	rjmp	.+46     	; 0x3d62 <nibbleToLCDstring+0x108>
    3d34:	83 e2       	ldi	r24, 0x23	; 35
    3d36:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3d3a:	13 c0       	rjmp	.+38     	; 0x3d62 <nibbleToLCDstring+0x108>
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	25 50       	subi	r18, 0x05	; 5
    3d42:	31 09       	sbc	r19, r1
    3d44:	35 95       	asr	r19
    3d46:	27 95       	ror	r18
    3d48:	2a 5b       	subi	r18, 0xBA	; 186
    3d4a:	20 93 25 02 	sts	0x0225, r18	; 0x800225 <lcdData>
    3d4e:	80 fd       	sbrc	r24, 0
    3d50:	03 c0       	rjmp	.+6      	; 0x3d58 <nibbleToLCDstring+0xfe>
    3d52:	83 e2       	ldi	r24, 0x23	; 35
    3d54:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <lcdData+0x1>
    3d58:	28 34       	cpi	r18, 0x48	; 72
    3d5a:	19 f4       	brne	.+6      	; 0x3d62 <nibbleToLCDstring+0x108>
    3d5c:	81 e4       	ldi	r24, 0x41	; 65
    3d5e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <lcdData>
    3d62:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    3d66:	81 11       	cpse	r24, r1
    3d68:	04 c0       	rjmp	.+8      	; 0x3d72 <nibbleToLCDstring+0x118>
    3d6a:	8d e6       	ldi	r24, 0x6D	; 109
    3d6c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3d70:	0b c0       	rjmp	.+22     	; 0x3d88 <nibbleToLCDstring+0x12e>
    3d72:	8c 30       	cpi	r24, 0x0C	; 12
    3d74:	30 f4       	brcc	.+12     	; 0x3d82 <nibbleToLCDstring+0x128>
    3d76:	81 50       	subi	r24, 0x01	; 1
    3d78:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3d7c:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3d80:	03 c0       	rjmp	.+6      	; 0x3d88 <nibbleToLCDstring+0x12e>
    3d82:	8d e2       	ldi	r24, 0x2D	; 45
    3d84:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <lcdData+0x2>
    3d88:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3d8c:	af c0       	rjmp	.+350    	; 0x3eec <nibbleToLCDstring+0x292>
    3d8e:	c5 e2       	ldi	r28, 0x25	; 37
    3d90:	d2 e0       	ldi	r29, 0x02	; 2
    3d92:	8d e4       	ldi	r24, 0x4D	; 77
    3d94:	88 83       	st	Y, r24
    3d96:	04 ec       	ldi	r16, 0xC4	; 196
    3d98:	15 e0       	ldi	r17, 0x05	; 5
    3d9a:	f8 01       	movw	r30, r16
    3d9c:	80 81       	ld	r24, Z
    3d9e:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3da2:	89 83       	std	Y+1, r24	; 0x01
    3da4:	82 e4       	ldi	r24, 0x42	; 66
    3da6:	8a 83       	std	Y+2, r24	; 0x02
    3da8:	f8 01       	movw	r30, r16
    3daa:	81 81       	ldd	r24, Z+1	; 0x01
    3dac:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3db0:	8b 83       	std	Y+3, r24	; 0x03
    3db2:	f8 01       	movw	r30, r16
    3db4:	82 81       	ldd	r24, Z+2	; 0x02
    3db6:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3dba:	8c 83       	std	Y+4, r24	; 0x04
    3dbc:	1d 82       	std	Y+5, r1	; 0x05
    3dbe:	96 c0       	rjmp	.+300    	; 0x3eec <nibbleToLCDstring+0x292>
    3dc0:	04 ec       	ldi	r16, 0xC4	; 196
    3dc2:	15 e0       	ldi	r17, 0x05	; 5
    3dc4:	f8 01       	movw	r30, r16
    3dc6:	80 81       	ld	r24, Z
    3dc8:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3dcc:	c5 e2       	ldi	r28, 0x25	; 37
    3dce:	d2 e0       	ldi	r29, 0x02	; 2
    3dd0:	88 83       	st	Y, r24
    3dd2:	f8 01       	movw	r30, r16
    3dd4:	81 81       	ldd	r24, Z+1	; 0x01
    3dd6:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3dda:	89 83       	std	Y+1, r24	; 0x01
    3ddc:	f8 01       	movw	r30, r16
    3dde:	82 81       	ldd	r24, Z+2	; 0x02
    3de0:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3de4:	8a 83       	std	Y+2, r24	; 0x02
    3de6:	1b 82       	std	Y+3, r1	; 0x03
    3de8:	81 c0       	rjmp	.+258    	; 0x3eec <nibbleToLCDstring+0x292>
    3dea:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3dee:	83 30       	cpi	r24, 0x03	; 3
    3df0:	38 f4       	brcc	.+14     	; 0x3e00 <nibbleToLCDstring+0x1a6>
    3df2:	e5 e2       	ldi	r30, 0x25	; 37
    3df4:	f2 e0       	ldi	r31, 0x02	; 2
    3df6:	93 e3       	ldi	r25, 0x33	; 51
    3df8:	98 1b       	sub	r25, r24
    3dfa:	90 83       	st	Z, r25
    3dfc:	11 82       	std	Z+1, r1	; 0x01
    3dfe:	76 c0       	rjmp	.+236    	; 0x3eec <nibbleToLCDstring+0x292>
    3e00:	83 30       	cpi	r24, 0x03	; 3
    3e02:	31 f4       	brne	.+12     	; 0x3e10 <nibbleToLCDstring+0x1b6>
    3e04:	e5 e2       	ldi	r30, 0x25	; 37
    3e06:	f2 e0       	ldi	r31, 0x02	; 2
    3e08:	80 e5       	ldi	r24, 0x50	; 80
    3e0a:	80 83       	st	Z, r24
    3e0c:	11 82       	std	Z+1, r1	; 0x01
    3e0e:	6e c0       	rjmp	.+220    	; 0x3eec <nibbleToLCDstring+0x292>
    3e10:	e5 e2       	ldi	r30, 0x25	; 37
    3e12:	f2 e0       	ldi	r31, 0x02	; 2
    3e14:	8d e2       	ldi	r24, 0x2D	; 45
    3e16:	80 83       	st	Z, r24
    3e18:	11 82       	std	Z+1, r1	; 0x01
    3e1a:	68 c0       	rjmp	.+208    	; 0x3eec <nibbleToLCDstring+0x292>
    3e1c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3e20:	e5 e2       	ldi	r30, 0x25	; 37
    3e22:	f2 e0       	ldi	r31, 0x02	; 2
    3e24:	80 5d       	subi	r24, 0xD0	; 208
    3e26:	80 83       	st	Z, r24
    3e28:	11 82       	std	Z+1, r1	; 0x01
    3e2a:	60 c0       	rjmp	.+192    	; 0x3eec <nibbleToLCDstring+0x292>
    3e2c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3e30:	81 11       	cpse	r24, r1
    3e32:	09 c0       	rjmp	.+18     	; 0x3e46 <nibbleToLCDstring+0x1ec>
    3e34:	e5 e2       	ldi	r30, 0x25	; 37
    3e36:	f2 e0       	ldi	r31, 0x02	; 2
    3e38:	81 e4       	ldi	r24, 0x41	; 65
    3e3a:	80 83       	st	Z, r24
    3e3c:	85 e7       	ldi	r24, 0x75	; 117
    3e3e:	81 83       	std	Z+1, r24	; 0x01
    3e40:	83 e7       	ldi	r24, 0x73	; 115
    3e42:	82 83       	std	Z+2, r24	; 0x02
    3e44:	08 c0       	rjmp	.+16     	; 0x3e56 <nibbleToLCDstring+0x1fc>
    3e46:	e5 e2       	ldi	r30, 0x25	; 37
    3e48:	f2 e0       	ldi	r31, 0x02	; 2
    3e4a:	85 e4       	ldi	r24, 0x45	; 69
    3e4c:	80 83       	st	Z, r24
    3e4e:	89 e6       	ldi	r24, 0x69	; 105
    3e50:	81 83       	std	Z+1, r24	; 0x01
    3e52:	8e e6       	ldi	r24, 0x6E	; 110
    3e54:	82 83       	std	Z+2, r24	; 0x02
    3e56:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <lcdData+0x3>
    3e5a:	48 c0       	rjmp	.+144    	; 0x3eec <nibbleToLCDstring+0x292>
    3e5c:	c1 2f       	mov	r28, r17
    3e5e:	d0 e0       	ldi	r29, 0x00	; 0
    3e60:	fe 01       	movw	r30, r28
    3e62:	ec 53       	subi	r30, 0x3C	; 60
    3e64:	fa 4f       	sbci	r31, 0xFA	; 250
    3e66:	80 81       	ld	r24, Z
    3e68:	0e 94 67 36 	call	0x6cce	; 0x6cce <nibbleToChr>
    3e6c:	cb 5d       	subi	r28, 0xDB	; 219
    3e6e:	dd 4f       	sbci	r29, 0xFD	; 253
    3e70:	88 83       	st	Y, r24
    3e72:	1f 5f       	subi	r17, 0xFF	; 255
    3e74:	01 c0       	rjmp	.+2      	; 0x3e78 <nibbleToLCDstring+0x21e>
    3e76:	10 e0       	ldi	r17, 0x00	; 0
    3e78:	18 30       	cpi	r17, 0x08	; 8
    3e7a:	80 f3       	brcs	.-32     	; 0x3e5c <nibbleToLCDstring+0x202>
    3e7c:	37 c0       	rjmp	.+110    	; 0x3eec <nibbleToLCDstring+0x292>
    3e7e:	82 2f       	mov	r24, r18
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	fc 01       	movw	r30, r24
    3e84:	ec 53       	subi	r30, 0x3C	; 60
    3e86:	fa 4f       	sbci	r31, 0xFA	; 250
    3e88:	30 81       	ld	r19, Z
    3e8a:	31 11       	cpse	r19, r1
    3e8c:	02 c0       	rjmp	.+4      	; 0x3e92 <nibbleToLCDstring+0x238>
    3e8e:	3f e6       	ldi	r19, 0x6F	; 111
    3e90:	01 c0       	rjmp	.+2      	; 0x3e94 <nibbleToLCDstring+0x23a>
    3e92:	39 e4       	ldi	r19, 0x49	; 73
    3e94:	fc 01       	movw	r30, r24
    3e96:	eb 5d       	subi	r30, 0xDB	; 219
    3e98:	fd 4f       	sbci	r31, 0xFD	; 253
    3e9a:	30 83       	st	Z, r19
    3e9c:	2f 5f       	subi	r18, 0xFF	; 255
    3e9e:	01 c0       	rjmp	.+2      	; 0x3ea2 <nibbleToLCDstring+0x248>
    3ea0:	20 e0       	ldi	r18, 0x00	; 0
    3ea2:	28 30       	cpi	r18, 0x08	; 8
    3ea4:	60 f3       	brcs	.-40     	; 0x3e7e <nibbleToLCDstring+0x224>
    3ea6:	22 c0       	rjmp	.+68     	; 0x3eec <nibbleToLCDstring+0x292>
    3ea8:	a4 ec       	ldi	r26, 0xC4	; 196
    3eaa:	b5 e0       	ldi	r27, 0x05	; 5
    3eac:	8c 91       	ld	r24, X
    3eae:	e5 e2       	ldi	r30, 0x25	; 37
    3eb0:	f2 e0       	ldi	r31, 0x02	; 2
    3eb2:	80 5d       	subi	r24, 0xD0	; 208
    3eb4:	80 83       	st	Z, r24
    3eb6:	11 96       	adiw	r26, 0x01	; 1
    3eb8:	8c 91       	ld	r24, X
    3eba:	80 5c       	subi	r24, 0xC0	; 192
    3ebc:	81 83       	std	Z+1, r24	; 0x01
    3ebe:	12 82       	std	Z+2, r1	; 0x02
    3ec0:	15 c0       	rjmp	.+42     	; 0x3eec <nibbleToLCDstring+0x292>
    3ec2:	e4 ec       	ldi	r30, 0xC4	; 196
    3ec4:	f5 e0       	ldi	r31, 0x05	; 5
    3ec6:	90 81       	ld	r25, Z
    3ec8:	81 81       	ldd	r24, Z+1	; 0x01
    3eca:	29 2f       	mov	r18, r25
    3ecc:	28 2b       	or	r18, r24
    3ece:	31 f4       	brne	.+12     	; 0x3edc <nibbleToLCDstring+0x282>
    3ed0:	e5 e2       	ldi	r30, 0x25	; 37
    3ed2:	f2 e0       	ldi	r31, 0x02	; 2
    3ed4:	8d e2       	ldi	r24, 0x2D	; 45
    3ed6:	80 83       	st	Z, r24
    3ed8:	81 83       	std	Z+1, r24	; 0x01
    3eda:	06 c0       	rjmp	.+12     	; 0x3ee8 <nibbleToLCDstring+0x28e>
    3edc:	e5 e2       	ldi	r30, 0x25	; 37
    3ede:	f2 e0       	ldi	r31, 0x02	; 2
    3ee0:	90 5d       	subi	r25, 0xD0	; 208
    3ee2:	90 83       	st	Z, r25
    3ee4:	80 5d       	subi	r24, 0xD0	; 208
    3ee6:	81 83       	std	Z+1, r24	; 0x01
    3ee8:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <lcdData+0x2>
    3eec:	df 91       	pop	r29
    3eee:	cf 91       	pop	r28
    3ef0:	1f 91       	pop	r17
    3ef2:	0f 91       	pop	r16
    3ef4:	08 95       	ret

00003ef6 <LCDStringOut>:
    3ef6:	0f 93       	push	r16
    3ef8:	1f 93       	push	r17
    3efa:	cf 93       	push	r28
    3efc:	8e e1       	ldi	r24, 0x1E	; 30
    3efe:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    3f02:	c0 e0       	ldi	r28, 0x00	; 0
    3f04:	05 e2       	ldi	r16, 0x25	; 37
    3f06:	12 e0       	ldi	r17, 0x02	; 2
    3f08:	0b c0       	rjmp	.+22     	; 0x3f20 <LCDStringOut+0x2a>
    3f0a:	f8 01       	movw	r30, r16
    3f0c:	80 81       	ld	r24, Z
    3f0e:	88 23       	and	r24, r24
    3f10:	19 f0       	breq	.+6      	; 0x3f18 <LCDStringOut+0x22>
    3f12:	0f 5f       	subi	r16, 0xFF	; 255
    3f14:	1f 4f       	sbci	r17, 0xFF	; 255
    3f16:	01 c0       	rjmp	.+2      	; 0x3f1a <LCDStringOut+0x24>
    3f18:	80 e2       	ldi	r24, 0x20	; 32
    3f1a:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    3f1e:	cf 5f       	subi	r28, 0xFF	; 255
    3f20:	ca 30       	cpi	r28, 0x0A	; 10
    3f22:	98 f3       	brcs	.-26     	; 0x3f0a <LCDStringOut+0x14>
    3f24:	cf 91       	pop	r28
    3f26:	1f 91       	pop	r17
    3f28:	0f 91       	pop	r16
    3f2a:	08 95       	ret

00003f2c <nibbleCheckOvfl>:
    3f2c:	8a 30       	cpi	r24, 0x0A	; 10
    3f2e:	1c f4       	brge	.+6      	; 0x3f36 <nibbleCheckOvfl+0xa>
    3f30:	88 23       	and	r24, r24
    3f32:	1c f0       	brlt	.+6      	; 0x3f3a <nibbleCheckOvfl+0xe>
    3f34:	08 95       	ret
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	08 95       	ret
    3f3a:	89 e0       	ldi	r24, 0x09	; 9
    3f3c:	08 95       	ret

00003f3e <nibbleChange>:
    3f3e:	0f 93       	push	r16
    3f40:	1f 93       	push	r17
    3f42:	cf 93       	push	r28
    3f44:	df 93       	push	r29
    3f46:	c8 2f       	mov	r28, r24
    3f48:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    3f4c:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    3f50:	31 96       	adiw	r30, 0x01	; 1
    3f52:	84 91       	lpm	r24, Z
    3f54:	28 2f       	mov	r18, r24
    3f56:	20 71       	andi	r18, 0x10	; 16
    3f58:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    3f5c:	8e 2f       	mov	r24, r30
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	fc 01       	movw	r30, r24
    3f62:	32 97       	sbiw	r30, 0x02	; 2
    3f64:	ed 30       	cpi	r30, 0x0D	; 13
    3f66:	f1 05       	cpc	r31, r1
    3f68:	08 f0       	brcs	.+2      	; 0x3f6c <nibbleChange+0x2e>
    3f6a:	93 c1       	rjmp	.+806    	; 0x4292 <nibbleChange+0x354>
    3f6c:	88 27       	eor	r24, r24
    3f6e:	e4 57       	subi	r30, 0x74	; 116
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	8f 4f       	sbci	r24, 0xFF	; 255
    3f74:	0c 94 93 39 	jmp	0x7326	; 0x7326 <__tablejump2__>
    3f78:	d0 e0       	ldi	r29, 0x00	; 0
    3f7a:	cc 53       	subi	r28, 0x3C	; 60
    3f7c:	da 4f       	sbci	r29, 0xFA	; 250
    3f7e:	88 81       	ld	r24, Y
    3f80:	68 0f       	add	r22, r24
    3f82:	6f 70       	andi	r22, 0x0F	; 15
    3f84:	68 83       	st	Y, r22
    3f86:	85 c1       	rjmp	.+778    	; 0x4292 <nibbleChange+0x354>
    3f88:	21 11       	cpse	r18, r1
    3f8a:	1b c0       	rjmp	.+54     	; 0x3fc2 <nibbleChange+0x84>
    3f8c:	61 30       	cpi	r22, 0x01	; 1
    3f8e:	41 f4       	brne	.+16     	; 0x3fa0 <nibbleChange+0x62>
    3f90:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3f94:	80 31       	cpi	r24, 0x10	; 16
    3f96:	20 f0       	brcs	.+8      	; 0x3fa0 <nibbleChange+0x62>
    3f98:	81 e0       	ldi	r24, 0x01	; 1
    3f9a:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3f9e:	79 c1       	rjmp	.+754    	; 0x4292 <nibbleChange+0x354>
    3fa0:	6f 3f       	cpi	r22, 0xFF	; 255
    3fa2:	49 f4       	brne	.+18     	; 0x3fb6 <nibbleChange+0x78>
    3fa4:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3fa8:	82 50       	subi	r24, 0x02	; 2
    3faa:	8f 30       	cpi	r24, 0x0F	; 15
    3fac:	20 f0       	brcs	.+8      	; 0x3fb6 <nibbleChange+0x78>
    3fae:	80 e1       	ldi	r24, 0x10	; 16
    3fb0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3fb4:	6e c1       	rjmp	.+732    	; 0x4292 <nibbleChange+0x354>
    3fb6:	e4 ec       	ldi	r30, 0xC4	; 196
    3fb8:	f5 e0       	ldi	r31, 0x05	; 5
    3fba:	80 81       	ld	r24, Z
    3fbc:	68 0f       	add	r22, r24
    3fbe:	60 83       	st	Z, r22
    3fc0:	68 c1       	rjmp	.+720    	; 0x4292 <nibbleChange+0x354>
    3fc2:	61 30       	cpi	r22, 0x01	; 1
    3fc4:	41 f4       	brne	.+16     	; 0x3fd6 <nibbleChange+0x98>
    3fc6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3fca:	80 31       	cpi	r24, 0x10	; 16
    3fcc:	21 f4       	brne	.+8      	; 0x3fd6 <nibbleChange+0x98>
    3fce:	8f ef       	ldi	r24, 0xFF	; 255
    3fd0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3fd4:	5e c1       	rjmp	.+700    	; 0x4292 <nibbleChange+0x354>
    3fd6:	61 30       	cpi	r22, 0x01	; 1
    3fd8:	41 f4       	brne	.+16     	; 0x3fea <nibbleChange+0xac>
    3fda:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3fde:	8f 3f       	cpi	r24, 0xFF	; 255
    3fe0:	21 f4       	brne	.+8      	; 0x3fea <nibbleChange+0xac>
    3fe2:	81 e0       	ldi	r24, 0x01	; 1
    3fe4:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3fe8:	54 c1       	rjmp	.+680    	; 0x4292 <nibbleChange+0x354>
    3fea:	6f 3f       	cpi	r22, 0xFF	; 255
    3fec:	41 f4       	brne	.+16     	; 0x3ffe <nibbleChange+0xc0>
    3fee:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    3ff2:	8f 3f       	cpi	r24, 0xFF	; 255
    3ff4:	21 f4       	brne	.+8      	; 0x3ffe <nibbleChange+0xc0>
    3ff6:	80 e1       	ldi	r24, 0x10	; 16
    3ff8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    3ffc:	4a c1       	rjmp	.+660    	; 0x4292 <nibbleChange+0x354>
    3ffe:	6f 3f       	cpi	r22, 0xFF	; 255
    4000:	41 f4       	brne	.+16     	; 0x4012 <nibbleChange+0xd4>
    4002:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	21 f4       	brne	.+8      	; 0x4012 <nibbleChange+0xd4>
    400a:	8f ef       	ldi	r24, 0xFF	; 255
    400c:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <nibble>
    4010:	40 c1       	rjmp	.+640    	; 0x4292 <nibbleChange+0x354>
    4012:	e4 ec       	ldi	r30, 0xC4	; 196
    4014:	f5 e0       	ldi	r31, 0x05	; 5
    4016:	80 81       	ld	r24, Z
    4018:	68 0f       	add	r22, r24
    401a:	60 83       	st	Z, r22
    401c:	3a c1       	rjmp	.+628    	; 0x4292 <nibbleChange+0x354>
    401e:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    4022:	8f 3f       	cpi	r24, 0xFF	; 255
    4024:	09 f4       	brne	.+2      	; 0x4028 <nibbleChange+0xea>
    4026:	c1 e0       	ldi	r28, 0x01	; 1
    4028:	c1 11       	cpse	r28, r1
    402a:	16 c0       	rjmp	.+44     	; 0x4058 <nibbleChange+0x11a>
    402c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4030:	8c 30       	cpi	r24, 0x0C	; 12
    4032:	50 f4       	brcc	.+20     	; 0x4048 <nibbleChange+0x10a>
    4034:	8b 30       	cpi	r24, 0x0B	; 11
    4036:	11 f4       	brne	.+4      	; 0x403c <nibbleChange+0xfe>
    4038:	61 30       	cpi	r22, 0x01	; 1
    403a:	41 f0       	breq	.+16     	; 0x404c <nibbleChange+0x10e>
    403c:	81 11       	cpse	r24, r1
    403e:	02 c0       	rjmp	.+4      	; 0x4044 <nibbleChange+0x106>
    4040:	6f 3f       	cpi	r22, 0xFF	; 255
    4042:	31 f0       	breq	.+12     	; 0x4050 <nibbleChange+0x112>
    4044:	68 0f       	add	r22, r24
    4046:	05 c0       	rjmp	.+10     	; 0x4052 <nibbleChange+0x114>
    4048:	60 e0       	ldi	r22, 0x00	; 0
    404a:	03 c0       	rjmp	.+6      	; 0x4052 <nibbleChange+0x114>
    404c:	60 e0       	ldi	r22, 0x00	; 0
    404e:	01 c0       	rjmp	.+2      	; 0x4052 <nibbleChange+0x114>
    4050:	6b e0       	ldi	r22, 0x0B	; 11
    4052:	60 93 c4 05 	sts	0x05C4, r22	; 0x8005c4 <nibble>
    4056:	2b c0       	rjmp	.+86     	; 0x40ae <nibbleChange+0x170>
    4058:	21 11       	cpse	r18, r1
    405a:	0a c0       	rjmp	.+20     	; 0x4070 <nibbleChange+0x132>
    405c:	81 11       	cpse	r24, r1
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <nibbleChange+0x126>
    4060:	6f 3f       	cpi	r22, 0xFF	; 255
    4062:	c1 f0       	breq	.+48     	; 0x4094 <nibbleChange+0x156>
    4064:	8a 30       	cpi	r24, 0x0A	; 10
    4066:	11 f4       	brne	.+4      	; 0x406c <nibbleChange+0x12e>
    4068:	61 30       	cpi	r22, 0x01	; 1
    406a:	b1 f0       	breq	.+44     	; 0x4098 <nibbleChange+0x15a>
    406c:	68 0f       	add	r22, r24
    406e:	1d c0       	rjmp	.+58     	; 0x40aa <nibbleChange+0x16c>
    4070:	81 11       	cpse	r24, r1
    4072:	02 c0       	rjmp	.+4      	; 0x4078 <nibbleChange+0x13a>
    4074:	6f 3f       	cpi	r22, 0xFF	; 255
    4076:	91 f0       	breq	.+36     	; 0x409c <nibbleChange+0x15e>
    4078:	8a 30       	cpi	r24, 0x0A	; 10
    407a:	11 f4       	brne	.+4      	; 0x4080 <nibbleChange+0x142>
    407c:	61 30       	cpi	r22, 0x01	; 1
    407e:	81 f0       	breq	.+32     	; 0x40a0 <nibbleChange+0x162>
    4080:	8f 3f       	cpi	r24, 0xFF	; 255
    4082:	11 f4       	brne	.+4      	; 0x4088 <nibbleChange+0x14a>
    4084:	61 30       	cpi	r22, 0x01	; 1
    4086:	71 f0       	breq	.+28     	; 0x40a4 <nibbleChange+0x166>
    4088:	8f 3f       	cpi	r24, 0xFF	; 255
    408a:	11 f4       	brne	.+4      	; 0x4090 <nibbleChange+0x152>
    408c:	6f 3f       	cpi	r22, 0xFF	; 255
    408e:	61 f0       	breq	.+24     	; 0x40a8 <nibbleChange+0x16a>
    4090:	68 0f       	add	r22, r24
    4092:	0b c0       	rjmp	.+22     	; 0x40aa <nibbleChange+0x16c>
    4094:	6a e0       	ldi	r22, 0x0A	; 10
    4096:	09 c0       	rjmp	.+18     	; 0x40aa <nibbleChange+0x16c>
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	07 c0       	rjmp	.+14     	; 0x40aa <nibbleChange+0x16c>
    409c:	6f ef       	ldi	r22, 0xFF	; 255
    409e:	05 c0       	rjmp	.+10     	; 0x40aa <nibbleChange+0x16c>
    40a0:	6f ef       	ldi	r22, 0xFF	; 255
    40a2:	03 c0       	rjmp	.+6      	; 0x40aa <nibbleChange+0x16c>
    40a4:	60 e0       	ldi	r22, 0x00	; 0
    40a6:	01 c0       	rjmp	.+2      	; 0x40aa <nibbleChange+0x16c>
    40a8:	6a e0       	ldi	r22, 0x0A	; 10
    40aa:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    40ae:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    40b2:	9f 3f       	cpi	r25, 0xFF	; 255
    40b4:	09 f4       	brne	.+2      	; 0x40b8 <nibbleChange+0x17a>
    40b6:	ed c0       	rjmp	.+474    	; 0x4292 <nibbleChange+0x354>
    40b8:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    40bc:	8f 3f       	cpi	r24, 0xFF	; 255
    40be:	09 f4       	brne	.+2      	; 0x40c2 <nibbleChange+0x184>
    40c0:	e8 c0       	rjmp	.+464    	; 0x4292 <nibbleChange+0x354>
    40c2:	28 2f       	mov	r18, r24
    40c4:	22 0f       	add	r18, r18
    40c6:	82 0f       	add	r24, r18
    40c8:	28 2f       	mov	r18, r24
    40ca:	22 0f       	add	r18, r18
    40cc:	22 0f       	add	r18, r18
    40ce:	92 0f       	add	r25, r18
    40d0:	0a f0       	brmi	.+2      	; 0x40d4 <nibbleChange+0x196>
    40d2:	df c0       	rjmp	.+446    	; 0x4292 <nibbleChange+0x354>
    40d4:	e4 ec       	ldi	r30, 0xC4	; 196
    40d6:	f5 e0       	ldi	r31, 0x05	; 5
    40d8:	87 e0       	ldi	r24, 0x07	; 7
    40da:	80 83       	st	Z, r24
    40dc:	8a e0       	ldi	r24, 0x0A	; 10
    40de:	81 83       	std	Z+1, r24	; 0x01
    40e0:	d8 c0       	rjmp	.+432    	; 0x4292 <nibbleChange+0x354>
    40e2:	c1 11       	cpse	r28, r1
    40e4:	07 c0       	rjmp	.+14     	; 0x40f4 <nibbleChange+0x1b6>
    40e6:	e4 ec       	ldi	r30, 0xC4	; 196
    40e8:	f5 e0       	ldi	r31, 0x05	; 5
    40ea:	80 81       	ld	r24, Z
    40ec:	68 0f       	add	r22, r24
    40ee:	67 70       	andi	r22, 0x07	; 7
    40f0:	60 83       	st	Z, r22
    40f2:	cf c0       	rjmp	.+414    	; 0x4292 <nibbleChange+0x354>
    40f4:	d0 e0       	ldi	r29, 0x00	; 0
    40f6:	04 ec       	ldi	r16, 0xC4	; 196
    40f8:	15 e0       	ldi	r17, 0x05	; 5
    40fa:	cc 53       	subi	r28, 0x3C	; 60
    40fc:	da 4f       	sbci	r29, 0xFA	; 250
    40fe:	88 81       	ld	r24, Y
    4100:	86 0f       	add	r24, r22
    4102:	14 df       	rcall	.-472    	; 0x3f2c <nibbleCheckOvfl>
    4104:	88 83       	st	Y, r24
    4106:	f8 01       	movw	r30, r16
    4108:	81 81       	ldd	r24, Z+1	; 0x01
    410a:	92 81       	ldd	r25, Z+2	; 0x02
    410c:	88 0f       	add	r24, r24
    410e:	28 2f       	mov	r18, r24
    4110:	22 0f       	add	r18, r18
    4112:	22 0f       	add	r18, r18
    4114:	82 0f       	add	r24, r18
    4116:	89 0f       	add	r24, r25
    4118:	80 32       	cpi	r24, 0x20	; 32
    411a:	2c f0       	brlt	.+10     	; 0x4126 <nibbleChange+0x1e8>
    411c:	83 e0       	ldi	r24, 0x03	; 3
    411e:	81 83       	std	Z+1, r24	; 0x01
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	82 83       	std	Z+2, r24	; 0x02
    4124:	b6 c0       	rjmp	.+364    	; 0x4292 <nibbleChange+0x354>
    4126:	88 23       	and	r24, r24
    4128:	0c f0       	brlt	.+2      	; 0x412c <nibbleChange+0x1ee>
    412a:	b3 c0       	rjmp	.+358    	; 0x4292 <nibbleChange+0x354>
    412c:	e4 ec       	ldi	r30, 0xC4	; 196
    412e:	f5 e0       	ldi	r31, 0x05	; 5
    4130:	11 82       	std	Z+1, r1	; 0x01
    4132:	12 82       	std	Z+2, r1	; 0x02
    4134:	ae c0       	rjmp	.+348    	; 0x4292 <nibbleChange+0x354>
    4136:	d0 e0       	ldi	r29, 0x00	; 0
    4138:	04 ec       	ldi	r16, 0xC4	; 196
    413a:	15 e0       	ldi	r17, 0x05	; 5
    413c:	cc 53       	subi	r28, 0x3C	; 60
    413e:	da 4f       	sbci	r29, 0xFA	; 250
    4140:	88 81       	ld	r24, Y
    4142:	86 0f       	add	r24, r22
    4144:	f3 de       	rcall	.-538    	; 0x3f2c <nibbleCheckOvfl>
    4146:	88 83       	st	Y, r24
    4148:	f8 01       	movw	r30, r16
    414a:	20 81       	ld	r18, Z
    414c:	81 81       	ldd	r24, Z+1	; 0x01
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	ac 01       	movw	r20, r24
    4152:	44 0f       	add	r20, r20
    4154:	55 1f       	adc	r21, r21
    4156:	88 0f       	add	r24, r24
    4158:	99 1f       	adc	r25, r25
    415a:	88 0f       	add	r24, r24
    415c:	99 1f       	adc	r25, r25
    415e:	88 0f       	add	r24, r24
    4160:	99 1f       	adc	r25, r25
    4162:	84 0f       	add	r24, r20
    4164:	95 1f       	adc	r25, r21
    4166:	f4 e6       	ldi	r31, 0x64	; 100
    4168:	2f 9f       	mul	r18, r31
    416a:	80 0d       	add	r24, r0
    416c:	91 1d       	adc	r25, r1
    416e:	11 24       	eor	r1, r1
    4170:	f8 01       	movw	r30, r16
    4172:	22 81       	ldd	r18, Z+2	; 0x02
    4174:	82 0f       	add	r24, r18
    4176:	91 1d       	adc	r25, r1
    4178:	8f 3f       	cpi	r24, 0xFF	; 255
    417a:	91 05       	cpc	r25, r1
    417c:	09 f0       	breq	.+2      	; 0x4180 <nibbleChange+0x242>
    417e:	0c f4       	brge	.+2      	; 0x4182 <nibbleChange+0x244>
    4180:	88 c0       	rjmp	.+272    	; 0x4292 <nibbleChange+0x354>
    4182:	82 e0       	ldi	r24, 0x02	; 2
    4184:	80 83       	st	Z, r24
    4186:	85 e0       	ldi	r24, 0x05	; 5
    4188:	81 83       	std	Z+1, r24	; 0x01
    418a:	82 83       	std	Z+2, r24	; 0x02
    418c:	82 c0       	rjmp	.+260    	; 0x4292 <nibbleChange+0x354>
    418e:	22 23       	and	r18, r18
    4190:	a1 f0       	breq	.+40     	; 0x41ba <nibbleChange+0x27c>
    4192:	d0 e0       	ldi	r29, 0x00	; 0
    4194:	fe 01       	movw	r30, r28
    4196:	ec 53       	subi	r30, 0x3C	; 60
    4198:	fa 4f       	sbci	r31, 0xFA	; 250
    419a:	80 81       	ld	r24, Z
    419c:	68 0f       	add	r22, r24
    419e:	60 83       	st	Z, r22
    41a0:	64 30       	cpi	r22, 0x04	; 4
    41a2:	19 f4       	brne	.+6      	; 0x41aa <nibbleChange+0x26c>
    41a4:	8f ef       	ldi	r24, 0xFF	; 255
    41a6:	80 83       	st	Z, r24
    41a8:	74 c0       	rjmp	.+232    	; 0x4292 <nibbleChange+0x354>
    41aa:	6e 3f       	cpi	r22, 0xFE	; 254
    41ac:	09 f0       	breq	.+2      	; 0x41b0 <nibbleChange+0x272>
    41ae:	71 c0       	rjmp	.+226    	; 0x4292 <nibbleChange+0x354>
    41b0:	cc 53       	subi	r28, 0x3C	; 60
    41b2:	da 4f       	sbci	r29, 0xFA	; 250
    41b4:	83 e0       	ldi	r24, 0x03	; 3
    41b6:	88 83       	st	Y, r24
    41b8:	6c c0       	rjmp	.+216    	; 0x4292 <nibbleChange+0x354>
    41ba:	d0 e0       	ldi	r29, 0x00	; 0
    41bc:	fe 01       	movw	r30, r28
    41be:	ec 53       	subi	r30, 0x3C	; 60
    41c0:	fa 4f       	sbci	r31, 0xFA	; 250
    41c2:	80 81       	ld	r24, Z
    41c4:	81 11       	cpse	r24, r1
    41c6:	05 c0       	rjmp	.+10     	; 0x41d2 <nibbleChange+0x294>
    41c8:	6f 3f       	cpi	r22, 0xFF	; 255
    41ca:	19 f4       	brne	.+6      	; 0x41d2 <nibbleChange+0x294>
    41cc:	83 e0       	ldi	r24, 0x03	; 3
    41ce:	80 83       	st	Z, r24
    41d0:	60 c0       	rjmp	.+192    	; 0x4292 <nibbleChange+0x354>
    41d2:	83 30       	cpi	r24, 0x03	; 3
    41d4:	31 f4       	brne	.+12     	; 0x41e2 <nibbleChange+0x2a4>
    41d6:	61 30       	cpi	r22, 0x01	; 1
    41d8:	21 f4       	brne	.+8      	; 0x41e2 <nibbleChange+0x2a4>
    41da:	cc 53       	subi	r28, 0x3C	; 60
    41dc:	da 4f       	sbci	r29, 0xFA	; 250
    41de:	18 82       	st	Y, r1
    41e0:	58 c0       	rjmp	.+176    	; 0x4292 <nibbleChange+0x354>
    41e2:	cc 53       	subi	r28, 0x3C	; 60
    41e4:	da 4f       	sbci	r29, 0xFA	; 250
    41e6:	68 0f       	add	r22, r24
    41e8:	68 83       	st	Y, r22
    41ea:	53 c0       	rjmp	.+166    	; 0x4292 <nibbleChange+0x354>
    41ec:	d0 e0       	ldi	r29, 0x00	; 0
    41ee:	cc 53       	subi	r28, 0x3C	; 60
    41f0:	da 4f       	sbci	r29, 0xFA	; 250
    41f2:	88 81       	ld	r24, Y
    41f4:	68 0f       	add	r22, r24
    41f6:	63 70       	andi	r22, 0x03	; 3
    41f8:	68 83       	st	Y, r22
    41fa:	4b c0       	rjmp	.+150    	; 0x4292 <nibbleChange+0x354>
    41fc:	e4 ec       	ldi	r30, 0xC4	; 196
    41fe:	f5 e0       	ldi	r31, 0x05	; 5
    4200:	80 81       	ld	r24, Z
    4202:	80 95       	com	r24
    4204:	80 83       	st	Z, r24
    4206:	45 c0       	rjmp	.+138    	; 0x4292 <nibbleChange+0x354>
    4208:	d0 e0       	ldi	r29, 0x00	; 0
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	61 fd       	sbrc	r22, 1
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	cc 53       	subi	r28, 0x3C	; 60
    4212:	da 4f       	sbci	r29, 0xFA	; 250
    4214:	88 83       	st	Y, r24
    4216:	3d c0       	rjmp	.+122    	; 0x4292 <nibbleChange+0x354>
    4218:	61 30       	cpi	r22, 0x01	; 1
    421a:	41 f4       	brne	.+16     	; 0x422c <nibbleChange+0x2ee>
    421c:	d0 e0       	ldi	r29, 0x00	; 0
    421e:	cc 53       	subi	r28, 0x3C	; 60
    4220:	da 4f       	sbci	r29, 0xFA	; 250
    4222:	88 81       	ld	r24, Y
    4224:	87 70       	andi	r24, 0x07	; 7
    4226:	8f 5f       	subi	r24, 0xFF	; 255
    4228:	88 83       	st	Y, r24
    422a:	33 c0       	rjmp	.+102    	; 0x4292 <nibbleChange+0x354>
    422c:	ec 2f       	mov	r30, r28
    422e:	f0 e0       	ldi	r31, 0x00	; 0
    4230:	ec 53       	subi	r30, 0x3C	; 60
    4232:	fa 4f       	sbci	r31, 0xFA	; 250
    4234:	80 81       	ld	r24, Z
    4236:	82 50       	subi	r24, 0x02	; 2
    4238:	87 70       	andi	r24, 0x07	; 7
    423a:	8f 5f       	subi	r24, 0xFF	; 255
    423c:	80 83       	st	Z, r24
    423e:	29 c0       	rjmp	.+82     	; 0x4292 <nibbleChange+0x354>
    4240:	e4 ec       	ldi	r30, 0xC4	; 196
    4242:	f5 e0       	ldi	r31, 0x05	; 5
    4244:	90 81       	ld	r25, Z
    4246:	81 81       	ldd	r24, Z+1	; 0x01
    4248:	99 0f       	add	r25, r25
    424a:	29 2f       	mov	r18, r25
    424c:	22 0f       	add	r18, r18
    424e:	22 0f       	add	r18, r18
    4250:	92 0f       	add	r25, r18
    4252:	89 0f       	add	r24, r25
    4254:	c1 11       	cpse	r28, r1
    4256:	07 c0       	rjmp	.+14     	; 0x4266 <nibbleChange+0x328>
    4258:	66 0f       	add	r22, r22
    425a:	96 2f       	mov	r25, r22
    425c:	99 0f       	add	r25, r25
    425e:	99 0f       	add	r25, r25
    4260:	69 0f       	add	r22, r25
    4262:	68 0f       	add	r22, r24
    4264:	01 c0       	rjmp	.+2      	; 0x4268 <nibbleChange+0x32a>
    4266:	68 0f       	add	r22, r24
    4268:	66 23       	and	r22, r22
    426a:	1c f0       	brlt	.+6      	; 0x4272 <nibbleChange+0x334>
    426c:	61 34       	cpi	r22, 0x41	; 65
    426e:	1c f4       	brge	.+6      	; 0x4276 <nibbleChange+0x338>
    4270:	03 c0       	rjmp	.+6      	; 0x4278 <nibbleChange+0x33a>
    4272:	60 e0       	ldi	r22, 0x00	; 0
    4274:	01 c0       	rjmp	.+2      	; 0x4278 <nibbleChange+0x33a>
    4276:	60 e0       	ldi	r22, 0x00	; 0
    4278:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <nibble>
    427c:	06 c0       	rjmp	.+12     	; 0x428a <nibbleChange+0x34c>
    427e:	e4 ec       	ldi	r30, 0xC4	; 196
    4280:	f5 e0       	ldi	r31, 0x05	; 5
    4282:	80 81       	ld	r24, Z
    4284:	8f 5f       	subi	r24, 0xFF	; 255
    4286:	80 83       	st	Z, r24
    4288:	6a 50       	subi	r22, 0x0A	; 10
    428a:	6a 30       	cpi	r22, 0x0A	; 10
    428c:	c4 f7       	brge	.-16     	; 0x427e <nibbleChange+0x340>
    428e:	60 93 c5 05 	sts	0x05C5, r22	; 0x8005c5 <nibble+0x1>
    4292:	df 91       	pop	r29
    4294:	cf 91       	pop	r28
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	08 95       	ret

0000429c <nibbleToData>:
    429c:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <dataType>
    42a0:	8e 2f       	mov	r24, r30
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	fc 01       	movw	r30, r24
    42a6:	32 97       	sbiw	r30, 0x02	; 2
    42a8:	ed 30       	cpi	r30, 0x0D	; 13
    42aa:	f1 05       	cpc	r31, r1
    42ac:	08 f0       	brcs	.+2      	; 0x42b0 <nibbleToData+0x14>
    42ae:	da c0       	rjmp	.+436    	; 0x4464 <nibbleToData+0x1c8>
    42b0:	88 27       	eor	r24, r24
    42b2:	e7 56       	subi	r30, 0x67	; 103
    42b4:	ff 4f       	sbci	r31, 0xFF	; 255
    42b6:	8f 4f       	sbci	r24, 0xFF	; 255
    42b8:	0c 94 93 39 	jmp	0x7326	; 0x7326 <__tablejump2__>
    42bc:	e4 ec       	ldi	r30, 0xC4	; 196
    42be:	f5 e0       	ldi	r31, 0x05	; 5
    42c0:	80 81       	ld	r24, Z
    42c2:	20 e1       	ldi	r18, 0x10	; 16
    42c4:	82 9f       	mul	r24, r18
    42c6:	c0 01       	movw	r24, r0
    42c8:	11 24       	eor	r1, r1
    42ca:	91 81       	ldd	r25, Z+1	; 0x01
    42cc:	9f 70       	andi	r25, 0x0F	; 15
    42ce:	89 2b       	or	r24, r25
    42d0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    42d4:	08 95       	ret
    42d6:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    42da:	8f ef       	ldi	r24, 0xFF	; 255
    42dc:	89 0f       	add	r24, r25
    42de:	80 31       	cpi	r24, 0x10	; 16
    42e0:	18 f0       	brcs	.+6      	; 0x42e8 <nibbleToData+0x4c>
    42e2:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    42e6:	08 95       	ret
    42e8:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    42ec:	08 95       	ret
    42ee:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <nibble>
    42f2:	9f 3f       	cpi	r25, 0xFF	; 255
    42f4:	21 f0       	breq	.+8      	; 0x42fe <nibbleToData+0x62>
    42f6:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <nibble+0x1>
    42fa:	8f 3f       	cpi	r24, 0xFF	; 255
    42fc:	21 f4       	brne	.+8      	; 0x4306 <nibbleToData+0x6a>
    42fe:	8f ef       	ldi	r24, 0xFF	; 255
    4300:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4304:	08 95       	ret
    4306:	28 2f       	mov	r18, r24
    4308:	22 0f       	add	r18, r18
    430a:	82 0f       	add	r24, r18
    430c:	88 0f       	add	r24, r24
    430e:	88 0f       	add	r24, r24
    4310:	89 0f       	add	r24, r25
    4312:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4316:	08 95       	ret
    4318:	e4 ec       	ldi	r30, 0xC4	; 196
    431a:	f5 e0       	ldi	r31, 0x05	; 5
    431c:	80 81       	ld	r24, Z
    431e:	30 e2       	ldi	r19, 0x20	; 32
    4320:	83 9f       	mul	r24, r19
    4322:	c0 01       	movw	r24, r0
    4324:	11 24       	eor	r1, r1
    4326:	21 81       	ldd	r18, Z+1	; 0x01
    4328:	32 81       	ldd	r19, Z+2	; 0x02
    432a:	22 0f       	add	r18, r18
    432c:	42 2f       	mov	r20, r18
    432e:	44 0f       	add	r20, r20
    4330:	44 0f       	add	r20, r20
    4332:	24 0f       	add	r18, r20
    4334:	23 0f       	add	r18, r19
    4336:	20 32       	cpi	r18, 0x20	; 32
    4338:	20 f0       	brcs	.+8      	; 0x4342 <nibbleToData+0xa6>
    433a:	8f 61       	ori	r24, 0x1F	; 31
    433c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4340:	08 95       	ret
    4342:	82 2b       	or	r24, r18
    4344:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4348:	08 95       	ret
    434a:	e4 ec       	ldi	r30, 0xC4	; 196
    434c:	f5 e0       	ldi	r31, 0x05	; 5
    434e:	20 81       	ld	r18, Z
    4350:	81 81       	ldd	r24, Z+1	; 0x01
    4352:	90 e0       	ldi	r25, 0x00	; 0
    4354:	ac 01       	movw	r20, r24
    4356:	44 0f       	add	r20, r20
    4358:	55 1f       	adc	r21, r21
    435a:	88 0f       	add	r24, r24
    435c:	99 1f       	adc	r25, r25
    435e:	88 0f       	add	r24, r24
    4360:	99 1f       	adc	r25, r25
    4362:	88 0f       	add	r24, r24
    4364:	99 1f       	adc	r25, r25
    4366:	84 0f       	add	r24, r20
    4368:	95 1f       	adc	r25, r21
    436a:	34 e6       	ldi	r19, 0x64	; 100
    436c:	23 9f       	mul	r18, r19
    436e:	80 0d       	add	r24, r0
    4370:	91 1d       	adc	r25, r1
    4372:	11 24       	eor	r1, r1
    4374:	22 81       	ldd	r18, Z+2	; 0x02
    4376:	82 0f       	add	r24, r18
    4378:	91 1d       	adc	r25, r1
    437a:	8f 3f       	cpi	r24, 0xFF	; 255
    437c:	91 05       	cpc	r25, r1
    437e:	29 f0       	breq	.+10     	; 0x438a <nibbleToData+0xee>
    4380:	20 f0       	brcs	.+8      	; 0x438a <nibbleToData+0xee>
    4382:	8f ef       	ldi	r24, 0xFF	; 255
    4384:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4388:	08 95       	ret
    438a:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    438e:	08 95       	ret
    4390:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    4394:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4398:	84 30       	cpi	r24, 0x04	; 4
    439a:	08 f4       	brcc	.+2      	; 0x439e <nibbleToData+0x102>
    439c:	63 c0       	rjmp	.+198    	; 0x4464 <nibbleToData+0x1c8>
    439e:	8f ef       	ldi	r24, 0xFF	; 255
    43a0:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    43a4:	08 95       	ret
    43a6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43aa:	83 70       	andi	r24, 0x03	; 3
    43ac:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    43b0:	08 95       	ret
    43b2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <nibble>
    43b6:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    43ba:	08 95       	ret
    43bc:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <dataEntry>
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	0c c0       	rjmp	.+24     	; 0x43dc <nibbleToData+0x140>
    43c4:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <dataEntry>
    43c8:	99 0f       	add	r25, r25
    43ca:	e8 2f       	mov	r30, r24
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	ec 53       	subi	r30, 0x3C	; 60
    43d0:	fa 4f       	sbci	r31, 0xFA	; 250
    43d2:	20 81       	ld	r18, Z
    43d4:	92 0f       	add	r25, r18
    43d6:	90 93 b9 05 	sts	0x05B9, r25	; 0x8005b9 <dataEntry>
    43da:	8f 5f       	subi	r24, 0xFF	; 255
    43dc:	88 30       	cpi	r24, 0x08	; 8
    43de:	90 f3       	brcs	.-28     	; 0x43c4 <nibbleToData+0x128>
    43e0:	08 95       	ret
    43e2:	10 92 a2 05 	sts	0x05A2, r1	; 0x8005a2 <dataEntry32>
    43e6:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <dataEntry32+0x1>
    43ea:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <dataEntry32+0x2>
    43ee:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <dataEntry32+0x3>
    43f2:	a2 ea       	ldi	r26, 0xA2	; 162
    43f4:	b5 e0       	ldi	r27, 0x05	; 5
    43f6:	88 e0       	ldi	r24, 0x08	; 8
    43f8:	10 c0       	rjmp	.+32     	; 0x441a <nibbleToData+0x17e>
    43fa:	82 50       	subi	r24, 0x02	; 2
    43fc:	f0 e0       	ldi	r31, 0x00	; 0
    43fe:	ec 53       	subi	r30, 0x3C	; 60
    4400:	fa 4f       	sbci	r31, 0xFA	; 250
    4402:	90 81       	ld	r25, Z
    4404:	e8 2f       	mov	r30, r24
    4406:	f0 e0       	ldi	r31, 0x00	; 0
    4408:	ec 53       	subi	r30, 0x3C	; 60
    440a:	fa 4f       	sbci	r31, 0xFA	; 250
    440c:	20 81       	ld	r18, Z
    440e:	30 e1       	ldi	r19, 0x10	; 16
    4410:	23 9f       	mul	r18, r19
    4412:	90 0d       	add	r25, r0
    4414:	11 24       	eor	r1, r1
    4416:	9c 93       	st	X, r25
    4418:	11 96       	adiw	r26, 0x01	; 1
    441a:	ef ef       	ldi	r30, 0xFF	; 255
    441c:	e8 0f       	add	r30, r24
    441e:	81 11       	cpse	r24, r1
    4420:	ec cf       	rjmp	.-40     	; 0x43fa <nibbleToData+0x15e>
    4422:	08 95       	ret
    4424:	e4 ec       	ldi	r30, 0xC4	; 196
    4426:	f5 e0       	ldi	r31, 0x05	; 5
    4428:	20 81       	ld	r18, Z
    442a:	91 81       	ldd	r25, Z+1	; 0x01
    442c:	89 2f       	mov	r24, r25
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	01 97       	sbiw	r24, 0x01	; 1
    4432:	88 0f       	add	r24, r24
    4434:	99 1f       	adc	r25, r25
    4436:	88 0f       	add	r24, r24
    4438:	99 1f       	adc	r25, r25
    443a:	88 0f       	add	r24, r24
    443c:	99 1f       	adc	r25, r25
    443e:	9f ef       	ldi	r25, 0xFF	; 255
    4440:	92 0f       	add	r25, r18
    4442:	89 2b       	or	r24, r25
    4444:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4448:	08 95       	ret
    444a:	e4 ec       	ldi	r30, 0xC4	; 196
    444c:	f5 e0       	ldi	r31, 0x05	; 5
    444e:	80 81       	ld	r24, Z
    4450:	91 81       	ldd	r25, Z+1	; 0x01
    4452:	88 0f       	add	r24, r24
    4454:	28 2f       	mov	r18, r24
    4456:	22 0f       	add	r18, r18
    4458:	22 0f       	add	r18, r18
    445a:	82 0f       	add	r24, r18
    445c:	89 0f       	add	r24, r25
    445e:	81 50       	subi	r24, 0x01	; 1
    4460:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4464:	08 95       	ret

00004466 <menuTextOut>:
    4466:	0f 93       	push	r16
    4468:	1f 93       	push	r17
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
    446e:	8c 01       	movw	r16, r24
    4470:	d6 2f       	mov	r29, r22
    4472:	c0 e0       	ldi	r28, 0x00	; 0
    4474:	0c c0       	rjmp	.+24     	; 0x448e <menuTextOut+0x28>
    4476:	f8 01       	movw	r30, r16
    4478:	84 91       	lpm	r24, Z
    447a:	88 23       	and	r24, r24
    447c:	19 f0       	breq	.+6      	; 0x4484 <menuTextOut+0x1e>
    447e:	0f 5f       	subi	r16, 0xFF	; 255
    4480:	1f 4f       	sbci	r17, 0xFF	; 255
    4482:	02 c0       	rjmp	.+4      	; 0x4488 <menuTextOut+0x22>
    4484:	8d 2f       	mov	r24, r29
    4486:	d0 e2       	ldi	r29, 0x20	; 32
    4488:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    448c:	cf 5f       	subi	r28, 0xFF	; 255
    448e:	ca 30       	cpi	r28, 0x0A	; 10
    4490:	90 f3       	brcs	.-28     	; 0x4476 <menuTextOut+0x10>
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	0f 91       	pop	r16
    449a:	08 95       	ret

0000449c <menuParentMenuToLCD>:
    449c:	80 e4       	ldi	r24, 0x40	; 64
    449e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    44a2:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    44a6:	e1 11       	cpse	r30, r1
    44a8:	07 c0       	rjmp	.+14     	; 0x44b8 <menuParentMenuToLCD+0x1c>
    44aa:	6a e3       	ldi	r22, 0x3A	; 58
    44ac:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <pMenuTopTitle>
    44b0:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <pMenuTopTitle+0x1>
    44b4:	d8 cf       	rjmp	.-80     	; 0x4466 <menuTextOut>
    44b6:	08 95       	ret
    44b8:	f0 e0       	ldi	r31, 0x00	; 0
    44ba:	31 97       	sbiw	r30, 0x01	; 1
    44bc:	ee 0f       	add	r30, r30
    44be:	ff 1f       	adc	r31, r31
    44c0:	e5 58       	subi	r30, 0x85	; 133
    44c2:	fa 4f       	sbci	r31, 0xFA	; 250
    44c4:	80 81       	ld	r24, Z
    44c6:	91 81       	ldd	r25, Z+1	; 0x01
    44c8:	6a e3       	ldi	r22, 0x3A	; 58
    44ca:	02 96       	adiw	r24, 0x02	; 2
    44cc:	cc cf       	rjmp	.-104    	; 0x4466 <menuTextOut>
    44ce:	08 95       	ret

000044d0 <menuDisplayValue>:
    44d0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    44d4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    44d8:	84 91       	lpm	r24, Z
    44da:	8f 73       	andi	r24, 0x3F	; 63
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	02 97       	sbiw	r24, 0x02	; 2
    44e0:	1c f0       	brlt	.+6      	; 0x44e8 <menuDisplayValue+0x18>
    44e2:	c8 da       	rcall	.-2672   	; 0x3a74 <dataToNibbles>
    44e4:	ba db       	rcall	.-2188   	; 0x3c5a <nibbleToLCDstring>
    44e6:	07 cd       	rjmp	.-1522   	; 0x3ef6 <LCDStringOut>
    44e8:	08 95       	ret

000044ea <menuCursorSetDataNibble>:
    44ea:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    44ee:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    44f2:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    44f6:	e8 0f       	add	r30, r24
    44f8:	f1 1d       	adc	r31, r1
    44fa:	31 96       	adiw	r30, 0x01	; 1
    44fc:	84 91       	lpm	r24, Z
    44fe:	82 5e       	subi	r24, 0xE2	; 226
    4500:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    4504:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    450e:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4512:	84 91       	lpm	r24, Z
    4514:	90 e0       	ldi	r25, 0x00	; 0
    4516:	01 97       	sbiw	r24, 0x01	; 1
    4518:	28 17       	cp	r18, r24
    451a:	39 07       	cpc	r19, r25
    451c:	14 f4       	brge	.+4      	; 0x4522 <menuCursorSetDataNibble+0x38>
    451e:	68 da       	rcall	.-2864   	; 0x39f0 <softkeyRight>
    4520:	03 c0       	rjmp	.+6      	; 0x4528 <menuCursorSetDataNibble+0x3e>
    4522:	83 e0       	ldi	r24, 0x03	; 3
    4524:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4528:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    452c:	88 23       	and	r24, r24
    452e:	11 f0       	breq	.+4      	; 0x4534 <menuCursorSetDataNibble+0x4a>
    4530:	59 da       	rcall	.-2894   	; 0x39e4 <softkeyLeft>
    4532:	03 c0       	rjmp	.+6      	; 0x453a <menuCursorSetDataNibble+0x50>
    4534:	82 e0       	ldi	r24, 0x02	; 2
    4536:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    453a:	78 da       	rcall	.-2832   	; 0x3a2c <softkeyPlus>
    453c:	89 da       	rcall	.-2798   	; 0x3a50 <softkeyMinus>
    453e:	0c 94 30 39 	jmp	0x7260	; 0x7260 <keylabel_toLCD>
    4542:	08 95       	ret

00004544 <menuCursorSetExtra>:
    4544:	84 e1       	ldi	r24, 0x14	; 20
    4546:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <lcd_goto>
    454a:	08 95       	ret

0000454c <menuOnEnterStatusMidiIn>:
    454c:	0f 93       	push	r16
    454e:	1f 93       	push	r17
    4550:	cf 93       	push	r28
    4552:	f8 df       	rcall	.-16     	; 0x4544 <menuCursorSetExtra>
    4554:	8a ec       	ldi	r24, 0xCA	; 202
    4556:	93 e0       	ldi	r25, 0x03	; 3
    4558:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    455c:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <midiRxBytesCount>
    4560:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <midiRxBytesCount+0x1>
    4564:	0e 94 19 38 	call	0x7032	; 0x7032 <lcd_wordout>
    4568:	8d e2       	ldi	r24, 0x2D	; 45
    456a:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    456e:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <midiRxBytesCount>
    4572:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <midiRxBytesCount+0x1>
    4576:	04 97       	sbiw	r24, 0x04	; 4
    4578:	30 f4       	brcc	.+12     	; 0x4586 <menuOnEnterStatusMidiIn+0x3a>
    457a:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <midiRxBytesCount>
    457e:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <midiRxBytesCount+0x1>
    4582:	c8 2f       	mov	r28, r24
    4584:	01 c0       	rjmp	.+2      	; 0x4588 <menuOnEnterStatusMidiIn+0x3c>
    4586:	c4 e0       	ldi	r28, 0x04	; 4
    4588:	00 91 61 15 	lds	r16, 0x1561	; 0x801561 <midiRxInIndex>
    458c:	10 e0       	ldi	r17, 0x00	; 0
    458e:	02 5c       	subi	r16, 0xC2	; 194
    4590:	1b 4e       	sbci	r17, 0xEB	; 235
    4592:	13 c0       	rjmp	.+38     	; 0x45ba <menuOnEnterStatusMidiIn+0x6e>
    4594:	84 e1       	ldi	r24, 0x14	; 20
    4596:	0f 33       	cpi	r16, 0x3F	; 63
    4598:	18 07       	cpc	r17, r24
    459a:	10 f0       	brcs	.+4      	; 0x45a0 <menuOnEnterStatusMidiIn+0x54>
    459c:	f8 01       	movw	r30, r16
    459e:	02 c0       	rjmp	.+4      	; 0x45a4 <menuOnEnterStatusMidiIn+0x58>
    45a0:	ee e5       	ldi	r30, 0x5E	; 94
    45a2:	f4 e1       	ldi	r31, 0x14	; 20
    45a4:	8f 01       	movw	r16, r30
    45a6:	01 50       	subi	r16, 0x01	; 1
    45a8:	11 09       	sbc	r17, r1
    45aa:	80 81       	ld	r24, Z
    45ac:	0e 94 9e 36 	call	0x6d3c	; 0x6d3c <lcd_hexout>
    45b0:	c1 50       	subi	r28, 0x01	; 1
    45b2:	19 f0       	breq	.+6      	; 0x45ba <menuOnEnterStatusMidiIn+0x6e>
    45b4:	80 e2       	ldi	r24, 0x20	; 32
    45b6:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    45ba:	c1 11       	cpse	r28, r1
    45bc:	eb cf       	rjmp	.-42     	; 0x4594 <menuOnEnterStatusMidiIn+0x48>
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	cf 91       	pop	r28
    45c2:	1f 91       	pop	r17
    45c4:	0f 91       	pop	r16
    45c6:	08 95       	ret

000045c8 <menuOnEnterStatusMidiOut>:
    45c8:	0f 93       	push	r16
    45ca:	1f 93       	push	r17
    45cc:	cf 93       	push	r28
    45ce:	ba df       	rcall	.-140    	; 0x4544 <menuCursorSetExtra>
    45d0:	85 ec       	ldi	r24, 0xC5	; 197
    45d2:	93 e0       	ldi	r25, 0x03	; 3
    45d4:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    45d8:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <midiTxBytesCount>
    45dc:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <midiTxBytesCount+0x1>
    45e0:	0e 94 19 38 	call	0x7032	; 0x7032 <lcd_wordout>
    45e4:	8d e2       	ldi	r24, 0x2D	; 45
    45e6:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    45ea:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <midiTxBytesCount>
    45ee:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <midiTxBytesCount+0x1>
    45f2:	04 97       	sbiw	r24, 0x04	; 4
    45f4:	30 f4       	brcc	.+12     	; 0x4602 <menuOnEnterStatusMidiOut+0x3a>
    45f6:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <midiTxBytesCount>
    45fa:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <midiTxBytesCount+0x1>
    45fe:	c8 2f       	mov	r28, r24
    4600:	01 c0       	rjmp	.+2      	; 0x4604 <menuOnEnterStatusMidiOut+0x3c>
    4602:	c4 e0       	ldi	r28, 0x04	; 4
    4604:	00 91 ed 13 	lds	r16, 0x13ED	; 0x8013ed <midiTxInIndex>
    4608:	10 e0       	ldi	r17, 0x00	; 0
    460a:	02 5a       	subi	r16, 0xA2	; 162
    460c:	1b 4e       	sbci	r17, 0xEB	; 235
    460e:	13 c0       	rjmp	.+38     	; 0x4636 <menuOnEnterStatusMidiOut+0x6e>
    4610:	84 e1       	ldi	r24, 0x14	; 20
    4612:	0f 35       	cpi	r16, 0x5F	; 95
    4614:	18 07       	cpc	r17, r24
    4616:	10 f0       	brcs	.+4      	; 0x461c <menuOnEnterStatusMidiOut+0x54>
    4618:	f8 01       	movw	r30, r16
    461a:	02 c0       	rjmp	.+4      	; 0x4620 <menuOnEnterStatusMidiOut+0x58>
    461c:	ee e5       	ldi	r30, 0x5E	; 94
    461e:	f5 e1       	ldi	r31, 0x15	; 21
    4620:	8f 01       	movw	r16, r30
    4622:	01 50       	subi	r16, 0x01	; 1
    4624:	11 09       	sbc	r17, r1
    4626:	80 81       	ld	r24, Z
    4628:	0e 94 9e 36 	call	0x6d3c	; 0x6d3c <lcd_hexout>
    462c:	c1 50       	subi	r28, 0x01	; 1
    462e:	19 f0       	breq	.+6      	; 0x4636 <menuOnEnterStatusMidiOut+0x6e>
    4630:	80 e2       	ldi	r24, 0x20	; 32
    4632:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    4636:	c1 11       	cpse	r28, r1
    4638:	eb cf       	rjmp	.-42     	; 0x4610 <menuOnEnterStatusMidiOut+0x48>
    463a:	80 e0       	ldi	r24, 0x00	; 0
    463c:	cf 91       	pop	r28
    463e:	1f 91       	pop	r17
    4640:	0f 91       	pop	r16
    4642:	08 95       	ret

00004644 <menuOnEnterLogDisp>:
    4644:	0f 93       	push	r16
    4646:	1f 93       	push	r17
    4648:	cf 93       	push	r28
    464a:	8f 3f       	cpi	r24, 0xFF	; 255
    464c:	a9 f4       	brne	.+42     	; 0x4678 <menuOnEnterLogDisp+0x34>
    464e:	0e 94 07 13 	call	0x260e	; 0x260e <log_count>
    4652:	81 50       	subi	r24, 0x01	; 1
    4654:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2995>
    4658:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <showText.2996>
    465c:	6b eb       	ldi	r22, 0xBB	; 187
    465e:	71 e1       	ldi	r23, 0x11	; 17
    4660:	80 e0       	ldi	r24, 0x00	; 0
    4662:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    4666:	65 eb       	ldi	r22, 0xB5	; 181
    4668:	71 e1       	ldi	r23, 0x11	; 17
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    4670:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
    4674:	cf ef       	ldi	r28, 0xFF	; 255
    4676:	2f c0       	rjmp	.+94     	; 0x46d6 <menuOnEnterLogDisp+0x92>
    4678:	84 30       	cpi	r24, 0x04	; 4
    467a:	49 f4       	brne	.+18     	; 0x468e <menuOnEnterLogDisp+0x4a>
    467c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    4680:	88 23       	and	r24, r24
    4682:	21 f1       	breq	.+72     	; 0x46cc <menuOnEnterLogDisp+0x88>
    4684:	81 50       	subi	r24, 0x01	; 1
    4686:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2995>
    468a:	cf ef       	ldi	r28, 0xFF	; 255
    468c:	24 c0       	rjmp	.+72     	; 0x46d6 <menuOnEnterLogDisp+0x92>
    468e:	81 30       	cpi	r24, 0x01	; 1
    4690:	91 f4       	brne	.+36     	; 0x46b6 <menuOnEnterLogDisp+0x72>
    4692:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2995>
    4696:	10 e0       	ldi	r17, 0x00	; 0
    4698:	0f 5f       	subi	r16, 0xFF	; 255
    469a:	1f 4f       	sbci	r17, 0xFF	; 255
    469c:	0e 94 07 13 	call	0x260e	; 0x260e <log_count>
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	08 17       	cp	r16, r24
    46a4:	19 07       	cpc	r17, r25
    46a6:	a4 f4       	brge	.+40     	; 0x46d0 <menuOnEnterLogDisp+0x8c>
    46a8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    46ac:	8f 5f       	subi	r24, 0xFF	; 255
    46ae:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <logEntryNr.2995>
    46b2:	cf ef       	ldi	r28, 0xFF	; 255
    46b4:	10 c0       	rjmp	.+32     	; 0x46d6 <menuOnEnterLogDisp+0x92>
    46b6:	83 30       	cpi	r24, 0x03	; 3
    46b8:	11 f0       	breq	.+4      	; 0x46be <menuOnEnterLogDisp+0x7a>
    46ba:	85 30       	cpi	r24, 0x05	; 5
    46bc:	59 f4       	brne	.+22     	; 0x46d4 <menuOnEnterLogDisp+0x90>
    46be:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2996>
    46c2:	80 95       	com	r24
    46c4:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <showText.2996>
    46c8:	cf ef       	ldi	r28, 0xFF	; 255
    46ca:	05 c0       	rjmp	.+10     	; 0x46d6 <menuOnEnterLogDisp+0x92>
    46cc:	cf ef       	ldi	r28, 0xFF	; 255
    46ce:	03 c0       	rjmp	.+6      	; 0x46d6 <menuOnEnterLogDisp+0x92>
    46d0:	cf ef       	ldi	r28, 0xFF	; 255
    46d2:	01 c0       	rjmp	.+2      	; 0x46d6 <menuOnEnterLogDisp+0x92>
    46d4:	c0 e0       	ldi	r28, 0x00	; 0
    46d6:	cf 3f       	cpi	r28, 0xFF	; 255
    46d8:	09 f0       	breq	.+2      	; 0x46dc <menuOnEnterLogDisp+0x98>
    46da:	54 c0       	rjmp	.+168    	; 0x4784 <menuOnEnterLogDisp+0x140>
    46dc:	33 df       	rcall	.-410    	; 0x4544 <menuCursorSetExtra>
    46de:	0e 94 07 13 	call	0x260e	; 0x260e <log_count>
    46e2:	81 11       	cpse	r24, r1
    46e4:	06 c0       	rjmp	.+12     	; 0x46f2 <menuOnEnterLogDisp+0xae>
    46e6:	85 e7       	ldi	r24, 0x75	; 117
    46e8:	93 e0       	ldi	r25, 0x03	; 3
    46ea:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    46ee:	c0 e0       	ldi	r28, 0x00	; 0
    46f0:	1d c0       	rjmp	.+58     	; 0x472c <menuOnEnterLogDisp+0xe8>
    46f2:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    46f6:	8f 5f       	subi	r24, 0xFF	; 255
    46f8:	0e 94 da 36 	call	0x6db4	; 0x6db4 <lcd_dec2out>
    46fc:	8a e3       	ldi	r24, 0x3A	; 58
    46fe:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    4702:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2996>
    4706:	81 11       	cpse	r24, r1
    4708:	08 c0       	rjmp	.+16     	; 0x471a <menuOnEnterLogDisp+0xd6>
    470a:	60 e2       	ldi	r22, 0x20	; 32
    470c:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    4710:	0e 94 a8 14 	call	0x2950	; 0x2950 <log_getShortTextFromIndex>
    4714:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <lcd_puts>
    4718:	06 c0       	rjmp	.+12     	; 0x4726 <menuOnEnterLogDisp+0xe2>
    471a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    471e:	0e 94 4e 13 	call	0x269c	; 0x269c <log_getErrorText>
    4722:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    4726:	0e 94 a1 38 	call	0x7142	; 0x7142 <lcd_clrEol>
    472a:	0c df       	rcall	.-488    	; 0x4544 <menuCursorSetExtra>
    472c:	61 e0       	ldi	r22, 0x01	; 1
    472e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <showText.2996>
    4732:	8f 3f       	cpi	r24, 0xFF	; 255
    4734:	09 f0       	breq	.+2      	; 0x4738 <menuOnEnterLogDisp+0xf4>
    4736:	60 e0       	ldi	r22, 0x00	; 0
    4738:	81 e0       	ldi	r24, 0x01	; 1
    473a:	0e 94 4f 39 	call	0x729e	; 0x729e <keylabel_statcheck>
    473e:	00 91 0b 02 	lds	r16, 0x020B	; 0x80020b <logEntryNr.2995>
    4742:	10 e0       	ldi	r17, 0x00	; 0
    4744:	0f 5f       	subi	r16, 0xFF	; 255
    4746:	1f 4f       	sbci	r17, 0xFF	; 255
    4748:	0e 94 07 13 	call	0x260e	; 0x260e <log_count>
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	08 17       	cp	r16, r24
    4750:	19 07       	cpc	r17, r25
    4752:	34 f4       	brge	.+12     	; 0x4760 <menuOnEnterLogDisp+0x11c>
    4754:	65 ed       	ldi	r22, 0xD5	; 213
    4756:	71 e1       	ldi	r23, 0x11	; 17
    4758:	83 e0       	ldi	r24, 0x03	; 3
    475a:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    475e:	03 c0       	rjmp	.+6      	; 0x4766 <menuOnEnterLogDisp+0x122>
    4760:	83 e0       	ldi	r24, 0x03	; 3
    4762:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4766:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <logEntryNr.2995>
    476a:	88 23       	and	r24, r24
    476c:	31 f0       	breq	.+12     	; 0x477a <menuOnEnterLogDisp+0x136>
    476e:	63 ed       	ldi	r22, 0xD3	; 211
    4770:	71 e1       	ldi	r23, 0x11	; 17
    4772:	82 e0       	ldi	r24, 0x02	; 2
    4774:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
    4778:	03 c0       	rjmp	.+6      	; 0x4780 <menuOnEnterLogDisp+0x13c>
    477a:	82 e0       	ldi	r24, 0x02	; 2
    477c:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4780:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
    4784:	8c 2f       	mov	r24, r28
    4786:	cf 91       	pop	r28
    4788:	1f 91       	pop	r17
    478a:	0f 91       	pop	r16
    478c:	08 95       	ret

0000478e <menuCursorSetMenu>:
    478e:	8a e4       	ldi	r24, 0x4A	; 74
    4790:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <lcd_goto>
    4794:	08 95       	ret

00004796 <menuClearExtraDisp>:
    4796:	d6 de       	rcall	.-596    	; 0x4544 <menuCursorSetExtra>
    4798:	8a e0       	ldi	r24, 0x0A	; 10
    479a:	0c 94 95 38 	jmp	0x712a	; 0x712a <lcd_blank>
    479e:	08 95       	ret

000047a0 <menu_ClearDataDisp>:
    47a0:	8e e1       	ldi	r24, 0x1E	; 30
    47a2:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    47a6:	8a e0       	ldi	r24, 0x0A	; 10
    47a8:	0c 94 95 38 	jmp	0x712a	; 0x712a <lcd_blank>
    47ac:	08 95       	ret

000047ae <menuClearMenuDisp>:
    47ae:	80 e4       	ldi	r24, 0x40	; 64
    47b0:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    47b4:	8a e0       	ldi	r24, 0x0A	; 10
    47b6:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
    47ba:	e9 df       	rcall	.-46     	; 0x478e <menuCursorSetMenu>
    47bc:	8a e0       	ldi	r24, 0x0A	; 10
    47be:	0c 94 95 38 	jmp	0x712a	; 0x712a <lcd_blank>
    47c2:	08 95       	ret

000047c4 <menu_ClearAllDisp>:
    47c4:	f4 df       	rcall	.-24     	; 0x47ae <menuClearMenuDisp>
    47c6:	ec df       	rcall	.-40     	; 0x47a0 <menu_ClearDataDisp>
    47c8:	e6 cf       	rjmp	.-52     	; 0x4796 <menuClearExtraDisp>
    47ca:	08 95       	ret

000047cc <menuCheckArrowDown>:
    47cc:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    47d0:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    47d4:	84 91       	lpm	r24, Z
    47d6:	8f 73       	andi	r24, 0x3F	; 63
    47d8:	81 30       	cpi	r24, 0x01	; 1
    47da:	11 f4       	brne	.+4      	; 0x47e0 <menuCheckArrowDown+0x14>
    47dc:	0f c9       	rjmp	.-3554   	; 0x39fc <softkeyDown>
    47de:	08 95       	ret
    47e0:	3e 96       	adiw	r30, 0x0e	; 14
    47e2:	05 90       	lpm	r0, Z+
    47e4:	f4 91       	lpm	r31, Z
    47e6:	e0 2d       	mov	r30, r0
    47e8:	30 97       	sbiw	r30, 0x00	; 0
    47ea:	59 f0       	breq	.+22     	; 0x4802 <menuCheckArrowDown+0x36>
    47ec:	89 30       	cpi	r24, 0x09	; 9
    47ee:	39 f4       	brne	.+14     	; 0x47fe <menuCheckArrowDown+0x32>
    47f0:	80 81       	ld	r24, Z
    47f2:	81 11       	cpse	r24, r1
    47f4:	02 c0       	rjmp	.+4      	; 0x47fa <menuCheckArrowDown+0x2e>
    47f6:	08 c9       	rjmp	.-3568   	; 0x3a08 <softkeyOn>
    47f8:	08 95       	ret
    47fa:	0c c9       	rjmp	.-3560   	; 0x3a14 <softkeyOff>
    47fc:	08 95       	ret
    47fe:	fe c8       	rjmp	.-3588   	; 0x39fc <softkeyDown>
    4800:	08 95       	ret
    4802:	81 e0       	ldi	r24, 0x01	; 1
    4804:	0c 94 1c 39 	jmp	0x7238	; 0x7238 <keylabel_clr>
    4808:	08 95       	ret

0000480a <menuCurrMenuToLCD>:
    480a:	cf 93       	push	r28
    480c:	89 e4       	ldi	r24, 0x49	; 73
    480e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    4812:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4816:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    481a:	c4 91       	lpm	r28, Z
    481c:	c0 7c       	andi	r28, 0xC0	; 192
    481e:	c0 38       	cpi	r28, 0x80	; 128
    4820:	39 f4       	brne	.+14     	; 0x4830 <menuCurrMenuToLCD+0x26>
    4822:	80 e2       	ldi	r24, 0x20	; 32
    4824:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    4828:	82 e0       	ldi	r24, 0x02	; 2
    482a:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    482e:	04 c0       	rjmp	.+8      	; 0x4838 <menuCurrMenuToLCD+0x2e>
    4830:	8f e7       	ldi	r24, 0x7F	; 127
    4832:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    4836:	d6 d8       	rcall	.-3668   	; 0x39e4 <softkeyLeft>
    4838:	c0 3c       	cpi	r28, 0xC0	; 192
    483a:	29 f4       	brne	.+10     	; 0x4846 <menuCurrMenuToLCD+0x3c>
    483c:	83 e0       	ldi	r24, 0x03	; 3
    483e:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4842:	c0 e2       	ldi	r28, 0x20	; 32
    4844:	02 c0       	rjmp	.+4      	; 0x484a <menuCurrMenuToLCD+0x40>
    4846:	d4 d8       	rcall	.-3672   	; 0x39f0 <softkeyRight>
    4848:	ce e7       	ldi	r28, 0x7E	; 126
    484a:	ea d8       	rcall	.-3628   	; 0x3a20 <softkeyUp>
    484c:	bf df       	rcall	.-130    	; 0x47cc <menuCheckArrowDown>
    484e:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4852:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4856:	6c 2f       	mov	r22, r28
    4858:	02 96       	adiw	r24, 0x02	; 2
    485a:	05 de       	rcall	.-1014   	; 0x4466 <menuTextOut>
    485c:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
    4860:	96 df       	rcall	.-212    	; 0x478e <menuCursorSetMenu>
    4862:	cf 91       	pop	r28
    4864:	08 95       	ret

00004866 <menuItemChanged>:
    4866:	8f ef       	ldi	r24, 0xFF	; 255
    4868:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <swTimer+0xe>
    486c:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <currentMenu>
    4870:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4874:	fc 01       	movw	r30, r24
    4876:	24 91       	lpm	r18, Z
    4878:	62 2f       	mov	r22, r18
    487a:	6f 73       	andi	r22, 0x3F	; 63
    487c:	62 30       	cpi	r22, 0x02	; 2
    487e:	08 f4       	brcc	.+2      	; 0x4882 <menuItemChanged+0x1c>
    4880:	49 c0       	rjmp	.+146    	; 0x4914 <menuItemChanged+0xae>
    4882:	9c 01       	movw	r18, r24
    4884:	22 5f       	subi	r18, 0xF2	; 242
    4886:	3f 4f       	sbci	r19, 0xFF	; 255
    4888:	f9 01       	movw	r30, r18
    488a:	45 91       	lpm	r20, Z+
    488c:	55 91       	lpm	r21, Z+
    488e:	41 15       	cp	r20, r1
    4890:	51 05       	cpc	r21, r1
    4892:	09 f4       	brne	.+2      	; 0x4896 <menuItemChanged+0x30>
    4894:	3f c0       	rjmp	.+126    	; 0x4914 <menuItemChanged+0xae>
    4896:	e6 2f       	mov	r30, r22
    4898:	f0 e0       	ldi	r31, 0x00	; 0
    489a:	31 97       	sbiw	r30, 0x01	; 1
    489c:	9f 01       	movw	r18, r30
    489e:	22 0f       	add	r18, r18
    48a0:	33 1f       	adc	r19, r19
    48a2:	22 0f       	add	r18, r18
    48a4:	33 1f       	adc	r19, r19
    48a6:	22 0f       	add	r18, r18
    48a8:	33 1f       	adc	r19, r19
    48aa:	e2 0f       	add	r30, r18
    48ac:	f3 1f       	adc	r31, r19
    48ae:	e8 52       	subi	r30, 0x28	; 40
    48b0:	fc 4f       	sbci	r31, 0xFC	; 252
    48b2:	f0 93 7a 05 	sts	0x057A, r31	; 0x80057a <pNibbleInfo+0x1>
    48b6:	e0 93 79 05 	sts	0x0579, r30	; 0x800579 <pNibbleInfo>
    48ba:	24 91       	lpm	r18, Z
    48bc:	20 93 a0 05 	sts	0x05A0, r18	; 0x8005a0 <nibbleCount>
    48c0:	fc 01       	movw	r30, r24
    48c2:	25 91       	lpm	r18, Z+
    48c4:	2f 73       	andi	r18, 0x3F	; 63
    48c6:	20 93 75 05 	sts	0x0575, r18	; 0x800575 <dataType>
    48ca:	24 91       	lpm	r18, Z
    48cc:	22 23       	and	r18, r18
    48ce:	2c f4       	brge	.+10     	; 0x48da <menuItemChanged+0x74>
    48d0:	20 91 b1 05 	lds	r18, 0x05B1	; 0x8005b1 <DataAdressOffset>
    48d4:	30 91 b2 05 	lds	r19, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    48d8:	02 c0       	rjmp	.+4      	; 0x48de <menuItemChanged+0x78>
    48da:	20 e0       	ldi	r18, 0x00	; 0
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	24 0f       	add	r18, r20
    48e0:	35 1f       	adc	r19, r21
    48e2:	fc 01       	movw	r30, r24
    48e4:	84 91       	lpm	r24, Z
    48e6:	8f 73       	andi	r24, 0x3F	; 63
    48e8:	8b 30       	cpi	r24, 0x0B	; 11
    48ea:	71 f4       	brne	.+28     	; 0x4908 <menuItemChanged+0xa2>
    48ec:	f9 01       	movw	r30, r18
    48ee:	80 81       	ld	r24, Z
    48f0:	91 81       	ldd	r25, Z+1	; 0x01
    48f2:	a2 81       	ldd	r26, Z+2	; 0x02
    48f4:	b3 81       	ldd	r27, Z+3	; 0x03
    48f6:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <dataEntry32>
    48fa:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <dataEntry32+0x1>
    48fe:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <dataEntry32+0x2>
    4902:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <dataEntry32+0x3>
    4906:	04 c0       	rjmp	.+8      	; 0x4910 <menuItemChanged+0xaa>
    4908:	f9 01       	movw	r30, r18
    490a:	80 81       	ld	r24, Z
    490c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <dataEntry>
    4910:	df dd       	rcall	.-1090   	; 0x44d0 <menuDisplayValue>
    4912:	07 c0       	rjmp	.+14     	; 0x4922 <menuItemChanged+0xbc>
    4914:	45 df       	rcall	.-374    	; 0x47a0 <menu_ClearDataDisp>
    4916:	88 ed       	ldi	r24, 0xD8	; 216
    4918:	93 e0       	ldi	r25, 0x03	; 3
    491a:	90 93 7a 05 	sts	0x057A, r25	; 0x80057a <pNibbleInfo+0x1>
    491e:	80 93 79 05 	sts	0x0579, r24	; 0x800579 <pNibbleInfo>
    4922:	54 df       	rcall	.-344    	; 0x47cc <menuCheckArrowDown>
    4924:	34 cf       	rjmp	.-408    	; 0x478e <menuCursorSetMenu>
    4926:	08 95       	ret

00004928 <menu_InitLCD>:
    4928:	36 df       	rcall	.-404    	; 0x4796 <menuClearExtraDisp>
    492a:	9d df       	rcall	.-198    	; 0x4866 <menuItemChanged>
    492c:	b7 dd       	rcall	.-1170   	; 0x449c <menuParentMenuToLCD>
    492e:	6d df       	rcall	.-294    	; 0x480a <menuCurrMenuToLCD>
    4930:	0c 94 b8 38 	jmp	0x7170	; 0x7170 <lcd_cursosblink>
    4934:	08 95       	ret

00004936 <menu_ProcessMessage>:
    4936:	cf 93       	push	r28
    4938:	c8 2f       	mov	r28, r24
    493a:	0e 94 b8 38 	call	0x7170	; 0x7170 <lcd_cursosblink>
    493e:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4942:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4946:	84 91       	lpm	r24, Z
    4948:	8f 73       	andi	r24, 0x3F	; 63
    494a:	81 30       	cpi	r24, 0x01	; 1
    494c:	29 f0       	breq	.+10     	; 0x4958 <menu_ProcessMessage+0x22>
    494e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <nibbleIndex>
    4952:	8f 3f       	cpi	r24, 0xFF	; 255
    4954:	09 f0       	breq	.+2      	; 0x4958 <menu_ProcessMessage+0x22>
    4956:	68 c1       	rjmp	.+720    	; 0x4c28 <menu_ProcessMessage+0x2f2>
    4958:	31 96       	adiw	r30, 0x01	; 1
    495a:	84 91       	lpm	r24, Z
    495c:	86 ff       	sbrs	r24, 6
    495e:	02 c0       	rjmp	.+4      	; 0x4964 <menu_ProcessMessage+0x2e>
    4960:	1a df       	rcall	.-460    	; 0x4796 <menuClearExtraDisp>
    4962:	15 df       	rcall	.-470    	; 0x478e <menuCursorSetMenu>
    4964:	60 91 a9 05 	lds	r22, 0x05A9	; 0x8005a9 <currentMenu>
    4968:	70 91 aa 05 	lds	r23, 0x05AA	; 0x8005aa <currentMenu+0x1>
    496c:	cb 01       	movw	r24, r22
    496e:	01 96       	adiw	r24, 0x01	; 1
    4970:	fc 01       	movw	r30, r24
    4972:	84 91       	lpm	r24, Z
    4974:	98 2f       	mov	r25, r24
    4976:	90 72       	andi	r25, 0x20	; 32
    4978:	85 ff       	sbrs	r24, 5
    497a:	1f c0       	rjmp	.+62     	; 0x49ba <menu_ProcessMessage+0x84>
    497c:	9b 01       	movw	r18, r22
    497e:	20 5f       	subi	r18, 0xF0	; 240
    4980:	3f 4f       	sbci	r19, 0xFF	; 255
    4982:	f9 01       	movw	r30, r18
    4984:	25 91       	lpm	r18, Z+
    4986:	35 91       	lpm	r19, Z+
    4988:	21 15       	cp	r18, r1
    498a:	31 05       	cpc	r19, r1
    498c:	b1 f0       	breq	.+44     	; 0x49ba <menu_ProcessMessage+0x84>
    498e:	40 91 76 05 	lds	r20, 0x0576	; 0x800576 <nibbleIndex>
    4992:	4f 3f       	cpi	r20, 0xFF	; 255
    4994:	91 f0       	breq	.+36     	; 0x49ba <menu_ProcessMessage+0x84>
    4996:	8c 2f       	mov	r24, r28
    4998:	f9 01       	movw	r30, r18
    499a:	19 95       	eicall
    499c:	8f 3f       	cpi	r24, 0xFF	; 255
    499e:	21 f4       	brne	.+8      	; 0x49a8 <menu_ProcessMessage+0x72>
    49a0:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    49a4:	80 e0       	ldi	r24, 0x00	; 0
    49a6:	04 c2       	rjmp	.+1032   	; 0x4db0 <menu_ProcessMessage+0x47a>
    49a8:	f6 de       	rcall	.-532    	; 0x4796 <menuClearExtraDisp>
    49aa:	fa de       	rcall	.-524    	; 0x47a0 <menu_ClearDataDisp>
    49ac:	f0 de       	rcall	.-544    	; 0x478e <menuCursorSetMenu>
    49ae:	8f ef       	ldi	r24, 0xFF	; 255
    49b0:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    49b4:	2a df       	rcall	.-428    	; 0x480a <menuCurrMenuToLCD>
    49b6:	80 e0       	ldi	r24, 0x00	; 0
    49b8:	fb c1       	rjmp	.+1014   	; 0x4db0 <menu_ProcessMessage+0x47a>
    49ba:	c3 30       	cpi	r28, 0x03	; 3
    49bc:	09 f4       	brne	.+2      	; 0x49c0 <menu_ProcessMessage+0x8a>
    49be:	64 c0       	rjmp	.+200    	; 0x4a88 <menu_ProcessMessage+0x152>
    49c0:	28 f4       	brcc	.+10     	; 0x49cc <menu_ProcessMessage+0x96>
    49c2:	c1 30       	cpi	r28, 0x01	; 1
    49c4:	51 f0       	breq	.+20     	; 0x49da <menu_ProcessMessage+0xa4>
    49c6:	c2 30       	cpi	r28, 0x02	; 2
    49c8:	31 f1       	breq	.+76     	; 0x4a16 <menu_ProcessMessage+0xe0>
    49ca:	db c1       	rjmp	.+950    	; 0x4d82 <menu_ProcessMessage+0x44c>
    49cc:	c5 30       	cpi	r28, 0x05	; 5
    49ce:	09 f4       	brne	.+2      	; 0x49d2 <menu_ProcessMessage+0x9c>
    49d0:	5b c0       	rjmp	.+182    	; 0x4a88 <menu_ProcessMessage+0x152>
    49d2:	90 f0       	brcs	.+36     	; 0x49f8 <menu_ProcessMessage+0xc2>
    49d4:	c6 30       	cpi	r28, 0x06	; 6
    49d6:	f9 f0       	breq	.+62     	; 0x4a16 <menu_ProcessMessage+0xe0>
    49d8:	d4 c1       	rjmp	.+936    	; 0x4d82 <menu_ProcessMessage+0x44c>
    49da:	fb 01       	movw	r30, r22
    49dc:	84 91       	lpm	r24, Z
    49de:	80 7c       	andi	r24, 0xC0	; 192
    49e0:	80 3c       	cpi	r24, 0xC0	; 192
    49e2:	09 f4       	brne	.+2      	; 0x49e6 <menu_ProcessMessage+0xb0>
    49e4:	d0 c1       	rjmp	.+928    	; 0x4d86 <menu_ProcessMessage+0x450>
    49e6:	74 96       	adiw	r30, 0x14	; 20
    49e8:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    49ec:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    49f0:	3a df       	rcall	.-396    	; 0x4866 <menuItemChanged>
    49f2:	0b df       	rcall	.-490    	; 0x480a <menuCurrMenuToLCD>
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	dc c1       	rjmp	.+952    	; 0x4db0 <menu_ProcessMessage+0x47a>
    49f8:	fb 01       	movw	r30, r22
    49fa:	84 91       	lpm	r24, Z
    49fc:	80 7c       	andi	r24, 0xC0	; 192
    49fe:	80 38       	cpi	r24, 0x80	; 128
    4a00:	09 f4       	brne	.+2      	; 0x4a04 <menu_ProcessMessage+0xce>
    4a02:	c3 c1       	rjmp	.+902    	; 0x4d8a <menu_ProcessMessage+0x454>
    4a04:	74 97       	sbiw	r30, 0x14	; 20
    4a06:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4a0a:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4a0e:	2b df       	rcall	.-426    	; 0x4866 <menuItemChanged>
    4a10:	fc de       	rcall	.-520    	; 0x480a <menuCurrMenuToLCD>
    4a12:	80 e0       	ldi	r24, 0x00	; 0
    4a14:	cd c1       	rjmp	.+922    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4a16:	84 ff       	sbrs	r24, 4
    4a18:	04 c0       	rjmp	.+8      	; 0x4a22 <menu_ProcessMessage+0xec>
    4a1a:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <menuVMenuSoftKey+0x1>
    4a1e:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <menuVMenuSoftKey>
    4a22:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4a26:	ee 23       	and	r30, r30
    4a28:	e9 f0       	breq	.+58     	; 0x4a64 <menu_ProcessMessage+0x12e>
    4a2a:	e1 50       	subi	r30, 0x01	; 1
    4a2c:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4a30:	f0 e0       	ldi	r31, 0x00	; 0
    4a32:	ee 0f       	add	r30, r30
    4a34:	ff 1f       	adc	r31, r31
    4a36:	e5 58       	subi	r30, 0x85	; 133
    4a38:	fa 4f       	sbci	r31, 0xFA	; 250
    4a3a:	01 90       	ld	r0, Z+
    4a3c:	f0 81       	ld	r31, Z
    4a3e:	e0 2d       	mov	r30, r0
    4a40:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4a44:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4a48:	72 96       	adiw	r30, 0x12	; 18
    4a4a:	05 90       	lpm	r0, Z+
    4a4c:	f4 91       	lpm	r31, Z
    4a4e:	e0 2d       	mov	r30, r0
    4a50:	30 97       	sbiw	r30, 0x00	; 0
    4a52:	11 f0       	breq	.+4      	; 0x4a58 <menu_ProcessMessage+0x122>
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	19 95       	eicall
    4a58:	9e de       	rcall	.-708    	; 0x4796 <menuClearExtraDisp>
    4a5a:	20 dd       	rcall	.-1472   	; 0x449c <menuParentMenuToLCD>
    4a5c:	d6 de       	rcall	.-596    	; 0x480a <menuCurrMenuToLCD>
    4a5e:	03 df       	rcall	.-506    	; 0x4866 <menuItemChanged>
    4a60:	80 e0       	ldi	r24, 0x00	; 0
    4a62:	a6 c1       	rjmp	.+844    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4a64:	80 e0       	ldi	r24, 0x00	; 0
    4a66:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4a6a:	81 e0       	ldi	r24, 0x01	; 1
    4a6c:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4a70:	82 e0       	ldi	r24, 0x02	; 2
    4a72:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4a76:	83 e0       	ldi	r24, 0x03	; 3
    4a78:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    4a7c:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
    4a80:	0e 94 bf 38 	call	0x717e	; 0x717e <lcd_cursoroff>
    4a84:	8f ef       	ldi	r24, 0xFF	; 255
    4a86:	94 c1       	rjmp	.+808    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4a88:	fb 01       	movw	r30, r22
    4a8a:	24 91       	lpm	r18, Z
    4a8c:	2f 73       	andi	r18, 0x3F	; 63
    4a8e:	30 e0       	ldi	r19, 0x00	; 0
    4a90:	22 30       	cpi	r18, 0x02	; 2
    4a92:	31 05       	cpc	r19, r1
    4a94:	0c f4       	brge	.+2      	; 0x4a98 <menu_ProcessMessage+0x162>
    4a96:	48 c0       	rjmp	.+144    	; 0x4b28 <menu_ProcessMessage+0x1f2>
    4a98:	70 96       	adiw	r30, 0x10	; 16
    4a9a:	05 90       	lpm	r0, Z+
    4a9c:	f4 91       	lpm	r31, Z
    4a9e:	e0 2d       	mov	r30, r0
    4aa0:	30 97       	sbiw	r30, 0x00	; 0
    4aa2:	19 f0       	breq	.+6      	; 0x4aaa <menu_ProcessMessage+0x174>
    4aa4:	8c 2f       	mov	r24, r28
    4aa6:	19 95       	eicall
    4aa8:	de de       	rcall	.-580    	; 0x4866 <menuItemChanged>
    4aaa:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4aae:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4ab2:	c9 01       	movw	r24, r18
    4ab4:	01 96       	adiw	r24, 0x01	; 1
    4ab6:	fc 01       	movw	r30, r24
    4ab8:	84 91       	lpm	r24, Z
    4aba:	83 fd       	sbrc	r24, 3
    4abc:	68 c1       	rjmp	.+720    	; 0x4d8e <menu_ProcessMessage+0x458>
    4abe:	c9 01       	movw	r24, r18
    4ac0:	0e 96       	adiw	r24, 0x0e	; 14
    4ac2:	fc 01       	movw	r30, r24
    4ac4:	85 91       	lpm	r24, Z+
    4ac6:	95 91       	lpm	r25, Z+
    4ac8:	89 2b       	or	r24, r25
    4aca:	09 f4       	brne	.+2      	; 0x4ace <menu_ProcessMessage+0x198>
    4acc:	62 c1       	rjmp	.+708    	; 0x4d92 <menu_ProcessMessage+0x45c>
    4ace:	f9 01       	movw	r30, r18
    4ad0:	84 91       	lpm	r24, Z
    4ad2:	8f 73       	andi	r24, 0x3F	; 63
    4ad4:	89 30       	cpi	r24, 0x09	; 9
    4ad6:	19 f5       	brne	.+70     	; 0x4b1e <menu_ProcessMessage+0x1e8>
    4ad8:	61 e0       	ldi	r22, 0x01	; 1
    4ada:	80 e0       	ldi	r24, 0x00	; 0
    4adc:	30 da       	rcall	.-2976   	; 0x3f3e <nibbleChange>
    4ade:	de db       	rcall	.-2116   	; 0x429c <nibbleToData>
    4ae0:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4ae4:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4ae8:	3e 96       	adiw	r30, 0x0e	; 14
    4aea:	05 90       	lpm	r0, Z+
    4aec:	f4 91       	lpm	r31, Z
    4aee:	e0 2d       	mov	r30, r0
    4af0:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4af4:	80 83       	st	Z, r24
    4af6:	ec dc       	rcall	.-1576   	; 0x44d0 <menuDisplayValue>
    4af8:	69 de       	rcall	.-814    	; 0x47cc <menuCheckArrowDown>
    4afa:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
    4afe:	47 de       	rcall	.-882    	; 0x478e <menuCursorSetMenu>
    4b00:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4b04:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4b08:	72 96       	adiw	r30, 0x12	; 18
    4b0a:	05 90       	lpm	r0, Z+
    4b0c:	f4 91       	lpm	r31, Z
    4b0e:	e0 2d       	mov	r30, r0
    4b10:	30 97       	sbiw	r30, 0x00	; 0
    4b12:	09 f4       	brne	.+2      	; 0x4b16 <menu_ProcessMessage+0x1e0>
    4b14:	40 c1       	rjmp	.+640    	; 0x4d96 <menu_ProcessMessage+0x460>
    4b16:	80 e0       	ldi	r24, 0x00	; 0
    4b18:	19 95       	eicall
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	49 c1       	rjmp	.+658    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4b1e:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4b22:	e3 dc       	rcall	.-1594   	; 0x44ea <menuCursorSetDataNibble>
    4b24:	80 e0       	ldi	r24, 0x00	; 0
    4b26:	44 c1       	rjmp	.+648    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4b28:	2f ef       	ldi	r18, 0xFF	; 255
    4b2a:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4b2e:	84 ff       	sbrs	r24, 4
    4b30:	26 c0       	rjmp	.+76     	; 0x4b7e <menu_ProcessMessage+0x248>
    4b32:	70 93 ce 05 	sts	0x05CE, r23	; 0x8005ce <menuVMenuSoftKey+0x1>
    4b36:	60 93 cd 05 	sts	0x05CD, r22	; 0x8005cd <menuVMenuSoftKey>
    4b3a:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <menuStackIndex>
    4b3e:	ee 23       	and	r30, r30
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <menu_ProcessMessage+0x20e>
    4b42:	2b c1       	rjmp	.+598    	; 0x4d9a <menu_ProcessMessage+0x464>
    4b44:	e1 50       	subi	r30, 0x01	; 1
    4b46:	e0 93 68 05 	sts	0x0568, r30	; 0x800568 <menuStackIndex>
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	ee 0f       	add	r30, r30
    4b4e:	ff 1f       	adc	r31, r31
    4b50:	e5 58       	subi	r30, 0x85	; 133
    4b52:	fa 4f       	sbci	r31, 0xFA	; 250
    4b54:	01 90       	ld	r0, Z+
    4b56:	f0 81       	ld	r31, Z
    4b58:	e0 2d       	mov	r30, r0
    4b5a:	f0 93 aa 05 	sts	0x05AA, r31	; 0x8005aa <currentMenu+0x1>
    4b5e:	e0 93 a9 05 	sts	0x05A9, r30	; 0x8005a9 <currentMenu>
    4b62:	72 96       	adiw	r30, 0x12	; 18
    4b64:	05 90       	lpm	r0, Z+
    4b66:	f4 91       	lpm	r31, Z
    4b68:	e0 2d       	mov	r30, r0
    4b6a:	30 97       	sbiw	r30, 0x00	; 0
    4b6c:	11 f0       	breq	.+4      	; 0x4b72 <menu_ProcessMessage+0x23c>
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	19 95       	eicall
    4b72:	11 de       	rcall	.-990    	; 0x4796 <menuClearExtraDisp>
    4b74:	93 dc       	rcall	.-1754   	; 0x449c <menuParentMenuToLCD>
    4b76:	49 de       	rcall	.-878    	; 0x480a <menuCurrMenuToLCD>
    4b78:	76 de       	rcall	.-788    	; 0x4866 <menuItemChanged>
    4b7a:	80 e0       	ldi	r24, 0x00	; 0
    4b7c:	19 c1       	rjmp	.+562    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4b7e:	fb 01       	movw	r30, r22
    4b80:	70 96       	adiw	r30, 0x10	; 16
    4b82:	05 90       	lpm	r0, Z+
    4b84:	f4 91       	lpm	r31, Z
    4b86:	e0 2d       	mov	r30, r0
    4b88:	30 97       	sbiw	r30, 0x00	; 0
    4b8a:	99 f0       	breq	.+38     	; 0x4bb2 <menu_ProcessMessage+0x27c>
    4b8c:	99 23       	and	r25, r25
    4b8e:	71 f0       	breq	.+28     	; 0x4bac <menu_ProcessMessage+0x276>
    4b90:	8f ef       	ldi	r24, 0xFF	; 255
    4b92:	19 95       	eicall
    4b94:	8f 3f       	cpi	r24, 0xFF	; 255
    4b96:	19 f4       	brne	.+6      	; 0x4b9e <menu_ProcessMessage+0x268>
    4b98:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <nibbleIndex>
    4b9c:	0a c0       	rjmp	.+20     	; 0x4bb2 <menu_ProcessMessage+0x27c>
    4b9e:	fb dd       	rcall	.-1034   	; 0x4796 <menuClearExtraDisp>
    4ba0:	ff dd       	rcall	.-1026   	; 0x47a0 <menu_ClearDataDisp>
    4ba2:	f5 dd       	rcall	.-1046   	; 0x478e <menuCursorSetMenu>
    4ba4:	8f ef       	ldi	r24, 0xFF	; 255
    4ba6:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4baa:	03 c0       	rjmp	.+6      	; 0x4bb2 <menu_ProcessMessage+0x27c>
    4bac:	85 e0       	ldi	r24, 0x05	; 5
    4bae:	19 95       	eicall
    4bb0:	ee dd       	rcall	.-1060   	; 0x478e <menuCursorSetMenu>
    4bb2:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4bb6:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4bba:	c9 01       	movw	r24, r18
    4bbc:	0c 96       	adiw	r24, 0x0c	; 12
    4bbe:	fc 01       	movw	r30, r24
    4bc0:	85 91       	lpm	r24, Z+
    4bc2:	95 91       	lpm	r25, Z+
    4bc4:	89 2b       	or	r24, r25
    4bc6:	09 f4       	brne	.+2      	; 0x4bca <menu_ProcessMessage+0x294>
    4bc8:	ea c0       	rjmp	.+468    	; 0x4d9e <menu_ProcessMessage+0x468>
    4bca:	a0 91 68 05 	lds	r26, 0x0568	; 0x800568 <menuStackIndex>
    4bce:	a0 31       	cpi	r26, 0x10	; 16
    4bd0:	08 f0       	brcs	.+2      	; 0x4bd4 <menu_ProcessMessage+0x29e>
    4bd2:	e7 c0       	rjmp	.+462    	; 0x4da2 <menu_ProcessMessage+0x46c>
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	8a 0f       	add	r24, r26
    4bd8:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <menuStackIndex>
    4bdc:	b0 e0       	ldi	r27, 0x00	; 0
    4bde:	aa 0f       	add	r26, r26
    4be0:	bb 1f       	adc	r27, r27
    4be2:	a5 58       	subi	r26, 0x85	; 133
    4be4:	ba 4f       	sbci	r27, 0xFA	; 250
    4be6:	2d 93       	st	X+, r18
    4be8:	3c 93       	st	X, r19
    4bea:	c9 01       	movw	r24, r18
    4bec:	01 96       	adiw	r24, 0x01	; 1
    4bee:	fc 01       	movw	r30, r24
    4bf0:	84 91       	lpm	r24, Z
    4bf2:	83 ff       	sbrs	r24, 3
    4bf4:	0b c0       	rjmp	.+22     	; 0x4c0c <menu_ProcessMessage+0x2d6>
    4bf6:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    4bfa:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    4bfe:	00 97       	sbiw	r24, 0x00	; 0
    4c00:	29 f0       	breq	.+10     	; 0x4c0c <menu_ProcessMessage+0x2d6>
    4c02:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4c06:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4c0a:	08 c0       	rjmp	.+16     	; 0x4c1c <menu_ProcessMessage+0x2e6>
    4c0c:	f9 01       	movw	r30, r18
    4c0e:	3c 96       	adiw	r30, 0x0c	; 12
    4c10:	85 91       	lpm	r24, Z+
    4c12:	95 91       	lpm	r25, Z+
    4c14:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <currentMenu+0x1>
    4c18:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <currentMenu>
    4c1c:	bc dd       	rcall	.-1160   	; 0x4796 <menuClearExtraDisp>
    4c1e:	3e dc       	rcall	.-1924   	; 0x449c <menuParentMenuToLCD>
    4c20:	f4 dd       	rcall	.-1048   	; 0x480a <menuCurrMenuToLCD>
    4c22:	21 de       	rcall	.-958    	; 0x4866 <menuItemChanged>
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	c4 c0       	rjmp	.+392    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4c28:	c3 30       	cpi	r28, 0x03	; 3
    4c2a:	09 f4       	brne	.+2      	; 0x4c2e <menu_ProcessMessage+0x2f8>
    4c2c:	49 c0       	rjmp	.+146    	; 0x4cc0 <menu_ProcessMessage+0x38a>
    4c2e:	28 f4       	brcc	.+10     	; 0x4c3a <menu_ProcessMessage+0x304>
    4c30:	c1 30       	cpi	r28, 0x01	; 1
    4c32:	59 f0       	breq	.+22     	; 0x4c4a <menu_ProcessMessage+0x314>
    4c34:	c2 30       	cpi	r28, 0x02	; 2
    4c36:	31 f1       	breq	.+76     	; 0x4c84 <menu_ProcessMessage+0x34e>
    4c38:	b6 c0       	rjmp	.+364    	; 0x4da6 <menu_ProcessMessage+0x470>
    4c3a:	c5 30       	cpi	r28, 0x05	; 5
    4c3c:	09 f4       	brne	.+2      	; 0x4c40 <menu_ProcessMessage+0x30a>
    4c3e:	5e c0       	rjmp	.+188    	; 0x4cfc <menu_ProcessMessage+0x3c6>
    4c40:	c0 f0       	brcs	.+48     	; 0x4c72 <menu_ProcessMessage+0x33c>
    4c42:	c6 30       	cpi	r28, 0x06	; 6
    4c44:	09 f4       	brne	.+2      	; 0x4c48 <menu_ProcessMessage+0x312>
    4c46:	8a c0       	rjmp	.+276    	; 0x4d5c <menu_ProcessMessage+0x426>
    4c48:	ae c0       	rjmp	.+348    	; 0x4da6 <menu_ProcessMessage+0x470>
    4c4a:	48 2f       	mov	r20, r24
    4c4c:	50 e0       	ldi	r21, 0x00	; 0
    4c4e:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4c52:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4c56:	24 91       	lpm	r18, Z
    4c58:	30 e0       	ldi	r19, 0x00	; 0
    4c5a:	21 50       	subi	r18, 0x01	; 1
    4c5c:	31 09       	sbc	r19, r1
    4c5e:	42 17       	cp	r20, r18
    4c60:	53 07       	cpc	r21, r19
    4c62:	0c f0       	brlt	.+2      	; 0x4c66 <menu_ProcessMessage+0x330>
    4c64:	a2 c0       	rjmp	.+324    	; 0x4daa <menu_ProcessMessage+0x474>
    4c66:	8f 5f       	subi	r24, 0xFF	; 255
    4c68:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4c6c:	3e dc       	rcall	.-1924   	; 0x44ea <menuCursorSetDataNibble>
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	9f c0       	rjmp	.+318    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4c72:	88 23       	and	r24, r24
    4c74:	09 f4       	brne	.+2      	; 0x4c78 <menu_ProcessMessage+0x342>
    4c76:	9b c0       	rjmp	.+310    	; 0x4dae <menu_ProcessMessage+0x478>
    4c78:	81 50       	subi	r24, 0x01	; 1
    4c7a:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4c7e:	35 dc       	rcall	.-1942   	; 0x44ea <menuCursorSetDataNibble>
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	96 c0       	rjmp	.+300    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4c84:	61 e0       	ldi	r22, 0x01	; 1
    4c86:	5b d9       	rcall	.-3402   	; 0x3f3e <nibbleChange>
    4c88:	09 db       	rcall	.-2542   	; 0x429c <nibbleToData>
    4c8a:	22 dc       	rcall	.-1980   	; 0x44d0 <menuDisplayValue>
    4c8c:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4c90:	8a 30       	cpi	r24, 0x0A	; 10
    4c92:	11 f0       	breq	.+4      	; 0x4c98 <menu_ProcessMessage+0x362>
    4c94:	8e 30       	cpi	r24, 0x0E	; 14
    4c96:	89 f4       	brne	.+34     	; 0x4cba <menu_ProcessMessage+0x384>
    4c98:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4c9c:	42 2f       	mov	r20, r18
    4c9e:	50 e0       	ldi	r21, 0x00	; 0
    4ca0:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4ca4:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4ca8:	84 91       	lpm	r24, Z
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	01 97       	sbiw	r24, 0x01	; 1
    4cae:	48 17       	cp	r20, r24
    4cb0:	59 07       	cpc	r21, r25
    4cb2:	1c f4       	brge	.+6      	; 0x4cba <menu_ProcessMessage+0x384>
    4cb4:	2f 5f       	subi	r18, 0xFF	; 255
    4cb6:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4cba:	17 dc       	rcall	.-2002   	; 0x44ea <menuCursorSetDataNibble>
    4cbc:	80 e0       	ldi	r24, 0x00	; 0
    4cbe:	78 c0       	rjmp	.+240    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4cc0:	6f ef       	ldi	r22, 0xFF	; 255
    4cc2:	3d d9       	rcall	.-3462   	; 0x3f3e <nibbleChange>
    4cc4:	eb da       	rcall	.-2602   	; 0x429c <nibbleToData>
    4cc6:	04 dc       	rcall	.-2040   	; 0x44d0 <menuDisplayValue>
    4cc8:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <dataType>
    4ccc:	8a 30       	cpi	r24, 0x0A	; 10
    4cce:	11 f0       	breq	.+4      	; 0x4cd4 <menu_ProcessMessage+0x39e>
    4cd0:	8e 30       	cpi	r24, 0x0E	; 14
    4cd2:	89 f4       	brne	.+34     	; 0x4cf6 <menu_ProcessMessage+0x3c0>
    4cd4:	20 91 76 05 	lds	r18, 0x0576	; 0x800576 <nibbleIndex>
    4cd8:	42 2f       	mov	r20, r18
    4cda:	50 e0       	ldi	r21, 0x00	; 0
    4cdc:	e0 91 79 05 	lds	r30, 0x0579	; 0x800579 <pNibbleInfo>
    4ce0:	f0 91 7a 05 	lds	r31, 0x057A	; 0x80057a <pNibbleInfo+0x1>
    4ce4:	84 91       	lpm	r24, Z
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	01 97       	sbiw	r24, 0x01	; 1
    4cea:	48 17       	cp	r20, r24
    4cec:	59 07       	cpc	r21, r25
    4cee:	1c f4       	brge	.+6      	; 0x4cf6 <menu_ProcessMessage+0x3c0>
    4cf0:	2f 5f       	subi	r18, 0xFF	; 255
    4cf2:	20 93 76 05 	sts	0x0576, r18	; 0x800576 <nibbleIndex>
    4cf6:	f9 db       	rcall	.-2062   	; 0x44ea <menuCursorSetDataNibble>
    4cf8:	80 e0       	ldi	r24, 0x00	; 0
    4cfa:	5a c0       	rjmp	.+180    	; 0x4db0 <menu_ProcessMessage+0x47a>
    4cfc:	cf da       	rcall	.-2658   	; 0x429c <nibbleToData>
    4cfe:	20 91 a9 05 	lds	r18, 0x05A9	; 0x8005a9 <currentMenu>
    4d02:	30 91 aa 05 	lds	r19, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d06:	c9 01       	movw	r24, r18
    4d08:	0e 96       	adiw	r24, 0x0e	; 14
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	a5 91       	lpm	r26, Z+
    4d0e:	b5 91       	lpm	r27, Z+
    4d10:	10 97       	sbiw	r26, 0x00	; 0
    4d12:	21 f1       	breq	.+72     	; 0x4d5c <menu_ProcessMessage+0x426>
    4d14:	0d 97       	sbiw	r24, 0x0d	; 13
    4d16:	fc 01       	movw	r30, r24
    4d18:	84 91       	lpm	r24, Z
    4d1a:	88 23       	and	r24, r24
    4d1c:	2c f4       	brge	.+10     	; 0x4d28 <menu_ProcessMessage+0x3f2>
    4d1e:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <DataAdressOffset>
    4d22:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <DataAdressOffset+0x1>
    4d26:	02 c0       	rjmp	.+4      	; 0x4d2c <menu_ProcessMessage+0x3f6>
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	a8 0f       	add	r26, r24
    4d2e:	b9 1f       	adc	r27, r25
    4d30:	f9 01       	movw	r30, r18
    4d32:	84 91       	lpm	r24, Z
    4d34:	8f 73       	andi	r24, 0x3F	; 63
    4d36:	8b 30       	cpi	r24, 0x0B	; 11
    4d38:	71 f4       	brne	.+28     	; 0x4d56 <menu_ProcessMessage+0x420>
    4d3a:	40 91 a2 05 	lds	r20, 0x05A2	; 0x8005a2 <dataEntry32>
    4d3e:	50 91 a3 05 	lds	r21, 0x05A3	; 0x8005a3 <dataEntry32+0x1>
    4d42:	60 91 a4 05 	lds	r22, 0x05A4	; 0x8005a4 <dataEntry32+0x2>
    4d46:	70 91 a5 05 	lds	r23, 0x05A5	; 0x8005a5 <dataEntry32+0x3>
    4d4a:	4d 93       	st	X+, r20
    4d4c:	5d 93       	st	X+, r21
    4d4e:	6d 93       	st	X+, r22
    4d50:	7c 93       	st	X, r23
    4d52:	13 97       	sbiw	r26, 0x03	; 3
    4d54:	03 c0       	rjmp	.+6      	; 0x4d5c <menu_ProcessMessage+0x426>
    4d56:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <dataEntry>
    4d5a:	8c 93       	st	X, r24
    4d5c:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4d60:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4d64:	72 96       	adiw	r30, 0x12	; 18
    4d66:	05 90       	lpm	r0, Z+
    4d68:	f4 91       	lpm	r31, Z
    4d6a:	e0 2d       	mov	r30, r0
    4d6c:	30 97       	sbiw	r30, 0x00	; 0
    4d6e:	11 f0       	breq	.+4      	; 0x4d74 <menu_ProcessMessage+0x43e>
    4d70:	8c 2f       	mov	r24, r28
    4d72:	19 95       	eicall
    4d74:	8f ef       	ldi	r24, 0xFF	; 255
    4d76:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <nibbleIndex>
    4d7a:	47 dd       	rcall	.-1394   	; 0x480a <menuCurrMenuToLCD>
    4d7c:	74 dd       	rcall	.-1304   	; 0x4866 <menuItemChanged>
    4d7e:	80 e0       	ldi	r24, 0x00	; 0
    4d80:	17 c0       	rjmp	.+46     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d82:	80 e0       	ldi	r24, 0x00	; 0
    4d84:	15 c0       	rjmp	.+42     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d86:	80 e0       	ldi	r24, 0x00	; 0
    4d88:	13 c0       	rjmp	.+38     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d8a:	80 e0       	ldi	r24, 0x00	; 0
    4d8c:	11 c0       	rjmp	.+34     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	0f c0       	rjmp	.+30     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d92:	80 e0       	ldi	r24, 0x00	; 0
    4d94:	0d c0       	rjmp	.+26     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d96:	80 e0       	ldi	r24, 0x00	; 0
    4d98:	0b c0       	rjmp	.+22     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	09 c0       	rjmp	.+18     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	07 c0       	rjmp	.+14     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4da2:	80 e0       	ldi	r24, 0x00	; 0
    4da4:	05 c0       	rjmp	.+10     	; 0x4db0 <menu_ProcessMessage+0x47a>
    4da6:	80 e0       	ldi	r24, 0x00	; 0
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <menu_ProcessMessage+0x47a>
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	01 c0       	rjmp	.+2      	; 0x4db0 <menu_ProcessMessage+0x47a>
    4dae:	80 e0       	ldi	r24, 0x00	; 0
    4db0:	cf 91       	pop	r28
    4db2:	08 95       	ret

00004db4 <displayMenuMessage_P>:
    4db4:	0f 93       	push	r16
    4db6:	1f 93       	push	r17
    4db8:	cf 93       	push	r28
    4dba:	df 93       	push	r29
    4dbc:	ec 01       	movw	r28, r24
    4dbe:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4dc2:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    4dc6:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    4dca:	84 91       	lpm	r24, Z
    4dcc:	8f 73       	andi	r24, 0x3F	; 63
    4dce:	81 30       	cpi	r24, 0x01	; 1
    4dd0:	91 f4       	brne	.+36     	; 0x4df6 <displayMenuMessage_P+0x42>
    4dd2:	ce 01       	movw	r24, r28
    4dd4:	0e 94 72 39 	call	0x72e4	; 0x72e4 <get_StrLenP>
    4dd8:	24 e1       	ldi	r18, 0x14	; 20
    4dda:	30 e0       	ldi	r19, 0x00	; 0
    4ddc:	a9 01       	movw	r20, r18
    4dde:	48 1b       	sub	r20, r24
    4de0:	51 09       	sbc	r21, r1
    4de2:	ca 01       	movw	r24, r20
    4de4:	95 95       	asr	r25
    4de6:	87 95       	ror	r24
    4de8:	8c 5e       	subi	r24, 0xEC	; 236
    4dea:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    4dee:	83 e0       	ldi	r24, 0x03	; 3
    4df0:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    4df4:	05 c0       	rjmp	.+10     	; 0x4e00 <displayMenuMessage_P+0x4c>
    4df6:	84 e1       	ldi	r24, 0x14	; 20
    4df8:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    4dfc:	10 92 9e 05 	sts	0x059E, r1	; 0x80059e <displayMessageArea>
    4e00:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    4e04:	ce 01       	movw	r24, r28
    4e06:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    4e0a:	80 2f       	mov	r24, r16
    4e0c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    4e10:	9f b7       	in	r25, 0x3f	; 63
    4e12:	f8 94       	cli
    4e14:	81 e0       	ldi	r24, 0x01	; 1
    4e16:	06 c0       	rjmp	.+12     	; 0x4e24 <displayMenuMessage_P+0x70>
    4e18:	ef e2       	ldi	r30, 0x2F	; 47
    4e1a:	f2 e0       	ldi	r31, 0x02	; 2
    4e1c:	84 e6       	ldi	r24, 0x64	; 100
    4e1e:	86 87       	std	Z+14, r24	; 0x0e
    4e20:	17 86       	std	Z+15, r1	; 0x0f
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	81 11       	cpse	r24, r1
    4e26:	f8 cf       	rjmp	.-16     	; 0x4e18 <displayMenuMessage_P+0x64>
    4e28:	9f bf       	out	0x3f, r25	; 63
    4e2a:	81 2f       	mov	r24, r17
    4e2c:	df 91       	pop	r29
    4e2e:	cf 91       	pop	r28
    4e30:	1f 91       	pop	r17
    4e32:	0f 91       	pop	r16
    4e34:	08 95       	ret

00004e36 <menu_OnEnterMidiPanic>:
    4e36:	84 e9       	ldi	r24, 0x94	; 148
    4e38:	93 e0       	ldi	r25, 0x03	; 3
    4e3a:	bc df       	rcall	.-136    	; 0x4db4 <displayMenuMessage_P>
    4e3c:	0e 94 b5 32 	call	0x656a	; 0x656a <midiSendAllNotesOff>
    4e40:	a6 dc       	rcall	.-1716   	; 0x478e <menuCursorSetMenu>
    4e42:	80 e0       	ldi	r24, 0x00	; 0
    4e44:	08 95       	ret

00004e46 <menu_ModuleTestExecute>:
    4e46:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4e4a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e4c:	11 f0       	breq	.+4      	; 0x4e52 <menu_ModuleTestExecute+0xc>
    4e4e:	8d 3f       	cpi	r24, 0xFD	; 253
    4e50:	71 f5       	brne	.+92     	; 0x4eae <menu_ModuleTestExecute+0x68>
    4e52:	0e 94 bf 38 	call	0x717e	; 0x717e <lcd_cursoroff>
    4e56:	a4 dc       	rcall	.-1720   	; 0x47a0 <menu_ClearDataDisp>
    4e58:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <msgPipe_Handling>
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	e9 e4       	ldi	r30, 0x49	; 73
    4e60:	f2 e0       	ldi	r31, 0x02	; 2
    4e62:	07 c0       	rjmp	.+14     	; 0x4e72 <menu_ModuleTestExecute+0x2c>
    4e64:	21 81       	ldd	r18, Z+1	; 0x01
    4e66:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4e6a:	82 2b       	or	r24, r18
    4e6c:	81 83       	std	Z+1, r24	; 0x01
    4e6e:	38 96       	adiw	r30, 0x08	; 8
    4e70:	9f 5f       	subi	r25, 0xFF	; 255
    4e72:	90 32       	cpi	r25, 0x20	; 32
    4e74:	b8 f3       	brcs	.-18     	; 0x4e64 <menu_ModuleTestExecute+0x1e>
    4e76:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4e7a:	8f 3f       	cpi	r24, 0xFF	; 255
    4e7c:	19 f4       	brne	.+6      	; 0x4e84 <menu_ModuleTestExecute+0x3e>
    4e7e:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <menu_TestModuleBitCounter>
    4e82:	5b c0       	rjmp	.+182    	; 0x4f3a <menu_ModuleTestExecute+0xf4>
    4e84:	8e e8       	ldi	r24, 0x8E	; 142
    4e86:	93 e0       	ldi	r25, 0x03	; 3
    4e88:	95 df       	rcall	.-214    	; 0x4db4 <displayMenuMessage_P>
    4e8a:	8e ef       	ldi	r24, 0xFE	; 254
    4e8c:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4e90:	9f b7       	in	r25, 0x3f	; 63
    4e92:	f8 94       	cli
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	06 c0       	rjmp	.+12     	; 0x4ea4 <menu_ModuleTestExecute+0x5e>
    4e98:	ef e2       	ldi	r30, 0x2F	; 47
    4e9a:	f2 e0       	ldi	r31, 0x02	; 2
    4e9c:	82 e0       	ldi	r24, 0x02	; 2
    4e9e:	84 87       	std	Z+12, r24	; 0x0c
    4ea0:	85 87       	std	Z+13, r24	; 0x0d
    4ea2:	80 e0       	ldi	r24, 0x00	; 0
    4ea4:	81 11       	cpse	r24, r1
    4ea6:	f8 cf       	rjmp	.-16     	; 0x4e98 <menu_ModuleTestExecute+0x52>
    4ea8:	9f bf       	out	0x3f, r25	; 63
    4eaa:	71 dc       	rcall	.-1822   	; 0x478e <menuCursorSetMenu>
    4eac:	46 c0       	rjmp	.+140    	; 0x4f3a <menu_ModuleTestExecute+0xf4>
    4eae:	8e 3f       	cpi	r24, 0xFE	; 254
    4eb0:	41 f4       	brne	.+16     	; 0x4ec2 <menu_ModuleTestExecute+0x7c>
    4eb2:	8f ef       	ldi	r24, 0xFF	; 255
    4eb4:	80 93 f3 07 	sts	0x07F3, r24	; 0x8007f3 <msgPipe_Handling>
    4eb8:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <menu_TestModulePattern>
    4ebc:	0e 94 b8 38 	call	0x7170	; 0x7170 <lcd_cursosblink>
    4ec0:	3c c0       	rjmp	.+120    	; 0x4f3a <menu_ModuleTestExecute+0xf4>
    4ec2:	40 91 69 05 	lds	r20, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    4ec6:	50 91 6a 05 	lds	r21, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    4eca:	60 91 6b 05 	lds	r22, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    4ece:	70 91 6c 05 	lds	r23, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    4ed2:	76 95       	lsr	r23
    4ed4:	67 95       	ror	r22
    4ed6:	57 95       	ror	r21
    4ed8:	47 95       	ror	r20
    4eda:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    4ede:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    4ee2:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    4ee6:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    4eea:	e8 2f       	mov	r30, r24
    4eec:	f0 e0       	ldi	r31, 0x00	; 0
    4eee:	df 01       	movw	r26, r30
    4ef0:	aa 0f       	add	r26, r26
    4ef2:	bb 1f       	adc	r27, r27
    4ef4:	aa 0f       	add	r26, r26
    4ef6:	bb 1f       	adc	r27, r27
    4ef8:	aa 0f       	add	r26, r26
    4efa:	bb 1f       	adc	r27, r27
    4efc:	a7 5b       	subi	r26, 0xB7	; 183
    4efe:	bd 4f       	sbci	r27, 0xFD	; 253
    4f00:	16 96       	adiw	r26, 0x06	; 6
    4f02:	2c 91       	ld	r18, X
    4f04:	90 91 c2 05 	lds	r25, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4f08:	29 23       	and	r18, r25
    4f0a:	49 f4       	brne	.+18     	; 0x4f1e <menu_ModuleTestExecute+0xd8>
    4f0c:	70 68       	ori	r23, 0x80	; 128
    4f0e:	40 93 69 05 	sts	0x0569, r20	; 0x800569 <menu_TestModuleErrorList>
    4f12:	50 93 6a 05 	sts	0x056A, r21	; 0x80056a <menu_TestModuleErrorList+0x1>
    4f16:	60 93 6b 05 	sts	0x056B, r22	; 0x80056b <menu_TestModuleErrorList+0x2>
    4f1a:	70 93 6c 05 	sts	0x056C, r23	; 0x80056c <menu_TestModuleErrorList+0x3>
    4f1e:	ee 0f       	add	r30, r30
    4f20:	ff 1f       	adc	r31, r31
    4f22:	ee 0f       	add	r30, r30
    4f24:	ff 1f       	adc	r31, r31
    4f26:	ee 0f       	add	r30, r30
    4f28:	ff 1f       	adc	r31, r31
    4f2a:	e7 5b       	subi	r30, 0xB7	; 183
    4f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    4f2e:	21 81       	ldd	r18, Z+1	; 0x01
    4f30:	92 2b       	or	r25, r18
    4f32:	91 83       	std	Z+1, r25	; 0x01
    4f34:	8f 5f       	subi	r24, 0xFF	; 255
    4f36:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4f3a:	e0 91 a6 05 	lds	r30, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4f3e:	e0 32       	cpi	r30, 0x20	; 32
    4f40:	28 f5       	brcc	.+74     	; 0x4f8c <menu_ModuleTestExecute+0x146>
    4f42:	f0 e0       	ldi	r31, 0x00	; 0
    4f44:	ee 0f       	add	r30, r30
    4f46:	ff 1f       	adc	r31, r31
    4f48:	ee 0f       	add	r30, r30
    4f4a:	ff 1f       	adc	r31, r31
    4f4c:	ee 0f       	add	r30, r30
    4f4e:	ff 1f       	adc	r31, r31
    4f50:	e7 5b       	subi	r30, 0xB7	; 183
    4f52:	fd 4f       	sbci	r31, 0xFD	; 253
    4f54:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <menu_TestModulePattern>
    4f58:	98 2f       	mov	r25, r24
    4f5a:	90 95       	com	r25
    4f5c:	81 81       	ldd	r24, Z+1	; 0x01
    4f5e:	89 23       	and	r24, r25
    4f60:	81 83       	std	Z+1, r24	; 0x01
    4f62:	8e e1       	ldi	r24, 0x1E	; 30
    4f64:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    4f68:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <menu_TestModuleBitCounter>
    4f6c:	0e 94 da 36 	call	0x6db4	; 0x6db4 <lcd_dec2out>
    4f70:	9f b7       	in	r25, 0x3f	; 63
    4f72:	f8 94       	cli
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	06 c0       	rjmp	.+12     	; 0x4f84 <menu_ModuleTestExecute+0x13e>
    4f78:	ef e2       	ldi	r30, 0x2F	; 47
    4f7a:	f2 e0       	ldi	r31, 0x02	; 2
    4f7c:	88 e0       	ldi	r24, 0x08	; 8
    4f7e:	84 87       	std	Z+12, r24	; 0x0c
    4f80:	15 86       	std	Z+13, r1	; 0x0d
    4f82:	80 e0       	ldi	r24, 0x00	; 0
    4f84:	81 11       	cpse	r24, r1
    4f86:	f8 cf       	rjmp	.-16     	; 0x4f78 <menu_ModuleTestExecute+0x132>
    4f88:	9f bf       	out	0x3f, r25	; 63
    4f8a:	08 95       	ret
    4f8c:	e0 32       	cpi	r30, 0x20	; 32
    4f8e:	81 f5       	brne	.+96     	; 0x4ff0 <menu_ModuleTestExecute+0x1aa>
    4f90:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <menu_TestModuleErrorList>
    4f94:	90 91 6a 05 	lds	r25, 0x056A	; 0x80056a <menu_TestModuleErrorList+0x1>
    4f98:	a0 91 6b 05 	lds	r26, 0x056B	; 0x80056b <menu_TestModuleErrorList+0x2>
    4f9c:	b0 91 6c 05 	lds	r27, 0x056C	; 0x80056c <menu_TestModuleErrorList+0x3>
    4fa0:	00 97       	sbiw	r24, 0x00	; 0
    4fa2:	a1 05       	cpc	r26, r1
    4fa4:	b1 05       	cpc	r27, r1
    4fa6:	21 f4       	brne	.+8      	; 0x4fb0 <menu_ModuleTestExecute+0x16a>
    4fa8:	8a e8       	ldi	r24, 0x8A	; 138
    4faa:	93 e0       	ldi	r25, 0x03	; 3
    4fac:	03 df       	rcall	.-506    	; 0x4db4 <displayMenuMessage_P>
    4fae:	0f c0       	rjmp	.+30     	; 0x4fce <menu_ModuleTestExecute+0x188>
    4fb0:	80 93 f9 17 	sts	0x17F9, r24	; 0x8017f9 <editLong>
    4fb4:	90 93 fa 17 	sts	0x17FA, r25	; 0x8017fa <editLong+0x1>
    4fb8:	a0 93 fb 17 	sts	0x17FB, r26	; 0x8017fb <editLong+0x2>
    4fbc:	b0 93 fc 17 	sts	0x17FC, r27	; 0x8017fc <editLong+0x3>
    4fc0:	87 e8       	ldi	r24, 0x87	; 135
    4fc2:	93 e0       	ldi	r25, 0x03	; 3
    4fc4:	f7 de       	rcall	.-530    	; 0x4db4 <displayMenuMessage_P>
    4fc6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    4fca:	0e 94 b5 36 	call	0x6d6a	; 0x6d6a <lcd_longout>
    4fce:	8e ef       	ldi	r24, 0xFE	; 254
    4fd0:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    4fd4:	9f b7       	in	r25, 0x3f	; 63
    4fd6:	f8 94       	cli
    4fd8:	81 e0       	ldi	r24, 0x01	; 1
    4fda:	06 c0       	rjmp	.+12     	; 0x4fe8 <menu_ModuleTestExecute+0x1a2>
    4fdc:	ef e2       	ldi	r30, 0x2F	; 47
    4fde:	f2 e0       	ldi	r31, 0x02	; 2
    4fe0:	82 e0       	ldi	r24, 0x02	; 2
    4fe2:	84 87       	std	Z+12, r24	; 0x0c
    4fe4:	85 87       	std	Z+13, r24	; 0x0d
    4fe6:	80 e0       	ldi	r24, 0x00	; 0
    4fe8:	81 11       	cpse	r24, r1
    4fea:	f8 cf       	rjmp	.-16     	; 0x4fdc <menu_ModuleTestExecute+0x196>
    4fec:	9f bf       	out	0x3f, r25	; 63
    4fee:	cf cb       	rjmp	.-2146   	; 0x478e <menuCursorSetMenu>
    4ff0:	08 95       	ret

00004ff2 <menu_ModuleTestPattern>:
    4ff2:	81 e0       	ldi	r24, 0x01	; 1
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	00 90 78 05 	lds	r0, 0x0578	; 0x800578 <menuVmodule>
    4ffa:	02 c0       	rjmp	.+4      	; 0x5000 <menu_ModuleTestPattern+0xe>
    4ffc:	88 0f       	add	r24, r24
    4ffe:	99 1f       	adc	r25, r25
    5000:	0a 94       	dec	r0
    5002:	e2 f7       	brpl	.-8      	; 0x4ffc <menu_ModuleTestPattern+0xa>
    5004:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <menu_TestModulePattern>
    5008:	8f ef       	ldi	r24, 0xFF	; 255
    500a:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <menu_TestModuleBitCounter>
    500e:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <menu_TestModuleErrorList>
    5012:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <menu_TestModuleErrorList+0x1>
    5016:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <menu_TestModuleErrorList+0x2>
    501a:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <menu_TestModuleErrorList+0x3>
    501e:	13 df       	rcall	.-474    	; 0x4e46 <menu_ModuleTestExecute>
    5020:	80 e0       	ldi	r24, 0x00	; 0
    5022:	08 95       	ret

00005024 <menuLCDwriteOK>:
    5024:	8a e8       	ldi	r24, 0x8A	; 138
    5026:	93 e0       	ldi	r25, 0x03	; 3
    5028:	c5 ce       	rjmp	.-630    	; 0x4db4 <displayMenuMessage_P>
    502a:	08 95       	ret

0000502c <menuOnEnterEEBackup>:
    502c:	8e e1       	ldi	r24, 0x1E	; 30
    502e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    5032:	8d e6       	ldi	r24, 0x6D	; 109
    5034:	93 e0       	ldi	r25, 0x03	; 3
    5036:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    503a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eeprom_Backup>
    503e:	f2 df       	rcall	.-28     	; 0x5024 <menuLCDwriteOK>
    5040:	80 e0       	ldi	r24, 0x00	; 0
    5042:	08 95       	ret

00005044 <menuOnEnterEERestore>:
    5044:	8e e1       	ldi	r24, 0x1E	; 30
    5046:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    504a:	8d e6       	ldi	r24, 0x6D	; 109
    504c:	93 e0       	ldi	r25, 0x03	; 3
    504e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    5052:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <eeprom_Restore>
    5056:	e6 df       	rcall	.-52     	; 0x5024 <menuLCDwriteOK>
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	08 95       	ret

0000505c <menuOnEnterEEUpdate>:
    505c:	8d e6       	ldi	r24, 0x6D	; 109
    505e:	93 e0       	ldi	r25, 0x03	; 3
    5060:	a9 de       	rcall	.-686    	; 0x4db4 <displayMenuMessage_P>
    5062:	8e e1       	ldi	r24, 0x1E	; 30
    5064:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    5068:	0e 94 ab 0c 	call	0x1956	; 0x1956 <eeprom_UpdateALL>
    506c:	db df       	rcall	.-74     	; 0x5024 <menuLCDwriteOK>
    506e:	80 e0       	ldi	r24, 0x00	; 0
    5070:	08 95       	ret

00005072 <menudeleteMainMessage>:
    5072:	cf 93       	push	r28
    5074:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5078:	80 e4       	ldi	r24, 0x40	; 64
    507a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    507e:	84 e1       	ldi	r24, 0x14	; 20
    5080:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
    5084:	8c 2f       	mov	r24, r28
    5086:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    508a:	cf 91       	pop	r28
    508c:	08 95       	ret

0000508e <menu_deleteMessage>:
    508e:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <displayMessageArea>
    5092:	83 30       	cpi	r24, 0x03	; 3
    5094:	19 f4       	brne	.+6      	; 0x509c <menu_deleteMessage+0xe>
    5096:	7f db       	rcall	.-2306   	; 0x4796 <menuClearExtraDisp>
    5098:	83 cb       	rjmp	.-2298   	; 0x47a0 <menu_ClearDataDisp>
    509a:	08 95       	ret
    509c:	81 11       	cpse	r24, r1
    509e:	02 c0       	rjmp	.+4      	; 0x50a4 <menu_deleteMessage+0x16>
    50a0:	7a cb       	rjmp	.-2316   	; 0x4796 <menuClearExtraDisp>
    50a2:	08 95       	ret
    50a4:	81 30       	cpi	r24, 0x01	; 1
    50a6:	11 f4       	brne	.+4      	; 0x50ac <menu_deleteMessage+0x1e>
    50a8:	7b cb       	rjmp	.-2314   	; 0x47a0 <menu_ClearDataDisp>
    50aa:	08 95       	ret
    50ac:	e2 cf       	rjmp	.-60     	; 0x5072 <menudeleteMainMessage>
    50ae:	08 95       	ret

000050b0 <menu_DisplayMainMessage_P>:
    50b0:	0f 93       	push	r16
    50b2:	1f 93       	push	r17
    50b4:	cf 93       	push	r28
    50b6:	df 93       	push	r29
    50b8:	ec 01       	movw	r28, r24
    50ba:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    50be:	0e 94 72 39 	call	0x72e4	; 0x72e4 <get_StrLenP>
    50c2:	08 2f       	mov	r16, r24
    50c4:	80 e4       	ldi	r24, 0x40	; 64
    50c6:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    50ca:	84 e1       	ldi	r24, 0x14	; 20
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	80 1b       	sub	r24, r16
    50d0:	91 09       	sbc	r25, r1
    50d2:	95 95       	asr	r25
    50d4:	87 95       	ror	r24
    50d6:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
    50da:	ce 01       	movw	r24, r28
    50dc:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <lcd_puts_P>
    50e0:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    50e4:	84 e5       	ldi	r24, 0x54	; 84
    50e6:	89 1b       	sub	r24, r25
    50e8:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
    50ec:	81 2f       	mov	r24, r17
    50ee:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    50f2:	9f b7       	in	r25, 0x3f	; 63
    50f4:	f8 94       	cli
    50f6:	81 e0       	ldi	r24, 0x01	; 1
    50f8:	06 c0       	rjmp	.+12     	; 0x5106 <menu_DisplayMainMessage_P+0x56>
    50fa:	ef e2       	ldi	r30, 0x2F	; 47
    50fc:	f2 e0       	ldi	r31, 0x02	; 2
    50fe:	84 e6       	ldi	r24, 0x64	; 100
    5100:	86 87       	std	Z+14, r24	; 0x0e
    5102:	17 86       	std	Z+15, r1	; 0x0f
    5104:	80 e0       	ldi	r24, 0x00	; 0
    5106:	81 11       	cpse	r24, r1
    5108:	f8 cf       	rjmp	.-16     	; 0x50fa <menu_DisplayMainMessage_P+0x4a>
    510a:	9f bf       	out	0x3f, r25	; 63
    510c:	82 e0       	ldi	r24, 0x02	; 2
    510e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    5112:	df 91       	pop	r29
    5114:	cf 91       	pop	r28
    5116:	1f 91       	pop	r17
    5118:	0f 91       	pop	r16
    511a:	08 95       	ret

0000511c <menu_DisplayMainMessage>:
    511c:	0f 93       	push	r16
    511e:	1f 93       	push	r17
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	ec 01       	movw	r28, r24
    5126:	10 91 a8 03 	lds	r17, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    512a:	0e 94 7c 39 	call	0x72f8	; 0x72f8 <get_StrLen>
    512e:	08 2f       	mov	r16, r24
    5130:	80 e4       	ldi	r24, 0x40	; 64
    5132:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    5136:	84 e1       	ldi	r24, 0x14	; 20
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	80 1b       	sub	r24, r16
    513c:	91 09       	sbc	r25, r1
    513e:	95 95       	asr	r25
    5140:	87 95       	ror	r24
    5142:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
    5146:	ce 01       	movw	r24, r28
    5148:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <lcd_puts>
    514c:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    5150:	84 e5       	ldi	r24, 0x54	; 84
    5152:	89 1b       	sub	r24, r25
    5154:	0e 94 95 38 	call	0x712a	; 0x712a <lcd_blank>
    5158:	81 2f       	mov	r24, r17
    515a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    515e:	9f b7       	in	r25, 0x3f	; 63
    5160:	f8 94       	cli
    5162:	81 e0       	ldi	r24, 0x01	; 1
    5164:	06 c0       	rjmp	.+12     	; 0x5172 <menu_DisplayMainMessage+0x56>
    5166:	ef e2       	ldi	r30, 0x2F	; 47
    5168:	f2 e0       	ldi	r31, 0x02	; 2
    516a:	84 e6       	ldi	r24, 0x64	; 100
    516c:	86 87       	std	Z+14, r24	; 0x0e
    516e:	17 86       	std	Z+15, r1	; 0x0f
    5170:	80 e0       	ldi	r24, 0x00	; 0
    5172:	81 11       	cpse	r24, r1
    5174:	f8 cf       	rjmp	.-16     	; 0x5166 <menu_DisplayMainMessage+0x4a>
    5176:	9f bf       	out	0x3f, r25	; 63
    5178:	82 e0       	ldi	r24, 0x02	; 2
    517a:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <displayMessageArea>
    517e:	df 91       	pop	r29
    5180:	cf 91       	pop	r28
    5182:	1f 91       	pop	r17
    5184:	0f 91       	pop	r16
    5186:	08 95       	ret

00005188 <menuDisplaySaveMessage>:
    5188:	6d ef       	ldi	r22, 0xFD	; 253
    518a:	77 e1       	ldi	r23, 0x17	; 23
    518c:	0e 94 10 37 	call	0x6e20	; 0x6e20 <putChar_Dec>
    5190:	bc 01       	movw	r22, r24
    5192:	82 eb       	ldi	r24, 0xB2	; 178
    5194:	93 e0       	ldi	r25, 0x03	; 3
    5196:	0e 94 03 38 	call	0x7006	; 0x7006 <putString_P>
    519a:	8d ef       	ldi	r24, 0xFD	; 253
    519c:	97 e1       	ldi	r25, 0x17	; 23
    519e:	be cf       	rjmp	.-132    	; 0x511c <menu_DisplayMainMessage>
    51a0:	08 95       	ret

000051a2 <menuDisplayLoadMessage>:
    51a2:	0f 93       	push	r16
    51a4:	1f 93       	push	r17
    51a6:	cf 93       	push	r28
    51a8:	6d ef       	ldi	r22, 0xFD	; 253
    51aa:	77 e1       	ldi	r23, 0x17	; 23
    51ac:	0e 94 10 37 	call	0x6e20	; 0x6e20 <putChar_Dec>
    51b0:	bc 01       	movw	r22, r24
    51b2:	85 ea       	ldi	r24, 0xA5	; 165
    51b4:	93 e0       	ldi	r25, 0x03	; 3
    51b6:	0e 94 03 38 	call	0x7006	; 0x7006 <putString_P>
    51ba:	8c 01       	movw	r16, r24
    51bc:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <module_WaitOutputInput2Cycles>
    51c0:	84 e0       	ldi	r24, 0x04	; 4
    51c2:	c0 d3       	rcall	.+1920   	; 0x5944 <count_Registers>
    51c4:	c8 2f       	mov	r28, r24
    51c6:	88 23       	and	r24, r24
    51c8:	49 f0       	breq	.+18     	; 0x51dc <menuDisplayLoadMessage+0x3a>
    51ca:	b8 01       	movw	r22, r16
    51cc:	83 ea       	ldi	r24, 0xA3	; 163
    51ce:	93 e0       	ldi	r25, 0x03	; 3
    51d0:	0e 94 03 38 	call	0x7006	; 0x7006 <putString_P>
    51d4:	bc 01       	movw	r22, r24
    51d6:	8c 2f       	mov	r24, r28
    51d8:	0e 94 10 37 	call	0x6e20	; 0x6e20 <putChar_Dec>
    51dc:	8d ef       	ldi	r24, 0xFD	; 253
    51de:	97 e1       	ldi	r25, 0x17	; 23
    51e0:	9d df       	rcall	.-198    	; 0x511c <menu_DisplayMainMessage>
    51e2:	cf 91       	pop	r28
    51e4:	1f 91       	pop	r17
    51e6:	0f 91       	pop	r16
    51e8:	08 95       	ret

000051ea <handle_programKey>:
    51ea:	cf 93       	push	r28
    51ec:	c6 2f       	mov	r28, r22
    51ee:	88 23       	and	r24, r24
    51f0:	2c f4       	brge	.+10     	; 0x51fc <handle_programKey+0x12>
    51f2:	6f ef       	ldi	r22, 0xFF	; 255
    51f4:	8c 2f       	mov	r24, r28
    51f6:	a7 d4       	rcall	.+2382   	; 0x5b46 <register_toProgram>
    51f8:	c7 df       	rcall	.-114    	; 0x5188 <menuDisplaySaveMessage>
    51fa:	05 c0       	rjmp	.+10     	; 0x5206 <handle_programKey+0x1c>
    51fc:	88 23       	and	r24, r24
    51fe:	19 f0       	breq	.+6      	; 0x5206 <handle_programKey+0x1c>
    5200:	86 2f       	mov	r24, r22
    5202:	05 d4       	rcall	.+2058   	; 0x5a0e <program_toRegister>
    5204:	ce df       	rcall	.-100    	; 0x51a2 <menuDisplayLoadMessage>
    5206:	8c 2f       	mov	r24, r28
    5208:	0e d5       	rcall	.+2588   	; 0x5c26 <midi_CountRegisterInProgram>
    520a:	88 23       	and	r24, r24
    520c:	31 f0       	breq	.+12     	; 0x521a <handle_programKey+0x30>
    520e:	8c 2f       	mov	r24, r28
    5210:	cf d4       	rcall	.+2462   	; 0x5bb0 <midi_RegisterMatchProgram>
    5212:	81 11       	cpse	r24, r1
    5214:	04 c0       	rjmp	.+8      	; 0x521e <handle_programKey+0x34>
    5216:	81 e8       	ldi	r24, 0x81	; 129
    5218:	03 c0       	rjmp	.+6      	; 0x5220 <handle_programKey+0x36>
    521a:	82 e8       	ldi	r24, 0x82	; 130
    521c:	01 c0       	rjmp	.+2      	; 0x5220 <handle_programKey+0x36>
    521e:	82 e8       	ldi	r24, 0x82	; 130
    5220:	cf 91       	pop	r28
    5222:	08 95       	ret

00005224 <softKeyK1A>:
    5224:	60 e0       	ldi	r22, 0x00	; 0
    5226:	e1 cf       	rjmp	.-62     	; 0x51ea <handle_programKey>
    5228:	08 95       	ret

0000522a <softKeyK2A>:
    522a:	61 e0       	ldi	r22, 0x01	; 1
    522c:	de cf       	rjmp	.-68     	; 0x51ea <handle_programKey>
    522e:	08 95       	ret

00005230 <softKeyK3A>:
    5230:	62 e0       	ldi	r22, 0x02	; 2
    5232:	db cf       	rjmp	.-74     	; 0x51ea <handle_programKey>
    5234:	08 95       	ret

00005236 <softKeyK4A>:
    5236:	63 e0       	ldi	r22, 0x03	; 3
    5238:	d8 cf       	rjmp	.-80     	; 0x51ea <handle_programKey>
    523a:	08 95       	ret

0000523c <getSoftKeyIndex>:


uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
    523c:	20 e0       	ldi	r18, 0x00	; 0
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
    523e:	34 e0       	ldi	r19, 0x04	; 4
    5240:	8f 35       	cpi	r24, 0x5F	; 95
    5242:	93 07       	cpc	r25, r19
    5244:	49 f0       	breq	.+18     	; 0x5258 <getSoftKeyIndex+0x1c>
			return result; // fits exactly, return index
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
    5246:	34 e0       	ldi	r19, 0x04	; 4
    5248:	8f 35       	cpi	r24, 0x5F	; 95
    524a:	93 07       	cpc	r25, r19
    524c:	38 f0       	brcs	.+14     	; 0x525c <getSoftKeyIndex+0x20>
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
		}
		pSelMenuSoftKey--;
    524e:	44 97       	sbiw	r24, 0x14	; 20
		result++; // max 256 searches
    5250:	2f 5f       	subi	r18, 0xFF	; 255
	} while (result != 0);
    5252:	a9 f7       	brne	.-22     	; 0x523e <getSoftKeyIndex+0x2>
	return SOFTKEYINDEX_NONE; // here result is invalid index
    5254:	80 e0       	ldi	r24, 0x00	; 0
    5256:	08 95       	ret

uint8_t getSoftKeyIndex(const __flash Menu_t* pSelMenuSoftKey){
	uint8_t result = 0;
	do {
		if (pSelMenuSoftKey == &(menu_selFunc[0])) {
			return result; // fits exactly, return index
    5258:	82 2f       	mov	r24, r18
    525a:	08 95       	ret
		} else if (pSelMenuSoftKey < &(menu_selFunc[0])) {
			return SOFTKEYINDEX_NONE; // dows not fit, return invalid index
    525c:	80 e0       	ldi	r24, 0x00	; 0
		}
		pSelMenuSoftKey--;
		result++; // max 256 searches
	} while (result != 0);
	return SOFTKEYINDEX_NONE; // here result is invalid index
}
    525e:	08 95       	ret

00005260 <init_SoftKeys>:

void init_SoftKeys(){
    5260:	cf 93       	push	r28
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
    5262:	0e 94 2c 0b 	call	0x1658	; 0x1658 <eeprom_ReadSoftkeys>
    5266:	8f 3f       	cpi	r24, 0xFF	; 255
    5268:	c9 f4       	brne	.+50     	; 0x529c <init_SoftKeys+0x3c>
    526a:	0f c0       	rjmp	.+30     	; 0x528a <init_SoftKeys+0x2a>
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
    526c:	82 2f       	mov	r24, r18
    526e:	90 e0       	ldi	r25, 0x00	; 0
    5270:	fc 01       	movw	r30, r24
    5272:	ed 54       	subi	r30, 0x4D	; 77
    5274:	fa 4f       	sbci	r31, 0xFA	; 250
    5276:	10 82       	st	Z, r1
			soft_KeyMenu[i].pSelMenu = NULL;
    5278:	88 0f       	add	r24, r24
    527a:	99 1f       	adc	r25, r25
    527c:	fc 01       	movw	r30, r24
    527e:	e6 54       	subi	r30, 0x46	; 70
    5280:	fa 4f       	sbci	r31, 0xFA	; 250
    5282:	11 82       	std	Z+1, r1	; 0x01
    5284:	10 82       	st	Z, r1
}

void init_SoftKeys(){
	if (eeprom_ReadSoftkeys() == EE_LOAD_ERROR){
		// softkeys could not be loaded from eeprom, clear
		for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5286:	2f 5f       	subi	r18, 0xFF	; 255
    5288:	01 c0       	rjmp	.+2      	; 0x528c <init_SoftKeys+0x2c>
    528a:	20 e0       	ldi	r18, 0x00	; 0
    528c:	24 30       	cpi	r18, 0x04	; 4
    528e:	70 f3       	brcs	.-36     	; 0x526c <init_SoftKeys+0xc>
			soft_KeyMenuIndex[i] = SOFTKEYINDEX_NONE;
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
    5290:	40 e0       	ldi	r20, 0x00	; 0
    5292:	50 e0       	ldi	r21, 0x00	; 0
    5294:	67 e0       	ldi	r22, 0x07	; 7
    5296:	81 e0       	ldi	r24, 0x01	; 1
    5298:	0e 94 a2 14 	call	0x2944	; 0x2944 <log_putError>
    529c:	c0 e0       	ldi	r28, 0x00	; 0
    529e:	25 c0       	rjmp	.+74     	; 0x52ea <init_SoftKeys+0x8a>
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
		const uint8_t SoftKeyMenuListLen = sizeof(menu_selFunc) / sizeof(menu_selFunc[0]);
		if (soft_KeyMenuIndex[i] < SoftKeyMenuListLen){
    52a0:	4c 2f       	mov	r20, r28
    52a2:	50 e0       	ldi	r21, 0x00	; 0
    52a4:	fa 01       	movw	r30, r20
    52a6:	ed 54       	subi	r30, 0x4D	; 77
    52a8:	fa 4f       	sbci	r31, 0xFA	; 250
    52aa:	80 81       	ld	r24, Z
    52ac:	86 31       	cpi	r24, 0x16	; 22
    52ae:	70 f4       	brcc	.+28     	; 0x52cc <init_SoftKeys+0x6c>
			// should be valid index
			soft_KeyMenu[i].pSelMenu = &menu_selFunc[soft_KeyMenuIndex[i]];
    52b0:	24 e1       	ldi	r18, 0x14	; 20
    52b2:	82 9f       	mul	r24, r18
    52b4:	c0 01       	movw	r24, r0
    52b6:	11 24       	eor	r1, r1
    52b8:	81 5a       	subi	r24, 0xA1	; 161
    52ba:	9b 4f       	sbci	r25, 0xFB	; 251
    52bc:	44 0f       	add	r20, r20
    52be:	55 1f       	adc	r21, r21
    52c0:	fa 01       	movw	r30, r20
    52c2:	e6 54       	subi	r30, 0x46	; 70
    52c4:	fa 4f       	sbci	r31, 0xFA	; 250
    52c6:	91 83       	std	Z+1, r25	; 0x01
    52c8:	80 83       	st	Z, r24
    52ca:	0e c0       	rjmp	.+28     	; 0x52e8 <init_SoftKeys+0x88>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
    52cc:	fa 01       	movw	r30, r20
    52ce:	ee 0f       	add	r30, r30
    52d0:	ff 1f       	adc	r31, r31
    52d2:	e6 54       	subi	r30, 0x46	; 70
    52d4:	fa 4f       	sbci	r31, 0xFA	; 250
    52d6:	11 82       	std	Z+1, r1	; 0x01
    52d8:	10 82       	st	Z, r1
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
    52da:	4f 5f       	subi	r20, 0xFF	; 255
    52dc:	5f 4f       	sbci	r21, 0xFF	; 255
    52de:	40 61       	ori	r20, 0x10	; 16
    52e0:	67 e0       	ldi	r22, 0x07	; 7
    52e2:	81 e0       	ldi	r24, 0x01	; 1
    52e4:	0e 94 a2 14 	call	0x2944	; 0x2944 <log_putError>
			soft_KeyMenu[i].pSelMenu = NULL;
		}
		// EEprom info for softkey not valid
		log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,0);
	}
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    52e8:	cf 5f       	subi	r28, 0xFF	; 255
    52ea:	c4 30       	cpi	r28, 0x04	; 4
    52ec:	c8 f2       	brcs	.-78     	; 0x52a0 <init_SoftKeys+0x40>
		} else {
			soft_KeyMenu[i].pSelMenu = NULL;
			log_putError(LOG_CAT_EE,LOG_CATEE_SOFTKEY,(i+1) | 0x10);
		}
	}
}
    52ee:	cf 91       	pop	r28
    52f0:	08 95       	ret

000052f2 <softKey_Set>:

void softKey_Set(const __flash Menu_t* pSelMenuSoftKey, uint8_t nrSoftKey){
    52f2:	cf 93       	push	r28
    52f4:	df 93       	push	r29
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    52f6:	64 30       	cpi	r22, 0x04	; 4
    52f8:	28 f5       	brcc	.+74     	; 0x5344 <softKey_Set+0x52>
		if ((pSelMenuSoftKey != NULL) && ((pSelMenuSoftKey->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSelMenuSoftKey->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    52fa:	00 97       	sbiw	r24, 0x00	; 0
    52fc:	b9 f0       	breq	.+46     	; 0x532c <softKey_Set+0x3a>
    52fe:	fc 01       	movw	r30, r24
    5300:	24 91       	lpm	r18, Z
    5302:	2f 73       	andi	r18, 0x3F	; 63
    5304:	21 30       	cpi	r18, 0x01	; 1
    5306:	91 f4       	brne	.+36     	; 0x532c <softKey_Set+0x3a>
    5308:	31 96       	adiw	r30, 0x01	; 1
    530a:	24 91       	lpm	r18, Z
    530c:	24 ff       	sbrs	r18, 4
    530e:	0e c0       	rjmp	.+28     	; 0x532c <softKey_Set+0x3a>
			soft_KeyMenu[nrSoftKey].pSelMenu = pSelMenuSoftKey;
    5310:	c6 2f       	mov	r28, r22
    5312:	d0 e0       	ldi	r29, 0x00	; 0
    5314:	fe 01       	movw	r30, r28
    5316:	ee 0f       	add	r30, r30
    5318:	ff 1f       	adc	r31, r31
    531a:	e6 54       	subi	r30, 0x46	; 70
    531c:	fa 4f       	sbci	r31, 0xFA	; 250
    531e:	91 83       	std	Z+1, r25	; 0x01
    5320:	80 83       	st	Z, r24
			soft_KeyMenuIndex[nrSoftKey] = getSoftKeyIndex(pSelMenuSoftKey);
    5322:	8c df       	rcall	.-232    	; 0x523c <getSoftKeyIndex>
    5324:	cd 54       	subi	r28, 0x4D	; 77
    5326:	da 4f       	sbci	r29, 0xFA	; 250
    5328:	88 83       	st	Y, r24
    532a:	0c c0       	rjmp	.+24     	; 0x5344 <softKey_Set+0x52>
		} else {
			soft_KeyMenu[nrSoftKey].pSelMenu = NULL;
    532c:	70 e0       	ldi	r23, 0x00	; 0
    532e:	fb 01       	movw	r30, r22
    5330:	ee 0f       	add	r30, r30
    5332:	ff 1f       	adc	r31, r31
    5334:	e6 54       	subi	r30, 0x46	; 70
    5336:	fa 4f       	sbci	r31, 0xFA	; 250
    5338:	11 82       	std	Z+1, r1	; 0x01
    533a:	10 82       	st	Z, r1
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
    533c:	fb 01       	movw	r30, r22
    533e:	ed 54       	subi	r30, 0x4D	; 77
    5340:	fa 4f       	sbci	r31, 0xFA	; 250
    5342:	10 82       	st	Z, r1
		}
	}
}
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	08 95       	ret

0000534a <menuOnExitKey>:
}

uint8_t menuOnExitKey(uint8_t arg){
	(void) arg;
	uint8_t softKeyNr;
	softKeyNr = currentMenu->tag;
    534a:	e0 91 a9 05 	lds	r30, 0x05A9	; 0x8005a9 <currentMenu>
    534e:	f0 91 aa 05 	lds	r31, 0x05AA	; 0x8005aa <currentMenu+0x1>
    5352:	3e 96       	adiw	r30, 0x0e	; 14
    5354:	65 91       	lpm	r22, Z+
    5356:	75 91       	lpm	r23, Z+
	softKey_Set(menuVMenuSoftKey,softKeyNr);
    5358:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <menuVMenuSoftKey>
    535c:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <menuVMenuSoftKey+0x1>
    5360:	c8 df       	rcall	.-112    	; 0x52f2 <softKey_Set>
	eeprom_UpdateSoftkeys();
    5362:	0e 94 89 0c 	call	0x1912	; 0x1912 <eeprom_UpdateSoftkeys>
	return 0;
}
    5366:	80 e0       	ldi	r24, 0x00	; 0
    5368:	08 95       	ret

0000536a <softKeys_toLCD>:
			soft_KeyMenuIndex[nrSoftKey] = SOFTKEYINDEX_NONE; // point to <none>
		}
	}
}

void softKeys_toLCD(){
    536a:	0f 93       	push	r16
    536c:	1f 93       	push	r17
    536e:	cf 93       	push	r28
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    5370:	c0 e0       	ldi	r28, 0x00	; 0
    5372:	32 c0       	rjmp	.+100    	; 0x53d8 <softKeys_toLCD+0x6e>
		if ((soft_KeyMenu[i].pSelMenu == NULL) || (soft_KeyMenu[i].pSelMenu->pString == NULL)){
    5374:	0c 2f       	mov	r16, r28
    5376:	10 e0       	ldi	r17, 0x00	; 0
    5378:	f8 01       	movw	r30, r16
    537a:	ee 0f       	add	r30, r30
    537c:	ff 1f       	adc	r31, r31
    537e:	e6 54       	subi	r30, 0x46	; 70
    5380:	fa 4f       	sbci	r31, 0xFA	; 250
    5382:	01 90       	ld	r0, Z+
    5384:	f0 81       	ld	r31, Z
    5386:	e0 2d       	mov	r30, r0
    5388:	30 97       	sbiw	r30, 0x00	; 0
    538a:	31 f0       	breq	.+12     	; 0x5398 <softKeys_toLCD+0x2e>
    538c:	3e 96       	adiw	r30, 0x0e	; 14
    538e:	65 91       	lpm	r22, Z+
    5390:	75 91       	lpm	r23, Z+
    5392:	61 15       	cp	r22, r1
    5394:	71 05       	cpc	r23, r1
    5396:	21 f4       	brne	.+8      	; 0x53a0 <softKeys_toLCD+0x36>
			keylabel_clr(i);
    5398:	8c 2f       	mov	r24, r28
    539a:	0e 94 1c 39 	call	0x7238	; 0x7238 <keylabel_clr>
    539e:	1b c0       	rjmp	.+54     	; 0x53d6 <softKeys_toLCD+0x6c>
		} else {
			keylabel_set(i,(soft_KeyMenu[i].pSelMenu->pString)); // string for Softkey (may be shorter!) is pointed to by pVar but is in flash
    53a0:	8c 2f       	mov	r24, r28
    53a2:	0e 94 e1 38 	call	0x71c2	; 0x71c2 <keylabel_set>
			if (soft_KeyMenu[i].pSelMenu->pFunc != NULL){
    53a6:	00 0f       	add	r16, r16
    53a8:	11 1f       	adc	r17, r17
    53aa:	f8 01       	movw	r30, r16
    53ac:	e6 54       	subi	r30, 0x46	; 70
    53ae:	fa 4f       	sbci	r31, 0xFA	; 250
    53b0:	01 90       	ld	r0, Z+
    53b2:	f0 81       	ld	r31, Z
    53b4:	e0 2d       	mov	r30, r0
    53b6:	70 96       	adiw	r30, 0x10	; 16
    53b8:	05 90       	lpm	r0, Z+
    53ba:	f4 91       	lpm	r31, Z
    53bc:	e0 2d       	mov	r30, r0
    53be:	30 97       	sbiw	r30, 0x00	; 0
    53c0:	51 f0       	breq	.+20     	; 0x53d6 <softKeys_toLCD+0x6c>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
    53c2:	80 e0       	ldi	r24, 0x00	; 0
    53c4:	19 95       	eicall
    53c6:	81 38       	cpi	r24, 0x81	; 129
    53c8:	11 f4       	brne	.+4      	; 0x53ce <softKeys_toLCD+0x64>
    53ca:	6f ef       	ldi	r22, 0xFF	; 255
    53cc:	01 c0       	rjmp	.+2      	; 0x53d0 <softKeys_toLCD+0x66>
    53ce:	60 e0       	ldi	r22, 0x00	; 0
    53d0:	8c 2f       	mov	r24, r28
    53d2:	0e 94 4f 39 	call	0x729e	; 0x729e <keylabel_statcheck>
		}
	}
}

void softKeys_toLCD(){
	for (uint8_t i = 0; i<MENU_SOFTKEY_COUNT; i++){
    53d6:	cf 5f       	subi	r28, 0xFF	; 255
    53d8:	c4 30       	cpi	r28, 0x04	; 4
    53da:	60 f2       	brcs	.-104    	; 0x5374 <softKeys_toLCD+0xa>
				// function can be called
				keylabel_statcheck(i,soft_KeyMenu[i].pSelMenu->pFunc(0)== MENU_SOFTKEY_FUNC_RETURN_STATUS_ON ? TRUE : FALSE); // call function with arg=0 to get status
			}
		}
	}
	keylabel_toLCD();
    53dc:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
}
    53e0:	cf 91       	pop	r28
    53e2:	1f 91       	pop	r17
    53e4:	0f 91       	pop	r16
    53e6:	08 95       	ret

000053e8 <softKey_MessageKey_ToSoftKeyNr>:

uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
    53e8:	82 30       	cpi	r24, 0x02	; 2
    53ea:	49 f0       	breq	.+18     	; 0x53fe <softKey_MessageKey_ToSoftKeyNr+0x16>
    53ec:	18 f4       	brcc	.+6      	; 0x53f4 <softKey_MessageKey_ToSoftKeyNr+0xc>
    53ee:	81 30       	cpi	r24, 0x01	; 1
    53f0:	51 f0       	breq	.+20     	; 0x5406 <softKey_MessageKey_ToSoftKeyNr+0x1e>
    53f2:	0b c0       	rjmp	.+22     	; 0x540a <softKey_MessageKey_ToSoftKeyNr+0x22>
    53f4:	83 30       	cpi	r24, 0x03	; 3
    53f6:	59 f0       	breq	.+22     	; 0x540e <softKey_MessageKey_ToSoftKeyNr+0x26>
    53f8:	84 30       	cpi	r24, 0x04	; 4
    53fa:	19 f0       	breq	.+6      	; 0x5402 <softKey_MessageKey_ToSoftKeyNr+0x1a>
    53fc:	06 c0       	rjmp	.+12     	; 0x540a <softKey_MessageKey_ToSoftKeyNr+0x22>
		case MESSAGE_KEY_1:
			return 0;
    53fe:	80 e0       	ldi	r24, 0x00	; 0
    5400:	08 95       	ret
		case MESSAGE_KEY_2:
			return 1;
		case MESSAGE_KEY_3:
			return 2;
    5402:	82 e0       	ldi	r24, 0x02	; 2
    5404:	08 95       	ret
		case MESSAGE_KEY_4:
			return 3;
    5406:	83 e0       	ldi	r24, 0x03	; 3
    5408:	08 95       	ret
	}
	return MESSAGE_KEY_NONE;
    540a:	8f ef       	ldi	r24, 0xFF	; 255
    540c:	08 95       	ret
uint8_t softKey_MessageKey_ToSoftKeyNr(uint8_t messageKey){
	switch (messageKey){
		case MESSAGE_KEY_1:
			return 0;
		case MESSAGE_KEY_2:
			return 1;
    540e:	81 e0       	ldi	r24, 0x01	; 1
			return 2;
		case MESSAGE_KEY_4:
			return 3;
	}
	return MESSAGE_KEY_NONE;
}
    5410:	08 95       	ret

00005412 <softKey_Execute>:

uint8_t softKey_Execute(uint8_t nrSoftKey, uint8_t myMessage){
    5412:	0f 93       	push	r16
    5414:	1f 93       	push	r17
    5416:	cf 93       	push	r28
	// returns TRUE if softkey is handled, false if only a menu is displayed
	if (nrSoftKey < MENU_SOFTKEY_COUNT) {
    5418:	84 30       	cpi	r24, 0x04	; 4
    541a:	d0 f5       	brcc	.+116    	; 0x5490 <softKey_Execute+0x7e>
		// softkey nr is valid
		const __flash Menu_t* pSoftKeySelMenu = soft_KeyMenu[nrSoftKey].pSelMenu;
    541c:	e8 2f       	mov	r30, r24
    541e:	f0 e0       	ldi	r31, 0x00	; 0
    5420:	ee 0f       	add	r30, r30
    5422:	ff 1f       	adc	r31, r31
    5424:	e6 54       	subi	r30, 0x46	; 70
    5426:	fa 4f       	sbci	r31, 0xFA	; 250
    5428:	00 81       	ld	r16, Z
    542a:	11 81       	ldd	r17, Z+1	; 0x01
		if (pSoftKeySelMenu != NULL){
    542c:	01 15       	cp	r16, r1
    542e:	11 05       	cpc	r17, r1
    5430:	89 f1       	breq	.+98     	; 0x5494 <softKey_Execute+0x82>
			// pointer given
			if (((pSoftKeySelMenu->menuType & MENU_T_REMOVEBOUND_MASK) == MENU_T_MENU) && ((pSoftKeySelMenu->menuFlags & MENU_FLAG_MENU_SOFTKEY) != 0)){
    5432:	f8 01       	movw	r30, r16
    5434:	94 91       	lpm	r25, Z
    5436:	9f 73       	andi	r25, 0x3F	; 63
    5438:	91 30       	cpi	r25, 0x01	; 1
    543a:	71 f5       	brne	.+92     	; 0x5498 <softKey_Execute+0x86>
    543c:	31 96       	adiw	r30, 0x01	; 1
    543e:	94 91       	lpm	r25, Z
    5440:	94 ff       	sbrs	r25, 4
    5442:	2c c0       	rjmp	.+88     	; 0x549c <softKey_Execute+0x8a>
    5444:	c8 2f       	mov	r28, r24
				if (pSoftKeySelMenu->pFunc != NULL)  {
    5446:	3f 96       	adiw	r30, 0x0f	; 15
    5448:	05 90       	lpm	r0, Z+
    544a:	f4 91       	lpm	r31, Z
    544c:	e0 2d       	mov	r30, r0
    544e:	30 97       	sbiw	r30, 0x00	; 0
    5450:	89 f0       	breq	.+34     	; 0x5474 <softKey_Execute+0x62>
					// Function supplied, call
					uint8_t softKeyFuncResult;
					softKeyFuncResult = pSoftKeySelMenu->pFunc(myMessage);
    5452:	86 2f       	mov	r24, r22
    5454:	19 95       	eicall
					// check if function return request toi change status in display
					if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_OFF){
    5456:	82 38       	cpi	r24, 0x82	; 130
    5458:	29 f4       	brne	.+10     	; 0x5464 <softKey_Execute+0x52>
						keylabel_statcheck(nrSoftKey, FALSE);
    545a:	60 e0       	ldi	r22, 0x00	; 0
    545c:	8c 2f       	mov	r24, r28
    545e:	0e 94 4f 39 	call	0x729e	; 0x729e <keylabel_statcheck>
    5462:	06 c0       	rjmp	.+12     	; 0x5470 <softKey_Execute+0x5e>
					} else if (softKeyFuncResult == MENU_SOFTKEY_FUNC_RETURN_STATUS_ON){
    5464:	81 38       	cpi	r24, 0x81	; 129
    5466:	21 f4       	brne	.+8      	; 0x5470 <softKey_Execute+0x5e>
						keylabel_statcheck(nrSoftKey, TRUE);
    5468:	6f ef       	ldi	r22, 0xFF	; 255
    546a:	8c 2f       	mov	r24, r28
    546c:	0e 94 4f 39 	call	0x729e	; 0x729e <keylabel_statcheck>
					}
					keylabel_toLCD();
    5470:	0e 94 30 39 	call	0x7260	; 0x7260 <keylabel_toLCD>
				}
				// points to menu entry of type softkey
				const __flash Menu_t* pSoftKeyExeMenu = pSoftKeySelMenu->pMenu; // destiation menu
    5474:	f8 01       	movw	r30, r16
    5476:	3c 96       	adiw	r30, 0x0c	; 12
    5478:	85 91       	lpm	r24, Z+
    547a:	95 91       	lpm	r25, Z+
				if (pSoftKeyExeMenu != NULL) {
    547c:	00 97       	sbiw	r24, 0x00	; 0
    547e:	81 f0       	breq	.+32     	; 0x54a0 <softKey_Execute+0x8e>
					// pointer exists to menu
					menu_Init(pSoftKeyExeMenu, pSoftKeySelMenu->text);
    5480:	b8 01       	movw	r22, r16
    5482:	6e 5f       	subi	r22, 0xFE	; 254
    5484:	7f 4f       	sbci	r23, 0xFF	; 255
    5486:	0e 94 cf 1c 	call	0x399e	; 0x399e <menu_Init>
					menu_InitLCD(); //display menu
    548a:	4e da       	rcall	.-2916   	; 0x4928 <menu_InitLCD>
					return FALSE; // show that we are in menu processing now
    548c:	80 e0       	ldi	r24, 0x00	; 0
    548e:	09 c0       	rjmp	.+18     	; 0x54a2 <softKey_Execute+0x90>
				}
			}
		}
	}
	return TRUE;
    5490:	8f ef       	ldi	r24, 0xFF	; 255
    5492:	07 c0       	rjmp	.+14     	; 0x54a2 <softKey_Execute+0x90>
    5494:	8f ef       	ldi	r24, 0xFF	; 255
    5496:	05 c0       	rjmp	.+10     	; 0x54a2 <softKey_Execute+0x90>
    5498:	8f ef       	ldi	r24, 0xFF	; 255
    549a:	03 c0       	rjmp	.+6      	; 0x54a2 <softKey_Execute+0x90>
    549c:	8f ef       	ldi	r24, 0xFF	; 255
    549e:	01 c0       	rjmp	.+2      	; 0x54a2 <softKey_Execute+0x90>
    54a0:	8f ef       	ldi	r24, 0xFF	; 255
}
    54a2:	cf 91       	pop	r28
    54a4:	1f 91       	pop	r17
    54a6:	0f 91       	pop	r16
    54a8:	08 95       	ret

000054aa <menu_showPowerState>:

//--------------------------------------------------------------------------------------------------------

void menu_showPowerState(){
    54aa:	cf 93       	push	r28
	uint8_t saveCursor = lcd_cursorPos;
    54ac:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(MENU_LCD_CURSOR_STAT_PWR);
    54b0:	8c e0       	ldi	r24, 0x0C	; 12
    54b2:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
	lcd_putc(POWERSTAT_CHAR);
    54b6:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <pipe_PowerStatus>
    54ba:	84 ff       	sbrs	r24, 4
    54bc:	02 c0       	rjmp	.+4      	; 0x54c2 <menu_showPowerState+0x18>
    54be:	80 e2       	ldi	r24, 0x20	; 32
    54c0:	01 c0       	rjmp	.+2      	; 0x54c4 <menu_showPowerState+0x1a>
    54c2:	89 e0       	ldi	r24, 0x09	; 9
    54c4:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
	lcd_goto(saveCursor);
    54c8:	8c 2f       	mov	r24, r28
    54ca:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>

    54ce:	cf 91       	pop	r28
    54d0:	08 95       	ret

000054d2 <menuOnEnterPwrOn>:
	return 0;
}

uint8_t menuOnEnterPwrOn(uint8_t arg) {
	(void) arg;
	POWER_ON
    54d2:	85 b1       	in	r24, 0x05	; 5
    54d4:	80 64       	ori	r24, 0x40	; 64
    54d6:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_ON;
    54d8:	83 e1       	ldi	r24, 0x13	; 19
    54da:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    54de:	e5 df       	rcall	.-54     	; 0x54aa <menu_showPowerState>
	return 0;
}
    54e0:	80 e0       	ldi	r24, 0x00	; 0
    54e2:	08 95       	ret

000054e4 <menuOnEnterPwrOff>:

uint8_t menuOnEnterPwrOff(uint8_t arg){
	(void) arg;
	POWER_OFF
    54e4:	85 b1       	in	r24, 0x05	; 5
    54e6:	8f 7b       	andi	r24, 0xBF	; 191
    54e8:	85 b9       	out	0x05, r24	; 5
	pipe_PowerStatus = POWERSTATE_FORCE_OFF;
    54ea:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    54ee:	dd df       	rcall	.-70     	; 0x54aa <menu_showPowerState>
	return 0;
}
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	08 95       	ret

000054f4 <menuOnEnterPwrRest>:

uint8_t menuOnEnterPwrRest(uint8_t arg){
	POWER_OFF
    54f4:	85 b1       	in	r24, 0x05	; 5
    54f6:	8f 7b       	andi	r24, 0xBF	; 191
    54f8:	85 b9       	out	0x05, r24	; 5
	(void) arg;
	pipe_PowerStatus = POWERSTATE_WAIT_FOR_KEY_REALEASE;
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <pipe_PowerStatus>
	menu_showPowerState();
    5500:	d4 df       	rcall	.-88     	; 0x54aa <menu_showPowerState>
	TIMER_SET(TIMER_POWER,TIMER_POWER_INIT_MS)
    5502:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5504:	f8 94       	cli
    5506:	81 e0       	ldi	r24, 0x01	; 1
    5508:	06 c0       	rjmp	.+12     	; 0x5516 <menuOnEnterPwrRest+0x22>
    550a:	ef e2       	ldi	r30, 0x2F	; 47
    550c:	f2 e0       	ldi	r31, 0x02	; 2
    550e:	88 e2       	ldi	r24, 0x28	; 40
    5510:	82 83       	std	Z+2, r24	; 0x02
    5512:	13 82       	std	Z+3, r1	; 0x03
    5514:	80 e0       	ldi	r24, 0x00	; 0
    5516:	81 11       	cpse	r24, r1
    5518:	f8 cf       	rjmp	.-16     	; 0x550a <menuOnEnterPwrRest+0x16>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    551a:	9f bf       	out	0x3f, r25	; 63
	return 0;
}
    551c:	08 95       	ret

0000551e <init_message>:

void pipeMsgInit (void) {
	pipeMsgInIndex = 0;
	pipeMsgOutIndex = 0;
	msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_NO;
	msgPipe_Handling = FALSE;
    551e:	10 92 d2 07 	sts	0x07D2, r1	; 0x8007d2 <msgInIndex>
    5522:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <msgOutIndex>
    5526:	10 92 d1 07 	sts	0x07D1, r1	; 0x8007d1 <msgOverflow>
    552a:	08 95       	ret

0000552c <message_push>:
    552c:	90 91 d2 07 	lds	r25, 0x07D2	; 0x8007d2 <msgInIndex>
    5530:	e9 2f       	mov	r30, r25
    5532:	f0 e0       	ldi	r31, 0x00	; 0
    5534:	ed 52       	subi	r30, 0x2D	; 45
    5536:	f8 4f       	sbci	r31, 0xF8	; 248
    5538:	80 83       	st	Z, r24
    553a:	9f 5f       	subi	r25, 0xFF	; 255
    553c:	9f 71       	andi	r25, 0x1F	; 31
    553e:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <msgOutIndex>
    5542:	98 13       	cpse	r25, r24
    5544:	04 c0       	rjmp	.+8      	; 0x554e <message_push+0x22>
    5546:	8f ef       	ldi	r24, 0xFF	; 255
    5548:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <msgOverflow>
    554c:	08 95       	ret
    554e:	90 93 d2 07 	sts	0x07D2, r25	; 0x8007d2 <msgInIndex>
    5552:	08 95       	ret

00005554 <message_get>:
    5554:	4f b7       	in	r20, 0x3f	; 63
    5556:	f8 94       	cli
    5558:	21 e0       	ldi	r18, 0x01	; 1
    555a:	11 c0       	rjmp	.+34     	; 0x557e <message_get+0x2a>
    555c:	90 91 cf 05 	lds	r25, 0x05CF	; 0x8005cf <msgOutIndex>
    5560:	30 91 d2 07 	lds	r19, 0x07D2	; 0x8007d2 <msgInIndex>
    5564:	8f ef       	ldi	r24, 0xFF	; 255
    5566:	20 e0       	ldi	r18, 0x00	; 0
    5568:	93 17       	cp	r25, r19
    556a:	49 f0       	breq	.+18     	; 0x557e <message_get+0x2a>
    556c:	e9 2f       	mov	r30, r25
    556e:	f0 e0       	ldi	r31, 0x00	; 0
    5570:	ed 52       	subi	r30, 0x2D	; 45
    5572:	f8 4f       	sbci	r31, 0xF8	; 248
    5574:	80 81       	ld	r24, Z
    5576:	9f 5f       	subi	r25, 0xFF	; 255
    5578:	9f 71       	andi	r25, 0x1F	; 31
    557a:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <msgOutIndex>
    557e:	21 11       	cpse	r18, r1
    5580:	ed cf       	rjmp	.-38     	; 0x555c <message_get+0x8>
    5582:	4f bf       	out	0x3f, r20	; 63
    5584:	08 95       	ret

00005586 <message_status>:
    5586:	4f b7       	in	r20, 0x3f	; 63
    5588:	f8 94       	cli
    558a:	91 e0       	ldi	r25, 0x01	; 1
    558c:	08 c0       	rjmp	.+16     	; 0x559e <message_status+0x18>
    558e:	30 91 cf 05 	lds	r19, 0x05CF	; 0x8005cf <msgOutIndex>
    5592:	20 91 d2 07 	lds	r18, 0x07D2	; 0x8007d2 <msgInIndex>
    5596:	90 e0       	ldi	r25, 0x00	; 0
    5598:	80 e0       	ldi	r24, 0x00	; 0
    559a:	32 17       	cp	r19, r18
    559c:	11 f0       	breq	.+4      	; 0x55a2 <message_status+0x1c>
    559e:	8f ef       	ldi	r24, 0xFF	; 255
    55a0:	01 c0       	rjmp	.+2      	; 0x55a4 <message_status+0x1e>
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	91 11       	cpse	r25, r1
    55a6:	f3 cf       	rjmp	.-26     	; 0x558e <message_status+0x8>
    55a8:	4f bf       	out	0x3f, r20	; 63
    55aa:	08 95       	ret

000055ac <pipeMsgPush>:
};

void pipeMsgPush (PipeMessage_t pipeNr) {
    55ac:	ac 01       	movw	r20, r24
	if (msgPipe_Handling){
    55ae:	90 91 f3 07 	lds	r25, 0x07F3	; 0x8007f3 <msgPipe_Handling>
    55b2:	99 23       	and	r25, r25
    55b4:	e1 f0       	breq	.+56     	; 0x55ee <pipeMsgPush+0x42>
		pipeMessages[pipeMsgInIndex++] = pipeNr;
    55b6:	90 91 d0 07 	lds	r25, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    55ba:	21 e0       	ldi	r18, 0x01	; 1
    55bc:	29 0f       	add	r18, r25
    55be:	20 93 d0 07 	sts	0x07D0, r18	; 0x8007d0 <pipeMsgInIndex>
    55c2:	e9 2f       	mov	r30, r25
    55c4:	f0 e0       	ldi	r31, 0x00	; 0
    55c6:	ee 0f       	add	r30, r30
    55c8:	ff 1f       	adc	r31, r31
    55ca:	e0 53       	subi	r30, 0x30	; 48
    55cc:	fa 4f       	sbci	r31, 0xFA	; 250
    55ce:	51 83       	std	Z+1, r21	; 0x01
    55d0:	40 83       	st	Z, r20
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		if (pipeMsgInIndex == pipeMsgOutIndex) {
    55d2:	80 91 f5 07 	lds	r24, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    55d6:	28 13       	cpse	r18, r24
    55d8:	0a c0       	rjmp	.+20     	; 0x55ee <pipeMsgPush+0x42>
			// overflow: reverse
			pipeMsgInIndex--;
    55da:	90 93 d0 07 	sts	0x07D0, r25	; 0x8007d0 <pipeMsgInIndex>
			if (pipeMsgInIndex == 0xFF) { // underflow -> 0xFF
    55de:	9f 3f       	cpi	r25, 0xFF	; 255
    55e0:	19 f4       	brne	.+6      	; 0x55e8 <pipeMsgPush+0x3c>
				pipeMsgInIndex = PIPE_MSG_BUFCOUNT-1;
    55e2:	8f ef       	ldi	r24, 0xFF	; 255
    55e4:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <pipeMsgInIndex>
			}
			msgPipeOverflow = MESSAGE_PIPE_OVERFLOW_YES; // must be reset by application
    55e8:	8f ef       	ldi	r24, 0xFF	; 255
    55ea:	80 93 f4 07 	sts	0x07F4, r24	; 0x8007f4 <msgPipeOverflow>
    55ee:	08 95       	ret

000055f0 <pipeMsgGet>:
		}
	}
}

PipeMessage_t pipeMsgGet (void){
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    55f0:	e0 91 f5 07 	lds	r30, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    55f4:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    55f8:	e8 13       	cpse	r30, r24
    55fa:	03 c0       	rjmp	.+6      	; 0x5602 <pipeMsgGet+0x12>
		PipeMessage_t result;
		result.Message16 =  MESSAGE_PIPE_NIL;
		return (result);
    55fc:	8f ef       	ldi	r24, 0xFF	; 255
    55fe:	9f ef       	ldi	r25, 0xFF	; 255
    5600:	08 95       	ret
	} else {
		PipeMessage_t mess = pipeMessages[pipeMsgOutIndex++];
    5602:	81 e0       	ldi	r24, 0x01	; 1
    5604:	8e 0f       	add	r24, r30
    5606:	80 93 f5 07 	sts	0x07F5, r24	; 0x8007f5 <pipeMsgOutIndex>
    560a:	f0 e0       	ldi	r31, 0x00	; 0
    560c:	ee 0f       	add	r30, r30
    560e:	ff 1f       	adc	r31, r31
    5610:	e0 53       	subi	r30, 0x30	; 48
    5612:	fa 4f       	sbci	r31, 0xFA	; 250
    5614:	80 81       	ld	r24, Z
    5616:	91 81       	ldd	r25, Z+1	; 0x01
		if (pipeMsgInIndex >= PIPE_MSG_BUFCOUNT) {
			pipeMsgInIndex = 0;
		}
		return mess;
	}
};
    5618:	08 95       	ret

0000561a <pipeMsgStatus>:

uint8_t pipeMsgStatus (void) {
	if (pipeMsgOutIndex == pipeMsgInIndex) {
    561a:	90 91 f5 07 	lds	r25, 0x07F5	; 0x8007f5 <pipeMsgOutIndex>
    561e:	80 91 d0 07 	lds	r24, 0x07D0	; 0x8007d0 <pipeMsgInIndex>
    5622:	98 13       	cpse	r25, r24
    5624:	02 c0       	rjmp	.+4      	; 0x562a <pipeMsgStatus+0x10>
		return MESSAGE_STAT_EMPTY;
    5626:	80 e0       	ldi	r24, 0x00	; 0
    5628:	08 95       	ret
	} else {
		return MESSAGE_STAT_NONEMPTY;
    562a:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    562c:	08 95       	ret

0000562e <midi_CouplerReset>:
			// ATTENTION: Midi Channel is ignored by & 0xF0
			// SysexCmd is register on off but first check follwoing data
			if ((midiDataByte[3] == MIDI_MYSYSEX_REGISTER_HEADER) && (midiDataByteCount == 4)) {
				// only if exactly 4 bytes and register MSB is our arbitrary trigger byte
				// ---> turn on/off register
				register_onOff(midiDataByte[3], ((midiDataByte[1] & 0xF0) == MIDI_MYSYSEX_REGISTER_ON) ? REGISTER_ON : REGISTER_OFF);
    562e:	80 e0       	ldi	r24, 0x00	; 0
    5630:	ef e0       	ldi	r30, 0x0F	; 15
    5632:	f8 e0       	ldi	r31, 0x08	; 8
    5634:	03 c0       	rjmp	.+6      	; 0x563c <midi_CouplerReset+0xe>
    5636:	10 82       	st	Z, r1
    5638:	8f 5f       	subi	r24, 0xFF	; 255
    563a:	31 96       	adiw	r30, 0x01	; 1
    563c:	8c 30       	cpi	r24, 0x0C	; 12
    563e:	d8 f3       	brcs	.-10     	; 0x5636 <midi_CouplerReset+0x8>
    5640:	08 95       	ret

00005642 <init_Midi>:
    5642:	f5 cf       	rjmp	.-22     	; 0x562e <midi_CouplerReset>
    5644:	08 95       	ret

00005646 <set_Coupler>:
    5646:	8c 30       	cpi	r24, 0x0C	; 12
    5648:	e8 f4       	brcc	.+58     	; 0x5684 <set_Coupler+0x3e>
    564a:	e8 2f       	mov	r30, r24
    564c:	f0 e0       	ldi	r31, 0x00	; 0
    564e:	e1 5f       	subi	r30, 0xF1	; 241
    5650:	f7 4f       	sbci	r31, 0xF7	; 247
    5652:	9f ef       	ldi	r25, 0xFF	; 255
    5654:	90 83       	st	Z, r25
    5656:	86 30       	cpi	r24, 0x06	; 6
    5658:	10 f0       	brcs	.+4      	; 0x565e <set_Coupler+0x18>
    565a:	86 50       	subi	r24, 0x06	; 6
    565c:	01 c0       	rjmp	.+2      	; 0x5660 <set_Coupler+0x1a>
    565e:	8a 5f       	subi	r24, 0xFA	; 250
    5660:	e8 2f       	mov	r30, r24
    5662:	f0 e0       	ldi	r31, 0x00	; 0
    5664:	df 01       	movw	r26, r30
    5666:	a1 5f       	subi	r26, 0xF1	; 241
    5668:	b7 4f       	sbci	r27, 0xF7	; 247
    566a:	8c 91       	ld	r24, X
    566c:	88 23       	and	r24, r24
    566e:	59 f0       	breq	.+22     	; 0x5686 <set_Coupler+0x40>
    5670:	df 01       	movw	r26, r30
    5672:	a1 5f       	subi	r26, 0xF1	; 241
    5674:	b7 4f       	sbci	r27, 0xF7	; 247
    5676:	1c 92       	st	X, r1
    5678:	ee 0f       	add	r30, r30
    567a:	ff 1f       	adc	r31, r31
    567c:	e7 56       	subi	r30, 0x67	; 103
    567e:	fe 4e       	sbci	r31, 0xEE	; 238
    5680:	84 91       	lpm	r24, Z
    5682:	08 95       	ret
    5684:	80 e0       	ldi	r24, 0x00	; 0
    5686:	08 95       	ret

00005688 <getAllCouplers>:
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	4b e0       	ldi	r20, 0x0B	; 11
    568e:	01 c0       	rjmp	.+2      	; 0x5692 <getAllCouplers+0xa>
    5690:	42 2f       	mov	r20, r18
    5692:	28 2f       	mov	r18, r24
    5694:	39 2f       	mov	r19, r25
    5696:	22 0f       	add	r18, r18
    5698:	33 1f       	adc	r19, r19
    569a:	82 2f       	mov	r24, r18
    569c:	93 2f       	mov	r25, r19
    569e:	e4 2f       	mov	r30, r20
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	e1 5f       	subi	r30, 0xF1	; 241
    56a4:	f7 4f       	sbci	r31, 0xF7	; 247
    56a6:	50 81       	ld	r21, Z
    56a8:	5f 3f       	cpi	r21, 0xFF	; 255
    56aa:	09 f4       	brne	.+2      	; 0x56ae <getAllCouplers+0x26>
    56ac:	81 60       	ori	r24, 0x01	; 1
    56ae:	2f ef       	ldi	r18, 0xFF	; 255
    56b0:	24 0f       	add	r18, r20
    56b2:	41 11       	cpse	r20, r1
    56b4:	ed cf       	rjmp	.-38     	; 0x5690 <getAllCouplers+0x8>
    56b6:	08 95       	ret

000056b8 <setAllCouplers>:
    56b8:	40 e0       	ldi	r20, 0x00	; 0
    56ba:	80 ff       	sbrs	r24, 0
    56bc:	07 c0       	rjmp	.+14     	; 0x56cc <setAllCouplers+0x14>
    56be:	e4 2f       	mov	r30, r20
    56c0:	f0 e0       	ldi	r31, 0x00	; 0
    56c2:	e1 5f       	subi	r30, 0xF1	; 241
    56c4:	f7 4f       	sbci	r31, 0xF7	; 247
    56c6:	2f ef       	ldi	r18, 0xFF	; 255
    56c8:	20 83       	st	Z, r18
    56ca:	05 c0       	rjmp	.+10     	; 0x56d6 <setAllCouplers+0x1e>
    56cc:	e4 2f       	mov	r30, r20
    56ce:	f0 e0       	ldi	r31, 0x00	; 0
    56d0:	e1 5f       	subi	r30, 0xF1	; 241
    56d2:	f7 4f       	sbci	r31, 0xF7	; 247
    56d4:	10 82       	st	Z, r1
    56d6:	28 2f       	mov	r18, r24
    56d8:	39 2f       	mov	r19, r25
    56da:	36 95       	lsr	r19
    56dc:	27 95       	ror	r18
    56de:	82 2f       	mov	r24, r18
    56e0:	93 2f       	mov	r25, r19
    56e2:	4f 5f       	subi	r20, 0xFF	; 255
    56e4:	4c 30       	cpi	r20, 0x0C	; 12
    56e6:	48 f3       	brcs	.-46     	; 0x56ba <setAllCouplers+0x2>
    56e8:	08 95       	ret

000056ea <midiAllReset>:
    56ea:	80 e8       	ldi	r24, 0x80	; 128
    56ec:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <pipeProcessing>
    56f0:	0c 94 47 0d 	jmp	0x1a8e	; 0x1a8e <init_Pipe>
    56f4:	08 95       	ret

000056f6 <registers_CalcCount>:
    56f6:	20 e0       	ldi	r18, 0x00	; 0
    56f8:	30 e0       	ldi	r19, 0x00	; 0
    56fa:	12 c0       	rjmp	.+36     	; 0x5720 <registers_CalcCount+0x2a>
    56fc:	82 2f       	mov	r24, r18
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	fc 01       	movw	r30, r24
    5702:	ee 0f       	add	r30, r30
    5704:	ff 1f       	adc	r31, r31
    5706:	8e 0f       	add	r24, r30
    5708:	9f 1f       	adc	r25, r31
    570a:	fc 01       	movw	r30, r24
    570c:	ea 50       	subi	r30, 0x0A	; 10
    570e:	f8 4f       	sbci	r31, 0xF8	; 248
    5710:	81 81       	ldd	r24, Z+1	; 0x01
    5712:	8f 3f       	cpi	r24, 0xFF	; 255
    5714:	21 f0       	breq	.+8      	; 0x571e <registers_CalcCount+0x28>
    5716:	83 17       	cp	r24, r19
    5718:	10 f0       	brcs	.+4      	; 0x571e <registers_CalcCount+0x28>
    571a:	31 e0       	ldi	r19, 0x01	; 1
    571c:	38 0f       	add	r19, r24
    571e:	2f 5f       	subi	r18, 0xFF	; 255
    5720:	28 30       	cpi	r18, 0x08	; 8
    5722:	60 f3       	brcs	.-40     	; 0x56fc <registers_CalcCount+0x6>
    5724:	30 93 0e 08 	sts	0x080E, r19	; 0x80080e <registerCount>
    5728:	08 95       	ret

0000572a <init_Registers>:
    572a:	8f ef       	ldi	r24, 0xFF	; 255
    572c:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
    5730:	20 e0       	ldi	r18, 0x00	; 0
    5732:	0e c0       	rjmp	.+28     	; 0x5750 <init_Registers+0x26>
    5734:	82 2f       	mov	r24, r18
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	fc 01       	movw	r30, r24
    573a:	ee 0f       	add	r30, r30
    573c:	ff 1f       	adc	r31, r31
    573e:	e8 0f       	add	r30, r24
    5740:	f9 1f       	adc	r31, r25
    5742:	ea 50       	subi	r30, 0x0A	; 10
    5744:	f8 4f       	sbci	r31, 0xF8	; 248
    5746:	8f ef       	ldi	r24, 0xFF	; 255
    5748:	80 83       	st	Z, r24
    574a:	81 83       	std	Z+1, r24	; 0x01
    574c:	12 82       	std	Z+2, r1	; 0x02
    574e:	2f 5f       	subi	r18, 0xFF	; 255
    5750:	28 30       	cpi	r18, 0x08	; 8
    5752:	80 f3       	brcs	.-32     	; 0x5734 <init_Registers+0xa>
    5754:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <eeprom_ReadReg>
    5758:	8f 3f       	cpi	r24, 0xFF	; 255
    575a:	49 f4       	brne	.+18     	; 0x576e <init_Registers+0x44>
    575c:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <registerCount>
    5760:	40 e0       	ldi	r20, 0x00	; 0
    5762:	50 e0       	ldi	r21, 0x00	; 0
    5764:	65 e0       	ldi	r22, 0x05	; 5
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	0e 94 a2 14 	call	0x2944	; 0x2944 <log_putError>
    576c:	01 c0       	rjmp	.+2      	; 0x5770 <init_Registers+0x46>
    576e:	c3 df       	rcall	.-122    	; 0x56f6 <registers_CalcCount>
    5770:	0e 94 04 0b 	call	0x1608	; 0x1608 <eeprom_ReadProg>
    5774:	8f 3f       	cpi	r24, 0xFF	; 255
    5776:	a1 f5       	brne	.+104    	; 0x57e0 <init_Registers+0xb6>
    5778:	2a c0       	rjmp	.+84     	; 0x57ce <init_Registers+0xa4>
    577a:	83 2f       	mov	r24, r19
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	fc 01       	movw	r30, r24
    5780:	ee 0f       	add	r30, r30
    5782:	ff 1f       	adc	r31, r31
    5784:	88 0f       	add	r24, r24
    5786:	99 1f       	adc	r25, r25
    5788:	88 0f       	add	r24, r24
    578a:	99 1f       	adc	r25, r25
    578c:	88 0f       	add	r24, r24
    578e:	99 1f       	adc	r25, r25
    5790:	e8 0f       	add	r30, r24
    5792:	f9 1f       	adc	r31, r25
    5794:	ee 59       	subi	r30, 0x9E	; 158
    5796:	f6 4f       	sbci	r31, 0xF6	; 246
    5798:	e2 0f       	add	r30, r18
    579a:	f1 1d       	adc	r31, r1
    579c:	10 82       	st	Z, r1
    579e:	2f 5f       	subi	r18, 0xFF	; 255
    57a0:	01 c0       	rjmp	.+2      	; 0x57a4 <init_Registers+0x7a>
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	28 30       	cpi	r18, 0x08	; 8
    57a6:	48 f3       	brcs	.-46     	; 0x577a <init_Registers+0x50>
    57a8:	83 2f       	mov	r24, r19
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	fc 01       	movw	r30, r24
    57ae:	ee 0f       	add	r30, r30
    57b0:	ff 1f       	adc	r31, r31
    57b2:	88 0f       	add	r24, r24
    57b4:	99 1f       	adc	r25, r25
    57b6:	88 0f       	add	r24, r24
    57b8:	99 1f       	adc	r25, r25
    57ba:	88 0f       	add	r24, r24
    57bc:	99 1f       	adc	r25, r25
    57be:	e8 0f       	add	r30, r24
    57c0:	f9 1f       	adc	r31, r25
    57c2:	ee 59       	subi	r30, 0x9E	; 158
    57c4:	f6 4f       	sbci	r31, 0xF6	; 246
    57c6:	11 86       	std	Z+9, r1	; 0x09
    57c8:	10 86       	std	Z+8, r1	; 0x08
    57ca:	3f 5f       	subi	r19, 0xFF	; 255
    57cc:	01 c0       	rjmp	.+2      	; 0x57d0 <init_Registers+0xa6>
    57ce:	30 e0       	ldi	r19, 0x00	; 0
    57d0:	30 34       	cpi	r19, 0x40	; 64
    57d2:	38 f3       	brcs	.-50     	; 0x57a2 <init_Registers+0x78>
    57d4:	40 e0       	ldi	r20, 0x00	; 0
    57d6:	50 e0       	ldi	r21, 0x00	; 0
    57d8:	66 e0       	ldi	r22, 0x06	; 6
    57da:	81 e0       	ldi	r24, 0x01	; 1
    57dc:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <log_putError>
    57e0:	08 95       	ret

000057e2 <regNr_to_moduleBit>:
    57e2:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    57e6:	89 17       	cp	r24, r25
    57e8:	a0 f4       	brcc	.+40     	; 0x5812 <regNr_to_moduleBit+0x30>
    57ea:	80 34       	cpi	r24, 0x40	; 64
    57ec:	90 f4       	brcc	.+36     	; 0x5812 <regNr_to_moduleBit+0x30>
    57ee:	28 e0       	ldi	r18, 0x08	; 8
    57f0:	e6 ef       	ldi	r30, 0xF6	; 246
    57f2:	f7 e0       	ldi	r31, 0x07	; 7
    57f4:	30 81       	ld	r19, Z
    57f6:	83 17       	cp	r24, r19
    57f8:	48 f0       	brcs	.+18     	; 0x580c <regNr_to_moduleBit+0x2a>
    57fa:	91 81       	ldd	r25, Z+1	; 0x01
    57fc:	98 17       	cp	r25, r24
    57fe:	30 f0       	brcs	.+12     	; 0x580c <regNr_to_moduleBit+0x2a>
    5800:	22 81       	ldd	r18, Z+2	; 0x02
    5802:	98 2f       	mov	r25, r24
    5804:	93 1b       	sub	r25, r19
    5806:	80 e0       	ldi	r24, 0x00	; 0
    5808:	92 0f       	add	r25, r18
    580a:	08 95       	ret
    580c:	33 96       	adiw	r30, 0x03	; 3
    580e:	21 50       	subi	r18, 0x01	; 1
    5810:	89 f7       	brne	.-30     	; 0x57f4 <regNr_to_moduleBit+0x12>
    5812:	8f ef       	ldi	r24, 0xFF	; 255
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	08 95       	ret

00005818 <moduleBit_to_registerNr>:
    5818:	90 e0       	ldi	r25, 0x00	; 0
    581a:	16 c0       	rjmp	.+44     	; 0x5848 <moduleBit_to_registerNr+0x30>
    581c:	40 91 f8 07 	lds	r20, 0x07F8	; 0x8007f8 <registerMap+0x2>
    5820:	84 17       	cp	r24, r20
    5822:	88 f0       	brcs	.+34     	; 0x5846 <moduleBit_to_registerNr+0x2e>
    5824:	68 2f       	mov	r22, r24
    5826:	70 e0       	ldi	r23, 0x00	; 0
    5828:	e6 ef       	ldi	r30, 0xF6	; 246
    582a:	f7 e0       	ldi	r31, 0x07	; 7
    582c:	21 81       	ldd	r18, Z+1	; 0x01
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	24 0f       	add	r18, r20
    5832:	31 1d       	adc	r19, r1
    5834:	50 81       	ld	r21, Z
    5836:	25 1b       	sub	r18, r21
    5838:	31 09       	sbc	r19, r1
    583a:	26 17       	cp	r18, r22
    583c:	37 07       	cpc	r19, r23
    583e:	1c f0       	brlt	.+6      	; 0x5846 <moduleBit_to_registerNr+0x2e>
    5840:	84 1b       	sub	r24, r20
    5842:	85 0f       	add	r24, r21
    5844:	08 95       	ret
    5846:	9f 5f       	subi	r25, 0xFF	; 255
    5848:	98 30       	cpi	r25, 0x08	; 8
    584a:	40 f3       	brcs	.-48     	; 0x581c <moduleBit_to_registerNr+0x4>
    584c:	8f ef       	ldi	r24, 0xFF	; 255
    584e:	08 95       	ret

00005850 <read_Register>:
    5850:	cf 93       	push	r28
    5852:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5856:	89 17       	cp	r24, r25
    5858:	08 f0       	brcs	.+2      	; 0x585c <read_Register+0xc>
    585a:	3c c0       	rjmp	.+120    	; 0x58d4 <read_Register+0x84>
    585c:	c6 2f       	mov	r28, r22
    585e:	c1 df       	rcall	.-126    	; 0x57e2 <regNr_to_moduleBit>
    5860:	81 11       	cpse	r24, r1
    5862:	30 c0       	rjmp	.+96     	; 0x58c4 <read_Register+0x74>
    5864:	29 2f       	mov	r18, r25
    5866:	2f 71       	andi	r18, 0x1F	; 31
    5868:	92 95       	swap	r25
    586a:	96 95       	lsr	r25
    586c:	97 70       	andi	r25, 0x07	; 7
    586e:	41 e0       	ldi	r20, 0x01	; 1
    5870:	50 e0       	ldi	r21, 0x00	; 0
    5872:	02 c0       	rjmp	.+4      	; 0x5878 <read_Register+0x28>
    5874:	44 0f       	add	r20, r20
    5876:	55 1f       	adc	r21, r21
    5878:	9a 95       	dec	r25
    587a:	e2 f7       	brpl	.-8      	; 0x5874 <read_Register+0x24>
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	f9 01       	movw	r30, r18
    5880:	ee 0f       	add	r30, r30
    5882:	ff 1f       	adc	r31, r31
    5884:	ee 0f       	add	r30, r30
    5886:	ff 1f       	adc	r31, r31
    5888:	ee 0f       	add	r30, r30
    588a:	ff 1f       	adc	r31, r31
    588c:	e7 5b       	subi	r30, 0xB7	; 183
    588e:	fd 4f       	sbci	r31, 0xFD	; 253
    5890:	91 81       	ldd	r25, Z+1	; 0x01
    5892:	94 23       	and	r25, r20
    5894:	11 f4       	brne	.+4      	; 0x589a <read_Register+0x4a>
    5896:	c1 fd       	sbrc	r28, 1
    5898:	17 c0       	rjmp	.+46     	; 0x58c8 <read_Register+0x78>
    589a:	22 0f       	add	r18, r18
    589c:	33 1f       	adc	r19, r19
    589e:	22 0f       	add	r18, r18
    58a0:	33 1f       	adc	r19, r19
    58a2:	22 0f       	add	r18, r18
    58a4:	33 1f       	adc	r19, r19
    58a6:	f9 01       	movw	r30, r18
    58a8:	e7 5b       	subi	r30, 0xB7	; 183
    58aa:	fd 4f       	sbci	r31, 0xFD	; 253
    58ac:	26 81       	ldd	r18, Z+6	; 0x06
    58ae:	42 23       	and	r20, r18
    58b0:	11 f0       	breq	.+4      	; 0x58b6 <read_Register+0x66>
    58b2:	c0 fd       	sbrc	r28, 0
    58b4:	0b c0       	rjmp	.+22     	; 0x58cc <read_Register+0x7c>
    58b6:	99 23       	and	r25, r25
    58b8:	71 f0       	breq	.+28     	; 0x58d6 <read_Register+0x86>
    58ba:	44 23       	and	r20, r20
    58bc:	61 f0       	breq	.+24     	; 0x58d6 <read_Register+0x86>
    58be:	c4 30       	cpi	r28, 0x04	; 4
    58c0:	51 f4       	brne	.+20     	; 0x58d6 <read_Register+0x86>
    58c2:	06 c0       	rjmp	.+12     	; 0x58d0 <read_Register+0x80>
    58c4:	80 e0       	ldi	r24, 0x00	; 0
    58c6:	07 c0       	rjmp	.+14     	; 0x58d6 <read_Register+0x86>
    58c8:	81 e0       	ldi	r24, 0x01	; 1
    58ca:	05 c0       	rjmp	.+10     	; 0x58d6 <read_Register+0x86>
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	03 c0       	rjmp	.+6      	; 0x58d6 <read_Register+0x86>
    58d0:	81 e0       	ldi	r24, 0x01	; 1
    58d2:	01 c0       	rjmp	.+2      	; 0x58d6 <read_Register+0x86>
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	cf 91       	pop	r28
    58d8:	08 95       	ret

000058da <get_RegisterStatus>:
    58da:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    58de:	89 17       	cp	r24, r25
    58e0:	78 f5       	brcc	.+94     	; 0x5940 <get_RegisterStatus+0x66>
    58e2:	7f df       	rcall	.-258    	; 0x57e2 <regNr_to_moduleBit>
    58e4:	81 11       	cpse	r24, r1
    58e6:	28 c0       	rjmp	.+80     	; 0x5938 <get_RegisterStatus+0x5e>
    58e8:	29 2f       	mov	r18, r25
    58ea:	2f 71       	andi	r18, 0x1F	; 31
    58ec:	39 2f       	mov	r19, r25
    58ee:	32 95       	swap	r19
    58f0:	36 95       	lsr	r19
    58f2:	37 70       	andi	r19, 0x07	; 7
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	90 e0       	ldi	r25, 0x00	; 0
    58f8:	02 c0       	rjmp	.+4      	; 0x58fe <get_RegisterStatus+0x24>
    58fa:	88 0f       	add	r24, r24
    58fc:	99 1f       	adc	r25, r25
    58fe:	3a 95       	dec	r19
    5900:	e2 f7       	brpl	.-8      	; 0x58fa <get_RegisterStatus+0x20>
    5902:	30 e0       	ldi	r19, 0x00	; 0
    5904:	f9 01       	movw	r30, r18
    5906:	ee 0f       	add	r30, r30
    5908:	ff 1f       	adc	r31, r31
    590a:	ee 0f       	add	r30, r30
    590c:	ff 1f       	adc	r31, r31
    590e:	ee 0f       	add	r30, r30
    5910:	ff 1f       	adc	r31, r31
    5912:	e7 5b       	subi	r30, 0xB7	; 183
    5914:	fd 4f       	sbci	r31, 0xFD	; 253
    5916:	41 81       	ldd	r20, Z+1	; 0x01
    5918:	48 23       	and	r20, r24
    591a:	81 f0       	breq	.+32     	; 0x593c <get_RegisterStatus+0x62>
    591c:	22 0f       	add	r18, r18
    591e:	33 1f       	adc	r19, r19
    5920:	22 0f       	add	r18, r18
    5922:	33 1f       	adc	r19, r19
    5924:	22 0f       	add	r18, r18
    5926:	33 1f       	adc	r19, r19
    5928:	f9 01       	movw	r30, r18
    592a:	e7 5b       	subi	r30, 0xB7	; 183
    592c:	fd 4f       	sbci	r31, 0xFD	; 253
    592e:	96 81       	ldd	r25, Z+6	; 0x06
    5930:	89 23       	and	r24, r25
    5932:	39 f0       	breq	.+14     	; 0x5942 <get_RegisterStatus+0x68>
    5934:	81 e0       	ldi	r24, 0x01	; 1
    5936:	08 95       	ret
    5938:	80 e0       	ldi	r24, 0x00	; 0
    593a:	08 95       	ret
    593c:	82 e0       	ldi	r24, 0x02	; 2
    593e:	08 95       	ret
    5940:	80 e0       	ldi	r24, 0x00	; 0
    5942:	08 95       	ret

00005944 <count_Registers>:
    5944:	1f 93       	push	r17
    5946:	cf 93       	push	r28
    5948:	df 93       	push	r29
    594a:	18 2f       	mov	r17, r24
    594c:	c0 e0       	ldi	r28, 0x00	; 0
    594e:	d0 e0       	ldi	r29, 0x00	; 0
    5950:	06 c0       	rjmp	.+12     	; 0x595e <count_Registers+0x1a>
    5952:	61 2f       	mov	r22, r17
    5954:	8c 2f       	mov	r24, r28
    5956:	7c df       	rcall	.-264    	; 0x5850 <read_Register>
    5958:	81 11       	cpse	r24, r1
    595a:	df 5f       	subi	r29, 0xFF	; 255
    595c:	cf 5f       	subi	r28, 0xFF	; 255
    595e:	c0 34       	cpi	r28, 0x40	; 64
    5960:	c0 f3       	brcs	.-16     	; 0x5952 <count_Registers+0xe>
    5962:	8d 2f       	mov	r24, r29
    5964:	df 91       	pop	r29
    5966:	cf 91       	pop	r28
    5968:	1f 91       	pop	r17
    596a:	08 95       	ret

0000596c <read_allRegister>:
    596c:	ef 92       	push	r14
    596e:	ff 92       	push	r15
    5970:	0f 93       	push	r16
    5972:	1f 93       	push	r17
    5974:	cf 93       	push	r28
    5976:	df 93       	push	r29
    5978:	7c 01       	movw	r14, r24
    597a:	c0 e0       	ldi	r28, 0x00	; 0
    597c:	d0 e0       	ldi	r29, 0x00	; 0
    597e:	00 e0       	ldi	r16, 0x00	; 0
    5980:	17 c0       	rjmp	.+46     	; 0x59b0 <read_allRegister+0x44>
    5982:	1c 2f       	mov	r17, r28
    5984:	17 70       	andi	r17, 0x07	; 7
    5986:	09 f4       	brne	.+2      	; 0x598a <read_allRegister+0x1e>
    5988:	d0 e0       	ldi	r29, 0x00	; 0
    598a:	d6 95       	lsr	r29
    598c:	63 e0       	ldi	r22, 0x03	; 3
    598e:	8c 2f       	mov	r24, r28
    5990:	5f df       	rcall	.-322    	; 0x5850 <read_Register>
    5992:	88 23       	and	r24, r24
    5994:	11 f0       	breq	.+4      	; 0x599a <read_allRegister+0x2e>
    5996:	d0 68       	ori	r29, 0x80	; 128
    5998:	0f 5f       	subi	r16, 0xFF	; 255
    599a:	17 30       	cpi	r17, 0x07	; 7
    599c:	41 f4       	brne	.+16     	; 0x59ae <read_allRegister+0x42>
    599e:	e1 14       	cp	r14, r1
    59a0:	f1 04       	cpc	r15, r1
    59a2:	29 f0       	breq	.+10     	; 0x59ae <read_allRegister+0x42>
    59a4:	f7 01       	movw	r30, r14
    59a6:	d0 83       	st	Z, r29
    59a8:	c7 01       	movw	r24, r14
    59aa:	01 96       	adiw	r24, 0x01	; 1
    59ac:	7c 01       	movw	r14, r24
    59ae:	cf 5f       	subi	r28, 0xFF	; 255
    59b0:	c0 34       	cpi	r28, 0x40	; 64
    59b2:	38 f3       	brcs	.-50     	; 0x5982 <read_allRegister+0x16>
    59b4:	80 2f       	mov	r24, r16
    59b6:	df 91       	pop	r29
    59b8:	cf 91       	pop	r28
    59ba:	1f 91       	pop	r17
    59bc:	0f 91       	pop	r16
    59be:	ff 90       	pop	r15
    59c0:	ef 90       	pop	r14
    59c2:	08 95       	ret

000059c4 <register_onOff>:
    59c4:	cf 93       	push	r28
    59c6:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    59ca:	89 17       	cp	r24, r25
    59cc:	f0 f4       	brcc	.+60     	; 0x5a0a <register_onOff+0x46>
    59ce:	c6 2f       	mov	r28, r22
    59d0:	08 df       	rcall	.-496    	; 0x57e2 <regNr_to_moduleBit>
    59d2:	81 11       	cpse	r24, r1
    59d4:	1a c0       	rjmp	.+52     	; 0x5a0a <register_onOff+0x46>
    59d6:	89 2f       	mov	r24, r25
    59d8:	8f 71       	andi	r24, 0x1F	; 31
    59da:	92 95       	swap	r25
    59dc:	96 95       	lsr	r25
    59de:	97 70       	andi	r25, 0x07	; 7
    59e0:	c0 ff       	sbrs	r28, 0
    59e2:	0a c0       	rjmp	.+20     	; 0x59f8 <register_onOff+0x34>
    59e4:	61 e0       	ldi	r22, 0x01	; 1
    59e6:	70 e0       	ldi	r23, 0x00	; 0
    59e8:	02 c0       	rjmp	.+4      	; 0x59ee <register_onOff+0x2a>
    59ea:	66 0f       	add	r22, r22
    59ec:	77 1f       	adc	r23, r23
    59ee:	9a 95       	dec	r25
    59f0:	e2 f7       	brpl	.-8      	; 0x59ea <register_onOff+0x26>
    59f2:	0e 94 79 11 	call	0x22f2	; 0x22f2 <pipe_on>
    59f6:	09 c0       	rjmp	.+18     	; 0x5a0a <register_onOff+0x46>
    59f8:	61 e0       	ldi	r22, 0x01	; 1
    59fa:	70 e0       	ldi	r23, 0x00	; 0
    59fc:	02 c0       	rjmp	.+4      	; 0x5a02 <register_onOff+0x3e>
    59fe:	66 0f       	add	r22, r22
    5a00:	77 1f       	adc	r23, r23
    5a02:	9a 95       	dec	r25
    5a04:	e2 f7       	brpl	.-8      	; 0x59fe <register_onOff+0x3a>
    5a06:	0e 94 88 11 	call	0x2310	; 0x2310 <pipe_off>
    5a0a:	cf 91       	pop	r28
    5a0c:	08 95       	ret

00005a0e <program_toRegister>:
		}
	}
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
    5a0e:	bf 92       	push	r11
    5a10:	cf 92       	push	r12
    5a12:	df 92       	push	r13
    5a14:	ef 92       	push	r14
    5a16:	ff 92       	push	r15
    5a18:	0f 93       	push	r16
    5a1a:	1f 93       	push	r17
    5a1c:	cf 93       	push	r28
    5a1e:	df 93       	push	r29
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
    5a20:	80 34       	cpi	r24, 0x40	; 64
    5a22:	08 f0       	brcs	.+2      	; 0x5a26 <program_toRegister+0x18>
    5a24:	40 c0       	rjmp	.+128    	; 0x5aa6 <program_toRegister+0x98>
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5a26:	e8 2e       	mov	r14, r24
    5a28:	f1 2c       	mov	r15, r1
    5a2a:	f7 01       	movw	r30, r14
    5a2c:	ee 0f       	add	r30, r30
    5a2e:	ff 1f       	adc	r31, r31
    5a30:	c7 01       	movw	r24, r14
    5a32:	88 0f       	add	r24, r24
    5a34:	99 1f       	adc	r25, r25
    5a36:	88 0f       	add	r24, r24
    5a38:	99 1f       	adc	r25, r25
    5a3a:	88 0f       	add	r24, r24
    5a3c:	99 1f       	adc	r25, r25
    5a3e:	e8 0f       	add	r30, r24
    5a40:	f9 1f       	adc	r31, r25
    5a42:	ee 59       	subi	r30, 0x9E	; 158
    5a44:	f6 4f       	sbci	r31, 0xF6	; 246
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5a46:	b1 2c       	mov	r11, r1
uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
    5a48:	10 e0       	ldi	r17, 0x00	; 0
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5a4a:	00 e0       	ldi	r16, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5a4c:	18 c0       	rjmp	.+48     	; 0x5a7e <program_toRegister+0x70>
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5a4e:	6f 01       	movw	r12, r30
    5a50:	8f ef       	ldi	r24, 0xFF	; 255
    5a52:	c8 1a       	sub	r12, r24
    5a54:	d8 0a       	sbc	r13, r24
    5a56:	c0 81       	ld	r28, Z
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5a58:	d0 e0       	ldi	r29, 0x00	; 0
    5a5a:	0d c0       	rjmp	.+26     	; 0x5a76 <program_toRegister+0x68>
				if ((regBits & 0x01) != 0) {
    5a5c:	8c 2f       	mov	r24, r28
    5a5e:	81 70       	andi	r24, 0x01	; 1
    5a60:	c0 fd       	sbrc	r28, 0
					result++;
    5a62:	0f 5f       	subi	r16, 0xFF	; 255
				}
				register_onOff(regNr, ((regBits & 0x01) == 0 ? REGISTER_OFF : REGISTER_ON)); // turn this register on/off according to lsb
    5a64:	61 e0       	ldi	r22, 0x01	; 1
    5a66:	81 11       	cpse	r24, r1
    5a68:	01 c0       	rjmp	.+2      	; 0x5a6c <program_toRegister+0x5e>
    5a6a:	60 e0       	ldi	r22, 0x00	; 0
    5a6c:	81 2f       	mov	r24, r17
    5a6e:	aa df       	rcall	.-172    	; 0x59c4 <register_onOff>
				// not implemented registers are ignored by register_onOff
				regBits = regBits >> 1;
    5a70:	c6 95       	lsr	r28
				regNr++;
    5a72:	1f 5f       	subi	r17, 0xFF	; 255
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
			for (uint8_t bitNr = 0; bitNr < 8; bitNr++){
    5a74:	df 5f       	subi	r29, 0xFF	; 255
    5a76:	d8 30       	cpi	r29, 0x08	; 8
    5a78:	88 f3       	brcs	.-30     	; 0x5a5c <program_toRegister+0x4e>
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5a7a:	b3 94       	inc	r11
			// 8 bytes for 64 registers
			// TODO process only implemented registers instead of all possible registers here
			regBits = *(regBytePtr++); // get adress for next 8 registers
    5a7c:	f6 01       	movw	r30, r12
	uint8_t result = 0; // return nr of registers that are turned on by program
	if (program < PROGRAM_COUNT){
		uint8_t regBits;
		uint8_t regNr = 0;
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		for (uint8_t byteNr = 0; byteNr < (REGISTER_COUNT / 8); byteNr++){
    5a7e:	87 e0       	ldi	r24, 0x07	; 7
    5a80:	8b 15       	cp	r24, r11
    5a82:	28 f7       	brcc	.-54     	; 0x5a4e <program_toRegister+0x40>
				regBits = regBits >> 1;
				regNr++;
			}
		}
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
    5a84:	f7 01       	movw	r30, r14
    5a86:	ee 0f       	add	r30, r30
    5a88:	ff 1f       	adc	r31, r31
    5a8a:	ee 0c       	add	r14, r14
    5a8c:	ff 1c       	adc	r15, r15
    5a8e:	ee 0c       	add	r14, r14
    5a90:	ff 1c       	adc	r15, r15
    5a92:	ee 0c       	add	r14, r14
    5a94:	ff 1c       	adc	r15, r15
    5a96:	ee 0d       	add	r30, r14
    5a98:	ff 1d       	adc	r31, r15
    5a9a:	ee 59       	subi	r30, 0x9E	; 158
    5a9c:	f6 4f       	sbci	r31, 0xF6	; 246
		setAllCouplers(couplers);
    5a9e:	80 85       	ldd	r24, Z+8	; 0x08
    5aa0:	91 85       	ldd	r25, Z+9	; 0x09
    5aa2:	0a de       	rcall	.-1004   	; 0x56b8 <setAllCouplers>
    5aa4:	01 c0       	rjmp	.+2      	; 0x5aa8 <program_toRegister+0x9a>
	// TODO Error Logging invalid register
}

uint8_t program_toRegister(uint8_t program){
	// Program 0..63
	uint8_t result = 0; // return nr of registers that are turned on by program
    5aa6:	00 e0       	ldi	r16, 0x00	; 0
		Word_t couplers;
		couplers.wordval = programMap[program].couplers;
		setAllCouplers(couplers);
	}
	return result;
}
    5aa8:	80 2f       	mov	r24, r16
    5aaa:	df 91       	pop	r29
    5aac:	cf 91       	pop	r28
    5aae:	1f 91       	pop	r17
    5ab0:	0f 91       	pop	r16
    5ab2:	ff 90       	pop	r15
    5ab4:	ef 90       	pop	r14
    5ab6:	df 90       	pop	r13
    5ab8:	cf 90       	pop	r12
    5aba:	bf 90       	pop	r11
    5abc:	08 95       	ret

00005abe <midi_ProgramChange>:

void midi_ProgramChange(uint8_t channel, uint8_t program){
    5abe:	cf 93       	push	r28
    5ac0:	df 93       	push	r29
    5ac2:	c8 2f       	mov	r28, r24
    5ac4:	d6 2f       	mov	r29, r22
	if (midi_Setting.AcceptProgChange != FALSE){
    5ac6:	80 91 30 09 	lds	r24, 0x0930	; 0x800930 <midi_Setting+0x2>
    5aca:	81 11       	cpse	r24, r1
    5acc:	14 c0       	rjmp	.+40     	; 0x5af6 <midi_ProgramChange+0x38>
    5ace:	1f c0       	rjmp	.+62     	; 0x5b0e <midi_ProgramChange+0x50>
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
    5ad0:	ec 2f       	mov	r30, r28
    5ad2:	f0 e0       	ldi	r31, 0x00	; 0
    5ad4:	ee 0f       	add	r30, r30
    5ad6:	ff 1f       	adc	r31, r31
    5ad8:	ee 0f       	add	r30, r30
    5ada:	ff 1f       	adc	r31, r31
    5adc:	e8 0f       	add	r30, r24
    5ade:	f1 1d       	adc	r31, r1
    5ae0:	ee 0f       	add	r30, r30
    5ae2:	ff 1f       	adc	r31, r31
    5ae4:	ee 0f       	add	r30, r30
    5ae6:	ff 1f       	adc	r31, r31
    5ae8:	ea 5d       	subi	r30, 0xDA	; 218
    5aea:	f7 4f       	sbci	r31, 0xF7	; 247
    5aec:	90 81       	ld	r25, Z
    5aee:	9f 3f       	cpi	r25, 0xFF	; 255
    5af0:	39 f4       	brne	.+14     	; 0x5b00 <midi_ProgramChange+0x42>
void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
    5af2:	8f 5f       	subi	r24, 0xFF	; 255
    5af4:	01 c0       	rjmp	.+2      	; 0x5af8 <midi_ProgramChange+0x3a>
    5af6:	80 e0       	ldi	r24, 0x00	; 0
    5af8:	84 30       	cpi	r24, 0x04	; 4
    5afa:	50 f3       	brcs	.-44     	; 0x5ad0 <midi_ProgramChange+0x12>
}

void midi_ProgramChange(uint8_t channel, uint8_t program){
	if (midi_Setting.AcceptProgChange != FALSE){
		// V 0.59 program change may be ignored
		uint8_t channelValid = FALSE;
    5afc:	80 e0       	ldi	r24, 0x00	; 0
    5afe:	01 c0       	rjmp	.+2      	; 0x5b02 <midi_ProgramChange+0x44>
		// V 0.58 check MIDI Channel. Accept PC only when channel is in in midiInMap[] !
		for (uint8_t splitCount = 0; splitCount < MIDI_SPLIT_COUNT; splitCount++){
			if (midiInMap[channel][splitCount].manual != MANUAL_NONE){
				// in this section of midi channel a manual is assigned
				channelValid = TRUE;
    5b00:	8f ef       	ldi	r24, 0xFF	; 255
				break;
			}
		}
		if (channelValid == TRUE) {
    5b02:	8f 3f       	cpi	r24, 0xFF	; 255
    5b04:	21 f4       	brne	.+8      	; 0x5b0e <midi_ProgramChange+0x50>
			// only if input channel is assigned to any manual
			program_toRegister(program);
    5b06:	8d 2f       	mov	r24, r29
    5b08:	82 df       	rcall	.-252    	; 0x5a0e <program_toRegister>
			midiLastProgram = program;
    5b0a:	d0 93 00 02 	sts	0x0200, r29	; 0x800200 <__data_start>
		}
	}
	// V 0.58 SW MIDI Through
	if (channel == midiThrough.InChannel){
    5b0e:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    5b12:	c8 13       	cpse	r28, r24
    5b14:	08 c0       	rjmp	.+16     	; 0x5b26 <midi_ProgramChange+0x68>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    5b16:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    5b1a:	8f 3f       	cpi	r24, 0xFF	; 255
    5b1c:	21 f0       	breq	.+8      	; 0x5b26 <midi_ProgramChange+0x68>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(MIDI_PRGCHG | midiThrough.OutChannel);
    5b1e:	80 6c       	ori	r24, 0xC0	; 192
    5b20:	6a d6       	rcall	.+3284   	; 0x67f6 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(program);
    5b22:	8d 2f       	mov	r24, r29
    5b24:	68 d6       	rcall	.+3280   	; 0x67f6 <serial1MIDISend>
    5b26:	df 91       	pop	r29
		}
	}
}
    5b28:	cf 91       	pop	r28
    5b2a:	08 95       	ret

00005b2c <midi_resetRegisters>:
    5b2c:	cf 93       	push	r28


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5b2e:	c0 e0       	ldi	r28, 0x00	; 0
    5b30:	04 c0       	rjmp	.+8      	; 0x5b3a <midi_resetRegisters+0xe>
		register_onOff(i,REGISTER_OFF);
    5b32:	60 e0       	ldi	r22, 0x00	; 0
    5b34:	8c 2f       	mov	r24, r28
    5b36:	46 df       	rcall	.-372    	; 0x59c4 <register_onOff>
	}
}


void midi_resetRegisters(){
	for (uint8_t i = 0; i < registerCount; i++){
    5b38:	cf 5f       	subi	r28, 0xFF	; 255
    5b3a:	80 91 0e 08 	lds	r24, 0x080E	; 0x80080e <registerCount>
    5b3e:	c8 17       	cp	r28, r24
    5b40:	c0 f3       	brcs	.-16     	; 0x5b32 <midi_resetRegisters+0x6>
		register_onOff(i,REGISTER_OFF);
	}
}
    5b42:	cf 91       	pop	r28
    5b44:	08 95       	ret

00005b46 <register_toProgram>:

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
    5b46:	0f 93       	push	r16
    5b48:	1f 93       	push	r17
    5b4a:	cf 93       	push	r28
    5b4c:	df 93       	push	r29
    5b4e:	c8 2f       	mov	r28, r24
    5b50:	06 2f       	mov	r16, r22
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
	if (program < PROGRAM_COUNT){
    5b52:	80 34       	cpi	r24, 0x40	; 64
    5b54:	90 f4       	brcc	.+36     	; 0x5b7a <register_toProgram+0x34>
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
    5b56:	28 2f       	mov	r18, r24
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	c9 01       	movw	r24, r18
    5b5c:	88 0f       	add	r24, r24
    5b5e:	99 1f       	adc	r25, r25
    5b60:	22 0f       	add	r18, r18
    5b62:	33 1f       	adc	r19, r19
    5b64:	22 0f       	add	r18, r18
    5b66:	33 1f       	adc	r19, r19
    5b68:	22 0f       	add	r18, r18
    5b6a:	33 1f       	adc	r19, r19
    5b6c:	82 0f       	add	r24, r18
    5b6e:	93 1f       	adc	r25, r19
		result = read_allRegister(regBytePtr);
    5b70:	8e 59       	subi	r24, 0x9E	; 158
    5b72:	96 4f       	sbci	r25, 0xF6	; 246
    5b74:	fb de       	rcall	.-522    	; 0x596c <read_allRegister>
    5b76:	18 2f       	mov	r17, r24
    5b78:	01 c0       	rjmp	.+2      	; 0x5b7c <register_toProgram+0x36>
}

uint8_t register_toProgram(uint8_t program, uint8_t SaveEEProm){
	// Program 0..63
	// saves current registers to program
	uint8_t result = 0;
    5b7a:	10 e0       	ldi	r17, 0x00	; 0
	if (program < PROGRAM_COUNT){
		uint8_t *regBytePtr = &(programMap[program].registers[0]);
		result = read_allRegister(regBytePtr);
	}
	programMap[program].couplers = getAllCouplers().wordval;
    5b7c:	d0 e0       	ldi	r29, 0x00	; 0
    5b7e:	84 dd       	rcall	.-1272   	; 0x5688 <getAllCouplers>
    5b80:	9e 01       	movw	r18, r28
    5b82:	22 0f       	add	r18, r18
    5b84:	33 1f       	adc	r19, r19
    5b86:	cc 0f       	add	r28, r28
    5b88:	dd 1f       	adc	r29, r29
    5b8a:	cc 0f       	add	r28, r28
    5b8c:	dd 1f       	adc	r29, r29
    5b8e:	cc 0f       	add	r28, r28
    5b90:	dd 1f       	adc	r29, r29
    5b92:	c2 0f       	add	r28, r18
    5b94:	d3 1f       	adc	r29, r19
    5b96:	ce 59       	subi	r28, 0x9E	; 158
    5b98:	d6 4f       	sbci	r29, 0xF6	; 246
    5b9a:	99 87       	std	Y+9, r25	; 0x09
    5b9c:	88 87       	std	Y+8, r24	; 0x08
	if (SaveEEProm) {
    5b9e:	01 11       	cpse	r16, r1
		eeprom_UpdateProg();
    5ba0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <eeprom_UpdateProg>
	}
	return result;
}
    5ba4:	81 2f       	mov	r24, r17
    5ba6:	df 91       	pop	r29
    5ba8:	cf 91       	pop	r28
    5baa:	1f 91       	pop	r17
    5bac:	0f 91       	pop	r16
    5bae:	08 95       	ret

00005bb0 <midi_RegisterMatchProgram>:

uint8_t midi_RegisterMatchProgram(uint8_t program){
    5bb0:	ff 92       	push	r15
    5bb2:	0f 93       	push	r16
    5bb4:	1f 93       	push	r17
    5bb6:	cf 93       	push	r28
    5bb8:	df 93       	push	r29
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5bba:	90 e0       	ldi	r25, 0x00	; 0
    5bbc:	8c 01       	movw	r16, r24
    5bbe:	00 0f       	add	r16, r16
    5bc0:	11 1f       	adc	r17, r17
    5bc2:	88 0f       	add	r24, r24
    5bc4:	99 1f       	adc	r25, r25
    5bc6:	88 0f       	add	r24, r24
    5bc8:	99 1f       	adc	r25, r25
    5bca:	88 0f       	add	r24, r24
    5bcc:	99 1f       	adc	r25, r25
    5bce:	08 0f       	add	r16, r24
    5bd0:	19 1f       	adc	r17, r25
    5bd2:	0e 59       	subi	r16, 0x9E	; 158
    5bd4:	16 4f       	sbci	r17, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5bd6:	c0 e0       	ldi	r28, 0x00	; 0
uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5bd8:	d0 e0       	ldi	r29, 0x00	; 0
}

uint8_t midi_RegisterMatchProgram(uint8_t program){
	// if program registers completely match current output returns number of additionally (manually) activated registers 0..64
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
    5bda:	f1 2c       	mov	r15, r1
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5bdc:	15 c0       	rjmp	.+42     	; 0x5c08 <midi_RegisterMatchProgram+0x58>
		if ((i & 0x07) == 0) {
    5bde:	9c 2f       	mov	r25, r28
    5be0:	97 70       	andi	r25, 0x07	; 7
    5be2:	21 f4       	brne	.+8      	; 0x5bec <midi_RegisterMatchProgram+0x3c>
			// first bit in byte
			tempReg = * progPtr++;
    5be4:	f8 01       	movw	r30, r16
    5be6:	d0 81       	ld	r29, Z
    5be8:	0f 5f       	subi	r16, 0xFF	; 255
    5bea:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		actualReg = get_RegisterStatus(i);
    5bec:	8c 2f       	mov	r24, r28
    5bee:	75 de       	rcall	.-790    	; 0x58da <get_RegisterStatus>
		if ((tempReg & 0x01) != 0) {
    5bf0:	d0 ff       	sbrs	r29, 0
    5bf2:	03 c0       	rjmp	.+6      	; 0x5bfa <midi_RegisterMatchProgram+0x4a>
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
    5bf4:	82 30       	cpi	r24, 0x02	; 2
    5bf6:	31 f0       	breq	.+12     	; 0x5c04 <midi_RegisterMatchProgram+0x54>
    5bf8:	0d c0       	rjmp	.+26     	; 0x5c14 <midi_RegisterMatchProgram+0x64>
				return REG_DONT_MATCH_PROG;
			}
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
    5bfa:	82 30       	cpi	r24, 0x02	; 2
    5bfc:	69 f0       	breq	.+26     	; 0x5c18 <midi_RegisterMatchProgram+0x68>
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
			} else if (actualReg == REGISTER_READ_HWIN) {
    5bfe:	81 30       	cpi	r24, 0x01	; 1
    5c00:	09 f4       	brne	.+2      	; 0x5c04 <midi_RegisterMatchProgram+0x54>
				// is set by HW
				result++; // inc return val
    5c02:	f3 94       	inc	r15
			}
		}
		tempReg = tempReg >> 1;
    5c04:	d6 95       	lsr	r29
	// if program register dont' match: returns 0xFF
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	uint8_t actualReg;
	for (uint8_t i = 0; i < registerCount; i++){
    5c06:	cf 5f       	subi	r28, 0xFF	; 255
    5c08:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <registerCount>
    5c0c:	c9 17       	cp	r28, r25
    5c0e:	38 f3       	brcs	.-50     	; 0x5bde <midi_RegisterMatchProgram+0x2e>
				result++; // inc return val
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
    5c10:	8f 2d       	mov	r24, r15
    5c12:	03 c0       	rjmp	.+6      	; 0x5c1a <midi_RegisterMatchProgram+0x6a>
		actualReg = get_RegisterStatus(i);
		if ((tempReg & 0x01) != 0) {
			// this register should be set
			if (actualReg != REGISTER_READ_SWOUT) {
				// output is not set by SW: return 0xFF
				return REG_DONT_MATCH_PROG;
    5c14:	8f ef       	ldi	r24, 0xFF	; 255
    5c16:	01 c0       	rjmp	.+2      	; 0x5c1a <midi_RegisterMatchProgram+0x6a>
			// else: OK, register is set
		} else {
			// this register should not be set
			if (actualReg == REGISTER_READ_SWOUT) {
				// is set: return 0xFF
				return REG_DONT_MATCH_PROG;
    5c18:	8f ef       	ldi	r24, 0xFF	; 255
			}
		}
		tempReg = tempReg >> 1;
	}
	return result;
}
    5c1a:	df 91       	pop	r29
    5c1c:	cf 91       	pop	r28
    5c1e:	1f 91       	pop	r17
    5c20:	0f 91       	pop	r16
    5c22:	ff 90       	pop	r15
    5c24:	08 95       	ret

00005c26 <midi_CountRegisterInProgram>:

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	fc 01       	movw	r30, r24
    5c2a:	ee 0f       	add	r30, r30
    5c2c:	ff 1f       	adc	r31, r31
    5c2e:	88 0f       	add	r24, r24
    5c30:	99 1f       	adc	r25, r25
    5c32:	88 0f       	add	r24, r24
    5c34:	99 1f       	adc	r25, r25
    5c36:	88 0f       	add	r24, r24
    5c38:	99 1f       	adc	r25, r25
    5c3a:	e8 0f       	add	r30, r24
    5c3c:	f9 1f       	adc	r31, r25
    5c3e:	ee 59       	subi	r30, 0x9E	; 158
    5c40:	f6 4f       	sbci	r31, 0xF6	; 246
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5c42:	90 e0       	ldi	r25, 0x00	; 0

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
    5c44:	20 e0       	ldi	r18, 0x00	; 0
	return result;
}

uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
    5c46:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5c48:	09 c0       	rjmp	.+18     	; 0x5c5c <midi_CountRegisterInProgram+0x36>
		if ((i & 0x07) == 0) {
    5c4a:	39 2f       	mov	r19, r25
    5c4c:	37 70       	andi	r19, 0x07	; 7
    5c4e:	11 f4       	brne	.+4      	; 0x5c54 <midi_CountRegisterInProgram+0x2e>
			// first bit in byte
			tempReg = * progPtr++;
    5c50:	20 81       	ld	r18, Z
    5c52:	31 96       	adiw	r30, 0x01	; 1
		}
		if ((tempReg & 0x01) == 1) {
    5c54:	20 fd       	sbrc	r18, 0
			result++;
    5c56:	8f 5f       	subi	r24, 0xFF	; 255
		}
		tempReg = tempReg >> 1;
    5c58:	26 95       	lsr	r18
uint8_t midi_CountRegisterInProgram(uint8_t program){
	// returns number of registers that are set in this program
	uint8_t result = 0;
	uint8_t* progPtr = &(programMap[program].registers[0]);
	uint8_t tempReg = 0; // just to get rid off warnung unit. var
	for (uint8_t i = 0; i < registerCount; i++){
    5c5a:	9f 5f       	subi	r25, 0xFF	; 255
    5c5c:	30 91 0e 08 	lds	r19, 0x080E	; 0x80080e <registerCount>
    5c60:	93 17       	cp	r25, r19
    5c62:	98 f3       	brcs	.-26     	; 0x5c4a <midi_CountRegisterInProgram+0x24>
		}
		tempReg = tempReg >> 1;
	}
	return result;

}
    5c64:	08 95       	ret

00005c66 <init_Midi2Manual>:

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5c66:	90 e4       	ldi	r25, 0x40	; 64

//------------------------------------- M I D I C H A N N E L   T O   M A N U A L ---------------------------------

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
    5c68:	e6 e2       	ldi	r30, 0x26	; 38
    5c6a:	f8 e0       	ldi	r31, 0x08	; 8
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5c6c:	07 c0       	rjmp	.+14     	; 0x5c7c <init_Midi2Manual+0x16>
		// each channel not assigned to any manual
		pMidiInMap->manual = MANUAL_NONE;
    5c6e:	8f ef       	ldi	r24, 0xFF	; 255
    5c70:	80 83       	st	Z, r24
		pMidiInMap->midiNote = MIDI_NOTE_NONE;
    5c72:	81 83       	std	Z+1, r24	; 0x01
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
    5c74:	83 83       	std	Z+3, r24	; 0x03
		pMidiInMap->noteRange = 0;
    5c76:	12 82       	std	Z+2, r1	; 0x02
		pMidiInMap++;
    5c78:	34 96       	adiw	r30, 0x04	; 4

void init_Midi2Manual(){
	MidiInMap_t *pMidiInMap;
	pMidiInMap = &(midiInMap[0][0]);
	// reset all
	for (uint8_t i = MIDI_CHANNEL_COUNT * MIDI_SPLIT_COUNT; i > 0; i--){
    5c7a:	91 50       	subi	r25, 0x01	; 1
    5c7c:	91 11       	cpse	r25, r1
    5c7e:	f7 cf       	rjmp	.-18     	; 0x5c6e <init_Midi2Manual+0x8>
		pMidiInMap->manualNote = MIDI_NOTE_NONE;
		pMidiInMap->noteRange = 0;
		pMidiInMap++;
	}
	// default entries one split range to each manual Ch1->III, Ch2->II, Ch3->I, Ch4->P
	if (eeprom_ReadMidiInMap() == EE_LOAD_ERROR){
    5c80:	0e 94 fe 09 	call	0x13fc	; 0x13fc <eeprom_ReadMidiInMap>
    5c84:	8f 3f       	cpi	r24, 0xFF	; 255
    5c86:	01 f5       	brne	.+64     	; 0x5cc8 <init_Midi2Manual+0x62>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5c88:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		midiInMap[MIDI_CHANNEL_1][0].manual = MANUAL_III;
    5c8c:	e6 e2       	ldi	r30, 0x26	; 38
    5c8e:	f8 e0       	ldi	r31, 0x08	; 8
    5c90:	10 82       	st	Z, r1
		midiInMap[MIDI_CHANNEL_1][0].midiNote = MIDI_NOTE_C2;
    5c92:	84 e2       	ldi	r24, 0x24	; 36
    5c94:	81 83       	std	Z+1, r24	; 0x01
		midiInMap[MIDI_CHANNEL_1][0].manualNote = MIDI_NOTE_C2;
    5c96:	83 83       	std	Z+3, r24	; 0x03
		midiInMap[MIDI_CHANNEL_1][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5c98:	98 e3       	ldi	r25, 0x38	; 56
    5c9a:	92 83       	std	Z+2, r25	; 0x02
		midiInMap[MIDI_CHANNEL_2][0].manual = MANUAL_II;
    5c9c:	21 e0       	ldi	r18, 0x01	; 1
    5c9e:	20 8b       	std	Z+16, r18	; 0x10
		midiInMap[MIDI_CHANNEL_2][0].midiNote = MIDI_NOTE_C2;
    5ca0:	81 8b       	std	Z+17, r24	; 0x11
		midiInMap[MIDI_CHANNEL_2][0].manualNote = MIDI_NOTE_C2;
    5ca2:	83 8b       	std	Z+19, r24	; 0x13
		midiInMap[MIDI_CHANNEL_2][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5ca4:	92 8b       	std	Z+18, r25	; 0x12
		midiInMap[MIDI_CHANNEL_3][0].manual = MANUAL_I;
    5ca6:	22 e0       	ldi	r18, 0x02	; 2
    5ca8:	20 a3       	std	Z+32, r18	; 0x20
		midiInMap[MIDI_CHANNEL_3][0].midiNote = MIDI_NOTE_C2;
    5caa:	81 a3       	std	Z+33, r24	; 0x21
		midiInMap[MIDI_CHANNEL_3][0].manualNote = MIDI_NOTE_C2;
    5cac:	83 a3       	std	Z+35, r24	; 0x23
		midiInMap[MIDI_CHANNEL_3][0].noteRange = MIDI_NOTE_G6 - MIDI_NOTE_C2 + 1;
    5cae:	92 a3       	std	Z+34, r25	; 0x22
		midiInMap[MIDI_CHANNEL_4][0].manual = MANUAL_P;
    5cb0:	93 e0       	ldi	r25, 0x03	; 3
    5cb2:	90 ab       	std	Z+48, r25	; 0x30
		midiInMap[MIDI_CHANNEL_4][0].midiNote = MIDI_NOTE_C2;
    5cb4:	81 ab       	std	Z+49, r24	; 0x31
		midiInMap[MIDI_CHANNEL_4][0].manualNote = MIDI_NOTE_C2;
    5cb6:	83 ab       	std	Z+51, r24	; 0x33
		midiInMap[MIDI_CHANNEL_4][0].noteRange = MIDI_NOTE_F4 - MIDI_NOTE_C2 + 1;
    5cb8:	8e e1       	ldi	r24, 0x1E	; 30
    5cba:	82 ab       	std	Z+50, r24	; 0x32
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5cbc:	40 e0       	ldi	r20, 0x00	; 0
    5cbe:	50 e0       	ldi	r21, 0x00	; 0
    5cc0:	61 e0       	ldi	r22, 0x01	; 1
    5cc2:	81 e0       	ldi	r24, 0x01	; 1
    5cc4:	0e 94 a2 14 	call	0x2944	; 0x2944 <log_putError>
	}
	if (eeprom_ReadMidiThrough() == EE_LOAD_ERROR){
    5cc8:	0e 94 82 0a 	call	0x1504	; 0x1504 <eeprom_ReadMidiThrough>
    5ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    5cce:	51 f4       	brne	.+20     	; 0x5ce4 <init_Midi2Manual+0x7e>
		midiThrough.InChannel = MIDI_CHANNEL_NONE;
    5cd0:	e4 e2       	ldi	r30, 0x24	; 36
    5cd2:	f8 e0       	ldi	r31, 0x08	; 8
    5cd4:	80 83       	st	Z, r24
		midiThrough.OutChannel = MIDI_CHANNEL_NONE;
    5cd6:	81 83       	std	Z+1, r24	; 0x01
		log_putError(LOG_CAT_EE,LOG_CATEE_MIDI2MAN,0);
    5cd8:	40 e0       	ldi	r20, 0x00	; 0
    5cda:	50 e0       	ldi	r21, 0x00	; 0
    5cdc:	61 e0       	ldi	r22, 0x01	; 1
    5cde:	81 e0       	ldi	r24, 0x01	; 1
    5ce0:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <log_putError>
    5ce4:	08 95       	ret

00005ce6 <init_Manual2Midi>:
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5ce6:	20 e0       	ldi	r18, 0x00	; 0
    5ce8:	09 c0       	rjmp	.+18     	; 0x5cfc <init_Manual2Midi+0x16>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
    5cea:	88 0f       	add	r24, r24
    5cec:	99 1f       	adc	r25, r25
    5cee:	fc 01       	movw	r30, r24
    5cf0:	ea 5d       	subi	r30, 0xDA	; 218
    5cf2:	f6 4f       	sbci	r31, 0xF6	; 246
    5cf4:	8f ef       	ldi	r24, 0xFF	; 255
    5cf6:	80 83       	st	Z, r24
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
    5cf8:	81 83       	std	Z+1, r24	; 0x01
	}
}

void init_Manual2Midi(){
	// reset all
	for (uint8_t i = 0; i << MANUAL_COUNT; i++){
    5cfa:	2f 5f       	subi	r18, 0xFF	; 255
    5cfc:	82 2f       	mov	r24, r18
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	00 97       	sbiw	r24, 0x00	; 0
    5d02:	99 f7       	brne	.-26     	; 0x5cea <init_Manual2Midi+0x4>
		midiOutMap[i].hw_channel = MIDI_CHANNEL_NONE;
		midiOutMap[i].sw_channel = MIDI_CHANNEL_NONE;
	}
	if (eeprom_ReadMidiOutMap() == EE_LOAD_ERROR){
    5d04:	0e 94 26 0a 	call	0x144c	; 0x144c <eeprom_ReadMidiOutMap>
    5d08:	8f 3f       	cpi	r24, 0xFF	; 255
    5d0a:	b1 f4       	brne	.+44     	; 0x5d38 <init_Manual2Midi+0x52>
		midiEEPromLoadError = EE_LOAD_ERROR;
    5d0c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		// default entries
		midiOutMap[MANUAL_III].hw_channel = MIDI_CHANNEL_1;
    5d10:	e6 e2       	ldi	r30, 0x26	; 38
    5d12:	f9 e0       	ldi	r31, 0x09	; 9
    5d14:	10 82       	st	Z, r1
		midiOutMap[MANUAL_II].hw_channel = MIDI_CHANNEL_2;
    5d16:	91 e0       	ldi	r25, 0x01	; 1
    5d18:	92 83       	std	Z+2, r25	; 0x02
		midiOutMap[MANUAL_I].hw_channel = MIDI_CHANNEL_3;
    5d1a:	92 e0       	ldi	r25, 0x02	; 2
    5d1c:	94 83       	std	Z+4, r25	; 0x04
		midiOutMap[MANUAL_P].hw_channel = MIDI_CHANNEL_4;
    5d1e:	93 e0       	ldi	r25, 0x03	; 3
    5d20:	96 83       	std	Z+6, r25	; 0x06
		midi_Setting.TxActivceSense = FALSE;
    5d22:	ee e2       	ldi	r30, 0x2E	; 46
    5d24:	f9 e0       	ldi	r31, 0x09	; 9
    5d26:	10 82       	st	Z, r1
		midi_Setting.VelZero4Off = FALSE;
    5d28:	11 82       	std	Z+1, r1	; 0x01
		midi_Setting.AcceptProgChange = TRUE;
    5d2a:	82 83       	std	Z+2, r24	; 0x02
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
    5d2c:	40 e0       	ldi	r20, 0x00	; 0
    5d2e:	50 e0       	ldi	r21, 0x00	; 0
    5d30:	62 e0       	ldi	r22, 0x02	; 2
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <log_putError>
    5d38:	08 95       	ret

00005d3a <Manual_to_MidiNote>:
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
		}
	}
}

ChannelNote_t Manual_to_MidiNote(uint8_t manual, uint8_t note){
    5d3a:	e8 2f       	mov	r30, r24
	ChannelNote_t result = {MIDI_CHANNEL_NONE,MIDI_NOTE_NONE};
    5d3c:	8f ef       	ldi	r24, 0xFF	; 255
    5d3e:	9f ef       	ldi	r25, 0xFF	; 255
	if (manual < MANUAL_COUNT) {
    5d40:	e4 30       	cpi	r30, 0x04	; 4
    5d42:	50 f4       	brcc	.+20     	; 0x5d58 <Manual_to_MidiNote+0x1e>
		if (midiOutMap[manual].hw_channel != MIDI_CHANNEL_NONE) {
    5d44:	f0 e0       	ldi	r31, 0x00	; 0
    5d46:	ee 0f       	add	r30, r30
    5d48:	ff 1f       	adc	r31, r31
    5d4a:	ea 5d       	subi	r30, 0xDA	; 218
    5d4c:	f6 4f       	sbci	r31, 0xF6	; 246
    5d4e:	20 81       	ld	r18, Z
    5d50:	2f 3f       	cpi	r18, 0xFF	; 255
    5d52:	11 f0       	breq	.+4      	; 0x5d58 <Manual_to_MidiNote+0x1e>
			result.hw_channel = midiOutMap[manual].hw_channel;
    5d54:	82 2f       	mov	r24, r18
			result.note = note; // currently no transpose, might be added later
    5d56:	96 2f       	mov	r25, r22
			// caution: sw_channel used in manual_NoteOnOff() does not look up note ! if transpose added here, do it there, too!
		}
	}
	return(result);
}
    5d58:	08 95       	ret

00005d5a <Midi_updateManualRange>:

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    5d5a:	70 e0       	ldi	r23, 0x00	; 0
    5d5c:	52 c0       	rjmp	.+164    	; 0x5e02 <Midi_updateManualRange+0xa8>
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
			if ((manualMap[i][range].startNote != MIDI_NOTE_NONE) && (manualMap[i][range].endNote != MIDI_NOTE_NONE)){
    5d5e:	87 2f       	mov	r24, r23
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	24 2f       	mov	r18, r20
    5d64:	30 e0       	ldi	r19, 0x00	; 0
    5d66:	f9 01       	movw	r30, r18
    5d68:	ee 0f       	add	r30, r30
    5d6a:	ff 1f       	adc	r31, r31
    5d6c:	df 01       	movw	r26, r30
    5d6e:	a2 0f       	add	r26, r18
    5d70:	b3 1f       	adc	r27, r19
    5d72:	fc 01       	movw	r30, r24
    5d74:	ee 0f       	add	r30, r30
    5d76:	ff 1f       	adc	r31, r31
    5d78:	e8 0f       	add	r30, r24
    5d7a:	f9 1f       	adc	r31, r25
    5d7c:	ee 0f       	add	r30, r30
    5d7e:	ff 1f       	adc	r31, r31
    5d80:	ee 0f       	add	r30, r30
    5d82:	ff 1f       	adc	r31, r31
    5d84:	ea 0f       	add	r30, r26
    5d86:	fb 1f       	adc	r31, r27
    5d88:	ee 5c       	subi	r30, 0xCE	; 206
    5d8a:	f6 4f       	sbci	r31, 0xF6	; 246
    5d8c:	a0 81       	ld	r26, Z
    5d8e:	af 3f       	cpi	r26, 0xFF	; 255
    5d90:	d9 f0       	breq	.+54     	; 0x5dc8 <Midi_updateManualRange+0x6e>
    5d92:	f9 01       	movw	r30, r18
    5d94:	ee 0f       	add	r30, r30
    5d96:	ff 1f       	adc	r31, r31
    5d98:	e2 0f       	add	r30, r18
    5d9a:	f3 1f       	adc	r31, r19
    5d9c:	9c 01       	movw	r18, r24
    5d9e:	22 0f       	add	r18, r18
    5da0:	33 1f       	adc	r19, r19
    5da2:	28 0f       	add	r18, r24
    5da4:	39 1f       	adc	r19, r25
    5da6:	22 0f       	add	r18, r18
    5da8:	33 1f       	adc	r19, r19
    5daa:	22 0f       	add	r18, r18
    5dac:	33 1f       	adc	r19, r19
    5dae:	e2 0f       	add	r30, r18
    5db0:	f3 1f       	adc	r31, r19
    5db2:	ee 5c       	subi	r30, 0xCE	; 206
    5db4:	f6 4f       	sbci	r31, 0xF6	; 246
    5db6:	21 81       	ldd	r18, Z+1	; 0x01
    5db8:	2f 3f       	cpi	r18, 0xFF	; 255
    5dba:	31 f0       	breq	.+12     	; 0x5dc8 <Midi_updateManualRange+0x6e>
				if (manualMap[i][range].startNote < rangeStart) {
    5dbc:	a6 17       	cp	r26, r22
    5dbe:	08 f4       	brcc	.+2      	; 0x5dc2 <Midi_updateManualRange+0x68>
					rangeStart = manualMap[i][range].startNote;
    5dc0:	6a 2f       	mov	r22, r26
				}
				if (manualMap[i][range].endNote > rangeEnd) {
    5dc2:	52 17       	cp	r21, r18
    5dc4:	08 f4       	brcc	.+2      	; 0x5dc8 <Midi_updateManualRange+0x6e>
					rangeEnd = manualMap[i][range].endNote;
    5dc6:	52 2f       	mov	r21, r18
				}
			}
			if ((rangeEnd == 0) || (rangeStart == 0xFF)){
    5dc8:	55 23       	and	r21, r21
    5dca:	11 f0       	breq	.+4      	; 0x5dd0 <Midi_updateManualRange+0x76>
    5dcc:	6f 3f       	cpi	r22, 0xFF	; 255
    5dce:	49 f4       	brne	.+18     	; 0x5de2 <Midi_updateManualRange+0x88>
				ManualNoteRange[i].startNote = MIDI_NOTE_NONE;
    5dd0:	88 0f       	add	r24, r24
    5dd2:	99 1f       	adc	r25, r25
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	e4 5e       	subi	r30, 0xE4	; 228
    5dd8:	f7 4f       	sbci	r31, 0xF7	; 247
    5dda:	8f ef       	ldi	r24, 0xFF	; 255
    5ddc:	80 83       	st	Z, r24
				ManualNoteRange[i].endNote = MIDI_NOTE_NONE;
    5dde:	81 83       	std	Z+1, r24	; 0x01
    5de0:	07 c0       	rjmp	.+14     	; 0x5df0 <Midi_updateManualRange+0x96>
			} else {
				ManualNoteRange[i].startNote = rangeStart;
    5de2:	88 0f       	add	r24, r24
    5de4:	99 1f       	adc	r25, r25
    5de6:	fc 01       	movw	r30, r24
    5de8:	e4 5e       	subi	r30, 0xE4	; 228
    5dea:	f7 4f       	sbci	r31, 0xF7	; 247
    5dec:	60 83       	st	Z, r22
				ManualNoteRange[i].endNote = rangeEnd;
    5dee:	51 83       	std	Z+1, r21	; 0x01

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
		uint8_t rangeEnd = 0;
		uint8_t rangeStart = 0xFF;
		for (uint8_t range = 0; range < RANGE_COUNT; range++){
    5df0:	4f 5f       	subi	r20, 0xFF	; 255
    5df2:	03 c0       	rjmp	.+6      	; 0x5dfa <Midi_updateManualRange+0xa0>
    5df4:	40 e0       	ldi	r20, 0x00	; 0
    5df6:	6f ef       	ldi	r22, 0xFF	; 255
    5df8:	50 e0       	ldi	r21, 0x00	; 0
    5dfa:	44 30       	cpi	r20, 0x04	; 4
    5dfc:	08 f4       	brcc	.+2      	; 0x5e00 <Midi_updateManualRange+0xa6>
    5dfe:	af cf       	rjmp	.-162    	; 0x5d5e <Midi_updateManualRange+0x4>
}

//------------------------------------- M A N U A L   T O   P I P E - I O ---------------------------------

void Midi_updateManualRange(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    5e00:	7f 5f       	subi	r23, 0xFF	; 255
    5e02:	74 30       	cpi	r23, 0x04	; 4
    5e04:	b8 f3       	brcs	.-18     	; 0x5df4 <Midi_updateManualRange+0x9a>
				ManualNoteRange[i].startNote = rangeStart;
				ManualNoteRange[i].endNote = rangeEnd;
			}
		}
	}
}
    5e06:	08 95       	ret

00005e08 <init_Manual2Module>:

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    5e08:	63 e0       	ldi	r22, 0x03	; 3
    5e0a:	28 c0       	rjmp	.+80     	; 0x5e5c <init_Manual2Module+0x54>
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
			manualMap[i][j].startNote = MIDI_NOTE_NONE;
    5e0c:	86 2f       	mov	r24, r22
    5e0e:	06 2e       	mov	r0, r22
    5e10:	00 0c       	add	r0, r0
    5e12:	99 0b       	sbc	r25, r25
    5e14:	42 2f       	mov	r20, r18
    5e16:	02 2e       	mov	r0, r18
    5e18:	00 0c       	add	r0, r0
    5e1a:	55 0b       	sbc	r21, r21
    5e1c:	fa 01       	movw	r30, r20
    5e1e:	ee 0f       	add	r30, r30
    5e20:	ff 1f       	adc	r31, r31
    5e22:	e4 0f       	add	r30, r20
    5e24:	f5 1f       	adc	r31, r21
    5e26:	ac 01       	movw	r20, r24
    5e28:	44 0f       	add	r20, r20
    5e2a:	55 1f       	adc	r21, r21
    5e2c:	da 01       	movw	r26, r20
    5e2e:	a8 0f       	add	r26, r24
    5e30:	b9 1f       	adc	r27, r25
    5e32:	aa 0f       	add	r26, r26
    5e34:	bb 1f       	adc	r27, r27
    5e36:	aa 0f       	add	r26, r26
    5e38:	bb 1f       	adc	r27, r27
    5e3a:	ae 0f       	add	r26, r30
    5e3c:	bf 1f       	adc	r27, r31
    5e3e:	ae 5c       	subi	r26, 0xCE	; 206
    5e40:	b6 4f       	sbci	r27, 0xF6	; 246
    5e42:	3f ef       	ldi	r19, 0xFF	; 255
    5e44:	3c 93       	st	X, r19
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
    5e46:	11 96       	adiw	r26, 0x01	; 1
    5e48:	3c 93       	st	X, r19
    5e4a:	11 97       	sbiw	r26, 0x01	; 1
			manualMap[i][j].bitStart = 0;
    5e4c:	fd 01       	movw	r30, r26
    5e4e:	12 82       	std	Z+2, r1	; 0x02
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
		// make all entries invalid
		for (int8_t j = RANGE_COUNT-1; j >= 0; j--){
    5e50:	21 50       	subi	r18, 0x01	; 1
    5e52:	01 c0       	rjmp	.+2      	; 0x5e56 <init_Manual2Module+0x4e>
    5e54:	23 e0       	ldi	r18, 0x03	; 3
    5e56:	22 23       	and	r18, r18
    5e58:	cc f6       	brge	.-78     	; 0x5e0c <init_Manual2Module+0x4>
		}
	}
}

void init_Manual2Module(){
	for (int8_t i = MANUAL_COUNT-1; i >= 0; i--){
    5e5a:	61 50       	subi	r22, 0x01	; 1
    5e5c:	66 23       	and	r22, r22
    5e5e:	d4 f7       	brge	.-12     	; 0x5e54 <init_Manual2Module+0x4c>
			manualMap[i][j].endNote = MIDI_NOTE_NONE;
			manualMap[i][j].bitStart = 0;
		}
	}
	// default entries
	if (eeprom_ReadManualMap() == EE_LOAD_ERROR){
    5e60:	0e 94 d6 09 	call	0x13ac	; 0x13ac <eeprom_ReadManualMap>
    5e64:	8f 3f       	cpi	r24, 0xFF	; 255
    5e66:	79 f5       	brne	.+94     	; 0x5ec6 <init_Manual2Module+0xbe>
		// no default values for manual map!
		midiEEPromLoadError = EE_LOAD_ERROR;
    5e68:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <midiEEPromLoadError>
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MOD,0);
    5e6c:	40 e0       	ldi	r20, 0x00	; 0
    5e6e:	50 e0       	ldi	r21, 0x00	; 0
    5e70:	63 e0       	ldi	r22, 0x03	; 3
    5e72:	81 e0       	ldi	r24, 0x01	; 1
    5e74:	0e 94 a2 14 	call	0x2944	; 0x2944 <log_putError>
		// V 0.65 default entries for steinmeyer organ
		manualMap[MANUAL_III][0].startNote = MIDI_NOTE_C2;
    5e78:	e2 e3       	ldi	r30, 0x32	; 50
    5e7a:	f9 e0       	ldi	r31, 0x09	; 9
    5e7c:	84 e2       	ldi	r24, 0x24	; 36
    5e7e:	80 83       	st	Z, r24
		manualMap[MANUAL_III][0].endNote = MIDI_NOTE_G4;
    5e80:	33 e4       	ldi	r19, 0x43	; 67
    5e82:	31 83       	std	Z+1, r19	; 0x01
		manualMap[MANUAL_III][0].bitStart = MODULE_BIT(0,0);
    5e84:	12 82       	std	Z+2, r1	; 0x02
		manualMap[MANUAL_III][1].startNote = MIDI_NOTE_GIS4;
    5e86:	24 e4       	ldi	r18, 0x44	; 68
    5e88:	23 83       	std	Z+3, r18	; 0x03
		manualMap[MANUAL_III][1].endNote = MIDI_NOTE_G6;
    5e8a:	9b e5       	ldi	r25, 0x5B	; 91
    5e8c:	94 83       	std	Z+4, r25	; 0x04
		manualMap[MANUAL_III][1].bitStart = MODULE_BIT(1,0);
    5e8e:	40 e2       	ldi	r20, 0x20	; 32
    5e90:	45 83       	std	Z+5, r20	; 0x05
		manualMap[MANUAL_II][0].startNote = MIDI_NOTE_C2;
    5e92:	84 87       	std	Z+12, r24	; 0x0c
		manualMap[MANUAL_II][0].endNote = MIDI_NOTE_G4;
    5e94:	35 87       	std	Z+13, r19	; 0x0d
		manualMap[MANUAL_II][0].bitStart = MODULE_BIT(2,0);
    5e96:	40 e4       	ldi	r20, 0x40	; 64
    5e98:	46 87       	std	Z+14, r20	; 0x0e
		manualMap[MANUAL_II][1].startNote = MIDI_NOTE_GIS4;
    5e9a:	27 87       	std	Z+15, r18	; 0x0f
		manualMap[MANUAL_II][1].endNote = MIDI_NOTE_G6;
    5e9c:	90 8b       	std	Z+16, r25	; 0x10
		manualMap[MANUAL_II][1].bitStart = MODULE_BIT(3,0);
    5e9e:	40 e6       	ldi	r20, 0x60	; 96
    5ea0:	41 8b       	std	Z+17, r20	; 0x11
		manualMap[MANUAL_I][0].startNote = MIDI_NOTE_C2;
    5ea2:	80 8f       	std	Z+24, r24	; 0x18
		manualMap[MANUAL_I][0].endNote = MIDI_NOTE_G4;
    5ea4:	31 8f       	std	Z+25, r19	; 0x19
		manualMap[MANUAL_I][0].bitStart = MODULE_BIT(4,0);
    5ea6:	30 e8       	ldi	r19, 0x80	; 128
    5ea8:	32 8f       	std	Z+26, r19	; 0x1a
		manualMap[MANUAL_I][1].startNote = MIDI_NOTE_GIS4;
    5eaa:	23 8f       	std	Z+27, r18	; 0x1b
		manualMap[MANUAL_I][1].endNote = MIDI_NOTE_G6;
    5eac:	94 8f       	std	Z+28, r25	; 0x1c
		manualMap[MANUAL_I][1].bitStart = MODULE_BIT(5,0);
    5eae:	90 ea       	ldi	r25, 0xA0	; 160
    5eb0:	95 8f       	std	Z+29, r25	; 0x1d
		manualMap[MANUAL_P][0].startNote = MIDI_NOTE_C2;
    5eb2:	84 a3       	std	Z+36, r24	; 0x24
		manualMap[MANUAL_P][0].endNote = MIDI_NOTE_F4;
    5eb4:	81 e4       	ldi	r24, 0x41	; 65
    5eb6:	85 a3       	std	Z+37, r24	; 0x25
		manualMap[MANUAL_P][0].bitStart = MODULE_BIT(6,0);
    5eb8:	80 ec       	ldi	r24, 0xC0	; 192
    5eba:	86 a3       	std	Z+38, r24	; 0x26
		manualMap[MANUAL_R][0].startNote = 0;
    5ebc:	10 aa       	std	Z+48, r1	; 0x30
		manualMap[MANUAL_R][0].endNote = 29;
    5ebe:	8d e1       	ldi	r24, 0x1D	; 29
    5ec0:	81 ab       	std	Z+49, r24	; 0x31
		manualMap[MANUAL_R][0].bitStart = MODULE_BIT(7,0);
    5ec2:	80 ee       	ldi	r24, 0xE0	; 224
    5ec4:	82 ab       	std	Z+50, r24	; 0x32
	}
	Midi_updateManualRange();
    5ec6:	49 cf       	rjmp	.-366    	; 0x5d5a <Midi_updateManualRange>
    5ec8:	08 95       	ret

00005eca <manualNote_to_moduleBit>:
}

ModulBitError_t manualNote_to_moduleBit(uint8_t manual, uint8_t note){
	// returns module+bit_nr in lowByte or 0xFF in HiByte if Note ist not implemented
	ModulBitError_t result;
	if (manual < MANUAL_COUNT) {
    5eca:	84 30       	cpi	r24, 0x04	; 4
    5ecc:	d8 f4       	brcc	.+54     	; 0x5f04 <manualNote_to_moduleBit+0x3a>
		// valid manual
		ManualMap_t *pRange;
		pRange = &(manualMap[manual][0]); // check all Ranges for this manual
    5ece:	90 e0       	ldi	r25, 0x00	; 0
    5ed0:	fc 01       	movw	r30, r24
    5ed2:	ee 0f       	add	r30, r30
    5ed4:	ff 1f       	adc	r31, r31
    5ed6:	e8 0f       	add	r30, r24
    5ed8:	f9 1f       	adc	r31, r25
    5eda:	ee 0f       	add	r30, r30
    5edc:	ff 1f       	adc	r31, r31
    5ede:	ee 0f       	add	r30, r30
    5ee0:	ff 1f       	adc	r31, r31
    5ee2:	ee 5c       	subi	r30, 0xCE	; 206
    5ee4:	f6 4f       	sbci	r31, 0xF6	; 246
		uint8_t i = RANGE_COUNT;
    5ee6:	84 e0       	ldi	r24, 0x04	; 4
		do {
			if ((note >= pRange->startNote) && (note <= pRange->endNote)) {
    5ee8:	20 81       	ld	r18, Z
    5eea:	62 17       	cp	r22, r18
    5eec:	40 f0       	brcs	.+16     	; 0x5efe <manualNote_to_moduleBit+0x34>
    5eee:	91 81       	ldd	r25, Z+1	; 0x01
    5ef0:	96 17       	cp	r25, r22
    5ef2:	28 f0       	brcs	.+10     	; 0x5efe <manualNote_to_moduleBit+0x34>
				// found in this range
				result.error = MODULE_NOERROR;
				result.moduleBit = pRange->bitStart + (note - pRange->startNote);
    5ef4:	92 81       	ldd	r25, Z+2	; 0x02
    5ef6:	62 1b       	sub	r22, r18
				return (result);
    5ef8:	80 e0       	ldi	r24, 0x00	; 0
    5efa:	96 0f       	add	r25, r22
    5efc:	08 95       	ret
			}
			pRange++;
    5efe:	33 96       	adiw	r30, 0x03	; 3
		} while (--i > 0);
    5f00:	81 50       	subi	r24, 0x01	; 1
    5f02:	91 f7       	brne	.-28     	; 0x5ee8 <manualNote_to_moduleBit+0x1e>
	}
	// when we are here: none ofd the defined ranges for this manual contained note
	result.error = MODULE_ERROR;
	return (result);
    5f04:	8f ef       	ldi	r24, 0xFF	; 255
    5f06:	90 e0       	ldi	r25, 0x00	; 0
}
    5f08:	08 95       	ret

00005f0a <moduleBit_to_manualNote>:
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
    5f0a:	b0 e0       	ldi	r27, 0x00	; 0
	// searches map of all manuals and their ranges for this module/bit combination
	// returns manual in hiByte and note in LowByte
	// if no note is found for that Bit, return is MODULE_BIT_NONEXISTENT
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
    5f0c:	e2 e3       	ldi	r30, 0x32	; 50
    5f0e:	f9 e0       	ldi	r31, 0x09	; 9
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5f10:	44 e0       	ldi	r20, 0x04	; 4
    5f12:	16 c0       	rjmp	.+44     	; 0x5f40 <moduleBit_to_manualNote+0x36>
			if ((moduleBit >= pRange->bitStart) && (moduleBit <= pRange->bitStart + (pRange->endNote - pRange->startNote))) {
    5f14:	52 81       	ldd	r21, Z+2	; 0x02
    5f16:	85 17       	cp	r24, r21
    5f18:	88 f0       	brcs	.+34     	; 0x5f3c <moduleBit_to_manualNote+0x32>
    5f1a:	68 2f       	mov	r22, r24
    5f1c:	70 e0       	ldi	r23, 0x00	; 0
    5f1e:	21 81       	ldd	r18, Z+1	; 0x01
    5f20:	a0 81       	ld	r26, Z
    5f22:	30 e0       	ldi	r19, 0x00	; 0
    5f24:	2a 1b       	sub	r18, r26
    5f26:	31 09       	sbc	r19, r1
    5f28:	25 0f       	add	r18, r21
    5f2a:	31 1d       	adc	r19, r1
    5f2c:	26 17       	cp	r18, r22
    5f2e:	37 07       	cpc	r19, r23
    5f30:	2c f0       	brlt	.+10     	; 0x5f3c <moduleBit_to_manualNote+0x32>
				// found
				result.manual = manual;
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
    5f32:	98 2f       	mov	r25, r24
    5f34:	95 1b       	sub	r25, r21
				return(result);
    5f36:	8b 2f       	mov	r24, r27
    5f38:	9a 0f       	add	r25, r26
    5f3a:	08 95       	ret
			}
			pRange++;
    5f3c:	33 96       	adiw	r30, 0x03	; 3
	ManualNote_t result;
	ManualMap_t *pRange;
	pRange = &(manualMap[MANUAL_0][RANGE_0]); // check all Ranges for all manuals
	uint8_t manual = 0;
	do {
		for (uint8_t i = RANGE_COUNT; i > 0; i--){
    5f3e:	41 50       	subi	r20, 0x01	; 1
    5f40:	41 11       	cpse	r20, r1
    5f42:	e8 cf       	rjmp	.-48     	; 0x5f14 <moduleBit_to_manualNote+0xa>
				result.note = pRange->startNote + (moduleBit - pRange->bitStart); // assuming no bit 5-7 in moduleBit and bitStart are the same
				return(result);
			}
			pRange++;
		}
		manual++;
    5f44:	bf 5f       	subi	r27, 0xFF	; 255
	} while (manual <= MANUAL_COUNT);
    5f46:	b5 30       	cpi	r27, 0x05	; 5
    5f48:	18 f3       	brcs	.-58     	; 0x5f10 <moduleBit_to_manualNote+0x6>
	result.manual = MANUAL_NONE;
	// V 0.59 removed warning, moduleBiut may be register!
	// log_putWarning(LOG_CAT_MODULES,LOG_CATMODULES_UNKNOWNINP,moduleBit);
	return (result); // actually this should not hapen if manaulRange is setup up correctly according to HW
    5f4a:	8f ef       	ldi	r24, 0xFF	; 255
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
}
    5f4e:	08 95       	ret

00005f50 <manual_NoteOnOff>:

void manual_NoteOnOff(uint8_t manual, uint8_t note, uint8_t onOff){
    5f50:	ef 92       	push	r14
    5f52:	ff 92       	push	r15
    5f54:	0f 93       	push	r16
    5f56:	1f 93       	push	r17
    5f58:	cf 93       	push	r28
    5f5a:	df 93       	push	r29
    5f5c:	c8 2f       	mov	r28, r24
    5f5e:	e6 2e       	mov	r14, r22
    5f60:	f4 2e       	mov	r15, r20
	ModulBitError_t moduleInfo;
	moduleInfo = manualNote_to_moduleBit(manual, note);
    5f62:	b3 df       	rcall	.-154    	; 0x5eca <manualNote_to_moduleBit>
	// returns mmmb bbbb in LowByte
	uint8_t modulNrMask = 1 << (MODULE_BIT_TO_MODULE(moduleInfo.moduleBit)); // 0000 0001 = Module 0, 1000 0000 = Module 7
    5f64:	29 2f       	mov	r18, r25
    5f66:	22 95       	swap	r18
    5f68:	26 95       	lsr	r18
    5f6a:	27 70       	andi	r18, 0x07	; 7
    5f6c:	01 e0       	ldi	r16, 0x01	; 1
    5f6e:	10 e0       	ldi	r17, 0x00	; 0
    5f70:	02 c0       	rjmp	.+4      	; 0x5f76 <manual_NoteOnOff+0x26>
    5f72:	00 0f       	add	r16, r16
    5f74:	11 1f       	adc	r17, r17
    5f76:	2a 95       	dec	r18
    5f78:	e2 f7       	brpl	.-8      	; 0x5f72 <manual_NoteOnOff+0x22>
	uint8_t bitNr = MODULE_BIT_TO_BIT(moduleInfo.moduleBit);
    5f7a:	d9 2f       	mov	r29, r25
    5f7c:	df 71       	andi	r29, 0x1F	; 31
	if (moduleInfo.error == MODULE_NOERROR) {
    5f7e:	81 11       	cpse	r24, r1
    5f80:	18 c0       	rjmp	.+48     	; 0x5fb2 <manual_NoteOnOff+0x62>
		if (onOff == NOTE_OFF) {
    5f82:	f1 10       	cpse	r15, r1
    5f84:	05 c0       	rjmp	.+10     	; 0x5f90 <manual_NoteOnOff+0x40>
			// note off -> write 1 to pipe mosfet
			pipe_off(bitNr,modulNrMask);
    5f86:	60 2f       	mov	r22, r16
    5f88:	8d 2f       	mov	r24, r29
    5f8a:	0e 94 88 11 	call	0x2310	; 0x2310 <pipe_off>
    5f8e:	04 c0       	rjmp	.+8      	; 0x5f98 <manual_NoteOnOff+0x48>
		} else {
			// note on -> write 0 to pipe mosfet
			pipe_on(bitNr,modulNrMask);
    5f90:	60 2f       	mov	r22, r16
    5f92:	8d 2f       	mov	r24, r29
    5f94:	0e 94 79 11 	call	0x22f2	; 0x22f2 <pipe_on>
		}
		// V0.62 direct pipe message if module can't be written
		if ((modulNrMask & pipe_Module.AssnWrite) == 0){
    5f98:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pipe_Module+0x1>
    5f9c:	80 23       	and	r24, r16
    5f9e:	49 f4       	brne	.+18     	; 0x5fb2 <manual_NoteOnOff+0x62>
			PipeMessage_t myMessage;
			myMessage.message8[MSG_BYTE_MODULEBITS] = modulNrMask;
			myMessage.message8[MSG_BYTE_CMD_SHIFTBIT] = ((onOff == NOTE_ON) ? MESSAGE_PIPE_ON_HI : MESSAGE_PIPE_OFF_HI )| bitNr;
    5fa0:	81 e0       	ldi	r24, 0x01	; 1
    5fa2:	f8 12       	cpse	r15, r24
    5fa4:	02 c0       	rjmp	.+4      	; 0x5faa <manual_NoteOnOff+0x5a>
    5fa6:	90 e2       	ldi	r25, 0x20	; 32
    5fa8:	01 c0       	rjmp	.+2      	; 0x5fac <manual_NoteOnOff+0x5c>
    5faa:	90 e0       	ldi	r25, 0x00	; 0
			pipeMsgPush(myMessage);
    5fac:	80 2f       	mov	r24, r16
    5fae:	9d 2b       	or	r25, r29
    5fb0:	fd da       	rcall	.-2566   	; 0x55ac <pipeMsgPush>
		}
	}
	// V0.61 midi sw_channel output
	if (midiOutMap[manual].sw_channel != MIDI_CHANNEL_NONE){
    5fb2:	ec 2f       	mov	r30, r28
    5fb4:	f0 e0       	ldi	r31, 0x00	; 0
    5fb6:	ee 0f       	add	r30, r30
    5fb8:	ff 1f       	adc	r31, r31
    5fba:	ea 5d       	subi	r30, 0xDA	; 218
    5fbc:	f6 4f       	sbci	r31, 0xF6	; 246
    5fbe:	81 81       	ldd	r24, Z+1	; 0x01
    5fc0:	8f 3f       	cpi	r24, 0xFF	; 255
    5fc2:	e1 f0       	breq	.+56     	; 0x5ffc <manual_NoteOnOff+0xac>
		// lines from midiKeyPress_Process():
		// if settings are appropriate: note off = use note on an velocity = 0 to turn off note (less bytes !) / or send real not off!
		serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiOutMap[manual].sw_channel);
    5fc4:	91 e0       	ldi	r25, 0x01	; 1
    5fc6:	f9 16       	cp	r15, r25
    5fc8:	31 f0       	breq	.+12     	; 0x5fd6 <manual_NoteOnOff+0x86>
    5fca:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    5fce:	99 23       	and	r25, r25
    5fd0:	21 f0       	breq	.+8      	; 0x5fda <manual_NoteOnOff+0x8a>
    5fd2:	90 e9       	ldi	r25, 0x90	; 144
    5fd4:	03 c0       	rjmp	.+6      	; 0x5fdc <manual_NoteOnOff+0x8c>
    5fd6:	90 e9       	ldi	r25, 0x90	; 144
    5fd8:	01 c0       	rjmp	.+2      	; 0x5fdc <manual_NoteOnOff+0x8c>
    5fda:	90 e8       	ldi	r25, 0x80	; 128
    5fdc:	89 2b       	or	r24, r25
		serial1MIDISend(note);
    5fde:	0b d4       	rcall	.+2070   	; 0x67f6 <serial1MIDISend>
    5fe0:	8e 2d       	mov	r24, r14
    5fe2:	09 d4       	rcall	.+2066   	; 0x67f6 <serial1MIDISend>
		serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    5fe4:	f1 10       	cpse	r15, r1
    5fe6:	06 c0       	rjmp	.+12     	; 0x5ff4 <manual_NoteOnOff+0xa4>
    5fe8:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    5fec:	81 11       	cpse	r24, r1
    5fee:	04 c0       	rjmp	.+8      	; 0x5ff8 <manual_NoteOnOff+0xa8>
    5ff0:	80 e4       	ldi	r24, 0x40	; 64
    5ff2:	03 c0       	rjmp	.+6      	; 0x5ffa <manual_NoteOnOff+0xaa>
    5ff4:	80 e4       	ldi	r24, 0x40	; 64
    5ff6:	01 c0       	rjmp	.+2      	; 0x5ffa <manual_NoteOnOff+0xaa>
    5ff8:	80 e0       	ldi	r24, 0x00	; 0
    5ffa:	fd d3       	rcall	.+2042   	; 0x67f6 <serial1MIDISend>
		// caution: sw_channel should be used only if no HW output implemented for manual. If used midi through should not be set for
		// corresponding channel/manual
	}
}
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	1f 91       	pop	r17
    6002:	0f 91       	pop	r16
    6004:	ff 90       	pop	r15
    6006:	ef 90       	pop	r14
    6008:	08 95       	ret

0000600a <midiAllNotesOff>:
void midiAllReset(){
	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
    600a:	cf 92       	push	r12
    600c:	df 92       	push	r13
    600e:	ef 92       	push	r14
    6010:	ff 92       	push	r15
    6012:	0f 93       	push	r16
    6014:	1f 93       	push	r17
    6016:	cf 93       	push	r28
    6018:	df 93       	push	r29
    601a:	c8 2e       	mov	r12, r24
	uint8_t splitRange = 0;
    601c:	d1 2c       	mov	r13, r1
	while (splitRange < MIDI_SPLIT_COUNT){
    601e:	3c c0       	rjmp	.+120    	; 0x6098 <midiAllNotesOff+0x8e>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
    6020:	0c 2d       	mov	r16, r12
    6022:	10 e0       	ldi	r17, 0x00	; 0
    6024:	cd 2d       	mov	r28, r13
    6026:	d0 e0       	ldi	r29, 0x00	; 0
    6028:	f8 01       	movw	r30, r16
    602a:	ee 0f       	add	r30, r30
    602c:	ff 1f       	adc	r31, r31
    602e:	ee 0f       	add	r30, r30
    6030:	ff 1f       	adc	r31, r31
    6032:	ec 0f       	add	r30, r28
    6034:	fd 1f       	adc	r31, r29
    6036:	ee 0f       	add	r30, r30
    6038:	ff 1f       	adc	r31, r31
    603a:	ee 0f       	add	r30, r30
    603c:	ff 1f       	adc	r31, r31
    603e:	ea 5d       	subi	r30, 0xDA	; 218
    6040:	f7 4f       	sbci	r31, 0xF7	; 247
    6042:	80 81       	ld	r24, Z
    6044:	84 30       	cpi	r24, 0x04	; 4
    6046:	38 f5       	brcc	.+78     	; 0x6096 <midiAllNotesOff+0x8c>
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
    6048:	f8 01       	movw	r30, r16
    604a:	ee 0f       	add	r30, r30
    604c:	ff 1f       	adc	r31, r31
    604e:	ee 0f       	add	r30, r30
    6050:	ff 1f       	adc	r31, r31
    6052:	ec 0f       	add	r30, r28
    6054:	fd 1f       	adc	r31, r29
    6056:	ee 0f       	add	r30, r30
    6058:	ff 1f       	adc	r31, r31
    605a:	ee 0f       	add	r30, r30
    605c:	ff 1f       	adc	r31, r31
    605e:	ea 5d       	subi	r30, 0xDA	; 218
    6060:	f7 4f       	sbci	r31, 0xF7	; 247
    6062:	63 81       	ldd	r22, Z+3	; 0x03
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6064:	f2 80       	ldd	r15, Z+2	; 0x02
    6066:	15 c0       	rjmp	.+42     	; 0x6092 <midiAllNotesOff+0x88>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    6068:	ee 24       	eor	r14, r14
    606a:	e3 94       	inc	r14
    606c:	e6 0e       	add	r14, r22
    606e:	f8 01       	movw	r30, r16
    6070:	ee 0f       	add	r30, r30
    6072:	ff 1f       	adc	r31, r31
    6074:	ee 0f       	add	r30, r30
    6076:	ff 1f       	adc	r31, r31
    6078:	ec 0f       	add	r30, r28
    607a:	fd 1f       	adc	r31, r29
    607c:	ee 0f       	add	r30, r30
    607e:	ff 1f       	adc	r31, r31
    6080:	ee 0f       	add	r30, r30
    6082:	ff 1f       	adc	r31, r31
    6084:	ea 5d       	subi	r30, 0xDA	; 218
    6086:	f7 4f       	sbci	r31, 0xF7	; 247
    6088:	40 e0       	ldi	r20, 0x00	; 0
    608a:	80 81       	ld	r24, Z
    608c:	61 df       	rcall	.-318    	; 0x5f50 <manual_NoteOnOff>
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    608e:	fa 94       	dec	r15
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
    6090:	6e 2d       	mov	r22, r14
		// for all split ranges
		if (midiInMap[channel][splitRange].manual < MANUAL_COUNT) {
			// splt range is set to a manual
			uint8_t note = midiInMap[channel][splitRange].manualNote; // start with this note
			// for all notes in split range
			for (uint8_t i = midiInMap[channel][splitRange].noteRange; i > 0; i--){
    6092:	f1 10       	cpse	r15, r1
    6094:	e9 cf       	rjmp	.-46     	; 0x6068 <midiAllNotesOff+0x5e>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
    6096:	d3 94       	inc	r13
	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}

void midiAllNotesOff(uint8_t channel){
	uint8_t splitRange = 0;
	while (splitRange < MIDI_SPLIT_COUNT){
    6098:	83 e0       	ldi	r24, 0x03	; 3
    609a:	8d 15       	cp	r24, r13
    609c:	08 f0       	brcs	.+2      	; 0x60a0 <midiAllNotesOff+0x96>
    609e:	c0 cf       	rjmp	.-128    	; 0x6020 <midiAllNotesOff+0x16>
				manual_NoteOnOff(midiInMap[channel][splitRange].manual, note++, NOTE_OFF);
			}
		}
		splitRange++;
	}
}
    60a0:	df 91       	pop	r29
    60a2:	cf 91       	pop	r28
    60a4:	1f 91       	pop	r17
    60a6:	0f 91       	pop	r16
    60a8:	ff 90       	pop	r15
    60aa:	ef 90       	pop	r14
    60ac:	df 90       	pop	r13
    60ae:	cf 90       	pop	r12
    60b0:	08 95       	ret

000060b2 <midi_ManualOff>:

void midi_ManualOff(uint8_t manual){
    60b2:	0f 93       	push	r16
    60b4:	1f 93       	push	r17
    60b6:	cf 93       	push	r28
    60b8:	df 93       	push	r29
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
    60ba:	84 30       	cpi	r24, 0x04	; 4
    60bc:	08 f5       	brcc	.+66     	; 0x6100 <midi_ManualOff+0x4e>
    60be:	08 2f       	mov	r16, r24
    60c0:	10 e0       	ldi	r17, 0x00	; 0
    60c2:	f8 01       	movw	r30, r16
    60c4:	ee 0f       	add	r30, r30
    60c6:	ff 1f       	adc	r31, r31
    60c8:	e4 5e       	subi	r30, 0xE4	; 228
    60ca:	f7 4f       	sbci	r31, 0xF7	; 247
    60cc:	c0 81       	ld	r28, Z
    60ce:	cf 3f       	cpi	r28, 0xFF	; 255
    60d0:	b9 f0       	breq	.+46     	; 0x6100 <midi_ManualOff+0x4e>
    60d2:	d8 2f       	mov	r29, r24
    60d4:	f8 01       	movw	r30, r16
    60d6:	ee 0f       	add	r30, r30
    60d8:	ff 1f       	adc	r31, r31
    60da:	e4 5e       	subi	r30, 0xE4	; 228
    60dc:	f7 4f       	sbci	r31, 0xF7	; 247
    60de:	81 81       	ldd	r24, Z+1	; 0x01
    60e0:	8f 3f       	cpi	r24, 0xFF	; 255
    60e2:	31 f4       	brne	.+12     	; 0x60f0 <midi_ManualOff+0x3e>
    60e4:	0d c0       	rjmp	.+26     	; 0x6100 <midi_ManualOff+0x4e>
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
			manual_NoteOnOff(manual,note,NOTE_OFF);
    60e6:	40 e0       	ldi	r20, 0x00	; 0
    60e8:	6c 2f       	mov	r22, r28
    60ea:	8d 2f       	mov	r24, r29
    60ec:	31 df       	rcall	.-414    	; 0x5f50 <manual_NoteOnOff>
}

void midi_ManualOff(uint8_t manual){
	// turn all notes off of this manual
	if ((manual < MANUAL_COUNT) && (ManualNoteRange[manual].startNote != MIDI_NOTE_NONE) && (ManualNoteRange[manual].endNote != MIDI_NOTE_NONE)){
		for (uint8_t note = ManualNoteRange[manual].startNote; note <= ManualNoteRange[manual].endNote; note++){
    60ee:	cf 5f       	subi	r28, 0xFF	; 255
    60f0:	f8 01       	movw	r30, r16
    60f2:	ee 0f       	add	r30, r30
    60f4:	ff 1f       	adc	r31, r31
    60f6:	e4 5e       	subi	r30, 0xE4	; 228
    60f8:	f7 4f       	sbci	r31, 0xF7	; 247
    60fa:	91 81       	ldd	r25, Z+1	; 0x01
    60fc:	9c 17       	cp	r25, r28
    60fe:	98 f7       	brcc	.-26     	; 0x60e6 <midi_ManualOff+0x34>
			manual_NoteOnOff(manual,note,NOTE_OFF);
		}
	}
}
    6100:	df 91       	pop	r29
    6102:	cf 91       	pop	r28
    6104:	1f 91       	pop	r17
    6106:	0f 91       	pop	r16
    6108:	08 95       	ret

0000610a <midi_AllManualsOff>:

void midi_AllManualsOff(){
    610a:	cf 93       	push	r28
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    610c:	c0 e0       	ldi	r28, 0x00	; 0
    610e:	03 c0       	rjmp	.+6      	; 0x6116 <midi_AllManualsOff+0xc>
		midi_ManualOff(manual);
    6110:	8c 2f       	mov	r24, r28
    6112:	cf df       	rcall	.-98     	; 0x60b2 <midi_ManualOff>
		}
	}
}

void midi_AllManualsOff(){
	for (uint8_t manual = 0; manual < MANUAL_COUNT; manual++){
    6114:	cf 5f       	subi	r28, 0xFF	; 255
    6116:	c4 30       	cpi	r28, 0x04	; 4
    6118:	d8 f3       	brcs	.-10     	; 0x6110 <midi_AllManualsOff+0x6>
		midi_ManualOff(manual);
	}

// 	pipeProcessing = PIPE_IO_DISABLE; // do not process pipe[] now
// 	init_Pipe(); // defines IO, resets pipe[], here pipeProcessing will be activated again
}
    611a:	cf 91       	pop	r28
    611c:	08 95       	ret

0000611e <midi_CheckRxActiveSense>:

void midi_CheckRxActiveSense(){
	if (midiRxActivceSensing != 0){
    611e:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <midiRxActivceSensing>
    6122:	88 23       	and	r24, r24
    6124:	39 f0       	breq	.+14     	; 0x6134 <midi_CheckRxActiveSense+0x16>
		// only when activated
		if (TIMER_ELAPSED(TIMER_ACTIVESENSE)) {
    6126:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <swTimer+0x6>
    612a:	81 11       	cpse	r24, r1
    612c:	03 c0       	rjmp	.+6      	; 0x6134 <midi_CheckRxActiveSense+0x16>
			// watchdog for active sense is elapsed: shut down outputs!
			midi_AllManualsOff();
    612e:	ed df       	rcall	.-38     	; 0x610a <midi_AllManualsOff>
			midiRxActivceSensing = 0; // turn off active Sense
    6130:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <midiRxActivceSensing>
    6134:	08 95       	ret

00006136 <midiNote_to_Manual>:
		midi_Setting.AcceptProgChange = TRUE;
		log_putError(LOG_CAT_EE,LOG_CATEE_MAN2MIDI,0);
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
    6136:	0f 93       	push	r16
    6138:	1f 93       	push	r17
    613a:	cf 93       	push	r28
    613c:	df 93       	push	r29
    613e:	06 2f       	mov	r16, r22
    6140:	14 2f       	mov	r17, r20
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
    6142:	d8 2f       	mov	r29, r24
    6144:	df 70       	andi	r29, 0x0F	; 15
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    6146:	c0 e0       	ldi	r28, 0x00	; 0
	}
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
    6148:	90 e0       	ldi	r25, 0x00	; 0
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    614a:	3c c0       	rjmp	.+120    	; 0x61c4 <midiNote_to_Manual+0x8e>
		if (midiInMap[channel][i].manual < MANUAL_COUNT){
    614c:	4d 2f       	mov	r20, r29
    614e:	50 e0       	ldi	r21, 0x00	; 0
    6150:	2c 2f       	mov	r18, r28
    6152:	30 e0       	ldi	r19, 0x00	; 0
    6154:	fa 01       	movw	r30, r20
    6156:	ee 0f       	add	r30, r30
    6158:	ff 1f       	adc	r31, r31
    615a:	ee 0f       	add	r30, r30
    615c:	ff 1f       	adc	r31, r31
    615e:	e2 0f       	add	r30, r18
    6160:	f3 1f       	adc	r31, r19
    6162:	ee 0f       	add	r30, r30
    6164:	ff 1f       	adc	r31, r31
    6166:	ee 0f       	add	r30, r30
    6168:	ff 1f       	adc	r31, r31
    616a:	ea 5d       	subi	r30, 0xDA	; 218
    616c:	f7 4f       	sbci	r31, 0xF7	; 247
    616e:	80 81       	ld	r24, Z
    6170:	84 30       	cpi	r24, 0x04	; 4
    6172:	38 f5       	brcc	.+78     	; 0x61c2 <midiNote_to_Manual+0x8c>
			// valid entry
			int8_t noteBase0 = note - midiInMap[channel][i].midiNote; // minus if invalid
    6174:	df 01       	movw	r26, r30
    6176:	61 81       	ldd	r22, Z+1	; 0x01
    6178:	70 2f       	mov	r23, r16
    617a:	76 1b       	sub	r23, r22
    617c:	67 2f       	mov	r22, r23
			if ((noteBase0 >= 0) && (noteBase0 < midiInMap[channel][i].noteRange)) {
    617e:	0a f1       	brmi	.+66     	; 0x61c2 <midiNote_to_Manual+0x8c>
    6180:	fd 01       	movw	r30, r26
    6182:	e2 81       	ldd	r30, Z+2	; 0x02
    6184:	f0 e0       	ldi	r31, 0x00	; 0
    6186:	a7 2f       	mov	r26, r23
    6188:	77 0f       	add	r23, r23
    618a:	bb 0b       	sbc	r27, r27
    618c:	ae 17       	cp	r26, r30
    618e:	bf 07       	cpc	r27, r31
    6190:	c4 f4       	brge	.+48     	; 0x61c2 <midiNote_to_Manual+0x8c>
				// only if not is in range
				uint8_t manual = midiInMap[channel][i].manual;
				uint8_t manNote = noteBase0 + midiInMap[channel][i].manualNote;
    6192:	fa 01       	movw	r30, r20
    6194:	ee 0f       	add	r30, r30
    6196:	ff 1f       	adc	r31, r31
    6198:	ee 0f       	add	r30, r30
    619a:	ff 1f       	adc	r31, r31
    619c:	e2 0f       	add	r30, r18
    619e:	f3 1f       	adc	r31, r19
    61a0:	ee 0f       	add	r30, r30
    61a2:	ff 1f       	adc	r31, r31
    61a4:	ee 0f       	add	r30, r30
    61a6:	ff 1f       	adc	r31, r31
    61a8:	ea 5d       	subi	r30, 0xDA	; 218
    61aa:	f7 4f       	sbci	r31, 0xF7	; 247
    61ac:	93 81       	ldd	r25, Z+3	; 0x03
    61ae:	69 0f       	add	r22, r25
				if (onOff == NOTE_ON) {
    61b0:	11 30       	cpi	r17, 0x01	; 1
    61b2:	21 f4       	brne	.+8      	; 0x61bc <midiNote_to_Manual+0x86>
					midiLastInManual = manual; // for debugging/display status
    61b4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
					midiLastInNote = manNote; // for debugging/display status
    61b8:	60 93 03 02 	sts	0x0203, r22	; 0x800203 <midiLastInNote>
				}
				manual_NoteOnOff(manual, manNote, onOff);
    61bc:	41 2f       	mov	r20, r17
    61be:	c8 de       	rcall	.-624    	; 0x5f50 <manual_NoteOnOff>
				found |= 0xFF;
    61c0:	9f ef       	ldi	r25, 0xFF	; 255
}

void midiNote_to_Manual(uint8_t channel, uint8_t note, uint8_t onOff){
	channel = channel & MIDI_CHANNEL_MASK; //  0..15 only
	uint8_t found = 0;
	for (uint8_t i = 0; i < MIDI_SPLIT_COUNT; i++){
    61c2:	cf 5f       	subi	r28, 0xFF	; 255
    61c4:	c4 30       	cpi	r28, 0x04	; 4
    61c6:	08 f4       	brcc	.+2      	; 0x61ca <midiNote_to_Manual+0x94>
    61c8:	c1 cf       	rjmp	.-126    	; 0x614c <midiNote_to_Manual+0x16>
				manual_NoteOnOff(manual, manNote, onOff);
				found |= 0xFF;
			}
		}
	}
	if ((onOff == NOTE_ON) && (found == 0)){
    61ca:	11 30       	cpi	r17, 0x01	; 1
    61cc:	49 f4       	brne	.+18     	; 0x61e0 <midiNote_to_Manual+0xaa>
    61ce:	91 11       	cpse	r25, r1
    61d0:	07 c0       	rjmp	.+14     	; 0x61e0 <midiNote_to_Manual+0xaa>
		// not found, show Channel instead of manual
		midiLastInNote = note;
    61d2:	00 93 03 02 	sts	0x0203, r16	; 0x800203 <midiLastInNote>
		midiLastInChannel = channel;
    61d6:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <midiLastInChannel>
		midiLastInManual = MANUAL_NONE;
    61da:	8f ef       	ldi	r24, 0xFF	; 255
    61dc:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <midiLastInManual>
	}
	// V 0.58 When SW Midi Through: send Note
	if (channel == midiThrough.InChannel){
    61e0:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <midiThrough>
    61e4:	d8 13       	cpse	r29, r24
    61e6:	1f c0       	rjmp	.+62     	; 0x6226 <midiNote_to_Manual+0xf0>
		// if IN Channel is matched (through OFF -> midiThrough.InChannel = 0xFF)
		if (midiThrough.OutChannel != MIDI_CHANNEL_NONE) {
    61e8:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <midiThrough+0x1>
    61ec:	8f 3f       	cpi	r24, 0xFF	; 255
    61ee:	d9 f0       	breq	.+54     	; 0x6226 <midiNote_to_Manual+0xf0>
			// only if out channel is valid: do as in midiKeyPress_Process
			serial1MIDISend(((onOff == NOTE_ON) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | midiThrough.OutChannel);
    61f0:	11 30       	cpi	r17, 0x01	; 1
    61f2:	31 f0       	breq	.+12     	; 0x6200 <midiNote_to_Manual+0xca>
    61f4:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    61f8:	99 23       	and	r25, r25
    61fa:	21 f0       	breq	.+8      	; 0x6204 <midiNote_to_Manual+0xce>
    61fc:	90 e9       	ldi	r25, 0x90	; 144
    61fe:	03 c0       	rjmp	.+6      	; 0x6206 <midiNote_to_Manual+0xd0>
    6200:	90 e9       	ldi	r25, 0x90	; 144
    6202:	01 c0       	rjmp	.+2      	; 0x6206 <midiNote_to_Manual+0xd0>
    6204:	90 e8       	ldi	r25, 0x80	; 128
    6206:	89 2b       	or	r24, r25
    6208:	f6 d2       	rcall	.+1516   	; 0x67f6 <serial1MIDISend>
			// if note off: use note on an velocity = 0 to turn off note (less bytes !)
			serial1MIDISend(note);
    620a:	80 2f       	mov	r24, r16
    620c:	f4 d2       	rcall	.+1512   	; 0x67f6 <serial1MIDISend>
    620e:	11 11       	cpse	r17, r1
			// if note off: use note on an velocity = 0 to turn off note (less bytes !):
			serial1MIDISend(((onOff == NOTE_OFF) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6210:	06 c0       	rjmp	.+12     	; 0x621e <midiNote_to_Manual+0xe8>
    6212:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    6216:	81 11       	cpse	r24, r1
    6218:	04 c0       	rjmp	.+8      	; 0x6222 <midiNote_to_Manual+0xec>
    621a:	80 e4       	ldi	r24, 0x40	; 64
    621c:	03 c0       	rjmp	.+6      	; 0x6224 <midiNote_to_Manual+0xee>
    621e:	80 e4       	ldi	r24, 0x40	; 64
    6220:	01 c0       	rjmp	.+2      	; 0x6224 <midiNote_to_Manual+0xee>
    6222:	80 e0       	ldi	r24, 0x00	; 0
    6224:	e8 d2       	rcall	.+1488   	; 0x67f6 <serial1MIDISend>
    6226:	df 91       	pop	r29
		}
	}
}
    6228:	cf 91       	pop	r28
    622a:	1f 91       	pop	r17
    622c:	0f 91       	pop	r16
    622e:	08 95       	ret

00006230 <midiIn_Process>:
    6230:	88 23       	and	r24, r24
		// Append other SysEx commands here with "else if"
	}
}

void midiIn_Process(uint8_t midiByte){
	if (midiByte > 0x7f) {
    6232:	0c f0       	brlt	.+2      	; 0x6236 <midiIn_Process+0x6>
    6234:	4f c0       	rjmp	.+158    	; 0x62d4 <midiIn_Process+0xa4>
		// command
		// define data bytes that are awaited (max. - less is possible)
		if ((midiByte <= MIDI_REALTIME_LAST) && (midiByte >= MIDI_REALTIME_FIRST)){
    6236:	88 3f       	cpi	r24, 0xF8	; 248
    6238:	b8 f0       	brcs	.+46     	; 0x6268 <midiIn_Process+0x38>
			 // this is a real time message F8-FF: don't interrupt current stream processing
			if (midiByte == MIDI_ACTIVESENSING) {
    623a:	8e 3f       	cpi	r24, 0xFE	; 254
    623c:	81 f4       	brne	.+32     	; 0x625e <midiIn_Process+0x2e>
				midiRxActivceSensing = 1; // start active sense
    623e:	81 e0       	ldi	r24, 0x01	; 1
    6240:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <midiRxActivceSensing>
				TIMER_SET(TIMER_ACTIVESENSE,TIMER_ACTIVESENSE_MS) // and start timer. main must check if it has elapsed
    6244:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6246:	f8 94       	cli
    6248:	06 c0       	rjmp	.+12     	; 0x6256 <midiIn_Process+0x26>
    624a:	ef e2       	ldi	r30, 0x2F	; 47
    624c:	f2 e0       	ldi	r31, 0x02	; 2
    624e:	89 e1       	ldi	r24, 0x19	; 25
    6250:	86 83       	std	Z+6, r24	; 0x06
    6252:	17 82       	std	Z+7, r1	; 0x07
    6254:	80 e0       	ldi	r24, 0x00	; 0
    6256:	81 11       	cpse	r24, r1
    6258:	f8 cf       	rjmp	.-16     	; 0x624a <midiIn_Process+0x1a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    625a:	9f bf       	out	0x3f, r25	; 63
    __asm__ volatile ("" ::: "memory");
    625c:	08 95       	ret
			} else if (midiByte == MIDI_RESET){
    625e:	8f 3f       	cpi	r24, 0xFF	; 255
    6260:	09 f0       	breq	.+2      	; 0x6264 <midiIn_Process+0x34>
    6262:	79 c0       	rjmp	.+242    	; 0x6356 <midiIn_Process+0x126>
				midiAllReset();
    6264:	42 ca       	rjmp	.-2940   	; 0x56ea <midiAllReset>
    6266:	08 95       	ret
			}
			// if not active sense or reset: ignore completely!
		} else {
			// only store if non real time message
			midiLastCommand = midiByte;
    6268:	80 93 ea 0b 	sts	0x0BEA, r24	; 0x800bea <midiLastCommand>
			midiDataByteCount = 0; // reset received data
    626c:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
			if ((midiByte >= MIDI_NOTEOFF) && (midiByte  <= (MIDI_CTRLCHG | 0x0F))) {
    6270:	90 e8       	ldi	r25, 0x80	; 128
    6272:	98 0f       	add	r25, r24
    6274:	90 34       	cpi	r25, 0x40	; 64
    6276:	20 f4       	brcc	.+8      	; 0x6280 <midiIn_Process+0x50>
				// 80 - BF
				midiDataByteExpected = 2;
    6278:	82 e0       	ldi	r24, 0x02	; 2
    627a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    627e:	08 95       	ret
			} else if ((midiByte >= MIDI_PITCHBEND) && (midiByte  <= (MIDI_PITCHBEND | 0x0F))) {
    6280:	90 e2       	ldi	r25, 0x20	; 32
    6282:	98 0f       	add	r25, r24
    6284:	90 31       	cpi	r25, 0x10	; 16
    6286:	20 f4       	brcc	.+8      	; 0x6290 <midiIn_Process+0x60>
				// E0 - EF
				midiDataByteExpected = 2;
    6288:	82 e0       	ldi	r24, 0x02	; 2
    628a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    628e:	08 95       	ret
			} else if (midiByte == MIDI_SONGPOS) {
    6290:	82 3f       	cpi	r24, 0xF2	; 242
    6292:	21 f4       	brne	.+8      	; 0x629c <midiIn_Process+0x6c>
				// F2
				midiDataByteExpected = 2;
    6294:	82 e0       	ldi	r24, 0x02	; 2
    6296:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    629a:	08 95       	ret
			} else if (midiByte == MIDI_SYSEX) {
    629c:	80 3f       	cpi	r24, 0xF0	; 240
    629e:	21 f4       	brne	.+8      	; 0x62a8 <midiIn_Process+0x78>
				// F0
				midiDataByteExpected = MIDI_IGNORE_DATA; // wait for next cmd, Data are stored but ignored in data processing
    62a0:	8f ef       	ldi	r24, 0xFF	; 255
    62a2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    62a6:	08 95       	ret
			} else if ((midiByte >= MIDI_PRGCHG) && (midiByte  <= (MIDI_CHANAFFT | 0x0F))) {
    62a8:	90 e4       	ldi	r25, 0x40	; 64
    62aa:	98 0f       	add	r25, r24
    62ac:	90 32       	cpi	r25, 0x20	; 32
    62ae:	20 f4       	brcc	.+8      	; 0x62b8 <midiIn_Process+0x88>
				// C0 - DF
				midiDataByteExpected = 1;
    62b0:	81 e0       	ldi	r24, 0x01	; 1
    62b2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    62b6:	08 95       	ret
			} else if ((midiByte == MIDI_TIMECODE) || (midiByte == MIDI_SONGSEL)){
    62b8:	81 3f       	cpi	r24, 0xF1	; 241
    62ba:	11 f0       	breq	.+4      	; 0x62c0 <midiIn_Process+0x90>
    62bc:	83 3f       	cpi	r24, 0xF3	; 243
    62be:	21 f4       	brne	.+8      	; 0x62c8 <midiIn_Process+0x98>
				// F1, F3
				midiDataByteExpected = 1;
    62c0:	81 e0       	ldi	r24, 0x01	; 1
    62c2:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <midiDataByteExpected>
    62c6:	08 95       	ret
			} else if (midiByte == MIDI_ENDSYSEX) {
    62c8:	87 3f       	cpi	r24, 0xF7	; 247
    62ca:	09 f4       	brne	.+2      	; 0x62ce <midiIn_Process+0x9e>
    62cc:	44 c0       	rjmp	.+136    	; 0x6356 <midiIn_Process+0x126>
				// F7 EndOfSysEx -> process Sysex HERE !
			} else {
				// F4, F5 undefined, F6 tune request,
				midiDataByteExpected = 0;
    62ce:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <midiDataByteExpected>
    62d2:	08 95       	ret
				// TODO process these 1 byte commands here if interesting
			}
		}
	} else {
		// data
		if (midiDataByteCount < MIDI_MAX_INTERESTING_BYTES)	{
    62d4:	e0 91 1b 08 	lds	r30, 0x081B	; 0x80081b <midiDataByteCount>
    62d8:	e8 30       	cpi	r30, 0x08	; 8
    62da:	40 f4       	brcc	.+16     	; 0x62ec <midiIn_Process+0xbc>
			// store databyte if space in array
			midiDataByte[midiDataByteCount++] = midiByte;
    62dc:	91 e0       	ldi	r25, 0x01	; 1
    62de:	9e 0f       	add	r25, r30
    62e0:	90 93 1b 08 	sts	0x081B, r25	; 0x80081b <midiDataByteCount>
    62e4:	f0 e0       	ldi	r31, 0x00	; 0
    62e6:	ee 51       	subi	r30, 0x1E	; 30
    62e8:	f4 4f       	sbci	r31, 0xF4	; 244
    62ea:	80 83       	st	Z, r24
		}
		if (midiDataByteExpected != MIDI_IGNORE_DATA) {
    62ec:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <midiDataByteExpected>
    62f0:	8f 3f       	cpi	r24, 0xFF	; 255
    62f2:	89 f1       	breq	.+98     	; 0x6356 <midiIn_Process+0x126>
			// only if data shall be processed
			if (midiDataByteCount >= midiDataByteExpected) {
    62f4:	90 91 1b 08 	lds	r25, 0x081B	; 0x80081b <midiDataByteCount>
    62f8:	98 17       	cp	r25, r24
    62fa:	68 f1       	brcs	.+90     	; 0x6356 <midiIn_Process+0x126>
				// command complete ---> process Input
				if (midiLastCommand < MIDI_SYSEX) {
    62fc:	90 91 ea 0b 	lds	r25, 0x0BEA	; 0x800bea <midiLastCommand>
    6300:	90 3f       	cpi	r25, 0xF0	; 240
    6302:	38 f5       	brcc	.+78     	; 0x6352 <midiIn_Process+0x122>
					// channel contained in command
					uint8_t channel = midiLastCommand & 0x0F;
    6304:	89 2f       	mov	r24, r25
    6306:	8f 70       	andi	r24, 0x0F	; 15
					uint8_t noteOnOff;
					switch (midiLastCommand & 0xF0) {
    6308:	90 7f       	andi	r25, 0xF0	; 240
    630a:	90 39       	cpi	r25, 0x90	; 144
    630c:	71 f0       	breq	.+28     	; 0x632a <midiIn_Process+0xfa>
    630e:	18 f4       	brcc	.+6      	; 0x6316 <midiIn_Process+0xe6>
    6310:	90 38       	cpi	r25, 0x80	; 128
    6312:	31 f0       	breq	.+12     	; 0x6320 <midiIn_Process+0xf0>
    6314:	1e c0       	rjmp	.+60     	; 0x6352 <midiIn_Process+0x122>
    6316:	90 3b       	cpi	r25, 0xB0	; 176
    6318:	99 f0       	breq	.+38     	; 0x6340 <midiIn_Process+0x110>
    631a:	90 3c       	cpi	r25, 0xC0	; 192
    631c:	b9 f0       	breq	.+46     	; 0x634c <midiIn_Process+0x11c>
    631e:	19 c0       	rjmp	.+50     	; 0x6352 <midiIn_Process+0x122>
					// remove channel from command
					case MIDI_NOTEOFF:
						noteOnOff = NOTE_OFF;
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6320:	40 e0       	ldi	r20, 0x00	; 0
    6322:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    6326:	07 df       	rcall	.-498    	; 0x6136 <midiNote_to_Manual>
						break;
    6328:	14 c0       	rjmp	.+40     	; 0x6352 <midiIn_Process+0x122>
					case MIDI_NOTEON:
						if (midiDataByte[1] == 0) {
    632a:	90 91 e3 0b 	lds	r25, 0x0BE3	; 0x800be3 <midiDataByte+0x1>
    632e:	91 11       	cpse	r25, r1
    6330:	02 c0       	rjmp	.+4      	; 0x6336 <midiIn_Process+0x106>
							// seldom, used midi spec: velocity = 0 -> note off
							noteOnOff = NOTE_OFF;
    6332:	40 e0       	ldi	r20, 0x00	; 0
    6334:	01 c0       	rjmp	.+2      	; 0x6338 <midiIn_Process+0x108>
						} else {
							// regular: note on
							noteOnOff = NOTE_ON;
    6336:	41 e0       	ldi	r20, 0x01	; 1
						}
						midiNote_to_Manual(channel, midiDataByte[0], noteOnOff);
    6338:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    633c:	fc de       	rcall	.-520    	; 0x6136 <midiNote_to_Manual>
						break;
    633e:	09 c0       	rjmp	.+18     	; 0x6352 <midiIn_Process+0x122>
					case MIDI_CTRLCHG:
						if (midiDataByte[0] == MIDI_CTRL_ALLNOTESOFF) {
    6340:	90 91 e2 0b 	lds	r25, 0x0BE2	; 0x800be2 <midiDataByte>
    6344:	9b 37       	cpi	r25, 0x7B	; 123
							midiAllNotesOff(channel);
    6346:	29 f4       	brne	.+10     	; 0x6352 <midiIn_Process+0x122>
    6348:	60 de       	rcall	.-832    	; 0x600a <midiAllNotesOff>
						}
						break;
					case MIDI_PRGCHG:
						midi_ProgramChange(channel,midiDataByte[0]);
    634a:	03 c0       	rjmp	.+6      	; 0x6352 <midiIn_Process+0x122>
    634c:	60 91 e2 0b 	lds	r22, 0x0BE2	; 0x800be2 <midiDataByte>
    6350:	b6 db       	rcall	.-2196   	; 0x5abe <midi_ProgramChange>
					// TODO process commands with data bytes here
					}
					// no else beacuse from SYSEX there are not morebyte commands beeing processed
				}
				// command is processed
				midiDataByteCount = 0; // reset for further Data with same command
    6352:	10 92 1b 08 	sts	0x081B, r1	; 0x80081b <midiDataByteCount>
    6356:	08 95       	ret

00006358 <proc_ESPmidi>:

void proc_ESPmidi(uint8_t midiBytesTransferred){
	// ESP midi commands are execeuted here separately from regular midi input so that processing does not interfere
	// serESPMidiTmp[2] is first byte of midi transmission if there are 3 bytes, [1] for 2 byte commands
	(void) midiBytesTransferred; // currently not used, unused bytes are zero
	uint8_t channel = serESPMidiTmp[2] & 0x0F;
    6358:	90 91 69 15 	lds	r25, 0x1569	; 0x801569 <serESPMidiTmp+0x2>
    635c:	89 2f       	mov	r24, r25
    635e:	8f 70       	andi	r24, 0x0F	; 15
	uint8_t noteOnOff;
	switch (serESPMidiTmp[2] & 0xF0) {
    6360:	90 7f       	andi	r25, 0xF0	; 240
    6362:	90 38       	cpi	r25, 0x80	; 128
    6364:	49 f0       	breq	.+18     	; 0x6378 <proc_ESPmidi+0x20>
    6366:	18 f4       	brcc	.+6      	; 0x636e <proc_ESPmidi+0x16>
    6368:	99 23       	and	r25, r25
    636a:	e1 f0       	breq	.+56     	; 0x63a4 <proc_ESPmidi+0x4c>
    636c:	08 95       	ret
    636e:	90 39       	cpi	r25, 0x90	; 144
    6370:	41 f0       	breq	.+16     	; 0x6382 <proc_ESPmidi+0x2a>
    6372:	90 3b       	cpi	r25, 0xB0	; 176
    6374:	89 f0       	breq	.+34     	; 0x6398 <proc_ESPmidi+0x40>
    6376:	08 95       	ret
		// remove channel from command
	case MIDI_NOTEOFF:
		noteOnOff = NOTE_OFF;
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6378:	40 e0       	ldi	r20, 0x00	; 0
    637a:	60 91 68 15 	lds	r22, 0x1568	; 0x801568 <serESPMidiTmp+0x1>
    637e:	db ce       	rjmp	.-586    	; 0x6136 <midiNote_to_Manual>
		break;
    6380:	08 95       	ret
	case MIDI_NOTEON:
		if (serESPMidiTmp[0] == 0) {
    6382:	90 91 67 15 	lds	r25, 0x1567	; 0x801567 <serESPMidiTmp>
    6386:	91 11       	cpse	r25, r1
    6388:	02 c0       	rjmp	.+4      	; 0x638e <proc_ESPmidi+0x36>
			// midi spec: velocity = 0 -> note off
			noteOnOff = NOTE_OFF;
    638a:	40 e0       	ldi	r20, 0x00	; 0
    638c:	01 c0       	rjmp	.+2      	; 0x6390 <proc_ESPmidi+0x38>
		} else {
			// regular: note on
			noteOnOff = NOTE_ON;
    638e:	41 e0       	ldi	r20, 0x01	; 1
		}
		midiNote_to_Manual(channel, serESPMidiTmp[1], noteOnOff);
    6390:	60 91 68 15 	lds	r22, 0x1568	; 0x801568 <serESPMidiTmp+0x1>
    6394:	d0 ce       	rjmp	.-608    	; 0x6136 <midiNote_to_Manual>
		break;
    6396:	08 95       	ret
	case MIDI_CTRLCHG:
		if (serESPMidiTmp[1] == MIDI_CTRL_ALLNOTESOFF) {
    6398:	90 91 68 15 	lds	r25, 0x1568	; 0x801568 <serESPMidiTmp+0x1>
    639c:	9b 37       	cpi	r25, 0x7B	; 123
			midiAllNotesOff(channel);
    639e:	61 f4       	brne	.+24     	; 0x63b8 <proc_ESPmidi+0x60>
    63a0:	34 ce       	rjmp	.-920    	; 0x600a <midiAllNotesOff>
    63a2:	08 95       	ret
		}
		break;
	// insert other 3 byte midi command check here
	case 0: // no 3 bytes of midi data, check next byte for 2 byte commands
		channel = serESPMidiTmp[1] & 0x0F;
    63a4:	90 91 68 15 	lds	r25, 0x1568	; 0x801568 <serESPMidiTmp+0x1>
    63a8:	89 2f       	mov	r24, r25
    63aa:	8f 70       	andi	r24, 0x0F	; 15
		switch (serESPMidiTmp[1] & 0xF0) {
    63ac:	90 7f       	andi	r25, 0xF0	; 240
    63ae:	90 3c       	cpi	r25, 0xC0	; 192
		case MIDI_PRGCHG:
			midi_ProgramChange(channel,serESPMidiTmp[0]);
    63b0:	19 f4       	brne	.+6      	; 0x63b8 <proc_ESPmidi+0x60>
    63b2:	60 91 67 15 	lds	r22, 0x1567	; 0x801567 <serESPMidiTmp>
    63b6:	83 cb       	rjmp	.-2298   	; 0x5abe <midi_ProgramChange>
    63b8:	08 95       	ret

000063ba <midiKeyPress_Process>:
	}
}

//********************************************* P R O C E S S   P I P E   M E S S A G E ->MIDI, COUPLER *******************************

void midiKeyPress_Process(PipeMessage_t pipeMessage){
    63ba:	bf 92       	push	r11
    63bc:	cf 92       	push	r12
    63be:	df 92       	push	r13
    63c0:	ef 92       	push	r14
    63c2:	ff 92       	push	r15
    63c4:	0f 93       	push	r16
    63c6:	1f 93       	push	r17
    63c8:	cf 93       	push	r28
    63ca:	df 93       	push	r29
    63cc:	d8 2f       	mov	r29, r24
    63ce:	c9 2f       	mov	r28, r25
	serial0USB_logPipeIn(pipeMessage);
    63d0:	5f d2       	rcall	.+1214   	; 0x6890 <serial0USB_logPipeIn>
	 uint8_t command = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_CMD_MASK_H; // upper 3 bit
    63d2:	0c 2f       	mov	r16, r28
    63d4:	00 7e       	andi	r16, 0xE0	; 224
	 uint8_t shiftBit = pipeMessage.message8[MSG_BYTE_CMD_SHIFTBIT] & MESSAGE_PIPE_SHIFTBIT_MASK_H; // lower 5 bits = BitNr of each module 0..31
    63d6:	cf 71       	andi	r28, 0x1F	; 31
    63d8:	bc 2e       	mov	r11, r28
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
    63da:	00 32       	cpi	r16, 0x20	; 32
    63dc:	09 f4       	brne	.+2      	; 0x63e0 <midiKeyPress_Process+0x26>
    63de:	b5 c0       	rjmp	.+362    	; 0x654a <midiKeyPress_Process+0x190>
    63e0:	00 23       	and	r16, r16
    63e2:	09 f4       	brne	.+2      	; 0x63e6 <midiKeyPress_Process+0x2c>
    63e4:	b4 c0       	rjmp	.+360    	; 0x654e <midiKeyPress_Process+0x194>
    63e6:	b7 c0       	rjmp	.+366    	; 0x6556 <midiKeyPress_Process+0x19c>
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
			// check all 8 bits for 8 modules, so i is number of current Module
			if ((moduleBits & 0x01) != 0) {
    63e8:	d0 ff       	sbrs	r29, 0
    63ea:	ac c0       	rjmp	.+344    	; 0x6544 <midiKeyPress_Process+0x18a>
				// LSB==1 -> Module "i" has message
				manualNote = moduleBit_to_manualNote(MODULE_BIT(i,shiftBit)); // modBit = mmmb bbbb, m = moduleNr, b = bitNr
    63ec:	20 e2       	ldi	r18, 0x20	; 32
    63ee:	c2 9f       	mul	r28, r18
    63f0:	c0 01       	movw	r24, r0
    63f2:	11 24       	eor	r1, r1
    63f4:	fb 2c       	mov	r15, r11
    63f6:	f8 2a       	or	r15, r24
    63f8:	8f 2d       	mov	r24, r15
    63fa:	87 dd       	rcall	.-1266   	; 0x5f0a <moduleBit_to_manualNote>
    63fc:	c8 2e       	mov	r12, r24
    63fe:	e9 2e       	mov	r14, r25
				// manual and note for that module/bit
				if (manualNote.manual != MANUAL_NONE){
    6400:	18 2f       	mov	r17, r24
    6402:	8f 3f       	cpi	r24, 0xFF	; 255
    6404:	09 f4       	brne	.+2      	; 0x6408 <midiKeyPress_Process+0x4e>
					// manual is assigned
					// check midi assigneemnt for this manual/note
					chanNote = Manual_to_MidiNote(manualNote.manual, manualNote.note);
    6406:	94 c0       	rjmp	.+296    	; 0x6530 <midiKeyPress_Process+0x176>
    6408:	69 2f       	mov	r22, r25
    640a:	97 dc       	rcall	.-1746   	; 0x5d3a <Manual_to_MidiNote>
    640c:	d9 2e       	mov	r13, r25
					if (chanNote.hw_channel != MIDI_CHANNEL_NONE){
    640e:	8f 3f       	cpi	r24, 0xFF	; 255
    6410:	09 f1       	breq	.+66     	; 0x6454 <midiKeyPress_Process+0x9a>
						// note on/off can be sent
						serial1MIDISend(((command == MESSAGE_PIPE_ON_HI) || (midi_Setting.VelZero4Off) ? MIDI_NOTEON : MIDI_NOTEOFF) | chanNote.hw_channel);
    6412:	00 32       	cpi	r16, 0x20	; 32
    6414:	31 f0       	breq	.+12     	; 0x6422 <midiKeyPress_Process+0x68>
    6416:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    641a:	99 23       	and	r25, r25
    641c:	21 f0       	breq	.+8      	; 0x6426 <midiKeyPress_Process+0x6c>
    641e:	90 e9       	ldi	r25, 0x90	; 144
    6420:	03 c0       	rjmp	.+6      	; 0x6428 <midiKeyPress_Process+0x6e>
    6422:	90 e9       	ldi	r25, 0x90	; 144
    6424:	01 c0       	rjmp	.+2      	; 0x6428 <midiKeyPress_Process+0x6e>
    6426:	90 e8       	ldi	r25, 0x80	; 128
    6428:	89 2b       	or	r24, r25
						// of note off: use note on an velocity = 0 to turn off note (less bytes !)
						serial1MIDISend(chanNote.note);
    642a:	e5 d1       	rcall	.+970    	; 0x67f6 <serial1MIDISend>
    642c:	8d 2d       	mov	r24, r13
    642e:	e3 d1       	rcall	.+966    	; 0x67f6 <serial1MIDISend>
						// of note off: use note on an velocity = 0 to turn off note (less bytes !):
						serial1MIDISend(((command == MESSAGE_PIPE_OFF_HI) && (midi_Setting.VelZero4Off)) ? 0 : MIDI_DEFAULT_VELOCITY);
    6430:	01 11       	cpse	r16, r1
    6432:	06 c0       	rjmp	.+12     	; 0x6440 <midiKeyPress_Process+0x86>
    6434:	80 91 2f 09 	lds	r24, 0x092F	; 0x80092f <midi_Setting+0x1>
    6438:	81 11       	cpse	r24, r1
    643a:	04 c0       	rjmp	.+8      	; 0x6444 <midiKeyPress_Process+0x8a>
    643c:	80 e4       	ldi	r24, 0x40	; 64
    643e:	03 c0       	rjmp	.+6      	; 0x6446 <midiKeyPress_Process+0x8c>
    6440:	80 e4       	ldi	r24, 0x40	; 64
    6442:	01 c0       	rjmp	.+2      	; 0x6446 <midiKeyPress_Process+0x8c>
    6444:	80 e0       	ldi	r24, 0x00	; 0
    6446:	d7 d1       	rcall	.+942    	; 0x67f6 <serial1MIDISend>
						// V0.56 Show MidiOut on Display only if Channel assigned
						if (command == MESSAGE_PIPE_ON_HI) {
    6448:	00 32       	cpi	r16, 0x20	; 32
    644a:	21 f4       	brne	.+8      	; 0x6454 <midiKeyPress_Process+0x9a>
							// note on -> save this info for status display
							midiLastOutManual = manualNote.manual;
    644c:	c0 92 04 02 	sts	0x0204, r12	; 0x800204 <midiLastOutManual>
							midiLastOutNote = manualNote.note;
    6450:	e0 92 05 02 	sts	0x0205, r14	; 0x800205 <midiLastOutNote>
						}
					}
					// check couplers
					uint8_t noteOnOff = (command == MESSAGE_PIPE_ON_HI ? NOTE_ON : NOTE_OFF);
    6454:	41 e0       	ldi	r20, 0x01	; 1
    6456:	00 32       	cpi	r16, 0x20	; 32
    6458:	09 f0       	breq	.+2      	; 0x645c <midiKeyPress_Process+0xa2>
    645a:	40 e0       	ldi	r20, 0x00	; 0
    645c:	d4 2e       	mov	r13, r20
					// TODO check if Pipe was activated my different event (MIDI, other coupler)
					if (manualNote.manual == MANUAL_III){
    645e:	11 11       	cpse	r17, r1
    6460:	19 c0       	rjmp	.+50     	; 0x6494 <midiKeyPress_Process+0xda>
						if (midi_Couplers[COUPLER_2FROM3] == TRUE){
    6462:	80 91 0f 08 	lds	r24, 0x080F	; 0x80080f <midi_Couplers>
    6466:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6468:	19 f4       	brne	.+6      	; 0x6470 <midiKeyPress_Process+0xb6>
    646a:	6e 2d       	mov	r22, r14
    646c:	81 e0       	ldi	r24, 0x01	; 1
    646e:	70 dd       	rcall	.-1312   	; 0x5f50 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_1FROM3] == TRUE){
    6470:	80 91 10 08 	lds	r24, 0x0810	; 0x800810 <midi_Couplers+0x1>
    6474:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6476:	21 f4       	brne	.+8      	; 0x6480 <midiKeyPress_Process+0xc6>
    6478:	4d 2d       	mov	r20, r13
    647a:	6e 2d       	mov	r22, r14
    647c:	82 e0       	ldi	r24, 0x02	; 2
    647e:	68 dd       	rcall	.-1328   	; 0x5f50 <manual_NoteOnOff>
						}
						if (midi_Couplers[COUPLER_PFROM3] == TRUE){
    6480:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <midi_Couplers+0x3>
    6484:	8f 3f       	cpi	r24, 0xFF	; 255
    6486:	09 f0       	breq	.+2      	; 0x648a <midiKeyPress_Process+0xd0>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    6488:	53 c0       	rjmp	.+166    	; 0x6530 <midiKeyPress_Process+0x176>
    648a:	4d 2d       	mov	r20, r13
    648c:	6e 2d       	mov	r22, r14
    648e:	83 e0       	ldi	r24, 0x03	; 3
    6490:	5f dd       	rcall	.-1346   	; 0x5f50 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_II) {
    6492:	4e c0       	rjmp	.+156    	; 0x6530 <midiKeyPress_Process+0x176>
    6494:	11 30       	cpi	r17, 0x01	; 1
						if (midi_Couplers[COUPLER_1FROM2] == TRUE){
    6496:	c9 f4       	brne	.+50     	; 0x64ca <midiKeyPress_Process+0x110>
    6498:	80 91 11 08 	lds	r24, 0x0811	; 0x800811 <midi_Couplers+0x2>
    649c:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    649e:	19 f4       	brne	.+6      	; 0x64a6 <midiKeyPress_Process+0xec>
    64a0:	6e 2d       	mov	r22, r14
    64a2:	82 e0       	ldi	r24, 0x02	; 2
						}
						if (midi_Couplers[COUPLER_PFROM2] == TRUE){
    64a4:	55 dd       	rcall	.-1366   	; 0x5f50 <manual_NoteOnOff>
    64a6:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <midi_Couplers+0x4>
    64aa:	8f 3f       	cpi	r24, 0xFF	; 255
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    64ac:	21 f4       	brne	.+8      	; 0x64b6 <midiKeyPress_Process+0xfc>
    64ae:	4d 2d       	mov	r20, r13
    64b0:	6e 2d       	mov	r22, r14
    64b2:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM2] == TRUE){
    64b4:	4d dd       	rcall	.-1382   	; 0x5f50 <manual_NoteOnOff>
    64b6:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <midi_Couplers+0x6>
    64ba:	8f 3f       	cpi	r24, 0xFF	; 255
    64bc:	09 f0       	breq	.+2      	; 0x64c0 <midiKeyPress_Process+0x106>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    64be:	38 c0       	rjmp	.+112    	; 0x6530 <midiKeyPress_Process+0x176>
    64c0:	4d 2d       	mov	r20, r13
    64c2:	6e 2d       	mov	r22, r14
    64c4:	80 e0       	ldi	r24, 0x00	; 0
    64c6:	44 dd       	rcall	.-1400   	; 0x5f50 <manual_NoteOnOff>
						}
					} else 	if (manualNote.manual == MANUAL_I) {
    64c8:	33 c0       	rjmp	.+102    	; 0x6530 <midiKeyPress_Process+0x176>
    64ca:	12 30       	cpi	r17, 0x02	; 2
						if (midi_Couplers[COUPLER_PFROM1] == TRUE){
    64cc:	c1 f4       	brne	.+48     	; 0x64fe <midiKeyPress_Process+0x144>
    64ce:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <midi_Couplers+0x5>
							manual_NoteOnOff(MANUAL_P, manualNote.note, noteOnOff);
    64d2:	8f 3f       	cpi	r24, 0xFF	; 255
    64d4:	19 f4       	brne	.+6      	; 0x64dc <midiKeyPress_Process+0x122>
    64d6:	6e 2d       	mov	r22, r14
    64d8:	83 e0       	ldi	r24, 0x03	; 3
						}
						if (midi_Couplers[COUPLER_3FROM1] == TRUE){
    64da:	3a dd       	rcall	.-1420   	; 0x5f50 <manual_NoteOnOff>
    64dc:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <midi_Couplers+0x7>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    64e0:	8f 3f       	cpi	r24, 0xFF	; 255
    64e2:	21 f4       	brne	.+8      	; 0x64ec <midiKeyPress_Process+0x132>
    64e4:	4d 2d       	mov	r20, r13
    64e6:	6e 2d       	mov	r22, r14
    64e8:	80 e0       	ldi	r24, 0x00	; 0
						}
						if (midi_Couplers[COUPLER_2FROM1] == TRUE){
    64ea:	32 dd       	rcall	.-1436   	; 0x5f50 <manual_NoteOnOff>
    64ec:	80 91 17 08 	lds	r24, 0x0817	; 0x800817 <midi_Couplers+0x8>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    64f0:	8f 3f       	cpi	r24, 0xFF	; 255
    64f2:	f1 f4       	brne	.+60     	; 0x6530 <midiKeyPress_Process+0x176>
    64f4:	4d 2d       	mov	r20, r13
    64f6:	6e 2d       	mov	r22, r14
    64f8:	81 e0       	ldi	r24, 0x01	; 1
    64fa:	2a dd       	rcall	.-1452   	; 0x5f50 <manual_NoteOnOff>
						}
					} else if (manualNote.manual == MANUAL_P) {
    64fc:	19 c0       	rjmp	.+50     	; 0x6530 <midiKeyPress_Process+0x176>
						if (midi_Couplers[COUPLER_3FROMP] == TRUE){
    64fe:	13 30       	cpi	r17, 0x03	; 3
    6500:	b9 f4       	brne	.+46     	; 0x6530 <midiKeyPress_Process+0x176>
    6502:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <midi_Couplers+0x9>
							manual_NoteOnOff(MANUAL_III, manualNote.note, noteOnOff);
    6506:	8f 3f       	cpi	r24, 0xFF	; 255
    6508:	19 f4       	brne	.+6      	; 0x6510 <midiKeyPress_Process+0x156>
    650a:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_2FROMP] == TRUE){
    650c:	80 e0       	ldi	r24, 0x00	; 0
    650e:	20 dd       	rcall	.-1472   	; 0x5f50 <manual_NoteOnOff>
    6510:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <midi_Couplers+0xa>
							manual_NoteOnOff(MANUAL_II, manualNote.note, noteOnOff);
    6514:	8f 3f       	cpi	r24, 0xFF	; 255
    6516:	21 f4       	brne	.+8      	; 0x6520 <midiKeyPress_Process+0x166>
    6518:	4d 2d       	mov	r20, r13
    651a:	6e 2d       	mov	r22, r14
						}
						if (midi_Couplers[COUPLER_1FROMP] == TRUE){
    651c:	81 e0       	ldi	r24, 0x01	; 1
    651e:	18 dd       	rcall	.-1488   	; 0x5f50 <manual_NoteOnOff>
    6520:	80 91 1a 08 	lds	r24, 0x081A	; 0x80081a <midi_Couplers+0xb>
							manual_NoteOnOff(MANUAL_I, manualNote.note, noteOnOff);
    6524:	8f 3f       	cpi	r24, 0xFF	; 255
    6526:	21 f4       	brne	.+8      	; 0x6530 <midiKeyPress_Process+0x176>
    6528:	4d 2d       	mov	r20, r13
    652a:	6e 2d       	mov	r22, r14
    652c:	82 e0       	ldi	r24, 0x02	; 2
						}
					}
				} // if
				//Register change
				midi_RegisterChanged = moduleBit_to_registerNr(MODULE_BIT(i,shiftBit)) | (command == MESSAGE_PIPE_ON_HI ? REGISTER_WAS_SET : 0); // processed and reset in main
    652e:	10 dd       	rcall	.-1504   	; 0x5f50 <manual_NoteOnOff>
    6530:	8f 2d       	mov	r24, r15
    6532:	72 d9       	rcall	.-3356   	; 0x5818 <moduleBit_to_registerNr>
    6534:	00 32       	cpi	r16, 0x20	; 32
    6536:	11 f4       	brne	.+4      	; 0x653c <midiKeyPress_Process+0x182>
    6538:	20 e8       	ldi	r18, 0x80	; 128
    653a:	01 c0       	rjmp	.+2      	; 0x653e <midiKeyPress_Process+0x184>
    653c:	20 e0       	ldi	r18, 0x00	; 0
    653e:	82 2b       	or	r24, r18
    6540:	80 93 31 09 	sts	0x0931, r24	; 0x800931 <midi_RegisterChanged>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
    6544:	d6 95       	lsr	r29
	 uint8_t moduleBits = pipeMessage.message8[MSG_BYTE_MODULEBITS]; // one bit for each module, so one message can countain up to 8 messages for 8 modules
	 ManualNote_t manualNote;
	 ChannelNote_t chanNote;
	 if ((command == MESSAGE_PIPE_ON_HI) || (command == MESSAGE_PIPE_OFF_HI)){
		// Note on or off
		for (uint8_t i = 0; i < 8; i++){
    6546:	cf 5f       	subi	r28, 0xFF	; 255
    6548:	03 c0       	rjmp	.+6      	; 0x6550 <midiKeyPress_Process+0x196>
    654a:	c0 e0       	ldi	r28, 0x00	; 0
    654c:	01 c0       	rjmp	.+2      	; 0x6550 <midiKeyPress_Process+0x196>
    654e:	c0 e0       	ldi	r28, 0x00	; 0
    6550:	c8 30       	cpi	r28, 0x08	; 8
    6552:	08 f4       	brcc	.+2      	; 0x6556 <midiKeyPress_Process+0x19c>
    6554:	49 cf       	rjmp	.-366    	; 0x63e8 <midiKeyPress_Process+0x2e>
				// TODO process other key events here
			}
			moduleBits >>= 1; // next module
		} // for
	 }
}
    6556:	df 91       	pop	r29
    6558:	cf 91       	pop	r28
    655a:	1f 91       	pop	r17
    655c:	0f 91       	pop	r16
    655e:	ff 90       	pop	r15
    6560:	ef 90       	pop	r14
    6562:	df 90       	pop	r13
    6564:	cf 90       	pop	r12
    6566:	bf 90       	pop	r11
    6568:	08 95       	ret

0000656a <midiSendAllNotesOff>:

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
    656a:	cf 93       	push	r28
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    656c:	c0 e0       	ldi	r28, 0x00	; 0
    656e:	10 c0       	rjmp	.+32     	; 0x6590 <midiSendAllNotesOff+0x26>
		uint8_t chan = midiOutMap[i].hw_channel;
    6570:	ec 2f       	mov	r30, r28
    6572:	f0 e0       	ldi	r31, 0x00	; 0
    6574:	ee 0f       	add	r30, r30
    6576:	ff 1f       	adc	r31, r31
    6578:	ea 5d       	subi	r30, 0xDA	; 218
    657a:	f6 4f       	sbci	r31, 0xF6	; 246
    657c:	80 81       	ld	r24, Z
		if (chan <= MIDI_CHANNEL_16) {
    657e:	80 31       	cpi	r24, 0x10	; 16
    6580:	30 f4       	brcc	.+12     	; 0x658e <midiSendAllNotesOff+0x24>
			serial1MIDISend(MIDI_CTRLCHG | chan);
    6582:	80 6b       	ori	r24, 0xB0	; 176
    6584:	38 d1       	rcall	.+624    	; 0x67f6 <serial1MIDISend>
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
    6586:	8b e7       	ldi	r24, 0x7B	; 123
    6588:	36 d1       	rcall	.+620    	; 0x67f6 <serial1MIDISend>
			serial1MIDISend(0);
    658a:	80 e0       	ldi	r24, 0x00	; 0
    658c:	34 d1       	rcall	.+616    	; 0x67f6 <serial1MIDISend>
    658e:	cf 5f       	subi	r28, 0xFF	; 255
}

//******************************************* S E N D   A L L N O T E S O F F ************************************

void midiSendAllNotesOff(){
	for (uint8_t i = 0; i < MANUAL_COUNT; i++){
    6590:	c4 30       	cpi	r28, 0x04	; 4
    6592:	70 f3       	brcs	.-36     	; 0x6570 <midiSendAllNotesOff+0x6>
    6594:	cf 91       	pop	r28
			serial1MIDISend(MIDI_CTRLCHG | chan);
			serial1MIDISend(MIDI_CTRL_ALLNOTESOFF);
			serial1MIDISend(0);
		}
	}
}
    6596:	08 95       	ret

00006598 <midi_SendActiveSense>:
    6598:	8e ef       	ldi	r24, 0xFE	; 254

void midi_SendActiveSense(){
	serial1MIDISend(MIDI_ACTIVESENSING);
    659a:	2d c1       	rjmp	.+602    	; 0x67f6 <serial1MIDISend>
    659c:	08 95       	ret

0000659e <midi_CheckTxActiveSense>:
}

void midi_CheckTxActiveSense(){
	// timer is started when any midi byte is transferred
	// dual use: 1) send active sense (if configured) after timer elapsed 2) reset last midi command so that from time to time command is sent again  (V0.67)
	if (!(TIMER_RUNNING(TIMER_TX_ACTIVESENSE))){
    659e:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    65a2:	88 23       	and	r24, r24
    65a4:	21 f0       	breq	.+8      	; 0x65ae <midi_CheckTxActiveSense+0x10>
    65a6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <swTimer+0x10>
    65aa:	8f 3f       	cpi	r24, 0xFF	; 255
    65ac:	99 f4       	brne	.+38     	; 0x65d4 <midi_CheckTxActiveSense+0x36>
		// timer ended or not yet running
		TIMER_SET(TIMER_TX_ACTIVESENSE,TIMER_TX_ACTIVESENSE_MS) 
    65ae:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    65b0:	f8 94       	cli
    65b2:	81 e0       	ldi	r24, 0x01	; 1
    65b4:	06 c0       	rjmp	.+12     	; 0x65c2 <midi_CheckTxActiveSense+0x24>
    65b6:	ef e2       	ldi	r30, 0x2F	; 47
    65b8:	f2 e0       	ldi	r31, 0x02	; 2
    65ba:	8a e0       	ldi	r24, 0x0A	; 10
    65bc:	80 8b       	std	Z+16, r24	; 0x10
    65be:	11 8a       	std	Z+17, r1	; 0x11
    65c0:	80 e0       	ldi	r24, 0x00	; 0
    65c2:	81 11       	cpse	r24, r1
    65c4:	f8 cf       	rjmp	.-16     	; 0x65b6 <midi_CheckTxActiveSense+0x18>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    65c6:	9f bf       	out	0x3f, r25	; 63
		if (midi_Setting.TxActivceSense) {
    65c8:	80 91 2e 09 	lds	r24, 0x092E	; 0x80092e <midi_Setting>
    65cc:	81 11       	cpse	r24, r1
			midi_SendActiveSense();
    65ce:	e4 df       	rcall	.-56     	; 0x6598 <midi_SendActiveSense>
		}
		// V 0.67 for safety: reset last command byte so that after "some" time without key change always sent midi command byte
		MIDI_TXT_RESET_LASTCMD
    65d0:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiTxLastCmd>
    65d4:	08 95       	ret

000065d6 <init_Serial1MIDI>:
		serial3SER_ESPSend(c);
	}
}

void serial3SER_ESP_sendCRLF(){
		serial3SER_ESP_sendStringP(cr_lf);
    65d6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
    65da:	8f e1       	ldi	r24, 0x1F	; 31
    65dc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
    65e0:	e9 ec       	ldi	r30, 0xC9	; 201
    65e2:	f0 e0       	ldi	r31, 0x00	; 0
    65e4:	80 81       	ld	r24, Z
    65e6:	88 69       	ori	r24, 0x98	; 152
    65e8:	80 83       	st	Z, r24
    65ea:	ea ec       	ldi	r30, 0xCA	; 202
    65ec:	f0 e0       	ldi	r31, 0x00	; 0
    65ee:	80 81       	ld	r24, Z
    65f0:	86 60       	ori	r24, 0x06	; 6
    65f2:	80 83       	st	Z, r24
    65f4:	10 92 61 15 	sts	0x1561, r1	; 0x801561 <midiRxInIndex>
    65f8:	10 92 6f 15 	sts	0x156F, r1	; 0x80156f <midiRxOutIndex>
    65fc:	10 92 ed 13 	sts	0x13ED, r1	; 0x8013ed <midiTxInIndex>
    6600:	10 92 fa 13 	sts	0x13FA, r1	; 0x8013fa <midiTxOutIndex>
    6604:	10 92 f9 13 	sts	0x13F9, r1	; 0x8013f9 <midiRxOvfl>
    6608:	10 92 fe 13 	sts	0x13FE, r1	; 0x8013fe <midiTxOvfl>
    660c:	10 92 6b 15 	sts	0x156B, r1	; 0x80156b <midiRxOvflCount>
    6610:	10 92 72 15 	sts	0x1572, r1	; 0x801572 <midiTxOvflCount>
    6614:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiTxLastCmd>
    6618:	08 95       	ret

0000661a <__vector_36>:
    661a:	1f 92       	push	r1
    661c:	0f 92       	push	r0
    661e:	0f b6       	in	r0, 0x3f	; 63
    6620:	0f 92       	push	r0
    6622:	11 24       	eor	r1, r1
    6624:	0b b6       	in	r0, 0x3b	; 59
    6626:	0f 92       	push	r0
    6628:	8f 93       	push	r24
    662a:	9f 93       	push	r25
    662c:	ef 93       	push	r30
    662e:	ff 93       	push	r31
    6630:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    6634:	e0 91 61 15 	lds	r30, 0x1561	; 0x801561 <midiRxInIndex>
    6638:	f0 e0       	ldi	r31, 0x00	; 0
    663a:	e1 5c       	subi	r30, 0xC1	; 193
    663c:	fb 4e       	sbci	r31, 0xEB	; 235
    663e:	80 83       	st	Z, r24
    6640:	80 91 61 15 	lds	r24, 0x1561	; 0x801561 <midiRxInIndex>
    6644:	8f 5f       	subi	r24, 0xFF	; 255
    6646:	8f 71       	andi	r24, 0x1F	; 31
    6648:	80 93 61 15 	sts	0x1561, r24	; 0x801561 <midiRxInIndex>
    664c:	90 91 61 15 	lds	r25, 0x1561	; 0x801561 <midiRxInIndex>
    6650:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <midiRxOutIndex>
    6654:	98 13       	cpse	r25, r24
    6656:	0d c0       	rjmp	.+26     	; 0x6672 <__vector_36+0x58>
    6658:	80 91 6b 15 	lds	r24, 0x156B	; 0x80156b <midiRxOvflCount>
    665c:	88 23       	and	r24, r24
    665e:	31 f0       	breq	.+12     	; 0x666c <__vector_36+0x52>
    6660:	8f 3f       	cpi	r24, 0xFF	; 255
    6662:	39 f0       	breq	.+14     	; 0x6672 <__vector_36+0x58>
    6664:	8f 5f       	subi	r24, 0xFF	; 255
    6666:	80 93 6b 15 	sts	0x156B, r24	; 0x80156b <midiRxOvflCount>
    666a:	03 c0       	rjmp	.+6      	; 0x6672 <__vector_36+0x58>
    666c:	81 e0       	ldi	r24, 0x01	; 1
    666e:	80 93 6b 15 	sts	0x156B, r24	; 0x80156b <midiRxOvflCount>
    6672:	80 91 f5 17 	lds	r24, 0x17F5	; 0x8017f5 <midiRxBytesCount>
    6676:	90 91 f6 17 	lds	r25, 0x17F6	; 0x8017f6 <midiRxBytesCount+0x1>
    667a:	01 96       	adiw	r24, 0x01	; 1
    667c:	90 93 f6 17 	sts	0x17F6, r25	; 0x8017f6 <midiRxBytesCount+0x1>
    6680:	80 93 f5 17 	sts	0x17F5, r24	; 0x8017f5 <midiRxBytesCount>
    6684:	ff 91       	pop	r31
    6686:	ef 91       	pop	r30
    6688:	9f 91       	pop	r25
    668a:	8f 91       	pop	r24
    668c:	0f 90       	pop	r0
    668e:	0b be       	out	0x3b, r0	; 59
    6690:	0f 90       	pop	r0
    6692:	0f be       	out	0x3f, r0	; 63
    6694:	0f 90       	pop	r0
    6696:	1f 90       	pop	r1
    6698:	18 95       	reti

0000669a <__vector_37>:
    669a:	1f 92       	push	r1
    669c:	0f 92       	push	r0
    669e:	0f b6       	in	r0, 0x3f	; 63
    66a0:	0f 92       	push	r0
    66a2:	11 24       	eor	r1, r1
    66a4:	0b b6       	in	r0, 0x3b	; 59
    66a6:	0f 92       	push	r0
    66a8:	8f 93       	push	r24
    66aa:	9f 93       	push	r25
    66ac:	ef 93       	push	r30
    66ae:	ff 93       	push	r31
    66b0:	90 91 fa 13 	lds	r25, 0x13FA	; 0x8013fa <midiTxOutIndex>
    66b4:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <midiTxInIndex>
    66b8:	98 17       	cp	r25, r24
    66ba:	b9 f0       	breq	.+46     	; 0x66ea <__vector_37+0x50>
    66bc:	e0 91 fa 13 	lds	r30, 0x13FA	; 0x8013fa <midiTxOutIndex>
    66c0:	f0 e0       	ldi	r31, 0x00	; 0
    66c2:	e1 5a       	subi	r30, 0xA1	; 161
    66c4:	fb 4e       	sbci	r31, 0xEB	; 235
    66c6:	80 81       	ld	r24, Z
    66c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    66cc:	80 91 fa 13 	lds	r24, 0x13FA	; 0x8013fa <midiTxOutIndex>
    66d0:	8f 5f       	subi	r24, 0xFF	; 255
    66d2:	80 93 fa 13 	sts	0x13FA, r24	; 0x8013fa <midiTxOutIndex>
    66d6:	80 91 6c 15 	lds	r24, 0x156C	; 0x80156c <midiTxBytesCount>
    66da:	90 91 6d 15 	lds	r25, 0x156D	; 0x80156d <midiTxBytesCount+0x1>
    66de:	01 96       	adiw	r24, 0x01	; 1
    66e0:	90 93 6d 15 	sts	0x156D, r25	; 0x80156d <midiTxBytesCount+0x1>
    66e4:	80 93 6c 15 	sts	0x156C, r24	; 0x80156c <midiTxBytesCount>
    66e8:	05 c0       	rjmp	.+10     	; 0x66f4 <__vector_37+0x5a>
    66ea:	e9 ec       	ldi	r30, 0xC9	; 201
    66ec:	f0 e0       	ldi	r31, 0x00	; 0
    66ee:	80 81       	ld	r24, Z
    66f0:	8f 7d       	andi	r24, 0xDF	; 223
    66f2:	80 83       	st	Z, r24
    66f4:	ff 91       	pop	r31
    66f6:	ef 91       	pop	r30
    66f8:	9f 91       	pop	r25
    66fa:	8f 91       	pop	r24
    66fc:	0f 90       	pop	r0
    66fe:	0b be       	out	0x3b, r0	; 59
    6700:	0f 90       	pop	r0
    6702:	0f be       	out	0x3f, r0	; 63
    6704:	0f 90       	pop	r0
    6706:	1f 90       	pop	r1
    6708:	18 95       	reti

0000670a <serial0SER_USBSend>:
    670a:	e0 91 f3 17 	lds	r30, 0x17F3	; 0x8017f3 <serUSBTxInIndex>
    670e:	f0 91 f4 17 	lds	r31, 0x17F4	; 0x8017f4 <serUSBTxInIndex+0x1>
    6712:	a1 ec       	ldi	r26, 0xC1	; 193
    6714:	b0 e0       	ldi	r27, 0x00	; 0
    6716:	9c 91       	ld	r25, X
    6718:	9f 7d       	andi	r25, 0xDF	; 223
    671a:	9c 93       	st	X, r25
    671c:	af 01       	movw	r20, r30
    671e:	4f 5f       	subi	r20, 0xFF	; 255
    6720:	5f 4f       	sbci	r21, 0xFF	; 255
    6722:	80 83       	st	Z, r24
    6724:	83 e1       	ldi	r24, 0x13	; 19
    6726:	4a 3e       	cpi	r20, 0xEA	; 234
    6728:	58 07       	cpc	r21, r24
    672a:	19 f0       	breq	.+6      	; 0x6732 <serial0SER_USBSend+0x28>
    672c:	10 f0       	brcs	.+4      	; 0x6732 <serial0SER_USBSend+0x28>
    672e:	4b ee       	ldi	r20, 0xEB	; 235
    6730:	5b e0       	ldi	r21, 0x0B	; 11
    6732:	9f b7       	in	r25, 0x3f	; 63
    6734:	f8 94       	cli
    6736:	81 e0       	ldi	r24, 0x01	; 1
    6738:	05 c0       	rjmp	.+10     	; 0x6744 <serial0SER_USBSend+0x3a>
    673a:	20 91 eb 13 	lds	r18, 0x13EB	; 0x8013eb <serUSBTxOutIndex>
    673e:	30 91 ec 13 	lds	r19, 0x13EC	; 0x8013ec <serUSBTxOutIndex+0x1>
    6742:	80 e0       	ldi	r24, 0x00	; 0
    6744:	81 11       	cpse	r24, r1
    6746:	f9 cf       	rjmp	.-14     	; 0x673a <serial0SER_USBSend+0x30>
    6748:	9f bf       	out	0x3f, r25	; 63
    674a:	42 17       	cp	r20, r18
    674c:	53 07       	cpc	r21, r19
    674e:	49 f4       	brne	.+18     	; 0x6762 <serial0SER_USBSend+0x58>
    6750:	8f ef       	ldi	r24, 0xFF	; 255
    6752:	80 93 66 15 	sts	0x1566, r24	; 0x801566 <serUSBOvflFlag>
    6756:	e1 ec       	ldi	r30, 0xC1	; 193
    6758:	f0 e0       	ldi	r31, 0x00	; 0
    675a:	80 81       	ld	r24, Z
    675c:	80 62       	ori	r24, 0x20	; 32
    675e:	80 83       	st	Z, r24
    6760:	08 95       	ret
    6762:	50 93 f4 17 	sts	0x17F4, r21	; 0x8017f4 <serUSBTxInIndex+0x1>
    6766:	40 93 f3 17 	sts	0x17F3, r20	; 0x8017f3 <serUSBTxInIndex>
    676a:	e1 ec       	ldi	r30, 0xC1	; 193
    676c:	f0 e0       	ldi	r31, 0x00	; 0
    676e:	80 81       	ld	r24, Z
    6770:	80 62       	ori	r24, 0x20	; 32
    6772:	80 83       	st	Z, r24
    6774:	08 95       	ret

00006776 <serial0USB_logMIDIin>:
    6776:	cf 93       	push	r28
    6778:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <serUSB_Active>
    677c:	99 23       	and	r25, r25
    677e:	61 f0       	breq	.+24     	; 0x6798 <serial0USB_logMIDIin+0x22>
    6780:	c8 2f       	mov	r28, r24
    6782:	89 e6       	ldi	r24, 0x69	; 105
    6784:	c2 df       	rcall	.-124    	; 0x670a <serial0SER_USBSend>
    6786:	8c 2f       	mov	r24, r28
    6788:	82 95       	swap	r24
    678a:	8f 70       	andi	r24, 0x0F	; 15
    678c:	a0 d2       	rcall	.+1344   	; 0x6cce <nibbleToChr>
    678e:	bd df       	rcall	.-134    	; 0x670a <serial0SER_USBSend>
    6790:	8c 2f       	mov	r24, r28
    6792:	8f 70       	andi	r24, 0x0F	; 15
    6794:	9c d2       	rcall	.+1336   	; 0x6cce <nibbleToChr>
    6796:	b9 df       	rcall	.-142    	; 0x670a <serial0SER_USBSend>
    6798:	cf 91       	pop	r28
    679a:	08 95       	ret

0000679c <serial1MIDIReadRx>:
    679c:	cf 93       	push	r28
    679e:	90 91 61 15 	lds	r25, 0x1561	; 0x801561 <midiRxInIndex>
    67a2:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <midiRxOutIndex>
    67a6:	98 17       	cp	r25, r24
    67a8:	79 f0       	breq	.+30     	; 0x67c8 <serial1MIDIReadRx+0x2c>
    67aa:	e0 91 6f 15 	lds	r30, 0x156F	; 0x80156f <midiRxOutIndex>
    67ae:	f0 e0       	ldi	r31, 0x00	; 0
    67b0:	e1 5c       	subi	r30, 0xC1	; 193
    67b2:	fb 4e       	sbci	r31, 0xEB	; 235
    67b4:	c0 81       	ld	r28, Z
    67b6:	8c 2f       	mov	r24, r28
    67b8:	de df       	rcall	.-68     	; 0x6776 <serial0USB_logMIDIin>
    67ba:	80 91 6f 15 	lds	r24, 0x156F	; 0x80156f <midiRxOutIndex>
    67be:	8f 5f       	subi	r24, 0xFF	; 255
    67c0:	8f 71       	andi	r24, 0x1F	; 31
    67c2:	80 93 6f 15 	sts	0x156F, r24	; 0x80156f <midiRxOutIndex>
    67c6:	01 c0       	rjmp	.+2      	; 0x67ca <serial1MIDIReadRx+0x2e>
    67c8:	cd ef       	ldi	r28, 0xFD	; 253
    67ca:	8c 2f       	mov	r24, r28
    67cc:	cf 91       	pop	r28
    67ce:	08 95       	ret

000067d0 <serial0USB_logMIDIout>:
    67d0:	cf 93       	push	r28
    67d2:	90 91 6e 15 	lds	r25, 0x156E	; 0x80156e <serUSB_Active>
    67d6:	99 23       	and	r25, r25
    67d8:	61 f0       	breq	.+24     	; 0x67f2 <serial0USB_logMIDIout+0x22>
    67da:	c8 2f       	mov	r28, r24
    67dc:	8f e6       	ldi	r24, 0x6F	; 111
    67de:	95 df       	rcall	.-214    	; 0x670a <serial0SER_USBSend>
    67e0:	8c 2f       	mov	r24, r28
    67e2:	82 95       	swap	r24
    67e4:	8f 70       	andi	r24, 0x0F	; 15
    67e6:	73 d2       	rcall	.+1254   	; 0x6cce <nibbleToChr>
    67e8:	90 df       	rcall	.-224    	; 0x670a <serial0SER_USBSend>
    67ea:	8c 2f       	mov	r24, r28
    67ec:	8f 70       	andi	r24, 0x0F	; 15
    67ee:	6f d2       	rcall	.+1246   	; 0x6cce <nibbleToChr>
    67f0:	8c df       	rcall	.-232    	; 0x670a <serial0SER_USBSend>
    67f2:	cf 91       	pop	r28
    67f4:	08 95       	ret

000067f6 <serial1MIDISend>:
    67f6:	cf 93       	push	r28
    67f8:	90 91 2f 09 	lds	r25, 0x092F	; 0x80092f <midi_Setting+0x1>
    67fc:	99 23       	and	r25, r25
    67fe:	71 f0       	breq	.+28     	; 0x681c <serial1MIDISend+0x26>
    6800:	88 23       	and	r24, r24
    6802:	64 f4       	brge	.+24     	; 0x681c <serial1MIDISend+0x26>
    6804:	90 91 fb 13 	lds	r25, 0x13FB	; 0x8013fb <midiTxLastCmd>
    6808:	89 17       	cp	r24, r25
    680a:	09 f4       	brne	.+2      	; 0x680e <serial1MIDISend+0x18>
    680c:	3f c0       	rjmp	.+126    	; 0x688c <serial1MIDISend+0x96>
    680e:	80 3a       	cpi	r24, 0xA0	; 160
    6810:	18 f4       	brcc	.+6      	; 0x6818 <serial1MIDISend+0x22>
    6812:	80 93 fb 13 	sts	0x13FB, r24	; 0x8013fb <midiTxLastCmd>
    6816:	02 c0       	rjmp	.+4      	; 0x681c <serial1MIDISend+0x26>
    6818:	10 92 fb 13 	sts	0x13FB, r1	; 0x8013fb <midiTxLastCmd>
    681c:	2f b7       	in	r18, 0x3f	; 63
    681e:	f8 94       	cli
    6820:	91 e0       	ldi	r25, 0x01	; 1
    6822:	06 c0       	rjmp	.+12     	; 0x6830 <serial1MIDISend+0x3a>
    6824:	ef e2       	ldi	r30, 0x2F	; 47
    6826:	f2 e0       	ldi	r31, 0x02	; 2
    6828:	9a e0       	ldi	r25, 0x0A	; 10
    682a:	90 8b       	std	Z+16, r25	; 0x10
    682c:	11 8a       	std	Z+17, r1	; 0x11
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	91 11       	cpse	r25, r1
    6832:	f8 cf       	rjmp	.-16     	; 0x6824 <serial1MIDISend+0x2e>
    6834:	c8 2f       	mov	r28, r24
    6836:	2f bf       	out	0x3f, r18	; 63
    6838:	e9 ec       	ldi	r30, 0xC9	; 201
    683a:	f0 e0       	ldi	r31, 0x00	; 0
    683c:	80 81       	ld	r24, Z
    683e:	8f 7d       	andi	r24, 0xDF	; 223
    6840:	80 83       	st	Z, r24
    6842:	8c 2f       	mov	r24, r28
    6844:	c5 df       	rcall	.-118    	; 0x67d0 <serial0USB_logMIDIout>
    6846:	e0 91 ed 13 	lds	r30, 0x13ED	; 0x8013ed <midiTxInIndex>
    684a:	f0 e0       	ldi	r31, 0x00	; 0
    684c:	e1 5a       	subi	r30, 0xA1	; 161
    684e:	fb 4e       	sbci	r31, 0xEB	; 235
    6850:	c0 83       	st	Z, r28
    6852:	80 91 ed 13 	lds	r24, 0x13ED	; 0x8013ed <midiTxInIndex>
    6856:	8f 5f       	subi	r24, 0xFF	; 255
    6858:	80 93 ed 13 	sts	0x13ED, r24	; 0x8013ed <midiTxInIndex>
    685c:	90 91 ed 13 	lds	r25, 0x13ED	; 0x8013ed <midiTxInIndex>
    6860:	80 91 fa 13 	lds	r24, 0x13FA	; 0x8013fa <midiTxOutIndex>
    6864:	98 13       	cpse	r25, r24
    6866:	0d c0       	rjmp	.+26     	; 0x6882 <serial1MIDISend+0x8c>
    6868:	80 91 72 15 	lds	r24, 0x1572	; 0x801572 <midiTxOvflCount>
    686c:	88 23       	and	r24, r24
    686e:	31 f0       	breq	.+12     	; 0x687c <serial1MIDISend+0x86>
    6870:	8f 3f       	cpi	r24, 0xFF	; 255
    6872:	39 f0       	breq	.+14     	; 0x6882 <serial1MIDISend+0x8c>
    6874:	8f 5f       	subi	r24, 0xFF	; 255
    6876:	80 93 72 15 	sts	0x1572, r24	; 0x801572 <midiTxOvflCount>
    687a:	03 c0       	rjmp	.+6      	; 0x6882 <serial1MIDISend+0x8c>
    687c:	81 e0       	ldi	r24, 0x01	; 1
    687e:	80 93 72 15 	sts	0x1572, r24	; 0x801572 <midiTxOvflCount>
    6882:	e9 ec       	ldi	r30, 0xC9	; 201
    6884:	f0 e0       	ldi	r31, 0x00	; 0
    6886:	80 81       	ld	r24, Z
    6888:	80 62       	ori	r24, 0x20	; 32
    688a:	80 83       	st	Z, r24
    688c:	cf 91       	pop	r28
    688e:	08 95       	ret

00006890 <serial0USB_logPipeIn>:
    6890:	cf 93       	push	r28
    6892:	df 93       	push	r29
    6894:	20 91 6e 15 	lds	r18, 0x156E	; 0x80156e <serUSB_Active>
    6898:	22 23       	and	r18, r18
    689a:	a9 f0       	breq	.+42     	; 0x68c6 <serial0USB_logPipeIn+0x36>
    689c:	c9 2f       	mov	r28, r25
    689e:	d8 2f       	mov	r29, r24
    68a0:	8b e6       	ldi	r24, 0x6B	; 107
    68a2:	33 df       	rcall	.-410    	; 0x670a <serial0SER_USBSend>
    68a4:	8c 2f       	mov	r24, r28
    68a6:	82 95       	swap	r24
    68a8:	8f 70       	andi	r24, 0x0F	; 15
    68aa:	11 d2       	rcall	.+1058   	; 0x6cce <nibbleToChr>
    68ac:	2e df       	rcall	.-420    	; 0x670a <serial0SER_USBSend>
    68ae:	cf 70       	andi	r28, 0x0F	; 15
    68b0:	8c 2f       	mov	r24, r28
    68b2:	0d d2       	rcall	.+1050   	; 0x6cce <nibbleToChr>
    68b4:	2a df       	rcall	.-428    	; 0x670a <serial0SER_USBSend>
    68b6:	8d 2f       	mov	r24, r29
    68b8:	82 95       	swap	r24
    68ba:	8f 70       	andi	r24, 0x0F	; 15
    68bc:	08 d2       	rcall	.+1040   	; 0x6cce <nibbleToChr>
    68be:	25 df       	rcall	.-438    	; 0x670a <serial0SER_USBSend>
    68c0:	8c 2f       	mov	r24, r28
    68c2:	05 d2       	rcall	.+1034   	; 0x6cce <nibbleToChr>
    68c4:	22 df       	rcall	.-444    	; 0x670a <serial0SER_USBSend>
    68c6:	df 91       	pop	r29
    68c8:	cf 91       	pop	r28
    68ca:	08 95       	ret

000068cc <serial0SER_USB_sendStringP>:
    68cc:	cf 93       	push	r28
    68ce:	df 93       	push	r29
    68d0:	fc 01       	movw	r30, r24
    68d2:	02 c0       	rjmp	.+4      	; 0x68d8 <serial0SER_USB_sendStringP+0xc>
    68d4:	1a df       	rcall	.-460    	; 0x670a <serial0SER_USBSend>
    68d6:	fe 01       	movw	r30, r28
    68d8:	ef 01       	movw	r28, r30
    68da:	21 96       	adiw	r28, 0x01	; 1
    68dc:	84 91       	lpm	r24, Z
    68de:	88 23       	and	r24, r24
    68e0:	21 f0       	breq	.+8      	; 0x68ea <serial0SER_USB_sendStringP+0x1e>
    68e2:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <serUSBOvflFlag>
    68e6:	9f 3f       	cpi	r25, 0xFF	; 255
    68e8:	a9 f7       	brne	.-22     	; 0x68d4 <serial0SER_USB_sendStringP+0x8>
    68ea:	df 91       	pop	r29
    68ec:	cf 91       	pop	r28
    68ee:	08 95       	ret

000068f0 <serial0SER_USB_sendCRLF>:
    68f0:	83 ef       	ldi	r24, 0xF3	; 243
    68f2:	91 e1       	ldi	r25, 0x11	; 17
    68f4:	eb cf       	rjmp	.-42     	; 0x68cc <serial0SER_USB_sendStringP>
    68f6:	08 95       	ret

000068f8 <init_Serial0SerUSB>:
    68f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    68fc:	88 e0       	ldi	r24, 0x08	; 8
    68fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    6902:	e1 ec       	ldi	r30, 0xC1	; 193
    6904:	f0 e0       	ldi	r31, 0x00	; 0
    6906:	80 81       	ld	r24, Z
    6908:	88 69       	ori	r24, 0x98	; 152
    690a:	80 83       	st	Z, r24
    690c:	e2 ec       	ldi	r30, 0xC2	; 194
    690e:	f0 e0       	ldi	r31, 0x00	; 0
    6910:	80 81       	ld	r24, Z
    6912:	86 60       	ori	r24, 0x06	; 6
    6914:	80 83       	st	Z, r24
    6916:	8f ef       	ldi	r24, 0xFF	; 255
    6918:	93 e1       	ldi	r25, 0x13	; 19
    691a:	90 93 71 15 	sts	0x1571, r25	; 0x801571 <serUSBRxInIndex+0x1>
    691e:	80 93 70 15 	sts	0x1570, r24	; 0x801570 <serUSBRxInIndex>
    6922:	90 93 65 15 	sts	0x1565, r25	; 0x801565 <serUSBRxOutIndex+0x1>
    6926:	80 93 64 15 	sts	0x1564, r24	; 0x801564 <serUSBRxOutIndex>
    692a:	8b ee       	ldi	r24, 0xEB	; 235
    692c:	9b e0       	ldi	r25, 0x0B	; 11
    692e:	90 93 ec 13 	sts	0x13EC, r25	; 0x8013ec <serUSBTxOutIndex+0x1>
    6932:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <serUSBTxOutIndex>
    6936:	90 93 f4 17 	sts	0x17F4, r25	; 0x8017f4 <serUSBTxInIndex+0x1>
    693a:	80 93 f3 17 	sts	0x17F3, r24	; 0x8017f3 <serUSBTxInIndex>
    693e:	10 92 66 15 	sts	0x1566, r1	; 0x801566 <serUSBOvflFlag>
    6942:	0e 94 aa 0a 	call	0x1554	; 0x1554 <eeprom_ReadUSB>
    6946:	8f 3f       	cpi	r24, 0xFF	; 255
    6948:	41 f4       	brne	.+16     	; 0x695a <init_Serial0SerUSB+0x62>
    694a:	10 92 6e 15 	sts	0x156E, r1	; 0x80156e <serUSB_Active>
    694e:	40 e0       	ldi	r20, 0x00	; 0
    6950:	50 e0       	ldi	r21, 0x00	; 0
    6952:	64 e0       	ldi	r22, 0x04	; 4
    6954:	81 e0       	ldi	r24, 0x01	; 1
    6956:	0e 94 a2 14 	call	0x2944	; 0x2944 <log_putError>
    695a:	80 91 6e 15 	lds	r24, 0x156E	; 0x80156e <serUSB_Active>
    695e:	8f 3f       	cpi	r24, 0xFF	; 255
    6960:	41 f4       	brne	.+16     	; 0x6972 <init_Serial0SerUSB+0x7a>
    6962:	86 e4       	ldi	r24, 0x46	; 70
    6964:	93 e0       	ldi	r25, 0x03	; 3
    6966:	b2 df       	rcall	.-156    	; 0x68cc <serial0SER_USB_sendStringP>
    6968:	83 e9       	ldi	r24, 0x93	; 147
    696a:	91 e1       	ldi	r25, 0x11	; 17
    696c:	af df       	rcall	.-162    	; 0x68cc <serial0SER_USB_sendStringP>
    696e:	c0 df       	rcall	.-128    	; 0x68f0 <serial0SER_USB_sendCRLF>
    6970:	bf cf       	rjmp	.-130    	; 0x68f0 <serial0SER_USB_sendCRLF>
    6972:	08 95       	ret

00006974 <serial0SER_USB_sendString>:
    6974:	1f 93       	push	r17
    6976:	cf 93       	push	r28
    6978:	df 93       	push	r29
    697a:	ec 01       	movw	r28, r24
    697c:	10 e5       	ldi	r17, 0x50	; 80
    697e:	03 c0       	rjmp	.+6      	; 0x6986 <serial0SER_USB_sendString+0x12>
    6980:	21 96       	adiw	r28, 0x01	; 1
    6982:	c3 de       	rcall	.-634    	; 0x670a <serial0SER_USBSend>
    6984:	11 50       	subi	r17, 0x01	; 1
    6986:	88 81       	ld	r24, Y
    6988:	88 23       	and	r24, r24
    698a:	31 f0       	breq	.+12     	; 0x6998 <serial0SER_USB_sendString+0x24>
    698c:	90 91 66 15 	lds	r25, 0x1566	; 0x801566 <serUSBOvflFlag>
    6990:	9f 3f       	cpi	r25, 0xFF	; 255
    6992:	11 f0       	breq	.+4      	; 0x6998 <serial0SER_USB_sendString+0x24>
    6994:	11 11       	cpse	r17, r1
    6996:	f4 cf       	rjmp	.-24     	; 0x6980 <serial0SER_USB_sendString+0xc>
    6998:	df 91       	pop	r29
    699a:	cf 91       	pop	r28
    699c:	1f 91       	pop	r17
    699e:	08 95       	ret

000069a0 <__vector_25>:
    69a0:	1f 92       	push	r1
    69a2:	0f 92       	push	r0
    69a4:	0f b6       	in	r0, 0x3f	; 63
    69a6:	0f 92       	push	r0
    69a8:	11 24       	eor	r1, r1
    69aa:	0b b6       	in	r0, 0x3b	; 59
    69ac:	0f 92       	push	r0
    69ae:	2f 93       	push	r18
    69b0:	3f 93       	push	r19
    69b2:	4f 93       	push	r20
    69b4:	5f 93       	push	r21
    69b6:	8f 93       	push	r24
    69b8:	9f 93       	push	r25
    69ba:	ef 93       	push	r30
    69bc:	ff 93       	push	r31
    69be:	e0 91 70 15 	lds	r30, 0x1570	; 0x801570 <serUSBRxInIndex>
    69c2:	f0 91 71 15 	lds	r31, 0x1571	; 0x801571 <serUSBRxInIndex+0x1>
    69c6:	af 01       	movw	r20, r30
    69c8:	4f 5f       	subi	r20, 0xFF	; 255
    69ca:	5f 4f       	sbci	r21, 0xFF	; 255
    69cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    69d0:	80 83       	st	Z, r24
    69d2:	84 e1       	ldi	r24, 0x14	; 20
    69d4:	4e 33       	cpi	r20, 0x3E	; 62
    69d6:	58 07       	cpc	r21, r24
    69d8:	19 f0       	breq	.+6      	; 0x69e0 <__vector_25+0x40>
    69da:	10 f0       	brcs	.+4      	; 0x69e0 <__vector_25+0x40>
    69dc:	4f ef       	ldi	r20, 0xFF	; 255
    69de:	53 e1       	ldi	r21, 0x13	; 19
    69e0:	9f b7       	in	r25, 0x3f	; 63
    69e2:	f8 94       	cli
    69e4:	81 e0       	ldi	r24, 0x01	; 1
    69e6:	05 c0       	rjmp	.+10     	; 0x69f2 <__vector_25+0x52>
    69e8:	20 91 64 15 	lds	r18, 0x1564	; 0x801564 <serUSBRxOutIndex>
    69ec:	30 91 65 15 	lds	r19, 0x1565	; 0x801565 <serUSBRxOutIndex+0x1>
    69f0:	80 e0       	ldi	r24, 0x00	; 0
    69f2:	81 11       	cpse	r24, r1
    69f4:	f9 cf       	rjmp	.-14     	; 0x69e8 <__vector_25+0x48>
    69f6:	9f bf       	out	0x3f, r25	; 63
    69f8:	42 17       	cp	r20, r18
    69fa:	53 07       	cpc	r21, r19
    69fc:	21 f4       	brne	.+8      	; 0x6a06 <__vector_25+0x66>
    69fe:	8f ef       	ldi	r24, 0xFF	; 255
    6a00:	80 93 66 15 	sts	0x1566, r24	; 0x801566 <serUSBOvflFlag>
    6a04:	04 c0       	rjmp	.+8      	; 0x6a0e <__vector_25+0x6e>
    6a06:	50 93 71 15 	sts	0x1571, r21	; 0x801571 <serUSBRxInIndex+0x1>
    6a0a:	40 93 70 15 	sts	0x1570, r20	; 0x801570 <serUSBRxInIndex>
    6a0e:	ff 91       	pop	r31
    6a10:	ef 91       	pop	r30
    6a12:	9f 91       	pop	r25
    6a14:	8f 91       	pop	r24
    6a16:	5f 91       	pop	r21
    6a18:	4f 91       	pop	r20
    6a1a:	3f 91       	pop	r19
    6a1c:	2f 91       	pop	r18
    6a1e:	0f 90       	pop	r0
    6a20:	0b be       	out	0x3b, r0	; 59
    6a22:	0f 90       	pop	r0
    6a24:	0f be       	out	0x3f, r0	; 63
    6a26:	0f 90       	pop	r0
    6a28:	1f 90       	pop	r1
    6a2a:	18 95       	reti

00006a2c <__vector_26>:
    6a2c:	1f 92       	push	r1
    6a2e:	0f 92       	push	r0
    6a30:	0f b6       	in	r0, 0x3f	; 63
    6a32:	0f 92       	push	r0
    6a34:	11 24       	eor	r1, r1
    6a36:	0b b6       	in	r0, 0x3b	; 59
    6a38:	0f 92       	push	r0
    6a3a:	2f 93       	push	r18
    6a3c:	8f 93       	push	r24
    6a3e:	9f 93       	push	r25
    6a40:	ef 93       	push	r30
    6a42:	ff 93       	push	r31
    6a44:	e0 91 eb 13 	lds	r30, 0x13EB	; 0x8013eb <serUSBTxOutIndex>
    6a48:	f0 91 ec 13 	lds	r31, 0x13EC	; 0x8013ec <serUSBTxOutIndex+0x1>
    6a4c:	80 91 f3 17 	lds	r24, 0x17F3	; 0x8017f3 <serUSBTxInIndex>
    6a50:	90 91 f4 17 	lds	r25, 0x17F4	; 0x8017f4 <serUSBTxInIndex+0x1>
    6a54:	e8 17       	cp	r30, r24
    6a56:	f9 07       	cpc	r31, r25
    6a58:	89 f0       	breq	.+34     	; 0x6a7c <__vector_26+0x50>
    6a5a:	cf 01       	movw	r24, r30
    6a5c:	01 96       	adiw	r24, 0x01	; 1
    6a5e:	20 81       	ld	r18, Z
    6a60:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    6a64:	23 e1       	ldi	r18, 0x13	; 19
    6a66:	8a 3e       	cpi	r24, 0xEA	; 234
    6a68:	92 07       	cpc	r25, r18
    6a6a:	19 f0       	breq	.+6      	; 0x6a72 <__vector_26+0x46>
    6a6c:	10 f0       	brcs	.+4      	; 0x6a72 <__vector_26+0x46>
    6a6e:	8b ee       	ldi	r24, 0xEB	; 235
    6a70:	9b e0       	ldi	r25, 0x0B	; 11
    6a72:	90 93 ec 13 	sts	0x13EC, r25	; 0x8013ec <serUSBTxOutIndex+0x1>
    6a76:	80 93 eb 13 	sts	0x13EB, r24	; 0x8013eb <serUSBTxOutIndex>
    6a7a:	05 c0       	rjmp	.+10     	; 0x6a86 <__vector_26+0x5a>
    6a7c:	e1 ec       	ldi	r30, 0xC1	; 193
    6a7e:	f0 e0       	ldi	r31, 0x00	; 0
    6a80:	80 81       	ld	r24, Z
    6a82:	8f 7d       	andi	r24, 0xDF	; 223
    6a84:	80 83       	st	Z, r24
    6a86:	ff 91       	pop	r31
    6a88:	ef 91       	pop	r30
    6a8a:	9f 91       	pop	r25
    6a8c:	8f 91       	pop	r24
    6a8e:	2f 91       	pop	r18
    6a90:	0f 90       	pop	r0
    6a92:	0b be       	out	0x3b, r0	; 59
    6a94:	0f 90       	pop	r0
    6a96:	0f be       	out	0x3f, r0	; 63
    6a98:	0f 90       	pop	r0
    6a9a:	1f 90       	pop	r1
    6a9c:	18 95       	reti

00006a9e <init_Serial3SerESP>:
    6a9e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__TEXT_REGION_LENGTH__+0x700135>
    6aa2:	88 e0       	ldi	r24, 0x08	; 8
    6aa4:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__TEXT_REGION_LENGTH__+0x700134>
    6aa8:	e1 e3       	ldi	r30, 0x31	; 49
    6aaa:	f1 e0       	ldi	r31, 0x01	; 1
    6aac:	80 81       	ld	r24, Z
    6aae:	88 69       	ori	r24, 0x98	; 152
    6ab0:	80 83       	st	Z, r24
    6ab2:	e2 e3       	ldi	r30, 0x32	; 50
    6ab4:	f1 e0       	ldi	r31, 0x01	; 1
    6ab6:	80 81       	ld	r24, Z
    6ab8:	86 60       	ori	r24, 0x06	; 6
    6aba:	80 83       	st	Z, r24
    6abc:	83 e7       	ldi	r24, 0x73	; 115
    6abe:	95 e1       	ldi	r25, 0x15	; 21
    6ac0:	90 93 fd 13 	sts	0x13FD, r25	; 0x8013fd <serESPRxInIndex+0x1>
    6ac4:	80 93 fc 13 	sts	0x13FC, r24	; 0x8013fc <serESPRxInIndex>
    6ac8:	90 93 f8 13 	sts	0x13F8, r25	; 0x8013f8 <serESPRxOutIndex+0x1>
    6acc:	80 93 f7 13 	sts	0x13F7, r24	; 0x8013f7 <serESPRxOutIndex>
    6ad0:	83 ef       	ldi	r24, 0xF3	; 243
    6ad2:	95 e1       	ldi	r25, 0x15	; 21
    6ad4:	90 93 60 15 	sts	0x1560, r25	; 0x801560 <serESPTxOutIndex+0x1>
    6ad8:	80 93 5f 15 	sts	0x155F, r24	; 0x80155f <serESPTxOutIndex>
    6adc:	90 93 63 15 	sts	0x1563, r25	; 0x801563 <serESPTxInIndex+0x1>
    6ae0:	80 93 62 15 	sts	0x1562, r24	; 0x801562 <serESPTxInIndex>
    6ae4:	10 92 ee 13 	sts	0x13EE, r1	; 0x8013ee <serESPOvflFlag>
    6ae8:	8f ef       	ldi	r24, 0xFF	; 255
    6aea:	80 93 6a 15 	sts	0x156A, r24	; 0x80156a <serESP_Active>
    6aee:	80 e0       	ldi	r24, 0x00	; 0
    6af0:	07 c0       	rjmp	.+14     	; 0x6b00 <init_Serial3SerESP+0x62>
    6af2:	e8 2f       	mov	r30, r24
    6af4:	f0 e0       	ldi	r31, 0x00	; 0
    6af6:	e1 51       	subi	r30, 0x11	; 17
    6af8:	fc 4e       	sbci	r31, 0xEC	; 236
    6afa:	9f ef       	ldi	r25, 0xFF	; 255
    6afc:	90 83       	st	Z, r25
    6afe:	8f 5f       	subi	r24, 0xFF	; 255
    6b00:	88 30       	cpi	r24, 0x08	; 8
    6b02:	b8 f3       	brcs	.-18     	; 0x6af2 <init_Serial3SerESP+0x54>
    6b04:	08 95       	ret

00006b06 <serial3SER_ESPSend>:
    6b06:	e0 91 62 15 	lds	r30, 0x1562	; 0x801562 <serESPTxInIndex>
    6b0a:	f0 91 63 15 	lds	r31, 0x1563	; 0x801563 <serESPTxInIndex+0x1>
    6b0e:	a1 e3       	ldi	r26, 0x31	; 49
    6b10:	b1 e0       	ldi	r27, 0x01	; 1
    6b12:	9c 91       	ld	r25, X
    6b14:	9f 7d       	andi	r25, 0xDF	; 223
    6b16:	9c 93       	st	X, r25
    6b18:	af 01       	movw	r20, r30
    6b1a:	4f 5f       	subi	r20, 0xFF	; 255
    6b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    6b1e:	80 83       	st	Z, r24
    6b20:	87 e1       	ldi	r24, 0x17	; 23
    6b22:	42 3f       	cpi	r20, 0xF2	; 242
    6b24:	58 07       	cpc	r21, r24
    6b26:	19 f0       	breq	.+6      	; 0x6b2e <serial3SER_ESPSend+0x28>
    6b28:	10 f0       	brcs	.+4      	; 0x6b2e <serial3SER_ESPSend+0x28>
    6b2a:	43 ef       	ldi	r20, 0xF3	; 243
    6b2c:	55 e1       	ldi	r21, 0x15	; 21
    6b2e:	9f b7       	in	r25, 0x3f	; 63
    6b30:	f8 94       	cli
    6b32:	81 e0       	ldi	r24, 0x01	; 1
    6b34:	05 c0       	rjmp	.+10     	; 0x6b40 <serial3SER_ESPSend+0x3a>
    6b36:	20 91 5f 15 	lds	r18, 0x155F	; 0x80155f <serESPTxOutIndex>
    6b3a:	30 91 60 15 	lds	r19, 0x1560	; 0x801560 <serESPTxOutIndex+0x1>
    6b3e:	80 e0       	ldi	r24, 0x00	; 0
    6b40:	81 11       	cpse	r24, r1
    6b42:	f9 cf       	rjmp	.-14     	; 0x6b36 <serial3SER_ESPSend+0x30>
    6b44:	9f bf       	out	0x3f, r25	; 63
    6b46:	42 17       	cp	r20, r18
    6b48:	53 07       	cpc	r21, r19
    6b4a:	49 f4       	brne	.+18     	; 0x6b5e <serial3SER_ESPSend+0x58>
    6b4c:	8f ef       	ldi	r24, 0xFF	; 255
    6b4e:	80 93 ee 13 	sts	0x13EE, r24	; 0x8013ee <serESPOvflFlag>
    6b52:	e1 e3       	ldi	r30, 0x31	; 49
    6b54:	f1 e0       	ldi	r31, 0x01	; 1
    6b56:	80 81       	ld	r24, Z
    6b58:	80 62       	ori	r24, 0x20	; 32
    6b5a:	80 83       	st	Z, r24
    6b5c:	08 95       	ret
    6b5e:	50 93 63 15 	sts	0x1563, r21	; 0x801563 <serESPTxInIndex+0x1>
    6b62:	40 93 62 15 	sts	0x1562, r20	; 0x801562 <serESPTxInIndex>
    6b66:	e1 e3       	ldi	r30, 0x31	; 49
    6b68:	f1 e0       	ldi	r31, 0x01	; 1
    6b6a:	80 81       	ld	r24, Z
    6b6c:	80 62       	ori	r24, 0x20	; 32
    6b6e:	80 83       	st	Z, r24
    6b70:	08 95       	ret

00006b72 <serial3SER_ESPReadRx>:
}

uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
    6b72:	e0 91 f7 13 	lds	r30, 0x13F7	; 0x8013f7 <serESPRxOutIndex>
    6b76:	f0 91 f8 13 	lds	r31, 0x13F8	; 0x8013f8 <serESPRxOutIndex+0x1>
	if SER_ESP_RX_BUFFER_EMPTY {
    6b7a:	80 91 fc 13 	lds	r24, 0x13FC	; 0x8013fc <serESPRxInIndex>
    6b7e:	90 91 fd 13 	lds	r25, 0x13FD	; 0x8013fd <serESPRxInIndex+0x1>
    6b82:	e8 17       	cp	r30, r24
    6b84:	f9 07       	cpc	r31, r25
    6b86:	81 f0       	breq	.+32     	; 0x6ba8 <serial3SER_ESPReadRx+0x36>
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
	} else {
		result = *index++;
    6b88:	9f 01       	movw	r18, r30
    6b8a:	2f 5f       	subi	r18, 0xFF	; 255
    6b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b8e:	80 81       	ld	r24, Z
		if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]){
    6b90:	95 e1       	ldi	r25, 0x15	; 21
    6b92:	22 3f       	cpi	r18, 0xF2	; 242
    6b94:	39 07       	cpc	r19, r25
    6b96:	19 f0       	breq	.+6      	; 0x6b9e <serial3SER_ESPReadRx+0x2c>
    6b98:	10 f0       	brcs	.+4      	; 0x6b9e <serial3SER_ESPReadRx+0x2c>
			// wrap around
			index = serESPRxBuffer;
    6b9a:	23 e7       	ldi	r18, 0x73	; 115
    6b9c:	35 e1       	ldi	r19, 0x15	; 21
		}
		serESPRxOutIndex = index;
    6b9e:	30 93 f8 13 	sts	0x13F8, r19	; 0x8013f8 <serESPRxOutIndex+0x1>
    6ba2:	20 93 f7 13 	sts	0x13F7, r18	; 0x8013f7 <serESPRxOutIndex>
    6ba6:	08 95       	ret
uint8_t serial3SER_ESPReadRx(){
	uint8_t result;
	uint8_t* index = (uint8_t*) serESPRxOutIndex; // temp storage for voilatile pointer
	if SER_ESP_RX_BUFFER_EMPTY {
		// auxilliary only: return defined value - but better check before if data is avaiavble
		result = SER_ESP_UNDEFINED;
    6ba8:	80 e0       	ldi	r24, 0x00	; 0
			index = serESPRxBuffer;
		}
		serESPRxOutIndex = index;
	}
	return result;
}
    6baa:	08 95       	ret

00006bac <__vector_54>:

ISR(USART3_RX_vect) {
    6bac:	1f 92       	push	r1
    6bae:	0f 92       	push	r0
    6bb0:	0f b6       	in	r0, 0x3f	; 63
    6bb2:	0f 92       	push	r0
    6bb4:	11 24       	eor	r1, r1
    6bb6:	0b b6       	in	r0, 0x3b	; 59
    6bb8:	0f 92       	push	r0
    6bba:	2f 93       	push	r18
    6bbc:	3f 93       	push	r19
    6bbe:	4f 93       	push	r20
    6bc0:	5f 93       	push	r21
    6bc2:	6f 93       	push	r22
    6bc4:	8f 93       	push	r24
    6bc6:	9f 93       	push	r25
    6bc8:	af 93       	push	r26
    6bca:	bf 93       	push	r27
    6bcc:	ef 93       	push	r30
    6bce:	ff 93       	push	r31
	// received byt from uart3
	uint8_t* index = (uint8_t*) serESPRxInIndex; // temp storage of voilatile pointer
    6bd0:	e0 91 fc 13 	lds	r30, 0x13FC	; 0x8013fc <serESPRxInIndex>
    6bd4:	f0 91 fd 13 	lds	r31, 0x13FD	; 0x8013fd <serESPRxInIndex+0x1>
	uint8_t receivedByte = UDR3;
    6bd8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
	*index++ = receivedByte; // store in receive buffer
    6bdc:	af 01       	movw	r20, r30
    6bde:	4f 5f       	subi	r20, 0xFF	; 255
    6be0:	5f 4f       	sbci	r21, 0xFF	; 255
    6be2:	60 83       	st	Z, r22
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
    6be4:	85 e1       	ldi	r24, 0x15	; 21
    6be6:	42 3f       	cpi	r20, 0xF2	; 242
    6be8:	58 07       	cpc	r21, r24
    6bea:	19 f0       	breq	.+6      	; 0x6bf2 <__vector_54+0x46>
    6bec:	10 f0       	brcs	.+4      	; 0x6bf2 <__vector_54+0x46>
		// wrap around
		index = serESPRxBuffer;
    6bee:	43 e7       	ldi	r20, 0x73	; 115
    6bf0:	55 e1       	ldi	r21, 0x15	; 21
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6bf2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    6bf4:	f8 94       	cli
    6bf6:	81 e0       	ldi	r24, 0x01	; 1
    6bf8:	05 c0       	rjmp	.+10     	; 0x6c04 <__vector_54+0x58>
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
    6bfa:	20 91 f7 13 	lds	r18, 0x13F7	; 0x8013f7 <serESPRxOutIndex>
    6bfe:	30 91 f8 13 	lds	r19, 0x13F8	; 0x8013f8 <serESPRxOutIndex+0x1>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6c02:	80 e0       	ldi	r24, 0x00	; 0
    6c04:	81 11       	cpse	r24, r1
    6c06:	f9 cf       	rjmp	.-14     	; 0x6bfa <__vector_54+0x4e>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    6c08:	9f bf       	out	0x3f, r25	; 63
		outIndex = (uint8_t*) serESPRxOutIndex; // temp storage of volatile
	}
	if (index == outIndex) {
    6c0a:	42 17       	cp	r20, r18
    6c0c:	53 07       	cpc	r21, r19
    6c0e:	39 f4       	brne	.+14     	; 0x6c1e <__vector_54+0x72>
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
    6c10:	8f ef       	ldi	r24, 0xFF	; 255
    6c12:	80 93 ee 13 	sts	0x13EE, r24	; 0x8013ee <serESPOvflFlag>
	if (index > &serESPRxBuffer[SER_ESP_RX_BUFFER_SIZE-1]) {
		// wrap around
		index = serESPRxBuffer;
	}
	uint8_t* outIndex;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE){
    6c16:	80 e0       	ldi	r24, 0x00	; 0
    6c18:	a6 ef       	ldi	r26, 0xF6	; 246
    6c1a:	b3 e1       	ldi	r27, 0x13	; 19
    6c1c:	0a c0       	rjmp	.+20     	; 0x6c32 <__vector_54+0x86>
	if (index == outIndex) {
		// overflow!
		// serusbRxInIndex is NOT updated, keep writing last available byte in buffer
		serESPOvflFlag = SER_OVFL_YES; // must be checked and reset by main
	} else {
		serESPRxInIndex = index; // Update serESPRxInIndex
    6c1e:	50 93 fd 13 	sts	0x13FD, r21	; 0x8013fd <serESPRxInIndex+0x1>
    6c22:	40 93 fc 13 	sts	0x13FC, r20	; 0x8013fc <serESPRxInIndex>
    6c26:	f7 cf       	rjmp	.-18     	; 0x6c16 <__vector_54+0x6a>
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
		*(inpBufferPtr) = *(inpBufferPtr-1);
    6c28:	fd 01       	movw	r30, r26
    6c2a:	92 91       	ld	r25, -Z
    6c2c:	9c 93       	st	X, r25
		inpBufferPtr--;
    6c2e:	df 01       	movw	r26, r30
		serESPRxInIndex = index; // Update serESPRxInIndex
	}
	// V 0.66 second buffer for processing data
	uint8_t* inpBufferPtr = & serESPInBuffer[SER_ESP_INPUTBUFFER_SIZE-1]; // points to last=oldest byte in buffer
	// shift buffer content, oldest byte is lost
	for (uint8_t i = 0; i < SER_ESP_INPUTBUFFER_SIZE-1; i++){ // only shift SER_ESP_INPUTBUFFER_SIZE - 1 times!
    6c30:	8f 5f       	subi	r24, 0xFF	; 255
    6c32:	87 30       	cpi	r24, 0x07	; 7
    6c34:	c8 f3       	brcs	.-14     	; 0x6c28 <__vector_54+0x7c>
		*(inpBufferPtr) = *(inpBufferPtr-1);
		inpBufferPtr--;
	}
	*inpBufferPtr = receivedByte; // new byte is stored in serESPInBuffer[0]
    6c36:	6c 93       	st	X, r22
}
    6c38:	ff 91       	pop	r31
    6c3a:	ef 91       	pop	r30
    6c3c:	bf 91       	pop	r27
    6c3e:	af 91       	pop	r26
    6c40:	9f 91       	pop	r25
    6c42:	8f 91       	pop	r24
    6c44:	6f 91       	pop	r22
    6c46:	5f 91       	pop	r21
    6c48:	4f 91       	pop	r20
    6c4a:	3f 91       	pop	r19
    6c4c:	2f 91       	pop	r18
    6c4e:	0f 90       	pop	r0
    6c50:	0b be       	out	0x3b, r0	; 59
    6c52:	0f 90       	pop	r0
    6c54:	0f be       	out	0x3f, r0	; 63
    6c56:	0f 90       	pop	r0
    6c58:	1f 90       	pop	r1
    6c5a:	18 95       	reti

00006c5c <__vector_55>:

ISR(USART3_UDRE_vect) {
    6c5c:	1f 92       	push	r1
    6c5e:	0f 92       	push	r0
    6c60:	0f b6       	in	r0, 0x3f	; 63
    6c62:	0f 92       	push	r0
    6c64:	11 24       	eor	r1, r1
    6c66:	0b b6       	in	r0, 0x3b	; 59
    6c68:	0f 92       	push	r0
    6c6a:	2f 93       	push	r18
    6c6c:	8f 93       	push	r24
    6c6e:	9f 93       	push	r25
    6c70:	ef 93       	push	r30
    6c72:	ff 93       	push	r31
	uint8_t* index = (uint8_t*) serESPTxOutIndex; // temp storage of volatile pointer
    6c74:	e0 91 5f 15 	lds	r30, 0x155F	; 0x80155f <serESPTxOutIndex>
    6c78:	f0 91 60 15 	lds	r31, 0x1560	; 0x801560 <serESPTxOutIndex+0x1>
	if (SER_ESP_TX_BUFFER_NONEMPTY){
    6c7c:	80 91 62 15 	lds	r24, 0x1562	; 0x801562 <serESPTxInIndex>
    6c80:	90 91 63 15 	lds	r25, 0x1563	; 0x801563 <serESPTxInIndex+0x1>
    6c84:	e8 17       	cp	r30, r24
    6c86:	f9 07       	cpc	r31, r25
    6c88:	89 f0       	breq	.+34     	; 0x6cac <__vector_55+0x50>
		// es ist was zu senden da
		UDR3 = *index++;
    6c8a:	cf 01       	movw	r24, r30
    6c8c:	01 96       	adiw	r24, 0x01	; 1
    6c8e:	20 81       	ld	r18, Z
    6c90:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
		if (index > &serESPTxBuffer[SER_ESP_TX_BUFFER_SIZE-1]) {
    6c94:	27 e1       	ldi	r18, 0x17	; 23
    6c96:	82 3f       	cpi	r24, 0xF2	; 242
    6c98:	92 07       	cpc	r25, r18
    6c9a:	19 f0       	breq	.+6      	; 0x6ca2 <__vector_55+0x46>
    6c9c:	10 f0       	brcs	.+4      	; 0x6ca2 <__vector_55+0x46>
			// wrap around
			index = serESPTxBuffer;
    6c9e:	83 ef       	ldi	r24, 0xF3	; 243
    6ca0:	95 e1       	ldi	r25, 0x15	; 21
		}
		serESPTxOutIndex = index; // V0.61 bug: write back index was forgotten
    6ca2:	90 93 60 15 	sts	0x1560, r25	; 0x801560 <serESPTxOutIndex+0x1>
    6ca6:	80 93 5f 15 	sts	0x155F, r24	; 0x80155f <serESPTxOutIndex>
    6caa:	05 c0       	rjmp	.+10     	; 0x6cb6 <__vector_55+0x5a>
	} else {
		// nothing to send
		UCSR3B &= ~(1 << UDRIE3);
    6cac:	e1 e3       	ldi	r30, 0x31	; 49
    6cae:	f1 e0       	ldi	r31, 0x01	; 1
    6cb0:	80 81       	ld	r24, Z
    6cb2:	8f 7d       	andi	r24, 0xDF	; 223
    6cb4:	80 83       	st	Z, r24
		// Interrupt abschalten - wird beim Schreiben des Sendepuffer wieder gesetzt
	}
    6cb6:	ff 91       	pop	r31
    6cb8:	ef 91       	pop	r30
    6cba:	9f 91       	pop	r25
    6cbc:	8f 91       	pop	r24
    6cbe:	2f 91       	pop	r18
    6cc0:	0f 90       	pop	r0
    6cc2:	0b be       	out	0x3b, r0	; 59
    6cc4:	0f 90       	pop	r0
    6cc6:	0f be       	out	0x3f, r0	; 63
    6cc8:	0f 90       	pop	r0
    6cca:	1f 90       	pop	r1
    6ccc:	18 95       	reti

00006cce <nibbleToChr>:
	if ((myNibbles[0] + 10*myNibbles[1] + 100*myNibbles[2]) > 255) {
		return(DEC_OVFL);
	}  else {
		return(0);
	}
}
    6cce:	8a 30       	cpi	r24, 0x0A	; 10
    6cd0:	10 f0       	brcs	.+4      	; 0x6cd6 <nibbleToChr+0x8>
    6cd2:	89 5c       	subi	r24, 0xC9	; 201
    6cd4:	08 95       	ret
    6cd6:	80 5d       	subi	r24, 0xD0	; 208
    6cd8:	08 95       	ret

00006cda <lcd_setCG>:
    6cda:	ef 92       	push	r14
    6cdc:	ff 92       	push	r15
    6cde:	1f 93       	push	r17
    6ce0:	cf 93       	push	r28
    6ce2:	df 93       	push	r29
    6ce4:	eb 01       	movw	r28, r22
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	88 0f       	add	r24, r24
    6cea:	99 1f       	adc	r25, r25
    6cec:	88 0f       	add	r24, r24
    6cee:	99 1f       	adc	r25, r25
    6cf0:	88 0f       	add	r24, r24
    6cf2:	99 1f       	adc	r25, r25
    6cf4:	80 64       	ori	r24, 0x40	; 64
    6cf6:	0e 94 08 12 	call	0x2410	; 0x2410 <lcd_write_command>
    6cfa:	10 e0       	ldi	r17, 0x00	; 0
    6cfc:	0a c0       	rjmp	.+20     	; 0x6d12 <lcd_setCG+0x38>
    6cfe:	7e 01       	movw	r14, r28
    6d00:	8f ef       	ldi	r24, 0xFF	; 255
    6d02:	e8 1a       	sub	r14, r24
    6d04:	f8 0a       	sbc	r15, r24
    6d06:	fe 01       	movw	r30, r28
    6d08:	84 91       	lpm	r24, Z
    6d0a:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <lcd_write_character>
    6d0e:	1f 5f       	subi	r17, 0xFF	; 255
    6d10:	e7 01       	movw	r28, r14
    6d12:	18 30       	cpi	r17, 0x08	; 8
    6d14:	a0 f3       	brcs	.-24     	; 0x6cfe <lcd_setCG+0x24>
    6d16:	df 91       	pop	r29
    6d18:	cf 91       	pop	r28
    6d1a:	1f 91       	pop	r17
    6d1c:	ff 90       	pop	r15
    6d1e:	ef 90       	pop	r14
    6d20:	08 95       	ret

00006d22 <lcd_initCG>:
    6d22:	6b ee       	ldi	r22, 0xEB	; 235
    6d24:	71 e1       	ldi	r23, 0x11	; 17
    6d26:	80 e0       	ldi	r24, 0x00	; 0
    6d28:	d8 df       	rcall	.-80     	; 0x6cda <lcd_setCG>
    6d2a:	63 ee       	ldi	r22, 0xE3	; 227
    6d2c:	71 e1       	ldi	r23, 0x11	; 17
    6d2e:	81 e0       	ldi	r24, 0x01	; 1
    6d30:	d4 df       	rcall	.-88     	; 0x6cda <lcd_setCG>
    6d32:	6b ed       	ldi	r22, 0xDB	; 219
    6d34:	71 e1       	ldi	r23, 0x11	; 17
    6d36:	82 e0       	ldi	r24, 0x02	; 2
    6d38:	d0 cf       	rjmp	.-96     	; 0x6cda <lcd_setCG>
    6d3a:	08 95       	ret

00006d3c <lcd_hexout>:
    6d3c:	cf 93       	push	r28
    6d3e:	c8 2f       	mov	r28, r24
    6d40:	82 95       	swap	r24
    6d42:	8f 70       	andi	r24, 0x0F	; 15
    6d44:	8a 30       	cpi	r24, 0x0A	; 10
    6d46:	10 f0       	brcs	.+4      	; 0x6d4c <lcd_hexout+0x10>
    6d48:	89 5c       	subi	r24, 0xC9	; 201
    6d4a:	01 c0       	rjmp	.+2      	; 0x6d4e <lcd_hexout+0x12>
    6d4c:	80 5d       	subi	r24, 0xD0	; 208
    6d4e:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6d52:	cf 70       	andi	r28, 0x0F	; 15
    6d54:	ca 30       	cpi	r28, 0x0A	; 10
    6d56:	18 f0       	brcs	.+6      	; 0x6d5e <lcd_hexout+0x22>
    6d58:	87 e3       	ldi	r24, 0x37	; 55
    6d5a:	8c 0f       	add	r24, r28
    6d5c:	02 c0       	rjmp	.+4      	; 0x6d62 <lcd_hexout+0x26>
    6d5e:	80 e3       	ldi	r24, 0x30	; 48
    6d60:	8c 0f       	add	r24, r28
    6d62:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6d66:	cf 91       	pop	r28
    6d68:	08 95       	ret

00006d6a <lcd_longout>:
    6d6a:	cf 93       	push	r28
    6d6c:	df 93       	push	r29
    6d6e:	d3 e0       	ldi	r29, 0x03	; 3
    6d70:	1c c0       	rjmp	.+56     	; 0x6daa <lcd_longout+0x40>
    6d72:	ed 2f       	mov	r30, r29
    6d74:	0d 2e       	mov	r0, r29
    6d76:	00 0c       	add	r0, r0
    6d78:	ff 0b       	sbc	r31, r31
    6d7a:	e7 50       	subi	r30, 0x07	; 7
    6d7c:	f8 4e       	sbci	r31, 0xE8	; 232
    6d7e:	c0 81       	ld	r28, Z
    6d80:	8c 2f       	mov	r24, r28
    6d82:	82 95       	swap	r24
    6d84:	8f 70       	andi	r24, 0x0F	; 15
    6d86:	8a 30       	cpi	r24, 0x0A	; 10
    6d88:	10 f0       	brcs	.+4      	; 0x6d8e <lcd_longout+0x24>
    6d8a:	89 5c       	subi	r24, 0xC9	; 201
    6d8c:	01 c0       	rjmp	.+2      	; 0x6d90 <lcd_longout+0x26>
    6d8e:	80 5d       	subi	r24, 0xD0	; 208
    6d90:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6d94:	cf 70       	andi	r28, 0x0F	; 15
    6d96:	ca 30       	cpi	r28, 0x0A	; 10
    6d98:	18 f0       	brcs	.+6      	; 0x6da0 <lcd_longout+0x36>
    6d9a:	87 e3       	ldi	r24, 0x37	; 55
    6d9c:	8c 0f       	add	r24, r28
    6d9e:	02 c0       	rjmp	.+4      	; 0x6da4 <lcd_longout+0x3a>
    6da0:	80 e3       	ldi	r24, 0x30	; 48
    6da2:	8c 0f       	add	r24, r28
    6da4:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6da8:	d1 50       	subi	r29, 0x01	; 1
    6daa:	dd 23       	and	r29, r29
    6dac:	14 f7       	brge	.-60     	; 0x6d72 <lcd_longout+0x8>
    6dae:	df 91       	pop	r29
    6db0:	cf 91       	pop	r28
    6db2:	08 95       	ret

00006db4 <lcd_dec2out>:
    6db4:	cf 93       	push	r28
    6db6:	c8 2f       	mov	r28, r24
    6db8:	84 36       	cpi	r24, 0x64	; 100
    6dba:	50 f0       	brcs	.+20     	; 0x6dd0 <lcd_dec2out+0x1c>
    6dbc:	8d e2       	ldi	r24, 0x2D	; 45
    6dbe:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6dc2:	8d e2       	ldi	r24, 0x2D	; 45
    6dc4:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6dc8:	0d c0       	rjmp	.+26     	; 0x6de4 <lcd_dec2out+0x30>
    6dca:	ca 50       	subi	r28, 0x0A	; 10
    6dcc:	8f 5f       	subi	r24, 0xFF	; 255
    6dce:	01 c0       	rjmp	.+2      	; 0x6dd2 <lcd_dec2out+0x1e>
    6dd0:	80 e0       	ldi	r24, 0x00	; 0
    6dd2:	ca 30       	cpi	r28, 0x0A	; 10
    6dd4:	d0 f7       	brcc	.-12     	; 0x6dca <lcd_dec2out+0x16>
    6dd6:	80 5d       	subi	r24, 0xD0	; 208
    6dd8:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6ddc:	80 e3       	ldi	r24, 0x30	; 48
    6dde:	8c 0f       	add	r24, r28
    6de0:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    6de4:	cf 91       	pop	r28
    6de6:	08 95       	ret

00006de8 <putChar_Dec2>:
    6de8:	84 36       	cpi	r24, 0x64	; 100
    6dea:	58 f0       	brcs	.+22     	; 0x6e02 <putChar_Dec2+0x1a>
    6dec:	8d e2       	ldi	r24, 0x2D	; 45
    6dee:	db 01       	movw	r26, r22
    6df0:	8c 93       	st	X, r24
    6df2:	fb 01       	movw	r30, r22
    6df4:	32 96       	adiw	r30, 0x02	; 2
    6df6:	11 96       	adiw	r26, 0x01	; 1
    6df8:	8c 93       	st	X, r24
    6dfa:	0f c0       	rjmp	.+30     	; 0x6e1a <putChar_Dec2+0x32>
    6dfc:	8a 50       	subi	r24, 0x0A	; 10
    6dfe:	9f 5f       	subi	r25, 0xFF	; 255
    6e00:	01 c0       	rjmp	.+2      	; 0x6e04 <putChar_Dec2+0x1c>
    6e02:	90 e0       	ldi	r25, 0x00	; 0
    6e04:	8a 30       	cpi	r24, 0x0A	; 10
    6e06:	d0 f7       	brcc	.-12     	; 0x6dfc <putChar_Dec2+0x14>
    6e08:	90 5d       	subi	r25, 0xD0	; 208
    6e0a:	fb 01       	movw	r30, r22
    6e0c:	90 83       	st	Z, r25
    6e0e:	32 96       	adiw	r30, 0x02	; 2
    6e10:	90 e3       	ldi	r25, 0x30	; 48
    6e12:	98 0f       	add	r25, r24
    6e14:	db 01       	movw	r26, r22
    6e16:	11 96       	adiw	r26, 0x01	; 1
    6e18:	9c 93       	st	X, r25
    6e1a:	10 82       	st	Z, r1
    6e1c:	cf 01       	movw	r24, r30
    6e1e:	08 95       	ret

00006e20 <putChar_Dec>:
    6e20:	90 e0       	ldi	r25, 0x00	; 0
    6e22:	02 c0       	rjmp	.+4      	; 0x6e28 <putChar_Dec+0x8>
    6e24:	84 56       	subi	r24, 0x64	; 100
    6e26:	9f 5f       	subi	r25, 0xFF	; 255
    6e28:	84 36       	cpi	r24, 0x64	; 100
    6e2a:	e0 f7       	brcc	.-8      	; 0x6e24 <putChar_Dec+0x4>
    6e2c:	99 23       	and	r25, r25
    6e2e:	39 f0       	breq	.+14     	; 0x6e3e <putChar_Dec+0x1e>
    6e30:	90 5d       	subi	r25, 0xD0	; 208
    6e32:	db 01       	movw	r26, r22
    6e34:	9c 93       	st	X, r25
    6e36:	6f 5f       	subi	r22, 0xFF	; 255
    6e38:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3a:	2f ef       	ldi	r18, 0xFF	; 255
    6e3c:	01 c0       	rjmp	.+2      	; 0x6e40 <putChar_Dec+0x20>
    6e3e:	20 e0       	ldi	r18, 0x00	; 0
    6e40:	90 e0       	ldi	r25, 0x00	; 0
    6e42:	02 c0       	rjmp	.+4      	; 0x6e48 <putChar_Dec+0x28>
    6e44:	8a 50       	subi	r24, 0x0A	; 10
    6e46:	9f 5f       	subi	r25, 0xFF	; 255
    6e48:	8a 30       	cpi	r24, 0x0A	; 10
    6e4a:	e0 f7       	brcc	.-8      	; 0x6e44 <putChar_Dec+0x24>
    6e4c:	91 11       	cpse	r25, r1
    6e4e:	02 c0       	rjmp	.+4      	; 0x6e54 <putChar_Dec+0x34>
    6e50:	2f 3f       	cpi	r18, 0xFF	; 255
    6e52:	31 f4       	brne	.+12     	; 0x6e60 <putChar_Dec+0x40>
    6e54:	fb 01       	movw	r30, r22
    6e56:	31 96       	adiw	r30, 0x01	; 1
    6e58:	90 5d       	subi	r25, 0xD0	; 208
    6e5a:	db 01       	movw	r26, r22
    6e5c:	9c 93       	st	X, r25
    6e5e:	01 c0       	rjmp	.+2      	; 0x6e62 <putChar_Dec+0x42>
    6e60:	fb 01       	movw	r30, r22
    6e62:	80 5d       	subi	r24, 0xD0	; 208
    6e64:	80 83       	st	Z, r24
    6e66:	11 82       	std	Z+1, r1	; 0x01
    6e68:	cf 01       	movw	r24, r30
    6e6a:	01 96       	adiw	r24, 0x01	; 1
    6e6c:	08 95       	ret

00006e6e <putChar_hex>:
    6e6e:	fb 01       	movw	r30, r22
    6e70:	98 2f       	mov	r25, r24
    6e72:	92 95       	swap	r25
    6e74:	9f 70       	andi	r25, 0x0F	; 15
    6e76:	9a 30       	cpi	r25, 0x0A	; 10
    6e78:	10 f0       	brcs	.+4      	; 0x6e7e <putChar_hex+0x10>
    6e7a:	99 5c       	subi	r25, 0xC9	; 201
    6e7c:	01 c0       	rjmp	.+2      	; 0x6e80 <putChar_hex+0x12>
    6e7e:	90 5d       	subi	r25, 0xD0	; 208
    6e80:	90 83       	st	Z, r25
    6e82:	98 2f       	mov	r25, r24
    6e84:	9f 70       	andi	r25, 0x0F	; 15
    6e86:	9f 01       	movw	r18, r30
    6e88:	2e 5f       	subi	r18, 0xFE	; 254
    6e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e8c:	9a 30       	cpi	r25, 0x0A	; 10
    6e8e:	10 f0       	brcs	.+4      	; 0x6e94 <putChar_hex+0x26>
    6e90:	99 5c       	subi	r25, 0xC9	; 201
    6e92:	01 c0       	rjmp	.+2      	; 0x6e96 <putChar_hex+0x28>
    6e94:	90 5d       	subi	r25, 0xD0	; 208
    6e96:	91 83       	std	Z+1, r25	; 0x01
    6e98:	12 82       	std	Z+2, r1	; 0x02
    6e9a:	c9 01       	movw	r24, r18
    6e9c:	08 95       	ret

00006e9e <putChar_MidiChan>:
    6e9e:	80 31       	cpi	r24, 0x10	; 16
    6ea0:	48 f0       	brcs	.+18     	; 0x6eb4 <putChar_MidiChan+0x16>
    6ea2:	8e e6       	ldi	r24, 0x6E	; 110
    6ea4:	db 01       	movw	r26, r22
    6ea6:	8c 93       	st	X, r24
    6ea8:	fb 01       	movw	r30, r22
    6eaa:	32 96       	adiw	r30, 0x02	; 2
    6eac:	8f e6       	ldi	r24, 0x6F	; 111
    6eae:	11 96       	adiw	r26, 0x01	; 1
    6eb0:	8c 93       	st	X, r24
    6eb2:	14 c0       	rjmp	.+40     	; 0x6edc <putChar_MidiChan+0x3e>
    6eb4:	91 e0       	ldi	r25, 0x01	; 1
    6eb6:	98 0f       	add	r25, r24
    6eb8:	9a 30       	cpi	r25, 0x0A	; 10
    6eba:	38 f0       	brcs	.+14     	; 0x6eca <putChar_MidiChan+0x2c>
    6ebc:	db 01       	movw	r26, r22
    6ebe:	11 96       	adiw	r26, 0x01	; 1
    6ec0:	81 e3       	ldi	r24, 0x31	; 49
    6ec2:	fb 01       	movw	r30, r22
    6ec4:	80 83       	st	Z, r24
    6ec6:	96 ef       	ldi	r25, 0xF6	; 246
    6ec8:	05 c0       	rjmp	.+10     	; 0x6ed4 <putChar_MidiChan+0x36>
    6eca:	db 01       	movw	r26, r22
    6ecc:	11 96       	adiw	r26, 0x01	; 1
    6ece:	80 e2       	ldi	r24, 0x20	; 32
    6ed0:	fb 01       	movw	r30, r22
    6ed2:	80 83       	st	Z, r24
    6ed4:	fd 01       	movw	r30, r26
    6ed6:	31 96       	adiw	r30, 0x01	; 1
    6ed8:	90 5d       	subi	r25, 0xD0	; 208
    6eda:	9c 93       	st	X, r25
    6edc:	10 82       	st	Z, r1
    6ede:	cf 01       	movw	r24, r30
    6ee0:	08 95       	ret

00006ee2 <putChar_long>:
    6ee2:	ac 01       	movw	r20, r24
    6ee4:	fb 01       	movw	r30, r22
    6ee6:	34 96       	adiw	r30, 0x04	; 4
    6ee8:	db 01       	movw	r26, r22
    6eea:	14 96       	adiw	r26, 0x04	; 4
    6eec:	1c 92       	st	X, r1
    6eee:	20 e0       	ldi	r18, 0x00	; 0
    6ef0:	10 c0       	rjmp	.+32     	; 0x6f12 <putChar_long+0x30>
    6ef2:	94 2f       	mov	r25, r20
    6ef4:	9f 70       	andi	r25, 0x0F	; 15
    6ef6:	31 97       	sbiw	r30, 0x01	; 1
    6ef8:	9a 30       	cpi	r25, 0x0A	; 10
    6efa:	10 f0       	brcs	.+4      	; 0x6f00 <putChar_long+0x1e>
    6efc:	99 5c       	subi	r25, 0xC9	; 201
    6efe:	01 c0       	rjmp	.+2      	; 0x6f02 <putChar_long+0x20>
    6f00:	90 5d       	subi	r25, 0xD0	; 208
    6f02:	90 83       	st	Z, r25
    6f04:	52 95       	swap	r21
    6f06:	42 95       	swap	r20
    6f08:	4f 70       	andi	r20, 0x0F	; 15
    6f0a:	45 27       	eor	r20, r21
    6f0c:	5f 70       	andi	r21, 0x0F	; 15
    6f0e:	45 27       	eor	r20, r21
    6f10:	2f 5f       	subi	r18, 0xFF	; 255
    6f12:	24 30       	cpi	r18, 0x04	; 4
    6f14:	70 f3       	brcs	.-36     	; 0x6ef2 <putChar_long+0x10>
    6f16:	cf 01       	movw	r24, r30
    6f18:	04 96       	adiw	r24, 0x04	; 4
    6f1a:	08 95       	ret

00006f1c <putChar_Note>:
    6f1c:	88 23       	and	r24, r24
    6f1e:	8c f4       	brge	.+34     	; 0x6f42 <putChar_Note+0x26>
    6f20:	8d e2       	ldi	r24, 0x2D	; 45
    6f22:	db 01       	movw	r26, r22
    6f24:	8c 93       	st	X, r24
    6f26:	9e e6       	ldi	r25, 0x6E	; 110
    6f28:	11 96       	adiw	r26, 0x01	; 1
    6f2a:	9c 93       	st	X, r25
    6f2c:	11 97       	sbiw	r26, 0x01	; 1
    6f2e:	12 96       	adiw	r26, 0x02	; 2
    6f30:	8c 93       	st	X, r24
    6f32:	12 97       	sbiw	r26, 0x02	; 2
    6f34:	14 96       	adiw	r26, 0x04	; 4
    6f36:	fb 01       	movw	r30, r22
    6f38:	13 82       	std	Z+3, r1	; 0x03
    6f3a:	49 c0       	rjmp	.+146    	; 0x6fce <putChar_Note+0xb2>
    6f3c:	8c 50       	subi	r24, 0x0C	; 12
    6f3e:	9f 5f       	subi	r25, 0xFF	; 255
    6f40:	01 c0       	rjmp	.+2      	; 0x6f44 <putChar_Note+0x28>
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	8c 30       	cpi	r24, 0x0C	; 12
    6f46:	d0 f7       	brcc	.-12     	; 0x6f3c <putChar_Note+0x20>
    6f48:	8b 30       	cpi	r24, 0x0B	; 11
    6f4a:	39 f4       	brne	.+14     	; 0x6f5a <putChar_Note+0x3e>
    6f4c:	fb 01       	movw	r30, r22
    6f4e:	31 96       	adiw	r30, 0x01	; 1
    6f50:	88 e4       	ldi	r24, 0x48	; 72
    6f52:	db 01       	movw	r26, r22
    6f54:	8c 93       	st	X, r24
    6f56:	8f e5       	ldi	r24, 0x5F	; 95
    6f58:	27 c0       	rjmp	.+78     	; 0x6fa8 <putChar_Note+0x8c>
    6f5a:	85 30       	cpi	r24, 0x05	; 5
    6f5c:	58 f4       	brcc	.+22     	; 0x6f74 <putChar_Note+0x58>
    6f5e:	fb 01       	movw	r30, r22
    6f60:	31 96       	adiw	r30, 0x01	; 1
    6f62:	28 2f       	mov	r18, r24
    6f64:	26 95       	lsr	r18
    6f66:	2d 5b       	subi	r18, 0xBD	; 189
    6f68:	db 01       	movw	r26, r22
    6f6a:	2c 93       	st	X, r18
    6f6c:	80 fd       	sbrc	r24, 0
    6f6e:	19 c0       	rjmp	.+50     	; 0x6fa2 <putChar_Note+0x86>
    6f70:	8f e5       	ldi	r24, 0x5F	; 95
    6f72:	1a c0       	rjmp	.+52     	; 0x6fa8 <putChar_Note+0x8c>
    6f74:	89 30       	cpi	r24, 0x09	; 9
    6f76:	30 f0       	brcs	.+12     	; 0x6f84 <putChar_Note+0x68>
    6f78:	fb 01       	movw	r30, r22
    6f7a:	31 96       	adiw	r30, 0x01	; 1
    6f7c:	21 e4       	ldi	r18, 0x41	; 65
    6f7e:	db 01       	movw	r26, r22
    6f80:	2c 93       	st	X, r18
    6f82:	0b c0       	rjmp	.+22     	; 0x6f9a <putChar_Note+0x7e>
    6f84:	fb 01       	movw	r30, r22
    6f86:	31 96       	adiw	r30, 0x01	; 1
    6f88:	28 2f       	mov	r18, r24
    6f8a:	30 e0       	ldi	r19, 0x00	; 0
    6f8c:	25 50       	subi	r18, 0x05	; 5
    6f8e:	31 09       	sbc	r19, r1
    6f90:	35 95       	asr	r19
    6f92:	27 95       	ror	r18
    6f94:	2a 5b       	subi	r18, 0xBA	; 186
    6f96:	db 01       	movw	r26, r22
    6f98:	2c 93       	st	X, r18
    6f9a:	80 ff       	sbrs	r24, 0
    6f9c:	04 c0       	rjmp	.+8      	; 0x6fa6 <putChar_Note+0x8a>
    6f9e:	8f e5       	ldi	r24, 0x5F	; 95
    6fa0:	03 c0       	rjmp	.+6      	; 0x6fa8 <putChar_Note+0x8c>
    6fa2:	83 e2       	ldi	r24, 0x23	; 35
    6fa4:	01 c0       	rjmp	.+2      	; 0x6fa8 <putChar_Note+0x8c>
    6fa6:	83 e2       	ldi	r24, 0x23	; 35
    6fa8:	80 83       	st	Z, r24
    6faa:	91 11       	cpse	r25, r1
    6fac:	05 c0       	rjmp	.+10     	; 0x6fb8 <putChar_Note+0x9c>
    6fae:	df 01       	movw	r26, r30
    6fb0:	12 96       	adiw	r26, 0x02	; 2
    6fb2:	8d e6       	ldi	r24, 0x6D	; 109
    6fb4:	81 83       	std	Z+1, r24	; 0x01
    6fb6:	0b c0       	rjmp	.+22     	; 0x6fce <putChar_Note+0xb2>
    6fb8:	9c 30       	cpi	r25, 0x0C	; 12
    6fba:	28 f4       	brcc	.+10     	; 0x6fc6 <putChar_Note+0xaa>
    6fbc:	df 01       	movw	r26, r30
    6fbe:	12 96       	adiw	r26, 0x02	; 2
    6fc0:	91 5d       	subi	r25, 0xD1	; 209
    6fc2:	91 83       	std	Z+1, r25	; 0x01
    6fc4:	04 c0       	rjmp	.+8      	; 0x6fce <putChar_Note+0xb2>
    6fc6:	df 01       	movw	r26, r30
    6fc8:	12 96       	adiw	r26, 0x02	; 2
    6fca:	8d e2       	ldi	r24, 0x2D	; 45
    6fcc:	81 83       	std	Z+1, r24	; 0x01
    6fce:	1c 92       	st	X, r1
    6fd0:	cd 01       	movw	r24, r26
    6fd2:	08 95       	ret

00006fd4 <putChar_Manual>:
    6fd4:	83 30       	cpi	r24, 0x03	; 3
    6fd6:	38 f4       	brcc	.+14     	; 0x6fe6 <putChar_Manual+0x12>
    6fd8:	fb 01       	movw	r30, r22
    6fda:	31 96       	adiw	r30, 0x01	; 1
    6fdc:	93 e3       	ldi	r25, 0x33	; 51
    6fde:	98 1b       	sub	r25, r24
    6fe0:	db 01       	movw	r26, r22
    6fe2:	9c 93       	st	X, r25
    6fe4:	0d c0       	rjmp	.+26     	; 0x7000 <putChar_Manual+0x2c>
    6fe6:	83 30       	cpi	r24, 0x03	; 3
    6fe8:	31 f4       	brne	.+12     	; 0x6ff6 <putChar_Manual+0x22>
    6fea:	fb 01       	movw	r30, r22
    6fec:	31 96       	adiw	r30, 0x01	; 1
    6fee:	80 e5       	ldi	r24, 0x50	; 80
    6ff0:	db 01       	movw	r26, r22
    6ff2:	8c 93       	st	X, r24
    6ff4:	05 c0       	rjmp	.+10     	; 0x7000 <putChar_Manual+0x2c>
    6ff6:	fb 01       	movw	r30, r22
    6ff8:	31 96       	adiw	r30, 0x01	; 1
    6ffa:	8d e2       	ldi	r24, 0x2D	; 45
    6ffc:	db 01       	movw	r26, r22
    6ffe:	8c 93       	st	X, r24
    7000:	10 82       	st	Z, r1
    7002:	cf 01       	movw	r24, r30
    7004:	08 95       	ret

00007006 <putString_P>:
    7006:	fc 01       	movw	r30, r24
    7008:	db 01       	movw	r26, r22
    700a:	20 e0       	ldi	r18, 0x00	; 0
    700c:	02 c0       	rjmp	.+4      	; 0x7012 <putString_P+0xc>
    700e:	28 2f       	mov	r18, r24
    7010:	da 01       	movw	r26, r20
    7012:	94 91       	lpm	r25, Z
    7014:	99 23       	and	r25, r25
    7016:	51 f0       	breq	.+20     	; 0x702c <putString_P+0x26>
    7018:	ad 01       	movw	r20, r26
    701a:	4f 5f       	subi	r20, 0xFF	; 255
    701c:	5f 4f       	sbci	r21, 0xFF	; 255
    701e:	31 96       	adiw	r30, 0x01	; 1
    7020:	9c 93       	st	X, r25
    7022:	81 e0       	ldi	r24, 0x01	; 1
    7024:	82 0f       	add	r24, r18
    7026:	24 31       	cpi	r18, 0x14	; 20
    7028:	90 f3       	brcs	.-28     	; 0x700e <putString_P+0x8>
    702a:	01 c0       	rjmp	.+2      	; 0x702e <putString_P+0x28>
    702c:	ad 01       	movw	r20, r26
    702e:	ca 01       	movw	r24, r20
    7030:	08 95       	ret

00007032 <lcd_wordout>:
    7032:	cf 93       	push	r28
    7034:	c8 2f       	mov	r28, r24
    7036:	89 2f       	mov	r24, r25
    7038:	81 de       	rcall	.-766    	; 0x6d3c <lcd_hexout>
    703a:	8c 2f       	mov	r24, r28
    703c:	7f de       	rcall	.-770    	; 0x6d3c <lcd_hexout>
    703e:	cf 91       	pop	r28
    7040:	08 95       	ret

00007042 <lcd_noteOut>:
    7042:	cf 93       	push	r28
    7044:	df 93       	push	r29
    7046:	88 23       	and	r24, r24
    7048:	e4 f1       	brlt	.+120    	; 0x70c2 <lcd_noteOut+0x80>
    704a:	90 e0       	ldi	r25, 0x00	; 0
    704c:	02 c0       	rjmp	.+4      	; 0x7052 <lcd_noteOut+0x10>
    704e:	9f 5f       	subi	r25, 0xFF	; 255
    7050:	8c 50       	subi	r24, 0x0C	; 12
    7052:	8c 30       	cpi	r24, 0x0C	; 12
    7054:	e0 f7       	brcc	.-8      	; 0x704e <lcd_noteOut+0xc>
    7056:	48 2f       	mov	r20, r24
    7058:	50 e0       	ldi	r21, 0x00	; 0
    705a:	4c 30       	cpi	r20, 0x0C	; 12
    705c:	51 05       	cpc	r21, r1
    705e:	30 f4       	brcc	.+12     	; 0x706c <lcd_noteOut+0x2a>
    7060:	fa 01       	movw	r30, r20
    7062:	88 27       	eor	r24, r24
    7064:	ea 55       	subi	r30, 0x5A	; 90
    7066:	ff 4f       	sbci	r31, 0xFF	; 255
    7068:	8f 4f       	sbci	r24, 0xFF	; 255
    706a:	5d c1       	rjmp	.+698    	; 0x7326 <__tablejump2__>
    706c:	d3 e2       	ldi	r29, 0x23	; 35
    706e:	80 e2       	ldi	r24, 0x20	; 32
    7070:	23 c0       	rjmp	.+70     	; 0x70b8 <lcd_noteOut+0x76>
    7072:	d3 e2       	ldi	r29, 0x23	; 35
    7074:	84 e4       	ldi	r24, 0x44	; 68
    7076:	20 c0       	rjmp	.+64     	; 0x70b8 <lcd_noteOut+0x76>
    7078:	d3 e2       	ldi	r29, 0x23	; 35
    707a:	86 e4       	ldi	r24, 0x46	; 70
    707c:	1d c0       	rjmp	.+58     	; 0x70b8 <lcd_noteOut+0x76>
    707e:	d3 e2       	ldi	r29, 0x23	; 35
    7080:	87 e4       	ldi	r24, 0x47	; 71
    7082:	1a c0       	rjmp	.+52     	; 0x70b8 <lcd_noteOut+0x76>
    7084:	d3 e2       	ldi	r29, 0x23	; 35
    7086:	81 e4       	ldi	r24, 0x41	; 65
    7088:	17 c0       	rjmp	.+46     	; 0x70b8 <lcd_noteOut+0x76>
    708a:	d5 ea       	ldi	r29, 0xA5	; 165
    708c:	83 e4       	ldi	r24, 0x43	; 67
    708e:	14 c0       	rjmp	.+40     	; 0x70b8 <lcd_noteOut+0x76>
    7090:	d5 ea       	ldi	r29, 0xA5	; 165
    7092:	84 e4       	ldi	r24, 0x44	; 68
    7094:	11 c0       	rjmp	.+34     	; 0x70b8 <lcd_noteOut+0x76>
    7096:	d5 ea       	ldi	r29, 0xA5	; 165
    7098:	85 e4       	ldi	r24, 0x45	; 69
    709a:	0e c0       	rjmp	.+28     	; 0x70b8 <lcd_noteOut+0x76>
    709c:	d5 ea       	ldi	r29, 0xA5	; 165
    709e:	86 e4       	ldi	r24, 0x46	; 70
    70a0:	0b c0       	rjmp	.+22     	; 0x70b8 <lcd_noteOut+0x76>
    70a2:	d5 ea       	ldi	r29, 0xA5	; 165
    70a4:	87 e4       	ldi	r24, 0x47	; 71
    70a6:	08 c0       	rjmp	.+16     	; 0x70b8 <lcd_noteOut+0x76>
    70a8:	d5 ea       	ldi	r29, 0xA5	; 165
    70aa:	81 e4       	ldi	r24, 0x41	; 65
    70ac:	05 c0       	rjmp	.+10     	; 0x70b8 <lcd_noteOut+0x76>
    70ae:	d5 ea       	ldi	r29, 0xA5	; 165
    70b0:	88 e4       	ldi	r24, 0x48	; 72
    70b2:	02 c0       	rjmp	.+4      	; 0x70b8 <lcd_noteOut+0x76>
    70b4:	d3 e2       	ldi	r29, 0x23	; 35
    70b6:	83 e4       	ldi	r24, 0x43	; 67
    70b8:	99 23       	and	r25, r25
    70ba:	39 f0       	breq	.+14     	; 0x70ca <lcd_noteOut+0x88>
    70bc:	cf e2       	ldi	r28, 0x2F	; 47
    70be:	c9 0f       	add	r28, r25
    70c0:	05 c0       	rjmp	.+10     	; 0x70cc <lcd_noteOut+0x8a>
    70c2:	cd e2       	ldi	r28, 0x2D	; 45
    70c4:	dd e2       	ldi	r29, 0x2D	; 45
    70c6:	8d e2       	ldi	r24, 0x2D	; 45
    70c8:	01 c0       	rjmp	.+2      	; 0x70cc <lcd_noteOut+0x8a>
    70ca:	cd e2       	ldi	r28, 0x2D	; 45
    70cc:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    70d0:	8d 2f       	mov	r24, r29
    70d2:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    70d6:	8c 2f       	mov	r24, r28
    70d8:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    70dc:	83 e0       	ldi	r24, 0x03	; 3
    70de:	df 91       	pop	r29
    70e0:	cf 91       	pop	r28
    70e2:	08 95       	ret

000070e4 <lcd_ChannelOut>:
    70e4:	cf 93       	push	r28
    70e6:	c8 2f       	mov	r28, r24
    70e8:	cf 70       	andi	r28, 0x0F	; 15
    70ea:	81 e0       	ldi	r24, 0x01	; 1
    70ec:	8c 0f       	add	r24, r28
    70ee:	8a 30       	cpi	r24, 0x0A	; 10
    70f0:	28 f0       	brcs	.+10     	; 0x70fc <lcd_ChannelOut+0x18>
    70f2:	81 e3       	ldi	r24, 0x31	; 49
    70f4:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    70f8:	87 ef       	ldi	r24, 0xF7	; 247
    70fa:	8c 0f       	add	r24, r28
    70fc:	80 5d       	subi	r24, 0xD0	; 208
    70fe:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    7102:	cf 91       	pop	r28
    7104:	08 95       	ret

00007106 <lcd_ManualOutDec>:
    7106:	84 30       	cpi	r24, 0x04	; 4
    7108:	20 f0       	brcs	.+8      	; 0x7112 <lcd_ManualOutDec+0xc>
    710a:	8d e2       	ldi	r24, 0x2D	; 45
    710c:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <lcd_putc>
    7110:	08 95       	ret
    7112:	83 30       	cpi	r24, 0x03	; 3
    7114:	21 f4       	brne	.+8      	; 0x711e <lcd_ManualOutDec+0x18>
    7116:	80 e5       	ldi	r24, 0x50	; 80
    7118:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <lcd_putc>
    711c:	08 95       	ret
    711e:	93 e3       	ldi	r25, 0x33	; 51
    7120:	98 1b       	sub	r25, r24
    7122:	89 2f       	mov	r24, r25
    7124:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <lcd_putc>
    7128:	08 95       	ret

0000712a <lcd_blank>:
    712a:	cf 93       	push	r28
    712c:	04 c0       	rjmp	.+8      	; 0x7136 <lcd_blank+0xc>
    712e:	80 e2       	ldi	r24, 0x20	; 32
    7130:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    7134:	8c 2f       	mov	r24, r28
    7136:	cf ef       	ldi	r28, 0xFF	; 255
    7138:	c8 0f       	add	r28, r24
    713a:	81 11       	cpse	r24, r1
    713c:	f8 cf       	rjmp	.-16     	; 0x712e <lcd_blank+0x4>
    713e:	cf 91       	pop	r28
    7140:	08 95       	ret

00007142 <lcd_clrEol>:
    7142:	cf 93       	push	r28
    7144:	90 e0       	ldi	r25, 0x00	; 0
    7146:	04 c0       	rjmp	.+8      	; 0x7150 <lcd_clrEol+0xe>
    7148:	80 e2       	ldi	r24, 0x20	; 32
    714a:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    714e:	9c 2f       	mov	r25, r28
    7150:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7154:	84 31       	cpi	r24, 0x14	; 20
    7156:	51 f0       	breq	.+20     	; 0x716c <lcd_clrEol+0x2a>
    7158:	84 35       	cpi	r24, 0x54	; 84
    715a:	41 f0       	breq	.+16     	; 0x716c <lcd_clrEol+0x2a>
    715c:	88 32       	cpi	r24, 0x28	; 40
    715e:	31 f0       	breq	.+12     	; 0x716c <lcd_clrEol+0x2a>
    7160:	88 36       	cpi	r24, 0x68	; 104
    7162:	21 f0       	breq	.+8      	; 0x716c <lcd_clrEol+0x2a>
    7164:	c1 e0       	ldi	r28, 0x01	; 1
    7166:	c9 0f       	add	r28, r25
    7168:	94 31       	cpi	r25, 0x14	; 20
    716a:	70 f3       	brcs	.-36     	; 0x7148 <lcd_clrEol+0x6>
    716c:	cf 91       	pop	r28
    716e:	08 95       	ret

00007170 <lcd_cursosblink>:
    7170:	8d e0       	ldi	r24, 0x0D	; 13
    7172:	0e 94 08 12 	call	0x2410	; 0x2410 <lcd_write_command>
    7176:	8f ef       	ldi	r24, 0xFF	; 255
    7178:	80 93 f7 17 	sts	0x17F7, r24	; 0x8017f7 <lcd_cursorIsOn>
    717c:	08 95       	ret

0000717e <lcd_cursoroff>:
    717e:	8c e0       	ldi	r24, 0x0C	; 12
    7180:	0e 94 08 12 	call	0x2410	; 0x2410 <lcd_write_command>
    7184:	10 92 f7 17 	sts	0x17F7, r1	; 0x8017f7 <lcd_cursorIsOn>
    7188:	08 95       	ret

0000718a <lcd_waitSymbolOn>:
    718a:	cf 93       	push	r28
    718c:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    7190:	8c e0       	ldi	r24, 0x0C	; 12
    7192:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    7196:	81 ea       	ldi	r24, 0xA1	; 161
    7198:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    719c:	8c 2f       	mov	r24, r28
    719e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    71a2:	cf 91       	pop	r28
    71a4:	08 95       	ret

000071a6 <lcd_waitSymbolOff>:
    71a6:	cf 93       	push	r28
    71a8:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <lcd_cursorPos>
    71ac:	8c e0       	ldi	r24, 0x0C	; 12
    71ae:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    71b2:	80 e2       	ldi	r24, 0x20	; 32
    71b4:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>
    71b8:	8c 2f       	mov	r24, r28
    71ba:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
    71be:	cf 91       	pop	r28
    71c0:	08 95       	ret

000071c2 <keylabel_set>:
static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
    71c2:	84 30       	cpi	r24, 0x04	; 4
    71c4:	28 f0       	brcs	.+10     	; 0x71d0 <keylabel_set+0xe>

static char labelBuffer [KEYLABEL_COUNT * KEYLABEL_LEN];

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
    71c6:	20 e0       	ldi	r18, 0x00	; 0
    71c8:	0d c0       	rjmp	.+26     	; 0x71e4 <keylabel_set+0x22>
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
    71ca:	2f 5f       	subi	r18, 0xFF	; 255

void keylabel_set(uint8_t keyNr, const __flash char* labelPStr){
	const __flash char* tempLabelPStr = labelPStr;
	uint8_t labelLen = 0;
	if (keyNr < KEYLABEL_COUNT){
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
    71cc:	fa 01       	movw	r30, r20
    71ce:	02 c0       	rjmp	.+4      	; 0x71d4 <keylabel_set+0x12>
    71d0:	fb 01       	movw	r30, r22
    71d2:	20 e0       	ldi	r18, 0x00	; 0
    71d4:	af 01       	movw	r20, r30
    71d6:	4f 5f       	subi	r20, 0xFF	; 255
    71d8:	5f 4f       	sbci	r21, 0xFF	; 255
    71da:	94 91       	lpm	r25, Z
    71dc:	99 23       	and	r25, r25
    71de:	11 f0       	breq	.+4      	; 0x71e4 <keylabel_set+0x22>
    71e0:	25 30       	cpi	r18, 0x05	; 5
    71e2:	98 f3       	brcs	.-26     	; 0x71ca <keylabel_set+0x8>
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
    71e4:	90 e0       	ldi	r25, 0x00	; 0
    71e6:	dc 01       	movw	r26, r24
    71e8:	aa 0f       	add	r26, r26
    71ea:	bb 1f       	adc	r27, r27
    71ec:	aa 0f       	add	r26, r26
    71ee:	bb 1f       	adc	r27, r27
    71f0:	8a 0f       	add	r24, r26
    71f2:	9b 1f       	adc	r25, r27
    71f4:	dc 01       	movw	r26, r24
    71f6:	af 5e       	subi	r26, 0xEF	; 239
    71f8:	bd 4f       	sbci	r27, 0xFD	; 253
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
    71fa:	45 e0       	ldi	r20, 0x05	; 5
    71fc:	50 e0       	ldi	r21, 0x00	; 0
    71fe:	42 1b       	sub	r20, r18
    7200:	51 09       	sbc	r21, r1
    7202:	ca 01       	movw	r24, r20
    7204:	99 23       	and	r25, r25
    7206:	0c f4       	brge	.+2      	; 0x720a <keylabel_set+0x48>
    7208:	01 96       	adiw	r24, 0x01	; 1
    720a:	95 95       	asr	r25
    720c:	87 95       	ror	r24
    720e:	38 2f       	mov	r19, r24
	uint8_t startEndSpaces = startText + labelLen;
    7210:	82 0f       	add	r24, r18
		while ((*tempLabelPStr++ != 0) && (labelLen <KEYLABEL_LEN)) {
			labelLen++;
		}
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
    7212:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7214:	0e c0       	rjmp	.+28     	; 0x7232 <keylabel_set+0x70>
		if ((i < startText) || (i >= startEndSpaces)){
    7216:	93 17       	cp	r25, r19
    7218:	10 f0       	brcs	.+4      	; 0x721e <keylabel_set+0x5c>
    721a:	98 17       	cp	r25, r24
    721c:	18 f0       	brcs	.+6      	; 0x7224 <keylabel_set+0x62>
			*charBufPtr = ' ';
    721e:	20 e2       	ldi	r18, 0x20	; 32
    7220:	2c 93       	st	X, r18
    7222:	05 c0       	rjmp	.+10     	; 0x722e <keylabel_set+0x6c>
		} else {
			*charBufPtr = *labelPStr++;
    7224:	fb 01       	movw	r30, r22
    7226:	24 91       	lpm	r18, Z
    7228:	2c 93       	st	X, r18
    722a:	6f 5f       	subi	r22, 0xFF	; 255
    722c:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		charBufPtr++;
    722e:	11 96       	adiw	r26, 0x01	; 1
		i++;
    7230:	9f 5f       	subi	r25, 0xFF	; 255
	}
	char * charBufPtr = & labelBuffer[keyNr*KEYLABEL_LEN];
	uint8_t i = 0;
	uint8_t startText = (KEYLABEL_LEN - labelLen) / 2;
	uint8_t startEndSpaces = startText + labelLen;
	while (i < KEYLABEL_LEN){
    7232:	95 30       	cpi	r25, 0x05	; 5
    7234:	80 f3       	brcs	.-32     	; 0x7216 <keylabel_set+0x54>
			*charBufPtr = *labelPStr++;
		}
		charBufPtr++;
		i++;
	}
}
    7236:	08 95       	ret

00007238 <keylabel_clr>:

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    7238:	90 e0       	ldi	r25, 0x00	; 0
    723a:	fc 01       	movw	r30, r24
    723c:	ee 0f       	add	r30, r30
    723e:	ff 1f       	adc	r31, r31
    7240:	ee 0f       	add	r30, r30
    7242:	ff 1f       	adc	r31, r31
    7244:	8e 0f       	add	r24, r30
    7246:	9f 1f       	adc	r25, r31
    7248:	fc 01       	movw	r30, r24
    724a:	ef 5e       	subi	r30, 0xEF	; 239
    724c:	fd 4f       	sbci	r31, 0xFD	; 253
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    724e:	80 e0       	ldi	r24, 0x00	; 0
    7250:	04 c0       	rjmp	.+8      	; 0x725a <keylabel_clr+0x22>
		*charPtr++ = ' ';
    7252:	90 e2       	ldi	r25, 0x20	; 32
    7254:	90 83       	st	Z, r25
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    7256:	8f 5f       	subi	r24, 0xFF	; 255
		*charPtr++ = ' ';
    7258:	31 96       	adiw	r30, 0x01	; 1
	}
}

void keylabel_clr(uint8_t keyNr){
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    725a:	85 30       	cpi	r24, 0x05	; 5
    725c:	d0 f3       	brcs	.-12     	; 0x7252 <keylabel_clr+0x1a>
		*charPtr++ = ' ';
	}
}
    725e:	08 95       	ret

00007260 <keylabel_toLCD>:

void keylabel_toLCD(){
    7260:	0f 93       	push	r16
    7262:	1f 93       	push	r17
    7264:	cf 93       	push	r28
    7266:	df 93       	push	r29
	uint8_t oldCursor = lcd_cursorPos;
    7268:	d0 91 a8 03 	lds	r29, 0x03A8	; 0x8003a8 <lcd_cursorPos>
	lcd_goto(KEYLABEL_LCDLINE);
    726c:	84 e5       	ldi	r24, 0x54	; 84
    726e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7272:	c0 e0       	ldi	r28, 0x00	; 0
}

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
    7274:	e1 e1       	ldi	r30, 0x11	; 17
    7276:	f2 e0       	ldi	r31, 0x02	; 2
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7278:	08 c0       	rjmp	.+16     	; 0x728a <keylabel_toLCD+0x2a>
		lcd_putc(*pChar++);
    727a:	8f 01       	movw	r16, r30
    727c:	0f 5f       	subi	r16, 0xFF	; 255
    727e:	1f 4f       	sbci	r17, 0xFF	; 255
    7280:	80 81       	ld	r24, Z
    7282:	0e 94 a4 12 	call	0x2548	; 0x2548 <lcd_putc>

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    7286:	cf 5f       	subi	r28, 0xFF	; 255
		lcd_putc(*pChar++);
    7288:	f8 01       	movw	r30, r16

void keylabel_toLCD(){
	uint8_t oldCursor = lcd_cursorPos;
	lcd_goto(KEYLABEL_LCDLINE);
	char *pChar = &labelBuffer[0];
	for (uint8_t i = 0; i < (KEYLABEL_COUNT * KEYLABEL_LEN); i++){
    728a:	c4 31       	cpi	r28, 0x14	; 20
    728c:	b0 f3       	brcs	.-20     	; 0x727a <keylabel_toLCD+0x1a>
		lcd_putc(*pChar++);
	}
	lcd_goto(oldCursor);
    728e:	8d 2f       	mov	r24, r29
    7290:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <lcd_goto>
}
    7294:	df 91       	pop	r29
    7296:	cf 91       	pop	r28
    7298:	1f 91       	pop	r17
    729a:	0f 91       	pop	r16
    729c:	08 95       	ret

0000729e <keylabel_statcheck>:

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
    729e:	90 e0       	ldi	r25, 0x00	; 0
    72a0:	fc 01       	movw	r30, r24
    72a2:	ee 0f       	add	r30, r30
    72a4:	ff 1f       	adc	r31, r31
    72a6:	ee 0f       	add	r30, r30
    72a8:	ff 1f       	adc	r31, r31
    72aa:	8e 0f       	add	r24, r30
    72ac:	9f 1f       	adc	r25, r31
    72ae:	fc 01       	movw	r30, r24
    72b0:	ef 5e       	subi	r30, 0xEF	; 239
    72b2:	fd 4f       	sbci	r31, 0xFD	; 253
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    72b4:	90 e0       	ldi	r25, 0x00	; 0
}

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
    72b6:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    72b8:	12 c0       	rjmp	.+36     	; 0x72de <keylabel_statcheck+0x40>
		uint8_t tempChar = *charPtr;
    72ba:	20 81       	ld	r18, Z
		if ((status == 0) && (tempChar == KEYLABEL_STATEON_CHAR)) {
    72bc:	61 11       	cpse	r22, r1
    72be:	06 c0       	rjmp	.+12     	; 0x72cc <keylabel_statcheck+0x2e>
    72c0:	2a 30       	cpi	r18, 0x0A	; 10
    72c2:	21 f4       	brne	.+8      	; 0x72cc <keylabel_statcheck+0x2e>
			*charPtr = KEYLABEL_STATEOFF_CHAR;
    72c4:	80 e8       	ldi	r24, 0x80	; 128
    72c6:	80 83       	st	Z, r24
			result = 0xFF;
    72c8:	8f ef       	ldi	r24, 0xFF	; 255
    72ca:	07 c0       	rjmp	.+14     	; 0x72da <keylabel_statcheck+0x3c>
		} else if ((status != 0) && (tempChar == KEYLABEL_STATEOFF_CHAR)) {
    72cc:	66 23       	and	r22, r22
    72ce:	29 f0       	breq	.+10     	; 0x72da <keylabel_statcheck+0x3c>
    72d0:	20 38       	cpi	r18, 0x80	; 128
    72d2:	19 f4       	brne	.+6      	; 0x72da <keylabel_statcheck+0x3c>
			*charPtr = KEYLABEL_STATEON_CHAR;
    72d4:	8a e0       	ldi	r24, 0x0A	; 10
    72d6:	80 83       	st	Z, r24
			result = 0xFF;
    72d8:	8f ef       	ldi	r24, 0xFF	; 255
		}
		charPtr++;
    72da:	31 96       	adiw	r30, 0x01	; 1

uint8_t keylabel_statcheck(uint8_t keyNr, uint8_t status){
	// adapt statuscharacter KEYLABEL_STATEON_CHAR KEYLABEL_STATEOFF_CHAR to parameter status
	char* charPtr = & labelBuffer[keyNr * KEYLABEL_LEN];
	uint8_t result = 0;
	for (uint8_t i = 0; i < KEYLABEL_LEN; i++){
    72dc:	9f 5f       	subi	r25, 0xFF	; 255
    72de:	95 30       	cpi	r25, 0x05	; 5
    72e0:	60 f3       	brcs	.-40     	; 0x72ba <keylabel_statcheck+0x1c>
			result = 0xFF;
		}
		charPtr++;
	}
	return result; // true if changes made
}
    72e2:	08 95       	ret

000072e4 <get_StrLenP>:
// -------------------------------------------  G E N E R A L -----------------------------------------

uint8_t get_StrLenP(const __flash char* pString){
    72e4:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    72e6:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    72e8:	94 91       	lpm	r25, Z
    72ea:	99 23       	and	r25, r25
    72ec:	21 f0       	breq	.+8      	; 0x72f6 <get_StrLenP+0x12>
			return result;
		}
		pString++;
    72ee:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    72f0:	8f 5f       	subi	r24, 0xFF	; 255
    72f2:	80 32       	cpi	r24, 0x20	; 32
    72f4:	c8 f3       	brcs	.-14     	; 0x72e8 <get_StrLenP+0x4>
	return result;
}
    72f6:	08 95       	ret

000072f8 <get_StrLen>:

uint8_t get_StrLen(const char* pString){
    72f8:	fc 01       	movw	r30, r24
	uint8_t result = 0;
    72fa:	80 e0       	ldi	r24, 0x00	; 0
	do
	{
		if (*pString == 0) {
    72fc:	90 81       	ld	r25, Z
    72fe:	99 23       	and	r25, r25
    7300:	21 f0       	breq	.+8      	; 0x730a <get_StrLen+0x12>
			return result;
		}
		pString++;
    7302:	31 96       	adiw	r30, 0x01	; 1
	} while (++ result < GET_STRLEN_MAXLEN);
    7304:	8f 5f       	subi	r24, 0xFF	; 255
    7306:	80 32       	cpi	r24, 0x20	; 32
    7308:	c8 f3       	brcs	.-14     	; 0x72fc <get_StrLen+0x4>
	return result;
}
    730a:	08 95       	ret

0000730c <reverse_Bits>:

extern uint8_t reverse_Bits(uint8_t val){
    730c:	28 2f       	mov	r18, r24
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    730e:	90 e0       	ldi	r25, 0x00	; 0
	} while (++ result < GET_STRLEN_MAXLEN);
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
    7310:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 8; i++) {
    7312:	06 c0       	rjmp	.+12     	; 0x7320 <reverse_Bits+0x14>
		result = result << 1;
    7314:	88 0f       	add	r24, r24
		result = result | (val & 0x01);
    7316:	32 2f       	mov	r19, r18
    7318:	31 70       	andi	r19, 0x01	; 1
    731a:	83 2b       	or	r24, r19
		val = val >> 1;
    731c:	26 95       	lsr	r18
	return result;
}

extern uint8_t reverse_Bits(uint8_t val){
	uint8_t result = 0;
	for (uint8_t i = 0; i < 8; i++) {
    731e:	9f 5f       	subi	r25, 0xFF	; 255
    7320:	98 30       	cpi	r25, 0x08	; 8
    7322:	c0 f3       	brcs	.-16     	; 0x7314 <reverse_Bits+0x8>
		result = result << 1;
		result = result | (val & 0x01);
		val = val >> 1;
	}
	return result;
    7324:	08 95       	ret

00007326 <__tablejump2__>:
    7326:	ee 0f       	add	r30, r30
    7328:	ff 1f       	adc	r31, r31
    732a:	88 1f       	adc	r24, r24
    732c:	8b bf       	out	0x3b, r24	; 59
    732e:	07 90       	elpm	r0, Z+
    7330:	f6 91       	elpm	r31, Z
    7332:	e0 2d       	mov	r30, r0
    7334:	19 94       	eijmp

00007336 <eeprom_read_block>:
    7336:	dc 01       	movw	r26, r24
    7338:	cb 01       	movw	r24, r22

0000733a <eeprom_read_blraw>:
    733a:	fc 01       	movw	r30, r24
    733c:	f9 99       	sbic	0x1f, 1	; 31
    733e:	fe cf       	rjmp	.-4      	; 0x733c <eeprom_read_blraw+0x2>
    7340:	06 c0       	rjmp	.+12     	; 0x734e <eeprom_read_blraw+0x14>
    7342:	f2 bd       	out	0x22, r31	; 34
    7344:	e1 bd       	out	0x21, r30	; 33
    7346:	f8 9a       	sbi	0x1f, 0	; 31
    7348:	31 96       	adiw	r30, 0x01	; 1
    734a:	00 b4       	in	r0, 0x20	; 32
    734c:	0d 92       	st	X+, r0
    734e:	41 50       	subi	r20, 0x01	; 1
    7350:	50 40       	sbci	r21, 0x00	; 0
    7352:	b8 f7       	brcc	.-18     	; 0x7342 <eeprom_read_blraw+0x8>
    7354:	08 95       	ret

00007356 <eeprom_read_byte>:
    7356:	f9 99       	sbic	0x1f, 1	; 31
    7358:	fe cf       	rjmp	.-4      	; 0x7356 <eeprom_read_byte>
    735a:	92 bd       	out	0x22, r25	; 34
    735c:	81 bd       	out	0x21, r24	; 33
    735e:	f8 9a       	sbi	0x1f, 0	; 31
    7360:	99 27       	eor	r25, r25
    7362:	80 b5       	in	r24, 0x20	; 32
    7364:	08 95       	ret

00007366 <eeprom_read_word>:
    7366:	a8 e1       	ldi	r26, 0x18	; 24
    7368:	b0 e0       	ldi	r27, 0x00	; 0
    736a:	42 e0       	ldi	r20, 0x02	; 2
    736c:	50 e0       	ldi	r21, 0x00	; 0
    736e:	e5 cf       	rjmp	.-54     	; 0x733a <eeprom_read_blraw>

00007370 <eeprom_update_block>:
    7370:	dc 01       	movw	r26, r24
    7372:	a4 0f       	add	r26, r20
    7374:	b5 1f       	adc	r27, r21
    7376:	41 50       	subi	r20, 0x01	; 1
    7378:	50 40       	sbci	r21, 0x00	; 0
    737a:	40 f0       	brcs	.+16     	; 0x738c <eeprom_update_block+0x1c>
    737c:	cb 01       	movw	r24, r22
    737e:	84 0f       	add	r24, r20
    7380:	95 1f       	adc	r25, r21
    7382:	2e 91       	ld	r18, -X
    7384:	05 d0       	rcall	.+10     	; 0x7390 <eeprom_update_r18>
    7386:	41 50       	subi	r20, 0x01	; 1
    7388:	50 40       	sbci	r21, 0x00	; 0
    738a:	d8 f7       	brcc	.-10     	; 0x7382 <eeprom_update_block+0x12>
    738c:	08 95       	ret

0000738e <eeprom_update_byte>:
    738e:	26 2f       	mov	r18, r22

00007390 <eeprom_update_r18>:
    7390:	f9 99       	sbic	0x1f, 1	; 31
    7392:	fe cf       	rjmp	.-4      	; 0x7390 <eeprom_update_r18>
    7394:	92 bd       	out	0x22, r25	; 34
    7396:	81 bd       	out	0x21, r24	; 33
    7398:	f8 9a       	sbi	0x1f, 0	; 31
    739a:	01 97       	sbiw	r24, 0x01	; 1
    739c:	00 b4       	in	r0, 0x20	; 32
    739e:	02 16       	cp	r0, r18
    73a0:	39 f0       	breq	.+14     	; 0x73b0 <eeprom_update_r18+0x20>
    73a2:	1f ba       	out	0x1f, r1	; 31
    73a4:	20 bd       	out	0x20, r18	; 32
    73a6:	0f b6       	in	r0, 0x3f	; 63
    73a8:	f8 94       	cli
    73aa:	fa 9a       	sbi	0x1f, 2	; 31
    73ac:	f9 9a       	sbi	0x1f, 1	; 31
    73ae:	0f be       	out	0x3f, r0	; 63
    73b0:	08 95       	ret

000073b2 <eeprom_update_word>:
    73b2:	01 96       	adiw	r24, 0x01	; 1
    73b4:	27 2f       	mov	r18, r23
    73b6:	ec df       	rcall	.-40     	; 0x7390 <eeprom_update_r18>
    73b8:	ea cf       	rjmp	.-44     	; 0x738e <eeprom_update_byte>

000073ba <_exit>:
    73ba:	f8 94       	cli

000073bc <__stop_program>:
    73bc:	ff cf       	rjmp	.-2      	; 0x73bc <__stop_program>
